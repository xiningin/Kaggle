{"cell_type":{"ce8f5d52":"code","f29c4108":"code","54cbb8ed":"code","7ca3c9fa":"code","68c01006":"code","2c9ab9cb":"code","f03b6fbb":"code","55394355":"code","e1a2fd37":"code","a86505a4":"code","d44bcfea":"code","0e689358":"code","1e3fa03d":"code","366a822f":"code","2b264c01":"code","96ff42fc":"code","374e5179":"code","35697414":"code","1ef725f2":"code","456bfb3d":"code","c02060f9":"code","5beaef00":"code","a1df5d2a":"code","03c402d1":"code","9ba5ec35":"code","ee27ab24":"code","bc9fffec":"code","06e3c826":"code","0f2ca3b8":"code","62c9bdd5":"code","1d2c5a53":"code","4001c30e":"code","0b0532c4":"code","f704f055":"code","b63b26b8":"code","abcb29b1":"markdown","396f1c85":"markdown","88d104e3":"markdown","ca0fb7d7":"markdown","3c6d5555":"markdown","c37507ea":"markdown","6782e950":"markdown","ce956b71":"markdown","223cd305":"markdown","bfb9ecc8":"markdown","2164ccb0":"markdown","31c96930":"markdown","7906fd61":"markdown","c3e6d182":"markdown","d89dff01":"markdown","37749b0f":"markdown","5e6774a9":"markdown","344bc8fa":"markdown","fad91bd9":"markdown","1cf392a8":"markdown","2a83e2cb":"markdown","38fc975d":"markdown","90ef6aee":"markdown","142090c8":"markdown","dd578889":"markdown","5cbf3646":"markdown","8144e7b9":"markdown","33a096bd":"markdown","d2137626":"markdown","f5a165cb":"markdown","cf6b8c74":"markdown","8a69af10":"markdown","989d4424":"markdown","df168b04":"markdown","cd0cc897":"markdown","e67645c5":"markdown","e37ba563":"markdown","c9b82be0":"markdown","0927cc6e":"markdown","a5ec10dd":"markdown","01d2d927":"markdown","28edbe0e":"markdown","17cbec1d":"markdown","6d95d7a9":"markdown"},"source":{"ce8f5d52":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nimport plotly.offline as offline\nimport plotly.graph_objs as go\noffline.init_notebook_mode(connected = True)","f29c4108":"df_21 = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv',low_memory=False)\nquestions = df_21.iloc[0, :].T\ndf_21 = df_21.iloc[1:, :]","54cbb8ed":"# converting gender into Man, Woman & ETC\ndf_21['Q2'] = df_21['Q2'].apply(lambda x : 'ETC' if x not in ['Man', 'Woman'] else x)\n\n# Replacing some country names\ndf_21['Q3'] = df_21['Q3'].replace(['United States of America','United Kingdom of Great Britain and Northern Ireland'], ['USA','UK & NI'])\n\ndf_21 = df_21.replace('Jupyter (JupyterLab, Jupyter Notebooks, etc) ', 'Jupyter')\n\ndf_21 = df_21.replace(['A laptop', 'A personal computer \/ desktop',\n       'A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc)',\n       'A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)'],['Laptop', 'Personal Computer',\n       'Cloud Platform', 'Deep Learning Workstation'])\n\ndf_21 = df_21.replace([ 'Gradient Boosting Machines (xgboost, lightgbm, etc)', 'Dense Neural Networks (MLPs, etc)', \n                       'Transformer Networks (BERT, gpt-3, etc)'], ['Gradient Boosting','Dense NN','Transformer'])\n\ndf_21 = df_21.replace(['Word embeddings\/vectors (GLoVe, fastText, word2vec)', 'Contextualized embeddings (ELMo, CoVe)',\n                       'Encoder-decorder models (seq2seq, vanilla transformers)',\n                       'Transformer language models (GPT-3, BERT, XLnet, etc)'], \n                      ['Word Embeddings','Contextualized Embeddings','Encoder-Decorder Models',' Transformer language Models'])\n\ndf_21 = df_21.replace(['General purpose image\/video tools (PIL, cv2, skimage, etc)','Image segmentation methods (U-Net, Mask R-CNN, etc)',\n                      'Object detection methods (YOLOv3, RetinaNet, etc)', 'Generative Networks (GAN, VAE, etc)',\n                       'Image classification and other general purpose networks (VGG, Inception, ResNet, ResNeXt, NASNet, EfficientNet, etc)'],\n                      ['Image\/Video Tools','Image Segmentation Methods','Object Detection Methods', 'Generative Network',\n                       'Image Classification & Other General Networks'])\n\ndf_21 = df_21.replace(['Manufacturing\/Fabrication', 'Academics\/Education', 'Computers\/Technology', 'Other', \n                       'Shipping\/Transportation', 'Energy\/Mining', 'Insurance\/Risk Assessment', 'Non-profit\/Service',\n                       'Accounting\/Finance', 'Hospitality\/Entertainment\/Sports', 'Government\/Public Service',\n                       'Online Service\/Internet-based Services', 'Online Business\/Internet-based Sales',\n                       'Medical\/Pharmaceutical', 'Retail\/Sales', 'Broadcasting\/Communications', 'Marketing\/CRM',\n                       'Military\/Security\/Defense'], ['Manufacturing', 'Academics', 'Technology', 'Other', \n                       'Transportation', 'Energy', 'Insurance', 'Non-profit', 'Finance', 'Entertainment', 'Government', \n                       'Online Service',  'Online Business', 'Medical', 'Retail', 'Communications', 'Marketing',\n                       'Military'])\n\ndf_21 = df_21.replace(['1000-9,999 employees','10,000 or more employees','50-249 employees','0-49 employees',\n                       '250-999 employees'], ['1000-9,999  ','10,000+  ','50-249  ','0-49  ','250-999  ']) ","7ca3c9fa":"# containing data related to DS Field\ndf_data = df_21[(df_21['Q5']!='Student')&(df_21['Q5']!='Currently not employed')&(df_21['Q5']!='Developer Relations\/Advocacy')]\n\n# for the analysis i am only taking data that contains response from Students, DS, ML & RS\ndf1 = df_21[df_21.Q5.isin(['Student','Data Scientist','Machine Learning Engineer','Research Scientist'])]\n\n# for the analysis i am only taking data that contains response from DS, ML & RS\ndf_ns = df_21[df_21.Q5.isin(['Data Scientist','Machine Learning Engineer','Research Scientist'])]","68c01006":"fig=go.Figure()\nfig.add_trace(go.Scatter(\n    x=[0.5, 2.4],\n    y=[1.6, 1.6],\n    mode=\"text\", \n    text=[\"<span style='font-size:33px'><b>42<\/b><\/span>\", \n          \"<span style='font-size:33px'><b>25973<\/b><\/span>\"],\n    textposition=\"bottom center\"\n))\nfig.add_trace(go.Scatter(\n    x=[0.5, 2.4],\n    y=[1.1, 1.1],\n    mode=\"text\", \n    text=[\"Questions\", \"Responses\"],\n    textposition=\"bottom center\"\n))\nfig.add_hline(y=2.2, line_width=5, line_color='gray')\nfig.add_hline(y=0.3, line_width=3, line_color='gray')\nfig.update_yaxes(visible=False)\nfig.update_xaxes(visible=False)\nfig.update_layout(height=300, width=700, hovermode=False, showlegend=False,\n                  title=\"Kaggle Survey Summary\", title_x=0.5, title_y=0.9,\n                  xaxis_range=[-0.5,3.6], yaxis_range=[-0.2,2.2],                 \n                  margin=dict(t=90, b=0, l=70, r=70),\n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=35, color='#8a8d93'),\n                  font=dict(size=23, color='#8a8d93'),\n                 )","2c9ab9cb":"fig = make_subplots(1, 3, horizontal_spacing=0, vertical_spacing=0)                    \ny=[2, 2]\nx=[1, 1.01]\n\nfig.add_trace(go.Scatter(x=x, y=y, mode='markers', name='2019',\n                         marker=dict(size=[80, 130], color=[2, '#496595'])), 1,1)\nfig.add_trace(go.Scatter(x=x, y=y, mode='markers', name='2020',\n                         marker=dict(size=[105, 120], color=[2, '#496595'])), 1,2)\nfig.add_trace(go.Scatter(x=x, y=y, mode='markers', name='2021', \n                         marker=dict(size=[90, 120], color=[2, '#496595'])), 1,3)\n\n# annotation\nfig.add_trace(go.Scatter(x=x, y=y, showlegend=False, mode=\"text\",\n                         text=[\"<b>Woman<\/b><br> 16.3%\",\"<b>Man<\/b><br> 81.8%\"]\n                        ), 1,1)\nfig.add_trace(go.Scatter(x=x, y=y, showlegend=False, mode=\"text\",\n                         text=[\"<b>Woman<\/b><br> 19.4%\",\"<b>Man<\/b><br> 78.8%\"]), 1,2)\nfig.add_trace(go.Scatter(x=x, y=y, showlegend=False, mode=\"text\",\n                         text=[\"<b>Woman<\/b><br> 18.8%\",\"<b>Man<\/b><br> 79.3%\"]), 1,3)\n\nfig.update_xaxes(visible=False)\nfig.update_yaxes(visible=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(height=300, hovermode=False, showlegend=False,\n                  title=\"<span style='font-size:45px; font-family:Times New Roman'>Gender Ratio over the time period<\/span>\",\n                  margin=dict(t=110, b=40, l=50, r=50),\n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=25, color='#8a8d93'),\n                  font=dict(size=15, color='#C5C5C5'),\n                 )\nfig.add_annotation(dict(x=0.15, y=-0.02, ax=0, ay=0,\n                    xref = \"paper\", yref = \"paper\",\n                    text= \"2019\"\n                  ))\nfig.add_annotation(dict(x=0.5, y=-0.02, ax=0, ay=0,\n                    xref = \"paper\", yref = \"paper\",\n                    text= \"2020\"\n                  ))\nfig.add_annotation(dict(x=0.81, y=-0.02, ax=0, ay=0,\n                    xref = \"paper\", yref = \"paper\",\n                    text= \"2021\"\n                  ))\n\nfig.show()","f03b6fbb":"# data\ndf_q5 = df_data['Q5'].value_counts().reset_index()\ndf_q5['per'] = ((df_q5['Q5'] \/ df_q5['Q5'].sum())*100).round(2).astype(str) + '%'\n\n# chart\nfig = px.bar(df_q5, y='index', x='Q5', text='per', color='per', \n             color_discrete_sequence=['#334668','#334668','#334668','#91A2BF','#91A2BF','#91A2BF','#91A2BF',\n                                     '#91A2BF','#91A2BF','#91A2BF','#91A2BF','#91A2BF']\n            )\n# styling\nfig.update_xaxes(visible=False)\nfig.update_yaxes(categoryorder='total ascending', ticksuffix='  ')\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(height=450, yaxis_title='', hovermode='y unified', showlegend=False,\n                  title=\"<span style='font-size:45px; font-family:Times New Roman'>How common is Data Oriented Jobs?<\/span>\",\n                  margin=dict(t=90, b=40, l=0, r=0),               \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=30, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(size=13, color='#8a8d93'))\nfig.show()","55394355":"# Circlify library is not working on kaggle u may run this code in jupyter NB\n# pip import circlify\n\n'''# import the circlify library (Code is hidden)\nimport circlify\nimport matplotlib.pyplot as plt\n\nQ5 = df1['Q5'].value_counts().tolist()\nQ5_labels = [\"ML Engineer\\n11.1%\",'Research\\n Scientist\\n11.4%','Data Scientist\\n26.9%','Student\\n50.6%']\n\n# compute circle positions:\ncircles = circlify.circlify(\n    Q5, \n    show_enclosure=False, \n    target_enclosure=circlify.Circle(x=0, y=0, r=4)\n)\n\nfig, ax = plt.subplots(figsize=(9,9))\n#fig.patch.set_facecolor('#333')\n#ax.set_facecolor('#333')\nax.axis('off')\n\n# Find axis boundaries\nlim = max(\n    max(\n        abs(circle.x) + circle.r,\n        abs(circle.y) + circle.r,\n    )\n    for circle in circles\n)\nplt.xlim(-lim, lim)\nplt.ylim(-lim, lim)\n\n# list of labels\nlabels = Q5_labels\n# print circles\nfor circle, label in zip(circles, labels):\n    x, y, r = circle\n    if label in ['Data Scientist\\n26.9%','Student\\n50.6%']:\n        ax.add_patch(plt.Circle((x, y), r*0.95, alpha=0.6, facecolor=\"#334668\", edgecolor=\"#334668\"))\n        plt.annotate(label, (x,y ) ,va='center', ha='center',  fontsize=17, color='#333')\n    else:\n        ax.add_patch(plt.Circle((x, y), r*0.95, alpha=0.5, facecolor='#6D83AA', edgecolor='#6D83AA'))\n        plt.annotate(label, (x,y ) ,va='center', ha='center',  fontsize=14, color='#444')\n\nplt.title(\"Response Ratio\",fontsize=45, color='#333')\nplt.show()'''","e1a2fd37":"df_ns['Counter']=1\ndf_q1_5 = df_ns.groupby(['Q5','Q1'])['Counter'].sum().reset_index()\nfig = px.histogram(df_q1_5, x='Q1', y='Counter', color='Q5',\n                   color_discrete_sequence=['#334668','#496595','#6D83AA'])\nfig.update_yaxes(visible=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(height=400, xaxis_title='', hovermode='x unified', \n                  title=\"<span style='font-size:50px; font-family:Times New Roman'>Age is just a Number<\/span>\",\n                  margin=dict(t=110, b=40, l=110, r=110),               \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=30, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(size=13, color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"v\", yanchor=\"bottom\", xanchor=\"center\", x=0.85, y=0.6,\n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=13)\n)\nfig.add_annotation(dict(x=-0.09,y=1.17,  align='left', xref = \"paper\", yref = \"paper\", showarrow = False, font_size=13,\n                        text=\"<span style='size:16px'>Students in their early age of education are in age group 18-25 <\/span>\"))\nfig.show()","a86505a4":"# data\ndf1['Counter']=1\ndf_52 = df1.groupby([\"Q5\",\"Q2\"])['Counter'].count()\ndf_52 = df_52.reset_index()\ndf_52 = df_52[df_52['Q2']!='ETC']\n\n# chart\nfig = px.treemap(df_52, path=['Q2','Q5'],values='Counter', color_discrete_sequence=['#496595','#f36196'])\nfig.update_layout(height=350, title_y=0.85,\n                  title=\"<span style='font-size:50px; font-family:Times New Roman'>Gender Ratio<\/span>\",\n                  margin=dict(t=90, b=30, l=30, r=30),               \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=30, color='#8a8d93', family=\"Times New Roman\"),\n                  font=dict(size=13, color='#8a8d93'))\nfig.show()","d44bcfea":"# data\ndf1['Counter']=1\ndf_42 = df_ns.groupby([\"Q5\",\"Q4\"])['Counter'].count()\ndf_42 = df_42.reset_index()\n\n# chart\nfig = px.histogram(df_42, y='Q4', color='Q5', x='Counter', histnorm='percent',\n                  color_discrete_sequence=['#334668','#496595','#6D83AA','#91A2BF'])\nfig.update_traces(hovertemplate=None)\nfig.update_xaxes(showgrid=False, zeroline=False)\nfig.update_yaxes(tickmode = 'array', \n                 tickvals=[\"Some college\/university study without earning a bachelor\u2019s degree\", \"Professional doctorate\",\n                          \"No formal education past high school\", \"Master\u2019s degree\", \"I prefer not to answer\",\n                          \"Bachelor\u2019s degree\", 'Doctoral degree'],\n                 ticktext=[\"Without Bachelor's  <br>  Degree  \", \"Professional doctorate  \",\n                           \"No formal education  <br> past high school  \", \"Master\u2019s degree  \", \"Prefer not to answer  \",\n                           \"Bachelor\u2019s degree  \", \"Doctoral degree  \"])\nfig.update_layout(height=470, yaxis_title='', xaxis_title='', barnorm='percent',\n                  title=\"<span style='font-size:50px; font-family:Times New Roman'>Highest Level of Education<\/span>\",\n                  #<br>have attained or plan to attain within the next 2 Y\",\n                  title_y=0.85, bargap=0.3,\n                  margin=dict(t=170, b=40, l=30, r=30),               \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=30, color='#8a8d93', family=\"Times New Roman\"),\n                  font=dict(color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"v\", yanchor=\"bottom\", xanchor=\"center\", x=0.8, y=1.2, \n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=13))\nfig.add_annotation(dict(\n        x=-0.17,\n        y=1.24,\n        text= \"Majority of people have Master's degree with <b>39%,<\/b> Bachelor's degree with <b>38%<\/b>\", \n        xref = \"paper\",\n        yref = \"paper\",\n        showarrow = False\n        \n))\nfig.add_annotation(dict(\n        x=-0.17,\n        y=1.18,\n        text= \"& Doctoral degree with <b>11%<\/b>\",\n        xref = \"paper\",\n        yref = \"paper\",\n        showarrow = False\n        \n))\nfig.show()","0e689358":"df1 = df1[df1['Q3']!='Other']\n\ndf_c = pd.crosstab(df1['Q5'], df1['Q3'], margins=True).T.sort_values(by='All', ascending=False)[:11].iloc[1: , :].reset_index()\ndf_c=df_c.sort_values(by='All', ascending=True)\n\nfig = make_subplots(rows=1, cols=2, column_widths=[0.4,0.6], shared_yaxes=True, horizontal_spacing=0)\nfig.append_trace(go.Bar(x=df_c['Research Scientist'], y=df_c.Q3, orientation='h', showlegend=True, \n                        text=df_c['Research Scientist'], name='Research Scientist', marker_color='#6D83AA'), 1, 1)\nfig.append_trace(go.Bar(x=df_c['Data Scientist'], y=df_c.Q3, orientation='h', showlegend=True, \n                        text=df_c['Data Scientist'], name='Data Scientist', marker_color='#334668'), 1, 2)\nfig.append_trace(go.Bar(x=-df_c['Machine Learning Engineer'], y=df_c.Q3, orientation='h', showlegend=True, \n                        text=df_c['Machine Learning Engineer'], name='Machine Learning Engineer', marker_color='#496595'), 1, 2)\nfig.update_xaxes(showgrid=False, zeroline=False)\nfig.update_yaxes(ticksuffix='  ')\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)),\n                  textposition='auto')\nfig.update_layout(height=500, barmode='overlay', \n                  title=\"<span style='font-size:50px; font-family:Times New Roman'>Top 10 Country<\/span>\",\n                  margin=dict(t=110, b=40, l=120, r=40),               \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=30, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(size=13, color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"v\", yanchor=\"bottom\", xanchor=\"center\", x=0.83, y=1.05,\n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=13))\nfig.show()","1e3fa03d":"df1_copy = df1.copy()\ndf1_copy = df1_copy[(df1_copy['Q3']!='Other')&(df1_copy['Q3']!='India')&(df1_copy['Q3']!='USA')]\n\ndf_c = pd.crosstab(df1_copy['Q5'], df1_copy['Q3'], margins=True).T.sort_values(by='All', ascending=False)[:11].iloc[1: , :].reset_index()\ndf_c=df_c.sort_values(by='All', ascending=True)\n\nfig = make_subplots(rows=1, cols=2, column_widths=[0.4,0.6], shared_yaxes=True, horizontal_spacing=0)\nfig.append_trace(go.Bar(x=df_c['Research Scientist'], y=df_c.Q3, orientation='h', showlegend=True, \n                        text=df_c['Research Scientist'], name='Research Scientist', marker_color='#6D83AA'), 1, 1)\nfig.append_trace(go.Bar(x=df_c['Data Scientist'], y=df_c.Q3, orientation='h', showlegend=True, \n                        text=df_c['Data Scientist'], name='Data Scientist', marker_color='#334668'), 1, 2)\nfig.append_trace(go.Bar(x=-df_c['Machine Learning Engineer'], y=df_c.Q3, orientation='h', showlegend=True, \n                        text=df_c['Machine Learning Engineer'], name='Machine Learning Engineer', marker_color='#496595'), 1, 2)\nfig.update_xaxes(showgrid=False, zeroline=False)\nfig.update_yaxes(ticksuffix='  ')\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)),\n                  textposition='auto')\nfig.update_layout(height=500, barmode='overlay', \n                  title=\"<span style='font-size:50px; font-family:Times New Roman'>Top 10 Country<\/span>\",\n                  margin=dict(t=110, b=40, l=120, r=40),               \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=30, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(size=13, color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"v\", yanchor=\"bottom\", xanchor=\"center\", x=0.83, y=1.05,\n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=13))\nfig.show()","366a822f":"df_56 = df_ns.groupby([\"Q5\",\"Q6\"]).agg({'Counter': 'sum'})\ndemo = df_56.groupby(level=0).apply(lambda x: 100 * x \/ float(x.sum())).reset_index()\ndemo['Counter'] = round(demo['Counter'],2)\ndemo = demo.replace('I have never written code','never code')\n\n\nfig = px.scatter(demo, y='Q6', color='Counter', x='Q5', size='Counter',\n                 color_discrete_sequence=px.colors.sequential.swatches_continuous())\nfig.update_yaxes(showgrid=False, zeroline=False, ticksuffix='   ', categoryorder='array',\n                 categoryarray=['20+ years',  '10-20 years', '5-10 years',  '3-5 years', \n                                '1-3 years', '< 1 years', 'never code'])\nfig.update_xaxes(showgrid=False)\nfig.update_traces(marker=dict(line=dict(width=0)))\nfig.update_layout(height=400, xaxis_title='', yaxis_title='', \n                  title=\"<span style='font-size:45px; font-family:Times New Roman'>How Many Years Of Coding?<\/span><br>The chart shows the value in percentage\",\n                  margin=dict(t=110, b=30, l=270, r=270),               \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=17, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(size=13, color='#8a8d93'))\nfig.show()","2b264c01":"df_ds = df1[df1['Q5']=='Data Scientist']\ndf_exp = df_ds.value_counts(['Q6','Q5']).reset_index()\ndf_exp = df_exp.loc(axis=0)[6,3,0,1,2,4,5].reset_index()\n\n\nfig = px.scatter(df_exp, y='Q6', x=0, color='Q5')\nfor i in range(0, len(df_exp)):\n    fig.add_shape(type='line',\n                              y0 = df_exp['Q6'][i],\n                              x0 = i,\n                              x1 = df_exp[0][i],\n                              y1 = i,\n                              line=dict(color='#656565', width = 2))\nfig.update_xaxes(showgrid=False, zeroline=False)\nfig.update_yaxes(ticksuffix='  ', showgrid=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)),marker_color='#56627d', marker_size=32)\nfig.update_layout(height=350, xaxis_title='', yaxis_title='', title_y=0.45,\n                  title=\"<span style='font-size:35px; font-family:Times New Roman'>How Many Years of Programming Experience: DS<\/span>\",\n                  margin=dict(t=80, b=30, l=120, r=40),               \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=30, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(size=13, color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"v\", yanchor=\"bottom\", xanchor=\"center\", x=0.83, y=0.8,\n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=13))\nfig.show()","96ff42fc":"# chart\n#1. Bar chart: Tells the highest responses from top 10 countries having Data Scientist\n#2. Scatter chart: Top 10 country DS & finding out the highest experinece which country has \n\n\n# (1 bar chart)\ndf_c = df_ds['Q3'].value_counts().reset_index()[:10]\n# (2 scatter chart)\ndf_ds_c = pd.crosstab(df_ds['Q3'], df_ds['Q6'], margins=True, margins_name=\"Total\").sort_values(by='Total', ascending=False).reset_index()\ndf_ds_c = df_ds_c.iloc[1:, :-1][:10] \n\n# chart\nfig = make_subplots(rows=2, cols=1, shared_xaxes=True, horizontal_spacing=0.01, vertical_spacing=0.04)                    \nfig.add_trace(go.Bar(x=df_c['index'], y=df_c['Q3'], marker_color='#56627d', name='Data Scientist', \n                     text = df_c['Q3'], textposition = \"inside\",\n                     ), row=1, col=1)\nfig.add_trace(go.Scatter(x=df_ds_c['Q3'], y=[-53,-43,-30,-27,-20,-25,-37,-21,-20,-15],\n                         text=[53,43,30,27,20,25,37,21,20,15], textposition = \"top center\",\n                         mode='markers', showlegend=False, name=\"Experience\",      \n    marker=dict(size=[130,90,60,50,45,47,75,40,35,30], \n                color=['#56627d','#c6ccd8','#334668','#56627d','#c6ccd8',\n                       '#334668','#56627d','#56627d','#56627d','#334668']\n)), row=2, col=1)\n\nlist1={0:'-11', 1:'-15', 2:'-20', 3:'-16', 4:'-27', 5:'-15', 6:'-22', 7:'-19',8:'-31', 9:'-36'}\nfor key,value in list1.items():\n    fig.add_shape(type='line', x0=key, y0=-1, x1=key, y1=value,\n            line=dict(color='#c6ccd8', width = 2), row=2, col=1)\n\n# styling\nfig.update_xaxes(visible=False, categoryorder='total ascending', row=1, col=1)\nfig.update_xaxes(showgrid=False, mirror=\"allticks\", side='top',  row=2, col=1)\nfig.update_yaxes(visible=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(height=750, width=750, hovermode='x unified',\n                  title=\"<span style='font-size:50px; font-family:Times New Roman'>Top 10 Country: Data Science<\/span><br> Finding the highest experience\",\n                  margin=dict(t=130, b=10, l=30, r=0),               \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=30, color='#8a8d93', family=\"Times New Roman\"),\n                  font=dict(color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"v\", yanchor=\"bottom\", xanchor=\"center\", x=0.2, y=0.9, \n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=13))\nfig.add_annotation(dict(x=0.21, y=1.02, ax=0, ay=0, xref = \"paper\", yref = \"paper\", font_size=12,\n                    text= \"Experience in coding <span style='font-size: 16px; color: #56627d'><b>1-3Y<\/b><\/span>, <span style='font-size: 16px;color: #334668'><b>3-5Y<\/b><\/span>, <span style='font-size: 15px;color: #c6ccd8'>5-10Y<\/span>\"\n                   ))\nfig.show()","374e5179":"# data\ndf_ns['Q7'] = df_ns[df_ns.columns[7:18]].apply(\n    lambda x: ','.join(x.dropna().astype(str)),\n    axis=1\n)\ndf7_copy = df_ns.assign(Q7=df_ns['Q7'].str.split(',')).explode('Q7')\ndf7_copy['Counter']=1\ndf7_copy = df7_copy.groupby([\"Q7\",\"Q5\"])['Counter'].count().reset_index().iloc[3: , :]\n\n# chart\nfig = px.scatter(df7_copy, y='Counter', x='Q7', color='Q5', size='Counter',\n                color_discrete_sequence=['#7787a5','#bac1d1','#32527b'])\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_xaxes(showgrid=False,categoryorder='total descending')\nfig.update_yaxes(visible=False)\nfig.update_layout(height=400, xaxis_title='', hovermode='x unified',\n                  title=\"<span style='font-size:50px; font-family:Times New Roman'>Most Used Langauge<\/span>\",\n                  margin=dict(t=110, b=40, l=40, r=40),               \n                  plot_bgcolor='#303030', paper_bgcolor='#303030',\n                  title_font=dict(size=30, color='#8a8d93', family=\"Times New Roman\"),\n                  font=dict(size=13, color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"h\", yanchor=\"bottom\", xanchor=\"center\", x=0.5, y=-0.45,\n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=13))\nfig.show()","35697414":"# to create a treamap\ndf1_8 = df1[['Q5','Q8']].copy()\ndf1_8 = pd.DataFrame(df1_8['Q8'].value_counts()).reset_index() \n\nfig1 = px.treemap(df1_8, path=['index'],values='Q8', color_discrete_sequence=px.colors.qualitative.T10)\nfig1.update_layout(height=350,  \n                  title=\"<span style='font-size:37px; font-family:Times New Roman'>Recommending Langauges for DS<\/span><br>Most common used Languages are Python, R, SQL and C,C++\",\n                  margin=dict(t=80, b=30, l=60, r=60),                \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=20, color='#8a8d93', family=\"Times New Roman\"),\n                  font=dict(color='#8a8d93'))\n\n# to create the most used visualization library\nfig = go.Figure(go.Scatter(x=[0,1,2,0], y=[0,1,0,0], mode='lines',fill=\"toself\", line=dict(color=\"#c6ccd8\"),fillcolor='#c6ccd8'))\nfig.add_shape(type=\"rect\", x0=0, y0=-0.05, x1=0.7, y1=-1.5, line=dict(color=\"#c6ccd8\"), fillcolor='#c6ccd8')\nfig.add_shape(type=\"rect\", x0=0.8, y0=-0.05, x1=1.3, y1=-1.5, line=dict(color=\"#c6ccd8\"), fillcolor='#c6ccd8')\nfig.add_shape(type=\"rect\", x0=1.4, y0=-0.05, x1=1.7, y1=-1.5, line=dict(color=\"#c6ccd8\"), fillcolor='#c6ccd8')\nfig.add_shape(type=\"rect\", x0=1.8, y0=-0.05, x1=2, y1=-1.5, line=dict(color=\"#c6ccd8\"), fillcolor='#c6ccd8')\n\nfig.update_yaxes(visible=False)\nfig.update_xaxes(visible=False)\nfig.add_annotation(dict(x=0.51, y=0.72, ax=0, ay=0, xref = \"paper\", yref = \"paper\", text= \"Mostly used<br> Visualization\"))\nfig.add_annotation(dict(x=0.16, y=0.25, ax=0, ay=0, xref = \"paper\", yref = \"paper\", \n                        text= \"  Matplotlib +<br>seaborn<br> <b>59%<\/b>\"))\nfig.add_annotation(dict(x=0.52, y=0.28, ax=0, ay=0, xref = \"paper\", yref = \"paper\", text= \"Plotly <br> <b>13.8%<\/b>\"))\nfig.add_annotation(dict(x=0.78, y=0.28, ax=0, ay=0, xref = \"paper\", yref = \"paper\", text= '<span style=\"font-size:15px\">Ggplot <br><b>10.5%<\/b><\/span>'))\nfig.add_annotation(dict(x=0.95, y=0.28, ax=0, ay=0, xref = \"paper\", yref = \"paper\", text= \"Oth<br>er\"))\nfig.update_layout(height=370, margin=dict(b=40,t=40,l=300,r=300), font_size=20,\n                  plot_bgcolor='#333', paper_bgcolor='#333', hovermode=False\n)\n\nfig1.show()\nfig.show()","1ef725f2":"import numpy as np\n\nl_lst = [\"Q9_Part_1\", \"Q9_Part_2\", \"Q9_Part_3\", \"Q9_Part_4\", \"Q9_Part_5\", \"Q9_Part_6\",\n                \"Q9_Part_7\", \"Q9_Part_8\", \"Q9_Part_9\", \"Q9_Part_10\"]\ndf1_copy = df_ns[['Q5',\"Q9_Part_1\", \"Q9_Part_2\", \"Q9_Part_3\", \"Q9_Part_4\", \"Q9_Part_5\", \"Q9_Part_6\",\n                \"Q9_Part_7\", \"Q9_Part_8\", \"Q9_Part_9\", \"Q9_Part_10\"]]\n\n# merging the data into one col 'Q9'\ndf1_copy=df1_copy.replace(np.NaN,'0')\ndf1_copy['Q9']=df1_copy[l_lst].apply(lambda row: ','.join(row.values.astype(str)), axis=1).fillna('')\ndf1_copy['Q9']=df1_copy['Q9'].str.replace('0,', '')\ndf1_copy['Q9']=df1_copy['Q9'].str.replace(',0', '')\ndf1_copy['Q9']=df1_copy['Q9'].str.replace('0', '')\n# dropping the unwanted col\ndf1_copy.drop(df1_copy.columns[1:11], axis=1, inplace=True)\ndf1_copy = df1_copy.assign(Q9 = df1_copy['Q9'].str.split(',')).explode('Q9')\ndf1_copy['Counter']=1\ndf1_final = df1_copy.groupby([\"Q9\",\"Q5\"])['Counter'].count().reset_index()\ndf1_final=df1_final.iloc[3: , :].set_index(['Q9','Q5'])\ndf1_final= round(df1_final \/ df1_final.groupby(level=1).sum()*100,2).reset_index()\n\n\nfig = px.scatter(df1_final, x='Q9', y='Q5', size='Counter', color='Q5',\n                 color_discrete_sequence=px.colors.qualitative.T10)\nfig.update_xaxes(showgrid=False, zeroline=False, tickmode = 'array', \n                 tickvals=df1_final['Q9'].unique().tolist(),\n                 ticktext=[\"Notepad++\",\"Spyder\",\"Sublime<br>Text\",\"Vim\/<br>Emacs\",\"MATLAB\",\n                           \"PyCharm\",\"RStudio\",\"Visual<br>Studio\",\"Visual<br>Studio<br>Code\",\"Jupyter\"])\nfig.update_yaxes(showgrid=False, ticksuffix='  ')\nfig.update_traces(marker=dict(line=dict(width=0)))\nfig.update_layout(height=370, xaxis_title='', yaxis_title='', \n                  title=\"<span style='font-size:37px; font-family:Times New Roman'>Commonly used IDE's on Regular basis\",\n                  margin=dict(t=110, b=0, l=0, r=30),  showlegend=False,              \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=30, color='#8a8d93', family=\"Times New Roman\"),\n                  font=dict(color='#8a8d93'))                 \nfig.show()","456bfb3d":"# data\ndf1['Q10'] = df1[df1.columns[34:49]].apply(\n    lambda x: ','.join(x.dropna().astype(str)),\n    axis=1\n)\ndf10_copy = df1.assign(Q10=df1['Q10'].str.split(',')).explode('Q10')\ndf10_copy['Counter']=1\ndf_Q10 = df10_copy.groupby([\"Q10\",\"Q5\"])['Counter'].count().reset_index().iloc[4: , :]\ndf_Q10 = df_Q10.replace([' Amazon EMR Notebooks ', ' Amazon Sagemaker Studio Notebooks ', ' Binder \/ JupyterHub ',\n       ' Code Ocean ', ' Databricks Collaborative Notebooks ', ' Deepnote Notebooks ', ' IBM Watson Studio ', \n       ' Kaggle Notebooks', ' Observable Notebooks ', ' Paperspace \/ Gradient ', ' Zeppelin \/ Zepl Notebooks ', \n       'Azure Notebooks', 'Colab Notebooks', 'Google Cloud Datalab', 'Google Cloud Notebooks (AI Platform \/ Vertex AI) '],\n       ['Amazon EMR NB', 'Amazon Sagemaker Studio NB', 'Binder \/ JupyterHub', 'Code Ocean', 'Databricks Collaborative NB',\n        ' Deepnote NB', 'IBM Watson Studio ', 'Kaggle NB', 'Observable NB', ' Paperspace \/ Gradient',\n       'Zeppelin \/ Zepl NB', 'Azure NB', 'Colab NB', 'Google Cloud Datalab', 'Google Cloud NB'])\n\n\nfig = px.histogram(df_Q10, x='Counter', y='Q10', color='Q5', barnorm='percent',\n                  color_discrete_sequence=['#334668','#496595','#6D83AA','#91A2BF'])\nfig.update_xaxes(showgrid=False, zeroline=False)\nfig.update_yaxes(showgrid=False, ticksuffix='  ', showline=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(height=500, xaxis_title='', yaxis_title='', \n                  barmode='stack', barnorm='percent',\n                  title_y=0.8,\n                  title=\"<span style='font-size:37px; font-family:Times New Roman'>Mostly used hosted NB Products on<br>Regular basis\",\n                  margin=dict(t=150, b=0, l=0, r=30),  showlegend=True,              \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=30, color='#8a8d93', family=\"Times New Roman\"),\n                  font=dict(color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"h\", yanchor=\"bottom\", xanchor=\"center\", x=0.5,y=1.02,\n                              bordercolor=\"#fff\", borderwidth=0.3, font_size=11))                 \nfig.show()","c02060f9":"df_ns_11 = df_ns['Q11'].value_counts().reset_index()[:-2]\ndf1_11 = df1['Q11'].value_counts().reset_index()[:-2]\n\nfig = make_subplots(rows=1, cols=2, vertical_spacing=1, specs=[[{\"type\": \"pie\"},{\"type\": \"pie\"}]],\n                    subplot_titles=(\"With students<br>\", \"Without students<br>\"))\n\nfig.add_trace(go.Pie(values=df1_11['Q11'], labels=df1_11['index'], \n                     marker_colors=['#4c78a8','f58518','#e45756','#72b7b2'],\n                     hole=0.7, rotation=340,\n                     hoverinfo='label+percent+value', textinfo='label'), \n                    row=1, col=1)\nfig.add_trace(go.Pie(values=df_ns_11['Q11'], labels=df_ns_11['index'], \n                     marker_colors=['#4c78a8','f58518','#e45756','#72b7b2'],\n                     hole=0.7, rotation=30,\n                     hoverinfo='label+percent+value', textinfo='label'), \n                    row=1, col=2)\nfig.update_yaxes(showgrid=False, ticksuffix=' ', categoryorder='total ascending')\nfig.update_xaxes(visible=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(height=350,  \n                  title=\"<span style='font-size:42px; font-family:Times New Roman'>Commonly Used Computing Platform<\/span>\",\n                  margin=dict(t=110, b=10, l=0, r=40),  showlegend=False,              \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  font=dict(color='#8a8d93'),\n                  title_font=dict(size=30, color='#8a8d93', family=\"Lato, sans-serif\"))        \nfig.show()","5beaef00":"# question 12\ndf_q12 = df_ns[[i for i in df1.columns if 'Q12' in i]]\nunique_count = []\nfor i in df_q12.columns:\n    unique_count.append([df_q12[i].value_counts().index[0], df_q12[i].count()])\n    \ndf_q12 = pd.DataFrame(unique_count, columns=[\"Hardware\",\"Count\"])\ndf_q12.loc[2] = df_q12.loc[2]+df_q12.loc[3]\ndf_q12 = df_q12.drop(3)\ndf_q12 = df_q12.replace({\"Hardware\": {' NVIDIA GPUs ':'GPUs', ' Google Cloud TPUs ':'TPU', \n                                      ' AWS Trainium Chips  AWS Inferentia Chips ':'AWS Chips'}})\n\n# question 13\ndf_13_5 = pd.crosstab(df_ns[\"Q13\"], df_ns[\"Q5\"]).reset_index()\ndf_13_5 = df_13_5.replace('More than 25 times', '>25')\n\n# chart\nfig = make_subplots(rows=1, cols=2, vertical_spacing=1, specs=[[{\"type\": \"pie\"},{\"type\": \"bar\"}]],\n                    column_widths=[0.4, 0.6], \n                    subplot_titles=(\"Most used Hardware<br>\", \"Demand of TPUs<br>\"))\n\nfig.add_trace(go.Bar(x=df_13_5['Data Scientist'], y=df_13_5['Q13'], marker_color='#334668',\n                     name='Data Scientist', orientation='h'), \n                     row=1, col=2)\nfig.add_trace(go.Bar(x=df_13_5['Machine Learning Engineer'], y=df_13_5['Q13'], marker_color='#496595',\n                     name='ML Engineer', orientation='h'), \n                     row=1, col=2)\nfig.add_trace(go.Bar(x=df_13_5['Research Scientist'], y=df_13_5['Q13'], marker_color='#6D83AA',\n                     name='Research Scientist', orientation='h'), \n                     row=1, col=2)\nfig.add_trace(go.Pie(values=df_q12['Count'], labels=df_q12['Hardware'], name='Hardware',\n                     marker_colors=['#4c78a8','f58518','#e45756','#72b7b2'],\n                     hole=0.7, rotation=90, showlegend=False, \n                     hoverinfo='label+percent+value', textinfo='label'), \n                     row=1, col=1)\n\n# styling\nfig.update_yaxes(showgrid=False, ticksuffix=' ', categoryorder='total ascending')\nfig.update_xaxes(visible=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(height=360,  yaxis_title='', barmode='stack',\n                  margin=dict(t=70, b=40, l=0, r=70),               \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  font=dict(color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"v\", yanchor=\"bottom\", xanchor=\"center\", x=0.88, y=0.25,\n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=12))\nfig.show()","a1df5d2a":"df_c = round((pd.crosstab(df_ns['Q5'], df_ns['Q15'], margins=True, normalize='columns')*100),2).T.reset_index()[:-1]\ndf_c = df_c.replace(['I do not use machine learning methods', '20 or more years','Under 1 year'], ['Not Using','20+ years','<1 years'])\ndf_c = df_c.loc(axis=0)[7,8,0,2,4,5,6,1,3].reset_index()\n\ntrace2 = go.Scatter(y=df_c['Research Scientist'], x=df_c.Q15,  showlegend=True, \n                        text=df_c['Research Scientist'], name='Research Scientist', marker_color='#6D83AA')\ntrace3 = go.Scatter(y=df_c['Machine Learning Engineer'], x=df_c.Q15,  showlegend=True, \n                        name='Machine Learning Engineer', marker_color='#496595')\ntrace4 = go.Scatter(y=df_c['Data Scientist'], x=df_c.Q15,  showlegend=True, \n                         name='Data Scientist', marker_color='#334668')\ndata=[trace2,trace3,trace4]\nfig = go.Figure(data = data)\nfig.update_yaxes(showgrid=False, zeroline=False)\nfig.update_xaxes(showgrid=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(height=350, \n                  title=\"<span style='font-size:50px; font-family:Times New Roman'>Experience in ML Methods<\/span>\",\n                  margin=dict(t=100, b=80, l=90, r=50),               \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=30, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(size=13, color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"h\", yanchor=\"bottom\", xanchor=\"center\", x=0.5, y=-0.41,\n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=13))\nfig.show()","03c402d1":"# data\ndf1['Q16'] = df1[df1.columns[72:87]].apply(\n    lambda x: ','.join(x.dropna().astype(str)),\n    axis=1\n)\ndf16_copy = df1.assign(Q16=df1['Q16'].str.split(',')).explode('Q16')\ndf16_copy['Counter']=1\ndf_Q16 = df16_copy.groupby([\"Q16\",\"Q5\"])['Counter'].count().reset_index().iloc[4: , :]\n\nfig = px.histogram(df_Q16, x='Counter', y='Q16', color='Q5', barnorm='percent',      \n             color_discrete_sequence=['#334668','#496595','#6D83AA','#91A2BF'])\nfig.update_yaxes(showgrid=False, ticksuffix='  ', categoryorder='total descending',)\nfig.update_xaxes(zeroline=False, showgrid=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(height=450,  xaxis_title='', yaxis_title='', hovermode='y unified', \n                  barnorm='percent', bargap=0.3, \n                  title=\"<span style='font-size:39px; font-family:Times New Roman'>Commonly Used ML Frameworks<\/span><br>Most common ML frameworks are Sklearn, Tensorflow, Keras, Pytorch & Xgboost\",\n                  margin=dict(t=110, b=0, l=0, r=30),               \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=17, color='#8a8d93', family=\"Times New Roman\"),\n                  font=dict(color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"v\", yanchor=\"bottom\", xanchor=\"center\", x=0.81, y=1.03, \n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=13))\nfig.show()","9ba5ec35":"# data\ndf1['Q17'] = df1[df1.columns[90:100]].apply(\n    lambda x: ','.join(x.dropna().astype(str)),\n    axis=1\n)\ndf17_copy = df1.assign(Q17=df1['Q17'].str.split(',')).explode('Q17')\ndf17_copy['Counter']=1\ndf17_copy = df17_copy.groupby([\"Q17\",\"Q5\"])['Counter'].count().reset_index().iloc[4: , :]\n\n# chart\nfig = px.scatter(df17_copy, x='Q17', y='Q5', size='Counter', color='Q5',\n                 color_discrete_sequence=px.colors.qualitative.T10)\nfig.update_xaxes(showgrid=False, zeroline=False, tickmode = 'array', \n                 tickvals=df17_copy['Q17'].unique().tolist(),\n                 ticktext=[\"Bayesian<br>Approaches\", \"Convoluti<br>-onsl<br>NN\", \"Decision<br>Tree<br>Random<br> Forest\", \n                           \"Dense<br>NN\", \"Evoluti<br>-onary<br>Approaches\", \"GAN\",\n                           \"Gradient<br>Boosting\",\"Linear\/<br>Logistic<br>Regression\",\"RNN\"])\nfig.update_yaxes(showgrid=False, ticksuffix='  ')\nfig.update_traces(marker=dict(line=dict(width=0)))\nfig.update_layout(height=400, xaxis_title='', yaxis_title='', \n                  title=\"<span style='font-size:37px; font-family:Times New Roman'>Commonly used ML Algorithms\",\n                  margin=dict(t=110, b=50, l=0, r=30),  showlegend=False,              \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=30, color='#8a8d93', family=\"Times New Roman\"),\n                  font=dict(color='#8a8d93'))                 \nfig.show()","ee27ab24":"# data\ndf1['Q18'] = df1[df1.columns[103:108]].apply(\n    lambda x: ','.join(x.dropna().astype(str)),\n    axis=1\n)\ndf18_copy = df1.assign(Q18=df1['Q18'].str.split(',')).explode('Q18')\ndf18_copy['Counter']=1\ndf18_copy = df18_copy.groupby([\"Q18\",\"Q5\"])['Counter'].count().reset_index().sort_values(by='Counter', ascending=True)\n\n# chart\nfig = px.histogram(df18_copy, y='Q18', x='Counter', color='Q5', barnorm='percent',\n                   color_discrete_sequence=['#91A2BF','#334668','#496595','#6D83AA'])\nfig.update_yaxes(showgrid=False, categoryorder='total descending', ticksuffix='  ', tickmode = 'array', \n                 tickvals=df18_copy['Q18'].unique().tolist(),\n                 ticktext=['Image Classification ',\n                           'Image Segmentation ', 'Object Detection ',\n                           'Image\/Video Tools ', 'None ', 'Generative Network '])\nfig.update_xaxes(showgrid=False, zeroline=False, categoryorder='total ascending')\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(height=370, xaxis_title='', yaxis_title='', hovermode='y unified',\n                  title=\"<span style='font-size:36px; font-family:Times New Roman'>Commonly used Computer Vision Methods<br><\/span>Highly used CV method is Image classification with <b>28.5%<\/b>\",\n                  margin=dict(t=110, b=30, l=100, r=0),              \n                  title_font=dict(size=17, color='#8a8d93', family=\"Times New Roman\"),\n                  font=dict(color='#8a8d93'),\n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  legend=dict(title=\"\", orientation=\"v\", yanchor=\"bottom\", xanchor=\"center\", x=0.815, y=1, \n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=12))\nfig.show()","bc9fffec":"# data\ndf1['Q19'] = df1[df1.columns[109:114]].apply(\n    lambda x: ','.join(x.dropna().astype(str)),\n    axis=1\n)\ndf19_copy = df1.assign(Q19=df1['Q19'].str.split(',')).explode('Q19')\ndf19_copy['Counter']=1\ndf19_copy = df19_copy.groupby([\"Q19\",\"Q5\"])['Counter'].count().reset_index()[4:].sort_values(by='Counter', ascending=True)\n\n# chart\nfig = px.scatter(df19_copy, x='Q19', y='Q5', size='Counter', color='Q5',\n                 color_discrete_sequence=px.colors.qualitative.T10)\nfig.update_yaxes(showgrid=False, ticksuffix='  ', categoryorder='total ascending',)\nfig.update_xaxes(showgrid=False, ticksuffix='  ', categoryorder='total descending', tickmode = 'array', \n                 tickvals=[\"Word Embeddings\",\" Transformer language Models\",\"Encoder-Decorder Models\",\n                            \"None\",\"Contextualized Embeddings\"],\n                 ticktext=[\"Word<br>Embedding\",\"Transformer<br>Language<br>Models\",\"Encoder-<br>Decoder<br>Models\",\n                            \"None\",\"Contextualized<br>Embeddings\"])\nfig.update_traces(marker=dict(line=dict(width=0)))\nfig.update_layout(height=350, xaxis_title='', yaxis_title='', width=800,\n                  title=\"<span style='font-size:40px; font-family:Times New Roman'>Commonly used NLP Methods<br><\/span>Highly used NLP method is Word Embedding with <b>29%<\/b>\",\n                  margin=dict(t=110, b=20, l=230, r=100),  showlegend=False,              \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=18, color='#8a8d93', family=\"Times New Roman\"),\n                  font=dict(color='#8a8d93'))                 \nfig.show()","06e3c826":"# data\ndf_ns['Q38'] = df_ns[df_ns.columns[221:231]].apply(\n    lambda x: ','.join(x.dropna().astype(str)),\n    axis=1\n)\ndf38_copy = df_ns.assign(Q38=df_ns['Q38'].str.split(',')).explode('Q38')\ndf38_copy['Counter']=1\ndf38_copy = df38_copy.groupby([\"Q38\",\"Q5\"])['Counter'].count().reset_index().iloc[3: , :]\n\n# chart\nfig = px.histogram(df38_copy, y='Q38', x='Counter', color='Q5', barnorm='percent',\n                   color_discrete_sequence=['#334668','#496595','#91A2BF'])\nfig.update_xaxes(showgrid=False, zeroline=False)\nfig.update_yaxes(showgrid=False, ticksuffix='  ', showline=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(height=450, xaxis_title='', yaxis_title='', \n                  barmode='stack', title_y=0.8,\n                  title=\"<span style='font-size:50px; font-family:Times New Roman'>ML Tools for Experiement<\/span><br>Commonly used tools are TensorBord, MLFlow and Weights & Biases\",\n                  margin=dict(t=150, b=0, l=40, r=50),  showlegend=True,              \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=20, color='#8a8d93', family=\"Times New Roman\"),\n                  font=dict(color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"v\", yanchor=\"bottom\", xanchor=\"center\", x=0.87, y=1.02,\n                              bordercolor=\"#fff\", borderwidth=0.3, font_size=11))                 \nfig.show()","0f2ca3b8":"df_5_20 = df1.groupby(['Q20','Q5'])['Counter'].sum().reset_index().sort_values(by='Counter', ascending=False)\ndf_5_20 = df_5_20[df_5_20['Q20']!='Other']\n\n\nfig = px.scatter(df_5_20, y='Q20', x='Counter', color='Q5',\n           color_discrete_sequence=px.colors.qualitative.T10)\n\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_yaxes(gridcolor='grey', categoryorder='total ascending', ticksuffix='   ')\nfig.update_xaxes(visible=False)\nfig.update_layout(height=500, xaxis_title='', yaxis_title='', \n                  title=\"<span style='font-size:50px; font-family:Times New Roman'><b>Currently Employees<\/b><\/span><br>in which Industry?\",\n                  margin=dict(t=90, b=20, l=250, r=200),            \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=20, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(size=13, color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"v\", yanchor=\"bottom\", xanchor=\"center\", x=0.82, y=1, \n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=13))\nfig.show() ","62c9bdd5":"df_25 = pd.DataFrame({'Q25': ['0-2,999','3,000-9,999','10,000-24,999','25,000-49,999','50,000-99,999',\n                              '100000-499999','500000-1000000', '>1,000,000'],\n                      'Count': [2037, 654, 754, 252, 954, 733, 90, 19]})\nfig = px.histogram(df_25, y='Count', x='Q25', histnorm='percent',\n                   color_discrete_sequence=['#7787a5'])\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(visible=False)\nfig.update_traces(marker=dict(line=dict(width=0)))\nfig.update_layout(height=370, xaxis_title='', \n                  title=\"<span style='font-size:50px; font-family:Times New Roman'>Current yearly compensation<\/span><br>(approx $USD)?\",\n                  margin=dict(t=110, b=0, l=40, r=30),                \n                  plot_bgcolor='#303030', paper_bgcolor='#303030',\n                  title_font=dict(size=20, color='#8a8d93', family=\"Times New Roman\"),\n                  font=dict(size=12, color='#8a8d93'))                \nfig.show()\n","1d2c5a53":"fig = px.histogram(df_ns, y='Q21', color='Q5', barnorm='percent',\n                   color_discrete_sequence=['#91A2BF','#334668','#496595'])\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_yaxes(showgrid=False)\nfig.update_xaxes(visible=False)\nfig.update_layout(height=370, xaxis_title='', yaxis_title='', \n                  title=\"<span style='font-size:50px; font-family:Times New Roman'><b>Size of the Company<\/b><\/span><br>where you are employed<\/span>\",\n                  margin=dict(t=110, b=20, l=70, r=70),            \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=18, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(size=13, color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"v\", yanchor=\"bottom\", xanchor=\"center\", x=0.82, y=1.05, \n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=13))\nfig.show() ","4001c30e":"# data\ndf_ml = df1.groupby(['Q23','Q5'])['Counter'].sum().reset_index()\ndf_ml =  df_ml.loc(axis=0)[6,7,8,0,1,2,3,4,5,15,16,17,9,10,11,12,13,14]\n\n# chart\nfig = px.scatter(df_ml, x='Q23', y='Counter', color='Q5', size='Counter',\n                 color_discrete_sequence=['#334668','#496595','#6D83AA','#91A2BF'])\n\n# styling\nfig.update_yaxes(visible=False)\nfig.update_xaxes(showgrid=False)\nfig.update_xaxes(tickmode = 'array', \n                 tickvals=['I do not know', 'We are exploring ML methods (and may one day put a model into production)', \n                           'We recently started using ML methods (i.e., models in production for less than 2 years)',\n                           'We have well established ML methods (i.e., models in production for more than 2 years)',\n                           'We use ML methods for generating insights (but do not put working models into production)',\n                           \"No (we do not use ML methods)\"],\n                 ticktext=[\"I don't<br>know\", 'Exploring<br>ML Models',  \n                           'Models in<br>production<br><2 Years', \n                           'Models in<br>production<br>>2 Years',\n                           'Use ML<br> generating<br> insights', \"Don't use<br>ML methods\"])\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(height=450, xaxis_title='', yaxis_title='', \n                  title=\"<span style='font-size:50px; font-family:Times New Roman'><b>Machine Learning <\/b><br>pratices of Company<\/span>\",\n                  margin=dict(t=110, b=40, l=110, r=110),               \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=30, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(size=13, color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"h\", yanchor=\"bottom\", xanchor=\"center\", x=0.5, y=-0.5,\n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=13)\n)\nfig.show()","0b0532c4":"df_ns['Q37a'] = df_ns[df_ns.columns[213:219]].apply(\n    lambda x: ','.join(x.dropna().astype(str)),\n    axis=1\n)\ndf37a_copy = df_ns.assign(Q37a=df_ns['Q37a'].str.split(',')).explode('Q37a')\ndf37a_copy['Counter']=1\ndf37a_copy = df37a_copy.groupby([\"Q37a\",\"Q5\"])['Counter'].count().reset_index().iloc[3: , :]\n\n\nfig = px.histogram(df37a_copy, y='Q37a', x='Counter', color='Q5', barnorm='percent',\n                 color_discrete_sequence=['#334668','#496595','#6D83AA','#91A2BF'])\nfig.update_yaxes(showgrid=False, ticksuffix='  ')\nfig.update_xaxes(zeroline=False, showgrid=False)\nfig.update_layout(height=370, xaxis_title='', yaxis_title='', \n                  title=\"<span style='font-size:50px; font-family:Times New Roman'><b>Using Automated ML Tools<\/span>\",\n                  margin=dict(t=110, b=10, l=70, r=70),               \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=20, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(size=13, color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"v\", yanchor=\"bottom\", xanchor=\"center\", x=0.78, y=1.05,\n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=13)\n)\nfig.show()","f704f055":"import plotly.graph_objects as go\n\ncategories = [' Analyze data<br> for business ',\n               '  Build ML service<br> for products\/worklfows ',\n               '  Build the data<br> infrastructure ',\n               '  Build ML prototypes <br> for new areas ',\n               '  Research to<br> advance ML',\n               '  Experimentation for<br> existing<br> ML models',\n               '  None of these ']\n\nfig = go.Figure()\nfig.add_trace(go.Scatterpolar(\n      r = [16.5,11.4,12.47,19.6,33.3,18.6,43.9],\n      theta=categories,\n      fill='toself',\n      name='Research Scientist'\n))\nfig.add_trace(go.Scatterpolar(\n      r=[65.4,62,64.6,58.4,45,56,36],\n      theta=categories,\n      fill='toself',\n      name='Data Scientist'\n))\nfig.add_trace(go.Scatterpolar(\n      r=[17.9,26.75,22.8,21.9,22.1,25,20],\n      theta=categories,\n      fill='toself',\n      name='Machine Learning Engineer'\n))\n\nfig.update_traces(marker=dict(line=dict(width=0)))\nfig.update_layout(height=500, \n                  title=\"<span style='font-size:40px; font-family:Times New Roman'>Important part of role at work<\/span>\",\n                  margin=dict(t=120, b=60, l=0, r=0),              \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=18, color='#8a8d93', family=\"Times New Roman\"),\n                  font=dict(size=13, color='#8a8d93'),\n                  polar=dict(radialaxis=dict(visible=True, range=[0, 66])),\n                  legend=dict(title=\"\", orientation=\"v\", yanchor=\"bottom\", xanchor=\"center\", x=0.86, y=1.05, \n                              font_size=13))\nfig.show()","b63b26b8":"df_ns['Q39'] = df_ns[df_ns.columns[233:242]].apply(\n    lambda x: ','.join(x.dropna().astype(str)),\n    axis=1\n)\ndf39_copy = df_ns.assign(Q39=df_ns['Q39'].str.split(',')).explode('Q39')\ndf39_copy['Counter']=1\ndf39_copy = df39_copy.groupby([\"Q39\",\"Q5\"])['Counter'].count().reset_index().iloc[3: , :]\n\nfig = px.histogram(df39_copy, y='Q39', x='Counter', color='Q5', barnorm='percent',\n                   color_discrete_sequence=['#334668','#496595','#91A2BF'])\nfig.update_yaxes(showgrid=False, ticksuffix='  ')\nfig.update_xaxes(zeroline=False, showgrid=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(height=450, xaxis_title='', yaxis_title='', \n                  title=\"<span style='font-size:50px; font-family:Times New Roman'><b>Sharing knowledge<\/b><\/span><br>on which platform?\",\n                  margin=dict(t=110, b=10, l=110, r=70),               \n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=20, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(size=13, color='#8a8d93'),\n                  legend=dict(title=\"\", orientation=\"v\", yanchor=\"bottom\", xanchor=\"center\", x=0.78, y=1.05,\n                              bordercolor=\"#fff\", borderwidth=0.5, font_size=13)\n)\nfig.show()","abcb29b1":"<h3><span style=\"font-size:35px; color:#496595;\">6. Sharing Knowledge<\/span> <\/h3>","396f1c85":"<h3><span style=\"color:#496595\">Summary<\/span><\/h3>\nLooks like students are participating more in the survey compared to other data professionals. While age is just a number the people having age 25-29 are showing more interest in the survey.<br>\nThe number of respondents is in the ratio 80:20 for Men:Women which is a serious problem and it is found that men are more from Machine Learning background and females are from Research background.<br>\nIn the upcoming era there will be more students in the Master\u2019s degree as they are planning to do in the next 2 years. Most of the Data Scientist have Master\u2019s degree and Machine Learning Engineer have bachelor\u2019s degree and Research Scientist have Doctorate degree as expected.<br>\nIndia and USA are the highest country having data professionals while India, USA and Japan have the highest Research Scientist while India, USA, China has the highest ML and India, USA, Brazil has the most DS<br>","88d104e3":"Most of the DS role is to analyse the data which they used for business and the second priority is to build the data infrastructure while RS role is to research about the advanced ML algorithm like state of the art.\nML role is to build ML workflows to easy the process and the second priority is to do experiment in the ML models to gain more accuracy.","ca0fb7d7":"<h2><span style=\"font-size:35px; color:#496595;\">3. Taking a closer look <\/span> <\/h2>\n\nTaking a closer look and finding more insights.\n1. How many Years of Experience\n2. Top 10 countries having DS and their experience\n3. Most Used Language\n4. Recommend a Language and Visualization for students\n5. Environments and IDE's\n6. Secret Ingredient\u2019s","3c6d5555":"<h1> <span style=\"font-size:35px; color:#496595\"><strong>2021 Kaggle Survey<\/strong><\/span> <\/h1>\n<br>\n\n<h3> <span style=\"color:#496595\"> Introduction <\/span> <\/h3><br>\nMany of you have heard or read articles about the buzz created by Data Science, Machine Learning. As Clive Humby states <span style=\"color:#496595\"><b>\"Data is the new oil\"<\/b><\/span> It\u2019s valuable, but if unrefined it cannot really be used. It has to be changed into gas, plastic, chemicals, etc to create a valuable entity that drives profitable activity; so, must data be broken down, analysed for it to have value. And In 2011, the senior vice-president of Gartner, Peter Sondergaard, took this concept even further by stating <span style=\"color:#496595\"><b>\"Information is the oil of the 21st century, and analytics is the combustion engine\"<\/b><\/span> \n\n<br>\n\nThis is the <span style=\"color:#496595\"><b>5th year<\/b><\/span> conducting an in-depth user survey & publicly sharing the results. Over <span style=\"color:#496595\"><b>25,000+<\/b><\/span> data scientists and ML engineers submitted responses on their backgrounds and day to day experience \u2013 everything from educational details to salaries to preferred technologies and techniques.<br><br>\nThis notebook is divided into several parts here I am going to compared how students, Data scientist, Machine Learning engineer and Research Scientist work and will try to find out the common things they usually do. So, the students can start shifting their focus on those topics and get a step forward to be successful<br>\n\nI will try to make Quality charts rather than bombarding charts with any other information that's is necessary.\n","c37507ea":"Out Of the <b><span style=\"color:#496595\">25,973<\/span><\/b> survey participants, only <b><span style=\"color:#496595\">18.8%<\/span><\/b> of respondents in the dataset were <b><span style=\"color:#496595\">Women<\/span><\/b>. We cannot state that only 18.8% of the data science community is female. Still, the lack of participation on the part of women is cause for great concern.","6782e950":"Here I found something interesting facts, if you notice younger people are getting more familiar with the Data Science and taking participate in the process. <b><span style=\"color:#496595\">That's a good start!<\/span><\/b>\nLooking further most of the Data Scientists are in there 20's and go upto half 30's.<br>\nHighest number of Research Scientists are in 30-34 Age which is followed by 25-29.","ce956b71":"<h3><span style=\"font-size:35px; color:#496595;\">3.5 Enviroment and IDE's <\/span> <\/h3>","223cd305":"<h3><span style=\"color:#496595\">Summary<\/span><\/h3>\nLooks like most of the Data Scientist have just started their journey as 28% response are from Data Scientist having experience from 1-3 Years. Most of the DS and ML have 1-3 years of experience whereas RS have 5-10 years of experience.<br>\nAs usual python overruled R and the most common recommended languages are Python, SQL & R while for the visualization it is Matplotlib+Seaborn, Plotly and ggplot. Plotly is gaining the recognition in data visualization field.<br>\nThe most regular used IDEs are PyCharm & VS Code<br>\nKaggle+Collab Notebooks are most preferred but for the induvial DS prefers more Zeppeline and Databricks Collaborative Notebooks while ML engineers looks more observable and code ocean notebooks well RS uses more observable notebooks and binder notebooks.<br>\nThere is a relative smaller percentage of use for Cloud Platforms and Deep Learning Workstations and an increase in Personal Laptop's. Well, the ratio of students to other profession is much higher that can be the reason as students might now have encountered such a problem where they will need high heavy equipment\u2019s like GPU or TPU.","bfb9ecc8":"<h2> <span style=\"font-size:35px; color:#496595;\">2. Demographics <\/span> <\/h2>\n<br>\n\n<h3> <span style=\"font-size:35px; color:#496595;\">2.1 Age is just a Number! <\/span><\/h3>\nAge is just a Number we can start learning at any age. By looking at the hype of Data Science being labelled as a high wage source jobs well I expect a significant participation of youth. With the all hype around data and data related jobs I expect a high demand and their interest in Kaggle.","2164ccb0":"Research Scientist are from India, USA and Japan.<br>\n<b><span style=\"color:#496595\">Top 3 country<\/span><\/b> having <b><span style=\"color:#496595\">highest Data Scientist<\/span><\/b> are from India, USA and Brazil.<br>\n    <b><span style=\"color:#496595\">Top 3 country<\/span><\/b> having <b><span style=\"color:#496595\">highest Machine Learning Engineers<\/span><\/b> are from India, USA and China.\n\nIndia and USA audience are participating more in the survey so let's remove them and see which other top 10 countries participate.","31c96930":"Hosted notebooks are the best notebooks to work on without any problem related to environment additionally they do provide an easy share platform or easily collaborate platform from where we can share our result with ease. For example, personally I am not a fan of R but Kaggle provide a R environment where I can easily work and share coding immediately without any environmental setup.<br>\nKaggle and Colab Notebooks is preferred by everyone with 26% and 32% respectively. Students preferred kaggle+collab notebooks but there is a quite a number in Google cloud Datalab while Data Scientist prefers more Zeppeline and Databricks Collaborative Notebooks. ML engineers looks more observable and code ocean notebooks well Research scientist uses more observable notebooks and binder notebooks.","7906fd61":"Looks like <b><span style=\"color:#496595\">Machine Learning<\/span><\/b> domain is ruled by <b><span style=\"color:#496595\">Man<\/span><\/b> with <b><span style=\"color:#496595\">64%<\/span><\/b>. Most of the <b><span style=\"color:#496595\">woman\u2019s<\/span><\/b> are in <b><span style=\"color:#496595\">Research domain<\/span><\/b> compared to others domains.","c3e6d182":"In the coming years we will have a <b><span style=\"color:#496595\">great growth in master\u2019s domain<\/span><\/b> as most of the audience are having master\u2019s degree or planning for their master\u2019s degree, well that includes me too. For now, we have a majority of people having higher degrees.<br>\nMost of the Data scientist have a Master's degree and Bachelor's degree. Most of the Research scientist have a doctorate degree as expected.<br>\nMost of the students are without an Bachelor's degree.","d89dff01":"<h3><span style=\"font-size:35px; color:#496595;\">2.3 Level of Education<\/span> <\/h3>\n\n<b><span style=\"color:#496595\">Highest Level of Education<\/span><\/b> is a hot topic people generally believe that higher the education <b><span style=\"color:#496595\">you can earn more<\/span><\/b>. Some believe having a master\u2019s degree is necessary to go in <b><span style=\"color:#496595\">MANG<\/span><\/b>. Let's have a look what the number says.","37749b0f":"<h2><span style=\"color:#496595;\">ML Summary<\/span><\/h2><br>\n<b><span style=\"font-size:20px; color:#496595;\">ML Methods Summary<\/span><\/b> <br>\nMost of the Data Scientist have experience in the range of 4-10 years and the highest experience is 5-10 years with 57% in ML methods while the Machine Learning Engineers have the highest 3-4 years of experience in ML methods with 22%. <br>\nIt looks like Data Scientist have the highest experience from 4 to 20+ years while the Machine Learning Engineers have the highest experience from 2 to 5 years. Research Scientist experience increases from 3 years.<br>\nMost of the students have no experience or 1-2 years of experience in ML methods<br><br>\n\n<b><span style=\"font-size:20px; color:#496595;\">ML Frameworks Summary<\/span><\/b> <br>\nMost common Machine Learning Frameworks are Sklearn, Tensorflow, Keras, Pytorch & Xgboost.<br>\nFavourite ML Frameworks for Data Scientist are Prophets, H203, Caret and the least favourite is PyTorch while Machine Learning Engineers most favourite is Huggingface, MXNet, PyTorch Lightning and least is Tidymodels and Caret<br>\nTidymodels and Caret are the choice of Research Scientist while keras and Pytorch are widely used by students.\n<br>\n\n<b><span style=\"font-size:20px; color:#496595;\">ML Algorithm Summary<\/span><\/b> <br>\nCommonly used algorithms are Regression algo like Logistic, Linear and Tree based algorithm like Decision tree, Random Forest.\n\n<b><span style=\"font-size:20px; color:#496595;\">CV & NLP Summary<\/span><\/b> <br>\nAdvanced methods like computer Vision methods or NLP methods needs expertise and experience to apply on the problem. Widely used CV method is Image classification and General Networks and for NLP method is Word embeddings\/vectors \n<br>\nTill now we saw the most common ML Algorithm\u2019s, Framework\u2019s which Data scientist, ML and Research Scientist used and some advanced methods like CV and NLP too. Let's now see what are the most common tools that Data professional use to track their experiment.","5e6774a9":"<h3><span style=\"font-size:35px; color:#496595;\">3.1 How Many Years of Experience <\/span> <\/h3>\n\nMost of the Data Scientist and Machine Learning Engineer have experience in between 1-3 years and Resarch scienitst have experience 5-10 years.","344bc8fa":"<h3><span style=\"font-size:30px; color:#496595;\">3.4 Recommend an Langauge and Visualization<\/span> <\/h3>\n\nMost of the common languages to start the journey in Data Science is Python, R, SQL and C,C++ which I learn too.","fad91bd9":"Most of the Data professional works in Educational, Technology, Finance industry. Data Scientist have the highest experience in putting models in production for more than 2 years.","1cf392a8":"![image.png](attachment:fadd718b-cfc1-462e-8579-672428de3432.png)","2a83e2cb":"<h3><span style=\"font-size:35px; color:#496595;\">5. Company's Overview <\/span> <\/h3>\n\n1. Currently Employee in which Industry\n2. How big is the company\n3. Machine Learning Practices of the company\n4. Using Automated ML Tools","38fc975d":"<h3><span style=\"font-size:35px; color:#496595\">General Ratio \u2640\ufe0f\u2642\ufe0f<\/span><\/h3>","90ef6aee":"Looks like Research Scientist ruled the academics sector and entertainment sector has the least data professionals","142090c8":"Unsurprisingly people work more in Data Scientist filed rather than Software Engineer. Nowadays many peoples from younger age are showing their interest in Data Science field well that\u2019s a good start.<br>\nThe second most similar work in data is done by Software Engineer followed by Data Analyst, Research Scientist and Machine Learning Engineer.","dd578889":"<h3><span style=\"font-size:35px; color:#496595;\"> Tracking ML experiements  <\/span> <\/h3>","5cbf3646":"The Hardware<br>\nThere is a relative smaller percentage of use for Cloud Platforms and Deep Learning Workstations and an increase in Personal Laptop's.<br>\nWell, the ratio of students to other profession is much higher that can be the reason as students might now have encountered such a problem where they will need high heavy equipment\u2019s like GPU or TPU.<br>\nNow, if we see on the second pie chart well it is noticed that there is quite an increment in the heavy equipment\u2019s as the roles are of Data Science, Machine Learning Engineers and Research Scientist.","8144e7b9":"Nowadays, ML tracking tools are getting quite famous. Most common experiment tools are TensorBoard MLFlow, and Weights & Biases with 36.7%, 25% and 12.2% respectively. Looks, like DS and ML practitioners uses ML tools more.","33a096bd":"![image.png](attachment:dbd7fdd8-f6fa-4813-8e38-6ea30fac6f44.png)\n<br>\nPython is the most popular language and most of the Data Scientist do recommend to learn it that will help the students to have grip on Data Manipulation. Some of the other language\u2019s are recommended that are R, SQL, C, C++.<br><br>\nSome of the famous visualization libraries are Matplotlib+Seaborn it never loses its charm now some interactive libraries are also coming in the picture my personal favourite Plotly. I am a huge fan of Plotly what not you can do with it.\n","d2137626":"Looks like most of the <b><span style=\"color:#496595\">Data Scientist<\/span><\/b> have just started their journey as we have <b><span style=\"color:#496595\">28%<\/span><\/b> response from data scientist having <b><span style=\"color:#496595\">experience from 1-3 Years<\/span><\/b>.<br>\nWe look the above graph which represent the years of experience in data science domain but let's see the top 10 countries having data scientist and see which country has the highest experienced data scientist.","f5a165cb":"<h2><span style=\"font-size:35px; color:#496595\">General Overview<\/span><\/h2>\n<br> \n1. Kaggle Summary<br>\n2. Gender Ratio over the Time period<br>\n3. How common is data related field?<br>\n4. Response Ratio<br>","cf6b8c74":"<h3><span style=\"font-size:35px; color:#496595;\">3.3  Most Used Language<\/span> <\/h3>","8a69af10":"<h3 style=\"font-size:35px; color:#496595;\">2.2 Gender Ratio <\/h3><br>\n\nWell we saw the <b><span style=\"color:#496595\">Man: Woman<\/span><\/b> ratio is <b><span style=\"color:#496595\">80%:20%<\/span><\/b> but can woman have higher interest in Machine Learning domain. Let's find out. ","989d4424":"Most of the people works in small company having 0-49 employees and most of the Data Scientist are in company having 10,000+ employees and Research Scientist in 1000-9999 and ML in 0-49. Looks like some people are giving false information.","df168b04":"Students prefer Visual studio and MATLAB followed by sublime Text more than Jupyter.\nLooks like <b><span style=\"color:#496595\">jupyter has lost its charm for Data Scientist<\/span><\/b> as they used more Visual Studio rather than jupyter it's shocking for me. Machine Learning engineers prefer PyCharm and VS code.","cd0cc897":"![image.png](attachment:ea328f62-6558-4540-96e4-e91ab6908c88.png)\n<br>\n<b><span style=\"color:#496595\">As usual Python overruled R for all the designation.<\/span><\/b> The most favourite language is Python for students as we see on the Kaggle most of the notebooks are written in python there is a lot more resources available to learn python compared to R.<br>\nLooks like the top 2 widely used languages by Data Scientists is Python and SQL and the least preferable is Swift language.<br>\nResearch scientists uses R and MATLAB more than Machine Learning engineers.","e67645c5":"The most popular platform where data professionals share their work is GitHub and Kaggle with 33.3% and 19.9% while 17.5% don't like to share the work.<br>\nDeep diving in the data; the DS professional like the streamlit and plotly Dash platform to showcase the work as we can interact with the data and we can have a conclusion to the problem while Machine Learning professional share their work on streamlit the most.<br>\nResearch Scientist don't share their work and if they do, they prefer colab and shiny platform.<br>\n<span style=\"color:#496595;\">**Personal note:**<\/span> I have also made a Dashboard in plotly Dash if you would like to see gave a look [here](https:\/\/www.linkedin.com\/posts\/kashish-rastogi-3a8b4119a_plotly-dataanalytics-datavisualization-activity-6816366816806354944-k2hT\/)","e37ba563":"<h3><span style=\"font-size:29px; color:#496595\">How common is data and data related field<\/span><\/h3>","c9b82be0":"<h3><span style=\"font-size:35px; color:#496595;\">4. Machine Learning  <\/span> <\/h3>","0927cc6e":"<h3><span style=\"font-size:32px; color:#496595;\">2.4 Which Country have highest Influence of DS, ML & RS <\/span> <\/h3>","a5ec10dd":"**Refrences:**<br>\nInspiration for creating Top 10 Country:DS is taken from [here](https:\/\/www.behance.net\/gallery\/13484301\/Infographic-series-Nutmeg)\n<br>\nFor the Radar chart inspiration was taken from [here](https:\/\/www.kaggle.com\/spitfire2nd\/enthusiast-to-data-professional-what-changes)","01d2d927":"<h3><span style=\"font-size:35px; color:#496595;\">Summary<\/span> <\/h3>\nTop 5 sectors where data professional are more are Academics, Technology, finance, Medical & Manufacturing and least audience is from Entertainment sector<br>\nMost of the people works in small company having 0-49 employees and most of the DS are in company having 10,000+ employees and RS in 1000-9999 and ML in 0-49. Looks like some people are giving false information.<br>\nWell Data scientist have more experienced in production of ML models rather than ML engineers itself. Nowadays, company are adopting automated ML Tools.<br>\nMost of the DS role is to analyse the data which they used for business and the second priority is to build the data infrastructure while RS role is to research about the advanced ML algorithm like state of the art.\nML role is to build ML workflows to easy the process and the second priority is to do experiment in the ML models to gain more accuracy\n<br>","28edbe0e":"Most of the employees are having 1-3 years of experience that why the yearly compensations have the huge value of 0 - $2999","17cbec1d":"<h3><span style=\"font-size:35px; color:#496595;\">3.6 Secert Ingridents <\/span> <\/h3>","6d95d7a9":"<h3><span style=\"font-size:35px; color:#496595;\"> Computer vision & NLP Methods  <\/span> <\/h3>"}}