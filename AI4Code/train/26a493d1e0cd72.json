{"cell_type":{"663acf6e":"code","fc975217":"code","9a4a51cc":"code","3ac59ae0":"code","19fd35d9":"code","36d8f613":"code","2852a0c3":"code","b0dbb829":"code","f3157708":"code","43a3d6a4":"code","55d288d1":"code","69ca6adf":"code","d4f1e30a":"code","26fc4ee7":"code","a0ea02cb":"code","fa5183ed":"code","c34c03ec":"code","2d9afc40":"code","055b5bd7":"code","2ad2adfe":"code","5db855b6":"code","3d2fc90b":"code","dc8be986":"code","5288ca8f":"code","5ca4c650":"code","c6bc3723":"code","e9d4fc62":"code","b25e9bb9":"code","94d7b485":"code","8c7def05":"code","7303012b":"code","8cd828eb":"code","fcb02a5f":"code","e9aeb2ba":"code","ff5a47e6":"code","818206db":"code","1a521cfd":"code","0397e109":"code","427b257e":"code","c7583ec6":"code","6749a438":"code","d9a38ea2":"code","f7fa615e":"code","f69d6d52":"code","7a4f365f":"code","2c5ed02f":"code","972b5b66":"code","2b7d4110":"code","4334d87a":"code","f85b04ef":"code","23189b15":"code","451983d4":"code","9251e19d":"code","6d0153f7":"code","09bf5667":"code","f71266c0":"code","59129b85":"code","899adb04":"markdown","8c7c4ce0":"markdown","12e069c7":"markdown","29ae322c":"markdown","4fcf0aa8":"markdown","3e7d5cf5":"markdown","9c6fd930":"markdown","c50c8383":"markdown","52aaec8b":"markdown","8ffb7567":"markdown","ae1302d6":"markdown","0f68aac4":"markdown","241ef645":"markdown","7ad43ddf":"markdown","a194b3a4":"markdown","45df0c6a":"markdown","7b8b8665":"markdown","e79eaecb":"markdown","169c4299":"markdown","42b03ae9":"markdown","1ccb35e5":"markdown","1e306d0d":"markdown","670d95c7":"markdown"},"source":{"663acf6e":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport os\nimport seaborn as sns","fc975217":"red = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\nblack = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ngender_submission = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","9a4a51cc":"red.describe()","3ac59ae0":"plt.figure(figsize=(8,8))\nsns.heatmap(red.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","19fd35d9":"black.drop('Cabin', axis=1, inplace=True)\nred.drop('Cabin', axis=1, inplace=True)\nred.info()","36d8f613":"red.columns","2852a0c3":"plt.figure(figsize=(12,7))\nsns.boxplot(x='Pclass',y='Age',data=red,palette='winter')","b0dbb829":"red.groupby('Pclass')['Age'].mean()","f3157708":"def f(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37.95\n\n        elif Pclass == 2:\n            return  29.83\n\n        else:\n            return 24.83\n\n    else:\n        return Age\n\nred['Age']=red[['Age','Pclass']].apply(f,axis=1)\nblack['Age']=black[['Age','Pclass']].apply(f,axis=1)","43a3d6a4":"red.isna().sum()","55d288d1":"dan=red.loc[red['Pclass']==3]\nm=dan.loc[dan['Parch']==0]\nn=m.loc[m['SibSp']==0]\nn.groupby('Sex')['Fare'].mean()","69ca6adf":"n","d4f1e30a":"# getting the passenger Id where Fare value is null\nblack.isna().sum()","26fc4ee7":"black.loc[black.Fare.isnull()]","a0ea02cb":"# fillling the null value for fare where \nblack=black.fillna(9.507808)","fa5183ed":"red.dropna(inplace=True)\n#black=black.dropna()","c34c03ec":"red.info()","2d9afc40":"num=red[['Age','Fare','SibSp','Parch']]\ncat=red[['Survived','Pclass','Sex','Embarked']]","055b5bd7":"for i in num.columns:\n    plt.hist(num[i])\n    plt.title(i)\n    plt.show()","2ad2adfe":"for i in cat.columns:\n    sns.barplot(cat[i].value_counts().index,cat[i].value_counts(),palette='rainbow').set_title(i)\n    plt.show()","5db855b6":"plt.figure(figsize=(14,7))\ng=sns.FacetGrid(red,col='Survived',row='Pclass')                         ###  row='Pclass'\ng.map(plt.hist,'Age',bins=20)\nplt.show()","3d2fc90b":"red.Pclass.value_counts()","dc8be986":"red.Sex.value_counts()","5288ca8f":"pd.unique(red.SibSp)","5ca4c650":"red.head().style.background_gradient(cmap=sns.light_palette(\"green\", as_cmap=True))","c6bc3723":"plt.figure(figsize = (18,18))\nsns.heatmap(red.corr(),annot=True)\nplt.show()","e9d4fc62":"red.drop('Ticket',1,inplace=True)\nblack.drop('Ticket',1,inplace=True)","b25e9bb9":"from sklearn.preprocessing import LabelEncoder\n\nenc=LabelEncoder()\n\nred['Name']=red['Name'].apply(lambda x: x.split('.')[0].split(', ')[1].strip())\nred=red.rename(columns={'Name':'Title'})\nred['Title']=enc.fit_transform(red['Title'])\n\nblack['Name']=black['Name'].apply(lambda x: x.split('.')[0].split(', ')[1].strip())\nblack=black.rename(columns={'Name':'Title'})\nblack['Title']=enc.fit_transform(black['Title'])","94d7b485":"black","8c7def05":"red=pd.get_dummies(red, prefix=['Gender_','Port_'])\nblack=pd.get_dummies(black, prefix=['Gender_','Port_'])\n","7303012b":"red","8cd828eb":"black","fcb02a5f":"x=red.iloc[:,2:]\ny=red.iloc[:,1]\nz=black.iloc[:,1:]","e9aeb2ba":"from sklearn.model_selection import train_test_split as tts\nx_train,x_test,y_train,y_test=tts(x,y,test_size = 0.22,random_state=10)","ff5a47e6":"x_train.shape","818206db":"x_test.shape","1a521cfd":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,recall_score,precision_score,confusion_matrix,f1_score","0397e109":"log_clf = LogisticRegression()\nlog_clf.fit(x_train, y_train)","427b257e":"y_pred = log_clf.predict(x_test)","c7583ec6":"from sklearn import metrics\nfrom sklearn.metrics import accuracy_score\n\nmetrics.accuracy_score(y_test,y_pred)","6749a438":"predictions=log_clf.predict(z)   ## predictions on test data","d9a38ea2":"from sklearn.tree import DecisionTreeClassifier,export_graphviz","f7fa615e":"tree = DecisionTreeClassifier()\ntree.fit(x_train, y_train)","f69d6d52":"predictions = tree.predict(x_test)","7a4f365f":"print(\"precision score   \"+str(precision_score(y_test,predictions))) # tp\/tp+fp\nprint(\"accuracy score    \"+str(accuracy_score(y_test,predictions))) # total correct \nprint(\"recall score      \"+str(recall_score(y_test,predictions)))   # tp\/tp+fn\nprint(\"f1 score          \"+str(f1_score(y_test,predictions))) ","2c5ed02f":"sns.heatmap(metrics.confusion_matrix(y_test,predictions),annot=True)","972b5b66":"import graphviz\n\nfeatures = x.columns\ntargets = ['Dead','Alive']\n\ndata = export_graphviz(tree,out_file=None,feature_names=features,class_names=targets,filled=True, rounded=True,special_characters=True)\ngraph = graphviz.Source(data)\ngraph","2b7d4110":"from sklearn.ensemble import RandomForestClassifier","4334d87a":"rfc = RandomForestClassifier(n_estimators=100, max_depth=5)\nrfc.fit(x_train, y_train)","f85b04ef":"predictions = rfc.predict(x_test)\naccuracy_score(y_test,predictions)","23189b15":"pred_rf=rfc.predict(z)","451983d4":"gender_submission['Survived']=pred_rf.astype(int)\ngender_submission","9251e19d":"gender_submission.to_csv('gender_submission.csv', header=True, index=False)","6d0153f7":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC","09bf5667":"clf = make_pipeline(StandardScaler(), SVC(gamma='auto'))\nclf.fit(x_train, y_train)","f71266c0":"predictio = clf.predict(x_test)","59129b85":"acc_sc=accuracy_score(y_test,predictio)\nacc_sc","899adb04":"# Model Creation Using basic ML techniques to predict the survival rate of passengers","8c7c4ce0":"### Facet Grid Plot on Pclass and Survived.","12e069c7":"# Logistic Regression","29ae322c":"# Support Vector Machines","4fcf0aa8":"# Its time for some EDA ","3e7d5cf5":"As we can see our model is giving pretty good predictions. Lets try some other regressors.","9c6fd930":"# Random Forest Classifier","c50c8383":"### Age Imputation\nAs we can see in the above box plot, we can impute age using median imputation based on P-class.  ","52aaec8b":"## Titanic\nTitanic, in full Royal Mail Ship (RMS) Titanic, British luxury passenger liner that sank on April 14\u201315, 1912, during its maiden voyage, en route to New York City from Southampton, England, killing about 1,500 passengers and ship personnel. One of the most famous tragedies in modern history, it inspired numerous stories, several films, and a musical and has been the subject of much scholarship and scientific speculation.\n#### The sinking of the Titanic is one of the most infamous shipwrecks in history.","8ffb7567":"### Visulaizations only for categorical columns.","ae1302d6":"***************************","0f68aac4":"# Titanic ML Model","241ef645":"# Visualizing  the Decision tree model ","7ad43ddf":"![](https:\/\/d241gzwmzya7ka.cloudfront.net\/autosizing_assets\/Blog-Post-Images\/Blog-image-2020-04-07@2x.png?mtime=20200406102912&focal=none)","a194b3a4":"Creating dummy variables for Gender and Port columns which are to be used in training our model.","45df0c6a":"# Train-test split","7b8b8665":"# Feature Engineering\n#### The coumn \"Name\" is not giving much value but if we take the title from every name then it would make some sense to our model.","e79eaecb":"Cabin has got the highest number of null values. Dropping the column.","169c4299":"Dropping all null values as there are only two null values for embareked.","42b03ae9":"### Visulaizations only for numerical columns.","1ccb35e5":"# Decision Tree","1e306d0d":"# Data Exploration & Cleaning","670d95c7":"![](https:\/\/faithmag.com\/sites\/default\/files\/styles\/article_full\/public\/2018-09\/titanic2.jpg?h=6521bd5e&itok=H8td6QVv)"}}