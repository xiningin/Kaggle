{"cell_type":{"c7f79996":"code","9eda2d5f":"code","9a0becae":"code","953c38e0":"code","86116dbc":"code","cd2c33ca":"code","c9c02335":"code","f4af59ae":"code","609fcf7a":"code","86aff1bc":"markdown"},"source":{"c7f79996":"import pandas as pd\nimport datetime\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")","9eda2d5f":"path = '\/kaggle\/input\/defi-ia-2022-test\/Train\/Train\/X_station_train.csv'\nfirst_date = datetime.datetime(2016,1,1)    \nlast_date = datetime.datetime(2017,12,31)\noutput_file = \"my_baseline_obs.csv\"   #if you want to save your baseline in a csv file ","9a0becae":"#read the ground station data\ndef read_gs_data(fname):\n    gs_data = pd.read_csv(fname,parse_dates=['date'],infer_datetime_format=True)\n    gs_data = gs_data.sort_values(by=[\"number_sta\",\"date\"])\n    return gs_data\n\nx = read_gs_data(path)\nx['number_sta']=x['number_sta'].astype('category')\n\n#sort by station, then by date \nx = x.sort_values(['number_sta','date'])\nx","953c38e0":"#get the observation baseline\nBase_obs = x[{\"number_sta\",\"date\",\"precip\"}]\nBase_obs.set_index('date',inplace = True)  \n\n#compute the accumulated rainfall per day with nan management \n#if any NaN on the day, then the value is NaN (24 values per day)\nBase_obs = Base_obs.groupby('number_sta').resample('D').agg(pd.Series.sum, min_count = 24)\nBase_obs = Base_obs.reset_index(['date','number_sta'])\nBase_obs['number_sta'] = Base_obs['number_sta'].astype('category') \nBase_obs","86116dbc":"#Select the observations the day before \nBase_obs['baseline_obs'] = Base_obs.groupby(['number_sta'])['precip'].shift(1)\nBase_obs = Base_obs.sort_values(by=[\"number_sta\",\"date\"])\ndel Base_obs['precip']\nBase_obs = Base_obs.rename(columns={'baseline_obs':'precip'})\nBase_obs","cd2c33ca":"#get the day indexes (to the final Id)\ndate = first_date\ndates = []\nwhile date <= (last_date - datetime.timedelta(days=1)):\n    date += datetime.timedelta(days=1)\n    dates.append(date)\n\nd_dates =  pd.DataFrame(dates, columns = ['date'])\nd_dates['day_index'] = d_dates.index\nd_dates","c9c02335":"#create the ID column (id_station + month + index value)\ny_f = pd.merge(Base_obs,d_dates,how=\"right\",on = [\"date\"])\ny_f = y_f[y_f['date']!=last_date]\ny_f['Id'] = y_f['number_sta'].astype(str) + '_' + \\\n                  y_f['day_index'].astype(str) \ny_f","f4af59ae":"#final post-processing\ndel y_f['day_index']\ny_f = y_f.rename(columns={'precip':'Prediction'})\ny_f","609fcf7a":"#to save the baseline in a csv file \n#y_f.to_csv('\/kaggle\/working\/' + output_file,index=False)","86aff1bc":"# Compute the observation baseline \n\nThe notebook allows to compute the observation baseline from X data (ground station observations, train part). \nThe observation baseline is the accumulated rainfall on 24 hours the day before. \nHere are the steps :\n- compute the accumulated rainfall per day (the X data have a 1 hour time frequency)\n- select the observations the day before \n- create the ID column : id_station + month + index day value"}}