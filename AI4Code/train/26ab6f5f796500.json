{"cell_type":{"7ca1b2c2":"code","c059b087":"code","c6208a43":"code","3ec91a04":"code","46719c1c":"code","fef81bb1":"code","3d5ffe64":"code","8329bf1f":"markdown"},"source":{"7ca1b2c2":"from pathlib import Path\nimport json\nimport numpy as np \nimport pandas as pd \nfrom learntools.time_series.style import *\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\nfrom urllib.request import urlopen\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.io as pio\n\npio.templates.default = 'none'\n\npx.defaults.template = 'none'\npx.defaults.color_continuous_scale = px.colors.sequential.Blackbody\npx.defaults.width = 1000\npx.defaults.height = 500\n\n\n\n\n\n\n# read in store sales\ncomp_dir = Path('..\/input\/store-sales-time-series-forecasting')\nstore_sales = pd.read_csv(\n    comp_dir \/ 'train.csv',\n    #usecols=['store_nbr', 'family', 'date', 'sales'],\n    dtype={\n        'store_nbr': 'int32',\n        #'family': 'category',\n        'sales': 'float32',\n        'onpromotion': 'float32',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\nstore_sales = store_sales.set_index(['store_nbr', 'family', 'date']).sort_index()\n#store_sales['date'] = store_sales.date.dt.to_period('D')\n\n# Calculate Average sales per store and family and add to data\nstore_sales = store_sales.join(store_sales.groupby(['store_nbr', 'family']).sales.mean(),\n                               on=['store_nbr', 'family'],\n                               rsuffix='_avg')\n# Calculate relative store sales by dividing sales by sales_av\nstore_sales['sales_rel'] = store_sales['sales'] \/ store_sales['sales_avg'].replace(0,1)\n\n\n# Read in store information\nstrs = pd.read_csv(comp_dir \/ 'stores.csv')\n\n# Create canton column for chloropeth map in stores\nct = strs.groupby(['city', 'state']).size().reset_index()\nct['canton'] = ct['city'].str.upper()\nct.loc[ ct['city'] == 'Puyo', 'canton'] = 'PASTAZA'\nct.loc[ ct['city'] == 'Libertad', 'canton'] = 'BALAO'\nstrs = strs.join(ct.set_index('city')['canton'], on='city')\n\n# Join stores data to sales data\nstore_sales = store_sales.join(strs.set_index('store_nbr'), on='store_nbr')\n\n\n# load Ecuador geoJSON\nwith urlopen('https:\/\/raw.githubusercontent.com\/pablocarreraest\/Ecuador-geoJSON\/master\/geojson\/cantons.geojson') as response:\n    counties = json.load(response)\n\n# use geoJSON to create a data frame with all the possible cantons\ncantons = []\nfor f in counties[\"features\"]:\n    f[\"properties\"][\"cantonup\"] = f[\"properties\"][\"canton\"].upper()\n    cantons.append({\"canton\": f[\"properties\"][\"canton\"].upper(),\n                    \"iso_1\": f[\"properties\"][\"iso_1\"],\n                    \"iso_2\": f[\"properties\"][\"iso_2\"],\n                    \"province\": f[\"properties\"][\"province\"]\n                   })\ncantons = pd.DataFrame(cantons)\n\n","c059b087":"fig = make_subplots(\n    rows=2, cols=3,\n    column_widths=[0.3, 0.3, 0.4],\n    shared_yaxes=True,\n    specs=[[{\"type\": \"choropleth\"}, {\"type\": \"choropleth\"}, {\"type\": \"choropleth\", \"rowspan\": 2}],\n           [{\"type\": \"choropleth\"}, {\"type\": \"choropleth\"}, None]\n          ])\n\nrw = 0\ntdf = store_sales.reset_index()\nfor i, year in enumerate(tdf.date.dt.year.unique()):\n    q = (tdf.date.dt.year==year) & (tdf.sales > 0)\n    cl = i%2+1\n    rw = rw+1 if i%2==0 else rw\n    if i == 4:\n        rw = 1\n        cl = 3\n    \n    # left join from cantons i.o. to display all cantons\n    tmp = cantons.join(\n        tdf[q].groupby('canton').sales.mean(), \n        on='canton').fillna(0)\n    \n    # ad map\n    fig.add_trace(\n        go.Choropleth(\n            geojson=counties, \n            locations=tmp['canton'], z=tmp['sales'],\n            name=str(year),\n            showscale=i==4,\n            featureidkey='properties.cantonup',\n        ),\n        row=rw, col=cl\n        )\n    \n    # Add year text\n    fig.add_trace(\n        go.Scattergeo(\n            showlegend = False,\n            lon = [-78],\n            lat = [1.5],\n            text = f'{year}',\n            mode = 'text',\n            textfont={ \"size\":20}),\n        row=rw, col=cl)\n\n# set map range\nfig.update_geos(\n    scope='south america',\n    lataxis_range=[-5,2], \n    lonaxis_range=[-81, -75])\n\nfig.update_layout(height=1000, title='Average Sales per Canton and Year')\n\nfig.show()","c6208a43":"\ntdf = store_sales.loc[:, :, '2017'].reset_index()\n\nfig = px.line(tdf, \n              x='date',\n              line_group='store_nbr',\n              animation_frame='family',\n              y='sales',\n              markers=True,\n              title='Sales 2017 per Day, Store and Product Family')\n\nfig.layout.updatemenus =[\n                        dict(active=0, buttons=list([\n                            dict(label=f\"{s}\",\n                                 method=\"update\",\n                                 args=[{\"visible\": [f\"store_nbr={s}\" in e.hovertemplate for e in fig.data] },\n                                       #{\"title\": \"Store Number\"}\n                                      ]) for s in  tdf.store_nbr.unique()\n                        ]))]\n\n#fig.update_layout(\n#    xaxis=dict(\n#        rangeslider=dict(\n#            visible=True\n#        ),\n#        type=\"date\"\n#    ),\n#    height=700\n#)\n\nfig.show()","3ec91a04":"tdf = store_sales.loc[:, :, '2017'].reset_index()\n\nfig = px.box(tdf[tdf.sales>0], \n             y='sales',\n             color='family',\n             animation_frame='store_nbr',\n             title='2017 Sales Boxplot per Store and Product Family'\n            )\n\nfig.show()","46719c1c":"\ntop10 = store_sales.groupby('store_nbr').sales.sum().nlargest(10)\ntdf = store_sales.loc[top10.index.values, :, :].reset_index()\ntdf['year'] = tdf.date.dt.year\ntdf['store'] = 'store ' + tdf.store_nbr.astype('str')\ntdf= tdf.groupby(['store','family','year']).sum().reset_index()\nfig = px.bar(tdf, \n             x='store', \n             y='sales', \n             color='family',\n             animation_frame='year',\n             title=\"Top 10 Stores by total sales\")\nfig.show()","fef81bb1":"\nlow10 = store_sales.groupby('store_nbr').sales.sum().nsmallest(10)\nfig = make_subplots(\n    rows=1, cols=2,\n    #column_widths=[0.3, 0.3, 0.4],\n    shared_yaxes=True,\n    specs=[[{\"type\": \"choropleth\"}, {\"type\": \"choropleth\"}]\n          ])\n\nrw = 0\ntdf = store_sales.reset_index()\nfor i, stores in enumerate([top10, low10]):\n    q = (tdf.store_nbr.isin(stores.index.values))\n    levels = ['store_nbr', 'type', 'cluster','canton']\n    \n    # left join from cantons i.o. to display all cantons\n    tmp = cantons.join(\n        tdf[q].groupby(levels).mean().reset_index(levels[:-1]), \n        on='canton').fillna(0)\n    \n    # ad map\n    fig.add_trace(\n        go.Choropleth(\n            geojson=counties, \n            locations=tmp['canton'], z=tmp['sales'],\n            showscale=False,\n            colorscale= 'Greens' if i==0 else 'Reds',\n            featureidkey='properties.cantonup'\n        ),\n        row=1, col=i+1\n        )\n    \n    # Add text\n    fig.add_trace(\n        go.Scattergeo(\n            showlegend = False,\n            lon = [-78],\n            lat = [1.5],\n            text = 'Top' if i==0 else 'Low',\n            mode = 'text',\n            textfont={ \"size\":20}),\n        row=1, col=i+1)\n\n# set map range\nfig.update_geos(\n    scope='south america',\n    lataxis_range=[-5,2], \n    lonaxis_range=[-81, -75])\n\nfig.update_layout(title='Top and Lowest 10 Selling Stores')\n\nfig.show()","3d5ffe64":"#top5 = store_sales.groupby('family').sales.sum().nlargest(5)\n#tdf = store_sales.loc[:,top5.index.values,'2014':].reset_index()\n#tdf['year'] = tdf.date.dt.year\n##tdf['store'] = 'store ' + tdf.store_nbr.astype('str')\n#tdf= tdf.groupby(['store_nbr','family','year']).sum().reset_index()\n##tdf['familyy'] = tdf.family.astype('str')\n#fig = px.scatter(tdf, \n#             x='sales',\n#             y='store_nbr',\n#             size='onpromotion', \n#             color='family',\n#             animation_frame='year',\n#             title=\"Top 10 Stores by total sales\",\n#             log_x=True,\n#             size_max=60)\n#fig.show()","8329bf1f":"# Corporaci\u00f3n Favorita Store Sales Dashboard\nThis notebook is designed to interactively explore store sales from Corporaci\u00f3n Favorita, a large Ecuadorian-based grocery retailer.\n\nThe provided data features number of sold items per product family, store number and day from 2013 to August of 2017. Favorita has 54 stores 22 cantons and groups their product into 33 different families. The visualizations aim to allow to explore all of these dimensions."}}