{"cell_type":{"478c9ef1":"code","50adffd7":"code","b58096bd":"code","02a3207d":"code","7d66e42e":"code","fe6ccdc9":"code","c68a0b45":"code","36a72248":"code","d8aeb5ad":"code","65ae3199":"code","f42e58b0":"code","b14eba90":"code","329dd570":"code","419df9c9":"code","b280605f":"code","caeda473":"code","80ea31c6":"code","48e9c680":"code","994907d6":"code","65b45e26":"code","96de94ba":"code","73ce8e2c":"code","6b01b30f":"code","6fb76393":"code","cf7adf5d":"code","9dbafc78":"code","00c93cbb":"code","bd0b4ab4":"code","28f9ef2b":"code","ce7dd4c1":"code","f48a2caf":"code","53552293":"code","74b88bde":"markdown","270ed54e":"markdown","3a08212d":"markdown","9ebd1f8c":"markdown","49eb97ea":"markdown","0f270a4b":"markdown","f790e0da":"markdown","ad701614":"markdown","85d2364a":"markdown","77108e9d":"markdown","1186f5df":"markdown","1accbc25":"markdown","17a5b7c1":"markdown"},"source":{"478c9ef1":"import numpy as np \nimport pandas as pd\nimport os\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm_notebook\nimport seaborn as sns\n%matplotlib inline \nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)","50adffd7":"data_df = pd.read_csv(\"\/kaggle\/input\/paysim1\/PS_20174392719_1491204439457_log.csv\")","b58096bd":"print(f\"Data shape: {data_df.shape}\")","02a3207d":"data_df.head()","7d66e42e":"data_df.info()","fe6ccdc9":"data_df.describe()","c68a0b45":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","36a72248":"missing_data(data_df)","d8aeb5ad":"def unique_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    uniques = []\n    for col in data.columns:\n        unique = data[col].nunique()\n        uniques.append(unique)\n    tt['Uniques'] = uniques\n    return(np.transpose(tt))","65ae3199":"unique_values(data_df)","f42e58b0":"def plot_count(df, feature, title='', size=2):\n    f, ax = plt.subplots(1,1, figsize=(3*size,2*size))\n    total = float(len(df))\n    sns.countplot(df[feature],order = df[feature].value_counts().index, palette='Set3')\n    plt.title(title)\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.4f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()\n","b14eba90":"plot_count(data_df, 'type', 'Distribution of type (count & percent)', size=2.5)","329dd570":"plot_count(data_df, 'isFraud', 'Distribution of `isFraud` (count & percent)', size=2.5)","419df9c9":"plot_count(data_df, 'isFlaggedFraud', 'Distribution of `isFlaggedFraud` (count & percent)', size=2.5)","b280605f":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12,6))\ns = sns.boxplot(ax = ax1, x=\"isFraud\", y=\"step\", hue=\"isFraud\",data=data_df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"isFraud\", y=\"step\", hue=\"isFraud\",data=data_df, palette=\"PRGn\",showfliers=False)\nplt.show()","caeda473":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12,6))\ns = sns.boxplot(ax = ax1, x=\"isFlaggedFraud\", y=\"step\", hue=\"isFlaggedFraud\",data=data_df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"isFlaggedFraud\", y=\"step\", hue=\"isFlaggedFraud\",data=data_df, palette=\"PRGn\",showfliers=False)\nplt.show()","80ea31c6":"fig, (ax1, ax2) = plt.subplots(nrows=2, figsize=(16,12))\ns = sns.boxplot(ax = ax1, x=\"isFraud\", y=\"step\", hue=\"type\",data=data_df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"isFraud\", y=\"step\", hue=\"type\",data=data_df, palette=\"PRGn\",showfliers=False)\nplt.show()","48e9c680":"fig, (ax1, ax2) = plt.subplots(nrows=2, figsize=(16,12))\ns = sns.boxplot(ax = ax1, x=\"isFlaggedFraud\", y=\"step\", hue=\"type\",data=data_df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"isFlaggedFraud\", y=\"step\", hue=\"type\",data=data_df, palette=\"PRGn\",showfliers=False)\nplt.show()","994907d6":"fig, (ax1, ax2) = plt.subplots(nrows=2, figsize=(16,12))\ns = sns.boxplot(ax = ax1, x=\"isFraud\", y=\"amount\", hue=\"type\",data=data_df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"isFraud\", y=\"amount\", hue=\"type\",data=data_df, palette=\"PRGn\",showfliers=False)\nplt.show()","65b45e26":"fig, (ax1, ax2) = plt.subplots(nrows=2, figsize=(16,12))\ns = sns.boxplot(ax = ax1, x=\"isFraud\", y=\"oldbalanceOrg\", hue=\"type\",data=data_df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"isFraud\", y=\"oldbalanceOrg\", hue=\"type\",data=data_df, palette=\"PRGn\",showfliers=False)\nplt.show()","96de94ba":"fig, (ax1, ax2) = plt.subplots(nrows=2, figsize=(16,12))\ns = sns.boxplot(ax = ax1, x=\"isFraud\", y=\"newbalanceOrig\", hue=\"type\",data=data_df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"isFraud\", y=\"newbalanceOrig\", hue=\"type\",data=data_df, palette=\"PRGn\",showfliers=False)\nplt.show()","73ce8e2c":"fig, (ax1, ax2) = plt.subplots(nrows=2, figsize=(16,12))\ns = sns.boxplot(ax = ax1, x=\"isFraud\", y=\"oldbalanceDest\", hue=\"type\",data=data_df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"isFraud\", y=\"oldbalanceDest\", hue=\"type\",data=data_df, palette=\"PRGn\",showfliers=False)\nplt.show()","6b01b30f":"fig, (ax1, ax2) = plt.subplots(nrows=2, figsize=(16,12))\ns = sns.boxplot(ax = ax1, x=\"isFraud\", y=\"newbalanceDest\", hue=\"type\",data=data_df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"isFraud\", y=\"newbalanceDest\", hue=\"type\",data=data_df, palette=\"PRGn\",showfliers=False)\nplt.show()","6fb76393":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom catboost import CatBoostClassifier","cf7adf5d":"X = data_df.drop(['isFraud', 'isFlaggedFraud'], axis=1)\ny = data_df.isFraud","9dbafc78":"X_train, X_validation, y_train, y_validation = train_test_split(X, y, train_size=0.7, random_state=1234)","00c93cbb":"categorical_features_indices = np.where(X.dtypes != np.float)[0]","bd0b4ab4":"clf = CatBoostClassifier(iterations=500,\n                             learning_rate=0.02,\n                             depth=12,\n                             eval_metric='AUC',\n                             random_seed = 42,\n                             bagging_temperature = 0.2,\n                             od_type='Iter',\n                             metric_period = 20,\n                             od_wait=25)","28f9ef2b":"clf.fit(X_train, y_train,cat_features=categorical_features_indices,eval_set=(X_validation, y_validation),plot=True)","ce7dd4c1":"preds = clf.predict(X_validation)","f48a2caf":"cm = pd.crosstab(y_validation.values, preds, rownames=['Actual'], colnames=['Predicted'])\nfig, (ax1) = plt.subplots(ncols=1, figsize=(5,5))\nsns.heatmap(cm, \n            xticklabels=['Not Fraud', 'Fraud'],\n            yticklabels=['Not Fraud', 'Fraud'],\n            annot=True,ax=ax1,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\nplt.title('Confusion Matrix', fontsize=14)\nplt.show()","53552293":"print(f\"ROC-AUC score: {roc_auc_score(y_validation.values, preds)}\")","74b88bde":"Prepare the features (X) and labels (y).","270ed54e":"# Model\n\nFrom the data, we will use 70% for training and 30% for validation.\n\nCatBoostClassifier (CatBoost) algorithm is used.\n\nROC-AUC is the metric choosen.\n","3a08212d":"# Introduction\n\n\n## Data generation\n\n\nPaySim simulates mobile money transactions based on a sample of real transactions extracted from one month of financial logs from a mobile money service implemented in an African country. The original logs were provided by a multinational company, who is the provider of the mobile financial service which is currently running in more than 14 countries all around the world.\n\n## Data structure\n\nThis is a sample of 1 row with headers explanation:\n\n1,PAYMENT,1060.31,C429214117,1089.0,28.69,M1591654462,0.0,0.0,0,0\n\n* step - maps a unit of time in the real world. In this case 1 step is 1 hour of time. Total steps 744 (30 days simulation).\n\n* type - CASH-IN, CASH-OUT, DEBIT, PAYMENT and TRANSFER.\n\n* amount - amount of the transaction in local currency.\n\n* nameOrig - customer who started the transaction\n\n* oldbalanceOrg - initial balance before the transaction\n\n* newbalanceOrig - new balance after the transaction\n\n* nameDest - customer who is the recipient of the transaction\n\n* oldbalanceDest - initial balance recipient before the transaction. Note that there is not information for customers that start with M (Merchants).\n\n* newbalanceDest - new balance recipient after the transaction. Note that there is not information for customers that start with M (Merchants).\n\n* isFraud - This is the transactions made by the fraudulent agents inside the simulation. In this specific dataset the fraudulent behavior of the agents aims to profit by taking control or customers accounts and try to empty the funds by transferring to another account and then cashing out of the system.\n\n* isFlaggedFraud - The business model aims to control massive transfers from one account to another and flags illegal attempts. An illegal attempt in this dataset is an attempt to transfer more than 200.000 in a single transaction.","9ebd1f8c":"## Glimpse the data","49eb97ea":"Confusion matrix.","0f270a4b":"# Analysis preparation\n\n\n## Load packages","f790e0da":"We continue with the distribution of the data (count plots for categorical values, values distribution for numerical values).","ad701614":"# Data exploration\n\nLet's start by checking for:\n\n* columns names and types, and memory usage (info);\n* aggregated functions for numerical values (describe);\n* missing values;\n* unique values.\n","85d2364a":"## Load the data","77108e9d":"Perform train-validation split.","1186f5df":"Prediction for validation set.","1accbc25":"Specify the categorical features. CatBoost is very efficient in treatment of categorical features - no special processing (Label encoding, One-Hot encoding, Binary encoding) needed.","17a5b7c1":"Validation ROC-AUC."}}