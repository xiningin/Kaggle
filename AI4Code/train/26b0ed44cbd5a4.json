{"cell_type":{"2e669746":"code","a6590a8a":"code","1709a73d":"code","e0e2281a":"code","254adafe":"code","3023941f":"code","6557ae24":"code","34fd1432":"code","a8c80ff4":"code","19a7bb15":"code","5af4bb02":"code","1016f971":"code","97bc3778":"code","6a615331":"code","a67ac0ab":"code","594a9fe4":"code","19c40081":"code","5db19244":"code","8ab386d2":"code","7fa7cf28":"code","b366dadc":"code","3e4c9b88":"code","19faaf19":"code","41f308a9":"code","e368669e":"code","ac03e5e2":"code","6721fe7f":"code","77425100":"code","da47b741":"code","c423e0bd":"code","a4015022":"code","599e0fd1":"code","34faed47":"code","c3dd6d3f":"code","51c61a17":"code","58763b40":"code","eec61a08":"code","edfcfd67":"code","769240ae":"code","2cf93c5c":"code","fc434612":"code","8031cfd4":"code","eb05a10f":"code","617d4bb0":"markdown","5c81cc00":"markdown","e7364e3d":"markdown","964de4c1":"markdown","3f8b5500":"markdown","87961f69":"markdown","2fa1e2c1":"markdown","a0fb793a":"markdown","4ecceee1":"markdown","e62f651b":"markdown","2da1a046":"markdown","a10c9ed7":"markdown","a9453b05":"markdown","96590d6e":"markdown","9de8bb95":"markdown","84c54484":"markdown","a4819258":"markdown","d1490fe4":"markdown","7ce26c7b":"markdown","b1d2c956":"markdown","bc637bf9":"markdown","a0442af1":"markdown","0ac7952a":"markdown","fa2b6e34":"markdown","6115608a":"markdown","2b11839f":"markdown","c3257cbe":"markdown","a07ea7ef":"markdown"},"source":{"2e669746":"# Work with Data - the main Python libraries\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling as pp\n\n# Visualization\nimport matplotlib.pyplot as plt\n\n# Preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold, ShuffleSplit, GridSearchCV\n\n# Modeling\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nimport xgboost as xgb\nfrom xgboost.sklearn import XGBRegressor\n\n# Metrics\nfrom sklearn.metrics import r2_score\n\nimport warnings\nwarnings.simplefilter('ignore')","a6590a8a":"pd.set_option('max_colwidth', 200)","1709a73d":"# Download data\ndata = pd.read_csv('..\/input\/wq-southern-bug-river-01052021\/PB_All_2000_2021.csv', sep=';', header=0)\ndata","e0e2281a":"# Information for training data\ndata.info()","254adafe":"# Download data about monitoring stations\ndata_about = pd.read_csv('..\/input\/wq-southern-bug-river-01052021\/PB_stations.csv', sep=';', header=0, encoding='cp1251')\ndata_about.sort_values(by=['length'], ascending=False)","3023941f":"# Amount data observations of stations\ndata['id'].value_counts().sort_values().plot(kind='barh')","6557ae24":"# Determination the year of observations\ndata['ds'] = pd.to_datetime(data['date'])\ndata['year'] = data['ds'].dt.year\ndata.info()","34fd1432":"# Determination the start year of observations for all stations\ndata[['id', 'year']].groupby(by=['id']).min().sort_values(by=['year'], ascending=False)","a8c80ff4":"# Determination the final year of observations for all stations\ndata[['id', 'year']].groupby(by=['id']).max().sort_values(by=['year'], ascending=False)","19a7bb15":"# Information about stations 14, 15, 16\nstations_good = [14, 15, 16]\ndata_about[data_about['id'].isin(stations_good)]","5af4bb02":"# Set target indicator\ntarget_data_name = 'O2'\n#feature_target_all = ['NH4', 'BSK5', 'NO3', 'NO2', 'SO4', 'PO4', 'CL']\nfeature_target_all = ['NO2', 'NH4']\nfeature_data_all = feature_target_all + [target_data_name]\nfeature_data_all","1016f971":"# Data sampling only for good stations\ndf_indicator = data[['id', 'ds'] + feature_data_all]\ndf_indicator = df_indicator[df_indicator['id'].isin(stations_good)].dropna().reset_index(drop=True)\ndf_indicator","97bc3778":"cols = []\nfor station in stations_good:\n    for feature in feature_data_all:\n        cols.append(str(station) + \"_\" + feature)\ncols","6a615331":"df = pd.pivot_table(df_indicator, index=[\"ds\"], columns=[\"id\"], values=feature_data_all).dropna()\ndf.columns = cols\ndf","a67ac0ab":"# Data visualization\ndf.plot(figsize=(12,10))","594a9fe4":"# EDA with Pandas Profiling\npp.ProfileReport(df)","19c40081":"# Set target data\ntarget_name = '16_' + target_data_name\ntarget_data = df.pop(target_name)\ntarget_data","5db19244":"# Dividing data into training and test\ntrain, test, target, target_test = train_test_split(df, target_data, test_size=0.4, random_state=0)\nprint(train.shape, test.shape)","8ab386d2":"# Display the statistics for training data\ntrain.describe()","7fa7cf28":"# Display the statistics for test data\ntest.describe()","b366dadc":"# Standartization data\nscaler = StandardScaler()\ntrain = pd.DataFrame(scaler.fit_transform(train), columns = train.columns)\n\n# Display training data\ntrain","3e4c9b88":"# Standartization data\ntest = pd.DataFrame(scaler.transform(test), columns = test.columns)","19faaf19":"# Training data splitting to new training (part of the all training) and validation data\ntrain_all = train.copy()\ntarget_all = target.copy()\ntrain, valid, target_train, target_valid = train_test_split(train_all, target_all, test_size=0.2, random_state=0)","41f308a9":"# Display information about new training data\ntrain.info()","e368669e":"# Display information about validation data\nvalid.info()","ac03e5e2":"# Cross-validation of training data with shuffle\ncv_train = ShuffleSplit(n_splits=3, test_size=0.5, random_state=0)","6721fe7f":"# Creation the dataframe with the resulting score of all models\nresult = pd.DataFrame({'model' : ['Linear Regression', 'Random Forest Regressor', 'XGBoost Regressor'], \n                       'train_score': 0, 'valid_score': 0})\nresult","77425100":"# Linear Regression\nlr = LinearRegression()\nlr.fit(train, target_train)\n\n# Prediction for training data\ny_train_lr = lr.predict(train)\n\n# Accuracy of model\nr2_score_acc = round(r2_score(target_train, y_train_lr), 2)\nprint(f'Accuracy of Linear Regression model training is {r2_score_acc}')\n\n# Save to result dataframe\nresult.loc[result['model'] == 'Linear Regression', 'train_score'] = r2_score_acc","da47b741":"# Print rounded r2_lr = lr.predict(valid)\ny_val_lr = lr.predict(valid)\nr2_score_acc_valid = round(r2_score(target_valid, y_val_lr),2)\nresult.loc[result['model'] == 'Linear Regression', 'valid_score'] = r2_score_acc_valid\nprint(f'Accuracy of Linear Regression model prediction for valid dataset is {r2_score_acc_valid}')","c423e0bd":"%%time\n# Random Forest Regressor\nrf = RandomForestRegressor()\nparam_grid = {'n_estimators': [10, 20, 50], 'min_samples_leaf': [i for i in range(4,7)], \n              'max_features': ['auto'], 'max_depth': [i for i in range(3,6)], \n              'criterion': ['mse'], 'bootstrap': [False]}\n\n# Training model\nrf_CV = GridSearchCV(rf, param_grid=param_grid, cv=cv_train, verbose=False)\nrf_CV.fit(train, target_train)\nprint(rf_CV.best_params_)\n\n# Prediction for training data\ny_train_rf = rf_CV.predict(train)\n\n# Accuracy of model\nr2_score_acc = round(r2_score(target_train, y_train_rf),2)\nprint(f'Accuracy of RandomForestRegressor model training is {r2_score_acc}')\n\n# Save to result dataframe\nresult.loc[result['model'] == 'Random Forest Regressor', 'train_score'] = r2_score_acc","a4015022":"# Print rounded r2_score_acc to 2 decimal values after the text\ny_val_rf = rf_CV.predict(valid)\nr2_score_acc_valid = round(r2_score(target_valid, y_val_rf),2)\nresult.loc[result['model'] == 'Random Forest Regressor', 'valid_score'] = r2_score_acc_valid\nprint(f'Accuracy of RandomForestRegressor model prediction for valid dataset is {r2_score_acc_valid}')","599e0fd1":"%%time\n# XGBoost Regressor\nxgbr = xgb.XGBRegressor() \n# parameters = {'n_estimators': [60, 70, 80, 90, 95, 100, 105, 110, 120, 130, 140], \n#               'learning_rate': [0.005, 0.01, 0.05, 0.075, 0.1],\n#               'max_depth': [3, 5, 7, 9],\n#               'reg_lambda': [0.1, 0.3, 0.5]}\n\nparameters = {'n_estimators': [60, 75, 100], \n              'learning_rate': [0.02, 0.05],\n              'max_depth': [4, 5],\n              'reg_lambda': [0.1, 0.3]}\n\n# Training model\nxgb_CV = GridSearchCV(estimator=xgbr, param_grid=parameters, cv=cv_train, n_jobs=-1)\nxgb_CV.fit(train, target_train)\nprint(\"Best score: %0.3f\" % xgb_CV.best_score_)\nprint(\"Best parameters set:\", xgb_CV.best_params_)\n\n# Prediction for training data\ny_train_xgb = xgb_CV.predict(train)\n\n# Accuracy of model\nr2_score_acc = round(r2_score(target_train, y_train_xgb),2)\nprint(f'Accuracy of XGBoost Regressor model training is {r2_score_acc}')\n\n# Save to result dataframe\nresult.loc[result['model'] == 'XGBoost Regressor', 'train_score'] = r2_score_acc","34faed47":"# Print rounded r2_score_acc to 2 decimal values after the text\ny_val_xgb = xgb_CV.predict(valid)\nr2_score_acc_valid = round(r2_score(target_valid, y_val_xgb),2)\nresult.loc[result['model'] == 'XGBoost Regressor', 'valid_score'] = r2_score_acc_valid\nprint(f'Accuracy of XGBoost Regressor model prediction for valid dataset is {r2_score_acc_valid}')","c3dd6d3f":"# Feature importance diagram\nxgbr = xgb.XGBRegressor(**xgb_CV.best_params_)\nxgbr.fit(train, target_train)\nfig =  plt.figure(figsize = (10,8))\naxes = fig.add_subplot(111)\nxgb.plot_importance(xgbr,ax = axes,height = 0.5)\nplt.show();\nplt.close()","51c61a17":"# Prediction of target for test data for all models\ny_test_lr = lr.predict(test)\ny_test_rf = rf_CV.predict(test)\ny_test_xgb = xgb_CV.predict(test)","58763b40":"# Building plot for prediction for the training data \nx = np.arange(len(train))\nplt.figure(figsize=(16,10))\nplt.scatter(x, target_train, label = \"Target training data\", color = 'g')\nplt.scatter(x, y_train_lr, label = \"Linear Regression prediction\", color = 'b')\nplt.scatter(x, y_train_rf, label = \"Random Forest prediction\", color = 'y')\nplt.scatter(x, y_train_xgb, label = \"XGBoost Regressor prediction\", color = 'brown')\nplt.plot(x, np.full(len(train), 0.5), label = \"Maximum allowable value\", color = 'r')\nplt.title('Prediction for the training data')\nplt.legend(loc='best')\nplt.grid(True)","eec61a08":"# Building plot for prediction for the valid data \nx = np.arange(len(valid))\nplt.figure(figsize=(16,10))\nplt.scatter(x, target_valid, label = \"Target valid data\", color = 'g')\nplt.scatter(x, y_val_lr, label = \"Linear Regression prediction\", color = 'b')\nplt.scatter(x, y_val_rf, label = \"Random Forest prediction\", color = 'y')\nplt.scatter(x, y_val_xgb, label = \"XGBoost Regressor prediction\", color = 'brown')\nplt.plot(x, np.full(len(valid), 0.5), label = \"Maximum allowable value\", color = 'r')\nplt.title('Prediction for the valid data')\nplt.legend(loc='best')\nplt.grid(True)","edfcfd67":"# Building plot for prediction for the test data \nx = np.arange(len(test))\nplt.figure(figsize=(16,10))\nplt.scatter(x, target_test, label = \"Target test data\", color = 'g')\nplt.scatter(x, y_test_lr, label = \"Linear Regression prediction\", color = 'b')\nplt.scatter(x, y_test_rf, label = \"Random Forest prediction\", color = 'y')\nplt.scatter(x, y_test_xgb, label = \"XGBoost Regressor prediction\", color = 'brown')\nplt.plot(x, np.full(len(test), 0.5), label = \"Maximum allowable value\", color = 'r')\nplt.title('Prediction for the test data')\nplt.legend(loc='best')\nplt.grid(True)","769240ae":"# Display results of modeling\nresult.sort_values(by=['valid_score', 'train_score'], ascending=False)","2cf93c5c":"# Select models with minimal overfitting\nresult_best = result[(result['train_score'] - result['valid_score']).abs() < 0.15]\nresult_best.sort_values(by=['valid_score', 'train_score'], ascending=False)","fc434612":"# Select the best model\nresult_best.nlargest(1, 'valid_score')","8031cfd4":"# Find a name of the best model (with maximal valid score)\nbest_model_name = result_best.loc[result_best['valid_score'].idxmax(result_best['valid_score'].max()), 'model']","eb05a10f":"print(f'The best model is \"{best_model_name}\"')","617d4bb0":"The analysis showed that many values are only available in stations 1 and 2, while others have much less data. I propose select only these two stations.","5c81cc00":"### Map of the stations:\nhttp:\/\/monitoring.davr.gov.ua\/EcoWaterMon\/GDKMap\/Index\n\n![image.png](attachment:7d210839-9bcd-46a8-a58d-ce90f29fb294.png)\n\nThe water quality state monitoring stations of the Southern Bug (or Pivdennyi Booh) river.","e7364e3d":"### 4.1. Linear Regression<a class=\"anchor\" id=\"4.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","964de4c1":"## 7. Select the best model <a class=\"anchor\" id=\"7\"><\/a>\n\n[Back to Table of Contents](#0.1)","3f8b5500":"## 6. Visualization<a class=\"anchor\" id=\"6\"><\/a>\n\n[Back to Table of Contents](#0.1)","87961f69":"**ADDITIONAL TASKS:** \n1. Try to change the parameters (see examples above).\n2. Try deleting anomalous data. \n3. Add to dataframe result also calculated array: y_train, y_val.\n4. Creation the function with all commands and output information (in each section of this chapter 4) for all models:\n\n        result = get_model(train, valid, target_train, target_valid, model_name, param_grid, cv_train, result)","2fa1e2c1":"As you can see, only stations 3, 5, 10, 14, 15, 16 and 22 have modern data.","a0fb793a":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download data](#2)\n1. [EDA & FE & Preprocessing data](#3)\n    - [Statistics & FE](#3.1)\n    - [Data standartization](#3.2)\n    - [Training data splitting](#3.3)\n    - [Cross-validation of training data](#3.4)\n1. [Modeling](#4)\n    - [Linear Regression](#4.1)\n    - [Random Forest Regressor](#4.2)\n    - [XGBoost Regressor](#4.3)    \n1. [Test prediction](#5)\n1. [Results visualization](#6)\n1. [Select the best model](#6)","4ecceee1":"## Acknowledgements\n* [Data Science for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/data-science-for-tabular-data-advanced-techniques)\n* [EDA for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/eda-for-tabular-data-advanced-techniques)\n* [Datasets for river water quality prediction](https:\/\/www.kaggle.com\/vbmokin\/datasets-for-river-water-quality-prediction)\n* [AI-ML-DS Training. L1T : Titanic - Decision Tree](https:\/\/www.kaggle.com\/vbmokin\/ai-ml-ds-training-l1t-titanic-decision-tree)\n* [AI-ML-DS Training. L1T : NH4 - linear regression](https:\/\/www.kaggle.com\/vbmokin\/ai-ml-ds-training-l1t-nh4-linear-regression)\n* [Heart Disease - Automatic AdvEDA & FE & 20 models](https:\/\/www.kaggle.com\/vbmokin\/heart-disease-automatic-adveda-fe-20-models)\n* [BOD prediction in river - 15 regression models](https:\/\/www.kaggle.com\/vbmokin\/bod-prediction-in-river-15-regression-models)\n* [The system \"MONITORING AND ENVIRONMENTAL ASSESSMENT OF WATER RESOURCES OF UKRAINE\", State Agency of Water Resources of Ukraine](http:\/\/monitoring.davr.gov.ua\/EcoWaterMon\/GDKMap\/Index)","e62f651b":"Dataset contains data on river water quality for 8 indicators for 22 monitoring stations.\n\nData for 2000-2021 for the Southern Bug (or Pivdennyi Booh) river.","2da1a046":"## 5. Test prediction<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","a10c9ed7":"## 4. Modeling<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","a9453b05":"## 3. EDA & FE & Preprocessing data<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","96590d6e":"### 3.1. Statistics & FE<a class=\"anchor\" id=\"3.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","9de8bb95":"### 4.2. Random Forest Regressor<a class=\"anchor\" id=\"4.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","84c54484":"### 3.2. Data standartization<a class=\"anchor\" id=\"3.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","a4819258":"### 3.4. Cross-validation of training data<a class=\"anchor\" id=\"3.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","d1490fe4":"As you can see, the stations 5 & 13 have little data.","7ce26c7b":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","b1d2c956":"\nAlthough, if you limit yourself to 2018, then you can take all the stations.","bc637bf9":"\u0421onsider only stations 14, 15, 16.","a0442af1":"### 4.3. XGBoost Regressor<a class=\"anchor\" id=\"4.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","0ac7952a":"# Dataset [River Water Quality EDA and Forecasting](https:\/\/www.kaggle.com\/vbmokin\/wq-southern-bug-river-01052021)","fa2b6e34":"## 2. Download data<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","6115608a":"### 3.3. Training data splitting<a class=\"anchor\" id=\"3.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","2b11839f":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)","c3257cbe":"### Possible Tasks:\n\n1. Analysis of data dependences, including EDA.\n\n2. Prediction of the data in the certain station by data from upstream stations with the highest accuracy.","a07ea7ef":"**ADDITIONAL TASK:** \n1. Set number of splitting = 5, 7, 10 and to compare of results.\n2. Try use another method for cross-validation of training data (without shuffle):\n\n        KFold(n_splits=5, shuffle=False, random_state=0)"}}