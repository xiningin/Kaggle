{"cell_type":{"85c282e0":"code","25515cab":"code","4d1e768f":"code","f93d4dd1":"code","7e1f0593":"code","66785bdc":"code","e3b10c80":"code","5d9f018b":"code","76fc921f":"code","516d7a45":"code","8fc74f17":"code","94cae63f":"code","d549a29b":"code","deaa1f38":"code","d1e1adae":"code","adbed824":"code","eda88eec":"code","4f128307":"code","90bb1ef0":"code","e8df4ac0":"code","a8808014":"code","327f95b9":"code","7c9e37f5":"code","d3555c47":"code","680397cd":"code","53b6bfc0":"code","21c8e4c2":"code","732b6663":"code","aabbd9eb":"code","ae56c903":"code","70e16317":"code","25ea47b8":"code","ab429cf7":"code","21732fc0":"code","9e8e3349":"code","95b23121":"code","14e2872a":"code","55b59f74":"code","c6135854":"code","c9342b6e":"code","583eca46":"code","f794f596":"code","89f74a9d":"code","26f3076e":"code","1357a0f2":"code","5ce45426":"code","bc80069d":"code","c8934a1c":"code","b287aa97":"code","27f4146c":"code","1f1f9cf8":"code","94d67fea":"code","515351fd":"code","e50d55de":"code","d236a04a":"code","a17dae9b":"code","60e2b07e":"code","6e04a92c":"code","9dc46ae8":"code","d952731f":"code","fa944e50":"code","0b5720fa":"code","ce09b584":"code","db5bdd6d":"code","8c9e486b":"code","32326da2":"code","f576ce9f":"code","43b01372":"code","0ff3262b":"code","82d49011":"code","bd090fd1":"code","2e94c36d":"code","280ae8b9":"code","01f24739":"code","c6bfd874":"code","e600ca68":"code","9c057004":"markdown","9869757a":"markdown","3f2c1d31":"markdown","7b749bc3":"markdown","54b82e3e":"markdown","3eeba5e8":"markdown","8a62dfee":"markdown","9ec8bf30":"markdown","fde2865b":"markdown","011792e4":"markdown","fd1053f1":"markdown"},"source":{"85c282e0":"## importing libraries:\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","25515cab":"from urllib.request import urlretrieve","4d1e768f":"urlretrieve('https:\/\/github.com\/ashutoshkrris\/Data-Analysis-with-Python\/raw\/master\/zerotopandas-course-project-starter\/dataset\/matches.csv','matches.csv')","f93d4dd1":"## assigning data as df:\n\ndf = pd.read_csv(\"matches.csv\")","7e1f0593":"df.head()","66785bdc":"df.shape","e3b10c80":"df.info()","5d9f018b":"df.isnull().sum()","76fc921f":"## droping this 3 columns since they won't help us in exploration since there aren't any information related to right or wrong decisions given by umpires.\n\ndf = df.drop([\"umpire1\",\"umpire2\",\"umpire3\"],axis=1)","516d7a45":"## dropping id column as well:\ndf = df.drop(\"id\",axis=1)","8fc74f17":"## checking the value counts for each season which will let us know the number of matches being conducted in that season.\n## The numbers vary due to obvious reasons like more number of teams in some season and different format in some seasons.\n\ndf.Season.value_counts()","94cae63f":"## checking number of matches in which duckworth-lewis methods were used.\n\ndf.dl_applied.value_counts()","d549a29b":"from datetime import datetime","deaa1f38":"df.date = pd.to_datetime(df[\"date\"])","d1e1adae":"df.date","adbed824":"df.head()","eda88eec":"## looking at all team names.\n\ndf.team1.unique()","4f128307":"## Modifying names of all the teams for following reaons:\n\n## 1. shorter names will make calling the names of teams very easy during exploration.\n\n## 2. It won't create any confusion since most of the times teams are called with their reduced names.\n\n## 3. Some teams have changed their after some years like Delhi and Hyderabad.\n\n## 4. labelling will be easy during graphical plotting.\n\ndf = df.replace({'Sunrisers Hyderabad':\"SRH\", 'Mumbai Indians': \"MI\", 'Gujarat Lions':\"GL\",\n       'Rising Pune Supergiants': \"Pune\", 'Royal Challengers Bangalore': \"RCB\",\n       'Kolkata Knight Riders': \"KKR\", 'Delhi Daredevils': \"Delhi\", 'Kings XI Punjab':\"Punjab\",\n       'Chennai Super Kings':\"CSK\", 'Rajasthan Royals': \"RR\", 'Deccan Chargers':\"SRH\",\n       'Kochi Tuskers Kerala':\"KTK\", 'Pune Warriors':\"Pune\", 'Delhi Capitals':\"Delhi\"})","90bb1ef0":"df.head()","e8df4ac0":"## The most basic criteria before exploration is making sure that there isn't any null values.\n\ndf.isnull().sum()","a8808014":"## There are 4 null values in city column.\n\n## Though the city column is null but the venue column can help us fill those values.\n\n## all null values belong to season 2014.\n\ndf[df[\"city\"].isnull()]","327f95b9":"## checking all season whose data is available in the dataset.\n\ndf.Season.unique()","7c9e37f5":"## changing the season name as per year which will make calling those season easy.\n\ndf = df.replace({'IPL-2017':2017, 'IPL-2008':2008, 'IPL-2009':2009, 'IPL-2010':2010, 'IPL-2011':2011,\n       'IPL-2012':2012, 'IPL-2013':2013, 'IPL-2014':2014, 'IPL-2015':2015, 'IPL-2016':2016,\n       'IPL-2018':2018, 'IPL-2019':2019})","d3555c47":"df.head(2)","680397cd":"## checking all city names for 2014 season.\n\ndf[df[\"Season\"] == 2014].city.unique()","53b6bfc0":"## checking all venue names for 2014 season.\n\ndf[df[\"Season\"] == 2014].venue.unique()","21c8e4c2":"## we had 4 null values in city column whose venue was Dubai International stadium which implies that city would have been Dubai.\n\n## So filling those missing values with \"Dubai\".\n\ndf[\"city\"] = df[\"city\"].fillna(\"Dubai\")","732b6663":"## looking at the list we are left with 4 null values in winner and 4 null values in player of the match.\n\ndf.isnull().sum()","aabbd9eb":"## looking at below filtered table in which the winner column was null we can say following things:\n\n## 1. The null values doesn't correspond to missing values but rather the match was called off.\n\n## 2. So we will not drop these columns but rather fill some appropriate value for the same.\n\ndf[df[\"winner\"].isnull()]","ae56c903":"## filling null values in winner and player of the match column:\n\ndf.winner = df.winner.fillna(\"None\")\n\ndf.player_of_match = df.player_of_match.fillna(\"None\")","70e16317":"## we can see that our data doesn't have any null values.\ndf.isnull().sum()","25ea47b8":"df.result.value_counts()","ab429cf7":"df.head(3)","21732fc0":"## Looking at teams with most number of wins:\n\n## we have used [:-1] to left out the last row since it contained none for 4 matches which were unable to take place.\n\nmost_wins_df = df['winner'].value_counts()[:-1]\n\nmost_wins_df = pd.DataFrame(most_wins_df)","9e8e3349":"most_wins_df","95b23121":"most_wins_df.index","14e2872a":"sns.set_style(\"darkgrid\")","55b59f74":"plt.figure(figsize=(12,8))\nsns.barplot(x = most_wins_df.index,y = most_wins_df.winner)\nplt.ylabel(\"Number of Matches Won\",fontsize = 14)\nplt.xticks(fontsize = 14)\nplt.title(\"NUMBER OF MATCHES WON BY A TEAM\",{\"fontsize\":16});","c6135854":"## looking at most man of the match awards:\n\nmost_mom_df = pd.DataFrame(data = df[\"player_of_match\"].value_counts())\nmost_mom_df = most_mom_df.reset_index()","c9342b6e":"most_mom_df","583eca46":"## changing column names:\n\nmost_mom_df = most_mom_df.rename(columns={\"index\":\"player\",\"player_of_match\":\"num of time won\"})\n\n## selecting top 10 players with highest number of wins:\n\nmost_mom_df = most_mom_df[:10]","f794f596":"most_mom_df","89f74a9d":"plt.figure(figsize=(12,6))\nsns.barplot(x = most_mom_df.player, y = most_mom_df[\"num of time won\"])\nplt.ylabel(\"Number of times won\",fontsize = 16)\nplt.xticks(fontsize = 16,rotation = 45)\nplt.title(\"MOST MAN OF THE MATCH AWARDS\",{\"fontsize\":16});","26f3076e":"## making a list of all seasons\n\nseason_column = df.Season.unique()\nseason_column","1357a0f2":"season_column = np.sort(season_column)","5ce45426":"  highest_win_percentage_by_year = []\n  team_with_highest_win_percentage = []","bc80069d":"for season in season_column:\n\n  df_by_year = df[df[\"Season\"] == season]\n  team_most_wins = df_by_year.winner.value_counts().index[0]\n  number_of_wins = df_by_year.winner.value_counts()[0]\n  matches_played = len(df_by_year[(df_by_year.team1 == team_most_wins)|(df_by_year.team2 == team_most_wins)])\n  percentage = np.round(number_of_wins*100\/matches_played,2)\n  highest_win_percentage_by_year.append(percentage)\n  team_with_highest_win_percentage.append(team_most_wins)","c8934a1c":"highest_win_percentage_by_year","b287aa97":"team_with_highest_win_percentage","27f4146c":"## creating a dataframe from above results:\n\nmost_successful_team_by_year = pd.DataFrame({\"Season\" : season_column,\"team\" : team_with_highest_win_percentage,\"win_percentage\":highest_win_percentage_by_year})","1f1f9cf8":"most_successful_team_by_year","94d67fea":"for index,data in enumerate(most_successful_team_by_year.win_percentage):\n  print(index,data)","515351fd":"plt.figure(figsize=(18,6))\nsns.barplot(data = most_successful_team_by_year,x = \"Season\" ,y = \"win_percentage\")\nplt.xlabel(\"Year\",fontsize = 16)\nplt.ylabel(\"Win Percentage\",fontsize = 16)\nfor index,data in enumerate(most_successful_team_by_year.win_percentage):\n  plt.text(x=index - 0.25,y=data+1,s=f\"{data}%\",fontsize = 14)\nfor index,data in enumerate(most_successful_team_by_year.team):\n  plt.text(x=index - 0.35,y=0.6,s=f\"{data}\",fontsize = 16)\nplt.xticks(fontsize=12)\nplt.title(\"MOST SUCCESSFUL TEAM BY YEAR\",fontsize=18,pad=30);","e50d55de":"df.head(2)","d236a04a":"toss_factor = df.toss_winner == df.winner","a17dae9b":"toss_factor","60e2b07e":"toss_factor.value_counts()","6e04a92c":"toss_data = { \"Matches_won_by_toss_winner\" : 393,\n              \"Matches_won_by_toss_looser\" : 363}\ntoss_data = pd.Series(toss_data)","9dc46ae8":"import warnings\nwarnings.filterwarnings(\"ignore\")","d952731f":"toss_data.index","fa944e50":"plt.figure(figsize=(7,7))\nplt.pie(x=toss_data,autopct=\"%.2f%%\",explode=[0.03]*2,labels=toss_data.index);","0b5720fa":"df.iloc[0]","ce09b584":"team_won_batting = 0\nteam_won_fielding = 0\n\nfor i in range(0,len(df)):\n  if df[\"toss_decision\"][i] == \"field\":\n    if df[\"toss_winner\"][i] == df[\"winner\"][i]:\n      team_won_fielding += 1\n    else:\n      team_won_batting += 1\n  else:\n    if df[\"toss_winner\"][i] == df[\"winner\"][i]:\n      team_won_batting += 1\n    else:\n      team_won_fielding += 1","db5bdd6d":"team_won_batting","8c9e486b":"team_won_fielding","32326da2":"## Lets see that how many close-encounters are being produced by IPL and which team has mostly been involved in it.\n\ndf_thrillers = df[((df['win_by_wickets'] > 0) & (df['win_by_wickets'] < 2)) | ((df['win_by_runs'] > 0) & (df['win_by_runs'] < 6))]","f576ce9f":"df_team1 = pd.DataFrame(df_thrillers['team1'].value_counts())","43b01372":"df_team2 = pd.DataFrame(df_thrillers[\"team2\"].value_counts())","0ff3262b":"df_thrill = pd.concat([df_team1,df_team2],axis=1)","82d49011":"df_thrill ","bd090fd1":"df_thrill = df_thrill[:5]","2e94c36d":"df_thrill[\"team2\"] = df_thrill[\"team2\"].astype(int)","280ae8b9":"df_thrill","01f24739":"df_thrill[\"total_thrillers\"] = df_thrill[\"team1\"] + df_thrill[\"team2\"]","c6bfd874":"teams_with_most_thrillers = df_thrill[\"total_thrillers\"]","e600ca68":"teams_with_most_thrillers","9c057004":"## <span style = \"color:red;\">Topics covered in Analysis:<\/span>\n\n\n### 1.   Most successful teams over the years.\n### 2.   Most successful team year by year.   \n### 3.   Impact of toss on the result.\n### 4.   Impact of batting and fielding first on result.\n### 5.   Best performers over the years.\n\n\n\n\n\n\n\n\n","9869757a":"## Inference from the overview:\n\n\n### * Our dataset has 18 columns with most columns having dtype as object.\n### * There are some null values present in our dataset but those are only few in numbers.\n\n### * Some columns like umpire are of hardly any use.\n\n\n","3f2c1d31":"# INDIAN PREMIER LEAGUE DATA ANALYSIS:","7b749bc3":"## Please Upvote if you found this Helpful, Thanks..","54b82e3e":"We can say that team chasing has got some edge against team setting the targets.","3eeba5e8":"##Conclusions:\n\n\n*   Mumbai Indians has been the most successful team over the years.\n*   Chennai Super Kings has been the most consistent team.\n*   Gayle and ABD has been the biggest match winners.\n*   Toss is not a big factor in IPL.\n*   Chasing team has got an slight advantage.\n*   The first season for Rajasthan has been the most successful year for any team.\n\n\n\n\n\n","8a62dfee":"## Let's see  whether a team setting a target or chasing has got an edge.. ","9ec8bf30":"We can conclude that toss is not that big of a factor.","fde2865b":"## Let us look which year has been a golden year for which team. ","011792e4":"##Overview of the dataset:","fd1053f1":"## <span style = \"color:red;\">HIGHLIGHTS OF THE DATA:<\/span>\n\n\n### * The data avalibale is from the year 2008 to 2019.\n### * The data has information about the team performances and individual performance is not availbale.\n\n"}}