{"cell_type":{"58f9da50":"code","f6950723":"code","159e9436":"code","f901bc09":"code","04c0d569":"code","0ac77b08":"code","7de929e1":"code","68bf98bb":"code","b2ee6996":"code","b56e5180":"code","92eac7b2":"code","779d7802":"code","498d7e18":"code","6792f04e":"code","f6bb0bcd":"code","944add4e":"code","2999e0f9":"code","204a20ca":"code","74c7ca4a":"code","8296a3c1":"code","1e90163e":"code","01787113":"code","7ce66049":"code","200ce18c":"code","87f9ef99":"code","f2a681ff":"code","16946ad4":"code","69699c14":"code","dee8cc6a":"code","01a65634":"code","94494866":"code","d949fe17":"code","4867ed77":"code","5c6e0292":"code","f905ae5a":"code","ce7aa344":"code","d23270e2":"code","2a12cf94":"code","e5e173c8":"code","875fbb72":"markdown","6975a702":"markdown","af3b4c30":"markdown","a0dfeefd":"markdown","7adc1dcf":"markdown","ca39c137":"markdown","03d89675":"markdown","d157d438":"markdown"},"source":{"58f9da50":"#General Imports go here: \n#Import Libraries\nfrom scipy.stats import norm\nimport pandas as pd\nimport os\nimport warnings\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport numpy as np\nimport matplotlib.mlab as mlab\nimport seaborn as sns\nfrom datetime import timedelta\nfrom matplotlib import style\nimport plotly.graph_objects as go\nfrom scipy.signal import savgol_filter as smooth\nfrom scipy.signal import argrelextrema as extrema\n%matplotlib inline\n#Ignore all warnings:\nwarnings.filterwarnings('ignore')\nplt.style.use('fivethirtyeight')","f6950723":"#Setup a cloud machine GCP to run :\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport requests\nimport time\nfrom datetime import datetime\nimport pytz\nfrom google.cloud import bigquery\nfrom google.cloud import storage\nimport pyarrow\n\ndef cloud_machine(event, context):\n    # Get the api key from cloud storage\n    storage_client = storage.Client()\n    bucket = storage_client.get_bucket('')\n    blob = bucket.blob('')\n    api_key = blob.download_as_string()\n    \n    # Check if the market was open today\n    today = datetime.today().astimezone(pytz.timezone(\"Germany\/Frankfurt\"))\n    today_fmt = today.strftime('%Y-%m-%d')\n\n    market_url = ''\n\n    params = {\n        'apikey': api_key,\n        'date': today_fmt\n        }\n    \n    request = requests.get(\n        url=market_url,\n        params=params\n        ).json()\n    \ndef run_query():\n#SQL QUERY:\n    client = bigquery.Client()\n\n# Load the historical stock data from DB\n    sql_hist = \"\"\"\n                SELECT\n                  symbol,\n                  closePrice,\n                  date\n                FROM \n                  `Stocks_Data`\n                \"\"\"\n\n    df = client.query(sql_hist).to_dataframe()","159e9436":"\n#Ignore all warnings:\nwarnings.filterwarnings('ignore')\n#list all files in the folder:\nprint(os.listdir(\"..\/input\"))","f901bc09":"#Functions :\ndef get_data (file):\n    df = pd.read_csv(str(file))\n    #df = df.reindex(index=df.index[::-1])\n    df = df.rename(columns = {'Date': 'date'})\n    #df.date = pd.to_datetime(df.date)\n    #df.index = df['date']\n    df = df.fillna(method = 'ffill')\n    #df.index = df.index.rename('index')\n    return df\n\ndef buysignal(df):\n            if df>0:\n                return 1\n            if df<0:\n                return 0\n            \ndef sellsignal(df):\n            if df>0:\n                return 0\n            if df<0:\n                return -1\n            \ndef basic_features(df, short, long):\n    # Bundle of baseline features that were initially applied. Short and Long are windows given in days\n    \n       # Short and long moving averages\n    df['MA_s'] = df['Close'].rolling(window = short, min_periods = 1, center = False).mean()\n    df['MA_l'] = df['Close'].rolling(window = long, min_periods = 1, center = False).mean()\n    df['PctChange'] = df['Close'].pct_change()\n    return df\n\n# The following functions are for plotting ideal targets for buy and sell signals\ndef mac_target(df, short, long):\n    short = short\n    long = long\n    signal_df = pd.DataFrame(index = df.index)\n    signal_df['signal'] = 0.0\n    signal_df['short_mav'] = df['Close'].rolling(window = short, min_periods = 1, center = False).mean()\n    signal_df['long_mav'] = df['Close'].rolling(window = long, min_periods = 1, center = False).mean()\n    signal_df['signal'][short:] = np.where(signal_df['short_mav'][short:] > signal_df['long_mav'][short:], 1.0, 0.0)\n    signal_df['positions'] = signal_df['signal'].diff()\n    df['MAC_TARGET'] = signal_df['positions']\n    \n    return (df, signal_df)","04c0d569":"#User Input  \nshort_window = 30\nlong_window = 120\n#data = pd.read_csv('..\/input\/AMZN.csv')\ndata=get_data('..\/input\/AMZN.csv')\nbasic_features(data,short_window,long_window)\n#Here to select the stock :\n#data=data[data.Stock_Name=='AMZN'] # Select Other Stock Names \n# Convert Date to datetime\ndata= basic_features(data,short_window,long_window)\ndata = data.fillna(0)\n","0ac77b08":"#data.info()\n#data.tail()","7de929e1":"df, signal_df = mac_target(data,short_window,long_window)\n#df, smoothsig = smooth_target(df, 12)\n#df.Smooth.head()\nsignal_df.head()\n#smoothsig.head()","68bf98bb":"fig = plt.figure(figsize = (90,30))\nplt1 = fig.add_subplot(111, ylabel = 'Close Price')\nplt1.plot(df.index, df.Close, color = 'blue', label = \"Close\", linewidth = 4.0)\nplt1.plot(signal_df.index, signal_df.short_mav, color = 'green',\n          linewidth = 4.0, linestyle = \"--\", label = \"Short MAV\")\nplt1.plot(signal_df.index, signal_df.long_mav, color = 'magenta',\n          linewidth = 4.0, linestyle = \":\", label = \"Long MAV\")\n\n\nplt1.plot(signal_df.short_mav[signal_df.positions == -1.0].index, signal_df.short_mav[signal_df.positions == -1], \n          'v', markersize = 30, color = 'red',label='Sell')\nplt1.plot(signal_df.short_mav[signal_df.positions == 1.0].index, signal_df.short_mav[signal_df.positions == 1], \n          '^', markersize = 30, color = 'green',label='Buy')\n\nplt.title('Ideal Trading Signals', size = 60)\nplt.xlabel('Date', size = 40)\nplt.ylabel('Close Price', size = 40)\nplt.legend(fontsize = 40)\nplt.grid(alpha = 0.4, color = 'black')\nplt.savefig('smoothie.jpg', bbox_inches = 'tight')\nplt.show()","b2ee6996":"prices = df['Adj Close']\npositions =signal_df.positions\nactions = ['Buy', 'Hold', 'Sell']\nhist=10\nn = len(prices)\nn_train = int(n * 0.25)\ntrain_prices = prices[:n_train]\ntest_prices = prices[n_train:]\nbudget = 1000\nnum_stocks = 0\nshare_value = 0\ntransitions = list()\nhistory = []\nportfolio_history = []","b56e5180":"window=20\ndata['Buy']=np.zeros(len(data))\ndata['Sell']=np.zeros(len(data))\ndata['RMax'] = signal_df['long_mav']\ndata['RMin'] = signal_df['short_mav']\ndata.loc[data['RMax'] < data['Adj Close'], 'Buy'] = 1\ndata.loc[data['RMin'] > data['Adj Close'], 'Sell'] = -1\n\nfig,ax1 = plt.subplots(1,1)\nax1.plot(data['Adj Close'])\ny = ax1.get_ylim()\nax1.set_ylim(y[0] - (y[1]-y[0])*0.4, y[1])\nax2 = ax1.twinx()\nax2.set_position(matplotlib.transforms.Bbox([[0.000001,0.00001],[5.05,0.99]]))\nax2.plot(data['Buy'], color='green',label='Buy')\nax2.plot(data['Sell'], color='red',label='Sell')","92eac7b2":"# Test 1 : This is with one Window Buy Signal:\n\n#Trading Strategy (df_trade) Moving Average:\ndf_trade=data.copy()\n\nfig = go.Figure(data=[\n    go.Scatter(x = df_trade.index, y=df_trade['Adj Close'], name='Adj Close', fillcolor='blue'),\n    go.Scatter(x = df_trade.index, y=df_trade['RMin'], name='short_ma', fillcolor='red'),\n    go.Scatter(x = df_trade.index, y=df_trade['RMax'], name='long_ma', fillcolor='green'),\n])\nfig.update_layout(title=\"Moving Average SHORT and Moving Average LONG with Adj Close\",\n                 xaxis_title='Date', yaxis_title='Value')\nfig.show()\n\n\n","779d7802":"#Test with 2 Windows \n# Trading Strategy with Short_window \/Long_window \ndf=data.copy()\nshort = short_window #See user input\nlong = long_window   #See user input\nsignal_df = pd.DataFrame(index = data.index)\nsignal_df['signal'] = 0.0\nsignal_df['short_mav'] = df['MA_s']\nsignal_df['long_mav'] =  df['MA_l']\nsignal_df['signal'][short:] = np.where(signal_df['short_mav'][short:] > signal_df['long_mav'][short:], 1.0, 0.0)\nsignal_df['positions'] = signal_df['signal'].diff()\n\n#Plot the Signals Buy\/Sell:\nfig = plt.figure(figsize = (60,15))\nplt1 = fig.add_subplot(111, ylabel = 'Adj Close Price')\nplt1.plot(signal_df.index, signal_df.short_mav, color = 'green',\n          linewidth = 1.0, linestyle = \"--\", label = \"Short MAV\")\nplt1.plot(signal_df.index, signal_df.long_mav, color = 'blue',\n          linewidth = 1.0, linestyle = \":\", label = \"Long MAV\")\nplt1.plot(df.index, df.Close, color = 'red', label = \"Adj Close\", linewidth = 1.0)\nplt1.plot(signal_df.short_mav[signal_df.positions == -1.0].index, signal_df.short_mav[signal_df.positions == -1], \n          'v', markersize = 15, color = 'red',label='Sell')\nplt1.plot(signal_df.short_mav[signal_df.positions == 1.0].index, signal_df.short_mav[signal_df.positions == 1], \n          '^', markersize = 15, color = 'green',label='Buy')\nplt.title('AMZN Trading Signals', size = 30)\nplt.xlabel('Date', size = 20)\nplt.ylabel('Adj Close Price', size = 20)\nplt.legend(fontsize = 20)\nplt.grid(alpha = 0.25, color = 'gray')\nplt.show()\n\n","498d7e18":"#Portfolio Simulation with Rmax\/Rmin Use Portfolio Simulation 2 Instead: OUTDATED\ndf_trade=data.copy()\ndf_trade.reset_index(inplace=True)\ntrade  = [0]\nStocks = [0]\nfor i in df_trade.index[1:]:\n    \n    if (df_trade['RMin'].iloc[i-1]<=df_trade['RMax'].iloc[i-1]) and (df_trade['RMin'].iloc[i]>df_trade['RMax'].iloc[i]):\n        trade.append(-1)\n        Stocks.append(Stocks[-1]+1)\n        \n        \n    elif (df_trade['RMin'].iloc[i-1]>=df_trade['RMax'].iloc[i-1]) and (df_trade['RMin'].iloc[i]<df_trade['RMax'].iloc[i]):\n        \n        if Stocks[-1]>0:\n            trade.append(Stocks[-1])\n            Stocks.append(0)\n\n        else:\n            trade.append(0)\n            Stocks.append(0)\n\n    else:\n        trade.append(0)\n        Stocks.append(Stocks[-1])\n        #print('Your Stocks are {:.2f}' .format(float(Stocks[i])))\n        #print('Your Trade  are {:.2f}' .format(float(trade[i])))\n    \ntrade = np.array(trade)\nStocks = np.array(Stocks)\ndf_trade['Direction'] = trade[0:]\ndf_trade['My Stocks'] = Stocks[0:]\ndf_trade.dropna(inplace=True) \ndf_trade['Transaction'] = df_trade['Direction'] * df_trade['Adj Close'] ## BUY\/SELL stocks\ndf_trade['Profits'] = df_trade['Transaction'].cumsum() ## Profit Log\nfig = go.Figure(data=[\ngo.Scatter(x = df_trade.index, y=df_trade['Adj Close'], name=\"Adj Close\"),\ngo.Scatter(x = df_trade.index, y=df_trade['RMin'], name=\"short MA\"),\ngo.Scatter(x = df_trade.index, y=df_trade['RMax'], name = \"long MA\"),\ngo.Scatter(x = df_trade.index, y=df_trade['Transaction'], name = \"Transactions\"),\ngo.Scatter(x = df_trade.index, y=df_trade['Profits'], name=\"Total Profit\")\n])\nfig.update_layout(title = \"Trading History:\",\n                 xaxis_title=\"Date_Time\", yaxis_title=\"Value\")\nfig.show()","6792f04e":"df_trade.loc[df_trade['Direction']==1] #BUY \ndf_trade.loc[df_trade['Direction']==1] #SELL\ndf_trade.loc[df_trade['Direction']==0] #HOLD","f6bb0bcd":"#Simple Return is same As percentage change:\ndata['Simple Return']=(data[\"Adj Close\"]\/data['Adj Close'].shift(1))-1\n#Check Log returns instead\nlog_returns =np.log(1+data['Adj Close'].pct_change())\ndata['Logs']=log_returns\n#Daily Return Plots for understanding the Stock\nf, ax = plt.subplots(2,2,figsize = (11,8))\nk1 = sns.lineplot(y = data[\"Logs\"], x = data.index.get_level_values(0), ax = ax[0,0])\nk2 = sns.lineplot(y = data[\"Adj Close\"], x = data.index.get_level_values(0), ax = ax[1,1])\nk2 = sns.lineplot(y = data[\"Close\"], x = data.index.get_level_values(0), ax = ax[0,1])\nk2 = sns.lineplot(y = data[\"Simple Return\"], x = data.index.get_level_values(0), ax = ax[1,0])\n#Visualise MAs\n#Calculate moving average not for the assignment only for our understanding\nma_days = [20, 50, 200]\nfor ma in ma_days:\n    new_columns = '%s day MA' %(str(ma))\n    data[new_columns] = data['Adj Close'].rolling(ma).mean()\ndata[['Adj Close','20 day MA', '50 day MA', '200 day MA']].plot(subplots=False,\n       figsize=(12,8), title=\"AMZN price\/moving averages\")\n\n#Create a dataset with all the moving average values \nm = [20,50,200] # define here the windows\nma_20 = data['Adj Close'].rolling(20).mean()\nma_50 = data['Adj Close'].rolling(50).mean()\nma_200 = data['Adj Close'].rolling(200).mean()\nma_concat = pd.concat([ma_20,ma_50,ma_200], axis=1)","944add4e":"data['Buy']=np.zeros(len(data))\ndata['Sell']=np.zeros(len(data))","2999e0f9":"data['Rolling_Long']=data['Open'].rolling(long_window).max()\ndata['Rolling_short']=data['Open'].rolling(short_window).min()","204a20ca":"data=data.dropna()\ndata['buy_signal']=data['Adj Close']-data['Rolling_Long']\ndata['sell_signal']=data['Adj Close']-data['Rolling_short']","74c7ca4a":"data.loc[:,'buy_signal']=data.loc[:,'buy_signal'].apply(lambda x: buysignal(x))\ndata.loc[:,'sell_signal']=data.loc[:,'sell_signal'].apply(lambda x: sellsignal(x))\ndata['signal']=data['buy_signal']+data['sell_signal']","8296a3c1":"    # setup counting system\nholding=0        ## how many Stocks we are holding\nholdingcost=0    ## prime cost for getting the stock we are holding\noutflow=0       ## tracking on cash outflow (cumulative)\ninflow=100         ## tracking on cash inflow (cumulative)\norder={}         ## Keep track of buys\/sells per date\nnumber_stocks =1 ## Select number of stocks set to 1 to see the return of investment of one stock in the duration date","1e90163e":" for date,row in data.iterrows():\n\n            # if signal is openpos(signal=1), and there's no holding (holding=0) then\n            if row['signal']==1 and holding==0:\n                \n                #Strategy: We add one Stock to our portfolio (holdings)\n                #Outflow tracks the cashflow\n                #BuyIn Cost\n                #Buy time\n\n                holding=holding+number_stocks\n                outflow-=row['Adj Close']\n                holdingcost+=row['Adj Close']*holding\n                order[date]=-row['Adj Close']\n                #print('Buy Stock:{buy_create}$ @ {dt}'.format(buy_create=order[date],dt=date))\n                \n            elif row['signal']< 0 and holding>0:\n                # Cashflow before selling\n                # record the Sell of Stock\n                # Reset the holdings since we sell all\n                # We hold no more stocks\n                \n                inflow+= row['Adj Close']*holding            \n                order[date]=+row['Adj Close']*holding\n                holding=0\n                holdingcost=0\n                #print('Sell Stock:{sell_create}$ @ {dt}'.format(sell_create=round(order[date],2),dt=date)) ## round\n\n            data.loc[date,'holding']=holding\n            data.loc[date,'portvalue']=data.loc[date,'holding']*row['Adj Close']\n            data.loc[date,'holdingcost']=holdingcost\n            data.loc[date,'profit']=inflow+outflow+data.loc[date,'portvalue']\n            #---------------Print Out Result---------------#\n#Return on Investment:\ndata['roi']=(data['portvalue']-data['holdingcost'])\/data['holdingcost']\ndata['roi']=data['roi'].fillna(0)\nprint('------------------------Summary------------------------')\nprint('Profit(Incl Amzn Holding):{profit:} $'.format(profit=round((outflow+inflow+data.loc[data.index[-1],'portvalue'])))) ## round \nprint('Maximum Holding Cost(EURs):{profit:} Euros'.format(profit=(round(data['holdingcost'].max())))) ## round\nprint('Duration:{timeframe:}'.format(timeframe=(data.index[-1]-data.index[0]))) \nprint('Max Drawdown:{drawdown:} %'.format(drawdown=round(100*data['roi'].min())))","01787113":"Buy_in_date=[]\nSell_out_date=[]\n\nfor key,value in order.items():\n    if value >0:\n        Sell_out_date.append(key)\n    if value<0:\n        Buy_in_date.append(key)\n\nSell_Price=data.loc[Sell_out_date,'Adj Close']\nBuy_Price=data.loc[Buy_in_date,'Adj Close']\n","7ce66049":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=data.index,y=data['Adj Close'],name='Adj Close',line_color='Blue'))\nfig.add_trace(go.Scatter(x=data.index,y=data['profit'],name='Profit',line_color='Orange'))\n\nfig.add_trace(go.Scatter(x=Buy_in_date,y=np.abs(Buy_Price),\n                                name='Buy',mode='markers',\n                                marker=dict(size=15,symbol=5),\n                                marker_color='green',\n                                text='BUY'))\n\nfig.add_trace(go.Scatter(x=Sell_out_date,y=np.abs(Sell_Price),\n                                name='Sell',mode='markers',\n                                marker=dict(size=15,symbol=6),\n                                marker_color='red',\n                                text='SELL'))\n\nfig.update_layout(title_text='Signal BUY\/SELL',\n                        xaxis_rangeslider_visible=True,\n                        template='gridon')\n\n # show the plot\nfig.show()","200ce18c":"#How to identify BUY\/SELL Signals:\ndata.loc[data['Rolling_Long'] < data['Adj Close'],'Buy']=1\ndata.loc[data['Rolling_short']> data['Adj Close'],'Sell']=-1","87f9ef99":"data['Daily Return']=data['Adj Close'].pct_change(1)\ndata['Daily Return'].hist(bins=100,figsize = (12,8))\n","f2a681ff":"class Actions(Enum):\n    Sell = 0\n    Buy = 1\n\n# Moving Average\ndef MA(df, n):\n    MA = pd.Series(df['Close'].rolling(min_periods=1, center=True, window=n).mean(), name = 'MA_' + str(n))\n    df = df.join(MA)\n    return df\n\ndata['PCT_difference']=data['MA_s']-data['MA_l']\/data['MA_l']\ndata['shorts'] = data['PCT_difference'] < 0\ndata['longs'] = data['PCT_difference']>0\nsecurities_to_trade = (data['shorts']|data['longs'])\n\nprint(securities_to_trade)\nprint(data['PCT_difference'])","16946ad4":"def make_pipeline():\n    \n    ","69699c14":"#Determine the mean and standard deviation for this returns series. These will be the inputs to the random number generator(s)\nfrom tabulate import tabulate\ndata['returns'] = data['Adj Close'].pct_change()\nmean = np.mean(data['returns'])\nstd_d = np.std(data['returns']) #standard devi","dee8cc6a":"data['returns'].hist(bins=100, normed = True, histtype='stepfilled', alpha=0.5)\nx1 = np.linspace(mean-2*std_d, mean+2*std_d, 100)\nplt.plot(x, mlab.normpdf(x1, mean, std_d),'red') # psaxto!!!!!\nplt.show()","01a65634":"VAR_95 = norm.ppf(1-0.95, mean, std_d)\nVAR_99 = norm.ppf(1-0.99, mean, std_d)\n#install tabulate\nprint (tabulate([['95%',VAR_95],['99%', VAR_99]], headers = ['confidence level','VAR']))\n#print(VAR_95)\n#print(VAR_99)","94494866":"#Monte Carlo Simulation:\n# Buy Signal Price new_price = (1+random_value) * signal_price\n# Sell Signal Price; \nfrom scipy.stats import norm\nlog_returns =np.log(1+data['Adj Close'].pct_change())\nmean = log_returns.mean() #mean of the log_return\nvar =log_returns.var() #Variance\ntrend =mean -(0.5*var) #Log trend\nstd_d=log_returns.std()\nS_steps = 100000\nR =100\nV =101 #101 days \n\ndaily_ret = np.exp(trend +std_d*norm.ppf(np.random.rand(V,R)))","d949fe17":"#Array of zeros\nList_price = np.zeros_like(daily_ret)\nList_price[0] =Price_1","4867ed77":"#Forecasts for 101 days\nfor t in range(1,S_steps):\n    List_price[t]=List_price[t-1]*daily_ret[t]","5c6e0292":"List_price =pd.DataFrame(List_price)\nList_price['Adj Close']=List_price[0]\nList_price.head()","f905ae5a":"Price_1= data['Adj Close'].iloc[-1]\nPrice_1","ce7aa344":"Amz_Adj_Close =data['Adj Close']\nAmz_Adj_Close =pd.DataFrame(Amz_Adj_Close)\nCombo = [Amz_Adj_Close,List_price]\nMC_FC = pd.concat(Combo)\nMC_FC.head()","d23270e2":"MC_FC.tail()","2a12cf94":"MC=MC_FC.iloc[:,:].values\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(20,9))\nplt.plot(MC)\nplt.show()","e5e173c8":"data['log_returns']=log_returns\ndata['Date']=pd.to_datetime(data['Date'])\ndata.head()\ndata=data.dropna()","875fbb72":"**VAR Signals:**","6975a702":"#Functions not to be used: \n\ndef get_rsi(df, length):\n       # Get the difference in price from previous step\n    delta = df['Close'].diff()\n       # Get rid of the first row, which is NaN since it did not have a previous\n       # row to calculate the differences\n    delta = delta[1:]\n       # Make the positive gains (up) and negative gains (down) Series\n    up, down = delta.copy(), delta.copy()\n    up[up < 0.0] = 0.0\n    down[down > 0.0] = 0.0\n       # Calculate the EWMA\n    roll_up1 = up.ewm(com=(length-1), min_periods=length).mean()\n    roll_down1 = down.abs().ewm(com=(length-1), min_periods=length).mean()\n       # Calculate the RSI based on EWMA\n    RS1 = roll_up1 \/ roll_down1\n    RSI1 = 100.0 - (100.0 \/ (1.0 + RS1))\n    \n    return RSI1\n    \n    def basic_features(df, short, long):\n    # Bundle of baseline features that were initially applied. Short and Long are windows given in days\n    def slope(y):\n        x = np.array(range(len(y)))\n        m, b = np.polyfit(x, y, 1)\n        return m\n        \n    def acc(y):\n        x = np.array(range(len(y)))\n        A, v, x0 = np.polyfit(x, y, 2)\n        g = 0.5*A\n        return g\n     # Counting consecutive candles \ndef candle_counts(df):\n    df['color'] = (df.Close >= df.Open).astype(np.uint8)\n    df['region'] = (df.color != df.color.shift()).cumsum()\n\n    gp = df.groupby(['region', 'color']).size()\n    gp = pd.DataFrame(gp)\n\n    gp.columns = ['region_len']\n    df = df.reset_index().merge(gp, on=['region', 'color'], how='left').set_index('index')\n    df['sgn_region_len'] = df['region_len']\n    df.loc[df.color == 0, 'sgn_region_len'] *= -1\n    return df\n    \n    # A few general rsi indicators to help indicate up\/down trends\ndef bindicators(df):\n    df['RSI>70'] = np.where(df['RSI']>70., 1., 0.)\n    df['RSI<30'] = np.where(df['RSI']<30., 1., 0.)\n    df['RSI<20'] = np.where(df['RSI']<20., 1., 0.)\n    \n    df['MA_s>MA_l'] = np.where(df['MA_s']>df['MA_l'], 1., 0.)\n    \n    return df","af3b4c30":"User Input : Define Short\/Long Window \nA.Generate Trading Signals (Buy\/Sell) using a moving average for a time window","a0dfeefd":"#Portfolio Simulation:\n    \nfor i in range(len(prices) - hist - 1):\n    if i % 1000 == 0:\n        print('progress {:.2f}%'.format(float(100*i) \/ (len(prices) - hist - 1)))\n        current_state = np.asmatrix(np.hstack((prices[i:i+hist], budget, num_stocks)))\n        current_portfolio = budget + num_stocks * share_value\n        share_value = float(prices[i + hist])\n        # Update portfolio values based on action\n        if  positions[i] == 1 and budget >= share_value:\n            budget -= share_value\n            num_stocks += 1\n            history.append((prices[i], 'BUY'))\n            portfolio_history.append((current_portfolio, 'BUY'))\n            print('BUY -- Current Portfolio--- {:.2f} Euros' .format(float(current_portfolio)))\n            print('STOCKS  -- Current Stocks--- {:.2f}' .format(float(num_stocks)))\n        elif positions[i] == 0 and num_stocks > 0:\n            budget += share_value\n            num_stocks -= 1\n            history.append((prices[i],'SELL'))\n            portfolio_history.append((current_portfolio,'SELL'))\n            print('SELL -- Current Portfolio {:.2f} %' .format(current_portfolio))\n            print('STOCKS  -- Current Stocks--- {:.2f}' .format(float(num_stocks)))\n        else:\n            action = 'Hold'\n            history.append((prices[i], 'HOLD'))\n            portfolio_history.append((current_portfolio, 'HOLD'))\n            print('HOLD -- Current Portfolio %' .format(current_portfolio))\n            print('STOCKS  -- Current Stocks--- {:.2f}' .format(float(num_stocks)))\n        # Compute new portfolio value after taking action\n        new_portfolio = budget + num_stocks * share_value\n    # Compute final portfolio worth\nportfolio = budget + num_stocks * share_value\nprint(portfolio)","7adc1dcf":"df['target_region'] = (df.SMOOTH_TARGET != df.SMOOTH_TARGET.shift()).cumsum()\nmid_region_days = df.groupby('target_region').apply(lambda x: x.index.tolist()).apply(lambda x: x[int(len(x)\/\/2)]).tolist()\nmid_region_days[:5]","ca39c137":"What is VaR?\nWhat is the maximum loss I can expect my portfolio to have with a time horizon X and a certainty of Y%?\n\n","03d89675":"print(len(prices),len(positions))\nrange(len(prices) - hist - 1)\nans=1 % 1000\nprint('progress {:.2f}%'.format(float(100*ans) \/ (len(prices) - hist - 1)))\nshare_value = float(prices[2+ hist])\nprint (share_value)","d157d438":"Plot : ****"}}