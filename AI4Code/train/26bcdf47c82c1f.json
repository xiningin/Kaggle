{"cell_type":{"cb29411f":"code","d9654dfc":"code","a4f605ef":"code","781c1923":"code","5fd83af8":"code","160cedf7":"code","64dfd54e":"code","44deec45":"code","918d7038":"code","204932eb":"code","5500f242":"code","290c367c":"code","c17e8fd5":"code","f47d7391":"code","de9845df":"code","abe44e7e":"code","19d9603e":"code","226adde3":"code","3c6b9371":"code","c36ad308":"code","ec7a2fcc":"code","e749af52":"code","b54632c2":"code","8db70872":"code","a369648b":"code","cb2025bf":"code","a3403eed":"code","50be1f7d":"code","5ce9e963":"code","78cedd1b":"code","aaf7af41":"code","e656b2c3":"code","38d2ff0f":"code","abe8f835":"code","595fe0b4":"code","90680687":"code","9ffb2aec":"code","fcba21c2":"code","e838f50b":"code","a384b0ea":"code","52775198":"code","8101c5fb":"code","fc675722":"code","891a851b":"code","a832ae78":"code","0b9f6b79":"code","d1a5e8c3":"code","482ba1f2":"code","c17f6e03":"code","d8b352ef":"code","bed54529":"code","f84b75c4":"code","9f82c169":"code","183eb903":"code","74611399":"code","57aa1fc6":"code","2c4a2848":"code","ff61d532":"code","5e820f47":"code","53c1d86c":"code","98ac248c":"code","2d0b7940":"code","57749429":"code","04564022":"code","8171a4c6":"code","5b938c4e":"code","deca0efe":"code","a8bc4a32":"code","96a33e38":"code","be3e4c4d":"code","6836cc02":"code","ed189651":"code","e7a64c30":"code","9469d3f5":"code","8ea9346d":"code","08b44a1d":"code","f7d3fc3e":"code","bc362751":"code","e997e1cc":"code","5d388381":"code","84aa796b":"code","84c656a7":"code","e41bdc58":"code","f8cd3b93":"code","2fb960c5":"code","43dbb961":"code","7a423aa1":"code","98a20660":"code","27e105a3":"code","26a308b4":"code","505f8db8":"code","d3a8114a":"code","7111f866":"code","3b7e558d":"code","93786645":"code","c1b3190c":"code","5a6b3e20":"code","d83404e6":"code","43fe353c":"code","3c18d50d":"code","33c8f6ab":"code","24fe62fa":"code","ab9f58e4":"code","c8e62921":"code","74be3d88":"code","19c95406":"code","5007aeb0":"code","1427dd88":"code","34779d0a":"code","798ee59e":"code","bc91b185":"code","7b8d0eae":"code","744a6624":"code","d31c49de":"code","ca3db5df":"code","81723115":"code","83b1877d":"code","18a39f6d":"code","1f5c7ea3":"code","b842d316":"code","a2bbb6d1":"code","e217897b":"code","1caf68f4":"code","bd685aee":"code","a50a02ed":"code","1ffc2143":"code","ded5e360":"code","15638d7d":"code","30afd5f0":"code","d6c8c5b4":"code","81d7ec72":"code","77e4f6e8":"code","7f3b10ea":"code","ca5259ba":"code","15ae1f41":"code","1638a1e1":"code","fc4d59ef":"code","fc05fafe":"code","d18d795e":"code","24946433":"code","7f64a327":"code","8731b2e0":"code","75c422ec":"code","12442593":"code","086245db":"code","a444db17":"code","8f04c43a":"code","b124eabd":"code","20dc4274":"code","060e9b46":"code","658a4d81":"code","0d726a6d":"code","27c79fdc":"code","7c95162d":"code","4521a3f9":"code","e4c18561":"code","821efec2":"code","eac46435":"code","6c8994aa":"code","b3d5430a":"code","2ac0e596":"code","78b7d498":"code","8ed6f4fa":"code","8392aa01":"code","f87de109":"code","4fd66f65":"code","7b532771":"code","9e36b3c6":"code","2f4577ed":"code","b711e0ae":"code","9c7c9652":"code","a1a04e7c":"code","317f1a7a":"code","4d8dd959":"code","69b68725":"code","f42a192d":"code","05cdd96d":"code","07afc60b":"code","80de5eac":"code","72242ed4":"code","2ad48ab1":"code","31a5a2e1":"code","a928b061":"code","c0d34552":"code","7a3d2b0a":"code","00b696b4":"code","594ddd3d":"code","4b49a1e8":"code","83d2e1b6":"code","c7337bb0":"code","b1cf614a":"code","1e15d294":"code","5ab06529":"code","1c1d8b4c":"code","1025fe40":"code","30468840":"code","8deb5a88":"code","003f2e6e":"code","95511394":"code","86156fb8":"code","bc6b7fac":"code","bd13d0d7":"code","b450b4ac":"code","6ef02277":"code","afb678e7":"code","3640812e":"code","704186ec":"code","6bbd0fc5":"code","f1c507ca":"code","c7c73fa5":"code","ae980671":"code","cc5a7664":"code","3bad9804":"code","3851e400":"code","fbeb6ec7":"code","c45ee939":"code","5d38b983":"code","98b3d117":"code","22524b79":"code","95181e9d":"code","56931d19":"code","95bf2932":"code","39672949":"code","6c3916f4":"code","1c754649":"code","383d7d25":"code","11eb76d9":"code","c6916c83":"code","fe4b63c4":"code","01845abe":"code","1549b917":"code","c66b486c":"code","ebcf2c84":"code","6276caf0":"code","ce3fdd1a":"code","5c5cd330":"code","dbd402d0":"code","981dfae9":"code","9cb71139":"code","86dae880":"code","efb94e96":"code","f5f997b5":"code","c09ea014":"code","4f928b52":"code","b9a1b168":"code","23a8e06a":"code","abd6a955":"code","8987f6aa":"code","4607c443":"code","a247defc":"code","c8cc242d":"code","15e9d5b0":"code","98b05772":"code","90c2a52c":"code","957cb0e4":"code","d0a78a4a":"code","58290dac":"code","f23c1f82":"code","4d871027":"code","c6ad95f9":"code","e3d10add":"code","617c55fd":"code","d55dd22a":"code","fd5f244c":"code","70d480e7":"code","86cb836c":"code","a68f93c6":"code","49f6f265":"code","bcdcd859":"code","49d8b920":"code","5895b912":"code","3e301987":"code","57baed1b":"code","fdbb1cf0":"code","6b91597d":"code","80468afa":"code","b99572db":"code","4d6f8226":"code","cec2601e":"code","f7068fe9":"code","1afff5f6":"code","1015721a":"code","bffb8509":"code","e3d3ebd3":"code","1d041165":"code","df0fcebb":"code","1159c03d":"code","25a0a5a4":"code","e1e71914":"code","1da88614":"code","6d9dacb0":"code","a4951914":"code","b920790c":"code","ba586d8c":"code","81533494":"code","2b63f9ca":"code","0006a892":"code","9b64c3ac":"code","c06f7b32":"code","9545c96c":"code","66e74a16":"code","52ce8d06":"code","ce738805":"code","cb1b7763":"code","eaec695e":"code","06d8e2cf":"code","44758d82":"code","4be70094":"code","02ac8532":"code","a386f249":"code","38731b75":"code","7e5de850":"code","dbc6e107":"code","61ea8238":"code","1fbce03e":"code","6aa36afa":"code","221f850d":"code","87f1db0d":"code","eb6815ff":"code","640f785f":"code","c1470b25":"code","505fa544":"code","9fb49a7c":"code","b34641d6":"code","c8363c34":"code","36cc2a83":"code","5fd6ea15":"code","5e2c7f85":"code","a1c1d4d6":"code","4ff08b5b":"code","02af42a8":"code","7e4ad15e":"code","83342ebc":"code","db421d1e":"code","1e8a4f83":"code","1a017a1d":"code","db99d83d":"code","a84cf6c2":"code","aa3b9e5c":"code","46bdf6e3":"code","ca7f3fa7":"code","de03c6c5":"code","b5ecfb49":"code","f3fe7fe8":"code","45bad34e":"code","80f60110":"code","473308f7":"code","3f338fc4":"code","59a30952":"code","3b135caa":"code","ae13c3ab":"code","8b37bd40":"code","dbe257b4":"code","8064dac3":"code","06fb770e":"code","49b7b623":"code","7c4f24a8":"code","d32c8a64":"code","4c6d50e3":"code","81216188":"code","d571f03e":"code","9275ce56":"code","e28f1209":"code","624bd14e":"code","34bb5d9e":"code","725729a6":"code","3a0ee97e":"code","9732d790":"code","ee0bdbcb":"code","eb638ab5":"code","d4038766":"code","40d9c8cd":"code","b2c06ac6":"code","16c4f788":"code","c7d5ff31":"code","2e5abd20":"code","4a30355b":"code","2623e869":"code","d880ec9c":"code","0f365b28":"code","23225e71":"code","ad991201":"code","697f50ed":"code","2118c351":"code","95c45a40":"code","8d322fc6":"code","7a9754dd":"code","e04da4cc":"code","3838b04b":"code","8007b1e9":"code","30e429a8":"code","19f10dc6":"code","919d69df":"code","3bfe1e68":"markdown","66983ff5":"markdown","57f51157":"markdown","09585b47":"markdown","0057384a":"markdown","b701ca94":"markdown","e75c3f12":"markdown","3644a00b":"markdown","a2b1592f":"markdown","27e03728":"markdown","3bf9117f":"markdown","9effb2d9":"markdown","f9262c67":"markdown","22ceb923":"markdown","ad3f7584":"markdown","2ffe3332":"markdown","ad51e3c0":"markdown","45fc7d05":"markdown","fe3aab28":"markdown","3f612704":"markdown","c2d59120":"markdown","fbfd03e7":"markdown","f37df8d4":"markdown","4b8219c5":"markdown","c7fc236a":"markdown","e3504325":"markdown","cd163a82":"markdown","00df8879":"markdown","f08d9fac":"markdown","fcff3323":"markdown","c5df0e55":"markdown","1ee61e23":"markdown","6e601535":"markdown","29316aaf":"markdown","66f389c4":"markdown"},"source":{"cb29411f":"# Neden NumPy?","d9654dfc":"a = [1,2,3,4] \nb = [2,3,4,5]","a4f605ef":"ab = []                        \n\nfor i in range(0, len(a)):\n  ab.append(a[i]*b[i])\n\nab","781c1923":"import numpy as np","5fd83af8":"a = np.array([1,2,3,4])\nb = np.array([2,3,4,5])","160cedf7":"a * b","64dfd54e":"import numpy as np","44deec45":"np.array([1,2,3,4,5])","918d7038":"a = np.array([1,2,3,4,5])","204932eb":"type(a)","5500f242":"np.array([3.14, 4, 2, 13], dtype = \"int\")","290c367c":"np.zeros(10, dtype = int)","c17e8fd5":"np.ones((3,5), dtype = int)   #3 satir 5 sutunluk bir array olusturduk","f47d7391":"np.full((3,5), 3) #buda istedigimiz sayidan olusturuyor sadece 3 lerden istedik mesela biz","de9845df":"np.arange(0,31, 3)       #bu 0 ile 30 arasinda (31 dahil degil) 3 er 3 er artan array olusturdu","abe44e7e":"np.linspace(0,1,10)        #buda 0 ile  1 arasinda 10 tane sayi olusturdu","19d9603e":"np.random.normal(10, 4, (3,4)) #ortsini 10 standart sapmasini 4 verdik 3 e 4 luk bir array olusturduk","226adde3":"np.random.randint(0,10, (3,3))   #int degerlerle rastgele olusturulmus 3 e 3 luk bir matris 1 ile 10(10 dahil degil) arasinda","3c6b9371":"import numpy as np ","c36ad308":"np.random.randint(10, size = 10)","ec7a2fcc":"a = np.random.randint(10, size = 10)","e749af52":"a.ndim #dimension tek boyutlu oldugu icin 1 dondu","b54632c2":"a.shape  #tek boyutlu oldugu icin tek boyutun bilgisi verilmis oda 10 eleman oldugu icin 10 dondu","8db70872":"a.size #toplam eleman sayisini doner 10","a369648b":"a.dtype","cb2025bf":"b = np.random.randint(10, size = (3,5))","a3403eed":"b","50be1f7d":"b.ndim #2 boyutlu (boyut sayisi olarak tanimlanir)","5ce9e963":"b.shape # 3 e 5 lik oldugu icin shape 3,5 dondurdu (kisaca boyut bilgisi olarak tanimlanabilir kacak kac oldugunu soyler)","78cedd1b":"b.size #toplam eleman sayisini verir 15","aaf7af41":"b.dtype #veri tipini verir","e656b2c3":"import numpy as np","38d2ff0f":"np.arange(1,10)  # tek boyutlu bir arrayi istersek istedigimiz boyuta getirebiliriz","abe8f835":"np.arange(1,10).reshape((3,3)) #goruldugu uzere 3 e 3 luk bir matrise cevirdik reshape ile","595fe0b4":"a = np.arange(1,10)","90680687":"a #bu bir 1 den 10 a kadar(10 dahil degil) vectordur tek boyutludur","9ffb2aec":"a.ndim","fcba21c2":"b = a.reshape((1,9))    #yukaridaki ifade ile bu ifade birbirine cok benziyor ama dikkat et alttakinde 2 parantez var 1x9 bir 2 boyutlu matrix \nb                       #yukaridaki ise tek boyutlu bir vectordur farki onemli benzese bile vector matrix ayrimini iyi yap DERS 118 DE A\u00c7IKLYO","e838f50b":"b.ndim            #goruldugu uzere 2 boyutludur tek boyut bilgisi tasisa bile","a384b0ea":"import numpy as np","52775198":"x = np.array([1,2,3])\ny = np.array([4,5,6])","8101c5fb":"np.concatenate([x, y])   #numpy arrayleri birlestirme islemi boyle yapilir","fc675722":"z = np.array([7,8,9])","891a851b":"np.concatenate([x, y, z])","a832ae78":"#iki boyut","0b9f6b79":"a = np.array([[1,2,3],[4,5,6]])\na","d1a5e8c3":"np.concatenate([a,a]) #satir bazinda birlestirdi ama peki biz bunlari satir degilde sutun bazinda birlestirmek ister isek axis kullaniriz","482ba1f2":"np.concatenate([a,a], axis = 1) #axis argumani sutun bazinda birlestirir arrayleri default olarak 0 dir bu 1 e atarsak sutun bazinda birlestirir","c17f6e03":"import numpy as np","d8b352ef":"x = np.array([1,2,3,99,99,3,2,1])","bed54529":"np.split(x, [3,5]) ","f84b75c4":"a,b,c = np.split(x, [3,5]) #burda boldugumuz arrayleri kullanak ister isek atama ile kolayca kullanabiliriz boldugumuz array sayisinda atama\n                           #yapiyoruz goruldugu uzere","9f82c169":"a","183eb903":"b","74611399":"c","57aa1fc6":"#iki boyutlu ay\u0131rma","2c4a2848":"m = np.arange(16).reshape(4,4)\nm","ff61d532":"np.vsplit(m, [2]) #m yi 2. indexe kadar bol","5e820f47":"ust, alt = np.vsplit(m, [2]) # 2 kisma boldugumuz icin ust ve alt olarak ayirdik","53c1d86c":"ust","98ac248c":"alt","2d0b7940":"m","57749429":"np.hsplit(m, [2])  #buda yatay bolme sol ve sag seklinde boluyor","04564022":"sag, sol = np.hsplit(m, [2])","8171a4c6":"sag","5b938c4e":"sol","deca0efe":"import numpy as np","a8bc4a32":"v = np.array([2,1,4,3,5])","96a33e38":"v","be3e4c4d":"np.sort(v) #direkt hazir fonksiyon ile kucukten buyuge siralayabiliriz","6836cc02":"v","ed189651":"v.sort()    # sort metodu array uzerinden cagirilirsa tamamen etkiler ve arrayin duzenini etkiler ama ustteki gibi np uzerinden \n            # sort edilir ise arrayin yapisini degistirmez gecici olarak siralar gibi dusunebiliriz","e7a64c30":"v","9469d3f5":"#iki boyutlu array siralama","8ea9346d":"m = np.random.normal(20,5, (3,3))","08b44a1d":"m","f7d3fc3e":"np.sort(m, axis = 1)  # 2 boyutlu matrixi siralarken hangi boyutu siralacagimizi belirtiriz satirlari siraladi kendi icinde\n                      # mesela 1. satiri kendi 3 elemani icinde siraladi","bc362751":"np.sort(m, axis = 0) #burda gorulecegi uzere sutunlari siraliyor 1. 2. 3. sutunlarin hepsi kendi sutunu icinde siralandi","e997e1cc":"np.sort(m) #goruldugu uzere bu sekilde axis=1 olarak siralama yapiyor yani satirlari kendi icinde siraliyor","5d388381":"import numpy as np\na = np.random.randint(10, size = 10)\na","84aa796b":"a[0]","84c656a7":"a[-1] #-1 son eleman demek sondan geriye dogru gider - sayilar ","e41bdc58":"a[0] = 100","f8cd3b93":"a","2fb960c5":"m = np.random.randint(10, size = (3,5))\nm","43dbb961":"m[0,0]","7a423aa1":"m[1,1]","98a20660":"m[1, 4]","27e105a3":"m[1, 4] = 99","26a308b4":"m","505f8db8":"m[1,4] = 2.2  #goruldugu uzere int tipi oturmus bir arraya disaridan eleman eklenmeye calisildiginda arrayin tipi degismedi\n              #eklemeye calistigimiz deger int hale getirdi en basta olurstururken arrayi 1 tane float versek tum array float olur\n              #ama sonradan eklemede bu gecerli degir assagidada gorulecegi uzere","d3a8114a":"m","7111f866":"import numpy as np","3b7e558d":"a = np.arange(20,30)\na","93786645":"a[0:3] #0. indeksten 3. indekse kadar git (3 dahil degil)","c1b3190c":"a[:3]","5a6b3e20":"a[3:]","d83404e6":"a[1::2] #1. indeksten basla 2 2 atlayacak sekilde ilerle demek bu onemli","43fe353c":"a[0::2] ","3c18d50d":"a[2::2]","33c8f6ab":"a[0::3]","24fe62fa":"#iki boyutlu slice islemleri","ab9f58e4":"m = np.random.randint(10, size = (5,5))","c8e62921":"m","74be3d88":"m[:,0]   #tum satirlarin 0.indeksteki( 1. sutun) sutununu sec","19c95406":"m[:,1] #gene tum satirlarin 1.indeksteki( 2. sutun)  sutununu sec","5007aeb0":"m[:,4]","1427dd88":"m","34779d0a":"m[0,:]      #buda 0. satir tum sutunlari aldi","798ee59e":"m[0]","bc91b185":"m[1,:]  #buda 1. satir (2. kisim yani) tum sutunlari","7b8d0eae":"m[0:2, 0:3]  #burada 0 dan 2 ye kadar tum satirlari al (0. ve 1. satir) 0 dan 3 e kadar tum sutunlari al(0 1 2. sutunlari)","744a6624":"m[:,0:2] #tum satirlari al 0 dan 2 ye kadar (0 1. sutun) tum sutunlari al","d31c49de":"m","ca3db5df":"m[1:3, 0:2] #0. satiri atlayip 1. satir ve 2. satiri aldik ve 0. ve 1. sutunu almak istedik guzel bir alistirma","81723115":"import numpy as np\na = np.random.randint(10, size = (5, 5))\na","83b1877d":"alt_a = a[0:3, 0:2]\nalt_a","18a39f6d":"alt_a[0,0] = 99999\nalt_a[1,1] = 888      #burda gostermek istedigimiz alt kumede yapilan islemler arrayin tamamini etkiler yani a arrayinide etkiliyor\n                      #her islem eger dogrudan atama yaparsak belli bir kismini bir degiskene","1f5c7ea3":"alt_a                     #alt a da degiskenlik yasandi ","b842d316":"a                       #goruldugu uzere ana arrayi etkilemis","a2bbb6d1":"m = np.random.randint(10, size = (5, 5))\nm","e217897b":"alt_b = m[0:3, 0:2].copy()           #eger yapacagimiz islemler ana arrayi etkilemesin istiyorsak copy adindaki degiskeni kullaniriz\nalt_b                                                     ","1caf68f4":"alt_b[0,0] = 9999                   #goruldugu uzere copy metoduyla aldigimiz kisimda degisiklik uyguladik","bd685aee":"alt_b","a50a02ed":"m                               #gorulecegi uzere alt arrayi copy ile atadigimiz icin ana arrayi etkilemedi sadece o kismi kopyalayip\n                                #baska degiskene atamis olduk","1ffc2143":"import numpy as np\nv = np.arange(0, 30, 3)\nv","ded5e360":"v[1]","15638d7d":"v[3]","30afd5f0":"v[5]","d6c8c5b4":"[v[1], v[3], v[5]]     # 3 lu vector seklinde tanimladik  ","81d7ec72":"al_getir = [1,3,5]   ","77e4f6e8":"v   ","7f3b10ea":"v[al_getir]            # bu sekilde v[[1,3,5]] seklinde 1. 3. 5. indeksleri array seklinde getiriyor","ca5259ba":"#iki boyutta fancy","15ae1f41":"m = np.arange(9).reshape((3,3))","1638a1e1":"m","fc4d59ef":"satir = np.array([0,1])\nsutun = np.array([1,2])","fc05fafe":"m[satir, sutun]","d18d795e":"#basit index ile fancy index","24946433":"m","7f64a327":"m[0, [1,2]] #0. satirdaki 1. ve 2. sutunu al ","8731b2e0":"#slice ile fancy","75c422ec":"m[0:, [1,2]]  #0 dan tum sona kadar (yani tum satirlari) tum satirlari al 1. ve 2. sutunu al bunlardanda","12442593":"import numpy as np\nv = np.array([1, 2, 3, 4, 5])","086245db":"v < 3  #boyle yazarsak array icine sonucu bool cinsinden yazar","a444db17":"v[v < 3]  #eger 3 den kucuk elemanlara ulasmak ister isek v[kosul] seklinde yazmamiz gerekiyor o elemanlara ulasmak icin","8f04c43a":"v[v > 3]","b124eabd":"v[v >= 3]","20dc4274":"v[v <= 3]","060e9b46":"v[v == 3]","658a4d81":"v[v != 3] #3 olmayanlari kalanlari getir","0d726a6d":"v","27c79fdc":"v * 2","7c95162d":"v \/ 5","4521a3f9":"v*5\/10","e4c18561":"v**2","821efec2":"import numpy as np\nv = np.array([1, 2, 3, 4, 5])","eac46435":"v - 1","6c8994aa":"v * 5","b3d5430a":"v \/ 5","2ac0e596":"v*5\/10 - 1","78b7d498":"#ufunc     #bunun anlami bunu numpy array uzerinde su islemi yapsin","8ed6f4fa":"np.subtract(v, 1) # v den bir cikar demek","8392aa01":"np.add(v, 1)       # v ye bir ekle","f87de109":"np.multiply(v,4)    #v yi 4 ile carp","4fd66f65":"np.divide(v, 3)    #v yi 3 ile bol","7b532771":"v**2","9e36b3c6":"v**3","2f4577ed":"np.power(v, 3)    #3. dereceden kuvvetini al","b711e0ae":"v % 2","9c7c9652":"np.mod(v, 2) #v nin 2 ye bolumunden kalan (mod)","a1a04e7c":"np.absolute(np.array([-3]))  #mutlak deger uygular ornek -3 u 3 e cevirdi","317f1a7a":"np.sin(360)","4d8dd959":"np.cos(180)","69b68725":"v = np.array([1,2,3])","f42a192d":"np.log(v)","05cdd96d":"np.log2(v)","07afc60b":"np.log10(v)","80de5eac":"?np","72242ed4":"#cheatsheet   #kopya kagidi demek google da arama yapcagimiz sirada istenen kutuphanenin sonuna cheat sheet eklersek derli toplu bir\n              #dokumasyona ulasabiliriz ornegin \"numpy mathematics cheat sheet\" seklinde\n    #ornek bir dokumasyon https:\/\/s3.amazonaws.com\/assets.datacamp.com\/blog_assets\/Numpy_Python_Cheat_Sheet.pdf","2ad48ab1":"v","31a5a2e1":"np.mean(v)       #ortalama alir","a928b061":"v.sum()        #elemanlarin toplamini alir","c0d34552":"v.min()        #en dusuk elemani alir","7a3d2b0a":"v.max()       #en buyuk elamani alir","00b696b4":"import numpy as np","594ddd3d":"a = np.array([[5,1],     #5(x0) 1(x1)  oldugu icin [5,1] altta ayni sekilde [1,3] gelir\n              [1,3]])  #bildigimiz cebir mantigi a bilinmeyinlerin katsayilari\n\nb = np.array([12,10])         #b ise burada sonuclari tamsil ediyor","4b49a1e8":"a","83d2e1b6":"b","c7337bb0":"x = np.linalg.solve(a, b) #numpya ozel iki bilinmeyenli denklem cozme fonksiyonu tek yapmamiz gereken a yi(degisken katsayi)\nx                         #ve b yi (cozumler) iceren arrayleri fonksiyona sirasiyla vermek","b1cf614a":"a=np.array([[4, 0, 3, 0, 1],\n\n            [9, 6, 1, 5, 9],\n\n            [1, 9, 0, 8, 2]])\na[0:1]         #a[0] ile neredeyse estir kisaca demek istedigi 0 dan 1 e kadar (1 dahil degil) olan satiri al demek sutun \n               #belirtmemis tum satir demek kisaca ama a[0] dan farki a[0] bize [4,0,3,0,1 dondurur]\n               # 0. satiri alirsak [[4,0,3,0,1]] 2 boyutlu z","1e15d294":"print(a[0])\nprint(a[0:1])\nprint(a[0].ndim,\" \",a[0:1].ndim)      #gorulecegi uzere birinin boyutu 1 boyut birinin boyutu 2 boyuttur","5ab06529":"import pandas as pd ","1c1d8b4c":"pd.Series([10,88,3,4,5])      #seri(tek boyutlu array gibi dusunebiliriz) boyle olusturulur\n                              #fark burda cikar pandasta veriler indeksleriyle beraber tutulur","1025fe40":"seri = pd.Series([10,88,3,4,5])","30468840":"type(seri)","8deb5a88":"seri.axes      #serinin indeks bilgilerine eristik 0 dan baslamis 5 e kadar gitmis(5 dahil degil) 1 er 1 er artmis","003f2e6e":"seri.dtype","95511394":"seri.size #icindeki eleman sayisi","86156fb8":"seri.ndim","bc6b7fac":"seri.values  #array formunda degerlere eristim ","bd13d0d7":"seri.head(3) #eger ilk kac gozleme erismek istersek head kullaniriz head() default olarak 5 deger getirir","b450b4ac":"seri.tail(3)   #tailde ayni sekilde son degerlerden bakmak icin","6ef02277":"#index isimlendirmesi","afb678e7":"pd.Series([99,22,332,94,5])","3640812e":"pd.Series([99,22,332,94,5], index = [1,3,5,7,9]) #burdan gorulecegi uzere indekslerini biz atayabiliyoruz istedigimiz gibi indeks \n                                                 #isimlerini secmek bize kalmis\n","704186ec":"pd.Series([99,22,332,94,5], index = [\"a\",\"b\",\"c\",\"d\",\"e\"]) #istersek boyle stringde verebiliriz indeksleri","6bbd0fc5":"seri = pd.Series([99,22,332,94,5], index = [\"a\",\"b\",\"c\",\"d\",\"e\"])","f1c507ca":"seri[\"a\"]   #burda cagirmalarda indeksleri sozlukler gibi cagiririz bir tik onlari andiriyor","c7c73fa5":"seri[\"a\":\"c\"]","ae980671":"#sozluk uzerinden liste olusturmak","cc5a7664":"sozluk = {\"reg\":10, \"log\":11, \"cart\": 12} #sozlukleri kullanarak pandas serisi olusturabiliriz yapilari benziyor indeks isimleri\n                                          #key olarak dusunulebilir","3bad9804":"seri = pd.Series(sozluk)","3851e400":"seri","fbeb6ec7":"#iki seriyi birlestirerek seri olusturma","c45ee939":"pd.concat([seri,seri])     #concat birlestirme kutuphanesidir bunlari alt alta birlestirir seriler tek bir array gibi dusunulur\n                           #ondan alt alta birlestirmesi mantiklidir","5d38b983":"import numpy as np\na = np.array([1,2,33,444,75])\nseri = pd.Series(a)\nseri","98b3d117":"seri[0]","22524b79":"seri[0:3]  #numpyda yada arraylerde bildigimiz islemlerin cogu gene kullaniliyor","95181e9d":"seri = pd.Series([121,200,150,99], index = [\"reg\",\"loj\",\"cart\",\"rf\"]) #istedigimiz indeks isimlerinden bir pandas serisi olusturduk","56931d19":"seri","95bf2932":"seri.index","39672949":"seri.keys","6c3916f4":"list(seri.items()) #boyle listeye cevirme yontemi","1c754649":"seri.values","383d7d25":"#eleman sorgulama","11eb76d9":"\"reg\" in seri    #true false doner eger icindeyse true dondurur ","c6916c83":"\"a\" in seri","fe4b63c4":"seri[\"reg\"]","01845abe":"#fancy eleman","1549b917":"seri[[\"rf\", \"reg\"]] #sadece istedigimiz elemanlari secim islemi gorulecegi uzere rf ve reg indekslerindekileri aldik","c66b486c":"seri[\"reg\"] = 130 ","ebcf2c84":"seri[\"reg\"]","6276caf0":"seri[\"reg\":\"loj\"] #burdan gene ayni mantik regden loja kadar al dedik","ce3fdd1a":"import pandas as pd","5c5cd330":"dizi = [1,2,39,67,90]","dbd402d0":"dizi","981dfae9":"pd.DataFrame(dizi, columns = [\"degisken_ismi\"]) #data frame olusturmak boyle yapiliyor eger isimlendirmek istersen columns= ile\n                                                #yapabilirsin isimlendirmeyi","9cb71139":"import numpy as np\nm = np.arange(1,10).reshape((3,3))\nm","86dae880":"pd.DataFrame(m, columns = [\"var1\",\"var2\",\"var3\"]) #degiskenleri ayri ayri isimlendirebilriz \n                                                  #2 boyutlu bir dataframe olusturduk","efb94e96":"#df isimlendirme","f5f997b5":"df = pd.DataFrame(m, columns = [\"var1\",\"var2\",\"var3\"])\ndf.head()","c09ea014":"df.columns = (\"deg1\",\"deg2\",\"deg3\") #degisken isimlerini yeniden adlandirmak gorulecegi gibi oldukca basit","4f928b52":"df","b9a1b168":"type(df)","23a8e06a":"df.axes #satir ve sutun bilgilerini verir","abd6a955":"df.shape #boyut bilgisi","8987f6aa":"df.ndim #2 boyutlu","4607c443":"df.size #eleman sayisi","a247defc":"df.values  #degerleri values ile cekersek array tipinde gelir bu degerler","c8cc242d":"type(df.values)","15e9d5b0":"df.head()","98b05772":"df.tail(1)","90c2a52c":"a = np.array([1,2,3,4,5])","957cb0e4":"pd.DataFrame(a, columns = [\"deg1\"]) #numpy ile olusturdugumuz arrayle pandas DataFrame olusturabildik","d0a78a4a":"import numpy as np\ns1 = np.random.randint(10, size = 5)\ns2 = np.random.randint(10, size = 5)\ns3 = np.random.randint(10, size = 5)","58290dac":"sozluk = {\"var1\": s1, \"var2\": s2, \"var3\": s3}","f23c1f82":"sozluk","4d871027":"df = pd.DataFrame(sozluk)","c6ad95f9":"df","e3d10add":"df[2:4] # dikkat 2 den 4 e kadar derken indeksler 0 1 2 3 4 diye giden satir kisimlari karistirma tum elemanlari aliyor ama sadece\n        #2:4 yaptigimiz icin 2. 3. satiri (4 dahil degil) alir","617c55fd":"df.index","d55dd22a":"df.index = [\"a\",\"b\",\"c\",\"d\",\"e\"]  #indeksleri tekrar atama islemi","fd5f244c":"df  #indeksler degisti","70d480e7":"df[\"c\":\"e\"] #c den e ye kadar gitme islemi e dahil oldu burada ama \n            #boyle sonradan atadigimiz indeks adlarinda c den e ye kadar diyince e dahil oluyor\n            #2:4 yaptigimizda mesela 2 3 olmustu sadece buda onemli bir not","86cb836c":"#silme","a68f93c6":"df.drop(\"a\", axis = 0) #  a indeksini dusurduk kisaca sildik # ama kalici olarak silmedik atama yapmadigimiz icin altta durur\n                       # satirlari ifade etmek icin axis=0 yaptik","49f6f265":"df   #gorulecegi uzere a duruyor","bcdcd859":"df.drop(\"a\", axis = 0, inplace = True) #ama biz inplace i true yapar isek o zaman a indeksi kalici olarak silinir yani df de\n                                       #kalici oldu yaptigimiz islem","49d8b920":"df","5895b912":"#fancy ","3e301987":"l = [\"c\",\"e\"]   #birkac hucreyi beraber silmek istersek fancy indeks kullanabiliriz","57baed1b":"df.drop(l, axis = 0) #burda c ve e indekslerini silmek istiyorum demek istiyorum","fdbb1cf0":"#degiskenler icin","6b91597d":"df","80468afa":"\"var1\" in df","b99572db":"l = [\"var1\",\"var4\",\"var2\"]","4d6f8226":"for i in l:           #degiskenler dataFrame icinde varmi diye soruyoruz\n    print(i in df)","cec2601e":"df","f7068fe9":"df[\"var1\"]","1afff5f6":"df[\"var4\"] = df[\"var1\"] \/ df[\"var2\"] #df var4 adinda yeni degiskeni var1 ve var2 yi kullanarak olusturduk","1015721a":"df","bffb8509":"#degisken silmek","e3d3ebd3":"df.drop(\"var4\", axis = 1)  #degisken silmek islemi degiskenin adini veriyoruz simdi sutunlari ifade etmek icin axis=1 yazmamiz gerek\n                            #axis=0 yaparsak hata verir cunku satirda bulamaz","1d041165":"df          #tabi yukarda inplace=true yapmadigimiz icin atama islemi yok df=df.drop da yapmadik o yuzden kayit olmaz\n            #tekrar cagirildiginda gorulur ","df0fcebb":"df.drop(\"var4\", axis = 1, inplace = True)  #inplace true yaparsak bu sefer kalici siler","1159c03d":"df","25a0a5a4":"l = [\"var1\",\"var2\"]","e1e71914":"df.drop(l, axis = 1) #burda fancy indeks ile islemi direkt var1 ve var2 degiskenlerini sildik","1da88614":"import numpy as np\nimport pandas as pd\nm = np.random.randint(1,30, size = (10,3))\ndf = pd.DataFrame(m, columns = [\"var1\",\"var2\",\"var3\"])\ndf","6d9dacb0":"#loc: tan\u0131mland\u0131\u011f\u0131 \u015fekli ile se\u00e7im yapmak i\u00e7in kullan\u0131l\u0131r.","a4951914":"df.loc[0:3]  #yani 0 dan 3 e kadar locda tanimlandigi uzere 0 1 2 3 u alir bizim normal mantikla ters dusuyor biraz","b920790c":"#iloc: al\u0131\u015f\u0131k oldu\u011fumuz indeksleme mant\u0131\u011f\u0131 ile se\u00e7im yapar.","ba586d8c":"df.iloc[0:3]   #iloc ise bizim alisik oldugumuz yontem 0 dan 3 e kadar ama 3 dahil degil 0 1 2 yi alir","81533494":"df.iloc[0,0]","2b63f9ca":"df","0006a892":"df.iloc[:3,:2] #0 1 2. satirlari al 0 1. sutunlari al","9b64c3ac":"df.loc[0:3, \"var3\"] #iloc loc farki onemli (135. ders)","c06f7b32":"df.loc[0:3, \"var3\"]","9545c96c":"df.iloc[0:3][\"var3\"]","66e74a16":"import numpy as np\nimport pandas as pd\nm = np.random.randint(1,30, size = (10,3))\ndf = pd.DataFrame(m, columns = [\"var1\",\"var2\",\"var3\"])\ndf","52ce8d06":"df[\"var1\"]","ce738805":"df[0:2][[\"var1\",\"var2\"]]","cb1b7763":"df","eaec695e":"df.var1","06d8e2cf":"df[df.var1 > 15] #kosul islemleri var1 degerleri 15 den buyuk olan satirlari getir satir ve sutun olarak getirir var1 deki\n                #deger buyuk olsa yeter","44758d82":"df[(df.var1 > 15) & (df.var3 < 5)]     # var1 degerleri 15 den buyuk ve var3 degerleri 5 den kucuk kosulu saglanan bir kismi getir","4be70094":"df.loc[(df.var1 > 15), [\"var1\",\"var2\"]] #gelen kosulda sadece var 1 ve var2 yi almak istiyoruz burda locu yerlestirmemiz lazim ama\n                                        #cunku degisken secme bilgisi gonderdik var1 var2 diye ama baska yoluda var assagida","02ac8532":"df[(df.var1 > 15)][[\"var1\",\"var2\"]] #bu sekildede sonradan secilecek elemanlari (satirlari sutunlari) sonradan koseli parantez \n                                    #acarak ve fancy [[1,2,3]] indeks seklinde tanimlayarak secebiliriz loc kullanmadan","a386f249":"import numpy as np\nimport pandas as pd\nm = np.random.randint(1,30, size = (5,3))\ndf1 = pd.DataFrame(m, columns = [\"var1\",\"var2\",\"var3\"])\ndf1","38731b75":"df2 = df1 + 99","7e5de850":"df2","dbc6e107":"pd.concat([df1,df2])     #concat fonksiyonu ile birlestirdik ama indekslerde sikinti var gorulecegi uzere 0 dan bire seklinde \n                        #tekrar indeksde 0 dan basliyor\n","61ea8238":"?pd.concat         #yukardaki sorunun cozumunu bulmak icin basina soru isareti koyarak fonksiyonun ozelliklerine tanimlarina\n                   #erisebiliriz","1fbce03e":"pd.concat([df1,df2], ignore_index=True)   #bu sekilde yapilabilir ignore_index=True ile yazilan indeksleri inkar gormezden gelir ve\n                                          #kendisi atama yapar","6aa36afa":"df1.columns\n","221f850d":"df2.columns = [\"var1\",\"var2\",\"deg3\"]","87f1db0d":"df2","eb6815ff":"df1","640f785f":"pd.concat([df1, df2]) #burada nan lar olma sebebi deg3 den dolayi cunku kesisimde olan bir eleman degil","c1470b25":"pd.concat([df1, df2], join = \"inner\") #burda yukarida nan lar vardi biz join turunu kesisimler yaptik ve o nanlardan ve hatadan\n                                     #kurtulmus olduk diger turlu kesimi olmayan elemanlara nan gelecekti buda s\u0131k\u0131nti bizim icin","505fa544":"#pd.concat([df1, df2], join_axes = [df2.columns], ignore_index=True)","9fb49a7c":"import pandas as pd","b34641d6":"#birebir birlestirme","c8363c34":"df1 = pd.DataFrame({'calisanlar': ['Ali', 'Veli', 'Ayse', 'Fatma'],\n                    'grup': ['Muhasebe', 'Muhendislik', 'Muhendislik', '\u0130K']})\n\ndf1","36cc2a83":"df2 = pd.DataFrame({'calisanlar': ['Ayse', 'Ali', 'Veli', 'Fatma'],\n                    'ilk_giris': [2010, 2009, 2014, 2019]})\n\ndf2","5fd6ea15":"pd.merge(df1, df2)         #yukarda 2 tane data frame tanimladik calislanlar kismi ortakti \n                           # grup ve ilk giris degildi bunlari merge ile ortak noktasi oldugu icin (calisanlar) kolayca birlestirdik\n                           #merge onemli ama 1 tane ortak kisim sart merge icin ( birebir birlestirme yani )","5e2c7f85":"pd.merge(df1, df2, on = \"calisanlar\") #burdanda nereye gore birlestirmemiz gerektigini on ile belirtebiliriz","a1c1d4d6":"#coktan teke ","4ff08b5b":"df3 = pd.merge(df1, df2)","02af42a8":"df3","7e4ad15e":"df4 = pd.DataFrame({'grup': ['Muhasebe', 'Muhendislik', '\u0130K'],\n                    'mudur': ['Caner', 'Mustafa', 'Berkcan']})\n\ndf4         #burda yaptigimiz gruplara denk gelen mudurleri tanimladik ve merge yaptigimizda otamatik olarak atamalari yapti","83342ebc":"pd.merge(df3,df4) #burdan gorulecegi uzere denk gelen gruplara (muhasebe muhendislik ik) atadigimiz muderler birlestirildi","db421d1e":"# \u00e7oktan \u00e7oka","1e8a4f83":"df5 = pd.DataFrame({'grup': ['Muhasebe', 'Muhasebe',\n                              'Muhendislik', 'Muhendislik', '\u0130K', '\u0130K'],\n                    'yetenekler': ['matematik', 'excel', 'kodlama', 'linux',\n                               'excel', 'yonetim']})\n\ndf5","1a017a1d":"df1","db99d83d":"pd.merge(df1, df5) #gruplarin bircok yetenegi oldugu icin calislanlar coklandi yetenekler fazla oldugu icin","a84cf6c2":"import seaborn as sns","aa3b9e5c":"?sns.load_dataset","46bdf6e3":"#df = sns.load_dataset(\"planets\")   #bu kisim bende hata verdigi icin csv file seklinde okuttum dataframe a\ndf= pd.read_csv(\"..\/input\/seaborn-practice\/planets.csv\")\ndf.head()","ca7f3fa7":"df.shape","de03c6c5":"df.mean() #buyun degiskenlerin ortalamalarini gosterir","b5ecfb49":"df[\"mass\"].mean() #belirli bir deger icin uygulamak ister isek boyle uygulariz","f3fe7fe8":"df[\"mass\"].count()  #massden kac adet var onu saydi","45bad34e":"df[\"mass\"].min()  #en dusuk deger mass icindeki","80f60110":"df[\"mass\"].max()","473308f7":"df[\"mass\"].sum()     #degisken degerleri toplami","3f338fc4":"df[\"mass\"].std()    #standart sapmasi","59a30952":"df[\"mass\"].var()   #varyansi","3b135caa":"df.describe().T   #dagilim istatistikleri, betimsel istatistikleri ustte yaptigimiz islemleri gosteriyor direkt olarak hepsi icin","ae13c3ab":"df.dropna().describe().T #burda ise count sayilari dustu gordugunuz gibi cunku null(eksik) degerleri, satirlari tamamen cikarmis oldu\n                         #buda sonuc olarak diger degisken degerlerini etkiledi (once dropna uygulayip describe yaptik)","8b37bd40":"df = pd.DataFrame({'gruplar': ['A', 'B', 'C', 'A', 'B', 'C'],\n                   'veri': [10,11,52,23,43,55]}, columns=['gruplar', 'veri'])\ndf","dbe257b4":"df.groupby(\"gruplar\")","8064dac3":"df.groupby(\"gruplar\").mean() #gruplar icinde ortalama aldi A B C birer grup sen bunlari kendi icinde isleme tabi tuttun \n                             #her grubu kendi icinde yani","06fb770e":"df.groupby(\"gruplar\").sum()","49b7b623":"#df = sns.load_dataset(\"planets\")   #bu kisim bende hata verdigi icin csv file seklinde okuttum dataframe a\ndf= pd.read_csv(\"..\/input\/seaborn-practice\/planets.csv\")\ndf.head()","7c4f24a8":"df.groupby(\"method\") #method degiskenlerini yakaladik ve bunlar uzerinden islemler yapacagiz","d32c8a64":"df.groupby(\"method\")[\"orbital_period\"].mean() #burda grupladigimiz degiskenlerin orbital_priod ozelliginin ortalamasini aldik \n                                              ","4c6d50e3":"df.groupby(\"method\")[\"mass\"].mean() #burdanda ornek olacagi uzere kutle degerlerinin ortalamasi (method gruplarinin kendi icin)","81216188":"df.groupby(\"method\")[\"orbital_period\"].describe() #gene describe ile tumunu goruntuleme imkanimiz var","d571f03e":"import pandas as pd\ndf = pd.DataFrame({'gruplar': ['A', 'B', 'C', 'A', 'B', 'C'],\n                   'degisken1': [10,23,33,22,11,99],\n                   'degisken2': [100,253,333,262,111,969]},\n                   columns = ['gruplar', 'degisken1', 'degisken2'])\ndf","9275ce56":"#aggregate","e28f1209":"df.groupby(\"gruplar\").mean()","624bd14e":"df.groupby(\"gruplar\").aggregate([min, np.median, max]) #toplulastirici gruplara istedigimiz islemleri yaptiriyor\n                                                       #goruldugu uzere icine yazdigimiz islemleri uyguladi","34bb5d9e":"df.groupby(\"gruplar\").aggregate({\"degisken1\": \"min\", \"degisken2\": \"max\"})","725729a6":"#filter","3a0ee97e":"import pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'gruplar': ['A', 'B', 'C', 'A', 'B', 'C'],\n                   'degisken1': [10,23,33,22,11,99],\n                   'degisken2': [100,253,333,262,111,969]},\n                   columns = ['gruplar', 'degisken1', 'degisken2'])\ndf","9732d790":"#transform","ee0bdbcb":"import pandas as pd\ndf = pd.DataFrame({'gruplar': ['A', 'B', 'C', 'A', 'B', 'C'],\n                   'degisken1': [10,23,33,22,11,99],\n                   'degisken2': [100,253,333,262,111,969]},\n                   columns = ['gruplar', 'degisken1', 'degisken2'])\ndf","eb638ab5":"df[\"degisken1\"]*9","d4038766":"df_a = df.iloc[:,1:3] # tum satirlari ve 1. 2. sutunu al df_a ya ata\n                     #data framede slice yapacaksak indekslere bagli kalacaksak loc kalmayacaksak iloc kullanmamiz gerekiyor\n                    # df[:,1:2] yapsak hata aliriz ornegin bunlar onemli detaylar","40d9c8cd":"df_a.transform(lambda x: (x-x.mean()) \/ x.std()) #x e bagli bir islem gerceklestirdik lambda fonks ile  ","b2c06ac6":"#apply","16c4f788":"import pandas as pd\ndf = pd.DataFrame({\n                   'degisken1': [10,23,33,22,11,99],\n                   'degisken2': [100,253,333,262,111,969]},\n                   columns = ['degisken1', 'degisken2'])\ndf","c7d5ff31":"df.apply(np.sum) #df uzerinde gezinme ozelligi olan ve aggregation gibi toplulastirma amaciyla kullanilabilecek bir fonksiyondur","2e5abd20":"df.apply(np.mean)","4a30355b":"import pandas as pd\ndf = pd.DataFrame({'gruplar': ['A', 'B', 'C', 'A', 'B', 'C'],\n                   'degisken1': [10,23,33,22,11,99],\n                   'degisken2': [100,253,333,262,111,969]},\n                   columns = ['gruplar','degisken1', 'degisken2'])\ndf","2623e869":"df.groupby(\"gruplar\").apply(np.mean)  #A B C gruplarinin kendi icinde meani uyguladim df.groupby(\"gruplar\").mean() yapsanda olurdu\n                                      #apply ile istedigimiz fonksiyonu uygula diyor oluyoruz kisaca ayni islev birnevi","d880ec9c":"import pandas as pd\nimport seaborn as sns\n#titanic = sns.load_dataset('titanic')       #bende bu gene hata verdigi icin alttaki sekilde okuyarak aldim veriyi\ntitanic=pd.read_csv(\"..\/input\/seaborn-practice\/titanic.csv\")\ntitanic.head() ","0f365b28":"titanic.groupby(\"sex\")[[\"survived\"]].mean() #burda cinsiyete gore hayatta kalmalari cikardik\n                                        #groupby ile cinsiyeti sectik ve bu yuzden cinsiyetleri kendi icinde istenilen islemi yapti\n                                #sonrada survived satirinin ortalamasini almasini istedik","23225e71":"titanic.groupby([\"sex\",\"class\"])[[\"survived\"]].aggregate(\"mean\").unstack() #burda groupby islemini genislettik\n         #cinsiyet ve sinifa gore grupladik ve bunlari yolcularin classlariylada siniflayinca kesisimlerini kullanmis olduk\n         #unstack de okunmasini kolaylastirmak icin cikarip nasil bir gorunum elde edecegini deneyebilirsin","ad991201":"#pivot ile table","697f50ed":"titanic.pivot_table(\"survived\", index = \"sex\", columns = \"class\") #ustte yaptigimiz islemlerin daha kolay yolu\n                                                                 #burda tek yaptigimiz pivot_table() degiskenine neyi siniflamak\n                    #istedigimizi ve indeksleri ve sutunlari vermemiz yeterli oldu oldukca kullanisli bir fonksiyon","2118c351":"titanic.age.head()","95c45a40":"age = pd.cut(titanic[\"age\"], [0, 18, 90]) #burda bir fonksiyon kullandik pandasin cut fonksiyonu age degiskenini 0 18 90 araliklarina\nage.head(10)                              #boldu bu sayede yas degerlerini belli araliklara sikistirabildik","8d322fc6":"titanic.pivot_table(\"survived\", [\"sex\", age], \"class\") #burda ise o degisken araliklarini kullanarak o araliklardaki hayatta kalma\n                                                       #oranina baktik","7a9754dd":"import pandas as pd","e04da4cc":"?pd.read_csv","3838b04b":"#csv okuma\npd.read_csv(\"..\/input\/readingdata\/reading_data\/ornekcsv.csv\") #burda okumada sikinti cikti ; girmis aralara cozumu altta ","8007b1e9":"\npd.read_csv(\"..\/input\/readingdata\/reading_data\/ornekcsv.csv\",sep=\";\") #okuma islemi hatali oldugunda sep=\";\" yaparak ; den ayir\n                                                                     #demek istedik kisaca ayrim operatorunu bilmemiz yetti","30e429a8":"#txt okuma\npd.read_csv(\"..\/input\/readingdata\/reading_data\/duz_metin.txt\")","19f10dc6":"#s\u0131f\u0131rdan txt okuma\ntips = pd.read_csv(\"..\/input\/readingdata\/reading_data\/duz_metin.txt\")","919d69df":"tips.head()","3bfe1e68":"# Index ile Elemanlara Eri\u015fmek","66983ff5":" # Birle\u015ftirme (Join) \u0130\u015flemleri","57f51157":"# Numpy Array \u00d6zellikleri","09585b47":"# \u0130statistiksel Hesaplamalar","0057384a":"# Matematiksel \u0130\u015flemler","b701ca94":"* **ndim**: _boyut say\u0131s\u0131_\n* shape: boyut bilgisi\n* size: toplam eleman say\u0131s\u0131\n* dtype: array veri tipi","e75c3f12":"# D\u0131\u015f Kaynakl\u0131 Veri Okumak","3644a00b":"# *PANDAS GIRIS*","a2b1592f":"# G\u00f6zlem ve De\u011fi\u015fken Se\u00e7imi: loc & iloc","27e03728":"# Pandas Serisi Olu\u015fturmak","3bf9117f":"# Slicing ile Elemanlara Eri\u015fmek (Array Alt K\u00fcmesine Eri\u015fmek)","9effb2d9":"# Alt K\u00fcme \u00dczerinde \u0130\u015flem Yapmak","f9262c67":"# NumPy Array'i Olu\u015fturmak","22ceb923":"# BOLUM SONU DEGERLENDIRMESI","ad3f7584":"# Pandas DataFrame Olu\u015fturma","2ffe3332":"# Array Ay\u0131rma (Splitting)","ad51e3c0":"# NumPy ile \u0130ki Bilinmeyenli Denklem \u00c7\u00f6z\u00fcm\u00fc","45fc7d05":"# Eleman \u0130\u015flemleri","fe3aab28":"# Pivot Tablolar","3f612704":"# Gruplama \u0130\u015flemleri","c2d59120":"Basit toplula\u015ft\u0131rma fonksiyonlar\u0131:\n\n* count()\n* first()\n* last()\n* mean()\n* median()\n* min()\n* max()\n* std()\n* var()\n* sum()","fbfd03e7":"# Toplula\u015ft\u0131rma ve Gruplama (Aggregation & Grouping)","f37df8d4":"# \u0130leri Birle\u015ftirme \u0130\u015flemleri","4b8219c5":"# Ko\u015fullu Eleman \u0130\u015flemleri","c7fc236a":"# Fancy Index ile Elemanlara Eri\u015fmek","e3504325":"# Yeniden \u015eekillendirme (Reshaping)","cd163a82":"**5 * x0 + x1 = 12  \nx0 + 3 * x1 = 10**","00df8879":"# Onemli Not Dikkat","f08d9fac":"* np.mean(arr,axis=0) | Returns mean along specific axis\n\n* arr.sum() | Returns sum of arr\n\n* arr.min() | Returns minimum value of arr\n\n* arr.max(axis=0) | Returns maximum value of specific axis\n\n* np.var(arr) | Returns the variance of array\n\n* np.std(arr,axis=1) | Returns the standard deviation of specific axis\n\n* arr.corrcoef() | Returns correlation coefficient of array","fcff3323":"# Array S\u0131ralama (Sorting)","c5df0e55":"# Eleman \u0130\u015flemleri","1ee61e23":"# Array Birlestirme (Concatenation)","6e601535":"# sifirdan array olusturma ","29316aaf":"# \u0130leri Toplula\u015ft\u0131rma \u0130\u015flemleri (Aggregate, filter, transform, apply)","66f389c4":"# Ko\u015fullu Eleman \u0130\u015flemleri"}}