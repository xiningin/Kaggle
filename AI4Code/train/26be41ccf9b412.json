{"cell_type":{"4d061c79":"code","3ca337e3":"code","2a34c0d7":"code","f04c96d5":"code","1a4e1de2":"code","a7a4acc3":"code","604875b2":"code","151af9b1":"code","6b40c5d3":"code","3b6b21f1":"code","e7a206bd":"code","fafa6408":"code","fbc6617d":"code","b3811801":"code","ddad0abc":"code","94cfb65c":"code","f7a910a0":"code","4fb69f3c":"code","8feeb13f":"code","9ac23d7a":"code","207daafa":"code","6062ee19":"code","179bb6e5":"code","55a7509c":"code","58492952":"code","b7f54ea2":"code","88813074":"code","9b69e66a":"code","637af8f9":"code","88b325dc":"code","271bb130":"code","ad2421c0":"code","7abc0a65":"code","cb554e0f":"code","489c2397":"code","89561c0e":"code","504bb7fb":"code","9f14b9d6":"code","6e99725d":"code","a03712d6":"code","748b633b":"code","2e2531f0":"code","45508ef6":"markdown","541e64d5":"markdown","4643fa76":"markdown","c8f4c9f3":"markdown","a663e703":"markdown","3e3c384a":"markdown","d9ae4e6d":"markdown","f9341328":"markdown","4c350dd5":"markdown","dd3d91e5":"markdown","6331eb12":"markdown","e595f7c6":"markdown","74610706":"markdown","43fef3b8":"markdown","be00f52b":"markdown","77b68f13":"markdown","744db4e5":"markdown","857c7c91":"markdown","7533196c":"markdown","d878bac2":"markdown","a106950e":"markdown","a688d2c2":"markdown","6c43d4f5":"markdown","cdee2655":"markdown","ac20a4bd":"markdown","c3f3dcd4":"markdown","4671c786":"markdown","f20db8a6":"markdown","ed505406":"markdown","e43f3533":"markdown","ec2de333":"markdown","b90db0cd":"markdown","eff29058":"markdown","f402ca08":"markdown","d0ad89ac":"markdown","7299b199":"markdown","f2a8adb2":"markdown","2bb3d35f":"markdown","01a86dc7":"markdown","f86b2eea":"markdown","bf94a22c":"markdown","f855dcda":"markdown","bbddf935":"markdown","8a28b4a5":"markdown","48d3f502":"markdown"},"source":{"4d061c79":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3ca337e3":"df = pd.read_csv('..\/input\/telecom_churn.csv')","2a34c0d7":"type(df)","f04c96d5":"df.head()","1a4e1de2":"df.shape","a7a4acc3":"df.columns","604875b2":"df.info()","151af9b1":"df['Churn']=df['Churn'].astype('int64')","6b40c5d3":"df.describe()","3b6b21f1":"df.describe(include=['object'])","e7a206bd":"df['Churn'].value_counts()","fafa6408":"df['Churn'].value_counts(normalize=True)","fbc6617d":"df.sort_values(by='Total day charge',ascending=False).head()","b3811801":"df.sort_values(by=['Churn','Total day charge'],ascending=[True,False]).head()","ddad0abc":"df['Churn'].mean()","94cfb65c":"df[df['Churn']==1].mean()","f7a910a0":"df[df['Churn']==1]['Total day minutes'].mean()","4fb69f3c":"df[(df['Churn']==0) & (df['International plan']== 'No')] ['Total intl minutes'].max()","8feeb13f":"df.loc[0:3]","9ac23d7a":"df.iloc[0:3,0:5]","207daafa":"df[-1:]","6062ee19":"df.apply(np.max) ","179bb6e5":"df[df['State'].apply(lambda state:state[0]=='W')].head() ","55a7509c":"d= {'Yes':True, 'No':False}\ndf['International plan']=df['International plan'].map(d) \ndf.head() ","58492952":"df=df.replace({'Voice mail plan':d}) ","b7f54ea2":"df.head() ","88813074":"columns_to_show=['Total day minutes', 'Total eve minutes', 'Total night minutes']\ndf.groupby(['Churn'])[columns_to_show].describe(percentiles=[]) ","9b69e66a":"columns_to_show = ['Total day minutes', 'Total eve minutes', \n                   'Total night minutes']\n\ndf.groupby(['Churn'])[columns_to_show].agg([np.mean, np.std, np.min, \n                                            np.max])","637af8f9":"pd.crosstab(df['Churn'],df['International plan'])","88b325dc":"df.pivot_table(['Total day calls', 'Total eve calls', 'Total night calls'],['Area code'],aggfunc='mean')","271bb130":"total_calls=df['Total day calls']+df['Total eve calls']+df['Total night calls']+df['Total intl calls']\ndf.insert(loc=len(df.columns),column='Total calls',value=total_calls)","ad2421c0":"df.head()","7abc0a65":"df.drop(['Total calls'],axis=1,inplace=True)\ndf.head()","cb554e0f":"df.drop([1,2]).head()","489c2397":"pd.crosstab(df['Churn'],df['International plan'],margins=True)","89561c0e":"import matplotlib.pyplot as plt\nimport seaborn as sns\n# Graphics in retina format are more sharp and legible\n%config InlineBackend.figure_format = 'retina'","504bb7fb":"sns.countplot(x='International plan', hue='Churn', data=df)","9f14b9d6":"pd.crosstab(df['Churn'],df['Customer service calls'],margins=True)","6e99725d":"sns.countplot(x='Customer service calls', hue='Churn', data=df)","a03712d6":"df['many_calls']=(df['Customer service calls']>3).astype('int')\npd.crosstab(df['Churn'],df['many_calls'],margins=True)","748b633b":"sns.countplot(x='many_calls', hue='Churn', data=df);","2e2531f0":"pd.crosstab(df['many_calls'] & df['International plan'] , df['Churn'])","45508ef6":"Dataframes can be indexed using loc[] & iloc[] function.\nThe first one gives us the number of rows to be extracted and the latter one extracts rows along with columns.","541e64d5":"Checking the datatype for df","4643fa76":"From the above results , we can determine that poorly maintained and inexpensive International plans has lead to more churn rate.","c8f4c9f3":"We have converted our target feature Churn from boolean into numeric by astype method for detailed statistical results.","a663e703":"Out of 3333 , 2850 customers claim to be loyal ","3e3c384a":"**Sorting**","d9ae4e6d":"We can obtain specific aggregate functions by using agg().","f9341328":"If we are to add different calls to a total calls in a day column and add it to the dataset we can do the following.","4c350dd5":"We can see the data structure of df to be a dataframe. The names of the columns are displayed along with their data types.","dd3d91e5":"To check on the distribution on our target feature Churn , we use value_counts().","6331eb12":"Based on the above observation ,create a new feature and observe the relationship with churn.","e595f7c6":"We normalized the function to get the fraction for each distribution of the total, where 85.5% claim to be loyal and 14.5% do not.","74610706":"we have 3333 rows and 20 columns in the whole dataset.","43fef3b8":"If we require to remove the columns we use the drop function.","be00f52b":"To get statistical results like count, mean, std, quartiles and many more from the dataset , we use the descsribe() function.","77b68f13":"Therefore, predicting that a customer is not loyal (Churn=1) in the case when the number of calls to the service center is greater than 3 and the International Plan is added (and predicting Churn=0 otherwise), we might expect an accuracy of 85.8% (we are mistaken only 464 + 9 times). This number, 85.8%, that we got through this very simple reasoning serves as a good starting point (baseline) for the further machine learning models that we will build.","744db4e5":"If we are to remove rows we use..","857c7c91":"What is the maximum length of international calls by loyal users who do not have any international plans? ","7533196c":"Checking the dimensions of the dataset","d878bac2":"What is the last line of the dataframe? ","a106950e":"14.5% of clients leaving a company is not a good sign at all.","a688d2c2":"We can use the map function to replace old values by new ones. ","6c43d4f5":"We can clearly determine that as soon as the the service calls go beyond 4 , churn rate increases substanially.","cdee2655":"What is the average daytime spent on calls by churned users?","ac20a4bd":"Indexing and Retrieving Data","c3f3dcd4":"Reading the dataset","4671c786":"We can do the same thing using replace function.","f20db8a6":"Summary Tables are crosstabulation tables that could be used to compare 2 variables by their distribution or more than 2 using pivot tables.","ed505406":"Boolean Indexing helps us with a condition with respect to analyse a feature we wanted a proportion of by averaging other features.\nFor example let us see the average numerical features for all thr churned users.\n","e43f3533":"Select all states starting with W using lambda function.","ec2de333":"Give a detailed contingency table between Churn and Customer service calls along with a plot.","b90db0cd":"Let us see all the names of the columns in the dataset","eff29058":"We can sort the whole dataset by sorting 1 column in ascending or descending order. Here we would be using the column 'Total Day Charge' in ascending=False depicting descending order.","f402ca08":"Give a detailed contingency table between Churn and International plan along with a plot.","d0ad89ac":"Indexing helps us to get a proportion of each feature for example propoortion of clients likely to churn from the company.","7299b199":"We need the include parameter to see summary statistics for non-numeric features.","f2a8adb2":"> ****analyzing a dataset on the churn rate of telecom operator clients","2bb3d35f":"**Groupby** is used to view selected columns with respect to column value we wish to segregate. ","01a86dc7":"In pivot tables , we compare distribution of different features with respect to a particular one based on their aggregate functions.","f86b2eea":"To get some general information regarding the dataset we use the .info() function.","bf94a22c":"Also if there are any missing values present , they would be displayed as null which is 0 in this case. There are 16 numeric features with 1 boolean and 3 object features. ","f855dcda":"Reading the data to a dataframe","bbddf935":"Applying functions to cells, rows and columns.","8a28b4a5":"We can perform the same sorting exercise using mutiple columns.Let us try.","48d3f502":"**Dataframe Transformations**"}}