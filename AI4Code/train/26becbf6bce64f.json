{"cell_type":{"edede8fb":"code","4827ed79":"code","163f45a5":"code","defedaf2":"code","e0459b17":"code","66adb947":"code","f5441094":"code","982cd5be":"code","0539155a":"code","0301869d":"code","8facb1e7":"code","4390400b":"code","e12e5c1f":"code","34c07aa2":"code","abdf776b":"code","deff102b":"code","73a8cb73":"code","cbff900f":"code","0294def5":"code","7c7f662f":"code","393c3819":"code","c91a63c6":"code","084e8af0":"code","0d2b0a01":"code","3cd88c2c":"code","19bbab09":"code","1ea3693b":"code","c123b50a":"code","14826ef3":"code","2195d3cf":"code","152d02fa":"code","9c9e2da7":"code","4d9d72eb":"code","01dfc50c":"code","ec29d622":"code","fe2ad342":"code","4fb241e2":"code","37c8468d":"code","84c4a479":"code","b09f58c7":"code","58b9b406":"code","f95b2b52":"markdown","53934c5a":"markdown","7ee48124":"markdown","ab6eeb5d":"markdown","7beaa676":"markdown","5839a06e":"markdown","0c8c570a":"markdown","6bc04be3":"markdown","155274f7":"markdown","2a99a686":"markdown","4f434f77":"markdown","e534cb35":"markdown","f1162f2e":"markdown","f568e7d9":"markdown","8d35c21f":"markdown","c7b6625c":"markdown","33bbdc1b":"markdown","15e8488e":"markdown","08377727":"markdown","22aa638e":"markdown","779a5c10":"markdown","5b1efa77":"markdown","67d1f0d3":"markdown","aa29560b":"markdown","5e95ae0b":"markdown","eef16a8f":"markdown","9a6c93da":"markdown","8943c859":"markdown","14b3f720":"markdown","52f8ba37":"markdown","f97b0c96":"markdown","3ae92d6d":"markdown","6b3c49b7":"markdown","c7203e2f":"markdown","4df3322f":"markdown","eb3a8611":"markdown","736a1ef3":"markdown","e76b6f7d":"markdown"},"source":{"edede8fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas_profiling\nimport matplotlib.pyplot as plt\nfrom pprint import pprint as pp\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n%matplotlib inline","4827ed79":"INPUT = '\/kaggle\/input\/stanford-open-policing-project\/police_project.csv'\n\n\n# Use 3 decimal places in output display\npd.set_option(\"display.precision\", 3)\n\n# Don't wrap repr(DataFrame) across additional lines\npd.set_option(\"display.expand_frame_repr\", False)\n\n# Set max rows displayed in output to 25\npd.set_option(\"display.max_rows\", 25)\n\ndf = pd.read_csv(INPUT)\n\ndf.head()","163f45a5":"df.info()","defedaf2":"df.profile_report(style={'full_width':True})","e0459b17":"df.shape","66adb947":"df.isnull().sum()","f5441094":"df.drop('county_name', axis='columns', inplace=True)","982cd5be":"df.dropna(subset=['driver_gender'], inplace=True)\ndf.isnull().sum()","0539155a":"df.loc[df.driver_age.isnull(), ['driver_age']] = int(df.driver_age.mean())\ndf.loc[df.driver_age_raw.isnull(), ['driver_age_raw']] = int(df.driver_age_raw.mean())","0301869d":"df.info()","8facb1e7":"# When assigning to columns, only the square brackets notation works.\ndf['is_arrested'] = df.is_arrested.astype('bool')\ndf.info()","4390400b":"df['driver_age'] = df['driver_age'].astype('int8')\ndf['driver_age_raw'] = df['driver_age_raw'].astype('int16')\ndf.info()","e12e5c1f":"for col in ['driver_gender', 'driver_race', 'violation_raw', 'violation', 'stop_outcome']:\n    df[col] = df[col].astype('category')\n    \ndf.info()","34c07aa2":"datetime = df.stop_date.str.cat(df.stop_time, sep= ' ')\ndf['stop_datetime'] = pd.to_datetime(datetime)","abdf776b":"df.set_index('stop_datetime', inplace=True)\ndf.head()","deff102b":"# Now we can drop the redundant columns\ndf.drop(['stop_date', 'stop_time'], axis='columns', inplace=True)\ndf.head()","73a8cb73":"df.stop_outcome.value_counts()","cbff900f":"# Percentage from the total\ndf.stop_outcome.value_counts() \/ df.shape[0]","0294def5":"# As usual there is a method which do that for us\ndf.stop_outcome.value_counts(normalize=True)","7c7f662f":"df.driver_race.value_counts()","393c3819":"male = df[df.driver_gender == 'M']\nfemale = df[df.driver_gender == 'F']\n\nprint(\"Female Violations\")\npp(female.violation.value_counts(normalize=True))\n\nprint(\"\\nMale Violations\")\npp(male.violation.value_counts(normalize=True))\n","c91a63c6":"print(f\"Female Records: {female.shape[0]}\\nMale Records: {male.shape[0]}\")","084e8af0":"arrested_females = df[(df.driver_gender == 'F') & (df.is_arrested == True)]\narrested_males = df[(df.driver_gender == 'M') & (df.is_arrested == True)]","0d2b0a01":"print(f\"Arrested Females: {arrested_females.shape[0]}\\nArrested Males: {arrested_males.shape[0]}\")","3cd88c2c":"female_and_speeding = df[(df.driver_gender == 'F') & (df.violation == 'Speeding')]\nmale_and_speeding = df[(df.driver_gender == 'M') & (df.violation == 'Speeding')]\n\nprint(\"Female Outcomes After Speeding\")\nprint(female_and_speeding.stop_outcome.value_counts(normalize=True))\nprint(\"\\nMale Outcomes After Speeding\")\nprint(male_and_speeding.stop_outcome.value_counts(normalize=True))","19bbab09":"print(df.search_conducted.dtype)\nprint(df.search_conducted.value_counts(normalize=True))\n\nprint(\"\\nPercentage of Searched Vehicles:\")\nprint(f'{df.search_conducted.mean() * 100:.2f}%')","1ea3693b":"print(\"\\nPercentage of Searched Vehicles (Female):\")\n\nprint(f\"{df[df.driver_gender == 'F'].search_conducted.mean() * 100:.2f}%\")\n\nprint(\"\\nPercentage of Searched Vehicles (Male):\")\n\nprint(f\"{df[df.driver_gender == 'M'].search_conducted.mean() * 100:.2f}%\")","c123b50a":"print(\"\\nSearched Vehicles by gender:\")\n\ndf.groupby('driver_gender').search_conducted.mean()","14826ef3":"print(df.groupby(['violation', 'driver_gender']).search_conducted.mean())","2195d3cf":"print(df.search_type.value_counts())\n\n# Check if 'search_type' contains the string 'Protective Frisk'\ndf['frisk'] = df.search_type.str.contains('Protective Frisk', na=False)\n\n# Take the sum of 'frisk'\nprint(df.frisk.sum())","152d02fa":"searched = df[df.search_conducted == True]\n\nprint(searched.frisk.mean())\n\n# Calculate the frisk rate for each gender\nprint(searched.groupby('driver_gender').frisk.mean())","9c9e2da7":"print(f\"Mean of Arrests: {df.is_arrested.mean():.3f}\")\nprint(\"Hourly Arrest Rates\")\nhourly_arrest_rate = df.groupby(df.index.hour).is_arrested.mean()\npp(hourly_arrest_rate)","4d9d72eb":"hourly_arrest_rate.plot()\n\n# Add the xlabel, ylabel, and title\nplt.xlabel('Hour')\nplt.ylabel('Arrest Rate')\nplt.title('Arrest Rate by Time of Day')\n\n# Display the plot\nplt.show()","01dfc50c":"annual_drug_rate = df.drugs_related_stop.resample(\"A\").mean()\n\nannual_drug_rate.plot()\nplt.xlabel('Year')\nplt.ylabel('Drug Found Rate')\nplt.title('Yearly Drug Related Stops')\nplt.show()","ec29d622":"annual_search_rate = df.search_conducted.resample('A').mean()\n\nannual = pd.concat([annual_drug_rate, annual_search_rate], axis=1)\n\nannual.plot(subplots=True)\nplt.xlabel('Year')\nplt.ylabel('Annual Rate')\nplt.title('Yearly Searchs and Drug Related Stops')\nplt.show()","fe2ad342":"table = pd.crosstab(df.driver_race, df.violation)\ntable","4fb241e2":"table = pd.crosstab(df.driver_race, df.violation, normalize=True)\ntable","37c8468d":"table.plot(kind='barh')\nplt.show()","84c4a479":"print(df.stop_duration.unique())\n\n# Create a dictionary that maps strings to integers\nmapping = {'0-15 Min': 8, '16-30 Min': 23, '30+ Min': 45}\n\n# Convert the 'stop_duration' strings to integers using the 'mapping'\ndf['stop_minutes'] =df.stop_duration.map(mapping)\nprint(df.stop_minutes.unique())","b09f58c7":"df.dropna(subset=['stop_minutes'], inplace=True)","58b9b406":"stop_length = df.groupby('violation_raw').stop_minutes.mean()\nstop_length.sort_values().plot(kind='barh')\n\nplt.xlabel('Approximate Duration in Minutes')\nplt.ylabel('Detailed Violation')\nplt.title(\"Stopping Duration by Violation\")\nplt.show()","f95b2b52":"The arrest rate has a significant spike overnight, and then dips in the early morning hours.","53934c5a":"The Proportions of Citations ( Ticket ) and Warning doesn't seem any different for different genders.","7ee48124":"## Creating a Datetime Index\nLet's combine the `stop_date` and `stop_time` columns to create a `datetime` column. In the datetime format the date and time are separated by a space.","ab6eeb5d":"* The `driver_age`goes from 15 to 88, so a `int8\/uint8` ( 1 byte of memory, range between -128\/127 or 0\/255 ) is sufficient.\n* The `driver_age_raw` are year values so a `int16\/float16` (2 bytes of memory, range between -32768 and 32767 or 0\/65535) is sufficient. \n\n[More info here](https:\/\/medium.com\/@vincentteyssier\/optimizing-the-size-of-a-pandas-dataframe-for-low-memory-environment-5f07db3d72e)","7beaa676":"The search rate is higher for males than for females for all types of specified violations, disproving our hypothesis, at least for this dataset.","5839a06e":"## Search Rate\n\nDuring a traffic stop, the police officer sometimes conducts a search of the vehicle. In this exercise, you'll calculate the percentage of all stops that result in a vehicle search, also known as the search rate.","0c8c570a":"# Adding some Visualizations\n## Calculating the hourly arrest rate\n\nWhen a police officer stops a driver, a small percentage of those stops ends in an arrest. This is known as the arrest rate. Let's check whether the arrest rate varies by time of day.\n\n    0 = midnight\n    12 = noon\n    23 = 11 PM\n","6bc04be3":"## Adding a second factor to the analysis\n\nEven though the search rate for males is much higher than for females, it's possible that the difference is mostly due to a second factor.\n\nFor example, you might hypothesize that the search rate varies by violation type, and the *difference in search rate between males and females is because they tend to commit different violations.*\n\nYou can test this hypothesis by examining the search rate for each combination of gender and violation. If the hypothesis was true, you would find that males and females are searched at about the same rate for each violation","155274f7":"## Filtering by multiple Conditions\nWhen filtering by multiple conditions, inside the brackets the conditions are enclosed by parenthesis and the logical operators are *C* like instead:\n* `&`: represents the `and` operation\n* `|`: represents the `or` operation","2a99a686":"Now that we have a datetime column, we can define it as the DataFrame's index. By doing this we can easily slice, subset and analyze the data by date and time.","4f434f77":"All the numbers for `Whites` are higher because there are a lot more stops of whites, probably because there are a lot more of them. We can't conclude much from this race difference, this plot was only to ilustrate the use of Frequency Table.","e534cb35":"By just defining the proper datatypes we went from `8.7MB` to `4.2MB` ","f1162f2e":"# 1. Preparing the data for analysis\n\n\nBefore beginning your analysis, it is critical that you first examine and clean the dataset, to make working with it a more efficient process. Let's practice fixing data types, handling missing values, and dropping columns and rows while learning about the Stanford Open Policing Project dataset.","f568e7d9":"[The Stanford Open Policing Project](https:\/\/openpolicing.stanford.edu\/)\n\nOn a typical day in the United States, police officers make more than 50,000 traffic stops. The project collects and standardize data on vehicle and pedestrian stops from law enforcement departments across the country. The current dataset is a subset comprising only the Rhode Island County. \n\nThe current analysis is based on the Course - [Analyzing Police Activity with Pandas](  https:\/\/campus.datacamp.com\/courses\/analyzing-police-activity-with-pandas)","8d35c21f":"About two-thirds of female traffic stops are for speeding, whereas for males is about half. This doesn't mean that females speed more often than males, however, since we didn't take into account the number of stops or drivers.","c7b6625c":"## Dropping Rows\nOne interesting analysis is to compare outcomes by gender, so the gender information might be critical and it makes sense to drop the rows missing the gender, since the number is small `5.8%`","33bbdc1b":"The method `df.isnull()` creates a dataframe of boolean values, where `True` is for missing values and `False`otherwise. Since in python `True == 1` and `False == 0` we can count the missing values by summing this dataframe of boolean values. This will return a series counting the missing values per column.","15e8488e":"## Plotting drug-related stops\n\nIn a small portion of traffic stops, drugs are found in the vehicle during a search.\n\nThe Boolean column drugs_related_stop indicates whether drugs were found during a given stop. \n\nLet's resample this column by year to see the trend","08377727":"A better way to do this is aggregate using the groupby method:","22aa638e":"## Counting Unique values\n * `value_counts()`: returns a Series with the distint unique values for each column","779a5c10":"That's it for now. It's just a little exploration of data using just pandas. ","5b1efa77":"The rate of drug-related stops nearly double in 10 years - 2005-2015\n\nLet's see if this increase is correlated with the search rate.","67d1f0d3":"## Dropping Columns\n\n1. The column `county_name` is exclusively missing values, maybe because this is a subset from the original dataset comprising one specific state `Rhode Island`, so this column has no information and we can safely drop it.","aa29560b":"## Filtering by Gender","5e95ae0b":"After eliminating the records with `NULL` values in `driver_gender`,  we pretty much eliminated almost all `NULL` values in the dataset, let's fill the remaining `NULL` values in `driver_age` with the average age so we can properly define the datatypes.","eef16a8f":"The `pandas_profiling` report did the most heavy lifting for us, but let's try to replicate from scratch some of it as an exercise.","9a6c93da":"## How long might you be stopped for a violation?\nThe `stop_duration` column tells you approximatelly how long the driver was detained by the officer. Since the durations are stored as strings and it's an approximation, we must map to an estimated number to get any useful insight.\n\n<ul>\n<li>Convert <code>'0-15 Min'<\/code> to <code>8<\/code><\/li> \n<li>Convert <code>'16-30 Min'<\/code> to <code>23<\/code><\/li>\n<li>Convert <code>'30+ Min'<\/code> to <code>45<\/code><\/li>\n<\/ul>","8943c859":"The [pandas_profiling](https:\/\/pandas-profiling.github.io\/pandas-profiling\/docs\/) eliminates a lot of the pain in EDA. ","14b3f720":"There are 2 single records, '2' and '1', which are not clear what they mean, so we don't map them. This turns them into `nan` so we can safely discard.  ","52f8ba37":"# Analysing Outcomes by Gender","f97b0c96":"## Protective Frisks\nDuring a vehicle search, the police officer may pat down the driver to check if they have a weapon. This is known as a \"protective frisk.\"","3ae92d6d":"Actually the `search_conducted` appears to be inversally correlated, contrary to our hypotheses","6b3c49b7":"* `object`: Python objects  - Strings, Lists, etc\n    * Large Space and limited operations, avoid whenever possible\n* `bool`: `True` and `False` values. \n    * 1 byte - Logical and Mathematical Operations\n* `int, float`\n    * enables math operations\n* `datetime`\n    * enables different date attributes such as day, month, year \n    * methods to slice and resample, not possible with strings\n* `category`\n    * uses less memory and runs faster\n","c7203e2f":"## Proper Datatypes\nThe `pandas_profiling` also gaves us everything we need to define the correct datatypes.\nPandas infer datatypes upon loading but usually is not very efficient, datatypes are important because it affects which operations can be performed on it and usually we can be way more efficient (i.e. less memory and faster loading types) if we properly set the datatypes. The current dataframe occupies `8.7MB` in memory, let's see how we can lower it only by defining the correct datatypes.","4df3322f":"## Speeding outcomes\n\nWhen a driver is pulled over for speeding, many people believe that gender has an impact on whether the driver will receive a ticket or a warning. ","eb3a8611":"## Violations by Race\n*  * **Frequency Table** It shows how many times each combination of values occurs","736a1ef3":"For the remaining categorical datatypes:","e76b6f7d":"Males are frisked more often than females, though we can't conclude that this difference is caused by the driver's gender."}}