{"cell_type":{"e22ae00c":"code","799b221a":"code","b0c16a18":"code","6e5dc91d":"code","4610bc54":"code","766d220a":"code","c0505cf9":"code","a2c621fd":"code","672d7caf":"code","dd83fb56":"code","7f85d84b":"code","23f3d372":"code","d335ee5c":"code","122f4493":"code","6760a648":"code","6bb4144a":"code","e0fd907e":"code","90129b84":"code","aa862b06":"code","1d09aff6":"code","a86c923d":"code","8b16f61c":"code","d657305f":"code","b206edbe":"code","4e13cf92":"code","eb294c6b":"code","81fb1cc7":"code","33e19d7b":"code","a5150d36":"code","138bfb70":"code","9a405c49":"code","fa69bf1d":"code","00dbafcc":"code","09c39a16":"code","b00fbb97":"markdown","caedb995":"markdown","13a53566":"markdown","03828429":"markdown","0defe720":"markdown","d8f0e3dc":"markdown"},"source":{"e22ae00c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","799b221a":"pas = pd.read_csv('\/kaggle\/input\/russian-passenger-air-service-20072020\/russian_passenger_air_service_2.csv')\ncar = pd.read_csv('\/kaggle\/input\/russian-passenger-air-service-20072020\/russian_air_service_CARGO_AND_PARCELS.csv')","b0c16a18":"pas.head()","6e5dc91d":"pas.sort_values(by='Whole year', ascending=False)","4610bc54":"car.head()","766d220a":"pas['Whole Year'] = pas.iloc[:, 1:-2].sum(axis=1)","c0505cf9":"# In 2019\ng=pas[pas.Year == 2019].sort_values(by='Whole year', ascending=False)[:10].plot.bar(x='Airport name', y='Whole year', rot=45, figsize=(15,5))","a2c621fd":"airports = pas[pas.Year == 2019].sort_values(by='Whole year', ascending=False)[:10][['Airport name', 'Airport coordinates']]\nairports = airports.drop_duplicates()\nairports = airports.reset_index()","672d7caf":"airports","dd83fb56":"# Keep one Airpor in Moscow\nairports = airports.drop(airports.index[[1,2]])","7f85d84b":"# Remove parenthis\n\nairports['Airport name'] = airports['Airport name'].str.split('(').str[0]","23f3d372":"# Coordonates\nairports['x'] = airports['Airport coordinates'].str.split('\\'').str[1]\nairports['y'] = airports['Airport coordinates'].str.split('\\'').str[3]","d335ee5c":"# Top 10 most used airports\n\nfrom mpl_toolkits.basemap import Basemap\n\nfig = plt.figure(figsize=(12, 10))\n\nm = Basemap(llcrnrlon=10.,llcrnrlat=40.,urcrnrlon=200.,urcrnrlat=80.,\\\n            rsphere=(6378137.00,6356752.3142),\\\n            resolution='l',projection='merc')\n\nfor i, row in airports.iterrows():\n    x, y= m(float(row['x']),float(row['y']))\n    plt.plot(x, y, 'ok', markersize=5, color=\"red\")\n    plt.text(x, y, row['Airport name'], fontsize=10)\n    \nm.shadedrelief()\nm.drawcountries(color=\"red\")","122f4493":"year_evo = pas.groupby('Year')['Whole Year'].mean().reset_index()","6760a648":"# In 2019\nyear_evo.plot.bar(x='Year', y='Whole Year', rot=45, figsize=(15,5))","6bb4144a":"# 2014 : Olympics in Sotchi\n# 2018 : FIFA World Cup","e0fd907e":"evo = pas.iloc[:,1:14]","90129b84":"months = evo.columns[1:].tolist()","aa862b06":"# Transform dataframe to Year, month, value\nevo = evo.melt(id_vars =  'Year', value_vars = months)\nevo.columns = ['Year', 'Month', 'Passengers']","1d09aff6":"evo = evo.groupby(['Year', 'Month']).sum().reset_index()","a86c923d":"evo.head()","8b16f61c":"plt.figure(figsize = (20,8))\n\nsns.set(style=\"darkgrid\")\nsns.lineplot( x = range(0,len(evo)), y = 'Passengers', data = evo)","d657305f":"months_evo = evo[['Month', 'Passengers']]\nmonths_evo = months_evo.groupby('Month').mean().reset_index()\nmonths_evo['Month'] = pd.Categorical(months_evo['Month'], categories=months, ordered=True)\nmonths_evo = months_evo.sort_values(by='Month')","b206edbe":"plt.figure(figsize = (15,8))\n\ng=sns.barplot( x = 'Month', y = 'Passengers', data = months_evo)","4e13cf92":"# Less airplanes in December \/ Peak in summer : July, August","eb294c6b":"august = evo[(evo.Month == 'August') & (evo.Year != 2020)]","81fb1cc7":"sns.set(style=\"darkgrid\")\nsns.lmplot( x = 'Year', y = 'Passengers', data = august, height=8)","33e19d7b":"X = august['Year'].values.reshape(-1, 1)  # values converts it into a numpy array\nY = august['Passengers'].values.reshape(-1, 1)  # values converts it into a numpy array","a5150d36":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X,Y)","138bfb70":"X_pred = np.array(2020).reshape(-1, 1)","9a405c49":"# Predict 2020\nY_pred = model.predict(X_pred)","fa69bf1d":"print(\"Peak traffic in 2020 if no COVID : %d passengers\" %Y_pred[0][0] )","00dbafcc":"august.loc[-1] = [2020, 'August', Y_pred[0][0]]","09c39a16":"plt.figure(figsize = (15,8))\n\nsns.set(style=\"darkgrid\")\nsns.lineplot( x = 'Year', y = 'Passengers', data = august)","b00fbb97":"# Data Exploration","caedb995":"### Top 10 Airports on map","13a53566":"### Evolution through months and years","03828429":"# Predicting Peak Passengers in 2020 (No COVID)","0defe720":"### Per month","d8f0e3dc":"### Year evolution"}}