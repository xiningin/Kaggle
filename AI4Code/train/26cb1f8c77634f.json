{"cell_type":{"3978c557":"code","dd55981d":"code","b59df538":"code","3d6721d7":"code","bac0c134":"code","328a6f47":"code","2c4c62ca":"code","5f8e1d47":"code","9eaf84a4":"code","6d0776fb":"code","449a33dc":"code","35717579":"code","c2ebe65f":"code","e31084d5":"code","0029ed18":"code","673c4984":"code","1888158e":"markdown","a16ac1a0":"markdown","38b65789":"markdown"},"source":{"3978c557":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd55981d":"csv_string = \"\"\"\nphoto.jpg, Warsaw, 2013-09-05 14:08:15\njohn.png, London, 2015-06-20 15:13:22\nmyFriends.png, Warsaw, 2013-09-05 14:07:13\nEiffel.jpg, Paris, 2015-07-23 08:03:02\npisatower.jpg, Paris, 2015-07-22 23:59:59\nBOB.jpg, London, 2015-08-05 00:02:03\nnotredame.png, Paris, 2015-09-01 12:00:00\nme.jpg, Warsaw, 2013-09-06 15:40:22\na.png, Warsaw, 2016-02-13 13:33:50\nb.jpg, Warsaw, 2016-01-02 15:12:22\nc.jpg, Warsaw, 2016-01-02 14:34:30\nd.jpg, Warsaw, 2016-01-02 15:15:01\ne.png, Warsaw, 2016-01-02 09:49:09\nf.png, Warsaw, 2016-01-02 10:55:32\ng.jpg, Warsaw, 2016-02-29 22:13:11\n\"\"\"","b59df538":"import sys\nif sys.version_info[0] < 3: \n    from StringIO import StringIO\nelse:\n    from io import StringIO","3d6721d7":"S = StringIO(csv_string)","bac0c134":"df = pd.read_csv(S, names=['filename','City','DateTimes'])","328a6f47":"df.head()","2c4c62ca":"df_sorted = df.sort_values(['City','DateTimes'],ascending=['True','True'])","5f8e1d47":"df_sorted","9eaf84a4":"gb = df.groupby([\"City\"])[\"DateTimes\"].count()","6d0776fb":"gb","449a33dc":"type(gb)","35717579":"#This function renames a filename adjusting it's length with zeros\ndef rename_filename(filename, number,length):\n    # TODO ajustar longitud de nombre\n    Afname = filename.split(\".\")\n    flg = length-len(Afname[0])\n    Afname[0] = Afname[0]+str(number).zfill(flg)\n    return Afname[0]+\".\"+Afname[1]\nprint(rename_filename(\"the_first_picture.jpg\",2,20))","c2ebe65f":"c=1\nlength = 0\nfor city,idx in gb.items(): #We rename grouping by city\n    tmpdf =  df[df[\"City\"]==city]\n    #know how many rows are to adjust number string length for each city and the maximum length\n    rows = tmpdf.shape[0]\n    maxl = tmpdf.loc[:,\"filename\"].map(len).max() #the biggest length among filenames\n    for idx,row in tmpdf.iterrows():\n        df.loc[idx,[\"filename\"]] = rename_filename(row['filename'],c,maxl)\n        c = c + 1\n    c=1","e31084d5":"df","0029ed18":"O = StringIO(\"\")\ndf.to_csv(O)","673c4984":"print(O.getvalue())","1888158e":"Solution must be given in a string","a16ac1a0":"# Pandas Exercise\nGiven a string with csv rows create a pandas dataframe, sort by City and rename each filename, file names belonging to a city has to be renamed as city01.jpg city02.jpg, etc with their original extension and file name with same length. Fill with zeros the smallest names to adjust length of filename.\nIf you are starting to learn pandas I strongly recomend to create an empty notebook, copy the csv string defined in the csv_string variable, and try to find the solution for yourself.","38b65789":"If you want to learn pandas and practice solving this exercise, you should make a copy of this notebook, delete all next code cells, and try to solve it for your self."}}