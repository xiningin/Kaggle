{"cell_type":{"5e18e0e5":"code","49b3429b":"code","245badc4":"code","9bdecae7":"code","975fbb06":"code","3ca1262f":"code","bb1eb701":"code","0bb830db":"code","ce232312":"code","6c9d1a6c":"code","46eddb89":"code","5be2fd7e":"code","053f1094":"code","11cce62b":"code","7b960d08":"code","7f21308c":"code","fc64c938":"code","464f0a89":"code","7bf00764":"code","4399f19e":"code","88752fe0":"code","038ec646":"code","bbcd94ec":"code","c9d64df9":"code","514851b8":"code","16f0846d":"code","991cdf99":"code","a2da28ce":"code","23e93dc8":"code","6d4a9b9e":"code","e195553c":"code","75caa7fc":"code","0c94aaab":"code","7f889aee":"code","d1b49912":"code","d694cb88":"code","3b76e972":"code","38672844":"code","ed7b71b3":"code","5463efdb":"code","49f84d70":"code","d4583848":"code","7437a014":"code","4a43db8a":"code","fc4491f0":"code","b844562d":"code","f4b55e22":"code","780e1118":"code","7c5d35fa":"code","cd087fa5":"code","329abb57":"code","e49ae951":"code","02412bca":"code","d1209ff7":"code","b2a53566":"code","b7e504c5":"code","5d1cdd0c":"code","ab22a938":"code","ec52a811":"code","c95d9cf0":"code","a58ec71a":"code","45dd7ac5":"code","f66af4ea":"code","082dd5a5":"code","3fc5df48":"code","13359794":"code","e8f4d057":"code","c7c2e558":"code","6c8a9e4c":"code","13119417":"code","02e18d45":"code","58851d49":"code","0fc12ded":"code","86df25c6":"code","fd0d3f8e":"code","96e7245b":"code","3441169a":"code","e3f38f5e":"code","ff9413c7":"code","b108cac8":"code","26733b3f":"code","8aff13ad":"code","f55c191a":"code","b89e72bb":"code","fed74ee3":"code","8d55b961":"code","11babd92":"code","07730cdf":"code","c03fe352":"code","3d916848":"code","4a656c4c":"code","7090b69f":"markdown","2012a83a":"markdown","99293345":"markdown","eb2a07f8":"markdown","356a1a9d":"markdown","08f55309":"markdown","a1350d0d":"markdown","271d87ef":"markdown","d60e0857":"markdown"},"source":{"5e18e0e5":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import cross_val_score\n\nimport datetime\n\n# Created a year variable that I use later on for columns involving dates\ndate = datetime.date.today()\nyear = date.strftime(\"%Y\")\n\n# Set it so I would see all columns when I looked at DFs\npd.set_option('max_columns', None)","49b3429b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ntest = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv', index_col=0)\ntraining = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv', index_col=0)\n\ntraining['train_test'] = 1\ntest['train_test'] = 0\ntest['SalePrice'] = np.NaN\nall_data = pd.concat([training,test])\nall_data.columns","245badc4":"def understanding(df):\n    print(df.info())\n    print(df.describe())\n    for col in df.columns:\n        if df[col].dtype == 'int64' or df[col].dtype == 'float64':\n            plt.hist(df[col])\n            plt.title(col)\n            plt.show()\n            plt.clf()\n        elif df[col].dtype == 'object':\n            sns.barplot(df[col].value_counts().index,df[col].value_counts()).set_title(col)\n            plt.show()\n            \ndef heat(df):\n    num_columns = []\n    for col in df.columns:\n        if df[col].dtype == 'int64' or df[col].dtype == 'float64':\n            num_columns.append(col)\n    sns.heatmap(df[num_columns].corr(), annot=True)\n    \ndef correlation(dataset, threshold):\n    col_corr = set()  # Set of all the names of correlated columns\n    corr_matrix = dataset.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if abs(corr_matrix.iloc[i, j]) > threshold: # we are interested in absolute coeff value\n                colname = corr_matrix.columns[i]  # getting the name of column\n                col_corr.add(colname)\n    return col_corr","9bdecae7":"training.head()","975fbb06":"print(training.columns)","3ca1262f":"training.info()","bb1eb701":"understanding(training)","0bb830db":"heat(training)\n","ce232312":"corr = correlation(training, .8)\ncorr_array = []\nfor col in corr:\n    corr_array.append(col)\ncorr_array","6c9d1a6c":"print(training.MSSubClass.value_counts())\n\nmssub_others = [190, 85, 75, 45, 180, 40]\n\ntraining.MSSubClass = training.MSSubClass.apply(lambda x: str('other') if x in mssub_others else str(x))\n\nprint(training.MSSubClass.value_counts())","46eddb89":"\nprint(training.MSZoning.value_counts())","5be2fd7e":"mszoning_others = ['FV', 'RH', 'C (all)']\ntraining.MSZoning = training.MSZoning.apply(lambda x: str('Other') if x in mszoning_others else str(x))\nprint(training.MSZoning.value_counts())","053f1094":"print(training.LotFrontage.value_counts())\nprint(training.LotFrontage.hist())","11cce62b":"training.LotArea.hist()","7b960d08":"print(training.Street.value_counts())\ntraining['Street_Pave'] = training.Street.apply(lambda x: 1 if x == 'Pave' else 0)\ntraining.Street_Pave.value_counts()","7f21308c":"print(training.Alley.value_counts())\ntraining.Alley = training.Alley.apply(lambda x: 1 if type(x) == str else 0)\ntraining.Alley.value_counts()","fc64c938":"training.LotShape.value_counts()\nlotshape_others = ['IR2', 'IR3']\ntraining.LotShape = training.LotShape.apply(lambda x: 'Other' if x in lotshape_others else x)\ntraining.LotShape.value_counts()","464f0a89":"training.LandContour.value_counts()\ntraining['LandContour_Flat'] = training.LandContour.apply(lambda x: 1 if x == 'Lvl' else 0)\ntraining.LandContour_Flat.value_counts()","7bf00764":"training.Utilities.value_counts()","4399f19e":"training.LotConfig.value_counts()\ntraining.LotConfig = training.LotConfig.apply(lambda x: 'Other' if x == 'FR2' or x == 'FR3' else x)\ntraining.LotConfig.value_counts()","88752fe0":"training.LandSlope.value_counts()\ntraining['LandSlope_Gentle'] = training.LandSlope.apply(lambda x: 1 if x == 'Gtl' else 0)\ntraining.LandSlope_Gentle.value_counts()","038ec646":"training.Neighborhood.value_counts()","bbcd94ec":"training.Condition1.value_counts()\npos_condition = ['Feedr', 'Artery', 'PosN', 'PosA']\nrr_condition = ['RRAe', 'RRAn', 'RRNn', 'RRNe']\ntraining.Condition1 = training.Condition1.apply(lambda x: 'Pos' if x in pos_condition else x)\ntraining.Condition1 = training.Condition1.apply(lambda x: 'RR' if x in rr_condition else x)\ntraining.Condition1.value_counts()","c9d64df9":"training.Condition2.value_counts()\npos_condition = ['Feedr', 'Artery', 'PosN', 'PosA']\nrr_condition = ['RRAe', 'RRAn', 'RRNn', 'RRNe']\ntraining.Condition2 = training.Condition2.apply(lambda x: 'Pos' if x in pos_condition else x)\ntraining.Condition2 = training.Condition2.apply(lambda x: 'RR' if x in rr_condition else x)\ntraining.Condition2.value_counts()","514851b8":"training.BldgType.value_counts()","16f0846d":"training.HouseStyle.value_counts()","991cdf99":"training.OverallQual.value_counts()","a2da28ce":"training.OverallCond.value_counts()","23e93dc8":"print(training.YearBuilt.value_counts())\n\ndate = datetime.date.today()\nyear = int(date.strftime(\"%Y\"))\n\ntraining['Year_Old'] = training.YearBuilt.apply(lambda x: year - x)\ntraining.Year_Old.value_counts()\ntraining.Year_Old.hist()","6d4a9b9e":"print(training.YearRemodAdd.value_counts())\ntraining['Remod_Age'] = training.YearRemodAdd.apply(lambda x: year - x)\nprint(training.Remod_Age.value_counts())\ntraining.Remod_Age.hist()","e195553c":"training.RoofStyle.value_counts()\ntraining['Gable_Roof'] = training.RoofStyle.apply(lambda x: 1 if x == 'Gable' else 0)\ntraining.Gable_Roof.value_counts()","75caa7fc":"training.RoofMatl.value_counts()\ntraining['Comp_Roof'] = training.RoofMatl.apply(lambda x: 1 if x == 'CompShg' else 0)\ntraining.Comp_Roof.value_counts()","0c94aaab":"training.Exterior1st.value_counts()\next1_others = ['WdShing','Stucco', 'AsbShng', 'BrkComm', 'Stone', 'AsphShn', 'ImStucc', 'CBlock']\ntraining.Exterior1st = training.Exterior1st.apply(lambda x: 'Other' if x in ext1_others else x)\ntraining.Exterior1st.value_counts()","7f889aee":"training.Exterior2nd.value_counts()\next2 = ['BrkFace', 'Other', 'Brk Cmn']\next2_others = ext1_others + ext2\ntraining.Exterior2nd = training.Exterior2nd.apply(lambda x: 'Other' if x in ext2_others else x)\ntraining.Exterior2nd.value_counts()\n","d1b49912":"print(training.MasVnrType.value_counts())\nprint(training.MasVnrType.isnull().sum().sum())\ntraining.MasVnrType.fillna('None', inplace=True)\nprint(training.MasVnrType.value_counts())","d694cb88":"training.MasVnrArea.value_counts()\nprint(training.MasVnrArea.isnull().sum().sum())\ntraining.MasVnrArea.fillna(0, inplace=True)\nprint(training.MasVnrArea.isnull().sum().sum())","3b76e972":"#Ex\tExcellent (100+ inches)\t\n#Gd\tGood (90-99 inches)\n#TA\tTypical (80-89 inches)\n#Fa\tFair (70-79 inches)\n#Po\tPoor (<70 inches\n#NA\tNo Basement\n\ntraining.ExterQual.value_counts()\nex_po = ['NA', 'Po', 'Fa', 'TA', 'Gd', 'Ex']\nex_po_ord = OrdinalEncoder(categories=[ex_po])\ntraining.ExterQual = ex_po_ord.fit_transform(training[['ExterQual']])\n\n\ntraining.ExterQual.value_counts()\n","38672844":"training.ExterCond.value_counts()\ntraining.ExterCond = ex_po_ord.fit_transform(training[['ExterCond']])\ntraining.ExterCond.value_counts()","ed7b71b3":"training.Foundation.value_counts()\nfound_others = ['Slab', 'Stone', 'Wood']\n\ntraining.Foundation = training.Foundation.apply(lambda x: 'Other' if x in found_others else x)\ntraining.Foundation.value_counts()","5463efdb":"training.BsmtQual.value_counts()\ntraining.BsmtQual.fillna('NA', inplace=True)\ntraining.BsmtQual.value_counts()\n\ntraining.BsmtQual = ex_po_ord.fit_transform(training[['BsmtQual']])\ntraining.BsmtQual.value_counts()\n","49f84d70":"print(training.BsmtCond.value_counts())\ntraining.BsmtCond.fillna('NA', inplace=True)\nprint(training.BsmtCond.value_counts())\n\ntraining.BsmtCond = ex_po_ord.fit_transform(training[['BsmtCond']])\ntraining.BsmtCond.value_counts()","d4583848":"print(training.BsmtExposure.value_counts())\ntraining.BsmtExposure.fillna('NA', inplace=True)\nprint(training.BsmtExposure.value_counts())\n\nbs_ex = ['NA', 'No', 'Mn', 'Av', 'Gd']\nbs_ex_ord = OrdinalEncoder(categories=[bs_ex])\ntraining.BsmtExposure = bs_ex_ord.fit_transform(training[['BsmtExposure']])\ntraining.BsmtExposure.value_counts()","7437a014":"print(training.BsmtFinType1.value_counts())\ntraining.BsmtFinType1.fillna('NA', inplace=True)\nprint(training.BsmtFinType1.value_counts())\n\nfin_type = ['NA', 'Unf', 'LwQ', 'Rec', 'BLQ', 'ALQ', 'GLQ']\nfin_type_enc = OrdinalEncoder(categories=[fin_type])\ntraining.BsmtFinType1 = fin_type_enc.fit_transform(training[['BsmtFinType1']])\ntraining.BsmtFinType1.value_counts()","4a43db8a":"sns.boxplot(data=training, y='BsmtFinSF1')","fc4491f0":"print(training.BsmtFinType2.value_counts())\ntraining.BsmtFinType2.fillna('NA', inplace=True)\nprint(training.BsmtFinType2.value_counts())\n\ntraining.BsmtFinType2 = fin_type_enc.fit_transform(training[['BsmtFinType2']])\ntraining.BsmtFinType2.value_counts()","b844562d":"sns.boxplot(y = training.BsmtFinSF2)","f4b55e22":"sns.boxplot(y=training.BsmtUnfSF)","780e1118":"sns.boxplot(y=training.TotalBsmtSF)","7c5d35fa":"training.Heating.value_counts()\ngas = ['GasA', 'GasW']\n\ntraining['Gas'] = training.Heating.apply(lambda x: 1 if x in gas else 0)\ntraining.Gas.value_counts()","cd087fa5":"training.HeatingQC.value_counts()\ntraining.HeatingQC = ex_po_ord.fit_transform(training[['HeatingQC']])\ntraining.HeatingQC.value_counts()","329abb57":"training.CentralAir.value_counts()\ntraining.CentralAir = training.CentralAir.apply(lambda x: 1 if x =='Y' else 0)\ntraining.CentralAir.value_counts()","e49ae951":"sns.boxplot(y=training['2ndFlrSF'])","02412bca":"print(training.Electrical.value_counts())\nprint(training.Electrical.isnull().sum().sum())\ntraining.Electrical.fillna('SBrkr', inplace=True)\n\nelec_others = ['FuseF', 'FuseP', 'Mix']\ntraining.Electrical = training.Electrical.apply(lambda x: 'Other' if x in elec_others else x)\ntraining.Electrical.value_counts()\n","d1209ff7":"sns.boxplot(y=training.LowQualFinSF)","b2a53566":"sns.boxplot(y=training.GrLivArea)","b7e504c5":"training.BsmtFullBath.value_counts()","5d1cdd0c":"training.BsmtHalfBath.value_counts()","ab22a938":"training.FullBath.value_counts()","ec52a811":"training.HalfBath.value_counts()","c95d9cf0":"training.BedroomAbvGr.value_counts()","a58ec71a":"training.KitchenAbvGr.value_counts()","45dd7ac5":"print(training.KitchenQual.value_counts())\ntraining.KitchenQual = ex_po_ord.fit_transform(training[['KitchenQual']])\ntraining.KitchenQual.value_counts()","f66af4ea":"#       Typ\tTypical Functionality\n#       Min1\tMinor Deductions 1\n#       Min2\tMinor Deductions 2\n#       Mod\tModerate Deductions\n#       Maj1\tMajor Deductions 1\n#       Maj2\tMajor Deductions 2\n#       Sev\tSeverely Damaged\n#       Sal\tSalvage only\nprint(training.Functional.value_counts())\nfunc = ['Sal', 'Sev', 'Maj2', 'Maj1', 'Mod', 'Min2', 'Min1', 'Typ']\nfunc_ord = OrdinalEncoder(categories=[func])\n\ntraining.Functional = func_ord.fit_transform(training[['Functional']])\ntraining.Functional.value_counts()\n","082dd5a5":"training.Fireplaces.value_counts()","3fc5df48":"print(training.FireplaceQu.value_counts())\ntraining.FireplaceQu.fillna('NA', inplace=True)\nprint(training.FireplaceQu.value_counts())\n\ntraining.FireplaceQu = ex_po_ord.fit_transform(training[['FireplaceQu']])\ntraining.FireplaceQu.value_counts()","13359794":"training.GarageType.value_counts()\ntraining.GarageType.fillna('None', inplace=True)\ntraining.GarageType.value_counts()\ngarage_others = ['Basement', 'CarPort', '2Types', 'Basment']\n\ntraining.GarageType = training.GarageType.apply(lambda x: 'Other' if x in garage_others else x)\ntraining.GarageType.value_counts()","e8f4d057":"training.GarageFinish.value_counts()\ntraining.GarageFinish.fillna('None', inplace=True)\ntraining.GarageFinish.value_counts()","c7c2e558":"training.GarageCars.value_counts()","6c8a9e4c":"training.GarageQual.value_counts()\ntraining.GarageQual.fillna('NA', inplace=True)\ntraining.GarageQual = ex_po_ord.fit_transform(training[['GarageQual']])\ntraining.GarageQual.value_counts()","13119417":"training.GarageCond.value_counts()\ntraining.GarageCond.fillna('NA', inplace=True)\ntraining.GarageCond = ex_po_ord.fit_transform(training[['GarageCond']])\ntraining.GarageCond.value_counts()","02e18d45":"training.PavedDrive.value_counts()\npave = ['N', 'P', 'Y']\npave_ord = OrdinalEncoder(categories=[pave])\n\ntraining.PavedDrive = pave_ord.fit_transform(training[['PavedDrive']])\ntraining.PavedDrive.value_counts()","58851d49":"sns.boxplot(y=training.WoodDeckSF)","0fc12ded":"sns.boxplot(y=training.OpenPorchSF)","86df25c6":"sns.boxplot(y=training.EnclosedPorch)","fd0d3f8e":"sns.boxplot(y=training['3SsnPorch'])","96e7245b":"sns.boxplot(y=training.ScreenPorch)","3441169a":"sns.boxplot(y=training.PoolArea)","e3f38f5e":"training.PoolQC.value_counts()\ntraining.PoolQC.fillna('NA', inplace=True)\ntraining.PoolQC = ex_po_ord.fit_transform(training[['PoolQC']])\ntraining.PoolQC.value_counts()","ff9413c7":"#       GdPrv\tGood Privacy\n#       MnPrv\tMinimum Privacy\n#       GdWo\tGood Wood\n#       MnWw\tMinimum Wood\/Wire\n#       NA\tNo Fence\ntraining.Fence.value_counts()\nfence = ['NA', 'MnWw', 'GdWo', 'MnPrv', 'GdPrv']\nfence_ord = OrdinalEncoder(categories=[fence])\n\ntraining.Fence.fillna('NA', inplace=True)\ntraining.Fence = fence_ord.fit_transform(training[['Fence']])\ntraining.Fence.value_counts()\n","b108cac8":"training.MiscFeature.value_counts()\ntraining.MiscFeature.fillna(\"NA\", inplace=True)\ntraining.MiscFeature = training.MiscFeature.apply(lambda x: 0 if x == 'NA' else 1)\ntraining.MiscFeature.value_counts()","26733b3f":"sns.boxplot(y=training.MiscVal)","8aff13ad":"training.MoSold.value_counts()\n","f55c191a":"training.YrSold.value_counts()\ntraining['SaleAge'] = training.YrSold.apply(lambda x: year - x)\ntraining.SaleAge.value_counts()","b89e72bb":"training.SaleType.value_counts()\nsale_common = ['WD', 'New', 'COD']\ntraining.SaleType = training.SaleType.apply(lambda x: x if x in sale_common else 'Other')\ntraining.SaleType.value_counts()","fed74ee3":"training.SaleCondition.value_counts()\ncond_others = ['Family', 'Alloca', 'AdjLand']\ntraining.SaleCondition = training.SaleCondition.apply(lambda x: 'Other' if x in cond_others else x)\ntraining.SaleCondition.value_counts()","8d55b961":"# Filling null values\nall_data.MasVnrType.fillna('None', inplace=True)\nall_data.MasVnrArea.fillna(0, inplace=True)\nall_data.BsmtCond.fillna('NA', inplace=True)\nall_data.BsmtQual.fillna('NA', inplace=True)\nall_data.BsmtExposure.fillna('NA', inplace=True)\nall_data.BsmtFinType1.fillna('NA', inplace=True)\nall_data.BsmtFinSF1.fillna(0, inplace=True)\nall_data.BsmtFinType2.fillna('NA', inplace=True)\nall_data.BsmtFinSF2.fillna(0, inplace=True)\nall_data.BsmtUnfSF.fillna(0, inplace=True)\nall_data.TotalBsmtSF.fillna(0, inplace=True)\nall_data.BsmtFullBath.fillna(0, inplace=True)\nall_data.BsmtHalfBath.fillna(0, inplace=True)\nall_data.Electrical.fillna('SBrkr', inplace=True)\nall_data.GarageType.fillna('None', inplace=True)\nall_data.GarageFinish.fillna('None', inplace=True)\nall_data.GarageQual.fillna('NA', inplace=True)\nall_data.GarageCond.fillna('NA', inplace=True)\nall_data.GarageCars.fillna(0, inplace=True)\nall_data.PoolQC.fillna('NA', inplace=True)\nall_data.Fence.fillna('NA', inplace=True)\nall_data.MiscFeature.fillna(\"NA\", inplace=True)\nall_data.KitchenQual.fillna('TA', inplace=True)\nall_data.Functional.fillna('Typ', inplace=True)\nall_data.FireplaceQu.fillna('NA', inplace=True)\nall_data.LotFrontage.fillna(training.LotFrontage.median(), inplace=True)\nall_data.Exterior1st.fillna('Other', inplace=True)\nall_data.Exterior2nd.fillna('Other', inplace=True)\n\n\n# Transforming columns\nall_data.MSSubClass = all_data.MSSubClass.apply(lambda x: str('other') if x in mssub_others else str(x))\nall_data.MSZoning = all_data.MSZoning.apply(lambda x: str('Other') if x in mszoning_others else str(x))\nall_data.LotShape = all_data.LotShape.apply(lambda x: 'Other' if x in lotshape_others else x)\nall_data.Alley = all_data.Alley.apply(lambda x: 1 if type(x) == str else 0)\nall_data.LotConfig = all_data.LotConfig.apply(lambda x: 'Other' if x == 'FR2' or x == 'FR3' else x)\nall_data.Condition1 = all_data.Condition1.apply(lambda x: 'Pos' if x in pos_condition else x)\nall_data.Condition1 = all_data.Condition1.apply(lambda x: 'RR' if x in rr_condition else x)\nall_data.Condition2 = all_data.Condition2.apply(lambda x: 'Pos' if x in pos_condition else x)\nall_data.Condition2 = all_data.Condition2.apply(lambda x: 'RR' if x in rr_condition else x)\nall_data.Exterior1st = all_data.Exterior1st.apply(lambda x: 'Other' if x in ext1_others else x)\nall_data.Exterior2nd = all_data.Exterior2nd.apply(lambda x: 'Other' if x in ext2_others else x)\nall_data.Foundation = all_data.Foundation.apply(lambda x: 'Other' if x in found_others else x)\nall_data.CentralAir = all_data.CentralAir.apply(lambda x: 1 if x =='Y' else 0)\nall_data.Electrical = all_data.Electrical.apply(lambda x: 'Other' if x in elec_others else x)\nall_data.GarageType = all_data.GarageType.apply(lambda x: 'Other' if x in garage_others else x)\nall_data.MiscFeature = all_data.MiscFeature.apply(lambda x: 0 if x == 'NA' else 1)\nall_data.SaleType = all_data.SaleType.apply(lambda x: x if x in sale_common else 'Other')\nall_data.SaleType = all_data.SaleType.apply(lambda x: x if x in sale_common else 'Other')\n\n\n# Changing columns to Ordinal\nall_data.ExterQual = ex_po_ord.fit_transform(all_data[['ExterQual']])\nall_data.ExterCond = ex_po_ord.fit_transform(all_data[['ExterCond']])\nall_data.BsmtQual = ex_po_ord.fit_transform(all_data[['BsmtQual']])\nall_data.BsmtCond = ex_po_ord.fit_transform(all_data[['BsmtCond']])\nall_data.BsmtExposure = bs_ex_ord.fit_transform(all_data[['BsmtExposure']])\nall_data.BsmtFinType1 = fin_type_enc.fit_transform(all_data[['BsmtFinType1']])\nall_data.BsmtFinType2 = fin_type_enc.fit_transform(all_data[['BsmtFinType2']])\nall_data.HeatingQC = ex_po_ord.fit_transform(all_data[['HeatingQC']])\nall_data.KitchenQual = ex_po_ord.fit_transform(all_data[['KitchenQual']])\nall_data.Functional = func_ord.fit_transform(all_data[['Functional']])\nall_data.FireplaceQu = ex_po_ord.fit_transform(all_data[['FireplaceQu']])\nall_data.GarageQual = ex_po_ord.fit_transform(all_data[['GarageQual']])\nall_data.GarageCond = ex_po_ord.fit_transform(all_data[['GarageCond']])\nall_data.PoolQC = ex_po_ord.fit_transform(all_data[['PoolQC']])\nall_data.Fence = fence_ord.fit_transform(all_data[['Fence']])\n\n\n# Adding new columns with more descriptive names\nall_data['Street_Pave'] = all_data.Street.apply(lambda x: 1 if x == 'Pave' else 0)\nall_data['LandContour_Flat'] = all_data.LandContour.apply(lambda x: 1 if x == 'Lvl' else 0)\nall_data['LandSlope_Gentle'] = all_data.LandSlope.apply(lambda x: 1 if x == 'Gtl' else 0)\nall_data['Year_Old'] = all_data.YearBuilt.apply(lambda x: year - x)\nall_data['Year_Old'] = all_data.YearBuilt.apply(lambda x: year - x)\nall_data['Gable_Roof'] = all_data.RoofStyle.apply(lambda x: 1 if x == 'Gable' else 0)\nall_data['Comp_Roof'] = all_data.RoofMatl.apply(lambda x: 1 if x == 'CompShg' else 0)\nall_data['Gas'] = all_data.Heating.apply(lambda x: 1 if x in gas else 0)\nall_data['SaleAge'] = all_data.YrSold.apply(lambda x: year - x)\n\n# Dropping columns that were replaced above\nall_data.drop(['MiscFeature', 'Fence', 'PoolQC', 'Alley', 'YrSold', 'Heating', 'RoofMatl', 'RoofStyle', 'YearRemodAdd', 'YearBuilt', 'LandSlope', \n               'LandContour', 'Street', 'Utilities'], axis=1, inplace=True)\n\n# Dropping highly correlated columns\nall_data.drop(columns=corr_array, inplace=True)\n\n# One hot encoding\nall_dummies = pd.get_dummies(all_data)\nX_train = all_dummies[all_dummies.train_test == 1].drop(['train_test', 'SalePrice'], axis =1)\nX_test = all_dummies[all_dummies.train_test == 0].drop(['train_test', 'SalePrice'], axis =1)\n\ny_train = all_data[all_data.train_test == 1].SalePrice\n\n","11babd92":"xgb = XGBRegressor(random_state=0)\ncv = cross_val_score(xgb, X_train, y_train, cv=5)\ncv.mean()","07730cdf":"rf = RandomForestRegressor(random_state=0)\ncv = cross_val_score(rf, X_train, y_train, cv=5)\ncv.mean()","c03fe352":"from sklearn.model_selection import GridSearchCV\n\n\nparams = { 'max_depth': [3,6,10],\n           'learning_rate': [0.01, 0.05, 0.1],\n           'n_estimators': [100, 500, 1000],\n           'colsample_bytree': [0.3, 0.7]}\nxgbr = XGBRegressor(seed = 20)\nclf = GridSearchCV(estimator=xgbr, \n                    param_grid=params,\n                    scoring='neg_mean_squared_error', \n                    verbose=1)\nclf.fit(X_train, y_train)\nprint(\"Best parameters:\", clf.best_params_)\n","3d916848":"xgb_final = XGBRegressor(colsample_bytree = 0.3, learning_rate = 0.05, max_depth = 3, n_estimators = 1000)\ncv = cross_val_score(xgb_final, X_train, y_train, cv=5)\ncv.mean()","4a656c4c":"xgb_final.fit(X_train, y_train)\n\npred = xgb_final.predict(X_test)\n\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': pred})\noutput.to_csv('submission.csv', index=False)","7090b69f":"# Model Tuning","2012a83a":"# Train Test Split\n\nBefore I did the test train split, I applied the transformations to the DF that included all the data. I also ended up adding some to the null value section that occured in the test data and not the train data.\n\nDue to the large amount of 0s in the data, I did not end up normalizing it. Instead, I used models that would deal with it better.","99293345":"# Results\n","eb2a07f8":"# Modeling","356a1a9d":"# EDA","08f55309":"# Import Libraries\n\nHere I did a few things. \n\n- First, I of course imported the libraries I would need. \n- Secondly, this data includes columns that include years. I wanted to change these from the year it occurred to how many years ago to help scale the data. To help with this I created a variable to hold the current date.\n- Lastly, I changed an option in pandas to show all columns","a1350d0d":"# Housing Prices (top 1%)\n\n# Intro \n\nHello everyone,\n\nThis is my notebook for the Housing Prices Competition. A major focus for me was to practice my feature engineering. As a result, I went through each column individually to see what I could do to simplify or fill null values. I am sure I will learn ways to do this in bulk faster, but I wanted to just go through one by one to get familiar with the process. As a result I ended up using many different types of transformations including aggregates, ordinal encoding, and one hot encoding.\n\nI won't go through each column individually in my notes unless there is a call for it, so if you would like more explanation let me know!\n\n## Update\n\nI added model tuning to the notebook and was able to place in the top 1%! ","271d87ef":"# Create DataFrames\n\nHere I created the DataFrames that will be used. I made a version for just training, and testing as well as one that include all information. During the feature engineering I only worked with the training DF.","d60e0857":"# Feature Engineering"}}