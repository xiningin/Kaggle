{"cell_type":{"da561d53":"code","f963bb84":"code","46b5ec8f":"code","fc68dd21":"code","71d75dc7":"code","296379e8":"code","16dee119":"code","97911322":"code","877200b7":"code","5cbc8ebc":"code","0ffdb786":"code","56ee0d1b":"code","8ce33f1a":"code","7e4482f6":"code","8cf41ff2":"code","6feea1e1":"code","6350e4c1":"code","be54b9e2":"code","0ba05998":"code","720f7075":"code","73695f88":"code","cb3d624e":"code","08e0b089":"code","dbfe803a":"code","8ca99529":"code","f23ccf7a":"code","d953eafd":"code","d7256a7e":"code","2c3c8017":"code","61d31084":"markdown","827bfb8d":"markdown","9eb23cd3":"markdown","3a833521":"markdown","73b3523a":"markdown","d59665f3":"markdown","4bcce82a":"markdown","98974248":"markdown","99a7df2c":"markdown","bde7137f":"markdown","a282f770":"markdown","39ddf746":"markdown","8138c552":"markdown","32bf4331":"markdown","92a2c635":"markdown"},"source":{"da561d53":"import numpy as np\nimport pandas as pd\nimport cv2\nimport matplotlib.pyplot as plt\nimport os\nprint(os.listdir(\"..\/input\/aerial-cactus-identification\"))\nprint(os.listdir('..\/input\/models'))","f963bb84":"import warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)","46b5ec8f":"from sklearn.model_selection import train_test_split","fc68dd21":"from keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, Activation\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.applications import VGG16\nfrom keras.preprocessing.image import ImageDataGenerator","71d75dc7":"q_size = 32\nimg_channel = 3 \nnum_classes=2\nid_code = 'id'","296379e8":"path = '..\/input\/aerial-cactus-identification\/'\ntrain_data = pd.read_csv(path+'train.csv')\nsub_org = pd.read_csv(path+'sample_submission.csv')","16dee119":"def plot_bar(data):\n    \"\"\"Simple function to plot the distribution of the classes.\"\"\"\n    dict_data = dict(zip(range(0, num_classes), (((data.value_counts()).sort_index())).tolist()))\n    names = list(dict_data.keys())\n    values = list(dict_data.values())\n    plt.bar(names, values)\n    plt.grid()\n    plt.show()","97911322":"def read_images(filepath, data, file_list, size):\n    \"\"\"Read and edit the images of a given folder.\"\"\"\n    for file in file_list:\n        img = cv2.imread(filepath+file)\n        img = cv2.resize(img, (size, size))\n        data[file_list.index(file), :, :, :] = img","877200b7":"X_train_org = np.empty((len(train_data), q_size, q_size, img_channel), dtype=np.uint8)\nX_test = np.empty((len(sub_org), q_size, q_size, img_channel), dtype=np.uint8)","5cbc8ebc":"read_images(path+'train\/train\/', X_train_org, train_data[id_code].tolist(), q_size)\nread_images(path+'test\/test\/', X_test, sub_org[id_code].tolist(), q_size)","0ffdb786":"plot_bar(train_data['has_cactus'])","56ee0d1b":"class_weight = dict(zip(range(0, num_classes), (((train_data['has_cactus'].value_counts()).sort_index())\/len(train_data)).tolist()))","8ce33f1a":"class_weight","7e4482f6":"y_train_org = train_data['has_cactus'].tolist()\ny_train_org = to_categorical(y_train_org, num_classes = num_classes)","8cf41ff2":"mean = X_train_org.mean(axis=0)\nX_train_org = X_train_org.astype('float32')\nX_train_org -= X_train_org.mean(axis=0)\nstd = X_train_org.std(axis=0)\nX_train_org \/= X_train_org.std(axis=0)\nX_test = X_test.astype('float32')\nX_test -= mean\nX_test \/= std","6feea1e1":"X_train, X_val, y_train, y_val = train_test_split(X_train_org, y_train_org, test_size = 0.2, random_state=0)","6350e4c1":"conv_base = VGG16(weights='..\/input\/models\/model_weights_vgg16.h5',\n                  include_top=False,\n                  input_shape=(q_size, q_size, img_channel))\nconv_base.trainable = True","be54b9e2":"model = Sequential()\nmodel.add(conv_base)\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='sigmoid'))","0ba05998":"model.compile(optimizer = Adam(lr=1e-6),\n              loss='binary_crossentropy',\n              metrics=['binary_accuracy'])","720f7075":"model.summary()","73695f88":"epochs = 10\nbatch_size = 16","cb3d624e":"datagen = ImageDataGenerator(\n        featurewise_center=False,\n        samplewise_center=False,\n        featurewise_std_normalization=False,\n        samplewise_std_normalization=False,\n        zca_whitening=False,\n        rotation_range=10,\n        zoom_range = 0.10,\n        width_shift_range=0.15,\n        height_shift_range=0.15,\n        horizontal_flip=False,\n        vertical_flip=False)\ndatagen.fit(X_train)","08e0b089":"history = model.fit(datagen.flow(X_train, y_train,\n                                 batch_size=batch_size),\n                    epochs=epochs,\n                    validation_data=(X_val, y_val),\n                    steps_per_epoch=X_train.shape[0] \/\/ batch_size,\n                    class_weight=class_weight)","dbfe803a":"y_test = model.predict(X_test)","8ca99529":"y_test_classes = np.argmax(y_test, axis = 1)","f23ccf7a":"output = pd.DataFrame({'id': sub_org['id'],\n                       'has_cactus': y_test_classes})\noutput.to_csv('submission.csv', index=False)","d953eafd":"plot_bar(output['has_cactus'])","d7256a7e":"loss = history.history['loss']\nloss_val = history.history['val_loss']\nepochs = range(1, len(loss)+1)\nplt.plot(epochs, loss, 'bo', label='Loss_Train')\nplt.plot(epochs, loss_val, 'b', label='Loss_Val')\nplt.title('value loss funtion')\nplt.xlabel('epochs')\nplt.ylabel('value loss funtion')\nplt.legend()\nplt.grid()\nplt.show()","2c3c8017":"acc = history.history['binary_accuracy']\nacc_val = history.history['val_binary_accuracy']\nepochs = range(1, len(loss)+1)\nplt.plot(epochs, acc, 'bo', label='Accuracy_Train')\nplt.plot(epochs, acc_val, 'b', label='Accuracy_Val')\nplt.title('value of accuracy')\nplt.xlabel('epochs')\nplt.ylabel('value of accuracy')\nplt.legend()\nplt.grid()\nplt.show()","61d31084":"# Predict the test data","827bfb8d":"# Split train and validation data","9eb23cd3":"# Define the ImageDataGenerator","3a833521":"# Convert and scale image data","73b3523a":"# Intro \nWelcome to the [Areal Cactus Identification](https:\/\/www.kaggle.com\/c\/aerial-cactus-identification) Competition\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/13435\/logos\/header.png)\nThis notebook is a starter code for all beginners and easy to understand. To predict the test data a simple CNN with a pretrained model is used.","d59665f3":"# Load libraries and pretrained model","4bcce82a":"# Analyse the results","98974248":"# Train model","99a7df2c":"# Create the model","bde7137f":"# Read the image data","a282f770":"# Initialize the original train and test data","39ddf746":"# Write output for submission","8138c552":"# Define parameters","32bf4331":"# Define some functions","92a2c635":"# Read the input csv files"}}