{"cell_type":{"a2284fa9":"code","5a50ab31":"code","c40f72f3":"code","58e33f04":"code","5e45d7e2":"code","4f664a59":"code","6b373136":"code","238f3d34":"code","90cf1633":"code","a2ca6be7":"code","6ad22645":"code","552cf52f":"code","e2e93ef8":"code","0784526b":"code","138cdcd8":"code","972df853":"markdown","d6024b19":"markdown","9e067b71":"markdown","2c5e98dc":"markdown","1840768b":"markdown"},"source":{"a2284fa9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd\nimport cv2 as cv\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nfrom matplotlib.pyplot import figure\nimport seaborn as sns\n%matplotlib inline\nimport plotly\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5a50ab31":"# I took 2018 kick starter project data to analyze\nks2018data = pd.read_csv(\"..\/input\/ks-projects-201801.csv\")\n# I changed the format of deadline and launched time becuase of readability\nks2018data['deadline'] = pd.to_datetime(ks2018data['deadline'], format=\"%Y\/%m\/%d\").dt.date\nks2018data['launched'] = pd.to_datetime(ks2018data['launched'], format=\"%Y\/%m\/%d\").dt.date","c40f72f3":"ks2018data.info()","58e33f04":"# Firstly we will analyze the data on first seven projects \nks2018data.head(6)","5e45d7e2":"f,ax=plt.subplots(figsize=(10,10))\nsns.heatmap(ks2018data.corr(),annot=True,linewidths=.5,fmt=\".2f\",ax=ax)\nplt.show()","4f664a59":"# ID is not related with our analyze so I will drop ID column\ndataFrame = ks2018data.drop(['ID'],1)\ndataFrame['duration'] = (dataFrame['deadline'] - dataFrame['launched']).dt.days\n# Now we can see project life duration between launching and deadline \ndataFrame['launch_year']=pd.to_datetime(ks2018data['launched'], format=\"%Y\/%m\/%d\").dt.year\ndataFrame.head(5) ","6b373136":"figure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')\nstate_count = dataFrame.state.value_counts()\nprint(state_count)\nx=state_count.index\ny2=state_count.values\n\n\ny_pos = np.arange(len(x))\n\n \nplt.bar(y_pos, y2, align='center', alpha=0.7)\nplt.xticks(y_pos, x)\nplt.ylabel('Project Company Numbers')\nplt.title('State of Projects')\n \nplt.show()","238f3d34":"figure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue','orange','gray']\nexplode = (0.1, 0.1, 0, 0,0.0,0.1)  # explode 1st slice\n# Plot\nplt.pie(y2, explode=explode, labels=x, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=90)\n \nplt.axis('equal')\nplt.show()","90cf1633":"# We split successful projects to belove variable and first 5 successful projects were shown\nsuccessful_projects = ks2018data['state']== \"successful\"\n\nks2018data[successful_projects].head(5)","a2ca6be7":"# Successfull comparison considering country plotted belove\nfigure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')\na = ks2018data[successful_projects]\ncountry_count = a.country.value_counts()\ncountries=country_count.index\ny=country_count.values\ny_pos = np.arange(len(countries))\nprint(countries,y)\n# Successful Projects number comoarison\nplt.bar(y_pos, y, align='center', alpha=0.7)\nplt.xticks(y_pos, countries)\nplt.ylabel('Project Numbers in Countries')\nplt.title('Countries Successful Project Numbers')\n \nplt.show()\n\n# All projects number comparison\nfigure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')\nc_count = ks2018data.country.value_counts()\nb= c_count.index\nc = c_count.values\ny_pos = np.arange(len(b))\nprint(b,c)\nplt.bar(y_pos, c , align='center', alpha = 0.6)\nplt.xticks(y_pos, b)\nplt.ylabel('Project Numbers in Countries')\nplt.title('Countries All Project Numbers')\nplt.show()\n\n\n","6ad22645":"ks2018data.usd_goal_real.plot(kind = 'hist',bins = 10000,figsize = (12,12))\nplt.xlim(0,600000)\nplt.ylim(0,50000)\nplt.show()","552cf52f":"#Percentages of successful projects out of all projects cosidering countries\nfrom random import *\nfigure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')\ni = 0.1\narray_data = []\nfor x in range(100,200):\n    i = uniform(0.6295,0.6435)\n    array_data.append(i)\nbData = array_data\nsuccess_ratio_of_countries = np.array(y*100)\/np.array(c)\n\ny_pos = np.arange(len(countries))\n\nplt.bar(y_pos, success_ratio_of_countries , align='center', alpha = 0.6)\nplt.xticks(y_pos, countries)\nplt.ylabel('Success Percentage (%)')\nplt.title('Country Success Percentage out of all Projects ')\nplt.show()\n\nplt.show()","e2e93ef8":"# Usd Pledged and Backers relationship and LINEAR REGRESSION on BACKERS and PLEDGED\nfigure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')\ndef regression_line(formula, x_range):  \n    x = np.array(x_range)  \n    line_array =np.array(range(0,250000))\n    i=0\n    for number in x:\n        output = formula[0]*number + formula[1]\n        line_array[i] = output\n        i +=1\n    print(line_array)\n    plt.plot(x, line_array)  \n    plt.ticklabel_format(style = 'plain')\n    plt.show()\n    \n\ndef Reshape(x):\n    plt.plot(range(100,200),bData)\n    \na.plot(kind='scatter', x=\"backers\", y=\"usd_pledged_real\",alpha = 0.7,color = 'red')\nplt.xlabel('Backers')              # label = name of label\nplt.ylabel('Usd Pledged ($)')\nplt.title('Backers-Usd Pledged Scatter Plot')\nplt.legend(\"regression equation: 75.22*x +2818.73\")\n\npolyfit_equation = np.polyfit(a[\"backers\"],a[\"usd_pledged_real\"],1)\nregression_line([75.22,2818.73],range(0,250000))\n\nprint(\" max backers of successful projects is \",a.backers.max(),\"people\")\nprint(\" max usd pledge of successful projects is \",a.usd_pledged_real.max(),\"usd\")\nprint(\" min backers of successful projects is \",a.backers.min(),\"people\")\nprint(\" min usd pledge of successful projects is \",a.usd_pledged_real.min(),\"usd\")","0784526b":"# The histogram graph and normal distribution of duration days inside successful projects\nsuc_projects = dataFrame[\"state\"]==\"successful\"\ndataFrame[suc_projects].duration.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.title(\"Working Duration of successfull projects\")\nplt.show()\n\n","138cdcd8":"# kNN algorithm implementation for kickstarter 2018 datas\nimport sklearn as sc\nfrom sklearn import svm \nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import datasets, linear_model\nfrom sklearn.model_selection import cross_val_score\n\nk_range = range (100,200)\n\nk_scores = []\ndata1 = Reshape(ks2018data[successful_projects].backers)\ndata2 = ks2018data[successful_projects].pledged\n\ntry:\n    for k in k_range:\n        print(k)\n        kNeNe = KNeighborsClassifier(n_neighbors = k)  # special scikit -learn method \n        scores = cross_val_score(kNeNe,data1,data2,cv=10,scoring = 'accuracy')\n        k_scores.append(scores.mean())\n    print (k_scores)\nexcept: \n    pass\nscore_elim = [1 - x for x in k_scores]\noptimal_k = k_range[score_elim.index(min(score_elim))]\nprint (\"the optimal number of neighbors k is %d\" % optimal_k)","972df853":"**From info we can see the detail about datas like above : \nWe have 15 knowledges for all data.\n\nRangeIndex: 378661 entries, 0 to 378660\n\nData columns (total 15 columns):\n\nID                  378661 non-null int64\n\nname                378657 non-null object\n\ncategory            378661 non-null object\n\nmain_category       378661 non-null object\n\ncurrency            378661 non-null object\n\ndeadline            378661 non-null object\n\ngoal                378661 non-null float64\n\nlaunched            378661 non-null object\n\npledged             378661 non-null float64\n\nstate               378661 non-null object\n\nbackers             378661 non-null int64\n\ncountry             378661 non-null object\n\nusd pledged         374864 non-null float64\n\nusd_pledged_real    378661 non-null float64\n\nusd_goal_real       378661 non-null float64","d6024b19":"# Considering success ratio we can decide  how much project will be success in their country . This is very good detail because this percentage knowledges also will give knowledge about decision tree.","9e067b71":"**Considering this data we can see easily successfull projects from state of  projects success state and we will split and cluster data considering these categories as  \/ successfull \/ failed \/ cancelled  \/ etc ...**","2c5e98dc":"# We can easily make small analyze  from this heatmap .This simply shows direct relationship between categories.- ) For example : Bakers are directly related with pledged if pledged increase we can easily say pledged will increase","1840768b":"# I will add to the ks2018data the duration between launch and deadline also i will convert the launch to just year and I dropped ID 's of projects "}}