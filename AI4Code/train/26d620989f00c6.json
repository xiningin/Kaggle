{"cell_type":{"d011d31d":"code","ac148bf5":"code","b2e07bcb":"code","654adda9":"code","de928a76":"code","4506c00f":"code","2d3c50df":"code","562dce11":"code","548ddb8c":"code","030ac6f4":"code","15f3e6e1":"code","9d9e3f20":"code","c7ca50ba":"code","ad4cd832":"code","4fdf1994":"code","598cb9a3":"code","ade07533":"code","cd0464c1":"code","716778eb":"code","ff0bd6fb":"code","fabfceef":"code","21878036":"code","dc087a0e":"code","51e5103f":"code","fc18a18a":"code","815e4f2c":"code","c9ee7807":"code","b104a928":"code","96623d95":"code","d80e960b":"code","15d033ac":"code","d878cefb":"code","ba2f0158":"markdown","53a90057":"markdown","c8d77392":"markdown"},"source":{"d011d31d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nimport seaborn as sns\nimport os","ac148bf5":"test_data = pd.read_csv('..\/input\/test.csv')\ntrain_data = pd.read_csv('..\/input\/\/train.csv')\n\n# sizes of each doc\nprint(test_data.shape)\nprint(train_data.shape)","b2e07bcb":"train_data.head()","654adda9":"df_train = pd.DataFrame(train_data)\ndf_test = pd.DataFrame(test_data)","de928a76":"df_train.describe(include='all')","4506c00f":"cols_missed_train = df_train.isnull().sum()\ncols_missed_valid = df_test.isnull().sum()\n\nprint('Columns with NaN in df_train: ', len(cols_missed_train[cols_missed_train > 0]))\nprint(cols_missed_train[cols_missed_train > 0].sort_values(ascending = False))\n\nprint('Columns with NaN in df_test: ', len(cols_missed_valid[cols_missed_valid > 0]))\nprint(cols_missed_valid[cols_missed_valid > 0].sort_values(ascending = False))","2d3c50df":"# Getting rid of all the NaNs\ndf_train['PoolQC'] = df_train['PoolQC'].fillna('None')\ndf_train['MiscFeature'] = df_train['MiscFeature'].fillna('None')\ndf_train['Alley'] = df_train['Alley'].fillna('None')\ndf_train['Fence'] = df_train['Fence'].fillna('None')\ndf_train['FireplaceQu'] = df_train['FireplaceQu'].fillna('None')\ndf_train['LotFrontage'] = df_train['LotFrontage'].fillna(df_train['LotFrontage'].mode()[0])\nfor col in ('GarageYrBlt', 'GarageCars', 'GarageArea'):\n\tdf_train[col] = df_train['GarageYrBlt'].fillna(0)\nfor col in ('GarageType', 'GarageQual', 'GarageCond', 'GarageFinish'):\n\tdf_train[col] = df_train[col].fillna('None')\nfor col in ('BsmtFinType2', 'BsmtFinType1', 'BsmtExposure', 'BsmtCond', 'BsmtQual'):\n\tdf_train[col] = df_train[col].fillna('None')\ndf_train['MasVnrArea'] = df_train['MasVnrArea'].fillna(df_train['MasVnrArea'].mode()[0])\ndf_train['MasVnrType'] = df_train['MasVnrType'].fillna('None')\ndf_train['Electrical'] = df_train['Electrical'].fillna('None')\ndf_train['MSZoning'] = df_train['MSZoning'].fillna(df_train['MSZoning'].mode()[0])\n\ndf_train['Functional'] = df_train['Functional'].fillna(df_train['Functional'].mode()[0])\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    df_train[col] = df_train[col].fillna(0)\ndf_train['SaleType'] = df_train['SaleType'].fillna(df_train['SaleType'].mode()[0])\ndf_train['Utilities'] = df_train['Utilities'].fillna(df_train['Utilities'].mode()[0])\ndf_train['Exterior1st'] = df_train['Exterior1st'].fillna(df_train['Exterior1st'].mode()[0])\ndf_train['Exterior2nd'] = df_train['Exterior2nd'].fillna(df_train['Exterior2nd'].mode()[0])\ndf_train['KitchenQual'] = df_train['KitchenQual'].fillna(df_train['KitchenQual'].mode()[0])\n\n# Checking nulls to be sure they are gone in df_train\nprint('Missed data in df_train: ', df_train.isnull().sum().sum())\n\n\n# Replacing missing data in df_test\ndf_test['PoolQC'] = df_test['PoolQC'].fillna('None')\ndf_test['MiscFeature'] = df_test['MiscFeature'].fillna('None')\ndf_test['Alley'] = df_test['Alley'].fillna('None')\ndf_test['Fence'] = df_test['Fence'].fillna('None')\ndf_test['FireplaceQu'] = df_test['FireplaceQu'].fillna('None')\ndf_test['LotFrontage'] = df_test['LotFrontage'].fillna(df_test['LotFrontage'].mode()[0])\nfor col in ('GarageYrBlt', 'GarageCars', 'GarageArea'):\n\tdf_test[col] = df_test['GarageYrBlt'].fillna(0)\nfor col in ('GarageType', 'GarageQual', 'GarageCond', 'GarageFinish'):\n\tdf_test[col] = df_test[col].fillna('None')\nfor col in ('BsmtFinType2', 'BsmtFinType1', 'BsmtExposure', 'BsmtCond', 'BsmtQual'):\n\tdf_test[col] = df_test[col].fillna('None')\ndf_test['MasVnrArea'] = df_test['MasVnrArea'].fillna(df_test['MasVnrArea'].mode()[0])\ndf_test['MasVnrType'] = df_test['MasVnrType'].fillna('None')\ndf_test['Electrical'] = df_test['Electrical'].fillna('None')\ndf_test['MSZoning'] = df_test['MSZoning'].fillna(df_test['MSZoning'].mode()[0])\ndf_test['Functional'] = df_test['Functional'].fillna(df_test['Functional'].mode()[0])\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    df_test[col] = df_test[col].fillna(0)\ndf_test['SaleType'] = df_test['SaleType'].fillna(df_test['SaleType'].mode()[0])\ndf_test['Utilities'] = df_test['Utilities'].fillna(df_test['Utilities'].mode()[0])\ndf_test['Exterior1st'] = df_test['Exterior1st'].fillna(df_test['Exterior1st'].mode()[0])\ndf_test['Exterior2nd'] = df_test['Exterior2nd'].fillna(df_test['Exterior2nd'].mode()[0])\ndf_test['KitchenQual'] = df_test['KitchenQual'].fillna(df_test['KitchenQual'].mode()[0])\n\n# Checking nulls to be sure they are gone in df_train\nprint('Missed data in df_test: ', df_test.isnull().sum().sum())","562dce11":"df_train.dtypes.value_counts()","548ddb8c":"# We need to copy df_train_full and df_test_full in case something will go wrong\n\ndf_train_full = df_train.copy()\ndf_test_full = df_test.copy()","030ac6f4":"#Excluding object types of data to be able to get some information from histograms\ntrain_num = df_train_full.select_dtypes(exclude = ['object'])\ntest_num = df_test_full.select_dtypes(exclude = ['object'])","15f3e6e1":"# Histogram for SalePrice\ntrain_num['SalePrice'].hist(color='purple')\nplt.title('SalePrice distribution 1')","9d9e3f20":"sns.distplot(train_num['SalePrice'], color='DarkOrange')\nplt.title('SalePrice distribution 2')","c7ca50ba":"# Let's take logarithm for more comfortable understandin our data\nnp.log(train_num['SalePrice']).hist(bins=50, density=1, color='DarkCyan')\nplt.title('SalePrice distribution 3')\n# As we can see we have outliers. We will get rid of them a bit later","ad4cd832":"# Histogram of SalePrice depending on MSZoning (normalized)\ndf_train_full.groupby('MSZoning')['SalePrice'].plot.hist(density=1, alpha=0.6)\nplt.title('Distribution by MSZoning 1')\nplt.legend()","4fdf1994":"# MSZoning\nvar = 'MSZoning'\ndata = pd.concat([df_train_full['SalePrice'], df_train_full[var]], axis=1)\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=700000);","598cb9a3":"# YearBuilt boxplot\nvar = 'YearBuilt'\ndata = pd.concat([df_train_full['SalePrice'], df_train_full[var]], axis=1)\nf, ax = plt.subplots(figsize=(26, 12))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=1000000);","ade07533":"#Removing outliers (choosing data between first and third quartiles)\nfirst_q = df_train_full['SalePrice'].describe()['25%']\nthird_q = df_train_full['SalePrice'].describe()['75%']\ndiff = third_q - first_q\n\ncols_train = df_train_full[(df_train_full['SalePrice'] > (first_q - 3 * diff))&\n                     (df_train_full['SalePrice'] < (third_q + 3 * diff))]\nprint('Removed outliers: ' + str(len(df_train_full) - len(cols_train)))","cd0464c1":"cols_train.head()","716778eb":"test_id = df_test['Id']","ff0bd6fb":"# Removing IDs (to get more accurate outputs)\ncols_train.drop(columns=['Id'], axis=1, inplace=True)\ndf_test_full.drop(columns=['Id'], axis=1, inplace=True)","fabfceef":"# Building correlation matrix for understanding how the characteristics influence to each other\nn_df = cols_train.copy()\ncorr_matrix = n_df.corr()\n\n#Mask and cmap\nmask = np.zeros_like(corr_matrix, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\ncolormap = sns.diverging_palette(220, 10, as_cmap=True)\n\nf, ax = plt.subplots(figsize=(16, 12))\nplt.title('Correlation Matrix',fontsize=22)\nsns.heatmap(corr_matrix, mask=mask, square=True, cmap=colormap, vmax=1, center=0, annot=True, fmt='.1f')","21878036":"cols_train['SalePrice'] = np.log(cols_train['SalePrice'])","dc087a0e":"cols_train['SalePrice'].head()","51e5103f":"SalePrice = cols_train['SalePrice']","fc18a18a":"new_cols_train = cols_train.drop('SalePrice', axis=1)\nnew_cols_train.head()","815e4f2c":"y = SalePrice\nX = new_cols_train\n\n# Split dataset to train and valid for training and testing\ntrain_X, valid_X, train_y, valid_y = train_test_split(X, y, random_state=1)\n\nprint(train_X.shape)\nprint(valid_X.shape)","c9ee7807":"s = (train_X.dtypes == 'object')\ncategor_cols = list(s[s].index)\n\nlabel_train_X = train_X.copy()\nlabel_valid_X = valid_X.copy()\n\nOHE = OneHotEncoder(handle_unknown='ignore', sparse=False)\nOHE_train_X = pd.DataFrame(OHE.fit_transform(label_train_X[categor_cols]))\nOHE_valid_X = pd.DataFrame(OHE.transform(label_valid_X[categor_cols]))\n\nOHE_train_X.index = label_train_X.index\nOHE_valid_X.index = label_valid_X.index\n\nnum_train_X = label_train_X.drop(categor_cols, axis=1)\nnum_valid_X = label_valid_X.drop(categor_cols, axis=1)\n\nOHE_train = pd.concat([num_train_X, OHE_train_X], axis=1)\nOHE_valid = pd.concat([num_valid_X, OHE_valid_X], axis=1)","b104a928":"xgb = XGBRegressor(n_estimator=500, learning_rate=0.1, n_jobs=4)\nxgb.fit(OHE_train, train_y,\n        early_stopping_rounds=5,\n        eval_set=[(OHE_valid, valid_y)],\n        verbose=False)\n\nval_pred = xgb.predict(OHE_valid)\n\nrmse = np.sqrt(mean_squared_error(valid_y, val_pred))\nrmse","96623d95":"u = (df_test_full.dtypes == 'object')\ncategor_cols_test = list(u[u].index)\ncategor_cols_test\n\nOHE_test = pd.DataFrame(OHE.transform(df_test_full[categor_cols_test]))\nOHE_test.index = df_test_full.index\nnum_test = df_test_full.drop(categor_cols_test, axis=1)\n\nOHE_test_final = pd.concat([num_test, OHE_test], axis=1)","d80e960b":"final_pred = xgb.predict(OHE_test_final)\nfinal_pred = np.exp(final_pred)","15d033ac":"df_pred = pd.DataFrame({\"id\":test_id, \"SalePrice\":final_pred})\ndf_pred.SalePrice = df_pred.SalePrice.round(0)\ndf_pred.to_csv('submission.csv', sep=',', encoding='utf-8', index=False)","d878cefb":"df_pred.head()","ba2f0158":"But it is not that informative, so we need something else:","53a90057":"Checking all the count of NaN per each column:","c8d77392":"Importing libraries:"}}