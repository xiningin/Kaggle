{"cell_type":{"e4517476":"code","010e45f1":"code","b4bbe6c4":"code","5d0f4e89":"code","cc56a02c":"code","e1d704ad":"code","698fa312":"code","aa8734fa":"code","385e9d12":"code","6fa675bd":"code","fc1ddcdb":"code","c79625f6":"code","119caa4a":"code","f1ce8ec7":"code","dfb5e7ff":"code","588a26dc":"code","adad519b":"code","c374cdd7":"code","96906395":"code","67d05218":"code","1e142f7a":"code","4c5463db":"code","187edfed":"code","868264b5":"code","0fb0fd99":"code","7ab01e7d":"code","a51c1ab7":"code","fd8f1bec":"code","4f837620":"code","89da636f":"code","30334584":"code","4c18c54d":"code","3f8435fa":"code","ded824d2":"code","173c78ba":"code","644f2b77":"code","f672bf2d":"code","f50ebfad":"code","f455c008":"code","530c2f0e":"code","85cf19e5":"code","47161efc":"code","21a9a48a":"code","5da23e89":"code","72f32462":"code","aae9c7aa":"code","d10d53b3":"code","50b41cdf":"code","e5406f30":"code","0a91ed46":"code","98abe23b":"code","5aa451f3":"code","1166659d":"code","77976457":"code","88bed9fb":"code","2ecb27cf":"code","9cc326e6":"code","7de8488c":"code","76b5bc1b":"code","8a10cdfe":"code","3c6ec48c":"code","d933d2e9":"code","06a0c687":"code","8689eb47":"code","5937553b":"code","dcd66d1b":"code","54a46acc":"code","95124f02":"code","38f9a28a":"code","1411e1be":"code","28c0e87c":"code","22f6ef7a":"markdown","b39f5757":"markdown","6c87326e":"markdown","d00959fe":"markdown","d7920da9":"markdown","56bd39fa":"markdown","76668e44":"markdown","76038157":"markdown","0c1314d5":"markdown","e2b0ee59":"markdown","4fba7d28":"markdown","5e17d137":"markdown","33df0947":"markdown","30f08174":"markdown","701eef6b":"markdown","c2865c82":"markdown","6a698983":"markdown","8a835c55":"markdown","2c307d6c":"markdown","958a8764":"markdown","fcecf9f2":"markdown","30bf0a3c":"markdown","1deea080":"markdown","e6d6e356":"markdown","7b8aa335":"markdown","3cdff044":"markdown","37e4e32a":"markdown","11ccf116":"markdown","404f8f5e":"markdown","29c70675":"markdown"},"source":{"e4517476":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport plotly.express as px","010e45f1":"warnings.filterwarnings('ignore')","b4bbe6c4":"train_df = pd.read_csv(\"..\/input\/health-insurance-cross-sell-prediction\/train.csv\")\ntest_df  = pd.read_csv(\"..\/input\/health-insurance-cross-sell-prediction\/test.csv\")","5d0f4e89":"train_df = train_df.set_index('id')\ntest_df  = test_df.set_index('id')","cc56a02c":"train_df.info()","e1d704ad":" test_df.info()","698fa312":"train_df.isna().sum()","aa8734fa":"test_df.isna().sum()","385e9d12":"train_df['Region_Code'] = train_df['Region_Code'].astype(int).astype(str)\ntest_df['Region_Code'] = test_df['Region_Code'].astype(int).astype(str)","6fa675bd":"train_df['Policy_Sales_Channel'] = train_df['Policy_Sales_Channel'].astype(int).astype(str)\ntest_df['Policy_Sales_Channel'] = test_df['Policy_Sales_Channel'].astype(int).astype(str)","fc1ddcdb":"plt.rcParams['figure.figsize'] = 25, 3\nsns.color_palette(\"deep\")\nfor feature in ['Gender', 'Driving_License', 'Region_Code', 'Previously_Insured', 'Vehicle_Age', 'Vehicle_Damage', 'Policy_Sales_Channel']:\n    fig, ax = plt.subplots(nrows=1, ncols=2, sharex=True)\n    ax0 = sns.countplot(train_df[feature].sort_values(), ax=ax[0])\n    ax1 = sns.countplot(test_df[feature].sort_values(),  ax=ax[1])\n    ax0.set_title(f'{feature} - Train');\n    ax1.set_title(f'{feature} - Test');\n    \n    if feature == 'Region_Code':\n        for tick in ax0.get_xticklabels():\n            tick.set_rotation(90)\n        for tick in ax1.get_xticklabels():\n            tick.set_rotation(90)\n        \n    plt.show();","c79625f6":"plt.rcParams['figure.figsize'] = 25, 3\nfor feature in ['Age', 'Annual_Premium', 'Vintage']:\n    fig, ax = plt.subplots(nrows=2, ncols=2, sharex=True)\n    ax0 = sns.distplot(train_df[feature].sort_values(), ax=ax[0][0])\n    ax1 = sns.distplot(test_df[feature].sort_values(),  ax=ax[0][1])\n    ax0.set_title(f'{feature} - Train');\n    ax1.set_title(f'{feature} - Test');\n    \n    sns.boxplot(train_df[feature].sort_values(), ax=ax[1][0])\n    sns.boxplot(test_df[feature].sort_values(),  ax=ax[1][1])\n        \n    plt.show();","119caa4a":"plt.rcParams['figure.figsize'] = 15, 8\nsns.color_palette(\"deep\")\nfor feature in ['Gender', 'Driving_License', 'Previously_Insured', 'Vehicle_Age', 'Vehicle_Damage']:\n    fig, ax = plt.subplots(nrows=1, ncols=2)\n    temp = train_df[[feature, 'Response']].groupby(feature)['Response'].apply(lambda x: x.sum()\/x.count()).mul(100).rename('% (Response = 1)')\n    \n    train_df[feature].value_counts().plot.pie(ax=ax[1])\n    temp.plot(kind='bar', ax=ax[0])\n    \n    plt.show();","f1ce8ec7":"train_dfc = train_df.copy()","dfb5e7ff":"plt.rcParams['figure.figsize'] = 7, 7\nfor feature in ['Age', 'Annual_Premium', 'Vintage']:    \n    ax = sns.distplot(train_dfc[train_dfc['Response'] == 1][feature], label='Response = 1')\n    sns.distplot(train_dfc[train_dfc['Response'] == 0][feature], ax=ax, label='Response = 0')\n    \n    plt.title(f'{feature} - Response == 0 vs Response == 1')\n    plt.legend();\n    plt.show();","588a26dc":"Q = 10\ntrain_dfc['AgeGroups'] = pd.qcut(train_dfc['Age'], q=Q)","adad519b":"train_dfc[['AgeGroups', 'Response']].groupby('AgeGroups')['Response'].apply(lambda x: x.sum()\/x.count() * 100).rename('% (Response == 1)').to_frame()","c374cdd7":"train_dfc['self_defined_agegroups'] = pd.cut(train_dfc['Age'], bins=[0, 29, 35, 50, 100])","96906395":"train_dfc[['self_defined_agegroups', 'Response']].groupby('self_defined_agegroups')['Response'].apply(lambda x: x.sum()\/x.count() * 100).rename('% (Response == 1)').to_frame()","67d05218":"train_dfc['VehicleAgeDe'] = train_dfc['Vehicle_Age'].map({'< 1 Year': 0, '1-2 Year': 1, '> 2 Years': 2})","1e142f7a":"Q = 10\ntrain_dfc['Annual_Premium_Groups'] = pd.qcut(train_dfc['Annual_Premium'], q=Q, duplicates='drop')","4c5463db":"train_dfc[['Annual_Premium_Groups', 'Response']].groupby('Annual_Premium_Groups')['Response'].apply(lambda x: x.sum()\/x.count() * 100).rename('% (Response == 1)').to_frame()","187edfed":"train_dfc['Annual_Premium_self'] = pd.cut(train_dfc['Annual_Premium'], bins=[0, 30000, 35000, 37500, 41700, 48400, np.inf])","868264b5":"train_dfc[['Annual_Premium_self', 'Response']].groupby('Annual_Premium_self')['Response'].apply(lambda x: x.sum()\/x.count() * 100).rename('% (Response == 1)').to_frame()","0fb0fd99":"Q = 10\ntrain_dfc['Vintage_Groups'] = pd.qcut(train_dfc['Vintage'], q=Q, duplicates='drop')","7ab01e7d":"train_dfc[['Vintage_Groups', 'Response']].groupby('Vintage_Groups')['Response'].apply(lambda x: x.sum()\/x.count() * 100).rename('% (Response == 1)').to_frame()","a51c1ab7":"train_dfc['Annual_Premium_de'] = train_dfc['Annual_Premium_self'].cat.codes\ntrain_dfc['self_defined_agegroups_en'] = train_dfc['self_defined_agegroups'].cat.codes","fd8f1bec":"train_dfc['Gender_ohe'] = pd.get_dummies(train_dfc['Gender'], prefix='Gender', drop_first=True)['Gender_Male']","4f837620":"train_dfc['Vehicle_Damage_ohe'] = train_dfc['Vehicle_Damage'].map({'Yes': 1, 'No': 0})","89da636f":"train_dfc[['Policy_Sales_Channel', 'Response']].groupby('Policy_Sales_Channel').apply(lambda x: x.sum()\/x.count() * 100)['Response'].sort_values()","30334584":"temp_df = train_df[['Policy_Sales_Channel', 'Response']].groupby('Policy_Sales_Channel').apply(lambda x: x.sum()\/x.count() * 100)['Response'].sort_values()\nax = temp_df.plot.bar()\n\nax.set_xticks(temp_df.index[::5])\n\nfor tick in ax.get_xticklabels():\n    tick.set_rotation(90)","4c18c54d":"train_df[train_df['Policy_Sales_Channel'].isin(['123', '43'])]","3f8435fa":"test_df[test_df['Policy_Sales_Channel'].isin(['123', '43'])]","ded824d2":"from sklearn.cluster import KMeans","173c78ba":"km = KMeans(n_clusters=6).fit(X = temp_df.values.reshape(-1, 1))","644f2b77":"clusters = km.predict(temp_df.values.reshape(-1, 1))","f672bf2d":"temp_df = temp_df.rename('% (Response == 1)').reset_index()","f50ebfad":"temp_df['cluster'] = clusters","f455c008":"ax = sns.barplot(x=temp_df['Policy_Sales_Channel'], y=temp_df['% (Response == 1)'], hue=temp_df['cluster']);\n\nax.set_xticks(temp_df.index[::5])\n\nfor tick in ax.get_xticklabels():\n    tick.set_rotation(90)","530c2f0e":"train_dfc = train_dfc.merge(temp_df[['Policy_Sales_Channel', 'cluster']], how='left').rename(columns={'cluster': 'Policy_Sales_Channel_cluster'})","85cf19e5":"train_dfc[['Region_Code', 'Response']].groupby('Region_Code').apply(lambda x: x.sum()\/x.count() * 100)['Response'].sort_values()","47161efc":"temp_df = train_df[['Region_Code', 'Response']].groupby('Region_Code').apply(lambda x: x.sum()\/x.count() * 100)['Response'].sort_values()\nax = temp_df.plot.bar()\n\nax.set_xticks(temp_df.index[::3])\n\nfor tick in ax.get_xticklabels():\n    tick.set_rotation(90)","21a9a48a":"km = KMeans(n_clusters=6).fit(X = temp_df.values.reshape(-1, 1))","5da23e89":"clusters = km.predict(temp_df.values.reshape(-1, 1))","72f32462":"temp_df = temp_df.rename('% (Response == 1)').reset_index()","aae9c7aa":"temp_df['cluster'] = clusters","d10d53b3":"ax = sns.barplot(x=temp_df['Region_Code'], y=temp_df['% (Response == 1)'], hue=temp_df['cluster']);\n\nax.set_xticks(temp_df.index[::3])\n\nfor tick in ax.get_xticklabels():\n    tick.set_rotation(90)","50b41cdf":"train_dfc = train_dfc.merge(temp_df[['Region_Code', 'cluster']], how='left').rename(columns={'cluster': 'Region_Code_cluster'})","e5406f30":"train_dfc = pd.concat([\\\n    train_dfc,\n    pd.get_dummies(train_dfc['Policy_Sales_Channel_cluster'], prefix='PSCC', drop_first=True)\n], axis=1)","0a91ed46":"train_dfc = pd.concat([\\\n    train_dfc,\n    pd.get_dummies(train_dfc['Region_Code_cluster'], prefix='RCC', drop_first=True)\n], axis=1)","98abe23b":"train_dfc.columns","5aa451f3":"features_to_consider = ['Driving_License', 'Previously_Insured', 'VehicleAgeDe', 'self_defined_agegroups_en', 'Annual_Premium_de', 'Gender_ohe', 'Vehicle_Damage_ohe', 'PSCC_1', 'PSCC_2', 'PSCC_3', 'PSCC_4', 'PSCC_5', 'RCC_1', 'RCC_2', 'RCC_3', 'RCC_4', 'RCC_5']\ntarget = 'Response'","1166659d":"X = train_dfc.loc[:, features_to_consider].values\ny = train_dfc.loc[:, target].values","77976457":"from sklearn.model_selection import StratifiedKFold","88bed9fb":"skf = StratifiedKFold(n_splits=10, shuffle=True)","2ecb27cf":"train_dfc['Response'].value_counts(normalize=True).mul(100).round(2)","9cc326e6":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import f1_score, roc_auc_score","7de8488c":"performance_tree = {}","76b5bc1b":"for fold_no, (train_idx, val_idx) in enumerate(skf.split(X, y)):\n    print(f'Running fold {fold_no}')\n    X_train = X[train_idx, :]\n    X_val   = X[val_idx,   :]\n    y_train = y[train_idx]\n    y_val   = y[val_idx]\n    \n    tree = DecisionTreeClassifier().fit(X_train, y_train)\n    predictions = tree.predict(X_val)\n    \n    performance_tree[fold_no] = roc_auc_score(y_val, predictions)","8a10cdfe":"performance_tree","3c6ec48c":"from sklearn.ensemble import RandomForestClassifier","d933d2e9":"rf_performance = {}","06a0c687":"for fold_no, (train_idx, val_idx) in enumerate(skf.split(X, y)):\n    print(f'Running fold {fold_no}')\n    X_train = X[train_idx, :]\n    X_val   = X[val_idx,   :]\n    y_train = y[train_idx]\n    y_val   = y[val_idx]\n    \n    rf = RandomForestClassifier(n_estimators=50).fit(X_train, y_train)\n    predictions = rf.predict(X_val)\n    \n    rf_performance[fold_no] = roc_auc_score(y_val, predictions)","8689eb47":"rf_performance.values()","5937553b":"train_dfc = pd.concat([train_dfc,\n    pd.get_dummies(train_dfc['Region_Code'], prefix='Region_Code', drop_first=True)],\n         axis=1)","dcd66d1b":"train_dfc = pd.concat([train_dfc,\n    pd.get_dummies(train_dfc['Policy_Sales_Channel'], prefix='Policy_Sales_Channel', drop_first=True)],\n                          axis=1)","54a46acc":"features_to_consider = ['Age', 'Driving_License', 'Previously_Insured', 'VehicleAgeDe', 'Vintage', 'Gender_ohe', 'Vehicle_Damage_ohe'] + \\\n                        [i for i in train_dfc.columns if 'Region_Code' in i and i != 'Region_Code_cluster' and i != 'Region_Code'] + \\\n                        [i for i in train_dfc.columns if 'Policy_Sales_Channel' in i and i != 'Policy_Sales_Channel_cluster' and i != 'Policy_Sales_Channel']","95124f02":"X = train_dfc.loc[:, features_to_consider].values","38f9a28a":"rf_performance_orig = {}","1411e1be":"for fold_no, (train_idx, val_idx) in enumerate(skf.split(X, y)):\n    print(f'Running fold {fold_no}')\n    X_train = X[train_idx, :]\n    X_val   = X[val_idx,   :]\n    y_train = y[train_idx]\n    y_val   = y[val_idx]\n    \n    rf = RandomForestClassifier(n_estimators=15).fit(X_train, y_train)\n    predictions = rf.predict(X_val)\n    \n    rf_performance_orig[fold_no] = roc_auc_score(y_val, predictions)","28c0e87c":"rf_performance_orig","22f6ef7a":"Although this downsizing process didn't work out well but at least I got to know what happens, this was just something I've been meaning to try out and is **based on** something I've learnt during my time in Financial data science. \n\nApart from that, I know that while building a model, I'm missing many things like normalizing\/standardizing features, hyperparameter optimization, etc. but I'm going to skip it for now as I'm learning something new. Anyways, it was fun writing this one, peace.","b39f5757":"The performance is the worst imaginable. Should we use the original features?","6c87326e":"### Feature distribution in Train vs Test","d00959fe":"Observations:\n\n- People with no driver's license are not interested much (as Insurance people may ask for it during the process)\n- People who've not been insured before are way more interested than people who have their insurance\n- As Vehicle gets older, people tend to take insurance more\n- If a vehicle has been damaged before, people tend to respond. Maybe because they've had a bad experience where they had their vehicle damaged and the smallest of the part costed a lot","d7920da9":"4 customers only, which is okay.","56bd39fa":"I'm going to try something on the dataset that has to do with downsizing some of the features that you're going to see in the notebook. The code is pretty straightforward but if you have any questions\/suggestions\/comments, please let me know in the comments.","76668e44":"# Model Building","76038157":"No pattern at all, no point in binning `Vintage`","0c1314d5":"#### But first, `Region_Code` and `Policy_Sales_Channel` are in float, converting them to string","e2b0ee59":"Hmm. No missing values at all. To EDA we go!","4fba7d28":"### Lets figure they are related to the `Response` variable","5e17d137":"Response rate is increasing but very slowly. Let's define out own bins as per this.","33df0947":"Repeating the same clustering method for `Region_Code` as well","30f08174":"# EDA","701eef6b":"# Deciding on CV","c2865c82":"Interestingly, the `Age` distribution of `Response` = 0 and `Response` = 1 is very different. Also, there seems to be a lot of population interested between 40 and 50. What % exactly? Let's dive in!","6a698983":"`Policy_Sales_Channel` = 123 and 43 have 100% response rate! Let's look at these two `Policy_Sales_Channel` only","8a835c55":"Let's merge ages upto 29, 35 to 50 and 50 onwards","2c307d6c":"All the non-quantitative features have the same distribution in Train and Test. Now for continuous features:","958a8764":"### Deriving some features for categorical features with many values","fcecf9f2":"For categorical features:","30bf0a3c":"I'm going to use 10-fold stratified cross validation for this one","1deea080":"Why 10? No particular reason, could have used 11, 15, etc. as well.","e6d6e356":"# Feature Engineering","7b8aa335":"Same distributions again, which is good!","3cdff044":"It appears that the young population upto age 29 don't respond as they have a HUGE number of insurance options(that they need to research on) and since they have the energy and time, they don't response. As people enter their thirties, maybe because of their responsibilies towards family, to avoid further researching on their own, they respond much, much more. As people get old, they have their own contacts who can get them their insurance, whom they can trust. And as expected, a lot of interested people in the 40-50 age bucket.","37e4e32a":"Hmm... a ~15% increase on average! Nice!","11ccf116":"Hmm.. so there are only two customers with those `Policy_Sales_Channel`. But is that the case with test set as well? Let's find out.","404f8f5e":"I'm going to club similar `Policy_Sales_Channel` together on the basis of their Response rate using KMeans","29c70675":"But what about continuous features?"}}