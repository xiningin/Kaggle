{"cell_type":{"b863456d":"code","5f441e62":"code","664c1a21":"code","7cc4c38a":"code","b0aba98f":"code","c19bd2dd":"code","332095ba":"code","8b5b21b6":"code","356e92ae":"code","2a66f3e4":"code","f9435db6":"code","702a303d":"code","bbe50f65":"code","aeea9427":"code","773b22c5":"code","9e11fd02":"code","1e8d5f21":"code","eeb91f61":"code","9fb41500":"code","2a5433f6":"code","771421dc":"code","533541e3":"code","0288ab44":"code","5fa4d8e2":"code","b041902e":"code","3037e862":"code","072423bb":"code","fd6cf918":"code","de062157":"code","0af4fa13":"code","7b6974a9":"code","88e85f07":"code","6afda526":"code","58bea0e6":"code","0badd90a":"code","b1617a93":"code","f66e3761":"code","2781288a":"code","6b1d9752":"code","a64ef95b":"code","59030ab4":"code","eded4de9":"code","6c694944":"code","a5d98346":"code","65d0be67":"code","9504191b":"code","df472c62":"code","1acb4c12":"markdown","b543cb0f":"markdown","88d2e2be":"markdown","4d82100a":"markdown","fadeb5b8":"markdown","086d750f":"markdown","c8bf26f5":"markdown"},"source":{"b863456d":"#importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import classification_report, plot_confusion_matrix, plot_roc_curve,roc_curve, roc_auc_score\n\n","5f441e62":"data = pd.read_csv(\"\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")","664c1a21":"data.head()","7cc4c38a":"data.describe()","b0aba98f":"data.isnull().sum()","c19bd2dd":"data.info()","332095ba":"data.hist(figsize=(15,15))","8b5b21b6":"# % of Death events within the dataset\ndata.DEATH_EVENT.value_counts().plot.pie(explode=[0.05,0.05],autopct='%1.1f%%',shadow=True, figsize=(10,10))\nplt.title('the % of deaths')","356e92ae":"# % of sex counts within the dataset\ndata.sex.value_counts().plot.pie(explode=[0.05,0.05],autopct='%1.1f%%',shadow=True, figsize=(10,10))","2a66f3e4":"# Counts of Deaths and No Deaths according to sex\nplt.figure(figsize=(10,10))\nsns.countplot(x='sex',hue = 'DEATH_EVENT',data=data)\nplt.legend(['Death','No Death'])","f9435db6":"# % of people with anaemia within the dataset\ndata.anaemia.value_counts().plot.pie(explode=[0.05,0.05],autopct='%1.1f%%',shadow=True, figsize=(10,10))","702a303d":"# Count of deaths and no deaths against anaemia\nsns.countplot(x='anaemia',hue='DEATH_EVENT',data=data)\nplt.legend(['Death','No Death'])","bbe50f65":"# % of people who are smokers or non-smokers within the datasets \ndata.smoking.value_counts().plot.pie(explode=[0.05,0.05],autopct='%1.1f%%',shadow=True, figsize=(10,10))","aeea9427":"sns.countplot(x='smoking',hue='DEATH_EVENT',data=data)\nplt.legend(['Death','No Death'])","773b22c5":"# % of people with high blood pressure or no high blood pressure within the dataset\ndata.high_blood_pressure.value_counts().plot.pie(explode=[0.05,0.05],autopct='%1.1f%%',shadow=True, figsize=(10,10))","9e11fd02":"# Count of death or no death against high blood pressure\nsns.countplot(x='high_blood_pressure',hue='DEATH_EVENT',data=data)\nplt.legend(['Death','No Death'])","1e8d5f21":"# count of death or no death of sex against smoking\nsns.barplot(x='sex',y='smoking',hue='DEATH_EVENT',data=data)\nplt.legend(['Death','No Death'])","eeb91f61":"# count of death or no death of sex against anaemia\nsns.barplot(x='sex',y='anaemia',hue='DEATH_EVENT',data=data)\nplt.legend(['Death','No Death'])","9fb41500":"# count of death or no death of sex against anaemia\nsns.barplot(x='sex',y='high_blood_pressure',hue='DEATH_EVENT',data=data)\nplt.legend(['Death','No Death'])","2a5433f6":"#Correlation matrix of all attributes against each other\nsns.heatmap(data.corr())","771421dc":"#correlation of all columns against DEATH_EVENT column\ndata[data.columns[0:]].corr()['DEATH_EVENT'][:-1]","533541e3":"#we can see that most of the columns have little to 0 correlation\n#we will drop such columns as they are not that useful to us in prediction","0288ab44":"data = data.drop(columns=['diabetes','sex','smoking','high_blood_pressure','creatinine_phosphokinase','anaemia','platelets'])","5fa4d8e2":"#we are checking for outliers\nsns.boxplot(x=data.ejection_fraction)","b041902e":"#we can see that there are 2 outliers at 70 and 80\n#since there are only 2 we will go ahead and remove them","3037e862":"data = data[data['ejection_fraction']<70]","072423bb":"data.head(2)","fd6cf918":"#Standardize all columns except target column (DEATH_EVENT)\nssc = StandardScaler()\ndata.iloc[:,:-1]= ssc.fit_transform(data.iloc[:,:-1])","de062157":"data.head()","0af4fa13":"#split x and y sets\nx = data.iloc[:,:-1].values\ny = data[['DEATH_EVENT']]","7b6974a9":"print(x.shape)\nprint(y.shape)","88e85f07":"x_train, x_test, y_train, y_test = train_test_split(x,  y, train_size = 0.7, random_state = 42)","6afda526":"print(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","58bea0e6":"lgr = LogisticRegression()\n\nlgr.fit(x_train,y_train)\nlog_pred = lgr.predict(x_test)","0badd90a":"plot_confusion_matrix(lgr,x_test, y_test, normalize = 'true')","b1617a93":"print(classification_report(y_test, log_pred))","f66e3761":"bnb = BernoulliNB()\nbnb.fit(x_train,y_train)\nbnb_pred = bnb.predict(x_test)","2781288a":"print(classification_report(y_test, bnb_pred))","6b1d9752":"plot_confusion_matrix(bnb,x_test,y_test, normalize = 'true')","a64ef95b":"dtc = DecisionTreeClassifier()\ndtc.fit(x_train, y_train)\ndtc_pred = dtc.predict(x_test)","59030ab4":"print(classification_report(y_test, dtc_pred))","eded4de9":"plot_confusion_matrix(dtc, x_test, y_test, normalize = 'true')","6c694944":"rfc = RandomForestClassifier()\nrfc.fit(x_train,y_train)\nrfc_pred = rfc.predict(x_test)","a5d98346":"print(classification_report(y_test, rfc_pred))","65d0be67":"plot_confusion_matrix(rfc, x_test, y_test, normalize = 'true')","9504191b":"fig, ax = plt.subplots(figsize = (15,10))\n\nplot_roc_curve(dtc,x_test,y_test, ax=ax)\nplot_roc_curve(rfc,x_test,y_test, ax=ax)\nplot_roc_curve(bnb,x_test,y_test, ax=ax)\nplot_roc_curve(lgr,x_test,y_test, ax=ax)","df472c62":"#Juding by the Area Under the Curve (AUC) we can tell how well a classifier is predicting.\n#Values above 0.5 indicate that is predicting fairly well. \n# 0.5 means the model is randomly guessing while values below 0.5 show that the model is doing a poor job at prediction\n#looking at this graph we can say for certain that Random Forest is predicting very well with the highest auc score of 0.9\n#Decision Tree has the least auc score but not too bad as well at 0.79","1acb4c12":"# Logistic Regression","b543cb0f":"# Bernoulli Naive Bayes","88d2e2be":"# Dataset Description\n\nColumns:\n\n* age: the age of the patients\n* anaemia: whether patient has anaemia or not (decrease in red blood cells)\n* creatinine_phosphokinase: Level of CPK enzyme in blood (mcg\/L)\n* diabetes: whether patient has diabetes or not\n* ejection_fraction: How much blood the left ventricle pumps out with each contraction\n* high_blood_pressure: whether patient has high blood pressure or not\n* platelets: No. of platelets within blood (responsible for blood clotting)\n* serum_creatinine: Level of creatinine in blood (estimates how well kidneys are filtering)\n* serum_sodium: levels of sodium in blood \n* DEATH_EVENT: whether patient died or not","4d82100a":"# Random Forest Classifier","fadeb5b8":"# ROC AUC CURVE","086d750f":"# Decision Tree Classifier","c8bf26f5":"# Data Visualization"}}