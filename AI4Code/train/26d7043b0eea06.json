{"cell_type":{"1b3c1a5a":"code","7efcd9d5":"code","b0e1de88":"code","37cbc32b":"code","d7da06e4":"code","8a2fd5a5":"code","cfbab27d":"code","7eb1ad9d":"code","dba0db77":"code","1c3d8d06":"code","f07f97da":"code","a1ef5e56":"code","1149c413":"code","3b7fbe9e":"code","87525da0":"code","a13fcc0a":"code","54d96e89":"code","53b683df":"code","98cb6471":"code","da68e2bd":"code","2c11a82f":"code","61fde5f1":"code","261a919a":"code","e1cc8aea":"code","5d26559a":"code","756d0765":"code","c525094e":"code","e8910665":"code","d8fd2e2f":"code","366ab381":"code","e13475ed":"code","f8affad3":"code","8f069452":"code","ee9750ab":"code","a704c29f":"code","57f0cfe5":"code","f7cb32b5":"code","af76f949":"code","1581ee4e":"code","e45e85d3":"code","72458b01":"code","e601f17b":"code","59c92f28":"code","c5cf0637":"code","40885920":"code","88e60cf5":"code","69b15e99":"code","d1b290d4":"code","49484a23":"code","8f538c9d":"code","d4aedc80":"code","2533d10a":"code","bc30aba0":"code","888a1c24":"code","c7a44f03":"code","b9ba773a":"code","149e25ce":"code","8f984e98":"code","77b00cf0":"code","d120c059":"code","8be76222":"code","9da5f947":"code","2e1daed3":"code","dc27da30":"code","4073da15":"code","54bb0797":"code","6fc4413c":"code","a3d0672a":"code","34db20df":"code","6f43c5c4":"code","e983244b":"code","42b2c956":"code","6d96ef95":"code","d8cebd18":"code","20eac31f":"code","a2c940cf":"code","c1631e16":"code","350df42e":"code","973c7b15":"code","6c2d41d5":"code","31a0c893":"code","00b2f65f":"code","5641c393":"code","f29173dd":"code","d308aef9":"code","4682058b":"code","4201215a":"code","c0ea4b9c":"code","121b2af9":"code","0b05de91":"code","4d30f789":"code","2838644b":"code","14173691":"code","4da975f6":"code","de1da1e1":"code","4f44ebda":"code","69fe3bec":"code","a7f33322":"code","74ec6938":"code","674b7d4c":"code","831d9dbe":"code","72b16ca8":"code","e6fb37f1":"code","559125b5":"code","cfe102b1":"code","4f051bb9":"code","28885450":"code","22716775":"code","7d5a8aaf":"code","404a6663":"code","a1fb6f7a":"markdown","32242bb1":"markdown","f9a6bf83":"markdown","bf631665":"markdown","c65ad1c1":"markdown","f409cece":"markdown","5b402214":"markdown","f4ca00af":"markdown","c66bea47":"markdown","ecaabbd3":"markdown","b03ba98f":"markdown","0438f058":"markdown","2b59f9ba":"markdown","2085284a":"markdown","6958a8aa":"markdown","e7d95924":"markdown","4729c8de":"markdown","2f0d7caf":"markdown","8727b690":"markdown","d92ac204":"markdown","53a85c94":"markdown","995cbaff":"markdown","0d2b0997":"markdown","6bce4eb3":"markdown","381532aa":"markdown","a0a10f61":"markdown","a4b4ade8":"markdown","b389ab4b":"markdown","b69b50c9":"markdown","2fe40023":"markdown","91efa19b":"markdown","6e5aeeae":"markdown","2cc68137":"markdown","f5fd63f3":"markdown","fbbe4373":"markdown","83447efa":"markdown","ef787477":"markdown","c95246b6":"markdown","a004dc73":"markdown"},"source":{"1b3c1a5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  #visualization tool\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\",\"..\/input\"]).decode(\"utf8\"))\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7efcd9d5":"data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')","b0e1de88":"data.info()","37cbc32b":"data.corr()","d7da06e4":"f,ax=plt.subplots(figsize=(18,18))\nsns.heatmap(data.corr(),annot=True,linewidths=.5,fmt='.1f',ax=ax)","8a2fd5a5":"data.head(10) #bastan 10taneyi g\u00f6ster","cfbab27d":"data.columns","7eb1ad9d":"data.Speed.plot(kind='line',color='g',label='speed',linewidth=1,alpha=0.5,grid=True,linestyle=':')\ndata.Defense.plot(color='r',label='Defense',linewidth=1,alpha=0.5,grid=True,linestyle='-.')\nplt.legend(loc='upper right') # sa\u011f \u00fcst k\u00f6\u015feye label i koy\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Plot')\n#plt.show() dersek plotun \u00fcst\u00fcndeki Text silinir\n","dba0db77":"# x = attack , y=defense\ndata.plot(kind='scatter',x='Attack',y='Defense',alpha=1,color='red')\nplt.xlabel('Attack')\nplt.ylabel('Defense')\nplt.title('Attack Defense Scatter Plot')\nplt.show()","1c3d8d06":"#farkl\u0131 yolla \u00fcstteki plot\nplt.scatter(data.Attack,data.Defense,color='r',alpha=1)\nplt.show()","f07f97da":"data.Speed.plot(kind='hist',bins=12,figsize=(5,5)) #bins = bar say\u0131s\u0131\nplt.show()","a1ef5e56":"data.Speed.plot(kind='hist',bins=12,figsize=(5,5)) #bins = bar say\u0131s\u0131\n\nplt.clf() #plot u silmeye yarar","1149c413":"#create dictionary and look its keys and values\ndictionary = {'spain' : 'madrid','usa' : 'vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())","3b7fbe9e":"dictionary['spain'] = \"barcelona\"    # update existing entry\nprint(dictionary)\ndictionary['france'] = \"paris\"       # Add new entry\nprint(dictionary)\ndel dictionary['spain']              # remove entry with key 'spain'\nprint(dictionary)\nprint('france' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)\n","87525da0":"#del dictionary         # delete entire dictionary  haf\u0131zadan siler   \nprint(dictionary)       # it gives error because dictionary is deleted","a13fcc0a":"series = data['Defense']        # data['Defense'] = series\nprint(type(series))\ndata_frame = data[['Defense']]  # data[['Defense']] = data frame\nprint(type(data_frame))","54d96e89":"# Comparison operator\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","53b683df":"# 1 - Filtering Pandas data frame\nx = data['Defense']>200     # There are only 3 pokemons who have higher defense value than 200\ndata[x]","98cb6471":"# 2 - Filtering pandas with 'logical_and' function \n# There are only 2 pokemons who have higher defence value than 200 and higher attack value than 100\ndata[np.logical_and(data['Defense']>200, data['Attack']>100 )]","da68e2bd":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['Defense']>200) & (data['Attack']>100)]","2c11a82f":"i=0\nwhile i!=5:\n    print(\"i is: \",i)\n    i+=1\nprint(\"i is 5\")","61fde5f1":"i=0\nwhile i!=5:\n    print(\"i is: \",i)\n    i+=1\nprint(i,\"is 5\")","261a919a":"lis=[1,2,3,4,5]\nfor i in lis:\n    print(\"i is : \",i)\nprint(\" \")\n\n    ","e1cc8aea":"# Enumerate index and value of list\nlis=[1,2,3,4,5]\nfor index, value in enumerate(lis):\n    print(index,\":\",value)\nprint(\"\")\n\n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n#For pandas\n# For pandas we can achieve index and value\nfor index,value in data[['Attack']][0:1].iterrows():\n    print(index,\" : \",value)","5d26559a":"def tuple_ex():\n    \"\"\" return defined t tuple\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuple_ex()\nprint(a,b,c)","756d0765":"x = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","c525094e":"# What if there is no local scope\nx = 5\ndef f():\n    y = 2*x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x  \n# First local scope searched, then global scope searched, if two of them cannot be found lastly built in scope searched.\n#fonksiyon \u00f6nce local e bakar de\u011fi\u015fken var m\u0131 diye e\u011fer yoksa o zaman global e bakar. E\u011fer her ikiside varsa local i ele al\u0131r.","e8910665":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)","d8fd2e2f":"def square():\n    def zz():\n        a=5\n        b=3\n        x=a+b\n        return x\n    return zz()**2\nprint(square())","366ab381":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n# what if we want to change default arguments\n# o zaman fonksiyon yeni parametreleri kullan\u0131r\nprint(f(5,4,3))","e13475ed":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\nprint(\"\")\n\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               \n        print(key, \" \", value)\nf(country = 'spain', capital = 'madrid', population = 123456)","f8affad3":"# lambda function\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","8f069452":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","ee9750ab":"# empty list\nprint(list())\n\n# vowel string\nvowel_string = 'aeiou'\nprint(list(vowel_string))\n\n# vowel tuple\nvowel_tuple = ('a', 'e', 'i', 'o', 'u')\nprint(list(vowel_tuple))\n\n# vowel list\nvowel_list = ['a', 'e', 'i', 'o', 'u']\nprint(list(vowel_list))","a704c29f":"# iteration example\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","57f0cfe5":"# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2) #s\u0131k\u0131\u015ft\u0131rmak, birle\u015ftirmek\nprint(z)\nz_list = list(z)\nprint(z_list)","f7cb32b5":"un_zip = zip(*z_list) #unzip yapmay\u0131 * ile sa\u011flad\u0131k\nun_list1,un_list2 = list(un_zip) # unzip listeyi 'tuple' a \u00e7evirdi\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))\nprint(type(list(un_list2))) #type \u0131 tekrar list e \u00e7evirdik","af76f949":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ] # list of comprehension\nprint(num2)","1581ee4e":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2) ","e45e85d3":"hiz_ort=sum(data.Speed)\/len(data.Speed)\nprint(hiz_ort)\ndata[\"speed_level\"]=[\"high\" if i > hiz_ort else \"low\" for i in data.Speed]\ndata.loc[:10,[\"speed_level\",\"Speed\"]]","72458b01":"data.head() # # head shows first 5 rows","e601f17b":"data.tail() #son 5","59c92f28":"# columns gives column names of features\ndata.columns","c5cf0637":"data.shape","40885920":"data.info()","88e60cf5":"# For example lets look frequency of pokemom types\nprint(data['Type 1'].value_counts(dropna =False))  # if there are nan values that also be counted\n# As it can be seen below there are 112 water pokemon or 70 grass pokemon","69b15e99":"data.describe()","d1b290d4":"# For example: compare attack of pokemons that are legendary  or not\n# Black line at top is max\n# Blue line at top is 75%\n# Green line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata.boxplot(column='Attack',by = 'Legendary')","49484a23":"# Firstly I create new data from pokemons data to explain melt nore easily.\ndata_new = data.head()    # I only take 5 rows into new data\ndata_new","8f538c9d":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'Name', value_vars= ['Attack','Defense']) # data_new 5 elemanl\u0131 ama 5 attack 5 defense oldu\u011fu i\u00e7in melted toplam 10 elemanl\u0131\nmelted","d4aedc80":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'Name', columns = 'variable',values='value')","2533d10a":"# Firstly lets create 2 data frame\ndata1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) \n# axis = 0 : adds dataframes in row as vertical\n#ignore_index=True : ignore index (#) and assign new indexes\nconc_data_row","bc30aba0":"data1 = data['Attack'].head()\ndata2= data['Defense'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) # axis = 1 : adds dataframes in column as horizontal\nconc_data_col","888a1c24":"data.dtypes","c7a44f03":"# lets convert object(str) to categorical and int to float.\ndata['Type 1'] = data['Type 1'].astype('category')\ndata['Speed'] = data['Speed'].astype('float')\ndata.dtypes","b9ba773a":"data.info()","149e25ce":"# Lets chech Type 2\ndata[\"Type 2\"].value_counts(dropna =False) # e\u011fer NaN varsa b\u0131rakma onu da drop et anlam\u0131nda  (dropna =False)\n# As you can see, there are 386 NAN value","8f984e98":"# Lets drop nan values\ndata1=data   # also we will use data to fill missing value so I assign it to data1 variable\ndata1[\"Type 2\"].dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n# So does it work ?\n#data1 art\u0131k nan de\u011ferlerinin \u00e7\u0131kar\u0131lm\u0131\u015f halidir","77b00cf0":"assert  data['Type 2'].notnull().all() # returns nothing because we drop nan values\n#hata verdi \u00e7\u00fcnk\u00fc nan de\u011ferlerini az \u00f6nce kald\u0131rm\u0131\u015ft\u0131k ","d120c059":"data[\"Type 2\"].fillna('empty',inplace = True)","8be76222":"assert  data['Type 2'].notnull().all() # returns nothing because we do not have nan values","9da5f947":"data.head()","2e1daed3":"# # With assert statement we can check a lot of thing. For example\n#assert data.columns[1] == 'Name' # bu sat\u0131r do\u011fru oldu\u011fu i\u00e7in herhangi bir hata almay\u0131z\n#assert data.Speed.dtypes == np.int # bu sat\u0131r do\u011fru oldu\u011fu i\u00e7in herhangi bir hata almay\u0131z\n#assert data.columns[1] == 'HP' #bu sat\u0131r do\u011fru olmad\u0131\u011f\u0131 i\u00e7in hata al\u0131r\u0131z","dc27da30":"# data frames from dictionary\ncountry = [\"Spain\",\"France\"]\npopulation = [\"11\",\"12\"]\nlist_label = [\"country\",\"population\"]\nlist_col = [country,population]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","4073da15":"# Add new columns\ndf[\"capital\"] = [\"madrid\",\"paris\"]\ndf","54bb0797":"# Broadcasting\ndf[\"income\"] = 0 #Broadcasting entire column\ndf","6fc4413c":"# Plotting all data \ndata1 = data.loc[:,[\"Attack\",\"Defense\",\"Speed\"]]\ndata1.plot()\n# it is confusing","a3d0672a":"# subplots\ndata1.plot(subplots = True)\nplt.show()","34db20df":"# scatter plot  \ndata1.plot(kind = \"scatter\",x=\"Attack\",y = \"Defense\")\nplt.show()","6f43c5c4":"# hist plot  \ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True) \n# range: y ekseni 0dan 250ye kadar deger als\u0131n\n# normed:  datay\u0131 0 ile 1 aras\u0131nda normalize  et","e983244b":"# histogram subplot with cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True) #artarak giden bir g\u00f6r\u00fcnt\u00fc olu\u015fturur\nplt.savefig('graph.png')\nplt","42b2c956":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","6d96ef95":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2 ","d8cebd18":"# Now we can select according to our date index\nprint(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","20eac31f":"# We will use data2 that we create at previous part\ndata2.resample(\"A\").mean() \n# A y\u0131llar\u0131 temsil eder ve her y\u0131l\u0131n ortalamas\u0131n\u0131 al\u0131r","a2c940cf":"# Lets resample with month\ndata2.resample(\"M\").mean()\n# As you can see there are a lot of nan because data2 does not include all months\n# M aylar\u0131 temsil eder ve her ay\u0131n ortalamas\u0131n\u0131 al\u0131r. Listenin ilk tarihinden son tarihine kadar olan aylar\u0131 g\u00f6sterir ve listede olmayan aradaki aylar\u0131 da nan olarak g\u00f6sterir ","c1631e16":"# In real life (data is real. Not created from us like data2) we can solve this problem with interpolate\n# We can interpolete from first value\ndata2.resample(\"M\").first().interpolate(\"linear\")\n# numaric olan columnlar\u0131n NaN de\u011ferlerini linear olarak doldurur","350df42e":"# Or we can interpolate with mean()\ndata2.resample(\"M\").mean().interpolate(\"linear\")","973c7b15":"\ndata= data.set_index(\"#\") # yeni index ayarlad\u0131k \ndata.head()","6c2d41d5":"# indexing using square brackets\ndata[\"HP\"][1]","31a0c893":"# using column attribute and row label\ndata.HP[1]","00b2f65f":"# using loc accessor\ndata.loc[1,[\"HP\"]]","5641c393":"# Selecting only some columns\ndata[[\"HP\",\"Attack\"]]","f29173dd":"# Difference between selecting columns: series and dataframes\nprint(type(data[\"HP\"]))     # series\nprint(type(data[[\"HP\"]]))   # data frames","d308aef9":"# Slicing and indexing series\ndata.loc[1:10,\"HP\":\"Defense\"]   # 10 and \"Defense\" are inclusive","4682058b":"# Reverse slicing \ndata.loc[10:1:-1,\"HP\":\"Defense\"] ","4201215a":"# From something to end\ndata.loc[1:10,\"Speed\":]","c0ea4b9c":"# Creating boolean series\nboolean = data.HP > 200\ndata[boolean]","121b2af9":"# Combining filters\nfirst_filter = data.HP > 150\nsecond_filter = data.Speed > 35\ndata[first_filter & second_filter]","0b05de91":"# Filtering column based others\ndata.HP[data.Speed<15]","4d30f789":"# Plain python functions\ndef div(n):\n    return n\/2\ndata.HP.apply(div)","2838644b":"# Or we can use lambda function\ndata.HP.apply(lambda n : n\/2)","14173691":"# Defining column using other columns\ndata[\"total_power\"] = data.Attack + data.Defense\ndata.head()","4da975f6":"# our index name is this:\nprint(data.index.name)\n# lets change it\ndata.index.name = \"index_name\"\ndata.head()","de1da1e1":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data3 then change index \ndata3 = data.copy()\n# lets make index start from 100. It is not remarkable change but it is just example\ndata3.index = range(100,900,1)\ndata3.head()","4f44ebda":"# We can make one of the column as index. I actually did it at the beginning of manipulating data frames with pandas section\n# It was like this\n# data= data.set_index(\"#\")\n# also you can use \n# data.index = data[\"#\"]","69fe3bec":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"Type 1\",\"Type 2\"]) # yeni indexler\ndata1.head(100)\n# data1.loc[\"Fire\",\"Flying\"] # howw to use indexes","a7f33322":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","74ec6938":"# pivoting pandas \u00f6zelligi\ndf.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")","674b7d4c":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1\n# lets unstack it","831d9dbe":"# level determines indexes\ndf1.unstack(level=0)\n# index=0'\u0131 indexlikten \u00e7\u0131kar","72b16ca8":"df1.unstack(level=1)\n# index=1'i indexlikten \u00e7\u0131kar","e6fb37f1":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2\n#df1'in indexlerinin yerini degistirdik","559125b5":"df\n","cfe102b1":"# df.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")\npd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","4f051bb9":"df","28885450":"# according to treatment take means of other features\ndf.groupby(\"treatment\").mean()   # mean is aggregation \/ reduction method\n#df'yi 'treatment' a g\u00f6re grupla\n# there are other methods like sum, std,max or min","22716775":"# we can only choose one of the feature\ndf.groupby(\"treatment\").age.max() \n# grupla ve ya\u015fa g\u00f6re ort al","7d5a8aaf":"# Or we can choose multiple features\ndf.groupby(\"treatment\")[[\"age\",\"response\"]].min()\n#hangi s\u00fctunlar\u0131 almas\u0131n\u0131 s\u00f6yledik ","404a6663":"df.info()\n# as you can see gender is object\n# However if we use groupby, we can convert it categorical data. \n# Because categorical data uses less memory, speed up operations like groupby\n#df[\"gender\"] = df[\"gender\"].astype(\"category\")\n#df[\"treatment\"] = df[\"treatment\"].astype(\"category\")\n#df.info()","a1fb6f7a":"# 5-MANIPULATING DATA FRAMES WITH PANDAS\n\n\n**INDEXING DATA FRAMES**\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","32242bb1":"zip(): zip lists","f9a6bf83":"**BUILDING DATA FRAMES FROM SCRATCH**\n\n* We can build data frames from csv as we did earlier.\n* Also we can build dataframe from dictionaries\n* zip() method: This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.\n* Adding new column\n* Broadcasting: Create new column and assign a value to entire column","bf631665":"# 3.CLEANING DATA\n\n\n**DIAGNOSE DATA for CLEANING**\n\nWe need to diagnose and clean data before exploring.\n\nUnclean data:\n\n* Column name inconsistency like upper-lower case letter or space between words\n* missing data\n* different language\n\nWe will use head, tail, columns, shape and info methods to diagnose data","c65ad1c1":"**LAMBDA FUNCTION**\n\n*Faster way of writing function*","f409cece":"**NESTED FUNCTION**\n* function inside function.","5b402214":"**INDEX OBJECTS AND LABELED DATA**\n\nindex: sequence of label","f4ca00af":"**CATEGORICALS AND GROUPBY**","c66bea47":"[i + 1 for i in num1 ]: list of comprehension\n\ni +1: list comprehension syntax\n\nfor i in num1: for loop syntax\n\ni: iterator\n\nnum1: iterable object","ecaabbd3":"**FILTERING DATA FRAMES**\n\nCreating boolean series Combining filters Filtering column based others","b03ba98f":"**MISSING DATA and TESTING WITH ASSERT**\n\nIf we encounter with missing data, what we can do:\n\n* leave as is\n* drop them with dropna()\n* fill missing value with fillna()\n* fill missing values with test statistics like mean\n* Assert statement: check that you can turn on or turn off when you are done with your testing of the program","0438f058":"**DATA TYPES**\n\nThere are 5 basic data types: object(string),boolean, integer, float and categorical.\nWe can make conversion data types like from str to categorical or from int to float\nWhy is category important:\n\n* make dataframe smaller in memory\n* can be utilized for anlaysis especially for sklearn(we will learn later)","2b59f9ba":"**ITERATORS**","2085284a":"**VISUAL EXPLORATORY DATA ANALYSIS**\n\n* Plot\n* Subplot\n* Histogram:\n    * bins: number of bins\n    * range(tuble): min and max values of bins\n    * normed(boolean): normalize or not\n    * cumulative(boolean): compute cumulative distribution","6958a8aa":"**SLICING DATA FRAME**\n* Difference between selecting columns\n   * Series and data frames\n* Slicing and indexing series\n* Reverse slicing\n* From something to end","e7d95924":"**DEFAULT and FLEXIBLE ARGUMENTS**\n* default : varsay\u0131lan \n* Default argument example:\n\ndef f(a, b=1):\n\n  \"\"\" b = 1 is default argument\"\"\"\n  \n* Flexible argument example:\n\ndef f(*args):\n\n \"\"\" *args can be one or more\"\"\"\n\ndef f(** kwargs)\n\n \"\"\" **kwargs is a dictionary\"\"\"\n","4729c8de":"**STACKING and UNSTACKING DATAFRAME**\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","2f0d7caf":"**F\u0130LTERING**","8727b690":"# 4. PANDAS FOUNDATION\n\n","d92ac204":"**SCOPE**\n\n*What we need to know about scope:*\n\n* global: defined main body in script\n* local: defined in a function\n* built in scope: names in predefined built in scope module such as print, len\n","53a85c94":"****D\u0130CT\u0130ONARY****","995cbaff":"**WHILE and FOR LOOPS\u00b6**","0d2b0997":"**PIVOTING DATA FRAMES**\n\npivoting: reshape tool","6bce4eb3":"**ANONYMOUS FUNCT\u0130ON**\n\nLike lambda function but it can take more than one arguments.\n\n* map(func,seq) : applies a function to all the items in a list","381532aa":"# 2. PYTHON DATA SCIENCE TOOLBOX\n","a0a10f61":"**MELTING DATA FRAMES**\n\nReverse of pivoting","a4b4ade8":"**INDEXING PANDAS TIME SERIES**\n* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","b389ab4b":" 1-Keys have to be immutable objects like string, boolean, float, integer or tubles\n 2-List is not immutable\n 3-Keys are unique\n","b69b50c9":"**LOG\u0130C VE BOOLEAN**","2fe40023":"**CONCATENATING DATA** #birle\u015ftirilen veriler\n\nWe can concatenate two dataframe","91efa19b":"**VISUAL EXPLORATORY DATA ANALYSIS**\n* Box plots: visualize basic statistics like outliers, min\/max or quantiles","6e5aeeae":"**EXPLORATORY DATA ANALYSIS**\nvalue_counts(): Frequency counts\n\noutliers: the value that is considerably higher or lower from rest of the data\n\n* Lets say value at 75% is Q3 and value at 25% is Q1.\n* Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\n* We will use describe() method. Describe method includes:\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n\nWhat is quantile?\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17\n* \n* The median is the number that is in middle of the sequence. In this case it would be 11.\n* \n* The lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n* \n* The upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above.","2cc68137":"**LIST COMPREHENS\u0130ON**\n\nOne of the most important topic of this kernel\n\nWe use list comprehension for data analysis often.\nlist comprehension: collapse for loops for building lists into a single line\nEx: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is unnecessarily long. We can make it one line code that is list comprehension.","f5fd63f3":"**TRANSFORMING DATA**\n* Plain python functions\n* Lambda function: to apply arbitrary python function to every element\n* Defining column using other columns","fbbe4373":"**TIDY DATA**\n\nWe tidy data with melt().","83447efa":"**HIERARCHICAL INDEXING**\n\nSetting indexing","ef787477":"**PIVOTING DATA**\n\nReverse of melting.","c95246b6":"**PANDAS**\n* CSV: comma - separated values","a004dc73":"**RESAMPLING PANDAS TIME SERIES**\n* Resampling: statistical method over different time intervals\n   * Needs string to specify frequency like \"M\" = month or \"A\" = year\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: increase date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019\n   * https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.interpolate.html"}}