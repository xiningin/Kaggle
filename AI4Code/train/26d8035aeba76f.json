{"cell_type":{"fdd77a19":"code","c906e471":"code","3791b15c":"code","818616b4":"code","5a9f2e92":"code","5fa28a8b":"code","36f12d56":"code","6203e395":"code","d16d548f":"code","ac378384":"code","fca26132":"code","001661ed":"code","e1479c64":"code","44df33e5":"code","42cb23c0":"code","0b025c03":"code","c2d42a16":"code","a2f3a5c4":"code","fb2ee61e":"code","31bf8657":"code","18ea6063":"code","e6505557":"code","6dc7818b":"code","62d5ba7e":"code","d0b5bf66":"code","1b304a33":"code","a90d2f60":"code","a6b83451":"code","802d6f84":"code","a6a2be56":"code","d5644093":"code","5ff52e24":"code","8bd8de49":"code","ecd67633":"code","f317660d":"code","5eecb655":"code","8b0606ba":"code","58b274aa":"code","4901e2d0":"code","4aaafb62":"code","bef04a47":"code","1d1bc37d":"code","c9f5ad4f":"code","6340f5c4":"code","d49f2d1f":"code","e8fbd74f":"code","a963566f":"code","adf01f91":"code","fdf4fe9b":"code","9129eea8":"code","14afd204":"code","124fbd03":"code","d3713a07":"code","83f93246":"code","b04b1a40":"code","6065e7e3":"code","566b4a8f":"code","8b6b0ec0":"code","da080e6a":"code","7893e507":"code","d63f3a4a":"code","fac9d5b9":"code","b331c027":"code","d29cd768":"markdown","095845e4":"markdown","b65de1ba":"markdown","99cde1f4":"markdown","600153b6":"markdown","834550dd":"markdown","403539cf":"markdown","a9cb5a6d":"markdown","80518ec9":"markdown","ddcddd64":"markdown","4e8ef999":"markdown","4a082b32":"markdown","c0100ab6":"markdown","99e033ba":"markdown","b75080a4":"markdown","09acaa51":"markdown","cbed273e":"markdown","fa68506e":"markdown","6343edb2":"markdown","11175b5a":"markdown","09a39f56":"markdown","e20bbfe7":"markdown","385c38ab":"markdown","79b36c2b":"markdown","cc16db50":"markdown","ffbe2c62":"markdown","1be0c37a":"markdown","71e3dc7c":"markdown","54647888":"markdown","9a6347c4":"markdown","4b7293c8":"markdown","b7d8f28e":"markdown","80cf3da7":"markdown","415fa76e":"markdown","3c9178ca":"markdown","bc0aab1c":"markdown","9f6ff1e3":"markdown","9585337f":"markdown","b728f35f":"markdown","4d9193a7":"markdown","ca4b92e0":"markdown","65e9f879":"markdown","a586c5b6":"markdown","4292c822":"markdown","556bfd0d":"markdown","88d782f4":"markdown","c5bd1188":"markdown","3c30d9b1":"markdown","ed2eff9f":"markdown","7c604efa":"markdown","ba28ea96":"markdown","eb62cc06":"markdown","b8f7fae5":"markdown"},"source":{"fdd77a19":"# %load_ext watermark\n# %watermark -a \"Sebastian Raschka\" -u -d -p numpy,pandas,matplotlib,sklearn","c906e471":"from IPython.display import Image\n%matplotlib inline","3791b15c":"import pandas as pd\nfrom io import StringIO\nimport sys\nimport numpy as np\ndf = pd.DataFrame([[1,2,3,4],[5,6,np.nan,8],[10,11,12,np.nan]], columns=['A','B','C','D'])\n# '''A,B,C,D\n# 1.0,2.0,3.0,4.0\n# 5.0,6.0,,8.0\n# 10.0,11.0,12.0,'''\n\n# # If you are using Python 2.7, you need\n# # to convert the string to unicode:\n\n# if (sys.version_info < (3, 0)):\n#     csv_data = unicode(csv_data)\n\n# df = pd.read_csv(StringIO(csv_data))\ndf","818616b4":"df.isnull()","5a9f2e92":"df.isnull().sum()","5fa28a8b":"df.loc[:,df.isnull().sum() == 0]","36f12d56":"df.isnull().sum(axis=1)","6203e395":"# access the underlying NumPy array\n# via the `values` attribute\ndf.values","d16d548f":"# remove rows that contain missing values\n\ndf.dropna(axis=0)","ac378384":"# remove columns that contain missing values\n\ndf.dropna(axis=1)","fca26132":"# remove columns that contain missing values\n\ndf.dropna(axis=1)","001661ed":"# only drop rows where all columns are NaN\n\ndf.dropna(how='all')  ","e1479c64":"# drop rows that have less than 3 real values \n\ndf.dropna(thresh=4)","44df33e5":"# only drop rows where NaN appear in specific columns (here: 'C')\n\ndf.dropna(subset=['C'])","42cb23c0":"# again: our original array\ndf.values","0b025c03":"# impute missing values via the column mean\n# next time we have a sklearn functionality tutorial :D\nfrom sklearn.preprocessing import Imputer \n\nimr = Imputer(missing_values='NaN', strategy='mean', axis=0)\nimr = imr.fit(df.values)\nimputed_data = imr.transform(df.values)\nimputed_data","c2d42a16":"from sklearn.impute import SimpleImputer\n# impute along each column. sklearn 0.20.2 \ndf_copy = df.copy()\nprint(df_copy)\nimr_c = SimpleImputer(missing_values=np.nan, strategy='mean') # strategy median, constant, most_frequent\nimr_c = imr_c.fit(df_copy.values)\nimputed_data = imr_c.transform(df_copy.values)\nimputed_data","a2f3a5c4":"# Image(filename='images\/04_01.png', width=400) ","fb2ee61e":"# Image(filename='images\/04_02.png', width=300) ","31bf8657":"import pandas as pd\n\ndf = pd.DataFrame([['green', 'M', 10.1, 'class2'],\n                   ['red', 'L', 13.5, 'class1'],\n                   ['blue', 'XL', 15.3, 'class2']])\n\ndf.columns = ['color', 'size', 'price', 'classlabel']\ndf","18ea6063":"# ordered labels \nsize_mapping = {'XL': 3,\n                'L': 2,\n                'M': 1}\n\ndf['size'] = df['size'].map(size_mapping)\ndf","e6505557":"?map","6dc7818b":"def addition(n): \n    return n + n \n  \n# We double all numbers using map() \nnumbers = (1, 2, 3, 4) \nresult = map(addition, numbers) \nprint(list(result)) ","62d5ba7e":"\n# Double all numbers using map and lambda \n  \nnumbers = (1, 2, 3, 4) \nresult = map(lambda x: x + x, numbers) \nprint(list(result)) \n","d0b5bf66":"# inverse label encoding\ninv_size_mapping = {v: k for k, v in size_mapping.items()}\ndf['size'].map(inv_size_mapping)","1b304a33":"import numpy as np\n\n# create a mapping dict\n# to convert class labels from strings to integers\nclass_mapping = {label: idx for idx, label in enumerate(np.unique(df['classlabel']))}\nclass_mapping","a90d2f60":"# to convert class labels from strings to integers\ndf['classlabel'] = df['classlabel'].map(class_mapping)\ndf","a6b83451":"# reverse the class label mapping\ninv_class_mapping = {v: k for k, v in class_mapping.items()}\ndf['classlabel'] = df['classlabel'].map(inv_class_mapping)\ndf","802d6f84":"from sklearn.preprocessing import LabelEncoder\n\n# Label encoding with sklearn's LabelEncoder\nclass_le = LabelEncoder()\ny = class_le.fit_transform(df['classlabel'].values)\ny","a6a2be56":"# reverse mapping\nclass_le.inverse_transform(y)","d5644093":"# color \nX = df[['color', 'size', 'price']].values\n\ncolor_le = LabelEncoder()\nX[:, 0] = color_le.fit_transform(X[:, 0])\nX","5ff52e24":"from sklearn.preprocessing import OneHotEncoder\n\nohe = OneHotEncoder(categorical_features=[0])\nohe.fit_transform(X).toarray()","8bd8de49":"# return dense array so that we can skip\n# the toarray step\n\nohe = OneHotEncoder(categorical_features=[0], sparse=False)\nohe.fit_transform(X)","ecd67633":"# one-hot encoding via pandas\n\npd.get_dummies(df[['price', 'color', 'size']])","f317660d":"# multicollinearity guard in get_dummies\n\npd.get_dummies(df[['price', 'color', 'size']], drop_first=True)","5eecb655":"# multicollinearity guard for the OneHotEncoder\n\nohe = OneHotEncoder(categorical_features=[0])\nohe.fit_transform(X).toarray()[:, 1:]","8b0606ba":"from sklearn.preprocessing import OneHotEncoder\nenc = OneHotEncoder(handle_unknown='ignore')\nX = [['Male', 1], ['Female', 3], ['Female', 2]]\nenc.fit(X)","58b274aa":"print(enc.categories_)\n\nprint(enc.transform([['Female', 1], ['Male', 4]]).toarray())\n\n\nprint(enc.inverse_transform([[0, 1, 1, 0, 0], [0, 0, 0, 1, 0]]))\n\n\nenc.get_feature_names()","4901e2d0":"# df_wine = pd.read_csv('https:\/\/archive.ics.uci.edu\/'\n#                       'ml\/machine-learning-databases\/wine\/wine.data',\n#                       header=None)\n\ndf_wine = pd.read_csv('..\/input\/wine-quality-public\/wine_data.csv', header=None)\n\n\n\n# if the Wine dataset is temporarily unavailable from the\n# UCI machine learning repository, un-comment the following line\n# of code to load the dataset from a local path:\n\n# df_wine = pd.read_csv('wine.data', header=None)\n\n\ndf_wine.columns = ['Class label', 'Alcohol', 'Malic acid', 'Ash',\n                   'Alcalinity of ash', 'Magnesium', 'Total phenols',\n                   'Flavanoids', 'Nonflavanoid phenols', 'Proanthocyanins',\n                   'Color intensity', 'Hue', 'OD280\/OD315 of diluted wines',\n                   'Proline']\n\nprint('Class labels', np.unique(df_wine['Class label']))\ndf_wine.head()","4aaafb62":"from sklearn.model_selection import train_test_split\n\nX, y = df_wine.iloc[:, 1:].values, df_wine.iloc[:, 0].values\n\nX_train, X_test, y_train, y_test =\\\n    train_test_split(X, y, \n                     test_size=0.3, \n                     random_state=0, \n                     stratify=y)","bef04a47":"from sklearn.preprocessing import MinMaxScaler\n\nmms = MinMaxScaler()\nX_train_norm = mms.fit_transform(X_train)\nX_test_norm = mms.transform(X_test)","1d1bc37d":"from sklearn.preprocessing import StandardScaler\n\nstdsc = StandardScaler()\nX_train_std = stdsc.fit_transform(X_train)\nX_test_std = stdsc.transform(X_test)","c9f5ad4f":"from sklearn.preprocessing import RobustScaler\n\nstdsc = RobustScaler()  \nX_train_std = stdsc.fit_transform(X_train)\nX_test_std = stdsc.transform(X_test)","6340f5c4":"ex = np.array([0, 1, 2, 3, 4, 5])\n\nprint('standardized:', (ex - ex.mean()) \/ ex.std())\n\n# Please note that pandas uses ddof=1 (sample standard deviation) \n# by default, whereas NumPy's std method and the StandardScaler\n# uses ddof=0 (population standard deviation)\n\n# normalize\nprint('normalized:', (ex - ex.min()) \/ (ex.max() - ex.min()))","d49f2d1f":"# Image(filename='images\/04_04.png', width=500) ","e8fbd74f":"# Image(filename='images\/04_05.png', width=500) ","a963566f":"# Image(filename='images\/04_06.png', width=500) ","adf01f91":"from sklearn.linear_model import LogisticRegression\nLogisticRegression(penalty='l1')","fdf4fe9b":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression(penalty='l1', C=1.0)\n# Note that C=1.0 is the default. You can increase\n# or decrease it to make the regulariztion effect\n# stronger or weaker, respectively.\nlr.fit(X_train_std, y_train)\nprint('Training accuracy:', lr.score(X_train_std, y_train))\nprint('Test accuracy:', lr.score(X_test_std, y_test))","9129eea8":"lr.intercept_","14afd204":"np.set_printoptions(8)","124fbd03":"lr.coef_[lr.coef_!=0].shape","d3713a07":"lr.coef_","83f93246":"import matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = plt.subplot(111)\n    \ncolors = ['blue', 'green', 'red', 'cyan', \n          'magenta', 'yellow', 'black', \n          'pink', 'lightgreen', 'lightblue', \n          'gray', 'indigo', 'orange']\n\nweights, params = [], []\nfor c in np.arange(-4., 6.):\n    lr = LogisticRegression(penalty='l1', C=10.**c, random_state=0)\n    lr.fit(X_train_std, y_train)\n    weights.append(lr.coef_[1])\n    params.append(10**c)\n\nweights = np.array(weights)\n\nfor column, color in zip(range(weights.shape[1]), colors):\n    plt.plot(params, weights[:, column],\n             label=df_wine.columns[column + 1],\n             color=color)\nplt.axhline(0, color='black', linestyle='--', linewidth=3)\nplt.xlim([10**(-5), 10**5])\nplt.ylabel('weight coefficient')\nplt.xlabel('C')\nplt.xscale('log')\nplt.legend(loc='upper left')\nax.legend(loc='upper center', \n          bbox_to_anchor=(1.38, 1.03),\n          ncol=1, fancybox=True)\n#plt.savefig('images\/04_07.png', dpi=300, \n#            bbox_inches='tight', pad_inches=0.2)\nplt.show()","b04b1a40":"from sklearn.base import clone\nfrom itertools import combinations\nimport numpy as np\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\n\nclass SBS():\n    def __init__(self, estimator, k_features, scoring=accuracy_score,\n                 test_size=0.25, random_state=1):\n        self.scoring = scoring\n        self.estimator = clone(estimator)\n        self.k_features = k_features\n        self.test_size = test_size\n        self.random_state = random_state\n\n    def fit(self, X, y):\n        \n        X_train, X_test, y_train, y_test = \\\n            train_test_split(X, y, test_size=self.test_size,\n                             random_state=self.random_state)\n\n        dim = X_train.shape[1]\n        self.indices_ = tuple(range(dim))\n        self.subsets_ = [self.indices_]\n        score = self._calc_score(X_train, y_train, \n                                 X_test, y_test, self.indices_)\n        self.scores_ = [score]\n\n        while dim > self.k_features:\n            scores = []\n            subsets = []\n\n            for p in combinations(self.indices_, r=dim - 1):\n                score = self._calc_score(X_train, y_train, \n                                         X_test, y_test, p)\n                scores.append(score)\n                subsets.append(p)\n\n            best = np.argmax(scores)\n            self.indices_ = subsets[best]\n            self.subsets_.append(self.indices_)\n            dim -= 1\n\n            self.scores_.append(scores[best])\n        self.k_score_ = self.scores_[-1]\n\n        return self\n\n    def transform(self, X):\n        return X[:, self.indices_]\n\n    def _calc_score(self, X_train, y_train, X_test, y_test, indices):\n        self.estimator.fit(X_train[:, indices], y_train)\n        y_pred = self.estimator.predict(X_test[:, indices])\n        score = self.scoring(y_test, y_pred)\n        return score","6065e7e3":"import matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=5)\n\n# selecting features\nsbs = SBS(knn, k_features=1)\nsbs.fit(X_train_std, y_train)\n\n# plotting performance of feature subsets\nk_feat = [len(k) for k in sbs.subsets_]\n\nplt.plot(k_feat, sbs.scores_, marker='o')\nplt.ylim([0.7, 1.02])\nplt.ylabel('Accuracy')\nplt.xlabel('Number of features')\nplt.grid()\nplt.tight_layout()\n# plt.savefig('images\/04_08.png', dpi=300)\nplt.show()","566b4a8f":"k3 = list(sbs.subsets_[10])\nprint(df_wine.columns[1:][k3])","8b6b0ec0":"knn.fit(X_train_std, y_train)\nprint('Training accuracy:', knn.score(X_train_std, y_train))\nprint('Test accuracy:', knn.score(X_test_std, y_test))","da080e6a":"knn.fit(X_train_std[:, k3], y_train)\nprint('Training accuracy:', knn.score(X_train_std[:, k3], y_train))\nprint('Test accuracy:', knn.score(X_test_std[:, k3], y_test))","7893e507":"from sklearn.ensemble import RandomForestClassifier\n\nfeat_labels = df_wine.columns[1:]\n\nforest = RandomForestClassifier(n_estimators=500,\n                                random_state=1)\n\nforest.fit(X_train, y_train)\nimportances = forest.feature_importances_\n\nindices = np.argsort(importances)[::-1]\n\nfor f in range(X_train.shape[1]):\n    print(\"%2d) %-*s %f\" % (f + 1, 30, \n                            feat_labels[indices[f]], \n                            importances[indices[f]]))\n\nplt.title('Feature Importance')\nplt.bar(range(X_train.shape[1]), \n        importances[indices],\n        align='center')\n\nplt.xticks(range(X_train.shape[1]), \n           feat_labels[indices], rotation=90)\nplt.xlim([-1, X_train.shape[1]])\nplt.tight_layout()\n#plt.savefig('images\/04_09.png', dpi=300)\nplt.show()","d63f3a4a":"from sklearn.feature_selection import SelectFromModel\n\nsfm = SelectFromModel(forest, threshold=0.1, prefit=True)\nX_selected = sfm.transform(X_train)\nprint('Number of features that meet this threshold criterion:', \n      X_selected.shape[1])","fac9d5b9":"for f in range(X_selected.shape[1]):\n    print(\"%2d) %-*s %f\" % (f + 1, 30, \n                            feat_labels[indices[f]], \n                            importances[indices[f]]))","b331c027":"# ! python ..\/.convert_notebook_to_script.py --input ch04.ipynb --output ch04.py","d29cd768":"---\n\nReaders may ignore the next cell.","095845e4":"...","b65de1ba":"<br>\n<br>","99cde1f4":"When we are using one-hot encoding datasets, we have to keep in mind that it introduces multicollinearity, which can be an issue for certain methods (for instance, methods that require matrix inversion). If features are highly correlated, matrices are computationally difficult to invert, which can lead to numerically unstable estimates. To reduce the correlation among variables, we can simply remove one feature column from the one-hot encoded array. Note that we do not lose any important information by removing a feature column, though; for example, if we remove the column color_blue, the feature information is still preserved since if we observe color_green=0 and color_red=0, it implies that the observation must be blue.If we use the get_dummies function, we can drop the first column by passing a True argument to the drop_first parameter, as shown in the following code example:","600153b6":"map() function returns a list of the results after applying the given function to each item of a given iterable","834550dd":"# Selecting meaningful features","403539cf":"<br>\n<br>","a9cb5a6d":"*The use of `watermark` is optional. You can install this IPython extension via \"`pip install watermark`\". For more information, please see: https:\/\/github.com\/rasbt\/watermark.*","80518ec9":"## Eliminating samples or features with missing values","ddcddd64":"What do you think about encoding colors with numbers?  \nblue = 0\ngreen = 1\nred = 2","4e8ef999":"<br>\n<br>","4a082b32":"For regularized models in scikit-learn that support L1 regularization, we can simply set the `penalty` parameter to `'l1'` to obtain a sparse solution:","c0100ab6":"## Performing one-hot encoding on nominal features","99e033ba":"<br>\n<br>","b75080a4":"<br>\n<br>","09acaa51":"<br>\n<br>","cbed273e":"<br>\n<br>","fa68506e":"<br>\n<br>","6343edb2":"<br>\n<br>","11175b5a":"## Imputing missing values","09a39f56":"# Partitioning a dataset into a seperate training and test set","e20bbfe7":"## L1 and L2 regularization as penalties against model complexity","385c38ab":"- [Dealing with missing data](#Dealing-with-missing-data)\n  - [Identifying missing values in tabular data](#Identifying-missing-values-in-tabular-data)\n  - [Eliminating samples or features with missing values](#Eliminating-samples-or-features-with-missing-values)\n  - [Imputing missing values](#Imputing-missing-values)\n  - [Understanding the scikit-learn estimator API](#Understanding-the-scikit-learn-estimator-API)\n- [Handling categorical data](#Handling-categorical-data)\n  - [Nominal and ordinal features](#Nominal-and-ordinal-features)\n  - [Mapping ordinal features](#Mapping-ordinal-features)\n  - [Encoding class labels](#Encoding-class-labels)\n  - [Performing one-hot encoding on nominal features](#Performing-one-hot-encoding-on-nominal-features)\n- [Partitioning a dataset into a separate training and test set](#Partitioning-a-dataset-into-seperate-training-and-test-sets)\n- [Bringing features onto the same scale](#Bringing-features-onto-the-same-scale)\n- [Selecting meaningful features](#Selecting-meaningful-features)\n  - [L1 and L2 regularization as penalties against model complexity](#L1-and-L2-regularization-as-penalties-against-model-omplexity)\n  - [A geometric interpretation of L2 regularization](#A-geometric-interpretation-of-L2-regularization)\n  - [Sparse solutions with L1 regularization](#Sparse-solutions-with-L1-regularization)\n  - [Sequential feature selection algorithms](#Sequential-feature-selection-algorithms)\n- [Assessing feature importance with Random Forests](#Assessing-feature-importance-with-Random-Forests)\n- [Summary](#Summary)","79b36c2b":"https:\/\/scikit-learn.org\/stable\/modules\/classes.html#module-sklearn.preprocessing\n\nDifferent types of normalizers\nhttp:\/\/cs231n.github.io\/neural-networks-2\/\n","cc16db50":"## Encoding class labels","ffbe2c62":"...","1be0c37a":"# Dealing with missing data","71e3dc7c":"## Mapping ordinal features","54647888":"<br>\n<br>","9a6347c4":"## Sequential feature selection algorithms","4b7293c8":"# Chapter 4 - Building Good Training Sets \u2013\u00a0Data Preprocessing","b7d8f28e":"## A geometric interpretation of L2 regularization","80cf3da7":"\nKaggle workshop\nhttps:\/\/www.kaggle.com\/agrawaladitya\/step-by-step-data-preprocessing-eda\n<br>\n<br>","415fa76e":"# Assessing feature importance with Random Forests","3c9178ca":"<br>\n<br>","bc0aab1c":"# Bringing features onto the same scale","9f6ff1e3":"Note: The deprecation warning shown above is due to an implementation detail in scikit-learn. It was already addressed in a pull request (https:\/\/github.com\/scikit-learn\/scikit-learn\/pull\/9816), and the patch will be released with the next version of scikit-learn (i.e., v. 0.20.0).","9585337f":"# Summary","b728f35f":"<br>\n<br>","4d9193a7":"## Nominal and ordinal features","ca4b92e0":"Applied to the standardized Wine data ...","65e9f879":"A visual example:","a586c5b6":"*Python Machine Learning 2nd Edition* by [Sebastian Raschka](https:\/\/sebastianraschka.com), Packt Publishing Ltd. 2017\n\nCode Repository: https:\/\/github.com\/rasbt\/python-machine-learning-book-2nd-edition\n\nCode License: [MIT License](https:\/\/github.com\/rasbt\/python-machine-learning-book-2nd-edition\/blob\/master\/LICENSE.txt)","4292c822":"<br>\n<br>","556bfd0d":"# Handling categorical data","88d782f4":"# Python Machine Learning - Code Examples","c5bd1188":"## Identifying missing values in tabular data","3c30d9b1":"## Understanding the scikit-learn estimator API","ed2eff9f":"Note that the optional watermark extension is a small IPython notebook plugin that I developed to make the code reproducible. You can just skip the following line(s).","7c604efa":"Now, let's print the 3 features that met the threshold criterion for feature selection that we set earlier (note that this code snippet does not appear in the actual book but was added to this notebook later for illustrative purposes):","ba28ea96":"<br>\n<br>","eb62cc06":"## Sparse solutions with L1-regularization","b8f7fae5":"### Overview"}}