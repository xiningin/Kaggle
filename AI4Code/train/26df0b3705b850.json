{"cell_type":{"d2b14116":"code","9eeacf54":"code","78d3896e":"code","663c736d":"code","c50e0124":"code","954ff33f":"code","bd17d71c":"code","bcf80c26":"code","d2dae8c3":"code","2afb64fd":"code","37257f6f":"code","1c34a3bb":"code","f4ab040d":"code","ab750ba1":"code","f26c9875":"code","80c6bcd6":"markdown","ad9ff270":"markdown","f4444731":"markdown","0ffe02de":"markdown","da4fe306":"markdown","1207734e":"markdown","4dce51ea":"markdown","5015c196":"markdown"},"source":{"d2b14116":"import numpy as np# \u30ca\u30f3\u30d1\u30a4?(numpy)\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport pandas as pd#\u30d1\u30f3\u30c0\u30ba\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom category_encoders import CountEncoder#\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom sklearn.metrics import mean_squared_error#\u8a55\u4fa1\u6307\u6a19\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom xgboost import XGBRegressor#\u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","9eeacf54":"# \u30e1\u30a4\u30f3\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u898b\u307e\u3059\ndf_train = pd.read_csv('\/kaggle\/input\/data-science-summer2-osaka\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/data-science-summer2-osaka\/test.csv')","78d3896e":"# \u8aac\u660e\u5909\u6570\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u306b\u5206\u5272\u3057\u3066\u304a\u304d\u307e\u3059\ny_train = df_train.Score\nX_train = df_train.drop(['Score'], axis=1)\nX_test = df_test.copy()","663c736d":"# dtype\u304cobject\uff08\u6570\u5024\u3067\u306a\u3044\u3082\u306e\uff09\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306f5000\u884c\u306a\u306e\u3067\u3001Name\u306f\u5b8c\u5168\u30e6\u30cb\u30fc\u30af\n# \u610f\u5916\u3068English\/Japanese name\u306f\u30e6\u30cb\u30fc\u30af\u3067\u306f\u306a\u304f\u540c\u3058\u3082\u306e\u304c\u7e70\u308a\u8fd4\u3057\u767b\u5834\u3057\u3066\u3044\u308b\u4f8b\u304c\u3042\u308b\u3002\u30b7\u30ea\u30fc\u30ba\u3082\u306e\uff1f\n# Genres\u3068Aired\u306f\u305d\u308c\u305e\u308c\u4e2d\u8eab\u304c\u8907\u5408\u5316\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u306bhigh cardinality\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3088\u3046\u3060\u3002\n# Genres\u306f\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u9805\u76ee\u304c\u5217\u6319\u3055\u308c\u3066\u304a\u308a\u3001\u5206\u89e3\u3057\u305f\u304f\u306a\u308b\u3002\n# Aired\u306f\u30b9\u30bf\u30fc\u30c8\u3068\u30a8\u30f3\u30c9\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u3053\u308c\u3082\u5206\u5272\u3059\u3079\u304d\u3067\u3057\u3087\u3046\u3002\n\ncats = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train[col].nunique())","c50e0124":"# Genres\u306f\u306a\u3057\nX_train.drop(['Genres'], axis=1, inplace=True)\nX_test.drop(['Genres'], axis=1, inplace=True)","954ff33f":"# Aired\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3053\u3067\u306f\u671f\u9593\u306e\u59cb\u307e\u308a\uff1f\u3060\u3051\u53d6\u308a\u51fa\u3057\u3066\u305d\u308c\u304c\u3069\u308c\u3060\u3051\u4ee5\u524d\u304b\u3092\u53d6\u308a\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\n# \u3082\u3063\u3068\u8272\u3005\u826f\u3044\u5de5\u592b\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\ndef aired_datetime(air):\n    try:\n        d = pd.to_datetime('2021-08-01') - pd.to_datetime(air.split(' to ')[0])\n        d \/= pd.Timedelta('1d')\n    except:\n        d = -9999\n    return d","bd17d71c":"# \u5909\u63db\u3057\u307e\u3059\nX_train['Aired'] = X_train['Aired'].apply(aired_datetime)\nX_test['Aired'] = X_test['Aired'].apply(aired_datetime)","bcf80c26":"# \u305d\u306e\u4ed6\u306b\u3082\u8272\u3005\u3084\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3082\u3046\u4e00\u62ec\u3057\u3066\u30a8\u30a4\u30e4\u3067Count Encoding\u3057\u3066\u3057\u307e\u3044\u307e\u3059\ncats = []\n\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \nce = CountEncoder(cols=cats)\n\nX_train = ce.fit_transform(X_train)\nX_test = ce.transform(X_test)","d2dae8c3":"#\u3000\u3071\u3063\u3068\u308f\u304b\u308b\u4e0d\u8981\u30ab\u30e9\u30e0\u306f\u9664\u3044\u3066\u304a\u304d\u307e\u3059\nX_train.drop(['MAL_ID', 'Name'], axis=1, inplace=True)\nX_test.drop(['MAL_ID', 'Name'], axis=1, inplace=True)","2afb64fd":"# \u30bf\u30fc\u30b2\u30c3\u30c8\u3082numpy\u306earray\u306b\u3057\u3066\u304a\u304d\u307e\u3059\ny_train = y_train.values","37257f6f":"# \u3067\u306f\u3001\u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3066\u307f\u307e\u3057\u3087\u3046\n# \u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u6570\u306f\u5148\u307b\u3069\u306e\u6700\u9069\u5024\u3092\u7528\u3044\u3066\u307f\u307e\u3059\nmodel = XGBRegressor(learning_rate=0.05, n_estimators=1000, random_state=71)\nmodel.fit(X_train, y_train)","1c34a3bb":"# \u3044\u3088\u3044\u3088\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3057\u307e\u3059\ny_pred_test = model.predict(X_test)\ny_pred_test","f4ab040d":"# \u63d0\u51fa\u7528\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u3057\u307e\u3059\u3002\nsubmission = pd.read_csv('\/kaggle\/input\/data-science-summer2-osaka\/sample_submission.csv', index_col=0)\nsubmission.Score = y_pred_test","ab750ba1":"submission","f26c9875":"# csv\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\nsubmission.to_csv('submission.csv')","80c6bcd6":"## \u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u5b9a\u7fa9\uff08\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u4ed6\u306b\u76ee\u7684\u5909\u6570\uff0c\u51fa\u529b\u3068\u3082\u547c\u3070\u308c\u308b\u3053\u3068\u304c\u591a\u3044\uff1f\uff09","ad9ff270":"## \u5b66\u7fd2\u3059\u308b","f4444731":"## \u8aac\u660e\u5909\u6570\u306e\u5b9a\u7fa9\u3000\uff08\u5165\u529b\u3068\u3082\u3044\u3046\uff09","0ffe02de":"## \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u8fbc\u307f \n(\u304a\u6c7a\u307e\u308a\u6587\u53e5\u306a\u306e\u3067\u30b9\u30eb\u30fc\u3067\u3082\u53ef)\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306f\u8272\u3005\u306a\u51e6\u7406\u304c\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3000\u5ba3\u8a00\u3057\u306a\u3044\u3068\u305d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u4f7f\u3048\u306a\u3044","da4fe306":"## \u4e88\u6e2c\u3059\u308b","1207734e":"## \u63d0\u51fa\u306e\u5f62\u306b\u3057\u3066csv\u30d5\u30a1\u30a4\u30eb\u306b\u3059\u308b","4dce51ea":"## \u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080","5015c196":"### \u5165\u529b\u3092\u5b9a\u91cf\u7684\u306a\u5024\u306b\u5909\u63db\nCount Encoding\n> \u30c7\u30fc\u30bf\u306b\u542b\u307e\u308c\u308b\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u308b\u3082\u306e\u3002"}}