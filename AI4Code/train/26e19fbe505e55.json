{"cell_type":{"c2c9d558":"code","d0589b84":"code","208603e5":"code","35bdde5b":"code","e5de459a":"code","8fdbbcd8":"code","156c2421":"code","d0a1d475":"code","c9cb8b6d":"code","73d03af7":"markdown"},"source":{"c2c9d558":"# LOAD LIBRARIES\nimport numpy as np, pandas as pd, os\nimport matplotlib.pyplot as plt, cv2\nimport tensorflow as tf, re, math\nimport glob\nfrom sklearn.model_selection import StratifiedKFold","d0589b84":"FOLDS=7\nIMG_SIZE = 512\nSEED = 2020","208603e5":"BASE = '..\/input\/cassava-leaf-disease-classification'","35bdde5b":"# LOAD TRAIN META DATA\ntrain = pd.read_csv(BASE+os.sep+'train.csv')","e5de459a":"train.head(10)","8fdbbcd8":"folds = train.copy()\nFold = StratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=SEED)\nfor n, (train_index, val_index) in enumerate(Fold.split(folds, folds['label'])):\n    folds.loc[val_index, 'fold'] = int(n)\nfolds['fold'] = folds['fold'].astype(int)\nprint(folds.groupby(['fold', 'label']).size())","156c2421":"def _bytes_feature(value):\n  \"\"\"Returns a bytes_list from a string \/ byte.\"\"\"\n  if isinstance(value, type(tf.constant(0))):\n    value = value.numpy() # BytesList won't unpack a string from an EagerTensor.\n  return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\ndef _float_feature(value):\n  \"\"\"Returns a float_list from a float \/ double.\"\"\"\n  return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))\n\ndef _int64_feature(value):\n  \"\"\"Returns an int64_list from a bool \/ enum \/ int \/ uint.\"\"\"\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))","d0a1d475":"def serialize_example(feature0, feature1):\n  feature = {\n      'image': _bytes_feature(feature0),\n      'target': _int64_feature(feature1)\n  }\n  example_proto = tf.train.Example(features=tf.train.Features(feature=feature))\n  return example_proto.SerializeToString()","c9cb8b6d":"for f in range(FOLDS):\n    ct = (folds['fold'] == f).sum()\n    idx = folds[folds['fold'] == f].index\n    print(idx)\n    print(ct)\n    print('Writing TFRecord %i of %i...'%(f,ct))\n    with tf.io.TFRecordWriter('train%.2i-%i.tfrec'%(f,ct)) as writer:\n        for k in range(ct):\n            path = BASE+'\/train_images\/'+folds['image_id'][idx[k]]            \n            img = cv2.imread(path)\n            img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))\n            img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR) # Fix incorrect colors\n            if k==0: plt.imshow(img),plt.show()\n            img = cv2.imencode('.jpg', img, (cv2.IMWRITE_JPEG_QUALITY, 94))[1].tostring()\n            name = folds['image_id'][idx[k]].split('.')[0]\n            row = folds.loc[folds.image_id==name]\n            example = serialize_example(\n                img, \n                folds['label'][idx[k]],\n                )\n            writer.write(example)\n            if k%100==0: print(k,', ',end='')","73d03af7":"# Recreate Stratificated tfrecords\n\nreferences:\n\n[How To Create TFRecords](https:\/\/www.kaggle.com\/cdeotte\/how-to-create-tfrecords)"}}