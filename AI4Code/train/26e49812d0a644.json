{"cell_type":{"2bf7414d":"code","7d88b1da":"code","a82ac80e":"code","0bcf112a":"code","b3f6aba0":"code","5a12c879":"code","fa52f14c":"code","5ce555b3":"code","621875d5":"code","dc477472":"code","537fc651":"code","7923cfd4":"code","b13d654f":"code","2e846640":"code","a214a0c2":"code","b4d0ed67":"code","adf6903d":"code","eb3dc607":"code","6142fd46":"code","19749b66":"code","899b228f":"code","e3dff0b2":"code","437171ae":"code","c1036ff1":"code","3087bd6b":"code","b0ddbb49":"code","7e5ae9a0":"code","d7b7da52":"code","2b5b5d43":"code","4db33d0f":"code","548914f7":"code","863e3447":"code","7d3c3003":"code","bf2bc2ad":"markdown","9f9dde9c":"markdown","5e7d96c7":"markdown","6c6a6707":"markdown","1e9e3074":"markdown","a72c7760":"markdown","4fa3dee4":"markdown","fcda42cd":"markdown","58d498b5":"markdown","07a799eb":"markdown","b29f0525":"markdown","a83a1cc2":"markdown","31cbc02c":"markdown","9f761703":"markdown","301b7cf5":"markdown","bd061a50":"markdown","28467881":"markdown"},"source":{"2bf7414d":"import pandas as pd\nimport numpy as np\nimport pandas_profiling\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n\nfrom imblearn.under_sampling import RandomUnderSampler\n\n\n\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\npd.set_option('display.max_rows', 50)  # \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0442\u0440\u043e\u043a\npd.set_option('display.max_columns', 50)  # \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7d88b1da":"def boxplot(col):\n    fig, axes = plt.subplots(figsize = (14, 4))\n    sns.boxplot(x='default', y=col, data=data[data['sample']==1],ax=axes)\n    axes.set_title('Boxplot for ' + col)\n    plt.show()","a82ac80e":"train = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/test.csv')\nsample = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/sample_submission.csv')","0bcf112a":"print(train.info())\nprint()\nprint('Train size: ', train.shape)\nprint()\ntrain.head()","b3f6aba0":"print(sample.info())\nprint()\nprint('Sample_submission size: ', sample.shape)\nprint()\nsample.head()","5a12c879":"print(test.info())\nprint()\nprint('Test size: ', test.shape)\nprint()\ntest.head()","fa52f14c":"sns.countplot(train['default'])","5ce555b3":"train['sample'] = 1   \ntest['sample'] = 0    \ntest['default'] = -1  \ndata = train.append(test, sort=False).reset_index(drop=True)","621875d5":"print(data.info())\nprint()\nprint('Data size: ', data.shape)\nprint()\ndata.head()","dc477472":"data.education.value_counts()","537fc651":"data.education = data.education.fillna('SCH')","7923cfd4":"num_cols = ['age','decline_app_cnt','score_bki','income','bki_request_cnt','region_rating'] \ncat_cols = ['education','work_address','home_address','sna','first_time'] \nbin_cols = ['sex','car','car_type','good_work','foreign_passport'] ","b13d654f":"data[num_cols].hist(figsize=(25,10),bins=100)","2e846640":"for i in ['age', 'bki_request_cnt', 'decline_app_cnt', 'income']:\n    data[i] = np.log(data[i]+1)\ndata[num_cols].hist(figsize=(25,10),bins=100)","a214a0c2":"for col in num_cols:\n    boxplot(col)","b4d0ed67":"sns.heatmap(data[num_cols].corr())","adf6903d":"imp_num = pd.Series(f_classif(data[num_cols], data['default'])[0], index = num_cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","eb3dc607":"#\u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u043e\u0439 app_date\n# \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043a\u043e\u043b-\u0432\u043e \u0434\u043d\u0435\u0439 \u043e\u0442 \"\u043d\u0430\u0447\u0430\u043b\u0430 \u044d\u043f\u043e\u0445\u0438\" \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\ndata['app_date'] = pd.to_datetime(data['app_date'], format='%d%b%Y')\ndata_min = min(data['app_date'])\ndata['days'] = (data['app_date'] - data_min).dt.days.astype('int')\ndata['day'] = data['app_date'].dt.day\ndata['month'] = data['app_date'].dt.month\n\ndata.drop(['app_date'],  axis = 1, inplace = True)","6142fd46":"# \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0434\u043e\u0445\u043e\u0434 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443\nmean_income = data.groupby('age')['income'].mean().to_dict()\ndata['mean_income_age'] = data['age'].map(mean_income)\n\n# \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u043e\u0445\u043e\u0434 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443\nmax_income = data.groupby('age')['income'].max().to_dict()\ndata['max_income_age'] = data['age'].map(max_income)\n\n# \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0434\u043e\u0445\u043e\u0434\ndata[\"normalized_income\"] = abs((data.income - data.mean_income_age)\/data.max_income_age)\n\n# \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443\nmean_bki = data.groupby('age')['bki_request_cnt'].mean().to_dict()\ndata['mean_requests_age'] = data['age'].map(mean_bki)\n\n# \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043f\u043e \u0434\u043e\u0445\u043e\u0434\u0443\nmean_bki_inc = data.groupby('income')['bki_request_cnt'].mean().to_dict()\ndata['mean_requests_income'] = data['income'].map(mean_bki_inc)\n\n# \u0434\u043e\u0445\u043e\u0434 \u043f\u043e \u0440\u0435\u0433\u0438\u043e\u043d\u0443\nmean_income_rat = data.groupby('region_rating')['income'].mean().to_dict()\ndata['mean_income_region'] = data['region_rating'].map(mean_income_rat)\n\n# \u0432\u044b\u0442\u0430\u0449\u0438\u043c \u0434\u0432\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\ndata_addresses = data[['work_address', 'home_address']].values\n\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c Scaler\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(data_addresses)\n\n# \u0423 \u043d\u0430\u0441 \u0434\u0432\u0430 \u0432\u0435\u043a\u0442\u043e\u0440\u0430. \u0421\u043e\u043a\u0440\u0430\u0442\u0438\u043c \u0434\u043e \u043e\u0434\u043d\u043e\u0433\u043e, \u043e\u0441\u0442\u0430\u0432\u0438\u0432 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e.\npca = PCA(n_components=1)\npca.fit(scaled_data)\npca_data = pca.transform(scaled_data)\ndata['pca_address'] = pca_data\ndata['pca_address'] = data['pca_address'] + 5\ndata['pca_address'] = data['pca_address'].apply(lambda x: np.log(x) + 1)\n\n# \u0443\u0434\u0430\u043b\u0438\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\ndata.drop(['home_address','work_address'], axis=1, inplace=True)","19749b66":"label_encoder = LabelEncoder()\nfor col in bin_cols:\n    data[col] = label_encoder.fit_transform(data[col])\ndata['education'] = pd.Series(label_encoder.fit_transform(data['education']))","899b228f":"# \u043d\u043e\u0432\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043b\u043e\u043d\u043e\u043a\nnum_cols = ['age','decline_app_cnt','score_bki','income','bki_request_cnt','days',\n            'mean_income_age','region_rating','max_income_age', 'normalized_income',\n            'mean_requests_age', 'mean_requests_income', 'mean_income_region'] \ncat_cols = ['education','pca_address','sna','first_time'] \nbin_cols = ['sex','car','car_type','good_work','foreign_passport'] ","e3dff0b2":"imp_num = pd.Series(f_classif(data[num_cols], data['default'])[0], index = num_cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","437171ae":"imp_cat = pd.Series(mutual_info_classif(data[bin_cols + cat_cols], data['default'],\n                                     discrete_features =True), index = bin_cols + cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","c1036ff1":"data[num_cols] = pd.DataFrame(StandardScaler().fit_transform(data[num_cols]), columns = data[num_cols].columns)","3087bd6b":"data = pd.get_dummies(data, prefix=cat_cols, columns=cat_cols)","b0ddbb49":"train_data = data.query('sample == 1').drop(['sample','client_id'], axis=1)\ntest_data = data.query('sample == 0').drop(['sample','client_id'], axis=1)\n\n\n\nX = train_data.drop(['default'], axis=1).values\nY = train_data['default'].values \n\nund_sampler = RandomUnderSampler(random_state=300)\n\nX_und, y_und = und_sampler.fit_resample(X, Y)\n\n\n\nX_train, X_test, Y_train, Y_test = train_test_split(X_und, y_und, test_size=0.20, random_state=300)\n\nlr = LogisticRegression(penalty = 'l2', C = 10000.0, class_weight=\"balanced\", max_iter = 1000, solver='sag')\n\nlr.fit(X_train, Y_train)\ny_pred = lr.predict(X_test)","7e5ae9a0":"probs = lr.predict_proba(X_test)\nprobs = probs[:,1]\n\n\nfpr, tpr, threshold = roc_curve(Y_test, probs)\nroc_auc = roc_auc_score(Y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","d7b7da52":"print('accuracy_score:',accuracy_score(Y_test,y_pred))\nprint('precision_score:',precision_score(Y_test,y_pred))\nprint('recall_score:',recall_score(Y_test,y_pred))\nprint('f1_score:',f1_score(Y_test,y_pred))","2b5b5d43":"X_test = test_data.drop(['default'], axis=1)\ncm = confusion_matrix(Y_test, y_pred)\ncmd = ConfusionMatrixDisplay(cm, display_labels=['non_default','default'])\ncmd.plot()\ncmd.ax_.set(xlabel='Predicted', ylabel='True')","4db33d0f":"# from sklearn.model_selection import GridSearchCV\n\n# # \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0442\u0438\u043f\u044b \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n# penalty = ['l1', 'l2']\n\n# # \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n# C = np.logspace(0, 4, 10)\n\n# # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n# hyperparameters = dict(C=C, penalty=penalty)\n\n# model = LogisticRegression(max_iter = 1000)\n# model.fit(X_train, Y_train)\n\n# # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0442\u043a\u0443 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c 5-\u043a\u0440\u0430\u0442\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n# clf = GridSearchCV(model, hyperparameters, cv=5, verbose=0)\n\n# best_model = clf.fit(X_train, Y_train)\n\n# # View best hyperparameters\n# print('\u041b\u0443\u0447\u0448\u0435\u0435 Penalty:', best_model.best_estimator_.get_params()['penalty'])\n# print('\u041b\u0443\u0447\u0448\u0435\u0435 C:', best_model.best_estimator_.get_params()['C'])","548914f7":"# from sklearn.model_selection import RandomizedSearchCV\n\n# # \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0442\u0438\u043f\u044b \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n# penalty = ['l1', 'l2']\n\n# # \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n# C = np.logspace(0, 4, 10)\n# solver = ['lbfgs', 'liblinear', 'sag', 'saga']\n\n# # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n# hyperparameters = dict(C=C, penalty=penalty, solver = solver)\n\n# model = LogisticRegression(max_iter = 1000)\n# model.fit(X_train, Y_train)\n\n# # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0442\u043a\u0443 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c 5-\u043a\u0440\u0430\u0442\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n# clf = RandomizedSearchCV(model, hyperparameters, cv=5, verbose=0)\n\n# best_model = clf.fit(X_train, Y_train)\n\n# # View best hyperparameters\n# print('\u041b\u0443\u0447\u0448\u0435\u0435 Penalty:', best_model.best_estimator_.get_params()['penalty'])\n# print('\u041b\u0443\u0447\u0448\u0435\u0435 C:', best_model.best_estimator_.get_params()['C'])\n# print('\u041b\u0443\u0447\u0448\u0435\u0435 solver:', best_model.best_estimator_.get_params()['solver'])","863e3447":"# \u041b\u0443\u0447\u0448\u0435\u0435 Penalty: l2\n# \u041b\u0443\u0447\u0448\u0435\u0435 C: 10000.0\n# \u041b\u0443\u0447\u0448\u0435\u0435 solver: sag","7d3c3003":"X_test = test_data.drop(['default'], axis=1)\ny_pred = lr.predict_proba(X_test)\nresults_df = pd.DataFrame(data={'client_id':test['client_id'], 'default':y_pred[:,1]})\nresults_df.to_csv('submission.csv', index=False)\nresults_df","bf2bc2ad":"\u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f","9f9dde9c":"\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u043c score_bki, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u043e\u0446\u0435\u043d\u0438\u043c \u0435\u0449\u0451 \u0440\u0430\u0437","5e7d96c7":"\u041e\u0431\u044a\u0435\u0434\u0435\u043d\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b, \u0447\u0442\u043e\u0431\u044b \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u0431\u044b\u043b\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u044c \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438","6c6a6707":"\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442  \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 education, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u043d\u0435\u0439","1e9e3074":"\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0435\u0441\u0442\u044c, \u0432 \u0440\u0430\u0437\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438, \u043d\u043e \u0435\u0441\u0442\u044c","a72c7760":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e default","4fa3dee4":"\u041f\u043e \u0441\u0442\u0430\u0440\u043e\u0439 \u0434\u043e\u0431\u0440\u043e\u0439 \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0438\u0445 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c","fcda42cd":"\u0434\u0435\u0444\u043e\u043b\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0435\u043d \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u043c\u043e\u043b\u043e\u0434\u044b\u0445    \n\u0432\u044b\u0441\u043e\u043a\u0438\u0439 score_bki \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0435\u043d \u0434\u043b\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u0430    \n\u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e     \n\u0447\u0430\u0441\u0442\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432 \u0411\u041a\u0418 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u043d\u044b \u0434\u043b\u044f \u043c\u0435\u043d\u0435\u0435 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u043c\u043e\u0433\u0443\u0442 \u0441\u0438\u0433\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u0443\u044e \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e    \n\u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c, \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0434\u043e\u0445\u043e\u0434 \u0441\u0432\u0438\u0434\u0435\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0443\u0435\u0442 \u043e \u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430    ","58d498b5":"\u0430 \u043f\u043e \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u043c \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c","07a799eb":"\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u043d\u043e \u0438 \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c, \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e RandomizedSearchCV","b29f0525":"\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0430","a83a1cc2":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u043e\u0441\u043c\u043e\u0442\u0440","31cbc02c":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430    \n    \nclient_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430    \neducation - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f    \nsex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430        \nage - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430     \ncar - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f     \ncar_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438      \ndecline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a     \ngood_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b      \nbki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418     \nhome_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430     \nwork_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430     \nincome - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430     \nforeign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430     \nsna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430     \nfirst_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435      \nscore_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418      \nregion_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430      \napp_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438       \ndefault - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443     ","9f761703":"\u042f\u0432\u043d\u043e \u043d\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u043b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443","301b7cf5":"\u0418\u0442\u0430\u043a, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u043f\u043e \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","bd061a50":"### \u0412\u044b\u0432\u043e\u0434\n\n\u041f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0431\u044b\u043b\u0430 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0431\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 ROC AUC > 0.74, \u0430 \u0442\u0430\u043a\u0436\u0435 accuracy 0.88, precision 0.43, recall 0.67 \u0438 f1_score 0.68.\n\n\u0414\u043b\u044f \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 GridSearchCV \u0438 RandomizedSearchCV \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c LogisticRegression. ","28467881":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043f\u043e \u0442\u0438\u043f\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435"}}