{"cell_type":{"6485b1b3":"code","e724511e":"code","8313d0e1":"code","77a2815e":"code","df7cf55e":"code","f546287c":"code","2e74c9f3":"code","1f90061a":"code","41a44654":"code","7727a4a4":"code","6fc75511":"code","4e2ca1bd":"code","1ab1f925":"code","7d86c817":"code","2a83d098":"code","bbe6f9b5":"code","931f9c15":"code","c54d3e7f":"code","6942c023":"code","73cfbcbf":"code","a002e5cb":"code","8443b32f":"code","45ef4157":"code","3fc769af":"code","0b9dd160":"code","e0677967":"code","f6f680ad":"code","6927b43d":"code","c7fb874c":"code","72ad0e34":"code","21fa5e1b":"code","c2fc0cb2":"code","9de63e64":"code","a2823a54":"code","a1cefaee":"code","917b6ff8":"code","e117feae":"code","a9f3dc1c":"code","e2d9d021":"code","34cb2c13":"code","d444e55d":"code","11afaece":"code","eb78b0ad":"code","c7232a3b":"code","45c6598e":"code","f2fdac13":"code","8b25d52b":"code","96587041":"code","dfababf1":"code","89363812":"code","6f01c54e":"code","0447edd2":"code","4d32c495":"code","3dc91940":"code","eb42287d":"code","50fa391e":"code","57f40df5":"code","299a0f6a":"code","cf3f8054":"markdown","421dfe18":"markdown","45cdf4bc":"markdown","02d7f97d":"markdown","58849e80":"markdown","fc00ab54":"markdown","8746b51d":"markdown","30d59f81":"markdown","31d6c28d":"markdown","f07c7212":"markdown","7c39958b":"markdown","59a984ec":"markdown","d3b72c96":"markdown","62073e4c":"markdown","17ce6a01":"markdown","0cf98803":"markdown","db9a5bc6":"markdown","2c909c47":"markdown","d6730686":"markdown","1a73a734":"markdown","4453688f":"markdown","e502ec38":"markdown"},"source":{"6485b1b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e724511e":"pip install xlrd","8313d0e1":"pip install openpyxl","77a2815e":"data_dictionary = pd.read_excel(\"..\/input\/healthcare-analytics\/Train\/Data_Dictionary.xlsx\")\nfirst_health_camp = pd.read_csv(\"..\/input\/healthcare-analytics\/Train\/First_Health_Camp_Attended.csv\")\nhealth_camp_details = pd.read_csv(\"..\/input\/healthcare-analytics\/Train\/Health_Camp_Detail.csv\")\npatient_profile = pd.read_csv(\"..\/input\/healthcare-analytics\/Train\/Patient_Profile.csv\")\nsecond_health_camp = pd.read_csv(\"..\/input\/healthcare-analytics\/Train\/Second_Health_Camp_Attended.csv\")\nthird_health_camp = pd.read_csv(\"..\/input\/healthcare-analytics\/Train\/Third_Health_Camp_Attended.csv\")\ntrain = pd.read_csv(\"..\/input\/healthcare-analytics\/Train\/Train.csv\")\ntest = pd.read_csv(\"..\/input\/healthcare-analytics\/Train\/test.csv\")","df7cf55e":"data_dictionary.head()","f546287c":"\nfirst_health_camp.head()","2e74c9f3":"health_camp_details.head()","1f90061a":"patient_profile.head()","41a44654":"second_health_camp.head()","7727a4a4":"third_health_camp.head()","6fc75511":"train.head()","4e2ca1bd":"patient_profile.info()","1ab1f925":"patient_profile.describe()","7d86c817":" numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumerical_col_patient_profile = patient_profile.select_dtypes(include=numerics) \nnumerical_col_patient_profile","2a83d098":"numerical_col_patient_profile.columns\n","bbe6f9b5":"patient_profile.isnull().sum() #checking missing values in patient profile\n","931f9c15":"merged_details = pd.merge(right = patient_profile, left = first_health_camp, on=\"Patient_ID\")\n\nmerged_details.info()","c54d3e7f":"merged_details = merged_details.merge(health_camp_details, on = \"Health_Camp_ID\" )\nmerged_details.info()","6942c023":"merged_details = merged_details.merge(second_health_camp, on=\"Patient_ID\")\nmerged_details.info()","73cfbcbf":"merged_details = merged_details.merge( third_health_camp ,on = \"Patient_ID\")\n","a002e5cb":"merged_details.head()","8443b32f":"merged_details.describe()","45ef4157":"merged_details.columns","3fc769af":"merged_details.info()","0b9dd160":"numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumerical_merged_cols = merged_details.select_dtypes(include=numerics) \nnumerical_merged_cols","e0677967":"numerical_merged_cols.describe()","f6f680ad":"merged_details.isna() #shows no of values in each column tha are null","6927b43d":"merged_details.isna().sum() ","c7fb874c":"#percentage of missing values in each column\nmissing_percent = merged_details.isna().sum().sort_values(ascending=False)\/len(merged_details)\nmissing_percent*100 #%","72ad0e34":"plt.figure(figsize=(5.5,1))\nmissing_percent[missing_percent!=0].plot(kind='barh')","21fa5e1b":"merged_details2 = merged_details.drop('Unnamed: 4', axis=1, inplace=True)","c2fc0cb2":"merged_details.columns","9de63e64":"#we're choosing the important columns that may give us meaningful results\nimp_col = ['Patient_ID', 'Health_Camp_ID', 'Donation', 'Health_Score',  'Income', 'Camp_Start_Date', 'Camp_End_Date', 'Health Score', 'Number_of_stall_visited']\nmerged_details[imp_col]\n","a2823a54":"merged_details['health'] = merged_details['Health Score'] + merged_details['Health_Score']\nmerged_details['health']","a1cefaee":"imp_cols_pred = ['Donation', 'health',  'Income', 'Number_of_stall_visited', 'Employer_Category', 'City_Type']","917b6ff8":"useful_details = merged_details[imp_cols_pred]\nuseful_details.head()","e117feae":"useful_details.info()","a9f3dc1c":"useful_details['Employer_Category'].mode()","e2d9d021":"useful_details['City_Type'].mode()","34cb2c13":"useful_details.City_Type.fillna('H', inplace=True)","d444e55d":"useful_details.Employer_Category.fillna('Technology', inplace = True)","11afaece":"useful_details.head()","eb78b0ad":"useful_details.info()\n","c7232a3b":"useful_details.Donation.describe()\n","45c6598e":"useful_details.health.describe()","f2fdac13":"useful_details.Income.describe()","8b25d52b":"useful_details.Number_of_stall_visited.describe()","96587041":"useful_details.City_Type.describe()","dfababf1":"for col in useful_details.columns:\n    if useful_details[col].dtype == 'int64':\n        plt.pie(useful_details[col].value_counts(), labels=useful_details[col].unique())\n        plt.title('Piechart for {}'.format(col))\n        plt.show()\n    else:\n        plt.hist(useful_details[col].value_counts())\n        plt.title('Histogram for {}'.format(col))\n        plt.show(); ","89363812":"plt.scatter(x=useful_details['Employer_Category'] , y=useful_details['health'], s =100)\nplt.figure(figsize=(50,30))","6f01c54e":"plt.scatter(x=useful_details['Income'], y=useful_details['health'], s = 75)","0447edd2":"sns.violinplot(y = merged_details['health'], x = merged_details['Camp_Start_Date'])\n#sns.boxplot(y = merged_details['health'], x = merged_details['Camp_Start_Date'])\nsns.set(rc={\"figure.figsize\":(200,3)})","4d32c495":"sns.jointplot(x=merged_details['LinkedIn_Shared'], y=merged_details['Twitter_Shared'], data = merged_details['health'], kind = 'scatter')","3dc91940":"merged_dumm=pd.get_dummies(merged_details, prefix=None, prefix_sep=\"_\",drop_first=False)","eb42287d":"x=merged_dumm.iloc[:,:-1]\ny=merged_dumm.health\nx.shape","50fa391e":"from sklearn.model_selection import train_test_split\n","57f40df5":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = .3,random_state =23)\nfrom sklearn.linear_model import LinearRegression\nmodel=LinearRegression()\nmodel=model.fit(x_train,y_train)\nrsq=model.score(x_train,y_train)","299a0f6a":"rsq=model.score(x_test,y_test)\nrsq","cf3f8054":"# 3 Inference\nFrom the above visalisation of data, a striking observation I noted is that health score is not strongly dependent of the camp starting date as validated by the violinplot where barring one almost all violin plots had similar lengths and distributions. \n\nThe income-helth scatter plot shows high income patients tend to have a higher healthscore (as illustrated by the density of the scatterplot) whereas low income patients have densities distributed over a range of healthscore.\n","421dfe18":"# a.1 Loading the Pandas files.","45cdf4bc":"So employer_count has 3380 (out of 5422) non null values\nAnd city_type has 4782(out of 5422) non null values","02d7f97d":"This shows how many values in each column are missing.","58849e80":"# c.3 Handling the missing data\n","fc00ab54":"Thus we see that column Unamed:4 has all the values as Null whereas City_type has 640 missing values and Employer_Category has 2041 missing values.\n","8746b51d":"# b.2 Looking at all the columns with numerical values (as they will be needed further)","30d59f81":"# 1. Data preparation and cleaning\n","31d6c28d":"# 4 Moving on to ML prediction","f07c7212":"Plotting a visual of all missing values.","7c39958b":"# a.3 Merging these different dataframes into single dataframe for further analysis","59a984ec":"In the code cell above, I have created a list of columns that are crucial for subsequent steps","d3b72c96":"Since health score has two different columns, will add them.","62073e4c":"# C.1 Finding what all values are missing ","17ce6a01":"# C.2 Since Unamed:4 is missing all the time, we will drop this column. While others are present in atleast 60% rows so retaining them.","0cf98803":"# 2 Visualisation ","db9a5bc6":"Now we will check some key parameters like income, donation, no of stalls visited  and health","2c909c47":"Calculating the number of numeric columns in patient profile dataset\n\n","d6730686":"# a.2 Reading all the files\nTo make relevant joints","1a73a734":"So the most frequent values in Employer_Category and City_Type are 'Technology' and 'H' respectively.\nSo we will fill the null places with it.","4453688f":"Creating a separate dataframe of the columns selected in the imp_cols_pred list.","e502ec38":"# b.1 Looking at all the information present in the merged dataframe. "}}