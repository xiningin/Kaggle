{"cell_type":{"b7e7adf7":"code","fe6657cf":"code","687ea2fb":"code","8a65f22d":"code","a7db5782":"code","8a205119":"markdown","c3f3ebbc":"markdown","81c89dfb":"markdown","771a6ae2":"markdown","369ec72a":"markdown","855c2be0":"markdown","caf1209f":"markdown"},"source":{"b7e7adf7":"import torch\nfrom torch import nn\n\n# input tensor: 64*1000\ninput_tensor = torch.randn(64,1000)\n\n# linear layer: 1000 inputs and 100 output units\nlinear_layer = nn.Linear(1000, 100)\n\n# output of the linear layer\noutput = linear_layer(input_tensor)\nprint(output.size())","fe6657cf":"from torch import nn\n\n# define a two-layer model\nmodel = nn.Sequential(\n    nn.Linear(4, 5),\n    nn.ReLU(), # Activation function\n    nn.Linear(5, 1)\n    )\n\nprint(model)","687ea2fb":"from torch import nn\nimport torch.nn.functional as F\n\n# Define the model\nclass Model(nn.Module):\n    \n    # specify the layers\n    def __init__(self):\n        super(Model, self).__init__()\n        # 1 input image channel, 20 output channels, 5x5 square convolution, 1x1 stride\n        self.conv1 = nn.Conv2d(1, 20, 5, 1)\n        # 20 input channels, 50 output channels, 5x5 square convolution, 1x1 stride\n        self.conv2 = nn.Conv2d(20, 50, 5, 1)\n        # 4x4 from image dimension, 500 output units\n        self.fc1 = nn.Linear(50*4*4, 500)\n        # 500 input units, 10 output units\n        self.fc2 = nn.Linear(500, 10)\n        \n    # define the forward method\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = F.max_pool2d(x, 2, 2)\n        x = F.relu(self.conv2(x))\n        x = F.max_pool2d(x, 2, 2)\n        x = x.view(-1, self.num_flat_features(x))\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        return F.log_softmax(x, dim=1)\n    \n    # calculate number of flat features\n    def num_flat_features(self, x):\n        size = x.size()[1:] # C * W * H: 50*4*4\n        num_features = 1\n        for i in size:\n            num_features *= i\n        return num_features\n\n# create an object of Model\nmodel = Model()\nprint(model)","8a65f22d":"!pip install torchsummary","a7db5782":"from torchsummary import summary\nsummary(model, input_size=(1, 28, 28))","8a205119":"Lets create a model consisting of 4 input units in input layer, 5 units in hidden layer and a single unit in output layer.","c3f3ebbc":"## 3. Define a model using *nn.Module*","81c89dfb":"## 2. Defining a model using *nn.Sequential*****","771a6ae2":"## Model summary","369ec72a":"Sub-classing the *nn.Module* class.<br>\nHere we specify the layers in **__init__** method. <br>\nWe apply the specified layers to inputs in **forward** method of that class.","855c2be0":"## 1. A Linear Layer","caf1209f":"## A model consists of layers connected to each other which process the inputs and generates the outputs. <br>\n### **torch.nn** package is used to define a model -> 1. Sequential & 2. Module****"}}