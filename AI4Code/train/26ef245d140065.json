{"cell_type":{"523e48df":"code","18a9921b":"code","640f8366":"code","51e938b7":"code","f841c3f2":"code","9f2cdba2":"code","0c62065b":"code","9981426d":"code","addfc250":"code","848e1f26":"code","0f7e4b49":"code","c73af505":"code","2f0932c1":"code","f8a2ead3":"code","5cecb338":"code","cac6341d":"code","c63b50fb":"code","a70b16b8":"code","36583102":"code","5f444699":"code","5f1e7d5c":"code","39ada046":"code","a3c2ff16":"code","24f59a91":"code","cc6d5eca":"code","e622eda8":"code","b47246c7":"code","a485d2f1":"code","a994ef75":"code","fab21230":"code","555e5c2a":"code","908e1357":"code","bafd91dc":"code","045e5c54":"code","bfca186e":"code","f7eb9a82":"code","432264f9":"code","def97ba7":"code","e68a50a9":"code","4d119e88":"code","22f98b7e":"code","54bbd2d9":"markdown","eb2d2401":"markdown","14f96fb6":"markdown","1deedc6f":"markdown","48c825d2":"markdown","299a6489":"markdown","adf45eb0":"markdown","361122bc":"markdown","adc3815a":"markdown","813a92ff":"markdown"},"source":{"523e48df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18a9921b":"house = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')\nhouse.head()","640f8366":"house.dtypes","51e938b7":"house.drop('id',axis=1,inplace=True)","f841c3f2":"house.describe()","9f2cdba2":"house.floors.value_counts()","0c62065b":"import seaborn as sns\nimport matplotlib.pyplot as plt\n","9981426d":"plt.figure(figsize=[15,5])\nsns.boxplot(data=house,x='waterfront',y='price');","addfc250":"plt.figure(figsize=[15,5])\nsns.regplot(data=house,x='sqft_above',y='price');","848e1f26":"import numpy as np\nfrom sklearn.linear_model import LinearRegression","0f7e4b49":"X = np.array(house['sqft_living']).reshape((-1, 1))\ny = np.array(house.price)","c73af505":"model = LinearRegression()","2f0932c1":"model.fit(X,y)","f8a2ead3":"r_sq = model.score(X, y)\nprint('coefficient of determination:', r_sq)","5cecb338":"print('intercept:', model.intercept_)","cac6341d":"print('slope:', model.coef_)","c63b50fb":"new_model = LinearRegression().fit(X, y.reshape((-1, 1)))","a70b16b8":"print('intercept:', new_model.intercept_)\nprint('slope:', new_model.coef_)","36583102":"y_pred = new_model.predict(X)\nprint('predicted response:', y_pred, sep='\\n')","5f444699":"X = np.array(house[['sqft_living','floors','bedrooms','sqft_basement','view','bathrooms','sqft_living15',\n                    'sqft_above','grade','waterfront','lat']])\ny = np.array(house.price)","5f1e7d5c":"model = LinearRegression().fit(X, y)","39ada046":"r_sq = model.score(X, y)\nprint('coefficient of determination:', r_sq)\nprint()\nprint('intercept:', model.intercept_)\nprint()\nprint('slope:', model.coef_)","a3c2ff16":"y_pred = model.predict(X)\nprint('predicted response:', y_pred, sep='\\n')","24f59a91":"from sklearn.preprocessing import PolynomialFeatures","cc6d5eca":"X = np.array(house[['sqft_living','floors','bedrooms','sqft_basement','view','bathrooms','sqft_living15',\n                    'sqft_above','grade','waterfront','lat']])\ny = np.array(house.price)\nX_ = PolynomialFeatures(degree=2, include_bias=False).fit_transform(X)","e622eda8":"model = LinearRegression().fit(X_, y)","b47246c7":"r_sq = model.score(X_, y)\nintercept, coefficients = model.intercept_, model.coef_\n","a485d2f1":"y_pred = model.predict(X_)","a994ef75":"print('coefficient of determination:', r_sq)\nprint()\nprint('intercept:', intercept)\nprint()\nprint('coefficients:', coefficients, sep='\\n')\nprint()\nprint('predicted response:', y_pred, sep='\\n')","fab21230":"from sklearn.linear_model import Ridge\nfrom sklearn.datasets import make_regression\n","555e5c2a":"X = np.array(house[['sqft_living','floors','bedrooms','sqft_basement','view','bathrooms','sqft_living15',\n                    'sqft_above','grade','waterfront','lat']])\ny = np.array(house.price)\n","908e1357":"X, y, coefficients = make_regression(\n    n_samples=50,\n    n_features=1,\n    n_informative=1,\n    n_targets=1,\n    noise=5,\n    coef=True,\n    random_state=1)","bafd91dc":"rr = Ridge(alpha=0.1)\nrr.fit(X, y)\nw = rr.coef_","045e5c54":"w","bfca186e":"coefficients","f7eb9a82":"plt.scatter(X, y)\nplt.plot(X, w*X, c='red');","432264f9":"rr.score(X,y)","def97ba7":"X = np.array(house[['sqft_living','floors','bedrooms','sqft_basement','view','bathrooms','sqft_living15',\n                    'sqft_above','grade','waterfront','lat']])\ny = np.array(house.price).reshape(-1, 1)\nX_ = PolynomialFeatures(degree=2, include_bias=False).fit_transform(X)\ny_ = PolynomialFeatures(degree=2, include_bias=False).fit_transform(y)\n\n","e68a50a9":"X_, y_, coefficients = make_regression(\n    n_samples=50,\n    n_features=1,\n    n_informative=1,\n    n_targets=1,\n    noise=5,\n    coef=True,\n    random_state=1)","4d119e88":"rr_poly = Ridge(alpha=0.1)\nrr_poly.fit(X_, y_)\nw = rr_poly.coef_\nw","22f98b7e":"rr.score(X_,y_)","54bbd2d9":"# Question 3) use the method value_counts to count the number of houses with unique floor values, use the method .to_frame() to convert it to a dataframe. Your output should look like this :","eb2d2401":"# Question 4) use the function boxplot in the seaborn library to produce a plot that can be used to determine whether houses with a waterfront view or without a waterfront view have more price outliers. Your output should look like this with the code that produced it (the colors may be different ) :","14f96fb6":"# Question 7) Fit a linear regression model to predict the 'price' using the list of features:\n\n\"floors\"\n\"waterfront\"\n\"lat\"\n\"bedrooms\"\n\"sqft_basement\"\n\"view\"\n\"bathrooms\"\n\"sqft_living15\"\n\"sqft_above\"\n\"grade\"\n\"sqft_living\"\nThe calculate the R^2. Take a screenshot of your code and the value of the R^2.","1deedc6f":"# Question 1) Display the data types of each column using the attribute dtypes, then take a screenshot and submit it, include your code in the image.","48c825d2":"# Question 5) Use the function regplot in the seaborn library to determine if the feature sqft_above is negatively or positively correlated with price. Take a screenshot of the plot and the code used to generate it.","299a6489":"# Question 9) Create and fit a Ridge regression object using the training data, setting the regularization parameter to 0.1 and calculate the R^2 using the test data. Take a screenshot for your code and the R^2","adf45eb0":"# Question 6) Fit a linear regression model to predict the price using the feature 'sqft_living' then calculate the R^2. Take a screenshot of your code and the value of the R^2. ","361122bc":"# Question 2) Drop the columns \"id\" and \"Unnamed: 0\" from axis 1 using the method drop(), then use the method describe() to obtain a statistical summary of the data. Take a screenshot and submit it, make sure the inplace parameter is set to True. Your output should look like this:","adc3815a":"# Question 10) Perform a second order polynomial transform on both the training data and testing data. Create and fit a Ridge regression object using the training data, setting the regularisation parameter to 0.1. Calculate the R^2 utilising the test data provided. Take a screenshot of your code and the R^2.","813a92ff":"# Question 8) Create a pipeline object that scales the data performs a polynomial transform and fits a linear regression model. Fit the object using the features in the question above, then fit the model and calculate the R^2. Take a screenshot of your code and the R^2."}}