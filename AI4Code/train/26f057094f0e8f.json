{"cell_type":{"df6064c6":"code","4a125522":"code","b3729ac1":"code","10d85b62":"code","60fd6007":"code","c0d20e81":"code","cb4f68d3":"code","6066bbd7":"code","202ca17d":"code","f1a91080":"code","b4f4294f":"code","dd68d7f0":"code","b9d28183":"code","eb7e8e98":"code","b5b19fe7":"code","abec1720":"code","12a24719":"code","3ab15eac":"markdown","b8c5ccc4":"markdown","801a649b":"markdown","30289bef":"markdown","d2f6bbd3":"markdown","f3eb5919":"markdown","6ffb3a02":"markdown","d13a8df8":"markdown","eb062334":"markdown"},"source":{"df6064c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4a125522":"import networkx as nx\nimport plotly as plt","b3729ac1":"edgelist = [['Mannheim', 'Frankfurt', 85], \n\n            ['Mannheim', 'Karlsruhe', 80], \n\n            ['Erfurt', 'Wurzburg', 186], \n\n            ['Munchen', 'Numberg', 167], \n\n            ['Munchen', 'Augsburg', 84], \n\n            ['Munchen', 'Kassel', 502], \n\n            ['Numberg', 'Stuttgart', 183], \n\n            ['Numberg', 'Wurzburg', 103], \n\n            ['Numberg', 'Munchen', 167], \n\n            ['Stuttgart', 'Numberg', 183], \n\n            ['Augsburg', 'Munchen', 84], \n\n            ['Augsburg', 'Karlsruhe', 250], \n\n            ['Kassel', 'Munchen', 502], \n\n            ['Kassel', 'Frankfurt', 173], \n\n            ['Frankfurt', 'Mannheim', 85], \n\n            ['Frankfurt', 'Wurzburg', 217], \n\n            ['Frankfurt', 'Kassel', 173], \n\n            ['Wurzburg', 'Numberg', 103], \n\n            ['Wurzburg', 'Erfurt', 186], \n\n            ['Wurzburg', 'Frankfurt', 217], \n\n            ['Karlsruhe', 'Mannheim', 80], \n\n            ['Karlsruhe', 'Augsburg', 250],\n\n            [\"Mumbai\", \"Delhi\",400],\n\n            [\"Delhi\", \"Kolkata\",500],\n\n            [\"Kolkata\", \"Bangalore\",600],\n\n            [\"TX\", \"NY\",1200],\n\n            [\"ALB\", \"NY\",800]]","10d85b62":"g = nx.Graph()\n\nfor edge in edgelist: g.add_edge(edge[0],edge[1], weight = edge[2])\n","60fd6007":"for i, x in enumerate(nx.connected_components(g)): print(\"cc\"+str(i)+\":\",x)","c0d20e81":"print(nx.shortest_path(g, 'Stuttgart','Frankfurt',weight='weight')) \n\nprint(nx.shortest_path_length(g, 'Stuttgart','Frankfurt',weight='weight'))","cb4f68d3":"for x in nx.all_pairs_dijkstra_path(g,weight='weight'): print(x)","6066bbd7":"g = nx.Graph()\n\nfor edge in edgelist: g.add_edge(edge[0],edge[1], weight = edge[2])","202ca17d":"nx.minimum_spanning_tree(g) #returns a instance of type nx.minimum_spanning_tree(g) returns a instance of type graph\nnx.draw_networkx(nx.minimum_spanning_tree(g)) ","f1a91080":"fb = nx.read_edgelist('\/kaggle\/input\/facebook-social-network\/facebook-combined.txt', create_using = nx.Graph(), nodetype = int)","b4f4294f":"pos = nx.spring_layout(fb)","dd68d7f0":"import warnings \nwarnings.filterwarnings('ignore')\nwarnings.simplefilter('ignore')\nimport matplotlib.pyplot as plt\n\nplt.style.use('fivethirtyeight') \nplt.rcParams['figure.figsize'] = (20, 15)\nplt.axis('off')\n\nnx.draw_networkx(fb, pos, with_labels = False, node_size = 35) \nplt.show()","b9d28183":"pageranks = nx.pagerank(fb)\n\nprint(pageranks)","eb7e8e98":"import operator\n\nsorted_pagerank = sorted(pageranks.items(), \n\nkey=operator.itemgetter(1),reverse = True)\n\nprint(sorted_pagerank)","b5b19fe7":"first_degree_connected_nodes = list(fb.neighbors(3437)) \nsecond_degree_connected_nodes = []\nfor x in first_degree_connected_nodes:\n\n    second_degree_connected_nodes+=list(fb.neighbors(x)) \n\nsecond_degree_connected_nodes.remove(3437) \nsecond_degree_connected_nodes = list(set(second_degree_connected_nodes))\n\nsubgraph_3437 = nx.subgraph(fb, first_degree_connected_nodes + second_degree_connected_nodes)\n\npos = nx.spring_layout(subgraph_3437)","abec1720":"import matplotlib.pyplot as plt\n\nnode_color = ['yellow' if v == 3437 else 'red' for v in subgraph_3437]\n\nnode_size = [1000 if v == 3437 else 35 for v in subgraph_3437] \n\nplt.style.use('fivethirtyeight') \n\nplt.rcParams['figure.figsize'] = (20, 15)\n\nplt.axis('off')\n\nnx.draw_networkx(subgraph_3437, pos, with_labels = False, node_color=node_color,node_size=node_size )\n\nplt.show()","12a24719":"pos = nx.spring_layout(subgraph_3437) \n\nbetweennessCentrality = nx.betweenness_centrality(subgraph_3437,normalized=True, endpoints=True)\n\nnode_size = [v * 10000 for v in betweennessCentrality.values()] \n\nplt.figure(figsize=(20,20))\n\nnx.draw_networkx(subgraph_3437, pos=pos, with_labels=False, node_size=node_size )\n\nplt.axis('off') ","3ab15eac":"here we can see some roads all cross in one or two different point, those are the bridge between comunity and the middle point with a lot of pipes are the influensor","b8c5ccc4":"It assigns scores to pages based on the number and quality of incoming and outgoing links. Pagerank can be used anywhere where we want to estimate node importance in any network.\n\n","801a649b":"Question 1: Find out distinct continents and their cities from this graph.\n\ncontinent 1. : {'Kassel', 'Wurzburg', 'Mannheim', 'Stuttgart', 'Karlsruhe', 'Augsburg', 'Munchen', 'Erfurt', 'Numberg', 'Frankfurt'}\n\ncontinent 2. : { 'Kolkata', 'Bangalore', 'Mumbai', 'Delhi'}\n\ncontinent 3 : {'NY', 'ALB', 'TX'}","30289bef":"Degree Centrality: It is simply the number of connections for a node.\n\n","d2f6bbd3":"Question 3: Find the shortest path among the cities of the graph.","f3eb5919":"Minimum spannig tree\n\nQuestion 4: We need to connect all the cities in the graph we have using the minimum amount of wire\/pipe. How do we do this?\n\non utilise la fonction minimul spanning tree","6ffb3a02":"Question 5: Create a subgraph with more influential users.\n\n","d13a8df8":"Question 2: Find the shortest path between Stuttgart and Frankfurt and its length.\n\n['Stuttgart', 'Numberg', 'Wurzburg', 'Frankfurt'] for a length of 503 \n","eb062334":"fb collection add to our input\n"}}