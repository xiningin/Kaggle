{"cell_type":{"988d7d6b":"code","b5d3b950":"code","46e0912a":"code","1e235f1c":"code","9cc440fe":"code","398171f8":"code","cf704867":"code","3f3e877c":"code","81e4e354":"code","7bbfb7ca":"code","1c0c40b3":"code","be10748c":"markdown","8ff4a58b":"markdown","4f8a26e2":"markdown","a0567138":"markdown","1a846b50":"markdown","5d1f50ed":"markdown","c3692c18":"markdown","ee192ebf":"markdown","4ca9b599":"markdown"},"source":{"988d7d6b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5d3b950":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score, roc_auc_score\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom xgboost import XGBClassifier","46e0912a":"df = pd.read_csv(\"\/kaggle\/input\/loan-prediction-based-on-customer-behavior\/Training Data.csv\")\ndf.head()","1e235f1c":"df.drop(\"Id\", axis=1, inplace=True)\n# df.drop(\"state\", axis=1)\n# df.drop(\"city\", axis=1)","9cc440fe":"df.columns = [\"income\", \"age\", \"experience\", \"marital_status\", \"house_ownership\", \"car_ownership\", \"profession\", \"city\", \"state\", \"current_job_years\", \"current_house_years\", \"risk_flag\"]\ndf.head()","398171f8":"en = LabelEncoder()\ncat_cols = [\"marital_status\", \"house_ownership\", \"car_ownership\", \"profession\", \"city\", \"state\"]\nfor cols in cat_cols:\n    df[cols] = en.fit_transform(df[cols])\n    \ndf.head()","cf704867":"y = df[\"risk_flag\"]\nx = df.drop(\"risk_flag\", axis=1)","3f3e877c":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 2021)","81e4e354":"oversampler = SMOTE()\nx_train, y_train = oversampler.fit_resample(x_train, y_train)\n\nsns.countplot(x = y_train, palette = 'muted')","7bbfb7ca":"# https:\/\/xgboost.readthedocs.io\/en\/latest\/python\/python_api.html#module-xgboost.sklearn\nxgb = XGBClassifier(learning_rate=0.1,\n                    n_estimators=1000,\n                    use_label_encoder=False,\n                    random_state=2021)\n\nxgb.fit(x_train, y_train, eval_metric='logloss')\ny_pred = xgb.predict(x_test)\ncm = confusion_matrix(y_test, y_pred)","1c0c40b3":"print(\"-------------------------TEST SCORES-----------------------\")\nprint(f\"Recall: {recall_score(y_test, y_pred)}\")\nprint(f\"Precision: {precision_score(y_test, y_pred)}\")\nprint(f\"F1-Score: {f1_score(y_test, y_pred)}\")\nprint(f\"Accuracy score: {accuracy_score(y_test, y_pred)}\")\nprint(f\"AUC Score: {roc_auc_score(y_test, y_pred)}\")","be10748c":"### Applying xgboost model","8ff4a58b":"### Reading csv file","4f8a26e2":"### Importing relevant libraries","a0567138":"### Perform oversampling on train data","1a846b50":"### Splitting the dataset into train and test sets","5d1f50ed":"### Drop column(s)","c3692c18":"### Renaming columns","ee192ebf":"### Encoding categorical variables","4ca9b599":"### Defining x and y (target) variables"}}