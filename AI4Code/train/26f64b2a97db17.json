{"cell_type":{"2f0f02bf":"code","722286fb":"code","5859de47":"code","2f1c94f8":"code","e1ae9bc7":"code","fc013f00":"code","d99f2df5":"code","88ebb2ca":"code","b95ee8f4":"code","7910ae3b":"code","37ac7b2e":"code","4ba1dc58":"code","ea101f32":"code","59e39686":"code","f10117f4":"code","cb8fb478":"code","cf927554":"code","5cfcce81":"code","00ebf7f9":"code","63a345b5":"code","24542e76":"code","33a53401":"code","8ca25011":"code","1cca7b41":"code","3eaf4547":"code","a8334373":"code","6885f6f3":"code","168e6c17":"code","c4b74907":"code","5b395f09":"code","104517e7":"code","9e7eef00":"code","32ad5203":"code","f5c873eb":"code","aa1b5099":"code","3f440cda":"code","28a3a903":"code","2a76351b":"code","4ee3908a":"code","414d2d7d":"code","77095fbf":"code","a993c78c":"code","6f6a007e":"code","76cc11c5":"code","b38e3329":"code","a8d0bca4":"code","3458b965":"code","770521ca":"code","099e6f65":"code","2ec38dca":"code","9b38894b":"code","2c4eda1b":"code","8116e9a1":"code","4ece8b30":"code","d907eecc":"code","2683ceb5":"code","80346747":"code","8d6cf81c":"code","a27c5a57":"code","7ba21f4b":"code","1ec0bcc2":"code","d79c1577":"code","fa823d4d":"code","d48e5395":"code","44d49273":"code","e2c5dde3":"code","871660ea":"code","99e02362":"code","74188a6a":"code","8ed4f65c":"code","59da50b2":"code","c6632f90":"code","dbd32fe5":"code","9712e399":"code","737c7c24":"code","d54feaac":"code","702f693b":"code","e039452a":"markdown","2d34f0c3":"markdown","b36d057a":"markdown","7f98f57a":"markdown","c98e76ec":"markdown","6124c42d":"markdown","1e04d465":"markdown","9c0c3c7b":"markdown","9c229c82":"markdown","35d0ebda":"markdown","22d89477":"markdown","77209ca6":"markdown","d626650a":"markdown","b70edbfd":"markdown","446baea2":"markdown","f4cb6cae":"markdown","4695de25":"markdown","3af65cc2":"markdown","91752238":"markdown","f7635b57":"markdown","508a9705":"markdown","1748e8e3":"markdown","9075ef11":"markdown","32f41140":"markdown","b90d8246":"markdown","d827964a":"markdown","60bdd299":"markdown","f0e8afd2":"markdown","1b845712":"markdown","8979b030":"markdown","a69fcddc":"markdown","2d525143":"markdown","4e6890b6":"markdown","3c9c6df8":"markdown","cae9095a":"markdown","60644357":"markdown","0e58861f":"markdown","ca47b065":"markdown","2d3ab219":"markdown","eb5aac29":"markdown","0962c120":"markdown","c2232dbb":"markdown","1f7d1312":"markdown","d514c5ba":"markdown","833ccb35":"markdown","5cc7faf3":"markdown","530f209f":"markdown","306bfa8d":"markdown","1976cc25":"markdown","35a0ea4c":"markdown","ca39438d":"markdown","ccd4cff1":"markdown","ceb3378e":"markdown","dadedf15":"markdown","1374f3a3":"markdown","4f0f9871":"markdown","8e0c95c9":"markdown","b1cefcc4":"markdown","4b33e4b4":"markdown","0ea11f19":"markdown","4b3c0e10":"markdown","6d24cb2d":"markdown","37ac1e96":"markdown","36735a89":"markdown","ccc361bd":"markdown","c867931e":"markdown","a2477654":"markdown","86eefb96":"markdown","f517f029":"markdown","d891bd7b":"markdown","887f99fa":"markdown","2ff2d93f":"markdown","c482448d":"markdown","a083c324":"markdown","d3d2225f":"markdown","948c1346":"markdown","57c316e4":"markdown","956de0e5":"markdown","23104e6f":"markdown","d74ba8ae":"markdown","4525e394":"markdown","97652c99":"markdown","33d7bf31":"markdown","9d204eba":"markdown","0a71e893":"markdown","8ff4913c":"markdown","31a469f1":"markdown","6784b60a":"markdown","30ccf358":"markdown","bd54517f":"markdown","d7843fb7":"markdown","0899586e":"markdown","1caafbcc":"markdown","61098553":"markdown","773059e3":"markdown","ca54c4c5":"markdown","e5a37cc3":"markdown","c515e01a":"markdown","89fd7a59":"markdown","e26fb143":"markdown","490db8e1":"markdown","285a83a7":"markdown","0363e43a":"markdown","10bfdb49":"markdown","6003e232":"markdown","7833827f":"markdown","1efaeb46":"markdown","47b00440":"markdown","85f01692":"markdown","0b6c886e":"markdown","9dbae93e":"markdown","84a3803b":"markdown","6c650bad":"markdown"},"source":{"2f0f02bf":"import pandas as pd\nimport numpy as np\n\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\n\ninit_notebook_mode(connected=True)\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#print(__version__) \nimport os\n#print(os.listdir('kaggle_survey\/'))\n","722286fb":"mcq = pd.read_csv('..\/input\/multipleChoiceResponses.csv')\n\ncol_replace = {'Time from Start to Finish (seconds)' : 'Time required'}\ncol_tuple = [(14, 21), (22, 28), (29, 44), (45, 56), (57, 64), (65, 83), (88, 107), (110, 123), (130, 150), (151, 194), (195, 223), (224, 249), (250, 262), (265, 276), (277, 283), (284,290), (291, 304), (307, 329), (336, 341), (343, 349), (349, 355), (356, 371), (373, 385), (386, 394)]\n\nfor i in col_tuple:\n    for j in range(i[0], i[1]):\n        col_replace[mcq.columns[j]] = mcq.columns[j][:3] + '_' + mcq[mcq.columns[j]].iloc[0][mcq[mcq.columns[j]].iloc[0].rindex('- ')+2:]\n\nmcq.drop(index = 0, inplace = True)\nmcq.rename(columns = col_replace, inplace = True)\n\nmcq['Q3'] = mcq['Q3'].replace('Iran, Islamic Republic of...', 'Iran') \n\n\ncode_dict = {'Argentina': 'ARG',\n 'Australia': 'AUS',\n 'Austria': 'AUT',\n 'Bangladesh': 'BGD',\n 'Belarus': 'BLR',\n 'Belgium': 'BEL',\n 'Brazil': 'BRA',\n 'Canada': 'CAN',\n 'Chile': 'CHL',\n 'China': 'CHN',\n 'Colombia': 'COL',\n 'Czech Republic': 'CZE',\n 'Denmark': 'DNK',\n 'Egypt': 'EGY',\n 'Finland': 'FIN',\n 'France': 'FRA',\n 'Germany': 'DEU',\n 'Greece': 'GRC',\n 'Hungary': 'HUN',\n 'India': 'IND',\n 'Indonesia': 'IDN',\n 'Iran': 'IRN',\n 'Ireland': 'IRL',\n 'Israel': 'ISR',\n 'Italy': 'ITA',\n 'Japan': 'JPN',\n 'Kenya': 'KEN',\n 'Malaysia': 'MYS',\n 'Mexico': 'MEX',\n 'Morocco': 'MAR',\n 'Netherlands': 'NLD',\n 'New Zealand': 'NZL',\n 'Nigeria': 'NGA',\n 'Norway': 'NOR',\n 'Pakistan': 'PAK',\n 'Peru': 'PER',\n 'Philippines': 'PHL',\n 'Poland': 'POL',\n 'Portugal': 'PRT',\n 'Romania': 'ROU',\n 'Russia': 'RUS',\n 'Singapore': 'SGP',\n 'South Africa': 'ZAF',\n 'Spain': 'ESP',\n 'Sweden': 'SWE',\n 'Switzerland': 'CHE',\n 'Thailand': 'THA',\n 'Tunisia': 'TUN',\n 'Turkey': 'TUR',\n 'Ukraine': 'UKR',\n 'Hong Kong (S.A.R.)': 'HKG',\n 'Republic of Korea': 'PRK',\n 'South Korea': 'KOR',\n 'United Kingdom of Great Britain and Northern Ireland': 'GBR',\n 'United States of America': 'USA',\n 'Viet Nam': 'VNM',\n 'I do not wish to disclose my location': 'Do not wish to disclose',\n 'Other': 'OTHER'}\n\nmcq['Q3_CODE'] = mcq['Q3'].apply(lambda l : code_dict[l])\n\n#mcq.head()","5859de47":"default_codes = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf', '#7cfc00', '#ffa500', '#ff1493', '#adff2f', '#0000cd']\n\ndef pie_with_bar(x, y, labels, values, title, xtitle, ytitle, dx = [0.20, 1], dy = [0.20, 1], showlegend = True, legend_pos = 'v', rotation = 0):\n    \n    \n    if legend_pos == 'v':\n        legend = dict(orientation = 'v')\n    else:\n        legend = dict(orientation = 'h', x = 0, y = 0)\n\n    trace1 = go.Bar(x = x, \n                    y = y, \n                    text = y,\n                    hoverinfo = 'text',\n                    marker = dict(color = default_codes),\n                    textposition = 'auto',\n                    showlegend = False)\n\n\n    trace2 = go.Pie(labels = labels, \n                    values = values, \n                    domain = dict(x = dx, \n                                  y = dy),\n                    hoverinfo = 'label+percent',\n                    marker = dict(colors = default_codes),\n                    hole = 0.40,\n                    sort = False,\n                    showlegend = showlegend,\n                    rotation = rotation)\n\n    layout = go.Layout(dict(title = title,\n                           xaxis = dict(title = xtitle),\n                           yaxis = dict(title = ytitle),\n                           legend = legend))\n    fig = dict(data = [trace1, trace2], layout = layout)\n    iplot(fig)\n    \ndef stacked_bar(index, column, title, legend_pos = 'v', extra_suffix = 'Object', showlegend = True):\n    c_mat = count_percent_mat(index, column, 12, extra_suffix)\n    p_mat = c_mat[1]\n    c_mat = c_mat[0]\n    data = []\n    \n    if legend_pos == 'v':\n        legend = dict(orientation = 'v')\n    else:\n        legend = dict(orientation = 'h')\n    for i in c_mat.columns:\n        data.append(go.Bar(x = p_mat.index,\n                           y = p_mat[i],\n                           name = i,\n                           text = c_mat[i].apply(str) + '<br>' + p_mat[i].apply(lambda l : format(l, '.2f')) + '%',\n                           hoverinfo = 'text+name',\n                           showlegend = showlegend)\n                   )\n    layout = go.Layout(dict(barmode = 'stack',\n                           title = title,\n                           yaxis = dict(title = 'Percentage'),\n                           legend = legend))\n    fig = go.Figure(data, layout)\n    iplot(fig)\n    \ndef multi_stacked_bar(index, column, title, legend_pos = 'v', extra_suffix = 'Objects'):\n    c_mat = multi_count_percent_mat(index, column, 12, extra_suffix)\n    p_mat = c_mat[1]\n    c_mat = c_mat[0]\n    data = []\n    if legend_pos == 'v':\n        legend = dict(orientation = 'v')\n    else:\n        legend = dict(orientation = 'h')\n    for i in c_mat.columns:\n        data.append(go.Bar(x = p_mat.index,\n                           y = p_mat[i],\n                           name = i,\n                           text =  c_mat[i].apply(str) + '<br>' + p_mat[i].apply(lambda l : format(l, '.2f')) + '%',\n                           hoverinfo = 'text+name',\n                           showlegend = True)\n                   )\n    layout = go.Layout(dict(barmode = 'stack', \n                           title = title,\n                           yaxis = dict(title = 'Percentage'),\n                           legend = legend))\n    fig = go.Figure(data, layout)\n    iplot(fig)\n\n\nfrom sklearn.preprocessing import LabelEncoder\n\ndef draw_map(index, title):\n    if type(index) == str:\n        c_mat = count_percent_mat('Q3', index)\n    else:\n        c_mat = multi_count_percent_mat('Q3', index)\n    p_mat = c_mat[1].transpose()\n    c_mat = c_mat[0].transpose()\n\n    del c_mat['Other']\n    del c_mat['I do not wish to disclose my location']\n    del p_mat['Other']\n    del p_mat['I do not wish to disclose my location']\n    \n    c_mat.sort_index(inplace = True)\n    p_mat.sort_index(inplace = True)\n\n    l = LabelEncoder()\n    l.fit(c_mat.index)\n\n\n    c_list = []\n    l_list = []\n    z_list = []\n    t_list = []\n\n    for i in c_mat.columns:\n        c_list.append(i)\n        z_list.append(l.transform([c_mat[i].idxmax()])[0])\n        t = i+'<br>Max count, '+c_mat[i].idxmax()+' : '+str(max(c_mat[i]))+', '+format(max(p_mat[i]), '.2f')+' %'\n        for (x, y, z) in zip(c_mat.index, c_mat[i], p_mat[i]):\n            t += '<br>'+x+' : '+str(y)+', '+format(z, '.2f')+' %'\n        t_list.append(t)\n\n    l_list = list(map(lambda l : code_dict[l], c_list))\n\n    data = dict(type='choropleth',\n                locations = l_list,\n                z = z_list,\n                text = t_list,\n                hoverinfo = 'text',\n                autocolorscale = False,\n                colorscale = 'Jet',\n                showscale = False\n                ) \n    \n    title = '<b>' + title + '<\/b><br>Hover over for more details'\n    layout = dict(title = title,\n                  geo = dict(\n                showframe = False,\n                showcoastlines = False,\n                showocean = True,\n                oceancolor = '#3f3f4f',\n                projection = dict(\n                type = 'robinson')))\n    choromap = go.Figure(data = [data],layout = layout)\n    iplot(choromap)\n\ndef box_dist(index, columns, title):\n    columns = list(columns)\n    columns.append(index)\n    d = mcq[columns].sort_values(index)\n    columns.remove(index)\n\n    traces = []\n\n    for i in range(len(columns)):\n        traces.append(go.Box(\n                             x = d[index],\n                             y = d[columns[i]],\n                             fillcolor = default_codes[i],\n                             showlegend = False))\n\n    columns = list(map(lambda l : l[4:], columns))\n    for i in range(len(columns)):\n        if len(columns[i]) > 30:\n            t = list(map(lambda l : l + ' ', columns[i].split()))\n            j = 0\n            k = 0\n            columns[i] = ''\n            while j <= 30:\n                j += len(t[k])\n                j += 1\n                k += 1\n            columns[i] = ''.join(t[:k - 1]) + '<br>' + ''.join(t[k - 1:])\n            columns[i].rstrip()\n    \n    fig = tools.make_subplots(rows = len(columns) \/\/ 2,\n                              cols = 2,  \n                              shared_xaxes = True,\n                              subplot_titles = columns,\n                              vertical_spacing = 0.05)\n                  \n    for i in range(len(traces)):\n           fig.append_trace(traces[i], (i \/\/ 2) + 1, (i % 2) + 1)\n        \n    fig['layout'].update(height = 1200, width = 900, title = title)        \n    iplot(fig)            \n\n\n# for single column\n\ndef count_percent_mat(index, column, limit = 0, suffix = 'Objects'):\n\n    group = mcq.groupby([column, index]).count()['Time required']\n\n    indexu = mcq[index].unique()\n    indexu = indexu[~pd.isnull(indexu)]\n    indexu.sort()\n    colu = mcq[column].unique()\n    colu = colu[~pd.isnull(colu)].tolist()\n    \n    if limit == 0 or limit >= len(colu):\n        limit = len(colu)\n\n    col_list = mcq.groupby(column).count().sort_values('Time required', ascending = False).index.tolist()\n    if 'Other' in col_list:\n        col_list.remove('Other')\n        col_list.append('Other')\n    col_list = col_list[:limit]\n\n    col_len = len(col_list)\n\n    if limit > 0 and limit < len(colu):\n        others = 'Other ' + suffix\n        col_list += [others]\n        \n    count_mat = pd.DataFrame(np.zeros((len(indexu), len(col_list))), index = indexu, columns = col_list)\n    per_mat = pd.DataFrame(np.zeros((len(indexu), len(col_list))), index = indexu, columns = col_list)\n\n    for i in range(limit):\n        for j in group.loc[col_list[i]].index:\n            count_mat.loc[j][col_list[i]] = group.loc[col_list[i]][j]\n        colu.remove(col_list[i])\n\n    # for 'other<suffix>' columns, if limit 0, nothing left in colu\n    for i in colu:\n        for j in group.loc[i].index:\n            count_mat.loc[j][others] += group.loc[i][j]\n    \n    for i in count_mat.index:\n        total = sum(count_mat.loc[i])\n        for j in count_mat.columns:\n            per_mat.loc[i][j] = (count_mat.loc[i][j] \/ total) * 100\n    \n    return (count_mat, per_mat)\n\n\n# for (select all that apply) questions\n# below method calculates percentage w.r.t. total non-nan values.\n# For example, if a group has members a, b, c, d and there an attribute T with multiple selectable values x, y and z.\n# a selects x and y, b selects y, z, c selects all x, y, z.\n# percentage users of x is 50.0%, y is 75.0%, z is 50.0%.\n# But with multiple options selected, it becomes more as a set problem and a bit complicated to interpret with large number of values of T.\n# Thus, I have simply considered non - nan values for each values of x, y, z, and calculate percentage w.r.t. sum of all those non - nan values.\n# This gives more direct comparison between x, y, z where I calculate which value (x, y, z) has majority.\n# It also dissloves an uncertainty of 'd' not selecting any value, which is possible if question never appeared to 'd' as d could have selected negative answer to some \n# previous question OR could have selected values like 'None' or 'Other' which I have not considered for some questions. \n# Also makes easy for comparison between different groups like (a, b, c, d). \n\ndef multi_count_percent_mat(index, columns, limit = 0, suffix = 'Objects'):\n\n    count_mat = mcq.groupby(index).count()[columns]\n    count_mat.columns = list(map(lambda l : l[4:], count_mat.columns))\n\n    if limit >= len(count_mat.columns):\n        limit = 0\n\n    if limit > 0 and limit < len(count_mat.columns):\n        l = []\n        for i in count_mat.columns:\n            l.append(sum(count_mat[i]))\n        \n        count_mat.loc['Total'] = l\n        count_mat.sort_values('Total', axis = 1, ascending = False, inplace = True)\n        if 'Other' in count_mat.columns:\n            t = count_mat['Other']\n            del count_mat['Other']\n            count_mat['Other'] = t\n        \n        others = 'Other '+suffix\n        count_mat[others] = np.zeros(len(count_mat))\n    \n        for i in count_mat.columns[limit:-1]:\n            count_mat[others] += count_mat[i]\n            del count_mat[i]\n        count_mat.drop(index = 'Total', inplace = True)  \n\n    per_mat = pd.DataFrame(np.zeros((len(count_mat.index), len(count_mat.columns))), index = count_mat.index, columns = count_mat.columns)\n    for i in count_mat.index:\n        total = sum(count_mat.loc[i])\n        for j in count_mat.columns:\n            per_mat.loc[i][j] = (count_mat.loc[i][j] \/ total) * 100\n    return (count_mat, per_mat)\n","2f1c94f8":"data = mcq.groupby('Q3').count()[['Time required']]\ndata.sort_values('Time required', ascending = False, inplace = True)\n\nt = data.loc['Other']\ndata.drop(index = 'Other', inplace = True)\ndata = data.append(t)\n\ndata.drop(index = 'I do not wish to disclose my location', inplace = True)\n\nc = 0\nfor i in data.index[13:]:\n    c += data.loc[i]['Time required']\n\ndata = data[:13]\nt.name = 'Rest of World'\nt['Time required'] = c\ndata = data.append(t)\n\npie_with_bar(data.index, data['Time required'], data.index, data['Time required'], 'Countries', '', 'Count', [0.35, 1], [0.25, 0.9], showlegend=True, legend_pos = 'h', rotation = 180)","e1ae9bc7":"draw_map('Q1', 'Gender')","fc013f00":"d = count_percent_mat('Q3', 'Q1')[1]\nd.sort_values('Female', ascending = False)\n# to hide O\/P","d99f2df5":"draw_map('Q4', 'Highest Level of Education')","88ebb2ca":"draw_map('Q5', 'Undergraduate Major')","b95ee8f4":"draw_map('Q6', 'JobTitles')","7910ae3b":"draw_map('Q8', 'Years of Experience in current role')","37ac7b2e":"draw_map(mcq.columns[29:44], 'IDEs (by use)')","4ba1dc58":"draw_map(mcq.columns[45:54], 'Hosted Notebooks (by use)')","ea101f32":"draw_map(mcq.columns[57:62], 'Cloud Services (by use)')","59e39686":"draw_map('Q17', 'Programming Languages')","f10117f4":"draw_map('Q18', 'Recommended Language to young aspirants')","cb8fb478":"draw_map('Q20', 'ML Framework')","cf927554":"draw_map('Q22', 'Data Visualization Libraries')","5cfcce81":"draw_map('Q23', 'Time spent on coding')","00ebf7f9":"draw_map('Q24', 'Years writing code to analyse data')","63a345b5":"draw_map('Q25', 'Years using Machine Learning Algorithm')","24542e76":"draw_map(mcq.columns[130:148], 'Cloud Computing Framework (by use)')","33a53401":"draw_map(mcq.columns[195:221], 'Relational Database (by use)')","8ca25011":"draw_map(mcq.columns[224:247], 'BigData and Analytics Products (by use)')","1cca7b41":"draw_map('Q32', 'Type of Data')","3eaf4547":"draw_map(mcq.columns[265:274], 'Find Public Datasets (by use)')","a8334373":"draw_map('Q37', 'Online Learning Platform')","6885f6f3":"draw_map('Q40', 'Independent Projects v\/s Academic Achievements')","168e6c17":"draw_map(mcq.columns[336:341], 'Metrics that determine ML model\\'s sucess (by use)')","c4b74907":"d = mcq['Q2'].unique()\nd.sort()\nfor i in d[:-2]:\n    print(i, end = ', ')\nprint(d[-2], 'and', d[-1],'\\b.')","5b395f09":"data = mcq.groupby('Q2').count()\npie_with_bar(data.index, data['Time required'], data.index, data['Time required'], 'Age-wise count', 'Age Group', 'Count', [0.55, 1], showlegend=True)\n","104517e7":"draw_map('Q2', 'What country has what majority of age group on Kaggle?')","9e7eef00":"stacked_bar('Q2', 'Q4', 'Highest Level of Education', legend_pos = 'h')","32ad5203":"# is not displayed well when notebook is published\nstacked_bar('Q2', 'Q5', 'Undergraduate major<br>Hover over bars for legends', legend_pos = 'h', extra_suffix = 'Undergraduate majors', showlegend = False)","f5c873eb":"stacked_bar('Q2', 'Q6', 'Job Titles', extra_suffix = 'JobTitles')","aa1b5099":"stacked_bar('Q2', 'Q8', 'Years of Experience in Current Role')","3f440cda":"multi_stacked_bar('Q2', mcq.columns[45:54], 'Hosted Notebooks')","28a3a903":"stacked_bar('Q2', 'Q17', 'Programming Languages', extra_suffix = 'Languages')","2a76351b":"stacked_bar('Q2', 'Q18', 'Recommended Language for Young Aspirants', legend_pos = 'h', extra_suffix = 'Languages')","4ee3908a":"stacked_bar('Q2', 'Q20', 'Machine Language Framework', extra_suffix = 'ML Frmaeworks')","414d2d7d":"stacked_bar('Q2', 'Q22', 'Data Visualization Library')","77095fbf":"stacked_bar('Q2', 'Q32', 'Types of Data', legend_pos = 'h')","a993c78c":"box_dist('Q2', mcq.columns[277:283], 'Proportion of time devoted to various Data Science Tasks')","6f6a007e":"box_dist('Q2', mcq.columns[284:290], 'Proportion of training')","76cc11c5":"stacked_bar('Q2', 'Q48', 'Do you consider ML models as black box?', legend_pos = 'h')","b38e3329":"multi_stacked_bar('Q2', mcq.columns[343:349], 'Difficulty in identifying if ML model is fair\/unbiased', legend_pos = 'h')","a8d0bca4":"multi_stacked_bar('Q2', mcq.columns[356:371], 'Methods for explaining ML models output', extra_suffix = 'methods')","3458b965":"multi_stacked_bar('Q2', mcq.columns[386:394], 'Barriers Preventing from Share Coding', legend_pos = 'h')","770521ca":"from wordcloud import WordCloud\n\nimport matplotlib.pyplot as plt \n%matplotlib inline\n\nimport string\nfrom nltk.corpus import stopwords\n\ndef normalize_text(text):\n    \n    # lowercase it\n    text = text.lower()\n    # remove punctuation\n    text = ''.join([t if t not in string.punctuation else ' ' for t in text])\n    # remove stopwords\n    text = [t for t in text.split() if t not in stopwords.words('english')]\n    # return text\n    return ' '.join(text)\n\ndef make_text(col):\n    text = ''\n    for i in col:\n        if pd.notnull(i):\n            text += ' ' + normalize_text(i)\n    return text\n\ndef generate_wordcloud(col):\n    wordcloud = WordCloud(background_color = 'black', height = 1500, width = 2350, random_state = 21)\n    wordcloud.generate(make_text(col))\n    plt.figure(figsize=(15, 7))\n    plt.axis('off')\n    plt.imshow(wordcloud)\n\nfreeres = pd.read_csv('..\/input\/freeFormResponses.csv')\nfreeres.drop(index = 0, inplace = True)","099e6f65":"generate_wordcloud(freeres['Q1_OTHER_TEXT'])","2ec38dca":"generate_wordcloud(freeres['Q6_OTHER_TEXT'])","9b38894b":"generate_wordcloud(freeres['Q7_OTHER_TEXT'])","2c4eda1b":"generate_wordcloud(freeres['Q11_OTHER_TEXT'])","8116e9a1":"generate_wordcloud(freeres['Q12_OTHER_TEXT'])","4ece8b30":"generate_wordcloud(freeres['Q13_OTHER_TEXT'])","d907eecc":"generate_wordcloud(freeres['Q14_OTHER_TEXT'])","2683ceb5":"generate_wordcloud(freeres['Q15_OTHER_TEXT'])","80346747":"generate_wordcloud(freeres['Q16_OTHER_TEXT'])","8d6cf81c":"generate_wordcloud(freeres['Q17_OTHER_TEXT'])","a27c5a57":"generate_wordcloud(freeres['Q18_OTHER_TEXT'])","7ba21f4b":"generate_wordcloud(freeres['Q19_OTHER_TEXT'])","1ec0bcc2":"generate_wordcloud(freeres['Q20_OTHER_TEXT'])","d79c1577":"generate_wordcloud(freeres['Q21_OTHER_TEXT'])","fa823d4d":"generate_wordcloud(freeres['Q22_OTHER_TEXT'])","d48e5395":"generate_wordcloud(freeres['Q27_OTHER_TEXT'])","44d49273":"generate_wordcloud(freeres['Q28_OTHER_TEXT'])","e2c5dde3":"generate_wordcloud(freeres['Q29_OTHER_TEXT'])","871660ea":"generate_wordcloud(freeres['Q30_OTHER_TEXT'])","99e02362":"generate_wordcloud(freeres['Q31_OTHER_TEXT'])","74188a6a":"generate_wordcloud(freeres['Q32_OTHER'])","8ed4f65c":"generate_wordcloud(freeres['Q33_OTHER_TEXT'])","59da50b2":"generate_wordcloud(freeres['Q35_OTHER_TEXT'])","c6632f90":"generate_wordcloud(freeres['Q36_OTHER_TEXT'])","dbd32fe5":"generate_wordcloud(freeres['Q37_OTHER_TEXT'])","9712e399":"generate_wordcloud(freeres['Q38_OTHER_TEXT'])","737c7c24":"generate_wordcloud(freeres['Q42_OTHER_TEXT'])","d54feaac":"generate_wordcloud(freeres['Q49_OTHER_TEXT'])","702f693b":"generate_wordcloud(freeres['Q50_OTHER_TEXT'])","e039452a":"**#29 - Barrier preventing to reproduce\/reuse your work**","2d34f0c3":"**#14 - Data Visualization Library**","b36d057a":"Free response for learning ML include **Youtube, Bootcamp, Book, Blog, Competition, Research, Course, etc.** ","7f98f57a":"**#1 - Gender**","c98e76ec":"As **AWS** happened to be most popular cloud service, it's **EC2 cloud computing framework** is preferred by most of survey takers, followed by **Google Compute Engine in Peru, Chile, Nigeria, Kenya, Egypt, Turkey, Thailand and Vietnam,** and **Azure Virtual Machine in Norway**, and, **Google App Engine in Austria**, and **IBM Virtual Cloud Servers in Morocco.**","6124c42d":"**Sci-kit Learn** is widely preferred with **global average of 45.22%.** Also, survey takers from **Republic of Korea prefer Keras (30.3% - Keras, 12.12% - Scikit Learn) and those from South Korea use Tensorflow (32.67% - Tensorflow, 29.70%) than Sci-kit Learn.**","1e04d465":"**#4 - Important Part of Your Role**","9c0c3c7b":"**#6 - IDEs**","9c229c82":"Majority of survey takers from **Mexico, Belarus, Hungary and Iran have 1-2 years experience**, and **from Colombia have 2-3 years experience**, while those **from Argentina with have 5-10 years experience (21.24%)**. Otherwise **rest of world has majority with 0-1 years experience.**","35d0ebda":"**Python (around 69%)** is highly recommended language to young data science aspirants by any group, followed by **R and SQL (around 15% and 4% respectively). R** is more recommended towards towards right with **starting with 8% in 18-21 group, 13.15% in 30-34 group, 17.14% in 45-49 group, all the way to 27.27% in group 70-79. ** ","22d89477":"Groups towards left use **visual methods such as plotting predicted v\/s actual results, printing decision tree, plotting decision boundaries, etc.** more than those towards right using **advanced  technique such as Sensitivity Analysis\/Perturbation Importance, examine model coefficient, Dimensionality reduction techniques, etc.** to explain ML models output.","77209ca6":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For recent years, data science being among hot tech jobs and also increase in computer based solutions, has attracted lot of recent graduates, mostly with computer science background. In this chapter, we will explore how this new addition has changed use of tech., promoted by this young grads. \n<br>The age group given in this datasets are ","d626650a":"**#25 - Highly Used Online Learning Platform**","b70edbfd":"With most of groups having **similar proportion of opinion, proportion of those who are confident to explain outputs of most ML model improves as we walk right.** Also, for **group 70 -79,**  proportion of survey takers considering **ML models as black boxes (orange and green) is quite low (15.15%).**","446baea2":"The result seems to be copy of that for IDEs, with more use of **R (16, 28.57%) than Python (14, 25.0%)**. Otherwise, it is favours Python. Also, top 5 countries of which survey takers use R are in **Kenya (33.3% - R, 36.6% Python), Finland (30% - R, 58% - Python), Republic of Korea (28.94% - R, 55.26% - Python), New Zealand (28.57% - R, 25% - Python) and Malaysia (27.05% - R, 34.11% - Python).**   ","f4cb6cae":"Most common free responses for Data Visualization include **Tableau, Matlab, GNUPlot, TensorBoard, Dash, etc.**","4695de25":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The world is diverse by various aspects. Using 2018 Kaggle Survey data, we will explore how diverse it is among countries and between different age groups. Also, we will explore free responses given by survey takers that couldn't find their desired option.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It is my attempt to make visualization more informative, making data speak for itself with the use of interactive plots, also making data easy to absorb.<br>\n### Content\n1. [Diversity around world in data science.](#chap1)\n2. [Age is just not any number.](#chap2)\n3. [Exploring free responses.](#chap3)","3af65cc2":"Most common free response for Big Data and Analytics product include **Spark, Hadoop, Cloudera, Splunk, Hive, Apache, Kafka, etc.**","91752238":"**#26 - Favourite Media Sources**","f7635b57":"**#24 - Online Learning Platform**","508a9705":"# <center><\/ Thank You><\/center>","1748e8e3":"Free response for Cloud Computing Service include **OpenStack, Digital Ocean, Oracle, Tencent Cloud, Cloudera, Baidu, OneDrive, etc.**","9075ef11":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In this chapter, we will explore free responses using WordClouds. These responses show a **wide diversity of options** given by survey takers.","32f41140":"Majority of survey takers use **MySQL with global average of 23.48%**, followed by **PostgresSQL (14.9%) and SQLite (14.52%).** ","b90d8246":"**#23 - Machine Learning Training Sources**","d827964a":"Free responses for primary tools include **Python, Matlab, Pandas, Excel, Tensorflow, Jupyter Notebook, etc.**","60bdd299":"Common response for Industry include **Consultancy, Telecommunication, Analytics, Management, Agriculture, Healthcare, Automotive, etc.**","f0e8afd2":"**#27 - Metrics used to Determine Models Sucess**","1b845712":"**Coursera** is popular among most of survey takers **with global average (28.35%)**, followed by **DataCamp (33.33%)** popular in South East Asian Countries, **Udemy (11.36%)**, **edX (9.23%)**, and so on.","8979b030":"Majority of survey takers from **Canada, Peru, Brazil, Morocco, Nigeria, Tunisia, Egypt, Kenya, Portugal, Ireland, Switzerland, Italy, Denmark, Iran, Indian-Subcontinent, China, Republic of Korea, South Korea, Japan, South East Asia (excluding Thailand and Philippines) and Australia are Students**, while those from **United States, Mexico, Chile, Colombia, Argentina, Great Britain, France, Spain, Belgium, Netherlands, Germany, Poland, Austria, Hungary, Belarus, Norway, Sweden, Finland, Russia, Turkey, Greece, South Africa and Thailand have Data Scientists as their job title.** Also, those from **Philippines are Data Analyst and those from Romania, Czech Republic and Ukraine are Software Engineer.** ","a69fcddc":"**Matplotlib**, a low level Data Visualization Library in Python , is widely used with **global average of 55%, followed by ggplot2 (24.08%).** Also, survey takers from **Australia and New Zealand** prefer **ggplot2**, a Data Visualization package, in R with percentage count of **(40.43% - ggplot2, 35.11%) and (51.35% - ggplot2, 24.32 - Python), respectively. ","2d525143":"Most common free response for Machine Learning Framework include **Theano, Chainer, Weka, Darknet, NLTK, etc.**","4e6890b6":"Groups towards left find sharing their work more than groups towards right, as **they think it would require more technical knowledge** or **are afraid of their work being used by others without givving them much credit.** As we walk right, it is less likely for survey takers, to find difficulties because of any of above reason. Instead, it is more likely that their work is confidential and bound to their organization that normally won't allow to open source it.","3c9c6df8":"**Sci-kit Learn (around 40%)** is most popular ML framework among all age groups. **Tensorflow** , a low level neural networks library and **Keras**,  which is, high level in nature, neural networks library, is widely used by **18-21 group, 22.3% and 16.98% repectively.** With **mid-range group equally supporting** both these libraries, groups **55-59 and 60-69 prefer Keras more than Tensorflow.**  Also, **Caret**, which is a machine learning package for **R is quite popular within groups (mid range- ) that have good number of R preferred survey takers than groups towards left .**","cae9095a":"**Most of survey takers prefer spending 25%-49% and 50%-74% of their time on coding**. But, survey takers in **Austria, Argentina, Bangladesh and Japan** seem to spent **1%-25%**. However, it is worth noting that for **Austria** count for **1%-25% is 13 and that for 50%-74% is 12.**","60644357":"For most of data scientists on Kaggle being of age between 25-29 (25.8%), are followed by group 22-24, 30-34, 18-21 (21.5%, 15.8%, 12.7% respectively) and so on. **If age was a numerical attribute, it's distribution would look like a left leaning curve.** <br>\n","0e58861f":"Survey takers from **Canada, African Countries, Finland, Iran, Pakistan, India, New Zealand, Republic of Korea and Phillippines** highly prefer **Independent Project**, while those in **United States, South Asian Countries, Australia, and some countries in Europe** slightly prefer **Independent Project**. The rest of world have **equal importance**. Thus, we can conclude that **survey takers think Independent Projects demonstrate more expertise in Data Science than Academics Achievements.**","ca47b065":"**#10 - Often Used Programming Language**","2d3ab219":"Common Job Title include **Professor, Engineer, Analyst, Manager, Instructor, Machine Learning Engineer, etc.**","eb5aac29":"With most of survey takers work on **Numerical data with global average 25.36%,**, followed by **Tabular Data (18.73%) used by South Africa (24.53%), Kenya (32.08%), Ireland (32.31%), Finland (30.61%), Hungary (30.65%), Czech Republic (26.19%) and Belgium (22.22%),** and **Text data (14.02%) in Tunisia (23.33%) and Pakistan (23.53%)** and **Image Data (12.44%) in Belarus (30.0%), China (25.15%) and Vietnam (26.83%)** and **Time Series data (11.96%) in Austria(23.53%)**","0962c120":"**#15 - Most Used Data Visualization Library**","c2232dbb":"**#21 - Most Often Interacted Type of Data**","1f7d1312":"Survey takers from **South Africa (29.08%) and New Zealand(25.97%)** come from **Mathematics\/Statistics** background. Otherwise, most of them around world come from **Computer Science** background.","d514c5ba":"Lets check how numbers of people are distributed among these age groups.","833ccb35":"**#18 - Relational Databases**","5cc7faf3":"Excluding people who don't use cloud service or have given free responses, **AWS emerges as most popular cloud service among survey takers with global average 37.90%, followed by Google Cloud Platform (GCP) 28.81%, Microsoft Azure 23.55%, IBM Cloud 8.11% (widely used in Morocco 45.23%) and Alibaba Cloud 1.61% which used widely in China (48.26%).**","530f209f":"It is obvious to see **Kaggle Kernels** used widely with **global average 33%.**, followed by **JupyterHub  (25.46%), Google Colab (20.43%), Azure Notebook (7.88%), Google Cloud Datalab (7.19%) and so on.**","306bfa8d":"In recent years, data science jobs are on raise attracting **students with Computer Science degree.** Also, we can see that number of people with **Engineering (non-computer focused) and Mathematics\/Statistic major** increase as we walk right. They are mostly people who were originally in this field when it wasn't booming or there were not much computer based solutions available.","1976cc25":"Keywords in free response for barrier preventing to share work include **Proprietary, Privacy, Company, Confidentiality, Sensitivity, etc.**","35a0ea4c":"Most of survey takers find it **difficult in identifying and selecting appropriate evaluation metrics and collecting enough data points that may be unfairly targets**. As we walk right, survey takers **don't find any difficulty** in identifying if model is fair\/unbiased.","ca39438d":"<a id='chap3'><\/a>\n# Chapter 3 - Exploring free responses","ccd4cff1":"Most of survey takers find datasets on **Dataset aggregation sites like Kaggle with global average 18.15%**, followed by **Google Search (16.23%) and Github (12.94%).** Also, those from **Netherands collect their own data (through web scraping, etc) (17.89%)**. And, it is good to know that survey takers **find datasets on government websites in Australia (15.91%) and New Zealand (17.51%).**   ","ceb3378e":"Metrics related keywords in free response include **precision, recall, accuracy, evaluation, goal, confusion, etc.**","dadedf15":"**#13 - Most Used Machine Learning Framework**","1374f3a3":"**#17 - Machine Learning Products**","4f0f9871":"Valid free form responses are **transgender, male and female.**","8e0c95c9":"Common free responses for specific most used Data Visualization include **Tableau, Matlab, Powerbi, GNUPlot, Tensorboard, etc.**","b1cefcc4":"**#20 - Types of Data**","4b33e4b4":"**#5 - Primary Tool to Analyse Data**","0ea11f19":"Starting with 18-21 group having large number of **Students**, all remaining groups tend to have more number of **Data Scientists, and Consultants** in 60-69 and 70-79. For **Data Scientist**, trends goes up from **14.56% in 22-24 to 23.14% in 30-34, gradually falling in 35-39 (21.24%) to 10.78% in 60-69.** **Research Scientist** that require highly experienced people, start with **2.14% in 22-24, more than doubling to 4.97% in 25-29, growing to 7.82% and 8.64% in 30-34 and 35-39 respectively goes upto 20.41% in 70-79 group. For 80+, 17.64%** have free response which we will explore in last story.  ","4b3c0e10":"With all groups spending almost equal time with **Gathering data (15%), Cleaning data (20%), Visualizing data (10%), Model building\/selection (20%), Putting model into production (5%) and finding insights and communicating with stakeholders (10%)**, *values in () taken from overall median.*","6d24cb2d":"Every group largely works on **Numerical data (around 25%). 18-21 group** works more **on Image data (20.07%)** than any other group. It may contributed by academic projects. Also, **Time Series data and Text data** gets popular after **22-24 to 55-59 (12.78% to 17.15%)**. ","37ac1e96":"Free response answers for important part of role included keywords **Student, Data, Machine Learning, Model, Research, Data Science, Development, Analysis, etc.** ","36735a89":"With most of survey takers from **United States and some countries in Europe** have **1-2 years** experience of using ML algorithm, **rest of the world** has majority with **<1 years** followed by those having **1-2 years of experience.**","ccc361bd":"**Matplotlib (around 50%)**, a low level data visualization library is highly used by most of the groups as it is first library for every Python user making it most popular in **18-21 group**. **ggplot2 (around 28%)**, data visualization package for R follow same trend as that of **R in programming languages** is most popular in **50-59 group**. Other popular libraries are **Seaborn, Plotly, D3 and Shiny** that are all high level data visualization libraries. ","c867931e":"Most of survey takers in **Europe, North America, South America (excluding Brazil), South Africa, Morocco, Tunisia, Iran, Pakistan, China, South Korea, Thailand, Japan and New Zealand have Master's Degree, while Brazil, Nigeria, Egypt, Kenya, India, South East Asian Countries (excluding Thailand), Republic of Korea have Bachelors's Degree.** Percentage wise top 5 countries having **Doctoral Degree** are **Morocco (28.98%), Switzerland (28.65%), Germany (27.07%), Iran (25.92%) and United Kingdom of Great Britain and Northern Ireland (25.5%)**, having **Master's Degree** are **France (70.08%), Iran (66.66%), Belgium (64.86%), Poland (61.35%) and Spain (59.74%),** and those having **Bachelor's Degree** are **Nigeria (58.17%), Kenya (52.94%), Egypt (51.61%), Vietnam (51.06%), Indonesia and India (both 50%)** of survey takers.","a2477654":"# <center>Diversity around world, age and free responses<\/center>","86eefb96":"Free responses for Programming Languages Used include **Swift, Perl, Fortran, Rust, Haskell, Kotlin, Clojure, etc.**","f517f029":"Most often used lanuages free response include **Swift, Clojure, Spss, Erlang, Kotlin, Perl, Delphi, etc.**","d891bd7b":"Our world is diverse. There is lot of diversity in ideas, what we like, what tools we use most, .As the name suggests, in this story, we will explore what are most popular answers for our survey questions across world. Mostly discussing about what features\/tools\/trends appear in different parts of world. ","887f99fa":"In **New Zealand**, majority of user use **RStudio (38, 15.97%) and Jupyter\/IPython Notebooks (37, 15.55%).** While rest of world use **Jupyter\/IPython Notebooks with global average of 17.4%**","2ff2d93f":"**Conclusion :** On most of the aspects the world seems less diverse. However, R being originated in New Zealand has quite a bit of influence than Python, which unanimously most popular. Practical knowledge is gaining more importance as compared to academic acheivements. Participation of students and recents grads is quite in countries where Data Science and ML as a work field have recently emerged and booming.","c482448d":"Free response for most interacted type of include **Logs, Network, Web, Malware, Medical, Security, etc.**","a083c324":"It is very obvious that 18-21 group has majority of **Bachelor's Degree, 64%.** I wonder how Master's and Doctoral degree appear in this group, but otherwise most of remaining groups have **Master's Degree, around 48%**. Also, **Bachelor's Degree** and **Doctoral Degree** go on decreasing and increasing respectively as we go right. Also, with **people with professional degree and those who attended college\/university without Bachelor's Degree** have almost very thin difference, with each being high and low than other interchangably for different groups.","d3d2225f":"**#2 - JobTitles**","948c1346":"Keywords in free responses for Cloud Computing Products include **AWS, Azure, Alibaba, Digital Ocean, Sagemaker, Cloud, Google, Oracle, etc.**","57c316e4":"For age group **18-21**, it starts with **highest 55.06% gradually decreasing to 0.81% at 60-69.** However, it is good to see having **15.38% of people in 80+group**, as they must have started\/switched recently. It bring to a quote by a noble prize winner, ***The excitement of learning separates youth from old age. As long as you're learning, you're not old***. Otherwise, the trend seems obvious with **5-10 years experience being high in 30-34, followed by 15-20 years in 45-49 and 30+ in 70-79.**","956de0e5":"Common products in free response for Machine Learning Products include **Knime, Weka, Databricks, IBM Watson, SAP, etc.**","23104e6f":"<a id=\"chap2\"><\/a>\n# Chapter 2 -  Age is not just any number","d74ba8ae":"Keywords in free response for favourite media source include **AnalyticsVidhya, Podcast, Blog, Newsletter, etc.**","4525e394":"Keywords in free response for methods used to reproduce work include **publish, share, work, reproducible, etc.**","97652c99":"**#3 - Industry** ","33d7bf31":"**Conclusion :** Most of experienced survey takers come from Mathematical\/Statistical background allowing them to explore deep and explain tasks involved in designing machine learning algorithms. They tend to use scripting language R, which is specifically designed for data analysis, along with packages and tools that come along. With the boom of computer solutions, most of young survey takers happen to have Computer Science background. It can be more clear by how Python being more popular among them, as Python, a general purpose language is widely taught through academics in computer science. Obviously, experience (which can be mostly derived by age) plays an important role for being a more sophisticated (technically) machine learning engineer.","9d204eba":"**#9 - Programming Languages**","0a71e893":"<a id='chap1'><\/a>\n# Chapter 1 - Diversity around world in data science","8ff4913c":"Most common free response for online learning platform include **Lynda, MLCourse, Youtube, Codecademy, etc.**","31a469f1":"This result is more obvious as **Python is most easy language to use.** It has got **global average percentage of 75.03%** and from survey takers **in New Zealand 63.93% recommend it.** It is followed by **R with global average of 13.8%.**","6784b60a":"Common free response for Host Notebooks include **Jupyter Notebook, RStudio, Databricks, Github, Sagemaker, Zeppelin, Github, etc..**","30ccf358":"**#12 - Machine Learning Framework**","bd54517f":"Keywords in free response for Types of Data survey takers interact with include **Network, Log, Survey, Signals, Medical, ClickStream, Financial,etc.**","d7843fb7":"**#22 - Places to Find Datasets**","0899586e":"Most of survey takers prefer **metrics that consider accuracy.** Even those in Peru have preferred **Revenue and\/or business goals are 18**, those who prefer **metrics that consider accuracy are 17.** ","1caafbcc":"The **count of survey takers across world** favours men with **average percentage of men and women across world being 82.54% and 15.89% respectively.** However, it is worth noting that **some of countries have fine female% to male% ratio are Tunisia (31.08% - female, 67.56% - male), Malaysia (26.54%, 71.68%), Morocco (23.94%, 76.05%), Iran (23.89%, 75.22%), United States of America (22.94%, 74.85%), Egypt (22.91%, 76.04%), Romania (22.78%, 77.21%), Singapore (22.04%, 75.80%) and so on...\n<br>View below output for complete details...**\n","61098553":"Most of survey takers are **self taught and aided their learning with Online Courses**. The **mid age group** seems to learn quite at **work place**, while **groups near to left** have learned more through University than any other group as Universities have recently started including ML as a part of their courseware. For **Kaggle Competition, 18-21 group seems to learn higher (q3 = 15) compared to other groups (q3 = 10).**","773059e3":"With a quite mixture of **<1 year , 1-2 year and 3-5 year,** majority of people are writing code to analyse data for **1-2 years (29.36%),** followed by **<1 year (24.09%) and 3-5 years(22.04%).**","ca54c4c5":"**#8 - Cloud Computing Service**","e5a37cc3":"Keywords in free response for Places where DataSets are found include **Kaggle, Company, UCI, Private, Repository, Bloomberg, etc.**","c515e01a":"**Python** being most popular has not changed a lot. As **18-21** group has majority of Computer Science Students, we can a large contribution of CS popular programming languages like **C\/C++ and JAVA**, but it decreases towards right. Also, **R\/RStudio** has a growing trends towards right. **SQL** is like common database language everyone knows. **Visual Basic** is programming languages used, a lot before for Windows based applications.","89fd7a59":"Most of survey takers are from **United States of America (4716, 20.1%), followed by India (4417, 18.8%), China (1644, 7.01%), Russia (879, 3.75%), Brazil (736, 3.14%), Germany (734, 3.13%), United Kingdom of Great Britain and Northern Ireland (702, 2.99%), France (604, 2.57%), Canada (604, 2.57%), Japan (597, 2.54%), Spain (485, 2.07%), Italy (355, 1.51%), Australia (330, 1.41%) and all 44 remaining countries contribute (6662, 28.4%) records.**<br> Note that records in which **people have not disclosed their location** are not considered. Also, for this above graph **Other** option is considered. <br>However, for rest of this chapter **both of these categories are excluded.** ","e26fb143":"Free response for Database include **MongoDB, SAP Hana, RedShift, Teradata, Snowflake, etc.**","490db8e1":"**#19 - Big Data and Analytics Products**","285a83a7":"**#11 - Recommended Programming Language**","0363e43a":"For highly used online leaning platform, free response include **Youtube, Lynda, NPTEL, PluralSight, LinkedIn, Codecademy, etc.**","10bfdb49":"Starting with number count.","6003e232":"**#28 - Methods Used to Reproduce Work**","7833827f":"**Kaggle Kernels (around 33%)** and **JupyterHub (around 21%)** are popular among every group who use hosted notebook. Mid-range age group people seem to use **Azure Notebook (around 7% in 40-59 and 5.13% overall)** than people at both tails. **Google Colab** seems popular to left, but not increasing as we walk right **(23% to 12%).** Also, **Google Cloud Datalab** being most popular in **70-79 and 80+ group (15%).**","1efaeb46":"**#16 - Cloud Computing Products**","47b00440":"Most of survey takers use **Google BigQuery with global average 15.85%**, followed by **DataBricks (10.12%), AWS Redshift (8.48%), Microsoft Analysis Service (6.37%), Teradata (6.02%), AWS Elastic MapReduce (5.98%), and so on.**","85f01692":"Free response of first language recommendatin for young aspirants include **Python, Julia, Octave, etc.**","0b6c886e":"**#7 - Hosted Notebooks**","9dbae93e":"Free response for most preferred ML framework include **Theano, Weka, Chainer, Caret, NLTK, etc.**","84a3803b":"It is clear to say that most of countries have majority of 25-29 age group data scientists. Followed by 22-24 for countries like **China, Romania, Peru, Chile, Egypt, Tunisia, Morocco, Pakistan, and countries in South East Asia.** With countries **Australia, New Zealand, Belgium and Hungary** having majority age group 30-34 highly experienced people, only **India, Belarus and Ukraine** have 18-21 majority saying how popular data science is among college go-ers and recent graduates like me.","6c650bad":"Most of free response for IDEs include **Eclipse, Emac, Netbeans, XCode, NetBeans, Anaconda, Android Studio, Octave, SAS, Nano, Watson Studio, etc.**"}}