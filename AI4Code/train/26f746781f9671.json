{"cell_type":{"a1d392bc":"code","a7a4e65f":"code","ea4ebf60":"code","23180d75":"code","62e707bd":"code","c8ccbf58":"code","df74b109":"code","c88cbced":"code","ac88d58a":"code","fcbebe62":"code","9a9be3ed":"code","b0cdc922":"code","79ae1ae3":"code","cd86c66d":"code","76602044":"code","ea75ab6a":"code","23881e17":"code","3860cf58":"code","325de699":"code","cda05d59":"code","7c019aa6":"code","e98bec5a":"code","705cfd6e":"code","d2acb263":"code","a5671e79":"code","a028dfef":"code","9a3166ff":"code","44506939":"code","fbc98e2b":"code","355328a6":"code","3d74b04f":"code","64dfb009":"code","34a8477f":"code","1203b3dc":"code","fbf1b2e7":"code","f65a5f63":"code","26b82937":"code","ab076415":"code","c53a1c57":"code","78e2a68a":"code","ec8a278a":"code","9e0c4588":"code","154ab3ca":"code","70e58ffc":"code","27570c81":"code","64609161":"code","d9af4fca":"code","1f125f24":"code","1704d8c7":"code","ffb3079f":"code","cf7a9d97":"code","ea6eae48":"code","d547a822":"code","4a59cb60":"code","23089644":"code","3f5fcfd2":"code","7ddfeffe":"code","21efbbfd":"code","95c3dd3a":"code","749e482c":"code","5d6b0c8f":"code","ceef17c9":"code","e8e0b423":"code","ce6f9eac":"code","ed427035":"code","b5e80376":"code","2617ec1d":"code","903cbb09":"code","12a14ed5":"code","467e550d":"code","3c165297":"code","06e33fb3":"code","bb9f9364":"code","8da08428":"code","4a7a319e":"code","76d0730b":"code","9aa3e083":"code","dbd2012c":"code","e446840a":"code","92ca1b74":"code","2aaafbbf":"code","1f14f3eb":"markdown","fdf140dc":"markdown","e921a7d1":"markdown"},"source":{"a1d392bc":"import sys\nsys.path.append('..\/input\/iterative-stratification\/iterative-stratification-master')\nsys.path.append('..\/input\/umaplearn\/umap')\n%mkdir model\n%mkdir interim\nfrom scipy.sparse.csgraph import connected_components\nfrom umap import UMAP\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold\nimport numpy as np\nimport random\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport copy\nimport seaborn as sns\nimport time\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import log_loss\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA,FactorAnalysis\nfrom sklearn.manifold import TSNE\n\nimport torch\nimport torch.nn as nn\nDEVICE = ('cuda' if torch.cuda.is_available() else 'cpu')\n\nimport torch.nn.functional as F\nimport torch.optim as optim\nprint(torch.cuda.is_available())\nimport warnings\n# warnings.filterwarnings('ignore')","a7a4e65f":"NB = '25'\nEPOCHS = 15\nBATCH_SIZE = 256\nLEARNING_RATE = 5e-3\nWEIGHT_DECAY = 1e-5\nEARLY_STOPPING_STEPS = 10\nIS_TRAIN = True\nEARLY_STOP = False\nNFOLDS = 5\nMODEL_DIR = \"model\" # \"..\/model\"\nINT_DIR = \"interim\" # \"..\/interim\"\nPMIN = 0.0005\nPMAX = 0.9995\nSMIN = 0.0\nSMAX = 1.0","ea4ebf60":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets_scored = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntrain_targets_nonscored = pd.read_csv('..\/input\/lish-moa\/train_targets_nonscored.csv')\n\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\nsample_submission = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')\ntrain_targets_nonscored = train_targets_nonscored.loc[:, train_targets_nonscored.sum() != 0]\nprint(train_targets_nonscored.shape)","23180d75":"# for c in train_targets_scored.columns:\n#     if c != \"sig_id\":\n#         train_targets_scored[c] = np.maximum(PMIN, np.minimum(PMAX, train_targets_scored[c]))\nfor c in train_targets_nonscored.columns:\n    if c != \"sig_id\":\n        train_targets_nonscored[c] = np.maximum(PMIN, np.minimum(PMAX, train_targets_nonscored[c]))","62e707bd":"print(\"(nsamples, nfeatures)\")\nprint(train_features.shape)\nprint(train_targets_scored.shape)\nprint(train_targets_nonscored.shape)\nprint(test_features.shape)\nprint(sample_submission.shape)","c8ccbf58":"from sklearn.preprocessing import QuantileTransformer\n","df74b109":"GENES = [col for col in train_features.columns if col.startswith('g-')]\nCELLS = [col for col in train_features.columns if col.startswith('c-')]","c88cbced":"def seed_everything(seed=1903):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    \nseed_everything(seed=1903)","ac88d58a":"# GENES\nn_comp = 90\nn_dim = 35\n\ndata = pd.concat([pd.DataFrame(train_features[GENES]), pd.DataFrame(test_features[GENES])])\n\nif IS_TRAIN:\n    fa = FactorAnalysis(n_components=n_comp, random_state=1903).fit(data[GENES])\n    pd.to_pickle(fa, f'{MODEL_DIR}\/{NB}_factor_analysis_g.pkl')\n    umap = UMAP(n_components=n_dim, random_state=1903).fit(data[GENES])\n    pd.to_pickle(umap, f'{MODEL_DIR}\/{NB}_umap_g.pkl')\nelse:\n    fa = pd.read_pickle(f'{MODEL_DIR}\/{NB}_factor_analysis_g.pkl')\n    umap = pd.read_pickle(f'{MODEL_DIR}\/{NB}_umap_g.pkl')\n\ndata2 = (fa.transform(data[GENES]))\ndata3 = (umap.transform(data[GENES]))\n\ntrain2 = data2[:train_features.shape[0]]\ntest2 = data2[-test_features.shape[0]:]\ntrain3 = data3[:train_features.shape[0]]\ntest3 = data3[-test_features.shape[0]:]\n\ntrain2 = pd.DataFrame(train2, columns=[f'fa_G-{i}' for i in range(n_comp)])\ntrain3 = pd.DataFrame(train3, columns=[f'umap_G-{i}' for i in range(n_dim)])\ntest2 = pd.DataFrame(test2, columns=[f'fa_G-{i}' for i in range(n_comp)])\ntest3 = pd.DataFrame(test3, columns=[f'umap_G-{i}' for i in range(n_dim)])\n\ntrain_features = pd.concat((train_features, train2, train3), axis=1)\ntest_features = pd.concat((test_features, test2, test3), axis=1)\n\n#CELLS\nn_comp = 50\nn_dim = 5\n\ndata = pd.concat([pd.DataFrame(train_features[CELLS]), pd.DataFrame(test_features[CELLS])])\n\nif IS_TRAIN:\n    fa = FactorAnalysis(n_components=n_comp, random_state=1903).fit(data[CELLS])\n    pd.to_pickle(fa, f'{MODEL_DIR}\/{NB}_factor_analysis_c.pkl')\n    umap = UMAP(n_components=n_dim, random_state=1903).fit(data[CELLS])\n    pd.to_pickle(umap, f'{MODEL_DIR}\/{NB}_umap_c.pkl')\nelse:\n    fa = pd.read_pickle(f'{MODEL_DIR}\/{NB}_factor_analysis_c.pkl')\n    umap = pd.read_pickle(f'{MODEL_DIR}\/{NB}_umap_c.pkl')\n    \ndata2 = (fa.transform(data[CELLS]))\ndata3 = (umap.fit_transform(data[CELLS]))\n\ntrain2 = data2[:train_features.shape[0]]\ntest2 = data2[-test_features.shape[0]:]\ntrain3 = data3[:train_features.shape[0]]\ntest3 = data3[-test_features.shape[0]:]\n\ntrain2 = pd.DataFrame(train2, columns=[f'fa_C-{i}' for i in range(n_comp)])\ntrain3 = pd.DataFrame(train3, columns=[f'umap_C-{i}' for i in range(n_dim)])\ntest2 = pd.DataFrame(test2, columns=[f'fa_C-{i}' for i in range(n_comp)])\ntest3 = pd.DataFrame(test3, columns=[f'umap_C-{i}' for i in range(n_dim)])\n\ntrain_features = pd.concat((train_features, train2, train3), axis=1)\ntest_features = pd.concat((test_features, test2, test3), axis=1)\n\n# drop_cols = [f'c-{i}' for i in range(n_comp,len(CELLS))]","fcbebe62":"\nfor col in (GENES + CELLS):\n    vec_len = len(train_features[col].values)\n    vec_len_test = len(test_features[col].values)\n    raw_vec = pd.concat([train_features, test_features])[col].values.reshape(vec_len+vec_len_test, 1)\n    if IS_TRAIN:\n        transformer = QuantileTransformer(n_quantiles=100, random_state=123, output_distribution=\"normal\")\n        transformer.fit(raw_vec)\n        pd.to_pickle(transformer, f'{MODEL_DIR}\/{NB}_{col}_quantile_transformer.pkl')\n    else:\n        transformer = pd.read_pickle(f'{MODEL_DIR}\/{NB}_{col}_quantile_transformer.pkl')        \n\n    train_features[col] = transformer.transform(train_features[col].values.reshape(vec_len, 1)).reshape(1, vec_len)[0]\n    test_features[col] = transformer.transform(test_features[col].values.reshape(vec_len_test, 1)).reshape(1, vec_len_test)[0]\n# train = train_features.merge(train_targets_scored, on='sig_id')\ntrain = train_features.merge(train_targets_nonscored, on='sig_id')\ntrain = train[train['cp_type']!='ctl_vehicle'].reset_index(drop=True)\ntest = test_features[test_features['cp_type']!='ctl_vehicle'].reset_index(drop=True)\n\n# target = train[train_targets_scored.columns]\ntarget = train[train_targets_nonscored.columns]\ntrain = train.drop('cp_type', axis=1)\ntest = test.drop('cp_type', axis=1)","9a9be3ed":"print(target.shape)\nprint(train_features.shape)\nprint(test_features.shape)\nprint(train.shape)\nprint(test.shape)","b0cdc922":"target_cols = target.drop('sig_id', axis=1).columns.values.tolist()\nfolds = train.copy()\n\nmskf = MultilabelStratifiedKFold(n_splits=NFOLDS)\n\nfor f, (t_idx, v_idx) in enumerate(mskf.split(X=train, y=target)):\n    folds.loc[v_idx, 'kfold'] = int(f)\n\nfolds['kfold'] = folds['kfold'].astype(int)\nfolds","79ae1ae3":"class MoADataset:\n    def __init__(self, features, targets):\n        self.features = features\n        self.targets = targets\n        \n    def __len__(self):\n        return (self.features.shape[0])\n    \n    def __getitem__(self, idx):\n        dct = {\n            'x' : torch.tensor(self.features[idx, :], dtype=torch.float),\n            'y' : torch.tensor(self.targets[idx, :], dtype=torch.float)            \n        }\n        return dct\n    \nclass TestDataset:\n    def __init__(self, features):\n        self.features = features\n        \n    def __len__(self):\n        return (self.features.shape[0])\n    \n    def __getitem__(self, idx):\n        dct = {\n            'x' : torch.tensor(self.features[idx, :], dtype=torch.float)\n        }\n        return dct","cd86c66d":"def train_fn(model, optimizer, scheduler, loss_fn, dataloader, device):\n    model.train()\n    final_loss = 0\n    \n    for data in dataloader:\n        optimizer.zero_grad()\n        inputs, targets = data['x'].to(device), data['y'].to(device)\n#         print(inputs.shape)\n        outputs = model(inputs)\n        loss = loss_fn(outputs, targets)\n        loss.backward()\n        optimizer.step()\n        scheduler.step()\n        \n        final_loss += loss.item()\n        \n    final_loss \/= len(dataloader)\n    \n    return final_loss\n\n\ndef valid_fn(model, loss_fn, dataloader, device):\n    model.eval()\n    final_loss = 0\n    valid_preds = []\n    \n    for data in dataloader:\n        inputs, targets = data['x'].to(device), data['y'].to(device)\n        outputs = model(inputs)\n        loss = loss_fn(outputs, targets)\n        \n        final_loss += loss.item()\n        valid_preds.append(outputs.sigmoid().detach().cpu().numpy())\n        \n    final_loss \/= len(dataloader)\n    valid_preds = np.concatenate(valid_preds)\n    \n    return final_loss, valid_preds\n\ndef inference_fn(model, dataloader, device):\n    model.eval()\n    preds = []\n    \n    for data in dataloader:\n        inputs = data['x'].to(device)\n\n        with torch.no_grad():\n            outputs = model(inputs)\n        \n        preds.append(outputs.sigmoid().detach().cpu().numpy())\n        \n    preds = np.concatenate(preds)\n    \n    return preds","76602044":"class Model(nn.Module):\n    def __init__(self, num_features, num_targets, hidden_size):\n        super(Model, self).__init__()\n        self.batch_norm1 = nn.BatchNorm1d(num_features)\n        self.dropout1 = nn.Dropout(0.15)\n        self.dense1 = nn.utils.weight_norm(nn.Linear(num_features, hidden_size))\n        \n        self.batch_norm2 = nn.BatchNorm1d(hidden_size)\n        self.dropout2 = nn.Dropout(0.3)\n        self.dense2 = nn.Linear(hidden_size, hidden_size)\n        \n        self.batch_norm3 = nn.BatchNorm1d(hidden_size)\n        self.dropout3 = nn.Dropout(0.25)\n        self.dense3 = nn.utils.weight_norm(nn.Linear(hidden_size, num_targets))\n    \n    def forward(self, x):\n        x = self.batch_norm1(x)\n        x = self.dropout1(x)\n        x = F.leaky_relu(self.dense1(x))\n        \n        x = self.batch_norm2(x)\n        x = self.dropout2(x)\n        x = F.leaky_relu(self.dense2(x))\n        \n        x = self.batch_norm3(x)\n        x = self.dropout3(x)\n        x = self.dense3(x)\n        \n        return x","ea75ab6a":"def process_data(data):\n    \n    data = pd.get_dummies(data, columns=['cp_time','cp_dose'])\n#     data.loc[:, 'cp_time'] = data.loc[:, 'cp_time'].map({24: 0, 48: 1, 72: 2})\n#     data.loc[:, 'cp_dose'] = data.loc[:, 'cp_dose'].map({'D1': 0, 'D2': 1})\n\n# --------------------- Normalize ---------------------\n#     for col in GENES:\n#         data[col] = (data[col]-np.mean(data[col])) \/ (np.std(data[col]))\n    \n#     for col in CELLS:\n#         data[col] = (data[col]-np.mean(data[col])) \/ (np.std(data[col]))\n    \n#--------------------- Removing Skewness ---------------------\n#     for col in GENES + CELLS:\n#         if(abs(data[col].skew()) > 0.75):\n            \n#             if(data[col].skew() < 0): # neg-skewness\n#                 data[col] = data[col].max() - data[col] + 1\n#                 data[col] = np.sqrt(data[col])\n            \n#             else:\n#                 data[col] = np.sqrt(data[col])\n    \n    return data\nfeature_cols = [c for c in process_data(folds).columns if c not in target_cols]\nfeature_cols = [c for c in feature_cols if c not in ['kfold','sig_id']]\nlen(feature_cols)","23881e17":"num_features=len(feature_cols)\nnum_targets=len(target_cols)\nhidden_size=2048\n# hidden_size=4096\n# hidden_size=9192","3860cf58":"import torch\nfrom torch.nn.modules.loss import _WeightedLoss\nimport torch.nn.functional as F\n\nclass SmoothBCEwLogits(_WeightedLoss):\n    def __init__(self, weight=None, reduction='mean', smoothing=0.0):\n        super().__init__(weight=weight, reduction=reduction)\n        self.smoothing = smoothing\n        self.weight = weight\n        self.reduction = reduction\n\n    @staticmethod\n    def _smooth(targets:torch.Tensor, n_labels:int, smoothing=0.0):\n        assert 0 <= smoothing < 1\n        with torch.no_grad():\n            targets = targets * (1.0 - smoothing) + 0.5 * smoothing\n        return targets\n\n    def forward(self, inputs, targets):\n        targets = SmoothBCEwLogits._smooth(targets, inputs.size(-1),\n            self.smoothing)\n        loss = F.binary_cross_entropy_with_logits(inputs, targets,self.weight)\n\n        if  self.reduction == 'sum':\n            loss = loss.sum()\n        elif  self.reduction == 'mean':\n            loss = loss.mean()\n\n        return loss","325de699":"def run_training(fold, seed):\n    \n    seed_everything(seed)\n    \n    train = process_data(folds)\n    test_ = process_data(test)\n    \n    trn_idx = train[train['kfold'] != fold].index\n    val_idx = train[train['kfold'] == fold].index\n    \n    train_df = train[train['kfold'] != fold].reset_index(drop=True)\n    valid_df = train[train['kfold'] == fold].reset_index(drop=True)\n    \n    x_train, y_train  = train_df[feature_cols].values, train_df[target_cols].values\n    x_valid, y_valid =  valid_df[feature_cols].values, valid_df[target_cols].values\n    \n    train_dataset = MoADataset(x_train, y_train)\n    valid_dataset = MoADataset(x_valid, y_valid)\n    trainloader = torch.utils.data.DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n    validloader = torch.utils.data.DataLoader(valid_dataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n    model = Model(\n        num_features=num_features,\n        num_targets=num_targets,\n        hidden_size=hidden_size,\n    )\n    \n    model.to(DEVICE)\n    \n    optimizer = torch.optim.Adam(model.parameters(), lr=5e-3, weight_decay=WEIGHT_DECAY)\n    scheduler = optim.lr_scheduler.OneCycleLR(optimizer=optimizer, pct_start=0.2, div_factor=1e3, \n                                              max_lr=1e-2, epochs=EPOCHS, steps_per_epoch=len(trainloader))\n    \n    loss_fn = nn.BCEWithLogitsLoss()\n    \n    loss_tr = SmoothBCEwLogits(smoothing =0.001)\n    early_stopping_steps = EARLY_STOPPING_STEPS\n    early_step = 0\n    \n    oof = np.zeros((len(train), target.iloc[:, 1:].shape[1]))\n    best_loss = np.inf\n    \n    for epoch in range(EPOCHS):\n        \n        train_loss = train_fn(model, optimizer,scheduler, loss_tr, trainloader, DEVICE)\n        print(f\"SEED: {seed}, FOLD: {fold}, EPOCH: {epoch}, train_loss: {train_loss}\")\n        valid_loss, valid_preds = valid_fn(model, loss_fn, validloader, DEVICE)\n        print(f\"SEED: {seed} ,FOLD: {fold}, EPOCH: {epoch}, valid_loss: {valid_loss}\")\n        \n        if valid_loss < best_loss:\n            \n            best_loss = valid_loss\n            oof[val_idx] = valid_preds\n            torch.save(model.state_dict(), f\"model\/{NB}-nonscored1-SEED{seed}-FOLD{fold}_.pth\")\n        \n        elif(EARLY_STOP == True):\n            \n            early_step += 1\n            if (early_step >= early_stopping_steps):\n                break\n            \n    \n    #--------------------- PREDICTION---------------------\n    x_test = test_[feature_cols].values\n    testdataset = TestDataset(x_test)\n    testloader = torch.utils.data.DataLoader(testdataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n    model = Model(\n        num_features=num_features,\n        num_targets=num_targets,\n        hidden_size=hidden_size,\n\n    )\n    \n    model.load_state_dict(torch.load(f\"model\/{NB}-nonscored1-SEED{seed}-FOLD{fold}_.pth\"))\n    model.to(DEVICE)\n    \n    predictions = np.zeros((len(test_), target.iloc[:, 1:].shape[1]))\n    predictions = inference_fn(model, testloader, DEVICE)\n    \n    return oof, predictions","cda05d59":"def run_k_fold(NFOLDS, seed):\n    oof = np.zeros((len(train), len(target_cols)))\n    predictions = np.zeros((len(test), len(target_cols)))\n    \n    for fold in range(NFOLDS):\n        oof_, pred_ = run_training(fold, seed)\n        \n        predictions += pred_ \/ NFOLDS\n        oof += oof_\n        \n    return oof, predictions","7c019aa6":"SEED = [940, 1513, 1269,1392,1119,1303]\noof = np.zeros((len(train), len(target_cols)))\npredictions = np.zeros((len(test), len(target_cols)))\n\ntime_start = time.time()\n\nfor seed in SEED:\n    \n    oof_, predictions_ = run_k_fold(NFOLDS, seed)\n    oof += oof_ \/ len(SEED)\n    predictions += predictions_ \/ len(SEED)\n    print(f\"elapsed time: {time.time() - time_start}\")\n\ntrain[target_cols] = oof\ntest[target_cols] = predictions\n\nprint(oof.shape)\nprint(predictions.shape)","e98bec5a":"train.to_pickle(\"{NB}-train_nonscore_pred.pkl\")\ntest.to_pickle(\"{NB}-test_nonscore_pred.pkl\")","705cfd6e":"train[target_cols] = np.maximum(PMIN, np.minimum(PMAX, train[target_cols]))\nvalid_results = train_targets_nonscored.drop(columns=target_cols).merge(train[['sig_id']+target_cols], on='sig_id', how='left').fillna(0)\n\ny_true = train_targets_nonscored[target_cols].values\ny_true = y_true > 0.5\ny_pred = valid_results[target_cols].values\n\nscore = 0\nfor i in range(len(target_cols)):\n    score_ = log_loss(y_true[:, i], y_pred[:, i])\n    score += score_ \/ target.shape[1]\n    \nprint(\"CV log_loss: \", score)","d2acb263":"from sklearn.preprocessing import QuantileTransformer","a5671e79":"os.listdir('..\/input\/lish-moa')","a028dfef":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets_scored = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntrain_targets_nonscored = pd.read_csv('..\/input\/lish-moa\/train_targets_nonscored.csv')\ntrain_drugs = pd.read_csv('..\/input\/lish-moa\/train_drug.csv')\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\nsample_submission = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')\ntrain_features = train_drugs.merge(train_features,on='sig_id',how='left')\n#train_target_scored = train_target_scored.merge(train_drug,on='sig_id')","9a3166ff":"train2 = pd.read_pickle(\"{NB}-train_nonscore_pred.pkl\")\ntest2 = pd.read_pickle(\"{NB}-test_nonscore_pred.pkl\")","44506939":"test2","fbc98e2b":"test2","355328a6":"train = train2.merge(train_targets_scored, on='sig_id')\n#train = train[train['cp_type']!='ctl_vehicle'].reset_index(drop=True)\n#test = test2[test2['cp_type']!='ctl_vehicle'].reset_index(drop=True)\ntest=test2\ntarget = train[train_targets_scored.columns]","3d74b04f":"train","64dfb009":"target_cols = target.drop('sig_id', axis=1).columns.values.tolist()","34a8477f":"#folds = train.copy()\n\n#mskf = MultilabelStratifiedKFold(n_splits=5)\n\n#for f, (t_idx, v_idx) in enumerate(mskf.split(X=train, y=target)):\n#    folds.loc[v_idx, 'kfold'] = int(f)\n\n#folds['kfold'] = folds['kfold'].astype(int)\n#folds","1203b3dc":"train","fbf1b2e7":"train = train_drugs.merge(train,on='sig_id')","f65a5f63":"train[['sig_id','drug_id']]","26b82937":"scored = (train[['sig_id','drug_id']]).merge(train[train_targets_scored.columns],on='sig_id')\nscored","ab076415":"targets = scored.columns[2:]","c53a1c57":"train","78e2a68a":"train_targets_nonscored = train_targets_nonscored.loc[:, train_targets_nonscored.sum() != 0]\n","ec8a278a":"nonscored_target = [c for c in train[train_targets_nonscored.columns] if c != \"sig_id\"]\n","9e0c4588":"# from sklearn.preprocessing import QuantileTransformer\n\nfor col in (nonscored_target):\n\n    vec_len = len(train[col].values)\n    vec_len_test = len(test[col].values)\n    raw_vec = train[col].values.reshape(vec_len, 1)\n    if IS_TRAIN:\n        transformer = QuantileTransformer(n_quantiles=100, random_state=0, output_distribution=\"normal\")\n        transformer.fit(raw_vec)\n        pd.to_pickle(transformer, f\"{MODEL_DIR}\/{NB}_{col}_quantile_nonscored.pkl\")\n    else:\n        transformer = pd.read_pickle(f\"{MODEL_DIR}\/{NB}_{col}_quantile_nonscored.pkl\")\n\n    train[col] = transformer.transform(raw_vec).reshape(1, vec_len)[0]\n    test[col] = transformer.transform(test[col].values.reshape(vec_len_test, 1)).reshape(1, vec_len_test)[0]","154ab3ca":"FOLDS = 5\nvc = scored.drug_id.value_counts()\nvc1 = vc.loc[(vc==6)|(vc==12)|(vc==18)].index.sort_values()\nvc2 = vc.loc[(vc!=6)&(vc!=12)&(vc!=18)].index.sort_values()\nfolds = train.copy()\n# STRATIFY DRUGS 18X OR LESS\ndct1 = {}; dct2 = {}\nskf = MultilabelStratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=34)\ntmp = scored.groupby('drug_id')[targets].mean().loc[vc1]\nfor fold,(idxT,idxV) in enumerate( skf.split(tmp,tmp[targets])):\n    dd = {k:fold for k in tmp.index[idxV].values}\n    dct1.update(dd)\n\n# STRATIFY DRUGS MORE THAN 18X\nskf = MultilabelStratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=34)\ntmp = scored.loc[scored.drug_id.isin(vc2)].reset_index(drop=True)\nfor fold,(idxT,idxV) in enumerate( skf.split(tmp,tmp[targets])):\n    dd = {k:fold for k in tmp.sig_id[idxV].values}\n    dct2.update(dd)\n                \nfolds['kfold'] = folds.drug_id.map(dct1)\nfolds.loc[folds.kfold.isna(),'kfold'] =\\\n    folds.loc[folds.kfold.isna(),'sig_id'].map(dct2)\nfolds.kfold = folds.kfold.astype('int8')","70e58ffc":"print(train.shape)\nprint(folds.shape)\nprint(test.shape)\nprint(target.shape)\nprint(sample_submission.shape)","27570c81":"folds","64609161":"test","d9af4fca":"class MoADataset:\n    def __init__(self, features, targets):\n        self.features = features\n        self.targets = targets\n        \n    def __len__(self):\n        return (self.features.shape[0])\n    \n    def __getitem__(self, idx):\n        dct = {\n            'x' : torch.tensor(self.features[idx, :], dtype=torch.float),\n            'y' : torch.tensor(self.targets[idx, :], dtype=torch.float)            \n        }\n        return dct\n    \nclass TestDataset:\n    def __init__(self, features):\n        self.features = features\n        \n    def __len__(self):\n        return (self.features.shape[0])\n    \n    def __getitem__(self, idx):\n        dct = {\n            'x' : torch.tensor(self.features[idx, :], dtype=torch.float)\n        }\n        return dct\n    ","1f125f24":"def train_fn(model, optimizer, scheduler, loss_fn, dataloader, device):\n    model.train()\n    final_loss = 0\n    \n    for data in dataloader:\n        optimizer.zero_grad()\n        inputs, targets = data['x'].to(device), data['y'].to(device)\n#         print(inputs.shape)\n        outputs = model(inputs)\n        loss = loss_fn(outputs, targets)\n        loss.backward()\n        optimizer.step()\n        scheduler.step()\n        \n        final_loss += loss.item()\n        \n    final_loss \/= len(dataloader)\n    \n    return final_loss\n\n\ndef valid_fn(model, loss_fn, dataloader, device):\n    model.eval()\n    final_loss = 0\n    valid_preds = []\n    \n    for data in dataloader:\n        inputs, targets = data['x'].to(device), data['y'].to(device)\n        outputs = model(inputs)\n        loss = loss_fn(outputs, targets)\n        \n        final_loss += loss.item()\n        valid_preds.append(outputs.sigmoid().detach().cpu().numpy())\n        \n    final_loss \/= len(dataloader)\n    valid_preds = np.concatenate(valid_preds)\n    \n    return final_loss, valid_preds\n\ndef inference_fn(model, dataloader, device):\n    model.eval()\n    preds = []\n    \n    for data in dataloader:\n        inputs = data['x'].to(device)\n\n        with torch.no_grad():\n            outputs = model(inputs)\n        \n        preds.append(outputs.sigmoid().detach().cpu().numpy())\n        \n    preds = np.concatenate(preds)\n    \n    return preds\n   \n    ","1704d8c7":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    \nseed_everything(seed=42)","ffb3079f":"import torch\nfrom torch.nn.modules.loss import _WeightedLoss\nimport torch.nn.functional as F\n\nclass SmoothBCEwLogits(_WeightedLoss):\n    def __init__(self, weight=None, reduction='mean', smoothing=0.0):\n        super().__init__(weight=weight, reduction=reduction)\n        self.smoothing = smoothing\n        self.weight = weight\n        self.reduction = reduction\n\n    @staticmethod\n    def _smooth(targets:torch.Tensor, n_labels:int, smoothing=0.0):\n        assert 0 <= smoothing < 1\n        with torch.no_grad():\n            targets = targets * (1.0 - smoothing) + 0.5 * smoothing\n        return targets\n\n    def forward(self, inputs, targets):\n        targets = SmoothBCEwLogits._smooth(targets, inputs.size(-1),\n            self.smoothing)\n        loss = F.binary_cross_entropy_with_logits(inputs, targets,self.weight)\n\n        if  self.reduction == 'sum':\n            loss = loss.sum()\n        elif  self.reduction == 'mean':\n            loss = loss.mean()\n\n        return loss","cf7a9d97":"class Model(nn.Module):      # <-- Update\n    def __init__(self, num_features, num_targets, hidden_size):\n        super(Model, self).__init__()\n        self.batch_norm1 = nn.BatchNorm1d(num_features)\n        self.dense1 = nn.utils.weight_norm(nn.Linear(num_features, hidden_size))\n        \n        self.batch_norm2 = nn.BatchNorm1d(hidden_size)\n        self.dropout2 = nn.Dropout(0.25)\n        self.dense2 = nn.Linear(hidden_size, hidden_size)\n        \n        self.batch_norm3 = nn.BatchNorm1d(hidden_size)\n        self.dropout3 = nn.Dropout(0.25)\n        self.dense3 = nn.utils.weight_norm(nn.Linear(hidden_size, num_targets))\n    \n    def forward(self, x):\n        x = self.batch_norm1(x)\n        x = F.leaky_relu(self.dense1(x))\n        \n        x = self.batch_norm2(x)\n        x = self.dropout2(x)\n        x = F.leaky_relu(self.dense2(x))\n        \n        x = self.batch_norm3(x)\n        x = self.dropout3(x)\n        x = self.dense3(x)\n        \n        return x","ea6eae48":"def process_data(data):\n    data = pd.get_dummies(data, columns=['cp_time','cp_dose'])\n    return data","d547a822":"feature_cols = [c for c in process_data(folds).columns if c not in target_cols]\nfeature_cols = [c for c in feature_cols if c not in ['kfold','sig_id','drug_id']]\nlen(feature_cols)","4a59cb60":"# HyperParameters\n\nDEVICE = ('cuda' if torch.cuda.is_available() else 'cpu')\nEPOCHS = 12\nBATCH_SIZE = 128\nLEARNING_RATE = 5e-3\nWEIGHT_DECAY = 1e-5\nNFOLDS = 5            #<-- Update\nEARLY_STOPPING_STEPS = 10\nEARLY_STOP = False\n\nnum_features=len(feature_cols)\nnum_targets=len(target_cols)\nhidden_size=2048\n","23089644":"def run_training(fold, seed):\n    \n    seed_everything(seed)\n    \n    train = process_data(folds)\n    test_ = process_data(test)\n    \n    trn_idx = train[train['kfold'] != fold].index\n    val_idx = train[train['kfold'] == fold].index\n    \n    train_df = train[train['kfold'] != fold].reset_index(drop=True)\n    valid_df = train[train['kfold'] == fold].reset_index(drop=True)\n    \n    x_train, y_train  = train_df[feature_cols].values, train_df[target_cols].values\n    x_valid, y_valid =  valid_df[feature_cols].values, valid_df[target_cols].values\n    \n    train_dataset = MoADataset(x_train, y_train)\n    valid_dataset = MoADataset(x_valid, y_valid)\n    trainloader = torch.utils.data.DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n    validloader = torch.utils.data.DataLoader(valid_dataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n    model = Model(\n        num_features=num_features,\n        num_targets=num_targets,\n        hidden_size=hidden_size,\n    )\n    \n    model.to(DEVICE)\n    \n    optimizer = torch.optim.Adam(model.parameters(), lr=5e-3, weight_decay=WEIGHT_DECAY)\n    scheduler = optim.lr_scheduler.OneCycleLR(optimizer=optimizer, pct_start=0.2, div_factor=1e3, \n                                              max_lr=1e-2, epochs=EPOCHS, steps_per_epoch=len(trainloader))\n    \n    loss_fn = nn.BCEWithLogitsLoss()\n    \n    loss_tr = SmoothBCEwLogits(smoothing =0.001)\n    early_stopping_steps = EARLY_STOPPING_STEPS\n    early_step = 0\n    \n    oof = np.zeros((len(train), target.iloc[:, 1:].shape[1]))\n    best_loss = np.inf\n    \n    for epoch in range(EPOCHS):\n        \n        train_loss = train_fn(model, optimizer,scheduler, loss_tr, trainloader, DEVICE)\n        print(f\"SEED: {seed}, FOLD: {fold}, EPOCH: {epoch}, train_loss: {train_loss}\")\n        valid_loss, valid_preds = valid_fn(model, loss_fn, validloader, DEVICE)\n        print(f\"SEED: {seed} ,FOLD: {fold}, EPOCH: {epoch}, valid_loss: {valid_loss}\")\n        \n        if valid_loss < best_loss:\n            \n            best_loss = valid_loss\n            oof[val_idx] = valid_preds\n            torch.save(model.state_dict(), f\"model\/{NB}-scored1-SEED{seed}-FOLD{fold}_.pth\")\n        \n        elif(EARLY_STOP == True):\n            \n            early_step += 1\n            if (early_step >= early_stopping_steps):\n                break\n            \n    \n    #--------------------- PREDICTION---------------------\n    x_test = test_[feature_cols].values\n    testdataset = TestDataset(x_test)\n    testloader = torch.utils.data.DataLoader(testdataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n    model = Model(\n        num_features=num_features,\n        num_targets=num_targets,\n        hidden_size=hidden_size,\n\n    )\n    \n    model.load_state_dict(torch.load(f\"model\/{NB}-scored1-SEED{seed}-FOLD{fold}_.pth\"))\n    model.to(DEVICE)\n    \n    predictions = np.zeros((len(test_), target.iloc[:, 1:].shape[1]))\n    predictions = inference_fn(model, testloader, DEVICE)\n    \n    return oof, predictions","3f5fcfd2":"def run_k_fold(NFOLDS, seed):\n    oof = np.zeros((len(train), len(target_cols)))\n    predictions = np.zeros((len(test), len(target_cols)))\n    \n    for fold in range(NFOLDS):\n        oof_, pred_ = run_training(fold, seed)\n        \n        predictions += pred_ \/ NFOLDS\n        oof += oof_\n        \n    return oof, predictions","7ddfeffe":"# Averaging on multiple SEEDS\n\nSEED = [940, 1513, 1269,1392,1119,1303]  #<-- Update\noof = np.zeros((len(train), len(target_cols)))\npredictions = np.zeros((len(test), len(target_cols)))\n\nfor seed in SEED:\n    \n    oof_, predictions_ = run_k_fold(NFOLDS, seed)\n    oof += oof_ \/ len(SEED)\n    predictions += predictions_ \/ len(SEED)\n\ntrain[target_cols] = oof\ntest[target_cols] = predictions\n","21efbbfd":"train.to_pickle(f\"{INT_DIR}\/{NB}-train-score-pred.pkl\")\ntest.to_pickle(f\"{INT_DIR}\/{NB}-test-score-pred.pkl\")","95c3dd3a":"len(target_cols)\n","749e482c":"valid_results = train_targets_scored.drop(columns=target_cols).merge(train[['sig_id']+target_cols], on='sig_id', how='left').fillna(0)\n\n\ny_true = train_targets_scored[target_cols].values\ny_pred = valid_results[target_cols].values\n\nscore = 0\nfor i in range(len(target_cols)):\n    score_ = log_loss(y_true[:, i], y_pred[:, i])\n    score += score_ \/ target.shape[1]\n    \nprint(\"CV log_loss: \", score)\n    ","5d6b0c8f":"test[target_cols]","ceef17c9":"sub = sample_submission.drop(columns=target_cols).merge(test[['sig_id']+target_cols], on='sig_id', how='left').fillna(0)\n#sub.to_csv('submission.csv', index=False)","e8e0b423":"sub","ce6f9eac":"train = pd.read_pickle(f\"{INT_DIR}\/{NB}-train-score-pred.pkl\")\ntest = pd.read_pickle(f\"{INT_DIR}\/{NB}-test-score-pred.pkl\")\ntrain = train[train_targets_scored.columns]\ntest = test[train_targets_scored.columns]\n\ntrain.columns = [c + \"_pred\" if (c != 'sig_id' and c in train_targets_scored.columns) else c for c in train.columns]","ed427035":"test.columns = [c + \"_pred\" if (c != 'sig_id' and c in train_targets_scored.columns) else c for c in test.columns]","b5e80376":"train","2617ec1d":"# use nonscored target in the given file as feature\n# if comment out below, use predicted nonscored target\n# train = train.drop(nonscored_target, axis=1)\n# train = train.merge(train_targets_nonscored, on=\"sig_id\")\n# train = train_features.merge(train_targets_scored, on='sig_id')\ntrain = train_drugs.merge(train,on='sig_id')\ntrain = train.merge(train_targets_scored, on='sig_id')\n# train = train[train['cp_type']!='ctl_vehicle'].reset_index(drop=True)\n# test = test[test['cp_type']!='ctl_vehicle'].reset_index(drop=True)\n\n# target = train[train_targets_scored.columns]\ntarget = train[train_targets_scored.columns]","903cbb09":"from sklearn.preprocessing import QuantileTransformer\n\nscored_target_pred = [c + \"_pred\" for c in train_targets_scored.columns if c != 'sig_id']\n\nfor col in (scored_target_pred):\n\n#     transformer = QuantileTransformer(n_quantiles=100, random_state=0, output_distribution=\"normal\")\n    vec_len = len(train[col].values)\n    vec_len_test = len(test[col].values)\n    raw_vec = train[col].values.reshape(vec_len, 1)\n#     transformer.fit(raw_vec)\n    if IS_TRAIN:\n        transformer = QuantileTransformer(n_quantiles=100, random_state=0, output_distribution=\"normal\")\n        transformer.fit(raw_vec)\n        pd.to_pickle(transformer, f\"{MODEL_DIR}\/{NB}_{col}_quantile_scored.pkl\")\n    else:\n        transformer = pd.read_pickle(f\"{MODEL_DIR}\/{NB}_{col}_quantile_scored.pkl\")\n\n    train[col] = transformer.transform(raw_vec).reshape(1, vec_len)[0]\n    test[col] = transformer.transform(test[col].values.reshape(vec_len_test, 1)).reshape(1, vec_len_test)[0]","12a14ed5":"target_cols = target.drop('sig_id', axis=1).columns.values.tolist()\n","467e550d":"scored = (train[['sig_id','drug_id']]).merge(train[train_targets_scored.columns],on='sig_id')\nscored","3c165297":"targets = scored.columns[2:]\nFOLDS = 5\nvc = scored.drug_id.value_counts()\nvc1 = vc.loc[(vc==6)|(vc==12)|(vc==18)].index.sort_values()\nvc2 = vc.loc[(vc!=6)&(vc!=12)&(vc!=18)].index.sort_values()\nfolds = train.copy()\n# STRATIFY DRUGS 18X OR LESS\ndct1 = {}; dct2 = {}\nskf = MultilabelStratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=34)\ntmp = scored.groupby('drug_id')[targets].mean().loc[vc1]\nfor fold,(idxT,idxV) in enumerate( skf.split(tmp,tmp[targets])):\n    dd = {k:fold for k in tmp.index[idxV].values}\n    dct1.update(dd)\n\n# STRATIFY DRUGS MORE THAN 18X\nskf = MultilabelStratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=34)\ntmp = scored.loc[scored.drug_id.isin(vc2)].reset_index(drop=True)\nfor fold,(idxT,idxV) in enumerate( skf.split(tmp,tmp[targets])):\n    dd = {k:fold for k in tmp.sig_id[idxV].values}\n    dct2.update(dd)\n                \nfolds['kfold'] = folds.drug_id.map(dct1)\nfolds.loc[folds.kfold.isna(),'kfold'] =\\\n    folds.loc[folds.kfold.isna(),'sig_id'].map(dct2)\nfolds.kfold = folds.kfold.astype('int8')","06e33fb3":"feature_cols = [c for c in folds.columns if c not in target_cols]\nfeature_cols = [c for c in feature_cols if c not in ['kfold','sig_id','drug_id']]\nlen(feature_cols)","bb9f9364":"EPOCHS = 25\nnum_features=len(feature_cols)\nnum_targets=len(target_cols)\nhidden_size=1024","8da08428":"folds\n","4a7a319e":"EPOCHS = 12\nnum_features=len(feature_cols)\nnum_targets=len(target_cols)\nhidden_size=1024","76d0730b":"def run_training(fold, seed):\n    \n    seed_everything(seed)\n    \n    train = (folds)\n    test_ = (test)\n    \n    trn_idx = train[train['kfold'] != fold].index\n    val_idx = train[train['kfold'] == fold].index\n    \n    train_df = train[train['kfold'] != fold].reset_index(drop=True)\n    valid_df = train[train['kfold'] == fold].reset_index(drop=True)\n    \n    x_train, y_train  = train_df[feature_cols].values, train_df[target_cols].values\n    x_valid, y_valid =  valid_df[feature_cols].values, valid_df[target_cols].values\n    \n    train_dataset = MoADataset(x_train, y_train)\n    valid_dataset = MoADataset(x_valid, y_valid)\n    trainloader = torch.utils.data.DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n    validloader = torch.utils.data.DataLoader(valid_dataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n    model = Model(\n        num_features=num_features,\n        num_targets=num_targets,\n        hidden_size=hidden_size,\n    )\n    \n    model.to(DEVICE)\n    \n    optimizer = torch.optim.Adam(model.parameters(), lr=5e-3, weight_decay=WEIGHT_DECAY)\n    scheduler = optim.lr_scheduler.OneCycleLR(optimizer=optimizer, pct_start=0.2, div_factor=1e3, \n                                              max_lr=1e-2, epochs=EPOCHS, steps_per_epoch=len(trainloader))\n    \n    loss_fn = nn.BCEWithLogitsLoss()\n    \n    loss_tr = SmoothBCEwLogits(smoothing =0.001)\n    \n    early_stopping_steps = EARLY_STOPPING_STEPS\n    early_step = 0\n    \n    oof = np.zeros((len(train), target.iloc[:, 1:].shape[1]))\n    best_loss = np.inf\n    \n    \n    for epoch in range(EPOCHS):\n        \n        train_loss = train_fn(model, optimizer,scheduler, loss_tr, trainloader, DEVICE)\n        print(f\"SEED: {seed}, FOLD: {fold}, EPOCH: {epoch}, train_loss: {train_loss}\")\n        valid_loss, valid_preds = valid_fn(model, loss_fn, validloader, DEVICE)\n        print(f\"SEED: {seed} ,FOLD: {fold}, EPOCH: {epoch}, valid_loss: {valid_loss}\")\n        \n        if valid_loss < best_loss:\n            \n            best_loss = valid_loss\n            oof[val_idx] = valid_preds\n            torch.save(model.state_dict(), f\"model\/{NB}-scored2-SEED{seed}-FOLD{fold}_.pth\")\n        \n        elif(EARLY_STOP == True):\n            \n            early_step += 1\n            if (early_step >= early_stopping_steps):\n                break\n            \n    \n    #--------------------- PREDICTION---------------------\n    x_test = test_[feature_cols].values\n    testdataset = TestDataset(x_test)\n    testloader = torch.utils.data.DataLoader(testdataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n    model = Model(\n        num_features=num_features,\n        num_targets=num_targets,\n        hidden_size=hidden_size,\n\n    )\n    \n    model.load_state_dict(torch.load(f\"model\/{NB}-scored2-SEED{seed}-FOLD{fold}_.pth\"))\n    model.to(DEVICE)\n    \n #   if not IS_TRAIN:\n   # valid_loss, valid_preds = valid_fn(model, loss_fn, validloader, DEVICE)\n   # oof[val_idx] = valid_preds     \n    \n    predictions = np.zeros((len(test_), target.iloc[:, 1:].shape[1]))\n    predictions = inference_fn(model, testloader, DEVICE)\n    \n    return oof, predictions","9aa3e083":"# Averaging on multiple SEEDS\n\nSEED = [940, 1513, 1269,1392,1119,1303]  #<-- Update\noof = np.zeros((len(train), len(target_cols)))\npredictions = np.zeros((len(test), len(target_cols)))\n\nfor seed in SEED:\n    \n    oof_, predictions_ = run_k_fold(NFOLDS, seed)\n    oof += oof_ \/ len(SEED)\n    predictions += predictions_ \/ len(SEED)\n\ntrain[target_cols] = oof\ntest[target_cols] = predictions\n","dbd2012c":"valid_results = train_targets_scored.drop(columns=target_cols).merge(train[['sig_id']+target_cols], on='sig_id', how='left').fillna(0)\n\n\ny_true = train_targets_scored[target_cols].values\ny_pred = valid_results[target_cols].values\n\nscore = 0\nfor i in range(len(target_cols)):\n    score_ = log_loss(y_true[:, i], y_pred[:, i])\n    score += score_ \/ target.shape[1]\n    \nprint(\"CV log_loss: \", score)\n    ","e446840a":"sub = sample_submission.drop(columns=target_cols).merge(test[['sig_id']+target_cols], on='sig_id', how='left').fillna(0)\nsub.to_csv('submission.csv', index=False)","92ca1b74":"sub","2aaafbbf":"test[target_cols]","1f14f3eb":"## Updates -\n\n* Implementing Feature Engineering \n* Implementing Label Smoothing","fdf140dc":"# Dataset Classes","e921a7d1":"# This is an Updated version of my previous public kernel <https:\/\/www.kaggle.com\/kushal1506\/moa-pytorch-0-01859-rankgauss-pca-nn>"}}