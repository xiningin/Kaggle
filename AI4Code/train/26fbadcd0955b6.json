{"cell_type":{"58578dad":"code","c8c35a02":"code","b0584dce":"code","57b2e72c":"code","6d192021":"code","461b50ea":"code","430ccf55":"code","32f4d617":"code","627804dd":"code","ce7613d6":"code","16cae21a":"code","7a2672d6":"code","c5948522":"code","237e59a8":"code","206b66c0":"code","56ca5faf":"code","b5babf2a":"code","2c7701e0":"code","d21f03e2":"code","f5b59ad4":"code","338fd2f5":"code","616cd198":"code","6d19c84b":"code","06ada828":"code","ba3f76a1":"code","766a19be":"code","c6567254":"code","2b36898e":"code","baae46cc":"code","c7b90f0a":"code","06898a9f":"code","c4c803e4":"code","d2de4b2d":"code","4d0d0207":"code","dfa852bf":"code","c6b083fb":"code","10f428bc":"code","fca48fbc":"code","a1f780fb":"code","565cec10":"code","22bddfa2":"code","a55c3c18":"code","c65f38a2":"code","000a7314":"code","8b56e83a":"code","b48c05da":"code","69741b8f":"code","377a6142":"code","3ecaf897":"code","2a70f79f":"code","9e441090":"code","119ae4e3":"code","7a674c36":"code","c92567af":"code","f865859c":"code","66cb90a8":"code","fb31e762":"code","fd119e46":"code","fc217ed0":"code","c9f2c10f":"code","ac76c42a":"code","35de445e":"markdown","f93359af":"markdown","3bae4f31":"markdown","cfe18c80":"markdown","2c40a3dd":"markdown","ddbe567d":"markdown","b9a05872":"markdown","bbe15319":"markdown","ff64b62f":"markdown","40567bfc":"markdown","c89590aa":"markdown","dc966e75":"markdown","53342365":"markdown","1a10f625":"markdown","c5bb0b7a":"markdown","f5c0ee1d":"markdown","4d9657ee":"markdown","0bcd5204":"markdown","0bedc671":"markdown","617c4fb3":"markdown","a9f6b14b":"markdown","50cddde2":"markdown","e7b07908":"markdown","358d235d":"markdown","20eab728":"markdown","55e8100c":"markdown","5cc262ab":"markdown","a432c5b5":"markdown","4099311b":"markdown","95b59aa7":"markdown","72fe2368":"markdown","b370e8cd":"markdown","3675339b":"markdown","6abbecd8":"markdown","ce7ee06c":"markdown","ba77eb5c":"markdown","c682d23f":"markdown","38c85ba7":"markdown","a643d435":"markdown","2ec8a46d":"markdown","a7237eee":"markdown","084d3cf1":"markdown","3e0a66a1":"markdown","a71e3dad":"markdown","7bb619a4":"markdown","73d66faf":"markdown","d80b3b46":"markdown","b62f1121":"markdown","96a78f7d":"markdown"},"source":{"58578dad":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c8c35a02":"df = pd.read_csv('\/kaggle\/input\/summer-products-and-sales-in-ecommerce-wish\/summer-products-with-rating-and-performance_2020-08.csv')#\ndf","b0584dce":"df.columns","57b2e72c":"df['uses_ad_boosts'] = df['uses_ad_boosts']\ndf['badge_local_product'] = df['badge_local_product']\ndf['badge_product_quality'] = df['badge_product_quality']\ndf['badge_fast_shipping'] = df['badge_fast_shipping']\ndf['shipping_is_express'] = df['shipping_is_express']\ndf['has_urgency_banner'] = df['has_urgency_banner']\ndf['merchant_has_profile_picture'] = df['merchant_has_profile_picture']\n\ndf.info()","6d192021":"df.isnull().sum()","461b50ea":"round(df.describe())","430ccf55":"def histograms_and_countplots(column, data, columns_to_exclude):\n    if column not in columns_to_exclude:\n        if data[column].dtype not in ['int64', 'float64']:\n            f, axes = plt.subplots(1,1,figsize=(15,5))\n            sns.countplot(x=column, data = data)\n            plt.xticks(rotation=90)\n            plt.suptitle(column,fontsize=20)\n            plt.show()\n        else:\n            g = sns.FacetGrid(data, margin_titles=True, aspect=4, height=3)\n            g.map(plt.hist,column,bins=100)\n            plt.show()\n        plt.show()","32f4d617":"columns_to_exclude = ['title', 'title_orig', 'currency_buyer', 'tags', 'merchant_title', 'merchant_name', \n                'merchant_info_subtitle', 'merchant_id', 'merchant_profile_picture', 'product_url', \n                'product_picture', 'product_id', 'theme', 'crawl_month' ]\n\n\nfor column in df.columns:\n    histograms_and_countplots(column, df, columns_to_exclude)","627804dd":"print('Median of units sold is',df['units_sold'].median())\nprint('Mean of units sold is',df['units_sold'].mean())\ndf['units_sold'].value_counts()","ce7613d6":"def below_ten(units_sold):\n    if units_sold < 10:\n        return 10\n    else:\n        return units_sold","16cae21a":"df['units_sold'] = df['units_sold'].apply(below_ten)","7a2672d6":"df['units_sold'].value_counts()","c5948522":"df[df['units_sold'] == 100000]","237e59a8":"def is_successful(units_sold):\n    if units_sold > 1000:\n        return 1\n    else:\n        return 0","206b66c0":"df['is_successful'] = df['units_sold'].apply(is_successful)\n#df['is_successful'] = df['units_sold'].apply(is_successful).astype('category')\nprint('Percent of successful products: ', df['is_successful'].value_counts()[1] \/ len(df['is_successful'])*100)\nsns.countplot(data=df, x='is_successful')\nplt.show()","56ca5faf":"print('Overall stats:')\nprint(df['price'].mean())\nprint(df['retail_price'].mean())\nprint('----------------------')\nprint('Stats for successful products:')\nprint(df[df['is_successful'] == 1]['price'].mean())\nprint(df[df['is_successful'] == 1]['retail_price'].mean())\nprint('----------------------')\nprint('Stats for unsuccessful products:')\nprint(df[df['is_successful'] == 0]['price'].mean())\nprint(df[df['is_successful'] == 0]['retail_price'].mean())","b5babf2a":"df['diff_in_price'] = round(df['price']\/df['retail_price'],2)\ndf['diff_in_price']","2c7701e0":"sns.violinplot(data=df, y='diff_in_price', x='is_successful')","d21f03e2":"print('Percent of products using ad boosts: ', df['uses_ad_boosts'].value_counts()[1] \/ len(df['uses_ad_boosts'])*100)","f5b59ad4":"sns.countplot(data=df, x='uses_ad_boosts', hue='is_successful')","338fd2f5":"pd.crosstab(df['uses_ad_boosts'], df['is_successful'])","616cd198":"pd.crosstab(df['uses_ad_boosts'], df['units_sold'])","6d19c84b":"df[df['rating_five_count'].isnull()==True][['rating', 'rating_count',\n       'rating_five_count', 'rating_four_count', 'rating_three_count',\n       'rating_two_count', 'rating_one_count']]","06ada828":"def ratings_to_zero(rating_and_count):\n    rating = rating_and_count[0]\n    count = rating_and_count[1]\n    \n    if count == 0:\n        rating = 0\n    else:\n        rating = rating\n        \n    return rating","ba3f76a1":"df['rating'] = df[['rating', 'rating_count']].apply(ratings_to_zero, axis=1)\ndf['rating_five_count'].fillna(0, inplace=True)\ndf['rating_four_count'].fillna(0, inplace=True)\ndf['rating_three_count'].fillna(0, inplace=True)\ndf['rating_two_count'].fillna(0, inplace=True)\ndf['rating_one_count'].fillna(0, inplace=True)\n\n\ndf[df['rating_five_count'].isnull()==True][['rating', 'rating_count',\n       'rating_five_count', 'rating_four_count', 'rating_three_count',\n       'rating_two_count', 'rating_one_count']]","766a19be":"df['rating']","c6567254":"ratings_column = ['rating', 'rating_count',\n       'rating_five_count', 'rating_four_count', 'rating_three_count',\n       'rating_two_count', 'rating_one_count']\n\nfor column in ratings_column:\n    g = sns.FacetGrid(df, row='is_successful', margin_titles=True, aspect=4, height=3)\n    g.map(plt.hist, column, bins=100)\n    plt.title(column)\n    plt.show()","2b36898e":"df.groupby('is_successful').mean()[ratings_column]","baae46cc":"df.groupby('units_sold').mean()[ratings_column]","c7b90f0a":"badges_column = ['badges_count',\n       'badge_local_product', 'badge_product_quality', 'badge_fast_shipping']","06898a9f":"df[df['badges_count'] != 0][badges_column]","c4c803e4":"for column in badges_column:\n    sns.countplot(data=df, x=column, hue='is_successful')\n    plt.title(column)\n    plt.show()","d2de4b2d":"from wordcloud import WordCloud, STOPWORDS\n\ndf['tags']","4d0d0207":"def remove_stopwords(text):\n    from nltk.tokenize import word_tokenize\n\n    text_tokens = word_tokenize(text)\n\n    tokens_without_sw = [word for word in text_tokens if not word in STOPWORDS]\n    \n    filtered_sentence = (\" \").join(tokens_without_sw)\n\n    return filtered_sentence","dfa852bf":"df['tags'] = df['tags'].apply(remove_stopwords)","c6b083fb":"df['tags']","10f428bc":"from collections import Counter\nresults = Counter()\ndf['tags'].str.lower().str.split().apply(results.update)\ncounter_df = pd.DataFrame.from_dict(results, orient='index')\ncounter_df.sort_values(by=0, axis=0, ascending=False).head(15)","fca48fbc":"import matplotlib.pyplot as plt\nword_string=\" \".join(df['tags'].str.lower())\nwordcloud = WordCloud(stopwords=STOPWORDS).generate(word_string)\n\nplt.subplots(figsize=(15,15))\nplt.clf()\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","a1f780fb":"word_string=\" \".join(df[df['is_successful']==1]['tags'].str.lower())\nwordcloud = WordCloud(stopwords=STOPWORDS).generate(word_string)\n\nplt.subplots(figsize=(15,15))\nplt.clf()\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","565cec10":"word_string=\" \".join(df[df['is_successful']==0]['tags'].str.lower())\nwordcloud = WordCloud(stopwords=STOPWORDS).generate(word_string)\n\nplt.subplots(figsize=(15,15))\nplt.clf()\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","22bddfa2":"X = df['tags']\ny = df['is_successful']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0, test_size=0.33)\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import LinearSVC\nfrom sklearn import metrics\n\ntext_clf = Pipeline([('tfidf', TfidfVectorizer(stop_words=STOPWORDS)),\n                         ('clf', LinearSVC(random_state=0)),\n    ])\n\ntext_clf.fit(X_train, y_train)  \n\npredictions = text_clf.predict(X_test)\n\nprint('-----------------------')\nprint(metrics.confusion_matrix(y_test,predictions))\nprint('-----------------------')\nprint(metrics.classification_report(y_test,predictions))","a55c3c18":"df['product_color'].fillna('missing', inplace=True)\nword_string=\" \".join(df['product_color'].str.lower())\nwordcloud = WordCloud(stopwords=STOPWORDS).generate(word_string)\n\nplt.subplots(figsize=(15,15))\nplt.clf()\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","c65f38a2":"df['product_variation_size_id'].fillna('missing', inplace=True)\nword_string=\" \".join(df['product_variation_size_id'].str.lower())\nwordcloud = WordCloud(stopwords=STOPWORDS).generate(word_string)\n\nplt.subplots(figsize=(15,15))\nplt.clf()\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","000a7314":"shipping_column = ['shipping_option_name',\n       'shipping_option_price', 'shipping_is_express', 'countries_shipped_to']\n\nfor column in shipping_column:\n    sns.countplot(data=df, x=column, hue='is_successful')\n    plt.title(column)\n    plt.show()","8b56e83a":"sns.violinplot(data=df, y='countries_shipped_to', x='is_successful')","b48c05da":"df['inventory_total'].value_counts()","69741b8f":"df['product_variation_inventory'].value_counts()","377a6142":"sns.violinplot(data=df, y='product_variation_inventory', x='is_successful')","3ecaf897":"sns.violinplot(data=df, y='product_variation_inventory', x='units_sold')","2a70f79f":"df['has_urgency_banner'].fillna(0, inplace=True)\ndf['urgency_text'].fillna(0, inplace=True)","9e441090":"urgency_column = ['has_urgency_banner', 'urgency_text', 'origin_country']\n\nfor column in urgency_column:\n    sns.countplot(data=df, x=column, hue='is_successful')\n    plt.title(column)\n    plt.show()","119ae4e3":"merchant_columns = ['merchant_rating_count', 'merchant_rating',\n       'merchant_id', 'merchant_has_profile_picture']\n\n\nsns.countplot(data=df, x='merchant_has_profile_picture', hue='is_successful')","7a674c36":"sns.violinplot(data=df, y='merchant_rating', x='is_successful')","c92567af":"sns.violinplot(data=df, y='merchant_rating', x='units_sold')","f865859c":"sns.countplot(x=df['merchant_id'].value_counts())","66cb90a8":"df.drop(labels=['title', 'title_orig', 'currency_buyer', 'merchant_title', 'merchant_name', \n                'merchant_info_subtitle', 'merchant_id', 'merchant_profile_picture', 'product_url', \n                'product_picture', 'product_id', 'theme', 'crawl_month', 'rating', 'rating_count',\n       'rating_five_count', 'rating_four_count', 'rating_three_count',\n       'rating_two_count', 'rating_one_count', 'units_sold','badges_count',\n       'badge_local_product','badge_fast_shipping', 'tags', 'product_color',\n       'product_variation_size_id', 'shipping_option_name',\n       'shipping_option_price', 'shipping_is_express', 'countries_shipped_to','has_urgency_banner', 'urgency_text',\n       'origin_country'], axis=1, inplace=True)","fb31e762":"df.columns","fd119e46":"y = df['is_successful']\nX = df[['price', 'retail_price', 'uses_ad_boosts', 'badge_product_quality',\n       'product_variation_inventory',\n       'inventory_total', 'merchant_rating_count', 'merchant_rating',\n       'merchant_has_profile_picture','diff_in_price']]","fc217ed0":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, shuffle=True)\n\n\nmodels = [LogisticRegression(), DecisionTreeClassifier(), XGBClassifier(),  \n          GradientBoostingClassifier(), KNeighborsClassifier(), RandomForestClassifier()]\n\nfor model in models:\n    \n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    \n    print(model)\n    print('---------------------------')\n    print(metrics.classification_report(y_test,y_pred))\n    print('')\n    print('')","c9f2c10f":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\nfor k in range(1,11):\n    \n    print(k)\n    print('---------------')\n    y = df['is_successful']\n    X = df[['price', 'retail_price', 'uses_ad_boosts', 'badge_product_quality',\n       'product_variation_inventory',\n       'inventory_total', 'merchant_rating_count', 'merchant_rating',\n       'merchant_has_profile_picture','diff_in_price']]\n\n\n    X = SelectKBest(chi2, k=k).fit_transform(X, y)\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, shuffle=True)\n\n\n    models = [LogisticRegression(), DecisionTreeClassifier(), XGBClassifier(),  \n          GradientBoostingClassifier(), KNeighborsClassifier(), RandomForestClassifier()]\n\n    for model in models:\n    \n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n    \n        print(model)\n        print('---------------------------')\n        print(metrics.accuracy_score(y_test,y_pred))\n        print('')\n        print('')\n","ac76c42a":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\ny = df['is_successful']\nX = df[['price', 'retail_price', 'uses_ad_boosts', 'badge_product_quality',\n       'product_variation_inventory',\n       'inventory_total', 'merchant_rating_count', 'merchant_rating',\n       'merchant_has_profile_picture','diff_in_price']]\n\n\nX = SelectKBest(chi2, k=8).fit_transform(X, y)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, shuffle=True)\n\n\nmodels = RandomForestClassifier()\n\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\nprint(metrics.accuracy_score(y_test,y_pred))\n","35de445e":"I am marking this as final.\n\nFeel free to leave any comments, reviews, improvements or if you just want to bash me up and it will help me improve my skills even more.\n\nIf you have reached this far, thanks a lot for reading!\n\nThanks to all those who commented and upvoted for keeping me motivated to continue.\n\nAnd a lot of special thanks to **Jeffrey Mvutu Mabilama** for availing this data set! No data set, no data analysis!","f93359af":"Successful products have more ratings. This is expected as units sold is higher so rating is also higher. However, if I am building a model, I don't think it would be a good idea to keep this column as the huge number of ratings must be the result of higher units sold. ","3bae4f31":"# Some conclusions\n\n- The site mainly sells female clothing.\n- Higher units sold means higher rating count. \n- The use of ad boosts does not seen to have any effect on the units sold and the site may lose revenue from this ads.\n- More detailed units sold and inventory levels would have been more helpful for analysis.\n- Product quality badges seems to increase the success of the products. Perhaps reviewing more products will increase motivation for merchants to improve their product? Different levels of badges can be applied?\n- The tags can be improved so that products can be categorised more specfically. This can be done by reducing the number of tags per product, so the mechants are forced to choose their tags more wisely.\n- Majority of the products are black and white. This might have been defined wrongly by the merchants. If not the case, the merchants can be encoured to include more variation to these.","cfe18c80":"It seems like ad boosts do not have any impact on units sold.. perhaps something I am missing here? I mean, there must be some benefit of the addition cost(?) for the ad boosts. \n\nThe website needs to consider the effectiveness of this, otherwise the merchants may simply not use it and the website might lose this additional income.","2c40a3dd":"# Successful merchants","ddbe567d":"# Higher ratings means higher units sold?","b9a05872":"I can't see any effect of shipping info columns on the products success.","bbe15319":"The null values are all with 0 counts, but also have a rating of 5, which is strange. I will convert all these values to zero.","ff64b62f":"A quick look at the products with 100000 sales.","40567bfc":"Better to visualise the 'countries_shipped_to' column with a violin plot.","c89590aa":"Which columns are present?","dc966e75":"# Histograms and countplots!","53342365":"First a look at the missing values.","1a10f625":"# Inventory levels","c5bb0b7a":"# Shiping","f5c0ee1d":"Nothing interesting here. I will just drop these columns if need be..","4d9657ee":"Just for fun, predicting success based on tags only:","0bcd5204":"Apart for EDA purposes, my limited knowledge in converting textual features to more useful numeric features is letting me down here. One of the learning points I have to keep in mind.. \n\nA few more word clouds for colour and size variation columns:","0bedc671":"From the first plot made, it seemed that there is only one value here","617c4fb3":"Most of the tags seems to be related to female's clothing. How about be compare the tags of successful and unsuccessful products.","a9f6b14b":"Now, I am confused..","50cddde2":"From the above plot, I can conclude that the inventory levels are kept at par for most of the products. However, it still seems that for some of the productsinvetory levels are kept on a very lower side. Perhaps this items are not being sold any more? The crawl data is of August only, however I am expecting the sales to be overall sales. \n\nFrom the very high count of 50 units, I am guessing this is just a maximum display and for some products there might be higher tha 50 units available. Maybe this is also the reason why for 'inventory_total', most values are 50. This might actually be the correct feature to use, but the website only displays up to a maximum of 50 units available.","e7b07908":"From the analysis above, I don't think this data is suitable for building a model as there is very minimal relation I noticed between data features and success. Also most features are impacted by success and not the other way round. however, I want to try out the SelectKBest feature selection, so here goes nothing...","358d235d":"# Badges ","20eab728":"There is a higher chance of success if merchant has profile picture.","55e8100c":"A simple function to create a new label 'is_successful':","5cc262ab":"# Sales of summer clothes in E-commerce Wish\n\n\nPossible questions to answer from task.\n\n1. How about trying to validate the established idea of human sensitiveness to price drops ?\n2. You may look for top categories of products so that you know what sells best\n3. Do bad products sell ? How about the relationship between the quality of a product (ratings) and its success ? Does the price factor into this ?\n4. Do seller's fame factor into top products ?\n5. Do the number of tags (making a product more discoverable) factor into the success of a product ?\n\n","a432c5b5":"Perhaps, 'product_variation_inventory' is the right inventory to use?","4099311b":"Nope.. Nothing speacial here..\n\nOne more trick I can use.. comparing the % change of price and retail price to the success of the products.","95b59aa7":"Without even seeing the data (apart from what is diplayed above), the column names raises some more possible analysis that can be performed.\n\n- How different is the 'price' from 'retail price' and what is the effect of the difference. Expecting higher number of units sold if price is less than retail price and vice versa.\n- Does having ad boosts increase success?\n- Any correlation between units sold and ratings?\n- What is badges? This looks like 'awards' of some sort? Do success with increase in number of badges?\n- What are effect of different type of badges?\n- Effect of tags? Higher number of tags results in success?\n- Maybe some brief analysis on product variations.. Do increased variations leads to inreased success?\n- Shipping options analysis\n- Analysis of inventory total and units sold. \n- Merchant detail analysis.. Does merchant rating affect success?\n- What about the details of the merchant? Does not having a profile picture reduce success? Perhaps detailed info leads to higher success?\n- Do all product contains pictures?\n- I am expecting only one theme..'summer' but let's see.\n\nThis definately looks like an interesting dataset with a lot of possibilties. \n\nLet's see if we have any missing values","72fe2368":"From the above plots, the higher units sold tend to have higher ratings. ","b370e8cd":"I am not really sure what to get out of these fetures however from the histograms it looks like the retail price are much lower than the price at which the products are sold.\n\nMaybe calculating the means might shade some light?","3675339b":"I was expecting the units sold to be continuous value, but these are discrete values. Maybe they are ranges? ","6abbecd8":"There is an almost equal use of ad boosts by the products.","ce7ee06c":"Almost 50% of those who are successful have badges, especially the product quality badge. I am somwhat in a debate about whether I should use this as a feature or not, because does badges result in success or success result in badges? For now, I will assume badges results in sucess, since there are many successful products which do not have badges as well.","ba77eb5c":"# Price and retail price and the relation of their difference..","c682d23f":"The median is 1000 units sold. I will consider for those products with units sold over 1000 units as successful products.","38c85ba7":"# The distribution of prices and defining a successful product..","a643d435":"# Final words..","2ec8a46d":" - The rating count has zero null values, however individual rating count has 45 null values. Does this mean that rating count of 45 products are zero?\n - Product color and size variation has 41 and 14 null values respectively. Perhaps this products have no variations?\n - has_urgency banner and urgency_text have similar null values. This makes sense, however, I will convert this to zeros and ones.\n - Origin countries have 17 null values. I might replace this with the mode if necessary.\n - Surprisingly there are 4 missing merchant names but only one missing info subtitle.\n - There are 1347 missing merchant profile pictures. I am expecting this to match with 'zeros' in 'merchant_has_profile_picture' ","a7237eee":"# First look at the dataset","084d3cf1":"# Using tags to predict success","3e0a66a1":"As expected, successful products tend to be high in stock, however it would be more useful to compare against the units sold.","a71e3dad":"# The model","7bb619a4":"I believe 33% is an appropriate % to be defined as successful sales. ","73d66faf":"# Urgency and country of origins","d80b3b46":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/31\/Wish_logo.svg\/250px-Wish_logo.svg.png)","b62f1121":"Nothing interesting here..","96a78f7d":"# The use of ad boosts to boost the success.."}}