{"cell_type":{"81f4879a":"code","77cf2aa7":"code","d95472ab":"code","9d0a9bfe":"code","8d406164":"code","7ecf593e":"code","97ef37f0":"code","c8b08635":"code","8edd14c7":"code","378a35bd":"code","aed7dc31":"code","73809ecb":"code","b49a4ae4":"code","e277467e":"code","984fbf91":"code","85bfd8df":"code","b0a70000":"markdown","f6a5ddac":"markdown","4165678b":"markdown"},"source":{"81f4879a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","77cf2aa7":"import numpy as np\nimport pandas as pd\nimport csv\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\ntrain=pd.read_csv('..\/input\/train.csv')\ntest=pd.read_csv('..\/input\/test.csv')\ntrain.head()","d95472ab":"def male_female_child( passenger):\n    # Take the Age and Sex\n    age,sex = passenger # no need any more\n    # Compare the age, otherwise leave the sex\n    if passenger['Age']<16:\n        return 'child'\n    else:\n        return passenger['Sex']\ntrain[['Age','Sex']].apply(male_female_child, axis=1).head()\ntrain['Passenger']=train[['Age','Sex']].apply(male_female_child, axis=1)\nprint(train.head())","9d0a9bfe":"alpha_color=0.5\nbins=[0,10,20,30,40,50,60,70,80]\ntrain['AgeBin']=pd.cut(train['Age'],bins)\n\n#bar_char function\ndef bar_char(feature):\n    survived=train[train['Survived']==1][feature].value_counts(normalize=True).sort_index()\n    dead=train[train['Survived']==0][feature].value_counts(normalize=True).sort_index()\n    data=pd.DataFrame([survived, dead])\n    data.index=['Survived', 'Dead']\n    data.plot(kind='bar',alpha=alpha_color)\n    \n#facet_grid function\ndef facet_grid(feature,a, b):\n    facet=sns.FacetGrid(train, hue='Survived', aspect=4)\n    facet.map(sns.kdeplot, feature, shade=True)\n    facet.set(xlim=(0, train[feature].max()))\n    facet.add_legend()\n    plt.xlim(a,b)\n    plt.show()\n    \n#fillna one feature based on mean of other feature\ndef fill_na(groupbyfeature, meanfeature):\n    train[meanfeature]=train.fillna(train.groupby(groupbyfeature)[meanfeature].transform('mean'), inplace=True)\n    test[meanfeature]=test.fillna(train.groupby(groupbyfeature)[meanfeature].transform('mean'), inplace=True)\n    \n# drop column --> Works along each row --> axis =1\n#work along each row: axis=1, work along each column axis=0\ndef drop_feature(dataframe,feature):\n    dataframe=dataframe.drop(feature,axis=1)\n    return dataframe","8d406164":"#MAIN STEPS FOR PRE-PROCESSING DATA\n# Firstly, Handle missing value, and fill in them\n#Secondly, Normalize data: categories,...(formatted as number)\ntrain_test_data=[train, test]\nfor dataset in train_test_data:\n    dataset['Title']=dataset['Name'].str.extract('([A-Za-z]+)\\.', expand=False)\n    \n#change title into group\ntitle_mapping={\"Mr\":0, \"Miss\":1, \"Mrs\":2,\n               \"Master\":3, \"Dr\":3, \"Rev\":3,\n               \"Col\":3, \"Major\":3, \"Mile\":3,\n               \"Countess\":3, \"Ms\":3, \"Lady\":3,\n               \"Jonkheer\":3, \"Don\":3, \"Dona\":3, \"Mme\":3, \"Capt\":3, \"Sir\":3}\nfor dataset in train_test_data:\n    dataset['Title']=dataset['Title'].map(title_mapping)\n    \n#Sex feature: change male and female into value 0 and 1\nsex_mapping={'male':0, 'female':1}\nfor dataset in train_test_data:\n    dataset['Sex']=dataset['Sex'].map(sex_mapping)\n    \n#Age: some age is missing --> use Title's meadian age for missing Age\n# train['Age']=train.fillna(train.groupby('Title')['Age'].transform(\"median\"), inplace=True)\n# test['Age']=train.fillna(test.groupby('Title')['Age'].transform(\"median\"), inplace=True)\nfor dataset in train_test_data:\n    dataset.loc[dataset['Age']<=16, 'Age']=0,\n    dataset.loc[(dataset['Age']>16) & (dataset['Age']<=26), 'Age']=1,\n    dataset.loc[(dataset['Age']>26) & (dataset['Age']<=36), 'Age']=2,\n    dataset.loc[(dataset['Age']>36) & (dataset['Age']<=62), 'Age']=3,\n    dataset.loc[dataset['Age']>62, 'Age']=4\n    \n# Embarked feature\nPclass1=train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2=train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3=train[train['Pclass']==3]['Embarked'].value_counts()\ndf=pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index=('1st class','2nd class', '3rd class')\ndf.plot(kind='bar', stacked=True)\n#S is the most --> Filling S for missing values\nfor dataset in train_test_data:\n    dataset['Embarked']=dataset['Embarked'].fillna('S')\n    \nembarked_mapping={'S':0, 'C':1, 'Q':2}\nfor dataset in train_test_data:\n    dataset['Embarked']=dataset['Embarked'].map(embarked_mapping)\n    \n#Fare feature: Filling missing fares with mean of fare, grouped by Pclass\n# train['Fare'].fillna(train.groupby('Pclass')['Fare'].transform('median'), inplace=True)\n# test['Fare'].fillna(test.groupby('Pclass')['Fare'].transform('median'), inplace=True)\nfor dataset in train_test_data:\n    dataset.loc[dataset['Fare']<=17, 'Fare']=0,\n    dataset.loc[(dataset['Fare']>17) & (dataset['Fare']<=30), 'Fare']=1,\n    dataset.loc[(dataset['Fare']>30) & (dataset['Fare']<=100), 'Fare']=2,\n    dataset.loc[dataset['Fare']>100, 'Fare']=3\n    \n#Cabin feature\n# fill_na('Pclass', 'Cabin')\ncabin_mapping={'A':0, 'B':0.4, 'C':0.8, 'D':1.2, 'E':1.6, 'F': 2, 'G': 2.4, 'T':2.8}\nfor dataset in train_test_data:\n    dataset['Cabin']=dataset['Cabin'].map(cabin_mapping)\n    \n#Family size\ntrain['FamilySize']=train['SibSp']+train['Parch']+1\ntest['FamilySize']=test['SibSp']+test['Parch']+1\nfamily_mapping={1:0, 2:0.4, 3:0.8, 4:1.2, 5:1.6, 6:2.0, 7:2.4, 8:2.8, 9:3.2, 10:3.6, 11:4}\nfor dataset in train_test_data:\n    dataset['FamilySize']=dataset['FamilySize'].map(family_mapping)","7ecf593e":"# train.drop('Name', axis=1, inplace=True)\n# test.drop('Name', axis=1, inplace=True)","97ef37f0":"train.head()","c8b08635":"drop_feature(train,['Parch', 'Ticket', 'PassengerId', 'Survived','SibSp','AgeBin','Name'])","8edd14c7":"train.groupby('Title')['Age'].transform('mean')","378a35bd":"#Age: some age is missing --> use Title's meadian age for missing Age\n# train['Age']=train.fillna(train.groupby('Title')['Age'].transform(\"median\"), inplace=True)\n# test['Age']=train.fillna(test.groupby('Title')['Age'].transform(\"median\"), inplace=True)\n# for dataset in train_test_data:\n#     dataset.loc[dataset['Age']<=16, 'Age']=0,\n#     dataset.loc[(dataset['Age']>16) & (dataset['Age']<=26), 'Age']=1,\n#     dataset.loc[(dataset['Age']>26) & (dataset['Age']<=36), 'Age']=2,\n#     dataset.loc[(dataset['Age']>36) & (dataset['Age']<=62), 'Age']=3,\n#     dataset.loc[dataset['Age']>62, 'Age']=4","aed7dc31":"facet=sns.FacetGrid(train, hue='Survived', aspect=4)\nfacet.map(sns.kdeplot,'Fare', shade=True)\nfacet.set(xlim=(0,train['Fare'].max()))\nfacet.add_legend()\nplt.show()","73809ecb":"df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n                   [3, 4, np.nan, 1],\n                   [np.nan, np.nan, np.nan, 5],\n                   [np.nan, 3, np.nan, 4]],\n                   columns=list('ABCD'))\ndf","b49a4ae4":"df.groupby('A')['B'].transform('median')","e277467e":"df.fillna(df.groupby('A')['B'].mean(), inplace=True) ","984fbf91":"df","85bfd8df":"df.groupby('A')['B'].mean()","b0a70000":"Feature Engineering is the process of using domain knowledge of data to create features ( featers vectors) that make machine learning algorithms work\nEach column is a feature,  \nChange text into value, such as Male, Female into 0 or 1","f6a5ddac":"Function is used for plotting. bar_char function is used for investigating each features of datasets","4165678b":"**List of all FUNCTIONS**"}}