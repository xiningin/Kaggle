{"cell_type":{"800dc78a":"code","d8edee28":"code","83e056e4":"code","eab7cbac":"code","e6f87cc4":"code","6665cddd":"code","be4da947":"code","c513f6c7":"code","544aed36":"code","cccc9180":"code","c52357be":"code","855d0ef3":"code","3b6b499e":"code","96193a41":"code","f5b14897":"code","f5b0ca78":"code","c4c99983":"code","c023240b":"code","a1947e10":"code","c7a8d563":"code","996a76db":"code","973f9dd8":"code","daa9c4e7":"code","da156094":"code","6a820b0c":"code","9361f3d3":"code","d17421dc":"code","5b6c94ab":"code","6689ea40":"code","a1afb1db":"code","88d8926f":"code","d156ac78":"code","45ac2f78":"code","265578cc":"code","7d10b50f":"code","33fff680":"code","7ce56c71":"code","3d04946d":"code","472a718e":"code","08c372c3":"code","db1d1a44":"code","45559f85":"code","5223305e":"code","81a2c66c":"code","e03afdad":"code","5e47e075":"code","fa8e4df8":"code","4ac397aa":"code","f518fe7f":"code","586578a2":"code","cf1c1037":"code","f7b4867b":"markdown","8223961b":"markdown","7166ac8f":"markdown","d2243fff":"markdown","6416f1df":"markdown","0a1d50db":"markdown","f6c05bbe":"markdown","5d45bc22":"markdown","b0d14967":"markdown","6d2c1b78":"markdown","896101cc":"markdown","412ae682":"markdown","40fb023a":"markdown","3a0bcdd3":"markdown","5cc3e1f1":"markdown","d60e19cc":"markdown","e9992cfb":"markdown","a7e16bd2":"markdown","c25f1638":"markdown","04d25920":"markdown","be42b3a3":"markdown","4d505d70":"markdown","d191305a":"markdown","dc2e41dd":"markdown","07fc7194":"markdown","583af218":"markdown","d664f7c4":"markdown","89ca5b26":"markdown","3d4f36da":"markdown","303c9abd":"markdown","11883bb5":"markdown","c6444f02":"markdown","4302bbc4":"markdown","cce3123b":"markdown","ecd85c66":"markdown","89d64f58":"markdown","5c594323":"markdown","94632c6a":"markdown","b701c7c0":"markdown","342e27fa":"markdown","3092f52e":"markdown","6858748a":"markdown","515edcdd":"markdown","53af00d8":"markdown","a351ad02":"markdown","511dab8b":"markdown","60a55b1e":"markdown","54e6a530":"markdown","e92e5a82":"markdown","04359118":"markdown","87258694":"markdown"},"source":{"800dc78a":"#Import needed modules\nimport re\n\n#Datamanipulation\nimport numpy as np\nimport pandas as pd\n\n#Data visualization\nimport matplotlib.pyplot as plt\n#import matplotlib.mlab as mlab\nimport seaborn as sns\nimport plotly as py\nimport plotly.graph_objs as go\n\n#display properties\npd.set_option(\"display.max_columns\", 100)\npd.set_option(\"display.max_rows\", 100)\n\nfrom math import pi\nimport os","d8edee28":"df = pd.read_csv('..\/input\/data.csv', sep = \",\")\ndf = df.set_index(\"Unnamed: 0\")","83e056e4":"print(df.info())\nprint(df.describe()) #To me this mostly showed that there are columns that SHOULD have numerical values that didn't\nprint(df.columns)","eab7cbac":"#Drop null-values I want to get rid of.\ndf.dropna(subset=[\"Height\"], inplace = True)\ndf.dropna(subset=[\"Position\"], inplace = True)","e6f87cc4":"#replaces spaces with \"_\" in column names.\ndf.columns = df.columns.str.replace(' ', '_')","6665cddd":"#Convert non numerical data to numerical.\ndf[\"Wage\"] = df[\"Wage\"].apply(lambda x: int(re.findall(\"\\d+\", x)[0] + \"000\"))\n#Were \"\\d\" searches for anything that Could be a decimal.\ndf[\"Value\"] = df[\"Value\"].apply(lambda x: \"M\" in x and int(float((re.findall(\"\\d+\\.*\\d*\", x)[0])))*1000000 or int(float((re.findall(\"\\d+\\.*\\d*\", x)[0])))*1000)\ndf[\"Release_Clause\"] = df[\"Release_Clause\"].fillna(value=\"\u20ac0\")\ndf[\"Release_Clause\"] = df[\"Release_Clause\"].apply(lambda x: \"M\" in x and int(float((re.findall(\"\\d+\\.*\\d*\", x)[0])))*1000000 or int(float((re.findall(\"\\d+\\.*\\d*\", x)[0])))*1000)\ndf[\"Release_Clause\"] = df[\"Release_Clause\"].replace(0,np.NaN)\n#Works the same way -> Were M specificly is replaced with 000000 and everything else, which is K, is replaced by 000 - Release_Clause could probably be handled in a more slick way - but this works.\n#Convertigh height and weight to cm and kgs since I'm swedish and don't measure things with my feet..!\ndf[\"Height\"] = df[\"Height\"].apply(lambda x: round(float(x[0])*30.48+float(x[2:])*2.54))\ndf[\"Weight\"] = df[\"Weight\"].apply(lambda x: round(float(0.45359237)*float(re.findall(\"\\d+\", x)[0])))","be4da947":"leagues = df.groupby([\"Club\"]).apply(lambda club: club[\"Nationality\"].value_counts().index[0])\nleagues[\"FC Porto\", \"SC Braga\", \"Portimonense SC\", \"Rio Ave FC\", \"Vit\u00f3ria\" ] = \"Portugal\" #Too many brazilians in the portuguese league.\n#Mean rating based on the 23 highest rated players in each team.\nMeanRating = df.groupby([\"Club\"]).apply(lambda club: round(club[\"Overall\"].nlargest(23).mean(),1))\ndf_clubs = pd.DataFrame({\"League\": leagues, \"Mean_Rating\": MeanRating})\ndf_clubs_top20 = df_clubs.sort_values(by=\"Mean_Rating\",ascending=False).groupby(\"League\").head(20).reset_index().set_index(\"Club\") \nclubs_top20 = df_clubs_top20.loc[:,\"League\"]\n#We also saw earlier that there were alot of players with no Club even though they had stats so we\"ll set them as \"Free Agent\"\ndf[\"Club\"].fillna(\"Free Agent\",inplace = True)\n#Move the clubs in df_clubs_top20 instead.\ndf[\"League\"] = df[\"Club\"].apply(lambda club: clubs_top20[club] if club in clubs_top20 \n                                  and club != \"Stoke City\" and club != \"Deportivo de La Coru\u00f1a\"\n                                  and club != \"Hamburger SV\" and club != \"1. FC K\u00f6ln\"\n                                  else \"Free Agents\" if club == \"Free Agent\"\n                                  else \"England\" if club == \"Cardiff City\"\n                                  else \"Spain\" if club == \"SD Huesca\"\n                                  else leagues[club] + \" lower div.\")\ndf[\"League\"] = df[\"League\"].apply(lambda nation: \"Major League Soccer (US & CAN)\" \n                                  if (nation == \"Canada\") or (nation == \"United States\") or (nation == \"United States lower div.\") \n                                  else \"Rest of the World\" if (nation == \"Finland\") or (nation == \"Croatia\") \n                                  or (nation == \"South Africa\") or (nation == \"Ukraine\") or (nation == \"Greece\")\n                                  or (nation == \"Czech Republic\") or (nation == \"Russia\")\n                                  else \"Primera Division (ARG)\" if (nation == \"Argentina\") or (nation == \"Argentina lower div.\")\n                                  else \"LaLiga (SPA)\" if (nation == \"Spain\") else \"Premier League (ENG)\" if (nation == \"England\")\n                                  else \"Bundesliga (GER)\" if (nation == \"Germany\") else \"Serie A (ITA)\" if (nation == \"Italy\")\n                                  else \"Ligue 1 (FRA)\" if (nation == \"France\") else \"Premier League (ENG)\" if (nation == \"England\")\n                                  else \"Brasileiro Serie A (BRA)\" if (nation == \"Brazil\")  else \"Denmark (DEN)\" if (nation == \"Denmark\")\n                                  else \"Campeonato Scotiabank (CHI)\" if (nation == \"Chile\")\n                                  else \"K LEAGUE Classic (KOR)\" if (nation == \"Korea Republic\") else \"J1 League (JAP)\" if (nation == \"Japan\")\n                                  else \"Scottish Premiership (SCO)\" if (nation == \"Scotland\") else \"LIGA Bancomer (MEX)\" if (nation == \"Mexico\")\n                                  else \"Allsvenskan (SWE)\" if (nation == \"Sweden\") else \"Saudi Professional League (SAU)\" if (nation == \"Saudi Arabia\")\n                                  else \"Airtricity League (IRE)\" if (nation == \"Republic of Ireland\") else \"Hyundai A-League (AUS & NZE)\" if (nation == \"Australia\") or (nation == \"New Zealand\")\n                                  else \"Aus. Bundesliga (AUS)\" if (nation == \"Austria\") else \"S\u00fcper Lig (TUR)\" if (nation == \"Turkey\")\n                                  else \"Eliteserien (NOR)\" if (nation == \"Norway\") else \"Pro League (BEL)\" if (nation == \"Belgium\")\n                                  else \"Liga NOS (POR)\" if (nation == \"Portugal\") else \"Raiffeisen Super League (SWI)\" if (nation == \"Switzerland\")\n                                  else \"Chi. Super League (CHI)\" if (nation == \"China PR\") else \"Eredevise (NED)\" if (nation == \"Netherlands\")\n                                  else \"Liga Dimayor (COL)\" if (nation == \"Colombia\") else \"Ekstraklasa (POL)\" if (nation == \"Poland\")\n                                  else nation)","c513f6c7":"print(\"For example this is the Premier League:\")\nprint(df.loc[df[\"League\"] == \"Premier League (ENG)\", \"Club\"].unique())","544aed36":"def slim(df, groupby, colmun, n):\n\n    return df.loc[df.groupby([groupby]).apply(lambda x: \n                        round(x[colmun].nlargest(n)))\n                    .reset_index().set_index(\"Unnamed: 0\").index.tolist()]","cccc9180":"df_slimmed = slim(df, \"Club\", \"Overall\", 23)","c52357be":"plt.figure()\nplt.rcParams[\"figure.figsize\"] = (25,10)\nplt.title(\"Overall vs League\")\nsns.boxplot(x=\"Overall\",y=\"League\", data=df_slimmed)","855d0ef3":"def remove_top(df, n):\n    \"\"\"\n    Removes the top n highest rated teams from each league in a df containing leagues ;-)\n    There is a bug here, since the highest rated teams aren't always in the top league.\n    \"\"\"\n    teams_to_remove = df_clubs.sort_values(by=\"Mean_Rating\",ascending=False).groupby(\"League\").head(n).reset_index().set_index(\"Club\")\n    df = df[-df[\"Club\"].isin(teams_to_remove.index.tolist())]\n    return df\n\ndef remove_bottom(df, n):\n    \"\"\"\n    Removes all but the top n highest rated teams from each league in a df containing leagues ;-)\n    There is a bug here, since the highest rated teams aren't always in the top league.\n    \"\"\"\n    teams_to_keep = df_clubs.sort_values(by=\"Mean_Rating\",ascending=False).groupby(\"League\").head(n).reset_index().set_index(\"Club\")\n    df = df[df[\"Club\"].isin(teams_to_keep.index.tolist())]\n    return df","3b6b499e":"fig = plt.figure()\nplt.rcParams[\"figure.figsize\"] = (30,10)\nax1 = fig.add_subplot(211)\nplt.rcParams[\"figure.figsize\"] = (30,10)\nax1.set_title(\"Overall vs League\")\nax2 = fig.add_subplot(212, sharex = ax1)\nplt.rcParams[\"figure.figsize\"] = (30,10)\nax2.set_title(\"Overall vs League, without two best teams\")\n\nsns.boxplot(x=\"Overall\",y=\"League\", data=df_slimmed, order=[\"LaLiga (SPA)\", \"Premier League (ENG)\", \"Serie A (ITA)\", \"Bundesliga (GER)\", \"Ligue 1 (FRA)\", \"Liga NOS (POR)\"], ax=ax1)\nsns.boxplot(x=\"Overall\",y=\"League\", data=remove_top(df_slimmed, 2), order=[\"LaLiga (SPA)\", \"Premier League (ENG)\", \"Serie A (ITA)\", \"Bundesliga (GER)\", \"Ligue 1 (FRA)\", \"Liga NOS (POR)\"], ax=ax2)","96193a41":"plt.figure(figsize=(25,10))\nsns.boxplot(x=\"Overall\",y=\"League\", data=slim(df, \"League\", \"Overall\", 23), \n            order=[\"LaLiga (SPA)\", \"Premier League (ENG)\", \"Serie A (ITA)\", \"Bundesliga (GER)\", \"Ligue 1 (FRA)\", \"Liga NOS (POR)\", \"Chi. Super League (CHI)\"])\n","f5b14897":"dfTemp = slim(df, \"League\", \"Overall\", 23)[(df.League == \"LaLiga (SPA)\")]\n\ndfTemp = pd.DataFrame(dfTemp, columns=[\"Age\", \"Name\",\"Club\",\"Value\" ,\"Overall\"])\n\nprint(dfTemp)\n","f5b0ca78":"def area_plotable(df, Index, Columns):\n    \"\"\"\n    Creates a new Dataframe.\n    Takes three arguments a Dataframe (df), a Column in that  Dataframe with a\n    countable variable, like Age, Overall, etc and sets the \n    different values as Index and Column where the different values will become the new\n    Columns. \n    \"\"\"\n    return df.groupby([Index]).apply(lambda column: column[Columns].value_counts()).unstack()","c4c99983":"plt.figure(figsize=(25,10))\narea_plotable(df_slimmed[-(df_slimmed[\"Overall\"]<80)], \n                         \"Overall\", \"League\")[[\"LaLiga (SPA)\", \n                         \"Premier League (ENG)\", \"Serie A (ITA)\", \"Bundesliga (GER)\"]].plot.bar()","c023240b":"plt.figure(figsize=(25,10))\n(remove_top(df_slimmed[-(df_slimmed[\"Overall\"]<60)], 15).\n             groupby([\"Overall\"]).apply(lambda league: \n                 league[\"League\"].value_counts())).unstack()[[\n    \"LaLiga (SPA)\", \"Premier League (ENG)\", \"Serie A (ITA)\", \"Bundesliga (GER)\"]].plot.area()","a1947e10":"plt.figure()\nsns.violinplot(x=\"League\", y=\"Wage\", data=df_slimmed, palette=\"muted\", order=tuple([\"LaLiga (SPA)\", \"Premier League (ENG)\"]))","c7a8d563":"plt.figure()\nsns.boxplot(x=\"Overall\",y=\"Club\", data=remove_bottom(slim(df, \"Club\", \"Overall\", 23)\n                    [(df.League == \"Premier League (ENG)\") | (df.League == \"LaLiga (SPA)\") \n                    | (df.League == \"Bundesliga (GER)\") | (df.League == \"Serie A (ITA)\")], 3))","996a76db":"pd.set_option('large_repr', 'truncate')\nprint(slim(df, \"Club\", \"Overall\", 23)[(df.Club == \"Chelsea\")][[\"Age\", \"Name\",\"Overall\", \"Position\", \"Loaned_From\"]])","973f9dd8":"df.loc[df.Name == \"M. Kova\u010di\u0107\", \"Club\"] = \"Real Madrid\"    \ndf.loc[df.Loaned_From == \"Chelsea\", \"Club\"] = \"Chelsea\"\nprint(\"Chelsea\")\nprint(slim(df, \"Club\", \"Overall\", 23)[(df.Club == \"Chelsea\")][[\"Age\", \"Name\",\"Overall\", \"Potential\", \"Position\"]])","daa9c4e7":"plt.figure()\nbar = sns.barplot(y=\"Club\", x=\"Sum\", data=slim(df, \"Club\", \"Overall\", 23).groupby([\"Club\"])\n                                        .apply(lambda club: club[\"Overall\"]\n                                    .sum()).rename(\"Sum\").reset_index()\n                                    , order=[\"Real Madrid\", \"Juventus\", \"FC Barcelona\", \"Manchester City\", \"Chelsea\"])\n                                        \nbar.set_alpha(0.8)                                       \nbar.set_title(\"Sum overall stats for 23 best players in club\", fontsize=18)\nbar.set_xlabel(\"Sum overal stats\")\nbar.set_xticks([1800, 1850, 1900, 1950, 2000])\nbar.set_xlim(left=1750, right=2050)\n\n#http:\/\/robertmitchellv.com\/blog-bar-chart-annotations-pandas-mpl.html\n#Empty list for sums\nsums = []\n#Find values to append to list\nfor i in bar.patches:\n    sums.append(i.get_width())\n#set individual bar labels using list\ntotal = sum(sums)\n\nfor i in bar.patches:\n    #get_width pulls left or right; get_y pushes up or down\n    bar.text(i.get_width()+.3, i.get_y()+.38, \\\n            str(int(i.get_width())), fontsize=15, color=\"black\")","da156094":"df[\"Position\"] = df[\"Position\"].apply(lambda pos: \"ST\" if (pos == \"RS\") or (pos == \"LS\")\n           else \"RW\" if (pos == \"RM\") or (pos == \"RF\")\n           else \"LW\" if (pos == \"LM\") or (pos == \"LF\")\n           else \"RB\" if pos == \"RWB\"\n           else \"LB\" if pos == \"LWB\"\n           else \"CM\" if (pos == \"RCM\") or (pos == \"LCM\")\n           else \"DM\" if (pos == \"RDM\") or (pos == \"LDM\") or (pos == \"CDM\")\n           else \"CB\" if (pos == \"RCB\") or (pos == \"LCB\")\n           else \"AM\" if (pos == \"RAM\") or (pos == \"LAM\") or (pos == \"CAM\") or (pos == \"CF\")\n           else pos)\n\nplt.figure()\nsns.countplot(x=\"Position\", data=slim(df, \"Club\", \"Overall\", 23)[(df.Club == \"Chelsea\")])","6a820b0c":"df_2 = df.copy()    #Here we'll make a save of our df before \"buying\" players!","9361f3d3":"PositionsToSell = [\"CM\", \"CM\", \"RW\", \"CB\", \"ST\"] #\nPlayersToSell = []\nfor position in PositionsToSell:\n    PlayersToSell.append(slim(df_2, \"Club\", \"Overall\", 23)[(slim(df_2, \"Club\", \"Overall\", 23).Club == \"Chelsea\")][df_2.Position == position].sort_values(by =\"Overall\", ascending = True).head(1))\n    PlayersToSellList = pd.concat(PlayersToSell).ID.tolist()\n    for player in PlayersToSellList:\n        df_2.loc[df_2.ID == player, \"Club\"] = \"Chelsea Sold\"\n\n\nPositionsToBuy = [\"LW\", \"DM\", \"GK\", \"LB\", \"AM\"]\nPlayersToBuy = []\nfor position in PositionsToBuy:\n    PlayersToBuy.append(df_2[(df_2.Club != \"Chelsea\")][df_2.Position == position].sort_values(by =\"Overall\", ascending = False).head(1))\n    PlayersToBuyList = pd.concat(PlayersToBuy).ID.tolist()\n    for player in PlayersToBuyList:\n        df_2.loc[df_2.ID == player, \"Club\"] = \"Chelsea\"\n        \n\nplt.figure()\nsns.countplot(x=\"Position\", data=slim(df_2, \"Club\", \"Overall\", 23)[(df_2.Club == \"Chelsea\")])","d17421dc":"plt.figure()\nbar=sns.barplot(y=\"Club\", x=\"Sum\", data=slim(df_2, \"Club\", \"Overall\", 23).groupby([\"Club\"])\n                                        .apply(lambda club: club[\"Overall\"]\n                                    .sum()).rename(\"Sum\").reset_index()\n                                    , order=[\"Real Madrid\", \"Juventus\", \"FC Barcelona\", \"Manchester City\", \"Chelsea\"])\n \nbar.set_alpha(0.8)                                       \nbar.set_title(\"Sum overall stats for 23 best players in club\", fontsize=18)\nbar.set_xlabel(\"Sum overal stats\")\nbar.set_xticks([1800, 1850, 1900, 1950, 2000])\nbar.set_xlim(left=1750, right=2050)\n\n#Empty list for sums\nsums = []\n#Find values to append to list\nfor i in bar.patches:\n    sums.append(i.get_width())\n#set individual bar labels using list\ntotal = sum(sums)\n\nfor i in bar.patches:\n    #get_width pulls left or right; get_y pushes up or down\n    bar.text(i.get_width()+.3, i.get_y()+.38, \\\n            str(int(i.get_width())), fontsize=15, color=\"black\")","5b6c94ab":"total_sum = 0\nprint(\"Players bought by triggering Release Clause:\")\nfor player in PlayersToBuyList:\n    total_sum = total_sum + df_2.loc[df_2[\"ID\"] == player, \"Release_Clause\"].item()\n    print(df_2.loc[df_2[\"ID\"] == player, \"Name\"].item())\nprint(\"Players sold for market value:\")\nfor player in PlayersToSellList:\n    total_sum = total_sum - df_2.loc[df_2[\"ID\"] == player, \"Value\"].item() \n    print(df_2.loc[df_2[\"ID\"] == player, \"Name\"].item())\n    \nprint(\"Net spent: \"+\"\u20ac\"+str(int((total_sum\/1000000)))+\"M\")","6689ea40":"print(slim(df, \"Club\", \"Potential\", 23)[(df.Club == \"Chelsea\")][[\"Age\", \"Name\",\"Value\" ,\"Overall\", \"Potential\", \"Position\"]])","a1afb1db":"plt.figure()\nplt.title(\"Overall in FIFA 19\")\nplt.rcParams[\"figure.figsize\"]=(25,16)\nsns.countplot(df[\"Overall\"])","88d8926f":"plt.figure()\nplt.title(\"Age in FIFA 19\")\nplt.rcParams[\"figure.figsize\"]=(25,16)\nsns.countplot(df[\"Age\"])","d156ac78":"plt.figure()\nsns.lineplot(x=\"Age\", y=\"Overall\", data=df)\nsns.lineplot(x=\"Age\", y=\"Potential\", data=df)","45ac2f78":"plt.figure()\nbar = sns.barplot(y=\"Club\", x=\"Sum\", data=slim(df[(df.Age < 30)], \"Club\", \"Potential\", 23).groupby([\"Club\"])\n                                        .apply(lambda club: club[\"Potential\"]\n                                    .sum()).rename(\"Sum\").reset_index()\n                                    , order=[\"Real Madrid\", \"FC Barcelona\", \"Manchester City\", \"Chelsea\", \"FC Bayern M\u00fcnchen\", \"Paris Saint-Germain\"])\n                                        \nbar.set_alpha(0.8)                                       \nbar.set_title(\"Sum overall stats for 23 best players in club\", fontsize=18)\nbar.set_xlabel(\"Sum overal stats\")\nbar.set_xticks([1800, 1850, 1900, 1950, 2000])\nbar.set_xlim(left=1750, right=2050)\n\n#Empty list for sums\nsums = []\n#Find values to append to list\nfor i in bar.patches:\n    sums.append(i.get_width())\n#set individual bar labels using list\ntotal = sum(sums)\n\nfor i in bar.patches:\n    #get_width pulls left or right; get_y pushes up or down\n    bar.text(i.get_width()+.3, i.get_y()+.38, \\\n            str(int(i.get_width())), fontsize=15, color=\"black\")","265578cc":"print(slim(df[(df.Age < 30)], \"Club\", \"Potential\", 23)[(df.Club == \"Chelsea\")][[\"Age\", \"Name\",\"Value\" ,\"Overall\", \"Potential\", \"Position\"]])","7d10b50f":"plt.figure()\nsns.countplot(x=\"Position\", data=slim(df[(df.Age < 30)], \"Club\", \"Potential\", 23)[(df.Club == \"Chelsea\")])","33fff680":"df_outfield = df[[\"ID\", \"Name\", \"Age\", \"Nationality\", \"Overall\",\n       \"Potential\", \"Club\", \"League\", \"Value\", \"Release_Clause\", \"Wage\", \"Special\",\n       \"Preferred_Foot\", \"International_Reputation\", \"Weak_Foot\",\n       \"Skill_Moves\", \"Work_Rate\", \"Body_Type\", \"Position\",\n       \"Jersey_Number\", \"Loaned_From\",\n       \"Height\", \"Weight\", \"Crossing\",\n       \"Finishing\", \"HeadingAccuracy\", \"ShortPassing\", \"Volleys\", \"Dribbling\",\n       \"Curve\", \"FKAccuracy\", \"LongPassing\", \"BallControl\", \"Acceleration\",\n       \"SprintSpeed\", \"Agility\", \"Reactions\", \"Balance\", \"ShotPower\",\n       \"Jumping\", \"Stamina\", \"Strength\", \"LongShots\", \"Aggression\",\n       \"Interceptions\", \"Positioning\", \"Vision\", \"Penalties\", \"Composure\",\n       \"Marking\", \"StandingTackle\", \"SlidingTackle\"]]\ndf_gk = df[[\"ID\", \"Name\", \"Age\", \"Nationality\", \"Overall\",\n       \"Potential\", \"Club\", \"League\", \"Value\", \"Release_Clause\", \"Wage\", \"Special\",\n       \"Preferred_Foot\", \"International_Reputation\", \"Weak_Foot\",\n       \"Skill_Moves\", \"Work_Rate\", \"Body_Type\", \"Position\",\n       \"Jersey_Number\", \"Loaned_From\",\n       \"Height\", \"Weight\", \"GKDiving\", \"GKHandling\",\n       \"GKKicking\", \"GKPositioning\", \"GKReflexes\"]]\n\ndf_outfield = df_outfield[(df.Position != \"GK\")]\ndf_gk = df_gk[(df.Position == \"GK\")]\n","7ce56c71":"def Heatmap(DF, Label =\"Heatmap\", cmap = sns.diverging_palette(250, 10, n=9, as_cmap=True)):\n    corr = DF.corr()\n    \n    mask = mask = np.zeros_like(corr, dtype=np.bool)\n    mask[np.triu_indices_from(mask)] = True\n    \n    plt.figure()\n    plt.rcParams[\"figure.figsize\"]=(25,16)\n    HeatMap = sns.heatmap(corr, annot = True, linewidths=.6, cmap=cmap, mask=mask)\n    HeatMap.set_title(label=Label, fontsize=20)\n    \n    return HeatMap;","3d04946d":"Heatmap(df_outfield[[\"Age\",\"Overall\",\n       \"Potential\",\"Value\", \"Release_Clause\", \"Wage\", \"Special\",\n       \"Preferred_Foot\", \"International_Reputation\", \"Weak_Foot\",\n       \"Skill_Moves\", \"Jersey_Number\", \"Height\", \"Weight\"]], \"Heatmap outfield Nonstats\")\n ","472a718e":" Heatmap(df_outfield[[\"Overall\", \"Crossing\",\n       \"Finishing\", \"HeadingAccuracy\", \"ShortPassing\", \"Volleys\", \"Dribbling\",\n       \"Curve\", \"FKAccuracy\", \"LongPassing\", \"BallControl\", \"Acceleration\",\n       \"SprintSpeed\", \"Agility\", \"Reactions\", \"Balance\", \"ShotPower\",\n       \"Jumping\", \"Stamina\", \"Strength\", \"LongShots\", \"Aggression\",\n       \"Interceptions\", \"Positioning\", \"Vision\", \"Penalties\", \"Composure\",\n       \"Marking\", \"StandingTackle\", \"SlidingTackle\"]], \"Heatmap outfield Stats\")","08c372c3":"posList = df[\"Position\"].unique()\noutfield_corr = (\"ShortPassing\", \"LongPassing\", \"BallControl\", \"Reactions\", \"Composure\") ","db1d1a44":"#https:\/\/python-graph-gallery.com\/391-radar-chart-with-several-individuals\/  \nidx = 1\nplt.figure(figsize=(15,15))\nfor pos, attributes in df_outfield.groupby(df_outfield['Position'])[outfield_corr].mean().iterrows():\n    attributes = dict(attributes)\n    \n    # number of variable\n    categories=attributes.keys()\n    N = len(categories)\n\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    values = list(attributes.values())\n    values += values[:1]\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(3, 3, idx, polar=True)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=9)\n\n    # Draw ylabels\n    ax.set_rlabel_position(180)\n    plt.yticks([25,50,75], [\"25\",\"50\",\"75\",], color=\"grey\", size=7)\n    plt.ylim(0,100)\n    \n    plt.subplots_adjust(hspace = 0.5)\n    \n    # Plot data\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n\n    # Fill area\n    ax.fill(angles, values, 'r', alpha=0.1)\n    \n    plt.title(pos, size=14, y=1.1)\n    \n    idx += 1    ","45559f85":"for pos in posList:\n    \n    if pos != \"GK\" and pos == \"LB\" or pos == \"RB\" or pos == \"ST\" or pos == \"AM\":\n        df_pos = df_outfield[(df_outfield.Position == pos)]\n        \n        Heatmap(df_pos[[\"Overall\", \"Crossing\",\n           \"Finishing\", \"HeadingAccuracy\", \"ShortPassing\", \"Volleys\", \"Dribbling\",\n           \"Curve\", \"FKAccuracy\", \"LongPassing\", \"BallControl\", \"Acceleration\",\n           \"SprintSpeed\", \"Agility\", \"Reactions\", \"Balance\", \"ShotPower\",\n           \"Jumping\", \"Stamina\", \"Strength\", \"LongShots\", \"Aggression\",\n           \"Interceptions\", \"Positioning\", \"Vision\", \"Penalties\", \"Composure\",\n           \"Marking\", \"StandingTackle\", \"SlidingTackle\"]], \"Heatmap of stats \" + pos)\n    elif pos == \"GK\":    \n        Heatmap(df_gk[[\"Age\", \"Nationality\", \"Overall\",\n       \"Potential\", \"Club\", \"Value\", \"Wage\", \"Special\",\n       \"Preferred_Foot\", \"International_Reputation\", \"Weak_Foot\",\n       \"Work_Rate\", \"Body_Type\", \"Position\",\n       \"Jersey_Number\",\n       \"Height\", \"Weight\", \"GKDiving\", \"GKHandling\",\n       \"GKKicking\", \"GKPositioning\", \"GKReflexes\"]], \"Heatmap for GKs\")\n    else:\n        None","5223305e":"print(df_gk[(df_gk.Age < 25)].sort_values(by =\"Potential\", ascending = False)[[\"Potential\", \"Release_Clause\", \"Age\", \"Name\",\"Club\",]].head(20))","81a2c66c":"outfield_attributes = (\"Crossing\", \"Finishing\", \"HeadingAccuracy\", \"ShortPassing\", \"Volleys\", \"Dribbling\",\n       \"Curve\", \"FKAccuracy\", \"LongPassing\", \"BallControl\", \"Acceleration\",\n       \"SprintSpeed\", \"Agility\", \"Reactions\", \"Balance\", \"ShotPower\",\n       \"Jumping\", \"Stamina\", \"Strength\", \"LongShots\", \"Aggression\",\n       \"Interceptions\", \"Positioning\", \"Vision\", \"Penalties\", \"Composure\",\n       \"Marking\", \"StandingTackle\", \"SlidingTackle\")\n\nfor pos, attribute in df_outfield.groupby(df_outfield['Position'])[outfield_attributes].mean().iterrows():\n    print('Position {}: {}, {}, {}, {}, {}'.format(pos, *tuple(attribute.nlargest(5).index)))  ","e03afdad":"AllStats = [\"Crossing\",\n           \"Finishing\", \"HeadingAccuracy\", \"ShortPassing\", \"Volleys\", \"Dribbling\",\n           \"Curve\", \"FKAccuracy\", \"LongPassing\", \"BallControl\", \"Acceleration\",\n           \"SprintSpeed\", \"Agility\", \"Reactions\", \"Balance\", \"ShotPower\",\n           \"Jumping\", \"Stamina\", \"Strength\", \"LongShots\", \"Aggression\",\n           \"Interceptions\", \"Positioning\", \"Vision\", \"Penalties\", \"Composure\",\n           \"Marking\", \"StandingTackle\", \"SlidingTackle\"]\n\nLBRBStats = [\"Crossing\", \"ShortPassing\", \"BallControl\", \"Reactions\", \n           \"Interceptions\", \"StandingTackle\", \"SlidingTackle\"]\n\ndf[\"LBRB_ratio\"] = round(100*(df[LBRBStats].sum(axis=1) \/ df[AllStats].sum(axis=1)))","5e47e075":"#--------------This code needs to be run with a plotly account-----\ndef scatter3D(x , y , z , txt , xlabel , ylabel , zlabel , title):\n    camera = dict(\n        up=dict(x=0, y=0, z=1),\n        center=dict(x=0, y=0, z=0),\n        eye=dict(x=2, y=2, z=0.1))\n    trace0 = go.Scatter3d(\n        x = x,\n        y = y,\n        z = z,\n        mode = 'markers',\n        text  = txt,\n        marker = dict(\n            size = 12,\n            color = z,\n            colorscale = 'Viridis',\n            showscale = True,\n            line = dict(\n                color = 'rgba(217 , 217 , 217 , 0.14)',\n                width = 0.5\n            ),\n            opacity = 0.8\n        )\n    )\n    \n    layout = go.Layout(\n        title = title,\n        scene = dict(\n            camera = camera,\n            xaxis = dict(title  = xlabel),\n            yaxis = dict(title  = ylabel),\n            zaxis = dict(title  = zlabel)\n        )\n    )\n    data = [trace0]\n    fig = go.Figure(data = data , layout = layout)\n    py.offline.iplot(fig)\n\ndf3 = df[(df.Value < 20000000)]\n\nscatter3D(df3['Age'].where(df3['Age'] < 25) ,\n         df3['Potential'].where(df3['Potential'] > 85),\n         df3['LBRB_ratio'].where(df3['LBRB_ratio'] > 25),\n         df3['Name'],\n         'Age','Potential', 'LBRB_ratio',\n         'Most promising left backs')","fa8e4df8":"LBRB = [\"J. Gomez\", \"M. Calara\", \"Vallejo\", \"F. Romagna\", \"D. Upamecano\", \"R. Bentancur\", \"Odriozola\", \"D. Calabria\", \"R. Zobnin\", \"Marcos Llorente\", \"A. Diallo\", \"I. Diop\", \"J. Kound\u00e9\", \"Diogo Leite\", \"Pablo Maffeo\", \"Marc Roca\"]\nprint(\"Potential signings:\")\nprint(df[df.Name.isin(LBRB)][[\"Name\",\"Release_Clause\", \"Potential\", \"Position\", \"Preferred_Foot\"]])","4ac397aa":"df3 = df.copy()\ndf3.loc[df.Name == \"R. Bentancur\", \"Position\"] = \"RB\"\ndf3.loc[df.Name == \"Marc Roca\", \"Position\"] = \"LB\"\n\nPositionsToSell = [\"CM\", \"CM\", \"ST\"] #\nPlayersToSell = []\nfor position in PositionsToSell:\n    PlayersToSell.append(slim(df3, \"Club\", \"Potential\", 23)[(slim(df3, \"Club\", \"Potential\", 23).Club == \"Chelsea\")][df3.Position == position].sort_values(by =\"Potential\", ascending = True).head(1))\n    PlayersToSellList = pd.concat(PlayersToSell).ID.tolist()\n    for player in PlayersToSellList:\n        df3.loc[df3.ID == player, \"Club\"] = \"Chelsea Sold\"\n\nPurchaseList = [\"R. Bentancur\", \"Marc Roca\", \"A. Lafont\"]\nPlayersToBuy = []\nfor name in PurchaseList:\n    PlayersToBuy.append(df3[(df3.Club != \"Chelsea\")][df3.Name == name].sort_values(by =\"Overall\", ascending = False).head(1))\n    PlayersToBuyList = pd.concat(PlayersToBuy).ID.tolist()\n    for player in PlayersToBuyList:\n        df3.loc[df3.ID == player, \"Club\"] = \"Chelsea\"       \n        \nprint(\"Chelsea\")\nprint(slim(df3[(df.Age < 30)], \"Club\", \"Potential\", 23)[(df3.Club == \"Chelsea\")][[\"Age\", \"Name\",\"Value\" ,\"Overall\", \"Potential\", \"Position\"]])\n","f518fe7f":"total_sum = 0\nprint(\"Players bought by triggering Release Clause:\")\nfor player in PurchaseList:\n    total_sum = total_sum + df3.loc[df3[\"Name\"] == player, \"Release_Clause\"].item()\n    print(df3.loc[df3[\"Name\"] == player, \"Name\"].item())\nprint(\"Players sold for market value:\")\nfor player in PlayersToSellList:\n    total_sum = total_sum - df3.loc[df3[\"ID\"] == player, \"Value\"].item() \n    print(df3.loc[df3[\"ID\"] == player, \"Name\"].item())\nprint(\"Net spent: \"+\"\u20ac\"+str(int((total_sum\/1000000)))+\"M\")","586578a2":"plt.figure()\nbar = sns.barplot(y=\"Club\", x=\"Sum\", data=slim(df3[(df.Age < 30)], \"Club\", \"Potential\", 23).groupby([\"Club\"])\n                                        .apply(lambda club: club[\"Potential\"]\n                                    .sum()).rename(\"Sum\").reset_index()\n                                    , order=[\"Real Madrid\", \"FC Barcelona\", \"Manchester City\", \"Chelsea\"])\n                                        \nbar.set_alpha(0.8)                                       \nbar.set_title(\"Sum overall stats for 23 best players in club\", fontsize=18)\nbar.set_xlabel(\"Sum overal stats\")\nbar.set_xticks([1800, 1850, 1900, 1950, 2000])\nbar.set_xlim(left=1750, right=2050)\n\n#Empty list for sums\nsums = []\n#Find values to append to list\nfor i in bar.patches:\n    sums.append(i.get_width())\n#set individual bar labels using list\ntotal = sum(sums)\n\nfor i in bar.patches:\n    #get_width pulls left or right; get_y pushes up or down\n    bar.text(i.get_width()+.3, i.get_y()+.38, \\\n            str(int(i.get_width())), fontsize=15, color=\"black\")","cf1c1037":"plt.figure()\nsns.countplot(x=\"Position\", data=slim(df3[(df.Age < 30)], \"Club\", \"Potential\", 23)[(df3.Club == \"Chelsea\")])","f7b4867b":"\nNow that's more than a bit cheaper!\nAnd the million dollar question! Is this enough to Potentially become the best club in five years? ;-)","8223961b":"> <iframe width=\"900\" height=\"800\" frameborder=\"0\" scrolling=\"no\" src=\"\/\/plot.ly\/~Draxen\/10.embed\"><\/iframe>","7166ac8f":"We found an interesting bunch of players here! R. Bentancur, Odriozola, D. Calabria, R. Zobnin, Marcos Llorente, A. Diallo, I. Diop, J. Kound\u00e9, Diogo Leite, Pablo Maffeo, Marc Roca! Let's add them to a list and find out how much they would cost and if they are right or left footed!","d2243fff":"It's pretty clear that either CBs are much worse footballers then all the others or they aren't good at the same things as the others.","6416f1df":"So it would seem that the La Liga team by a margin would be the best team in that scenario.","0a1d50db":"55 Overall points to overtake Real Madrid as highest rated team! Which means five players with an average rating improvement of 11! Now that's going to get expensive and we're going to have to go for the best avaliable players.\n                                        \nLet's clean up the positions a bit so we make sure we balance our squad when buying (and selling) new players! ","f6c05bbe":"Let's look a bit closer at the different leagues. First I need to pivot my data a bit.","5d45bc22":"<a id=\"ch3\"><\/a>\n# Making Chelsea the best team in the game","b0d14967":"Y\u00c4Y!!! And did we manage to get a more balanced squad? ","6d2c1b78":"Now that is what I call a team!","896101cc":"I'm sorry - but I don't think we can say that the German league has got something to say here, with the fewest amounts ranked 80 and above in almost every cathegory.\n\nThere are no easy games in the PL! Or are there? Let's see how the players from the bottom 5 teams in the four leagues leagues hold up.\nAnd let's make it all on just one line just to make it look very complicated.","412ae682":"Let's see if the \"softer\" stats says something about the Overall or the Potential rating of a player.","40fb023a":"We can see that ShortPassing, LongPassing, BallControl, Reactions and Composure looks like the most important features. But is this true for every individual position?","3a0bcdd3":"I'm sorry french and portuguese league, but this doesn't really cut it. It's even pretty clear that the french league almost looks more like the portuguese than the other top leagues - bar PSG.\nAlso it seems like the spanish and the english league are quite similar - as are the german and the italian leagues!","5cc3e1f1":"Here I can see that there are 18207 entries - but only 18159 with Height, Weight and proper stats - this doesn't sound like real players to me - so let's drop them. \nThere are also 12 other players with no position - so let's drop them aswell.\n\nWe also saw that the columns are named with spaces, so I'll replace them with \"_\" to be able to call for them easier later on.\n\nWe also have a few columns that Should have numerical values (Wage, Value, Release Clause, Height & Weight are the specific ones I'm interested in) that I'm going to convert.\n","d60e19cc":"Alright! So my team, Chelsea, aren't That far behind the Top clubs - especially looking at you Real Madrid who seems to have the best team in the game.  And interestingly enough it seems like Bayern actually have room for buying More players since there are a few ranking 75 and lower.","e9992cfb":"For the outfield players - let's mix it up a bit and try to use what we've learned from what contributes to the overall score to see if we can find our missing players without any regards to what position they are playing now. We are in dire need of a new LB with that being our absolute weakest position as it stands, and we could probably use a RB too. In the correlation matrix we can see that the 5 most important traits correlated to Overall score for them is: \"Ball Control\", \"Reactions\", \"Interceptions\" with \"Standing Tackle\", Sliding Tackle\" and \"ShortPassing\" coming 4th with \"Crossing\" also seeming very important - but is that what they Actually are the best at?","a7e16bd2":"<a id=\"ch2\"><\/a>\n# League Comparisons","c25f1638":"I need to define a function to be able to slim down the teams to only include a certain amount of players based on som sort of separator.","04d25920":"It's pretty clear that the bulk of players rated ~74 and higher in those teams usually resides in LaLiga or Premier League. So I think it's fair to say that the best league probably is LaLiga or the Premier League according to EA.\n\nAlright - so wages then. Should you chose LaLiga or the Premier League if you want to make all the moneys?","be42b3a3":"Let's take a quick look at how the player distribution looks.","4d505d70":"We can see that the overall rating for players in the dataset almost looks normally distributed - which could be useful for deeper analysis. And we can see that most of the players never reach the potential that we are seeking here.","d191305a":"The CM R. Bentancur looks like a perfect RB and the DM Marc Roca looks like the perfect fit for a LB! Let's change their positions and att them to the purchase list.","dc2e41dd":"This is my first real attempt at a Kernel, all feedback is appriciated, especially feedback that can improve my code and make it run smoother. And thank you to all previous kernels from which I have borrowed alot of information.","07fc7194":"We can see that the average player reaches his potential at 29~30 and that they start to become worse players after 33. After 36 the graph looks a bit funny- which as we saw previously is due to the fact that most players have retired by then and the data therefore aren't very reliable for figuring out how overall is affected by age.\n\nI also noted earlier that Chelsea has got a quite young squad when it comes to potential top players and that the only ones we have to worry about declining is Fabregas, David Luiz and possibly Willian over a 5 year period. We can also see that the players are close to reaching their full potential when they are 25 - so we're looking for players who are 19 and older to try to get the best team in the game in 5 years time.\n\nAnyway,\nLet's remove our older players and see what we have to work with over a 5 year period.","583af218":"Just for fun - let's see how the difference would be if we create Elite teams with the 23 best players from each of these leagues respectively - and let's add the Chinese League aswell just to see what all those marqee signings have gotten them.","d664f7c4":"# Table of Contents\n1. [Part 1 - Preparing the data](#ch1)\n1. [Part 2 - League Comparison](#ch2)\n1. [Part 3 - Making Chelsea the best team in the game](#ch3)","89ca5b26":"Alright - my formation of choice is 4-2-3-1 with one of the holding midfielders being defensive, so in order to balance our squad we need 1 LW, 1 DM, 1 GK, 1 LB and 1 AM to have at least 2 players for each position.\nAnd we should sell at least 2 CM, 1 AM, 1 RW, 1 CB, 1 ST       ","3d4f36da":"So! Let's compare some leagues!","303c9abd":"<a id=\"ch1\"><\/a>\n# Preparing the data","11883bb5":"So we have quite an unbalanced squad here. But that is a problem for later - first we just need to find a reserve goalkeeper and one or two defenders. We can probably safely sell 2 CMs and a striker aswell.","c6444f02":"We can see, shockingly, that both wage and value seems to have a positive correlation with both overall and potential - and that a high Special has a very positive effect on the overall rating.\nWe can also see here that a high Jersey Number has got a small negative effect on the overall rating - or more probably the other way around.\n\nAnd how do the atcual stats fare? What are the most important ones?","4302bbc4":"It seems like the best leagues are the Spanish, Italian, English, German, French and maybe the Portuguese. Interestingly the very best players in the best leagues seem to be outliers in every major league except the portugeese. \n\nSadly it seems like the Swedish league are far, far away from competing at the highest level. - Luckily for Sweden it also seems that there are some hihgly rated Free Agents which could be picked up on a free to up the quality of the league! ;-)\n\nAnyway,\nI've heard rumours about leagues being \"one or two team leagues\", so let's remove the two team with the highest mean rating from each league and see how that affects the result.","cce3123b":"Glorious!! Now how much did we pay for this and who did we buy? We can see that Real Madrid and Barcelona has gotten worse which meant we've bought players from them in order to surpass them.","ecd85c66":"Then I'll have a quick look at the data to see if we have any null-values that we need to take care of.","89d64f58":"So we've learned some new things here. First is first. There are different stats that contribute to the overall score for the different types of players - for instance, the defensive stats are more important for defenders. But for Goalkeepers we can probably be satisfied with just using the \"Potential\" score and be done with it. So who are the Goalkeepers with the highest potential? ","5c594323":"I'm going to use this function to save a variable where I put a df containing the 23 highest rated players from each clubs in order to do Fair comparisons based on the actual A-team players.","94632c6a":"Alright! So for the net sum of a 650 million pounds this would be in the bag! \nWell.. Now we went to the board and presented this idea, and they told us that it cost too much money! They'd rather buy players with potential and Potentially become the best team in the world. So I'll head back to the drawing board.","b701c7c0":"First I'll import my data and set the index as the first column, (Which I know is a an index row in this dataset)","342e27fa":"Sort of! We might be in need of a cb or two.. ;-) Thank you for reading this - Any feedback that can help me improve is appriciated! And thanks again to the previously made kernels for all inspiration!","3092f52e":"It seems like the wages are a but more fairly distributed, and a bit higher, in the Premier League but that the spanish aren't shy about paying top euros for the very best players.\nAlright - but overall it seems like the LaLiga probably is the best league in the game. But which are the top three teams from the best leagues?","6858748a":"Now this looks Very promising!!","515edcdd":"Alright! So that seems to have done it! Now did we improve our squad?","53af00d8":"According to this - A. Lafont looks like our man, with A. Meret or A. Lunin also looking interesting with Meret being a bit older and thus closer to his full potential and Lunin not having a release clause.","a351ad02":"I'm interested in comparing the different leagues to eachother, but I have no column called \"Leagues\" - so this is something I need to create. There are some exceptions which are handled in the code, these were found when writing the code and there could be more.\nThere is a case to be made for separating Sky Bet Championship from the other English lower leages - but as it stands I'm not going to be bothered with it and the Clubs will be put in the highest possible division or in the \"lower div.\"","511dab8b":"We can also see here that there are many young players and that players tend to quit in their early 30's. But how are Potential rating and Overall rating related? When do players reach their potential?","60a55b1e":"In order to find out which stats are connected to the overall rating I'm going to create a correlation matrix.","54e6a530":"That didn't improve our situation that much to be honest..! We've replaced RLC, who is a fan favourite with Bakayoko, Kovacic with Zouma and Caballero with Batshuayi\nWhich has left us with only one GK in the top 23 squad - so that's not good. \nBut how far are we from being the best club in the world?","e92e5a82":"So let's see how the correlations look for each position. (let's not go crazy here and just do it on 5 positions!)","04359118":"Here we can see that LBs and RBs usually have their highest stats in SprintSpeed, Acceleration, Stamina, Balance and Agility NONE which has the highest correlation to the Overall rating. Anyway - rating is what we're after. So let's create a new column called LBRB-ratio where we find out the ratio for the 7 most important stats versus the total stat. If the player we find is Right footed we'll regard him as RB and if he is left footed he is to be regarded as a LB.","87258694":"Alright, so more than anything we need a new Goalkeeper and we could probably do with an upgrade on V. Moses and D.Drinkwater who both have and an Overall AND a potential lower than 80. I happen to know that Chelsea has got a lot of players out on loan - let's see if bringing them home changes anything. And let's send Kovacic home to Madrid - we can't have any loanees here if we're to be taken seriously!"}}