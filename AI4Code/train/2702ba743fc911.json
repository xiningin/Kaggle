{"cell_type":{"fb22b486":"code","9cf8962c":"code","fa11ad76":"code","448457cd":"code","d89acec4":"code","46b6f7b4":"code","6a1723ce":"code","ed7546ec":"code","079d5fa9":"code","e23cd932":"code","4ee65777":"code","517c56b2":"code","ffb30abf":"code","6e4688cc":"code","1dcc7e23":"code","c6af8537":"code","f42287ff":"code","79013f5e":"code","127642d3":"code","1903aa45":"code","824f29c2":"code","7560dfdd":"markdown","4425f559":"markdown","e04ff305":"markdown","7883fa53":"markdown","67f8f823":"markdown","2dfda380":"markdown","37705a18":"markdown"},"source":{"fb22b486":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport time\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9cf8962c":"train_data = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/train.csv')\ntest_data = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/test.csv')","fa11ad76":"train_data.head()","448457cd":"test_data.head()","d89acec4":"print('train data shape is {}'.format(train_data.shape))\nprint('test data shape is {}'.format(test_data.shape))","46b6f7b4":"different_collumn = list(set(train_data.columns)-set(test_data.columns))\nprint(different_collumn)\n","6a1723ce":"missing_values = (train_data.isnull().sum())\nprint(missing_values[missing_values>0])","ed7546ec":"from sklearn.linear_model import LinearRegression\nfrom xgboost import XGBRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor","079d5fa9":"from sklearn.preprocessing import StandardScaler","e23cd932":"X = train_data.drop(['id','loss'],axis=1)\ny = train_data['loss']\nX.head()","4ee65777":"standard = StandardScaler()\nX_train = standard.fit_transform(X)\nX_test =  standard.transform(test_data.drop('id',axis=1))\n\n","517c56b2":"print(X_train)","ffb30abf":"lr = LinearRegression()\nxgb = XGBRegressor(n_estimators = 100,random_state = 0)\ndt = DecisionTreeRegressor()\ngb = GradientBoostingRegressor(random_state = 0)\ncat = CatBoostRegressor()\nlg = LGBMRegressor()","6e4688cc":"def model_result(model):\n    start = time.time()\n    model.fit(X_train,y)\n    mean_result = cross_val_score(model,X_train,y,cv=5,scoring='neg_mean_squared_error')\n    stop = time.time()\n    print(f\"Time spend : {round((stop-start),2)}s\")\n    return -1*mean_result.mean()","1dcc7e23":"print(\"Linear Regression :  {}\".format(np.sqrt(model_result(lr))))\n","c6af8537":"print(\"Decision Tree : {}\".format(np.sqrt(model_result(dt))))\n","f42287ff":"print(\"XGBoost  : {}\".format(np.sqrt(model_result(xgb))))\n","79013f5e":"print(\"CatBoost  : {}\".format(np.sqrt(model_result(cat))))\n","127642d3":"print(\"Light : {}\".format(np.sqrt(model_result(lg))))","1903aa45":"prediction = cat.predict(X_test)","824f29c2":"output = pd.DataFrame({'id': test_data.id,\n                       'loss': prediction})\noutput.to_csv('submission.csv', index=False)","7560dfdd":"Let's check if the columns of the data_train and the test_data has other different columns. ","4425f559":"# Introduction","e04ff305":"# Submission","7883fa53":"No missing values","67f8f823":"# Machine Learning Model","2dfda380":"This shows that the both data has the same columns.","37705a18":"CatBoost performs the best "}}