{"cell_type":{"d2a9ec92":"code","cf91d516":"code","393a9016":"code","6590c070":"code","610855ef":"code","3cacabd3":"code","51b2abfe":"code","4f7742a9":"code","c74c7fa2":"code","d97fd209":"code","110b6cde":"code","e4b318e1":"code","7d04bfcd":"code","a4942e37":"code","63212e0c":"code","8d582207":"code","e5b4dd5b":"code","ea31b6b6":"code","e45e5be1":"code","8f1122cf":"code","d173270c":"code","ec48bf7c":"code","1d2caa25":"code","42155f54":"code","0e72af89":"code","dd6756db":"code","881d0e54":"code","9d95810d":"code","f7b8f1d2":"code","054d2e83":"code","c0b432ea":"code","fb31b235":"code","a47b8206":"code","f28c8d08":"code","529d97c4":"code","32efc5c6":"code","fe179b3b":"code","358214c4":"code","c2f187bd":"code","b26ef710":"code","18ebb2ac":"code","26e03703":"code","4766b1e8":"code","74e01126":"markdown","dd21ec36":"markdown"},"source":{"d2a9ec92":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cf91d516":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","393a9016":"df_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")","6590c070":"df_train.head()","610855ef":"df_train.isnull().sum()","3cacabd3":"df_train[\"Age\"].fillna(df_train[\"Age\"].mean(),inplace=True)","51b2abfe":"for i, col in enumerate([\"SibSp\",\"Parch\"]):\n    plt.figure(i)\n    sns.catplot(x=col,y=\"Survived\",data=df_train,kind='point',aspect=2)","4f7742a9":"df_train[\"Family_count\"]=df_train[\"SibSp\"]+df_train[\"Parch\"]","c74c7fa2":"df_train.drop([\"SibSp\",\"Parch\",\"PassengerId\"],axis=1,inplace=True)","d97fd209":"df_train.head(10)","110b6cde":"df_train.to_csv('..\/..\/..\/titanic_cleaned.csv',index=False)","e4b318e1":"df_train['Cabin_ind']= np.where(df_train['Cabin'].isnull(), 0, 1)","7d04bfcd":"gender_num = {'male':0, 'female': 1}\ndf_train[\"Sex\"] = df_train[\"Sex\"].map(gender_num)","a4942e37":"df_train.drop(['Name','Ticket','Cabin','Embarked'],axis=1,inplace=True)","63212e0c":"df_train.head()","8d582207":"df_train.to_csv('..\/..\/..\/titanic_cleaned.csv',index=False)","e5b4dd5b":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\ntitanic = pd.read_csv('..\/..\/..\/titanic_cleaned.csv')\ntitanic.head()","ea31b6b6":"features = titanic.drop(\"Survived\", axis=1)\nlabels= titanic[\"Survived\"]\n\n# Split training data into training and test set\ntrain_X, test_X ,train_y, test_y = train_test_split(features, labels, test_size=0.4,random_state=42)\n# Split training data into training and test set\ntest_X ,val_X, test_y, val_y = train_test_split(test_X, test_y, test_size=0.5,random_state=42)","e45e5be1":"for dataset in [train_y, val_y, test_y]:\n    print(round(len(dataset) \/ len(labels),2))","8f1122cf":"# Initialize model\nmodel = RandomForestClassifier()\n# Fit data\nmodel.fit(train_X, train_y)\n# Calc accuracy on test\nacc = accuracy_score(model.predict(test_X), test_y)\nprint(\"Validation accuracy for Random Forest Model: {:.6f}\".format(acc))","d173270c":"# Calc accuracy on validation\nacc = accuracy_score(model.predict(val_X), val_y)\nprint(\"Validation accuracy for Random Forest Model: {:.6f}\".format(acc))","ec48bf7c":"from sklearn.model_selection import cross_val_score","1d2caa25":"# Initialize model\nmodel2 = RandomForestClassifier()\n\nscores = cross_val_score(model2,train_X,train_y, cv=5)","42155f54":"scores","0e72af89":"from sklearn.model_selection import GridSearchCV","dd6756db":"def print_results(results):\n    print(\"BEST PARAMS {}\\n\".format(results.best_params_))\n    \n    means = results.cv_results_['mean_test_score']\n    stds = results.cv_results_['std_test_score']\n    for mean, std, params in zip(means, stds, results.cv_results_['params']):\n        print(\"{} (+\/-{}) for {}\".format(round(mean,3),round(std * 2,3),params))","881d0e54":"model3 = RandomForestClassifier()\n\nparameters = {'n_estimators': [5,50,100],\n           'max_depth': [2, 10, 20, None]\n           }\n\ncv = GridSearchCV(model3, parameters, cv=5)\ncv.fit(train_X, train_y)","9d95810d":"print_results(cv)","f7b8f1d2":"rf1 = RandomForestClassifier(max_depth=10,n_estimators= 50)\nrf1.fit(train_X, train_y)\n\nrf2 = RandomForestClassifier(max_depth=10,n_estimators= 100)\nrf2.fit(train_X, train_y)\n\nrf3 = RandomForestClassifier(max_depth=None,n_estimators=100)\nrf3.fit(train_X, train_y)","054d2e83":"from sklearn.metrics import precision_score, recall_score","c0b432ea":"for mdl in (rf1,rf2,rf3):\n    y_pred = mdl.predict(val_X)\n    accuracy = round(accuracy_score(val_y,y_pred),3)\n    precision = round(precision_score(val_y,y_pred),3)\n    recall = round(recall_score(val_y,y_pred),3)\n    print(\"MAX_DEPTH: {}, \/ # OF EST: {} -- A: {}, P: {}, R: {}\".format(mdl.max_depth,\n                                                                        mdl.n_estimators,\n                                                                        accuracy,\n                                                                        precision,\n                                                                        recall))\n    ","fb31b235":"y_pred = rf2.predict(test_X)\naccuracy = round(accuracy_score(test_y,y_pred),3)\nprecision = round(precision_score(test_y,y_pred),3)\nrecall = round(recall_score(test_y,y_pred),3)\nprint(\"MAX_DEPTH: {}, \/ # OF EST: {} -- A: {}, P: {}, R: {}\".format(rf2.max_depth,\n                                                                        rf2.n_estimators,\n                                                                        accuracy,\n                                                                        precision,\n                                                                        recall))","a47b8206":"final_model = rf2\n\ndf_test.head()\n","f28c8d08":"print(df_test.isnull().sum())\nprint(df_test.shape)","529d97c4":"df_test[\"Age\"].fillna(df_test[\"Age\"].mean(),inplace=True)","32efc5c6":"df_test[\"Family_count\"]=df_test[\"SibSp\"]+df_test[\"Parch\"]\ndf_test[\"Sex\"] = df_test[\"Sex\"].map(gender_num)\ndf_test['Cabin_ind']= np.where(df_test['Cabin'].isnull(), 0, 1)\ndf_test.drop(['Name','Ticket','Cabin','Embarked'],axis=1,inplace=True)\n\npassenger_id = df_test[\"PassengerId\"]","fe179b3b":"df_test[df_test.isnull().any(axis=1)]","358214c4":"means = df_test.groupby('Pclass')['Fare'].mean()\nmeans","c2f187bd":"df_test[\"Fare\"].fillna(12.459678,inplace=True)","b26ef710":"df_test.drop([\"SibSp\",\"Parch\",\"PassengerId\"],axis=1,inplace=True)","18ebb2ac":"df_test.head()","26e03703":"final_y_pred = final_model.predict(df_test)\n","4766b1e8":"final_sub = pd.DataFrame(passenger_id)\nfinal_sub['Survived'] = final_y_pred\nfinal_sub.to_csv('finalsub.csv',index=False,)","74e01126":"Kfold cross validation","dd21ec36":"GridSeachCV"}}