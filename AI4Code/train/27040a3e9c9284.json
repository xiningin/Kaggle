{"cell_type":{"a2aef54a":"code","2fadf239":"code","7ebf72bf":"code","10d8a0e9":"code","75009b4d":"code","fdff3d86":"code","0b5aaad1":"code","ae2aab8e":"code","60ec823e":"code","730dab66":"code","c56496e7":"code","20739a9f":"code","154cb985":"code","da8558f2":"code","a6bdb14c":"code","ce380a5f":"markdown","71c8301c":"markdown","b6ce6659":"markdown","ec83679c":"markdown","aab54bff":"markdown","629f0836":"markdown","f58f57bb":"markdown","486f7cf9":"markdown","2b6a62f6":"markdown","0279e49d":"markdown","da09db38":"markdown"},"source":{"a2aef54a":"# import python library\nimport pandas as pd","2fadf239":"# For Connect to Postgresql\n# assign a variable that contains a string of your credentials\ncredentials = \"postgresql:\/\/username:password@your_sql_connection_url:port_number\/database_name\"","7ebf72bf":"# read in your SQL query results using pandas\ndataframe = pd.read_sql(\"\"\"\n            ELECT column_1, column_2\n            FROM Table\n            WHERE column_1 > number\n            ORDER BY column_1\n            \"\"\", con = credentials)\n# return your first five rows\ndataframe.head()","10d8a0e9":"import pyodbc","75009b4d":"# Before launching, change the server name and table name to your!\n# You must also specify the username and password for connecting to the database in the parameters, if necessary.","fdff3d86":"Server = 'Server_Name\\SQL_Domain_Name'\nDB = 'Data Science'\nconnection = pyodbc.connect('DRIVER={SQL Server}; SERVER=' + Server + '; DATABASE=' + DB + '; Trusted_Connection=yes')","0b5aaad1":"query_SQLTable = \"SELECT * FROM SQLTable_Name\"\nSQLTable = pd.read_sql(query_SQLTable, connection)\nSQLTable.head()","ae2aab8e":"# Perhaps this code will not run on Kaggle due to the specialty of its work,\n# then you will need to download this code and run it on your computer.","60ec823e":"import sqlite3","730dab66":"# Creating connection\ndatabase_connection = sqlite3.connect(\"..\/input\/soccer\/database.sqlite\")","c56496e7":"tables = pd.read_sql(\"\"\"SELECT *\n                        FROM sqlite_master\n                        WHERE type='table';\"\"\", database_connection)\ntables","20739a9f":"countries = pd.read_sql_query(\"SELECT * FROM Country\", database_connection)\nleagues = pd.read_sql_query(\"SELECT * FROM League\", database_connection)\nmatches = pd.read_sql_query(\"SELECT * FROM Match\", database_connection)\nplayers = pd.read_sql_query(\"SELECT * FROM Player\", database_connection)\nplayer_attr = pd.read_sql_query(\"SELECT * FROM Player_Attributes\", database_connection)\nteams = pd.read_sql_query(\"SELECT * FROM Team\", database_connection)\nteam_attr = pd.read_sql_query(\"SELECT * FROM Team_Attributes\", database_connection)","154cb985":"countries","da8558f2":"country_leagues = pd.read_sql(\"\"\"SELECT *\n                        FROM League\n                        JOIN Country ON Country.id = League.country_id;\"\"\", database_connection)\ncountry_leagues","a6bdb14c":"detailed_matches = pd.read_sql(\"\"\"SELECT Match.id, \n                                        Country.name AS country_name, \n                                        League.name AS league_name, \n                                        season, \n                                        stage, \n                                        date,\n                                        HT.team_long_name AS  home_team,\n                                        AT.team_long_name AS away_team,\n                                        home_team_goal, \n                                        away_team_goal                                        \n                                FROM Match\n                                JOIN Country on Country.id = Match.country_id\n                                JOIN League on League.id = Match.league_id\n                                LEFT JOIN Team AS HT on HT.team_api_id = Match.home_team_api_id\n                                LEFT JOIN Team AS AT on AT.team_api_id = Match.away_team_api_id\n                                WHERE country_name = 'Spain'\n                                ORDER by date\n                                LIMIT 15;\"\"\", database_connection)\ndetailed_matches","ce380a5f":"# Example\nIn this example, I will be using a mock database to serve as a storage environment that a SQL query will reference.\n\n* database\/SQL environment \u2014 PostgreSQL\n* username:password\n* data warehouse: database URL (IP address)\n* port number\n* database name\n\nfor connect to SQL Server\n\n* Server = 'Server_Name\\SQL_Domain_Name'\n* DB = 'Data Science'\n\n","71c8301c":"# **For Connect to Postgresql**","b6ce6659":"**List of Country**","ec83679c":"# Tools","aab54bff":"# **For Access the Database with the sqlite3 Package**\n\nKaggle supports database files using the lightweight SQLite format. SQLite databases consist of multiple tables, each of which contains data in tabular format. These tables support large datasets better than CSV files do, but are otherwise similar in practice.\n\nThe Data tab represents each table in a database separately. Like CSV files, SQLite tables will be fully populated by \u201cColumn Metadata\u201d and \u201cColumn Metrics\u201d sections.\n\n\u201cEuropean Soccer Database\u201d is an example of a great SQLite-type Dataset.\n\nI use soccer database for access the database with the sqlite3","629f0836":"**List of Matches**","f58f57bb":"# Introduction","486f7cf9":"# **For Connect to SQL Server**\n\n**Need to connect Python to SQL Server using *pyodbc***","2b6a62f6":"As a data scientist, you may oftentimes have to pull data from a database table. This first step in gathering your dataset in the modeling process is commonly acquired from the results of SQL code. SQL is not usually the main language required to be a data scientist; however, it is important to practice and utilize for obtaining your dataset in some scenarios. There are some problems, though \u2014 going back and forth with your Python code, SQL, and sometimes, Jupyter Notebook, can be aggravating. There is a very simple process that helps to solve this issue. The solution is to write your SQL query in your Jupyter Notebook, then save that output by converting it to a pandas dataframe. Below, I will supply code and an example that displays this easy and beneficial process.","0279e49d":"There are several key tools that make up this process. First, you will use the SQL query that you already originally had, then, using Python, will reference the pandas library for converting the output into a dataframe, all in your Jupyter Notebook.\n\n**SQL** \u2014 Structured query language, most data analysts and data warehouse\/database engineers use this language to pull data for reports and dataset development.\n\n> --return all columns from table\n>\n> SELECT * FROM TABLE\n\n**Python** \u2014 one of the main programming languages used by data scientists.\n\n> #display text\n>\n> print('Hello, world!')\n\n**Pandas** \u2014 a popular library used by data scientists to read in data from various sources. Static data can be read in as a CSV file. A live SQL connection can also be connected using pandas that will then be converted in a dataframe from its output. It is explained below in the example.\n\n> #creating and renaming a new a pandas dataframe column\n>\n> df['new_column_name'] = df['original_column_name']\n\n**Jupyter Notebook** \u2014 a platform\/environment to run your Python code (as well as SQL) for your data science model.","da09db38":"**list of countries and league**"}}