{"cell_type":{"f065ca4c":"code","e24ffb09":"code","bd9e297f":"code","1f814e36":"code","532ba8dd":"markdown"},"source":{"f065ca4c":"import pandas as pd \nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\nimport IPython.display \nfrom datetime import datetime, timedelta\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\ndf = pd.read_csv(\"\/kaggle\/input\/reportvaccinianticovid19\/italy_vaccine_doses.csv\")\ndf[\"timestamp\"] = pd.to_datetime ( df[\"timestamp\"]   )\ndf = df.sort_values(by=[\"timestamp\",\"region\"]).reset_index(drop=True)\ndf[\"day\"] = df[\"timestamp\"].map( lambda x: str(x)[:10] )\n\ndf[\"region\"] = df[\"region\"].map(lambda x: str(x).strip())\ndf[\"region\"] = df[\"region\"].map(lambda x: str(x).replace(\"-\",\" \"))\n\ndf = df.sort_values(by=[\"region\",\"timestamp\"]).reset_index(drop=True)\n\ndf = df.drop_duplicates([\"day\",\"region\"], keep=\"last\") \npopulation =  pd.read_csv(\"\/kaggle\/input\/reportvaccinianticovid19\/italy_population.csv\")\npopulation[\"region\"] = population[\"region\"].map(lambda x: str(x).replace(\"-\",\" \"))\n\ndf = df.merge (population, on=\"region\", how=\"left\")\ndf = df.rename (columns = { 'total':'total_population' })\n\ndf [\"perc_administered_received\"] = df[\"administered\"]\/df[\"received\"]\ndf [\"perc_administered_total\"] = df[\"administered\"]\/df[\"total_population\"]\ndf [\"perc_received_total\"] = df[\"received\"]\/df[\"total_population\"]\n\nlast_update_timestamp = df[\"timestamp\"].max()\n\nIPython.display.Image(\"\/kaggle\/input\/reportvaccinianticovid19\/screenshot.png\", width=800, height=500)","e24ffb09":"fig, axes = plt.subplots(nrows=6, ncols=4, figsize=(12,10), sharex=True, sharey=False,)\n\naxes_flat = axes.flat\n\n\nfor i,region in enumerate(df[\"region\"].unique()):\n    d = df.query(\"region == @region\")\n    \n    axes_flat[i+3].plot(d[\"day\"],d[\"administered\"], color='tab:green')\n    axes_flat[i+3].plot(d[\"day\"],d[\"received\"], color='tab:orange')\n    \n    #axes_flat[i+3].xaxis.set_minor_locator(ticker.NullLocator())\n    #axes_flat[i+3].xaxis.set_major_locator(ticker.MaxNLocator(5))\n    \n    axes_flat[i+3].tick_params(axis='x', rotation=90)\n    axes_flat[i+3].title.set_text(region)\n\n\nd = df.groupby(\"day\")[\"administered\",\"received\",\"total_population\"].sum().reset_index()\ntotal_administered = d[\"administered\"].values[-1:][0]\ntotal_received = d[\"received\"].values[-1:][0]\ntotal_population = d[\"total_population\"].values[-1:][0]\n\nl1, = axes_flat[2].plot(d[\"day\"],d[\"administered\"], color='tab:green')\nl2, = axes_flat[2].plot(d[\"day\"],d[\"received\"], color='tab:orange')\naxes_flat[2].tick_params(axis='x', rotation=90)\naxes_flat[2].title.set_text(\"Italia\")\n\naxes_flat[2].xaxis.set_minor_locator(ticker.NullLocator())\naxes_flat[2].xaxis.set_major_locator(ticker.MaxNLocator(8))\n\n\n\naxes_flat[0].axis('off')\naxes_flat[1].axis('off')\n\naxes_flat[0].text(0,1.0, ' Administered\/Received   ',\n                fontsize = 14,zorder = 6,color = 'k', \n                bbox={'facecolor':'silver', 'alpha':0.5, 'pad':4})\n\naxes_flat[0].text(0,0.7, f'{last_update_timestamp}',\n                fontsize = 10,zorder = 6,color = 'k', \n                bbox={'edgecolor':'white', 'facecolor':'white', 'pad':4})\n\naxes_flat[0].text(0,0.5, f'Admin.:{total_administered:,}',\n                fontsize = 10,zorder = 6,color = 'k', \n                bbox={'edgecolor':'white', 'facecolor':'white', 'pad':4})\n\naxes_flat[0].text(0,0.3, f'Received:{total_received:,}',\n                fontsize = 10,zorder = 6,color = 'k', \n                bbox={'edgecolor':'white', 'facecolor':'white', 'pad':4})\naxes_flat[1].legend(handles =(l1, l2), labels=('Administered', 'Received'), loc=\"upper center\", frameon=False)\n\n#handles, labels = axes_flat[0].get_legend_handles_labels()\n#fig.legend(handles, labels, loc='upper left')\n\nplt.tight_layout()\nplt.show()","bd9e297f":"import matplotlib.ticker as mtick\nimport matplotlib.patches as mpatches\n\nfig, axes = plt.subplots(nrows=6, ncols=4, figsize=(12,10), sharex=True, sharey=True,)\n\naxes_flat = axes.flat\n\n\n\n\nfor i,region in enumerate(df[\"region\"].unique()):\n    d = df.query(\"region == @region\")\n    \n    axes_flat[i+3].plot(d[\"day\"],100*d[\"perc_administered_received\"], color='tab:gray')\n    axes_flat[i+3].plot(d[\"day\"],100*d[\"perc_received_total\"], color='tab:blue')\n    axes_flat[i+3].yaxis.set_major_formatter(mtick.PercentFormatter())\n\n    axes_flat[i+3].tick_params(axis='x', rotation=90)\n    axes_flat[i+3].title.set_text(region)\n\n\nd = df.groupby(\"day\")[\"administered\",\"received\"].sum().reset_index()\nd = df.groupby(\"day\")[\"administered\",\"received\",\"total_population\"].sum().reset_index()\nd [\"perc_administered_received\"] = d[\"administered\"]\/d[\"received\"]\nd [\"perc_administered_total\"] = d[\"administered\"]\/d[\"total_population\"]\nd [\"perc_received_total\"] = d[\"received\"]\/d[\"total_population\"]\n\nreceived = d[\"perc_administered_received\"].values[-1:][0]*100\ntotal = d[\"perc_administered_total\"].values[-1:][0]*100\n\n\nl1, = axes_flat[2].plot(d[\"day\"],100*d[\"perc_administered_received\"], color='tab:gray')\nl2, = axes_flat[2].plot(d[\"day\"],100*d[\"perc_received_total\"], color='tab:blue')\naxes_flat[2].tick_params(axis='x', rotation=90)\naxes_flat[2].yaxis.set_major_formatter(mtick.PercentFormatter())\naxes_flat[2].title.set_text(\"Italia\")\n\naxes_flat[2].xaxis.set_minor_locator(ticker.NullLocator())\naxes_flat[2].xaxis.set_major_locator(ticker.MaxNLocator(8))\n\n\naxes_flat[0].axis('off')\naxes_flat[1].axis('off')\n\naxes_flat[0].text(0,100.0, ' % Administered     ',\n                fontsize = 14,zorder = 6,color = 'k', \n                bbox={'facecolor':'silver', 'alpha':0.5, 'pad':4})\n\naxes_flat[0].text(0,60, f'{last_update_timestamp}',\n                fontsize = 10,zorder = 6,color = 'k', \n                bbox={'edgecolor':'white', 'facecolor':'white', 'pad':4})\n\naxes_flat[0].text(0,40, f'Admin.\/Received:{received:.2f}%',\n                fontsize = 10,zorder = 6,color = 'k', \n                bbox={'edgecolor':'white', 'facecolor':'white', 'pad':4})\n\naxes_flat[0].text(0,20, f'Admin.\/Total Pop.:{total:.2f}%',\n                fontsize = 10,zorder = 6,color = 'k', \n                bbox={'edgecolor':'white', 'facecolor':'white', 'pad':4})\n\n\naxes_flat[1].legend(handles =(l1, l2), labels=('% Administered \/ Received', '% Administered \/ Total Pop.' ), loc=\"upper center\", frameon=False)\n\nplt.tight_layout()\nplt.show()","1f814e36":"perc_population = 100*total_administered\/total_population\n\ndate_0 = datetime.strptime(\"07\/01\/2021\", '%d\/%m\/%Y')\ndate_1 = last_update_timestamp.to_pydatetime()\n\ndays =(date_1 - date_0).days\ndays = int((0.5*total_population\/total_administered) * 7)\ndate_1 = date_1 +  timedelta(days=days)\nprev_date = date_1.strftime(\"%Y-%m-%d\")\n\nprint(f\"last update: {last_update_timestamp}\\ntotal adminstered: {total_administered:,}, received: {total_received:,}\")\nprint(f\"population: {total_population:,}, administered\/population: {perc_population:.1f}%\")\nprint(\"\")\nprint(f\"50% administered\/population -> {days} days, {prev_date}\")\ndf = df.drop_duplicates(\"region\", keep=\"last\").reset_index(drop=True)[[\"region\",\"administered\",\"received\",\"total_population\",\"perc_administered_received\",\"perc_administered_total\",\"perc_received_total\"]]\n\n\nformat_dict = {'administered':'{:,}', 'received':'{:,}',  'total_population':'{:,}',  \n               'perc_administered_received': '{:.1%}',\n               'perc_administered_total': '{:.1%}',\n               'perc_received_total': '{:.1%}',\n              }\ndf.style.format(format_dict).hide_index()\n","532ba8dd":"\nSource for vaccination data:\n[Report Vaccini Anti COVID-19 ](https:\/\/www.governo.it\/it\/cscovid19\/report-vaccini\/)\n\n\nHistorical data:\nhttps:\/\/www.kaggle.com\/steubk\/reportvaccinianticovid19\n\nSource for population data: \n[Dati IStat:Popolazione residente  al 1\u00b0 gennaio](http:\/\/dati.istat.it\/Index.aspx?DataSetCode=DCIS_POPRES1)\n"}}