{"cell_type":{"dc03ab2b":"code","6f9c5184":"code","e77f850a":"code","08afd579":"code","f63d1c32":"code","cb70ba61":"code","45d887bb":"code","b27ca1bd":"code","2fe8ae75":"code","cb319e73":"code","32f3bea3":"code","db332a93":"code","41d680d0":"code","ac6678f8":"code","7cfbe1f4":"code","337c740b":"code","76b5f607":"code","f7ac22fb":"code","1b214c29":"code","6d20a6c4":"code","eae6faa5":"code","aa9c31db":"code","23600d70":"code","f55ad484":"code","976e83bb":"code","6f3f5eae":"code","afe76155":"code","b865999e":"code","50002119":"code","9472f2aa":"code","0a7b8c05":"code","9048e071":"code","2c213681":"code","ac0d6d82":"code","d0411a1b":"code","e6d26b4e":"code","91e21f75":"code","b80b246b":"code","c5837455":"markdown","439bae64":"markdown","bdbfe074":"markdown","20120333":"markdown","9ca96dd7":"markdown","54f29e74":"markdown"},"source":{"dc03ab2b":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np","6f9c5184":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","e77f850a":"train[\"Fsize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"Fsize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","08afd579":"train['IsAlone'] = 1 #initialize to yes\/1 is alone\ntrain['IsAlone'].loc[train['Fsize'] > 1] = 0 # now update to no\/0 if family size is greater than 1\ntest['IsAlone'] = 1 #initialize to yes\/1 is alone\ntest['IsAlone'].loc[test['Fsize'] > 1] = 0 # now update to no\/0 if family size is greater than 1","f63d1c32":"train_title = [i.split(\",\")[1].split(\".\")[0].strip() for i in train[\"Name\"]]\ntrain[\"Title\"] = pd.Series(train_title)\ntrain[\"Title\"].head()","cb70ba61":"test_title = [i.split(\",\")[1].split(\".\")[0].strip() for i in test[\"Name\"]]\ntest[\"Title\"] = pd.Series(test_title)\ntest[\"Title\"].head()","45d887bb":"# Convert to categorical values Title \ntrain[\"Title\"] = train[\"Title\"].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ntrain[\"Title\"] = train[\"Title\"].map({\"Master\":0, \"Miss\":1, \"Ms\" : 1 , \"Mme\":1, \"Mlle\":1, \"Mrs\":1, \"Mr\":2, \"Rare\":3})\ntrain[\"Title\"] = train[\"Title\"].astype(int)","b27ca1bd":"# Convert to categorical values Title \ntest[\"Title\"] = test[\"Title\"].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ntest[\"Title\"] = test[\"Title\"].map({\"Master\":0, \"Miss\":1, \"Ms\" : 1 , \"Mme\":1, \"Mlle\":1, \"Mrs\":1, \"Mr\":2, \"Rare\":3})\ntest[\"Title\"] = test[\"Title\"].astype(int)","2fe8ae75":"train['Single'] = train['Fsize'].map(lambda s: 1 if s == 1 else 0)\ntrain['SmallF'] = train['Fsize'].map(lambda s: 1 if  s == 2  else 0)\ntrain['MedF'] = train['Fsize'].map(lambda s: 1 if 3 <= s <= 4 else 0)\ntrain['LargeF'] = train['Fsize'].map(lambda s: 1 if s >= 5 else 0)","cb319e73":"test['Single'] = test['Fsize'].map(lambda s: 1 if s == 1 else 0)\ntest['SmallF'] = test['Fsize'].map(lambda s: 1 if  s == 2  else 0)\ntest['MedF'] = test['Fsize'].map(lambda s: 1 if 3 <= s <= 4 else 0)\ntest['LargeF'] = test['Fsize'].map(lambda s: 1 if s >= 5 else 0)","32f3bea3":"train.head()","db332a93":"test.head()","41d680d0":"g = sns.heatmap(train[[\"Survived\",\"Pclass\",\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Sex\",\"Cabin\",\"Embarked\",\"Fsize\",\"IsAlone\",\"Title\",\"Single\"]].corr(),annot=True, fmt = \".2f\", cmap = \"coolwarm\")","ac6678f8":"test_passid = test['PassengerId']","7cfbe1f4":"train.drop([\"Name\",\"Ticket\",\"Cabin\"], axis=1, inplace=True)\ntest.drop([\"Name\",\"Ticket\",\"Cabin\"], axis=1, inplace=True)","337c740b":"# Age\u306e\u7a74\u57cb\u3081(\u4e2d\u592e\u5024)\ntrain[\"Age\"] = train[\"Age\"].fillna(train[\"Age\"].median())\ntest[\"Age\"] = test[\"Age\"].fillna(test[\"Age\"].median())\n# Embarked\u306f\u6700\u983b\u5024\u3067\u3042\u308bS\u3092\u4ee3\u5165\ntrain[\"Embarked\"] = train[\"Embarked\"].fillna(\"S\")\n# Fare\u306e\u7a74\u57cb\u3081(\u4e2d\u592e\u5024)\ntest[\"Fare\"] = test[\"Fare\"].fillna(test[\"Fare\"].median())","76b5f607":"train.head()","f7ac22fb":"test.head()","1b214c29":"train.drop([\"SibSp\",\"Parch\"], axis=1, inplace=True)\ntest.drop([\"SibSp\",\"Parch\"], axis=1, inplace=True)","6d20a6c4":"train.head()","eae6faa5":"test.head()","aa9c31db":"# \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570(Sex,Embarked)\u3092\u30c0\u30df\u30fc\u5909\u6570\u3067\u8868\u793a\ntrain = train.join(pd.get_dummies(train[\"Sex\"],prefix=\"sex\"))\ntest = test.join(pd.get_dummies(test[\"Sex\"],prefix=\"sex\"))\n\ntrain = train.join(pd.get_dummies(train[\"Embarked\"],prefix=\"emberk\"))\ntest = test.join(pd.get_dummies(test[\"Embarked\"],prefix=\"emberk\"))\n","23600d70":"train = train.join(pd.get_dummies(train[\"Title\"],prefix=\"title\"))\ntest = test.join(pd.get_dummies(test[\"Title\"],prefix=\"title\"))","f55ad484":"# \u4f7f\u7528\u5f8c\u306e\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u524a\u9664\ntrain.drop([\"Sex\", \"Embarked\",\"Title\",\"Fsize\"], axis=1, inplace=True)\ntest.drop([\"Sex\", \"Embarked\",\"Title\",\"Fsize\"], axis=1, inplace=True)","976e83bb":"train.head()","6f3f5eae":"test.head()","afe76155":"# PassengerId\u3092\u524a\u9664\ntrain.drop(\"PassengerId\", axis=1, inplace=True)\ntest.drop(\"PassengerId\", axis=1, inplace=True)","b865999e":"X_train = train.drop(['Survived'], axis=1) # X_train\u306ftrain\u306eSurvived\u5217\u4ee5\u5916\nY_train = train['Survived'] # Y_train\u306ftrain\u306eSurvived\u5217","50002119":"train.head()","9472f2aa":"test.head()","0a7b8c05":"import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import accuracy_score","9048e071":"X_train","2c213681":"Y_train","ac0d6d82":"train_x, valid_x, train_y, valid_y = train_test_split(X_train, Y_train, test_size=0.4, random_state=0)","d0411a1b":"gbm = lgb.LGBMClassifier(objective='binary')","e6d26b4e":"gbm.fit(train_x, train_y, eval_set = [(valid_x, valid_y)], \n        early_stopping_rounds=20, # 20\u56de\u9023\u7d9a\u3066\u3099loss\u304b\u3099\u4e0b\u304b\u3099\u3089\u306a\u304b\u3063\u305f\u3089\u7d42\u4e86 \n        verbose=10 # 10round\u6bce\u306b\u3001loss\u3092\u8868\u793a\n)","91e21f75":"# valid_x\u306b\u3064\u3044\u3066\u63a8\u8ad6\noof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\nprint(round(accuracy_score(valid_y, oof)*100,2))","b80b246b":"gbm_pred = gbm.predict(test, num_iteration=gbm.best_iteration_) \ngbm_submit = pd.DataFrame({\n        \"PassengerId\": test_passid,\n        \"Survived\": gbm_pred\n    })\ngbm_submit.to_csv(\"gbm_submission.csv\", index=False)\n\ngbm_submit.to_csv('gbm_submission.csv', index=False)","c5837455":"SibSp\u3001Parch\u306e\u9805\u76ee\u304b\u3089\u3001Fsize\u306e\u9805\u76ee\u3092\u8ffd\u52a0","439bae64":"https:\/\/www.kaggle.com\/kenkenf\/titanic-tutorial-solution1-rf-pred\n\n\u3053\u3061\u3089\u306e\u30ab\u30fc\u30cd\u30eb\u304b\u3089\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u65bd\u7b56\u3092\u5b9f\u65bd\u3002\n\n### \u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306e\u65bd\u7b56\n* \u3082\u3068\u306e\u7cbe\u5ea6\u304c\u7d0470%\n\n\n* Solution 1:\u30c7\u30fc\u30bf\u3092\u5909\u66f4\n - FamilySize\u3092\u8ffd\u52a0(SibSp,Parch\u304b\u3089)\n - IsAlone\u306e\u9805\u76ee\u3092\u8ffd\u52a0\n - Name\u306e\u50be\u5411\u3092\u8aad\u307f\u53d6\u308b(Mr,Ms\u306a\u3069\u3092\u5206\u985e)\n - Fsize\u3092\u5206\u985e\n* Solution 2:\u30e2\u30c7\u30eb\u3092\u5909\u66f4\n - LightGBR\u3092\u4f7f\u7528","bdbfe074":"\u30e2\u30c7\u30eb\u306bLightGBM\u3092\u4f7f\u7528","20120333":"Fsize\u304b\u3089IsAlone\u306e\u9805\u76ee\u3092\u8ffd\u52a0","9ca96dd7":"Fsize\u304b\u3089\u5206\u985e","54f29e74":"\u540d\u524d\u306b\u3064\u3051\u308b\u656c\u79f0\u304b\u3089Title\u306e\u9805\u76ee\u3092\u8ffd\u52a0"}}