{"cell_type":{"8ddda471":"code","fd8beaa9":"code","f5f3b162":"code","fe23ad22":"code","efb8da4a":"code","cd26e713":"code","9db8bbb4":"code","85e2d8cf":"markdown","962c5f64":"markdown","b5b6ea5a":"markdown","4ed14893":"markdown","63fc331c":"markdown"},"source":{"8ddda471":"!pip install openpyxl","fd8beaa9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport openpyxl\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport missingno\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n#matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f5f3b162":"df = pd.read_excel(\"..\/input\/average-yearly-temperature-of-cities-in-pakistan\/AVGTempPak.xlsx\", engine=\"openpyxl\")","fe23ad22":"# set identifier \"City_name\" as string\ndf['City_name'] = df['City_name'].astype('str')\n# set categorical data\ndf['Range'] = df['Range'].astype('category')","efb8da4a":"def eda(df):\n    # check that input is pandas dataframe\n    if type(df) != pd.core.frame.DataFrame:\n        raise TypeError(\"Only pandas dataframe is allowed as input\")\n        \n    # replace field that's entirely space (or empty) with NaN\n    df = df.replace(r'^\\s*$', np.nan, regex=True)\n    print(\"Preview of data:\")\n    #display(df.head.unique())\n    display(df.head(48))\n\n    print(df.info())\n\n    # generate preview of entries with null values\n    if df.isnull().any(axis=None):\n        print(\"\\nPreview of data with null values:\")\n        display(df[df.isnull().any(axis=1)].head(3))\n        missingno.matrix(df)\n        plt.show()\n\n    # generate count statistics of duplicate entries\n    if len(df[df.duplicated()]) > 0:\n        print(\"\\n***Number of duplicated entries: \", len(df[df.duplicated()]))\n        display(df[df.duplicated(keep=False)].sort_values(by=list(df.columns)).head())\n    else:\n        print(\"\\nNo duplicated entries found\")\neda(df)","cd26e713":"def numeric_eda(df, hue=None):\n    \"\"\"Given dataframe, generate EDA of numeric data\"\"\"\n    print(\"\\nTo check: \\nDistribution of numeric data\")\n    display(df.describe().T)\n    columns = df.select_dtypes(include=np.number).columns\n    figure = plt.figure(figsize=(20, 10))\n    figure.add_subplot(1, len(columns), 1)\n    for index, col in enumerate(columns):\n        if index > 0:\n            figure.add_subplot(1, len(columns), index + 1)\n        sns.boxplot(y=col, data=df, boxprops={'facecolor': 'None'})\n    figure.tight_layout()\n    plt.show()\n    \n    if len(df.select_dtypes(include='category').columns) > 0:\n        for col_num in df.select_dtypes(include=np.number).columns:\n            for col in df.select_dtypes(include='category').columns:\n                fig = sns.catplot(x=col, y=col_num, kind='violin', data=df, height=5, aspect=2)\n                fig.set_xticklabels(rotation=90)\n            plt.show()\nnumeric_eda(df)","9db8bbb4":"def cities_monthly_temp(df):\n    if len(df.select_dtypes(include='object').columns) > 0:\n        for col_num in df.select_dtypes(include=np.number).columns:\n            for col in df.select_dtypes(include=['object']).columns:\n                fig = px.line(df, x=col, y=col_num, color='City_name',\n                title='City Names with Temperature' , width=900, height=400)\n            fig.show()\ncities_monthly_temp(df)","85e2d8cf":"# Setting Data Types\nSetting the data types correctly can aid us in our data science processes. There are three common types of data type (categorical, numeric and datetime) and we have different EDA procedures for each of them.\nWe changed the data types in the following way:\n* Set the identifier City_name as string.\n* For columns that are categorical (columns that take on a limited, and usually fixed, number of possible values), we set their type as \u201ccategory\u201d. E.g., gender, blood type and country are all categorical data.\n* For columns that are numeric, we can either set their type as \u201cint64\u201d (integer) or \u201cfloat64\u201d (floating point number). E.g., sales, temperatures and number of people etc. are all numeric data.\n* Set Date as \u201cdatetime64\u201d data type.","962c5f64":"# Function for Numeric EDA\nIn this function we'll be checking distribution of numeric data","b5b6ea5a":"# Function for plotting avg. temperature of each city in each month","4ed14893":"# Loading Dataset","63fc331c":"# Function for Dataset EDA\n**In this function we'll:**\n* Preview data\n* Check total number of entries\n* Check Column types\n* Check for any null entries\n* Check for any duplicated entries"}}