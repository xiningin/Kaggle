{"cell_type":{"0b1ce448":"code","0f0ba6b9":"code","5bdc85d6":"code","d789da56":"code","2d581c7b":"code","ae2c6e5c":"code","49096068":"code","44bd551e":"code","ac0cd905":"code","f62870b1":"code","be1f6c36":"code","911368df":"code","d8922796":"code","06e6ac70":"code","17638c75":"code","6f213523":"code","e5988b98":"code","88d05a60":"code","f7aeec5e":"code","86fd5b5d":"code","971fdcee":"code","5d4759a6":"code","bdc73f5b":"code","6c5b91f3":"code","a6a695ff":"code","8ee67578":"code","6a88c267":"code","3fa30c38":"markdown","d92a72e0":"markdown","d67d5150":"markdown","1388ca58":"markdown","33d3221f":"markdown","6954c553":"markdown","8ad91325":"markdown","1cc61c98":"markdown","e6bee194":"markdown","942acd81":"markdown","4f11f6e8":"markdown","c637da11":"markdown","15cfafa4":"markdown","05967920":"markdown"},"source":{"0b1ce448":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0f0ba6b9":"data = pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')","5bdc85d6":"data.head()","d789da56":"data.isnull().sum().sum()","2d581c7b":"import matplotlib.pyplot as plt\nimport seaborn as sns","ae2c6e5c":"data.columns","49096068":"data.odor.value_counts().plot(kind='bar', figsize=(9,5), color='green')\nplt.ylabel('count', fontsize=12)\nplt.xlabel('odor', fontsize=12)\nplt.title('odor count')","44bd551e":"data.population.value_counts().plot(kind='bar', figsize=(9,5), color='orange')\nplt.ylabel('count', fontsize=12)\nplt.xlabel('population', fontsize=12)\nplt.title('Population count')","ac0cd905":"data['class'].value_counts().plot(kind='bar', figsize=(9,5), color='purple')\nplt.ylabel('count', fontsize=12)\nplt.xlabel('class', fontsize=12)\nplt.title('Number of poisonous\/edible mushrooms')","f62870b1":"data.dtypes","be1f6c36":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\nfor col in data.columns:\n    data[col] = le.fit(data[col]).transform(data[col])","911368df":"data.dtypes","d8922796":"from sklearn.metrics import accuracy_score as asc","06e6ac70":"x = data.drop(['class'], axis=1)\ny = data['class']","17638c75":"x.shape, y.shape","6f213523":"from sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.25)\nxtrain.shape, xtest.shape, ytrain.shape, ytest.shape","e5988b98":"model_name = []\nscore = []\ntype = []","88d05a60":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(xtrain, ytrain)","f7aeec5e":"score.append(dtree.score(xtrain, ytrain))\nmodel_name.append('DecisionTree')\ntype.append('train data')","86fd5b5d":"yhat = dtree.predict(xtest)","971fdcee":"score.append(asc(yhat, ytest))\nmodel_name.append('DecisionTree')\ntype.append('test data')","5d4759a6":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(xtrain, ytrain)","bdc73f5b":"score.append(rfc.score(xtrain, ytrain))\nmodel_name.append('RandomForest')\ntype.append('train data')","6c5b91f3":"yhat = rfc.predict(xtest)","a6a695ff":"score.append(asc(yhat, ytest))\nmodel_name.append('RandomForest')\ntype.append('test data')","8ee67578":"result = pd.DataFrame()\nresult['model'] = model_name\nresult['score'] = score\nresult['type'] = type","6a88c267":"result","3fa30c38":"> ## Data Visualization","d92a72e0":"### Decision Tree","d67d5150":"> ## Models","1388ca58":"##### Let's split the data","33d3221f":"#### Data loading","6954c553":"> ## Lebel Encoding","8ad91325":"##### No null values","1cc61c98":"### So we can see that all algorithms are predicting the perfect score.","e6bee194":"> ## Data preprocessing","942acd81":"##### We will use the below lists to collect all the data together for future reference. Check result dataset at the end of the notebook to understand.","4f11f6e8":"### Random Forest","c637da11":"> ## Data Modeling","15cfafa4":"##### All data types are of object type so we will label encode it to covert it to integer type.","05967920":"#### Hi all, this is a simple and explanable represention of Mushroom data.\n##### Refer this notebook if you are a beginner in data science."}}