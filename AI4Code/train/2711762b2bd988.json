{"cell_type":{"d25d315c":"code","1c04d95f":"code","8e84c932":"code","28ef7a92":"code","fbefeb5e":"code","25367ea1":"code","696d1222":"code","dec7c0f2":"code","a6a193e2":"code","3a6edc09":"code","7cbf4fdb":"code","0dc1b600":"code","d409f4b5":"code","5f7160ee":"code","cdf2dd14":"code","2fa11e8f":"code","86ffde4a":"code","e5dbfad4":"code","6745a79a":"code","fc3cde24":"code","667cb75b":"code","a3ef102a":"code","42c1c8e6":"code","6134cfac":"code","73643b9d":"code","ea0b3ce9":"code","95d3edd7":"code","ab6c217c":"code","02d9c3b8":"code","6c5cd89a":"code","ad3e9d1a":"code","6036cbef":"code","572d7c58":"code","220673a2":"code","b6909ad1":"code","6608ba88":"code","383c04e7":"code","99cef7fd":"code","4bf3e901":"code","4fa2ac87":"code","d3bcaf44":"code","64d341b5":"code","acc4543f":"code","ee1473db":"code","293f4147":"code","af3223f1":"code","029c56fe":"code","a30f021a":"code","ae568831":"code","a724e885":"code","e70b8756":"code","0c9ee000":"code","f91fdd03":"code","732f86c0":"markdown","5af8eb19":"markdown","9e389665":"markdown","7de65b28":"markdown","7d511f8d":"markdown","eb176d72":"markdown","b98f270d":"markdown","1f0203a2":"markdown","4c4faec2":"markdown","8a1ab16c":"markdown","931fb28b":"markdown","1a94683a":"markdown"},"source":{"d25d315c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n'''import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))'''\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c04d95f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","8e84c932":"df=pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","28ef7a92":"df","fbefeb5e":"df.head(10)","25367ea1":"df.info()","696d1222":"df.shape","dec7c0f2":"df.columns","a6a193e2":"df.tail(5)","3a6edc09":"df.isnull().sum()","7cbf4fdb":"df=df.drop(['Unnamed: 32'],axis=1)\ndf=df.drop(['id'],axis=1)","0dc1b600":"df.head(5)","d409f4b5":"y=df[['diagnosis']]","5f7160ee":"y","cdf2dd14":"x=df.drop(['diagnosis'],axis=1)","2fa11e8f":"x","86ffde4a":"y=pd.get_dummies(y['diagnosis'],drop_first=True)","e5dbfad4":"y","6745a79a":"from sklearn.model_selection import train_test_split","fc3cde24":"xtrain,xtest,ytrain,ytest=train_test_split(x,y, test_size=0.25,random_state=0)","667cb75b":"xtest","a3ef102a":"ytest","42c1c8e6":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import average_precision_score, precision_recall_curve\nfrom sklearn.metrics import auc, plot_precision_recall_curve\nfrom sklearn import metrics","6134cfac":"clf=DecisionTreeClassifier()","73643b9d":"clf=clf.fit(xtrain,ytrain)","ea0b3ce9":"pred1=clf.predict(xtest)","95d3edd7":"pred1","ab6c217c":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred1))\nprint(\"Precision:\",metrics.precision_score(ytest, pred1))\nprint(\"Recall:\",metrics.recall_score(ytest, pred1))","02d9c3b8":"cnf_matrix = metrics.confusion_matrix(ytest, pred1)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","6c5cd89a":"y_pred_proba = clf.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","ad3e9d1a":"average_precision = average_precision_score(ytest, pred1)\nprint(average_precision)\ndisp = plot_precision_recall_curve(clf, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","6036cbef":"from sklearn.linear_model import LogisticRegression","572d7c58":"logreg=LogisticRegression()","220673a2":"logreg.fit(xtrain,ytrain)","b6909ad1":"pred2=logreg.predict(xtest)","6608ba88":"pred2","383c04e7":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred2))\nprint(\"Precision:\",metrics.precision_score(ytest, pred2))\nprint(\"Recall:\",metrics.recall_score(ytest, pred2))","99cef7fd":"cnf_matrix = metrics.confusion_matrix(ytest, pred2)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","4bf3e901":"y_pred_proba = logreg.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","4fa2ac87":"average_precision = average_precision_score(ytest, pred2)\nprint(average_precision)\ndisp = plot_precision_recall_curve(logreg, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","d3bcaf44":"from sklearn.ensemble import RandomForestClassifier","64d341b5":"ran=RandomForestClassifier(n_estimators=100)","acc4543f":"ran.fit(xtrain,ytrain)","ee1473db":"pred3=ran.predict(xtest)","293f4147":"pred3","af3223f1":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred3))\nprint(\"Precision:\",metrics.precision_score(ytest, pred3))\nprint(\"Recall:\",metrics.recall_score(ytest, pred3))","029c56fe":"cnf_matrix = metrics.confusion_matrix(ytest, pred2)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","a30f021a":"y_pred_proba = ran.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","ae568831":"average_precision = average_precision_score(ytest, pred3)\nprint(average_precision)\ndisp = plot_precision_recall_curve(ran, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","a724e885":"from lightgbm import LGBMClassifier","e70b8756":"model_lgb= LGBMClassifier()\nmodel_lgb.fit(xtrain,ytrain)","0c9ee000":"pred4=model_lgb.predict(xtest)","f91fdd03":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred4))\nprint(\"Precision:\",metrics.precision_score(ytest, pred4))\nprint(\"Recall:\",metrics.recall_score(ytest, pred4))","732f86c0":"# Data Analysis","5af8eb19":"# Read Data","9e389665":"# One hor encoding for comvert text data to numeric data","7de65b28":"# THE END","7d511f8d":"# Random Forest Algorithm","eb176d72":"# Import machine learning library","b98f270d":"# Split data X and Y for Train and Test","1f0203a2":"# Import Library","4c4faec2":"# LGMClassifier","8a1ab16c":"# Logistic Regression","931fb28b":"# Decision Tree Classifier","1a94683a":"# Data Preproceesing"}}