{"cell_type":{"d0c947c8":"code","da567bd8":"code","ac5c0c74":"code","c628e3c5":"code","f11325aa":"code","79d2312b":"code","75db0604":"code","48849ca1":"code","e8209518":"code","0bcc7499":"code","873dd146":"code","255c645d":"code","fbe3c2a0":"code","d6f18ade":"code","b60eddbc":"code","fb529b6d":"code","24919630":"code","dc77c205":"markdown","719409c1":"markdown","18371dfc":"markdown","fcdf394e":"markdown","3ef39d78":"markdown","d0393991":"markdown","b0dce459":"markdown","40240c46":"markdown","4b7ed293":"markdown","9670135c":"markdown"},"source":{"d0c947c8":"import pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nlabel_encoder = preprocessing.LabelEncoder()\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport seaborn as sns\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix","da567bd8":"df = pd.read_csv('..\/input\/income-classification\/income_evaluation.csv', encoding = 'unicode_escape')\ndf","ac5c0c74":"df.isnull().any()  # checking for null values","c628e3c5":"# no null values are present\n# we need to do label encoding for columns that don't have int\/float type values","f11325aa":"df.info()","79d2312b":"# checking from above and label encoding columns that are required to be encoded\na = [' workclass', ' education', ' marital-status', ' occupation',' relationship',' race',' sex',' native-country',' income']\nfor i in a:\n    df[i] = df[i].astype('|S')\n    df[i] = label_encoder.fit_transform(df[i])\ndf # getting final encoded dataframe","75db0604":"df.columns","48849ca1":"# checking vif\nvariables = df[['age', ' workclass', ' fnlwgt', ' education', ' education-num',\n       ' marital-status', ' occupation', ' relationship', ' race', ' sex',\n       ' capital-gain', ' capital-loss', ' hours-per-week', ' native-country']]\nvif = pd.DataFrame()\nvif['VIF'] = [variance_inflation_factor(variables.values, i) for i in range(variables.shape[1])]\nvif['Features'] = variables.columns\n\nvif","e8209518":"# now, we'll drop columns which have vif>10\ndf = df.drop([' education-num',' race',' hours-per-week',' native-country'], axis=1)\ndf","0bcc7499":"# removing all outliners\ndf = df[(np.abs(stats.zscore(df)) < 3).all(axis=1)]\ndf","873dd146":"corr = df.corr()\nplt.subplots(figsize=(15,10))\nsns.heatmap(corr, annot=True)  # quantifying the relationship","255c645d":"data = df.values\nX,y = data[:,:-1], data[:,-1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)  # splitting in the ration 80:20","fbe3c2a0":"classifier = RandomForestClassifier(n_estimators = 50, random_state=0)\nclassifier.fit(X_train, y_train)","d6f18ade":"y_pred = classifier.predict(X_test)","b60eddbc":"roc_auc_score(y_test, y_pred)","fb529b6d":"cm = confusion_matrix(y_test, y_pred)\ncm","24919630":"plt.figure(figsize=(6,6))\nsns.heatmap(cm, annot=True, fmt=\".0f\", linewidths=0.5, square = True, cmap = 'Pastel1')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\nall_sample_title = 'Accuracy Score: {0}'.format(roc_auc_score(y_test, y_pred))\nplt.title(all_sample_title, size = 15)","dc77c205":"### Model","719409c1":"# Predictions are 75.31% accurate.","18371dfc":"###  Data Preprocessing","fcdf394e":"### Importing Libraries","3ef39d78":"### Results' Visualization","d0393991":"### Getting our Data","b0dce459":"### Making Predictions and Checking Accuracy","40240c46":"### Splitting Data for Training and Testing","4b7ed293":"### Data Visualization","9670135c":"# INCOME CLASSIFICATION"}}