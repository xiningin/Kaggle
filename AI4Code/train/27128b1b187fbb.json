{"cell_type":{"f9345705":"code","0ca1da49":"code","d25dc2a6":"code","975db9f7":"code","0165295e":"code","3ea3a2b0":"code","35f1fdb8":"code","fad68ed5":"code","00feee4a":"code","e233d38e":"code","12cf8e7b":"code","aebefe78":"code","0c19b1a8":"code","17a0f3c6":"code","5fd59371":"code","1a65b5d5":"code","c03f212b":"code","b3486174":"code","a227720f":"code","2fc2bc6b":"code","36812a39":"code","e3d786f7":"code","c8ec94a0":"code","a2808a59":"code","28692514":"code","64c7124d":"code","e79f13f0":"code","f0164b73":"code","f514a0f2":"code","103c178c":"code","cde0df71":"code","581c0eb1":"code","8bb45df9":"code","2f2f7735":"code","b641c255":"code","1524d4fb":"code","acb91760":"code","c8ffe89a":"code","e4025157":"code","e0e6c71e":"code","7aefae3e":"markdown","dcb58c2b":"markdown","6f1169ef":"markdown","c56fa0e6":"markdown","3a9cb394":"markdown"},"source":{"f9345705":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","0ca1da49":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","d25dc2a6":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","975db9f7":"train.info()","0165295e":"test.info()","3ea3a2b0":"all = pd.concat([train, test], sort = False)\nall.info()","35f1fdb8":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","fad68ed5":"all.info()","00feee4a":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","e233d38e":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","12cf8e7b":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","aebefe78":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","0c19b1a8":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","17a0f3c6":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","5fd59371":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","1a65b5d5":"all.info()","c03f212b":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","b3486174":"all.info()","a227720f":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","2fc2bc6b":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","36812a39":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","e3d786f7":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","c8ec94a0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","a2808a59":"from sklearn.ensemble import RandomForestClassifier","28692514":"RF_Model = RandomForestClassifier()","64c7124d":"#from sklearn.model_selection import GridSearchCV","e79f13f0":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","f0164b73":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","f514a0f2":"#RF_grid_model = RF_grid.fit(X_train, y_train)","103c178c":"#RF_grid_model.best_estimator_","cde0df71":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","581c0eb1":"RF_Model.fit(X_train, y_train)","8bb45df9":"predictions = RF_Model.predict(X_test)\npredictions","2f2f7735":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","b641c255":"all_test.head()","1524d4fb":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","acb91760":"t_pred = RF_Model.predict(TestForPred).astype(int)","c8ffe89a":"PassengerId = all_test['PassengerId']","e4025157":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","e0e6c71e":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","7aefae3e":"****Final Predictions","dcb58c2b":"****Extra Features:","6f1169ef":"****Check Accuracy","c56fa0e6":"****Train\/Test Split","3a9cb394":"### Build Random Forest"}}