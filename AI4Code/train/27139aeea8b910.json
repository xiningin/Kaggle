{"cell_type":{"831d9181":"code","5e50085d":"code","55335b62":"code","3aa12089":"code","b3176902":"code","e614bc68":"code","903346b2":"code","c4a4fd55":"code","bbf3fa67":"markdown"},"source":{"831d9181":"import tensorflow as ft\nimport matplotlib.pyplot as plt\n\nfrom tensorflow import keras\nfrom keras import layers\nfrom keras.datasets import fashion_mnist\n\n# load the fashion mnist dataset from Keras API\n\n(train_images_full, train_labels_full), (test_images, test_labels) = fashion_mnist.load_data()","5e50085d":"# callback when the model reaches 99% accuracy\n\nclass tfCallback(keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs={}):\n    if logs.get(\"accuracy\")>=0.95:\n      print(\"\\nReached 95% accuracy!\")\n      self.model.stop_training = True \n\ncallbacks=tfCallback()\n\n# preprocess the the dataset\n\ntrain_images_full = train_images_full.reshape(60000, 28, 28, 1)\ntrain_images_full = train_images_full \/ 255.0\ntest_images = test_images.reshape(10000, 28, 28, 1)\ntest_images = test_images \/ 255.0","55335b62":"# create a validation set with 5000 examples from the training set\n\nvalidation_images, train_images = train_images_full[:5000], train_images_full[5000:]\nvalidation_labels, train_labels = train_labels_full[:5000], train_labels_full[5000:]\n\nprint(validation_images.shape)\nprint(train_images.shape)","3aa12089":"# build a deep learning model with 2 CNN layers and a densely connected layer\n\nmodel = keras.models.Sequential([layers.Conv2D(32, (3,3), activation=\"relu\", input_shape=(28,28,1)),\n                                 layers.MaxPooling2D(2,2),\n                                 layers.Conv2D(32, (3,3), activation=\"relu\"),\n                                 layers.MaxPooling2D(2,2),\n                                 layers.Dropout(0.2),\n                                 layers.Flatten(),\n                                 layers.Dense(128, activation=\"relu\"),\n                                 layers.Dense(10, activation=\"softmax\")])\n\n# use adam for model optimization\n\nmodel.compile(loss=\"sparse_categorical_crossentropy\", \n              optimizer=\"adam\", \n              metrics=[\"accuracy\"])\n\nhistory = model.fit(train_images, \n                    train_labels, \n                    epochs=50,\n                    validation_data=(validation_images, validation_labels),\n                    callbacks=callbacks)","b3176902":"history_dict = history.history\nhistory_dict.keys()","e614bc68":"# plot the accuracy and loss\n\naccuracy = history.history[\"accuracy\"]\nval_accuracy = history.history[\"val_accuracy\"]\nepochs = range(1, len(accuracy) + 1)\nplt.plot(epochs, accuracy, \"b-\", label=\"Training accuracy\")\nplt.plot(epochs, val_accuracy, \"bo\", label=\"Validation accuracy\")\nplt.title(\"Training and validation accuracy\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()\n\nloss = history.history[\"loss\"]\nval_loss = history.history[\"val_loss\"]\nplt.plot(epochs, loss, \"r-\", label=\"Training loss\")\nplt.plot(epochs, val_loss, \"ro\", label=\"Validation loss\")\nplt.title(\"Training and validation loss\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","903346b2":"# evaluate the model on test set\n\nmodel.evaluate(test_images, test_labels)","c4a4fd55":"prediction = model.predict(test_images)\n\nprint(prediction[6])\nprint(test_labels[6])","bbf3fa67":"## Fashion MNIST with Convolutional Neural Network\n\n\n![](http:\/\/www.researchgate.net\/profile\/Lina_Yao4\/publication\/325921786\/figure\/fig2\/AS:640163516522496@1529638284313\/Example-for-fashion-MNIST-Each-class-is-represented-by-nine-cases.png)"}}