{"cell_type":{"cf8dac41":"code","8f2eb30f":"code","4f6973a2":"markdown"},"source":{"cf8dac41":"###Solution###\n\nimport random as rd\n\nclass Soldier:\n    def __init__(self, health, strength):\n        self.health = health\n        self.strength = strength\n\n    def attack(self):\n        return self.strength\n\n    def receiveDamage(self, damage):\n        self.health = self.health - damage\n        \nclass Viking(Soldier):\n    def __init__(self, name, health, strength):\n        Soldier.__init__(self, health, strength)\n        self.name = name\n    def receiveDamage(self, damage):\n        self.health = self.health - damage\n        if self.health > 0:\n            return self.name + \" has received \" +  str(damage) + \" points of damage\"\n        else:\n            return self.name + \" has died in act of combat\"\n    def battleCry(self):\n        return \"Odin Owns You All!\"\n    \nclass Saxon(Soldier):\n    def receiveDamage(self, damage):\n        self.health = self.health - damage\n        if self.health > 0:\n            return \"A Saxon has received \" +  str(damage) + \" points of damage\"\n        else:\n            return \"A Saxon has died in combat\"","8f2eb30f":"class War:\n    def __init__(self):\n        self.vikingArmy = []\n        self.saxonArmy = []\n\n    def addViking(self, vik):\n        if isinstance(vik, Viking):\n            self.vikingArmy.append(vik)\n\n\n    def addSaxon(self, sax):\n        if isinstance(sax, Saxon):\n            self.saxonArmy.append(sax)\n\n    def vikingAttack(self):\n        v = rd.choice(self.vikingArmy)\n        s = rd.choice(self.saxonArmy)\n\n        dam_sa = s.receiveDamage(v.attack())\n\n        if s.health <= 0:\n            self.saxonArmy.remove(s)\n\n        return dam_sa\n\n    def saxonAttack(self):\n        u = rd.choice(self.vikingArmy)\n        i = rd.choice(self.saxonArmy)\n\n        dam_vi = u.receiveDamage(i.attack()) \n\n        if u.health <= 0 :\n            self.vikingArmy.remove(u)\n\n        return dam_vi\n\n    def showStatus(self):\n        if len(self.saxonArmy) == 0:\n            return \"Vikings have won the war of the century!\"\n        elif len(self.vikingArmy) == 0:\n            return \"Saxons have fought for their lives and survive another day...\"\n        else:\n            return \"Vikings and Saxons are still in the thick of battle.\"","4f6973a2":"\n## Introduction\n\nThe Vikings and the Saxons are at War. Both are Soldiers but they have their own methods to fight. Vikings are ported to Python. YAY!!\n\nIn this laboratory you will work with the concept of inheritance in Python.\n\n\n### Soldier\n\nModify the `Soldier` constructor function and add 2 methods to its prototype: `attack()`, and `receiveDamage()`.\n\n#### constructor function\n\n- should receive **2 arguments** (health & strength)\n- should receive the **`health` property** as its **1st argument**\n- should receive the **`strength` property** as its **2nd argument**\n\n#### `attack()` method\n\n- should be a function\n- should receive **0 arguments**\n- should return **the `strength` property of the `Soldier`**\n\n#### `receiveDamage()` method\n\n- should be a function\n- should receive **1 argument** (the damage)\n- should remove the received damage from the `health` property\n- **shouldn't return** anything\n\n---\n\n### Viking\n\nA `Viking` is a `Soldier` with an additional property, their `name`. They also have a different `receiveDamage()` method and new method, `battleCry()`.\n\nModify the `Viking` constructor function, have it inherit from `Soldier`, reimplement the `receiveDamage()` method for `Viking`, and add a new `battleCry()` method.\n\n#### inheritance\n\n- `Viking` should inherit from `Soldier`\n\n#### constructor function\n\n- should receive **3 arguments** (name, health & strength)\n- should receive the **`name` property** as its **1st argument**\n- should receive the **`health` property** as its **2nd argument**\n- should receive the **`strength` property** as its **3rd argument**\n\n#### `attack()` method\n\n(This method should be **inherited** from `Soldier`, no need to reimplement it.)\n\n- should be a function\n- should receive **0 arguments**\n- should return **the `strength` property of the `Viking`**\n\n#### `receiveDamage()` method\n\n(This method needs to be **reimplemented** for `Viking` because the `Viking` version needs to have different return values.)\n\n- should be a function\n- should receive **1 argument** (the damage)\n- should remove the received damage from the `health` property\n- **if the `Viking` is still alive**, it should return **\"NAME has received DAMAGE points of damage\"**\n- **if the `Viking` dies**, it should return **\"NAME has died in act of combat\"**\n\n#### `battleCry()` method\n\n[Learn more about battle cries](http:\/\/www.artofmanliness.com\/2015\/06\/08\/battle-cries\/).\n\n- should be a function\n- should receive **0 arguments**\n- should return **\"Odin Owns You All!\"**\n\n---\n\n### Saxon\n\nA `Saxon` is a weaker kind of `Soldier`. Unlike a `Viking`, a `Saxon` has no name. Their `receiveDamage()` method will also be different than the original `Soldier` version.\n\nModify the `Saxon`, constructor function, have it inherit from `Soldier` and reimplement the `receiveDamage()` method for `Saxon`.\n\n#### inheritance\n\n- `Saxon` should inherit from `Soldier`\n\n#### constructor function\n\n- should receive **2 arguments** (health & strength)\n- should receive the **`health` property** as its **1st argument**\n- should receive the **`strength` property** as its **2nd argument**\n\n#### `attack()` method\n\n(This method should be **inherited** from `Soldier`, no need to reimplement it.)\n\n- should be a function\n- should receive **0 arguments**\n- should return **the `strength` property of the `Saxon`**\n\n#### `receiveDamage()` method\n\n(This method needs to be **reimplemented** for `Saxon` because the `Saxon` version needs to have different return values.)\n\n- should be a function\n- should receive **1 argument** (the damage)\n- should remove the received damage from the `health` property\n- **if the Saxon is still alive**, it should return _**\"A Saxon has received DAMAGE points of damage\"**_\n- **if the Saxon dies**, it should return _**\"A Saxon has died in combat\"**_\n\n---\n\n### (BONUS) War\n\nNow we get to the good stuff: WAR! Our `War` constructor function will allow us to have a `Viking` army and a `Saxon` army that battle each other.\n\nModify the `War` constructor and add 5 methods to its prototype:\n\n- `addViking()`\n- `addSaxon()`\n- `vikingAttack()`\n- `saxonAttack()`\n- `showStatus()`\n\n#### constructor function\n\nWhen we first create a `War`, the armies should be empty. We will add soldiers to the armies later.\n\n- should receive **0 arguments**\n- should assign an empty array to the **`vikingArmy` property**\n- should assign an empty array to the **`saxonArmy` property**\n\n#### `addViking()` method\n\nAdds 1 `Viking` to the `vikingArmy`. If you want a 10 `Viking` army, you need to call this 10 times.\n\n- should be a function\n- should receive **1 argument** (a `Viking` object)\n- should add the received `Viking` to the army\n- **shouldn't return** anything\n\n#### `addSaxon()` method\n\nThe `Saxon` version of `addViking()`.\n\n- should be a function\n- should receive **1 argument** (a `Saxon` object)\n- should add the received `Saxon` to the army\n- **shouldn't return** anything\n\n#### `vikingAttack()` method\n\nA `Saxon` (chosen at random) has their `receiveDamage()` method called with the damage equal to the `strength` of a `Viking` (also chosen at random). This should only perform a single attack and the `Saxon` doesn't get to attack back.\n\n- should be a function\n- should receive **0 arguments**\n- should make a `Saxon` `receiveDamage()` equal to the `strength` of a `Viking`\n- should remove dead saxons from the army\n- should return **result of calling `receiveDamage()` of a `Saxon`** with the `strength` of a `Viking`\n\n#### `saxonAttack()` method\n\nThe `Saxon` version of `vikingAttack()`. A `Viking` receives the damage equal to the `strength` of a `Saxon`.\n\n- should be a function\n- should receive **0 arguments**\n- should make a `Viking` `receiveDamage()` equal to the `strength` of a `Saxon`\n- should remove dead vikings from the army\n- should return **result of calling `receiveDamage()` of a `Viking`** with the `strength` of a `Saxon`\n\n#### `showStatus()` method\n\nReturns the current status of the `War` based on the size of the armies.\n\n- should be a function\n- should receive **0 arguments**\n- **if the `Saxon` array is empty**, should return _**\"Vikings have won the war of the century!\"**_\n- **if the `Viking` array is empty**, should return _**\"Saxons have fought for their lives and survive another day...\"**_\n- **if there are at least 1 `Viking` and 1 `Saxon`**, should return _**\"Vikings and Saxons are still in the thick of battle.\"**_\n"}}