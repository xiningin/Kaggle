{"cell_type":{"e87e55d3":"code","0b1fe404":"code","c4d7fe50":"code","6c9eeba8":"code","87eb34a7":"code","c0db51e2":"code","272e678a":"code","79ef8dc9":"code","97d10317":"code","200a2734":"code","f08cb718":"code","5fa0655d":"code","2fe7498a":"code","42cbe37b":"code","8c056ef5":"code","9806c551":"code","d5dbf759":"code","a945304f":"code","65829afb":"code","679b2e77":"code","259d6fde":"code","c4c93398":"code","855e12f7":"code","bcda22f8":"code","f8a16551":"code","9c63cc73":"code","bb9aa4cc":"code","64faa726":"code","57003aa3":"code","da5b0721":"code","c3bda713":"code","06d8438c":"code","3251adb3":"code","cf60c8ed":"code","048ca6c5":"code","0c7fdad8":"code","55170247":"code","de0beb51":"code","c20de44e":"code","57d784f5":"code","85379627":"code","ba0ede14":"code","643692b9":"code","91c68b45":"code","04a708fb":"code","0febfcfe":"code","f5d7c551":"code","ea3c9023":"code","2bf67246":"code","18f53adc":"code","bc77ea9e":"code","e6d5a961":"code","96d84ec4":"code","7d55f10d":"code","d9732f90":"code","023c076d":"code","708c20de":"code","3f1a4a6d":"code","5303d134":"code","c5e0a762":"code","f86d0837":"code","08bcc709":"code","8cff2724":"code","d108db67":"code","d54558fb":"code","771c1e03":"code","f7c9662f":"code","fe3e13ca":"code","c214b808":"code","c0f3b9ba":"code","580d8f54":"code","9b45193a":"code","ec6e2fc7":"code","c8ba86d9":"code","856afda3":"code","9e6de170":"code","ee564f0a":"code","3ca25cb8":"code","61f86452":"code","48f84d56":"code","1e4af7cf":"code","be892acd":"code","2bbcf560":"code","e12d35e5":"code","2db202a7":"code","bc273feb":"code","64252b24":"code","8611ebd2":"code","248d98aa":"code","3e688986":"code","2a65afaa":"code","180e2a88":"code","21142c62":"code","b355d166":"code","7e836797":"code","7abf98dc":"code","69480961":"code","c5bc20cb":"code","bddd49de":"code","9914012c":"code","053cdfdc":"code","396a971b":"code","3395b5a1":"code","f02b0c67":"code","e8583773":"code","d16dd4b3":"code","667ff6ba":"markdown","ad72534f":"markdown","550c6925":"markdown","eef57d77":"markdown","345088d6":"markdown","1d97ce1e":"markdown","9716f16a":"markdown","4fbba8c1":"markdown","af0dd306":"markdown","0e4f1da8":"markdown","49ccb4a0":"markdown","22e37e05":"markdown","2297a863":"markdown","c31f0141":"markdown","04f57712":"markdown","33ff7865":"markdown","29f646a2":"markdown","557acf2a":"markdown","ceb01879":"markdown","12a58958":"markdown","56511cba":"markdown","7c3d305d":"markdown","c854b079":"markdown","97bec6fe":"markdown","7e91fbb4":"markdown","72c0b4a0":"markdown","3afef2f4":"markdown","1d7a6963":"markdown","58656e2c":"markdown","67f0e6c0":"markdown","c2521c3f":"markdown","11664e67":"markdown","00950310":"markdown","86434949":"markdown","fbe30ff7":"markdown","1ed579e0":"markdown","6059dfaf":"markdown","18c9b747":"markdown","131ed1ad":"markdown","5d427800":"markdown","c30fa892":"markdown","bf86e452":"markdown","1136b24d":"markdown","c411ad10":"markdown","1c87bd38":"markdown","23fc87d8":"markdown","f419e0cb":"markdown","c84a369b":"markdown","6f37f5cf":"markdown","d5732348":"markdown","6c8631d5":"markdown","8cf4b1e0":"markdown","7dfada52":"markdown","def6b7b9":"markdown","ae1d1bfa":"markdown","4d9add96":"markdown","3074efb7":"markdown","4eb4c700":"markdown","9232f61a":"markdown","6ace1db6":"markdown","5f0f9b73":"markdown","67fe33ed":"markdown","07070257":"markdown","7d235f75":"markdown","4322a6bd":"markdown","f68c1a8a":"markdown","fc475185":"markdown","e1839de5":"markdown","e1a0b827":"markdown","ddcc7cbd":"markdown","7643624b":"markdown","95abd150":"markdown","d9d4aace":"markdown","1e946793":"markdown","83825113":"markdown","91d2a6ea":"markdown","d52b17eb":"markdown","500f1d98":"markdown","d1d82933":"markdown","d1869ce3":"markdown","273c675d":"markdown","c99435b4":"markdown","1c5edf2c":"markdown","5c625650":"markdown","7a198dd6":"markdown","32a01f5a":"markdown","98d139aa":"markdown","ca81d590":"markdown","1c5c1a21":"markdown","82be37b2":"markdown","9cb06c1d":"markdown","14682e49":"markdown","7cf7c1e2":"markdown","7a752d10":"markdown","2072ab0f":"markdown","1c16880f":"markdown","6217f8cc":"markdown","6f51bca8":"markdown","6b2e013c":"markdown","d632b3f7":"markdown","dfa5c5f2":"markdown","cf858e3a":"markdown","44926b68":"markdown","90058b19":"markdown","9d1ed0fd":"markdown","ed8dcd89":"markdown","9c134863":"markdown","c2344b21":"markdown","f4862ebc":"markdown","bbc0b06e":"markdown","9723457a":"markdown","c23865a4":"markdown","8b92ddf3":"markdown","d81b3d0d":"markdown","91823987":"markdown","0cd38143":"markdown","7832aa48":"markdown","965a44ff":"markdown","b169f724":"markdown","d273e42a":"markdown","4d6c07c3":"markdown","b71d73c9":"markdown","22781ae2":"markdown","962780e5":"markdown"},"source":{"e87e55d3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport json\nimport scipy\n\nfrom outlier_tools import outlier_aware_hist\nfrom data_preprocessing import get_ice_data\nfrom medcouple import medcouple","0b1fe404":"data = get_ice_data(\n    start_date=\"2020-07-01\", end_date=\"2021-06-30\"\n)","c4d7fe50":"data.info()","6c9eeba8":"pd.DataFrame(data.fuel_per_100_km.rename(\"Fuel per 100 km\").describe())","87eb34a7":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\noutlier_aware_hist(data.fuel_per_100_km, lower=0.001, label=\"Original Fuel\")\nax.set_title(\"Distribution of Consumed Fuel per 100 km\")\nax.set_xlabel(\"Fuel [l \/ 100 km]\")\nplt.legend()\nplt.show()","c0db51e2":"print(\n    \"There are {} trips out of {} ({:.2f}%) with negative consumed fuel\".format(\n        data[data.fuel<0].shape[0], data.shape[0], 100 * data[data.fuel<0].shape[0] \/ data.shape[0])\n)\nprint(\n    \"There are {} trips out of {} ({:.2f}%) with zero consumed fuel\".format(\n        data[data.fuel==0].shape[0], data.shape[0], 100 * data[data.fuel==0].shape[0] \/ data.shape[0])\n)\nprint(\n    \"There are {} trips out of {} ({:.2f}%) with above 20 L per 100 km of consumed fuel\".format(\n        data[data.fuel_per_100_km>=20].shape[0], data.shape[0], 100 * data[data.fuel_per_100_km>=20].shape[0] \/ data.shape[0])\n)\nprint(\n    \"There are {} trips out of {} ({:.2f}%) with above 100 L per 100 km of consumed fuel\".format(\n        data[data.fuel_per_100_km>=100].shape[0], data.shape[0], 100 * data[data.fuel_per_100_km>=100].shape[0] \/ data.shape[0])\n)","272e678a":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\nplt.hist(data.fuel_per_100_km, range=(0.001, 25), label=\"Original Fuel\", bins=\"fd\")\nplt.suptitle(\"Distribution of Consumed Fuel per 100 km\")\nax.set_title(\"(0-25] Restricted Range\")\nax.set_xlabel(\"Fuel [l \/ 100 km]\")\n#plt.legend()\nplt.show()","79ef8dc9":"# Let's create a dummy variable for the above classes\n\ndcopy = data.copy()\nconditions = [\n    dcopy['fuel_per_100_km'] < 0, \n    dcopy['fuel_per_100_km'] == 0, \n    (dcopy['fuel_per_100_km'] > 0) & (dcopy['fuel_per_100_km'] <= 20), \n    (dcopy['fuel_per_100_km'] > 20) & (dcopy['fuel_per_100_km'] <= 60), \n    dcopy['fuel_per_100_km'] > 60\n]\nnames = [\"< 0\", \"= 0\", \"0-20\", \"20-60\", \"> 60\"]\nmy_ord = names[1:]\ndcopy['fuelclass'] = np.select(conditions, names, default=np.nan)","97d10317":"fc_dist = round(pd.concat([dcopy.fuelclass.value_counts().rename('N. Trips'), 100 * dcopy.fuelclass.value_counts(normalize=True).rename('%')], axis=1).loc[names], 2)\nfc_dist.index.rename(\"Fuel Class\", inplace=True)\nfc_dist","200a2734":"fig, axes = plt.subplots(1, 2, figsize=(12, 6), dpi=600)\nsns.boxplot(\n    data=dcopy[dcopy.fuel>=0], y=\"exp_fuel_per_100_km\", x=\"fuelclass\", ax=axes[0], order=my_ord,\n    flierprops = dict(marker='o', markersize=4,  alpha=0.2)\n)\naxes[0].set_ylabel(\"Expected Fuel [L \/ 100 km]\")\naxes[0].set_xlabel(\"Fuel Consumed Class [L \/ 100 km]\")\naxes[0].set_title(\"Expected Fuel with respect to Recorded Fuel Class\")\nsns.boxplot(\n    data=dcopy[dcopy.fuel>=0], y=\"distance\", x=\"fuelclass\", ax=axes[1], order=my_ord,\n    flierprops = dict(marker='o', markersize=4,  alpha=0.2)\n)\naxes[1].set_ylabel(\"Trip Distance [km]\")\naxes[1].set_xlabel(\"Fuel Consumed Class [L \/ 100 km]\")\naxes[1].set_title(\"Trip Distance with respect to Recorded Fuel Class\")\naxes[1].set_yscale(\"log\")\nplt.suptitle(\"Distribution of Expected Fuel and Distance within different Fuel Consumption Classes\", fontsize=14)\nplt.tight_layout()\nplt.show()","f08cb718":"pd.concat(\n    [\n        dcopy.loc[dcopy.fuelclass == \"20-60\", \"distance\"].describe().rename(\"Distance (fuel 20-60)\"),\n        dcopy.loc[dcopy.fuelclass == \"> 60\", \"distance\"].describe().rename(\"Distance (fuel > 60)\")\n    ], axis=1\n)","5fa0655d":"dcopy = data.copy()\nconditions = [\n    dcopy['distance'] < 0.5, \n    (dcopy['distance'] >= 0.5) & (dcopy['distance'] < 1), \n    (dcopy['distance'] >= 1) & (dcopy['distance'] < 5), \n    (dcopy['distance'] >= 5) & (dcopy['distance'] < 20), \n    (dcopy['distance'] >= 20) & (dcopy['distance'] < 50), \n    (dcopy['distance'] >= 50) & (dcopy['distance'] < 100), \n    (dcopy['distance'] >= 100) & (dcopy['distance'] < 200), \n    dcopy['distance'] >= 200\n]\nnames = [\"0-0.5\", \"0.5-1\", \"1-5\", \"5-20\", \"20-50\", \"50-100\", \"100-200\", \">200\"]\nmy_ord = names[:]\ndcopy['distclass'] = np.select(conditions, names, default=np.nan)","2fe7498a":"fig, ax = plt.subplots(1, 2, figsize=(12, 6), gridspec_kw={'width_ratios': [2, 1]}, sharey=True, dpi=600)\nax[0].set_xscale(\"symlog\")\nsns.boxplot(\n    data=dcopy[dcopy.fuel>0], x=\"fuel_per_100_km\", y=\"distclass\", ax=ax[0], showfliers=True,\n    order=names, flierprops = dict(marker='o', markersize=4,  alpha=0.2)\n)\nax[0].set_xlabel(\"Fuel Consumed [L \/ 100 km]\")\nax[0].set_ylabel(\"Trip Distance [km]\")\nax[0].set_title(\"Fuel Consumed Distribution per Trip Distance class\")\nax[0].axvline(1000, ls=\"--\", color=\"tab:orange\", label=\"1000\", alpha=0.5)\nax[0].axvline(100, ls=\"--\", color=\"tab:purple\", label=\"100\", alpha=0.5)\nax[0].axvline(60, ls=\"--\", color=\"tab:red\", label=\"60\", alpha=0.5)\nax[0].axvline(20, ls=\"--\", color=\"tab:green\", label=\"20\",  alpha=0.5)\nax[0].axvline(2, ls=\"--\", color=\"tab:blue\", label=\"2\", alpha=0.5)\nall_trips = pd.DataFrame(dcopy.groupby(\"distclass\").size().rename(\"count\"))\nall_trips[\"Trips\"] = \"Total\"\nneg_trips = pd.DataFrame(dcopy[(dcopy.fuel_per_100_km>20)].groupby(\"distclass\").size().rename(\"count\"))\nfor c in [n for n in names if n not in neg_trips.index]:\n    neg_trips.loc[c, \"count\"] = int(0)\nneg_trips[\"Trips\"] = \"Fuel per 100km > 20\"\nd = pd.DataFrame(pd.concat([all_trips, neg_trips], axis=0))\nd[\"distclass\"] = d.index\nsns.barplot(\n    data=d, x=\"count\", y=\"distclass\", hue=\"Trips\", \n    ax=ax[1], order=my_ord\n)\nax[1].set_ylabel(\"\")\nax[1].set_xlabel(\"Count\")\nax[1].set_title(\"Trip Distance Class Distribution\")\nrects = ax[1].patches[8:]\nlabels = [\n    (r\"$\\bf{\" + str(int(d.loc[(d.distclass==dc)&(d.Trips==\"Fuel per 100km > 20\"), \"count\"][0])) + \"}$\" + \n     \" ({:.2f}%)\".format(100*(d.loc[(d.distclass==dc)&(d.Trips==\"Fuel per 100km > 20\"), \"count\"][0])\/(d.loc[(d.distclass==dc)&(d.Trips==\"Total\"), \"count\"][0]))) \n    for dc in names\n]\n\nfor rect, label in zip(rects, labels):\n    width = rect.get_width()\n    ax[1].text(\n        width + 50, rect.get_y() + rect.get_height() \/ 2, label, ha=\"left\", va=\"center\"\n    )\n\nax[0].legend(title=\"Fuel per 100 km\")\nax[1].legend(title=\"Number of Trips\")\nplt.tight_layout()\nplt.show()","42cbe37b":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\nsns.boxplot(\n    data=dcopy[dcopy.fuel>0], x=\"fuel_per_100_km\", y=\"distclass\", ax=ax, showfliers=False,\n    order=names\n)\nax.set_xlabel(\"Fuel Consumed [L \/ 100 km]\")\nax.set_ylabel(\"Trip Distance [km]\")\nax.set_title(\"Fuel Consumed Distribution per Trip Distance class (without outliers)\")\nplt.tight_layout()\nplt.show()","8c056ef5":"fig, ax = plt.subplots(figsize=(12, 10), dpi=600)\ngrouped = data.loc[data.fuel>0,['model', 'fuel_per_100_km']].groupby(['model']).median().sort_values(by='fuel_per_100_km')\nsns.boxplot(\n    data=data.loc[data.fuel>0], x='fuel_per_100_km', y=\"model\", order=grouped.index,\n    flierprops = dict(marker='o', markersize=3,  alpha=0.5, markerfacecolor=\"tab:red\")\n)\nax.set_title(\"Fuel Consumed Distribution per Car Model\", fontsize=14)\nax.set_xlabel(\"Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Car Model\")\nax.set_xscale(\"log\")\nplt.tight_layout()\nplt.show()","9806c551":"fig, ax = plt.subplots(figsize=(12, 20), dpi=600)\ngrouped = data.loc[data.fuel>0,['driver', 'fuel_per_100_km']].groupby(['driver']).median().sort_values(by='fuel_per_100_km')\nsns.boxplot(\n    data=data[data.fuel>0], x='fuel_per_100_km', y=\"driver\", order=grouped.index, orient=\"h\",\n    flierprops = dict(marker='o', markersize=3,  alpha=0.5, markerfacecolor=\"tab:red\")\n)\nax.set_title(\"Fuel Consumed Distribution per Driver\", fontsize=14)\nax.set_xlabel(\"Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Driver ID\")\nax.set_xscale(\"log\")\nplt.tight_layout()\nplt.show()","d5dbf759":"fig, ax = plt.subplots(figsize=(10, 5), dpi=600)\ngrouped = data.loc[data.fuel>0,['emission_standard', 'fuel_per_100_km']].groupby(['emission_standard']).median().sort_values(by='fuel_per_100_km')\nsns.boxplot(\n    data=data[data.fuel>0], x='fuel_per_100_km', y=\"emission_standard\", order=grouped.index, orient=\"h\",\n    flierprops = dict(marker='o', markersize=3,  alpha=0.5, markerfacecolor=\"tab:red\")\n)\nax.set_title(\"Fuel Consumed Distribution per Emission Standard\", fontsize=14)\nax.set_xlabel(\"Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Emission Standard\")\nax.set_xscale(\"log\")\nplt.tight_layout()\nplt.show()","a945304f":"fig, ax = plt.subplots(figsize=(10, 3), dpi=600)\ngrouped = data.loc[data.fuel>0,['type', 'fuel_per_100_km']].groupby(['type']).median().sort_values(by='fuel_per_100_km')\nsns.boxplot(\n    data=data[data.fuel>0], x='fuel_per_100_km', y=\"type\", order=grouped.index, orient=\"h\",\n    flierprops = dict(marker='o', markersize=3,  alpha=0.5, markerfacecolor=\"tab:red\")\n)\nplt.suptitle(\"Fuel Consumed Distribution per Engine Type\", fontsize=14)\nax.set_title(\"Pb: Gasoline, ON: Diesel\")\nax.set_xlabel(\"Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Engine Type\")\nax.set_xscale(\"log\")\nplt.tight_layout()\nplt.show()","65829afb":"print(\n    \"There are {} trips out of {} ({:.2f}%) with negative consumed fuel.\".format(\n        data[data.fuel<0].shape[0], data.shape[0], 100 * data[data.fuel<0].shape[0] \/ data.shape[0]\n    )\n     )","679b2e77":"data.loc[data.fuel<0, [\"date\", \"driver\", \"distance\", \"urban\", \"rural\", \"highway\", \"fuel_quality\", \"fuel\", \"fuel_per_100_km\", \"exp_fuel\", \"exp_fuel_per_100_km\",  \"car\", \"model\", \"type\"]]","259d6fde":"print(\n    \"There are {} trips out of {} ({:.2f}%) with zero consumed fuel.\".format(\n        data[data.fuel==0].shape[0], data.shape[0], 100 * data[data.fuel==0].shape[0] \/ data.shape[0]\n    )\n     )","c4c93398":"fig, ax = plt.subplots(figsize=(10, 12),  dpi=600)\nnegfuel = data[data.fuel==0]\nsns.countplot(\n    data=negfuel, y=\"car\", ax=ax,\n    order=negfuel.car.value_counts().index\n)\nplt.suptitle(\"Cars with at least 1 trip with zero Fuel Consumption\", fontsize=14)\nax.set_title(r\"For each car: $\\bf{Trips}$ $\\bf{with}$ $\\bf{zero}$ $\\bf{Fuel}$\" +\" (% over total trips)\", fontsize=12)\nax.set_ylabel(\"Car ID\")\nrects = ax.patches\nlabels = [\n    (r\"$\\bf{\" + str(negfuel.car.value_counts()[car]) + \"}$\" + \n     \" ({:.2f}%)\".format(100*negfuel.car.value_counts()[car]\/data.car.value_counts()[car])) \n    for car in negfuel.car.value_counts().index\n]\n\nfor rect, label in zip(rects, labels):\n    width = rect.get_width()\n    ax.text(\n        width + 10, rect.get_y() + rect.get_height() \/ 2, label, ha=\"left\", va=\"center\"\n    )\nplt.xlim([0, max([rect.get_width() for rect in rects]) + 500])\nplt.tight_layout()\nplt.show()","855e12f7":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\ndcopy = data.copy()\ndcopy[\"month\"] = dcopy.date.str[:7]\nzfuel = dcopy[dcopy.fuel==0].copy()\nsns.countplot(\n    data=zfuel, x=\"month\", ax=ax,  order=sorted(zfuel.month.unique())\n)\nrects = ax.patches\nlabels = [\n    (r\"$\\bf{\" + str(zfuel.month.value_counts()[month]) + \"}$\" + \n     \"\\n{:.2f}%\".format(100*zfuel.month.value_counts()[month]\/dcopy.month.value_counts()[month])) \n    for month in sorted(zfuel.month.unique())\n]\n\nfor rect, label in zip(rects, labels):\n    height = rect.get_height()\n    ax.text(\n        rect.get_x() + rect.get_width() \/ 2, height + 5, label, ha=\"center\", va=\"bottom\"\n    )\nplt.ylim([0, max([rect.get_height() for rect in rects]) + 200])\nplt.suptitle(\"Months when at least 1 trip with zero Fuel Consumption happened\", fontsize=14)\nax.set_title(r\"For each month: $\\bf{Trips}$ $\\bf{with}$ $\\bf{zero}$ $\\bf{Fuel}$\" +\", % over total trips\", fontsize=12)\nax.set_xlabel(\"Month\")\nplt.show()","bcda22f8":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\ndcopy = data.copy()\nzfuel = dcopy[dcopy.fuel==0].copy()\nsns.lineplot(\n    x=sorted(data.date.unique()), y=100*data.groupby(\"date\").apply(lambda x: x.fuel==0).groupby(\"date\").mean(), ax=ax,\n    alpha=0.25, label=\"% of Trips with 0 Fuel\"\n)\nsns.lineplot(\n    x=sorted(data.date.unique()), y=(100*data.groupby(\"date\").apply(lambda x: x.fuel==0).groupby(\"date\").mean()).rolling(14).mean(), ax=ax,\n    color=\"tab:blue\", lw=2, label=\"14 days Moving Average\"\n)\nax.set_title(\"% of Trips with zero Fuel Consumption per day\", fontsize=14)\nax.set_xlabel(\"Date\")\nax.set_ylabel(\"% of Trips with Zero Fuel\")\nplt.xticks([d for d in sorted(data.date.unique()) if d[8:] == \"01\"], rotation=30)\nplt.show()","f8a16551":"car_ids = list(zfuel.car.value_counts().index[:10])\ndcopy = data.loc[(data.car.isin(car_ids))].copy()\ndcopy[\"month\"] = dcopy[\"date\"].str[:7]\nfig, axes = plt.subplots(figsize=(10, 6), dpi=600)\nsns.lineplot(\n    x=sorted(data.date.unique()),\n    y=data.groupby([\"date\"]).apply(lambda x: ((x.fuel==0) & (x.car.isin(car_ids)))).groupby(\"date\").sum(),\n    ax=axes, alpha=.25, lw=1, color=\"tab:blue\", ls=\"-\"\n)\nsns.lineplot(\n    x=sorted(data.date.unique()),\n    y=data.groupby([\"date\"]).apply(lambda x: ((x.fuel==0) & (x.car.isin(car_ids)))).groupby(\"date\").sum().rolling(14).mean(),\n    ax=axes, alpha=1, label=\"First 10 Combined\", lw=2, color=\"tab:blue\"\n)\nsns.lineplot(\n    x=sorted(data.date.unique()),\n    y=data.groupby([\"date\"]).apply(lambda x: ((x.fuel==0) & (x.car.isin(car_ids)==False))).groupby(\"date\").sum(),\n    ax=axes, alpha=.25, lw=1, color=\"tab:red\", ls=\"-\"\n)\nsns.lineplot(\n    x=sorted(data.date.unique()),\n    y=data.groupby([\"date\"]).apply(lambda x: ((x.fuel==0) & (x.car.isin(car_ids)==False))).groupby(\"date\").sum().rolling(14).mean(),\n    ax=axes, alpha=1, label=\"All Others Combined\", lw=2, color=\"tab:red\"\n)\naxes.set_title(\"First 10 cars vs all others combined - 14 days Moving Average\", fontsize=12)\naxes.set_xlabel(\"Date\")\naxes.set_ylabel(\"N. of daily trips with Zero Fuel\")\nplt.xticks([d for d in sorted(data.date.unique()) if d[8:] == \"01\"], rotation=30)\nplt.suptitle(\"Number of trips with zero Fuel Consumption per day\", fontsize=14)\nplt.legend(title=\"Cars\")\nplt.show()","9c63cc73":"fig, ax = plt.subplots(figsize=(10,3), dpi=600)\nsns.countplot(data=data, y=\"fuel_quality\", order=[\"High\", \"Low\"])\nax.set_ylabel(\"Fuel Quality\")\nax.set_title(\"Fuel Quality Distribution\")\nrects = ax.patches\nlabels = [\n    (r\"$\\bf{\" + str(data.fuel_quality.value_counts()[qual]) + \"}$\" + \n     \"\\n({:.2f}%)\".format(100*data.fuel_quality.value_counts()[qual]\/data.shape[0])) \n    for qual in [\"High\", \"Low\"]\n]\n\nfor rect, label in zip(rects, labels):\n    width = rect.get_width()\n    ax.text(\n        width - 1000, rect.get_y() + rect.get_height() \/ 2, label, \n        ha=\"right\", va=\"center\", color=\"white\", size=14\n    )\nplt.xlim([0, max([rect.get_width() for rect in rects]) + 500])\nplt.show()","bb9aa4cc":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\nsns.boxplot(data=data, x=\"fuel_per_100_km\", y=\"fuel_quality\")\nax.set_xscale(\"symlog\")\nax.set_title(\"Consumed Fuel Distribution\")\nax.set_xlabel(\"Consumed Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Fuel Quality\")\nplt.show()","64faa726":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\nd_bad = data.loc[(data.fuel_per_100_km>0)&(data.fuel_per_100_km<40)&(data.fuel_quality==\"Low\")]\nd_good = data.loc[(data.fuel_per_100_km>0)&(data.fuel_per_100_km<40)&(data.fuel_quality==\"High\")]\nsns.kdeplot(\n    data=d_bad, x=\"fuel_per_100_km\", ax=ax, label=\"Low\", fill=True, color=\"tab:orange\"\n)\nsns.kdeplot(\n    data=d_good, x=\"fuel_per_100_km\", ax=ax, label=\"High\", fill=True, color=\"tab:blue\"\n)\nax.set_xlabel(\"Fuel Consumed [L \/ 100 km]\")\nplt.legend(title=\"Fuel Quality\")\nplt.suptitle(\"Distribution of Fuel Consumed\", size=16)\nplt.title(\"Gaussian Kernel Density Estimate - [0, 40] interval\")\nplt.show()","57003aa3":"pd.concat(\n    [\n        d_bad.fuel_per_100_km.describe().rename(\"Low Quality Fuel\"),\n        d_good.fuel_per_100_km.describe().rename(\"High Quality Fuel\"),\n    ], axis=1\n)","da5b0721":"from scipy.stats import ks_2samp\nks_2samp(d_bad.fuel_per_100_km, d_good.fuel_per_100_km)","c3bda713":"dcopy = data.copy()\nconditions = [\n    dcopy['distance'] < 0.5, \n    (dcopy['distance'] >= 0.5) & (dcopy['distance'] < 1), \n    (dcopy['distance'] >= 1) & (dcopy['distance'] < 5), \n    (dcopy['distance'] >= 5) & (dcopy['distance'] < 20), \n    (dcopy['distance'] >= 20) & (dcopy['distance'] < 50), \n    (dcopy['distance'] >= 50) & (dcopy['distance'] < 100), \n    (dcopy['distance'] >= 100) & (dcopy['distance'] < 200), \n    dcopy['distance'] >= 200\n]\nnames = [\"0-0.5\", \"0.5-1\", \"1-5\", \"5-20\", \"20-50\", \"50-100\", \"100-200\", \">200\"]\nmy_ord = names[:]\ndcopy['distclass'] = np.select(conditions, names, default=np.nan)\n\nfig, ax = plt.subplots(1, 2, figsize=(12, 6), gridspec_kw={'width_ratios': [2, 1]}, sharey=True, dpi=600)\nax[0].set_xscale(\"log\")\nsns.boxplot(\n    data=dcopy[dcopy.fuel>0], x=\"fuel_per_100_km\", y=\"distclass\", hue=\"fuel_quality\", ax=ax[0], \n    showfliers=True, order=names, flierprops = dict(marker='o', markersize=4,  alpha=0.2)\n)\nax[0].set_xlabel(\"Fuel Consumed [L \/ 100 km]\")\nax[0].set_ylabel(\"Trip Distance [km]\")\nax[0].set_title(\"Fuel Consumed Distribution per Trip Distance class (without outliers)\")\nbad_q = pd.DataFrame(dcopy[(dcopy.fuel_quality==\"Low\")].groupby(\"distclass\").size().rename(\"count\"))\nfor c in [n for n in names if n not in bad_q.index]:\n    bad_q.loc[c, \"count\"] = int(0)\nbad_q[\"fuel_quality\"] = \"Low\"\ngood_q = pd.DataFrame(dcopy[(dcopy.fuel_quality==\"High\")].groupby(\"distclass\").size().rename(\"count\"))\nfor c in [n for n in names if n not in good_q.index]:\n    good_q.loc[c, \"count\"] = int(0)\ngood_q[\"fuel_quality\"] = \"High\"\nd = pd.DataFrame(pd.concat([bad_q, good_q], axis=0))\nd[\"distclass\"] = d.index\nsns.barplot(\n    data=d, x=\"count\", y=\"distclass\", hue=\"fuel_quality\", \n    ax=ax[1], order=my_ord, hue_order=[\"High\", \"Low\"]\n)\nax[1].set_ylabel(\"\")\nax[1].set_xlabel(\"Count\")\nax[1].set_title(\"Trip Distance Class Distribution\")\nax[0].legend(title=\"Fuel Quality\")\nax[1].legend(title=\"Fuel Quality\")\nrects = ax[1].patches[:8]\nlabels = [\n    (r\"$\\bf{\" + str(int(d.loc[(d.distclass==dc)&(d.fuel_quality==\"High\"), \"count\"][0])) + \"}$\" + \n     \" ({:.2f}%)\".format(100*(d.loc[(d.distclass==dc)&(d.fuel_quality==\"High\"), \"count\"][0])\/(d.loc[(d.distclass==dc), \"count\"].sum()))) \n    for dc in names\n]\n\nfor rect, label in zip(rects, labels):\n    width = rect.get_width()\n    ax[1].text(\n        width + 100, rect.get_y() + rect.get_height() \/ 2, label, ha=\"left\", va=\"center\"\n    )\n\n\nplt.tight_layout()\nplt.show()","06d8438c":"fig, ax = plt.subplots(figsize=(12, 10), dpi=600)\ngrouped = data.loc[data.fuel>0,['model', 'fuel_per_100_km']].groupby(['model']).median().sort_values(by='fuel_per_100_km')\nsns.boxplot(\n    data=data[data.fuel>0], x='fuel_per_100_km', y=\"model\", order=grouped.index,\n    flierprops = dict(marker='o', markersize=3,  alpha=0.5, markerfacecolor=\"tab:red\"),\n    hue=\"fuel_quality\"\n)\nax.set_title(\"Fuel Consumed Distribution per Car Model\", fontsize=14)\nax.set_xlabel(\"Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Car Model\")\nax.set_xscale(\"log\")\nplt.legend(title=\"Fuel Quality\")\nplt.tight_layout()\nplt.show()","3251adb3":"fig, ax = plt.subplots(figsize=(10, 5), dpi=600)\ngrouped = data.loc[data.fuel>0,['emission_standard', 'fuel_per_100_km']].groupby(['emission_standard']).median().sort_values(by='fuel_per_100_km')\nsns.boxplot(\n    data=data[data.fuel>0], x='fuel_per_100_km', y=\"emission_standard\", order=grouped.index, orient=\"h\",\n    flierprops = dict(marker='o', markersize=3,  alpha=0.5, markerfacecolor=\"tab:red\"), hue=\"fuel_quality\"\n)\nax.set_title(\"Fuel Consumed Distribution per Emission Standard\", fontsize=14)\nax.set_xlabel(\"Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Emission Standard\")\nax.set_xscale(\"log\")\nplt.legend(title=\"Fuel Quality\")\nplt.tight_layout()\nplt.show()","cf60c8ed":"pd.DataFrame(data.exp_fuel_per_100_km.rename(\"Expected Fuel per 100 km\").describe())","048ca6c5":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\nsns.histplot(x=data.exp_fuel_per_100_km, color=\"tab:orange\", kde=True, element=\"step\")\nax.set_title(\"Distribution of Expected Fuel per 100 km\")\nax.set_xlabel(\"Fuel [l \/ 100 km]\")\nplt.show()","0c7fdad8":"print(\n    \"\\nIf we exclude trips with negative or zero fuel:\",\n    \"\\n{} trips out of {} ({:.2f}%) have an expected fuel consumption lower than the real fuel consumption.\".format(\n        data[(data.fuel>0) & (data.exp_fuel_per_100_km<data.fuel_per_100_km)].shape[0],\n        data[data.fuel>0].shape[0],\n        100 * data[(data.fuel>0) & (data.exp_fuel_per_100_km<data.fuel_per_100_km)].shape[0] \/ data[data.fuel>0].shape[0]\n    )\n)","55170247":"fig, ax = plt.subplots(figsize=(10, 10), dpi=600)\ngrouped = data.loc[:,['model', 'exp_fuel_per_100_km']].groupby(['model']).median().sort_values(by='exp_fuel_per_100_km')\nsns.boxplot(\n    data=data, x='exp_fuel_per_100_km', y=\"model\", order=grouped.index,\n    flierprops = dict(marker='o', markersize=3,  alpha=0.5, markerfacecolor=\"tab:red\")\n)\nax.set_title(\"Expected Fuel Distribution per Car Model\")\nax.set_xlabel(\"Expected Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Car Model\")\nplt.tight_layout()\nplt.show()","de0beb51":"fig, ax = plt.subplots(figsize=(10, 20), dpi=600)\ngrouped = data.loc[:,['driver', 'exp_fuel_per_100_km']].groupby(['driver']).median().sort_values(by='exp_fuel_per_100_km')\nsns.boxplot(\n    data=data, x='exp_fuel_per_100_km', y=\"driver\", order=grouped.index, orient=\"h\",\n    flierprops = dict(marker='o', markersize=3,  alpha=0.5, markerfacecolor=\"tab:red\")\n)\nax.set_title(\"Expected Fuel Distribution per Driver\")\nax.set_xlabel(\"Expected Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Driver ID\")\nplt.tight_layout()\nplt.show()","c20de44e":"fig, ax = plt.subplots(figsize=(10, 5), dpi=600)\ngrouped = data.loc[data.fuel>0,['emission_standard', 'exp_fuel_per_100_km']].groupby(['emission_standard']).median().sort_values(by='exp_fuel_per_100_km')\nsns.boxplot(\n    data=data[data.fuel>0], x='exp_fuel_per_100_km', y=\"emission_standard\", order=grouped.index, orient=\"h\",\n    flierprops = dict(marker='o', markersize=3,  alpha=0.5, markerfacecolor=\"tab:red\")\n)\nax.set_title(\"Expected Fuel Distribution per Emission Standard\", fontsize=14)\nax.set_xlabel(\"Expected Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Emission Standard\")\nplt.tight_layout()\nplt.show()","57d784f5":"fig, ax = plt.subplots(figsize=(10, 3), dpi=600)\ngrouped = data.loc[data.fuel>0,['type', 'exp_fuel_per_100_km']].groupby(['type']).median().sort_values(by='exp_fuel_per_100_km')\nsns.boxplot(\n    data=data[data.fuel>0], x='exp_fuel_per_100_km', y=\"type\", order=grouped.index, orient=\"h\",\n    flierprops = dict(marker='o', markersize=3,  alpha=0.5, markerfacecolor=\"tab:red\")\n)\nplt.suptitle(\"Fuel Consumed Distribution per Engine Type\", fontsize=14)\nax.set_title(\"Pb: Gasoline, ON: Diesel\")\nax.set_xlabel(\"Expected Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Engine Type\")\nplt.tight_layout()\nplt.show()","85379627":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\nsns.kdeplot(\n    data = data.loc[(data.fuel>0)&(data.fuel_per_100_km<40)], x=\"fuel_per_100_km\", label=\"Original Fuel\", fill=True,\n)\nsns.kdeplot(\n    data = data.loc[data.fuel>0], x=\"exp_fuel_per_100_km\", label=\"Expected Fuel\", color=\"tab:orange\", fill=True,\n)\nax.set_title(\"Distribution of Fuel per 100 km\")\nax.set_xlabel(\"Fuel [l \/ 100 km]\")\nplt.legend()\nplt.show()","ba0ede14":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\nsns.scatterplot(data=data[(data.fuel_per_100_km>0)&(data.fuel_per_100_km<60)], x=\"fuel\", y=\"exp_fuel\", alpha=0.2)\nplt.suptitle(\"Consumed Fuel with respect to Expected Fuel\", size=14)\nax.set_title(r\"Trips with Consumed Fuel $\\in (0, 60]$ L \/ 100 km\")\nax.set_xlabel(\"Consumed Fuel [L]\")\nax.set_ylabel(\"Expected Fuel [L]\")\nplt.tight_layout()\nplt.show()","643692b9":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\ndcopy = data[data.fuel_per_100_km>0].copy()\nsns.scatterplot(data=dcopy[(dcopy.fuel_per_100_km<60)], x=\"fuel_per_100_km\", y=\"exp_fuel_per_100_km\", alpha=0.15)\nplt.suptitle(\"Consumed Fuel with respect to Expected Fuel (Distance-Normalized)\", size=14)\nax.set_title(r\"Trips with Consumed Fuel $\\in (0, 60]$ L \/ 100 km\")\nax.set_xlabel(\"Consumed Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Expected Fuel [L \/ 100 km]\")\nplt.tight_layout()\nplt.show()","91c68b45":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\nsns.kdeplot(\n    data = data.loc[(data.fuel>0)&(data.fuel_per_100_km<40)&(data.fuel_quality==\"High\")], x=\"fuel_per_100_km\", fill=True,\n    label=\"High Quality - Original\", color=\"tab:blue\", alpha=0.75\n)\nsns.kdeplot(\n    data = data.loc[(data.fuel>0)&(data.fuel_quality==\"High\")], x=\"exp_fuel_per_100_km\", fill=True,\n    label=\"High Quality - Expected\", color=\"tab:orange\", alpha=0.75\n)\nsns.kdeplot(\n    data = data.loc[(data.fuel>0)&(data.fuel_per_100_km<40)&(data.fuel_quality==\"Low\")], x=\"fuel_per_100_km\", fill=True,\n    label=\"Low Quality - Original\",color=\"tab:cyan\", alpha=0.25\n)\nsns.kdeplot(\n    data = data.loc[(data.fuel>0)&(data.fuel_quality==\"Low\")], x=\"exp_fuel_per_100_km\", fill=True,\n    label=\"Low Quality - Expected\",color=\"tab:red\", alpha=0.25\n)\nax.set_title(\"Distribution of Fuel per 100 km\")\nax.set_xlabel(\"Fuel [l \/ 100 km]\")\nplt.legend()\nplt.show()","04a708fb":"hq_ef = data.loc[data.fuel_quality==\"High\", \"exp_fuel_per_100_km\"]\nlq_ef = data.loc[data.fuel_quality==\"Low\", \"exp_fuel_per_100_km\"]\n\nks_2samp(hq_ef, lq_ef)","0febfcfe":"pd.concat([\n    hq_ef.describe().rename(\"High Quality Trips\"),\n    lq_ef.describe().rename(\"Low Quality Trips\"),\n], axis=1\n)","f5d7c551":"p = sns.lmplot(\n    data=data[(data.fuel_per_100_km>0)&(data.fuel_per_100_km<60)], x=\"fuel\", y=\"exp_fuel\", \n    scatter_kws=dict(alpha=0.25), hue=\"fuel_quality\", markers=['o', 'x'], legend=False\n)\nax = plt.gca()\nfig = p.fig\nfig.set_size_inches(10, 6)\nfig.set_dpi(600)\nplt.suptitle(\"Consumed Fuel with respect to Expected Fuel\", size=14)\nax.set_title(r\"Trips with Consumed Fuel $\\in (0, 60]$ L \/ 100 km\")\nax.set_xlabel(\"Consumed Fuel [L]\")\nax.set_ylabel(\"Expected Fuel [L]\")\nleg = plt.legend(title=\"Fuel Quality\")\nfor lh in leg.legendHandles: \n    lh.set_alpha(1)\nplt.tight_layout()\nplt.show()","ea3c9023":"dcopy = data[data.fuel_per_100_km>0].copy()\np = sns.lmplot(\n    data=dcopy[(dcopy.fuel_per_100_km<60)], x=\"fuel_per_100_km\", y=\"exp_fuel_per_100_km\", \n    scatter_kws=dict(alpha=0.25), hue=\"fuel_quality\", markers=['o', 'x'], legend=False\n)\nax = plt.gca()\nfig = p.fig\nfig.set_size_inches(10, 6)\nfig.set_dpi(600)\nplt.suptitle(\"Consumed Fuel with respect to Expected Fuel (Distance-Normalized)\", size=14)\nax.set_title(r\"Trips with Consumed Fuel $\\in (0, 60]$ L \/ 100 km\")\nax.set_xlabel(\"Consumed Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Expected Fuel [L \/ 100 km]\")\nleg = plt.legend(title=\"Fuel Quality\")\nfor lh in leg.legendHandles: \n    lh.set_alpha(1)\nplt.tight_layout()\nplt.show()","2bf67246":"rec = pd.DataFrame(data.loc[data.fuel>0, [\"fuel_per_100_km\", \"model\", \"driver\", \"emission_standard\", \"type\", \"fuel_quality\"]])\nrec.rename(columns={\"fuel_per_100_km\": \"fuel\"}, inplace=True)\nrec[\"fuel_type\"] = \"Recorded\"\nexp = pd.DataFrame(data.loc[data.fuel>0, [\"exp_fuel_per_100_km\", \"model\", \"driver\", \"emission_standard\", \"type\", \"fuel_quality\"]])\nexp.rename(columns={\"exp_fuel_per_100_km\": \"fuel\"}, inplace=True)\nexp[\"fuel_type\"] = \"Expected\"\nd = pd.concat([rec, exp], axis=0)","18f53adc":"fig, ax = plt.subplots(figsize=(10, 3), dpi=600)\nsns.boxplot(data=d, x=\"fuel\", y=\"fuel_type\", flierprops={\"alpha\":0.25}, hue=\"fuel_quality\")\nax.set_xscale(\"log\")\nax.set_title(\"Distribution of Fuel per 100 km (without negative or null values)\")\nax.set_xlabel(\"Fuel [l \/ 100 km]\")\nax.set_ylabel(\"Fuel\")\nplt.legend(title=\"Fuel Quality\")\nplt.show()","bc77ea9e":"fig, ax = plt.subplots(figsize=(10, 15), dpi=600)\ngrouped = d.loc[d.fuel_type==\"Recorded\",['model', 'fuel']].groupby(['model']).median().sort_values(by='fuel')\nsns.boxplot(\n    data=d, x='fuel', y=\"model\", hue=\"fuel_type\", order=grouped.index, showfliers=False,\n    flierprops = dict(marker='o', markersize=3,  alpha=0.5, markerfacecolor=\"tab:red\")\n)\nax.set_title(\"Fuel Distribution per Car Model\", fontsize=14)\nax.set_xlabel(\"Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Car Model\")\n#ax.set_xscale(\"log\")\nplt.legend(title=\"Fuel\")\nplt.tight_layout()\nplt.show()","e6d5a961":"fig, ax = plt.subplots(figsize=(10, 5), dpi=600)\ngrouped = d.loc[d.fuel_type==\"Recorded\",['emission_standard', 'fuel']].groupby(['emission_standard']).median().sort_values(by='fuel')\nsns.boxplot(\n    data=d, x='fuel', y=\"emission_standard\", hue=\"fuel_type\", order=grouped.index, showfliers=False,\n    flierprops = dict(marker='o', markersize=3,  alpha=0.5, markerfacecolor=\"tab:red\")\n)\nax.set_title(\"Fuel Distribution per Emission Standard\")\nax.set_xlabel(\"Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Emission Standard\")\n#ax.set_xscale(\"log\")\nplt.legend(title=\"Fuel\")\nplt.tight_layout()\nplt.show()","96d84ec4":"fig, ax = plt.subplots(figsize=(10, 3), dpi=600)\ngrouped = d.loc[d.fuel_type==\"Recorded\",['type', 'fuel']].groupby(['type']).median().sort_values(by='fuel')\nsns.boxplot(\n    data=d, x='fuel', y=\"type\", hue=\"fuel_type\", order=grouped.index, showfliers=False,\n    flierprops = dict(marker='o', markersize=3,  alpha=0.5, markerfacecolor=\"tab:red\")\n)\n#ax.set_xscale(\"log\")\nplt.legend(title=\"Fuel\")\nplt.suptitle(\"Fuel Distribution per Engine Type\", fontsize=14)\nax.set_title(\"Pb: Gasoline, ON: Diesel\")\nax.set_xlabel(\"Expected Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Engine Type\")\nplt.tight_layout()\nplt.show()","7d55f10d":"pd.DataFrame(data.fuel_ratio.rename(\"Fuel Ratio\").describe())","d9732f90":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\nplt.hist(data.fuel_ratio[data.fuel_ratio>0], range=(0,5), bins=\"fd\")\nplt.suptitle(\"Distribution of Fuel Ratio\")\nax.set_title(\"(0, 5] restricted interval\")\nax.set_xlabel(\"Original Fuel \/ Expected Fuel\")\nplt.show()","023c076d":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\nsns.kdeplot(data.fuel_ratio[(data.fuel_ratio>0) & (data.fuel_ratio<5)], linewidth=2.5, label=\"Gaussian Kernel Density Estimate\", fill=True)\nax.set_title(\"Distribution of Fuel Ratio\")\nax.set_xlabel(\"Original Fuel \/ Expected Fuel\")\nax.axvline(2\/3, color=\"r\", linestyle=\"--\", label=\"Interval for Good Fuel Measures [0.67, 1.60]\")\nax.axvline(1.6, color=\"r\", linestyle=\"--\")\nax.axvspan(2\/3, 1.6, facecolor='r', alpha=0.25)\nplt.legend()\nplt.show()","708c20de":"data.fuel_ratio[(data.fuel_ratio>0) & (data.fuel_ratio<5)].quantile([0.05, 0.25, 0.5, 0.75, 0.95])","3f1a4a6d":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\nsns.kdeplot(data.fuel_ratio[(data.fuel_ratio>0) & (data.fuel_ratio<5) & (data.fuel_quality==\"High\")], linewidth=2.5, label=\"High Quality Fuel\", fill=True)\nsns.kdeplot(data.fuel_ratio[(data.fuel_ratio>0) & (data.fuel_ratio<5) & (data.fuel_quality==\"Low\")], linewidth=2.5, label=\"Low Quality Fuel\", fill=True)\nax.set_title(\"Distribution of Fuel Ratio\")\nax.set_xlabel(\"Original Fuel \/ Expected Fuel\")\nax.axvline(2\/3, color=\"r\", linestyle=\"--\", label=\"Interval for Good Fuel Measures [0.67, 1.60]\")\nax.axvline(1.6, color=\"r\", linestyle=\"--\")\nax.axvspan(2\/3, 1.6, facecolor='r', alpha=0.25)\nplt.legend()\nplt.show()","5303d134":"hq_fr = data.fuel_ratio[(data.fuel_ratio>0) & (data.fuel_ratio<5) & (data.fuel_quality==\"High\")]\nlq_fr = data.fuel_ratio[(data.fuel_ratio>0) & (data.fuel_ratio<5) & (data.fuel_quality==\"Low\")]\n\nks_2samp(hq_fr, lq_fr)","c5e0a762":"ks_2samp(data.fuel_per_100_km, data.exp_fuel_per_100_km)","f86d0837":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\nplt.hist(data.fuel_per_100_km[(data.fuel_ratio>2\/3) & (data.fuel_ratio<1.6)], alpha=0.75,label=\"Original Fuel\", bins='fd')\nplt.hist(data.exp_fuel_per_100_km[(data.fuel_ratio>2\/3) & (data.fuel_ratio<1.6)], alpha=0.75, label=\"Expected Fuel\", bins='fd')\nax.set_title(\"Distribution of Fuel per 100 km for trips where 0.67 < Fuel Ratio < 1.6\")\nax.set_xlabel(\"Fuel [l \/ 100 km]\")\nplt.legend()\nplt.show()","08bcc709":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\nplt.hist(data.fuel_ratio[(data.fuel_ratio>2\/3) & (data.fuel_ratio<1.6)], bins='fd', density=True, color=\"skyblue\", label=\"Histogram w\/ Freedman\u2013Diaconis rule\")\nsns.kdeplot(data.fuel_ratio[(data.fuel_ratio>2\/3) & (data.fuel_ratio<1.6)], linewidth=2.5, label=\"Gaussian Kernel Density Estimate\")\nax.set_title(\"Distribution of Fuel Ratio within the 0.67 - 1.6 interval\")\nax.set_xlabel(\"Original Fuel \/ Expected Fuel\")\nplt.legend()\nplt.show()","8cff2724":"ks_2samp(data.fuel_per_100_km[(data.fuel_ratio>2\/3) & (data.fuel_ratio<1.6)], data.exp_fuel_per_100_km[(data.fuel_ratio>2\/3) & (data.fuel_ratio<1.6)])","d108db67":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\nplt.hist(data.fuel_per_100_km[(data.fuel_ratio>2\/3) & (data.fuel_ratio<4\/3)], alpha=0.75,label=\"Original Fuel\", bins='fd')\nplt.hist(data.exp_fuel_per_100_km[(data.fuel_ratio>2\/3) & (data.fuel_ratio<4\/3)], alpha=0.75, label=\"Expected Fuel\", bins='fd')\nax.set_title(\"Distribution of Fuel per 100 km for trips where 0.67 < Fuel Ratio < 1.33\")\nax.set_xlabel(\"Fuel [l \/ 100 km]\")\nplt.legend()\nplt.show()","d54558fb":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\nplt.hist(data.fuel_ratio[(data.fuel_ratio>2\/3) & (data.fuel_ratio<4\/3)], bins='fd', density=True, color=\"skyblue\", label=\"Histogram w\/ Freedman\u2013Diaconis rule\")\nsns.kdeplot(data.fuel_ratio[(data.fuel_ratio>2\/3) & (data.fuel_ratio<4\/3)], linewidth=2.5, label=\"Gaussian Kernel Density Estimate\")\nax.set_title(\"Distribution of Fuel Ratio within the 0.67 - 1.33 interval\")\nax.set_xlabel(\"Original Fuel \/ Expected Fuel\")\nplt.legend()\nplt.show()","771c1e03":"ks_2samp(data.fuel_per_100_km[(data.fuel_ratio>2\/3) & (data.fuel_ratio<4\/3)], data.exp_fuel_per_100_km[(data.fuel_ratio>2\/3) & (data.fuel_ratio<4\/3)])","f7c9662f":"def bootstrap_sample(data):\n    return np.random.choice(data, len(data), replace=True)\n\ndef percentile(sample, x):\n     return np.percentile(sample, x)\n\ndef bootstrap_confidence_interval(data, pct, n_reps=10000):\n    bs_samples = np.empty(n_reps)\n    \n    for i in range(n_reps):\n        bs_samples[i] = percentile(bootstrap_sample(data), pct)\n\n    return bs_samples","fe3e13ca":"np.random.seed(42)\nci_99 = bootstrap_confidence_interval(data.fuel_ratio[data.fuel_ratio>0], pct=99)\nci_975 =  bootstrap_confidence_interval(data.fuel_ratio[data.fuel_ratio>0], pct=97.5)\nci_25 = bootstrap_confidence_interval(data.fuel_ratio[data.fuel_ratio>0], pct=2.5)\nci_1 = bootstrap_confidence_interval(data.fuel_ratio[data.fuel_ratio>0], pct=1)","c214b808":"pct1_fr, pct99_fr = np.percentile(ci_1, 5), np.percentile(ci_99, 95)\npct25_fr, pct975_fr = np.percentile(ci_25, 5), np.percentile(ci_975, 95)","c0f3b9ba":"np.random.seed(42)\nci_99_hq = bootstrap_confidence_interval(data.fuel_ratio[(data.fuel_ratio>0)&(data.fuel_quality==\"High\")], pct=99)\nci_975_hq =  bootstrap_confidence_interval(data.fuel_ratio[(data.fuel_ratio>0)&(data.fuel_quality==\"High\")], pct=97.5)\nci_25_hq = bootstrap_confidence_interval(data.fuel_ratio[(data.fuel_ratio>0)&(data.fuel_quality==\"High\")], pct=2.5)\nci_1_hq = bootstrap_confidence_interval(data.fuel_ratio[(data.fuel_ratio>0)&(data.fuel_quality==\"High\")], pct=1)","580d8f54":"pct1_hq_fr, pct99_hq_fr = np.percentile(ci_1_hq, 5), np.percentile(ci_99_hq, 95)\npct25_hq_fr, pct975_hq_fr = np.percentile(ci_25_hq, 5), np.percentile(ci_975_hq, 95)","9b45193a":"fig, axes = plt.subplots(2, 2, figsize=(12, 10), dpi=600)\naxes[1, 1].hist(ci_99, bins=30,label=\"All Trips\", alpha=.75)\naxes[1, 1].hist(ci_99_hq, bins=30, label=\"High Quality Fuel\", alpha=.75)\naxes[1, 1].set_title(\"Bootstrap distribution of 99th percentile\")\naxes[1, 1].legend()\n\naxes[0, 0].hist(ci_1, bins=30, color=\"green\", label=\"All Trips\", alpha=.75)\naxes[0, 0].hist(ci_1_hq, bins=30, color=\"tab:red\",label=\"High Quality Fuel\", alpha=.75)\naxes[0, 0].set_title(\"Bootstrap distribution of 1st percentile\")\naxes[0, 0].legend()\n\naxes[1, 0].hist(ci_975, bins=30, alpha=.75, label=\"All Trips\")\naxes[1, 0].hist(ci_975_hq, bins=30, alpha=.75, label=\"High Quality Fuel\")\naxes[1, 0].set_title(\"Bootstrap distribution of 97.5th percentile\")\naxes[1, 0].legend()\n\naxes[0, 1].hist(ci_25, bins=30, color=\"green\", alpha=.75, label=\"All Trips\")\naxes[0, 1].hist(ci_25_hq, bins=30, color=\"tab:red\", alpha=.75, label=\"High Fuel Quality\")\naxes[0, 1].set_title(\"Bootstrap distribution of 2.5th percentile\")\naxes[0, 1].legend()\nfig.suptitle(\"Fuel Ratio - Bootstrap Percentiles\", fontsize=16)\nfig.tight_layout()\nplt.show()","ec6e2fc7":"print(\"- Fuel Ratio Bootstrap Intervals on all trips -\")\nprint(\"1-99%:     [{:.3f}, {:.3f}]\".format(pct1_fr, pct99_fr))\nprint(\"2.5-97.5%: [{:.3f}, {:.3f}]\".format(pct25_fr, pct975_fr))\n\nprint(\"\\n- Fuel Ratio Bootstrap Intervals on high quality fuel trips -\")\nprint(\"1-99%:     [{:.3f}, {:.3f}]\".format(pct1_hq_fr, pct99_hq_fr))\nprint(\"2.5-97.5%: [{:.3f}, {:.3f}]\".format(pct25_hq_fr, pct975_hq_fr))","c8ba86d9":"def mad(data):\n    \"\"\"\n    Returns the Median Absolute Deviation of the provided variable\n    \"\"\"\n    median = np.median(data)\n    diff = np.abs(data - median)\n    mad = np.median(diff)\n    return mad","856afda3":"mad_fuel = mad(data.fuel_ratio[data.fuel_ratio>0])\nmad_fuel_hq = mad(data.fuel_ratio[(data.fuel_ratio>0)&(data.fuel_quality==\"High\")])\nprint(\"Fuel Ratio MAD (All Trips): {:.4f}\".format(mad_fuel))\nprint(\"Fuel Ratio MAD (High Quality Fuel): {:.4f}\".format(mad_fuel_hq))","9e6de170":"def calculate_bounds(data, z_thresh=(-3.5, 3.5)):\n    \"\"\"\n    Returns the interval of non-outliers using the Modified Z Score method\n    \"\"\"\n    MAD = mad(data)\n    median = np.median(data)\n    c1, c2 = z_thresh[0] * MAD \/ 0.6745, z_thresh[1] * MAD \/ 0.6745\n    return (median + c1, median + c2)","ee564f0a":"b1_fr, b2_fr = calculate_bounds(data.fuel_ratio[data.fuel_ratio>0])\nb1_hq_fr, b2_hq_fr = calculate_bounds(data.fuel_ratio[(data.fuel_ratio>0)&(data.fuel_quality==\"High\")])\nprint(\"- Fuel Ratio Bounds (Z Threshold = 3.5) -\\n\\nAll Trips:\", \"\\nMin: {:.2f}\".format(b1_fr), \"\\nMax: {:.2f}\".format(b2_fr))\nprint(\"\\nHigh Quality Fuel:\", \"\\nMin: {:.2f}\".format(b1_hq_fr), \"\\nMax: {:.2f}\".format(b2_hq_fr))","3ca25cb8":"# Sampling the data for the computationally intensive medcouple algorithm\nnp.random.seed(123)\nsampled_data = np.random.choice(data.fuel_ratio[data.fuel_ratio>0], 10000)\nsampled_data_hq = np.random.choice(data.fuel_ratio[(data.fuel_ratio>0)&(data.fuel_quality==\"High\")], 10000)","61f86452":"mc = medcouple(sampled_data, verbose=False)\nmc_hq = medcouple(sampled_data_hq, verbose=False)","48f84d56":"print(\"Medcouple Values\", \"\\n\\nAll Trips: {:.3f}\".format(mc), \"\\nHigh Quality Fuel Trips: {:.3f}\".format(mc_hq))","1e4af7cf":"q1 = np.quantile(data.fuel_ratio[data.fuel_ratio>0], 0.25)\nq3 = np.quantile(data.fuel_ratio[data.fuel_ratio>0], 0.75)\niqr = q3 - q1\n\nw1_fr = q1 - (1.5 * np.exp(-4 * mc) * iqr)\nw2_fr = q3 + (1.5 * np.exp(3 * mc) * iqr)\n\nprint(\"\\nMedcouple Interval - All Trips\\nMin: {:.3f}\".format(w1_fr), \"\\nMax: {:.3f}\".format(w2_fr))","be892acd":"q1 = np.quantile(data.fuel_ratio[data.fuel_ratio>0], 0.25)\nq3 = np.quantile(data.fuel_ratio[data.fuel_ratio>0], 0.75)\niqr = q3 - q1\n\nw1_hq_fr = q1 - (1.5 * np.exp(-4 * mc_hq) * iqr)\nw2_hq_fr = q3 + (1.5 * np.exp(3 * mc_hq) * iqr)\n\nprint(\"\\nMedcouple Interval - High Quality Fuel Trips\\nMin: {:.3f}\".format(w1_hq_fr), \"\\nMax: {:.3f}\".format(w2_hq_fr))","2bbcf560":"fig, ax = plt.subplots(2, 2, figsize=(12,10), dpi=600)\nplt.suptitle(\"Different Outlier Intervals for Fuel Ratio\\nIntervals Built on All Trips\", size=16)\n\nax[0][0].set_title(\"1st, 99th Bootstrap Percentiles: [{:.2f}, {:.2f}]\".format(pct1_fr, pct99_fr))\nax[0][0].hist(data.fuel_ratio[data.fuel_ratio>0], range=(0, 5.5), bins='fd')\nax[0][0].axvline(data.fuel_ratio[data.fuel_ratio>0].median(), color=\"red\", label=\"Median\")\nax[0][0].axvline(pct1_fr, color=\"tab:green\", ls=\"--\")\nax[0][0].axvline(pct99_fr, color=\"tab:green\", ls=\"--\")\nax[0][0].axvspan(pct1_fr, pct99_fr, facecolor='tab:green', alpha=0.25, label=\"Non-Outlying Interval\")\nax[0][0].legend()\n\nax[0][1].set_title(\"2.5th, 97.5th Bootstrap Percentiles: [{:.2f}, {:.2f}]\".format(pct25_fr, pct975_fr))\nax[0][1].hist(data.fuel_ratio[data.fuel_ratio>0], range=(0, 5.5), bins='fd')\nax[0][1].axvline(data.fuel_ratio[data.fuel_ratio>0].median(), color=\"red\", label=\"Median\")\nax[0][1].axvline(pct25_fr, color=\"tab:green\", ls=\"--\")\nax[0][1].axvline(pct975_fr, color=\"tab:green\", ls=\"--\")\nax[0][1].axvspan(pct25_fr, pct975_fr, facecolor='tab:green', alpha=0.25, label=\"Non-Outlying Interval\")\nax[0][1].legend()\n\nax[1][0].set_title(\"Modified Z-Score interval: [{:.2f}, {:.2f}]\".format(b1_fr, b2_fr))\nax[1][0].hist(data.fuel_ratio[data.fuel_ratio>0], range=(0, 5.5), bins='fd')\nax[1][0].axvline(data.fuel_ratio[data.fuel_ratio>0].median(), color=\"red\", label=\"Median\")\nax[1][0].axvline(b1_fr, color=\"tab:green\", ls=\"--\", label=\"Z-Score = -3.5\")\nax[1][0].axvline(b2_fr, color=\"tab:green\", ls=\"--\", label=\"Z-Score = 3.5\")\nax[1][0].axvspan(b1_fr, b2_fr, facecolor='tab:green', alpha=0.25, label=\"Non-Outlying Interval\")\nax[1][0].legend()\n\nax[1][1].set_title(\"Medcouple Adjusted Interval: [{:.2f}, {:.2f}]\".format(w1_fr, w2_fr))\nax[1][1].hist(data.fuel_ratio[data.fuel_ratio>0], range=(0, 5.5), bins='fd')\nax[1][1].axvline(data.fuel_ratio[data.fuel_ratio>0].median(), color=\"red\", label=\"Median\")\nax[1][1].axvline(w1_fr, color=\"tab:green\", ls=\"--\")\nax[1][1].axvline(w2_fr, color=\"tab:green\", ls=\"--\")\nax[1][1].axvspan(w1_fr, w2_fr, facecolor='tab:green', alpha=0.25, label=\"Non-Outlying Interval\")\nax[1][1].legend()\n\nplt.tight_layout()\nplt.show()","e12d35e5":"fig, ax = plt.subplots(2, 2, figsize=(12,10), dpi=600)\nplt.suptitle(\"Different Outlier Intervals for Fuel Ratio\\nIntervals Built on High Quality Fuel Trips\", size=16)\nd = data.fuel_ratio[(data.fuel_ratio>0)&(data.fuel_quality==\"High\")]\nax[0][0].set_title(\"1st, 99th Bootstrap Percentiles: [{:.2f}, {:.2f}]\".format(pct1_hq_fr, pct99_hq_fr))\nax[0][0].hist(d, range=(0, 5.5), bins='fd', color=\"tab:cyan\")\nax[0][0].axvline(d.median(), color=\"red\", label=\"Median\")\nax[0][0].axvline(pct1_hq_fr, color=\"tab:orange\", ls=\"--\")\nax[0][0].axvline(pct99_hq_fr, color=\"tab:orange\", ls=\"--\")\nax[0][0].axvspan(pct1_hq_fr, pct99_hq_fr, facecolor='tab:orange', alpha=0.25, label=\"Non-Outlying Interval\")\nax[0][0].legend()\n\nax[0][1].set_title(\"2.5th, 97.5th Bootstrap Percentiles: [{:.2f}, {:.2f}]\".format(pct25_hq_fr, pct975_hq_fr))\nax[0][1].hist(d, range=(0, 5.5), bins='fd', color=\"tab:cyan\")\nax[0][1].axvline(d.median(), color=\"red\", label=\"Median\")\nax[0][1].axvline(pct25_hq_fr, color=\"tab:orange\", ls=\"--\")\nax[0][1].axvline(pct975_hq_fr, color=\"tab:orange\", ls=\"--\")\nax[0][1].axvspan(pct25_hq_fr, pct975_hq_fr, facecolor='tab:orange', alpha=0.25, label=\"Non-Outlying Interval\")\nax[0][1].legend()\n\nax[1][0].set_title(\"Modified Z-Score interval: [{:.2f}, {:.2f}]\".format(b1_hq_fr, b2_hq_fr))\nax[1][0].hist(d, range=(0, 5.5), bins='fd', color=\"tab:cyan\")\nax[1][0].axvline(d.median(), color=\"red\", label=\"Median\")\nax[1][0].axvline(b1_hq_fr, color=\"tab:orange\", ls=\"--\", label=\"Z-Score = -3.5\")\nax[1][0].axvline(b2_hq_fr, color=\"tab:orange\", ls=\"--\", label=\"Z-Score = 3.5\")\nax[1][0].axvspan(b1_hq_fr, b2_hq_fr, facecolor='tab:orange', alpha=0.25, label=\"Non-Outlying Interval\")\nax[1][0].legend()\n\nax[1][1].set_title(\"Medcouple Adjusted Interval: [{:.2f}, {:.2f}]\".format(w1_hq_fr, w2_hq_fr))\nax[1][1].hist(d, range=(0, 5.5), bins='fd', color=\"tab:cyan\")\nax[1][1].axvline(d.median(), color=\"red\", label=\"Median\")\nax[1][1].axvline(w1_hq_fr, color=\"tab:orange\", ls=\"--\")\nax[1][1].axvline(w2_hq_fr, color=\"tab:orange\", ls=\"--\")\nax[1][1].axvspan(w1_hq_fr, w2_hq_fr, facecolor='tab:orange', alpha=0.25, label=\"Non-Outlying Interval\")\nax[1][1].legend()\n\nplt.tight_layout()\nplt.show()","2db202a7":"f100km_pos = data.fuel_per_100_km[data.fuel_per_100_km>0]\n\nnp.random.seed(42)\nci_99 = bootstrap_confidence_interval(f100km_pos, pct=99)\nci_975 =  bootstrap_confidence_interval(f100km_pos, pct=97.5)\nci_25 = bootstrap_confidence_interval(f100km_pos, pct=2.5)\nci_1 = bootstrap_confidence_interval(f100km_pos, pct=1)","bc273feb":"pct1_of, pct99_of = np.percentile(ci_1, 5), np.percentile(ci_99, 95)\npct25_of, pct975_of = np.percentile(ci_25, 5), np.percentile(ci_975, 95)","64252b24":"f100km_pos_hq = data.fuel_per_100_km[(data.fuel_per_100_km>0)&(data.fuel_quality==\"High\")]\n\nnp.random.seed(42)\nci_99_hq = bootstrap_confidence_interval(f100km_pos_hq, pct=99)\nci_975_hq =  bootstrap_confidence_interval(f100km_pos_hq, pct=97.5)\nci_25_hq = bootstrap_confidence_interval(f100km_pos_hq, pct=2.5)\nci_1_hq = bootstrap_confidence_interval(f100km_pos_hq, pct=1)","8611ebd2":"pct1_hq_of, pct99_hq_of = np.percentile(ci_1_hq, 5), np.percentile(ci_99_hq, 95)\npct25_hq_of, pct975_hq_of = np.percentile(ci_25_hq, 5), np.percentile(ci_975_hq, 95)","248d98aa":"fig, axes = plt.subplots(2, 2, figsize=(12, 10), dpi=600)\naxes[1, 1].hist(ci_99, bins=30,label=\"All Trips\", alpha=.75)\naxes[1, 1].hist(ci_99_hq, bins=30, label=\"High Quality Fuel\", alpha=.75)\naxes[1, 1].set_title(\"Bootstrap distribution of 99th percentile\")\naxes[1, 1].legend()\n\naxes[0, 0].hist(ci_1, bins=30, color=\"green\", label=\"All Trips\", alpha=.75)\naxes[0, 0].hist(ci_1_hq, bins=30, color=\"tab:red\",label=\"High Quality Fuel\", alpha=.75)\naxes[0, 0].set_title(\"Bootstrap distribution of 1st percentile\")\naxes[0, 0].legend()\n\naxes[1, 0].hist(ci_975, bins=30, alpha=.75, label=\"All Trips\")\naxes[1, 0].hist(ci_975_hq, bins=30, alpha=.75, label=\"High Quality Fuel\")\naxes[1, 0].set_title(\"Bootstrap distribution of 97.5th percentile\")\naxes[1, 0].legend()\n\naxes[0, 1].hist(ci_25, bins=30, color=\"green\", alpha=.75, label=\"All Trips\")\naxes[0, 1].hist(ci_25_hq, bins=30, color=\"tab:red\", alpha=.75, label=\"High Fuel Quality\")\naxes[0, 1].set_title(\"Bootstrap distribution of 2.5th percentile\")\naxes[0, 1].legend()\nfig.suptitle(\"Consumed Fuel - Bootstrap Percentiles\", fontsize=16)\nfig.tight_layout()\nplt.show()","3e688986":"mad_f100km = mad(f100km_pos)\nmad_f100km_hq = mad(f100km_pos_hq)\nb1_of, b2_of = calculate_bounds(f100km_pos, z_thresh=(-3.5, 3.5))\nb1_hq_of, b2_hq_of = calculate_bounds(f100km_pos_hq, z_thresh=(-3.5, 3.5))\n\nprint(\"MAD (All Trips): {:.3f}\".format(mad_f100km))\nprint(\"Median (All Trips): {:.3f}\".format(f100km_pos.median()))\nprint(\"Z-Score Interval:\")\nprint(\"Min: {:.3f}\".format(b1_of), \"\\nMax: {:.3f}\".format(b2_of))\nprint(\"\\nMAD (High Quality Fuel Trips): {:.3f}\".format(mad_f100km_hq))\nprint(\"Median (High Quality Fuel Trips): {:.3f}\".format(f100km_pos_hq.median()))\nprint(\"Z-Score Interval:\")\nprint(\"Min: {:.3f}\".format(b1_hq_of), \"\\nMax: {:.3f}\".format(b2_hq_of))","2a65afaa":"i1, i2 = calculate_bounds(f100km_pos, z_thresh=(-2.5, 3.5))\nprint(\"Z-score threshold: [-2.5, 3.5] (All Trips)\")\nprint(\"\\nMin: {:.3f}\".format(i1), \"\\nMax: {:.3f}\".format(i2))","180e2a88":"l1, l2 = calculate_bounds(f100km_pos, z_thresh=(-2, 3.5))\nprint(\"Z-score threshold: [-2, 3.5] (All Trips)\")\nprint(\"\\nMin: {:.3f}\".format(l1), \"\\nMax: {:.3f}\".format(l2))","21142c62":"fig, ax = plt.subplots(figsize=(10,6), dpi=600)\nplt.hist(f100km_pos, range=(b1_of, 30), bins='fd')\nplt.title(\"Different lower bounds for outliers using the Modified Z-score\")\nplt.suptitle(\"Distribution of Original Fuel per 100 km - All Trips\")\nax.axvline(f100km_pos.median(), color=\"red\", label=\"Median\")\nax.axvline(b1_of, color=\"tab:green\", label=\"Lower bound (Z threshold = -3.5)\", ls=\"--\")\nax.axvline(i1, color=\"tab:orange\", label=\"Lower bound (Z threshold = -2.5)\", ls=\"-\")\nax.axvline(l1, color=\"tab:purple\", label=\"Lower bound (Z threshold = -2)\", ls=\"-.\")\nax.axvline(b2_of, color=\"tab:green\", label=\"Upper bound (Z threshold = 3.5)\", ls=\"--\")\nplt.legend()\nplt.show()","b355d166":"np.random.seed(123)\nsampled_data = np.random.choice(f100km_pos, 10000)\nsampled_data_hq = np.random.choice(f100km_pos_hq, 10000)","7e836797":"mc = medcouple(sampled_data, verbose=False)\nmc_hq = medcouple(sampled_data_hq, verbose=False)","7abf98dc":"print(\"Medcouple Values\", \"\\n\\nAll Trips: {:.3f}\".format(mc), \"\\nHigh Quality Fuel Trips: {:.3f}\".format(mc_hq))","69480961":"q1 = np.quantile(f100km_pos, 0.25)\nq3 = np.quantile(f100km_pos, 0.75)\niqr = q3 - q1\n\nw1_of = q1 - 1.5 * np.exp(-4 * mc) * iqr\nw2_of = q3 + 1.5 * np.exp(3 * mc) * iqr\n\nprint(\"Medcouple Interval - All Trips\\n\\nMin: {:.3f}\".format(w1_of), \"\\nMax: {:.3f}\".format(w2_of))","c5bc20cb":"q1 = np.quantile(f100km_pos_hq, 0.25)\nq3 = np.quantile(f100km_pos_hq, 0.75)\niqr = q3 - q1\n\nw1_hq_of = q1 - 1.5 * np.exp(-4 * mc_hq) * iqr\nw2_hq_of = q3 + 1.5 * np.exp(3 * mc_hq) * iqr\n\nprint(\"Medcouple Interval - High Quality Fuel Trips\\n\\nMin: {:.3f}\".format(w1_hq_of), \"\\nMax: {:.3f}\".format(w2_hq_of))","bddd49de":"fig, ax = plt.subplots(2, 2, figsize=(12,10), dpi=600)\nplt.suptitle(\"Different Outlier Intervals for Original Fuel per 100 km\", size=16)\n\nax[0][0].set_title(\"1st, 99th Bootstrap Percentiles: [{:.2f}, {:.2f}]\".format(pct1_of, pct99_of))\nax[0][0].hist(f100km_pos, range=(-2, 35), bins='fd')\nax[0][0].axvline(f100km_pos.median(), color=\"red\", label=\"Median\")\nax[0][0].axvline(pct1_of, color=\"tab:green\", ls=\"--\")\nax[0][0].axvline(pct99_of, color=\"tab:green\", ls=\"--\")\nax[0][0].axvspan(pct1_of, pct99_of, facecolor='tab:green', alpha=0.25, label=\"Non-Outlying Interval\")\nax[0][0].legend()\n\nax[0][1].set_title(\"2.5th, 97.5th Bootstrap Percentiles: [{:.2f}, {:.2f}]\".format(pct25_of, pct975_of))\nax[0][1].hist(f100km_pos, range=(-2, 35), bins='fd')\nax[0][1].axvline(f100km_pos.median(), color=\"red\", label=\"Median\")\nax[0][1].axvline(pct25_of, color=\"tab:green\", ls=\"--\")\nax[0][1].axvline(pct975_of, color=\"tab:green\", ls=\"--\")\nax[0][1].axvspan(pct25_of, pct975_of, facecolor='tab:green', alpha=0.25, label=\"Non-Outlying Interval\")\nax[0][1].legend()\n\nax[1][0].set_title(\"Modified Z-Score interval: [{:.2f}, {:.2f}]\".format(b1_of, b2_of))\nax[1][0].hist(f100km_pos, range=(-2, 35), bins='fd')\nax[1][0].axvline(f100km_pos.median(), color=\"red\", label=\"Median\")\nax[1][0].axvline(b1_of, color=\"tab:green\", ls=\"--\", label=\"Z-Score = -3.5\")\nax[1][0].axvline(b2_of, color=\"tab:green\", ls=\"--\", label=\"Z-Score = 3.5\")\nax[1][0].axvspan(b1_of, b2_of, facecolor='tab:green', alpha=0.25, label=\"Non-Outlying Interval\")\nax[1][0].legend()\n\nax[1][1].set_title(\"Medcouple Adjusted Interval: [{:.2f}, {:.2f}]\".format(w1_of, w2_of))\nax[1][1].hist(f100km_pos, range=(-2, 35), bins='fd')\nax[1][1].axvline(f100km_pos.median(), color=\"red\", label=\"Median\")\nax[1][1].axvline(w1_of, color=\"tab:green\", ls=\"--\")\nax[1][1].axvline(w2_of, color=\"tab:green\", ls=\"--\")\nax[1][1].axvspan(w1_of, w2_of, facecolor='tab:green', alpha=0.25, label=\"Non-Outlying Interval\")\nax[1][1].legend()\n\nplt.tight_layout()\nplt.show()","9914012c":"fig, ax = plt.subplots(2, 2, figsize=(12,10), dpi=600)\nplt.suptitle(\"Different Outlier Intervals for Original Fuel per 100 km\\nIntervals Built on High Quality Fuel Trips\", size=16)\nd = data.fuel_per_100_km[(data.fuel>0)&(data.fuel_quality==\"High\")]\nax[0][0].set_title(\"1st, 99th Bootstrap Percentiles: [{:.2f}, {:.2f}]\".format(pct1_hq_of, pct99_hq_of))\nax[0][0].hist(d, range=(-2, 35), bins='fd', color=\"tab:cyan\")\nax[0][0].axvline(d.median(), color=\"red\", label=\"Median\")\nax[0][0].axvline(pct1_hq_of, color=\"tab:orange\", ls=\"--\")\nax[0][0].axvline(pct99_hq_of, color=\"tab:orange\", ls=\"--\")\nax[0][0].axvspan(pct1_hq_of, pct99_hq_of, facecolor='tab:orange', alpha=0.25, label=\"Non-Outlying Interval\")\nax[0][0].legend()\n\nax[0][1].set_title(\"2.5th, 97.5th Bootstrap Percentiles: [{:.2f}, {:.2f}]\".format(pct25_hq_of, pct975_hq_of))\nax[0][1].hist(d, range=(-2, 35), bins='fd', color=\"tab:cyan\")\nax[0][1].axvline(d.median(), color=\"red\", label=\"Median\")\nax[0][1].axvline(pct25_hq_of, color=\"tab:orange\", ls=\"--\")\nax[0][1].axvline(pct975_hq_of, color=\"tab:orange\", ls=\"--\")\nax[0][1].axvspan(pct25_hq_of, pct975_hq_of, facecolor='tab:orange', alpha=0.25, label=\"Non-Outlying Interval\")\nax[0][1].legend()\n\nax[1][0].set_title(\"Modified Z-Score interval: [{:.2f}, {:.2f}]\".format(b1_hq_of, b2_hq_of))\nax[1][0].hist(d, range=(-2, 35), bins='fd', color=\"tab:cyan\")\nax[1][0].axvline(d.median(), color=\"red\", label=\"Median\")\nax[1][0].axvline(b1_hq_of, color=\"tab:orange\", ls=\"--\", label=\"Z-Score = -3.5\")\nax[1][0].axvline(b2_hq_of, color=\"tab:orange\", ls=\"--\", label=\"Z-Score = 3.5\")\nax[1][0].axvspan(b1_hq_of, b2_hq_of, facecolor='tab:orange', alpha=0.25, label=\"Non-Outlying Interval\")\nax[1][0].legend()\n\nax[1][1].set_title(\"Medcouple Adjusted Interval: [{:.2f}, {:.2f}]\".format(w1_hq_of, w2_hq_of))\nax[1][1].hist(d, range=(-2, 35), bins='fd', color=\"tab:cyan\")\nax[1][1].axvline(d.median(), color=\"red\", label=\"Median\")\nax[1][1].axvline(w1_hq_of, color=\"tab:orange\", ls=\"--\")\nax[1][1].axvline(w2_hq_of, color=\"tab:orange\", ls=\"--\")\nax[1][1].axvspan(w1_hq_of, w2_hq_of, facecolor='tab:orange', alpha=0.25, label=\"Non-Outlying Interval\")\nax[1][1].legend()\n\nplt.tight_layout()\nplt.show()","053cdfdc":"fig, ax = plt.subplots(5, 2, figsize=(12,12), sharex=\"col\", dpi=600)\nplt.suptitle(\"Distribution of Fuel Ratio and Original Fuel with respect to different intervals\", size=16)\n\nfprops = dict(marker='o', markersize=3,  alpha=0.25)\n\ndcopy = data[data.fuel>0]\n\nd0 = dcopy[(dcopy.fuel_ratio>2\/3) & (dcopy.fuel_ratio<1.6)]\nax[0][0].set_title((r\"Original Fuel When Fuel Ratio $\\in$ [{:.2f}, {:.2f}] \".format(2\/3, 1.6) + r\"$\\bf{(Original)}$\"))\nsns.histplot(data=d0, x='fuel_per_100_km', ax=ax[0][0], kde=True, element=\"step\")\nax[0][0].set_xlabel(\"Consumed Fuel [L \/ 100 km]\")\nax[0][0].annotate(\n    \"Min: {:.3f}\\nMax: {:.3f}\".format(min(d0.fuel_per_100_km), max(d0.fuel_per_100_km)), \n    (0.95, 0.8), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[0][0].annotate(\n    \"Outlying: {} ({:.1f}%)\".format(len(f100km_pos)-d0.shape[0], 100*(1-(d0.shape[0]\/len(f100km_pos)))), \n    (0.95, 0.2), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[0][0].tick_params(labelbottom=True)\n\nd1 = dcopy[(dcopy.fuel_ratio>pct1_fr) & (dcopy.fuel_ratio<pct99_fr)]\nax[1][0].set_title((r\"Original Fuel When Fuel Ratio $\\in$ [{:.2f}, {:.2f}] \".format(pct1_fr, pct99_fr) + r\"$\\bf{(1-99)}$\"))\nsns.histplot(data=d1, x='fuel_per_100_km', ax=ax[1][0],  kde=True, element=\"step\")\nax[1][0].set_xlabel(\"Consumed Fuel [L \/ 100 km]\")\nax[1][0].annotate(\n    \"Min: {:.3f}\\nMax: {:.3f}\".format(min(d1.fuel_per_100_km), max(d1.fuel_per_100_km)), \n    (0.95, 0.8), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[1][0].annotate(\n    \"Outlying: {} ({:.1f}%)\".format(len(f100km_pos)-d1.shape[0], 100*(1-(d1.shape[0]\/len(f100km_pos)))), \n    (0.95, 0.2), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[1][0].tick_params(labelbottom=True)\n\nd2 = dcopy[(dcopy.fuel_ratio>pct25_fr) & (dcopy.fuel_ratio<pct975_fr)]\nax[2][0].set_title((r\"Original Fuel When Fuel Ratio $\\in$ [{:.2f}, {:.2f}] \".format(pct25_fr, pct975_fr) + r\"$\\bf{(2.5-97.5)}$\"))\nsns.histplot(data=d2, x='fuel_per_100_km', ax=ax[2][0], kde=True, element=\"step\")\nax[2][0].set_xlabel(\"Consumed Fuel [L \/ 100 km]\")\nax[2][0].annotate(\n    \"Min: {:.3f}\\nMax: {:.3f}\".format(min(d2.fuel_per_100_km), max(d2.fuel_per_100_km)), \n    (0.95, 0.8), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[2][0].annotate(\n    \"Outlying: {} ({:.1f}%)\".format(len(f100km_pos)-d2.shape[0], 100*(1-(d2.shape[0]\/len(f100km_pos)))), \n    (0.95, 0.2), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[2][0].tick_params(labelbottom=True)\n\nd3 = dcopy[(dcopy.fuel_ratio>b1_fr) & (dcopy.fuel_ratio<b2_fr)]\nax[3][0].set_title((r\"Original Fuel When Fuel Ratio $\\in$ [{:.2f}, {:.2f}] \".format(b1_fr, b2_fr) + r\"$\\bf{(Z-Score)}$\"))\nsns.histplot(data=d3, x='fuel_per_100_km', ax=ax[3][0], kde=True, element=\"step\")\nax[3][0].set_xlabel(\"Consumed Fuel [L \/ 100 km]\")\nax[3][0].annotate(\n    \"Min: {:.3f}\\nMax: {:.3f}\".format(min(d3.fuel_per_100_km), max(d3.fuel_per_100_km)), \n    (0.95, 0.8), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[3][0].annotate(\n    \"Outlying: {} ({:.1f}%)\".format(len(f100km_pos)-d3.shape[0], 100*(1-(d3.shape[0]\/len(f100km_pos)))), \n    (0.95, 0.2), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[3][0].tick_params(labelbottom=True)\n\nd4 = dcopy[(dcopy.fuel_ratio>w1_fr) & (dcopy.fuel_ratio<w2_fr)]\nax[4][0].set_title((r\"Original Fuel When Fuel Ratio $\\in$ [{:.2f}, {:.2f}] \".format(w1_fr, w2_fr) + r\"$\\bf{(Medcouple)}$\"))\nsns.histplot(data=d4, x='fuel_per_100_km', ax=ax[4][0], kde=True, element=\"step\")\nax[4][0].set_xlabel(\"Consumed Fuel [L \/ 100 km]\")\nax[4][0].annotate(\n    \"Min: {:.3f}\\nMax: {:.3f}\".format(min(d4.fuel_per_100_km), max(d4.fuel_per_100_km)), \n    (0.95, 0.8), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[4][0].annotate(\n    \"Outlying: {} ({:.1f}%)\".format(len(f100km_pos)-d4.shape[0], 100*(1-(d4.shape[0]\/len(f100km_pos)))), \n    (0.95, 0.2), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[4][0].tick_params(labelbottom=True)\n\nd00 = dcopy[(dcopy.fuel_ratio>2\/3) & (dcopy.fuel_ratio<1.6)]\nax[0][1].set_title((r\"Fuel Ratio $\\in$ [{:.2f}, {:.2f}] \".format(2\/3, 1.6) + r\"$\\bf{(Original)}$\"))\nsns.histplot(data=d00, x='fuel_ratio', ax=ax[0][1], color=\"tab:red\", kde=True, element=\"step\")\nax[0][1].set_xlabel(\"Fuel Ratio\")\nax[0][1].annotate(\n    \"Min: {:.3f}\\nMax: {:.3f}\".format(min(d00.fuel_ratio), max(d00.fuel_ratio)), \n    (0.95, 0.8), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[0][1].annotate(\n    \"Outlying: {} ({:.1f}%)\".format(len(f100km_pos)-d00.shape[0], 100*(1-(d00.shape[0]\/len(f100km_pos)))), \n    (0.95, 0.2), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[0][1].tick_params(labelbottom=True)\n\nd01 = dcopy[(dcopy.fuel_per_100_km>pct1_of) & (dcopy.fuel_per_100_km<pct99_of)]\nax[1][1].set_title((r\"Fuel Ratio when Original Fuel $\\in$ [{:.2f}, {:.2f}] \".format(pct1_of, pct99_of) + r\"$\\bf{(1-99)}$\"))\nsns.histplot(data=d01, x='fuel_ratio', ax=ax[1][1], color=\"tab:red\", kde=True, element=\"step\")\nax[1][1].set_xlabel(\"Fuel Ratio\")\nax[1][1].annotate(\n    \"Min: {:.3f}\\nMax: {:.3f}\".format(min(d01.fuel_ratio), max(d01.fuel_ratio)), \n    (0.95, 0.8), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[1][1].annotate(\n    \"Outlying: {} ({:.1f}%)\".format(len(f100km_pos)-d01.shape[0], 100*(1-(d01.shape[0]\/len(f100km_pos)))), \n    (0.95, 0.2), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[1][1].tick_params(labelbottom=True)\n\nd02 = dcopy[(dcopy.fuel_per_100_km>pct25_of) & (dcopy.fuel_per_100_km<pct975_of)]\nax[2][1].set_title((r\"Fuel Ratio when Original Fuel $\\in$ [{:.2f}, {:.2f}] \".format(pct25_of, pct975_of) + r\"$\\bf{(2.5-97.5)}$\"))\nsns.histplot(data=d02, x='fuel_ratio', ax=ax[2][1], color=\"tab:red\", kde=True, element=\"step\")\nax[2][1].set_xlabel(\"Fuel Ratio\")\nax[2][1].annotate(\n    \"Min: {:.3f}\\nMax: {:.3f}\".format(min(d02.fuel_ratio), max(d02.fuel_ratio)), \n    (0.95, 0.8), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[2][1].annotate(\n    \"Outlying: {} ({:.1f}%)\".format(len(f100km_pos)-d02.shape[0], 100*(1-(d02.shape[0]\/len(f100km_pos)))), \n    (0.95, 0.2), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[2][1].tick_params(labelbottom=True)\n\nd03 = dcopy[(dcopy.fuel_per_100_km>b1_of) & (dcopy.fuel_per_100_km<b2_of)]\nax[3][1].set_title((r\"Fuel Ratio when Original Fuel $\\in$ [{:.2f}, {:.2f}] \".format(b1_of, b2_of) + r\"$\\bf{(Z-Score)}$\"))\nsns.histplot(data=d03, x='fuel_ratio', ax=ax[3][1], color=\"tab:red\", kde=True, element=\"step\")\nax[3][1].set_xlabel(\"Fuel Ratio\")\nax[3][1].annotate(\n    \"Min: {:.3f}\\nMax: {:.3f}\".format(min(d03.fuel_ratio), max(d03.fuel_ratio)), \n    (0.95, 0.8), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[3][1].annotate(\n    \"Outlying: {} ({:.1f}%)\".format(len(f100km_pos)-d03.shape[0], 100*(1-(d03.shape[0]\/len(f100km_pos)))), \n    (0.95, 0.2), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[3][1].tick_params(labelbottom=True)\n\nd04 = dcopy[(dcopy.fuel_per_100_km>w1_of) & (dcopy.fuel_per_100_km<w2_of)]\nax[4][1].set_title((r\"Fuel Ratio when Original Fuel $\\in$ [{:.2f}, {:.2f}] \".format(w1_of, w2_of) + r\"$\\bf{(Medcouple)}$\"))\nsns.histplot(data=d04, x='fuel_ratio', ax=ax[4][1], color=\"tab:red\", kde=True, element=\"step\")\nax[4][1].set_xlabel(\"Fuel Ratio\")\nax[4][1].annotate(\n    \"Min: {:.3f}\\nMax: {:.3f}\".format(min(d04.fuel_ratio), max(d04.fuel_ratio)), \n    (0.95, 0.8), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[4][1].annotate(\n    \"Outlying: {} ({:.1f}%)\".format(len(f100km_pos)-d04.shape[0], 100*(1-(d04.shape[0]\/len(f100km_pos)))), \n    (0.95, 0.2), xycoords=\"axes fraction\", size=12, ha=\"right\", va=\"center\"\n)\nax[4][1].tick_params(labelbottom=True)\n\nplt.tight_layout()\nplt.show()","396a971b":"fig, ax = plt.subplots(figsize=(10, 6), dpi=600)\ndcopy = data[data.fuel_per_100_km>0].copy()\nsns.scatterplot(data=dcopy[(dcopy.fuel_per_100_km<60)], x=\"fuel_per_100_km\", y=\"exp_fuel_per_100_km\", alpha=0.15)\nplt.axline((0,0), slope=1\/4.63, color=\"tab:red\", label=\"Fuel Ratio = 4.63\", lw=2)\n#plt.axline((0,0), slope=3\/2, color=\"tab:orange\", label=\"Fuel Ratio = 0.83\", lw=2)\nplt.axvline(4.22, color=\"tab:red\", ls=\"--\", label=\"Fuel = 4.22\", lw=2)\nplt.ylim(min(dcopy.exp_fuel_per_100_km)*0.95, max(dcopy.exp_fuel_per_100_km)*1.05)\nax.set_title(\"Consumed Fuel with respect to Expected Fuel (Distance-Normalized)\")\nax.set_xlabel(\"Consumed Fuel [L \/ 100 km]\")\nax.set_ylabel(\"Expected Fuel [L \/ 100 km]\")\nplt.legend()\nplt.show()","3395b5a1":"# All models which contain \"focus\"\nfocus_trips = data.loc[(data.model.str.lower().str.contains(\"focus\")) & (data.fuel_per_100_km>0), ['fuel_per_100_km', 'exp_fuel_per_100_km', 'model']]\n\nfig, axes = plt.subplots(1, 2, figsize=(12,6), sharey=True, dpi=600)\nsns.boxplot(data=focus_trips, x=\"model\", y=\"fuel_per_100_km\", showfliers=False, ax=axes[0])\nsns.boxplot(data=focus_trips, x=\"model\", y=\"exp_fuel_per_100_km\", ax=axes[1])\naxes[0].set_ylabel(\"Fuel [L \/ 100 km]\")\naxes[0].set_title(\"Recorded Fuel\")\naxes[1].set_title(\"Expected Fuel\")\naxes[1].set_ylabel(\"\")\naxes[1].yaxis.set_tick_params(labelbottom=True)\nfig.suptitle(\"Ford Focus Models\")\nplt.show()","f02b0c67":"# All models which contain \"transit\"\ntransit_trips = data.loc[(data.model.str.lower().str.contains(\"transit\")) & (data.fuel_per_100_km>0), ['fuel_per_100_km', 'exp_fuel_per_100_km', 'model']]\ntransit_trips.model = transit_trips.model.str[8:]\n\nfig, axes = plt.subplots(1, 2, figsize=(12,6), sharey=True, dpi=600)\nsns.boxplot(data=transit_trips, y='fuel_per_100_km', x='model', showfliers=False, ax=axes[0])\nsns.boxplot(data=transit_trips, y='exp_fuel_per_100_km', x='model', showfliers=True, ax=axes[1])\naxes[0].set_title(\"Original Fuel\")\naxes[0].set_ylabel(\"Fuel [L \/ 100 km]\")\naxes[1].set_title(\"Expected Fuel\")\naxes[1].set_ylabel(\"\")\naxes[1].yaxis.set_tick_params(labelbottom=True)\nfig.suptitle(\"Ford Transit Models\")\nplt.show()","e8583773":"data.loc[data.emission_standard == 'EURO VI', 'emission_standard'] = \"Euro 6\"\ndata.loc[data.emission_standard == 'EURO 6,2', 'emission_standard'] = \"Euro 6.2\"","d16dd4b3":"euro_6 = data.loc[(data.emission_standard.isin([\"Euro 6\", \"Euro 6.2\"])) & (data.fuel>0)]\n          \nfig, axes = plt.subplots(1, 2, figsize=(10,6), sharey=True, dpi=600)\nsns.boxplot(data=euro_6, y='fuel_per_100_km', x='emission_standard', showfliers=False, ax=axes[0])\nsns.boxplot(data=euro_6, y='exp_fuel_per_100_km', x='emission_standard', showfliers=True, ax=axes[1])\naxes[0].set_title(\"Original Fuel\")\naxes[0].set_ylabel(\"Fuel [L \/ 100 km]\")\naxes[0].set_xlabel(\"Emission Standard\")\naxes[1].set_title(\"Expected Fuel\")\naxes[1].yaxis.set_tick_params(labelbottom=True)\naxes[1].set_xlabel(\"Emission Standard\")\naxes[1].set_ylabel(\"\")\nfig.suptitle(\"Emission Standards\")\nplt.show()","667ff6ba":"The ratio of good fuel trips appears quite stable with respect to the trip distance class (around 32%), at least for trips below 50 km. For longer journeys, in fact, the frequency of higher quality measurements appear to decrease to around 25%.  \nInterestingly, the location shift appears much sharper for shorter trips: for shorter trips, higher quality fuel consumed tends to be significantly greater than lower quality, whereas for longer trips the distributions appear much closer together. For very long trips (above 200 km), the relation appears to be reversed, with higher quality fuel which appears on average lower.  \nThe variability, interestingly, appear similar within all classes, and so does the presence of outliers (although the larger ones all belong to lower quality measures).","ad72534f":"## 3.1 Summary Statistics","550c6925":"## 6.1 Bootstrap Percentiles","eef57d77":"Let us proceed with analyzing the distribution of consumed fuel with respect to other variables.","345088d6":"Similarly to what happens for the original fuel, Fuel Ratio for higher quality measures also looks right-shifted with respect to lower quality measures.  \nLet us test if the two distributions are equivalent using K-S:","1d97ce1e":"Note how, in both cases, the lowest end of the interval would be higher than the current value of 0.67.  \nSince fuel ratio is right-skewed, we might also consider a limit only for the right tail of the distribution, with the only left-tail assumption of fuel ratio being strictly positive (to exclude negative or zero-fuel observations).","9716f16a":"Given the nature of *high quality* fuel recordings (which tend to be shifted towards greater values with respect to the other trips), the bootstrap confidence intervals are also right shifted for both ends if we simply consider those observations.","4fbba8c1":"# 6. Original Fuel Outliers\nWe will now try to define the outliers from the original fuel (per 100 km) variable rather than the fuel ratio. The final results (in terms of which observations would be discarded) should - in theory - not change much, as the fuel ratio is computed from original fuel \/ normalized (expected) fuel, and the latter has no extreme values.  \n  \nWe can surely consider all values below or equal to zero to be derived from measuring errors \/ malfunctionings. Hence, we can proceed to just analyze the distribution of original fuel per 100 km where this is greater than zero.","af0dd306":"## 3.2 Histograms","0e4f1da8":"As previously mentioned, the distribution of expected fuel appears much less variable, shifted towards lower values and without extreme measurements.","49ccb4a0":"### Summary Statistics\n$(0, 40]$ interval","22e37e05":"## 2.8 Further inquiry on Fuel Quality","2297a863":"### Trips with High Quality Fuel","c31f0141":"Let us now switch our focus to the *expected* fuel consumption.  \nGiven:\n\n- $C_{m}$ = Technical Car Fuel Consumption in **mixed conditions** (L \/ 100 km)\n- $C_{u}$ = Technical Car Fuel Consumption on **urban roads** (L \/ 100 km)  \n- $C_{h}$ = Technical Car Fuel Consumption on **highways** (L \/ 100 km)\n- $d$ = Total distance travelled within a given trip (km)\n- $d_{h}$ = Distance travelled on **highways** within a given trip (km)\n- $d_{u}$ = Distance travelled on **urban roads** within a given trip (km)\n\n  \nWe define the **Expected Fuel Consumption** within a given trip, $F_{e}$, as:\n\n$$F_{e} = C_{u} d_{u} + C_{h} d_{h} + C_{m} (d - d_{h} - d_{u})$$\n\nAnd, the equivalend **Expected Fuel Consumption per 100 km**, $F_{e 100}$\n\n$$F_{e 100} = \\frac{F_{e} * d}{100}$$\n","04f57712":"The interval includes negative values: this is probably due to the fact that Fuel Ratio is skewed.","33ff7865":"Null consumption is a much more common occurrance than negative fuel, as it happens in about 12% of the considered trips. As already mentioned, this generally happens when there is no information available about the fuel tank filling received from the Munic box at the end of the journey.  \nWe will proceed to analyze whether these events are equally distributed among the different cars, or if it happens more frequently for some boxes.","29f646a2":"## 8.2 Transit Models","557acf2a":"In general:  \n> **When we remove outliers defined from the Fuel Ratio variable, we tend to consider a wider range of values for Original Fuel with respect to that we would consider if we applied the same outlier method directly on Original Fuel.**  \n\nIn fact:\n\n- 1-99th % of Fuel Ratio -> Original Fuel $\\in [3.03, 37.89]$\n- 1-99th % of Original Fuel -> Original Fuel $\\in [4.22, 29.84]$\n***  \n- 2.5-97.5th % of Fuel Ratio -> Original Fuel $\\in [3.36, 29.67]$\n- 2.5-97.5th % of Original Fuel -> Original Fuel $\\in [5.02, 22.50]$\n***  \n- Modified Z-Score on Fuel Ratio -> Original Fuel $\\in [0.24, 28.93]$\n- Modified Z-Score on Original Fuel -> Original Fuel $\\in [-1.82, 20.03]$\n***\n- Medcouple on Fuel Ratio -> Original Fuel $\\in [3.38, 33.26]$\n- Medcouple on Original Fuel -> Original Fuel $\\in [4.33, 23.99]$\n  \nWhat stated above is true also in the other sense, meaning that:  \n> **If we construct an interval based on outliers defined from original fuel, we'll tend to consider a wider range of values for fuel ratio.**","ceb01879":"Indeed, there seems to have been a common malfunctioning of the recording boxes within the months of August, September, October and November of 2020. Most of the negative fuel trips in this period come from cars with IDs 4 and 39, which stopped being operational in November. For the other cars, the problem appear to have been corrected later on, the only exception being car 13 which is the only one showing a pattern of negative fuel trips within more recent months (May and June 2021).  \nHence, more than a cyclical seasonal problem, it seems like the problem is due to a common malfunctioning which afflicted a restricted amount of cars within few months of 2020.","12a58958":"## 4.2 Summary Statistics","56511cba":"## 4.1 Comparison of Expected and Real Fuel","7c3d305d":"## 4.3 Histograms","c854b079":"# 4. Fuel Ratio","97bec6fe":"### All trips","7e91fbb4":"Trips with zero fuel appear to have mostly arised within the latest months of montioring, starting mostly from the end of November 2020.","72c0b4a0":"### Trips with High Quality Fuel","3afef2f4":"Second problem: we need to check if fuel consumption is similar within the aggregated categories of car models (Ford Transit, Ford Focus) and emission standards (Euro 6 and Euro 6.2). ","1d7a6963":"## 5.1 Bootstrap-based percentiles","58656e2c":"## 8.1 Focus Models","67f0e6c0":"Let us compare the distributions of original and normalized fuel between different models.  \nNote: the observations with original fuel <= 0 were discarded. Also, for ease of visualization, outliers were hidden for the original fuel distribution (boxplots on the left)","c2521c3f":"For ease of use, a function was created to automatically load and merge data coming from Internal Combustion Engine Trips and Cars (see the code [here](https:\/\/www.kaggle.com\/alemontanari\/data-preprocessing\/)).","11664e67":"# 8. Aggregating Categories","00950310":"# 5. Fuel Ratio Outliers","86434949":"### Two-sample Kolmogorov-Smirnov Test","fbe30ff7":"So, which method should we use? Should we discard outlying observations based on **fuel ratio** or on **orginal fuel**? The results (meaning, the data points which are discarded) are not so equivalent.  \nGenerally speaking the same method seems to yield less outliers if applied to the original fuel variable, rather than fuel ratio.  \nHowever, let us keep in mind the distribution of Original Fuel with respect to Expected Fuel:","1ed579e0":"The currently used fuel ratio interval $[0.67, 1.60]$ is definitely shifted too much towards the lower end: it should be re-defined to better reflect the distribuition.","6059dfaf":"According to Iglewicz and Hoaglin (1993), a valid threshsold for the modified Z score is 3.5, meaning that any observation with a Z score $\\notin [-3.5, 3.5]$ should be labelled as a potential outlier.","18c9b747":"Let's try to build bootstrap estimates for the following percentiles:\n* 99 %\n* 97.5 %\n* 2.5 %\n* 1 %","131ed1ad":"Each different car model appear to have its own distribution of fuel. However, some distributions are clearly more variable than others, and many show the presence of outliers or skeweness.","5d427800":"As previously mentioned, we are able to differentiate the fuel measure quality for each trip based on the way it was computed. To sum up, we define:\n- **High Quality Fuel**: all those measures which were derived as *end fuel* - *start fuel*,\n  \nand\n  \n- **Low Quality Fuel**: all those measures which were extrapolated from previous trip data because *start fuel* was missing.  \nRemember that, in this case, we assume that fuel consumption is linearly distributed with respect to distance.","c30fa892":"The Z-Score results on the original fuel variable would indicate that any observation within -1.8 l\/100km and above 20.0 l\/100km should be deemed as non-outlying. This is surely nonsense, as it would lead us to accept as  negative fuel consumption.\nThe problem, as for fuel ratio, arises due to to the skeweness of the distribution, which is even more accentuated here. In fact, the values on the left side of the median are much more concentrated than those on the right side.  \nHow could we solve this? We might consider a higher Z-threshold (the current is - 3.5) for the left side. For instance, we could consider outliers all observations with a modified Z-score $\\notin [-2.5, 3.5]$.","bf86e452":"The scatterplot above would seem to indicate a strong correlation between really consumed and expected fuel.  \nHowever, the association appear to be almost exclusively explained by the distance: in fact, if we \"normalize\" both variables in terms of fuel per 100 km, the plot looks very different:","1136b24d":"The distributions appear to have a very similar shape, but the *higher* quality fuel recordings seem generally higher. In order to test whether the distributions have been generated from the same population, we can use the Kolmogorov-Smirnov Test.\n\n### Two-sample Kolmogorov-Smirnov Test\n- $F_{hq}(x)$ = Cumulative Distribution Function of High Quality Fuel (unknown)\n- $F_{lq}(x)$ = Cumulative Distribution Function of Low Quality Fuel (unknown)  \n  \nK-S allows us to test this system of statistical hypothesis:  \n$H_{0}: F_{hq}(x) = F_{lq}(x)$  \n$H_{1}: F_{hq}(x) \\neq F_{lq}(x)$  ","c411ad10":"The modified Z-score can be defined as follows:  \n$Z Score_{i} = \\frac{0.6745(x_{i} \u2013 Median(X))}{MAD(X)}$\n  \nwhere $MAD(X) = median(|x_{i} - median(X)|)$","1c87bd38":"Given the nature of fuel ratio, let us start with a comparison of the distributions of Recorded and Expected Fuel.","23fc87d8":"## 5.4 Summary of Results","f419e0cb":"## Conclusions\nAll the results shown above indicate that the fuel ratio interval used to define whether a fuel recording is to be considered \"good\" or \"bad\" is to be re-thought, at least for what concerns our analysis. By only considering those trips where fuel ratio lies within 0.67 and 1.6, we would be introducing a large amount of selection bias: if the final goal of the analysis is develop a model able to estimate fuel consumption for any trip, training it on just a subset of data where the original fuel is close to the normalized fuel will cause our model to generalize poorly.  \nOn the other hand, some fuel recordings are undoubtedly \"bad\" and should be discarded: eg, negative fuel, zero fuel or incredibly high measures.  \nIn conclusion, we need to re-define the fuel ratio interval in a way which allows us to exclude bad recordings, but be less strict with respect to realistic measures.\n  \nWe will proceed in two different directions in order to define whether a fuel measurament is good or not, analyzing the results obtained with both:\n\n1. **Define Fuel Ratio Outliers**: remove observations which are anomalous with respect to the comparison of original fuel and expected fuel.\n2. **Define Original Fuel per 100km Outliers**: remove observations which are anomalous with respect to the distribution of consumed fuel per 100 km.\n\nAlternatively, we could simply use the *high quality* fuel measures (33% of the observed trips), which - excluded 2 negative observations - show a much reduced presence of outliers (no zero fuel and fewer excessive fuel recordings). In this case, in fact, the only possibility of erroneous data comes from measurement errors as no extrapolation (which could lead to potential errors if the underlying assumptions are not verified) takes place in the process and the fuel recording is derived strictly from *end fuel* - *start fuel*.","c84a369b":"## 2.3 Histograms","6f37f5cf":"Let us consider the distribution within a more restricted range of values:","d5732348":"The distribution of recorded fuel (per 100km) show a considerable amount of negative and zero values (almost 14000 observations out of 88000, 16%) which are undoubtedly due to wrong measuraments, but also a considerable data points with very high values (the highest being 43700 L per 100 km).  \n  \nIf we focus just on the range 0-25, the distribiution appears to be skewed, with a heavier right tail.\n  \nIn order to determine the possible causes and underlying behaviours, let us consider separate classes of potentially anomalous data points:\n1. **Fuel per 100 km $\\lt$ 0 Liters** (Negative Fuel Consumption)\n2. **Fuel per 100 km $=$ 0 Liters** (Null Fuel Consumption)\n3. **0 $\\lt$ fuel per 100 km $\\leq$ 20 Liters** (Reasonable Fuel Consumption)\n4. **20 $\\lt$ fuel per 100 km $\\leq$ 60 Liters** (High Fuel Consumption)\n5. **fuel per 100 km $\\gt$ 60 Liters** (Excessive Fuel Consumption)","6c8631d5":"If we exclude the 0 and negative observations (surely wrong), this are the 5th, 25th, 50th, 75th and 95th percentiles of the fuel ratio distribution:","8cf4b1e0":"In both extreme fuel consumption classes, the median distance is below 0.6 km, although (at least for the 20-60 class) there is a considerable amount of outliers.","7dfada52":"The overwhelming majority (about 85%) of the observed trips belong to the *reasonable* fuel consumption class ($(0, 20]$). There is a considerable amount of trips (12% of the total) which have zero fuel consumed.  \nLet us analyze the distribution of other variables within different classes of consumed fuel.","def6b7b9":"However, we should probably consider only *high quality* fuel measures, since we have proven that the underlying populations are different and we are not sure what is the cause for that (see paragraph 2.8).","ae1d1bfa":"While it might be reasonable to use a cutoff-point for the low values of the original fuel variable (since the relation is much weaker), it would not make sense to consider an upper limit without considering expected fuel, as the relation appears to be stronger on the right side of the x scale.  ","4d9add96":"## 2.7 Further inquiry on Zero Consumed Fuel\nLet us repeat the same analysis for trips with zero (null) fuel.","3074efb7":"Within each trip, the consumed fuel variable is recorded by a telematics device called \"Munic Box\", which is connected to each car (https:\/\/www.munic.io\/). In most cases the obtained recording is reliable; however, it might happen that, due to a malfunctioning, the returned data is erroneus. There are some cases in which the recording is undoubtedlty wrong (e.g.: negative or null fuel consumption), whereas other cases in which the accuracy of the measure is not so clear.  \nThe goal of this section will be to define boundaries for the consumed fuel variable, in order to determine which data is to be deemed unreliable and to be discarded from the analysis.  \nIn order to determine whether an observation is an outlier or no, we could proceed in 2 different ways:\n  \n1. Analysis of the distribution of Recorded Fuel (per 100 km). In this case, we would find outliers with respect to the underlying distribution of Recorded Fuel.\n2. Comparison of Recorded Fuel (per 100 km) with respect to Expected Fuel (per 100 km). In this case, a fuel recording would be considered an outlier with respect to its \"distance\" from the corresponding expected measure.\n  \nLet us start with a series of definitions of the available variables and how they are currently used.","4eb4c700":"As shown by the barplot, over 2\/3 trips have lower quality fuel measurements: hence, missing data concerning start fuel is unfortunately a very common event.","9232f61a":"A large amount appears to have occurred within the autumn months of 2020 (September to November). The barplot would inidicate a potential seasonal cycle of wrong measuraments.","6ace1db6":"Let us analyze more in detail the phenomenon of negative consumed fuel.","5f0f9b73":"## 5.2 Modified Z-Score (using MAD)","67fe33ed":"Note that, for the second plot (Recorded Fuel Class vs Trip Distance) the log scale of distance was used for ease of representation.\n  \nThe two representation highlight some interesting behaviors.  \n  \nFirst of all, trips with null (zero) fuel recordings (blue boxplots) tend to have generally lower expected fuel with respect to the other classes, while the distribution of trip distance appears very similar to that of the class of trips with *reasonable* fuel consumed ($\\in (0, 20]$ Liters per 100 km, green boxplot).  \n  \nOn the other hand, excessive fuel consumption ($\\gt$ 20 and $\\gt$ 100 L\/100 km, green and red boxplots) appears to be associated with a generally higher expected fuel consumption with respect to *reasonable* fuel consumption trips (orange boxplots). Moreover, both high fuel consumption classes seem to be connected with generally lower distances: in other words, this means that excessive fuel consumption tends to be observed within generally shorter trips.  \n\nThis is further displayed by the summary statistics of Distance within the excessive fuel consumption classes, reported below.","07070257":"### All Trips","7d235f75":"For each trip, we have the following two measuraments:\n  \n- **Recorded Fuel**: Recorded fuel consumption for the given trip as received by the Munic Box.  \nWe can further differentiate fuel measures depending on how they were obtained. We define:\n - *Higher Quality Measures*, whenever fuel is recorded as *end fuel* - *start fuel*;\n - *Lower Quality Measure*, whenever there is no start or end fuel recording available. In this case, fuel is extrapolated from the last time a fuel recording was generated from the box.  \n (See next paragraph for a more in-depth analysis on fuel derivation).\n  \n  \n- **Expected Fuel**: Expected fuel consumption for the given trip, based on the car technical specs and the visited road types.\n  \n- **Fuel Ratio**: $\\frac{recorded fuel}{expected fuel}$, representing how similar is the observed recording to the expected fuel consumption for the given trip.\n\nWe currently have 2 possible situations implemented:\n1. $Fuel Ratio \\in [0.667, 1.6]$  \nIn this case, the original fuel recording is considered **good**, and left as it is.\n    \n  \n2. $Fuel Ratio \\notin [0.667, 1.6] \\iff Fuel Ratio < 0.667$ or $Fuel Ratio > 1.6$  \nIn this case, the original fuel recording is considered **bad**, and replaced with normalized (expected) fuel.\n\n\nThe utilized boundary for fuel ratio has no scientific (or data-driven) base at all, so we will proceed to analyze all of its components.","4322a6bd":"Even for the considered interval of fuel ratio, the distributions appear quite different. In particular, expected fuel appears to be most often an underestimate of the \"real\" consumed fuel. As further confirmation, the fuel ratio distribution is quite heavily skewed.","f68c1a8a":"## 6.2 Modified-Z Score","fc475185":"While the *observed fuel* appears right-shifted in high quality measurements, the *expected* fuel appears to have a very similar distribution in both samples of high and low quality fuel recordings. We already tested that observed fuel CDF is significantly different, so let us proceed to do the same with expected fuel:","e1839de5":"## 2.5 Consumed Fuel and Other variables","e1a0b827":"Only 2 trips among the analyzed ones display negative fuel consumption. These events happened in 2 separate days (June 29, 2021 and April 29, 2021) and seem to have very different characteristics: they come from 2 distinct cars, one is very short while the other is much longer, and one was completed entirely within urban roads whereas the other was mostly conducted on highways. Moreover, as highlighted by the *fuel quality* variable, both measurments are supposedly *high quality* fuel recordings, meaning that thet were computed from *end fuel* - *start fuel* (see equation 1, paragraph 1.2).  \nWe can label these 2 observations as measurement errors and discard them from the analysis. The behavior of negative fuel does not seem neither systematic or frequent, hence we should not be particularly worried.","ddcc7cbd":"### High Quality Fuel Trips","7643624b":"There are some cars for which the entirety of trips was recorded with zero fuel consumption.  \nIndeed, the frequency of occurrance does not seem equally distributed among all Munic boxes: the following 10 cars alone constitute about 99% of the total trips with zero fuel consumed.\n\n1. Car 142\n2. Car 145\n3. Car 146\n4. Car 151\n5. Car 144\n6. Car 149\n7. Car 143\n8. Car 150\n9. Car 147\n10. Car 88\n\nFor all of these cars,the % of trips recorded with zero fuel is above 99.8%. More specifically, all of these excluded car 143 have the entirety of their monitored trips with null fuel. This can lead us to conclude that there is ","95abd150":"## 6.4 Summary of Results","d9d4aace":"**Fuel Ratio** $=\\frac{original fuel}{expected fuel}$","1e946793":" For the following boxplots, outliers are not displayed for ease of representation:","83825113":"If we consider the whole distributions, the p-value is equal to 0 allowing us to safely reject the null hypothesis: the two samples (original and normalized fuel) appear indeed to have been drawn from different distributions.\nHowever, what if we were to consider just intervals of the the two distributions?","91d2a6ea":"## 8.3 Emission Standards","d52b17eb":"# Consumed Fuel Variables and Outliers","500f1d98":"Finally, what if we only analyze trips where original fuel and expected fuel are even more similar to each other?\nLet us try with the subset of trips where the Fuel Ratio (Original \/ Expected) is within 2\/3 (0.67) and 4\/3 (1.33).","d1d82933":"# 1. Definitions","d1869ce3":"The boxplots highlight, as already mentioned, that the only 2 negative fuel trips come from supposedly \"high quality\" measurements, although these values are clearly wrong. However, it is noteworthy that all *zero* fuel trips come from lower quality measures, and so do all of the excessive fuel recordings (above 1000 L \/ 100 km), although the higher quality values show a considerable amount of trips within 60 and 100 L \/ 100 km.  \nMoreover, the location of the 2 distribution appears to be different: the higher quality measures, in fact, look shifted to the right with respect to the lower quality ones.  \n\nLet us analyze the potential differences more in depth by using Gaussian Kernel Density estimates for the two distributions, only considering the interval of values 0-40.","273c675d":"# 2. Recorded Fuel","c99435b4":"### High Quality Fuel Trips","1c5edf2c":"The distribution of Expected Fuel per 100 km has some interesting characteristics, which derive from the way it is computed:\n- It is much less variable than Recorded Fuel\n- It is generally lower than the corresponding Recorded Fuel mesurament\n- It has no *extreme* values\n- It has a very peculiar shape, which highlights the presence of many different underlying bells: probably, related to each car type and driver habits, since it derives from technical specs and visited roads.","5c625650":"In this case, the distribution of the recorded fuel is on average slightly higher for Euro 6.2 than Euro 6. However, the normalized (expected) fuel distribution appears quite similar in terms of location, implying that the difference is rather due to other factors.","7a198dd6":"## 7. Comparison of Results - Fuel Ratio vs Original Fuel Outliers","32a01f5a":"### MAD and Interval Results","98d139aa":"## 4.4 Fuel Ratio Density","ca81d590":"According to the Modified Z-Score:  \n- $Fuel Ratio \\in (-0.01, 2.91]$ if we consider all trips, and\n- $Fuel Ratio \\in (0.07, 2.91]$ if we consider high quality fuel","1c5c1a21":"Even with the stricter interval, the distributions remain significantly different and the fuel ratio is still left-skewed, implying that whenever original fuel is greater than normalized fuel, this difference is generally much greater than the difference observed in the opposite case.","82be37b2":"## 2.1 About Fuel Measurements\n\nThe Munic box allows to receive constant signals from the moving cars. In particular, the trip is divided into *states*, each one containing information about when, where and how the car is being driven. The frequency at which the states are received depends on car activity: e.g., if a car is staying still or moving very slow, it will generate states less frequently, whereas if a car is driving on a highway monitoring will be much more recurrent.  \n  \nAdditionally to information about location, speed and driving dinamics (which is constantly received throughout the whole joruney), data concerning the fuel tank filling and the mileage is generated at the beginning and at the end of the trip. Assuming we have information about:\n  \n- $F_{start} =$ fuel contained in the tank at the **start** of the trip  \n- $F_{end} =$ ml of fuel contained in the tank at the **end** of the trip  \n  \nThen, we can simply derive:\n$$\\textbf{Fuel Consumed} = F_{end} - F_{start} \\tag{1}\\label{eq:1}$$\n  \nUnfortunately, it frequently happens that part of this information is missing. If this is the case, there are different ways to proceed based on what is the information available:\n  \n**$F_{end}$ is missing $\\Rightarrow$** If we do not know the *end fuel*, there is no way to obtain fuel consumption for the trip. In this case, fuel consumption will be saved as zero.  \n**$F_{start}$ is missing and $F_{end}$ is available $\\Rightarrow$** In the case we have the *end fuel* but not the *start fuel*, we can estimate the fuel consumption from the previous measurements. More specifically, the system goes back to the previously completed trips (in chronological order), derives the *states* and finds the first one with available information about the fuel tank filling and the mileage. If none are found, then fuel consumption will be labelled again as zero. On the other hand, if the data is obtained then fuel consumption for the trip can be extrapolated. Given: \n  \n- $F_{end} =$ fuel contained in the tank at the **end** of the trip (in ml)\n- $M_{start} =$ mileage at the **start** of the trip (in meters)\n- $M_{end} =$ mileage at the **end** of the trip (in meters)\n- $F_{previous} =$ fuel contained in the tank at the previous state with data available (in ml)\n- $M_{previous} =$ mileage at the previous state with data available (in meters)\n\nWe can then extrapolate fuel consumption for the trip as:\n  \n$$\\textbf{Fuel Consumed} = \\frac{F_{end} - F_{previous}}{M_{end} - M_{previous}} \\cdot (M_{end} - M_{start})\\tag{2}\\label{eq:2}$$\n\nThis means that we assume that the consumed fuel is linearly distributed among the distance travellend between the end of the trip and the last time a fuel recording was received.  \nWhile this method is generally reliable, the resulting value is an estimate nonetheless. There are indeed cases in which the assumption of linear distribution of fuel across distance is violated (e.g.: if a car is *idling* for a very long time, it will consume a considerable amount of fuel while staying still!).  \nAll things considered, we can safely all recordings derived using formula $\\ref{eq:1}$ as **higher quality** measures, and all recordings derived using formula $\\ref{eq:2}$ as **lower quality** measures.\n\nWe will start by analyzing all fuel recordings as if they were generated from the same underlying population, and we will later discriminate according to measure quality to analyze whether there are significant differences.","9cb06c1d":"## 4.5 Testing the two distributions\n\nWe can also use statistical tests to verify if the distributions of real (observed) and expected fuel are drawn from the same population.\n\n### Two-sample Kolmogorov-Smirnov Test\n- $F_{o}(x)$ = Cumulative Distribution Function of Original Fuel (unknown)\n- $F_{e}(x)$ = Cumulative Distribution Function of Expected (normalized) Fuel (unknown)  \n  \n\n$H_{0}: F_{o}(x) = F_{e}(x)$  \n$H_{1}: F_{o}(x) \\neq F_{e}(x)$  \n\n","14682e49":"In the below table are reported the number of observed trips (both absolute and relative) within each considered fuel consumption class:","7cf7c1e2":"*(Note that trips with negative or zero fuel consumption were not considered for this plot)*  \n  \nIn general, very short trips (below 0.5 km) show a very high variability. Fuel consumption appears, on average, to decreases steadily as trip distance increases until the class of 50 to 100 km. After that, the median consumption appears to be slightly increasing again.  \nThis is made clearer by the representation below were outliers are not displayed.  \n\nSpeaking of outliers:\n- Trips with very low fuel consumption (< 2 L \/ 100 km) seem to be present within almost all classes of trip distance;\n- Trips with very high fuel consumption (> 20, > 60 and > 100 L \/ 100 km) tend to be mostyl concentrated within short trips (below 5 km of distance).  \n\nIf we take into account the frequency of each class within the dataset (displayed by the barplot on the right), it appears clear that the class with the highest relative presence of anomalies is undoubtedly that of very short trips, below 0.5 km (blue boxplot): in fact, 1 trip below 0.5 km out of 3 has a fuel consumption above 20 L \/ 100 km!","7a752d10":"### Loading The Data","2072ab0f":"In both cases, we will consider these 3 techniques for detecting outliers from univariate distributions:\n\n- Bootstrap-based percentiles\n- MAD Score\n- Medcouple boxplots (particularly useful for skewed distributions)\n\nOutliers will be derived for both these distributions: \n- Whole set of trips (high and low quality fuel), excluded non-positive values (fuel > 0)\n- Trips with exclusively high quality fuel, excluded non-positive values (fuel > 0)","1c16880f":"### All Trips","6217f8cc":"## 2.4 Distribution of the fuel classes","6f51bca8":"The average consumption for Transit models appears significantly different both in the observed and expected data: better to leave these separated.","6b2e013c":"## 6.3 Medcouple","d632b3f7":"Let us start with the analysis of the Recorded Fuel variable, which reflects the measurament coming straight from the Munic Box connected to the car.","dfa5c5f2":"The fuel ratio variable actually looks quite Gaussian and less skewed than Recorded Fuel, although it still shows some outliers and a heavier right-tail.  \nLet's analyze the density within the interval (0, 5).","cf858e3a":"## 2.2 Summary Statistics","44926b68":"The two CDF are significantly different. This is probably mostly due to the shift in original fuel within the 2 classes, since the location of expected fuel appears to be very similar within high and low quality fuel trips.","90058b19":"Other solutions are proposed in the literature for identifying outliers in skewed data, such as the already discussed medcouple.","9d1ed0fd":"### All Trips","ed8dcd89":"As displayed by both the histogram and the summary statistics, there are some outlying values which are surely derived from missing and\/or erroneous information, such as: \n- Negative fuel consumption (surely impossible)\n- Zero fuel consumption (generated by missing data about end fuel)\n- Excessive fuel consumption (the highest being 43700 L per 100 km)","9c134863":"The distributions of the bootstrap percentiles are reported on the plots. \n\nSo, if we define \"outliers\" any value above the 99th percentile and below the 1st, according to the boostrap results we might consider this new interval:  \n- $Fuel Ratio \\in [0.73, 4.63]$ (all trips)\n- $Fuel Ratio \\in [0.77, 5.16]$ (high quality fuel trips)\n\nIf we consider the 2.5th and 97.5th percentiles, instead, the interval might look like this:  \n- $Fuel Ratio \\in [0.82, 3.42]$ (all trips)\n- $Fuel Ratio \\in [0.88, 3.69]$ (high quality fuel trips)","c2344b21":"Indeed, the almost entirety of trips with zero fuel comes from the 10 cars listed above. All the others show a quite stable behavior, with a few observations randomly distributed in time.  \nWe can safely conclude that the phenomenon is related to a restricted subset of cars. Observations with zero fuel will be, of course, discarded from the analysis, and so will all of the trips coming from the 10 incriminated cars.","f4862ebc":"The Kolomogorov-Smirnov test leads us to reject the null hypothesis even if we are just considering the distributions of original fuel and normalized fuel when their ratio is within the 0.67-1.6 interval. According to K-S, the distribution functions of the populations from which Original Fuel and Normalized Fuel are drawn are significantly different.","bbc0b06e":"Within all the considered variables classes, the distribution of expected fuel always tends to be lower than that of recorded fuel.  \nLet us now switch to analyzing the Fuel Ratio distribution.","9723457a":"Given that the interval is now symmetrical around 1, of course the center of the distributions looks much closer.","c23865a4":"## 2.6 Further inquiry on Negative Consumed Fuel","8b92ddf3":"## 5.3 Medcouple","d81b3d0d":"Fuel Ratio is derived from the comparison of **original** and **normalized** (expected) fuel. Let us then start by comparing once more these 2 distributions.  \nThe trips with negative or zero fuel consumption will not be considered, as they are clearly erroneous.","91823987":"The medcouple value above 0 indicates that the distribution of fuel ratio is indeed right-skewed. Let us proceed to compute the boundaries using the formula above:","0cd38143":"The p-value is basically zero: this leads us to reject the null hypothesis (the 2 distributions share the same CDF). In other words, the distribution of so-defined low-quality fuel measures seems to be significantly different from that of high-quality measures. This could be because of 2 reasons:\n\n1. **Structural Bias**: we tend to have missing start fuel (and hence we are forced to use extrapolations) for trips where consumed fuel is lower. In this case: \n$$\\text{Less Consumed Fuel} \\Rightarrow \\text{Lower Quality Fuel Recording}$$\n\n2. **Estimation Bias**: we estimate lower fuel consumption **because** of the extrapolation method we are using, possibly because the underlying assumption (linear distribution of fuel per distance) is violated. In this case:\n$$\\text{Less Consumed Fuel} \\Leftarrow \\text{Lower Quality Fuel Recording}$$\n  \nWe hope to find ourselves in situation number 1, since this would allow us to use the entirety of the available data. In fact, if lower fuel implies having to use extrapolations, and not viceversa, our outcome variable is not biased. But if situation number 2 is verified, then we would necessarily have to use higher quality fuel recordings for the analysis.  \nHow can we verify this? Unfortunately, there is no direct way. All we can try to see is if the ratio of higher quality trips is stable with respect to time and for each car, and if the distribution of other variables appear to be constant within the two classes.","7832aa48":"One problem with the modified Z Score method arises from the fact that the variable we are trying to detect outliers from (Fuel Ratio) is skewed. In fact, if we consider a symmetric threshold for the Z Score (like, as we just did, -3.5 to 3.5) but our variable is skewed, we risk to exclude potentially \"good\" observations from the heavier tail (the right one, in this case) and to fail to detect outliers from the lighter tail (left one).  \n  \nOne of the many methods available in the literature to deal with this problem is the **Medcouple adjusted boxplot** (see [Hubert and Van der Veeken, 2007](https:\/\/wis.kuleuven.be\/stat\/robust\/papers\/2008\/outlierdetectionskeweddata-revision.pdf)).\n  \nThe standard boxplot usually defines as *non-outlying* all those observations which fall within the interval:\n  \n$$[Q_{1} \u2212 1.5 \\ \\text{IQR}, Q_{3} + 1.5  \\ \\text{IQR}]$$\n  \nWhere $Q_{1}$ is the first quartile of the distribution, $Q_{3}$ is the third quartile and $\\text{IQR}$ is the Inter Quartile Range (defined as $Q_{3}-Q_{1}$).\n  \nIf the data is Normal, the probability to lie within this range will be approximately 99.3%. However, if the data is skewed, this percentage can be significantly lower. The solution proposed in this case is to replace the previous interval with the following:\n  \n$$[Q_{1} \u2212 (1.5 \\ e^{-4\\text{MC}} \\text{IQR}), Q_{3} + \\ (1.5 e^{3\\text{MC}}  \\ \\text{IQR})]$$ if MC > 0 and\n$$[Q_{1} \u2212 (1.5 \\ e^{-3\\text{MC}} \\text{IQR}), Q_{3} + \\ (1.5 e^{4\\text{MC}}  \\ \\text{IQR})]$$ if MC < 0.\n  \nMC stands for the **medcouple**.  \nThis measure is derived from dividing the variable into observations above and below the median, and computing for each pair $x_{i}, x_{j}$ ($x_{i} < med, x{j} > med$) the function:\n\n$$h(x_{i}, x_{j}) = \\frac{(x_{j} - med) - (med - x_{j})}{x_{j} - x_{i}}$$\n\nFinally, the medocuple is obtained as the median of the results of $h(x_{i}, x_{j})$ computed across each pair.\n$$\\text{MC} = med \\ \\ h(x_{i}, x_{j})$$  \n\nIf a distribution is symmetric, its MC value will be equal to 0, leading back to the original values for the interval. The medcouple has a demonstrated ability to detect skewness and a high resistance to outliers, which make it useful for the goal at hand.  \nGiven that the medcouple requires the computation of $N^{2}$ values, its algorithm is very computationally intensive for large datasets like the one we're analyzing. For this reason we will proceed to use a sample of 10k observations rather than the full 80k+ data points.","965a44ff":"Finally, let us compare the results of detecting outliers from original fuel and from fuel ratio.","b169f724":"Ford Focus models seem to have on average a very similar consumption. Moreover, the observed fuel distribution is almost *reversed* with respect to the expected fuel (the Focus IV is the one with the lowest advertised average fuel consumption, but is the one with the highest observed). We could either collect them all together, or maybe leave just the FOCUS IV separated from the others.","d273e42a":"Although the 2 distributions are significantly different according to the results of Kolmogorov-Smirnov, their location and spread are very similar (whereas, for original fuel, the differences were much more clear).","4d6c07c3":"# 3. Expected Fuel","b71d73c9":"The bootstrap allows us to get confidence intervals for fuel ratio percentiles: meaning that, we could define \"good\" measure all those which lie within some pre-defined couple of percentiles of fuel ratio (eg: 1 and 99, 2.5 and 97.5), using the bootstrap to get an estimate of these values.","22781ae2":"The goal of this additional analysis will be to enquire on particular problems which were highlighted during the [initial analysis](https:\/\/www.kaggle.com\/alemontanari\/ice-model-preliminary-analysis).  \nIn particular:\n1. The presence of outliers and erroneous measuraments in the dependent variable (**Fuel consumed**).\n2. The aggregation of certain car model and emission standard classes within these categorical variables.\n\n","962780e5":"In fact, the amount of fuel consumed per 100 km of distance has an interesting behavior with respect to trip distance, as highlighted by the boxplots below."}}