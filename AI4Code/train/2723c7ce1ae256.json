{"cell_type":{"81f2148e":"code","61a7e135":"code","a2c2b1c7":"code","6c3d51e5":"code","f829c621":"code","14047528":"code","a7a9e8aa":"code","bedcd583":"code","db547f9d":"code","3db3b82e":"code","ddd5ed8e":"code","856c0c79":"code","8cc3a57f":"code","120f2eb6":"code","3fc86342":"code","46cf60b5":"code","6b4d5cd5":"code","a3744d6c":"code","77d1ba15":"code","ad874a04":"code","a73c2b05":"code","fba82e2c":"code","d4192cd9":"code","de45c499":"code","fe54e952":"code","b10a8785":"code","0bef8ca4":"code","2bdbe7f5":"code","58b905ee":"code","6d7f2f21":"code","f7eb3299":"code","b4d426c9":"code","fc5fe4a7":"code","fedb1319":"code","611e29fb":"code","47b63e98":"code","ff42e5b9":"code","aeea3e29":"code","873b5fbd":"code","66c13854":"code","f6de7ba2":"code","b48dfab3":"code","0c70e944":"code","f0716e1f":"code","896b78f9":"code","13aa9041":"code","d0bfcb35":"code","8480de7e":"code","369975d1":"code","df0f74e0":"code","a6a34d37":"code","a20dfb26":"code","94e8766e":"code","2508089f":"code","22442124":"code","d9e213b5":"code","b3b97795":"code","0a2b376f":"code","46a80ece":"code","f522c488":"code","7138debf":"markdown","200777d8":"markdown"},"source":{"81f2148e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","61a7e135":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.image import imread\nimport os","a2c2b1c7":"data_dir = '..\/input\/intel-image-classification'","6c3d51e5":"os.listdir(data_dir)","f829c621":"test_dir = data_dir + '\/seg_test\/seg_test'","14047528":"train_dir = data_dir + '\/seg_train\/seg_train'","a7a9e8aa":"pred_dir = data_dir + '\/seg_pred\/seg_pred'","bedcd583":"plt.imshow(imread(train_dir+'\/buildings\/'+os.listdir(train_dir+'\/buildings')[0])) # an example of a building","db547f9d":"plt.imshow(imread(train_dir+'\/forest\/'+os.listdir(train_dir+'\/forest')[0])) # an example of a forest","3db3b82e":"plt.imshow(imread(train_dir+'\/glacier\/'+os.listdir(train_dir+'\/glacier')[0])) # an example of a glacier","ddd5ed8e":"plt.imshow(imread(train_dir+'\/mountain\/'+os.listdir(train_dir+'\/mountain')[0])) # an example of a mountain","856c0c79":"plt.imshow(imread(train_dir+'\/sea\/'+os.listdir(train_dir+'\/sea')[0])) # an example of a sea","8cc3a57f":"plt.imshow(imread(train_dir+'\/street\/'+os.listdir(train_dir+'\/street')[0])) # an example of street","120f2eb6":"# this is done so if there are any image of variable shapes so we will reshape all of them to an average shape\ndim1 = []\ndim2 = []\n\nfor image_file in os.listdir(train_dir+'\/buildings'):\n    img = imread(train_dir+'\/buildings\/'+image_file)\n    d1,d2,colors = img.shape\n    dim1.append(d1)\n    dim2.append(d2)","3fc86342":"height = int(np.average(d1))\nheight","46cf60b5":"width = int(np.average(d2))\nwidth","6b4d5cd5":"img_shape = (height,width,3)","a3744d6c":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","77d1ba15":"# performing data augmentation and scaling on train set\nimage_gen_train = ImageDataGenerator(rescale=1\/255,\n                                    horizontal_flip=True,\n                                    zoom_range=0.5,\n                                    width_shift_range=0.2,\n                                    height_shift_range=0.2,\n                                    shear_range=0.1,\n                                    rotation_range=10,\n                                    fill_mode='nearest')","ad874a04":"# performing scaling on test set\nimage_gen_test = ImageDataGenerator(rescale=1\/255)","a73c2b05":"# returns an iterator of tuples of (x,y)\n# here x is like our x_train and y like y_train\ntrain_data_gen = image_gen_train.flow_from_directory(directory=train_dir,\n                                                    class_mode='categorical',\n                                                    batch_size=128,\n                                                    color_mode='rgb',\n                                                    shuffle=True,\n                                                    target_size=img_shape[:2])","fba82e2c":"# returns an iterator of tuples of (x,y)\n# here x is like our x_train and y like y_train\ntest_data_gen = image_gen_test.flow_from_directory(directory=test_dir,\n                                                  class_mode='categorical',\n                                                  color_mode='rgb',\n                                                  batch_size=128,\n                                                  target_size=img_shape[:2],\n                                                  shuffle=False)","d4192cd9":"train_data_gen.class_indices","de45c499":"test_data_gen.class_indices","fe54e952":"from tensorflow.keras.applications import MobileNetV2","b10a8785":"# instantiating a base model which we will not be trained and we'll import this model along with trained weights and biases\n# (actually this model was trained on imagenet dataset) we'll not include top of layers of that model because they are less generic\n# instead we'll add on more layers later so that this model could make predictions on this dataset.\nbase_model = MobileNetV2(include_top=False,\n                        weights='imagenet',\n                        input_shape=img_shape)","0bef8ca4":"base_model.trainable = False # freezing the base model layers to avoid it's retraining.","2bdbe7f5":"base_model.summary()","58b905ee":"from tensorflow.keras.layers import Dense,GlobalAveragePooling2D\nfrom tensorflow.keras.models import Sequential","6d7f2f21":"global_layer = GlobalAveragePooling2D() # this layer provides us a vetor of features from the just previous volume of base model.","f7eb3299":"pred_layer = Dense(6) # this layer makes raw predictions i.e, it returns numbers as logits.","b4d426c9":"model = Sequential([base_model,global_layer,pred_layer]) # our modified model.","fc5fe4a7":"model.summary() # see we have some trainable parameters these are due to the layers which we added on later.","fedb1319":"from tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import CategoricalCrossentropy","611e29fb":"model.compile(optimizer=Adam(),\n             loss=CategoricalCrossentropy(from_logits=True),\n             metrics=['accuracy'])","47b63e98":"from tensorflow.keras.callbacks import EarlyStopping","ff42e5b9":"early_stop = EarlyStopping(monitor='val_loss',patience=2)","aeea3e29":"history = model.fit(train_data_gen,\n         validation_data=test_data_gen,\n         epochs=15,\n         callbacks=[early_stop])","873b5fbd":"# trend of losses\nloss_metrics = pd.DataFrame(model.history.history)\nloss_metrics","66c13854":"loss_metrics[['loss','val_loss']].plot(title='LOSS VS EPOCH COUNT')","f6de7ba2":"loss_metrics[['accuracy','val_accuracy']].plot(title='ACCURACY VS EPOCH COUNT')","b48dfab3":"test_data_gen.classes","0c70e944":"predictions = model.predict_classes(test_data_gen)\npredictions","f0716e1f":"from sklearn.metrics import classification_report,confusion_matrix","896b78f9":"print(classification_report(test_data_gen.classes,predictions))","13aa9041":"print(confusion_matrix(test_data_gen.classes,predictions))","d0bfcb35":"def predict_label(class_number):\n    if class_number==0:\n        return 'building'\n    elif class_number==1:\n        return 'forest'\n    elif class_number==2:\n        return 'glacier'\n    elif class_number==3:\n        return 'mountain'\n    elif class_number==4:\n        return 'sea'\n    else:\n        return 'street'","8480de7e":"from tensorflow.keras.preprocessing import image","369975d1":"def predict_name(directory_to_img):\n    pred_image = image.load_img(directory_to_img,target_size=img_shape)\n    pred_image_array = image.img_to_array(pred_image)\n    pred_image_array = pred_image_array\/255\n    pred_image_array = pred_image_array.reshape(1,150,150,3)\n    prediction = model.predict_classes(pred_image_array)[0]\n    plt.imshow(imread(directory_to_img))\n    return predict_label(prediction)","df0f74e0":"predict_name(data_dir+'\/seg_pred\/seg_pred\/'+os.listdir(data_dir+'\/seg_pred\/seg_pred\/')[0])","a6a34d37":"predict_name(data_dir+'\/seg_pred\/seg_pred\/'+os.listdir(data_dir+'\/seg_pred\/seg_pred\/')[1])","a20dfb26":"predict_name(data_dir+'\/seg_pred\/seg_pred\/'+os.listdir(data_dir+'\/seg_pred\/seg_pred\/')[9])","94e8766e":"predict_name(data_dir+'\/seg_pred\/seg_pred\/'+os.listdir(data_dir+'\/seg_pred\/seg_pred\/')[3])","2508089f":"predict_name(data_dir+'\/seg_pred\/seg_pred\/'+os.listdir(data_dir+'\/seg_pred\/seg_pred\/')[4])","22442124":"predict_name(data_dir+'\/seg_pred\/seg_pred\/'+os.listdir(data_dir+'\/seg_pred\/seg_pred\/')[10])","d9e213b5":"predict_name(data_dir+'\/seg_pred\/seg_pred\/'+os.listdir(data_dir+'\/seg_pred\/seg_pred\/')[67])","b3b97795":"predict_name(data_dir+'\/seg_pred\/seg_pred\/'+os.listdir(data_dir+'\/seg_pred\/seg_pred\/')[33])","0a2b376f":"predict_name(data_dir+'\/seg_pred\/seg_pred\/'+os.listdir(data_dir+'\/seg_pred\/seg_pred\/')[37])","46a80ece":"predict_name(data_dir+'\/seg_pred\/seg_pred\/'+os.listdir(data_dir+'\/seg_pred\/seg_pred\/')[72])","f522c488":"# that's it for this notebook soon updating with even better classifier.","7138debf":"from above classification report it is clear that our model performs pretty well on all classes except class 2 and class 3 which corresponds to glacier and mountain respectively. It's great reason which i found could be because many mountains have glaciers surrounding them so our model got confused between whether to say it a mountain or a glacier as in many pictures it is difficult to say whether it's a glacier or a mountain especially when the concentration of ice forming glacier is very less near a mountain.\nbut still i'll try to make a new classifier soon with improved accuracy till then let's make predictions on some image from prediction dataset provided.","200777d8":"In this notebook we will try to make a classifier using pretrained Model**(Mobilnetv2)** trained on imagenet dataset and mould it to make a classifier to make predictions on this dataset"}}