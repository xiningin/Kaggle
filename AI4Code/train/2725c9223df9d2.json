{"cell_type":{"7a077f9e":"code","f5faa58a":"code","4793cbde":"code","613f146d":"code","cfaaf5fc":"code","7de66851":"code","6a04e057":"code","1d5c6157":"code","9970c7bd":"code","e24fb497":"code","a740c99a":"code","1983f88d":"code","4e9558ae":"code","bf026a61":"code","b5247372":"code","b5809072":"code","8a0b7153":"code","c0823b65":"code","a237b4b3":"code","4688f8e6":"code","5d995501":"code","3e902321":"code","eefe12cc":"code","4ec587d6":"code","42dddb32":"code","b8245400":"code","45c18f23":"code","11435e66":"code","3f7ca1ba":"code","78deb3a3":"code","4a474ca3":"code","0e893ab1":"code","69fc9001":"code","0b9b03ef":"code","18ceabca":"code","3a926502":"code","2dde4e51":"code","8a96c9d1":"markdown","29bdea36":"markdown","0a720efc":"markdown","53354bb9":"markdown","357e2177":"markdown","ca6109c1":"markdown"},"source":{"7a077f9e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f5faa58a":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')","4793cbde":"train_data.info()","613f146d":"train_data.head(10)","cfaaf5fc":"test_data.head(10)","7de66851":"print(train_data.shape)\nprint(test_data.shape)","6a04e057":"train_data.describe()","1d5c6157":"train_data.isnull().sum()","9970c7bd":"train_data.drop('Cabin',axis = 1,inplace = True)\ntest_data.drop('Cabin',axis = 1,inplace = True)","e24fb497":"median_age = train_data['Age'].median()\ntrain_data['Age'].replace(np.nan,median_age,inplace = True)\nmedian_age = test_data['Age'].median()\ntest_data['Age'].replace(np.nan,median_age,inplace = True)","a740c99a":"train_data.isnull().sum()","1983f88d":"train_data.corr()","4e9558ae":"sns.countplot(x=\"Survived\",data=train_data)","bf026a61":"sns.countplot(x=\"Survived\", hue = 'Pclass',data=train_data)","b5247372":"sns.countplot(x=\"Survived\", hue = 'Sex',data=train_data)","b5809072":"sns.countplot(x=\"Survived\", hue = 'SibSp',data=train_data)","8a0b7153":"sns.countplot(x=\"Survived\", hue = 'Parch',data=train_data)","c0823b65":"train_data.head(10)","a237b4b3":"sns.violinplot(x=\"Survived\", y=\"Age\", data = train_data, size = 9)","4688f8e6":"sns.countplot(x=\"Survived\",hue = \"Embarked\",data=train_data)","5d995501":"train_data['Sex'] = train_data['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\ntest_data['Sex']  = test_data['Sex'].map( {'female': 1, 'male': 0} ).astype(int)","3e902321":"train_data.head(10)","eefe12cc":"emb_dummy = pd.get_dummies(train_data['Embarked'])\ntrain_data = pd.concat([train_data,emb_dummy], axis = 1)","4ec587d6":"emb_dummy2 = pd.get_dummies(test_data['Embarked'])\ntest_data = pd.concat([test_data,emb_dummy2], axis = 1)","42dddb32":"drop_cols = ['Name','Ticket','Fare','Embarked']\ntrain_data = train_data.drop(drop_cols, axis = 1)\ntrain_data = train_data.drop(['PassengerId'],axis=1)\ntest_data = test_data.drop(drop_cols, axis = 1)","b8245400":"train_data.head(10)","45c18f23":"X_train = train_data.drop(['Survived'], axis = 1).values\nY_train = train_data['Survived'].values","11435e66":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X_train,Y_train,test_size=0.20)","3f7ca1ba":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.preprocessing import StandardScaler","78deb3a3":"# scaling\nscale=StandardScaler().fit(x_train)\nx_train=scale.transform(x_train)\nx_test=scale.transform(x_test)","4a474ca3":"\n\nmodels=[LogisticRegression(),\n        RandomForestClassifier(),\n        SVC(),\n        DecisionTreeClassifier(),\n        KNeighborsClassifier()]\n\nfor model in models:\n\n    results=cross_validate(model,x_train,y_train,cv=10)\n    # accuracy\n    r2=results['test_score'].mean()\n    \n    m=str(model)\n    print('r2 for',m[:m.index('(')],'=',r2)","0e893ab1":"from sklearn.model_selection import GridSearchCV\n\nparam_lr={'penalty':['l1','l2'],\n         'C' : [0.01,0.1,1,10,50,100,200,300],\n         'solver':['liblinear', 'saga']}\n\ngs_lr = GridSearchCV(LogisticRegression(),param_grid = param_lr, scoring=\"accuracy\",n_jobs=-1)\ngs_lr.fit(x_train,y_train)\nbest_lr=gs_lr.best_estimator_\nprint(best_lr)\nprint('score=',gs_lr.best_score_)","69fc9001":"final_model=LogisticRegression(C=0.01, solver='saga')\nfinal_model.fit(X_train,Y_train)     # On complete training data","0b9b03ef":"test_data.head(10)","18ceabca":"test = test_data.drop(['PassengerId'],axis = 1)\nfinal_pred = final_model.predict(test)","3a926502":"test_data['Survived'] = final_pred\ntest_data.drop(['Pclass','Age','Sex','SibSp','Parch','C','Q','S'],inplace=True,axis=1)\ntest_data.head()","2dde4e51":"test_data.to_csv('.\/Titanic_submission.csv', index=False)","8a96c9d1":"## Taking care of Missing Values","29bdea36":"## Importing and Studying Data","0a720efc":"## Final Model","53354bb9":"## Fitting The Model","357e2177":"## Handling categorical variables","ca6109c1":"## Visualization and Analysis"}}