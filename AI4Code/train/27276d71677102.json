{"cell_type":{"794ba929":"code","dbdff0f7":"code","3f9c606d":"code","70377703":"code","9dfdc177":"code","f51aa805":"code","87c4a9f0":"code","d087966d":"code","6623ab95":"code","ef9e8fe1":"code","eca38b8e":"code","f299c339":"code","96b16608":"code","2526cefa":"code","b48ef802":"code","aab15ca1":"code","e0e39316":"code","b3bf8f41":"code","f5db5637":"code","e4fc90b6":"code","1599f0c1":"code","95b254c4":"code","c7435c0b":"code","b3df41d5":"code","947ea951":"code","43373b78":"code","0d679b28":"code","b7744898":"code","d9168a9a":"code","42db3359":"code","67ca2fc1":"code","4ad30007":"markdown"},"source":{"794ba929":"from warnings import filterwarnings\nfilterwarnings('ignore')\n\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.neighbors import LocalOutlierFactor\nimport matplotlib.pyplot as plt\n\n\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge, Lasso, ElasticNet\nfrom sklearn.linear_model import RidgeCV, LassoCV,ElasticNetCV\n\n\n\nHitters=pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")\ndf=Hitters.copy()\ndf.head()","dbdff0f7":"df.info()","3f9c606d":"df.isnull().sum().sum()","70377703":"print(\"New League= A\" ,df[df[\"NewLeague\"]==\"A\"].agg({\"Salary\":\"mean\"}))\nprint(\"New League= N\" ,df[df[\"NewLeague\"]==\"N\"].agg({\"Salary\":\"mean\"}))\nprint(\"League= A\" ,df[df[\"League\"]==\"A\"].agg({\"Salary\":\"mean\"}))\nprint(\"League= N\" ,df[df[\"League\"]==\"N\"].agg({\"Salary\":\"mean\"}))\nprint(\"Division= E\" ,df[df[\"Division\"]==\"E\"].agg({\"Salary\":\"mean\"}))\nprint(\"Division= W\" ,df[df[\"Division\"]==\"W\"].agg({\"Salary\":\"mean\"}))","9dfdc177":"df.loc[(df[\"Salary\"].isnull())& (df['Division'] == 'E'),\"Salary\"]=624.27\ndf.loc[(df[\"Salary\"].isnull())& (df['Division'] == 'W'),\"Salary\"]=450.87\ndf.isnull().sum().sum()","f51aa805":"# One hot Encoding\ndf1 = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\ndf1.head()","87c4a9f0":"clf= LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)\nclf.fit_predict(df1)[0:10]","d087966d":"df1_scores=clf.negative_outlier_factor_\nnp.sort(df1_scores)[0:20]","6623ab95":"sns.boxplot(df1_scores);","ef9e8fe1":"threshold=np.sort(df1_scores)[15]\ndf2=df1.loc[df1_scores > threshold]\nprint(df2.shape)\ndf2.head(2)","eca38b8e":"## Applying Standart Scaler on only X variables","f299c339":"dff=df2.drop([\"Salary\",\"League_N\",\"Division_W\",\"NewLeague_N\"], axis=1)\ncategorical_columns=[col for col in dff.columns if dff[col].dtype==\"object\"]\nnumeric_columns=[num for num in dff.columns if num not in categorical_columns]\nscaler=MinMaxScaler()\nscaled_cols=scaler.fit_transform(dff[numeric_columns])\nscaled_cols=pd.DataFrame(scaled_cols, columns=numeric_columns)\n\n\nscaled_cols\n","96b16608":"ayrikdf=df2.loc[:, \"League_N\":\"NewLeague_N\"]\nayrikdf=pd.DataFrame(ayrikdf)\nayrikdf=ayrikdf.reset_index(drop=True)\nprint(ayrikdf.shape)\nayrikdf.head()","2526cefa":"scaled_cols=pd.DataFrame(scaled_cols)\nscaled_cols=scaled_cols.reset_index(drop=True)\nprint(scaled_cols.shape)\nscaled_cols.head()","b48ef802":"DF=pd.concat([scaled_cols,ayrikdf],axis=1)\nDF.shape","aab15ca1":"# Regression\ndf3=df2.reset_index(drop=True)\ny=df3[\"Salary\"]\nDF=DF.reset_index(drop=True)\n\nX_train, X_test, y_train, y_test = train_test_split(DF, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)\ny_pred=reg_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","e0e39316":"#Ridge Regression\n\nridge_model=Ridge().fit(X_train,y_train)\ny_pred= ridge_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","b3bf8f41":"# Ridge_tuned(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas1, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","f5db5637":"# Ridge_tuned(alpha2)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas2, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","e4fc90b6":"# Ridge_tuned(alpha3)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas3, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","1599f0c1":"# Ridge_tuned(best alpha)\nalphas4 = [59,200]\nridge_cv = RidgeCV(alphas = alphas4, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","95b254c4":"#Lasso Regression\nlasso_model = Lasso().fit(X_train, y_train)\ny_pred=lasso_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","c7435c0b":"#Lasso Tuned(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nlasso_cv_model = LassoCV(alphas = alphas1, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","b3df41d5":"#Lasso Tuned(alpha2)\nlasso_cv_model = LassoCV(alphas = alphas2, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","947ea951":"#Lasso Tuned(alpha3)\nlasso_cv_model = LassoCV(alphas = alphas3, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","43373b78":"# Lasso_tuned(best alpha)\nalphas4 = [23,30,50,100]\nlasso_cv_model = LassoCV(alphas = alphas4, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","0d679b28":"# Elastic Net Regression\nenet_model = ElasticNet().fit(X_train, y_train)\ny_pred = enet_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","b7744898":"#Elastic Net(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nenet_cv_model = ElasticNetCV(alphas = alphas1, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","d9168a9a":"#Elastic Net(alpha2)\nenet_cv_model = ElasticNetCV(alphas = alphas2, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","42db3359":"#Elastic Net(alpha3)\nenet_cv_model = ElasticNetCV(alphas = alphas3, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","67ca2fc1":"enet_params = {\"l1_ratio\": [0,0.001,0.002,0.003,0.005,0.01,0.03,0.05,0.1,0.2,0.4,0.5,0.6,0.8,1],\n               \"alpha\":[21,30,40]}\nenet_model = ElasticNet().fit(DF, y)\nfrom sklearn.model_selection import GridSearchCV\ngs_cv_enet = GridSearchCV(enet_model, enet_params, cv = 10).fit(DF, y)\nprint(gs_cv_enet.best_params_)\nenet_tuned = ElasticNet(**gs_cv_enet.best_params_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","4ad30007":"# 1) Eksik verilere k\u0131r\u0131l\u0131m ortalamalar\u0131 atand\u0131.\n# 2) Ayk\u0131r\u0131 g\u00f6zlemler LOF ile belirlendi,15.de\u011fer sonras\u0131 at\u0131ld\u0131.\n# 3) X de\u011fi\u015fkenlerine MinMax Scaler d\u00f6n\u00fc\u015f\u00fcm\u00fc yap\u0131ld\u0131.\n# 4) 306 veri ile; tune edilmi\u015f ve edilmemi\u015f, en iyi durumda:\n- Regression rmse: 315\n- Ridge rmse: 276\n- Lasso rmse: 278\n- Elastic Net rmse: 278"}}