{"cell_type":{"5a0386a1":"code","a2afc683":"code","0d74d136":"code","6faa119b":"code","0e837f3b":"code","58dca97d":"code","0d5fd1c2":"code","14424a76":"code","2ac0e83a":"code","01e0229c":"code","b45e2c55":"code","e3e9f70f":"code","5f4efd4c":"code","8f7d5b87":"code","f78afd9b":"code","ba97e836":"code","f58ebb09":"code","6531fb43":"code","0e242954":"code","7300493a":"code","ef4eec47":"code","878420fd":"markdown"},"source":{"5a0386a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a2afc683":"dtypes = {\n    'row_id': 'int64', 'timestamp': 'int64', \n    'user_id': 'int32', 'content_id': 'int16',\n    'content_type_id': 'int8', 'task_container_id': 'int16',\n    'user_answer': 'int8', 'answered_correctly': 'int8',\n    'prior_question_elapsed_time': 'float32', 'prior_question_had_explanation': 'boolean',\n}\n\ntrain = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv',\n                    low_memory=False,\n                    nrows=10**7, \n                    dtype=dtypes)\ntrain.head()","0d74d136":"# \u554f\u984c\u306e\u6b63\u89e3\u7387\nquestion_correctly = train.groupby('content_id').agg({'answered_correctly': 'mean'}).reset_index()\nquestion_correctly = question_correctly.rename(columns={'answered_correctly': 'question_correctly'})\nquestion_correctly.head()","6faa119b":"# \u554f\u984c\u3054\u3068\u306e\u89e3\u7b54\u6570\nquestion_answered = train.groupby('content_id').agg({'row_id': 'nunique'}).reset_index()\nquestion_answered = question_answered.rename(columns={'row_id': 'question_answered'})\nquestion_answered.head()","0e837f3b":"# \u554f\u984c\u306b\u6b63\u89e3\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306e\u6570\nquestion_correct_users = train[train.answered_correctly==1].groupby('content_id')\\\n                                                            .agg({'user_id': 'nunique'})\\\n                                                            .reset_index()\nquestion_correct_users = question_correct_users.rename(columns={'user_id': 'question_correct_users'})\nquestion_correct_users.head()","58dca97d":"task_questions = train.groupby('task_container_id').agg({'content_id': 'nunique'}).reset_index()\ntask_questions = task_questions.rename(columns={'content_id': 'task_questions'})\ntask_questions.head()","0d5fd1c2":"train.timestamp","14424a76":"task_correct_time = train[(train.content_type_id==0)&(train.answered_correctly==1)]\\\n                        [['task_container_id', 'timestamp']]\ntask_correct_time = task_correct_time.groupby('task_container_id', as_index=False)\\\n                                    .agg({'timestamp': 'mean'})\\\n                                    .rename(columns={'timestamp': 'task_correct_time'})\ntask_correct_time.head()","2ac0e83a":"train = pd.merge(train, question_correctly, on='content_id', how='left')\ntrain = pd.merge(train, question_answered, on='content_id', how='left')\ntrain = pd.merge(train, question_correct_users, on='content_id', how='left')\n\ntrain = pd.merge(train, task_questions, on='task_container_id', how='left')\ntrain = pd.merge(train, task_correct_time, on='task_container_id', how='left')\ntrain.head()","01e0229c":"train['task_time_diff'] = train.timestamp - train.task_correct_time\ntrain.head()","b45e2c55":"feature_columns = [\n    'task_time_diff', 'prior_question_elapsed_time',\n    'question_correctly', 'question_answered', 'question_correct_users',\n    'task_questions', \n]\navg_elapsed_time = train[train.content_type_id==0].prior_question_elapsed_time.mean()\ntrain.prior_question_elapsed_time = train.prior_question_elapsed_time.fillna(avg_elapsed_time)","e3e9f70f":"import lightgbm as lgb\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\n\n# train = train[train.content_type_id==0]\n# validation = train.groupby('user_id').tail(30)\n# train = train[~train.index.isin(validation.index)]\n# len(validation), len(train)","5f4efd4c":"# X_train, y_train = train[feature_columns].values, train['answered_correctly'].values\n# len(X_train), len(y_train)","8f7d5b87":"# X_test, y_test = validation[feature_columns].values, validation['answered_correctly'].values","f78afd9b":"X = train[train.content_type_id==0][feature_columns].values\ny = train[train.content_type_id==0].answered_correctly.values\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.20, random_state=2)","ba97e836":"params = {\n    'objective': 'binary',\n    'metric': 'auc',\n    'boosting_type': 'gbdt',\n    'feature_pre_filter': False,\n    'lambda_l1': 9.999113738620421,\n    'lambda_l2': 1.0385247329879447e-08,\n    'num_leaves': 113,\n    'feature_fraction': 0.8999999999999999,\n    'bagging_fraction': 1.0,\n    'bagging_freq': 0,\n    'min_child_samples': 20,\n    'num_iterations': 1000,\n    'early_stopping_round': 100\n}\n\n# model = lgb.LGBMClassifier()\n# model.fit(X_train, y_train)\n\ndtrain = lgb.Dataset(X_train, label=y_train)\neval_data = lgb.Dataset(X_test, label=y_test)\n\nmodel = lgb.train(\n            params, \n            dtrain,\n            valid_sets=eval_data\n        )","f58ebb09":"y_pred_prob = model.predict(X_test)","6531fb43":"auc = roc_auc_score(y_test,y_pred_prob)\nprint('AUC :', auc) ","0e242954":"# import matplotlib.pyplot as plt\n\n# # \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u3092\u542b\u3080\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u6210\n# imp_df = pd.DataFrame()\n# imp_df[\"feature\"] = feature_columns\n# imp_df[\"importance\"] = model.feature_importances_\n# imp_df = imp_df.sort_values(\"importance\")\n\n# # \u53ef\u8996\u5316\n# plt.figure(figsize=(7, 10))\n# plt.barh(imp_df.feature, imp_df.importance)\n# plt.xlabel(\"Feature Importance\")\n# plt.show()","7300493a":"question_only_train = train[train.content_type_id==0].copy()\n\navg_question_correctly = question_only_train.question_correctly.mean()\navg_question_answered = question_only_train.question_answered.mean()\navg_question_correct_users = question_only_train.question_correct_users.mean()\navg_task_questions = question_only_train.task_questions.mean()\n\navg_elapsed_time = question_only_train.prior_question_elapsed_time.mean()\navg_task_time_diff = question_only_train.task_time_diff.mean()","ef4eec47":"import riiideducation\nenv = riiideducation.make_env()\n\niter_test = env.iter_test()\nfor (test_df, sample_prediction_df) in iter_test:\n    test_df = pd.merge(test_df, question_correctly, on='content_id', how='left')\n    test_df = pd.merge(test_df, question_answered, on='content_id', how='left')\n    test_df = pd.merge(test_df, question_correct_users, on='content_id', how='left')\n    test_df = pd.merge(test_df, task_questions, on='task_container_id', how='left')\n    test_df = pd.merge(test_df, task_correct_time, on='task_container_id', how='left')\n    test_df['task_time_diff'] = test_df.timestamp - test_df.task_correct_time\n    \n    test_df.question_correctly = test_df.question_correctly.fillna(avg_question_correctly)\n    test_df.question_answered = test_df.question_answered.fillna(avg_question_answered)\n    test_df.question_correct_users = test_df.question_correct_users.fillna(avg_question_correct_users)\n    test_df.task_questions = test_df.task_questions.fillna(avg_task_questions)\n    test_df.task_time_diff = test_df.task_time_diff.fillna(avg_task_time_diff)\n    \n    test_df.prior_question_elapsed_time = test_df.prior_question_elapsed_time.fillna(avg_elapsed_time)\n\n    y_pred = model.predict(test_df[feature_columns].values)\n    test_df['answered_correctly'] = y_pred\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])","878420fd":"# LightGBM\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30ea\u30f3\u30b0\n* \u3068\u308a\u3042\u3048\u305a\u9069\u5f53\u306b\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3057\u3066LightGBM\u3092\u5229\u7528\u3057\u305f\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\n* \u30e2\u30c7\u30eb\u69cb\u7bc9\u304b\u3089\u7d50\u679c\u306e\u30b5\u30d6\u30df\u30c3\u30c8\u307e\u3067\u306e\u6d41\u308c\u3092\u4e00\u56de\u7d44\u3093\u3067\u307f\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u305f"}}