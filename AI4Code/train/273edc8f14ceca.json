{"cell_type":{"f92b9151":"code","b1bf5e8c":"code","b30ae681":"code","0d907076":"code","53754db2":"code","b61996e0":"code","203c93c1":"code","79474376":"code","214adda8":"code","259be021":"code","5ffa2c34":"code","67419e39":"code","5cc1cfa1":"code","ec51493a":"code","bf9b770a":"code","abe1548d":"code","8395eac7":"code","80f7c47b":"code","1ff198bf":"code","a9070850":"code","d8055db0":"code","2293b53e":"code","38aee038":"code","a52b687f":"code","5e7687fc":"code","02324abc":"code","7ca55a2c":"code","de638402":"code","7688854e":"code","97514abf":"code","3b45d298":"code","ab37b2d9":"code","47b3ba24":"code","c9278f8a":"code","81e1ebbd":"code","b495fe6d":"code","685d248c":"markdown","a831e5ed":"markdown","0529a763":"markdown","1c1759d7":"markdown","b22ad1e0":"markdown","115ec93b":"markdown","6d34121e":"markdown","b707fd0d":"markdown","9ee0ea98":"markdown","8746b4c8":"markdown","32bf139c":"markdown","a37f0249":"markdown","462945a1":"markdown","c11b39cb":"markdown","af0573d3":"markdown","f1e25dde":"markdown","737af8a8":"markdown","ef317625":"markdown","efe17d8a":"markdown","53a4f917":"markdown","4fbf68f9":"markdown","8634445b":"markdown","c5695b5b":"markdown","ee5967f7":"markdown","a039f2a3":"markdown","33db99a6":"markdown","653c55fa":"markdown","3b6b2dfe":"markdown","7ba43a36":"markdown","433e76cd":"markdown","817cbb51":"markdown","7bfa23a3":"markdown","eeae3b49":"markdown","c71c5321":"markdown"},"source":{"f92b9151":"\nimport requests\nimport numpy as np \nimport os \nimport pickle\nimport pandas as pd\nfrom collections import defaultdict\n\nimport ee \nimport matplotlib.pyplot as plt \nimport folium\nimport branca.colormap as cmp\nfrom scipy import optimize\nfrom folium.plugins import MarkerCluster,HeatMap,HeatMapWithTime\nfrom IPython import display\n","b1bf5e8c":"#Earth Engine helper functions\n\n# setup to add ee layer to folium\n\ndef add_ee_layer(self, ee_image_object, vis_params, name,opacity=0.75):\n    map_id_dict = ee.Image(ee_image_object).getMapId(vis_params)\n    folium.raster_layers.TileLayer(\n      tiles=map_id_dict['tile_fetcher'].url_format,\n      attr='Map Data &copy; <a href=\"https:\/\/earthengine.google.com\/\">Google Earth Engine<\/a>',\n      name=name,\n      opacity=opacity,\n      overlay=True,\n      control=True\n    ).add_to(self)\n\nfolium.Map.add_ee_layer = add_ee_layer\n\n\ndef get_best_image(image_collection,\n                   year,\n                   area_of_interest,\n                   month=10):\n    '''filter the best image( with the least cloud cover value) for the given year and given month'''\n\n    start_date = ee.Date.fromYMD(**{\n        'day':1 ,\n        'month': month,\n        'year' : year})\n    end_date = ee.Date.fromYMD(**{\n        'day':30 ,\n        'month': month,\n        'year' : year})\n    \n    \n    if not area_of_interest:\n        # sort image by asc order of cloud pixel values\n        img = image_collection.filterDate(start_date,end_date).sort('CLOUD_COVER').first()\n    else:\n        img = image_collection.filterDate(start_date,end_date).sort('CLOUD_COVER').first().clip(area_of_interest)\n        \n    \n    return img ","b30ae681":"#other \ndef show_layer_on_folium(map_bounds,\n                        layer,\n                        title,\n                        viz_params,\n                        colormap=None,\n                        download=True,\n                         opacity=0.90,\n                        basemap= 'OpenStreetMap'):\n    \n    #initiate a map\n    map_1=folium.Map(tiles=basemap)\n    \n    #fit map to our geometry\n    folium.FitBounds(bounds=map_bounds).add_to(map_1)\n    \n    #add ee layer \n    map_1.add_ee_layer(ee_image_object=layer,\n                       vis_params=viz_params,\n                       name=title,\n                      opacity=opacity)\n    \n    #add layer control\n    map_1.add_child(folium.LayerControl())\n    \n    if download:\n        map_1.save(f'{title}.html')\n        return None\n    else:\n        return map_1","0d907076":"#getting data \n\ndef get_df(img_collection_info,\n           bands):\n    '''get a dataframe of values for the given Bands'''\n    \n    \n    df = pd.DataFrame(img_collection_info)\n\n    # Rearrange the header.\n    headers = df.iloc[0]\n    df = pd.DataFrame(df.values[1:], columns=headers)\n\n    # Remove rows without data inside.\n    df = df[['longitude', 'latitude', 'time', *bands]].dropna()\n\n    # Convert the data to numeric values.\n    for band in bands:\n        df[band] = pd.to_numeric(df[band], errors='coerce')\n\n    # Convert the time field into a datetime.\n    df['datetime'] = pd.to_datetime(df['time'], unit='ms')\n\n    #lat-long of point as location\n    df['location']=df.apply(lambda x : (x['latitude'],x['longitude']),axis=1)\n    \n    \n    # Keep the columns of interest.\n    df = df[['datetime','location','longitude', 'latitude',  *bands]]\n\n    return df\n\ndef mean_value(df,band):\n    '''Taking the mean value for a band for each groupby (by date) object for that region,so that we have a mean value of given band for that region'''\n    \n    \n    #mean value for particular instance of time\n    mean_val_df=df.groupby('datetime').agg({f'{band}':['mean','median']}).droplevel(0,axis=1)\n    mean_val_df.reset_index(inplace=True)\n    \n    #sortby date\n    mean_val_df.sort_values(by='datetime',inplace=True)\n    \n    return mean_val_df\n\n\ndef plot_hist(arr,\n              label,\n              ax1=None,\n              n_bins=100):\n    \n    if not ax1:\n        ax1=plt.figure(figsize=(16,8))\n        \n    plt.hist(arr,bins=n_bins)\n    plt.title(f'Histogram {label}')\n    plt.ylabel('Count')\n    plt.xlabel(f'{label}')\n    \ndef plot_monthwise(df,\n                  band,\n                  ax1=None):\n    '''plot seasonal trend in concentration of specified band'''\n        \n    #mean for each month \n    ag_df=df.groupby(df.datetime.dt.month).agg({f'{band}':['mean','max','median']}).droplevel(level=0,axis=1)\n    ag_df.index.name='Month'\n    ag_df.reset_index(inplace=True)\n    \n    if not ax1:\n        ax1=plt.figure(figsize=(16,8))\n        \n    plt.plot(ag_df['Month'],ag_df['mean'],color='b',label='mean')\n#     plt.plot(ag_df['Month'],ag_df['max'],color='r',label='max')\n    plt.plot(ag_df['Month'],ag_df['median'],color='k',label='median')\n    \n    plt.title(f'Monthwise {band}')\n    plt.ylabel(f'monthly aggregated {band}')\n    plt.xlabel('Month of the year')\n    plt.legend()\n    plt.show()\n    \n\ndef plot_datewise(mean_df,\n                 band):\n    plt.figure(figsize=(16,8))\n    plt.plot(mean_df['datetime'],mean_df['mean'],color='b',label='mean')\n    plt.plot(mean_df['datetime'],mean_df['median'],color='k',label='median')\n    \n    plt.title(f'{band} in Delhi Region')\n    plt.legend()\n    plt.xlabel('Date')\n    plt.ylabel(f'{band} (mol\/m^2)')\n    plt.show()\n    \n    ","53754db2":"# Authenticate\n# ee.Authenticate()","b61996e0":"#Initialize\nee.Initialize()","203c93c1":"start_time = '2019-01-01'\nend_time = '2019-12-31'\n\n#scale in meters\nscale = 3000","79474376":"#the dataset with boundaries info\nbounds= ee.FeatureCollection(\"FAO\/GAUL_SIMPLIFIED_500m\/2015\/level2\")\n\n#get geometry bounds \nDelhi_geom = bounds.filter(ee.Filter.eq('ADM2_NAME', 'Delhi')).geometry()\n\n#conv bounds to use in folium maps\ndelhi_bounds=[(i[1],i[0]) for i in Delhi_geom.getInfo().get('coordinates')[0]]\n\n#calculate area in consideration\nDelhi_area=ee.Number(Delhi_geom.area()).divide(1e+6).round().getInfo() \n\nprint(f'Total Administrative area of Delhi is {Delhi_area} Sq-Km')\n\n\n\n# for querying data as a dataset\nget_r_params = {'geometry':Delhi_geom,\n               'scale':scale}","214adda8":"#get Landsat Image for Visualizing Image\ndelhi_landsat = ee.ImageCollection(\"LANDSAT\/LC08\/C02\/T1_L2\").filterBounds(Delhi_geom).filterDate(start_time,end_time)","259be021":"#burnt area index for a radius or around 300km around delhi\nbai=ee.ImageCollection('LANDSAT\/LC08\/C01\/T1_8DAY_BAI').\\\n                        select('BAI').\\\n                        filterBounds(Delhi_geom.buffer(300000)).\\\n                        filterDate(start_time,end_time)\n","5ffa2c34":"#no2 dataset(band :Total vertical column of NO2 (ratio of the slant column density of NO2 and the total air mass factor).)\nno2= ee.ImageCollection(\"COPERNICUS\/S5P\/OFFL\/L3_NO2\").\\\n                        select('NO2_column_number_density').\\\n                        filterBounds(Delhi_geom).\\\n                        filterDate(start_time,end_time)\n\n\n# get a df of entries \nno2_df = get_df(img_collection_info=no2.getRegion(**get_r_params).getInfo(),\n               bands=['NO2_column_number_density'])\n\n#take only positive values\nno2_df= no2_df[no2_df['NO2_column_number_density']>0]\n\n#datewise aggregation of data \nno2_mean=mean_value(no2_df,\n                   band='NO2_column_number_density')\n","67419e39":"# SO2 dataset(band:SO2 vertical column density at ground level)\nso2=ee.ImageCollection(\"COPERNICUS\/S5P\/OFFL\/L3_SO2\").\\\n                        select('SO2_column_number_density').\\\n                        filterBounds(Delhi_geom).\\\n                        filterDate(start_time,end_time)\n\n# get a df of entries \nso2_df = get_df(so2.getRegion(**get_r_params).getInfo(),\n               bands = ['SO2_column_number_density'])\n\n#Because of noise on the data, negative vertical column values are often observed in particular over clean regions or for low \n# SO2 emissions. It is recommended not to filter these values except for outliers, i.e. for vertical columns lower than -0.001 mol\/m^2.\nso2_df= so2_df[so2_df['SO2_column_number_density']>-0.001]\n\n#datewise mean\nso2_mean=mean_value(so2_df,\n                   band='SO2_column_number_density')","5cc1cfa1":"# O3 dataset(band:SO2 vertical column density at ground level)\nco=ee.ImageCollection(\"COPERNICUS\/S5P\/OFFL\/L3_CO\").\\\n                        select('CO_column_number_density').\\\n                        filterBounds(Delhi_geom).\\\n                        filterDate(start_time,end_time)\n\n# get a df of entries \nco_df = get_df(co.getRegion(**get_r_params).getInfo(),\n               bands = ['CO_column_number_density'])\n\n#take positive vals\nco_df=co_df[co_df['CO_column_number_density']>0]\n\n\n#datewise mean\nco_mean=mean_value(co_df,\n                   band='CO_column_number_density')","ec51493a":"#aerosol index: A measure of the prevalence of aerosols in the atmosphere.\naero_in = ee.ImageCollection(\"COPERNICUS\/S5P\/OFFL\/L3_AER_AI\").\\\n                            select('absorbing_aerosol_index').\\\n                            filterBounds(Delhi_geom).\\\n                            filterDate(start_time,end_time)\n# get a df of entries \naero_in_df = get_df(aero_in.getRegion(**get_r_params).getInfo(),\n                   bands=['absorbing_aerosol_index'])\n\n#datewise mean\nai_mean=mean_value(aero_in_df,\n                   band='absorbing_aerosol_index')","bf9b770a":"# image from the collection \nimage = get_best_image(image_collection=delhi_landsat,\n                       year=2019,\n                       area_of_interest=Delhi_geom,\n                       month=5)\n\n\n# checking the date when image was ingested \nprint('Date of Ingestion')\nee.Date(image.get('system:time_start')).format().getInfo()\n\nimage_viz_params = {\n    'bands': ['SR_B4','SR_B3','SR_B2'],\n    'min': 0,\n    'max': 65535,\n    'gamma': [0.95, 1.1, 1]\n                    }\n\nshow_layer_on_folium(map_bounds=delhi_bounds,\n                    layer=image,\n                    title='RGB_image',\n                    viz_params=image_viz_params,\n                    colormap=None,\n                    download=True,\n                    basemap= 'OpenStreetMap',\n                     opacity=0.95)\n\n\nprint('Color Composite Raster')\n#display downloaded map\ndisplay.IFrame(src= 'RGB_image.html',\n                       height=500,\n                       width=1000)\n","abe1548d":"#get a dem of surrounding radius of 100 km\n\ndem = ee.Image(\"NASA\/NASADEM_HGT\/001\").clip(Delhi_geom.buffer(100000)).select('elevation')\n\n# map\nmap_1 = folium.Map()\n\nfolium.FitBounds(delhi_bounds).add_to(map_1)\n\n\n# palette = ListedColormap([\"white\", \"tan\", \"springgreen\", \"darkgreen\"])\ncolor_list=['green','yellow','orange','brown','black']\n\nviz1 = {'bands':['elevation'],\n        'min': 120, 'max': 400, \n        'palette': color_list}\n\n#add color legend\ncbar = cmp.StepColormap(\n color_list,\n vmin=120, vmax=400,\n caption='Elevation'\n).add_to(map_1)\n\n\n# Add the image layer to the map and display it.\nmap_1.add_ee_layer(dem,viz1,'DEM')\nmap_1.add_child(folium.LayerControl())\n\n\nprint('Digital Elevation Model')\n\n\n#save map \nmap_1.save('DEM.html')\n\nmap_1","8395eac7":"# mean image from the collection from april-june\nimages1 = bai.filterDate('2019-04-01','2019-06-30').median().clip(Delhi_geom.buffer(300000))\n# image from the collection from oct to december\nimages2 =  bai.filterDate('2019-10-01','2019-12-31').median().clip(Delhi_geom.buffer(300000))\n\nimage_viz_params = {'min': 0, 'max': 100,\n    'palette': ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n}\n#initiate a dual map\nmap_1=folium.plugins.DualMap(layout='horizontal')\n\n#fit map to our geometry\nfolium.FitBounds(bounds=delhi_bounds).add_to(map_1)\n\n#add ee layer \nmap_1.m1.add_ee_layer(ee_image_object=images1,\n                     vis_params=image_viz_params,\n                     name='Summer(Apr-June) BAI',\n                     opacity=0.75)\n\n\n#add ee layer \nmap_1.m2.add_ee_layer(ee_image_object=images2,\n                     vis_params=image_viz_params,\n                     name='Winter(Oct-Dec) BAI',\n                     opacity=0.75)\n\ncbar = cmp.StepColormap(\n image_viz_params['palette'],\n vmin=image_viz_params['min'], vmax=image_viz_params['max'],\n caption='SO2 Concentration'\n)\n\n#add colorbar\ncbar.add_to(map_1.m1)\n\n\n#add layer control\nmap_1.add_child(folium.LayerControl())\n#save \nmap_1.save('bai_image.html')\n\n\nprint('Burnt area Index (left-summer,right-winter)')\n\nmap_1","80f7c47b":"# mean image from the collection from april-june\nimage1 = no2.filterDate('2019-04-01','2019-06-30').mean().clip(Delhi_geom)\n# image from the collection from oct to december\nimage2 =  no2.filterDate('2019-10-01','2019-12-31').mean().clip(Delhi_geom)\n\nimage_viz_params = {'min': 0.00001, 'max': 0.0003,\n    'palette': ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n}\n#initiate a dual map\nmap_1=folium.plugins.DualMap(layout='horizontal')\n\n#fit map to our geometry\nfolium.FitBounds(bounds=delhi_bounds).add_to(map_1)\n\n#add ee layer \nmap_1.m1.add_ee_layer(ee_image_object=image1,\n                     vis_params=image_viz_params,\n                     name='Summer(Apr-June) NO2',\n                     opacity=0.75)\n\n\n#add ee layer \nmap_1.m2.add_ee_layer(ee_image_object=image2,\n                     vis_params=image_viz_params,\n                     name='Winter(Oct-Dec) NO2',\n                     opacity=0.75)\n\ncbar = cmp.StepColormap(\n image_viz_params['palette'],\n vmin=image_viz_params['min'], vmax=image_viz_params['max'],\n caption='NO2 Concentration'\n)\n\n#add colorbar\ncbar.add_to(map_1.m1)\n\n\n#add layer control\nmap_1.add_child(folium.LayerControl())\n#save \nmap_1.save('no2_image.html')\n\n\nprint('Nitrogen dioxide layer (left-summer,right-winter)')\n\n#display downloaded map\ndisplay.IFrame(src= 'no2_image.html',\n               height=500,\n               width=1000)","1ff198bf":"sumr = no2_mean[(no2_mean['datetime']>='2019-04-01') & (no2_mean['datetime']<='2019-06-30')]['mean'].mean()\nwintr = no2_mean[(no2_mean['datetime']>='2019-10-01') & (no2_mean['datetime']<='2019-12-31')]['mean'].mean()\n\nprint(f'Mean NO2 density in winter is {wintr\/sumr} times the Mean NO2 density in summer')","a9070850":"# mean image from the collection from april-june\nimage1 = so2.filterDate('2019-04-01','2019-06-30').mean().clip(Delhi_geom)\n# image from the collection from oct to december\nimage2 =  so2.filterDate('2019-10-01','2019-12-31').mean().clip(Delhi_geom)\n\nimage_viz_params = {'min': - 0.0005, 'max': 0.0008,\n    'palette': ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red']\n}\n#initiate a dual map\nmap_1=folium.plugins.DualMap(layout='horizontal')\n\n#fit map to our geometry\nfolium.FitBounds(bounds=delhi_bounds).add_to(map_1)\n\n#add ee layer \nmap_1.m1.add_ee_layer(ee_image_object=image1,\n                     vis_params=image_viz_params,\n                     name='Summer SO2',\n                     opacity=0.75)\n\n\n#add ee layer \nmap_1.m2.add_ee_layer(ee_image_object=image2,\n                     vis_params=image_viz_params,\n                     name='Winter SO2',\n                     opacity=0.75)\n\ncbar = cmp.StepColormap(\n image_viz_params['palette'],\n vmin=image_viz_params['min'], vmax=image_viz_params['max'],\n caption='SO2 Concentration'\n)\n\n#add colorbar\ncbar.add_to(map_1.m1)\n\n\n#add layer control\nmap_1.add_child(folium.LayerControl())\n#save \nmap_1.save('so2_image.html')\n\n\nprint('Sulphur dioxide mean layer (left-summer,right-winter)')\n\nmap_1","d8055db0":"sumr = so2_mean[(so2_mean['datetime']>='2019-04-01') & (so2_mean['datetime']<='2019-06-30')]['mean'].mean()\nwintr = so2_mean[(so2_mean['datetime']>='2019-10-01') & (so2_mean['datetime']<='2019-12-31')]['mean'].mean()\n\nprint(f'Mean SO2 density in winter is {wintr\/sumr} times the Mean SO2 density in summer')","2293b53e":"# mean image from the collection from april-june\nimage1 = co.filterDate('2019-04-01','2019-06-30').mean().clip(Delhi_geom)\n# image from the collection from oct to december\nimage2 =  co.filterDate('2019-10-01','2019-12-31').mean().clip(Delhi_geom)\n\nimage_viz_params = {'min': 0.01, 'max': 0.05,\n    'palette': ['black', 'blue', 'purple', 'cyan', 'yellow', 'red']\n}\n#initiate a dual map\nmap_1=folium.plugins.DualMap(layout='horizontal')\n\n#fit map to our geometry\nfolium.FitBounds(bounds=delhi_bounds).add_to(map_1)\n\n#add ee layer \nmap_1.m1.add_ee_layer(ee_image_object=image1,\n                     vis_params=image_viz_params,\n                     name='Summer CO',\n                     opacity=0.75)\n\n\n#add ee layer \nmap_1.m2.add_ee_layer(ee_image_object=image2,\n                     vis_params=image_viz_params,\n                     name='Winter CO',\n                     opacity=0.75)\n\ncbar = cmp.StepColormap(\n                         image_viz_params['palette'],\n                         vmin=image_viz_params['min'],\n                         vmax=image_viz_params['max'],\n                         caption='CO Concentration'\n                        )\n\n#add colorbar\ncbar.add_to(map_1.m1)\n\n\n#add layer control\nmap_1.add_child(folium.LayerControl())\n#save \nmap_1.save('co_image.html')\n\n\nprint('Carbon Monooxide mean layer (left-summer,right-winter)')\n\nmap_1","38aee038":"sumr = co_mean[(co_mean['datetime']>='2019-04-01') & (co_mean['datetime']<='2019-06-30')]['mean'].mean()\nwintr = co_mean[(co_mean['datetime']>='2019-10-01') & (co_mean['datetime']<='2019-12-31')]['mean'].mean()\n\nprint(f'Mean CO density in winter is {wintr\/sumr} times the Mean CO density in summer')","a52b687f":"# mean image from the collection from april-june\nimage1 = aero_in.filterDate('2019-04-01','2019-06-30').mean().clip(Delhi_geom)\n# image from the collection from oct to december\nimage2 =  aero_in.filterDate('2019-10-01','2019-12-31').mean().clip(Delhi_geom)\n\nimage_viz_params = { 'min': -1,\n    'max': 1.0,\n    'palette': ['black', 'blue', 'purple', 'cyan', 'green', 'yellow', 'red'][::-1]\n}\n#initiate a dual map\nmap_1=folium.plugins.DualMap(layout='horizontal')\n\n#fit map to our geometry\nfolium.FitBounds(bounds=delhi_bounds).add_to(map_1)\n\n#add ee layer \nmap_1.m1.add_ee_layer(ee_image_object=image1,\n                     vis_params=image_viz_params,\n                     name='Summer(June) Aerosol Index',\n                     opacity=0.75)\n\n\n#add ee layer \nmap_1.m2.add_ee_layer(ee_image_object=image2,\n                     vis_params=image_viz_params,\n                     name='Winter(December) Aerosol Index',\n                     opacity=0.75)\n\ncbar = cmp.StepColormap(\n image_viz_params['palette'],\n vmin=image_viz_params['min'], vmax=image_viz_params['max'],\n caption='Aerosol Index'\n)\n\n#add colorbar\ncbar.add_to(map_1.m1)\n\n\n#add layer control\nmap_1.add_child(folium.LayerControl())\n#save \nmap_1.save('aeroin_image.html')\n\n\nprint('Aerosol Index mean layer (left-summer,right-winter)')\n\nmap_1","5e7687fc":"plot_datewise(mean_df=no2_mean,\n                 band='NO2_column_density')","02324abc":"plot_datewise(mean_df=so2_mean,\n                 band='SO2_column_density')","7ca55a2c":"plot_datewise(mean_df=co_mean,\n                 band='CO_column_number_density')","de638402":"plot_datewise(mean_df=ai_mean,\n                 band='Aerosol_index')","7688854e":"print('Nitrogen Dioxide Column density')\nplot_hist(arr=no2_df['NO2_column_number_density'],\n              label='NO2_column_density')","97514abf":"print('Sulfur Dioxide Column density')\nplot_hist(arr=so2_df['SO2_column_number_density'],\n              label='SO2_column_density')","3b45d298":"print('Carbon Mono-oxide Column density')\nplot_hist(arr=co_df['CO_column_number_density'],\n              label='CO_column_density')","ab37b2d9":"print('Absorbing Aerosol Index')\nplot_hist(arr=aero_in_df['absorbing_aerosol_index'],\n              label='absorbing_aerosol_index')","47b3ba24":"print('Mean Monthly NO2')\nplot_monthwise(df=no2_df,\n                  band='NO2_column_number_density',\n                  ax1=None)","c9278f8a":"print('Mean Monthly SO2')\nplot_monthwise(df=so2_df,\n                  band='SO2_column_number_density',\n                  ax1=None)","81e1ebbd":"print('Mean Monthly CO')\nplot_monthwise(df=co_df,\n                  band='CO_column_number_density',\n                  ax1=None)","b495fe6d":"print('Mean Monthly UV aerosol Index')\n\nplot_monthwise(df=aero_in_df,\n                  band='absorbing_aerosol_index',\n                  ax1=None)","685d248c":"# Plotting Histograms","a831e5ed":"**CO density**","0529a763":"# Burnt Area Index (from Landsat 8)","1c1759d7":"# Carbon Monooxide :\n* Carbon monoxide (CO) is an important atmospheric trace gas for understanding tropospheric chemistry. In certain urban areas, it is a major atmospheric pollutant. Main sources of CO are combustion of fossil fuels, biomass burning, and atmospheric oxidation of methane and other hydrocarbons. Whereas fossil fuel combustion is the main source of CO at northern mid-latitudes, the oxidation of isoprene and biomass burning play an important role in the tropics.","b22ad1e0":"# Getting the necessary datasets","115ec93b":"# Comparing Rasters from Winter(December) and Summer(June) ","6d34121e":"# Notebook Description\n\n* There are some compounds in the atmosphere which are majorly emitted as a result of human activities. Some of the compounds are Nitrogen Dioxide, Sulphur Dioxide, Methane, surface Ozone, CO2 and CO, Particulate Matter.\n* Delhi, the capital of India is infamous for having one of the worst air quality index in the world. The condition is terrible in winters, as influx of polluted air and stubble burning in surrounding areas worsen the air quality even further.","b707fd0d":"# Landsat Image","9ee0ea98":"**Comparing Carbon Monooxide concentrations**","8746b4c8":"# Sentinel 5p: Nitrogen Dioxide\n* Nitrogen dioxide enters the atmosphere as a result of anthropogenic activities such as fossil fuel combustion and biomass burning, as well as natural processes including microbiological processes in soils, wildfires and lightning.\n","32bf139c":"# Visualizing the elevation model image","a37f0249":"# Authenticating and Initializing earth engine","462945a1":"# Note: \n* The layers on top of folium maps will dissapear in couple of days. Please re-run the notebook on your end to visualize the results.","c11b39cb":"**Aerosol Index**","af0573d3":"# Helper Functions","f1e25dde":"**There is increase in mean CO concentration in winter months.Similar to NO2 case, The region of New Delhi bordering Noida shows the maximum concentration**","737af8a8":"**Comparing Burnt Area Index**\n\n* There as some hypothesis that attribute stubble burning in the nearby regions and the pollutants are blown along with winds as the major reason for the worsening of air quality in winter in delhi.","ef317625":"**NO2 Density**","efe17d8a":"**Comparing mean NO2 Concentrations**","53a4f917":"#  Sentinel 5p: Sulfur Dioxide\n* The largest source of SO2 in the atmosphere is the burning of fossil fuels by power plants and other industrial facilities. Smaller sources of SO2 emissions include: industrial processes such as extracting metal from ore; natural sources such as volcanoes; and locomotives, ships and other vehicles and heavy equipment that burn fuel with a high sulfur content.","4fbf68f9":"**We clearly see a lot more increase in the NO2 concentrations in the winter months compared to the summer months.The Area that seems to be most affected is the region of new delhi , along the border of Noida.**","8634445b":"# Visualize average monthly variations","c5695b5b":"# Observations\n\n* Seasonality:We can see that there is a clearly a strong seasonal component to the concentration of pollutants show below. This can be attributed to  \n    * The Concentration of Sulfur diooxide and Nitrogen dioxide show a maximum in the winter months, they reduce marginally in summer period and are lowest in monsoon period.\n    * The Concentration of Carbon monoxide too show a similar cycle, although the concentrations seem to increase in the months of April-May.\n    * Aerosol Index Concentrations show a positive mean in the summer months, and a negative mean in winter months. The positive value of Aerosol Index indicates the presence of UV radiation absorbing aerosols(dust,smoke etc),while a negative value indicates presence of non-absorbing aerosols. \n    \n    \n* The Digital Elevation Model Image shows that Delhi is flanked by hills in the south-west direction.This could possibly block dispersion of northern winds towards the south.","ee5967f7":"# Sentinel 5p: Aerosol Index\n* Absorbing aerosols, such as smoke from biomass burning, desert dust, volcanic ash, and anthropogenically produced soot, absorb radiation and have a warming effect on the climate. Scattering aerosols, like sulfate particles and clouds, scatter solar light and usually have a cooling effect on the climate. Aerosols also act as condensation nuclei in the process of cloud formation, potentially altering the optical properties of these clouds.\n* The AAI is traditionally defined as the positive values of the reflectance residue between an absorbing-aerosol-loaded atmosphere and a clear atmosphere. Negative values are associated with an atmosphere that contains more scattering particles than a clear atmosphere.\nSRC: https:\/\/amt.copernicus.org\/articles\/13\/6407\/2020\/","a039f2a3":"# Visualize the aoi's Landsat image","33db99a6":"# Get the geometry of Delhi,India","653c55fa":"**Aerosol Index**","3b6b2dfe":"# Study Paramters","7ba43a36":"# Plotting yearly timeseries of data ","433e76cd":"**Comparing SO2 Concentrations**","817cbb51":"**SO2 Density**","7bfa23a3":"# Imports ","eeae3b49":"# References and Resources\n\n* Delhi air pollution - Effects on health: https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC3612296\/\n* Delhi air quality analysis: https:\/\/currentscience.ac.in\/Volumes\/109\/05\/0902.pdf\n* Article : https:\/\/disc.gsfc.nasa.gov\/information\/glossary?title=Aerosol%20Index\n* Paper : https:\/\/www.sciencedirect.com\/science\/article\/pii\/S0303243419313571\n* Air pollution article: https:\/\/aaqr.org\/articles\/aaqr-20-04-oa-0139\n* calculating air quality : https:\/\/www.kaggle.com\/rohanrao\/calculating-aqi-air-quality-index-tutorial?scriptVersionId=41199538\n* news report :https:\/\/www.business-standard.com\/article\/current-affairs\/delhi-s-no2-pollution-increased-by-125-in-one-year-finds-study-121070700521_1.html","c71c5321":"**The SO2 concentrations also more during winters. There are some pockets in the central delhi where the mean concentrations show a maximum.**"}}