{"cell_type":{"548326db":"code","0cf6101d":"code","b3f99569":"code","a287f7fa":"code","5b549914":"code","90b26e73":"code","11ea63a0":"code","e8559ce9":"code","994cf200":"code","d59b839c":"code","2643d52c":"code","01504243":"code","11a94234":"code","04788c29":"code","db4013d0":"code","bef0ede7":"code","d6f43506":"code","31534640":"code","75f26d60":"code","8fd43438":"code","b58c71a6":"code","a1ed9c3d":"code","135fd52a":"code","c3903bab":"code","026e60f3":"code","1a0114a3":"code","4f6f5476":"code","7658ccd5":"code","c842c3c2":"code","7060815f":"code","497ff667":"code","b1b3c49c":"code","ab4b7eb9":"code","02b17f1a":"code","e565dab2":"code","94fbccd3":"code","0b52a769":"code","9706b455":"code","580cb14e":"code","6de442a4":"code","9693b553":"code","e66b1991":"code","c62c4be3":"code","c562e76e":"code","6a336f38":"code","8c91e17d":"code","3b6e83fa":"code","46c687d7":"code","20c407fe":"code","0a73545f":"code","9682f248":"code","dcd6c724":"code","7a8078c6":"code","4e4e91ce":"code","dcfe77a2":"code","425cb006":"code","e0ac77f3":"code","56143c5b":"code","594dfb4f":"code","b8faa90d":"code","7300c1d2":"code","7fbe6dba":"code","ec006bda":"markdown","532e59af":"markdown","475d02fc":"markdown","a14ce9e4":"markdown","be89ea15":"markdown","184ccd9a":"markdown","d0ca9b34":"markdown","2579017a":"markdown","a8924ee2":"markdown","8313fc0b":"markdown","5b3f29c4":"markdown","0c55dc15":"markdown"},"source":{"548326db":"!pip install tashaphyne\n!git clone https:\/\/github.com\/aub-mind\/arabert\n!pip install -U scikit-learn\n!python -c \"import sklearn; sklearn.show_versions()\"\n!pip install qalsadi","0cf6101d":"import sys\nsys.path.append('..\/input\/iterative\/iterative_stratification-0.1.6-py3-none-any.whl')\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold","b3f99569":"import numpy as np \nimport pandas as pd\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nimport matplotlib.pyplot as plt # plotting\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom nltk.corpus import stopwords\nfrom textblob import TextBlob\nfrom nltk.stem.isri import ISRIStemmer\nimport qalsadi\nimport tashaphyne \nimport warnings\nimport emoji\nimport re\n########\nimport pyarabic.araby as araby\nfrom pyarabic.araby import normalize_ligature\nfrom pyarabic.araby import normalize_hamza\nimport qalsadi.lemmatizer\n########\nimport string\nimport sys\nimport argparse\n#########\nfrom arabert.preprocess import ArabertPreprocessor\nfrom tashaphyne.stemming import ArabicLightStemmer\nfrom nltk.stem.isri import ISRIStemmer\n#########\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report\n\nwarnings.simplefilter(\"ignore\")\nArListem = ArabicLightStemmer()","a287f7fa":"import pandas as pd\ndataset = pd.read_csv('..\/input\/tweet-training\/2018-E-c-Ar-train.txt',delimiter = '\\t')\ndataset.to_csv('tweet_train.csv',index = None)\ndataset.head()","5b549914":"import pandas as pd\ndevelopmentset = pd.read_csv('..\/input\/developmentset\/2018-E-c-Ar-dev.txt',delimiter = '\\t')\ndevelopmentset.to_csv('tweet_train.csv',index = None)\ndevelopmentset.head()","90b26e73":"#\u062f\u0627\u0644\u0647 \u0645\u0633\u0627\u0639\u062f\u0647 \u0644\u062d\u0633\u0627\u0628 \u0645\u0639\u062f\u0644 \u0627\u0644\u0627\u062d\u0631\u0641 \u0644\u0643\u0644 \u0643\u0644\u0645\u0647 \u0636\u0645\u0646 \u0627\u0644\u062c\u0645\u0644\u0647\ndef avg_word(sentence):#\u064a\u062a\u0645 \u0627\u062f\u062e\u0627\u0644 \u0627\u0644\u062c\u0645\u0644\u0647 \u0643\u0645\u0639\u0627\u0645\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u062f\u0627\u0644\u0647\n    words = sentence.split()#\u064a\u062a\u0645 \u062a\u062d\u0648\u064a\u0644 \u0627\u0644\u062c\u0645\u0644\u0647 \u0627\u0644\u0649 \u0642\u0627\u0626\u0645\u0647 \u0645\u0646 \u0627\u0644\u0643\u0644\u0645\u0627\u062a\n    if len(words) == 0:#\u0642\u064a \u062d\u0627\u0644\u0629 \u0627\u0646\u0647 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0641\u0627\u0631\u063a\u0647 \u0641\u0633\u0648\u0641 \u062a\u062e\u0631\u062c \u0647\u0630\u0647 \u0627\u0644\u062f\u0627\u0644\u0647 \u0627\u0644\u0631\u0642\u0645 0\n        return 0\n    #\u0648\u0627\u0644\u0627\u0627 \u0633\u0648\u0641 \u062a\u062e\u0631\u062c \u0647\u0630\u0647 \u0627\u0644\u062f\u0627\u0644\u0647 \u0645\u0639\u062f\u0644 \u0627\u0644\u0627\u062d\u0631\u0641 \u0644\u0643\u0644 \u0643\u0644\u0645\u0647 \u0636\u0645\u0646 \u0647\u0630\u0647 \u0627\u0644\u062c\u0645\u0644\u0647\n    return (sum(len(word) for word in words)\/len(words))\n","11ea63a0":"#\u0643\u0645\u0627 \u062a\u0644\u0627\u062d\u0638 \u062a\u0645 \u062d\u0633\u0627\u0628 \u0645\u0639\u062f\u0644 \u0627\u0644\u0627\u062d\u0631\u0641 \u0644\u0643\u0644 \u0643\u0644\u0645\u0647 \u0636\u0645\u0646 \u0647\u0630\u0647 \u0627\u0644\u062c\u0643\u0644\u0647 \u0648\u0647\u0648 5\ns = \"\u0645\u0631\u062d\u0628\u0627 \u0645\u0631\u062d\u0628\u0627\"\navg_word(s)","e8559ce9":"#\u062f\u0627\u0644\u0647 \u0645\u0633\u0627\u0639\u062f\u0647 \u0644\u062d\u0633\u0627\u0628 \u0639\u062f\u062f \u0627\u0644\u0627\u064a\u0645\u0648\u062c\u064a\ndef emoji_counter(sentence):\n    return emoji.emoji_count(sentence)","994cf200":"# \u0643\u0645\u0627 \u062a\u0644\u0627\u062d\u0638 \u0647\u0646\u0627 \u062a\u0645 \u0627\u062e\u0631\u0627\u062c \u0639\u062f\u062f \u0627\u0644\u0627\u064a\u0645\u0648\u062c\u064a \u0627\u0644\u0645\u062a\u0648\u0627\u062c\u062f \u0641\u064a \u0647\u0630\u0647 \u0627\u0644\u062c\u0645\u0644\u0647 \u0648\u0647\u0648 2 \ns = \"\ud83d\ude0a \u0645\u0631\u062d\u0628\u0627 \ud83e\udd73 \u0645\u0631\u062d\u0628\u0627\"\nemoji_counter(s)","d59b839c":"#\u0647\u0646\u0627 \u062a\u0645 \u0627\u0636\u0627\u0641\u0629 \u0639\u062f\u062f \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0641\u064a \u0643\u0644 \u062c\u0645\u0644\u0647 \u0643\u0639\u0645\u0648\u062f \u0644\u0644\u062c\u062f\u0648\u0644\ndataset['word_count'] = dataset['Tweet'].apply(lambda x: len(str(x).split(\" \")))\n#\u0647\u0646\u0627 \u062a\u0645 \u0627\u0636\u0627\u0641\u0629 \u0639\u062f\u062f \u0627\u0644\u0627\u062d\u0631\u0641 \u0643\u0639\u0645\u0648\u062f \u0644\u0644\u062c\u062f\u0648\u0644\n#\u0645\u0644\u0627\u062d\u0638\u0647 \u0627\u0644\u0645\u0633\u0627\u0641\u0627\u062a \u062a\u062d\u062a\u0633\u0628 \u0643\u0630\u0644\u0643\ndataset['char_count'] = dataset['Tweet'].str.len() ## this also includes spaces\n#\u0647\u0646\u0627 \u064a\u062a\u0645 \u062d\u0633\u0627\u0628 \u0645\u0639\u062f\u0644 \u0627\u0644\u0627\u062d\u0631\u0641 \u0644\u0643\u0644 \u0643\u0644\u0645\u0647 \u0636\u0645\u0646 \u0627\u0644\u062c\u0645\u0644\u0647\ndataset['avg_char_per_word'] = dataset['Tweet'].apply(lambda x: avg_word(x))\n#\u0647\u0646\u0627 \u0646\u062d\u0627\u0648\u0644 \u0627\u0644\u062a\u062e\u0644\u0635 \u0645\u0646 \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062a\u0643\u0631\u0631 \u0628\u0634\u0643\u0644 \u0643\u0628\u064a\u0631 \u0641\u064a \u0627\u063a\u0644\u0628 \u0627\u0644\u0646\u0635\u0648\u0635 \u0627\u0644\u0639\u0631\u0628\u064a\u0647 \u0648\u0628\u062f\u0648\u0646 \u062f\u0644\u0627\u0644\u0647 \u0645\u0647\u0645\u0647\nstop = stopwords.words('arabic')\ndataset['stopwords'] = dataset['Tweet'].apply(lambda x: len([x for x in x.split() if x in stop]))\n#\u0647\u0646\u0627 \u064a\u062a\u0645 \u062d\u0633\u0627\u0628 \u0639\u062f\u062f \u0627\u0644\u0627\u064a\u0645\u0648\u062c\u064a \u0641\u064a \u0627\u0644\u062c\u0645\u0644\u0647\ndataset['emoji_count'] = dataset['Tweet'].apply(lambda x: emoji_counter(x))\n#\u0647\u0646\u0627 \u064a\u062a\u0645 \u0639\u0631\u0636 \u0627\u0648\u0644 \u062e\u0645\u0633\u0629 \u0635\u0641\u0648\u0641 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a\ndataset.head()\n","2643d52c":"print(dataset[\"anger\"].value_counts())\nprint(\"_______________\")\nprint(dataset[\"anticipation\"].value_counts())\nprint(\"_______________\")\nprint(dataset[\"disgust\"].value_counts())\nprint(\"_______________\")\nprint(dataset[\"fear\"].value_counts())\nprint(\"_______________\")\nprint(dataset[\"sadness\"].value_counts())\nprint(\"_______________\")\nprint(dataset[\"surprise\"].value_counts())\nprint(\"_______________\")\nprint(dataset[\"joy\"].value_counts())","01504243":"print(developmentset[\"anger\"].value_counts())\nprint(\"_______________\")\nprint(developmentset[\"anticipation\"].value_counts())\nprint(\"_______________\")\nprint(developmentset[\"disgust\"].value_counts())\nprint(\"_______________\")\nprint(developmentset[\"fear\"].value_counts())\nprint(\"_______________\")\nprint(developmentset[\"sadness\"].value_counts())\nprint(\"_______________\")\nprint(developmentset[\"surprise\"].value_counts())\nprint(\"_______________\")\nprint(developmentset[\"joy\"].value_counts())","11a94234":"dataset = dataset[[\"Tweet\",\"anger\",\"anticipation\",\"disgust\",\"fear\",\"joy\",\"surprise\",\"sadness\",\"trust\"]]\ndevelopmentset = developmentset[[\"Tweet\",\"anger\",\"anticipation\",\"disgust\",\"fear\",\"joy\",\"surprise\",\"sadness\",\"trust\"]]","04788c29":"frames = [dataset, developmentset]\nall_dataset = pd.concat(frames)\nall_dataset","db4013d0":"print(all_dataset[\"anger\"].value_counts())\nprint(\"_______________\")\nprint(all_dataset[\"anticipation\"].value_counts())\nprint(\"_______________\")\nprint(all_dataset[\"disgust\"].value_counts())\nprint(\"_______________\")\nprint(all_dataset[\"fear\"].value_counts())\nprint(\"_______________\")\nprint(all_dataset[\"sadness\"].value_counts())\nprint(\"_______________\")\nprint(all_dataset[\"surprise\"].value_counts())\nprint(\"_______________\")\nprint(all_dataset[\"joy\"].value_counts())","bef0ede7":"#\u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u062a\u0631\u0642\u064a\u0645 \u0627\u0644\u0639\u0631\u0628\u064a\u0647\narabic_punctuations = '''`\u00f7\u00d7\u061b<>()*&^%][\u0640\u060c\/:\"\u061f.,'{}~\u00a6+|!\u201d\u2026\u201c\u2013\u0640'''\n#\u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u062a\u0631\u0642\u064a\u0645 \u0627\u0644\u0627\u0646\u0643\u0644\u064a\u0632\u064a\u0647\nenglish_punctuations = '''\"#$%&\\'()*+,-.\/:;<=>?@[\\\\]^`{|}~'''\n#\u0642\u0627\u0626\u0645\u0647 \u062a\u062d\u0648\u064a \u0639\u0644\u0649 \u0643\u0644 \u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u062a\u0631\u0642\u064a\u0645 \u0627\u0644\u0639\u0631\u0628\u064a\u0647 \u0648\u0627\u0644\u0627\u0646\u0643\u0644\u064a\u0632\u064a\u0647\npunctuations_list = arabic_punctuations + english_punctuations","d6f43506":"#\u062f\u0627\u0644\u0647 \u0644\u062d\u0630\u0641 \u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u062a\u0634\u0643\u064a\u0644 \u0648\u0627\u0644\u062a\u064a \u0647\u064a \u0627\u0644\u062d\u0631\u0643\u0627\u062a \u0648\u0627\u0644 \u062a\u0646\u0648\u064a\u0646 \u0648\u0627\u0644\u0638\u0648\u0627\u0628\u0637 (\u0627\u0644\u0634\u062f \u0648\u0627\u0644\u0645\u062f \u0648\u0627\u0644\u0648\u0635\u0644 \u0648\u0627\u0644\u0642\u0637\u0639) \ndef remove_diacritics(sentence):\n    sentence = araby.strip_diacritics(sentence)\n    return sentence\n#\u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062f\u0627\u0644\u0647\nsentence = \"\u0641\u0623\u0635\u0628\u062d\u062a\u064f \u062d\u064e\u064a\u0651\u0627\u064b \u0648\u0627\u0644\u0641\u0624\u0627\u062f\u064f \u0645\u062a\u064a\u0651\u0645\u064f\"\nremove_diacritics(sentence)","31534640":"#\u0647\u0630\u0647 \u0627\u0644\u062f\u0627\u0644\u0647 \u062a\u0633\u062a\u062e\u062f\u0645 \u0644\u0627\u062c\u0644 \u0627\u0632\u0627\u0644\u0629 \u0643\u0644 \u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u062a\u0631\u0642\u064a\u0645 \u0633\u0648\u0627\u0621 \u0643\u0627\u0646\u062a \u0639\u0631\u0628\u064a\u0647 \u0627\u0645 \u0627\u062c\u0646\u0628\u064a\u0647\ndef remove_punctuations(sentence):\n    translator = str.maketrans('', '', punctuations_list)\n    return sentence.translate(translator)\n#\u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062f\u0627\u0644\u0647\nsentence = \"\u0645\u0631\u062d\u0628\u0627> {\u0643\u064a\u0641 \u062d\u0627\u0644\u0643}>\"\nremove_punctuations(sentence)","75f26d60":"#\u0627\u0632\u0627\u0644\u0629 \u0627\u0644\u0627\u062d\u0631\u0641 \u0627\u0644\u0645\u0643\u0631\u0631\u0647 \u0645\u0646 \u0627\u0644\u062c\u0645\u0644\u0647\ndef remove_repeating_char(sentence):\n    return re.sub(r'(.)\\1+', r'\\1', sentence)\n#\u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062f\u0627\u0644\u0647\nsentence = \"\u0645\u0631\u0631\u0631\u062d\u0628\u0627 \u0643\u064a\u064a\u064a\u0641 \u062d\u0627\u0627\u0627\u0644\u0643\"\nremove_repeating_char(sentence)","8fd43438":"# \u0647\u064a \u062d\u0630\u0641 \u0627\u062d\u0631\u0641 \u0645\u0646 \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0644\u063a\u0631\u0636 \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0639\u0644\u0649 \u062c\u0632\u0621 \u0645\u0639\u064a\u0646 \u0645\u0646 \u0627\u0644\u0643\u0644\u0645\u0627\u062astem \u0636\u064a\u0641\u0629 \u0627\u0644 \ndef stem(sentence):\n    zen = TextBlob(sentence)\n    words = zen.words\n    cleaned = list()\n    for w in words:\n        ArListem.light_stem(w)\n        cleaned.append(ArListem.get_stem())\n    return \" \".join(cleaned)\n# \u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062f\u0627\u0644\u0647\nsentence =  \"\u0646\u0627\u0645 \u064a\u0646\u0627\u0645\"\nstem(sentence)","b58c71a6":"# \u0647\u0630\u0647 \u0627\u0644\u062f\u0627\u0644\u0647 \u062a\u0642\u0648\u0645 \u0628\u0627\u062e\u0631\u0627\u062c \u0627\u0644\u0635\u064a\u063a\u0647 \u0627\u0644\u0645\u062c\u0631\u062f\u0647 \u0644\u0644\u0641\u0639\u0644\ndef Limitazer(sentence):\n    zen = TextBlob(sentence)\n    words = zen.words\n    cleaned = list()\n    for w in words:\n        lemmer = qalsadi.lemmatizer.Lemmatizer()\n        cleaned.append(lemmer.lemmatize(w))\n    return \" \".join(cleaned)\n# \u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062f\u0627\u0644\u0647\nsentence =  \"\u0630\u0647\u0628 \u064a\u0630\u0647\u0628 \u0627\u0630\u0647\u0628\"\nLimitazer(sentence)","a1ed9c3d":"# \u062a\u0642\u0648\u0645 \u0647\u0630\u0647 \u0627\u0644\u062f\u0627\u0644\u0639 \u0628\u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u0648\u062d\u064a\u062f\ndef normalizeArabic(sentence):\n    sentence = sentence.strip()\n    sentence = re.sub(\"[\u0625\u0623\u0671\u0622\u0627]\", \"\u0627\", sentence)#\"\u0643\u0644 \u0648\u0627\u062d \u0645\u0646 \u0647\u0630\u0647 \u0627\u0644\u0627\u0634\u0643\u0627\u0644 \"[\u0625\u0623\u0671\u0622\u0627]\" \u0633\u062a\u0645 \u062a\u062d\u0648\u064a\u0644\u0647\u0627 \u0627\u0644\u0649\"\u0627 \n    sentence = re.sub(\"\u0649\", \"\u064a\", sentence)#\u0643\u0644 \"\u064a\"\u0633\u064a\u062a\u0645 \u062a\u062d\u0648\u064a\u0644\u0647\u0627 \u0627\u0644\u0649 \u0649 \n    sentence = re.sub(\"\u0624\", \"\u0621\", sentence)#\u0643\u0644 \u0624 \u0633\u064a\u062a\u0645 \u062a\u062d\u0648\u064a\u0644\u0647\u0627 \u0627\u0644\u0649 \u0621\n    sentence = re.sub(\"\u0626\", \"\u0621\", sentence)#\u0643\u0644 \u0626 \u0633\u064a\u062a\u0645 \u062a\u062d\u0648\u064a\u0644\u0647\u0627 \u0627\u0644\u0649 \u0621\n    sentence = re.sub(\"\u0629\", \"\u0647\", sentence)#\u0643\u0644 \u0629 \u0633\u064a\u062a\u0645 \u062a\u062d\u0648\u064a\u0644\u0647\u0627 \u0627\u0644\u0649 \u0647\n\n    #\u0643\u0644 \u0647\u0630\u0647 \u0627\u0644\u062d\u0631\u0643\u0627\u062a \u062a\u0639\u062a\u0628\u0631 \u062a\u0634\u0648\u064a\u0634 \u0648\u0627\u064a\u0636\u0627 \u0633\u0648\u0641 \u064a\u062a\u0645 \u0627\u0632\u0627\u0644\u062a\u0647\u0627 \u0645\u0646 \u0627\u0644\u062c\u0645\u0644\u0647\n    noise = re.compile(\"\"\" \u0651    | # Tashdid\n                             \u064e    | # Fatha\n                             \u064b    | # Tanwin Fath\n                             \u064f    | # Damma\n                             \u064c    | # Tanwin Damm\n                             \u0650    | # Kasra\n                             \u064d    | # Tanwin Kasr\n                             \u0652    | # Sukun\n                             \u0640     # Tatwil\/Kashida\n                         \"\"\", re.VERBOSE)\n    sentence = re.sub(noise, '', sentence)\n    sentence = re.sub(r'(.)\\1+', r\"\\1\\1\", sentence) # \u064a\u062a\u0645 \u0627\u062e\u0630 \u062d\u0631\u0641 \u0648\u0627\u062d\u062f \u0641\u064a \u062d\u0627\u0644\u0629 \u062a\u0643\u0631\u0627\u0631\u0647 \u0646\u0641\u0633 \u0627\u0644\u062d\u0631\u0641 \u0627\u0643\u062b\u0631 \u0645\u0646 \u0645\u0631\u0647 \u0641\u064a \u0646\u0641\u0633 \u0627\u0644\u0645\u0643\u0627\u0646\n    return araby.strip_tashkeel(sentence)\n#\u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062f\u0627\u0644\u0647\nsentence =\"\u0625\u0623\u0671\u0622\u0627\"\nnormalizeArabic(sentence)","135fd52a":"def replace_underscores_with_spaces(sentence):\n    sentence = sentence.replace(\"_\", \" \")\n    return sentence\n#\u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062f\u0627\u0644\u0647\nreplace_underscores_with_spaces(\" _ \u0645\u0631\u062d\u0628\u0627\")","c3903bab":"def delet_english_words_numbers(sentence):\n    english_char = [\"q\",\"w\",\"e\",\"r\",\"t\",\"y\",\"u\",\"i\",\"o\",\"p\",\"l\",\"k\",\"j\",\"h\",\"g\",\"f\",\"d\",\"s\",\"a\",\"z\",\"x\",\"c\",\"v\",\"b\",\"n\",\"m\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]\n    for item in english_char:\n        sentence = sentence.replace(item, \"\")\n    return sentence\n#\u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062f\u0627\u0644\u0647\ndelet_english_words_numbers(\"rehueww43\u0645\u0631\u062d\u0628\u0627\")","026e60f3":"#\u0647\u0646\u0627 \u064a\u062a\u0645 \u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u0627 \u062a\u062d\u0645\u0644 \u062f\u0644\u0627\u0644\u0647 \u0645\u0647\u0645\u0647 \u0644\u0643\u062b\u0631\u0629 \u062a\u0643\u0631\u0627\u0631\u0647\u062a \u0641\u064a \u0627\u0644\u0646\u0635\u0648\u0635 \u0627\u0644\u0639\u0631\u0628\u064a\u0647\nstop_words = stopwords.words()\nstops = set(stopwords.words(\"arabic\"))\n#\u0647\u0646\u0627 \u0627\u0636\u0641\u0646\u0627 \u0643\u0630\u0644\u0643 \u0642\u0627\u0626\u0645\u0647 \u0627\u062e\u0631\u0649 \u0644\u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u0627 \u062a\u0645\u0644\u0643 \u062f\u0644\u0627\u0644\u0647 \u0645\u0647\u0645\u0647 \nstop_word_comp = {\"\u060c\",\"\u0622\u0636\",\"\u0622\u0645\u064a\u0646\u064e\",\"\u0622\u0647\",\"\u0622\u0647\u0627\u064b\",\"\u0622\u064a\",\"\u0623\",\"\u0623\u0628\",\"\u0623\u062c\u0644\",\"\u0623\u062c\u0645\u0639\",\"\u0623\u062e\",\"\u0623\u062e\u0630\",\"\u0623\u0635\u0628\u062d\",\"\u0623\u0636\u062d\u0649\",\"\u0623\u0642\u0628\u0644\",\"\u0623\u0642\u0644\",\"\u0623\u0643\u062b\u0631\",\"\u0623\u0644\u0627\",\"\u0623\u0645\",\"\u0623\u0645\u0627\",\"\u0623\u0645\u0627\u0645\u0643\",\"\u0623\u0645\u0627\u0645\u0643\u064e\",\"\u0623\u0645\u0633\u0649\",\"\u0623\u0645\u0651\u0627\",\"\u0623\u0646\",\"\u0623\u0646\u0627\",\"\u0623\u0646\u062a\",\"\u0623\u0646\u062a\u0645\",\"\u0623\u0646\u062a\u0645\u0627\",\"\u0623\u0646\u062a\u0646\",\"\u0623\u0646\u062a\u0650\",\"\u0623\u0646\u0634\u0623\",\"\u0623\u0646\u0651\u0649\",\"\u0623\u0648\",\"\u0623\u0648\u0634\u0643\",\"\u0623\u0648\u0644\u0626\u0643\",\"\u0623\u0648\u0644\u0626\u0643\u0645\",\"\u0623\u0648\u0644\u0627\u0621\",\"\u0623\u0648\u0644\u0627\u0644\u0643\",\"\u0623\u0648\u0651\u0647\u0652\",\"\u0623\u064a\",\"\u0623\u064a\u0627\",\"\u0623\u064a\u0646\",\"\u0623\u064a\u0646\u0645\u0627\",\"\u0623\u064a\u0651\",\"\u0623\u064e\u0646\u0651\u064e\",\"\u0623\u064e\u064e\u064a\u0651\u064f\",\"\u0623\u064f\u0641\u0651\u064d\",\"\u0625\u0630\",\"\u0625\u0630\u0627\",\"\u0625\u0630\u0627\u064b\",\"\u0625\u0630\u0645\u0627\",\"\u0625\u0630\u0646\",\"\u0625\u0644\u0649\",\"\u0625\u0644\u064a\u0643\u0645\",\"\u0625\u0644\u064a\u0643\u0645\u0627\",\"\u0625\u0644\u064a\u0643\u0646\u0651\",\"\u0625\u0644\u064a\u0643\u064e\",\"\u0625\u0644\u064e\u064a\u0652\u0643\u064e\",\"\u0625\u0644\u0651\u0627\",\"\u0625\u0645\u0651\u0627\",\"\u0625\u0646\",\"\u0625\u0646\u0651\u0645\u0627\",\"\u0625\u064a\",\"\u0625\u064a\u0627\u0643\",\"\u0625\u064a\u0627\u0643\u0645\",\"\u0625\u064a\u0627\u0643\u0645\u0627\",\"\u0625\u064a\u0627\u0643\u0646\",\"\u0625\u064a\u0627\u0646\u0627\",\"\u0625\u064a\u0627\u0647\",\"\u0625\u064a\u0627\u0647\u0627\",\"\u0625\u064a\u0627\u0647\u0645\",\"\u0625\u064a\u0627\u0647\u0645\u0627\",\"\u0625\u064a\u0627\u0647\u0646\",\"\u0625\u064a\u0627\u064a\",\"\u0625\u064a\u0647\u064d\",\"\u0625\u0650\u0646\u0651\u064e\",\"\u0627\",\"\u0627\u0628\u062a\u062f\u0623\",\"\u0627\u062b\u0631\",\"\u0627\u062c\u0644\",\"\u0627\u062d\u062f\",\"\u0627\u062e\u0631\u0649\",\"\u0627\u062e\u0644\u0648\u0644\u0642\",\"\u0627\u0630\u0627\",\"\u0627\u0631\u0628\u0639\u0629\",\"\u0627\u0631\u062a\u062f\u0651\",\"\u0627\u0633\u062a\u062d\u0627\u0644\",\"\u0627\u0637\u0627\u0631\",\"\u0627\u0639\u0627\u062f\u0629\",\"\u0627\u0639\u0644\u0646\u062a\",\"\u0627\u0641\",\"\u0627\u0643\u062b\u0631\",\"\u0627\u0643\u062f\",\"\u0627\u0644\u0623\u0644\u0627\u0621\",\"\u0627\u0644\u0623\u0644\u0649\",\"\u0627\u0644\u0627\",\"\u0627\u0644\u0627\u062e\u064a\u0631\u0629\",\"\u0627\u0644\u0627\u0646\",\"\u0627\u0644\u0627\u0648\u0644\",\"\u0627\u0644\u0627\u0648\u0644\u0649\",\"\u0627\u0644\u062a\u0649\",\"\u0627\u0644\u062a\u064a\",\"\u0627\u0644\u062b\u0627\u0646\u064a\",\"\u0627\u0644\u062b\u0627\u0646\u064a\u0629\",\"\u0627\u0644\u0630\u0627\u062a\u064a\",\"\u0627\u0644\u0630\u0649\",\"\u0627\u0644\u0630\u064a\",\"\u0627\u0644\u0630\u064a\u0646\",\"\u0627\u0644\u0633\u0627\u0628\u0642\",\"\u0627\u0644\u0641\",\"\u0627\u0644\u0644\u0627\u0626\u064a\",\"\u0627\u0644\u0644\u0627\u062a\u064a\",\"\u0627\u0644\u0644\u062a\u0627\u0646\",\"\u0627\u0644\u0644\u062a\u064a\u0627\",\"\u0627\u0644\u0644\u062a\u064a\u0646\",\"\u0627\u0644\u0644\u0630\u0627\u0646\",\"\u0627\u0644\u0644\u0630\u064a\u0646\",\"\u0627\u0644\u0644\u0648\u0627\u062a\u064a\",\"\u0627\u0644\u0645\u0627\u0636\u064a\",\"\u0627\u0644\u0645\u0642\u0628\u0644\",\"\u0627\u0644\u0648\u0642\u062a\",\"\u0627\u0644\u0649\",\"\u0627\u0644\u064a\u0648\u0645\",\"\u0627\u0645\u0627\",\"\u0627\u0645\u0627\u0645\",\"\u0627\u0645\u0633\",\"\u0627\u0646\",\"\u0627\u0646\u0628\u0631\u0649\",\"\u0627\u0646\u0642\u0644\u0628\",\"\u0627\u0646\u0647\",\"\u0627\u0646\u0647\u0627\",\"\u0627\u0648\",\"\u0627\u0648\u0644\",\"\u0627\u064a\",\"\u0627\u064a\u0627\u0631\",\"\u0627\u064a\u0627\u0645\",\"\u0627\u064a\u0636\u0627\",\"\u0628\",\"\u0628\u0627\u062a\",\"\u0628\u0627\u0633\u0645\",\"\u0628\u0627\u0646\",\"\u0628\u062e\u064d\",\"\u0628\u0631\u0633\",\"\u0628\u0633\u0628\u0628\",\"\u0628\u0633\u0651\",\"\u0628\u0634\u0643\u0644\",\"\u0628\u0636\u0639\",\"\u0628\u0637\u0622\u0646\",\"\u0628\u0639\u062f\",\"\u0628\u0639\u0636\",\"\u0628\u0643\",\"\u0628\u0643\u0645\",\"\u0628\u0643\u0645\u0627\",\"\u0628\u0643\u0646\",\"\u0628\u0644\",\"\u0628\u0644\u0649\",\"\u0628\u0645\u0627\",\"\u0628\u0645\u0627\u0630\u0627\",\"\u0628\u0645\u0646\",\"\u0628\u0646\",\"\u0628\u0646\u0627\",\"\u0628\u0647\",\"\u0628\u0647\u0627\",\"\u0628\u064a\",\"\u0628\u064a\u062f\",\"\u0628\u064a\u0646\",\"\u0628\u064e\u0633\u0652\",\"\u0628\u064e\u0644\u0652\u0647\u064e\",\"\u0628\u0650\u0626\u0652\u0633\u064e\",\"\u062a\u0627\u0646\u0650\",\"\u062a\u0627\u0646\u0650\u0643\",\"\u062a\u0628\u062f\u0651\u0644\",\"\u062a\u062c\u0627\u0647\",\"\u062a\u062d\u0648\u0651\u0644\",\"\u062a\u0644\u0642\u0627\u0621\",\"\u062a\u0644\u0643\",\"\u062a\u0644\u0643\u0645\",\"\u062a\u0644\u0643\u0645\u0627\",\"\u062a\u0645\",\"\u062a\u064a\u0646\u0643\",\"\u062a\u064e\u064a\u0652\u0646\u0650\",\"\u062a\u0650\u0647\",\"\u062a\u0650\u064a\",\"\u062b\u0644\u0627\u062b\u0629\",\"\u062b\u0645\",\"\u062b\u0645\u0651\",\"\u062b\u0645\u0651\u0629\",\"\u062b\u064f\u0645\u0651\u064e\",\"\u062c\u0639\u0644\",\"\u062c\u0644\u0644\",\"\u062c\u0645\u064a\u0639\",\"\u062c\u064a\u0631\",\"\u062d\u0627\u0631\",\"\u062d\u0627\u0634\u0627\",\"\u062d\u0627\u0644\u064a\u0627\",\"\u062d\u0627\u064a\",\"\u062d\u062a\u0649\",\"\u062d\u0631\u0649\",\"\u062d\u0633\u0628\",\"\u062d\u0645\",\"\u062d\u0648\u0627\u0644\u0649\",\"\u062d\u0648\u0644\",\"\u062d\u064a\u062b\",\"\u062d\u064a\u062b\u0645\u0627\",\"\u062d\u064a\u0646\",\"\u062d\u064a\u0651\u064e\",\"\u062d\u064e\u0628\u0651\u064e\u0630\u064e\u0627\",\"\u062d\u064e\u062a\u0651\u064e\u0649\",\"\u062d\u064e\u0630\u0627\u0631\u0650\",\"\u062e\u0644\u0627\",\"\u062e\u0644\u0627\u0644\",\"\u062f\u0648\u0646\",\"\u062f\u0648\u0646\u0643\",\"\u0630\u0627\",\"\u0630\u0627\u062a\",\"\u0630\u0627\u0643\",\"\u0630\u0627\u0646\u0643\",\"\u0630\u0627\u0646\u0650\",\"\u0630\u0644\u0643\",\"\u0630\u0644\u0643\u0645\",\"\u0630\u0644\u0643\u0645\u0627\",\"\u0630\u0644\u0643\u0646\",\"\u0630\u0648\",\"\u0630\u0648\u0627\",\"\u0630\u0648\u0627\u062a\u0627\",\"\u0630\u0648\u0627\u062a\u064a\",\"\u0630\u064a\u062a\",\"\u0630\u064a\u0646\u0643\",\"\u0630\u064e\u064a\u0652\u0646\u0650\",\"\u0630\u0650\u0647\",\"\u0630\u0650\u064a\",\"\u0631\u0627\u062d\",\"\u0631\u062c\u0639\",\"\u0631\u0648\u064a\u062f\u0643\",\"\u0631\u064a\u062b\",\"\u0631\u064f\u0628\u0651\u064e\",\"\u0632\u064a\u0627\u0631\u0629\",\"\u0633\u0628\u062d\u0627\u0646\",\"\u0633\u0631\u0639\u0627\u0646\",\"\u0633\u0646\u0629\",\"\u0633\u0646\u0648\u0627\u062a\",\"\u0633\u0648\u0641\",\"\u0633\u0648\u0649\",\"\u0633\u064e\u0627\u0621\u064e\",\"\u0633\u064e\u0627\u0621\u064e\u0645\u064e\u0627\",\"\u0634\u0628\u0647\",\"\u0634\u062e\u0635\u0627\",\"\u0634\u0631\u0639\",\"\u0634\u064e\u062a\u0651\u064e\u0627\u0646\u064e\",\"\u0635\u0627\u0631\",\"\u0635\u0628\u0627\u062d\",\"\u0635\u0641\u0631\",\"\u0635\u0647\u064d\",\"\u0635\u0647\u0652\",\"\u0636\u062f\",\"\u0636\u0645\u0646\",\"\u0637\u0627\u0642\",\"\u0637\u0627\u0644\u0645\u0627\",\"\u0637\u0641\u0642\",\"\u0637\u064e\u0642\",\"\u0638\u0644\u0651\",\"\u0639\u0627\u062f\",\"\u0639\u0627\u0645\",\"\u0639\u0627\u0645\u0627\",\"\u0639\u0627\u0645\u0629\",\"\u0639\u062f\u0627\",\"\u0639\u062f\u0629\",\"\u0639\u062f\u062f\",\"\u0639\u062f\u0645\",\"\u0639\u0633\u0649\",\"\u0639\u0634\u0631\",\"\u0639\u0634\u0631\u0629\",\"\u0639\u0644\u0642\",\"\u0639\u0644\u0649\",\"\u0639\u0644\u064a\u0643\",\"\u0639\u0644\u064a\u0647\",\"\u0639\u0644\u064a\u0647\u0627\",\"\u0639\u0644\u0651\u064b\",\"\u0639\u0646\",\"\u0639\u0646\u062f\",\"\u0639\u0646\u062f\u0645\u0627\",\"\u0639\u0648\u0636\",\"\u0639\u064a\u0646\",\"\u0639\u064e\u062f\u064e\u0633\u0652\",\"\u0639\u064e\u0645\u0651\u064e\u0627\",\"\u063a\u062f\u0627\",\"\u063a\u064a\u0631\",\"\u0640\",\"\u0641\",\"\u0641\u0627\u0646\",\"\u0641\u0644\u0627\u0646\",\"\u0641\u0648\",\"\u0641\u0649\",\"\u0641\u064a\",\"\u0641\u064a\u0645\",\"\u0641\u064a\u0645\u0627\",\"\u0641\u064a\u0647\",\"\u0641\u064a\u0647\u0627\",\"\u0642\u0627\u0644\",\"\u0642\u0627\u0645\",\"\u0642\u0628\u0644\",\"\u0642\u062f\",\"\u0642\u0637\u0651\",\"\u0642\u0644\u0645\u0627\",\"\u0642\u0648\u0629\",\"\u0643\u0623\u0646\u0651\u0645\u0627\",\"\u0643\u0623\u064a\u0646\",\"\u0643\u0623\u064a\u0651\",\"\u0643\u0623\u064a\u0651\u0646\",\"\u0643\u0627\u062f\",\"\u0643\u0627\u0646\",\"\u0643\u0627\u0646\u062a\",\"\u0643\u0630\u0627\",\"\u0643\u0630\u0644\u0643\",\"\u0643\u0631\u0628\",\"\u0643\u0644\",\"\u0643\u0644\u0627\",\"\u0643\u0644\u0627\u0647\u0645\u0627\",\"\u0643\u0644\u062a\u0627\",\"\u0643\u0644\u0645\",\"\u0643\u0644\u064a\u0643\u0645\u0627\",\"\u0643\u0644\u064a\u0647\u0645\u0627\",\"\u0643\u0644\u0651\u0645\u0627\",\"\u0643\u0644\u0651\u064e\u0627\",\"\u0643\u0645\",\"\u0643\u0645\u0627\",\"\u0643\u064a\",\"\u0643\u064a\u062a\",\"\u0643\u064a\u0641\",\"\u0643\u064a\u0641\u0645\u0627\",\"\u0643\u064e\u0623\u064e\u0646\u0651\u064e\",\"\u0643\u0650\u062e\",\"\u0644\u0626\u0646\",\"\u0644\u0627\",\"\u0644\u0627\u062a\",\"\u0644\u0627\u0633\u064a\u0645\u0627\",\"\u0644\u062f\u0646\",\"\u0644\u062f\u0649\",\"\u0644\u0639\u0645\u0631\",\"\u0644\u0642\u0627\u0621\",\"\u0644\u0643\",\"\u0644\u0643\u0645\",\"\u0644\u0643\u0645\u0627\",\"\u0644\u0643\u0646\",\"\u0644\u0643\u0646\u0651\u064e\u0645\u0627\",\"\u0644\u0643\u064a\",\"\u0644\u0643\u064a\u0644\u0627\",\"\u0644\u0644\u0627\u0645\u0645\",\"\u0644\u0645\",\"\u0644\u0645\u0627\",\"\u0644\u0645\u0651\u0627\",\"\u0644\u0646\",\"\u0644\u0646\u0627\",\"\u0644\u0647\",\"\u0644\u0647\u0627\",\"\u0644\u0648\",\"\u0644\u0648\u0643\u0627\u0644\u0629\",\"\u0644\u0648\u0644\u0627\",\"\u0644\u0648\u0645\u0627\",\"\u0644\u064a\",\"\u0644\u064e\u0633\u0652\u062a\u064e\",\"\u0644\u064e\u0633\u0652\u062a\u064f\",\"\u0644\u064e\u0633\u0652\u062a\u064f\u0645\",\"\u0644\u064e\u0633\u0652\u062a\u064f\u0645\u064e\u0627\",\"\u0644\u064e\u0633\u0652\u062a\u064f\u0646\u0651\u064e\",\"\u0644\u064e\u0633\u0652\u062a\u0650\",\"\u0644\u064e\u0633\u0652\u0646\u064e\",\"\u0644\u064e\u0639\u064e\u0644\u0651\u064e\",\"\u0644\u064e\u0643\u0650\u0646\u0651\u064e\",\"\u0644\u064e\u064a\u0652\u062a\u064e\",\"\u0644\u064e\u064a\u0652\u0633\u064e\",\"\u0644\u064e\u064a\u0652\u0633\u064e\u0627\",\"\u0644\u064e\u064a\u0652\u0633\u064e\u062a\u064e\u0627\",\"\u0644\u064e\u064a\u0652\u0633\u064e\u062a\u0652\",\"\u0644\u064e\u064a\u0652\u0633\u064f\u0648\u0627\",\"\u0644\u064e\u0650\u0633\u0652\u0646\u064e\u0627\",\"\u0645\u0627\",\"\u0645\u0627\u0627\u0646\u0641\u0643\",\"\u0645\u0627\u0628\u0631\u062d\",\"\u0645\u0627\u062f\u0627\u0645\",\"\u0645\u0627\u0630\u0627\",\"\u0645\u0627\u0632\u0627\u0644\",\"\u0645\u0627\u0641\u062a\u0626\",\"\u0645\u0627\u064a\u0648\",\"\u0645\u062a\u0649\",\"\u0645\u062b\u0644\",\"\u0645\u0630\",\"\u0645\u0633\u0627\u0621\",\"\u0645\u0639\",\"\u0645\u0639\u0627\u0630\",\"\u0645\u0642\u0627\u0628\u0644\",\"\u0645\u0643\u0627\u0646\u0643\u0645\",\"\u0645\u0643\u0627\u0646\u0643\u0645\u0627\",\"\u0645\u0643\u0627\u0646\u0643\u0646\u0651\",\"\u0645\u0643\u0627\u0646\u064e\u0643\",\"\u0645\u0644\u064a\u0627\u0631\",\"\u0645\u0644\u064a\u0648\u0646\",\"\u0645\u0645\u0627\",\"\u0645\u0645\u0646\",\"\u0645\u0646\",\"\u0645\u0646\u0630\",\"\u0645\u0646\u0647\u0627\",\"\u0645\u0647\",\"\u0645\u0647\u0645\u0627\",\"\u0645\u064e\u0646\u0652\",\"\u0645\u0650\u0646\",\"\u0646\u062d\u0646\",\"\u0646\u062d\u0648\",\"\u0646\u0639\u0645\",\"\u0646\u0641\u0633\",\"\u0646\u0641\u0633\u0647\",\"\u0646\u0647\u0627\u064a\u0629\",\"\u0646\u064e\u062e\u0652\",\"\u0646\u0650\u0639\u0650\u0645\u0651\u0627\",\"\u0646\u0650\u0639\u0652\u0645\u064e\",\"\u0647\u0627\",\"\u0647\u0627\u0624\u0645\",\"\u0647\u0627\u0643\u064e\",\"\u0647\u0627\u0647\u0646\u0627\",\"\u0647\u0628\u0651\",\"\u0647\u0630\u0627\",\"\u0647\u0630\u0647\",\"\u0647\u0643\u0630\u0627\",\"\u0647\u0644\",\"\u0647\u0644\u0645\u0651\u064e\",\"\u0647\u0644\u0651\u0627\",\"\u0647\u0645\",\"\u0647\u0645\u0627\",\"\u0647\u0646\",\"\u0647\u0646\u0627\",\"\u0647\u0646\u0627\u0643\",\"\u0647\u0646\u0627\u0644\u0643\",\"\u0647\u0648\",\"\u0647\u064a\",\"\u0647\u064a\u0627\",\"\u0647\u064a\u062a\",\"\u0647\u064a\u0651\u0627\",\"\u0647\u064e\u0624\u0644\u0627\u0621\",\"\u0647\u064e\u0627\u062a\u0627\u0646\u0650\",\"\u0647\u064e\u0627\u062a\u064e\u064a\u0652\u0646\u0650\",\"\u0647\u064e\u0627\u062a\u0650\u0647\",\"\u0647\u064e\u0627\u062a\u0650\u064a\",\"\u0647\u064e\u062c\u0652\",\"\u0647\u064e\u0630\u0627\",\"\u0647\u064e\u0630\u0627\u0646\u0650\",\"\u0647\u064e\u0630\u064e\u064a\u0652\u0646\u0650\",\"\u0647\u064e\u0630\u0650\u0647\",\"\u0647\u064e\u0630\u0650\u064a\",\"\u0647\u064e\u064a\u0652\u0647\u064e\u0627\u062a\u064e\",\"\u0648\",\"\u06486\",\"\u0648\u0627\",\"\u0648\u0627\u062d\u062f\",\"\u0648\u0627\u0636\u0627\u0641\",\"\u0648\u0627\u0636\u0627\u0641\u062a\",\"\u0648\u0627\u0643\u062f\",\"\u0648\u0627\u0646\",\"\u0648\u0627\u0647\u0627\u064b\",\"\u0648\u0627\u0648\u0636\u062d\",\"\u0648\u0631\u0627\u0621\u064e\u0643\",\"\u0648\u0641\u064a\",\"\u0648\u0642\u0627\u0644\",\"\u0648\u0642\u0627\u0644\u062a\",\"\u0648\u0642\u062f\",\"\u0648\u0642\u0641\",\"\u0648\u0643\u0627\u0646\",\"\u0648\u0643\u0627\u0646\u062a\",\"\u0648\u0644\u0627\",\"\u0648\u0644\u0645\",\"\u0648\u0645\u0646\",\"\u0645\u064e\u0646\",\"\u0648\u0647\u0648\",\"\u0648\u0647\u064a\",\"\u0648\u064a\u0643\u0623\u0646\u0651\",\"\u0648\u064e\u064a\u0652\",\"\u0648\u064f\u0634\u0652\u0643\u064e\u0627\u0646\u064e\u064e\",\"\u064a\u0643\u0648\u0646\",\"\u064a\u0645\u0643\u0646\",\"\u064a\u0648\u0645\",\"\u0651\u0623\u064a\u0651\u0627\u0646\"}\n#ArabicLightStemmer class \u0647\u0646\u0627 \u0642\u0645\u0646\u0627 \u0628\u0639\u0645\u0644 \u0643\u0627\u0626\u0646 \u0644\u0644 \nArListem = ArabicLightStemmer()","1a0114a3":"#\u0647\u0630\u0647 \u0627\u0644\u062f\u0627\u0644\u0647 \u062a\u0633\u062a\u062e\u062f\u0645 \u0644\u062d\u0630\u0641 \u0627\u0644\u064a\u0645\u0648\u062c\u064a \u0645\u0646 \u0627\u0644\u0646\u0635\ndef remove_emoji(string):\n    emoji_pattern = re.compile(\"[\"\n                               u\"\\U00002500-\\U00002BEF\"  # chinese char\n                               u\"\\U00002702-\\U000027B0\"\n                               u\"\\U00002702-\\U000027B0\"\n                               u\"\\U000024C2-\\U0001F251\"\n                               u\"\\U0001f926-\\U0001f937\"\n                               u\"\\U00010000-\\U0010ffff\"\n                               u\"\\u2640-\\u2642\"\n                               u\"\\u2600-\\u2B55\"\n                               u\"\\u200d\"\n                               u\"\\u23cf\"\n                               u\"\\u23e9\"\n                               u\"\\u231a\"\n                               u\"\\ufe0f\"  # dingbats\n                               u\"\\u3030\"\n                               \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', string)\n#\u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062f\u0627\u0644\u0647\ns = \"\ud83d\ude0a \u0645\u0631\u062d\u0628\u0627 \ud83e\udd73 \u0645\u0631\u062d\u0628\u0627\"\nremove_emoji(s)","4f6f5476":"#\u0647\u0630\u0647 \u0627\u0644\u062f\u0627\u0644\u0647 \u062a\u0633\u062a\u062e\u062f\u0645 \u0644\u0627\u0632\u0627\u0644\u0629 \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0643\u062b\u064a\u0631\u0629 \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0648\u0627\u0644\u062a\u064a \u0644\u0627 \u064a\u0643\u0648\u0646 \u0644\u0647\u0627 \u062f\u0644\u0627\u0644\u0647 \u0645\u0647\u0645\u0647\ndef remove_stop_words(sentence):\n    zen = TextBlob(sentence)\n    words = zen.words\n    return \" \".join([w for w in words if not w in stops and not w in stop_word_comp and len(w) >= 2])\n#\u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062f\u0627\u0644\u0647\nsentence = \"\u0627\u0646\u0627 \u0627\u0633\u0641 \u0648\u0644\u0643\u0646 \u0646\u062d\u0646 \u0645\u063a\u0644\u0642\u0648\u0646\"\nremove_stop_words(sentence)","7658ccd5":"#\u0647\u0630\u0647 \u0627\u0644\u062f\u0627\u0644\u0647 \u062a\u0642\u0648\u0645 \u0628\u062a\u0637\u0628\u064a\u0642 \u0643\u0644 \u0627\u0644\u062f\u0648\u0627\u0644 \u0627\u0644\u062a\u064a \u0630\u0643\u0631\u0646\u0627\u0647\u0627 \u0639\u0644\u0649 \u0627\u0644\u0646\u0635\u0648\u0635 \u0636\u0645\u0646 \u0627\u0644\u062c\u062f\u0648\u0644\ndef  clean_text(df, text_field, new_text_field_name):\n    df[new_text_field_name] = df[text_field].apply(lambda elem:normalizeArabic(elem))\n    df[new_text_field_name] = df[text_field].apply(lambda elem:normalize_hamza(elem))\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda elem: remove_punctuations(elem))\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda elem: remove_diacritics(elem))\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda x: replace_underscores_with_spaces(x))\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda x: delet_english_words_numbers(x))\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda x: remove_emoji(x))\n    #remove stop words\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda x: remove_stop_words(x))\n    #df[new_text_field_name] = df[new_text_field_name].apply(lambda x: Limitazer(x))\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda x:stem(x))\n\n    return df\ndataset_clean = clean_text(all_dataset, 'Tweet', 'tweet_clean')\ndataset_clean['tweet_clean']","c842c3c2":"del dataset_clean[\"Tweet\"]","7060815f":"dataset_clean","497ff667":"#targets \u0648 \u0643\u0630\u0644\u0643 features \u0641\u0635\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0649 \nfeature =  dataset_clean.tweet_clean\ntarget = dataset_clean.iloc[:,0:8]\ntrain_index = []\ntest_index = []\n# \u0641\u0635\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0649 \u062a\u062f\u0631\u064a\u0628\u064a\u0628\u0647 \u0648\u0623\u062e\u062a\u0628\u0627\u0631\u064a\u0647\n#MultilabelStratifiedKFold(n_splits=2, random_state=42, shuffle=True).split(feature, target)\n#for n, (tr, te) in enumerate(MultilabelStratifiedKFold(n_splits=3, random_state=42, shuffle=True).split(feature, target)):\n#    if n == 0 or n == 1 :\n#        train_index.append(tr)\n#    if n == 2:\n#        test_index.append(tr)\n#    print(n)    \n\nX_train,X_test,Y_train,Y_test = train_test_split(feature, target, test_size =.3, random_state=100)","b1b3c49c":"fear = X_train[Y_train.fear.values==1]\ntrust = X_train[Y_train.trust.values==1]\nsurprise = X_train[Y_train.surprise.values==1]\nanticipation = X_train[Y_train.anticipation.values==1]","ab4b7eb9":"fear_X_Y = Y_train[Y_train.fear.values==1]\nfear_X_Y[\"clean_tweet\"] = fear\ntrust_X_Y  = Y_train[Y_train.trust.values==1]\ntrust_X_Y[\"clean_tweet\"] = trust\nsurprise_X_Y  = Y_train[Y_train.surprise.values==1]\nsurprise_X_Y[\"clean_tweet\"] = surprise\nanticipation_X_Y  = Y_train[Y_train.anticipation.values==1]\nanticipation_X_Y[\"clean_tweet\"] = anticipation\n","02b17f1a":"X_train_Y_train = Y_train\nX_train_Y_train[\"clean_tweet\"] = X_train","e565dab2":"frames = [X_train_Y_train,fear_X_Y]\nX_train_Y_train = pd.concat(frames)","94fbccd3":"frames = [X_train_Y_train,trust_X_Y]\nX_train_Y_train = pd.concat(frames)","0b52a769":"frames = [X_train_Y_train,surprise_X_Y]\nX_train_Y_train = pd.concat(frames)","9706b455":"frames = [X_train_Y_train,anticipation_X_Y]\nX_train_Y_train = pd.concat(frames)","580cb14e":"from sklearn.utils import shuffle\nX_train_Y_train = shuffle(X_train_Y_train)","6de442a4":"X_train = X_train_Y_train.clean_tweet\ndel X_train_Y_train['clean_tweet']\nY_train = X_train_Y_train","9693b553":"# \u0627\u0644\u0642\u064a\u0627\u0645 \u0628\u0639\u0645\u0644 \u062e\u0637 \u0627\u0646\u0628\u0648\u0628\u064a \u0644\u0627\u062c\u0631\u0627\u0621 \u0627\u0644\u0645\u0639\u0627\u0644\u062c\u0627\u062a \u0627\u0644\u0645\u0637\u0644\u0648\u0628 \u0627\u062c\u0631\u0627\u0626\u0647\u0627 \u0639\u0644\u0649 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0642\u0628\u0644 \u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0639\u0644\u064a\u0647\u0627\npipe = make_pipeline(TfidfVectorizer(),LogisticRegression())\n#\u062a\u062d\u062f\u064a\u062f \u0645\u0639\u0645\u0644\u0627\u062a \u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0627\u0644\u062a\u064a \u0633\u0648\u0641 \u064a\u062a\u0645 \u0627\u062e\u062a\u0628\u0627\u0631\u0647\u0627 \u0644\u0645\u0639\u0631\u0641\u062a \u0627\u0641\u0636\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a\nparam_grid = {'logisticregression__C': [1,10,100,200]}","e66b1991":"# \u0627\u0644\u0642\u064a\u0627\u0645 \u0628\u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0646\u0645\u0648\u0630\u062c\nfrom sklearn.linear_model import LogisticRegression\nmodels = []\nfor n,tar in enumerate(Y_train):#\u0646\u0642\u0648\u0645 \u0628\u0627\u0644\u0645\u0631\u0648\u0631 \u0639\u0644\u0649 \u0643\u0644 \u0639\u0645\u0648\u062f \u0641\u064a \u0645\u0635\u0641\u0648\u0641\u0629 \u0627\u0644\u0627\u0647\u062f\u0627\u0641\n    model = GridSearchCV(pipe, param_grid, cv=3)\n    model.fit(X_train.values,Y_train[tar].values)#\u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0646\u0645\u0648\u0630\u062c \n    models.append(model)#\u062a\u0636\u0645\u064a\u0646 \u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0641\u064a \u0627\u0644\u0642\u0627\u0626\u0645\u0647\n    print(model.best_estimator_)#","c62c4be3":"# make prediction and print accuracy\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import jaccard_score\n\nprediction = np.zeros((len(X_train),Y_train.shape[1]))\nfor n,tar in enumerate(Y_train):\n        model = models[n]\n        prediction[:,n] = model.predict(X_train)\n        print(f\"-------------classification_report of column {n}-------------\")\n        print(f\"column name -{Y_train.columns[n]}-\")\n        print(f\"Accuracy  score of column {n} is {jaccard_score(Y_train.values[:,n], prediction[:,n]):.2f}\")\n        print(f\"AUC  score of column {n} is {roc_auc_score(Y_train.values[:,n], prediction[:,n]):.2f}\")\n        print(classification_report(Y_train.values[:,n], prediction[:,n]))","c562e76e":"# make prediction and print accuracy\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import jaccard_score\nprediction_LR_proba = np.zeros((len(X_test),Y_test.shape[1]))\nprediction_LR = np.zeros((len(X_test),Y_test.shape[1]))\nfor n,tar in enumerate(Y_test):\n        model = models[n]\n        prediction_LR[:,n] = model.predict(X_test)\n        prediction_LR_proba[:,n] = model.predict_proba(X_test)[:,1]\n        print(f\"-------------classification_report of column {n}-------------\")\n        print(f\"column name -{Y_test.columns[n]}-\")\n        print(f\"Accuracy  score of column {n} is {jaccard_score(Y_test.values[:,n], prediction_LR[:,n]):.2f}\")\n        print(f\"AUC  score of column {n} is {roc_auc_score(Y_test.values[:,n], prediction_LR[:,n]):.2f}\")\n        print(classification_report(Y_test.values[:,n], prediction_LR[:,n]))","6a336f38":"print(classification_report(Y_test.values, prediction_LR))\nprint(f\"AUC  score of columns  are {roc_auc_score(Y_test,prediction_LR):.2f}\")","8c91e17d":"from sklearn.ensemble import RandomForestClassifier\n\npipe = make_pipeline(TfidfVectorizer(),RandomForestClassifier())\n#\u062a\u062d\u062f\u064a\u062f \u062a\u0631\u0627\u0643\u064a\u0628 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a \u0627\u0644\u062a\u064a \u0633\u064a\u062a\u0645 \u062a\u062c\u0631\u0628\u062a\u0647\u0627 \u0648\u0627\u062e\u062a\u064a\u0631 \u0627\u0641\u0636\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a\nparam_grid = {'randomforestclassifier__n_estimators':[3000],\n             'randomforestclassifier__max_features':['sqrt', 'log2']}","3b6e83fa":"# \u0627\u0644\u0642\u064a\u0627\u0645 \u0628\u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0646\u0645\u0648\u0630\u062c\nmodels = []\nfor n,tar in enumerate(Y_train):#\u0646\u0642\u0648\u0645 \u0628\u0627\u0644\u0645\u0631\u0648\u0631 \u0639\u0644\u0649 \u0643\u0644 \u0639\u0645\u0648\u062f \u0641\u064a \u0645\u0635\u0641\u0648\u0641\u0629 \u0627\u0644\u0627\u0647\u062f\u0627\u0641\n    model = GridSearchCV(pipe, param_grid, cv=3)\n    model.fit(X_train.values,Y_train[tar].values)#\u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0646\u0645\u0648\u0630\u062c \n    models.append(model)#\u062a\u0636\u0645\u064a\u0646 \u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0641\u064a \u0627\u0644\u0642\u0627\u0626\u0645\u0647\n    print(model.best_estimator_)#","46c687d7":"# \u062f\u0642\u0629 \u0627\u0644\u062a\u062f\u0631\u064a\u0628\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import jaccard_score\nprediction = np.zeros((len(X_train),Y_train.shape[1]))\nfor n,tar in enumerate(Y_train):\n        model = models[n]\n        prediction[:,n] = model.predict(X_train)\n        print(f\"-------------classification_report of column {n}-------------\")\n        print(f\"column name -{Y_train.columns[n]}-\")\n        print(f\"Accuracy  score of column {n} is {jaccard_score(Y_train.values[:,n], prediction[:,n]):.2f}\")\n        print(f\"AUC  score of column {n} is {roc_auc_score(Y_train.values[:,n], prediction[:,n]):.2f}\")\n        print(classification_report(Y_train.values[:,n], prediction[:,n]))","20c407fe":"#\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0646\u0645\u0648\u0630\u062c\nprediction_RF_proba = np.zeros((len(X_test),Y_test.shape[1]))\nprediction_RF = np.zeros((len(X_test),Y_test.shape[1]))\nfor n,tar in enumerate(Y_test):#\u064a\u062a\u0645 \u0647\u0646\u0627 \u0627\u0644\u0645\u0631\u0648\u0631 \u0639\u0644\u0649 \u0643\u0644 \u0639\u0645\u0648\u062f \u0641\u064a \u0645\u0635\u0641\u0648\u0641\u0629 \u0627\u0644\u0627\u0647\u062f\u0627\u0641\n        model = models[n]#\u064a\u062a\u0645 \u062a\u062d\u062f\u064a\u062f \u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0627\u0644\u0645\u062f\u0631\u0628 \u0639\u0644\u0649 \u0647\u062f\u0641 \u0645\u0639\u064a\u0646 \u0645\u0646 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0646\u0645\u0627\u0630\u062c\n        prediction_RF[:,n] = model.predict(X_test)#\"prediction\" \u064a\u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0641\u064a \u0627\u0644\u062a\u0646\u0628\u0624 \u0648\u062e\u0632\u0646 \u0627\u0644\u062a\u0646\u0628\u0624\u0627\u062a \u0641\u064a \u0627\u0644\u0645\u0635\u0641\u0648\u0641\u0647 \n        prediction_RF_proba[:,n] = model.predict_proba(X_test)[:,1]\n        print(f\"-------------classification_report of column {n}-------------\")\n        #\"Y_test\"\u0647\u0646\u0627 \u064a\u062a\u0645 \u0639\u0631\u0636 \u062f\u0642\u0629 \u0627\u0644\u062a\u0646\u0628\u0624 \u0645\u0642\u0627\u0631\u0646\u0647 \u0645\u0639 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0627\u0644\u0635\u062d\u064a\u062d \u0641\u064a \u0627\u0644\u0645\u0635\u0641\u0648\u0641\u0647  \n        print(f\"Accuracy  score of column {n} is {jaccard_score(Y_test.values[:,n], prediction_RF[:,n]):.2f}\")\n        print(classification_report(Y_test.values[:,n], prediction_RF[:,n]))","0a73545f":"print(classification_report(Y_test.values, prediction_RF))\nprint(f\"AUC  score of columns  are {roc_auc_score(Y_test,prediction_RF):.2f}\")\n","9682f248":"from sklearn import tree\npipe = make_pipeline(TfidfVectorizer(),tree.DecisionTreeClassifier(max_depth=200))\n#\u062a\u062d\u062f\u064a\u062f \u062a\u0631\u0627\u0643\u064a\u0628 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a \u0627\u0644\u062a\u064a \u0633\u064a\u062a\u0645 \u062a\u062c\u0631\u0628\u062a\u0647\u0627 \u0648\u0627\u062e\u062a\u064a\u0631 \u0627\u0641\u0636\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a\nparam_grid = {}","dcd6c724":"# \u0627\u0644\u0642\u064a\u0627\u0645 \u0628\u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0646\u0645\u0648\u0630\u062c\nmodels = []\nfor n,tar in enumerate(Y_train):#\u0646\u0642\u0648\u0645 \u0628\u0627\u0644\u0645\u0631\u0648\u0631 \u0639\u0644\u0649 \u0643\u0644 \u0639\u0645\u0648\u062f \u0641\u064a \u0645\u0635\u0641\u0648\u0641\u0629 \u0627\u0644\u0627\u0647\u062f\u0627\u0641\n    model = GridSearchCV(pipe, param_grid, cv=3)\n    model.fit(X_train.values,Y_train[tar].values)#\u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0646\u0645\u0648\u0630\u062c \n    models.append(model)#\u062a\u0636\u0645\u064a\u0646 \u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0641\u064a \u0627\u0644\u0642\u0627\u0626\u0645\u0647\n    print(model.best_estimator_)#","7a8078c6":"#\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0646\u0645\u0648\u0630\u062c\nprediction_DT_proba = np.zeros((len(X_test),Y_test.shape[1]))\nprediction_DT = np.zeros((len(X_test),Y_test.shape[1]))\nfor n,tar in enumerate(Y_test):#\u064a\u062a\u0645 \u0647\u0646\u0627 \u0627\u0644\u0645\u0631\u0648\u0631 \u0639\u0644\u0649 \u0643\u0644 \u0639\u0645\u0648\u062f \u0641\u064a \u0645\u0635\u0641\u0648\u0641\u0629 \u0627\u0644\u0627\u0647\u062f\u0627\u0641\n        model = models[n]#\u064a\u062a\u0645 \u062a\u062d\u062f\u064a\u062f \u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0627\u0644\u0645\u062f\u0631\u0628 \u0639\u0644\u0649 \u0647\u062f\u0641 \u0645\u0639\u064a\u0646 \u0645\u0646 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0646\u0645\u0627\u0630\u062c\n        prediction_DT_proba[:,n] = model.predict_proba(X_test)[:,1]\n        prediction_DT[:,n] = model.predict(X_test)#\"prediction\" \u064a\u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0641\u064a \u0627\u0644\u062a\u0646\u0628\u0624 \u0648\u062e\u0632\u0646 \u0627\u0644\u062a\u0646\u0628\u0624\u0627\u062a \u0641\u064a \u0627\u0644\u0645\u0635\u0641\u0648\u0641\u0647 \n        print(f\"-------------classification_report of column {n}-------------\")\n        #\"Y_test\"\u0647\u0646\u0627 \u064a\u062a\u0645 \u0639\u0631\u0636 \u062f\u0642\u0629 \u0627\u0644\u062a\u0646\u0628\u0624 \u0645\u0642\u0627\u0631\u0646\u0647 \u0645\u0639 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0627\u0644\u0635\u062d\u064a\u062d \u0641\u064a \u0627\u0644\u0645\u0635\u0641\u0648\u0641\u0647  \n        print(f\"Accuracy  score of column {n} is {jaccard_score(Y_test.values[:,n], prediction_DT[:,n]):.2f}\")\n        print(classification_report(Y_test.values[:,n], prediction_DT[:,n]))","4e4e91ce":"print(classification_report(Y_test.values, prediction_DT))\nprint(f\"AUC  score of columns  are {roc_auc_score(Y_test,prediction_DT):.2f}\")","dcfe77a2":"from sklearn.svm import SVC\n#\u0639\u0645\u0644 \u062e\u0637 \u0627\u0646\u0628\u0648\u0628\u064a \u0644\u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0642\u0628\u0644 \u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0639\u0644\u064a\u0647\u0627\npipe = make_pipeline(TfidfVectorizer(),\n                     SVC(class_weight=\"balanced\",probability=True))\n#\u062a\u062d\u062f\u064a\u062f \u062a\u0631\u0627\u0643\u064a\u0628 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a \u0627\u0644\u062a\u064a \u0633\u064a\u062a\u0645 \u062a\u062d\u0631\u0628\u062a\u0647\u0627 \u0648\u0627\u062e\u062a\u064a\u0627\u0631 \u0627\u0641\u0636\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a\nparam_grid = {'svc__kernel': ['rbf', 'linear', 'poly'],\n             'svc__gamma': [0.1, 1, 10],\n             'svc__C': [0.1, 1, 10],\n             }","425cb006":"# \u0627\u0644\u0642\u064a\u0627\u0645 \u0628\u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0646\u0645\u0648\u0630\u062c\nmodels = []\nfor n,tar in enumerate(Y_train):#\u0646\u0642\u0648\u0645 \u0628\u0627\u0644\u0645\u0631\u0648\u0631 \u0639\u0644\u0649 \u0643\u0644 \u0639\u0645\u0648\u062f \u0641\u064a \u0645\u0635\u0641\u0648\u0641\u0629 \u0627\u0644\u0627\u0647\u062f\u0627\u0641\n        model = GridSearchCV(pipe, param_grid, cv=2)\n        model.fit(X_train.values,Y_train[tar].values)#\u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0646\u0645\u0648\u0630\u062c \n        models.append(model)#\u062a\u0636\u0645\u064a\u0646 \u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0641\u064a \u0627\u0644\u0642\u0627\u0626\u0645\u0647\n        print(model.best_estimator_)#\u0639\u0631\u0636 \u0627\u0641\u0636\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a \u0644\u0644\u0646\u0645\u0648\u0630\u062c","e0ac77f3":"#\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0646\u0645\u0648\u0630\u062c\nprediction_SVM_proba = np.zeros((len(X_test),Y_test.shape[1]))\nprediction_SVM = np.zeros((len(X_test),Y_test.shape[1]))\nfor n,tar in enumerate(Y_test):#\u064a\u062a\u0645 \u0647\u0646\u0627 \u0627\u0644\u0645\u0631\u0648\u0631 \u0639\u0644\u0649 \u0643\u0644 \u0639\u0645\u0648\u062f \u0641\u064a \u0645\u0635\u0641\u0648\u0641\u0629 \u0627\u0644\u0627\u0647\u062f\u0627\u0641\n        model = models[n]#\u064a\u062a\u0645 \u062a\u062d\u062f\u064a\u062f \u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0627\u0644\u0645\u062f\u0631\u0628 \u0639\u0644\u0649 \u0647\u062f\u0641 \u0645\u0639\u064a\u0646 \u0645\u0646 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0646\u0645\u0627\u0630\u062c\n        prediction_SVM_proba[:,n] = model.predict_proba(X_test)[:,1]\n        prediction_SVM[:,n] = model.predict(X_test)#\"prediction\" \u064a\u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0641\u064a \u0627\u0644\u062a\u0646\u0628\u0624 \u0648\u062e\u0632\u0646 \u0627\u0644\u062a\u0646\u0628\u0624\u0627\u062a \u0641\u064a \u0627\u0644\u0645\u0635\u0641\u0648\u0641\u0647 \n        print(f\"-------------classification_report of column {n}-------------\")\n            #\"Y_test\"\u0647\u0646\u0627 \u064a\u062a\u0645 \u0639\u0631\u0636 \u062f\u0642\u0629 \u0627\u0644\u062a\u0646\u0628\u0624 \u0645\u0642\u0627\u0631\u0646\u0647 \u0645\u0639 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0627\u0644\u0635\u062d\u064a\u062d \u0641\u064a \u0627\u0644\u0645\u0635\u0641\u0648\u0641\u0647 \n        print(f\"Accuracy  score of column {n} is {jaccard_score(Y_test.values[:,n], prediction_SVM[:,n]):.2f}\")\n        print(classification_report(Y_test.values[:,n], prediction_SVM[:,n]))","56143c5b":"print(classification_report(Y_test.values, prediction_SVM))\nprint(f\"AUC  score of columns  are {roc_auc_score(Y_test,prediction_SVM):.2f}\")","594dfb4f":"All_preductions =  prediction_LR + prediction_SVM + prediction_DT + prediction_RF\nAll_preductions","b8faa90d":"All_preductions = np.where(All_preductions >= 1 ,1,0)","7300c1d2":"#\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0646\u0645\u0648\u0630\u062c\nfor n,tar in enumerate(Y_test):#\u064a\u062a\u0645 \u0647\u0646\u0627 \u0627\u0644\u0645\u0631\u0648\u0631 \u0639\u0644\u0649 \u0643\u0644 \u0639\u0645\u0648\u062f \u0641\u064a \u0645\u0635\u0641\u0648\u0641\u0629 \u0627\u0644\u0627\u0647\u062f\u0627\u0641\n        print(f\"-------------classification_report of column {n}-------------\")\n        print(f\"column name -{Y_test.columns[n]}-\")\n\n        #\"Y_test\"\u0647\u0646\u0627 \u064a\u062a\u0645 \u0639\u0631\u0636 \u062f\u0642\u0629 \u0627\u0644\u062a\u0646\u0628\u0624 \u0645\u0642\u0627\u0631\u0646\u0647 \u0645\u0639 \u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0627\u0644\u0635\u062d\u064a\u062d \u0641\u064a \u0627\u0644\u0645\u0635\u0641\u0648\u0641\u0647 \n        print(f\"Accuracy  score of column {n} is {jaccard_score(Y_test.values[:,n], All_preductions[:,n]):.2f}\")\n        print(classification_report(Y_test.values[:,n], All_preductions[:,n]))","7fbe6dba":"print(classification_report(Y_test.values, All_preductions))\nprint(f\"AUC  score of columns  are {roc_auc_score(Y_test,All_preductions):.2f}\")","ec006bda":"### SVM classifier","532e59af":"# \u0627\u0639\u062f\u0627\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0644\u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0646\u0645\u0648\u0630\u062c","475d02fc":"### LogisticRegression classifier","a14ce9e4":"# \u0627\u0633\u062a\u0643\u0634\u0627\u0641 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a","be89ea15":"# \u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0646\u0645\u0648\u0630\u062c","184ccd9a":"# \u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a","d0ca9b34":"## Hard Voting Classifier","2579017a":"### \u0645\u0636\u0627\u0639\u0641\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0642\u0644\u064a\u0644\u0647","a8924ee2":"# \u062a\u0636\u0645\u064a\u0646 \u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0647 \u0641\u064a \u0627\u0644\u0645\u0634\u0631\u0648\u0639","8313fc0b":"# \u0639\u0631\u0636 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a ","5b3f29c4":"### RandomForestClassifier","0c55dc15":"## Decision Trees"}}