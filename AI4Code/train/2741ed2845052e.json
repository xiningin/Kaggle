{"cell_type":{"53a0f481":"code","dbeeda60":"code","73742640":"code","f9f7c9ed":"code","9970a7d3":"code","42373519":"code","2781c621":"code","b0278f49":"code","3326ae95":"code","87e246fe":"code","17eacb53":"code","0cb4da0e":"code","26ae5343":"code","81f50e14":"code","43435cc5":"code","925f4148":"code","7c6f39fd":"code","852591a2":"code","b1b1fc21":"code","5e1487e8":"code","65b63c91":"code","86b2a7c5":"code","0589fcab":"markdown","ce5b4597":"markdown","a830c4b5":"markdown"},"source":{"53a0f481":"import datetime\nimport numpy as np\nimport pandas as pd\nimport math\nimport matplotlib.pyplot as plt # data visualization\nimport seaborn as sns # statistical data visualization\nimport missingno\n%matplotlib inline","dbeeda60":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.inspection import permutation_importance\nfrom sklearn import tree\n\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\nimport graphviz\nfrom IPython.display import Image\n#import pydotplus\nimport collections","73742640":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9f7c9ed":"df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')","9970a7d3":"# Pick out relevant columns\nd1 = pd.DataFrame() \nd1['age'] = df['Q1'][1:]\nd1['gender'] = df['Q2'][1:]\nd1['country'] = df['Q3'][1:]\nd1['highest_education'] = df['Q4'][1:]\nd1['job_title'] = df['Q5'][1:]\nd1['experience'] = df['Q6'][1:]\nd1['recommended_language'] = df['Q8'][1:]\nd1['computing_platform'] = df['Q11'][1:]\nd1['use_of_tpu'] = df['Q13'][1:]\nd1['ml_exp_years'] = df['Q15'][1:]\nd1['size_of_company'] = df['Q20'][1:]\nd1['emp_in_ds_dept'] = df['Q21'][1:]\nd1['ml_in_company'] = df['Q22'][1:]\nd1['salary'] = df['Q24'][1:]\nd1['ml_cc_spend'] = df['Q25'][1:]\nd1['big_data_products'] = df['Q30'][1:]\nd1['bi_tools'] = df['Q32'][1:]\nd1['analysis_tools'] = df['Q38'][1:]","42373519":"d1.head()","2781c621":"## Salary\nd1['salary'] = d1['salary'].fillna('No answer')\nsalary_mapping = {'No answer' : 0, '$0-999' : 1 , '1,000-1,999' : 2, '2,000-2,999' : 3, '3,000-3,999': 4, '4,000-4,999': 5, \n               '5,000-7,499': 6, '7,500-9,999': 7, '10,000-14,999': 8,'15,000-19,999': 9,'20,000-24,999': 10, \n                '25,000-29,999': 11, '30,000-39,999': 12, '40,000-49,999': 13, '50,000-59,999': 14, '60,000-69,999': 15,\n                '70,000-79,999': 16, '80,000-89,999': 17, '90,000-99,999': 18,\n                 '100,000-124,999': 19, '125,000-149,999': 20, '150,000-199,999': 21,\n                 '200,000-249,999': 22, '250,000-299,999': 23, '300,000-500,000': 24, '> $500,000': 25}\n\nd1['salary_ordinal'] = d1.loc[d1.salary.notnull(), 'salary'].map(salary_mapping)","b0278f49":"# High Salary Indicator\nd1['salary_high'] = [1 if x >=19 else 0 for x in d1['salary_ordinal']] ","3326ae95":"# Age\nage_mapping = {'18-21' : 0 , '22-24' : 1, '25-29' : 2, '30-34': 3, '35-39': 4, \n               '40-44': 5, '45-49': 6, '50-54': 7,'55-59': 8,'60-69': 9, '70+': 10 }\n\nd1['age_ordinal'] = d1.loc[d1.age.notnull(), 'age'].map(age_mapping)\nd1 = d1.sort_values(by=['age_ordinal'])","87e246fe":"## Experience\nd1['experience'] = d1['experience'].fillna('No answer')\nexperience_mapping = {'No answer':0, 'I have never written code' : 1 , '< 1 years' : 2, '1-2 years' : 3, '3-5 years': 4, '5-10 years': 5, \n               '10-20 years': 6, '20+ years': 7}\n\nd1['experience_ordinal'] = d1.loc[d1.experience.notnull(), 'experience'].map(experience_mapping)","17eacb53":"# Highest Education\nd1['highest_education'] = d1['highest_education'].fillna('No answer')\nhighest_education_mapping = {'No answer':0, 'I prefer not to answer' : 1 , 'No formal education past high school' : 2, 'Some college\/university study without earning a bachelor\u2019s degree' : 3, 'Bachelor\u2019s degree': 4, 'Master\u2019s degree': 5, \n               'Doctoral degree': 6, 'Professional degree': 7}\n\nd1['highest_education_ordinal'] = d1.loc[d1.highest_education.notnull(), 'highest_education'].map(highest_education_mapping)","0cb4da0e":"## Machine Learning Experience\nd1['ml_exp_years'] = d1['ml_exp_years'].fillna('No answer')\nml_exp_years_mapping = {'No answer':0 , 'I do not use machine learning methods' : 1 , 'Under 1 year' : 2, \n                        '1-2 years' : 3, '2-3 years' :4,\n                        '3-4 years': 5, '4-5 years': 6, '5-10 years': 7, '10-20 years': 8, '20 or more years': 9}\nd1['ml_exp_years_ordinal'] = d1.loc[d1.ml_exp_years.notnull(), 'ml_exp_years'].map(ml_exp_years_mapping)","26ae5343":"## Size of company\nd1['size_of_company'] = d1['size_of_company'].fillna('No answer')\nsize_of_company_mapping = {'No answer':0 , '0-49 employees' : 1 , '50-249 employees' : 2, '250-999 employees' : 3,\n               '1000-9,999 employees': 4, '10,000 or more employees': 5}\nd1['size_of_company_ordinal'] = d1.loc[d1.size_of_company.notnull(), 'size_of_company'].map(size_of_company_mapping)","81f50e14":"## ML Spend\nd1['ml_cc_spend'] = d1['ml_cc_spend'].fillna('No answer')\nml_cc_spend_mapping = {'No answer':0 , '$0 ($USD)' : 1 , '$1-$99' : 2, '$100-$999' : 3,'$1000-$9,999':4,\n               '$10,000-$99,999': 5, '$100,000 or more ($USD)': 6}\nd1['ml_cc_spend_ordinal'] = d1.loc[d1.ml_cc_spend.notnull(), 'ml_cc_spend'].map(ml_cc_spend_mapping)","43435cc5":"def evaluate(truth, pred):\n    accuracy = accuracy_score(truth, pred)\n    print('Confusion Matrix')\n    print(confusion_matrix(truth, pred))\n    print('Classification Report')\n    print(classification_report(truth, pred))\n    mae  = mean_absolute_error(truth, pred)\n    mse  = mean_squared_error(truth, pred)\n    rmse = math.sqrt(mse)\n    print()\n    return (mae, mse, rmse)\nresultsDF = pd.DataFrame(columns=['Technique', 'MAE', 'MSE', 'RMSE', 'log_loss_metric', 'Features','TrainingTime'])","925f4148":"# Generate results\ndef generate_results(technique,truth,pred,X_train,traintime,proba):\n    mae, mse, rmse = evaluate(y_test, pred)\n    log_loss_metric = log_loss(y_test,proba) ##################\n    print('MAE  : {:.2f}'.format(mae))\n    print('RMSE : {:.2f}'.format(rmse))\n    print('Log loss : {:.2f}'.format(log_loss_metric))\n    resultsDF.loc[technique] = [technique, mae, mse, rmse, log_loss_metric, X_train.shape[1],traintime]","7c6f39fd":"categorical_columns = ['gender','country', 'job_title', 'recommended_language','computing_platform','use_of_tpu','emp_in_ds_dept','big_data_products','bi_tools','analysis_tools']\nnumerical_columns = []\nord_columns    = ['age_ordinal','experience_ordinal','highest_education_ordinal','ml_exp_years_ordinal','size_of_company_ordinal','ml_cc_spend_ordinal']","852591a2":"categorical_pipe = Pipeline([\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\nnumerical_pipe = Pipeline([\n    #('scaler',  StandardScaler()),\n    ('imputer', SimpleImputer(strategy='median'))\n])\n\nordinal_pipe = Pipeline(steps=[\n    ('le', OrdinalEncoder())\n])\n\npreprocessor = ColumnTransformer(\n    [('cat', categorical_pipe, categorical_columns),\n     ('num', numerical_pipe, numerical_columns),\n     ('le',  ordinal_pipe,  ord_columns)])","b1b1fc21":"y = d1['salary_high'].copy()\nX = d1.drop(columns=['salary_ordinal','salary_high']).copy()\nX = X[categorical_columns + numerical_columns + ord_columns]","5e1487e8":"pipe = Pipeline(steps=[('preprocess', preprocessor)])\nX_train_proc = pipe.fit_transform(X, y)","65b63c91":"# Baseline Random Forest Model\nrf = RandomForestClassifier(n_estimators=200, \n                               criterion='gini', # default is gini, entropy is Information Gain = Log Loss which leads to more balanced trees\n                               min_samples_split=5, \n                               min_samples_leaf=2, \n                               max_features='auto',  # Was 'auto' - can be sqrt\n                               bootstrap=True, n_jobs=-1, random_state=42)\n# Fit\nstartDefault = datetime.datetime.now()\nrf.fit(X_train_proc, y)\nendDefault = datetime.datetime.now()\ndefaultTime = (endDefault - startDefault).seconds\nprint(f'Default took {defaultTime} seconds')\n# Predict\nproba = rf.predict_proba(X_test_proc)\npred  = np.argmax(proba, axis=1)\n# Log Results\ngenerate_results('Baseline Random Forest',y_test,pred,X_train,defaultTime,proba)","86b2a7c5":"ohe = (pipe.named_steps['preprocess']\n         .named_transformers_['cat']\n         .named_steps['onehot'])\nfeature_names = ohe.get_feature_names(input_features=categorical_columns)\nfeature_names = np.r_[feature_names, numerical_columns,ord_columns]\n\ntree_feature_importances = (\n    rf.feature_importances_)\nsorted_idx = tree_feature_importances.argsort()\n\ny_ticks = np.arange(0, len(feature_names))\nfig, ax = plt.subplots(figsize=(10,6))\nax.barh(y_ticks[-10:], tree_feature_importances[sorted_idx][-10:])\nax.set_yticklabels(feature_names[sorted_idx][-10:])\nax.set_yticks(y_ticks[-10:])\n#ax.set_title(\"Random Forest Feature Importances (MDI)\")\n\nfig.suptitle('Random Forest Feature Importance', fontsize=20)\nplt.xlabel('Importance', fontsize=20)\nplt.ylabel('Feature', fontsize=20)\n\n# Set general font size\nplt.rcParams['font.size'] = '16'\n\n# Set tick font size\nfor label in (ax.get_xticklabels() + ax.get_yticklabels()):\n    label.set_fontsize(16)\n\nplt.show()","0589fcab":"# Model - what ","ce5b4597":"# Exporation of the factors that lead to high Salary","a830c4b5":"# ****So the most important factor that leads to a high salary is living the USA!****\n\nFollowed by: -\n1. the money have you (or your team) spent on machine learning and\/or cloud computing services at home (or at work) in the past 5 years (approximate $USD)\n2. the number of years have you used machine learning methods\n3. your age\n4. your experience\n\n\n"}}