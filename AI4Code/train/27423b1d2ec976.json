{"cell_type":{"77805c60":"code","ecb0362c":"code","040e289d":"code","8ee0a955":"code","256b1afa":"code","0f831f33":"code","d0ab353f":"code","121a4ad1":"code","4bf023d2":"code","ccba7cc4":"code","4ac34e26":"code","8b4f2ccb":"code","f3431fdc":"code","c938c9e7":"code","0ccbebb0":"code","9310356e":"code","fd56082a":"code","a556bd61":"code","5a233397":"code","c58ac971":"code","a3d2ea25":"code","137e3cf4":"code","bc51d98b":"markdown","a4fc57d0":"markdown","ba87784b":"markdown","456352e6":"markdown","896f7dcd":"markdown","be1ead07":"markdown","123e579b":"markdown","572e2773":"markdown","dc3c5254":"markdown","9636cff9":"markdown","38e49767":"markdown","881de1c2":"markdown","c13bea96":"markdown","c384f36e":"markdown"},"source":{"77805c60":"# Import libraries.\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\n\n# Configure matplotlib to deal with dark themes\nplt.style.use(\"default\")\n\n# Set pandas to show all Dataframes columns and rows.\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","ecb0362c":"# Create a dictionary of column descriptions. It will be util when plotting those features.\ncolumns_descriptions = {\n    \"wsid\": \"Weather station id\",\n    \"wsnm\": \"Name station (usually city location or nickname)\",\n    \"elvt\": \"Elevation\",\n    \"lat\": \"Latitude\",\n    \"lon\": \"Longitude\",\n    \"inme\": \"Station number (INMET number) for the location\",\n    \"city\": \"City\",\n    \"prov\": \"State (Province)\",\n    \"mdct\": \"Observation Datetime (complete date: date + time)\",\n    \"date\": \"Date of observation\",\n    \"yr\": \"The year (2000-2016)\",\n    \"mo\": \"The month (0-12)\",\n    \"da\": \"The day (0-31)\",\n    \"hr\": \"The hour (0-23)\",\n    \"prcp\": \"Amount of precipitation in millimetres (last hour)\",\n    \"stp\": \"Air pressure for the hour in hPa to tenths (instant)\",\n    \"smax\": \"Maximum air pressure for the last hour in hPa to tenths\",\n    \"smin\": \"Minimum air pressure for the last hour in hPa to tenths\",\n    \"gbrd\": \"Solar radiation KJ\/m2\",\n    \"temp\": \"Air temperature (instant) in celsius degrees\",\n    \"dewp\": \"Dew point temperature (instant) in celsius degrees\",\n    \"tmax\": \"Maximum temperature for the last hour in celsius degrees\",\n    \"dmax\": \"Maximum dew point temperature for the last hour in celsius degrees\",\n    \"tmin\": \"Minimum temperature for the last hour in celsius degrees\",\n    \"dmin\": \"Minimum dew point temperature for the last hour in celsius degrees\",\n    \"hmdy\": \"Relative humid in % (instant)\",\n    \"hmax\": \"Maximum relative humid temperature for the last hour in %\",\n    \"hmin\": \"Minimum relative humid temperature for the last hour in %\",\n    \"wdsp\": \"Wind speed in metres per second\",\n    \"wdct\": \"Wind direction in radius degrees (0-360)\",\n    \"gust\": \"Wind gust in metres per second\",\n}\n\nnp.random.seed(13)\n# Create a dictionary of colors.\ncolumns_colors = {\n    color: (np.random.random(3).tolist()) for color in columns_descriptions.keys()\n}","040e289d":"# Read the dataset. We also parse the mdct column to Datetime objects.\ndf = pd.read_csv(\"\/kaggle\/input\/hourly-weather-surface-brazil-southeast-region\/sudeste.csv\", parse_dates=[\"mdct\"])\n\n# Show some info.\ndf.info()","8ee0a955":"df.drop([\"wsnm\", \"inme\", \"city\", \"prov\", \"date\"], axis=1, inplace=True)\n\n# Set the index to wsid and mdct\ndf = df.set_index(\"mdct\")\n\n# Get data from only last six years\ndf[\"2010\": \"2016\"]\n\n# Show first entries\ndf.head()","256b1afa":"na_values = df.isna().sum()\nna_values","0f831f33":"# Columns with missing values\nna_columns = df.columns[na_values != 0].tolist()\n\n# Check the missing values by station\ndf[na_columns].isna().groupby(df.wsid).sum()","d0ab353f":"# Select data from station 317.\nst_317 = df[df.wsid == 317].copy()\nst_317.head()","121a4ad1":"# Utility function to plot the station data.\ndef plot_station_data(data, col_name, ax):\n    title = columns_descriptions[col_name]\n    color = columns_colors[col_name]\n    ax.plot(data, color=color)\n    ax.set(title=title,\n       ylabel=col_name)","4bf023d2":"# Plot columns with missing values from year 2015.\nna_columns = st_317.columns[st_317.isna().sum() != 0].tolist()\nfig, axs = plt.subplots(nrows=len(na_columns), ncols=1, figsize=(20, 20))\n\nfor ax, col_name in zip(axs, na_columns):\n    plot_station_data(st_317[col_name][\"2015\"], col_name, ax)\n\nfig.tight_layout(pad=1.0)\nfig.show()","ccba7cc4":"# Plot gbrd data from one week.\nfig, ax = plt.subplots(figsize=(20, 5))\nplot_station_data(st_317.gbrd[\"2015-09-01\": \"2015-09-07\"], \"gbrd\", ax)\nfig.show()","4ac34e26":"zeros_columns = [\"prcp\", \"gbrd\"]  # zeros\ninterpolate_columns = [\"wdsp\", \"gust\", \"temp\", \"dewp\", \"tmax\", \"dmax\", \"tmin\", \"dmin\", \"hmax\", \"hmin\"]  # interpolations\n\n# Fill missing values with with zeros\nst_317[zeros_columns] = st_317[zeros_columns].fillna(0)\n# Linearlly interpolate missing values.\nst_317[interpolate_columns] = st_317[interpolate_columns].interpolate(method=\"linear\")\n\n# Check for missing values again.\nst_317.isna().sum()","8b4f2ccb":"st_317_original_shape = st_317.shape","f3431fdc":"# Select rows with all feature columns equal to zero.\nfeature_columns = [\n    \"prcp\",\n    \"stp\",\n    \"smax\",\n    \"smin\",\n    \"gbrd\",\n    \"temp\",\n    \"dewp\",\n    \"tmax\",\n    \"dmax\",\n    \"tmin\",\n    \"dmin\",\n    \"hmdy\",\n    \"hmax\",\n    \"hmin\",\n    \"wdsp\",\n    \"wdct\",\n    \"gust\",\n]\nst_317 = st_317[(st_317[feature_columns] != 0).any(axis=1)]\nst_317.head()","c938c9e7":"st_317_original_shape, st_317.shape","0ccbebb0":"st_317.info()","9310356e":"st_317 = st_317.drop([\"dewp\", \"tmax\", \"dmax\", \"tmin\", \"dmin\"], axis=1)","fd56082a":"corr_matrix = st_317.corr()","a556bd61":"fix, ax = plt.subplots(figsize=(15, 10))\nax = sns.heatmap(corr_matrix,\n                annot=True,\n                linewidths=0.5,\n                fmt=\".2f\",\n                cmap=\"YlGnBu\")\nax.set(title=\"Correlation matrix\");","5a233397":"# Split the data.\nnp.random.seed(13)\n\nX_train, X_test, y_train, y_test = train_test_split(st_317.drop(\"temp\", axis=1), st_317[\"temp\"], test_size=0.2)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","c58ac971":"# Define the model\nmodel = RandomForestRegressor(n_estimators=100)\n\n# Train\nmodel.fit(X_train, y_train)","a3d2ea25":"# Compute the score of the model on the train data.\nmodel.score(X_train, y_train)","137e3cf4":"# Compute the score of the model on the test data.\nmodel.score(X_test, y_test)","bc51d98b":"First, let's remove the **dewp**, **tmax**, **dmax**, **tmin** and **dmin**, as just want to predict the temperature","a4fc57d0":"As we can see, the missing values are mainly located in **prcp**, **gbrd**, **wdsp** e **gust** columns.\n\n## Station 317\n\nNow we'll focus our analysis on **station 317** to develop our data cleaning methodology. We choose this station due to the high amount of missing values across all feature columns.","ba87784b":"## Cleaning the dataset.\n\nLet's apply these operations.","456352e6":"# Problem Definition\nIt's covers hourly weather data from 122 weathers stations of southeast region (Brazil). The southeast include the states of Rio de Janeiro, S\u00e3o Paulo, Minas Gerais e Espirito Santo.\n\n**Dataset Source:** INMET (National Meteorological Institute - Brazil).\n\n**Equipament:** Vaisala Automatic Weather Station AWS310\n\n**Category:** Weather\n\n## Questions\n* Can you predict the amount of rain?\n* Can you predict the temperature? \n\n# Data\n\n* **wsid:** Weather station id\n* **wsnm:** Name station (usually city location or nickname)\n* **elvt:** Elevation\n* **lat:** Latitude\n* **lon:** Longitude\n* **inme:** Station number (INMET number) for the location\n* **city:** City\n* **prov:** State (Province)\n* **mdct:** Observation Datetime (complete date: date + time)\n* **date:** Date of observation\n* **yr:** The year (2000-2016)\n* **mo:** The month (0-12)\n* **da:** The day (0-31)\n* **hr:** The hour (0-23)\n* **prcp:** Amount of precipitation in millimetres (last hour)\n* **stp:** Air pressure for the hour in hPa to tenths (instant)\n* **smax:** Maximum air pressure for the last hour in hPa to tenths\n* **smin:** Minimum air pressure for the last hour in hPa to tenths\n* **gbrd:** Solar radiation KJ\/m2\n* **temp:** Air temperature (instant) in celsius degrees\n* **dewp:** Dew point temperature (instant) in celsius degrees\n* **tmax:** Maximum temperature for the last hour in celsius degrees\n* **dmax:** Maximum dew point temperature for the last hour in celsius degrees\n* **tmin:** Minimum temperature for the last hour in celsius degrees\n* **dmin:** Minimum dew point temperature for the last hour in celsius degrees\n* **hmdy:** Relative humid in % (instant)\n* **hmax:** Maximum relative humid temperature for the last hour in %\n* **hmin:** Minimum relative humid temperature for the last hour in %\n* **wdsp:** Wind speed in metres per second\n* **wdct:** Wind direction in radius degrees (0-360)\n* **gust:** Wind gust in metres per second\n\n**NOTE: Not all weather stations started operating since 2000**","896f7dcd":"As we can see the missing values occur in absence of daylight, which is totally acceptable given column's name. So we'll fill those missing values with zeros.","be1ead07":"### Summary of operations:\n* Zero fill\n    * **prcp** e **gbrd**\n* Interpolation\n    * **temp**, **dewp**, **tmax**, **dmax**, **tmin**, **dmin**, **hmax** and **hmin**\n* As an additional operation, we'll remove rows with all feature columns equal to zero.","123e579b":"# Simple RandomForest prediction model.","572e2773":"Now, we'll plot the correlation between features.","dc3c5254":"Now, we'll train the model","9636cff9":"## Checking for missing values","38e49767":"Let's begin by removing some unrelevant columns. **wsnm** and **inme** are redundant as we already have **wsid**, the station id. **date** too, as we have **mdct**, the timestamp column. Also, I dont't see how the **city** and **prov** would affect our analysis.","881de1c2":"We can see that reading are set to zero in some periods of time, more specifically in months March and June. Maybe, this station went through some problems in these periods. So we'll just remove those rows from the dataframe.\n\nAfter some googling, we concluded that **prcp**, namelly *Amout of Preciptation*, is a indicator of rain activity in area. So the missing values of this feature may be indicators that no rains occurred, and we'll just set them to zero.\n\nThe missing values in **wdsp**, **gust**, **temp**, **dewp**, **tmax**, **dmax**, **tmin**, **dmin**, **hmax** and **hmin** columns are sparse, and may be due to some ocasional reading errors. To be more concise with the rest of the readings, we'll fill those values with the interpolation of their neighboring points.\n\nAs for the **gbrd** column, namelly *Solar Radiation*, this is a special case, worth of a more closer look.","c13bea96":"Now let's check the check the more problematic columns. To avoid ugly plots, we'll select data only from year 2015.","c384f36e":"Interesting. Let's see the distribution of these missing values across stations."}}