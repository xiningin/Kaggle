{"cell_type":{"9d9e3130":"code","4a332655":"code","d97cd80d":"code","4528ec6c":"code","22965031":"code","948b89a6":"code","9b98a377":"code","7a19eb30":"code","86aff3b0":"code","abe1e32e":"code","6413397a":"code","1e017738":"code","b3861a37":"code","3fc7f662":"code","319f5ecf":"code","3bee287c":"code","931b8283":"code","4a7c16e2":"markdown","fce2101a":"markdown","d77222bf":"markdown","8b73c44d":"markdown","882fb25d":"markdown","0f1f89cd":"markdown","50a7d563":"markdown","979ceced":"markdown","19386f90":"markdown","5f3c7620":"markdown","9a221d70":"markdown","480ecc7d":"markdown","b52b805e":"markdown","94451c6e":"markdown","5d16cf95":"markdown","1df6b2b8":"markdown","cfdd67a8":"markdown","b1722cd4":"markdown","7031528b":"markdown","702f8481":"markdown","d0b6a05a":"markdown"},"source":{"9d9e3130":"!pip install timm","4a332655":"from fastai import *\nfrom fastai.vision import *\nfrom sklearn.metrics import f1_score\nimport timm","d97cd80d":"def seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\nseed_everything(43)","4528ec6c":"train = pd.read_csv('..\/input\/clabscvcomp\/data\/train.csv')\ntest_df = pd.read_csv('..\/input\/clabscvcomp\/data\/sample_submission.csv')\n\ntrain.head() ## Shows the first five rows of data frame","22965031":"sorted(train.genres.unique()) ## Shows all classes in the dataframe","948b89a6":"train.genres.value_counts(normalize=True) ## Distribution of dataset","9b98a377":"sz = 512 ## Image size\nbs = 12 ## Batch size\ntfms = get_transforms( ## Transformation to apply on Train data\n    do_flip=True, ## Horizontal flip\n    flip_vert=False, ## Vertical flip\n    max_rotate=45, ## Rotation\n    max_zoom=2.0, ## Center zoom\n    max_lighting=0.75 ## lighting\n)","7a19eb30":"plt.imread('..\/input\/clabscvcomp\/data\/train_data\/1000.jpg').shape","86aff3b0":"data = (\n    ImageList.from_df(df=train, path='', folder='..\/input\/clabscvcomp\/data\/train_data\/', cols='id', suffix = '.jpg') ## define data path\n    .split_by_rand_pct(valid_pct=0.2) ## validation split\n    .label_from_df(cols='genres') ## load labels from\n    .transform(tfms, size=sz)\n    .databunch(bs=bs, num_workers=4) \n    .normalize(imagenet_stats)\n    )","abe1e32e":"test_data = ImageList.from_df(test_df, path='..\/input\/clabscvcomp\/data\/test_data\/', cols='id', suffix = '.jpg')\ndata.add_test(test_data)","6413397a":"data.show_batch(3)","1e017738":"def F1(y_pred, y):\n    y_pred = y_pred.softmax(dim=1) \n    y_pred = y_pred.argmax(dim=1)\n    return torch.tensor(f1_score(y.cpu(), y_pred.cpu(), labels=list(range(10)), average='weighted'),device='cuda:0')","b3861a37":"learn = cnn_learner(\n                    data, ## DataBunch\n                    timm.models.resnext101_32x4d, ## Resnet50 \n                    metrics=[F1, accuracy], ## Matrices\n                    callback_fns=ShowGraph ## Allows us to visualize training\n).mixup()","3fc7f662":"learn.freeze() \nlearn.fit_one_cycle(5)","319f5ecf":"learn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion=True)","3bee287c":"learn.fit_one_cycle(20, max_lr=slice(1e-4, 1e-3))","931b8283":"preds = learn.get_preds(ds_type=DatasetType.Test) ## get prediction in test data\npreds = np.argmax(preds[0].numpy(),axis = 1)\ncategories = sorted(train.genres.unique().astype('str'))\nfinal_preds = []\nfor idx in preds:\n    final_preds.append(categories[idx])\nfinal_submit = pd.read_csv('..\/input\/clabscvcomp\/data\/sample_submission.csv')\nfinal_submit.genres = final_preds\nfinal_submit.head()\nfinal_submit.to_csv('submission.csv',index = False)","4a7c16e2":"Dataset looks very imbalanced. Try to read more about it. This blog post might be a good read [link](https:\/\/www.analyticsvidhya.com\/blog\/2017\/03\/imbalanced-classification-problem\/)","fce2101a":"# Defining FastAI's Learner \nLearner is an integration of DataBunch + Model + callbacks\nMore about it can be found [here](https:\/\/docs.fast.ai\/vision.learner.html)","d77222bf":"## Now click on the \"Commit\" to submit the notebook. This notebook generates 'submission.csv' which can be check how the model performed. \n## After the notebook is commited successfully. Click on the Output button. This will bring you to a screen with an option to Submit to Competition. Hit that and you will see how your model performed.\n## NOTE: We expect everyone to generate such notebooks for your final submission. Only the teams with notebook submitted against their final submission will be considered for prize money!","8b73c44d":"###### Unfreeze all layers and find best learning rate","882fb25d":"# Lets start training!!","0f1f89cd":"## Predicting for test data","50a7d563":"## Reading CSV","979ceced":"## NOTE: Turn on the Internet and GPU for this kernal before starting ","19386f90":"# PS: This competition is hosted to promote learning. So we request you to publish your baseline models via Kaggle kernels and discuss on the discussion tab to help others learn. Thanks!","5f3c7620":"# How to add dataset to the kernal\n* Click on \"Add Data\" \n* Search \"CLabsCVcomp\"\n* Click on \"Add\"\n* Done\n","9a221d70":"Now lets add test data to the DataBunch","480ecc7d":"# EDTA","b52b805e":"# Seed everything for reproducibility\nYou may like to read more about it at [link](https:\/\/medium.com\/@ODSC\/properly-setting-the-random-seed-in-ml-experiments-not-as-simple-as-you-might-imagine-219969c84752).","94451c6e":"###### Freeze all layers but last layer and training some epochs with one-cycle policy\nRead more: [1-cycle policy basics](https:\/\/sgugger.github.io\/the-1cycle-policy.html), [Documentation](https:\/\/docs.fast.ai\/callbacks.one_cycle.html)","5d16cf95":"# Importing all Libraries\nPS - FastAI imports all necessary libraries for you","1df6b2b8":"# Things to try next:\n* Try different architectures, optimizers, loss functions etc.\n* Think of ways of tackling data imbalance problem.\n* Try different image size\n* Try Ensembling methods.\n* Apply semi supervised learning.","cfdd67a8":"# Defining DataBunch for FastAI\nRead more about it [here](https:\/\/docs.fast.ai\/vision.data.html#ImageDataBunch.from_df)","b1722cd4":"# Define F1 metric","7031528b":"# Visualizing dataset","702f8481":"###### Notebook created by: Arnav Chavan (@[carnav0400](https:\/\/www.kaggle.com\/carnav0400)), Udbhav Bamba (@[ubamba98](https:\/\/www.kaggle.com\/ubamba98))","d0b6a05a":"###### Continue training"}}