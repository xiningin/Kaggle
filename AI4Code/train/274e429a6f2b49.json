{"cell_type":{"4f422607":"code","f9455fcd":"code","34ed3d2d":"code","b84566fc":"markdown","12b19818":"markdown","42686508":"markdown","66f387e9":"markdown"},"source":{"4f422607":"from tensorflow.python.keras.applications import ResNet50\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, GlobalAveragePooling2D\n\n# num_classes is the number of categories your model chooses between for each prediction\nnum_classes = 2\nresnet_weights_path = '..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\nmy_new_model = Sequential()\nmy_new_model.add(ResNet50(include_top=False, pooling='avg', weights=resnet_weights_path)) #'avg' pool converts any dimension tensors to 1 dimension tensor\nmy_new_model.add(Dense(num_classes, activation='softmax'))\n\n# The value below is either True or False.  If you choose the wrong answer, your modeling results\n# won't be very good.  The first layer does not need to be trained\/changed.\nmy_new_model.layers[0].trainable = False","f9455fcd":"# We are calling the compile command for some python object (new_my_model). \nmy_new_model.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])","34ed3d2d":"from tensorflow.python.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\n\nimage_size = 224\ndata_generator = ImageDataGenerator(preprocess_input)\n\ntrain_generator = data_generator.flow_from_directory(\n        directory = '..\/input\/dogs-gone-sideways\/images\/train',\n        target_size=(image_size, image_size),\n        batch_size=24,\n        class_mode='categorical')\n\nvalidation_generator = data_generator.flow_from_directory(\n        directory = '..\/input\/dogs-gone-sideways\/images\/val',\n        target_size=(image_size, image_size),\n        class_mode='categorical') #class_model specifies the type of variable the model works on\n\nmy_new_model.fit_generator(\n        train_generator,\n        steps_per_epoch=3, #repeats the calculations of loss and accuracy for the model 3 times\n        validation_data=validation_generator,\n        validation_steps=1)\n#shows the aacuracy and the loss for the training and validation model\n#The first output shows the number of images in training data for sideways category\n#The second output shows the number of images in validation data for sideways category","b84566fc":"# 2) Compile the Model\n\n","12b19818":"\nCan you tell from the results what fraction of the time your model was correct in the validation data? \n\nIn the next step, we'll see if we can improve on that.\n\n# Keep Going\nMove on to learn about [data augmentation](https:\/\/www.kaggle.com\/dansbecker\/data-augmentation\/).  It is a clever and easy way to improve your models. Then you'll apply data augmentation to this automatic image rotation problem.\n","42686508":"# Exercise Introduction\n\nThe cameraman who shot our deep learning videos mentioned a frustrating problem that we could solve with deep learning.  \n\nHe offers a service that scans photographs and slides to store them digitally.  He uses a machine that quickly scans many photos. But depending on the orientation of the original photo, many images are digitized sideways.  He currently spends a lot of time looking find which photos need to be rotated sideways, so he can fix them.\n\nIt would save him a lot of time if this process could be automated.  In this exercise, you will build a model that distinguishes which photos are sideways and which are upright.\n\nIf you were going to sell this service commercially, you might use a large dataset to train the model. But we'll have great success with even a small dataset.  We'll work with a small dataset of dog pictures, half of which are rotated sideways.\n\nSpecifying and compiling the model look the same as in the example you've seen.\n\n# 1) Specify the Model\n\nSince this is your first time, you won't yet be able to create this from scratch. \n\nWe've filled in most of the code you'll need, but left some critical pieces blank.  \n\n","66f387e9":"# 3) Fit Model\n\n**Your training data is in the directory `..\/input\/dogs-gone-sideways\/images\/train`. The validation data is in `..\/input\/dogs-gone-sideways\/images\/val`**. Use that information when setting up `train_generator` and `validation_generator`.\n\nYou have 220 images of training data and 217 of validation data.  For the training generator, choose a batch size of 10. Figure out the appropriate value of `steps_per_epoch` in your `fit_generator` call?   It isn't the same as in the example.\n\n"}}