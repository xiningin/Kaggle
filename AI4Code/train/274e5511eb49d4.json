{"cell_type":{"bc2297a7":"code","899f2649":"code","5e81e597":"code","653166dd":"code","c56c6012":"code","bd56f3b1":"markdown"},"source":{"bc2297a7":"import pandas as pd\nimport numpy as np\nimport sys\nimport gc\nsys.path.append('..\/input\/iterative-stratification\/iterative-stratification-master')\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold","899f2649":"def create_folds(seed_count, fold_count):\n\n    folds = []\n\n    train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\n    train_targets_scored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\n    train_drug = pd.read_csv('\/kaggle\/input\/lish-moa\/train_drug.csv')\n\n\n    # Get rid of \"ctl_vehicle\" from training. \n    # You may comment below lines if you do not want to do it.\n    train_targets_scored = train_targets_scored.loc[train_features['cp_type'] == 'trt_cp', :]\n    train_features = train_features[train_features['cp_type'] == 'trt_cp']\n    \n    train_features_drug = train_features.merge(train_drug, on=\"sig_id\", how='left')\n    \n    # Add drug_id as one of the targets (for stratifying later)\n    targets = train_targets_scored.columns[1:]\n    train_targets_scored = train_targets_scored.merge(train_drug, on='sig_id', how='left') \n\n    # Within in training data, identify indices where drug ids \n    # which are present in more than 18 rows and less than 18 rows \n    vc = train_targets_scored.drug_id.value_counts()\n    vc1 = vc.loc[vc <= 18].index\n    vc2 = vc.loc[vc > 18].index\n\n    # tmp is a dataframe derived from scored targets, where targets are \n    # averaged by drugid (one row per drug id)\n    tmp = train_targets_scored.groupby('drug_id')[targets].mean().loc[vc1]\n    tmp = tmp.reset_index()    \n    tmp = tmp.rename(columns={\"index\":\"drug_id\"})\n    \n    # tmp1 is a dataframe with tagets and drug_id for all drugs that have \n    # repeated more that 18 times in train dataset.\n    # We are stratifying these drugs as among all folds. \n    # Thought here is that such drugs might repeat in public\/private test sets as well\n    tmp1 = train_targets_scored[train_targets_scored['drug_id'].isin(vc2)]\n    tmp1 = tmp1.reset_index(drop=True)\n\n    for seed in range(seed_count):\n\n        skf = MultilabelStratifiedKFold(n_splits = fold_count, shuffle = True, random_state = seed)\n        tmp_copy = tmp.copy()\n        tmp1_copy = tmp1.copy()\n        train_indices = train_features_drug[['sig_id', 'drug_id']].copy()\n        \n        for fold,(idxT,idxV) in enumerate(skf.split(X=tmp_copy,y=tmp_copy[targets])):\n            tmp_copy.loc[idxV,\"kfold\"] = fold\n        train_indices = train_indices.merge(tmp_copy[['drug_id', 'kfold']], on='drug_id', how=\"left\")\n\n        for fold,(idxT,idxV) in enumerate(skf.split(X=tmp1_copy,y=tmp1_copy[targets])):\n            tmp1_copy.loc[idxV,\"kfold\"] = fold        \n        train_indices = train_indices.merge(tmp1_copy[['sig_id', 'kfold']], on='sig_id', how=\"left\")\n\n        train_indices['kfold'] = train_indices['kfold_x'].combine_first(train_indices['kfold_y'])        \n        train_indices.drop(['drug_id', 'kfold_x', 'kfold_y'], inplace=True, axis=1) \n        \n        # Add this to the output\n        folds.append(train_indices)       \n\n    return np.stack(folds)","5e81e597":"# Four seeds, 5 folds\nfolds = create_folds(4, 5)","653166dd":"folds","c56c6012":"# First dimention indicates number of seeds\nfolds.shape","bd56f3b1":"This notebook aims to add drug_id and strtify the training set. Most of the code here is copied from @cdeotte and @gogo827jz available in this [discussion](https:\/\/www.kaggle.com\/c\/lish-moa\/discussion\/195195)"}}