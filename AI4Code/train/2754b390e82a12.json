{"cell_type":{"fafa1182":"code","2daf00e3":"code","8652a120":"code","ea54967e":"code","2c054e22":"code","19884db4":"code","d6bc8855":"code","9d71cb18":"code","7872a4d8":"code","d575958c":"code","02c2325a":"code","1a7dc4fb":"code","954963ce":"code","28ecc856":"code","e1bcf403":"code","58ac8bf0":"code","d49e2749":"code","8f44d523":"code","8518346e":"code","5db5b267":"code","ffa22a13":"code","32190577":"code","43d19302":"code","9964e9f3":"code","c437cd13":"code","6afd7f1f":"code","bf21f37b":"code","05eda1f0":"code","d77a91b3":"code","a17ace55":"code","dde91c62":"code","9a49acaa":"code","bd44f2f7":"code","3169b311":"code","a790f31a":"code","86f1266a":"code","adf5b5f8":"code","f9d70255":"code","9ec76204":"code","0a95fffc":"code","3c051e4e":"code","2fa728d6":"code","c8a32554":"code","22094b43":"code","b91bfd83":"code","00bbeb2c":"code","d6c9b702":"code","8bf99992":"code","90daa5e7":"code","38338111":"code","b5ecd15b":"code","4e5bad51":"code","eba7652d":"markdown","b5a7977e":"markdown","20a16690":"markdown","ade332b6":"markdown","bec10063":"markdown","d0b2340d":"markdown"},"source":{"fafa1182":"!conda install gdcm -c conda-forge -y","2daf00e3":"import os\nimport ast\n\nimport math\n\nimport pandas as pd\nimport numpy as np\n\nfrom tqdm.auto import tqdm\n\nfrom sklearn.model_selection import StratifiedKFold\n\nimport cv2\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n\n\n# read dicom\nimport pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\n\nimport csv","8652a120":"study_df = pd.read_csv(\"\/kaggle\/input\/siim-covid19-detection\/train_study_level.csv\")\nimage_df = pd.read_csv(\"\/kaggle\/input\/siim-covid19-detection\/train_image_level.csv\")","ea54967e":"study_df.head()","2c054e22":"_study_total = len(study_df)\nprint(\"total data length\" , _study_total)\n\n# Stduy data for stratify\n_study_neg_row = study_df.loc[study_df[\"Negative for Pneumonia\"] == 1]\n_study_tp_row = study_df.loc[study_df[\"Typical Appearance\"] == 1]\n_study_nd_row = study_df.loc[study_df[\"Indeterminate Appearance\"] == 1]\n_study_ap_row = study_df.loc[study_df[\"Atypical Appearance\"] == 1]\n\nprint(\"Negative for Pneumonia count\" , len(_study_neg_row))\nprint(\"Typical Appearance count\" , len(_study_tp_row))\nprint(\"Indeterminate Appearance\tcount\" , len(_study_nd_row))\nprint(\"Atypical Appearance count\" , len(_study_ap_row))\n\nprint(\"one hot embedding ?\", len(_study_neg_row) + len(_study_tp_row) + len(_study_nd_row) + len(_study_ap_row) == _study_total)","19884db4":"image_df.head()","d6bc8855":"# Image data for stratify\n_img_nan_row = image_df.loc[image_df[\"label\"] == \"none 1 0 0 1 1\"]\nprint(\"image total count\", len(image_df))\nprint(\"image none row count\", len(_img_nan_row))","9d71cb18":"# \"..\/input\/siim-covid19-detection\/train\/00086460a852\/9e8302230c91\/65761e66de9f.dcm\"\n_one = image_df.loc[image_df[\"StudyInstanceUID\"] == \"a7335b2f9815\"]\n_one","7872a4d8":"!ls ..\/input\/siim-covid19-detection\/train\/a7335b2f9815","d575958c":"# \"..\/input\/siim-covid19-detection\/train\/00086460a852\/9e8302230c91\/65761e66de9f.dcm\"\n_one = image_df.loc[image_df[\"StudyInstanceUID\"] == \"00086460a852\"]\n_one","02c2325a":"study_df.head()","1a7dc4fb":"colnames = {\n    \"Negative for Pneumonia\": 0,\n    \"Typical Appearance\": 1,\n    \"Indeterminate Appearance\": 2,\n    \"Atypical Appearance\": 3\n}","954963ce":"for index, row in study_df.iterrows():    \n    for x in colnames:\n        if row[x] == 1:\n            study_df.loc[index, \"bin\"] = colnames[x]","28ecc856":"study_df.head()","e1bcf403":"for index, row in image_df.iterrows():       \n    image_df.loc[index, \"bin\"] = study_df.loc[study_df[\"id\"] == row[\"StudyInstanceUID\"] + \"_study\"][\"bin\"].item()","58ac8bf0":"image_df.head()","d49e2749":"study_df.loc[study_df[\"id\"] == \"ff0879eb20ed_study\"]","8f44d523":"fold = 0\n\nX = image_df\ny = image_df['bin']\nskf = StratifiedKFold(n_splits=5, random_state=None, shuffle=True)\nskf.get_n_splits(X, y)\nfor train_index, test_index in skf.split(X, y):\n    print(\"TRAIN:\", len(train_index), \"TEST:\", len(test_index))\n    #X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n    #y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n    image_df.loc[test_index, 'fold'] = int(fold)\n    fold +=1 ","8518346e":"image_df","5db5b267":"study_df.loc[study_df[\"id\"] == \"5776db0cec75_study\"]","ffa22a13":"image_df.to_csv(\".\/updated_iamge_level.csv\")","32190577":"# hengk's duplicate list, we shall verify it \nduplicateList = [\n'87adda1908f9','35e398a5a431','1b92142f4362','ef6e312ca719','866e3622cb24','3577ee4f26c4','d74ef8961bff','6f54e9cbd180','b97c6b32105e','8093df07a5d0','efc93a3917b6','b3ffe59e37c7','9939f63af4ff','00c1515729a8','267a250932bc','3e7b2ffc97db','b121806162c3','2f973757eaa4','a39667fe9a81','a5bbd30ed109','07c6b234a94b','089bd77c8c10','0575769456b9','149356f04849','ace7a9702770','0acec7010081','611348a721f7','deea6d6f81a5','b0866caa201a','ab55abb953d1','7626c521cad7','bee62c601ae9','582c442e440b','869476b0763a','9b1de1c45491','32222cc776a2','66dabc6f972d','1dc7459cb081','a2ee4b862182','3b6ad60071d4','39d52f244db3','ce51b397b1a6','2a7a456d367e','a94171e98807','21518ca15050','e96133d06736','ea2688741043','7b7275d670e7','59bc532be971','684230477525','8d4b3609ed92','608d574388ba','76c66ee8e58d','6ff218d10741','7966f780f27f','7f1924880cf8','0102b5cac730','99f3642f50f5','6e9fad584bff','830063223a31','72cf260ddf4c','156cb1f5c689','6d36ffbc7864','9fcbe25a88e0','6534a837497d','04cc2f7f4c4b','30b18db28900','1c1069c57757','f208dc529d16','df2bb22fa871','05c063f5cef5','eea3a910fa9e','2c130ee08736','c6e92e59a0ae','1ea01196514a','4c414b793562','00e3a7e91a34','6e5946091b8a','c3a09e8a600d','9872a8a48f23','12e97ed89297','66712e2fc6a4','c843d08b49b8','df4f1240317e','a5a364383f34','0dd32589bdc3','93a881fb3292','550f057ee0b0','ea2117b53323','6728e11290af','be65d1a22de5','08acae0bf785','0d4d6acc9ed3','779f0040d1b2','caa7fd25ee9d','e73f2cc047ad','75b52bec817f','ddb051c1233b','9108cdfd43dc','a57bf6dd6119','c4b68b29a072','717ea5155b46','49664f078f0e','e738c549fe8e','4cbc17936e7d','e3e2f20e0264','b5a415f70aa9'\n]","43d19302":"len(duplicateList)","9964e9f3":"duplicate_df_path = '..\/input\/siim-covid-19-duplicate-training-images\/duplicates.csv'","c437cd13":"_result = []\nwith open(duplicate_df_path, newline='') as csvfile:\n    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')\n    for row in spamreader:\n        rows = row[0].split(',')\n        _count = 0\n        _cand = []\n        for item in rows:\n            _org = image_df.loc[image_df['id'] == item]\n            if str(_org['boxes'].item()) != 'nan':\n                _count +=1\n            else:\n                _cand.append(item)\n        if _count == 0:\n            _result += _cand[1:]\n        if _count > 0: \n            _result += _cand\n        if _count > 1:\n            print(row)","6afd7f1f":"_result = [x.replace('_image','') for x in _result]\n#_result\nlen(_result)","bf21f37b":"# duplicate wrong anotation\n_result.append('7b7275d670e7')","05eda1f0":"count = 0\nfor x in _result:\n    if x in duplicateList:\n        count += 1\nprint(count)","d77a91b3":"with open('dublicate.txt', 'w') as text_file:    \n    # using csv.writer method from CSV package\n    text_file.write('\\n'.join(_result))","a17ace55":"_SIZE_ = 512 \n_Type_ = \"png\"","dde91c62":"def read_xray(path, voi_lut = True, fix_monochrome = True):\n    # Original from: https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way\n    dicom = pydicom.read_file(path)\n    \n    # VOI LUT (if available by DICOM device) is used to transform raw DICOM data to \n    # \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n               \n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n        \n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n        \n    return data","9a49acaa":"def resize(array, size, keep_ratio=False, resample=Image.LANCZOS):\n    # Original from: https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-process-and-resize-to-image\n    im = Image.fromarray(array)\n    \n    if keep_ratio:\n        im.thumbnail((size, size), resample)\n    else:\n        im = im.resize((size, size), resample)\n    \n    return im","bd44f2f7":"path = '..\/input\/siim-covid19-detection\/train\/ae3e63d94c13\/288554eb6182\/e00f9fe0cce5.dcm'\ndicom = pydicom.read_file(path)","3169b311":"dicom","a790f31a":"example = read_xray(path)","86f1266a":"plt.imshow(example, cmap=\"bone\")","adf5b5f8":"example","f9d70255":"image_df","9ec76204":"!ls ..\/input\/siim-covid19-detection\/train\/e28208b7c58e\/4b7cd369719c","0a95fffc":"path2 = '..\/input\/siim-covid19-detection\/train\/e28208b7c58e\/4b7cd369719c\/0a0bb7af0cab.dcm'\ndicom2 = pydicom.read_file(path)","3c051e4e":"example2_meta = image_df.loc[image_df['id'] == \"0a0bb7af0cab_image\"]\nexample2_meta","2fa728d6":"image_df","c8a32554":"bbox = example2_meta['boxes'].item()\nbbox","22094b43":"example2 = read_xray(path2)","b91bfd83":"example2.shape","00bbeb2c":"for box in ast.literal_eval(bbox):\n    x1, y1, x2, y2 = box[\"x\"], box[\"y\"], box[\"x\"] + box[\"width\"], box[\"y\"] + box[\"height\"]\n    x1 = int(x1) \n    y1 = int(y1) \n    x2 = int(x2)  \n    y2 = int(y2) \n    cv2.rectangle(example2, (x1, y1), (x2, y2), (0, 80, 255), 15)","d6c9b702":"plt.imshow(example2, cmap=\"bone\")","8bf99992":"blankimg = np.zeros((example2.shape[0],example2.shape[1],3), dtype=np.uint8)\nfor box in ast.literal_eval(bbox):\n    x1, y1, x2, y2 = box[\"x\"], box[\"y\"], box[\"x\"] + box[\"width\"], box[\"y\"] + box[\"height\"]\n    x1 = int(x1) \n    y1 = int(y1) \n    x2 = int(x2)  \n    y2 = int(y2) \n    cv2.rectangle(blankimg, (x1, y1), (x2, y2), (255, 255, 255), -1)","90daa5e7":"plt.imshow(blankimg, cmap=\"bone\")","38338111":"image_id = []\ndim0 = []\ndim1 = []\nsplits = []\nstudy = []\n\nmaskdir = \"\/kaggle\/tmp\/mask\/\"\nos.makedirs(maskdir, exist_ok=True)\n    \n#for split in ['test', 'train']:\nfor split in ['train', 'test']:\n    save_dir = f'\/kaggle\/tmp\/{split}\/'\n    \n    os.makedirs(save_dir, exist_ok=True)\n    \n    for study_id in os.listdir(f'..\/input\/siim-covid19-detection\/{split}'):\n        for dirname, _, filenames in os.walk(f'..\/input\/siim-covid19-detection\/{split}\/{study_id}'):\n            for file in filenames:\n                # set keep_ratio=True to have original aspect ratio\n                xray = read_xray(os.path.join(dirname, file))\n\n                im = resize(xray, size=_SIZE_)\n                _name = file.replace('dcm', _Type_)\n                im.save(os.path.join(save_dir, _name))\n\n                _img_id = file.replace('.dcm', '')\n                image_id.append(_img_id)\n\n                _w = xray.shape[0]\n                _h = xray.shape[1]\n                dim0.append(_w)\n                dim1.append(_h)\n                splits.append(split)\n                study.append(study_id)\n\n                if split != 'test':\n                    _mate = image_df.loc[image_df['id'] == _img_id + \"_image\"]\n                    _bbox = _mate['boxes'].item()\n                    if str(_bbox) != \"nan\":\n                        blankimg = np.zeros((_w, _h,3), dtype=np.uint8)\n\n                        for box in ast.literal_eval(_bbox):\n                            x1, y1, x2, y2 = box[\"x\"], box[\"y\"], box[\"x\"] + box[\"width\"], box[\"y\"] + box[\"height\"]\n                            x1 = int(x1) \n                            y1 = int(y1) \n                            x2 = int(x2)  \n                            y2 = int(y2) \n                            cv2.rectangle(blankimg, (x1, y1), (x2, y2), (255, 255, 255), -1)\n\n                        blankimg = resize(blankimg, size=_SIZE_)\n                        blankimg.save(os.path.join(maskdir, _name))","b5ecd15b":"%%time\n!tar -zcf train.tar.gz -C \"\/kaggle\/tmp\/train\/\" .\n!tar -zcf test.tar.gz -C \"\/kaggle\/tmp\/test\/\" .\n!tar -zcf mask.tar.gz -C \"\/kaggle\/tmp\/mask\/\" .","4e5bad51":"meta_df = pd.DataFrame.from_dict({'image_id': image_id, 'dim0': dim0, 'dim1': dim1, 'split': splits, 'study': study})\nmeta_df.to_csv('meta.csv', index=False)","eba7652d":"# Problem explain\n\n\n- NEGATIVE FOR PNEUMONIA\n\n    No lung opacities\n\n- TYPICAL APPEARANCE\n\n    Multifocal bilateral, peripheral opacities with rounded morphology, lower lung\u2013predominant distribution\n\n- INDETERMINATE APPEARANCE\n\n    Absence of typical findings AND unilateral, central or upper lung predominant distribution\n\n- ATYPICAL APPEARANCE\n\n    Pneumothorax, pleural effusion, pulmonary edema, lobar consolidation, solitary lung nodule or mass, diffuse tiny nodules, cavity\n    \n  \n#  Suspect\n\n1. Maybe \"INDETERMINATE APPEARANCE\" very simillar to \"ATYPICAL APPEARANCE\" or \"NEGATIVE FOR PNEUMONIA\"\n2. some images has no bouding box but has human label non-neg\n3. how to Deal with duplicate label \uff1f\uff1f\uff1fhttps:\/\/www.kaggle.com\/c\/siim-covid19-detection\/discussion\/246597","b5a7977e":"# Create mask","20a16690":"# Find duplicate ","ade332b6":"# Create PNG files","bec10063":"# SIIIM-COVID Stratified sampling\n\n1. Split training data into Stratified 5 folds by human label (4) and OPACITIES PER IMAGE\/PATIENT (1 2 3 4 5 8)\n2. Resize , scale and nomalize dcm files\n3. create mask\n4. find duplicate \n\n# Reffernces \n1. EDA https:\/\/www.kaggle.com\/dschettler8845\/visual-in-depth-eda-siim-covid19-detection\n2. incorrect anotation ? https:\/\/www.kaggle.com\/dschettler8845\/covid-detection-studies-with-multiple-images-viz\n3. duplication count https:\/\/www.kaggle.com\/kwk100\/siim-covid-19-duplicate-training-images?select=pairs.csv\n4. convert 2 png https:\/\/www.kaggle.com\/xhlulu\/siim-covid-19-convert-to-jpg-256px\/notebook?scriptVersionId=63196459&select=meta.csv","d0b2340d":"# Create Fold"}}