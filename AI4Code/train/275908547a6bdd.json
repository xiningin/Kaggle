{"cell_type":{"5845c0a1":"code","1f6a3af0":"code","5ee3d5d2":"code","95cba0d0":"code","8b421b1d":"code","7fce811e":"code","9d71d95f":"code","36f3ecb7":"code","41ff6cb5":"code","d3c7d33d":"code","9a6b0e06":"code","29244ad6":"code","d23b60eb":"code","4017a2eb":"code","68262817":"code","e2067e9d":"code","f4e8f98a":"code","d1d390dc":"code","011cfb60":"code","e0eab173":"code","cfab373a":"code","fa57a963":"code","99bab6ae":"code","86792616":"code","5e3edd08":"code","bd45292b":"code","b8718dea":"code","9068d847":"code","ead9fe60":"code","dbd9e0e1":"code","8dba96a1":"code","5e688eff":"code","762c92cb":"code","3c4822bf":"code","4954ac00":"code","2bcb18af":"code","38627505":"code","f738bccf":"code","875024fe":"code","5e79295f":"code","e0befd72":"code","caa01db8":"code","0e1f6149":"code","737e29b0":"code","25825ed9":"code","5be32fab":"code","87db6173":"code","ded95bc8":"code","4987cfa5":"code","de81ff7f":"code","e2509af3":"code","fe012b3a":"code","954c5296":"code","6778d86c":"code","1b48c074":"code","213f15a2":"code","43d9e231":"code","d605ff15":"code","5b4a7269":"code","c9b1ced2":"code","208c62e5":"code","9268bffe":"code","d0416e4a":"code","990ef88e":"code","103cf002":"code","a0842459":"code","e50e04b1":"code","a41d91fe":"code","8cb8615b":"code","9f51d268":"code","93786605":"code","4102b3ce":"code","9cea6a4a":"code","856e0282":"code","380e6bf2":"code","1a7ac067":"code","c7c37857":"code","f46879c8":"code","70575a28":"code","fdf786ff":"code","3e087741":"code","257f27de":"code","f81401bf":"code","e6da73f1":"code","b08989e3":"code","8315fa89":"code","76689ee3":"code","d901beac":"code","78e056aa":"code","9ba50d8d":"code","5c4b22d2":"code","726512cf":"code","5d3a2ee8":"code","6b371b3f":"code","9619eaba":"code","2f29205b":"code","68628b0e":"code","d840e60c":"code","01b8b717":"code","0413a862":"code","96975c66":"code","d99e0612":"code","766625fc":"code","cf764ebf":"code","1144b959":"code","8885486b":"code","792ee902":"code","be73bb02":"code","d6044eda":"code","aa1d652c":"code","5cf318dd":"code","5fa5871e":"code","e20fd3f8":"code","7a5045a5":"code","b477b931":"code","8a7e259e":"code","127772d0":"code","7af5a441":"code","4fd48225":"code","399b7fdb":"code","4522ae60":"code","012ff05f":"code","b7241306":"code","5da74b89":"code","941c20e3":"code","44fec406":"code","bd1f3fdd":"code","f914ae5a":"code","6dc6e0c2":"code","66a5395f":"code","f5235d13":"code","bb945a27":"code","74279f0d":"code","ea84fd72":"code","1d86d5c5":"code","3436da73":"code","d59a76f0":"code","1f1030dd":"code","55333391":"code","e261df46":"code","e900e806":"code","8129a227":"code","01fd27a7":"code","1042248a":"code","e65cc987":"code","230c6a98":"code","b2336f5c":"code","66edea32":"code","2e859d11":"code","6b5fb5f0":"code","10a823a1":"code","45d52119":"code","f9275b8c":"code","748445d3":"code","11859938":"code","18c18eca":"code","b430de67":"code","e9fa3ccb":"code","a487982c":"code","89ca4857":"code","7e5f45d6":"code","eeff934b":"code","6716fa18":"code","76c5775a":"code","3577a9c4":"code","1d92a40e":"code","dabf89c9":"code","d5d2cee3":"code","27692e11":"code","c9c55620":"code","19e702ab":"code","da42114d":"code","d0a98a8e":"code","31c7d993":"code","7d2efd2a":"code","61cffc2f":"code","97357ac0":"code","00c9adeb":"code","d350412e":"code","b646da38":"code","67930cff":"code","af058751":"code","4b0c50e1":"code","149ebe5c":"code","76faea97":"code","80801412":"code","22ebc5ff":"code","cec5e049":"code","dcbdf17b":"code","e7ea4af4":"code","01c2e8a3":"code","04e7f26b":"code","a7984d92":"code","43698c5b":"code","8bd8373a":"code","94b13c9f":"code","756e1dbc":"code","d0a0162d":"code","1af1c723":"code","022f3f0f":"code","35d3fa16":"code","fd2e645c":"code","8a379173":"code","714d6765":"code","66e285a4":"code","d1233734":"code","44cdaea1":"code","7f4a97aa":"code","d3b930e6":"code","ad76595d":"code","310bf9f0":"code","48b21ce7":"code","7145512b":"code","75c14551":"code","33562741":"code","5f8ef14d":"code","00a1a94e":"code","51f117a4":"code","c40813ea":"code","0c573aae":"code","f4c17fc5":"code","d79f78c3":"code","ede4e974":"code","acfb40ec":"code","57ecc2ac":"code","2d63a7d7":"code","c235e0cb":"code","42af26b0":"code","daaa84be":"code","4c6fb202":"code","e73a648d":"code","69d6821c":"code","ecce2b3d":"code","6bbfb5c5":"code","863143b5":"code","77c89856":"code","ef564dbb":"code","0466b7d7":"code","4e236fcd":"code","2f850e84":"code","f65fe019":"code","8ef9a21f":"code","5895c436":"code","fc7919ba":"code","d7af4306":"code","5bf89a42":"code","1b3e1a08":"code","9c6d81fd":"code","4e2663f8":"code","7d55775a":"code","493a489b":"code","96873ef7":"code","64d3d054":"code","be9a22c9":"code","66370584":"code","02210951":"code","30e87b5c":"code","0cb89911":"code","5785070f":"code","55d66c5f":"code","3cb70f0c":"code","213d5188":"code","c4169406":"code","997b89e8":"code","72c4b8f0":"code","635c233c":"code","0564ec68":"code","138e1389":"code","9b7e36dd":"code","a3c31f23":"code","e0b2c0ce":"code","9275f658":"code","e7858e75":"code","5672e7b4":"code","ef1dfc1f":"code","d91a63bb":"code","f53c33b4":"code","bd967cd7":"code","468c2685":"code","fcebc354":"code","d8967702":"code","690dde76":"code","fd4d79d9":"code","e1e9b53e":"code","6d685915":"code","4d9d4647":"code","e53c867a":"code","20d87a0f":"markdown","9b86d410":"markdown","54c4a6ac":"markdown","6f380ba7":"markdown","545ee09e":"markdown","f3bf55c9":"markdown","3aff5b87":"markdown","1715dd7c":"markdown","fd14789d":"markdown","26ac3ca9":"markdown","75f421dc":"markdown","65d9937d":"markdown","fa4793ef":"markdown","dd120fbe":"markdown","2b037525":"markdown","f06e0249":"markdown","508ec16f":"markdown","ca4d1460":"markdown","d4e149c4":"markdown","7d389ef6":"markdown","fe933715":"markdown","ffde6ac0":"markdown","c0400cf9":"markdown","17c864cf":"markdown","9e37a804":"markdown","85a6c4dc":"markdown","aa33fd91":"markdown","1a1b1d4a":"markdown","3a671767":"markdown","1382624d":"markdown","331c29f8":"markdown","d7c8aee0":"markdown","d120ceac":"markdown","22bb7b9a":"markdown","f92d6fc8":"markdown","ae14f432":"markdown","852647dd":"markdown","301f7951":"markdown","f880cc43":"markdown","7b313ff1":"markdown","d40fb862":"markdown","a8201cbd":"markdown","a2a258cc":"markdown","06d48050":"markdown","76dc6260":"markdown","84b2f7e3":"markdown","56a78b6c":"markdown","e43c93ff":"markdown","f865c443":"markdown","38a50e86":"markdown","0ea94e2a":"markdown","aa7648a1":"markdown","072eae23":"markdown","97c6a412":"markdown","b288ae39":"markdown","9da63029":"markdown","70e78d77":"markdown","f3bbc00a":"markdown","c2fa8ff1":"markdown","6f49eee6":"markdown","72f1f47f":"markdown","996cce12":"markdown","29eb7f0c":"markdown","30e5f4aa":"markdown","3e4f4730":"markdown","79e85dd8":"markdown","26f9df60":"markdown","779984e2":"markdown","53b96156":"markdown","890bdf50":"markdown","e67e1910":"markdown","ac23614a":"markdown","d6664032":"markdown","c2ad63ba":"markdown","3a7ed160":"markdown","d6f901bf":"markdown","e2854c9d":"markdown","3b42e863":"markdown","281ab32b":"markdown","4479ef7d":"markdown","45d7f8ed":"markdown","0b16615a":"markdown","2b323e55":"markdown","1ff6fb4d":"markdown","c9545c2e":"markdown","446af82c":"markdown","ddcfaec3":"markdown","0964d4ad":"markdown","58914beb":"markdown","f996bbe8":"markdown","e35b314a":"markdown","f4784f2d":"markdown","e59f169b":"markdown","392ee23a":"markdown","153b41ac":"markdown","f982bbe8":"markdown","8dbec664":"markdown","54031a11":"markdown","eedd72b2":"markdown","7387e984":"markdown","27fea768":"markdown","1b07c04e":"markdown","04561354":"markdown","0c1c6c6a":"markdown","dcb528aa":"markdown","5c9c1728":"markdown","c8ff3bd9":"markdown","3fcf2086":"markdown","a1fc2b2c":"markdown","65c1846b":"markdown","fb061136":"markdown","cd127f2d":"markdown","719f0aaa":"markdown","2c9ceff9":"markdown","4a1777fb":"markdown","d753f747":"markdown","3d73e2a8":"markdown","d357e9db":"markdown","457b9854":"markdown","3885ac05":"markdown","774ba73a":"markdown","cdd07cf3":"markdown","fd1fbb73":"markdown","73ae6827":"markdown","31989e2d":"markdown","2f3d17b0":"markdown","d83035d5":"markdown","132b8880":"markdown","463c0da9":"markdown","52c54816":"markdown","0c5f2255":"markdown","29ba65f7":"markdown","ac3c1411":"markdown","275caf02":"markdown","417736ff":"markdown","3eaaa311":"markdown","6a6186f4":"markdown","6192d083":"markdown","5ca62a20":"markdown","51d3ab8a":"markdown","bd608483":"markdown","4416c32d":"markdown","0397ab8a":"markdown","f493f63a":"markdown","38351d6f":"markdown","552bd5e0":"markdown","7c8de5da":"markdown","4703bfef":"markdown","7f204d01":"markdown","bd3c948a":"markdown","e6e38e89":"markdown","6da27b01":"markdown","96a13422":"markdown","ed5e7323":"markdown","e8bd8765":"markdown","1bbb14f9":"markdown","188ea97f":"markdown","fa6b1f7f":"markdown","482e133f":"markdown","c581f17b":"markdown","b6d97650":"markdown","f7aaec2c":"markdown","35f5ffd7":"markdown","ea7a4dc3":"markdown","e01209cf":"markdown","58640151":"markdown","33a2314c":"markdown","2b051d36":"markdown","11237f32":"markdown","06f84686":"markdown","f65ad313":"markdown","7d169bfe":"markdown"},"source":{"5845c0a1":"import os\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport random\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.graph_objs as go\nimport plotly.offline as pyo\nimport plotly.figure_factory as ff\nfrom plotnine import *\nimport plotly.express as px\nfrom plotly import tools\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import iplot","1f6a3af0":"df1 = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv')\ndf1","5ee3d5d2":"df = df1.iloc[1:,:]\ndf","95cba0d0":"print('Number of responses given to survey\/rows in dataframe:', df.shape[0])\nprint('Number of columns of dataframe',df.shape[1])","8b421b1d":"df.columns.values","7fce811e":"from IPython.core.display import HTML\n\ndef multi_table(table_list):\n    ''' Acceps a list of IpyTable objects and returns a table which contains each IpyTable in a cell\n    '''\n    return HTML(\n        '<table><tr style=\"background-color:white;\">' + \n        ''.join(['<td>' + table._repr_html_() + '<\/td>' for table in table_list]) +\n        '<\/tr><\/table>')","9d71d95f":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q1'}}\nmulti_table([ df_nunique['Q1']])","36f3ecb7":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['Q1'].value_counts().index\ny=df['Q1'].value_counts().values.tolist()\ndata = df.groupby(\"Q1\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('Age Group', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['Q1'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('Age of People',weight = 'bold')\nplt.show()","41ff6cb5":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q2'}}\nmulti_table([ df_nunique['Q2']])","d3c7d33d":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['Q2'].value_counts().index\ny=df['Q2'].value_counts().values.tolist()\ndata = df.groupby(\"Q2\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"Accent\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('Gender Group', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['Q2'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('Gender of People',weight = 'bold')\nplt.show()","9a6b0e06":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q3'}}\nmulti_table([ df_nunique['Q3']])","29244ad6":"data = [go.Bar(x=df['Q3'].value_counts().keys(),\n               y=df['Q3'].value_counts(),\n               text =round(df['Q3'].value_counts(),2),\n              textposition= 'outside',\n              width=[0.7, 0.7],\n              marker = dict(color = 'deeppink',\n                            line_color = 'black',\n                            line_width=3))]\n\nlayout = go.Layout(title='Country',\n                   xaxis = dict(title='Countries Name'),\n                   width=800,\n                   height=600,\n                   template = 'plotly_white')\n\nfig=go.Figure(data=data, layout=layout)\nfig.update_yaxes(range=[0,8000])\niplot(fig)","d23b60eb":"import plotly.offline as py\npy.offline.init_notebook_mode()\n\ndef plot_in_map(locations,counts,title):\n    data = [ dict(\n            type = 'choropleth',\n            locations = locations,\n            z = counts,\n            locationmode = 'country names',\n            autocolorscale = True,\n            marker = dict(\n                line = dict(color = 'rgb(58,100,69)', width = 0.6)),\n                colorbar = dict(autotick = True, tickprefix = '', title = '# of Kagglers')\n                )\n           ]\n    layout = dict(\n        title = title,\n        geo = dict(\n            showframe = True,\n            showcoastlines = True,\n            projection = dict(\n            type = 'equirectangular'\n            ),\n        margin = dict(b = 0, t = 0, l = 0, r = 0)\n                ),\n        )\n\n    fig = dict(data=data, layout=layout)\n    \n    py.iplot(fig, validate=False, filename='world-map')\nz = df['Q3'].value_counts()\nplot_in_map(locations=z.index,\n            counts=z.values,\n            title='Participants by Country')","4017a2eb":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q4'}}\nmulti_table([ df_nunique['Q4']])","68262817":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['Q4'].value_counts().index\ny=df['Q4'].value_counts().values.tolist()\ndata = df.groupby(\"Q4\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('Degree Name', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['Q4'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('Degree of People',weight = 'bold')\nax[0].tick_params(labelrotation=90)\nplt.show()","e2067e9d":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q5'}}\nmulti_table([ df_nunique['Q5']])","f4e8f98a":"fig = plt.figure(figsize=(10, 6))\nx=df['Q5'].value_counts().index\ny=df['Q5'].value_counts().values.tolist()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(x))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Profession of people',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","d1d390dc":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q6'}}\nmulti_table([ df_nunique['Q6']])","011cfb60":"fig, ax = plt.subplots(2, 1, figsize=(15,25))\nx=df['Q6'].value_counts().index\ny=df['Q6'].value_counts().values.tolist()\ndata = df.groupby(\"Q6\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('Years', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['Q6'].value_counts().index])\nplt.legend(bbox_to_anchor=(1.7, 1))\nplt.suptitle ('Coding Experience of People',weight = 'bold')\nax[0].tick_params(labelrotation=90)\nplt.show()","e0eab173":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q7_Part_1', 'Q7_Part_2', 'Q7_Part_3','Q7_Part_4',\n       'Q7_Part_5', 'Q7_Part_6', 'Q7_Part_7', 'Q7_Part_8', 'Q7_Part_9',\n       'Q7_Part_10', 'Q7_Part_11', 'Q7_Part_12', 'Q7_OTHER'}}\nmulti_table([df_nunique['Q7_Part_1'],df_nunique['Q7_Part_2'],\n             df_nunique['Q7_Part_3'],df_nunique['Q7_Part_4'],df_nunique['Q7_Part_5']\n            ,df_nunique['Q7_Part_6'],df_nunique['Q7_Part_7'],df_nunique['Q7_Part_8']\n            ,df_nunique['Q7_Part_9'],df_nunique['Q7_Part_10'],df_nunique['Q7_Part_11'],df_nunique['Q7_Part_12'],\n            df_nunique['Q7_OTHER']])","cfab373a":"col = ['Q7_Part_1', 'Q7_Part_2', 'Q7_Part_3','Q7_Part_4',\n                       'Q7_Part_5', 'Q7_Part_6', 'Q7_Part_7', 'Q7_Part_8', 'Q7_Part_9',\n                       'Q7_Part_10', 'Q7_Part_11', 'Q7_Part_12', 'Q7_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","fa57a963":"fig, ax = plt.subplots(2, 1, figsize=(15,25))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nsns.barplot(x=x,y=y,palette=pal,ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('Programming Language', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in a])\nplt.legend(bbox_to_anchor=(1.7, 1))\nplt.suptitle ('Programming Language Used on Regular basis',weight = 'bold')\nax[0].tick_params(labelrotation=90)\nplt.show()","99bab6ae":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q8'}}\nmulti_table([ df_nunique['Q8']])","86792616":"fig = plt.figure(figsize=(10, 6))\nx=df['Q8'].value_counts().index\ny=df['Q8'].value_counts().values.tolist()\ndata = df.groupby(\"Q8\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nax = sns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank])\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax.set_xlabel('Programming Language', weight='semibold', fontname = 'monospace')\nplt.suptitle ('Mostly Recommended Lnguage for Aspiring Data Scientist',weight = 'bold')\nplt.xticks(rotation=90)\nplt.show()","5e3edd08":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q9_Part_1', 'Q9_Part_2', 'Q9_Part_3', 'Q9_Part_4', 'Q9_Part_5',\n       'Q9_Part_6', 'Q9_Part_7', 'Q9_Part_8', 'Q9_Part_9', 'Q9_Part_10',\n       'Q9_Part_11', 'Q9_Part_12', 'Q9_OTHER'}}\nmulti_table([df_nunique['Q9_Part_1'],df_nunique['Q9_Part_2'],\n             df_nunique['Q9_Part_3'],df_nunique['Q9_Part_4'],df_nunique['Q9_Part_5']\n            ,df_nunique['Q9_Part_6'],df_nunique['Q9_Part_7'],df_nunique['Q9_Part_8']\n            ,df_nunique['Q9_Part_9'],df_nunique['Q9_Part_10'],df_nunique['Q9_Part_11'],df_nunique['Q9_Part_12'],\n            df_nunique['Q9_OTHER']])","bd45292b":"col = ['Q9_Part_1', 'Q9_Part_2', 'Q9_Part_3', 'Q9_Part_4', 'Q9_Part_5',\n       'Q9_Part_6', 'Q9_Part_7', 'Q9_Part_8', 'Q9_Part_9', 'Q9_Part_10',\n       'Q9_Part_11', 'Q9_Part_12', 'Q9_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","b8718dea":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('IDEs Used on Regular Basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","9068d847":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q10_Part_1', 'Q10_Part_2',\n       'Q10_Part_3', 'Q10_Part_4', 'Q10_Part_5', 'Q10_Part_6',\n       'Q10_Part_7', 'Q10_Part_8', 'Q10_Part_9', 'Q10_Part_10',\n       'Q10_Part_11', 'Q10_Part_12', 'Q10_Part_13', 'Q10_Part_14',\n       'Q10_Part_15', 'Q10_Part_16', 'Q10_OTHER'}}\nmulti_table([df_nunique['Q10_Part_1'],df_nunique['Q10_Part_2'],\n             df_nunique['Q10_Part_3'],df_nunique['Q10_Part_4'],df_nunique['Q10_Part_5']\n            ,df_nunique['Q10_Part_6'],df_nunique['Q10_Part_7'],df_nunique['Q10_Part_8']\n            ,df_nunique['Q10_Part_9'],df_nunique['Q10_Part_10'],df_nunique['Q10_Part_11'],df_nunique['Q10_Part_12'],\n            df_nunique['Q10_Part_13'],df_nunique['Q10_Part_14'],df_nunique['Q10_Part_15'],df_nunique['Q10_Part_16'],\n            df_nunique['Q10_OTHER']])","ead9fe60":"col = ['Q10_Part_1', 'Q10_Part_2',\n       'Q10_Part_3', 'Q10_Part_4', 'Q10_Part_5', 'Q10_Part_6',\n       'Q10_Part_7', 'Q10_Part_8', 'Q10_Part_9', 'Q10_Part_10',\n       'Q10_Part_11', 'Q10_Part_12', 'Q10_Part_13', 'Q10_Part_14',\n       'Q10_Part_15', 'Q10_Part_16', 'Q10_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","dbd9e0e1":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Notebooks Used on Regular Basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","8dba96a1":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q11'}}\nmulti_table([ df_nunique['Q11']])","5e688eff":"fig = plt.figure(figsize=(10, 6))\nx=df['Q11'].value_counts().index\ny=df['Q11'].value_counts().values.tolist()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(x))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Most Used Computing Platform',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","762c92cb":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q12_Part_1',\n       'Q12_Part_2', 'Q12_Part_3', 'Q12_Part_4', 'Q12_Part_5',\n       'Q12_OTHER'}}\nmulti_table([df_nunique['Q12_Part_1'],df_nunique['Q12_Part_2'],\n             df_nunique['Q12_Part_3'],df_nunique['Q12_Part_4'],df_nunique['Q12_Part_5'],\n            df_nunique['Q12_OTHER']])","3c4822bf":"col = ['Q12_Part_1',\n       'Q12_Part_2', 'Q12_Part_3', 'Q12_Part_4', 'Q12_Part_5',\n       'Q12_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","4954ac00":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Specialized Software Used on Regular Basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","2bcb18af":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q13'}}\nmulti_table([ df_nunique['Q13']])","38627505":"fig = plt.figure(figsize=(10, 6))\nx=df['Q13'].value_counts().index\ny=df['Q13'].value_counts().values.tolist()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(x))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('TPU Usage',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","f738bccf":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q14_Part_1', 'Q14_Part_2', 'Q14_Part_3',\n       'Q14_Part_4', 'Q14_Part_5', 'Q14_Part_6', 'Q14_Part_7',\n       'Q14_Part_8', 'Q14_Part_9', 'Q14_Part_10', 'Q14_Part_11',\n       'Q14_OTHER'}}\nmulti_table([df_nunique['Q14_Part_1'],df_nunique['Q14_Part_2'],\n             df_nunique['Q14_Part_3'],df_nunique['Q14_Part_4'],df_nunique['Q14_Part_5']\n            ,df_nunique['Q14_Part_6'],df_nunique['Q14_Part_7'],df_nunique['Q14_Part_8']\n            ,df_nunique['Q14_Part_9'],df_nunique['Q14_Part_10'],df_nunique['Q14_Part_11'],\n            df_nunique['Q14_OTHER']])","875024fe":"col = ['Q14_Part_1', 'Q14_Part_2', 'Q14_Part_3',\n       'Q14_Part_4', 'Q14_Part_5', 'Q14_Part_6', 'Q14_Part_7',\n       'Q14_Part_8', 'Q14_Part_9', 'Q14_Part_10', 'Q14_Part_11',\n       'Q14_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","5e79295f":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Data Visualization Libraries Used on Regular Basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","e0befd72":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q15'}}\nmulti_table([ df_nunique['Q15']])","caa01db8":"fig = plt.figure(figsize=(10, 6))\nx=df['Q15'].value_counts().index\ny=df['Q15'].value_counts().values.tolist()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(x))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Machine Learning Methods usage',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","0e1f6149":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q16_Part_1', 'Q16_Part_2', 'Q16_Part_3',\n       'Q16_Part_4', 'Q16_Part_5', 'Q16_Part_6', 'Q16_Part_7',\n       'Q16_Part_8', 'Q16_Part_9', 'Q16_Part_10', 'Q16_Part_11',\n       'Q16_Part_12', 'Q16_Part_13', 'Q16_Part_14', 'Q16_Part_15',\n       'Q16_Part_16', 'Q16_Part_17', 'Q16_OTHER'}}\nmulti_table([df_nunique['Q16_Part_1'],df_nunique['Q16_Part_2'],\n             df_nunique['Q16_Part_3'],df_nunique['Q16_Part_4'],df_nunique['Q16_Part_5']\n            ,df_nunique['Q16_Part_6'],df_nunique['Q16_Part_7'],df_nunique['Q16_Part_8']\n            ,df_nunique['Q16_Part_9'],df_nunique['Q16_Part_10'],df_nunique['Q16_Part_11'],df_nunique['Q16_Part_12'],\n            df_nunique['Q16_Part_13'],df_nunique['Q16_Part_14'],df_nunique['Q16_Part_15'],df_nunique['Q16_Part_16'],\n             df_nunique['Q16_Part_17'],df_nunique['Q16_OTHER']])","737e29b0":"col = ['Q16_Part_1', 'Q16_Part_2', 'Q16_Part_3',\n       'Q16_Part_4', 'Q16_Part_5', 'Q16_Part_6', 'Q16_Part_7',\n       'Q16_Part_8', 'Q16_Part_9', 'Q16_Part_10', 'Q16_Part_11',\n       'Q16_Part_12', 'Q16_Part_13', 'Q16_Part_14', 'Q16_Part_15',\n       'Q16_Part_16', 'Q16_Part_17', 'Q16_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","25825ed9":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Machine Learning Frameworks used on regular basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","5be32fab":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q17_Part_1',\n       'Q17_Part_2', 'Q17_Part_3', 'Q17_Part_4', 'Q17_Part_5',\n       'Q17_Part_6', 'Q17_Part_7', 'Q17_Part_8', 'Q17_Part_9',\n       'Q17_Part_10', 'Q17_Part_11', 'Q17_OTHER'}}\nmulti_table([df_nunique['Q17_Part_1'],df_nunique['Q17_Part_2'],\n             df_nunique['Q17_Part_3'],df_nunique['Q17_Part_4'],df_nunique['Q17_Part_5']\n            ,df_nunique['Q17_Part_6'],df_nunique['Q17_Part_7'],df_nunique['Q17_Part_8']\n            ,df_nunique['Q17_Part_9'],df_nunique['Q17_Part_10'],df_nunique['Q17_Part_11'],df_nunique['Q17_OTHER']])","87db6173":"col = ['Q17_Part_1',\n       'Q17_Part_2', 'Q17_Part_3', 'Q17_Part_4', 'Q17_Part_5',\n       'Q17_Part_6', 'Q17_Part_7', 'Q17_Part_8', 'Q17_Part_9',\n       'Q17_Part_10', 'Q17_Part_11', 'Q17_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","ded95bc8":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Machine Learning Algorithms used on regular basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","4987cfa5":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q18_Part_1',\n       'Q18_Part_2', 'Q18_Part_3', 'Q18_Part_4', 'Q18_Part_5',\n       'Q18_Part_6', 'Q18_OTHER'}}\nmulti_table([df_nunique['Q18_Part_1'],df_nunique['Q18_Part_2'],\n             df_nunique['Q18_Part_3'],df_nunique['Q18_Part_4'],df_nunique['Q18_Part_5']\n            ,df_nunique['Q18_Part_6'],df_nunique['Q18_OTHER']])","de81ff7f":"col = ['Q18_Part_1',\n       'Q18_Part_2', 'Q18_Part_3', 'Q18_Part_4', 'Q18_Part_5',\n       'Q18_Part_6', 'Q18_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","e2509af3":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nsns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Computer Vision Methods used on regular basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","fe012b3a":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q19_Part_1', 'Q19_Part_2',\n       'Q19_Part_3', 'Q19_Part_4', 'Q19_Part_5', 'Q19_OTHER'}}\nmulti_table([df_nunique['Q19_Part_1'],df_nunique['Q19_Part_2'],\n             df_nunique['Q19_Part_3'],df_nunique['Q19_Part_4'],df_nunique['Q19_Part_5']\n            ,df_nunique['Q19_OTHER']])","954c5296":"col = ['Q19_Part_1', 'Q19_Part_2',\n       'Q19_Part_3', 'Q19_Part_4', 'Q19_Part_5', 'Q19_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","6778d86c":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nsns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('NLP Methods used on regular basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","1b48c074":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q20'}}\nmulti_table([ df_nunique['Q20']])","213f15a2":"fig, ax = plt.subplots(2, 1, figsize=(15,25))\nx=df['Q20'].value_counts().index\ny=df['Q20'].value_counts().values.tolist()\ndata = df.groupby(\"Q20\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['Q20'].value_counts().index])\nplt.legend(bbox_to_anchor=(1.7, 1))\nplt.suptitle ('Current Employement',weight = 'bold')\nax[0].tick_params(labelrotation=90)\nplt.show()","43d9e231":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q21'}}\nmulti_table([ df_nunique['Q21']])","d605ff15":"fig, ax = plt.subplots(2, 1, figsize=(15,25))\nx=df['Q21'].value_counts().index\ny=df['Q21'].value_counts().values.tolist()\ndata = df.groupby(\"Q21\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['Q21'].value_counts().index])\nplt.legend(bbox_to_anchor=(1.7, 1))\nplt.suptitle ('Size of Company',weight = 'bold')\nax[0].tick_params(labelrotation=90)\nplt.show()","5b4a7269":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q22'}}\nmulti_table([ df_nunique['Q22']])","c9b1ced2":"fig, ax = plt.subplots(2, 1, figsize=(15,25))\nx=df['Q22'].value_counts().index\ny=df['Q22'].value_counts().values.tolist()\ndata = df.groupby(\"Q22\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['Q22'].value_counts().index])\nplt.legend(bbox_to_anchor=(1.7, 1))\nplt.suptitle ('Employees Responsible for Data Science role',weight = 'bold')\nax[0].tick_params(labelrotation=90)\nplt.show()","208c62e5":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q23'}}\nmulti_table([ df_nunique['Q23']])","9268bffe":"fig = plt.figure(figsize=(10, 6))\nx=df['Q23'].value_counts().index\ny=df['Q23'].value_counts().values.tolist()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(x))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Machine Learning Methods into their business',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","d0416e4a":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q24_Part_1', 'Q24_Part_2', 'Q24_Part_3',\n       'Q24_Part_4', 'Q24_Part_5', 'Q24_Part_6', 'Q24_Part_7',\n       'Q24_OTHER'}}\nmulti_table([df_nunique['Q24_Part_1'],df_nunique['Q24_Part_2'],\n             df_nunique['Q24_Part_3'],df_nunique['Q24_Part_4'],df_nunique['Q24_Part_5'],df_nunique['Q24_Part_6']\n            ,df_nunique['Q24_Part_7'],df_nunique['Q24_OTHER']])","990ef88e":"col = ['Q24_Part_1', 'Q24_Part_2', 'Q24_Part_3',\n       'Q24_Part_4', 'Q24_Part_5', 'Q24_Part_6', 'Q24_Part_7',\n       'Q24_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","103cf002":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nsns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Activities that make important role at work',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","a0842459":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q25'}}\nmulti_table([ df_nunique['Q25']])","e50e04b1":"fig = plt.figure(figsize=(15, 6))\nx=df['Q25'].value_counts().index\ny=df['Q25'].value_counts().values.tolist()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(x))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Yearly Compensation of Employees',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","a41d91fe":"df_nunique = {var: pd.DataFrame(df1[var].value_counts()) \n              for var in {'Q26'}}\nmulti_table([ df_nunique['Q26']])","8cb8615b":"fig = plt.figure(figsize=(10, 6))\nx=df['Q26'].value_counts().index\ny=df['Q26'].value_counts().values.tolist()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(x))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Money Spent on ML or Cloud Computing Services',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","9f51d268":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q27_A_Part_1', 'Q27_A_Part_2',\n       'Q27_A_Part_3', 'Q27_A_Part_4', 'Q27_A_Part_5', 'Q27_A_Part_6',\n       'Q27_A_Part_7', 'Q27_A_Part_8', 'Q27_A_Part_9', 'Q27_A_Part_10',\n       'Q27_A_Part_11', 'Q27_A_OTHER'}}\nmulti_table([df_nunique['Q27_A_Part_1'],df_nunique['Q27_A_Part_2'],\n             df_nunique['Q27_A_Part_3'],df_nunique['Q27_A_Part_4'],df_nunique['Q27_A_Part_5'],df_nunique['Q27_A_Part_6']\n            ,df_nunique['Q27_A_Part_7'],df_nunique['Q27_A_Part_8'],df_nunique['Q27_A_Part_9'],df_nunique['Q27_A_Part_10']\n             ,df_nunique['Q27_A_Part_11'],df_nunique['Q27_A_OTHER']])","93786605":"col = ['Q27_A_Part_1', 'Q27_A_Part_2',\n       'Q27_A_Part_3', 'Q27_A_Part_4', 'Q27_A_Part_5', 'Q27_A_Part_6',\n       'Q27_A_Part_7', 'Q27_A_Part_8', 'Q27_A_Part_9', 'Q27_A_Part_10',\n       'Q27_A_Part_11', 'Q27_A_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","4102b3ce":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Cloud Computing Platforms used on regular basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","9cea6a4a":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q27_B_Part_1', 'Q27_B_Part_2',\n       'Q27_B_Part_3', 'Q27_B_Part_4', 'Q27_B_Part_5', 'Q27_B_Part_6',\n       'Q27_B_Part_7', 'Q27_B_Part_8', 'Q27_B_Part_9', 'Q27_B_Part_10',\n       'Q27_B_Part_11', 'Q27_B_OTHER'}}\nmulti_table([df_nunique['Q27_B_Part_1'],df_nunique['Q27_B_Part_2'],\n             df_nunique['Q27_B_Part_3'],df_nunique['Q27_B_Part_4'],df_nunique['Q27_B_Part_5'],df_nunique['Q27_B_Part_6']\n            ,df_nunique['Q27_B_Part_7'],df_nunique['Q27_B_Part_8'],df_nunique['Q27_B_Part_9'],df_nunique['Q27_B_Part_10']\n             ,df_nunique['Q27_B_Part_11'],df_nunique['Q27_B_OTHER']])","856e0282":"col = ['Q27_B_Part_1', 'Q27_B_Part_2',\n       'Q27_B_Part_3', 'Q27_B_Part_4', 'Q27_B_Part_5', 'Q27_B_Part_6',\n       'Q27_B_Part_7', 'Q27_B_Part_8', 'Q27_B_Part_9', 'Q27_B_Part_10',\n       'Q27_B_Part_11', 'Q27_B_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","380e6bf2":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Cloud Computing Platforms do you hope to familar within next two years',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","1a7ac067":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q28'}}\nmulti_table([ df_nunique['Q28']])","c7c37857":"fig = plt.figure(figsize=(10, 6))\nx=df['Q28'].value_counts().index\ny=df['Q28'].value_counts().values.tolist()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(x))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Cloud Platforms with Best DEveloper Experience',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","f46879c8":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q29_A_Part_1',\n       'Q29_A_Part_2', 'Q29_A_Part_3', 'Q29_A_Part_4', 'Q29_A_OTHER'}}\nmulti_table([df_nunique['Q29_A_Part_1'],df_nunique['Q29_A_Part_2'],\n             df_nunique['Q29_A_Part_3'],df_nunique['Q29_A_Part_4'],df_nunique['Q29_A_OTHER']])","70575a28":"col = ['Q29_A_Part_1',\n       'Q29_A_Part_2', 'Q29_A_Part_3', 'Q29_A_Part_4', 'Q29_A_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","fdf786ff":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Cloud Computing Products used on regular basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","3e087741":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q29_B_Part_1',\n       'Q29_B_Part_2', 'Q29_B_Part_3', 'Q29_B_Part_4', 'Q29_B_OTHER'}}\nmulti_table([df_nunique['Q29_B_Part_1'],df_nunique['Q29_B_Part_2'],\n             df_nunique['Q29_B_Part_3'],df_nunique['Q29_B_Part_4'],df_nunique['Q29_B_OTHER']])","257f27de":"col = ['Q29_B_Part_1',\n       'Q29_B_Part_2', 'Q29_B_Part_3', 'Q29_B_Part_4', 'Q29_B_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","f81401bf":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\nax = pal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Cloud Computing products wanted to explore in next 2 years',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","e6da73f1":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q30_A_Part_1', 'Q30_A_Part_2', 'Q30_A_Part_3', 'Q30_A_Part_4',\n       'Q30_A_Part_5', 'Q30_A_Part_6', 'Q30_A_Part_7', 'Q30_A_OTHER',}}\nmulti_table([df_nunique['Q30_A_Part_1'],df_nunique['Q30_A_Part_2'],\n             df_nunique['Q30_A_Part_3'],df_nunique['Q30_A_Part_4'],df_nunique['Q30_A_Part_5'],df_nunique['Q30_A_Part_6']\n            ,df_nunique['Q30_A_Part_7'],df_nunique['Q30_A_OTHER']])","b08989e3":"col = ['Q30_A_Part_1', 'Q30_A_Part_2', 'Q30_A_Part_3', 'Q30_A_Part_4',\n       'Q30_A_Part_5', 'Q30_A_Part_6', 'Q30_A_Part_7', 'Q30_A_OTHER',]\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","8315fa89":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Storage Products used on regular basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","76689ee3":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q30_B_Part_1', 'Q30_B_Part_2', 'Q30_B_Part_3',\n       'Q30_B_Part_4', 'Q30_B_Part_5', 'Q30_B_Part_6', 'Q30_B_Part_7',\n       'Q30_B_OTHER'}}\nmulti_table([df_nunique['Q30_B_Part_1'],df_nunique['Q30_B_Part_2'],\n             df_nunique['Q30_B_Part_3'],df_nunique['Q30_B_Part_4'],df_nunique['Q30_B_Part_5'],df_nunique['Q30_B_Part_6']\n            ,df_nunique['Q30_B_Part_7'],df_nunique['Q30_B_OTHER']])","d901beac":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q31_A_Part_1', 'Q31_A_Part_2', 'Q31_A_Part_3', 'Q31_A_Part_4',\n       'Q31_A_Part_5', 'Q31_A_Part_6', 'Q31_A_Part_7', 'Q31_A_Part_8',\n       'Q31_A_Part_9', 'Q31_A_OTHER'}}\nmulti_table([df_nunique['Q31_A_Part_1'],df_nunique['Q31_A_Part_2'],\n             df_nunique['Q31_A_Part_3'],df_nunique['Q31_A_Part_4'],df_nunique['Q31_A_Part_5'],df_nunique['Q31_A_Part_6']\n            ,df_nunique['Q31_A_Part_7'],df_nunique['Q31_A_Part_8'],df_nunique['Q31_A_Part_9'],df_nunique['Q31_A_OTHER']])","78e056aa":"col = ['Q31_A_Part_1', 'Q31_A_Part_2', 'Q31_A_Part_3', 'Q31_A_Part_4',\n       'Q31_A_Part_5', 'Q31_A_Part_6', 'Q31_A_Part_7', 'Q31_A_Part_8',\n       'Q31_A_Part_9', 'Q31_A_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","9ba50d8d":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Machine Learning Products used on regular basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","5c4b22d2":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q31_B_Part_1', 'Q31_B_Part_2', 'Q31_B_Part_3', 'Q31_B_Part_4',\n       'Q31_B_Part_5', 'Q31_B_Part_6', 'Q31_B_Part_7', 'Q31_B_Part_8',\n       'Q31_B_Part_9', 'Q31_B_OTHER'}}\nmulti_table([df_nunique['Q31_B_Part_1'],df_nunique['Q31_B_Part_2'],\n             df_nunique['Q31_B_Part_3'],df_nunique['Q31_B_Part_4'],df_nunique['Q31_B_Part_5'],df_nunique['Q31_B_Part_6']\n            ,df_nunique['Q31_B_Part_7'],df_nunique['Q31_B_Part_8'],df_nunique['Q31_B_Part_9'],df_nunique['Q31_B_OTHER']])","726512cf":"col = ['Q31_B_Part_1', 'Q31_B_Part_2', 'Q31_B_Part_3', 'Q31_B_Part_4',\n       'Q31_B_Part_5', 'Q31_B_Part_6', 'Q31_B_Part_7', 'Q31_B_Part_8',\n       'Q31_B_Part_9', 'Q31_B_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","5d3a2ee8":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Machine Learning Products hope to familiar with them in next 2 years',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","6b371b3f":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q32_A_Part_1', 'Q32_A_Part_2',\n       'Q32_A_Part_3', 'Q32_A_Part_4', 'Q32_A_Part_5', 'Q32_A_Part_6',\n       'Q32_A_Part_7', 'Q32_A_Part_8', 'Q32_A_Part_9', 'Q32_A_Part_10',\n       'Q32_A_Part_11', 'Q32_A_Part_12', 'Q32_A_Part_13', 'Q32_A_Part_14',\n       'Q32_A_Part_15', 'Q32_A_Part_16', 'Q32_A_Part_17', 'Q32_A_Part_18',\n       'Q32_A_Part_19', 'Q32_A_Part_20', 'Q32_A_OTHER'}}\nmulti_table([df_nunique['Q32_A_Part_1'],df_nunique['Q32_A_Part_2'],\n             df_nunique['Q32_A_Part_3'],df_nunique['Q32_A_Part_4'],df_nunique['Q32_A_Part_5'],df_nunique['Q32_A_Part_6'],\n             df_nunique['Q32_A_Part_7'],df_nunique['Q32_A_Part_8'],df_nunique['Q32_A_Part_9'],df_nunique['Q32_A_Part_10'],\n             df_nunique['Q32_A_Part_11'],df_nunique['Q32_A_Part_12'],df_nunique['Q32_A_Part_13'],df_nunique['Q32_A_Part_14'],\n             df_nunique['Q32_A_Part_15'],df_nunique['Q32_A_Part_16'],df_nunique['Q32_A_Part_17'],df_nunique['Q32_A_Part_18'],\n             df_nunique['Q32_A_Part_19'],df_nunique['Q32_A_Part_20'],df_nunique['Q32_A_OTHER']])","9619eaba":"col = ['Q32_A_Part_1', 'Q32_A_Part_2',\n       'Q32_A_Part_3', 'Q32_A_Part_4', 'Q32_A_Part_5', 'Q32_A_Part_6',\n       'Q32_A_Part_7', 'Q32_A_Part_8', 'Q32_A_Part_9', 'Q32_A_Part_10',\n       'Q32_A_Part_11', 'Q32_A_Part_12', 'Q32_A_Part_13', 'Q32_A_Part_14',\n       'Q32_A_Part_15', 'Q32_A_Part_16', 'Q32_A_Part_17', 'Q32_A_Part_18',\n       'Q32_A_Part_19', 'Q32_A_Part_20', 'Q32_A_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","2f29205b":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Big Data Products used on regular basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","68628b0e":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q32_B_Part_1', 'Q32_B_Part_2',\n       'Q32_B_Part_3', 'Q32_B_Part_4', 'Q32_B_Part_5', 'Q32_B_Part_6',\n       'Q32_B_Part_7', 'Q32_B_Part_8', 'Q32_B_Part_9', 'Q32_B_Part_10',\n       'Q32_B_Part_11', 'Q32_B_Part_12', 'Q32_B_Part_13', 'Q32_B_Part_14',\n       'Q32_B_Part_15', 'Q32_B_Part_16', 'Q32_B_Part_17', 'Q32_B_Part_18',\n       'Q32_B_Part_19', 'Q32_B_Part_20', 'Q32_B_OTHER'}}\nmulti_table([df_nunique['Q32_B_Part_1'],df_nunique['Q32_B_Part_2'],\n             df_nunique['Q32_B_Part_3'],df_nunique['Q32_B_Part_4'],df_nunique['Q32_B_Part_5'],df_nunique['Q32_B_Part_6'],\n             df_nunique['Q32_B_Part_7'],df_nunique['Q32_B_Part_8'],df_nunique['Q32_B_Part_9'],df_nunique['Q32_B_Part_10'],\n             df_nunique['Q32_B_Part_11'],df_nunique['Q32_B_Part_12'],df_nunique['Q32_B_Part_13'],df_nunique['Q32_B_Part_14'],\n             df_nunique['Q32_B_Part_15'],df_nunique['Q32_B_Part_16'],df_nunique['Q32_B_Part_17'],df_nunique['Q32_B_Part_18'],\n             df_nunique['Q32_B_Part_19'],df_nunique['Q32_B_Part_20'],df_nunique['Q32_B_OTHER']])","d840e60c":"col = ['Q32_B_Part_1', 'Q32_B_Part_2',\n       'Q32_B_Part_3', 'Q32_B_Part_4', 'Q32_B_Part_5', 'Q32_B_Part_6',\n       'Q32_B_Part_7', 'Q32_B_Part_8', 'Q32_B_Part_9', 'Q32_B_Part_10',\n       'Q32_B_Part_11', 'Q32_B_Part_12', 'Q32_B_Part_13', 'Q32_B_Part_14',\n       'Q32_B_Part_15', 'Q32_B_Part_16', 'Q32_B_Part_17', 'Q32_B_Part_18',\n       'Q32_B_Part_19', 'Q32_B_Part_20', 'Q32_B_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","01b8b717":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Big Data Products hope to familiar with them in next 2 years',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","0413a862":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q33'}}\nmulti_table([ df_nunique['Q33']])","96975c66":"fig = plt.figure(figsize=(10, 6))\nx=df['Q33'].value_counts().index\ny=df['Q33'].value_counts().values.tolist()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(x))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Data Products Used Most Often',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","d99e0612":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q34_A_Part_1', 'Q34_A_Part_2', 'Q34_A_Part_3', 'Q34_A_Part_4',\n       'Q34_A_Part_5', 'Q34_A_Part_6', 'Q34_A_Part_7', 'Q34_A_Part_8',\n       'Q34_A_Part_9', 'Q34_A_Part_10', 'Q34_A_Part_11', 'Q34_A_Part_12',\n       'Q34_A_Part_13', 'Q34_A_Part_14', 'Q34_A_Part_15', 'Q34_A_Part_16',\n       'Q34_A_OTHER'}}\nmulti_table([df_nunique['Q34_A_Part_1'],df_nunique['Q34_A_Part_2'],\n             df_nunique['Q34_A_Part_3'],df_nunique['Q34_A_Part_4'],df_nunique['Q34_A_Part_5'],df_nunique['Q34_A_Part_6'],\n             df_nunique['Q34_A_Part_7'],df_nunique['Q34_A_Part_8'],df_nunique['Q34_A_Part_9'],df_nunique['Q34_A_Part_10'],\n             df_nunique['Q34_A_Part_11'],df_nunique['Q34_A_Part_12'],df_nunique['Q34_A_Part_13'],df_nunique['Q34_A_Part_14'],\n             df_nunique['Q34_A_Part_15'],df_nunique['Q34_A_Part_16'],df_nunique['Q34_A_OTHER']])","766625fc":"col = ['Q34_A_Part_1', 'Q34_A_Part_2', 'Q34_A_Part_3', 'Q34_A_Part_4',\n       'Q34_A_Part_5', 'Q34_A_Part_6', 'Q34_A_Part_7', 'Q34_A_Part_8',\n       'Q34_A_Part_9', 'Q34_A_Part_10', 'Q34_A_Part_11', 'Q34_A_Part_12',\n       'Q34_A_Part_13', 'Q34_A_Part_14', 'Q34_A_Part_15', 'Q34_A_Part_16',\n       'Q34_A_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","cf764ebf":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Business Intelligence tools used on regular basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","1144b959":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q34_B_Part_1', 'Q34_B_Part_2', 'Q34_B_Part_3', 'Q34_B_Part_4',\n       'Q34_B_Part_5', 'Q34_B_Part_6', 'Q34_B_Part_7', 'Q34_B_Part_8',\n       'Q34_B_Part_9', 'Q34_B_Part_10', 'Q34_B_Part_11', 'Q34_B_Part_12',\n       'Q34_B_Part_13', 'Q34_B_Part_14', 'Q34_B_Part_15', 'Q34_B_Part_16',\n       'Q34_B_OTHER'}}\nmulti_table([df_nunique['Q34_B_Part_1'],df_nunique['Q34_B_Part_2'],\n             df_nunique['Q34_B_Part_3'],df_nunique['Q34_B_Part_4'],df_nunique['Q34_B_Part_5'],df_nunique['Q34_B_Part_6'],\n             df_nunique['Q34_B_Part_7'],df_nunique['Q34_B_Part_8'],df_nunique['Q34_B_Part_9'],df_nunique['Q34_B_Part_10'],\n             df_nunique['Q34_B_Part_11'],df_nunique['Q34_B_Part_12'],df_nunique['Q34_B_Part_13'],df_nunique['Q34_B_Part_14'],\n             df_nunique['Q34_B_Part_15'],df_nunique['Q34_B_Part_16'],df_nunique['Q34_B_OTHER']])","8885486b":"col = ['Q34_B_Part_1', 'Q34_B_Part_2', 'Q34_B_Part_3', 'Q34_B_Part_4',\n       'Q34_B_Part_5', 'Q34_B_Part_6', 'Q34_B_Part_7', 'Q34_B_Part_8',\n       'Q34_B_Part_9', 'Q34_B_Part_10', 'Q34_B_Part_11', 'Q34_B_Part_12',\n       'Q34_B_Part_13', 'Q34_B_Part_14', 'Q34_B_Part_15', 'Q34_B_Part_16',\n       'Q34_B_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","792ee902":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Business Intelligence tools hope to familiar within next 2 years',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","be73bb02":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q35'}}\nmulti_table([ df_nunique['Q35']])","d6044eda":"fig = plt.figure(figsize=(10, 6))\nx=df['Q35'].value_counts().index\ny=df['Q35'].value_counts().values.tolist()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(x))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Businees Intelligent Tools Used Most',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","aa1d652c":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q36_A_Part_1', 'Q36_A_Part_2',\n       'Q36_A_Part_3', 'Q36_A_Part_4', 'Q36_A_Part_5', 'Q36_A_Part_6',\n       'Q36_A_Part_7', 'Q36_A_OTHER'}}\nmulti_table([df_nunique['Q36_A_Part_1'],df_nunique['Q36_A_Part_2'],\n             df_nunique['Q36_A_Part_3'],df_nunique['Q36_A_Part_4'],df_nunique['Q36_A_Part_5'],df_nunique['Q36_A_Part_6'],\n             df_nunique['Q36_A_Part_7'],df_nunique['Q36_A_OTHER']])","5cf318dd":"col = ['Q36_A_Part_1', 'Q36_A_Part_2',\n       'Q36_A_Part_3', 'Q36_A_Part_4', 'Q36_A_Part_5', 'Q36_A_Part_6',\n       'Q36_A_Part_7', 'Q36_A_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","5fa5871e":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Machine Learning Tools used on regular basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","e20fd3f8":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q36_B_Part_1', 'Q36_B_Part_2',\n       'Q36_B_Part_3', 'Q36_B_Part_4', 'Q36_B_Part_5', 'Q36_B_Part_6',\n       'Q36_B_Part_7', 'Q36_B_OTHER'}}\nmulti_table([df_nunique['Q36_B_Part_1'],df_nunique['Q36_B_Part_2'],\n             df_nunique['Q36_B_Part_3'],df_nunique['Q36_B_Part_4'],df_nunique['Q36_B_Part_5'],df_nunique['Q36_B_Part_6'],\n             df_nunique['Q36_B_Part_7'],df_nunique['Q36_B_OTHER']])","7a5045a5":"col = ['Q36_B_Part_1', 'Q36_B_Part_2',\n       'Q36_B_Part_3', 'Q36_B_Part_4', 'Q36_B_Part_5', 'Q36_B_Part_6',\n       'Q36_B_Part_7', 'Q36_B_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","b477b931":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Machine Learning Tools hope to familiar with them within next 2 years',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","8a7e259e":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q37_A_Part_1', 'Q37_A_Part_2',\n       'Q37_A_Part_3', 'Q37_A_Part_4', 'Q37_A_Part_5', 'Q37_A_Part_6',\n       'Q37_A_Part_7', 'Q37_A_OTHER'}}\nmulti_table([df_nunique['Q37_A_Part_1'],df_nunique['Q37_A_Part_2'],\n             df_nunique['Q37_A_Part_3'],df_nunique['Q37_A_Part_4'],df_nunique['Q37_A_Part_5'],df_nunique['Q37_A_Part_6'],\n             df_nunique['Q37_A_Part_7'],df_nunique['Q37_A_OTHER']])","127772d0":"col = ['Q37_A_Part_1', 'Q37_A_Part_2',\n       'Q37_A_Part_3', 'Q37_A_Part_4', 'Q37_A_Part_5', 'Q37_A_Part_6',\n       'Q37_A_Part_7', 'Q37_A_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","7af5a441":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Auto Machine Learning Tools used on regular basis',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","4fd48225":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q37_B_Part_1', 'Q37_B_Part_2',\n       'Q37_B_Part_3', 'Q37_B_Part_4', 'Q37_B_Part_5', 'Q37_B_Part_6',\n       'Q37_B_Part_7', 'Q37_B_OTHER'}}\nmulti_table([df_nunique['Q37_B_Part_1'],df_nunique['Q37_B_Part_2'],\n             df_nunique['Q37_B_Part_3'],df_nunique['Q37_B_Part_4'],df_nunique['Q37_B_Part_5'],df_nunique['Q37_B_Part_6'],\n             df_nunique['Q37_B_Part_7'],df_nunique['Q37_B_OTHER']])","399b7fdb":"col = ['Q37_B_Part_1', 'Q37_B_Part_2',\n       'Q37_B_Part_3', 'Q37_B_Part_4', 'Q37_B_Part_5', 'Q37_B_Part_6',\n       'Q37_B_Part_7', 'Q37_B_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","4522ae60":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Auto Machine Learning Tools hope to familiar with them within next 2 years',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","012ff05f":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q38_A_Part_1', 'Q38_A_Part_2',\n       'Q38_A_Part_3', 'Q38_A_Part_4', 'Q38_A_Part_5', 'Q38_A_Part_6',\n       'Q38_A_Part_7', 'Q38_A_Part_8', 'Q38_A_Part_9', 'Q38_A_Part_10',\n       'Q38_A_Part_11', 'Q38_A_OTHER'}}\nmulti_table([df_nunique['Q38_A_Part_1'],df_nunique['Q38_A_Part_2'],\n             df_nunique['Q38_A_Part_3'],df_nunique['Q38_A_Part_4'],df_nunique['Q38_A_Part_5'],df_nunique['Q38_A_Part_6'],\n             df_nunique['Q38_A_Part_7'],df_nunique['Q38_A_Part_8'],df_nunique['Q38_A_Part_9'],df_nunique['Q38_A_Part_10'],\n             df_nunique['Q38_A_Part_11'],df_nunique['Q38_A_OTHER']])","b7241306":"col = ['Q38_A_Part_1', 'Q38_A_Part_2',\n       'Q38_A_Part_3', 'Q38_A_Part_4', 'Q38_A_Part_5', 'Q38_A_Part_6',\n       'Q38_A_Part_7', 'Q38_A_Part_8', 'Q38_A_Part_9', 'Q38_A_Part_10',\n       'Q38_A_Part_11', 'Q38_A_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","5da74b89":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Machine Learning Experiment tools used to manage work',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","941c20e3":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q38_B_Part_1', 'Q38_B_Part_2',\n       'Q38_B_Part_3', 'Q38_B_Part_4', 'Q38_B_Part_5', 'Q38_B_Part_6',\n       'Q38_B_Part_7', 'Q38_B_Part_8', 'Q38_B_Part_9', 'Q38_B_Part_10',\n       'Q38_B_Part_11', 'Q38_B_OTHER'}}\nmulti_table([df_nunique['Q38_B_Part_1'],df_nunique['Q38_B_Part_2'],\n             df_nunique['Q38_B_Part_3'],df_nunique['Q38_B_Part_4'],df_nunique['Q38_B_Part_5'],df_nunique['Q38_B_Part_6'],\n             df_nunique['Q38_B_Part_7'],df_nunique['Q38_B_Part_8'],df_nunique['Q38_B_Part_9'],df_nunique['Q38_B_Part_10'],\n             df_nunique['Q38_B_Part_11'],df_nunique['Q38_B_OTHER']])","44fec406":"col = ['Q38_B_Part_1', 'Q38_B_Part_2',\n       'Q38_B_Part_3', 'Q38_B_Part_4', 'Q38_B_Part_5', 'Q38_B_Part_6',\n       'Q38_B_Part_7', 'Q38_B_Part_8', 'Q38_B_Part_9', 'Q38_B_Part_10',\n       'Q38_B_Part_11', 'Q38_B_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","bd1f3fdd":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Machine Learning Experiment tools hope to familiar in next 2 years',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","f914ae5a":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q39_Part_1', 'Q39_Part_2',\n       'Q39_Part_3', 'Q39_Part_4', 'Q39_Part_5', 'Q39_Part_6',\n       'Q39_Part_7', 'Q39_Part_8', 'Q39_Part_9', 'Q39_OTHER'}}\nmulti_table([df_nunique['Q39_Part_1'],df_nunique['Q39_Part_2'],\n             df_nunique['Q39_Part_3'],df_nunique['Q39_Part_4'],df_nunique['Q39_Part_5'],df_nunique['Q39_Part_6'],\n             df_nunique['Q39_Part_7'],df_nunique['Q39_Part_8'],df_nunique['Q39_Part_9'],df_nunique['Q39_OTHER']])","6dc6e0c2":"col = ['Q39_Part_1', 'Q39_Part_2',\n       'Q39_Part_3', 'Q39_Part_4', 'Q39_Part_5', 'Q39_Part_6',\n       'Q39_Part_7', 'Q39_Part_8', 'Q39_Part_9', 'Q39_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","66a5395f":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Publicly share your data analysis or machine learning applications',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","f5235d13":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q40_Part_1', 'Q40_Part_2', 'Q40_Part_3', 'Q40_Part_4',\n       'Q40_Part_5', 'Q40_Part_6', 'Q40_Part_7', 'Q40_Part_8',\n       'Q40_Part_9', 'Q40_Part_10', 'Q40_Part_11', 'Q40_OTHER'}}\nmulti_table([df_nunique['Q40_Part_1'],df_nunique['Q40_Part_2'],\n             df_nunique['Q40_Part_3'],df_nunique['Q40_Part_4'],df_nunique['Q40_Part_5'],df_nunique['Q40_Part_6'],\n             df_nunique['Q40_Part_7'],df_nunique['Q40_Part_8'],df_nunique['Q40_Part_9'],df_nunique['Q40_Part_10'],\n             df_nunique['Q40_Part_11'],df_nunique['Q40_OTHER']])","bb945a27":"col = ['Q40_Part_1', 'Q40_Part_2', 'Q40_Part_3', 'Q40_Part_4',\n       'Q40_Part_5', 'Q40_Part_6', 'Q40_Part_7', 'Q40_Part_8',\n       'Q40_Part_9', 'Q40_Part_10', 'Q40_Part_11', 'Q40_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","74279f0d":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Platform where you begun or completed data science course',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","ea84fd72":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q41'}}\nmulti_table([ df_nunique['Q41']])","1d86d5c5":"fig, ax = plt.subplots(2, 1, figsize=(15,25))\nx=df['Q41'].value_counts().index\ny=df['Q41'].value_counts().values.tolist()\ndata = df.groupby(\"Q41\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['Q41'].value_counts().index])\nplt.legend(bbox_to_anchor=(1.7, 1))\nplt.suptitle ('Primary Tool used most to work at school\/home',weight = 'bold')\nax[0].tick_params(labelrotation=90)\nplt.show()","3436da73":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'Q42_Part_1', 'Q42_Part_2', 'Q42_Part_3', 'Q42_Part_4',\n       'Q42_Part_5', 'Q42_Part_6', 'Q42_Part_7', 'Q42_Part_8',\n       'Q42_Part_9', 'Q42_Part_10', 'Q42_Part_11', 'Q42_OTHER'}}\nmulti_table([df_nunique['Q42_Part_1'],df_nunique['Q42_Part_2'],\n             df_nunique['Q42_Part_3'],df_nunique['Q42_Part_4'],df_nunique['Q42_Part_5'],df_nunique['Q42_Part_6'],\n             df_nunique['Q42_Part_7'],df_nunique['Q42_Part_8'],df_nunique['Q42_Part_9'],df_nunique['Q42_Part_10'],\n             df_nunique['Q42_Part_11'],df_nunique['Q42_OTHER']])","d59a76f0":"col = ['Q42_Part_1', 'Q42_Part_2', 'Q42_Part_3', 'Q42_Part_4',\n       'Q42_Part_5', 'Q42_Part_6', 'Q42_Part_7', 'Q42_Part_8',\n       'Q42_Part_9', 'Q42_Part_10', 'Q42_Part_11', 'Q42_OTHER']\na = []\nfor i in col:\n    a.append(df[i].value_counts().keys()[0])\nb = []\nfor i in col:\n    b.append(df[i].value_counts().iloc[0])","1f1030dd":"fig = plt.figure(figsize=(10, 6))\nx=a\ny=b\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(a))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Favourite Social Media to report Data Science topics',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","55333391":"df['Q1'].value_counts()","e261df46":"df_1821 = df[df['Q1'] == '18-21']\ndf_1821","e900e806":"df_1821['Q1'].value_counts()","8129a227":"df_2224 = df[df['Q1'] == '22-24']\ndf_2224","01fd27a7":"df_2529 = df[df['Q1'] == '25-29']\ndf_2529","1042248a":"df_3034 = df[df['Q1'] == '30-34']\ndf_3034","e65cc987":"df_3539 = df[df['Q1'] == '35-39']\ndf_3539","230c6a98":"df_4044 = df[df['Q1'] == '40-44']\ndf_4044","b2336f5c":"df_4549 = df[df['Q1'] == '45-49']\ndf_4549","66edea32":"df_5054 = df[df['Q1'] == '50-54']\ndf_5054","2e859d11":"df_5559 = df[df['Q1'] == '55-59']\ndf_5559","6b5fb5f0":"df_6069 = df[df['Q1'] == '60-69']\ndf_6069","10a823a1":"df_70 = df[df['Q1'] == '70+']\ndf_70","45d52119":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q3'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_1821['Q3'].value_counts().keys():\n        y1.append(df_1821['Q3'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2224['Q3'].value_counts().keys():\n        y2.append(df_2224['Q3'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2529['Q3'].value_counts().keys():\n        y3.append(df_2529['Q3'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_3034['Q3'].value_counts().keys():\n        y4.append(df_3034['Q3'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_3539['Q3'].value_counts().keys():\n        y5.append(df_3539['Q3'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_4044['Q3'].value_counts().keys():\n        y6.append(df_4044['Q3'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_4549['Q3'].value_counts().keys():\n        y7.append(df_4549['Q3'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_5054['Q3'].value_counts().keys():\n        y8.append(df_5054['Q3'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_5559['Q3'].value_counts().keys():\n        y9.append(df_5559['Q3'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_6069['Q3'].value_counts().keys():\n        y10.append(df_6069['Q3'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_70['Q3'].value_counts().keys():\n        y11.append(df_70['Q3'].value_counts()[j])\n    else:\n        y11.append(0)\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs country\",x=0,y=0.95,font_size=25), \n                   barmode = 'stack',\n                   width=3600,\n                   height=1000,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Country',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","f9275b8c":"#### Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q4'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    y1.append(df_1821['Q4'].value_counts()[j])\ny2 = []\nfor j in x:\n    y2.append(df_2224['Q4'].value_counts()[j])\ny3 = []\nfor j in x:\n    y3.append(df_2529['Q4'].value_counts()[j])\ny4 = []\nfor j in x:\n    y4.append(df_3034['Q4'].value_counts()[j])\ny5 = []\nfor j in x:\n    y5.append(df_3539['Q4'].value_counts()[j])\ny6 = []\nfor j in x:\n    y6.append(df_4044['Q4'].value_counts()[j])\ny7 = []\nfor j in x:\n    y7.append(df_4549['Q4'].value_counts()[j])\ny8 = []\nfor j in x:\n    y8.append(df_5054['Q4'].value_counts()[j])\ny9 = []\nfor j in x:\n    y9.append(df_5559['Q4'].value_counts()[j])\ny10 = []\nfor j in x:\n    y10.append(df_6069['Q4'].value_counts()[j])\ny11 = []\nfor j in x:\n    y11.append(df_70['Q4'].value_counts()[j])\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs Degree\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=2000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Degree',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","748445d3":"fig = px.sunburst(data_frame=df,\n                  path=['Q4', 'Q1'],\n                  color='Q4',\n                  title='Age and degree'\n                 )\n\nfig.update_traces(textinfo='label+percent parent')\nfig.update_layout(margin=dict(t=40, l=0, r=0, b=0))\nfig.show()","11859938":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = ['Man','Woman']\ny1 = []\nfor j in x:\n    y1.append(df_1821['Q2'].value_counts()[j])\ny2 = []\nfor j in x:\n    y2.append(df_2224['Q2'].value_counts()[j])\ny3 = []\nfor j in x:\n    y3.append(df_2529['Q2'].value_counts()[j])\ny4 = []\nfor j in x:\n    y4.append(df_3034['Q2'].value_counts()[j])\ny5 = []\nfor j in x:\n    y5.append(df_3539['Q2'].value_counts()[j])\ny6 = []\nfor j in x:\n    y6.append(df_4044['Q2'].value_counts()[j])\ny7 = []\nfor j in x:\n    y7.append(df_4549['Q2'].value_counts()[j])\ny8 = []\nfor j in x:\n    y8.append(df_5054['Q2'].value_counts()[j])\ny9 = []\nfor j in x:\n    y9.append(df_5559['Q2'].value_counts()[j])\ny10 = []\nfor j in x:\n    y10.append(df_6069['Q2'].value_counts()[j])\ny11 = []\nfor j in x:\n    y11.append(df_70['Q2'].value_counts()[j])\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs Degree\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=980,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Gender',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","18c18eca":"# Plotting interactive sunburst for only man and woman:\n\nfig = px.sunburst(data_frame=df,\n                  path=['Q2', 'Q1'],\n                  color='Q2',\n                  title='Gender and Age'\n                 )\n\nfig.update_traces(textinfo='label+percent parent')\nfig.update_layout(margin=dict(t=40, l=0, r=0, b=0))\nfig.show()","b430de67":"df['Q5'].value_counts()","e9fa3ccb":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q5'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    y1.append(df_1821['Q5'].value_counts()[j])\ny2 = []\nfor j in x:\n    y2.append(df_2224['Q5'].value_counts()[j])\ny3 = []\nfor j in x:\n    y3.append(df_2529['Q5'].value_counts()[j])\ny4 = []\nfor j in x:\n    y4.append(df_3034['Q5'].value_counts()[j])\ny5 = []\nfor j in x:\n    y5.append(df_3539['Q5'].value_counts()[j])\ny6 = []\nfor j in x:\n    y6.append(df_4044['Q5'].value_counts()[j])\ny7 = []\nfor j in x:\n    y7.append(df_4549['Q5'].value_counts()[j])\ny8 = []\nfor j in x:\n    y8.append(df_5054['Q5'].value_counts()[j])\ny9 = []\nfor j in x:\n    y9.append(df_5559['Q5'].value_counts()[j])\ny10 = []\nfor j in x:\n    y10.append(df_6069['Q5'].value_counts()[j])\ny11 = []\nfor j in x:\n    y11.append(df_70['Q5'].value_counts()[j])\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs Profession\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=4000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Profession',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","a487982c":"# Plotting interactive sunburst for only man and woman:\n\nfig = px.sunburst(data_frame=df,\n                  path=['Q5', 'Q1'],\n                  color='Q5',\n                  title='Profession and Age'\n                 )\n\nfig.update_traces(textinfo='label+percent parent')\nfig.update_layout(margin=dict(t=40, l=0, r=0, b=0))\nfig.show()","89ca4857":"df['Q6'].value_counts()","7e5f45d6":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q6'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    y1.append(df_1821['Q6'].value_counts()[j])\ny2 = []\nfor j in x:\n    y2.append(df_2224['Q6'].value_counts()[j])\ny3 = []\nfor j in x:\n    y3.append(df_2529['Q6'].value_counts()[j])\ny4 = []\nfor j in x:\n    y4.append(df_3034['Q6'].value_counts()[j])\ny5 = []\nfor j in x:\n    y5.append(df_3539['Q6'].value_counts()[j])\ny6 = []\nfor j in x:\n    y6.append(df_4044['Q6'].value_counts()[j])\ny7 = []\nfor j in x:\n    y7.append(df_4549['Q6'].value_counts()[j])\ny8 = []\nfor j in x:\n    y8.append(df_5054['Q6'].value_counts()[j])\ny9 = []\nfor j in x:\n    y9.append(df_5559['Q6'].value_counts()[j])\ny10 = []\nfor j in x:\n    y10.append(df_6069['Q6'].value_counts()[j])\ny11 = []\nfor j in x:\n    y11.append(df_70['Q6'].value_counts()[j])\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs Coding Experience\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=2500,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Coding Experience',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","eeff934b":"fig = px.sunburst(data_frame=df,\n                  path=['Q6', 'Q1'],\n                  color='Q6',\n                  title='Coding Experience and Age'\n                 )\n\nfig.update_traces(textinfo='label+percent parent')\nfig.update_layout(margin=dict(t=40, l=0, r=0, b=0))\nfig.show()","6716fa18":"df['Q8'].value_counts()","76c5775a":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q8'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_1821['Q8'].value_counts().keys():\n        y1.append(df_1821['Q8'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2224['Q8'].value_counts().keys():\n        y2.append(df_2224['Q8'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2529['Q8'].value_counts().keys():\n        y3.append(df_2529['Q8'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_3034['Q8'].value_counts().keys():\n        y4.append(df_3034['Q8'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_3539['Q8'].value_counts().keys():\n        y5.append(df_3539['Q8'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_4044['Q8'].value_counts().keys():\n        y6.append(df_4044['Q8'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_4549['Q8'].value_counts().keys():\n        y7.append(df_4549['Q8'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_5054['Q8'].value_counts().keys():\n        y8.append(df_5054['Q8'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_5559['Q8'].value_counts().keys():\n        y9.append(df_5559['Q8'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_6069['Q8'].value_counts().keys():\n        y10.append(df_6069['Q8'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_70['Q8'].value_counts().keys():\n        y11.append(df_70['Q8'].value_counts()[j])\n    else:\n        y11.append(0)\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs Recommended Programming Language\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=4000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Programming Language',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","3577a9c4":"df['Q11'].value_counts()","1d92a40e":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q11'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_1821['Q11'].value_counts().keys():\n        y1.append(df_1821['Q11'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2224['Q11'].value_counts().keys():\n        y2.append(df_2224['Q11'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2529['Q11'].value_counts().keys():\n        y3.append(df_2529['Q11'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_3034['Q11'].value_counts().keys():\n        y4.append(df_3034['Q11'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_3539['Q11'].value_counts().keys():\n        y5.append(df_3539['Q11'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_4044['Q11'].value_counts().keys():\n        y6.append(df_4044['Q11'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_4549['Q11'].value_counts().keys():\n        y7.append(df_4549['Q11'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_5054['Q11'].value_counts().keys():\n        y8.append(df_5054['Q11'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_5559['Q11'].value_counts().keys():\n        y9.append(df_5559['Q11'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_6069['Q11'].value_counts().keys():\n        y10.append(df_6069['Q11'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_70['Q11'].value_counts().keys():\n        y11.append(df_70['Q11'].value_counts()[j])\n    else:\n        y11.append(0)\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs Computing Platform used\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Computing Platform',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","dabf89c9":"df['Q13'].value_counts()","d5d2cee3":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q13'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_1821['Q13'].value_counts().keys():\n        y1.append(df_1821['Q13'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2224['Q13'].value_counts().keys():\n        y2.append(df_2224['Q13'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2529['Q13'].value_counts().keys():\n        y3.append(df_2529['Q13'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_3034['Q13'].value_counts().keys():\n        y4.append(df_3034['Q13'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_3539['Q13'].value_counts().keys():\n        y5.append(df_3539['Q13'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_4044['Q13'].value_counts().keys():\n        y6.append(df_4044['Q13'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_4549['Q13'].value_counts().keys():\n        y7.append(df_4549['Q13'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_5054['Q13'].value_counts().keys():\n        y8.append(df_5054['Q13'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_5559['Q13'].value_counts().keys():\n        y9.append(df_5559['Q13'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_6069['Q13'].value_counts().keys():\n        y10.append(df_6069['Q13'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_70['Q13'].value_counts().keys():\n        y11.append(df_70['Q13'].value_counts()[j])\n    else:\n        y11.append(0)\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs TPU usage\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=2000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='TPU Usage (count)',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","27692e11":"df['Q15'].value_counts()","c9c55620":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q15'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_1821['Q15'].value_counts().keys():\n        y1.append(df_1821['Q15'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2224['Q15'].value_counts().keys():\n        y2.append(df_2224['Q15'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2529['Q15'].value_counts().keys():\n        y3.append(df_2529['Q15'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_3034['Q15'].value_counts().keys():\n        y4.append(df_3034['Q15'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_3539['Q15'].value_counts().keys():\n        y5.append(df_3539['Q15'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_4044['Q15'].value_counts().keys():\n        y6.append(df_4044['Q15'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_4549['Q15'].value_counts().keys():\n        y7.append(df_4549['Q15'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_5054['Q15'].value_counts().keys():\n        y8.append(df_5054['Q15'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_5559['Q15'].value_counts().keys():\n        y9.append(df_5559['Q15'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_6069['Q15'].value_counts().keys():\n        y10.append(df_6069['Q15'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_70['Q15'].value_counts().keys():\n        y11.append(df_70['Q15'].value_counts()[j])\n    else:\n        y11.append(0)\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs How many years ML methods used\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Years',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","19e702ab":"df['Q20'].value_counts()","da42114d":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q20'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_1821['Q20'].value_counts().keys():\n        y1.append(df_1821['Q20'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2224['Q20'].value_counts().keys():\n        y2.append(df_2224['Q20'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2529['Q20'].value_counts().keys():\n        y3.append(df_2529['Q20'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_3034['Q20'].value_counts().keys():\n        y4.append(df_3034['Q20'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_3539['Q20'].value_counts().keys():\n        y5.append(df_3539['Q20'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_4044['Q20'].value_counts().keys():\n        y6.append(df_4044['Q20'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_4549['Q20'].value_counts().keys():\n        y7.append(df_4549['Q20'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_5054['Q20'].value_counts().keys():\n        y8.append(df_5054['Q20'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_5559['Q20'].value_counts().keys():\n        y9.append(df_5559['Q20'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_6069['Q20'].value_counts().keys():\n        y10.append(df_6069['Q20'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_70['Q20'].value_counts().keys():\n        y11.append(df_70['Q20'].value_counts()[j])\n    else:\n        y11.append(0)\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs Current Employer Industry\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=6000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Employer Inustry',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","d0a98a8e":"df['Q21'].value_counts()","31c7d993":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q21'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_1821['Q21'].value_counts().keys():\n        y1.append(df_1821['Q21'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2224['Q21'].value_counts().keys():\n        y2.append(df_2224['Q21'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2529['Q21'].value_counts().keys():\n        y3.append(df_2529['Q21'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_3034['Q21'].value_counts().keys():\n        y4.append(df_3034['Q21'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_3539['Q21'].value_counts().keys():\n        y5.append(df_3539['Q21'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_4044['Q21'].value_counts().keys():\n        y6.append(df_4044['Q21'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_4549['Q21'].value_counts().keys():\n        y7.append(df_4549['Q21'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_5054['Q21'].value_counts().keys():\n        y8.append(df_5054['Q21'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_5559['Q21'].value_counts().keys():\n        y9.append(df_5559['Q21'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_6069['Q21'].value_counts().keys():\n        y10.append(df_6069['Q21'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_70['Q21'].value_counts().keys():\n        y11.append(df_70['Q21'].value_counts()[j])\n    else:\n        y11.append(0)\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs Size of comapny\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Company Size',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","7d2efd2a":"df['Q22'].value_counts()","61cffc2f":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q22'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_1821['Q22'].value_counts().keys():\n        y1.append(df_1821['Q22'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2224['Q22'].value_counts().keys():\n        y2.append(df_2224['Q22'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2529['Q22'].value_counts().keys():\n        y3.append(df_2529['Q22'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_3034['Q22'].value_counts().keys():\n        y4.append(df_3034['Q22'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_3539['Q22'].value_counts().keys():\n        y5.append(df_3539['Q22'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_4044['Q22'].value_counts().keys():\n        y6.append(df_4044['Q22'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_4549['Q22'].value_counts().keys():\n        y7.append(df_4549['Q22'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_5054['Q22'].value_counts().keys():\n        y8.append(df_5054['Q22'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_5559['Q22'].value_counts().keys():\n        y9.append(df_5559['Q22'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_6069['Q22'].value_counts().keys():\n        y10.append(df_6069['Q22'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_70['Q22'].value_counts().keys():\n        y11.append(df_70['Q22'].value_counts()[j])\n    else:\n        y11.append(0)\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs individuals responsible for data science role at their company\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Individuals responsible for data science role at their company',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","97357ac0":"df['Q23'].value_counts()","00c9adeb":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q23'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_1821['Q23'].value_counts().keys():\n        y1.append(df_1821['Q23'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2224['Q23'].value_counts().keys():\n        y2.append(df_2224['Q23'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2529['Q23'].value_counts().keys():\n        y3.append(df_2529['Q23'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_3034['Q23'].value_counts().keys():\n        y4.append(df_3034['Q23'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_3539['Q23'].value_counts().keys():\n        y5.append(df_3539['Q23'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_4044['Q23'].value_counts().keys():\n        y6.append(df_4044['Q23'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_4549['Q23'].value_counts().keys():\n        y7.append(df_4549['Q23'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_5054['Q23'].value_counts().keys():\n        y8.append(df_5054['Q23'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_5559['Q23'].value_counts().keys():\n        y9.append(df_5559['Q23'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_6069['Q23'].value_counts().keys():\n        y10.append(df_6069['Q23'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_70['Q23'].value_counts().keys():\n        y11.append(df_70['Q23'].value_counts()[j])\n    else:\n        y11.append(0)\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs usage of ML methods in their company\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3000,\n                   height=900,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='usage of ML methods in their company',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","d350412e":"df['Q25'].value_counts()","b646da38":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q25'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_1821['Q25'].value_counts().keys():\n        y1.append(df_1821['Q25'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2224['Q25'].value_counts().keys():\n        y2.append(df_2224['Q25'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2529['Q25'].value_counts().keys():\n        y3.append(df_2529['Q25'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_3034['Q25'].value_counts().keys():\n        y4.append(df_3034['Q25'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_3539['Q25'].value_counts().keys():\n        y5.append(df_3539['Q25'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_4044['Q25'].value_counts().keys():\n        y6.append(df_4044['Q25'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_4549['Q25'].value_counts().keys():\n        y7.append(df_4549['Q25'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_5054['Q25'].value_counts().keys():\n        y8.append(df_5054['Q25'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_5559['Q25'].value_counts().keys():\n        y9.append(df_5559['Q25'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_6069['Q25'].value_counts().keys():\n        y10.append(df_6069['Q25'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_70['Q25'].value_counts().keys():\n        y11.append(df_70['Q25'].value_counts()[j])\n    else:\n        y11.append(0)\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs Yearly Compensation\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=7000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Yearly Compensation In USD',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","67930cff":"df['Q26'].value_counts()","af058751":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q26'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_1821['Q26'].value_counts().keys():\n        y1.append(df_1821['Q26'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2224['Q26'].value_counts().keys():\n        y2.append(df_2224['Q26'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2529['Q26'].value_counts().keys():\n        y3.append(df_2529['Q26'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_3034['Q26'].value_counts().keys():\n        y4.append(df_3034['Q26'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_3539['Q26'].value_counts().keys():\n        y5.append(df_3539['Q26'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_4044['Q26'].value_counts().keys():\n        y6.append(df_4044['Q26'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_4549['Q26'].value_counts().keys():\n        y7.append(df_4549['Q26'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_5054['Q26'].value_counts().keys():\n        y8.append(df_5054['Q26'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_5559['Q26'].value_counts().keys():\n        y9.append(df_5559['Q26'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_6069['Q26'].value_counts().keys():\n        y10.append(df_6069['Q26'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_70['Q26'].value_counts().keys():\n        y11.append(df_70['Q26'].value_counts()[j])\n    else:\n        y11.append(0)\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs money spent to learn ML\/cloud computing services in past 5 years\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='money spent to learn ML\/cloud computing services in past 5 years In USD',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","4b0c50e1":"df['Q28'].value_counts()","149ebe5c":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q28'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_1821['Q28'].value_counts().keys():\n        y1.append(df_1821['Q28'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2224['Q28'].value_counts().keys():\n        y2.append(df_2224['Q28'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2529['Q28'].value_counts().keys():\n        y3.append(df_2529['Q28'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_3034['Q28'].value_counts().keys():\n        y4.append(df_3034['Q28'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_3539['Q28'].value_counts().keys():\n        y5.append(df_3539['Q28'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_4044['Q28'].value_counts().keys():\n        y6.append(df_4044['Q28'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_4549['Q28'].value_counts().keys():\n        y7.append(df_4549['Q28'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_5054['Q28'].value_counts().keys():\n        y8.append(df_5054['Q28'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_5559['Q28'].value_counts().keys():\n        y9.append(df_5559['Q28'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_6069['Q28'].value_counts().keys():\n        y10.append(df_6069['Q28'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_70['Q28'].value_counts().keys():\n        y11.append(df_70['Q28'].value_counts()[j])\n    else:\n        y11.append(0)\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs Clod platform with best developer experience\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=5000,\n                   height=900,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Cloud Platform Name',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","76faea97":"df['Q33'].value_counts()","80801412":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q33'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_1821['Q33'].value_counts().keys():\n        y1.append(df_1821['Q33'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2224['Q33'].value_counts().keys():\n        y2.append(df_2224['Q33'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2529['Q33'].value_counts().keys():\n        y3.append(df_2529['Q33'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_3034['Q33'].value_counts().keys():\n        y4.append(df_3034['Q33'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_3539['Q33'].value_counts().keys():\n        y5.append(df_3539['Q33'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_4044['Q33'].value_counts().keys():\n        y6.append(df_4044['Q33'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_4549['Q33'].value_counts().keys():\n        y7.append(df_4549['Q33'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_5054['Q33'].value_counts().keys():\n        y8.append(df_5054['Q33'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_5559['Q33'].value_counts().keys():\n        y9.append(df_5559['Q33'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_6069['Q33'].value_counts().keys():\n        y10.append(df_6069['Q33'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_70['Q33'].value_counts().keys():\n        y11.append(df_70['Q33'].value_counts()[j])\n    else:\n        y11.append(0)\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs Big data products they use often\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=5000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Big Data Products',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","22ebc5ff":"df['Q35'].value_counts()","cec5e049":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q35'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_1821['Q35'].value_counts().keys():\n        y1.append(df_1821['Q35'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2224['Q35'].value_counts().keys():\n        y2.append(df_2224['Q35'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2529['Q35'].value_counts().keys():\n        y3.append(df_2529['Q35'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_3034['Q35'].value_counts().keys():\n        y4.append(df_3034['Q35'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_3539['Q35'].value_counts().keys():\n        y5.append(df_3539['Q35'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_4044['Q35'].value_counts().keys():\n        y6.append(df_4044['Q35'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_4549['Q35'].value_counts().keys():\n        y7.append(df_4549['Q35'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_5054['Q35'].value_counts().keys():\n        y8.append(df_5054['Q35'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_5559['Q35'].value_counts().keys():\n        y9.append(df_5559['Q35'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_6069['Q35'].value_counts().keys():\n        y10.append(df_6069['Q35'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_70['Q35'].value_counts().keys():\n        y11.append(df_70['Q35'].value_counts()[j])\n    else:\n        y11.append(0)\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs Business Intelligence tools they use often\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=4000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Business Intelligence tools',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","dcbdf17b":"df['Q41'].value_counts()","e7ea4af4":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q41'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_1821['Q41'].value_counts().keys():\n        y1.append(df_1821['Q41'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2224['Q41'].value_counts().keys():\n        y2.append(df_2224['Q41'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2529['Q41'].value_counts().keys():\n        y3.append(df_2529['Q41'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_3034['Q41'].value_counts().keys():\n        y4.append(df_3034['Q41'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_3539['Q41'].value_counts().keys():\n        y5.append(df_3539['Q41'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_4044['Q41'].value_counts().keys():\n        y6.append(df_4044['Q41'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_4549['Q41'].value_counts().keys():\n        y7.append(df_4549['Q41'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_5054['Q41'].value_counts().keys():\n        y8.append(df_5054['Q41'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_5559['Q41'].value_counts().keys():\n        y9.append(df_5559['Q41'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_6069['Q41'].value_counts().keys():\n        y10.append(df_6069['Q41'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_70['Q41'].value_counts().keys():\n        y11.append(df_70['Q41'].value_counts()[j])\n    else:\n        y11.append(0)\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Age vs Primary tool used most often\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=2000,\n                   height=900,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Primary Tool',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","01c2e8a3":"df['Q7_Part_1'].value_counts()","04e7f26b":"df['Q7_Part_2'].value_counts()","a7984d92":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = ['Python','R']\ny1 = []\ny1.append(df_1821['Q7_Part_1'].value_counts()[0])\ny1.append(df_1821['Q7_Part_2'].value_counts()[0])\n\ny2 = []\ny2.append(df_2224['Q7_Part_1'].value_counts()[0])\ny2.append(df_2224['Q7_Part_2'].value_counts()[0])\n\ny3 = []\ny3.append(df_2529['Q7_Part_1'].value_counts()[0])\ny3.append(df_2529['Q7_Part_2'].value_counts()[0])\n\ny4 = []\ny4.append(df_3034['Q7_Part_1'].value_counts()[0])\ny4.append(df_3034['Q7_Part_2'].value_counts()[0])\n\ny5 = []\ny5.append(df_3539['Q7_Part_1'].value_counts()[0])\ny5.append(df_3539['Q7_Part_2'].value_counts()[0])\n\ny6 = []\ny6.append(df_4044['Q7_Part_1'].value_counts()[0])\ny6.append(df_4044['Q7_Part_2'].value_counts()[0])\n\ny7 = []\ny7.append(df_4549['Q7_Part_1'].value_counts()[0])\ny7.append(df_4549['Q7_Part_2'].value_counts()[0])\n\ny8 = []\ny8.append(df_5054['Q7_Part_1'].value_counts()[0])\ny8.append(df_5054['Q7_Part_2'].value_counts()[0])\n\ny9 = []\ny9.append(df_5559['Q7_Part_1'].value_counts()[0])\ny9.append(df_5559['Q7_Part_2'].value_counts()[0])\n\ny10 = []\ny10.append(df_6069['Q7_Part_1'].value_counts()[0])\ny10.append(df_6069['Q7_Part_2'].value_counts()[0])\n\ny11 = []\ny11.append(df_70['Q7_Part_1'].value_counts()[0])\ny11.append(df_70['Q7_Part_2'].value_counts()[0])\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Python vs R age wise\",x=0.5,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=1200,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Programming Language',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","43698c5b":"df['Q16_Part_1'].value_counts()","8bd8373a":"df['Q16_Part_2'].value_counts()","94b13c9f":"df['Q16_Part_3'].value_counts()","756e1dbc":"df['Q16_Part_4'].value_counts()","d0a0162d":"df['Q16_Part_7'].value_counts()","1af1c723":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = ['Scikit-learn','TensorFlow','Keras','PyTorch','Xgboost']\ny1 = []\ny1.append(df_1821['Q16_Part_1'].value_counts()[0])\ny1.append(df_1821['Q16_Part_2'].value_counts()[0])\ny1.append(df_1821['Q16_Part_3'].value_counts()[0])\ny1.append(df_1821['Q16_Part_4'].value_counts()[0])\ny1.append(df_1821['Q16_Part_7'].value_counts()[0])\n\ny2 = []\ny2.append(df_2224['Q16_Part_1'].value_counts()[0])\ny2.append(df_2224['Q16_Part_2'].value_counts()[0])\ny2.append(df_2224['Q16_Part_3'].value_counts()[0])\ny2.append(df_2224['Q16_Part_4'].value_counts()[0])\ny2.append(df_2224['Q16_Part_7'].value_counts()[0])\n\ny3 = []\ny3.append(df_2529['Q16_Part_1'].value_counts()[0])\ny3.append(df_2529['Q16_Part_2'].value_counts()[0])\ny3.append(df_2529['Q16_Part_3'].value_counts()[0])\ny3.append(df_2529['Q16_Part_4'].value_counts()[0])\ny3.append(df_2529['Q16_Part_7'].value_counts()[0])\n\ny4 = []\ny4.append(df_3034['Q16_Part_1'].value_counts()[0])\ny4.append(df_3034['Q16_Part_2'].value_counts()[0])\ny4.append(df_3034['Q16_Part_3'].value_counts()[0])\ny4.append(df_3034['Q16_Part_4'].value_counts()[0])\ny4.append(df_3034['Q16_Part_7'].value_counts()[0])\n\ny5 = []\ny5.append(df_3539['Q16_Part_1'].value_counts()[0])\ny5.append(df_3539['Q16_Part_2'].value_counts()[0])\ny5.append(df_3539['Q16_Part_3'].value_counts()[0])\ny5.append(df_3539['Q16_Part_4'].value_counts()[0])\ny5.append(df_3539['Q16_Part_7'].value_counts()[0])\n\ny6 = []\ny6.append(df_4044['Q16_Part_1'].value_counts()[0])\ny6.append(df_4044['Q16_Part_2'].value_counts()[0])\ny6.append(df_4044['Q16_Part_3'].value_counts()[0])\ny6.append(df_4044['Q16_Part_4'].value_counts()[0])\ny6.append(df_4044['Q16_Part_7'].value_counts()[0])\n\ny7 = []\ny7.append(df_4549['Q16_Part_1'].value_counts()[0])\ny7.append(df_4549['Q16_Part_2'].value_counts()[0])\ny7.append(df_4549['Q16_Part_3'].value_counts()[0])\ny7.append(df_4549['Q16_Part_4'].value_counts()[0])\ny7.append(df_4549['Q16_Part_7'].value_counts()[0])\n\ny8 = []\ny8.append(df_5054['Q16_Part_1'].value_counts()[0])\ny8.append(df_5054['Q16_Part_2'].value_counts()[0])\ny8.append(df_5054['Q16_Part_3'].value_counts()[0])\ny8.append(df_5054['Q16_Part_4'].value_counts()[0])\ny8.append(df_5054['Q16_Part_7'].value_counts()[0])\n\ny9 = []\ny9.append(df_5559['Q16_Part_1'].value_counts()[0])\ny9.append(df_5559['Q16_Part_2'].value_counts()[0])\ny9.append(df_5559['Q16_Part_3'].value_counts()[0])\ny9.append(df_5559['Q16_Part_4'].value_counts()[0])\ny9.append(df_5559['Q16_Part_7'].value_counts()[0])\n\ny10 = []\ny10.append(df_6069['Q16_Part_1'].value_counts()[0])\ny10.append(df_6069['Q16_Part_2'].value_counts()[0])\ny10.append(df_6069['Q16_Part_3'].value_counts()[0])\ny10.append(df_6069['Q16_Part_4'].value_counts()[0])\ny10.append(df_6069['Q16_Part_7'].value_counts()[0])\n\ny11 = []\ny11.append(df_70['Q16_Part_1'].value_counts()[0])\ny11.append(df_70['Q16_Part_2'].value_counts()[0])\ny11.append(df_70['Q16_Part_3'].value_counts()[0])\ny11.append(df_70['Q16_Part_4'].value_counts()[0])\ny11.append(df_70['Q16_Part_7'].value_counts()[0])\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Most used ML library age wise\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=2000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Library Name',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","022f3f0f":"df['Q17_Part_1'].value_counts()","35d3fa16":"df['Q17_Part_2'].value_counts()","fd2e645c":"df['Q17_Part_3'].value_counts()","8a379173":"df['Q17_Part_7'].value_counts()","714d6765":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = ['Linear or Logistic Regression','Decision Trees or Random Forests','Gradient Boosting Machines (xgboost, lightgbm, etc)','Convolutional Neural Networks']\ny1 = []\ny1.append(df_1821['Q17_Part_1'].value_counts()[0])\ny1.append(df_1821['Q17_Part_2'].value_counts()[0])\ny1.append(df_1821['Q17_Part_3'].value_counts()[0])\ny1.append(df_1821['Q17_Part_7'].value_counts()[0])\n\ny2 = []\ny2.append(df_2224['Q17_Part_1'].value_counts()[0])\ny2.append(df_2224['Q17_Part_2'].value_counts()[0])\ny2.append(df_2224['Q17_Part_3'].value_counts()[0])\ny2.append(df_2224['Q17_Part_7'].value_counts()[0])\n\ny3 = []\ny3.append(df_2529['Q17_Part_1'].value_counts()[0])\ny3.append(df_2529['Q17_Part_2'].value_counts()[0])\ny3.append(df_2529['Q17_Part_3'].value_counts()[0])\ny3.append(df_2529['Q17_Part_7'].value_counts()[0])\n\ny4 = []\ny4.append(df_3034['Q17_Part_1'].value_counts()[0])\ny4.append(df_3034['Q17_Part_2'].value_counts()[0])\ny4.append(df_3034['Q17_Part_3'].value_counts()[0])\ny4.append(df_3034['Q17_Part_7'].value_counts()[0])\n\ny5 = []\ny5.append(df_3539['Q17_Part_1'].value_counts()[0])\ny5.append(df_3539['Q17_Part_2'].value_counts()[0])\ny5.append(df_3539['Q17_Part_3'].value_counts()[0])\ny5.append(df_3539['Q17_Part_7'].value_counts()[0])\n\ny6 = []\ny6.append(df_4044['Q17_Part_1'].value_counts()[0])\ny6.append(df_4044['Q17_Part_2'].value_counts()[0])\ny6.append(df_4044['Q17_Part_3'].value_counts()[0])\ny6.append(df_4044['Q17_Part_7'].value_counts()[0])\n\ny7 = []\ny7.append(df_4549['Q17_Part_1'].value_counts()[0])\ny7.append(df_4549['Q17_Part_2'].value_counts()[0])\ny7.append(df_4549['Q17_Part_3'].value_counts()[0])\ny7.append(df_4549['Q17_Part_7'].value_counts()[0])\n\ny8 = []\ny8.append(df_5054['Q17_Part_1'].value_counts()[0])\ny8.append(df_5054['Q17_Part_2'].value_counts()[0])\ny8.append(df_5054['Q17_Part_3'].value_counts()[0])\ny8.append(df_5054['Q17_Part_7'].value_counts()[0])\n\ny9 = []\ny9.append(df_5559['Q17_Part_1'].value_counts()[0])\ny9.append(df_5559['Q17_Part_2'].value_counts()[0])\ny9.append(df_5559['Q17_Part_3'].value_counts()[0])\ny9.append(df_5559['Q17_Part_7'].value_counts()[0])\n\ny10 = []\ny10.append(df_6069['Q17_Part_1'].value_counts()[0])\ny10.append(df_6069['Q17_Part_2'].value_counts()[0])\ny10.append(df_6069['Q17_Part_3'].value_counts()[0])\ny10.append(df_6069['Q17_Part_7'].value_counts()[0])\n\ny11 = []\ny11.append(df_70['Q17_Part_1'].value_counts()[0])\ny11.append(df_70['Q17_Part_2'].value_counts()[0])\ny11.append(df_70['Q17_Part_3'].value_counts()[0])\ny11.append(df_70['Q17_Part_7'].value_counts()[0])\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = '18-21 age group',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = '22-24 age group',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = '25-29 age group',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = '30-34 age group',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = '35-39 age group',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = '40-44 age group',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = '45-49 age group',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = '50-54 age group',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = '55-59 age group',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = '60-69 age group',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = '70+ age group',\n             text=y11,\n             textposition='auto'\n              )  \nlayout = go.Layout(\n                   title=dict(text = \"Most used ML Algorithm age wise\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=2000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Algorithm Name',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","66e285a4":"df_man = df[df['Q2'] == 'Man']\ndf_man","d1233734":"df_woman = df[df['Q2'] == 'Woman']\ndf_woman","44cdaea1":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q3'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_man['Q3'].value_counts().keys():\n        y1.append(df_man['Q3'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_woman['Q3'].value_counts().keys():\n        y2.append(df_woman['Q3'].value_counts()[j])\n    else:\n        y2.append(0)\n        \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Man',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Woman',\n             text=y2,\n             textposition='auto'\n              )    \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Gender vs country\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=4000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Country Name',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","7f4a97aa":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q4'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_man['Q4'].value_counts().keys():\n        y1.append(df_man['Q4'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_woman['Q4'].value_counts().keys():\n        y2.append(df_woman['Q4'].value_counts()[j])\n    else:\n        y2.append(0)\n        \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Man',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Woman',\n             text=y2,\n             textposition='auto'\n              )    \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Gender vs Degree\",x=0.5,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=1300,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Degree',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","d3b930e6":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q5'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_man['Q5'].value_counts().keys():\n        y1.append(df_man['Q5'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_woman['Q5'].value_counts().keys():\n        y2.append(df_woman['Q5'].value_counts()[j])\n    else:\n        y2.append(0)\n        \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Man',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Woman',\n             text=y2,\n             textposition='auto'\n              )    \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Gender vs Current role\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=1300,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Current Role',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","ad76595d":"df_man['Q6'].value_counts()","310bf9f0":"df_woman['Q6'].value_counts()","48b21ce7":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q6'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_man['Q6'].value_counts().keys():\n        y1.append(df_man['Q6'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_woman['Q6'].value_counts().keys():\n        y2.append(df_woman['Q6'].value_counts()[j])\n    else:\n        y2.append(0)\n        \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Man',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Woman',\n             text=y2,\n             textposition='auto'\n              )    \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Gender vs Coding Experience\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=1300,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Years',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","7145512b":"df_man['Q8'].value_counts()","75c14551":"df_woman['Q8'].value_counts()","33562741":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q8'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_man['Q8'].value_counts().keys():\n        y1.append(df_man['Q8'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_woman['Q8'].value_counts().keys():\n        y2.append(df_woman['Q8'].value_counts()[j])\n    else:\n        y2.append(0)\n        \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Man',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Woman',\n             text=y2,\n             textposition='auto'\n              )    \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Gender vs Programming Lamguage Recommended\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=1300,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Programming Language',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","5f8ef14d":"df_man['Q20'].value_counts()","00a1a94e":"df_woman['Q20'].value_counts()","51f117a4":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q20'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_man['Q20'].value_counts().keys():\n        y1.append(df_man['Q20'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_woman['Q20'].value_counts().keys():\n        y2.append(df_woman['Q20'].value_counts()[j])\n    else:\n        y2.append(0)\n        \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Man',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Woman',\n             text=y2,\n             textposition='auto'\n              )    \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Gender vs Current Employer\/contract\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=1300,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Gender vs Current Employer Contract',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","c40813ea":"df_man['Q25'].value_counts()","0c573aae":"df_woman['Q25'].value_counts()","f4c17fc5":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q25'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_man['Q25'].value_counts().keys():\n        y1.append(df_man['Q25'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_woman['Q25'].value_counts().keys():\n        y2.append(df_woman['Q25'].value_counts()[j])\n    else:\n        y2.append(0)\n        \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Man',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Woman',\n             text=y2,\n             textposition='auto'\n              )    \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Gender vs Yearly Compensation\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=1300,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Compensation in USD',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","d79f78c3":"df['Q7_Part_1'].value_counts()","ede4e974":"df['Q7_Part_2'].value_counts()","acfb40ec":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = ['Python','R']\ny1 = []\ny1.append(df_man['Q7_Part_1'].value_counts()[0])\ny1.append(df_man['Q7_Part_2'].value_counts()[0])\n\ny2 = []\ny2.append(df_woman['Q7_Part_1'].value_counts()[0])\ny2.append(df_woman['Q7_Part_2'].value_counts()[0])\n\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Man',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Woman',\n             text=y2,\n             textposition='auto'\n              )    \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Python vs R gender wise\",x=0.5,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=1200,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n                   xaxis=dict(\n                               title='Programming Language',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","57ecc2ac":"df['Q4'].value_counts()","2d63a7d7":"df_MD = df[df['Q4'] == 'Master\u2019s degree']\ndf_MD","c235e0cb":"df_BD = df[df['Q4'] == 'Bachelor\u2019s degree']\ndf_BD","42af26b0":"df_DD = df[df['Q4'] == 'Doctoral degree']\ndf_DD","daaa84be":"df_NBD = df[df['Q4'] == \"Some college\/university study without earning a bachelor\u2019s degree\"]\ndf_NBD","4c6fb202":"df_NA = df[df['Q4'] == 'I prefer not to answer']\ndf_NA","e73a648d":"df_HS = df[df['Q4'] == 'No formal education past high school']\ndf_HS","69d6821c":"df_PD = df[df['Q4'] == 'Professional doctorate']\ndf_PD","ecce2b3d":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q3'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_BD['Q3'].value_counts().keys():\n        y1.append(df_BD['Q3'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DD['Q3'].value_counts().keys():\n        y2.append(df_DD['Q3'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_HS['Q3'].value_counts().keys():\n        y3.append(df_HS['Q3'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_MD['Q3'].value_counts().keys():\n        y4.append(df_MD['Q3'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_NA['Q3'].value_counts().keys():\n        y5.append(df_NA['Q3'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NBD['Q3'].value_counts().keys():\n        y6.append(df_NBD['Q3'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_PD['Q3'].value_counts().keys():\n        y7.append(df_PD['Q3'].value_counts()[j])\n    else:\n        y7.append(0)\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Bachelor Degree',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Doctoral degree',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'No formal education past high school',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = 'Masters Degree',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'I prefer not to answer',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = 'Some college\/university study without earning a bachelor\u2019s degree',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name ='Professional doctorate',\n             text=y7,\n             textposition='auto'\n              )  \n\nlayout = go.Layout(\n                   title=dict(text = \"Degree vs country\",x=0,y=0.95,font_size=25), \n                   barmode = 'stack',\n                   width=3600,\n                   height=1000,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Country',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","6bbfb5c5":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q5'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_BD['Q5'].value_counts().keys():\n        y1.append(df_BD['Q5'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DD['Q5'].value_counts().keys():\n        y2.append(df_DD['Q5'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_HS['Q5'].value_counts().keys():\n        y3.append(df_HS['Q5'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_MD['Q5'].value_counts().keys():\n        y4.append(df_MD['Q5'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_NA['Q5'].value_counts().keys():\n        y5.append(df_NA['Q5'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NBD['Q5'].value_counts().keys():\n        y6.append(df_NBD['Q5'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_PD['Q5'].value_counts().keys():\n        y7.append(df_PD['Q5'].value_counts()[j])\n    else:\n        y7.append(0)\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Bachelor Degree',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Doctoral degree',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'No formal education past high school',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = 'Masters Degree',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'I prefer not to answer',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = 'Some college\/university study without earning a bachelor\u2019s degree',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name ='Professional doctorate',\n             text=y7,\n             textposition='auto'\n              )  \n\nlayout = go.Layout(\n                   title=dict(text = \"Degree vs Current Employement Role\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3600,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Employement Role',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","863143b5":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q6'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_BD['Q6'].value_counts().keys():\n        y1.append(df_BD['Q6'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DD['Q6'].value_counts().keys():\n        y2.append(df_DD['Q6'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_HS['Q6'].value_counts().keys():\n        y3.append(df_HS['Q6'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_MD['Q6'].value_counts().keys():\n        y4.append(df_MD['Q6'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_NA['Q6'].value_counts().keys():\n        y5.append(df_NA['Q6'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NBD['Q6'].value_counts().keys():\n        y6.append(df_NBD['Q6'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_PD['Q6'].value_counts().keys():\n        y7.append(df_PD['Q6'].value_counts()[j])\n    else:\n        y7.append(0)\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Bachelor Degree',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Doctoral degree',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'No formal education past high school',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = 'Masters Degree',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'I prefer not to answer',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = 'Some college\/university study without earning a bachelor\u2019s degree',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name ='Professional doctorate',\n             text=y7,\n             textposition='auto'\n              )  \n\nlayout = go.Layout(\n                   title=dict(text = \"Degree vs Coding Experience\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3600,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Years',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","77c89856":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q8'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_BD['Q8'].value_counts().keys():\n        y1.append(df_BD['Q8'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DD['Q8'].value_counts().keys():\n        y2.append(df_DD['Q8'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_HS['Q8'].value_counts().keys():\n        y3.append(df_HS['Q8'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_MD['Q8'].value_counts().keys():\n        y4.append(df_MD['Q8'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_NA['Q8'].value_counts().keys():\n        y5.append(df_NA['Q8'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NBD['Q8'].value_counts().keys():\n        y6.append(df_NBD['Q8'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_PD['Q8'].value_counts().keys():\n        y7.append(df_PD['Q8'].value_counts()[j])\n    else:\n        y7.append(0)\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Bachelor Degree',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Doctoral degree',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'No formal education past high school',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = 'Masters Degree',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'I prefer not to answer',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = 'Some college\/university study without earning a bachelor\u2019s degree',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name ='Professional doctorate',\n             text=y7,\n             textposition='auto'\n              )  \n\nlayout = go.Layout(\n                   title=dict(text = \"Degree vs Programming Language Recommended for aspiring Data Scientist\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3600,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Programming Language',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","ef564dbb":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q11'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_BD['Q11'].value_counts().keys():\n        y1.append(df_BD['Q11'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DD['Q11'].value_counts().keys():\n        y2.append(df_DD['Q11'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_HS['Q11'].value_counts().keys():\n        y3.append(df_HS['Q11'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_MD['Q11'].value_counts().keys():\n        y4.append(df_MD['Q11'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_NA['Q11'].value_counts().keys():\n        y5.append(df_NA['Q11'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NBD['Q11'].value_counts().keys():\n        y6.append(df_NBD['Q11'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_PD['Q11'].value_counts().keys():\n        y7.append(df_PD['Q11'].value_counts()[j])\n    else:\n        y7.append(0)\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Bachelor Degree',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Doctoral degree',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'No formal education past high school',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = 'Masters Degree',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'I prefer not to answer',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = 'Some college\/university study without earning a bachelor\u2019s degree',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name ='Professional doctorate',\n             text=y7,\n             textposition='auto'\n              )  \n\nlayout = go.Layout(\n                   title=dict(text = \"Degree vs Computing Platform used in data science projects\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3600,\n                   height=900,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Compuing Platforms',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","0466b7d7":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q15'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_BD['Q15'].value_counts().keys():\n        y1.append(df_BD['Q15'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DD['Q15'].value_counts().keys():\n        y2.append(df_DD['Q15'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_HS['Q15'].value_counts().keys():\n        y3.append(df_HS['Q15'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_MD['Q15'].value_counts().keys():\n        y4.append(df_MD['Q15'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_NA['Q15'].value_counts().keys():\n        y5.append(df_NA['Q15'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NBD['Q15'].value_counts().keys():\n        y6.append(df_NBD['Q15'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_PD['Q15'].value_counts().keys():\n        y7.append(df_PD['Q15'].value_counts()[j])\n    else:\n        y7.append(0)\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Bachelor Degree',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Doctoral degree',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'No formal education past high school',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = 'Masters Degree',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'I prefer not to answer',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = 'Some college\/university study without earning a bachelor\u2019s degree',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name ='Professional doctorate',\n             text=y7,\n             textposition='auto'\n              )  \n\nlayout = go.Layout(\n                   title=dict(text = \"Degree vs Machine learning models used\",x=0.5,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3600,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Count of times ML models used',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","4e236fcd":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q20'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_BD['Q20'].value_counts().keys():\n        y1.append(df_BD['Q20'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DD['Q20'].value_counts().keys():\n        y2.append(df_DD['Q20'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_HS['Q20'].value_counts().keys():\n        y3.append(df_HS['Q20'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_MD['Q20'].value_counts().keys():\n        y4.append(df_MD['Q20'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_NA['Q20'].value_counts().keys():\n        y5.append(df_NA['Q20'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NBD['Q20'].value_counts().keys():\n        y6.append(df_NBD['Q20'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_PD['Q20'].value_counts().keys():\n        y7.append(df_PD['Q20'].value_counts()[j])\n    else:\n        y7.append(0)\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Bachelor Degree',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Doctoral degree',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'No formal education past high school',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = 'Masters Degree',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'I prefer not to answer',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = 'Some college\/university study without earning a bachelor\u2019s degree',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name ='Professional doctorate',\n             text=y7,\n             textposition='auto'\n              )  \n\nlayout = go.Layout(\n                   title=dict(text = \"Degree vs Current Employer\/ Contract\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3600,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Current Employer\/Contract',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","2f850e84":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q25'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_BD['Q25'].value_counts().keys():\n        y1.append(df_BD['Q25'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DD['Q25'].value_counts().keys():\n        y2.append(df_DD['Q25'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_HS['Q25'].value_counts().keys():\n        y3.append(df_HS['Q25'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_MD['Q25'].value_counts().keys():\n        y4.append(df_MD['Q25'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_NA['Q25'].value_counts().keys():\n        y5.append(df_NA['Q25'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NBD['Q25'].value_counts().keys():\n        y6.append(df_NBD['Q25'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_PD['Q25'].value_counts().keys():\n        y7.append(df_PD['Q25'].value_counts()[j])\n    else:\n        y7.append(0)\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Bachelor Degree',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Doctoral degree',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'No formal education past high school',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = 'Masters Degree',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'I prefer not to answer',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = 'Some college\/university study without earning a bachelor\u2019s degree',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name ='Professional doctorate',\n             text=y7,\n             textposition='auto'\n              )  \n\nlayout = go.Layout(\n                   title=dict(text = \"Degree vs Yearly Compensation\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=4000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Compensation (USD)',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","f65fe019":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q22'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_BD['Q22'].value_counts().keys():\n        y1.append(df_BD['Q22'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DD['Q22'].value_counts().keys():\n        y2.append(df_DD['Q22'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_HS['Q22'].value_counts().keys():\n        y3.append(df_HS['Q22'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_MD['Q22'].value_counts().keys():\n        y4.append(df_MD['Q22'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_NA['Q22'].value_counts().keys():\n        y5.append(df_NA['Q22'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NBD['Q22'].value_counts().keys():\n        y6.append(df_NBD['Q22'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_PD['Q22'].value_counts().keys():\n        y7.append(df_PD['Q22'].value_counts()[j])\n    else:\n        y7.append(0)\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Bachelor Degree',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Doctoral degree',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'No formal education past high school',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = 'Masters Degree',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'I prefer not to answer',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = 'Some college\/university study without earning a bachelor\u2019s degree',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name ='Professional doctorate',\n             text=y7,\n             textposition='auto'\n              )  \n\nlayout = go.Layout(\n                   title=dict(text = \"Degree vs Individuals Responible for Data Science at their business\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Count of Employees',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","8ef9a21f":"df['Q7_Part_1'].value_counts()","5895c436":"df['Q7_Part_2'].value_counts()","fc7919ba":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = ['Python','R']\ny1 = []\ny1.append(df_BD['Q7_Part_1'].value_counts()[0])\ny1.append(df_BD['Q7_Part_2'].value_counts()[0])\n\ny2 = []\ny2.append(df_DD['Q7_Part_1'].value_counts()[0])\ny2.append(df_DD['Q7_Part_2'].value_counts()[0])\n\ny3 = []\ny3.append(df_HS['Q7_Part_1'].value_counts()[0])\ny3.append(df_HS['Q7_Part_2'].value_counts()[0])\n\ny4 = []\ny4.append(df_MD['Q7_Part_1'].value_counts()[0])\ny4.append(df_MD['Q7_Part_2'].value_counts()[0])\n\ny5 = []\ny5.append(df_NA['Q7_Part_1'].value_counts()[0])\ny5.append(df_NA['Q7_Part_2'].value_counts()[0])\n\ny6 = []\ny6.append(df_NBD['Q7_Part_1'].value_counts()[0])\ny6.append(df_NBD['Q7_Part_2'].value_counts()[0])\n\ny7 = []\ny7.append(df_PD['Q7_Part_1'].value_counts()[0])\ny7.append(df_PD['Q7_Part_2'].value_counts()[0])\n\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Bachelor Degree',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Doctoral degree',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'No formal education past high school',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = 'Masters Degree',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'I prefer not to answer',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = 'Some college\/university study without earning a bachelor\u2019s degree',\n             text=y6,\n             textposition='auto'\n              )  \ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name ='Professional doctorate',\n             text=y7,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Python vs R degree wise\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=1200,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Programming Language',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","d7af4306":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = ['Scikit-learn','TensorFlow','Keras','PyTorch','Xgboost']\ny1 = []\ny1.append(df_BD['Q7_Part_1'].value_counts()[0])\ny1.append(df_BD['Q7_Part_2'].value_counts()[0])\ny1.append(df_BD['Q7_Part_3'].value_counts()[0])\ny1.append(df_BD['Q7_Part_4'].value_counts()[0])\ny1.append(df_BD['Q7_Part_7'].value_counts()[0])\n\ny2 = []\ny2.append(df_DD['Q7_Part_1'].value_counts()[0])\ny2.append(df_DD['Q7_Part_2'].value_counts()[0])\ny2.append(df_DD['Q7_Part_3'].value_counts()[0])\ny2.append(df_DD['Q7_Part_4'].value_counts()[0])\ny2.append(df_DD['Q7_Part_7'].value_counts()[0])\n\ny3 = []\ny3.append(df_HS['Q7_Part_1'].value_counts()[0])\ny3.append(df_HS['Q7_Part_2'].value_counts()[0])\ny3.append(df_HS['Q7_Part_3'].value_counts()[0])\ny3.append(df_HS['Q7_Part_4'].value_counts()[0])\ny3.append(df_HS['Q7_Part_7'].value_counts()[0])\n\ny4 = []\ny4.append(df_MD['Q7_Part_1'].value_counts()[0])\ny4.append(df_MD['Q7_Part_2'].value_counts()[0])\ny4.append(df_MD['Q7_Part_3'].value_counts()[0])\ny4.append(df_MD['Q7_Part_4'].value_counts()[0])\ny4.append(df_MD['Q7_Part_7'].value_counts()[0])\n\ny5 = []\ny5.append(df_NA['Q7_Part_1'].value_counts()[0])\ny5.append(df_NA['Q7_Part_2'].value_counts()[0])\ny5.append(df_NA['Q7_Part_3'].value_counts()[0])\ny5.append(df_NA['Q7_Part_4'].value_counts()[0])\ny5.append(df_NA['Q7_Part_7'].value_counts()[0])\n\ny6 = []\ny6.append(df_NBD['Q7_Part_1'].value_counts()[0])\ny6.append(df_NBD['Q7_Part_2'].value_counts()[0])\ny6.append(df_NBD['Q7_Part_3'].value_counts()[0])\ny6.append(df_NBD['Q7_Part_4'].value_counts()[0])\ny6.append(df_NBD['Q7_Part_7'].value_counts()[0])\n\ny7 = []\ny7.append(df_PD['Q7_Part_1'].value_counts()[0])\ny7.append(df_PD['Q7_Part_2'].value_counts()[0])\ny7.append(df_PD['Q7_Part_3'].value_counts()[0])\ny7.append(df_PD['Q7_Part_4'].value_counts()[0])\ny7.append(df_PD['Q7_Part_7'].value_counts()[0])\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Bachelor Degree',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Doctoral degree',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'No formal education past high school',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = 'Masters Degree',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'I prefer not to answer',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = 'Some college\/university study without earning a bachelor\u2019s degree',\n             text=y6,\n             textposition='auto'\n              )  \ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name ='Professional doctorate',\n             text=y7,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Most used ML library age wise\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=1500,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Library Name',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","5bf89a42":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = ['Linear or Logistic Regression','Decision Trees or Random Forests','Gradient Boosting Machines (xgboost, lightgbm, etc)','Convolutional Neural Networks']\ny1 = []\ny1.append(df_BD['Q7_Part_1'].value_counts()[0])\ny1.append(df_BD['Q7_Part_2'].value_counts()[0])\ny1.append(df_BD['Q7_Part_3'].value_counts()[0])\ny1.append(df_BD['Q7_Part_7'].value_counts()[0])\n\ny2 = []\ny2.append(df_DD['Q7_Part_1'].value_counts()[0])\ny2.append(df_DD['Q7_Part_2'].value_counts()[0])\ny2.append(df_DD['Q7_Part_3'].value_counts()[0])\ny2.append(df_DD['Q7_Part_7'].value_counts()[0])\n\ny3 = []\ny3.append(df_HS['Q7_Part_1'].value_counts()[0])\ny3.append(df_HS['Q7_Part_2'].value_counts()[0])\ny3.append(df_HS['Q7_Part_3'].value_counts()[0])\ny3.append(df_HS['Q7_Part_7'].value_counts()[0])\n\ny4 = []\ny4.append(df_MD['Q7_Part_1'].value_counts()[0])\ny4.append(df_MD['Q7_Part_2'].value_counts()[0])\ny4.append(df_MD['Q7_Part_3'].value_counts()[0])\ny4.append(df_MD['Q7_Part_7'].value_counts()[0])\n\ny5 = []\ny5.append(df_NA['Q7_Part_1'].value_counts()[0])\ny5.append(df_NA['Q7_Part_2'].value_counts()[0])\ny5.append(df_NA['Q7_Part_3'].value_counts()[0])\ny5.append(df_NA['Q7_Part_7'].value_counts()[0])\n\ny6 = []\ny6.append(df_NBD['Q7_Part_1'].value_counts()[0])\ny6.append(df_NBD['Q7_Part_2'].value_counts()[0])\ny6.append(df_NBD['Q7_Part_3'].value_counts()[0])\ny6.append(df_NBD['Q7_Part_7'].value_counts()[0])\n\ny7 = []\ny7.append(df_PD['Q7_Part_1'].value_counts()[0])\ny7.append(df_PD['Q7_Part_2'].value_counts()[0])\ny7.append(df_PD['Q7_Part_3'].value_counts()[0])\ny7.append(df_PD['Q7_Part_7'].value_counts()[0])\n\ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Bachelor Degree',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name = 'Doctoral degree',\n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'No formal education past high school',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name = 'Masters Degree',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'I prefer not to answer',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name = 'Some college\/university study without earning a bachelor\u2019s degree',\n             text=y6,\n             textposition='auto'\n              )  \ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name ='Professional doctorate',\n             text=y7,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Most used ML Algorithm age wise\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=1500,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Algorithm Name',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","1b3e1a08":"df_student = df[df['Q5'] == 'Student']\ndf_student","9c6d81fd":"df_DS = df[df['Q5'] == 'Data Scientist']\ndf_DS","4e2663f8":"df_SE = df[df['Q5'] == 'Software Engineer']\ndf_SE","7d55775a":"df_Other = df[df['Q5'] == 'Other']\ndf_Other","493a489b":"df_DA = df[df['Q5'] == 'Data Analyst']\ndf_DA","96873ef7":"df_NE = df[df['Q5'] == 'Currently not employed']\ndf_NE","64d3d054":"df_RS = df[df['Q5'] == 'Research Scientist']\ndf_RS","be9a22c9":"df_ME = df[df['Q5'] == 'Machine Learning Engineer']\ndf_ME","66370584":"df_BA = df[df['Q5'] == 'Business Analyst']\ndf_BA","02210951":"df_PE = df[df['Q5'] == 'Program\/Project Manager']\ndf_PE","30e87b5c":"df_DE = df[df['Q5'] == 'Data Engineer']\ndf_DE","0cb89911":"df_PRM = df[df['Q5'] == 'Product Manager']\ndf_PRM","5785070f":"df_ST = df[df['Q5'] == 'Statistician']\ndf_ST","55d66c5f":"df_DBA = df[df['Q5'] == 'DBA\/Database Engineer']\ndf_DBA","3cb70f0c":"df_DR = df[df['Q5'] == 'Developer Relations\/Advocacy']\ndf_DR","213d5188":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q3'].value_counts().keys().tolist()\n\n\ny1 = []\nfor j in x:\n    if j in df_student['Q3'].value_counts().keys():\n        y1.append(df_student['Q3'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DS['Q3'].value_counts().keys():\n        y2.append(df_DS['Q3'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_SE['Q3'].value_counts().keys():\n        y3.append(df_SE['Q3'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_Other['Q3'].value_counts().keys():\n        y4.append(df_Other['Q3'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_DA['Q3'].value_counts().keys():\n        y5.append(df_DA['Q3'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NE['Q3'].value_counts().keys():\n        y6.append(df_NE['Q3'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_RS['Q3'].value_counts().keys():\n        y7.append(df_RS['Q3'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_ME['Q3'].value_counts().keys():\n        y8.append(df_ME['Q3'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_BA['Q3'].value_counts().keys():\n        y9.append(df_BA['Q3'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_PE['Q3'].value_counts().keys():\n        y10.append(df_PE['Q3'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_DE['Q3'].value_counts().keys():\n        y11.append(df_DE['Q3'].value_counts()[j])\n    else:\n        y11.append(0)\ny12 = []\nfor j in x:\n    if j in df_PRM['Q3'].value_counts().keys():\n        y12.append(df_PRM['Q3'].value_counts()[j])\n    else:\n        y12.append(0)\ny13 = []\nfor j in x:\n    if j in df_ST['Q3'].value_counts().keys():\n        y13.append(df_ST['Q3'].value_counts()[j])\n    else:\n        y13.append(0)\ny14 = []\nfor j in x:\n    if j in df_DBA['Q3'].value_counts().keys():\n        y14.append(df_DBA['Q3'].value_counts()[j])\n    else:\n        y14.append(0)\ny15 = []\nfor j in x:\n    if j in df_DR['Q3'].value_counts().keys():\n        y15.append(df_DR['Q3'].value_counts()[j])\n    else:\n        y15.append(0)\n    \n    \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Student',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name =  'Data Scientist', \n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'Software Engineer',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name =  'Other',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'Data Analyst',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name =  'Currently not employed',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = 'Research Scientist',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = 'Machine Learning Engineer',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = 'Business Analyst',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = 'Program\/Project Manager',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = 'Data Engineer',\n             text=y11,\n             textposition='auto'\n              )  \ntrace11 = go.Bar(\n             x= x,\n             y= y12,\n             marker={'color' : 'green'},\n             name = 'Product Manager',\n             text=y12,\n             textposition='auto'\n              )  \ntrace12 = go.Bar(\n             x= x,\n             y= y13,\n             marker={'color' : 'violet'},\n             name = 'Statistician',\n             text=y13,\n             textposition='auto'\n              )  \ntrace13 = go.Bar(\n             x= x,\n             y= y14,\n             marker={'color' : 'yellow'},\n             name = 'DBA\/Database Engineer',\n             text=y14,\n             textposition='auto'\n              )  \ntrace14 = go.Bar(\n             x= x,\n             y= y15,\n             marker={'color' : 'magenta'},\n             name = 'Developer Relations\/Advocacy',\n             text=y15,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Current Employement vs Country\",x=0,y=0.95,font_size=25), \n                   barmode = 'stack',\n                   width=6000,\n                   height=1000,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Country',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12,trace13,trace14]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","c4169406":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q6'].value_counts().keys().tolist()\n\n\ny1 = []\nfor j in x:\n    if j in df_student['Q6'].value_counts().keys():\n        y1.append(df_student['Q6'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DS['Q6'].value_counts().keys():\n        y2.append(df_DS['Q6'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_SE['Q6'].value_counts().keys():\n        y3.append(df_SE['Q6'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_Other['Q6'].value_counts().keys():\n        y4.append(df_Other['Q6'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_DA['Q6'].value_counts().keys():\n        y5.append(df_DA['Q6'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NE['Q6'].value_counts().keys():\n        y6.append(df_NE['Q6'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_RS['Q6'].value_counts().keys():\n        y7.append(df_RS['Q6'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_ME['Q6'].value_counts().keys():\n        y8.append(df_ME['Q6'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_BA['Q6'].value_counts().keys():\n        y9.append(df_BA['Q6'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_PE['Q6'].value_counts().keys():\n        y10.append(df_PE['Q6'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_DE['Q6'].value_counts().keys():\n        y11.append(df_DE['Q6'].value_counts()[j])\n    else:\n        y11.append(0)\ny12 = []\nfor j in x:\n    if j in df_PRM['Q6'].value_counts().keys():\n        y12.append(df_PRM['Q6'].value_counts()[j])\n    else:\n        y12.append(0)\ny13 = []\nfor j in x:\n    if j in df_ST['Q6'].value_counts().keys():\n        y13.append(df_ST['Q6'].value_counts()[j])\n    else:\n        y13.append(0)\ny14 = []\nfor j in x:\n    if j in df_DBA['Q6'].value_counts().keys():\n        y14.append(df_DBA['Q6'].value_counts()[j])\n    else:\n        y14.append(0)\ny15 = []\nfor j in x:\n    if j in df_DR['Q6'].value_counts().keys():\n        y15.append(df_DR['Q6'].value_counts()[j])\n    else:\n        y15.append(0)\n    \n    \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Student',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name =  'Data Scientist', \n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'Software Engineer',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name =  'Other',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'Data Analyst',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name =  'Currently not employed',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = 'Research Scientist',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = 'Machine Learning Engineer',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = 'Business Analyst',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = 'Program\/Project Manager',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = 'Data Engineer',\n             text=y11,\n             textposition='auto'\n              )  \ntrace11 = go.Bar(\n             x= x,\n             y= y12,\n             marker={'color' : 'green'},\n             name = 'Product Manager',\n             text=y12,\n             textposition='auto'\n              )  \ntrace12 = go.Bar(\n             x= x,\n             y= y13,\n             marker={'color' : 'violet'},\n             name = 'Statistician',\n             text=y13,\n             textposition='auto'\n              )  \ntrace13 = go.Bar(\n             x= x,\n             y= y14,\n             marker={'color' : 'yellow'},\n             name = 'DBA\/Database Engineer',\n             text=y14,\n             textposition='auto'\n              )  \ntrace14 = go.Bar(\n             x= x,\n             y= y15,\n             marker={'color' : 'magenta'},\n             name = 'Developer Relations\/Advocacy',\n             text=y15,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Current Employement vs Coding Experience\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=4000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Years',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12,trace13,trace14]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","997b89e8":"fig = px.sunburst(data_frame=df,\n                  path=['Q6', 'Q5'],\n                  color='Q6',\n                  title='Coding Experience and Profession'\n                 )\n\nfig.update_traces(textinfo='label+percent parent')\nfig.update_layout(margin=dict(t=40, l=0, r=0, b=0))\nfig.show()","72c4b8f0":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q8'].value_counts().keys().tolist()\n\n\ny1 = []\nfor j in x:\n    if j in df_student['Q8'].value_counts().keys():\n        y1.append(df_student['Q8'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DS['Q8'].value_counts().keys():\n        y2.append(df_DS['Q8'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_SE['Q8'].value_counts().keys():\n        y3.append(df_SE['Q8'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_Other['Q8'].value_counts().keys():\n        y4.append(df_Other['Q8'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_DA['Q8'].value_counts().keys():\n        y5.append(df_DA['Q8'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NE['Q8'].value_counts().keys():\n        y6.append(df_NE['Q8'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_RS['Q8'].value_counts().keys():\n        y7.append(df_RS['Q8'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_ME['Q8'].value_counts().keys():\n        y8.append(df_ME['Q8'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_BA['Q8'].value_counts().keys():\n        y9.append(df_BA['Q8'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_PE['Q8'].value_counts().keys():\n        y10.append(df_PE['Q8'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_DE['Q8'].value_counts().keys():\n        y11.append(df_DE['Q8'].value_counts()[j])\n    else:\n        y11.append(0)\ny12 = []\nfor j in x:\n    if j in df_PRM['Q8'].value_counts().keys():\n        y12.append(df_PRM['Q8'].value_counts()[j])\n    else:\n        y12.append(0)\ny13 = []\nfor j in x:\n    if j in df_ST['Q8'].value_counts().keys():\n        y13.append(df_ST['Q8'].value_counts()[j])\n    else:\n        y13.append(0)\ny14 = []\nfor j in x:\n    if j in df_DBA['Q8'].value_counts().keys():\n        y14.append(df_DBA['Q8'].value_counts()[j])\n    else:\n        y14.append(0)\ny15 = []\nfor j in x:\n    if j in df_DR['Q8'].value_counts().keys():\n        y15.append(df_DR['Q8'].value_counts()[j])\n    else:\n        y15.append(0)\n    \n    \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Student',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name =  'Data Scientist', \n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'Software Engineer',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name =  'Other',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'Data Analyst',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name =  'Currently not employed',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = 'Research Scientist',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = 'Machine Learning Engineer',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = 'Business Analyst',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = 'Program\/Project Manager',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = 'Data Engineer',\n             text=y11,\n             textposition='auto'\n              )  \ntrace11 = go.Bar(\n             x= x,\n             y= y12,\n             marker={'color' : 'green'},\n             name = 'Product Manager',\n             text=y12,\n             textposition='auto'\n              )  \ntrace12 = go.Bar(\n             x= x,\n             y= y13,\n             marker={'color' : 'violet'},\n             name = 'Statistician',\n             text=y13,\n             textposition='auto'\n              )  \ntrace13 = go.Bar(\n             x= x,\n             y= y14,\n             marker={'color' : 'yellow'},\n             name = 'DBA\/Database Engineer',\n             text=y14,\n             textposition='auto'\n              )  \ntrace14 = go.Bar(\n             x= x,\n             y= y15,\n             marker={'color' : 'magenta'},\n             name = 'Developer Relations\/Advocacy',\n             text=y15,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Current Employement vs Recommended Programming Language\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=5000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Programming Language',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12,trace13,trace14]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","635c233c":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q11'].value_counts().keys().tolist()\n\n\ny1 = []\nfor j in x:\n    if j in df_student['Q11'].value_counts().keys():\n        y1.append(df_student['Q11'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DS['Q11'].value_counts().keys():\n        y2.append(df_DS['Q11'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_SE['Q11'].value_counts().keys():\n        y3.append(df_SE['Q11'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_Other['Q11'].value_counts().keys():\n        y4.append(df_Other['Q11'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_DA['Q11'].value_counts().keys():\n        y5.append(df_DA['Q11'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NE['Q11'].value_counts().keys():\n        y6.append(df_NE['Q11'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_RS['Q11'].value_counts().keys():\n        y7.append(df_RS['Q11'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_ME['Q11'].value_counts().keys():\n        y8.append(df_ME['Q11'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_BA['Q11'].value_counts().keys():\n        y9.append(df_BA['Q11'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_PE['Q11'].value_counts().keys():\n        y10.append(df_PE['Q11'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_DE['Q11'].value_counts().keys():\n        y11.append(df_DE['Q11'].value_counts()[j])\n    else:\n        y11.append(0)\ny12 = []\nfor j in x:\n    if j in df_PRM['Q11'].value_counts().keys():\n        y12.append(df_PRM['Q11'].value_counts()[j])\n    else:\n        y12.append(0)\ny13 = []\nfor j in x:\n    if j in df_ST['Q11'].value_counts().keys():\n        y13.append(df_ST['Q11'].value_counts()[j])\n    else:\n        y13.append(0)\ny14 = []\nfor j in x:\n    if j in df_DBA['Q11'].value_counts().keys():\n        y14.append(df_DBA['Q11'].value_counts()[j])\n    else:\n        y14.append(0)\ny15 = []\nfor j in x:\n    if j in df_DR['Q11'].value_counts().keys():\n        y15.append(df_DR['Q11'].value_counts()[j])\n    else:\n        y15.append(0)\n    \n    \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Student',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name =  'Data Scientist', \n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'Software Engineer',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name =  'Other',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'Data Analyst',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name =  'Currently not employed',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = 'Research Scientist',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = 'Machine Learning Engineer',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = 'Business Analyst',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = 'Program\/Project Manager',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = 'Data Engineer',\n             text=y11,\n             textposition='auto'\n              )  \ntrace11 = go.Bar(\n             x= x,\n             y= y12,\n             marker={'color' : 'green'},\n             name = 'Product Manager',\n             text=y12,\n             textposition='auto'\n              )  \ntrace12 = go.Bar(\n             x= x,\n             y= y13,\n             marker={'color' : 'violet'},\n             name = 'Statistician',\n             text=y13,\n             textposition='auto'\n              )  \ntrace13 = go.Bar(\n             x= x,\n             y= y14,\n             marker={'color' : 'yellow'},\n             name = 'DBA\/Database Engineer',\n             text=y14,\n             textposition='auto'\n              )  \ntrace14 = go.Bar(\n             x= x,\n             y= y15,\n             marker={'color' : 'magenta'},\n             name = 'Developer Relations\/Advocacy',\n             text=y15,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Current Employement vs Computing Platform used\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=4000,\n                   height=1000,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Computing Platform',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12,trace13,trace14]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","0564ec68":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q13'].value_counts().keys().tolist()\n\n\ny1 = []\nfor j in x:\n    if j in df_student['Q13'].value_counts().keys():\n        y1.append(df_student['Q13'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DS['Q13'].value_counts().keys():\n        y2.append(df_DS['Q13'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_SE['Q13'].value_counts().keys():\n        y3.append(df_SE['Q13'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_Other['Q13'].value_counts().keys():\n        y4.append(df_Other['Q13'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_DA['Q13'].value_counts().keys():\n        y5.append(df_DA['Q13'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NE['Q13'].value_counts().keys():\n        y6.append(df_NE['Q13'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_RS['Q13'].value_counts().keys():\n        y7.append(df_RS['Q13'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_ME['Q13'].value_counts().keys():\n        y8.append(df_ME['Q13'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_BA['Q13'].value_counts().keys():\n        y9.append(df_BA['Q13'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_PE['Q13'].value_counts().keys():\n        y10.append(df_PE['Q13'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_DE['Q13'].value_counts().keys():\n        y11.append(df_DE['Q13'].value_counts()[j])\n    else:\n        y11.append(0)\ny12 = []\nfor j in x:\n    if j in df_PRM['Q13'].value_counts().keys():\n        y12.append(df_PRM['Q13'].value_counts()[j])\n    else:\n        y12.append(0)\ny13 = []\nfor j in x:\n    if j in df_ST['Q13'].value_counts().keys():\n        y13.append(df_ST['Q13'].value_counts()[j])\n    else:\n        y13.append(0)\ny14 = []\nfor j in x:\n    if j in df_DBA['Q13'].value_counts().keys():\n        y14.append(df_DBA['Q13'].value_counts()[j])\n    else:\n        y14.append(0)\ny15 = []\nfor j in x:\n    if j in df_DR['Q13'].value_counts().keys():\n        y15.append(df_DR['Q13'].value_counts()[j])\n    else:\n        y15.append(0)\n    \n    \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Student',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name =  'Data Scientist', \n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'Software Engineer',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name =  'Other',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'Data Analyst',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name =  'Currently not employed',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = 'Research Scientist',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = 'Machine Learning Engineer',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = 'Business Analyst',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = 'Program\/Project Manager',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = 'Data Engineer',\n             text=y11,\n             textposition='auto'\n              )  \ntrace11 = go.Bar(\n             x= x,\n             y= y12,\n             marker={'color' : 'green'},\n             name = 'Product Manager',\n             text=y12,\n             textposition='auto'\n              )  \ntrace12 = go.Bar(\n             x= x,\n             y= y13,\n             marker={'color' : 'violet'},\n             name = 'Statistician',\n             text=y13,\n             textposition='auto'\n              )  \ntrace13 = go.Bar(\n             x= x,\n             y= y14,\n             marker={'color' : 'yellow'},\n             name = 'DBA\/Database Engineer',\n             text=y14,\n             textposition='auto'\n              )  \ntrace14 = go.Bar(\n             x= x,\n             y= y15,\n             marker={'color' : 'magenta'},\n             name = 'Developer Relations\/Advocacy',\n             text=y15,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Current Employement vs TPU Usage\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3000,\n                   height=1000,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='TPU Usage (Count)',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12,trace13,trace14]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","138e1389":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q15'].value_counts().keys().tolist()\n\n\ny1 = []\nfor j in x:\n    if j in df_student['Q15'].value_counts().keys():\n        y1.append(df_student['Q15'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DS['Q15'].value_counts().keys():\n        y2.append(df_DS['Q15'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_SE['Q15'].value_counts().keys():\n        y3.append(df_SE['Q15'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_Other['Q15'].value_counts().keys():\n        y4.append(df_Other['Q15'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_DA['Q15'].value_counts().keys():\n        y5.append(df_DA['Q15'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NE['Q15'].value_counts().keys():\n        y6.append(df_NE['Q15'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_RS['Q15'].value_counts().keys():\n        y7.append(df_RS['Q15'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_ME['Q15'].value_counts().keys():\n        y8.append(df_ME['Q15'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_BA['Q15'].value_counts().keys():\n        y9.append(df_BA['Q15'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_PE['Q15'].value_counts().keys():\n        y10.append(df_PE['Q15'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_DE['Q15'].value_counts().keys():\n        y11.append(df_DE['Q15'].value_counts()[j])\n    else:\n        y11.append(0)\ny12 = []\nfor j in x:\n    if j in df_PRM['Q15'].value_counts().keys():\n        y12.append(df_PRM['Q15'].value_counts()[j])\n    else:\n        y12.append(0)\ny13 = []\nfor j in x:\n    if j in df_ST['Q15'].value_counts().keys():\n        y13.append(df_ST['Q15'].value_counts()[j])\n    else:\n        y13.append(0)\ny14 = []\nfor j in x:\n    if j in df_DBA['Q15'].value_counts().keys():\n        y14.append(df_DBA['Q15'].value_counts()[j])\n    else:\n        y14.append(0)\ny15 = []\nfor j in x:\n    if j in df_DR['Q15'].value_counts().keys():\n        y15.append(df_DR['Q15'].value_counts()[j])\n    else:\n        y15.append(0)\n    \n    \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Student',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name =  'Data Scientist', \n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'Software Engineer',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name =  'Other',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'Data Analyst',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name =  'Currently not employed',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = 'Research Scientist',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = 'Machine Learning Engineer',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = 'Business Analyst',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = 'Program\/Project Manager',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = 'Data Engineer',\n             text=y11,\n             textposition='auto'\n              )  \ntrace11 = go.Bar(\n             x= x,\n             y= y12,\n             marker={'color' : 'green'},\n             name = 'Product Manager',\n             text=y12,\n             textposition='auto'\n              )  \ntrace12 = go.Bar(\n             x= x,\n             y= y13,\n             marker={'color' : 'violet'},\n             name = 'Statistician',\n             text=y13,\n             textposition='auto'\n              )  \ntrace13 = go.Bar(\n             x= x,\n             y= y14,\n             marker={'color' : 'yellow'},\n             name = 'DBA\/Database Engineer',\n             text=y14,\n             textposition='auto'\n              )  \ntrace14 = go.Bar(\n             x= x,\n             y= y15,\n             marker={'color' : 'magenta'},\n             name = 'Developer Relations\/Advocacy',\n             text=y15,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Current Employement vs How many years ML methods used\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=4000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Years',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12,trace13,trace14]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","9b7e36dd":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q20'].value_counts().keys().tolist()\n\n\ny1 = []\nfor j in x:\n    if j in df_student['Q20'].value_counts().keys():\n        y1.append(df_student['Q20'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DS['Q20'].value_counts().keys():\n        y2.append(df_DS['Q20'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_SE['Q20'].value_counts().keys():\n        y3.append(df_SE['Q20'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_Other['Q20'].value_counts().keys():\n        y4.append(df_Other['Q20'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_DA['Q20'].value_counts().keys():\n        y5.append(df_DA['Q20'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NE['Q20'].value_counts().keys():\n        y6.append(df_NE['Q20'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_RS['Q20'].value_counts().keys():\n        y7.append(df_RS['Q20'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_ME['Q20'].value_counts().keys():\n        y8.append(df_ME['Q20'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_BA['Q20'].value_counts().keys():\n        y9.append(df_BA['Q20'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_PE['Q20'].value_counts().keys():\n        y10.append(df_PE['Q20'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_DE['Q20'].value_counts().keys():\n        y11.append(df_DE['Q20'].value_counts()[j])\n    else:\n        y11.append(0)\ny12 = []\nfor j in x:\n    if j in df_PRM['Q20'].value_counts().keys():\n        y12.append(df_PRM['Q20'].value_counts()[j])\n    else:\n        y12.append(0)\ny13 = []\nfor j in x:\n    if j in df_ST['Q20'].value_counts().keys():\n        y13.append(df_ST['Q20'].value_counts()[j])\n    else:\n        y13.append(0)\ny14 = []\nfor j in x:\n    if j in df_DBA['Q20'].value_counts().keys():\n        y14.append(df_DBA['Q20'].value_counts()[j])\n    else:\n        y14.append(0)\ny15 = []\nfor j in x:\n    if j in df_DR['Q20'].value_counts().keys():\n        y15.append(df_DR['Q20'].value_counts()[j])\n    else:\n        y15.append(0)\n    \n    \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Student',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name =  'Data Scientist', \n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'Software Engineer',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name =  'Other',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'Data Analyst',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name =  'Currently not employed',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = 'Research Scientist',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = 'Machine Learning Engineer',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = 'Business Analyst',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = 'Program\/Project Manager',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = 'Data Engineer',\n             text=y11,\n             textposition='auto'\n              )  \ntrace11 = go.Bar(\n             x= x,\n             y= y12,\n             marker={'color' : 'green'},\n             name = 'Product Manager',\n             text=y12,\n             textposition='auto'\n              )  \ntrace12 = go.Bar(\n             x= x,\n             y= y13,\n             marker={'color' : 'violet'},\n             name = 'Statistician',\n             text=y13,\n             textposition='auto'\n              )  \ntrace13 = go.Bar(\n             x= x,\n             y= y14,\n             marker={'color' : 'yellow'},\n             name = 'DBA\/Database Engineer',\n             text=y14,\n             textposition='auto'\n              )  \ntrace14 = go.Bar(\n             x= x,\n             y= y15,\n             marker={'color' : 'magenta'},\n             name = 'Developer Relations\/Advocacy',\n             text=y15,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Current Employement vs Current Employer Industry\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=7000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Current Employer',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12,trace13,trace14]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","a3c31f23":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q21'].value_counts().keys().tolist()\n\n\ny1 = []\nfor j in x:\n    if j in df_student['Q21'].value_counts().keys():\n        y1.append(df_student['Q21'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DS['Q21'].value_counts().keys():\n        y2.append(df_DS['Q21'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_SE['Q21'].value_counts().keys():\n        y3.append(df_SE['Q21'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_Other['Q21'].value_counts().keys():\n        y4.append(df_Other['Q21'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_DA['Q21'].value_counts().keys():\n        y5.append(df_DA['Q21'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NE['Q21'].value_counts().keys():\n        y6.append(df_NE['Q21'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_RS['Q21'].value_counts().keys():\n        y7.append(df_RS['Q21'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_ME['Q21'].value_counts().keys():\n        y8.append(df_ME['Q21'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_BA['Q21'].value_counts().keys():\n        y9.append(df_BA['Q21'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_PE['Q21'].value_counts().keys():\n        y10.append(df_PE['Q21'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_DE['Q21'].value_counts().keys():\n        y11.append(df_DE['Q21'].value_counts()[j])\n    else:\n        y11.append(0)\ny12 = []\nfor j in x:\n    if j in df_PRM['Q21'].value_counts().keys():\n        y12.append(df_PRM['Q21'].value_counts()[j])\n    else:\n        y12.append(0)\ny13 = []\nfor j in x:\n    if j in df_ST['Q21'].value_counts().keys():\n        y13.append(df_ST['Q21'].value_counts()[j])\n    else:\n        y13.append(0)\ny14 = []\nfor j in x:\n    if j in df_DBA['Q21'].value_counts().keys():\n        y14.append(df_DBA['Q21'].value_counts()[j])\n    else:\n        y14.append(0)\ny15 = []\nfor j in x:\n    if j in df_DR['Q21'].value_counts().keys():\n        y15.append(df_DR['Q21'].value_counts()[j])\n    else:\n        y15.append(0)\n    \n    \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Student',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name =  'Data Scientist', \n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'Software Engineer',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name =  'Other',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'Data Analyst',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name =  'Currently not employed',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = 'Research Scientist',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = 'Machine Learning Engineer',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = 'Business Analyst',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = 'Program\/Project Manager',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = 'Data Engineer',\n             text=y11,\n             textposition='auto'\n              )  \ntrace11 = go.Bar(\n             x= x,\n             y= y12,\n             marker={'color' : 'green'},\n             name = 'Product Manager',\n             text=y12,\n             textposition='auto'\n              )  \ntrace12 = go.Bar(\n             x= x,\n             y= y13,\n             marker={'color' : 'violet'},\n             name = 'Statistician',\n             text=y13,\n             textposition='auto'\n              )  \ntrace13 = go.Bar(\n             x= x,\n             y= y14,\n             marker={'color' : 'yellow'},\n             name = 'DBA\/Database Engineer',\n             text=y14,\n             textposition='auto'\n              )  \ntrace14 = go.Bar(\n             x= x,\n             y= y15,\n             marker={'color' : 'magenta'},\n             name = 'Developer Relations\/Advocacy',\n             text=y15,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Current Employement vs Company Size\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=4000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of People',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Company Size',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12,trace13,trace14]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","e0b2c0ce":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q25'].value_counts().keys().tolist()\n\n\ny1 = []\nfor j in x:\n    if j in df_student['Q25'].value_counts().keys():\n        y1.append(df_student['Q25'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DS['Q25'].value_counts().keys():\n        y2.append(df_DS['Q25'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_SE['Q25'].value_counts().keys():\n        y3.append(df_SE['Q25'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_Other['Q25'].value_counts().keys():\n        y4.append(df_Other['Q25'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_DA['Q25'].value_counts().keys():\n        y5.append(df_DA['Q25'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NE['Q25'].value_counts().keys():\n        y6.append(df_NE['Q25'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_RS['Q25'].value_counts().keys():\n        y7.append(df_RS['Q25'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_ME['Q25'].value_counts().keys():\n        y8.append(df_ME['Q25'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_BA['Q25'].value_counts().keys():\n        y9.append(df_BA['Q25'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_PE['Q25'].value_counts().keys():\n        y10.append(df_PE['Q25'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_DE['Q25'].value_counts().keys():\n        y11.append(df_DE['Q25'].value_counts()[j])\n    else:\n        y11.append(0)\ny12 = []\nfor j in x:\n    if j in df_PRM['Q25'].value_counts().keys():\n        y12.append(df_PRM['Q25'].value_counts()[j])\n    else:\n        y12.append(0)\ny13 = []\nfor j in x:\n    if j in df_ST['Q25'].value_counts().keys():\n        y13.append(df_ST['Q25'].value_counts()[j])\n    else:\n        y13.append(0)\ny14 = []\nfor j in x:\n    if j in df_DBA['Q25'].value_counts().keys():\n        y14.append(df_DBA['Q25'].value_counts()[j])\n    else:\n        y14.append(0)\ny15 = []\nfor j in x:\n    if j in df_DR['Q25'].value_counts().keys():\n        y15.append(df_DR['Q25'].value_counts()[j])\n    else:\n        y15.append(0)\n    \n    \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Student',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name =  'Data Scientist', \n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'Software Engineer',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name =  'Other',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'Data Analyst',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name =  'Currently not employed',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = 'Research Scientist',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = 'Machine Learning Engineer',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = 'Business Analyst',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = 'Program\/Project Manager',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = 'Data Engineer',\n             text=y11,\n             textposition='auto'\n              )  \ntrace11 = go.Bar(\n             x= x,\n             y= y12,\n             marker={'color' : 'green'},\n             name = 'Product Manager',\n             text=y12,\n             textposition='auto'\n              )  \ntrace12 = go.Bar(\n             x= x,\n             y= y13,\n             marker={'color' : 'violet'},\n             name = 'Statistician',\n             text=y13,\n             textposition='auto'\n              )  \ntrace13 = go.Bar(\n             x= x,\n             y= y14,\n             marker={'color' : 'yellow'},\n             name = 'DBA\/Database Engineer',\n             text=y14,\n             textposition='auto'\n              )  \ntrace14 = go.Bar(\n             x= x,\n             y= y15,\n             marker={'color' : 'magenta'},\n             name = 'Developer Relations\/Advocacy',\n             text=y15,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Current Employement vs Yearly Compensation\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=10000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Money in USD',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12,trace13,trace14]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","9275f658":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q35'].value_counts().keys().tolist()\n\n\ny1 = []\nfor j in x:\n    if j in df_student['Q35'].value_counts().keys():\n        y1.append(df_student['Q35'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_DS['Q35'].value_counts().keys():\n        y2.append(df_DS['Q35'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_SE['Q35'].value_counts().keys():\n        y3.append(df_SE['Q35'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df_Other['Q35'].value_counts().keys():\n        y4.append(df_Other['Q35'].value_counts()[j])\n    else:\n        y4.append(0)\ny5 = []\nfor j in x:\n    if j in df_DA['Q35'].value_counts().keys():\n        y5.append(df_DA['Q35'].value_counts()[j])\n    else:\n        y5.append(0)\ny6 = []\nfor j in x:\n    if j in df_NE['Q35'].value_counts().keys():\n        y6.append(df_NE['Q35'].value_counts()[j])\n    else:\n        y6.append(0)\ny7 = []\nfor j in x:\n    if j in df_RS['Q35'].value_counts().keys():\n        y7.append(df_RS['Q35'].value_counts()[j])\n    else:\n        y7.append(0)\ny8 = []\nfor j in x:\n    if j in df_ME['Q35'].value_counts().keys():\n        y8.append(df_ME['Q35'].value_counts()[j])\n    else:\n        y8.append(0)\ny9 = []\nfor j in x:\n    if j in df_BA['Q35'].value_counts().keys():\n        y9.append(df_BA['Q35'].value_counts()[j])\n    else:\n        y9.append(0)\ny10 = []\nfor j in x:\n    if j in df_PE['Q35'].value_counts().keys():\n        y10.append(df_PE['Q35'].value_counts()[j])\n    else:\n        y10.append(0)\ny11 = []\nfor j in x:\n    if j in df_DE['Q35'].value_counts().keys():\n        y11.append(df_DE['Q35'].value_counts()[j])\n    else:\n        y11.append(0)\ny12 = []\nfor j in x:\n    if j in df_PRM['Q35'].value_counts().keys():\n        y12.append(df_PRM['Q35'].value_counts()[j])\n    else:\n        y12.append(0)\ny13 = []\nfor j in x:\n    if j in df_ST['Q35'].value_counts().keys():\n        y13.append(df_ST['Q35'].value_counts()[j])\n    else:\n        y13.append(0)\ny14 = []\nfor j in x:\n    if j in df_DBA['Q35'].value_counts().keys():\n        y14.append(df_DBA['Q35'].value_counts()[j])\n    else:\n        y14.append(0)\ny15 = []\nfor j in x:\n    if j in df_DR['Q35'].value_counts().keys():\n        y15.append(df_DR['Q35'].value_counts()[j])\n    else:\n        y15.append(0)\n    \n    \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Student',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name =  'Data Scientist', \n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'Software Engineer',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name =  'Other',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'Data Analyst',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name =  'Currently not employed',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = 'Research Scientist',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = 'Machine Learning Engineer',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = 'Business Analyst',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = 'Program\/Project Manager',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = 'Data Engineer',\n             text=y11,\n             textposition='auto'\n              )  \ntrace11 = go.Bar(\n             x= x,\n             y= y12,\n             marker={'color' : 'green'},\n             name = 'Product Manager',\n             text=y12,\n             textposition='auto'\n              )  \ntrace12 = go.Bar(\n             x= x,\n             y= y13,\n             marker={'color' : 'violet'},\n             name = 'Statistician',\n             text=y13,\n             textposition='auto'\n              )  \ntrace13 = go.Bar(\n             x= x,\n             y= y14,\n             marker={'color' : 'yellow'},\n             name = 'DBA\/Database Engineer',\n             text=y14,\n             textposition='auto'\n              )  \ntrace14 = go.Bar(\n             x= x,\n             y= y15,\n             marker={'color' : 'magenta'},\n             name = 'Developer Relations\/Advocacy',\n             text=y15,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Current Employement vs Business Intelligence tools they use often\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=7000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Business Intelligence tools',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12,trace13,trace14]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","e7858e75":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = ['Python','R']\n\n\ny1 = []\ny1.append(df_student['Q7_Part_1'].value_counts()[0])\ny1.append(df_student['Q7_Part_2'].value_counts()[0])\n\ny2 = []\ny2.append(df_DS['Q7_Part_1'].value_counts()[0])\ny2.append(df_DS['Q7_Part_2'].value_counts()[0])\n\ny3 = []\ny3.append(df_SE['Q7_Part_1'].value_counts()[0])\ny3.append(df_SE['Q7_Part_2'].value_counts()[0])\n\ny4 = []\ny4.append(df_Other['Q7_Part_1'].value_counts()[0])\ny4.append(df_Other['Q7_Part_2'].value_counts()[0])\n\ny5 = []\ny5.append(df_DA['Q7_Part_1'].value_counts()[0])\ny5.append(df_DA['Q7_Part_2'].value_counts()[0])\n\ny6 = []\ny6.append(df_NE['Q7_Part_1'].value_counts()[0])\ny6.append(df_NE['Q7_Part_2'].value_counts()[0])\n\ny7 = []\ny7.append(df_RS['Q7_Part_1'].value_counts()[0])\ny7.append(df_RS['Q7_Part_2'].value_counts()[0])\n\ny8 = []\ny8.append(df_ME['Q7_Part_1'].value_counts()[0])\ny8.append(df_ME['Q7_Part_2'].value_counts()[0])\n\ny9 = []\ny9.append(df_BA['Q7_Part_1'].value_counts()[0])\ny9.append(df_BA['Q7_Part_2'].value_counts()[0])\n\ny10 = []\ny10.append(df_PE['Q7_Part_1'].value_counts()[0])\ny10.append(df_PE['Q7_Part_2'].value_counts()[0])\n\ny11 = []\ny11.append(df_DE['Q7_Part_1'].value_counts()[0])\ny11.append(df_DE['Q7_Part_2'].value_counts()[0])\n\ny12 = []\ny12.append(df_PRM['Q7_Part_1'].value_counts()[0])\ny12.append(df_PRM['Q7_Part_2'].value_counts()[0])\n\ny13 = []\ny13.append(df_ST['Q7_Part_1'].value_counts()[0])\ny13.append(df_ST['Q7_Part_2'].value_counts()[0])\n\ny14 = []\ny14.append(df_DBA['Q7_Part_1'].value_counts()[0])\ny14.append(df_DBA['Q7_Part_2'].value_counts()[0])\n\ny15 = []\ny15.append(df_DR['Q7_Part_1'].value_counts()[0])\ny15.append(df_DR['Q7_Part_2'].value_counts()[0])\n    \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Student',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name =  'Data Scientist', \n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'Software Engineer',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name =  'Other',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'Data Analyst',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name =  'Currently not employed',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = 'Research Scientist',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = 'Machine Learning Engineer',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = 'Business Analyst',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = 'Program\/Project Manager',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = 'Data Engineer',\n             text=y11,\n             textposition='auto'\n              )  \ntrace11 = go.Bar(\n             x= x,\n             y= y12,\n             marker={'color' : 'green'},\n             name = 'Product Manager',\n             text=y12,\n             textposition='auto'\n              )  \ntrace12 = go.Bar(\n             x= x,\n             y= y13,\n             marker={'color' : 'violet'},\n             name = 'Statistician',\n             text=y13,\n             textposition='auto'\n              )  \ntrace13 = go.Bar(\n             x= x,\n             y= y14,\n             marker={'color' : 'yellow'},\n             name = 'DBA\/Database Engineer',\n             text=y14,\n             textposition='auto'\n              )  \ntrace14 = go.Bar(\n             x= x,\n             y= y15,\n             marker={'color' : 'magenta'},\n             name = 'Developer Relations\/Advocacy',\n             text=y15,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Python vs R\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=1200,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Business Intelligence tools',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12,trace13,trace14]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","5672e7b4":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = ['Scikit-learn','TensorFlow','Keras','PyTorch','Xgboost']\n\n\ny1 = []\ny1.append(df_student['Q16_Part_1'].value_counts()[0])\ny1.append(df_student['Q16_Part_2'].value_counts()[0])\ny1.append(df_student['Q16_Part_3'].value_counts()[0])\ny1.append(df_student['Q16_Part_4'].value_counts()[0])\ny1.append(df_student['Q16_Part_7'].value_counts()[0])\n\ny2 = []\ny2.append(df_DS['Q16_Part_1'].value_counts()[0])\ny2.append(df_DS['Q16_Part_2'].value_counts()[0])\ny2.append(df_DS['Q16_Part_3'].value_counts()[0])\ny2.append(df_DS['Q16_Part_4'].value_counts()[0])\ny2.append(df_DS['Q16_Part_7'].value_counts()[0])\n\n\ny3 = []\ny3.append(df_SE['Q16_Part_1'].value_counts()[0])\ny3.append(df_SE['Q16_Part_2'].value_counts()[0])\ny3.append(df_SE['Q16_Part_3'].value_counts()[0])\ny3.append(df_SE['Q16_Part_4'].value_counts()[0])\ny3.append(df_SE['Q16_Part_7'].value_counts()[0])\n\ny4 = []\ny4.append(df_Other['Q16_Part_1'].value_counts()[0])\ny4.append(df_Other['Q16_Part_2'].value_counts()[0])\ny4.append(df_Other['Q16_Part_3'].value_counts()[0])\ny4.append(df_Other['Q16_Part_4'].value_counts()[0])\ny4.append(df_Other['Q16_Part_7'].value_counts()[0])\n\ny5 = []\ny5.append(df_DA['Q16_Part_1'].value_counts()[0])\ny5.append(df_DA['Q16_Part_2'].value_counts()[0])\ny5.append(df_DA['Q16_Part_3'].value_counts()[0])\ny5.append(df_DA['Q16_Part_4'].value_counts()[0])\ny5.append(df_DA['Q16_Part_7'].value_counts()[0])\n\ny6 = []\ny6.append(df_NE['Q16_Part_1'].value_counts()[0])\ny6.append(df_NE['Q16_Part_2'].value_counts()[0])\ny6.append(df_NE['Q16_Part_3'].value_counts()[0])\ny6.append(df_NE['Q16_Part_4'].value_counts()[0])\ny6.append(df_NE['Q16_Part_7'].value_counts()[0])\n\ny7 = []\ny7.append(df_RS['Q16_Part_1'].value_counts()[0])\ny7.append(df_RS['Q16_Part_2'].value_counts()[0])\ny7.append(df_RS['Q16_Part_3'].value_counts()[0])\ny7.append(df_RS['Q16_Part_4'].value_counts()[0])\ny7.append(df_RS['Q16_Part_7'].value_counts()[0])\n\ny8 = []\ny8.append(df_ME['Q16_Part_1'].value_counts()[0])\ny8.append(df_ME['Q16_Part_2'].value_counts()[0])\ny8.append(df_ME['Q16_Part_3'].value_counts()[0])\ny8.append(df_ME['Q16_Part_4'].value_counts()[0])\ny8.append(df_ME['Q16_Part_7'].value_counts()[0])\n\ny9 = []\ny9.append(df_BA['Q16_Part_1'].value_counts()[0])\ny9.append(df_BA['Q16_Part_2'].value_counts()[0])\ny9.append(df_BA['Q16_Part_3'].value_counts()[0])\ny9.append(df_BA['Q16_Part_4'].value_counts()[0])\ny9.append(df_BA['Q16_Part_7'].value_counts()[0])\n\ny10 = []\ny10.append(df_PE['Q16_Part_1'].value_counts()[0])\ny10.append(df_PE['Q16_Part_2'].value_counts()[0])\ny10.append(df_PE['Q16_Part_3'].value_counts()[0])\ny10.append(df_PE['Q16_Part_4'].value_counts()[0])\ny10.append(df_PE['Q16_Part_7'].value_counts()[0])\n\ny11 = []\ny11.append(df_DE['Q16_Part_1'].value_counts()[0])\ny11.append(df_DE['Q16_Part_2'].value_counts()[0])\ny11.append(df_DE['Q16_Part_3'].value_counts()[0])\ny11.append(df_DE['Q16_Part_4'].value_counts()[0])\ny11.append(df_DE['Q16_Part_7'].value_counts()[0])\n\ny12 = []\ny12.append(df_PRM['Q16_Part_1'].value_counts()[0])\ny12.append(df_PRM['Q16_Part_2'].value_counts()[0])\ny12.append(df_PRM['Q16_Part_3'].value_counts()[0])\ny12.append(df_PRM['Q16_Part_4'].value_counts()[0])\ny12.append(df_PRM['Q16_Part_7'].value_counts()[0])\n\ny13 = []\ny13.append(df_ST['Q16_Part_1'].value_counts()[0])\ny13.append(df_ST['Q16_Part_2'].value_counts()[0])\ny13.append(df_ST['Q16_Part_3'].value_counts()[0])\ny13.append(df_ST['Q16_Part_4'].value_counts()[0])\ny13.append(df_ST['Q16_Part_7'].value_counts()[0])\n\ny14 = []\ny14.append(df_DBA['Q16_Part_1'].value_counts()[0])\ny14.append(df_DBA['Q16_Part_2'].value_counts()[0])\ny14.append(df_DBA['Q16_Part_3'].value_counts()[0])\ny14.append(df_DBA['Q16_Part_4'].value_counts()[0])\ny14.append(df_DBA['Q16_Part_7'].value_counts()[0])\n\ny15 = []\ny15.append(df_DR['Q16_Part_1'].value_counts()[0])\ny15.append(df_DR['Q16_Part_2'].value_counts()[0])\ny15.append(df_DR['Q16_Part_3'].value_counts()[0])\ny15.append(df_DR['Q16_Part_4'].value_counts()[0])\ny15.append(df_DR['Q16_Part_7'].value_counts()[0])\n    \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Student',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name =  'Data Scientist', \n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'Software Engineer',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name =  'Other',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'Data Analyst',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name =  'Currently not employed',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = 'Research Scientist',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = 'Machine Learning Engineer',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = 'Business Analyst',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = 'Program\/Project Manager',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = 'Data Engineer',\n             text=y11,\n             textposition='auto'\n              )  \ntrace11 = go.Bar(\n             x= x,\n             y= y12,\n             marker={'color' : 'green'},\n             name = 'Product Manager',\n             text=y12,\n             textposition='auto'\n              )  \ntrace12 = go.Bar(\n             x= x,\n             y= y13,\n             marker={'color' : 'violet'},\n             name = 'Statistician',\n             text=y13,\n             textposition='auto'\n              )  \ntrace13 = go.Bar(\n             x= x,\n             y= y14,\n             marker={'color' : 'yellow'},\n             name = 'DBA\/Database Engineer',\n             text=y14,\n             textposition='auto'\n              )  \ntrace14 = go.Bar(\n             x= x,\n             y= y15,\n             marker={'color' : 'magenta'},\n             name = 'Developer Relations\/Advocacy',\n             text=y15,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Most used ML library\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Library Name',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12,trace13,trace14]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","ef1dfc1f":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = ['Linear or Logistic Regression','Decision Trees or Random Forests','Gradient Boosting Machines (xgboost, lightgbm, etc)','Convolutional Neural Networks']\n\ny1 = []\ny1.append(df_student['Q17_Part_1'].value_counts()[0])\ny1.append(df_student['Q17_Part_2'].value_counts()[0])\ny1.append(df_student['Q17_Part_3'].value_counts()[0])\ny1.append(df_student['Q17_Part_7'].value_counts()[0])\n\ny2 = []\ny2.append(df_DS['Q17_Part_1'].value_counts()[0])\ny2.append(df_DS['Q17_Part_2'].value_counts()[0])\ny2.append(df_DS['Q17_Part_3'].value_counts()[0])\ny2.append(df_DS['Q17_Part_7'].value_counts()[0])\n\n\ny3 = []\ny3.append(df_SE['Q17_Part_1'].value_counts()[0])\ny3.append(df_SE['Q17_Part_2'].value_counts()[0])\ny3.append(df_SE['Q17_Part_3'].value_counts()[0])\ny3.append(df_SE['Q17_Part_7'].value_counts()[0])\n\ny4 = []\ny4.append(df_Other['Q17_Part_1'].value_counts()[0])\ny4.append(df_Other['Q17_Part_2'].value_counts()[0])\ny4.append(df_Other['Q17_Part_3'].value_counts()[0])\ny4.append(df_Other['Q17_Part_7'].value_counts()[0])\n\ny5 = []\ny5.append(df_DA['Q17_Part_1'].value_counts()[0])\ny5.append(df_DA['Q17_Part_2'].value_counts()[0])\ny5.append(df_DA['Q17_Part_3'].value_counts()[0])\ny5.append(df_DA['Q17_Part_7'].value_counts()[0])\n\ny6 = []\ny6.append(df_NE['Q17_Part_1'].value_counts()[0])\ny6.append(df_NE['Q17_Part_2'].value_counts()[0])\ny6.append(df_NE['Q17_Part_3'].value_counts()[0])\ny6.append(df_NE['Q17_Part_7'].value_counts()[0])\n\ny7 = []\ny7.append(df_RS['Q17_Part_1'].value_counts()[0])\ny7.append(df_RS['Q17_Part_2'].value_counts()[0])\ny7.append(df_RS['Q17_Part_3'].value_counts()[0])\ny7.append(df_RS['Q17_Part_7'].value_counts()[0])\n\ny8 = []\ny8.append(df_ME['Q17_Part_1'].value_counts()[0])\ny8.append(df_ME['Q17_Part_2'].value_counts()[0])\ny8.append(df_ME['Q17_Part_3'].value_counts()[0])\ny8.append(df_ME['Q17_Part_7'].value_counts()[0])\n\ny9 = []\ny9.append(df_BA['Q17_Part_1'].value_counts()[0])\ny9.append(df_BA['Q17_Part_2'].value_counts()[0])\ny9.append(df_BA['Q17_Part_3'].value_counts()[0])\ny9.append(df_BA['Q17_Part_7'].value_counts()[0])\n\ny10 = []\ny10.append(df_PE['Q17_Part_1'].value_counts()[0])\ny10.append(df_PE['Q17_Part_2'].value_counts()[0])\ny10.append(df_PE['Q17_Part_3'].value_counts()[0])\ny10.append(df_PE['Q17_Part_7'].value_counts()[0])\n\ny11 = []\ny11.append(df_DE['Q17_Part_1'].value_counts()[0])\ny11.append(df_DE['Q17_Part_2'].value_counts()[0])\ny11.append(df_DE['Q17_Part_3'].value_counts()[0])\ny11.append(df_DE['Q17_Part_7'].value_counts()[0])\n\ny12 = []\ny12.append(df_PRM['Q17_Part_1'].value_counts()[0])\ny12.append(df_PRM['Q17_Part_2'].value_counts()[0])\ny12.append(df_PRM['Q17_Part_3'].value_counts()[0])\ny12.append(df_PRM['Q17_Part_7'].value_counts()[0])\n\ny13 = []\ny13.append(df_ST['Q17_Part_1'].value_counts()[0])\ny13.append(df_ST['Q17_Part_2'].value_counts()[0])\ny13.append(df_ST['Q17_Part_3'].value_counts()[0])\ny13.append(df_ST['Q17_Part_7'].value_counts()[0])\n\ny14 = []\ny14.append(df_DBA['Q17_Part_1'].value_counts()[0])\ny14.append(df_DBA['Q17_Part_2'].value_counts()[0])\ny14.append(df_DBA['Q17_Part_3'].value_counts()[0])\ny14.append(df_DBA['Q17_Part_7'].value_counts()[0])\n\ny15 = []\ny15.append(df_DR['Q17_Part_1'].value_counts()[0])\ny15.append(df_DR['Q17_Part_2'].value_counts()[0])\ny15.append(df_DR['Q17_Part_3'].value_counts()[0])\ny15.append(df_DR['Q17_Part_7'].value_counts()[0])\n    \ntrace0 = go.Bar(\n             x= x,\n             y= y1,\n             marker= dict (color ='#FF6F00' ),\n             name = 'Student',\n             text=y1,\n             textposition='auto'\n             )\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker={'color' : '#FFB300'},\n             name =  'Data Scientist', \n             text=y2,\n             textposition='auto'\n              )    \n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#F7DC6F'},\n             name = 'Software Engineer',\n             text=y3,\n             textposition='auto'\n              ) \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : 'cyan'},\n             name =  'Other',\n             text=y4,\n             textposition='auto'\n              )  \n    \ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'red'},\n             name = 'Data Analyst',\n             text=y5,\n             textposition='auto'\n              )  \n\ntrace5 = go.Bar(\n             x= x,\n             y= y6,\n             marker={'color' : 'blue'},\n             name =  'Currently not employed',\n             text=y6,\n             textposition='auto'\n              )  \n\ntrace6 = go.Bar(\n             x= x,\n             y= y7,\n             marker={'color' : 'gray'},\n             name = 'Research Scientist',\n             text=y7,\n             textposition='auto'\n              )  \ntrace7 = go.Bar(\n             x= x,\n             y= y8,\n             marker={'color' : 'firebrick'},\n             name = 'Machine Learning Engineer',\n             text=y8,\n             textposition='auto'\n              )  \ntrace8 = go.Bar(\n             x= x,\n             y= y9,\n             marker={'color' : 'snow'},\n             name = 'Business Analyst',\n             text=y9,\n             textposition='auto'\n              )  \ntrace9 = go.Bar(\n             x= x,\n             y= y10,\n             marker={'color' : 'wheat'},\n             name = 'Program\/Project Manager',\n             text=y10,\n             textposition='auto'\n              )  \ntrace10 = go.Bar(\n             x= x,\n             y= y11,\n             marker={'color' : 'pink'},\n             name = 'Data Engineer',\n             text=y11,\n             textposition='auto'\n              )  \ntrace11 = go.Bar(\n             x= x,\n             y= y12,\n             marker={'color' : 'green'},\n             name = 'Product Manager',\n             text=y12,\n             textposition='auto'\n              )  \ntrace12 = go.Bar(\n             x= x,\n             y= y13,\n             marker={'color' : 'violet'},\n             name = 'Statistician',\n             text=y13,\n             textposition='auto'\n              )  \ntrace13 = go.Bar(\n             x= x,\n             y= y14,\n             marker={'color' : 'yellow'},\n             name = 'DBA\/Database Engineer',\n             text=y14,\n             textposition='auto'\n              )  \ntrace14 = go.Bar(\n             x= x,\n             y= y15,\n             marker={'color' : 'magenta'},\n             name = 'Developer Relations\/Advocacy',\n             text=y15,\n             textposition='auto'\n              )  \n\n\nlayout = go.Layout(\n                   title=dict(text = \"Most used ML Algorithm\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Algorithm Name',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11,trace12,trace13,trace14]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","d91a63bb":"df_2018 = pd.read_csv('..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv')\ndf_2018 = df_2018[1:]\ndf_2018","f53c33b4":"df_2019 = pd.read_csv('..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv')\ndf_2019 = df_2019[1:]\ndf_2019","bd967cd7":"df_2020 = pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\ndf_2020 = df_2020[1:]\ndf_2020","468c2685":"x = ['2018','2019','2020','2021']\ny = [df_2018.shape[0],df_2019.shape[0],df_2020.shape[0],df.shape[0]]\nfig = plt.figure(figsize=(10, 6))\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(x))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Number of People Involved in Survey',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","fcebc354":"x = ['2018','2019','2020','2021']\ny = [len(df_2018['Q3'].value_counts().keys()),len(df_2019['Q3'].value_counts().keys()),len(df_2020['Q3'].value_counts().keys()),len(df['Q3'].value_counts().keys())]\nfig = plt.figure(figsize=(10, 6))\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(x))\nax = sns.barplot(x=x,y=y,palette=pal)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nplt.suptitle ('Number of Countries Involved In survey',weight = 'bold')\nplt.xticks(rotation=90,weight = 'bold')\nplt.show()","d8967702":"# Displaying values at the top of the Grouped Bar Chart using plt.text()\nplt.figure(figsize=(20,12))\n\n# set width of bar\nbarWidth = 0.2\n \nx = df['Q1'].value_counts().keys().tolist()\ny1 = []\nfor j in x:\n    if j in df_2018['Q2'].value_counts().keys():\n        y1.append(df_2018['Q2'].value_counts()[j])\n    else:\n        y1.append(0)\ny2 = []\nfor j in x:\n    if j in df_2019['Q1'].value_counts().keys():\n        y2.append(df_2019['Q1'].value_counts()[j])\n    else:\n        y2.append(0)\ny3 = []\nfor j in x:\n    if j in df_2020['Q1'].value_counts().keys():\n        y3.append(df_2020['Q1'].value_counts()[j])\n    else:\n        y3.append(0)\ny4 = []\nfor j in x:\n    if j in df['Q1'].value_counts().keys():\n        y4.append(df['Q1'].value_counts()[j])\n    else:\n        y4.append(0)\n # Set position of bar on X axis\npos1 = np.arange(len(y1))\npos2 = [x + barWidth for x in pos1]\npos3 = [x + barWidth for x in pos2]\npos4 = [x + barWidth for x in pos3]\n\n\n# Make the plot\nplt.bar(pos1, y1, color='#FBC02D', width=barWidth, label='2018')\nplt.bar(pos2, y2, color='#F57F17', width=barWidth, label='2019')\nplt.bar(pos3, y3, color='#E65100', width=barWidth, label='2020')\nplt.bar(pos4, y4, color='red', width=barWidth, label='2021')\n\n\n# Add xticks on the middle of the group bars\nplt.xlabel('Age Group', fontweight='bold')\nplt.ylabel('Number of People', fontweight='bold')\nplt.xticks([i + barWidth for i in range(len(y1))], x)\n\nfor x,y in zip(pos1,y1):\n    plt.text(x, y, '%d' % y, ha='center' , va= 'bottom')\n    \nfor x,y in zip(pos2,y2):\n    plt.text(x, y, '%d' % y, ha='center' , va= 'bottom')\n\nfor x,y in zip(pos3,y3):\n    plt.text(x, y, '%d' % y, ha='center' , va= 'bottom')\n    \nfor x,y in zip(pos4,y4):\n    plt.text(x, y, '%d' % y, ha='center' , va= 'bottom')\n\nplt.title ('$Grouped $  $ Bar $  $ Chart$')\n\n# Create legend & Show graphic\nplt.legend()\nplt.show()","690dde76":"df_2018['Q1'].replace(['Male'],'Man',inplace = True)\ndf_2018['Q1'].replace(['Female'],'Woman',inplace = True)\ndf_2019['Q2'].replace(['Male'],'Man',inplace = True)\ndf_2019['Q2'].replace(['Female'],'Woman',inplace = True)\ndf_2020['Q2'].replace(['Male'],'Man',inplace = True)\ndf_2020['Q2'].replace(['Female'],'Woman',inplace = True)","fd4d79d9":"# Displaying values at the top of the Grouped Bar Chart using plt.text()\nplt.figure(figsize=(20,12))\n\n# set width of bar\nbarWidth = 0.2\n \nx = ['Man','Woman']\n\ny1 = []\nfor j in x:\n    if j in df_2018['Q1'].value_counts().keys():\n        y1.append(df_2018['Q1'].value_counts()[j])\n    else:\n        y1.append(0)\n        \ny2 = []\nfor j in x:\n    if j in df_2019['Q2'].value_counts().keys():\n        y2.append(df_2019['Q2'].value_counts()[j])\n    else:\n        y2.append(0)\n        \ny3 = []\nfor j in x:\n    if j in df_2020['Q2'].value_counts().keys():\n        y3.append(df_2020['Q2'].value_counts()[j])\n    else:\n        y3.append(0)\n        \ny4 = []\nfor j in x:\n    if j in df['Q2'].value_counts().keys():\n        y4.append(df['Q2'].value_counts()[j])\n    else:\n        y4.append(0)\n\n\n # Set position of bar on X axis\npos1 = np.arange(len(y1))\npos2 = [x + barWidth for x in pos1]\npos3 = [x + barWidth for x in pos2]\npos4 = [x + barWidth for x in pos3]\n\n\n# Make the plot\nplt.bar(pos1, y1, color='#FBC02D', width=barWidth, label='2018')\nplt.bar(pos2, y2, color='#F57F17', width=barWidth, label='2019')\nplt.bar(pos3, y3, color='#E65100', width=barWidth, label='2020')\nplt.bar(pos4, y4, color='red', width=barWidth, label='2021')\n\n\n# Add xticks on the middle of the group bars\nplt.xlabel('Gender Groups', fontweight='bold')\nplt.ylabel('Count of People', fontweight='bold')\nplt.xticks([i + barWidth for i in range(len(y1))], x)\n\nfor x,y in zip(pos1,y1):\n    plt.text(x, y, '%d' % y, ha='center' , va= 'bottom')\n    \nfor x,y in zip(pos2,y2):\n    plt.text(x, y, '%d' % y, ha='center' , va= 'bottom')\n\nfor x,y in zip(pos3,y3):\n    plt.text(x, y, '%d' % y, ha='center' , va= 'bottom')\n    \nfor x,y in zip(pos4,y4):\n    plt.text(x, y, '%d' % y, ha='center' , va= 'bottom')\n\nplt.title ('Yearly Wise Gender Distribution')\n\n# Create legend & Show graphic\nplt.legend()\nplt.show()","e1e9b53e":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q3'].value_counts().keys().tolist()\n\ny2 = []\nfor j in x:\n    if j in df_2018['Q3'].value_counts().keys():\n        y2.append(df_2018['Q3'].value_counts()[j])\n    else:\n        y2.append(0)\n        \ny3 = []\nfor j in x:\n    if j in df_2019['Q3'].value_counts().keys():\n        y3.append(df_2019['Q3'].value_counts()[j])\n    else:\n        y3.append(0)\n        \ny4 = []\nfor j in x:\n    if j in df_2020['Q3'].value_counts().keys():\n        y4.append(df_2020['Q3'].value_counts()[j])\n    else:\n        y4.append(0)\n        \ny5 = []\nfor j in x:\n    if j in df['Q3'].value_counts().keys():\n        y5.append(df['Q3'].value_counts()[j])\n    else:\n        y5.append(0)\n\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker= dict (color ='#FF6F00' ),\n             name = '2018',\n             text=y2,\n             textposition='auto'\n             )\n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#FFB300'},\n             name = '2019',\n             text=y3,\n             textposition='auto'\n              )    \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : '#F7DC6F'},\n             name = '2020',\n             text=y4,\n             textposition='auto'\n              ) \n\ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'cyan'},\n             name = '2021',\n             text=y5,\n             textposition='auto'\n              )  \n    \nlayout = go.Layout(\n                   title=dict(text = \"Yearly Wise Country Distribution\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=12000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Countries',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace1,trace2,trace3,trace4]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","6d685915":"df_2018['Q4'].replace(['Master\u00e2\u0080\u0099s degree'],\"Master\u2019s degree\",inplace = True)\ndf_2019['Q4'].replace(['Master\u00e2\u0080\u0099s degree'],\"Master\u2019s degree\",inplace = True)\ndf_2020['Q4'].replace(['Master\u00e2\u0080\u0099s degree'],\"Master\u2019s degree\",inplace = True)\n\ndf_2018['Q4'].replace(['Bachelor\u00e2\u0080\u0099s degree'],\"Bachelor\u2019s degree\",inplace = True)\ndf_2019['Q4'].replace(['Bachelor\u00e2\u0080\u0099s degree'],\"Bachelor\u2019s degree\",inplace = True)\ndf_2020['Q4'].replace(['Bachelor\u00e2\u0080\u0099s degree'],\"Bachelor\u2019s degree\",inplace = True)\n\ndf_2018['Q4'].replace(['Some college\/university study without earning a bachelor\u00e2\u0080\u0099s degree'],\"Some college\/university study without earning a bachelor\u2019s degree\",inplace = True)\ndf_2019['Q4'].replace(['Some college\/university study without earning a bachelor\u00e2\u0080\u0099s degree'],\"Some college\/university study without earning a bachelor\u2019s degree\",inplace = True)\ndf_2020['Q4'].replace(['Some college\/university study without earning a bachelor\u00e2\u0080\u0099s degree'],\"Some college\/university study without earning a bachelor\u2019s degree\",inplace = True)\n\ndf_2018['Q4'].replace(['Professional degree'],\"Professional doctorate\",inplace = True)\ndf_2019['Q4'].replace(['Professional degree'],\"Professional doctorate\",inplace = True)\ndf_2020['Q4'].replace(['Professional degree'],\"Professional doctorate\",inplace = True)","4d9d4647":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = df['Q4'].value_counts().keys().tolist()\n\ny2 = []\nfor j in x:\n    if j in df_2018['Q4'].value_counts().keys():\n        y2.append(df_2018['Q4'].value_counts()[j])\n    else:\n        y2.append(0)\n        \ny3 = []\nfor j in x:\n    if j in df_2019['Q4'].value_counts().keys():\n        y3.append(df_2019['Q4'].value_counts()[j])\n    else:\n        y3.append(0)\n        \ny4 = []\nfor j in x:\n    if j in df_2020['Q4'].value_counts().keys():\n        y4.append(df_2020['Q4'].value_counts()[j])\n    else:\n        y4.append(0)\n        \ny5 = []\nfor j in x:\n    if j in df['Q4'].value_counts().keys():\n        y5.append(df['Q4'].value_counts()[j])\n    else:\n        y5.append(0)\n\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker= dict (color ='#FF6F00' ),\n             name = '2018',\n             text=y2,\n             textposition='auto'\n             )\n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#FFB300'},\n             name = '2019',\n             text=y3,\n             textposition='auto'\n              )    \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : '#F7DC6F'},\n             name = '2020',\n             text=y4,\n             textposition='auto'\n              ) \n\ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'cyan'},\n             name = '2021',\n             text=y5,\n             textposition='auto'\n              )  \n    \nlayout = go.Layout(\n                   title=dict(text = \"Yearly Wise Degree Distribution\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Degree Name',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace1,trace2,trace3,trace4]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","e53c867a":"# Grouped Bar Chart with values displayed inside the bar using \"auto\" textposition \nx = []\nfor i in df['Q5'].value_counts().keys():\n    x.append(i)\nfor i in df_2018['Q6'].value_counts().keys():\n    if i not in x:\n        x.append(i)\nfor i in df_2019['Q5'].value_counts().keys():\n    if i not in x:\n        x.append(i)\nfor i in df_2020['Q5'].value_counts().keys():\n    if i not in x:\n        x.append(i)\n\ny2 = []\nfor j in x:\n    if j in df_2018['Q6'].value_counts().keys():\n        y2.append(df_2018['Q6'].value_counts()[j])\n    else:\n        y2.append(0)\n        \ny3 = []\nfor j in x:\n    if j in df_2019['Q5'].value_counts().keys():\n        y3.append(df_2019['Q5'].value_counts()[j])\n    else:\n        y3.append(0)\n        \ny4 = []\nfor j in x:\n    if j in df_2020['Q5'].value_counts().keys():\n        y4.append(df_2020['Q5'].value_counts()[j])\n    else:\n        y4.append(0)\n        \ny5 = []\nfor j in x:\n    if j in df['Q5'].value_counts().keys():\n        y5.append(df['Q5'].value_counts()[j])\n    else:\n        y5.append(0)\n\n\ntrace1 = go.Bar(\n             x= x,\n             y= y2,\n             marker= dict (color ='#FF6F00' ),\n             name = '2018',\n             text=y2,\n             textposition='auto'\n             )\n\ntrace2 = go.Bar(\n             x= x,\n             y= y3,\n             marker={'color' : '#FFB300'},\n             name = '2019',\n             text=y3,\n             textposition='auto'\n              )    \n\ntrace3 = go.Bar(\n             x= x,\n             y= y4,\n             marker={'color' : '#F7DC6F'},\n             name = '2020',\n             text=y4,\n             textposition='auto'\n              ) \n\ntrace4 = go.Bar(\n             x= x,\n             y= y5,\n             marker={'color' : 'cyan'},\n             name = '2021',\n             text=y5,\n             textposition='auto'\n              )  \n    \nlayout = go.Layout(\n                   title=dict(text = \"Yearly Wise Profession Distribution\",x=0,y=0.95,font_size=25), \n                   barmode = 'group',\n                   width=3000,\n                   height=600,\n                   xaxis_tickangle=-45,\n                   xaxis_tickfont_size=14,\n                   yaxis=dict(\n                               title='Count of people',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ),\n   \n                   xaxis=dict(\n                               title='Current Employement',\n                               titlefont_size=16,\n                               tickfont_size=14,\n                              ), \n                  legend=dict(\n                               x=1,\n                               y=1,\n                               bgcolor='rgba(255, 255, 255, 0)',\n                               bordercolor='rgba(255, 255, 255, 0)'\n                              ),\n                  bargap=0.15, # gap between bars of adjacent location coordinates.\n                  bargroupgap=0.08 # gap between bars of the same location coordinate.\n                 )\n\n\ndata = [trace1,trace2,trace3,trace4]\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","20d87a0f":"#### COOL..!!! Dont worry I will explain each and every step I did above:\n#### The reason y I didnt used value_counts is that is applicable only for a single column not a group of columns.\n#### First created a list col which has all column names belong to question 7\n#### Next append all the programming language names from every column to empty list a(we will get one programming language name from each column)\n#### Next append the count of people using that language from every column to empty list b\n#### Now plot with list a as x axis(programming language names)\n#### list b as y axis(count of people using that programming language)\n#### Hope it is clear...!!!","9b86d410":"## Question 12: Which types of specialized hardware do you use on a regular basis?","54c4a6ac":">## Analysis of degree vs Yearly Compensation","6f380ba7":"#### OHHHH..!! Only people of age 18 or above are participated in survey\n#### We can clearly see that people of age group 25-29 are more involved in survey but people of age group 18-21 and 22-24 are also more in number. So, collectively we can say that people of age between 18-29 involved more in the survey. This means younger people are working hard and this is positive sign for every country\n\n#### Another observation is that as increase in age we can say decrease in number of people in that particular age group..!!","545ee09e":"## Question 2: What is your gender?","f3bf55c9":">#### Most of the people who has never used TPU are of age group 18-21\n>#### Most of the people who used TPU 2-5 times are of age group 25-29\n>#### Most of the people who used TPU 1 time are of age group 22-29\n>#### Most of the people who used TPU 6-25 time are of age group 22-29\n>#### Most of the people who used TPU morethan 25 times are of age group 25-29","3aff5b87":">## Analysis of Gender with Cureent role","1715dd7c":">## Analysis of degree vs Compluting platform used in Data Science projects","fd14789d":"> #### What we got from here..??\n> #### This is also a multi option choosable question\n> #### Most of the people are using Linear or Logistic Regression on regular basis, yes everyone of us will try linear regression algorithm first if the problem is regression one.\n> #### Decision Trees or Random Forests stands in second place \n> #### Option choosed my least number of people is \"other\".\n> #### In the given options least number of people choosed Evolutionary Approaches Algorithms(only 963 people)","26ac3ca9":"#### What we got here..???\n#### OHHH..!!! Most of the people are doing their projects in their laptop a good number of people are using personal computer\/ Desktop\n#### Very less number of people are using A deep learning workstation\n#### One thing I got here is that many people are beginners or started their learning recently. So, a laptop is enough to finish their work and since it was a kaggale survey every one who does work on kaggle at most use laptop..!!","75f421dc":">#### Most of the people in Computers\/Technology industry are of age group 25-29\n>#### Most of the people in Academics\/Education industry are of age group 25-29\n>#### Most of the people in Accounting\/Finance industry are of age group 25-29\n>#### Most of the people in Manufacturing\/Fabrication industry are of age group 25-29\n>#### Most of the people in Mediacl\/Pharmaceutical industry are of age group 25-29\n>#### Most of the people in Government\/Public Services industry are of age group 30-34\n>#### Most of the people in Online Services\/Internet-based Services industry are of age group 25-29\n>#### Most of the people in Energy\/Mining industry are of age group 30-34\n>#### Most of the people in Retail\/Sales industry are of age group 25-29\n>#### Most of the people in Computers\/Technology industry are of age group 25-29\n>#### Most of the people in Insurance\/Risk Assessment industry are of age group 25-29\n>#### Most of the people in Marketing\/CRM industry are of age group 25-29\n>#### Most of the people in Computers\/Technology industry are of age group 25-29\n>#### Most of the people in Broadcasting\/Communications industry are of age group 30-34\n>#### Most of the people in Shipping\/Transportation industry are of age group 30-34\n>#### Most of the people in Non-Profit\/Service industry are of age group 25-29\n>#### Most of the people in Online Business\/Internet-Based sales are of age group 25-29\n>#### Most of the people in Militart\/Security\/Defense industry are of age group 25-29\n>#### Most of the people in Hospitality\/Entertainment\/Sports industry are of age group 25-29","65d9937d":">## Analysis of Profession vs most used ML algorithm","fa4793ef":">## Analysis of age with size of the company","dd120fbe":">## Analysis of age with individuals responsible for data science workloads at your place of business","2b037525":"## Question 36 Part B: Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?","f06e0249":">#### Now let us do some analysis with previous years kaggle survey data","508ec16f":"## Question 37 Part B: Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?","ca4d1460":"## Question 20: In what industry is your current employer\/contract (or your most recent employer if retired)?","d4e149c4":"#### Let us see the column names","7d389ef6":">## Gender vs Programming Language recommended for aspiring Data Scientist","fe933715":"## Question 28: Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?","ffde6ac0":">#### Most of the people who use laptop as a computing platform are of age group 18-21\n>#### Most of the people who use A PC\/desktop as a computing platform are of age group 25-29\n>#### Most of the people who used AWS,AZURE,GCP,Hosted notebooks etc  as a computing platform are of age group 25-29\n>#### Most of the people who used deep learning workstation as a computing platform are of age group 25-29","c0400cf9":">## Analysis of age vs most used ML library","17c864cf":">## Analysis of Profession most used programming language(Python or R) vs age group","9e37a804":"## Question 23: Does your current employer incorporate machine learning methods into their business?","85a6c4dc":"## Question 21: What is the size of the company where you are employed?","aa33fd91":"> #### What we got here...???\n> #### It seems that it is a multiple option choosable question..!!\n> #### Matplotlib library is using by many people. It is pretty obivous that for plotting matplotlib is very necessary and it is the first visualisation library that is introduced to anyone who starts learning..!!\n> #### The next 3 popular libraries used are Seaborn,plotly\/plotly express and Ggplot\/ ggplot2\n> ### Among the options less opted option\/library is Altair..!","1a1b1d4a":"## Question 14: What data visualization libraries or tools do you use on a regular basis?","3a671767":"## Question 40: On which platforms have you begun or completed data science courses?","1382624d":">#### In Masters degree most of the people are of age group 25-29\n>#### In bachelors degree most of the people are of age group 18-21\n>#### In doctoral Degree most of the people are of age group 30-34\n>#### In some college\/university study without earning a bachelors degree most of the people are of age group 18-21\n>#### Most of the people with no formal education past high school are of age group 18-21\n>#### Most of the people with professional doctorate are of age group 30-34","331c29f8":"> #### What we got here..??\n> #### We can see that many have never used TPU till now, It seems that many of them not aware of this and dont know what a TPU does..\n> #### There are only 612 people out of 23k people who have used TPU morethan 25 times","d7c8aee0":"## Question 11: What type of computing platform do you use most often for your data science projects?","d120ceac":">## Analysis of Age with type of computing platform do you use most often for your data science projects","22bb7b9a":"## Question 27: Which of the following cloud computing platforms do you use on a regular basis?","f92d6fc8":"> #### What we got here...??\n> #### This question is also seems likes multi option choosing one.\n> #### Most of the people opted Scikit-learn and it is pretty obivious that we saw above most of them are beginners, beginners mainly work on ML alogorithms and all basic ML algos will available in Sikit-learn, not only beginners even experts use atleast once in their projects.\n> #### TensorFlow, Keras and PyTorch stands in 2,3,4 places respectively..!!!\n> #### Least used Framework is Caret","ae14f432":">#### Most of the people with coding experience 1-3 years are of age group 18-21\n>#### Most of the people with coding experience lessthan 1 year are of age group 18-21\n>#### Most of the people with coding experience 3-5 years are of age group 25-29\n>#### Most of the people with coding experience 5-10 years are of age group 30-34\n>#### Most of the people with coding experience 10-20 years are of age group 35-39\n>#### Most of the people with coding experience 20+ years are of age group 45-49\n>#### Most of the people who have never written code are of age group 25-29\n>#### One more intresting fact we can see here is that 6 people from age age group 18-21, 5 from age group 22-24, 5 from age group 25-29 have given that they have 20+ years experience in coding which is false information given by them in the survey..!!","852647dd":"## Question 5: Select the title most similar to your current role (or most recent title if retired)?","301f7951":"># Description Of Challenge","f880cc43":">## Analysis of Profession vs how many years have you used machine learning methods","7b313ff1":">## Analysis of degree vs Current Employement","d40fb862":"> #### What we got from here..???\n> #### OHHH..!!!! we can see that many people are not using any specialized hardwares, as above we saw that many people are having a laptop and many laptops wont have any GPUs.\n> #### Even I got introduced to these GPUs and TPUs by kaggle notebooks..\n> #### Out Of all Hardwares mentioned above,AWS Trainium Chips and AWS Inferentia Chips are used by less people","a8201cbd":">## Analysis of Gender with country","a2a258cc":">## Analysis of Profession with bussiness intelligence tools","06d48050":">#### Most of the people who recommend python for aspiring data scientists are of age group 18-21\n>#### Most of the people who recommend R for aspiring data scientists are of age group 25-29\n>#### Most of the people who recommend SQL for aspiring data scientists are of age group 25-29\n>#### Most of the people who recommend C for aspiring data scientists are of age group 18-21\n>#### Most of the people who recommend C++ for aspiring data scientists are of age group 18-21\n>#### Most of the people who recommend Java for aspiring data scientists are of age group 18-21\n>#### Most of the people who recommend MATLAB for aspiring data scientists are of age group 18-21\n>#### Most of the people who recommend Julia for aspiring data scientists are of age group 30-34\n>#### Most of the people who recommend JavaScript for aspiring data scientists are of age group 18-21\n>#### Most of the people who recommend python for aspiring data scientists are of age group 18-21\n>#### Most of the people who recommend no programming language for aspiring data scientists are of age group 18-21","76dc6260":"> ## Analysis of Age with gender using grouped bar plots","84b2f7e3":"#### Now What we will do is we need to analyse the options choosed by the people of age group 18-21 to all the questions","56a78b6c":">## Analysis of Degree vs Individuals Responsible for data science at their business","e43c93ff":"## Question 30 Part B: In the next 2 years, do you hope to become more familiar with any of these specific data storage products?","f865c443":">## Analysis of age vs usage of ML methods in their company","38a50e86":">## Analysis of Profession with programming language would you recommend an aspiring data scientist to learn first","0ea94e2a":">## Analysis of Age with current employer Industry","aa7648a1":"## Question 37: Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?","072eae23":"## Question 36: Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?","97c6a412":"## Question 31: Do you use any of the following managed machine learning products on a regular basis?","b288ae39":"#### In this notebook I have first done analysis of all 42 questions in the survey, next I have analysed deeper by taking each group of age, gender, degree, profession using groupby plots at last done some more analysis by taking previous years data.","9da63029":"#### Now I will create multitables and divide questions with single choosable option into one category and questions with multi choosed option to another..!!","70e78d77":">## Analysis of most used programming language(Python or R) vs age group","f3bbc00a":">## Analysis of age with home many times they have used TPU","c2fa8ff1":">## Analysis of Degree vs Current Employer\/contract","6f49eee6":"## Question 32 Part B: Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?","72f1f47f":"## Question 18: Which categories of computer vision methods do you use on a regular basis?","996cce12":"## Question 26: Approximately how much money have you (or your team) spent on machine learning and\/or cloud computing services at home (or at work) in the past 5 years (approximate USD)..??","29eb7f0c":"#### Welcome to Kaggle's annual Machine Learning and Data Science Survey competition!\n\n#### The challenge objective: tell a data story about a subset of the data science community represented in this survey, through a combination of both narrative text and data exploration. A \u201cstory\u201d could be defined any number of ways, and that\u2019s deliberate. The challenge is to deeply explore (through data) the impact, priorities, or concerns of a specific group of data science and machine learning practitioners. That group can be defined in the macro (for example: anyone who does most of their coding in Python) or the micro (for example: female data science students studying machine learning in masters programs). This is an opportunity to be creative and tell the story of a community you identify with or are passionate about!","30e5f4aa":"## Question 15: For how many years have you used machine learning methods?","3e4f4730":"## Question 7: What programming languages do you use on a regular basis?","79e85dd8":"## Question 38: Do you use any tools to help manage machine learning experiments?","26f9df60":"#### There are a total of 11 age groups here lets us analyze each group wise","779984e2":">## Analysis of age vs degree","53b96156":">## Analysis of Degree vs Programming language recommended for an aspiring data scientist","890bdf50":"# Question 35: Which of the following business intelligence tools do you use most often?","e67e1910":">#### Most of the people who work in company of size 0-49 employees are of age group 25-29\n>#### Most of the people who work in company of size 10,000 or more employees are of age group 25-29\n>#### Most of the people who work in company of size 1000-9999 employees are of age group 30-34\n>#### Most of the people who work in company of size 50-249 employees are of age group 25-29\n>#### Most of the people who work in company of size 250-999 employees are of age group 25-29\n>#### People with age groups 18-21,22-24,25-29,30-34,35-39,45-49,50-54,55-59,60-69,70+ are more in companies with 0-49 employees\n>#### People with age group 40-44 are more in companies with employee size 10,000 or more\n>#### People with age group 50-54 are more in companies with employee size 1000-9999","ac23614a":"## Question 22: Approximately how many individuals are responsible for data science workloads at your place of business?","d6664032":">#### First Lets us check how many responses given to the survey each year","c2ad63ba":">## Analysis of profession with home many times they have used TPU","3a7ed160":">#### 21.3% of employees stated that they are exploring to use ML methods and may put into production in their business which is highest among all\n>#### 20.5% of employees stated that they are not using any ML methods in their business.\n>#### 17% of employees stated that they don't know whether they use or not\n>#### 10.7% of employees stated that they only used ML methods to generate insights but not put working models into production which is lowest among all\n>#### Combinely 30.6% of employees stated that they are using ML methods frrom 0-4 years in their business production","d6f901bf":">## Analysis of Gender vs Current Employer\/Contract","e2854c9d":">## Analysis of age with bussiness intelligence tools","3b42e863":"> # **Analysis and Exploration of people with all age group by group by plots**","281ab32b":"## Question 25: What is your current yearly compensation (approximate USD)?","4479ef7d":"## Question 39: Where do you publicly share your data analysis or machine learning applications?","45d7f8ed":"># Analysis of all types of degrees with groupby plots","0b16615a":">#### 31.1% of people are working in company of size 0-50 employees which is highest among all\n>#### 21% of the people are working in company of size 10,000+ employees\n>#### 18.8% of the people are working in company of size 1000-9999 employees\n>#### 15.8% of the people are working in company of size 50-249 employees\n>#### 13.3% of thr people are working in company of size 250-999 employees which is least among all","2b323e55":"## Question 17: Which of the following ML algorithms do you use on a regular basis?","1ff6fb4d":"#### Everything is completed except writing reports for some plots.\n#### Upvote is free and make sure to upvote and give some suggestions in comment section for improvement..!!!","c9545c2e":">## Analysis of most used programming language(Python or R) vs degree","446af82c":"# **LOADING DATASET**","ddcfaec3":">## Analysis of Age vs how many years have you used machine learning methods","0964d4ad":"## Question 32: Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?","58914beb":">## Analysis of age vs current yearly compensation","f996bbe8":">## Analysis of Profession with size of the company","e35b314a":">## Analysis of degree vs Coding Experience","f4784f2d":"#### What we got here..?\n#### WAAAHH...!!! Most of the People in kaggle are Students(includig me). It is pretty obvious that students have more time to do this stuff.\n#### Data scientists stood at 2nd place\n#### One intresting fact is that Software Engineers are more than Data analyst, machine learning engineers, data engineers\n#### Developers are very less as we know both the domains are quite different but some are doing Kaggle as their daily hobby..!! That's good..!!","e59f169b":"## Question 3: In which country do you currently reside?","392ee23a":">## Analysis of Profession with current employer Industry","153b41ac":"## Question 41: What is the primary tool that you use at work or school to analyze data? ","f982bbe8":"## Question 34 Part B: Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?","8dbec664":"## Question 34: Which of the following business intelligence tools do you use on a regular basis?","54031a11":">#### 25% of the people are from computers\/Technology contract\n>#### 19.7% of people are from Academics\/Education, so all the students comes into this category\n>#### 9% of people are from Accounting\/Finance\n>#### Very less number of people are from Hospitality\/Entertainment\/Sports, Military\/Security\/Defense only 1%","eedd72b2":"># Introduction","7387e984":"#### Let us first create a dataframe containing only people of age group 18-21\n\n#### We can do that by pandas indexing okay lets do it..!!!","27fea768":"> # **Analysis and Exploration of people with gender(Man,Woman) by group by plots**","1b07c04e":"## Question 9: Which of the following integrated development environments (IDE's) do you use on a regular basis?","04561354":"#### What we got from this...!!!\n\n#### It is pretty known that people will use python more and followed by SQL(since we can do queries with sql which is very important..!!!)\n#### C++ and R is also used by many people\n#### R can explain statistics of the data deeper than python...!!\n#### Swift is used by less people..!!\n#### I'm pretty confused that some people not using any language may be they have a habit of reading the notebooks and learn..!!!","0c1c6c6a":">#### 21.9% of people are earning 0-999 USD per year highest among all\n>#### 6.3% people are earning 1,000-1999 USD per year\n>#### Only 0.208% people are earning 500,000-999,999 USD per year which is lowest among all","dcb528aa":">## Analysis of Age vs Profession with group bar plot","5c9c1728":"#### Lets us again see how many different age-group people are present..!!","c8ff3bd9":">#### 22.6% of people are working in a company where 1-2 people are responsible for data science workloads which is highest\n>#### 22.3% of people are working in a company where 20+ people are responsible for data science workloads\n>#### 2.61% of people are working in a company where 15-19 people are responsible for data science workloads which is lowest\n>#### 19% of people are working in a company where no employee is responsible for data science workload this is intresting as many companies are not using data science \n>#### Another Interesting fact is, If we observe top 2 percentages of employees having data science workloads we can see that either the company has only 1 or 2 employees responsible for data science workload oe they are having morethan 20+ employees responsible for data science workload","3fcf2086":"## Question 4 : What is the highest level of formal education that you have attained or plan to attain within the next 2 years?","a1fc2b2c":"> #### Above we can see all the names of 369 columns, We can clearly observe that many questions has single and multiple type choices given to choose and some questions also has 2 parts","65c1846b":"## Question 29: Do you use any of the following cloud computing products on a regular basis?","fb061136":">## Analysis of age with big data products they use most often","cd127f2d":"## Question 29 Part B: In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?","719f0aaa":">## Analysis of degree vs most used ML library","2c9ceff9":"#### Do cross checking by again using function value_counts","4a1777fb":"> #### What I did above is first I have taken the column\/series in which age groups are present i.e.,, column Q1. we caan call that series using df['Q1'] next use conditional operator ==. How to use that is df['Q1'] == \"18-21(age group you need)\", now this will return a series of boolean values and next if we apply df to this we will get our required dataframe.","d753f747":"#### What we got here...????\n\n#### Most of the people did masters's degree or willing to do masters's degree in next two years and also many students did bachelor's degree.\n#### We already know the fact that people between age 18-29 are more, so it is very often that maximum people in that age will do bacheolr's or master's degree and there are people without bachelor's degree but less in number\n#### One intresting thing is that some people with no formal education are on Kaggle.. Thats pretty good..!!!!","3d73e2a8":"## Question 19: Which of the following natural language processing (NLP) methods do you use on a regular basis? ","d357e9db":"## Question 13: Approximately how many times have you used a TPU (tensor processing unit)?","457b9854":">#### Irrespective of number of individuals responsible for data science role, In every case people of age group 25-29 are more","3885ac05":">## Analysis of Most used Programing Language vs Gender","774ba73a":"#### What we got here..??\n#### Okayy..!! Many people having coding experience between 0-3 years\n#### There are good number of people who has coding experience greather than 5 years\n#### OHHHH..!!! There are few people who are never been in to coding, It signifies that people who have no experience can also survive this.","cdd07cf3":"### NOTE: IF NOTEBOOK IS NOT LOADING PLEASE WAIT FOR COUPLE OF MINS SINCE NOTEBOOK HAS MANY PLOTS IT TAKES TIME TO LOAD","fd1fbb73":"#### Whaattt...???? ufff morethan 79%(20598) people involved in the survey are men... Men are more involved in kaggle than any other gender(Men are working hard :D)","73ae6827":">  ### I will visualise with help of plots and multi_tables to understand more of the data","31989e2d":">## Analysis of Degree vs Number of times Machine learning models used","2f3d17b0":"## Question 16:Which of the following machine learning frameworks do you use on a regular basis?","d83035d5":"## Question 42: Who\/what are your favorite media sources that report on data science topics?","132b8880":"> #### It is already given that the survey form has 42+ questions and now we can clearly see that first row of the data frame is having the questions asked during survey ","463c0da9":"## Question 38 Part B: In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?","52c54816":">## Analysis of age vs cloud platforms with develpoer experience ","0c5f2255":">## Analysis of profession vs most used ML library","29ba65f7":"## Question 6: For how many years have you been writing code and\/or programming?","ac3c1411":"# **IMPORTING LIBRARIES**","275caf02":"> ## Analysis of all groups of age with bachelors degree","417736ff":"### Part A","3eaaa311":"> ## Analysis of age with coding experience","6a6186f4":"> ## Now, first let us explore all the questions in the survey","6192d083":"## Question 1: What is your age (# years)?","5ca62a20":"## Question 27 Part B:Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?","51d3ab8a":"#### What did we got from this....??\n#### OHHHHH..!!! there are only 3 options above 2000 votes and they are no where near that number.. \n#### Most of the people are using Colab Notebooks on regular basis\n#### Kaggle Notebook stands is second place but not much difference\n#### Suprisingly the 3rd most opted option is None may be they are using jupyter notebook I think since it is not mentioned in the options\n#### Observable Notebooks stands in last place","bd608483":"## Question 31 Part B: In the next 2 years, do you hope to become more familiar with any of these managed machine learning products? ","4416c32d":"># Analysis with respect to current role of people by groupby plots","0397ab8a":">#### Most of the students are of age group 18-21\n>#### Most of the data scientist are of age group 25-29\n>#### Most of the software engineer are of age group 25-29\n>#### Most of the Data Analyst are of age group 25-29\n>#### Most of the unemployed are of age group 25-29\n>#### Most of the Reasearch Analyst are of age group 30-34\n>#### Most of the Machine Learning Engineer are of age group 25-29\n>#### Most of the Busineess Analyst are of age group 25-29\n>#### Most of the program\/ Product Manager are of age group 45-49\n>#### Most of the Data Engineer are of age group 25-29\n>#### Most of the product Manager are of age group 40-44\n>#### Most of the Statistician are of age group 25-29\n>#### Most of the DBA\/Database Engineer are of age group 30-34\n>#### Most of the developer Relations\/Advocacy are of age group 35-39","f493f63a":"> #### What we got from here..??\n> #### Most of the people are using Word embeddings\/vectors (GLoVe, fastText, word2vec) NLP method on regular basis..!! and if you want to know word embeddings library\/method used to find which categorical value repeated most in that particular column..!!!\n> #### Transformer language models (GPT-3, BERT, XLnet, etc) NLP model stands in second place\n> #### Least number of people are using Contextualized embeddings (ELMo, CoVe) NLP method..!!","38351d6f":"#### What we got here..??\n#### Most of the people are using Jupyter Notebook mainly because we can execute line to line of our code..!!\n#### Visual Studio code is at second, Pycharm at third\n#### People who use R language are pretty good in number so they are using RStudio.","552bd5e0":"> #### What we got here..????\n> #### Wowwww..!! more than people from 60 different countries are the part of kaggle community, It shows how big is this platform and we can also say this is a data ocean where different rivers(people from different countries) comes inside it. It will also increase the communication of people from different countries.\n\n> #### Also I am pround because Indians involved most in this survey with 7434 people and they are very actively giving their contribution to the kaggle community.\n\n> #### People from USA are more next to Indias with 2650 in number","7c8de5da":">#### First let us load 2018,2019,2020 kaggle survey data","4703bfef":">## Analysis of Age with programming language would you recommend an aspiring data scientist to learn first","7f204d01":">## Analysis of Gender vs Yearly Compensation","bd3c948a":"## Question 33: Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?","e6e38e89":">## Analysis of Profession vs current yearly compensation","6da27b01":"## Question 24:Select any activities that make up an important part of your role at work:","96a13422":"## Question 8: What programming language would you recommend an aspiring data scientist to learn first?","ed5e7323":">## Analysis of degree vs most used ML algorithm","e8bd8765":"># Analysis By taking Previous Years Survey Data","1bbb14f9":"># Visualization of all 42 Questions","188ea97f":">## Analysis of Profession with type of computing platform do you use most often for your data science projects","fa6b1f7f":">## Analysis of Age vs Primary tool use to analyze data","482e133f":"> #### What we got from here..??\n> #### Most of the people are using Image classification and other general purpose networks (VGG, Inception, ResNet, ResNeXt, NASNet, EfficientNet, etc this computer vision method on regular basis.\n> #### Good thing is every option is almost balanced here no bias that means all methods which are available in computer methods are using regularly by people who want to use..!!!","c581f17b":">## Analysis of Profession with coding experience","b6d97650":">## Analysis of Gender with Coding Experience","f7aaec2c":"> #### We have seen what are the questions asked in the survey and what options are mainly choosed by people..!! Now lets explore the answers given by people age wise i.e., Now I am going to do analysis on age wise and we can unserstand the mind set and tools, ML algos, NLP methos etc....!! used by that particular age people..!!","35f5ffd7":"## Question 10: Which of the following hosted notebook products do you use on a regular basis?","ea7a4dc3":">## Analysis of age vs most used ML algorithm","e01209cf":"#### What we got here..??\n#### Many of them suggested to learn python first and yes it was a very good opinion by most of them.\n#### In my opnion python and sql are most important languages to learn first for an aspiring data scientist.\n#### After python R is choosed mostly next and yes it is a powerful language.\n#### Swift is recommended by less number of people","58640151":">## Analysis of age with countries","33a2314c":">#### In man most of the people belong age group 25-29\n>#### In woman most of the people belong age group 18-21","2b051d36":"># Lets get Started","11237f32":"## Question 30: Do you use any of the following data storage products on a regular basis?","06f84686":"> #### What we got here..??\n> #### Many people are using ML methods since less than a year, this means many are new to this subject and interest of people towards this subject is increasing these days(from less than a year)\n> #### Only 2% people are using these methods from 10-20 or morethan 20+ years..\n> #### Pretty surprisingly 3rd most opted option\/choicee is \"I do not use machine learning methods\". May be they are intrested only in reading the notebooks..!!","f65ad313":">#### Most of the people who are using ML models since 1 year are of age group 18-21\n>#### Most of the people who are using ML models since 1-2 years are of age group 22-24\n>#### Most of the people who are not using ML models are of agae group 18-21\n>#### Most of the people who are using ML models since 2-3 years are of age group 25-29\n>#### Most of the people who are using ML models since 3-4 years are of age group 25-29\n>#### Most of the people who are using ML models since 5-10 years are of age group 30-34\n>#### Most of the people who are using ML models since 4-5 years are of age group 30-34\n>#### Most of the people who are using ML models since 10-20 years are of age group 40-44\n>#### Most of the people who are using ML models since 20 years are of age group 55-59\n>#### One more intresting fact here is 2 people from age group 18-21, 4 from age group 22-24, 2 from age group 25-29 stated that they have been using ML methods since 20+ years which is not possible, they have given false information","7d169bfe":">## Analysis of age vs money spent to learn ML\/cloud computing services in past 5 years"}}