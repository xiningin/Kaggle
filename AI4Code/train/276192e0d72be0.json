{"cell_type":{"f83db23a":"code","eed4750d":"code","ecf2329e":"code","00e0ba9c":"code","f7a3ad10":"code","cd42b13b":"code","7ae1f6cf":"code","ddd0540e":"code","90cbca49":"code","69c03fa9":"code","be047233":"code","0d43f04a":"code","efa3334f":"code","0538307c":"code","e11eda29":"code","8d1cf379":"code","1cdad542":"code","e3b10e52":"code","be3b361f":"code","9617720c":"code","c3a556fd":"code","b50c20e9":"code","0d7c7d39":"code","1e98c5d7":"code","44c46599":"code","bba2875e":"markdown","9f8880df":"markdown"},"source":{"f83db23a":"## Import needed packages\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\n%matplotlib inline\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\n## to ignore waarning\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)","eed4750d":"## import data \n\ndf = pd.read_csv('..\/input\/paysim1\/PS_20174392719_1491204439457_log.csv')\ndf.head()","ecf2329e":"df.info()","00e0ba9c":"df.shape","f7a3ad10":"## to rename columns for out readablility\n\ndf = df.rename(columns={'oldbalanceOrg':'oldBalanceOrig', \n                        'newbalanceOrig':'newBalanceOrig',\n                        'oldbalanceDest':'oldBalanceDest', \n                        'newbalanceDest':'newBalanceDest'})\n\ndf.head()","cd42b13b":"## drop isFlaggedFraud\n\ndf = df.drop('isFlaggedFraud', axis=1)\ndf.columns","7ae1f6cf":"## to plot countplot\nplt.figure(figsize=(4, 2), dpi=150)\nsns.countplot(x='isFraud', data=df)","ddd0540e":"## to count fraud and non-fraud \n\nprint('Total number of Non-fraud transaction {}. \\nTotan number of Normal Transaction {}' .format((df.isFraud == 1).sum(), (df.isFraud == 0).sum()))","90cbca49":"label = ['Fraud', 'Non-Fraud']\ndata = [(df.isFraud == 1).sum(), (df.isFraud == 0).sum()]\nplt.figure(figsize = (5, 5), dpi=150)\nplt.pie(data, labels=label, explode = [0.2, 0.2])","69c03fa9":"## Lets check null values \n\ndf.isnull().sum()","be047233":"dfFraud = df.loc[df.isFraud == 1]\n\ndfFraud.head()","0d43f04a":"dfNonFraud = df.loc[df.isFraud == 0]\n\ndfNonFraud.head()","efa3334f":"dfFraudTransfer = dfFraud.loc[dfFraud.type == 'TRANSFER']\ndfFraudTransfer.head()","0538307c":"dfFraudCashout = dfFraud.loc[dfFraud.type == 'CASH_OUT']\ndfFraudCashout.head()","e11eda29":"## Lets rise some important questions\n\n## 1. What are the types for fraud transactions?\n## 2. How many unique origins are there in fraud transfer transactions?\n## 3. How many unique destinations are there in fraud transfer transactions?\n## 4. How many unique origins are there in fraud cash out transactions?\n## 5. How many unique destinations are there in fraud cash out transactions?\n## 6. How many fraud transfer transactions have destinations which are origins in fraud cash out transactions?\n## 7. How many fraud transfer transactions have destinations which are origins in genuine cash out transactions?\n## 8. How many genuine transfer transactions have destinations which are origins in fraud cash out transactions?\n## 9. How many genuine transfer transactions have destinations which are destinations in fraud transfer transactions?\n## 10. How many genuine transfer transactions have origins which are destinations in fraud transfer transactions?\n## 11. How many genuine transfer transactions have origins which are origins in fraud transfer transactions?\n## 12. How many genuine transfer transactions have destinations which are origins in fraud transfer transactions?\n\nprint(\"1. What are the types for fraud transactions? \\n\\n Answer: {}\".\\\n      format(dfFraud.type.drop_duplicates().values))\nprint(\"\\n\\n2. How many unique origins are there in fraud transfer transactions?\\n\\n Answer: {} \/ {}\".\\\n      format(len(dfFraud.loc[dfFraud.type == 'TRANSFER'].nameOrig.drop_duplicates().values),len(dfFraud.loc[dfFraud.type == 'TRANSFER'])))\nprint(\"\\n\\n3. How many unique destinations are there in fraud transfer transactions?\\n\\n Answer: {} \/ {}\".\\\n      format(len(dfFraud.loc[dfFraud.type == 'TRANSFER'].nameDest.drop_duplicates().values),len(dfFraud.loc[dfFraud.type == 'TRANSFER'])))\nprint(\"\\n\\n4. What are the types for fraud transactions? \\n\\n Answer: {}\".\\\n      format(dfFraud.type.drop_duplicates().values))\nprint(\"\\n\\n5. How many unique origins are there in fraud transfer transactions?\\n\\n Answer: {} \/ {}\".\\\n      format(len(dfFraud.loc[dfFraud.type == 'TRANSFER'].nameOrig.drop_duplicates().values),len(dfFraud.loc[dfFraud.type == 'TRANSFER'])))\nprint(\"\\n\\n6. How many unique destinations are there in fraud transfer transactions?\\n\\n Answer: {} \/ {}\".\\\n      format(len(dfFraud.loc[dfFraud.type == 'TRANSFER'].nameDest.drop_duplicates().values),len(dfFraud.loc[dfFraud.type == 'TRANSFER'])))\nprint(\"\\n\\n7. How many unique origins are there in fraud cash out transactions?\\n\\n Answer: {} \/ {}\".\\\n      format(len(dfFraud.loc[dfFraud.type == 'CASH_OUT'].nameOrig.drop_duplicates().values),len(dfFraud.loc[dfFraud.type == 'CASH_OUT'])))\nprint(\"\\n\\n8. How many unique destinations are there in fraud cash out transactions?\\n\\n Answer: {} \/ {}\".\\\n      format(len(dfFraud.loc[dfFraud.type == 'CASH_OUT'].nameDest.drop_duplicates().values),len(dfFraud.loc[dfFraud.type == 'CASH_OUT'])))\n\n\nprint(\"\\n\\n9. How many fraud transfer transactions have destinations which are origins in fraud cash out transactions?\\n\\n Answer: {}\".\\\n     format(dfFraudTransfer.nameDest.isin(dfFraudCashout.nameOrig.unique()).sum()))\nprint(\"\\n\\n10. How many fraud transfer transactions have destinations which are origins in genuine cash out transactions?\\n\\n Answer: {}\".\\\n     format(dfFraudTransfer.nameDest.isin(dfNonFraud.loc[dfNonFraud.type == 'CASH_OUT'].nameOrig.unique()).sum()))\nprint(\"\\n\\n11. How many genuine transfer transactions have destinations which are origins in fraud cash out transactions?\\n\\n Answer: {}\".\\\n     format(dfNonFraud.loc[dfNonFraud.type == 'TRANSFER'].nameDest.isin(dfFraudCashout.nameOrig.unique()).sum()))\nprint(\"\\n\\n12. How many genuine transfer transactions have destinations which are destinations in fraud transfer transactions?\\n\\n Answer: {}\".\\\n     format(dfNonFraud.loc[dfNonFraud.type == 'TRANSFER'].nameDest.isin(dfFraudTransfer.nameDest.unique()).sum()))\nprint(\"\\n\\n13. How many genuine transfer transactions have origins which are destinations in fraud transfer transactions?\\n\\n Answer: {}\".\\\n     format(dfNonFraud.loc[dfNonFraud.type == 'TRANSFER'].nameOrig.isin(dfFraudTransfer.nameDest.unique()).sum()))\nprint(\"\\n\\n14. How many genuine transfer transactions have origins which are origins in fraud transfer transactions?\\n\\n Answer: {}\".\\\n     format(dfNonFraud.loc[dfNonFraud.type == 'TRANSFER'].nameOrig.isin(dfFraudTransfer.nameOrig.unique()).sum()))\nprint(\"\\n\\n15. How many genuine transfer transactions have destinations which are origins in fraud transfer transactions?\\n\\n Answer: {}\".\\\n     format(dfNonFraud.loc[dfNonFraud.type == 'TRANSFER'].nameDest.isin(dfFraudTransfer.nameOrig.unique()).sum()))\nprint('\\n\\n16. Min, Max of Fraud Transactions\\n\\n Answer: {} - {}'.\\\n      format(dfFraud.amount.min(),dfFraud.amount.max()))\nprint('\\n\\n17. Min, Max of Non-Fraud Transactions\\n\\n Answer: {} - {}'.\\\n      format(dfNonFraud.amount.min(),dfNonFraud.amount.max()))","8d1cf379":"df['isFraud'].value_counts()","1cdad542":"## create copy \ndf_copy = df.copy()\n\n# pie plot\nfig = go.Figure(data=[go.Pie(labels=['Not Fraud', 'Fraud'], values = df_copy['isFraud'].value_counts())])\nfig.show()","e3b10e52":"## drop 'nameOrig' and 'nameDest' \n\ndf = df.drop(['nameOrig','nameDest'], axis=1)\ndf.head()","be3b361f":"## encode 'type' column \n\nenc = LabelEncoder()\ndf['type'] = enc.fit_transform(df['type'])\nprint(\"classes of LabelEncoder\", list(enc.classes_))\nprint('\\n')\ndf.head()","9617720c":"## Get type \n\ndf.dtypes","c3a556fd":"## seperate independ and Depentent variables\n\nX = df.drop('isFraud', axis=1)\ny = df['isFraud']","b50c20e9":"## train test splot with 30% test data, 70% train data\n\n# help(train_test_split)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)","0d7c7d39":"# import linrary\nfrom xgboost import XGBClassifier\n\nxgb_model = XGBClassifier().fit(X_train, y_train)\n\n# predict\nxgb_y_predict = xgb_model.predict(X_test)","1e98c5d7":"from sklearn.metrics import precision_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import roc_auc_score\n\nlist_label = ['Accuracy', 'Precision', 'F1 score', 'Recall Score', 'AUC']\nlist_values = []\n\nlist_values.append(accuracy_score(xgb_y_predict, y_test))\nlist_values.append(precision_score(xgb_y_predict, y_test))\nlist_values.append(f1_score(xgb_y_predict, y_test))\nlist_values.append(recall_score(xgb_y_predict, y_test))\nlist_values.append(roc_auc_score(xgb_y_predict, y_test))\n\nprint(list_values)","44c46599":"print(list_values)","bba2875e":"The dataset which contains no null values.","9f8880df":"## Dataset description\n\n1. step - maps a unit of time in the real world. In this case 1 step is 1 hour of time. Total steps 744 (30 days simulation).\n2. type - CASH-IN, CASH-OUT, DEBIT, PAYMENT and TRANSFER.\n3. amount - amount of the transaction in local currency.\n4. nameOrig - customer who started the transaction\n5. oldbalanceOrg - initial balance before the transaction\n6. newbalanceOrig - new balance after the transaction\n7. nameDest - customer who is the recipient of the transaction\n8. oldbalanceDest - initial balance recipient before the transaction. Note that there is not information for customers that start with M (Merchants).\n9. newbalanceDest - new balance recipient after the transaction. Note that there is not information for customers that start with M (Merchants).\n10. isFraud - This is the transactions made by the fraudulent agents inside the simulation. In this specific dataset the fraudulent behavior of the agents aims to profit by taking control or customers accounts and try to empty the funds by transferring to another account and then cashing out of the system.\n11. isFlaggedFraud - The business model aims to control massive transfers from one account to another and flags illegal attempts. An illegal attempt in this dataset is an attempt to transfer more than 200.000 in a single transaction."}}