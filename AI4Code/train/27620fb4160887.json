{"cell_type":{"1bdfa4cb":"code","97ae8653":"code","48c96b69":"code","779f395d":"code","e0ed987b":"code","fd188c8a":"code","1ecedff3":"code","3acdd251":"code","b4918091":"code","d2b4aeb8":"code","8e505e0c":"code","7287a6b2":"code","1bf3f3b6":"code","98a6798f":"code","2317ebc4":"code","bbc903f1":"code","dc4354f8":"code","b1f501b3":"code","9f6b2313":"code","c5523d1f":"code","eb399b71":"code","501816f6":"markdown","86c3f36e":"markdown","486a196a":"markdown","8d826ea4":"markdown","4a51928e":"markdown","4a36b6ea":"markdown","e8691278":"markdown","e48c7446":"markdown","58228dd4":"markdown"},"source":{"1bdfa4cb":"import pandas as pd","97ae8653":"dfGenderSubmission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ndfTest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndfTrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","48c96b69":"dfGenderSubmission.shape","779f395d":"dfGenderSubmission.head(1)","e0ed987b":"dfTest.shape","fd188c8a":"dfTest.head(1)","1ecedff3":"dfTrain.shape","3acdd251":"dfTrain.head(1)","b4918091":"#Assumption: consider only Gender and Age as the identifier to predict the survival result\ndfTrain = dfTrain[['Sex','Age','Pclass','Survived']]\ndfTrain.head(3)","d2b4aeb8":"#Breakdown the Age into 4 categories: Child, Teenage, Adult and Oldery\ndfTrain.loc[dfTrain['Age']<=12,'AgeCat'] = 'Child'\ndfTrain.loc[(dfTrain['Age']>12)&(dfTrain['Age']<=25),'AgeCat'] = 'Teenage'\ndfTrain.loc[(dfTrain['Age']>25)&(dfTrain['Age']<=45),'AgeCat'] = 'Adult'\ndfTrain.loc[dfTrain['Age']>45,'AgeCat'] = 'Oldery'\n\ndfTrain","8e505e0c":"#Data Cleaning to remove rows with blank\/duplicate Age information\ndfTrain.dropna(inplace=True)\ndfTrain.drop_duplicates(inplace=True)\n\ndfTrain","7287a6b2":"#Show result of DataFrame based on Gender and AgeCat\ndfTrain.groupby(['Sex','AgeCat','Pclass','Survived']).agg({'Survived':'count'}).unstack().reset_index()","1bf3f3b6":"#Grouping the DataFrame based on Class\ndfTrain1 = dfTrain.loc[(dfTrain['Pclass']==1)]\ndfTrain2 = dfTrain.loc[(dfTrain['Pclass']==2)]\ndfTrain3 = dfTrain.loc[(dfTrain['Pclass']==3)]","98a6798f":"dfTrain1.groupby(['Sex','AgeCat','Survived']).agg({'Survived':'count'}).unstack().reset_index()","2317ebc4":"dfTrain2.groupby(['Sex','AgeCat','Survived']).agg({'Survived':'count'}).unstack().reset_index()","bbc903f1":"dfTrain3.groupby(['Sex','AgeCat','Survived']).agg({'Survived':'count'}).unstack().reset_index()","dc4354f8":"#Prediction\ndfTest.head(1)","b1f501b3":"#To classify dfTest based on Age Category\ndfTest = dfTest[['PassengerId','Sex','Age','Pclass']]\n\ndfTest.loc[dfTest['Age']<=12,'AgeCat'] = 'Child'\ndfTest.loc[(dfTest['Age']>12)&(dfTest['Age']<=25),'AgeCat'] = 'Teenage'\ndfTest.loc[(dfTest['Age']>25)&(dfTest['Age']<=45),'AgeCat'] = 'Adult'\ndfTest.loc[dfTest['Age']>45,'AgeCat'] = 'Oldery'\n\ndfTest","9f6b2313":"#To make a prediction whether each PassengerId will survive or not based on Modelling\ndfTest.loc[(dfTest['Sex'] == 'male'),'Survived'] = 0\ndfTest.loc[(dfTest['Pclass'] == 1)&(dfTest['AgeCat'] =='Adult'),'Survived'] = 1\ndfTest.loc[(dfTest['Pclass'] == 1)&(dfTest['AgeCat'] =='Oldery'),'Survived'] = 1\ndfTest.loc[(dfTest['Pclass'] == 1)&(dfTest['AgeCat'] =='Teenage'),'Survived'] = 1\ndfTest.loc[(dfTest['Pclass'] == 2)&(dfTest['AgeCat'] =='Adult'),'Survived'] = 1\ndfTest.loc[(dfTest['Pclass'] == 2)&(dfTest['AgeCat'] =='Child'),'Survived'] = 1\ndfTest.loc[(dfTest['Pclass'] == 2)&(dfTest['AgeCat'] =='Oldery'),'Survived'] = 1\ndfTest.loc[(dfTest['Pclass'] == 2)&(dfTest['AgeCat'] =='Teenage'),'Survived'] = 1\ndfTest.loc[dfTest['Survived'].isnull(),'Survived'] = 0\n\ndfTest","c5523d1f":"dfTest.drop(['Sex','Age','Pclass','AgeCat'],axis=1,inplace=True)\n\ndfTest","eb399b71":"#To export the prediction result into a CSV file\ndfTest.to_csv('output_prediction_v3.csv',index=False)","501816f6":"Now, its time to predict data dfTest based on Modelling we've made from dfTrain","86c3f36e":"Create Modelling","486a196a":"dfTrain is cleaned up to 339 rows from the original of 891 rows","8d826ea4":"From the overview result above, there are some blank Age information hence we need to remove it","4a51928e":"From the shape of data checking, we can see that dfGenderSubmission has the same rows with dfTest.\ndfTrain  consists of different data rows.","4a36b6ea":"Read 3 csv files from dataset Titanic and define the data from CSV into DataFrame (df)","e8691278":"Based on the Modelling result above, the survival prediction will be as per below.\nPassangers who are predicted to be survive with criteria of:\n1. Pclass1-Female-Adult\n2. Pclass1-Female-Oldery\n3. Pclass1-Female-Teenage\n4. Pclass2-Female-Adult\n5. Pclass2-Female-Child\n6. Pclass2-Female-Oldery\n7. Pclass2-Female-Teenage","e48c7446":"Import Python Library","58228dd4":"Check the shape and general content of data"}}