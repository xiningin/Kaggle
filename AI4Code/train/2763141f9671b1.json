{"cell_type":{"1a28bf88":"code","9d24aa1c":"code","d27ba99c":"code","95d790cb":"code","8e7d13c1":"code","611f5259":"code","3c5bad00":"code","d0971804":"code","a9c899d3":"code","49dfb432":"code","65d89eda":"code","543810d1":"code","4f220d7d":"code","bf77550d":"code","13842eca":"code","31db8cb5":"code","46f99ea3":"code","9ff4645b":"code","bbe65273":"code","2670926a":"code","b0e93660":"code","16cfc401":"code","b541c5d3":"code","047891ed":"markdown","b8f78a16":"markdown","3cd9415d":"markdown","0431364f":"markdown","3521c710":"markdown","0b58f867":"markdown","69f0701e":"markdown","a65f273a":"markdown","48f26725":"markdown","3a49d8de":"markdown","0e2d19d4":"markdown"},"source":{"1a28bf88":"from tensorflow import keras\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D,MaxPooling2D, Flatten, Dense, Dropout, Activation, BatchNormalization\nfrom tensorflow.keras.datasets import cifar10\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ModelCheckpoint","9d24aa1c":"import numpy as np\nimport matplotlib.pyplot as plt ","d27ba99c":"(x_train, y_train), (x_test, y_test) = cifar10.load_data()","95d790cb":"plt.imshow(x_train[5])","8e7d13c1":"x_train = x_train.astype('float32')\nx_test = x_test.astype('float32')","611f5259":"num_clases = len(np.unique(y_train))\ny_train = to_categorical(y_train, num_clases)\ny_test = to_categorical(y_test, num_clases)","3c5bad00":"y_train[0]","d0971804":"mean = np.mean(x_train)\nstd = np.std(x_train)","a9c899d3":"x_train = (x_train - mean) \/ (std+1e-7)\nx_test = (x_test - mean) \/ (std+1e-7)","49dfb432":"(x_train, x_valid) = x_train[5000:], x_train[:5000]\n(y_train, y_valid) = y_train[5000:], y_train[:5000]\n\nprint('x_train shape', x_train.shape)\n\nprint('train;', x_train.shape[0])\nprint('val;', x_valid.shape[0])\nprint('test;', x_test.shape[0])","65d89eda":"base_filtros = 32\nw_regulatizer = 1e-4","543810d1":"x_train.shape[1:]","4f220d7d":"model = Sequential()\n## conv 1\nmodel.add(Conv2D(base_filtros, (3,3), padding='same', kernel_regularizer=regularizers.l2(w_regulatizer), input_shape=x_train.shape[1:]))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\n\n## conv 2\nmodel.add(Conv2D(base_filtros, (3,3), padding='same', kernel_regularizer=regularizers.l2(w_regulatizer)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\n## conv 3\nmodel.add(Conv2D(2*base_filtros, (3,3), padding='same', kernel_regularizer=regularizers.l2(w_regulatizer)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.2))\n\n## conv 4\nmodel.add(Conv2D(2*base_filtros, (3,3), padding='same', kernel_regularizer=regularizers.l2(w_regulatizer)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.3))\n\n## conv 5\nmodel.add(Conv2D(4*base_filtros, (3,3), padding='same', kernel_regularizer=regularizers.l2(w_regulatizer)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\n\n\n## conv 6\nmodel.add(Conv2D(4*base_filtros, (3,3), padding='same', kernel_regularizer=regularizers.l2(w_regulatizer)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.4))\n\n## Clasificacion - Flatten\n\nmodel.add(Flatten())\nmodel.add(Dense(num_clases,activation='softmax'))\n\nmodel.summary()\n\n","bf77550d":"datagen = ImageDataGenerator(rotation_range=15,\n                  width_shift_range=0.1,\n                  height_shift_range=0.1,\n                  horizontal_flip=True,\n                  vertical_flip=True)","13842eca":"from tensorflow.keras import optimizers","31db8cb5":"model.compile(loss='categorical_crossentropy', optimizer=optimizers.Adam(),\n             metrics=['accuracy'])","46f99ea3":"#hist = model.fit(x_train, y_train, batch_size=32,epochs=100,\n#                validation_data=(x_valid, y_valid),\n#                verbose=2, shuffle=True)","9ff4645b":"chekcpoint = ModelCheckpoint('mi_mejor_modelo.hdf5',verbose=1,save_best_only=True, monitor = 'val_accuracy')","bbe65273":"hist = model.fit(datagen.flow(x_train, y_train, batch_size=128),\n          callbacks=[chekcpoint],\n          steps_per_epoch=x_train.shape[0] \/\/ 128, \n          epochs=120,\n          verbose=2,\n          validation_data=(x_valid, y_valid)\n         )","2670926a":"plt.plot(hist.history['accuracy'],label='Train')\nplt.plot(hist.history['val_accuracy'],label='Val')\nplt.legend()\nplt.show()","b0e93660":"model2 = model","16cfc401":"model2.load_weights('.\/mi_mejor_modelo.hdf5')","b541c5d3":"model2.evaluate(x_test,y_test)","047891ed":"## Compilando","b8f78a16":"## Entrenando nuestro modelo","3cd9415d":"## Data augmentation","0431364f":"## Construyendo nuestro modelo convolucional","3521c710":"## Creando set de datos","0b58f867":"### Normalization","69f0701e":"## Importando librer\u00edas","a65f273a":"## Callbacks","48f26725":"## Resultados","3a49d8de":"## Limpieza de datos","0e2d19d4":"## Cargando dataset"}}