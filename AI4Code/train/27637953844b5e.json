{"cell_type":{"c126ae1a":"code","9ef70e3e":"code","f57d19d6":"code","ccb038b2":"code","efe39261":"code","89c9416b":"code","c00b7673":"code","ed0b93da":"code","59bf14ed":"code","e722a802":"code","ad5d0c2b":"markdown"},"source":{"c126ae1a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9ef70e3e":"import tensorflow as tf\nfrom tensorflow.keras.layers import (Dense, \n                                     BatchNormalization, \n                                     LeakyReLU, \n                                     Reshape, \n                                     Conv2DTranspose,\n                                     Conv2D,\n                                     Dropout,\n                                     Flatten)\nimport matplotlib.pyplot as plt","f57d19d6":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nspot= mpimg.imread('\/kaggle\/input\/boston\/SPOT_3.0.jpg')\nplt.imshow(spot)\nplt.show()","ccb038b2":"import tensorflow as tf\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport numpy as np\nimport time\nfrom PIL import Image\n%matplotlib inline","efe39261":"path, dirs, files = next(os.walk(\"..\/input\/gan-getting-started\/monet_jpg\"))\nprint(f\"Monet:{len(files)}\")\npath, dirs, files = next(os.walk(\"..\/input\/gan-getting-started\/monet_tfrec\"))\nprint(f\"Monet_tfrec:{len(files)}\")\npath, dirs, files = next(os.walk(\"..\/input\/gan-getting-started\/photo_tfrec\"))\nprint(f\"Photo_tfrec:{len(files)}\")\npath, dirs, files = next(os.walk(\"..\/input\/gan-getting-started\/photo_jpg\"))\nprint(f\"Photo:{len(files)}\")\n#path, dirs, files = next(os.walk(\"..\/input\/boston\/SPOT_3.0.jpg\"))\n#print(f\"boston:{len(files)}\")","89c9416b":"def load_image(image_path):\n    max_dim=512\n\n    img = tf.io.read_file(image_path)\n    img = tf.image.decode_image(img, channels=3)\n    img = tf.image.convert_image_dtype(img, tf.float32)\n\n    shape = tf.cast(tf.shape(img)[:-1], tf.float32)\n    long_dim = max(shape)\n    scale = max_dim \/ long_dim\n    new_shape = tf.cast(shape * scale, tf.int32)\n\n    img = tf.image.resize(img, new_shape)\n    img = img[tf.newaxis, :]\n\n    return img","c00b7673":"def imshow(image, title=None):\n    if(len(image.shape) > 3):\n        image=np.squeeze(image, axis=0)\n    plt.imshow(image)\n    if(title):# if there's a title mention it\n        plt.title(title)","ed0b93da":"\nbase_img=load_image('\/kaggle\/input\/gan-getting-started\/photo_jpg\/bc89a879fd.jpg')\nstyle_img=load_image('\/kaggle\/input\/gan-getting-started\/photo_jpg\/f36fc36903.jpg')\n\nplt.figure(figsize=(8,5))\nplt.subplot(1, 2, 1)\nimshow(base_img, 'Base Target Image')\nplt.subplot(1, 2, 2)\nimshow(style_img, 'Style image')","59bf14ed":"#Discriminator\n#Generator","e722a802":"#image to image translation","ad5d0c2b":"#nothing to show yet"}}