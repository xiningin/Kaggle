{"cell_type":{"d5c5d86d":"code","aab0420c":"code","ddd07e91":"code","b43244a2":"code","0cfa2ad4":"code","8bcbcd25":"code","e337947c":"code","02bc9d1f":"code","1a9cd00a":"code","89b3c149":"code","de80f883":"code","071e2cdd":"code","fb1dcc58":"code","aa47a294":"code","e0fa4744":"code","4b4b9b7e":"code","dcca604f":"code","63b9d0b2":"code","29db15ce":"markdown","8a81d929":"markdown","62e8fcdc":"markdown","b920b69b":"markdown","a75a7b61":"markdown","0dce4bd8":"markdown","96c4fc31":"markdown","4742093d":"markdown","ff44d9af":"markdown","461f3832":"markdown","07f55ac2":"markdown","68e5aa67":"markdown"},"source":{"d5c5d86d":"import numpy as np\nimport pandas as pd\nimport os\nimport seaborn as sb\nimport matplotlib.pyplot as plt\n%matplotlib inline\n \nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","aab0420c":"# \u8bad\u7ec3\u96c6\ntrain_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head()","ddd07e91":"# \u6d4b\u8bd5\u96c6\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","b43244a2":"# \u67e5\u770b\u6570\u636e\u7ef4\u5ea6\ntrain_data.shape","0cfa2ad4":"# \u67e5\u770b\u5177\u6709\u7f3a\u5c11\u503c\u7684\u7279\u5f81\ntrain_data.info()","8bcbcd25":"# \u67e5\u770b\u6709\u6548\u63cf\u8ff0\u6027\u7edf\u8ba1\ntrain_data.describe()","e337947c":"# \u586b\u5145\u5e74\u9f84\u7f3a\u5931\u503c\ndata = [train_data, test_data]\nfor dataset in data:\n    mean = train_data['Age'].mean()\n    dataset['Age'].fillna(mean, inplace = True)\n    dataset[\"Age\"] = dataset[\"Age\"].astype(int)\n\n# for dataset in data:\n#     mean = train_data[\"Age\"].mean()\n#     std = test_data[\"Age\"].std()\n#     is_null = dataset[\"Age\"].isnull().sum()\n#     rand_age = np.random.randint(mean - std, mean + std, size = is_null)\n#     age_slice = dataset[\"Age\"].copy()\n#     age_slice[np.isnan(age_slice)] = rand_age\n#     dataset[\"Age\"] = age_slice\n#     dataset[\"Age\"] = dataset[\"Age\"].astype(int)","02bc9d1f":"# \u5c06SibSp\u4e0eParch\u5408\u5e76\u4e3a\u65b0\u7279\u5f81\nfor dataset in data:\n    dataset['relatives'] = dataset['SibSp'] + dataset['Parch']\n    dataset.loc[dataset['relatives'] > 0, 'relatives'] = 1\n    dataset.loc[dataset['relatives'] == 0, 'relatives'] = 0","1a9cd00a":"# \u7528\u767b\u8239\u4eba\u6570\u6700\u591a\u7684\u53e3\u5cb8\u586b\u5145\u767b\u8239\u53e3\u5cb8\u7f3a\u5931\u503c\n# embarked_mode = train_data['Embarked'].mode()\nfor dataset in data:\n    dataset['Embarked'].fillna(\"S\", inplace = True)","89b3c149":"# \u7ed8\u5236\u6570\u636e\u5206\u5e03\u56fe\nfeatrues = ['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\ntrain_data[featrues].hist(figsize = (8,8));","de80f883":"# \u7ed8\u5236\u9636\u7ea7\u4e0e\u7968\u4ef7\u3001\u5e74\u9f84\u5173\u7cfb\u56fe\nplt.figure(figsize = (20, 8))\nplt.subplot(1,2,1)\nsb.boxplot(data = train_data, x = 'Pclass', y = 'Age')\n\nplt.subplot(1,2,2)\nsb.boxplot(data = train_data, x = 'Pclass', y = 'Fare');","071e2cdd":"# \u5404\u9636\u7ea7\u8239\u5458\u751f\u8fd8\u7387\ntrain_data_Pclass1 = train_data.query('Pclass==1')\nprint('\u4e0a\u5c42\u9636\u7ea7\u751f\u8fd8\u7387:', train_data_Pclass1['Survived'].mean())\n\ntrain_data_Pclass2 = train_data.query('Pclass==2')\nprint('\u4e2d\u5c42\u9636\u7ea7\u751f\u8fd8\u7387:', train_data_Pclass2['Survived'].mean())\n\ntrain_data_Pclass3 = train_data.query('Pclass==3')\nprint('\u4e0b\u5c42\u9636\u7ea7\u751f\u8fd8\u7387:', train_data_Pclass3['Survived'].mean())\n\n# \u5404\u9636\u7ea7\u8239\u5458\u751f\u8fd8\u5206\u5e03\u56fe\nax = sb.countplot(data = train_data, x = 'Pclass', hue = 'Survived')\nax.legend(loc = 2, ncol = 3, framealpha = 1, title = 'Survived');","fb1dcc58":"# \u4e0d\u540c\u6027\u522b\u8239\u5458\u751f\u8fd8\u7387\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\nprint(\"\u5973\u6027\u751f\u8fd8\u7387:\", rate_women)\n\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\nprint(\"\u7537\u6027\u751f\u8fd8\u7387:\", rate_men)","aa47a294":"# \u4e0d\u540c\u5e74\u9f84\u5c42\u751f\u8fd8\u7387\ntrain_data_Age=[]\ntrain_data_aa = train_data.query('0 < Age <= 12')\ntrain_data_Age.append(train_data_aa['Survived'].mean())\n\ntrain_data_aa = train_data.query('12 < Age <= 69')\ntrain_data_Age.append(train_data_aa['Survived'].mean())\n\ntrain_data_aa = train_data.query('69 < Age <= 80')\ntrain_data_Age.append(train_data_aa['Survived'].mean())\n\ntrain_data_Age","e0fa4744":"# \u4e0d\u540c\u540c\u884c\u4eba\u5458\u6570\u76ee\u751f\u8fd8\u5206\u5e03\u56fe\nplt.figure(figsize = (20, 8))\nplt.subplot(1, 2, 1)\nax = sb.countplot(data = train_data, x = 'SibSp', hue = 'Survived')\nax.legend(loc = 1, ncol = 3, framealpha = 1, title = 'Survived')\n\nplt.subplot(1, 2, 2)\nax = sb.countplot(data = train_data, x = 'Parch', hue = 'Survived')\nax.legend(loc = 1, ncol = 3, framealpha = 1, title = 'Survived');","4b4b9b7e":"# \u4e0d\u540c\u53e3\u5cb8\u767b\u8239\u7fa4\u4f17\u751f\u8fd8\u5206\u5e03\u56fe\nax = sb.countplot(data = train_data, x = 'Embarked', hue = 'Survived')\nax.legend(loc = 1, ncol = 2, framealpha = 1, title = 'Survived');","dcca604f":"# \u91c7\u7528\u903b\u8f91\u56de\u5f52\u7b97\u6cd5\n# from sklearn.linear_model import LogisticRegression\n# from sklearn.metrics import confusion_matrix, precision_score, recall_score, accuracy_score\n# from sklearn.model_selection import train_test_split\n\n# features = [\"Pclass\", \"Sex\", \"Age\", \"Embarked\", \"relatives\"]\n# X = pd.get_dummies(train_data[features])\n# y = train_data[\"Survived\"]\n\n# # \u63d0\u4ea4\u4f7f\u7528\n# # X_test = pd.get_dummies(test_data[features])\n\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# log_mod = LogisticRegression()\n# log_mod.fit(X_train, y_train)\n# predictions = log_mod.predict(X_test)\n\n# print(\"\u7cbe\u51c6\u503c\uff1a\", precision_score(y_test,y_preds))\n# print(\"\u53ec\u56de\u7387\uff1a\", recall_score(y_test,y_preds))\n# print(\"\u7cbe\u786e\u503c\uff1a\", accuracy_score(y_test,y_preds))\n# print(\"F\u503c\uff1a\", 2*(precision_score(y_test,y_preds)*recall_score(y_test,y_preds)\/(precision_score(y_test,y_preds)+recall_score(y_test,y_preds))))\n# confusion_matrix(y_test,y_preds)","63b9d0b2":"# \u91c7\u7528\u968f\u673a\u6df1\u6797\u7b97\u6cd5\nfrom sklearn.ensemble import RandomForestClassifier\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"Age\", \"Embarked\", \"relatives\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\n\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","29db15ce":"## \u7b2c\u4e8c\u90e8\uff1a\u6574\u7406\u6570\u636e\n### 2.1 \u6536\u96c6\u6570\u636e","8a81d929":"Q2\uff1a\u5973\u6027\u751f\u8fd8\u51e0\u7387\u8f83\u7537\u6027\u662f\u5426\u66f4\u9ad8\uff1f\n>\u901a\u8fc7\u5206\u6790\u53ef\u77e5\uff0c\u5973\u6027\u7684\u751f\u8fd8\u51e0\u7387\u5927\u5e45\u9ad8\u4e8e\u7537\u6027\u7684\u751f\u8fd8\u51e0\u7387","62e8fcdc":"Q4\uff1a\u540c\u884c\u4eba\u5458\u5bf9\u5176\u6709\u7740\u600e\u6837\u7684\u5f71\u54cd\uff1f\n>\u76f8\u540c\u540c\u884c\u4eba\u6570\u7684\u914d\u5076\u5144\u5f1f\u6216\u7236\u6bcd\u5b50\u5973\u5bf9\u5176\u751f\u8fd8\u7387\u7684\u5f71\u54cd\u76f8\u4f3c\u3002  \n>\u540c\u65f6\u53d1\u73b0\u6709\u540c\u884c\u4eba\u5458\u4e0e\u6ca1\u6709\u540c\u884c\u4eba\u5458\u5bf9\u5176\u7684\u751f\u8fd8\u7387\u5b58\u5728\u8f83\u5927\u7684\u5f71\u54cd\u3002","b920b69b":"## \u7b2c\u4e09\u90e8\u5206\uff1a\u63a2\u7d22\u6027\u6570\u636e\u5206\u6790","a75a7b61":"Q5\uff1a\u90a3\u4e2a\u6e2f\u53e3\u767b\u8239\u7684\u751f\u8fd8\u51e0\u7387\u8f83\u9ad8\uff1f\n>\u5357\u5b89\u666e\u6566\u767b\u8239\u7684\u7fa4\u4f17\u751f\u8fd8\u7387\u8f83\u4f4e\uff0c\u540c\u65f6\u5176\u767b\u8239\u4eba\u6570\u4e5f\u6700\u591a\u3002  \n>\u745f\u5821\u767b\u8239\u7684\u7fa4\u4f17\u751f\u8fd8\u7387\u6700\u9ad8\u3002","0dce4bd8":"### 2.2 \u8bc4\u4f30\u6570\u636e","96c4fc31":"\u903b\u8f91\u56de\u5f52  \n>\u7ed3\u8bba\uff1a\u82e5\u5e74\u9f84\u4e0a\u4ec5\u91c7\u53d6\u5747\u503c\u586b\u5145\uff0c\u5219\u5bf9\u4e8e\u7ed3\u679c\u7684\u9884\u6d4b\u8f83\u4e3a\u7a33\u5b9a\uff0c\u82e5\u5728(mean - std, mean + std)\u8303\u56f4\u5185\u8fdb\u884c\u7b49\u6b65\u8ddd\u586b\u5145\uff0c\u5728\u9884\u6d4b\u7ed3\u679c\u7684\u63d0\u5347\u4e0a\u6709\u4e00\u5b9a\u6548\u679c\u3002  \n>\u601d\u8003\uff1a\u5747\u503c\u91c7\u7528\u8bad\u7ec3\u96c6\u7684\u5747\u503c\uff0c\u6807\u51c6\u5dee\u91c7\u7528\u6d4b\u8bd5\u96c6\u7684\u6807\u51c6\u5dee\uff0c\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u80fd\u51cf\u4f4e\u8fc7\u62df\u5408\uff0c\u63d0\u5347\u9884\u6d4b\u6548\u679c\u3002","4742093d":"Q1\uff1a\u8239\u5458\u9636\u7ea7\u8d8a\u9ad8\u662f\u5426\u8d8a\u5bb9\u6613\u751f\u8fd8\uff1f\n>\u901a\u8fc7\u5206\u6790\u53ef\u77e5\uff0c\u8d8a\u662f\u4e0a\u5c42\u7684\u751f\u8fd8\u7387\u8d8a\u9ad8\uff0c\u4e0b\u5c42\u7fa4\u4f17\u7684\u6b7b\u4ea1\u6bd4\u4f8b\u8f83\u5927\u3002","ff44d9af":"## \u7b2c\u56db\u6b65\uff1a\u5f97\u51fa\u7ed3\u8bba","461f3832":"Q3\uff1a\u8239\u5458\u7684\u5e74\u9f84\u5bf9\u5176\u662f\u5426\u751f\u8fd8\u6709\u7740\u600e\u6837\u7684\u5f71\u54cd\uff1f\n>\u901a\u8fc7\u5206\u6790\u53ef\u77e5\uff0c\u513f\u7ae5\u7684\u751f\u8fd8\u7387\u8f83\u4f4e\u3002","07f55ac2":"# \u6570\u636e\u5206\u6790\u4e0e\u53ef\u89c6\u5316\n## \u7b2c\u4e00\u6b65\uff1a\u63d0\u95ee\n1. \u90a3\u4e9b\u7279\u5f81\u5728\u9884\u6d4b\u8239\u5458\u751f\u8fd8\u65b9\u9762\u5c24\u4e3a\u91cd\u8981\n2. \u8239\u5458\u9636\u7ea7\u8d8a\u9ad8\u662f\u5426\u8d8a\u5bb9\u6613\u751f\u8fd8\uff1f\n3. \u5973\u6027\u751f\u8fd8\u51e0\u7387\u8f83\u7537\u6027\u662f\u5426\u66f4\u9ad8\uff1f\n4. \u8239\u5458\u7684\u5e74\u9f84\u5bf9\u5176\u662f\u5426\u751f\u8fd8\u6709\u7740\u600e\u6837\u7684\u5f71\u54cd\uff1f\n5. \u540c\u884c\u4eba\u5458\u5bf9\u5176\u6709\u7740\u600e\u6837\u7684\u5f71\u54cd\uff1f\n6. \u90a3\u4e2a\u6e2f\u53e3\u767b\u8239\u7684\u751f\u8fd8\u51e0\u7387\u8f83\u9ad8\uff1f\n\n>\u601d\u8003\uff1a\u9488\u5bf9\u8fd9\u4e9b\u95ee\u9898\uff0c\u6211\u4eec\u8981\u5982\u4f55\u6765\u56de\u7b54\uff1f\u4f7f\u7528\u6b64\u6570\u636e\u96c6\u7684\u90a3\u4e9b\u7279\u5f81\u6765\u89e3\u51b3\u8fd9\u4e48\u95ee\u9898\uff1f","68e5aa67":"### 2.3 \u6e05\u7406\u6570\u636e"}}