{"cell_type":{"2367ee48":"code","9b46e90b":"code","d7bc918f":"markdown"},"source":{"2367ee48":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b46e90b":"train<- read.csv(\"hm7-Train.csv\")\ntest<- read.csv(\"hm7-Test.csv\")\ntest$readmitted <- NA\ndfFull <- train %>% rbind(test) \n\n#error value correct\ndfFull[!(dfFull$gender == 'Male' | dfFull$gender == 'Female'),]$gender <- 'Male'\ndfFull$diagnosis <- str_replace_all(dfFull$diagnosis,\"[^[1-9]]\",\"\")\n#deal with NA value\ndfFull$race[is.na(dfFull$race)] <- 'other'\ndfFull$payer_code[is.na(dfFull$payer_code)] <- 'other'\ndfFull$medical_specialty[is.na(dfFull$medical_specialty)] <- 'other'\ndfFull$diagnosis[is.na(dfFull$diagnosis)] <- '428'\n\n#change some numeric to factor and factor to numeric\ndfFull$diagnosis <- as.integer(dfFull$diagnosis)\ndfFull$admission_type <- as.factor(dfFull$admission_type)\ndfFull$discharge_disposition <- as.factor(dfFull$discharge_disposition)\ndfFull$admission_source <- as.factor(dfFull$admission_source)\n\ndfFullFactor <- dplyr::select(dfFull, !where(is.numeric))\ndfFull[, names(dfFullFactor)] <- lapply(dfFull[, names(dfFullFactor)], factor)\n\ndrop1 <- c('chlorpropamide','acetohexamide','tolbutamide','acarbose','miglitol','troglitazone','tolazamide','examide','citoglipton','glimepiride.pioglitazone','metformin.rosiglitazone','metformin.pioglitazone')\ndrop2 <- c('max_glu_serum','repaglinide','nateglinide','glyburide.metformin')\n\n# dfFull <- dfFull[, !(names(dfFull) %in% drop0)]\ndfFull <- dfFull[, !(names(dfFull) %in% drop1)]\ndfFull <- dfFull[, !(names(dfFull) %in% drop2)]\ndfFull <- dfFull %>%  mutate(medical_specialty = fct_lump(medical_specialty,n=7))\n\nmyTrain <- dfFull %>% filter(!is.na(readmitted))\nmyTest <- dfFull %>% filter(is.na(readmitted)) \nmyTrain <- myTrain[,-patientID]\n#\ngbmFit100 <- gbm(\n  formula = readmitted ~ .,\n  distribution = \"gaussian\",\n  data = myTrain,\n  n.trees = 5000,\n  interaction.depth = 10,\n  shrinkage = 0.3,\n  n.minobsinnode = 15,\n  bag.fraction = 0.65, \n  train.fraction = 1,\n  n.cores = NULL,\n  verbose = FALSE\n)  \n\ngbmPreds2 <- predict(gbmFit100, myTrain)\ngbmPreds2[gbmPreds2>=0.5] <- 1\ngbmPreds2[gbmPreds2<0.5] <- 0\nconfusionMatrix(as.factor(gbmPreds2), as.factor(myTrain$readmitted))\nmyTest$readmitted <- gbmPreds2\n\npredictionsDf<- myTest %>%  dplyr::select(patientID= patientID, readmitted= readmitted)\n\nwrite.csv(predictionsDf,\"hospital.csv\",row.names = FALSE )","d7bc918f":"![Screen Shot 2021-11-15 at 10.31.10 AM.png](attachment:5ee6c210-af2d-4011-894f-dc8df058526d.png)"}}