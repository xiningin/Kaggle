{"cell_type":{"35a57845":"code","bc2d88e6":"code","f0fadba9":"code","bd54d681":"code","cde16370":"code","3f948a28":"code","6e6672f7":"code","457e7360":"code","f6ce560c":"code","a1eaab66":"code","dbdd3b55":"code","997b3811":"code","ed4f5931":"code","a98cb47f":"code","e5bd08d8":"code","1316775b":"code","ca22a865":"code","d33f307f":"code","73c34add":"code","6efa35f6":"code","949572ac":"code","28c5b943":"markdown","56e66ee8":"markdown","644b0d7d":"markdown","eb57c456":"markdown","28dc94df":"markdown","1075b804":"markdown","bf75d67b":"markdown","e83702a5":"markdown"},"source":{"35a57845":"# Load libraries\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, MinMaxScaler\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import callbacks\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\nfrom tensorflow.keras.optimizers import Adam\nimport tensorflow as tf\ntf.random.set_seed(0)\n\nfrom numpy.random import seed\nseed(1)","bc2d88e6":"# Load training data\ntrain_data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv', index_col=0)\nlen(train_data)","f0fadba9":"train_data.head()","bd54d681":"# Load testing data\ntest_data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv', index_col=0)\nlen(test_data)","cde16370":"test_data.head()","3f948a28":"le = LabelEncoder()\ntrain_data['target'] = le.fit_transform(train_data['target'])","6e6672f7":"train_data","457e7360":"X = train_data.iloc[:, :-1].values\ny = train_data.iloc[:, -1].values\n\nX.shape, y.shape","f6ce560c":"#Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.2, stratify=y, shuffle=True)","a1eaab66":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","dbdd3b55":"sc = MinMaxScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\ntestData = sc.transform(test_data.values)","997b3811":"y_train = tf.keras.utils.to_categorical(y_train, num_classes=len(np.unique(y)))\ny_test = tf.keras.utils.to_categorical(y_test, num_classes=len(np.unique(y)))","ed4f5931":"y_test","a98cb47f":"from tensorflow.keras.activations import swish\nfrom tensorflow.keras.models import Sequential\n\nmodel = Sequential([layers.Dense(units=128, activation=swish, input_shape=[X.shape[1]]),\n                    layers.Dense(units=32, activation=swish),\n                    layers.Dense(units=16, activation=swish),\n                    layers.Dense(units=8, activation=swish),\n                    layers.Dense(units=9, activation='softmax')])","e5bd08d8":"es = early_stopping = EarlyStopping(monitor='val_loss', patience=10, min_delta=0.001, restore_best_weights=True, verbose=1)\nlr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=3, min_delta=0.0002, verbose=1)","1316775b":"model.compile(optimizer=Adam(lr=0.001), loss='categorical_crossentropy')","ca22a865":"%%time\nhistory = model.fit(X_train, y_train,\n                    validation_data=(X_test, y_test),\n                    batch_size=32,\n                    epochs=200,\n                    callbacks=[es, lr])","d33f307f":"df = pd.DataFrame(history.history)\ndf[['val_loss', 'loss']].plot()","73c34add":"test_preds = model.predict(testData)\nprint(test_preds[0])","6efa35f6":"# The lines below shows how to save predictions in format used for competition scoring.\noutput = pd.DataFrame({'id': test_data.index,\n                       'Class_1': test_preds[:, 0],\n                       'Class_2': test_preds[:, 1],\n                       'Class_3': test_preds[:, 2],\n                       'Class_4': test_preds[:, 3],\n                       'Class_5': test_preds[:, 4],\n                       'Class_6': test_preds[:, 5],\n                       'Class_7': test_preds[:, 6],\n                       'Class_8': test_preds[:, 7],\n                       'Class_9': test_preds[:, 8],\n                      })\n\noutput.to_csv('submission_tps.csv', index=False)","949572ac":"output.head()","28c5b943":"## Preparing the format for submission","56e66ee8":"## Obtaining the test predictions","644b0d7d":"## Model architecture definition, compilation and training","eb57c456":"Visualizing the submission file below:","28dc94df":"## Load and get a glimpse of the training and test sets","1075b804":"## Pre-processing of data","bf75d67b":"## Loading the necessary libraries","e83702a5":"## Splitting training and test data"}}