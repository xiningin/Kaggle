{"cell_type":{"95cba05f":"code","8a917caa":"code","e71782bb":"code","0ba9808d":"code","10fda6c5":"code","9c50ad9d":"code","b64775eb":"code","9016e5d8":"code","13ff7bff":"markdown","aaf2f06d":"markdown","969f1206":"markdown"},"source":{"95cba05f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas import DataFrame as df\n\nfrom pathlib import Path\nroot_path = Path('..\/input\/titanic')\n\nimport os\nfor dirname, _, filenames in os.walk(root_path):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ntrain_path = root_path\/'train.csv'\ntest_path = root_path\/'test.csv'","8a917caa":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OrdinalEncoder, OneHotEncoder\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score","e71782bb":"train_df = pd.read_csv(train_path)\ntest_df = pd.read_csv(test_path)\n\ny = train_df.Survived\n\nchosen_cols = ['Pclass', 'SibSp', 'Parch', 'Sex', 'Embarked']\ntrain_cpy = train_df[chosen_cols].copy()\ntest_cpy = test_df[chosen_cols].copy()\n\n# -------------------------\n\n# Preprocess Sex using OrdinalEncoder\nsex_enc = OrdinalEncoder()\ntrain_cpy.Sex = sex_enc.fit_transform(train_cpy[['Sex']])\ntest_cpy.Sex = sex_enc.transform(test_cpy[['Sex']])\n\n# -------------------------\n\n# Preprocess Embarked using SimpleImputer\nembarked_imputer = SimpleImputer(strategy='most_frequent')\ntrain_cpy.Embarked = embarked_imputer.fit_transform(train_cpy[['Embarked']])\n\n# Preprocess Embarked using OrdinalEncoder\nembarked_enc = OrdinalEncoder()\ntrain_cpy.Embarked = embarked_enc.fit_transform(train_cpy[['Embarked']])\ntest_cpy.Embarked = embarked_enc.transform(test_cpy[['Embarked']])\n\n# -------------------------\n\n# Split train\/val\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(train_cpy, y, test_size=0.2, random_state=5)\n\n# -------------------------\n\n# Evaluate model\nclf1 = LogisticRegression(random_state=5)\nclf1.fit(X_train, y_train)\n\ny_pred1 = clf1.predict(X_val)\naccuracy_score(y_pred1, y_val)","0ba9808d":"X_train.head()","10fda6c5":"train_df = pd.read_csv(train_path)\ntest_df = pd.read_csv(test_path)\n\ny = train_df.Survived\n\nchosen_cols = ['Pclass', 'SibSp', 'Parch', 'Sex', 'Embarked']\ntrain_cpy = train_df[chosen_cols].copy()\ntest_cpy = test_df[chosen_cols].copy()\n\n# -------------------------\n\n# Preprocess Sex using OrdinalEncoder\nsex_enc = OrdinalEncoder()\ntrain_cpy.Sex = sex_enc.fit_transform(train_cpy[['Sex']])\ntest_cpy.Sex = sex_enc.transform(test_cpy[['Sex']])\n\n# -------------------------\n\n# Preprocess Embarked using SimpleImputer\nembarked_imputer = SimpleImputer(strategy='most_frequent')\ntrain_cpy.Embarked = embarked_imputer.fit_transform(train_cpy[['Embarked']])\n\n# Preprocess Embarked using OrdinalEncoder\nembarked_enc = OrdinalEncoder()\ntrain_cpy.Embarked = embarked_enc.fit_transform(train_cpy[['Embarked']])\ntest_cpy.Embarked = embarked_enc.transform(test_cpy[['Embarked']])\n\n# -------------------------\n\n# Proprocess Pclass using One Hot Encoder\npclass_enc = OneHotEncoder(sparse=False)\npclass_train_cols = df(pclass_enc.fit_transform(train_cpy[['Pclass']]))\npclass_test_cols = df(pclass_enc.transform(test_cpy[['Pclass']]))\n\npclass_train_cols.index = train_cpy.index\npclass_test_cols.index = test_cpy.index\n\ntrain_cpy.drop('Pclass', axis=1, inplace=True)\ntest_cpy.drop('Pclass', axis=1, inplace=True)\n\ntrain_cpy = pd.concat([train_cpy, pclass_train_cols], axis=1)\ntest_cpy = pd.concat([test_cpy, pclass_test_cols], axis=1)\n\n# -------------------------\n\n# Split train\/val\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(train_cpy, y, test_size=0.2, random_state=5)\n\n# -------------------------\n\n# Evaluate model\nclf2 = LogisticRegression(random_state=5)\nclf2.fit(X_train, y_train)\n\ny_pred2 = clf2.predict(X_val)\naccuracy_score(y_pred2, y_val)","9c50ad9d":"X_train.head()","b64775eb":"train_df = pd.read_csv(train_path)\ntest_df = pd.read_csv(test_path)\n\ny = train_df.Survived\n\nchosen_cols = ['Pclass', 'SibSp', 'Parch', 'Sex', 'Embarked']\ntrain_cpy = train_df[chosen_cols].copy()\ntest_cpy = test_df[chosen_cols].copy()\n\n# -------------------------\n\n# Preprocess Sex using OrdinalEncoder\nsex_enc = OrdinalEncoder()\ntrain_cpy.Sex = sex_enc.fit_transform(train_cpy[['Sex']])\ntest_cpy.Sex = sex_enc.transform(test_cpy[['Sex']])\n\n# -------------------------\n\n# Preprocess Embarked using SimpleImputer\nembarked_imputer = SimpleImputer(strategy='most_frequent')\ntrain_cpy.Embarked = embarked_imputer.fit_transform(train_cpy[['Embarked']])\n\n# Preprocess Embarked using OrdinalEncoder\nembarked_enc = OrdinalEncoder()\ntrain_cpy.Embarked = embarked_enc.fit_transform(train_cpy[['Embarked']])\ntest_cpy.Embarked = embarked_enc.transform(test_cpy[['Embarked']])\n\n# -------------------------\n\n# Proprocess Parch using One Hot Encoder\nparch_enc = OneHotEncoder(handle_unknown='ignore', sparse=False)\nparch_train_cols = df(parch_enc.fit_transform(train_cpy[['Parch']]))\nparch_test_cols = df(parch_enc.transform(test_cpy[['Parch']]))\n\nparch_train_cols.index = train_cpy.index\nparch_test_cols.index = test_cpy.index\n\ntrain_cpy.drop('Parch', axis=1, inplace=True)\ntest_cpy.drop('Parch', axis=1, inplace=True)\n\ntrain_cpy = pd.concat([train_cpy, parch_train_cols], axis=1)\ntest_cpy = pd.concat([test_cpy, parch_test_cols], axis=1)\n\n# -------------------------\n\n# Split train\/val\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(train_cpy, y, test_size=0.2, random_state=5)\n\n# -------------------------\n\n# Evaluate model\nclf2 = LogisticRegression(random_state=5)\nclf2.fit(X_train, y_train)\n\ny_pred2 = clf2.predict(X_val)\naccuracy_score(y_pred2, y_val)","9016e5d8":"X_train.head()","13ff7bff":"# Parch","aaf2f06d":"# Baseline","969f1206":"# Pclass"}}