{"cell_type":{"88c6ca6f":"code","dbfa3b68":"code","cf6e8a7c":"code","6b1eb3ef":"code","77263c9d":"code","5b65a199":"code","3d03a1be":"code","9f7b8cbd":"code","37424256":"code","44bb6875":"code","405ad6c5":"code","80ae18ab":"code","265b5122":"code","69efde66":"code","3cf05634":"markdown","5ee4b559":"markdown","6ad7a42a":"markdown","4673afe3":"markdown","0639b528":"markdown","a3f2504b":"markdown","a33df98e":"markdown","c8beda33":"markdown","5f71286c":"markdown","1fa66ce8":"markdown","eede2552":"markdown","759c9c04":"markdown","44dd45c9":"markdown"},"source":{"88c6ca6f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\ndf = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\n# df.head(1)","dbfa3b68":"# Importing libs\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import ticker\nimport matplotlib\nimport matplotlib.dates as mdates\nimport matplotlib.pyplot as plt\nfrom textwrap import wrap\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport plotly as py\nimport plotly.graph_objs as go\nimport os\npy.offline.init_notebook_mode(connected = True)\n#print(os.listdir(\"..\/input\"))\nimport datetime as dt\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nimport matplotlib.gridspec as grid_spec\nimport seaborn as sns\nfrom imblearn.over_sampling import SMOTE\nimport scikitplot as skplt\n\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder\nfrom sklearn.model_selection import train_test_split,cross_val_score\n\n\nfrom sklearn.linear_model import LinearRegression,LogisticRegression\nfrom sklearn.tree import DecisionTreeRegressor,DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\n\n\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import accuracy_score, recall_score, roc_auc_score, precision_score, f1_score\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.preprocessing import StandardScaler\n# data splitting\nfrom sklearn.model_selection import train_test_split\n# data modeling\nfrom sklearn.metrics import confusion_matrix,accuracy_score,roc_curve,classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n#ensembling\nfrom mlxtend.classifier import StackingCVClassifier\nbackground_color = '#f6f5f5'","cf6e8a7c":"print(\"The shape of the dataset is : \", df.shape)\nprint()\n\nprint(\"The first 2 rows of the dataset are \")\nprint(df.head(2))\nprint()\n\ndict = {}\nfor i in list(df.columns):\n    dict[i] = df[i].value_counts().shape[0]\nprint(pd.DataFrame(dict,index=[\"Unique Count\"]).transpose())\n\ncat_cols = ['sex','exng','caa','cp','fbs','restecg','slp','thall']\ncon_cols = [\"age\",\"trtbps\",\"chol\",\"thalachh\",\"oldpeak\"]\nprint()\nprint(\"The total number of categorical columns are : \",len(cat_cols))\nprint()\nprint(\"The total number of continous columns are : \",len(con_cols))\nprint()\nprint(\"The missing values in each column for the dataset are \")\nprint(df.isnull().sum())","6b1eb3ef":"ax = sns.countplot(data=df, x='output',palette=['lightgrey','#eeb977'])\nax.set(xticklabels=['Less chance of Heart Attack', 'More chance of Heart Attack'], title=\"Target Distribution\")\nax.tick_params(bottom=False)","77263c9d":"data = df\ncontinuous = data.loc[:,data.nunique()>4]\nfig = plt.figure(figsize=(15, 3), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(1, 6)\ngs.update(wspace=0.1, hspace=0.4)\n\n# for plotting\ndf = data\n\nrun_no = 0\nfor row in range(0, 1):\n    for col in range(0, 6):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        locals()[\"ax\"+str(run_no)].tick_params(axis='y', left=False)\n        locals()[\"ax\"+str(run_no)].get_yaxis().set_visible(False)\n        for s in [\"top\",\"right\",\"left\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nrun_no = 0\nfor variable in continuous:\n        sns.kdeplot(df[variable] ,ax=locals()[\"ax\"+str(run_no)], color='#eeb977',ec='black', shade=True, linewidth=1.5, alpha=0.9, zorder=3, legend=False)\n        locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n        locals()[\"ax\"+str(run_no)].set_xlabel(variable)\n        run_no += 1\n        \n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\nax0.text(Xstart, Yend+(Yend*0.15), 'Numeric Variable Distribution', fontsize=20, fontweight='bold', fontfamily='sans-serif')\nax0.text(Xstart, Yend+(Yend*0.05), 'Most numeric variables appear to have a positive skew', fontsize=13, fontweight='light', fontfamily='monospace')\n\nplt.show()","5b65a199":"fig = plt.figure(figsize=(15, 3), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(1, 6)\ngs.update(wspace=0.1, hspace=0.4)\n\n# for plotting\ndf = data\nyes_c = '#eeb977'\nno_c = 'lightgray'\nrun_no = 0\nfor row in range(0, 1):\n    for col in range(0, 6):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        locals()[\"ax\"+str(run_no)].tick_params(axis='y', left=False)\n        locals()[\"ax\"+str(run_no)].get_yaxis().set_visible(False)\n        locals()[\"ax\"+str(run_no)].set_axisbelow(True)\n        for s in [\"top\",\"right\",\"left\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nrun_no = 0\n\nYes = df[df['output'] == 1]\nNo = df[df['output'] == 0]\n\nfor variable in continuous:\n        sns.kdeplot(Yes[variable], ax=locals()[\"ax\"+str(run_no)], color=yes_c,ec='black', shade=True, linewidth=1.5, alpha=0.9, zorder=3, legend=False)\n        sns.kdeplot(No[variable],ax=locals()[\"ax\"+str(run_no)], color=no_c, shade=True, ec='black',linewidth=1.5, alpha=0.9, zorder=3, legend=False)\n        locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n        locals()[\"ax\"+str(run_no)].set_xlabel(variable)\n        run_no += 1\n        \nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\nax0.text(Xstart, Yend+(Yend*0.15), 'Numeric Variable Distribution with Condition', fontsize=20, fontweight='bold', fontfamily='sansserif')\nax0.text(Xstart, Yend+(Yend*0.05), 'There appear to be noticeable differences when patients have a heart condition.', fontsize=13, fontweight='light', fontfamily='monospace')\n\nplt.show()","3d03a1be":"fig = plt.figure(figsize=(10, 5), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(2, 2)\ngs.update(wspace=0.11, hspace=0.5)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\n\n\nax0.tick_params(axis='y', left=False)\nax0.get_yaxis().set_visible(False)\nax0.set_axisbelow(True)\nax1.tick_params(axis='y', left=False)\nax1.get_yaxis().set_visible(False)\nax1.set_axisbelow(True)\nfor s in [\"top\",\"right\",\"left\"]:\n        ax0.spines[s].set_visible(False)\n        ax1.spines[s].set_visible(False)\n\n# ax0.set_facecolor(face_color)\n# ax1.set_facecolor(face_color)\n\n\nsns.kdeplot(Yes['caa'], ax=ax1, color=yes_c,ec='black', shade=True, linewidth=1.5, alpha=0.9, zorder=3, legend=False)\nsns.kdeplot(No['caa'],ax=ax1, color=no_c, shade=True, ec='black',linewidth=1.5, alpha=0.9, zorder=3, legend=False)\n \nsns.kdeplot(Yes['thalachh'], ax=ax0, color=yes_c,ec='black', shade=True, linewidth=1.5, alpha=0.9, zorder=3, legend=False)\nsns.kdeplot(No['thalachh'],ax=ax0, color=no_c, shade=True, ec='black',linewidth=1.5, alpha=0.9, zorder=3, legend=False)\n\n\nax0.grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\nax1.grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\nax0.text(Xstart, Yend+(Yend*0.2), 'Important Observations', fontsize=15, fontweight='bold', fontfamily='sansserif')\nax0.text(Xstart, Yend+(Yend*0.09), 'Max. HR Acheived & Num. Major Blood Vessels look to be highly indicatvie of heart disease.', fontsize=8, fontweight='light', fontfamily='monospace')\n\nplt.show()","9f7b8cbd":"fig = plt.figure(figsize=(15, 3), dpi=150, facecolor=background_color)\ngs = fig.add_gridspec(2, 5)\ngs.update(wspace=0.1, hspace=0.7)\ncategorical = data.loc[:,data.nunique()<=4]\n\n\nrun_no = 0\nfor row in range(0, 2):\n    for col in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        locals()[\"ax\"+str(run_no)].tick_params(axis='y', left=False)\n        locals()[\"ax\"+str(run_no)].get_yaxis().set_visible(False)\n        locals()[\"ax\"+str(run_no)].set_axisbelow(True)\n        for s in [\"top\",\"right\",\"left\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nrun_no = 0\nfor variable in categorical:\n        sns.countplot(df[variable],data=df,ax=locals()[\"ax\"+str(run_no)], palette=['lightgrey','#eeb977'],ec='black', linewidth=1.5, alpha=1,)\n        locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n        locals()[\"ax\"+str(run_no)].set_xlabel(variable)\n        run_no += 1\n\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\nax0.text(Xstart, Yend+(Yend*0.6), 'Categorical Variable Distribution', fontsize=20, fontweight='bold', fontfamily='sans-serif')\nax0.text(Xstart, Yend+(Yend*0.3), 'This gives an indication of what we might want to investigate.', fontsize=13, fontweight='light', fontfamily='monospace')\n\n\nplt.show()","37424256":"fig = plt.figure(figsize=(15, 3), dpi=150, facecolor=background_color)\ngs = fig.add_gridspec(2, 5)\ngs.update(wspace=0.1, hspace=0.7)\n\n\nrun_no = 0\nfor row in range(0, 2):\n    for col in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        locals()[\"ax\"+str(run_no)].tick_params(axis='y', left=False)\n        locals()[\"ax\"+str(run_no)].get_yaxis().set_visible(False)\n        locals()[\"ax\"+str(run_no)].set_axisbelow(True)\n        for s in [\"top\",\"right\",\"left\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nrun_no = 0\nfor variable in categorical:\n        sns.countplot(df[variable],data=df,ax=locals()[\"ax\"+str(run_no)],hue='output',palette=['lightgrey','#eeb977'],ec='black', linewidth=1.5, alpha=1)\n        locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n        locals()[\"ax\"+str(run_no)].set_xlabel(variable)\n        locals()[\"ax\"+str(run_no)].get_legend().remove()\n        run_no += 1\n\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\nax0.text(Xstart, Yend+(Yend*0.85), 'Categorical Variable Distribution with Condition', fontsize=20, fontweight='bold', fontfamily='sans-serif')\nax0.text(Xstart, Yend+(Yend*0.3), 'This is very informative; several variables look to be related to the presence\\nof the condition.', fontsize=13, fontweight='light', fontfamily='monospace')\n\n\nplt.show()","44bb6875":"fig = plt.figure(figsize=(10, 5), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(2, 2)\ngs.update(wspace=0.11, hspace=0.5)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\n\n\nax0.tick_params(axis='y', left=False)\nax0.get_yaxis().set_visible(False)\nax0.set_axisbelow(True)\nax1.tick_params(axis='y', left=False)\nax1.get_yaxis().set_visible(False)\nax1.set_axisbelow(True)\nfor s in [\"top\",\"right\",\"left\"]:\n        ax0.spines[s].set_visible(False)\n        ax1.spines[s].set_visible(False)\n\n# ax0.set_facecolor(face_color)\n# ax1.set_facecolor(face_color)\n\n\nsns.countplot(df['thall'], hue=df['output'],palette=[no_c,yes_c], ax=ax0, color=yes_c,ec='black', linewidth=1.5, alpha=1)\n \nsns.countplot(df['slp'], hue=df['output'],palette=[no_c,yes_c], ax=ax1, color=yes_c,ec='black', linewidth=1.5, alpha=1)\n\n\nax0.grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\nax1.grid(which='major', axis='x', zorder=0, color='gray', linestyle=':', dashes=(1,5))\n\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\nax0.text(Xstart, Yend+(Yend*0.3), 'Important Observations', fontsize=15, fontweight='bold', fontfamily='sansserif')\nax0.text(Xstart, Yend+(Yend*0.09), 'Thalassemia & ST Slope values look to be highly indicatvie of heart disease, and indeed of being at lower risk\\nin the case of some values.', fontsize=8, fontweight='light', fontfamily='monospace')\n\nax0.get_legend().remove()\nax1.get_legend().remove()\n\n# ax0.annotate('Large differences', xy=(1.4, 84), xytext=(0.2, 84), xycoords='data', \n#             fontsize=8, ha='center', va='center',fontfamily='monospace',\n#             bbox=dict(boxstyle='round', fc='firebrick'),\n#             arrowprops=dict(arrowstyle='-[, widthB=4.6, lengthB=1', lw=1, color='black'), color='white')\n\n\nplt.show()","405ad6c5":"fig = plt.figure(figsize=(10, 5), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(2, 2)\ngs.update(wspace=0.11, hspace=0.5)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[1, 0])\nax3 = fig.add_subplot(gs[1, 1])\n\n\n# ax0.set_facecolor(face_color)\n# ax1.set_facecolor(face_color)\n# ax2.set_facecolor(face_color)\n# ax3.set_facecolor(face_color)\n\n\ncummulate_survival_ratio = []\n\nfor i in range(data['trtbps'].min(), data['trtbps'].max()):\n    cummulate_survival_ratio.append(data[data['trtbps'] < i]['output'].sum() \/ len(data[data['trtbps'] < i]['output']))\n\nsns.lineplot(data=cummulate_survival_ratio,color=yes_c,ax=ax0)\n\n\nimport matplotlib.patches as patches\n    \nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\n\n\n\n# Create a Rectangle patch\nrect = patches.Rectangle((Xstart-1, 0.5),Xend+100, Yend+10, linewidth=1,\n                         edgecolor='lightgray', facecolor=\"#eeeeee\")\n  \n# Add the patch to the Axes\nax0.add_patch(rect)\n\n\n\n\n#ax0.text(Xstart,Yend+(Yend*0.1),'Resting Blood Pressure',fontfamily='serif',color='black',fontsize=10)\n\n###################\n\ncummulate_survival_ratio = []\n\nfor i in range(data['chol'].min(), data['chol'].max()):\n    cummulate_survival_ratio.append(data[data['chol'] < i]['output'].sum() \/ len(data[data['chol'] < i]['output']))\n\nsns.lineplot(data=cummulate_survival_ratio,color=yes_c,ax=ax1)\n\nXstart, Xend = ax1.get_xlim()\nYstart, Yend = ax1.get_ylim()\n\n# Create a Rectangle patch\nrect = patches.Rectangle((Xstart-1, 0.5),Xend+100, Yend, linewidth=1,\n                         edgecolor='lightgray', facecolor=\"#eeeeee\")\n  \n# Add the patch to the Axes\nax1.add_patch(rect)\n\n\n#ax1.text(Xstart,Yend+(Yend*0.1),'Cholesterol',fontfamily='serif',color='black',fontsize=10)\n\n###################\n\n\ncummulate_survival_ratio = []\n\nfor i in range(data['thalachh'].min(), data['thalachh'].max()):\n    cummulate_survival_ratio.append(data[data['thalachh'] < i]['output'].sum() \/ len(data[data['thalachh'] < i]['output']))\n\nsns.lineplot(data=cummulate_survival_ratio,color=yes_c,ax=ax2)\n\nXstart, Xend = ax2.get_xlim()\nYstart, Yend = ax2.get_ylim()\n\n# Create a Rectangle patch\nrect = patches.Rectangle((Xstart-1, 0.5),Xend+100, Yend, linewidth=1,\n                         edgecolor='lightgray', facecolor=\"#eeeeee\")\n  \n# Add the patch to the Axes\nax2.add_patch(rect)\n\n#ax2.text(Xstart,1.1,'Max. HR Acheived',fontfamily='serif',color='black',fontsize=10)\n\n\n###################\n\n\ncummulate_survival_ratio = []\n\nfor i in range(data['age'].min(), data['age'].max()):\n    cummulate_survival_ratio.append(data[data['age'] < i]['output'].sum() \/ len(data[data['age'] < i]['output']))\n\nsns.lineplot(data=cummulate_survival_ratio,color=yes_c,ax=ax3)\n\nXstart, Xend = ax3.get_xlim()\nYstart, Yend = ax3.get_ylim()\n\n# Create a Rectangle patch\nrect = patches.Rectangle((Xstart-1, 0.5),Xend+100, Yend+10, linewidth=1,\n                         edgecolor='lightgray', facecolor=\"#eeeeee\")\n  \n# Add the patch to the Axes\nax3.add_patch(rect)\n\n#ax3.text(Xstart,Yend+(Yend*0.1),'Age',fontfamily='serif',color='black',fontsize=10)\n\n###################\n\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    \n\nax0.set_yticks(np.arange(0, 1.25, 0.25))\nax1.set_yticks(np.arange(0, 1.25, 0.25))\nax2.set_yticks(np.arange(0, 1.25, 0.25))\nax3.set_yticks(np.arange(0, 1.25, 0.25))\n\nax0.tick_params(axis='both', which='major', labelsize=8)\n# ax0.tick_params(axis='both', colors=sub_col)\nax0.tick_params(axis=u'both', which=u'both',length=0)\n\nax1.tick_params(axis='both', which='major', labelsize=8)\n# ax1.tick_params(axis='both', colors=sub_col)\nax1.tick_params(axis=u'both', which=u'both',length=0)\n\nax2.tick_params(axis='both', which='major', labelsize=8)\n# ax2.tick_params(axis='both', colors=sub_col)\nax2.tick_params(axis=u'both', which=u'both',length=0)\n\nax3.tick_params(axis='both', which='major', labelsize=8)\n# ax3.tick_params(axis='both', colors=sub_col)\nax3.tick_params(axis=u'both', which=u'both',length=0)\n\n\n\n\n###############\nax0.set_xlabel(\"Resting Blood Pressure\",loc='left',fontsize=10,fontfamily='sans-serif')\nax1.set_xlabel(\"Cholesterol\",loc='left',fontsize=10,fontfamily='sans-serif')\nax2.set_xlabel(\"Max. HR Acheived\",loc='left',fontsize=10,fontfamily='sans-serif')\nax3.set_xlabel(\"Age\",loc='left',fontsize=10,fontfamily='sans-serif')\n\n\n\n#ax2.set_ylabel(\" \",loc='top',fontsize=sub,color=sub_col)\n\n#title\nax0.text(Xstart,1.4,'How does risk vary by each variable as it changes?',fontfamily='sans-serif',color='black',fontweight='bold',fontsize=15)\nax0.text(Xstart,1.25,\n'''\nThe grey box denotes where risk is greater than 50%.'''\n         \n,fontfamily='monospace',fontsize=8)\n\nax1.set_yticklabels([])\nax3.set_yticklabels([])\n\nplt.show()","80ae18ab":"fig = plt.figure(figsize=(10, 5), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(2, 3)\ngs.update(wspace=0.3, hspace=0.5)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\n\n\n\n# ax0.set_facecolor(face_color)\n# ax1.set_facecolor(face_color)\n# ax2.set_facecolor(face_color)\n\n\nsns.scatterplot(data=data,x=data['age'],y=data['trtbps'],hue=data['output'],ec='black',ax=ax0,palette=[no_c,yes_c])\nsns.scatterplot(data=data,x=data['age'],y=data['thalachh'],hue=data['output'],ec='black',ax=ax1,palette=[no_c,yes_c])\nsns.scatterplot(data=data,x=data['age'],y=data['chol'],hue=data['output'],ec='black',ax=ax2,palette=[no_c,yes_c])\n\n\nax0.tick_params(axis='both', which='major', labelsize=8)\n# ax0.tick_params(axis='both', colors=sub_col)\nax0.tick_params(axis=u'both', which=u'both',length=0)\n\nax1.tick_params(axis='both', which='major', labelsize=8)\n# ax1.tick_params(axis='both', colors=sub_col)\nax1.tick_params(axis=u'both', which=u'both',length=0)\n\nax2.tick_params(axis='both', which='major', labelsize=8)\n# ax2.tick_params(axis='both', colors=sub_col)\nax2.tick_params(axis=u'both', which=u'both',length=0)\n\n\n\n\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n\n    \n###############\n# ax0.set_xlabel(\"Age\",loc='left',fontsize=10,color=sub_col)\n# ax1.set_xlabel(\"\",loc='left',fontsize=10,color=sub_col)\n# ax2.set_xlabel(\"\",loc='left',fontsize=10,color=sub_col)\n\n# ax0.set_ylabel(\"Rest. BP.\",loc='top',fontsize=10,color=sub_col)\n# ax1.set_ylabel(\"Max. HR.\",loc='top',fontsize=10,color=sub_col)\n# ax2.set_ylabel(\"Chol.\",loc='top',fontsize=10,color=sub_col)\n\n\nax0.text(20,254,'How do the variables interact?',fontsize=15,fontfamily='sansserif',fontweight='bold')\nax0.text(20,237.5,'The strongest relationship appears to be between Age & Max HR.',fontsize=10,fontfamily='monospace')\n\nax0.get_legend().remove()\nax1.get_legend().remove()\nax2.get_legend().remove()\n\nax0.text(20,220,'Heart Disease',fontsize=8,fontfamily='sansserif',color=yes_c)\nax0.text(40,220,'|',fontsize=8,fontfamily='serif')\nax0.text(41.5,220,'No Heart Disease',fontsize=8,fontfamily='sansserif',color=no_c)\n\nplt.show()\n","265b5122":"def age_band(num):\n    for i in range(1, 100):\n        if num < 10*i :  return f'{(i-1) * 10} ~ {i*10}'\n\ndata['Age band'] = data['age'].apply(age_band)\nhr_age = data[['Age band', 'output','sex']].groupby('Age band')['output'].value_counts().sort_index().unstack().fillna(0)\nhr_age['Condition rate'] = hr_age[1] \/ (hr_age[0] + hr_age[1]) * 100\nage_band = data['Age band'].value_counts().sort_index()","69efde66":"age_sex_surv = data.groupby(['sex','Age band'])['output'].mean().unstack().T\nfem_mean = age_sex_surv[0].mean()\nmale_mean = age_sex_surv[1].mean()\n\nfig = plt.figure(figsize=(5, 4), dpi=150,facecolor=background_color)\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0.2, hspace=0.8)\nax0 = fig.add_subplot(gs[0, 0])\n\n# ax0.set_facecolor(face_color)\n\nfor s in [\"right\", \"top\",\"bottom\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n\nmy_range=range(1,len(age_sex_surv.index)+1)\n \nax0.hlines(y=my_range, xmin=age_sex_surv[1], xmax=age_sex_surv[0], color='gray', alpha=0.4)\nsns.scatterplot(age_sex_surv[1], my_range, color=yes_c, ec='black',alpha=1,s=100, label='male',ax=ax0)\n\nsns.scatterplot(age_sex_surv[0], my_range, color=no_c,ec='black', alpha=1,s=100, label='female',ax=ax0)\nax0.get_legend().remove()\n\nXstart, Xend = ax0.get_xlim()\nYstart, Yend = ax0.get_ylim()\nax0.set_xticks(np.arange(0, 1, 0.1))\nax0.set_yticklabels([' ','20 ~ 30', '30 ~ 40', '40 ~ 50', '50 ~ 60','60 ~ 70', '70 ~ 80', '80 ~ 90'])\n\n\nax0.tick_params(axis='x', which='major', labelsize=8)\n# ax0.tick_params(axis='both', colors=sub_col)\nax0.tick_params(axis=u'both', which=u'both',length=0)\n\n# ax0.set_xlabel(\"Risk of having heart disease\",loc='left',fontsize=8,color=sub_col)\n\n\nax0.text(-0.04,7.6,'Condition rates by age & sex',fontsize=15,fontweight='bold',color='black',fontfamily='sansserif')\nax0.text(-0.04,6.7,'The sex is not specified in the data, but it looks to be \\nan important factor, with red being higher risk in all \\ncategories and a higher mean risk.',fontsize=10,fontfamily='monospace')\n\n#ax0.text(0,7,'Male',fontsize=8,fontweight='bold',color=yes_c,fontfamily='serif')\n#ax0.text(0+0.037,7,'|',fontsize=8,fontweight='bold',color='black',fontfamily='serif')\n#ax0.text(0+0.0436,7,'Female',fontsize=8,fontweight='bold',color=no_c,fontfamily='serif')\n\nax0.axvline(male_mean ,color=yes_c, linewidth=0.4, linestyle='dashdot')\nax0.axvline(fem_mean ,color=no_c, linewidth=0.4, linestyle='dashdot')\n\n\n# Show the graph\nplt.show()","3cf05634":"# Importing Libararies and packages","5ee4b559":"# Exploratory Data Analysis","6ad7a42a":"## Basic tasks\n\n- The shape of the data\n- Preview of the first 2 rows of the data\n- Checking the number of unique values in each column\n- Separating the columns in categorical and continuous\n- Missing values","4673afe3":"### Univariate Analysis\nUnivariate analysis is a basic kind of analysis technique for statistical data. Here the data contains just one variable and does not have to deal with the relationship of a cause and effect. Like for example consider a survey of a classroom. The analysts would want to count the number of boys and girls in the room. The data here simply talks about the number which is a single variable and the variable quantity. The main objective of the univariate analysis is to describe the data in order to find out the patterns in the data. This is done by looking at the mean, mode, median, standard deviation, dispersion, etc.","0639b528":"# Reading the dataset","a3f2504b":"\nSome of my other works:\n\nhttps:\/\/www.kaggle.com\/udbhavpangotra\/tps-apr21-eda-model\nhttps:\/\/www.kaggle.com\/udbhavpangotra\/heart-attacks-extensive-eda-and-visualizations\nhttps:\/\/www.kaggle.com\/udbhavpangotra\/what-do-people-use-youtube-for-in-great-britain\n\n\nkernels taken help from \n\nhttps:\/\/www.kaggle.com\/namanmanchanda\/heart-attack-eda-prediction-90-accuracy\nhttps:\/\/www.kaggle.com\/kaamraankhan\/heart-attack-analysis-and-prediction\nhttps:\/\/www.kaggle.com\/aishwaryajmp\/heart-attack-prediction-analysis#Splitting-arrays-into-Training-and-Testing-Arrays\nhttps:\/\/www.kaggle.com\/joshuaswords\/awesome-eda-predicting-heart-disease#Categorical-variables","a33df98e":"# Understanding Heart Attacks\n\n![Heart Attack](https:\/\/www.mayoclinic.org\/-\/media\/kcms\/gbs\/patient-consumer\/images\/2013\/08\/26\/10\/08\/ds00094_im00938_mcdc7_heartattackthu_jpg.jpg)\n\n### Overview\nA heart attack occurs when the flow of blood to the heart is blocked. The blockage is most often a buildup of fat, cholesterol and other substances, which form a plaque in the arteries that feed the heart (coronary arteries).\n\nSometimes, a plaque can rupture and form a clot that blocks blood flow. The interrupted blood flow can damage or destroy part of the heart muscle.\n\nA heart attack, also called a myocardial infarction, can be fatal, but treatment has improved dramatically over the years.\n\n### Symptoms\nCommon heart attack signs and symptoms include:\n\n- Pressure, tightness, pain, or a squeezing or aching sensation in your chest or arms that may spread to your neck, jaw or back\n- Nausea, indigestion, heartburn or abdominal pain\n- Shortness of breath\n- Cold sweat\n- Fatigue\n- Lightheadedness or sudden dizziness\n\n### Heart attack symptoms vary\nNot all people who have heart attacks have the same symptoms or have the same severity of symptoms. Some people have mild pain; others have more severe pain. Some people have no symptoms. For others, the first sign may be sudden cardiac arrest. However, the more signs and symptoms you have, the greater the chance you're having a heart attack.\n\nSome heart attacks strike suddenly, but many people have warning signs and symptoms hours, days or weeks in advance. The earliest warning might be recurrent chest pain or pressure (angina) that's triggered by activity and relieved by rest. Angina is caused by a temporary decrease in blood flow to the heart.\n\n### Causes\nA heart attack occurs when one or more of your coronary arteries becomes blocked. Over time, a buildup of fatty deposits, including cholesterol, form substances called plaques, which can narrow the arteries (atherosclerosis). This condition, called coronary artery disease, causes most heart attacks.\n\nDuring a heart attack, a plaque can rupture and spill cholesterol and other substances into the bloodstream. A blood clot forms at the site of the rupture. If the clot is large, it can block blood flow through the coronary artery, starving the heart of oxygen and nutrients (ischemia).\n\nYou might have a complete or partial blockage of the coronary artery.\n\n- A complete blockage means you've had an ST elevation myocardial infarction (STEMI).\n- A partial blockage means you've had a non-ST elevation myocardial infarction (NSTEMI).\n\nDiagnosis and treatment might be different depending on which type you've had.\n\nAnother cause of a heart attack is a spasm of a coronary artery that shuts down blood flow to part of the heart muscle. Using tobacco and illicit drugs, such as cocaine, can cause a life-threatening spasm.\n\nInfection with COVID-19 also may damage your heart in ways that result in a heart attack.","c8beda33":"# About the dataset\n\n- **Age** : Age of the patient\n\n- **Sex** : Sex of the patient\n\n- **exang**: exercise induced angina (1 = yes; 0 = no)\n\n- **ca**: number of major vessels (0-3)\n\n- **cp** : Chest Pain type chest pain type\n\n - Value 1: typical angina\n - Value 2: atypical angina\n - Value 3: non-anginal pain\n - Value 4: asymptomatic\n \n\n- **trtbps** : resting blood pressure (in mm Hg)\n\n- **chol** : cholestoral in mg\/dl fetched via BMI sensor\n\n- **fbs** : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n\n- **rest_ecg** : resting electrocardiographic results\n\n - Value 0: normal\n - Value 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n - Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\n\n\n- **thalach** : maximum heart rate achieved\n\n- **target** : \n - 0 = less chance of heart attack,  \n - 1 = more chance of heart attack\n \n\n\n**Types Of Features**\n\n \n- Categorical Features:\n\nA categorical variable is one that has two or more categories and each value in that feature can be categorised by them.For example, gender is a categorical variable having two categories (male and female). Now we cannot sort or give any ordering to such variables. They are also known as Nominal Variables.\n \n- Continous Feature:\n\nA feature is said to be continous if it can take values between any two points or between the minimum or maximum values in the features column.","5f71286c":"# If there are any suggesion for the notebook please comment, that would be helpful. Also please upvote if you liked it! Thank you","1fa66ce8":"### Observations : \n- There are a total of 303 people.\n- 165 have a higher chance of suffering a heart attack which is **54%** of the sample.\n- 138 have a comparitively low chance of suffering a heart attack which is **46%** of the sample.\n\n- On average, approx. 3% of people are affected by heart disease in the USA. Whereas here, it is verginf on 50%. That raises questions as to what population of people we are looking at.\n\n- Most numeric variables appear to have a positive skew\n- Thalassemia & ST Slope values look to be highly indicatvie of heart disease, and indeed of being at lower risk in the case of some values.\n- Max. HR Acheived & Num. Major Blood Vessels look to be highly indicatvie of heart disease.\n- As resting blood pressure increasres, so to does risk of heart disease\n- Rising Choloseterol does not appear to be a major indicator\n- A low Max HR acheived is a big warning sign.\n- Risk of heart disease increases with age\n- The sex is not specified in the data, but it looks to be \\nan important factor, with red being higher risk in all categories and a higher mean risk\n- People with Non-Anginal chest pain, that is with cp = 2 have higher chances of heart attack.\n- People with 0 major vessels, that is with caa = 0 have high chance of heart attack.\n- People with sex = 1 have higher chance of heart attack.\n- People with thall = 2 have much higher chance of heart attack.\n- People with no exercise induced angina, that is with exng = 0 have higher chance of heart attack.People with Non-Anginal chest pain, that is with cp = 2 have higher chances of heart attack.\n- People with 0 major vessels, that is with caa = 0 have high chance of heart attack.\n- People with sex = 1 have higher chance of heart attack.\n- People with thall = 2 have much higher chance of heart attack.\n- People with no exercise induced angina, that is with exng = 0 have higher chance of heart attack.\n\n\n- The mean age is lesser for higher chance of heart attack\n\n- Some, features like resting heart rate are indifferent to chances of heart attack\n\n-  Maximum heart rate is directly proportional to the chances of heart attack\n\n-  Oldpeak is negatively correlated with the output\n\n-  For certain categories the chances of heart attack was found high:-\n\n - Age = 0\n - cp = 2,3\n - thall = 2\n - caa = 0,4\n - slp = 2","eede2552":"**Hello Visitor,**\n\n**This is one of my attempts at making a detailed and well thought out kernels, hope you gain some insights from it and find it useful! Do upvote and share it if you like it! :)**\n\n**This kernel has covered 4 topics:**\n\n- Basic Introduction\n- EDA\n- Feature Engineering\n- Model Building\n\n\nThe name of the dataset is **Heart Attack Analysis & Prediction Dataset**\n\nThe tag line is - **A dataset for heart attack classification**","759c9c04":"The first thing we are going to check is the distribution of the target feature. It's important to know if the class is balanced or not. If so, we would probably have to handle it.","44dd45c9":"# Understanding the data"}}