{"cell_type":{"a797b336":"code","1c30431d":"code","6ab52fc7":"code","835b25de":"code","9734c20a":"code","3f567fa3":"code","6a39dd0a":"code","f07d6383":"code","9b55b057":"code","b1bf900c":"code","9a3181c9":"code","6abbcddb":"code","76c14260":"code","76d7793f":"code","212efb83":"code","71a1a217":"code","e223cf4a":"code","44becfd1":"code","3e8a59b8":"code","cc60b7c0":"code","461faef7":"code","c52fc31f":"code","f59b5f55":"code","3aa79e00":"code","9254d65d":"code","9fb89f7d":"code","1ac10835":"code","3d00edbb":"code","62d489ef":"code","da41f897":"code","7d3dd9be":"code","5535ed59":"code","1b752bcc":"markdown","8a5c3755":"markdown","9157a4a2":"markdown","bd9353c7":"markdown","4f9ccdd3":"markdown","75625679":"markdown","29b5afa3":"markdown","179632f0":"markdown","f50218d5":"markdown","269e8594":"markdown"},"source":{"a797b336":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c30431d":"# Load Data\ncredit = pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')\ncredit.head()","6ab52fc7":"credit.shape","835b25de":"# Checking whether data contains null value\nprint(\"Null Value:\", credit.isnull().sum().sum())","9734c20a":"# Descriptive Stats\ncredit.describe()","3f567fa3":"sns.countplot(x='Class', data=credit)","6a39dd0a":"credit['Class'].value_counts()","f07d6383":"credit.dtypes","9b55b057":"x = credit.iloc[:, :-1] # Independe variables\ny = credit.iloc[:, -1] # Dependent Varible","b1bf900c":"## Handling imbalance data\nfrom collections import Counter\nfrom imblearn.combine import SMOTETomek\n\nos = SMOTETomek(n_jobs=-1)\nX_resample, Y_resample = os.fit_sample(x, y)\nprint('Before: {}'.format(Counter(y)))\nprint('Before: {}'.format(Counter(Y_resample)))","9a3181c9":"# Train Test Split\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(X_resample, Y_resample, test_size=0.2, random_state=100)\n# checking the new shapes\nprint(\"Shape of x_train: \", x_train.shape)\nprint(\"Shape of x_test: \", x_test.shape)\nprint(\"Shape of y_train: \", y_train.shape)\nprint(\"Shape of y_test: \", y_test.shape)","6abbcddb":"from sklearn.linear_model import LogisticRegression\n\nlr_model = LogisticRegression()\nlr_model.fit(x_train, y_train)","76c14260":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report, precision_recall_curve, roc_auc_score\n\nlr_y_pred = lr_model.predict(x_test)\n\nprint('Accuracy Score:', accuracy_score(y_test, lr_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, lr_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, lr_y_pred))\nprint('AUC score is: ', roc_auc_score(y_test, lr_y_pred))","76d7793f":"lr_y_pred_prob = lr_model.predict_proba(x_test)[:,1]\nprecision, recall, thresholds = precision_recall_curve(y_test, lr_y_pred_prob)\nplt.plot(precision, recall)\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision Recall Curve')","212efb83":"from sklearn.neighbors import KNeighborsClassifier\n\nknn_clf_model = KNeighborsClassifier(weights='distance', n_jobs=-1)\nknn_clf_model.fit(x_train, y_train)","71a1a217":"knn_y_pred = knn_clf_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, knn_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, knn_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, knn_y_pred))\nprint('AUC score is: ', roc_auc_score(y_test, knn_y_pred))","e223cf4a":"knn_y_pred_prob = knn_clf_model.predict_proba(x_test)[:,1]\nprecision, recall, thresholds = precision_recall_curve(y_test, knn_y_pred_prob)\nplt.plot(precision, recall)\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision Recall Curve')","44becfd1":"from sklearn.tree import DecisionTreeClassifier\n\ndt_clf_model = DecisionTreeClassifier()\ndt_clf_model.fit(x_train, y_train)","3e8a59b8":"dt_y_pred = dt_clf_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, dt_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, dt_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, dt_y_pred))\nprint('AUC score is: ', roc_auc_score(y_test, dt_y_pred))","cc60b7c0":"dt_y_pred_prob = dt_clf_model.predict_proba(x_test)[:,1]\nprecision, recall, thresholds = precision_recall_curve(y_test, dt_y_pred_prob)\nplt.plot(precision, recall)\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision Recall Curve')","461faef7":"from sklearn.ensemble import RandomForestClassifier\n\nrf_clf_model = RandomForestClassifier(n_jobs=-1)\nrf_clf_model.fit(x_train, y_train)","c52fc31f":"rf_y_pred = rf_clf_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, rf_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, rf_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, rf_y_pred))\nprint('AUC score is: ', roc_auc_score(y_test, rf_y_pred))","f59b5f55":"rf_y_pred_prob = rf_clf_model.predict_proba(x_test)[:,1]\nprecision, recall, thresholds = precision_recall_curve(y_test, rf_y_pred_prob)\nplt.plot(precision, recall)\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision Recall Curve')","3aa79e00":"from sklearn.ensemble import AdaBoostClassifier\n\nada_clf_model = AdaBoostClassifier(random_state=100)\nada_clf_model.fit(x_train, y_train)","9254d65d":"ada_y_pred = ada_clf_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, ada_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, ada_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, ada_y_pred))\nprint('AUC score is: ', roc_auc_score(y_test, ada_y_pred))","9fb89f7d":"ada_y_pred_prob = ada_clf_model.predict_proba(x_test)[:,1]\nprecision, recall, thresholds = precision_recall_curve(y_test, ada_y_pred_prob)\nplt.plot(precision, recall)\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision Recall Curve')","1ac10835":"ada_rf_model = AdaBoostClassifier(base_estimator=rf_clf_model)\nada_rf_model.fit(x_train, y_train)","3d00edbb":"ada_rf_y_pred = ada_rf_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, ada_rf_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, ada_rf_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, ada_rf_y_pred))\nprint('AUC score is: ', roc_auc_score(y_test, ada_rf_y_pred))","62d489ef":"ada_rf_y_pred_prob = ada_rf_model.predict_proba(x_test)[:,1]\nprecision, recall, thresholds = precision_recall_curve(y_test, ada_rf_y_pred_prob)\nplt.plot(precision, recall)\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision Recall Curve')","da41f897":"ada_lr_model = AdaBoostClassifier(base_estimator=lr_model)\nada_lr_model.fit(x_train, y_train)","7d3dd9be":"ada_lr_y_pred = ada_lr_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, ada_lr_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, ada_lr_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, ada_lr_y_pred))\nprint('AUC score is: ', roc_auc_score(y_test, ada_lr_y_pred))","5535ed59":"ada_lr_y_pred_prob = ada_lr_model.predict_proba(x_test)[:,1]\nprecision, recall, thresholds = precision_recall_curve(y_test, ada_lr_y_pred_prob)\nplt.plot(precision, recall)\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision Recall Curve')","1b752bcc":"# Ranom Forest Classifier","8a5c3755":"# Logistic Regression","9157a4a2":"# **Credit Card Fraud Detection**\n\n**The aim of this notebook is to build a classifier that can detect credit card fraudulent transactions. We will use a variety of machine learning algorithms that will be able to discern fraudulent from non-fraudulent one. By the end of this machine learning project, you will learn how to implement machine learning algorithms to perform classification.**","bd9353c7":"# Decession Tree","4f9ccdd3":"# Ada Boosting","75625679":"# Conclusion\n\nFraud detection is a complex issue that requires a substantial amount of planning before throwing machine learning algorithms at it. Nonetheless, it is also an application of data science and machine learning for the good, which makes sure that the customer\u2019s money is safe and not easily tampered with.\n\nAs always, if you have any questions or found mistakes, please do not hesitate to reach out to me.","29b5afa3":"# Ada Boost With Random Forest","179632f0":"# KNN Classifier","f50218d5":"# **SMOTETomek**\n\nSMOTETomek is somewhere upsampling and downsampling. SMOTETomek is a hybrid method which is a mixture of the above two methods, it uses an under-sampling method (Tomek) with an oversampling method (SMOTE). This is present within imblearn.combine module.","269e8594":"# Ada Boost with Logistic Regression"}}