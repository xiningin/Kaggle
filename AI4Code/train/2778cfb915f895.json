{"cell_type":{"f2e154d7":"code","3a674bac":"code","b517c03e":"code","07d9ca99":"code","a60a0ce0":"code","a728fb61":"code","b716b164":"code","ce76e95a":"code","845a70c3":"code","f1059500":"code","27e2158a":"code","fc4b074c":"code","c526b829":"code","72c6b968":"code","ae86c323":"code","535738e9":"code","0ec44bb6":"code","bf40f42c":"code","b4459707":"code","6355d1dd":"code","66d528f0":"code","77977802":"code","85273280":"code","2234dc2c":"code","bed94218":"code","ed44ccbf":"code","d3ed2790":"code","8c96e28e":"code","5bcfcce8":"code","261ac9d3":"code","8e6aed3c":"code","3aae2394":"code","940cf854":"code","4909a15a":"code","ff03d5ed":"code","edb5edf4":"code","b1fa5902":"code","c0725cb7":"code","abef01bf":"code","9eb5159f":"code","f79da765":"code","d98411dc":"code","95dbc19a":"code","513f920d":"code","03b2dba8":"code","aff63e9c":"code","21abe60e":"code","d278c506":"code","0c0acf9f":"code","5e7c3b47":"code","305c8b93":"code","61489d9f":"code","b350e5cb":"code","8917118d":"code","2942192d":"code","4c7e69a7":"code","d53e2a8b":"code","89502ca3":"code","d73a306c":"code","e730e9d2":"code","39ffe09b":"code","36259b5b":"code","1963414f":"code","38f8d739":"code","679af9d8":"code","4602ca56":"code","7b2934ab":"code","08e7e945":"code","8a1a2a51":"code","f2de9799":"code","322bdcd1":"code","86a23ebe":"code","2d201c2f":"markdown","76f66fea":"markdown","3ae5a34a":"markdown","15ab0acd":"markdown","be0be97e":"markdown","5a808419":"markdown","1b842b1b":"markdown","53b0f6a3":"markdown","d1edd1f8":"markdown","75c9bbdd":"markdown","a3b59972":"markdown","900e09bc":"markdown","a3682854":"markdown","49430ae2":"markdown","bab1e610":"markdown","bdd1c82f":"markdown","aaf2e636":"markdown","e94a2c0c":"markdown","42c42e8e":"markdown","1f6826da":"markdown","8dc0e06d":"markdown","e58f7aa3":"markdown","4053971e":"markdown","0fbd461d":"markdown","e1938ca3":"markdown","58ba1c0a":"markdown"},"source":{"f2e154d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a674bac":"import pandas as pd\nimport numpy as np\n\nimport datetime \nimport time\n\n%matplotlib inline\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\n\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori, association_rules","b517c03e":"events_df = pd.read_csv('..\/input\/ecommerce-dataset\/events.csv')\ncategory_tree_df = pd.read_csv('..\/input\/ecommerce-dataset\/category_tree.csv')\nitem_properties_1_df = pd.read_csv('..\/input\/ecommerce-dataset\/item_properties_part1.csv')\nitem_properties_2_df = pd.read_csv('..\/input\/ecommerce-dataset\/item_properties_part2.csv')","07d9ca99":"events_df","a60a0ce0":"events_df.timestamp = events_df.timestamp.apply(lambda x: datetime.datetime.fromtimestamp(x\/\/1000.0) )","a728fb61":"events_df.head()","b716b164":"events_df.info()","ce76e95a":"events_df.describe()","845a70c3":"events_df.event.value_counts()","f1059500":"sns.countplot(x='event', data=events_df)","27e2158a":"data = events_df.event.value_counts()\nlabels = data.index\nsizes = data.values\nexplode = (0, 0.15, 0.15)  # explode 1st slice\nplt.subplots(figsize=(8,8))\n# Plot\nplt.pie(sizes, explode=explode, labels=labels,autopct='%1.1f%%', shadow=False, startangle=0)\n \nplt.axis('equal')\nplt.show()","fc4b074c":"#Xem s\u1ed1 l\u01b0\u1ee3ng vistort unique\ncustomers  =  events_df.visitorid.unique()\ncustomers.size","c526b829":"# T\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng visitor\nprint('T\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng kh\u00e1ch truy c\u1eadp:', events_df['visitorid'].size)\nprint('S\u1ed1 kh\u00e1ch truy c\u1eadp th\u1ef1c th\u1ebf:', customers)","72c6b968":"#Nh\u1eefng giao d\u1ecbch \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n\npurchased_count  =  len(events_df.transactionid.unique())\nprint('transaction:',purchased_count)","ae86c323":"# Nh\u00f3m itemid theo envent\ngrouped = events_df.groupby('event')['itemid'].apply(list)\ngrouped","535738e9":"import operator\nviews = grouped['view']\n# creating dictionary for key value pair \ncount_view ={}\n#since views is a list, we will convert it into numpy array for further manipulations\nviews = np.array(views[:])\n#counting uniques values of views of this numpy views array\nunique, counts = np.unique(views, return_counts=True)\n# converting unique and counts as a dictionay with key as unique and value as counts\ncount_view = dict(zip(unique, counts))\n#sorting the dictionary\nsort_count_view = sorted(count_view.items(), key = operator.itemgetter(1), reverse = True)\n# keeping number of unique views on X-axis\nx = [i[0] for i in sort_count_view[:7]]\n# keeping count number of views on Y-axis\ny = [i[1] for i in sort_count_view[:7]]\nsns.barplot(x, y, order=x, palette=\"rocket\")\n","0ec44bb6":"addtocart = grouped['addtocart']\n# creating dictionary for key value pair \ncount_addtocart ={}\n#since addtocart is a list, we will convert it into numpy array for further manipulations\naddtocart = np.array(addtocart[:])\n#counting uniques values of addtocart items of this numpy addtocart array\nunique, counts = np.unique(addtocart, return_counts=True)\n# converting unique and counts as a dictionay with key as unique and value as counts\ncount_addtocart = dict(zip(unique, counts))\n#sorting the dictionary\nsort_count_addtocart = sorted(count_addtocart.items(), key = operator.itemgetter(1), reverse = True)\n# keeping number of unique views on X-axis\nx = [i[0] for i in sort_count_addtocart[:7]]\n# keeping count number of views on Y-axis\ny = [i[1] for i in sort_count_addtocart[:7]]\nsns.barplot(x, y, order=x, palette=\"pastel\")","bf40f42c":"transaction = grouped['transaction']\n# creating dictionary for key value pair \ncount_transaction ={}\n#since addtocart is a list, we will convert it into numpy array for further manipulations\ntransaction = np.array(transaction[:])\n#counting uniques values of addtocart items of this numpy addtocart array\nunique, counts = np.unique(transaction, return_counts=True)\n# converting unique and counts as a dictionay with key as unique and value as counts\ncount_transaction = dict(zip(unique, counts))\n#sorting the dictionary\nsort_count_transaction = sorted(count_transaction.items(), key = operator.itemgetter(1), reverse = True)\n# keeping number of unique views on X-axis\nx = [i[0] for i in sort_count_transaction[:7]]\n# keeping count number of views on Y-axis\ny = [i[1] for i in sort_count_transaction[:7]]\nsns.barplot(x, y, order=x, palette=\"vlag\")\n","b4459707":"#Convert date to string\nevents_df['date'] = [d.date().isoformat() for d in events_df.timestamp]\n\n# Count of visitors each day\ncount_day = events_df.groupby('date').visitorid.count().to_frame().reset_index()\ncount_day['date'] = pd.to_datetime(count_day['date'])\ncount_day.head()","6355d1dd":"ax = sns.lineplot(x='date', y='visitorid', data=count_day)\nax.set(xlabel=\"\", \n       ylabel=\"No. of Visitors\",\n       title=\"Visitors Over Time\")\nax.set_xlim(count_day.iloc[0].date, count_day.iloc[-1].date)\nax.tick_params(axis=\"x\", rotation=45)","66d528f0":"temp = events_df.groupby(['date','event']).visitorid.count().to_frame().reset_index()\n#\ntemp['date'] = pd.to_datetime(temp['date'])\ntemp.head()","77977802":"ax = sns.lineplot(x='date', y='visitorid', hue='event', data=temp)\nax.set(xlabel=\"\", \n       ylabel=\"No. of Visitors\",\n       title=\"Visitors Over Time by Events\")\nax.set_xlim(temp.iloc[0].date, temp.iloc[-1].date)\nax.tick_params(axis=\"x\", rotation=45)","85273280":"# Nh\u1eefng kh\u00e1ch h\u00e0ng th\u1ef1c hi\u1ec7n th\u00eam v\u00e0o gi\u1ecf h\u00e0ng v\u00e0 giao d\u1ecbch\ntemp = events_df[events_df.event != 'view'].groupby(['date','event']).visitorid.count().to_frame().reset_index()\ntemp['date'] = pd.to_datetime(temp['date'])\ntemp.head()","2234dc2c":"ax = sns.lineplot(x='date', y='visitorid', hue='event', data=temp)\nax.set(xlabel=\"\", \n       ylabel=\"No. of Visitors\",\n       title=\"Visitors Over Time by Events\")\nax.set_xlim(temp.iloc[0].date, temp.iloc[-1].date)\nax.tick_params(axis=\"x\", rotation=45)","bed94218":"item_properties_1_df","ed44ccbf":"item_properties_2_df","d3ed2790":"items_df = item_properties_1_df.append(item_properties_2_df)","8c96e28e":"items_df\n","5bcfcce8":"items_df.timestamp = items_df.timestamp.apply(lambda x: datetime.datetime.fromtimestamp(x\/\/1000.0) )\nitems_df.head()","261ac9d3":"items_df.info()","8e6aed3c":"len(items_df.itemid.unique())","3aae2394":"len(items_df.property.unique())","940cf854":"items_df.describe()","4909a15a":"category_tree_df.head()","ff03d5ed":"len(category_tree_df.categoryid.unique())","edb5edf4":"len(category_tree_df.parentid.unique())","b1fa5902":"events_df[events_df.visitorid == 102019].sort_values('timestamp')","c0725cb7":"#G\u1ed9p b\u1ea3ng d\u1eef li\u1ec7u theo l\u01b0\u1ee3t view\ndata_event = events_df[events_df.event == 'view'].groupby(['date','event']).visitorid.count().to_frame().reset_index()\ndata_event['date'] = pd.to_datetime(data_event['date'])\ndata_event.drop('event', axis=1, inplace=True)\ndata_event.columns = ['date', 'view']\n#G\u1ed9p b\u1ea3ng d\u1eef li\u1ec7u theo l\u01b0\u1ee3t addtocart\ndata_event1 = events_df[events_df.event == 'addtocart'].groupby(['date','event']).visitorid.count().to_frame().reset_index()\ndata_event1['date'] = pd.to_datetime(data_event1['date'])\ndata_event1.drop('event', axis=1, inplace=True)\ndata_event1.columns = ['date', 'addtocart']\n#G\u1ed9p b\u1ea3ng d\u1eef li\u1ec7u theo l\u01b0\u1ee3t transaction\ndata_event2 = events_df[events_df.event == 'transaction'].groupby(['date','event']).visitorid.count().to_frame().reset_index()\ndata_event2['date'] = pd.to_datetime(data_event2['date'])\ndata_event2.drop('event', axis=1, inplace=True)\ndata_event2.columns = ['date', 'transaction']\n# N\u1ed1i d\u1eef li\u1ec7u\ndata = pd.merge(data_event, data_event1, on='date')\ndata = pd.merge(data, data_event2, on='date')\ndata = pd.merge(data, count_day, on='date')","abef01bf":"data","9eb5159f":"#T\u1ea1o b\u1ea3ng \u0111\u1ebfm s\u1ed1 l\u1ea7n th\u1ef1c hi\u1ec7n\ndata_e = events_df.groupby(['visitorid']).event.count().to_frame().reset_index().sort_values('event')\ndata_e.columns = ['visitorid', 'count_e']\ndata_e","f79da765":"# N\u1ed1i v\u00e0o d\u1eef li\u1ec7u b\u1ea3ng \nevents_df11 = events_df\ndata_n = pd.merge(events_df11, data_e, on='visitorid')\ndata_n","d98411dc":"# C\u00e1c kh\u00e1ch h\u00e0ng ch\u1ec9 v\u00e0o m\u1ed9t l\u1ea7n\ndata_n1= data_n[data_n['count_e'] == 1]\nprint(data_n1.count())\nprint(data_n1.shape)\nprint('s\u1ed1 kh\u00e1ch h\u00e0ng ch\u1ec9 v\u00e0o xem 1 l\u1ea7n :',data_n1[data_n1['event'] == 'view'].shape)","95dbc19a":"# X\u00f3a d\u1eef li\u1ec7u c\u00e1c kh\u00e1ch h\u00e0ng ch\u1ec9 v\u00e0o xem 1 l\u1ea7n\neven_dfn = data_n.drop(data_n[(data_n['event'] == 'view') & (data_n['count_e'] == 1)].index)\nprint(even_dfn.count())\neven_dfn","513f920d":"customers.size","03b2dba8":"#S\u1ed1 kh\u00e1ch h\u00e0ng th\u1ef1c hi\u1ec7n giao d\u1ecbch \ncustomer_purchased = events_df[events_df.transactionid.notnull()].visitorid.unique()\nprint(\"s\u1ed1 kh\u00e1ch h\u00e0ng th\u1ef1c hi\u1ec7n giao d\u1ecbch l\u00e0\", customer_purchased.size)\ncustomer_purchased[:5]","aff63e9c":"#Xem property l\u00e0  599528\nevents_df[events_df.visitorid == 599528].sort_values('visitorid')","21abe60e":"#customers","d278c506":"#Nh\u1eefng kh\u00e1ch h\u00e0ng th\u1ef1c hi\u1ec7n t\u00ecm ki\u1ebfm m\u00e0 ch\u01b0a th\u1ef1c hi\u1ec7n mua l\u00e0\ncustomer_browsed = []\nfor x in customers: \n    if x not in customer_purchased:\n        customer_browsed.append(x)\n","0c0acf9f":"print(\"S\u1ed1 l\u01b0\u1ee3ng kh\u00e1ch h\u00e0ng t\u00ecm ki\u1ebfm:\",len(customer_browsed))\ncustomer_browsed[:5]","5e7c3b47":"# T\u1ea1o ra list nh\u1eefng s\u1ea3n ph\u1ea9m m\u00e0 kh\u00e1ch h\u00e0ng \u0111\u00e3 \u0111\u1eb7t mua\n# T\u1eeb \u0111\u00e2y c\u00f3 th\u1ec3 d\u00f9ng h\u00e0m \u0111\u1ec3 ki\u1ec3m tra xem s\u1ea3n ph\u1ea9m n\u00e0o th\u01b0\u1eddng \u0111\u01b0\u1ee3c mua chung v\u1edbi nhau\npurchased_items = [] \nfor customer in customer_purchased:\n    purchased_items.append(list(events_df.loc[(events_df.visitorid == customer) & (events_df.transactionid.notnull())].itemid.values))","305c8b93":"print(len(purchased_items))\npurchased_items[:2]","61489d9f":"def recommender_bought_bought(item_id, purchased_items):\n    # ch\u1ecdn ra c\u00e1c s\u1ea3n ph\u1ea9m \u0111\u00e3 \u0111\u01b0\u1ee3c mua v\u1edbi s\u1ea3n ph\u1ea3m \u0111\u00e3 ch\u1ecdn t\u1ea1o th\u00e0nh list\n    recommender_list = []\n    for x in purchased_items:\n        if item_id in x:\n            recommender_list += x\n    \n    #B\u1ecf \u0111i s\u1ea3n ph\u1ea9m \u0111\u00e3 ch\u1ecdn\n    recommender_list = list(set(recommender_list) - set([item_id]))\n    \n    return recommender_list","b350e5cb":"# Ta xem th\u1eed m\u1eb7t h\u00e0ng 15335\nrecommender_bought_bought(15335, purchased_items)","8917118d":"#Xem property l\u00e0  1046\nevents_df[events_df.visitorid == 1407576].sort_values('visitorid')\n","2942192d":"#T\u00ednh \u0111\u1ed9 t\u01b0\u01a1ng quan c\u1ee7a c\u00e1c thu\u1ed9c t\u00ednh trng b\u1ea3n v\u1eeda t\u1ea1o\ncorr = data[data.columns].corr()\nsns.heatmap(corr,annot = True)","4c7e69a7":"\ndata_trans1 = events_df.groupby(['transactionid']).itemid.count().to_frame().reset_index().sort_values('itemid')\nprint(\"S\u1ed1 m\u0103t h\u00e0ng nhi\u1ec1u nh\u1ea5t \u0111\u01b0\u1ee3c mua trong 1 l\u01b0\u1ee3t giao d\u1ecbch:\",data_trans1['itemid'].max())\ndata_trans1","d53e2a8b":"data_items = items_df.groupby(['property']).itemid.count().to_frame().reset_index()\n#data_items[data_items.itemid==1]\ndata_items","89502ca3":"# Ki\u1ec3m tra xem property n\u00e0o c\u00f3 nhi\u1ec1u itemid nh\u1ea5t\ndata_items[data_items.itemid == data_items['itemid'].max()].sort_values('property')","d73a306c":"# Ki\u1ec3m tra xaem property n\u00e0o c\u00f3 \u00edt itemid nh\u1ea5t\ndata_items[data_items.itemid == data_items['itemid'].min()].sort_values('property')","e730e9d2":"#Xem property l\u00e0  1046\nitems_df[items_df.property == '1046'].sort_values('itemid')","39ffe09b":"\ndata_items1 = items_df.groupby(['itemid']).property.count().to_frame().reset_index()\ndata_items1","36259b5b":"# Ki\u1ec3m tra xaem itemid n\u00e0o n\u1eb1m trong nhi\u1ec1u property nh\u1ea5t\ndata_items1[data_items1.property == data_items1['property'].max()].sort_values('itemid')","1963414f":"# Ki\u1ec3m tra xaem itemid n\u00e0o n\u1eb1m trong \u00edt property nh\u1ea5t\ndata_items1[data_items1.property == data_items1['property'].min()].sort_values('itemid')","38f8d739":"#Xem m\u1eb7t h\u00e0ng c\u00f3 id l\u00e0  0\nitems_df[items_df.itemid == 2].sort_values('property')","679af9d8":"data_items1.info()","4602ca56":"items_df1 = items_df.drop('value', 1)\nitems_df1.columns = ['itemid', 'categoryid']\nitems_df1","7b2934ab":"#items_df2 = pd.merge(items_df1, category_tree_df, on='categoryid')","08e7e945":"category_tree1 = category_tree_df.groupby(['parentid']).categoryid.count().to_frame().reset_index()\ncategory_tree1","8a1a2a51":"# Ki\u1ec3m tra xaem parentid n\u00e0o c\u00f3 nhi\u1ec1u categoryid nh\u1ea5t\ncategory_tree1[category_tree1.categoryid == category_tree1['categoryid'].max()].sort_values('parentid')","f2de9799":"# Ki\u1ec3m tra xaem parentid n\u00e0o c\u00f3 \u00edt categoryid nh\u1ea5t\ncategory_tree1[category_tree1.categoryid == category_tree1['categoryid'].min()].sort_values('parentid')","322bdcd1":"category_tree2 = category_tree_df.groupby(['categoryid']).parentid.count().to_frame().reset_index()\ncategory_tree2","86a23ebe":"print(\"S\u1ed1 l\u01b0\u1ee3ng parentid nhi\u1ec1u nh\u1ea5t m\u00e0 iteam c\u00f3 th\u1ec3 c\u00f3:\",category_tree2['parentid'].max())\nprint(\"S\u1ed1 l\u01b0\u1ee3ng parentid \u00edt nh\u1ea5t m\u00e0 iteam c\u00f3 th\u1ec3 c\u00f3:\",category_tree2['parentid'].min())","2d201c2f":"N\u1ed1i d\u1eef li\u1ec7u b\u1eb3ng iteam, category_tree vs event t\u1eeb \u0111\u00f3 t\u00ednh ra catrgory,parenid n\u00e0o c\u00f3 l\u01b0\u1ee3t view,add tocart, transaction nhi\u1ec1u nh\u1ea5t \n","76f66fea":"S\u1ed1 kh\u00e1ch h\u00e0ng truy c\u1eadp 1 l\u1ea7n : l\u00e0 1,001,560\n\nS\u1ed1 kh\u00e1ch ch\u1ec9 xem 1 l\u1ea7n : 998,953","3ae5a34a":"# B\u1ea3ng Items","15ab0acd":"[15335,  380775,  237753,  317178,  12836,  400969,  105792,  25353,  200793,  80582,  302422]]\n\nTa th\u1ea5y c\u00e1c s\u1ea3n ph\u1ea9m \u0111\u01b0\u1ee3c mua \u0111\u1ec1u n\u1eb1m trong list s\u1ea3n ph\u1ea9m recoment","be0be97e":"# L\u00e0m th\u00eam B\u1ea3ng Event","5a808419":"# **Events Data**","1b842b1b":"V\u1edbi m\u1ed7i itemid th\u00ec c\u00f3 m\u1ed9t categoryid\n\nV\u1edbi m\u1ed7i iteam th\u00ec s\u1ebd t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c giao d\u1ecbch c\u1ee7a iteam \u0111\u00f3( transactionid)\n\n","53b0f6a3":"Bi\u1ec3u \u0111\u1ed3 th\u1ec3 hi\u1ec7n m\u1eb7t h\u00e0ng \u0111\u01b0\u1ee3c th\u00eam v\u00e0o gi\u1ecf h\u00e0ng nhi\u1ec1u nh\u1ea5t\n\n","d1edd1f8":"Ta c\u00f3 s\u1ed1 l\u01b0\u1ee3ng th\u1ef1c hi\u1ec7n h\u00e0nh \u0111\u1ed9ng transaction l\u00e0 22,457\n\nS\u1ed1 transaction th\u1ef1c t\u1ebf l\u00e0 17,673\n\nN\u00ean ta s\u1ebd bi\u1ebft r\u1eb1ng c\u00f3 nh\u1eefng kh\u00e1ch h\u00e0ng th\u1ef1c hi\u1ec7n giao d\u1ecbch nhi\u1ec1u l\u1ea7n","75c9bbdd":"View c\u00f3           2,664,312 d\u00f2ng d\u1eef li\u1ec7u\n\nAddtocart c\u00f3      69,332\n\ntransaction c\u00f3    22,457","a3b59972":"### groupby d\u1eef li\u1ec7u c\u1ee7a b\u1ea3ng items_df theo property","900e09bc":"K\u1ebft Lu\u1eadn: \n* M\u1ed7i property c\u00f3 nhi\u1ec1u itemid\n* C\u00e1c itemid c\u00f3 th\u1ec3 tr\u00f9ng nhau nh\u01b0ng kh\u00e1c property\n* propertyid c\u00f3 nhi\u1ec1u itemid nh\u1ea5t l\u00e0 888 v\u1edbi 3000398 itemid, \u00edt nh\u1ea5t l\u00e0 1 itemid\n* Itemid xu\u1ea5t hi\u1ec7n trong nhi\u1ec1u category nh\u1ea5t 158903 n\u1eb1m trong 486 categoryid, \u00edt nh\u1ea5t l\u00e0 207227 v\u00e0 243157 v\u1edbi 12 categoryid\n* Gi\u00e1 tr\u1ecb categoryid l\u00e0 m\u1ed9t gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c m\u00e0 h\u00f3a\n* Gi\u00e1 tr\u1ecb available   = 1 l\u00e0 m\u1eb7t h\u00e0ng \u0111ang c\u00f3 s\u1eb5n, = 0 c\u00f3 ngh\u0129a l\u00e0 \u0111\u00e3 h\u1ebft h\u00e0ng","a3682854":"Xem nhat ky hoat dong cua khach hang 102019\n","49430ae2":"# **Items Data** \n****","bab1e610":"Bi\u1ec3u \u0111\u1ed3 xem m\u1eb7t h\u00e0ng \u0111\u01b0\u1ee3c Mua nhi\u1ec1u nh\u1ea5t\n\n","bdd1c82f":"K\u1ebft lu\u1eadn: \n* M\u1ed7i categoryid ch\u1ec9 c\u00f3 m\u1ed9t parenid\n* M\u1ed7i parenid c\u00f3 nh\u1ec1u categoryid\n* parenid c\u00f3 nhi\u1ec1u categoryid nh\u1ea5t l\u00e0 250.0 v\u1edbi 31 \n* parenid th\u00ec c\u00f3 \u00edt nh\u1ea5t l\u00e0 1 catgoryid\n* categoryid c\u00f3 th\u1ec3 kh\u00f4ng thu\u1ed9c v\u1ec1 parenid n\u00e0o","aaf2e636":"Nh\u1eadn x\u00e9t:\n* S\u1ed1 l\u01b0\u1ee3ng kh\u00e1ch truy c\u1eadp l\u00e0 2756101 ,S\u1ed1 kh\u00e1ch truy c\u1eadp th\u1ef1c th\u1ebf: 1407580 x\u1ea5p x\u1ec9 m\u1ed9t n\u1eeda t\u1ed5ng l\u01b0\u1ee3ng truy c\u1eadp n\u00ean ta c\u00f3 th\u1ec3 \u0111o\u00e1n l\u00e0 trung b\u00ecnh c\u00f3 th\u1ec3 m\u1ed7i kh\u00e1ch th\u1ef1c hi\u1ec7n 2 h\u00e0nh \u0111\u1ed9ng\n* M\u1ed9t transaction c\u00f3 th\u1ec3 mua nhi\u1ec1u m\u1eb7t h\u00e0ng\n* vistorid v\u00e0 view c\u00f3 \u0111\u1ed9  t\u01b0\u01a1ng quan cao nh\u1ea5t\n* s\u1ed1 l\u01b0\u1ee3ng transaction th\u00ec li\u00ean quan v\u1edbi addtocart nhi\u1ec1u nh\u1ea5t","e94a2c0c":"T\u1ed5ng c\u1ed9ng c\u00f3 20275902 d\u00f2ng d\u1eef li\u1ec7u sau khi h\u1ebft h\u1ee3p hai file\n\nC\u00f3 417053 itemid\n\nC\u00f3 1104 property\n\n","42c42e8e":"## B\u1ea3ng category_tree","1f6826da":"### groupby d\u1eef li\u1ec7u c\u1ee7a b\u1ea3ng items_df theo itemid","8dc0e06d":"Bi\u1ec3u \u0111\u1ed3 th\u1ec3 hi\u1ec7n m\u1eb7t h\u00e0ng \u0111\u01b0\u1ee3c Xem nhi\u1ec1u nh\u1ea5t","e58f7aa3":"Copied data sets from the Kaggle into data frames  ","4053971e":"Visitorid : ID ri\u00eang c\u1ee7a c\u00e1c user truy c\u1eadp\n\nEvent : C\u00e1c h\u00e0nh \u0111\u1ed9ng c\u1ee7a ng\u01b0\u1eddi d\u00f9ng - view ( xem s\u1ea3n ph\u1ea9m) , add to cart(th\u00eam v\u00e0o gi\u1ecf h\u00e0ng), transaction ( th\u1ef1c hi\u1ec7n giao d\u1ecbch)\n\nItemid : ID c\u1ee7a s\u1ea3n ph\u1ea9m m\u00e0 user th\u1ef1c hi\u1ec7n h\u00e0nh \u0111\u1ed9ng\n\nTransactionid : Khi c\u1ed9t n\u00e0y kh\u00f4ng c\u00f3 d\u1eef li\u1ec7u th\u00ec l\u00e0 ngh\u0129a ng\u01b0\u1eddi d\u00f9ng ch\u1ec9 th\u1ef1c hi\u1ec7n view ho\u1eb7c add to cart\n\nTransactionid : Khi c\u1ed9t n\u00e0y c\u00f3 d\u1eef li\u1ec7u th\u00ec ngh\u0129a l\u00e0 ng\u01b0\u1eddi d\u00f9ng th\u1ef1c hi\u1ec7n giao d\u1ecbch","0fbd461d":"# **Category Tree**\n****","e1938ca3":"**T\u1ea1o B\u1ea3ng Data(date, S\u1ed1 l\u01b0\u1ee3ng view,SL add tocart, SL transaction,S\u1ed1 l\u01b0\u1ee3ng visitorid)**","58ba1c0a":"Ta c\u00f3 s\u1ed1 l\u01b0\u1ee3ng kh\u00e1ch h\u00e0ng truy c\u1eadp unique l\u00e0 1,407,580\n\nT\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng giao d\u1ecbch l\u00e0 22,457\n\nS\u1ed1 giao d\u1ecbch unique l\u00e0 17,673"}}