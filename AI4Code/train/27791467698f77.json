{"cell_type":{"793fce66":"code","5c1cde83":"code","68723058":"code","51e9c61c":"code","8f998ec0":"code","00501e0a":"code","0eb82b51":"code","c26d2bac":"code","7bcc525c":"code","4e58d0fa":"code","e2139450":"code","a5d39648":"code","0cee94d9":"code","f10604fd":"code","b66b41f3":"code","f79eaa3f":"code","ae9fb83f":"code","9f89d944":"code","347c5c20":"code","dd26996a":"code","7a1ee97a":"code","2e16a7f0":"code","a3ee6d09":"code","d8fc6623":"code","f2875e61":"code","6e649d70":"code","c71040ee":"code","c6590497":"code","45a9da53":"code","35dfd8bb":"code","ce5a2245":"code","2e3c98a0":"code","85bdbb9d":"code","01946404":"code","e11b20b7":"code","5af0d262":"code","71b18afa":"code","df8a0ef0":"code","15832260":"code","66289d13":"code","f5cd3b10":"code","114da0c1":"code","dfecc9dc":"code","f1990ed2":"code","b7a52a88":"code","87a2196d":"code","bf832a7c":"code","28ad89a7":"code","5a2fa2c0":"code","b3e5b176":"code","336bc8d0":"code","fec91b24":"code","1654709a":"code","72b8019c":"code","19397baf":"code","9e81c897":"code","32737895":"code","7de76d08":"code","4c16a3a8":"code","3f2e9d9c":"code","3777c8c5":"code","24b9bf15":"code","1201cdaf":"code","acfa9f53":"code","4747052d":"code","fcd60aea":"code","d8b8ee88":"code","6a177aa4":"code","edd3e020":"code","e757c9d9":"code","c7b91cca":"code","39583d0e":"code","280768dc":"code","b7e26f52":"code","2a4f4519":"code","d57f5f9b":"code","27785a8b":"code","f3a34471":"code","53db98de":"code","d1e1db28":"code","f82a84f3":"code","f08406a2":"code","b90ec10d":"code","efbd1cbf":"code","041cfbd0":"code","e0ba4e4c":"code","8259047f":"code","d1a32a99":"code","e95026f2":"code","b6078904":"code","3a840daf":"code","c9e49f58":"markdown","4f4de831":"markdown","7bcf589b":"markdown","6e2bb928":"markdown","837dc6b6":"markdown","7f05f150":"markdown","f18ef80a":"markdown","30a5b867":"markdown","85c65f53":"markdown","0adf1b56":"markdown","27bbaabd":"markdown","05362a8e":"markdown","14a375e5":"markdown","0cef76bf":"markdown","5f2765b7":"markdown","c011220d":"markdown","08c783e7":"markdown","3810660e":"markdown","c0bedf85":"markdown","1fadd04e":"markdown","06f31ce5":"markdown","11287a13":"markdown","60755684":"markdown","dc32fd57":"markdown","1b998d3e":"markdown","cfaffbc0":"markdown","f0905eb8":"markdown","8a668a68":"markdown","0a27791d":"markdown","38240b48":"markdown","a4bf1826":"markdown","bebd3789":"markdown","c4e44b00":"markdown","c21cb40d":"markdown","8d143810":"markdown","c140c118":"markdown","d21844f8":"markdown","36ba96e6":"markdown","14adb86b":"markdown","da4a3c58":"markdown","2f2ea579":"markdown","1d85d5ee":"markdown","75c0a842":"markdown","2019e59c":"markdown","5b72dcc5":"markdown","b836ea16":"markdown","6cd39064":"markdown","a80b34dc":"markdown","11bdc35c":"markdown","a9faa3e4":"markdown","0629ca2c":"markdown","ef68e81f":"markdown","0efc6613":"markdown","e72c384e":"markdown","10c47bc5":"markdown","a385f69e":"markdown","98d361e2":"markdown"},"source":{"793fce66":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\nimport os\n\nfrom collections import Counter","5c1cde83":"train_data='..\/input\/donors-chose\/train_data.csv'\nresources_data='..\/input\/donors-chose\/resources.csv'\nglove_vectors='..\/input\/donors-chose\/glove_vectors'","68723058":"project_data = pd.read_csv(train_data,nrows=50000)\nresource_data = pd.read_csv(resources_data)\n#project_data=project_data.sample(n=1000,random_state=0)\nproject_data['teacher_prefix']=project_data['teacher_prefix'].fillna(' ')","51e9c61c":"y_value_counts = project_data['project_is_approved'].value_counts()\nprint(\"Number of projects thar are approved for funding \", y_value_counts[1], \", (\", (y_value_counts[1]\/(y_value_counts[1]+y_value_counts[0]))*100,\"%)\")\nprint(\"Number of projects thar are not approved for funding \", y_value_counts[0], \", (\", (y_value_counts[0]\/(y_value_counts[1]+y_value_counts[0]))*100,\"%)\")","8f998ec0":"print(\"Number of data points in train data\", project_data.shape)\nprint('-'*50)\nprint(\"The attributes of data :\", project_data.columns.values)","00501e0a":"print(\"Number of data points in train data\", resource_data.shape)\nprint(resource_data.columns.values)\nresource_data.head(2)","0eb82b51":"catogories = list(project_data['project_subject_categories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-python\ncat_list = []\nfor i in catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp+=j.strip()+\" \" #\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_') # we are replacing the & value into \n    cat_list.append(temp.strip())\n    \nproject_data['clean_categories'] = cat_list\nproject_data.drop(['project_subject_categories'], axis=1, inplace=True)\n\nfrom collections import Counter\nmy_counter = Counter()\nfor word in project_data['clean_categories'].values:\n    my_counter.update(word.split())\n\ncat_dict = dict(my_counter)\nsorted_cat_dict = dict(sorted(cat_dict.items(), key=lambda kv: kv[1]))\n","c26d2bac":"sub_catogories = list(project_data['project_subject_subcategories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-python\n\nsub_cat_list = []\nfor i in sub_catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp +=j.strip()+\" \"#\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_')\n    sub_cat_list.append(temp.strip())\n\nproject_data['clean_subcategories'] = sub_cat_list\nproject_data.drop(['project_subject_subcategories'], axis=1, inplace=True)\n\n# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\nmy_counter = Counter()\nfor word in project_data['clean_subcategories'].values:\n    my_counter.update(word.split())\n    \nsub_cat_dict = dict(my_counter)\nsorted_sub_cat_dict = dict(sorted(sub_cat_dict.items(), key=lambda kv: kv[1]))","7bcc525c":"# merge two column text dataframe: \nproject_data[\"essay\"] = project_data[\"project_essay_1\"].map(str) +\\\n                        project_data[\"project_essay_2\"].map(str) + \\\n                        project_data[\"project_essay_3\"].map(str) + \\\n                        project_data[\"project_essay_4\"].map(str)","4e58d0fa":"project_data.head(2)","e2139450":"# printing some random reviews\nprint(project_data['essay'].values[0])\n","a5d39648":"# https:\/\/stackoverflow.com\/a\/47091490\/4084039\nimport re\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","0cee94d9":"sent = decontracted(project_data['essay'].values[1])\nprint(sent)\nprint(\"=\"*50)","f10604fd":"# \\r \\n \\t remove from string python: http:\/\/texthandler.com\/info\/remove-line-breaks-python\/\nsent = sent.replace('\\\\r', ' ')\nsent = sent.replace('\\\\\"', ' ')\nsent = sent.replace('\\\\n', ' ')\nprint(sent)","b66b41f3":"#remove spacial character: https:\/\/stackoverflow.com\/a\/5843547\/4084039\nsent = re.sub('[^A-Za-z0-9]+', ' ', sent)\nprint(sent)","f79eaa3f":"# https:\/\/gist.github.com\/sebleier\/554280\n# we are removing the words from the stop words list: 'no', 'nor', 'not'\nstopwords= ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"]","ae9fb83f":"# Combining all the above stundents \ndef Text_cleaner(data):\n    from tqdm import tqdm\n    preprocessed_essays = []\n    # tqdm is for printing the status bar\n    for sentance in tqdm(data.values):\n        sent = decontracted(sentance)\n        sent = sent.replace('\\\\r', ' ')\n        sent = sent.replace('\\\\\"', ' ')\n        sent = sent.replace('\\\\n', ' ')\n        sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n        # https:\/\/gist.github.com\/sebleier\/554280\n        sent = ' '.join(e for e in sent.split() if e.lower() not in stopwords)\n        preprocessed_essays.append(sent.lower().strip())\n    return preprocessed_essays","9f89d944":"# after preprocesing\npreprocessed_essays=Text_cleaner(project_data['essay'])","347c5c20":"preprocessed_essays[1]","dd26996a":"project_data['essay'] = preprocessed_essays\nproject_data.drop(['project_essay_1'], axis=1, inplace=True)\nproject_data.drop(['project_essay_2'], axis=1, inplace=True)\nproject_data.drop(['project_essay_3'], axis=1, inplace=True)\nproject_data.drop(['project_essay_4'], axis=1, inplace=True)\nproject_data.head(5)","7a1ee97a":"# similarly you can preprocess the titles also\npreprocessed_project_title=Text_cleaner(project_data['project_title'])","2e16a7f0":"preprocessed_project_title[1]","a3ee6d09":"project_data['Cleaned_title']=preprocessed_project_title\nproject_data.drop(['project_title'], axis=1, inplace=True)","d8fc6623":"price_data = resource_data.groupby('id').agg({'price':'sum', 'quantity':'sum'}).reset_index()\nproject_data = pd.merge(project_data, price_data, on='id', how='left')","f2875e61":"project_data.columns","6e649d70":"project_data.drop(['project_resource_summary'], axis=1, inplace=True)\nproject_data.drop(['Unnamed: 0'], axis=1, inplace=True)\nproject_data.drop(['id'], axis=1, inplace=True)\nproject_data.drop(['teacher_id'], axis=1, inplace=True)\n\n","c71040ee":"project_data['essay_count']=project_data['essay'].str.len()\nproject_data['title_count']=project_data['Cleaned_title'].str.len()","c6590497":"!pip install vaderSentiment","45a9da53":"#https:\/\/medium.com\/analytics-vidhya\/simplifying-social-media-sentiment-analysis-using-vader-in-python-f9e6ec6fc52f\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\nanalyser = SentimentIntensityAnalyzer()\nsentiment_score=[]\nfor essay in tqdm(project_data['essay']):\n        score = analyser.polarity_scores(essay)['pos']\n        sentiment_score.append(score)\n","35dfd8bb":"project_data['essay_sentiment_score']=sentiment_score","ce5a2245":"#https:\/\/stackoverflow.com\/questions\/29763620\/how-to-select-all-columns-except-one-column-in-pandas\nX=project_data.loc[:, project_data.columns != 'project_is_approved']\ny=project_data['project_is_approved']\nX.shape","2e3c98a0":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.train_test_split.html\n\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train, y_test=train_test_split(X, y, test_size=0.3, random_state=0,stratify=y)\nX_train,X_cv,y_train,y_cv=train_test_split(X_train, y_train, test_size=0.3, random_state=0,stratify=y_train)\n\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(X_cv.shape)\nprint(y_train.shape)\nprint(y_test.shape)\nprint(y_cv.shape)\n\n\n\n","85bdbb9d":"X.head(2)","01946404":"# we use count vectorizer to convert the values into one \nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(lowercase=False, binary=True)\nvectorizer.fit(X_train['clean_categories'].values)\n\n# we use the fitted CountVectorizer to convert the text to vector\nX_train_clean_categories=vectorizer.transform(X_train['clean_categories'].values)\nX_test_clean_categories=vectorizer.transform(X_test['clean_categories'].values)\nX_cv_clean_categories=vectorizer.transform(X_cv['clean_categories'].values)\n\n\nprint(vectorizer.get_feature_names())\nprint(\"Shape of matrix after one hot encodig \",X_train_clean_categories.shape)","e11b20b7":"vectorizer = CountVectorizer(lowercase=False, binary=True)\nvectorizer.fit(X_train['clean_subcategories'].values)\n\n# we use the fitted CountVectorizer to convert the text to vector\nX_train_clean_sub_categories=vectorizer.transform(X_train['clean_subcategories'].values)\nX_test_clean_sub_categories=vectorizer.transform(X_test['clean_subcategories'].values)\nX_cv_clean_sub_categories=vectorizer.transform(X_cv['clean_subcategories'].values)\n\n\nprint(vectorizer.get_feature_names())\nprint(\"Shape of matrix after one hot encodig \",X_train_clean_sub_categories.shape)","5af0d262":"vectorizer = CountVectorizer(lowercase=False, binary=True)\nvectorizer.fit(X_train['school_state'].values)\n\n# we use the fitted CountVectorizer to convert the text to vector\nX_train_skl_state=vectorizer.transform(X_train['school_state'].values)\nX_test_skl_state=vectorizer.transform(X_test['school_state'].values)\nX_cv_skl_state=vectorizer.transform(X_cv['school_state'].values)\n\n\nprint(vectorizer.get_feature_names())\nprint(\"Shape of matrix after one hot encodig \",X_train_skl_state.shape)","71b18afa":"vectorizer = CountVectorizer(lowercase=False, binary=True)\nvectorizer.fit(X_train['teacher_prefix'].values)\n\n# we use the fitted CountVectorizer to convert the text to vector\nX_train_teacher_prefix=vectorizer.transform(X_train['teacher_prefix'].values)\nX_test_teacher_prefix=vectorizer.transform(X_test['teacher_prefix'].values)\nX_cv_teacher_prefix=vectorizer.transform(X_cv['teacher_prefix'].values)\n\n\nprint(vectorizer.get_feature_names())\nprint(\"Shape of matrix after one hot encodig \",X_train_teacher_prefix.shape)\n","df8a0ef0":"vectorizer = CountVectorizer(lowercase=False, binary=True)\nvectorizer.fit(X_train['project_grade_category'].values)\n\n# we use the fitted CountVectorizer to convert the text to vector\nX_train_project_grade_category=vectorizer.transform(X_train['project_grade_category'].values)\nX_test_project_grade_category=vectorizer.transform(X_test['project_grade_category'].values)\nX_cv_project_grade_category=vectorizer.transform(X_cv['project_grade_category'].values)\n\n\nprint(vectorizer.get_feature_names())\nprint(\"Shape of matrix after one hot encodig \",X_train_project_grade_category.shape)\n","15832260":"# check this one: https:\/\/www.youtube.com\/watch?v=0HOqOcln3Z4&t=530s\n# standardization sklearn: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.StandardScaler.html\nfrom sklearn.preprocessing import StandardScaler\n\n# price_standardized = standardScalar.fit(project_data['price'].values)\n# this will rise the error\n# ValueError: Expected 2D array, got 1D array instead: array=[725.05 213.03 329.   ... 399.   287.73   5.5 ].\n# Reshape your data either using array.reshape(-1, 1)\n\nprice_scalar = StandardScaler()\nprice_scalar.fit(X_train['price'].values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {price_scalar.mean_[0]}, Standard deviation : {np.sqrt(price_scalar.var_[0])}\")\n\n# Now standardize the data with above maen and variance.\nX_train_price_standardized = price_scalar.transform(X_train['price'].values.reshape(-1, 1))\nX_test_price_standardized = price_scalar.transform(X_test['price'].values.reshape(-1, 1))\nX_cv_price_standardized = price_scalar.transform(X_cv['price'].values.reshape(-1, 1))","66289d13":"quantity_scalar = StandardScaler()\nquantity_scalar.fit(X_train['quantity'].values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {quantity_scalar.mean_[0]}, Standard deviation : {np.sqrt(quantity_scalar.var_[0])}\")\n\n# Now standardize the data with above maen and variance.\nX_train_quantity_standardized = quantity_scalar.transform(X_train['quantity'].values.reshape(-1, 1))\nX_test_quantity_standardized = quantity_scalar.transform(X_test['quantity'].values.reshape(-1, 1))\nX_cv_quantity_standardized = quantity_scalar.transform(X_cv['quantity'].values.reshape(-1, 1))\n","f5cd3b10":"count_scalar = StandardScaler()\ncount_scalar.fit(X_train['essay_count'].values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {count_scalar.mean_[0]}, Standard deviation : {np.sqrt(count_scalar.var_[0])}\")\n\n# Now standardize the data with above maen and variance.\nX_train_essay_count_standardized = count_scalar.transform(X_train['essay_count'].values.reshape(-1, 1))\nX_test_essay_count_standardized = count_scalar.transform(X_test['essay_count'].values.reshape(-1, 1))\nX_cv_essay_count_standardized = count_scalar.transform(X_cv['essay_count'].values.reshape(-1, 1))","114da0c1":"count_scalar = StandardScaler()\ncount_scalar.fit(X_train['title_count'].values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {count_scalar.mean_[0]}, Standard deviation : {np.sqrt(count_scalar.var_[0])}\")\n\n# Now standardize the data with above maen and variance.\nX_train_title_count_standardized = count_scalar.transform(X_train['title_count'].values.reshape(-1, 1))\nX_test_title_count_standardized = count_scalar.transform(X_test['title_count'].values.reshape(-1, 1))\nX_cv_title_count_standardized = count_scalar.transform(X_cv['title_count'].values.reshape(-1, 1))","dfecc9dc":"# We are considering only the words which appeared in at least 10 documents(rows or projects).\nvectorizer = CountVectorizer(min_df=10,ngram_range=(1,4), max_features=5000)\nvectorizer.fit(X_train['essay'])\n\n# we use the fitted CountVectorizer to convert the text to vector\nX_train_essay_bow=vectorizer.transform(X_train['essay'].values)\nX_test_essay_bow=vectorizer.transform(X_test['essay'].values)\nX_cv_essay_bow=vectorizer.transform(X_cv['essay'].values)\n\n\nprint(\"Shape of matrix after one hot encodig \",X_train_essay_bow.shape)","f1990ed2":"# you can vectorize the title also \n# before you vectorize the title make sure you preprocess it\nvectorizer = CountVectorizer(min_df=5)\nvectorizer.fit(X_train['Cleaned_title'])\n\n# we use the fitted CountVectorizer to convert the text to vector\nX_train_cleaned_title_bow=vectorizer.transform(X_train['Cleaned_title'].values)\nX_test_cleaned_title_bow=vectorizer.transform(X_test['Cleaned_title'].values)\nX_cv_cleaned_title_bow=vectorizer.transform(X_cv['Cleaned_title'].values)\n\n\nprint(\"Shape of matrix after one hot encodig \",X_train_cleaned_title_bow.shape)\n\n","b7a52a88":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer(min_df=10,ngram_range=(1,4), max_features=5000)\nvectorizer.fit(X_train['essay'])\n\n# we use the fitted CountVectorizer to convert the text to vector\nX_train_essay_tfidf=vectorizer.transform(X_train['essay'].values)\nX_test_essay_tfidf=vectorizer.transform(X_test['essay'].values)\nX_cv_essay_tfidf=vectorizer.transform(X_cv['essay'].values)\n\n\nprint(\"Shape of matrix after one hot encodig \",X_train_essay_tfidf.shape)\n","87a2196d":"# Similarly you can vectorize for title alsovectorizer = TfidfVectorizer(min_df=10)\nvectorizer = TfidfVectorizer(min_df=5)\n\n# you can vectorize the title also \n# before you vectorize the title make sure you preprocess it\nvectorizer.fit(X_train['Cleaned_title'])\n\n# we use the fitted CountVectorizer to convert the text to vector\nX_train_cleaned_title_tfidf=vectorizer.transform(X_train['Cleaned_title'].values)\nX_test_cleaned_title_tfidf=vectorizer.transform(X_test['Cleaned_title'].values)\nX_cv_cleaned_title_tfidf=vectorizer.transform(X_cv['Cleaned_title'].values)\n\n\nprint(\"Shape of matrix after one hot encodig \",X_train_cleaned_title_tfidf.shape)\n\n","bf832a7c":"# stronging variables into pickle files python: http:\/\/www.jessicayung.com\/how-to-use-pickle-to-save-and-load-variables-in-python\/\n# make sure you have the glove_vectors file\nwith open(glove_vectors, 'rb') as f:\n    model = pickle.load(f)\n    glove_words =  set(model.keys())","28ad89a7":"# average Word2Vec\n# compute average word2vec for each review.\ndef avg_w2v_vectors(preprocessed_essays):\n    avg_w2v_vectors_text = []; # the avg-w2v for each sentence\/review is stored in this list\n    for sentence in tqdm(preprocessed_essays): # for each review\/sentence\n        vector = np.zeros(300) # as word vectors are of zero length\n        cnt_words =0; # num of words with a valid vector in the sentence\/review\n        for word in sentence.split(): # for each word in a review\/sentence\n            if word in glove_words:\n                vector += model[word]\n                cnt_words += 1\n        if cnt_words != 0:\n            vector \/= cnt_words\n        avg_w2v_vectors_text.append(vector)\n    return avg_w2v_vectors_text\n\nX_train_essay_w2v=avg_w2v_vectors(X_train['essay'])\nX_test_essay_w2v=avg_w2v_vectors(X_test['essay'])\nX_cv_essay_w2v=avg_w2v_vectors(X_cv['essay'])\n\nX_train_cleaned_title_w2v=avg_w2v_vectors(X_train['Cleaned_title'])\nX_test_cleaned_title_w2v=avg_w2v_vectors(X_test['Cleaned_title'])\nX_cv_cleaned_title_w2v=avg_w2v_vectors(X_cv['Cleaned_title'])\n\n","5a2fa2c0":"# S = [\"abc def pqr\", \"def def def abc\", \"pqr pqr def\"]\ntfidf_model = TfidfVectorizer()\ntfidf_model.fit(X_train['essay'])\n# we are converting a dictionary with word as a key, and the idf as a value\ndictionary = dict(zip(tfidf_model.get_feature_names(), list(tfidf_model.idf_)))\ntfidf_words_essay = set(tfidf_model.get_feature_names())\nprint(len(tfidf_words_essay))\n\n","b3e5b176":"# average Word2Vec\n# compute average word2vec for each review.\ndef tfidf_w2v_vectors(tfidf_words,preprocessed_essays):\n    tfidf_w2v_vectors_text = []; # the avg-w2v for each sentence\/review is stored in this list\n    for sentence in tqdm(preprocessed_essays): # for each review\/sentence\n        vector = np.zeros(300) # as word vectors are of zero length\n        tf_idf_weight =0; # num of words with a valid vector in the sentence\/review\n        for word in sentence.split(): # for each word in a review\/sentence\n            if (word in glove_words) and (word in tfidf_words):\n                vec = model[word] # getting the vector for each word\n                # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)\/len(sentence.split())))\n                tf_idf = dictionary[word]*(sentence.count(word)\/len(sentence.split())) # getting the tfidf value for each word\n                vector += (vec * tf_idf) # calculating tfidf weighted w2v\n                tf_idf_weight += tf_idf\n        if tf_idf_weight != 0:\n            vector \/= tf_idf_weight\n        tfidf_w2v_vectors_text.append(vector)\n    return tfidf_w2v_vectors_text\n\nX_train_essay_tfidf_w2v=tfidf_w2v_vectors(tfidf_words_essay,X_train['essay'])\nX_test_essay_tfidf_w2v=tfidf_w2v_vectors(tfidf_words_essay,X_test['essay'])\nX_cv_essay_tfidf_w2v=tfidf_w2v_vectors(tfidf_words_essay,X_cv['essay'])\n\n","336bc8d0":"# S = [\"abc def pqr\", \"def def def abc\", \"pqr pqr def\"]\ntfidf_model = TfidfVectorizer()\ntfidf_model.fit(X_train['Cleaned_title'])\n# we are converting a dictionary with word as a key, and the idf as a value\ndictionary = dict(zip(tfidf_model.get_feature_names(), list(tfidf_model.idf_)))\ntfidf_words_Cleaned_title = set(tfidf_model.get_feature_names())\nprint(len(tfidf_words_Cleaned_title))\n","fec91b24":"X_train_cleaned_title_tfidf_w2v=tfidf_w2v_vectors(tfidf_words_Cleaned_title,X_train['Cleaned_title'])\nX_test_cleaned_title_tfidf_w2v=tfidf_w2v_vectors(tfidf_words_Cleaned_title,X_test['Cleaned_title'])\nX_cv_cleaned_title_tfidf_w2v=tfidf_w2v_vectors(tfidf_words_Cleaned_title,X_cv['Cleaned_title'])\n","1654709a":"\nX_train_prev_proj=X_train['teacher_number_of_previously_posted_projects'][:,np.newaxis]\n\nX_test_prev_proj=X_test['teacher_number_of_previously_posted_projects'][:,np.newaxis]\nX_cv_prev_proj=X_cv['teacher_number_of_previously_posted_projects'][:,np.newaxis]\n\n","72b8019c":"# merge two sparse matrices: https:\/\/stackoverflow.com\/a\/19710648\/4084039\nfrom scipy.sparse import hstack\n\n\n# with the same hstack function we are concatinating a sparse matrix and a dense matirx :)\nX_train_bow = hstack((X_train_clean_categories, X_train_clean_sub_categories,X_train_skl_state,X_train_teacher_prefix,\n            X_train_project_grade_category,X_train_price_standardized,X_train_quantity_standardized,X_train_prev_proj,\n            X_train_essay_bow,X_train_cleaned_title_bow,X_train_essay_count_standardized,X_train_title_count_standardized\n            )).toarray()\n\n\nX_test_bow = hstack((X_test_clean_categories, X_test_clean_sub_categories,X_test_skl_state,X_test_teacher_prefix,\n            X_test_project_grade_category,X_test_price_standardized,X_test_quantity_standardized,X_test_prev_proj,\n            X_test_essay_bow,X_test_cleaned_title_bow,X_test_essay_count_standardized,X_test_title_count_standardized\n            )).toarray()\n\n\nX_cv_bow = hstack((X_cv_clean_categories, X_cv_clean_sub_categories,X_cv_skl_state,X_cv_teacher_prefix,\n            X_cv_project_grade_category,X_cv_price_standardized,X_cv_quantity_standardized,X_cv_prev_proj,\n            X_cv_essay_bow,X_cv_cleaned_title_bow,X_cv_essay_count_standardized,X_cv_title_count_standardized\n            )).toarray()\n\n\nprint(X_train_bow.shape)\nprint(X_test_bow.shape)\nprint(X_cv_bow.shape)\n","19397baf":"\n# with the same hstack function we are concatinating a sparse matrix and a dense matirx :)\nX_train_tfidf = hstack((X_train_clean_categories, X_train_clean_sub_categories,X_train_skl_state,X_train_teacher_prefix,\n            X_train_project_grade_category,X_train_price_standardized,X_train_quantity_standardized,X_train_prev_proj,\n            X_train_essay_tfidf,X_train_cleaned_title_tfidf,X_train_essay_count_standardized,X_train_title_count_standardized\n            )).toarray()\n\n\nX_test_tfidf = hstack((X_test_clean_categories, X_test_clean_sub_categories,X_test_skl_state,X_test_teacher_prefix,\n            X_test_project_grade_category,X_test_price_standardized,X_test_quantity_standardized,X_test_prev_proj,\n            X_test_essay_tfidf,X_test_cleaned_title_tfidf,X_test_essay_count_standardized,X_test_title_count_standardized\n            )).toarray()\n\n\nX_cv_tfidf = hstack((X_cv_clean_categories, X_cv_clean_sub_categories,X_cv_skl_state,X_cv_teacher_prefix,\n            X_cv_project_grade_category,X_cv_price_standardized,X_cv_quantity_standardized,X_cv_prev_proj,\n            X_cv_essay_tfidf,X_cv_cleaned_title_tfidf,X_cv_essay_count_standardized,X_cv_title_count_standardized\n            )).toarray()\n\n\nprint(X_train_tfidf.shape)\nprint(X_test_tfidf.shape)\nprint(X_cv_tfidf.shape)\n","9e81c897":"# with the same hstack function we are concatinating a sparse matrix and a dense matirx :)\nX_train_w2v = hstack((X_train_clean_categories, X_train_clean_sub_categories,X_train_skl_state,X_train_teacher_prefix,\n            X_train_project_grade_category,X_train_price_standardized,X_train_quantity_standardized,X_train_prev_proj,\n            X_train_essay_w2v,X_train_cleaned_title_w2v,X_train_essay_count_standardized,X_train_title_count_standardized\n            )).toarray()\n\n\nX_test_w2v = hstack((X_test_clean_categories, X_test_clean_sub_categories,X_test_skl_state,X_test_teacher_prefix,\n            X_test_project_grade_category,X_test_price_standardized,X_test_quantity_standardized,X_test_prev_proj,\n            X_test_essay_w2v,X_test_cleaned_title_w2v,X_test_essay_count_standardized,X_test_title_count_standardized\n            )).toarray()\n\n\nX_cv_w2v = hstack((X_cv_clean_categories, X_cv_clean_sub_categories,X_cv_skl_state,X_cv_teacher_prefix,\n            X_cv_project_grade_category,X_cv_price_standardized,X_cv_quantity_standardized,X_cv_prev_proj,\n            X_cv_essay_w2v,X_cv_cleaned_title_w2v,X_cv_essay_count_standardized,X_cv_title_count_standardized\n            )).toarray()\n\n\nprint(X_train_w2v.shape)\nprint(X_test_w2v.shape)\nprint(X_cv_w2v.shape)\n","32737895":"# with the same hstack function we are concatinating a sparse matrix and a dense matirx :)\nX_train_tfidf_w2v = hstack((X_train_clean_categories, X_train_clean_sub_categories,X_train_skl_state,X_train_teacher_prefix,\n            X_train_project_grade_category,X_train_price_standardized,X_train_quantity_standardized,X_train_prev_proj,\n            X_train_essay_tfidf_w2v,X_train_cleaned_title_tfidf_w2v,X_train_essay_count_standardized,X_train_title_count_standardized\n            )).toarray()\n\n\nX_test_tfidf_w2v = hstack((X_test_clean_categories, X_test_clean_sub_categories,X_test_skl_state,X_test_teacher_prefix,\n            X_test_project_grade_category,X_test_price_standardized,X_test_quantity_standardized,X_test_prev_proj,\n            X_test_essay_tfidf_w2v,X_test_cleaned_title_tfidf_w2v,X_test_essay_count_standardized,X_test_title_count_standardized\n            )).toarray()\n\n\nX_cv_tfidf_w2v = hstack((X_cv_clean_categories, X_cv_clean_sub_categories,X_cv_skl_state,X_cv_teacher_prefix,\n            X_cv_project_grade_category,X_cv_price_standardized,X_cv_quantity_standardized,X_cv_prev_proj,\n            X_cv_essay_tfidf_w2v,X_cv_cleaned_title_tfidf_w2v,X_cv_essay_count_standardized,X_cv_title_count_standardized\n            )).toarray()\n\n\nprint(X_train_tfidf_w2v.shape)\nprint(X_test_tfidf_w2v.shape)\nprint(X_cv_tfidf_w2v.shape)\n","7de76d08":"print(X_train_bow.shape)\nprint(X_cv_bow.shape)\nprint(X_test_bow.shape)\n\nprint('='*50)\nprint(X_train_tfidf.shape)\nprint(X_cv_tfidf.shape)\nprint(X_test_tfidf.shape)\n\nprint('='*50)\nprint(X_train_w2v.shape)\nprint(X_cv_w2v.shape)\nprint(X_test_w2v.shape)\n\nprint('='*50)\nprint(X_train_tfidf_w2v.shape)\nprint(X_cv_tfidf_w2v.shape)\nprint(X_test_tfidf_w2v.shape)\n\n\nprint('='*50)\nprint(y_train.shape)\nprint(y_test.shape)\nprint(y_cv.shape)\n","4c16a3a8":"#https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.SGDClassifier.html\nfrom sklearn.metrics import accuracy_score,roc_auc_score\nfrom sklearn.linear_model import SGDClassifier\n\nfrom sklearn.calibration import CalibratedClassifierCV\n\n#store the results \nsummary=[]\nroc_auc_score_cv_bow_dict_l1={}\nroc_auc_score_train_bow_dict_l1={}\n\nalpha=[0.00001,0.0001,0.001,0.01,0.1,1,10,100,1000,10000]\nfor i in tqdm(alpha):\n    # create instance of model\n    sgd=SGDClassifier(loss='hinge',penalty='l1', alpha=i,random_state=3,class_weight=\"balanced\")\n    \n    # fitting the model on crossvalidation train\n    sgd.fit(X_train_bow, y_train)\n\n    # fit the model to the calibrator\n    calibrated = CalibratedClassifierCV(base_estimator=sgd,method='sigmoid',cv='prefit')\n\n    calibrated.fit(X_train_bow,y_train)\n\n    # predict the response on the crossvalidation train\n    pred_bow_cv = calibrated.predict_proba(X_cv_bow)\n    \n    \n    #evaluate CV roc_auc\n    roc_auc_cv =roc_auc_score(y_cv,pred_bow_cv[:,1])\n    \n    #insert into dict\n    roc_auc_score_cv_bow_dict_l1[i]=roc_auc_cv\n    \n    \n    # predict the response on the train\n    pred_bow_train = calibrated.predict_proba(X_train_bow)\n    \n    #evaluate train roc_auc\n    roc_auc_train =roc_auc_score(y_train,pred_bow_train[:,1])\n    \n    #insert into dict\n    roc_auc_score_train_bow_dict_l1[i]=roc_auc_train\n    \n    \n    \nprint(roc_auc_score_cv_bow_dict_l1)\nprint(roc_auc_score_train_bow_dict_l1)\n\n\n","3f2e9d9c":"#https:\/\/stackoverflow.com\/questions\/37266341\/plotting-a-python-dict-in-order-of-key-values\/37266356\nimport math\n\nlists1 = sorted(roc_auc_score_cv_bow_dict_l1.items())\nx1, y1 = zip(*lists1) # unpack a list of pairs into two tuples\nlists2 = sorted(roc_auc_score_train_bow_dict_l1.items())\nx2, y2 = zip(*lists2) # unpack a list of pairs into two tuples\nplt.xlabel('alpha')\nplt.ylabel('auc_score')\nplt.title('Hyper parameter tuning')\nplt.plot(x1, y1,label=\"CV\")\nplt.plot(x2, y2,label='Train')\nplt.legend()\nplt.show()\n\nx1=[math.log(i) for i in list(x1)]\nx2=[math.log(i) for i in list(x2)]\nplt.xlabel('log(alpha)')\nplt.ylabel('auc_score')\nplt.title('Hyper parameter tuning')\nplt.plot(x1, y1,label=\"CV\")\nplt.plot(x2, y2,label='Train')\nplt.legend()\nplt.show()","3777c8c5":"#https:\/\/stackoverflow.com\/questions\/268272\/getting-key-with-maximum-value-in-dictionary\ndef find_highest_alpha(k_dict):\n    k=max(k_dict, key=k_dict.get)\n    return k \n","24b9bf15":"print(find_highest_alpha(roc_auc_score_cv_bow_dict_l1))","1201cdaf":"\n# train model on the best alpha\nsgd = SGDClassifier(loss='hinge',penalty='l1',alpha=find_highest_alpha(roc_auc_score_cv_bow_dict_l1),random_state=3,class_weight=\"balanced\")\n\n# fitting the model on crossvalidation train\nsgd.fit(X_train_bow, y_train)\n\n# fit the model to the calibrator\ncalibrated = CalibratedClassifierCV(base_estimator=sgd,method='sigmoid',cv='prefit')\n\ncalibrated.fit(X_train_bow,y_train)\n\n# predict the response on the crossvalidation train\npred_bow_test = calibrated.predict(X_test_bow)\npred_bow_train = calibrated.predict(X_train_bow)\n\n#https:\/\/stackoverflow.com\/questions\/52910061\/implementing-roc-curves-for-k-nn-machine-learning-algorithm-using-python-and-scip_scores = knn.predict_proba(X_test)\npred_bow_test_scores=calibrated.predict_proba(X_test_bow)\npred_bow_train_scores=calibrated.predict_proba(X_train_bow)\n\nfpr_test, tpr_test, threshold_test = roc_curve(y_test, pred_bow_test_scores[:, 1])\nfpr_train, tpr_train, threshold_train = roc_curve(y_train, pred_bow_train_scores[:, 1])\nroc_auc_test = auc(fpr_test, tpr_test)\nroc_auc_train = auc(fpr_train, tpr_train)\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr_test, tpr_test, 'r', label = 'AUC_test = %0.2f' % roc_auc_test)\nplt.plot(fpr_train, tpr_train, 'b', label = 'AUC_train = %0.2f' % roc_auc_train)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'g--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.title('ROC Curve of BOW-LR')\nplt.show()","acfa9f53":"#https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.confusion_matrix.html\nfrom sklearn.metrics import confusion_matrix\nprint(\"Training CM for BOW\")\ncm =confusion_matrix(y_train, pred_bow_train, labels=None, sample_weight=None)\nsns.heatmap(cm, annot=True,fmt=\"d\")\nplt.title('SVM Linear Kernel \\nAccuracy:{0:.3f}'.format(accuracy_score(y_train, pred_bow_train)))\nplt.show()\nprint(\"=\"*50)\nprint(\"Testing CM for BOW\")\ncm =confusion_matrix(y_test, pred_bow_test, labels=None, sample_weight=None)\nsummary.append(['BoW_l1',find_highest_alpha(roc_auc_score_cv_bow_dict_l1),roc_auc_test])\nsns.heatmap(cm, annot=True,fmt=\"d\")\nplt.title('SVM Linear Kernel \\nAccuracy:{0:.3f}'.format(accuracy_score(y_test, pred_bow_test)))\nplt.show()\n\n","4747052d":"roc_auc_score_cv_tfidf_dict_l1={}\nroc_auc_score_train_tfidf_dict_l1={}\n\nalpha=[0.00001,0.0001,0.001,0.01,0.1,1,10,100,1000,10000]\nfor i in tqdm(alpha):\n    # create instance of model\n    sgd=SGDClassifier(loss='hinge',penalty='l1', alpha=i,random_state=3,class_weight=\"balanced\")\n    \n    # fitting the model on crossvalidation train\n    sgd.fit(X_train_tfidf, y_train)\n\n    # fit the model to the calibrator\n    calibrated = CalibratedClassifierCV(base_estimator=sgd,method='sigmoid',cv='prefit')\n\n    calibrated.fit(X_train_tfidf,y_train)\n\n    # predict the response on the crossvalidation train\n    pred_tfidf_cv = calibrated.predict_proba(X_cv_tfidf)\n    \n    \n    #evaluate CV roc_auc\n    roc_auc_cv =roc_auc_score(y_cv,pred_tfidf_cv[:,1])\n    \n    #insert into dict\n    roc_auc_score_cv_tfidf_dict_l1[i]=roc_auc_cv\n    \n    \n    # predict the response on the train\n    pred_tfidf_train = calibrated.predict_proba(X_train_tfidf)\n    \n    #evaluate train roc_auc\n    roc_auc_train =roc_auc_score(y_train,pred_tfidf_train[:,1])\n    \n    #insert into dict\n    roc_auc_score_train_tfidf_dict_l1[i]=roc_auc_train\n    \n    \n    \nprint(roc_auc_score_cv_tfidf_dict_l1)\nprint(roc_auc_score_train_tfidf_dict_l1)\n\n","fcd60aea":"#https:\/\/stackoverflow.com\/questions\/37266341\/plotting-a-python-dict-in-order-of-key-values\/37266356\nimport math\n\nlists1 = sorted(roc_auc_score_cv_tfidf_dict_l1.items())\nx1, y1 = zip(*lists1) # unpack a list of pairs into two tuples\nlists2 = sorted(roc_auc_score_train_tfidf_dict_l1.items())\nx2, y2 = zip(*lists2) # unpack a list of pairs into two tuples\nplt.xlabel('alpha')\nplt.ylabel('auc_score')\nplt.title('Hyper parameter tuning')\nplt.plot(x1, y1,label=\"CV\")\nplt.plot(x2, y2,label='Train')\nplt.legend()\nplt.show()\n\nx1=[math.log(i) for i in list(x1)]\nx2=[math.log(i) for i in list(x2)]\nplt.xlabel('log(alpha)')\nplt.ylabel('auc_score')\nplt.title('Hyper parameter tuning')\nplt.plot(x1, y1,label=\"CV\")\nplt.plot(x2, y2,label='Train')\nplt.legend()\nplt.show()\n","d8b8ee88":"print(find_highest_alpha(roc_auc_score_cv_tfidf_dict_l1))","6a177aa4":"# train model on the best alpha\nsgd = SGDClassifier(loss='hinge',penalty='l1',alpha=find_highest_alpha(roc_auc_score_cv_tfidf_dict_l1),random_state=3,class_weight=\"balanced\")\n\n# fitting the model on crossvalidation train\nsgd.fit(X_train_tfidf, y_train)\n\n# fit the model to the calibrator\ncalibrated = CalibratedClassifierCV(base_estimator=sgd,method='sigmoid',cv='prefit')\n\ncalibrated.fit(X_train_tfidf,y_train)\n\n# predict the response on the crossvalidation train\npred_tfidf_test = calibrated.predict(X_test_tfidf)\npred_tfidf_train = calibrated.predict(X_train_tfidf)\n\n#https:\/\/stackoverflow.com\/questions\/52910061\/implementing-roc-curves-for-k-nn-machine-learning-algorithm-using-python-and-scip_scores = knn.predict_proba(X_test)\npred_tfidf_test_scores=calibrated.predict_proba(X_test_tfidf)\npred_tfidf_train_scores=calibrated.predict_proba(X_train_tfidf)\n\nfpr_test, tpr_test, threshold_test = roc_curve(y_test, pred_tfidf_test_scores[:, 1])\nfpr_train, tpr_train, threshold_train = roc_curve(y_train, pred_tfidf_train_scores[:, 1])\nroc_auc_test = auc(fpr_test, tpr_test)\nroc_auc_train = auc(fpr_train, tpr_train)\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr_test, tpr_test, 'r', label = 'AUC_test = %0.2f' % roc_auc_test)\nplt.plot(fpr_train, tpr_train, 'b', label = 'AUC_train = %0.2f' % roc_auc_train)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'g--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.title('ROC Curve of TFIDF-LR')\nplt.show()\n","edd3e020":"#https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.confusion_matrix.html\nfrom sklearn.metrics import confusion_matrix\nprint(\"Training CM for TFIDF\")\ncm =confusion_matrix(y_train, pred_tfidf_train, labels=None, sample_weight=None)\nsns.heatmap(cm, annot=True,fmt=\"d\")\nplt.title('SVM Linear Kernel \\nAccuracy:{0:.3f}'.format(accuracy_score(y_train, pred_tfidf_train)))\nplt.show()\nprint(\"=\"*50)\nprint(\"Testing CM for TFIDF\")\ncm =confusion_matrix(y_test, pred_tfidf_test, labels=None, sample_weight=None)\n\nsummary.append(['Tfidf_l1',find_highest_alpha(roc_auc_score_cv_tfidf_dict_l1),roc_auc_test])\nsns.heatmap(cm, annot=True,fmt=\"d\")\nplt.title('SVM Linear Kernel \\nAccuracy:{0:.3f}'.format(accuracy_score(y_test, pred_tfidf_test)))\nplt.show()\n\n","e757c9d9":"roc_auc_score_cv_w2v_dict_l1={}\nroc_auc_score_train_w2v_dict_l1={}\n\nalpha=[0.00001,0.0001,0.001,0.01,0.1,1,10,100,1000,10000]\nfor i in tqdm(alpha):\n    # create instance of model\n    sgd=SGDClassifier(loss='hinge',penalty='l1', alpha=i,random_state=1,class_weight=\"balanced\")\n    \n    # fitting the model on crossvalidation train\n    sgd.fit(X_train_w2v, y_train)\n\n    # fit the model to the calibrator\n    calibrated = CalibratedClassifierCV(base_estimator=sgd,method='sigmoid',cv='prefit')\n\n    calibrated.fit(X_train_w2v,y_train)\n\n    # predict the response on the crossvalidation train\n    pred_w2v_cv = calibrated.predict_proba(X_cv_w2v)\n    \n    \n    #evaluate CV roc_auc\n    roc_auc_cv =roc_auc_score(y_cv,pred_w2v_cv[:,1])\n    \n    #insert into dict\n    roc_auc_score_cv_w2v_dict_l1[i]=roc_auc_cv\n    \n    \n    # predict the response on the train\n    pred_w2v_train = calibrated.predict_proba(X_train_w2v)\n    \n    #evaluate train roc_auc\n    roc_auc_train =roc_auc_score(y_train,pred_w2v_train[:,1])\n    \n    #insert into dict\n    roc_auc_score_train_w2v_dict_l1[i]=roc_auc_train\n    \n    \n    \nprint(roc_auc_score_cv_w2v_dict_l1)\nprint(roc_auc_score_train_w2v_dict_l1)\n","c7b91cca":"#https:\/\/stackoverflow.com\/questions\/37266341\/plotting-a-python-dict-in-order-of-key-values\/37266356\nimport math\n\nlists1 = sorted(roc_auc_score_cv_w2v_dict_l1.items())\nx1, y1 = zip(*lists1) # unpack a list of pairs into two tuples\nlists2 = sorted(roc_auc_score_train_w2v_dict_l1.items())\nx2, y2 = zip(*lists2) # unpack a list of pairs into two tuples\nplt.xlabel('alpha')\nplt.ylabel('auc_score')\nplt.title('Hyper parameter tuning')\nplt.plot(x1, y1,label=\"CV\")\nplt.plot(x2, y2,label='Train')\nplt.legend()\nplt.show()\n\nx1=[math.log(i) for i in list(x1)]\nx2=[math.log(i) for i in list(x2)]\nplt.xlabel('log(alpha)')\nplt.ylabel('auc_score')\nplt.title('Hyper parameter tuning')\nplt.plot(x1, y1,label=\"CV\")\nplt.plot(x2, y2,label='Train')\nplt.legend()\nplt.show()\n","39583d0e":"print(find_highest_alpha(roc_auc_score_cv_w2v_dict_l1))","280768dc":"# train model on the best alpha\nsgd = SGDClassifier(loss='hinge',penalty='l1',alpha=find_highest_alpha(roc_auc_score_cv_w2v_dict_l1),random_state=1,class_weight=\"balanced\")\n\n# fitting the model on crossvalidation train\nsgd.fit(X_train_w2v, y_train)\n\n# fit the model to the calibrator\ncalibrated = CalibratedClassifierCV(base_estimator=sgd,method='sigmoid',cv='prefit')\n\ncalibrated.fit(X_train_w2v,y_train)\n\n# predict the response on the crossvalidation train\npred_w2v_test = calibrated.predict(X_test_w2v)\npred_w2v_train = calibrated.predict(X_train_w2v)\n\n#https:\/\/stackoverflow.com\/questions\/52910061\/implementing-roc-curves-for-k-nn-machine-learning-algorithm-using-python-and-scip_scores = knn.predict_proba(X_test)\npred_w2v_test_scores=calibrated.predict_proba(X_test_w2v)\npred_w2v_train_scores=calibrated.predict_proba(X_train_w2v)\n\nfpr_test, tpr_test, threshold_test = roc_curve(y_test, pred_w2v_test_scores[:, 1])\nfpr_train, tpr_train, threshold_train = roc_curve(y_train, pred_w2v_train_scores[:, 1])\nroc_auc_test = auc(fpr_test, tpr_test)\nroc_auc_train = auc(fpr_train, tpr_train)\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr_test, tpr_test, 'r', label = 'AUC_test = %0.2f' % roc_auc_test)\nplt.plot(fpr_train, tpr_train, 'b', label = 'AUC_train = %0.2f' % roc_auc_train)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'g--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.title('ROC Curve of W2V-LR')\nplt.show()\n","b7e26f52":"#https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.confusion_matrix.html\nfrom sklearn.metrics import confusion_matrix\nprint(\"Training CM for W2V\")\ncm =confusion_matrix(y_train, pred_w2v_train, labels=None, sample_weight=None)\nsns.heatmap(cm, annot=True,fmt=\"d\")\nplt.title('SVM Linear Kernel \\nAccuracy:{0:.3f}'.format(accuracy_score(y_train, pred_w2v_train)))\nplt.show()\nprint(\"=\"*50)\t\nprint(\"Testing CM for W2V\")\ncm =confusion_matrix(y_test, pred_w2v_test, labels=None, sample_weight=None)\nsummary.append(['W2v_l1',find_highest_alpha(roc_auc_score_cv_w2v_dict_l1),roc_auc_test])\nsns.heatmap(cm, annot=True,fmt=\"d\")\nplt.title('SVM Linear Kernel \\nAccuracy:{0:.3f}'.format(accuracy_score(y_test, pred_w2v_test)))\nplt.show()\n\n","2a4f4519":"\nroc_auc_score_cv_tfidf_w2v_dict_l1={}\nroc_auc_score_train_tfidf_w2v_dict_l1={}\n\nalpha=[0.00001,0.0001,0.001,0.01,0.1,1,10,100,1000,10000]\nfor i in tqdm(alpha):\n    # create instance of model\n    sgd=SGDClassifier(loss='hinge',penalty='l1', alpha=i,random_state=1,class_weight=\"balanced\")\n    \n    # fitting the model on crossvalidation train\n    sgd.fit(X_train_tfidf_w2v, y_train)\n\n    # fit the model to the calibrator\n    calibrated = CalibratedClassifierCV(base_estimator=sgd,method='sigmoid',cv='prefit')\n\n    calibrated.fit(X_train_tfidf_w2v,y_train)\n\n    # predict the response on the crossvalidation train\n    pred_tfidf_w2v_cv = calibrated.predict_proba(X_cv_tfidf_w2v)\n    \n    \n    #evaluate CV roc_auc\n    roc_auc_cv =roc_auc_score(y_cv,pred_tfidf_w2v_cv[:,1])\n    \n    #insert into dict\n    roc_auc_score_cv_tfidf_w2v_dict_l1[i]=roc_auc_cv\n    \n    \n    # predict the response on the train\n    pred_tfidf_w2v_train = calibrated.predict_proba(X_train_tfidf_w2v)\n    \n    #evaluate train roc_auc\n    roc_auc_train =roc_auc_score(y_train,pred_tfidf_w2v_train[:,1])\n    \n    #insert into dict\n    roc_auc_score_train_tfidf_w2v_dict_l1[i]=roc_auc_train\n    \n    \n    \nprint(roc_auc_score_cv_tfidf_w2v_dict_l1)\nprint(roc_auc_score_train_tfidf_w2v_dict_l1)\n","d57f5f9b":"#https:\/\/stackoverflow.com\/questions\/37266341\/plotting-a-python-dict-in-order-of-key-values\/37266356\nimport math\n\nlists1 = sorted(roc_auc_score_cv_tfidf_w2v_dict_l1.items())\nx1, y1 = zip(*lists1) # unpack a list of pairs into two tuples\nlists2 = sorted(roc_auc_score_train_tfidf_w2v_dict_l1.items())\nx2, y2 = zip(*lists2) # unpack a list of pairs into two tuples\nplt.xlabel('alpha')\nplt.ylabel('auc_score')\nplt.title('Hyper parameter tuning')\nplt.plot(x1, y1,label=\"CV\")\nplt.plot(x2, y2,label='Train')\nplt.legend()\nplt.show()\n\nx1=[math.log(i) for i in list(x1)]\nx2=[math.log(i) for i in list(x2)]\nplt.xlabel('log(alpha)')\nplt.ylabel('auc_score')\nplt.title('Hyper parameter tuning')\nplt.plot(x1, y1,label=\"CV\")\nplt.plot(x2, y2,label='Train')\nplt.legend()\nplt.show()\n","27785a8b":"print(find_highest_alpha(roc_auc_score_cv_tfidf_w2v_dict_l1))","f3a34471":"# train model on the best alpha\nsgd = SGDClassifier(loss='hinge',penalty='l1',alpha=find_highest_alpha(roc_auc_score_cv_tfidf_w2v_dict_l1),random_state=1,class_weight=\"balanced\")\n\n# fitting the model on crossvalidation train\nsgd.fit(X_train_tfidf_w2v, y_train)\n\n# fit the model to the calibrator\ncalibrated = CalibratedClassifierCV(base_estimator=sgd,method='sigmoid',cv='prefit')\n\ncalibrated.fit(X_train_tfidf_w2v,y_train)\n\n# predict the response on the crossvalidation train\npred_tfidf_w2v_test = calibrated.predict(X_test_tfidf_w2v)\npred_tfidf_w2v_train = calibrated.predict(X_train_tfidf_w2v)\n\n#https:\/\/stackoverflow.com\/questions\/52910061\/implementing-roc-curves-for-k-nn-machine-learning-algorithm-using-python-and-scip_scores = knn.predict_proba(X_test)\npred_tfidf_w2v_test_scores=calibrated.predict_proba(X_test_tfidf_w2v)\npred_tfidf_w2v_train_scores=calibrated.predict_proba(X_train_tfidf_w2v)\n\nfpr_test, tpr_test, threshold_test = roc_curve(y_test, pred_tfidf_w2v_test_scores[:, 1])\nfpr_train, tpr_train, threshold_train = roc_curve(y_train, pred_tfidf_w2v_train_scores[:, 1])\nroc_auc_test = auc(fpr_test, tpr_test)\nroc_auc_train = auc(fpr_train, tpr_train)\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr_test, tpr_test, 'r', label = 'AUC_test = %0.2f' % roc_auc_test)\nplt.plot(fpr_train, tpr_train, 'b', label = 'AUC_train = %0.2f' % roc_auc_train)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'g--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.title('ROC Curve of TFIDF_W2V-LR')\nplt.show()\n","53db98de":"#https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.confusion_matrix.html\nfrom sklearn.metrics import confusion_matrix\nprint(\"Training CM for TFIDF_W2V\")\ncm =confusion_matrix(y_train, pred_tfidf_w2v_train, labels=None, sample_weight=None)\nsns.heatmap(cm, annot=True,fmt=\"d\")\nplt.title('SVM Linear Kernel \\nAccuracy:{0:.3f}'.format(accuracy_score(y_train, pred_tfidf_w2v_train)))\nplt.show()\nprint(\"=\"*50)\t\nprint(\"Testing CM for TFIDF_W2V\")\ncm =confusion_matrix(y_test, pred_tfidf_w2v_test, labels=None, sample_weight=None)\nsummary.append(['Tfidf_w2v_l1',find_highest_alpha(roc_auc_score_cv_tfidf_w2v_dict_l1),roc_auc_test])\nsns.heatmap(cm, annot=True,fmt=\"d\")\nplt.title('SVM Linear Kernel \\nAccuracy:{0:.3f}'.format(accuracy_score(y_test, pred_tfidf_w2v_test)))\nplt.show()\n\n","d1e1db28":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer(min_df=10, max_features=5000)\nvectorizer.fit(X_train['essay'])\n\n# we use the fitted CountVectorizer to convert the text to vector\nX_train_essay_tfidf=vectorizer.transform(X_train['essay'].values)\nX_test_essay_tfidf=vectorizer.transform(X_test['essay'].values)\nX_cv_essay_tfidf=vectorizer.transform(X_cv['essay'].values)\n\n\nprint(\"Shape of matrix after one hot encodig \",X_train_essay_tfidf.shape)","f82a84f3":"# initializing the pca\nfrom sklearn.decomposition import TruncatedSVD\nsvd = TruncatedSVD()\n\nsvd.n_components =int(X_train_essay_tfidf.shape[1]-1)\n\nsvd_data = svd.fit_transform(X_train_essay_tfidf[24000:])\n\npercentage_var_explained = svd.explained_variance_ \/ np.sum(svd.explained_variance_)\n\ncum_var_explained = np.cumsum(percentage_var_explained)\n\nplt.clf()\nplt.plot(cum_var_explained, linewidth=2)\nplt.grid()\nplt.xlabel('n_components')\nplt.ylabel('Cumulative_explained_variance')\nplt.show()","f08406a2":"svd = TruncatedSVD(n_components= 1750)\nsvd.fit(X_train_essay_tfidf)\n\nX_train_svd=svd.transform(X_train_essay_tfidf)\nX_test_svd=svd.transform(X_test_essay_tfidf)\nX_cv_svd=svd.transform(X_cv_essay_tfidf)","b90ec10d":"print(X_train_svd.shape)\nprint(X_test_svd.shape)\nprint(X_cv_svd.shape)\n","efbd1cbf":"X_train_essay_sentiment_score=X_train['essay_sentiment_score'][:,np.newaxis]\nX_test_essay_sentiment_score=X_test['essay_sentiment_score'][:,np.newaxis]\nX_cv_essay_sentiment_score=X_cv['essay_sentiment_score'][:,np.newaxis]","041cfbd0":"X_train_svd = hstack((X_train_clean_categories, X_train_clean_sub_categories,X_train_skl_state,X_train_teacher_prefix,\n            X_train_project_grade_category,X_train_price_standardized,X_train_quantity_standardized,X_train_prev_proj,\n            X_train_essay_sentiment_score,X_train_svd,X_train_essay_count_standardized,X_train_title_count_standardized\n            )).tocsr()\n\n\nX_test_svd = hstack((X_test_clean_categories, X_test_clean_sub_categories,X_test_skl_state,X_test_teacher_prefix,\n            X_test_project_grade_category,X_test_price_standardized,X_test_quantity_standardized,X_test_prev_proj,\n            X_test_essay_sentiment_score,X_test_svd,X_test_essay_count_standardized,X_test_title_count_standardized\n            )).tocsr()\n\n\nX_cv_svd = hstack((X_cv_clean_categories, X_cv_clean_sub_categories,X_cv_skl_state,X_cv_teacher_prefix,\n            X_cv_project_grade_category,X_cv_price_standardized,X_cv_quantity_standardized,X_cv_prev_proj,\n            X_cv_essay_sentiment_score,X_cv_svd,X_cv_essay_count_standardized,X_cv_title_count_standardized\n            )).tocsr()\n\n\nprint(X_train_svd.shape)\nprint(X_test_svd.shape)\nprint(X_cv_svd.shape)","e0ba4e4c":"\n#store the results \nroc_auc_score_cv_svd_dict_l1={}\nroc_auc_score_train_svd_dict_l1={}\n\nalpha=[0.00001,0.0001,0.001,0.01,0.1,1,10,100,1000,10000]\nfor i in tqdm(alpha):\n    # create instance of model\n    sgd=SGDClassifier(loss='hinge',penalty='l1', alpha=i,random_state=3,class_weight=\"balanced\")\n    \n    # fitting the model on crossvalidation train\n    sgd.fit(X_train_svd, y_train)\n\n    # fit the model to the calibrator\n    calibrated = CalibratedClassifierCV(base_estimator=sgd,method='sigmoid',cv='prefit')\n\n    calibrated.fit(X_train_svd,y_train)\n\n    # predict the response on the crossvalidation train\n    pred_svd_cv = calibrated.predict_proba(X_cv_svd)\n    \n    \n    #evaluate CV roc_auc\n    roc_auc_cv =roc_auc_score(y_cv,pred_svd_cv[:,1])\n    \n    #insert into dict\n    roc_auc_score_cv_svd_dict_l1[i]=roc_auc_cv\n    \n    \n    # predict the response on the train\n    pred_svd_train = calibrated.predict_proba(X_train_svd)\n    \n    #evaluate train roc_auc\n    roc_auc_train =roc_auc_score(y_train,pred_svd_train[:,1])\n    \n    #insert into dict\n    roc_auc_score_train_svd_dict_l1[i]=roc_auc_train\n    \n    \n    \nprint(roc_auc_score_cv_svd_dict_l1)\nprint(roc_auc_score_train_svd_dict_l1)\n","8259047f":"#https:\/\/stackoverflow.com\/questions\/37266341\/plotting-a-python-dict-in-order-of-key-values\/37266356\nimport math\n\nlists1 = sorted(roc_auc_score_cv_svd_dict_l1.items())\nx1, y1 = zip(*lists1) # unpack a list of pairs into two tuples\nlists2 = sorted(roc_auc_score_train_svd_dict_l1.items())\nx2, y2 = zip(*lists2) # unpack a list of pairs into two tuples\nplt.xlabel('alpha')\nplt.ylabel('roc_auc_score')\nplt.title('Hyper parameter tuning')\nplt.plot(x1, y1,label=\"CV\")\nplt.plot(x2, y2,label='Train')\nplt.legend()\nplt.show()\n\nx1=[math.log(i) for i in list(x1)]\nx2=[math.log(i) for i in list(x2)]\nplt.xlabel('log(alpha)')\nplt.ylabel('roc_auc_score')\nplt.title('Hyper parameter tuning')\nplt.plot(x1, y1,label=\"CV\")\nplt.plot(x2, y2,label='Train')\nplt.legend()\nplt.show()\n","d1a32a99":"print(find_highest_alpha(roc_auc_score_cv_svd_dict_l1))","e95026f2":"# train model on the best alpha\nsgd = SGDClassifier(loss='hinge',penalty='l1',alpha=find_highest_alpha(roc_auc_score_cv_svd_dict_l1),random_state=3,class_weight=\"balanced\")\n\n# fitting the model on crossvalidation train\nsgd.fit(X_train_svd, y_train)\n\n# predict the response on the crossvalidation train\npred_svd_test = sgd.predict(X_test_svd)\npred_svd_train = sgd.predict(X_train_svd)\n\n#https:\/\/stackoverflow.com\/questions\/52910061\/implementing-roc-curves-for-k-nn-machine-learning-algorithm-using-python-and-scip_scores = knn.predict_proba(X_test)\npred_svd_test_scores=sgd.decision_function(X_test_svd)\npred_svd_train_scores=sgd.decision_function(X_train_svd)\n\nfpr_test, tpr_test, threshold_test = roc_curve(y_test, pred_svd_test_scores)\nfpr_train, tpr_train, threshold_train = roc_curve(y_train, pred_svd_train_scores)\nroc_auc_test = auc(fpr_test, tpr_test)\nroc_auc_train = auc(fpr_train, tpr_train)\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr_test, tpr_test, 'r', label = 'AUC_test = %0.2f' % roc_auc_test)\nplt.plot(fpr_train, tpr_train, 'b', label = 'AUC_train = %0.2f' % roc_auc_train)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'g--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.title('ROC Curve of SVD-LR')\nplt.show()\n\n\n","b6078904":"#https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.confusion_matrix.html\nfrom sklearn.metrics import confusion_matrix\nprint(\"Training CM for SVD\")\ncm =confusion_matrix(y_train, pred_svd_train, labels=None, sample_weight=None)\nsns.heatmap(cm, annot=True,fmt=\"d\")\nplt.title('SVM Linear Kernel \\nAccuracy:{0:.3f}'.format(accuracy_score(y_train, pred_svd_train)))\nplt.show()\nprint(\"=\"*50)\t\nprint(\"Testing CM for SVD\")\ncm =confusion_matrix(y_test, pred_svd_test, labels=None, sample_weight=None)\nsummary.append(['Svd_l1',find_highest_alpha(roc_auc_score_cv_svd_dict_l1),roc_auc_test])\nsns.heatmap(cm, annot=True,fmt=\"d\")\nplt.title('SVM Linear Kernel \\nAccuracy:{0:.3f}'.format(accuracy_score(y_test, pred_svd_test)))\nplt.show()\n\n","3a840daf":"# Please compare all your models using Prettytable library\nfrom prettytable import PrettyTable\n\nx = PrettyTable()\nx.field_names = [\"Vectorizer\", \"Hyper parameter\", \"AUC\"]\n\nfor each in summary:\n    x.add_row(each)\n\nprint(x)","c9e49f58":"## 1.5 Preparing data for models","4f4de831":"### Adding a new coloumn\n    -- this will be used for set 5\n    -- use VADER SENTIMENT for sentiment scoring the essaay\n    ","7bcf589b":"###  Find best alpha","6e2bb928":"#### 1.5.2.2 TFIDF vectorizer","837dc6b6":"### Plot ROC_AUC_score VS different alpha values (Train and CV set)","7f05f150":"<h1>2. Support Vector Machines <\/h1>","f18ef80a":"###  Find best alpha","30a5b867":"#### Train the model on the optimal alpha value and run the Test Dataset","85c65f53":"- we need to merge all the numerical vectors i.e catogorical, text, numerical vectors","0adf1b56":"#### 1.5.2.1 Bag of words","27bbaabd":"## 1.1 Reading Data","05362a8e":"###  Applying Logistic Regression on SVD L1 Regularization,<font color='red'> SET 5<\/font>","14a375e5":"###  Applying Logistic Regression on TFIDF L1 Regularization,<font color='red'> SET 2<\/font>","0cef76bf":"### Declare the Dependant and independant variables ","5f2765b7":"## 1.2 preprocessing of `project_subject_categories`","c011220d":"## About the DonorsChoose Data Set\n\nThe `train.csv` data set provided by DonorsChoose contains the following features:\n\nFeature | Description \n----------|---------------\n**`project_id`** | A unique identifier for the proposed project. **Example:** `p036502`   \n**`project_title`**    | Title of the project. **Examples:**<br><ul><li><code>Art Will Make You Happy!<\/code><\/li><li><code>First Grade Fun<\/code><\/li><\/ul> \n**`project_grade_category`** | Grade level of students for which the project is targeted. One of the following enumerated values: <br\/><ul><li><code>Grades PreK-2<\/code><\/li><li><code>Grades 3-5<\/code><\/li><li><code>Grades 6-8<\/code><\/li><li><code>Grades 9-12<\/code><\/li><\/ul>  \n **`project_subject_categories`** | One or more (comma-separated) subject categories for the project from the following enumerated list of values:  <br\/><ul><li><code>Applied Learning<\/code><\/li><li><code>Care &amp; Hunger<\/code><\/li><li><code>Health &amp; Sports<\/code><\/li><li><code>History &amp; Civics<\/code><\/li><li><code>Literacy &amp; Language<\/code><\/li><li><code>Math &amp; Science<\/code><\/li><li><code>Music &amp; The Arts<\/code><\/li><li><code>Special Needs<\/code><\/li><li><code>Warmth<\/code><\/li><\/ul><br\/> **Examples:** <br\/><ul><li><code>Music &amp; The Arts<\/code><\/li><li><code>Literacy &amp; Language, Math &amp; Science<\/code><\/li>  \n  **`school_state`** | State where school is located ([Two-letter U.S. postal code](https:\/\/en.wikipedia.org\/wiki\/List_of_U.S._state_abbreviations#Postal_codes)). **Example:** `WY`\n**`project_subject_subcategories`** | One or more (comma-separated) subject subcategories for the project. **Examples:** <br\/><ul><li><code>Literacy<\/code><\/li><li><code>Literature &amp; Writing, Social Sciences<\/code><\/li><\/ul> \n**`project_resource_summary`** | An explanation of the resources needed for the project. **Example:** <br\/><ul><li><code>My students need hands on literacy materials to manage sensory needs!<\/code<\/li><\/ul> \n**`project_essay_1`**    | First application essay<sup>*<\/sup>  \n**`project_essay_2`**    | Second application essay<sup>*<\/sup> \n**`project_essay_3`**    | Third application essay<sup>*<\/sup> \n**`project_essay_4`**    | Fourth application essay<sup>*<\/sup> \n**`project_submitted_datetime`** | Datetime when project application was submitted. **Example:** `2016-04-28 12:43:56.245`   \n**`teacher_id`** | A unique identifier for the teacher of the proposed project. **Example:** `bdf8baa8fedef6bfeec7ae4ff1c15c56`  \n**`teacher_prefix`** | Teacher's title. One of the following enumerated values: <br\/><ul><li><code>nan<\/code><\/li><li><code>Dr.<\/code><\/li><li><code>Mr.<\/code><\/li><li><code>Mrs.<\/code><\/li><li><code>Ms.<\/code><\/li><li><code>Teacher.<\/code><\/li><\/ul>  \n**`teacher_number_of_previously_posted_projects`** | Number of project applications previously submitted by the same teacher. **Example:** `2` \n\n<sup>*<\/sup> See the section <b>Notes on the Essay Data<\/b> for more details about these features.\n\nAdditionally, the `resources.csv` data set provides more data about the resources required for each project. Each line in this file represents a resource required by a project:\n\nFeature | Description \n----------|---------------\n**`id`** | A `project_id` value from the `train.csv` file.  **Example:** `p036502`   \n**`description`** | Desciption of the resource. **Example:** `Tenor Saxophone Reeds, Box of 25`   \n**`quantity`** | Quantity of the resource required. **Example:** `3`   \n**`price`** | Price of the resource required. **Example:** `9.95`   \n\n**Note:** Many projects require multiple resources. The `id` value corresponds to a `project_id` in train.csv, so you use it as a key to retrieve all resources needed for a project:\n\nThe data set contains the following label (the value you will attempt to predict):\n\nLabel | Description\n----------|---------------\n`project_is_approved` | A binary flag indicating whether DonorsChoose approved the project. A value of `0` indicates the project was not approved, and a value of `1` indicates the project was approved.","08c783e7":"## Splitting data into Test,Train,CV","3810660e":"#### Train the model on the optimal alpha value and run the Test Dataset\n ","c0bedf85":"### Vectorize the Features","1fadd04e":"<p>\nDonorsChoose.org receives hundreds of thousands of project proposals each year for classroom projects in need of funding. Right now, a large number of volunteers is needed to manually screen each submission before it's approved to be posted on the DonorsChoose.org website.\n<\/p>\n<p>\n    Next year, DonorsChoose.org expects to receive close to 500,000 project proposals. As a result, there are three main problems they need to solve:\n<ul>\n<li>\n    How to scale current manual processes and resources to screen 500,000 projects so that they can be posted as quickly and as efficiently as possible<\/li>\n    <li>How to increase the consistency of project vetting across different volunteers to improve the experience for teachers<\/li>\n    <li>How to focus volunteer time on the applications that need the most assistance<\/li>\n    <\/ul>\n<\/p>    \n<p>\nThe goal of the competition is to predict whether or not a DonorsChoose.org project proposal submitted by a teacher will be approved, using the text of project descriptions as well as additional metadata about the project, teacher, and school. DonorsChoose.org can then use this information to identify projects most likely to need further review before approval.\n<\/p>","06f31ce5":"###  Find best alpha","11287a13":"### Plot ROC_AUC_score VS different alpha values (Train and CV set)","60755684":"### Notes on the Essay Data\n\n<ul>\nPrior to May 17, 2016, the prompts for the essays were as follows:\n<li>__project_essay_1:__ \"Introduce us to your classroom\"<\/li>\n<li>__project_essay_2:__ \"Tell us more about your students\"<\/li>\n<li>__project_essay_3:__ \"Describe how your students will use the materials you're requesting\"<\/li>\n<li>__project_essay_3:__ \"Close by sharing why your project will make a difference\"<\/li>\n<\/ul>\n\n\n<ul>\nStarting on May 17, 2016, the number of essays was reduced from 4 to 2, and the prompts for the first 2 essays were changed to the following:<br>\n<li>__project_essay_1:__ \"Describe your students: What makes your students special? Specific details about their background, your neighborhood, and your school are all helpful.\"<\/li>\n<li>__project_essay_2:__ \"About your project: How will these materials make a difference in your students' learning and improve their school lives?\"<\/li>\n<br>For all projects with project_submitted_datetime of 2016-05-17 and later, the values of project_essay_3 and project_essay_4 will be NaN.\n<\/ul>\n","dc32fd57":"## 1.3 Text preprocessing","1b998d3e":"###  Applying Logistic Regression on BOW L1 Regularization,<font color='red'> SET 1<\/font>","cfaffbc0":"### Get the confusion matrix for the TFIDF_l1","f0905eb8":"###  Applying Logistic Regression on TFIDF_W2V L1 Regularization,<font color='red'> SET 4<\/font>","8a668a68":"# DonorsChoose","0a27791d":"### Plot ROC_AUC_score VS different alpha values (Train and CV set)","38240b48":"### Get the confusion matrix for the BOW_l1","a4bf1826":"### Sort Data from oldest to Newest.","bebd3789":"### Lets Prepare SET 5","c4e44b00":"### Plot ROC_AUC_score VS different alpha values (Train and CV set)","c21cb40d":"## 1.3 preprocessing of `project_subject_subcategories`","8d143810":"we are going to consider\n\n       - school_state : categorical data\n       - clean_categories : categorical data\n       - clean_subcategories : categorical data\n       - project_grade_category : categorical data\n       - teacher_prefix : categorical data\n       \n       - project_title : text data\n       - text : text data\n       - project_resource_summary: text data (optinal)\n       \n       - quantity : numerical (optinal)\n       - teacher_number_of_previously_posted_projects : numerical\n       - price : numerical\n       \n       -Length of words in essay\n       -Length of words in title\n       \n       -Sentiment score of the essay (SET 5)","c140c118":"### Lets apply TruncatedSVD \n\n<li> Consider these set of features <font color='red'> Set 5 :<\/font>\n            <ul>\n                <li><strong>school_state<\/strong> : categorical data<\/li>\n                <li><strong>clean_categories<\/strong> : categorical data<\/li>\n                <li><strong>clean_subcategories<\/strong> : categorical data<\/li>\n                <li><strong>project_grade_category<\/strong> :categorical data<\/li>\n                <li><strong>teacher_prefix<\/strong> : categorical data<\/li>\n                <li><strong>quantity<\/strong> : numerical data<\/li>\n                <li><strong>teacher_number_of_previously_posted_projects<\/strong> : numerical data<\/li>\n                <li><strong>price<\/strong> : numerical data<\/li>\n                <li><strong>sentiment score's of each of the essay<\/strong> : numerical data<\/li>\n                <li><strong>number of words in the title<\/strong> : numerical data<\/li>\n                <li><strong>number of words in the combine essays<\/strong> : numerical data<\/li>\n                <li><strong>Apply <a href='http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.decomposition.TruncatedSVD.html'>TruncatedSVD<\/a> on <a href='https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_extraction.text.TfidfVectorizer.html'>TfidfVectorizer<\/a> of essay text, choose the number of components (`n_components`) using <a href='https:\/\/www.appliedaicourse.com\/course\/applied-ai-course-online\/lessons\/pca-code-example-using-non-visualization\/'>elbow method<\/a><\/strong> : numerical data<\/li>\n            <\/ul>","d21844f8":"### 1750 Features have a Cumulative explained variance of 90% + ","36ba96e6":"#### Train the model on the optimal alpha value and run the Test Dataset\n","14adb86b":"### Get the confusion matrix for the TFIDF_W2V_l1","da4a3c58":"### adding the count of letter in each essay as a new data coloumn","2f2ea579":"<h2><font color='red'> 1.4 Preprocessing of `project_title`<\/font><\/h2>","1d85d5ee":"## Conclusions","75c0a842":"#### 1.5.2.3 Using Pretrained Models: TFIDF weighted W2V","2019e59c":"### 1.5.4 Merging all the above features","5b72dcc5":"###  Find best alpha","b836ea16":"### 1.5.2 Vectorizing Text data","6cd39064":"#### 1.5.2.3 Using Pretrained Models: Avg W2V","a80b34dc":"#### Train the model on the optimal alpha value and run the Test Dataset\n","11bdc35c":"### Get the confusion matrix for the SVD_l1","a9faa3e4":"<ol>\n    <li><strong>[Task-1] Apply Support Vector Machines(SGDClassifier with hinge loss: Linear SVM) on these feature sets<\/strong>\n        <ul>\n            <li><font color='red'>Set 1<\/font>: categorical, numerical features + project_title(BOW) + preprocessed_eassay (BOW)<\/li>\n            <li><font color='red'>Set 2<\/font>: categorical, numerical features + project_title(TFIDF)+  preprocessed_eassay (TFIDF)<\/li>\n            <li><font color='red'>Set 3<\/font>: categorical, numerical features + project_title(AVG W2V)+  preprocessed_eassay (AVG W2V)<\/li>\n            <li><font color='red'>Set 4<\/font>: categorical, numerical features + project_title(TFIDF W2V)+  preprocessed_eassay (TFIDF W2V)<\/li>        <\/ul>\n    <\/li>\n    <br>\n    <li><strong>The hyper paramter tuning (best alpha in range [10^-4 to 10^4], and the best penalty among 'l1', 'l2')<\/strong>\n        <ul>\n    <li>Find the best hyper parameter which will give the maximum <a href='https:\/\/www.appliedaicourse.com\/course\/applied-ai-course-online\/lessons\/receiver-operating-characteristic-curve-roc-curve-and-auc-1\/'>AUC<\/a> value<\/li>\n    <li>Find the best hyper paramter using k-fold cross validation or simple cross validation data<\/li>\n    <li>Use gridsearch cv or randomsearch cv or you can also write your own for loops to do this task of hyperparameter tuning\n        <\/ul>\n            <\/li>\n    <br>\n    <li><strong>Representation of results<\/strong>\n        <ul>\n    <li>You need to plot the performance of model both on train data and cross validation data for each hyper parameter, like shown in the figure.\n    <img src='https:\/\/github.com\/xSachinBharadwajx\/Donors_Choose_Classification_Models\/blob\/master\/Assignment_7_SVM\/train_cv_auc.JPG?raw=1' width=300px><\/li>\n    <li>Once after you found the best hyper parameter, you need to train your model with it, and find the AUC on test data and plot the ROC curve on both train and test.\n    <img src='https:\/\/github.com\/xSachinBharadwajx\/Donors_Choose_Classification_Models\/blob\/master\/Assignment_7_SVM\/train_test_auc.JPG?raw=1' width=300px><\/li>\n    <li>Along with plotting ROC curve, you need to print the <a href='https:\/\/www.appliedaicourse.com\/course\/applied-ai-course-online\/lessons\/confusion-matrix-tpr-fpr-fnr-tnr-1\/'>confusion matrix<\/a> with predicted and original labels of test data points. Please visualize your confusion matrices using <a href='https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html'>seaborn heatmaps.\n    <img src='https:\/\/github.com\/xSachinBharadwajx\/Donors_Choose_Classification_Models\/blob\/master\/Assignment_7_SVM\/confusion_matrix.png?raw=1' width=300px><\/li>\n        <\/ul>\n    <\/li>\n    <br>\n    <li><strong>[Task-2] Apply the Support Vector Machines on these features by finding the best hyper paramter as suggested in step 2 and step 3<\/strong>\n        <ul>\n    <li> Consider these set of features <font color='red'> Set 5 :<\/font>\n            <ul>\n                <li><strong>school_state<\/strong> : categorical data<\/li>\n                <li><strong>clean_categories<\/strong> : categorical data<\/li>\n                <li><strong>clean_subcategories<\/strong> : categorical data<\/li>\n                <li><strong>project_grade_category<\/strong> :categorical data<\/li>\n                <li><strong>teacher_prefix<\/strong> : categorical data<\/li>\n                <li><strong>quantity<\/strong> : numerical data<\/li>\n                <li><strong>teacher_number_of_previously_posted_projects<\/strong> : numerical data<\/li>\n                <li><strong>price<\/strong> : numerical data<\/li>\n                <li><strong>sentiment score's of each of the essay<\/strong> : numerical data<\/li>\n                <li><strong>number of words in the title<\/strong> : numerical data<\/li>\n                <li><strong>number of words in the combine essays<\/strong> : numerical data<\/li>\n                <li><strong>Apply <a href='http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.decomposition.TruncatedSVD.html'>TruncatedSVD<\/a> on <a href='https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_extraction.text.TfidfVectorizer.html'>TfidfVectorizer<\/a> of essay text, choose the number of components (`n_components`) using <a href='https:\/\/www.appliedaicourse.com\/course\/applied-ai-course-online\/lessons\/pca-code-example-using-non-visualization\/'>elbow method<\/a><\/strong> : numerical data<\/li>\n            <\/ul>\n         <br>\n    <\/li>\n    <br>\n    <li><strong>Conclusion<\/strong>\n        <ul>\n    <li>You need to summarize the results at the end of the notebook, summarize it in the table format. To print out a table please refer to this prettytable library<a href='http:\/\/zetcode.com\/python\/prettytable\/'>  link<\/a> \n        <img src='https:\/\/github.com\/xSachinBharadwajx\/Donors_Choose_Classification_Models\/blob\/master\/Assignment_7_SVM\/summary.JPG?raw=1' width=400px>\n    <\/li>\n        <\/ul>\n<\/ol>","0629ca2c":"<h4><font color='red'>Note: Data Leakage<\/font><\/h4>\n\n1. There will be an issue of data-leakage if you vectorize the entire data and then split it into train\/cv\/test.\n2. To avoid the issue of data-leakage, make sure to split your data first and then vectorize it. \n3. While vectorizing your data, apply the method fit_transform() on you train data, and apply the method transform() on cv\/test data.\n4. For more details please go through this <a href='https:\/\/soundcloud.com\/applied-ai-course\/leakage-bow-and-tfidf'>link.<\/a>","ef68e81f":"### Plot ROC_AUC_score VS different alpha values (Train and CV set)","0efc6613":"### Get the confusion matrix for the W2V_l1","e72c384e":"###  Find best alpha","10c47bc5":"# Assignment 7: SVM","a385f69e":"###  Applying Logistic Regression on W2V L1 Regularization,<font color='red'> SET 3<\/font>","98d361e2":"#### Train the model on the optimal alpha value and run the Test Dataset\n"}}