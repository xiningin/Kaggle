{"cell_type":{"e1f0bc63":"code","bd0921fd":"code","8a52ca8f":"code","6a1757d1":"code","57b71f3c":"code","351dd231":"code","800f7ae6":"code","ffaf6f95":"code","c0369abc":"code","746392f2":"code","bee8c30a":"code","11ea823e":"code","b84ca115":"code","9c83d28c":"code","47823076":"code","82cb924f":"code","d1ab9a63":"code","904dacbc":"code","074ddff7":"code","66ae54b9":"code","3882eab3":"code","59cf649b":"code","5feda24d":"code","105f9caa":"markdown","e86f90d2":"markdown","fe9dd5d6":"markdown","04022b5e":"markdown","a6f4458c":"markdown","5e44d353":"markdown"},"source":{"e1f0bc63":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAMAAACahl6sAAAAYFBMVEX\/\/\/9Qr8ZKrMTR6vBEqcJNrsXC4+v7\/f7l8\/aAxdaJydm74OlUsceg0+BZs8lmuc2Tztzv9\/rc7\/N4wdPI5u2s2eSj1eFht8yz3Obs9vlxvtHf8PX1+\/yXz93V7PE6pb\/j+JE\/AAAGLUlEQVR4nO2Z65ajKhCFEcFbUGNiYi4m\/f5vebgqKHaS7pmz5sf+1uqZFZWSTUEVlIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\/Fly9Zf\/0oD795\/gr3WlSzXd6tKzP6gfRRrlqp+8midDi0998e53vevP+6ran7PClzIaU4XXNl82do\/25+p4O1Z13y1vuZdkjEq+ds5+TrqWcXmJ8af6VX\/RCF8neSsnO3WTs50\/zvmgmn+V85Vi31BmELfTdZJScG1q77XuEn3Ja6xu3rUB1SdGm+oQd2tGhYTOfclvTIgk4clTW6mZiMAuRoi6mSTJwTOdtzSRBue+XBLGEwdl4jE6gfK3NLX3etM16hKtfB3jnjoD8m2c8aqLKcmYesIb1CNTXeNJqq4oIUmESYjpXet7pOXSwCzkvDTAhswKEfpnKER1mc1CcpIOk4FGMCaNsyZdychXQkqlQyS0N4EmLkSEQgTzh1ALYeVsXywbD\/nkkRdCZHvOXXt2GbN9I+1Rulv6ZCWkCnTMQiiLrhE2vWOemr4QMg5mVqgpLodTiRLUDuhrITnpqTcAvTJYJ1T2L1soWQp52G675yYhxzLg2Oubk5BERgYXLTwhznzCqyztL9WgpLAHeVeIfMSuDs5k91Odig4t5ZQfvvWInc\/Ui2FWSEHW+ELo4JZw6JG9ekLFEuOfS8vmBfWGkCO1zmjqtLjaSTK2zb0ctoXk5MTmBbAQco8ECl\/I1POFENUTQW\/ERA75dxZT2nklREdFM0xTpNOXrwXp+CnoUeAR24yd\/PtvekQ3y9dCbk6Ia0LmjPbSI8aUniGrJXEWeXhhEiIzijF8Du6\/6xE5jVMz5ishes1FstgkZPb\/NRBiVzo7RV7e8TANz0JkKyWf1WFf3\/EI95dJKKRi5oHH3TZZC3l4l8ZAiF5gCT1G3i3zhJ\/+ZyG9jQ+BWU9Iei08xlDIw18mYdQ6WZ8xfjunY2DbCqFVcXDc02CNmJlF0+hsuIjYGqF1a+ZAtXzeJUQvqwl6stlyZ2LSwXZXzsp84ZHr1EpmoqG8XFdCpL88jJ1qvi94u5ahuHN\/uk+Bntrp0V6Dp+OZXXfYE5LKfY1R2C+nlnKJGwMhU6Ko5gRQrC0nvpAnFd48WzKKPuKR2UY4ITeEnJZCOp3ABW2uSyEyx1KvqUxs+zCPbAsxa11O9qhL8ib7Togb7aWQcO+7EkJS69HjSgjZDYEUwW7j3xVCqQnaaTD1rBDubbT412pqzcm0JsNCiMznN+kIaV1YJWUoZGuN\/HBqscrG\/CHIolZIe2snbsPF3pw94gKtoNmNhkKU5vupHORqN1IEy3whovHwhfxosathetrx8AbznYRohYwm7vHGRNDFIU8dbGVktBOw9ISwKu8c4\/234de82EXROZO+kxCNkJwc3EZ1ORqTFtK3erZYp0e2KL9OiHaMShuL5z3520LUGPk7rzL2vDyeUO21ayDEO7O\/3KLI19S6srCxRTEHkK7xR+wzIcSeykIhMgrUxHOwHmQuQiEzrzaN8t+Ms1I2P21vGr0DmXdEe3uNEFN3CIUoi6zURaBc\/+mQwJutqfVyGz\/WVJ1OMtKFJ6vFwSqX6cts5e2R5COP5OS+mFrqChc0ebjmvemX2dZ\/fLAq0tpUIjjdL\/Zt6+KDicEJP5Cg+LA86p6iHvEO8cYjZk0kTBzPWZruKpMoZLLJ3xPiH3WTRtAptdLvj7qTdVfh2Sw+VDEhRAUa4Qs5ulVDTfXBdqN40yNB8SHh886V+lk9KmQaVGNsqxxEt4Q4j1ohWbNuLtyR59Ny0Px2VwPwWRXoXOzRlzYLdJ6QJBBSCJPF3Da+DDZaiV8E+7hA5wxECnSRkqlO0boQWhiPxEqmk0dUydQXYlw8lUyl0f5GPS2c8ekI+nnJ1BiIlUzXRWz5\/9OsA9aOZLOIbYWYInYaWKzZog6d7ltXxDY1aCfkjxaxI58VyMFc0yX8jc8K5ghuPissj7DrLwPjYVfvq+pxCr4K\/OCzwnnrswL4lPy3397+uU9vAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+F\/5D2UbV75lKw5IAAAAAElFTkSuQmCC',width=400,height=400)","bd0921fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8a52ca8f":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQhEv7r3NDWmkog4a6ScGCUEXlB-msRWTptP_KU6Nf5ReLFHUOJ',width=400,height=400)","6a1757d1":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# bond.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf = pd.read_csv('\/kaggle\/input\/kensho-derived-wikimedia-data\/property_aliases.csv', delimiter=',', nrows = nRowsRead)\ndf.dataframeName = 'property_aliases.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","57b71f3c":"df.head()","351dd231":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.en_alias)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","800f7ae6":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# bond.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/kensho-derived-wikimedia-data\/property.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'property.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","ffaf6f95":"df1.head()","c0369abc":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df1.en_description)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","746392f2":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# bond.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/kensho-derived-wikimedia-data\/item.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'item.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","bee8c30a":"df2.head()","11ea823e":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df2.en_label)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"blue\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","b84ca115":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# bond.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf3 = pd.read_csv('\/kaggle\/input\/kensho-derived-wikimedia-data\/page.csv', delimiter=',', nrows = nRowsRead)\ndf3.dataframeName = 'page.csv'\nnRow, nCol = df3.shape\nprint(f'There are {nRow} rows and {nCol} columns')","9c83d28c":"df3.head()","47823076":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df3.title)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"green\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","82cb924f":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# bond.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf4 = pd.read_csv('\/kaggle\/input\/kensho-derived-wikimedia-data\/item_aliases.csv', delimiter=',', nrows = nRowsRead)\ndf4.dataframeName = 'item_aliases.csv'\nnRow, nCol = df4.shape\nprint(f'There are {nRow} rows and {nCol} columns')","d1ab9a63":"df4.head()","904dacbc":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df4.en_alias)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"pink\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","074ddff7":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# bond.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf5 = pd.read_csv('\/kaggle\/input\/kensho-derived-wikimedia-data\/statements.csv', delimiter=',', nrows = nRowsRead)\ndf5.dataframeName = 'statements.csv'\nnRow, nCol = df5.shape\nprint(f'There are {nRow} rows and {nCol} columns')","66ae54b9":"df5.head()","3882eab3":"fig=sns.lmplot(x=\"target_item_id\", y=\"edge_property_id\",data=df5)","59cf649b":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTEhMWFRUXGSIaGBcYFRkZHxgYHRgYIBkbGxcaISgiGBolHRkaIjEhJSkrMi4vGh8zODMsNygtLisBCgoKDg0OGxAQGzImICYuLi0tMi0wLS8vLSstLS0tKy0tKy0tLS0tLS0tLS0tLS0tNS8tLS0tLS0tLS0tLS0tLf\/AABEIALQBGAMBIgACEQEDEQH\/xAAcAAEAAgMBAQEAAAAAAAAAAAAABAUCAwYBBwj\/xABLEAABAgQDBAQICgkDAwUAAAABAhEAAwQhBRIxE0FRYQYicZEUFTJzgZOhsiM0UlNUYpKx0fAHFiQzQlXB0+EXcoJjs\/FDdIO0wv\/EABgBAQADAQAAAAAAAAAAAAAAAAABAgME\/8QALhEAAgIABAMHBAIDAAAAAAAAAAECEQMSIVETMUEiMkJhgZHBBHGh8BTxM1Kx\/9oADAMBAAIRAxEAPwD7jCEIAQhCAEIQgBCEIAQhCAEIQgBCEIAQhCAEIRW43jkmlSFTlMT5KRdSuwf1LCJSbdIhtJWyyhHEH9IIe1LMy8cwf7Lf1josD6QSKoEylHMPKQoMpPaN45hxFnhySspHFjJ0mWsaaiqQgOtaUhip1EDqp8o33DfG6IGLYYmeEBRYJWFEM+ZLEKQfqkG8ZvyLu60JIqkPlzpd8rOPKYlu1kktyMZGcm3WFzlF9VOQ3a4PdFF+rHUCTOUSNVNcq+Hcm7MTOuNCEtobZL6OkqzbUO6iCZblJUuarqupgPhQCGL5ExFvYrcti9zh2cOztvbi0aqmsly22i0ozFhmUA54B9Yph0aYMFo3gvKcMVhWUDNYOD37t+2qwJSpaEJnMUytipRSSVJ6rqDKBSp0g6kF2IMLewuWxdxiZgcJcOQSBvIDOW5OO8RTTMAcpImAETDMJyOSTNSsMp3SwGTmDpEai6MkS0CYtOYIA6qLBeWX1wSbrdHlWdxYNdb2Fy2OkhCEWLiEIQAhCEAIQhACEIQAhCEAIQhACEIQAjR4ZL+cR9oRvj4fgcmQpaxPYJCcwJJD5FpUpIY6qQFpHMho3wcFYibb5GWLiZGvM+0+GS\/nEfaEPDJfziPtCPmPimgKlJ2iEgWC85N1EKBHWYslQRpqkvoYjDAJBlpWZqZbhlHOhSUKSmWTm6zrJK26ttCwEafx4bv2M+NLb8n1fwyX84j7Qh4ZL+cR9oR8pVgVMkr+FCwlKrZ0DKdlMKSSCCt1hLBI5FxrDxfCpMtBXLmIUdqUhKVpV1M01i1yAAhNyS+cemV9NFvvfgh48l0\/J9i8Ml\/OI+0IeGS\/nEfaEfJJ+ESEmoKloCEzCZQRNQtSpQE0gDrHXKgdYPcdhzmYLSugCenVaVkLSHCVz8i3U46wQgdXSxY5xD+NH\/b8Djy2\/J9ZFXL+Wn7Qj5XLnGsqVTlBSsymSkaplJ3JHHK\/pc74oTlkz3SQsS5jghmUErsQebRdYMqXKWtCySE+QUv1kqYpUGKXBSX1GsU+owXhYTcXzr26\/BlPF4lJlurDZb+TP13ILc2cO2oD6tuinqJiqacJ6ApKpanYhipBOihzH39kXMvFkaEzmcMy7t1SbuL5s3oV3UuLqE0oly3zzAArMSbgnMokv1QAC\/AcjHD9P\/ljl9ft1\/BEq6H1WbXABJSlSwQ7pDtpr3+yME4rL0VmT2pPPg\/COXxzBpSkJmUq8q1OQsupCi2izrLNtRpdxwt09HiADLqp6eHXzDuDPF3fNHVmnfIthXy2Bzi4JGugBJ+4x7KrZatFp72+\/simXhFWNKlK7N15SRbg9zvjVNpa1iDLp1gs+UqSbaMXDaxGZ7Fs8tjpFTAAVEgJAckmwHF+EcNifThalFNKhOUW2kx+t\/tSGYdvcIx6TVc5FGJCpGwSpaUBpmZ09YkDVvJG\/QxU0NHLUkAKUFAXSEFVrszf8dePKM54j5IxxMV3USfTdNKpBeYiXMTvCQUq9B09kdvhGKS6mWJkouDYg6pO8EbjHzuspJaE2WrNqEmWUuH56W+6JvQKeUVa5Y8mZLzEfWSQx7irviITadMjDxJKVM+iQhCOg6xCEIAQhCAEIQgBCERqjEJUs5Zk2Wgs7KWlJbixOkASYRB8cU\/0iT61H4w8cU\/0iT61H4wBOhEHxxT\/AEiT61H4w8cU\/wBIk+tR+MAToRB8cU\/0iT61H4w8cU\/0iT61H4wBOjisH6E0kyRJmKSvMuWlSmWRcpBNt1zHT+OKf5+T61H4xq6OKAo6cnTYo9wRpCcoxeV7fJSUVJq0VP6g0fyV+sMe\/qFRszTG1baK13\/cO6LxGKSSH2iRyV1Td2cKYh2PcYT8UkpSVFYISz5esQ+jhLkaHui3Fxd2V4eHsii\/UCi+Sv1hh+oFF8lfrDF+cSk\/Oy7W8tOrs2urx54zk\/Oo0d8wZr79NxhxcXdjh4eyKH9QKL5K\/WGH6gUXyV+sMXhxWSFmWZgCg7guGZKFG5totPeeBbPxjJ+dRq3ljXVtdWLw4uLuxw8PZFB+oNH8lfrDCr6C06pYShS0KT5C82Ype5F9UuXbiSzOXvjicnMUGYkKGoJbck\/coHv4FvRiMn51H2x+MOJi7scPD2Rw56DVTt4RKy\/Kyl\/ss3ti4oOg0hCFBa1zFq8pb5S3yQB5KfTfi1o6VNQggEKBBDguLjj2RkZqdXHfFeI1ypfZJBYMF0Oaq8HVSpVMp1OgJJmSphcKSBcvxb\/zuPmG4mplGV1muuQtwtHHKf4h6Hve5i56QfFajzK\/cVGrE8FROZYJlzR5MxOum\/iIxlClaIcGn2SfS1KZicyS4+48DG6ORXUqQsJqfg5wHwc4FkKO86MFHeW7QBY3uHYlnUZcwZZgdh8oDeNdxG862JiFKy8Z2ROmWFqqKYpQHWghaBxIdx2kEtzaPnlDWkOUli2VQIBa4cEHsj61UVKEB1rSgcVKAHeYoq\/o\/R1hMxJGfeuSsOe1nBPMh4riYTl2kZ4uHmdrmcPV1ilsZinbeWGpcx0H6PcOUpa6pQITlyS333BUrss3pPCLOk6C0qFZlmZNbctQbuSA\/YY6VCAAAAABYAWAG4ARWGG07ZXDwWncjKEIRudIhCEAIQhACEIQAj4L+mMSvHVPt0hUrZSRMDkfBmdNC7ggg5XLg7o+9RweP9CqXEMQmqqNo8uRJCci8tiuod7X0gD5tUdGcLQZaBMlrXlUmYraqbaSJU3aqDLASJsxUkpdx1SACHB8V0HolqniTN2iUHPL2a0FS0dYFCc6mSlKmQ6wVEpBdlAH6H\/o3hvCf63\/ABGSf0PYcHY1AcMWnEOks4LC4sLcoEnzCb0HpAE5a1M0lUwAS9mNpkE7KlBUWSs7NFySDtLN1c+\/Eeh9CqZNEqfLloRLUUtNSp1bSrCc2dSs1pMoMCn94m5Pl\/Rv9GsM4TvW\/wCIf6NYZwn+t\/xAHyno3hFFVSJaFplSZxXMSZm0mZ1iXLkKTlQpZQFLMxYfIQyCweNyuilEhBO3E1RlTmAmyEtMlh5NgovtUgrAJsLFzH1A\/obw3hP9b\/iH+jeG8J\/rf8QB+eFIDaDuj9bdGR+xU3mEf9tMcgf0N4b\/ANf13+I7Do2P2OnH\/RR7iYsu6\/T5KvmvX4PBh1K3kpbVnO7Sz7njM4fTkEMGLP1jdtCb3iX1OA14b48IRwTw0hme4yohTaKlDZggbw6uRSN\/AkeyNWzonJzS30PwnbY35nvidPpJSz1gDu1I3vu5xpXhdOdUi31jw4PwA7hFlJdWyrjskR50mjUpWcoKiQlTrIJIZku9\/KZuZHGE+noyDmKGDpPwhs4CCDe1hlPIRIThkhJskAv8pTvq7vrYXj1WHU5clILl1XJc8Te+kMy3YyvZEecaMl1KQTqTnJYdUEkvawSL7hyjOnw2lIdKQQ7A5lG4sWc8t2sbVYZI3oFraq7Wd+bxvkSZaAAgADcBfhpEOWmjYUd0ZBCGZgQA3Gwuzx71Pq2j0FGltfbAFB4d0ULkPHj+yVDfMr9xUT0aDsiDj4\/ZajzK\/cVE5Gg7It4SvU11dKiakomJCkncfvHA845HF1rw5OcFM1J6skLDrQsuwB1yAZj7LO57SOF\/SYk5qU\/w5lg\/7iEZfuMIRTlb6fGpnjaRzLmc7NwqfNVtJ6VzZh1JctfQNYB92kJWCzknaSUrlrTopD8AfSCCDwY8I6ClpiUpURNJygvtP4rEEX5KLNu9BVFMRLUQmZZKiVbUkWB+te\/Dh348fFvNmfx7cjm4fUveh2OmqlHaMJss5ZgG\/goDcCx9IMX8fNuhFaiVPqFLUEpISkEgtn6xDt2KjsaXFZmXMuWFjeqSQsahmAJJsdeRjbEav7pP7WrOnCxLirLiERKbEpSyQlQcNY214cfREsGK2ap2IQhAkQhCAEIQgBFPRfHqnzMj3qmLiKei+PVPmZHvVMAb6nEFoWU7JaktYpSToAXcBt5GXV08xGuXiyzl\/Z5ocKN0kZSEuApxvNgz7uYG6fXLTMyCSpQsy9z6qe1gAU33kkbo0S8XWXPg81ICmunUF7gJctb2jtAGMvGJjB6abcqFhpl0JdrEENzfg8JmMrDEU04g3skuLJIcENvNn1HaRtlYoopKthMDOwKVPZSRozsygbA6Kta+K8WUAo7CYyQ5cHuAa5vfsLPZwMp+JLSpjIWUgh1JBVYpBLAC7KLej0R4rFlBnkTA7bt6gnKH0F1Mb2IjBeMLDNTTSCL9UggvoxDG19d4Da5d03EVBRTsVlgC4BIJZ2BA1e27fpYEDXOxZaSt5ExkuXAfMylizckg3ax7M2fRv4pT+ZR7gjWnFphSFeDTA5YgguGHAA2038eDHPo38Tp\/Mo9wRZd1+nyV8X75E10cu6PXRy7o8Vk0t3R7mRy7oqWGZHL8\/fAlNiw7u788o9Kk625WjwKTy4QACkPufsiHLxWnUHC0sz6ahgf\/AND8iJmZPKI3gMkF8oBFncuw0u+gH3RKrqQ76CZiUgO60lg9rluIA1HZGCsWkBZllQCkO7pIAYILuzN103\/3fJLPAKfTKnRmvoGYNwsLdkZzKCSScyHJ1Jcu2jnfr98W7HmR2jKXXSVPlUCykgsN62y+guLxKyDgIiopZSS4Dabz\/D5L9jW7IkmaOMVddCVfUhdIPitR5lfuKicjQdkQcfP7LUeZX7ionI0HZE+EjqZRW9IMITVSVSlFjqlXyVDQ\/eDyJiyhEJtO0S0mqZ8lrZFVTnLPRMtYTEOpJA0uNNBYseUYUkupnnLIlTCTbOoFKQDYuo203ctDH1LEsSlSE550xKE7n1PIAXUeQiiT09oiWzrA+UZam9l\/ZGiwoy7Sh\/2vY5ZYUE9ZE3o\/0dl08jZKCZilHNMKg4UrsO4aDv3x5O6MSnzSlLkq4oUR7OHINFtR1aJqQuWtK0nQpLj\/AM8o3RlNZncuZ0ZI1VHMVOH1SfKTKqk8xkX3hvvMaJeLCWohW1pyUtkWl0OwAIUA\/N2ueUddGMyWFBlAEHcQ47jFMmzIeHsylk4nNAcBNQgfxoIc6u4BLNYbtTwjDGek6JMlMwJJWskIlmxJBYkt\/CP6iNtT0ZkE5kZpSvlS1ZfZoPQ0cT0gzIrAlatoZKEgFQ8p+tcf8m9EUlKUUZzlKCMKjHqyYXVPKPqoAAH9T6SYmYZ0vqJKhtztpW8sAtPMNr2HvEbkEbzSacG1B36uDEeumfBkNTF7dRLqALkkPoN3KMrktbMbktbPosiclaUrQQUqAII3g6GEc5+jucVUjHRC1JHZY\/eowjqi7VnZGWZJnTxT0Xx6p8zI96pi4inovj1T5mR71TEljdV101CyBKK08QFfJ4gF3NmAsxL6CMabE5ilAKp1pcs92AcsdOAHt5PnU4gtKlJTJUoJIGa7XSC9klxfc5sbaPol4ytQURTrOVeQhy7tfQNbfduZgD2Ric6wVTqBto7OQnezM6i53AG1o2TMTXlSoSFqCgDY6PmawB3AH\/kN8eLxGcH\/AGclg9lO5tYdW+t+w62fJOIzMqiZCgQAQL3dTbk6gXs9oA8OJzMqFbBbrdxd0NvUybX9LaAm0YpxGcwJp1X3ObMA72trbV2OkF4hPGsgqGTMWJd8xASLMSzHXjwvlNxGaADsFEEAtvDpBIYXcEkaNaAPVV8wywoSiFPdJSosMpIswJcgJfc7mHRv4nT+ZR7gjFWJzbDwdbnnpYHVmZi12uCNzx70b+J0\/mUe4Isu6\/T5K+L98icFJ5d0eOjl3QKkM1ozTlOjd0VLGOdPLuj0qTy7vRpGWQcIBA4aQBg6G3N2R4Vo5d0bMg4CGQcBAGAUnl3R7nTyv7YyyDgO6GQcBAGvMnh7Pzxj3MjlflwjPKOAgoABywAv2QBAx5QNLUN80v8A7ZiejQdkcHjnTMTBMk00oLQQUqmLJCSCGOUJYkNvcRqpenNSg\/DSZa0b9nmSQP8AkS\/s7Y1cNMrava0YcaCkfQ4wmzAlJUqwAJJ5DWI2FYlLqJYmylOk94O8EbiIzxOnMyTNljVaFJHaUkf1jOqdM2vS0fLRNNbOVPnrCH\/dhWiU5gAkc7u\/InslHDU6beS3+7k\/C\/42jT0bCQgKUsIWglOVQ+qXcE827ewxdKqpcwF5ksOGLywCdCC78vQX1jL6ht4jT6PT7HBFWrfMqsGqzRVaciwqTMUETAD1XUAyh\/tJ14A8bfUo+T4nShc2SiWvOqdMuw8nrXNibMX5MeEfWI2tyhFy56+3Q6Pp71QhCEVOgRxXTzCF5k1ctObKMsxIv1QXCm3tv9G547WIuJVJlodIBU7AHTm\/IAE+iKzSa1KYkVKNM+bzMfVMFikAvoS7EEbzz+6MajGJ04bBAExa7AJF3cF3flv0jpJWDSKmqmpmSEAISnNkdPwirm6CH3i\/COkw7CpMgNJlpQ+pAue1RufTGKw5Pqc8cKUuuhp6PYX4NTolO5AdR4qJc+jcOQEIsoRulR1JUqEU9F8eqfMyPeqYuIp6L49U+Zke9UxJJIqq5aVEJkqUAzEPdx2N7dx06ubX4zmBWUyFWSC6SSLgsHyh7gA7w7swJjOpxCYlSkpklQSQMzkDyQX8kvruc2PJ9EvGJigoinUcq8hDl3a+iWtvLtwJgDdTYjMU+eQpBA4kupnYdXTW55byw8kYhNJSDTqGYEu9ks7BThwS3tHZBVfOBP7ObB3CnvawGUPry0PpxRiiznGwOdAHVCtXLC5AAG\/0Gw3gJeKTCpI8HWAprl7OprsCAd+u6Ml4kvQSFkuoDW4TlYhwBfNvI8ksTZ0vEJpLGQQ4UQXfTNlBtrYWf+IM928m4lNDfsyzpoobw+8ajQ8D3wBicVmsD4MsuWYG9t7EBhdh2HSz59G\/idP5lHuCNc3E5wKh4MSzsQokFgPquxNrDePrZdvRz4pT+ZR7giy7r9Pkr4v3yJgWng25iI9ExP5EBMT3ctI8C0fkRUsZGcOMNsOPsjwrTy7oZ0\/kQB6JwdubQ26eMebRP5H5vDOnl3QBkZgdo82yePsMeCYn8iPNojl3QBltk8Y5n9IdcU0uRBvNWJZP1SCT35W7DHTKWka9ukUHTbDzUUxEsPMQoTEgDUhwR2lKiw4tGmE0pqymJbg6OPw+gQUB3FyE7nYOA7FyS99zX1iUvDpWiZpJYs6SOtdgzPdj2ZWOsV9NjC1IASQwDNlD6EMX1HWNtN+sbvG00OrP2uA13fUcz7OEcMlUqktThTjRO6BTlS6yZJuEzEZingtJF23WJ9nCPoscJ0Ep1zp8ysWOrl2aCzZjbMR2ZW9J4R3cd2JapPnSs68DuHH9JehxmTDPplJRMV5aFeSs8XHkq+\/lcnnk9GsQJbYJH1jMQ3cC\/sj6jCIck+8k\/uJYEW7OKoOi86lAqEqTNqB5Qa2Rrpl8+bOdzXCremxzN8KOtKLBQsFSlcw93L37G4G+igxjClJUainAzt8JLbqzU73HH7+3XPEcm7\/fQZMi7JfIUCAQXBuCN4j2OfwjEE5SuXmKHZUpiVS1qJJ\/48OPa73kmclYdJBHIg34WgnZpGSZsiqxlOZcsEHICVKIDgNx4Wcf8n3RaxynSOoIM9VrIEtAY6rNy+8tmFuERN0iMR0id0QSTKXOOs6Ypfodm73i9iNh1Ns5SJfyUgelrnviTExVImCpJCEIRJYRT0Xx6p8zI96pi4inovj1T5mR71TAG+rq56VKCJOcDyTmAewtfUuTvFhGMrEJxN6cpTmyvnclN+sABpbQka8bR7VVM9MxkSgtHblLZflEs72AbtaxOCsSnMGpi5SCQVszlQZ8raJHPrCzOQBawipGJTix8GOj+Vy0uAQX5bjrYwOIz7fsxL7gvQFmuQ3F7hrahyALaEVRrahkESAXJzJzsQAVAMSNSMpu2p0hNxCeMpFOSCl1DPcHrW0ubA7td5tAFrFZ0c+J0\/mUe4IxVXzygkU7LcgBSw2gZTgaOT9k3uHz6OfFKfzKPcEWXdfp8lfF++RNExO7hwhtE9\/KAmp\/IiLOxSUhRSokEFvJO9INrX1GnERCTfIluiSZiNbX5QC0Dh3RE8byMoOa2bLdJsWfTViGYjVxGSMUkqUEpUColmY8Tx5v3GJyvYZkStqn8iCVJ3dukQ04vTs+azP5Cha3LmPtDiIKxeQA5Vb\/AGK5cr6\/loZZbDMtzKpr5aDdJNne1rqy6kO5SdPSwiL48kgkZFOHBsm5Sl1gF26oN93B3D51GI0xLruU2vLVbNqHI11ca2NrRiJtIxIQm2V\/gyGF8juN2U23NFlFdUyrezLKTOSpIUNN1ucbEMbj7orabEKYMEFIzl7IIzHjpfg\/LlGwY1It8Jrp1VcH4RVxexOZblL0o6L060zahlImJSpZMtQTnIBNwQQ5bUB+2IE\/oGhMtSwuZOWA6ULPVPJksSW0vrHUY6oGknkXBkrI7MhiejQdkX4ksvMo8KDb0IWBVSJkhCpYCUs2UBgkjVIG4cOTRPjm1vSVJytsqjyXsEztztoCfv8Aqxc4bWbRN2CxZQ4Fzu3C0YRlej5loS6PmS4QhFi4hCEAUOMYSoKNRTWmN10bpqd4I4\/nW8R6LEUhJnSgrKLTJIS5Qq1so1cv1u197dNFDjtBsyauUsSloDrJfKtO\/MBqezXtYjOUa1RlKNaovQXDiORXJKptPKUjIpcwz1oJCsreSHAFiyrc+MUeJdK6meTslbCXuAAzKHEnd6PbrEKnxWqlrExM4rULfCAKccMxuB2ERnLEizKeNFs+sQin6NY8mqlktlmJstHA7iORY9x4RcRunatHSmmrQhCESSIp6L49U+Zke9UxcRT0Xx6p8zI96pgDdV185KiEU5mAEB84TYpBe4uHLWfQ6RrNfUZyPBnGgO0DPdy7aWG722jOurZ6VKEuRnDdVWYAOwsRrr2feY2KqZ2ZY2QYAlKs2pBsGbeLwBr8On9QeDupWbMM9kAKAS5ysXBfv1jUMVn3HgxcByM+7dfKxc7tbH07JdbUZTmp2UEg2mBiSQC1nsHPobeCcPGFS3xUu7fvE97cPT+MAZ+HVF\/2YaOPhddLeTY39hvGPjGc4SZDFQUQcziyVEOwtcAXP8QubsGIVDkeDXABvMYHV75ToQ2\/UbrxkmtqCQPB2DsSZgLCzkAC9n4feABgvFJwZ6YgEt5d33WCTra\/HleNnRk\/sdM9vgUe4mMlVM8lbSgkAsCTmKhnAKmDWyuWjzo18UpvMo9xMWXdfp8lfEv3YmZ06f05RqnU0lV1ISp95S5Nhy4NEoJHCBSOEVuixD8FkM2zQ3DIG0bRuHsj1NNJf92h+OQby+rcYl5RwjzIOETbIpEZOGSQABKlgDQZBazWtwJ74DDJPzUu1vIT+ES4QzMUiMcPlfNI+wPwjl+kWP00hapUunROmnywyQlLaBSmN76c9zx0eN1hk082aNUIJHa1va0cNhEkShl28tbqKlFQ1JZzmzcntwO8gG2ZRjmfoY4sq0RoHSWZ\/HRUy0aZQGLHUOXHHdHW9H6ujq0Ey5SEqT5UtSEgpcNpoQdH9HERzyakXO2k9a5Blj239nZ6PKWZlqpNQJyHGWWpKRlzJWrRn1ClPZ7hPoiGNxHlej6V\/bMoSaeuvsdnj4akngabFfuGJyNB2RB6QfFajzK\/cVE5Gg7IeE6upExjDxPlKlnU3SeChofzuJikwWsU+dQVnB2c9OvWBZK2HG7niDxjqI5vHpWwmipAeWsbOeB8k2Crfmw4xlJVqUmq7R0kIqsLnFKtipmZ5ZzZiU8z3MwAi1iydmidiEIRJIjlf0jzSKVKRoualKuxlK+9Ii\/rsQRKHWNzokXJ58hzjnekU8TpKpM0suYQZSQk5kqsxKdcuodgWcgXAFJvRozxGsrRz1DLlrGUSiVBLk5iNGcsNd9gN44dadV0MuWCpUlTC37zS\/I8bd\/o53aKlqMuYDLmJsoG3t3iwP3Qm1YALrtwd39Ect+RxZkuhedDprV5CAyVy1Ol3YAgh+JtrzMfRo47oHgy0lVTNSUqWMqEnUIdySNzsO7nHYx04SajqdmCmo6iEIRoaiKei+PVPmZHvVMXEU9F8eqfMyPeqYA31dVUJWQiQFpsytokPa7g6X7dOcY+E1GUNKSVBTKBLAjISVJc\/KIG\/RXIxlWT6gKUJcoFIAykqFzvs4ZvbGUufPc5pQYIBDKDqWwdLPa7hyYA009ZULznYhICTlzFjnG5jqL620PG3grKrKP2ZIV50EDVuDkMCe0X1b1NVVHN8AE9U5SVpPWbqhgeNtR22v4qsqntThm+WnVxbyrWcaXsbaQBmusqHOWncAkAlYDgEgFjuLAv9bQtfVLxCpUkEU2pIZSwlgNFEG4e9vbFlRzVKQFKTkJux3cPT\/V43QBW+EVOZtilnZ840e6m3De2t4x6NrHglPcfuUb\/AKgi0iD4mpvo8n1SPwiyaqmVad2TNoOI74bQcR3xC8S030eT6pH4Q8S030eT6pH4Q7JOpN2g4jvhtBxHfELxLTfR5PqkfhFTgeFSDNrQZEohNQAkGWksPBqYsLWDkntJh2RqdHtBxHfDaDiO+IXiWm+jyfVI\/CHiWm+jyfVI\/CHZGpnitOmdJmSioDOgpfg4YH0R87wGeJaFSZqxLmJUUqSQ5ACU9YMk8gD6Q7MfoPiWm+jyfVI\/CIWMdFKaoAdGzUkMlctkkDcGZiO0W3NFuy45X\/RliQlLVcznUYnLKiSsAebN7J3h8t1TNNGDaCIapXhNZLVIImCUNoosEjMlSsiTwdQFtWJ4Rao\/R6l+vUzVJ4AAHvv90dFSYBTS5YlpkoKQX6yQoudSSpyTYdwisIxhrdvy6e5msOb7xQTa2XmKZyZlOpb5gXXLW9ld4JG8BzvvF3RYithnSFou02WQpIGtwNABviUnB6caSJQ\/+NH4RAn9GkA55C1SF\/VNj2p4cnaMmmuRplkizp6+WtsqxdwAbEtqwOrPujZUyEzEKQoOlQY\/njHMVUqoQ+3kiclm2kpswGZ7oIZ34AdsbcOxh1ASl7QEgbNZCVJ1znrG7bgCddzRGfoyeJ0ZqoEzb0zjbSC8sq0VLsxtvG7d1mL3jrI+e49jq5096RDbN0bcJKieISNG1uQdSQ2+vRW1yTmE+c\/1kkjuIIiixFHQzWKo6cz6lFfWYkBmTLZS0hy5YJGjk6WOvJ45mj6T7aWqXUZ5c2Wyjsx+8SCzAKcC5Dg2bk4E2jweZPYzk7GTqJKbFXAzFak9t+yL577ppxM3dNUqpmzlZac51h89QbIQ+oQDr\/5IAd4vMJwaXJdV1zD5UxVyeLcB+S8TpElKEhKEhKRoAGjZEqNastGFasiV+GSZwabLSttHFx2HUeiI1F0dpZSsyJCAoaEjMR2FTt6ItIRakWyrnQhCESSIQhACKei+PVPmZHvVMXEc\/ULnSqubMTSzZyJkqWkKlrkBlIVOzAibMQdFp0BgDoIRS+OZ\/wDLqn1lJ\/fh45n\/AMuqfWUn9+ALqEUvjmf\/AC6p9ZSf34eOZ\/8ALqn1lJ\/fgC6hFL45n\/y6p9ZSf34eOZ\/8uqfWUn9+ALqEUvjmf\/Lqn1lJ\/fh45n\/y6p9ZSf34AuoRS+OZ\/wDLqn1lJ\/fh45n\/AMuqfWUn9+ALqKXAP31d\/wC5H\/1aaHjmf\/Lqn1lJ\/fj3o5KmPUzJspUrazs6UKUgqCRJkovs1KTrLVv4QBcwhCAEIQgBCEIAQhCAEUfSulR4PNm5BtEIJStrgtYuNW1i8jVVSEzEKQoOlaSk9hDGIatESVqj5ZhCpgQkIzBDjMUpc3yk\/cLchF0qcVfxzgcp\/wDT1ud4Tckb+Tc4q5aVUUxcioKgkg5FB2mBwAbEbiXDjg+kTZuPyncKmAcykvfeAQ79Z+OYxyrTmcK00ZXSZsxNXTLVmz7RKbgg5SQki+5iR6TH1aOC6PUKqqr8JObYSyTLKv41bm+qk39AHFu9jbCVI6MBNJiEIRqbiEIQAhCEAIQhACEIQAhCEAIQhACEIQAhCEAIQhACEIQAhCEAIQhACEIQAhCEAIQhAGmrpJc1OWYhK08FAEe3fFZK6K0aTmFOh+bqH2VEiEIhpMhxT5ouEpADAMBoI9hCJJEIQgBCEIAQhCAEIQgD\/9k=',width=400,height=400)","5feda24d":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAgUAAABhCAMAAABxuCJaAAABgFBMVEX\/\/\/9QrscAZZkAAACaAAD\/\/\/3\/\/v\/d3d3p6enu7u6VAADw8PD19fX8\/\/\/6+vrn5+elLy+6ZGHSqKFor4wxlWQ\/n3Lm7vAAZpUAX5txoraBu58bkV0zm2rt9PAAX5b79vJsn7iQtMvg7eOhHh7kycgkmV9ra2vW7fFRscZEqsVOrMtks8puvsxHtMK\/4udjY2O+v8FFRUXU1NQ7OztGRkaj0d6Cw9GQkJC2t7nGx8mrrK7qAAChoqQ4g6xQUFClpqioODt5nrt0dHSUlJRXV1e6dnOBgYHlAAArKyvrQUnxrKuZy9gmJiYTExPsYl7zjI2zTlFYqYKBsMGjv8ubxLTRpJyy2uO24+SCvc85qb14wNKax8uCxMpku8Th7frQ5+pYqc5Gt7+82eajz+B7upy6cm7gvbyuztPybXT12ODrrK7skZPqcnflKC\/6xMLzGCvvwrfqipTvP0jsUV3u2dLiCBbjGDL0u8bibHTqWFLqnqHtV2rwdIP1RVHqnZTfJh5aFOUeAAAcpElEQVR4nO1diWPixtUfougg0kht09IcJaTtBhC2OSQMSKjQIiLb62ObpiVr7zpO0zRZr6+N106bzZfkX\/\/em5FA4GO9W8DdVL9d2zCSBmneb941B4QkSJAgQYIECRIkSJAgQYIECRIkSJAgQYIEs4B+2zeQYObQrLSlXXVQ1Inccq153k+CW4BuyZY3xgJN1SR+yLCqVdnxXNeBAulWbi\/BPKC5suU68RLDshxghSY7ThXQslxE60p1keCVhwVCbjljht8F5SDLlhOi2mrl80HTdRNd8BOFbjSrhtWKk0BXZZmxAIDKAP57+Xyv43vyrd3m\/xAkkYhUlKjIIA1\/gYdGCZUkSuE\/AIopB6F4BY3ehgehFE+mN\/nMtNKUFdkbsUA3EErQDRxOAwdp0PHzFdftpmf27AkioFRBptE7MhIjJcw3kyjTyRTYEh6A90ATKkbv4TW\/SiQ3gmYYlqJUq7GitKIoRq8qN50m8qDVagEL3HoAHmLXtZKQcdbQ\/\/zHP2s0+0eOn31IxF9Er+9Q8s5HH2Ul8uZHb+pi5g8h\/iKJH\/\/hDx8T8peopCCSv3700e9EOP3N7HM\/EUigKqAK1FiZmpYttVpVAodpA4epg6rrtYAFXa81s6eXOOiI4UB6DlYkSleAhy74d\/hmCMpqHAf2s7BSaeLUyXu6rIyIYZ+TsNtCNTfscDeF\/vs3XgcWvM7xxs8p\/dsb4WtgwZsfvAti\/dUHvxHFzK\/few3x3tui+Jf33vstEd\/mBa+9lgH5f\/Du7wic\/pvnsgC0P\/R7xYmrAqJYVtpIK1ZXlj3Z4i4iBgqtlttyPX9miQNm4UDd0bBVRxoODeM12i1SkChdKo4ZQjSPRBTjgpKYxWUadFzC+EYaO5W\/Gb+cfxKz0li5iMb3xZ\/1Oug\/e+P3Os1Fkv85Ib8YsgDE+st3s5T86pe\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\/sP4wQmOdf2LIggKeUFra\/vSSewcWLIPbOpWcwXxZkK5CTCgbBnMFdKPlBrKoc06MWAAEkFmoWG1VHRYjuM1eEMyQBQtcGqDTxfjMgFjWyDS3hygt0jEWbOvl8KwlTEKO6QL66TB\/XEyVzO0l8O1H3idnQRG9ighLqTgLyuH9XSZqUDxlM\/tKssDtyAamBphB6GlE3pBBF2iawvMFmDWyWPawioGi0+KRohsAC2YxoLQYTwmCQRiQ+IjuVRnkxeHljAVmFns8Sw82IBqMjyYBpwamOXbx9s4expSjfMGlCL3DAXKoGB+nGIHqoCoy05lpMGcW+FUnYgEJWkQnvS7RLVWWDStkgcH8Aj6o6IQk6Pbmw4KJAd0rWFDcGV7OxxSzLIvDhLcuTowpElIulj4bG0rYXg9nJNyQBVDrZfcOVMqYmekMKs2XBUq1wqYaIQ30wAUWNF2qazJ4i6oV6YLIPWQswH9u1+8FM\/QLYo2\/eANdcAkLxCw7sYjjShMsEMXMw6W4tEul7Qb\/lP9VFoCE02lZkZkysPqarvUULfQNZSXNxxEsYzjfiOWNXNerBL1ZxgggGfhfxPH7debnc4xYUOKTREIsRi0f+QXgqBX40GExlVkeZwHGnZnl3ZKZ4kPCLHBcHmNBqTiquxhngVjmXsXOpfEgFffMzCuYL8BpJJgwMNLIgrTVVN2ggxkDFVnAZqIpMtMFVjVoDoeWXc8PgpmyoJgq7yzxzjwYzd8YsWD5wYPBKEj4RJrwDrFrL5s4IAmuwXpxjAWEzRGghXIDqcRtQ7EYG00C568xwsPxGGGb392lrUrFQepmU\/+fi3mzAJBWuUlw6n1LrsqqprIAAdxGiBGBA4bsdB0rH7LA9brAgmbTm8WKxYgFS2UpsxSO+o6c+Hi+IIbR1NARC6DHN8xQG1xgAZ+CLIqF5d1QY5TYQFDIgu1lIg5BxvIF4TBEaXDJFDOos7Ej0lcuRsAMMngFOJEAO7+qYN4QzQGIHxWAwXwGw3Aqgez0+lakC7rIgplMR49YUIbWRO2LbxezUXIvPpoUX4QznE0+YgF29924YY\/yBZgowoMin678+VCsZKQLlsUhDSayRuJ9doJZzPKZyYRNjucLgyRRTw0m5yq\/JObKAhUnEwELcAQRej\/IH\/4baAqYRWApI4wT3YrcbdmRReh6XjMIZjIbnbPAHGBIR9d5RzUfkBfLIHOLgOq7dJEFwAFJpyPrvc6HDpi\/d4PRpEGYbmigEQr7PZUKuwO4I3GA6YJXjwUaSDicZyxj18eYUU6HCSPZiEggW7bjWzXXGamC2QSKkS4oiCgnushyNjhIzHHD0aSQBUQcmJMswFp3H+rDlDPXODdngYRjilhQatBwAAI+q1CEMCMjSo0GkaYzG3m+c43kqmexHs8sAnqJEBqofARBRteRZwusTgCOQY+NK3e5QfCn8bAXMGQBrrITP136jCngYoYfjeuCyy+PswA6\/bo5wQKo4X7RXNyLLqDiJ7Fpx89lAdzWoBR6ErtRJXQAnwpGAqxYdloTkefLAhW0PHR5tAHpyDBYw8wxzjaTHdQUvZ5V9fm4sgcAXTCT6QUTc5DJ59s8BbgYzhEesgBcBX0MYmz2aaQLoIbdYXoo0gXr6G1s7+zpbExZ2uPHzb0bzzVajKo0FwZ7hcLeeioML0vr04kSEfNlgS77ng99XlbSfM4xmoh0OkwXAXAoCQKFIIimHbpdv+v7vd5sFiSMsQA8rofmZ0z\/PuSrFIeR4u7i4kIcixlpNNdoxAIx8\/fSGAvIJyynCDHi7sMBoFEMJw6xPnwTFoiFaPC6xDMW21Fwu7Q7pTCRzH8mutMKIFy00hgppNlPmDJUWKAQJYxwCnI42wxUQVCfyeyCC+sRhn6+ORhnQSk+4ANI8fz9BV0wygZyFmT4IALIvsSFGB6MZ42eNwe5HImdj3t+xv+kisDEqaVQ5swCDTS9hSvRQNwgfLXb0gKrlQ6jA0O2wjUpfM0yG0MAFnT6M9rLYlwXQPBV4FMF2OTD8VUp40vUsqwbTrIANMiyyWeNhxZhEM1hL0ZaAGDu0tg4wvNYQPg6tlRpRIZSOFF6au0w73WKBnRx7gXiWjXD86tNJy9zDhhWtFiVjSG4fKkqqIJKMLXnHcc4CxDMz4dm36W5q1eo4RXs8gkWYFqhUWLyjrzDwoJZHF\/MAO5eQboxCwAQGJqlVKwOuL3txvScAjJ\/FmiyUmUyB7MA\/z2\/Bf6\/MU4Ca7hwHUngNZuVmUxAJpewAEcHWfLIXEdlcCULspeyQJQkMbsQyx1iny8vlOKDRub2\/YwUX4+QunadImHcevD3sfEoc6H8Sq9TxK0KMEeIPxgT9DA\/3HM4C5zRVDPHiVIFECDkZxMmAhbB24L\/w0XHIJ1scZt7YZ+jRYiN88SxnWFCWMCrze2RQcC8Q5mfUYhqJHRvHetkDoWZ2vmc7WLAtrNgp26b\/4jfUoNVae6NujrmBDL\/WBpWYd4fZEXxldYFRGf5Iosni+WW13K8isWzRc5QE1gOECB0CprNmUwzYihw0PiYXTYsxPEEWrgC\/IpPozexKqnIC7Nj+xcUyl\/htLLlciZeHH5UvIxmLlzOaiW08NXDh4uLDx+Ucdraq71yHYC7mRkW7\/1K16tage9W+RpVZ+gcVjc2N7yIBLPbA3U0iBMrC4tJtCfJJYhU+iWXk2hQINaZpTDRK\/LRhImPJ\/FZY1JU38V1MOEJRJzSxOMY5s8CwiUe+gIYLfDgAGcYRZNLqi2v2\/e64BIACWa3rRHf0WayzbkccD4Q24go1lFHL6RoXyMiiuMCQ23PLx9dhxvFseqkcQ4wZT\/eszGHSS5uVoJjSLzKcFO5l3\/my3ALLCB8Y0M5Biv0CKLlibh7RQc1gd8MutN94ASX4DZYoFtdC52AIQFCh8DCVWnDqSX1LpKg6SX73M0et8ECQqo+OIChBsAfZ5Qrimac+vmEBHPD7bCAOJ419AWtoU8YWQO2ShlI4AfdhATzwC2xgDjNlhPSABcehDmCajT1vIuZgmYwq73NEozjtlhAZDZsiPAD1w0XKOOGtzxN4PlBc0bb2CS4gFtjAfiIGAmwAQNwBrpuFb8OoeV6oTnIJ9Zgfrg9FhCiMC+g6vqe3+32W6ExQE0Q9HpdZWbPnGASt8kC3PmW7XHb9IEJbBzZDb1C9yfJAXnKmFojzXsf5DFIOMYIxoBPJPC9MDL4ye6FL0wZvWndmP77N97QgAUcrwML\/vbG6+wlY8G7jAUf\/EYkmdfeY3jrfUIYC8S33+IlyIIvgAVSuIX6i0IzHBxC9nv5wOu2HPmn+1VJm\/+1LPjwnx+CLvjnhwz\/\/BuhX0av96n01y\/e0Sl5B36Lmfff\/xPDx4R89f77XxHx4z+FABb89YsvshL8fuclWBDeCO50NK2nSvCioITGBjnEsdcEB7ko4Wsuh8V8fGz0VQJ80cWUNlpKcAuQdLadU\/gNISL\/qg42FCqyDbTYd3xQnDQTjYniSChlK\/PCr+\/g28fi3M3pbcZ5i5i6QtLS3MbxFtIpn9TOvoEKm5CveSOU90UcemaHJPbNVHrYovA6K8VGpakuZWnS7aYIuVIZpadaFbvenOa0dzEQhFX2CsX65eHW1jMV5yceP9q6t4\/zU6THB4gnlPdBeufe1qMDBahw+O3+cJYxvbv2OC51qOrg2+NXrdMZ3ZYrG67rqPCjvMw3o6kzix1BTMPZrT3mdW1OcZ5jVxAqFfaKStnDdru90j7ap\/R4pX3SPjnDFaxbbcTKoxxul0gPzuGM9skdSk9X7owmQR2sHMRZANr3cOXu9O4y8smGfxDsL3unhS\/D4hDR0QjDoqugt4RA13uCQZr1NGkJzgvr3V7+Ra+4IXTw3DfCuMQVBE+xakLnwlkvrXx7QrSWQqTH7ZMnyv6j9reUPmo\/oV+3D1ArbLWfHR8\/Pmo\/Q0oct1e+3t\/\/d\/sbjZ6299kXFjKbcQ\/OZVNiuCkBHLbvTk8XVGzWvE27orM\/Nc1dtTXSXIWWsOzVLpyx2iRa3QbUe3yhmGLbqzJeGkEl1VW7c61k+zYhaaFLanCh\/+KLTLQN4SUe7iZwhLothAvg+gLuum0JgkJ0v14PQGMpvZbTqfvErddwEmwQOJVaD\/WS0auxF3K+Ve3UmkTt9VCFeGEbuZ1aTyZqYAudgM+e5aIU6f7aUY4+XTmjj9tf47cYbrWPQajPVp6iUB+1D+FNbu3oDl1rn4k0d\/fRd3dzeOnXB08Pz0AfaAffbR3kKAEWTK8RqrZtgXxqdRvuXqvZ8Lx2TQc69IneYQyp2MAC9r02IG\/2QF27VgMlGlQqlTqWV1SSr9Xsa6eGOdjS\/qYLMa6+quFudppjObrFfvgbxyAa2+jQIGygGdsaBx3xct9Znc3m+NBZXV\/gigaoFs1x1DeYbTCIzENzG3\/5cOtCWG5AGRSqyBlEQOpIIRWPYaOxQkdhf7hqAVPePj1L51hXPm6v3T0538fXwAKwBI8ZC8Sj9hn\/wlIirrX3qbqGJuRUo\/fOwUy0wUbkvmkfHbXXctNlAemgQH27XgPr5dq2MmJBYNfQfHMW2CgEn4u6U8vXbPawas1m1JdtKOpf+zmrcFgTBKixFUDb5hW9K7ikWbOIvNFXwGS0nI0WqQp+NehBfX25Wm9ixXX2QXU4c4oPPYK2KRggaWYSQISRn+gLtpGuADvgWFPz8Jcv1IluCxU13QGZe5izqQgtZEHP8IQNeIINeDaBtUJVECwtEGzdqAi+wV0aSs++abd\/PPr+Mcr5+3b76F\/GvXuP6dbKYy17trZyD87JIQvO7j5+fPeMIgsO2k\/PjDXwCe6tHJ1pB+01YMsjmv03qI\/psqBr22mtVuvUQCf07R6JWFBxbJuN78dYQCrIFThg9LlWUGr8HN+uGLZ97cLiFvaz5iaYDZRrDUyNIagqs0MVqEsBfjRtoqMc4KMqqJrBgJAe89yqXThhJgPNLeypqwLTYzEW1LEEGAA\/mxr\/ZaGvb+NTOMImTqmvtvpg9C1hU4Wb20zrqEn6AmuPHuoFIJgMr6KJkyD7\/cOjk\/MVUPrZ785PwD0AL+CQbp1DUbt9CkqC5E7OFfoM\/cMnjAVHoCfok\/YaYX5B7rytSNn9O8foE0yXBWAFui7KtRY4zDqELOiAYWMnxFng2bZOesAV165jPBWygB3G4uuwAQSqQfeX0WW2PWxkp8L6YL\/JWQAeoCZUHfwkxoIAmj3PWNDpNX1hJt+UURF6jpXnPXhkEXQmbVBdmiys6kgAnbNgFRU+WAMqc9uALLAJYwFpggcsbOq8VpdV4sRYwDIBeu7s2Xn77Lj9XQ5cgLvtJznQBWvfPn10oGLYmDta2adnx18+bf8LWUBQ7PSsfQR+wWO4GlyF\/acrK8CSabMABQ4MIC38gwKKLEKlVmNtEmeBb9vEQCsA7iIWhCxoISeAQ9f2VlcwqkGwSfJYK2dBh7cZZ4Hvd1RoeL85ZIEvhCyQ+7Is+7PwD9UoJ8+0dp059MbGRrqGbgxIW59ggY3aAro\/AatgGb0xFsCpXhh05rEiphxiuoD++\/QJJodO28cH0NdzW2Dp92noHVIWCNKnIF8R\/xwzFpyAE0nO2qfAgmdwAtiLw\/b\/3Tm7B2fdm2aMwExvHeSndeAPKsbIIqidWg3bZtIieHat1ws6NfR5Qhbka51er1evXbuqVBN6Nc0QfNbtOAvUfB3fcBbIKjtJJugIcF1ghyxgfrcqzGArC1ew4c57qwJXdcKmQ9UKyDUQKhJ07g65wIIm6vsKQW2v2mMsAGZshsoEqtXgF5B8xAIJuu9WmmaPz9vGMwwF0kfna0CKR6D1h7jb\/nGf5n44X\/kSWHAHrriH8cE9cBDWsuQJKIXvgRf6U6YLfphq1qjHPH5U8izYG3qHll3ra3EWqE0beNKp1eu1Wp3Jn7MAfEMsARZdm3XzsaNUuOG0mV+QJhtoRZAFaYElkphf0OQs0NE2IwtUnnzLV6b51BydSPzMj9frgrC6CZ4diFVYhRDAARZsoEuwMWSBUK\/hCXnBzm9igilkAXN7BSF0YcEYbMBp6NfEWHD2zcrJ96fnwICzk5XvD9fOz9s\/sEhxdD8g4PPTo\/aPoAu22udfnp2vnK61z\/fJAUQKW3A6CH\/t8Ki9cpT+un3+wzRbIlTlum2zOH7IAowie6NIMV+p2\/ASnQfcny6PYSRnAWYZAEZYwVXQNqClZNZO3dWOo\/Y2AlC4PRXo56jBZg+OasFGvpnPIyM9v1JFW1OrOh3mirqdjanvcaXYTN0RA4MjAG3awmYeW0OubAp1Bxne18NfGOXYQn5DwGdWgQN9p75pyKsVrAfdJEkYijzd2xSYZg1WowBakmju8OjHk7W7oADOtlZWju6dPT36F\/2\/0xELRCl7cHpydHj2\/RN69t3RMT17enLyCMzGs9O7a+enYBWyhyfnT588PTrLHh4dTLUtOtyt81ZZI7uoEvw6drwupkrydZ9o\/Q6gj9sL9Tq8S1br4DYonXoVbQnPizQ7\/WsnB+jDX5qu6fgLR5Txr8ZL2AGNHdJVLTwRj+BrLTxlttDT0SOol1AO+rish9lvNY2DcfGjBuYPImiTSXI26JrL5US2VzrJneUIX+Yc\/5pmOEdXc2ybRCLmRHYFG4EQ4a3OFsXlMNWMJ+amO5rEG5yEj4cy4b+w5VXCvs9CG36vRfT1FlG5zqYGjK78SUNfFa5cO+t4dWFWae4E\/03QN65mgT\/dYagE\/724bswsmSuVIEGCBAkSJEiQIEGCBAkSJEiQIEGCBAkS3Bj\/Dz0X+sl+CbD1AAAAAElFTkSuQmCC',width=400,height=400)","105f9caa":"Image blog.kensho.com - Introducing the Kensho Derived Wikimedia Dataset","e86f90d2":"Kaggle Notebook Runner: Mar\u00edlia Prata @mpwolke","fe9dd5d6":"Image twitter.com","04022b5e":"#Gabriel Altay - Introducing the Kensho Derived Wikimedia Dataset\n\nMachine Learner | Coder | Physicist  - blog Kensho https:\/\/blog.kensho.com\/announcing-the-kensho-derived-wikimedia-dataset-5d1197d72bcf","a6f4458c":"Image br.linkedin.com - Kensho Technologies.","5e44d353":"Kensh\u014d(\u898b\u6027) is a Japanese term from the Zen tradition. Ken means \"seeing\", sh\u014d means \"nature, essence\". It's usually translated as \"seeing one's (true) nature\", that is, the Buddha-nature or nature of mind.https:\/\/en.wikipedia.org\/wiki\/Kensh\u014d\n\n#Kensho - AI & Machine Learning Driving Essential Intelligence\n\nFounded out of Harvard and MIT in 2013. Over five years the team at Kensho built analytical products used by some of the world\u2019s biggest financial institutions and the U.S. Intelligence Community.https:\/\/www.kensho.com\/about"}}