{"cell_type":{"73564d11":"code","0a615b63":"code","d543080e":"code","d72797f9":"code","b8972086":"code","46478fcc":"code","6eb5decd":"code","b6dcfe89":"code","b5a75c3a":"code","fe62040d":"code","b5f572de":"code","f4d9680b":"code","dfc0a589":"code","8cf97180":"code","960376ed":"code","3ca4382a":"code","8a46562d":"code","35f5162c":"code","b5e4250e":"code","4e327db9":"code","f4a29c99":"code","c566e4b2":"code","f0ab9449":"code","6e4d0486":"code","38a5b80e":"code","7fb65e1f":"code","2acd0476":"code","2f220954":"code","00fd7c26":"code","02533585":"code","5d11ea17":"code","e8aeaeb6":"code","d5e3b4d2":"code","1757b4e2":"code","db8dc2b5":"code","24b68af9":"code","e212a25e":"code","0350b82f":"code","85c0f0ac":"code","f05c1488":"code","3a834ff2":"code","781868e4":"code","0800a612":"code","7efdf8d2":"code","c50c20fc":"code","1452f32a":"code","9cee2a0e":"code","df198e45":"code","df38b775":"code","2c6a556d":"code","95c28477":"code","ad0a67d9":"code","9a3e9c92":"code","98f3791f":"code","5800fa76":"markdown","1e00dce9":"markdown","555416db":"markdown","e436d93c":"markdown","d0b8f6f4":"markdown","32768cd6":"markdown","a4fb736d":"markdown","20e9e547":"markdown","cdf634d6":"markdown","dbd710d4":"markdown","b047a8e7":"markdown","d35c05c6":"markdown","aa620628":"markdown","6c9fa2b0":"markdown","bb87f045":"markdown"},"source":{"73564d11":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0a615b63":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n%matplotlib inline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nfrom sklearn.ensemble import ExtraTreesRegressor","d543080e":"df = pd.read_csv(\"..\/input\/playstore-analysis\/googleplaystore.csv\")","d72797f9":"df.head()","b8972086":"df.shape","46478fcc":"df.describe()","6eb5decd":"df.info()","b6dcfe89":"#dropping rows with null values\ndf.dropna(how='any',inplace=True)","b5a75c3a":"df['Reviews'] = df['Reviews'].astype(int)","fe62040d":"df.head()","b5f572de":"df['Size'].unique()","f4d9680b":"def Kb_to_Mb(size):\n    if size.endswith('M'):\n        return float(size[:-1])\n    elif size.endswith('k'):\n        return float(size[:-1])\/1000\n    else:\n        return size","dfc0a589":"df['Size'] = df['Size'].apply(lambda x: Kb_to_Mb(x))","8cf97180":"df['Size'].value_counts()","960376ed":"df['Size'].fillna(method=\"bfill\",inplace=True)","3ca4382a":"df['Size'].replace({'Varies with device':11.0},inplace=True)","8a46562d":"df.head()","35f5162c":"df.rename(columns={'Size_MB':'Size_MB'},inplace=True)","b5e4250e":"df.head()","4e327db9":"df[\"Installs\"] = df['Installs'].str[:-1]","f4a29c99":"df['Installs'] = df['Installs'].apply(lambda x: x.replace(\",\",\"\"))","c566e4b2":"df['Installs'] = df['Installs'].astype(int)","f0ab9449":"df.head()","6e4d0486":"df['Type'].value_counts()","38a5b80e":"df['Price'] = df['Price'].apply(lambda x: x if x == '0' else x[1:])","7fb65e1f":"df.Price= df.Price.astype(float)","2acd0476":"df.rename(columns={'Price':'Price_in_$'},inplace=True)","2f220954":"df.head()","00fd7c26":"df['Content Rating'].unique()","02533585":"df['Category'].unique()","5d11ea17":"df['Current Ver'].value_counts()","e8aeaeb6":"df['Android Ver'].value_counts()","d5e3b4d2":"def update_version(version):\n    if version.endswith('up'):\n        ver = version.split(' ')\n        ver = ver[0]\n        return ver\n    elif version == \"Varies with device\":\n        ver = '4.1.0'\n        return str(ver)\n    else:\n        ver = version.split('-')\n        ver = ver[0]\n        return str(ver)\n        ","1757b4e2":"df['Android Ver'] = df['Android Ver'].apply(lambda x: update_version(x))","db8dc2b5":"df.head()","24b68af9":"df['Genres'].unique()","e212a25e":"plt.rcParams['figure.figsize'] = (11,9)\ndf.hist()\nplt.show()","0350b82f":"#correlation between variables\nplt.rcParams['figure.figsize'] = (12,9)\nsns.heatmap(df.corr(),annot=True,cmap='Reds')\nplt.show()","85c0f0ac":"df.head()","f05c1488":"plt.rcParams['figure.figsize'] = (12,9)\nsns.barplot(x='App',y='Installs',hue='Reviews',data = df.sort_values('Installs',ascending=False)[:10])\nplt.legend(loc='center')\nplt.xticks(rotation=90)\nplt.show()","3a834ff2":"plt.rcParams['figure.figsize'] = (12,9)\nsns.barplot(x='Rating',y='App',data = df.sort_values('Rating',ascending=False)[:10])\nplt.show()","781868e4":"plt.rcParams['figure.figsize'] = (12,9)\nsns.barplot(x='Rating',y='Category',data = df.sort_values('Rating',ascending=False)[:10])\nplt.show()","0800a612":"plt.rcParams['figure.figsize'] = (12,9)\nsns.countplot(x=df['Type'],data = df)\nplt.show()","7efdf8d2":"plt.rcParams['figure.figsize'] = (50,20)\nsns.countplot(x=df['Category'],hue='Type',data = df)\nplt.show()","c50c20fc":"plt.rcParams['figure.figsize'] = (20,9)\nsns.countplot(x='App',hue='Installs',data = df.sort_values('Installs',ascending=False)[:5])\nplt.show()","1452f32a":"plt.rcParams['figure.figsize'] = (25,9)\nsns.barplot(x='App',y='Price_in_$',data = df.sort_values('Price_in_$',ascending=False)[:10])\nplt.show()","9cee2a0e":"plt.rcParams['figure.figsize'] = (20,12)\nsns.barplot(x='Installs',y='Category',data = df.sort_values('Installs',ascending=False))\nplt.show()","df198e45":"plt.rcParams['figure.figsize'] = (20,9)\nsns.catplot(x='Content Rating',y='Rating',data = df.sort_values('Rating',ascending=False))\nplt.xticks(rotation=90)\nplt.show()","df38b775":"df.columns","2c6a556d":"x = df[['Reviews','Size','Installs','Price_in_$']]\ny = df[['Rating']]","95c28477":"bstfeatures = ExtraTreesRegressor()\nfit = bstfeatures.fit(x,y)\nprint(fit.feature_importances_)\nfeat_imp = pd.Series(bstfeatures.feature_importances_,index=x.columns)\nfeat_imp.plot(kind='barh')\nplt.title(\"Most important features\")\nplt.show()","ad0a67d9":"df.head()","9a3e9c92":"x_cat = df[['Category','Type','Content Rating']]\nx_cat = pd.get_dummies(x_cat)\nx_cat","98f3791f":"X = pd.concat([x,x_cat],axis=1)\nX","5800fa76":"**Category of App with Highest ratings**","1e00dce9":"**Feature Importance**","555416db":"### **Data Cleaning**","e436d93c":"Hence we can see that Most of the Apps which belongs to 'Everyone 10+' content have ratings greater than 3.4 .","d0b8f6f4":"**App with Highest Ratings**","32768cd6":"**App with highest Reviews and Installs**","a4fb736d":"* ### **Exploratory Data Analysis and Visualization**","20e9e547":"We can see that the Rating does not depend solely upon Category and Name of the App","cdf634d6":"**Which Category Apps are free and which one are Paid**","dbd710d4":"Hence from above we can see that Reviews contribute  more to the Ratings of the App","b047a8e7":"**App with Most number of installs**","d35c05c6":"**Which Content Apps have highest Rating**","aa620628":"### **Feature Selection**","6c9fa2b0":"**Which category Apps are most installed by People**","bb87f045":"Highest Paid apps"}}