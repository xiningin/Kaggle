{"cell_type":{"c7c64303":"code","fa3ded19":"code","b0f6f87f":"code","123772f3":"code","7265061f":"code","fba96149":"code","337aade2":"code","9b2aeec5":"code","5f7dc32d":"code","47a85778":"code","92954507":"code","b5ad0cee":"code","674a6538":"code","90f3cd88":"markdown","30be9cae":"markdown","23a8f343":"markdown","cdc1476e":"markdown","93952674":"markdown","ccc2e4a3":"markdown","5997546b":"markdown"},"source":{"c7c64303":"import numpy as np \nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D","fa3ded19":"mnist = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\nX_train, X_test, y_train, y_test = train_test_split(mnist.drop('label',axis = 1), mnist.label, \n                                                 test_size=10000, random_state=123, \n                                                 stratify=mnist.label)\n\nX_train, X_test = X_train.to_numpy(), X_test.to_numpy()","b0f6f87f":"X_train = [np.reshape(x, (28,28)) for x in X_train]\nX_test = [np.reshape(x, (28,28)) for x in X_test]\nfig = plt.figure(figsize = (15,8))\nfor i, image in enumerate(X_train[:10]):\n    ax = fig.add_subplot(2, 5, i+1)\n    ax.set_xticks([]); ax.set_yticks([])\n    ax.imshow(np.uint8(image))\nplt.show()","123772f3":"#create tensors\ntrain_tenzor = tf.data.Dataset.from_tensor_slices((X_train, y_train))\ntest_tensor = tf.data.Dataset.from_tensor_slices((X_test, y_test))\ntrain_tenzor = train_tenzor.shuffle(32000).batch(32)\ntest_tensor = test_tensor.shuffle(10000).batch(30)","7265061f":"print(next(iter(test_tensor))[0][0])","fba96149":"model = tf.keras.Sequential([\n  layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(28, 28, 1)), #normolize data\n  layers.Conv2D( filters=32, kernel_size=(5, 5), strides=(1, 1), padding='same',\n                data_format='channels_last', name='conv_1', activation='relu'),\n  layers.MaxPooling2D(pool_size=(2, 2), name='pool_1'),\n  layers.Conv2D(filters=64, kernel_size=(5, 5),  strides=(1, 1), padding='same',\n                name='conv_2', activation='relu'),\n  layers.MaxPooling2D(pool_size=(2, 2), name='pool_2'),\n  layers.Flatten(),\n  layers.Dense(units=1024, name='fc_1', activation='relu'),\n  layers.Dropout(0.5),\n  layers.Dense(units=10, name='fc_2',activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),\n              metrics=['accuracy'])","337aade2":"history = model.fit(train_tenzor,validation_data=test_tensor, epochs = 15)","9b2aeec5":"hist = history.history\nfig, ax = plt.subplots(figsize = (15,8))    # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u043a\u043d\u0430 \u0438 \u043e\u0441\u0435\u0439 \u0434\u043b\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u0430\nax.grid(True)\nax = fig.add_subplot(1, 2, 1)\nax.plot(hist['loss'], lw=2)\nax.set_title('Training loss', size=15)\nax.set_xlabel('Epoch', size=15)\nax.tick_params(axis='both', which='major', labelsize=15)\nax = fig.add_subplot(1, 2, 2)\nax.plot(hist['accuracy'], lw=2)\nax.set_title('Training accuracy', size=15)\nax.set_xlabel('Epoch', size=15)\nax.tick_params(axis='both', which='major', labelsize=15)\nplt.tight_layout()\nplt.show()","5f7dc32d":"mnist_test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nmnist_test = mnist_test.to_numpy()\nmnist_test = [np.reshape(x, (28,28)) for x in mnist_test]\nmnist_test = tf.data.Dataset.from_tensor_slices(mnist_test)\nmnist_test = mnist_test.batch(32)\nmnist_test","47a85778":"prediction = model.predict(mnist_test)","92954507":"batch_im = next(iter(mnist_test))\nfig = plt.figure(figsize = (15,8))\nfor i, image in enumerate(batch_im[:20]):\n    ax = fig.add_subplot(4, 5, i+1)\n    ax.set_title(f'prediction = {np.argmax(prediction[i])}')\n    ax.set_xticks([]); ax.set_yticks([])\n    ax.imshow(np.uint8(image))\nplt.show()","b5ad0cee":"labels = [np.argmax(x) for x in prediction]\nImageId = [x+1 for x in range(len(prediction))]\n\nsubmission = pd.DataFrame({'ImageId': ImageId,\n                          'Label' : labels}, index = None)\nsubmission","674a6538":"submission.to_csv('submission.csv', index=False)","90f3cd88":"## Train simple CNN model with two dense layers","30be9cae":"## Reshape data 28x28 and plot pictures","23a8f343":"## Load test data","cdc1476e":"## Now each picture in data looks as follow","93952674":"## Predict class of the pitcures","ccc2e4a3":"## Training loss and accuracy graphs","5997546b":"## Subplots with first 20 pictures and its prediction"}}