{"cell_type":{"39bcf461":"code","b987999f":"code","b9bcca9a":"code","33eb95d5":"code","60539969":"code","4383f0dd":"code","d96f7e14":"code","8507dc19":"code","372b49c0":"code","33015a3e":"code","017feb7b":"code","fdc5b890":"markdown","c7d0908f":"markdown","42cf3c6d":"markdown","dcc63ad3":"markdown","3fa624a3":"markdown","5e56a14e":"markdown","f939749d":"markdown","3121c9c3":"markdown","85b13fea":"markdown","dbd077cd":"markdown"},"source":{"39bcf461":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport re\nimport statistics","b987999f":"pd.set_option('display.max_rows', None, 'display.max_columns', None)\n\ndata = pd.read_csv('\/kaggle\/input\/nba2k20-player-dataset\/nba2k20-full.csv')\ndata.info()","b9bcca9a":"data.head()","33eb95d5":"plt.rcParams['figure.figsize'] = [9, 7]\nplt.rcParams['figure.dpi'] = 100","60539969":"labels = [key for key in data.team.value_counts(dropna=False).keys()]\nvalues = [value for value in data.team.value_counts(dropna=False).values]\n\nx = np.arange(len(labels))\nfig, ax = plt.subplots()\nrects = ax.barh(x, values)\n\n\nax.set_xlabel('Number of represented players')\nax.set_ylabel('Team')\nax.set_yticks(ticks=x)\nax.set_yticklabels(labels)\nax.set_title('Number of represented players by team')\nplt.show()","4383f0dd":"rating_values_count = len(data.rating.value_counts())\nprint('Average rating value: {}'.format(round(data.rating.mean(), 2)))\n\nplt.hist(data.rating, bins=rating_values_count)\nplt.xlabel('Rating')\nplt.ylabel('Frequency')\nplt.title('Rating histogram')\nplt.show()","d96f7e14":"def drop_non_numeric(value):\n    return re.sub('[^0-9]', '', value)\ndata.salary = data.salary.apply(lambda x: drop_non_numeric(x)).astype(int)","8507dc19":"def autolabel(rects):\n    \n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n        \n\nrating_values = data.rating.unique()\nsalary = []\nfor rating in rating_values:\n    avg_salary = int(round(data.loc[data.rating == rating].salary.mean()))\n    salary.append(round(avg_salary \/ 1000000, 1))\n\nsalary_range = np.arange(0, max(salary), 5)\nticks_labels = ['$' + str(value) + 'M' for value in salary_range]\nx = np.arange(10)\n\nfig, ax = plt.subplots()\nrects = ax.bar(rating_values, salary)\n\n\nax.set_xlabel('Rating')\nax.set_ylabel('Average Salary ($M)')\nax.set_yticks(salary_range)\nax.set_yticklabels(ticks_labels)\nax.set_xticks(ticks=rating_values)\nax.set_title(\"Average salary by player's rating\")\n\nautolabel(rects)\n\nfig.tight_layout()\nplt.show()","372b49c0":"team_salary = {}\nfor team in data.team.value_counts().keys():\n    team_salary_avg = round(data.loc[data.team == team].salary.mean() \/ 1000000, 2)\n    team_salary_max = round(data.loc[data.team == team].salary.max() \/ 1000000, 2)\n    team_salary[team] = [team_salary_avg, team_salary_max]\n\nsorted_team_salary = {k: v for k, v in sorted(team_salary.items(), key=lambda x: x[1][0])}\n\nlowest_avg_salary_team = [key for key in sorted_team_salary.keys()][0:5]\nlowest_avg_salary = [value[0] for value in sorted_team_salary.values()][0:5]\nlowest_max_salary = [value[1] for value in sorted_team_salary.values()][0:5]\n\nhighest_avg_salary_team = [key for key in sorted_team_salary.keys()][-5:]\nhighest_avg_salary = [value[0] for value in sorted_team_salary.values()][-5:]\nhighest_max_salary = [value[1] for value in sorted_team_salary.values()][-5:]\n\nx = np.arange(len(lowest_avg_salary_team))\nwidth = 0.35\n\n\ndef plot_dependencies(value1, value2, title, teams):\n    fig, ax = plt.subplots()\n    rects1 = ax.barh(x - width\/2, value1, width, label='Average salary ($M)')\n    rects2 = ax.barh(x + width\/2, value2, width, label='Maximum salary ($M)')\n\n    ax.set_xlabel('Salary')\n    ax.set_ylabel('Team')\n    ax.set_title('{}'.format(title))\n    ax.set_yticks(ticks=x)\n    ax.set_yticklabels(teams)\n    ax.legend()\n\n\n    def autolabel(rects):\n            for rect in rects:\n                width = rect.get_width()\n                ax.annotate('${}M'.format(width),\n                        xy=(0.95*rect.get_width(), rect.get_y()+0.5*rect.get_height()),\n                        xytext=(1, 0),\n                        textcoords=\"offset points\",\n                        ha='right', va='center')\n\n\n    autolabel(rects1)\n    autolabel(rects2)\n    plt.show()\n    \n\ntitle1 = 'Lowest average\/maximum salary by team'\nplot_dependencies(lowest_avg_salary, lowest_max_salary, title1, lowest_avg_salary_team)\n\ntitle2 = 'Highest average\/maximum salary by team'\nplot_dependencies(highest_avg_salary, highest_max_salary, title2, highest_avg_salary_team)","33015a3e":"positions = data.position.unique()\npositions = positions[positions != '-']\nsalary_position = {}\n\nfor position in positions:\n    avg_salary = round(data.loc[data.position == position].salary.mean() \/ 1000000, 2)\n    max_salary = round(data.loc[data.position == position].salary.max() \/ 1000000, 2)\n    salary_position[position] = [avg_salary, max_salary]\n\nsorted_salary_position = {k: v for k, v in sorted(salary_position.items(), key=lambda x: x[1][0])}\n\npositions = [key for key in sorted_salary_position.keys()]\navg_salary = [value[0] for value in sorted_salary_position.values()]\nmax_salary = [value[1] for value in sorted_salary_position.values()]\n\nx = np.arange(len(positions))\nwidth = 0.35\n\ntitle = \"Player's salary by position\"\nplot_dependencies(avg_salary, max_salary, title, positions)","017feb7b":"teams = data.team.value_counts().keys()\n\nteam_rating = {}\nfor team in teams:\n    rating_variance = round(statistics.variance(data.loc[data.team == team].rating), 2)\n    team_rating[team] = rating_variance\n    \n\nsorted_team_rating = {k: v for k, v in sorted(team_rating.items(), key=lambda x: x[1])}\n\nlabels = [key for key in sorted_team_rating.keys()]\nvalues = [value for value in sorted_team_rating.values()]\n\ny = np.arange(len(labels))\n\nfig, ax = plt.subplots()\nrects = ax.barh(y, values)\n\ndef autolabel(rects):\n    for rect in rects:\n        width = rect.get_width()\n        ax.annotate('{}'.format(width),\n                    xy=(0.95*rect.get_width(), rect.get_y()+0.5*rect.get_height()),\n                    xytext=(1, 0),\n                    textcoords=\"offset points\",\n                    ha='right', va='center')\n\n\nax.set_xlabel('Variance value')\nax.set_ylabel('Team')\nax.set_yticks(ticks=y)\nax.set_yticklabels(labels)\nax.set_title(\"Variance of players rating by team\")\nautolabel(rects)\nplt.show()","fdc5b890":"*The choice of position is yours \ud83d\ude0f*","c7d0908f":"# Take a look at average and maximum salary by team:","42cf3c6d":"# Let's see player's salary by position:","dcc63ad3":"# Get basic data overview:","3fa624a3":"**Drop non-numeric objects from 'Salary' column:**","5e56a14e":"# LET'S PLAY BASKETBALL \ud83c\udfc0 \ud83c\udfc0 \ud83c\udfc0","f939749d":"# Check how teams are balanced with players rating.\n**In this section I calculate variance of players rating by team. Notice that a large variance indicates that rating values are spread out; a small variance indicates it is clustered closely around the average rating value.**","3121c9c3":"# Get average salary by player's rating:","85b13fea":"# Check rating histogram and average rating value:","dbd077cd":"# Have a look at number of represented players by team:"}}