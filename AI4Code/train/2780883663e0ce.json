{"cell_type":{"e674cb54":"code","110b7f1b":"code","f1d2f5a7":"code","9b96c421":"code","506921fd":"code","15a6566d":"code","3e065cd9":"code","8f607f99":"code","7be35c53":"code","100bf1d4":"code","14deb684":"code","d919afd9":"code","3d8189bb":"code","7d4b5311":"code","42d3270d":"code","400e00a8":"code","80fdbe45":"code","fff8bb15":"code","03b037be":"code","1ad78e3b":"code","58103d9e":"code","159789c2":"code","6526ff50":"code","6c32105c":"code","1e96a1d7":"markdown","dcd392c9":"markdown","48812eaf":"markdown","d02386d6":"markdown","9bf999b2":"markdown","b37e3667":"markdown","0698c171":"markdown","d0e730b3":"markdown","58c269ba":"markdown","33ba8d1f":"markdown","ee5015fe":"markdown","2a3d1510":"markdown","3196230d":"markdown","7ef11e1f":"markdown","6c5a798a":"markdown","d170e140":"markdown","b1be8359":"markdown"},"source":{"e674cb54":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","110b7f1b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, BatchNormalization\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import RMSprop","f1d2f5a7":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","9b96c421":"train.columns","506921fd":"print(train.shape)\ntrain.head()","15a6566d":"print(test.shape)\ntest.head()","3e065cd9":"y_train = train[\"label\"].astype('float32')\nx_train = train.drop(labels = [\"label\"],axis = 1).astype('float32')\n\ny_train.value_counts()","8f607f99":"x_train.shape, y_train.shape","7be35c53":"x_train.isnull().any().describe()","100bf1d4":"test.isnull().any().describe()","14deb684":"x_train = x_train \/ 255.0\ntest = test \/ 255.0","d919afd9":"#Reshaping the data for 2D CNN input into (-1,28,28,1) size\nx_train = np.array(x_train).reshape(-1,28,28,1)\ntest = np.array(test).reshape(-1,28,28,1)\nprint(x_train.shape)\nprint(test.shape)","3d8189bb":"# Some examples\ng = plt.imshow(x_train[8][:,:,0])\nprint(y_train[8])","7d4b5311":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\ny_train = keras.utils.to_categorical(y_train, 10)","42d3270d":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","400e00a8":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","80fdbe45":"model.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","fff8bb15":"model.summary()","03b037be":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(x_train)","1ad78e3b":"model.fit_generator(datagen.flow(x_train,y_train, batch_size = 86),epochs = 30, steps_per_epoch = x_train.shape[0]\/\/64)\n                            ","58103d9e":"pred = model.predict(test)\n\n# Convert predictions classes to one hot vectors \nfinal_pred = np.argmax(pred,axis = 1) ","159789c2":"final_pred","6526ff50":"sample_sub = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","6c32105c":"sample_sub = pd.DataFrame({\"ImageId\": list(range(1,len(final_pred)+1)),\n                         \"Label\": final_pred})\nsample_sub.to_csv('CNN_submission1.csv', index=False)\nsample_sub.head()","1e96a1d7":"# CNN Model","dcd392c9":"Compile Model","48812eaf":"We can divide each pixel with 255.0 to get NORMALIZATION","d02386d6":"# Label Encoding","9bf999b2":"# Importing Library","b37e3667":"\nThere is no missing values in the train and test dataset. So we can safely go ahead.","0698c171":"Keeping dependent variable in y_train and independent variable in x_train","d0e730b3":"Data Augmentation","58c269ba":"Prediction based on test data.","33ba8d1f":"Input data are in 1-D, we re- shape into 3-D matrix. \nFor RGB images, there is 3 channels, we would have reshaped 784px vectors to 28x28x3 3D matrices.\nFor Black and White image we re-shape into 28x28x1","ee5015fe":"Getting the summary of Model","2a3d1510":"# Missing Value","3196230d":"# Normalization","7ef11e1f":"# Reshaping","6c5a798a":"# Load Data","d170e140":"Fit the Model","b1be8359":"Forming Model"}}