{"cell_type":{"838b33ca":"code","1613c44b":"code","b61f4843":"code","eda7f382":"code","41cbdf37":"code","a9a13b3d":"code","069137e9":"code","a39a5943":"code","eae054ad":"code","03bd3d0b":"code","1941d1a8":"code","2161f795":"code","6acad0ef":"code","fb6afd22":"code","5b0d5149":"code","0c537a9b":"code","aacd8772":"code","909ec6aa":"code","952646d9":"code","cf644ec3":"code","1a944faa":"markdown","c0800b8b":"markdown","727ca2e7":"markdown","f506c35d":"markdown","98c87f39":"markdown","a4862b06":"markdown","75bb3122":"markdown","0907a6b6":"markdown","bc88577c":"markdown","1b8f5d12":"markdown","a7d22c65":"markdown"},"source":{"838b33ca":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.pipeline import Pipeline\n\n# Algorithms\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport warnings\nwarnings.filterwarnings('ignore')","1613c44b":"raw_data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","b61f4843":"raw_data.head()","eda7f382":"raw_data.tail()","41cbdf37":"raw_data.isna().sum()","a9a13b3d":"raw_data.shape","069137e9":"raw_data.describe()","a39a5943":"sns.histplot(raw_data['target'])\nplt.xticks([0,1])\nplt.show()","eae054ad":"raw_data['target'].value_counts()","03bd3d0b":"raw_data.dtypes","1941d1a8":"corr = raw_data.corr()\nsns.heatmap(corr)\nplt.show()","2161f795":"data_with_dummies = pd.get_dummies(data=raw_data, columns=['sex','cp','fbs','restecg','exang','slope','ca','thal'])","6acad0ef":"x = data_with_dummies.drop('target', axis=1)\ny = data_with_dummies['target']","fb6afd22":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2)","5b0d5149":"X_train.shape","0c537a9b":"pipelines = []\n\npipelines.append(\n    ('ScaledLR', Pipeline([('Scaler', StandardScaler()),('LR', LogisticRegression())]))\n)\npipelines.append(\n    ('ScaledLDA', Pipeline([('Scaler', StandardScaler()),('LDA', LinearDiscriminantAnalysis())]))\n)\npipelines.append(\n    ('ScaledKNN', Pipeline([('Scaler', StandardScaler()),('KNN', KNeighborsClassifier())]))\n)\npipelines.append(\n    ('ScaledCART', Pipeline([('Scaler', StandardScaler()),('CART', DecisionTreeClassifier())]))\n)\npipelines.append(\n    ('ScaledNB', Pipeline([('Scaler', StandardScaler()),('NB', GaussianNB())]))\n)\n\npipelines.append(\n    ('ScaledSVM', Pipeline([('Scaler', StandardScaler()), ('SVM', SVC())]))\n)\n","aacd8772":"n_splits = 10\nseed = 7\nresults = []\nnames = []\n\nfor name, model in pipelines:\n    kfold = KFold(n_splits=n_splits, random_state=7, shuffle=True)\n    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy')\n    \n    results.append(cv_results)\n    names.append(name)\n    \n    msg = f'Resultado: {name} - {cv_results.mean()} - {cv_results.std()}'\n    print(msg)","909ec6aa":"fig = plt.figure()\nfig.suptitle('Scaled Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","952646d9":"x = data_with_dummies.drop('target', axis=1)\ny = data_with_dummies['target']\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2)\n\n\nscaler = StandardScaler().fit(X_train)\nX_train_scaled = scaler.transform(X_train)\n\nmodel = KNeighborsClassifier()\n\nn_neighbors = [i for i in range(0,(X_train.shape[0] - 30),5)]\nparam_grid = dict(n_neighbors=n_neighbors)\n\nkfold = KFold(n_splits=n_splits, random_state=seed, shuffle=True)\n\n# model.get_params().keys()\ngrid = GridSearchCV(estimator=model, param_grid=param_grid, scoring='accuracy', cv=kfold)\ngrid_result = grid.fit(X_train_scaled, y_train)\n\nbest_n_neighbors = grid_result.best_params_['n_neighbors']\n\nprint('Mean Accuracy: %.3f' % grid_result.best_score_)\nprint('Config: %s' % grid_result.best_params_)","cf644ec3":"x = data_with_dummies.drop('target', axis=1)\ny = data_with_dummies['target']\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=3)\n\n\nscaler = StandardScaler().fit(X_train)\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\nmodel = KNeighborsClassifier(n_neighbors=best_n_neighbors)\nkfold = KFold(n_splits=n_splits, random_state=seed, shuffle=True)\n\nmodel.fit(X_train_scaled, y_train)\n\naccuracy = model.score(X_test_scaled, y_test)\nprint(f\"The accuracy of the model is {accuracy}\")\n\ny_pred = model.predict(X_test_scaled)\nconf_matrix = confusion_matrix(y_pred,y_test)","1a944faa":"Dataset information\n- age\n- sex\n- chest pain type (4 values)\n- resting blood pressure\n- serum cholestoral in mg\/dl\n- fasting blood sugar > 120 mg\/dl\n- resting electrocardiographic results (values 0,1,2)\n- maximum heart rate achieved\n- exercise induced angina\n- oldpeak = ST depression induced by exercise relative to rest\n- the slope of the peak exercise ST segment\n- number of major vessels (0-3) colored by flourosopy\n- thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n\nThe \"target\" field refers to the presence of heart disease in the patient. It is integer valued from 0 (no presence) to 4.","c0800b8b":"# Heart Disease UCI\n\nhttps:\/\/archive.ics.uci.edu\/ml\/datasets\/Heart+Disease","727ca2e7":"### Importing libraries","f506c35d":"### Exploratory Data Analysis (EDA)","98c87f39":"#### Training and testing data","a4862b06":"#### Dealing with categorical variables","75bb3122":"It look's like it is a balanced dataset","0907a6b6":"### Importing Dataset","bc88577c":"## Define Final Model","1b8f5d12":"### Scale columns","a7d22c65":"### Tuning and GridSearch KNN for better results"}}