{"cell_type":{"75ddd618":"code","18bb7cfc":"code","531e64cb":"code","cd6ba959":"code","f3750d66":"code","fbf1c5e4":"code","9f96cbd2":"code","1f3d167d":"code","8ca40bf2":"code","7f32f702":"code","8556a066":"code","20ed1bfa":"code","ad79c1b0":"code","fc3fa970":"code","30a7bb5d":"code","b5dce9f9":"code","48be72ac":"code","94c501f3":"code","288a54d3":"code","bcb07533":"code","d0b2121b":"code","26dd5e35":"code","7c3eafa2":"code","23a3b477":"code","f049f4ed":"code","b43b470d":"code","c2518321":"code","e4e416a0":"code","2b2bbd6c":"code","d87d82f3":"code","3c265570":"code","ecd709e4":"code","4ba6d3e0":"code","9523b723":"code","92f1383b":"code","3add347e":"code","8143ada7":"code","2298f41c":"code","041ea1c1":"code","3798f498":"code","5fbd9a55":"code","4750eb3a":"code","c01ae700":"code","68095680":"code","69cee500":"code","9fa2f5a0":"code","81fc7552":"code","54d34af4":"code","f668198c":"code","c843c7f1":"code","328d0617":"code","4ebc4278":"code","dec31ad6":"code","0049ac91":"code","b2adf6a7":"code","2539a376":"code","1f518e19":"code","a2037189":"code","b1e2b064":"code","78ac4283":"code","1bdc3875":"code","343936d4":"code","d48175cc":"code","c3860aa8":"markdown","7c15da27":"markdown","4aaccd59":"markdown","26fb6cd6":"markdown","f14bfdb3":"markdown","bee2916e":"markdown","c80a1c62":"markdown","123ade3d":"markdown","58cafec3":"markdown","86367d66":"markdown","30ba371f":"markdown","33705737":"markdown","1c78c7c7":"markdown","8849d1b1":"markdown","f920992c":"markdown"},"source":{"75ddd618":"#importing Libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib\nfrom matplotlib import cm\nimport geopandas as gpd\nimport plotly.express as px\nimport seaborn as sns\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)    #THIS LINE IS MOST IMPORTANT AS THIS WILL DISPLAY PLOT ON \n#NOTEBOOK WHILE KERNEL IS RUNNING\nimport plotly.graph_objects as go\n\nfrom IPython.display import HTML,display\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","18bb7cfc":"\n#importing main dataset \ndf = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv', parse_dates=['Date'], dayfirst=True)\n\n#importing tests dataset\ntests = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv' )\n#keeping only required columns\ndf = df[['Date', 'State\/UnionTerritory','Cured','Deaths','Confirmed']]\n#renaming column names\ndf.columns = ['date', 'state','cured','deaths','confirmed']\n\ndf.tail()","531e64cb":"#current date\ntoday = df[df.date == '2020-09-24']","cd6ba959":"gdf = gpd.read_file('..\/input\/india-states\/Igismap\/Indian_States.shp')\n#renaming state names\ngdf['st_nm'].replace({\"Andaman & Nicobar Island\": \"Andaman and Nicobar Islands\",\n                      \"Arunanchal Pradesh\": \"Arunachal Pradesh\",\n                      'Dadara & Nagar Havelli':'Dadra and Nagar Haveli and Daman and Diu',\n                      'Jammu & Kashmir':'Jammu and Kashmir',\n                      'NCT of Delhi':'Delhi',\n                      'Telangana': 'Telengana'\n                     }, inplace=True)\nmerged = gdf.merge(today ,  left_on='st_nm', right_on='state')\nmerged.state.replace({\"Andaman and Nicobar Islands\" : \"A & N\",\n                      'Dadra and Nagar Haveli and Daman and Diu' : 'Daman & Diu',\n                      'Jammu and Kashmir' : 'J & K'\n                      }, inplace=True)\n","f3750d66":"merged['coords'] = merged['geometry'].apply(lambda x: x.representative_point().coords[:])\nmerged['coords'] = [coords[0] for coords in merged['coords']]\n\n\nsns.set_context(\"talk\")\nsns.set_style(\"dark\")\n#plt.style.use('fivethirtyeight')\ncmap = 'YlGn'\nfigsize = (25, 20)\nax = merged.plot(column= 'confirmed', cmap=cmap, \n                          figsize=figsize, scheme='User_Defined',\n                          classification_kwds=dict(bins=[100,1000,10000,50000,100000,200000,1000000]),\n                          edgecolor='black', legend = True)\n\nfor idx, row in merged.iterrows():\n   ax.text(row.coords[0], row.coords[1], s=row['confirmed'], \n           horizontalalignment='center', bbox={'facecolor': 'yellow', \n                                               'alpha':0.8, 'pad': 5, 'edgecolor':'blue'})\n\nax.get_legend().set_bbox_to_anchor((0.66,0.9))\nax.get_legend().set_title('Number of cases')\nax.set_title(\"Confirmed Cases of Covid - 19 \", size = 25)\nleg = ax.get_legend()\nfor lbl in leg.get_texts():\n    label_text = lbl.get_text()\n    lower = label_text.split()[0]\n    upper = label_text.split()[2]\n    new_text = f'{float(lower):,.0f} - {float(upper):,.0f}'\n    lbl.set_text(new_text)\n\n\n#a = ax.text(65, 35, 'Total Cases \\n 529,577',\n           # fontsize=25,\n           # )\n\n\nax.set_axis_off()\nplt.axis('equal')\nplt.show()","fbf1c5e4":"\nsns.set_context(\"talk\")\nsns.set_style(\"dark\")\n#plt.style.use('fivethirtyeight')\ncmap = 'OrRd'\nfigsize = (25, 20)\nax = merged.dropna().plot(column= 'deaths', cmap=cmap, \n                          figsize=figsize, scheme='User_Defined',\n                          classification_kwds=dict(bins=[10,50,100,500,1000,2000,4000,8000]),\n                          edgecolor='black', legend = True)\n\nfor idx, row in merged.iterrows():\n   ax.text(row.coords[0], row.coords[1], s=row['deaths'], \n           horizontalalignment='center', bbox={'facecolor': 'yellow', \n                                               'alpha':0.8, 'pad': 2, 'edgecolor':'black'})\n\nax.get_legend().set_bbox_to_anchor((0.66,0.9))\nax.get_legend().set_title('Number of deaths')\nax.set_title(\"Deaths due to Covid -19 \", size = 25)\nleg = ax.get_legend()\nfor lbl in leg.get_texts():\n    label_text = lbl.get_text()\n    lower = label_text.split()[0]\n    upper = label_text.split()[2]\n    new_text = f'{float(lower):,.0f} - {float(upper):,.0f}'\n    lbl.set_text(new_text)\n#a = ax.text(65, 35, 'Total Deaths \\n 16,103',\n            #fontsize=25,\n            #)\nax.set_axis_off()\nplt.axis('equal')\nplt.show()","9f96cbd2":"\n\n\nsns.set_context(\"talk\")\nsns.set_style(\"dark\")\n#plt.style.use('fivethirtyeight')\ncmap = 'Blues'\nfigsize = (25, 20)\nax = merged.dropna().plot(column= 'cured', cmap=cmap, \n                          figsize=figsize, scheme='User_Defined',\n                          classification_kwds=dict(bins=[100,1000,10000,50000,100000]),\n                          edgecolor='black', legend = True)\n\nfor idx, row in merged.iterrows():\n   ax.text(row.coords[0], row.coords[1], s=row['cured'], \n           horizontalalignment='center', bbox={'facecolor': 'yellow', \n                                               'alpha':0.8, 'pad': 2, 'edgecolor':'black'})\n\nax.get_legend().set_bbox_to_anchor((0.66,0.9))\nax.get_legend().set_title('Number of Recovered')\nax.set_title(\"Recovered Cases of Covid-19\", size = 25)\nleg = ax.get_legend()\nfor lbl in leg.get_texts():\n    label_text = lbl.get_text()\n    lower = label_text.split()[0]\n    upper = label_text.split()[2]\n    new_text = f'{float(lower):,.0f} - {float(upper):,.0f}'\n    lbl.set_text(new_text)\n\n#a = ax.text(65, 35, 'Total Recovered \\n 310,146',\n           # fontsize=25,\n            #)\nax.set_axis_off()\nplt.axis('equal')\nplt.show()","1f3d167d":"merged['dcratio'] = merged['deaths'] \/ merged['confirmed'] * 100\nmerged.dcratio = merged.dcratio.round(2)\n\n\n\nsns.set_context(\"talk\")\nsns.set_style(\"dark\")\n#plt.style.use('fivethirtyeight')\ncmap = 'OrRd'\nfigsize = (25, 20)\nax = merged.dropna().plot(column= 'dcratio', cmap=cmap, \n                          figsize=figsize, scheme='User_Defined',\n                          classification_kwds=dict(bins=[0.1 , 0.2 , 0.4 , 0.8 , 1.6 , 3.2 , 6.4]),\n                          \n                          edgecolor='black', legend = True)\n\nfor idx, row in merged.iterrows():\n   ax.text(row.coords[0], row.coords[1], s=row['dcratio'], \n           horizontalalignment='center', bbox={'facecolor': 'azure', \n                                               'alpha':0.8, 'pad': 2, 'edgecolor':'black'})\n\nax.get_legend().set_bbox_to_anchor((0.66,0.9))\nax.get_legend().set_title('Percentage')\nax.set_title(\"Fatality Rate Per State\", size = 25)\n\n#a = ax.text(61, 35, 'Total Death\/Confirmed \\n percentage \\n 3.05',\n           # fontsize=25,\n           # )\nax.set_axis_off()\nplt.axis('equal')\nplt.show()","8ca40bf2":"confirmed = merged.sort_values('confirmed', ascending = True)\n\nlowc = confirmed.head(10)\nhighc = confirmed.tail(10)\n\n\nfig = px.bar(confirmed, x=\"confirmed\", y=\"state\", orientation='h', text = 'confirmed')\nfig.update_layout(\n    title_text='<b>Confirmed cases of Covid-19 per State <b>',\n    title_x=0.5,\n    paper_bgcolor='aqua',\n    plot_bgcolor = \"aqua\",\n    autosize=False,\n    width= 850,\n    height=850)\nfig.update_traces(marker_color='teal')\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.show()","7f32f702":"deaths = merged.sort_values('deaths', ascending = True)\ndeaths = deaths[deaths.deaths > 0 ]\nlowd = deaths.head(10)\nhighd = deaths.tail(10)\nfig = px.bar(deaths, x=\"deaths\", y=\"state\", orientation='h', text = 'deaths')\nfig.update_layout(\n    title_text='<b>Deaths due to covid 19<b>',\n    title_x=0.5,\n    paper_bgcolor='rgb(255,223,0)',\n    plot_bgcolor = \"rgb(255,223,0)\",\n    autosize=False,\n    width=850,\n    height= 850)\nfig.update_traces(marker_color='red')\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='darkblue', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='darkblue', size=14))\nfig.show()","8556a066":"recovered = merged.sort_values('cured', ascending = True)\nhighr = recovered.head(10)\nlowr = recovered.tail(10)\n\nfig = px.bar(recovered, x=\"cured\", y=\"state\", orientation='h', text = 'cured')\nfig.update_layout(\n    title_text='<b> Recovered cases of covid 19 per State<b>',\n    title_x=0.5,\n    paper_bgcolor='aquamarine',\n    plot_bgcolor = \"aquamarine\",\n    autosize=False,\n    width= 850,\n    height= 850)\nfig.update_traces(marker_color='blue')\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.show()","20ed1bfa":"merged = merged[merged.dcratio > 0.0]\nmerged = merged.sort_values('dcratio', ascending = True)\nfig = px.bar(merged, x=\"dcratio\", y=\"state\", orientation='h', text = 'dcratio')\nfig.update_layout(\n    title_text='<b>Fatality Rate per State<b>',\n    title_x=0.5,\n    paper_bgcolor='blanchedalmond',\n    plot_bgcolor = \"blanchedalmond\",\n    autosize=False,\n    width= 850,\n    height= 850)\nfig.update_traces(marker_color='darkred')\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.show()","ad79c1b0":"df2 = df.groupby(['date'])['confirmed', 'deaths','cured',].sum().reset_index()","fc3fa970":"#making columns for daily new cases\ndf2['new_confirmed'] = df2.confirmed.diff()\ndf2['new_deaths'] = df2.deaths.diff()\ndf2['new_cured'] = df2.cured.diff()\n\n\n#taking dates from 15th March\ndf2 = df2.iloc[44:]","30a7bb5d":"#dropping null \n#df2 = df2.dropna()\n\n#changing float to int\n#columns = ['new_confirmed' , 'new_deaths' , 'new_cured']\n\n#for i , c in enumerate(columns):\n    #df2[c] = df2[c].astype(int)","b5dce9f9":"\n\n\nfig = go.Figure(go.Bar(x= df2.date, y= df2.cured, name='Recovered'))\nfig.add_trace(go.Bar(x=df2.date, y= df2.deaths, name='Deaths'))\nfig.add_trace(go.Bar(x=df2.date, y= df2.confirmed, name='Confirmed'))\n\nfig.update_layout(barmode='stack',legend_orientation=\"h\",legend=dict(x= 0.3, y=1.1),\n                  xaxis={'categoryorder':'total descending'},\n                 title_text='<b>Covid 19 Total cases in India (since 15 March)<b>',\n                  title_x=0.5,\n                 paper_bgcolor='whitesmoke',\n                 plot_bgcolor = \"whitesmoke\",)\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.show()","48be72ac":"\n\n\nfig = go.Figure(go.Bar(x= df2.date, y= df2.new_cured, name='Daily Recovered'))\nfig.add_trace(go.Bar(x=df2.date, y= df2.new_deaths, name='Daily Deaths'))\nfig.add_trace(go.Bar(x=df2.date, y= df2.new_confirmed, name='Daily Confirmed'))\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.add_annotation(\n            x= \"2020-04-03\",\n            y=23000,\n           text=\"<b>Lockdown 1<b>\",showarrow= False,font=dict(\n            family=\"Courier New, monospace\",\n            size=12,\n            color=\"teal\"\n            ),\n        align=\"center\",)\nfig.add_annotation(\n            x= \"2020-04-23\",\n            y=23000,\n            text=\"<b>Lockdown 2<b>\",showarrow= False,font=dict(\n            family=\"Courier New, monospace\",\n            size=12,\n            color=\"teal\"\n            ),\n        align=\"center\",)\nfig.add_annotation(\n            x=\"2020-05-10\",\n            y=23000,\n           text=\"<b>Lockdown 3<b>\",showarrow= False,font=dict(\n            family=\"Courier New, monospace\",\n            size=12,\n            color=\"teal\"\n            ),\n        align=\"center\",)\nfig.add_annotation(\n            x= \"2020-05-24\",\n            y=23000,\n            text=\"<b>Lockdown 4<b>\",showarrow= False,font=dict(\n            family=\"Courier New, monospace\",\n            size=12,\n            color=\"teal\"\n            ),\n        align=\"center\",)\n\nfig.update_layout(barmode='stack', \n                  xaxis={'categoryorder':'total descending'},\n                 title_text='<b>Daily Cases (since 15 March)<b>',\n                  title_x=0.5,legend_orientation=\"h\",legend=dict(x= 0.3, y=1.1),\n                 paper_bgcolor='whitesmoke',\n                 plot_bgcolor = \"whitesmoke\",\n                  shapes=[\n        \n        dict(\n            type=\"rect\",\n            # x-reference is assigned to the x-values\n            xref=\"x\",\n            # y-reference is assigned to the plot paper [0,1]\n            yref=\"paper\",\n            x0=\"2020-03-25\",\n            y0=0,\n            x1=\"2020-04-14\",\n            y1=1,\n            fillcolor=\"Lightgreen\",\n            opacity=0.3,\n            layer=\"below\",\n            line_width=2,\n        ),\n        \n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-04-15\",\n            y0=0,\n            x1=\"2020-05-03\",\n            y1=1,\n            fillcolor=\"Lightgreen\",\n            opacity=0.3,\n            layer=\"below\",\n            line_width=2,\n        ),\n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-05-04\",\n            y0=0,\n            x1=\"2020-05-17\",\n            y1=1,\n            fillcolor=\"Lightgreen\",\n            opacity=0.3,\n            layer=\"below\",\n            line_width=2,\n        ),\n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-05-18\",\n            y0=0,\n            x1=\"2020-05-31\",\n            y1=1,\n            fillcolor=\"Lightgreen\",\n            opacity=0.3,\n            layer=\"below\",\n            line_width=2,\n        )\n        \n        \n        \n    ]\n)\nfig.show()","94c501f3":"import plotly.graph_objects as go\n\n\nfig = go.Figure([go.Bar(x= df2.date, y= df2.new_confirmed,marker_color='teal')])\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\n\nfig.add_annotation(\n            x= \"2020-04-03\",\n            y=12500,\n           text=\"<b>Lockdown 1<b>\",showarrow= False,font=dict(\n            family=\"Courier New, monospace\",\n            size=12,\n            color=\"teal\"\n            ),\n        align=\"center\",)\nfig.add_annotation(\n            x= \"2020-04-23\",\n            y=12500,\n            text=\"<b>Lockdown 2<b>\",showarrow= False,font=dict(\n            family=\"Courier New, monospace\",\n            size=12,\n            color=\"teal\"\n            ),\n        align=\"center\",)\nfig.add_annotation(\n            x=\"2020-05-10\",\n            y=12500,\n           text=\"<b>Lockdown 3<b>\",showarrow= False,font=dict(\n            family=\"Courier New, monospace\",\n            size=12,\n            color=\"teal\"\n            ),\n        align=\"center\",)\nfig.add_annotation(\n            x= \"2020-05-24\",\n            y=12500,\n            text=\"<b>Lockdown 4<b>\",showarrow= False,font=dict(\n            family=\"Courier New, monospace\",\n            size=12,\n            color=\"teal\"\n            ),\n        align=\"center\",)\n\nfig.update_layout(\n    title_text='<b>Daily New Confirmed Cases <b>',\n                  title_x=0.5,\n                 paper_bgcolor='aqua',\n                 plot_bgcolor = \"aqua\",\n    shapes=[\n        \n        dict(\n            type=\"rect\",\n            # x-reference is assigned to the x-values\n            xref=\"x\",\n            # y-reference is assigned to the plot paper [0,1]\n            yref=\"paper\",\n            x0=\"2020-03-25\",\n            y0=0,\n            x1=\"2020-04-14\",\n            y1=1,\n            fillcolor=\"lightskyblue\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        ),\n        \n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-04-15\",\n            y0=0,\n            x1=\"2020-05-03\",\n            y1=1,\n            fillcolor=\"lightskyblue\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        ),\n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-05-04\",\n            y0=0,\n            x1=\"2020-05-17\",\n            y1=1,\n            fillcolor=\"lightskyblue\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        ),\n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-05-18\",\n            y0=0,\n            x1=\"2020-05-31\",\n            y1=1,\n            fillcolor=\"lightskyblue\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        )\n        \n        \n        \n    ]\n)\n\nfig.show()\n","288a54d3":"import plotly.graph_objects as go\n\n\nfig = go.Figure([go.Bar(x= df2.date, y= df2.new_deaths,marker_color='red')])\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\n\n\nfig.add_annotation(\n            x= \"2020-06-17\",\n            y= 2003,\n            text=\"<b>Highest (17 June,2003 Deaths)<b>\",showarrow= True,font=dict(\n            family=\"Courier New, monospace\",\n            size=15,\n            color=\"blue\"\n            ),\n        align=\"center\",)\n\nfig.update_layout(\n    title_text='<b>Daily New Deaths (since 15 March)<b>',\n                  title_x=0.5,\n                 paper_bgcolor='rgb(255,223,0)',\n                 plot_bgcolor = \"rgb(255,223,0)\",\n    shapes=[\n        \n        dict(\n            type=\"rect\",\n            # x-reference is assigned to the x-values\n            xref=\"x\",\n            # y-reference is assigned to the plot paper [0,1]\n            yref=\"paper\",\n            x0=\"2020-03-25\",\n            y0=0,\n            x1=\"2020-04-14\",\n            y1=1,\n            fillcolor=\"lightyellow\",\n            opacity=0.3,\n            layer=\"below\",\n            line_width=2,\n        ),\n        \n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-04-15\",\n            y0=0,\n            x1=\"2020-05-03\",\n            y1=1,\n            fillcolor=\"lightyellow\",\n            opacity=0.3,\n            layer=\"below\",\n            line_width=2,\n        ),\n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-05-04\",\n            y0=0,\n            x1=\"2020-05-17\",\n            y1=1,\n            fillcolor=\"lightyellow\",\n            opacity=0.3,\n            layer=\"below\",\n            line_width=2,\n        ),\n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-05-18\",\n            y0=0,\n            x1=\"2020-05-31\",\n            y1=1,\n            fillcolor=\"lightyellow\",\n            opacity=0.3,\n            layer=\"below\",\n            line_width=2,\n        )\n        \n        \n        \n    ]\n)\n\nfig.show()","bcb07533":"\n\n\nfig = go.Figure([go.Bar(x= df2.date, y= df2.new_cured,marker_color='blue')])\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\n\nfig.update_layout(\n    title_text='<b>Daily New Recovered Cases (since 15 March)<b>',\n                  title_x=0.5,\n                 paper_bgcolor='aquamarine',\n                 plot_bgcolor = \"aquamarine\",\n    shapes=[\n        \n        dict(\n            type=\"rect\",\n            # x-reference is assigned to the x-values\n            xref=\"x\",\n            # y-reference is assigned to the plot paper [0,1]\n            yref=\"paper\",\n            x0=\"2020-03-25\",\n            y0=0,\n            x1=\"2020-04-14\",\n            y1=1,\n            fillcolor=\"Lightgreen\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        ),\n        \n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-04-15\",\n            y0=0,\n            x1=\"2020-05-03\",\n            y1=1,\n            fillcolor=\"Lightgreen\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        ),\n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-05-04\",\n            y0=0,\n            x1=\"2020-05-17\",\n            y1=1,\n            fillcolor=\"Lightgreen\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        ),\n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-05-18\",\n            y0=0,\n            x1=\"2020-05-31\",\n            y1=1,\n            fillcolor=\"Lightgreen\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        )\n        \n        \n        \n    ]\n)\n\nfig.show()","d0b2121b":"\nstate = list(today.state)\ncases = list(today.confirmed)\n\nfig= go.Figure(go.Treemap(\n    \n    labels =  state,\n    parents=[\"\"]*len(state),\n    values =  cases,\n    textinfo = \"label+percent entry\"\n))\nfig.update_layout(\n    title_text= '<b>Distribution of Confirmed Cases in India<b>',\n    title_x=0.5,\n    paper_bgcolor='lightgoldenrodyellow',\n    plot_bgcolor = \"lightgoldenrodyellow\",\n    \n    )\n\nfig.show()","26dd5e35":"#Statewise new confirmed\ndf['new_confirmed'] = df.groupby(['state'])['confirmed'].diff()\ndf['new_deaths'] = df.groupby(['state'])['deaths'].diff()\ndf['new_cured'] = df.groupby(['state'])['cured'].diff()","7c3eafa2":"#df = df.dropna()\n#columns = ['new_confirmed' , 'new_deaths' , 'new_cured']\n\n#for i , c in enumerate(columns):\n    #df[c] = df[c].astype(int)","23a3b477":"import plotly.express as px\n\n\nfig = px.line(df, x=\"date\", y=\"confirmed\", color='state',template= \"plotly_white\")\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_traces(mode='lines + markers')\nfig.update_layout(legend_orientation=\"h\",legend=dict(x= -.1, y=-.3),\n                  autosize=False,\n                  width= 750,\n                  height= 850,\n                  title_text='<b>Confirmed Cases of Covid-19 in India<b> ',\n                  title_x=0.5,\n                 paper_bgcolor='snow',\n                 plot_bgcolor = \"snow\")\nfig.show()","f049f4ed":"\nstate = list(today.state)\ncases = list(today.deaths)\n\nfig= go.Figure(go.Treemap(\n    \n    labels =  state,\n    parents=[\"\"]*len(state),\n    values =  cases,\n    textinfo = \"label+percent entry\"\n))\nfig.update_layout(\n    title_text= '<b>Distribution of Deaths in India<b>',\n    title_x=0.5,\n    paper_bgcolor='lightgreen',\n    plot_bgcolor = \"lightgreen\",\n    \n    )\n\nfig.show()","b43b470d":"import plotly.express as px\n\n\nfig = px.line(df, x=\"date\", y=\"deaths\", color='state',template= \"plotly_white\")\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_traces(mode='lines + markers')\nfig.update_layout(legend_orientation=\"h\",legend=dict(x= -.1, y=-.2),\n                  autosize=False,\n                  width= 750,\n                  height= 850,\n                  title_text='<b>Deaths due to Covid-19 in India<b>',\n                  title_x=0.5,\n                 paper_bgcolor='snow',\n                 plot_bgcolor = \"snow\")\nfig.show()","c2518321":"\nstate = list(today.state)\ncases = list(today.cured)\n\nfig= go.Figure(go.Treemap(\n    \n    labels =  state,\n    parents=[\"\"]*len(state),\n    values =  cases,\n    textinfo = \"label+percent entry\"\n))\nfig.update_layout(\n    title_text= '<b>Distribution of Recovered cases in India<b>',\n    title_x=0.5,\n    paper_bgcolor='lightgreen',\n    plot_bgcolor = \"lightgreen\",\n    \n    )\n\nfig.show()","e4e416a0":"import plotly.express as px\n\n\nfig = px.line(df, x=\"date\", y=\"cured\", color='state',template= \"plotly_white\")\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_traces(mode='lines + markers')\nfig.update_layout(legend_orientation=\"h\",legend=dict(x= -.1, y=-.2),\n                  autosize=False,\n                  width= 750,\n                  height= 850,\n                  title_text='<b>Recovered cases of Covid-19 in India<b>',\n                  title_x=0.5,\n                 paper_bgcolor='snow',\n                 plot_bgcolor = \"snow\")\nfig.show()","2b2bbd6c":"highc = highc.sort_values('confirmed', ascending = False)\nfig = px.bar(highc, x=\"state\", y=\"confirmed\", text = 'confirmed')\nfig.update_layout(\n    title_text='<b>Cases in Worst Affeced States <b>',\n    title_x=0.5,\n    paper_bgcolor='aquamarine',\n    plot_bgcolor = \"aquamarine\",\n    )\nfig.update_traces(marker_color='blue')\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.show()","d87d82f3":"states = ['Maharashtra', 'Delhi', 'Tamil Nadu', 'Gujarat', 'Uttar Pradesh',\n       'Rajasthan', 'West Bengal', 'Madhya Pradesh', 'Haryana',\n       'Andhra Pradesh']\n\n\n\nhigha = df[df.state.isin(states)]","3c265570":"import plotly.express as px\n\n\nfig = px.line(higha, x=\"date\", y=\"confirmed\", color='state')\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_traces(mode='lines + markers')\nfig.update_layout(legend=dict(x= 0.07, y= 1),\n    title_text='<b>Confirmed Cases in Worst affected states<b>',\n                  title_x=0.5,\n                 paper_bgcolor='whitesmoke',\n                 plot_bgcolor = \"whitesmoke\")\nfig.show()","ecd709e4":"highd = highd.sort_values('deaths', ascending = False)\nfig = px.bar(highd, x=\"state\", y=\"deaths\", text = 'deaths')\nfig.update_layout(\n    title_text='<b> Deaths in  Worst Affeced States<b>',\n    title_x=0.5,\n    paper_bgcolor='aqua',\n    plot_bgcolor = \"aqua\",\n    )\nfig.update_traces(marker_color='red')\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.show()","4ba6d3e0":"\n\n\nfig = px.line(higha, x=\"date\", y=\"deaths\", color='state')\nfig.update_traces(mode='lines+markers')\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_layout(legend=dict(x= 0.07, y= 1),\n    title_text='<b>Deaths in Highly affected states<b> ',\n                  title_x=0.5,\n                 paper_bgcolor='whitesmoke',\n                 plot_bgcolor = \"whitesmoke\")\nfig.show()","9523b723":"df = df[df.new_confirmed > 0]\nimport plotly.express as px\n\n\nfig = px.line(higha, x=\"date\", y=\"new_confirmed\", color='state',template= \"plotly_white\")\nfig.update_traces(mode='lines +markers')\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_layout(legend=dict(x= 0.05, y= 1),\n    title_text='<b>Daily New Confirmed Cases of Covid-19<b> ',\n                  title_x=0.5,\n                 paper_bgcolor='whitesmoke',\n                 plot_bgcolor = \"whitesmoke\",\n    shapes=[\n        # 1st highlight during Feb 4 - Feb 6\n        dict(\n            type=\"rect\",\n            # x-reference is assigned to the x-values\n            xref=\"x\",\n            # y-reference is assigned to the plot paper [0,1]\n            yref=\"paper\",\n            x0=\"2020-03-25\",\n            y0=0,\n            x1=\"2020-04-14\",\n            y1=1,\n            fillcolor=\"lightskyblue\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        ),\n        # 2nd highlight during Feb 20 - Feb 23\n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-04-15\",\n            y0=0,\n            x1=\"2020-05-03\",\n            y1=1,\n            fillcolor=\"lightskyblue\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        ),\n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-05-04\",\n            y0=0,\n            x1=\"2020-05-17\",\n            y1=1,\n            fillcolor=\"lightskyblue\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        ),\n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-05-18\",\n            y0=0,\n            x1=\"2020-05-31\",\n            y1=1,\n            fillcolor=\"lightskyblue\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        )\n        \n        \n        \n    ]\n)\nfig.show()","92f1383b":"df = df[df.new_deaths > 0]\nimport plotly.express as px\n\n\nfig = px.line(higha, x=\"date\", y=\"new_deaths\", color='state',template= \"plotly_white\")\nfig.update_traces(mode='lines+markers')\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_layout(legend=dict(x= 0.05, y= 1),\n    title_text='<b>Daily New Deaths due to Covid-19<b>',\n                  title_x=0.5,\n                 \n    shapes=[\n        # 1st highlight during Feb 4 - Feb 6\n        dict(\n            type=\"rect\",\n            # x-reference is assigned to the x-values\n            xref=\"x\",\n            # y-reference is assigned to the plot paper [0,1]\n            yref=\"paper\",\n            x0=\"2020-03-25\",\n            y0=0,\n            x1=\"2020-04-14\",\n            y1=1,\n            fillcolor=\"lightskyblue\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        ),\n        # 2nd highlight during Feb 20 - Feb 23\n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-04-15\",\n            y0=0,\n            x1=\"2020-05-03\",\n            y1=1,\n            fillcolor=\"lightskyblue\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        ),\n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-05-04\",\n            y0=0,\n            x1=\"2020-05-17\",\n            y1=1,\n            fillcolor=\"lightskyblue\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        ),\n        dict(\n            type=\"rect\",\n            xref=\"x\",\n            yref=\"paper\",\n            x0=\"2020-05-18\",\n            y0=0,\n            x1=\"2020-05-31\",\n            y1=1,\n            fillcolor=\"lightskyblue\",\n            opacity=0.5,\n            layer=\"below\",\n            line_width=2,\n        )\n        \n        \n        \n    ]\n)\nfig.show()","3add347e":"higha = higha[higha.new_confirmed > 0]","8143ada7":"states1 = ['Maharashtra', 'Delhi']","2298f41c":"#dont delete this again!!!\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfig = make_subplots(rows = 1, cols = 2 , subplot_titles= ['<b>Maharashtra<b>' , '<b>Delhi<b>'] )\nfor i , state in enumerate(states1):\n    highan = higha[higha.state == state]\n    \n    \n    fig.add_trace(\n        go.Bar(x= highan.date, y= highan.new_confirmed, marker_color='blue',name= state),\n    row=(i \/\/ 2) + 1, col=((i % 2) + 1)\n        \n    )\n    fig.add_annotation(\n            xref='x1', \n            yref='y1',\n            x= \"2020-05-02\",\n            y= 12500,\n            text=\"Lockdown\",showarrow= False,font=dict(\n            family=\"Courier New, monospace\",\n            size=14,\n            color=\"blue\"\n            ),\n        align=\"center\",)\n    fig.add_annotation(\n            xref='x2', \n            yref='y2',\n            x= \"2020-05-02\",\n            y= 2200,\n            text=\"Lockdown\",showarrow= False,font=dict(\n            family=\"Courier New, monospace\",\n            size=14,\n            color=\"blue\"\n            ),\n        align=\"center\",)\n    fig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\n    fig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\n    fig.update_layout(\n                     showlegend=False,\n                     title_text='<b>Daily New Confirmed Cases<b>',\n                     title_x=0.5,\n                     paper_bgcolor='gold',\n                     plot_bgcolor = \"gold\",\n                     shapes=[dict(type=\"rect\",xref=\"x1\",yref=\"paper\",\n                                  x0=\"2020-03-25\",y0=0,x1=\"2020-05-31\",\n                                  y1=1,fillcolor=\"lightyellow\",opacity=0.5,\n                                  layer=\"below\",line_width=2 ),\n                             dict(type=\"rect\",xref=\"x2\",yref=\"paper\",\n                                  x0=\"2020-03-25\",y0=0,x1=\"2020-05-31\",\n                                  y1=1,fillcolor=\"lightyellow\",opacity=0.5,\n                                  layer=\"below\",line_width=2 ),\n                             \n                            ]\n                     )\n\nfig.show() ","041ea1c1":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfig = make_subplots(rows = 1, cols = 2 , subplot_titles= ['<b>Maharashtra<b>' , '<b>Delhi<b>'] )\nfor i , state in enumerate(states1):\n    highan = higha[higha.state == state]\n    \n    \n    fig.add_trace(\n        go.Bar(x= highan.date, y= highan.new_deaths, marker_color='red',name= state),\n    row=(i \/\/ 2) + 1, col=((i % 2) + 1)\n        \n    )\n    \n    fig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\n    fig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\n    fig.update_layout(showlegend=False,\n                     title_text='<b>Daily New Deaths <b>',\n                     title_x=0.5,\n                     paper_bgcolor='lightcyan',\n                     plot_bgcolor = \"lightcyan\",\n                     shapes=[dict(type=\"rect\",xref=\"x1\",yref=\"paper\",\n                                  x0=\"2020-03-25\",y0=0,x1=\"2020-05-31\",\n                                  y1=1,fillcolor=\"snow\",opacity=0.5,\n                                  layer=\"below\",line_width=2 ),\n                             dict(type=\"rect\",xref=\"x2\",yref=\"paper\",\n                                  x0=\"2020-03-25\",y0=0,x1=\"2020-05-31\",\n                                  y1=1,fillcolor=\"snow\",opacity=0.5,\n                                  layer=\"below\",line_width=2 ),\n                             \n                            ]\n                     )\n\nfig.show() ","3798f498":"states2 = ['Rajasthan', 'Uttar Pradesh', 'Haryana', 'Andhra Pradesh']","5fbd9a55":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfig = make_subplots(rows = 2, cols = 2 , subplot_titles=[\"<b>Rajasthan<b>\",\"<b>Uttar Pradesh<b>\",\"<b>Haryana<b>\",'<b>Andhra Pradesh<b>'] )\nfor i , state in enumerate(states2):\n    highan = higha[higha.state == state]\n    \n    \n    fig.add_trace(\n        go.Bar(x= highan.date, y= highan.new_confirmed, marker_color='blue',name= state),\n    row=(i \/\/ 2) + 1, col=((i % 2) + 1)\n        \n    )\n    fig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\n    fig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\n    fig.update_layout(showlegend=False,\n                     title_text='<b>Daily New Confirmed Cases<b>',\n                     title_x=0.5,\n                     paper_bgcolor='aqua',\n                     plot_bgcolor = \"aqua\",\n                     shapes=[dict(type=\"rect\",xref=\"x1\",yref=\"paper\",\n                                  x0=\"2020-03-25\",y0=0,x1=\"2020-05-31\",\n                                  y1=1,fillcolor=\"lightskyblue\",opacity=0.5,\n                                  layer=\"below\",line_width=2 ),\n                             dict(type=\"rect\",xref=\"x2\",yref=\"paper\",\n                                  x0=\"2020-03-25\",y0=0,x1=\"2020-05-31\",\n                                  y1=1,fillcolor=\"lightskyblue\",opacity=0.5,\n                                  layer=\"below\",line_width=2 ),\n                             \n                            ]\n                     )\n\nfig.show() \n    \n","4750eb3a":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfig = make_subplots(rows = 2, cols = 2 , subplot_titles=[\"<b>Rajasthan<b>\",\"<b>Uttar Pradesh<b>\",\"<b>Haryana<b>\",'<b>Andhra Pradesh<b>'] )\nfor i , state in enumerate(states2):\n    highan = higha[higha.state == state]\n    \n    \n    fig.add_trace(\n        go.Bar(x= highan.date, y= highan.new_deaths, marker_color='red',name= state),\n    row=(i \/\/ 2) + 1, col=((i % 2) + 1)\n        \n    )\n    fig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\n    fig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\n    fig.update_layout(showlegend=False,\n                     title_text='<b>Daily New Deaths<b>',\n                     title_x=0.5,\n                     paper_bgcolor='lightyellow',\n                     plot_bgcolor = \"lightyellow\",\n                     shapes=[dict(type=\"rect\",xref=\"x1\",yref=\"paper\",\n                                  x0=\"2020-03-25\",y0=0,x1=\"2020-05-31\",\n                                  y1=1,fillcolor=\"snow\",opacity=0.5,\n                                  layer=\"below\",line_width=2 ),\n                             dict(type=\"rect\",xref=\"x2\",yref=\"paper\",\n                                  x0=\"2020-03-25\",y0=0,x1=\"2020-05-31\",\n                                  y1=1,fillcolor=\"snow\",opacity=0.5,\n                                  layer=\"below\",line_width=2 ),\n                             \n                            ]\n                     )\n\nfig.show() ","c01ae700":"states3 = ['Tamil Nadu', 'West Bengal', 'Gujarat', 'Madhya Pradesh']","68095680":"fig = make_subplots(rows = 2, cols = 2 , subplot_titles=['<b>Tamil Nadu<b>', '<b>West Bengal<b>', '<b>Gujarat<b>', '<b>Madhya Pradesh<b>'] )\nfor i , state in enumerate(states3):\n    highan = higha[higha.state == state]\n    \n    \n    fig.add_trace(\n        go.Bar(x= highan.date, y= highan.new_confirmed, marker_color='blue',name= state),\n    row=(i \/\/ 2) + 1, col=((i % 2) + 1)\n        \n    )\n    fig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\n    fig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\n    fig.update_layout(showlegend=False,\n                     title_text='<b>Daily New Confirmed Cases<b>',\n                     title_x=0.5,\n                     paper_bgcolor='aquamarine',\n                     plot_bgcolor = \"aquamarine\",\n                     shapes=[dict(type=\"rect\",xref=\"x1\",\n                                  yref=\"paper\",x0=\"2020-03-25\",\n                                  y0=0,x1=\"2020-05-31\",y1=1,fillcolor=\"lightgreen\",\n                                  opacity=0.5,layer=\"below\",line_width=2 ),\n                             dict(type=\"rect\",xref=\"x2\",\n                                  yref=\"paper\",x0=\"2020-03-25\",\n                                  y0=0,x1=\"2020-05-31\",y1=1,fillcolor=\"lightgreen\",\n                                  opacity=0.5,layer=\"below\",line_width=2 ),\n                            \n                            ]\n                     )\n\nfig.show() \n    ","69cee500":"fig = make_subplots(rows = 2, cols = 2 , subplot_titles=['<b>Tamil Nadu<b>', '<b>West Bengal<b>', '<b>Gujarat<b>', '<b>Madhya Pradesh<b>'] )\nfor i , state in enumerate(states3):\n    highan = higha[higha.state == state]\n    \n    \n    fig.add_trace(\n        go.Bar(x= highan.date, y= highan.new_deaths, marker_color='red',name= state),\n    row=(i \/\/ 2) + 1, col=((i % 2) + 1)\n        \n    )\n    fig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\n    fig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\n    fig.update_layout(showlegend=False,\n                     title_text='<b>Daily New Deaths<b>',\n                     title_x=0.5,\n                     paper_bgcolor='cyan',\n                     plot_bgcolor = \"cyan\",\n                     shapes=[dict(type=\"rect\",xref=\"x1\",\n                                  yref=\"paper\",x0=\"2020-03-25\",\n                                  y0=0,x1=\"2020-05-31\",y1=1,fillcolor=\"lightskyblue\",\n                                  opacity=0.5,layer=\"below\",line_width=2 ),\n                             dict(type=\"rect\",xref=\"x2\",\n                                  yref=\"paper\",x0=\"2020-03-25\",\n                                  y0=0,x1=\"2020-05-31\",y1=1,fillcolor=\"lightskyblue\",\n                                  opacity=0.5,layer=\"below\",line_width=2 ),\n                            \n                            ]\n                     )\n\nfig.show() ","9fa2f5a0":"tests.isna().sum()","81fc7552":"#keeping only required columns\ntests = tests[['Date', 'State','TotalSamples', 'Positive']]","54d34af4":"#renaming column names\ntests.columns = ['date','state','samples' , 'positive']","f668198c":"import plotly.express as px\n\n\nfig = px.line(tests, x=\"date\", y=\"samples\", color='state',\n             color_discrete_sequence=px.colors.cyclical.Phase,)\nfig.update_traces(mode='lines + markers')\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_layout(legend_orientation=\"h\",legend=dict(x= -.1, y=-.3),\n                  autosize=False,\n                  width= 750,\n                  height= 850,\n    title_text='<b>Testing of Covid-19 in India<b> ',\n                  title_x=0.5,\n                 paper_bgcolor='azure',\n                 plot_bgcolor = \"azure\")\nfig.show()","c843c7f1":"tests","328d0617":"today2 = tests[tests.date == '2020-09-23']\n\ntoday2 = today2.sort_values('samples' , ascending = True)","4ebc4278":"state = list(today2.state)\nsamples = list(today2.samples)\n\nfig= go.Figure(go.Treemap(\n    \n    labels =  state,\n    parents=[\"\"]*len(state),\n    values =  samples,\n    textinfo = \"label+percent entry\"\n))\nfig.update_layout(\n    title_text= '<b>Distribution of Testing in India<b>',\n    title_x=0.5,\n    paper_bgcolor='khaki',\n    plot_bgcolor = \"khaki\",\n    \n    )\n\nfig.show()","dec31ad6":"\n\nfig = px.bar(today2, x=\"samples\", y=\"state\", orientation='h')\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_layout(\n    title_text='<b>Number of Samples Tested <b>',\n    title_x=0.5,\n    paper_bgcolor='blanchedalmond',\n    plot_bgcolor = \"blanchedalmond\",\n    autosize=False,\n    width= 800,\n    height= 900)\nfig.update_traces(marker_color='darkred')\nfig.show()","0049ac91":"today2['posper'] = today2['positive'] \/ today2['samples'] * 100\ntoday2.posper = today2.posper.round(2)\ntoday2 = today2.sort_values('posper' , ascending = True)","b2adf6a7":"\nfig = px.bar(today2, x=\"posper\", y=\"state\", orientation='h')\nfig.update_layout(\n    title_text='<b>Covid Positive per Sample percentage<b>',\n    title_x=0.5,\n    paper_bgcolor='rgb(245, 219, 147)',\n    plot_bgcolor = \"rgb(245, 219, 147)\",\n    autosize=False,\n    width= 800,\n    height= 850)\nfig.update_xaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_yaxes(tickfont=dict(family='Rockwell', color='black', size=14))\nfig.update_traces(marker_color='darkviolet')\nfig.show()","2539a376":"#keeping date and Confirmed columns\ndf3 = df2[['date' , 'confirmed']]\n\n#Renaming column names according to fb prophet\ndf3.columns = ['ds' , 'y']","1f518e19":"#importing fbprophet\nfrom fbprophet import Prophet\n\n#model\nm = Prophet()\n\n#fitting the model\nm.fit(df3)","a2037189":"#forecast\nfuture = m.make_future_dataframe(periods= 20) \nfuture.tail()","b1e2b064":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(21)\n","78ac4283":"#fig1 = m.plot(forecast)\n#fig2 = m.plot_components(forecast)\nfrom fbprophet.plot import plot_plotly\nfig = plot_plotly(m, forecast)  # This returns a plotly Figure\nfig.update_layout(\n                  autosize=False,\n                  width= 750,\n                  height= 800,\n    title_text='<b>Covid-19 Total cases Forecast<b>',\n    title_x=0.5,\n    paper_bgcolor='khaki',\n    plot_bgcolor = \"khaki\",)\nfig.show()","1bdc3875":"df4 = df2[['date' , 'deaths']]\n\ndf4.columns = ['ds', 'y']\nm = Prophet()\nm.fit(df4)\nfuture = m.make_future_dataframe(periods= 20) \n#future.tail()\nforecast = m.predict(future)\n#forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(21)\nfig = plot_plotly(m, forecast)  # This returns a plotly Figure\nfig.update_layout(autosize=False,\n                  width= 750,\n                  height= 800,\n    title_text='<b>Covid-19 Deaths  Forecast<b>',\n    title_x=0.5,\n    paper_bgcolor='rgb(245, 219, 147)',\n    plot_bgcolor = \"rgb(245, 219, 147)\",)\nfig.show()","343936d4":"maha = df[df.state =='Maharashtra']\nmaha = maha[['date', 'confirmed']]\nmaha.columns = ['ds', 'y']\nm = Prophet()\nm.fit(maha)\nfuture = m.make_future_dataframe(periods= 20) \n#future.tail()\nforecast = m.predict(future)\n#forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(21)\nfig = plot_plotly(m, forecast)  # This returns a plotly Figure\nfig.update_layout(autosize=False,\n                  width= 750,\n                  height= 800,\n    title_text='<b>Covid-19 Maharashtra cases Forecast<b>',\n    title_x=0.5,\n    paper_bgcolor='aqua',\n    plot_bgcolor = \"aqua\",)\nfig.show()","d48175cc":"delhi = df[df.state =='Delhi']\ndelhi = delhi[['date', 'confirmed']]\ndelhi.columns = ['ds', 'y']\nm = Prophet()\nm.fit(delhi)\nfuture = m.make_future_dataframe(periods= 20) \n#future.tail()\nforecast = m.predict(future)\n#forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(21)\nfig = plot_plotly(m, forecast)  # This returns a plotly Figure\nfig.update_layout(autosize=False,\n                  width= 750,\n                  height= 800,\n    title_text='<b>Covid-19 Delhi cases Forecast<b>',\n    title_x=0.5,\n    paper_bgcolor='aquamarine',\n    plot_bgcolor = \"aquamarine\",)\nfig.show()\n","c3860aa8":"# **Covid-19 Trend Analysis**","7c15da27":"<h2>Deaths in Worst affected states<h2>","4aaccd59":"Here the shaded rectangles represent the lockdown period . \n\n* 1st Lockdown : 25 March - 14 April (21 Days)\n\n* 2nd Lockdown : 15 April - 3 May (19 Days)\n\n* 3rd Lockdown : 4 May - 17 May (14 Days)\n\n* 4th Lockdown : 18 May - 31 may (14 Days)\n\n\n","26fb6cd6":"<h3>Forecasting Using FB Prophet<h3>","f14bfdb3":"**Inference**: Out of all the samples tested Tamilndau has the highest share (12%) . Maharashtra Ranks Second when It comes percentage share of Samples tested.","bee2916e":"Inference: The number of daily deaths is increasing significantly over the months. Currently the number of deaths are increasing with 350+ daily . One thing to notice about above graph is on 17 th June , India has reported 2003 Deaths. I wonder whats the reason behind the number of deaths to be high on that particular day.","c80a1c62":"# **Testing**","123ade3d":"**Number of Cases daily**","58cafec3":"> ","86367d66":"<h3>Daily New Cases of Covid 19 <h3>","30ba371f":"# **Current Situation**","33705737":"# **Statewise Analysis**","1c78c7c7":"# **Forecasting**","8849d1b1":"This dataset contains information about number of confirmed , deaths and cured in each state daily . This dataset is taken from Ministry of Health & Family Welfare.","f920992c":"**testing of Covid -19 in India**"}}