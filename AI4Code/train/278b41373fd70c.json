{"cell_type":{"1906f804":"code","0ca6434a":"code","eae30162":"code","1e45e935":"code","71488326":"code","cfc37fad":"code","ce6c846c":"code","b89ec7fd":"code","1be0e6df":"code","cb0172fb":"code","6a6ec9dc":"code","6309685e":"code","f3aca4e8":"code","da47e06f":"code","0b2f3d5b":"code","babebc9e":"code","1bcaed23":"code","60bb943f":"code","55f22150":"code","6f70eed3":"code","52951dcd":"code","12d303ac":"code","8c5ff882":"code","28496b36":"code","59c6294b":"code","fe10e83c":"code","d057dee1":"code","dcf54032":"code","cbbe26dd":"code","4809f7cf":"code","350e4aca":"code","d4effd00":"code","c35a81ed":"code","853b1225":"code","af9c8684":"code","8f07ab80":"code","51bd9607":"code","aca30946":"code","a047085f":"code","27c7186e":"code","f89aceec":"code","7a9becba":"code","b1f568e8":"code","b3bfe6db":"code","77ea30d7":"markdown","dfc0d2e8":"markdown","7d7dab47":"markdown","b29cc87b":"markdown","b9543535":"markdown","fed95918":"markdown","46d397f7":"markdown","791d3f09":"markdown","70b638e7":"markdown","18f4fa88":"markdown","f0655ba4":"markdown","3d80e6a7":"markdown","b17eeff1":"markdown","372e2a80":"markdown","569875f7":"markdown","53a1ce94":"markdown"},"source":{"1906f804":"import time\nimport datetime\nimport numpy as np\nimport pandas as pd \nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\n\nimport matplotlib\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nmatplotlib.style.use('ggplot')\n%matplotlib inline","0ca6434a":"new_train = pd.read_csv('..\/input\/shift-cft-new-train-dataset\/new_train.csv')\nnew_test = pd.read_csv('..\/input\/shift-cft-new-test-dataset\/shift-cft-new-test-dataset.csv')","eae30162":"X_train = new_train.copy()\ny_train = new_train[\"target\"]\n\nX_test = new_test.copy()\n\nX_train.head()","1e45e935":"X_train = X_train.fillna(value=0)\ny_train = y_train.fillna(value=0)\n\nX_test = X_test.fillna(value=0)","71488326":"data1 = X_train.copy()\n\nprint(\"\u0412 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0432 \u0434\u0432\u0443\u0445 \u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u0430\u0445 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f {:.4f} \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043d\u044b\u0445 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a, \u0432 99% \u0441\u043b\u0443\u0447\u0430\u0435\u0432 {} \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043d\u044b\u0445 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0438 \u043c\u0435\u043d\u044c\u0448\u0435, \u0430 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 {}.\".format(data1['bus stop'].mean(), data1['bus stop'].quantile(0.99), data1['bus stop'].max()))","cfc37fad":"data = data1.copy()\nplt.figure(figsize=(10,5))\nsns.countplot(data['bus stop'].astype('int').sort_values())\nplt.title(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043d\u044b\u0445 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a\",fontsize=15)\nplt.show()","ce6c846c":"sns.catplot(x='target', y='bus stop', kind='boxen', data=data1)\nplt.show()","b89ec7fd":"sns.barplot(x='target', y='bus stop', data=data1)\nplt.show()","1be0e6df":"data1 = X_train.copy()\n\nprint(\"\u0412 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u043a\u043e\u043b \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 {:.4f}, \u0432 99% \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u043a\u043b\u0438\u0435\u043d\u0442 \u0436\u0438\u0432\u0451\u0442 \u0440\u044f\u0434\u043e\u043c {} \u0441 \u0448\u043a\u043e\u043b\u0430\u043c\u0438 \u0438 \u043c\u0435\u043d\u044c\u0448\u0435, \u0430 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u043a\u043e\u043b \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 {}.\".format(data1['school'].mean(), data1['school'].quantile(0.99), data1['school'].max()))","cb0172fb":"data = data1.copy()\nplt.figure(figsize=(10,5))\nsns.countplot(data['school'].astype('int').sort_values())\nplt.title(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u043a\u043e\u043b\",fontsize=15)\nplt.show()","6a6ec9dc":"f,ax1 = plt.subplots(figsize =(8,4))\nsns.pointplot(x='school', y='target', data=data1, color='#606060', alpha=0.8)\nplt.title('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u043a\u043e\u043b\/ \u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u0441\u0445\u043e\u0434',fontsize = 15,color='blue')\nplt.grid()\nplt.show()","6309685e":"f,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(X_train.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","f3aca4e8":"k = 5 #\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0442\u0435\u043f\u043b\u043e\u0432\u043e\u0439 \u043a\u0430\u0440\u0442\u044b\nf,ax = plt.subplots(figsize=(11, 11))\ncols = X_train.corr().nlargest(k, 'target')['target'].index\ncm = np.corrcoef(X_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","da47e06f":"data1 = X_train.copy()\n\nprint(\"\u0412 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043f\u0442\u0435\u043a \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 {:.1f}, 99% \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 {} \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u0430\u043f\u0442\u0435\u043a \u043d\u0435\u0434\u0430\u043b\u0435\u043a\u043e \u043e\u0442 \u0441\u0432\u043e\u0435\u0433\u043e \u0434\u043e\u043c\u0430, \u0441\u0430\u043c\u043e\u0435 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0442\u0432\u043e \u0430\u043f\u0442\u0435\u043a \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 {}.\".format(data1['pharmacy'].mean(), data1['pharmacy'].quantile(0.99), data1['pharmacy'].max()))","0b2f3d5b":"f,ax1 = plt.subplots(figsize =(8,4))\nsns.pointplot(x='pharmacy', y='target', data=data1, color='#606060', alpha=0.8)\nplt.title('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043f\u0442\u0435\u043a\/ \u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u0441\u0445\u043e\u0434',fontsize = 15,color='blue')\nplt.grid()\nplt.show()","babebc9e":"X_train = X_train.loc[:, X_train.columns!=\"target\"]","1bcaed23":"cv = KFold(n_splits=5, shuffle=True, random_state=42)\nscaler = StandardScaler()\nX_train = pd.DataFrame(scaler.fit_transform(X_train), index=X_train.index, columns=X_train.columns)","60bb943f":"def log_reg(X, y):\n  scores = {}\n\n  for i in range(-5, 6):\n    c = 10.0 ** i\n    print('\u0421=', c)\n    clf = LogisticRegression(C=c, random_state=42)\n\n    start_time = datetime.datetime.now()\n    score = cross_val_score(clf, X, y, cv=cv, scoring=\"roc_auc\", n_jobs=-1).mean()\n    print('Score:', score)\n    print('Time elapsed:', datetime.datetime.now() - start_time)\n\n    scores[i] = score\n    print()\n  \n  return scores\n\ndef find_best_c(scores):\n  scores = pd.Series(scores)\n  best_c = 10.0 ** (scores.sort_values(ascending=False).head(1)).index[0]\n  best_score = (scores.sort_values(ascending=False).head(1)).values[0]\n  print('\u041b\u0443\u0447\u0448\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0430\u0432\u0435\u043d \u0421 =', best_c, ', \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0432\u043d\u043e', best_score)","55f22150":"scores = log_reg(X_train, y_train)\npd.Series(scores).plot()\nplt.show()","6f70eed3":"find_best_c(scores)","52951dcd":"X_train_old = X_train.copy()\ny_train_old = y_train.copy()\n\nX_test_old = X_test.copy()","12d303ac":"from xgboost.sklearn import XGBClassifier\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split","8c5ff882":"X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.35, random_state=143)","28496b36":"# Create the XGB classifier, xgb_model.\nxgb_model = XGBClassifier(use_label_encoder=False, n_jobs=1)","59c6294b":"# List the default parameters.\nprint(xgb_model.get_xgb_params())","fe10e83c":"# Train and evaluate.\nxgb_model.fit(X_train, y_train, eval_metric=['error'], eval_set=[((X_train, y_train)),(X_test, y_test)])","d057dee1":"from matplotlib import pyplot\n\n%matplotlib inline","dcf54032":"# Plot and display the performance evaluation\nxgb_eval = xgb_model.evals_result()\neval_steps = range(len(xgb_eval['validation_0']['error']))\n\nfig, ax = pyplot.subplots(1, 1, sharex=True, figsize=(8, 6))\n\nax.plot(eval_steps, [1-x for x in xgb_eval['validation_0']['error']], label='Train')\nax.plot(eval_steps, [1-x for x in xgb_eval['validation_1']['error']], label='Test')\nax.legend()\nax.set_title('Accuracy')\nax.set_xlabel('Number of iterations');","cbbe26dd":"# Select trained model.\nn_trees = 40\ny_pred = xgb_model.predict(X_test, ntree_limit= n_trees)","4809f7cf":"# Check the accuracy of the trained model.\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Accuracy: %.1f%%\" % (accuracy * 100.0))","350e4aca":"xgb_model_gs = XGBClassifier(eval_metric=['error'], use_label_encoder=False, n_jobs=-1)\nparameters = {'reg_alpha': [0.0, 1.0], 'reg_lambda': [0.0, 1.0], 'n_estimators': [n_trees], 'seed': [1337]}","d4effd00":"# Search for the best parameters.\nclf = GridSearchCV(xgb_model_gs, parameters, scoring='accuracy', cv=5, verbose=-1, n_jobs=-1, refit=True)\nclf.fit(X_train, y_train)","c35a81ed":"print(\"Best score: %.1f%%\" % (clf.best_score_*100))\nprint(\"Best parameter set: %s\" % (clf.best_params_))","853b1225":"y_pred = clf.best_estimator_.predict(X_test, ntree_limit= n_trees)\n\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.1f%%\" % (accuracy * 100.0))","af9c8684":"X_test_old_1 = X_test_old.copy()\nX_test_old_1.head()","8f07ab80":"X_test_old_2 = X_test_old_1.drop(X_test_old_1.columns[[0]], axis = 1)\n\nX_test_old_2['id'] = X_test_old_2['id'].astype(int)\nX_test_old_2","51bd9607":"y_pred = clf.best_estimator_.predict(X_test_old_2, ntree_limit= n_trees)","aca30946":"y_pred = pd.DataFrame(y_pred, columns=['target'])\nID_y = [i for i in range(8000, 12000)]\ny_pred['ID'] = ID_y\n\ny_pred = y_pred[['ID', 'target']]\ny_pred","a047085f":"y_pred.to_csv('submission.csv', index=False)","27c7186e":"from sklearn.ensemble import GradientBoostingClassifier","f89aceec":"clf = GradientBoostingClassifier(n_estimators=10000, learning_rate=0.1, max_depth=6, random_state=143).fit(X_train, y_train)\nclf.score(X_test, y_test)","7a9becba":"y_pred = clf.predict(X_test_old_2)","b1f568e8":"y_pred = pd.DataFrame(y_pred, columns=['target'])\nID_y = [i for i in range(8000, 12000)]\ny_pred['ID'] = ID_y\n\ny_pred = y_pred[['ID', 'target']]\ny_pred","b3bfe6db":"y_pred.to_csv('submission.csv', index=False)","77ea30d7":"\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0448\u0430\u0433","dfc0d2e8":"\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u043c \u043c\u0430\u0441\u0448\u0442\u0430\u0431 \u0434\u043e \u0442\u043e\u043f-5 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.","7d7dab47":"**\u041e\u0431\u0443\u0447\u0438\u043c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e**","b29cc87b":"**\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u043a\u043e\u043b**","b9543535":"**\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c XGBoost**","fed95918":"\u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0448\u043a\u043e\u043b \u0438 \u0445\u043e\u0440\u043e\u0448\u0438\u043c \u0438\u0441\u0445\u043e\u0434\u043e\u043c","46d397f7":"**\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443**","791d3f09":"\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","70b638e7":"**\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043d\u044b\u0445 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a**","18f4fa88":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0438\u0441\u0445\u043e\u0434 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043d\u044b\u0445 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a","f0655ba4":"\u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0435\u0430\u0442\u0440 \u0438 \u0432\u043e\u043a\u0437\u0430\u043b \u0438\u043b\u0438 \u0431\u0430\u043d\u043a \u0438 \u0432\u043e\u043a\u0437\u0430\u043b.\n\u0410 \u0442\u0430\u043a\u0436\u0435 \u0437\u0430\u043c\u0435\u0447\u0430\u0435\u043c, \u0447\u0442\u043e \u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 atm, chrisians, muslims \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0443\u043b\u0435\u0432\u044b\u0435.","3d80e6a7":"**\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043f\u0442\u0435\u043a**","b17eeff1":"\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0432\u044b\u0435 \u0438\u043c\u0435\u044e\u0442\u0441\u044f, \u043d\u0430 \u043d\u0443\u043b\u0438","372e2a80":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0445\u043e\u0440\u043e\u0448\u0435\u0433\u043e \u0438\u0441\u0445\u043e\u0434\u0430 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043d\u044b\u0445 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a","569875f7":"\u0432\u043e\u0437\u043d\u0438\u043a\u043b\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0441\u044c \u0433\u043e\u0442\u043e\u0432\u044b\u043c\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u043c\u0438:\nhttps:\/\/www.kaggle.com\/nikolaimakarov\/shift-cft-new-train-dataset\nhttps:\/\/www.kaggle.com\/nikolaimakarov\/shift-cft-new-test-dataset","53a1ce94":"\u041f\u0440\u043e\u0432\u0435\u0434\u0451\u043c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0441 \u043f\u043e\u0434\u0431\u043e\u0440\u043e\u043c \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043f\u043e\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e"}}