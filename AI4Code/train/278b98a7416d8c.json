{"cell_type":{"70bb6359":"code","bf364cd6":"code","62b14c12":"code","7e01f5d2":"code","353ba978":"code","e0c0b899":"code","80f7a3d6":"code","6473f3a4":"code","b1c955c1":"code","69dc6801":"code","bdb3ea7c":"code","011846df":"code","880be4a3":"code","1c6dfe69":"code","54e006c6":"code","b3289eaa":"code","0fa00f86":"code","5d64d853":"code","df159c2e":"code","98b0e31b":"code","5de6298e":"code","3d6dc6e6":"code","deb7aa0d":"code","b79ecf63":"code","8a7ac81b":"code","541869b8":"code","0f1fb4ce":"code","5e16286a":"code","2708197d":"code","78c87412":"code","b6c29bfa":"code","4f85cac7":"code","df66b68f":"code","e5bad6a2":"code","bd03cba1":"code","bf34ecf8":"code","7ba4a6f3":"code","a5364bbf":"code","851d8393":"code","714fc1dc":"code","945aa4ba":"code","baa955d8":"code","1c665393":"code","1e3dd2d8":"code","8595b510":"code","4804c835":"code","b43f34b1":"code","fa92aab3":"code","93a99f57":"code","a0c006e8":"code","1623bac6":"code","3009086e":"code","9e9e4258":"code","2ce15cd5":"code","700ed2fb":"code","1b473292":"code","92842c1d":"code","0ee55e04":"code","187db360":"code","8db42706":"code","fed5eb5c":"code","bfdf5d06":"code","d9f3eb0d":"code","394d0c00":"code","838e288c":"code","fd96972f":"code","80711f7f":"code","9cc3250c":"code","6bb0b9df":"code","a816f02f":"code","6b8bf215":"code","bb4a6fd5":"code","b48e53e2":"code","b69d8b74":"code","09ff9773":"code","22a4d221":"code","a10e7187":"code","1c6ab9d7":"code","0ef0f1d1":"code","5710e2c9":"code","860f8c7d":"code","715f2bb8":"code","0a14f84a":"code","ccf6224e":"code","b8464a0c":"code","ca038fde":"code","20304cbc":"code","9398b017":"code","bf9f2c19":"code","4dbd0dec":"code","52c7753e":"code","ad3e5ffa":"code","65c7597b":"markdown","8ac0513d":"markdown","158c8dd7":"markdown","b4261fc0":"markdown","3f53b207":"markdown","5bf6e427":"markdown","cb20f950":"markdown","d879a823":"markdown","58178196":"markdown","84cb0b1c":"markdown","a5506102":"markdown","b1f0fb5a":"markdown","52f56ae6":"markdown","8c502387":"markdown","07e36939":"markdown","5c881688":"markdown","c04949db":"markdown","bc3e7110":"markdown","78142a78":"markdown","e3f42482":"markdown","09f49f97":"markdown","bf21793e":"markdown","84e54aaa":"markdown","84e02a1f":"markdown","79e87d0b":"markdown","3896b44d":"markdown","fcd73374":"markdown","055c0155":"markdown","a3c2c5ee":"markdown","c61d64a6":"markdown","a5084a83":"markdown","d7312616":"markdown","4e6da488":"markdown","f6ba28e4":"markdown","2eb4a701":"markdown","d9477490":"markdown","db547050":"markdown","ba3bc882":"markdown","372293c4":"markdown","f90e3b1e":"markdown","b3349906":"markdown","7ba55948":"markdown","4133f85e":"markdown","835784a2":"markdown","66d002a2":"markdown","bf1e0c3c":"markdown","10b1a423":"markdown","9d734fba":"markdown","e8b15d52":"markdown","6e080da4":"markdown","b4dec83d":"markdown","ba495e43":"markdown","f0515c35":"markdown","9d1d47b8":"markdown"},"source":{"70bb6359":"# \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport sklearn\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold, StratifiedShuffleSplit\nfrom sklearn.model_selection import cross_val_score, cross_validate, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, f1_score, accuracy_score\nfrom sklearn.metrics import balanced_accuracy_score, precision_recall_curve\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler, RobustScaler, LabelEncoder, OneHotEncoder\nfrom itertools import combinations, combinations_with_replacement\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bf364cd6":"# \u043f\u043e\u0434\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\n\nimport warnings\nwarnings.simplefilter('ignore')\n\n# import matplotlib.pyplot as plt2\nfrom matplotlib import pylab as plt\n%matplotlib inline\n\npd.set_option('display.width', 140, 'display.max_columns', None)","62b14c12":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt\nSEED = 100","7e01f5d2":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439):\ndef binary_futures(*dfs, **columns_args):\n    for df in dfs:\n        for col, arg in columns_args.items():\n            df[col] = (df[col] == arg).astype('int32')","353ba978":"DATA_DIR = '\/kaggle\/input\/sf-scoring\/'\ntrain = pd.read_csv(DATA_DIR+'train.csv')\ntest = pd.read_csv(DATA_DIR+'\/test.csv')","e0c0b899":"# \u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0432\u0443\u0435\u0442 6 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, 12 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0438 \u043e\u0434\u0438\u043d \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 (\u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435): default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443.\ntrain.info()","80f7a3d6":"print(train.shape)\ntrain.sample(5)","6473f3a4":"print(test.shape)\ntest.sample(5)","b1c955c1":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u043e\u0439 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439:\ntrain.default.value_counts(normalize=True)*100","69dc6801":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445:\nprint('\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 train:', train.isnull().sum()[train.isnull().sum() > 0])\nprint('\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 test:', test.isnull().sum()[test.isnull().sum() > 0])","bdb3ea7c":"# \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e profiling, \u043d\u043e \u043d\u0435 \u0441\u0442\u0430\u043d\u0435\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e.\n# import pandas_profiling\n# pandas_profiling.ProfileReport(train)","011846df":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438:\nprint(train.sex.value_counts())\npd.crosstab(train.sex, train.default, normalize='index')*100","880be4a3":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445:\nprint(test.sex.value_counts())","1c6dfe69":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439-\u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439, \u0433\u0434\u0435: 1 == 'M', 0 == 'F'\ntrain.sex = (train.sex == 'M').astype('int32')\ntest.sex = (test.sex == 'M').astype('int32')\n\n# binary_futures(train, test, {'sex': 'M'})","54e006c6":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438:\nprint(train.car.value_counts())\nprint(train.car_type.value_counts())\npd.crosstab([ train.car, train.car_type], train.default, normalize='index')*100","b3289eaa":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445:\nprint(test.car.value_counts(normalize=True)*100)\nprint(test.car_type.value_counts(normalize=True)*100)","0fa00f86":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439-\u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439, \u0433\u0434\u0435: 1 == 'Y', 0 == 'N'\ntrain.car = (train.car == 'Y').astype('int32')\ntest.car = (test.car == 'Y').astype('int32')\n\ntrain.car_type = (train.car_type == 'Y').astype('int32')\ntest.car_type = (test.car_type == 'Y').astype('int32')\n\n# binary_futures(train, test, {'car': 'Y, 'car_type': 'Y'})","5d64d853":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438:\nprint(train.foreign_passport.value_counts(normalize=True)*100)\npd.crosstab(train.foreign_passport, train.default, normalize='index')*100","df159c2e":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445:\nprint(test.foreign_passport.value_counts(normalize=True)*100)","98b0e31b":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439-\u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439, \u0433\u0434\u0435: 1 == 'Y', 0 == 'N'\ntrain.foreign_passport = (train.foreign_passport == 'Y').astype('int32')\ntest.foreign_passport = (test.foreign_passport == 'Y').astype('int32')\n\n# binary_futures(train, test, {'foreign_passport': 'Y'})","5de6298e":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445:\nprint(train.education.value_counts(normalize=True)*100)\nprint(test.education.value_counts(normalize=True)*100)","3d6dc6e6":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0443\u0440\u043e\u0432\u043d\u044f \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u043c:\npd.crosstab(train.education, train.default, normalize='index')*100","deb7aa0d":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043a\u0430\u043a\u043e\u0432\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u043d\u0435\u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f:\nna_edu_default = round(train[train.education.isna()].default.value_counts(normalize=True)*100, 2)\nna_edu_default","b79ecf63":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u043e\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u0433\u0434\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430:\nedu_dict = round(pd.crosstab(train.education, train.default, normalize='index').iloc[:, 1]*100, 2)\n\n# \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c\u043e\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435:\ntrain.education = train.education.map(edu_dict)\ntest.education = test.education.map(edu_dict)\n\n# \u0434\u043b\u044f \u043f\u0440\u043e\u043f\u0443\u0448\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c 11.4%:\ntrain.education.fillna(na_edu_default[1], inplace=True)\ntest.education.fillna(na_edu_default[1], inplace=True)\n\n# \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0442\u0435\u0440\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u0443\u044e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0433\u0440\u0443\u043f\u043f\u0435:\npd.crosstab(train.education, train.default)","8a7ac81b":"# \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a \u0444\u043e\u0440\u043c\u0430\u0442\u0443 datetime:\ntrain.app_date = train.app_date.apply(pd.to_datetime)\ntest.app_date = test.app_date.apply(pd.to_datetime)","541869b8":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - month:\ntrain['month'] = train.app_date.dt.month\ntest['month'] = test.app_date.dt.month\npd.crosstab([train.month], train.default, normalize='index')*100","0f1fb4ce":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - clients_day, \u043a\u043e\u043b-\u0432\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u0434\u0435\u043d\u044c:\ndates_dict = train.app_date.value_counts().to_dict()\ntrain['clients_day'] = train.app_date.map(dates_dict)\ntest['clients_day'] = train.app_date.map(dates_dict)\ntrain.clients_day.hist()","5e16286a":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - numb_weeks, \u043d\u043e\u043c\u0435\u0440 \u043d\u0435\u0434\u0435\u043b\u0438 (\u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 train):\ntrain['numb_weeks'] = train.app_date.dt.week\ntest['numb_weeks'] = test.app_date.dt.week\nsns.displot(train, x=\"numb_weeks\", hue=\"default\", multiple=\"fill\")  # , kind=\"kde\"","2708197d":"# \u043f\u043e\u0438\u0441\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043e\u0442 \u0434\u043d\u044f \u043c\u0435\u0441\u044f\u0446\u0430, \u0434\u043d\u044f \u043d\u0435\u0434\u0435\u043b\u0438 \u0438\u043b\u0438 \u0434\u0435\u043a\u0430\u0434\u044b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u0435 \u0434\u0430\u043b:\n# train['day'] = train.app_date.dt.day\n# train['day_of_week'] = train.app_date.dt.dayofweek\n# train['decade'] = 0\n# train['decade'][train.day <= 10] = 1\n# train['decade'][train.day.between(11, 20)] = 2\n# train['decade'][train.day > 20] = 3","78c87412":"# \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u043c \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440:\ntrain.drop(['app_date'], axis=1, inplace=True)\ntest.drop(['app_date'], axis=1, inplace=True)","b6c29bfa":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438:\nprint(train.good_work.value_counts(normalize=True)*100)\npd.crosstab(train.good_work, train.default, normalize='index')*100","4f85cac7":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435:\ntest.good_work.value_counts(normalize=True)*100","df66b68f":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435:\npd.crosstab(train.region_rating, train.default, normalize='index')*100","e5bad6a2":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445:\nprint(train.region_rating.value_counts(normalize=True).sort_index()*100)\ntest.region_rating.value_counts(normalize=True).sort_index()*100","bd03cba1":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430:\npd.crosstab(train.work_address, train.default, normalize='index')*100","bf34ecf8":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0430\u0449\u0435\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0432\u044b\u0431\u043e\u0440\u043e\u043a:\nprint(train.work_address.value_counts(normalize=True).sort_index()*100)\ntest.work_address.value_counts(normalize=True).sort_index()*100","7ba4a6f3":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430:\npd.crosstab(train.home_address, train.default, normalize='index')*100","a5364bbf":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0430\u0449\u0435\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0432\u044b\u0431\u043e\u0440\u043e\u043a:\nprint(train.home_address.value_counts(normalize=True).sort_index()*100)\ntest.home_address.value_counts(normalize=True).sort_index()*100","851d8393":"# \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0430 home_address=3 (11,6%), \u043b\u043e\u0433\u0438\u0447\u043d\u0435\u0439 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0435\u0433\u043e \u043d\u0430 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0439 (\u043c\u0435\u0436\u0434\u0443 1 \u0438 2):\ntrain.home_address[train.home_address == 3] = 1.5\ntest.home_address[test.home_address == 3] = 1.5\n\n# # \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u043c\u0430\u043b\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0430 \"3\" \u0438 \u043d\u0438\u0437\u043a\u0443\u044e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0436\u0435 \u043a\u043b\u0430\u0441\u0441\u0430 (11,6%), \u0447\u0442\u043e \u0431\u043b\u0438\u0436\u0435 \u043a \u043a\u043b\u0430\u0441\u0441\u0443 \"1\", \u043c\u043e\u0436\u0435\u043c \u0438\u0445 \u043e\u0431\u044a\u0435\u0434\u0435\u043d\u0438\u0442\u044c:\n# train.home_address[train.home_address == 3] = 1\n# test.home_address[test.home_address == 3] = 1\n\npd.crosstab(train.home_address, train.default, normalize='index')*100","714fc1dc":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430:\npd.crosstab(train.sna, train.default, normalize='index')*100","945aa4ba":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c:\nprint(train.sna.value_counts(normalize=True).sort_index()*100)\ntest.sna.value_counts(normalize=True).sort_index()*100","baa955d8":"# # \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0434\u043b\u044f \u0433\u0440\u0443\u043f\u043f\u044b sna=3 \u0438 \u0431\u043b\u0438\u0437\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0441 \u0433\u0440\u0443\u043f\u043f\u043e\u0439 sna=2 - \u043c\u043e\u0436\u0435\u043c \u0438\u0445 \u043e\u0431\u044a\u0435\u0434\u0435\u043d\u0438\u0442\u044c\n# train.sna = train.sna.apply(lambda x: 2.5 if x in [2, 3] else x)\n# test.sna = test.sna.apply(lambda x: 2.5 if x in [2, 3] else x)\n# pd.crosstab(train.sna, train.default, normalize='index')*100","1c665393":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430:\npd.crosstab(train.first_time, train.default, normalize='index')*100","1e3dd2d8":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c:\nprint(train.first_time.value_counts(normalize=True).sort_index()*100)\ntest.first_time.value_counts(normalize=True).sort_index()*100","8595b510":"pd.crosstab([train.sex, train.car], train.default, normalize='index')*100","4804c835":"train['sex_car'] = 0\ntrain['sex_car'][(train.car == 1)&(train.sex == 0)] = 1\ntrain['sex_car'][(train.car == 1)&(train.sex == 1)] = 2\ntrain['sex_car'][(train.car == 0)&(train.sex == 0)] = 3\ntrain['sex_car'][(train.car == 0)&(train.sex == 1)] = 4\n\ntest['sex_car'] = 0\ntest['sex_car'][(test.car == 1)&(test.sex == 0)] = 1\ntest['sex_car'][(test.car == 1)&(test.sex == 1)] = 2\ntest['sex_car'][(test.car == 0)&(test.sex == 0)] = 3\ntest['sex_car'][(test.car == 0)&(test.sex == 1)] = 4\n\npd.crosstab(train.sex_car, train.default, normalize='index')*100","b43f34b1":"# \u0423\u0434\u0430\u043b\u0438\u043c \u0440\u0430\u043d\u0435\u0435 \u043e\u0442\u0431\u0440\u0430\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0435 (\u0438\u043b\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438) \u0434\u0430\u043d\u043d\u044b\u0435:\ntrain.drop(['sex', 'car'], axis=1, inplace=True)  # \ntest.drop(['sex', 'car'], axis=1, inplace=True)   # ","fa92aab3":"# \u0423\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0447\u0442\u043e \u0432\u0441\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b (train + test):\nid_all = train.client_id.append(test.client_id)\nid_all.shape[0] == id_all.nunique()","93a99f57":"# \u0437\u0430\u043c\u0435\u0442\u0438\u0432 \u0447\u0442\u043e \u0443 client_id \u043f\u043e\u0447\u0442\u0438 100% \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c month, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0435\u0433\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0441\u0442\u044c:\ntrain.sort_values('client_id')","a0c006e8":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0430\u043c:\nsns.displot(train, x=\"age\", col=\"default\", bins=52)","1623bac6":"# \u0414\u043b\u044f \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e\u0433\u043e \u0432\u043e\u0441\u043f\u0440\u0438\u044f\u0442\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f (\u0434\u0435\u0444\u043e\u043b\u0442\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443) - \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0440\u0430\u0441\u0447\u0435\u0442\u044b \u043a \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c\u0443 \u0432\u0438\u0434\u0443, (%):\ndf_age = pd.DataFrame()\ndf_age['default_0'] = train.age[train.default == 0].value_counts()\ndf_age['default_1'] = train.age[train.default == 1].value_counts()\ndf_age['default_%'] = df_age['default_1'] \/ (df_age['default_0'] + df_age['default_1']) * 100\ndf_age['age'] = df_age.index\n\n# \u0432\u0438\u0434\u0438\u043c \u043f\u0430\u0440\u0430\u0431\u043e\u043b\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043e\u0442 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 (c \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u043e\u043c \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 55 \u043b\u0435\u0442 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u0435\u043c \u043f\u043e \u043a\u0440\u0430\u044f\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430):\ndf_age.plot(x='age', y='default_%', kind='scatter')","3009086e":"# \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0439 \u0430\u043f\u0440\u043e\u043a\u0441\u0438\u043c\u0430\u0446\u0438\u0438 \u0441\u0433\u043b\u0430\u0434\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043e\u0431\u044a\u0435\u0434\u0435\u043d\u0438\u0432 \u0432 \u0433\u0440\u0443\u043f\u043f\u044b \u043f\u043e 5-\u043b\u0435\u0442\u043d\u0438\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430\u043c:\ndf_age.age = df_age.age.apply(lambda x: (x \/\/ 5) * 5)\ndf_age_group5 = df_age.groupby(['age'])[['default_0', 'default_1']].sum()\ndf_age_group5['%%'] = df_age_group5['default_1'] \/ (df_age_group5['default_0'] + df_age_group5['default_1'])\ndf_age_group5['age'] = df_age_group5.index\ndf_age_group5.plot(x='age', y='%%', kind='scatter')","9e9e4258":"# \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0434\u043b\u044f \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u044b\u0445 \u0433\u0440\u0443\u043f\u043f \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\ndict_default_by_age = round(df_age_group5['%%']*100, 3).to_dict()\n\n# \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\ntrain['age'] = train.age.apply(lambda x: (x \/\/ 5) * 5).map(dict_default_by_age)\ntest['age'] = test.age.apply(lambda x: (x \/\/ 5) * 5).map(dict_default_by_age)","2ce15cd5":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u043e\u0435 \u0438\u043c\u0435\u0435\u043c \u043a\u043e\u043b\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435:\ntrain.decline_app_cnt.value_counts()","700ed2fb":"# \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043c\u0430\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0433\u0440\u0443\u043f\u043f\u044b \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u0432:\ntrain.decline_app_cnt[train.decline_app_cnt > 3] = 3\ntest.decline_app_cnt[test.decline_app_cnt > 3] = 3\npd.crosstab(train.decline_app_cnt, train.default, normalize='index')*100","1b473292":"# # \u0434\u0440\u0443\u0433\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043e\u043a \u0438 dummy-\u0440\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0435 \u043f\u0440\u0438\u043d\u0435\u0441\u043b\u0438 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f f1:\n# train = pd.get_dummies(train, columns=['decline_app_cnt'])\n# test = pd.get_dummies(test, columns=['decline_app_cnt'])\n\n# # \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0434\u043b\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043e\u043a (\u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u043e\u0442\u043a\u0430\u0437\u043e\u0432):\n# dict_default_by_decline_app_cnt = pd.crosstab(train.decline_app_cnt, train.default, normalize='index')*100\n\n# # \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0449\u0438\u0439 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0434\u043b\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \"\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\":\n# train['decline_app_cnt'] = train.decline_app_cnt .map(dict_default_by_decline_app_cnt.iloc[:, -1])\n# test['decline_app_cnt'] = test.decline_app_cn.map(dict_default_by_decline_app_cnt.iloc[:, -1])\n# train.decline_app_cnt.value_counts(normalize=True)*100","92842c1d":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435:\nsns.distplot(train.score_bki)","0ee55e04":"sns.displot(train, x=\"score_bki\", hue=\"default\", multiple=\"fill\")  # , kind=\"kde\"","187db360":"# # \u0441\u0433\u0440\u0443\u043f\u0438\u0440\u0443\u0435\u043c \u043b\u0435\u0432\u044b\u0439 \u0445\u0432\u043e\u0441\u0442:\n# train.score_bki[train.score_bki < - 3.5] = - 3.5\n# test.score_bki[test.score_bki < - 3.5] = - 3.5\n\n# # \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043c \u0441\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0448\u0430\u0433\u043e\u043c 0.2:\n# train.score_bki = train.score_bki.apply(lambda x: (x*10\/\/2)\/5)\n# test.score_bki = test.score_bki.apply(lambda x: (x*10\/\/2)\/5)\n# # \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043c \u0441\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0448\u0430\u0433\u043e\u043c 0.1:\n# train.score_bki = train.score_bki.apply(lambda x: x*10\/\/1\/10)\n# test.score_bki = test.score_bki.apply(lambda x: x*10\/\/1\/10)\n\n# # \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435 0 - \u044d\u0442\u043e \u043e\u0448\u0438\u0431\u043a\u0430 \u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u0434\u043b\u044f \u043d\u0438\u0445 \u0437\u043d\u0430\u043a:\n# train.score_bki[train.score_bki > 0] = - train.score_bki\n# test.score_bki[test.score_bki > 0] = - test.score_bki\n\n# sns.displot(train, x=\"score_bki\", hue=\"default\", multiple=\"fill\")","8db42706":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435:\npd.crosstab(train.bki_request_cnt, train.default)","fed5eb5c":"# \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0443 \u043a\u043e\u043b-\u0432\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0438 \u0438 \u0441\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438:\ntrain.bki_request_cnt[train.bki_request_cnt > 16] = 16\ntrain.bki_request_cnt[train.bki_request_cnt.between(11, 15)] = 11\ntrain.bki_request_cnt[train.bki_request_cnt.between(8, 10)] = 8\ntrain.bki_request_cnt[train.bki_request_cnt.between(4, 7)] = 4\n\ntest.bki_request_cnt[test.bki_request_cnt > 16] = 16\ntest.bki_request_cnt[test.bki_request_cnt.between(11, 15)] = 11\ntest.bki_request_cnt[test.bki_request_cnt.between(8, 10)] = 8\ntest.bki_request_cnt[test.bki_request_cnt.between(4, 7)] = 4\n\npd.crosstab(train.bki_request_cnt, train.default, normalize='index')*100","bfdf5d06":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u0445\u043e\u0434\u043e\u0432:\nsns.distplot(train.income, bins=25)","d9f3eb0d":"# \u0411\u0435\u0437 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u0443\u0442 \u043d\u0435 \u043e\u0431\u043e\u0439\u0442\u0438\u0441\u044c:\ntrain['income'] = np.log(train['income'] + 1)\ntest['income'] = np.log(test['income'] + 1)\n\nsns.distplot(train.income, bins=100)","394d0c00":"# \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043c \u0441\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0448\u0430\u0433\u043e\u043c 0.5:\ntrain.income = train.income.apply(lambda x: ((x * 10) \/\/ 5) \/ 2)\ntest.income = test.income.apply(lambda x: ((x * 10) \/\/ 5) \/ 2)\n\n# \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u043b\u044f \u0441\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438:\ntrain.income[train.income < 8.5] = 8.5\ntest.income[test.income < 8.5] = 8.5\ntrain.income[train.income > 12] = 12\ntest.income[test.income > 12] = 12\n\npd.crosstab(train.income, train.default, normalize='index')*100","838e288c":"# # \u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0430\u0440\u0430\u0431\u043e\u043b\u0443 \u043a \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u043c\u0443 \u0432\u0438\u0434\u0443, \u043d\u0435 \u043f\u0440\u0438\u0432\u0435\u043b\u0430 \u043a \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u0444-\u043c\u0435\u0440\u044b \u043d\u0430 \u0442\u0435\u0441\u0442\u0435:\n# train.income = abs(train.income - 9.5)\n# test.income = abs(test.income - 9.5)\n# pd.crosstab(train.income, train.default, normalize='index')*100","fd96972f":"# \u0423\u0434\u0430\u043b\u0438\u043c \u0440\u0430\u043d\u0435\u0435 \u043e\u0442\u0431\u0440\u0430\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0435 (\u0438\u043b\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438) \u0434\u0430\u043d\u043d\u044b\u0435:\ntrain.drop(['client_id'], axis=1, inplace=True)  # \ntest.drop(['client_id'], axis=1, inplace=True)   # ","80711f7f":"plt.figure(figsize=(16, 8))\nsns.heatmap(train.corr().abs(), annot=True, cmap='coolwarm', fmt='.3f', annot_kws={'size':10})","9cc3250c":"# \u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e mutual_info_classif:\nimp_cat = pd.Series(mutual_info_classif(train.drop(columns='default', axis=1), train['default'], \n                                        discrete_features='auto', random_state=100), \n                    index=train.drop(columns='default', axis=1).columns.values)\nimp_cat.sort_values()","6bb0b9df":"# \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043c\u0435\u0436\u0434\u0443 'month' \u0438 'numb_weeks', \u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \"\u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438\" \u0434\u043b\u044f 'numb_weeks', - \u0443\u0434\u0430\u043b\u0438\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439:\ntrain.drop(['numb_weeks'], axis=1, inplace=True)   \ntest.drop(['numb_weeks'], axis=1, inplace=True)","a816f02f":"# # \u0420\u0430\u0437\u043e\u0431\u044a\u0435\u043c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u0442\u0440\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438:\n# columns_bins = ['car_type', 'good_work', 'home_address', 'work_address', 'sna', 'first_time', 'foreign_passport', 'month']\n# columns_cat = ['education', 'age', 'decline_app_cnt', 'region_rating', 'income']\n# columns_numb = ['score_bki', 'clients_day', 'defaults_day', 'numb_weeks', 'bki_request_cnt']\n\n# # \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u044d\u0442\u0438\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438:\n# bins_3 = list(combinations(columns_bins, 3))\n# cat_3 = list(combinations(columns_cat, 3))\n# numb_3 = list(combinations(columns_numb, 3))\n\n# print('combinations(columns_bins, 3): ', len(bins_3))\n# print('combinations(columns_cat, 3): ', len(cat_3))\n# print('combinations(columns_numb, 3): ', len(numb_3))","6b8bf215":"# # 1. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432\u0435\u0441\u044c \u043f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0441\u0438\u043d\u0442\u0435\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u043c\u0435\u0442\u0440\u043e\u0432 bins_3:\n# for x, y, z in bins_3:\n#     train['dif1_' + str(x) + str(y) + str(z)] = train[x] + train[y] - train[z]\n#     train['dif2_' + str(x) + str(y) + str(z)] = train[x] - train[y] + train[z]\n#     train['dif3_' + str(x) + str(y) + str(z)] = train[x] - train[y] - train[z]\n\n# # 2. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e mutual_info_classif \u043e\u0442\u0431\u0435\u0440\u0435\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u0438\u0437 \u043d\u043e\u0432\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432:\n# dif1_home_address sna foreign_passport    0.016630\n# dif2_car_type home_address first_time     0.015406\n# dif3_car_type work_address sna            0.015467\n\n# 3. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432 train \u0438 test:\n# train['1'] = train['home_address'] + train['sna'] - train['foreign_passport']\n# train['2'] = train['car_type'] - train['home_address'] + train['first_time']\n# train['3'] = train['car_type'] - train['work_address'] - train['sna']\n# test['1'] = test['home_address'] + test['sna'] - test['foreign_passport']\n# test['2'] = test['car_type'] - test['home_address'] + test['first_time']\n# test['3'] = test['car_type'] - test['work_address'] - test['sna']","bb4a6fd5":"# # 1. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432\u0435\u0441\u044c \u043f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0441\u0438\u043d\u0442\u0435\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u043c\u0435\u0442\u0440\u043e\u0432 cat_3:\n# for x, y, z in cat_3:\n#     train['dif1_' + str(x) + str(y) + str(z)] = train[x] + train[y] - train[z]\n#     train['dif2_' + str(x) + str(y) + str(z)] = train[x] - train[y] + train[z]\n#     train['dif3_' + str(x) + str(y) + str(z)] = train[x] - train[y] - train[z]\n#     train['mult1_' + str(x) + str(y) + str(z)] = (train[x] - train[y]) \/ (train[x] + train[y])\n#     train['mult2_' + str(x) + str(y) + str(z)] = (train[x] - train[z]) \/ (train[x] + train[z])\n#     train['mult3_' + str(x) + str(y) + str(z)] = (train[y] - train[z]) \/ (train[y] + train[z])\n    \n    \n# # 2. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e mutual_info_classif \u043e\u0442\u0431\u0435\u0440\u0435\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u0438\u0437 \u043d\u043e\u0432\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432:\n# dif3_education decline_app_cnt region_rating     0.015614\n\n# # 3. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432 train \u0438 test:\n# train['4'] = train['decline_app_cnt'] - train['bki_request_cnt'] - train['education']\n# train['5'] = train['decline_app_cnt'] * train['education']\n# test['4'] = test['decline_app_cnt'] - test['bki_request_cnt'] - test['education']\n# test['5'] = test['decline_app_cnt'] * test['education']","b48e53e2":"# # 1. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432\u0435\u0441\u044c \u043f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0441\u0438\u043d\u0442\u0435\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u043c\u0435\u0442\u0440\u043e\u0432 numb_3:\n# for x, y, z in numb_3:\n#     train['dif1_' + str(x) + str(y) + str(z)] = train[x] + train[y] - train[z]\n#     train['dif2_' + str(x) + str(y) + str(z)] = train[x] - train[y] + train[z]\n#     train['dif3_' + str(x) + str(y) + str(z)] = train[x] - train[y] - train[z]\n#     train['mult1_' + str(x) + str(y) + str(z)] = pow(abs((train[x] - train[y]) * train[z]), 0.5)\n#     train['mult2_' + str(x) + str(y) + str(z)] = pow(abs((train[x] - train[z]) * train[y]), 0.5)\n#     train['mult3_' + str(x) + str(y) + str(z)] = pow(abs((train[y] - train[z]) * train[x]), 0.5)\n\n# # 2. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e mutual_info_classif \u043e\u0442\u0431\u0435\u0440\u0435\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u0438\u0437 \u043d\u043e\u0432\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432:\n# mult1_score_bki clients_day numb_weeks         0.016457\n# mult_score_bki income                      0.018898\n# sum_score_bki region_rating                0.022869\n\n# # 3. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432 train \u0438 test:\n# train['6'] = train['score_bki'] + train['clients_day']\n# train['7'] = train['score_bki'] * train['income']\n# train['8'] = train['score_bki'] + train['region_rating']\n# test['6'] = test['score_bki'] + test['clients_day']\n# test['7'] = test['score_bki'] * test['income']\n# test['8'] = test['score_bki'] + test['region_rating']","b69d8b74":"# imp_cat = pd.Series(mutual_info_classif(train.drop(columns='default', axis=1), train['default'], \n#                                         discrete_features='auto', random_state=100), \n#                     index=train.drop(columns='default', axis=1).columns.values)\n# imp_cat.sort_values()","09ff9773":"# \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432:\nscaler=RobustScaler()    # \u043d\u0430 test \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u0441\u043b\u0435\u0433\u043a\u0430 \u043b\u0443\u0447\u0448\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0447\u0435\u043c MinMaxScaler()\ncolumns = train.drop(columns='default', axis=1).columns.values\ntrain[columns] = scaler.fit_transform(train.drop(columns='default', axis=1).values)\ntest[columns] = scaler.transform(test.values)\n\n# \u0414\u043b\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0438 (\u043a\u043b\u0430\u0441\u0441\u0430 default=1) \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043d\u0430\u0448\u0443 \u0432\u044b\u0431\u043e\u0440\u043a\u0443 train \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443):\nX = train.drop(columns='default', axis=1)\ny = train['default'].values\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.20, random_state=SEED)\n\n# \u041f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0434\u0432\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0438:\n# 1. RandomOverSampler \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0438:\nfrom imblearn.over_sampling import RandomOverSampler\noversam = RandomOverSampler(sampling_strategy='minority', random_state=SEED)\nX_over, y_over = oversam.fit_resample(X_train, y_train)\n\n# 2. SMOTE \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0438:\nfrom imblearn.over_sampling import SMOTE\nsmot = SMOTE(sampling_strategy='minority', random_state=SEED)\nX_smot, y_smot = smot.fit_resample(X_train, y_train)\n\nX_train.shape, X_over.shape, X_smot.shape","22a4d221":"C = np.logspace(0, -2, 10)       # [1, 1e-1, 1e-2, 1e-3]\niters = [15, 25, 50, 75]\nepsilon_stop = [1e-4]\nclass_weight = [None]         # \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0432 \u0441\u043b\u0443\u0447\u0430\u0438 \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0431\u043e\u0440\u043e\u043a\n# class_weight = ['balanced']   # \u0434\u043b\u044f \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\nparam_grid = [\n    {'C': C,\n     'penalty': ['l1'],\n     'solver': ['liblinear'],\n     'class_weight': class_weight,\n     'multi_class': ['auto'],\n     'max_iter': iters,\n     'tol': epsilon_stop},\n    {'C': C,\n     'penalty': ['l2'],\n     'solver': ['liblinear', 'newton-cg', 'lbfgs', 'saga'],\n     'class_weight': class_weight,\n     'multi_class': ['auto'],\n     'max_iter': iters,\n     'tol':epsilon_stop},\n    {'C': C,\n     'penalty': ['elasticnet'],\n     'solver': ['saga'],\n     'class_weight': class_weight,\n     'multi_class': ['auto'],\n     'max_iter': iters,\n     'tol':epsilon_stop},\n    {'C': ['none'],\n     'penalty': ['none'],\n     'solver': ['lbfgs', 'sag'],\n     'class_weight': class_weight,\n     'multi_class': ['auto'],\n     'max_iter': iters,\n     'tol':epsilon_stop}]","a10e7187":"# \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043e\u0434\u0438\u043d \u0438\u0437 \u0434\u0432\u0443\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f:\n# X_train, y_train = X_over, y_over\n# X_train, y_train = X_smot, y_smot\n\n# model = LogisticRegression()  # solver='liblinear'\n# model.fit(X_train, y_train)\n\n# # \u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043c \u043f\u043e\u0438\u0441\u043a \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 GridSearchCV \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043f\u043e \u0441\u0435\u0442\u043a\u0435 param_grid:\n# grid_search = GridSearchCV(model, param_grid, scoring='f1', n_jobs=-1, cv=5)\n# grid_search.fit(X_train, y_train)\n# # grid_search.best_params_\n\n# # \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u043e:\n# best_model = grid_search.best_estimator_\n# best_parameters = best_model.get_params()\n# for param_name in sorted(best_parameters.keys()):\n#     print('\\t%s: %r' % (param_name, best_parameters[param_name]))","1c6ab9d7":"# 1. \u0418\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 train \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438:\n# X, y = X_train, y_train\n# model = LogisticRegression(C=1, class_weight='balanced', max_iter=75, penalty='none', solver='sag', tol=1e-4, multi_class='auto')\n\n# 2. \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u044d\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e RandomOverSampler \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043e\u043f\u0442\u0438\u043f\u0430\u043b\u044c\u043d\u044b\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0434 \u043d\u0435\u0433\u043e:\nX, y = X_over, y_over\nmodel = LogisticRegression(C=1e-1, class_weight=None, max_iter=50, penalty='l2', solver='liblinear', tol=1e-4, multi_class='auto')\n# model = LogisticRegression(C=1e-2, class_weight=None, max_iter=25, penalty='l2', solver='lbfgs', tol=1e-4, multi_class='auto')\n\n# 3. \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u044d\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e SMOTE (\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043e\u043f\u0442\u0438\u043f\u0430\u043b\u044c\u043d\u044b\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0434 \u043d\u0435\u0433\u043e):\n# X, y = X_smot, y_smot\n# model = LogisticRegression(C=1e-1, class_weight=None, max_iter=100, penalty='l2', solver='newton-cg', tol=1e-4, multi_class='auto')","0ef0f1d1":"# # \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 f1 (\u0441 \u043f\u043e\u0440\u043e\u0433\u043e\u043c \u043e\u0442\u0441\u0435\u0447\u0435\u043d\u0438\u044f 0,5):\n# model_check = model\n# model_check.fit(X, y)\n# y_pred = model_check.predict(X_valid)\n# f1_score(y_valid, y_pred).T","5710e2c9":"# # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0432\u0448\u0438\u0441\u044c \u0441 \u0432\u044b\u0431\u043e\u0440\u043e\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0435\u0449\u0435 \u0440\u0430\u0437 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u0438, \u0447\u0442\u043e \u043f\u0430\u0440\u0430\u0437\u0438\u0442\u043d\u044b\u0445 \u043d\u0435 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c:\n# dict_exc_param = {}\n# for param in X.columns.values:\n#     model_check_1 = model\n#     model_check_1.fit(X.drop(columns=param, axis=1), y)\n#     y_pred = model_check_1.predict(X_valid.drop(columns=param, axis=1))\n#     dict_exc_param[param] = f1_score(y_valid, y_pred).T\n\n# # \u041d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u0442\u0440\u043e\u0435 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0445 f1 \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438:\n# sorted(dict_exc_param.items(), key=lambda x: -x[1])[:7]","860f8c7d":"model_LR = model\nmodel_LR.fit(X, y)\ny_pred_proba = model_LR.predict_proba(X_valid)\n\nmatrix = pd.DataFrame()\nres = pd.DataFrame(y_pred_proba[:, 1], columns=['prob'])\n\nfor threshold in range(50, 65, 1):  # 50, 70, 1\n    y_pred_cut = res.prob.apply(lambda x: 1 if x >= threshold\/100 else 0)\n    T_def_0, F_def_0, F_def_1, T_def_1 = confusion_matrix(y_valid, y_pred_cut).ravel()\n    f1 = f1_score(y_valid, y_pred_cut.values).T\n    BAS = balanced_accuracy_score(y_valid, y_pred_cut.values)\n    matrix = matrix.append(pd.DataFrame(data=[[T_def_0, F_def_0, F_def_1, T_def_1, f1, BAS]], \n                                        columns=['T_def_0', 'F_def_0', 'F_def_1', 'T_def_1', 'f1_score', 'BAS'], \n                                        index=[threshold\/100]))\n\nmatrix['profit'] = matrix.T_def_0 - matrix.F_def_0 + matrix.T_def_1 - 8 * matrix.F_def_1\n\n# \u0422\u0440\u0438 \u043b\u0443\u0447\u0448\u0438\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 (\u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 f1) \u0431\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0432 \u043d\u043e\u0432\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443:\ntop3_model_LR = matrix.sort_values(by='f1_score', ascending=False).iloc[:3]\n\nmatrix","715f2bb8":"max_f1 = matrix[matrix.f1_score == matrix.f1_score.max()].index\ny_pred_prob = pd.DataFrame(model_LR.predict_proba(X_valid))\ny_pred = y_pred_prob.iloc[:, -1].apply(lambda x: 1 if x >= max_f1 else 0)\nprint(classification_report(y_valid, y_pred))","0a14f84a":"y_pred_proba = model_LR.predict_proba(X_valid)\nroc_auc = roc_auc_score(y_valid, y_pred_proba[:, 1])\nfpr, tpr, thresholds = roc_curve(y_valid, y_pred_proba[:, 1])\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label='Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc='lower right')","ccf6224e":"# \u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 cross_validate:\ncv_metrics = cross_validate(model_LR, X, y, cv=5, scoring='f1_micro', return_train_score=True)\n\ndef plot_cv_metrics(cv_metrics):\n    avg_f1_train, std_f1_train = cv_metrics['train_score'].mean(), cv_metrics['train_score'].std()\n    avg_f1_valid, std_f1_valid = cv_metrics['test_score'].mean(), cv_metrics['test_score'].std()\n    print('[train] F1-score = {:.2f} +\/- {:.2f}'.format(avg_f1_train, std_f1_train))\n    print('[valid] F1-score = {:.2f} +\/- {:.2f}'.format(avg_f1_valid, std_f1_valid))\n    \n    plt.figure(figsize=(15, 5))\n\n    plt.plot(cv_metrics['train_score'], label='train', marker='.')\n    plt.plot(cv_metrics['test_score'], label='valid', marker='.')\n\n    plt.ylim([0., 1.]);\n    plt.xlabel('CV iteration', fontsize=15)\n    plt.ylabel('F1-score', fontsize=15)\n    plt.legend(fontsize=15)\n    \nplot_cv_metrics(cv_metrics)","b8464a0c":"SPLIT = 10   # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0434\u043b\u044f StratifiedShuffleSplit \u0438 KFold","ca038fde":"model_LR_sss = model\nsss = StratifiedShuffleSplit(n_splits=SPLIT, random_state=SEED)\n\ntrain_index, valid_index = [split for split in sss.split(X, y)][0]\n\nX_train_sss = X.iloc[train_index, :]\ny_train_sss = y[train_index]\nX_valid_sss = X.iloc[valid_index, :]\ny_valid_sss = y[valid_index]\n\nmodel_LR_sss.fit(X_train_sss, y_train_sss)\ny_pred_proba = model_LR_sss.predict_proba(X_valid)\n\nmatrix = pd.DataFrame()\nres = pd.DataFrame(y_pred_proba[:, 1], columns=['prob'])\n\nfor threshold in range(50, 65, 1):\n    y_pred_cut = res.prob.apply(lambda x: 1 if x >= threshold\/100 else 0)\n    T_def_0, F_def_0, F_def_1, T_def_1 = confusion_matrix(y_valid, y_pred_cut).ravel()\n    f1 = f1_score(y_valid, y_pred_cut.values).T\n    BAS = balanced_accuracy_score(y_valid, y_pred_cut.values)\n    matrix = matrix.append(pd.DataFrame(data=[[T_def_0, F_def_0, F_def_1, T_def_1, f1, BAS]], \n                                        columns=['T_def_0', 'F_def_0', 'F_def_1', 'T_def_1', 'f1_score', 'BAS'], \n                                        index=[threshold\/100]))\n\nmatrix['profit'] = matrix.T_def_0 - matrix.F_def_0 + matrix.T_def_1 - 8 * matrix.F_def_1\n\n# \u0411\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0442\u0440\u0438 \u043b\u0443\u0447\u0448\u0438\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 (\u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 f1) \u0432 \u043d\u043e\u0432\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443:\ntop3_model_LR_sss = matrix.sort_values(by='f1_score', ascending=False).iloc[:3]\nmatrix","20304cbc":"max_f1 = matrix[matrix.f1_score == matrix.f1_score.max()].index\ny_pred_prob = pd.DataFrame(model_LR_sss.predict_proba(X_valid))\ny_pred = y_pred_prob.iloc[:, -1].apply(lambda x: 1 if x >= max_f1 else 0)\nprint(classification_report(y_valid, y_pred))","9398b017":"model_LR_kf = model\nkf = KFold(n_splits=SPLIT, shuffle=True, random_state=SEED)\n\nfor train_index, test_index in kf.split(X, y):\n    X_train_kf = X.iloc[train_index, :]\n    y_train_kf = y[train_index]\n    X_test_kf = X.iloc[test_index, :]\n    y_test_kf = y[test_index]\n    model_LR_kf.fit(X_train_kf, y_train_kf)\n\ny_pred_proba = model_LR_kf.predict_proba(X_valid)\n\nmatrix = pd.DataFrame()\nres = pd.DataFrame(y_pred_proba[:, 1], columns=['prob'])\n\nfor threshold in range(50, 65, 1):\n    y_pred_cut = res.prob.apply(lambda x: 1 if x >= threshold\/100 else 0)\n    T_def_0, F_def_0, F_def_1, T_def_1 = confusion_matrix(y_valid, y_pred_cut).ravel()\n    f1 = f1_score(y_valid, y_pred_cut.values).T\n    BAS = balanced_accuracy_score(y_valid, y_pred_cut.values)\n    matrix = matrix.append(pd.DataFrame(data=[[T_def_0, F_def_0, F_def_1, T_def_1, f1, BAS]], \n                                        columns=['T_def_0', 'F_def_0', 'F_def_1', 'T_def_1', 'f1_score', 'BAS'], \n                                        index=[threshold\/100]))\n\nmatrix['profit'] = matrix.T_def_0 - matrix.F_def_0 + matrix.T_def_1 - 8 * matrix.F_def_1\n\n# \u0411\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0442\u0440\u0438 \u043b\u0443\u0447\u0448\u0438\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 (\u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 f1) \u0432 \u043d\u043e\u0432\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443:\ntop3_model_LR_kf = matrix.sort_values(by='f1_score', ascending=False).iloc[:3]\nmatrix","bf9f2c19":"max_f1 = matrix[matrix.f1_score == matrix.f1_score.max()].index\ny_pred_prob = pd.DataFrame(model_LR_kf.predict_proba(X_valid))\ny_pred = y_pred_prob.iloc[:, -1].apply(lambda x: 1 if x >= max_f1 else 0)\nprint(classification_report(y_valid, y_pred))","4dbd0dec":"# \u0412\u044b\u0431\u0438\u0440\u0435\u043c \u043b\u0443\u0447\u0448\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0438 \u043f\u043e\u0440\u043e\u0433 \u043e\u0442\u0441\u0435\u0447\u0435\u043d\u0438\u044f:\ntop_score_df = pd.DataFrame()\ntop_score_df = pd.concat([top3_model_LR, top3_model_LR_sss, top3_model_LR_kf], keys=['model_LR', 'model_LR_sss', 'model_LR_kf'])\ntop_score_df","52c7753e":"# \u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e f1 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 (\u043d\u043e \u0441 \u0443\u0445\u0443\u0434\u0448\u0435\u043d\u0438\u0435\u043c \u043d\u0430 test):\n# 0.362998 - model_LR\n# 0.364388 - model_LR_sss\n# 0.363171 - model_LR_kf","ad3e5ffa":"# \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u044b\u0445 \u0440\u0430\u043d\u0435\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043f\u043e f1 \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0438 \u043f\u043e\u0440\u043e\u0433 \u043e\u0442\u0441\u0435\u0447\u0435\u043d\u0438\u044f:\nthreshold_cut = 0.588 # \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 submission \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0431\u043e\u043b\u0435\u0435 \u0442\u043e\u0447\u043d\u043e \u043f\u043e\u0440\u043e\u0433 \u043e\u0442\u0441\u0435\u0447\u0435\u043d\u0438\u044f.\npredict_submission = model_LR.predict_proba(test)    # X_Over, 0.588; f1=0.35401\n# predict_submission = model_LR_sss.predict_proba(test)  \n# predict_submission = model_LR_kf.predict_proba(test)\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0440\u0430\u0441\u0447\u0435\u0442 \u0432 'submission.csv':\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')\nsample_submission['default'] = predict_submission[:, -1]\nsample_submission['default'] = sample_submission['default'].apply(lambda x: 1 if x >= threshold_cut else 0)\nsample_submission.to_csv('submission.csv', index=False)\n\nprint(sample_submission.shape)\nsample_submission.head(5)","65c7597b":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0442\u0440\u0435\u0442\u044c \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c, \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u043e\u0439 \u0432\u043b\u0430\u0434\u0435\u044e\u0442 \u043e\u043a\u043e\u043b\u043e 20% \u0432\u044b\u0431\u043e\u0440\u043a\u0438.\n\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0441\u043d\u0438\u0436\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043b\u0438\u0446 \u0432\u043b\u0430\u0434\u0435\u044e\u0449\u0438\u0445 \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u043e\u0439 - 8,7% (\u0434\u043b\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0430\u0432\u0442\u043e \u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u0430\u0432\u0442\u043e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u0430 - 13,3% \u0438 13,7% \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e).\n\n##### \u0421\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0435\u043b\u0430\u0435\u043c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"car\" - \u043d\u0435 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439.","8ac0513d":"### 'first_time'","158c8dd7":"### \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435:","b4261fc0":"#### 'sex'","3f53b207":"##### \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0432 \u043d\u0430 test \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043b\u044e\u0431\u043e\u0433\u043e \u0438\u0437 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e f1.","5bf6e427":"### \u0418\u0442\u043e\u0433\u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 (\"\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430\" \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0438\u043c \u043a\u0430\u043a: \"\u0412\u0414\"):\n* client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 - \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430, \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430;\n* age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 - \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u043f\u0430\u0440\u0430\u0431\u043e\u043b\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0412\u0414 \u0441 \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u043e\u043c \u0432 \u0440\u0430\u0439\u043e\u043d\u0435 55 \u043b\u0435\u0442 \u0438 \u0440\u0435\u0437\u043a\u0438\u043c \u0440\u043e\u0441\u0442\u043e\u043c \u043f\u043e\u0441\u043b\u0435 70 \u043b\u0435\u0442;\n* decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a - \u0445\u043e\u0440\u043e\u0448\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0412\u0414, \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0439 \u0440\u043e\u0441\u0442;\n* score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418 - \u0438\u043c\u0435\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u043f\u0430\u0440\u0430\u0431\u043e\u043b\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0412\u0414 \u0441 \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u043e\u0432 \u0432 \u0440\u0430\u0439\u043e\u043d\u0435 -2,8 \u0438 \u0431\u041e\u043b\u044c\u0448\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u043e\u043c \u0432 \u043f\u0440\u0430\u0432\u043e\u043c \u0445\u0432\u043e\u0441\u0442\u0435;\n* bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418 - \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u043a \u0438 \u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 decline_app_cnt, - \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0439 \u0440\u043e\u0441\u0442;\n* income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 - \u043f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043c\u0435\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u043d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0441\u043e\u0442\u044c \u0412\u0414 \u043d\u043e\u0441\u0438\u0442 \u043d\u0435 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0439 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440;","cb20f950":"## 2. \u0410\u043d\u0430\u043b\u0438\u0437 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u043e\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:","d879a823":"##### \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0434\u043b\u044f \u0433\u0440\u0443\u043f\u043f sna=3 \u0438 sna=2 \u0431\u043b\u0438\u0437\u043a\u0438\u0435 \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430.","58178196":"##### \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043d\u0430 \u043c\u0430\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0445\u0432\u043e\u0441\u0442\u0430\u0445 ((-4;-3) \u0438 (-0.5;0.2))  \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0440\u0430\u0437\u0431\u0440\u043e\u0434 \u0438 \u0448\u0430\u0442\u0430\u043d\u0438\u044f.\n##### \u041d\u043e \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0441\u0442\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0434\u043b\u044f \u0441\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0435 \u043f\u0440\u0438\u0432\u0435\u043b\u0430 \u043a \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438.","84cb0b1c":"## 10. \u0412\u044b\u0432\u043e\u0434\u044b:","a5506102":"##### \u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 (\u0441 \u043f\u0438\u043a\u043e\u043c \u0434\u043b\u044f home_address=2).","b1f0fb5a":"### 'bki_request_cnt'","52f56ae6":"### 'age'","8c502387":"### 'sna'","07e36939":"##### \u0412\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0435 \u043a \u043f\u043e\u043b\u0443 - \u043d\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f (\u0432\u0438\u0434\u0438\u043c\u043e \u043c\u043e\u0436\u0435\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0435 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439).","5c881688":"### 'work_address'","c04949db":"## 7. \u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432:","bc3e7110":"\u0414\u043e\u0441\u0442\u0438\u0447 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432 0,35554 (submission \u043d\u0430 test) \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0437\u0430 \u0441\u0447\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439:\n* \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043e\u043a, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0432 \u043e\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u043b\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438), \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 ('month', 'sex_car') \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043d\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 ('client_id', 'car', 'sex');\n* \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0441\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 (RobustScaler) \u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 (RandomOverSampler);\n* \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 LogisticRegression \u0438 \u043f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u0435\u0442\u043e\u0434\u043e\u043c GridSearchCV;\n* \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u0440\u043e\u0433\u043e \u043e\u0442\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 (\u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u043d\u043e\u0441\u0442\u044c \u0437\u0430 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0443 - Daniil Martsenyuk).\n\n\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0431\u044b\u043b\u043e \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043e \u043e\u0433\u0440\u043e\u043c\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432 \u043f\u043e\u043f\u044b\u0442\u043a\u0430\u0445 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435 \u043e\u043a\u043e\u043b\u043e 90% \u043e\u0442 \u043e\u0431\u0449\u0435\u0433\u043e \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438), \u043d\u043e \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441 \u043d\u0443\u043b\u0435\u0432\u044b\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c (\u0438\u043b\u0438 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u043f\u0440\u0438\u0440\u043e\u0441\u0442\u0430 +0,001-0,002). \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u043b\u043e\u0441\u044c \u0432 \u0442\u043e\u043c \u0447\u0442\u043e \u043f\u0440\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u0445 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0443\u0447\u0430\u043b \u043f\u0440\u0438\u0440\u043e\u0441\u0442 f1 \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 (\u0434\u043e 0,364), \u043d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u043b \u0443\u0445\u0443\u0434\u0448\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u0430 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 (test), \u0447\u0442\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b\u043e \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430 submission. \u0422\u0430\u043a \u0436\u0435 \u0443\u0441\u043b\u043e\u0436\u043d\u044f\u043b\u043e \u0437\u0430\u0434\u0430\u0447\u0443 \u0442\u043e \u0447\u0442\u043e \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0440\u043e\u0433 \u043e\u0442\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u043b\u0441\u044f \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 0,56-0,57, \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a \u0434\u043b\u044f \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0440\u043e\u0433 \u043e\u0442\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u043b\u0441\u044f \u0432 \u0440\u0430\u0439\u043e\u043d\u0435 0,59.","78142a78":"### 'client_id'","e3f42482":"#### 'foreign_passport'","09f49f97":"##### \u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043b\u0438\u0446 \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432 \u0434\u0432\u0430 \u0440\u0430\u0437\u0430 \u043d\u0438\u0436\u0435, \u0447\u0435\u043c \u0434\u043b\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445: 7,4% \u043f\u0440\u043e\u0442\u0438\u0432 13,6%","bf21793e":"##### \u041f\u0440\u043e\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u0430\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c.","84e54aaa":"### 1. LogisticRegression + TrainTestSplit","84e02a1f":"#### 'app_date'","79e87d0b":"#### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:","3896b44d":"## 3. \u0410\u043d\u0430\u043b\u0438\u0437 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:","fcd73374":"## 4. \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0438 \u043e\u0446\u0435\u043d\u043a\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438:","055c0155":"##### \u0414\u0430\u043b\u0435\u0435 \u043a\u043e\u0434 \u0441\u043a\u0440\u044b\u0442, \u0442\u0430\u043a \u043a\u0430\u043a \u0435\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0443\u0436\u0435 \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b.","a3c2c5ee":"### 'region_rating'","c61d64a6":"## 5. Feature Engineering:","a5084a83":"##### \u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043b\u0438\u0446 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438 - 11,4%, \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a \u0434\u043b\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 (SCH) - 15%. \u0421\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0430\u043c\u044b\u043c \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u043c - \u043f\u043b\u043e\u0445\u0430\u044f \u0438\u0434\u0435\u044f. \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430.","d7312616":"### 'score_bki'","4e6da488":"#### 'education'\n* SCH - High School (9-12 \u043a\u043b\u0430\u0441\u0441)\n* UGR - Undergraduate (\u0431\u0430\u043a\u0430\u043b\u0430\u0432\u0440\u0438\u0430\u0442, 4 \u0433\u043e\u0434\u0430)\n* GRD - Graduate (\u043c\u0430\u0433\u0438\u0441\u0442\u0440\u0430\u0442\u0443\u0440\u0430, 6 \u043b\u0435\u0442)\n* PGR - Postgraduate (\u0434\u043e\u043a\u0442\u043e\u0440\u0430\u043d\u0442\u0443\u0440\u0430, 10 \u043b\u0435\u0442)\n* ACD - ... \u0432\u0438\u0434\u0438\u043c\u043e \u0447\u0442\u043e-\u0442\u043e \u0442\u0438\u043f\u0430 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438","f6ba28e4":"### \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c ROC_AUC:","2eb4a701":"#### 'car', 'car_type'","d9477490":"### 2. LogisticRegression + StratifiedShuffleSplit","db547050":"### 'good_work'","ba3bc882":"### 'decline_app_cnt'","372293c4":"## 8. \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438:","f90e3b1e":"## 9. Submission","b3349906":"### 'income'","7ba55948":"### \u0418\u0442\u043e\u0433\u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 (\"\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430\" \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0438\u043c \u043a\u0430\u043a: \"\u0412\u0414\"):\n* sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430, - \u043d\u0435 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0412\u0414;\n* car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f, - \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u0432 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c car_type \u043c\u043e\u0436\u043d\u043e \u0443\u0442\u0432\u0435\u0440\u0434\u0430\u0442\u044c \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0435 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043a \u0412\u0414;\n* car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438, - \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0412\u0414;\n* foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, - \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0412\u0414;\n* education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f, - \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445; \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043b\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0449\u0438\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430.\n* app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438, - \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u0412\u0414;\n* good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b, - \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0412\u0414;\n* region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430, - \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0412\u0414;\n* home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430, - \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0412\u0414;\n* work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430, - \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0412\u0414;\n* sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430 - \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043d\u0435\u0441\u0442\u0438 \u043a \u043e\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u043c \u0440\u043e\u0441\u0442\u043e\u043c \u0412\u0414;\n* first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435 - \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0412\u0414.","4133f85e":"### \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0430\u0440\u0430\u0437\u0438\u0442\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432:","835784a2":"### 3. LogisticRegression + KFold","66d002a2":"##### \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430 \u0438 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c.","bf1e0c3c":"#### 'sex' + 'car' = 'sex_car' - \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0434\u0432\u0430 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0430 \u043e\u0434\u0438\u043d \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439","10b1a423":"### 'home_address'","9d734fba":"## 6. \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438:","e8b15d52":"##### \u041f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043e\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b.","6e080da4":"### \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u0442\u0440\u0435\u043c\u044f \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u043c\u0438 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438:","b4dec83d":"### \u0412\u044b\u0431\u043e\u0440 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432:","ba495e43":"##### \u0414\u0435\u043b\u0430\u0435\u043c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440\u0443 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c (\u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 01.01.2014 \u0438 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044f 30.04.2014). \u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043d\u0435 \u043d\u0435\u0441\u0435\u0442 \u043d\u0438 \u043a\u0430\u043a\u043e\u0439 \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0439 (\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0439) \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430.","f0515c35":"## 1. \u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\n\n#### \u0426\u0435\u043b\u044c: \n\"\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e client_id \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 ('test.csv') \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f default \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439. \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\u0435: \n* client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430;\n* default - \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443.\"\n\n\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438: train(73,799 \u0437\u0430\u043f\u0438\u0441\u0435\u0439) \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439: test(36,349 \u0437\u0430\u043f\u0438\u0441\u0435\u0439). \u0414\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0431\u043e\u0440\u043e\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c (\u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0432 \u043e\u0431\u043e\u0438\u0445 \u0444\u0430\u0439\u043b\u0430\u0445 \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442\u0441\u044f), \u043d\u043e \u0438\u0441\u043a\u043e\u043c\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0432 \u043f\u0430\u0440\u0430\u043c\u0442\u0440\u0435 default \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b \u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b \u0432 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438: 12,7% \/ 87,3%\n\n##### \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u044f, \u0447\u0442\u043e \u0438\u0441\u043a\u043e\u043c\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b, \u0430 \u0442\u0430\u043a \u0436\u0435 \u0442\u043e, \u0447\u0442\u043e \u043d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u0432\u0435\u0440\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043f\u043e \u043e\u0431\u0435\u0438\u043c \u043a\u043b\u0430\u0441\u0441\u0430\u043c - \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c F-\u043c\u0435\u0440\u0443 (\u043d\u0443 \u0438 \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u043f\u043e \u043d\u0435\u0439 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0432 \u043b\u0438\u0434\u0435\u0440\u0431\u043e\u0440\u0434\u0435!).","9d1d47b8":"##### \u0421\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0438\u0437 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f) \u043d\u0435 \u0443\u0432\u0435\u043d\u0447\u0430\u043b\u0430\u0441\u044c \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043f\u0440\u0438\u0431\u0430\u0432\u043a\u043e\u0439 \u0434\u043b\u044f f1."}}