{"cell_type":{"3a9bb7e8":"code","6171d1ba":"code","d1382931":"code","ea9626b9":"code","cc95841f":"code","2b0824e6":"code","875291a2":"code","ebfd738e":"code","338f6228":"code","7850944c":"code","dea255a5":"code","9ec5df47":"code","a900eca9":"code","ee6c5194":"code","c1d333a9":"code","468c5b42":"code","a70c5f4b":"code","295d1216":"code","2fe1c0bb":"code","bae1f80f":"code","0328c23d":"code","d313b5b2":"code","45376482":"code","13111fd1":"code","9ff82e3e":"code","8f09be04":"code","82be0d21":"code","f00275be":"code","d636af37":"code","288d4f53":"code","ab4ec263":"code","a09c9550":"code","4e873cb6":"code","2f611c0f":"code","fe8f78dd":"code","2ffe1691":"code","09e7d561":"code","f7002446":"markdown","4c4d9e4f":"markdown","b5d8f763":"markdown","bd7250c3":"markdown","3a9e16cb":"markdown","c9e93c8d":"markdown","7e98f330":"markdown","fcc7544e":"markdown","ea4a61d0":"markdown","0dced3f9":"markdown","db6b76ba":"markdown","8f9bc901":"markdown","ae991588":"markdown","5514b4b7":"markdown"},"source":{"3a9bb7e8":"# Titanic, ML Exercise\n# Elberth Adri\u00e1n Garro S\u00e1nchez\n# June, 2021","6171d1ba":"import pandas as pd\nimport plotly.graph_objects as go\n\nfrom pandas.api.types import is_string_dtype\nfrom pandas.api.types import is_numeric_dtype\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score","d1382931":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","ea9626b9":"train.dtypes","cc95841f":"test.dtypes","2b0824e6":"train.info()","875291a2":"test.info()","ebfd738e":"train.head()","338f6228":"test.head()","7850944c":"cols_with_nan_train = train.columns[train.isna().any()].tolist()\ncols_with_nan_train","dea255a5":"fig_train = go.Figure(\n    data=\n        [\n            go.Bar(\n                x=[\n                    'Age',\n                    'Cabin',\n                    'Embarked'\n                ],\n                y=[\n                    sum(pd.isnull(train['Age'])), \n                    sum(pd.isnull(train['Cabin'])),\n                    sum(pd.isnull(train['Embarked']))\n                ]\n            )\n        ],\n        layout=go.Layout\n        (\n            title=go.layout.Title(text='Train Nulls Count')\n        )\n)\nfig_train.show()","9ec5df47":"cols_with_nan_test = test.columns[test.isna().any()].tolist()\ncols_with_nan_test","a900eca9":"fig_test = go.Figure(\n    data=\n        [\n            go.Bar(\n                x=[\n                    'Age',\n                    'Fare',\n                    'Cabin'\n                ],\n                y=[\n                    sum(pd.isnull(test['Age'])), \n                    sum(pd.isnull(test['Fare'])),\n                    sum(pd.isnull(test['Cabin']))\n                ]\n            )\n        ],\n        layout=go.Layout\n        (\n            title=go.layout.Title(text='Test Nulls Count')\n        )\n)\nfig_test.show()","ee6c5194":"# Getting NaN cols that are numeric on train data\nnan_cols_numeric_train = [col for col in cols_with_nan_train if is_numeric_dtype(train[col])]\nnan_cols_numeric_train","c1d333a9":"# Replace NaN values on numeric cols\nfor col in nan_cols_numeric_train:\n    train[col].fillna((train[col].mean()), inplace=True)\ntrain.head()","468c5b42":"# Getting NaN cols that are string\nnan_cols_string_train = [col for col in cols_with_nan_train if is_string_dtype(train[col])]\nnan_cols_string_train","a70c5f4b":"# Replace NaN values on string cols\nfor col in nan_cols_string_train:\n    train[col].fillna((train[col].value_counts().index[0]), inplace=True)\ntrain.head()","295d1216":"# Reset dataframe index\ntrain.reset_index()","2fe1c0bb":"# Check again if exist NaN values (we are looking for an empty list):\ncols_with_nan_train_second_check = train.columns[train.isna().any()].tolist()\ncols_with_nan_train_second_check","bae1f80f":"# Getting NaN cols that are numeric on test data\nnan_cols_numeric_test = [col for col in cols_with_nan_test if is_numeric_dtype(test[col])]\nnan_cols_numeric_test","0328c23d":"# Replace NaN values on numeric cols\nfor col in nan_cols_numeric_test:\n    test[col].fillna((test[col].mean()), inplace=True)\ntest.head()","d313b5b2":"# Getting NaN cols that are string\nnan_cols_string_test = [col for col in cols_with_nan_test if is_string_dtype(test[col])]\nnan_cols_string_test","45376482":"# Replace NaN values on string cols\nfor col in nan_cols_string_test:\n    test[col].fillna((test[col].value_counts().index[0]), inplace=True)\ntest.head()","13111fd1":"# Reset dataframe index\ntest.reset_index()","9ff82e3e":"# Check again if exist NaN values (we are looking for an empty list):\ncols_with_nan_test_second_check = test.columns[test.isna().any()].tolist()\ncols_with_nan_test_second_check","8f09be04":"train = train.drop(['Name'], axis = 1)\ntrain.head()","82be0d21":"test = test.drop(['Name'], axis = 1)\ntest.head()","f00275be":"# Label Encoding for Train Data\nencoder_train = OrdinalEncoder()\nencoder_train.fit(train[['Sex', 'Ticket', 'Cabin', 'Embarked']])\ntrain[['Sex', 'Ticket', 'Cabin', 'Embarked']] = encoder_train.transform(train[['Sex', 'Ticket', 'Cabin', 'Embarked']])\ntrain.head()","d636af37":"# Label Encoding for Test Data\nencoder_test = OrdinalEncoder()\nencoder_test.fit(test[['Sex', 'Ticket', 'Cabin', 'Embarked']])\ntest[['Sex', 'Ticket', 'Cabin', 'Embarked']] = encoder_test.transform(test[['Sex', 'Ticket', 'Cabin', 'Embarked']])\ntest.head()","288d4f53":"X_train = train.drop(['PassengerId', 'Survived'], axis = 1)\ny_train = train['Survived']\n\nX_test = test.drop(['PassengerId'], axis = 1)","ab4ec263":"X_train.head()","a09c9550":"X_test.head()","4e873cb6":"rfc_model = RandomForestClassifier(max_depth=10, random_state=5)\nrfc_model.fit(X_train, y_train)\n\nscores = cross_val_score(rfc_model, X_train, y_train, cv=5)\n\nfinal_score = rfc_model.score(X_train, y_train)\n\nprint(f\"Scores: {scores} \\nScores Mean: {scores.mean()} \\nFinal Score: {final_score}\")","2f611c0f":"predictions = rfc_model.predict(X_test)","fe8f78dd":"submission = pd.DataFrame({'PassengerId':test['PassengerId'], 'Survived':predictions})","2ffe1691":"submission.head()","09e7d561":"filename = 'gender_submission.csv'\n\nsubmission.to_csv(filename,index=False)","f7002446":"# Load Data","4c4d9e4f":"## Random Forest Classifier","b5d8f763":"## Detect NaN values on test data","bd7250c3":"# Predict and Save","3a9e16cb":"# Feature Engineering","c9e93c8d":"## Remove columns","7e98f330":"# Data review","fcc7544e":"## Fill nulls on train data","ea4a61d0":"# Imports","0dced3f9":"## Encode Features","db6b76ba":"# Define X and y","8f9bc901":"## Detect NaN values on train data","ae991588":"# Models","5514b4b7":"## Fill nulls on test data"}}