{"cell_type":{"519c2385":"code","fbcf606e":"code","2244bc6e":"code","753e77e2":"code","8884abe2":"code","10674828":"code","01e06406":"code","67d7836a":"code","457612c9":"code","ac540246":"code","60bafa2d":"code","f0d52e4d":"code","3cde920a":"code","d5d27f92":"code","5f70dc68":"code","1b4bbe75":"code","19e360bb":"code","bad837b6":"code","3ec1d562":"code","a6512348":"code","cd4be4b3":"code","98aac710":"code","686d0861":"code","da9822ca":"code","398752a5":"code","1322fca4":"code","1d97ce1b":"code","000f257c":"code","91cdd292":"code","85b3d69f":"code","4e4f9bcc":"code","68169592":"code","f2b28e15":"code","9f840c9c":"code","8f3f7070":"code","4b8619a6":"code","68b79612":"code","f4a1ac01":"code","bebe5c8a":"code","e341f694":"code","c21b25b0":"code","5711dd39":"code","a4421228":"code","f22dbc08":"code","e42b1d04":"code","30a4546e":"code","a3819c27":"code","defa8115":"code","0423a6c0":"markdown","fe878358":"markdown","58b2c989":"markdown","d1081aa1":"markdown","7856664e":"markdown","fa150efa":"markdown","aa8f9a3b":"markdown","a5bcf173":"markdown","8012369d":"markdown","243967c1":"markdown","5eefa9c2":"markdown","620d3970":"markdown","3233ae38":"markdown","a0ee30d9":"markdown","83d75e26":"markdown","71073d1b":"markdown","3c5c6789":"markdown","d3bd5a22":"markdown","c617b143":"markdown","ef202d83":"markdown"},"source":{"519c2385":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn import metrics\nfrom sklearn.cluster import KMeans\nfrom scipy.spatial.distance import cdist \nfrom colorama import Fore, Back, Style\ny_ = Fore.YELLOW\nr_ = Fore.RED\ng_ = Fore.GREEN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA","fbcf606e":"custom_colors = [\"#023e8a\", \"#0096c7\",\"#90e0ef\",\"#ff5400\",\"#ffbd00\"]\ncustomPalette = sns.set_palette(sns.color_palette(custom_colors))","2244bc6e":"sns.palplot(sns.color_palette(custom_colors),size=1)","753e77e2":"sns.set_context(\"poster\")","8884abe2":"players = pd.read_csv(r'..\/input\/indian-premier-league-csv-dataset\/Player.csv')\nplayers = players.drop([\"Is_Umpire\", \"Unnamed: 7\"], axis = 1)\nplayers.head(10)","10674828":"runs = pd.read_csv(r'..\/input\/indian-premier-league-csv-dataset\/Ball_by_Ball.csv')\nruns.head(10)","01e06406":"runs.Dissimal_Type.unique()","67d7836a":"runs['Dissimal_Type'] = runs['Dissimal_Type'].replace(r'^\\s*$', np.nan, regex=True)","457612c9":"runs.dtypes","ac540246":"runs[\"Extra_Runs\"] = pd.to_numeric(runs[\"Extra_Runs\"], errors=\"coerce\")\nruns[\"Extra_Runs\"] = runs[\"Extra_Runs\"].fillna(0)\n\nruns[\"Batsman_Scored\"] = pd.to_numeric(runs[\"Batsman_Scored\"], errors=\"coerce\")\nruns[\"Batsman_Scored\"] = runs[\"Batsman_Scored\"].fillna(0)","60bafa2d":"runs.head()","f0d52e4d":"batsmen_runs = []\nbatsmen_ballsFaced = []\n\nfor i in runs[\"Striker_Id\"].unique():\n    r = runs[\"Batsman_Scored\"][runs[\"Striker_Id\"] == i].sum()\n    b = runs[\"Match_Id\"][runs[\"Striker_Id\"] == i].count()\n    batsmen_runs.append(r)\n    batsmen_ballsFaced.append(b)\n\nbatsmen = pd.DataFrame({\"Player_Id\": runs[\"Striker_Id\"].unique()})\n\nbatsmen[\"Runs\"] = batsmen_runs\nbatsmen[\"Balls_played\"] = batsmen_ballsFaced\n\nbatsmen[\"Strike_Rate\"] = (batsmen[\"Runs\"] * 100 \/ batsmen[\"Balls_played\"]).round(2)","3cde920a":"batsmen.head(5)","d5d27f92":"def triple_plot(x, title,c):\n    fig, ax = plt.subplots(3,1,figsize=(20,12),sharex=True)\n    sns.distplot(x, ax=ax[0],color=c)\n    ax[0].set(xlabel=None)\n    ax[0].set_title('Histogram + KDE')\n    sns.boxplot(x, ax=ax[1],color=c)\n    ax[1].set(xlabel=None)\n    ax[1].set_title('Boxplot')\n    sns.violinplot(x, ax=ax[2],color=c)\n    ax[2].set(xlabel=None)\n    ax[2].set_title('Violin plot')\n    fig.suptitle(title, fontsize=25)\n    plt.tight_layout(pad=3.0)\n    plt.show()","5f70dc68":"triple_plot(batsmen[\"Strike_Rate\"],'Distribution of Strike Rate',custom_colors[0])","1b4bbe75":"batsmen = batsmen[batsmen[\"Strike_Rate\"] > 120]","19e360bb":"batsmen.head()","bad837b6":"triple_plot(batsmen[\"Strike_Rate\"],'Distribution of Strike Rate',custom_colors[1])","3ec1d562":"def scatter_plot(data,title,c,col1,col2):\n    fig = plt.figure(figsize=(12,6))\n    sns.scatterplot(x=col1, y=col2, data=data,color=c)\n    plt.title(title)\n    plt.show()","a6512348":"def elbow_method(X):\n    distortions = [] \n    inertias = [] \n    mapping1 = {} \n    mapping2 = {} \n    K = range(2,10) \n\n    for k in K:  \n        kmeans = KMeans(n_clusters=k)\n        kmeans.fit(X)     \n\n        distortions.append(sum(np.min(cdist(X, kmeans.cluster_centers_, \n                          'euclidean'),axis=1)) \/ X.shape[0]) \n        inertias.append(kmeans.inertia_) \n\n        mapping1[k] = sum(np.min(cdist(X, kmeans.cluster_centers_, \n                     'euclidean'),axis=1)) \/ X.shape[0] \n        mapping2[k] = kmeans.inertia_ \n\n    print(\"Distortion\")\n    for key,val in mapping1.items(): \n        print(str(key)+' : '+str(val)) \n\n    print(\"Inertia\")\n    for key,val in mapping2.items(): \n        print(str(key)+' : '+str(val)) \n\n    plt.plot(K, distortions, 'bx-',color=custom_colors[3]) \n    plt.xlabel('Values of K') \n    plt.ylabel('Distortion') \n    plt.xticks(K)\n    plt.title('Elbow Method using Distortion') \n    plt.show() \n\n    plt.plot(K, inertias, 'bx-',color=custom_colors[4]) \n    plt.xlabel('Values of K') \n    plt.ylabel('Inertia') \n    plt.xticks(K)\n    plt.title('Elbow Method using Inertia') \n    plt.show() ","cd4be4b3":"elbow_method(batsmen[[\"Strike_Rate\", \"Runs\"]])","98aac710":"def scores(X):\n    K = range(3,8) \n\n    for k in K:  \n        kmeans = KMeans(n_clusters=k)\n        kmeans.fit(X) \n        y_hat = kmeans.predict(X)\n        labels = kmeans.labels_\n        \n        a = metrics.silhouette_score(X, labels, metric = 'euclidean')\n        b = metrics.calinski_harabasz_score(X, labels)\n        \n        print(\"k={0}, Silhouette score={1}, Calinski harabasz score={2}\".format(k,a, b))","686d0861":"scores(batsmen[[\"Strike_Rate\", \"Runs\"]])","da9822ca":"kmeans = KMeans(n_clusters=4)\nkmeans.fit(batsmen[[\"Strike_Rate\", \"Runs\"]])\nbatsmen[\"cluster\"] = kmeans.labels_\n\nfig = plt.figure(figsize=(12,6))\n\ncolors = custom_colors\n\nfor r in range(1,6):\n    clustered_Batsmen = batsmen[batsmen[\"cluster\"] == r]\n    plt.scatter(clustered_Batsmen[\"Strike_Rate\"], clustered_Batsmen[\"Runs\"], color=colors[r-1])\n    \nplt.title(\"IPL Batsmen\")\nplt.xlabel(\"Strike Rate of the Batsmen\")\nplt.ylabel(\"Runs scored by the Batsmen\")\nplt.show()","398752a5":"batsmen = batsmen.sort_values(by='cluster')","1322fca4":"Players_batsmen = players[[\"Player_Id\", \"Player_Name\",\"Batting_Hand\",\"DOB\",\"Country\"]]","1d97ce1b":"batsmen = batsmen[batsmen.columns].merge(Players_batsmen, \"left\")\nbatsmen","000f257c":"fig = px.sunburst(batsmen, path=['Batting_Hand', 'cluster'],color='cluster')\nfig.show()","91cdd292":"batsmen.to_csv('\/kaggle\/working\/Batsmen.csv') ","85b3d69f":"bowlers_runs = []\nbowlers_over_count = []\n\nfor j in runs[\"Bowler_Id\"].unique():\n    r = runs[\"Batsman_Scored\"][runs[\"Bowler_Id\"] == j].sum() + runs[\"Extra_Runs\"][runs[\"Bowler_Id\"] == j].sum()\n    o = runs[\"Over_Id\"][runs[\"Bowler_Id\"] == j].count()\/6\n    \n    bowlers_runs.append(r)\n    bowlers_over_count.append(o)\n    \nbowlers = pd.DataFrame({\"Player_Id\": runs[\"Bowler_Id\"].unique()})\n\nbowlers[\"Runs\"] = bowlers_runs\nbowlers[\"Over_count\"] = bowlers_over_count\n\nbowlers[\"Econ_Rate\"] = (bowlers[\"Runs\"] \/ bowlers[\"Over_count\"]).round(2)\n\nbowlers.head()","4e4f9bcc":"triple_plot(bowlers[\"Econ_Rate\"],'Distribution of Economy Rate',custom_colors[0])","68169592":"bowlers = bowlers[(bowlers[\"Econ_Rate\"] > 4) & (bowlers[\"Econ_Rate\"] < 8.5)]","f2b28e15":"triple_plot(bowlers[\"Econ_Rate\"],'Distribution of Economy Rate',custom_colors[1])","9f840c9c":"elbow_method(batsmen[[\"Strike_Rate\", \"Runs\"]])","8f3f7070":"scores(batsmen[[\"Strike_Rate\", \"Runs\"]])","4b8619a6":"kmeans = KMeans(n_clusters=4)\nkmeans.fit(bowlers[[\"Econ_Rate\", \"Over_count\"]])\nbowlers[\"cluster\"] = kmeans.labels_\n\nfig = plt.figure(figsize=(12,6))\n\ncolors = custom_colors\n\nfor r in range(1,5):\n    clustered_Bowlers = bowlers[bowlers[\"cluster\"] == r]\n    plt.scatter(clustered_Bowlers[\"Econ_Rate\"], clustered_Bowlers[\"Over_count\"], color=colors[r-1])\n    \nplt.title(\"IPL Bowlers\")\nplt.xlabel(\"Economy Rate of the Bowler\")\nplt.ylabel(\"Number of Overs bowled by the Bowler\")\n    \nplt.show()","68b79612":"bowlers = bowlers.sort_values(by = 'cluster')\nbowlers.head()","f4a1ac01":"Players_bowlers = players[[\"Player_Id\", \"Player_Name\",\"Bowling_Skill\",\"DOB\",\"Country\"]]","bebe5c8a":"bowlers = bowlers[bowlers.columns].merge(Players_bowlers, \"left\")\nbowlers","e341f694":"bowlers = bowlers[bowlers['Bowling_Skill'].notna()]","c21b25b0":"df_b = bowlers[['Bowling_Skill','cluster']].copy()\nct = pd.crosstab(df_b.Bowling_Skill, df_b.cluster)\n\nct.plot.bar(stacked=True)\nplt.legend(title='cluster',loc='upper right',bbox_to_anchor=(1.25, 1))\nplt.gcf().set_size_inches(10,8)\nplt.show()","5711dd39":"bowlers.to_csv('\/kaggle\/working\/Bowlers.csv') ","a4421228":"final=pd.concat([batsmen,bowlers],sort=\"True\").reset_index(drop=True)\nfinal","f22dbc08":"final.to_csv('\/kaggle\/working\/final.csv')","e42b1d04":"batsmen_team=batsmen[['Player_Name','Strike_Rate','DOB','Country']].sort_values(by=['Strike_Rate'],ascending=False)\nbatsmen_team=batsmen_team.head(5)\nbatsmen_team","30a4546e":"bowlers_team=bowlers[['Player_Name','Econ_Rate','DOB','Country']].sort_values(by=['Econ_Rate'])\nbowlers_team=bowlers_team.head(5)\nbowlers_team","a3819c27":"d1 = pd.merge(batsmen,bowlers, how='inner', on=['Player_Id'])\nd2 = pd.merge(d1,players, on='Player_Id')\nall_rounder_team=d2[['Player_Name_x','Strike_Rate','Econ_Rate','DOB','Country']]\nall_rounder_team.rename(columns = {'Player_Name_x':'Player_Name'}, inplace = True) \nall_rounder_team=all_rounder_team.head(10)\nall_rounder_team","defa8115":"df=pd.concat([batsmen_team,bowlers_team,all_rounder_team],sort=True).drop_duplicates(subset='Player_Name', keep=\"first\").reset_index(drop=True)\ndf=df[['Player_Name','Strike_Rate','Econ_Rate','DOB','Country']]\nprint(\"-\"*30,\"Well rounded team\",\"-\"*30,\"\\n\")\ndf","0423a6c0":"> economy rate = total runs conceded\/number of overs bowled","fe878358":"### K Means Clustering on Bowlers Data ","58b2c989":"> Aim: To create clusters of players based on their strengths in order to show a well-rounded cricket team of all time.\n","d1081aa1":"The players with:\n\nStrike_Rate: NaN are **batsmen**\n\nEconomy_Rate: NaN are **bowlers**\n\nboth Strike_Rate and Economy_Rate listed are **all rounders**.","7856664e":"Selecting top 5 batsmen","fa150efa":"### Data preprocessing","aa8f9a3b":"Selecting top 5 bowlers","a5bcf173":"*We notice the presence of outliers with the help of the box plot for strike rate.*","8012369d":"### K Means Clustering on Batsmen Data ","243967c1":"Selecting top 10 all rounders","5eefa9c2":"Displaying the Batting Hand of Batsmen","620d3970":"> *strike_rate = runs per 100 balls faced*","3233ae38":"**Bowling Skill and Cluster assigned to players**","a0ee30d9":"### Example of a well-rounded Team","83d75e26":"### Batsmen","71073d1b":"**Batting Hand and Cluster assigned to players**","3c5c6789":"Displaying the Bowling Skill of Batsmen","d3bd5a22":"### Bowlers","c617b143":"<div>\n<img src=\"https:\/\/www.headlinesoftoday.com\/wp-content\/uploads\/2020\/03\/Indian-Premier-League-IPL-2020-Full-ScheduleTime-Table-and-Venue-and-Fixtures-e1588313204876.jpg\" width=\"550\"\/>\n<\/div>\n\n<div class=\"alert alert-block alert-info\">  \n<h1><strong><center>\ud83c\udfcf Indian Premier League<\/center><\/strong><\/h1>\n    <p>The Indian Premier League is a professional Twenty20 cricket league in India contested during March or April and May of every year by eight teams representing eight different cities in India.\n    <\/p>\n<\/div>","ef202d83":"*Players with low strike rate are eliminated*"}}