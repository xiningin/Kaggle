{"cell_type":{"2fa81b74":"code","617fde3f":"code","1885fb73":"code","e91b0b56":"code","71d61f0e":"code","62e6ab75":"code","52d5ce93":"code","0002e786":"code","ef144e40":"code","9d15d770":"code","819cfc23":"code","876b10f2":"code","a7d16769":"code","b6486007":"code","4d15e0c4":"code","1c410848":"code","31dcd7ff":"code","551f151d":"code","d38d9381":"code","a7d6586c":"code","b2055151":"code","f8a3b170":"code","3e3147e2":"code","da731fce":"code","5e4b6c7b":"code","b53c0e1e":"code","bcc07cff":"code","cae6d95d":"code","fbbabfdb":"code","07251a8b":"code","5d75bace":"code","37147d7e":"code","6bc396c1":"code","143c833d":"code","32b5ea25":"code","6ccc6d06":"code","b2e517e5":"code","d19ed20f":"code","8b191a61":"code","f1ab88da":"code","d70da603":"code","6424cad1":"code","c4e8ec10":"code","a0018580":"code","22c77ed0":"code","b76685f6":"code","4ab2dee0":"code","5957ae5b":"code","ceabb069":"code","fcf27045":"code","91518ea5":"code","6750e8f8":"code","517649a9":"code","191adf4a":"code","23b2c7b8":"code","f1c61146":"code","44a154d8":"code","32ea98fd":"code","9a51c022":"code","34648eaf":"code","15b76b65":"code","a98952a5":"code","e3174bcd":"code","d6f78a43":"code","3f44991d":"code","ff25744c":"code","8a544cec":"code","c311a96d":"code","daa1b87d":"code","4eedc549":"code","5822b535":"code","914d7691":"code","b0c960f2":"code","6e20cd92":"code","2d24be2c":"code","1fb57daa":"code","cd1414db":"code","9f1f3743":"code","aa9d4843":"code","f031e029":"code","ccbf4be7":"code","e2a8bdb7":"code","30911569":"code","10870cc0":"code","dc508260":"code","87654d1d":"code","aeb42e27":"code","1b4f633d":"code","00d88112":"code","0b4ae2b9":"code","73171347":"code","caa232bd":"code","e1a22820":"code","83ca2335":"code","f9766cda":"code","8d64c679":"code","f3c862f1":"code","f348b265":"code","5ae972bc":"code","40530985":"code","3cb68142":"code","8094c6ba":"code","d14de6a8":"code","18077019":"code","835c7906":"code","a64a70ea":"code","b6ec13bf":"code","47defb0c":"code","8d135365":"code","b9a8b12f":"code","4a33c863":"code","5050a146":"code","5b0e2010":"code","0818ea7c":"code","83ecf774":"code","c9770997":"code","20bec713":"code","07f54bb9":"code","53be8d61":"code","39e21946":"code","3374a371":"code","566d86f6":"code","3bde62d6":"code","27610f86":"code","6d8816a0":"code","8de4103a":"code","43265032":"code","1ae5a00e":"markdown","accf24a9":"markdown","a2d82de0":"markdown","5d112daf":"markdown"},"source":{"2fa81b74":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style()","617fde3f":"train =  pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","1885fb73":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","e91b0b56":"train.columns","71d61f0e":"test.columns","62e6ab75":"#using missingno to visualize missing data","52d5ce93":"import missingno as msno","0002e786":"msno.matrix(train)","ef144e40":"#by looking into cabin it has so much null values and no columns from the dataset can be used to fill out these values","9d15d770":"train = train.drop(columns = 'Cabin',axis = 1)","819cfc23":"train.info()","876b10f2":"#we have two other null values in the embarked columns \n# a hidden rule sayes that if the data rows does not exceed the 0.15 of the tatal you can just delete it","a7d16769":"train = train[train['Embarked'].isna() == False]","b6486007":"train.info()","4d15e0c4":"msno.matrix(train)","1c410848":"#for age we can use the mean of age value for the same pclass and sex ","31dcd7ff":"def age_mean(pclass , sex):\n    mon = train[(train['Pclass'] == pclass)  & ( sex == train['Sex']) ]['Age'].median()\n    return mon","551f151d":"train['Age'] = train.apply(lambda x: (age_mean(x['Pclass'] , x['Sex'])) if pd.isna(x['Age']) else x['Age'] , axis = 1)","d38d9381":"train.sample(50)","a7d6586c":"msno.matrix(train)","b2055151":"#Now we can say that we finished out fist step which is Cleaning data ","f8a3b170":"train.columns","3e3147e2":"#categorical features are :\ncat_list = ['PassengerId' , 'Survived' , 'Pclass' , 'Name' , 'Ticket' , 'Embarked']","da731fce":"#first lets check ther existence in our dataset\nfor feature in cat_list:\n    cat  = train[feature].value_counts()\n    print(feature)\n    sns.barplot(cat.index , cat)\n    plt.show()\n    ","5e4b6c7b":"train.columns","b53c0e1e":"num_list = ['Age' , 'SibSp' , 'Parch' ,'Fare' ]","bcc07cff":"for feature in num_list:\n    print(feature)\n    num = train[feature].value_counts()\n    num.hist() \n    plt.show()","cae6d95d":"#lets take a loot to the correlation\ncor = train[num_list].corr()","fbbabfdb":"sns.heatmap(cor, annot = True)","07251a8b":"#if you just imagned the heat map you can find a stron relation between parch and sibSp - and this not mean that there a tie relation between them but alos it invites us to create feature representing them\n","5d75bace":"train['Family'] = train['SibSp'] + train['Parch']","37147d7e":"train.sample(50)","6bc396c1":"#lets see the distribution of this newly created feature\ntrain['Family'].hist()","143c833d":"num_list.append('Family')","32b5ea25":"train.columns","6ccc6d06":"\"\"\"\n1. is Sex is a factor in survival rate?\n2. is class was a factor in surival rate?\n3. what is the distribution of titles on board - and what is the distribution of them regarding the survival rate?\n4. Familty .. how its affecting the survival\n5. what the Fare Distribution with regard to the survival rate\n6. Most of Females was distributed or concentrated on a sepecific class\n7. Embarked with respect to survival \n8. Embarked with repect to sex\n9. Embarked with respect to class\n10 is Age played any role in the survival rate\n11 age median of the survived and non survived ?\n12 age median acccording to sex ?\n13 age distributeion for each embarked?\n\"\"\"","b2e517e5":"#in the next section we are going to use pivots and charts to ansert the previous questions.\n# so we are in need to a unuque columns - lets check uniqueness of Ticket feature\ntrain.Ticket.is_unique","d19ed20f":"train.PassengerId.is_unique # this the one ","8b191a61":"#1. is Sex is a factor in survival rate?\npd.pivot_table(train , index = 'Survived' , columns = 'Sex'  , values = 'PassengerId' , aggfunc = 'count')","f1ab88da":"sns.countplot(data = train , x = 'Sex' , hue = 'Survived')","d70da603":"#2. is class was a factor in surival rate?\npd.pivot_table(train , index ='Pclass' ,columns = 'Survived', values = 'PassengerId', aggfunc= 'count')","6424cad1":"#Real trajedy happened -> class 1 is the height rate of survivals and the class 3 is the lowest","c4e8ec10":"sns.countplot(data = train , x = 'Pclass' , hue = 'Survived' , palette = 'magma')","a0018580":"#3. what is the distribution of titles on board - and what is the distribution of them regarding the survival rate?\n# Fist we are going to engineer a new feature called name_title -> Mr , Mrs , Miss ..\ntrain.head()","22c77ed0":"train['name_title'] = train['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())","b76685f6":"train.sample(20)","4ab2dee0":"plt.rcParams[\"figure.figsize\"] = (20,5)\nsns.countplot(data = train , x = 'name_title' )\n","5957ae5b":"#after looking to the distrubition we are going to preserv only the first for and the others will be 'Other'\ntitles_to_preserve = ['Mr' , 'Mrs' , 'Miss' , 'Master']\ntrain.name_title = train.name_title.apply(lambda x: x if x in titles_to_preserve else 'Other')","ceabb069":"sns.countplot(data = train , x = 'name_title' , palette = 'magma')\n","fcf27045":"pd.pivot_table(train , values = 'PassengerId' , columns = 'name_title' , index = 'Survived' , aggfunc= 'count')","91518ea5":"sns.countplot(data = train , x = 'name_title' , hue = 'Survived' , palette = 'magma')","6750e8f8":"#as you can see the title is highly show also that the female gender dominates the upper hand here regarding to survival","517649a9":"#4. Familty .. how its affecting the survival\nsns.countplot(data = train , x = 'Family')\n#majority of passengers were travelling alone","191adf4a":"pd.pivot_table(train , index = 'Survived' , columns = 'Family' ,values = 'PassengerId' , aggfunc = 'count')","23b2c7b8":"sns.countplot(data = train , x = 'Family' , hue = 'Survived' , palette = 'magma')","f1c61146":"#only the families consits of 2 or 3 or 4 are the ones they have a high survial rate","44a154d8":"#5. what the Fare Distribution with regard to the survival rate\ntrain['Fare'].hist(bins = 30)","32ea98fd":"train.plot.scatter(x = 'Fare' , y = 'Survived')","9a51c022":"pd.pivot_table(train , values = 'PassengerId' , index = 'Survived' , columns = 'Fare' ,aggfunc='mean')","34648eaf":"#6. Most of Females was distributed or concentrated on a sepecific class\npd.pivot_table(train , values = 'PassengerId' , index = 'Pclass' , columns = 'Sex' , aggfunc = 'count')","15b76b65":"pd.pivot_table(train , values = 'PassengerId' , index = 'Pclass' , columns = ['Sex','Family'] , aggfunc = 'count')","a98952a5":"#maybe more thatn 70 % of these females were abroad with a fiamily as the prev. pivote showing","e3174bcd":"sns.countplot(data = train , x = 'Pclass' , hue = 'Sex' , palette = 'magma')","d6f78a43":"#7. Embarked with respect to survival \npd.pivot_table(train , columns = 'Embarked' , index = 'Survived' , values = 'PassengerId' , aggfunc = 'count')","3f44991d":"sns.countplot(data= train , x = 'Embarked' , hue = 'Survived')","ff25744c":"\"\"\"\neisier for me to grap form here :) \n8. Embarked with repect to sex\n9. Embarked with respect to class\n10 is Age played any role in the survival rate\n11 age median of the survived and non survived ?\n12 age median acccording to sex ?\n13 age distributeion for each embarked?\n\"\"\"","8a544cec":"#8. Embarked with repect to sex\npd.pivot_table(train , columns = 'Embarked' , index = 'Sex' , values = 'PassengerId' , aggfunc = 'count')\n","c311a96d":"sns.countplot(data= train , x = 'Embarked' , hue = 'Sex')","daa1b87d":"#9. Embarked with respect to class\npd.pivot_table(train , columns = 'Embarked' , index = 'Pclass' , values = 'PassengerId' , aggfunc = 'count')\n","4eedc549":"sns.countplot(data= train , x = 'Embarked' , hue = 'Pclass' , palette = 'magma')","5822b535":"# I think that c city is was in a good econmy condition this time - its the only with hight reservations of the fist class compared to the its own third class","914d7691":"#11 age median of the survived and non survived ?\n#Survived\nprint('Mean age of survived : {:.2f}'.format( train[train['Survived'] == 1 ]['Age'].mean()))\nprint('Median age of survived : {:.2f}'.format(train[train['Survived'] == 1 ]['Age'].median()))","b0c960f2":"#non-Survived\nholder = train[train['Survived'] == 0]['Age']\nprint('Mean age of non-survived : {:.2f}'.format(holder.mean()))\nprint('median age of non-survived : {:.2f}'.format(holder.median()))","6e20cd92":"#12 age median acccording to sex ?\nholder = train[train['Sex'] == 'female']['Age']\nprint('Mean age of female : {:.2f}'.format(holder.mean()))\nprint('median age of female : {:.2f}'.format(holder.median()))\nholder = train[train['Sex'] == 'male']['Age']\nprint('Mean age of male : {:.2f}'.format(holder.mean()))\nprint('median age of male : {:.2f}'.format(holder.median()))","2d24be2c":"#13 age distributeion for each embarked?\ntrain[train['Embarked'] == 'S']['Age'].hist()\nplt.title('S embarked - age distribution')","1fb57daa":"train[train['Embarked'] == 'C']['Age'].hist()\nplt.title('C embarked - age distribution')","cd1414db":"train[train['Embarked'] == 'Q']['Age'].hist()\nplt.title('Q embarked - age distribution')","9f1f3743":"test.head()","aa9d4843":"Feaures_selected = ['Survived' , 'Pclass'  , 'Sex' , 'Age' , 'Family' , 'Fare' , 'Embarked' , 'name_title']\nmodel_train= train[Feaures_selected]","f031e029":"train.columns","ccbf4be7":"model_train.head(10)","e2a8bdb7":"#do scalling\nfrom sklearn.preprocessing import StandardScaler","30911569":"scale = StandardScaler()\nmodel_train[['Age','Fare']] = scale.fit_transform(model_train[['Age','Fare']])","10870cc0":"model_train.head(10)","dc508260":"#preparing the test dataframe for modeling also","87654d1d":"test['name_title'] = test['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())","aeb42e27":"test.name_title = test.name_title.apply(lambda x: x if x in titles_to_preserve else 'Other')","1b4f633d":"test['Family'] = test['SibSp'] + test['Parch']","00d88112":"test = test.drop(columns = 'Cabin')","0b4ae2b9":"train.info()","73171347":"msno.matrix(test)","caa232bd":"test['Age'] = test.apply(lambda x: (age_mean(x['Pclass'] , x['Sex'])) if pd.isna(x['Age']) else x['Age'] , axis = 1)","e1a22820":"fare_missing  = round(test[(test['Age'] > 40.0 )&( test['Age'] < 80.0 )&( test['Pclass'] == 3) ]['Fare'].mean() , 4)\ntest['Fare'] = test.apply(lambda x: fare_missing if pd.isna(x['Fare']) else x['Fare'] , axis = 1)\n","83ca2335":"#test.dropna(subset = ['Fare'] , axis = 0 , inplace = True)\n#the prev code will result in missing one row and this may make a problem while submitting the results inot kaggle\n","f9766cda":"msno.matrix(test)","8d64c679":"model_testing = test[Feaures_selected[1:]]","f3c862f1":"model_testing[['Age','Fare']] = scale.fit_transform(model_testing[['Age','Fare']])","f348b265":"model_testing.head()","5ae972bc":"#Creating Dummies\nx_test = pd.get_dummies(model_testing)","40530985":"x_test","3cb68142":"x_train = pd.get_dummies(model_train[Feaures_selected[1:]])\ny_train = (model_train['Survived'])","8094c6ba":"print('shape of x_train ' + str(x_train.shape))\nprint('shape of y_train  ' +str(y_train.shape))\nprint('shape of x_test ' + str(x_test.shape))","d14de6a8":"y_train","18077019":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier","835c7906":"# 1. Logistic Regression Model \nlogistic_regressor = LogisticRegression()","a64a70ea":"logistic_regressor.fit(x_train , y_train)","b6ec13bf":"lgr_accuracy = round(logistic_regressor.score(x_train , y_train) * 100 , 2)","47defb0c":"lgr_accuracy","8d135365":"y_predicted_lgr = logistic_regressor.predict(x_test)","b9a8b12f":"print(len(x_train.columns))\nx_train.columns","4a33c863":"print(len(logistic_regressor.coef_[0]))\n\nlogistic_regressor.coef_[0]","5050a146":"#2. Linear support vector machine","5b0e2010":"svg_regressor = SVC()\n","0818ea7c":"svg_regressor.fit(x_train , y_train)","83ecf774":"svg_accuracy = round(svg_regressor.score(x_train , y_train) * 100 , 2)","c9770997":"svg_accuracy","20bec713":"y_predicted_svg = svg_regressor.predict(x_test)","07f54bb9":"#Random forest : we expect the best accuracy form it \u2665\nrf_Regressor = RandomForestClassifier()\nrf_Regressor.fit(x_train , y_train)\nrf_accuracy = round(rf_Regressor.score(x_train , y_train) * 100 , 2)\ny_predicted_rf = rf_Regressor.predict(x_test)\nprint(rf_accuracy)","53be8d61":"#K-Nearst Neigbour\nkm_Regressor = KNeighborsClassifier()\nkm_Regressor.fit(x_train, y_train)\nkm_accuracy  = round(km_Regressor.score(x_train , y_train) * 100 , 2)\ny_predicted_km = km_Regressor.predict(x_test)\nprint(km_accuracy)","39e21946":"#Naive Bayes\nnb_regressor = GaussianNB()\nnb_regressor.fit(x_train , y_train)\ny_predicted_nb = nb_regressor.predict(x_test)\nnb_accuracy  =round( nb_regressor.score(x_train,y_train) * 100 , 2)","3374a371":"print(nb_accuracy)","566d86f6":"#stochastic gradient decent\n#note that this data is not so big so we can use gradient decent only for more accuracy :)\nsgd_regressor = SGDClassifier()\nsgd_regressor.fit(x_train , y_train)\ny_predicted_sgd = sgd_regressor.predict(x_test)\nsgd_accuracy  =round( sgd_regressor.score(x_train,y_train) * 100 , 2)\nprint(sgd_accuracy)","3bde62d6":"models_accuracies = pd.DataFrame({\n    'Model': ['Logistic REgression', 'KNN',  \n              'Random Forest', 'Naive Bayes', \n              'Stochastic Gradient Decent', 'SVC'],\n    'Score': [lgr_accuracy, km_accuracy, rf_accuracy, \n              nb_accuracy, sgd_accuracy, svg_accuracy]})\nmodels_accuracies.sort_values(by = 'Score' , ascending = False)","27610f86":"#our supmited values them will be from predicted values of Random Forest - just as expected :)\n#making a check out last check point\ntest['survied_RF'] = y_predicted_rf\ntest['survied_KNN'] = y_predicted_km\ntest['survied_SVG'] = y_predicted_svg\ntest['survied_LGR'] = y_predicted_lgr\ntest['survied_SGD'] = y_predicted_sgd\ntest['survied_NB'] = y_predicted_nb","6d8816a0":"test.head()","8de4103a":"test.to_csv('test_predictions_six_models_results.csv')","43265032":"submission=pd.DataFrame({'PassengerId':test.PassengerId,'Survived':y_predicted_rf})\nsubmission.to_csv('submission.csv',index=False)\n","1ae5a00e":"# Modeling","accf24a9":"# Question worth answering","a2d82de0":"# Data cleaning","5d112daf":"# Analysis - build a relation with your DATA \u2665"}}