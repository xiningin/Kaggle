{"cell_type":{"afb61cf2":"code","3db2a6ab":"code","84287b59":"code","594a998b":"code","d34dce71":"code","547f5089":"code","8b3f0f1e":"code","1033c271":"markdown","d3159cc0":"markdown"},"source":{"afb61cf2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3db2a6ab":"df = pd.read_csv(\"..\/input\/Datapreprocessing.csv\")\ndf","84287b59":"from sklearn.preprocessing import Imputer\n\nimputer = Imputer(strategy=\"median\")\n\n# Since the median can only be computed on numerical attributes, we need to create a copu of the data without the text \n# attributes \n\ndf_numerical = df[[\"Age\", \"Salary\"]]\ndf_numerical","594a998b":"# Now you can fit the imputer instance to the training data using the fit() method\nimputer.fit(df_numerical)","d34dce71":"# The imputer has simply computed the median of each attributes and stored the result in its statistics_ instance variable.\n\nimputer.statistics_","547f5089":"# Now you can use the trained imputer to transform the training set by replacing the missing values\nX = imputer.transform(df_numerical)\n\n# The result is a plain Numpy array containing the transformed features. \nX","8b3f0f1e":"# If you want to put the Numpy array back into Pandas DataFrame\npd.DataFrame(X,columns=[\"Age\", \"Salary\"])","1033c271":"First, you need to create an Imputer Instance, specifying what stratergy \n\n* Mean Imputation (default)\n* Mode Imputation\n* Median Imputation","d3159cc0":"#### Imputer\nScikit-lern provides a handy class to take care of missing value: Imputer. Here is how to use it.\n\n* Reference video: \nhttps:\/\/www.youtube.com\/watch?v=L5MDXnuWHL0\n\n* Blog article with Pros and Cons: \nhttps:\/\/towardsdatascience.com\/6-different-ways-to-compensate-for-missing-values-data-imputation-with-examples-6022d9ca0779\nThis article describes imputation using the following:\n\n    - Imputation Using (Mean\/Median) Values\n    - Imputation Using (Most Frequent) or (Zero\/Constant) Values\n    - Imputation Using k-NN\n        - Imputation Using Multivariate Imputation by Chained Equation (MICE)\n        - Imputation Using Deep Learning (Datawig)\n   \n\n\n"}}