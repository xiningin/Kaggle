{"cell_type":{"1f511df9":"code","8661d6a4":"code","f4d80298":"code","3bac3ba2":"code","33acdc4e":"code","0d1f5193":"code","edbb2ff5":"code","45f29504":"code","66a9e71d":"code","1cd618df":"code","8eb1c0a9":"code","63462528":"code","80706c24":"code","35ad1a54":"code","865014a5":"code","4942d8bf":"code","c90a1cb5":"code","fe1941d3":"code","313a8c2e":"code","7c425cf1":"markdown","c8c9d726":"markdown","049242b4":"markdown","8676b3c9":"markdown","39f545b8":"markdown","6889454c":"markdown","dc4d18ee":"markdown","fad7e4e7":"markdown","7dc9c0c9":"markdown","1f2eebbe":"markdown","8e0a6f7a":"markdown"},"source":{"1f511df9":"import geopandas as gpd\nimport pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom datetime import date, timedelta\nimport calendar\n\nfrom IPython.display import set_matplotlib_formats\nset_matplotlib_formats('retina')\n\nfrom google.cloud import bigquery\nimport warnings\nwarnings.filterwarnings('ignore')\n\ncolors = ['#0072B5','#EFC050','#00A170',\n          '#39CCCC','#926AA6','#9BB7D4',\n          '#FA8072','#9FE2BF','#40E0D0']","8661d6a4":"client = bigquery.Client()\n\ndataset_ref = client.dataset('covid19_jhu_csse',project='bigquery-public-data')\ndataset = client.get_dataset(dataset_ref)\n\ntables = [table.table_id for table in client.list_tables(dataset)]\ntables","f4d80298":"summary_ref = dataset_ref.table('summary')\nsummary = client.get_table(summary_ref)\n\nsummary_frame = client.list_rows(summary, max_results=5).to_dataframe()\nsummary_frame","3bac3ba2":"query_max =\"\"\"\nselect sum(confirmed) as cases, \nsum(deaths) as covid_deaths,\nround(100*sum(deaths)\/sum(confirmed),2) as mortality,\ncountry_region as country,current_date()-1 as to_date,\ncase\n    when round(100*sum(deaths)\/sum(confirmed),2)>6.95 then \"6.96-9.25\"\n    when round(100*sum(deaths)\/sum(confirmed),2)>4.65 then \"4.66-6.95\"\n    when round(100*sum(deaths)\/sum(confirmed),2)>2.35 then \"2.36-4.65\" \n    else \"0-2.35\" end as mortality_tier\nfrom `bigquery-public-data.covid19_jhu_csse.summary` \ngroup by country, date\nhaving date = current_date()-1\norder by cases desc\nlimit 150\n\"\"\"\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nbigquery_max = client.query(query_max, job_config=safe_config)\nframe_max = bigquery_max.to_dataframe()\nframe_max[:20].style.background_gradient(cmap='Reds')","33acdc4e":"fig = make_subplots(rows=1, cols=2, specs=[[{}, {}]], \n      shared_xaxes=True,shared_yaxes=False, vertical_spacing=0.55)\n\ncolor = [\n    -1 if v == frame_max.mortality_tier.unique()[0] \n    else 1 if v == frame_max.mortality_tier.unique()[1] \n    else 2 if v == frame_max.mortality_tier.unique()[2] \n    else 0 for v in frame_max.mortality_tier\n]\n\ncolorscale = [[0, colors[0]], [0.25, colors[1]],\n              [0.5, colors[2]], [1.0, colors[3]]]\n\nfig.append_trace(\n    go.Bar(\n        x=frame_max[:20].mortality,\n        y=frame_max[:20].country,\n        marker=dict(\n            opacity=.95,\n            color='rgba(50, 171, 96, 0.6)',\n            line=dict(\n                color='rgb(248, 248, 255)',\n                width=7.35),\n    ),\n    name='Mortality',\n    orientation='h',\n),1,1)\n\nfig.append_trace(\n    go.Scatter(\n        x=frame_max[:100].cases,\n        y=frame_max[:100].covid_deaths,\n        text=frame_max[:100].country,\n        hovertext=frame_max[:100]['country'],\n        hoverlabel=dict(namelength=0),\n        hovertemplate='%{hovertext}<br>Cases: %{x} <br>Overall Deaths: %{y}',\n        mode='markers',marker=dict(\n            size=frame_max[:100].mortality*5,\n            color=color,\n            colorscale=colorscale,\n            line=dict(\n                color='black',\n                width=.65),\n    ),\n    name='Deaths by number of cases',\n    orientation='h',\n),1,2)\n\nfig.update_layout(\n    title='COVID-19 in countries of the World',\n    yaxis=dict(\n        nticks=30,\n        showgrid=False,\n        showline=True,\n        showticklabels=True,\n        zeroline=True,\n        linewidth=3,\n        domain=[.05,.85],\n    ),\n    yaxis2=dict(\n        showgrid=True,\n        showline=False,\n        showticklabels=True,\n        linecolor=colors[:1][0],\n        linewidth=3,\n        domain=[.05,.85],\n    ),\n    xaxis=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=False,\n        domain=[.05,.3],\n    ),\n    xaxis2=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=False,\n        domain=[.35,.95],\n        side='bottom',\n    ),\n    legend=dict(x=.03, y=1.025, font_size=10),\n    margin=dict(l=100, r=20, t=70, b=70),\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n)\n\nfig.show()","0d1f5193":"query_cases = \"\"\"\n\nselect sum(confirmed) as cases, sum(deaths) as deaths,\ncountry_region as country, date\nfrom `bigquery-public-data.covid19_jhu_csse.summary`\nwhere country_region = 'US' or country_region = 'Brazil'\nor country_region = 'India' or country_region='France'\nor country_region = 'Russia'or country_region = 'Turkey'\ngroup by country, date\nhaving cases > 0\norder by country, date asc\n\"\"\"\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nbigquery_cases = client.query(query_cases, job_config=safe_config)\ncases_frame = bigquery_cases.to_dataframe()","edbb2ff5":"fig=px.area(cases_frame, x='date',y='cases', color='country', groupnorm='percent',\n        template='simple_white',color_discrete_sequence=colors, \n        title='Changing in shares of COVID-cases amongst top 6 countries')\nfig.update_traces( \n         line_width=.85)\n\nfig.update_layout(\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label=\"1m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=6,\n                     label=\"6m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=1,\n                     label=\"YTD\",\n                     step=\"year\",\n                     stepmode=\"todate\"),\n                dict(count=1,\n                     label=\"1y\",\n                     step=\"year\",\n                     stepmode=\"backward\"),\n                dict(step=\"all\")\n            ])\n        ),\n        rangeslider=dict(\n            visible=True\n        ),\n        type=\"date\"\n    )\n)\n\nfig.show()\n\nfig = px.area(cases_frame, x='date',y='deaths', color='country', groupnorm='percent',\n        template='simple_white', line_shape='linear',color_discrete_sequence=colors,\n        title='Changing in shares of COVID-deaths amongst top 6 countries')\nfig.update_traces(\n    line_width=.85)\nfig.update_layout(\n            \n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label=\"1m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=6,\n                     label=\"6m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=1,\n                     label=\"YTD\",\n                     step=\"year\",\n                     stepmode=\"todate\"),\n                dict(count=1,\n                     label=\"1y\",\n                     step=\"year\",\n                     stepmode=\"backward\"),\n                dict(step=\"all\")\n            ])\n        ),\n        rangeslider=dict(\n            visible=True\n        ),\n        type=\"date\",)\n    )\n\nfig.show()","45f29504":"world_vaccines = pd.read_csv('https:\/\/raw.githubusercontent.com\/owid\/covid-19-data\/master\/public\/data\/vaccinations\/vaccinations.csv',\n    sep=',').fillna(0).sort_values('date').drop(['iso_code',\n    'daily_vaccinations_raw','total_vaccinations_per_hundred'], axis=1).rename(\n    columns={'total_vaccinations':'overall vaccinations', 'people_vaccinated_per_hundred':'vaccinated per hundred',\n    'people_vaccinated':'vaccinated','people_fully_vaccinated':'fully vaccinated',\n    'daily_vaccinations':'daily vaccinations','people_fully_vaccinated_per_hundred':'fully vaccinated per hundred',\n    'daily_vaccinations_per_million':'daily vaccinations per million'\n    })\n\nworld_vaccines[['overall vaccinations','fully vaccinated','vaccinated',\n                'daily vaccinations per million','daily vaccinations']] =\\\nworld_vaccines[['overall vaccinations','fully vaccinated',\n                'vaccinated','daily vaccinations per million','daily vaccinations']].astype(int)\n\nworld_vaccines[(world_vaccines.location.isin(['United States','India','Brazil','Turkey','Russia','European Union']))&\\\n    (world_vaccines.date == world_vaccines.date.max())].loc[world_vaccines['overall vaccinations']>10e5].\\\n    sort_values('overall vaccinations', ascending=False)","66a9e71d":"query_india = \"\"\"\nselect province_state as province,\nmax(confirmed) as cases, max(deaths) as covid_deaths,\nround(100*sum(deaths)\/sum(confirmed),2) as mortality, current_date()-1 as date,\ncase\n    when round(100*sum(deaths)\/sum(confirmed),2)>2.242 then \"2.243-2.99\"\n    when round(100*sum(deaths)\/sum(confirmed),2)>1.495 then \"1.496-2.242\"\n    when round(100*sum(deaths)\/sum(confirmed),2)>0.738 then \"0.749-1.495\" \n    else \"0-0.748\" end as mortality_tier\nfrom `bigquery-public-data.covid19_jhu_csse.summary`\nwhere country_region = 'India' and province_state is not null\ngroup by province\norder by cases desc\n\"\"\"\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nbigquery_max = client.query(query_india, job_config=safe_config)\nindia = bigquery_max.to_dataframe()\nindia[:20].style.background_gradient(cmap='Reds')","1cd618df":"india =\"\"\"\nselect province_state as province,confirmed as cases, \ndeaths as covid_deaths,round(100*deaths\/confirmed,2) as mortality,\nlongitude,latitude,\ncase\n    when round(100*deaths\/confirmed,2)>2.242 then \"2.243-2.99\"\n    when round(100*deaths\/confirmed,2)>1.495 then \"1.496-2.242\"\n    when round(100*deaths\/confirmed,2)>0.738 then \"0.749-1.495\" \n    else \"0-0.748\" end as mortality_tier\nfrom `bigquery-public-data.covid19_jhu_csse.summary`\nwhere country_region=\"India\" and date=current_date()-1\nand confirmed > 0\norder by cases desc\n\"\"\"\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nbigquery_max = client.query(india, job_config=safe_config)\nindia  = bigquery_max.to_dataframe()\n\ncolor = [\n    -1 if v == india.mortality_tier.unique()[0] \n    else 1 if v == india.mortality_tier.unique()[1] \n    else 2 if v == india.mortality_tier.unique()[2] \n    else 0 for v in india.mortality_tier\n]\n\ncolorscale = [[0, colors[0]], [0.25, colors[1]],\n              [0.5, colors[2]], [1.0, colors[3]]]\n\nticktext = [n[:5] for n in india[:20].province.unique()]\n\n## plot the mapbox\n\nfig = px.scatter_mapbox(\n    india, lat=\"latitude\", lon=\"longitude\",\n    hover_name=\"province\",size='cases',\n    color='mortality', zoom=3, height=300, \n    size_max=28,color_continuous_scale='Viridis'\n)\n\nfig.update_layout(\n    mapbox_style='carto-positron',\n    margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0},\n)\n\nfig.show()\n\n## plot the analytical panel\n\nfig = make_subplots(rows=1, cols=2, specs=[[{}, {}]], \n      shared_xaxes=False,shared_yaxes=False, vertical_spacing=0.55)\n\nfig.append_trace(\n    go.Bar(\n    x=india[:20].mortality,\n    y=india[:20].province,\n    marker=dict(\n        opacity=.9,\n        color='rgba(50, 171, 96, 0.6)',\n        line=dict(\n            color='rgb(248, 248, 255)',\n            width=7.35),\n    ),\n    name='Mortality rate',\n    orientation='h',\n),1,1)\n\nfig.append_trace(\n    go.Scatter(\n    x=india[:20].cases,\n    y=india[:20].covid_deaths,\n    hovertext=india['province'],\n    hoverlabel=dict(namelength=0),\n    hovertemplate='%{hovertext}<br>Cases: %{x} <br>Overall Deaths: %{y}',\n    mode='markers',\n    marker=dict(\n        size=india.mortality*15,\n        color=color,\n        colorscale=colorscale,\n        line=dict(\n            color='black',\n            width=.65),\n    ),\n    name='Deaths by number of cases',\n    orientation='h',\n),1,2)\n\nfig.update_layout(\n    title='Top-20 Indian provinces by number of cases',\n    yaxis=dict(\n        nticks=30,\n        showgrid=False,\n        showline=True,\n        showticklabels=True,\n        ticktext=ticktext,\n        linewidth=2,\n        domain=[.05,.85],\n    ),\n    yaxis2=dict(\n        showgrid=True,\n        showline=False,\n        showticklabels=True,\n        linecolor=colors[:1][0],\n        linewidth=3,\n        domain=[.05,.85],\n    ),\n    xaxis=dict(\n        zeroline=True,\n        linewidth=3,\n        showline=False,\n        showticklabels=True,\n        nticks=10,\n        showgrid=False,\n        domain=[.05,.3],\n        side='bottom'\n    ),\n    xaxis2=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=False,\n        nticks=10,\n        domain=[.35, .95],\n        side='bottom'\n    ),\n    legend=dict(x=0.029, y=1.038, font_size=10),\n    margin=dict(l=100, r=20, t=70, b=70),\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n)\n\nfig.show()","8eb1c0a9":"india_cases=\"\"\"\n\nselect sum(confirmed) as cases, sum(deaths) as deaths, \nround(100*sum(deaths)\/sum(confirmed),2) as mortality_rate,date,\nprovince_state as province,\ncase\n    when round(100*sum(deaths)\/sum(confirmed),2)>2.242 then \"2.243-2.99\"\n    when round(100*sum(deaths)\/sum(confirmed),2)>1.495 then \"1.496-2.242\"\n    when round(100*sum(deaths)\/sum(confirmed),2)>0.738 then \"0.749-1.495\" \n    else \"0-0.748\" end as mortality_tier\nfrom `bigquery-public-data.covid19_jhu_csse.summary`\nwhere country_region=\"India\" and province_state is not null\ngroup by date, province\nhaving cases > 0\norder by date, province desc\n\"\"\"\n\nsafe_config = bigquery.QueryJobConfig(\n    maximum_bytes_billed=10**10)\nbigquery_cases = client.query(\n    india_cases, job_config=safe_config)\nindia_growth = bigquery_cases.to_dataframe()\nindia_growth = india_growth.fillna(0)\n\nticktext = [n[:15] for n in india_growth.province.unique()]\n\nfig = px.box(india_growth, x=\"province\",y='mortality_rate',\n        template='simple_white', title='Range of Daily Mortality rate in Indian Provinces')\n\nfig.update_traces(marker_line_width=.25, opacity=.95,\n                  marker_line_color='white',\n                  marker_color='#00A170',\n                  line_color='black')\nfig.update_layout(\n        xaxis=dict(\n        tickangle=65, tickmode='array', \n        tickvals = np.arange(0,len(ticktext)),\n        ticktext = ticktext),\n        paper_bgcolor='rgb(248, 248, 255)',\n        plot_bgcolor='rgb(248, 248, 255)',\n)\nfig.show()","63462528":"india_vaccines = world_vaccines.query(\"location == 'India'\").set_index('location')\nindia_vaccines.tail(1)","80706c24":"query_russia_max = \"\"\"\nselect province_state as province,\nmax(confirmed) as cases, max(deaths) as covid_deaths,\nround(100*max(deaths)\/max(confirmed),2) as mortality, current_date() as date,\ncase\n    when round(100*sum(deaths)\/sum(confirmed),2)>4.488 then \"4.489-5.92\"\n    when round(100*sum(deaths)\/sum(confirmed),2)>3.055 then \"3.055-4.488\"\n    when round(100*sum(deaths)\/sum(confirmed),2)>1.622 then \"1.623-3.055\" \n    else \"0.184-1.622\" end as mortality_tier\nfrom `bigquery-public-data.covid19_jhu_csse.summary`\nwhere country_region = 'Russia' and province_state is not null\ngroup by province\norder by cases desc\n\"\"\"\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nbigquery_cases = client.query(query_russia_max, job_config=safe_config)\nrussia = bigquery_cases.to_dataframe()\nrussia[:20].style.background_gradient('Reds')","35ad1a54":"russia =\"\"\"\nselect province_state as province,confirmed as cases, \ndeaths as covid_deaths,round(100*deaths\/confirmed,2) as mortality,\nlongitude,latitude,\ncase\n    when round(100*deaths\/confirmed,2)>4.488 then \"4.489-5.92\"\n    when round(100*deaths\/confirmed,2)>3.055 then \"3.055-4.488\"\n    when round(100*deaths\/confirmed,2)>1.622 then \"1.623-3.055\" \n    else \"0.184-1.622\" end as mortality_tier\nfrom `bigquery-public-data.covid19_jhu_csse.summary`\nwhere country_region=\"Russia\" and date=current_date()-1\norder by cases desc\n\"\"\"\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nbigquery_max = client.query(russia, job_config=safe_config)\nrussia  = bigquery_max.to_dataframe()\n\nfig = px.scatter_mapbox(\n    russia, lat=\"latitude\", lon=\"longitude\", hover_name=\"province\",size='cases',\n    color='mortality', zoom=2, height=300, size_max=28,color_continuous_scale='Viridis'\n)\n\nfig.update_layout(\n    mapbox_style='carto-positron',\n    margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0},\n)\n\nfig.show()\n\ncolor = [\n    -1 if v == russia.mortality_tier.unique()[0] \n    else 1 if v == russia.mortality_tier.unique()[1] \n    else 2 if v == russia.mortality_tier.unique()[2] \n    else 0 for v in russia.mortality_tier\n]\n\ncolorscale = [[0, colors[0]], [0.25, colors[1]],\n              [0.5, colors[2]], [1.0, colors[3]]]\n\n\nfig = make_subplots(rows=1, cols=2, specs=[[{}, {}]], \n      shared_xaxes=True,shared_yaxes=False, vertical_spacing=0.55)\n\nfig.append_trace(\n    go.Bar(\n        x=russia[:20].mortality,\n        y=russia[:20].province,\n        marker=dict(\n            opacity=.9,\n            color='rgba(50, 171, 96, 0.6)',\n            line=dict(\n                color='rgb(248, 248, 255)',\n                width=7.35),\n        ),\n        name='Mortality',\n        orientation='h',\n    ),1,1)\n\nfig.append_trace(\n    go.Scatter(\n        x=russia.cases,\n        y=russia.covid_deaths,\n        hovertext=russia['province'],\n        hoverlabel=dict(namelength=0),\n        mode='markers',\n        hovertemplate='%{hovertext}<br>Cases: %{x} <br>Overall Deaths: %{y}',\n        marker=dict(\n            size=russia.mortality*5,\n            color=color,\n            colorscale=colorscale,\n            line=dict(\n                color='black',\n                width=.65),\n    ),\n    name='Deaths by Number of Cases',\n    orientation='h',\n),1,2)\n\nfig.update_layout(\n    title='COVID-19 in Russia Provinces',\n    yaxis=dict(\n        zeroline=True,\n        showgrid=False,\n        showline=True,\n        showticklabels=True,\n        linewidth=2,\n        nticks=40,\n        domain=[.05,.8],\n    ),\n    yaxis2=dict(\n        zeroline=True,\n        showgrid=True,\n        showline=False,\n        showticklabels=True,\n        linecolor=colors[:1][0],\n        nticks=8,\n        domain=[.05,.8],\n    ),\n    xaxis=dict(\n        zeroline=True,\n        showline=False,\n        showticklabels=True,\n        showgrid=False,\n        nticks=10,\n        domain=[0,.3],\n        side='bottom'\n    ),\n    xaxis2=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=False,\n        nticks=10,\n        domain=[.35,.95],\n        side='bottom',\n    ),\n    legend=dict(x=0.029, y=1.038, font_size=10),\n    margin=dict(l=100, r=20, t=70, b=70),\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n)\nfig.show()","865014a5":"russia_cases=\"\"\"\n\nselect sum(confirmed) as cases, sum(deaths) as deaths, \nround(100*sum(deaths)\/sum(confirmed),2) as mortality_rate,date,\nprovince_state as province,\ncase\n    when round(100*sum(deaths)\/sum(confirmed),2)>4.488 then \"4.489-5.92\"\n    when round(100*sum(deaths)\/sum(confirmed),2)>3.055 then \"3.055-4.488\"\n    when round(100*sum(deaths)\/sum(confirmed),2)>1.622 then \"1.623-3.055\" \n    else \"0.184-1.622\" end as mortality_tier,\n\nfrom `bigquery-public-data.covid19_jhu_csse.summary`\nwhere country_region=\"Russia\" and province_state is not null\ngroup by date, province\norder by date, province desc\n\"\"\"\n\nsafe_config = bigquery.QueryJobConfig(\n    maximum_bytes_billed=10**10)\nbigquery_cases = client.query(\n    russia_cases, job_config=safe_config)\nrussia_growth = bigquery_cases.to_dataframe()\nrussia_growth = russia_growth.fillna(0)\n\nticktext = [n[:15] for n in russia_growth.province.unique()]\n\nfig = px.box(russia_growth, x=\"province\",y='mortality_rate',\n        template='simple_white', title='Range of Daily Mortality rate in Russia Provinces',\n            width=1500)\n\nfig.update_traces(\n    marker_line_width=.25, opacity=.95,\n    marker_line_color='white',\n    marker_color='#00A170',\n    line_color='black')\n\nfig.update_layout(\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    xaxis=dict(\n        tickangle=65, tickmode='array', \n        tickvals = np.arange(0,len(ticktext)),\n        ticktext = ticktext)\n)\n\nfig.show()","4942d8bf":"query_russia_max=\"\"\"\nselect sum(confirmed) as cases, sum(deaths) as covid_deaths, date,\ncase\n    when province_state=\"Moscow\" or province_state=\"Moscow Oblast\" then \"Moscow area\"\n    \n    when province_state=\"Saint Petersburg\" or province_state=\"Leningrad Oblast\" \n    or province_state=\"Arkhangelsk Oblast\" or province_state=\"Vologda Oblast\" \n    or province_state=\"Kaliningrad Oblast\" or province_state=\"Karelia Republic\"\n    or province_state=\"Murmansk Oblast\" or province_state=\"Komi Republic\" \n    or province_state=\"Nenets Autonomous Okrug\" or province_state=\"Novgorod Oblast\" \n    or province_state=\"Pskov Oblast\"\n    then \"Northwestern\"\n    \n    when province_state=\"Nizhny Novgorod Oblast\" or province_state=\"Bashkortostan Republic\"\n    or province_state=\"Bashkortostan Republic\" or province_state=\"Mari El Republic\"\n    or province_state=\"Kirov Oblast\" or province_state=\"Mordovia Republic\"\n    or province_state=\"Orenburg Oblast\" or province_state=\"Penza Oblast\"\n    or province_state=\"Perm Krai\" or province_state=\"Samara Oblast\"\n    or province_state=\"Saratov Oblast\" or province_state=\"Tatarstan Republic\"\n    or province_state=\"Udmurt Republic\" or province_state=\"Ulyanovsk Oblast\"\n    or province_state=\"Chuvash Republic\"\n    then \"Volga\"\n    \n    when province_state=\"Rostov Oblast\" or province_state=\"Krasnodar Krai\" \n    or province_state=\"Adygea Republic\" or province_state=\"Volgograd Oblast\" \n    or province_state=\"Astrakhan Oblast\" \n    then \"Southern\"\n    \n    when province_state=\"Dagestan Republic\"or province_state=\"Ingushetia Republic\"\n    or province_state=\"Kabardino-Balkarian Republic\" or province_state=\"Karachay-Cherkess Republic\" \n    or province_state=\"North Ossetia-Alania Republic\" or province_state=\"North Ossetia-Alania Republic\" \n    or province_state = \"Chechen Republic\" or province_state=\"Stavropol Krai\" \n    then \"Caucasian\"\n    \n    when province_state=\"Kurgan Oblast\" or province_state=\"Sverdlovsk Oblast\"\n    or province_state=\"Tyumen Oblast\" or province_state=\"Chelyabinsk Oblast\" \n    or province_state=\"Yamalo-Nenets Autonomous Okrug\" or province_state=\"Khanty-Mansi Autonomous Okrug\" \n    then \"Ural\"\n    \n    when province_state=\"Amur Oblast\"or province_state=\"Buryatia Republic\"\n    or province_state=\"Jewish Autonomous Oblast\" or province_state=\"Zabaykalsky Krai\" \n    or province_state=\"Kamchatka Krai\" or province_state=\"Magadan Oblast\" \n    or province_state=\"Primorsky Krai\" or province_state=\"Sakha Republic\" \n    or province_state=\"Sakhalin Oblast\" or province_state=\"Khabarovsk Krai\"\n    or province_state=\"Chukotka Autonomous Okrug\"\n    then \"Far East\"\n    \n    when province_state=\"Altai Republic\" or province_state=\"Altai Krai\" \n    or province_state=\"Irkutsk Oblastt\" or province_state=\"Kemerovo Oblast\" \n    or province_state=\"Krasnoyarsk Krai\" or province_state=\"Novosibirsk Oblast\"\n    or province_state=\"Omsk Oblast\" or province_state=\"Tomsk Oblast\" \n    or province_state=\"Tuva Republic\" or province_state=\"Khakassia Republic\" \n    then \"Siberian\"\n    \n    else \"Central\" end as area\n\nfrom `bigquery-public-data.covid19_jhu_csse.summary`\nwhere country_region=\"Russia\" and date > \"2020-05-25\"\ngroup by area,date\norder by area,date desc\n\"\"\"\n\nsafe_config = bigquery.QueryJobConfig(\n    maximum_bytes_billed=10**10)\nbigquery_cases = client.query(\n    query_russia_max, job_config=safe_config)\nrussia_areas = bigquery_cases.to_dataframe()\n\n\n\nfig = px.area(russia_areas, x='date',y='cases', color='area',\n        template='simple_white', line_shape='linear',\n        color_discrete_sequence=colors,\n        title='Changing in shares of COVID-cases amongst Russian Areas')\n\nfig.update_traces(\n    line_width=.85\n)\n\nfig.update_layout(\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label=\"1m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=6,\n                     label=\"6m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=1,\n                     label=\"YTD\",\n                     step=\"year\",\n                     stepmode=\"todate\"),\n                dict(count=1,\n                     label=\"1y\",\n                     step=\"year\",\n                     stepmode=\"backward\"),\n                dict(step=\"all\")\n            ])\n        ),\n        rangeslider=dict(\n            visible=True\n        ),\n        type=\"date\"\n    )\n)\nfig.show()\n\nfig = px.area(russia_areas, x='date',y='covid_deaths', color='area',\n        template='simple_white', line_shape='linear',\n        color_discrete_sequence=colors,\n        title='Changing in shares of COVID-deaths amongst Russian Areas')\n\nfig.update_traces(\n    line_width=.85\n)\n\nfig.update_layout(\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label=\"1m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=6,\n                     label=\"6m\",\n                     step=\"month\",\n                     stepmode=\"backward\"),\n                dict(count=1,\n                     label=\"YTD\",\n                     step=\"year\",\n                     stepmode=\"todate\"),\n                dict(count=1,\n                     label=\"1y\",\n                     step=\"year\",\n                     stepmode=\"backward\"),\n                dict(step=\"all\")\n            ])\n        ),\n        rangeslider=dict(\n            visible=True\n        ),\n        type=\"date\"\n    )\n)\nfig.show()","c90a1cb5":"russia_vaccines = world_vaccines.query(\"location == 'Russia'\").set_index('location')\nrussia_vaccines.tail(1)","fe1941d3":"excesses = pd.read_csv('https:\/\/raw.githubusercontent.com\/akarlinsky\/world_mortality\/main\/world_mortality.csv')\nexcesses_russia = excesses.query('country_name==\"Russia\"').sort_values(['year','time'], ascending=True)\nexcesses_russia['time'] = excesses_russia.time.apply(lambda x: calendar.month_name[x])\n\nexcesses_russia['year'] = excesses_russia['year'].astype(str)\n\nfig=px.bar(\n    excesses_russia, y='year', x='deaths',color='time',\n    template='simple_white', height=320, opacity=.85, \n    title='Excesses Deaths in Russia a year-to-year comparasion')\n\nfig.update_traces(\n    marker_line_color='black')\n\nfig.update_layout(\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)')\n\nfig.show()\n\nfig=px.line(\n    excesses_russia.query('year!=\"2020\" and year!=\"2021\"'), y='deaths', x='time',color='year', \n    template='simple_white', width=700, height=420, \n    title='Excesses Deaths in Russia: a Scope of Last Years')\n\nfig.update_traces(line_width=.75,\n    marker_line_color='black', line_color='lightgreen')\n\nfig.add_trace(\n    go.Scatter(name='2020', mode='lines+markers',hovertext=excesses_russia.query('year==\"2020\"')['year'],\n    x=excesses_russia.query('year==\"2020\"')['time'],y=excesses_russia.query('year==\"2020\"')['deaths'],\n    hoverlabel=dict(namelength=0),hovertemplate='<br>Year: %{hovertext}<br>Month: %{x} <br>Overall Deaths: %{y}')\n)\n\nfig.update_layout(\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)')\n\nfig.show()","313a8c2e":"excesses_usa = excesses.query('country_name==\"United States\"').sort_values(\n    ['year','time'], ascending=True).fillna(0)\n\ndef monday_of_calenderweek(s1, s2):\n    months = []\n    for year in s1.astype(int).unique():\n        weeks = s2[s2.index.isin(s1[s1==year].index.values)]\n        for week in weeks:\n            first = date(year, 1, 1)\n            base = 1 if first.isocalendar()[1] == 1 else 8\n            month = (first + timedelta(days=base - first.isocalendar()[2] + 7 * (week - 1))).month\n            months.append(month)\n    return months\n\nexcesses_usa['month'] = monday_of_calenderweek(excesses_usa.year,excesses_usa.time)\nexcesses_usa['year'] = excesses_usa['year'].astype(str)\nexcesses_usa = excesses_usa.groupby(['year','month'])['deaths'].sum().reset_index()\n\nexcesses_usa['month'] = excesses_usa['month'].apply(lambda x: calendar.month_name[x])\n\nfig=px.bar(\n    excesses_usa, y='year', x='deaths',color='month', \n    template='simple_white', height=320, opacity=.85, \n    title='Excesses Deaths in USA a year-to-year comparasion')\nfig.update_traces(\n    marker_line_color='black', opacity=.75)\n\nfig.show()\n\nfig=px.line(\n    excesses_usa.query('year!=\"2020\" and year!=\"2021\"'), y='deaths', x='month',color='year', \n    template='simple_white', width=700, height=420, title='Excesses Deaths in USA: a Scope of Last Years')\n\nfig.update_traces(line_width=.85,\n    marker_line_color='black', line_color='lightgreen')\n\nfig.add_trace(\n    go.Scatter(name='2020',x=excesses_usa.query('year==\"2020\"')['month'],y=excesses_usa.query('year==\"2020\"')['deaths'],\n    mode='lines+markers',hovertext=excesses_usa.query('year==\"2020\"')['year'],\n    hoverlabel=dict(namelength=0),hovertemplate='<br>Year: %{hovertext}<br>Month: %{x} <br>Overall Deaths: %{y}')\n)\n\nfig.show()","7c425cf1":"## Data Load\n--------","c8c9d726":"## COVID-19 in Russia\n--------","049242b4":"### Data on Vaccinations","8676b3c9":"#### Brief Data on Vaccinations in India","39f545b8":"### Brief Data on Vaccinations in Russia","6889454c":"### Coronavirus spread in the World","dc4d18ee":"## COVID-19 in India\n--------","fad7e4e7":"### Top 6 Comparasion","7dc9c0c9":"### Cumulative COVID-growth in Russian Areas","1f2eebbe":"#### Excesses Deaths in Russia","8e0a6f7a":"## COVID-19: the World Global Problem\n---------"}}