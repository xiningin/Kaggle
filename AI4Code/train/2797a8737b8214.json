{"cell_type":{"f7cd5db8":"code","72d33c35":"code","458f7d52":"code","cd3bb244":"code","0886ca92":"code","85bb385f":"code","c013120a":"code","03033071":"code","6242855e":"code","17d8a2fb":"code","2621a669":"code","66a37cc8":"code","711fc5f8":"code","19c59570":"code","d483aacd":"code","57bed69a":"markdown","9e50e4c4":"markdown","05ab9208":"markdown","4fb17f89":"markdown","c6eb8db9":"markdown","226bd2ef":"markdown","4903628d":"markdown","38f10cd0":"markdown","7c6b54b1":"markdown","83b8a3d5":"markdown","03f9e9c1":"markdown"},"source":{"f7cd5db8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","72d33c35":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n# !pip3 install geopandas\n# !pip3 install descartes\n# !pip3 install shapely\n# !pip3 install dash\n# !pip3 install contextily\n# !pip3 install geopy\n# !pip3 install mercantile\n# !pip3 install pillow\n# !pip3 install rasterio\n# !pip3 install joblib\n# !pip3 install osmnx\nimport geopandas as gpd\nimport matplotlib\nimport seaborn as sns\nimport geopandas as gpd\n# !pip3 install yfinance\n# !pip3 install lxml\n# !pip3 install html5lib\n# !pip3 install bsedata\n# !pip3 install pandas_datareader\nimport pandas_datareader\nimport pandas as pd\nfrom pandas_datareader import data\n!pip install mplfinance\nimport  mplfinance as mpf\nimport matplotlib.dates as mdates","458f7d52":"geo_location = pd.read_csv(\"\/kaggle\/input\/india-aq-dataset-2020\/India AQ 2020\/Geo-Locations.csv\")\ngeo_location = geo_location[:-1]\ngeo_location.head()","cd3bb244":"aq = pd.read_csv(\"\/kaggle\/input\/india-aq-dataset-2020\/India AQ 2020\/India-Full.csv\",error_bad_lines=False)\naq_updated = aq[['city','local','value','latitude','longitude']]\naq_updated.head()","0886ca92":"date_time = []\nfor index, row in aq_updated.iterrows():\n    date_time.append(\" \".join(row['local'].split(\"+\")[0].split(\"T\")))\naq_updated['time'] = date_time\naq_updated.head()","85bb385f":"print(max(aq_updated['latitude']))\nprint(min(aq_updated['latitude']))\nprint(max(aq_updated['longitude']))\nprint(min(aq_updated['longitude']))","c013120a":"unique_values =  pd.unique(aq_updated['time'])\nprint(len(unique_values))","03033071":"for i,v in enumerate(unique_values):\n    d = aq_updated[aq_updated['time']==v]","6242855e":"date = []\nfor index, row in aq_updated.iterrows():\n    date.append(row['time'].split(\" \")[0])\naq_updated['date'] = date\naq_updated.head()","17d8a2fb":"data_reverse = aq_updated.reindex(index=aq_updated.index[::-1])\ndata_reverse.head()\ndelhi = data_reverse[data_reverse['city']=='Delhi']\nmumbai = data_reverse[data_reverse['city']=='Mumbai']\nKanpur = data_reverse[data_reverse['city']=='Kanpur']\nFaridabad = data_reverse[data_reverse['city']=='Faridabad']\nVaranasi = data_reverse[data_reverse['city']=='Varanasi']\nPatna = data_reverse[data_reverse['city']=='Patna']\nLucknow = data_reverse[data_reverse['city']=='Lucknow']\nAgra = data_reverse[data_reverse['city']=='Agra']\nframes = [delhi, mumbai, Kanpur, Faridabad,Varanasi,Patna]\nresult = pd.concat(frames)\n\nprint(len(delhi))\nprint(len(mumbai))\n\nfig, ax = plt.subplots(nrows=8, sharex=True, figsize=(40,20))\nmatplotlib.rcParams.update({'font.size': 50})\ndelhi.plot(kind='line',x='date',y='value',ax=ax[0], label='Delhi')\nmumbai.plot(kind='line',x='date',y='value',ax=ax[1], label='Mumbai')\nKanpur.plot(kind='line',x='date',y='value',ax=ax[2], label='Kanpur')\nFaridabad.plot(kind='line',x='date',y='value',ax=ax[3], label='Faridabad')\nVaranasi.plot(kind='line',x='date',y='value',ax=ax[4], label='Varanasi')\nPatna.plot(kind='line',x='date',y='value',ax=ax[5], label='Patna')\nLucknow.plot(kind='line',x='date',y='value',ax=ax[6], label='Lucknow')\nAgra.plot(kind='line',x='date',y='value',ax=ax[7], label='Agra')\n\nplt.xticks(rotation=90)\nplt.show()","2621a669":"result.head()","66a37cc8":"sns.set(style=\"ticks\", context=\"talk\",font_scale=3.5,rc={'figure.figsize':(50, 30)})\nplt.style.use(\"dark_background\")\n\n# fig, ax = plt.subplots()\n# fig.set_size_inches(50, 20)\ng = sns.relplot(x=\"date\", y=\"value\",markers=True,style=\"city\", hue=\"city\", height=20, aspect=50\/20, kind=\"line\",ci=\"sd\",legend = 'full',data=result)\nfor ax in g.axes.flat:\n    labels = ax.get_xticklabels() # get x labels\n    for i,l in enumerate(labels):\n        if(i%10 == 0): labels[i] = '' # skip even labels\n    ax.set_xticklabels(labels, rotation=90) # set new labels\n    ax.axhline(35.4, ls='--',color='r',linewidth=3)\ng.add_legend(bbox_to_anchor=(1.05, 0), borderaxespad=0.1)\nplt.title('Time series plot of PM2.5 values of the top 6 polluted places of India')\n\nplt.savefig(\"compare.png\")\nplt.show()","711fc5f8":"\ngeo_location = pd.read_csv(\"\/kaggle\/input\/india-aq-dataset-2020\/India AQ 2020\/Geo-Locations.csv\")\ngeo_location = geo_location[:-1]\ngeo_location.head()\n\naq_others_delhi = pd.read_csv(\"\/kaggle\/input\/india-aq-dataset-2020\/India AQ 2020\/all_delhi.csv\",error_bad_lines=False)\naq_others_faridabad = pd.read_csv(\"\/kaggle\/input\/india-aq-dataset-2020\/India AQ 2020\/all_faridabad.csv\",error_bad_lines=False)\naq_others_kanpur = pd.read_csv(\"\/kaggle\/input\/india-aq-dataset-2020\/India AQ 2020\/all_kanpur.csv\",error_bad_lines=False)\naq_others_mumbai = pd.read_csv(\"\/kaggle\/input\/india-aq-dataset-2020\/India AQ 2020\/all_mumbai.csv\",error_bad_lines=False)\naq_others_patna = pd.read_csv(\"\/kaggle\/input\/india-aq-dataset-2020\/India AQ 2020\/all_patna.csv\",error_bad_lines=False)\naq_others_varanasi = pd.read_csv(\"\/kaggle\/input\/india-aq-dataset-2020\/India AQ 2020\/all_varanasi.csv\",error_bad_lines=False)\nframes = [\n    aq_others_delhi, \n    aq_others_faridabad, \n    aq_others_kanpur, \n    aq_others_mumbai,\n    aq_others_patna,\n    aq_others_varanasi\n]\naq_others = pd.concat(frames)\ndate_time = []\nfor index, row in aq_others.iterrows():\n    date_time.append(\" \".join(row['local'].split(\"+\")[0].split(\"T\")))\naq_others['time'] = date_time\ndate = []\nfor index, row in aq_others.iterrows():\n    date.append(row['time'].split(\" \")[0])\naq_others['date'] = date\naq_others.head()\nuni_chemicals = pd.unique(aq_others['parameter'])\nprint(uni_chemicals)\nuni_chemicals = pd.unique(aq_others['parameter'])\ncities = ['Delhi', 'Mumbai', 'Kanpur', 'Faridabad','Varanasi','Patna']\n#     if chem == 'no2':\n#         p='YlOrRd'\n#     elif chem == 'co':\n#         p='YlGnBu'\n#     elif chem == 'pm10':\n#         p = 'RdBu'\n#     elif chem == 'o3':\n#         p = 'PiYG'\n#     elif chem == 'so2':\n#         p = 'Accent_r' \nd = aq_others[aq_others['parameter']=='no2']\nsns.set(style=\"ticks\", context=\"talk\",font_scale=3.5,rc={'figure.figsize':(50, 30)})\nplt.style.use(\"dark_background\")\ng = sns.relplot(x=\"date\", y=\"value\", palette='YlOrRd',markers=True,style=\"city\", hue=\"city\", height=20, aspect=50\/20, kind=\"line\",ci=\"sd\",legend = 'full',data=d)\nfor ax in g.axes.flat:\n    labels = ax.get_xticklabels() # get x labels\n    for i,l in enumerate(labels):\n        if(i%10 == 0): labels[i] = '' # skip even labels\n    ax.set_xticklabels(labels, rotation=90) # set new labels\nplt.title('Pollutant levels plot for no2')\ng.add_legend(bbox_to_anchor=(1.05, 0), borderaxespad=0.1)\n# plt.tight_layout()\nplt.ylim(0, 250)\nplt.savefig(\"no2.png\")\nplt.show()\n\nd = aq_others[aq_others['parameter']=='co']\nsns.set(style=\"ticks\", context=\"talk\",font_scale=3.5,rc={'figure.figsize':(50, 30)})\nplt.style.use(\"dark_background\")\ng = sns.relplot(x=\"date\", y=\"value\", palette='YlGnBu',markers=True,style=\"city\", hue=\"city\", height=20, aspect=50\/20, kind=\"line\",ci=\"sd\",legend = 'full',data=d)\nfor ax in g.axes.flat:\n    labels = ax.get_xticklabels() # get x labels\n    for i,l in enumerate(labels):\n        if(i%10 == 0): labels[i] = '' # skip even labels\n    ax.set_xticklabels(labels, rotation=90) # set new labels\nplt.title('Pollutant levels plot for co')\ng.add_legend(bbox_to_anchor=(1.05, 0), borderaxespad=0.1)\n# plt.tight_layout()\nplt.ylim(0, 4500)\nplt.savefig(\"co.png\")\nplt.show()\n\nd = aq_others[aq_others['parameter']=='pm10']\nsns.set(style=\"ticks\", context=\"talk\",font_scale=3.5,rc={'figure.figsize':(50, 30)})\nplt.style.use(\"dark_background\")\ng = sns.relplot(x=\"date\", y=\"value\", palette='PuRd',markers=True,style=\"city\", hue=\"city\", height=20, aspect=50\/20, kind=\"line\",ci=\"sd\",legend = 'full',data=d)\nfor ax in g.axes.flat:\n    labels = ax.get_xticklabels() # get x labels\n    for i,l in enumerate(labels):\n        if(i%10 == 0): labels[i] = '' # skip even labels\n    ax.set_xticklabels(labels, rotation=90) # set new labels\nplt.title('Pollutant levels plot for pm10')\ng.add_legend(bbox_to_anchor=(1.05, 0), borderaxespad=0.1)\n# plt.tight_layout()\nplt.ylim(0, 400)\nplt.savefig(\"pm10.png\")\nplt.show()\n\nd = aq_others[aq_others['parameter']=='o3']\nsns.set(style=\"ticks\", context=\"talk\",font_scale=3.5,rc={'figure.figsize':(50, 30)})\nplt.style.use(\"dark_background\")\ng = sns.relplot(x=\"date\", y=\"value\", palette='PiYG',markers=True,style=\"city\", hue=\"city\", height=20, aspect=50\/20, kind=\"line\",ci=\"sd\",legend = 'full',data=d)\nfor ax in g.axes.flat:\n    labels = ax.get_xticklabels() # get x labels\n    for i,l in enumerate(labels):\n        if(i%10 == 0): labels[i] = '' # skip even labels\n    ax.set_xticklabels(labels, rotation=90) # set new labels\nplt.title('Pollutant levels plot for o3')\ng.add_legend(bbox_to_anchor=(1.05, 0), borderaxespad=0.1)\n# plt.tight_layout()\nplt.ylim(0, 400)\nplt.savefig(\"o3.png\")\nplt.show()\n\nd = aq_others[aq_others['parameter']=='so2']\nsns.set(style=\"ticks\", context=\"talk\",font_scale=3.5,rc={'figure.figsize':(50, 30)})\nplt.style.use(\"dark_background\")\ng = sns.relplot(x=\"date\", y=\"value\", palette='Accent_r',markers=True,style=\"city\", hue=\"city\", height=20, aspect=50\/20, kind=\"line\",ci=\"sd\",legend = 'full',data=d)\nfor ax in g.axes.flat:\n    labels = ax.get_xticklabels() # get x labels\n    for i,l in enumerate(labels):\n        if(i%10 == 0): labels[i] = '' # skip even labels\n    ax.set_xticklabels(labels, rotation=90) # set new labels\nplt.title('Pollutant levels plot for so2')\ng.add_legend(bbox_to_anchor=(1.05, 0), borderaxespad=0.1)\n# plt.tight_layout()\nplt.ylim(0, 250)\nplt.savefig(\"so2.png\")\nplt.show()\n\n","19c59570":"start_date = '2020-02-01'\nend_date = '2020-04-20'\n# Set the ticker\nticker = 'TATAMOTORS.NS'\ndata_TATAMOTORS = data.get_data_yahoo(ticker, start_date, end_date)\ndate = data_TATAMOTORS.index\ndata_TATAMOTORS['date'] = date\nticker = 'LT.NS'\ndata_LT = data.get_data_yahoo(ticker, start_date, end_date)\ndate = data_LT.index\ndata_LT['date'] = date\nticker = 'IRCTC.NS'\ndata_IRCTC = data.get_data_yahoo(ticker, start_date, end_date)\ndate = data_IRCTC.index\ndata_IRCTC['date'] = date\nticker = 'INDIGO.NS'\ndata_INDIGO = data.get_data_yahoo(ticker, start_date, end_date)\ndate = data_INDIGO.index\ndata_INDIGO['date'] = date\nticker = 'DMART.NS'\ndata_DMART = data.get_data_yahoo(ticker, start_date, end_date)\ndate = data_DMART.index\ndata_DMART['date'] = date","d483aacd":"data_LT = data_LT[['date', 'Open', 'High', 'Low', 'Close', 'Volume']]\ndata_TATAMOTORS = data_TATAMOTORS[['date', 'Open', 'High', 'Low', 'Close', 'Volume']]\ndata_IRCTC = data_IRCTC[['date', 'Open', 'High', 'Low', 'Close', 'Volume']]\ndata_INDIGO = data_INDIGO[['date', 'Open', 'High', 'Low', 'Close', 'Volume']]\ndata_DMART = data_DMART[['date', 'Open', 'High', 'Low', 'Close', 'Volume']]\n\n# data_DMART[\"date\"] = data_DMART[\"date\"].apply(mdates.date2num)\nplt.rc('font', size=20)          \nplt.rc('axes', titlesize=20)    \nplt.rc('axes', labelsize=20) \nmpf.plot(\n    data_LT,\n    type='candle',\n    mav=3,\n    volume=True,\n    figscale=2.5,\n    title='L&T: 1 February 2020 - 20 April 2020',\n    ylabel='Candles',\n    ylabel_lower='Volume',\n    style='nightclouds'\n)\nplt.rc('font', size=20)          \nplt.rc('axes', titlesize=20)    \nplt.rc('axes', labelsize=20) \nmpf.plot(\n    data_TATAMOTORS,\n    type='candle',\n    mav=3,\n    volume=True,\n    figscale=2.5,\n    title='TATAMOTORS: 1 February 2020 - 20 April 2020',\n    ylabel='Candles',\n    ylabel_lower='Volume',\n    style='nightclouds'\n)\n\nplt.rc('font', size=20)          \nplt.rc('axes', titlesize=20)    \nplt.rc('axes', labelsize=20) \nmpf.plot(\n    data_IRCTC,\n    type='candle',\n    mav=3,\n    volume=True,\n    figscale=2.5,\n    title='IRCTC: 1 February 2020 - 20 April 2020',\n    ylabel='Candles',\n    ylabel_lower='Volume',\n    style='nightclouds'\n)\n\nplt.rc('font', size=20)          \nplt.rc('axes', titlesize=20)    \nplt.rc('axes', labelsize=20) \nmpf.plot(\n    data_INDIGO,\n    type='candle',\n    mav=3,\n    volume=True,\n    figscale=2.5,\n    title='INDIGO: 1 February 2020 - 20 April 2020',\n    ylabel='Candles',\n    ylabel_lower='Volume',\n    style='nightclouds'\n)\n\nplt.rc('font', size=20)          \nplt.rc('axes', titlesize=20)    \nplt.rc('axes', labelsize=20) \nmpf.plot(\n    data_DMART,\n    type='candle',\n    mav=3,\n    volume=True,\n    figscale=2.5,\n    title='DMART: 1 February 2020 - 20 April 2020',\n    ylabel='Candles',\n    ylabel_lower='Volume',\n    style='nightclouds'\n)\n","57bed69a":"## Reading Geo-Locations","9e50e4c4":"## Printing maximum and minimum values of longitudes and latitudes","05ab9208":"## Plotting time series plots of PM2.5 values in major cities","4fb17f89":"## Changing the format of time column","c6eb8db9":"## Extracting stock market data","226bd2ef":"# Kindly VOTE if you LIKED IT and COMMENT for any ADVICE","4903628d":"## Combined time series plot of PM2.5 values in major cities ","38f10cd0":"## Importing Libraries","7c6b54b1":"## Plotting the stock market data","83b8a3d5":"## Reading Main Dataset","03f9e9c1":"## Combined time series plot of PM10,CO,NO2,SO2,O3 values in major cities "}}