{"cell_type":{"0387e20a":"code","31e11e47":"code","08b8fd00":"code","f0058111":"code","0e42e008":"code","9fcd9813":"code","f859a111":"code","eaa703be":"code","4aeef399":"code","142680c1":"code","b9bd6b99":"code","627929b9":"code","36096230":"code","7fe8d549":"code","bc7e88e5":"code","215bdc0b":"code","81b37bba":"code","9f6da8d8":"code","e8c941b5":"code","31713437":"code","6debece5":"code","d835fb53":"code","e3efa22f":"code","103a3938":"code","09414a2f":"code","1c6cac17":"code","0e09da6e":"code","032c6298":"code","05ec70f4":"code","6894d303":"code","2cd879af":"code","a3c4797d":"code","71f31087":"code","de55ca54":"code","797a54da":"code","a715a949":"code","aabfb151":"code","d7360e29":"code","e18d2caf":"code","5f066b9d":"code","bc4d660f":"code","8c6d2dfb":"code","dfe69c80":"code","572a5c1a":"markdown","b0012a3b":"markdown","a5661aaa":"markdown","0f376b24":"markdown","964e5835":"markdown","a4aa7456":"markdown","8495be93":"markdown","0c344152":"markdown","4de15b80":"markdown","87f8a616":"markdown","aba1459d":"markdown","a48d02c1":"markdown"},"source":{"0387e20a":"# Reseting memory\n%reset -f     ","31e11e47":"# 1.0 Calling libraries\n\n# 1.1 Warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# 1.2 Data manipulation library\nimport pandas as pd\nimport numpy as np\nimport re\n\n# 1.3 Plotting library\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\n\n# 1.4 Modeling librray\n# 1.4.1 Class to develop kmeans model\nfrom sklearn.cluster import KMeans\n# 1.4.2 Scale data\nfrom sklearn.preprocessing import StandardScaler\n# 1.4.3 Split dataset\nfrom sklearn.model_selection import train_test_split\n\n# 1.5 How good is clustering?\nfrom sklearn.metrics import silhouette_score\nfrom yellowbrick.cluster import SilhouetteVisualizer\n\n# 1.6 os related\nimport os","08b8fd00":"# 2.0 Display multiple outputs from a jupyter cell\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","f0058111":"# 3.0 Set numpy options to display wide array\nnp.set_printoptions(precision = 3,          # Display upto 3 decimal places\n                    threshold=np.inf        # Display full array\n                    )","0e42e008":"# 4.0 Seting display options\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 100)","9fcd9813":"# 5.0 Read dataset from csv files\ndf_fundamentals = pd.read_csv(\"..\/input\/nyse-sp500-dataset\/fundamentals.csv\",parse_dates = ['Period Ending'],index_col='Unnamed: 0')\ndf_split_adj_prices = pd.read_csv(\"..\/input\/nyse-sp500-dataset\/prices-split-adjusted.csv\")\ndf_securities = pd.read_csv(\"..\/input\/nyse-sp500-dataset\/securities.csv\")","f859a111":"# 6.0 Exploring dataset","eaa703be":"df_fundamentals.head()  ","4aeef399":"df_fundamentals.shape               # (1781, 78)","142680c1":"df_fundamentals.dtypes ","b9bd6b99":"# 7.0 cleaning\/renaming column names\ndf_fundamentals.columns = df_fundamentals.columns.str.replace(' ', '_').str.replace(\"'\", 'n').str.replace(',', '').str.replace('\/', '_to_').str.replace('.', '').str.strip().str.lower()                         \ndf_fundamentals.dtypes","627929b9":"# 8.0 Checking missing values in columns\ndf_fundamentals.isna().any()","36096230":"# Handling missing values\ndf_fundamentals.loc[df_fundamentals[\"cash_ratio\"].isnull() == True,\"cash_ratio\"] = 0\ndf_fundamentals.loc[df_fundamentals[\"current_ratio\"].isnull() == True,\"current_ratio\"] = 0\ndf_fundamentals.loc[df_fundamentals[\"quick_ratio\"].isnull() == True,\"quick_ratio\"] = 0\ndf_fundamentals.loc[df_fundamentals[\"for_year\"].isnull() == True ,\"for_year\"] = df_fundamentals[\"period_ending\"].dt.year\ndf_fundamentals.loc[df_fundamentals[\"earnings_per_share\"].isnull() == True,\"earnings_per_share\"] = 0\ndf_fundamentals.loc[df_fundamentals[\"estimated_shares_outstanding\"].isnull() == True,\"estimated_shares_outstanding\"] = 0\ndf_fundamentals.loc[df_fundamentals[\"for_year\"] == 1215,\"for_year\"] = 2015","7fe8d549":"# 7.0 Group data by Ticker Symbols and take a mean of all numeric variables.\ndf_grp_by_ticker = df_fundamentals.groupby(['ticker_symbol']).mean()\ndf_grp_by_ticker.head()","bc7e88e5":"df_after_tax_roe = df_grp_by_ticker['after_tax_roe'].sort_values(ascending = False).head(5)\ndf_after_tax_roe","215bdc0b":"x = df_after_tax_roe.index\ny = df_after_tax_roe.values\nfig = plt.figure(figsize=(14,1.5))\nfig.subplots_adjust(top=4, bottom=0.01, left=0.2, right=0.99)\nplt.bar(x, y)\n\nfor index, value in enumerate(y):\n    plt.text(index-.2, value + 10, (value), va = 'bottom')\n\nplt.title('Top 5 Companies: After Tax ROE', fontsize = 24)\nplt.xlabel('Ticker Symbol', fontsize = 18)\nplt.ylabel('Mean After Tax ROE', fontsize = 18)    \nplt.yticks([])\nplt.grid(b=None)","81b37bba":"df_Cash_Ratio = df_grp_by_ticker['cash_ratio'].nlargest(5)\n#most_liquid_companies = df_Cash_Ratio.nlargest(5)\n#most_liquid_companies\ndf_Cash_Ratio","9f6da8d8":"# Cash Ratio\nTicker_Symbol = df_Cash_Ratio.index\nCash_Ratio = df_Cash_Ratio.values\nfig2 = px.bar(df_Cash_Ratio,\n                   x = Ticker_Symbol,\n                   y = Cash_Ratio,\n                   #histfunc='avg',\n                   text = Cash_Ratio             \n                   )\n#update_traces(textposition='outside')\nfig2.update_layout(\n    title=\"Most Liquid Companies\",\n    xaxis_title=\"Ticker Symbol\",\n    yaxis_title=\"Cash Ratio\",\n    #font=dict(\n        #family=\"Courier New, monospace\",\n        #size=18,\n        #color=\"#7f7f7f\"\n    #)\n)","e8c941b5":"df_EPS = df_grp_by_ticker['earnings_per_share']\nmost_profitable_companies = df_EPS.nlargest(5).round(decimals=2)\nmost_profitable_companies","31713437":"# EPS\nTicker_Symbol = most_profitable_companies.index\nEPS = most_profitable_companies.values\nfig2 = px.bar(most_profitable_companies,\n                   x = Ticker_Symbol,\n                   y = EPS,\n                   #histfunc='avg',\n                   text = EPS             \n                   )\n#update_traces(textposition='outside')\nfig2.update_layout(\n    title=\"Most Profitable Companies\",\n    xaxis_title=\"Ticker Symbol\",\n    yaxis_title=\"EPS\",\n    #font=dict(\n        #family=\"Courier New, monospace\",\n        #size=18,\n        #color=\"#7f7f7f\"\n    #)\n)\n","6debece5":"len(df_fundamentals)","d835fb53":"# Dropping NaNs\ndf_no_null = df_fundamentals.dropna(axis = 0, how ='any')\nlen(df_no_null)","e3efa22f":"#df_fundamentals\nsns.jointplot(df_fundamentals.profit_margin, df_fundamentals.gross_profit,        kind = 'kde')\n# 'scatter', 'reg', 'resid', 'kde', or 'hex'","103a3938":"# Dataset group by ticker symbol and taking mean of values \ndf_grp_by_ts = df_fundamentals.groupby('ticker_symbol').mean().reset_index()","09414a2f":"# Adding a column gross margin category to dataset. \ndf_grp_by_ts['gross_margin_category'] = df_grp_by_ts['gross_margin'].map(lambda x : 0 if x<=54  else 1)","1c6cac17":"# Creating a copy of dataset containing only float and int columns \ndf = df_grp_by_ts.select_dtypes(include = ['float64','int64']).copy()\ndf.drop(columns = ['for_year'], inplace = True)","0e09da6e":"# New dataframe after droping gross margin category\ny = df['gross_margin_category'].values\ndf.drop(columns = ['gross_margin_category'], inplace = True)","032c6298":"# Scaling using StandardScaler\nss = StandardScaler()\nss.fit(df)\nX = ss.transform(df)","05ec70f4":"# Split dataset into train\/test\nX_train,X_test,_,y_test = train_test_split(X,y,test_size=0.25)","6894d303":"# Draw skree plot\nsse =[]\nfor i in list(range(10)):\n    n_cluster = i+1\n    clf = KMeans(n_clusters = n_cluster)\n    clf.fit(X_train)\n    sse.append(clf.inertia_ )  #append SSE value for this no. of clusters\n    \nsns.lineplot(range(1, 11), sse)   ","2cd879af":"# applying KMeans algo with 2 clusters\ncls = KMeans(n_clusters = 2)      # instantiate KMean object\ncls.fit(X_train)                  # Get info about X_train\ncls.cluster_centers_.shape        # shape of cluster centres\ncls.labels_                       # Cluster labels for every observation\ncls.labels_.size                \ncls.inertia_                      # display value of SSE","a3c4797d":"# Predict clustering for test data\ny_pred = cls.predict(X_test)\ny_pred","71f31087":"# How good is prediction?\nnp.sum(y_pred==y_test)\/y_test.size","de55ca54":"# Are clusters distiguisable?\ndx = pd.Series(X_test[:, 0])\ndy = pd.Series(X_test[:,1])\nsns.scatterplot(dx,dy, hue = y_pred)","797a54da":"# Silhouette score for the clusters\nsilhouette_score(X_train, cls.labels_)","a715a949":"# Yellow brick for plotting Silhouette score for each  cluster\nvisualizer = SilhouetteVisualizer(cls, colors='yellowbrick')\nvisualizer.fit(X_train)\nvisualizer.show()","aabfb151":"# Combining dataset\ndf_sectors = pd.merge(df_fundamentals,df_securities, left_on = \"ticker_symbol\", right_on=\"Ticker symbol\",how=\"left\")","d7360e29":"df_sectors.dtypes","e18d2caf":"df_sectors['for_year'].value_counts()","5f066b9d":"df_sectors.drop(df_sectors[(df_sectors['for_year'] == 2004.0) | \n                           (df_sectors['for_year'] == 2007.0) | \n                           (df_sectors['for_year'] == 2003.0) | \n                           (df_sectors['for_year'] == 2017.0) | \n                           (df_sectors['for_year'] == 2006.0)].index,inplace=True)\ndf_sectors['for_year'] = df_sectors['for_year'].astype('int')","bc4d660f":"df_sectors['for_year'].value_counts()","8c6d2dfb":"df = df_sectors\npx.histogram(df,\n                      x = 'GICS Sector',\n                      y = 'after_tax_roe',\n                      marginal = 'box',\n                      color = 'for_year', \n                      histfunc = 'avg'\n           )","dfe69c80":"df = df_sectors\npx.histogram(df,\n                      x = 'GICS Sector',\n                      y = 'earnings_per_share',\n                      marginal = 'box',\n                      color = 'for_year', \n                      histfunc = 'avg'\n            )","572a5c1a":"## <font color=blue>Clustering<\/font>","b0012a3b":"## <font color=blue>Importing Relevant Libraries<\/font>","a5661aaa":"## <font color=blue>Assignment:<\/font>\nStudy S&P 500 companies' dataset and make ticker & sector wise analysis.\n\n### <font color=blue>About the data set used:<\/font>\n**<font color=blue>prices.csv:<\/font>** It is raw, as-is daily prices. Most of data spans from 2010 to the end 2016, for companies new on stock market date range is shorter. There have been approx. 140 stock splits in that time, this set doesn't account for that.\n\n**<font color=blue>prices-split-adjusted.csv:<\/font>** Same as prices, but there have been added adjustments for splits.\n\n**<font color=blue>securities.csv:<\/font>** General description of each company with division on sectors\n\n**<font color=blue>fundamentals.csv:<\/font>** Metrics extracted from annual SEC 10K fillings (2012-2016), should be enough to derive most of popular fundamental indicators.","0f376b24":"### <font color=blue>Plotting: Top 5 After Tax ROE Companies<\/font>","964e5835":"## <font color=blue>Sector-Wise Analysis<\/font>","a4aa7456":"## <font color=blue>Loading Dataset:<\/font>","8495be93":"## <font color=blue>Top 5: Companies with highest liquidity<\/font>\n\n \n* <font color=blue>Cash ratio<\/font> = (Cash + Marketable Securities)\/Current Liabilities\n* <font color=blue>Quick ratio<\/font> = (Cash + Marketable Securities + Receivables)\/Current liabilities\n* <font color=blue>Current ratio<\/font> = (Cash + Marketable Securities + Receivables + Inventory)\/Current Liabilities\n\nAll three have current liabilities as the denominator and all three include cash and marketable securities in the numerator. The differences between them are that the cash ratio, the most stringent and conservative of the three, allows only the most liquid of assets\u2014cash and marketable securities\u2014as offsetting assets against liabilities. Both the current ratio and the quick ratio allow other assets to count against liabilities. (ref: https:\/\/www.thebalancesmb.com)\n","0c344152":"### Facebook by far has the highest liquidity","4de15b80":"## <font color=blue>Top 5: Companies with highest earning per share (EPS)<\/font>\nEarnings per share or EPS is an important financial measure, which indicates the profitability of a company. It is calculated by dividing the company\u2019s net income with its total number of outstanding shares. It is a tool that market participants use frequently to gauge the profitability of a company before buying its shares.","87f8a616":"## <font color=blue>Top 5: After Tax ROE Companies<\/font>\nReturn on equity (ROE) is a measure of financial performance calculated by dividing net income by shareholders' equity. Because shareholders' equity is equal to a company\u2019s assets minus its debt, ROE is considered the return on net assets. ROE is considered a measure of how effectively management is using a company\u2019s assets to create profits. (Ref: investopedia)","aba1459d":"### The Priceline Group Inc. most profitable company","a48d02c1":"### L Brands, Inc. (LB) has the highest after tax ROE"}}