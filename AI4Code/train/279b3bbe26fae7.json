{"cell_type":{"88e27026":"code","fd0dc98d":"code","2d7d8720":"code","be20126b":"code","748d13fa":"code","f7e1062b":"code","69175462":"code","b8dc1ba4":"code","cbb4a83d":"code","47059e45":"code","245a148e":"code","8102c465":"code","3f8882cb":"code","9680df21":"code","0c82dbee":"code","8df2ce8f":"code","944a335d":"code","9f096e78":"code","b18963fc":"code","4808704f":"code","9be3ba1e":"code","7210d30c":"code","21a65e86":"code","9212ad45":"code","167ffc4a":"code","9a23586e":"code","fa367850":"code","8ff6dc39":"code","ba808d7f":"code","181051e1":"code","e75c1a63":"code","e26c9046":"code","96c18ac5":"code","c93d1bd6":"code","70dd923e":"code","55b5b281":"code","46f01e35":"code","ce5f17e6":"code","24a08c86":"code","dd9ac6fb":"code","962cdb7a":"code","a5c77f2c":"code","0435acd9":"code","ec14611e":"code","0eb553fc":"code","a63339a7":"code","d6d4cc97":"code","421ba6be":"code","691e2c98":"code","6224c6fd":"code","1d351f62":"code","5e3f77da":"code","cbc3378e":"code","46d1ff84":"code","ff3014d3":"code","6d9a38c7":"code","ee26e857":"code","18bdac52":"code","27029b10":"code","5f813340":"code","6bebd62d":"code","fd27a7ea":"code","194dd3ac":"code","8be3727c":"code","04f5a875":"code","04460c4a":"code","2b5fcc26":"code","443d663f":"code","01c09573":"code","026c1491":"code","4eb63b0c":"code","8ad9e829":"code","a4ee081a":"code","50bd4843":"code","5a4de45c":"code","87d40a25":"code","e15efc58":"code","3e54aad4":"code","c91eaf68":"code","25395977":"code","2910f51a":"code","4799d9ea":"code","5f8d7bb1":"code","25c760a2":"code","f102e8fd":"code","6d838e11":"code","daedc76a":"code","e90fa1cc":"code","ccc637af":"code","b7bd7f08":"code","fbafd446":"code","2e9ec283":"code","2bf80951":"code","ecd99268":"code","1f9eec50":"code","08f7b8cc":"code","0c39eea7":"code","74af6c42":"code","6117f50e":"code","2fe161fb":"code","5fafd721":"code","956b856f":"code","40d27b61":"markdown"},"source":{"88e27026":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns  # visualization tool\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","fd0dc98d":"data=pd.read_csv('..\/input\/data.csv')","2d7d8720":"data.info()","be20126b":"data.columns","748d13fa":"data.head(8)","f7e1062b":"f,ax=plt.subplots(figsize=(18,18))\nsns.heatmap(data.corr(),annot=True,linewidths=5,fmt='.1f',ax=ax)\n\n\n","69175462":"data.Overall.plot(kind=\"line\",color=\"r\",label=\"Overall\",linewidth=1,alpha=1,grid=True,linestyle=':')\n\n","b8dc1ba4":"data.plot(kind='scatter',x= 'Age',y='Overall',alpha=0.5,color='red')\nplt.legend(\"upper-right\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Value\")","cbb4a83d":"data.columns","47059e45":"data.Age.plot(kind='hist', bins=40,figsize=(15,15),color='r')","245a148e":"dictionary={'turkey':'Ankara','Germany':'Berlin'}\n","8102c465":"dictionary['France']='Paris' #add france\nprint(dictionary.keys())","3f8882cb":"print(dictionary.values())","9680df21":"del dictionary[\"Germany\"] #delete Germany\n","0c82dbee":"print(dictionary)","8df2ce8f":"del dictionary #del dictionary for alan kazanmak i\u00e7in","944a335d":"values=data['Value']\nprint(values)\nprint(type(values))","9f096e78":"x=data['Age']>25\ndata[x]","b18963fc":"data[np.logical_and(data['Age']>30,data['Overall']>90)]","4808704f":"data.info()","9be3ba1e":"Dictionary={'Dinner':'Sushi','Drink':'Coke','Dessert':'Cheescake'}\nprint(Dictionary)","7210d30c":"print(Dictionary.keys())","21a65e86":"print(Dictionary.values())","9212ad45":"Dictionary['soup']=\"Tomatoes Soup\"","167ffc4a":"print(Dictionary.values())","9a23586e":"Dictionary[\"Drink\"]=\"Coffee\"","fa367850":"del Dictionary['Dinner'] #just dinner data","8ff6dc39":"del Dictionary #all Dictionary delete","ba808d7f":"def sum():\n    a=5\n    b=4\n    z=a+b\n    return z\n\nprint(sum())\n","181051e1":"a=7   #If \"a\" is defined in the function it is used\n#isn't defined used to this \ndef sum():\n    b=3\n    z=a+b\n    return z\n        \nprint(sum())\n\n\n\n\n\n\n","e75c1a63":"a=4\ndef sum():\n    a=10\n    b=1\n    return a+b\n\nprint(sum())\n","e26c9046":"def Multi():\n    def sum():\n        a=4\n        b=2\n        return a+b\n    c=2\n    return sum()**c\nprint(Multi())","96c18ac5":"def trial(a,b=2): #defaul b value is 2 if we write diffirent  value b is change\n    y=a+b\n    return y\nprint(trial(7))","c93d1bd6":"def trial(a,b=2):\n    y=a+b\n    return y\nprint(trial(7,4))\n","70dd923e":"def args1(*args): #if the number of values is not certain use to\n    for i in args:\n        print(i)\nargs1(1,2,3,44,54,66)        \n#if args use for Dictionary >**kwargs","55b5b281":"def trial_2(**kwargs): #for Dictionary\n    for key, value in kwargs.items():\n         print(\"{0} = {1}\".format(key, value))\n    \ntrial_2(dessert=\"Tiramisu\")\n\n\n\n        ","46f01e35":"square=lambda x:x**2 #lambda is easier than user define function\nprint(square(4))","ce5f17e6":"number_list=[24,5,96,7] \ny=map(lambda x:x**2,number_list) #for list use to map(lambda) functionn\nprint(list(y))","24a08c86":"data.boxplot(column='Overall',by='Potential')\nplt.show()","dd9ac6fb":"data.melt=data.head()\nmelted=pd.melt(frame=data,id_vars='Name',value_vars=['Overall','Potential']) \n#id_vars is constant value\n#overrall and potential count is value\nmelted\n","962cdb7a":"data.info()","a5c77f2c":"#pivoting is restore of melt\nmelted.pivot(index = 'Name', columns = 'variable', values = 'value')","0435acd9":"#concatenating data\ndata1=data.head(5) #first 5\ndata2=data.tail(5) #last 5\n\nconc_data_row=pd.concat([data1,data2],axis=0,ignore_index=True)\n#axis ->virticule\n#ignore_index -> for new index\nconc_data_row","ec14611e":"data1=data['Overall'].head(10)\ndata2=data['Potential'].head(10)\nconc_data_col=pd.concat([data1,data2],axis=1)\n#axix=1 for horizontal","0eb553fc":"conc_data_col","a63339a7":"#value counts\ndata.dtypes","d6d4cc97":"#for convert object(str) to categorical and it to float\ndata['Overall']= data['Overall'].astype('category')\n","421ba6be":"data.info()","691e2c98":"data['Club'].value_counts(dropna=False)\n#dropna? false for to see the null value","6224c6fd":"data1 = data\ndata1['Club'].dropna(inplace = True)\ndata1","1d351f62":"assert data['Overall'].notnull().all() # returns nothing because we don't have nan values\n#if assert is true return nothing ","5e3f77da":"data['Club'].fillna('empty',inplace=True) #To fill in missing data","cbc3378e":"data['Club']","46d1ff84":"Dessert =[\"Tiramisu\",\"Cheescake\"]\nspecification=[\"Coffee\",\"Cheese\"]\nlist_label=[\"Dessert\",\"specification\"] #add dessert and spesicification\nlist_col=[Dessert,specification] #add column\n\nzipped=list(zip(list_label,list_col)) #do zip\ndata_dict=dict(zipped) #to make zip file dictionary\ndf=pd.DataFrame(data_dict) #to make dictionary DataFrame\ndf","ff3014d3":"#Add new column\ndf[\"price\"]=[\"11$\",\"10$\"]","6d9a38c7":"df[\"Time\"]=40   #same Time values","ee26e857":"df","18bdac52":"data.plot(kind=\"hist\",y=\"Overall\", bins = 50,range = (0,150), normed = True)\n#range for y axis\n    ","27029b10":"data.info()","5f813340":"\ndata.plot(kind= \"hist\",y=\"Overall\", bins = 50,range = (0,150),normed=True,cumulative=True)\n#cumuative is addand show\n","6bebd62d":"data2=data.head(2)\ntime_list=[\"1996.03.12\",\"1996.04.12\"]\ndatetime_object = pd.to_datetime(time_list)\ndata2[\"date\"]=datetime_object\ndata2=data.set_index(\"date\")\ndata2","fd27a7ea":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","194dd3ac":"import warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2 \n","8be3727c":"print(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","04f5a875":"data2.resample(\"A\").mean() #mean year","04460c4a":"data2.resample(\"M\").mean() #mean mounth","2b5fcc26":"data2.resample(\"M\").first().interpolate(\"linear\") #we can interpolete ","443d663f":"# Or we can interpolate with mean()\ndata2.resample(\"M\").mean().interpolate(\"linear\")","01c09573":"data.info()","026c1491":"data.columns","4eb63b0c":"data.head()","8ad9e829":"\ndata=pd.read_csv('..\/input\/data.csv')\ndata= data.set_index(\"Unnamed: 0\")\ndata.head()","a4ee081a":"data.Name[0] #0. index element","50bd4843":"data[\"Name\"][0] #other way","5a4de45c":"data.loc[0,[\"Name\"]] #The intersection of 0.index and Name Column","87d40a25":"data [[\"Name\",\"Age\"]] #show age and Name column","e15efc58":"print(type(data[\"Name\"])) #Series\nprint(type(data[[\"Name\"]])) #Data Frames","3e54aad4":"data.loc[1:4,\"Name\":\"Nationality\"] # between 1 and 4 index and values between age and name columns","c91eaf68":"data.loc[0:4,[\"Name\"]]","25395977":"data.loc[10:1: -1,\"Name\":\"Nationality\"]","2910f51a":"data.loc[1:10,\"Age\":] #between 1 and 10 index and between age and end of series","4799d9ea":"deger=data.Age>42\ndata[deger]","5f8d7bb1":"filter_first=data.Age>35\nfilter_second=data.Overall>65\ndata[filter_first & filter_second] #gives the intersection of two filters","25c760a2":"data.Age[data.Overall<50] #nested filters Overall<50","f102e8fd":"def div(n):\n    return n*2\n\ndata.Age.apply(div) #new age = age*2","6d838e11":"data.Age.apply(lambda k:k+10) #other function way","daedc76a":"data[\"Overall_Age\"]=data.Overall+data.Age\ndata.head()","e90fa1cc":"print(data.index.name)","ccc637af":"data.index.name = \"#\"\nprint(data.index.name) #change index_name","b7bd7f08":"data.index = range(10,90,1)","fbafd446":"data1 = data.set_index([\"Name\",\"Age\"]) ","2e9ec283":"data1.head()","2bf80951":"dic = {\"treatment\":[\"A\",\"B\",\"C\",\"D\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","ecd99268":"df.pivot(index=\"treatment\",columns=\"gender\",values=\"response\")","1f9eec50":"df1=df.set_index([\"treatment\",\"gender\"]) #two index\ndf1","08f7b8cc":"df1.unstack(level=0) #first index","0c39eea7":"df1.unstack(level=1) #second index","74af6c42":"df2=df1.swaplevel(0,1) #change  first and second index\ndf2","6117f50e":"pd.melt(df,id_vars='treatment',value_vars=[\"Age\",\"Response\"])","2fe161fb":"#Categorical and groupby\ndf.groupby(\"treatment\").mean() #treatment mean\n# # mean is aggregation \/ reduction method\n    ","5fafd721":"df.groupby(\"treatment\").age.max() #max age value for treatment","956b856f":"df.groupby(\"treatment\")[[\"age\",\"response\"]].min() ","40d27b61":"MISSING DATA and TESTING WITH ASSERT If we encounter with missing data, what we can do:\n\n- leave as is \n- drop them with dropna()\n- fill missing value with fillna()\n- fill missing values with test statistics like mean Assert statement : check that you can turn on or turn off when you are done with your testing of the program"}}