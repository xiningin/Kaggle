{"cell_type":{"9fef6013":"code","17ab29b7":"code","e2545521":"code","9a3837f0":"code","fc72c521":"code","2267efe7":"code","89df06d1":"code","4cbc872f":"code","0ee3c386":"code","a37144ba":"code","5403bc14":"code","a9a9cd49":"code","0e089428":"code","41e1c7cf":"code","f6798f46":"code","05455c72":"code","ef7cfdb4":"code","b1a6734a":"code","ff595591":"code","26601ba4":"code","66a1154c":"code","38ddb7d4":"code","74fd7486":"code","e1baba24":"code","072c50dc":"code","6e6dd2d4":"markdown","2cbe5887":"markdown","c135ef3f":"markdown","7325697b":"markdown","c18ea374":"markdown","e381e7a5":"markdown","6441db32":"markdown","329ce88f":"markdown","59a75a76":"markdown"},"source":{"9fef6013":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport skimage.io\nimport tensorflow\nimport glob\nimport tqdm\n\nfrom tqdm import tqdm\n\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.layers import InputLayer, Dense, BatchNormalization, Dropout, Flatten, Activation\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\n\n%matplotlib inline","17ab29b7":"train_normal = glob.glob('..\/input\/labeled-chest-xray-images\/chest_xray\/train\/NORMAL\/*.jpeg')\na = len(train_normal)\nprint(np.array(train_normal).shape)","e2545521":"train_pneumonia = glob.glob('..\/input\/labeled-chest-xray-images\/chest_xray\/train\/PNEUMONIA\/*.jpeg')\nb = len(train_pneumonia)\nprint(np.array(train_pneumonia).shape)","9a3837f0":"# Total training images\n\nprint(\"Total nos. of training images are: {}\".format(a + b))","fc72c521":"train_datagen = ImageDataGenerator(rescale = 1.0 \/ 255.0,\n                                   zoom_range = 0.4,\n                                   validation_split = 0.80)\n\n#valid_datagen = ImageDataGenerator(rescale = 1.0 \/ 255.0,\n#                                   validation_split = 0.9)\n\ntest_datagen  = ImageDataGenerator(rescale = 1.0 \/ 255.0)","2267efe7":"train_dataset = train_datagen.flow_from_directory(directory = '..\/input\/labeled-chest-xray-images\/chest_xray\/train',\n                                                  target_size = (224,224),\n                                                  class_mode = 'binary',\n                                                  subset = 'training',\n                                                  batch_size = 64)\n\n","89df06d1":"valid_dataset = train_datagen.flow_from_directory(directory = '..\/input\/labeled-chest-xray-images\/chest_xray\/train',\n                                                  target_size = (224,224),\n                                                  class_mode = 'binary',\n                                                  subset = 'validation',\n                                                  batch_size = 64)","4cbc872f":"# Checking Indices\n\ntrain_dataset.class_indices","0ee3c386":"print(type(train_dataset))\nprint(\"train_dataset: \",len(train_dataset))\nprint(\"valid_dataset: \",len(valid_dataset))\n","a37144ba":"# Viewing Images \n\nfig, ax = plt.subplots(nrows = 1, ncols = 5, figsize = (20,20))\n\nfor i in tqdm(range(0, 5)):\n    rand1 = np.random.randint(len(train_dataset))\n    rand2 = np.random.randint(12)\n    #rand2 = np.random.randint(64)\n    ax[i].imshow(train_dataset[rand1][0][rand2])\n    ax[i].axis('off')\n    label = train_dataset[rand1][1][rand2]\n    if label == 1:\n        ax[i].set_title('PNEUMONIA')\n    else:\n        ax[i].set_title('NORMAL')","5403bc14":"# Defining Model\n\n# Load the pre-trained model\nvgg16_weights_path = '..\/input\/vgg16\/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5'\nbase_model = VGG16(input_shape=(224,224,3), \n                   include_top=False,\n                   weights=vgg16_weights_path)\n                   #weights=\"imagenet\")\n\n","a9a9cd49":"# Freezing Layers \n\nfor layer in base_model.layers:\n    layer.trainable=False","0e089428":"# Summary\n\nbase_model.summary()","41e1c7cf":"# Defining Layers\n\nmodel=Sequential()\nmodel.add(base_model)\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(1024,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1024,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1,activation='sigmoid'))","f6798f46":"# Summary\n\nmodel.summary()","05455c72":"# Model Compile \n\nOPT    = tensorflow.keras.optimizers.Adam(lr=0.001)\n\nmodel.compile(loss='binary_crossentropy',\n              metrics='accuracy',\n              optimizer=OPT)\n#metrics=[tensorflow.keras.metrics.AUC(name = 'auc')],","ef7cfdb4":"# Defining Callbacks\n\nfilepath = '.\/best_weights.hdf5'\n\nearlystopping = EarlyStopping(monitor = 'val_accuracy', \n                              mode = 'max' , \n                              patience = 6,\n                              verbose = 1)\n\ncheckpoint    = ModelCheckpoint(filepath, \n                                monitor = 'val_accuracy', \n                                mode='max', \n                                save_best_only=True, \n                                verbose = 1)\n\n\ncallback_list = [earlystopping, checkpoint]","b1a6734a":"# Model Fitting \n\nmodel_history=model.fit(train_dataset,\n                        validation_data=valid_dataset,\n                        epochs = 10,\n                        verbose = 1)\n#callbacks = callback_list,","ff595591":"# Summarize the model loss\n\nplt.plot(model_history.history['loss'])\nplt.plot(model_history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left', bbox_to_anchor=(1,1))\nplt.show()","26601ba4":"# Summarize models auc\n\nplt.plot(model_history.history['accuracy'])\nplt.plot(model_history.history['val_accuracy'])\nplt.title('Model AUC')\nplt.ylabel('AUC')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left', bbox_to_anchor=(1,1))\nplt.show()","66a1154c":"# Test Data \n\ntest_dataset = test_datagen.flow_from_directory(directory = '..\/input\/labeled-chest-xray-images\/chest_xray\/test',\n                                                target_size = (224,224),\n                                                class_mode = 'binary',\n                                                batch_size = 64,\n                                                shuffle = False)","38ddb7d4":"# Evaluating Loss and AUC - Test Data \nprint(\"Test dataset:\")\nmodel.evaluate(test_dataset)\nprint(\"Validation dataset:\")\nmodel.evaluate(valid_dataset)\nprint(\"Training dataset:\")\nmodel.evaluate(train_dataset)\n'''\nprint(\"Rest of training dataset, not used for training:\")\nmodel.evaluate(train_datagen.flow_from_directory(directory = '..\/input\/labeled-chest-xray-images\/chest_xray\/train',\n                                                  target_size = (224,224),\n                                                  class_mode = 'binary',\n                                                  subset = 'validation',\n                                                  batch_size = 64))\n'''","74fd7486":"#some statistics\n\ny_true = test_dataset.classes\ny_prob = model.predict_proba(test_dataset)\n#print(y_pred.reshape(len(y_pred),))\n\n\nfrom sklearn.metrics import confusion_matrix\n#print(confusion_matrix(y_true, y_pred))\n\nN=100\ncut = np.linspace(0., 1., N)\nTPR = np.zeros(N)\nTNR = np.zeros(N)\nACC = np.zeros(N)\n\nfor i in range(len(cut)):\n    y_pred = np.round(y_prob-cut[i]+0.5)\n    CM = confusion_matrix(y_true, y_pred)\n\n    TN = CM[0][0]\n    FN = CM[1][0]\n    TP = CM[1][1]\n    FP = CM[0][1]\n\n    TPR[i] = TP\/(TP+FN)\n    TNR[i] = TN\/(TN+FP)\n    ACC[i] = (TP+TN)\/(TP+FP+FN+TN)\n    #print(\"Sensitivity = \",TP\/(TP+FN))\n    #print(\"Specificity = \",TN\/(TN+FP))\n    #print(\"Overall accuracy = \",ACC = (TP+TN)\/(TP+FP+FN+TN))\n\nplt.figure(figsize=(8,8))  \nplt.plot(cut,TPR,c='red',label=\"Sensitivity\")\nplt.plot(cut,TNR,c='blue',label=\"Specificity\")\nplt.plot(cut,ACC,c='green',label=\"Accuracy\")\nplt.legend()\nplt.grid(True)\nplt.ylim(0.8, 1)\nplt.xlabel(\"Probability cut\")\nplt.show()    \n\n#from sklearn.metrics import classification_report\n#print(classification_report(y_true, y_pred))\n\n","e1baba24":"# Test Case 1: NORMAL\n\ndic = test_dataset.class_indices\nidc = {k:v for v, k in dic.items()}\n\nimg = load_img('..\/input\/labeled-chest-xray-images\/chest_xray\/test\/NORMAL\/NORMAL-1212407-0001.jpeg', target_size=(224,224))\nimg = img_to_array(img)\nimg = img\/255\nimshow(img)\nplt.axis('off')\nimg = np.expand_dims(img,axis=0)\nanswer = model.predict_proba(img)\n\nif answer[0][0] > 0.5:\n    print(\"The X-Ray belongs to PNEUMONIA person\")\nelse:\n    print(\"The X-RAY belongs to NORMAL person\")","072c50dc":"# Test Case 2: PNEUMONIA\n\ndic = test_dataset.class_indices\nidc = {k:v for v, k in dic.items()}\n\nimg = load_img('..\/input\/labeled-chest-xray-images\/chest_xray\/test\/PNEUMONIA\/BACTERIA-1220485-0001.jpeg', target_size=(224,224))\nimg = img_to_array(img)\nimg = img\/255\nimshow(img)\nplt.axis('off')\nimg = np.expand_dims(img,axis=0)\nanswer = model.predict_proba(img)\n\nif answer[0][0] > 0.5:\n    print(\"The X-Ray belongs to PNEUMONIA person\")\nelse:\n    print(\"The X-RAY belongs to NORMAL person\")","6e6dd2d4":"> `TRAINING IMAGES`","2cbe5887":"> `1. We where able to successfully classify the images with 99.4% accuracy on training dataset.`\n\n> `2. We acheived 99.52% accuracy on validation data and 98.3% accuracy on test dataset.`","c135ef3f":"### MODEL BUILDING","7325697b":"### IMPORTING LIBRARIES\n\nNotebook based on https:\/\/www.kaggle.com\/gauravrajpal\/pneumonia-detection-vgg16-99-52","c18ea374":"> `DATA AUGMENTATION`","e381e7a5":"# **Calculate sensitivity and specificity**","6441db32":"### MODEL EVALUATION","329ce88f":"### IMPORTING \/ VIEWING \/ PREPROCESSING DATASET \n","59a75a76":"### CONCLUSION\n"}}