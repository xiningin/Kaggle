{"cell_type":{"3613bd4f":"code","d8b2b342":"code","69a32d72":"code","c869b4b5":"code","dd8ba3e9":"code","e1ade232":"code","b2693eda":"code","dcbd88a5":"code","c258319e":"code","431891c7":"code","e134835d":"code","6472a068":"code","ddb013b3":"code","9cf870b5":"code","016473be":"code","296cf8a3":"code","45bf5773":"code","6d61902c":"code","304f9980":"code","30fedcb1":"code","e7897b33":"code","0e07c0f2":"code","e4a33bb2":"code","7203f1df":"code","9c85d830":"code","c7529f11":"code","7e014c38":"code","79138071":"code","770c57d7":"code","0b747d29":"code","fcd11086":"code","9fc6dfe4":"code","4ac5437b":"code","b7d36d1e":"code","33bec01a":"markdown","8fbbdd2e":"markdown","bcc09c5d":"markdown","f0994a55":"markdown","7c8898f3":"markdown","85f8c192":"markdown","2dc4e1fd":"markdown","ee41e164":"markdown","319b5c8f":"markdown","f0de74b7":"markdown","e6463660":"markdown","82145aaa":"markdown","3a1018fe":"markdown","2b427913":"markdown","817390f4":"markdown","b7526cc2":"markdown","db579369":"markdown","39edffa5":"markdown","a8ee5e98":"markdown","2ea15088":"markdown","c7a06497":"markdown","00fea867":"markdown"},"source":{"3613bd4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d8b2b342":"# read data\ndf = pd.read_csv('..\/input\/515k-hotel-reviews-data-in-europe\/Hotel_Reviews.csv')\ndf","69a32d72":"df.iloc[0].Hotel_Address","c869b4b5":"city = df.iloc[0].Hotel_Address.split()[-2]\ncountry = df.iloc[0].Hotel_Address.split()[-1]\ncity, country","dd8ba3e9":"city = df.iloc[1].Hotel_Address.split()[-2]\ncountry = df.iloc[1].Hotel_Address.split()[-1]\ncity, country","e1ade232":"city = df.iloc[1034].Hotel_Address.split()[-2]\ncountry = df.iloc[1034].Hotel_Address.split()[-1]\ncity, country","b2693eda":"city = df.iloc[134].Hotel_Address.split()[-2]\ncountry = df.iloc[134].Hotel_Address.split()[-1]\ncity, country","dcbd88a5":"df.columns","c258319e":"df.dtypes","431891c7":"df.Reviewer_Score.value_counts()","e134835d":"df['neg_flag'] = df.Review_Total_Negative_Word_Counts <= df.Review_Total_Positive_Word_Counts","6472a068":"df","ddb013b3":"import seaborn as sns\nsns.scatterplot(x=df.lat, y=df.lng, hue=df['neg_flag'])","9cf870b5":"cmap = sns.cubehelix_palette(dark=.3, light=.8, as_cmap=True)\nsns.scatterplot(x=df.lat, y=df.lng, size=df['neg_flag'],\n                sizes=(20, 200), palette=cmap)","016473be":"df.shape","296cf8a3":"df.lat.value_counts()","45bf5773":"# visualization library\nimport seaborn as sns\n#  pair plot\nsns.pairplot(df)","6d61902c":"sns.regplot(x=df['lat'], y=df['Reviewer_Score'])","304f9980":"sns.regplot(x=df['lng'], y=df['Reviewer_Score'])","30fedcb1":"# Reviewe_Score counts\nsns.distplot(df[\"Reviewer_Score\"],kde=False,bins=15)","e7897b33":"df.shape","0e07c0f2":"df['Reviewer_Score'].min() , df['Reviewer_Score'].max(), df['Reviewer_Score'].mean()","e4a33bb2":"countries = df[\"Reviewer_Nationality\"].value_counts()[df[\"Reviewer_Nationality\"].value_counts() > 100]\ng = df.groupby(\"Reviewer_Nationality\").mean()\ng.loc[countries.index.tolist()][\"Reviewer_Score\"].sort_values(ascending=False)[:10].plot(kind=\"bar\",ylim=(8.395076569886239,9),title=\"Top Reviewing Countries\")","7203f1df":"g.loc[countries.index.tolist()][\"Reviewer_Score\"].sort_values()[:10].plot(kind=\"bar\",ylim=(2.5,8.395076569886239),title=\"least Reviewing Countries\")","9c85d830":"def country_ident(st):\n    last = st.split()[-1]\n    if last == \"Kingdom\": return \"United Kingdom\"\n    else: return last\n    \ndf[\"Hotel_Country\"] = df[\"Hotel_Address\"].apply(country_ident)\ndf.groupby(\"Hotel_Country\").mean()[\"Reviewer_Score\"].sort_values(ascending=False)","c7529f11":"sns.swarmplot(x=df.Hotel_Country, y=df.Reviewer_Score)","7e014c38":"best_hotels = df.groupby('Hotel_Name')['Reviewer_Score'].mean().sort_values(ascending=False).head(10)\nbest_hotels.plot(kind=\"bar\",color = \"Green\")","79138071":"from datetime import datetime\ndf[\"Review_Date_Month\"] = df[\"Review_Date\"].apply(lambda x: x[5:7])\ndf[[\"Review_Date\",\"Reviewer_Score\"]].groupby(\"Review_Date\").mean().plot(figsize=(15,5))","770c57d7":"from wordcloud import WordCloud\nimport matplotlib.pyplot as plt\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color = 'white',\n        max_words = 200,\n        max_font_size = 40, \n        scale = 3,\n        random_state = 42\n    ).generate(str(data))\n\n    fig = plt.figure(1, figsize = (20, 20))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize = 20)\n        fig.subplots_adjust(top = 2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()\n    \n# print wordcloud\nshow_wordcloud(df['Positive_Review'])","0b747d29":"# most positive\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(analyzer = \"word\",stop_words = 'english',max_features = 20,ngram_range=(2,2))\nmost_positive_words = cv.fit_transform(df['Positive_Review'])\ntemp1_counts = most_positive_words.sum(axis=0)\ntemp1_words = cv.vocabulary_\ntemp1_words","fcd11086":"show_wordcloud(df['Negative_Review'])","9fc6dfe4":"cv = CountVectorizer(analyzer = \"word\",stop_words = 'english',max_features = 20,ngram_range=(2,2))\nmost_negative_words = cv.fit_transform(df['Negative_Review'])\ntemp1_counts = most_negative_words.sum(axis=0)\ntemp1_words = cv.vocabulary_\ntemp1_words","4ac5437b":"# extrating nights from tag\ndef splitString(string):\n    array = string.split(\" ', ' \")\n    array[0] = array[0][3:]\n    array[-1] = array[-1][:-3]\n    if not 'trip' in array[0]:\n        array.insert(0,None)\n    try:\n        return float(array[3].split()[1])\n    except:\n        return None\n\ndf[\"Nights\"] = df[\"Tags\"].apply(splitString)\nsns.jointplot(data=df,y=\"Reviewer_Score\",x=\"Nights\",kind=\"reg\")","b7d36d1e":"df['Leisure'] = df['Tags'].map(lambda x: 1 if ' Leisure trip ' in x else 0)\ndf['Business'] = df['Tags'].map(lambda x: 2 if ' Business trip ' in x else 0)\ndf['Trip_type'] = df['Leisure'] + df['Business']","33bec01a":"# Word Cloud","8fbbdd2e":"Least_Reviewers Nationality","bcc09c5d":"There is no specific pattern, means there are other different features that affect the Reviewers_Score","f0994a55":"# Review Date (searching about a trend, pattern,...)","7c8898f3":"....  will checked in building model\nconclusion\nx = Reviewer_Score\ny = positive and negative reviews word vector or\/and some features from tag","85f8c192":">*Top_Reviewers Nationality","2dc4e1fd":"Best Hotels","ee41e164":"The more the reviewer stay at hotel the lower the score is (but also slightly)","319b5c8f":"# Highest and Lowest Scoring Countries","f0de74b7":"The question now is:   It seems that most of the least reveiews basicully from \"Middle East\"","e6463660":"# **General overview of not-important attributes**","82145aaa":" **Output description:  Most of the pairplot has linear (vertical or horizental) swarmp, means that many of the attributes do not affect the Reviewers_Score**.     Check Later...","3a1018fe":"Vast majority of the Reviewer_Score (33%) and the others are also considered high, which is an obvius indicator that most of Reviews are pretty positive.\nI will check the positivity\/negativity in the end of the notebook (text-cleaning, NLP)","2b427913":"Conclusion: until now, the only features affect the scores are the hotels themesleves (positive review) due to many aspects such as location,....\n\nNeed to extract all the hotel_positive_modes and then find the weight\n\nAlso, there are other suggestions that are related to the reviewers:\n\nExtracting data 'from Tags' such as (trip type, social status, room, stayed nights)\nNoticing the reviewers' nationalities: The less satisifed ones are somehow come from Asia, specifically Westren Union countris; which needs modeling if it is not by chance","817390f4":"Output description: The line is slightly changes (inversely), means there is no coefficient between the lables.","b7526cc2":"# Extracting from Tags, and positive\/negative most words","db579369":"based on Region","39edffa5":"The mean are slightly different. which draw the same conclusion that is until now there is no a descrimantal attribute (Hotel-coutry and the previous checked ones)","a8ee5e98":"# Best Hotels","2ea15088":"Output description: The line is slightly changes (positively), means there is no coefficient between the lables.","c7a06497":"# Reviewer_Score based on nationality","00fea867":"Extracting Trip_type"}}