{"cell_type":{"e84142da":"code","5e2d0666":"code","1557e373":"code","14edf06b":"code","4ffa61cb":"code","1e63b6c1":"code","f8b094cc":"code","1f0aef74":"code","7c6d286f":"code","be0a33d1":"code","1e145103":"code","aba2f03a":"code","d4f73724":"code","81793ea0":"code","f91efa80":"code","95e1268c":"code","cf7c6b1a":"code","a5597584":"code","24629eab":"markdown","d72b2cc9":"markdown","e0cde123":"markdown","03709d23":"markdown","f60b024e":"markdown","f1b11268":"markdown","de3d0d77":"markdown","c3ea0a1d":"markdown","cf12e586":"markdown","687ee30c":"markdown","edc7b2da":"markdown","ff3d86e8":"markdown","090dfda3":"markdown","6f8b0be9":"markdown","7cffba67":"markdown","20f6b1e4":"markdown","4bf546c7":"markdown","6cd96fc1":"markdown","37345e2f":"markdown","eeacab31":"markdown","3c52439b":"markdown","976c9216":"markdown"},"source":{"e84142da":"import pandas as pd\nimport numpy as np\n\ndata = pd.read_csv('..\/input\/star-dataset\/6 class csv.csv')\ndata","5e2d0666":"data['Star type'].replace([0,1,2,3,4,5],['Red Dwarf','White Dwarf','Brown Dwarf','Main Sequence','Supergiants','Hypergiants'],inplace=True)\n\ndata['Star color'].replace(['Blue White','Blue white','Blue-white','Blue white '],['Blue-White','Blue-White','Blue-White','Blue-White'],inplace=True)\ndata['Star color'].replace(['Yellowish White'],['Yellowish-White'],inplace=True)\ndata['Star color'].replace(['Pale yellow orange'],['Pale-Yellow-Orange'],inplace=True)\ndata['Star color'].replace(['yellow-white'],['Yellow-White'],inplace=True)\ndata['Star color'].replace(['white'],['White'],inplace=True)\ndata['Star color'].replace(['yellowish'],['Yellowish'],inplace=True)\ndata['Star color'].replace(['Blue '],['Blue'],inplace=True)","1557e373":"data['Star color'].unique()","14edf06b":"data['Star type'].replace([0,1,2,3,4,5],['Red Dwarf','White Dwarf','Brown Dwarf','Main Sequence','Supergiants','Hypergiants'],inplace=True)\ndata","4ffa61cb":"data.groupby(['Star type']).nunique()","1e63b6c1":"# Select a target\n\ny = data['Star type']","f8b094cc":"star_color = data['Star color']\nspectral_class = data['Spectral Class']\n\nstar_color = pd.get_dummies(star_color)\nspectral_class = pd.get_dummies(spectral_class)\n\ndata_drop = data.drop(['Star type', 'Star color', 'Spectral Class'], axis=1)\n\nX = pd.concat((data_drop, star_color,spectral_class), axis=1)\n\nX","1f0aef74":"import sklearn\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 11)","7c6d286f":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\n\ntree_params = {'max_depth': range(1,10),'max_features': range(1,24)}\ndtc = DecisionTreeClassifier(criterion='entropy', random_state=11)\ntree_grid = GridSearchCV(dtc, tree_params, cv=5, n_jobs=-1, verbose=True)\ntree_grid.fit(X_train, y_train)\nprint('Best cross-validation parameters:',tree_grid.best_params_)","be0a33d1":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier(criterion='entropy', max_depth=3, max_features = 19, random_state=11)\ndtc.fit(X_train, y_train)\n\n#  record predictions on the test set\ny_test_predict = dtc.predict(X_test)","1e145103":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\nprint('(1) TREE DECISION - all features')\nprint()\n\n# Print Confusion matrix:\nprint('Confusion matrix:')\ncmatrix = confusion_matrix(y_test, y_test_predict)\nprint(cmatrix)\nprint()\n\n# Print classification_report:\nprint('Classification_report:')\nprint(classification_report(y_test, y_test_predict))","aba2f03a":"from sklearn.tree import export_graphviz\nexport_graphviz(dtc, feature_names=(X_train.columns), out_file='dtc_all_features.dot', filled=True)\n\nimport graphviz\nwith open(\".\/dtc_all_features.dot\") as f:\n    dot_graph = f.read()\n\n# remove the display(...)\\\n\ngraphviz.Source(dot_graph)","d4f73724":"X = data.drop(['Star type', 'Radius(R\/Ro)', 'Star color', 'Temperature (K)', 'Spectral Class','Luminosity(L\/Lo)'], axis=1)\n\nspectral_class = data['Spectral Class']\nspectral_class = pd.get_dummies(spectral_class)\n\nX = pd.concat((X, spectral_class), axis=1)\nX","81793ea0":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 10)","f91efa80":"tree_params = {'max_depth': range(1,10),'max_features': range(1,9)}\ndtc = DecisionTreeClassifier(criterion='entropy', random_state=10)\ntree_grid = GridSearchCV(dtc, tree_params, cv=5, n_jobs=-1, verbose=True)\ntree_grid.fit(X_train, y_train)\nprint('Best cross-validation parameters:',tree_grid.best_params_)","95e1268c":"dtc = DecisionTreeClassifier(criterion='entropy', max_depth=3, max_features = 7, random_state=10)\ndtc.fit(X_train, y_train) \n\n#  record predictions on the test set\ny_test_predict = dtc.predict(X_test)\n\nprint('TREE DECISION')\nprint()\n\n# Print Confusion matrix:\nprint('Confusion matrix:')\ncmatrix = confusion_matrix(y_test, y_test_predict)\nprint(cmatrix)\nprint()\n\n# Print classification_report:\nprint('Classification_report:')\nprint(classification_report(y_test, y_test_predict))","cf7c6b1a":"from sklearn.tree import export_graphviz\n\nexport_graphviz(dtc, feature_names=(X_train.columns), out_file='dtc_2features.dot', filled=True)","a5597584":"import graphviz\n\nwith open(\".\/dtc_2features.dot\") as f:\n    dot_graph = f.read()\n\n# remove the display(...)\n\ngraphviz.Source(dot_graph)","24629eab":"Firstly find the best hyperparameters using GridSearchCV ","d72b2cc9":"Select a 2 features: one numerical Absolute magnitude(Mv) and one categorical Spectral Class","e0cde123":"Star color values are duplicated in various ways. Let's bring everything to uniformity using pandas:","03709d23":"# STAR DATASET (2) ML","f60b024e":"Based on the validation results, set the tree parameters:\n* Max depth = 3\n* Max features = 19","f1b11268":"Firstly prepare our dataset for ML","de3d0d77":"The first notebook on this topic can be found at the link [STAR DATASET (1) Analysis](https:\/\/www.kaggle.com\/arthurchebotkov\/star-dataset-1-analysis).\n\n**Key findings:**\n\n1) Dataset includes:\n* **Star type** (target) - (Red Dwarf, Brown Dwarf, White Dwarf, Main Sequence , SuperGiants, HyperGiants)\n* Absolute Temperature (in K)\n* Relative Luminosity (L\/Lo)\n* Relative Radius (R\/Ro)\n* Absolute Magnitude (Mv)\n* Star Color (white,Red,Blue,Yellow,yellow-orange etc)\n* Spectral Class (O,B,A,F,G,K,,M)\n\n2) Categorial variables: Star Type, Star Color, Spectral Class: \n* Spectral Class and Star color are correlated **with target** and could be included for training in our model. \n* Spectral Class and Star color are correlated with each other, therefore we will need to exclude some of them from the learning model. \n\n3) Categorial and numerical variables:\n* **Star type** (target): All numerical features are correlated with **target**\n* Spectral Class: All numerical features are correlated with Spectral Class\n* Star color: All numerical features are correlated with Star color\n\n4) Numerical variables:  \nNumerical features are moderately correlated, but not highly correlated. \u0410nd now, let's hold all the features for the learning models.","c3ea0a1d":"## Data preparation","cf12e586":"Our target Star type is a nominal variable (contains values that have no intrinsic ordering).\nLet's restore the original name so that there is no ordering illusion.","687ee30c":"See that model uses only **Absolute magnitude** feature and belonging to the **Spectral Class M**.  \n  \nAlso precision model works with **100% precision, recall, f1-score and accuracy** with other sets of feature: \n* Absolute magnitude and Radius\n* Absolute magnitude and Star color\n* Absolute magnitude and Luminosity","edc7b2da":"#### Only 2 features for prediction","ff3d86e8":"Next split the data into two sets: train and test sets","090dfda3":"Let's check distribution of target classes.\nSee that target classes are balanced:","6f8b0be9":" Look at the main metrics of the results of the learing model:","7cffba67":"Next let's draw the graph","20f6b1e4":"See that model uses only 3 features: Absolute magnitude, Luminosity and Red.  \nNow using information from presiosly analysis [STAR DATASET (1) Analysis](https:\/\/www.kaggle.com\/arthurchebotkov\/star-dataset-1-analysis) try to build another model using only 2 features. Key findings:  \n(1) Absolute magnitude are correlated with target (F-score 1496.53)  \n(2) Radius are correlated with target (F-score 1113.91)  \n(3) Absolute magnitude and Radius correlation with each other (Pearson coefficient = -0,61, it is less then correliation between Absolute magnitude and Luminosity)  \n(4) Spectral Class (p-value: 6.36e-52) and Star color (p-value: 4.35e-46) are correlated with target but also Spectral Class and Star color are correlated with each other (p-value: 1.94e-123)","4bf546c7":"Precision model works with **100% precision, recall, f1-score and accuracy**","6cd96fc1":"### DECISION TREE","37345e2f":"## ML","eeacab31":"### Select a target and features\n\nNext select a target and features in new pandas.","3c52439b":"Categorial features must be converted to quantitative data in order to be able to ML. Using dummy coding for this.","976c9216":"#### --- NEXT WILL APPLY OTHER MACHINE LEARNING MODELS ---"}}