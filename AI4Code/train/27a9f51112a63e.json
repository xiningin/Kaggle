{"cell_type":{"491f49c0":"code","b4cf1ba9":"code","05804856":"code","68c430a5":"code","2208ae8b":"code","e1da159b":"code","8eb18c78":"code","de979f92":"code","d3e64ad6":"code","0556c193":"code","8d7bf9d8":"code","87a57a3c":"code","9e639d20":"code","53453498":"code","5ecfffbe":"code","4a477324":"code","012c738c":"code","a96e5590":"code","77d7c69a":"code","006b84b1":"code","6901788f":"code","1b65a1c3":"code","497a3520":"code","c62ef210":"code","7bb589de":"code","320a3262":"code","cf5efe30":"code","c2d7d21b":"code","5d203ffa":"code","df906db5":"code","3d6add6e":"code","631811ef":"code","c173901c":"code","59cbba2e":"code","d4822e3d":"code","9e9a631d":"code","b75fad9c":"code","a74275f3":"code","1a148386":"code","f1634ca5":"code","0afd0ffd":"code","7e307a38":"code","3c79e18d":"code","63cf29e8":"code","e74fdbde":"code","cad60814":"code","e3021928":"code","788fb7c7":"code","231ba544":"code","999d168f":"code","e44c003a":"code","449ce48c":"code","36c1e22e":"code","6134bf64":"code","afbbf00c":"code","7a9a7462":"code","07f9c296":"code","5d37e739":"code","5e7cbb53":"code","ad45ce41":"code","930ad8bf":"code","7a4ff2eb":"code","116115c9":"code","d76293b1":"code","9b0269bf":"code","c2c0ea34":"code","bd5be295":"code","2139ab41":"code","07e515bf":"code","74cc1617":"code","b8acd4ed":"code","ab0b1015":"code","594fabd8":"code","c8bb2958":"code","6b4dff0f":"code","612cbc17":"code","763e0702":"code","4d358874":"code","5bb7e4fc":"code","eb498f8f":"code","1e9dd777":"code","e1329c79":"code","87ee77cb":"code","4c257f70":"code","12280dd3":"code","e0cf508a":"code","e3cee1d5":"code","80ea21ca":"code","92908b8c":"code","9b99ec68":"code","324aece0":"code","3d6389e3":"code","c5fd88a2":"code","e284d6c6":"code","a139e266":"code","06a303fb":"code","b2e9a3d4":"code","a2bb57b9":"code","68bd7b53":"code","def79c33":"code","61dc15d6":"code","eb3219bc":"code","4aae0976":"code","5e1734dd":"code","a04db4c6":"code","c423412c":"code","5caada7f":"markdown","31cf8e7b":"markdown","c3f4d4df":"markdown","c6d4bd77":"markdown","ce1b19ca":"markdown","b433a901":"markdown","ef5dc0a5":"markdown","3c6186c7":"markdown","f709530c":"markdown","0d1cdf08":"markdown","533f6fd8":"markdown","2c2d2cd3":"markdown","3ac61407":"markdown","2829031a":"markdown","32e7ed4f":"markdown","12aaeaf8":"markdown","cdff2344":"markdown","27776c17":"markdown","4bfafbae":"markdown","922b1c60":"markdown","0a85774f":"markdown","a12a22fa":"markdown","88da1db6":"markdown","43198366":"markdown","c11bd96e":"markdown","ebc0e304":"markdown","69571bea":"markdown","c7f10b8f":"markdown","380d28f2":"markdown","6e7be17f":"markdown","17374159":"markdown","d3ab50ce":"markdown","dcb8ea51":"markdown","d466c321":"markdown","c1a2ba37":"markdown","8dd2593f":"markdown","a315b5ce":"markdown","c7bc6e6d":"markdown","12dd0a35":"markdown","d976e719":"markdown","4b0fdd9e":"markdown","842fa5aa":"markdown","26df06db":"markdown","7df93047":"markdown","2d89ca66":"markdown","57306113":"markdown","9b062dd0":"markdown"},"source":{"491f49c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4cf1ba9":"import numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.metrics import r2_score as r2, mean_squared_error as mse\nfrom sklearn.model_selection import KFold, GridSearchCV\n\nfrom datetime import datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","05804856":"matplotlib.rcParams.update({'font.size': 14})","68c430a5":"TRAIN_DATASET_PATH = '\/kaggle\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '\/kaggle\/input\/real-estate-price-prediction-moscow\/test.csv'","2208ae8b":"train_df = pd.read_csv(TRAIN_DATASET_PATH, sep=',')\ntrain_df.name = 'Train data frame'\ntrain_df.head()","e1da159b":"train_df.dtypes","8eb18c78":"test_df = pd.read_csv(TEST_DATASET_PATH, sep=',')\ntest_df.name = 'Test data frame'\ntest_df.head()","de979f92":"test_df.dtypes","d3e64ad6":"def memory_compression(df):\n    original_mem = df.memory_usage().sum() \/ 1024**2\n    \n    for col in df.columns:\n        \n        if df[col].dtype != object:\n            col_min = df[col].min()\n            col_max = df[col].max()\n\n            if str(df[col].dtype)[:3] == 'int':\n                if col_min > np.iinfo(np.int8).min and col_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif col_min > np.iinfo(np.int16).min and col_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif col_min > np.iinfo(np.int32).min and col_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif col_min > np.iinfo(np.int64).min and col_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            elif str(df[col].dtype)[:5] == 'float':\n                if col_min > np.finfo(np.float32).min and col_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n            \n    reduced_mem = df.memory_usage().sum() \/ 1024**2\n    \n    print(f'\u0418\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 {df.name} \u0440\u0430\u0432\u0435\u043d {round(original_mem,2)} \u043c\u0431.')\n    print(f'\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 {df.name} \u0440\u0430\u0432\u0435\u043d {round(reduced_mem,2)} \u043c\u0431.')","0556c193":"memory_compression(train_df)\nmemory_compression(test_df)","8d7bf9d8":"print('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0440\u0435\u043d\u0435\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430 \u0441\u0435\u0442\u0435:', train_df.shape[0])\nprint('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0432\u043c \u0434\u0430\u0442\u0430 \u0441\u0435\u0442\u0435', test_df.shape[0])","87a57a3c":"train_df.shape[1] - 1 == test_df.shape[1]","9e639d20":"train_df.dtypes","53453498":"# \u0422\u0430\u043a \u043a\u0430\u043a Id \u044d\u0442\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439, \u0442\u043e \u0441\u043c\u0435\u043d\u0438\u043c \u0434\u043b\u044f \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 str\ntrain_df['Id'] = train_df['Id'].astype(str)\ntrain_df['DistrictId'] = train_df['DistrictId'].astype(str)","5ecfffbe":"plt.figure(figsize = (16, 8))\n\ntrain_df['Price'].hist(bins=30)\nplt.ylabel('Count')\nplt.xlabel('Price')\n\nplt.title('Target distribution')\nplt.show()","4a477324":"train_df.describe()","012c738c":"train_df.info()","a96e5590":"train_df.select_dtypes(include=['category', 'object']).columns.tolist()","77d7c69a":"train_df['DistrictId'].value_counts()","006b84b1":"train_df['Ecology_2'].value_counts()","6901788f":"train_df['Ecology_3'].value_counts()","1b65a1c3":"train_df['Shops_2'].value_counts()","497a3520":"train_df.isna().sum()","c62ef210":"train_df[['Square', 'LifeSquare', 'KitchenSquare']].head(10)","7bb589de":"train_df['LifeSquare_nan'] = train_df['LifeSquare'].isna() * 1\n\nlife_square_na = (train_df['LifeSquare'].isna()) \\\n                 & (~train_df['Square'].isna()) \\\n                 & (~train_df['KitchenSquare'].isna())","320a3262":"plt.figure(figsize = (16, 8))\n\nplt.scatter(train_df[~life_square_na]['Square'], train_df[~life_square_na]['LifeSquare'])\nplt.ylabel('Square')\nplt.xlabel('Life Square')\n\nplt.title('Square \/ LifeSquare square')\n\nplt.show()","cf5efe30":"train_df[~life_square_na]['Square']","c2d7d21b":"median_square_per_life_square = ((train_df[~life_square_na]['Square'] - train_df[~life_square_na]['KitchenSquare']) \\\n                                 \/ train_df[~life_square_na]['LifeSquare']).median()\n        \ntrain_df.loc[life_square_na, 'LifeSquare'] = (train_df.loc[life_square_na, 'Square'] \\\n                                            - train_df.loc[life_square_na, 'KitchenSquare']) \/ median_square_per_life_square","5d203ffa":"train_df.isna().sum()","df906db5":"train_df.describe()","3d6add6e":"def evaluate_preds(true_values, pred_values, max_x = 700000, max_y = 700000, save=False):\n    \"\"\"\u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0433\u0440\u0430\u0444\u0438\u043a preds vs true\"\"\"\n    \n    print(\"R2:\\t\" + str(round(r2(true_values, pred_values), 3)) + \"\\n\" +\n          \"RMSE:\\t\" + str(round(np.sqrt(mse(true_values, pred_values)), 3)) + \"\\n\" +\n          \"MSE:\\t\" + str(round(mse(true_values, pred_values), 3))\n         )\n    \n    plt.figure(figsize=(8,8))\n    \n    sns.scatterplot(x=pred_values, y=true_values)\n    plt.plot([0, max_x], [0, max_y], linestyle='--', color='black')\n    \n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('True vs Predicted values')\n    \n\n    plt.show()","631811ef":"# \u0414\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u0435, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Healthcare_1 \u0438 \u043d\u0430 \u0442\u0435\u0445\n# \u0443 \u043a\u043e\u0433\u043e \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e\ntrain_hc = train_df.loc[~train_df['Healthcare_1'].isna()]\ntest_hc = train_df.loc[train_df['Healthcare_1'].isna()]\n\n# \u0412\u043e \u0438\u0437\u0431\u0435\u0436\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u0441\u0431\u0440\u043e\u0441\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0432 train_hc\ntrain_hc = train_hc.reset_index()\ndel train_hc['index']\n\n# \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nhc_features = train_hc.select_dtypes(include=['int8', 'int16', 'int64', 'float64', 'float32']).\\\ncolumns.to_list()\nhc_features_to_train = hc_features.copy()\n\n# \u0423\u0434\u0430\u043b\u0438\u043c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\nhc_features_to_train.remove('Healthcare_1')\nhc_features_to_train.remove('Price')\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c\nX = train_hc[hc_features_to_train]\ny = train_hc['Healthcare_1']\n\n# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u043c\nX_train_hc, X_test_hc, y_train_hc, y_test_hc = train_test_split(X, y, test_size=0.33, random_state=42)\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0438 \u043e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c\ngb_hc_model = GradientBoostingRegressor(criterion='mse', max_depth=7, min_samples_leaf=10, random_state=42,\\\n                                        n_estimators=100)\ngb_hc_model.fit(X_train_hc, y_train_hc)","c173901c":"# \u041e\u0446\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u043e\u0447\u043d\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u043b\u0430\u0441\u044c\ny_train_hc_gb_pred = gb_hc_model.predict(X_train_hc)\nevaluate_preds(y_train_hc, y_train_hc_gb_pred, max_x=5000, max_y=5000)","59cbba2e":"# \u041e\u0446\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u043e\u0447\u043d\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ny_test_hc_gb_preds = gb_hc_model.predict(X_test_hc)\nevaluate_preds(y_test_hc, y_test_hc_gb_preds, max_x=5000, max_y=5000)","d4822e3d":"feature_importances = pd.DataFrame(zip(hc_features, gb_hc_model.feature_importances_),\\\n                                   columns=('Features', 'Importances'))\nfeature_importances.sort_values(by='Importances', ascending=False).head(10)","9e9a631d":"plt.figure(figsize = (15,10))\n\nsns.set(font_scale=0.7)\n\ncorr_matrix = train_df.corr()\ncorr_matrix = np.round(corr_matrix, 2)\ncorr_matrix[np.abs(corr_matrix) < 0.3] = 0\n\nsns.heatmap(corr_matrix, annot=True, linewidths=.5, cmap='coolwarm')\n\nplt.title('Correlation matrix')\nplt.show()","b75fad9c":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 Healthcare_1 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\ntrain_df.loc[train_df['Healthcare_1'].isna(), 'Healthcare_1'] =\\\ngb_hc_model.predict(train_df.loc[train_df['Healthcare_1'].isna(), hc_features_to_train])","a74275f3":"train_df.isna().sum()","1a148386":"train_df.describe()","f1634ca5":"train_df['Rooms'].value_counts()","0afd0ffd":"train_df['Rooms_outlier'] = 0\ntrain_df.loc[(train_df['Rooms'] == 0) | (train_df['Rooms'] > 6), 'Rooms_outlier'] = 1\ntrain_df.head()","7e307a38":"train_df[train_df['Rooms'] == 0]","3c79e18d":"train_df[train_df['Rooms'] > 6]","63cf29e8":"train_df.loc[train_df['Rooms'] == 0, 'Rooms'] = train_df['Rooms'].median()\ntrain_df.loc[train_df['Rooms'] > 6, 'Rooms'] = train_df['Rooms'].median()","e74fdbde":"train_df['Rooms'].value_counts()","cad60814":"train_df['Square'].value_counts()","e3021928":"train_df['Square_outlier'] = 0\ntrain_df.loc[(train_df['Square'] <= 10) | (train_df['Square'] <= train_df['LifeSquare']), 'Square_outlier'] = 1\ntrain_df.head()","788fb7c7":"ind_square_little_life_square = train_df['Square'] < train_df['LifeSquare']\n\ntrain_df.loc[ind_square_little_life_square, 'Square'] = train_df.loc[ind_square_little_life_square, 'LifeSquare']","231ba544":"train_df.loc[train_df['Square'] <= 10, 'Square'] = train_df['Square'].median()","999d168f":"train_df['Square'].describe()","e44c003a":"train_df['LifeSquare'].value_counts()","449ce48c":"train_df['LifeSquare'].describe()","36c1e22e":"train_df['LifeSquare_outlier'] = 0\ntrain_df.loc[(train_df['LifeSquare'] <= 10) | (train_df['Square'] == train_df['LifeSquare']), 'LifeSquare_outlier'] = 1\ntrain_df.head()","6134bf64":"train_df.loc[train_df['LifeSquare'] < 10, 'LifeSquare'] = 10\ntrain_df.loc[train_df['Square'] == train_df['LifeSquare'], 'LifeSquare'] = train_df['LifeSquare'].median()","afbbf00c":"train_df['LifeSquare'].describe()","7a9a7462":"train_df['KitchenSquare'].value_counts()","07f9c296":"train_df['KitchenSquare'].quantile(.975), train_df['KitchenSquare'].quantile(.025)","5d37e739":"train_df['KitchenSquare_outlier'] = 0\ntrain_df.loc[(train_df['KitchenSquare'] < 5) | (train_df['KitchenSquare'] > train_df['KitchenSquare'].quantile(.975)), 'KitchenSquare_outlier'] = 1\ntrain_df.head()","5e7cbb53":"condition = (train_df['KitchenSquare'].isna()) | (train_df['KitchenSquare'] > train_df['KitchenSquare'].quantile(.975))\n        \ntrain_df.loc[condition, 'KitchenSquare'] = train_df['KitchenSquare'].median()\ntrain_df.loc[train_df['KitchenSquare'] < 5, 'KitchenSquare'] = 5\n","ad45ce41":"train_df['KitchenSquare'].value_counts()","930ad8bf":"train_df['HouseFloor'].sort_values().unique()","7a4ff2eb":"train_df['Floor'].sort_values().unique()","116115c9":"(train_df['Floor'] > train_df['HouseFloor']).sum()","d76293b1":"train_df['HouseFloor_outlier'] = 0\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['HouseFloor'] > 95, 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'HouseFloor_outlier'] = 1","9b0269bf":"train_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor'] = train_df['HouseFloor'].median()\n\nfloor_outliers = train_df.loc[train_df['Floor'] > train_df['HouseFloor']].index","c2c0ea34":"train_df.loc[floor_outliers, 'HouseFloor'] = train_df.loc[floor_outliers]['Floor']","bd5be295":"train_df.loc[train_df['HouseFloor'] > 95, 'HouseFloor'] = train_df['HouseFloor'].median()","2139ab41":"(train_df['Floor'] > train_df['HouseFloor']).sum()","07e515bf":"train_df['HouseFloor'].value_counts()","74cc1617":"train_df['HouseYear'].sort_values(ascending=False)","b8acd4ed":"current_year = datetime.now().year\n        \ntrain_df['HouseYear_outlier'] = 0\ntrain_df.loc[train_df['HouseYear'] > current_year, 'HouseYear_outlier'] = 1","ab0b1015":"train_df.loc[train_df['HouseYear'] > current_year, 'HouseYear'] = current_year","594fabd8":"class DataPreprocessing:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.medians=None\n        self.kitchen_square_quantile = None\n        self.condition = None\n        self.median_square_per_life_square = None\n        self.train_hc = None\n        self.test_hc = None\n        self.X_hc = None\n        self.y_hc = None\n        self.hc_features = None\n        self.hc_features_to_train = None\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.medians = X.median()\n        self.kitchen_square_quantile = X['KitchenSquare'].quantile(.975)\n        \n    \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n        \n        # \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438\n        # LifeSquare\n        \n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        self.condition = (X['LifeSquare'].isna()) & \\\n                      (~X['Square'].isna()) & \\\n                      (~X['KitchenSquare'].isna())\n        \n        self.median_square_per_life_square = ((X[~self.condition]['Square'] - X[~self.condition]['KitchenSquare']) \\\n                                 \/ X[~self.condition]['LifeSquare']).median()\n        \n        X.loc[self.condition, 'LifeSquare'] = (X.loc[self.condition, 'Square'] - X.loc[self.condition, 'KitchenSquare']) \\\n                                          \/ self.median_square_per_life_square\n        \n        # Healthcare_1\n        # \u0414\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u0435, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Healthcare_1 \u0438 \u043d\u0430 \u0442\u0435\u0445\n        # \u0443 \u043a\u043e\u0433\u043e \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e\n        self.train_hc = X.loc[~X['Healthcare_1'].isna()]\n        self.test_hc = X.loc[X['Healthcare_1'].isna()]\n\n        # \u0412\u043e \u0438\u0437\u0431\u0435\u0436\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u0441\u0431\u0440\u043e\u0441\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0432 train_hc\n        self.train_hc = self.train_hc.reset_index()\n        del self.train_hc['index']\n\n        # \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\n        self.hc_features = self.train_hc.select_dtypes(include=['int8', 'int16', 'int64', 'float64', 'float32']).\\\n        columns.to_list()\n        self.hc_features_to_train = self.hc_features.copy()\n\n        # \u0423\u0434\u0430\u043b\u0438\u043c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n        self.hc_features_to_train.remove('Healthcare_1')\n\n        # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c\n        self.X_hc = self.train_hc[self.hc_features_to_train]\n        self.y_hc = self.train_hc['Healthcare_1']\n\n        # \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u043c\n        X_train_hc, X_test_hc, y_train_hc, y_test_hc = train_test_split(self.X_hc, self.y_hc, test_size=0.33, random_state=42)\n\n        # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0438 \u043e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c\n        gb_hc_model = GradientBoostingRegressor(criterion='mse', max_depth=7, min_samples_leaf=10, random_state=42,\\\n                                      n_estimators=100)\n        gb_hc_model.fit(X_train_hc, y_train_hc)\n        \n        # \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 Healthcare_1 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n        X.loc[X['Healthcare_1'].isna(), 'Healthcare_1'] =\\\n            gb_hc_model.predict(X.loc[X['Healthcare_1'].isna(), self.hc_features_to_train])\n        \n        \n        # \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438\n        # Rooms\n        X['Rooms_outlier'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] > 6), 'Rooms_outlier'] = 1\n        \n        X.loc[X['Rooms'] == 0, 'Rooms'] = self.medians['Rooms']\n        X.loc[X['Rooms'] > 6, 'Rooms'] = self.medians['Rooms']\n        \n        #Square\n        X['Square_outlier'] = 0\n        X.loc[(X['Square'] <= 10) | (X['Square'] <= X['LifeSquare']), 'Square_outlier'] = 1\n\n        ind_square_little_life_square = X['Square'] < X['LifeSquare']\n        X.loc[ind_square_little_life_square, 'Square'] = X.loc[ind_square_little_life_square, 'LifeSquare']\n        X.loc[X['Square'] <= 10, 'Square'] = self.medians['Square']\n        \n        \n        #LifeSquare\n        X['LifeSquare_outlier'] = 0\n        X.loc[(X['LifeSquare'] <= 10) | (X['Square'] == X['LifeSquare']), 'LifeSquare_outlier'] = 1\n\n        X.loc[X['LifeSquare'] < 10, 'LifeSquare'] = 10\n        X.loc[X['Square'] == X['LifeSquare'], 'LifeSquare'] = self.medians['LifeSquare']\n\n        # KitchenSquare\n        X['KitchenSquare_outlier'] = 0\n        X.loc[(X['KitchenSquare'] < 5) | (X['KitchenSquare'] > self.kitchen_square_quantile), 'KitchenSquare_outlier'] = 1\n        \n        condition = (X['KitchenSquare'] < 5 ) \\\n                    | (X['KitchenSquare'] > self.kitchen_square_quantile)\n        \n        X.loc[condition, 'KitchenSquare'] = self.medians['KitchenSquare']\n\n        X.loc[X['KitchenSquare'] < 5, 'KitchenSquare'] = 5\n        \n        # HouseFloor, Floor\n        X['HouseFloor_outlier'] = 0\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 1\n        X.loc[X['HouseFloor'] > 95, 'HouseFloor_outlier'] = 1\n        \n        X.loc[X['HouseFloor'] == 0, 'HouseFloor'] = self.medians['HouseFloor']\n    \n        floor_outliers = X.loc[X['Floor'] > X['HouseFloor']].index\n        X.loc[floor_outliers, 'HouseFloor'] = X.loc[floor_outliers, 'Floor']\n        \n        X.loc[X['HouseFloor'] > 95, 'HouseFloor'] = self.medians['HouseFloor']\n        \n        # HouseYear\n        current_year = datetime.now().year\n        \n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        \n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        \n        X.fillna(self.medians, inplace=True)\n        \n        return X","c8bb2958":"binary_to_numbers = {'A': 0, 'B': 1}\n\ntrain_df['Ecology_2'] = train_df['Ecology_2'].replace(binary_to_numbers)\ntrain_df['Ecology_3'] = train_df['Ecology_3'].replace(binary_to_numbers)\ntrain_df['Shops_2'] = train_df['Shops_2'].replace(binary_to_numbers)","6b4dff0f":"# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0439\u043e\u043d\u0430 \u0447\u0435\u0440\u0435\u0437 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0432 \u0440\u0430\u0439\u043e\u043d\u0435 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\ndistrict_size = train_df['DistrictId'].value_counts().reset_index()\\\n                    .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n\ndistrict_size.head()","612cbc17":"train_df = train_df.merge(district_size, on='DistrictId', how='left')\ntrain_df.head()","763e0702":"# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0443\u0441\u043b\u043e\u0432\u043d\u0443\u044e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0439\u043e\u043d\u0430 \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u0432 \u043d\u0435\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u043e\u043c\u043e\u0432\n(train_df['DistrictSize'] > 100).value_counts()","4d358874":"train_df['IsDistrictLarge'] = (train_df['DistrictSize'] > 100).astype(int)","5bb7e4fc":"med_price_by_district = train_df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                            .rename(columns={'Price':'MedPriceByDistrict'})\n\nmed_price_by_district.head()","eb498f8f":"train_df = train_df.merge(med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\ntrain_df.head()","1e9dd777":"def floor_to_cat(X):\n\n    X['floor_cat'] = 0\n\n    floor_dev_total = X['Floor'] \/ X['HouseFloor']\n    X.loc[X['Floor'] <= 1, 'floor_cat'] = 1  \n    X.loc[(X['Floor'] > 1) & (X['Floor'] <= 3), 'floor_cat'] = 2\n    X.loc[(X['Floor'] > 3) & (floor_dev_total <= 0.5), 'floor_cat'] = 3\n    X.loc[(floor_dev_total > 0.5) & (floor_dev_total <= 0.9), 'floor_cat'] = 4\n    X.loc[(floor_dev_total > 0.9) & (X['Floor'] < X['HouseFloor']), 'floor_cat'] = 5\n    X.loc[X['Floor'] == X['HouseFloor'], 'floor_cat'] = 6\n    \n    return X\n\n\n#def floor_to_cat_pandas(X):\n#    bins = [0, 3, 5, 9, 15, X['Floor'].max()]\n#    X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n    \n#    X['floor_cat'].fillna(-1, inplace=True)\n#    return X\n\n\ndef year_to_cat(X):\n\n    X['year_cat'] = 0\n\n    X.loc[X['HouseYear'] <= 1941, 'year_cat'] = 1\n    X.loc[(X['HouseYear'] > 1941) & (X['HouseYear'] <= 1945), 'year_cat'] = 2\n    X.loc[(X['HouseYear'] > 1945) & (X['HouseYear'] <= 1980), 'year_cat'] = 3\n    X.loc[(X['HouseYear'] > 1980) & (X['HouseYear'] <= 2000), 'year_cat'] = 4\n    X.loc[(X['HouseYear'] > 2000) & (X['HouseYear'] <= 2010), 'year_cat'] = 5\n    X.loc[(X['HouseYear'] > 2010), 'year_cat'] = 6\n\n    return X\n\n\ndef year_to_cat_pandas(X):\n    bins = [0, 1941, 1945, 1980, 2000, 2010, X['HouseYear'].max()]\n    X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n    \n    X['year_cat'].fillna(-1, inplace=True)\n    return X","e1329c79":"#bins = [0, 3, 5, 9, 15, train_df['Floor'].max()]#\n#pd.cut(train_df['Floor'], bins=bins, labels=False)","87ee77cb":"#bins = [0, 3, 5, 9, 15, train_df['Floor'].max()]\n#pd.cut(train_df['Floor'], bins=bins)","4c257f70":"train_df = year_to_cat(train_df)\ntrain_df = floor_to_cat(train_df)\ntrain_df.head()","12280dd3":"med_price_by_floor_year = train_df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\nmed_price_by_floor_year.head()","e0cf508a":"train_df = train_df.merge(med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\ntrain_df.head()","e3cee1d5":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.med_price_by_district = None\n        self.med_price_by_floor_year = None\n        self.house_year_max = None\n        self.floor_max = None\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictID\n        self.district_size = X['DistrictId'].value_counts().reset_index() \\\n                               .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n                \n        # Target encoding\n        ## District, Rooms\n        df = X.copy()\n        \n        if y is not None:\n            df['Price'] = y.values\n            \n            self.med_price_by_district = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'MedPriceByDistrict'})\n            \n            self.med_price_by_district_median = self.med_price_by_district['MedPriceByDistrict'].median()\n            \n        ## floor, year\n        if y is not None:\n            self.floor_max = df['Floor'].max()\n            self.house_year_max = df['HouseYear'].max()\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.med_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\n            self.med_price_by_floor_year_median = self.med_price_by_floor_year['MedPriceByFloorYear'].median()\n        \n\n        \n    def transform(self, X):\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictId, IsDistrictLarge\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictSize'].isna(), 'new_district'] = 1\n        \n        X['DistrictSize'].fillna(5, inplace=True)\n        \n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        # More categorical features\n        X = self.floor_to_cat(X)  # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 floor_cat\n        X = self.year_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 year_cat\n        \n        # Target encoding\n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X.fillna(self.med_price_by_district_median, inplace=True)\n            \n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X.fillna(self.med_price_by_floor_year_median, inplace=True)\n        \n        return X\n    \n    def floor_to_cat(self, X):\n        X['floor_cat'] = 0\n        floor_dev_total = X['Floor'] \/ X['HouseFloor']\n        X.loc[X['Floor'] <= 1, 'floor_cat'] = 1  \n        X.loc[(X['Floor'] > 1) & (X['Floor'] <= 3), 'floor_cat'] = 2\n        X.loc[(X['Floor'] > 3) & (floor_dev_total <= 0.5), 'floor_cat'] = 3\n        X.loc[(floor_dev_total > 0.5) & (floor_dev_total <= 0.9), 'floor_cat'] = 4\n        X.loc[(floor_dev_total > 0.9), 'floor_cat'] = 5\n        return X\n     \n    def year_to_cat(self, X):\n        bins = [0, 1941, 1945, 1980, 2000, 2010, self.house_year_max]\n        X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n\n        X['year_cat'].fillna(-1, inplace=True)\n        return X\n            \n    ","80ea21ca":"train_df.columns.tolist()","92908b8c":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3', 'Healthcare_1',\n                 'Helthcare_2', 'Shops_1', 'Shops_2']\n\nnew_feature_names = ['Rooms_outlier', 'HouseFloor_outlier', 'HouseYear_outlier', 'LifeSquare_outlier',\n                     'Square_outlier', 'DistrictSize', 'KitchenSquare_outlier',\n                     'new_district', 'IsDistrictLarge',  'MedPriceByDistrict', 'MedPriceByFloorYear']\n\ntarget_name = 'Price'","9b99ec68":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\nX = train_df.drop(columns=target_name)\ny = train_df[target_name]","324aece0":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=21)","3d6389e3":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","c5fd88a2":"features_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","e284d6c6":"X_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","a139e266":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","06a303fb":"rf_model = RandomForestRegressor(random_state=21, criterion='mse', n_estimators=500, max_depth=15, max_features=3, min_samples_leaf=3)\nrf_model.fit(X_train, y_train)","b2e9a3d4":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","a2bb57b9":"y_train_preds = rf_model.predict(X_train)\ny_test_preds = rf_model.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","68bd7b53":"cv_score = cross_val_score(rf_model, X_train, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=21))\ncv_score","def79c33":"cv_score.mean()","61dc15d6":"feature_importances = pd.DataFrame(zip(X_train.columns, rf_model.feature_importances_), \n                                   columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","eb3219bc":"test_df.shape","4aae0976":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","5e1734dd":"predictions = rf_model.predict(test_df)\npredictions","a04db4c6":"submit['Price'] = predictions\nsubmit.head()","c423412c":"submit.to_csv('rf_submit.csv', index=False)","5caada7f":"\u0412\u043e\u0437\u044c\u043c\u0451\u043c \u0446\u0435\u043d\u0443 \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430 \u0441\u0435\u0442\u0430 \u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0433\u0438\u0441\u0442\u0430\u0433\u0440\u0430\u043c\u043c\u0443 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0446\u0435\u043d\u044b \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","31cf8e7b":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438","c3f4d4df":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445","c6d4bd77":"# LifeSquare","ce1b19ca":"# **1. EDA**\n# **\u0414\u0435\u043b\u0430\u0435\u043c EDA \u0434\u043b\u044f:**\n \n* \u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n* \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f NaN\n* \u0418\u0434\u0435\u0439 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\n* \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f","b433a901":"**# **\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0438\u043b\u044c \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0445****","ef5dc0a5":"\u0421\u0435\u0442\u044b \u0441\u0442\u0430\u043b\u0438 \u0432\u0435\u0441\u0438\u0442\u044c \u043b\u0435\u0433\u0447\u0435 \u0432 4 \u0440\u0430\u0437\u0430, \u043f\u043e\u044f\u0432\u0438\u043b\u0438\u0441\u044c \u0432 \u0442\u0438\u043f\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 category, \u0447\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0434\u0430\u0442\u044c \u0434\u043b\u044f \u0430\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.","3c6186c7":"# Square","f709530c":"\u041c\u0435\u0442\u0440\u0430\u0436 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043d\u0438\u0436\u0435 10 \u043c2 \u0443\u0441\u0440\u0435\u0434\u043d\u044f\u0435\u043c","0d1cdf08":"# \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430: R2 - \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0434\u0435\u0442\u0435\u0440\u043c\u0438\u043d\u0430\u0446\u0438\u0438 (sklearn.metrics.r2_score)\n\n*\u0421\u0434\u0430\u0447\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430:*\n\n\u0421\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f 10.01.21\n\u041f\u0440\u0438\u0441\u043b\u0430\u0442\u044c \u0432 \u0440\u0430\u0437\u0434\u0435\u043b \u0417\u0430\u0434\u0430\u043d\u0438\u044f \u0423\u0440\u043e\u043a\u0430 10 (\"\u0412\u0435\u0431\u0438\u043d\u0430\u0440. \u041a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0443\") \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u0432 github \u0438\u043b\u0438 public kaggle notebook.\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c R2 > 0.6 \u043d\u0430 Private Leaderboard.\n\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0432\u043e\u0439 \u043d\u0438\u043a \u043d\u0430 kaggle\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0412\u0441\u0435 \u0444\u0430\u0439\u043b\u044b csv \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439 (header - \u0442\u043e \u0435\u0441\u0442\u044c \"\u0448\u0430\u043f\u043a\u0443\"), \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c - \u0437\u0430\u043f\u044f\u0442\u0430\u044f. \u0412 \u0444\u0430\u0439\u043b\u0430\u0445 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c\u0441\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0438\u0437 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430.\n\n*\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430 \u0441 \u043a\u043e\u0434\u043e\u043c (ipynb):*\n\n\u0424\u0430\u0439\u043b \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438\n\u041f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043b\u0443\u0447\u0448\u0435 \u043e\u0444\u043e\u0440\u043c\u043b\u044f\u0442\u044c \u0432 \u0432\u0438\u0434\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439\n\u041f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0433\u0440\u0430\u0444\u0438\u043a\u0438, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 (\u043e\u043a\u043e\u043b\u043e 3-5)\n\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043b\u0443\u0447\u0448\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c, \u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u043a\u043e\u0434 \u0432\u0441\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u0421\u043a\u0440\u0438\u043f\u0442 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 (\u043e\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439)\n\u0412\u0435\u0441\u044c \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432 \u043e\u0434\u043d\u043e\u043c \u0441\u043a\u0440\u0438\u043f\u0442\u0435 (\u0444\u0430\u0439\u043b ipynb).\n\u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a (\u0441\u0440\u0435\u0434\u043d\u0435\u0435, \u043c\u0435\u0434\u0438\u0430\u043d\u0430 \u0438 \u0442.\u0434.) \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043b\u0443\u0447\u0448\u0435 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0445 \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435, \u0438 \u043f\u043e\u0442\u043e\u043c \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0437\u0430\u043d\u043e\u0432\u043e, \u0430 \u0431\u0440\u0430\u0442\u044c \u0438\u0445 \u0441 \u0442\u0440\u0435\u0439\u043d\u0430.\n\u041f\u0440\u043e\u0435\u043a\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043e\u0442\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0437\u0430 \u0440\u0430\u0437\u0443\u043c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f (\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 10 \u043c\u0438\u043d\u0443\u0442), \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043b\u0443\u0447\u0448\u0435 \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c GridSearch \u0441 \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u043e\u0447\u0435\u0442\u0430\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432.","533f6fd8":"# HouseYear","2c2d2cd3":"1. Rooms - \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0431\u0435\u0437 \u043a\u043e\u043c\u043d\u0430\u0442 \u043d\u0435 \u0431\u044b\u0432\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442 \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e \u0432\u044b\u0431\u0440\u043e\u0441, \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u0440\u0435\u0434\u0435\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u043c;\n1. Square - \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043d\u0430 2019 \u0433\u043e\u0434 10 \u043c2 \u0442.\u0435. \u0432\u0441\u0451 \u0447\u0442\u043e \u043d\u0438\u0436\u0435 \u044d\u0442\u043e \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e \u0432\u044b\u0431\u0440\u043e\u0441\n1. LifeSquare - \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043d\u0438\u043a\u0430\u043a \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u043a\u043e\u043b\u043e \u043d\u0443\u043b\u044f \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u044d\u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441, \u0442\u0430\u043a\u0436\u0435 \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u0449\u0435\u0439\n1. KitchenSquare - \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u0443\u0445\u043d\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 5 \u043c\u0435\u0442\u0440\u043e\u0432.\n1. HouseFloor - \u0441\u0430\u043c\u043e\u0435 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0436\u0438\u043b\u043e\u0435 \u0437\u0434\u0430\u043d\u0438\u0435 \u0432 \u041c\u043e\u0441\u043a\u0432\u0435 95 \u044d\u0442\u0430\u0436\u0435\u0439 \u0432\u0441\u0451 \u0447\u0442\u043e \u0432\u044b\u0448\u0435 \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e \u0432\u044b\u0431\u0440\u043e\u0441\n1. \u0421\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0432\u044b\u0431\u0440\u043e\u0441 \u044d\u0442\u043e Price. \u041f\u0435\u0440\u0432\u043e\u0435 \u044d\u0442\u043e \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f (\u0440\u0443\u0431\u043b\u0438, \u0435\u0432\u0440\u043e, \u0434\u043e\u043b\u043b\u0430\u0440\u044b, \u0442\u0435\u043d\u0433\u0435) \u043d\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u043e, \u043d\u0430 \u0446\u0435\u043d\u0443 \u043c\u043e\u0436\u0435\u0442 \u0438\u0433\u0440\u0430\u0442\u044c \u043a\u0443\u0440\u0441 \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u044b. \u0412\u0442\u043e\u0440\u043e\u0435 \u0435\u0441\u043b\u0438 \u0431\u0440\u0430\u0442\u044c \u0420\u043e\u0441\u0441\u0438\u044e, \u0442\u043e \u0446\u0435\u043d\u0430 \u0447\u0451\u0442\u043a\u043e \u043a\u043e\u0440\u0435\u043b\u043b\u0438\u0440\u0443\u0435\u0442 \u0441\u043e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043d\u0435\u0444\u0442\u0438 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435, \u0441 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u043b\u0430\u0433\u043e\u043c \u043e\u0442 \u0442\u0440\u0451\u0445 \u0434\u043e \u0448\u0435\u0441\u0442\u0438 \u043c\u0435\u0441\u044f\u0446\u0435\u0432. \u0422.\u0435. \u0441\u044e\u0434\u0430 \u0445\u043e\u0440\u043e\u0448\u043e \u0431\u044b \u0431\u044b\u043b\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0444\u0438\u0447\u0443 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0431\u0430\u0440\u0440\u0435\u043b\u044f. \u0415\u0441\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u043d\u043e \u043d\u0435\u0444\u0442\u044c \u0437\u0430\u0432\u0442\u0440\u0430 \u0431\u0443\u0434\u0435\u0442 \u0441\u0442\u043e\u0438\u0442\u044c 100 \u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0442\u043e \u0446\u0435\u043d\u044b \u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0441\u0442\u0438, \u0435\u0441\u043b\u0438 \u0436\u0435 \u0446\u0435\u043d\u0430 \u043d\u0435\u0444\u0442\u0438 \u0443\u043f\u0430\u0434\u0435\u0442 \u0434\u043e 10 \u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432, \u0442\u043e \u0446\u0435\u043d\u044b \u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0443\u043f\u0430\u0434\u0443\u0442, \u0445\u043e\u0442\u044f \u0432\u0441\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0439. \u0422\u0440\u0435\u0442\u044c\u0435, \u0435\u0449\u0451 \u043e\u0434\u043d\u0430 \u0444\u0438\u0447\u0430 \u043c\u043e\u0433\u043b\u0430 \u0431\u044b \u0431\u044b\u0442\u044c \u0434\u0435\u043b\u043e\u0432\u0430\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c, \u0443\u0441\u043b\u043e\u0432\u043d\u043e \u0432 \u041c\u0430\u0433\u0430\u0434\u0430\u043d\u0435 \u043b\u044e\u0434\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0431\u0440\u043e\u0441\u0430\u044e\u0442 \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u0445 \u043f\u0440\u043e\u0434\u0430\u0442\u044c, \u0430 \u0432 \u041c\u043e\u0441\u043a\u0432\u0435 \u0433\u0434\u0435 \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043c\u0435\u0441\u0442 \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 \u0440\u0430\u0441\u0445\u0432\u0430\u0442.\n","3ac61407":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043b\u0438 \u0434\u0432\u0430 \u0434\u0430\u0442\u0430 \u0441\u0435\u0442\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 Price \u0438\u043b\u0438 \u043d\u0435\u0442.","2829031a":"# 4. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n# Dummies","32e7ed4f":"\u0421\u0443\u0434\u044f \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c \u0438 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0441\u0442\u0440\u043e\u043a, \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445: LifeSquare, Healthcare_1 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0441\u0442\u0440\u043e\u043a \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c.","12aaeaf8":"\u0422\u043e \u0447\u0442\u043e \u043c\u0435\u043d\u044c\u0448\u0435 2,5% \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f \u0438 \u0431\u043e\u043b\u044c\u0449\u0435 97,5 % \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0432 \u0432\u044b\u0431\u0440\u043e\u0441\u044b.","cdff2344":"# **\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0434\u0430\u0442\u0430 \u0441\u0435\u0442\u043e\u0432, \u0432\u043e\u0437\u044c\u043c\u0451\u043c \u0438\u0437 \u043d\u0438\u0445 \u0432\u0435\u0440\u0445\u043d\u0438\u0435 5 \u0441\u0442\u0440\u043e\u0447\u0435\u043a, \u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430 \u0441\u0435\u0442\u0430\u043c \u0438\u043c\u0435\u043d\u0430 \u0438 \u043f\u043e\u0441\u043c\u043e\u0440\u0442\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043d\u0438\u0445.**","27776c17":"# HouseFloor, Floor","4bfafbae":"# LifeSquare","922b1c60":"# \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0440\u0430\u0441\u0445\u043e\u0434 \u043f\u0430\u043c\u044f\u0442\u0438","0a85774f":"\u0421\u041d\u0438\u041f 31-01-2003 \u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438 \u043c\u0443\u043d\u0438\u0446\u0438\u043f\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0436\u0438\u043b\u0438\u0449\u043d\u044b\u0445 \u0444\u043e\u043d\u0434\u043e\u0432 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0416\u041a \u0420\u0424 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435:\n\n\u25ba \u041e\u0431\u0449\u0435\u0439 \u0436\u0438\u043b\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0432 \u043e\u0434\u043d\u043e\u043a\u043e\u043c\u043d\u0430\u0442\u043d\u043e\u0439 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0435 - 14 \u043c\u00b2.\n\n\u25ba \u041e\u0431\u0449\u0435\u0439 \u0436\u0438\u043b\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0432 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430\u0445 \u0441 \u0447\u0438\u0441\u043b\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442 \u0434\u0432\u0435 \u0438 \u0431\u043e\u043b\u0435\u0435 - 16 \u043c\u00b2. \n\n\u25ba \u0421\u043f\u0430\u043b\u044c\u043d\u0438 - 8 \u043c\u00b2 (\u043d\u0430 \u0434\u0432\u0443\u0445 \u0447\u0435\u043b\u043e\u0432\u0435\u043a - 10 \u043c\u00b2); \u043a\u0443\u0445\u043d\u0438 - 8 \u043c\u00b2.\n\n\u25ba \u041a\u0443\u0445\u043e\u043d\u043d\u043e\u0439 \u0437\u043e\u043d\u044b \u0432 \u043a\u0443\u0445\u043d\u0435-\u0441\u0442\u043e\u043b\u043e\u0432\u043e\u0439 - 6 \u043c\u00b2.\n\n\u25ba \u0412 \u043e\u0434\u043d\u043e\u043a\u043e\u043c\u043d\u0430\u0442\u043d\u044b\u0445 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430\u0445 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0443\u0445\u043d\u0438 \u0438\u043b\u0438 \u043a\u0443\u0445\u043d\u0438-\u043d\u0438\u0448\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 5 \u043c\u00b2.","a12a22fa":"# 7. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n# \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","88da1db6":"# 6. \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test","43198366":"**\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435**","c11bd96e":"# \u041d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","ebc0e304":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n\n**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**\n\n* Id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u0432 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0435\n* Square - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0440\u044b\n* LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* Floor - \u044d\u0442\u0430\u0436 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430\n* HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* Ecology_1, Ecology_2, Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Social_1, Social_2, Social_3 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Healthcare_1, Helthcare_2 - \u0440\u0430\u0437\u0432\u0438\u0442\u043e\u0441\u0442\u044c \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0432 \u043f\u043b\u0430\u043d\u0435 \u0437\u0434\u0440\u0430\u0432\u043e\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f\n* Shops_1, Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u0431\u043b\u0438\u0437\u043b\u0438\u0436\u0430\u0449\u0438\u0445 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432,\u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* Price - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","69571bea":"# \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u043f\u0443\u0442\u0438 \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438","c7f10b8f":"DistrictSize, IsDistrictLarge","380d28f2":"# \u041a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 GeekBrains\n# \u0410\u0432\u0442\u043e\u0440: \u0415\u043b\u044c\u0446\u043e\u0432 \u0410\u0440\u0442\u0435\u043c \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447\n# \u041d\u0438\u043a \u043d\u0430 kaggle: virus_madison","6e7be17f":"# 5. \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","17374159":"\u0416\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u0449\u0435\u0439","d3ab50ce":"# 8. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\n# \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0442\u0435 \u0436\u0435 \u044d\u0442\u0430\u043f\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u043d\u0438\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n# \u041d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u0442\u044c \u0438 \u043d\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043e\u0432\n# \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0434\u043b\u044f \u0432\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 (\u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u043e\u043a)","dcb8ea51":"# MedPriceByDistrict","d466c321":"# \u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f","c1a2ba37":"\u0416\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u043a\u043e\u043b\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0432\u0441\u0435\u0439 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0442\u0430\u043a\u0443\u044e \u0432 10 \u043c2\n\u0410\u043d\u0430\u043b\u043e\u0447\u0433\u0438\u0447\u043d\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u0447\u0442\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043c\u044b \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0432 100 \u043c2 \u0442\u043e 2,5 % \u0433\u0434\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043e\u0442 78 \u043c2 \u043c\u044b \u0443\u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0432 \u043f\u043b\u0430\u043d\u0435 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438.","8dd2593f":"# \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","a315b5ce":"\u0414\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043f\u0440\u0438\u0437\u043d\u0430\u043b\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u0414\u043b\u044f \u043d\u0443\u043b\u0435\u0432\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u043e\u0436\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u043b\u0438\u044f\u0442\u044c \u0441\u0432\u043e\u0438\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u043d\u0430 \u0434\u0435\u0448\u0435\u0432\u044b\u0435 1 \u043a\u043e\u043c\u043d\u0430\u0442\u043d\u044b\u0435 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b.","c7bc6e6d":"# MedPriceByFloorYear","12dd0a35":"\u041e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0431\u0435\u0436\u0434\u0430\u0435\u043c\u0441\u044f \u0447\u0442\u043e \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445 LifeSquare, Healthcare_1 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c.","d976e719":"# Rooms","4b0fdd9e":"# Healthcare_1","842fa5aa":"# \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432","26df06db":"# 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","7df93047":"\u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 Healthcare_1","2d89ca66":"# \u041e\u0431\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438","57306113":"# KitchenSquare","9b062dd0":"# 3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432"}}