{"cell_type":{"cf8c8b3b":"code","caf2b924":"code","48873a05":"code","75d8282b":"code","d670a3d3":"code","9d790a69":"code","b9da18fd":"code","4113e6e7":"code","7e9f1189":"code","a4615595":"code","fb92d9a5":"code","a932e535":"code","d0f96a8a":"code","da3c3acc":"code","0843e60d":"code","7e5615d5":"code","7a1764c9":"code","898615e9":"code","05d899ba":"code","c32b00a8":"code","a0eeb84a":"code","525adf52":"code","ddcd203f":"code","51d732a4":"code","bdebcd86":"code","74eb3e60":"code","3325ecbb":"code","2c5b434f":"code","032e39f0":"code","e64fdbf0":"code","b4f01ee0":"markdown","65a26ec1":"markdown","ee7bb795":"markdown","d1f79801":"markdown","1492badb":"markdown","0a911061":"markdown","35a6befe":"markdown","e8c1b812":"markdown","3d27a8e3":"markdown","2f7b11ca":"markdown","8be1df42":"markdown","6010420d":"markdown","d8b602e6":"markdown","797cb44e":"markdown"},"source":{"cf8c8b3b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom scipy.stats import multivariate_normal\nfrom sklearn.model_selection import train_test_split as split\nimport seaborn as sns\n","caf2b924":"train= pd.read_csv('..\/input\/titanic\/train.csv')#get the train df\ntest = pd.read_csv('..\/input\/titanic\/test.csv')#get the test df","48873a05":"train.head()","75d8282b":"test.head()","d670a3d3":"Titanic=pd.concat([train,test])\n","9d790a69":"Titanic.info()","b9da18fd":"train.describe()","4113e6e7":"test.describe()","7e9f1189":"test.isna().sum()  ","a4615595":"train.isna().sum() ","fb92d9a5":"train=train.drop('Cabin',axis=1)\ntest=test.drop('Cabin',axis=1)\ntrain.head()","a932e535":"fig, ax =plt.subplots(1,2)\n\nsns.countplot(x=\"Sex\", data = Titanic, ax=ax[0])\n\nsns.countplot(x=\"Embarked\", data = Titanic,ax=ax[1])\n\nfig.show()","d0f96a8a":"train['Age'].fillna(train[\"Age\"].mean(), inplace=True)\ntest['Age'].fillna(test[\"Age\"].mean(), inplace=True)","da3c3acc":"test.isna().sum()  ","0843e60d":"train.isna().sum()  ","7e5615d5":"train['Embarked'].fillna(train['Embarked'].mode()[0], inplace=True)\ntest['Fare'].fillna(test[\"Fare\"].mean(), inplace=True)","7a1764c9":"train.isna().sum()  ","898615e9":"test.isna().sum()  ","05d899ba":"columns = [\"Survived\", \"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\"]\n\nfig = make_subplots(\n    rows=len(columns)\/\/2, \n    cols=2,\n    column_widths = [10] * 2,\n    row_heights = [10] * 4,\n    subplot_titles=[\"Survived\", \"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\"]\n)\n\nfor i, column in enumerate(columns):\n    r = (i)\/\/2\n    c = (i) - r*2\n    \n    survived = train[train.Survived == 1][column]\n    died = train[train.Survived == 0][column]\n    fig.append_trace(go.Histogram(x=survived, name='survived', marker_color='#EB89B5'), r+1, c+1)\n    fig.append_trace(go.Histogram(x=died, name='died', marker_color='#330C73'), r+1, c+1)\n\nfig.update_layout(showlegend=False, height=1000)\n\nfig.show()","c32b00a8":"from sklearn.preprocessing import OrdinalEncoder\n\ntrain_encoder = OrdinalEncoder()\n\ntrain[['Sex', 'Embarked']] = train_encoder.fit_transform(train[['Sex', 'Embarked']])\ntest_encoder = OrdinalEncoder()\n\ntest[['Sex', 'Embarked']] = test_encoder.fit_transform(test[['Sex', 'Embarked']])","a0eeb84a":"plt.figure(figsize=(12,6))\nsns.pairplot(train,hue='Survived',palette='Dark2')","525adf52":"plt.figure(figsize=(8,6))\nsns.heatmap(train.select_dtypes(\"number\").corr(),annot=True, cmap='viridis')\nplt.title(\"Correlation Matrix\")\n\nplt.show()","ddcd203f":"X_train = train[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']].copy()\n\ny_train = train['Survived'].copy()\n\nX_test = test[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']].copy()","51d732a4":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\n\nrfmodel = RandomForestClassifier().fit(X_train, y_train)\n\nrfmodel_score = rfmodel.score(X_train, y_train)\nrfmodel_cv_score = cross_val_score(rfmodel, X_train, y_train, cv=5).mean()\n\nprint(f'Decision Tree -> Score: {rfmodel_score}, Cross Validation Mean Score: {rfmodel_cv_score}')","bdebcd86":"importances = [round(i, 2) for i in rfmodel.feature_importances_]\nindices = np.argsort(importances)[::-1]\ncols = X_train.columns[indices]\n\nfor column, importance in zip(list(cols), importances):\n    print(f\"Column '{column}', Importance {importance}\")","74eb3e60":"X_train = train[['Sex', 'Age', 'Parch']].copy()\n\ny_train = train['Survived'].copy()\n\nX_test = test[['Sex', 'Age', 'Parch']].copy()","3325ecbb":"rfmodel = RandomForestClassifier().fit(X_train, y_train)\n\nrfmodel_score = rfmodel.score(X_train, y_train)\nrfmodel_cv_score = cross_val_score(rfmodel, X_train, y_train, cv=5).mean()\n\nprint(f'Decision Tree -> Score: {rfmodel_score}, Cross Validation Mean Score: {rfmodel_cv_score}')","2c5b434f":"from sklearn.metrics import confusion_matrix\ny_pred = rfmodel.predict(X_train)\n\ncm = confusion_matrix(y_train, y_pred)\n\nfig = px.imshow(cm, x=['Died', 'Survived'], y=['Died', 'Survived'], range_color=[0,500])\nfig.show()","032e39f0":"final_predictions = rfmodel.predict(X_test)","e64fdbf0":"submission = pd.DataFrame({'PassengerId':test['PassengerId'], 'Survived':final_predictions})\n\nsubmission.to_csv('gender_submission.csv',index=False)","b4f01ee0":"### Datos train","65a26ec1":"# Preparaci\u00f3n de datos","ee7bb795":"## Modelaci\u00f3n","d1f79801":"### Se ajusta nuevamente el modelo","1492badb":"Se denota una correlaci\u00f3n medianamente fuerte entre el sexo y la sobrevivencia.","0a911061":"### Se eliminan las variables poco importantes","35a6befe":"## Submission","e8c1b812":"# Analisis de correlaci\u00f3n","3d27a8e3":"## Predicci\u00f3n","2f7b11ca":"# Exploraci\u00f3n de los datos","8be1df42":"# Lectura de datos","6010420d":"# Se construye la matriz de confusi\u00f3n","d8b602e6":"## Definici\u00f3n de los datos a utilizar","797cb44e":"## Limpieza de datos"}}