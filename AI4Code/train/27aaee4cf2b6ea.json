{"cell_type":{"53509e01":"code","ed53f98e":"code","8e6edf2f":"code","ba9ec33d":"code","9b90b56f":"code","d953c704":"code","94ef1a45":"code","4cf99ef8":"code","6126b113":"code","23668289":"code","ab19ed0d":"code","010dc2a6":"code","1f08b8e9":"code","02a8afff":"code","9fd0de7e":"code","31a50471":"code","0b52cd88":"code","6211ac3c":"code","5502eede":"code","6693f3c1":"code","74592ffe":"code","d9d8a235":"code","3a50e854":"code","4c451717":"code","193aed14":"code","ee4602a7":"code","fbce3391":"code","5d4dd839":"code","e31c161c":"code","8b1f2b69":"code","96e3b210":"code","049b33b2":"markdown","4cfbb3ad":"markdown","2ea42559":"markdown","2a973f72":"markdown","3d5809a8":"markdown","49409b83":"markdown","9a884dea":"markdown"},"source":{"53509e01":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nnp.random.seed(0)\nplt.style.use(\"ggplot\")\n\nimport tensorflow as tf\nprint('Tensorflow version:', tf.__version__)\nprint('GPU detected:', tf.config.list_physical_devices('GPU'))\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ed53f98e":"data = pd.read_csv('..\/input\/ner-dataset\/ner_datasetreference.csv', encoding='latin1')\ndata = data.fillna(method='ffill')\ndata.head(20)","8e6edf2f":"data['Sentence #'].unique()","ba9ec33d":"data.columns","9b90b56f":"print(\"unique words; \",data[\"Word\"].nunique())\nprint(\"unique tags; \",data[\"Tag\"].nunique())","d953c704":"#creating dataset for unique words, tags\nwords = list(set(data[\"Word\"].values))\nwords.append(\"ENDPAD\")\ntags = list(set(data[\"Tag\"].values))","94ef1a45":"np.shape(words)","4cf99ef8":"num_words = len(words)\nnum_tags = len(tags)","6126b113":"num_words","23668289":"class Sentence_getter(object):\n    def __init__(self, data):\n        self.data = data\n        agg_fun = lambda s: [(w, p, t) for w,p,t in zip(s[\"Word\"].values.tolist(),\n                                                       s[\"POS\"].values.tolist(),\n                                                       s['Tag'].values.tolist())]\n        \n        self.grouped = self.data.groupby('Sentence #').apply(agg_fun)\n        self.sentences = [i for i in self.grouped]\n    \n    ","ab19ed0d":"getter = Sentence_getter(data)","010dc2a6":"sentences = getter.sentences","1f08b8e9":"sentences[0]","02a8afff":"# Creating vocabulary\nword2idx = {w: i+1 for i,w in enumerate(words)}\ntag2idx = {t: i for i,t in enumerate(tags)}","9fd0de7e":"tag2idx","31a50471":"plt.hist([len(s) for s in sentences], bins = 50)\nplt.plot()","0b52cd88":"from tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.utils import to_categorical\n\nmax_len = 50\n\nX = [[word2idx[w[0]] for w in s] for s in sentences]\nX = pad_sequences(maxlen = max_len, sequences=X, padding='post', value=num_words-1)\n\ny = [[tag2idx[w[2]] for w in s] for s in sentences]\ny = pad_sequences(maxlen = max_len, sequences=y, padding='post', value=tag2idx[\"O\"])\n","6211ac3c":"y = [to_categorical(i, num_classes=num_tags) for i in y]","5502eede":"y[0]","6693f3c1":"x_train","74592ffe":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.1,random_state=1 )","d9d8a235":"from tensorflow.keras import Model, Input\nfrom tensorflow.keras.layers import LSTM, Embedding, Dense\nfrom tensorflow.keras.layers import TimeDistributed, SpatialDropout1D, Bidirectional","3a50e854":"input_word = Input(shape=(max_len,))\nmodel = Embedding(input_dim=num_words, output_dim=max_len, input_length=max_len)(input_word)\nmodel = SpatialDropout1D(0.1)(model)\nmodel = Bidirectional(LSTM(units=100, return_sequences=True, recurrent_dropout=0.1))(model)\nout = TimeDistributed(Dense(num_tags, activation='softmax'))(model)\n\nmodel = Model(input_word, out)\nmodel.summary()\n","4c451717":"model.compile(optimizer='adam',loss='categorical_crossentropy',\n             metrics=['accuracy'])","193aed14":"pip install livelossplot","ee4602a7":"from tensorflow.keras.callbacks import EarlyStopping\nfrom livelossplot import PlotLossesKeras\n","fbce3391":"type(y_train)","5d4dd839":"early_stopping = EarlyStopping(monitor='val_accuracy', patience = 1, verbose=0, mode='max', restore_best_weights=False)\ncallbacks = [PlotLossesKeras(), early_stopping]\n\nhistory = model.fit(\n    x_train, np.array(y_train),\n    validation_split=0.2,\n    batch_size=32,\n    epochs=3,\n    verbose=1,\n    callbacks=callbacks\n)","e31c161c":"model.evaluate(x_test, np.array(y_test))","8b1f2b69":"x_test[0]","96e3b210":"i = np.random.randint(0, x_test.shape[0])\np = model.predict(np.array([x_test[i]]))\n# print(np.shape(p))\n# print(p)\np = np.argmax(p, axis=-1)\n\n\ny_true = np.argmax(np.array(y_test), axis=-1)[i]\n\nprint(\"{:15}{:5}\\t{}\\n\".format(\"Word\", \"True\", \"Pred\"))\nprint(\"-\"*30)\n\nfor (w, t, pred) in zip(x_test[i], y_true, p[0]):\n    print(\"{:15}{}\\t{}\".format(words[w-1], tags[t], tags[pred]))","049b33b2":"Padding inputs to maxlen\n\nCreating INPUTS AND OUTPUTS","4cfbb3ad":"**Hist plot of len of sentences**","2ea42559":"Converting output labes to categorical ( ONE_HOT )","2a973f72":"Building and compiling a BiLSTM","3d5809a8":"Now train-test splitting","49409b83":"Lets take 50 as maxlen to be on safer side","9a884dea":"TRAINING MODEL with per-epoch visualizations using CALLBACKS"}}