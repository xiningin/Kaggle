{"cell_type":{"f20a02a5":"code","33c7d6e4":"code","71184f74":"code","4ddaae54":"code","0773f921":"code","2a598af6":"code","aeaaf608":"code","73e36e71":"code","955012a5":"markdown","38c46f6a":"markdown","45e360d2":"markdown","625f19ae":"markdown","a215786b":"markdown","267b0611":"markdown","cd675684":"markdown","4fdc2c92":"markdown","5c149bef":"markdown","a3e9ce4e":"markdown","9e29acf7":"markdown","a684369b":"markdown","b62fa131":"markdown","46112d74":"markdown","b07ee750":"markdown","5bf7091b":"markdown","166b85d9":"markdown","582e77d5":"markdown","0b7b5286":"markdown","5838484f":"markdown","121ef5a6":"markdown","ac236888":"markdown","3501e080":"markdown","eb5ea746":"markdown","2838198b":"markdown","052b36c5":"markdown","60738ff4":"markdown"},"source":{"f20a02a5":"import pandas as pd\nimport numpy as np\nimport os\nimport seaborn as sns\nimport glob\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\npd.set_option('max_columns', 1000)\nfrom tqdm import tqdm\nfrom sklearn.neighbors import BallTree\nimport math\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nfrom datetime import datetime\nimport pytz\nfrom IPython.display import HTML\nimport scipy.stats as stats\nimport matplotlib as mpl\nfrom matplotlib import animation, rc, use\nfrom matplotlib.patches import Rectangle, Arrow\nimport tensorflow as tf\nfrom matplotlib.patches import Polygon\nimport matplotlib.patheffects as pe\nimport gc\n\n\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    \n    return df\n\n\ndef get_dx_dy(radian_angle, dist):\n    dx = dist * math.cos(radian_angle)\n    dy = dist * math.sin(radian_angle)\n    return dx, dy\n\n\ndef create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12*2, 6.33*2)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='slategrey', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.3,\n                                edgecolor='k',\n                                facecolor='royalblue',\n                                alpha=0.4,\n                                zorder=1)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.3,\n                                edgecolor='k',\n                                facecolor='royalblue',\n                                alpha=0.4,\n                                zorder=1)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(0, 53.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n                 color='yellow')\n    return fig, ax\n\n\n\nclass CreateNFLData:\n\n    def __init__(self):\n        pass\n\n    def LoadData(self, Normal=True):\n        if Normal == True:\n            print(\"Loading Original Data\")\n            globbed_files = glob.glob(\"week*.csv\") #creates a list of all csv files\n            data = []\n            for csv in tqdm(globbed_files):\n                frame = pd.read_csv(csv, index_col=0)\n                data.append(frame)\n\n            WeekData = pd.concat(data).reset_index()\n            WeekData\n        \n        else:\n            print(\"Loading Modified Data\")\n            globbed_files = glob.glob(\"Revised Data\/*.csv\") #creates a list of all csv files\n            data = []\n            for csv in tqdm(globbed_files):\n                frame = pd.read_csv(csv, index_col=0)\n                data.append(frame)\n\n            WeekData = pd.concat(data).reset_index()\n            WeekData\n        return WeekData\n\n\n\n    def Standardize(self,W):\n        print(\"Standardizing Data..\")\n        W['Dir_rad'] = np.mod(90 - W.dir, 360) * math.pi\/180.0\n        W['ToLeft'] = W.playDirection == \"left\"\n        W['TeamOnOffense'] = \"home\"\n        W.loc[W.possessionTeam != W.PlayerTeam, 'TeamOnOffense'] = \"away\"\n        W['IsOnOffense'] = W.PlayerTeam == W.TeamOnOffense # Is player on offense?\n        W['YardLine_std'] = 100 - W.yardlineNumber\n        W.loc[W.yardlineSide.fillna('') == W.possessionTeam,  \n                'YardLine_std'\n                ] = W.loc[W.yardlineSide.fillna('') == W.possessionTeam,  \n                'yardlineNumber']\n        W['X_std'] = W.x\n        W.loc[W.ToLeft, 'X_std'] = 120 - W.loc[W.ToLeft, 'x'] \n        W['Y_std'] = W.y\n        W.loc[W.ToLeft, 'Y_std'] = 160\/3 - W.loc[W.ToLeft, 'y'] \n        #W['Orientation_std'] = -90 + W.Orientation\n        #W.loc[W.ToLeft, 'Orientation_std'] = np.mod(180 + W.loc[W.ToLeft, 'Orientation_std'], 360)\n        W['Dir_std'] = W.Dir_rad\n        W.loc[W.ToLeft, 'Dir_std'] = np.mod(np.pi + W.loc[W.ToLeft, 'Dir_rad'], 2*np.pi)\n        W['dx'] = round(W['s']*np.cos(W['Dir_std']),2)\n        W['dy'] = round(W['s']*np.sin(W['Dir_std']),2)\n        W['X_std'] = round(W['X_std'],2)\n        W['Y_std'] = round(W['Y_std'],2)\n        #W['Orientation_rad'] = np.mod(W.o, 360) * math.pi\/180.0\n        W['Orientation_rad'] = np.mod(-W.o + 90, 360) * math.pi\/180.0\n        W['Orientation_std'] = W.Orientation_rad\n        W.loc[W.ToLeft, 'Orientation_std'] = np.mod(np.pi + W.loc[W.ToLeft, 'Orientation_rad'], 2*np.pi)\n        W['MPH'] = W['s'] \/ 0.488889\n        return W\n\n\n    \n    def FrameData(self,WeekData1):\n        NotNone = WeekData1.query('event != \"None\"')\n        NotNone = NotNone.groupby(['gameId','playId','event'])['frameId'].max().reset_index()\n        NotNone = NotNone.set_index(['gameId','playId','event'], drop= True).unstack('event').reset_index()\n        NotNone.columns = [' '.join(col).strip() for col in NotNone.columns.values]\n        NotNone.columns = NotNone.columns.str.replace('frameId' , '')\n        NotNone.columns = NotNone.columns.str.replace(' ' , '')\n        NotNone['Code'] = NotNone['gameId'].astype(str) + \"-\" + NotNone['playId'].astype(str)\n        NotNone = NotNone.set_index('Code')\n        NotNone = NotNone.loc[~NotNone.index.duplicated(keep='first')]\n\n        for col in tqdm(NotNone.columns):\n            NotNone['Contains_' + str(col)] = np.where(NotNone[col] > 0, True, False)\n\n        Cols = ['ball_snap', 'man_in_motion', 'pass_arrived', 'pass_forward', 'play_action','pass_outcome_caught', 'run_pass_option', 'Contains_man_in_motion', 'Contains_pass_arrived', 'Contains_pass_forward', 'Contains_pass_outcome_caught', 'Contains_play_action','Contains_run_pass_option']\n     #   WeekData1 = pd.merge(df, NotNone, how=\"left\", left_on=['gameId','playId'], right_on=['gameId','playId'] )\n        for col in Cols:\n            WeekData1[col] = WeekData1.Code.map(NotNone[col])\n\n        del NotNone\n        gc.collect()\n\n        WeekData1['After_snap'] = np.where(WeekData1['frameId'] > WeekData1['ball_snap'],1,0)\n        WeekData1['After_Throw'] = np.where(WeekData1['frameId'] > WeekData1['pass_forward'],1,0)\n        WeekData1['After_PassArrived'] = np.where(WeekData1['frameId'] > WeekData1['pass_arrived'],1,0)\n        WeekData1['After_PlayAction'] = np.where(WeekData1['frameId'] > WeekData1['play_action'],1,0)\n      #  WeekData1['After_run_pass_option'] = np.where(WeekData1['frameId'] > WeekData1['run_pass_option'],1,0)\n        WeekData1['After_Catch'] = np.where(WeekData1['frameId'] > WeekData1['pass_outcome_caught'],1,0)\n\n\n        LOS = WeekData1.query('displayName == \"Football\" & After_snap == 0')\n        LOS = LOS.groupby(['gameId','playId'])['X_std'].agg('median').reset_index()\n        LOS.columns = ['gameId','playId','LOS']\n        LOS['Code'] = LOS['gameId'].astype(str) + \"-\" + LOS['playId'].astype(str)\n        LOS = LOS.set_index('Code')\n        LOS = LOS.loc[~LOS.index.duplicated(keep='first')]\n        WeekData1[\"LOS\"] = WeekData1.Code.map(LOS['LOS'])\n        WeekData1['Distfrom_LOS'] = WeekData1['X_std'] - WeekData1['LOS']\n        WeekData1['AbsDistfrom_LOS'] = np.abs(WeekData1['X_std'] - WeekData1['LOS'])\n        del LOS\n        gc.collect()\n        return WeekData1\n\n    def import_data(self,file,columns=False,cols=\"\"):\n        if columns == False:\n            df = pd.read_csv(file, low_memory=False)\n            df = reduce_mem_usage(df)\n        else:\n            df = pd.read_csv(file, low_memory=False, usecols=cols)\n            df = reduce_mem_usage(df)\n        return df\n\n\n\n\n\n\nclass AnimatePlay:\n    def __init__(self, play_df,player_id, Tri = False, MPH = False,Text=\"\",Show='jerseyNumber',method='all' ) -> None:\n        self._MAX_FIELD_Y = 53.3\n        self._MAX_FIELD_X = 120\n        self._MAX_FIELD_PLAYERS = 22\n        \n\n        self.Tri = Tri\n        self.MPH = MPH\n        self.player_id = player_id\n        self.Show = Show\n        self.method = method\n        self.Text = Text\n\n        self._CPLT = sns.color_palette(\"husl\", 2)\n        self._frame_data = play_df\n        self._times = sorted(play_df.time.unique())\n        self._stream = self.data_stream()\n        \n        self._date_format = \"%Y-%m-%dT%H:%M:%S.%fZ\" \n        self._mean_interval_ms = np.mean([delta.microseconds\/1000 for delta in np.diff(np.array([pytz.timezone('US\/Eastern').localize(datetime.strptime(date_string, self._date_format)) for date_string in self._times]))])\n        \n        self._fig, self._ax_field = create_football_field()\n\n        self._fig.set_figheight(10)\n        self._fig.set_figwidth(15)\n        \n        self._fig.tight_layout()\n        \n        self._ax_field = plt.gca()\n        \n        self._ax_home = self._ax_field.twinx()\n        self._ax_away = self._ax_field.twinx()\n        self._ax_jersey = self._ax_field.twinx()\n\n        self.ani = animation.FuncAnimation(self._fig, self.update, frames=len(self._times), interval = self._mean_interval_ms, \n                                          init_func=self.setup_plot, blit=False)\n        \n        plt.close()\n       \n    @staticmethod\n    def set_axis_plots(ax, max_x, max_y) -> None:\n        ax.xaxis.set_visible(False)\n        ax.yaxis.set_visible(False)\n\n        ax.set_xlim([0, max_x])\n        ax.set_ylim([0, max_y])\n        \n    @staticmethod\n    def convert_orientation(x):\n        return (-x + 90)%360\n    \n    @staticmethod\n    def polar_to_z(r, theta):\n        return r * np.exp( 1j * theta)\n    \n    @staticmethod\n    def deg_to_rad(deg):\n        return deg*np.pi\/180\n        \n    def data_stream(self):\n        for time in self._times:\n            yield self._frame_data[self._frame_data.time == time]\n    \n    def setup_plot(self): \n        self.set_axis_plots(self._ax_field, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        \n        ball_snap_df = self._frame_data[(self._frame_data.event == 'ball_snap') & (self._frame_data.team == 'football')]\n        self._ax_field.axvline(ball_snap_df.X_std.to_numpy()[0], color = 'yellow', linestyle = '--')\n        \n        self.set_axis_plots(self._ax_home, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        self.set_axis_plots(self._ax_away, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        self.set_axis_plots(self._ax_jersey, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        \n        for idx in range(10,120,10):\n            self._ax_field.axvline(idx, color = 'k', linestyle = '-', alpha = 0.05)\n            \n        self._scat_field = self._ax_field.scatter([], [], s = 200, color = 'red')\n        self._scat_home = self._ax_home.scatter([], [], s = 900, color = self._CPLT[0], edgecolors = 'k')\n        self._scat_away = self._ax_away.scatter([], [], s = 900, color = self._CPLT[1], edgecolors = 'k')\n        \n        self._scat_jersey_list = []\n        self._scat_number_list = []\n        self._scat_name_list = []\n        self._scat_mph_list = []\n        self._a_dir_list = []\n        self._a_or_list = []\n        self._a_tri_list = []\n        for _ in range(self._MAX_FIELD_PLAYERS):\n            self._scat_jersey_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'black',fontweight='bold',fontsize='large',path_effects=[pe.withStroke(linewidth=3, foreground=\"white\")]))\n            self._scat_number_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'white',fontweight='bold',fontsize=14,path_effects=[pe.withStroke(linewidth=5, foreground=\"dodgerblue\")]))\n            self._scat_name_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'black',fontweight='bold',fontsize='larger',path_effects=[pe.withStroke(linewidth=5, foreground=\"gold\")]))\n            self._scat_mph_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'lime',fontweight='bold',fontsize='larger'))\n\n            self._a_dir_list.append(self._ax_field.add_patch(Arrow(0, 0, 0, 0, color = 'k')))\n            self._a_or_list.append(self._ax_field.add_patch(Arrow(0, 0, 0, 0, color = 'k')))\n            self._a_tri_list.append(self._ax_field.add_patch(Arrow(0, 0, 0, 0, color = 'k')))\n            \n        return (self._scat_field, self._scat_home, self._scat_away,*self._scat_mph_list, *self._scat_jersey_list, *self._scat_number_list, *self._scat_name_list)\n        \n    def update(self, anim_frame):\n        pos_df = next(self._stream)\n        \n        for label in pos_df.team.unique():\n            label_data = pos_df[pos_df.team == label]\n\n            if label == 'football':\n                self._scat_field.set_offsets(np.hstack([label_data.X_std, label_data.Y_std]))\n            elif label == 'home':\n                self._scat_home.set_offsets(np.vstack([label_data.X_std, label_data.Y_std]).T)\n            elif label == 'away':\n                self._scat_away.set_offsets(np.vstack([label_data.X_std, label_data.Y_std]).T)\n\n        jersey_df = pos_df[pos_df.jerseyNumber.notnull()]\n        \n        for (index, row) in pos_df[pos_df.jerseyNumber.notnull()].reset_index().iterrows():\n            self._scat_jersey_list[index].set_position((row.X_std, row.Y_std))\n            self._scat_jersey_list[index].set_text(row.position)\n            if self.method == 'single':\n                self._scat_number_list[index].set_text(np.where(self.player_id == row.nflId,str(self.Text) +\" \"+ str(round(row[self.Show],2)),\"\"))\n                self._scat_number_list[index].set_position((row.X_std, row.Y_std+2.4))\n            else:\n                self._scat_number_list[index].set_text((row[self.Show]))\n                self._scat_number_list[index].set_position((row.X_std, row.Y_std+2.4))\n            self._scat_name_list[index].set_text(np.where(row.frameId <= 10,row.displayName.split()[-1],\"\"))\n            self._scat_name_list[index].set_position((row.X_std, row.Y_std-1.9))\n            if self.MPH == True:\n                self._scat_mph_list[index].set_text(np.where((row.s \/ 0.488889) > 17,str(round(float(row.s \/ 0.488889),2)) + \" MPH\",\"\"))\n                self._scat_mph_list[index].set_position((row.X_std, row.Y_std+1.9))\n            else:\n                pass\n\n            player_vel = np.array([row.dx, row.dy])\n            player_orient = np.array([np.real(self.polar_to_z(3, row.Orientation_std)), np.imag(self.polar_to_z(3, row.Orientation_std))])\n            \n            self._a_dir_list[index].remove()\n            self._a_dir_list[index] = self._ax_field.add_patch(Arrow(row.X_std, row.Y_std, player_vel[0], player_vel[1], color = 'black'))\n            \n            self._a_or_list[index].remove()\n            self._a_or_list[index] = self._ax_field.add_patch(Arrow(row.X_std, row.Y_std, player_orient[0], player_orient[1], color = 'blue', width = 2))\n\n            if self.Tri == True:\n                if self.method == 'single':\n                    self._a_tri_list[index].remove()\n                    self._a_tri_list[index] = self._ax_field.add_patch(Polygon([[row.X_std, row.Y_std], [row.X_std_COpp,row.Y_std_COpp],[row.X_std_QB,row.Y_std_QB]], closed=True, fill=False, hatch='\/',color='lime'))\n                else:\n                    self._a_tri_list[index].remove()\n                    self._a_tri_list[index] = self._ax_field.add_patch(Polygon([[row.X_std, row.Y_std], [row.X_std_COpp,row.Y_std_COpp],[row.X_std_QB,row.Y_std_QB]], closed=True, fill=False, hatch='\/',color='lime'))\n            else:\n                pass\n        \n        return (self._scat_field, self._scat_home, self._scat_away, *self._scat_jersey_list, *self._scat_number_list, *self._scat_name_list)\n","33c7d6e4":"import pandas as pd\nimport numpy as np\nimport os\nimport seaborn as sns\nimport glob\nfrom tqdm import tqdm\n\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\npd.set_option('max_columns', 1000)\n\nfrom sklearn.neighbors import BallTree\n\n\nfrom IPython.core.display import HTML\nimport time\nimport math\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nfrom datetime import datetime\nimport pytz\nfrom IPython.display import HTML\nimport scipy.stats as stats\nimport matplotlib as mpl\nfrom matplotlib import animation, rc\nfrom matplotlib.patches import Rectangle, Arrow\nimport tensorflow as tf\n\nimport glob\nimport os\n\nimport gc\n\ndef convert_orientation(x):\n    return (x)%360\n\ndef deg_to_rad(deg):\n        return deg*np.pi\/180\n\n\n\nCreate = CreateNFLData()\n\nstart = time.process_time()\n\nWeeks = range(1,18)\n\n#globbed_files = glob.glob(\"..\/input\/revised-data\/*.csv\") #creates a list of all csv files\ndata = []\nfor n in tqdm(Weeks):\n    filename = '..\/input\/revised-data\/week' + str(n) + '.csv'\n    frame = Create.import_data(filename,columns=True,cols=['week', 'gameId', 'playId', 'frameId', 'time', 'nflId', 'displayName', 'jerseyNumber', 'position', 'team', 'X_std', 'Y_std', 'Dir_std', 'dx', 'dy', 'Orientation_std', 's', 'MPH', 'a', 'dis', 'event', 'PlayerTeam', 'yardlineNumber', 'YardLine_std', 'OnOffense', 'TeamOnOffense', 'IsOnOffense', 'closestQB_Id', 'FootDist', 'Targeted'])\n    frame['Code'] = frame['gameId'].astype(str) + \"-\" + frame['playId'].astype(str)\n    plays = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv', usecols=['gameId', 'playId','down', 'yardsToGo','penaltyCodes', 'penaltyJerseyNumbers', 'passResult', 'offensePlayResult', 'playResult', 'epa', 'isDefensivePI','offenseFormation',\t'personnelO',\t'defendersInTheBox',\t'numberOfPassRushers',\t'personnelD',\t'typeDropback','playType'])\n    plays['Code'] = plays['gameId'].astype(str) + \"-\" + plays['playId'].astype(str)\n    plays = plays.set_index('Code')\n    plays = plays.loc[~plays.index.duplicated(keep='first')]\n    Cols = ['playId','down', 'yardsToGo','penaltyCodes', 'penaltyJerseyNumbers', 'passResult', 'offensePlayResult', 'playResult', 'epa', 'isDefensivePI','offenseFormation',\t'personnelO',\t'defendersInTheBox',\t'numberOfPassRushers',\t'personnelD',\t'typeDropback','playType']\n    for col in Cols:\n        frame[col] = frame.Code.map(plays[col])\n    data.append(frame)\n    del plays\n    gc.collect()\n    del frame\n    gc.collect()\n\nWeekData = pd.concat(data).reset_index()\ndel data\ngc.collect()\nFinaldf1 = Create.FrameData(WeekData)\ndel WeekData\ngc.collect()\nFinaldf1.drop(['index','Code','IsOnOffense', 'ball_snap', 'man_in_motion', 'pass_arrived', 'pass_forward', 'pass_outcome_caught', 'play_action', 'run_pass_option'], axis=1, inplace=True)\nprint(Finaldf1.memory_usage().sum() \/ (1024**2))\nObs = Finaldf1.select_dtypes(include=['object']).drop(['time','displayName','position'], axis=1).columns.tolist()\nFinaldf1[Obs] = Finaldf1[Obs].astype('category')\ndel Obs\ngc.collect()\nprint(Finaldf1.memory_usage().sum() \/ (1024**2))","71184f74":"import sys\nimport warnings\nfrom pandas.core.common import SettingWithCopyWarning\n\nwarnings.simplefilter(action=\"ignore\", category=SettingWithCopyWarning)\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nPos = ['OLB','ILB','LB','MLB','FS','SS','S','DB']\n\nEvents = ['ball_snap','play_action','run_pass_option','pass_forward','pass_arrived','None']\n\n\ndf = Finaldf1[(Finaldf1['position'].isin(Pos)) & (Finaldf1['Contains_play_action'] == True) & (Finaldf1['event'].isin(Events)) & (Finaldf1['playType'] == \"play_type_pass\") ]\ndf['Event2'] = np.where(df['event'] == \"ball_snap\",\"ball_snap\",\"Before_snap\")\ndf['Event2'] = np.where((df['After_snap'] == 1) & (df['After_PlayAction'] == 0),\"AfterSnap_BeforePA\",df['Event2'])\ndf['Event2'] = np.where(df['event'] == \"play_action\",\"play_action\",df['Event2'])\ndf['Event2'] = np.where((df['After_PlayAction'] == 1) & (df['After_Throw'] == 0),\"AfterPA_BeforeThrow\",df['Event2'])\ndf['Event2'] = np.where(df['event'] == \"pass_forward\",\"pass_forward\",df['Event2'])\ndf['Event2'] = np.where((df['After_Throw'] == 1) & (df['After_PassArrived'] == 0),\"Ball in the Air\", df['Event2'])\ndf['Event2'] = np.where(df['event'] == \"pass_arrived\",\"pass_arrives\",df['Event2'])\ndf['Event2'] = np.where((df['After_Throw'] == 1) & (df['After_PassArrived'] == 1),\"After Catch\", df['Event2'])\n\ndf['EventCount'] = df.groupby(['gameId','playId','Event2'])['Event2'].transform('count') \/ df.groupby(['gameId','playId'])['nflId'].transform('nunique')\ndf['EventOrder'] = df.groupby(['gameId','playId','Event2'])['frameId'].rank(ascending=True, method='dense').astype(int)\ndf['EventPct'] = df['EventOrder'] \/ df['EventCount']\n\ndf['Partition'] = np.where(df['EventPct'] > (1\/2), \"2nd Phase\", \"1st Phase\")\n\ndf['Group'] = df['Event2'] + \"-\" + df['Partition']\n\nEvents = df.groupby(['gameId','playId','nflId','displayName','position','closestQB_Id','Event2'])['Distfrom_LOS','dx'].agg({'Distfrom_LOS':[('min', 'min')],'dx':[('min', 'min'),('max', 'max') ],}).reset_index(drop=False)\n\ndel df\ngc.collect()\n\n\nEvents.columns = [' '.join(col).strip() for col in Events.columns.values]\ncols = [ 'Distfrom_LOS min','dx min','dx max' ]\nEvents[cols] = Events[cols].applymap(np.float32)\nEvents = Events.set_index(['gameId','playId','nflId','displayName','position','closestQB_Id','Event2'], drop= True).unstack('Event2').reset_index()\nEvents.columns = [' '.join(col).strip() for col in Events.columns.values]\n#Events.columns = Events.columns.str.replace('min' , '')\n#Events.columns = Events.columns.str.replace('max' , '')\nEvents.columns = Events.columns.str.replace(' ' , '_')\nEvents = Events[Events.columns.drop(list(Events.filter(regex='After_Catch')))]\nEvents = Events[Events.columns.drop(list(Events.filter(regex='Before_snap')))]\nEvents = Events[Events.columns.drop(list(Events.filter(regex='Ball_in_the_Air')))]\nEvents = Events[Events.columns.drop(list(Events.filter(regex='pass_arrives')))]\nCols = ['gameId','playId','nflId','displayName','position','closestQB_Id', 'Distfrom_LOS_min_ball_snap',  'Distfrom_LOS_min_AfterSnap_BeforePA', 'Distfrom_LOS_min_play_action', 'Distfrom_LOS_min_AfterPA_BeforeThrow','Distfrom_LOS_min_pass_forward','dx_min_ball_snap','dx_min_AfterSnap_BeforePA', 'dx_max_AfterSnap_BeforePA','dx_min_play_action', 'dx_min_AfterPA_BeforeThrow', 'dx_max_AfterPA_BeforeThrow']\nEvents = Events[Cols]\n#Events['Bite_Distance'] = Events.iloc[:,-4:].min(axis = 1, skipna = True) - Events['Distfrom_LOSball_snap']\nEvents['Bite_Distance'] = Events.iloc[:,-12:-8].min(axis = 1, skipna = True) - Events['Distfrom_LOS_min_ball_snap']\nEvents['Bite_Velocity'] = Events.iloc[:,-7:-3].min(axis = 1, skipna = True)\nEvents['Getback_Velocity'] = Events.iloc[:,-7:-2].max(axis = 1, skipna = True)\nEvents['Bite'] = np.where((Events['Distfrom_LOS_min_pass_forward'] > Events['Distfrom_LOS_min_ball_snap']) & (Events['Bite_Distance'] < 0) & (Events['Getback_Velocity'] > 1),1,0)\nEvents['Pos2'] = np.where(Events['position'].str.contains(\"LB\"), \"LB\",\"Safety\")\ngc.collect()\nEvents","4ddaae54":"from matplotlib.patches import Polygon\nimport matplotlib.patheffects as pe\n#from BDBUtils.Utilities import AnimatePlay\n\ngId = 2018100700\t\npId = 1799\nnflId = 2560713.0\n\nex = Finaldf1.query('gameId == @gId & playId == @pId & nflId == @nflId | gameId == @gId & playId == @pId & OnOffense == True | gameId == @gId & playId == @pId & displayName == \"Football\"')\nex1 = Events.query('gameId == @gId & playId == @pId & nflId == @nflId ').filter(['gameId','playId','displayName','position','Bite_Distance','Bite_Velocity','Getback_Velocity','Bite'],axis=1)\n\ndisplay(HTML(ex1.to_html()))\nanimated_play = AnimatePlay(ex,nflId,Tri = False, MPH = True,Text=\"dx:\",Show='dx',method='single')\nHTML(animated_play.ani.to_jshtml())","0773f921":"Group = Events.groupby(['nflId','displayName','position','Pos2'])['Bite'].agg(['count','sum','mean']).reset_index()\nCols = ['nflId', 'displayName', 'position', 'Pos2', 'count','sum','mean']\nGroup = Group[Cols]\nGroup.columns = ['nflId', 'displayName', 'position', 'Pos2', 'PlayAction_snaps', 'Number_of_Bites', 'BitePct']\nGroup = Group.query('PlayAction_snaps > 15', engine='python').sort_values(by=['BitePct'], ascending=False)#.head(10)\nGroup = Group.query('position != \"S\" & position != \"DB\"').sort_values(by=['BitePct'], ascending=False).reset_index()\nHighTen = Group.head(10)\nLowTen = Group.tail(10)\n\nprint(\"Top 10\")\ndisplay(HTML(HighTen.to_html()))\n\nimport plotly.express as px\n\nfig = px.bar(HighTen, x='displayName', y='BitePct',color=\"position\",template='plotly_dark',title=\"Average Bite % On Play Action -  By Player\",color_discrete_sequence=px.colors.qualitative.T10)\nfig.update_layout(\n    autosize=False,\n    width=800,\n    height=650,\n    yaxis=dict(title_text=\"Bite Percent\"),\n    xaxis=dict(title_text=\"Player\")\n)\nfig.show()","2a598af6":"Alldfs = []\n\nrounds = range(1,20)\n\nfor n in rounds:\n    OLB = Group.query('position == \"OLB\"').sample(n=12)\n    FS = Group.query('position == \"FS\"').sample(n=12)\n    SS = Group.query('position == \"SS\"').sample(n=12)\n    ILB = Group.query('position == \"ILB\"').sample(n=12)\n    LB = Group.query('position == \"LB\"').sample(n=12)\n    MLB = Group.query('position == \"MLB\"').sample(n=12)\n    Plotdf = pd.concat([OLB,FS,SS,ILB,LB,MLB])\n    Alldfs.append(Plotdf)\n\n#Plotdf = pd.concat([OLB,FS,SS,ILB,LB,MLB])\nPlotdf = pd.concat(Alldfs)\nPlotdf = Plotdf.groupby(['position','Pos2'])['BitePct'].agg(['mean']).reset_index()\n\nfig = px.bar(Plotdf, x='position', y='mean',color=\"Pos2\",template='plotly_dark',title=\"Average Bite % On Play Action -  By Position\")\nfig.update_layout(\n    autosize=False,\n    width=800,\n    height=650,\n    yaxis=dict(title_text=\"Bite Percent\"),\n    xaxis=dict(title_text=\"Position\")\n)\nfig.show()","aeaaf608":"Bites = Events.query('Bite == 1 & Bite_Distance < 0', engine='python')\nBites = Bites.groupby(['nflId','displayName','position'])['Bite_Distance','Bite_Velocity','Getback_Velocity'].agg(['mean','count']).reset_index()\nBites.columns = [' '.join(col).strip() for col in Bites.columns.values]\nBites.columns = Bites.columns.str.replace(' ' , '_')\nBites.drop(['Bite_Distance_count','Getback_Velocity_count'], axis=1, inplace=True)\nBites = Bites.query('Bite_Velocity_count > 20').sort_values(by=['Bite_Velocity_mean'], ascending=True)\nHighTen = Bites.head(10)\n\n\nprint(\"Top 10\")\ndisplay(HTML(HighTen.to_html()))\n\nimport plotly.express as px\n\nfig = px.bar(HighTen, x='displayName', y=np.abs(HighTen['Bite_Velocity_mean']),color=\"position\",template='plotly_dark',title=\"Average Absolute Bite Velocity - By Player\",barmode='relative',color_discrete_sequence=px.colors.qualitative.Set2)\n\nfig.update_layout(\n    autosize=False,\n    width=800,\n    height=650,\n    yaxis=dict(title_text=\"Bite Velocity\"),\n    xaxis=dict(title_text=\"Player\")\n)\n\nfig.show()","73e36e71":"Bites = Events.query('Bite == 1')\n\nQBBiteVelocity = Bites.groupby(['closestQB_Id'])['Bite_Velocity'].agg(['count','mean']).reset_index()\n\n\nplayers = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/players.csv', usecols=['nflId','displayName'])\nplayers = players.set_index('nflId')\nplayers = players.loc[~players.index.duplicated(keep='first')]\nQBBiteVelocity[\"Name\"] = QBBiteVelocity.closestQB_Id.map(players['displayName'])\n#QBBiteVelocity = QBBiteVelocity.query('count > 100').sort_values(by=['mean'], ascending=True)\nQBBiteVelocity = QBBiteVelocity.set_index('closestQB_Id')\nQBBiteVelocity = QBBiteVelocity.loc[~QBBiteVelocity.index.duplicated(keep='first')]\n\nQBs = Events.groupby(['closestQB_Id'])['Bite'].agg(['count','sum','mean']).reset_index()\n\n\nplayers = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/players.csv', usecols=['nflId','displayName'])\nplayers = players.set_index('nflId')\nplayers = players.loc[~players.index.duplicated(keep='first')]\nQBs[\"Name\"] = QBs.closestQB_Id.map(players['displayName'])\nQBs[\"Velocity\"] = QBs.closestQB_Id.map(QBBiteVelocity['mean'])\nQBs = QBs.query('count > 100').sort_values(by=['mean'], ascending=False)\n\ndel players\ngc.collect()\n\nfig = px.scatter(QBs, x=np.abs(QBs['mean']), y=np.abs(QBs['Velocity']),color=\"Name\",template='plotly_dark',title=\"Bite Percent vs. Bite Velocity - By Quarterback\",color_discrete_sequence=px.colors.qualitative.Pastel)\n\nfig.update_layout(\n    autosize=False,\n    width=800,\n    height=650,\n    yaxis=dict(title_text=\"Avg. Bite Velocity\"),\n    xaxis=dict(title_text=\"Avg. Bite Percent\")\n)\n\nfig.show()","955012a5":"In the short clip above you will see the Titans vs. Bills week 5 matchup, in which the Titans are on offense attempting a play-action pass.\n\nAt the beginning of the play you will see Linebacker Tremaine Edmunds circled, keep your eye on him throughout the play.\n\nNotice how Edmunds starts to move towards the ball when he sees Mariota showing a handoff, then he realizes it's a pass play and retreats back to his defensive assignment. That split second of making Edmunds commit to the run and making him out-of-position, was exactly what the Titans were hoping for.\n\n\n\n# Measurements\n\nSo for this study we will quantify:\n\n- **Bite Velocity**\n    - Peak \"Biting\" Velocity of the Defender towards the line of scrimmage before they retreat to their defensive assignment\n- **Bite Distance**\n    - Peak \"Biting\" Distance relative to where they were when the ball was snapped\n- **Retreat\/ Get back Velocity**\n    - Peak \"Retreating\" Velocity after they realized it was a pass","38c46f6a":"--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------","45e360d2":"# Calculations\n\nWe will be using the same [revised data](https:\/\/www.kaggle.com\/jdruzzi\/revised-bdb-data), as mentioned in the [previous submission](https:\/\/www.kaggle.com\/jdruzzi\/shadow-cornerback-coverage-analysis). Data is already preprocessed and standardized with additonal features added on.\n\n\nBite Velocity takes into account both **Speed** and **Direction**. So how it will be measured, is by taking the player direction variable, converting it to radians, standardizing it and then we shift direction so that cosine of direction maps to the X axis, and sine of direction maps to the Y axis. Creating 2 new variables:\n\n**dx = PlayerSpeed x cos(Standardized Direction)**\n\n**dy = PlayerSpeed x sin(Standardized Direction)**\n\nThe assumptions are that the defender is either moving towards the line of scrimmage, or away from it. We really only want to know the players velocity relative to the X-axis, so **dx** is our measurement of choice. \n\nSince all data is standardized, the offense will always be moving left to right. In turn, if the defender bites on the play-action, **dx** will always be a negative value and peak bite velocity will be the largest negative **dx** value from the moment the ball is snapped until the ball leaves the QB's hands.\n\n**Peak Bite Velocity**: Min(dx) from moment the ball is snapped until the ball leaves the QB's hands\n\n**Peak Bite Distance**: (X Coordinate of Defender at ball snap) - Min(X) from moment the ball is snapped until the ball leaves the QB's hands\n\n**Peak Retreat \/ Get Back Velocity**: Max(dx) from moment of Play Actopm until the ball leaves the QB's hands","625f19ae":"---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------","a215786b":"# Bite Velocity - by Player\n\nThis tells us which players usually tend to over-commit to the run on play-action","267b0611":"# Bite Percent vs. Bite Velocity - by Quarterback\n\nThis tells us which Quarterbacks are generally more effective at luring a defender in on their play-action play\n\n*Min 100 play-action snaps*","cd675684":"## Tremaine Edmunds\n\n### Did he bite? Yes\n\n### Peak Bite Distance = -2.625\n\n### Peak Bite Velocity = -2.779297\n\n### Peak Retreat \/ Get Back Velocity = 6.441406","4fdc2c92":"# Other Work:\n\n1. [Shadow Cornerback + Coverage Analysis](https:\/\/www.kaggle.com\/jdruzzi\/shadow-cornerback-coverage-analysis)\n\n2. [Defender Bite Velocity on Play-Action](https:\/\/www.kaggle.com\/jdruzzi\/defender-bite-velocity-on-play-action)\n\n3. [Pass Coverage Classification](https:\/\/www.kaggle.com\/jdruzzi\/pass-coverage-classification-80-recall)\n\n4. [Quantifying Press Coverage](https:\/\/www.kaggle.com\/jdruzzi\/quantifying-press-coverage-ability)\n\n5. [Defender Tendencies: One-Cut Routes + Double Moves](https:\/\/www.kaggle.com\/jdruzzi\/defender-tendencies-one-cut-routes-double-moves)\n\n## Data:\n\n[Revised BDB Data](https:\/\/www.kaggle.com\/jdruzzi\/revised-bdb-data)\n","5c149bef":"--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------","a3e9ce4e":"You can see Tremaine Edmunds from our example, is also one of the ones that has a high Bite Velocity","9e29acf7":"# Let's Get Started\n\n![](https:\/\/media.giphy.com\/media\/azdYYsuaNuOoOhxwJZ\/giphy.gif)","a684369b":"# Final Thoughts:\n\nWe've seen that we can quantify, and show defenders that are more susceptible to the play-action, we've also seen that some Quarterbacks were more successful than others at deceiving the defense. I think this can definitely lay the ground work for many possible studies, regarding how to optimize the play-action. \n\n\n# Who will find this submission useful:\n\n- NFL Analytics crew using this method to isolate defenders that are easily deceived, also delve into this work further by determining what characteristics make-up an effective play-action. \n\n- Inspiring Fantasy sites \/ private advanced NFL stat companies to create new metrics around this\n\n- A curious NFL fan","b62fa131":"# Objective:\n\nFor this study, we want to:\n\n- Quantify how much a defender **\"Bites\"**, and what metrics might that involve\n- Determine if some Positions are more deceptible than others\n- Determine if some Individual Defenders are more deceptible than others\n- Determine if some Quarterbacks are more effective at Play-Action than others","46112d74":"# First Look\n\nThanks to tracking data, we can now analyze this type of information! Below you will find the same play as the clip above, except now using the data associated with it\n\nPlease note \"dx\" atop Edmund's player icon. Now you can see in realtime how his velocity changes throughout the play. \n\nBlue Arrows = The direction the player is facing\n\nBlack Arrows = The direction the player is moving","b07ee750":"Middle Linebackers generally tend to bite more on play-action, and Linebackers in general appear to bite more than Safeties.","5bf7091b":"The play-action pass play has been a staple in NFL offenses for many years now. The play usually consists of the Quarterback faking a handoff to the runningback, before passing the ball downfield.\n\nThe main goal of the play-action is to make the defense think that you're running the ball, resulting in some defenders to be out of position on their defensive assignments, and thus allowing the offensive players to get open for a catch.\n\n\n# Bite, Biting, Bit\n\n\n**\"Bite\", \"Biting\", \"Bit\"** are common words to describe an out-of-position defender due to being deceived by the play-action.\n\n** Examples: **\n\n\"Look how hard the Linebacker **bit** on that play-action boot play.\"\n\n\"They keep **biting** on the play-action, let's make sure to emphasize that in the second half.\"","166b85d9":"# Bite Percent - by Position\n\nBite percent was calculated by taking the average from 20 trials of 12 random samples for each position group with replacement.","582e77d5":"--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------","0b7b5286":"-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------","5838484f":"# Bite Percent - by Player\n\nGenerally the only positions that bite on play-action are Linebackers and Safeties, Corners and Defensive Linemen wil be left out of this analysis.\n\n*Criteria: Min of 15 Play Action snaps*","121ef5a6":"![](http:\/\/)","ac236888":"![](https:\/\/ftw.usatoday.com\/wp-content\/uploads\/sites\/90\/2019\/06\/usatsi_11920721.jpg?w=1000&h=600&crop=1)","3501e080":"-------------------------------------------------------------------------------------------------------------------------------------------------------------------------","eb5ea746":"Kyle Emanuel bit on around 74% of play-action snaps in 2018","2838198b":"You can see that Edmund's hit his Peak Bite Velocity around -2.78, before realizing that it is a pass play, then retreats and hits a max Get Back velocity of 6.44.","052b36c5":"# Criteria\n\nIn order for the Defender to be classified as \"Biting\" they must follow these rules:\n\n- Peak Bite Distance must be less than 0\n\n- The Defender's X-Coordinate when the ball is leaving the QB's hand, must be larger than their X-Coordinate at the snap of the ball. Indicating that they bit, and have retreated to their assignment.\n\n- Peak \"Get back\" Velocity must be greater than 1. If we don't account for this, then at times it will appear that the defender bites tremendously, only to find out that they are actually blitzing or covering a RB\/TE in the flat. We want to measure only the defenders that bite hard and retreat back towards their own endzone, as opposed to the sideline.","60738ff4":"#  \ud83c\udfc8 Defender Bite Velocity on Play-Action \ud83c\udfc8"}}