{"cell_type":{"df35dcec":"code","2c345df0":"code","35797130":"code","e2663c2a":"code","308d38b3":"code","7d478007":"code","0afe9425":"code","ec5cb965":"code","3efd96ae":"code","6b22eec4":"code","ec67f5db":"code","e85c75b2":"code","5eea97f6":"code","14cc32ed":"code","d7b850da":"code","79ee9d4a":"code","4ce73d12":"code","c7b7caa7":"code","3e4a5061":"code","c9c1f3f1":"code","dcbe8172":"code","f6d585f8":"code","44578c09":"code","010453b6":"code","2f65b24e":"code","2545e8aa":"code","9df117c0":"code","46929fe0":"code","4b24e7dc":"code","992e3b0c":"markdown","1ab3048b":"markdown","4340d856":"markdown","6d8a5f01":"markdown","701f83a7":"markdown","6fb5556e":"markdown","e5d5fc88":"markdown","0a55b4c9":"markdown","53473ad0":"markdown","eddfb106":"markdown","7705e17d":"markdown","4fac37c2":"markdown","1146ee1a":"markdown","97e12c7c":"markdown","fd07e10e":"markdown","b13ce4bb":"markdown","b11ab806":"markdown"},"source":{"df35dcec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2c345df0":"import os\nimport shutil\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn import metrics\nfrom datetime import datetime\npd.set_option('display.max_columns', 200)","35797130":"import numpy as np\nimport pandas as pd\nimport sklearn\nimport scipy\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report,accuracy_score\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom imblearn.combine import SMOTEENN,SMOTETomek\nfrom sklearn.svm import OneClassSVM\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 14, 8\nRANDOM_SEED = 42\nLABELS = [\"Nobuy\", \"Buy\"]\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly\nimport plotly.figure_factory as ff\nfrom plotly.offline import init_notebook_mode, iplot","e2663c2a":"print(\"Reading training data\")\ndata = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","308d38b3":"def display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000, \"display.max_columns\", 1000): \n        display(df)","7d478007":"data = data.drop(['ID_code'],axis=1)\ntest_ids = test.ID_code.values\ntest = test.drop(['ID_code'],axis=1)\n","0afe9425":"%%time\nfrom imblearn.over_sampling import SMOTE\nsub_non_fraud = data.loc[data.loc[:, 'target'] == 0, :].sample(int(len(data.loc[:, 'target'])\/4 ))\n#sub_non_fraud = data.loc[data.loc[:, 'target'] == 0, :]\ndata_resample = pd.concat([sub_non_fraud, data.loc[data.loc[:, 'target'] == 1, :]])\nX = data_resample.drop(['target'],axis=1)\ny = data_resample.loc[:, \"target\"]\nsm = SMOTETomek()\nX_resampled, y_resampled = sm.fit_sample(X, y)\n","ec5cb965":"# size of X and y after SMOTE\nprint(\"Size of X\", X_resampled.shape)\nprint(\"Size of y\", y_resampled.shape)\nprint(\"Size of positive cases\", y_resampled[y_resampled == 1].shape)","3efd96ae":"from sklearn.model_selection import train_test_split\nX_resampled = pd.DataFrame(X_resampled)\ny_resampled = pd.DataFrame(y_resampled)\n","6b22eec4":"duplicateRowsDF = X_resampled[X_resampled.duplicated()]\nduplicateRowsDF.shape","ec67f5db":"X_resampled = X_resampled.add_prefix('var_')","e85c75b2":"temp_xvar = X_resampled\ntemp_yvar = y_resampled\nX_resampled1 = pd.concat([data.drop(['target'],axis=1), temp_xvar])\ny_resampled1 = pd.concat([data['target'],temp_yvar])","5eea97f6":"X_resampled1.shape","14cc32ed":"data1 = X_resampled1\ndata1['target'] = y_resampled1\n","d7b850da":"data1.shape","79ee9d4a":"data1.drop_duplicates(keep = 'first', inplace = True) ","4ce73d12":"data1.shape","c7b7caa7":"data1.reset_index(drop=True,inplace=True)","3e4a5061":"del X_resampled\ndel y_resampled","c9c1f3f1":"X_resampled = data1.drop(['target'],axis=1)\ny_resampled = data1['target']","dcbe8172":"X = X_resampled.values.astype(float)\ny = np.array(y_resampled)\nX_test = test.values.astype(float)\n","f6d585f8":"\ny = y.flatten()","44578c09":"import os\nimport shutil\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier\nimport math\nimport gc\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler\nNFOLDS = 5\nRANDOM_STATE = 42","010453b6":"import lightgbm as lgb\nparam = {\n    'bagging_freq': 5,\n    'bagging_fraction': 0.335,\n    'boost_from_average':'false',\n    'boost': 'gbdt',\n    'feature_fraction': 0.041,\n    'learning_rate': 0.1,\n    'max_depth': 7,\n    'metric':'auc',\n    'min_data_in_leaf': 80,\n    'min_sum_hessian_in_leaf': 10.0,\n    'num_leaves': 13,\n    'num_threads': 8,\n    'tree_learner': 'serial',\n    'objective': 'binary', \n    'verbosity': -1\n#    'device': 'gpu',\n#    'gpu_platform_id': 0,\n #   'gpu_device_id': 0\n}","2f65b24e":"clfs = []\nfolds = StratifiedKFold(n_splits=NFOLDS, shuffle=True, random_state=RANDOM_STATE)\noof_preds = np.zeros((len(X_resampled), 1))\noof_preds_lgb = np.zeros((len(X_resampled), 1))\ntest_preds = np.zeros((len(test), 1))\ntest_preds_lgb = np.zeros((len(test), 1))\n#del train, test\ngc.collect()","2545e8aa":"val1_x= data.drop(['target'],axis=1).values.astype(float)\nval1_y=data['target']","9df117c0":"c = 0\nfor fold_, (trn_, val_) in enumerate(folds.split(y, y)):\n    print(\"Current Fold: {}\".format(fold_))\n    trn_x, trn_y = X[trn_, :], y[trn_]\n    val_x, val_y = X[val_, :], y[val_]\n#    X_tr, y_tr = augment(trn_x, trn_y)\n#    X_tr = pd.DataFrame(X_tr)\n    trn_data = lgb.Dataset(trn_x, label=trn_y)\n    val_data = lgb.Dataset(val_x, label=val_y)\n    val1_data = lgb.Dataset(val1_x,label=val1_y)\n    \n    clf = lgb.train(param, trn_data, 100000, valid_sets = [trn_data, val_data,val1_data], verbose_eval=500, early_stopping_rounds = 4000)\n #   validation_data=([val_x1,val_x2],val_y)\n #   validation_data.shape\n#    logger = Logger(patience=10, out_path='.\/', out_fn='cv_{}.h5'.format(c))\n#    model.fit(trn_x,trn_y,batch_size=512,epochs=500,verbose=1,callbacks=[logger],validation_data=(val_x,val_y))\n#    model.load_weights('cv_{}.h5'.format(c))\n    val_pred = clf.predict(val_x,num_iteration=clf.best_iteration)\n    test_fold_pred = clf.predict(X_test,num_iteration=clf.best_iteration)\n\n    print(\"AUC = {}\".format(metrics.roc_auc_score(val_y, val_pred)))\n    oof_preds_lgb[val_, :] = val_pred.reshape((-1, 1))\n    test_preds_lgb += test_fold_pred.reshape((-1, 1))\n    del trn_x, trn_y , val_x,val_y\n    gc.collect()\n    \ntest_preds_lgb \/= NFOLDS","46929fe0":"np.mean(test_preds_lgb)","4b24e7dc":"roc_score = metrics.roc_auc_score(y, oof_preds_lgb.ravel())\nprint(\"Overall AUC = {}\".format(roc_score))\n\nprint(\"Saving OOF predictions\")\n#oof_preds = pd.DataFrame(np.column_stack((train_ids, oof_preds.ravel())), columns=['ID_code', 'target'])\n#oof_preds.to_csv('..\/kfolds\/nn__{}.csv'.format( str(roc_score)), index=False)\n\nprint(\"Saving code to reproduce\")\n#shutil.copyfile('..\/model_source\/nn__{}.py'.format( str(roc_score)))\n\n\n#abc =  test_preds_lgb + test_preds_sq_lgb + test_preds_c_lgb +  test_preds_log_lgb\n#abc = abc\/4\nprint(\"Saving submission file\")\nsample = pd.read_csv('..\/input\/sample_submission.csv')\nsample.target = test_preds_lgb.astype(float)\nsample.ID_code = test_ids\nsample.to_csv('submission__smote_lgb_{}.csv'.format(str(roc_score)), index=False)","992e3b0c":"### Merging with original dataset\n\nSome naive variable assignment in tem_var as I was doing lot of experimentation (negelect it)","1ab3048b":"### Resetting the index ","4340d856":"### Overfitting the training data. \n\nI am unable to understand why. \n\nI know it will overfit but so quickly and problem is that the validation set auc also keeps on improving. \n\nWith lower learning rate and high iterations the kernel will run for day. Not ideal for person reliant on kaggle kernels for compute power :)","6d8a5f01":"### Removing the ID_code variable as I will not be using this in training and prediction","701f83a7":"data1.shape","6fb5556e":"### This is the Crux of the code. \n\nI have imported the SMOTE function to oversample my target variable for positive cases. \nI am taking 1\/4 of non-positive cases , i.e. 40k and 20k postive cases. After oversampling I am expecting 40k nonpositive and 40k positive cases\n\nMeaning I have introduced 20k addition positive datapoints just in hope that I am able to classify the positive cases better. \n\nThe resampled cases are stored in X_resampled, y_resampled. ","e5d5fc88":"### Merging with the original dataset. \nI would be merging my resampled dataset with the original dataset. creating 220k training + validation cases with 40k positive cases and 160k negative cases. \n\nTo perform merge I am changing the variable name of the resampled cases so that merging happens in axis=0 ","0a55b4c9":"### Extremely useful display function, that is borrowed from fast.ai modules, it helps analyse the data in full. Thanks to @jeremyhoward","53473ad0":"Changing the resampled cases into pandas dataframe","eddfb106":"## Oversampling Attempt \nThis is another attempt at trying different techniques that might help in this competition. \n\nI have oversampled the positive cases by 20k and then merged the oversampled cases with the original dataset. (Technique - SMOTE)\n\nOne particular thing that is happening with oversampling the positive cases is the model is overfitting drastically. \n\nFor e.g. \n* Lightgbm on normal dataset (no FE) give 90% .\n* But when you oversample the dataset with postive cases (even small oversampling ) causes big overfitting. \n\nThe validation dataset is next to useless when oversampling the training cases, as it will never depict the test scenario. So I was not too reliant on validation dataset. \n\nBut with 20% over sampling. \n* AUC for training data - 100%\n* AUC for validation data - 96%\n* AUC for test data - 84%\n\nNow what intrigues me is that it is difficult to overfit lightgbm model for this dataset. But with adding little impurities the model starts to overfit immediately. \nMy hypothesis is that the oversampled cases (produced through SMOTE (I guess using nn approach)) are linked with the input in such a way that it helps classify the training data. But since we cannot create the synthetic data for the test cases it underperforms. \n\nThe code might be little assorted but I will try to put comments where ever necessary. I hope it might be helpful to some, who may make some sense out of it and probably help improve their LB\n","7705e17d":"### Kaggle wrote these lines for me :)","4fac37c2":"### Verifiying whether the oversampling has happened correctly by checking the size","1146ee1a":"### Validating duplicates in resampled cases\n\nNo duplicate cases are created ","97e12c7c":"### Removing dupicates \n\nMy resmapled dataset had 80k cases. and original dataset had 200k cases. 60k cases are duplicate that needs to be removed. \n\nSome non pythonic code :) to perform this deletion ","fd07e10e":"### Reading the input","b13ce4bb":"### Loading the libraries ","b11ab806":"### Training with kfold 5. \nThe below code has been taken from @abhishekthakur's framework for competition. \nI guess everyone will be familiar with the code, but its the output that is interesting"}}