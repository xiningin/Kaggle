{"cell_type":{"f04a79b9":"code","3fbbed7b":"code","8ad2a8ef":"code","b279a297":"code","54375434":"code","1c06a342":"code","a97db7ac":"markdown","1d758691":"markdown","085b01de":"markdown","14632d9a":"markdown","0f1e1a19":"markdown"},"source":{"f04a79b9":"%%writefile risk_averse_greedy.py\n\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col\nimport numpy as np\n\ndef get_nearest_cells(x,y):\n    # returns all cells reachable from the current one\n    result = []\n    for i in (-1,+1):\n        result.append(((x+i+7)%7, y))\n        result.append((x, (y+i+11)%11))\n    return result\n\ndef find_closest_food(table):\n    # returns the first step toward the closest food item\n    new_table = table.copy()\n    \n    updated = False\n    for roll, axis, code in [\n        (1, 0, 1),\n        (-1, 0, 2),\n        (1, 1, 3),\n        (-1, 1, 4)\n    ]:\n\n        shifted_table = np.roll(table, roll, axis)\n        \n        if (table == -2).any() and (shifted_table[table == -2] == -3).any(): # we have found some food at the first step\n            return code\n        else:\n            mask = np.logical_and(new_table == 0,shifted_table == -3)\n            if mask.sum() > 0:\n                updated = True\n            new_table += code * mask\n        if (table == -2).any() and shifted_table[table == -2][0] > 0: # we have found some food\n            return shifted_table[table == -2][0]\n        \n        # else - update new reachible cells\n        mask = np.logical_and(new_table == 0,shifted_table > 0)\n        if mask.sum() > 0:\n            updated = True\n        new_table += shifted_table * mask\n\n    # if we updated anything - continue reccurison\n    if updated:\n        return find_closest_food(new_table)\n    # if not - return some step\n    else:\n        return table.max()\n\ndef agent(obs_dict, config_dict):\n    \"\"\"This agent always moves toward observation.food[0] but does not take advantage of board wrapping\"\"\"\n    observation = Observation(obs_dict)\n    configuration = Configuration(config_dict)\n    player_index = observation.index\n    player_goose = observation.geese[player_index]\n    player_head = player_goose[0]\n    player_row, player_column = row_col(player_head, configuration.columns)\n\n\n    table = np.zeros((7,11))\n    # 0 - emply cells\n    # -1 - obstacles\n    # -2 - food\n    # -3 - head\n    # 1,2,3,4 - reachable on the current step cell, number is the id of the first step direction\n    \n    legend = {\n        1: 'SOUTH',\n        2: 'NORTH',\n        3: 'EAST',\n        4: 'WEST'\n    }\n    \n    # let's add food to the map\n    for food in observation.food:\n        x,y = row_col(food, configuration.columns)\n        table[x,y] = -2 # food\n        \n    # let's add all cells that are forbidden\n    for i in range(4):\n        opp_goose = observation.geese[i]\n        if len(opp_goose) == 0:\n            continue\n        for n in opp_goose[:-1]:\n            x,y = row_col(n, configuration.columns)\n            table[x,y] = -1 # forbidden cells\n        if i != player_index:\n            x,y = row_col(opp_goose[0], configuration.columns)\n            possible_moves = get_nearest_cells(x,y) # head can move anywhere\n            for x,y in possible_moves:\n                table[x,y] = -1 # forbidden cells\n\n        \n    # let's add head position\n    x,y = row_col(player_head, configuration.columns)\n    table[x,y] = -3\n    \n    # the first step toward the nearest food\n    step = int(find_closest_food(table))\n    \n    # if there is not available steps make random step\n    if step not in [1,2,3,4]:\n        step = np.random.randint(4) + 1\n    \n    return legend[step]","3fbbed7b":"%%writefile greedyhoarder.py\n\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col\nfrom random import choice, sample, seed, randint\n\ndef random_agent():\n    return choice([action for action in Action]).name\n\n\ndef translate(position: int, direction: Action, columns: int, rows: int):\n    row, column = row_col(position, columns)\n    row_offset, column_offset = direction.to_row_col()\n    row = (row + row_offset) % rows\n    column = (column + column_offset) % columns\n    return row * columns + column\n\n\ndef adjacent_positions(position: int, columns: int, rows: int):\n    return [\n        translate(position, action, columns, rows)\n        for action in Action\n    ]\n\n\ndef min_distance(position: int, food: [int], columns: int):\n    row, column = row_col(position, columns)\n    return min(\n        abs(row - food_row) + abs(column - food_column)\n        for food_position in food\n        for food_row, food_column in [row_col(food_position, columns)]\n    )\n\nlast_pos = -1\n\ndef agent(observation, configuration):\n    global last_pos\n    observation = Observation(observation)\n    configuration = Configuration(configuration)\n    rows, columns = configuration.rows, configuration.columns\n    \n    food = observation.food\n    geese = observation.geese\n    \n    player_index = observation.index\n    my_goose = geese[player_index]\n    my_tail = [my_goose[-1]]\n    position = geese[observation.index][0]\n    \n    opponents = [\n        goose\n        for index, goose in enumerate(geese)\n        if index != observation.index and len(goose) > 0\n    ]\n\n    # Don't move adjacent to any heads\n    head_adjacent_positions = {\n        opponent_head_adjacent\n        for opponent in opponents\n        for opponent_head in [opponent[0]]\n        for opponent_head_adjacent in adjacent_positions(opponent_head, columns, rows)\n    }\n    # Don't move into any bodies\n    bodies = {position for goose in geese for position in goose[0:-1]}\n    # Don't move into tails of heads that are adjacent to food\n    tails = {\n        opponent[-1]\n        for opponent in opponents\n        for opponent_head in [opponent[0]]\n        if any(\n            adjacent_position in food\n            # Head of opponent is adjacent to food so tail is not safe\n            for adjacent_position in adjacent_positions(opponent_head, columns, rows)\n        )\n    }\n\n    # Move to the closest food\n    position = geese[observation.index][0]\n    if len(geese[player_index]) > 8: #HOARDING POWER\n        factions = {\n        action: min_distance(new_position, food, columns)\n        for action in Action\n        for new_position in [translate(position, action, columns, rows)]\n        if (\n            new_position not in last_pos and\n            new_position not in bodies and\n            new_position not in tails and\n            new_position not in food\n        )\n        if (\n            new_position not in (food and my_tail)\n        )\n        }\n        if any(factions):\n            new_factions = {\n            action: min_distance(new_position, food, columns)\n            for action in Action\n            for new_position in [translate(position, action, columns, rows)]\n            if (\n                new_position not in last_pos and\n                new_position not in bodies and\n                new_position not in tails and\n                new_position not in food and\n                new_position not in head_adjacent_positions\n            )\n            if (\n                new_position not in (food and my_tail)\n            )\n            }\n            if any(new_factions):\n                last_pos = {geese[player_index][0]}\n                step = min(new_factions, key=new_factions.get)\n                #print(step)\n                steps = [action for action in new_factions.keys() if(new_factions[action] == min(new_factions.values()))]\n                #print(steps)\n                seed(None,randint(1,2))\n                step = choice(steps)\n                #print(new_factions)\n\n                #print(step)\n                #print(step.name,\"food hoarding\")\n                seed(1)\n                return step.name\n    actions = {\n        action: min_distance(new_position, food, columns)\n        for action in Action\n        for new_position in [translate(position, action, columns, rows)]\n        if (\n            new_position not in head_adjacent_positions and\n            new_position not in bodies and\n            new_position not in tails\n        )\n    }\n\n    if any(actions):\n        last_pos = {geese[player_index][0]}\n        return min(actions, key=actions.get).name\n\n    return random_agent()","8ad2a8ef":"%%writefile besthoarder.py\n\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col\nfrom random import choice, sample, randint, seed\n\nimport time\n\ndef random_agent():\n    seed(None,randint(1,2))\n    step = choice([action for action in Action])\n    seed(1)\n    print(step.name,\"bugged\")\n    return step.name\n\n\ndef translate(position: int, direction: Action, columns: int, rows: int):\n    row = position \/\/ columns\n    column = position % columns\n    row_offset, column_offset = direction.to_row_col()\n    row = (row + row_offset) % rows\n    column = (column + column_offset) % columns\n    return row * columns + column\n\n\ndef adjacent_positions(position: int, columns: int, rows: int):\n    return [\n        translate(position, action, columns, rows)\n        for action in Action\n    ]\n\n\ndef min_distance(position: int, food: [int], columns: int):\n    row, column = row_col(position, columns)\n    return min(\n        abs(row - food_row) + abs(column - food_column)\n        for food_position in food\n        for food_row, food_column in [row_col(food_position, columns)]\n    )\n\nlast_pos = {}\n\ndef agent(observation, configuration):\n    global last_pos\n    try:\n        print(\"===ROUND \",observation.step+1,\"===\")\n        time_start = time.perf_counter()\n        observation = Observation(observation)\n        configuration = Configuration(configuration)\n        rows, columns = configuration.rows, configuration.columns\n\n        food = observation.food\n        geese = observation.geese\n        player_index = observation.index\n        my_goose = geese[player_index]\n        my_tail = [my_goose[-1]]\n        position = geese[observation.index][0]\n        \n        print(\"At row: \",position\/\/11,\" column: \", position%11,\" food at: \", food)\n        \n        # Don't move into any bodies\n        bodies = {position for goose in geese for position in goose[0:-1]}\n        # Opponent definition\n        opponents = [\n            goose\n            for index, goose in enumerate(geese)\n            if index != observation.index and len(goose) > 0\n        ]\n        # Don't move into tails of heads that are adjacent to food\n        tails = {\n            opponent[-1]\n            for opponent in opponents\n            for opponent_head in [opponent[0]]\n            if any(\n                adjacent_position in food\n                # Head of opponent is adjacent to food so tail is not safe\n                for adjacent_position in adjacent_positions(opponent_head, columns, rows)\n            )\n        }        \n        # Don't move adjacent to any heads\n        head_adjacent_positions = {\n            opponent_head_adjacent\n            for opponent in opponents\n            for opponent_head in [opponent[0]]\n            for opponent_head_adjacent in adjacent_positions(opponent_head, columns, rows)\n        }\n        \n        myself = [my_goose]\n\n        keep_dist = {\n            keep_dist\n            for head_adjacent_position in head_adjacent_positions\n            for keep_dist in adjacent_positions(head_adjacent_position, columns, rows)\n        }\n        \n        \"\"\"Hard coding movement here\"\"\"\n        \n        #MOVEMENT TIME\n        if len(geese[player_index]) > 3 and len(geese[player_index]) < 9: #TURTLE POWER\n            tactions = [\n            action\n            for action in Action\n            for new_position in [translate(position, action, columns, rows)]\n            if (\n                new_position in my_tail and\n                new_position not in last_pos and\n                new_position not in food #Checking for picking up food, which would kill my goose \n            )\n            ]\n            if any(tactions): # CHeck if TURTLE POWER is valid\n                new_tactions = [\n                action\n                for action in Action\n                for new_position in [translate(position, action, columns, rows)]\n                if (\n                    new_position in my_tail and\n                    new_position not in last_pos and\n                    new_position not in food and\n                    new_position not in head_adjacent_positions #Looking for goose walking into my tail\n                )\n                ]\n                if any(new_tactions):\n                    last_pos = {geese[player_index][0]}\n                    print(new_tactions[0].name, \"turtling\")\n                    seed(1)\n                    return new_tactions[0].name\n            \n        # Checking if viable steps exist in next 4 turns\n        possible_actions = {\n            action: new_position5\n            for action in Action\n            for new_position1 in [translate(position, action, columns, rows)]\n            if (\n                new_position1 not in last_pos and\n                new_position1 not in bodies and\n                new_position1 not in tails\n            )\n            for action2 in Action\n            for new_position2 in [translate(new_position1, action2, columns, rows)]\n            if (\n                new_position2 not in [geese[player_index][0]] and\n                new_position2 not in bodies and\n                new_position2 not in tails\n            )\n            for action3 in Action\n            for new_position3 in [translate(new_position2, action3, columns, rows)]\n            if (\n                new_position3 not in [new_position1] and\n                new_position3 not in bodies and\n                new_position3 not in tails\n            )\n            for action4 in Action\n            for new_position4 in [translate(new_position3, action4, columns, rows)]\n            if (\n                new_position4 not in [new_position2] and\n                new_position4 not in bodies and\n                new_position4 not in tails\n            )\n            for action5 in Action\n            for new_position5 in [translate(new_position4, action5, columns, rows)]\n            if (\n                new_position5 not in [new_position3] and\n                new_position5 not in bodies and\n                new_position5 not in tails\n            )\n        }\n        \n        #Food turtling\/Food hoarding\/Passive Aggro Geese whatever you call it\n        \n        if len(geese[player_index]) > 7:\n            factions = {\n            action: min_distance(new_position, food, columns)\n            for action in possible_actions\n            for new_position in [translate(position, action, columns, rows)]\n            if (\n                new_position not in last_pos and\n                new_position not in bodies and\n                new_position not in tails and\n                new_position not in food # Will avoid food and circle around it\n            )\n            if (\n                new_position not in (food and my_tail)\n            )\n            }\n            if any(factions):\n                new_factions = {\n                action: min_distance(new_position, food, columns)\n                for action in possible_actions\n                for new_position in [translate(position, action, columns, rows)]\n                if (\n                    new_position not in last_pos and\n                    new_position not in bodies and\n                    new_position not in tails and\n                    new_position not in food and\n                    new_position not in head_adjacent_positions\n                )\n                if (\n                    new_position not in (food and my_tail)\n                )\n                }\n                if any(new_factions):\n                    last_pos = {geese[player_index][0]}\n                    step = min(new_factions, key=new_factions.get)\n                    print(step)\n                    steps = [action for action in new_factions.keys() if(new_factions[action] == min(new_factions.values()))]\n                    print(steps)\n                    seed(None,randint(1,2))\n                    step = choice(steps)\n                    print(new_factions)\n                    \n                    print(step)\n                    print(step.name,\"food hoarding\")\n                    seed(1)\n                    return step.name\n            \n        #print(possible_actions)\n        actions = {\n            action: min_distance(new_position, food, columns)\n            for action in possible_actions\n            for new_position in [translate(position, action, columns, rows)]\n            if (\n                new_position not in last_pos and\n                new_position not in bodies and\n                new_position not in tails\n            )\n            if (\n                new_position not in (food and my_tail)\n            )\n        }\n        if any(actions):\n            new_actions = {\n                action: min_distance(new_position, food, columns)\n                for action in possible_actions\n                for new_position in [translate(position, action, columns, rows)]\n                if (\n                    new_position not in last_pos and\n                    new_position not in bodies and\n                    new_position not in tails and\n                    new_position not in head_adjacent_positions\n                )\n                if (\n                    new_position not in (food and my_tail)\n                )\n            }\n            if any(new_actions):\n                actions = new_actions \n\n        #print(actions, '*')\n        last_pos = {geese[player_index][0]}\n\n        time_taken = time.perf_counter() - time_start\n        #print(actions, time_taken)\n\n        if any(actions):\n            step = min(actions, key=actions.get)\n            steps = [action for action in actions.keys() if(actions[action] == min(actions.values()))]\n            seed(None,randint(1,2))\n            step = choice(steps)\n            print(step.name,\"norm\")\n            seed(1)\n            return step.name\n        \n    except Exception as e:\n        print(\"ERROR:\",e)\n        return random_agent()\n    \n    return random_agent()","b279a297":"import collections\n\nfrom kaggle_environments import evaluate, make, utils\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sn","54375434":"env = make(\"hungry_geese\", debug=False) # You dont want to see the logs","1c06a342":"env.reset()\nenv.run(\n    [\n        \"besthoarder.py\", #white\n        \"greedyhoarder.py\",\n        \"risk_averse_greedy.py\",\n        \"greedyhoarder.py\",\n    ],\n)\n(env.render(mode=\"ipython\", width=800, height=700))","a97db7ac":"# Agent: Risk Averse Greedy","1d758691":"So previously I discussed about aggressive agents on https:\/\/www.kaggle.com\/c\/hungry-geese\/discussion\/216976\n\nThis is my current take on it, I think it might be useful for those who are testing their ML agents out there.","085b01de":"# Agent: Greedy + food hoarding","14632d9a":"I havent been around for long after Kaggle updated their environment. Something does seem a bit different now, will look into it when I have the time. For the time though, enjoy the C-shaped traps that is made when avoiding food.","0f1e1a19":"# Agent: Hard coded Food hoarder"}}