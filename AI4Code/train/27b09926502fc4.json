{"cell_type":{"e28dc142":"code","15e0f422":"code","13f93626":"code","3496090f":"code","2dfefcd1":"code","fc90fac0":"code","dea51a9f":"code","8ff3a065":"code","a603f2cf":"code","5534c925":"code","99f8b937":"code","9491ad2a":"code","585abd2b":"code","b4d6e891":"code","568a7961":"code","3545cfa3":"code","c060dff2":"code","1c83bf99":"code","c9120077":"code","2903f347":"code","090f06de":"code","d3fe561c":"code","3991c883":"code","7266849b":"code","90e679c2":"code","c4c3f772":"code","21b17cfa":"code","198f4207":"code","e856b408":"code","9243517b":"code","a5dc14d9":"code","90297ec9":"code","ef3281f6":"code","21cdb121":"code","9cecec42":"code","0948cf42":"code","2660807c":"code","0b089250":"code","d6858f1e":"code","120c28a2":"code","0ce19ac2":"code","3edc5e21":"code","b11e3e07":"code","7cce7e85":"code","8c2a0577":"code","e7061bf7":"code","bdc55261":"code","e69e2058":"code","6edfce02":"code","bab1b665":"code","8a88c2bf":"code","843fcdfa":"code","2c624b1d":"code","011c5636":"code","d3693f3a":"code","7f5f3e20":"code","cffcefdf":"code","963274b7":"code","09fdb61c":"code","c5348c80":"code","76f36b23":"code","3161cb94":"code","d366c3eb":"code","491ac10f":"code","a517fa17":"code","b3cc8744":"code","15380c50":"code","b0e7d5c2":"code","fcbbee03":"code","99d9b690":"code","4e2d6cba":"code","36a36fa8":"code","6b2c10a8":"code","edfe9135":"code","c6e1a55b":"code","8d6a44ca":"code","de718e66":"code","df37a527":"code","7736e04c":"code","3185b7d2":"code","5b7ddfed":"code","d4dcf0f8":"code","b125238b":"code","827a40b1":"code","774a1266":"code","234053de":"code","642f68b0":"code","9a57ce62":"code","173011cc":"code","cbd7e7c9":"code","09cd9269":"code","42d25e2e":"code","9a2f97d6":"code","55afa5fe":"code","b7c2509e":"code","a3c6f4c1":"code","27e51848":"code","edc58305":"code","3ceb4c86":"code","4138037a":"code","7900cc08":"code","02060370":"code","20d45f17":"code","bffdbe97":"code","56a3eb68":"code","f3b34a2c":"code","00090689":"code","9d3de2f7":"code","e5ceeab6":"code","3744cbb5":"code","a64e9076":"code","6675ab7f":"code","ed4e994e":"code","9356c59f":"code","11630270":"code","bf5dc3a7":"markdown","3e96ffe4":"markdown","01323aed":"markdown","0f2591f3":"markdown","d3a9111c":"markdown","f57a969e":"markdown","22a28844":"markdown","881d4685":"markdown","f2c991eb":"markdown","10fc5121":"markdown","be2026a4":"markdown","7ce11cd1":"markdown","1e6a8950":"markdown","1b7b2e0d":"markdown","12962494":"markdown","e2bd93ef":"markdown","5a83bcfa":"markdown","91884d25":"markdown","7d95e607":"markdown","88592b65":"markdown","40236e26":"markdown","e3a2c63e":"markdown","bfe8647c":"markdown","39199247":"markdown","b0edccb7":"markdown","411a4f87":"markdown","7ff9b69c":"markdown","8971812f":"markdown"},"source":{"e28dc142":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","15e0f422":"!pip install pycountry_convert","13f93626":"import json\n# datetime oprations\nfrom datetime import timedelta\n# to get web contents\nfrom urllib.request import urlopen\n# basic visualization package\nimport matplotlib.pyplot as plt\n# advanced ploting\nimport seaborn as sns\n \nimport datetime as dt\nimport requests\nimport sys\n\n# plotly\nfrom plotly import tools, subplots\nimport pycountry\nimport pycountry_convert as pc\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\n%matplotlib inline\n\n# for offline ploting\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n","3496090f":"df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')","2dfefcd1":"df.head()","fc90fac0":"#verileri d\u00fczeltme\ndf.rename(columns={'ObservationDate':'Date','Province\/State':'Province_State',\n                   'Country\/Region':'Country_Region','Confirmed':'ConfirmedCases',\n                   'Deaths':'Fatalities'},inplace=True)\ndf.loc[df['Country_Region']=='Mainland China','Country_Region']='China'\ndf['Date'] = pd.to_datetime(df['Date'],format='%m\/%d\/%Y')\ndf['Day'] = df.Date.dt.dayofyear\ndf['cases_lag'] = df.groupby(['Country_Region','Province_State'])['ConfirmedCases'].shift(1) #\u00f6nceki g\u00fcn\u00fcn vaka say\u0131s\u0131\ndf['deaths_lag'] = df.groupby(['Country_Region','Province_State'])['Fatalities'].shift(1) #\u00f6nceki g\u00fcn\u00fcn \u00f6l\u00fcm say\u0131s\u0131\ndf['Daily Cases'] = df['ConfirmedCases'] - df['cases_lag']  \ndf['Daily Deaths'] = df['Fatalities'] - df['deaths_lag']         ","dea51a9f":"class country_utils():\n    def __init__(self):\n        self.d = {}\n    \n    def get_dic(self):\n        return self.d\n    \n    def get_country_details(self,country):\n        \"\"\"Returns country code(alpha_3) and continent\"\"\"\n        try:\n            country_obj = pycountry.countries.get(name=country)\n            if country_obj is None:\n                c = pycountry.countries.search_fuzzy(country)\n                country_obj = c[0]\n            continent_code = pc.country_alpha2_to_continent_code(country_obj.alpha_2)\n            continent = pc.convert_continent_code_to_continent_name(continent_code)\n            return country_obj.alpha_3, continent\n        except:\n            if 'Congo' in country:\n                country = 'Congo'\n            elif country == 'Diamond Princess' or country == 'Laos' or country == 'MS Zaandam'\\\n            or country == 'Holy See' or country == 'Timor-Leste':\n                return country, country\n            elif country == 'Korea, South' or country == 'South Korea':\n                country = 'Korea, Republic of'\n            elif country == 'Taiwan*':\n                country = 'Taiwan'\n            elif country == 'Burma':\n                country = 'Myanmar'\n            elif country == 'West Bank and Gaza':\n                country = 'Gaza'\n            else:\n                return country, country\n            country_obj = pycountry.countries.search_fuzzy(country)\n            continent_code = pc.country_alpha2_to_continent_code(country_obj[0].alpha_2)\n            continent = pc.convert_continent_code_to_continent_name(continent_code)\n            return country_obj[0].alpha_3, continent\n    \n    def get_iso3(self, country):\n        return self.d[country]['code']\n    \n    def get_continent(self,country):\n        return self.d[country]['continent']\n    \n    def add_values(self,country):\n        self.d[country] = {}\n        self.d[country]['code'],self.d[country]['continent'] = self.get_country_details(country)\n    \n    def iso3(self,country):\n        if country in self.d.keys():\n            return self.get_iso3(country)\n        else:\n            self.add_values(country)\n            return self.get_iso3(country)\n        \n    def fetch_continent(self,country):\n        if country in self.d.keys():\n            return self.get_continent(country)\n        else:\n            self.add_values(country)\n            return self.get_continent(country)","8ff3a065":"df.ConfirmedCases = np.abs(df.ConfirmedCases) #negatif bir de\u011fer varsa onu d\u00fczeltiyoruz\ndf1 = df.copy() #veri setini kopyal\u0131yoruz\ndate = df1.Date.max() #en g\u00fcncel tarihi al\u0131yoruz\ndf1 = df1[df1['Date']==date]\nobj = country_utils()\ndf1.Province_State.fillna('',inplace=True) #NA,NaN de\u011ferlerini bo\u015flukla dolduruyoruz\ndf1['continent'] = df1.apply(lambda x: obj.fetch_continent(x['Country_Region']), axis=1) #\u00fclkeleri k\u0131talara ay\u0131r\u0131yoruz\ndf1[\"world\"] = \"World\" # hepsini kapsayan tek bir k\u00f6k d\u00fc\u011f\u00fcm\nfig = px.treemap(df1, path=['world', 'continent', 'Country_Region'], values='ConfirmedCases',\n                  color='ConfirmedCases', hover_data=['Country_Region'],\n                  color_continuous_scale='BuPu', title='COVID 19 Vakalar\u0131n\u0131n D\u00fcnya \u00c7ap\u0131nda Da\u011f\u0131l\u0131m\u0131')\nfig.update_layout(width=750,template='seaborn')\nfig.show()","a603f2cf":"dfContinentt = df1.groupby(['continent'], as_index=False)['ConfirmedCases','Fatalities','Recovered'].sum()\ndfContinentt['Recovered'][9] = 23248183.0\ndfContinentt['Recovered'][3] = 23739725.0\ndfContinentt['ActiveCases'] = dfContinentt['ConfirmedCases']-dfContinentt['Fatalities']-dfContinentt['Recovered']\ndfContinentt.index = dfContinentt.index.set_names(['continent'])\ndfContinentt = dfContinentt.reset_index(drop=True)\ndfContinentt = dfContinentt.melt(id_vars=['continent','ConfirmedCases'],var_name= 'kind', value_name='Cases')","5534c925":"dfContinentt = dfContinentt[dfContinentt.continent != 'Macau' ]\ndfContinentt = dfContinentt[dfContinentt.continent != 'Holy See']\ndfContinentt = dfContinentt[dfContinentt.continent != 'Ivory Coast']\ndfContinentt = dfContinentt[dfContinentt.continent != 'Timor-Leste']\ndfContinentt = dfContinentt[dfContinentt.continent != 'MS Zaandam' ]\ndfContinentt = dfContinentt[dfContinentt.continent != 'Diamond Princess']\ndfContinentt = dfContinentt[dfContinentt.continent != 'Laos']","99f8b937":"dfContinentt","9491ad2a":"fig = px.sunburst(dfContinentt, path=['continent','ConfirmedCases','kind'], values='Cases',title='Continents - Total Cases, Fatalities - Active Cases - Recovered,',color='Cases', color_continuous_scale='amp')\nfig.update_layout(width=780,height=750, template='plotly')\nfig.show()\n#range_color=[0,35000000]","585abd2b":"def daily_measures(df): #g\u00fcnl\u00fck \u00f6l\u00e7\u00fcmler\n    df.loc[0,'Daily Cases'] = df.loc[0,'ConfirmedCases']\n    df.loc[0,'Daily Deaths'] = df.loc[0,'Fatalities']\n    for i in range(1,len(df)):\n        df.loc[i,'Daily Cases'] = df.loc[i,'ConfirmedCases'] - df.loc[i-1,'ConfirmedCases']  #G\u00fcnl\u00fck vaka say\u0131lar\u0131n\u0131 bulmak i\u00e7in o g\u00fcnk\u00fc toplam vaka say\u0131s\u0131ndan \u00f6nceki g\u00fcn\u00fcn onaylanan vaka say\u0131s\u0131n\u0131 \u00e7\u0131kar\u0131yoruz.\n        df.loc[i,'Daily Deaths'] = df.loc[i,'Fatalities'] - df.loc[i-1,'Fatalities']\n    df.loc[0,'Daily Cases'] = 0 #Daha \u00f6nceki vaka say\u0131s\u0131n\u0131 g\u00fcnl\u00fck olarak bilmedi\u011fimiz i\u00e7in ilk sat\u0131rdaki de\u011ferleri 0 a e\u015fitliyoruz.\n    df.loc[0,'Daily Deaths'] = 0\n    return df","b4d6e891":"dfWorld = df.copy()\ndfWorld = dfWorld.groupby('Date',as_index=False)['ConfirmedCases','Fatalities','Daily Cases','Daily Deaths'].sum() #D\u00fcnyadaki t\u00fcm vaka say\u0131lar\u0131n\u0131 ve \u00f6l\u00fcmleri tarihe g\u00f6re (g\u00fcnl\u00fck) grupluyoruz.\ndfWorld = daily_measures(dfWorld) #d\u00fcnyadaki g\u00fcnl\u00fck vaka say\u0131lar\u0131n\u0131 al\u0131yoruz\ndfWorld['Cases:5-Day Moving Average'] = dfWorld['Daily Cases'].rolling(5).mean() #Vaka say\u0131s\u0131n\u0131n 5 g\u00fcnl\u00fck hareketli ortalamas\u0131n\u0131 al\u0131yoruz\ndfWorld['Deaths:5-Day Moving Average'] = dfWorld['Daily Deaths'].rolling(5).mean() #\u00d6l\u00fcm say\u0131s\u0131n\u0131n 5 g\u00fcnl\u00fck hareketli ortalamas\u0131n\u0131 al\u0131yoruz","568a7961":"dfWorld.head(15)","3545cfa3":"fig2 = go.Figure(data=[\n    go.Bar(name='Vakalar', x=dfWorld['Date'], y=dfWorld['Daily Cases']),\n    go.Bar(name='\u00d6l\u00fcmler', x=dfWorld['Date'], y=dfWorld['Daily Deaths'])\n])","c060dff2":"#Hareketli ortalama \u00e7izgimizi ekleyiyoruz\nfig2.add_trace(go.Scatter(name='Vakalar: 5 G\u00fcnl\u00fck Hareketli Ortalama',x=dfWorld['Date'],y=dfWorld['Cases:5-Day Moving Average'],marker_color='white'))\nfig2.add_trace(go.Scatter(name='\u00d6l\u00fcmler: 5 G\u00fcnl\u00fck Hareketli Ortalama',x=dfWorld['Date'],y=dfWorld['Deaths:5-Day Moving Average'],marker_color='magenta'))\n#Grafi\u011fi daha okunabilir hale getirme\nfig2.update_layout(barmode='overlay', title='D\u00fcnya \u00c7ap\u0131nda G\u00fcnl\u00fck Vaka ve \u00d6l\u00fcm Say\u0131s\u0131',hovermode='x',\n                template='plotly_dark', width=780,xaxis=dict(mirror=True,linewidth=1,linecolor='white',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=1,linecolor='aliceblue'),legend=dict(orientation='h',x=0.1,y=-0.2))\nfig2.show()","1c83bf99":"# Create figure with secondary y-axis\nfig5 = make_subplots(specs=[[{\"secondary_y\": True}]])\n# Add traces\nfig5.add_trace(go.Scatter(x=dfWorld['Date'], y=dfWorld['Cases:5-Day Moving Average'], name=\"Vakalar: 5 G\u00fcnl\u00fck Hareketli Ortalama\",marker_color='white'), secondary_y=False,)\nfig5.add_trace(go.Scatter(x=dfWorld['Date'], y=dfWorld['Deaths:5-Day Moving Average'], name=\"\u00d6l\u00fcmler: 5 G\u00fcnl\u00fck Hareketli Ortalama\",marker_color='red'), secondary_y=True,)\nfig5.update_layout(title_text=\"D\u00fcnya \u00c7ap\u0131nda G\u00fcnl\u00fck Vaka ve \u00d6l\u00fcm Say\u0131s\u0131n\u0131n \u0130lerleyi\u015fi\")\nfig5.update_xaxes(title_text=\"Tarih\")\nfig5.update_yaxes(title_text=\"<b>Vakalar<\/b> \", secondary_y=False)\nfig5.update_yaxes(title_text=\"<b>\u00d6l\u00fcmler<\/b> \", secondary_y=True, tickfont=dict(\n            color=\"red\" ),titlefont=dict(color=\"red\"))\nfig5.update_layout(hovermode='x', width=780, xaxis=dict(mirror=True,linewidth=1,linecolor='white',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=1,linecolor='aliceblue'),legend=dict(orientation='h',x=0.1,y=-0.2))\nfig5.show()","c9120077":"dfWorld['Cases:21-Day Moving Average'] = dfWorld['Daily Cases'].rolling(21).mean() #Vaka say\u0131s\u0131n\u0131n 5 g\u00fcnl\u00fck hareketli ortalamas\u0131n\u0131 al\u0131yoruz\ndfWorld['Deaths:21-Day Moving Average'] = dfWorld['Daily Deaths'].rolling(21).mean() #\u00d6l\u00fcm say\u0131s\u0131n\u0131n 5 g\u00fcnl\u00fck hareketli ortalamas\u0131n\u0131 al\u0131yoruz","2903f347":"# Create figure with secondary y-axis\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n# Add traces\nfig.add_trace(go.Scatter(x=dfWorld['Date'], y=dfWorld['Cases:21-Day Moving Average'], name=\"Vakalar: 21 G\u00fcnl\u00fck Hareketli Ortalama\",marker_color='white'), secondary_y=False,)\nfig.add_trace(go.Scatter(x=dfWorld['Date'], y=dfWorld['Deaths:21-Day Moving Average'], name=\"\u00d6l\u00fcmler: 21 G\u00fcnl\u00fck Hareketli Ortalama\",marker_color='red'), secondary_y=True,)\nfig.update_layout(title_text=\"D\u00fcnya \u00c7ap\u0131nda G\u00fcnl\u00fck Vaka ve \u00d6l\u00fcm Say\u0131s\u0131n\u0131n \u0130lerleyi\u015fi\")\nfig.update_xaxes(title_text=\"Tarih\")\nfig.update_yaxes(title_text=\"<b>Vakalar<\/b> \", secondary_y=False)\nfig.update_yaxes(title_text=\"<b>\u00d6l\u00fcmler<\/b> \", secondary_y=True, tickfont=dict(\n            color=\"red\" ),titlefont=dict(color=\"red\"))\nfig.update_layout(hovermode='x', width=780, xaxis=dict(mirror=True,linewidth=1,linecolor='white',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=1,linecolor='aliceblue'),legend=dict(orientation='h',x=0.1,y=-0.2))\nfig.show()","090f06de":"from plotly.subplots import make_subplots\nfig = make_subplots(rows=2, cols=1, shared_xaxes=True)\nfig.add_trace(go.Scatter(name='G\u00fcnl\u00fck Vaka Say\u0131s\u0131',x=dfWorld['Date'],y=dfWorld['Daily Cases'] ,marker_color='white'), row=1, col=1)\nfig.add_trace(go.Scatter(name='G\u00fcnl\u00fck \u00d6l\u00fcm Say\u0131s\u0131',x=dfWorld['Date'],y=dfWorld['Daily Deaths'],marker_color='red'), row=2, col=1)\nfig.update_layout(height=710, width=780,\n                  title_text=\"D\u00fcnya \u00c7ap\u0131nda G\u00fcnl\u00fck Vaka ve \u00d6l\u00fcm Say\u0131lar\u0131\",hovermode='x unified')\nfig.show()","d3fe561c":"dfWorld['growthFactor'] = dfWorld['Daily Cases'] \/ dfWorld['Daily Cases'].shift(1)\ndfWorld.tail() #Feature Engineering","3991c883":"fig = px.line(dfWorld, x='Date', y='growthFactor', title='D\u00fcnya \u00c7ap\u0131nda COVID-19 Vakalar\u0131n\u0131n B\u00fcy\u00fcme Oran\u0131')\nfig.add_trace(go.Scatter(x=[dfWorld['Date'].min(), dfWorld['Date'].max()], y=[1., 1.], name='B\u00fcy\u00fcme Oran\u0131=1.', line=dict(dash='dash', color=('rgb(237, 37, 75)'))))\nfig.update_layout(hovermode='closest',template='plotly_dark',width=780,xaxis=dict(mirror=True,linewidth=1,linecolor='white', title='Tarih'),\n                 yaxis=dict(mirror=True,linewidth=1,linecolor='white', title='B\u00fcy\u00fcme Katsay\u0131s\u0131'))\nfig.update_yaxes(range=[0., 7.]) #feb13 growth rate= 36.15\nfig.show() ","7266849b":"dfWmap = df.copy()\ndfWmap['Date']=dfWmap['Date'].astype(str)\ndfWmap = dfWmap.groupby(['Date','Country_Region'], as_index=False)['ConfirmedCases','Fatalities'].sum()\ndfWmap.head(10)","90e679c2":"dfWmap['iso_alpha'] = dfWmap.apply(lambda x: obj.iso3(x['Country_Region']), axis=1)\ndfWmap.head()","c4c3f772":"#Veriler \u00e7ok geni\u015f bir de\u011fer aral\u0131\u011f\u0131nda (\u00f6rn: ABD ve Yeni Zelanda'n\u0131n vaka say\u0131s\u0131 aras\u0131ndaki fark) oldu\u011fu i\u00e7in logaritmik \u00f6l\u00e7ek kullan\u0131yoruz.\ndfWmap['log(ConfirmedCases)'] = np.log(dfWmap.ConfirmedCases + 1)\ndfWmap['log(Fatalities)'] = np.log(dfWmap.Fatalities + 1)","21b17cfa":"px.choropleth(dfWmap, #Confirmed Cases Growth\n              locations=\"iso_alpha\", \n              color=\"log(ConfirmedCases)\", \n              hover_name=\"Country_Region\", \n              hover_data=[\"ConfirmedCases\"] ,\n              animation_frame=\"Date\",\n              color_continuous_scale=px.colors.sequential.BuPu, \n              title='Logaritmik \u00d6l\u00e7ekte \u00dclkelere G\u00f6re Onaylanan Vaka Say\u0131s\u0131 B\u00fcy\u00fcmesi')","198f4207":"px.choropleth(dfWmap, #Fatalities Growth\n             locations='iso_alpha',\n             color='log(Fatalities)',\n             hover_name='Country_Region',\n             hover_data=[\"Fatalities\"],\n             animation_frame=\"Date\",\n             color_continuous_scale=px.colors.sequential.amp,\n             title='Logaritmik \u00d6l\u00e7ekte \u00dclkelere G\u00f6re \u00d6l\u00fcm Say\u0131s\u0131n\u0131n Geli\u015fimi')","e856b408":"last_date = df.Date.max() #en g\u00fcncel toplam vaka says\u0131n\u0131 alabilmek i\u00e7in en g\u00fcncel tarihi al\u0131yoruz\ndfCountries = df[df['Date']==last_date]\ndfCountries = dfCountries.groupby('Country_Region', as_index=False)['ConfirmedCases','Fatalities'].sum()\ndfCountries = dfCountries.nlargest(20,'ConfirmedCases') #En \u00e7ok vaka say\u0131s\u0131 olan 20 \u00fclkeyi al\u0131yoruz\n#En \u00e7ok etkilenen 20 \u00fclkenin trendi\ndf_trend = df.groupby(['Date','Country_Region'], as_index=False)['ConfirmedCases','Fatalities'].sum()\ndf_trend = df_trend.merge(dfCountries, on='Country_Region')\ndf_trend.drop(['ConfirmedCases_y','Fatalities_y'],axis=1, inplace=True)\ndf_trend.rename(columns={'Country_Region':'Country', 'ConfirmedCases_x':'Cases', 'Fatalities_x':'Deaths'}, inplace=True)","9243517b":"fig = px.line(df_trend, x='Date', y='Cases', color='Country', title='En \u00c7ok Etkilnenen 20 \u00dclkenin COVID-19 Vaka Say\u0131s\u0131 Geli\u015fimi')\nfig.update_layout(hovermode='closest',template='plotly_dark',width=750,xaxis=dict(mirror=True,linewidth=1,linecolor='white',showgrid=False, title='Tarih'),\n                 yaxis=dict(mirror=True,linewidth=2,linecolor='white', title='Vaka Say\u0131s\u0131'))\nfig.show() #total confirmed cases growth","a5dc14d9":"fig = px.line(df_trend, x='Date', y='Deaths', color='Country', title='En \u00c7ok Etkilnenen 20 \u00dclkenin COVID-19 \u00d6l\u00fcm Say\u0131s\u0131 Geli\u015fimi')\nfig.update_layout(hovermode='closest',template='plotly_dark',width=750,xaxis=dict(mirror=True,linewidth=1,linecolor='white',showgrid=False, title='Tarih'),\n                 yaxis=dict(mirror=True,linewidth=2,linecolor='white',title='\u00d6l\u00fcm Say\u0131s\u0131'))\nfig.show() #total deaths growth","90297ec9":"dfWmap['MortalityRate%'] = round((dfWmap.Fatalities\/dfWmap.ConfirmedCases)*100,3)\ndfWmap.tail()","ef3281f6":"px.choropleth(dfWmap, \n                    locations=\"iso_alpha\", \n                    color=\"MortalityRate%\", \n                    hover_name=\"Country_Region\",\n                    hover_data=[\"ConfirmedCases\",\"Fatalities\"],\n                    animation_frame=\"Date\",\n                    color_continuous_scale=px.colors.sequential.OrRd,\n                    title = 'D\u00fcnyada G\u00fcnl\u00fck \u00d6l\u00fcm Oranlar\u0131n\u0131n De\u011fi\u015fimi')","21cdb121":"last_date = df.Date.max()\ndfMor= df[df['Date']==last_date]\ndfMor=dfMor.groupby(['Country_Region'], as_index=False)['Country_Region','ConfirmedCases','Fatalities'].sum()\ndfMor['MortalityRate%'] = round((dfMor.Fatalities\/dfMor.ConfirmedCases)*100,3)\ndfMorMax = dfMor.nlargest(20,'MortalityRate%')\ndfMorMax","9cecec42":"fig = px.bar(dfMorMax[:20].iloc[::-1],\n            x='MortalityRate%',\n            y='Country_Region',\n            title=\"\u00d6l\u00fcm Oran\u0131 En Y\u00fcksek 20 \u00dclke (20 Countries with the Highest Mortality Rate)\",\n            text='MortalityRate%',\n            labels={\n                     \"MortalityRate%\": \"\u00d6l\u00fcm Oran\u0131 %\",\n                     \"Country_Region\": \"\u00dclkeler\" },\n            height=750,\n            orientation='h')\nfig.show()","0948cf42":"dfMorMin = dfMor.nsmallest(20,'MortalityRate%')\nfig = px.bar(dfMorMin[:20].iloc[::-1],\n            x='MortalityRate%',\n            y='Country_Region',\n            title=\"\u00d6l\u00fcm Oran\u0131 En D\u00fc\u015f\u00fck 20 \u00dclke (20 Countries with the Lowest Mortality Rate)\",\n            text='MortalityRate%',\n              labels={\n                     \"MortalityRate%\": \"\u00d6l\u00fcm Oran\u0131 %\",\n                     \"Country_Region\": \"\u00dclkeler\" },\n            height=750,\n            orientation='h')\nfig.show()","2660807c":"dfMorMin","0b089250":"df_trend['MortalityRate%'] = round((df_trend.Deaths\/df_trend.Cases)*100,1)","d6858f1e":"fig = px.line(df_trend, x='Date', y='MortalityRate%', color='Country', title='COVID-19 dan En \u00c7ok Etkilenen 20 \u00dclkenin \u00d6l\u00fcm Oran\u0131 De\u011fi\u015fimleri')\nfig.update_layout(hovermode='closest',template='plotly_dark',xaxis=dict(mirror=True,linewidth=1,linecolor='white',showgrid=False, title='Tarih'),\n                 yaxis=dict(mirror=True,linewidth=1,linecolor='white', title='\u00d6l\u00fcm Oran\u0131%'))\nfig.show()","120c28a2":"dfTr = df[df['Country_Region']=='Turkey']\ndfTr.tail()","0ce19ac2":"dfTR = dfTr.groupby(['Date'], as_index=False)['ConfirmedCases','Fatalities','Recovered'].sum()","3edc5e21":"melt_df_tr = pd.melt(dfTR, id_vars=['Date'], value_vars=['ConfirmedCases', 'Fatalities', 'Recovered'])\nmelt_df_tr","b11e3e07":"fig = px.line(melt_df_tr, x=\"Date\", y=\"value\", color='variable',\n              labels={  \"Date\": \"Tarih\",\n                        \"value\": \"De\u011fer\",\n                        \"variable\": \"\"}, \n              title=\"T\u00fcrkiye'de Onaylanan Vakalar\u0131n\u0131n, \u00d6l\u00fcmlerin ve \u0130yile\u015fen Hastalar\u0131n \u0130lerleyi\u015fi\")\nfig.show()","7cce7e85":"dfTR['casesPrev'] = dfTR['ConfirmedCases'].shift(1)\ndfTR['casesDaily']= dfTR['ConfirmedCases'] - dfTR['casesPrev'] #g\u00fcnl\u00fck vaka say\u0131s\u0131\ndfTR.tail()","8c2a0577":"dfTR['deathsDaily']= dfTR['Fatalities'] - dfTR['Fatalities'].shift(1) #g\u00fcnl\u00fck \u00f6l\u00fcm say\u0131s\u0131","e7061bf7":"fig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(go.Scatter(x=dfTR['Date'], y=dfTR['casesDaily'],\n                    mode='lines+markers',\n                    name='G\u00fcnl\u00fck Vaka Say\u0131lar\u0131'), secondary_y=False,)\n\nfig.add_trace(go.Scatter(x=dfTR['Date'], y=dfTR['deathsDaily'],\n                    mode='lines+markers',\n                    name='G\u00fcnl\u00fck \u00d6l\u00fcm Say\u0131lar\u0131'), secondary_y=True,)\n\nfig.update_layout( title=\"T\u00fcrkiye'de G\u00fcnl\u00fck Vaka ve \u00d6l\u00fcm Say\u0131s\u0131\",hovermode='x',\n                template='plotly_dark',xaxis=dict(mirror=True,linewidth=1,linecolor='aliceblue',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=1,linecolor='aliceblue'),legend=dict(orientation='h',x=0.2,y=-0.2))\n\nfig.update_xaxes(title_text=\"Tarih\")\nfig.update_yaxes(title_text=\"<b>Vakalar<\/b> \", secondary_y=False)\nfig.update_yaxes(title_text=\"<b>\u00d6l\u00fcmler<\/b> \", secondary_y=True) \n\nfig.show()","bdc55261":"dfTR['growthRate'] = dfTR['casesDaily'] \/ dfTR['casesDaily'].shift(1)\nfig = px.line(dfTR, x='Date', y='growthRate', title=\"T\u00fcrkiye'de COVID-19 Vakalar\u0131n\u0131n B\u00fcy\u00fcme Oran\u0131\")\nfig.add_trace(go.Scatter(x=[dfWorld['Date'].min(), dfWorld['Date'].max()], y=[1., 1.], name='B\u00fcy\u00fcme Oran\u0131=1.', line=dict(dash='dash', color=('rgb(237, 37, 75)'))))\nfig.update_layout(hovermode='closest',template='plotly_dark',xaxis=dict(mirror=True,linewidth=1,linecolor='white',showgrid=False, title='Tarih'),\n                 yaxis=dict(mirror=True,linewidth=1,linecolor='white',title='B\u00fcy\u00fcme Katsay\u0131s\u0131'))\nfig.update_yaxes(range=[0., 4.])\nfig.show()","e69e2058":"dfTR['healingRate%'] = round((dfTR.Recovered\/dfTR.ConfirmedCases)*100,1)\ndfTR","6edfce02":"fig = px.line(dfTR, x='Date', y='healingRate%', title=\"T\u00fcrkiye'de COVID-19 Vakalar\u0131n\u0131n \u0130yile\u015fme Oran\u0131\")\nfig.update_layout(hovermode='closest',template='plotly_dark',width=750, xaxis=dict(mirror=True,linewidth=1,linecolor='white',showgrid=False, title='Tarih'),\n                 yaxis=dict(mirror=True,linewidth=1,linecolor='white',title='\u0130yile\u015fme Oran\u0131'))\nfig.show()","bab1b665":"dfTR['mortalityRate%'] = round((dfTR.Fatalities\/dfTR.ConfirmedCases)*100,1)\nfig = px.line(dfTR, x='Date', y='mortalityRate%', title=\"T\u00fcrkiye'de COVID-19 Vakalar\u0131n\u0131n \u00d6l\u00fcm Oran\u0131\")\nfig.update_layout(hovermode='closest',template='plotly_dark',width=750, xaxis=dict(mirror=True,linewidth=1,linecolor='white',showgrid=False, title='Tarih'),\n                 yaxis=dict(mirror=True,linewidth=1,linecolor='white', title='\u00d6l\u00fcm Oran\u0131%'))\nfig.show()","8a88c2bf":"population = pd.read_csv('..\/input\/population-by-country-2020\/population_by_country_2020.csv')\npopulation.head()","843fcdfa":"pop = population[['Country (or dependency)','Population (2020)', 'Med. Age','Density (P\/Km\u00b2)']]\npop.columns= ['country','population','avrgAge','density']\npop.head(10)","2c624b1d":"pop.loc[pop['country'] == 'United States', \"country\"] = \"US\"\npop.loc[pop['country'] == 'Czech Republic (Czechia)', \"country\"] = 'Czech Republic'\npop.loc[pop['country'] == 'United Kingdom', \"country\"] = \"UK\"\npop.head()","011c5636":"hc1 = pd.read_html('https:\/\/www.numbeo.com\/health-care\/rankings_by_country.jsp')\nhc1","d3693f3a":"hc = pd.read_html('https:\/\/www.numbeo.com\/health-care\/rankings_by_country.jsp')\nhc1 = hc[1]\nhc = hc1[['Country', 'Health Care Index']]","7f5f3e20":"hc.columns= ['country','healthcare_index']\nhc.loc[hc['country'] == 'United States', \"country\"] = \"US\"\nhc.loc[hc['country'] == 'United Kingdom', \"country\"] = \"UK\"\nhc.tail()","cffcefdf":"last_date = df.Date.max()\ndfTotal = df[df['Date']==last_date]\ndfTotal=dfTotal.groupby(['Country_Region'], as_index=False)['Country_Region','ConfirmedCases','Fatalities','Recovered'].sum()\ndfTotal['mortalityRate%'] = round((dfTotal.Fatalities\/dfTotal.ConfirmedCases)*100,1)\ndfTotal['healingRate%'] = round((dfTotal.Recovered\/dfTotal.ConfirmedCases)*100,1)\ndfTotal.rename(columns={'Country_Region':'country'},inplace=True)\ndfTotal.head()","963274b7":"dfTotal = pd.merge(dfTotal, pop, on='country', how='left',copy = False) #3 tane veri setini birle\u015ftiriyoruz\ndfTotal = pd.merge(dfTotal, hc, on='country', how = 'left',copy = False)\ndfTotal","09fdb61c":"dfTotal.info() #ka\u00e7 tane null veri var bakal\u0131m","c5348c80":"dfTotal[dfTotal[\"avrgAge\"].isnull()] #avrgAge s\u00fctunu NaN olan kay\u0131tlar\u0131 listeliyoruz","76f36b23":"dfTotal = dfTotal.dropna(how='any', subset=['population', 'density','avrgAge'])\n#population,density,avrgAge,healthcare_index s\u00fctunlar\u0131ndaki verilerin hepsi NaN oldu\u011fu i\u00e7in,\n#ortalamayla doldurmak yerine bu kay\u0131tlar\u0131 silmeyi tercih ettim","3161cb94":"assert dfTotal[\"population\"].notnull().all() #kontrol ediyoruz","d366c3eb":"dfTotal #g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere 12 kay\u0131t silinmi\u015f 178 sat\u0131r var","491ac10f":"dfTotal['avrgAge'] = dfTotal['avrgAge'].replace('N.A.', '0') #4.sat\u0131rda g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere avrgAge s\u00fctununda N.A \u015feklinde de\u011ferler var\ndfTotal['avrgAge'] = dfTotal['avrgAge'].astype('int') #bu de\u011ferleri 0'a e\u015fitleyip string tipi int yapt\u0131k\ndfTotal['avrgAge'] = dfTotal['avrgAge'].replace(0, dfTotal['avrgAge'].mean()) #ve bu kay\u0131p verileri s\u00fctun ortalamas\u0131yla doldurduruyoruz\ndfTotalNew = dfTotal.copy()\ndfTotal['healthcare_index'] = dfTotal['healthcare_index'].replace(np.nan, dfTotal['healthcare_index'].mean())\n\ndfTotal['avrgAge'] = dfTotal['avrgAge'].astype('int')\ndfTotal['ConfirmedCases'] = dfTotal['ConfirmedCases'].astype('int')\ndfTotal['Fatalities'] = dfTotal['Fatalities'].astype('int')\ndfTotal['Recovered'] = dfTotal['Recovered'].astype('int')\ndfTotal['population'] = dfTotal['population'].astype('int')\ndfTotal['density'] = dfTotal['density'].astype('int') #float tipindeki s\u00fctunlar\u0131 int veri tipine d\u00f6n\u00fc\u015ft\u00fcrd\u00fck\n\ndfTotal.info()\ndfTotal.head()\n#verileri temizledik","a517fa17":"dfTotalNew","b3cc8744":"dfTotal1 = dfTotal.copy()\ndfTotal1['cases\/1kpop'] = round((dfTotal.ConfirmedCases\/dfTotal.population)*1000,2) #1000 ki\u015fi ba\u015f\u0131na d\u00fc\u015fen toplam vaka say\u0131s\u0131\ndfTotal1 #total cases per 1,000","15380c50":"dfcpMax = dfTotal1.nlargest(25,'cases\/1kpop')\n#dfcpMax","b0e7d5c2":"fig = px.bar(dfcpMax[:25].iloc[::-1], #Highest\n            x='cases\/1kpop',\n            y='country',\n            color_discrete_sequence=['#8949d2'],\n            title=\"N\u00fcfusa Oranla En Y\u00fcksek Vaka Say\u0131s\u0131na Sahip 25 \u00dclke \/ 1000 Ki\u015fi Ba\u015f\u0131na D\u00fc\u015fen Toplam Vaka Say\u0131s\u0131 (total cases per 1,000)\",\n            text='cases\/1kpop',\n            labels={\n                     \"cases\/1kpop\": \"1000 Ki\u015fi Ba\u015f\u0131na D\u00fc\u015fen Toplam Vaka Say\u0131s\u0131\",\n                     \"country\": \"\u00dclkeler\" },\n            height=870,\n            orientation='h')\nfig.show()  ","fcbbee03":"dfcpMin = dfTotal1.nsmallest(20,'cases\/1kpop')  #Lowest\nfig = px.bar(dfcpMin[:20].iloc[::-1],\n            x='cases\/1kpop',\n            y='country',\n            color_discrete_sequence=['#21bf73'],\n            title=\"N\u00fcfusa Oranla En D\u00fc\u015f\u00fck Vaka Say\u0131s\u0131na Sahip 20 \u00dclke \/ 1000 Ki\u015fi Ba\u015f\u0131na D\u00fc\u015fen Toplam Vaka Say\u0131s\u0131 (total cases per 1,000)\",\n            text='cases\/1kpop',\n              labels={\n                     \"cases\/1kpop\": \"1000 Ki\u015fi Ba\u015f\u0131na D\u00fc\u015fen Toplam Vaka Say\u0131s\u0131 \",\n                     \"country\": \"\u00dclkeler\" },\n            height=730,\n            orientation='h')\nfig.show()","99d9b690":"dfTotalNew","4e2d6cba":"dfTotal1[\"healing(per100)\"] = np.round((dfTotal1[\"Recovered\"]\/dfTotal1[\"ConfirmedCases\"])*100,3)\ndfTotal1.head()","36a36fa8":"dfTotalNew = dfTotalNew.dropna(how='any', subset=['healthcare_index'])","6b2c10a8":"assert dfTotal[\"healthcare_index\"].notnull().all() #kontrol","edfe9135":"dfTotalNew.sort_values('healingRate%', ascending=False)[['country', 'healthcare_index','healingRate%']][:20].style.background_gradient(cmap='Greens')\n#Vaka \u0130yile\u015fme Oran\u0131 En Y\u00fcksek \u00dclkeler ve Sa\u011fl\u0131k Hizmeti Endeksleri","c6e1a55b":"dfTotalNew.sort_values('healingRate%', ascending=True)[['country', 'healthcare_index','healingRate%']][7:27].style.background_gradient(cmap='coolwarm_r')","8d6a44ca":"f,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(dfTotal.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","de718e66":"fig = px.scatter(dfTotal, x='population', y='ConfirmedCases', color='mortalityRate%',width=770, height=590, \n                 hover_name='country', log_x=True, log_y=True, title='Population vs Confirmed (N\u00fcfus - Onayalanan Vaka) w\/\u00d6l\u00fcm Oran\u0131',template='ggplot2', range_color=[0,12])\nfig.show()","df37a527":"fig = px.scatter(dfTotal, x='Recovered', y='Fatalities', color='healthcare_index',width=770, height=590, \n                 hover_name='country', log_x=True, log_y=True, title='Recovered vs Fatalities (\u0130yile\u015fenler - \u00d6l\u00fcmler) w\/Sa\u011fl\u0131k Hizmeti',template='ggplot2', range_color=[50,85])\nfig.show()","7736e04c":"fig = px.scatter(dfTotal, x='healthcare_index', y='avrgAge', color='healingRate%',width=770, height=590,\n                 hover_name='country', log_x=True, log_y=True, title='Healthcare Index vs Avrrage Age (Sa\u011fl\u0131k Hizmeti - Ortalama Ya\u015f) \/\u0130yile\u015fme Oran\u0131',template='ggplot2')\nfig.show()","3185b7d2":"fig = px.scatter(dfTotal, x='ConfirmedCases', y='density', color='healthcare_index',width=770, height=590, \n                 hover_name='country', log_x=True, log_y=True, title='Density(pop.\/km2) vs Confirmed Casses (N\u00fcfus Yo\u011funlu\u011fu - Onayalanan Vaka)',template='ggplot2')\nfig.show()","5b7ddfed":"fig = px.scatter(dfTotal, x='mortalityRate%', y='Fatalities', color='healthcare_index',width=770, height=590, \n                 hover_name='country', log_x=True, log_y=True, title='Fatalities vs Mortality Rate(%) (\u00d6l\u00fcmler-\u00d6l\u00fcm Oran\u0131) w\/Sa\u011fl\u0131k Hizmeti',template='ggplot2', range_y=[5,40000],range_color=[50,85])\nfig.show()","d4dcf0f8":"dfCases = pd.read_csv('..\/input\/uncover\/UNCOVER\/ontario_government\/confirmed-positive-cases-of-covid-19-in-ontario.csv')\ndfCases.head()","b125238b":"df_cases = dfCases.groupby(['age_group','client_gender','case_acquisitioninfo'], as_index=False)['row_id'].count()\ndf5 = dfCases.groupby(['age_group','client_gender'], as_index=False)['row_id'].count()\ndfCases = dfCases[['age_group','client_gender', 'case_acquisitioninfo']]\ndfCases.info()","827a40b1":"Male =len(dfCases[dfCases['client_gender'] == \"MALE\"])\nFemale = len(dfCases[dfCases['client_gender']== \"FEMALE\"])\nplt.figure(figsize=(12,8))\n\n#Vakalar\u0131n cinsiyet \nlabels = 'Erkek','Kad\u0131n'\nsizes = [Male,Female]\ncolors = ['skyblue', 'gold']\nexplode = (0, 0)  \n \n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=50)\n \nplt.axis('equal')\nplt.show()","774a1266":"df_cases","234053de":"df5['age_group'] = df5['age_group'].replace('Unknown',np.nan)  #veri temizleme\ndf6 = df5.dropna(how='any', subset=['age_group'])\ndf6['client_gender'] = df6['client_gender'].replace(['UNKNOWN','(blank)','TRANSGENDER','OTHER'],np.nan)\ndf6=df6.dropna(how='any', subset=['client_gender'])\ndf6","642f68b0":"fig = go.Figure()  \ndfAges = df6.groupby('age_group',as_index=False)['row_id'].sum()  \nfig.add_trace(go.Pie(labels=dfAges['age_group'], values=dfAges['row_id'], hole=0.3))\nfig.update_layout(hovermode='closest',title=\"Vakalar\u0131n Ya\u015f Gruplar\u0131na G\u00f6re Da\u011f\u0131l\u0131m\u0131\", template='ggplot2',width=750)\nfig.show()","9a57ce62":"dfMales = df6[df6['client_gender']=='MALE'].groupby('age_group',as_index=False)['row_id'].sum()\ndfFemales = df6[df6['client_gender']=='FEMALE'].groupby('age_group',as_index=False)['row_id'].sum()","173011cc":"fig = go.Figure()\nfig.add_trace(go.Bar(name='Males', x=dfMales['age_group'], y=dfMales['row_id']))\nfig.add_trace(go.Bar(name='Females', x=dfFemales['age_group'], y=dfFemales['row_id']))\nfig.update_layout(title=\"Vakalar\u0131n Ya\u015fa ve Cinsiyete G\u00f6re Da\u011f\u0131l\u0131m\u0131 (Age-Gender Distribution of Cases)\")\nfig.show()","cbd7e7c9":"dfCases['case_acquisitioninfo'].unique()","09cd9269":"caseInfo  = df_cases.groupby('case_acquisitioninfo',as_index=False)['row_id'].sum() \nfig = px.bar(caseInfo,\n            x='row_id',\n            y='case_acquisitioninfo',\n            title=\"Vir\u00fcs\u00fc Edinme Yollar\u0131(Coronavirus Acquisition-Related Information)\",\n             labels={\n                     \"row_id\": \"Cases\",\n                     \"case_acquisitioninfo\": \"\" },\n            text='row_id',\n            orientation='h',\n            width=750)\nfig.show()","42d25e2e":"owid_covid19 = pd.read_csv('..\/input\/our-world-in-data\/owid-covid-data (1).csv')\ndf_continent = owid_covid19.groupby(['continent'], as_index=False)['total_cases','total_deaths','new_cases','new_deaths'].sum()","9a2f97d6":"fig= px.bar(df_continent.sort_values(by=['new_cases']), \n                 x='new_cases', y=\"continent\", color='continent',  \n                 text='new_cases', orientation='h', width=750,\n                 color_discrete_sequence = px.colors.qualitative.G10)\nfig.update_layout(title='Confirmed Cases', xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=7, uniformtext_mode='hide')\nfig.show()","55afa5fe":"fig= px.bar(df_continent.sort_values(by=['new_deaths']), \n                 x='new_deaths', y=\"continent\", color='continent',  \n                 text='new_deaths', orientation='h', width=750,\n                 color_discrete_sequence = px.colors.qualitative.G10)\nfig.update_layout(title='Confirmed Deaths', xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=7, uniformtext_mode='hide')\nfig.show()","b7c2509e":"cowid1 = owid_covid19.groupby(['location','date'], as_index=False)['continent','total_cases','total_deaths','new_cases','new_deaths'].sum()","a3c6f4c1":"#owid_covid19.groupby(['location','date'], as_index=False).apply([7\/(np.log2(cowid['total_cases'].shift(-7)) - np.log2(cowid['total_cases']))]","27e51848":"cowid1.tail(3000)","edc58305":"dfWD = cowid1[cowid1['location']=='World']\ndfWD","3ceb4c86":"dfWD['doubleTimeForCases90days']= 90*(np.log(2)\/(np.log(dfWD['total_cases']\/dfWD['total_cases'].shift(90))))\n# dfWD['doubleTimeForCases7']=7\/(np.log2(dfWD['total_cases']) - np.log2(dfWD['total_cases'].shift(7)))\ndfWD['doubleTimeForCases7days']= 7*(np.log(2)\/(np.log(dfWD['total_cases']\/dfWD['total_cases'].shift(7))))","4138037a":"dfWD['doubleTimeForDeaths7days']= 7*(np.log(2)\/(np.log(dfWD['total_deaths']\/dfWD['total_deaths'].shift(7)))) \ndfWD['doubleTimeForDeaths90days']= 90*(np.log(2)\/(np.log(dfWD['total_deaths']\/dfWD['total_deaths'].shift(90))))","7900cc08":"dfWD= dfWD.set_index('date')","02060370":"dfWDG = dfWD.loc['2020-08-15':'2021-02-23']\ndfWDG1 = dfWD.loc['2020-01-27':'2020-08-14']\ndfWD['doubleTimeForDeaths']=pd.concat([dfWDG1['doubleTimeForDeaths7days'],dfWDG['doubleTimeForDeaths90days']], axis=0, ignore_index=False)\ndfWD['doubleTimeForCases']=pd.concat([dfWDG1['doubleTimeForCases7days'],dfWDG['doubleTimeForCases90days']], axis=0, ignore_index=False)","20d45f17":"dfWD.tail(10)","bffdbe97":"dfWD=dfWD.reset_index()","56a3eb68":"fig2 = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig2.add_trace(go.Bar(x=dfWD['date'], y=dfWD['total_deaths'], name=\"Deaths\"), secondary_y=False,)\nfig2.add_trace(go.Scatter(x=dfWD['date'], y=dfWD['doubleTimeForDeaths'], name=\"Deaths Doubling Time\",marker_color='white'), secondary_y=True,)\nfig2.update_xaxes(title_text=\"Date\")\nfig2.update_yaxes(title_text=\"<b>Deaths<\/b> \", secondary_y=False, tickfont=dict(\n            color=\"#6269f6\" ),titlefont=dict(color=\"#6269f6\"))\nfig2.update_yaxes(title_text=\"<b>Doubling Rate (Days)<\/b> \", secondary_y=True, tickfont=dict(\n            color=\"white\" ),titlefont=dict(color=\"white\"))\nfig2.update_layout(barmode='overlay', title='How long did it take for the number of total confirmed deaths to double?',hovermode='x',\n                template='plotly_dark', width=780,xaxis=dict(mirror=True,linewidth=1,linecolor='white',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=1,linecolor='aliceblue'),legend=dict(orientation='h',x=0.1,y=-0.2))\nfig2.show()","f3b34a2c":"# Create figure with secondary y-axis  \nfig5 = make_subplots(specs=[[{\"secondary_y\": True}]])\n# Add traces\n#World: of days to for Cases to double\nfig5.add_trace(go.Scatter(x=dfWD['date'], y=dfWD['doubleTimeForCases'], name=\"Cases Doubling Time\"), secondary_y=False,)\nfig5.add_trace(go.Scatter(x=dfWD['date'], y=dfWD['doubleTimeForDeaths'], name=\"Deaths Doubling Time\",marker_color='#21bf73'), secondary_y=True,)\nfig5.update_layout(title_text=\"How long did it take for the number of total confirmed deaths and cases to double?\")\nfig5.update_xaxes(title_text=\"Date\")\nfig5.update_yaxes(title_text=\"<b>Cases Doubling Rate (Days)<\/b> \", secondary_y=False, tickfont=dict(\n            color=\"#6269f6\" ),titlefont=dict(color=\"#6269f6\"))\nfig5.update_yaxes(title_text=\"<b>Deaths Doubling Rate (Days)<\/b> \", secondary_y=True, tickfont=dict(\n            color=\"#21bf73\" ),titlefont=dict(color=\"#21bf73\"))\nfig5.update_layout(hovermode='x', width=780, xaxis=dict(mirror=True,linewidth=1,linecolor='white',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=1,linecolor='aliceblue'),legend=dict(orientation='h',x=0.1,y=-0.2))\nfig5.show()","00090689":"dfMMM = cowid1[cowid1['location']=='Turkey']\ndfMMM['doubleTimeForDeaths80days']= 80*(np.log(2)\/(np.log(dfMMM['total_deaths']\/dfMMM['total_deaths'].shift(80))))","9d3de2f7":"dfMT= dfMMM.set_index('date')\ndfMT = dfMT.loc['2020-08-23':'2021-02-23']\ndfMT=dfMT.reset_index()","e5ceeab6":"fig2 = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig2.add_trace(go.Bar(x=dfMT['date'], y=dfMT['total_deaths'], name=\"Deaths\",marker_color='#E30A17'), secondary_y=False,)\nfig2.add_trace(go.Scatter(x=dfMT['date'], y=dfMT['doubleTimeForDeaths80days'], name=\"Deaths Doubling Time\",marker_color='white'), secondary_y=True,)\nfig2.update_xaxes(title_text=\"Date\")\nfig2.update_yaxes(title_text=\"<b>Deaths<\/b> \", secondary_y=False, tickfont=dict(\n            color=\"#E30A17\" ),titlefont=dict(color=\"#E30A17\"))\nfig2.update_yaxes(title_text=\"<b>Doubling Rate (Days)<\/b> \", secondary_y=True, tickfont=dict(\n            color=\"white\" ),titlefont=dict(color=\"white\"))\nfig2.update_layout(barmode='overlay', title='How long did it take for the number of total confirmed deaths to double in Turkey?',hovermode='x',\n                template='plotly_dark', width=780,xaxis=dict(mirror=True,linewidth=1,linecolor='white',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=1,linecolor='aliceblue'),legend=dict(orientation='h',x=0.1,y=-0.2))\nfig2.show()","3744cbb5":"\"\"\"\ndef dfM(countries, df, y1):\n    df_all = pd.DataFrame(columns=['doubleTimeForDeaths80days'])\n    for eachCountry in countries:\n        d[eachCountry]  = df[df['location']== countries[eachCountry]]\n        d[eachCountry]['doubleTimeForDeaths80days']= 80*(np.log(2)\/(np.log(d[eachCountry][y1]\/d[eachCountry][y1].shift(80))))\n        df_all = df_all.append(d[eachCountry], ignore_index=True)\n    return df_all \"\"\"\n\"\"\"\ndef DFM(x):\n    x['doubleTimeForDeaths80days']= 80*(np.log(2)\/(np.log(x['total_deaths']\/x['total_deaths'].shift(80))))\n    \n  for i in range(len(countries)):\n    DFM(countries[i])   \n    \"\"\"","a64e9076":"dfUS = cowid1[cowid1['location']=='United States']\ndfITY=cowid1[cowid1['location']=='Italy']\ndfUK=cowid1[cowid1['location']=='United Kingdom']\ndfSP=cowid1[cowid1['location']=='Spain']\ndfFC=cowid1[cowid1['location']=='France']\ndfJP=cowid1[cowid1['location']=='Japan']\ncountries = [ dfUS, dfITY,dfUK,dfSP,dfFC,dfJP]","6675ab7f":"for i in range(len(countries)):\n    countries[i]['doubleTimeForDeaths80days']= 80*(np.log(2)\/(np.log(countries[i]['total_deaths']\/countries[i]['total_deaths'].shift(80))))","ed4e994e":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=dfUS['date'], y=dfUS['doubleTimeForDeaths80days'],mode='lines',name='Unites States',line=dict(color='#7339D7', width=2)))\nfig.add_trace(go.Scatter(name='Japan',x=dfJP['date'],y=dfJP['doubleTimeForDeaths80days'],mode='lines',line=dict(color='#F47983', width=1.7)))\nfig.add_trace(go.Scatter(name='Turkey',x=dfMMM['date'],y=dfMMM['doubleTimeForDeaths80days'],mode='lines',line=dict(color='#FFFFFF', width=1.7)))\nfig.add_trace(go.Scatter(name='Italy',x=dfITY['date'],y=dfITY['doubleTimeForDeaths80days'],mode='lines',line=dict(color='#008C45', width=1.7)))\nfig.add_trace(go.Scatter(name='France',x=dfFC['date'],y=dfFC['doubleTimeForDeaths80days'],mode='lines',line=dict(color='#318CE7', width=1.7)))\nfig.add_trace(go.Scatter(name='World',x=dfWD['date'],y=dfWD['doubleTimeForDeaths'],mode='lines',line=dict(color='#F1BF00', width=1.7)))\nfig.add_trace(go.Scatter(name='United Kingdom',x=dfUK['date'],y=dfUK['doubleTimeForDeaths80days'],mode='lines',line=dict(color='#cd0f25', width=1.7)))\nfig.update_layout(hovermode='x', title='How many days until the number of deaths double? (Last 4 Months)',xaxis=dict(linewidth=1,linecolor='white',showgrid=False),\n                 yaxis=dict(linewidth=1,linecolor='aliceblue'))\nstart_date = \"2020-11-09\"\nend_date = \"2021-02-23\"\nfig.update_xaxes(type=\"date\", range=[start_date, end_date])\nfig.update_yaxes(range=[0, 300])\nfig.show()","9356c59f":"dfITLY= dfITY.set_index('date')\ndfITLY = dfITLY.loc['2020-06-23':'2021-02-23']\ndfITLY=dfITLY.reset_index()","11630270":"fig2 = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig2.add_trace(go.Bar(x=dfITLY['date'], y=dfITLY['total_deaths'], name=\"Deaths\",marker_color='#008C45'), secondary_y=False,)\nfig2.add_trace(go.Scatter(x=dfITLY['date'], y=dfITLY['doubleTimeForDeaths80days'], name=\"Deaths Doubling Time\",marker_color='white'), secondary_y=True,)\nfig2.update_xaxes(title_text=\"Date\")\nfig2.update_yaxes(title_text=\"<b>Deaths<\/b> \", secondary_y=False, tickfont=dict(\n            color=\"#008C45\" ),titlefont=dict(color=\"#008C45\"))\nfig2.update_yaxes(title_text=\"<b>Doubling Rate (Days)<\/b> \", secondary_y=True, tickfont=dict(\n            color=\"white\" ),titlefont=dict(color=\"white\"))\nfig2.update_layout(barmode='overlay', title='How long did it take for the number of total confirmed deaths to double in Italy?',hovermode='x',\n                template='plotly_dark', width=780,xaxis=dict(mirror=True,linewidth=1,linecolor='white',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=1,linecolor='aliceblue'),legend=dict(orientation='h',x=0.1,y=-0.2))\nfig2.show()","bf5dc3a7":"<a id = \"18\"><\/a><br>\n**Age Groups Distribution of Cases** (Vakalar\u0131n Ya\u015f Gruplar\u0131na G\u00f6re Da\u011f\u0131l\u0131m\u0131)","3e96ffe4":"### Doubling Rate (based on prior 7 days and 90 days)\n![image.png](attachment:image.png)","01323aed":"<a id = \"16\"><\/a><br>\n# **Data Analysis of Confirmed Cases in the State of Ontario**\n**Ontario Eyaletindeki Onaylanan Vakalar\u0131n Veri Analizi**","0f2591f3":"<a id = \"7\"><\/a><br>\n# **Mortality Rate (\u00d6l\u00fcm Oran\u0131)**\nToplam \u00f6l\u00fcm say\u0131lar\u0131n\u0131n, onaylanan vaka say\u0131lar\u0131na b\u00f6l\u00fcnmesiyle hesaplanmaktad\u0131r.","d3a9111c":"<a id = \"10\"><\/a><br>\n# **COVID-19 in TURKEY**","f57a969e":"<a id = \"17\"><\/a><br>\n**Gender Distribution of Cases** (Vakalar\u0131n Cinsiyete G\u00f6re Da\u011f\u0131l\u0131m\u0131n\u0131n Dairesel Grafikte G\u00f6sterimi)**","22a28844":"<a id = \"12\"><\/a><br>\n# **\u00dclkelerin Demografik Verilerinin Covid-19 Pandemi S\u00fcreciyle Olan \u0130li\u015fkisi**\n**The Relationship between the Demographic Data of the Countries and the Covid-19 Pandemic**","881d4685":"### 20 Countries with the Lowest Recovery Rate and Healthcare Index","f2c991eb":"<a id = \"4\"><\/a><br>\n# **Growth Rate (B\u00fcy\u00fcme Oran\u0131)**\nB\u00fcy\u00fcme Oran\u0131, o g\u00fcnk\u00fc yeni vaka say\u0131s\u0131n\u0131n, \u00f6nceki g\u00fcnk\u00fc yeni vaka say\u0131s\u0131na b\u00f6l\u00fcnmesiyle hesaplanmaktad\u0131r. B\u00fcy\u00fcme Oran\u0131 1'den fazla oldu\u011funda yeni vaka say\u0131s\u0131 artm\u0131\u015f, 1'den d\u00fc\u015f\u00fck oldu\u011funda yeni vaka say\u0131s\u0131 d\u00fc\u015fm\u00fc\u015f olacakt\u0131r.\n\nA\u015fa\u011f\u0131daki grafikte g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere D\u00fcnya'da ki \"COVID-19 B\u00fcy\u00fcme Oran\u0131\", Nisan ay\u0131ndan itibaren 1 civar\u0131nda seyretmektedir. Bu durum Nisan ay\u0131ndan itibaren onaylanan yeni vaka say\u0131lar\u0131n\u0131n, art\u0131\u015f g\u00f6stermedi\u011fi fakat ayn\u0131 zamanda azal\u0131\u015f da g\u00f6stermedi\u011fi anlam\u0131na gelmektedir.","10fc5121":"<a id = \"13\"><\/a><br>\n**Cleaning Data (Veri Temizleme)**","be2026a4":"<a id = \"1\"><\/a><br>\n**Load Libraries and Data**","7ce11cd1":"<a id = \"5\"><\/a><br>\n# **World Map: Confirmed Cases and Fatalities Growth (Logarithmic Scale)**","1e6a8950":"## **Countries with Highest and Lowest Number of Cases According to Population (total cases per 1,000)**","1b7b2e0d":"<a id = \"24\"><\/a><br>\n**Mortality Rate (Turkey)**","12962494":"<a id = \"14\"><\/a><br>\n**Correlation Map (Korelasyon Haritas\u0131)**\n\n\u00d6zellikler aras\u0131ndaki ili\u015fkiyi (ba\u011fl\u0131l\u0131\u011f\u0131) renkli tablo \u015feklinde g\u00f6r\u00fcyoruz. G\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere onaylanan vaka say\u0131s\u0131 (ConfirmedCases) ve ger\u00e7ekle\u015fen \u00f6l\u00fcmler (Fatalities) aras\u0131nda pozitif do\u011frusal bir ili\u015fki oldu\u011fu g\u00f6r\u00fcl\u00fcyor. Ayn\u0131 \u015fekilde \u00fclke n\u00fcfusu (population) ve onaylanan pozitif vakalar (ConfirmedCases) aras\u0131nda da pozitif do\u011frusal bir ili\u015fki oldu\u011fu s\u00f6ylenebilir.","e2bd93ef":"## Continent-Wise Covid Distribution","5a83bcfa":"<a id = \"3\"><\/a><br>\n# **Worldwide Daily Cases and Deaths**","91884d25":"### 20 Countries with the Highest Recovery Rate and Healthcare Index","7d95e607":"<a id = \"21\"><\/a><br>\n > Thank you for reading my kernel. I hope, we will be completely back to our usual daily life as soon as possible and we'll see better days.\n\n**Bet\u00fcl Sena \u00c7a\u011flar**\n\n**Contact:**\n**[LinkedIn](https:\/\/www.linkedin.com\/in\/bet\u00fcl-sena-\u00e7a\u011flar-783307188)**","88592b65":"# **COVID-19 Data Analysis & Visualization**\n![Image](https:\/\/www.furman.edu\/covid-19\/wp-content\/uploads\/sites\/177\/2020\/03\/CoronaVirusHeader-Final-3.jpg)\n\n\n**Content:**\n1. [Load Libraries and Data](#1)\n2. [Confirmed Cases Worldwide](#2)\n3. [Worldwide Daily Cases and Deaths](#3)\n4. [Growth Rate](#4)\n5. [World Map: Confirmed Cases and Fatalities Growth](#5)\n6. [Trend of COVID-19 in Top 20 Affected Countries](#6)\n7. [Mortality Rate](#7)\n * [20 Countries with the Highest Mortality Rate](#8)\n * [20 Countries with the Lowest Mortality Rate](#9)\n * [Mortality Rate Trend of COVID-19 in Top 20 Affected Countries](#22)\n8. [COVID-19 in Turkey](#10)\n * [Healing Rate](#11)\n * [Mortality Rate](#24)\n9. [Demographic Data of the Countries and the Covid-19 Pandemic](#12)\n *  [Cleaning Data](#13)\n *  [Correlation Map](#14)\n10. [Data Analysis of Confirmed Cases in the State of Ontario](#16)\n *  [Gender Distribution of Cases](#17)\n *  [Age Groups Distribution of Cases](#18)\n *  [Age-Gender Distribution of Cases](#19)\n *  [Coronavirus Acquisition-Related Information](#20)\n11. [Final](#21)","40236e26":"<a id = \"6\"><\/a><br>\n# **Trend of COVID-19 in Top 20 Affected Countries**","e3a2c63e":"<a id = \"9\"><\/a><br>\n**20 Countries with the Lowest Mortality Rate**","bfe8647c":"<a id = \"20\"><\/a><br>\n**Coronavirus Acquisition-Related Information (Hastalar\u0131n Vir\u00fcs\u00fc Edinme Yollar\u0131)**\n* Travel-Related (Seyehat)\n* Contact of a confirmed case (Onaylanan bir vaka ile temas)\n* Neither (Di\u011fer)\n* Information pending (Bilgi Bekleniyor)","39199247":"<a id = \"8\"><\/a><br>\n**20 Countries with the Highest Mortality Rate**","b0edccb7":"<a id = \"2\"><\/a><br>\n# **Confirmed Cases Worldwide**","411a4f87":"<a id = \"11\"><\/a><br>\n# **Healing Rate (Vakalar\u0131n \u0130yile\u015fme Oran\u0131)**\n\nToplam iyile\u015fen hasta say\u0131s\u0131n\u0131n, vaka say\u0131s\u0131na b\u00f6l\u00fcnmesiyle hesaplanmaktad\u0131r.","7ff9b69c":"<a id = \"22\"><\/a><br>\n**Mortality Rate Trend of COVID-19 in Top 20 Affected Countries**","8971812f":"<a id = \"19\"><\/a><br>\n**Age-Gender Distribution of Cases** (Vakalar\u0131n Ya\u015fa ve Cinsiyete G\u00f6re Da\u011f\u0131l\u0131m\u0131)"}}