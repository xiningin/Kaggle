{"cell_type":{"db93f1c3":"code","1f2a2a43":"code","5d64ebbd":"code","9e55c3cd":"code","c53dfe2a":"code","37e2f4ee":"code","56027e37":"code","dfb0254c":"code","7b06da20":"code","9330b9ab":"code","779faaf6":"code","3721c07a":"markdown"},"source":{"db93f1c3":"!pip install -q -U git+https:\/\/github.com\/mljar\/mljar-supervised.git@master","1f2a2a43":"import numpy as np\nimport pandas as pd\nfrom supervised.automl import AutoML # mljar-supervised","5d64ebbd":"train = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/test.csv\")","9e55c3cd":"train.shape, test.shape","c53dfe2a":"train.head()","37e2f4ee":"x_cols = train.columns[2:].tolist()\ny_col = train.columns[1]","56027e37":"automl = AutoML(\n    mode=\"Compete\", \n    eval_metric=\"f1\",\n    total_time_limit=3600,\n    features_selection=False # switch off feature selection\n)\nautoml.fit(train[x_cols], train[y_col])","dfb0254c":"preds = automl.predict(test[x_cols])","7b06da20":"preds","9330b9ab":"submission = pd.DataFrame({'PassengerId':test.iloc[:,0], 'Survived': preds})\nsubmission.to_csv('1_submission.csv', index=False)","779faaf6":"automl.report()","3721c07a":"# MLJAR AutoML \n\nMLJAR is an Automated Machine Learning framework. It is available as Python package with code at GitHub: https:\/\/github.com\/mljar\/mljar-supervised\n\nThe MLJAR AutoML can work in several modes:\n- Explain - ideal for initial data exploration\n- Perform - perfect for production-level ML systems\n- Compete - mode for ML competitions under restricted time budget. By the default, it performs advanced feature engineering like golden features search, kmeans features, feature selection. It does model stacking.\n- Optuna - uses Optuna to highly tune algorithms: Random Forest, Extra Trees, Xgboost, LightGBM, CatBoost, Neural Network. Each algorithm is tuned with `Optuna` hperparameters framework with selected time budget (controlled with `optuna_time_budget`). By the default feature engineering is not enabled (you need to manually swtich it on, in AutoML() parameter).\n\n\n## Explain\n\nThe example useage of `Explain` with `MLJAR`:\n\n```python\n\nautoml = AutoML(mode=\"Explain\")\nautoml.fit(X, y)\n```\n\nThe best choice to get initial information about your data. This mode will produce a lot of explanations for your data. All details can be viewed in the Notebook by calling the `automl.report()` method.\n\n\n## Compete\n\nThe example useage of `Compete` with `MLJAR`:\n\n```python\n\nautoml = AutoML(mode=\"Compete\",\n                total_time_limit=8*3600)\nautoml.fit(X, y)\n```\n\nThat's it. It will train: Random Forest, Extra Trees, Xgboost, LightGBM, CatBoost, Neural Network, Ensemble, and stack all the models. Feature engineering will be applied (if enough training time). \n\n\n## Optuna\n\nThe example useage of `Optuna` with `MLJAR`:\n\n```python\n\nautoml = AutoML(mode=\"Optuna\", \n                optuna_time_budget=1800, \n                optuna_init_params={}, \n                algorithms=[\"LightGBM\", \"Xgboost\", \"Extra Trees\"], \n                total_time_limit=24*3600)\nautoml.fit(X, y)\n```\n\nDescription of parameters:\n- `optuna_time_budget` - time budget for `Optuna` to tune each algorithm,\n- `optuna_init_params` - if you have precomputed parameters for `Optuna` they can be passed here, then for already optimized models `Optuna` will not be used.\n- `algorithms` - the algorithms that we will check,\n- `total_time_limit` - the total time limit for AutoML training.\n\n(In the `Optuna` mode, only first fold is used for model tuning.)\n\n---\n\nMLJAR GitHub: https:\/\/github.com\/mljar\/mljar-supervised\n\nOptuna GitHub: https:\/\/github.com\/optuna\/optuna\n\n<img src=\"https:\/\/raw.githubusercontent.com\/mljar\/visual-identity\/main\/media\/kaggle_banner_white.png\" style=\"width: 70%;\"\/>"}}