{"cell_type":{"bf931f44":"code","de6b67d0":"code","11de0d1e":"code","fec6009e":"code","8bded53a":"code","ce4c7475":"code","0deb9297":"code","578fbf1a":"code","7d095a90":"code","42443ce8":"markdown","4a90d431":"markdown","d08b668e":"markdown","41d51439":"markdown","c704c616":"markdown","25af541a":"markdown","d04bef03":"markdown","19777f5a":"markdown","e26b5b8a":"markdown","ce952304":"markdown","00951720":"markdown","083707ac":"markdown","a043a82c":"markdown"},"source":{"bf931f44":"import warnings\nimport numpy as np\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings(\"ignore\")","de6b67d0":"# The total number of complex numbers considered (number of pixels) is n x n\nn = 5000\n\n# The maximum number of iterations in testing escape\nmaxiter = 500\n\n# The plot size in inches\nsize = 15","11de0d1e":"xs = np.linspace(-2,1,n)\nys = np.linspace(-1.5,1.5,n)\nZ0 = np.array(xs).reshape((1,n)) + np.array(ys).reshape((n,1))*1j\nZ = np.zeros((n,n))\nT = np.zeros((n,n))\n\nfor k in range(maxiter):\n    Z = Z**2 + Z0\n    T += np.int_(T==0) * (abs(Z) > 2) * k","fec6009e":"fig = plt.figure(figsize=(size,size))\nplt.imshow(T**0.5,cmap='magma',interpolation='gaussian',aspect='equal',vmax=0.5*maxiter**0.5)\nplt.xlabel('Re(c)',fontsize=30)\nplt.ylabel('Im(c)',fontsize=30)\nplt.xticks([i*n\/6-0.5 for i in range(7)],[i for i in np.arange(-2,1.5,0.5)],fontsize=20)\nplt.yticks([i*n\/6-0.5 for i in range(7)],[i for i in np.arange(1.5,-2,-0.5)],fontsize=20)\nplt.tick_params(pad=10,length=10)\nplt.title('Figure 1: The Mandelbrot Set',fontsize=40,pad=20)\nfig.show()","8bded53a":"# The total number of pixels is n x n\nn = 5000\n\n# The maximum number of iterations in testing escape\nmaxiter = 500\n\n# The total number of random points in the simulation\nm = int(2e8)\n\n# The plot size in inches\nsize = 15 ","ce4c7475":"# Generate random points\nZ0 = np.random.random(m)*4-2 + (np.random.random(m)*4-2)*1j\n\n# Remove points outside radius-2 circle around 0\nZ0 = Z0[abs(Z0)<2]\n\n# Remove points in cardioid\np = (((Z0.real-0.25)**2) + (Z0.imag**2))**.5\nZ0 = Z0[Z0.real > p-(2*p**2) + 0.25]\n\n# Remove points in period-2 bulb\nZ0 = Z0[((Z0.real+1)**2) + (Z0.imag**2) > 0.0625]","0deb9297":"Z = Z0.copy()\nto_try = np.ones_like(Z0,dtype=bool)\n\nfor k in range(maxiter):\n    Z[to_try] = Z[to_try]**2 + Z0[to_try]\n    to_try[abs(Z)>2] = False\n    \nZ0 = Z0[np.logical_not(to_try)]","578fbf1a":"# Create pixels array\nB = np.zeros([n,n])\n\nZ = Z0.copy()\ntotal_length = len(Z)\n\nwhile(len(Z)):\n    x = np.array((Z.real+2)\/4 * n,int)\n    y = np.array((Z.imag+2)\/4 * n,int)\n    B[y,x] += 1\n    B[n-1-y,x] += 1\n    Z = Z**2 + Z0\n    keep = abs(Z)<2\n    Z0 = Z0[keep]\n    Z = Z[keep]","7d095a90":"fig = plt.figure(figsize=(size,size))\nplt.imshow(B.T**0.5,cmap='magma',interpolation='gaussian',aspect='equal',vmin=2)\nplt.xlabel('Re(z)',fontsize=30)\nplt.ylabel('Im(z)',fontsize=30)\nplt.xticks([i*n\/6-0.5 for i in range(7)],[i for i in np.arange(-2,1.5,0.5)],fontsize=20)\nplt.yticks([i*n\/6-0.5 for i in range(7)],[i for i in np.arange(1.5,-2,-0.5)],fontsize=20)\nplt.tick_params(pad=10,length=10)\nplt.title('Figure 2: The Buddhabrot',fontsize=40,pad=20)\nfig.show()","42443ce8":"### Generate the Mandelbrot set","4a90d431":"### Generate random points in $B(0,2)$, and remove those which are trivially in the Mandelbrot set","d08b668e":"The Buddhabrot gives an alternate way of presenting the Mandelbrot Set.\nInstead of plotting how long it takes points outside $\\mathcal{M}$ to escape $B(0,2)$, we plot the trajectories of those escaping points. This requires first checking which points are in the Mandelbrot set. Firstly points are generated uniformly at random inside $B(0,2)$, and it is useful to first remove the main cardioid $C$ and circular bulb $B$, which sit entirely inside the Mandelbrot set. These are given by:\n\n$C = \\big\\{ z \\in \\mathbb{C} \\ : \\Re(z) \\leq |z-\\frac{1}{4}| - 2 |z-\\frac{1}{4}|^2 + \\frac{1}{4}  \\big\\}$\n\n$B = \\big\\{ z \\in \\mathbb{C} \\ : \\ |z+1| \\leq \\frac{1}{4}\\big\\}$\n\nOnce this has been done, the rest of the points are iterated for a fixed number of iterations, to ensure they do not escape. Non-escaping points are removed, and finally the trajectories of remaining points are calculated and plotted in Figure 2.","41d51439":"### Track trajectories of those points and add to pixel values until all have escaped $B(0,2)$","c704c616":"### Choose parameters","25af541a":"### Keep only points which escape $B(0,2)$ within specified number of iterations","d04bef03":"# The Buddhabrot","19777f5a":"# The Mandelbrot Set","e26b5b8a":"In this notebook we plot the famous Mandelbrot set, and an alternative method of displaying it known as the Buddhabrot.\nThe Mandelbrot set $\\mathcal{M}$ is defined by a recursion in the following way:\n\nTake $c \\in \\mathbb{C}$. Let $z_0(c) = 0$ and for $n \\in \\mathbb{N}$, let $z_{n+1}(c) = z_n(c)^2 + c$\n\n$\\mathcal{M} := \\bigg\\{ c \\in \\mathbb{C}\\ : \\  \\big(z_n(c)\\big)_{n \\geq 0} \\mathrm{\\ \\ is\\ bounded}\\bigg\\} \\subseteq \\mathbb{C}$\n\nWe can approximate $\\mathcal{M}$  by noting that:\n\n$\\mathcal{M} = \\bigg\\{ c \\in \\mathbb{C}\\ : \\  \\big(z_n(c)\\big)_{n \\geq 0} \\subseteq B(0,2) \\bigg\\} $\n\nwhere $B(0,2) := \\big\\{z \\in \\mathbb{C}\\ : \\ |z| \\leq 2\\big\\}$.\n\nPoints outside the Mandelbrot set can be coloured by how long it takes them to escape $B(0,2)$, to give the plot in Figure 1. The number of iterations considered to 'approximate $n \\to \\infty$' is fixed as a large integer.","ce952304":"### Plot Buddhabrot","00951720":"### Import libraries","083707ac":"### Choose parameters","a043a82c":"### Plot the Mandelbrot set"}}