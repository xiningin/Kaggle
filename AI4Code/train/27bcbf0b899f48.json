{"cell_type":{"05c1358f":"code","996e5bed":"markdown"},"source":{"05c1358f":"%%writefile SurvivorBias.py\n\"\"\"\nSurvivor Bias\nEntry to Kaggle's RPS contest of 2020-2021\n\"\"\"\n\n\nimport numpy as np\nfrom numba import njit\nimport pickle\nimport os\n\n@njit()\ndef filter_get_score(friend_move, foe_move):\n    if (friend_move == foe_move):\n        return(1) #ties+= 1\n    else:\n        wining_move = (foe_move + 1) % 3\n        if (friend_move == wining_move):\n            return(2) #wins += 1\n        else:\n            return(0) #losses += 1\n    print('BADNESS in filter_get_score', friend_move, foe_move)\n    return(-1000) # error condition\n\n@njit()\ndef calc_markovish_index(action_seq): \n    I = 0\n    for i in range(len(action_seq)):\n        I = (I * 3) + action_seq[i]\n    I = (I * 3)\n    return I\n\n\n\n \n@njit()\ndef predict(scores, det):\n    # if scores are uniform, pick randomly, but if zero predict -1 -> abstain. 12\/22\/20\n    if (np.sum(scores) < 0.001): return(-1)\n    if (det): #predicted = np.argmax(scores)\n        order = np.zeros(3, np.int32)\n        order[0], order[1], order[2] = 0, 1, 2\n        for i in range(3): # shuffle\n            t = int(np.random.randint(3))\n            order[i], order[t] = order[t], order[i]\n        predicted = order[0]\n        for i in range(3): # pick the max \n            if (scores[order[i]] > scores[predicted]): predicted = order[i]\n        # maxs = np.where(scores == scores.max) # pick biggest but break scores randomly\n        # predicted = int (np.choose(maxs) )\n        # otherwise return a stochastic choice (Numba doesn't like np.random.choice())\n    elif (np.sum(scores) > 0.01): \n        #np.random.choice(3, 1, p=list(scores\/np.sum(scores)))\n        scores = scores \/ np.sum(scores)\n        if (np.abs( 1 - np.sum(scores) ) > 0.0001): print('BADNESS in filters.predict', np.sum(scores))\n        v = np.random.random()\n        predicted = 0\n        if (v > scores[0]): predicted = 1\n        if (v > scores[0] + scores[1]): predicted = 2\n    else: predicted = int(np.random.randint(3))\n    return(predicted)\n\n\n    \n@njit()\ndef get_hist_predictions_s(f, s, BFT, moves, k, howFarBack):\n    \"\"\" return the prediction for this single-player history filter \"\"\"\n    # s -> step\n    # BFT -> table\n    # moves => history of moves for 1 player\n    if (k == 0):\n        scores = np.zeros(3, np.float32)\n        I = 0\n        for j in range(3): scores[j] = BFT [f, I + j] \n        return(scores)\n        \n    seq = np.zeros(k, np.int32)\n    scores = np.zeros(3, np.float32)\n    if (s > (2 * k) + 1 + howFarBack):\n        for j in range(k):\n            seq[j] = moves[(s - k) + j - howFarBack]\n        I = calc_markovish_index(seq)\n        for j in range(3): scores[j] = BFT [f, I + j] \n    return(scores)\n\n\n@njit()\ndef get_hist_predictions_d(f, s, BFT, friend_moves, foe_moves, k, howFarBack):\n    \"\"\" return the prediction for this dual-player history filter \"\"\"\n    seq = np.zeros(2*k, np.int32)\n    scores = np.zeros(3, np.float32)\n    if (s > (1 * k) + 1 + howFarBack):\n        for j in range(k):\n            seq[j    ] = friend_moves[(s - k) + j - howFarBack]\n            seq[j + k] = foe_moves   [(s - k) + j - howFarBack]\n        I = calc_markovish_index(seq)\n        for j in range(3): scores[j] = BFT [f, I + j]\n    return(scores)\n\n \n@njit()\ndef update_bft_d(f, s, BFT, friend_moves, foe_moves, k, howFarBack, do_alpha = 0):\n    if (do_alpha == 0): return(update_bft_d_alpha(f, s, BFT, friend_moves, foe_moves, k, howFarBack))\n    seq = np.zeros(2*k, np.int32)\n    move_to_predict = foe_moves[s]\n    if (s > (1 * k) + 1 + howFarBack):\n        for j in range(k):\n            seq[j    ] = friend_moves[(s - k) + j - howFarBack]\n            seq[j + k] = foe_moves   [(s - k) + j - howFarBack]\n        I = calc_markovish_index(seq)\n        # update table (BFT)\n        BFT [f, I + move_to_predict] += 1\n    return(BFT)\n \n@njit()\ndef update_bft_d_alpha(f, s, BFT, friend_moves, foe_moves, k, howFarBack):\n    seq = np.zeros(2*k, np.int32)\n    move_to_predict = foe_moves[s]\n    if (s > (1 * k) + 1 + howFarBack):\n        for j in range(k):\n            seq[j    ] = friend_moves[(s - k) + j - howFarBack]\n            seq[j + k] = foe_moves   [(s - k) + j - howFarBack]\n        I = calc_markovish_index(seq)\n        # update table (BFT)\n        alpha = 1\n        beta  = 1 - alpha\n        for n in range(3): BFT [f, I + n] *= beta\n        BFT [f, I + move_to_predict] += 1 * alpha\n    return(BFT)\n\n@njit()\ndef update_bft_s_alpha(f, s, BFT, moves, k, howFarBack):\n    move_to_predict = moves[s]\n    if (k == 0):\n        if (s > 0):\n            I = 0\n            # update table (BFT)\n            BFT [f, I + move_to_predict] += 1\n        return(BFT)\n    seq = np.zeros(k, np.int32)\n    if (s > (1 * k) + 1 + howFarBack):\n        for j in range(k): seq[j] = moves[(s - k) + j - howFarBack]\n        I = calc_markovish_index(seq)\n        # update table (BFT)\n        alpha = 1\n        beta  = 1 - alpha\n        for n in range(3): BFT [f, I + n] *= beta\n        BFT [f, I + move_to_predict] += 1 * alpha\n    return(BFT)\n\n@njit()\ndef update_bft_s(f, s, BFT, moves, k, howFarBack, do_alpha = 0):\n    if (do_alpha == 0): return(update_bft_s_alpha(f, s, BFT, moves, k, howFarBack))\n    move_to_predict = moves[s]\n    if (k == 0):\n        if (s > 0):\n            I = 0\n            # update table (BFT)\n            BFT [f, I + move_to_predict] += 1\n        return(BFT)\n    seq = np.zeros(k, np.int32)\n    if (s > (1 * k) + 1 + howFarBack):\n        for j in range(k): seq[j] = moves[(s - k) + j - howFarBack]\n        I = calc_markovish_index(seq)\n        # update table (BFT)\n        BFT [f, I + move_to_predict] += 1\n    return(BFT)\n\n@njit()\ndef update_payoffs(predictions, payoffs, prev_foe_move):\n    for f in range(len(predictions)):\n        p = predictions[f]\n        if (p != -1): # if it really weighed in\n            payoffs[f, 3] += 1\n            for i in range(3): # same as predicted, win over, lose to\n                a = (p + i) % 3\n                payoffs[f, i] += filter_get_score(a, prev_foe_move)\n    return(payoffs)\n\n@njit()\ndef relevance_of_payoffs(filters, payoffs):\n    relevance = np.zeros(filters, np.int32)\n    for f in range(filters):\n        relevance[f] = np.max(payoffs[f,:]) - np.min(payoffs[f,:])\n    return(relevance)\n\n\n\n@njit()\ndef best_bet_voting(predictions, payoffs):\n    rps = np.zeros(3, np.float32)\n    action = (predictions[0] + 1) % 3\n    for f in range(len(predictions)):\n        p = predictions[f]\n        if ((p != -1) and (payoffs[f, 3] > 0)):\n            for i in range(3): # same as predicted, win over, lose to\n                action = (p + i) % 3\n                pay = payoffs[f, i] #\/ payoffs[f, 3]\n                rps [action] += pay #a vote for this action weighted by pay\n    action = predict(rps, True) # pick best action, breaking ties randomly\n    if (action == -1): action = np.random.randint(3)\n    return(np.int32(action))\n\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n        \n@njit()\ndef create_great_filter():\n    hist = 4 # maximum history\n    # 8 basic filters\n    #x = np.array([1, 2, 3, 0, 1, 2, 3, 4]) # histories to look back\n    #m = np.array([0, 0, 0, 1, 1, 1, 1, 1]) # dual players -> 0, single player -> 1\n    #add more, longer filters\n    x = np.array([1, 2, 3, 0, 1, 2, 3, 4]) # histories to look back\n    m = np.array([0, 0, 0, 1, 1, 1, 1, 1]) # dual players -> 0, single player -> 1\n    # double that because I want a set predicting my move and another predicting his\n    # and double that because I want a set decaying and another not. So 32 filtera\n    # L = np.array([0, 1, 0, 1, 0, 1, 0, 1]) # predict me   -> 0, predict foe   -> 1\n    # M = np.array([0, 0, 0, 0, 1, 1, 1, 1]) # dual players -> 0, single player -> 1\n    dt = 1\n    da = 2\n    i2 = 2\n    lx = len(x)\n    filters = dt * da * i2 * lx\n    K = np.zeros(filters, np.int32) # how many taps (history)\n    L = np.zeros(filters, np.int32) # predict me   -> 0, predict foe   -> 1\n    M = np.zeros(filters, np.int32) # dual players -> 0, single player -> 1\n    A = np.zeros(filters, np.int32) # last-seen    -> 0, average       -> 1\n    D = np.zeros(filters, np.int32) # howFarBack\n    for d in range(dt):\n        for i in range(i2):\n            for j in range(lx):\n                for a in range(da):\n                    f = (d * i2 * lx * da) + (i * lx * da) + (j * da) + a\n                    K[f] = x[j]\n                    M[f] = m[j]\n                    L[f] = i\n                    D[f] = d\n                    A[f] = a\n    return(filters, hist, K, L, M, D, A)\n\n\n#@njit()\ndef run_great_filters(s, friend_moves, foe_moves, FB, prev_predictions, payoffs, LF = None):\n    filters, hist, K, L, M, D, A = create_great_filter()\n    predicted = np.zeros(filters, np.int32) # predicted actions from the filters\n    if (s == 0):\n        table_size = int(pow(3, (2*hist) + 2))\n        FB = np.zeros((filters, table_size), np.float32)\n        payoffs = np.zeros((filters, 4), np.int32)\n        \n        action = np.random.randint(3)\n        return (action, FB, predicted, payoffs)\n    if (s > 0):\n        # update tables (BFT)\n        for f in range(filters):\n            if (L[f] == 0):  # predicting foe\n                if (M[f] == 0): FB = update_bft_d(f, s-1, FB, friend_moves, foe_moves, K[f], D[f], A[f]) # dual\n                else:           FB = update_bft_s(f, s-1, FB,               foe_moves, K[f], D[f], A[f]) # single\n            else:           # predicting me\n                if (M[f] == 0): FB = update_bft_d(f, s-1, FB, foe_moves, friend_moves, K[f], D[f], A[f]) # dual\n                else:           FB = update_bft_s(f, s-1, FB,            friend_moves, K[f], D[f], A[f]) # single\n            \n    # calculate the payoffs for the previous predictions   \n    if (s >= 1): #(2 * min(k)) + 1): \n        prev_foe_move = foe_moves[s - 1]\n        #payoffs = update_payoffs_alpha(prev_predictions, payoffs, prev_foe_move)\n        payoffs = update_payoffs(prev_predictions, payoffs, prev_foe_move)\n    \n    # get predictions from all the filters\n        for f in range(filters):\n            if (L[f] == 0):   # predicting foe\n                if (M[f] == 0): scores = get_hist_predictions_d(f, s, FB, friend_moves, foe_moves, K[f], D[f])# dual\n                else:           scores = get_hist_predictions_s(f, s, FB,               foe_moves, K[f], D[f])# single\n            else:             # predicting me\n                if (M[f] == 0): scores = get_hist_predictions_d(f, s, FB, foe_moves, friend_moves, K[f], D[f]) # dual\n                else:           scores = get_hist_predictions_s(f, s, FB,            friend_moves, K[f], D[f]) # single\n            if (LF != None):\n                LF.write(' (')\n                for e in scores: LF.write(str(e) + ',')\n                LF.write(')')\n            predicted[f] = predict(scores, True)\n    \n    if (LF != None):\n        LF.write(' pay ')\n        for pp in pretty_payoffs(filters, payoffs):\n            LF.write(' (')\n            for e in pp:LF.write(str(e) + ',')\n            LF.write(')')\n                \n    if (s < 8): action = np.random.randint(3)\n    else:    \n        action = best_bet_voting(predicted, payoffs) \n    return(action, FB, predicted, payoffs)\n\n@njit()\ndef pretty_payoffs(num_filters, payoffs):\n    \"\"\" return a list of lists of payoffs for each filter \"\"\"\n    pretty = []\n    for f in range(num_filters):\n        pay = []\n        for i in range(3): # same as predicted, win over, lose to\n            pay.append( payoffs[f, i] )\n        pretty.append(pay)\n    return(np.array(pretty))\n    \n\n@njit()\ndef sloppy_init():\n    FB = np.zeros((2, 2), np.float32)\n    predicted = np.zeros(2, np.int32) # predicted actions from the filters\n    payoffs   = np.ones((2, 4), np.int32)\n    return(FB, predicted, payoffs) \n\n\ndef FSM_agentX(step, prev_friend_act, prev_foe_act, state, filter_move, state_choices, action_choices):\n    \"\"\" play 1 move using finite state machine \"\"\"\n    # num_actions == 3\n    holdoff = -1 # spin at state zero until past this step\n# =============================================================================\n#     4 possible actions:\n#       filter_move\n#       counter to filter_move\n#       counter-counter to filter_move\n#       random\n#     3 possible conditions: win, lose, tie\n# =============================================================================\n    showit = False\n    if (showit): \n        print('FSM_agentX() s', state)\n    if step == 0:\n        condition = 2 # tie\n        if (state != 0):\n            print(\"FSM_agentX, starting state =\", state)\n    if step <= holdoff:\n        condition = 2 # tie\n        #    action = np.int32(np.random.randint(3))\n        state = state_choices[state, condition] # get next state\n        #a = np.int32(action_choices[state]) # get action to play\n        action = np.int32(np.random.randint(3))\n        state = 0 # remain at state 0\n        if (showit): print('FSM_agentX() step 0. action', action, 'state', state)\n        return (state, action)\n    \n    # find new state based on condion (win, lose, tie)\n    if (prev_friend_act == prev_foe_act): condition = 2 # tie\n    elif (prev_friend_act == (prev_foe_act +1) % 3): condition = 0 # win\n    else: condition = 1 # lose\n    \n    #if (condition != 0): #only change state on a loss or tie\n    state = state_choices[state, condition] # get next state\n    a = np.int32(action_choices[state]) # get action to play\n        \n    if (a < 3): # pick action relative to filter_move\n        action = (filter_move + a) % 3\n    else: action = int(np.random.randint(3))\n    if (showit): \n        print('FSM_agentX() state', state, 'action', action )\n    return (state, action)       \n\n\nclass INDIVIDUAL():\n    \"\"\"\n    This class holds an individual for a GA.\n    It represents a finite state machine to play Roshambo.\n    \"\"\"\n    def __init__(self):\n        self.N = 200 # number of states\n        self.action_choices = np.zeros((self.N), np.int32) # coded state table (0-4)\n        self.state_choices = np.zeros((self.N, 3), np.int32) # coded state table (0-N)\n  \nF =  INDIVIDUAL() \nF.action_choices = pickle.loads(b'\\x80\\x04\\x95\\xad\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x15numpy.core.multiarray\\x94\\x8c\\x0c_reconstruct\\x94\\x93\\x94\\x8c\\x05numpy\\x94\\x8c\\x07ndarray\\x94\\x93\\x94K\\x00\\x85\\x94C\\x01b\\x94\\x87\\x94R\\x94(K\\x01K\\xc8\\x85\\x94h\\x03\\x8c\\x05dtype\\x94\\x93\\x94\\x8c\\x02i4\\x94K\\x00K\\x01\\x87\\x94R\\x94(K\\x03\\x8c\\x01<\\x94NNNJ\\xff\\xff\\xff\\xffJ\\xff\\xff\\xff\\xffK\\x00t\\x94b\\x89B \\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x94t\\x94b.')\nF.state_choices  = pickle.loads(b'\\x80\\x04\\x95\\xef\\t\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x15numpy.core.multiarray\\x94\\x8c\\x0c_reconstruct\\x94\\x93\\x94\\x8c\\x05numpy\\x94\\x8c\\x07ndarray\\x94\\x93\\x94K\\x00\\x85\\x94C\\x01b\\x94\\x87\\x94R\\x94(K\\x01K\\xc8K\\x03\\x86\\x94h\\x03\\x8c\\x05dtype\\x94\\x93\\x94\\x8c\\x02i4\\x94K\\x00K\\x01\\x87\\x94R\\x94(K\\x03\\x8c\\x01<\\x94NNNJ\\xff\\xff\\xff\\xffJ\\xff\\xff\\xff\\xffK\\x00t\\x94b\\x89B`\\t\\x00\\x00D\\x00\\x00\\x00^\\x00\\x00\\x00 \\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x17\\x00\\x00\\x00\\xc4\\x00\\x00\\x00;\\x00\\x00\\x00e\\x00\\x00\\x00<\\x00\\x00\\x00y\\x00\\x00\\x00 \\x00\\x00\\x00$\\x00\\x00\\x00M\\x00\\x00\\x00\\x80\\x00\\x00\\x003\\x00\\x00\\x00\\x95\\x00\\x00\\x001\\x00\\x00\\x00\\x8a\\x00\\x00\\x00\\x8e\\x00\\x00\\x00H\\x00\\x00\\x00J\\x00\\x00\\x00n\\x00\\x00\\x00\\x00\\x00\\x00\\x00Z\\x00\\x00\\x00\\t\\x00\\x00\\x00\\xb6\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\xaf\\x00\\x00\\x00z\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x01\\x00\\x00\\x00)\\x00\\x00\\x00\\x0b\\x00\\x00\\x00^\\x00\\x00\\x00\\xc5\\x00\\x00\\x00\\x90\\x00\\x00\\x00\\xa0\\x00\\x00\\x00h\\x00\\x00\\x00\\xbb\\x00\\x00\\x00\\x0e\\x00\\x00\\x00o\\x00\\x00\\x00f\\x00\\x00\\x00\\x90\\x00\\x00\\x00\\xc2\\x00\\x00\\x00\\xc5\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x00\\x00\\x00}\\x00\\x00\\x00$\\x00\\x00\\x00C\\x00\\x00\\x00P\\x00\\x00\\x00\\x91\\x00\\x00\\x00\"\\x00\\x00\\x00\\xad\\x00\\x00\\x00\\xb8\\x00\\x00\\x00\\xb9\\x00\\x00\\x005\\x00\\x00\\x00f\\x00\\x00\\x00\\xac\\x00\\x00\\x00\\xad\\x00\\x00\\x00\\xae\\x00\\x00\\x00\\x87\\x00\\x00\\x00q\\x00\\x00\\x00\\x9f\\x00\\x00\\x00\\xbe\\x00\\x00\\x00b\\x00\\x00\\x00\\x04\\x00\\x00\\x00R\\x00\\x00\\x00C\\x00\\x00\\x00t\\x00\\x00\\x00\\x80\\x00\\x00\\x00\\x84\\x00\\x00\\x00A\\x00\\x00\\x00%\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\xa9\\x00\\x00\\x00d\\x00\\x00\\x004\\x00\\x00\\x00`\\x00\\x00\\x00V\\x00\\x00\\x00t\\x00\\x00\\x00\\xb8\\x00\\x00\\x00,\\x00\\x00\\x00\\x8d\\x00\\x00\\x00>\\x00\\x00\\x00\\xa3\\x00\\x00\\x00C\\x00\\x00\\x00a\\x00\\x00\\x00\\x8c\\x00\\x00\\x00e\\x00\\x00\\x00h\\x00\\x00\\x00B\\x00\\x00\\x00\\xb3\\x00\\x00\\x00\\x9d\\x00\\x00\\x00Z\\x00\\x00\\x00\\xa2\\x00\\x00\\x00,\\x00\\x00\\x00g\\x00\\x00\\x00\/\\x00\\x00\\x00D\\x00\\x00\\x00 \\x00\\x00\\x00B\\x00\\x00\\x00%\\x00\\x00\\x00\\x00\\x00\\x00\\x003\\x00\\x00\\x00j\\x00\\x00\\x00l\\x00\\x00\\x00\\xa8\\x00\\x00\\x005\\x00\\x00\\x00\\xb4\\x00\\x00\\x00S\\x00\\x00\\x00?\\x00\\x00\\x00 \\x00\\x00\\x00>\\x00\\x00\\x00\\x91\\x00\\x00\\x00^\\x00\\x00\\x00\\xc4\\x00\\x00\\x00\\xb1\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\xac\\x00\\x00\\x00\\x90\\x00\\x00\\x00,\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x84\\x00\\x00\\x002\\x00\\x00\\x00\\x93\\x00\\x00\\x00\/\\x00\\x00\\x00\\x8a\\x00\\x00\\x00q\\x00\\x00\\x00\\xa1\\x00\\x00\\x00\\x90\\x00\\x00\\x00\\'\\x00\\x00\\x00z\\x00\\x00\\x00\\xa0\\x00\\x00\\x00\\xa3\\x00\\x00\\x00\\x16\\x00\\x00\\x00T\\x00\\x00\\x00\\x9e\\x00\\x00\\x00\\x1f\\x00\\x00\\x00A\\x00\\x00\\x00\\x8e\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x92\\x00\\x00\\x00A\\x00\\x00\\x00\\\\\\x00\\x00\\x00B\\x00\\x00\\x00@\\x00\\x00\\x00|\\x00\\x00\\x00\\xb3\\x00\\x00\\x00f\\x00\\x00\\x00\\x05\\x00\\x00\\x003\\x00\\x00\\x00\\x91\\x00\\x00\\x00\\x8d\\x00\\x00\\x00~\\x00\\x00\\x00H\\x00\\x00\\x00n\\x00\\x00\\x00\\x08\\x00\\x00\\x00l\\x00\\x00\\x00\\xc1\\x00\\x00\\x00>\\x00\\x00\\x00\/\\x00\\x00\\x00|\\x00\\x00\\x00\\x92\\x00\\x00\\x00\\xc0\\x00\\x00\\x00\\x9f\\x00\\x00\\x00\\x11\\x00\\x00\\x000\\x00\\x00\\x00\\x06\\x00\\x00\\x007\\x00\\x00\\x00y\\x00\\x00\\x00\\xa2\\x00\\x00\\x00\\x98\\x00\\x00\\x00\\xc5\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\xb6\\x00\\x00\\x000\\x00\\x00\\x00\\x97\\x00\\x00\\x00\\x01\\x00\\x00\\x00c\\x00\\x00\\x00\\xa8\\x00\\x00\\x00-\\x00\\x00\\x00u\\x00\\x00\\x00\\xb6\\x00\\x00\\x00\\xba\\x00\\x00\\x00\\x06\\x00\\x00\\x00W\\x00\\x00\\x009\\x00\\x00\\x00m\\x00\\x00\\x00\\x9d\\x00\\x00\\x00\\x89\\x00\\x00\\x00\\x1b\\x00\\x00\\x00\\xb7\\x00\\x00\\x00(\\x00\\x00\\x00+\\x00\\x00\\x00W\\x00\\x00\\x00i\\x00\\x00\\x00\\xc6\\x00\\x00\\x00\\xc3\\x00\\x00\\x00\\xa4\\x00\\x00\\x00X\\x00\\x00\\x007\\x00\\x00\\x00w\\x00\\x00\\x009\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\xaf\\x00\\x00\\x00@\\x00\\x00\\x00\\x8c\\x00\\x00\\x00z\\x00\\x00\\x00@\\x00\\x00\\x00v\\x00\\x00\\x00.\\x00\\x00\\x00A\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\xb7\\x00\\x00\\x00&\\x00\\x00\\x00\\'\\x00\\x00\\x00\\'\\x00\\x00\\x00\\x17\\x00\\x00\\x00f\\x00\\x00\\x00\\xb4\\x00\\x00\\x00e\\x00\\x00\\x00\\x17\\x00\\x00\\x00\\xa5\\x00\\x00\\x00?\\x00\\x00\\x00\\xaf\\x00\\x00\\x00E\\x00\\x00\\x00\\xa2\\x00\\x00\\x00E\\x00\\x00\\x00N\\x00\\x00\\x00\\xa2\\x00\\x00\\x00\\xb6\\x00\\x00\\x00D\\x00\\x00\\x00\\xaa\\x00\\x00\\x00}\\x00\\x00\\x00\\'\\x00\\x00\\x00\\x9d\\x00\\x00\\x00\\x85\\x00\\x00\\x00\\xa6\\x00\\x00\\x00\\'\\x00\\x00\\x00k\\x00\\x00\\x00\\xbf\\x00\\x00\\x00G\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x89\\x00\\x00\\x00=\\x00\\x00\\x00z\\x00\\x00\\x00U\\x00\\x00\\x00\\x80\\x00\\x00\\x00\\x93\\x00\\x00\\x00=\\x00\\x00\\x00\\xbd\\x00\\x00\\x00\\t\\x00\\x00\\x00,\\x00\\x00\\x00r\\x00\\x00\\x00\\x0b\\x00\\x00\\x00X\\x00\\x00\\x00\\x8d\\x00\\x00\\x00K\\x00\\x00\\x00y\\x00\\x00\\x00\\xb7\\x00\\x00\\x00\\xaf\\x00\\x00\\x00M\\x00\\x00\\x00s\\x00\\x00\\x00\\t\\x00\\x00\\x009\\x00\\x00\\x00\\x03\\x00\\x00\\x00T\\x00\\x00\\x00i\\x00\\x00\\x00@\\x00\\x00\\x00k\\x00\\x00\\x00\\x93\\x00\\x00\\x00\\x9d\\x00\\x00\\x00~\\x00\\x00\\x00^\\x00\\x00\\x00\\xa8\\x00\\x00\\x00r\\x00\\x00\\x00\\x94\\x00\\x00\\x00\\x9e\\x00\\x00\\x00&\\x00\\x00\\x00m\\x00\\x00\\x001\\x00\\x00\\x00}\\x00\\x00\\x00?\\x00\\x00\\x00r\\x00\\x00\\x00?\\x00\\x00\\x00\\x13\\x00\\x00\\x00%\\x00\\x00\\x00\\x1b\\x00\\x00\\x00R\\x00\\x00\\x00:\\x00\\x00\\x00}\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xc5\\x00\\x00\\x00e\\x00\\x00\\x00\\x17\\x00\\x00\\x00\\x9e\\x00\\x00\\x00\\x1f\\x00\\x00\\x00Z\\x00\\x00\\x00G\\x00\\x00\\x00\\xc0\\x00\\x00\\x00^\\x00\\x00\\x00}\\x00\\x00\\x00\\xa6\\x00\\x00\\x00Z\\x00\\x00\\x00P\\x00\\x00\\x00\\xb3\\x00\\x00\\x00\\\\\\x00\\x00\\x00\\xc5\\x00\\x00\\x00\\x9e\\x00\\x00\\x00\\xb8\\x00\\x00\\x00M\\x00\\x00\\x007\\x00\\x00\\x00\\x8d\\x00\\x00\\x00\\xa3\\x00\\x00\\x00D\\x00\\x00\\x00\\x8d\\x00\\x00\\x00\\x9a\\x00\\x00\\x00=\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x14\\x00\\x00\\x00 \\x00\\x00\\x00\\xb7\\x00\\x00\\x00\\x0c\\x00\\x00\\x007\\x00\\x00\\x00B\\x00\\x00\\x00<\\x00\\x00\\x00\\xc6\\x00\\x00\\x00j\\x00\\x00\\x00U\\x00\\x00\\x00~\\x00\\x00\\x00@\\x00\\x00\\x00\\x81\\x00\\x00\\x00\\xb2\\x00\\x00\\x00&\\x00\\x00\\x00G\\x00\\x00\\x00s\\x00\\x00\\x00R\\x00\\x00\\x00\\x96\\x00\\x00\\x00\\xb2\\x00\\x00\\x00&\\x00\\x00\\x00\\x9d\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\"\\x00\\x00\\x003\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8d\\x00\\x00\\x00\\xc5\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xa3\\x00\\x00\\x00\\x99\\x00\\x00\\x00c\\x00\\x00\\x00$\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xad\\x00\\x00\\x00\\xb0\\x00\\x00\\x00\\x13\\x00\\x00\\x00U\\x00\\x00\\x00\\xab\\x00\\x00\\x00\\xb7\\x00\\x00\\x00]\\x00\\x00\\x00Y\\x00\\x00\\x00\"\\x00\\x00\\x00\\x89\\x00\\x00\\x00~\\x00\\x00\\x00\\x93\\x00\\x00\\x00q\\x00\\x00\\x00\\xc1\\x00\\x00\\x00b\\x00\\x00\\x00\\x18\\x00\\x00\\x00,\\x00\\x00\\x00~\\x00\\x00\\x00\\x90\\x00\\x00\\x00\\xa2\\x00\\x00\\x00V\\x00\\x00\\x00r\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\'\\x00\\x00\\x00M\\x00\\x00\\x00\\x11\\x00\\x00\\x00Y\\x00\\x00\\x00`\\x00\\x00\\x00\\x9f\\x00\\x00\\x00\\xa0\\x00\\x00\\x00z\\x00\\x00\\x00\\xbc\\x00\\x00\\x00\\x8c\\x00\\x00\\x00q\\x00\\x00\\x00\/\\x00\\x00\\x00\\x89\\x00\\x00\\x00\\xb5\\x00\\x00\\x002\\x00\\x00\\x00\\x1c\\x00\\x00\\x00n\\x00\\x00\\x00\\x93\\x00\\x00\\x00\\t\\x00\\x00\\x00\\xa9\\x00\\x00\\x00\\x83\\x00\\x00\\x00\\x81\\x00\\x00\\x00\\x16\\x00\\x00\\x00\\xb3\\x00\\x00\\x00\\xc0\\x00\\x00\\x00%\\x00\\x00\\x00]\\x00\\x00\\x00X\\x00\\x00\\x00\\x07\\x00\\x00\\x00\/\\x00\\x00\\x00\\xc3\\x00\\x00\\x00\\x99\\x00\\x00\\x00\\x06\\x00\\x00\\x00A\\x00\\x00\\x00P\\x00\\x00\\x00Q\\x00\\x00\\x00@\\x00\\x00\\x00\\x92\\x00\\x00\\x00\\xc7\\x00\\x00\\x00\\x94\\x00\\x00\\x00\\r\\x00\\x00\\x00\\xc2\\x00\\x00\\x00\\x11\\x00\\x00\\x002\\x00\\x00\\x00R\\x00\\x00\\x00i\\x00\\x00\\x00\\xbd\\x00\\x00\\x00e\\x00\\x00\\x00\\xbd\\x00\\x00\\x00\\x91\\x00\\x00\\x00O\\x00\\x00\\x00\\x93\\x00\\x00\\x00\\x19\\x00\\x00\\x00o\\x00\\x00\\x00\\x97\\x00\\x00\\x00\"\\x00\\x00\\x00\\x0e\\x00\\x00\\x00A\\x00\\x00\\x00\\n\\x00\\x00\\x00:\\x00\\x00\\x00 \\x00\\x00\\x00\\t\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\xae\\x00\\x00\\x00>\\x00\\x00\\x00\\x92\\x00\\x00\\x00\\x16\\x00\\x00\\x00E\\x00\\x00\\x00\\xa7\\x00\\x00\\x00\\x1d\\x00\\x00\\x00h\\x00\\x00\\x00B\\x00\\x00\\x00\\x10\\x00\\x00\\x00w\\x00\\x00\\x00m\\x00\\x00\\x00,\\x00\\x00\\x00P\\x00\\x00\\x00\\x90\\x00\\x00\\x00\\xb2\\x00\\x00\\x00\\xab\\x00\\x00\\x00o\\x00\\x00\\x00\\xc4\\x00\\x00\\x00\\x13\\x00\\x00\\x004\\x00\\x00\\x00D\\x00\\x00\\x00o\\x00\\x00\\x00\\x1d\\x00\\x00\\x00+\\x00\\x00\\x00\\x03\\x00\\x00\\x00`\\x00\\x00\\x008\\x00\\x00\\x00\\n\\x00\\x00\\x00n\\x00\\x00\\x00<\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\"\\x00\\x00\\x00{\\x00\\x00\\x00\\x18\\x00\\x00\\x00!\\x00\\x00\\x00\\xb4\\x00\\x00\\x003\\x00\\x00\\x00\\x8d\\x00\\x00\\x00c\\x00\\x00\\x00\\'\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x9e\\x00\\x00\\x00\\x1f\\x00\\x00\\x00\\xc5\\x00\\x00\\x00\\xc2\\x00\\x00\\x00\\xb1\\x00\\x00\\x00L\\x00\\x00\\x00m\\x00\\x00\\x00=\\x00\\x00\\x00~\\x00\\x00\\x00\\x83\\x00\\x00\\x00\\x9c\\x00\\x00\\x00L\\x00\\x00\\x003\\x00\\x00\\x00\\xb5\\x00\\x00\\x00\\x9c\\x00\\x00\\x00.\\x00\\x00\\x00[\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x19\\x00\\x00\\x00~\\x00\\x00\\x00\\xc1\\x00\\x00\\x00\\x9f\\x00\\x00\\x00u\\x00\\x00\\x00\\x98\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\xc1\\x00\\x00\\x00\\xba\\x00\\x00\\x00\\x82\\x00\\x00\\x00\\x83\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x85\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\t\\x00\\x00\\x00\\x80\\x00\\x00\\x00~\\x00\\x00\\x00\\x94\\x00\\x00\\x00\\xbf\\x00\\x00\\x00F\\x00\\x00\\x00\\x0c\\x00\\x00\\x00*\\x00\\x00\\x00\\x00\\x00\\x00\\x00u\\x00\\x00\\x00.\\x00\\x00\\x00\\xbb\\x00\\x00\\x003\\x00\\x00\\x00\\xaa\\x00\\x00\\x00o\\x00\\x00\\x00\\xaf\\x00\\x00\\x00\\xb5\\x00\\x00\\x00q\\x00\\x00\\x00\\x02\\x00\\x00\\x00D\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\xab\\x00\\x00\\x000\\x00\\x00\\x00\\xa4\\x00\\x00\\x00\\xc5\\x00\\x00\\x00y\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\xbf\\x00\\x00\\x00s\\x00\\x00\\x00w\\x00\\x00\\x00\\x99\\x00\\x00\\x00\\xbf\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x1e\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x90\\x00\\x00\\x00[\\x00\\x00\\x00\\x94\\x00\\x00\\x00\\xa3\\x00\\x00\\x00\"\\x00\\x00\\x00\\x0c\\x00\\x00\\x00L\\x00\\x00\\x00\\x11\\x00\\x00\\x00w\\x00\\x00\\x00\\xa3\\x00\\x00\\x00\\xac\\x00\\x00\\x00\\xbb\\x00\\x00\\x00\\xc7\\x00\\x00\\x00a\\x00\\x00\\x00\\xaa\\x00\\x00\\x00\\xbf\\x00\\x00\\x00\\xc1\\x00\\x00\\x00\\xa9\\x00\\x00\\x00\\xab\\x00\\x00\\x00_\\x00\\x00\\x007\\x00\\x00\\x002\\x00\\x00\\x00\\x90\\x00\\x00\\x00R\\x00\\x00\\x00>\\x00\\x00\\x00R\\x00\\x00\\x00\\x8c\\x00\\x00\\x00\\x03\\x00\\x00\\x005\\x00\\x00\\x00\\xc6\\x00\\x00\\x00\\xc2\\x00\\x00\\x00\\x8d\\x00\\x00\\x00$\\x00\\x00\\x00\\x95\\x00\\x00\\x00\\xa6\\x00\\x00\\x003\\x00\\x00\\x00\\xa0\\x00\\x00\\x00\\xaa\\x00\\x00\\x00]\\x00\\x00\\x00\\x17\\x00\\x00\\x00Y\\x00\\x00\\x00\\t\\x00\\x00\\x00j\\x00\\x00\\x00!\\x00\\x00\\x005\\x00\\x00\\x00#\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x94t\\x94b.')\n\n\n \ndef survivor_bias(observation, configuration):\n    \"\"\" Main \"\"\"\n    global Gprev_friend_move, Gprev_foe_move, GFB, Gfriend_moves, Gfoe_moves, Gpredicted, Gpayoffs, Gstate\n    trials = 1000\n    s = observation.step\n    \n    if (s == 0):\n        Gstate = 0\n        # make some dummy sizes\n        GFB, Gpredicted, Gpayoffs = sloppy_init()\n        Gprev_foe_move = -1\n        Gprev_friend_move = -1\n        Gfriend_moves = np.zeros(trials, np.int32)\n        Gfoe_moves    = np.zeros(trials, np.int32)\n    if (s > 0):\n        Gprev_foe_move = observation.lastOpponentAction\n        Gfriend_moves[s - 1] = Gprev_friend_move\n        Gfoe_moves   [s - 1] = Gprev_foe_move\n    # Call  run_great_filters() to get a prediction for the best move to play\n    # This routine takes 'forcing moves' and can easily be added to an ensemble\n    filter_move, GFB, Gpredicted, Gpayoffs = run_great_filters(s, Gfriend_moves, Gfoe_moves, GFB, Gpredicted, Gpayoffs)\n    # But the filter_move is passed to the evolved finite state machine, which treats it as merely a suggestion.\n    # The finite state machine won't work in an ensemble\n    Gstate, Gfriend_move = FSM_agentX(s, Gprev_friend_move, Gprev_foe_move, Gstate, filter_move, F.state_choices, F.action_choices) \n    Gprev_friend_move = Gfriend_move\n        \n    return int(Gfriend_move)","996e5bed":"> At the moment of writing, this agent is at the top of the leaderboard. (But there's a lot of luck involved and much can happen in the next couple weeks.)\n\nThe notebook at \nhttps:\/\/www.kaggle.com\/glazed\/evolving-finite-state-machines \nshows how to evolve the finite state machine"}}