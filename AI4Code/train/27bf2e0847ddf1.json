{"cell_type":{"461cbb42":"code","d11e3505":"code","4aa27480":"code","97dd55aa":"code","42d19c32":"code","c18396f3":"code","7a70b90d":"code","b7516649":"code","692e5e28":"code","2ba4a093":"code","c12b28fe":"code","0848fbc9":"code","98ce5934":"code","5cedb550":"code","3d6319ec":"code","af67bcfe":"code","e091a80f":"code","2a8d0513":"markdown","0f116f0e":"markdown","ffca967a":"markdown","cd86cd0b":"markdown","feac5e77":"markdown"},"source":{"461cbb42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #visualization","d11e3505":"# Read dataset\ndataset = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/train.csv\")","4aa27480":"dataset.head()","97dd55aa":"# You can change the country variable to your prefer\nprint(dataset['Country_Region'].unique())\ncountry = 'Turkey'","42d19c32":"# Country's data was taken since the first case\ncountry_cases = dataset[dataset.Country_Region == country]\ndf =  country_cases[country_cases.ConfirmedCases != 0.0]\nprint(df)","c18396f3":"print(df.info())\nprint(df.describe())\ntotal_days = max(df.Id) - min(df.Id) + 1 \ntotal_cases = max(df.ConfirmedCases)\ntotal_deaths = max(df.Fatalities)\nprint(\"Number of days since the first case:\", total_days)","7a70b90d":"plt.figure(figsize=(30,10))    \nplt.plot(df.Date, df.ConfirmedCases, color = 'blue', label = 'Cases')\nplt.title('Coronavirus Cases Graph', fontsize=30)\nplt.legend(frameon=True, fontsize=20)\nplt.xticks(np.arange(0, total_days, int(total_days\/10)), fontsize = 15) #xlabel data freq\nplt.yticks(np.arange(0, total_cases, int(total_cases\/5)), fontsize = 15) #ylabel data freq\nplt.xlabel('Dates', fontsize=20)\nplt.ylabel('Cases', fontsize=20)\nplt.grid(True)\nplt.show()","b7516649":"plt.figure(figsize=(30,10)) \nplt.plot(df.Date ,df.Fatalities, color = 'red', label = 'Deaths')\nplt.title('Coronavirus Deaths Graph', fontsize=30)\nplt.legend(frameon=True, fontsize=20)\nplt.xticks(np.arange(0, total_days, int(total_days\/10)), fontsize = 15) \nplt.yticks(np.arange(0, total_deaths, int(total_deaths\/5)),fontsize = 15) \nplt.xlabel('Dates', fontsize=20)\nplt.ylabel('Deaths', fontsize=20)\nplt.grid(True)\nplt.show()","692e5e28":"plt.figure(figsize=(30,10))\nplt.bar(df.Date, df.ConfirmedCases, color = 'blue', label = 'Cases')\nplt.xticks(np.arange(0, total_days, int(total_days\/10)),fontsize = 15)\nplt.yticks(np.arange(0, total_cases, int(total_cases\/5)), fontsize = 15)\nplt.xlabel('Dates', fontsize=20)\nplt.ylabel('Cases',fontsize=20)\nplt.legend(frameon=True, fontsize=20)\nplt.grid(True)\nplt.show()","2ba4a093":"plt.figure(figsize=(30,10))\nplt.bar(df.Date, df.Fatalities, color = 'red', label = 'Deaths')\nplt.xticks(np.arange(0, total_days, int(total_days\/10)),fontsize = 15)\nplt.yticks(np.arange(0, total_deaths, int(total_deaths\/5)),fontsize = 15)\nplt.xlabel('Dates', fontsize=20)\nplt.ylabel('Deaths',fontsize=20)\nplt.legend(frameon=True, fontsize=20)\nplt.grid(True)\nplt.show()","c12b28fe":"days_array = np.arange(1,total_days+1).reshape(total_days,1)\ncase_array = np.array(df.ConfirmedCases).reshape(total_days,1)\ndeath_array = np.array(df.Fatalities).reshape(total_days,1)\nprint(days_array.shape)\nprint(case_array.shape)\nprint(death_array.shape)\n# Now we got same shapes for models","0848fbc9":"from sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\ncase_poly_reg = PolynomialFeatures(degree = 4)\nX_poly = case_poly_reg.fit_transform(days_array) # X axis\ncase_poly_reg.fit(X_poly, case_array) # model fit to predict y axis\ncase_lin_reg = LinearRegression()\ncase_lin_reg.fit(X_poly, case_array)","98ce5934":"plt.scatter(days_array, case_array, color = 'blue')\nplt.plot(days_array, case_lin_reg.predict(case_poly_reg.fit_transform(days_array)), color = 'green')\nplt.title('Case Graph between days 1 and '+ str(total_days))\nplt.xlabel('Dates')\nplt.ylabel('Cases')\nplt.grid(True)\nplt.show()\n# Dots are accurate datas\n# Line is predict datas","5cedb550":"death_poly_reg = PolynomialFeatures(degree = 4)\nX_poly = death_poly_reg.fit_transform(days_array) # X axis\ndeath_poly_reg.fit(X_poly, death_array) # model fit to predict y axis\ndeath_lin_reg = LinearRegression()\ndeath_lin_reg.fit(X_poly, death_array)","3d6319ec":"plt.scatter(days_array, death_array, color = 'red')\nplt.plot(days_array, death_lin_reg.predict(death_poly_reg.fit_transform(days_array)), color = 'green')\nplt.title('Death Graph between days 1 and '+ str(total_days) )\nplt.xlabel('Days')\nplt.ylabel('Deaths')\nplt.grid(True)\nplt.show()\n# Dots are accurate datas\n# Line is predict datas","af67bcfe":"total_cases = max(df.ConfirmedCases)\ntotal_deaths = max(df.Fatalities)\npred_now_cases = int(case_lin_reg.predict(case_poly_reg.fit_transform([[total_days]])))\npred_now_deaths = int(death_lin_reg.predict(death_poly_reg.fit_transform([[total_days]])))\nfault_margin_cases = int(pred_now_cases - total_cases)\nfault_margin_deaths = int(pred_now_deaths - total_deaths)\nprint(\"Predict Today Cases and Deaths: \", pred_now_cases, \" \", pred_now_deaths)\nprint(\"Fault Margin for Cases and Deaths: \", fault_margin_cases, \" \", fault_margin_deaths)","e091a80f":"# Predict cases and deaths for next day\npred_nextday_cases = int(case_lin_reg.predict(case_poly_reg.fit_transform([[total_days+1]])))\npred_nextday_deaths = int(death_lin_reg.predict(death_poly_reg.fit_transform([[total_days+1]])))\nprint(\"Predict Next Day Cases and Deaths\")\nprint(\"Cases: \", pred_nextday_cases , \" Deaths: \", pred_nextday_deaths)","2a8d0513":"**Now we will predict what the numbers of cases and deaths will be in the following periods**","0f116f0e":"**This notebook tracks the spread of the new coronavirus, also known as SARS-CoV-2. It makes the visualization and estimation of this data. This notebook will inform us about the progress of the case and deaths.**","ffca967a":"**We will write information about dataset for columns and datas\nDescribe: mean, min, max values\nand we'll calculate total days, cases and deaths**","cd86cd0b":"# **Linear and Polynomial Regression for one country**","feac5e77":"* Now we can predict total cases and deaths for next day\n* These datas are only estimates datas.\n* If you try to predict next days's datas, you can get a high fault margin."}}