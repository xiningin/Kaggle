{"cell_type":{"4556871b":"code","5e07c0e0":"code","e4aa1037":"code","fb6e1dc1":"code","6dc7cdb0":"code","aba14c5a":"code","e3bbadad":"code","afed6b8a":"code","19bf7ee4":"code","461265ce":"code","8062e23b":"code","9c651312":"code","1a3fbc1d":"code","da9da6c2":"code","22919ea7":"code","00202e83":"code","8e0748da":"code","8cf504f6":"code","ad8beb25":"code","ed244afc":"code","b253056d":"code","35faa386":"code","bea1bdbe":"code","9f4f4158":"code","21d0a6c4":"code","c97ba144":"code","e6989ee6":"code","87fd3f8f":"code","cd4562ab":"code","0480630b":"code","39b66e05":"code","fb4a85ad":"code","d48d286c":"code","12d6ca76":"code","12da3c8a":"code","e57dab4d":"code","b8825567":"code","b14672fd":"code","bef50bac":"code","cefa25d7":"code","0bb59f27":"code","131f0de4":"code","9843909c":"markdown","80d7c86d":"markdown","60fc6024":"markdown","6d239d55":"markdown","c6d55536":"markdown","76ead6ee":"markdown","63a040bd":"markdown","64e3e2a3":"markdown","0d2e7ebe":"markdown","a10d64d8":"markdown","a6b71267":"markdown","e826128a":"markdown","b69e4c91":"markdown","ffe9e768":"markdown","e36b8457":"markdown","0353f811":"markdown","cfe4d665":"markdown","94b2f6f6":"markdown","c531222a":"markdown","380e5d20":"markdown"},"source":{"4556871b":"import pandas_datareader as pdr\nimport os\n# TIINGO_API_KEY = #find key on tiingo\n# # API KEY, you can find yours by upper link","5e07c0e0":"# df = pdr.get_data_tiingo('AAPL', api_key='paste your api key herere')","e4aa1037":"# df.to_csv('AAPL.csv')","fb6e1dc1":"import pandas as pd","6dc7cdb0":"df = pd.read_csv('..\/input\/stock-prices-google-apple\/GOOG.csv')","aba14c5a":"# Top 10 rows of df\ndf.head(10)","e3bbadad":"# last 10 rows\ndf.tail()","afed6b8a":"df1 = df.reset_index()['close']","19bf7ee4":"df1.shape","461265ce":"df1.head()","8062e23b":"import matplotlib.pyplot as plt\nplt.plot(df1)","9c651312":"df1","1a3fbc1d":"import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0,1))\ndf1 = scaler.fit_transform(np.array(df1).reshape(-1,1))","da9da6c2":"df1.shape","22919ea7":"df1","00202e83":"#Splitting dataset into train and test split\ntraining_size = int(len(df1)*0.65)\ntest_size = len(df1)-training_size\ntrain_data, test_data = df1[0:training_size,:], df1[training_size:len(df1),:1]","8e0748da":"# Convert an array of values into dataset matrix\ndef create_dataset(dataset, time_step=1):\n    dataX, dataY = [],[]\n    for i in range(len(dataset)-time_step-1):\n        a = dataset[i:(i+time_step), 0] ## i=0,1,2,3..\n        dataX.append(a)\n        dataY.append(dataset[i+time_step, 0])\n    return np.array(dataX), np.array(dataY)","8cf504f6":"#reshape into X=t, t+1, t+2, t+3 and Y=t+4\ntime_step = 100\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, y_test = create_dataset(test_data, time_step)","ad8beb25":"print(X_train.shape), print(y_train.shape)","ed244afc":"print(X_test.shape), print(y_test.shape)","b253056d":"#reshape input to be [samples, time_steps, features] which is required for LSTM\nX_train = X_train.reshape(X_train.shape[0], X_train.shape[1],1)\nX_test = X_test.reshape(X_test.shape[0], X_test.shape[1],1)\n# Coverting X_train & y_train into 3 dimensions","35faa386":"print(X_train.shape), print(y_train.shape)","bea1bdbe":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM","9f4f4158":"model = Sequential()\nmodel.add(LSTM(50, return_sequences=True, input_shape=(100,1)))\nmodel.add(LSTM(50, return_sequences=True))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')","21d0a6c4":"model.summary()","c97ba144":"model.fit(X_train, y_train, validation_data=(X_test,y_test),epochs=100, batch_size=64,verbose=1)","e6989ee6":"#Let's do the predictions\ntrain_predict = model.predict(X_train)\ntest_predict = model.predict(X_test)","87fd3f8f":"#Transform back to original form\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)","cd4562ab":"#Calculate Root Mean Squared Error (RMSE) performance matrix\nimport math\nfrom sklearn.metrics import mean_squared_error\ntest_mse = mean_squared_error(y_train, train_predict)\ntest_rmse = math.sqrt(test_mse)\nprint(\"Root Mean Squared of train: \",test_rmse)","0480630b":"#test data rmse\ntest_mse = mean_squared_error(y_test, test_predict)\ntest_rsme= math.sqrt(test_mse)\nprint(\"Root Mean squared of test: \", test_rsme)","39b66e05":"# shift train predictions for plotting\nlook_back = 100\ntrainPredictPlot = np.empty_like(df1)\ntrainPredictPlot[:,:] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\n#shift test predictions for plotting\ntestPredictPlot = np.empty_like(df1)\ntestPredictPlot[:,:] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1,:] = test_predict\n#plot baseline and predictions\nplt.plot(scaler.inverse_transform(df1))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()","fb4a85ad":"len(test_data)","d48d286c":"X_input = test_data[341:].reshape(1,-1)\nX_input.shape","12d6ca76":"temp_input = list(X_input)\ntemp_input = temp_input[0].tolist()","12da3c8a":"temp_input","e57dab4d":"#demonstarte predicion for next 10 days\nfrom numpy import array\n\nlst_op = []\nn_steps = 100\ni = 0\nwhile(i<30):\n    if(len(temp_input)>100):\n        print(temp_input)\n        X_input = np.array(temp_input[1:])\n        print(\"{} day input {}\".format(1, X_input))\n        X_input = X_input.reshape(1,-1)\n        X_input = X_input.reshape((1, n_steps, 1))\n        print(X_input)\n        yhat = model.predict(X_input, verbose=0)\n        print(\"{} day input {}\".format(i, yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input = temp_input[1:]\n        print(temp_input)\n        lst_op.extend(yhat.tolist())\n        i = i+1\n    else:\n        X_input = X_input.reshape((1, n_steps, 1))\n        yhat = model.predict(X_input, verbose=0)\n        print(yhat[0])\n        temp_input.extend(yhat[0].tolist())\n        print(len(temp_input))\n        lst_op.extend(yhat.tolist())\n        i = i+1","b8825567":"day_new = np.arange(1,101)\nday_pred = np.arange(101,131)","b14672fd":"len(df1)","bef50bac":"plt.plot(day_new, scaler.inverse_transform(df1[1157:]))\nplt.plot(day_pred, scaler.inverse_transform(lst_op))","cefa25d7":"df3 = df1.tolist()\ndf3.extend(lst_op)\nplt.plot(df3[1200:])","0bb59f27":"df3 = scaler.inverse_transform(df3).tolist()","131f0de4":"plt.plot(df3)","9843909c":"1. We will collect the stock Data - AAPL\n2. Preprocess the data - Train and Test\n3. Create an Stacked LSTM and Model\n4. Predict the test data and plot the output\n5. Predict the future 30 days and plot the output\n\n","80d7c86d":"# Let's Start","60fc6024":"Documentation of **pandas_datareader** : https:\/\/pandas-datareader.readthedocs.io\/en\/latest\/","6d239d55":"# Predictions and Evaluation of the model","c6d55536":"\n# Stock Market Prediction And Forecasting using stacked LSTM","76ead6ee":"# Visualization","63a040bd":"# API KEY for this project : ","64e3e2a3":"# You can use various techniques","0d2e7ebe":"# Scaling the data","a10d64d8":"- Google stock is bullish according to above chart","a6b71267":"# Train-Test-Split","e826128a":"## Create the stacked LSTM Model","b69e4c91":"# Creating LSTM Model","ffe9e768":"- LSTM are sensitive to the scale of the data, so we apply MinMaxScaler","e36b8457":"# Data Collection and libraries","0353f811":"# Visualizing the data","cfe4d665":"-  Find your api key from here : https:\/\/api.tiingo.com\/","94b2f6f6":"# Here I am taking data of Google, you can use Apple.","c531222a":"- Here our dataset is in **TimeSeries**, so we will split data into **train-test-split** according to Date","380e5d20":"## Process"}}