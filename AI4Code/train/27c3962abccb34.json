{"cell_type":{"ebbef461":"code","3fa13949":"code","c2008686":"code","a4333666":"code","3610156d":"code","1cd75db7":"code","c39b7417":"code","9caa7e0b":"code","84d1b14b":"code","02f9a554":"code","0a3e93f9":"code","49545538":"markdown","9b402206":"markdown","02241904":"markdown","410f9f41":"markdown","c1abe491":"markdown","88c2513c":"markdown","99fcea0b":"markdown","68fbae8d":"markdown","b26dfaf6":"markdown"},"source":{"ebbef461":"import pandas as pd\nimport numpy as np\n\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nsubmit = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\n","3fa13949":"#Treating Outliers\n\nx = [\"LotArea\",\"BsmtFinSF1\",\"BsmtFinSF2\",\"BsmtUnfSF\",\"GrLivArea\",\"GarageArea\"]\nq1=0\nq2=0\nfor i in x:\n    q1 <- train[x].quantile(0.95)\n    q2 <- train[x].quantile(0.05)\n    train[train[x] < q2][x] = q2\n    train[train[x] > q1][x] = q1","c2008686":"#Combine Data\ntest[\"SalePrice\"] = submit[\"SalePrice\"]\ndata = pd.concat([train,test]) \n\n#Renaming Columns\ndata = data.rename(columns={\"2ndFlrSF\": \"SndFlrSF\", \"1stFlrSF\":\"FrstFlrSF\", \n                     \"3SsnPorch\": \"TrdSsnPorch\"})\n\n#Visualise Y \ntrain[\"SalePrice\"].hist()\n\ndata = data.drop(columns=[\"Id\"])\ndata.shape","a4333666":"#Separate num and char data\n\ndata_num = data.select_dtypes(include=np.number)\ndata_chr = data.select_dtypes(exclude=np.number)\n\n#NA for numeric\ndata_num = data_num.fillna(0)\ndata_chr = data_chr.fillna(\"None\")\ndata_chr.shape","3610156d":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\n\nx = list(data_chr.columns)\nfor i in x:\n    data_chr[i] = le.fit_transform(data_chr[i])\n    \ndata_chr.head()","1cd75db7":"\nval= data_num.FrstFlrSF+data_num.SndFlrSF+data_num.TotalBsmtSF\ndata_num[\"TotalArea\"]=val\n\nval = data_num.FullBath + data_num.BsmtFullBath + 0.5*(data_num.HalfBath + data_num.BsmtHalfBath) \ndata_num[\"TotalBath\"] = val\n\nval = data_num.OpenPorchSF + data_num.ScreenPorch + data_num.TrdSsnPorch + data_num.EnclosedPorch + data_num.WoodDeckSF\ndata_num[\"TotalPorch\"] = val\n\ndata_chr.shape","c39b7417":"#Dropping too much NA columns\n\nfrom sklearn import preprocessing\ndata_chr = data_chr.drop(columns=[\"MiscFeature\",\"Fence\",\"PoolQC\",\"GarageCond\",\"GarageQual\",\n                                  \"GarageFinish\",\"GarageType\",\"FireplaceQu\",\"Alley\",\"MasVnrType\",\n                                  \"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\n                                  \"BsmtFinType2\"])\n\ndata_num = data_num.drop(columns=[\"GarageYrBlt\",\"MasVnrArea\",\"LotFrontage\"])\n\ndata_num2 = pd.DataFrame(preprocessing.scale(data_num.drop(columns={\"SalePrice\"})))\ndata_num2.columns = data_num.drop(columns=[\"SalePrice\"]).columns\n\ndata_chr.head()","9caa7e0b":"data_chr = data_chr.reset_index(drop=True)\ndata_num = data_num.reset_index(drop=True)\n\ndata=pd.concat([data_chr,data_num2], axis=1, join=\"inner\")\n\n#Split\ntrainD = pd.DataFrame(data[:1460])\ntestD = pd.DataFrame(data[1460:])\n\ntestD.head()","84d1b14b":"#Variable Importance\nfrom sklearn.ensemble import RandomForestRegressor\nmodelrf = RandomForestRegressor()\nmodelrf.fit(trainD, train[\"SalePrice\"])\n\nimp = modelrf.feature_importances_\nimpfeat = [0]*64\n\nfor i,v in enumerate(imp):\n    impfeat[i] = v\n\nimpfeat = pd.DataFrame(impfeat)\nimpfeat = impfeat.rename(columns={0:\"Imp\"})\nval = list(range(0,64))\nimpfeat[\"Index\"] = trainD.columns\n\nimpfeat = impfeat.sort_values(by=[\"Imp\"], ascending=False)\n\nfeatures = list(impfeat.Index.tail(25))\n\n#Dropping columns\ntrainD = trainD.drop(columns=features)\ntestD = testD.drop(columns=features)\n\n","02f9a554":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test =train_test_split(trainD,np.log(train[\"SalePrice\"]))\n\nmodelrf = RandomForestRegressor(max_depth=2000)\nmodelrf = modelrf.fit(x_train, y_train)\ny_pred=modelrf.predict(x_test)\n\nfrom sklearn.metrics import mean_squared_error\nmean_squared_error(y_test, y_pred)\n\n","0a3e93f9":"y_pred = modelrf.predict(testD)\nsubmit.SalePrice =np.exp( y_pred)\nsubmit.to_csv(\"houseprice.csv\", index=False)","49545538":"**Treating Outliers**\n","9b402206":"**Variable Importance**\n* Removing non important features","02241904":"**Label Encoding for categorical data**","410f9f41":"**Prediction**","c1abe491":"**Preprocess center and scale data**","88c2513c":"**Import Data**","99fcea0b":"**Combing some columns of data**","68fbae8d":"**Splitting train and test data**","b26dfaf6":"**Random Forest Model**"}}