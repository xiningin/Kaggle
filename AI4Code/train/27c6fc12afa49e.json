{"cell_type":{"ea51f422":"code","0d8f12e7":"code","712f9d97":"code","8c2f71d2":"code","6e8d3937":"code","9784e55d":"code","49b532e1":"code","28472ec4":"code","cf57b986":"code","acd5e728":"code","633291fb":"code","300d5c4c":"code","beea95dd":"code","c5b698b5":"code","ebfb0686":"code","c30a21d2":"code","de519fc3":"code","503b3054":"code","aafec46b":"code","4adc39cb":"code","dae83261":"code","a43a25bc":"code","cfc1b477":"code","135ec5bf":"code","6637def7":"code","49f15897":"code","4ac29a1c":"code","a98c0331":"code","91cde710":"code","314c13c5":"code","5e35134f":"code","35e569ce":"code","d4f1321a":"code","3e458f92":"markdown","e5cfd4e8":"markdown","cb380452":"markdown","8455e2de":"markdown","0e46d1eb":"markdown","433178d1":"markdown","1dc3a0b6":"markdown"},"source":{"ea51f422":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.utils import resample\nfrom sklearn.utils import shuffle\nfrom sklearn.preprocessing import StandardScaler","0d8f12e7":"df = pd.read_csv('..\/input\/water-potability\/water_potability.csv')\ndf.head()","712f9d97":"df.info()","8c2f71d2":"df.isnull().sum()","6e8d3937":"df.Potability.value_counts()","9784e55d":"df = df.dropna()\ndf.head()","49b532e1":"df.Potability.value_counts()","28472ec4":"df_notpotable  = df[df['Potability']==0]\ndf_potable = df[df['Potability']==1]\n\ndf_notpotable.head()","cf57b986":"df_potable_resample = resample(df_potable, replace = True, n_samples = 1200, random_state = 0)","acd5e728":"df = pd.concat([df_notpotable, df_potable_resample])\ndf.Potability.value_counts()","633291fb":"df = shuffle(df, random_state=0) ","300d5c4c":"df.hist(bins=10, figsize=(20,15), color = 'teal')","beea95dd":"fig = plt.figure(figsize=(25,10))\n \np1 = fig.add_subplot(2,2,1)\np1.hist(df.ph[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.ph[df.Potability == 1], bins=20, alpha = .4)\nplt.title('pH')\nplt.xlabel('pH')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\np1 = fig.add_subplot(2,2,2)\np1.hist(df.Hardness[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Hardness[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Hardness')\nplt.xlabel('Hardness')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\np1 = fig.add_subplot(2,2,3)\np1.hist(df.Solids[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Solids[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Solids')\nplt.xlabel('Solids')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\np1 = fig.add_subplot(2,2,4)\np1.hist(df.Chloramines[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Chloramines[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Chloramines')\nplt.xlabel('Chloramines')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n \nplt.subplots_adjust(wspace=.1, hspace=.3)\nplt.show()","c5b698b5":"fig = plt.figure(figsize=(25,10))\n\np1 = fig.add_subplot(2,2,1)\np1.hist(df.Sulfate[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Sulfate[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Sulfate')\nplt.xlabel('Sulfate')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\np1 = fig.add_subplot(2,2,2)\np1.hist(df.Conductivity[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Conductivity[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Conductivity')\nplt.xlabel('Conductivity')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\np1 = fig.add_subplot(2,2,3)\np1.hist(df.Organic_carbon[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Organic_carbon[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Organic_carbon')\nplt.xlabel('Organic_carbon')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\np1 = fig.add_subplot(2,2,4)\np1.hist(df.Trihalomethanes[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Trihalomethanes[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Trihalomethanes')\nplt.xlabel('Trihalomethanes')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\nplt.subplots_adjust(wspace=.1, hspace=.3)\nplt.show()","ebfb0686":"fig = plt.figure(figsize=(25,10))\n\np1 = fig.add_subplot(2,2,1)\np1.hist(df.Turbidity[df.Potability == 0], bins=20, alpha = .4)\np1.hist(df.Turbidity[df.Potability == 1], bins=20, alpha = .4)\nplt.title('Turbidity')\nplt.xlabel('Turbidity')\nplt.ylabel('Count')\nlabels = [\"0\", \"1\"]\nplt.legend(labels)\n\nplt.subplots_adjust(wspace=.1, hspace=.3)\nplt.show()","c30a21d2":"from pandas.plotting import scatter_matrix\nx = scatter_matrix(df, alpha=1, figsize=(40, 20), diagonal='hist')","de519fc3":"plt.figure(figsize = (15,9))\nsns.heatmap(df.corr(), annot = True)","503b3054":"df_corr = df.corr()\ndf_corr[\"Potability\"].sort_values(ascending=False)","aafec46b":"from sklearn.model_selection import train_test_split\nfrom tensorflow import keras\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.layers import LeakyReLU\nfrom tensorflow.keras import models\nfrom tensorflow.keras.layers import BatchNormalization, Dropout\nfrom tensorflow.keras.optimizers import Adam, Adagrad, RMSprop, SGD\nfrom tensorflow.keras.layers import Activation\nfrom sklearn.metrics import accuracy_score","4adc39cb":"x = df.drop(['Potability'], axis = 1)\ny = df['Potability']","dae83261":"st = StandardScaler()\nx_columns= x.columns\nx[x_columns] = st.fit_transform(x[x_columns])","a43a25bc":"x.head()","cfc1b477":"x.describe()","135ec5bf":"X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size = 0.2, random_state = 0)","6637def7":"X_val, X_test, Y_val, Y_test = train_test_split(X_test,Y_test, test_size = 0.5, random_state = 0)","49f15897":"X_train.shape","4ac29a1c":"# model = models.Sequential()\n\n# model.add(layers.Dense(16, input_shape=(9,)))\n# model.add(LeakyReLU(alpha=0.01))\n\n# model.add(layers.Dense(32))\n# model.add(BatchNormalization())\n# model.add(LeakyReLU(alpha=0.01))\n# model.add(Dropout(rate=0.1))\n\n# model.add(layers.Dense(16))\n# model.add(BatchNormalization())\n# model.add(LeakyReLU(alpha=0.01))\n# model.add(Dropout(rate=0.1))\n\n# model.add(layers.Dense(1))\n# model.add(Activation(\"sigmoid\"))","a98c0331":"model = models.Sequential()\n\nmodel.add(layers.Dense(16, input_shape=(9,)))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\"relu\"))\n\nmodel.add(layers.Dense(32))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\"relu\"))\n\nmodel.add(layers.Dense(16))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\"relu\"))\n\nmodel.add(layers.Dense(1))\nmodel.add(Activation(\"sigmoid\"))","91cde710":"opt = Adam(learning_rate=0.001)\n\nmodel.compile(loss=\"binary_crossentropy\",\n              optimizer=opt,\n              metrics=['accuracy'])","314c13c5":"model.summary()","5e35134f":"tf.random.set_seed(0)\n\nhistory = model.fit(X_train,\n                    Y_train,\n                    epochs=300,\n                    batch_size=32,\n                    validation_data=(X_val, Y_val),\n                   )","35e569ce":"def plot_history(history):\n  hist = pd.DataFrame(history.history)\n  hist['epoch'] = history.epoch\n\n  plt.figure()\n  plt.xlabel('Epoch')\n  plt.ylabel('Accuracy')\n  plt.plot(hist['epoch'], hist['accuracy'],\n           label='Train Accuracy')\n  plt.plot(hist['epoch'], hist['val_accuracy'],\n           label = 'Val Accuracy')\n  plt.ylim([0.5,0.9])\n  plt.legend()\n  plt.show()\n    \n  plt.figure()\n  plt.xlabel('Epoch')\n  plt.ylabel('Loss')\n  plt.plot(hist['epoch'], hist['loss'],\n           label='Train Error')\n  plt.plot(hist['epoch'], hist['val_loss'],\n           label = 'Val Error')\n  plt.ylim([0.3,0.8])\n  plt.legend()\n  plt.show()\n\n\nplot_history(history)","d4f1321a":"score = model.evaluate(X_test, Y_test, verbose=1)\n\nprint(\"Test Error\", score[0])\nprint(\"Test accuracy\", score[1])","3e458f92":"### Feature Description","e5cfd4e8":"# Deep Learning","cb380452":"### Importing","8455e2de":"### Finally the Deep Learning Model :  with accuracy 70~75 %","0e46d1eb":"* ph: pH of 1. water (0 to 14).\n\n* Hardness: Capacity of water to precipitate soap in mg\/L.\n\n* Solids: Total dissolved solids in ppm.\n\n* Chloramines: Amount of Chloramines in ppm.\n\n* Sulfate: Amount of Sulfates dissolved in mg\/L.\n\n* Conductivity: Electrical conductivity of water in \u03bcS\/cm.\n\n* Organic_carbon: Amount of organic carbon in ppm.\n\n* Trihalomethanes: Amount of Trihalomethanes in \u03bcg\/L.\n\n* Turbidity: Measure of light emiting property of water in NTU.\n\n* Potability: Indicates if water is safe for human consumption. Potable - 1 and Not potable - 0","433178d1":"# EDA","1dc3a0b6":"# Importing The Dataset"}}