{"cell_type":{"4aa34348":"code","04e15fd1":"code","89371a80":"code","5f3b4908":"code","b24c091c":"code","85fb26bc":"code","c2111f92":"code","b16e6f94":"code","73c90a94":"code","c5f77c78":"markdown","00e648db":"markdown","a6302c0f":"markdown","d01777c4":"markdown","55d39f4b":"markdown","5d5ac60f":"markdown","51e48fda":"markdown","8ae50ef4":"markdown","03397fd9":"markdown"},"source":{"4aa34348":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport riiideducation","04e15fd1":"users = pd.read_csv('..\/input\/riiid-test-answer-prediction\/train.csv', usecols=['user_id'])['user_id'].unique()","89371a80":"n_cols = 100\ndf_user = pd.DataFrame(np.random.random((users.shape[0], n_cols)), index=users, columns=[f'feat{i}' for i in range(n_cols)])\ndf_user.index.name = 'user_id'\nprint(df_user.shape)\ndf_user","5f3b4908":"# prepare data\nenv = riiideducation.make_env()\niter_test = env.iter_test()\n\nlist_df = []\nfor itr, (df_test, sample_prediction_df) in enumerate(iter_test):\n    df_test.loc[:, 'answered_correctly'] = 0.5\n    list_df.append(df_test)\n    env.predict(df_test.loc[df_test['content_type_id'] == 0, ['row_id', 'answered_correctly']])","b24c091c":"%%timeit\nfor df_test in list_df:\n    df_test.merge(df_user, how='left', on='user_id')","85fb26bc":"%%timeit\nfor df_test in list_df:\n    df_test.merge(df_user, how='left', left_on='user_id', right_index=True)","c2111f92":"%%timeit\nfor df_test in list_df:\n    df_test.merge(df_user.loc[df_user.index.isin(df_test['user_id'])],\n                  how='left', left_on='user_id', right_index=True)","b16e6f94":"%%timeit\nfor df_test in list_df:\n    pd.concat([df_test.reset_index(drop=True), df_user.reindex(df_test['user_id'].values).reset_index(drop=True)], axis=1)","73c90a94":"for df_test in list_df:\n    df_merge = df_test.merge(df_user, how='left', on='user_id')\n    df_merge_right_index = df_test.merge(df_user, how='left',\n                                         left_on='user_id', right_index=True).reset_index(drop=True)\n    df_merge_right_index_user = df_test.merge(df_user.loc[df_user.index.isin(df_test['user_id'])],\n                                              how='left', left_on='user_id', right_index=True).reset_index(drop=True)\n    df_fast_merge = pd.concat([df_test.reset_index(drop=True),\n                               df_user.reindex(df_test['user_id'].values).reset_index(drop=True)], axis=1)\n    print(df_merge.equals(df_merge_right_index), \n          df_merge.equals(df_merge_right_index_user), \n          df_merge.equals(df_fast_merge), \n          )","c5f77c78":"# FAST PANDAS LEFT JOIN (357x faster)\n\nHi, I think many people are irritated overhead to join each test dataframe with user dataframes (or content dataframes). For the left join and the case when the right table index is unique, we can join them much faster than pd.merge.\n\n* UPDATE: added the method @alijs1 mentioned (`right_index=True`), 10x faster.\n* UPDATE: added the method @doctorkael mentioned (`right_index=True`and present users), 45x faster.\n\nDiscussion: https:\/\/www.kaggle.com\/c\/riiid-test-answer-prediction\/discussion\/197023","00e648db":"# pd.merge() with right_index=True\n\nMentioned by @alijs1 in https:\/\/www.kaggle.com\/c\/riiid-test-answer-prediction\/discussion\/197023.\n\nIt should takes around 139 ms. This is 13 times faster!","a6302c0f":"### Fast left join\nIt should takes around 4.89 ms sec, <span style=\"color: red; \">**357 TIMES FASTER!!!!!!**<\/span>","d01777c4":"Enjoy your kaggle life!!!","55d39f4b":"# Of course, they are equivalent.\n\nBut, `right_index=True` preserves the original left index. `reset_index(drop=True)` is required to be equal.","5d5ac60f":"# Comparison","51e48fda":"# pd.merge() with right_index=True and the present users filtering\n\nMentioned by @doctorkael in https:\/\/www.kaggle.com\/c\/riiid-test-answer-prediction\/discussion\/197023.\n\nIt should takes around 38.3 ms. This is 45 times faster!","8ae50ef4":"# pd.merge()\n\nIt should takes around 1.75 sec.","03397fd9":"### Maybe, you have a user dataframe like this."}}