{"cell_type":{"ff2cec21":"code","3190aa43":"code","350f1ca0":"code","f112d5f7":"code","30ed73b9":"code","ddbf44f7":"code","5e54f935":"code","d34a3814":"code","ddc755e3":"code","438f0259":"code","a89ab704":"code","cdfbc410":"code","d4ac6f7b":"code","a11c656c":"code","7ba90a03":"code","d6605580":"markdown","5ddd195d":"markdown","49c667df":"markdown","bd74bdc0":"markdown","224f8063":"markdown","da15386a":"markdown","8ef1a421":"markdown","0eabdd0a":"markdown","b6c02ebd":"markdown","191ac95a":"markdown","79eff2be":"markdown"},"source":{"ff2cec21":"import os\nimport pathlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, array_to_img, load_img\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout\nfrom tensorflow.keras.models import Sequential\n\n%matplotlib inline","3190aa43":"data_dir = '..\/input\/gtsrb-german-traffic-sign'\ntrain_path = '..\/input\/gtsrb-german-traffic-sign\/Train'\ntest_path = '..\/input\/gtsrb-german-traffic-sign\/'\nIMG_HEIGHT = 30\nIMG_WIDTH = 30","350f1ca0":"# Number of Classes\nNUM_CATEGORIES = len(os.listdir(train_path))\nNUM_CATEGORIES","f112d5f7":"# Visualizing all the different Signs\nimg_dir = pathlib.Path(train_path)\nplt.figure(figsize=(14,14))\nindex = 0\nfor i in range(NUM_CATEGORIES):\n    plt.subplot(7, 7, i+1)\n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n    sign = list(img_dir.glob(f'{i}\/*'))[0]\n    img = load_img(sign, target_size=(IMG_WIDTH, IMG_HEIGHT))\n    plt.imshow(img)\nplt.show()\n    \n","30ed73b9":"def load_data(data_dir):\n    '''\n    Loading data from Train folder.\n    \n    Returns a tuple `(images, labels)` , where `images` is a list of all the images in the train directory,\n    where each image is formatted as a numpy ndarray with dimensions IMG_WIDTH x IMG_HEIGHT x 3. \n    `labels` is a list of integer labels, representing the categories for each of the\n    corresponding `images`.\n    '''\n    images = list()\n    labels = list()\n    for category in range(NUM_CATEGORIES):\n        categories = os.path.join(data_dir, str(category))\n        for img in os.listdir(categories):\n            img = load_img(os.path.join(categories, img), target_size=(30, 30))\n            image = img_to_array(img)\n            images.append(image)\n            labels.append(category)\n    \n    return images, labels\n        ","ddbf44f7":"images, labels = load_data(train_path)\n\n# One hot encoding the labels\nlabels = to_categorical(labels)\n\n# Splitting the dataset into training and test set\nx_train, x_test, y_train, y_test = train_test_split(np.array(images), labels, test_size=0.4)","5e54f935":"model = Sequential()\n\n# First Convolutional Layer\nmodel.add(Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=(IMG_HEIGHT,IMG_WIDTH,3)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.25))\n\n# Second Convolutional Layer\nmodel.add(Conv2D(filters=64, kernel_size=3, activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.25))\n\n# Third Convolutional Layer\nmodel.add(Conv2D(filters=64, kernel_size=3, activation='relu'))\n\nmodel.summary()","d34a3814":"# Flattening the layer and adding Dense Layer\nmodel.add(Flatten())\nmodel.add(Dense(units=64, activation='relu'))\nmodel.add(Dense(NUM_CATEGORIES, activation='softmax'))\n\nmodel.summary()","ddc755e3":"# Compiling the model\nmodel.compile(\n    loss='categorical_crossentropy',\n    optimizer='adam',\n    metrics=['accuracy']\n)","438f0259":"# Fitting the model\nEPOCHS = 30\nhistory = model.fit(x_train, \n                    y_train,\n                    validation_data = (x_test, y_test), \n                    epochs=EPOCHS, \n                    steps_per_epoch=60\n                   )","a89ab704":"loss, accuracy = model.evaluate(x_test, y_test)\n\nprint('test set accuracy: ', accuracy * 100)","cdfbc410":"accuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\n\nloss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs_range = range(EPOCHS)\n\nplt.figure(figsize=(8, 8))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, accuracy, label='Training Accuracy')\nplt.plot(epochs_range, val_accuracy, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","d4ac6f7b":"from sklearn.metrics import accuracy_score\nimport pandas as pd\n\nY_test = pd.read_csv(test_path + 'Test.csv')\ntest_labels = Y_test[\"ClassId\"].values\ntest_images = Y_test[\"Path\"].values\n\noutput = list()\nfor img in test_images:\n    image = load_img(os.path.join(test_path, img), target_size=(30, 30))\n    output.append(np.array(image))\n\nX_test=np.array(output)\npred = model.predict_classes(X_test)\n\n#Accuracy with the test data\nprint('Test Data accuracy: ',accuracy_score(test_labels, pred)*100)","a11c656c":"plt.figure(figsize = (13, 13))\n\nstart_index = 0\nfor i in range(25):\n    plt.subplot(5, 5, i + 1)\n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n    prediction = pred[start_index + i]\n    actual = test_labels[start_index + i]\n    col = 'g'\n    if prediction != actual:\n        col = 'r'\n    plt.xlabel('Actual={} || Pred={}'.format(actual, prediction), color = col)\n    plt.imshow(X_test[start_index + i])\nplt.show()","7ba90a03":"model.save('model-1.h5')","d6605580":"Hmmm... So there are ***43*** types of different Traffic Signs. But what are they?\n\nLets see the different types of Signs for better intuition!!","5ddd195d":"## Plotting the Accuracy and Loss values\nNow that we have seen the accuracy, lets plot it at diiferent epochs!!","49c667df":"### Finding the Total Number of categories","bd74bdc0":"In order to ensure that this is not a simple \"memorization\" by the machine, we should evaluate the performance on the test set.","224f8063":"## Finally, lets visualize our awesome Predictions!!!","da15386a":"## Thanks for watching!!\n\n### Again, if you want to see the Predictions. ( [Click me](https:\/\/traffic-sign-recognizer.herokuapp.com\/) )\n\n### [Github](https:\/\/github.com\/kar0n\/Traffic-Sign-Recognizer)\n### Also, if you found this notebook helpful or you just liked it , some upvotes would be very much appreciated - That will keep me motivated :)","8ef1a421":"## Creating the Model","0eabdd0a":"## **Importing Libraries**","b6c02ebd":"Now that we know the different types of signs...Lets categorize them and split them into Train and Test set!!","191ac95a":"## Before we start, I want to share this fun application I created to visualize the predictions of the Test Images!!\n**Application:**   [Traffic Sign Recognizer](https:\/\/traffic-sign-recognizer.herokuapp.com\/)\n\n**Github:**        [Source code](https:\/\/github.com\/kar0n\/Traffic-Sign-Recognizer)","79eff2be":"## Predictions\nNow, lets find the predictions on Test images!!"}}