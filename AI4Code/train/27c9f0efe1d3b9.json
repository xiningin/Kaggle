{"cell_type":{"c990d162":"code","d8ce4de0":"code","e3fdcc66":"code","1f1e6d2b":"code","5d2d456e":"code","09438214":"code","d3c43c61":"code","aa7fabee":"code","b139c4b3":"code","3a3e7c95":"code","504e8f2f":"code","2cffc3e6":"code","47624eea":"code","ba90516e":"code","27c429a6":"code","72c9db1d":"code","2d0b6ea4":"code","89eba907":"code","7fee87d6":"code","eaafac19":"code","9e29ead8":"code","23a55b45":"code","02637cf9":"code","11cc8523":"markdown","6426d52b":"markdown","c366adf1":"markdown","03a68b7e":"markdown","ff17ff54":"markdown","200bca15":"markdown","2c1afd51":"markdown","1541a543":"markdown","06e7093a":"markdown","757cd3fe":"markdown","27a4266e":"markdown","f1895551":"markdown"},"source":{"c990d162":"import tensorflow as tf\nimport numpy as np\nimport pandas as pd\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","d8ce4de0":"print(tf.__version__)","e3fdcc66":"df = pd.read_csv('..\/input\/30-days-of-ml\/train.csv')","1f1e6d2b":"df.shape","5d2d456e":"df.head()","09438214":"val_df = df.sample(frac=0.2, random_state=1337)\ntrain_df = df.drop(val_df.index)\n\nprint(\"Using %d samples for training and %d for validation\"\n     % (len(train_df), len(val_df)))","d3c43c61":"def dataframe_to_dataset(df):\n    df = df.copy()\n    labels = df.pop(\"target\")\n    ds = tf.data.Dataset.from_tensor_slices((dict(df), labels))\n    ds = ds.shuffle(buffer_size=len(df))\n    return ds\n\ntrain_ds = dataframe_to_dataset(train_df)\nval_ds = dataframe_to_dataset(val_df)","aa7fabee":"for x, y in train_ds.take(1):\n    print(\"Input:\", x)\n    print(\"Input:\", y)","b139c4b3":"train_ds = train_ds.batch(32)\nval_ds = val_ds.batch(32)","3a3e7c95":"from tensorflow.keras.layers.experimental.preprocessing import IntegerLookup\nfrom tensorflow.keras.layers.experimental.preprocessing import Normalization\nfrom tensorflow.keras.layers.experimental.preprocessing import StringLookup\n\n\ndef encode_numerical_feature(feature, name, dataset):\n    # Create a Normalization layer for our feature\n    normalizer = Normalization()\n\n    # Prepare a Dataset that only yields our feature\n    feature_ds = dataset.map(lambda x, y: x[name])\n    feature_ds = feature_ds.map(lambda x: tf.expand_dims(x, -1))\n\n    # Learn the statistics of the data\n    normalizer.adapt(feature_ds)\n\n    # Normalize the input feature\n    encoded_feature = normalizer(feature)\n    return encoded_feature\n\n\ndef encode_categorical_feature(feature, name, dataset, is_string):\n    lookup_class = StringLookup if is_string else IntegerLookup\n    # Create a lookup layer which will turn strings into integer indices\n    lookup = lookup_class()\n\n    # Prepare a Dataset that only yields our feature\n    feature_ds = dataset.map(lambda x, y: x[name])\n    feature_ds = feature_ds.map(lambda x: tf.expand_dims(x, -1))\n\n    # Learn the set of possible string values and assign them a fixed integer index\n    lookup.adapt(feature_ds)\n\n    # Turn the string input into integer indices\n    encoded_feature = lookup(feature)\n    return encoded_feature","504e8f2f":"df.columns","2cffc3e6":"# categorical features encoded as integers\ncat0 = keras.Input(shape=(1,), name=\"cat0\", dtype=\"string\")\ncat1 = keras.Input(shape=(1,), name=\"cat1\", dtype=\"string\")\ncat2 = keras.Input(shape=(1,), name=\"cat2\", dtype=\"string\")\ncat3 = keras.Input(shape=(1,), name=\"cat3\", dtype=\"string\")\ncat4 = keras.Input(shape=(1,), name=\"cat4\", dtype=\"string\")\ncat5 = keras.Input(shape=(1,), name=\"cat5\", dtype=\"string\")\ncat6 = keras.Input(shape=(1,), name=\"cat6\", dtype=\"string\")\ncat7 = keras.Input(shape=(1,), name=\"cat7\", dtype=\"string\")\ncat8 = keras.Input(shape=(1,), name=\"cat8\", dtype=\"string\")\ncat9 = keras.Input(shape=(1,), name=\"cat9\", dtype=\"string\")\n\n# numerical features\ncont0 = keras.Input(shape=(1,), name=\"cont0\")\ncont1 = keras.Input(shape=(1,), name=\"cont1\")\ncont2 = keras.Input(shape=(1,), name=\"cont2\")\ncont3 = keras.Input(shape=(1,), name=\"cont3\")\ncont4 = keras.Input(shape=(1,), name=\"cont4\")\ncont5 = keras.Input(shape=(1,), name=\"cont5\")\ncont6 = keras.Input(shape=(1,), name=\"cont6\")\ncont7 = keras.Input(shape=(1,), name=\"cont7\")\ncont8 = keras.Input(shape=(1,), name=\"cont8\")\ncont9 = keras.Input(shape=(1,), name=\"cont9\")\ncont10 = keras.Input(shape=(1,), name=\"cont10\")\ncont11 = keras.Input(shape=(1,), name=\"cont11\")\ncont12 = keras.Input(shape=(1,), name=\"cont12\")\ncont13 = keras.Input(shape=(1,), name=\"cont13\")\n\nall_inputs = [\n        cat0, cat1, cat2, cat3, cat4, cat5, cat6, cat7,\n       cat8, cat9, cont0, cont1, cont2, cont3, cont4, cont5,\n       cont6, cont7, cont8, cont9, cont10, cont11, cont12,\n       cont13\n]","47624eea":"# string categorical features\ncat0_encoded = encode_categorical_feature(cat0, \"cat0\", train_ds, True)\ncat1_encoded = encode_categorical_feature(cat1, \"cat1\", train_ds, True)\ncat2_encoded = encode_categorical_feature(cat2, \"cat2\", train_ds, True)\ncat3_encoded = encode_categorical_feature(cat3, \"cat3\", train_ds, True)\ncat4_encoded = encode_categorical_feature(cat4, \"cat4\", train_ds, True)\ncat5_encoded = encode_categorical_feature(cat5, \"cat5\", train_ds, True)\ncat6_encoded = encode_categorical_feature(cat6, \"cat6\", train_ds, True)\ncat7_encoded = encode_categorical_feature(cat7, \"cat7\", train_ds, True)\ncat8_encoded = encode_categorical_feature(cat8, \"cat8\", train_ds, True)\ncat9_encoded = encode_categorical_feature(cat9, \"cat9\", train_ds, True)","ba90516e":"# integer categorical features\ncont0_encoded = encode_numerical_feature(cont0, \"cont0\", train_ds)\ncont1_encoded = encode_numerical_feature(cont1, \"cont1\", train_ds)\ncont2_encoded = encode_numerical_feature(cont2, \"cont2\", train_ds)\ncont3_encoded = encode_numerical_feature(cont3, \"cont3\", train_ds)\ncont4_encoded = encode_numerical_feature(cont4, \"cont4\", train_ds)\ncont5_encoded = encode_numerical_feature(cont5, \"cont5\", train_ds)\ncont6_encoded = encode_numerical_feature(cont6, \"cont6\", train_ds)\ncont7_encoded = encode_numerical_feature(cont7, \"cont7\", train_ds)\ncont8_encoded = encode_numerical_feature(cont8, \"cont8\", train_ds)\ncont9_encoded = encode_numerical_feature(cont9, \"cont9\", train_ds)\ncont10_encoded = encode_numerical_feature(cont10, \"cont10\", train_ds)\ncont11_encoded = encode_numerical_feature(cont11, \"cont11\", train_ds)\ncont12_encoded = encode_numerical_feature(cont12, \"cont12\", train_ds)\ncont13_encoded = encode_numerical_feature(cont13, \"cont13\", train_ds)","27c429a6":"cat0_encoded = tf.cast(cat0_encoded, dtype = tf.float32)\ncat1_encoded = tf.cast(cat1_encoded, dtype = tf.float32)\ncat2_encoded = tf.cast(cat2_encoded, dtype = tf.float32)\ncat3_encoded = tf.cast(cat3_encoded, dtype = tf.float32)\ncat4_encoded = tf.cast(cat4_encoded, dtype = tf.float32)\ncat5_encoded = tf.cast(cat5_encoded, dtype = tf.float32)\ncat6_encoded = tf.cast(cat6_encoded, dtype = tf.float32)\ncat7_encoded = tf.cast(cat7_encoded, dtype = tf.float32)\ncat8_encoded = tf.cast(cat8_encoded, dtype = tf.float32)\ncat9_encoded = tf.cast(cat9_encoded, dtype = tf.float32)","72c9db1d":"all_features = layers.concatenate(\n    [\n        cat0_encoded,\n        cat1_encoded,\n        cat2_encoded,\n        cat3_encoded,\n        cat4_encoded,\n        cat5_encoded,\n        cat6_encoded,\n        cat7_encoded,\n        cat8_encoded,\n        cat9_encoded,\n        cont0_encoded,\n        cont1_encoded,\n        cont2_encoded,\n        cont3_encoded,\n        cont4_encoded,\n        cont5_encoded,\n        cont6_encoded,\n        cont7_encoded,\n        cont8_encoded,\n        cont9_encoded,\n        cont10_encoded,\n        cont11_encoded,\n        cont12_encoded,\n        cont13_encoded,\n    ])\n\nx = layers.Dense(64, activation=\"relu\")(all_features)\nx = layers.Dropout(0.5)(x)\nx = layers.Dense(64, activation=\"relu\")(x)\nx = layers.Dropout(0.5)(x)\noutput = layers.Dense(1)(x)\nmodel = keras.Model(all_inputs, output)\nmodel.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])","2d0b6ea4":"history = model.fit(train_ds, epochs=20, validation_data=val_ds)","89eba907":"df0 = pd.DataFrame(history.history)\ndf0.head()","7fee87d6":"import matplotlib.pyplot as plt\n\nloss_plot = df0.plot(y=\"loss\", title = \"Loss vs epochs\", legend=False)\nloss_plot.set(xlabel=\"epochs\", ylabel=\"Loss\")","eaafac19":"df_test = pd.read_csv('..\/input\/30-days-of-ml\/test.csv')","9e29ead8":"df_test = df_test.set_index(\"id\")\ndf_test.head()","23a55b45":"samples = df_test.to_dict('records')","02637cf9":"predictions = []\nprint(\"till 200000!! ... go sleep some time\")\nfor sample in samples:\n    input_dict = {name: tf.convert_to_tensor([value]) for name, value in sample.items()}\n    pred = model.predict(input_dict)\n    predictions.append(pred)\n    print(len(predictions), end=\"\\r\")","11cc8523":"# Build the model","6426d52b":"# Neural networks to 30days competition","c366adf1":"Here we encode numerical and categorical features (one-hot encoding) separately.\n\nWe also apply normalization to numerical features","03a68b7e":"# Casting categorical features","ff17ff54":"# Encoding features","200bca15":"# Data to tf.data format","2c1afd51":"We cast (transform) categorical features into floats to then concatenate the datased that will be processed by the neural network","1541a543":"Here we convert the data into tf.data format so it can be processed by tensorflow Neural Networks","06e7093a":"# Use the model to generate predictions","757cd3fe":"# Validation and train dataset","27a4266e":"The majority of code was taken from\n\nhttps:\/\/keras.io","f1895551":"Now we concatenate the dataset and build the model to process the data"}}