{"cell_type":{"81b6cd67":"code","5c8b2f0c":"code","0d6e3d4b":"code","02b14ac2":"code","29cb23b9":"code","ebb7edda":"code","2c5cb179":"code","8468dab2":"code","ed9b08ca":"code","cea577b2":"markdown","45cb40a9":"markdown","7a2ca3e4":"markdown","66996d80":"markdown","ea514d5f":"markdown","e79c96d1":"markdown"},"source":{"81b6cd67":"import numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf","5c8b2f0c":"train_dir = '..\/input\/withwithout-mask\/maskdata\/maskdata\/train'\ntest_dir = '..\/input\/withwithout-mask\/maskdata\/maskdata\/test'","0d6e3d4b":"train_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255,\n    validation_split=0.2\n)\n\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255\n)","02b14ac2":"train_images = train_generator.flow_from_directory(\n    train_dir,\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='binary',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='training'\n)\n\nval_images = train_generator.flow_from_directory(\n    train_dir,\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='binary',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='validation'\n)\n\ntest_images = test_generator.flow_from_directory(\n    test_dir,\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='binary',\n    batch_size=32,\n    shuffle=False\n)","29cb23b9":"inputs = tf.keras.Input(shape=(224, 224, 3))\nx = tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu')(inputs)\nx = tf.keras.layers.MaxPool2D()(x)\nx = tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu')(x)\nx = tf.keras.layers.MaxPool2D()(x)\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\nx = tf.keras.layers.Dense(32, activation='relu')(x)\nx = tf.keras.layers.Dense(32, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\nprint(model.summary())","ebb7edda":"model.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=['accuracy']\n)\n\nhistory = model.fit(\n    train_images,\n    validation_data=val_images,\n    epochs=100,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=5,\n            restore_best_weights=True\n        )\n    ]\n)","2c5cb179":"results = model.evaluate(test_images, verbose=0)\nprint(\"    Loss: {:.5f}\".format(results[0]))\nprint(\"Accuracy: {:.3f}%\".format(results[1] * 100))","8468dab2":"sample_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255\n)\n\nsample_images = sample_generator.flow_from_directory(\n    test_dir,\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='binary',\n    batch_size=32,\n    shuffle=True,\n    seed=42\n)","ed9b08ca":"samples = sample_images.next()\n\npredictions = np.squeeze(model.predict(samples[0]) >= 0.5).astype(np.int)\nlabels = samples[1].astype(np.int)\n\nplt.figure(figsize=(20, 20))\n\nfor i in range(25):\n    plt.subplot(5, 5, i + 1)\n    plt.imshow(samples[0][i])\n    plt.axis('off')\n    plt.title((\"NO MASK\" if predictions[i] == 1 else \"MASK\"), color=('blue' if labels[i] == predictions[i] else 'red'))\n\nplt.show()","cea577b2":"# Task for Today  \n\n***\n\n## Mask Image Classification  \n\nGiven *images of people with and without masks*, let's try to classify if there is a **mask** in a given image.\n\nWe will use a TensorFlow\/Keras CNN to make our predictions.","45cb40a9":"# Training","7a2ca3e4":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/SqV5WQb1zWE","66996d80":"# Getting Started","ea514d5f":"# Visualize Results","e79c96d1":"# Load Images"}}