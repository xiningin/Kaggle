{"cell_type":{"d136f335":"code","6f8459a0":"code","8d29493f":"code","9034fcd0":"code","d55a5371":"code","b12175ae":"code","7a5be9ba":"code","e4da0205":"code","9fd85e57":"code","7db838e7":"code","2a1038e6":"code","7db08eb5":"code","84796365":"code","5710d502":"code","469b233b":"markdown","831bd10b":"markdown","8978258c":"markdown","3a5265a2":"markdown","0fd46da6":"markdown","74858b0a":"markdown","1eb6a317":"markdown","0f044c56":"markdown","f05cf59a":"markdown","6a88d76b":"markdown","035c113a":"markdown","6f80fa6e":"markdown"},"source":{"d136f335":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.inspection import plot_partial_dependence\nfrom sklearn import metrics\n\nimport matplotlib.pyplot as plt","6f8459a0":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d29493f":"input_dir = '\/kaggle\/input\/santander-customer-transaction-prediction\/'\ndf_train = pd.read_csv(input_dir + 'train.csv')\ndf_train","9034fcd0":"var_columns = [c for c in df_train if c not in ['ID_code','target']]\nX = df_train.loc[:,var_columns]\ny = df_train.loc[:,'target']","d55a5371":"model_rf = RandomForestClassifier(class_weight='balanced',\n                                  criterion='gini',\n                                  max_depth=55,\n                                  max_features='log2',\n                                  min_samples_leaf=0.005,\n                                  min_samples_split=0.005,\n                                  n_estimators=190)\nmodel_rf.fit(X, y)","b12175ae":"df_var_imp = pd.DataFrame({'Variable': var_columns,\n                           'Importance': model_rf.feature_importances_}) \\\n                .sort_values(by='Importance', ascending=False) \\\n                .reset_index(drop=True)","7a5be9ba":"df_var_imp[:15].sort_values('Importance').plot('Variable','Importance', 'barh', figsize=(15,5), legend=False)","e4da0205":"fig,ax = plt.subplots(figsize=(18, 4))\nplot_partial_dependence(model_rf, X, ['var_81','var_139','var_110'],\n                        grid_resolution=20, ax=ax);","9fd85e57":"fig,ax = plt.subplots(1, 3, figsize=(18, 4))\nX['var_81'].hist(ax=ax[0], legend=True)\nX['var_139'].hist(ax=ax[1], legend=True)\nX['var_110'].hist(ax=ax[2], legend=True)","7db838e7":"df_test = pd.read_csv(input_dir + '\/test.csv')\ndf_sample_submission = pd.read_csv(input_dir + '\/sample_submission.csv')\n\ndf_test.shape, df_sample_submission.shape","2a1038e6":"X_test = df_test.loc[:,var_columns]\n\ndf_sample_submission['target'] = model_rf.predict_proba(X_test)[:,1]\ndf_sample_submission","7db08eb5":"y_test_pred_trees = np.stack([m.predict(X_test) for m in model_rf.estimators_])\ny_test_pred_trees.shape","84796365":"y_test_pred_std = y_test_pred_trees.std(0)\n\ndf_sample_submission['pred_prob'] = model_rf.predict_proba(X_test)[:,1]\ndf_sample_submission['pred_std'] = y_test_pred_std\ndf_sample_submission[:10]","5710d502":"output_dir = '\/kaggle\/working\/'\ndf_sample_submission[['ID_code','target']].to_csv(output_dir + '02_random_forest_scores.csv', index=False)","469b233b":"## Step5: Prediction on Test Data\nRead the test and sample submission csv","831bd10b":"## Step3: Variable Importance\nConvert the variable importance into pandas dataframe. Also sort the variable list based on importance.","8978258c":"For `var_81` and `var_139` , we can see that event rate is higher for lower values of the variable. For `var_110`, higher values leads to higher event rate. Also, seems like there can be a cut-off value which can be used for classification.  \n\nLet us also see the distribution of data as histogram for the three variables.","3a5265a2":"## Step7: Export Predictions","0fd46da6":"## Step2: Create Random Forest Model\nUse the parameters which are result of hyperparameter tuning","74858b0a":"Split the data into independent and dependent variables. This is required to train the model using sklearn.","1eb6a317":"Split the test data between independent variables and find predictions","0f044c56":"Let us plot the variable importance as bar charts.","f05cf59a":"## Step1: Read CSV\nRead the train csv file and look at the data. There are 200K rows and 200 independent variables.","6a88d76b":"## Step6: Confidence of prediction\nWhile probability of prediction can be used to identify how confident we are about predictions for an observation, another way is to use standard deviation of predictions from different trees in the random forest.","035c113a":"## Step4: Partial Dependence of Variables\n`var_81`, `var_139` and `var_110` are the top variables on the basis of variable importance. Let us see how they relate to the dependent variable.","6f80fa6e":"# Santander Customer Transaction Prediction - Random Forest Details\n\nIn the Kaggle competition, the objective is to identify which customer will make a transaction in the future.\n\n**Link to the competition**: https:\/\/www.kaggle.com\/c\/santander-customer-transaction-prediction\/  \n**Type of Problem**: Classification  \n**Metric for evalution**: AOC (Area Under Curve)\n\nThis Python 3 environment comes with many helpful analytics libraries installed\nIt is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python"}}