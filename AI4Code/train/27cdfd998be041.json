{"cell_type":{"68778332":"code","7948aa9f":"code","4ca2202e":"code","4ad8e4b5":"code","617a5fe9":"code","d7b49bed":"code","ee43bcbd":"code","4a3a7e60":"markdown","42b4b7f6":"markdown","b3389b6e":"markdown","5a37f13b":"markdown","325eeb25":"markdown","05947469":"markdown"},"source":{"68778332":"import pandas as pd\nimport numpy as np\nimport torch \nimport torch.nn as nn\nimport os\nimport glob\nimport pydicom\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom pydicom import dcmread\nimport ast\n","7948aa9f":"DIR_PATH = \"..\/input\/siim-covid19-detection\"\ntrain_imglvl_path = f\"{DIR_PATH}\/train_image_level.csv\"\ntrain_stdylvl_path = f\"{DIR_PATH}\/train_study_level.csv\"\ntrain_path = f\"{DIR_PATH}\/train\"\n\n#loading csv file using pandas \n\ntrain_df = pd.read_csv(train_imglvl_path)\n#train_df.sample(5)","4ca2202e":"#train_df['id'].unique().shape\n#Nan_df = train_df.groupby(\"id\")[\"boxes\"].agg(lambda s: (s == \"NaN\").sum()).reset_index().rename({\"class_id\" : \"Nan_values\"}, axis = 1)","4ad8e4b5":"train_new = train_df.dropna(axis = 0, inplace = False).reset_index(drop = True)\ntrain_new['boxes'] = train_new.boxes.apply(ast.literal_eval)  # converting into list ","617a5fe9":"sample_df = train_new.sample(5).reset_index(drop = True)","d7b49bed":"sample_df","ee43bcbd":"for i, rows in sample_df.iterrows():\n    # get dir \n    dir = os.listdir(train_path + \"\/\" + rows[\"StudyInstanceUID\"])\n    #print(rows['id'])\n    #print(train_path + \"\/\" + rows[\"StudyInstanceUID\"] + \"\/\"+ dir[0] + \"\/\" + rows[\"id\"][:-6] + \".dcm\")\n    #continue\n    dicom = pydicom.dcmread(train_path + \"\/\" + rows[\"StudyInstanceUID\"] + \"\/\"+ dir[0] + \"\/\" + rows[\"id\"][:-6] + \".dcm\")\n    img = dicom.pixel_array\n    \n    boxs = rows['boxes']\n    #print(boxs)\n    fig, a = plt.subplots(1,1)\n    fig.set_size_inches(10,10)\n    a.imshow(img, cmap = 'gray')\n    \n    \n    for box in boxs:\n        x, y, width, height = int(box['x']), int(box['y']), int(box['width']), int(box['height'])\n        #print(x, y, width, height)\n        rect = patches.Rectangle((x, y),\n                                 width, height,\n                                 linewidth = 2,\n                                 edgecolor = 'r',\n                                 facecolor = 'none')\n        a.add_patch(rect)\n        \n    plt.show()\n\n","4a3a7e60":"# import libraries","42b4b7f6":"# ***Thanks for your patience***\n","b3389b6e":"# Path","5a37f13b":"# Data\n\n**Files**\n* train_study_level.csv - the train study-level metadata, with one row for each study, including correct labels.\n* train_image_level.csv - the train image-level metadata, with one row for each image, including both correct labels and any bounding boxes in a dictionary format. Some images in both test and train have multiple bounding boxes.\n* sample_submission.csv - a sample submission file containing all image- and study-level IDs.\n\n**train_study_level.csv**\n* id - unique study identifier\n* Negative for Pneumonia - 1 if the study is negative for pneumonia, 0 otherwise\n* Typical Appearance - 1 if the study has this appearance, 0 otherwise\n* Indeterminate Appearance  - 1 if the study has this appearance, 0 otherwise\n* Atypical Appearance  - 1 if the study has this appearance, 0 otherwise\n\n**train_image_level.csv**\n* id - unique image identifier\n* boxes - bounding boxes in easily-readable dictionary format\n* label - the correct prediction label for the provided bounding boxes","325eeb25":"**Drop Nan Values and convert boxes from str to list**","05947469":"**Get random sample from DataFrame**"}}