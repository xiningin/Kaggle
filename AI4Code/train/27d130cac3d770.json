{"cell_type":{"5bc8cfec":"code","103bd98e":"code","7f6ad900":"code","2b4bb058":"code","ecf58699":"code","314576b5":"code","9f955ab5":"code","d61e5afd":"code","c488adec":"code","e13dbfa0":"code","6cce7b83":"code","9e037a18":"code","be206f21":"code","f1d72671":"code","f3d11c7c":"code","78f65a8e":"code","84f7e9aa":"code","432088d8":"code","130cef23":"code","182cace4":"code","4a4b2242":"code","fdc07416":"code","8c1771ae":"code","f4422d73":"code","e3a562dd":"code","f89f2abb":"code","4c6ad79c":"code","a4d366e8":"code","60a12f9d":"code","eba2d034":"code","c1b53cba":"code","f498eb14":"code","ac062a0b":"code","13d18bd7":"code","9d3e723e":"code","251ba805":"code","d60ab59c":"code","59a9c5fd":"code","24c66d7a":"code","deb0f88e":"code","6d1003ba":"code","44dabd43":"code","44c62ac2":"code","9318e505":"code","83339455":"code","81b42402":"code","e907f9a2":"markdown","d9b90e6a":"markdown","c205bca3":"markdown","dca8cebb":"markdown","849880d5":"markdown","f1e55a17":"markdown","4e8e1b3b":"markdown","22f33797":"markdown","3372caee":"markdown","bedc8591":"markdown","bcbd70f6":"markdown","2015eee9":"markdown","eab3719a":"markdown","4df1750e":"markdown","e2fd48ef":"markdown","e4583859":"markdown","2100bc4c":"markdown","f588c1ac":"markdown","c2af3982":"markdown","1a671401":"markdown","434af507":"markdown","ee54c09b":"markdown","2f860995":"markdown"},"source":{"5bc8cfec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_formats = {'png', 'retina'}\nimport seaborn as sns","103bd98e":"train = pd.read_csv('..\/input\/property-price-prediction-challenge-2nd\/DC_train.csv')\ntest = pd.read_csv('..\/input\/property-price-prediction-challenge-2nd\/DC_test.csv')\nprint('train shape : ', train.shape)\nprint('test shape : ', test.shape)","7f6ad900":"train['PRICE'] = np.log1p(train['PRICE'])\ntrain = train[(train['PRICE']>=8.0) & (train['PRICE']<=17.0)]\nprint('train shape : ', train.shape)\nprint('test shape : ', test.shape)","2b4bb058":"train.isnull().sum()","ecf58699":"test.isnull().sum()","314576b5":"train.dtypes","9f955ab5":"no_mv_columns = []    # features without missing value\nwith_mv_columns = []  # features with missing value\nfor col in train.columns:\n    if train[col].isnull().any()==False:\n        no_mv_columns.append(col)\n    else:\n        with_mv_columns.append(col)\n        \nprint('no_mv_columns')\nprint(no_mv_columns)\nprint('with_mv_columns')\nprint(with_mv_columns)","d61e5afd":"for elem in no_mv_columns:\n    print(elem)\n    print(train[elem].value_counts(), '\\n')","c488adec":"for elem in with_mv_columns:\n    print(elem)\n    print('Number of NaN : ', train[elem].isnull().sum())\n    print(train[elem].value_counts(), '\\n')","e13dbfa0":"for elem in with_mv_columns:\n    print(elem)\n    print('Number of NaN : ', test[elem].isnull().sum())\n    print(test[elem].value_counts(), '\\n')","6cce7b83":"# for feature in no_mv_columns:\n#     fig, ax = plt.subplots(figsize=(8, 6))\n#     plt.hist(train[feature], bins=50, rwidth=0.8)\n#     plt.xlabel(feature)\n#     plt.ylabel('Frequency')\n#     plt.show()\n","9e037a18":"# for feature in no_mv_columns:\n#     fig, ax = plt.subplots(figsize=(8, 6))\n#     plt.scatter(train[feature], train['PRICE'], alpha=0.3, color='blue')\n#     plt.xlabel(feature)\n#     plt.ylabel('PRICE')\n#     plt.show()","be206f21":"# corr = train.corr()\n# plt.subplots(figsize=(12,9))\n# sns.heatmap(corr, vmax=0.9, cmap=\"Blues\", square=True)","f1d72671":"# AC\ntrain['AC'].value_counts()","f3d11c7c":"# FIREPLACES\n# train['FIREPLACES']=1601\u3000\u2192\u30000\ntrain['FIREPLACES'].replace(1601, 0, inplace=True)\ntrain['FIREPLACES'].value_counts()","78f65a8e":"# zipcode\ntrain['ZIPCODE']","84f7e9aa":"# fig, ax = plt.subplots(figsize=(8, 6))\n# plt.scatter(train['ZIPCODE'], train['PRICE'], alpha=0.3)\n# plt.xlabel('ZIPCODE')\n# plt.ylabel('PRICE')\n# plt.show()","432088d8":"# AYB\nmean = round(train['AYB'].mean())\ntrain['AYB'] = train['AYB'].fillna(mean)\nmean = round(test['AYB'].mean())\ntest['AYB'] = test['AYB'].fillna(mean)\n","130cef23":"# YR_RMDL\n# train['YR_RMDL']=20.0 \u2192 2000.0\ntrain['YR_RMDL'].replace(20.0, 2000.0, inplace=True)\n# mean = train['YR_RMDL'].mean()\n# train['YR_RMDL'] = train['YR_RMDL'].fillna(mean)\n# train['YR_RMDL'].isnull().sum()\ntrain['YR_RMDL'].describe()\n","182cace4":"train[train['AYB']>train['YR_RMDL']][['AYB', 'YR_RMDL']]","4a4b2242":"# GBA\ntrain['GBA'] = train['GBA'].fillna(0.0)\ntest['GBA'] = test['GBA'].fillna(0.0)\n# NUM_UNITS\ntrain['NUM_UNITS'] = train['NUM_UNITS'].fillna(0.0)\ntest['NUM_UNITS'] = test['NUM_UNITS'].fillna(0.0)\n# KITCHENS\ntrain['KITCHENS'] = train['KITCHENS'].fillna(0.0)\ntest['KITCHENS'] = test['KITCHENS'].fillna(0.0)\n# STYLE\ntrain['STYLE'] = train['STYLE'].fillna('Vacant')\ntest['STYLE'] = test['STYLE'].fillna('Vacant')\n# GRADE\ntrain['GRADE'] = train['GRADE'].fillna('No Data')\ntest['GRADE'] = test['GRADE'].fillna('No Data')\n# ROOF\ntrain['ROOF'] = train['ROOF'].fillna('No Roof')\ntest['ROOF'] = test['ROOF'].fillna('No Roof')\n# INTWALL\ntrain['INTWALL'] = train['INTWALL'].fillna('No IntWall')\ntest['INTWALL'] = test['INTWALL'].fillna('No IntWall')\n# EXTWALL\ntrain['EXTWALL'] = train['EXTWALL'].fillna('No ExtWall')\ntest['EXTWALL'] = test['EXTWALL'].fillna('No ExtWall')\n# CNDTN\ntrain['CNDTN'] = train['CNDTN'].fillna('No Data')\ntest['CNDTN'] = test['CNDTN'].fillna('No Data')","fdc07416":"# STORIES\nindex_list1 = train[train['ROOF']=='No Roof'].index\nindex_list2 = test[test['ROOF']=='No Roof'].index\n\nfor i in index_list1:\n    train['STORIES'][i] = 0.00\n\nfor i in index_list2:\n    test['STORIES'][i] = 0.00","8c1771ae":"train[train['STORIES'].isnull()==True]['STYLE']","f4422d73":"test[test['STORIES'].isnull()==True]['STYLE']","e3a562dd":"for elem in with_mv_columns:\n    print(elem)\n    print('Number of Nan : ', train[elem].isnull().sum())\n    print(train[elem].value_counts(), '\\n')\n","f89f2abb":"\nfor elem in with_mv_columns:\n    print(elem)\n    print('Number of Nan : ', test[elem].isnull().sum())\n    print(test[elem].value_counts(), '\\n')\n    ","4c6ad79c":"train_labels = train['PRICE'].reset_index(drop=True) # PRICE\ntrain_features = train.drop(['PRICE'], axis=1)\ntest_features = test\n\nprint('train_features shape : ', train_features.shape)\nprint('test_features shape : ', test_features.shape)\n","a4d366e8":"# train_labels = train['PRICE'].reset_index(drop=True) # PRICE\n# train_features = train.drop(['PRICE'], axis=1)\n# test_features = test\n\n# all_features = pd.concat([train_features, test_features]).reset_index(drop=True)\n# print('all_features shape : ', all_features.shape)\n# print('train_features shape : ', train_features.shape)\n# print('test_features shape : ', test_features.shape)\n# all_features.head(7)","60a12f9d":"# Visualize missing values\nsns.set_style(\"white\")\nf, ax = plt.subplots(figsize=(8, 7))\nsns.set_color_codes(palette='deep')\nmissing = round(train.isnull().mean()*100,2)\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar(color=\"b\")\nax.xaxis.grid(False)\nax.set(ylabel=\"Percent of missing values\")\nax.set(xlabel=\"Features\")\nax.set(title=\"Percent missing data by feature\")\nsns.despine(trim=True, left=True)","eba2d034":"train['AGE'] = 2018 - train['AYB']\ntest['AGE'] = 2018 - test['AYB']\n# all_features['AGE'] = 2018 - all_features['AYB']\ntrain['AGE'].describe()","c1b53cba":"train['IMPAGE'] = 2018-train['EYB']\ntest['IMPAGE'] = 2018-test['EYB']\n# all_features['IMPAGE'] = 2018-all_features['EYB']\ntrain['IMPAGE'].describe()","f498eb14":"# BATH ROOM\ntrain['ALLBATHRM'] = train['BATHRM'] + train['HF_BATHRM']\ntest['ALLBATHRM'] = test['BATHRM'] + test['HF_BATHRM']\n# all_features['ALLBATHRM'] = all_features['BATHRM'] + all_features['HF_BATHRM']\ntrain['ALLBATHRM'].describe()\n","ac062a0b":"# for elem in ['BATHRM', 'HF_BATHRM', 'ALLBATHRM']:\n#     fig, ax = plt.subplots(figsize=(8, 6))\n#     plt.scatter(train[elem], train['PRICE'], alpha=0.3, color='blue')\n#     plt.xlabel(elem)\n#     plt.ylabel('PRICE')\n#     plt.show()","13d18bd7":"# OTHER ROOMS \ntrain['OTHROOMS'] = train['ROOMS'] - train['BEDRM']\ntest['OTHROOMS'] = test['ROOMS'] - test['BEDRM']\n# all_features['OTHROOMS'] = all_features['ROOMS'] - all_features['BEDRM']\ntrain['OTHROOMS'].describe()","9d3e723e":"# for elem in ['ROOMS', 'BEDRM', 'OTHROOMS']:\n#     fig, ax = plt.subplots(figsize=(8, 6))\n#     plt.scatter(train[elem], train['PRICE'], alpha=0.3, color='blue')\n#     plt.xlabel(elem)\n#     plt.ylabel('PRICE')\n#     plt.show()","251ba805":"del_feat = ['HEAT', 'AC', 'YR_RMDL', 'EYB', 'STORIES', 'SALEDATE',\\\n            'SALE_NUM', 'STRUCT', 'USECODE', 'GIS_LAST_MOD_DTTM', 'SOURCE', 'CMPLX_NUM',\\\n            'LIVING_GBA', 'FULLADDRESS', 'CITY', 'STATE', 'ZIPCODE', 'NATIONALGRID',\\\n            'LATITUDE', 'LONGITUDE', 'ASSESSMENT_NBHD', 'ASSESSMENT_SUBNBHD',\\\n            'CENSUS_TRACT', 'CENSUS_BLOCK', 'SQUARE', 'X', 'Y', 'QUADRANT']\nfor elem in del_feat:\n    del train_features[elem]\n    del test_features[elem]\n    ","d60ab59c":"# Label Encoding \nfrom sklearn.preprocessing import OrdinalEncoder # \u8907\u6570\u5909\u63db\nfrom sklearn.preprocessing import LabelEncoder","59a9c5fd":"oe = OrdinalEncoder()\nle = LabelEncoder()\nlabel_list = ['QUALIFIED', 'STYLE', 'STRUCT', 'GRADE', 'CNDTN', 'EXTWALL', 'ROOF', 'INTWALL', 'WARD']\nprint(label_list)","24c66d7a":"train_features = pd.get_dummies(train_features)\ntest_features = pd.get_dummies(test_features)","deb0f88e":"print(train_features.shape)\nprint(test_features.shape)","6d1003ba":"# train_features[label_list] = le.fit_transform(train_features[label_list].values)","44dabd43":"print('train_features.columns')\nprint(train_features.columns)\nprint('test_features.columns')\nprint(test_features.columns)\n","44c62ac2":"# X = all_features.iloc[:len(train_labels), :]\n# X_test = all_features.iloc[len(train_labels):, :]\n# print(X.shape, train_labels.shape, X_test.shape)","9318e505":"X = train_features\nX_test = test_features\ncommon = set(X.columns) & set(X_test.columns)\nfor elem in X.columns:\n    if not elem in common:\n        del X[elem]\nfor elem in X_test.columns:\n    if not elem in common:\n        del X_test[elem]\nprint(X.shape, train_labels.shape, X_test.shape)","83339455":"X.isnull().sum()","81b42402":"X.to_csv('X.csv', encoding='shift-jis')\nX_test.to_csv('X_test.csv', encoding='shift-jis')\ntrain_labels.to_csv('train_labels.csv', encoding='shift-jis')","e907f9a2":"### Delete unnecessary features","d9b90e6a":"# Feature engineering","c205bca3":"### Combine train and test features : apply the feature transformation pipeline to the entire dataset","dca8cebb":"### Check how much the features are related to each other","849880d5":"# Features : whether it has any missing value","f1e55a17":"### Encoding (check : one-hot for linear regression, label encoding for descision tree. CF.slack)","4e8e1b3b":"### AGE","22f33797":"### After filling missing values","3372caee":"### AC","bedc8591":"### ZIPCODE","bcbd70f6":"### ALLBATHRM","2015eee9":"### PRICE(LOG) vs features(without missing values)","eab3719a":"## Fill missing values of vacant lot (No Structure)","4df1750e":"# Make csv files (train and test) for model training","e2fd48ef":"### Plot for features without missing values","e4583859":"# PRICE \u2192 log(1+x) transformation and delete PRICE outlier","2100bc4c":"### Percent of missing values","f588c1ac":"### OTHROOMS","c2af3982":"### Create new featues","1a671401":"### IMPAGE","434af507":"### FIREPLACES","ee54c09b":"### Filling missing values","2f860995":"# Recreate training and test datasets"}}