{"cell_type":{"9ac24661":"code","919968e9":"code","9fbc817e":"code","2f2dd804":"code","84fc11da":"code","4101c4a6":"code","6a2a16e1":"code","b1aebe50":"markdown"},"source":{"9ac24661":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","919968e9":"train_dir = \"\/kaggle\/input\/dogs-cats-images\/dog vs cat\/dataset\/training_set\/\"\ntest_df = \"\/kaggle\/input\/dogs-cats-images\/dog vs cat\/dataset\/test_set\/\" \nos.listdir(train_dir)","9fbc817e":"train_datagen = ImageDataGenerator(rescale=(1\/255.),shear_range = 0.2,zoom_range=0.2,\n                                   horizontal_flip=True)\ntraining_set = train_datagen.flow_from_directory(directory = train_dir,target_size=(64,64),\n                                                batch_size=32,\n                                                class_mode = \"binary\")\ntest_datagen = ImageDataGenerator(rescale=(1\/255.))\ntest_set = test_datagen.flow_from_directory(directory = test_df,target_size=(64,64),\n                                                batch_size=32,\n                                                class_mode = \"binary\")","2f2dd804":"from tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Conv2D,Dense,MaxPool2D,Flatten\nfrom tensorflow.keras.regularizers import l2","84fc11da":"model = Sequential()\nmodel.add(Conv2D(filters = 32, padding = \"same\",activation = \"relu\",kernel_size=3, strides = 2,input_shape=(64,64,3)))\nmodel.add(MaxPool2D(pool_size=(2,2),strides = 2))\n\nmodel.add(Conv2D(filters = 32, padding = \"same\",activation = \"relu\",kernel_size=3))\nmodel.add(MaxPool2D(pool_size=(2,2),strides = 2))\n\nmodel.add(Flatten())\nmodel.add(Dense(128,activation=\"relu\"))\n\n#Output layer\nmodel.add(Dense(1,kernel_regularizer=l2(0.01),activation = \"linear\"))","4101c4a6":"model.add(Dense(number_of_classes,kernel_regularizers = l2(0.01),activation= \"softmax\"))\nmodel.compile(optimizer=\"adam\",loss=\"squared_hinge\", metrics = ['accuracy'])","6a2a16e1":"# Compiling the CNN\nmodel.compile(optimizer = 'adam', loss = \"hinge\", metrics = ['accuracy'])\nhistory = model.fit(x = training_set,validation_data = test_set,epochs=15)","b1aebe50":">For Multiclass Classification"}}