{"cell_type":{"b2f017d9":"code","743f1f80":"code","d500fbd4":"code","936293f9":"code","5b43faaa":"code","7ace4098":"code","e37bb598":"code","5463b5fa":"code","5f291098":"code","f2a7f969":"code","8574fe61":"code","90db867a":"code","ca53febb":"code","877a9a31":"markdown","c092dd33":"markdown","47a978c9":"markdown","9770a0cf":"markdown","da9aa0a6":"markdown","481d37d5":"markdown","1e7a054e":"markdown","ce576d46":"markdown"},"source":{"b2f017d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","743f1f80":"# Read data\ndf = pd.read_csv(\"\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")","d500fbd4":"# Converted 'date' column to datetime to plot with matplotlib later\ndf['date'] = pd.to_datetime(df['date'])\n\n# An overview of the data\ndf.head(n=3)","936293f9":"def get_vaccines(cdf: pd.DataFrame):\n    vaccines = cdf['vaccines'].unique()\n    distinct_vaccines = []\n    \n    for vaccine in vaccines:\n        for v in vaccine.split(','):\n            v = v.strip()\n            if v not in distinct_vaccines:\n                distinct_vaccines.append(v)\n    return distinct_vaccines\n","5b43faaa":"vaccines = get_vaccines(df)\nprint(\"Vaccines used:\")\nprint(', '.join(vaccines))","7ace4098":"vaccines_country = {}\npeople_vaccinated = {}\nvaccinations_percentage = {}\n\ncountries = df['country'].unique()\n\nfor vaccine in vaccines:\n    vaccines_country[vaccine] = []","e37bb598":"for country in countries:\n    country_df = df.loc[df['country'] == country]\n    country_vaccinations = country_df['people_vaccinated'].sum()\n    people_vaccinated[country] = country_vaccinations\n    c_vaccines = country_df['vaccines'].unique()\n    \n    country_df = country_df.dropna(subset=['people_vaccinated_per_hundred'])\n    if not country_df.empty:\n        vaccinations_percentage[country] = list(country_df['people_vaccinated_per_hundred'])[-1]\n    else:\n        vaccinations_percentage[country] = 0\n    \n    for vaccine in c_vaccines:\n        for v in vaccine.split(','):\n            v = v.strip()\n            vaccines_country[v].append(country)","5463b5fa":"for vaccine in vaccines_country:\n    print(f\"Vaccine: {vaccine}:\")\n    print(f\"Number of countries using it: {len(vaccines_country[vaccine])}\")\n    print(f\"List of countries using it: \\n{vaccines_country[vaccine]}\")\n    print(f\"-\"*200, \"\\n\")","5f291098":"vaccine_counts = {}\nfor v in vaccines_country:\n    vaccine_counts[v] = len(vaccines_country[v])\n\nplt.rcParams[\"figure.figsize\"] = (20,7)\nplt.bar(vaccine_counts.keys(), vaccine_counts.values())\nplt.xticks(rotation=60)\nplt.show()","f2a7f969":"max_v_country = max(people_vaccinated, key=people_vaccinated.get)\nprint(\"Country with highest vaccinations: \",max_v_country)","8574fe61":"max_v_cntry_df = df.loc[df['country'] == max_v_country]\nmax_v_cntry_df = max_v_cntry_df.sort_values(by='date')\n\nplt.plot(max_v_cntry_df['date'], max_v_cntry_df['people_vaccinated'])\n\nplt.title(f\"Vaccinations over time in {max_v_country}\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"People Vaccinated (in 100 millions)\")\n\nplt.show()","90db867a":"max_per_country = max(vaccinations_percentage, key=vaccinations_percentage.get)\nprint(\"Country which has vaccinated larger percent of population: \", max_per_country)\nprint(\"Percent of population vaccinated: \", vaccinations_percentage[max_per_country])","ca53febb":"max_per_cntry_df = df.loc[df['country'] == max_per_country]\nmax_per_cntry_df = max_per_cntry_df.sort_values(by='date')\n\nplt.plot(max_per_cntry_df['date'], max_per_cntry_df['people_vaccinated_per_hundred'])\n\nplt.title(f\"Percentage of vaccinations over time in {max_per_country}\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Percentage of people Vaccinated\")\n\nplt.show()","877a9a31":"## Vaccination percentage over time in country with highest percentage of vaccinations","c092dd33":"## Histogram of vaccines by number of countries using it","47a978c9":"## What vaccines are used ?","9770a0cf":"## Number of people vaccinated over time in country with highest vaccinations","da9aa0a6":"## What country has vaccinated a larger percent from its population?","481d37d5":"## Which vaccines are used in which countries?","1e7a054e":"## Country with highest vaccinations","ce576d46":"# Task 1"}}