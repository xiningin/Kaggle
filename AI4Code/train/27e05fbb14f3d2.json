{"cell_type":{"cc522737":"code","6cf9b1fe":"code","7d6bd8fd":"code","3c27b9f5":"code","96b1475d":"code","e5bb7f22":"code","40344ee8":"code","2024b606":"code","97841d21":"code","fa41cfc6":"markdown","a3506552":"markdown","19142a34":"markdown","57286c4a":"markdown","3a20f65c":"markdown"},"source":{"cc522737":"from tqdm import tqdm\nimport pandas as pd\nimport numpy as np\nimport random\nimport os\nimport gc\n\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import ExtraTreesRegressor, VotingRegressor, RandomForestRegressor, HistGradientBoostingRegressor\nfrom sklearn.linear_model import LinearRegression, Ridge, BayesianRidge\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\n\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cbt\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npd.options.display.max_rows = 100\npd.options.display.max_columns = 100\n\nimport warnings\nwarnings.simplefilter('ignore')","6cf9b1fe":"CFG = {\n    'debug': False,\n    'seed': 2021,\n}","7d6bd8fd":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(CFG['seed'])","3c27b9f5":"PATH = \"..\/input\/tabular-playground-series-jul-2021\/\"\n\ntrain = pd.read_csv(PATH + \"train.csv\", index_col=\"date_time\", parse_dates=True)\ntest = pd.read_csv(PATH + \"test.csv\", index_col=\"date_time\", parse_dates=True)\nsubmission = pd.read_csv(PATH + \"sample_submission.csv\", index_col=\"date_time\", parse_dates=True)\n\nfeatures = [col for col in train.columns if 'target_' not in col]\ntarget = [col for col in train.columns if 'target_' in col]\n\ntrain[target] = np.log1p(train[target])","96b1475d":"def make_features(df, params):\n    \"\"\"\n    Adds new features to a given dataset\n    \"\"\"\n    df['year'] = df.index.year\n    df['month'] = df.index.month\n    df['week'] = df.index.week\n    df['day'] = df.index.day\n    df['dayofweek'] = df.index.dayofweek\n    df['time'] = df.index.date - df.index.date.min()\n    df['hour'] = df.index.hour\n    df['time'] = df['time'].apply(lambda x : x.days)\n\n    df['working_hours'] =  df['hour'].isin(np.arange(8, 21, 1)).astype('int')\n    df['maximum_hours'] =  df['hour'].isin([8, 9, 17, 18, 19, 20]).astype('int')\n    df['is_weekend'] = (df.index.dayofweek >= 5).astype('int')\n\n    df['SMC'] = (df['absolute_humidity'] * 100) \/ df['relative_humidity']\n    \n    df['sensor_6'] = (df['sensor_2'] - df['sensor_5']) \/ df['sensor_5']\n    df['sensor_7'] = (df['sensor_3'] - df['sensor_4']) \/ df['sensor_4']\n\n    for periods in params[0]:\n        df[f'dt-{periods}'] = df['deg_C'] - df['deg_C'].shift(periods=periods, fill_value=0)\n\n    for periods in params[1]:\n        df[f'abshum-{periods}'] = df['absolute_humidity'] - df['absolute_humidity'].shift(periods=periods, fill_value=0)\n        df[f'relhum-{periods}'] = df['relative_humidity'] - df['relative_humidity'].shift(periods=periods, fill_value=0)\n        \n    for periods in params[2]:\n        df[f's1-{periods}'] = df['sensor_1'] - df['sensor_1'].shift(periods=periods, fill_value=0)\n        df[f's2-{periods}'] = df['sensor_2'] - df['sensor_2'].shift(periods=periods, fill_value=0)\n        df[f's3-{periods}'] = df['sensor_3'] - df['sensor_3'].shift(periods=periods, fill_value=0)\n        df[f's4-{periods}'] = df['sensor_4'] - df['sensor_4'].shift(periods=periods, fill_value=0)\n        df[f's5-{periods}'] = df['sensor_5'] - df['sensor_5'].shift(periods=periods, fill_value=0)\n        df[f's6-{periods}'] = df['sensor_6'] - df['sensor_6'].shift(periods=periods, fill_value=0)\n        df[f's7-{periods}'] = df['sensor_7'] - df['sensor_7'].shift(periods=periods, fill_value=0)\n            \n    return df","e5bb7f22":"train = make_features(train, [[3, 6], [3, 6], [1]])\ntest = make_features(test, [[3, 6], [3, 6], [1]])\n\nscaler = StandardScaler()\nscaler.fit(train[features])\ntrain[features] = scaler.transform(train[features])\ntest[features] = scaler.transform(test[features])","40344ee8":"if CFG['debug']:\n    X_train = train[features][(train.index.month>8)&(train.index.month<12)].reset_index(drop=True)\n    y_train = train[target][(train.index.month>8)&(train.index.month<12)].reset_index(drop=True)\n    X_valid = train[features][train.index.month==12].reset_index(drop=True)\n    y_valid = train[target][train.index.month==12].reset_index(drop=True)\nelse:\n    X_train = train[features][train.index.month>8].reset_index(drop=True)\n    y_train = train[target][train.index.month>8].reset_index(drop=True)\n    \nX_test = test[features].reset_index(drop=True)","2024b606":"rmsle = np.zeros((len(target)))\n\nfor i, col in enumerate(target):\n    model1 = lgb.LGBMRegressor(seed=CFG['seed'])\n    # model2 = xgb.XGBRegressor(seed=CFG['seed'])\n    model3 = cbt.CatBoostRegressor(random_seed=CFG['seed'], verbose=False)\n    # model4 = LinearRegression(normalize=True, n_jobs=-1)\n    # model5 = BayesianRidge(normalize=True)\n    model6 = ExtraTreesRegressor(random_state=CFG['seed'], n_jobs=-1)\n    # model7 = RandomForestRegressor(random_state=CFG['seed'], n_jobs=-1)\n    model8 = HistGradientBoostingRegressor(random_state=CFG['seed'])\n    \n    model = VotingRegressor(\n        estimators=[\n            ('lgb', model1),\n            # ('xgb', model2),\n            ('cbt', model3),\n            # ('lrg', model4),\n            # ('bay', model5),\n            ('etr', model6),\n            # ('rfr', model7),\n            ('hgb', model8)\n        ],\n    )\n    \n    model.fit(X_train, y_train[col])\n    if CFG['debug']:\n        rmsle[i] = mean_squared_error(y_valid[col], model.predict(X_valid), squared=False)\n        print(f\"{col} rmsle: {rmsle[i]:.6f}\")\n              \n    submission[col] = np.expm1(model.predict(X_test))\n\nif CFG['debug']:\n    print(\"-\"*20)\n    print(f\"rmsle: {np.mean(rmsle):.6f}\")","97841d21":"submission.to_csv(\"submission.csv\")\nsubmission","fa41cfc6":"# Libraries\n---","a3506552":"# VotingRegressor\n---","19142a34":"# Feature engineering\n---","57286c4a":"# Datasets\n---","3a20f65c":"# Submission\n---"}}