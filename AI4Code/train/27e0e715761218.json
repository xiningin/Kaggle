{"cell_type":{"fa473aa7":"code","19831e01":"code","879ddbd1":"code","519460ca":"code","6e3d1cf8":"code","3c84386d":"code","eac2a1a5":"code","c6ef25b7":"code","a389a767":"code","24fcf284":"code","985b61f9":"code","d4f1ab2e":"code","e3f051bf":"code","9bbbb92a":"code","28aaccff":"code","5c5882e2":"code","25aa7ea8":"code","82950a56":"code","47abf0c5":"code","abe13a9d":"code","a695e52e":"code","41d597c6":"code","7daeb182":"code","6cfbb999":"code","f72cf4ef":"code","2e5fa292":"code","1ad8818e":"code","10cb7be9":"code","ecf5b79e":"code","0f96d870":"markdown","ce42f2c1":"markdown","b80f812b":"markdown","87309eff":"markdown","afcab66c":"markdown","e4449dd0":"markdown","4fd981ea":"markdown","8d9a17a7":"markdown","9fe95050":"markdown","2a430168":"markdown","b6dcd5e4":"markdown","523a5b91":"markdown","9de34d50":"markdown","10200c8a":"markdown","9750b35e":"markdown","3131a33a":"markdown"},"source":{"fa473aa7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom tensorflow import keras\nimport os\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom sklearn.model_selection import train_test_split,KFold\nimport warnings\nwarnings.filterwarnings('ignore')","19831e01":"from sklearn.preprocessing import StandardScaler,RobustScaler\nscaler = StandardScaler()\nrobust = RobustScaler()","879ddbd1":"train_ds = pd.read_csv('..\/input\/diamonds-ds-ft-2109\/diamonds_train.csv',index_col=[0])\ntest_ds = pd.read_csv('..\/input\/diamonds-ds-ft-2109\/diamonds_test.csv',index_col=[0])","519460ca":"def Categorical_Data(df): \n    df['cut'] = pd.Categorical(df['cut']).codes\n    df['color'] = pd.Categorical(df['color']).codes\n    df['clarity'] = pd.Categorical(df['clarity']).codes\n    return df\n\ntrain_ds = Categorical_Data(train_ds)\ntest_ds = Categorical_Data(test_ds)","6e3d1cf8":"train_ds['alpha'] = np.arctan2(((train_ds['x']+train_ds['y'])\/2-np.sqrt(train_ds['table']\/3)),(train_ds['z']*(1-train_ds['depth']\/100)))\ntrain_ds['beta'] = np.arctan2((np.sqrt(train_ds['z'])\/3*train_ds['depth']),(train_ds['x']+train_ds['y']))\n\ntest_ds['alpha'] = np.arctan2(((test_ds['x']+test_ds['y'])\/2-np.sqrt(test_ds['table']\/3)),(test_ds['z']*(1-test_ds['depth']\/100)))\ntest_ds['beta'] = np.arctan2((np.sqrt(test_ds['z'])\/3*test_ds['depth']),(test_ds['x']+test_ds['y']))","3c84386d":"sns.distplot(train_ds['price']).set_title('Diamond Price Distribution')","eac2a1a5":"def dist_plot_below_above(col,name):\n    \n    price_above = train_ds[train_ds.price > 7500]\n    price_below = train_ds[train_ds.price < 7500]\n    \n    fig, axes = plt.subplots(1, 2)\n\n    fig.set_size_inches(22, 6)\n    \n    sns.distplot(price_above[col],ax=axes[0])\n    axes[0].title.set_text(name+' (7500 > Price)')\n    \n    sns.distplot(price_below[col],ax=axes[1])\n    axes[1].title.set_text(name+' (7500 < Price)')\n    \ndef dist_barplot_visualization(col,name): \n    fig, axes = plt.subplots(1, 1)\n    fig.set_size_inches(22, 6)\n    sns.barplot(x = col, y = 'price', data = train_ds, ax=axes)\n    axes.title.set_text('Price '+name)","c6ef25b7":"dist_plot_below_above('depth','Diamond Depth')","a389a767":"dist_plot_below_above('x','Diamond X')","24fcf284":"dist_plot_below_above('y','Diamond Y')","985b61f9":"dist_plot_below_above('z','Diamond Z')","d4f1ab2e":"dist_plot_below_above('table','Diamond Table')","e3f051bf":"dist_plot_below_above('carat','Diamond Carat')","9bbbb92a":"dist_barplot_visualization('cut','Diamond Cuts')","28aaccff":"dist_barplot_visualization('color','Diamond Color')","5c5882e2":"dist_barplot_visualization('clarity','Diamond Clarity')","25aa7ea8":"target = train_ds.pop('price')","82950a56":"robust.fit(train_ds)\ntrain = robust.transform(train_ds)\ntest = robust.transform(test_ds)\n\ntarget = np.asarray(target)","47abf0c5":"#X_train, X_test, y_train, y_test = train_test_split(train, target, test_size=0.1)","abe13a9d":"def build_model():\n    model = tf.keras.Sequential()\n    model.add(layers.Dense(32, input_dim = train.shape[1], activation = 'relu'))\n    model.add(layers.Dropout(0.2))\n    model.add(layers.Dense(64, activation = 'relu'))\n    model.add(layers.Dropout(0.2))\n    model.add(layers.Dense(32, activation = 'relu'))\n    model.add(layers.Dropout(0.2))\n\n    model.add(layers.Dense(1)) \n    \n    model.compile(optimizer=tf.keras.optimizers.Adam(), loss='mse', metrics=[tf.keras.metrics.RootMeanSquaredError()])\n    \n    return model","a695e52e":"model = build_model()\nmodel.summary()","41d597c6":"train.shape,test.shape,target.shape","7daeb182":"kf = KFold(n_splits=4, shuffle=True)\n\nfor fold, (train_idx, test_idx) in enumerate(kf.split(train, target)):\n    print('-'*30, '>', f'Fold {fold+1}', '<', '-'*30)\n    X_train, X_valid = train[train_idx], train[test_idx]\n\n    y_train, y_valid = target[train_idx], target[test_idx]\n\n    reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_root_mean_squared_error', verbose=1, factor=0.8, patience=5)\n    save_best = tf.keras.callbacks.ModelCheckpoint(f'.\/Model{fold+1}.h5',monitor=\"val_root_mean_squared_error\",verbose=1,save_best_only=True)\n    \n    model = build_model()\n\n    his = model.fit(X_train, y_train, validation_data=(X_valid,y_valid), batch_size=64, epochs=50, verbose=1, callbacks=[save_best,reduce_lr])\n    stats = pd.DataFrame(his.history)\n    stats.plot()\n    plt.show()\n    print(\"\\n\\n\")","6cfbb999":"models_paths = [\".\/Model1.h5\",\".\/Model4.h5\"]\n\nmodels = [tf.keras.models.load_model(model_path) for model_path in models_paths]","f72cf4ef":"predicted = []\n\nfor model in models:\n    pred = model.predict(test, verbose=1)\n    predicted.append(pred)","2e5fa292":"pred = ((predicted[0] + predicted[1])\/2)","1ad8818e":"pred.round()","10cb7be9":"submission_file = pd.read_csv(\"..\/input\/diamonds-ds-ft-2109\/sample_submission.csv\")\nsubmission_file['price'] = pred.round()\nsubmission_file.to_csv('submission.csv', index=False)","ecf5b79e":"submission_file","0f96d870":"**Getting Target Value**","ce42f2c1":"**Scaler Initlization**","b80f812b":"**Diamond Price Disturbution**","87309eff":"**Changing Categorical Data to Numerical**","afcab66c":"**Loading the Best Model**","e4449dd0":"**Prediction**","4fd981ea":"![Screenshot from 2021-11-07 14-07-00.png](attachment:f76ea32f-c304-4363-8cfa-99bbb9860c90.png)","8d9a17a7":"**Submission**","9fe95050":"**Datasets**","2a430168":"**Distplot and Bar Graph Functions**","b6dcd5e4":"**Train Model With Kfold**","523a5b91":"**Comparing Lower Price and Higher Price**","9de34d50":"**Data Visualization**","10200c8a":"**Scalling the Date**","9750b35e":"**Adding Feature**","3131a33a":"**Build Model**"}}