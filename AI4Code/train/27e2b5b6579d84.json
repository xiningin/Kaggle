{"cell_type":{"2d5de878":"code","5a1cec23":"code","f34784a1":"code","b84bc973":"code","750eb486":"code","9f6bc50b":"code","8275cdc4":"code","f32d4207":"code","4b120ba9":"code","5e93d896":"code","d004663c":"code","84627b05":"code","966d7584":"code","aa95f6b4":"markdown","2f68773c":"markdown","dfa80b3e":"markdown","019d46fc":"markdown","46727399":"markdown","05500cd2":"markdown","30bd80f0":"markdown"},"source":{"2d5de878":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport glob\nfrom tqdm import tqdm\nimport gc\nimport pyarrow.parquet as pq","5a1cec23":"pip install mljar-supervised","f34784a1":"from supervised.preprocessing.eda import EDA","b84bc973":"def rm(df):\n    for col in df.columns:\n        col_type = df[col].dtype        \n        if (col_type != object) and (type(col_type) != pd.core.dtypes.dtypes.CategoricalDtype):\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')                    \n    return df\ndef r(path):\n    return rm(pq.read_table(path).to_pandas())\ndef rf(file_path):\n    file_list = glob.glob(file_path + '\/*')\n    file = r(file_list[0])\n    if \"stock_id\" not in file.columns: \n        file[\"stock_id\"] = int(file_list[0].split(\"\/\")[-1].split(\"=\")[-1])\n    for i in tqdm(range(1, len(file_list))):\n        data2 = r(file_list[i])\n        if \"stock_id\" not in data2.columns:\n            data2[\"stock_id\"] = int(file_list[i].split(\"\/\")[-1].split(\"=\")[-1])\n        file = pd.concat([file, data2])\n        del data2\n        gc.collect()\n    file = file.reset_index(drop = True)\n    return file","750eb486":"trade_train = rf('..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet')\ntrade_train","9f6bc50b":"trade_train.to_csv('trade_train.csv', index=False)","8275cdc4":"book_train = rf(\"..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\")\nbook_train","f32d4207":"book_train[book_train.stock_id == 0]","4b120ba9":"book_train.to_csv('book_train.csv', index=False)","5e93d896":"trade_test = rf(\"..\/input\/optiver-realized-volatility-prediction\/trade_test.parquet\")\ntrade_test","d004663c":"book_test = rf(\"..\/input\/optiver-realized-volatility-prediction\/book_test.parquet\")\nbook_test","84627b05":"train = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/train.csv\")\ntrain","966d7584":"EDA.extensive_eda(train[[\"stock_id\", \"time_id\"]], train.target, save_path=\".\/\")","aa95f6b4":"<a href=\".\/book_train.csv\"> Download File <\/a>","2f68773c":"# Book train","dfa80b3e":"100000000+ rows?, ok","019d46fc":"# Trade test","46727399":"# Trade train","05500cd2":"# Book test","30bd80f0":"# If the content is helpful, please upvote. :)"}}