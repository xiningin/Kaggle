{"cell_type":{"c8ad8b2d":"code","e89750e9":"code","04fd7908":"code","10346194":"code","db9a26d7":"code","8be3d721":"code","63d650f3":"code","f4f4f934":"code","08a85dc6":"code","0bed3f22":"code","ec83fb33":"code","57f1f93c":"code","cbc1a610":"code","cad1f4b7":"code","0c552c4a":"code","e460923e":"code","dc0d5375":"code","0f585643":"code","6f034ea1":"code","d043835e":"code","b5a6100d":"code","05184b4a":"code","ede590fd":"code","57e4c730":"code","ce2caa40":"code","8bce7675":"code","992ebe45":"code","50f2a3e3":"markdown","9c5d1930":"markdown","c48842d3":"markdown","ea360077":"markdown","f2ea03e7":"markdown","b9b4b8c9":"markdown","aa75052b":"markdown","bab9cf78":"markdown","7e2d500d":"markdown","7170d30f":"markdown","0fc2c6db":"markdown","6be7651e":"markdown","5f0a0f13":"markdown","af26ec64":"markdown","c4153aa4":"markdown","f4d267ae":"markdown","d753ddc7":"markdown"},"source":{"c8ad8b2d":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt","e89750e9":"credits_data = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\nmovies_data = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","04fd7908":"credits_data.head(10)","10346194":"movies_data.head(10)","db9a26d7":"credits_data.columns","8be3d721":"movies_data.columns","63d650f3":"credits_data.isnull().sum(axis=0)","f4f4f934":"movies_data.isnull().sum(axis=0)","08a85dc6":"print(credits_data.shape)\nprint(movies_data.shape)","0bed3f22":"# Renaming the column of Movie-ID in credits data to ID \ncredits_data = credits_data.rename(columns={'movie_id':'id'})\ncredits_data","ec83fb33":"merged_data = movies_data.merge(credits_data,on='id')\nmerged_data","57f1f93c":"# Displaying the columns of merged data\nmerged_data.columns","cbc1a610":"merged_data.drop(columns=['title_x'],inplace=True)\nmerged_data.rename(columns={'title_y':'title'},inplace=True)\nmerged_data.columns","cad1f4b7":"merged_data.head(10)","0c552c4a":"merged_data = merged_data.drop(columns=['title','homepage','status','production_countries'])\nmerged_data","e460923e":"merged_data.info()","dc0d5375":"v = merged_data['vote_count']               # Number of votes for the movie\nR = merged_data['vote_average']             # Vote average of a movie which is a number from 0 to 10\nC = merged_data['vote_average'].mean()      # The mean vote across the whole report \nm = merged_data['vote_count'].quantile(0.7) # More than 70%ile votes should be there for consideration","0f585643":"merged_data['Weighted_average'] = ((R*v)+(C*m))\/(v+m)","6f034ea1":"merged_data.head(10)","d043835e":"movie_rankings = merged_data.sort_values('Weighted_average',ascending=False)\nmovie_rankings[['original_title','vote_count','vote_average','Weighted_average','popularity']]","b5a6100d":"weighted_average = merged_data.sort_values('Weighted_average',ascending=False)\nplt.figure(figsize=(14,10))\naxis1 = sns.barplot(x = weighted_average['Weighted_average'].head(10),y = weighted_average['original_title'].head(10))\n\nplt.title('Best Movies according to Average Vote given by Users',weight='bold')\nplt.xlabel('Weighted Average Score',weight='bold')\nplt.ylabel('Movie Title',weight='bold')","05184b4a":"popularity = merged_data.sort_values('popularity',ascending=False)\nplt.figure(figsize=(14,10))\naxis1 = sns.barplot(x = popularity['popularity'].head(10),y = popularity['original_title'].head(10))\nplt.title('Movies most popular by votes',weight='bold')\nplt.xlabel('Score of Popularity',weight='bold')\nplt.ylabel('Movie Title',weight='bold')","ede590fd":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaled_merged_data = scaler.fit_transform(merged_data[['Weighted_average','popularity']])\nnormalized_merged_data = pd.DataFrame(scaled_merged_data,columns=['Weighted_average','popularity'])\nnormalized_merged_data.head(10)","57e4c730":"merged_data[['Normalized  Weight Average','Normalized Popularity']] = normalized_merged_data\nmerged_data","ce2caa40":"merged_data.columns","8bce7675":"merged_data['Score'] = merged_data['Normalized  Weight Average']*0.5 + merged_data['Normalized Popularity']*0.5\nmerged_data = merged_data.sort_values('Score',ascending=False)\nmerged_data[['original_title','Normalized  Weight Average','Normalized Popularity','Score']]","992ebe45":"score = merged_data.sort_values('Score',ascending=False)\nplt.figure(figsize=(14,10))\naxis1 = sns.barplot(x = score['Score'].head(10),y = score['original_title'].head(10))\nplt.title('Movies most popular by Score',weight='bold')\nplt.xlabel('Score',weight='bold')\nplt.ylabel('Movie Title',weight='bold')","50f2a3e3":"# Visualizing best movies by popularity","9c5d1930":"# Visualizing best movies by average votes","c48842d3":"# Removing irrelevant columns from the merged_data","ea360077":"# Checking the NA values","f2ea03e7":"# Visualizing Data Based on the Score","b9b4b8c9":"# Displaying the data","aa75052b":"# Displaying the column names of merged data","bab9cf78":"## Name: Jay Shah \n## Date: 4-6-2021\n# Recommendation System","7e2d500d":"# Shape of the Dataset","7170d30f":"# Sorting the values in descending order based on the weighted average and thereby displaying the most recommended movie","0fc2c6db":"# Applying the weighted average technique for each movie's average rating","6be7651e":"# Displaying the name of columns.","5f0a0f13":"# Recommendation based on Scaled Weighted Average & Popularity Score","af26ec64":"# Merging both the dataset\n#### Both datasets can be merged on ID column present in movie data with Movie_ID from credits data. In order to merge we will first need to rename any one of the column name so that they can be merged on that particular name.","c4153aa4":"# Reading the input data from the file","f4d267ae":"# Removing the column name title_x and renaming the title_y to title.\n### Here the title_x values is same as that of title_y and hence the below step is performed.","d753ddc7":"# Generating new column in Merged Data called Score which is calculated by giving 50% to each Normalized Popularity and Normalized Weighted Score"}}