{"cell_type":{"5c7d71bb":"code","bc9a2c46":"code","be7540eb":"code","ccffbed7":"code","1a66f2f6":"code","7877cf89":"code","81e8c87a":"code","a905a6f3":"code","b0305850":"code","70a7d53e":"code","d1171d04":"code","674879cb":"code","723f6ea8":"code","5e41c1f5":"code","c8590cfd":"code","80f04fe8":"code","57cacb8a":"code","769d2ce7":"code","2c17a8c8":"code","c30a4897":"code","b7232733":"markdown","2f5c99b9":"markdown","17aba2c7":"markdown","a2ea8896":"markdown","b43bb946":"markdown","1f91d7f8":"markdown"},"source":{"5c7d71bb":"# basics\nimport pandas as pd\nfrom datetime import timedelta\n\n# statistics\nimport statsmodels.api as sm\nimport scipy.stats as scs\n\n# modelling\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler\n\n# visualisation\nimport plotly\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfrom plotly import tools","bc9a2c46":"# modified province to county level in TimeProvince\ntimeprovince = pd.read_csv('..\/input\/edit-timeprovince\/edit_TimeProvince.csv')\ntimeprovince.head(3)","be7540eb":"timeprovince['date'] = pd.to_datetime(timeprovince['date'], format='%m\/%d\/%Y')\ntimeprovince = timeprovince[timeprovince['sum_confirmed'].notna()]\ntimeprovince.drop(columns = ['confirmed', 'released', 'deceased'], axis = 1, inplace = True)\ntimeprovince = timeprovince.rename(columns={'province': 'region'})\ntimeprovince.head(3)","ccffbed7":"# function to get daily cases\ndef diff_func(x):\n    first_value = x.sum_confirmed[x.index[0]]\n    x['new_daily_cases'] = x.sum_confirmed.diff()\n    x.iloc[0, -1] = first_value\n    return x\n\ntimeprovince = timeprovince.groupby(['region']).apply(lambda x : diff_func(x))","1a66f2f6":"policy = pd.read_csv('..\/input\/coronavirusdataset\/Policy.csv')\npolicy['date'] = pd.to_datetime(policy['start_date'], format='%Y\/%m\/%d')\npolicy['date_end'] = pd.to_datetime(policy['end_date'], format='%Y\/%m\/%d')\npolicy.head(3)","7877cf89":"import glob, os\ntcs = pd.concat(map(pd.read_csv, glob.glob(os.path.join('..\/input\/trafficmobilitysouthkorea2020\/', 'edit_TCS_*.csv'))))\ntcs.head(8)","81e8c87a":"tcs.date = pd.to_datetime(tcs['date'], format='%Y%m%d')\ntcs.drop(columns = ['arrival_Capital','arrival_Gangwon','arrival_DaejeonChungnam','arrival_GwangjuJeonnam','arrival_DaeguGyeongbuk','arrival_BusanGyeongnam','arrival_Jeonbuk','arrival_Chungbuk'], axis = 1, inplace = True)\ntcs['region_mobility'] = tcs['sum_bydeparture'].values + tcs['sum_byarrival'].values\ntcs.head(8)","a905a6f3":"newdf = pd.merge(timeprovince[['date','region','new_daily_cases']], tcs[['date','region','region_mobility']], how = 'left', on = ['date','region']).sort_values(by=['date'])\nnewdf.head(8)","b0305850":"# make a copy for modelling before removing NA rows \nmodelling_data = newdf.copy(deep = True)\nmodelling_data.reset_index(drop = True, inplace = True)","70a7d53e":"# remove NA rows\nnewdf = newdf[~pd.isna(newdf.new_daily_cases)]\nnewdf = newdf[~pd.isna(newdf.region_mobility)] #Jeju-do","d1171d04":"# modelling data predicting the number of cases on the current day\n# given the temperature and mobility x days prior\n\n# function to generate modelling data\ndef prior_temp_mobility(df, n):\n    \n    _df = df.reset_index(drop = True)\n    \n    min_not_na = 50\n    max_not_na = _df.shape[0]\n\n    _df.iloc[min_not_na:max_not_na, 3:] = _df.iloc[(max(0, min_not_na - n)):(max_not_na - n), 3:].values\n\n    return _df\n    \n\n# days 1 to 30\nframes = []\n\nfor n in range(1, 31):\n    temp_frame = modelling_data.groupby(['region']).apply(lambda x : prior_temp_mobility(x, n)).reset_index(drop = True)\n    \n    # remove NA cases\n    temp_frame = temp_frame[~pd.isna(temp_frame.new_daily_cases)]\n    temp_frame = temp_frame[~pd.isna(temp_frame.region_mobility)]\n    \n    # create days since first case column\n    temp_frame['days_since'] = (temp_frame.date - pd.Timestamp('2020-01-20')).dt.days\n    # extract month from date     \n    temp_frame['month'] = temp_frame.date.dt.month\n    \n    # for modelling only include 20\/01\/2020 - 01\/05\/2020 prior to MAY data     \n    temp_frame = temp_frame[temp_frame.date <= pd.Timestamp('2020-05-01')]\n\n    # append to container\n    frames.append(temp_frame)","674879cb":"temp_frame.head()","723f6ea8":"models = []\n\nfor modelling_frame in frames:\n    # copy modelling_frame     \n    _frame = modelling_frame.copy(deep = True).reset_index(drop = True)\n    \n    # get response columns     \n    response = _frame.new_daily_cases.values\n    \n    # one hot encode regions\n    region = _frame['region'].values.reshape(-1, 1)\n    _frame.drop(['new_daily_cases', 'region', 'date'], axis = 1, inplace = True)\n    enc = OneHotEncoder(handle_unknown = 'ignore', sparse = False)\n    enc.fit(region)\n    \n    # min max scale quantitative mobilit features     \n    minmaxscaler = MinMaxScaler()\n    cols = ['region_mobility']\n    minmaxscaler.fit(_frame.loc[:, cols])\n    _frame.loc[:, cols] =   minmaxscaler.transform(_frame.loc[:, cols])\n    \n    # create region x _ features\n    \n    # region one hot encoded\n    region_ohe = enc.transform(region)\n\n    # region x mobility\n    mobility = pd.DataFrame(region_ohe, columns = enc.get_feature_names(['mobility'])).multiply(_frame.region_mobility, axis = 0)\n    \n    # region x month\n    monthly = pd.DataFrame(region_ohe, columns = enc.get_feature_names(['monthly'])).multiply(_frame.month, axis = 0)\n    \n    # concatenate feature frames\n    _frame = pd.concat([_frame, mobility, monthly], axis = 1)\n\n    # add a constant column for the intercept \n    _frame = sm.add_constant(_frame)\n    \n    _frame = _frame.loc[:, [col for col in _frame.columns if col not in ['region_mobility', 'month']]]\n  \n    # train an OLS model\n    reg = sm.OLS(response, _frame.values)\n    reg = reg.fit()\n    \n    #_ = {'model': reg, 'r2': reg.score(_frame, response), 'coefficients':reg.coef_, 'intercept': reg.intercept_}\n    \n    models.append(reg)","5e41c1f5":"reg.predict(_frame.values).max()","c8590cfd":"_frame.columns\n\n# var 1(global mobility), 7(mobility DaeguGyeongbuk), 15(monthly DaeguGyeongbuk)\n\n# 5 and 13 \n\n# DaeguGyeongbuk with the most data has mobiltiy corrleated \n# shifted 28 days ahead -> DaeguGyeongbuk is significant","80f04fe8":"for i, model in enumerate(models):\n    print(i+1)\n    print(model.summary())\n    print('\\n')","57cacb8a":"# using the mobility data 2 days prior fits the trianing data the best in terms \n# of R2 -> no validation data, but just want to see if there is any signal \n# in the mobility feature\n# but just wanting to see if the mobility feature has any signal with respect to\n# number of new covid-19 cases\n\n# model is y = bi*Mob + ci*pit  + days_since_outbreak + const (bit is a parameter for the mobility in region i, cit for the month information in region i)\n# bi = x5 (statistically significant)\nmodels[29].summary().tables[0]","769d2ce7":"# x5 corresponds to mobility_DaeguGyeongbuk -> p>|t| <0.05 which means that mobility is statistically significant \n# in the linear model, all other features are not significant e.g. mobility_capital e.t.c\nmodels[29].summary().tables[1]","2c17a8c8":"subset_data = newdf[newdf.region == 'DaeguGyeongbuk']\nsubset_data = subset_data[~pd.isna(subset_data.new_daily_cases)]\nsubset_data = pd.merge(subset_data, policy[['type', 'gov_policy', 'detail', 'date', 'date_end']],how = 'left', on  = ['date'])\nsubset_data[subset_data.detail == 'Level 4 (Red)'].date\nsubset_data.head(3)","c30a4897":"trace1 = go.Scatter(x = subset_data['date'], y = subset_data['new_daily_cases'], text = subset_data['gov_policy'], name = 'Number of new cases')\ntrace2 = go.Scatter(x = subset_data['date'],y = subset_data['region_mobility'], name = 'Number of arrivals and departures')\ntrace3 = go.Scatter(x = subset_data['date'] + timedelta(days = 29),y = subset_data['region_mobility'],name = 'Number of arrivals and departures shifted by +28 day')\n\nfig = make_subplots(specs = [[{'secondary_y': True}]])\nfig.add_trace(trace1)\nfig.add_trace(trace2, secondary_y = True)\nfig.add_trace(trace3, secondary_y = True)\n\nfig.update_layout(title = 'Number of daily COVID-19 cases and total number of arrivals and departures in DaeguGyeongbuk', xaxis_title = 'Date', yaxis_title = 'Number of new COVID-19 cases')\nfig.update_layout(shapes=[dict(type= 'line', yref= 'paper', y0= 0, y1= 1, xref= 'x', x0=subset_data[subset_data.detail == \"Level 4 (Red)\"].date)])\nfig.update_yaxes(title_text = \"No. arrivals and departures\", secondary_y = True)","b7232733":"## 2)Visual Analysis part:\n\nCarten\u00ec et al. (2020) identify strong (large and statistically significant) coefficients between the number of COVID-19 cases and the modelling features. In particular, their best model is obtained by setting the lag between contagion and detection at $x$ = 21. In this study, however, shifting the mobility data 29 days forward is more in line with the recording of new COVID-19 cases in region DaeguGyeongbuk as illustrated in the Figure about DaeguGyeongbuk mobility and COVID-19 cases.","2f5c99b9":"## Design a new dataset","17aba2c7":"## Load the Second dataset (TCS)\n\nIn addition, an aggregated dataset is downloaded to support human movement perspective from the Public Data Portal. Six Traffic Control System(TCS) csv files for each month were easy to concatenate as they followed the same structure but required to encode Korean header and a few of data label in English or unicode_escape. Since the matrix divided Arrivals into eight features, a new field to sum values by Departure and by Arrival was calculated in the final column. ***trafficmobilitysouthkorea2020 is now up on Kaggle***","a2ea8896":"## Load the First dataset (DS4C-PPP)\n\nThe South Korean government determined to undertake daily new confirmed patient\u2019s infection open-data and updated their status of released or deceased in order of simultaneous time on the Korea Centers for Disease Control & Prevention (KCDC). Due to the detailed data, however, the concerns raised about privacy and about the stigma associated with the visitor\u2019s route for restaurant or commercial shops. Hence, the project team, Data Science for COVID-19 (DS4C), anonymized Patient Route and designed a South Korea Patient, Policy, and Provincial dataset (DS4C-PPP) on Kaggle according to their paper in NeurIPS 2020.","b43bb946":"This is a supportive notebook for my coursework in INM433 Visual Analytics module as a MSc Data Science student at City, University of London (2020-21 Academic Year). The extra reports for this assessment has also been submitted in turnitin system so far.\n\n***Summary note*** This study aimed at data analysis how traffic volume in highway had changed at the South Korea county level in correlation with the number of COVID-19 confirmed cases from January to June in 2020. To visualise the COVID-19 trajectories, this notebook used the South Korea Patient, Policy, and Provincial dataset(DS4C-PPP) and interlaced it to the Korea Traffic Mobility data which was measured at every expressway gate by the Korea Expressway Corporation(KEC) operation.\n\nFor reference tracking human patterns in epidemic trajectory, Carten\u00ec et al. (2020) showed Italian\u2019s daily mobility habits trends as a result of surveys and mobile interview. In addition, Scala et al. (2020) calculated inter-Regional mobility matrix with Facebook user location and inter-Age social contact matrix in Italy.\n\n[1] Carten\u00ec, A., Di Francesco, L. and Martino, M., 2020. How mobility habits influenced the spread of the COVID-19 pandemic: Results from the Italian case study. Science of the Total Environment, 741, p.140489. <br>[2] Scala, A., Flori, A., Spelta, A., Brugnoli, E., Cinelli, M., Quattrociocchi, W. and Pammolli, F., 2020. Time, space and social interactions: exit mechanisms for the COVID-19 epidemics. arXiv preprint arXiv:2004.04608.\n\n***Keyworkds- Coronavirus, COVID-19, South Korea, traffic mobility***\n\n**Please reach out to me on Unibuddy if you have questions in City's MSc Data Science programme!**\nhttps:\/\/www.city.ac.uk\/study\/ask-a-student?unibuddy=buddies\/students\/5e21c2fcd16678055b9fac23","1f91d7f8":"## 1)Computation Analysis part: Modelling new daily cases as a function of mobility\n\nCarten\u00ec et al. (2020) model the number of daily new COVID-19 infections recorded using a multiple linear regression model with features including socio-economic variables (e.g. population), territorial variables (e.g. kilometers of coastline), environmental variables such as average temperature, health care variables and mobility habits variables (e.g. number of citizens making a trip per day). The exact model specification is given as:\n\n$$\n\\begin{aligned}\ny_{t, i} =& \\beta_{1} \\cdot \\text { POPdensity }_{t}+\\beta_{2} \\cdot P M_{t}+\\beta_{3} \\cdot \\text { NTESTS }_{t, i}+\\beta_{4} \\cdot T T D_{t, i} \\\\\n&+\\beta_{5} \\cdot \\operatorname{MOB}_{t, i-x}+\\beta_{6} \\cdot \\text { TEMP }_{t, i-x}+\\text { Constant }\n\\end{aligned}\n$$\n\nwhere $t$ corresponds to a region in Italy, $i$ is an integral day in 2020. $\\text{POPdensity}_t$ gives the population density in region $t$, $PM_t$ gives an environmental pollutant measure, $\\text{NTESTS}_{t, i}$ gives the number of COVID tests in region $t$, day $i$. $\\text{TTD}_{t,i}$ gives a (weighted) measure of travel time from Codogno where the outbreak in Italy began. $\\text{MOB}_{t, i - x}$ gives a measure of mobility in region $t$, $x$ days before the recorded cases on day $i$ and likewise, $\\text{TEMP}_{t, i-x}$ is the average temperature $x$. The use of mobility and temperature data $x$ days prior is to account for the delay between contagion and detection.\n\n\nIn this study, a similar, but simpler methodology is used to measure the significance of mobility on the spread of COVID-19 in South Korea, as defined by the number of new daily cases. An adaptation of the model in Carten\u00ec et al. (2020) is given as follows:\n\n$$\ny_{t,i} = \\beta_{1, t} \\cdot \\text{MOB}_{t,i - x} + \\beta_{2, t} \\cdot \\text{ MONTH } + \\beta_{3} \\cdot \\text{ DAYS }_t + \\text{ Constant }\n$$\n\nwhere $\\beta_{1,t}$ is the coefficient for the mobility in region $t$, $\\beta_{2,t}$ is a coefficient for relationship between month and region (to account for COVID-19 seasonality) and similarly $\\beta_3$ is a coefficient for the effect of individual days and COVID-19 cases."}}