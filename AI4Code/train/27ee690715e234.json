{"cell_type":{"ff80b065":"code","71b485d6":"code","8147aafd":"code","df518f47":"code","e6505fa6":"code","943e8498":"code","9d58a14b":"code","1a5fa53b":"code","95686e4e":"code","c063f5a3":"code","662abf7f":"code","fece93bb":"code","3f2e849f":"markdown","96f138c1":"markdown","e25ec1d2":"markdown","18e742fe":"markdown","7170b1be":"markdown","5e682838":"markdown","625f9f15":"markdown","2ffa76a1":"markdown","48b1827c":"markdown","11e67b39":"markdown","ef0288a0":"markdown","554e40d8":"markdown","0531ec1a":"markdown","607acda2":"markdown","ac118c93":"markdown","80f6e402":"markdown","489e5730":"markdown"},"source":{"ff80b065":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","71b485d6":"df = pd.read_csv('..\/input\/titanic\/test.csv')","8147aafd":"df.shape","df518f47":"new_df = df.copy()","e6505fa6":"df.head(10)","943e8498":"df.isnull().sum()","9d58a14b":"print(\"Orginal shape before dropna()\" ,new_df.shape)\ndrop = new_df.dropna()\nprint(\"Sshape after dropna()\" ,drop.shape)","1a5fa53b":"# Drop columns based on threshold limit\nthreshold = len(df) * 0.60\ndf_thresh=new_df.dropna(axis=1, thresh=threshold)\n# View columns in the dataset\ndf_thresh.shape","95686e4e":"# Mean of Age column\nmean_age =df['Age'].mean()\nmedian_age=df['Age'].median()\nmode_age=df['Age'].mode()","c063f5a3":"# Alternate way to fill null values with mean\nimpute_df= df.copy()\nimpute_df['Age'] = impute_df['Age'].fillna(impute_df['Age'].mean())\nimpute_df['Age'] = impute_df['Age'].fillna(impute_df['Age'].median())\nimpute_df['Age'] = impute_df['Age'].fillna(impute_df['Age'].mode())","662abf7f":"# Backward fill\ndf['Age'] = df['Age'].fillna(method='bfill')\n# Forward fill\ndf['Age'] = df['Age'].fillna(method='ffill')","fece93bb":"# Replacing the null values in the Age column with Mean\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\n# Fit and transform to the parameters\nnew_df['Age'] = imputer.fit_transform(new_df[['Age']])\n# Checking for any null values\nnew_df['Age'].isnull().sum()","3f2e849f":"![](http:\/\/)","96f138c1":"Missing values are present in Age, Cabin and Fare columns. Age is of Numerical Datatype and Cabin, Embarked are of Object Datatype which may be string or a character. Now we are going to look how to handle Missing Values in colums which are of Numerical Datatype.","e25ec1d2":"### Imputation using mean ,median and mode\nThis imputation method treats every variable individually, ignoring any interrelationships with other variables and is beneficial for simple linear models and NN. This method may not be suitable for tree based algorithms and this is an approximation which can add variance to the data set. The loss of the data can be negated by this method which yields better results compared to removal of rows and columns.\n\nNull values are replaced with mean\/median.mode in this method. This is the statistical method of handling Null values.The mean of the numerical column data is used to replace null values when the data is normally distributed. Median is used if the data comprised of outliers. Mode is used when the data having more occurences of a particular value or more frequent value.","18e742fe":"### sklearn Imputer for Numerical Variables\nReplacing null values with mean using SciKit Learn\u2019s SimpleImputer class. We can change strategy parameter as median when we want replace those null values with median.","7170b1be":"### Drop the values above a certain threshold\n\nIf the information contained in the variable is not that high, you can drop the variable if it has more than 50% missing values(This threreshold depend on kind of data and how useful the information is).In this method we are dropping columns with null values above or equal a certain threshold","5e682838":"First see few rows of data","625f9f15":"Refrence:\n[https:\/\/medium.com\/bycodegarage\/a-comprehensive-guide-on-handling-missing-values-b1257a4866d1](http:\/\/)","2ffa76a1":"## **Drop all missing Values**\n\nwe will delete the row if it has a null value for a particular feature. Before delation we have make sure that we have enough samples and deleation will lead to bias of data.As we know that the removal of data leads to loss of information which will not give the good accuracy while predicting the output We use pandas dropna() method.","48b1827c":"We will list the missing value column","11e67b39":"![image.png](attachment:image.png)","ef0288a0":"Either a column is Numerical or Categorical, we can delete the observations having null values in the dataset or the column that is having more number of null values.\nObservations that are having null values can be deleted using pandas dropna() method.","554e40d8":"Let me know if you have anything to ask. Do Upvote the story if you liked it.","0531ec1a":"\n**Missing** Values occur because of  various reasons, such as corrupt data, failure to load the information, or incomplete extraction. Handling the missing values is one of the greatest challenges faced by analysts, because making the right decision on how to handle it generates robust data models. Missing values cause a lot of problems when using the dataset for any machine learning algorithm.They hinder with data analysis and data visualization.\n\nHandling missing values is important because most of the machine learning algorithms don\u2019t support data with missing values. These missing values in the data are to be handled properly. If not, it leads to drawing inaccurate inference about the data.","607acda2":"Here we see it droped almost 330 record which is more than two thord of data. So here we lost useful information.","ac118c93":"And also we will be creating a copy of that dataframe, so that we will handle the Missing Values using Pandas in one dataframe and using SciKit-Learn using another.","80f6e402":"Here We will see different method to handle Missing Values. Using both Pandas and Scikit learn","489e5730":"## Imputation using forward fill and backward fill\nNull values can also be replaced by it\u2019s previous value in the column which is called Backward fill or next occurring value in the column which is called Forward fill.The NaN value will remain even after forward filling or back filling if a next or previous value isn\u2019t available or it is also a NaN value."}}