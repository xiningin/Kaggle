{"cell_type":{"7dd21c05":"code","213191d2":"code","c015dc41":"code","13d73ef1":"code","3ea9066c":"code","77e6b7c9":"code","668490a6":"code","40f74d8f":"code","9760bd68":"code","7196579d":"code","3b075174":"code","ac02812a":"code","1188f481":"code","d3cd1223":"code","c3f8210f":"code","078d159b":"code","75198d91":"code","d63a9acd":"code","cc2252f5":"code","f7593e44":"code","19fb8c6d":"code","1aba9bf4":"code","1e27376f":"code","d1ffb8d1":"code","a8726886":"code","5fb83fc1":"code","7e39ffff":"code","efd0928e":"code","865e8601":"code","e94f2791":"code","c78cebb4":"code","2177468b":"code","43864f18":"code","9d9490ed":"code","273d2dd2":"code","8326ba02":"code","96ae87f2":"code","9b91db0d":"code","4d9b2471":"code","7a98b748":"code","1413a87a":"code","4442f849":"code","b60b5c2e":"code","79294be5":"code","c8d7407d":"code","cf9982c6":"code","0e8b0698":"code","393aaa89":"code","0bc480ae":"code","ac7eb45b":"code","43189ff6":"code","8df3e6a9":"code","021a7948":"markdown","26738213":"markdown","d44ed59c":"markdown","f46ca46d":"markdown","4aa263f3":"markdown","954f9488":"markdown","fbce7642":"markdown","5edef14a":"markdown"},"source":{"7dd21c05":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","213191d2":"from matplotlib import pyplot as plt\nimport seaborn as sns\nfrom IPython.core.display import HTML # permet d'afficher du code html dans jupyter\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\nfrom sklearn import tree\nfrom sklearn import ensemble","c015dc41":"# Lecture des donn\u00e9es d'apprentissage et de test\nt = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","13d73ef1":"t.head().T","3ea9066c":"t.columns","77e6b7c9":"t.count()","668490a6":"display(HTML(t.head().to_html()))","40f74d8f":"t.shape","9760bd68":"X = t.drop(['Outcome'], axis=1)\ny = t.Outcome","7196579d":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","3b075174":"print(X_train.shape)\nprint(X_test.shape)","ac02812a":"lr = LogisticRegression(solver='liblinear')\nlr.fit(X_train,y_train)","1188f481":"y_lr = lr.predict(X_test)","d3cd1223":"print(confusion_matrix(y_test,y_lr))","c3f8210f":"print(accuracy_score(y_test,y_lr))","078d159b":"print(classification_report(y_test, y_lr))","75198d91":"probas = lr.predict_proba(X_test)","d63a9acd":"print(probas)","cc2252f5":"dfprobas = pd.DataFrame(probas,columns=['proba_0','proba_1'])\ndfprobas['y'] = np.array(y_test)","f7593e44":"dfprobas","19fb8c6d":"plt.figure(figsize=(10,10))\nsns.distplot(1-dfprobas.proba_0[dfprobas.y==0], bins=50)\nsns.distplot(dfprobas.proba_1[dfprobas.y==1], bins=50)","1aba9bf4":"false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,probas[:, 1])\nroc_auc = auc(false_positive_rate, true_positive_rate)\nprint (roc_auc)","1e27376f":"plt.figure(figsize=(12,12))\nplt.title('Receiver Operating Characteristic')\nplt.plot(false_positive_rate, true_positive_rate, 'b', label='AUC = %0.2f'% roc_auc)\nplt.legend(loc='lower right')\nplt.plot([0,1],[0,1],'r--')        # plus mauvaise courbe\nplt.plot([0,0,1],[0,1,1],'g:')     # meilleure courbe\nplt.xlim([-0.1,1.2])\nplt.ylim([-0.1,1.2])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')","d1ffb8d1":"rf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","a8726886":"print(classification_report(y_test, y_rf))","5fb83fc1":"cm = confusion_matrix(y_test, y_rf)\nprint(cm)","7e39ffff":"rf1 = ensemble.RandomForestClassifier(n_estimators=10, min_samples_leaf=10, max_features=3)\nrf1.fit(X_train, y_train)\ny_rf1 = rf.predict(X_test)\nprint(classification_report(y_test, y_rf1))","efd0928e":"print(accuracy_score(y_test,y_rf))","865e8601":"from sklearn.model_selection import validation_curve\nparams = np.arange(1, 300,step=30)\ntrain_score, val_score = validation_curve(rf, X, y, 'n_estimators', params, cv=7)\nplt.figure(figsize=(12,12))\nplt.plot(params, np.median(train_score, 1), color='blue', label='training score')\nplt.plot(params, np.median(val_score, 1), color='red', label='validation score')\nplt.legend(loc='best')\nplt.ylim(0, 1)\nplt.xlabel('n_estimators')\nplt.ylabel('score');","e94f2791":"from sklearn import model_selection","c78cebb4":"param_grid = {\n              'n_estimators': [10, 100, 500],\n              'min_samples_leaf': [1, 20, 50]\n             }\nestimator = ensemble.RandomForestClassifier()\nrf_gs = model_selection.GridSearchCV(estimator, param_grid)","2177468b":"rf_gs.fit(X_train, y_train)","43864f18":"print(rf_gs.best_params_)","9d9490ed":"rf2 = rf_gs.best_estimator_","273d2dd2":"y_rf2 = rf2.predict(X_test)","8326ba02":"print(classification_report(y_test, y_rf2))","96ae87f2":"print(accuracy_score(y_test,y_rf2))","9b91db0d":"importances = rf2.feature_importances_\nindices = np.argsort(importances)","4d9b2471":"plt.figure(figsize=(8,5))\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), X_train.columns[indices])\nplt.title('Importance des caracteristiques')","7a98b748":"import xgboost as XGB\nxgb  = XGB.XGBClassifier()\nxgb.fit(X_train, y_train)\ny_xgb = xgb.predict(X_test)\ncm = confusion_matrix(y_test, y_xgb)\nprint(cm)\nprint(classification_report(y_test, y_xgb))","1413a87a":"print(accuracy_score(y_test,y_rf))","4442f849":"def replace_0(df,col) :\n    df1 = df.copy()\n    n = df.shape[0]\n    m = df[col].mean()\n    s = df[col].std()\n    for i in range(n) :\n        if df.loc[i,col]==0 :\n            df1.loc[i,col] = np.random.normal(m,s)\n    return df1","b60b5c2e":"t1 = replace_0(t,'Glucose')","79294be5":"X = t1.drop(['Outcome'], axis=1)\ny = t1.Outcome","c8d7407d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","cf9982c6":"y_lr = lr.predict(X_test)","0e8b0698":"print(confusion_matrix(y_test,y_lr))","393aaa89":"print(accuracy_score(y_test,y_lr))","0bc480ae":"rf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","ac7eb45b":"print(classification_report(y_test, y_rf))","43189ff6":"print(accuracy_score(y_test,y_rf))","8df3e6a9":"xgb  = XGB.XGBClassifier()\nxgb.fit(X_train, y_train)\ny_xgb = xgb.predict(X_test)\ncm = confusion_matrix(y_test, y_xgb)\nprint(cm)\nprint(classification_report(y_test, y_xgb))","021a7948":"## Importance des caracteristiques","26738213":"## Conditionnement des donn\u00e9es","d44ed59c":"## Diabetes","f46ca46d":"## XGBoost","4aa263f3":"## Random Forest","954f9488":"## Correctment des donn\u00e9es","fbce7642":"## Regression Logistique","5edef14a":"## Machine learning"}}