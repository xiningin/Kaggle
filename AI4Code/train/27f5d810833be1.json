{"cell_type":{"e957cf09":"code","c42b7bad":"code","d5af8693":"code","cb242c68":"code","2272e435":"code","77571282":"code","4a170f30":"code","512f2969":"code","d05b02a5":"code","562903ac":"code","71c66906":"code","771b2faf":"code","a0ce21af":"code","48ddcf3c":"code","7f9d928a":"code","93eb5556":"code","4db5fac6":"code","424e981f":"markdown","a7d5db06":"markdown","787bfb84":"markdown"},"source":{"e957cf09":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c42b7bad":"# import Libraries\nimport re\nimport pickle\nimport nltk\nnltk.download('wordnet')\nfrom nltk.stem import WordNetLemmatizer\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.svm import LinearSVC\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import classification_report","d5af8693":"# Importing the dataset\nDATASET_COLUMNS  = [\"sentiment\", \"ids\", \"date\", \"flag\", \"user\", \"text\"]\nDATASET_ENCODING = \"ISO-8859-1\"\ndf = pd.read_csv('\/kaggle\/input\/sentiment140\/training.1600000.processed.noemoticon.csv',\n                      encoding=DATASET_ENCODING , names=DATASET_COLUMNS)\n\n# Removing the unnecessary columns.\ndf = df[['sentiment','text']]","cb242c68":"#check if there is null values\ndf.isnull().sum()","2272e435":"df.head()","77571282":"# replace 4 with 1\ndf['sentiment'] = df['sentiment'].replace(4,1)\n# Plotting the distribution for dataset.\nax = df.groupby('sentiment').count().plot(kind='bar', title='Distribution of data',\n                                               legend=False)\nax.set_xticklabels(['Negative','Positive'], rotation=0)\n\n# Storing data in lists.\ntext, sentiment = list(df['text']), list(df['sentiment'])","4a170f30":"# dictionary containing all emojis.\nemojis = {':)': 'smile', ':-)': 'smile', ';d': 'wink', ':-E': 'vampire', ':(': 'sad', \n          ':-(': 'sad', ':-<': 'sad', ':P': 'raspberry', ':O': 'surprised',\n          ':-@': 'shocked', ':@': 'shocked',':-$': 'confused', ':\\\\': 'annoyed', \n          ':#': 'mute', ':X': 'mute', ':^)': 'smile', ':-&': 'confused', '$_$': 'greedy',\n          '@@': 'eyeroll', ':-!': 'confused', ':-D': 'smile', ':-0': 'yell', 'O.o': 'confused',\n          '<(-_-)>': 'robot', 'd[-_-]b': 'dj', \":'-)\": 'sadsmile', ';)': 'wink', \n          ';-)': 'wink', 'O:-)': 'angel','O*-)': 'angel','(:-D': 'gossip', '=^.^=': 'cat'}\n## set containing all stopwords.\nstopwordlist = ['a', 'about', 'above', 'after', 'again', 'ain', 'all', 'am', 'an',\n             'and','any','are', 'as', 'at', 'be', 'because', 'been', 'before',\n             'being', 'below', 'between','both', 'by', 'can', 'd', 'did', 'do',\n             'does', 'doing', 'down', 'during', 'each','few', 'for', 'from', \n             'further', 'had', 'has', 'have', 'having', 'he', 'her', 'here',\n             'hers', 'herself', 'him', 'himself', 'his', 'how', 'i', 'if', 'in',\n             'into','is', 'it', 'its', 'itself', 'just', 'll', 'm', 'ma',\n             'me', 'more', 'most','my', 'myself', 'now', 'o', 'of', 'on', 'once',\n             'only', 'or', 'other', 'our', 'ours','ourselves', 'out', 'own', 're',\n             's', 'same', 'she', \"shes\", 'should', \"shouldve\",'so', 'some', 'such',\n             't', 'than', 'that', \"thatll\", 'the', 'their', 'theirs', 'them',\n             'themselves', 'then', 'there', 'these', 'they', 'this', 'those', \n             'through', 'to', 'too','under', 'until', 'up', 've', 'very', 'was',\n             'we', 'were', 'what', 'when', 'where','which','while', 'who', 'whom',\n             'why', 'will', 'with', 'won', 'y', 'you', \"youd\",\"youll\", \"youre\",\n             \"youve\", 'your', 'yours', 'yourself', 'yourselves']\n##Function to clean the data.\ndef preprocess(textdata , wordLemm):\n    processedText = []\n    \n    # Defining regex patterns.\n    urlPattern        = r\"((http:\/\/)[^ ]*|(https:\/\/)[^ ]*|( www\\.)[^ ]*)\"\n    userPattern       = '@[^\\s]+'\n    alphaPattern      = \"[^a-zA-Z0-9]\"\n    sequencePattern   = r\"(.)\\1\\1+\"\n    seqReplacePattern = r\"\\1\\1\"\n    \n    for tweet in textdata:\n        tweet = tweet.lower()\n        \n        # Replace all URls with 'URL'\n        tweet = re.sub(urlPattern,' URL',tweet)\n        # Replace all emojis.\n        for emoji in emojis.keys():\n            tweet = tweet.replace(emoji, \"EMOJI\" + emojis[emoji])        \n        # Replace @USERNAME to 'USER'.\n        tweet = re.sub(userPattern,' USER', tweet)        \n        # Replace all non alphabets.\n        tweet = re.sub(alphaPattern, \" \", tweet)\n        # Replace 3 or more consecutive letters by 2 letter.\n        tweet = re.sub(sequencePattern, seqReplacePattern, tweet)\n        \n        tweetwords = ''\n        for word in tweet.split():\n            if len(word)>1:\n                # Lemmatizing the word.\n                word = wordLemm.lemmatize(word)\n                tweetwords += (word+' ')\n            \n        processedText.append(tweetwords)\n        \n    return processedText","512f2969":"wordLemm = WordNetLemmatizer()\nprocessedtext = preprocess(text , wordLemm)","d05b02a5":"# Single Validation\nX_train , X_test , y_train , y_test = train_test_split(processedtext , sentiment , train_size = 0.8 , test_size = 0.2 , random_state = 0)","562903ac":"pd.DataFrame(X_train , y_train).info","71c66906":"#incode the object columns by Tfidf\nIncoder = TfidfVectorizer(ngram_range=(1,2), max_features=1000000)\nIncoder.fit(X_train)\n\nX_train = Incoder.transform(X_train)\nX_test  = Incoder.transform(X_test)","771b2faf":"#Function to compare between my models to chose one\ndef model_Evaluate(model):\n    \n    # Predict values for Test dataset\n    y_pred = model.predict(X_test)\n\n    # Print the evaluation metrics for the dataset.\n    print(classification_report(y_test, y_pred))","a0ce21af":"SVCmodel = LinearSVC()\nSVCmodel.fit(X_train, y_train)\nmodel_Evaluate(SVCmodel)","48ddcf3c":"LogisticModel = LogisticRegression(C = 2, max_iter = 1000, n_jobs=-1)\nLogisticModel.fit(X_train, y_train)\nmodel_Evaluate(LogisticModel)","7f9d928a":"# Saving the model and the incoder\nfile = open('Sentiment-LR-model.pickle','wb')\npickle.dump(LogisticModel, file)\nfile.close()","93eb5556":"file = open('Incoder-ngram-(1,2).pickle','wb')\npickle.dump(Incoder, file)\nfile.close()","4db5fac6":"predictions = LogisticModel.predict(X_test)\n\noutput = pd.DataFrame({'text': X_test, 'sentiment': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","424e981f":"# # # **Hope it's helps**","a7d5db06":"# # Get the Output","787bfb84":"# # # **So Logistic Regression Do better job**"}}