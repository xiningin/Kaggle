{"cell_type":{"ebfa39dc":"code","66bdf724":"code","5d0ca98d":"code","c14d379e":"code","357b278f":"code","3b109a07":"code","4c6671c9":"code","d64d32d0":"code","b60e2b11":"code","37c7e76f":"code","3c4bc114":"code","bc8db7ee":"code","32ece105":"code","c71a62a7":"code","a3a249e2":"code","c03d2075":"code","7183e90e":"code","9c5802dd":"code","05f83cbc":"code","8b2d42f1":"code","dce4f196":"code","eb38c8ba":"code","09444fd9":"code","cb647a5a":"markdown"},"source":{"ebfa39dc":"import pandas as pd\nimport sqlite3 \nimport plotly.express as px\nimport plotly.graph_objects as go\nimport os","66bdf724":"# Establishing a connection between the SQLITE3 database\nconn = sqlite3.connect(\"f1.db\")","5d0ca98d":"# Reading CSV files\n\ndata_1 = pd.read_csv(\"..\/input\/formula-1-world-championship-1950-2020\/circuits.csv\")\ndata_2 = pd.read_csv(\"..\/input\/formula-1-world-championship-1950-2020\/constructor_results.csv\")\ndata_3 = pd.read_csv(\"..\/input\/formula-1-world-championship-1950-2020\/constructor_standings.csv\")\ndata_4 = pd.read_csv(\"..\/input\/formula-1-world-championship-1950-2020\/constructors.csv\")\ndata_5 = pd.read_csv(\"..\/input\/formula-1-world-championship-1950-2020\/driver_standings.csv\")\ndata_6 = pd.read_csv(\"..\/input\/formula-1-world-championship-1950-2020\/drivers.csv\")\ndata_7 = pd.read_csv(\"..\/input\/formula-1-world-championship-1950-2020\/lap_times.csv\")\ndata_8 = pd.read_csv(\"..\/input\/formula-1-world-championship-1950-2020\/pit_stops.csv\")\ndata_9 = pd.read_csv(\"..\/input\/formula-1-world-championship-1950-2020\/qualifying.csv\")\ndata_10 = pd.read_csv(\"..\/input\/formula-1-world-championship-1950-2020\/races.csv\")\ndata_11 = pd.read_csv(\"..\/input\/formula-1-world-championship-1950-2020\/seasons.csv\")\ndata_12 = pd.read_csv(\"..\/input\/formula-1-world-championship-1950-2020\/status.csv\")\n\n# Inserting data into SQL Tables\n\ndata_1.to_sql(\"circuits\", conn)\ndata_2.to_sql(\"constructor_results\", conn)\ndata_3.to_sql(\"constructor_standings\", conn)\ndata_4.to_sql(\"constructors\", conn)\ndata_5.to_sql(\"driver_standings\", conn)\ndata_6.to_sql(\"drivers\", conn)\ndata_8.to_sql(\"pit_stops\", conn)\ndata_9.to_sql(\"qualifying\", conn)\ndata_10.to_sql(\"races\", conn)\ndata_11.to_sql(\"seasons\", conn)\ndata_12.to_sql(\"status\", conn)","c14d379e":"data_13 = pd.read_csv(\"..\/input\/formula-1-world-championship-1950-2020\/results.csv\")\ndata_13.to_sql(\"results\", conn)","357b278f":"data_7.to_sql(\"lap_times\", conn)","3b109a07":"# Finding the locations that hosted the maximum races\n\ncir_max = pd.read_sql('select c.location as \"City\", count(r.circuitid) as \"Races Hosted\" from circuits c, races r where r.circuitid = c.circuitid group by \"City\" order by \"Races Hosted\" desc;', conn)\ncir_max\n\npx.bar(cir_max, x=\"City\", y=\"Races Hosted\", color=\"Races Hosted\", title=\"Races hosted by cities\")","4c6671c9":"# Finding the circuits that have hosted the opening races\n\nop_ci = pd.read_sql('select r.name as \"Grand Prix Name\", c.name as \"Circuit Name\", c.location as \"City\", c.country as \"Country\", count(*) as \"Opening Races Hosted\" from circuits c, races r where r.circuitid = c.circuitid and r.round = 1 group by \"City\" order by \"Opening Races Hosted\" desc;', conn)\nop_ci","d64d32d0":"px.bar(op_ci, x=\"City\", y=\"Opening Races Hosted\", color=\"Opening Races Hosted\", title=\"Cities that hosted opening races in decade 2010-2021\")","b60e2b11":"# Number of races hosted by every country\n\ncont_ra = pd.read_sql('select c.country as \"Country\", count(*) as \"Races Hosted\" from circuits c, races r where r.circuitid = c.circuitid group by \"Country\" order by \"Races Hosted\" desc;', conn)\ncont_ra","37c7e76f":"px.bar(cont_ra, x=\"Country\", y=\"Races Hosted\", color=\"Races Hosted\", title=\"Countries that have hosted race\")","3c4bc114":"# All time constructor points and leaders\n\ncon_at = pd.read_sql('select c.name as \"Constructor\", c.nationality as \"Nationality\", sum(points) as \"Total Points\" from constructor_results r, constructors c where c.constructorId = r.constructorId group by \"Constructor\" order by \"Total Points\" desc;', conn)\ncon_at","bc8db7ee":"px.bar(con_at, x=\"Constructor\", y=\"Total Points\", color=\"Total Points\", title=\"All time points scored by constructors\")","32ece105":"# Finding number of races organized per season\n\nra_season = pd.read_sql('select strftime(\"%Y\", \"date\") as \"Year\", count(*) as \"Races held\" from races group by \"Year\" order by \"Year\";', conn)\nra_season","c71a62a7":"px.line(ra_season, x=\"Year\", y=\"Races held\", title=\"Races held every season\")","a3a249e2":"# Comparing the all-time top 5 teams\n\ncon_top = pd.read_sql('select c.name as \"Constructor\", c.nationality as \"Nationality\", sum(points) as \"Total Points\" from constructor_results r, constructors c where c.constructorId = r.constructorId and points > 0 group by \"Constructor\" order by \"Total Points\" desc limit 5;', conn)\ncon_top","c03d2075":"# Finding the number of races won by the top 5 teams\n\nraw_top = pd.read_sql('select c.name as \"Constructor\", count(r.constructorId) as \"Races won\" from results r, constructors c where c.constructorId = r.constructorId and \"Constructor\" in (\"Ferrari\", \"Mercedes\", \"McLaren\", \"Red Bull\", \"Williams\") and r.position = 1 group by \"Constructor\" order by \"Races won\" desc;', conn)\nraw_top","7183e90e":"# Finding the number of races won by top 10 drivers\n\nrawd_top = pd.read_sql('select (\"forename\" || \" \" || \"surname\") as \"Name\", count(r.driverId) as \"Races Won\" from drivers d, results r where r.driverId = d.driverId and r.position = 1 group by \"Name\" order by \"Races Won\" desc limit 10;', conn)\nrawd_top","9c5802dd":"# Finding the fastest laps on each circuit\n\nfas_lap = pd.read_sql('select c.location as \"City\", r.year as \"Year of race\", min(l.time) as \"Lap Time\", (\"forename\" || \" \" || \"surname\") as \"Driver\" from circuits c, lap_times l, races r, drivers d where l.raceId = r.raceId and r.circuitId = c.circuitId and l.driverId = d.driverId group by \"City\" order by \"City\";', conn)\nfas_lap","05f83cbc":"# Constructors from each country\n\ncon_na = pd.read_sql('select nationality as \"Nationality\", count(*) as \"Number of constructors\" from constructors group by \"Nationality\" order by \"Number of constructors\" desc;', conn)\ncon_na","8b2d42f1":"px.bar(con_na, x=\"Nationality\", y=\"Number of constructors\", color=\"Number of constructors\", title=\"Number of constructors from each country\")","dce4f196":"# Fastest quali times for pole position for every race\n\nfa_qpo = pd.read_sql('select r.name as \"Grand Prix Name\", (\"forename\" || \" \" || \"surname\") as \"Driver\", min(q1) as \"Fastest Q1 time\", min(q2) as \"Fasstes Q2 time\", min(Q3) as \"Fastest Q3 time\" from qualifying q, races r, drivers d where q.raceId = r.raceId and q.position = 1 and q.driverId = d.driverId group by \"Grand Prix Name\" order by \"Grand Prix Name\";', conn)\nfa_qpo","eb38c8ba":"# Finding driver who have won at least one race\n\nra_won = pd.read_sql('select (\"forename\" || \" \" || \"surname\") as \"Driver\", sum(case when position = 1 then 1 else 0 end) as \"Races Won\" from drivers d, results r where r.driverId = d.driverId and position = 1 group by \"Driver\" order by \"Races Won\" desc;', conn)\nra_won","09444fd9":"px.bar(ra_won, x=\"Driver\", y=\"Races Won\", color=\"Races Won\", title=\"Drivers who have won the race\")","cb647a5a":"# EDA on given Formula 1 dataset using SQL\n\nQueries covered in this notebook:\n\n1. Finding locations that hosted maximum number of race\n2. Finding circuits that hosted opening races\n3. Number of races hosted by every country\n4. All time constructor points and leaders\n5. Number of races organized per season\n6. Comparison of all time top 10 teams (based on points and races won)\n7. Number of races won by top 10 drivers\n8. Finding the fastest laps on each circuit\n9. Number of constructors from each country\n10. Finding the fastest quali times on every circuit for pole position\n11. Drivers who have won atleast one race"}}