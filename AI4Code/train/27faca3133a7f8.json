{"cell_type":{"7ca1bc8e":"code","c1fa66a8":"code","54ca5ebb":"code","22e658cd":"code","d4ef2005":"code","525a8a1d":"code","22b22f55":"code","0737d59f":"code","61f571a0":"code","ab2fba2c":"code","02b517b1":"code","04371be8":"code","d55fa1f9":"code","fb9d7d09":"code","b79d6a24":"code","c6cad4cd":"code","abb5f7a6":"code","934fab3b":"code","a5a655b6":"code","f0e3d06d":"code","58de6d2f":"code","cd9e6f49":"code","caaa8de8":"code","a353feab":"code","029a637d":"code","9edca892":"code","a8c40b1e":"code","915bb2f0":"code","695ecad6":"markdown","08076912":"markdown","08936e47":"markdown","84cfac4d":"markdown","043f2d65":"markdown","d27426f1":"markdown","51cb99d9":"markdown","f99f4f45":"markdown"},"source":{"7ca1bc8e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","c1fa66a8":"import cv2","54ca5ebb":"from sklearn.model_selection import train_test_split","22e658cd":"from keras.applications.vgg16 import VGG16","d4ef2005":"import keras\nfrom keras.models import Input, Model, Sequential\nfrom keras.layers import Dense, Flatten, Conv1D","525a8a1d":"from keras import backend as K","22b22f55":"train_csv = pd.read_csv('..\/input\/train.csv')","0737d59f":"train_csv.head()","61f571a0":"ids = train_csv.id.tolist()","ab2fba2c":"images = np.array(list(map(lambda x: cv2.imread('..\/input\/train\/images\/'+ x + '.png'), ids)))","02b517b1":"rle_mask = train_csv.rle_mask.isna()","04371be8":"images.shape","d55fa1f9":"images = np.array(list(map(lambda x: cv2.resize(x, (299, 299)), images)))","fb9d7d09":"images.shape","b79d6a24":"X_train, X_test, y_train, y_test = train_test_split(images, rle_mask, test_size=0.2, random_state=42)","c6cad4cd":"vgg = VGG16(weights='imagenet', include_top=False, input_shape=(299, 299, 3))","abb5f7a6":"vgg.summary()","934fab3b":"# input = Input(shape=(299, 299, 3))\n\n\nlayers = dict([(layer.name, layer) for layer in vgg.layers])\n\nvgg_top = layers['block5_conv2'].output\n\nx = Flatten(name='flatten')(vgg_top)\nx = Dense(2048, activation='relu', name='fc1')(x)\nx = Dense(1024, activation='relu', name='fc2')(x)\nx = Dense(512, activation='relu', name='fc3')(x)\nx = Dense(1, activation='sigmoid', name='predictions')(x)\n\nmy_model = Model(input=vgg.input, output=x)","a5a655b6":"my_model.summary()","f0e3d06d":"for layer in vgg.layers:\n    layer.trainable = False","58de6d2f":"sgd = keras.optimizers.SGD(lr=0.00001, momentum=0.9, nesterov=True)\nmy_model.compile(optimizer=sgd, loss='binary_crossentropy', metrics=['accuracy'])","cd9e6f49":"datagen = keras.preprocessing.image.ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=45,\n    horizontal_flip=True,\n    vertical_flip=True)\n\n\ndatagen.fit(X_train)\n","caaa8de8":"# fits the model on batches with real-time data augmentation:\nmy_model.fit_generator(datagen.flow(X_train, y_train, batch_size=32),\n                    steps_per_epoch=len(X_train) \/ 32, epochs=50)","a353feab":"my_model.save_weights('model_50.h5')","029a637d":"my_model.evaluate(X_test, y_test)","9edca892":"K.eval(my_model.optimizer.lr.assign(0.0001))","a8c40b1e":"# fits the model on batches with real-time data augmentation:\nmy_model.fit_generator(datagen.flow(X_train, y_train, batch_size=32),\n                    steps_per_epoch=len(X_train) \/ 32, epochs=20)","915bb2f0":"my_model.evaluate(X_test, y_test)","695ecad6":"**I will use pretrained VGG, but will skip the fully connected layers and last pooling and  last 2 convolution layers as the data contains basic shapes (lines, circules, ..) not complecated shapes like cars and faces.**","08076912":"# Part of VGG","08936e47":"# Split the data","84cfac4d":"# Import libraries","043f2d65":"the learning rate seems so slow","d27426f1":"# Build binary classifier (Nan or not)","51cb99d9":"# read the data","f99f4f45":"# Build the model"}}