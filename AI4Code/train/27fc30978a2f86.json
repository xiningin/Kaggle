{"cell_type":{"e0437960":"code","0a63a4da":"code","11e62b51":"code","f859ab8d":"code","e77f2bd6":"code","848287cc":"code","9f2ee45a":"code","acab85d0":"code","a459de40":"code","598cc9f6":"code","11747bbd":"code","89f51a8f":"code","56edb3f9":"code","9b5c5493":"code","e8233e95":"code","478659e6":"code","72d52f40":"code","b73e4765":"code","c66b9ce4":"code","9cbbff91":"code","06b4bb7f":"markdown","f0fe73ac":"markdown","380de642":"markdown","49b8ff3e":"markdown","b372eddf":"markdown","84b87c04":"markdown","8cf9838a":"markdown","2b493c1b":"markdown","d7b39039":"markdown","af176793":"markdown","5a8fbc41":"markdown","30bd79bc":"markdown"},"source":{"e0437960":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt","0a63a4da":"df_train = pd.read_csv(\"\/kaggle\/input\/heartbeat\/mitbih_train.csv\", header=None)\ndf_test = pd.read_csv(\"\/kaggle\/input\/heartbeat\/mitbih_test.csv\", header=None)\ndf_train.head()","11e62b51":"plt.plot(df_train.iloc[0,:186])","f859ab8d":"plt.plot(df_test.iloc[0,:186])","e77f2bd6":"# plot the circle of value counts in dataset\ndef plot_equilibre(equilibre):\n    plt.figure(figsize=(10,10))\n    my_circle=plt.Circle( (0,0), 0.7, color='white')\n    plt.pie(equilibre, labels=['n','q','v','s','f'], colors=['red','green','blue','skyblue','orange'],autopct='%1.1f%%')\n    p=plt.gcf()\n    p.gca().add_artist(my_circle)\n    plt.show()","848287cc":"print(df_train[187].value_counts())\n\nplot_equilibre(df_train[187].value_counts())","9f2ee45a":"print(df_test[187].value_counts())\n\nplot_equilibre(df_test[187].value_counts())","acab85d0":"X_train = df_train.values[:, :-1]\ny_train = df_train.values[:, -1].astype(int)\n\nX_test  = df_test.values[:, :-1]\ny_test  = df_test.values[:, -1].astype(int)","a459de40":"# plot one ECG for each category\nC0 = np.argwhere(y_train == 0).flatten()\nC1 = np.argwhere(y_train == 1).flatten()\nC2 = np.argwhere(y_train == 2).flatten()\nC3 = np.argwhere(y_train == 3).flatten()\nC4 = np.argwhere(y_train == 4).flatten()\n\nx = np.arange(0, 187)*8\/1000\n\nplt.figure(figsize=(20,6))\nplt.plot(x, X_train[C0, :][0], label=\"Normal\")\nplt.plot(x, X_train[C1, :][0], label=\"Artial Premature\")\nplt.plot(x, X_train[C2, :][0], label=\"Premature ventricular contraction\")\nplt.plot(x, X_train[C3, :][0], label=\"Fusion of ventricular and normal\")\nplt.plot(x, X_train[C4, :][0], label=\"Fusion of paced and normal\")\nplt.legend()\nplt.title(\"1-beat ECG for every category\", fontsize=20)\nplt.ylabel(\"Amplitude\", fontsize=15)\nplt.xlabel(\"Time (ms)\", fontsize=15)\nplt.show()","598cc9f6":"X_train = np.expand_dims(X_train, 2)\nX_test = np.expand_dims(X_test, 2)\n\nprint(X_train.shape)\nprint(X_test.shape)","11747bbd":"from tensorflow.keras import utils\ny_train = utils.to_categorical(y_train)\ny_test  = utils.to_categorical(y_test)\n\nprint(y_train.shape)\nprint(y_test.shape)","89f51a8f":"n_obs, feature, depth = X_train.shape\nnum_classes= 5","56edb3f9":"# Build Model\nfrom tensorflow.keras import models, layers, optimizers, callbacks\n\ninputs = layers.Input(shape=(feature,depth))\nC   = layers.Conv1D(filters=32, kernel_size=5, strides=1)(inputs)\n\nC11 = layers.Conv1D(filters=32, kernel_size=5, strides=1, padding='same')(C)\nA11 = layers.Activation(\"relu\")(C11)\nC12 = layers.Conv1D(filters=32, kernel_size=5, strides=1, padding='same')(A11)\nS11 = layers.Add()([C12, C])\nA12 = layers.Activation(\"relu\")(S11)\nM11 = layers.MaxPooling1D(pool_size=5, strides=2)(A12)\n\n\nC21 = layers.Conv1D(filters=32, kernel_size=5, strides=1, padding='same')(M11)\nA21 = layers.Activation(\"relu\")(C21)\nC22 = layers.Conv1D(filters=32, kernel_size=5, strides=1, padding='same')(A21)\nS21 = layers.Add()([C22, M11])\nA22 = layers.Activation(\"relu\")(S11)\nM21 = layers.MaxPooling1D(pool_size=5, strides=2)(A22)\n\n\nC31 = layers.Conv1D(filters=32, kernel_size=5, strides=1, padding='same')(M21)\nA31 = layers.Activation(\"relu\")(C31)\nC32 = layers.Conv1D(filters=32, kernel_size=5, strides=1, padding='same')(A31)\nS31 = layers.Add()([C32, M21])\nA32 = layers.Activation(\"relu\")(S31)\nM31 = layers.MaxPooling1D(pool_size=5, strides=2)(A32)\n\n\nC41 = layers.Conv1D(filters=32, kernel_size=5, strides=1, padding='same')(M31)\nA41 = layers.Activation(\"relu\")(C41)\nC42 = layers.Conv1D(filters=32, kernel_size=5, strides=1, padding='same')(A41)\nS41 = layers.Add()([C42, M31])\nA42 = layers.Activation(\"relu\")(S41)\nM41 = layers.MaxPooling1D(pool_size=5, strides=2)(A42)\n\n\nC51 = layers.Conv1D(filters=32, kernel_size=5, strides=1, padding='same')(M41)\nA51 = layers.Activation(\"relu\")(C51)\nC52 = layers.Conv1D(filters=32, kernel_size=5, strides=1, padding='same')(A51)\nS51 = layers.Add()([C52, M41])\nA52 = layers.Activation(\"relu\")(S51)\nM51 = layers.MaxPooling1D(pool_size=5, strides=2)(A52)\n\nF1  = layers.Flatten()(M51)\n\nD1  = layers.Dense(32)(F1)\nA6  = layers.Activation(\"relu\")(D1)\nD2  = layers.Dense(32)(A6)\n\noutputs = layers.Dense(num_classes, activation=\"softmax\")(D2)\n\nmodel = models.Model(inputs=inputs, outputs=outputs)\n\nmodel.summary()","9b5c5493":"# Compile Model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","e8233e95":"batch_size = 100\nnum_epochs = 10 ","478659e6":"# Train Model\nhistory = model.fit(X_train, y_train, epochs=num_epochs, batch_size=batch_size, validation_data=(X_test, y_test))","72d52f40":"# Save Model\nmodels.save_model(model, 'ecg_arrhythmia.hdf5')","b73e4765":"from sklearn.metrics import classification_report, confusion_matrix\n\nlabels = [\"Normal\",\n          \"Artial Premature\",\n          \"Premature ventricular contraction\",\n          \"Fusion of ventricular and normal\",\n          \"Fusion of paced and normal\"]","c66b9ce4":"# Test Model\npredY = model.predict(X_test)\ny_pred = np.argmax(predY,axis=1)\ny_actual = np.argmax(y_test,axis=1)\ncm = confusion_matrix(y_actual, y_pred)\nprint(cm)","9cbbff91":"print(classification_report(y_actual, y_pred, target_names=labels))","06b4bb7f":"## Test Model","f0fe73ac":"# ECG Classification","380de642":"![image.png](attachment:image.png)","49b8ff3e":"## Dataset Equilibre","b372eddf":"## Prepare Dataset","84b87c04":"## Train Model","8cf9838a":"## Save Model","2b493c1b":"## Paper: [ECG Heartbeat Classification: A Deep Transferable Representation](https:\/\/arxiv.org\/pdf\/1805.00794.pdf)","d7b39039":"### show one data","af176793":"### show data","5a8fbc41":"## Build Model","30bd79bc":"## Read Dataset"}}