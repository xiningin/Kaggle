{"cell_type":{"ee19ebe7":"code","8888dd1e":"code","697516e7":"code","e4b238ce":"code","6b29076d":"code","d9828f0c":"code","56587bad":"code","163a37e9":"code","87a6be33":"code","d12a1246":"markdown","58fa2e65":"markdown","66fa551d":"markdown","ec1bd2ff":"markdown","8c97e12e":"markdown","b0a11bc8":"markdown","67f94c7f":"markdown","7f054007":"markdown","c3c2ef5c":"markdown","cc19e521":"markdown","a225df77":"markdown","b5e22186":"markdown"},"source":{"ee19ebe7":"%matplotlib inline\nimport pandas as pd\nimport matplotlib.pyplot as plt # visualization\nimport seaborn as sns # visualization\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True) \nimport numpy as np\nimport warnings  \nwarnings.filterwarnings('ignore')\n\nfrom_year = 2016\nto_year = 2018\n\ndfs = []\nfor y in range(from_year, to_year+1):\n    df = pd.read_csv('..\/input\/cost-of-living-%d.csv' % (y))\n    df['Year'] = y\n    print(df.columns.values)\n    dfs.append(df)\n    ","8888dd1e":"def extract_city_country(loc):\n    s = loc.split(',')\n    return s[0].strip(), s[-1].strip()\n\nrename_rules = {\n    'Cost of Living Index': 'CLI',\n    'Cost of Living Plus Rent Index' : 'CLRI',\n    'Rent Index': 'RI',\n    'Groceries Index': 'GI',\n    'Restaurant Price Index': 'RPI',\n    'Local Purchasing Power Index': 'LPPI',\n}\n\nreversed_rename_rules = {v: k for k, v in rename_rules.items()}\n\n\nfor df in dfs:\n    df.columns = [c.replace('.', ' ') for c in df.columns]\n    df.rename(columns= rename_rules, inplace=True)\n    if 'Country' not in df.columns:\n        df['City'], df['Country'] = zip(*df['City'].apply(extract_city_country).values)\n\ndfs = [df[['City', 'Country', 'CLI', 'RI', 'CLRI', 'GI', 'RPI', 'LPPI', 'Year']] for df in dfs]\ndf = pd.concat(dfs)\ndf['Country'] = df['Country'].apply(lambda c: c.strip() if len(c) > 2 else 'United States').values\ndf.head(10)","697516e7":"df_top20_cli_2018 = df[df['Year'] == 2018].sort_values(['CLI'], ascending=False).head(20).sort_values(['CLI'])\ntop20cli_2018 = [go.Bar(\n            x=df_top20_cli_2018['CLI'].values,\n            y=df_top20_cli_2018['City'].values,\n            orientation = 'h',\n            marker=dict(\n            color=df_top20_cli_2018.sort_values(['CLI'], ascending=True)['CLI'].values,\n            colorscale='RdBu',\n            opacity=0.7\n        ),\n)]\n\niplot(top20cli_2018)","e4b238ce":"df_top20_l_2018 = df[df['Year'] == 2018].sort_values(['LPPI'], ascending=False).head(20).sort_values(['LPPI'])\ntop20cli_l_2018 = [go.Bar(\n            x=df_top20_l_2018['LPPI'].values,\n            y=df_top20_l_2018['City'].values,\n            orientation = 'h',\n            marker=dict(\n                color=df_top20_cli_2018.sort_values(['LPPI'], ascending=False)['LPPI'].values,\n                colorscale='Greens'\n            ),\n                opacity=0.8\n\n)]\n\niplot(top20cli_l_2018)","6b29076d":"plt.figure(figsize=(20,5))\nsns.heatmap(df.corr(),cmap='RdBu_r', annot=True)","d9828f0c":"sns.pairplot(df)","56587bad":"layout = go.Layout(\n    autosize=False,\n    width=600,\n    height=600,\n    \n    xaxis=dict(\n        title='Cost of Living Index'\n    ),\n    yaxis=dict(\n        title='Local Purchase Power Index'\n    )\n)\ntrace = go.Scatter(\n    x = df['CLI'],\n    y = df['LPPI'],\n    mode = 'markers')\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\n# Plot and embed in ipython notebook!\niplot(fig)\n\ng = sns.jointplot(y=df['LPPI'].values, x=df['CLI'].values,kind='kde').set_axis_labels(\"Cost of Living Index\", \"Local Purchase Power Index\")\nplt.show()","163a37e9":"cols = ['CLI','RI','CLRI','GI','RPI','LPPI']\ndf_hamburg = df[df['City'] == 'Hamburg']\ndata = []\nfor col in cols:\n    trace = go.Scatter(\n        x = df_hamburg['Year'],\n        y = df_hamburg[col],\n        name = reversed_rename_rules[col],\n        mode = 'lines+markers',    )\n    data.append(trace)\nlayout = go.Layout(\n    title=\"Hamburg's Cost of Living 2016-2018\",\n    autosize=False,\n    width=800,\n    height=600,\n    xaxis=dict(\n        title=\"Year\",\n        autorange=True,\n        showgrid=False,\n        zeroline=True,\n        showline=True,\n        tickmode='array',\n        tickvals=df_hamburg['Year'].values,\n        showticklabels=True,\n        ticklen=4,\n        tickwidth=2,\n        tickcolor='#000'\n    ),\n    yaxis=dict(\n        title=\"Index value\",\n        autorange=True,\n        showgrid=False,\n        zeroline=True,\n        showline=True,\n        tickmode='array',\n        showticklabels=True,\n        ticklen=4,\n        tickwidth=2,\n        tickcolor='#000'\n    ),\n)\nfig = go.Figure(data=data, layout=layout)\n# Plot and embed in ipython notebook!\niplot(fig)","87a6be33":"from ipywidgets import interactive, HBox, VBox\nfrom IPython.display import display, clear_output, Image\nfrom plotly.widgets import GraphWidget\nimport ipywidgets as widgets\ndf_groupby_country = df.groupby(['Country','Year'], as_index=False).mean().round(2)\n\ndata = dict(type=\"choropleth\",\n           locations = df_groupby_country[df_groupby_country['Year'] == 2016]['Country'].values,\n            locationmode = \"country names\",\n           z = df_groupby_country[df_groupby_country['Year'] == 2016]['CLI'].values,\n            colorscale='Reds',\n           colorbar = {'title':'CLI'})\n\nlayout = dict(title=\"World AVG Cost of Living Index\",\n              width=1000,\n            height=600,\n             geo = dict(showframe=False,\n                      projection = {'type':'mercator'}))\nchoromap = go.Figure(data = [data],layout = layout)\nf = go.FigureWidget(choromap)\ndef update_z(year):\n    f.data[0].z = sum(zip(df_groupby_country[df_groupby_country['Year'] == year]['CLI'].values),())\n    f.data[0].locations = sum(zip(df_groupby_country[df_groupby_country['Year'] == year]['Country'].values),())\n    f.layout.title = \"World AVG Cost of Living Index %d\" % (year)\n\nyear_slider = interactive(update_z, year=(2016, 2018, 1))\nvb = VBox((f, year_slider))\nvb.layout.align_items = 'center'\nvb","d12a1246":"## World's Cost of Living between 2016 and 2018","58fa2e65":"## Correlation","66fa551d":"As we can see, there are some columns that do not exist in all 3 frames, and some columns that do not have the same name. Therefore a bit renaming is needed here.  \nIn year 2018, Country is included in the 'City' column.  \nColumns that exist in all 3 frames are:  \n- Year (generated)\n- City\n- Country\n- CLI (Cost of Living Index)\n- RI (Rent Index)\n- CLRI (Cost of Living + Rent Index)\n- GI (Groceries Index)\n- RPI (Restaurant Prices Index)\n- LPPI (Local Purchasing Power Index)","ec1bd2ff":"## Top 20 most livable cities 2018","8c97e12e":"### Correlation matrix","b0a11bc8":"## Imports","67f94c7f":"## Extract Country for 2018, rename columns","7f054007":"### Pair plot","c3c2ef5c":"## Top 20 most expensive cities 2018","cc19e521":"## LPPI and CLI","a225df77":"# EDA Cost of Living 2018","b5e22186":"## Indices of Hamburg 2016 - 2018"}}