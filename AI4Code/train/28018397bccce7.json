{"cell_type":{"da49f5e9":"code","e9107559":"code","cd439374":"code","8222d367":"code","e9759892":"code","c8431b53":"code","a473c5e7":"code","7f7c7231":"code","26942b7a":"code","3b488ecb":"code","dfc05401":"code","ce74cd4c":"code","5fc324c5":"code","5c4b950b":"code","5198d914":"markdown"},"source":{"da49f5e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e9107559":"import seaborn as sns\nfrom sklearn.metrics import mean_squared_error,classification_report,f1_score,confusion_matrix,accuracy_score\n\nimport xgboost as xgb\nimport lightgbm as lgb\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.model_selection import StratifiedKFold, cross_validate, learning_curve,train_test_split,GridSearchCV, cross_val_score, RandomizedSearchCV, RepeatedStratifiedKFold\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.neighbors import LocalOutlierFactor, KNeighborsClassifier\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")","cd439374":"df = pd.read_csv(\"..\/input\/mice-protein-expression\/Data_Cortex_Nuclear.csv\")\ndf.head()","8222d367":"df.drop([\"MouseID\"],axis=1,inplace=True)","e9759892":"df.shape","c8431b53":"df.isna().sum()[50:]","a473c5e7":"df.groupby([\"class\"]).mean()","7f7c7231":"for i in range(len(df.columns[:-4])):\n    if len(df[df[df.columns[i]].isna() == True].index)>0:\n        for j in range(len(df[df[df.columns[i]].isna() == True].index)):\n            index = df[df[df.columns[i]].isna() == True].index\n            if \"True\" in str(df.iloc[index[0]:index[0]+1][df.columns[i]].isna()):\n                df.iloc[index[0]:index[0]+1][df.columns[i]] = df.groupby([\"class\"]).mean()[df.columns[i]][list(df[index[0]:index[0]+1][\"class\"])[0]]","26942b7a":"df.isna().sum()[50:]","3b488ecb":"le = LabelEncoder()\ndf[\"Genotype\"] = le.fit_transform(df[\"Genotype\"])\ndf[\"Treatment\"] = le.fit_transform(df[\"Treatment\"])\ndf[\"Behavior\"] = le.fit_transform(df[\"Behavior\"])\ndf[\"class\"] = le.fit_transform(df[\"class\"])","dfc05401":"log_model = LogisticRegression()\n\ngbc_model = GradientBoostingClassifier(random_state=14)\n\nrfc_model = RandomForestClassifier(criterion='gini', n_estimators=999,max_depth=4, random_state=14)\n\nlgb_model = lgb.LGBMClassifier(num_iterations=550, learning_rate=0.01055,max_depth=3, random_state=14)\n\nxgb_model = xgb.XGBClassifier(objective=\"binary:hinge\")\n\ngnb_model = GaussianNB()\n\nmlpc_model = MLPClassifier(random_state=14)\n\nsvc_model = SVC(probability=True)\n\nknn_model = KNeighborsClassifier(n_neighbors=19,leaf_size=20)","ce74cd4c":"models = [log_model, gbc_model, rfc_model, lgb_model, xgb_model, gnb_model, mlpc_model, svc_model,knn_model]\nmodel_names = [\"LogisticRegression\",\"GradientBoostingClassifier\",\"RandomForestClassifier\",\"LGBMClassifier\",\"XGBClassifier\",\"GaussianNB\",\"MLPClassifier\",\"SVC\",\"KNeighborsClassifier\"]\n\nx = df.drop('class', axis=1)\ny = df['class']\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25,random_state=42)","5fc324c5":"print(\"TRAIN SCORE\\n\\n\")\nprint(\"-----------------------------------------\")\nfor i in range(len(models)):\n    model = models[i].fit(x_train,y_train)\n    print(model_names[i],\"Score = %\",model.score(x_train,y_train)*100)","5c4b950b":"print(\"TEST SCORE\\n\\n\")\nprint(\"-----------------------------------------\")\nfor i in range(len(models)):\n    model = models[i].fit(x_train,y_train)\n    print(model_names[i],\"Score = %\",model.score(x_test,y_test)*100)","5198d914":"# Model"}}