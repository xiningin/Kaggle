{"cell_type":{"cc65aae6":"code","5bfb662f":"code","ba4ca79e":"code","f23a0fc6":"code","772bb5db":"code","4711d8c2":"code","7605fedd":"code","a59ddb86":"code","287076bd":"code","ce7af6d8":"code","cfa30502":"code","b5c87511":"code","6fb88d1a":"code","6b1a8090":"code","a5c8f1fe":"code","f5e7fa23":"code","935a9887":"code","afb939bf":"code","d2c57ebc":"code","2464b065":"code","af7a19c7":"code","ab8d2606":"code","393e3a08":"code","a85a3b0e":"code","cb53aa86":"code","f84b29c6":"code","4e595dca":"code","7b7b5d1a":"code","10adba03":"code","4d0de34b":"code","f61b7e9e":"code","63556281":"code","59628a7c":"code","89dd1b51":"code","98a07072":"code","6b180692":"code","4bec252b":"code","22dac28a":"markdown","b9a369e5":"markdown"},"source":{"cc65aae6":"# For Basic Operations\nimport numpy as np\nimport pandas as pd","5bfb662f":"# for Datetime Manipulation\nimport datetime","ba4ca79e":"# For Data Visualizations\nimport seaborn as sns\nimport matplotlib.pyplot as plt","f23a0fc6":"# for Interactive Analysis\nfrom ipywidgets import interact","772bb5db":"# lets import the Dataset\ndata = pd.read_csv('..\/input\/imdb-recommendation-engine\/movies.csv')\ndata.head()","4711d8c2":"data.info()","7605fedd":"data.shape","a59ddb86":"data.describe()","287076bd":"# lets also check the ratings dataset\nrating = pd.read_csv('..\/input\/imdb-recommendation-engine\/ratings.csv')\nrating.head()","ce7af6d8":"rating.info()","cfa30502":"rating.describe()","b5c87511":"rating.shape","6fb88d1a":"# As we are going to Perform the Content Based Filtering\n# lets merge the rating data with the movie data\ndata = pd.merge(data, rating, on = 'movieId', how = 'inner')\ndata.head()","6b1a8090":"# lets check the shape of the Merged Dataset\ndata.shape","a5c8f1fe":"data.info()","f5e7fa23":"# As we do not Require the MovieId, UserId and Timestamp lets remove them\ndata = data.drop(['movieId', 'userId', 'timestamp'], axis = 1)\n\n# lets check the head of the Final Dataset\ndata.head()","935a9887":"# Now, We Have to Groupby the Dataset Based on the Movie Title\n\ndata = pd.pivot_table(data, index = ['title','genres'], aggfunc = 'mean')\ndata.reset_index(level=['title','genres'], inplace = True)\ndata.head()","afb939bf":"# lets check the Distribution of Ratings across the Movies\n\nsns.displot(x=data['rating'], color = 'black',kde=True,height=5)\nplt.title('Distribution of Ratings')\nplt.grid()","d2c57ebc":"# Lets Extract Year of Release from the Movie Title\ndata['y'] = data['title'].str.split(' ')\ndata['year'] = data['y'].apply(lambda x: x[-1])\ndata.head()","2464b065":"# lets drop the unnecessary 'y' column from the dataset\ndata = data.drop(['y'], axis = 1)\ndata.head()","af7a19c7":"# lets remove the Opening and Closing Brackets from the String\ndata['year'] = data['year'].str.strip(')')\ndata['year'] = data['year'].str.strip('(')\ndata.head()","ab8d2606":"data['year'].value_counts()[:5]","393e3a08":"data['year'].unique()","a85a3b0e":"data[data.year.isin(['Road', ''])]","cb53aa86":"# There are some Dirty Values, Let's Clean them\ndata['year'] = data['year'].replace(('Road', ''),\n                                   ('2015','2011'))\ndata['year'].unique()","f84b29c6":"# lets convert the year column into Integer data type\ndata['year'] = data['year'].astype(int)\ndata.info()","4e595dca":"# lets check the head of the dataset again\ndata.head()","7b7b5d1a":"# lets remove the Year from the Movie Titles\ndata['title'] = data['title'].str.split(' ')\ndata['title'] = data['title'].apply(lambda x: ' '.join(x[:-1]))\n# lets check the head of the dataset again\ndata.head()","10adba03":"# Lets check the Latest Movies - the Last Year mentioned in the Dataset is 2016\ndata[data['year'] == data['year'].max()][['title','rating']].sort_values(by = 'rating',\n                ascending = False).head(10).reset_index(drop = True).style.background_gradient(cmap = 'Wistia')","4d0de34b":"# lets Check the Number of Movies that got 5 Star Reviews and Less than 1 Star Reviews\n\nprint(\"The Number of Movies that received 5 Star Reviews :\", data[data['rating'] == 5]['title'].count())\nprint(\"Percentage of Movies Getting 5 Star Reviews : {0:.2f}%\".format((data[data['rating'] == 5]['title'].count())\/\n                                                                      (data.shape[0])))","f61b7e9e":"print(\"\\nThe Number of Movies that received less than 1 Star Reviews :\", data[data['rating'] <= 1]['title'].count())\nprint(\"The Percentage of Movies Getting Less than 1 Star Reviews : {0:.2f}%\".format((\n    data[data['rating'] <= 1]['title'].count())\/(data.shape[0])))","63556281":"# lets create an Interactive Function to get the List of Best Movies from Each Genre\n\n@interact\ndef genre(Genre = ['Action', 'Adventure', 'Animation','Children', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy',\n       'Film-Noir', 'Horror', 'IMAX', 'Musical', 'Mystery', 'Romance','Sci-Fi', 'Thriller', 'War', 'Western'],\n          year = sorted(data['year'].unique(), reverse=True)):\n    x = data['genres'].str.split('|')\n    d = data.drop(['genres'], axis = 1)\n    x = pd.concat([d, x], axis = 1)\n    x = x.explode('genres')\n    x= x[(x['genres'] == Genre)& \n         (x['year'] >= year)][['title', 'rating', 'year']].sort_values(by = ['rating','year'],\n                            ascending = [False,True]).reset_index(drop = True).head(10)\n    return x","59628a7c":"from mlxtend.preprocessing import TransactionEncoder\n\n# lets split all the Genres into Transactions\ngenres = data['genres'].str.split('|')\nte = TransactionEncoder()\ngenres = te.fit_transform(genres)\ngenres = pd.DataFrame(genres, columns = te.columns_)\ngenres.head()","89dd1b51":"# lets convert this data into boolean so that we can perform calculations\ngenres = genres.astype('int')\ngenres.insert(0, 'title', data['title'])\ngenres.head()","98a07072":"genres.rename(columns = genres.iloc[0])","6b180692":"# lets Transpose the Dataset\ngenres = genres.transpose()\ngenres = genres.rename(columns = genres.iloc[0])\ngenres = genres.drop(genres.index[0])\ngenres = genres.astype(int)\n# lets check the head of genres\ngenres.head()","4bec252b":"# making a recommendation engine for getting similar movies\nsorted(data['year'].unique(), reverse=True)\n@interact\ndef recommendation_movie(movie = sorted(genres.columns.unique(), reverse=False)):    \n    similar_movies = genres.corrwith(genres[movie])\n    similar_movies = similar_movies.sort_values(ascending=False)\n    similar_movies=similar_movies.dropna()\n    similar_movies=similar_movies.reset_index()\n    similar_movies.columns = ['Movie', 'Score']\n    similar_movies=similar_movies[similar_movies['Movie']!=movie]\n    similar_movies.Score=round((similar_movies.Score*100),2)\n    if len(similar_movies)== 0:\n        return print('\\n\\t\\t No Recommendation!!!')\n    else:\n        return similar_movies.head()","22dac28a":"-------------------------------------------------------------------------\n![image.png](attachment:b1b271b6-d7ea-4672-b91f-e5b9a384c347.png)\n\n\n--------------------------------------------------------------------------\n\n![image.png](attachment:0acb9af1-7dbd-41d7-9e55-65bdcb933e34.png)\n\n---------------------------------------------------------------------------","b9a369e5":"![image.png](attachment:42ebaeb8-fdcf-4e58-92ee-4439d94d8f02.png)"}}