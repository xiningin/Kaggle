{"cell_type":{"23e8c95c":"code","dc3abdd2":"code","99833873":"code","0197334a":"code","5e0d0a5a":"code","d341f558":"code","dfe983eb":"code","c32fa858":"code","bfbcd9d9":"code","72d5c58f":"code","30bf61ff":"markdown","ae944b1b":"markdown","95b97d9e":"markdown","ede3af6b":"markdown","43840443":"markdown","4afddafc":"markdown"},"source":{"23e8c95c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dc3abdd2":"import pandas as pd\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import GridSearchCV","99833873":"data = pd.read_csv('\/kaggle\/input\/electiveiii\/train.csv')\ndata.head()","0197334a":"model = SVR()\nmodel.fit(data.iloc[:,1:-1],data.iloc[:,-1])","5e0d0a5a":"test = pd.read_csv('\/kaggle\/input\/electiveiii\/test.csv')\ntest.head()","d341f558":"y_pred=model.predict(test.iloc[:,1:])\ny_pred=pd.DataFrame({'id':[i for i in range(344,442)],'y':y_pred})\ny_pred.head()","dfe983eb":"#y_pred.to_csv('submission.csv',index_label='id',index=False)","c32fa858":"param = {'kernel' : ('linear', 'poly', 'rbf', 'sigmoid'),'C' : [1,5,10],'degree' : [3,8],'coef0' : [0.01,10,0.5],'gamma' : ('auto','scale')},\ntunned_model = GridSearchCV(model, param, cv=5, n_jobs = -1, verbose = 2)\ntunned_model.fit(data.iloc[:,1:-1],data.iloc[:,-1])","bfbcd9d9":"y_pred_tunned = tunned_model.predict(test.iloc[:,1:])\ny_pred_tunned =pd.DataFrame({'id':[i for i in range(344,442)],'y':y_pred_tunned})\ny_pred_tunned.head()","72d5c58f":"y_pred_tunned.to_csv('submission.csv',index_label='id',index=False)","30bf61ff":"## Loading Test Data into Pandas DataFrame","ae944b1b":"## HyperParamter Tunning using GridSearchCV","95b97d9e":"## Loading Train Data into Pandas DataFrame","ede3af6b":"## Loading Required Libraries","43840443":"## Initialize and Fitting\/Train Regression Model [Support Vector Regression]","4afddafc":"## Predicting Values using SVR on Test Data"}}