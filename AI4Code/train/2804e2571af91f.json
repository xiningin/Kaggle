{"cell_type":{"50c4498e":"code","d562487f":"code","533cc09b":"code","6c28cf8e":"code","53f6550f":"code","d2816621":"code","d8cada19":"code","2cbb934f":"code","a5cc5f80":"code","77d388d0":"code","9a5ab1e3":"code","26953db1":"code","ea2f73be":"code","c2d35a8f":"markdown","dade05da":"markdown","0a4ac200":"markdown","a9cc0461":"markdown","2e7cf6ef":"markdown","7a1d2c0d":"markdown","c08a7537":"markdown","37374147":"markdown","308b544c":"markdown","94eb14ef":"markdown","49595d12":"markdown","5cd28411":"markdown","05f31708":"markdown"},"source":{"50c4498e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d562487f":"# Importing libraries\nimport keras\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom IPython.display import display, Image # for displaying images\n%matplotlib inline\nimport os","533cc09b":"# Getting labels of training data\nlabels = os.listdir('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/dataset\/train')\nlabels","6c28cf8e":"num = []\n\nfor i in labels:\n  path = '\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/dataset\/train\/{0}\/'.format(i)\n  folder_data = os.listdir(path)\n  k=0\n  print('\\n', i.upper())\n  for j in folder_data:\n    if(k<2):\n      display(Image(path+j))\n    k=k+1\n  num.append(k)\n  print('there are ', k,' images in ', i, 'class')","53f6550f":"# Get images from files using ImageDataGenerator\n\nfrom keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(rescale=1.\/255, validation_split=0.2)\n\ntg = datagen.flow_from_directory(directory='\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/dataset\/train', target_size=(20,20), classes=labels, batch_size=25, subset='training')\nvg = datagen.flow_from_directory(directory='\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/dataset\/train', target_size=(20,20), classes=labels, batch_size=25, subset='validation')","d2816621":"# building model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Conv2D(32, kernel_size=(3,3), activation='relu', input_shape = (20,20,3)))\nmodel.add(tf.keras.layers.MaxPool2D((2,2)))\n\nmodel.add(tf.keras.layers.Conv2D(64, kernel_size=(3,3), activation='relu'))\nmodel.add(tf.keras.layers.MaxPool2D((2,2)))\n\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\n\nmodel.add(tf.keras.layers.Dense(6, activation='softmax'))","d8cada19":"# Compile model\nmodel.compile(optimizer='adam', loss = 'categorical_crossentropy', metrics=['accuracy'])","2cbb934f":"model.summary(line_length=None, positions=None, print_fn=None)","a5cc5f80":"# Train model\nhistory = model.fit_generator(generator=tg, steps_per_epoch=len(tg), epochs=8, validation_data=vg, validation_steps=len(vg))","77d388d0":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(['Acc','Val'], loc = 'upper left')","9a5ab1e3":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(['loss','Val'], loc = 'upper left')","26953db1":"test_set = datagen.flow_from_directory(directory='\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test', target_size=(20,20), classes=labels, batch_size=25, subset='validation')","ea2f73be":"prediction = model.predict(test_set)","c2d35a8f":"# STEP 3: Build our Convolutional Neural Network","dade05da":"**Plot Loss over epochs plot. (Lower over time is better)**","0a4ac200":"# STEP 2: Display Sample Images","a9cc0461":"**Summary of our model**","2e7cf6ef":"**Get images according to their class (banana, apple, orange).**","7a1d2c0d":"# STEP 1: INITIALIZATION","c08a7537":"**Import important libraries such as Tensorflow, Keras, Matlab plotting.**","37374147":"**Train our model.**","308b544c":"**Find labels of images.**","94eb14ef":"**Plot Accuracy over epochs plot. (Higher over time is better)**","49595d12":"**Compile model.**","5cd28411":"# STEP 4: SHOW IMPORTANT PLOTS","05f31708":"# STEP 5: Test our model"}}