{"cell_type":{"392a34b2":"code","62d0c4f7":"code","34871c65":"code","0b316641":"code","188730b5":"code","3f896f88":"code","1e9fb772":"code","a4e58a1c":"code","b1d22878":"code","489ef2fe":"code","18601e1f":"code","ebebdd57":"code","13c4f469":"code","888204d6":"code","69137b66":"code","dceb1a5f":"code","ba48337f":"code","fa9f849d":"code","1df42041":"code","51117d84":"code","1af9b97b":"code","9cf2ed05":"code","743096fd":"code","8a29711b":"code","7f95c474":"code","d650fad2":"code","891d917a":"code","19d4eb8d":"code","a023af22":"code","6c03c5c5":"code","412ea754":"code","864abad7":"code","1af43f0a":"code","956bd607":"code","301cd3b8":"markdown","f9b8b99f":"markdown","db19e83c":"markdown","486e205c":"markdown","90a86d3d":"markdown","431b5331":"markdown","9e4f63fa":"markdown","93169074":"markdown","4597fde9":"markdown"},"source":{"392a34b2":"%matplotlib inline\nimport os, sys\nimport numpy as np, pandas as pd, matplotlib.pyplot as plt\nfrom skimage.io import imread\nfrom glob import glob\nimport yaml\nimport ipywidgets as ipw\nfrom mpl_toolkits.mplot3d import Axes3D\ntry:\n    from skimage.util.montage import montage2d\nexcept ImportError:\n    from skimage.util import montage as montage2d\nbase_dir = '..\/input\/hallway_rgbds'","62d0c4f7":"all_yaml = {'\/'.join(p.split('\/')[-2:]): yaml.load(open(p, 'r')) \n            for p in glob(os.path.join(base_dir, '*','*.yaml'))}","34871c65":"all_images_df = pd.DataFrame({'path': glob(os.path.join(base_dir, '*','*', '*.png'))})","0b316641":"all_images_df['file_id'] = all_images_df['path'].map(lambda x: os.path.splitext(os.path.basename(x))[0])\nall_images_df['file_prefix'] = all_images_df['file_id'].map(lambda x: ''.join([c for c in x if c.isalpha()]))\nall_images_df['file_idx'] = all_images_df['file_id'].map(lambda x: ''.join([c for c in x if c.isnumeric()]))\nall_images_df['experiment'] = all_images_df['path'].map(lambda x: x.split('\/')[-2])\nall_images_df['series'] = all_images_df['path'].map(lambda x: x.split('\/')[-3])\nall_images_df.sample(3)","188730b5":"image_pairs_df = all_images_df.pivot_table(values='path', \n                          index=['series', 'experiment', 'file_idx'], \n                          columns='file_prefix', \n                          aggfunc='first').reset_index()\nimage_pairs_df.sample(3)","3f896f88":"fig, m_axs = plt.subplots(3, 2, figsize = (20, 10))\nfor (ax1, ax2), (_, i_row) in zip(m_axs, \n                                  image_pairs_df.sample(len(m_axs)).iterrows()):\n    ax1.imshow(imread(i_row['rgb']))\n    ax1.set_title('RGB')\n    ax2.imshow(imread(i_row['depth']))\n    ax2.set_title('Depth Map')","1e9fb772":"exp_list = list(image_pairs_df.groupby(['series', 'experiment']))\nprint(len(exp_list), 'experiments')","a4e58a1c":"(series, exp), t_rows = exp_list[-1]\nprint((series, exp))\nt_rows = t_rows.copy()\nprint(t_rows.shape[0], 'rows to process')\nt_rows['rgb'] = t_rows['rgb'].map(imread)\nt_rows['depth'] = t_rows['depth'].map(imread)\nall_depth = np.stack(t_rows['depth'].values)","b1d22878":"@ipw.interact()\ndef show_scene_figure(index=(0, t_rows.shape[0])):\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (20, 10))\n    ax1.imshow(t_rows['rgb'].iloc[index])\n    ax2.imshow(t_rows['depth'].iloc[index])","489ef2fe":"fig, ((ax1, ax2, ax3),(ax4, ax5, ax6)) = plt.subplots(2, 3, figsize=(20, 15))\nvmin, vmax = np.min(all_depth), np.max(all_depth)\nax1.imshow(np.mean(all_depth, 0), vmin=vmin, vmax=vmax)\nax1.set_title('Average')\nax2.imshow(np.median(all_depth, 0), vmin=vmin, vmax=vmax)\nax2.set_title('Median')\nax3.imshow(np.std(all_depth, 0), vmin=vmin, vmax=vmax)\nax3.set_title('Std')\nax4.imshow(np.min(all_depth, 0), vmin=vmin, vmax=vmax)\nax4.set_title('Min')\nax5.imshow(np.max(all_depth, 0), vmin=vmin, vmax=vmax)\nax5.set_title('Max')\nax6.imshow(np.max(all_depth, 0)-np.min(all_depth, 0), vmin=0, vmax=vmax-vmin)\nax6.set_title('Range')","18601e1f":"na_depth = all_depth.astype('float32')\nna_depth[na_depth==0] = np.NAN\nfig, ((ax1, ax2, ax3),(ax4, ax5, ax6)) = plt.subplots(2, 3, figsize=(20, 15))\nvmin, vmax = np.min(all_depth), np.max(all_depth)\nax1.imshow(np.nanmean(na_depth, 0), vmin=vmin, vmax=vmax)\nax1.set_title('Average')\nax2.imshow(np.nanmedian(na_depth, 0), vmin=vmin, vmax=vmax)\nax2.set_title('Median')\nax3.imshow(np.nanstd(na_depth, 0), vmin=vmin, vmax=vmax)\nax3.set_title('Std')\nax4.imshow(np.nanmin(na_depth, 0), vmin=vmin, vmax=vmax)\nax4.set_title('Min')\nax5.imshow(np.nanmax(na_depth, 0), vmin=vmin, vmax=vmax)\nax5.set_title('Max')\nax6.imshow(np.nanmax(na_depth, 0)-np.nanmin(na_depth, 0), vmin=0, vmax=vmax-vmin)\nax6.set_title('Range')","ebebdd57":"(series, exp)\ncur_calib_dict = all_yaml['{}\/calibration.yaml'.format(series)]\nK = np.array(cur_calib_dict['K'])\nPcw = np.array(cur_calib_dict['Pcw'])","13c4f469":"plt.hist(all_depth[all_depth>0])","888204d6":"# hacky point cloud reconstruction using some TUM code\n# https:\/\/svncvpr.in.tum.de\/cvpr-ros-pkg\/trunk\/rgbd_benchmark\/rgbd_benchmark_tools\/src\/rgbd_benchmark_tools\/generate_pointcloud.py\n# TODO: replace hard coded focal length and scaling factor with values from Pcw\nfocalLength = 525.0\ncenterX = K[0,2]\ncenterY = K[1,2]\nscalingFactor = 5000.0\ndef slice_to_cloud(in_depth):\n    xx, yy = np.meshgrid(range(in_depth.shape[1]), range(in_depth.shape[0]), indexing='xy')\n    Z = in_depth.astype('float32') \/ scalingFactor\n    X = (xx - centerX) * Z \/ focalLength\n    Y = (yy - centerY) * Z \/ focalLength\n    return X.ravel(), Y.ravel(), Z.ravel()\ndef slice_to_dfcloud(in_rgb, in_depth):\n    X, Y, Z = slice_to_cloud(in_depth[::-1])\n    pc_df = pd.DataFrame({'x': X, 'y': Y, 'z': Z})\n    for i,k in enumerate('rgb'):\n        pc_df[k] = in_rgb[::-1, :, i].ravel()\n    return pc_df.query('z>0')","69137b66":"show_scene_figure(0)","dceb1a5f":"test_df = slice_to_dfcloud(t_rows['rgb'].iloc[0], \n                           t_rows['depth'].iloc[0]).sample(100000)\nfig, m_axs = plt.subplots(1, 3, figsize = (20, 5))\nax_names = 'xyz'\nfor i, c_ax in enumerate(m_axs.flatten()):\n    plot_axes = [x for j, x in enumerate(ax_names) if j!=i]\n    c_ax.scatter(test_df[plot_axes[0]],\n                test_df[plot_axes[1]],\n                c=test_df[['r', 'g', 'b']].values\/255, \n                 s=1\n                )\n    c_ax.set_xlabel(plot_axes[0])\n    c_ax.set_ylabel(plot_axes[1])","ba48337f":"fig = plt.figure(figsize=(15,10))\nax = plt.axes(projection='3d')\nax.scatter(test_df['z'], test_df['x'], test_df['y'],\n            c=test_df[['r', 'g', 'b']].values\/255, s=3)  \nax.view_init(15, -45)","fa9f849d":"import sys\nfrom scipy.spatial import KDTree\nsys.setrecursionlimit(10000) # kdtree gets hungry (https:\/\/docs.scipy.org\/doc\/scipy-0.14.0\/reference\/generated\/scipy.spatial.KDTree.html)","1df42041":"x_sig = 2\ny_sig = 2\nz_sig = 2\nx_steps = 100\ny_steps = 40\nz_steps = 100\nbbox = {}\nfor c, sigma in zip('xyz', [x_sig,y_sig,z_sig]):\n    ax_mean, ax_std = test_df[c].mean(), test_df[c].std()\n    bbox[c] = (ax_mean-sigma*ax_std, ax_mean+sigma*ax_std)\nxx, yy, zz = np.meshgrid(np.linspace(*bbox['x'], x_steps),\n                         np.linspace(*bbox['y'], y_steps),\n                         np.linspace(*bbox['z'], z_steps),\n                         indexing='ij'\n                        )\nprint(xx.shape)\ndx = np.diff(xx[0:2, 0, 0])[0]\ndy = np.diff(yy[0, 0:2, 0])[0]\ndz = np.diff(zz[0, 0, 0:2])[0]\ndr = np.sqrt(dx**2+dy**2+dz**2)\nprint(dx, dy, dz, dr)","51117d84":"test_df = slice_to_dfcloud(t_rows['rgb'].iloc[0], \n                           t_rows['depth'].iloc[0])","1af9b97b":"%%time\nfor c_ax, c_xx, c_dx, c_steps in zip('xyz', \n                            [xx, yy, zz], \n                            [dx, dy, dz], \n                            [x_steps, y_steps, z_steps]):\n    test_df['i{}'.format(c_ax)] = (test_df[c_ax]-c_xx.min())\/c_dx\n    test_df['i{}'.format(c_ax)] = test_df['i{}'.format(c_ax)].map(lambda x: x if (x>0) and (x<c_steps) else np.NAN)\ntest_idx = test_df[['ix', 'iy', 'iz']].dropna().values.astype(int)\nprint('Valid Points: {}\/{}'.format(test_idx.shape[0], test_df.shape[0]))\nout_vol = np.zeros_like(xx)\nout_vol[test_idx[:, 0], test_idx[:, 1], test_idx[:, 2]]+=1","9cf2ed05":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize = (20, 10))\nax1.imshow(np.sum(out_vol, 0))\nax2.imshow(np.sum(out_vol, 1))\nax3.imshow(np.sum(out_vol, 2))","743096fd":"%%time\ntest_kdtree = KDTree(test_df[['x', 'y', 'z']])","8a29711b":"%%time\nout_dist, _ = test_kdtree.query(np.stack([xx, yy, zz], -1), k=1, distance_upper_bound = 1.1*dr)\ndist_vol = np.isinf(out_dist).reshape(xx.shape)==False","7f95c474":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize = (20, 10))\nax1.imshow(np.sum(dist_vol, 0))\nax2.imshow(np.sum(dist_vol, 1))\nax3.imshow(np.sum(dist_vol, 2))","d650fad2":"%%time\nout_dist, _ = test_kdtree.query(np.stack([xx, yy, zz], -1), k=1)\ndist_vol = (out_dist<1.5*dr).reshape(xx.shape)==False","891d917a":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize = (20, 10))\ndist_vol = np.log2(dr\/out_dist.reshape(xx.shape))\nax1.imshow(np.sum(dist_vol, 0))\nax2.imshow(np.sum(dist_vol, 1))\nax3.imshow(np.sum(dist_vol, 2))","19d4eb8d":"fig, (ax1) = plt.subplots(1, 1, figsize = (15, 15))\nax1.imshow(montage2d(dist_vol.swapaxes(0,1)))","a023af22":"plt.hist(dist_vol.ravel(), 50);","6c03c5c5":"fig, (ax1) = plt.subplots(1, 1, figsize = (15, 15))\nax1.imshow(montage2d(dist_vol.swapaxes(0,1)>0.5))","412ea754":"from mpl_toolkits.mplot3d.art3d import Poly3DCollection\nfrom skimage import measure\nverts, faces, normals, values = measure.marching_cubes_lewiner(dist_vol, 1.0, spacing=(dx, dy, dz))","864abad7":"fig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, projection='3d')\nax.plot_trisurf(verts[:, 2], verts[:, 0], faces, verts[:, 1],\n                cmap=plt.cm.Greens, lw=0.05, edgecolor='k')\nax.view_init(15, -90)","1af43f0a":"from tqdm import tqdm\nimport h5py\nwith h5py.File('time_steps.h5', 'w') as f:\n    time_ds = f.create_dataset('volume_time', \n                               shape=(t_rows.shape[0],)+xx.shape,\n                               chunks=(1,)+xx.shape, \n                               dtype='int', \n                               compression='gzip')\n    for i, (_, c_row) in tqdm(enumerate(t_rows.iterrows())):\n        test_df = slice_to_dfcloud(c_row['rgb'], \n                                   c_row['depth'])\n        for c_ax, c_xx, c_dx, c_steps in zip('xyz', \n                                    [xx, yy, zz], \n                                    [dx, dy, dz], \n                                    [x_steps, y_steps, z_steps]):\n            test_df['i{}'.format(c_ax)] = (test_df[c_ax]-c_xx.min())\/c_dx\n            test_df['i{}'.format(c_ax)] = test_df['i{}'.format(c_ax)].map(lambda x: x if (x>0) and (x<c_steps) else np.NAN)\n        test_idx = test_df[['ix', 'iy', 'iz']].dropna().values.astype(int)\n        out_vol = np.zeros_like(xx)\n        out_vol[test_idx[:, 0], test_idx[:, 1], test_idx[:, 2]]+=1\n        time_ds[i] = out_vol","956bd607":"!ls -lh *.h5","301cd3b8":"# Overview\nA number of images taken from a fixed RGBD camera recording a scene","f9b8b99f":"## Create a Volume\nWe make a low resolution volume and just keep track of the occupancy","db19e83c":"## YAML Data\n### Calibration Format\n\nAvailable in `calibration.yaml` or `calibration.mat` files, with the\nfollowing fields:\n\n* K - camera matrix\n* Pwc - world-to-camera matrix\n* Pcw - camera-to-world matrix\n* dist - distortion coefficients","486e205c":"## Fast Lookup\nHere we transform the test_df coordinates into indices and then set the appropriate indices.","90a86d3d":"## KDTree Lookup \nComparing thousands of points thousands of times is very very inefficient without binary search trees","431b5331":"# Generate all timesteps\nHere we process the rest of the time steps","9e4f63fa":"## Simple Marching Cubes Isosurface","93169074":"## Distance Maps could be more useful\nHere we make a distance map to the nearest point rather than a binary map","4597fde9":"# Convert RGBD -> Volume\nHere we convert the RGBD data into a Volume for each time step. The volume will then make it easier to see the regions which change the most"}}