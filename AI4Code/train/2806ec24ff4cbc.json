{"cell_type":{"8da319ca":"code","a46f9ced":"code","a86ede27":"code","5a414423":"code","012c59e2":"code","d96939fa":"code","bbc4d1cc":"code","caa5a614":"code","042bce26":"code","b9cc5b34":"code","f82f9fa6":"code","143226ca":"code","9a7ebecc":"code","c2c9e406":"code","40698122":"code","7700e330":"code","c52c12e0":"code","e87163cd":"code","520d0375":"code","de78b92f":"code","d9b9a92a":"code","e6c36938":"code","dc103948":"code","c8a26773":"markdown","be4518fc":"markdown","3ff522af":"markdown","73b6cb09":"markdown","b8b8ac2c":"markdown","9a11cef5":"markdown","fe880733":"markdown"},"source":{"8da319ca":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.set_option('display.float_format', lambda x: '%.2f' % x)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import confusion_matrix,f1_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import validation_curve","a46f9ced":"mental_health_dataset = pd.read_csv(\"..\/input\/mental-health-in-tech-survey\/survey.csv\")\norig_mental_health_dataset = mental_health_dataset.copy()","a86ede27":"def understand_variables(dataset):\n    print(\"Type = \" +str(type(dataset))+\"\\n\")\n    print(\"Shape = \"+str(dataset.shape)+\"\\n\")\n    print(\"Head : \\n\\n\"+str(dataset.head())+\"\\n\\n\")\n    print(str(dataset.info())+\"\\n\\n\")\n    print(\"No.of unique values :\\n\\n\"+str(dataset.nunique(axis=0))+\"\\n\\n\")\n    print(\"Description :\\n\\n\"+str(dataset.describe())+\"\\n\\n\")\n    \n    #print(dataset.describe(exclude=[np.number]))\n    #Since no categorical variables, no need to have the above line\n    \n    print(\"Null count :\\n\\n\"+str(dataset.isnull().sum()))\n    \nunderstand_variables(mental_health_dataset)","5a414423":"def understand_dist(dataset,feature_type):\n    \n    if feature_type == \"Categorical\":\n        \n        categorical_features=[feature for feature in dataset.columns if dataset[feature].dtype=='O']   \n        dataframes=[]\n        for feature in categorical_features:\n            dataframe=dataset[feature].value_counts().rename_axis(feature).reset_index(name='counts')\n            dataframes.append(dataframe)\n            \n            plt.figure(figsize=(10,4))\n            sns.countplot(x=feature,data = dataset)\n            plt.show()\n            print(dataframe,'\\n')\n\n        #for i in range(len(dataframes)):\n        #    print(dataframes[i],'\\n')\n            \n        \n            \n    elif feature_type == \"Numeric\":\n        \n        numerical_features=[feature for feature in dataset.columns if dataset[feature].dtype!='O']\n        \n        for feature in numerical_features:\n            plt.figure(figsize=(10,4))\n            sns.distplot(dataset[feature])\n            plt.show()\n            \n            print(\"Description :\\n\\n\"+str(dataset[feature].describe())+\"\\n\\n\")\n","012c59e2":"understand_dist(mental_health_dataset.drop([\"Timestamp\"],axis=1),\"Categorical\")","d96939fa":"understand_dist(mental_health_dataset,\"Numeric\")","bbc4d1cc":"mental_health_dataset = mental_health_dataset.drop(['state','comments','Timestamp','Country'],axis=1)","caa5a614":"mental_health_dataset.loc[mental_health_dataset.self_employed.isnull(),'self_employed'] = mental_health_dataset.self_employed.mode().iloc[0]\nmental_health_dataset.loc[mental_health_dataset.work_interfere.isnull(),'work_interfere'] = mental_health_dataset.work_interfere.mode().iloc[0]","042bce26":"print(\"Null count :\\n\\n\"+str(mental_health_dataset.isnull().sum()))","b9cc5b34":"#Gender\n\ngender_dict_map = {'Male':'Male','male':'Male','male ':'Male','Female':'Female','M':'Male','female':'Female','F':'Female','m':'Male','f':'Female',\n                   'Make':'Male','Woman':'Female','Male ':'Male','Female ':'Female','Man':'Male','Female (trans)':'LGBTQ','Cis Male':'Male','Male-ish':'LGBTQ','p':'LGBTQ','femail':'Female',\n                   'woman':'Female','Agender':'LGBTQ','Cis Female':'Female','Guy (-ish) ^_^':'LGBTQ','Malr':'Male','Trans woman':'LGBTQ','Mail':'Male','fluid':'LGBTQ','Cis Man':'Male',\n                   'Female (cis)':'Female','cis male':'Male','male leaning androgynous':'LGBTQ','queer':'LGBTQ','A little about you':'LGBTQ','Androgyne':'LGBTQ','non-binary':'LGBTQ',\n                   'Trans-female':'LGBTQ','something kinda male?':'LGBTQ','Male (CIS)':'Male','queer\/she\/they':'LGBTQ','Genderqueer':'LGBTQ','ostensibly male, unsure what that really means':'LGBTQ',\n                   'cis-female\/femme':'Female','maile':'Male','All':'LGBTQ','Mal':'Male','Femake':'Female','Neuter':'LGBTQ','Nah':'LGBTQ','Enby':'LGBTQ','msle':'Male'}\n","f82f9fa6":"mental_health_dataset.Gender = mental_health_dataset.Gender.map(gender_dict_map)","143226ca":"#Check if all genders covered\norig_mental_health_dataset.loc[mental_health_dataset.Gender[mental_health_dataset.Gender.isnull()].index].Gender.unique()","9a7ebecc":"mental_health_dataset.head()","c2c9e406":"# Age needs to be within range of 18 to 72 \n\nmental_health_dataset.loc[mental_health_dataset.Age<18,'Age']=18\nmental_health_dataset.loc[mental_health_dataset.Age>70,'Age']=72\n\nmental_health_true_age = mental_health_dataset.Age","40698122":"# Converting categorical variables to numeric represtation\n\nmental_health_dataset = pd.get_dummies(mental_health_dataset)","7700e330":"# Standard scaling (Usually from 0 to 1) is mandatory for a clustering problem\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nmental_health_dataset = pd.DataFrame(scaler.fit_transform(mental_health_dataset),columns=mental_health_dataset.columns)","c52c12e0":"# For now, we are interested in only 2 clusters\n\nfrom sklearn.cluster import KMeans\n\nkmeans = KMeans(n_clusters=2, max_iter=600, algorithm = 'auto',random_state=1)\nkmeans = kmeans.fit(mental_health_dataset.drop(['Age'],axis=1))","e87163cd":"cluster = []\n\nfor x in range(len(mental_health_dataset)):\n    predict_me = np.array(mental_health_dataset.drop(['Age'],axis=1).iloc[x].astype(float))\n    predict_me = predict_me.reshape(-1, len(predict_me))\n    cluster.append(kmeans.predict(predict_me)[0])\n    ","520d0375":"mental_health_dataset = pd.concat([mental_health_dataset,pd.Series(cluster,name='Cluster_no')],axis=1)\n\nmental_health_dataset.Age = mental_health_true_age","de78b92f":"cluster_1 = mental_health_dataset[mental_health_dataset.Cluster_no==0]\ncluster_2 = mental_health_dataset[mental_health_dataset.Cluster_no==1]","d9b9a92a":"#### Observation of Major differences b\/w 2 clusters\n\nwith pd.option_context('display.max_rows', None, 'display.max_columns', None):\n    \n    # We use mean to calculate % of employees who answered the index value\n    cluster_compare = pd.concat([cluster_1.mean(),cluster_2.mean()],axis=1)\n    cluster_compare.columns=['0','1']\n    cluster_compare = cluster_compare.drop('Cluster_no')\n    for index,row in cluster_compare.iterrows():\n        if index!=\"Age\":\n            row['0']=row['0']*100\n            row['1']=row['1']*100\n    cluster_compare['Diff'] = (cluster_compare['0']-cluster_compare['1'])\n    cluster_compare['Abs Diff'] = np.abs(cluster_compare['0']-cluster_compare['1'])\n    cluster_compare=cluster_compare.sort_values(by='Abs Diff',ascending=False)\n\n    \n    \n    print(cluster_compare)\n        ","e6c36938":"#### To identify individual differences one by one b\/w 2 clusters\n\n\nwith pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also\n    cluster_compare = pd.concat([cluster_1.mean(),cluster_2.mean()],axis=1)\n    cluster_compare.columns=['0','1']\n    cluster_compare = cluster_compare.drop('Cluster_no')\n    for index,row in cluster_compare.iterrows():\n        if index!=\"Age\":\n            row['0']=row['0']*100\n            row['1']=row['1']*100\n    cluster_compare['Diff'] = (cluster_compare['0']-cluster_compare['1'])\n    cluster_compare['Abs Diff'] = np.abs(cluster_compare['0']-cluster_compare['1'])\n    print(cluster_compare)","dc103948":"# PCA conversion to plot clusters succesfully in 2D\n\nfrom sklearn.decomposition import PCA\nreduced_data = PCA(n_components=2).fit_transform(mental_health_dataset)\nresults = pd.DataFrame(reduced_data,columns=['pca1','pca2'])\n\nplt.figure(figsize=(10,4))\nsns.scatterplot(x=\"pca1\", y=\"pca2\", hue=mental_health_dataset['Cluster_no'], data=results)\nplt.title(\"Employee's workspace Mental Health Attitude clustering\")\nplt.show()","c8a26773":"Mental health refers to cognitive, behavioral, and emotional well-being. It is all about how people think, feel, and behave. People sometimes use the term \u201cmental health\u201d to mean the absence of a mental disorder. Mental health can affect daily living, relationships, and physical health.\n\nIn some workspace, Mental Health is now considered a serious aspect of an employee's well-being. However, there are some firms where mental health is not given much importance, and employees with mental issues face stigma from their colleagues and bosses. \n\nIn this analysis, we find out 2 clusters\/categories of employees : \n    i) Those who work in mentally supportive workspace\n    ii) Those who do not work in mentally supportive workspace","be4518fc":"First, Let us understand the data that we are dealing with","3ff522af":"# Mental Health Clustering","73b6cb09":"As per above observations, employees in cluster 0 work in spaces where they are much more considerate of mental health than those in cluster 1. One of the examples is that if we look at mental_health_consequence_No row, we find that \ni) In cluster 0, ~85% answered mental_health_consequence as No\nii) In cluster 1,only ~7% answered mental_health_consequence as No. \n\nSimilarly in other rows you will find observations such that cluster 0 seems to be much more considerate of mental health","b8b8ac2c":"# Hence we have successfully clustered employees as per their workspace's mental health attitude, one where mental health is important, the other where it's not so important","9a11cef5":"Based on data and it's distribution, we take the following actions :\n\n    1) Drop State,Timestamp,Country and comments (Perhaps state, country and comments could be a future scope of analysis, but we ignore these for now)\n\n    2) Work on Gender column to reduce no.of unique values to Male,Female and LGBTQ\n\n    3) Set null values of work_interfere and self_employed to MODE value\n    \n    4) Standardize Age range from 18 to 72 (Age has some outliers. As per above distribution, min age is -1726.00 and max age is 99999999999.00)","fe880733":"Now, Let's look at the data distribution"}}