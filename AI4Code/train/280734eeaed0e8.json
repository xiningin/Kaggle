{"cell_type":{"8da2e577":"code","a875baaa":"code","2edcfa6e":"code","dcafa4c5":"code","30b4c43d":"code","42aa517a":"code","bdae2169":"code","f3c49aa8":"code","eaa2cc1b":"code","c3a80774":"markdown","a49c04b7":"markdown"},"source":{"8da2e577":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a875baaa":"#load data set\ndf=pd.read_csv(\"\/kaggle\/input\/financial-distress\/Financial Distress.csv\",index_col=\"Company\")","2edcfa6e":"\ndf.head()","dcafa4c5":"df.describe()","30b4c43d":"df.columns","42aa517a":"from sklearn.model_selection import train_test_split\n\n# Obtain target and predictors\ny = df[\"Financial Distress\"]\nfeatures = ['Time', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7',\n       'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17',\n       'x18', 'x19', 'x20', 'x21', 'x22', 'x23', 'x24', 'x25', 'x26', 'x27',\n       'x28', 'x29', 'x30', 'x31', 'x32', 'x33', 'x34', 'x35', 'x36', 'x37',\n       'x38', 'x39', 'x40', 'x41', 'x42', 'x43', 'x44', 'x45', 'x46', 'x47',\n       'x48', 'x49', 'x50', 'x51', 'x52', 'x53', 'x54', 'x55', 'x56', 'x57',\n       'x58', 'x59', 'x60', 'x61', 'x62', 'x63', 'x64', 'x65', 'x66', 'x67',\n       'x68', 'x69', 'x70', 'x71', 'x72', 'x73', 'x74', 'x75', 'x76', 'x77',\n       'x78', 'x79', 'x80', 'x81', 'x82', 'x83']\nX = df[features].copy()\n\n# Break off validation set from training data\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                      random_state=0)","bdae2169":"from sklearn.ensemble import RandomForestRegressor\n\n# Define the models\nmodel_1 = RandomForestRegressor(n_estimators=50, random_state=0)\nmodel_2 = RandomForestRegressor(n_estimators=100, random_state=0)\nmodel_3 = RandomForestRegressor(n_estimators=100, criterion='mae', random_state=0)\nmodel_4 = RandomForestRegressor(n_estimators=200, min_samples_split=20, random_state=0)\nmodel_5 = RandomForestRegressor(n_estimators=100, max_depth=7, random_state=0)\n\nmodels = [model_1, model_2, model_3, model_4, model_5]","f3c49aa8":"from sklearn.metrics import mean_absolute_error\n\n# Function for comparing different models\ndef score_model(model, X_tr=X_train, X_t=X_test, y_tr=y_train, y_t=y_test):\n    model.fit(X_tr, y_tr)\n    preds = model.predict(X_t)\n    return mean_absolute_error(y_t, preds)\n\nfor i in range(0, len(models)):\n    mae = score_model(models[i])\n    print(\"Model %d MAE: %d\" % (i+1, mae))","eaa2cc1b":"\nmodel_1.fit(X, y)\n\n# Generate test predictions\npreds = model_1.predict(X_test)\nprint(mean_absolute_error(y_test, preds))\n","c3a80774":"# Loading Data","a49c04b7":"# A look at our data"}}