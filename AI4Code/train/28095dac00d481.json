{"cell_type":{"2befc13d":"code","569d3444":"code","277091c4":"code","ae557944":"code","885666f9":"code","4c74cdec":"code","bac87146":"code","79054251":"code","4b749849":"code","82f6702b":"code","76452c93":"code","5d7101b1":"code","0db95aed":"code","bdd4db9e":"code","030a7ed9":"code","ce0b7740":"code","4fb22ec2":"code","6208b9e1":"code","d976dc11":"code","503a21c0":"code","2ac1ac5e":"code","30c929b8":"code","7a546612":"code","5cad1db4":"code","b3d554de":"code","c841f06b":"code","6ae861f5":"code","94253934":"code","b5bb45d3":"code","5eb2f0d2":"code","1b55435f":"code","ece9af50":"code","de30a7a5":"code","c86f50ae":"code","88ef23bb":"code","36fba069":"code","867c6a3c":"code","5f7e5d06":"code","3b2bfc0d":"code","c98b6acb":"code","c7397c95":"code","707ea76a":"code","2476daf5":"code","730a14fb":"code","6c73a0a5":"code","1d9be414":"code","0e4cadba":"code","9cc318e7":"code","6e7a61cf":"code","efaaa05f":"code","6d45afcd":"code","2c5edd7c":"code","0d7e1f81":"code","0de3770c":"code","a390f599":"code","fcc7e9d7":"code","7f457435":"code","5e30525b":"code","42a10df4":"code","5bf07ed3":"code","6a453f98":"code","2fdde8ba":"code","58e5eb10":"code","49802d91":"code","fa05e9c1":"markdown","224db33e":"markdown","1dd2d2a7":"markdown","88673c2d":"markdown","f62f7aaa":"markdown","a5b96189":"markdown"},"source":{"2befc13d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","569d3444":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')","277091c4":"train_data.head()","ae557944":"train_data.shape","885666f9":"train_data.info()","4c74cdec":"train_data.describe()","bac87146":"train_data.isnull().sum()","79054251":"test_data.isnull().sum()","4b749849":"# cabin has a lot of null values both in test and train data\n\ntrain_data.drop('Cabin', axis = 1, inplace = True)\ntest_data.drop('Cabin', axis = 1, inplace = True)","82f6702b":"train_data.shape","76452c93":"train_data.head()","5d7101b1":"test_data.head()","0db95aed":"train_data.Age.mean()","bdd4db9e":"train_data.Age.median()","030a7ed9":"test_data.Age.mean()","ce0b7740":"test_data.Age.median()","4fb22ec2":"( 29.7 + 28 + 30.3 + 27 ) \/ 4","6208b9e1":"train_data['Age'].replace(np.nan, 28.7, inplace = True)\ntest_data['Age'].replace(np.nan, 28.7, inplace = True)","d976dc11":"train_data.isnull().sum()","503a21c0":"train_data.Embarked.unique()","2ac1ac5e":"test_data.isnull().sum()","30c929b8":"test_data.Fare.mean()","7a546612":"emb = train_data.Embarked.dropna().mode()[0]\ntrain_data['Embarked'] = train_data['Embarked'].fillna(emb)\ntest_data['Fare'].replace(np.nan, 35.6271, inplace = True)","5cad1db4":"train_data.isnull().sum()","b3d554de":"test_data.isnull().sum()","c841f06b":"sns.countplot(x = 'Survived', data = train_data)\nplt.show()","6ae861f5":"sns.countplot(x = 'Survived', hue = 'Sex', data = train_data)\nplt.show()","94253934":"ws = train_data.loc[train_data.Sex == 'female']['Survived']\nwsr = sum(ws) \/ len(ws) * 100\nprint('women survivor rate: ', wsr)","b5bb45d3":"ms = train_data.loc[train_data.Sex == 'male']['Survived']\nmsr = sum(ms) \/ len(ms) * 100\nprint('men survivor rate: ', msr)","5eb2f0d2":"sns.countplot(x = 'Survived', hue = 'Pclass', data = train_data)\nplt.show()","1b55435f":"c1 = train_data.loc[train_data.Pclass == 1]['Survived']\nc1r = sum(c1) \/ len(c1) * 100\nprint('Passenger class 1 survivor rate: ', c1r)","ece9af50":"c2 = train_data.loc[train_data.Pclass == 2]['Survived']\nc2r = sum(c2) \/ len(c2) * 100\nprint('Passenger class 2 survivor rate: ', c2r)","de30a7a5":"c3 = train_data.loc[train_data.Pclass == 3]['Survived']\nc3r = sum(c3) \/ len(c3) * 100\nprint('Passenger class 3 survivor rate: ', c3r)","c86f50ae":"sns.countplot(x = 'Survived', hue = 'SibSp', data = train_data)\nplt.show()","88ef23bb":"sns.countplot(x = 'Survived', hue = 'Parch', data = train_data)\nplt.show()","36fba069":"sns.countplot(x = 'Survived', hue = 'Embarked', data = train_data)\nplt.show()","867c6a3c":"sns.violinplot(x = 'Survived', y = 'Age', data = train_data)\nplt.show()","5f7e5d06":"train_data['Sex'] = train_data['Sex'].map({'female': 1, 'male':0}).astype(int)\ntest_data['Sex'] = test_data['Sex'].map({'female': 1, 'male':0}).astype(int)","3b2bfc0d":"train_data.head()","c98b6acb":"emb_dummy_train = pd.get_dummies(train_data['Embarked'])\ntrain_data = pd.concat([train_data, emb_dummy_train], axis = 1)\n\nemb_dummy_test = pd.get_dummies(test_data['Embarked'])\ntest_data = pd.concat([test_data, emb_dummy_test], axis = 1)","c7397c95":"train_data.head()","707ea76a":"train_data.drop({'Name','Ticket','Fare','Embarked'}, axis = 1, inplace = True)\ntest_data.drop({'Name','Ticket','Fare','Embarked'}, axis = 1, inplace = True)","2476daf5":"train_data.head()","730a14fb":"test_data.head()","6c73a0a5":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\ntrain_data.iloc[:, 4:5] = sc.fit_transform(train_data.iloc[:, 4:5])\ntest_data.iloc[:, 3:4] = sc.transform(test_data.iloc[:, 3:4])","1d9be414":"train_data.head()","0e4cadba":"test_data.head()","9cc318e7":"x_train = train_data.drop(['PassengerId', 'Survived'], axis = 1).values\ny_train = train_data['Survived'].values\n\nfrom sklearn.model_selection import train_test_split\nx_train_train, x_train_test, y_train_train, y_train_test = train_test_split(x_train, y_train, test_size = 0.25, random_state = 19)","6e7a61cf":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train_train, y_train_train)","efaaa05f":"y_predlr = lr.predict(x_train_test)","6d45afcd":"from sklearn.metrics import accuracy_score, confusion_matrix\n\nacclr = accuracy_score(y_train_test, y_predlr)\nprint(acclr)\n\ncmlr = confusion_matrix(y_train_test, y_predlr)\nprint(cmlr)","2c5edd7c":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier(random_state = 7)\ndtc.fit(x_train_train, y_train_train)","0d7e1f81":"y_preddtc = dtc.predict(x_train_test)","0de3770c":"accdtc = accuracy_score(y_train_test, y_preddtc)\nprint(accdtc)\n\ncmdtc = confusion_matrix(y_train_test, y_preddtc)\nprint(cmdtc)","a390f599":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators = 10, random_state = 7)\nrfc.fit(x_train_train, y_train_train)","fcc7e9d7":"y_predrfc = rfc.predict(x_train_test)","7f457435":"accrfc = accuracy_score(y_train_test, y_predrfc)\nprint(accrfc)\n\ncmrfc = confusion_matrix(y_train_test, y_predrfc)\nprint(cmrfc)","5e30525b":"rfc.fit(x_train, y_train)","42a10df4":"test = test_data.drop(['PassengerId'], axis = 1)\nfinal_pred = rfc.predict(test)","5bf07ed3":"test_data['Survived'] = final_pred","6a453f98":"test_data.head()","2fdde8ba":"test_data.drop(['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'C', 'Q', 'S'], axis = 1, inplace = True)","58e5eb10":"test_data.head()","49802d91":"test_data.to_csv('Submission.csv', index = False)","fa05e9c1":"RANDOM FOREST GIVES THE BEST ACCURACY OF 82.06 %","224db33e":"### Logistic Regression","1dd2d2a7":"***","88673c2d":"***","f62f7aaa":"### Random Forest","a5b96189":"### Decision Tree"}}