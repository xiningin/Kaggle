{"cell_type":{"f63f276c":"code","52f860a9":"code","83820116":"code","8aab1cc6":"code","70654bf3":"code","96ee2122":"code","419b7bbe":"code","95b3b9ef":"code","e524128a":"code","a1954c3f":"code","d28572ba":"code","eda906a9":"code","b3de48ea":"code","80c84021":"code","20e09bde":"code","227c32f9":"code","273892ba":"code","a8341a50":"markdown","b8d9c5a2":"markdown","ae6046ba":"markdown","5d8e4710":"markdown"},"source":{"f63f276c":"import gc\nimport os\nfrom pathlib import Path\nimport random\nimport sys\n\nfrom tqdm.notebook import tqdm\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom IPython.core.display import display, HTML\n\n# --- plotly ---\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\n\n# --- models ---\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cb\n\n# --- setup ---\npd.set_option('max_columns', 50)\n","52f860a9":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","83820116":"%%time\ndatadir = Path('\/kaggle\/input\/covid19-global-forecasting-week-1')\n\n# Read in the data CSV files\ntrain = pd.read_csv(datadir\/'train.csv')\ntest = pd.read_csv(datadir\/'test.csv')\nsubmission = pd.read_csv(datadir\/'submission.csv')","8aab1cc6":"train","70654bf3":"test","96ee2122":"submission","419b7bbe":"train.rename({'Country\/Region': 'Country', 'Province\/State': 'Province'}, axis=1, inplace=True)\ntest.rename({'Country\/Region': 'Country', 'Province\/State': 'Province'}, axis=1, inplace=True)","95b3b9ef":"train['country_province'] = train['Country'].fillna('') + '\/' + train['Province'].fillna('')\ntest['country_province'] = test['Country'].fillna('') + '\/' + test['Province'].fillna('')","e524128a":"train['country_province'].unique()","a1954c3f":"public_leaderboard_start_date = \"2020-03-12\"\nlast_public_leaderboard_train_date = \"2020-03-11\"\npublic_leaderboard_end_date  = \"2020-03-26\"","d28572ba":"last_date_train = train.query(\"Date == @last_public_leaderboard_train_date\")","eda906a9":"sns.countplot(x='ConfirmedCases', data=last_date_train)","b3de48ea":"last_date_train['ConfirmedCases'].value_counts()","80c84021":"len(train['country_province'].unique()), len(test['country_province'].unique())","20e09bde":"test = test.merge(last_date_train[['country_province', 'ConfirmedCases', 'Fatalities']],\n                  on='country_province')","227c32f9":"submission","273892ba":"this_submission = test[['ForecastId', 'ConfirmedCases', 'Fatalities']]\nthis_submission.to_csv('submission.csv', index=False)","a8341a50":"# Extract last train date information (no-leak)\n\nUse proper date to ensure no-leak!","b8d9c5a2":"# Check histogram of last train date...","ae6046ba":"# Fast no new cases baseline\n\nInspired by the [No New Cases Baseline (COVID-19 Week 1, Global)](https:\/\/www.kaggle.com\/benhamner\/no-new-cases-baseline-covid-19-week-1-global) kernel by @benhamner.<br\/>\nThis is simplified version.","5d8e4710":"# Prediction and submission\n\nJust by inserting last train date values to test DataFrame, assuming no new cases happen."}}