{"cell_type":{"119adf4c":"code","ae8f8d20":"code","72914e44":"code","c092badd":"code","ed6d7e3e":"code","a2793393":"code","115ec923":"code","245d01be":"code","2c055df9":"code","62f48a68":"code","6eaf9e96":"code","a447eb7d":"code","eedaa208":"code","19dca0a5":"code","b1bd7e55":"code","100e1ac5":"code","12144115":"code","bc94b4f2":"code","f78f5c24":"code","289ec051":"code","9187c0cb":"code","c70cb9ba":"code","475daf57":"code","3d2363cf":"code","c034806a":"code","4315512d":"code","639e9a21":"code","139e506b":"code","dcd81b97":"code","e512a949":"code","7fe488bb":"code","b8147350":"code","ff571987":"code","575e9f38":"code","7d7d311c":"code","2fb612b8":"markdown","315cc3d7":"markdown","fc22281f":"markdown","4142d387":"markdown","c07389a9":"markdown","a0df03bd":"markdown","89879e4f":"markdown","1ee3a566":"markdown","97e768bd":"markdown","2d8038cd":"markdown","7fc33f54":"markdown","0fa554fb":"markdown","851d79cf":"markdown","e6dae895":"markdown","122324f9":"markdown","57717cf3":"markdown","803ccc1a":"markdown"},"source":{"119adf4c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Flatten,Activation","ae8f8d20":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","72914e44":"train=pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ndigits=pd.concat([train,test],axis=0)\ntrain.shape,test.shape","c092badd":"#printing the mergerd data\nprint(digits.shape)\ndigits.head()","ed6d7e3e":"target=train.label\ntrain.drop(columns=['label'],inplace=True)","a2793393":"y_train=np.asarray(target)\ny_train","115ec923":"X_train=np.asarray(train)\nX_test=np.asarray(test)\nX_train.shape,X_test.shape","245d01be":"X_train=X_train\/255\nX_test=X_test\/255","2c055df9":"X_train=X_train.reshape(-1,28,28)\nX_test=X_test.reshape(-1,28,28)\nX_train.shape,X_test.shape","62f48a68":"plt.matshow(X_train[0])\nplt.show()","6eaf9e96":"plt.matshow(X_train[1])\nplt.show()","a447eb7d":"plt.matshow(X_train[2])\nplt.show()","eedaa208":"#Class labels of above image pixels of training data\ny_train[0:3]","19dca0a5":"# test image pixel\nplt.matshow(X_test[0])\nplt.show()","b1bd7e55":"# test image pixel\nplt.matshow(X_test[5])\nplt.show()","100e1ac5":"#class labeles present in datasets\nclass_labels=list(set(y_train))\nclass_labels","12144115":"ann=Sequential()","bc94b4f2":"# input layers of size of 28*28\nann.add(Flatten(input_shape=[28,28]))\n\n# 3 hidden layers containing 100 neurons\nann.add(Dense(512,activation='relu'))\nann.add(Dense(256,activation='relu'))\nann.add(Dense(128,activation='relu'))\n\n#output layers containing 10 neurons to predict each of digit\nann.add(Dense(10,activation='softmax'))","f78f5c24":"ann.summary()","289ec051":"ann.compile(loss='sparse_categorical_crossentropy',\n            optimizer='adam',\n            metrics=['accuracy'])\n            ","9187c0cb":"ann.fit(X_train,y_train,batch_size=32,epochs=15)","c70cb9ba":"detail=ann.evaluate(X_train,y_train)\nprint('loss:',detail[0])\nprint('accuracy achieved:',round(detail[1]*100,4))","475daf57":"y_pred=ann.predict(X_test)","3d2363cf":"#predicted digits are output of test data\npredicted_digits=[class_labels[np.argmax(y_pred[i])] for i in range(len(y_pred))]\nprint(\"first ten outputs of test data:\",*predicted_digits[:10])\n                  ","c034806a":"#checking our output for 2nd digit in test data\nplt.matshow(X_test[1])\nplt.show()","4315512d":"#above pixel image is 0 and prediction also showing 0\npredicted_digits[1]","639e9a21":"images=np.random.choice(len(X_test),size=12)\nprint(\"\")\nfig=plt.figure(figsize=(15,9))\nfig.suptitle(\"predicted outputs of random handwritten digits\".upper(),fontsize=18)\nfig.subplots_adjust(hspace=0.5,wspace=0.5)\n\nfor i,num in zip(images,range(1,13)):\n    label=class_labels[np.argmax(y_pred[i])]\n    ax=fig.add_subplot(3,4,num)\n    ax.matshow(X_test[i])\n    ax.set_xlabel(\"Prediction-->{}\".format(label),fontsize=16)","139e506b":"images=np.random.choice(len(X_test),size=12)\nprint(\"\")\nfig=plt.figure(figsize=(15,9))\nfig.suptitle(\"predicted outputs of random handwritten digits\".upper(),fontsize=18)\nfig.subplots_adjust(hspace=0.5,wspace=0.5)\n\nfor i,num in zip(images,range(1,13)):\n    label=class_labels[np.argmax(y_pred[i])]\n    ax=fig.add_subplot(3,4,num)\n    ax.matshow(X_test[i])\n    ax.set_xlabel(\"Prediction-->{}\".format(label),fontsize=16)","dcd81b97":"y_train_pred=ann.predict(X_train)","e512a949":"y_train_p=[class_labels[np.argmax(y_train_pred[i])] for i in range(len(y_train_pred))]\ny_train_p[0:10]","7fe488bb":"from sklearn.metrics import confusion_matrix,classification_report,accuracy_score\ncon_mat=confusion_matrix(y_train,y_train_p)\nprint(\"Confusion Matrix\")\npd.DataFrame(con_mat,columns=class_labels,index=class_labels)","b8147350":"my_submission=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")\nmy_submission.head()","ff571987":"my_submission['Label']=predicted_digits\nmy_submission.head(10)","575e9f38":"my_submission.to_csv(\"digits_submission2.csv\",index=False)","7d7d311c":"pd.read_csv(\"digits_submission2.csv\").head(10)","2fb612b8":"**Reading the data**","315cc3d7":"now there are 42000 rows, each row of 28*28 dimensions","fc22281f":"### Vizualizing the array of matrix form\n    some samples drawn from training an testing arrays","4142d387":"### Again comparing my the model output with test pixel images","c07389a9":"### Also converting features of train and test datasets into array","a0df03bd":"### Converting target\/class label into np array","89879e4f":"## **My above model has achieved the accuracy of 99.695**\n## The model truly predicted some random samples of test data (checked by running that code multiple times)\n### **If you find any mistake in above code please feel free to comment and give me advices**\n### **I am a beginner in deep learning and please appreciate my work if you like it. **\n##     ** Happy Learning**","1ee3a566":"### reshaping the array to make it into matrix form\n","97e768bd":"### Splitting the class label from the dataset","2d8038cd":"    Normalizing the features into 0 to 1 scale\n    Pixels values ranges from 0 to 255","7fc33f54":"## **Model Building using ANN**\n","0fa554fb":"# **Handwritten Digit Prediction** \n## My First Kaggle notebook\n### Digits are predicted by using simple ANN model.\n### Please give a upvote if you like my work.","851d79cf":"## **Prediction on some random samples of Test data using ANN model**","e6dae895":"**Importing the neccessary libraries** ","122324f9":"### Predicting the class labels for X_test\/test data","57717cf3":"### submission","803ccc1a":"### We have to predict the following pixel images of test data"}}