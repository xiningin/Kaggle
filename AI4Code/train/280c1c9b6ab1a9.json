{"cell_type":{"ebc85fdf":"code","0c26ccf9":"code","9c3a1dd9":"code","43afcb15":"code","81c99229":"code","785de440":"code","219671d2":"code","28f1dcb3":"code","cb21d2bb":"code","37af892a":"code","25785504":"code","7e0122e0":"code","3e7a9b4f":"code","aef96b78":"code","5826fdf3":"code","ca007fa4":"code","d1dce844":"code","b0cf4c02":"code","13bb7c0b":"code","67901b57":"code","67bf678f":"code","e78d80b0":"code","ec201948":"code","c96838bb":"code","795fbd3c":"code","3a22ace5":"code","5cf4bfd7":"code","225bc47e":"code","80a56f92":"code","2c4d7dd0":"code","c2cf7d98":"code","01be2a52":"code","3c219906":"code","cf4fa459":"code","4f77db0b":"code","6bf0d6cd":"code","6ad96c5c":"code","2f98e72e":"code","d237be10":"code","87341559":"code","e935afac":"code","3975fc2b":"code","cbec8977":"code","afc87a91":"code","03e25ff8":"code","b50326ec":"code","1e0d966c":"code","625ac476":"code","47631e3e":"code","fc7190d1":"code","35116f48":"code","2222e21b":"code","e54a6fc4":"code","bcf63c6b":"code","52a5522f":"code","3f1a75a1":"code","fcca8154":"code","d8c9363d":"code","5353ea77":"code","b25983c7":"code","227f8a76":"code","d25de1e6":"code","19e2da18":"code","a14b9a3f":"code","c3192ec0":"code","5e628ea2":"code","e6532a1b":"code","27ff77ab":"code","126b8951":"code","3d644014":"code","071b0888":"code","9375fb1b":"code","18b8c3ba":"code","571934fc":"code","e77348a5":"code","b9e09989":"code","80142893":"code","f9984003":"code","88bda853":"code","71dd590f":"code","a69b4941":"code","76f9695b":"code","fdb2347b":"code","b0678223":"code","28adf9bd":"code","247067bd":"code","63435bec":"code","a412890d":"code","b5a7ea3c":"code","7c48b286":"code","ecf81cec":"code","ee3ed1f3":"code","bb5ada9a":"code","2df46a85":"code","61471d72":"code","15c3c55c":"code","0f190cc5":"code","a4749b59":"code","fc6c1f93":"code","815c63af":"code","fae58636":"code","c44a9236":"code","bbfbddd3":"code","050b3370":"code","70ddc760":"code","4055d0fa":"code","a42b5bcf":"code","ea19a7d2":"code","3f401c9e":"code","db5298e6":"code","c307049e":"code","03b494f4":"code","f9f6dfa6":"code","f81a8bd5":"code","1512c375":"code","34496a9a":"code","50dda5f9":"code","c4487bb4":"code","6c51a0fa":"code","ee0814ee":"code","8ba8fede":"code","1dc6e0ca":"code","6d34f9e2":"code","485f08bb":"code","cef1e34e":"code","0f6f3d22":"code","7430cbb2":"code","b56d9598":"code","6fcca433":"code","57d756ae":"code","57946570":"code","efa652dd":"code","d99490af":"code","23f29da6":"code","cac6bedf":"code","84babe7a":"code","bd506220":"code","0901a756":"markdown","62f65140":"markdown","5aa01f83":"markdown","db2ff800":"markdown","329d0368":"markdown","98bda8c9":"markdown","e72ea3ae":"markdown","d2d6e587":"markdown","1ca834af":"markdown","2aa2412f":"markdown","fc24f748":"markdown","d9bdb922":"markdown","a9fc35df":"markdown","f291adef":"markdown","c7f863e7":"markdown","1c8415c3":"markdown","75243053":"markdown","765f1bc9":"markdown","2f545f46":"markdown","80a18cfe":"markdown","a3914d55":"markdown","69a96da8":"markdown","8ac39928":"markdown","b1b51725":"markdown","3070eddc":"markdown","3e5c0340":"markdown","ae49b4d4":"markdown","3ebde938":"markdown","6bb47356":"markdown","ec8f71da":"markdown","73329b19":"markdown","ab033977":"markdown","2d1b468d":"markdown","cd9b7bc1":"markdown","07bffed8":"markdown","98066e2d":"markdown","88319e5a":"markdown","d1a8f2f3":"markdown","68be2075":"markdown","3d4cdc8c":"markdown","189fa440":"markdown","246cf1fd":"markdown","9309a977":"markdown","c4a84bc6":"markdown","a8acd49c":"markdown","f3820a4f":"markdown","c8ea544c":"markdown","f661f2ae":"markdown","14264408":"markdown","ebf8c947":"markdown","1db6819d":"markdown","d8258503":"markdown"},"source":{"ebc85fdf":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split # \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442\n\nfrom sklearn.linear_model import LogisticRegression # \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\n\nfrom sklearn.preprocessing import PolynomialFeatures #\u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\nimport re\nimport datetime\nfrom datetime import datetime, timedelta\nfrom itertools import combinations #\u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430 \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430\nfrom scipy.stats import ttest_ind #\u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430 \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430\nfrom sklearn.preprocessing import StandardScaler #\u0434\u043b\u044f std \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\nfrom sklearn.preprocessing import MinMaxScaler #\u0434\u043b\u044f minmax \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\nfrom textblob import TextBlob\n\nimport warnings; warnings.simplefilter('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n        # Any results you write to the current directory are saved as output.","0c26ccf9":"#\u0441 \u0443\u0447\u0435\u0431\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043a\u0443\u0440\u0441\u0430\nfrom pandas import Series\nimport pandas as pd #\u0435\u0441\u0442\u044c\nimport numpy as np #\u0435\u0441\u0442\u044c\n\n\nimport matplotlib.pyplot as plt #\u0435\u0441\u0442\u044c\nimport seaborn as sns #\u0435\u0441\u0442\u044c\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n\nfrom sklearn.metrics import confusion_matrix, log_loss #\u0434\u043e\u043f\u043e\u043b\u043d\u0438\u043b\u0430 log_loss\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve #\u043c\u0435\u0442\u0440\u0438\u043a\u0438\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score #\u043c\u0435\u0442\u0440\u0438\u043a\u0438\n\nfrom sklearn.model_selection import GridSearchCV #\u0434\u043b\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n","9c3a1dd9":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","43afcb15":"DATA_DIR = '\/kaggle\/input\/sf-dst-scoring\/'\n# \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 (train, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438)\ndf_train = pd.read_csv(DATA_DIR+'\/train.csv')\n# \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 (test, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438)\ndf_test = pd.read_csv(DATA_DIR+'test.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')\n\n# \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 (train, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438)\n#df_train = pd.read_csv('train.csv')\n# \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 (test, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438)\n#df_test = pd.read_csv('test.csv')\n#sample_submission = pd.read_csv('sample_submission.csv')","81c99229":"!pip freeze > requirements.txt","785de440":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\ndef func_(df, col, with_bins):\n    \n    #\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 NaN \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u0447\u043a\u0430     \n    df[col] = df[col].apply(lambda x: None if str(x).strip()=='' else x)\n    \n    #display(pd.DataFrame(df[col].value_counts()))\n    print(\"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435\", col, \"\u0431\u043e\u043b\u0435\u0435 10 \u0440\u0430\u0437:\", (df[col].value_counts()>10).sum())\n    print(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439:\", df[col].nunique())\n    df.loc[:, [col]].info()\n    \n    if with_bins == 1:\n    \n        fig = plt.figure()\n        axes = fig.add_axes([0, 0, 1, 1])\n        axes.hist(df[col], bins = int(df[col].median()),color = 'green') \n        #axes.set_title('\u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0441\u0447\u0435\u0442\u0430')\n        axes.set_ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e')\n        axes.set_xlabel(col)  \n        \n    else: # \u0431\u0435\u0437 bins \u0440\u0430\u0432\u043d\u043e\u043c\u0443 \u043c\u0435\u0434\u0438\u0430\u043d\u0435\n        fig = plt.figure()\n        axes = fig.add_axes([0, 0, 1, 1])\n        axes.hist(df[col], color = 'green')        \n        axes.set_ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e')\n        axes.set_xlabel(col) ","219671d2":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u0439 \u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\ndef func_quantile(df, col):   \n    \n    IQR = df[col].quantile(q=0.75) - df[col].quantile(0.25)\n    perc25 = df[col].quantile(0.25)\n    perc75 = df[col].quantile(0.75)\n    print('25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc25), '75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc75), \"IQR: {}, \".format(IQR), \"\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{f}, {l}].\".format(f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR))\n    \n    # \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n    print(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435\",col,\":\",df[df[col]<perc25 - 1.5*IQR][col].count() + df[df[col]>perc75 + 1.5*IQR][col].count())\n    df[col].loc[df[col].between(perc25 - 1.5*IQR, perc75 + 1.5*IQR)].hist(bins = 20, label = 'IQR')\n    plt.legend()  ","28f1dcb3":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u043c \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u043c\ndef filling_quantile(df, col, change_quant): #quant=0.25 \u0438\u043b\u0438 0.75\n    IQR = df[col].quantile(q=0.75) - df[col].quantile(0.25)\n    perc25 = df[col].quantile(0.25)\n    perc75 = df[col].quantile(0.75)\n    high_border = perc75 + 1.5*IQR\n    low_border = perc25 - 1.5*IQR\n    if change_quant == 0.75:\n        df[col] = df[col].apply(lambda x: high_border if x>high_border else x)\n    elif change_quant == 0.25:\n        df[col] = df[col].apply(lambda x: low_border if x<low_border else x)\n    else:\n        print('\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c 0.25 \u0438\u043b\u0438 0.75 :)')","cb21d2bb":"#\u0421\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043e\u043a, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ndef get_boxplot(column):\n    fig, ax = plt.subplots(figsize = (8, 4))\n    sns.boxplot(x=column, y='default', \n                data=df_clients.loc[df_clients.loc[:, column].isin(df_clients.loc[:, column].value_counts().index[:20])],\n               ax=ax)\n    plt.xticks(rotation=45)\n    ax.set_title('Boxplot for ' + column)\n    plt.show()","37af892a":"def get_stat_dif(column):\n    cols = df_clients.loc[:, column].value_counts().index[:10]\n    combinations_all = list(combinations(cols, 2))\n    for comb in combinations_all:\n        if ttest_ind(df_clients.loc[df_clients.loc[:, column] == comb[0], 'default'], \n                        df_clients.loc[df_clients.loc[:, column] == comb[1], 'default']).pvalue \\\n            <= 0.05\/len(combinations_all): # \u0423\u0447\u043b\u0438 \u043f\u043e\u043f\u0440\u0430\u0432\u043a\u0443 \u0411\u043e\u043d\u0444\u0435\u0440\u043e\u043d\u0438\n            print('\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438', column)\n            break\n        else:\n            return column\n            break","25785504":"# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\ndef metrics(y_test, probs, y_pred_test):\n    fpr, tpr, threshold = roc_curve(y_test, probs)\n    roc_auc = roc_auc_score(y_test, probs)\n    plt.rcParams['figure.figsize'] = (8,8)\n    plt.figure()\n    plt.plot([0, 1], label='Baseline', linestyle='--')\n    plt.plot(fpr, tpr, label = 'Regression')\n    plt.title('Logistic Regression ROC AUC = %0.5f' % roc_auc)\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')\n    plt.legend(loc = 'lower right')\n    plt.show()\n\n    f1_test_n = f1_score(y_test, y_pred_test)\n    print('f1 score:=',round(f1_test_n,4))\n\n    precision = precision_score(y_test, y_pred_test)\n    recall = recall_score(y_test, y_pred_test)\n    print('precision: {:.4f}\\nrecall: {:.4f}'.format(precision, recall))\n\n    #calc_accuracy(y_test, y_pred_test)\n    #acc, TP, TN, P, N = calc_accuracy(y_test, y_pred_test)\n    #print('TP = {}\\nTN = {}\\nP = {}\\nN = {}\\nacc = {:.4f}'.format(TP, TN, P, N, acc))\n\n    conf_mat = confusion_matrix(y_test, y_pred_test)\n    print('Confusion matrix:\\n{}'.format(conf_mat))\n  #  disp = ConfusionMatrixDisplay(confusion_matrix=conf_mat,display_labels=model.classes_)\n  #  disp.plot()","7e0122e0":"df_test.info()","3e7a9b4f":"df_train.head(10)","aef96b78":"df_train.default.value_counts()","5826fdf3":"#pip install https:\/\/github.com\/pandas-profiling\/pandas-profiling\/archive\/master.zip","ca007fa4":"# \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c train \u0438 test \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c train\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c test\ndf_test['default'] = 0 # # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u0430, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndf_clients = df_test.append(df_train, sort=False).reset_index(drop=True)","d1dce844":"df_clients.default.value_counts()","b0cf4c02":"df_clients.info()","13bb7c0b":"df_clients.describe()","67901b57":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\n#\u0443\u0431\u0435\u0440\u0443 \u043f\u043e\u043a\u0430, \u0447\u0442\u043e\u0431 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u043d\u0435 \u0435\u043b\n#fig, ax = plt.subplots(figsize=(8,8))\n#sns_heatmap = sns.heatmap(df_clients.isnull(), cbar=False)","67bf678f":"#import pandas_profiling\n#pandas_profiling.ProfileReport(df)\n#pip install pandas-profiling[pandas_profiling-3.0.0-py2.py3-none-any]","e78d80b0":"#pip install https:\/\/github.com\/pandas-profiling\/pandas-profiling\/archive\/master.zip","ec201948":"#ERROR: Failed building wheel for bottleneck\n#ERROR: Could not build wheels for bottleneck which use PEP 517 and cannot be installed directly\n#WARNING: You are using pip version 20.1.1; however, version 21.2.1 is available.\n#You should consider upgrading via the 'c:\\users\\valer\\appdata\\local\\programs\\python\\python38-32\\python.exe -m pip install --upgrade pip' command.\n#'c:\\users\\valer\\appdata\\local\\programs\\python\\python38-32\\python.exe -m pip install --upgrade pip' command.","c96838bb":"df_clients.columns","795fbd3c":"#\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 default. \ndf_clients.default.hist()","3a22ace5":"df_clients.default.value_counts()","5cf4bfd7":"plt.pie(x=df_train['default'].value_counts(),\n       labels=list(df_train['default'].value_counts().index),\n       autopct='%.1f%%',\n       textprops={'fontsize': 10})\nplt.title('default')\nplt.show()","225bc47e":"df_train.info()","80a56f92":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430:\ndf_clients.isnull().sum()","2c4d7dd0":"#\u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nbin_cols=['sex','car','car_type','good_work','foreign_passport']\n\n#\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ncat_cols=['education','home_address','work_address','app_date','sna'] \n\n#\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nnum_cols=['age','decline_app_cnt','income','bki_request_cnt','score_bki','region_rating','first_time']","c2cf7d98":"df_clients_copy = df_clients.copy()","01be2a52":"df_clients_copy.dropna(inplace=True)","3c219906":"#\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0430\u043c\u043c\u0438-\u043f\u0435\u0440\u0435\u043c\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ndf_clients_copy = pd.get_dummies(df_clients_copy, columns=['sex','car_type','foreign_passport'], dummy_na=False)","cf4fa459":"train_df = df_clients_copy.drop(['client_id','home_address','work_address','education','car','app_date'], axis=1)\nX = train_df.drop(['default'], axis=1)\ny = train_df['default'].values # \u041d\u0430\u0448\u0430 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f","4f77db0b":"df_clients_copy.head()","6bf0d6cd":"#\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0438 \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u043d\u0430\u0448\u0443 \u043c\u043e\u0434\u0435\u043b\u044c:\nX_train, X_val, y_train, Y_val = train_test_split(X, y, test_size = 0.2, random_state=42) \nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)","6ad96c5c":"#\u0413\u043e\u0442\u043e\u0432\u043e! \u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438:\n\nY_predicted = model.predict(X_val)\nprobs = model.predict_proba(X_val)\nprobs = probs[:,1]\n\nprint('roc_auc_score:', roc_auc_score(Y_val, Y_predicted))\nprint(\"accuracy_score:\",accuracy_score(Y_val,Y_predicted)) #\u043c\u0435\u0442\u0440\u0438\u043a\u0430 accuracy - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043d\u0430 \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432\nprint(\"precision_score:\",precision_score(Y_val,Y_predicted)) #\u043c\u0435\u0442\u0440\u0438\u043a\u0430 precision \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nprint(\"recall_score:\",recall_score(Y_val,Y_predicted)) #\u043c\u0435\u0442\u0440\u0438\u043a\u0430 recall \u043f\u043e\u043b\u043d\u043e\u0442\u0430\nprint(\"f1_score:\",f1_score(Y_val,Y_predicted)) #\u043c\u0435\u0442\u0440\u0438\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0441\u0440\u0430\u0437\u0443 \u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c, \u0438 \u043f\u043e\u043b\u043d\u043e\u0442\u0443 F-\u043c\u0435\u0440\u0430","2f98e72e":"metrics(Y_val, probs, Y_predicted)","d237be10":"log_loss(Y_val,Y_predicted)","87341559":"#num_cols \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 -> num_cols=['age','decline_app_cnt','income','bki_request_cnt']","e935afac":"imp_num = pd.Series(f_classif(df_clients[num_cols], df_clients['default'])[0], index = num_cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","3975fc2b":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:","cbec8977":"for i in num_cols:\n    plt.figure()\n    sns.distplot(df_clients[i][df_clients[i] > 0].dropna(), kde = False, rug=False)\n    plt.title(i)\n    plt.show()","afc87a91":"#\u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c \u0441\u0442\u0430\u043b\u043e \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438\u043c\u0435\u044e\u0442 \u0442\u044f\u0436\u0451\u043b\u044b\u0439 \u043f\u0440\u0430\u0432\u044b\u0439 \u0445\u0432\u043e\u0441\u0442. \n#\u041f\u0440\u043e\u0439\u0434\u0435\u043c\u0441\u044f \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e","03e25ff8":"func_(df_clients,'age',10)","b50326ec":"func_quantile(df_clients,'age')","1e0d966c":"\nsns.boxplot(x= 'age', data = df_clients)","625ac476":"#\u0443\u0434\u043e\u0431\u043d\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0442\u044c \u043c\u0435\u0434\u0438\u0430\u043d\u044b\nsns.boxplot(x=df_clients['age'], medianprops={'color':'red'})","47631e3e":"df_clients.groupby('default')['age'].hist()","fc7190d1":"df_clients.groupby(by = ['default'])['age'].mean().plot(kind = 'bar', grid= True)","35116f48":"df_clients.pivot_table(values = ['age'], \n               index = 'default', \n               aggfunc = 'mean').plot(kind = 'bar')","2222e21b":"df_clients.groupby(by = ['default'])['age'].median()","e54a6fc4":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e\ndf_clients.loc[:,'default'].astype('float64').corr(df_clients.loc[:,'age']).astype('float64')","bcf63c6b":"def func(x):\n    if x > 30 and x < 48:\n        return 1\n    else: return 0     ","52a5522f":"df_clients['age_group'] = df_clients['age'].apply(func)","3f1a75a1":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e\ndf_clients.loc[:,'default'].astype('float64').corr(df_clients.loc[:,'age_group']).astype('float64')","fcca8154":"#\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441\u0442\u0430\u043b\u0430 \u0435\u0449\u0435 \u043c\u0435\u043d\u044c\u0448\u0435. \u0423\u0434\u0430\u043b\u0438\u043c 'age_group'\ndf_clients = df_clients.drop(['age_group'], axis=1)","d8c9363d":"# \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\na_features = df_clients[['age']].values\nnorm_features = (a_features - a_features.mean(axis=0)) \/ a_features.std(axis=0)\ndf_clients.loc[:, ['age']] = norm_features","5353ea77":"#\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\nplt.figure()\nsns.distplot(df_clients['age'], kde = False, rug=False)\nplt.title('age')\nplt.show()","b25983c7":"#decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a","227f8a76":"func_(df_clients,'decline_app_cnt',10)","d25de1e6":"df_clients.pivot_table(values = ['decline_app_cnt'], \n               index = 'default', \n               aggfunc = 'mean').plot(kind = 'bar')","19e2da18":"df_clients.groupby('default')['decline_app_cnt'].mean()","a14b9a3f":"func_quantile(df_clients,'decline_app_cnt')","c3192ec0":"sns.boxplot(x= 'decline_app_cnt', data = df_clients)","5e628ea2":"filling_quantile(df_clients, 'decline_app_cnt', 0.25)","e6532a1b":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e\ndf_clients.loc[:,'default'].astype('float64').corr(df_clients.loc[:,'decline_app_cnt']).astype('float64')","27ff77ab":"# \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c\n#a_features = df_clients[['decline_app_cnt']].values\n#norm_features = (a_features - a_features.mean(axis=0)) \/ a_features.std(axis=0)\n#df_clients.loc[:, ['decline_app_cnt']] = norm_features\n\n#\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\n#plt.figure()\n#sns.distplot(df_clients['decline_app_cnt'], kde = False, rug=False)\n#plt.title('decline_app_cnt')\n#plt.show()","126b8951":"#\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e MinMaxScaler\nscaler = MinMaxScaler()\nRanking_norm = scaler.fit_transform(df_clients.loc[:,['decline_app_cnt']]) \ndf_clients.loc[:, ['decline_app_cnt']] = Ranking_norm","3d644014":"#\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\nplt.figure()\nsns.distplot(df_clients['decline_app_cnt'], kde = False, rug=False)\nplt.title('decline_app_cnt')\nplt.show()","071b0888":"#\u0435\u0449\u0435 \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u0432\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u043d\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f\n#y_new = np.log(y + 1)\n# \u0443\u0431\u0440\u0430\u043b\u0430 \u043f\u043e\u043a\u0430 df_clients['decline_app_cnt'] = np.log(df_clients['decline_app_cnt']+1)","9375fb1b":"fig = plt.figure()\naxes = fig.add_axes([0, 0, 1, 1])\naxes.hist(df_clients['decline_app_cnt'], color = 'green')        \naxes.set_ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e')\naxes.set_xlabel('decline_app_cnt') ","18b8c3ba":"#income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0430","571934fc":"func_(df_clients,'income',10)","e77348a5":"df_clients.groupby('default')['income'].mean()","b9e09989":"func_quantile(df_clients,'income')","80142893":"#\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u043c \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u043c\nfilling_quantile(df_clients,'income', 0.75)","f9984003":"func_quantile(df_clients,'income')","88bda853":"#\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e MinMaxScaler\nscaler = MinMaxScaler()\nincome_norm = scaler.fit_transform(df_clients.loc[:,['income']]) \ndf_clients.loc[:, ['income']] = income_norm","71dd590f":"fig = plt.figure()\naxes = fig.add_axes([0, 0, 1, 1])\naxes.hist(df_clients['income'], color = 'green')        \naxes.set_ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e')\naxes.set_xlabel('income') ","a69b4941":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e\ndf_clients.loc[:,'default'].astype('float64').corr(df_clients.loc[:,'income']).astype('float64')","76f9695b":"#bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418","fdb2347b":"func_(df_clients,'bki_request_cnt',10)","b0678223":"df_clients.groupby(by = ['default'])['bki_request_cnt'].mean().plot(kind = 'bar', grid= True)","28adf9bd":"func_quantile(df_clients,'bki_request_cnt')","247067bd":"#\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u043c \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u043c\nfilling_quantile(df_clients,'bki_request_cnt', 0.75)","63435bec":"# \u0443\u0431\u0440\u0430\u043b\u0430 \u043f\u043e\u043a\u0430 df_clients['bki_request_cnt'] = df_clients['bki_request_cnt'].apply(lambda w: np.log(w + 1))\n#df_clients.bki_request_cnt.hist();","a412890d":"sns.heatmap(df_clients[num_cols].corr().abs(), vmin=0, vmax=1,annot=True, fmt=\".2f\",)","b5a7ea3c":"sns.set(font_scale=1)\nplt.subplots(figsize=(6, 6))\nsns.heatmap(df_clients[num_cols].corr(), square=True,\n              annot=True, fmt=\".2f\", linewidths=0.1 )","7c48b286":"df_clients.head()","ecf81cec":"#\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\n#cat_cols=['education','home_address','work_address','sna']","ee3ed1f3":"#app_date- \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438 \n#\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u0442\u0443 \ndf_clients['app_date'] = pd.to_datetime(df_clients['app_date'])\ndf_clients['app_date'] = df_clients['app_date'].apply(lambda x: x.month)\n\n#\u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u0443 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0432 num_cols\nnum_cols.append('app_date')","bb5ada9a":"df_clients.app_date.hist()","2df46a85":"display(df_clients['education'].unique())\ndf_clients['education'].value_counts()","61471d72":"df_clients.education.value_counts().plot.barh()","15c3c55c":"df_clients['education'].value_counts().index[0]","0f190cc5":"df_clients['education'] = df_clients['education'].fillna(df_clients['education'].value_counts().index[0])","a4749b59":"#\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u0442.\ndf_clients.isnull().sum()","fc6c1f93":"#\u0423\u0434\u0430\u043b\u0438\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\n#df_clients.dropna(inplace=True)","815c63af":"display(df_clients['home_address'].unique())\ndf_clients['home_address'].value_counts()","fae58636":"fig, ax = plt.subplots(figsize = (8, 4))\nsns.barplot(x= 'home_address', y = 'default', data = df_clients)","c44a9236":"df_clients.home_address.value_counts().plot.barh()","bbfbddd3":"df_clients.pivot_table(values = ['default'], \n               index = 'home_address', \n               aggfunc = 'mean').plot(kind = 'bar')","050b3370":"display(df_clients['work_address'].unique())\ndf_clients['work_address'].value_counts()","70ddc760":"df_clients.work_address.value_counts().plot.barh()","4055d0fa":"df_clients.pivot_table(values = ['default'], \n               index = 'work_address', \n               aggfunc = 'mean').plot(kind = 'bar')","a42b5bcf":"#sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430","ea19a7d2":"display(df_clients['sna'].unique())\ndf_clients['sna'].value_counts()","3f401c9e":"#\u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c OneHotEncoder\n\u0421ategor_perem = OneHotEncoder(sparse = False).fit_transform(df_clients[cat_cols].values)","db5298e6":"\u0421ategor_perem","c307049e":"#\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\ndf_X = pd.DataFrame(data=\u0421ategor_perem)\ndf_X.head()\n# 15 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 = education      - 5 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 ('SCH', 'GRD', 'UGR', 'PGR', 'ACD') \n#               + home_address - 3 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 ('1','2','3')\n#               + work_address - 3 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 ('1','2','3')\n#               + sna          - 4 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 ('1','2','3','4')","03b494f4":"#\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nfor i in range(19):\n    df_clients[i] =df_X[i]","f9f6dfa6":"#\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0438\u0441\u044c \u043b\u0438\nlen(df_clients.columns)","f81a8bd5":"label_encoder = LabelEncoder()\nfor column in bin_cols:\n    df_clients[column] = label_encoder.fit_transform(df_clients[column])","1512c375":"#\u0438 \u0435\u0449\u0435 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c education \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ndf_clients['education'] = label_encoder.fit_transform(df_clients['education'])","34496a9a":"df_clients","50dda5f9":"imp_cat = Series(mutual_info_classif(df_clients[bin_cols + cat_cols], df_clients['default'],\n                                     discrete_features =True), index = bin_cols + cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","c4487bb4":"#\u0443\u0431\u0435\u0440\u0443 \u043f\u043e\u043a\u0430, \u0447\u0442\u043e\u0431 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u043d\u0435 \u0435\u043b\nplt.rcParams['figure.figsize'] = (12,12)\nsns.heatmap(df_clients.drop(['sample',0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], axis=1).corr(),annot=True, fmt=\".2f\", linewidths=0.1, cbar=False)\n","6c51a0fa":"df_clients['car+car_type'] = df_clients['car']+df_clients['car_type']\n#\u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0443\ndf_clients['car+car_type'] = label_encoder.fit_transform(df_clients['car+car_type'])","ee0814ee":"#\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0432\u0443\u0445 \u0445\u043e\u0440\u043e\u0448\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\npf = PolynomialFeatures(2)\npoly_features = pf.fit_transform(df_clients[['income', 'foreign_passport']])\npoly_features","8ba8fede":"df = pd.DataFrame(poly_features,\n                  columns = ['poly1', 'poly2', 'poly3','poly4','poly5','poly6']                  )\ndisplay(df)","1dc6e0ca":"#\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u0430\u0448\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043d\u0430\u0448 \u0434\u0435\u0439\u0442\u0430\u0444\u0440\u0435\u0439\u043c\ndf_clients['poly1'] =df['poly1']\ndf_clients['poly2'] =df['poly2']\ndf_clients['poly3'] =df['poly3']\ndf_clients['poly4'] =df['poly4']\ndf_clients['poly5'] =df['poly5']\ndf_clients['poly6'] =df['poly6']","6d34f9e2":"for col in num_cols:\n    get_stat_dif(col)","485f08bb":"for col in cat_cols:\n    get_stat_dif(col)","cef1e34e":"for col in bin_cols:\n    get_stat_dif(col)","0f6f3d22":"df_preproc = df_clients.copy()","7430cbb2":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0447\u0430\u0441\u0442\u044c \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 (research) \u0438 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f (prediction)\nresearch = df_preproc.query('sample == 1').drop(['sample'], axis=1)\nprediction = df_preproc.query('sample == 0').drop(['sample'], axis=1)","b56d9598":"################################################################################\n#from sklearn.model_selection import GridSearchCV\n\n# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0442\u0438\u043f\u044b \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n#penalty = ['l1', 'l2']\n\n# \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n#C = np.logspace(0, 4, 10)\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n#hyperparameters = dict(C=C, penalty=penalty)\n################################################################################","6fcca433":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u0438\nX_research = research.drop(['default','client_id','income','app_date','work_address','car_type','car'],axis=1).values\ny_research = research.default\n\nX_train, X_val, y_train, y_val = train_test_split(X_research, y_research, test_size = 0.2, random_state=42)\n\n\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\nmodel = LogisticRegression(max_iter=1000)\nmodel.fit(X_train, y_train)\n\n################################################################################\n#\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0442\u043a\u0443 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c 5-\u043a\u0440\u0430\u0442\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n#clf = GridSearchCV(model, hyperparameters, cv=5, verbose=0)\n\n#best_model = clf.fit(X_train, y_train)\n\n# View best hyperparameters\n#print('\u041b\u0443\u0447\u0448\u0435\u0435 Penalty:', best_model.best_estimator_.get_params()['penalty'])\n#print('\u041b\u0443\u0447\u0448\u0435\u0435 C:', best_model.best_estimator_.get_params()['C'])\n################################################################################\n\n# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438\nval_predicted = model.predict(X_val)\nval_predicted_prob = model.predict_proba(X_val)\n\n#val_predicted_prob = val_predicted_prob[:,1]\n","57d756ae":"# # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0435\u0441\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0438\nprint('accuracy_score:', accuracy_score(y_val, val_predicted))\nprint('precision_score:', precision_score(y_val, val_predicted))\nprint('recall_score:', recall_score(y_val, val_predicted))\nprint('f1_score:', f1_score(y_val, val_predicted))\n\u0441f_mtx = confusion_matrix(y_val, val_predicted)\nprint()\nprint('confusion matrix:', '\\n', \u0441f_mtx)\ntn, fp, fn, tp = \u0441f_mtx.ravel()\nprint()\nprint('\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043e \u043d\u0435\u0432\u043e\u0437\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c, \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u043c \u043a\u0440\u0435\u0434\u0438\u0442: {} \\n\\\n \u0438\u043b\u0438 {}% \u043e\u0442 \u0432\u0441\u0435\u0445 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445 \\n'.format(fp, round((fp\/(fp+tn))*100, 2)))\nprint('\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c, \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u043d\u0435 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u043c \u043a\u0440\u0435\u0434\u0438\u0442: {} \\n\\\n\u0438\u043b\u0438 {}% \u043e\u0442 \u0432\u0441\u0435\u0445 \u043d\u0435 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\\n'.format(fn, \n                                        round((1-recall_score(y_val,\n                                                              val_predicted))*100, 2)))\nprint()\nprint('roc_auc_score:', roc_auc_score(y_val, val_predicted_prob[:, 1]))\nfpr, tpr, threshold = roc_curve(y_val, val_predicted_prob[:, 1])\nroc_auc = roc_auc_score(y_val, val_predicted_prob[:, 1])\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label='Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc='lower right')\nplt.show()","57946570":"#\u041c\u043e\u0436\u043d\u043e \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e.\n#metrics(y_val, val_predicted_prob[:, 1], val_predicted)","efa652dd":"model = LogisticRegression(class_weight = 'balanced',max_iter=1000)\nmodel.fit(X_train, y_train)\nval_predicted = model.predict(X_val)\nval_predicted_prob = model.predict_proba(X_val)","d99490af":"# \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0435\u0441\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0438\nprint('accuracy_score:', accuracy_score(y_val, val_predicted))\nprint('precision_score:', precision_score(y_val, val_predicted))\nprint('recall_score:', recall_score(y_val, val_predicted))\nprint('f1_score:', f1_score(y_val, val_predicted))\n\u0441f_mtx = confusion_matrix(y_val, val_predicted)\nprint()\nprint('confusion matrix:', '\\n', \u0441f_mtx)\ntn, fp, fn, tp = \u0441f_mtx.ravel()\nprint()\nprint('\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043e \u043d\u0435\u0432\u043e\u0437\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c, \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u043c \u043a\u0440\u0435\u0434\u0438\u0442: {} \\n\\\n \u0438\u043b\u0438 {}% \u043e\u0442 \u0432\u0441\u0435\u0445 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445 \\n'.format(fp, round((fp\/(fp+tn))*100, 2)))\nprint('\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c, \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u043d\u0435 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u043c \u043a\u0440\u0435\u0434\u0438\u0442: {} \\n\\\n\u0438\u043b\u0438 {}% \u043e\u0442 \u0432\u0441\u0435\u0445 \u043d\u0435 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\\n'.format(fn, \n                                        round((1-recall_score(y_val,\n                                                              val_predicted))*100, 2)))\nprint()\nprint('roc_auc_score:', roc_auc_score(y_val, val_predicted_prob[:, 1]))\nfpr, tpr, threshold = roc_curve(y_val, val_predicted_prob[:, 1])\nroc_auc = roc_auc_score(y_val, val_predicted_prob[:, 1])\nplt.figure(figsize=(7, 4))\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label='Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc='lower right')\nplt.show()","23f29da6":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 prediction\nX_prediction = prediction.drop(['default','client_id','income','app_date','work_address','car_type','car'],axis=1).values\nprediction_target = model.predict_proba(X_prediction)[:, 1]\nsubmission = pd.concat([prediction.client_id,pd.Series(prediction_target,name='default')],axis=1)\nsubmission.to_csv('submission.csv', index=False)\nsubmission.shape","cac6bedf":"submission.info()","84babe7a":"#\u0412 \u042e\u043f\u0438\u0442\u0435\u0440\u0435:\n#0.53364\n#0.67101\n#0.66968\n#0.73651\n#0.73673 - \u0441 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b. \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0438\u0437'income', 'foreign_passport'\n#0.73974 c 18 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\u0438 onehotencoding\n#0.73991 \u0431\u0435\u0437 income\n#0.74195 \u0431\u0435\u0437 app_date\n#0.7416\n#0.7417 -\u0443\u0431\u0440\u0430\u043b\u0430 \u043b\u0438\u0448\u043d\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438","bd506220":"#submission = pd.DataFrame({'client_id': test_client_id,\n#                              'default': y_pred_prob})\n#submission.to_csv('submission.csv', index=False)\n","0901a756":"- client_id\t- \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n- education\t- \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n- sex\t- \u043f\u043e\u043b \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0430\n- age\t- \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0430\n- car\t- \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- car_type\t- \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f-\u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n- decline_app_cnt -\t\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n- good_work\t- \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u00ab\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u00bb \u0440\u0430\u0431\u043e\u0442\u044b\n- bki_request_cnt -\t\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n- home_address -\t\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n- work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n- income -\t\u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0430\n- foreign_passport -\t\u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n- default -\t\u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u0430","62f65140":"## \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","5aa01f83":"\u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a","db2ff800":"### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 age","329d0368":"\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u043d\u0435 \u0434\u0430\u043b\u043e \u0441\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438. \u0423\u0431\u0440\u0430\u043b\u0430.","98bda8c9":"\u0427\u0442\u043e\u0431\u044b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u043b\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u0438\u0445 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0447\u0438\u0441\u043b\u0430...","e72ea3ae":"\u041c\u044b \u043f\u043e\u043c\u043d\u0438\u043c,\u0447\u0442\u043e \u0432 \u044d\u0442\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438.","d2d6e587":"# Data Preprocessing","1ca834af":"### \u0417\u0430\u0434\u0430\u0447\u0430: \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u0430 \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432","2aa2412f":"\u0412\u044b\u0432\u043e\u0434: \u0421\u0430\u043c\u044b\u0439 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438\u0437 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 - <b>score_bki<\/b>","fc24f748":"\u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e f_classif \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 sklearn. ","d9bdb922":"### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 sna","a9fc35df":"\u041f\u043e\u0447\u0435\u043c\u0443 \u043c\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043b\u0438 \u043c\u0435\u0442\u043e\u0434 \u0442\u043e\u043b\u044c\u043a\u043e \u043a \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c? \u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u043c\u0438\u043d\u0443\u0441\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 LabelEncoder() \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e, \u0447\u0442\u043e \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0440\u0430\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \n\n\u2192 \u0427\u0442\u043e \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0435\u0442, \u0435\u0441\u043b\u0438 \u0443 \u043d\u0430\u0441 \u043f\u043e\u044f\u0432\u044f\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c\u0438? LabelEncoder \u0431\u0443\u0434\u0435\u0442 \u0440\u0443\u0433\u0430\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043d\u0435 \u0437\u043d\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e. \n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0443 \u043d\u0430\u0441 \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u043b (\u043f\u043e\u043c\u0438\u043c\u043e \u0436\u0435\u043d\u0441\u043a\u043e\u0433\u043e \u0438 \u043c\u0443\u0436\u0441\u043a\u043e\u0433\u043e), \u043f\u0440\u0438\u0437\u043d\u0430\u043a sex \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u043e-\u0434\u0440\u0443\u0433\u043e\u043c\u0443.\n\n\u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f, \u043d\u0430\u0448\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u0442\u0440\u043e\u0433\u043e \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 (\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f) \u0438 \u0441\u044e\u0440\u043f\u0440\u0438\u0437\u043e\u0432 (\u043d\u043e\u0432\u044b\u0445 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439) \u0431\u044b\u0442\u044c \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e.","f291adef":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435","c7f863e7":"\u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e mutual_info_classif \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 sklearn. \u0414\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u043f\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043d\u0435\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0446\u0435\u043d\u043a\u0435 \u044d\u043d\u0442\u0440\u043e\u043f\u0438\u0438 \u0432 \u0433\u0440\u0443\u043f\u043f\u0430\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.","1c8415c3":"\u0423 \u043d\u0430\u0448\u0435\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u2014 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u0438\u043b\u044c\u043d\u044b\u0439 \u043f\u0435\u0440\u0435\u043f\u0430\u0434. \u041d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0447\u0430\u0441\u0442\u043e \u0432 \u0442\u0430\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u044e\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u0447\u0442\u043e\u0431\u044b \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043f\u0430\u0434\u044b \u0438 \u0441\u0433\u043b\u0430\u0434\u0438\u0442\u044c \u0445\u0432\u043e\u0441\u0442.","75243053":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c ROC-\u0430\u043d\u0430\u043b\u0438\u0437.\n\u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438\u043c\u0435\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e\u0440\u043e\u0433 \u043e\u0442\u0441\u0435\u0447\u0435\u043d\u0438\u044f. \u0418\u0437\u043c\u0435\u043d\u044f\u044f \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0442\u043e \u0438\u043b\u0438 \u0438\u043d\u043e\u0435 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 \u0434\u0432\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 \u2014 \u043a\u043b\u0430\u0441\u0441 \u0441 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0438\u0441\u0445\u043e\u0434\u0430\u043c\u0438 \u0438 \u043a\u043b\u0430\u0441\u0441 \u0441 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0438\u0441\u0445\u043e\u0434\u0430\u043c\u0438.","765f1bc9":"\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f.","2f545f46":"### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 education","80a18cfe":"### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 app_date","a3914d55":"### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 decline_app_cnt","69a96da8":"## \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445 bin_cols","8ac39928":"### \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u0430\u0438\u0432\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c","b1b51725":"\u0412 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0443 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430, \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u2014 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u0430.","3070eddc":"\u0412 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432, \u043d\u0435 \u0432\u0441\u0435 \u0438\u043c\u0435\u044e\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0417\u043d\u0430\u0447\u0438\u0442, \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.","3e5c0340":"\u0412 \u043e\u0441\u043d\u043e\u0432\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 \u043e\u0446\u0435\u043d\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043b\u0435\u0436\u0438\u0442 \u043e\u0434\u043d\u043e\u0444\u0430\u043a\u0442\u043e\u0440\u043d\u044b\u0439 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 (ANOVA). \u041e\u0441\u043d\u043e\u0432\u0443 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0431\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0434\u0432\u0443\u0445 \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u044b\u0445 t-\u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445 \u0432\u044b\u0431\u043e\u0440\u043e\u043a (2-sample t). \n\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0440\u044b \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 f-\u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438. \u0427\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0432\u044b\u0448\u0435, \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f, \u0438 \u0442\u0435\u043c \u0432\u0430\u0436\u043d\u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0439 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.","ae49b4d4":"\u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043c\u043b\u0430\u0434\u0448\u0435, \u043d\u043e \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e","3ebde938":"\u0421 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u043b\u0443\u0447\u0448\u0435 \u0438 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u0442\u043e\u0436\u0435. \u041e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u044d\u0442\u043e\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0434\u043b\u044f \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f.","6bb47356":"![image-2.png](attachment:image-2.png)","ec8f71da":"\u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u0438\u0439 \u0434\u043e\u0445\u043e\u0434","73329b19":"## \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445 cat_cols","ab033977":"\u041a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0435\u0437 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0443 \u0431\u0430\u043d\u043a\u0430 \u0431\u043e\u043b\u044c\u0448\u0435. \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f.","2d1b468d":"{\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u043b\u043e\u0441\u044c \u0442\u0430\u043a\ny_new = np.log(y + 1)\n\u0417\u043d\u0430\u0447\u0438\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u043a\u0438\u043c\ny = np.exp(y_new) - 1}","cd9b7bc1":"\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u043e\u0434\u0430 (FN = 1786). \u041f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e class_weight = 'balanced' \u0442\u0430\u043a \u043a\u0430\u043a \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f.","07bffed8":"### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 home_address","98066e2d":"### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 income","88319e5a":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0438 \u0441\u043c\u0435\u0449\u0435\u043d\u043e \u0432\u043f\u0440\u0430\u0432\u043e. \n\u041f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044e \u044d\u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.","d1a8f2f3":"\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441\u043b\u0430\u0431\u0430\u044f","68be2075":"![image-2.png](attachment:image-2.png)","3d4cdc8c":"\u0421\u0438\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443: \n- \u0440\u0430\u0431\u043e\u0447\u0438\u043c \u0438 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u043c \u0430\u0434\u0440\u0435\u0441\u0430\u043c\u0438 - (0.73). \u0423\u0434\u0430\u043b\u0438\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u0430\u0434\u0440\u0435\u0441, \u043e\u043d \u043c\u0435\u043d\u0435\u0435 \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.\n- car \u0438 car_type - (0.70) \n- client_id \u0438 app_date - (0.97) \u041d\u0430\u0432\u0435\u0440\u043d\u043e \u043d\u043e\u043c\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u043b\u0441\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u044d\u0442\u043e\u0439 \u0434\u0430\u0442\u044b. \u0423\u0431\u0435\u0440\u0435\u043c \u044d\u0442\u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0438. \u041e\u043d\u0438 \u043f\u043e\u0447\u0442\u0438 \u043d\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n- \u043c\u0435\u0436\u0434\u0443 \u0434\u043e\u0445\u043e\u0434\u043e\u043c \u0438 \u043d\u0430\u043b\u0438\u0447\u0435\u043c \u0437\u0430\u0433\u0440\u0430\u043d.\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 - (0.28)\n- \u043c\u0435\u0436\u0434\u0443 sna \u0438 first_time - (-0.53)","189fa440":"## \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445 num_cols","246cf1fd":"# \u041f\u0440\u043e\u0435\u043a\u0442 \u21164. RDS. \u041a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433.","9309a977":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435:","c4a84bc6":"<b>\u0417\u041d\u0410\u0427\u0418\u041c\u041e\u0421\u0422\u042c \u041a\u0410\u0422\u0415\u0413\u041e\u0420\u0418\u0410\u041b\u042c\u041d\u042b\u0425 \u0418 \u0411\u0418\u041d\u0410\u0420\u041d\u042b\u0425 \u041f\u0420\u0418\u0417\u041d\u0410\u041a\u041e\u0412<\/b>","a8acd49c":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c LabelEncoder \u043a\u043e \u0432\u0441\u0435\u043c\u0443 \u043d\u0430\u0431\u043e\u0440\u0443 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.","f3820a4f":"### \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438","c8ea544c":"\u041a\u0430\u043a \u043c\u044b \u0432\u0438\u0434\u0438\u043c, \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u044c \u043f\u0430\u0440 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e \u041f\u0438\u0440\u0441\u043e\u043d\u0443 \u0441\u043b\u0430\u0431\u0430\u044f. \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 -0.11 \u0438 0.11. \u042d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0437\u0434\u043e\u0440\u043e\u0432\u043e \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.","f661f2ae":"<b>C\u0430\u043c\u044b\u0439 \u0432\u0430\u0436\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 - sna<\/b>","14264408":"### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 bki_request_cnt","ebf8c947":"### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 work_address","1db6819d":"![image.png](attachment:image.png)","d8258503":"\u0421\u0430\u043c\u044b\u0439 \u0447\u0430\u0441\u0442\u043e \u0432\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0439\u0441\u044f \u0432\u0430\u0440\u0438\u0430\u043d\u0442 - \u044d\u0442\u043e SCH. \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438"}}