{"cell_type":{"dce1cb23":"code","81c80379":"code","54d1ef32":"code","f33c9885":"code","25fda29b":"code","043bfe1f":"code","6212863d":"code","19b90398":"code","e1ece44f":"markdown","0cc25b60":"markdown"},"source":{"dce1cb23":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime as dt\nimport math\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","81c80379":"app_df = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')\napp_df.head()","54d1ef32":"# Check for NaN values in the 'Last Updated Column'\napp_df['Last Updated'].isnull().sum()","f33c9885":"# The 'Last Updated' column has a perfect format of the time : \"Month Date, Year\"\n\n'''\nThis is a function to check if the format is same with althrough the column. If not, drop the row with urregular format\n'''\ndef checkformat(key,val):\n    try:\n        # strptime(\"June 4, 2018\",\"%B %d, %Y\") checks for the format and converts to datetime object\n        return (dt.now()- dt.strptime(val,\"%B %d, %Y\")).days\n    except:\n        print(\"Found a bad format at index:{}. Found value:{}\".format(key,val))\n        app_df.drop(index=key,inplace=True)         # Drop the row with bad format\n        app_df.reset_index(drop=True,inplace=True)\n\n# Loop over the 'Last Updated' column to check for common format\n\nfor key,val in enumerate(app_df['Last Updated']):\n    checkformat(key,val)\n","25fda29b":"'''\nFunction to convert the values in the 'Last Updated' column into datetime object \nand compare with the current date to get the difference in time in DAYS \n'''\nmy_list=[]\ndef compare_time(key,val):\n    try:\n        return (dt.now()- dt.strptime(val,\"%B %d, %Y\")).days\n    except:\n        print(\"Value Error\")\n\nfor key,val in enumerate(app_df['Last Updated']):\n    my_list.append(compare_time(key,val))\n\n# Append a column called 'Diff_Time' that gives the data about how many days it has been since last update\napp_df['Updated X days ago'] = my_list\n","043bfe1f":"# Quick check on the newly appended column 'Updated X days ago'\napp_df.head()","6212863d":"# Sort the values in the \"Updated X days ago\" column in the descending order and get the first row\n\napp_df.sort_values(by='Updated X days ago',axis=0,ascending=False,inplace=True)\napp_df.head() # After Sorting","19b90398":"print(\"App that was updated long back\",app_df.iloc[0]['App'])\nprint(\"App that was recently updated:\",app_df.iloc[-1]['App'])","e1ece44f":"> App which was updated long back: **FML F*ck my life + widget**\n\n> **BONUS**:\n> App which was recently updated : **Video Downloader For FB: Save FB Videos 2018**","0cc25b60":"> And finally we're one step away to get our answer i.e, **The App that was updated long back**"}}