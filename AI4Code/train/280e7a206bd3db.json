{"cell_type":{"8eaa004b":"code","f3be0d74":"code","605e9dcd":"code","8993067e":"code","5e457d59":"code","4ff7fa11":"code","745a9495":"code","ded2a3c1":"code","d68d86d3":"code","a2c5a1c7":"code","31300b36":"code","2ddfebd5":"code","73e35183":"code","70d00c1e":"code","63250d4b":"code","22b5d446":"code","d564e031":"code","f8b35b1e":"markdown","d7f3a491":"markdown","708e169b":"markdown","6bb6a957":"markdown","81ecd120":"markdown"},"source":{"8eaa004b":"import numpy as np\nimport pandas as pd\nimport os\n\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly_express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\n# setting default template to plotly_white for all visualizations\npio.templates.default = \"plotly_white\"\n%matplotlib inline\nimport gc\n\n\nfrom colorama import Fore, Back, Style\ny_ = Fore.YELLOW\nr_ = Fore.RED\ng_ = Fore.GREEN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA\nc_ = Fore.CYAN\nres = Style.RESET_ALL\n\nimport warnings\nwarnings.filterwarnings('ignore')\n#\/kaggle\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/sample_submission.csv\n#\/kaggle\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_colwidth', None)\n!pip install python-gdcm\n","f3be0d74":"all_files = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        all_files.append(os.path.join(dirname, filename))\n        \nlbl_df = pd.read_csv('\/kaggle\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv', index_col=None)\ntrain_files = [file for file in all_files if 'train' in file and 'train_labels.csv' not in file]\n\nimport re\ntrain_cases = []\nfor file in train_files:\n    train_cases.append(re.findall(r\"\\D(\\d{5})\\D\", file)[0])\ntrain_cases=list(set(train_cases))\ntrain_cases={ int(num) : num for num in train_cases } ","605e9dcd":"def calculat_num_imgs(case_id, img_type='Total'):\n    if img_type == 'Total':\n        return len([file for file in train_files if train_cases[case_id] in file])\n    else:\n        return len([file for file in train_files if train_cases[case_id] in file and '\/' + img_type + '\/' in file])\n    \nfor index, row in lbl_df.iterrows():\n    lbl_df.at[index, 'total'] = calculat_num_imgs(row['BraTS21ID'])\n    lbl_df.at[index, 'FLAIR'] = calculat_num_imgs(row['BraTS21ID'],'FLAIR')\n    lbl_df.at[index, 'T1w'] = calculat_num_imgs(row['BraTS21ID'],'T1w')\n    lbl_df.at[index, 'T1wCE'] = calculat_num_imgs(row['BraTS21ID'],'T1wCE')\n    lbl_df.at[index, 'T2w'] = calculat_num_imgs(row['BraTS21ID'],'T2w')\n    ","8993067e":"lbl_df['total'] = lbl_df['total'].astype(int)\nlbl_df['FLAIR'] = lbl_df['FLAIR'].astype(int)\nlbl_df['T1w'] = lbl_df['T1w'].astype(int)\nlbl_df['T1wCE'] = lbl_df['T1wCE'].astype(int)\nlbl_df['T2w'] = lbl_df['T2w'].astype(int)\nlbl_df","5e457d59":"colors = {'0' : '#DCD427',\n'1' : '#0092CC'\n         }\ncount_df = lbl_df.groupby(['MGMT_value'])['BraTS21ID'].count().reset_index()\ncount_df.rename(columns={'BraTS21ID':'count'},inplace=True)\ncount_df['color'] = count_df['MGMT_value'].astype(str).apply(lambda x: colors[x])\ncount_df['MGMT_value'] = count_df['MGMT_value'].astype(str)\ncount_df","4ff7fa11":"print(f\"{y_}Total cases in training data  : {lbl_df.shape[0]}{res}\\n{g_}Total images in training data : {lbl_df['total'].sum()}{res}\")","745a9495":"colors1 = ['#FC6238', '#FFD872','#F2D4CC','#E77577','#0065A2','#74737A']\ncolors2 = ['#3E7DCC', '#8F9CB3','#00C8C8','#F9D84A','#8CC0FF','#4D525A']\ncolors3 = ['#B29476', '#E3D6C9','#1F5C70','#FBA01D','#FCBC49','#393B45']\nsns.palplot(sns.color_palette(colors1),size=0.9)\nsns.palplot(sns.color_palette(colors2),size=0.9)\nsns.palplot(sns.color_palette(colors3),size=0.9)","ded2a3c1":"def plot_mgmt():\n    pio.templates.default = \"plotly_dark\"\n    fig = px.bar(count_df, x='MGMT_value', y='count',\n           hover_data=['MGMT_value', 'count'], color='MGMT_value',\n           #labels={column: label},\n           color_discrete_map=colors,\n           text='count')\n    fig.update_layout(xaxis={'categoryorder':'array', 'categoryarray': count_df['MGMT_value'],\n                           'title' : None, \n                           'showgrid':False},\n                    yaxis={'showgrid':False,\n                          'title' : 'Count'},\n                    showlegend=True,\n                   title = 'Cases in train data')\n    fig.update_traces(textfont_size=16)\n    fig.show()\n\nplot_mgmt()","d68d86d3":"img_count = { 'type' : ['FLAIR','T1w','T1wCE','T2w'], 'count' : [lbl_df['FLAIR'].sum(),lbl_df['T1w'].sum(),lbl_df['T1wCE'].sum(), lbl_df['T2w'].sum()]}\nimg_count_df = pd.DataFrame.from_dict(img_count)\ncolors1 = ['#FC6238', '#FFD872','#F2D4CC','#E77577','#0065A2','#74737A']\n\nimg_type_colors = {'FLAIR' : colors1[0],\n'T1w' : colors1[1],\n'T1wCE' : colors1[-1],\n'T2w' : colors1[-2]}\n\nimg_count_df['color'] = img_count_df['type'].apply(lambda x: img_type_colors[x])\nimg_count_df","a2c5a1c7":"def plot_image_type():\n    pio.templates.default = \"plotly_dark\"\n    fig = px.bar(img_count_df, x='type', y='count',\n             hover_data=['type', 'count'], color='type',\n             #labels={column: label},\n             color_discrete_map=img_type_colors,\n             text='count')\n    fig.update_layout(xaxis={'categoryorder':'array', 'categoryarray':img_count_df['type'],\n                             'title' : None, \n                             'showgrid':False},\n                      yaxis={'showgrid':False,\n                            'title' : 'Count'},\n                      showlegend=False,\n                     title = 'Types of MRI Sequences in training data')\n    fig.update_traces(textfont_size=16)\n    fig.show()\n\nplot_image_type()","31300b36":"fig = go.Figure()\nfig.add_trace(go.Box(y=lbl_df['FLAIR'], \n                         name='FLAIR', \n                         jitter=0.5,\n                         whiskerwidth=0.6,\n                         fillcolor=colors1[0],\n                         marker_size=5,\n                         line_width=1))\nfig.add_trace(go.Box(y=lbl_df['T1w'], \n                         name='T1w', \n                         jitter=0.5,\n                         whiskerwidth=0.6,\n                         fillcolor=colors1[1],\n                         marker_size=5,\n                         line_width=1))\nfig.add_trace(go.Box(y=lbl_df['T1wCE'], \n                         name='T1wCE', \n                         jitter=0.5,\n                         whiskerwidth=0.6,\n                         fillcolor=colors1[-1],\n                         marker_size=5,\n                         line_width=1))\nfig.add_trace(go.Box(y=lbl_df['T2w'], \n                         name='T2w', \n                         jitter=0.5,\n                         whiskerwidth=0.6,\n                         fillcolor=colors1[-2],\n                         marker_size=5,\n                         line_width=1))\n\nfig.update_layout(xaxis={'title' : None,'showgrid' :False},\n                  yaxis=dict(title='Number of images',showgrid=False,zeroline=False),\n                  showlegend=False,\n                 title = 'Number of images per case\/MRI Sequence - Interquartile range (IQR)')    \nfig.show()","2ddfebd5":"from ast import literal_eval\nimport matplotlib.patches as patches\nfrom pydicom import dcmread, read_file\nfrom pydicom.data import get_testdata_file\n\ndef display_sample(case_id = 0, mgmt_value = 1, cmap='gray', axis_off='on'):\n    fig1, ax1 = plt.subplots(1,4, figsize=(18, 5), facecolor='w', edgecolor='b')\n    fig1.subplots_adjust(hspace =.3, wspace=0.3)\n    axs = ax1.ravel()\n    for img_type, ax in zip(list(img_count_df['type']), axs):\n        sample_files = [file for file in train_files if train_cases[case_id] in file and img_type in file]\n        dicom = read_file(sample_files[0], stop_before_pixels=False)\n        ax.imshow(dicom.pixel_array, cmap=cmap)    \n        ax.set_title('{}'.format(img_type),fontsize = 16)    \n        ax.axis(axis_off)\n    plt.tight_layout(pad=3.0)\n    plt.subplots_adjust(top=0.81)\n    plt.suptitle('Samples Images, Case : {}, MGMT_value = {}'.format(train_cases[case_id],mgmt_value),fontsize = 20)\n    plt.show()\n","73e35183":"display_sample(case_id = 0,mgmt_value = 1, cmap='viridis')\ndisplay_sample(case_id = 2,mgmt_value = 1, cmap='viridis')\ndisplay_sample(case_id = 1005,mgmt_value = 1, cmap='viridis')","70d00c1e":"display_sample(case_id = 3,mgmt_value = 0, cmap='viridis')\ndisplay_sample(case_id = 17,mgmt_value = 0, cmap='viridis')\ndisplay_sample(case_id = 1009,mgmt_value = 0, cmap='viridis')","63250d4b":"lbl_df.loc[lbl_df['FLAIR'] == lbl_df['FLAIR'].min()]","22b5d446":"def display_all_images(case_id, rows = 10, cols = 3, mgmt_value = 0, mri_type='FLAIR'):\n    fig1, ax1 = plt.subplots(rows, cols, figsize=(5, 18), facecolor='w', edgecolor='b')\n    axs = ax1.ravel()\n    sample_files = [file for file in train_files if train_cases[case_id] in file and '\/' + mri_type +'\/' in file]\n    for file, ax in zip(sample_files, axs):\n        dicom = read_file(file, stop_before_pixels=False)\n        ax.imshow(dicom.pixel_array, cmap='viridis')    \n        ax.axis('off')\n    if mri_type != 'FLAIR':\n        ax1[9,2].set_axis_off()    \n    plt.tight_layout(pad=1)\n    plt.subplots_adjust(top=0.91)\n    plt.suptitle('Samples Images, Case : {}, {}, MGMT_value = {}'.format(train_cases[case_id], mri_type, mgmt_value),fontsize = 20)\n    plt.show()\n\ndisplay_all_images(818, 5, 3, 0, 'FLAIR')    \ndisplay_all_images(818, 10, 3, 0, 'T1w')    \ndisplay_all_images(818, 10, 3, 0, 'T1wCE')    \ndisplay_all_images(818, 10, 3, 0, 'T2w')    \n","d564e031":"from ast import literal_eval\nimport matplotlib.patches as patches\nfrom pydicom import dcmread, read_file\nfrom pydicom.data import get_testdata_file\n\ndef display_sample(case_id = 0, mgmt_value = 1, cmap='gray', axis_off='on'):\n    fig1, ax1 = plt.subplots(1,4, figsize=(18, 5), facecolor='w', edgecolor='b')\n    fig1.subplots_adjust(hspace =.3, wspace=0.3)\n    axs = ax1.ravel()\n    for img_type, ax in zip(list(img_count_df['type']), axs):\n        sample_files = [file for file in train_files if train_cases[0] in file and img_type in file]\n        dicom = read_file(sample_files[0], stop_before_pixels=False)\n        ax.imshow(dicom.pixel_array, cmap=cmap)    \n        ax.set_title('{}'.format(img_type),fontsize = 16)    \n        ax.axis('off')\n    plt.tight_layout(pad=3.0)\n    plt.subplots_adjust(top=0.81)\n    plt.suptitle('Case : {}, MGMT_value = {}'.format(train_cases[0],1),fontsize = 20)\n    plt.show()\n    \n    fig1, ax1 = plt.subplots(1,4, figsize=(18, 5), facecolor='w', edgecolor='b')\n    fig1.subplots_adjust(hspace =.3, wspace=0.3)\n    axs = ax1.ravel()\n    for img_type, ax in zip(list(img_count_df['type']), axs):\n        sample_files = [file for file in train_files if train_cases[3] in file and img_type in file]\n        dicom = read_file(sample_files[0], stop_before_pixels=False)\n        ax.imshow(dicom.pixel_array, cmap=cmap)    \n        ax.set_title('{}'.format(img_type),fontsize = 16)    \n        ax.axis('off')\n    plt.tight_layout(pad=3.0)\n    plt.subplots_adjust(top=0.81)\n    plt.suptitle('Case : {}, MGMT_value = {}'.format(train_cases[3],0),fontsize = 20)\n    plt.show()\n    \n    \ndisplay_sample(case_id = 3,mgmt_value = 0, cmap='viridis')\n\n\n#display_sample(case_id = 0,mgmt_value = 1, cmap='viridis')","f8b35b1e":"> Work in progress!","d7f3a491":"> Color Palettes ","708e169b":"<div align=\"center\">\n    <h2>RSNA-MICCAI Brain Tumor Radiogenomic Classification<\/h2>\n    <img src=\"https:\/\/user-images.githubusercontent.com\/48846576\/126234744-eda092a0-dcfa-4d9c-896b-aef858806298.png\"  width=\"700\" height=\"200\">\n<\/div>    \n\n### What is the competition?\n\nThis is a binary image classification problem where in we will predict the genetic subtype of glioblastoma using MRI (magnetic resonance imaging) scans to detect for the presence of MGMT promoter methylation.\n\nThere are MRI scans for 585 cases given and each case has been classified as MGMT_value 0 or 1. Each case has several images in the following MRI sequence types\n\n* Fluid Attenuated Inversion Recovery (FLAIR)\n* T1-weighted pre-contrast (T1w)\n* T1-weighted post-contrast (T1wCE)\n* T2-weighted (T2)\n\nThe MRI scan images are given in DICOM format. \n\n### What is DICOM?\n\nDICOM\u00ae \u2014 [Digital Imaging and Communications in Medicine](https:\/\/www.dicomstandard.org) \u2014 is the ISO recognized international standard for medical images and related information. It defines the formats for medical images that can be exchanged with the data and quality necessary for clinical use.\n\n> This notebook aims to do exploratory data analysis from a beginner standpoint!","6bb6a957":"## Display all images of a case\n> Let's take the case which has lesser number of images and display those","81ecd120":"## Display Sample Images\n> Each case has several images in of the four different MRI scan sequences. Let's look at the sample across each category."}}