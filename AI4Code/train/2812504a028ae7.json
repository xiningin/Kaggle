{"cell_type":{"f8628248":"code","b9f72abd":"code","10a615ff":"code","837f0f2b":"code","76336b9f":"code","296d5768":"code","2be38a34":"code","1bdff87c":"code","b00244c0":"code","42665645":"code","72b3d7e5":"code","10752bc5":"code","6151280c":"code","fe2e118a":"markdown","7e51bde4":"markdown","53dd5866":"markdown","ef366dfe":"markdown","841d54da":"markdown","07633dd2":"markdown"},"source":{"f8628248":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n#References: \n\n#@misc{NBeatsPRemy,\n#  author = {Philippe Remy},\n#  title = {N-BEATS: Neural basis expansion analysis for interpretable time series forecasting},\n#  year = {2020},\n#  publisher = {GitHub},\n#  journal = {GitHub repository},\n#  howpublished = {\\url{https:\/\/github.com\/philipperemy\/n-beats}},\n#}\n\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(action='ignore', message='Setting attributes')\n\n#!pip install nbeats-keras  # Install nbeats-kearas\nfrom nbeats_keras.model import NBeatsNet as NBeatsKeras\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b9f72abd":"df = pd.read_csv('..\/input\/sunspots\/Sunspots.csv')\ndata = pd.DataFrame()\ndata['value'] = df['Monthly Mean Total Sunspot Number']","10a615ff":"num_samples, time_steps, input_dim, output_dim = data.shape[0], 5, 1, 1\n\nbackend = NBeatsKeras(\n            backcast_length=time_steps, forecast_length=output_dim,\n            stack_types=(NBeatsKeras.GENERIC_BLOCK, NBeatsKeras.GENERIC_BLOCK),\n            nb_blocks_per_stack=2, thetas_dim=(4, 4), share_weights_in_stack=True,\n            hidden_layer_units=64\n            )\nbackend.compile(loss='mae', optimizer='adam')","837f0f2b":"# Definition of the data. The problem to solve is to find f such as | f(x) - y | -> 0.\n        # where f = np.mean.\n#x = np.random.uniform(size=(num_samples, time_steps, input_dim))\n#y = np.mean(x, axis=1, keepdims=True)\n\nx = data.values.reshape(num_samples\/\/5, time_steps, input_dim)\ny = np.mean(x, axis=1, keepdims=True)\n\n# Split data into training and testing datasets.\nc = num_samples \/\/ 10\nx_train, y_train, x_test, y_test = x[c:], y[c:], x[:c], y[:c]\ntest_size = len(x_test)","76336b9f":"# Train the model.\nprint('Training...')\nbackend.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=20, batch_size=128)","296d5768":"# Save the model for later.\nbackend.save('n_beats_model.h5')","2be38a34":"# Predict on the testing set (forecast).\npredictions_forecast = backend.predict(x_test)\nnp.testing.assert_equal(predictions_forecast.shape, (test_size, backend.forecast_length, output_dim))","1bdff87c":"plt.plot(predictions_forecast.reshape(326))\nplt.plot(y_test.reshape(326))","b00244c0":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\n\nprint(mean_absolute_error(predictions_forecast.reshape(326),y_test.reshape(326)))\nprint(mean_squared_error(predictions_forecast.reshape(326),y_test.reshape(326)))","42665645":" # Predict on the testing set (backcast).\npredictions_backcast = backend.predict(x_test, return_backcast=True)\nnp.testing.assert_equal(predictions_backcast.shape, (test_size, backend.backcast_length, output_dim))","72b3d7e5":"plt.plot(predictions_backcast.reshape(1630))\nplt.plot(y_train.reshape(327))\nplt.plot(data['value'].values)","10752bc5":"# Load the model.\nmodel_2 = NBeatsKeras.load('n_beats_model.h5')","6151280c":"np.testing.assert_almost_equal(predictions_forecast, model_2.predict(x_test))","fe2e118a":"## Find MAP and MSE","7e51bde4":"## Initialize NBeats\nnum_samples : is total values in dataframe: 3265\n\ntime_steps  : is a time lags \n\ninput_dim:  1 forecast at a time\n\noutput_dim: 1 forecast at a time","53dd5866":"## Import Sunspot data\ndata will hold series of Monthly Mean Total Sunspot Number","ef366dfe":"## Prepare data \nx is converted to 3 dimentional (total samples\/lags,lags,input_dimentions)\n\ny is a mean of 3 lags in x values\n\nEx: if data is of total lenght 3 as below and lag value is also 3\n\ndata =  [3,6,3]\n\nx = [3,6,3]\n\ny = 4\n\n","841d54da":"## Model Taining \n\nAll are default settings as in initial repo by\n\n@misc{NBeatsPRemy,\n  author = {Philippe Remy},\n  title = {N-BEATS: Neural basis expansion analysis for interpretable time series forecasting},\n  year = {2020},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https:\/\/github.com\/philipperemy\/n-beats}},\n}","07633dd2":"## Plot values for initial inspection"}}