{"cell_type":{"402e0eb6":"code","82f2b250":"code","ce33e99b":"code","07d6bda2":"code","13c62f55":"code","42ecf5c8":"code","d9403b93":"code","9250a415":"code","08ea0e32":"code","e670b82b":"code","e12bd174":"code","014cd028":"code","edd87704":"code","be814e50":"code","f5b44f49":"code","bd7b91df":"code","a5c24e39":"code","68e3668b":"code","ad4dc2fe":"code","d709241f":"code","0d9e3276":"code","9d0d15fa":"code","125e9c95":"code","bc0f2217":"markdown","f147db17":"markdown","d140bb93":"markdown","3a9d90ce":"markdown","421e089b":"markdown"},"source":{"402e0eb6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","82f2b250":"#importando as bibliotecas que sera utilizadas para a analise exploratoria do conjunto de dados.\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ce33e99b":"df = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')","07d6bda2":"#o dataset se encontra dessa forma\ndf.head()","13c62f55":"#selecionando colunas que ser\u00e3o utilizadas na analise\ndf.columns","42ecf5c8":"df = df[['country','date', 'daily_vaccinations', 'daily_vaccinations_per_million','vaccines' ]]","d9403b93":"#visualizando formato das variaveis no dataset\ndf.info()","9250a415":"#transformando a variavel date para o formato de datas, as outras variaveis n\u00e3o precisaram ser transformadas\ndf.date = pd.to_datetime(df.date)","08ea0e32":"#a coluna ['daily_vaccinations'] \u00e9 a que menos tem valores NaN, ent\u00e3o as linhas ser\u00e3o removidas de \n#acordo com essa coluna\nprint(df.info())\ndf.drop(df[df.daily_vaccinations.isna()==True].index, inplace=True)","e670b82b":"#tudo certo agora\ndf.info()","e12bd174":"# os dados ser\u00e3o agrupados pelo pais e ser\u00e1 feita uma soma do numero de vacinas at\u00e9 o momento\ndf_country = df.groupby(['country']).daily_vaccinations.agg(sum)\ndf_country = pd.DataFrame(df_country)\ndf_country.rename(columns={'daily_vaccinations':'total_vaccinations'}, inplace=True)\ndf_country = df_country.sort_values(by='total_vaccinations', ascending=False)\ndf_country","014cd028":"#plotagem com os vinte paises que mais vacinaram at\u00e9 o momento\nplt.figure(figsize=(14,8))\nplt.xticks(rotation=45)\nsns.barplot(data=df_country.head(20), x=df_country.index[:20], y='total_vaccinations')\nplt.title('Top 20 country vaccinations')","edd87704":"#plotagem com 20 paises que menos vacinaram at\u00e9 agora\n#vale lembrar que o baixo numero de vaccina\u00e7\u00f5es pode n\u00e3o ser por conta de ineficiencia\n#tambem existe o fator que de infec\u00e7\u00e3o que pode ter sido baixo nesse pais\nplt.figure(figsize=(14,8))\nplt.xticks(rotation=45)\nsns.barplot(data=df_country.tail(20), x=df_country.index[-20:], y='total_vaccinations')\nplt.title('Top 20 country with less vaccinations')","be814e50":"#aparentenmente na colombia n\u00e3o teve vaccina\u00e7\u00f5es de acordo com o grafico acima\n#numero de vacinados na colombia\ndf_country[df_country.index == 'Colombia']","f5b44f49":"#preparando subdatasets pra fazer uma compara\u00e7\u00e3o da evolu\u00e7\u00e3o da vaccina\u00e7\u00e3o, entre o brasil e alguns\n#dos paises que mais vacinaram\ndf_bra = df[df.country == 'Brazil']\ndf_in = df[df.country == 'India']\ndf_chi = df[df.country == 'China']\ndf_is = df[df.country == 'Israel']\ndf_en = df[df.country == 'England']\n","bd7b91df":"#plotagem da distribui\u00e7\u00e3o do numero de vacinas diarias por paises\nplt.figure(figsize=(14,8))\nsns.kdeplot(data=df_bra.daily_vaccinations, shade=True)\nsns.kdeplot(data=df_in.daily_vaccinations, shade=True)\nsns.kdeplot(data=df_chi.daily_vaccinations, shade=True)\nsns.kdeplot(data=df_is.daily_vaccinations, shade=True)\nsns.kdeplot(data=df_en.daily_vaccinations, shade=True)\nplt.legend(['Brazil', 'India','China','Israel','England'])\nplt.title('Distribution of the number of vaccines per day')","a5c24e39":"#prepara\u00e7\u00e3o para cria\u00e7\u00e3o da variavel que registra o crescimento relativo do numero de vacinas\ndf_bra['relative'] = df_bra.daily_vaccinations \/ df_bra.daily_vaccinations.iloc[0]\ndf_in['relative'] = df_in.daily_vaccinations \/ df_in.daily_vaccinations.iloc[0]\ndf_chi['relative'] = df_chi.daily_vaccinations \/ df_chi.daily_vaccinations.iloc[0]\ndf_is['relative'] = df_is.daily_vaccinations \/ df_is.daily_vaccinations.iloc[0]\ndf_en['relative'] = df_en.daily_vaccinations \/ df_en.daily_vaccinations.iloc[0]","68e3668b":"#concatenando os subdatasets criados, menos o brasil\ndf_comparative = pd.concat([df_in,df_chi,df_is,df_en])","ad4dc2fe":"#plotando o crescimento relativo de 4 paises em rela\u00e7\u00e3o ao brasil\nfigure, axes = plt.subplots(1, 2, figsize=(14,7), gridspec_kw={'wspace': 0.2})\nfigure.suptitle('Relative growth in the number of daily vaccines')\nsns.lineplot(data=df_comparative[['country','date','relative']],x='date',y='relative',hue=\"country\", ax=axes[0])\nplt.xticks(rotation=45)\nsns.lineplot(data=df_bra[['date','relative']],x='date', y='relative', ax=axes[1], color='purple')\nplt.legend(['Brasil'])\n","d709241f":"#criando dataset que mostra o nome das vacinas utilizadas sem duplicatas na coluna pais\ndf_vaccines = df[['country','vaccines']].copy()\ndf_vaccines.country = df_vaccines.country.drop_duplicates()\ndf_vaccines.dropna(inplace=True)","0d9e3276":"#mostrando a quantidade que cada vaccina \u00e9 utilizada\ndf_vaccines.vaccines.value_counts()","9d0d15fa":"#preparando dataframe para plotagem do numero de vacinas\ndf_vac = pd.DataFrame(df_vaccines.vaccines.value_counts())","125e9c95":"plt.figure(figsize=(6,8))\nplt.ylabel('Vaccines')\nplt.xlabel('Count')\nplt.title('Most used vaccines')\nsns.barplot(data=df_vac, y=df_vac.index, x='vaccines', orient='h')","bc0f2217":"# Relative growth in the number of daily vaccines","f147db17":"# Most used vaccines in countries","d140bb93":"# Data cleaning","3a9d90ce":"# Countries with more vaccinations so far","421e089b":"## Hello,\nThis notebook aims to serve as a project to consolidate all the knowledge that I have acquired so far about data science.\nI am still a beginner in this area, however, I see the need to put what I learned into practice in order to learn new things.\n\n\nComments explaining the lines of code will be made in Portuguese (pt-br) which is my native language."}}