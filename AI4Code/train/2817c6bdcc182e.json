{"cell_type":{"53f4f659":"code","52657b44":"code","6e841a2a":"code","734da564":"code","48757dc6":"code","5e2efb0a":"code","9bf43b33":"code","75903b87":"code","e3da3a16":"code","355d7992":"code","4d20d522":"code","f6699657":"code","edd746ff":"code","66f3646f":"code","5a9caaf9":"code","d7c62748":"code","efc34c4a":"code","501a6d01":"code","0cb50225":"code","fc15fd2e":"code","17420652":"code","a7e1e7da":"code","27770e0d":"code","006506d8":"code","edc1fa42":"code","d503b624":"code","f81c3e79":"code","42248a86":"code","6ad5becb":"code","a7f6aa73":"code","6d97af3a":"markdown","63b47675":"markdown","d49789b4":"markdown","c3b1632d":"markdown","db66d189":"markdown","028f305e":"markdown","7cd37f23":"markdown","6a93c128":"markdown","a897a718":"markdown","f69e7cc6":"markdown","ff614f86":"markdown"},"source":{"53f4f659":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom fbprophet import Prophet\nfrom statsmodels.tools.eval_measures import rmse\nfrom sklearn.metrics import mean_squared_error\nfrom fbprophet.diagnostics import cross_validation, performance_metrics\nfrom fbprophet.plot import plot_cross_validation_metric\n\nimport statsmodels.api as sm\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import adfuller\n\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom sklearn.metrics import mean_squared_error\nfrom statsmodels.tools.eval_measures import rmse\nfrom matplotlib.dates import AutoDateFormatter, AutoDateLocator\nfrom fbprophet.plot import plot_plotly\nimport plotly.offline as py\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfrom fbprophet import Prophet\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport bq_helper\nimport pandas as pd\nfrom bq_helper import BigQueryHelper\n# https:\/\/www.kaggle.com\/sohier\/introduction-to-the-bq-helper-package\nchicago_crime = bq_helper.BigQueryHelper(active_project=\"bigquery-public-data\",\n                                   dataset_name=\"chicago_crime\")","52657b44":"queryTheft =  \"\"\"SELECT count(*) as y, DATE(date) as ds\n from\n    bigquery-public-data.chicago_crime.crime\n where year > 2010\n and primary_type = 'THEFT'\n group by ds\n order by ds\n \n\n        \"\"\"\ntheft_day = chicago_crime.query_to_pandas_safe(queryTheft)\n\ntheft_day = theft_day[['ds', 'y']]\n\ntheft_day['ds'] = pd.to_datetime(theft_day['ds'])\n\ntheft_day.tail()","6e841a2a":"queryBattery =  \"\"\"SELECT count(*) as y, DATE(date) as ds\n from\n    bigquery-public-data.chicago_crime.crime\n where year > 2010\n and primary_type = 'BATTERY'\n group by ds\n order by ds\n \n\n        \"\"\"\nbattery_day = chicago_crime.query_to_pandas_safe(queryBattery)\n\nbattery_day = battery_day[['ds', 'y']]\nbattery_day['ds'] = pd.to_datetime(battery_day['ds'])\n\n\nbattery_day.tail()","734da564":"queryBattery =  \"\"\"SELECT count(*) as y, DATE(date) as ds\n from\n    bigquery-public-data.chicago_crime.crime\n where year > 2010\n and primary_type = 'BATTERY'\n group by ds\n order by ds\n \n\n        \"\"\"\nbattery_day = chicago_crime.query_to_pandas_safe(queryBattery)\n\nbattery_day = battery_day[['ds', 'y']]\nbattery_day['ds'] = pd.to_datetime(battery_day['ds'])\n\n\nbattery_day.tail()","48757dc6":"queryCriminalDamage =  \"\"\"SELECT count(*) as y, DATE(date) as ds\n from\n    bigquery-public-data.chicago_crime.crime\n where year > 2010\n and primary_type = 'CRIMINAL DAMAGE'\n group by ds\n order by ds\n \n\n        \"\"\"\ndamage_day = chicago_crime.query_to_pandas_safe(queryCriminalDamage)\n\ndamage_day = damage_day[['ds', 'y']]\n\ndamage_day.tail()","5e2efb0a":"queryNarcotics =  \"\"\"SELECT count(*) as y, DATE(date) as ds\n from\n    bigquery-public-data.chicago_crime.crime\n where year > 2010\n and primary_type = 'ASSAULT'\n group by ds\n order by ds\n \n\n        \"\"\"\nnarcotics_day = chicago_crime.query_to_pandas_safe(queryNarcotics)\n\nnarcotics_day = narcotics_day[['ds', 'y']]\nnarcotics_day['ds'] = pd.to_datetime(narcotics_day['ds'])\n\nnarcotics_day.tail()\n\n","9bf43b33":"queryAssault =  \"\"\"SELECT count(*) as y, DATE(date) as ds\n from\n    bigquery-public-data.chicago_crime.crime\n where year > 2010\n and primary_type = 'DECEPTIVE PRACTICE'\n group by ds\n order by ds\n \n\n        \"\"\"\nassault_day = chicago_crime.query_to_pandas_safe(queryAssault)\n\nassault_day = assault_day[['ds', 'y']]\nassault_day['ds'] = pd.to_datetime(assault_day['ds'])\n\nassault_day.tail()\n\n\n\n","75903b87":"#Theft\ntheft_train = theft_day.iloc[0:] #1000 treningsdager\n#teft_test = theft_day.iloc[3500:]\ntheft_m = Prophet(seasonality_mode='multiplicative', weekly_seasonality=True, yearly_seasonality=True)\ntheft_m.fit(theft_train)\ntheft_future = theft_m.make_future_dataframe(periods=12, freq='D')\ntheft_forecast = theft_m.predict(theft_future)\n#theft_forecast.plot(x='ds', y='yhat', label='Hva prophet har forecastet', legend=True,xlim=('2020-10-01', '2020-11-01'),figsize=(28, 14), color='b')\n","e3da3a16":"#Battery\nbattery_train = battery_day.iloc[0:] #1000 treningsdager\n#battery_test = battery_day.iloc[3500:]\nbattery_m = Prophet(seasonality_mode='multiplicative', weekly_seasonality=True, yearly_seasonality=True)\nbattery_m.fit(battery_train)\nbattery_future = battery_m.make_future_dataframe(periods=12, freq='D') \nbattery_forecast = battery_m.predict(battery_future)\n#battery_forecast.plot(x='ds', y='yhat', label='Hva prophet har forecastet', legend=True,xlim=('2020-10-01', '2020-11-01'),figsize=(28, 14), color='r')\n\n","355d7992":"#CRIMINAL DAMAGE\ncd_train = damage_day.iloc[0:] #1000 treningsdager\n#cd_test = damage_day.iloc[3500:]\ncd_m = Prophet(seasonality_mode='multiplicative', weekly_seasonality=True, yearly_seasonality=True)\ncd_m.fit(cd_train)\ncd_future = cd_m.make_future_dataframe(periods=12, freq='D') \ncd_forecast = cd_m.predict(cd_future)\n#cd_forecast.plot(x='ds', y='yhat', label='Hva prophet har forecastet', legend=True,xlim=('2020-10-01', '2020-11-01'),figsize=(28, 14), color='y')","4d20d522":"#NARCOTICS\nnarcotics_train = narcotics_day.iloc[0:] #1000 treningsdager\nnarcotics_test = narcotics_day.iloc[3500:]\nnarcotics_m = Prophet(seasonality_mode='multiplicative', weekly_seasonality=True, yearly_seasonality=True)\nnarcotics_m.fit(narcotics_train)\nnarcotics_future = narcotics_m.make_future_dataframe(periods=12, freq='D') \nnarcotics_forecast = narcotics_m.predict(narcotics_future)\n#narcotics_forecast.plot(x='ds', y='yhat', label='Hva prophet har forecastet',linestyle='dashed', legend=True,xlim=('2020-10-01', '2020-10-01'),figsize=(28, 14), color='g')\n\n","f6699657":"#ASSAULT\nassault_train = assault_day.iloc[0:] #1000 treningsdager\nassault_test = assault_day.iloc[3500:]\nassault_m = Prophet(seasonality_mode='multiplicative', weekly_seasonality=True, yearly_seasonality=True)\nassault_m.fit(assault_train)\nassault_future = assault_m.make_future_dataframe(periods=12, freq='D') \nassault_forecast = assault_m.predict(assault_future)\n\n","edd746ff":"assault_filtered = assault_forecast[assault_forecast['ds'] >= '2020-11-01']\nnarcotics_filtered = narcotics_forecast[narcotics_forecast['ds'] >= '2020-11-01']\ncd_filtered = cd_forecast[cd_forecast['ds'] >= '2020-11-01']\nbattery_filtered = battery_forecast[battery_forecast['ds'] >= '2020-11-01']\ntheft_filtered = theft_forecast[theft_forecast['ds'] >= '2020-11-01']\n\n\n\nfig = make_subplots(specs=[[{\"secondary_y\": False}]])\n\n#fig = fig.add_trace(go.Scatter(x=assault_filtered['ds'], y=assault_filtered['yhat_lower'],\n#                               mode='lines',\n#                               marker=dict(color=\"#BF7FBF\"),\n#                               line=dict(width=0),\n#                               name=''))\n#\n#fig = fig.add_trace(go.Scatter(x=assault_filtered['ds'], y=assault_filtered['yhat_upper'],\n#                               mode='lines',\n#                               marker=dict(color=\"#BF7FBF\"),\n#                               line=dict(width=0),\n#                               fillcolor='rgba(204,153,204, 0.1)',\n#                               fill='tonexty',\n#                               name='Deceptive Practice Forecast Bound'))\n#\n#fig = fig.add_trace(go.Scatter(x=assault_filtered['ds'], y=assault_filtered['yhat'],\n#                               mode='lines',\n#                               line=dict(color='#800080'),\n#                               fillcolor='rgba(204,153,204, 0.1)', \n#                               fill='tonexty',\n#                               name='Deceptive Practice Forecast'))\n#\n#\n##\n#fig = fig.add_trace(go.Scatter(x=narcotics_filtered['ds'], y=narcotics_filtered['yhat_lower'],\n#                               mode='lines',\n#                               marker=dict(color=\"#7FBF7F\"),\n#                               line=dict(width=0),\n#                               name=''))\n#\n#fig = fig.add_trace(go.Scatter(x=narcotics_filtered['ds'], y=narcotics_filtered['yhat_upper'],\n#                               mode='lines',\n#                               marker=dict(color=\"#7FBF7F\"),\n#                               line=dict(width=0),\n#                               fillcolor='rgba(153,204,153, 0.1)',\n#                               fill='tonexty',\n#                               name='Assault Forecast Bound'))\n#\n#fig = fig.add_trace(go.Scatter(x=narcotics_filtered['ds'], y=narcotics_filtered['yhat'],\n#                               mode='lines',\n#                               line=dict(color='#008000'),\n#                               fillcolor='rgba(153,204,153, 0.1)',\n#                               fill='tonexty',\n#                               name='Assault Forecast'))\n#\n\n#\nfig = fig.add_trace(go.Scatter(x=cd_filtered['ds'], y=cd_filtered['yhat_lower'],\n                               mode='lines',\n                               marker=dict(color=\"#E7AB7A\"),\n                               line=dict(width=0),\n                               name=''))\n\nfig = fig.add_trace(go.Scatter(x=cd_filtered['ds'], y=cd_filtered['yhat_upper'],\n                               mode='lines',\n                               marker=dict(color=\"#E7AB7A\"),\n                               line=dict(width=0),\n                               fillcolor='rgba(243,213,188, 0.3)',\n                               fill='tonexty',\n                               name='CRIMINAL DAMAGE BOUND'))\n\nfig = fig.add_trace(go.Scatter(x=cd_filtered['ds'], y=cd_filtered['yhat'],\n                               mode='lines',\n                               line=dict(color='#E7AB7A'),\n                               fillcolor='rgba(243,213,188, 0.3)',\n                               fill='tonexty',\n                               name='CRIMINAL DAMAGE'))\n\n#Battery\nfig = fig.add_trace(go.Scatter(x=battery_filtered['ds'], y=battery_filtered['yhat_lower'],\n                               mode='lines',\n                               marker=dict(color=\"#274950\"),\n                               line=dict(width=0),\n                               name=''))\n\nfig = fig.add_trace(go.Scatter(x=battery_filtered['ds'], y=battery_filtered['yhat_upper'],\n                               mode='lines',\n                               marker=dict(color=\"#274950\"),\n                               line=dict(width=0),\n                               fillcolor='rgba(190,200,202,0.3)',\n                               fill='tonexty',\n                               name='BATTERY BOUND'))\n\nfig = fig.add_trace(go.Scatter(x=battery_filtered['ds'], y=battery_filtered['yhat'],\n                               mode='lines',\n                               line=dict(color='#274950'),\n                               fillcolor='rgba(190,200,202,0.3)',\n                               fill='tonexty',\n                               name='BATTERY'))\n##274950 #E7AB7A\n\n##Theft\n#fig = fig.add_trace(go.Scatter(x=theft_filtered['ds'], y=theft_filtered['yhat_lower'],\n#                               mode='lines',\n#                               marker=dict(color=\"#6666FF\"),\n#                               line=dict(width=0),\n#                               name=''))\n#\n#fig = fig.add_trace(go.Scatter(x=theft_filtered['ds'], y=theft_filtered['yhat_upper'],\n#                               mode='lines',\n#                               marker=dict(color=\"#6666FF\"),\n#                               line=dict(width=0),\n#                               fillcolor='rgba(50,50,255, 0.1)',\n#                               fill='tonexty',\n#                               name='Theft Forecast Bound'))\n#\n#fig = fig.add_trace(go.Scatter(x=theft_filtered['ds'], y=theft_filtered['yhat'],\n#                               mode='lines',\n#                               line=dict(color='#0000ff'),\n#                               fillcolor='rgba(50,50,255, 0.1)',\n#                               fill='tonexty',\n#                               name='Theft Forecast'))\n\nfig.update_yaxes(title_text=\"Count\", range=[30, 165])\nfig.update_xaxes(title_text=\"Date\")\nfig.layout.plot_bgcolor = '#fff'\n\nfig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='#A6A6A6')\nfig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='#A6A6A6')\n\n\nfig.update_layout(height=1500, width=1900)\nfig.update_layout(\n    font=dict(\n        size=24,\n    )\n)\n\n\nfig.show()","66f3646f":"assaultFig = plot_plotly(battery_m,battery_forecast)\nassaultFig.update_yaxes(title_text=\"Crimes per day\", range=[60, 300])\nassaultFig.update_layout(height=1000, width=1300)\nassaultFig.show()","5a9caaf9":"ax = cd_forecast.plot(x='ds', y='yhat', label='Criminal Damage forecasting', legend=True,xlim=('2020-10-01', '2021-05-01'),figsize=(24, 16), color='y')\nax.set_ylim(10,150)\nax1 = assault_forecast.plot(x='ds', y='yhat', label='Deceptive practise forecasting', legend=True,xlim=('2020-10-01', '2021-05-01'),ax=ax,figsize=(24, 16), color='m')\nax2 = narcotics_forecast.plot(x='ds', y='yhat', label='Narcotics forecasting', legend=True,xlim=('2020-10-01', '2021-05-01'),ax=ax1,figsize=(24, 16), color='g')\nax3 = theft_forecast.plot(x='ds', y='yhat', label='Theft forecasting', legend=True,xlim=('2020-10-01', '2021-05-01'), ax=ax2, figsize=(24, 16), color='b')\nax4 = battery_forecast.plot(x='ds', y='yhat', label='Battery forecasting', legend=True,xlim=('2020-10-01', '2021-05-01'),ax=ax3, figsize=(24, 16), color='r')\nax4.grid(True, which='major', c='gray', ls='-', lw=1, alpha=0.2)\n\n\nplt.show()","d7c62748":"ax = cd_forecast.plot(x='ds', y='yhat', label='Criminal Damage forecasting', legend=True,xlim=('2020-11-01', '2020-11-15'),figsize=(18, 14), color='y')\nax.set_ylim(10,160)\n\nax1 = assault_forecast.plot(x='ds', y='yhat', label='Deceptive practise forecasting', legend=True,xlim=('2020-11-01', '2020-11-15'),ax=ax,figsize=(18, 14), color='m')\nax2 = narcotics_forecast.plot(x='ds', y='yhat', label='Narcotics forecasting', legend=True,xlim=('2020-11-01', '2020-11-15'),ax=ax1,figsize=(18, 14), color='g')\nax3 = theft_forecast.plot(x='ds', y='yhat', label='Theft forecasting', legend=True,xlim=('2020-11-01', '2020-11-15'), ax=ax2, figsize=(18, 14), color='b')\nax4 = battery_forecast.plot(x='ds', y='yhat', label='Battery forecasting', legend=True,xlim=('2020-11-01', '2020-11-15'),ax=ax3, figsize=(18, 14), color='r')\nax4.grid(True, which='both', c='gray', ls='-', lw=1, alpha=0.4)\n\nplt.show()","efc34c4a":"#Resultat uten ekstern variabel\ntrain = assault_day.iloc[0:3500] #1000 treningsdager\n#crime_per_day.plot(x='ds', y='y', label='Antall', xlim=('2001-01-01', '2020-10-10'))\ntest = assault_day.iloc[3500:]\nmNew = Prophet(seasonality_mode='multiplicative', weekly_seasonality=True, yearly_seasonality=True)\nmNew.fit(train)\n","501a6d01":"future = mNew.make_future_dataframe(periods=24, freq='MS') #Forecaster 92 dager \"fram\" i tid\nforecast = mNew.predict(future)","0cb50225":"nyFig = plot_plotly(mNew,forecast)\nnyFig.show()","fc15fd2e":"queryBattery2 =  \"\"\"SELECT count(*) as y, DATE(date) as ds\n from\n    bigquery-public-data.chicago_crime.crime\n where year > 2010\n and primary_type = 'BATTERY'\n group by ds\n order by ds\n \n\n        \"\"\"\nbattery_day2 = chicago_crime.query_to_pandas_safe(queryBattery2)\n\nbattery_day2 = battery_day2[['ds', 'y']]\nbattery_day2['ds'] = pd.to_datetime(battery_day2['ds'])\n","17420652":"len(battery_train)","a7e1e7da":"### Battery\nbattery_train2 = battery_day2.iloc[:3588] #1000 treningsdager\nbattery_test2 = battery_day2.iloc[3589:3596]\nbattery_m2 = Prophet(seasonality_mode='multiplicative')\nbattery_m2.fit(battery_train2)\nbattery_future2 = battery_m2.make_future_dataframe(periods=8, freq='D') #Forecaster 365 dager \"fram\" i tid\nbattery_forecast2 = battery_m2.predict(battery_future2)","27770e0d":"\nforecast1_filtered = battery_forecast2[battery_forecast2['ds'] >= '2020-10-29']\n\nfig = make_subplots(specs=[[{\"secondary_y\": False}]])\n\nfig = fig.add_trace(go.Scatter(x=forecast1_filtered['ds'], y=forecast1_filtered['yhat_lower'],\n                               mode='lines',\n                               marker=dict(color=\"#FFB2B2\"),\n                               line=dict(width=0),\n                               name=''))\n\nfig = fig.add_trace(go.Scatter(x=forecast1_filtered['ds'], y=forecast1_filtered['yhat_upper'],\n                               mode='lines',\n                               marker=dict(color=\"#FFB2B2\"),\n                               line=dict(width=0),\n                               fillcolor='rgba(190,200,202,0.3)',\n                               fill='tonexty',\n                               name='Battery Forecast Bound'))\n\nfig = fig.add_trace(go.Scatter(x=forecast1_filtered['ds'], y=forecast1_filtered['yhat'],\n                               mode='lines',\n                               line=dict(color='#274950'),\n                               fillcolor='rgba(190,200,202,0.3)',\n                               fill='tonexty',\n                               name='Battery Forecast'))\n\nfig = fig.add_trace(go.Scatter(x=battery_test2['ds'], y=battery_test2['y'], mode='lines+markers',\n                               line=dict(color='#ff0000', width=0.8),\n                               marker=dict(size=6),\n                               name='True Value'))\n\n\n\n\n\n                               \n                               \n                               \nfig.update_yaxes(title_text=\"Count\", range=[60, 170])\nfig.update_xaxes(title_text=\"Date\")\n\nfig.update_layout(\n    font=dict(\n        size=24,\n    )\n)\nfig.layout.plot_bgcolor = '#fff'\n\nfig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='#A6A6A6')\nfig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='#A6A6A6')\n\n\nfig.update_layout(height=1200)\n\n\nfig.show()\n\n\n\nfig.show()","006506d8":"queryTheft =  \"\"\"SELECT count(*) as y, DATE(date) as ds\n from\n    bigquery-public-data.chicago_crime.crime\n where year > 2010\n and primary_type = 'THEFT'\n\n group by ds\n order by ds\n \n\n        \"\"\"\ntheft_day = chicago_crime.query_to_pandas_safe(queryTheft)\n\ntheft_day = theft_day[['ds', 'y']]\n\ntheft_day['ds'] = pd.to_datetime(theft_day['ds'])\n\ntheft_day.tail()","edc1fa42":"queryBattery =  \"\"\"SELECT count(*) as y, DATE(date) as ds\n from\n    bigquery-public-data.chicago_crime.crime\n where year > 2010\n\n and primary_type = 'BATTERY'\n group by ds\n order by ds\n \n\n        \"\"\"\nbattery_day = chicago_crime.query_to_pandas_safe(queryBattery)\n\nbattery_day = battery_day[['ds', 'y']]\nbattery_day['ds'] = pd.to_datetime(battery_day['ds'])\n\n\nbattery_day.tail()","d503b624":"queryAssault =  \"\"\"SELECT count(*) as y, DATE(date) as ds\n from\n    bigquery-public-data.chicago_crime.crime\n where year > 2010\n and primary_type = 'DECEPTIVE PRACTICE'\n\n group by ds\n order by ds\n \n\n        \"\"\"\nassault_day = chicago_crime.query_to_pandas_safe(queryAssault)\n\nassault_day = assault_day[['ds', 'y']]\nassault_day['ds'] = pd.to_datetime(assault_day['ds'])\n\nassault_day.tail()\n\nqueryNarcotics =  \"\"\"SELECT count(*) as y, DATE(date) as ds\n from\n    bigquery-public-data.chicago_crime.crime\n where year > 2010\n and primary_type = 'ASSAULT'\n\n group by ds\n order by ds\n \n\n        \"\"\"\nnarcotics_day = chicago_crime.query_to_pandas_safe(queryNarcotics)\n\nnarcotics_day = narcotics_day[['ds', 'y']]\nnarcotics_day['ds'] = pd.to_datetime(narcotics_day['ds'])\n\nnarcotics_day.tail()\n\nqueryCriminalDamage =  \"\"\"SELECT count(*) as y, DATE(date) as ds\n from\n    bigquery-public-data.chicago_crime.crime\n where year > 2010\n and primary_type = 'CRIMINAL DAMAGE'\n\n group by ds\n order by ds\n \n\n        \"\"\"\ndamage_day = chicago_crime.query_to_pandas_safe(queryCriminalDamage)\n\ndamage_day = damage_day[['ds', 'y']]\n\ndamage_day.tail()\n\n","f81c3e79":"#Battery\nbattery_train = battery_day.iloc[0:] #1000 treningsdager\n#battery_test = battery_day.iloc[3500:]\nbattery_m = Prophet(seasonality_mode='multiplicative', weekly_seasonality=True, yearly_seasonality=True)\nbattery_m.fit(battery_train)\nbattery_future = battery_m.make_future_dataframe(periods=365, freq='D') #Forecaster 365 dager \"fram\" i tid\nbattery_forecast = battery_m.predict(battery_future)\n#battery_forecast.plot(x='ds', y='yhat', label='Hva prophet har forecastet', legend=True,xlim=('2020-10-01', '2021-08-01'),figsize=(28, 14), color='r')\n\n#Theft\ntheft_train = theft_day.iloc[0:] #1000 treningsdager\n#teft_test = theft_day.iloc[3500:]\ntheft_m = Prophet(seasonality_mode='multiplicative', weekly_seasonality=True, yearly_seasonality=True)\ntheft_m.fit(theft_train)\ntheft_future = theft_m.make_future_dataframe(periods=365, freq='D') #Forecaster 92 dager \"fram\" i tid\ntheft_forecast = theft_m.predict(theft_future)\n#theft_forecast.plot(x='ds', y='yhat', label='Hva prophet har forecastet', legend=True,xlim=('2020-10-01', '2021-08-01'),figsize=(28, 14), color='b')\n\n#ASSAULT\nassault_train = assault_day.iloc[0:] #1000 treningsdager\nassault_test = assault_day.iloc[3500:]\nassault_m = Prophet(seasonality_mode='multiplicative', weekly_seasonality=True, yearly_seasonality=True)\nassault_m.fit(assault_train)\nassault_future = assault_m.make_future_dataframe(periods=365, freq='D') #Forecaster 92 dager \"fram\" i tid\nassault_forecast = assault_m.predict(assault_future)\n#assault_forecast.plot(x='ds', y='yhat', label='Hva prophet har forecastet', legend=True,xlim=('2020-10-01', '2021-08-01'),figsize=(28, 14), color='y')\n\n#NARCOTICS\nnarcotics_train = narcotics_day.iloc[0:] #1000 treningsdager\nnarcotics_test = narcotics_day.iloc[3500:]\nnarcotics_m = Prophet(seasonality_mode='multiplicative', weekly_seasonality=True, yearly_seasonality=True)\nnarcotics_m.fit(narcotics_train)\nnarcotics_future = narcotics_m.make_future_dataframe(periods=365, freq='D') #Forecaster 92 dager \"fram\" i tid\nnarcotics_forecast = narcotics_m.predict(narcotics_future)\n#narcotics_forecast.plot(x='ds', y='yhat', label='Hva prophet har forecastet',linestyle='dashed', legend=True,xlim=('2020-10-01', '2021-08-01'),figsize=(28, 14), color='g')\n\n#CRIMINAL DAMAGE\ncd_train = damage_day.iloc[0:] #1000 treningsdager\n#cd_test = damage_day.iloc[3500:]\ncd_m = Prophet(seasonality_mode='multiplicative', weekly_seasonality=True, yearly_seasonality=True)\ncd_m.fit(cd_train)\ncd_future = cd_m.make_future_dataframe(periods=365, freq='D') #Forecaster 92 dager \"fram\" i tid\ncd_forecast = cd_m.predict(cd_future)\n#cd_forecast.plot(x='ds', y='yhat', label='Hva prophet har forecastet', legend=True,xlim=('2020-10-01', '2021-08-01'),figsize=(28, 14), color='y')","42248a86":"import matplotlib.pylab as pylab\nparams = {'legend.fontsize': '22',\n          'figure.figsize': (15, 5),\n         'axes.labelsize': '22',\n         'axes.titlesize':'22',\n         'xtick.labelsize':'22',\n         'ytick.labelsize':'22'}\npylab.rcParams.update(params)","6ad5becb":"\n\n\nax = cd_forecast.plot(x='ds', y='yhat', label='CRIMINAL DAMAGE', legend=True,xlim=('2020-10-01', '2021-05-01'),figsize=(20, 20), color='#E7AB7A')\nax.set_ylim(20,140)\nax1 = assault_forecast.plot(x='ds', y='yhat', label='DECEPTIVE PRACTICE', legend=True,xlim=('2020-10-01', '2021-05-01'),ax=ax,figsize=(24, 18), color='#E36656')\nax2 = narcotics_forecast.plot(x='ds', y='yhat', label='ASSAULT', legend=True,xlim=('2020-10-01', '2021-05-01'),ax=ax1,figsize=(24, 18), color='#F1906C')\nax3 = theft_forecast.plot(x='ds', y='yhat', label='THEFT', legend=True,xlim=('2020-10-01', '2021-05-01'), ax=ax2, figsize=(24, 18), color='#2D9991')\nax4 = battery_forecast.plot(x='ds', y='yhat', label='BATTERY', legend=True,xlim=('2020-10-01', '2021-05-01'),ax=ax3, figsize=(24, 18), color='#274950')  \nax4.grid(True, which='major', c='gray', ls='-', lw=1, alpha=0.2)\nax4.set(xlabel = 'Date',ylabel = 'Count')\n\n\n\n\nplt.show()","a7f6aa73":"ax = cd_forecast.plot(x='ds', y='yhat', label='CRIMINAL DAMAGE', legend=True,xlim=('2020-11-01', '2020-11-15'),figsize=(18, 18), color='#E7AB7A')\nax.set_ylim(20,140)\n\nax1 = assault_forecast.plot(x='ds', y='yhat', label='DECEPTIVE PRACTICE', legend=True,xlim=('2020-11-01', '2020-11-15'),ax=ax,figsize=(18, 18), color='#E36656')\nax2 = narcotics_forecast.plot(x='ds', y='yhat', label='ASSAULT', legend=True,xlim=('2020-11-01', '2020-11-15'),ax=ax1,figsize=(18, 18), color='#F1906C')\nax3 = theft_forecast.plot(x='ds', y='yhat', label='THEFT', legend=True,xlim=('2020-11-01', '2020-11-15'), ax=ax2, figsize=(18, 18), color='#2D9991')\nax4 = battery_forecast.plot(x='ds', y='yhat', label='BATTERY', legend=True,xlim=('2020-11-01', '2020-11-15'),ax=ax3, figsize=(18, 18), color='#274950')\nax4.grid(True, which='both', c='gray', ls='-', lw=1, alpha=0.4)\nax4.set_ylabel('Count', fontsize=22)\nax4.set_xlabel('Date', fontsize=22)\n\nplt.show()","6d97af3a":"# 1. # Short Term Forecast 2 weeks","63b47675":"# Query datasets for top five crimes","d49789b4":"# Short term forecasting","c3b1632d":"# Battery and Criminal Damage short term forecasting with confidence interval","db66d189":"# General prophet function usable on ALL datasets","028f305e":"Model forecast fitting top five crimes area","7cd37f23":"# Battery Forecast with uncertainty and real observations","6a93c128":"# Forecast top five crimes colorblind friendliness ","a897a718":"# Long term forecast","f69e7cc6":"# Battery Forecast with uncertainty bounds and true value","ff614f86":"# # # Long term forecast half year"}}