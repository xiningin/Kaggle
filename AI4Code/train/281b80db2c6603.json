{"cell_type":{"05320a5a":"code","8a598ee0":"code","2324576c":"code","86c420d0":"code","5d688d69":"code","9b477b3e":"code","fb0e1056":"code","9bb61813":"code","d6075b5b":"code","7725d5ed":"code","b694e819":"code","cb2c1ad4":"code","d5483e00":"code","d3063872":"code","d34ea65c":"code","7d99eb7d":"code","ee3e113c":"code","b017d5ef":"code","011691e3":"code","c55670f0":"code","108e50be":"code","de379c44":"code","50b100a9":"code","f2b7cc7b":"code","51079b40":"code","94516f5b":"code","fad1d77d":"code","6afaca69":"code","e88a7d07":"code","fae250f8":"code","2ed45cb8":"code","58cee39e":"code","a1cf220b":"code","bded32d0":"code","d27472fc":"code","099dfda2":"code","fb53b4d3":"code","f8fb597f":"code","be91a7af":"code","7d55c714":"code","85476db7":"code","0f46cf0f":"code","1218c260":"code","cc48af15":"markdown","12b23636":"markdown","7e666558":"markdown","972d16da":"markdown","cc99f749":"markdown","b54748ac":"markdown","58e3fa83":"markdown"},"source":{"05320a5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8a598ee0":"ins = pd.read_csv(\"..\/input\/insurance\/insurance.csv\")\nins","2324576c":"ins.info() # NO missing values","86c420d0":"ins.isnull().sum()# NO missing values","5d688d69":"ins.describe()","9b477b3e":"# EDA\nfrom pandas.plotting import scatter_matrix\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n#fig = plt.figure(figsize = (10,10))\nscatter_matrix(ins[[\"age\", \"bmi\",\"children\", \"charges\"]], figsize = (10,10))\nplt.xticks(rotation = 90)\nplt.show()","fb0e1056":"# Checking correlation coeff using a heatmap\nimport seaborn as sns\nins_corr = ins.corr()\nplt.figure(figsize = (8,6))\nsns.heatmap(ins_corr, annot = True, cmap = \"YlGnBu\")\nplt.title(\"Correlation Matrix\", fontsize = 14)\nplt.show()","9bb61813":"sns.barplot(data=ins, x = \"smoker\", y = \"charges\")\nplt.title(\"Charges by Smoker\", fontsize = 14)\nplt.show()","d6075b5b":"grp_by_smoker = ins.groupby(\"smoker\")\navg_charge_by_smoker = grp_by_smoker[\"charges\"].mean()\n(avg_charge_by_smoker[\"yes\"] - avg_charge_by_smoker[\"no\"])\/avg_charge_by_smoker[\"no\"]*100\n#The charges vary depending whether or not one is smoker.\n","7725d5ed":"avg_charge_by_smoker","b694e819":"grp_by_age = ins.groupby([pd.cut(ins[\"age\"], bins = 5), \"smoker\"])\nmean_charges_by_age = grp_by_age[\"charges\"].mean().reset_index()\nmean_charges_by_age.age = mean_charges_by_age.age.astype(\"str\")\nmean_charges_by_age.groupby(\"age\")[\"charges\"].sum()\n\nmean_charges_by_age[\"total_charges_by_age\"] = mean_charges_by_age.groupby(\"age\").transform(np.sum)[\"charges\"]\n","cb2c1ad4":"mean_charges_by_age_smoke = mean_charges_by_age.pivot(index = 'age', columns = \"smoker\", values = \"charges\").copy()\nmean_charges_by_age_smoke","d5483e00":"mean_charges_by_age_smoke[\"diff_smoker_non_smoker\"] = (mean_charges_by_age_smoke[\"yes\"] - mean_charges_by_age_smoke[\"no\"])\nmean_charges_by_age_smoke[\"pct_over_non_smoker\"] = (mean_charges_by_age_smoke[\"yes\"] - mean_charges_by_age_smoke[\"no\"])\/mean_charges_by_age_smoke[\"no\"]*100\nmean_charges_by_age_smoke","d3063872":"sns.barplot(x = 'age', y = 'charges', data = mean_charges_by_age, hue = \"smoker\")\nplt.title(\"Distribution Charges by Age group and Smoker\", fontsize = 14)\n","d34ea65c":"mean_charges_by_age.pivot(index = \"age\", columns = \"smoker\", values = \"charges\").plot()\nplt.title(\"Variation of charges by age and smoking habit\", fontsize = 14)\nplt.show()","7d99eb7d":"# Does region have an influence on the charges\nplt.bar(x = ins.region, height = ins.charges)","ee3e113c":"mean_charge_by_region = ins.groupby(\"region\").mean().reset_index()\nmean_charge_by_region","b017d5ef":"grp_by_region_smoker = ins.groupby([\"region\", \"smoker\"])\nmean_charge_by_region_smoker = grp_by_region_smoker[\"charges\"].mean().reset_index()\nmean_charge_by_region_smoker","011691e3":"sns.barplot(data = mean_charge_by_region_smoker, x = \"region\", y = \"charges\", hue = \"smoker\")\nplt.show()","c55670f0":"mean_charge_by_region_smoker.pivot(index = \"region\", columns = \"smoker\", values = \"charges\").plot()","108e50be":"mean_charge_by_region_smoker.groupby(\"region\").describe()","de379c44":"# PREDICTION\n# ins.groupby([\"sex\",])[\"charges\"].mean() # almost the same \n\ngrp_by_age_sex = ins.groupby([pd.cut(ins[\"age\"], bins = 5), \"sex\", \"smoker\"])\ngrp_by_age_sex[\"charges\"].mean().reset_index()","50b100a9":"ins.info()","f2b7cc7b":"num_attribs = [\"age\", \"bmi\", \"children\"]\ncat_attribs = [\"sex\",\"smoker\", \"region\"]\n\nfrom sklearn.preprocessing import OneHotEncoder\nohe = OneHotEncoder()\nencoded_cat = ohe.fit_transform(ins[cat_attribs])\nencoded_cat.toarray()\nohe.categories_","51079b40":"def OHE_attribs(df, cat_attribs):\n    ohe = OneHotEncoder()\n    encoded_cols = ohe.fit_transform(df[cat_attribs])\n    cat_columns = []\n    for i in range(len(cat_attribs)):\n        for j in ohe.categories_[i]:\n            cat_columns.append(cat_attribs[i]+'_'+str(j))\n    return cat_columns,encoded_cols.toarray()\n    \ncat_cols,encoded_cols  = OHE_attribs(ins,cat_attribs )\ncat_cols, encoded_cols","94516f5b":"ins_df = ins[num_attribs].merge(pd.DataFrame(encoded_cols, columns = cat_cols), how = \"left\", right_index = True, left_index = True)\nins_df","fad1d77d":"X = ins_df.values\ny = ins[\"charges\"].values\nX.shape, y.shape","6afaca69":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 1, test_size = 0.2)\n\nX_train.shape, y_train.shape, X_test.shape, y_test.shape","e88a7d07":"from sklearn.metrics import mean_squared_error\ndef accuracy_check(y_pred, y_test):\n    mse = mean_squared_error(y_pred, y_test)\n    return round(np.sqrt(mse),2)","fae250f8":"# LInear_Regression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nlin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)\ny_pred_train = lin_reg.predict(X_train)\ntraining_acc = accuracy_check(y_pred_train, y_train)\ntraining_acc","2ed45cb8":"y_pred_test = lin_reg.predict(X_test)\ntest_acc = accuracy_check(y_pred_test, y_test)\ntest_acc","58cee39e":"# Cross Validation using Linear Regression\nfrom sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(lin_reg,X_train, y_train, scoring = \"neg_mean_squared_error\", cv = 10)\nlin_reg_score = np.sqrt(-scores)\n\ndef display_scores(scores):\n    print(\"Scores:\", np.round(scores,2))\n    print(\"Mean :\", np.round(scores.mean(),2))\n    print(\"Std. :\", np.round(scores.std(),2))\n\ndisplay_scores(lin_reg_score)","a1cf220b":"# Testing with Decison Tree\nfrom sklearn.tree import DecisionTreeRegressor\ndtree = DecisionTreeRegressor()\n\nscores = cross_val_score(dtree, X_train, y_train, scoring = \"neg_mean_squared_error\", cv =10)\ndtree_scores = np.sqrt(-scores)\ndisplay_scores(dtree_scores)\n","bded32d0":"# Random Forest \nfrom sklearn.ensemble import RandomForestRegressor\nforest_reg = RandomForestRegressor()\nscores = cross_val_score(forest_reg, X_train, y_train, scoring = \"neg_mean_squared_error\", cv = 10)\nforest_reg_scores = np.sqrt(-scores)\n\ndisplay_scores(forest_reg_scores) # Best performer","d27472fc":"# Let us see the testing scores\ny_pred = lin_reg.predict(X_test)\naccuracy_check(y_pred, y_test)","099dfda2":"dtree.fit(X_train, y_train)\ny_pred = dtree.predict(X_test)\naccuracy_check(y_pred, y_test)","fb53b4d3":"forest_reg.fit(X_train, y_train)\ny_pred = forest_reg.predict(X_test)\naccuracy_check(y_pred, y_test)","f8fb597f":"# Tuning the model with GridSearchCV\nfrom sklearn.model_selection import GridSearchCV\n\nparams = [\n    {'n_estimators':[3,10,30], 'max_features':[2,4,6,8,10]},\n    {'bootstrap': [False], 'n_estimators':[5,15], 'max_features': [3,5]}\n]\ngrid_search = GridSearchCV(forest_reg, params, cv = 5, scoring = \"neg_mean_squared_error\", return_train_score=True)\n\ngrid_search.fit(X_train, y_train)\n","be91a7af":"grid_search.best_params_","7d55c714":"grid_search.best_estimator_","85476db7":"for (mean_test_scores, params) in zip(grid_search.cv_results_[\"mean_test_score\"], grid_search.cv_results_[\"params\"]):\n    print(params, np.sqrt(-mean_test_scores))","0f46cf0f":"final_model = grid_search.best_estimator_\n\ny_pred_final = final_model.predict(X_test)\naccuracy_check(y_pred_final, y_test)","1218c260":"from scipy import stats\nconfidence = 0.95\nsq_error = (y_pred_final - y_test)**2\n\nnp.sqrt(stats.t.interval(confidence, len(sq_error)-1, sq_error.mean(), stats.sem(sq_error)))","cc48af15":"## Descriptive Statistics","12b23636":"This is the range estimate of the error in the population with 95% confidence. So","7e666558":"A non-smoker pays lesser charges in South East region. \n\nAlso, a smoker pays higher charges in southeast region.For a smoker, the northeast region will incur low charges. For a non-smoker, south east region will incur the low charges","972d16da":"## Data Collection","cc99f749":"## Exploratory Data Analysis","b54748ac":"There are 2 interesting observations\n1. The charges keep increasinig with age\n2. For an age group, the smoker pays more than the non smoker","58e3fa83":"## Missing Values ??"}}