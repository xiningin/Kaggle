{"cell_type":{"5f1e9e5a":"code","f0744d8e":"code","6dd3f627":"code","be56c079":"code","efa7a295":"code","2f361ff7":"code","865c2d1a":"code","e5b66bdc":"code","73e6c9dd":"code","684c44b4":"code","9812643b":"code","9ffdf9f5":"code","740ff110":"code","b6dd6900":"code","394944c1":"code","284403e1":"code","2a6f42ed":"code","4087208e":"code","57262587":"code","75b9aa78":"code","c027add2":"code","312303b7":"markdown","757eb8a7":"markdown","b89691bd":"markdown","4e4195d9":"markdown","2a0cab9c":"markdown","c06c172a":"markdown","96cf6124":"markdown","0a7a99b9":"markdown","8b3423ef":"markdown","c6241092":"markdown","b917ade2":"markdown","8bc32fb1":"markdown","b86f9108":"markdown","153420ae":"markdown","4d935d81":"markdown","0da9ae3d":"markdown","68cc1a11":"markdown","296704e5":"markdown"},"source":{"5f1e9e5a":"import os\nimport glob\nimport numpy as np\n\nfrom PIL import Image,ImageOps\nimport matplotlib.pyplot as plt\n%matplotlib inline","f0744d8e":"base_dir = '..\/input\/intel-image-classification\/'\ndirectory = os.listdir(base_dir)\ndirectory","6dd3f627":"train_dir = base_dir + 'seg_train\/seg_train\/'\ntest_dir = base_dir + 'seg_test\/seg_test\/'","be56c079":"# Hint: \n#   You are free to use api available in 'os' library, which returns array of directories inside given path.\n#   Or, you can manually prepare the array, as CLASSES = ['folder name1', 'folder name 2' ...]\nCLASSES =['buildings' , 'glacier']\nprint(CLASSES)","efa7a295":"# TRAINING DIR: For each class, lets see how many images are there..\nfor imgType in CLASSES:\n    imgTypePath = train_dir + \"\/\" + imgType + \"\/\"\n    print(\"CLASS: \" + imgType + \", Total images: \" + str(len(os.listdir(imgTypePath)))) ","2f361ff7":"# TESTING DIR: For each class, lets see how many images are there..\nfor imgType in CLASSES:\n    imgTypePath = test_dir + \"\/\" + imgType + \"\/\"\n    print(\"CLASS: \" + imgType + \", Total images: \" + str(len(os.listdir(imgTypePath))))","865c2d1a":"from PIL import Image\nimport matplotlib.pyplot as plt\n","e5b66bdc":"IMG_SIZE=(400,400)\ndef reshape_img(img):\n    return img.resize(IMG_SIZE,Image.ANTIALIAS)","73e6c9dd":"def convert_to_grayscale(img):\n    #Convert to grayscale\n    return ImageOps.grayscale(img) #Return gray scale image object using ImageOps.\n\ndef reshape_img(img, target_size=(150,150)):\n    #Reshape any image to a fixed shape\n    return img.resize(IMG_SIZE, Image.ANTIALIAS) #Hint: Use resize() API on image object and pass target size param.\n\ndef display_numpy_img(np_img, img_name=\"Transformed image\"):\n    plt.figure(figsize = (6,6))\n    plt.imshow(np_img, cmap='gray')\n    plt.title(img_name)\n    \ndef transform_image(img_file_path):\n    img_obj = Image.open(img_file_path)\n    #print(img_obj.format)\n    #print(np.array(img_obj).shape)\n    #Perform transformations in series\n    img_obj = convert_to_grayscale(img_obj)\n    img_obj = reshape_img(img_obj, (150,150))\n    np_arr_img = np.array(img_obj)\n    return np_arr_img\n\ndef load_dir_to_numpy(dir_path, maxImgs=1500):\n    file_list = glob.glob(dir_path+'\/*')\n    imgs = []\n    #Load image by image\n    imgCount=0\n    for fname in file_list:\n        if imgCount>=maxImgs:\n            break\n        img_np = transform_image(fname)\n        imgs.append(img_np)\n        imgCount = imgCount + 1\n    np_imgs = np.array(imgs)\n    return np_imgs\n\ndef prepare_image_data(dir_path, MAX_IMGS):\n    imgs_arr_X = []\n    data_arr_y = []\n    classIdx = 0;\n    for imgType in CLASSES:\n        IMG_DIR = dir_path + \"\/\" + imgType + \"\/\"\n        #  print(\"IMG_DIR: \" + IMG_DIR)\n        imgs_arr = load_dir_to_numpy(IMG_DIR, MAX_IMGS)\n        #print(imgType + \": \" + str(imgs_arr.shape))\n        imgs_arr_X.extend(imgs_arr)\n        data_y = np.full((imgs_arr.shape[0],1), classIdx)\n        data_arr_y.extend(data_y)\n        classIdx += 1\n    np_img_arr_X = np.array(imgs_arr_X)\n    np_data_arr_y = np.array(data_arr_y)\n    return np_img_arr_X,np_data_arr_y","684c44b4":"train_np_x,train_np_y = prepare_image_data(train_dir,500)\nprint('train_np_x.shape:', train_np_x.shape)\nprint('train_np_y.shape:', train_np_y.shape)","9812643b":"\ntrain_size = train_np_x.shape[0]\ntrain_np_x = train_np_x.reshape((train_size, -1))\nprint('After reshaping, train_np_x.shape:', train_np_x.shape)","9ffdf9f5":"# Import a  #Hint: Any algorithm say sklearn.linear_model.SGDClassifier OR sklearn.tree.DecisionTreeClassifier() etc..\nfrom sklearn.linear_model import SGDClassifier\nclassifier=SGDClassifier()\nclassifier.fit(train_np_x,train_np_y)","740ff110":"classifier.fit(train_np_x, train_np_y.reshape(-1))","b6dd6900":"test_np_x,test_np_y = prepare_image_data(test_dir, 200)\n\ntest_size = test_np_x.shape[0]\ntest_np_x = test_np_x.reshape((test_size, -1))\nprint('Test shape:', test_np_x.shape)","394944c1":"# Get predicted values for 'test_np_x' using trained 'model' \npredicted_y = classifier.predict(test_np_x)","284403e1":"from sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nactual_y = test_np_y.reshape(-1)\nprint('Accuracy Score:', accuracy_score(actual_y, predicted_y))","2a6f42ed":"print(classification_report(actual_y, predicted_y))","4087208e":"print(confusion_matrix(actual_y, predicted_y))","57262587":"#trail-2\nclassifier_1=SGDClassifier(loss='log',max_iter=20 ,random_state=100)\nclassifier_1.fit(train_np_x,train_np_y)\n","75b9aa78":"predicted_y = classifier_1.predict(test_np_x)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nactual_y = test_np_y.reshape(-1)\nprint('Accuracy Score:', accuracy_score(actual_y, predicted_y))","c027add2":"print(classification_report(actual_y, predicted_y))","312303b7":"# List out directories","757eb8a7":"# Total no. of images per class in testing dataset","b89691bd":"# Replace all '????' with correct function name\/values.","4e4195d9":"# Confusion matrix","2a0cab9c":"# Certificate Project - 1 : [Intel image classification](https:\/\/www.kaggle.com\/puneet6060\/intel-image-classification)","c06c172a":"# What's the trained model accuracy on test data?","96cf6124":"# Import & Prepare the model object","0a7a99b9":"# Import libraries:","8b3423ef":"# Prepare CLASSES array","c6241092":"# Pipeline helper functions","b917ade2":"# Total no. of images per class in training dataset","8bc32fb1":"# Prepare training & testing directory paths","b86f9108":"# Train the model","153420ae":"# Predict using testing data","4d935d81":"# Model training performance report","0da9ae3d":"# Prepare training dataset","68cc1a11":"# Flatten out the 2D image data into 1D vector","296704e5":"# Prepare testing data"}}