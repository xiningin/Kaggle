{"cell_type":{"ce8a27a5":"code","8fe6fb00":"code","ca8638ce":"code","150fb63f":"code","c1e563b3":"code","f5ec4d12":"code","1e5fa8fe":"code","91494e5d":"markdown"},"source":{"ce8a27a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8fe6fb00":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow_addons as tfa \ntf.__version__","ca8638ce":"# \u79cd\u5b50\u8bbe\u7f6e\nSEED = 1111\ntf.random.set_seed(SEED)\nnp.random.seed(SEED)\n","150fb63f":"CACHE_PATH='..\/input\/tensorflow-resnet-training'\nfeatures = [f'feature_{i}' for i in range(130)]\nf_mean = np.load(f'{CACHE_PATH}\/f_mean_online.npy')","c1e563b3":"def stats_features(tmp_df):\n    # \u6784\u5efa\u4e24\u4e2a\u4ea4\u53c9\u7279\u5f81\uff1ahttps:\/\/www.kaggle.com\/a763337092\/pytorch-resnet-starter-inference\n    tmp_df['feature_cross_41_42_43']=tmp_df['feature_41']+tmp_df['feature_42']+tmp_df['feature_43']\n    tmp_df['feature_cross_1_2']=tmp_df['feature_1']\/(tmp_df['feature_2']+1e-5)\n\n    # \u884c\uff1asum mean std median\n#     tmp_df['features_sum']=tmp_df[raw_features].sum(axis=1)\n#     tmp_df['features_mean']=tmp_df[raw_features].mean(axis=1)\n#     tmp_df['features_std']=tmp_df[raw_features].std(axis=1)\n#     tmp_df['features_var']=tmp_df[raw_features].var(axis=1)\n#     tmp_df['features_median']=tmp_df[raw_features].median(axis=1)\n\n    # skew sem kurtosis kurt\n    #tmp_df['features_skew']=tmp_df[raw_features].skew(axis=1)\n    #tmp_df['features_kurtosis']=tmp_df[raw_features].kurtosis(axis=1)\n    #tmp_df['features_kurt']=tmp_df[raw_features].kurt(axis=1) # Wall time: 23.4 s\n\n    #tmp_df['features_sem']=tmp_df[raw_features].sem(axis=1) # Wall time: 18.3 s\n\n    # \u884c\uff1amax min  \n#     tmp_df['features_max']=tmp_df[raw_features].max(axis=1)\n#     tmp_df['features_min']=tmp_df[raw_features].min(axis=1)\n    # print(train[['features_sum','features_mean','features_std','features_median','features_max','features_min']].head())\n    # pct\n    # train['features_prod']=train[raw_features].prod(axis=1)\n    # train['features_prod']\n\n    tmp_df.head()\n    return tmp_df\n    \n\n    \nfeatures.extend(['feature_cross_41_42_43','feature_cross_1_2'])","f5ec4d12":"def create_mlp(\n    num_columns, num_labels, hidden_units, dropout_rates, label_smoothing, learning_rate\n):\n    \n    dropout_rate=0.2\n    hidden_size=256\n\n    inp = tf.keras.layers.Input(shape=(num_columns,))\n    x=tf.keras.layers.BatchNormalization()(inp)\n    x=tf.keras.layers.Dropout(dropout_rate)(x)\n    \n    \n    x1=tf.keras.layers.Dense(hidden_size)(x)\n    x1=tf.keras.layers.BatchNormalization()(x1)\n    x1=tf.keras.layers.LeakyReLU()(x1)\n    x1=tf.keras.layers.Dropout(dropout_rate)(x1)\n    \n    x = tf.keras.layers.concatenate([x, x1], axis=1)\n\n    \n    x2=tf.keras.layers.Dense(hidden_size)(x)\n    x2=tf.keras.layers.BatchNormalization(axis=1)(x2)\n    x2=tf.keras.layers.LeakyReLU()(x2)\n    x2=tf.keras.layers.Dropout(dropout_rate)(x2)\n    \n    x = tf.keras.layers.concatenate([x1, x2], axis=1)\n\n    \n    x3=tf.keras.layers.Dense(hidden_size)(x)\n    x3=tf.keras.layers.BatchNormalization(axis=1)(x3)\n    x3=tf.keras.layers.LeakyReLU()(x3)\n    x3=tf.keras.layers.Dropout(dropout_rate)(x3)\n    \n    x = tf.keras.layers.concatenate([x2, x3], axis=1)\n\n    x4=tf.keras.layers.Dense(hidden_size)(x)\n    x4=tf.keras.layers.BatchNormalization(axis=1)(x4)\n    x4=tf.keras.layers.LeakyReLU()(x4)\n    x4=tf.keras.layers.Dropout(dropout_rate)(x4)\n    \n    x = tf.keras.layers.concatenate([x3, x4], axis=1)\n    \n    x = tf.keras.layers.Dense(num_labels)(x)\n    \n    \n    out = tf.keras.layers.Activation(\"sigmoid\")(x)\n\n    model = tf.keras.models.Model(inputs=inp, outputs=out)\n    model.compile(\n#         optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate),\n        optimizer=tfa.optimizers.AdamW(learning_rate=learning_rate,weight_decay=1e-5),\n        loss=tf.keras.losses.BinaryCrossentropy(label_smoothing=label_smoothing),\n        metrics=tf.keras.metrics.AUC(name=\"AUC\"),\n    )\n\n    return model","1e5fa8fe":"TRAINING=False\nNUM_FOLDS=5\nif not TRAINING:\n    models=[]\n    for i in range(NUM_FOLDS):\n        batch_size = 5000\n        hidden_units = [150, 150, 150]\n        dropout_rates = [0.2, 0.2, 0.2, 0.2]\n#         label_smoothing = 1e-2\n        label_smoothing = 0.005\n        learning_rate = 1e-3\n\n        clf = create_mlp(\n            len(features), 5, hidden_units, dropout_rates, label_smoothing, learning_rate\n        )\n        clf.load_weights('..\/input\/tensorflow-resnet-training\/online_model_{}.weights'.format(i))\n\n        clf.call = tf.function(clf.call, experimental_relax_shapes=True)    \n\n        models.append(clf)\n        \n    # models = [clf]\n\n    # boost models prediction https:\/\/www.kaggle.com\/c\/jane-street-market-prediction\/discussion\/206483\n\n\n    # import tqdm\n    from tqdm import tqdm\n\n    th = 0.502\n\n    f = np.median\n\n    import janestreet\n    env = janestreet.make_env()\n\n    for (test_df, pred_df) in tqdm(env.iter_test()):\n        if test_df['weight'].item() > 0:\n#             x_tt = test_df.loc[:, features].values\n#             if np.isnan(x_tt[:, 1:].sum()):\n#                 x_tt[:, 1:] = np.nan_to_num(x_tt[:, 1:]) + np.isnan(x_tt[:, 1:]) * f_mean\n\n\n            test_df=stats_features(test_df)\n            x_tt = test_df.loc[:, features].values\n            if np.isnan(x_tt[:, 1:130].sum()):\n                x_tt[:, 1:130] = np.nan_to_num(x_tt[:, 1:130]) + np.isnan(x_tt[:, 1:130]) * f_mean\n\n            pred = np.mean([model(x_tt, training=False).numpy() for model in models], axis=0)\n            pred = f(pred)\n            pred_df.action = np.where(pred >= th, 1, 0).astype(int)\n        else:\n            pred_df.action = 0\n\n        env.predict(pred_df)","91494e5d":"Training Code\uff1ahttps:\/\/www.kaggle.com\/quincyqiang\/tensorflow-resnet-training\/"}}