{"cell_type":{"ba1b4f8a":"code","aeb9645c":"code","948fde47":"code","ed86f9ff":"code","7a5bbe00":"code","9d1952e2":"code","bdeb1b83":"code","07a78269":"code","d2c1f6f3":"code","672b4e77":"code","7c6b414b":"code","0da3befa":"code","023b40f1":"code","9b1dac15":"code","63deee82":"code","17cb30dc":"code","ce0fedab":"code","8c264ec7":"code","0bf4c5c2":"markdown","2a7f346a":"markdown","d80047ea":"markdown","74e09b18":"markdown","c56b6b09":"markdown","2aefee9d":"markdown","a6337935":"markdown","66268dfc":"markdown"},"source":{"ba1b4f8a":"import numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom pandas import DataFrame, Series\nimport re\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom category_encoders import OrdinalEncoder, OneHotEncoder, TargetEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom tqdm import tqdm_notebook as tqdm\n\nfrom sklearn.ensemble import GradientBoostingClassifier, AdaBoostClassifier\nfrom sklearn.experimental import enable_hist_gradient_boosting  # noqa\nfrom sklearn.ensemble import HistGradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import roc_auc_score, mean_squared_error, mean_squared_log_error, log_loss\nfrom sklearn.model_selection import StratifiedKFold, GroupKFold, KFold\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\n\n\npd.set_option('display.max_rows', 200)","aeb9645c":"#\u30c7\u30fc\u30bf\u306e\u8aad\u8fbc\u307f\n\n# \u6642\u7cfb\u5217\u9806\u306b\u30bd\u30fc\u30c8\ndf_train_r = pd.read_csv('..\/input\/homework-for-students2\/train.csv', index_col=0, parse_dates=['issue_d']).sort_values('issue_d')\ndf_test_r = pd.read_csv('..\/input\/homework-for-students2\/test.csv', index_col=0, parse_dates=['issue_d'])\ndf_spi_r = pd.read_csv('..\/input\/homework-for-students2\/spi.csv', parse_dates=['date'])\ndf_gps_r = pd.read_csv('..\/input\/homework-for-students2\/statelatlong.csv')\ndf_gdp_r = pd.read_csv('..\/input\/homework-for-students2\/US_GDP_by_State.csv')","948fde47":"# \u7de8\u96c6\u7528df\u306e\u4f5c\u6210\ndef reset():\n    df_train = df_train_r.copy()\n    df_test = df_test_r.copy()\n    df_train['year'] = df_train.issue_d.dt.year\n    df_train['month'] = df_train.issue_d.dt.month\n\n    df_train['quarter'] = df_train.issue_d.dt.quarter\n    \n    df_test['year'] = 2015\n    df_test['month'] = df_test.issue_d.dt.month\n    df_test['quarter'] = df_test.issue_d.dt.quarter\n    \n    return df_train, df_test\ndf_train, df_test = reset()\n\ndisplay( df_train.head() )\ndisplay( df_test.head() )\n","ed86f9ff":"# \u30b5\u30d6\u30c7\u30fc\u30bf\u306e\u8aad\u8fbc\u3068\u52a0\u5de5@spi\ndf_spi = df_spi_r.copy()\n\ndf_spi['year'] = df_spi.date.dt.year\ndf_spi['month'] = df_spi.date.dt.month\ndf_temp = df_spi.groupby( ['year', 'month'], as_index=False)['close'].mean()\n\ndf_train = df_train.merge( df_temp, on=['year', 'month'], how='left')\ndf_test = df_test.merge( df_temp, on=['year', 'month'], how='left')\n\n# \u30b5\u30d6\u30c7\u30fc\u30bf\u306e\u8aad\u8fbc\u307f\u3068\u524d\u51e6\u7406@GPS\ndf_gps = df_gps_r.copy()\ndisplay( df_gps_r.head() )\ndf_gps['addr_state'] = df_gps['State']\ndf_gps.drop(['State'], axis=1, inplace=True)\n\ndf_train = df_train.merge( df_gps, on=['addr_state'], how='left')\ndf_test = df_test.merge( df_gps, on=['addr_state'], how='left')\n\n# \u30b5\u30d6\u30c7\u30fc\u30bf\u306e\u8aad\u8fbc\u307f\u3068\u524d\u51e6\u7406@GDP\ndf_gdp = df_gdp_r.copy()\ndisplay( df_gdp.head() )\n\ndf_gdp['City'] = df_gdp['State']\n\ndf_train = df_train.merge( df_gdp, on=['year', 'City'], how='left')\ndf_test = df_test.merge( df_gdp, on=['year', 'City'], how='left')\n\ndf_train.drop(['City'], axis=1, inplace=True)\ndf_test.drop(['City'], axis=1, inplace=True)\n\ndisplay( df_train.head() )\ndisplay( df_test.head() )","7a5bbe00":"#\u30de\u30cd\u30fc\u30b8\u30e3\u30fcflg\nTXT_train = df_train.emp_title.copy()\nTXT_test = df_test.emp_title.copy()\n\nTXT_train.fillna('#', inplace=True)\nTXT_test.fillna('#', inplace=True)\n\ndf_train['manager_flg'] = TXT_train.str.contains('(manage|Manage)') * 1\ndf_train['general_flg'] = TXT_train.str.contains('(general|General)') * 1\ndf_train['director_flg'] = TXT_train.str.contains('(director|Director)') * 1\ndf_train['senior_flg'] = TXT_train.str.contains('(senior|Senior)') * 1\ndf_test['manager_flg'] = TXT_test.str.contains('(manage|Manage)') * 1\ndf_test['general_flg'] = TXT_test.str.contains('(general|General)') * 1\ndf_test['director_flg'] = TXT_test.str.contains('(director|Director)') * 1\ndf_test['senior_flg'] = TXT_test.str.contains('(senior|Senior)') * 1\n\ndisplay( df_train[['general_flg', 'manager_flg', 'emp_title']].head() )","9d1952e2":"#\u3000grade\u6bce\u306e\u8cb8\u5012\u308c\u305f\u30ed\u30fc\u30f3\u984d\nsummary = df_train[df_train.loan_condition==1].groupby(['grade']).loan_amnt.agg(['mean', 'median'])\nprint('\u96c6\u8a08\u30c6\u30fc\u30d6\u30eb\u306ehead\u3092\u8868\u793a')\ndisplay(summary.head(8))\n\n# mean\u3092map\ndf_train['loan_grade_mean'] = df_train.grade.map(summary['mean'])\ndf_test['loan_grade_mean'] = df_test.grade.map(summary['mean'])\ndf_train['grade_mean_inc'] = df_train['annual_inc'] \/ df_train['loan_grade_mean']\ndf_test['grade_mean_inc'] = df_test['annual_inc'] \/ df_test['loan_grade_mean']\n\n# median\u3092map\ndf_train['loan_grade_median'] = df_train.grade.map(summary['median'])\ndf_test['loan_grade_median'] = df_test.grade.map(summary['median'])\ndf_train['grade_median_inc'] = df_train['annual_inc'] \/ df_train['loan_grade_median']\ndf_test['grade_median_inc'] = df_test['annual_inc'] \/ df_test['loan_grade_median']\n\n\n# \u78ba\u8a8d\u3057\u3066\u304a\u304f\n# print('\u751f\u6210\u3057\u305f\u7279\u5fb4\u91cf\u306ehead\u3092\u8868\u793a')\n# display( df_train[['loan_grade_mean', 'loan_grade_median']].head() )\n# display( df_test[['loan_grade_mean', 'loan_grade_median']].head() )","bdeb1b83":"#\u3000\u8cb8\u5012\u308c\u3088\u308a\u591a\u3044\u304b\u5c11\u306a\u3044\u304b\ndf_train['is_loan_mean'] = df_train['annual_inc'] \/ df_train[df_train.loan_condition==1].loan_amnt.mean()\ndf_test['is_loan_mean'] = df_test['annual_inc'] \/ df_train[df_train.loan_condition==1].loan_amnt.mean()\ndf_train['is_loan_median'] = df_train['annual_inc'] \/ df_train[df_train.loan_condition==1].loan_amnt.median()\ndf_test['is_loan_median'] = df_test['annual_inc'] \/ df_train[df_train.loan_condition==1].loan_amnt.median()\n\n#\u3000\u30ed\u30fc\u30f3\u984d\u3001\u5e74\u53ce\u984d\u3067\u904a\u3093\u3067\u898b\u308b\ndf_train['loan_inc'] = df_train['annual_inc'] \/ df_train['loan_amnt']\ndf_test['loan_inc'] = df_test['annual_inc'] \/ df_test['loan_amnt']\n# df_train.loc[ 1 <= df_train['annual_inc'] \/ df_train[df_train.loan_condition==1].loan_amnt.mean(), 'is_loan_mean'] = 1\n# df_train.loc[ 1 > df_train['annual_inc'] \/ df_train[df_train.loan_condition==1].loan_amnt.mean(), 'is_loan_mean'] = 0\n# df_test.loc[ 1 <= df_train['annual_inc'] \/ df_train[df_train.loan_condition==1].loan_amnt.mean(), 'is_loan_mean'] = 1\n# df_test.loc[ 1 > df_train['annual_inc'] \/ df_train[df_train.loan_condition==1].loan_amnt.mean(), 'is_loan_mean'] = 0\n\n# subgrade\u3092\u6570\u5024\u3060\u3051\u306b\u3059\u308b\ndf_train['sub_grade_rank'] = df_train['sub_grade'].apply(lambda x: int(x[-1]))\ndf_test['sub_grade_rank'] = df_test['sub_grade'].apply(lambda x: int(x[-1]))\n\n# zipcode\u3092\u6570\u5024\u3060\u3051\u306b\u3059\u308b\ndf_train['zip_code'] = df_train['zip_code'].apply(lambda x: x[:3])\ndf_test['zip_code'] = df_test['zip_code'].apply(lambda x: x[:3])\ndf_train['zip_code2'] = df_train['zip_code'].apply(lambda x: x[:2])\ndf_test['zip_code2'] = df_test['zip_code'].apply(lambda x: x[:2])","07a78269":"# \u6301\u3061\u5bb6\u304c\u3042\u308b\u304b\u3069\u3046\u304b\uff1f\ndf_train['is_home'] = 0\ndf_train.loc[df_train['home_ownership'] == 'OWN', 'is_home'] = 1\ndf_test['is_home'] = 0\ndf_test.loc[df_test['home_ownership'] == 'OWN', 'is_home'] = 1\n\n#\u3000\u5bb6\u6240\u6709\u8005\u306e\u8cb8\u5012\u308c\u305f\u30ed\u30fc\u30f3\u984d\nsummary = df_train[df_train.loan_condition==1].groupby(['is_home']).loan_amnt.agg(['mean', 'median'])\ndisplay( summary.head() )\n\n# mean\u3092map\ndf_train['is_home_mean'] = df_train.is_home.map(summary['mean'])\ndf_test['is_home_mean'] = df_test.is_home.map(summary['mean'])\ndf_train['home_mean_inc'] = df_train['annual_inc'] \/ df_train['is_home_mean']\ndf_test['home_mean_inc'] = df_test['annual_inc'] \/ df_test['is_home_mean']\n\n# median\u3092map\ndf_train['is_home_median'] = df_train.is_home.map(summary['median'])\ndf_test['is_home_median'] = df_test.is_home.map(summary['median'])\ndf_train['home_median_inc'] = df_train['annual_inc'] \/ df_train['is_home_median']\ndf_test['home_median_inc'] = df_test['annual_inc'] \/ df_test['is_home_median']\n\n# \u78ba\u8a8d\u3057\u3066\u304a\u304f\nprint('\u751f\u6210\u3057\u305f\u7279\u5fb4\u91cf\u306ehead\u3092\u8868\u793a')\ndisplay( df_train[['is_home_mean', 'is_home_median']].head() )\ndisplay( df_test[['is_home_mean', 'is_home_median']].head() )","d2c1f6f3":"y_train = df_train.loan_condition.copy()\nX_train = df_train.drop(['loan_condition'], axis=1).copy()\n\nX_test = df_test.copy()\n\n# df_train_2015 = df_train[ df_train['year'] == 2015] \n# y_train = df_train_2015.loan_condition.copy()\n# X_train = df_train_2015.drop(['loan_condition'], axis=1).copy()","672b4e77":"# dtype\u304cobject\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u306e\u78ba\u8a8d\ncats = []\nfor col in df_train.columns:\n    if df_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, df_train[col].nunique())","7c6b414b":"X_train['sumNaN'] = X_train.isnull().sum(axis=1)\nX_test['sumNaN'] = X_test.isnull().sum(axis=1)\n\nnan_cols = ['emp_title', 'emp_length','title', 'dti', 'delinq_2yrs', 'earliest_cr_line', 'inq_last_6mths'\n           ,'mths_since_last_delinq', 'mths_since_last_record', 'open_acc', 'pub_rec', 'revol_util', 'total_acc'\n          ,'collections_12_mths_ex_med', 'mths_since_last_major_derog', 'acc_now_delinq', 'tot_coll_amt', 'tot_cur_bal'\n          ]\nfor col in nan_cols:\n    nan_flg = col + \"_NaN\"\n    \n    X_train[nan_flg] = 0\n    X_train.loc[ X_train[col].isnull(), nan_flg] = 1\n    X_test[nan_flg] = 0\n    X_test.loc[ X_test[col].isnull(), nan_flg] = 1","0da3befa":"#Target Encoding\n\ntarget = 'loan_condition'\n\n# 0.713933381029434 without home_ownership, purpose\ncats.remove('grade')\ncats.remove('sub_grade')\ncats.remove(\"emp_title\")\ncats.remove(\"home_ownership\")\ncats.remove(\"purpose\")\n\nprint(cats)\n\ncols= ['grade', 'annual_inc', 'sub_grade', 'home_ownership', 'purpose']\nX_temp = pd.concat([X_train, y_train], axis=1)\n\nfor col in cols:\n    \n    # X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n    summary = X_temp.groupby([col])[target].mean()\n    enc_test = X_test[col].map(summary) \n\n    # X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n    skf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n    enc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\n    for i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n        X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n        X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n        summary = X_train_.groupby([col])[target].mean()\n        enc_train.iloc[val_ix] = X_val[col].map(summary) \n\n    X_test[col] = enc_test\n    X_train[col] = enc_train","023b40f1":"# \u6b8b\u308a\u3092OrdinalEncoding\noe = OrdinalEncoder(cols=cats, return_df=False)\n\nX_train[cats] = oe.fit_transform(X_train[cats])\nX_test[cats] = oe.transform(X_test[cats])","9b1dac15":"X_train.drop(['issue_d'], axis=1, inplace=True)\nX_test.drop(['issue_d'], axis=1, inplace=True)\nX_train.drop(['emp_title'], axis=1, inplace=True)\nX_test.drop(['emp_title'], axis=1, inplace=True)\n# X_train.drop(['zip_code2'], axis=1, inplace=True)\n# X_test.drop(['zip_code2'], axis=1, inplace=True)\n# X_train.drop(['year'], axis=1, inplace=True)\n# X_test.drop(['year'], axis=1, inplace=True)\n# X_train.drop(['month'], axis=1, inplace=True)\n# X_test.drop(['month'], axis=1, inplace=True)","63deee82":"# # \u6b20\u640d\u5024\u306e0\u57cb\u3081\nX_train.fillna({'mths_since_last_delinq' : 0 , 'mths_since_last_record' : 0, 'mths_since_last_major_derog' : 0}, inplace=True)\nX_test.fillna({'mths_since_last_delinq' : 0 , 'mths_since_last_record' : 0, 'mths_since_last_major_derog' : 0}, inplace=True)\n\n#\u305d\u306e\u4ed6\u306e\u5024\u3092\u4e2d\u592e\u5024\u3067\u57cb\u3081\u308b\nX_train.fillna(X_train.median(), inplace=True)\nX_test.fillna(X_test.median(), inplace=True)","17cb30dc":"# \u6642\u7cfb\u5217\u306eFold\n\n# 0.7138100220404252\n\nlength = len(X_train)\nstart_split = [0, length*0.05 - 1, length*0.1 - 1, length*0.15 - 1, length*0.2 - 1]\ntrain_split = [length * 0.6 - 2, length*0.65 - 2, length*0.70 - 2, length*0.75 - 2, length*0.80 - 2]\ntest_split = [length*0.8 - 1, length*0.85 - 1, length*0.9 - 1, length*0.95 - 1, length*1 - 1]\n\nscores = []\n\nclf = LGBMClassifier()\n# clf = HistGradientBoostingClassifier()\n\nfor i in tqdm( range(0, 4, 1) ):\n    X_train_, y_train_ = X_train[int(start_split[i]) : int(train_split[i+1])] , y_train[int(start_split[i]) : int(train_split[i+1])]\n    X_val, y_val = X_train[int(train_split[i] +1) : int(test_split[i+1])] , y_train[int(train_split[i] + 1) : int(test_split[i+1])]\n        \n    clf.fit(X_train_, y_train_)\n    y_pred = clf.predict_proba(X_val)[:,1]\n    score = roc_auc_score(y_val, y_pred)\n    scores.append(score)\n    \n    print('CV Score of Fold_%d is %f' % (i, score))\n\nprint(np.mean(scores))\nprint(scores)","ce0fedab":"# \u30c6\u30ad\u30b9\u30c8\u3092TFIDF\n# TXT_train = df_train_2015.emp_title.copy()\nTXT_train = df_train.emp_title.copy()\nTXT_test = df_test.emp_title.copy()\n\nTXT_train.fillna('#', inplace=True)\nTXT_test.fillna('#', inplace=True)\n\ntdidf = TfidfVectorizer(max_features=1000)\n\nTXT_train = tdidf.fit_transform(TXT_train)\nTXT_test = tdidf.transform(TXT_test)\n\nX_train = sp.sparse.hstack([X_train.values, TXT_train])\nX_test = sp.sparse.hstack([X_test.values, TXT_test])","8c264ec7":"# sample submission\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u306e\u5f8c\u3001\u4fdd\u5b58\u3059\u308b\n# \u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3001test\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3059\u308b\nclf.fit(X_train, y_train)\ny_pred = clf.predict_proba(X_test)[:,1]\nsubmission = pd.read_csv('..\/input\/homework-for-students2\/sample_submission.csv', index_col=0)\n\nsubmission.loan_condition = y_pred\n\nsubmission.to_csv('submission.csv')","0bf4c5c2":"# Ensumble","2a7f346a":"## \u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","d80047ea":"## \u6b20\u640d\u5024\u306e\u51e6\u7406\n- \u6b20\u640d\u30d5\u30e9\u30b0\u3092\u4f5c\u6210\n- \u4e00\u65e6\u4e2d\u592e\u5024\u3001\u591a\u5206\u4e00\u90e80\u3068\u304b\u304c\u826f\u3044\u3068\u601d\u3046","74e09b18":"# \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\n- \u30de\u30cd\u30fc\u30b8\u30e3\u30fcflg\u7b49\u3092\u3064\u3051\u308b\n- \u8cb8\u5012\u308c\u3088\u308a\u591a\u3044\u304b\u5c11\u306a\u3044\u304b\n- \u30ed\u30fc\u30f3\u5b66\u3001\u5e74\u53ce\u984d\u3067\u904a\u3093\u3067\u898b\u308b\n","c56b6b09":"# \u30b9\u30b3\u30a2\u30ea\u30f3\u30b0","2aefee9d":"# Paramater tune","a6337935":"## X\u3068y\u306b\u5206\u5272","66268dfc":"## \u4e0d\u8981\u306a\u30ab\u30e9\u30e0\u3092\u524a\u9664"}}