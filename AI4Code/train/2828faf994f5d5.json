{"cell_type":{"2d8c0e6c":"code","f33041a3":"code","93a4dd4a":"code","c9f76f93":"code","a2abf920":"code","3cf1f28b":"code","2f6175d7":"code","83097fb1":"code","28dd402d":"code","080bdfa1":"code","978c6eca":"code","9104f2c8":"code","212b561c":"code","a4587e95":"code","25fa1971":"code","b693ccf5":"code","1928f7ef":"code","e3217688":"code","14aa6309":"code","53c70961":"code","a4074e19":"code","77b64656":"code","437850fc":"code","65f3de28":"code","b64d4e03":"code","fcda675c":"code","48afa9d1":"code","e512051b":"code","0741cc50":"code","5c84dde7":"code","5c39e41f":"code","cf2706a3":"code","4b88315b":"code","1a53b725":"code","82608e11":"code","375e333b":"code","55b62e93":"code","604aa841":"code","cb2d2096":"code","4b9e5926":"code","3e61ed23":"code","19a8b2f1":"code","5d282219":"code","ddb64822":"code","9b0f32a9":"code","79cf8e79":"code","67415ead":"code","d03a1542":"code","7ca2e3f3":"code","80221775":"code","44fd034b":"code","b0c3e34a":"code","246a16dd":"code","51e4a58a":"code","0205224a":"code","095754d4":"code","ef269b24":"markdown","b3bda700":"markdown","8f637f42":"markdown","f10168b6":"markdown","12e0226b":"markdown","9eec7835":"markdown","a0db2c3f":"markdown","36243417":"markdown","a0ce39b6":"markdown","3381a60a":"markdown","a670fe75":"markdown","d0599a81":"markdown","f0c0cb3d":"markdown","3672a8b3":"markdown","09a13275":"markdown","8b3f636a":"markdown","0d4169ef":"markdown","4f82ec3b":"markdown","6c700d0f":"markdown","0f73d5fd":"markdown","dd194637":"markdown","67d418b4":"markdown","906b380a":"markdown"},"source":{"2d8c0e6c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport plotly.express as px","f33041a3":"df_train = pd.read_csv(\"..\/input\/airline-passenger-satisfaction\/train.csv\")","93a4dd4a":"df_test = pd.read_csv(\"..\/input\/airline-passenger-satisfaction\/test.csv\")","c9f76f93":"df_train.shape","a2abf920":"df_test.shape","3cf1f28b":"df_train.isnull().sum()","2f6175d7":"df_train.describe()","83097fb1":"df_train.head()","28dd402d":"df_train.drop(['Arrival Delay in Minutes'], axis = 1,inplace=True)\ndf_test.drop(['Arrival Delay in Minutes'], axis = 1,inplace=True)","080bdfa1":"exclude = ['Unnamed: 0', 'id']\ndf_train.loc[:, df_train.columns.difference(exclude)].boxplot(rot=90)","978c6eca":"def find_outliers(x):\n    q1 = np.percentile(x, 25)\n    q3 = np.percentile(x, 75)\n    iqr = q3-q1 \n    floor = q1 - 1.5*iqr\n    ceiling = q3 + 1.5*iqr\n\n    return ceiling,floor","9104f2c8":"ul,ll=find_outliers(df_train[\"Flight Distance\"])\nprint(\"Outliers lower bound= \",ll)\nprint(\"Outliers upper bound= \",ul)\nd=df_train.shape[0]-df_train[(df_train[\"Flight Distance\"]>=ll) & (df_train[\"Flight Distance\"]<=ul) ].shape[0]\nprint(\"length of outlier data= \",d)","212b561c":"ul,ll=find_outliers(df_train[\"Departure Delay in Minutes\"])\nprint(\"Outliers lower bound= \",ll)\nprint(\"Outliers upper bound= \",ul)\nd=df_train.shape[0]-df_train[(df_train[\"Departure Delay in Minutes\"]>=ll) & (df_train[\"Departure Delay in Minutes\"]<=ul)].shape[0]\nprint(\"length of outlier data= \",d)","a4587e95":"\ndef before_after_median_imputation(x):\n    sns.boxplot(df_train[x])\n    plt.title(\"Box Plot before median imputation\")\n    plt.show()\n    Upper_tail,Lower_tail = find_outliers(df_train[x])\n    \n    med = np.median(df_train[x])\n    for i in df_train[x]:\n        if (i > Upper_tail) | (i < Lower_tail):\n                df_train[x] = df_train[x].replace(i, med)\n    sns.boxplot(df_train[x])\n    plt.title(\"Box Plot after median imputation\")\n    plt.show()            \n","25fa1971":"col=[\"Flight Distance\",'Departure Delay in Minutes']\nfor column in col:\n    before_after_median_imputation(column)","b693ccf5":"not_satisfied = df_train.satisfaction == \"neutral or dissatisfied\"\nsatisfied = df_train.satisfaction == \"satisfied\"","1928f7ef":"not_sat = df_train[not_satisfied].count().sum()","e3217688":"sat = df_train[satisfied].count().sum()","14aa6309":"percent_not_satisfied = not_sat\/(sat+not_sat)*100\npercent_not_satisfied","53c70961":"cat_features = [feature for feature in df_train.columns if df_train[feature].dtypes == 'O']","a4074e19":"cat_features","77b64656":"for col in cat_features[:-1]:\n    plt.figure(figsize=(6,3), dpi=100)\n    sns.countplot(data=df_train,x=col,hue ='satisfaction',palette='gist_rainbow_r')\n    plt.legend(loc=(1.05,0.5))","437850fc":"def get_insights(data):\n    for cols in cat_features[:-1]:\n        cat_group = data.groupby(cols)['satisfaction'].describe()\n        percent = 100 *(cat_group['freq']\/cat_group['count'])\n        print('-'*70)\n        print(\"Insights from '{}' data\".format(cols))\n        print('-'*70)\n        for i in range(0,(len(cat_group))):\n            print('{} from {} are {}'.format(round(percent[i],2),percent.index[i], cat_group['top'][i]))\n        print('-'*70)","65f3de28":"get_insights(df_train)","b64d4e03":"numerical_features = [feature for feature in df_train.columns if df_train[feature].dtypes != 'O']\nnumerical_features","fcda675c":"for col in numerical_features:\n    plt.figure(figsize=(6,3), dpi=100)\n    sns.barplot(data=df_train,x='satisfaction',y=col,palette='gist_rainbow_r')","48afa9d1":"df_train.drop(['Age','Unnamed: 0','Departure\/Arrival time convenient', 'Gate location'], axis = 1,inplace=True)\ndf_test.drop(['Age','Unnamed: 0','Departure\/Arrival time convenient', 'Gate location'], axis = 1,inplace=True)","e512051b":"from sklearn import preprocessing","0741cc50":"le_Customer_Type = preprocessing.LabelEncoder()\nle_Type_of_Travel = preprocessing.LabelEncoder()\nle_Class = preprocessing.LabelEncoder()\nle_satisfaction = preprocessing.LabelEncoder()\nle_gender = preprocessing.LabelEncoder()","5c84dde7":"df_train['Customer Type'] = le_Customer_Type.fit_transform(df_train['Customer Type'])\ndf_train['Type of Travel'] = le_Type_of_Travel.fit_transform(df_train['Type of Travel'])\ndf_train['Class'] = le_Class.fit_transform(df_train['Class'])\ndf_train['satisfaction'] = le_satisfaction.fit_transform(df_train['satisfaction'])\ndf_train['Gender'] = le_satisfaction.fit_transform(df_train['Gender'])","5c39e41f":"df_test['Customer Type'] = le_Customer_Type.fit_transform(df_test['Customer Type'])\ndf_test['Type of Travel'] = le_Type_of_Travel.fit_transform(df_test['Type of Travel'])\ndf_test['Class'] = le_Class.fit_transform(df_test['Class'])\ndf_test['satisfaction'] = le_satisfaction.fit_transform(df_test['satisfaction'])\ndf_test['Gender'] = le_satisfaction.fit_transform(df_test['Gender'])","cf2706a3":"le_Customer_Type.classes_","4b88315b":"le_Type_of_Travel.classes_","1a53b725":"le_Class.classes_  ","82608e11":"le_satisfaction.classes_  ","375e333b":"df_train.head()","55b62e93":"fig, ax = plt.subplots(figsize=(24,20))         \nsns.heatmap(df_train.corr(), annot=True, ax=ax)","604aa841":"X_train = df_train.drop(\"satisfaction\" , axis = 1).values\ny_train = df_train['satisfaction'].values","cb2d2096":"X_test = df_test.drop(\"satisfaction\" , axis = 1).values\ny_test = df_test['satisfaction'].values","4b9e5926":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\n\nX_train = sc.fit_transform(X_train)\n\nX_test = sc.transform(X_test)\n","3e61ed23":"from sklearn.tree import DecisionTreeClassifier","19a8b2f1":"dt = DecisionTreeClassifier(max_depth=5, max_features=10)","5d282219":"dt.fit(X_train, y_train)","ddb64822":"dt.score(X_train, y_train)","9b0f32a9":"dt.score(X_test, y_test)","79cf8e79":"from sklearn import tree","67415ead":"fig = plt.figure(figsize= (25, 20))\ntree.plot_tree(dt, filled = True)\nplt.show()","d03a1542":"from xgboost import XGBClassifier","7ca2e3f3":"dt_xgb = XGBClassifier(max_depth = 5, learning_rate = 0.3, objective = 'binary:logistic')","80221775":"dt_xgb.fit(X_train, y_train)","44fd034b":"dt_xgb.score(X_train, y_train)","b0c3e34a":"dt_xgb.score(X_test, y_test)","246a16dd":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import VotingClassifier","51e4a58a":"clf1 = LogisticRegression(solver='lbfgs', multi_class='multinomial',random_state=1)\nclf2 = RandomForestClassifier(n_estimators=50, random_state=1)\nclf3 = KNeighborsClassifier(n_neighbors=5)\nclf4 = XGBClassifier(max_depth = 5, learning_rate = 0.3, objective = 'binary:logistic')","0205224a":"v_clf = VotingClassifier(estimators=[('LOG', clf1), ('RF', clf2), ('KNN', clf3), ('XGBOOST', clf4)],voting='hard')","095754d4":"for clf, label in zip([clf1, clf2, clf3, clf4, v_clf], ['Logistic Regression', 'Random Forest ', 'knn ', 'XGboost', 'Ensemble ']): \n    scores = cross_val_score(clf, X_train, y_train, cv=5, scoring='accuracy')\n    print(\"Accuracy: %0.2f (+\/- %0.2f) [%s]\" % (scores.mean(), scores.std(), label))","ef269b24":"# Median imputation","b3bda700":"# Conclusions:","8f637f42":"# Since Age, Unnamed: 0, id, Departure\/Arrival time convenient, and Gate Location have no impact on satisfaction we will drop them","f10168b6":"# some insights in percent from above charts","12e0226b":"# --------------------------------------------------------------------------------------------------","9eec7835":"# Standardaization","a0db2c3f":"# voting","36243417":"# 2 - Numerical Data","a0ce39b6":"# Exploring Outliers","3381a60a":"# Decision Tree","a670fe75":"# 50 % of customers satisfaction depend on online boarding and 40 % onInflight entertainment","d0599a81":"# Modeling","f0c0cb3d":"# ---------------------------------------------------------------------------------------------------------------","3672a8b3":"# Conclusions:\n    \n# Gender doesn't play an important role in the satisfaction\n\n# Number of loyal customers for this airline is high, however, the dissatisfaction level is high irrespective of the loyalty. Airline will have to work on maintaining the loyal customers\n\n# Business Travellers seems to be more satisfied with the flight, than the personal travellers\n\n# People in business class more satisfied than those in economy ","09a13275":"# Label encoder","8b3f636a":"\n# 1 - Categorical Data","0d4169ef":"Since correlation between Departure Delay in Minutes & Arrival Delay in Minutes is so high then we can drop one of them","4f82ec3b":"# lets go deeper in the effect of features on satisfation level","6c700d0f":"# The percentage of paasengers which not satisfied with overall service approximitly 56 %","0f73d5fd":"# Outliers handling\nAs we detect above outliers are in :<br>\n\nFlight Distance<br>\nDeparture Delay in Minutes<br>\nArrival Delay in Minutes(was dropped)","dd194637":"# Voting ensemble show us that Random forest and XGboost models both have the highest score with 96% Accuracy","67d418b4":"# XGboost","906b380a":"I split satisfaction column to two variables "}}