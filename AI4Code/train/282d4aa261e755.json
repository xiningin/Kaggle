{"cell_type":{"df0b2807":"code","40dd596e":"code","fcba44c9":"code","f411916c":"code","436e86aa":"code","3112082e":"code","04576e6c":"code","c7a54739":"code","4ddd35d6":"code","b4ccf65a":"code","a351f26c":"code","9351810f":"code","567e5d00":"code","732898bf":"code","7dd8266c":"code","51daa63b":"code","e69da1c3":"code","3383ce04":"code","a5207e54":"code","5d751da3":"code","c51e1af6":"code","7745b3af":"code","7b17334b":"code","5dca030f":"code","c821ccc0":"code","fb8f9c77":"code","b628b21d":"markdown","fa2c7518":"markdown","8a4e61dc":"markdown","6c6f823e":"markdown","e1e758c4":"markdown"},"source":{"df0b2807":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    \n        print(os.path.join(dirname))\n\n# Any results you write to the current directory are saved as output.","40dd596e":"import keras,os\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPool2D , Flatten\nfrom keras.preprocessing.image import ImageDataGenerator\nimport numpy as np","fcba44c9":"from keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nimport random","f411916c":"filenames=os.listdir(\"\/kaggle\/input\/dogs-vs-cats\/train\/train\")\n# print(filenames)\ncategory=[]\n\nfor i in filenames:\n    catg=i.split('.')[0]\n#     print(catg)\n\n    if catg=='cat':\n        category.append('0') \n        \n    else:\n        category.append('1')    ","436e86aa":"category[0:5]","3112082e":"df=pd.DataFrame({'filename': filenames,\n    'category': category})\ndf.tail()","04576e6c":"sample = random.choice(filenames)\nimage = load_img(\"\/kaggle\/input\/dogs-vs-cats\/train\/train\/\"+sample)\nplt.imshow(image)","c7a54739":"image.size","4ddd35d6":"from keras.models import Sequential\nfrom keras import layers\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation,GlobalMaxPooling2D\nfrom keras import applications\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers\nfrom keras.applications import VGG16\nfrom keras.models import Model","b4ccf65a":"img_size = [224, 224,3]","a351f26c":"vgg = VGG16(input_shape=img_size, weights='imagenet', include_top=False)\n\nfor layer in vgg.layers[:15]:\n    layer.trainable = False\n\nfor layer in vgg.layers[15:]:\n    layer.trainable = True\n    \nlast_layer = vgg.get_layer('block5_pool')\nlast_output = last_layer.output\n    \n\nx = GlobalMaxPooling2D()(last_output)\n\nx = Dense(512, activation='relu')(x)\n\nx = Dropout(0.5)(x)\n\nx = layers.Dense(1, activation='sigmoid')(x)\n\nmodel = Model(vgg.input, x)\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=optimizers.SGD(lr=1e-4, momentum=0.9),\n              metrics=['accuracy'])\n","9351810f":"# x = Flatten()(vgg.output)","567e5d00":"# prediction = Dense(1, activation='sigmoid')(x)","732898bf":"# model = Model(inputs=vgg.input, outputs=prediction)\n\n\nmodel.summary()","7dd8266c":"model.compile(\n  loss='sparse_categorical_crossentropy',\n  optimizer='adam',\n  metrics=['accuracy']\n)","51daa63b":"train_df, test_df = train_test_split(df, test_size=0.1)\ntrain_df = train_df.reset_index()\ntest_df = test_df.reset_index()\n\n\ntotal_train = train_df.shape[0]\ntotal_test = test_df.shape[0]","e69da1c3":"print(total_train)\nprint(total_test)","3383ce04":"df.dtypes","a5207e54":"train_datagen = ImageDataGenerator(\n    rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest',\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \"\/kaggle\/input\/dogs-vs-cats\/train\/train\/\", \n    x_col='filename',\n    y_col='category',\n    class_mode='binary',\n    target_size=(224,224),\n    batch_size=32\n)\n","5d751da3":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = validation_datagen.flow_from_dataframe(\n    test_df, \n    \"\/kaggle\/input\/dogs-vs-cats\/train\/train\/\", \n    x_col='filename',\n    y_col='category',\n    class_mode='binary',\n    target_size=(224,224),\n    batch_size=32\n)","c51e1af6":"len(train_generator)","7745b3af":"len(validation_generator)","7b17334b":"r = model.fit_generator(\n  train_generator,\n  validation_data=test_generator,\n  epochs=5,\n  steps_per_epoch=704,\n  validation_steps=79\n)","5dca030f":"loss, accuracy = model.evaluate_generator(test_generator, total_test\/\/32)\nprint(\"Test: accuracy = %f  ;  loss = %f \" % (accuracy, loss))","c821ccc0":"import tensorflow as tf\n\nfrom keras.models import load_model","fb8f9c77":"plt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\n\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\n\n\nmodel.save('model_final.h5')","b628b21d":"# TEST GENERATOR","fa2c7518":"# Random Photo Generator","8a4e61dc":"# TRAIN GENERATOR","6c6f823e":"# FOR DOG=1 FOR CAT=0","e1e758c4":"# FOR VGG16 Model we need input shape as 224,224\n# MODEL"}}