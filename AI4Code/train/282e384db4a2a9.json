{"cell_type":{"03e92e30":"code","6c033e80":"code","904e5fc0":"code","52bd7496":"code","738d782f":"code","ee2c5266":"code","df53346b":"code","e9e1a660":"code","2e46b6ac":"code","a5b4f8eb":"code","dc279434":"markdown","4eb071e7":"markdown","6cc49901":"markdown","c54d2d46":"markdown","b5e4119a":"markdown","8ad230fb":"markdown"},"source":{"03e92e30":"import pandas as pd\ntrainFile='..\/input\/titanic\/train.csv'\ntestFile='..\/input\/titanic\/test.csv'\ntitanic1=pd.read_csv(trainFile)\ntitanic2=pd.read_csv(testFile)\ntitanic=titanic1.append(titanic2)\ntitanic['Age']=titanic['Age'].fillna(titanic['Age'].median())#fillna\uff08\uff09\u8868\u793a\u8865\u5145\uff0cmedian\uff08\uff09\u8868\u793a\u6c42\u5e73\u5747\u503c\ntitanic['Fare']=titanic['Fare'].fillna(titanic['Fare'].median())\nprint(titanic.describe())","6c033e80":"print(titanic['Sex'].unique())","904e5fc0":"titanic.loc[titanic['Sex']=='male','Sex']=0\ntitanic.loc[titanic['Sex']=='female','Sex']=1","52bd7496":"print(titanic['Survived'].unique())\ntitanic['Survived']=titanic['Survived'].fillna(0)\nprint(titanic['Survived'].unique())","738d782f":"\nprint(titanic['Embarked'].unique())\ntitanic['Embarked']=titanic['Embarked'].fillna('S')\ntitanic.loc[titanic[\"Embarked\"]==\"S\",\"Embarked\"] = 0\ntitanic.loc[titanic[\"Embarked\"]==\"C\",\"Embarked\"] = 1\ntitanic.loc[titanic[\"Embarked\"]==\"Q\",\"Embarked\"] = 2\nprint(titanic['Embarked'].unique())","ee2c5266":"print(titanic['Pclass'].unique())","df53346b":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(18,6), dpi=1600)\nalpha=alpha_scatterplot = 0.2\nalpha_bar_chart = 0.55\n# \u8ba9\u6211\u4eec\u4e00\u8d77\u7ed8\u5236\u8bb8\u591a\u4e0d\u540c\u5f62\u72b6\u7684\u56fe\nax1 = plt.subplot2grid((2,3),(0,0))\n# \u7ed8\u5236\u51fa\u90a3\u4e9b\u751f\u5b58\u4e0e\u6ca1\u6709\u751f\u5b58\u7684\u4eba\u7684\u6761\u5f62\u56fe\ntitanic.Survived.value_counts().plot(kind='bar', alpha=alpha_bar_chart)\nax1.set_xlim(-1, 2)\n# \u5728\u6211\u4eec\u7684\u56fe\u8868\u4e0a\u653e\u7f6e\u4e00\u4e2a\u6807\u9898\nplt.title(\"Distribution of Survival, (1 = Survived)\")\nplt.subplot2grid((2,3),(0,1))\nplt.scatter(titanic.Survived, titanic.Age, alpha=alpha_scatterplot)\n# sets the y axis lable\nplt.ylabel(\"Age\")\n# \u7ed8\u5236\u56fe\u5f62\u4e8c\n# \u683c\u5f0f\u5316\u56fe\u5f62\u7684\u7f51\u683c\u7ebf\u6837\u5f0f\nplt.grid(b=True, which='major', axis='y')\nplt.title(\"Survival by Age, (1 = Survived)\")\nax3 = plt.subplot2grid((2,3),(0,2))\ntitanic.Pclass.value_counts().plot(kind=\"barh\", alpha=alpha_bar_chart)\nax3.set_ylim(-1, len(titanic.Pclass.value_counts()))\nplt.title(\"Class Distribution\")\nplt.subplot2grid((2,3),(1,0), colspan=2)\n#\u7ed8\u5236\u4e86\u4e00\u7b49\u901a\u884c\u4eba\u5e74\u9f84\u7684\u5b50\u96c6\u7684\u6838\u5bc6\u5ea6\u4f30\u8ba1\ntitanic.Age[titanic.Pclass == 1].plot(kind='kde')\ntitanic.Age[titanic.Pclass == 2].plot(kind='kde')\ntitanic.Age[titanic.Pclass == 3].plot(kind='kde')\n# \u7ed8\u5236\u8f74\u6807\u7b7e\nplt.xlabel(\"Age\")\nplt.title(\"Age Distribution within classes\")\n# sssss\u4e3a\u6211\u4eec\u7684\u56fe\u8868\u8bbe\u7f6e\u6211\u4eec\u7684\u56fe\u4f8b\nplt.legend(('1st Class', '2nd Class','3rd Class'),loc='best')\nax5 = plt.subplot2grid((2,3),(1,2))\ntitanic.Embarked.value_counts().plot(kind='bar', alpha=alpha_bar_chart)\nax5.set_xlim(-1, len(titanic.Embarked.value_counts()))\n#\u6307\u5b9a\u6211\u4eec\u56fe\u7684\u53c2\u6570\nplt.title(\"Passengers per boarding location\")","e9e1a660":"#\u4f7f\u7528\u56de\u5f52\u7b97\u6cd5(\u4e8c\u5206\u7c7b)\u8fdb\u884c\u9884\u6d4b\n#\u7ebf\u6027\u56de\u5f52\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import KFold\n#\u4ea4\u53c9\u9a8c\u8bc1:\u5c06\u8bad\u7ec3\u6570\u636e\u96c6\u5206\u62103\u4efd\uff0c\u5bf9\u8fd9\u4e09\u4efd\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1\uff0c\u6bd4\u5982\u4f7f\u75281\uff0c2\u6837\u672c\u6d4b\u8bd5\uff0c3\u53f7\u6837\u672c\u9a8c\u8bc1\n#\u5bf9\u6700\u540e\u5f97\u5230\u5f97\u6570\u636e\u53d6\u5e73\u5747\u503c\n\n#\u9009\u4e2d\u4e00\u4e9b\u7279\u5f81\npredictors = [\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Embarked\"]\nalg = LinearRegression()\n#n_folds\u4ee3\u8868\u5c06\u6570\u636e\u5207\u5206\u62103\u4efd\uff0c\u5b58\u57283\u5c42\u7684\u4ea4\u53c9\u9a8c\u8bc1\uff0ctitanic.shape[0]\u4ee3\u8868\u6837\u672c\u4e2a\u6570\nkf = KFold(n_splits=3,shuffle=False, random_state=1)\n\npredictions = []\nfor train,test in kf.split(titanic):\n    #iloc\u901a\u8fc7\u884c\u53f7\u83b7\u53d6\u6570\u636e\n    train_predictors = titanic[predictors].iloc[train,:]\n    #\u83b7\u53d6\u5bf9\u5e94\u7684label\u503c\n    train_target = titanic[\"Survived\"].iloc[train]\n    #\u8fdb\u884c\u8bad\u7ec3\n    alg.fit(train_predictors,train_target)\n    #\u8fdb\u884c\u9884\u6d4b\n    test_predictors = alg.predict(titanic[predictors].iloc[test,:])\n    #\u5c06\u7ed3\u679c\u52a0\u5165\u5230list\u4e2d\n    predictions.append(test_predictors)","2e46b6ac":"from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.ensemble import RandomForestClassifier\n \npredictors = [\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\"]\n \n# Initialize our algorithm with the default paramters\n# n_estimators is the number of trees we want to make\n# min_samples_split is the minimum number of rows we need to make a split\n# min_samples_leaf is the minimum number of samples we can have at the place where a\n# tree branch(\u5206\u652f) ends (the bottom points of the tree)\nalg = RandomForestClassifier(random_state=1,\n                             n_estimators=10,\n                             min_samples_split=2,\n                             min_samples_leaf=1)\n# Compute the accuracy score for all the cross validation folds.  (much simpler than what we did before!)\nkf = KFold(n_splits=3, shuffle=False, random_state=1)\nscores = cross_val_score(alg, titanic[predictors], titanic[\"Survived\"], cv=kf)\n \n# Take the mean of the scores (because we have one for each fold)\nprint(scores.mean())","a5b4f8eb":"import numpy as np\n \n# The predictions are in three separate numpy arrays. Concatenate them into one.\n# We concatenate them on asix 0, as they only have one axis.\npredictions = np.concatenate(predictions,axis=0)\n \n# Map predictions to outcomes (only possible outcomes are 1 and 0)\npredictions[predictions > .5] = 1  # \u6620\u5c04\u6210\u5206\u7c7b\u7ed3\u679c \u8ba1\u7b97\u51c6\u786e\u7387\npredictions[predictions <= .5] = 0\n \n# \u6ce8\u610f\u8fd9\u4e00\u884c\u4e0e\u6e90\u4ee3\u7801\u6709\u51fa\u5165\naccuracy = sum(predictions==titanic['Survived'])\/len(predictions)\n \n# \u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u7387\nprint(accuracy)","dc279434":"\u7279\u5f81\u540d\u79f0\t\u7279\u5f81\u89e3\u91ca\n1. PassengerId   \t\u4e58\u5ba2id\uff0c\u5bf9\u7ed3\u679c\u6ca1\u6709\u5f71\u54cd\n2. Survived\t1\u8868\u793a\u5b58\u6d3b\uff0c0\u8868\u793a\u672a\u5b58\u6d3b\n3. Pclass\t\u8239\u8231\u7b49\u7ea7\uff0c\u8d8a\u6709\u94b1\u8239\u8231\u7b49\u7ea7\u8d8a\u9ad8\uff0c\u6240\u4ee5\u5bf9\u7ed3\u679c\u6709\u5f71\u54cd\n4. Name\t\u4e58\u5ba2\u540d\u5b57\uff0c\u5148\u6682\u65f6\u8ba4\u4e3a\u5bf9\u7ed3\u679c\u6ca1\u6709\u5f71\u54cd\n5. Sex\t\u6027\u522b\uff0c\u6beb\u65e0\u7591\u95ee\uff0c\u5973\u751f\u4f18\u5148\uff0c\u6240\u4ee5\u80af\u5b9a\u5bf9\u7ed3\u679c\u6709\u5f71\u54cd\n6. Age\t\u5e74\u9f84\uff0c\u4e0d\u7528\u8bf4\u8fd9\u5217\u4e5f\u6709\u5f71\u54cd\n7. SibSp\t\u5144\u5f1f\u59d0\u59b9\uff0c\u5bf9\u7ed3\u679c\u4e5f\u6709\u5f71\u54cd\n8. Parch\t\u7236\u6bcd\u548c\u5c0f\u5b69\uff0c\u4e0d\u7528\u8bf4\u4e5f\u6709\u5f71\u54cd\n9. Ticket\t\u7968\u7684\u7f16\u53f7\uff0c\u8c8c\u4f3c\u6ca1\u5565\u5f71\u54cd\n10. Fare \t\u8239\u7968\u4ef7\u683c\uff0c\u548c\u8239\u8231\u7b49\u7ea7\u4e00\u6837\uff0c\u4e0d\u80fd\u5ffd\u7565\n11. Cabin\t\u8239\u8231\u53f7\uff0c\u5e94\u8be5\u4e5f\u6ca1\u5565\u5f71\u54cd\n12. Embarked\t\u767b\u8239\u5730\u70b9\uff0c\u4e0d\u540c\u5730\u70b9\u767b\u8239\u53ef\u80fd\u8eab\u4efd\u4e0d\u4e00\u6837","4eb071e7":"\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u628a\"Embarked\"\u8fd9\u4e00\u5217\u6570\u636e\u8fdb\u884c\u540c\u6837\u7684\u5904\u7406 \u7f3a\u5931\u503cnan\u586b\u5145S \uff080\uff09","6cc49901":"\u4f7f\u7528 numpy \u67e5\u770b\u51c6\u786e\u7387","c54d2d46":"\u8bfb\u53d6titanic_train\u6570\u636e\u96c6\n\u53ef\u4ee5\u770b\u5230Age\u5217\u6709\u7f3a\u5931\u503c(NaN)\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6570\u636e\u53d1\u751f\u7f3a\u5931\u7684\u8bdd\u6709\u4e24\u79cd\u5904\u7406\u65b9\u6cd5\uff0c\u4e00\u79cd\u586b\u5145\u7f3a\u5931\u503c\uff0c\u4e00\u79cd\u76f4\u63a5\u820d\u5f03\u8fd9\u4e2a\u7279\u5f81\u3002\u8fd9\u91cc\u4e00\u822c\u6765\u8bf4Age\u5bf9\u7ed3\u679c\u662f\u6709\u8f83\u5927\u5f71\u54cd\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u7f3a\u5931\u503c\u8fdb\u884c\u586b\u5145\uff0c\u8fd9\u91cc\u53ef\u4ee5\u586b\u5145\u5e73\u5747\u503c \u3002 ","b5e4119a":"\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u4e00\u822c\u6765\u8bf4\u89e3\u51b3\u4e0d\u4e86\u5bf9\u5b57\u7b26\u7684\u5206\u7c7b\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u8981\u5bf9Survived\u8fd9\u5217\u2018\u20190\u2018\u2019\u548c\"1\"\u8fdb\u884c\u5206\u7c7b\u561b\u3002\u6240\u4ee5\u6211\u4eec\u5c31\u8981\u628a\"Sex\"\u8fd9\u4e00\u5217\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u628a\u5b83\u6620\u5c04\u4e3a\u6570\u503c\u578b\u3002\u90a3\u6211\u4eec\u5c31\u628a\"male\"\u548c\u201cfemale\u201d\u8fdb\u884c\u5904\u7406\uff0c\u5206\u522b\u75280\u548c1\u66ff\u4ee3\u3002","8ad230fb":"\u4e3aTitanic\u6570\u636e\u96c6\u751f\u6210\u4ea4\u53c9\u9a8c\u8bc1\u6298\u53e0\u3002\u5b83\u8fd4\u56de\u4e0e\u8bad\u7ec3\u548c\u6d4b\u8bd5\u76f8\u5bf9\u5e94\u7684\u884c\u7d22\u5f15\u3002\n# We set random_state to ensure we get the same splits every time we run this.\n# kf = KFold(titanic.shape[0], n_folds=3, random_state=1) \u5199\u6cd5\u9519\u8bef\u5df2\u88ab\u5f03\u7528"}}