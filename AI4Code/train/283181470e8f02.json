{"cell_type":{"11e55c31":"code","eac0bb4d":"code","554b6f38":"code","09ef5051":"code","5a97fced":"code","4de732ed":"code","3bc7bcf2":"code","85bf4bdc":"code","37dc210d":"code","1848185a":"code","e9927d94":"code","10e34ab3":"code","7d4df411":"code","22c35f48":"markdown","f48d2b72":"markdown"},"source":{"11e55c31":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eac0bb4d":"df = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/train.csv')\n# df_test = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/test.csv')\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')","554b6f38":"df = df.drop(columns = 'id')\n#df_test = df_test.drop(columns = 'id')","09ef5051":"x = df.drop(columns = 'target')\ny = df.target","5a97fced":"##create folds\nfrom sklearn import model_selection\ndf[\"kfold\"] = -1\n\ndf = df.sample(frac=1).reset_index(drop=True)\n\nkf = model_selection.StratifiedKFold(n_splits=5, shuffle=False, random_state=42)\n\nfor fold, (train_idx, val_idx) in enumerate(kf.split(X=df,y=df.target.values)):\n    print(len(train_idx), len(val_idx))\n    df.loc[val_idx, 'kfold'] = fold","4de732ed":"# params ={'device':['gpu'],'learning_rate': 0.1508067112491576, 'lambda_l1': 2.4697757781805905, 'lambda_l2': 9.083741442132819e-08, 'num_leaves': 23, 'feature_fraction': 0.6677259987024685, 'bagging_fraction': 0.6000000000000001, 'subsample': 0.8, 'min_child_samples': 35}","3bc7bcf2":"import joblib\nimport lightgbm as lgb\nimport xgboost as xg\nimport pandas as pd\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn import tree\ndef run(fold):\n    df_train = df[df.kfold != fold].reset_index(drop=True)\n    df_valid = df[df.kfold == fold].reset_index(drop=True)\n    df_train = df_train.drop(columns = 'kfold')\n    df_valid = df_valid.drop(columns = 'kfold')\n    x_train = df_train.drop('target', axis=1).values\n    y_train = df_train.target.values\n    x_valid = df_valid.drop('target', axis=1).values\n    y_valid = df_valid.target.values\n    clf = RandomForestClassifier()\n    clf.fit(x_train, y_train)\n    y_pred = clf.predict_proba(x_valid)[:,1]\n    roc_auc_score = metrics.roc_auc_score(y_valid,y_pred)\n    print(f\"Fold={fold}, roc_auc_score={roc_auc_score}\")\n    File_name = 'model_lgb' + str(fold)\n    joblib.dump(\n    clf,File_name)\nfor i in range(5):\n    run(fold = i)","85bf4bdc":"model_0_xgb= joblib.load('.\/model_lgb0')\nmodel_1_xgb =joblib.load('.\/model_lgb1')\nmodel_2_xgb= joblib.load('.\/model_lgb2')\nmodel_3_xgb= joblib.load('.\/model_lgb3')\nmodel_4_xgb= joblib.load('.\/model_lgb4')","37dc210d":"df_test = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/test.csv')\ndf_test = df_test.drop(columns = 'id')","1848185a":"y_final_3 = model_3_xgb.predict_proba(df_test)[:,1]\ny_final_0 = model_0_xgb.predict_proba(df_test)[:,1]\ny_final_1 = model_1_xgb.predict_proba(df_test)[:,1]\ny_final_2 = model_2_xgb.predict_proba(df_test)[:,1]\ny_final_4 = model_4_xgb.predict_proba(df_test)[:,1]","e9927d94":"y_final_avg = (y_final_0 + y_final_1 +y_final_2 + y_final_3 + y_final_4)\/5","10e34ab3":"submission['target'] = y_final_avg ","7d4df411":"submission.to_csv('pred_csv_avg.csv',index = False)","22c35f48":"## Ensemble","f48d2b72":"### Train.py"}}