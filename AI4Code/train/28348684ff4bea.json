{"cell_type":{"3241a7ca":"code","632dd169":"code","c32f1a31":"code","5b877637":"code","cf67746a":"code","fb5b85c9":"code","d67a8789":"code","61dbffab":"code","3c71cdc1":"code","4be4e3b9":"code","4bb47b51":"code","7d5ffde1":"code","bea316de":"code","41389f2c":"code","74694069":"code","de87acb0":"code","12b17a21":"code","6cb06e19":"code","fd8b3f0b":"code","d4bc7f8f":"code","62233368":"code","9def61c2":"code","ba430a1f":"code","a24f699e":"code","7f596a96":"code","065deb3c":"code","166e979e":"code","29f35841":"code","94b98ee8":"code","742f72b7":"code","5ba2a8c8":"code","3945487a":"code","ca13a147":"code","eb1cd5d2":"code","db49f5ba":"code","ab544eaa":"code","994f2836":"code","475aea2e":"code","88594d72":"code","d48b5614":"code","5d517242":"code","17257aa0":"code","260b5668":"code","10670938":"code","acc59c36":"code","c1587af5":"code","eea86460":"code","6e729101":"code","9d171035":"code","5d982bf0":"code","71a8a29e":"code","268d8f1c":"code","bbca3ee7":"code","42108854":"code","0eeb56f7":"code","0aa7dde9":"code","f4ec3ec7":"code","7334f2cd":"code","b8b76c4d":"code","0fe87eb2":"code","ee8d4dc0":"code","79034741":"code","ba1bd3f5":"code","ba794cc4":"code","399ab777":"code","de65fefd":"code","f17b9cb7":"code","068ec036":"code","864a3216":"code","f2d77277":"code","7d51bd09":"code","1ef89d44":"code","46a398e9":"markdown","0b059379":"markdown","14288177":"markdown","9e762ea6":"markdown","9f735218":"markdown","0f548d0b":"markdown","99dfb3cd":"markdown","349de261":"markdown","a0be9c56":"markdown","88eb750d":"markdown","48b62cd8":"markdown","c713ce6a":"markdown","a739198c":"markdown","d11a6962":"markdown","59db88ef":"markdown","424cbb9c":"markdown","a891d998":"markdown","17e77e21":"markdown","bedf6c5f":"markdown","a7639912":"markdown","9f8a13b4":"markdown","28aae9e7":"markdown","7fbcb736":"markdown","82c89b33":"markdown","e5ea1f66":"markdown","e18b4c00":"markdown","30cf4569":"markdown","939327d4":"markdown","62e1c8e1":"markdown","4eaf712c":"markdown","30a6cfb1":"markdown","0bc070c4":"markdown","ccc58b2b":"markdown","ed7383df":"markdown"},"source":{"3241a7ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","632dd169":"import pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import Pipeline\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n%matplotlib inline","c32f1a31":"dict_path  = '\/kaggle\/input\/GiveMeSomeCredit\/Data Dictionary.xls'\ntest_path  = '\/kaggle\/input\/GiveMeSomeCredit\/cs-test.csv'\ntrain_path = '\/kaggle\/input\/GiveMeSomeCredit\/cs-training.csv'\nsample     = '\/kaggle\/input\/GiveMeSomeCredit\/sampleEntry.csv'","5b877637":"pd.set_option('display.max_colwidth', -1)\ndata_info = pd.read_excel(dict_path,header=1)","cf67746a":"data_info","fb5b85c9":"train_df = pd.read_csv(train_path)\ntest_df  = pd.read_csv(test_path)","d67a8789":"train_null_sums = train_df.isnull().sum()\ntest_null_sums = test_df.isnull().sum()\nprint(f'train_null_sums: {train_null_sums}')\nprint(f'='*50)\nprint(f'test_null_sums: {test_null_sums}')","61dbffab":"# percentage of missing values\nprint(f\"[MonthlyIncome] missing values percentage: {train_df['MonthlyIncome'].isnull().sum()\/len(train_df)*100:.2f}%\")\nprint(f\"[NumberOfDependents] missing values percentage: {train_df['NumberOfDependents'].isnull().sum()\/len(train_df)*100:.2f}%\")","3c71cdc1":"# drop train_df unwanted col\ntrain_df.drop('Unnamed: 0',axis = 1,inplace=True)\n\n# drop test_df unwanted col\ntest_df.drop('Unnamed: 0',axis = 1,inplace=True)","4be4e3b9":"train_df.describe()","4bb47b51":"fig,[ax1,ax2,ax3]=plt.subplots(1,3,figsize=(25,6))\nsns.distplot(train_df['RevolvingUtilizationOfUnsecuredLines'],ax=ax1)\n\ntarget_0 = train_df.loc[train_df['SeriousDlqin2yrs'] == 0]\ntarget_1 = train_df.loc[train_df['SeriousDlqin2yrs'] == 1]\n\nsns.distplot(target_0[['RevolvingUtilizationOfUnsecuredLines']], hist=False ,ax=ax2, label='No default', axlabel='RevolvingUtilizationOfUnsecuredLines')\nsns.distplot(target_1[['RevolvingUtilizationOfUnsecuredLines']], hist=False ,ax=ax2, label='Default')\n\nsns.boxplot(y='RevolvingUtilizationOfUnsecuredLines',data=train_df,ax=ax3)","7d5ffde1":"fig,[ax1,ax2,ax3]=plt.subplots(1,3,figsize=(25,6))\nsns.distplot(train_df.loc[train_df['RevolvingUtilizationOfUnsecuredLines']<1,'RevolvingUtilizationOfUnsecuredLines'],ax=ax1)\nsns.distplot(train_df.loc[(train_df['RevolvingUtilizationOfUnsecuredLines']>=1)&(train_df['RevolvingUtilizationOfUnsecuredLines']<10),'RevolvingUtilizationOfUnsecuredLines'],ax=ax2)\nsns.distplot(train_df.loc[train_df['RevolvingUtilizationOfUnsecuredLines']>=10,'RevolvingUtilizationOfUnsecuredLines'],ax=ax3)","bea316de":"rev_below_1 = sum(train_df['RevolvingUtilizationOfUnsecuredLines']<1)\/len(train_df)*100\nrev_1_to_10 = sum((train_df['RevolvingUtilizationOfUnsecuredLines']>=1)&(train_df['RevolvingUtilizationOfUnsecuredLines']<10))\/len(train_df)*100\nrev_above_10 = sum(train_df['RevolvingUtilizationOfUnsecuredLines']>=10)\/len(train_df)*100\n\nprint(f'rev_below_1: {rev_below_1:.2}%')\nprint(f'rev_1_to_10: {rev_1_to_10:.2}%')\nprint(f'rev_above_10: {rev_above_10:.2}%')","41389f2c":"default_count_rev = {}\nfor i in range(12):\n    default_count_rev[i] = sum(train_df.loc[train_df['RevolvingUtilizationOfUnsecuredLines']<i,'SeriousDlqin2yrs'] == 1)\/len(train_df)","74694069":"default_count_rev","de87acb0":"x, y = zip(*default_count_rev.items())\nplt.plot(x, y)\nplt.xlabel('Threshold t')\nplt.ylabel('Percentage of defaulters under threshold t')\nplt.title('Percentage of defaulters under different thresholds')\nplt.show()","12b17a21":"print(f\"Percentage of removal: {sum(train_df['RevolvingUtilizationOfUnsecuredLines']>9)\/len(train_df)*100:.2f}%\")","6cb06e19":"fig,[ax1,ax2,ax3]=plt.subplots(1,3,figsize=(25,6))\nsns.distplot(train_df['age'],ax=ax1)\n\ntarget_0 = train_df.loc[train_df['SeriousDlqin2yrs'] == 0]\ntarget_1 = train_df.loc[train_df['SeriousDlqin2yrs'] == 1]\n\nsns.distplot(target_0[['age']], hist=False ,ax=ax2, label='No default', axlabel='age')\nsns.distplot(target_1[['age']], hist=False ,ax=ax2, label='Default')\n\nsns.boxplot(y='age',data=train_df,ax=ax3)","fd8b3f0b":"mean_age = train_df['age'].mean()\nstd_age  = train_df['age'].std()\nage_upper_limit = int(mean_age + 3 * std_age)\nage_lower_limit = int(mean_age - 3 * std_age)\nprint(f\"Upper limit: {age_upper_limit}\")\nprint(f\"Lower limit: {age_lower_limit}\")\nprint(f\"Percentage of population that falls above upper limit: {sum(train_df['age']>age_upper_limit)\/len(train_df)*100:.2f}%\")\nprint(f\"Percentage of population that falls below lower limit: {sum(train_df['age']<age_lower_limit)\/len(train_df)*100:.2f}%\")","d4bc7f8f":"fig,[ax1,ax2,ax3]=plt.subplots(1,3,figsize=(25,6))\nsns.distplot(train_df['DebtRatio'],ax=ax1)\n\ntarget_0 = train_df.loc[train_df['SeriousDlqin2yrs'] == 0]\ntarget_1 = train_df.loc[train_df['SeriousDlqin2yrs'] == 1]\n\nsns.distplot(target_0[['DebtRatio']], hist=False ,ax=ax2, label='No default', axlabel='DebtRatio')\nsns.distplot(target_1[['DebtRatio']], hist=False ,ax=ax2, label='Default')\n\nsns.boxplot(y='DebtRatio',data=train_df,ax=ax3)","62233368":"fig,[[ax1,ax2,ax3],[ax4,ax5,ax6],[ax7,ax8,ax9]]=plt.subplots(3,3,figsize=(25,15))\\\n\ntarget_0 = train_df.loc[train_df['SeriousDlqin2yrs'] == 0]\ntarget_1 = train_df.loc[train_df['SeriousDlqin2yrs'] == 1]\n\nsns.distplot(target_0.loc[target_0['DebtRatio']<1,'DebtRatio'], ax=ax1, label='No default', axlabel='DebtRatio')\nsns.distplot(target_1.loc[target_1['DebtRatio']<1,'DebtRatio'], ax=ax1, label='Default')\n\nsns.distplot(target_0.loc[(target_0['DebtRatio']>=1)&(target_0['DebtRatio']<10),'DebtRatio'], ax=ax2, label='No default', axlabel='DebtRatio')\nsns.distplot(target_1.loc[(target_1['DebtRatio']>=1)&(target_1['DebtRatio']<10),'DebtRatio'], ax=ax2, label='Default')\n\nsns.distplot(target_0.loc[(target_0['DebtRatio']>=10)&(target_0['DebtRatio']<100),'DebtRatio'], ax=ax3, label='No default', axlabel='DebtRatio')\nsns.distplot(target_1.loc[(target_1['DebtRatio']>=10)&(target_1['DebtRatio']<100),'DebtRatio'], ax=ax3, label='Default')\n\nsns.distplot(target_0.loc[(target_0['DebtRatio']>=100)&(target_0['DebtRatio']<1000),'DebtRatio'], ax=ax4, label='No default', axlabel='DebtRatio')\nsns.distplot(target_1.loc[(target_1['DebtRatio']>=100)&(target_1['DebtRatio']<1000),'DebtRatio'], ax=ax4, label='Default')\n\nsns.distplot(target_0.loc[(target_0['DebtRatio']>=1000)&(target_0['DebtRatio']<3000),'DebtRatio'], ax=ax5, label='No default', axlabel='DebtRatio')\nsns.distplot(target_1.loc[(target_1['DebtRatio']>=1000)&(target_1['DebtRatio']<3000),'DebtRatio'], ax=ax5, label='Default')\n\nsns.distplot(target_0.loc[(target_0['DebtRatio']>=3000)&(target_0['DebtRatio']<6000),'DebtRatio'], ax=ax6, label='No default', axlabel='DebtRatio')\nsns.distplot(target_1.loc[(target_1['DebtRatio']>=3000)&(target_1['DebtRatio']<6000),'DebtRatio'], ax=ax6, label='Default')\n\nsns.distplot(target_0.loc[(target_0['DebtRatio']>=6000)&(target_0['DebtRatio']<10000),'DebtRatio'], ax=ax7, label='No default', axlabel='DebtRatio')\nsns.distplot(target_1.loc[(target_1['DebtRatio']>=6000)&(target_1['DebtRatio']<10000),'DebtRatio'], ax=ax7, label='Default')\n\nsns.distplot(target_0.loc[(target_0['DebtRatio']>=10000)&(target_0['DebtRatio']<20000),'DebtRatio'], ax=ax8, label='No default', axlabel='DebtRatio')\nsns.distplot(target_1.loc[(target_1['DebtRatio']>=10000)&(target_1['DebtRatio']<20000),'DebtRatio'], ax=ax8, label='Default')\n\nsns.distplot(target_0.loc[(target_0['DebtRatio']>=20000),'DebtRatio'], ax=ax9, label='No default', axlabel='DebtRatio')\nsns.distplot(target_1.loc[(target_1['DebtRatio']>=20000),'DebtRatio'], ax=ax9, label='Default')","9def61c2":"debt_count_rev = {}\nfor i in range(0,20000,200):\n    debt_count_rev[i] = sum(train_df.loc[train_df['DebtRatio']<i,'SeriousDlqin2yrs'] == 1)\/len(train_df)","ba430a1f":"debt_count_rev","a24f699e":"x, y = zip(*debt_count_rev.items())\nplt.plot(x, y)\nplt.xlabel('Threshold t')\nplt.ylabel('Percentage of defaulters under threshold t')\nplt.title('Percentage of defaulters under different thresholds')\nplt.show()","7f596a96":"print(f\"Percentage of removal: {sum(train_df['DebtRatio']>10000)\/len(train_df)*100:.2f}%\")","065deb3c":"Debt2_after=train_df[train_df['DebtRatio']>=1]\nfigure=plt.figure(figsize=(12,6))\nsns.distplot(Debt2_after['DebtRatio'])","166e979e":"fig,[ax1,ax2]=plt.subplots(1,2,figsize=(20,6))\nsns.distplot(train_df['NumberOfOpenCreditLinesAndLoans'],ax=ax1)\nsns.boxplot(y=train_df['NumberOfOpenCreditLinesAndLoans'],ax=ax2)","29f35841":"figure=plt.figure(figsize=(12,6))\nsns.countplot(train_df['NumberOfOpenCreditLinesAndLoans'])","94b98ee8":"train_df.loc[train_df['NumberOfOpenCreditLinesAndLoans']>36,'NumberOfOpenCreditLinesAndLoans']=36\ncount_open = train_df.groupby(['NumberOfOpenCreditLinesAndLoans'])['SeriousDlqin2yrs'].sum()\ntotal_open = train_df.groupby(['NumberOfOpenCreditLinesAndLoans'])['SeriousDlqin2yrs'].count()\nratio_open = count_open\/total_open\nratio_open.plot(kind='bar',figsize=(12,6),color='#4682B4', ylabel='Default Rate')","742f72b7":"sum(train_df['NumberOfOpenCreditLinesAndLoans']>36)\/len(train_df)","5ba2a8c8":"fig,[ax1,ax2]=plt.subplots(1,2,figsize=(20,6))\nsns.distplot(train_df['NumberRealEstateLoansOrLines'],ax=ax1)\nsns.boxplot(y=train_df['NumberRealEstateLoansOrLines'],ax=ax2)","3945487a":"figure=plt.figure(figsize=(12,6))\nsns.countplot(train_df['NumberRealEstateLoansOrLines'])","ca13a147":"train_df.loc[train_df['NumberRealEstateLoansOrLines']>8,'NumberRealEstateLoansOrLines']=8\ncount_open = train_df.groupby(['NumberRealEstateLoansOrLines'])['SeriousDlqin2yrs'].sum()\ntotal_open = train_df.groupby(['NumberRealEstateLoansOrLines'])['SeriousDlqin2yrs'].count()\nratio_open = count_open\/total_open\nratio_open.plot(kind='bar',figsize=(12,6),color='#4682B4',ylabel='Default Rate')","eb1cd5d2":"fig,[ax1,ax2]=plt.subplots(1,2,figsize=(20,6))\nsns.countplot(train_df['NumberOfDependents'],ax=ax1)\nsns.boxplot(y=train_df['NumberOfDependents'],ax=ax2)","db49f5ba":"train_df['NumberOfDependents'].isnull().sum()","ab544eaa":"train_df['MonthlyIncome'].isnull().sum()","994f2836":"train_df.loc[(train_df['NumberOfDependents'].isnull())&(train_df['MonthlyIncome'].isnull()),:].shape[0]","475aea2e":"sns.countplot(train_df.loc[(train_df['NumberOfDependents'].notnull())&(train_df['MonthlyIncome'].isnull()),:]['NumberOfDependents'])","88594d72":"fig,[ax1,ax2,ax3]=plt.subplots(1,3,figsize=(20,6))\nsns.boxplot(y=train_df['NumberOfTime30-59DaysPastDueNotWorse'],ax=ax1)\nsns.boxplot(y=train_df['NumberOfTime60-89DaysPastDueNotWorse'],ax=ax3)\nsns.boxplot(y=train_df['NumberOfTimes90DaysLate'],ax=ax2)","d48b5614":"past30 = train_df['NumberOfTime30-59DaysPastDueNotWorse']>80\npast60 = train_df['NumberOfTime60-89DaysPastDueNotWorse']>80\npast90 = train_df['NumberOfTimes90DaysLate']>80\n\nprint(f'past30: {sum(past30)}')\nprint(f'past60: {sum(past60)}')\nprint(f'past90: {sum(past90)}')\n\nprint(f'past30 & past60 & past90: {len(train_df.loc[(past30)&(past60)&(past90),:])}')","5d517242":"fig,[ax1,ax2,ax3]=plt.subplots(1,3,figsize=(25,6))\nsns.distplot(train_df['MonthlyIncome'],ax=ax1)\n\ntarget_0 = train_df.loc[train_df['SeriousDlqin2yrs'] == 0]\ntarget_1 = train_df.loc[train_df['SeriousDlqin2yrs'] == 1]\n\nsns.distplot(target_0[['MonthlyIncome']], hist=False ,ax=ax2, label='No default', axlabel='MonthlyIncome')\nsns.distplot(target_1[['MonthlyIncome']], hist=False ,ax=ax2, label='Default')\n\nsns.boxplot(y='MonthlyIncome',data=train_df,ax=ax3)","17257aa0":"fig,[ax1,ax2]=plt.subplots(1,2,figsize=(25,10))\n\ntarget_0 = train_df.loc[train_df['SeriousDlqin2yrs'] == 0]\ntarget_1 = train_df.loc[train_df['SeriousDlqin2yrs'] == 1]\n\nsns.distplot(target_0.loc[(target_0['MonthlyIncome']>=1)&(target_0['MonthlyIncome']<20000),'MonthlyIncome'], ax=ax1, label='No default', axlabel='MonthlyIncome')\nsns.distplot(target_1.loc[(target_1['MonthlyIncome']>=1)&(target_1['MonthlyIncome']<20000),'MonthlyIncome'], ax=ax1, label='Default')\n\nsns.distplot(target_0.loc[(target_0['MonthlyIncome']>=20000)&(target_0['MonthlyIncome']<100000),'MonthlyIncome'], ax=ax2, label='No default', axlabel='MonthlyIncome')\nsns.distplot(target_1.loc[(target_1['MonthlyIncome']>=20000)&(target_1['MonthlyIncome']<100000),'MonthlyIncome'], ax=ax2, label='Default')","260b5668":"plt.figure(figsize=(12,10))\nsns.heatmap(train_df.corr(), annot=True, cmap=plt.cm.CMRmap_r)\nplt.show()","10670938":"sns.pairplot(train_df, hue=\"SeriousDlqin2yrs\", diag_kws={'bw': 0.2})","acc59c36":"print(f\"Percentage of default: {sum(train_df['SeriousDlqin2yrs'] == 1)\/len(train_df)*100:.2f}%\")\nprint(f\"Percentage of non-default: {sum(train_df['SeriousDlqin2yrs'] == 0)\/len(train_df)*100:.2f}%\")\nsns.countplot('SeriousDlqin2yrs', data=train_df)","c1587af5":"train_df = pd.read_csv(train_path)\ntest_df  = pd.read_csv(test_path)","eea86460":"def transformation(df,\n                   split,\n                   age_lower_limit=None, age_upper_limit=None,\n                   debt_threshold=None,\n                   revol_threshold=20,\n                   numlate_threshold=80,\n                   numreal_threshold=8,\n                   numopen_threshold=36,\n                   numdepend_miss=0,\n                   monthincome_miss='mean'\n                   ):\n    \n    df.drop('Unnamed: 0',axis = 1,inplace=True)\n    \n    assert split in ['train','test'], 'split must be train or test'\n    \n    if split=='train':\n        # Filter age\n        df = df[df['age']>age_lower_limit]\n        df = df[df['age']<age_upper_limit]\n\n        # Filter RevolvingUtilizationOfUnsecuredLines\n        df = df[df['RevolvingUtilizationOfUnsecuredLines']<revol_threshold]\n\n        # Filter NumberOfTimes##DaysLate\n        df = df[df['NumberOfTime30-59DaysPastDueNotWorse']<=numlate_threshold]\n        df = df[df['NumberOfTime60-89DaysPastDueNotWorse']<=numlate_threshold]\n        df = df[df['NumberOfTimes90DaysLate']<=numlate_threshold]\n\n        # Filter DebtRatio\n        df = df[df['DebtRatio']<=debt_threshold]\n    \n        # Regroup NumberRealEstateLoansOrLines\n        df.loc[df['NumberRealEstateLoansOrLines']>numreal_threshold,'NumberRealEstateLoansOrLines']=numreal_threshold\n\n        # Regroup NumberOfOpenCreditLinesAndLoans\n        df.loc[df['NumberOfOpenCreditLinesAndLoans']>numopen_threshold,'NumberOfOpenCreditLinesAndLoans']=numopen_threshold\n\n    # Handling missing values\n    # Fill NumberOfDependents missing values with 0\n    df.loc[df['NumberOfDependents'].isnull(),'NumberOfDependents'] = numdepend_miss\n    \n    assert monthincome_miss in ['mean','median'], 'Monthly income must be filled with median or mean'\n    \n    # Fill MonthlyIncome missing values\n    if monthincome_miss == 'mean':\n        df.loc[df['MonthlyIncome'].isnull(),'MonthlyIncome'] = df['MonthlyIncome'].mean()\n    else:\n        df.loc[df['MonthlyIncome'].isnull(),'MonthlyIncome'] = df['MonthlyIncome'].median()\n    \n    return df","6e729101":"train_df = transformation(train_df, split='train',\n                          revol_threshold=9,\n                          age_lower_limit=age_lower_limit,\n                          age_upper_limit=age_upper_limit,\n                          debt_threshold=10000)\ntest_df  = transformation(test_df, split='test')","9d171035":"train_null_sums = train_df.isnull().sum()\ntest_null_sums = test_df.isnull().sum()\nprint(f'train_null_sums: {train_null_sums}')\nprint(f'='*50)\nprint(f'test_null_sums: {test_null_sums}')","5d982bf0":"train_x = train_df.iloc[:,1:]\ntrain_y = train_df['SeriousDlqin2yrs']\ntest_x = test_df.iloc[:,1:]","71a8a29e":"import xgboost as xgb\nfrom sklearn import model_selection","268d8f1c":"params = {'subsample': 0.7,\n          'n_estimators':1000,\n          'min_child_weight': 9.0,\n          'objective': 'binary:logistic',\n          'gamma': 0.65,\n          'max_depth': 6,\n          'max_delta_step': 1.8,\n          'colsample_bytree': 0.5,\n          'eta': 0.01,\n          'tree_method':'gpu_hist'}\nxg_cls = xgb.XGBClassifier(**params)\ncross_val_score(xg_cls, train_x, train_y, scoring='roc_auc')","bbca3ee7":"# training\nxg_cls.fit(train_x, train_y)\n\n# inference\npreds_xgb_classifier = xg_cls.predict_proba(test_x)\npreds_xgb_classifier = np.clip(preds_xgb_classifier, a_min = 0., a_max = 1.)\n\n# submission\nsampleEntry = pd.read_csv(sample)\nsampleEntry['Probability'] = preds_xgb_classifier[:,1]\nexport_csv = sampleEntry.to_csv('export_dataframe.csv',index = None,header=True)","42108854":"import shap\nshap.initjs()\n\nexplainer = shap.TreeExplainer(xg_cls)","0eeb56f7":"shap_values = explainer.shap_values(test_x)","0aa7dde9":"shap.summary_plot(shap_values, test_x, plot_type=\"bar\")","f4ec3ec7":"shap.summary_plot(shap_values, test_x)","7334f2cd":"params = {'subsample': 0.7,\n          'n_estimators':1000,\n          'min_child_weight': 9.0,\n          'objective': 'binary:logistic',\n          'gamma': 0.65,\n          'max_depth': 6,\n          'max_delta_step': 1.8,\n          'colsample_bytree': 0.5,\n          'eta': 0.01,\n          'tree_method':'gpu_hist'}\nxg_reg = xgb.XGBRegressor(**params)\ncross_val_score(xg_reg, train_x, train_y, scoring='roc_auc')","b8b76c4d":"# training\nxg_reg.fit(train_x,train_y)\n\n# inference\npreds_xgb_regressor = xg_reg.predict(test_x)\npreds_xgb_regressor = np.clip(preds_xgb_regressor, a_min = 0., a_max = 1.)","0fe87eb2":"from sklearn.neural_network import MLPRegressor\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler","ee8d4dc0":"scaler = MinMaxScaler()\ntrain_x_ = scaler.fit_transform(train_x)\ntrain_x_ = pd.DataFrame(train_x_, index=train_x.index, columns=train_x.columns)\n\ntest_x_ = scaler.fit_transform(test_x)\ntest_x_ = pd.DataFrame(test_x_, index=test_x.index, columns=test_x.columns)","79034741":"mlpreg = MLPRegressor(random_state=1,\n                      max_iter=100,\n                      hidden_layer_sizes=(100,)).fit(train_x_, train_y)\ncross_val_score(mlpreg, train_x_, train_y, scoring='roc_auc')","ba1bd3f5":"preds_mlpregr = mlpreg.predict(test_x_)\npreds_mlpregr = np.clip(preds_mlpregr, a_min = 0., a_max = 1.)","ba794cc4":"from sklearn.neural_network import MLPClassifier","399ab777":"mlpcls = MLPClassifier(random_state=1,\n                       max_iter=400,\n                       hidden_layer_sizes=(100,),\n                       learning_rate='adaptive').fit(train_x_, train_y)\ncross_val_score(mlpcls, train_x_, train_y, scoring='roc_auc')","de65fefd":"preds_mlpcls = mlpcls.predict_proba(test_x_)\npreds_mlpcls = preds_mlpcls[:,1]\npreds_mlpcls = np.clip(preds_mlpcls, a_min = 0., a_max = 1.)","f17b9cb7":"import keras\nimport tensorflow as tf\nfrom keras import Sequential\nfrom keras.layers import LeakyReLU, PReLU, ELU, Dense, Dropout, Input","068ec036":"# model initializer\ninitializer = tf.keras.initializers.HeUniform()\n\n# build model\ndeep_classifier = Sequential()\ndeep_classifier.add(Input(shape=(10,)))\ndeep_classifier.add(Dense(100,kernel_initializer=initializer,activation='relu',name=\"layer1\"))\ndeep_classifier.add(Dense(1,kernel_initializer=initializer,activation='sigmoid',name=\"classifier\"))\n\ndeep_classifier.compile(loss=tf.keras.losses.BinaryCrossentropy(), \n                        optimizer='Adam')\n\n# start training\nmodel_history = deep_classifier.fit(train_x_.values,\n                                    train_y.values,\n                                    validation_split=0.1,\n                                    batch_size=10,\n                                    epochs=10,\n                                    callbacks=[tf.keras.callbacks.EarlyStopping(patience=2)])","864a3216":"train_preds_deep_model = deep_classifier.predict(train_x_.values)\nroc_auc_score(train_y.values,train_preds_deep_model)","f2d77277":"preds_deep_model = deep_classifier.predict(test_x_.values)","7d51bd09":"preds = (preds_xgb_classifier + preds_xgb_regressor + preds_mlpregr)\/3","1ef89d44":"sampleEntry = pd.read_csv(sample)\nsampleEntry['Probability'] = preds\nexport_csv = sampleEntry.to_csv('export_dataframe.csv',index = None,header=True)","46a398e9":"### DebtRatio","0b059379":"double check the missing values","14288177":"### RevolvingUtilizationOfUnsecuredLines","9e762ea6":"It seems like 80 is a good threshold to filter out the outliers","9f735218":"## Data Preprocessing","0f548d0b":"### Baseline -> random guess result","99dfb3cd":"Some observations:\n- it is interesting to see that when the [NumberOfDependents]() are missing, the record for the [MonthlyIncome]() is also missing\n- majority of the [NumberOfDependents]() with no missing value is 0","349de261":"## [Optional] Extra experiments for other classifiers","a0be9c56":"## XGB Regressor","88eb750d":"## XGB Classifier","48b62cd8":"## MLP Classifier","c713ce6a":"This is the main classifier. I was able to achieve 0.86822 for the private score.","a739198c":"### NumberOfDependents","d11a6962":"### Pearson correlation matrix","59db88ef":"### Feature importance","424cbb9c":"## EDA","a891d998":"### Outlier analysis","17e77e21":"### Number of borrower due (30-59,60-89,90)","bedf6c5f":"The classifiers below does not contribute better accuracy than the xgb_classifier. Hence, I only run experiments to test their output accuracy. For the submission, I used the result from the xgb_classifier.","a7639912":"### Age distribution","9f8a13b4":"Observations:\n1. most of the records are under 1 (around 98% of the population)","28aae9e7":"### NumberRealEstateLoansOrLines","7fbcb736":"### Missing values","82c89b33":"## Combining and outputing result for all","e5ea1f66":"Some observations:\n- it is surprising to learn that the default rate is not at the lowest when the number of real estate loan is 0.","e18b4c00":"## Import library","30cf4569":"## Keras Deep Learning Model","939327d4":"## MLP Regressor","62e1c8e1":"Observations:\n\n1. [RevolvingUtilizationOfUnsecuredLines]() has 75% of the values fall under 1, but its maximum value is 50708.\n2. [age]() feature has range from 0-109.\n3. Both [MonthlyIncome](19.82%) and [NumberOfDepenents](2.62%) features have missing values.\n","4eaf712c":"### NumberOfOpenCreditLinesAndLoans","30a6cfb1":"There are more good records (93.32%) than bad records (6.68%)","0bc070c4":"You can average the predictions result from various classifiers to boost your final accuracy","ccc58b2b":"### Monthly Income","ed7383df":"The distribution of the [age]() feature looks normal, but it has some outliers as shown in the boxplot.\n\nWe can use standard deviation to remove the outliers"}}