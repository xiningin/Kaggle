{"cell_type":{"5ff619bf":"code","af9f0f76":"code","4a71420d":"code","293c572b":"code","2a07caa8":"code","b030348c":"code","e71a2fd5":"code","34bd8435":"markdown","9369ca98":"markdown","8389cc6a":"markdown","ea3c01a5":"markdown","be1ec1d7":"markdown","80981c55":"markdown","9ac7568f":"markdown","81110a3c":"markdown","816865d7":"markdown","7070811a":"markdown","46bbf69c":"markdown","d181d7d3":"markdown"},"source":{"5ff619bf":"import numpy as np\nimport pandas as pd\nfrom numpy.random import default_rng\nfrom scipy.cluster import hierarchy\nimport matplotlib.pyplot as plt\n!pip install celluloid\nfrom celluloid import Camera\nimport seaborn as sns\nfrom matplotlib.animation import FuncAnimation","af9f0f76":"rng = default_rng(5003)\n# generating data (that I know comes from two groups)\nX1 = rng.normal(loc=2.0, scale=0.5, size=20).reshape((10,2))\nX2 = rng.normal(loc=-2.0, scale=0.5, size=20).reshape((10,2))\nX3 = rng.normal(loc=-5.0, scale=0.5, size=20).reshape((10,2))\nX4 = rng.normal(loc=5.0, scale=0.5, size=20).reshape((10,2))\nX5 = rng.normal(loc=0.0, scale=0.5, size=20).reshape((10,2))\n\ndummy_data = np.vstack([X1, X2, X3, X4, X5])\ndummy_data.shape","4a71420d":"Z = hierarchy.linkage(dummy_data)\ngrps = hierarchy.cut_tree(Z,5).ravel()\ncolors = np.array(['b','g','r','m','k','y','c'])\nfig=plt.figure()\nax=fig.add_axes([0,0,1,1])\nax.scatter(dummy_data[:,0], dummy_data[:, 1], facecolor=colors[grps]); \nax.set_title('Clustering Algo Output');","293c572b":"#credit : https:\/\/stackoverflow.com\/questions\/44575681\/how-do-i-encircle-different-data-sets-in-scatter-plot\ndef encircle(x,y, ax=None, **kw):\n    if not ax: ax=plt.gca()\n    p = np.c_[x,y]\n    mean = np.mean(p, axis=0)\n    d = p-mean\n    r = np.max(np.sqrt(d[:,0]**2+d[:,1]**2 ))\n    circ = plt.Circle(mean, radius=1.05*r,**kw)\n    ax.add_patch(circ)","2a07caa8":"#colors = np.array(['b','g','r','m','k','y','c'])\nfig=plt.figure()\nax=fig.add_axes([0,0,1,1])\ndata = pd.DataFrame(dummy_data)\ndata.columns =['x','y']\ngrps = hierarchy.cut_tree(Z,5).ravel()\ndata['Group']=grps\nax.scatter(dummy_data[:,0], dummy_data[:, 1], facecolor=colors[data.Group]); \nax.set_title('Clustering Algo Output');\nencircle(data[data.Group==0].x,data[data.Group==0].y,ec=\"r\", fc=\"gold\", alpha=0.2)\nencircle(data[data.Group==1].x,data[data.Group==1].y,ec=\"k\", fc=\"red\", alpha=0.2)\nencircle(data[data.Group==2].x,data[data.Group==2].y,ec=\"k\", fc=\"blue\", alpha=0.2)\nencircle(data[data.Group==3].x,data[data.Group==3].y,ec=\"k\", fc=\"green\", alpha=0.2)\nencircle(data[data.Group==4].x,data[data.Group==4].y,ec=\"k\", fc=\"gray\", alpha=0.2)\n\nplt.gca().relim()\nplt.gca().autoscale_view()\nplt.show()\n","b030348c":"from celluloid import Camera\ncolors = np.array(['b','g','r','m','k','y','c'])\ndata = pd.DataFrame(dummy_data)\ndata.columns =['x','y']\nfig = plt.figure()\ncamera = Camera(fig)\n\nfor i in range(1,7):\n    grps = hierarchy.cut_tree(Z,i).ravel()\n    data['Group']=grps\n    plt.scatter(data.x, data.y, facecolor=colors[data.Group])\n    for j in range(len(data.Group.unique())):\n        encircle(data[data.Group==j].x,data[data.Group==j].y,ec=\"k\", fc=colors[j], alpha=0.1)\n    camera.snap()\n\nanim = camera.animate()\nanim.save('animation1.gif',writer='imagemagick')","e71a2fd5":"from matplotlib.animation import FuncAnimation\nfig = plt.figure()\ndef animate(i):\n    grps = hierarchy.cut_tree(Z,i).ravel()\n    data['Group']=grps\n    plt.scatter(data.x, data.y, facecolor=colors[data.Group])\n    for j in range(len(data.Group.unique())):\n        encircle(data[data.Group==j].x,data[data.Group==j].y,ec=\"k\", fc=colors[j], alpha=0.1)\n    \nplt.legend()    \nani = FuncAnimation(fig, animate, frames=6, repeat=True)\nanim.save('animation2.gif', writer='imagemagick')","34bd8435":"## Hierarchical Clustering steps :\n<img src=\".\/animation1.gif\" width=\"500\" align=\"center\">\n\n## Scroll down below to learn to create such cool GIFs and Please upvote if you like this kernal!","9369ca98":"### Now we just visualize the Single plot with all the circles around known clusters.","8389cc6a":"## Method 1 for GIF : library celluloid\n### In this, we just take the snapshot at different plots created from hierarchical clustering at different cut_tree.","ea3c01a5":"<img src=\".\/animation2.gif\" width=\"500\" align=\"center\">","be1ec1d7":"<img src=\".\/animation1.gif\" width=\"500\" align=\"center\">","80981c55":"## Method 2 for GIF : library matplotlib.animation\n### In this, we simply define the animate function from matplotlib and specify how many frames we want in the animation and Thats it!!!","9ac7568f":"### Now, perform hierarchical clustering and specify how may clusters you want by cutting the tree. Next, just plot the data and colour different clusters.","81110a3c":"## Agenda of this Notebook :\n<div class=\"alert alert-block alert-success\">  \n<li> Understand Hierarchical Clustering in Python<\/li>\n<li> Create cool GIFs\/ Videos in python from matplotlib plots by two libraries : \n    celluloid and matplotlib.animation<\/li>\n<\/div>","816865d7":"### Define the function to encircle the data points in the same cluster.\nIn this we basically find the mean of the points in the same cluster, define the radius and draw the circle. So simple!","7070811a":"### First import all the important libraries","46bbf69c":"### Generate random data for clustering :\nWe generate the five clusters just for the purpose of illustration. You may apply this kernel on real data too.","d181d7d3":"# Please Upvote if you enjoyed this kernel!!!"}}