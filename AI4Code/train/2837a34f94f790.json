{"cell_type":{"21613589":"code","43d10d0a":"code","3f2fd0f8":"code","c7c460ac":"code","99228409":"code","d6e15cb2":"code","b6422c0f":"code","7f71afc5":"code","e0d639a2":"code","3ebc8df5":"code","2817b772":"code","a738867b":"code","83b6a722":"code","3a4ea8a7":"code","79aaa2a1":"code","b0336a1a":"code","74e9c93d":"code","120afd78":"code","bbfa6884":"code","0baf57ca":"code","703090bc":"code","6768bf93":"code","95de7a4c":"code","f331473a":"code","706ae491":"code","994f9fc2":"code","e1dc5266":"code","270c6dfd":"code","509acfaa":"code","7de1d4ee":"code","2869e6f7":"code","d357cf52":"code","67a2f62b":"code","102264f0":"code","d4467b1d":"code","8e2ba658":"code","f9e7c8a1":"code","44bfed87":"code","ed40e1c8":"code","9cf56ae8":"code","bad3c11d":"code","c0e47b23":"code","e9a9eef0":"code","ade45a93":"code","dde62b03":"code","ca4de397":"code","18589298":"code","0cf124f5":"code","590439ff":"code","cb7c6b91":"code","89b27640":"code","c18e5eba":"code","bd65db3c":"code","a9595dcc":"code","f35c0218":"code","4cb2c225":"code","fcf840a6":"code","e9107c99":"code","b2828fa2":"code","acfa8571":"code","a5b511b7":"code","7b41b1d0":"code","a5ae1560":"code","cb28573c":"code","d14dec07":"code","063d4e18":"code","9a49015f":"code","2b3b2201":"code","d2526924":"code","ad1a445c":"code","0b6b2f8c":"code","27386588":"code","16a7dbe1":"code","05243334":"code","8da6b224":"code","40928547":"code","99af61da":"code","c58d069e":"code","68e22942":"code","9027692a":"code","7f7f4787":"code","41fd0049":"code","546ac1f7":"code","2b3cde38":"code","8f31aff7":"code","3ad0f618":"code","730b51be":"code","2e8edc45":"code","0919045e":"code","501b1284":"code","0fb0ff80":"markdown","34245a8f":"markdown","32b1feda":"markdown","5a02bda1":"markdown","8b376535":"markdown","bc069c07":"markdown","f9a0fe89":"markdown","de298a78":"markdown","82875347":"markdown","fe4472ea":"markdown","fc02f7fd":"markdown","2b5613b2":"markdown","ba54b708":"markdown","d5bb674e":"markdown"},"source":{"21613589":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.datasets import load_iris\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay, roc_auc_score\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.datasets import mnist, fashion_mnist\nfrom keras.models import Sequential\nfrom keras.layers import Flatten, Dense","43d10d0a":"print('Tensorflow (Vers\u00e3o): {}'.format(tf.__version__))\nprint('Keras (Vers\u00e3o): {}'.format(keras.__version__))","3f2fd0f8":"pd.options.display.max_columns = None","c7c460ac":"sns.set(font_scale=1.4)\nsns.set_style({'font.family': 'serif',\n               'fontname': 'Times New Roman'})","99228409":"mpl.rcParams['figure.dpi'] = 100","d6e15cb2":"iris_data = load_iris()","b6422c0f":"print(iris_data.DESCR)","7f71afc5":"iris_df = pd.DataFrame(iris_data['data'], \n                       columns=iris_data['feature_names'])","e0d639a2":"iris_df['SPC'] = pd.Series(iris_data['target']).map({0: 'Iris-Setosa', \n                                                     1: 'Iris-Versicolour',\n                                                     2: 'Iris-Virginica'})\n\niris_df['TYPE'] =  iris_data['target']\n\niris_df.head()","3ebc8df5":"sns.pairplot(iris_df.loc[:, 'sepal length (cm)':'SPC'], hue='SPC', height=3)\nplt.show()","2817b772":"X = iris_df.loc[:,'sepal length (cm)':'petal width (cm)'].to_numpy()\ny = iris_df['TYPE'].to_numpy()","a738867b":"X_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.25, \n                                                    random_state=0)","83b6a722":"print('Amostras de treino:')\nprint(f' * X_train: {X_train.shape}')\nprint(f' * y_train: {y_train.shape}')\n\nprint('Amostras de teste:')\nprint(f' * X_test: {X_test.shape}')\nprint(f' * y_test: {y_test.shape}')","3a4ea8a7":"perceptron_model = Perceptron(verbose=0)","79aaa2a1":"cv = KFold(n_splits = 3, \n           shuffle = True, \n           random_state=0)\n\nn_scores = cross_val_score(perceptron_model, \n                           X_train, y_train, \n                           scoring = 'accuracy', \n                           cv = cv)","b0336a1a":"print('Valida\u00e7\u00e3o Cruzada\\n')\nprint(f'Acur\u00e1cias: {n_scores}\\n')\nprint(f'Acur\u00e1cias (m\u00e9dia): {round(np.mean(n_scores), 4)}')\nprint(f'Acur\u00e1cias (desvio padr\u00e3o): {round(np.std(n_scores), 4)}')","74e9c93d":"perceptron_model.fit(X_train, y_train)","120afd78":"print('Perceptron')\nprint(f'Acur\u00e1cia: {round(accuracy_score(y_test, perceptron_model.predict(X_test)), 4)}')","bbfa6884":"print(classification_report(y_test, perceptron_model.predict(X_test), \n                            target_names=pd.Series(perceptron_model.classes_).map({0: 'Iris-Setosa', \n                                                                                   1: 'Iris-Versicolour',\n                                                                                   2: 'Iris-Virginica'})))","0baf57ca":"fig, ax = plt.subplots(figsize=(8,8))\n\ncm = confusion_matrix(y_test, perceptron_model.predict(X_test), labels=perceptron_model.classes_)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                              display_labels=pd.Series(perceptron_model.classes_).map({0: 'Iris-Setosa', \n                                                                                       1: 'Iris-Versicolour',\n                                                                                       2: 'Iris-Virginica'}))\n\ndisp.plot(cmap=plt.cm.Blues, ax=ax)\n\nplt.show()","703090bc":"mlp_model = MLPClassifier(max_iter=600,\n                          random_state=0,\n                          verbose=0)","6768bf93":"cv = KFold(n_splits = 3, \n           shuffle = True, \n           random_state=0)\n\nn_scores = cross_val_score(mlp_model, \n                           X_train, y_train, \n                           scoring = 'accuracy', \n                           cv = cv)","95de7a4c":"print('Valida\u00e7\u00e3o Cruzada\\n')\nprint(f'Acur\u00e1cias: {n_scores}\\n')\nprint(f'Acur\u00e1cias (m\u00e9dia): {round(np.mean(n_scores), 4)}')\nprint(f'Acur\u00e1cias (desvio padr\u00e3o): {round(np.std(n_scores), 4)}')","f331473a":"mlp_model.fit(X_train, y_train)","706ae491":"print('MLP')\nprint(f'Acur\u00e1cia: {round(accuracy_score(y_test, mlp_model.predict(X_test)), 4)}')","994f9fc2":"print(classification_report(y_test, mlp_model.predict(X_test), \n                            target_names=pd.Series(mlp_model.classes_).map({0: 'Iris-Setosa', \n                                                                            1: 'Iris-Versicolour',\n                                                                            2: 'Iris-Virginica'})))","e1dc5266":"fig, ax = plt.subplots(figsize=(8,8))\n\ncm = confusion_matrix(y_test, mlp_model.predict(X_test), labels=mlp_model.classes_)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                              display_labels=pd.Series(mlp_model.classes_).map({0: 'Iris-Setosa', \n                                                                                1: 'Iris-Versicolour',\n                                                                                2: 'Iris-Virginica'}))\n\ndisp.plot(cmap=plt.cm.Blues, ax=ax)\n\nplt.show()","270c6dfd":"y_train[0]","509acfaa":"y_train = keras.utils.to_categorical(y_train, num_classes=3)\ny_test = keras.utils.to_categorical(y_test, num_classes=3)","7de1d4ee":"y_train[0]","2869e6f7":"mlp_model = Sequential()\nmlp_model.add(Dense(8,input_shape=(4,),activation='relu'))\nmlp_model.add(Dense(4, activation='relu'))\nmlp_model.add(Dense(3, activation='softmax'))","d357cf52":"mlp_model.summary()","67a2f62b":"mlp_model.layers","102264f0":"weights, biases = mlp_model.layers[1].get_weights()\nweights","d4467b1d":"weights.shape","8e2ba658":"biases.shape","f9e7c8a1":"mlp_model.compile(loss='categorical_crossentropy',\n                  optimizer='Adam',\n                  metrics=['accuracy'])","44bfed87":"callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)\n\nhist = mlp_model.fit(X_train, \n                     y_train, \n                     epochs=300,\n                     verbose=0,\n                     validation_data=(X_test, y_test),\n                     callbacks=[callback])","ed40e1c8":"pd.DataFrame(hist.history).plot(figsize=(10,5))\nplt.gca().set_ylim(0,1)\nplt.gca().legend(loc='upper right', bbox_to_anchor=(1.3, 1.02), shadow=False)\nplt.show()","9cf56ae8":"score = mlp_model.evaluate(X_test, y_test, verbose=0)\nprint('Loss:', score[0])\nprint('Accuracy:', score[1])","bad3c11d":"print(classification_report(np.argmax(y_test, axis=1),\n                            np.argmax(mlp_model.predict(X_test), axis=1),\n                            target_names=pd.Series(['Iris-Setosa', \n                                                    'Iris-Versicolour', \n                                                    'Iris-Virginica'])))","c0e47b23":"fig, ax = plt.subplots(figsize=(8,8))\n\ncm = confusion_matrix(np.argmax(y_test, axis=1),\n                      np.argmax(mlp_model.predict(X_test), axis=1))\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                              display_labels=pd.Series(['Iris-Setosa', \n                                                        'Iris-Versicolour', \n                                                        'Iris-Virginica']))\n\ndisp.plot(cmap=plt.cm.Blues, ax=ax)\n\nplt.show()","e9a9eef0":"(X_train, y_train), (X_test, y_test) = mnist.load_data()","ade45a93":"print('Amostras de treino:')\nprint(f' * X_train: {X_train.shape}')\nprint(f' * y_train: {y_train.shape}')\n\nprint('Amostras de teste:')\nprint(f' * X_test: {X_test.shape}')\nprint(f' * y_test: {y_test.shape}')","dde62b03":"img_index = 0","ca4de397":"print(X_train[img_index])","18589298":"print(y_train[img_index])","0cf124f5":"plt.imshow(X_train[img_index])\nplt.show()","590439ff":"X_train = X_train.astype('float32') \/ 255\nX_test = X_test.astype('float32') \/ 255","cb7c6b91":"print(X_train[img_index])","89b27640":"plt.imshow(X_train[img_index])\nplt.show()","c18e5eba":"X_train = X_train.reshape(X_train.shape[0], 28*28)\nX_test = X_test.reshape(X_test.shape[0], 28*28)","bd65db3c":"perceptron_model = Perceptron()","a9595dcc":"%%time\n\ncv = KFold(n_splits = 3, \n           shuffle = True, \n           random_state=0)\n\nn_scores = cross_val_score(perceptron_model, \n                           X_train, y_train, \n                           scoring = 'accuracy', \n                           cv = cv)","f35c0218":"print('Valida\u00e7\u00e3o Cruzada\\n')\nprint(f'Acur\u00e1cias: {n_scores}\\n')\nprint(f'Acur\u00e1cias (m\u00e9dia): {round(np.mean(n_scores), 4)}')\nprint(f'Acur\u00e1cias (desvio padr\u00e3o): {round(np.std(n_scores), 4)}')","4cb2c225":"perceptron_model.fit(X_train, y_train)","fcf840a6":"accuracy_score(y_test, perceptron_model.predict(X_test))","e9107c99":"print('Perceptron')\nprint(f'Acur\u00e1cia: {round(accuracy_score(y_test, perceptron_model.predict(X_test)), 4)}')","b2828fa2":"print(classification_report(y_test, \n                            perceptron_model.predict(X_test)))","acfa8571":"fig, ax = plt.subplots(figsize=(10,10))\n\ncm = confusion_matrix(y_test, perceptron_model.predict(X_test), labels=perceptron_model.classes_)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm)\n\ndisp.plot(cmap=plt.cm.Blues, ax=ax)\n\nplt.show()","a5b511b7":"mlp_model = MLPClassifier(max_iter=600,\n                          hidden_layer_sizes=(100,),\n                          activation='relu',\n                          solver='adam',\n                          random_state=0,\n                          verbose=0)","7b41b1d0":"%%time\n\ncv = KFold(n_splits = 3, \n           shuffle = True, \n           random_state=0)\n\nn_scores = cross_val_score(mlp_model, \n                           X_train, y_train, \n                           scoring = 'accuracy', \n                           cv = cv)","a5ae1560":"print('Valida\u00e7\u00e3o Cruzada\\n')\nprint(f'Acur\u00e1cias: {n_scores}\\n')\nprint(f'Acur\u00e1cias (m\u00e9dia): {round(np.mean(n_scores), 4)}')\nprint(f'Acur\u00e1cias (desvio padr\u00e3o): {round(np.std(n_scores), 4)}')","cb28573c":"mlp_model.fit(X_train, y_train)","d14dec07":"print('MLP')\nprint(f'Acur\u00e1cia: {round(accuracy_score(y_test, mlp_model.predict(X_test)), 4)}')","063d4e18":"print(classification_report(y_test, \n                            mlp_model.predict(X_test)))","9a49015f":"fig, ax = plt.subplots(figsize=(10,10))\n\ncm = confusion_matrix(y_test, mlp_model.predict(X_test), labels=mlp_model.classes_)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm)\n\ndisp.plot(cmap=plt.cm.Blues, ax=ax)\n\nplt.show()","2b3b2201":"y_train = keras.utils.to_categorical(y_train, num_classes=10)\ny_test = keras.utils.to_categorical(y_test, num_classes=10)","d2526924":"mlp_model = Sequential()\nmlp_model.add(Dense(50,input_shape=(784,),activation='relu'))\nmlp_model.add(Dense(25, activation='relu'))\nmlp_model.add(Dense(10, activation='softmax'))","ad1a445c":"mlp_model.summary()","0b6b2f8c":"mlp_model.compile(loss='categorical_crossentropy',\n                  optimizer='Adam',\n                  metrics=['accuracy'])","27386588":"callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)\n\nhist = mlp_model.fit(X_train, \n                     y_train, \n                     epochs=10,\n                     verbose=1,\n                     validation_data=(X_test, y_test),\n                     callbacks=[callback])","16a7dbe1":"pd.DataFrame(hist.history).plot(figsize=(10,5))\nplt.gca().set_ylim(0,1)\nplt.gca().legend(loc='upper right', bbox_to_anchor=(1.3, 1.02), shadow=False)\nplt.show()","05243334":"score = mlp_model.evaluate(X_test, y_test, verbose=0)\nprint('Loss:', score[0])\nprint('Accuracy:', score[1])","8da6b224":"print(classification_report(np.argmax(y_test, axis=1),\n                            np.argmax(mlp_model.predict(X_test), axis=1)))","40928547":"fig, ax = plt.subplots(figsize=(8,8))\n\ncm = confusion_matrix(np.argmax(y_test, axis=1),\n                      np.argmax(mlp_model.predict(X_test), axis=1))\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm)\n\ndisp.plot(cmap=plt.cm.Blues, ax=ax)\n\nplt.show()","99af61da":"(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()","c58d069e":"print('Amostras de treino:')\nprint(f' * X_train: {X_train.shape}')\nprint(f' * y_train: {y_train.shape}')\n\nprint('Amostras de teste:')\nprint(f' * X_test: {X_test.shape}')\nprint(f' * y_test: {y_test.shape}')","68e22942":"img_index = 0","9027692a":"print(X_train[img_index])","7f7f4787":"print(y_train[img_index])","41fd0049":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', \n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","546ac1f7":"class_names[y_train[img_index]]","2b3cde38":"plt.imshow(X_train[img_index])\nplt.show()","8f31aff7":"X_train = X_train.astype('float32') \/ 255\nX_test = X_test.astype('float32') \/ 255","3ad0f618":"print(X_train[img_index])","730b51be":"plt.imshow(X_train[img_index])\nplt.show()","2e8edc45":"### Continua\u00e7\u00e3o ###","0919045e":"### Continua\u00e7\u00e3o ###","501b1284":"### Continua\u00e7\u00e3o ###","0fb0ff80":"# Redes Neurais Artificiais\n\n* T\u00f3picos abordados:\n    * Problemas de classifica\u00e7\u00e3o em aprendizagem de m\u00e1quina;\n    * Perceptron;\n    * Multilayer Perceptron;\n    * Problemas de classifica\u00e7\u00e3o em aprendizagem de m\u00e1quina;\n    * M\u00e9tricas para avalia\u00e7\u00e3o de modelos:\n        * Acur\u00e1cia;\n        * F1;\n        * Precis\u00e3o;\n        * Revoca\u00e7\u00e3o;\n        * Valida\u00e7\u00e3o cruzada.","34245a8f":"### Perceptron","32b1feda":"### Multilayer Perceptron (Keras)","5a02bda1":"### Multilayer Perceptron (Keras)","8b376535":"## 2) Base de dados: MNIST\n* [MNIST](https:\/\/keras.io\/api\/datasets\/mnist\/)","bc069c07":"## 3) Desafio - Base de dados: Fashion MNIST\n\n* [Fashion MNIST](https:\/\/keras.io\/api\/datasets\/fashion_mnist\/)","f9a0fe89":"### Divis\u00e3o em treino e teste","de298a78":"### Multilayer Perceptron (Scikit-Learn)","82875347":"### Perceptron\n\n* [Perceptron](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.Perceptron.html)","fe4472ea":"### Multilayer Perceptron (Scikit-Learn)","fc02f7fd":"### Multilayer Perceptron (Keras)","2b5613b2":"### Perceptron","ba54b708":"## 1) Base de dados: Iris","d5bb674e":"### Multilayer Perceptron (Scikit-Learn)\n\n* [MLPClassifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neural_network.MLPClassifier.html#sklearn.neural_network.MLPClassifier)"}}