{"cell_type":{"dbfb535b":"code","c37e892c":"code","695b60e6":"code","ac7bdc64":"code","667cfae5":"code","b1f0e090":"code","38a439ad":"code","67267a4d":"code","9cddca43":"code","913f4727":"code","a5751d3f":"code","e6db994d":"code","ff26a7da":"code","b676fd5e":"code","63fd6375":"code","2530f871":"code","bed50cdd":"code","606115e3":"code","0b248782":"code","2fb9c921":"markdown","8668b40e":"markdown","b2044fd7":"markdown","421afc57":"markdown","314d9b09":"markdown","f8bf6f4e":"markdown","5e268882":"markdown","ab8c7fb8":"markdown","d7956c94":"markdown","38e6706d":"markdown","9b14b480":"markdown","1e13d39f":"markdown","582dbe06":"markdown","babedf39":"markdown","7132e3c0":"markdown","6358321d":"markdown","6ea2ad4c":"markdown","cf880a9b":"markdown","c3939aa3":"markdown","c3236748":"markdown"},"source":{"dbfb535b":"import numpy as np\nimport pandas as pd\nimport re\nimport operator\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesRegressor\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold\nfrom sklearn.feature_selection import SelectKBest, f_classif","c37e892c":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\ntarget = train[\"Survived\"].values","695b60e6":"full = pd.concat([train, test], sort=False)","ac7bdc64":"title_mapping = {\n    \"Mr\": 1, \n    \"Miss\": 2,\n    \"Ms\": 2,\n    \"Mlle\": 2, \n    \"Mrs\": 3,\n    \"Mme\": 3, \n    \"Master\": 4, \n    \"Dr\": 5, \n    \"Rev\": 6, \n    \"Major\": 7, \n    \"Col\": 7,\n    \"Capt\": 7, \n    \"Sir\": 9,\n    \"Don\": 9,\n    \"Dona\": 9, \n    \"Lady\": 10, \n    \"Countess\": 10, \n    \"Jonkheer\": 10 \n}\n\nfull[\"Title\"] = full[\"Name\"].apply(lambda x: re.search(' ([A-Za-z]+)\\.', x).group(1))\n\nfull[\"TitleCat\"] = full['Title'].map(title_mapping)","667cfae5":"full[\"FamilySize\"] = full[\"SibSp\"] + full[\"Parch\"] + 1\nfull[\"FamilySize\"] = pd.cut(full[\"FamilySize\"], bins=[0, 1, 4, 20], labels=[0, 1, 2])","b1f0e090":"full[\"NameLength\"] = full[\"Name\"].apply(lambda x: len(x))","38a439ad":"full[\"Embarked\"] = pd.Categorical(full.Embarked).codes","67267a4d":"full[\"Fare\"] = full[\"Fare\"].fillna(full[\"Fare\"].mean())","9cddca43":"full = pd.concat([full, pd.get_dummies(full['Sex'])], axis=1)","913f4727":"def get_type_cabine(cabine):\n    cabine_search = re.search('\\d+', cabine)\n\n    if cabine_search:\n        num = cabine_search.group(0)\n        if np.float64(num) % 2 == 0:\n            return '2'\n        else:\n            return '1'\n    return '0'\n    \nfull['CabinCat'] = pd.Categorical(full.Cabin.fillna('0').apply(lambda x: x[0])).codes\n\nfull[\"Cabin\"] = full[\"Cabin\"].fillna(\" \")\n\nfull[\"CabinType\"] = full[\"Cabin\"].apply(get_type_cabine)","a5751d3f":"child_age = 18\ndef get_person(passenger):\n    age, sex = passenger\n    if (age < child_age):\n        return 'child'\n    elif (sex == 'female'):\n        return 'female_adult'\n    else:\n        return 'male_adult'\n\nfull = pd.concat([full, pd.DataFrame(full[['Age', 'Sex']].apply(get_person, axis=1), columns=['person'])], axis=1)\nfull = pd.concat([full, pd.get_dummies(full['person'])], axis=1)","e6db994d":"table_ticket = pd.DataFrame(full[\"Ticket\"].value_counts())\ntable_ticket.rename(columns={'Ticket':'Ticket_Members'}, inplace=True)\n\n# Women\ntable_ticket['Ticket_perishing_women'] = full.Ticket[(full.female_adult == 1.0) & (full.Survived == 0.0) &\n                                                    ((full.Parch > 0) | (full.SibSp > 0))].value_counts()\ntable_ticket['Ticket_perishing_women'] = table_ticket['Ticket_perishing_women'].fillna(0)\ntable_ticket['Ticket_perishing_women'][table_ticket['Ticket_perishing_women'] > 0] = 1.0 \n\n# Men\ntable_ticket['Ticket_surviving_men'] = full.Ticket[(full.male_adult == 1.0)  & (full.Survived == 1.0) & \n                                                    ((full.Parch > 0) | (full.SibSp > 0))].value_counts()\ntable_ticket['Ticket_surviving_men'] = table_ticket['Ticket_surviving_men'].fillna(0)\ntable_ticket['Ticket_surviving_men'][table_ticket['Ticket_surviving_men'] > 0] = 1.0 \n\ntable_ticket[\"Ticket_Id\"]= pd.Categorical(table_ticket.index).codes\ntable_ticket[\"Ticket_Id\"][table_ticket[\"Ticket_Members\"] < 3 ] = -1\ntable_ticket[\"Ticket_Members\"] = pd.cut(table_ticket[\"Ticket_Members\"], bins=[0, 1, 4, 20], labels=[0, 1, 2])\n\n# Join full and table_ticket\nfull = pd.merge(full, table_ticket, left_on=\"Ticket\", right_index=True, how='left', sort=False)","ff26a7da":"# Capture surname\nfull['surname'] = full[\"Name\"].apply(lambda x: x.split(',')[0].lower())\n\ntable_surname = pd.DataFrame(full[\"surname\"].value_counts())\ntable_surname.rename(columns={'surname':'Surname_Members'}, inplace=True)\n\n# Women\ntable_surname['Surname_perishing_women'] = full.surname[ (full.female_adult == 1.0) & (full.Survived == 0.0) & \n                                                         ((full.Parch > 0) | (full.SibSp > 0)) ].value_counts()\ntable_surname['Surname_perishing_women'] = table_surname['Surname_perishing_women'].fillna(0)\ntable_surname['Surname_perishing_women'][table_surname['Surname_perishing_women'] > 0] = 1.0 \n\n# Men\ntable_surname['Surname_surviving_men'] = full.surname[ (full.male_adult == 1.0) & (full.Survived == 1.0) & \n                                                      ( (full.Parch > 0) | (full.SibSp > 0) ) ].value_counts()\ntable_surname['Surname_surviving_men'] = table_surname['Surname_surviving_men'].fillna(0)\ntable_surname['Surname_surviving_men'][table_surname['Surname_surviving_men'] > 0] = 1.0 \n\n\ntable_surname[\"Surname_Id\"] = pd.Categorical(table_surname.index).codes\ntable_surname[\"Surname_Id\"][table_surname[\"Surname_Members\"] < 3 ] = -1\ntable_surname[\"Surname_Members\"] = pd.cut(table_surname[\"Surname_Members\"], bins=[0, 1, 4, 20], labels=[0, 1, 2])\n\n# Join full and table_surname\nfull = pd.merge(full, table_surname, left_on=\"surname\", right_index=True, how='left', sort=False)","b676fd5e":"classers = ['Fare','Parch','Pclass','SibSp','TitleCat', \n            'CabinCat','female','male', 'Embarked', 'FamilySize', \n            'NameLength','Ticket_Members','Ticket_Id']\n\netr = ExtraTreesRegressor(n_estimators=200)\n\nX_train = full[classers][full['Age'].notnull()]\nY_train = full['Age'][full['Age'].notnull()]\nX_test = full[classers][full['Age'].isnull()]\n\netr.fit(X_train, np.ravel(Y_train))\nage_preds = etr.predict(X_test)\n\nfull['Age'][full['Age'].isnull()] = age_preds","63fd6375":"features = ['female', 'male', 'Age', 'male_adult', 'female_adult', 'child', 'TitleCat', 'Pclass',\n            'Pclass', 'Ticket_Id', 'NameLength', 'CabinType', 'CabinCat', 'SibSp', 'Parch',\n            'Fare', 'Embarked', 'Surname_Members', 'Ticket_Members', 'FamilySize',\n            'Ticket_perishing_women', 'Ticket_surviving_men',\n            'Surname_perishing_women', 'Surname_surviving_men']\n\ntrain = full[0:891].copy()\ntest = full[891:].copy()","2530f871":"rfc = RandomForestClassifier(n_estimators=3000, min_samples_split=4, class_weight={0: 0.745, 1: 0.255})","bed50cdd":"kf = StratifiedKFold(n_splits=10, random_state=42)\n\nscores = cross_val_score(rfc, train[features], target, cv=kf)\nprint(\"Accuracy: {:.3f} (+\/- {:.2f}) [{}]\".format(scores.mean()*100, scores.std()*100, 'Cross Validation'))\n\nrfc.fit(train[features], target)\nscore = rfc.score(train[features], target)\nprint(\"Accuracy: {:.3f}            [{}]\".format(score*100, 'Simple test'))","606115e3":"rfc.fit(train[features], target)\npredictions = rfc.predict(test[features])","0b248782":"submission_df = {\n    \"PassengerId\": test[\"PassengerId\"],\n    \"Survived\": predictions\n}\nsubmission = pd.DataFrame(submission_df)\n\nsubmission.to_csv(\"submission.csv\", index=False)","2fb9c921":"## **3. Clean, prepare and manipulate Data (feature engineering)**","8668b40e":"### **3.9 Ticket**","b2044fd7":"# **Titanic: Machine Learning from Disaster whith RandomForest**\n**Steps**\n1. Load Libraries\n2. Get data\n3. Clean, prepare and manipulate Data (feature engineering)\n4. Modeling (train and test)\n5. Creating a submission file","421afc57":"### **4.2 Model**","314d9b09":"### **3.11 Age**\nUsing ExtraTreeRegressor to fill in missing values \u200b\u200bfrom the age column.","f8bf6f4e":"### **3.5 Fare**","5e268882":"## **5. Creating a submission file**","ab8c7fb8":"### **3.3 Name Length**","d7956c94":"## **4. Modeling (train and test)**","38e6706d":"### **3.6 Sex**","9b14b480":"### **3.4 Embarked**","1e13d39f":"### **3.8 Separating child, female adult, male adult**","582dbe06":"### **3.1 Title**","babedf39":"## **1. Load Libraries**","7132e3c0":"### **3.10 Surname**","6358321d":"### **4.3 Cross-validation**","6ea2ad4c":"## **2. Get data**","cf880a9b":"### **4.1 Feeture Selection and separating train and test**","c3939aa3":"### **3.7 Cabin**","c3236748":"### **3.2 Family Size**"}}