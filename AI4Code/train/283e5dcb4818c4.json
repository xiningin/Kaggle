{"cell_type":{"f9902c43":"code","fc731f82":"code","e6bd7088":"code","c024c088":"code","ea80699f":"code","5b01569a":"code","2104805a":"code","57ec2719":"code","ba4ca4ee":"code","567e08d1":"code","b41875b1":"code","686b6111":"code","6f5ae9dd":"code","60a34b74":"code","859bc1e3":"code","535b8b31":"code","49a1f57b":"code","5a7eccd2":"code","9950a972":"code","e9bfff7f":"code","635c0d19":"code","847088a8":"code","cb27cd76":"code","a2dfc278":"code","1e8e1b02":"code","5e6a1996":"code","ed2cef3d":"code","f3e4c2e8":"code","51ef23d6":"code","039355f7":"code","370d60f0":"code","bd44d6a7":"code","42be6c55":"code","3637d491":"code","b22e941b":"code","240ab8ca":"code","64c86057":"code","91313d95":"code","8230d2a9":"code","4e9767b7":"code","287e851a":"code","e8df239e":"code","60186d82":"code","75258fd2":"code","dcb90342":"code","3b34b3cf":"code","d6beb66b":"code","b70b49d3":"code","9a048c64":"code","50101961":"code","f2bd2429":"code","9f633470":"code","680481cf":"code","f53517b5":"code","f027f2ff":"code","73f54f89":"code","c30d87f0":"code","4397534e":"code","aee7eba2":"code","6391bb8a":"code","e2117379":"code","23935a64":"code","d15debca":"code","a302359f":"code","843cca3b":"code","70530260":"code","99804d92":"code","e7dc8803":"code","cccd035d":"code","548b4e1c":"code","9dc3f1a0":"code","144f5aee":"code","55d055f0":"code","4cde1e43":"code","afa582e4":"code","752c89d6":"code","0adadfe7":"code","0adb24bb":"code","30a09ab9":"code","cda0664c":"code","6601bc77":"code","704f9ede":"code","1e39bf5f":"code","587f1f14":"code","df3bb345":"code","54f8224f":"code","b0decc6e":"code","21685794":"code","a21fa74b":"code","f17ac89d":"markdown","ad377be0":"markdown","913578e6":"markdown","7cdf9640":"markdown","5444450c":"markdown","d99c3379":"markdown","59e092d0":"markdown","66c9f4ba":"markdown","1a996ec9":"markdown","c932dc9c":"markdown","74485093":"markdown","798dbb55":"markdown","a5242ea2":"markdown","ce942441":"markdown","d66e428b":"markdown","b452497a":"markdown","dd7e4659":"markdown"},"source":{"f9902c43":"# For local time and timing the runtime of the whole notebook\n\nfrom datetime import datetime\nimport pytz\nimport datetime\nIST = pytz.timezone('Asia\/Kolkata')\nstart=datetime.datetime.now(IST).replace(microsecond=0)\ns_hrs=start.time()\nprint(\"Notebook started on:\",start.date(),\"at\",s_hrs,\"hrs\")","fc731f82":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nimport sys\nprint(\"Import Done\")\n!cp ..\/input\/rapids\/rapids.21.06 \/opt\/conda\/envs\/rapids.tar.gz\nprint(\"Done 1 of 6\")\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nprint(\"Done 2 of 6\")\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\/site-packages\"] + sys.path\nprint(\"Done 3 of 6\")\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\"] + sys.path\nprint(\"Done 4 of 6\")\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \nprint(\"Done 5 of 6\")\n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/\nprint(\"Done 6 of 6\")\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","e6bd7088":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\n!conda install -y gdown \nimport gdown\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","c024c088":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\n!gdown https:\/\/drive.google.com\/uc?id=14TFLzeO2vMGPSrTKfCHmtMo1kxVA8140\n!gdown https:\/\/drive.google.com\/uc?id=1bRHdmq-EbNSLk9rGMMI4GTa0IuIvmT_D\n# !gdown https:\/\/drive.google.com\/uc?id=1tshTpfr67ntWHxcRE1PvHmbJ7qSVMyne\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","ea80699f":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")\n\nimport pandas\n# import numpy as np\nimport cudf as pd\nimport cupy as np\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","5b01569a":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")\n\nvisit_log=pd.read_csv(\".\/VisitorLogsData.csv\")\nuser_table=pd.read_csv(\".\/userTable.csv\")\n# submission=pd.read_csv(\".\/sample_submission_M7Vpb9f.csv\")\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","2104805a":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nprint(visit_log.columns)\nprint(user_table.columns)\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","57ec2719":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nprint(\"Visit Log Table:\\n\")\nprint(visit_log)\nprint(\"\\n\\n\")\nprint(\"User Table:\\n\")\nprint(user_table)\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","ba4ca4ee":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\n# Calculating Missing Values\n\nprint(\"Missing Values in the Visit Log:\\n\")\nprint(visit_log.isnull().sum())\nprint(\"\\nShape of the table:\",visit_log.shape)\nprint(\"\\n\\n\")\nprint(\"Missing Values in the User Table:\\n\")\nprint(user_table.isnull().sum())\nprint(\"\\nShape of the table:\",user_table.shape)\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","567e08d1":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nprint(6588000-5937305) # Calculating the amount of data remaining after subtracting the missing values in the UserID column\nprint((5937305\/6588000)*100) # Calculating the percentage of the missing values in the UserID column\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","b41875b1":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nvisit_log.dropna(axis=0, inplace=True, subset=['UserID']) # Deleting the rows with blank UserIDs\nprint(visit_log.shape)\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","686b6111":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nprint(\"Merging Tables\")\ndata=pd.merge(visit_log, user_table, how='left', on='UserID') # Merging the data on the basis of UserID\nprint(\"Tables merged\")\ndel visit_log, user_table\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","6f5ae9dd":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nprint(\"Merged Table Data:\\n\")\ndata=data.rename(columns = {'Signup Date':'Signup_Date','User Segment':'User_Segment'})\nprint(data)\nprint(\"\\n\\n\")\nprint(\"Data Types of the columns:\\n\")\nprint(data.dtypes)\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","60a34b74":"print(data.isnull().sum())","859bc1e3":"data","535b8b31":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\n# Counting the Disctinct values of the User_ID to check with the final table\n\nprint(data.UserID.nunique())\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","49a1f57b":"data=data.iloc[0:442473]\ndata=data.copy()","5a7eccd2":"data","9950a972":"# Defining the date referencing to which the required features will be extracted from the data\n\nprint(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\ntoday=(pandas.Timestamp('2018-05-28')).date()\nprint(type(today))\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","e9bfff7f":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n \n# Fetching the datetime from the VisitDateTime column and converting it to the standard date and time format\n \nk=[]\nl=[]\ndate=[]\ndiff=[]\nprev=[]\nfor i in range(0,len(data)):\n    a=data.VisitDateTime[i]\n    if type(data.VisitDateTime[i])==pd.core.scalar._NAType:  # For Nan Values\n        w=pandas.NaT\n        m=pandas.NaT\n        di=pandas.NaT\n    elif len(a)==19:\n        d=datetime.datetime.fromtimestamp(int(a[:10]))\n        w=(d.timestamp())\n        m=(d.date())\n        di=(today-m).days\n    elif len(a)==23:\n        d=datetime.datetime.strptime(a,'%Y-%m-%d %H:%M:%S.%f')\n        w=(d.timestamp())\n        m=(d.date())\n        di=(today-m).days\n    else:\n        pass\n    k.append(w)\n    l.append(m)\n    print(\"For \",i,\" of \",len(data))\n    print(\"Visit_Date is: \",m)\n    print(\"Visit_Time is: \",w)\n    print(\"Till_date is: \",di)\n    diff.append(di)\n    del a,w,m,di\n    \n \n    dat=data.Signup_Date[i]\n    if len(dat)==32:\n        a=datetime.datetime.strptime(dat,'%Y-%m-%d %H:%M:%S.%f%z')\n    else:\n        a=datetime.datetime.strptime(dat,'%Y-%m-%d %H:%M:%S%z')\n    dt=a.date()\n    date.append(dt)\n    vi=today-dt\n    print(\"Signup_Date is: \",dt)\n    print(\"Vintage of the User is:\",vi.days,\"\\n\")\n    prev.append(vi.days)\n    del vi,dt,a\n\ndata['Visit_Time']=k\ndata['Visit_Date']=l\ndata['Signup_Date']=date\ndata['Till_date']=diff\ndata['Vintage']=prev\ndel k,l,date, prev\ndata['ProductID']=data['ProductID'].str.upper()\ndata['OS']=data['OS'].str.upper()\ndata['Activity']=data['Activity'].str.upper()\n \ndata=pd.get_dummies(data,columns=['Activity'])\ndel diff\ndata.drop(columns=[\"VisitDateTime\"], axis=1, inplace=True)\n \nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","635c0d19":"%whos DataFrame","847088a8":"data","cb27cd76":"data.to_csv(\"Final Df.csv\",index=False)\ndel data","a2dfc278":"data=pd.read_csv(\".\/Final Df.csv\")\nprint(data)","1e8e1b02":"data","5e6a1996":"last_7=data[data['Till_date']<=7][['UserID','Visit_Date']]","ed2cef3d":"last_7=last_7.copy()\nlast_7=last_7.reset_index()\nlast_7.drop(columns=['index'], inplace=True)\nlast_7","f3e4c2e8":"del data","51ef23d6":"#Grouping the data using pivot\n#Reset_index to bring the header in the same level\n\nprint(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nlast_7=last_7.to_pandas()\nvisit=(last_7.pivot_table(index=['UserID'], \n                          values=['Visit_Date'], \n                          aggfunc={'Visit_Date':'count'})).reset_index()\ndel last_7\nprint(visit)\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","039355f7":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nprint(\"Renaming Columns as per the requirement\")\nvisit.columns=['UserID', \n             'No_of_days_Visited_7_Days']\nprint(\"Renaming done.\\n Now writing to csv for future use\")\nvisit.to_csv(\"visit.csv\",index=False)\nprint(\"Wrtten to csv successfully.\\nNow deleting from the memory.\")\ndel visit\nprint(\"Successfully Deleted !!!\")\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","370d60f0":"%whos DataFrame","bd44d6a7":"data=pd.read_csv(\".\/Final Df.csv\")\nprint(data)","42be6c55":"last_15_view_no=data[data['Till_date']<=15][['UserID','Visit_Date']]","3637d491":"last_15_view_no=last_15_view_no.copy()\nlast_15_view_no=last_15_view_no.reset_index()\nlast_15_view_no.drop(columns=['index'], inplace=True)\nlast_15_view_no","b22e941b":"del data","240ab8ca":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\n#Grouping the data using pivot\n#Reset_index to bring the header in the same level\n\nlast_15_view_no=last_15_view_no.to_pandas()\nviews=(last_15_view_no.pivot_table(index=['UserID'], \n                                   values=['Visit_Date'], \n                                   aggfunc={'Visit_Date':'count'})).reset_index()\ndel last_15_view_no\nprint(views)\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","64c86057":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nprint(\"Renaming Columns as per the requirement\")\nviews.columns=['UserID', \n             'No_Of_Products_Viewed_15_Days']\nprint(\"Renaming done.\\n Now writing to csv for future use\")\nviews.to_csv(\"views.csv\",index=False)\nprint(\"Wrtten to csv successfully.\\nNow deleting from the memory.\")\ndel views\nprint(\"Successfully Deleted !!!\")\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","91313d95":"%whos DataFrame","8230d2a9":"data=pd.read_csv(\".\/Final Df.csv\")\nprint(data)","4e9767b7":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nvin=data[['UserID','Vintage']]                              # Extracting the required feature's information\nvin=vin.copy()\ndel data\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","287e851a":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nprint(\"Renaming Columns as per the requirement\")\nvin.columns=['UserID',\n             'User_Vintage']\nprint(\"Renaming done.\\n Now writing to csv for future use\")\nvin.to_csv(\"vin.csv\",index=False)\nprint(\"Wrtten to csv successfully.\\nNow deleting from the memory.\")\ndel vin\nprint(\"Successfully Deleted !!!\")\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","e8df239e":"%whos DataFrame","60186d82":"data=pd.read_csv(\".\/Final Df.csv\")\nprint(data)","75258fd2":"last_15_most_view=data.query('Till_date <=15 & Activity_PAGELOAD==1')[['UserID','ProductID','Visit_Date','Visit_Time']]","dcb90342":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nlast_15_most_view=last_15_most_view.copy()\nlast_15_most_view=last_15_most_view.reset_index()\nlast_15_most_view.drop(columns=['index'], inplace=True)\nlast_15_most_view\nprint(last_15_most_view)\ndel data\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","3b34b3cf":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nx=(last_15_most_view.groupby(['UserID','ProductID']).max()).reset_index()\nprint(x)\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","d6beb66b":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\ny=(last_15_most_view.groupby(['UserID','ProductID']).count()).reset_index()\nprint(y)\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","b70b49d3":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nprint(x.UserID.value_counts())\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","9a048c64":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nz=x.merge(y, on=['UserID','ProductID'])\ndel x,y,last_15_most_view\nprint(z)\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","50101961":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")\n\nz=(z.sort_values(['UserID','Visit_Date_y','Visit_Time_x'],ascending=False)).reset_index()\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","f2bd2429":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")\n\nmost_view=pd.DataFrame()\nprev_id=0\nuser=[]\nprod=[]\nfor i in range (0, len(z)):\n    a=z.UserID[i]\n    if a!=prev_id:\n        prev_id=a\n        u=a\n        p=z.ProductID[i]\n        user.append(u)\n        prod.append(p)\n        del u,p\n    else:\n        pass\nmost_view['UserID']=user\nmost_view['Prod']=prod\ndel prev_id,user,prod,z\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","9f633470":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")\n\nprint(\"Renaming Columns as per the requirement\")\nmost_view.columns=['UserID', \n             'Most_Viewed_product_15_Days']\nprint(\"Renaming done.\\n Now writing to csv for future use\")\nmost_view.to_csv(\"most_view.csv\",index=False)\nprint(\"Wrtten to csv successfully.\\nNow deleting from the memory.\")\ndel most_view\nprint(\"Successfully Deleted !!!\")\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","680481cf":"%whos DataFrame","f53517b5":"data=pd.read_csv(\".\/Final Df.csv\")\nprint(data)","f027f2ff":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")\n\ndat=data[['UserID','OS','Visit_Date']]\ndat=dat.copy()\ndel data\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","73f54f89":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nprint(dat)\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","c30d87f0":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nos_grp=dat.groupby(['UserID','OS'])\nz=(os_grp.agg('count')).reset_index()\nw=z.sort_values(['UserID','Visit_Date'],ascending=False)\nprint(w.tail(20))\ndel z,dat,w\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","4397534e":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nos_temp=pd.DataFrame(os_grp.size().reset_index())\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","aee7eba2":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nos_fin=pd.DataFrame()\nprev_id=0\nuser=[]\nos=[]\nfor i in range (0, len(os_temp)):\n    a=os_temp.UserID[i]\n    if a!=prev_id:\n        prev_id=a\n        u=a\n        o=os_temp.OS[i]\n        user.append(u)\n        os.append(o)\n        del u,o\n    else:\n        pass\nos_fin['UserID']=user\nos_fin['OS']=os\ndel prev_id,user,os,a,os_temp\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","6391bb8a":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")\n\nprint(\"Renaming Columns as per the requirement\")\nos_fin.columns=['UserID', \n             'Most_Active_OS']\nprint(\"Renaming done.\\n Now writing to csv for future use\")\nos_fin.to_csv(\"os_fin.csv\",index=False)\nprint(\"Wrtten to csv successfully.\\nNow deleting from the memory.\")\ndel os_fin\nprint(\"Successfully Deleted !!!\")\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","e2117379":"%whos DataFrame","23935a64":"data=pd.read_csv(\".\/Final Df.csv\")\nprint(data)","d15debca":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nview_Prod=data[['UserID','ProductID','Visit_Time']]\nview_Prod=view_Prod.copy()\ndel data\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","a302359f":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nprint(view_Prod)\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","843cca3b":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nw=view_Prod.sort_values(['UserID','Visit_Time'],ascending=False)\ndel view_Prod\nprint(w.tail(30))\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","70530260":"type(w.ProductID[298])","99804d92":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")\n\nview_fin=pd.DataFrame()\nprev_id=0\nuser=[]\nprod=[]\nfor i in range (0, len(w)):\n    a=w.UserID[i]\n    if a!=prev_id:\n        prev_id=a\n        u=a\n        p=w.ProductID[i]\n        if type(p)==pd.core.scalar._NAType:\n            p=\"Product101\"\n        else:\n            pass\n        user.append(u)\n        prod.append(p)\n        del p,u\n    else:\n        pass\nview_fin['UserID']=user\nview_fin['Product_ID']=prod\ndel prev_id,user,prod,a,w\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","e7dc8803":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\nprint(view_fin)\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","cccd035d":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")\n\nprint(\"Renaming Columns as per the requirement\")\nview_fin.columns=['UserID', \n             'Recently_Viewed_Product']\nprint(\"Renaming done.\\n Now writing to csv for future use\")\nview_fin.to_csv(\"view_fin.csv\",index=False)\nprint(\"Wrtten to csv successfully.\\nNow deleting from the memory.\")\ndel view_fin\nprint(\"Successfully Deleted !!!\")\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","548b4e1c":"%whos DataFrame","9dc3f1a0":"data=pd.read_csv(\".\/Final Df.csv\")\nprint(data)","144f5aee":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\n# Extracting the required feature's information\n\npg_last_7=pd.DataFrame()\npg_last_7=data.query('Till_date<=7&Activity_PAGELOAD==1')[['UserID','Visit_Date']]\npg_last_7=pg_last_7.copy()\ndel data\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","55d055f0":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\\n\")\n\nprint(pg_last_7) # Filtered data according to the requirement\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","4cde1e43":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\\n\")\n\n# Pivoting the table to get the counts for each user\npg_last_7=pg_last_7.to_pandas()\npg_last_7_piv=(pg_last_7.pivot_table(index=['UserID'],\n                                     values=['Visit_Date'], \n                                     aggfunc={'Visit_Date':'count'})).reset_index()\ndel pg_last_7\nprint(pg_last_7_piv)\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","afa582e4":"%whos DataFrame","752c89d6":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")\n\nprint(\"Renaming Columns as per the requirement\")\npg_last_7_piv.columns=['UserID', \n             'Pageloads_last_7_days']\nprint(\"Renaming done.\\n Now writing to csv for future use\")\npg_last_7_piv.to_csv(\"pg_last_7_piv.csv\",index=False)\nprint(\"Wrtten to csv successfully.\\nNow deleting from the memory.\")\ndel pg_last_7_piv\nprint(\"Successfully Deleted !!!\")\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","0adadfe7":"data=pd.read_csv(\".\/Final Df.csv\")\nprint(data)","0adb24bb":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")\n\n# Extracting the required feature's information\n\ncl_last_7=pd.DataFrame()\ncl_last_7=data.query('Till_date<=7&Activity_CLICK==1')[['UserID','Visit_Date']]\ncl_last_7=cl_last_7.copy()\ndel data\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","30a09ab9":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\\n\")\n\nprint(cl_last_7) # Filtered data according to the requirement\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","cda0664c":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\\n\")\n\n# Pivoting the table to get the counts for each user\ncl_last_7=cl_last_7.to_pandas()\ncl_last_7_piv=(cl_last_7.pivot_table(index=['UserID'],\n                                     values=['Visit_Date'], \n                                     aggfunc={'Visit_Date':'count'})).reset_index()\ndel cl_last_7\nprint(cl_last_7_piv)\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","6601bc77":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")\n\nprint(\"Renaming Columns as per the requirement\")\ncl_last_7_piv.columns=['UserID', \n             'Clicks_last_7_days']\nprint(\"Renaming done.\\n Now writing to csv for future use\")\ncl_last_7_piv.to_csv(\"cl_last_7_piv.csv\",index=False)\nprint(\"Wrtten to csv successfully.\\nNow deleting from the memory.\")\ndel cl_last_7_piv\nprint(\"Successfully Deleted !!!\")\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","704f9ede":"%whos DataFrame","1e39bf5f":"print(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\\n\")\n\ndata=pd.read_csv(\".\/Final Df.csv\")\nsub=pd.DataFrame(columns=['UserID'])\nsub['UserID']=data.UserID\nprint(\"Got the UserID from the original df\")\ndel data\nprint(\"Cleared original df from the memory\\n\")\n\n# Merging the data to sub df\n\nprint(\"Reading the df to merge with the submission file\")\nvisit=pd.read_csv(\".\/visit.csv\")                                                # No_of_days_Visited_7_Days\nprint(\"Data read successfully\")\nprint(\"Now merging 'No_of_days_Visited_7_Days' to the submission DataFrame\")\nsub=pd.merge(sub, visit, how='left', on='UserID')\nprint(\"Merged 1 of 8\\nNow deleting the df\")\ndel visit\nprint(\"Df cleared from the memory\\n\")\n\nprint(\"Reading the df to merge with the submission file\")\nviews=pd.read_csv(\".\/views.csv\")                                                # No_Of_Products_Viewed_15_Days\nprint(\"Data read successfully\")\nprint(\"Now merging 'No_Of_Products_Viewed_15_Days' to the submission DataFrame\")\nsub=pd.merge(sub, views, how='left', on='UserID')\nprint(\"Merged 2 of 8\\nNow deleting the df\")\ndel views\nprint(\"Df cleared from the memory\\n\")\n\nprint(\"Reading the df to merge with the submission file\")\nvin=pd.read_csv(\".\/vin.csv\")                                                    # User_Vintage\nprint(\"Data read successfully\")\nprint(\"Now merging 'User_Vintage' to the submission DataFrame\")\nsub=pd.merge(sub, vin, how='left', on='UserID')\nprint(\"Merged 3 of 8\\nNow deleting the df\")\ndel vin\nprint(\"Df cleared from the memory\\n\")\n\nprint(\"Reading the df to merge with the submission file\")\nmost_view=pd.read_csv(\".\/most_view.csv\")                                        # Most_Viewed_product_15_Days\nprint(\"Data read successfully\")\nprint(\"Now merging 'Most_Viewed_product_15_Days' to the submission DataFrame\")\nsub=pd.merge(sub, most_view, how='left', on='UserID')\nprint(\"Merged 4 of 8\\nNow deleting the df\")\ndel most_view\nprint(\"Df cleared from the memory\\n\")\n\nprint(\"Reading the df to merge with the submission file\")\nos_fin=pd.read_csv(\".\/os_fin.csv\")                                              # Most_Active_OS\nprint(\"Data read successfully\")\nprint(\"Now merging 'Most_Active_OS' to the submission DataFrame\")\nsub=pd.merge(sub, os_fin, how='left', on='UserID')\nprint(\"Merged 5 of 8\\nNow deleting the df\")\ndel os_fin\nprint(\"Df cleared from the memory\\n\")\n\nprint(\"Reading the df to merge with the submission file\")\nview_fin=pd.read_csv(\".\/view_fin.csv\")                                          # Recently_Viewed_Product\nprint(\"Data read successfully\")\nprint(\"Now merging 'Recently_Viewed_Product' to the submission DataFrame\")\nsub=pd.merge(sub, view_fin, how='left', on='UserID')\nprint(\"Merged 6 of 8\\nNow deleting the df\")\ndel view_fin\nprint(\"Df cleared from the memory\\n\")\n\nprint(\"Reading the df to merge with the submission file\")\npg_last_7_piv=pd.read_csv(\".\/pg_last_7_piv.csv\")                                # Pageloads_last_7_days\nprint(\"Data read successfully\")\nprint(\"Now merging 'Pageloads_last_7_days' to the submission DataFrame\")\nsub=pd.merge(sub, pg_last_7_piv, how='left', on='UserID')\nprint(\"Merged 7 of 8\\nNow deleting the df\")\ndel pg_last_7_piv\nprint(\"Df cleared from the memory\\n\")\n\nprint(\"Reading the df to merge with the submission file\")\ncl_last_7_piv=pd.read_csv(\".\/cl_last_7_piv.csv\")                                # Clicks_last_7_days\nprint(\"Data read successfully\")\nprint(\"Now merging 'Clicks_last_7_days' to the submission DataFrame\")\nsub=pd.merge(sub, cl_last_7_piv, how='left', on='UserID')\nprint(\"Merged 8 of 8\\nNow deleting the df\")\ndel cl_last_7_piv\nprint(\"Df cleared from the memory\\n\")\n\nprint(\"\\nCommand execution ended at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")","587f1f14":"%whos DataFrame","df3bb345":"sub","54f8224f":"print(\"Writing the data to CSV File\")\nsub.to_csv(\"Submission.csv\",index=False)\nprint(\"Done\")\nprint(\"Now clearing the memory\")\ndel sub\nprint(\"Memory cleared\")","b0decc6e":"%whos DataFrame","21685794":"# End time of the notebook runtime\n\nprint(\"Command execution started at:\"+str(datetime.datetime.now(IST).replace(microsecond=0).time())+\" hrs\")\n\nend=datetime.datetime.now(IST).replace(microsecond=0)\ne_hrs=end.time()\nprint(\"Notebook ended on:\", end.date(), \"at\", e_hrs)","a21fa74b":"# Total runtime of the notebook\n\nprint(\"Code started on:\", start.date(), \"at\",s_hrs,\"hrs.\\nCode ended on:\", end.date(), \"at\",e_hrs,\"\\n\\nTotal duration of the code runtime:\",(end-start),\"hrs\")","f17ac89d":"# Pageloads_last_7_days\n\nCount of Page loads in the last 7 days by the user","ad377be0":"# Most_Viewed_product_15_Days: \n\nMost frequently viewed (page loads) product by the user in the last 15 days. \n\nIf there are multiple products that have a similar number of page loads then, consider the recent one. \n\nIf a user has not viewed any product in the last 15 days then put it as Product101. ","913578e6":"# START","7cdf9640":"# No_Of_Products_Viewed_15_Days: \n\nNumber of Products viewed by the user in the last 15 days","5444450c":"# All the required features are created. Now merging them into single dataframe and writing to submission.csv","d99c3379":"# END","59e092d0":"# Data Understanding","66c9f4ba":"# Data merged properly","1a996ec9":"# Enable GPU Accleration\n\nhttps:\/\/www.kaggle.com\/cdeotte\/rapids","c932dc9c":"# For No_of_days_Visited_7_Days\n\nHow many days a user was active on platform in the last 7 days.","74485093":"# Now some basic operations","798dbb55":"# Clicks_last_7_days\n\nCount of Clicks in the last 7 days  by the user","a5242ea2":"# All Commands Finished","ce942441":"# Recently_Viewed_Product \n\nMost recently viewed (page loads) product by the user.\n\nIf a user has not viewed any product then put it as Product101.","d66e428b":"# Importing the data and standard libraries","b452497a":"# User Vintage","dd7e4659":"# Most_Active_OS\n\nMost Frequently used OS by user. "}}