{"cell_type":{"75550724":"code","62d2afb1":"code","93e952b3":"code","e9369a34":"code","45c4db5d":"code","0c6d1ce7":"code","c7f48dc7":"code","c7574991":"code","58b1ba6d":"code","7a266899":"code","e81e197f":"code","7febd835":"code","3e2a7a98":"code","fb972af0":"code","176acc76":"code","aeac7d22":"markdown","ddb8cf8d":"markdown","c4cbcee7":"markdown","ba334a12":"markdown","7e4e749c":"markdown","907d41b1":"markdown","fc636a1f":"markdown","3fa3826a":"markdown","50c46f17":"markdown","fa30dc27":"markdown"},"source":{"75550724":"import numpy as np\nimport pandas as pd\n\nimport os\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots","62d2afb1":"paris = pd.read_csv(\"\/kaggle\/input\/paris-housing-classification\/ParisHousingClass.csv\")\nparis.head()","93e952b3":"paris.describe()","e9369a34":"print(paris.isnull().sum())","45c4db5d":"fig = make_subplots(rows=(paris.shape[1]\/\/3)+1, cols=3)\n\nfor i, col in enumerate(paris.columns):\n    fig.add_trace(go.Histogram(x=paris[col], name=col), row=(i\/\/3)+1, col=(i%3)+1)\n    \nfig.update_layout(height=1500,)\n    \nfig.show()","0c6d1ce7":"from sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder()\n\nencoder.fit(paris[\"category\"])\n\nparis[\"category\"] = encoder.transform(paris[\"category\"])\nparis","c7f48dc7":"corr = paris.corr()\n\nfig = px.imshow(corr)\nfig.show()","c7574991":"from sklearn.preprocessing import StandardScaler\n\nneed_scaling = ['squareMeters', 'numberOfRooms', 'floors', 'cityCode', 'made', 'basement', 'attic', 'garage', 'price']\n\nstandard_scaler = StandardScaler()\nparis[need_scaling] = standard_scaler.fit_transform(paris[need_scaling])","58b1ba6d":"X = paris.drop(\"category\", axis=1)\nY = paris[\"category\"]","7a266899":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.30, random_state=42)","e81e197f":"from sklearn.linear_model import LogisticRegression\n\nlogreg_model = LogisticRegression(\n    class_weight='balanced',\n    solver='newton-cg',\n    max_iter=10000,\n    C=0.001\n)\nlogreg_model.fit(X_train, y_train)","7febd835":"acc_train = logreg_model.score(X_train, y_train)\nacc_test = logreg_model.score(X_test, y_test)\n\nprint(f\"accuracy: {acc_train}, accuracy (test): {acc_test}\")","3e2a7a98":"features_relevancy = pd.DataFrame({\n    'feature': X.columns,\n    'coef': np.abs(logreg_model.coef_[0])\n})","fb972af0":"# Most relevant features\n\nprint(\"Most relevant features\")\n\nfeatures_relevancy.sort_values(by='coef', ascending=False).head(2)","176acc76":"# Least relevant features\n\nprint(\"Least relevant features\")\n\nfeatures_relevancy.sort_values(by='coef').head(2)","aeac7d22":"# Logistic Regression","ddb8cf8d":"# Data","c4cbcee7":"# Scaling","ba334a12":"# Evaluation","7e4e749c":"# NaN values","907d41b1":"# Histograms","fc636a1f":"# Correlation","3fa3826a":"# Label Encoder","50c46f17":"# Top Features","fa30dc27":"# X and Y"}}