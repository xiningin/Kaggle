{"cell_type":{"e0852f42":"code","b6779f07":"code","87363792":"code","54792b15":"code","5bbf5ed1":"code","206be50b":"code","98bb85bf":"code","e968824b":"code","bcaa1d19":"code","821b9d93":"code","0c404975":"code","49c1f72a":"code","c649e300":"code","bdaeca57":"code","243f7776":"code","e7e6e0ba":"code","a29ab1db":"code","851c93b7":"code","a7afe7b6":"code","8175f5e3":"code","bf7fd25f":"code","f9d91cf0":"code","bc32a001":"code","a84ae6ea":"code","0ac64138":"markdown","dcecbeb9":"markdown","eb00bdeb":"markdown","ccc0a4b3":"markdown","e08fd18b":"markdown","76558a26":"markdown","60288c35":"markdown","f07e2815":"markdown","946039a7":"markdown","8ae8cd01":"markdown","c81b3bd8":"markdown"},"source":{"e0852f42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b6779f07":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import r2_score\nfrom sklearn.tree import DecisionTreeRegressor","87363792":"df_train = pd.read_csv(\"\/kaggle\/input\/are-your-employees-burning-out\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/are-your-employees-burning-out\/test.csv\")","54792b15":"df_train.head()","5bbf5ed1":"df_train.info()","206be50b":"df_test.info()","98bb85bf":"df_train.dropna(inplace=True)","e968824b":"def Encoder(data):\n    data.Gender = LabelEncoder().fit_transform(data.Gender)\n    data[\"Company Type\"] = LabelEncoder().fit_transform(data[\"Company Type\"])\n    data[\"WFH Setup Available\"] = LabelEncoder().fit_transform(data[\"WFH Setup Available\"])","bcaa1d19":"Encoder(df_train)\nEncoder(df_test)","821b9d93":"plt.figure(figsize=(10,8))\n\nplt.hist(df_train[\"Burn Rate\"][df_train.Gender.isin([0])],color='blue',alpha=0.5,label=\"Male\")\nplt.hist(df_train[\"Burn Rate\"][df_train.Gender.isin([1])],color='pink',alpha=0.5,label=\"Female\")\nplt.xlabel(\"Burn Rate\")\nplt.ylabel(\"Count\")\nplt.legend()\nplt.title(\"Burn Rate by Gender\")\nplt.show()","0c404975":"plt.figure(figsize=(10,8))\n\nplt.hist(df_train[\"Burn Rate\"][df_train[\"Company Type\"].isin([0])],color='red',alpha=0.5,label=\"Product\")\nplt.hist(df_train[\"Burn Rate\"][df_train[\"Company Type\"].isin([1])],color='green',alpha=0.5,label=\"Service\")\nplt.xlabel(\"Burn Rate\")\nplt.ylabel(\"Count\")\nplt.legend()\nplt.title(\"Burn Rate by Company Type\")\nplt.show()","49c1f72a":"plt.figure(figsize=(10,8))\n\nplt.hist(df_train[\"Burn Rate\"][df_train[\"WFH Setup Available\"].isin([0])],color='red',alpha=0.5,label=\"No\")\nplt.hist(df_train[\"Burn Rate\"][df_train[\"WFH Setup Available\"].isin([1])],color='yellow',alpha=0.5,label=\"Yes\")\nplt.xlabel(\"Burn Rate\")\nplt.ylabel(\"Count\")\nplt.legend()\nplt.title(\"Burn Rate by WFH Availability\")\nplt.show()","c649e300":"plt.figure(figsize=(10,8))\n\nplt.bar(x=df_train[\"Designation\"].unique(),height=df_train.groupby('Designation')['Burn Rate'].mean())\nplt.xlabel(\"Designation\")\nplt.ylabel(\"Mean Burn Rate\")\nplt.title(\"Mean Burn Rate by Designation type\")\nplt.show()","bdaeca57":"plt.figure(figsize=(10,8))\n\nplt.bar(x=df_train[\"Resource Allocation\"].unique(),height=df_train.groupby('Resource Allocation')['Burn Rate'].mean())\nplt.xlabel(\"Resource Allocation\")\nplt.ylabel(\"Mean Burn Rate\")\nplt.title(\"Mean Burn Rate by Resource Allocation\")\nplt.show()","243f7776":"plt.figure(figsize=(10,6))\n\nheatmap = sns.heatmap(df_train.corr(), vmin=-1,vmax=1, annot=True, cmap='viridis')\n\nheatmap.set_title('Correlation Heatmap', fontdict={'fontsize':12}, pad=12)\nplt.show()","e7e6e0ba":"Predictors = df_train[df_train.columns.values.tolist()[2:7]]\nTarget =df_train[df_train.columns.values.tolist()[8]]\n\nPredictors_tr, Predictors_test, Target_tr, Target_test = train_test_split(Predictors, Target, test_size = 0.2)\n\n\nPred_test = df_test[df_test.columns.values.tolist()[2:7]]","a29ab1db":"params ={\n        \"kernel\":['rbf'],\n        \"gamma\":[1E-3,1E-2,0.1],\n        \"C\":[10,100,500]\n    }\n\nSVR_m = GridSearchCV(SVR(),param_grid=params, cv=5, scoring='r2')\n\nSVR_m.fit(Predictors_tr,Target_tr)","851c93b7":"means = SVR_m.cv_results_['mean_test_score']\nstds =  SVR_m.cv_results_['std_test_score']\nparams= SVR_m.cv_results_['params']\n\nfor m,s,p in zip(means,stds,params):\n    print(\"%0.3f (+\/-%0.3f) para %r\"%(m, s, p))\n\nprint('------------------------------------------------------------------------------------------------')\nprint('Best params: ',SVR_m.best_params_)\nprint('Best R2 score: ',SVR_m.best_score_)","a7afe7b6":"Ytr_pred=SVR_m.predict(Predictors_test)\nerror = r2_score(Ytr_pred,Target_test)\nprint(\"r2_score metric gives an error of r^2= {:.2f}\".format(error))","8175f5e3":"Y_pred = SVR_m.predict(Pred_test)\nsubmit = pd.DataFrame(data=list(zip(df_test[\"Employee ID\"],Y_pred)), columns=[\"Employee ID\",\"SVR Burn Rate\"])\nsubmit.head()","bf7fd25f":"params = {\n    'splitter':['best','random'] ,\n    'min_samples_split':range(2,50,5),\n    'min_samples_leaf':range(1,21,2),\n    'max_features':[\"auto\",\"sqrt\",\"log2\"]\n}\n\n\nDTR =  RandomizedSearchCV(DecisionTreeRegressor(),param_distributions=params, cv=5, scoring='r2')\n\nDTR.fit(Predictors_tr,Target_tr)","f9d91cf0":"means = DTR.cv_results_['mean_test_score']\nstds =  DTR.cv_results_['std_test_score']\nparams= DTR.cv_results_['params']\n\nfor m,s,p in zip(means,stds,params):\n    print(\"%0.3f (+\/-%0.3f) para %r\"%(m, s, p))\n\nprint('------------------------------------------------------------------------------------------------')\nprint('Best params: ',DTR.best_params_)\nprint('Best R2 score: ',DTR.best_score_)","bc32a001":"Ytr_pred=DTR.predict(Predictors_test)\nerror = r2_score(Ytr_pred,Target_test)\nprint(\"r2_score metric gives an error of r^2= {:.2f}\".format(error))","a84ae6ea":"Y_pred = DTR.predict(Pred_test)\nsubmit[\"Tree Burn Rate\"]=Y_pred\nsubmit.head()","0ac64138":"There are three predictors highly correlated: \n* Designation\n* Resource Allocation\n* Mental Fatigue Score\n\nThis three are also highly correlated to the target: *Burn Rate*","dcecbeb9":"## Correlations","eb00bdeb":"# Burning Out Employees","ccc0a4b3":"We have less data from Service than from product but the shape is almost the same","e08fd18b":"Female are more burned out than male, the histogram is shifted to the right in this comparisson.","76558a26":"## Decission Tree Regressor","60288c35":"## Support Vector Regression","f07e2815":"## Visualization","946039a7":"Clearly not having WFH setup availability turns on burning out more easily. The hisogram is shifted to the right for 'No'","8ae8cd01":"## Train Test Split","c81b3bd8":"Train dataframe has missing values for \"Resource Allocation\", \"Mental Fatigue Score\" and \"Burn Rate\".\n\nTest dataframe is complete."}}