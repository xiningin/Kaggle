{"cell_type":{"9b12e84e":"code","37931961":"code","0e81709f":"code","caa5d59d":"code","187e0f56":"code","3b8232f7":"code","d889e27c":"code","3af3be55":"code","e2941f43":"code","3555f0aa":"code","3f9dc4da":"code","5ddf9e3a":"code","57277c9d":"code","8e9f4d7f":"code","7f66c624":"code","ae7e15b6":"code","c4b6df86":"code","75122a16":"code","478370a8":"code","2f5069f0":"code","ba88dc6f":"code","066c28e1":"code","acfe76d5":"code","f5a8bf5d":"code","df729730":"code","0833b767":"code","cf455223":"code","42b28f76":"code","1dfb19a0":"code","621b8d12":"code","f8548378":"code","1d8c99bd":"code","84e0424a":"code","971c25e3":"code","5149e126":"code","d6eb8fd7":"code","9f678a21":"code","e60d5454":"code","cee9bc3f":"code","e8563457":"code","2a4382b7":"code","692c4044":"code","0a0f2226":"code","8a60979c":"code","8df6e1a2":"code","3fad3cf0":"code","87e0f956":"code","c518626f":"code","a4a4defd":"code","b94991c2":"code","e48d0132":"code","1f77b550":"code","63cdb5a9":"code","1ae5605e":"code","b92a0706":"code","636dce93":"code","469b6d98":"code","5dacd812":"code","292164c1":"code","0c583c3c":"code","2edd2c22":"code","e9de1aea":"code","757e53a7":"code","c1e44d9b":"code","2cd97fad":"code","3ca2e327":"code","89255422":"code","7fec7886":"code","ae499ffb":"code","f4d0ff99":"code","bb1b6917":"code","50bce96d":"code","2561f48a":"code","95cdf9f8":"code","7f4c05a9":"code","e533b681":"code","15d0a741":"code","e42de79d":"code","90eb1d22":"code","e474b386":"code","61443b21":"code","87e6a44a":"code","0394de5f":"code","4c093805":"code","48e86494":"code","d796e21b":"code","84ccbe48":"code","26cde37f":"code","fcd32d40":"code","9e4b7cb9":"code","64bac3f6":"code","f6dd5301":"code","cd0f7575":"code","cb32fc1e":"code","e6fc47a2":"code","d0d303de":"code","3e8d486e":"code","a7066b6e":"code","89669e1a":"code","e9fb329e":"code","d8d6b6b8":"code","601787f3":"code","cc09fe50":"code","87443b38":"code","334923fd":"code","7f21229c":"code","aaae54b8":"code","a5d81e2c":"code","d378ce7e":"code","ffb23d2a":"code","d60592c8":"code","5898a3df":"code","1184b6a9":"code","86fdaeb1":"code","22dd74c6":"code","0370b6ce":"code","f24a46aa":"code","3d9cc937":"code","d4e42929":"code","71d9b853":"code","d354b8c6":"code","fb5955c4":"code","5c7ee036":"code","3b7c1108":"code","53896905":"code","3a744a47":"code","48af17d4":"code","ebd5b680":"code","e9c3517b":"code","2294f47b":"code","c4f76965":"code","ec2eb3b8":"code","17324107":"code","5a41cba8":"code","7d3f81fb":"code","23dd2fad":"code","47298595":"code","9048a562":"code","8e134f81":"code","6241f8c1":"code","ec4c8985":"code","db8a120e":"code","3303679d":"code","c60c3660":"code","6dc5b44c":"code","17969e5a":"code","81a56deb":"code","d6e83870":"code","1188a0d9":"code","8f69808d":"code","03cc5920":"code","a5c56727":"code","70e56547":"code","eb044222":"code","ad581398":"code","b3e8040e":"code","57c92fb4":"code","0117face":"code","8f415505":"code","38f57869":"code","f72cf7f2":"code","b11b67dc":"code","62867da1":"code","715672e6":"code","2438648a":"code","7f7d11bf":"code","bbc8ffc2":"code","1cbdf8a6":"code","23966575":"code","b27549b3":"markdown","0b8c0629":"markdown","080031c5":"markdown","56d9f578":"markdown","fbb39c2b":"markdown","8f7d0a4e":"markdown","c3d69006":"markdown","024725a5":"markdown","f40e9294":"markdown","b3fa214a":"markdown","d69a8206":"markdown","ce8dc3a7":"markdown","a1519adb":"markdown","2a1cb5ed":"markdown","7efec10e":"markdown","1461995e":"markdown","8aca70bd":"markdown","7114e4cf":"markdown","bb73b95c":"markdown","ca5c3173":"markdown","e2b5b435":"markdown","2fbc57ce":"markdown","455b28bb":"markdown","5fe7f899":"markdown","e00fe672":"markdown","26135afb":"markdown","33db0116":"markdown","38823414":"markdown","4e4e85c9":"markdown","27cfec8f":"markdown","7974ffc9":"markdown","5bf7fcb7":"markdown","8e88346c":"markdown","3f06abd8":"markdown","4e7abd7a":"markdown","93367d31":"markdown","74230fc3":"markdown","393352c6":"markdown","4fcd7ba1":"markdown","2f6a82b4":"markdown","dde0a9f0":"markdown","74cd1019":"markdown","2cc85102":"markdown","af048f45":"markdown","3652abba":"markdown","192dee37":"markdown","ec12f6ca":"markdown","cb98e966":"markdown","766be3ec":"markdown","2a47ffd5":"markdown","7195acc3":"markdown","22fdb389":"markdown","7b44ecf4":"markdown","e13acc34":"markdown","2163363c":"markdown","692a6560":"markdown","6ac2e7b6":"markdown","c9ba6604":"markdown","e2152f92":"markdown","7e3d80ed":"markdown","af76fa08":"markdown","d486199d":"markdown","55467989":"markdown","8fc0bbb4":"markdown","9c35b18b":"markdown","022c033b":"markdown","5216738b":"markdown","1c6e581a":"markdown","d8e3148f":"markdown","166bb95a":"markdown","1bf6443f":"markdown","03f1cea5":"markdown","c395d8f9":"markdown","07b62505":"markdown","c6666a5f":"markdown","d2b097ce":"markdown","6a4e74d3":"markdown","3eba77fd":"markdown","0f1d34e8":"markdown","b4f86a64":"markdown","784bcd71":"markdown","dcd5f6ec":"markdown","fe136dba":"markdown","b837884d":"markdown","0ab040c4":"markdown","93924ceb":"markdown","75d19a3c":"markdown","009fd71c":"markdown","67e58291":"markdown","a5e12a8c":"markdown","fb6283e6":"markdown","436dba2b":"markdown","34211296":"markdown","cb4c963a":"markdown","0899bf05":"markdown","f26d51ec":"markdown","e8177c4b":"markdown","0dcfd4f8":"markdown","d8302054":"markdown","4282cd50":"markdown","f7ced337":"markdown","ae783b31":"markdown","b607d523":"markdown","f5ee62eb":"markdown","4904cfc9":"markdown","d448a486":"markdown","0460a465":"markdown","898fcee2":"markdown","cc701b60":"markdown","44ce7284":"markdown","d44e6c8b":"markdown","9d7af792":"markdown","a05ca6f5":"markdown","ecc52b55":"markdown","b1f3eec0":"markdown","dbac932e":"markdown","95ffe8d5":"markdown","2e0ff185":"markdown","34934846":"markdown","bbd8904b":"markdown","f9d81f73":"markdown","519dd537":"markdown","a353a1f1":"markdown","2d307a98":"markdown","6acb477b":"markdown","31bb0ca5":"markdown","6499fb5d":"markdown"},"source":{"9b12e84e":"# Define the variable as follow \nmy_lucky_number = 10\nmy_name = \"Saurabh\"","37931961":"# let's print my lucky number\nprint(my_lucky_number)","0e81709f":"# let's check whether lucky number is positive or NOT\nif my_lucky_number > 0:\n    print(\"Lucky number is positive.\")\nelif my_lucky_number == 0:\n    print(\"Lucky number is zero.\")\nelse:\n    print(\"Lucky number is Negative.\")\n    \n# Notice the colon at the end of the expression in the if statement.","caa5d59d":"type(my_lucky_number)","187e0f56":"type(my_name)","3b8232f7":"type(3.14)","d889e27c":"type(True)","3af3be55":"# True Division\n5\/2","e2941f43":"# Floor Division\n# Gives a quotient\n5\/\/2","3555f0aa":"# Modulus \n# Return Remindor\n5%2","3f9dc4da":"x = 2\nx += 3\nprint(x)","5ddf9e3a":"x = \"spam\"\nprint(x)\nx += \"eggs\"\nprint(x)","57277c9d":"# Left-right associativity\n# Output: 3\nprint(5 * 2 \/\/ 3)","8e9f4d7f":"# Shows left-right associativity\n# Output: 0\nprint(5 * (2 \/\/ 3))","7f66c624":"# Exponent operator ** has right-to-left associativity in Python.\n# Right-left associativity of ** exponent operator\nprint(2 ** 3 ** 2)","ae7e15b6":"print((2 ** 3) ** 2)","c4b6df86":"help(round)","75122a16":"help(round(2.9))\n\n# it is same as help(int)","478370a8":"help(int)","2f5069f0":"def least_difference(a, b, c):\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    return min(diff1, diff2, diff3)","ba88dc6f":"print(\n    least_difference(1, 10, 100),\n    least_difference(1, 10, 10),\n    least_difference(5, 6, 7), # Python allows trailing commas in argument lists. How nice is that?\n)","066c28e1":"help(least_difference)","acfe76d5":"# Pure Function : Pure functions have no side effects, and return a value that depends only on their arguments.\ndef least_difference(a, b, c):\n    \"\"\"Return the smallest difference between any two numbers\n    among a, b and c.\n    \n    >>> least_difference(1, 5, -5)\n    4\n    \"\"\"\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    return min(diff1, diff2, diff3)","f5a8bf5d":"help(least_difference)","df729730":"print(1, 2, 3, sep=' < ')","0833b767":"print(1, 2, 3)","cf455223":"# Impure Function : Not return a value that depends only on their arguments.\ndef add_value_in_thousand(a=1):\n    print(1000+a)","42b28f76":"add_value_in_thousand()","1dfb19a0":"add_value_in_thousand(134)","621b8d12":"def mult_by_five(x):\n    return 5 * x\n\ndef call(fn, arg):\n    \"\"\"Call fn on arg\"\"\"\n    return fn(arg)\n\n# Higher order functions.\ndef squared_call(fn, arg):\n    \"\"\"Call fn on the result of calling fn on arg\"\"\"\n    return fn(fn(arg))\n\nprint(\n    call(mult_by_five, 1),\n    squared_call(mult_by_five, 1), \n    sep='\\n', # '\\n' is the newline character - it starts a new line\n)","f8548378":"def mod_5(x):\n    \"\"\"Return the remainder of x after dividing by 5\"\"\"\n    return x % 5\n\nprint(\n    'Which number is biggest?',\n    max(100, 51, 14),\n    'Which number is the biggest modulo 5?',\n    max(100, 51, 14, key=mod_5),\n    sep='\\n',\n)","1d8c99bd":"def func():\n    pass","84e0424a":"help(round)\nround(12345.54321,ndigits=2)","971c25e3":"round(12345.54321,-2)","5149e126":"# Comparisons are a little bit clever...\n3.0 == 3","d6eb8fd7":"# But not too clever...\n'3' == 3","9f678a21":"True or True and False","e60d5454":"def inspect(x):\n    if x == 0:\n        print(x, \"is zero\")\n    elif x > 0:\n        print(x, \"is positive\")\n    elif x < 0:\n        print(x, \"is negative\")\n    else:\n        print(x, \"is unlike anything I've ever seen...\")\n\ninspect(0)\ninspect(-15)","cee9bc3f":"print(bool(1)) # all numbers are treated as true, except 0\nprint(bool(0))\nprint(bool(\"asf\")) # all strings are treated as true, except the empty string \"\"\nprint(bool(\"\"))\n# Generally empty sequences (strings, lists, and other types we've yet to see like lists and tuples)\n# are \"falsey\" and the rest are \"truthy\"","e8563457":"if 0:\n    print(0)\nelif \"spam\":\n    print(\"spam\")","2a4382b7":"# NOn- optimizated\n\ndef quiz_message(grade):\n    if grade < 50:\n        outcome = 'failed'\n    else:\n        outcome = 'passed'\n    print('You', outcome, 'the quiz with a grade of', grade)\n    \nquiz_message(80)","692c4044":"# Optimized\n\ndef quiz_message(grade):\n    outcome = 'failed' if grade < 50 else 'passed'\n    print('You', outcome, 'the quiz with a grade of', grade)\n    \nquiz_message(45)","0a0f2226":"primes = [2, 3, 5, 7]\nplanets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nhands = [['J', 'Q', 'K'], ['2', '2', '2'], ['6', 'A', 'K']]\n\n# A list can contain a mix of different types of variables:\nmy_favourite_things = [32, 'raindrops on roses', hands]","8a60979c":"print(primes[0])\nprint(primes[1])\nprint(primes[3])","8df6e1a2":"print(primes[-1])","3fad3cf0":"planets[0:3]","87e0f956":"# till 2nd planet\nplanets[:3]","c518626f":"# from 3rd planet onward\nplanets[3:]","a4a4defd":"# Same as all list\nplanets[:]","b94991c2":"# The last 2 planets\nplanets[-2:]","e48d0132":"# reversing planets order\n\nnumbers = [0,1,2,3,4,5,6,7,8,9]\ndirection = -1 \n# -1 show direction from end_index to start_index\n# 1 show opposite of that\nnumbers[::direction]","1f77b550":"planets[3] = 'Ztrimus'\nplanets","63cdb5a9":"c = 12 + 3j\nprint(\"Real Value of C : \",c.real)\nprint(\"Imaginary Value of C : \",c.imag)","1ae5605e":"# in this some function are in place function\ndir(planets)","b92a0706":"# let's add elon musk's beloved planet back in solar system\n\nplanets.append('Mars')\nplanets","636dce93":"planets.pop()","469b6d98":"planets.index('Ztrimus')","5dacd812":"'qwery' in planets","292164c1":"'Earth' in planets","0c583c3c":"# We cant just copy list by simple doing below\nlist_a = [1,2,3,4,5]\nlist_b = list_a\nprint(\"list_a : \",list_a)\nprint(\"list_b : \",list_b)\n\n# Now if i make change into b changes also relfect into both \"a\" and \"b\".\n\nlist_b[2] = 3333333\nprint(\"\\nAfter Conversion in only list_b\\n\")\nprint(\"list_a : \",list_a)\nprint(\"list_b : \",list_b)\n","2edd2c22":"t = (1,2,3,4,5,6)\nt","e9de1aea":"# Uncomment below link to get error\n# t[0] = 4534","757e53a7":"0.125.as_integer_ratio()","c1e44d9b":"a = 1\nb = 0\na, b = b, a\nprint(a, b)","2cd97fad":"planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nfor planet in planets:\n    print(planet, end='_')","3ca2e327":"dice_rolls = (1,2,3,4,5,6)\nfor number in dice_rolls:\n    print(number, end = '\\n')","89255422":"print(\"saurus\")\nprint(\"ztrimus\")\nprint(\"saurus\", end='')\nprint(\"ztrimus\", end='')","7fec7886":"help(print)\nprint(\"========Output========\\n\")\nprint(\"Saurus\",\"Ztrimus\",end=\"!\",sep=\"-\")","ae499ffb":"a_list = [11,22,33,44,55,66,77,88,99]\nfor i in range(5):\n    print(\"Doing important work. i=\", i, \"list_value : \", a_list[i])","f4d0ff99":"i = 0\nwhile i < 6:\n    print(i, end = ' -> ')\n    i += 1","bb1b6917":"# Comprehension Version code\ncubes = [i**3 for i in range(10)]\ncubes","50bce96d":"# Non-comprehension Version code\ncubes = []\nfor i in range(10):\n    cubes.append(i**3)\ncubes","2561f48a":"a_list","95cdf9f8":"short_list = [i for i in a_list if i < 50]\nshort_list","7f4c05a9":"# str.upper() returns an all-caps version of a string\nloud_short_planets = [planet.upper() + '!' for planet in planets if len(planet) < 6]\nloud_short_planets","e533b681":"[55 for planet in planets]","15d0a741":"# Another Long Code\n\ndef count_negatives(nums):\n    \"\"\"Return the number of negative numbers in the given list.\n    \n    >>> count_negatives([5, -1, -2, 0, 3])\n    2\n    \"\"\"\n    n_negative = 0\n    for num in nums:\n        if num < 0:\n            n_negative = n_negative + 1\n    return n_negative","e42de79d":"# Comprehension Code\ndef count_negatives(nums):\n    return len([num for num in nums if num < 0])\n\n# Much better, right?","90eb1d22":"# More Comprehension Code\ndef count_negatives(nums):\n    # Reminder: in the \"booleans and conditionals\" exercises, we learned about a quirk of \n    # Python where it calculates something like True + True + False + True to be equal to 3.\n    return sum([num < 0 for num in nums])","e474b386":"# The Zen of Python\nimport this","61443b21":"# Checking for Lucky number\nnums = [7,14,21,28,70,84,44]\n\ndef has_lucky_number(nums):\n    \"\"\"Return whether the given list of numbers is lucky. A lucky list contains\n    at least one number divisible by 7.\n    \"\"\"\n    for num in nums:\n        if num % 7 == 0:\n            return True\n    # We've exhausted the list without finding a lucky number\n    return False\n\nprint(\"Is this Lucky list\", nums, \" : \",has_lucky_number(nums))\nprint(\"Is this Lucky list\", a_list, \" : \",has_lucky_number(a_list))","87e6a44a":"# List Comprehension\ndef has_lucky_number(nums):\n    return any([num%7==0 for num in nums])\n\nprint(\"Is this Lucky list\", nums, \" : \",has_lucky_number(nums))\nprint(\"Is this Lucky list\", a_list, \" : \",has_lucky_number(a_list))","0394de5f":"help(any)","4c093805":"# [1, 2, 3, 4] > 2","48e86494":"a = [1,2,3,4,5,6]\nfor i in range(len(a)):\n    b = a[:i]+a[i+1:]\n    print(b)\n    if a[i] in b:\n        print(\"True\")","d796e21b":"a = ''\nlen(a)","84ccbe48":"# Old\n'%s %s' % ('one', 'two')","26cde37f":"# New\n'{} {}'.format('one', 'two')","fcd32d40":"# Old\n'%d %d' % (1, 2)","9e4b7cb9":"# New\n'{} {}'.format(1, 2)","64bac3f6":"x = 'May python with you'\ny = \"May python with you\"\nx == y","f6dd5301":"print(\"I'm a ztrimus\")\nprint('She said,\"Machine learning is new to me !\"')","cd0f7575":"# Uncomment below line and run it.\n# print('I'm a ztrimus')","cb32fc1e":"print('I\\'m a Ztrimus')\nprint('What\\'s up?')\nprint(\"That's \\\"cool\\\"\")\nprint(\"Look, a mountain: \/\\\\\")\nprint(\"1\\n2 3\") # \\n : newline character","e6fc47a2":"len(\"I'm a ztrimus\")","d0d303de":"len('I\\'m a ztrimus')","3e8d486e":"hello = \"hello\\nworld\"\nprint(hello)","a7066b6e":"\"\"\"Lately I been, I been losing sleep\nDreaming about the things that we could be\nBut baby I been, I been prayin' hard\nSaid no more counting dollars\nWe'll be counting stars\nYeah, we'll be counting stars\n\"\"\"","89669e1a":"len(\"\\n\")\n# The newline character is just a single character! \n# (Even though we represent it to Python using a combination of two characters.)","e9fb329e":"triplequoted_hello = \"\"\"hello\nworld\"\"\"\nprint(triplequoted_hello)\ntriplequoted_hello == hello","d8d6b6b8":"print('Saurus' + '_Ztrimus')","601787f3":"# Uncomment and run it\n# print('who is '+2+'nd person on moon?')","cc09fe50":"print('who is '+str(2)+'nd person on moon?')","87443b38":"song = \"La..\" * 10\nprint(song)","334923fd":"# Try to multiply a string by 0 (zero) and see what happens.\n'how many extra legs do you have'*0","7f21229c":"# Indexing\n\nname = \"Ztrimus\"\n\nprint(name[0])\nprint(name[-1])","aaae54b8":"# Slicing\n\nprint(name[2:])\nprint(name[-2:])","a5d81e2c":"# How long is this string?\nlen(name)","d378ce7e":"# Yes, we can even loop over them\n[char.upper()+\"!\" for char in name]","ffb23d2a":"# name[0] = 'B'\n\n# name.append doesn't work either","d60592c8":"fact = \"Sun rises in the East\"","5898a3df":"fact.upper()","1184b6a9":"fact.lower()","86fdaeb1":"# Searching for the first index of a substring\nfact.index('Eas')","22dd74c6":"star = \"Sun\"\nfact.startswith(star)","0370b6ce":"fact.endswith(\"In the East\")","f24a46aa":"fact.endswith(\"in the East\")","3d9cc937":"words = fact.split()\nwords","d4e42929":"' '.join(words)","71d9b853":"# Split : Occasionally you'll want to split on something other than whitespace\nbirthdate = '1997-12-18'\nyear, month, day = birthdate.split('-')","d354b8c6":"year","fb5955c4":"month","5c7ee036":"day","3b7c1108":"# Join : str.join() takes us in the other direction, sewing a list of strings up into one long string, \n# using the string it was called on as a separator.\n'\/'.join([day, month, year])","53896905":"# Yes, we can put unicode characters right in our string literals :)\n' \ud83d\udc4f '.join([word.upper() for word in words])","3a744a47":"star + ', is bright.'","48af17d4":"position = 1\n# star + ' is ' + position + \"st \" + \"star in our solar system.\"","ebd5b680":"star + ' is ' + str(position) + \"st \" + \"star in our solar system.\"","e9c3517b":"# Use of format\n'{} is {}st star in our solar system.'.format(star, position)","2294f47b":"sun_mass = 1.303 * 10**22\nearth_mass = 5.9722 * 10**24\npopulation = 52910390\n#           2 decimal points   3 decimal points, format as percent  separate with commas\n\"{} weighs about {:.2} kilograms ({:.3%} of Earth's mass). It is home to {:,} human.\".format(\n    star, sun_mass, sun_mass \/ earth_mass, population)","c4f76965":"# Referring to format() arguments by index, starting from 0\ns = \"\"\"Pluto's a {0}.\nNo, it's a {1}.\n{0}!\n{1}!\"\"\".format('planet', 'dwarf planet')\nprint(s)","ec2eb3b8":"# Use of `f`\nf'{star} is {position}st star in our solar system.'","17324107":"numbers = {'one':1, 'two':2, 'three':3}","5a41cba8":"numbers['one']","7d3f81fb":"numbers['two']","23dd2fad":"numbers['twelve'] = 12\nnumbers","47298595":"numbers['one'] = 'Sun'\nnumbers","9048a562":"planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nplanet_to_initial = {planet: planet[0] for planet in planets}\nplanet_to_initial","8e134f81":"'Saturn' in planet_to_initial","6241f8c1":"'Betelgeuse' in planet_to_initial","ec4c8985":"for k in numbers:\n    print(\"{} = {}\".format(k, numbers[k]))","db8a120e":"# Get all the initials, sort them alphabetically, and put them in a space-separated string.\n' '.join(sorted(planet_to_initial.values()))","3303679d":"for planet, initial in planet_to_initial.items():\n    print(\"{} begins with \\\"{}\\\"\".format(planet.rjust(10), initial))","c60c3660":"import math\n\nprint(\"It's math! It has type {}\".format(type(math)))","6dc5b44c":"print(dir(math))","17969e5a":"# Variable\nmath.pi","81a56deb":"# Function\nmath.log(64,2)","d6e83870":"# We can also call help() on the module itself.\nhelp(math)","1188a0d9":"# Short name or Alias\nimport math as mt\nmt.pi","8f69808d":"mt.pi","03cc5920":"# Short name equivalent following process\nimport pandas\npd = pandas","a5c56727":"pd.Series([1,2,3,])","70e56547":"from math import *\npi","eb044222":"from math import *\nfrom numpy import *\n\n# print(pi, log(64,2))","ad581398":"from math import log, pi\nfrom numpy import asarray","b3e8040e":"import numpy\nprint(\"numpy.random is a\", type(numpy.random))\nprint(\"it contains names such as...\",\n      dir(numpy.random)[-15:]\n     )","57c92fb4":"# Roll 10 dice\nrolls = numpy.random.randint(low=1, high=6, size=10)\nrolls","0117face":"type(rolls)","8f415505":"print(dir(rolls))","38f57869":"# What am I trying to do with this dice roll data? Maybe I want the average roll, in which case the \"mean\"\n# method looks promising...\nrolls.mean()","f72cf7f2":"# Or maybe I just want to get back on familiar ground, in which case I might want to check out \"tolist\"\nrolls.tolist()","b11b67dc":"# That \"ravel\" attribute sounds interesting. I'm a big classical music fan.\nhelp(rolls.ravel)","62867da1":"# Okay, just tell me everything there is to know about numpy.ndarray\n# (Click the \"output\" button to see the novel-length output)\nhelp(rolls)","715672e6":"# rolls + 10","2438648a":"# [3, 4, 1, 2, 2, 1] + 10","7f7d11bf":"# At which indices are the dice less than or equal to 3?\nrolls <= 3","bbc8ffc2":"xlist = [[1,2,3],[2,4,6],]\n# Create a 2-dimensional array\nx = numpy.asarray(xlist)\nprint(\"xlist = {}\\nx =\\n{}\".format(xlist, x))","1cbdf8a6":"# Get the last element of the second row of our numpy array\nx[1,-1]","23966575":"# Get the last element of the second sublist of our nested list?\n# uncomment below code and see\n\n# xlist[1,-1]","b27549b3":"### 3.2. Order of precedence\n\nprecedence rules that determine the order in which operations get evaluated in expressions\n\n**`and`** has higher precedence than **`or`**.\n\n[memorize the order of precedence](https:\/\/docs.python.org\/3\/reference\/expressions.html#operator-precedence).\n\n**[Safer Bet] : just use liberal parentheses**","0b8c0629":"#### 2: dir() (what can I do with it?)","080031c5":"> Readability counts. <br>\n> Explicit is better than implicit.\n\nSo, use these tools to make compact readable programs. But when you have to choose, favor code that is easy for others to understand.","56d9f578":"### 10.1 Syntax","fbb39c2b":"# 11 <a id=\"id11\">Operator Overloading<\/a>","8f7d0a4e":"1. planets[0:3] is our way of asking for the elements of planets starting from index 0 and continuing up to but not including index 3.<br>\n\nwherein Slicing \n\n- **`0 is inclusive`** (means it considering 0th index)\n- **`3 is exclusive`** (means it not considering 3rd index)\n\n**The starting and ending indices are both optional.** If I leave out the start index, it's assumed to be 0.","c3d69006":"\nTuples are almost the same as lists. They differ\n\nin just two ways.\n\n1. The syntax for creating them uses **parentheses** instead of square brackets\n\n2. **They cannot be modified (they are immutable).**","024725a5":"# <a id='id2'>2. Functions<\/a>","f40e9294":"#### 1: type() (what is this thing?)","b3fa214a":"### 1.5. Operators in Python","d69a8206":"### 4.3 Changing lists\n\n- Lists are **\"mutable\"**, meaning they can be modified **\"in place\".**\n\nOne way to modify a list is to assign to an index or slice expression.","ce8dc3a7":"### 4.2 Slicing","a1519adb":"### 7.2 Other functions in Comprehensions","2a1cb5ed":"### 2.5. Docstrings\n\nThe docstring is a triple-quoted string (which may span multiple lines) that comes immediately after the header of a function. When we call help() on a function, it shows the docstring.","7efec10e":"### 4.6 Searching lists","1461995e":"As you've seen, ndigits=-1 rounds to the nearest 10, ndigits=-2 rounds to the nearest 100 and so on.","8aca70bd":"The empty string has length zero. Note that the empty string is also the only string that Python considers as False when converting to boolean.","7114e4cf":"We might think that Python strictly polices how pieces of its core syntax behave such as +, <, in, ==, or square brackets for indexing and slicing. But in fact, it takes a very hands-off approach. When you define a new type, you can choose how addition works for it, or what it means for an object of that type to be equal to something else.\n\nThe designers of lists decided that adding them to numbers wasn't allowed. The designers of numpy arrays went a different way (adding the number to each element of the array).\n\nHere are a few more examples of how numpy arrays interact unexpectedly with Python operators (or at least differently from lists).","bb73b95c":"List comprehensions are one of Python's most beloved and unique features.","ca5c3173":"### 2.9 round() function","e2b5b435":"**`max() is also higher order function`**","2fbc57ce":"### 10.5 Understanding \/ Dealing with strange objects\n\nIn the cell above, we saw that calling a numpy function gave us an \"array\". We've never seen anything like this before (not in this course anyways). But don't panic: we have three familiar builtin functions to help us here.\n\n1. `type()` (what is this thing?)\n2. `dir()` (what can I do with it?)\n3. `help()` (tell me more)","455b28bb":"### 6.1 for loop with \"`in`\"","5fe7f899":"By the way, <br>\nThe second person to step on the Moon was \"Edwin Aldrin\".","e00fe672":"It will be clear to understand when you see as belove\n\n```python\n[\n    planet.upper() + '!' \n    for planet in planets \n    if len(planet) < 6\n]\n```\n\nthese three lines same as SELECT, FROM, and WHERE in SQL","26135afb":"# <a id='id8'>8. Strings<\/a>\n\n- One of the basic types in Python that store text.\n- A string is created by entering text between two single or double quotation marks. \n- When the Python console displays a string, it generally uses single quotes. The delimiter used for a string doesn't affect how it behaves in any way.\n\n**There is another string type in Python called \"docstrings\" that is used for block commenting, but it is actually a string.**","33db0116":"### 2.3. Getting Help in jupyter notebook\n\njust take cursor within the function's parenthesis then click\n1. `shift + Tab`             : to get short description.\n2. `shift + Tab + Tab`       : to get medium description.\n3. `shift + Tab + Tab + Tab` : to get full description.","38823414":"#### 1.5.2 In-Place Operators\nIn-place operators allow you to write code like 'x = x + 3' more concisely, as 'x += 3'.\nThe same thing is possible with other operators such as -, *, \/ and % as well.","4e4e85c9":"### 2.8 pass\n\n\"pass\" is a keyword that does \"literally\" nothing. We used it as a placeholder.<br>\nbecause after we begin a code block, Python requires at least one line of code)","27cfec8f":"After Uncommenting, Error will look like this \n```python\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-88-6f064fcfe2b9> in <module>()\n----> 1 [1, 2, 3, 4] > 2\n\nTypeError: '>' not supported between instances of 'list' and 'int'\n```","7974ffc9":"`if` statement in above is Same as \"WHERE\" clause in SQL","5bf7fcb7":"# Topics \n\n1. [Hello Python !](#id1)\n2. [Functions](#id2)\n3. [Booleans](#id3)\n4. [List](#id4)\n5. [Tuples](#id5)\n6. [Loop](#id6)\n7. [List Comprehensions](#id7)\n8. [Strings](#id8)\n9. [Dictionary](#id9)\n10. [import](#id10)\n11. [Operator Overloading](#id11)","8e88346c":"Many other languages have special operators such as '++' as a shortcut for 'x += 1'. Python does not have these.","3f06abd8":"### More imformation and details About [.Format](https:\/\/pyformat.info\/)","4e7abd7a":"```python\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-23-7b84b6ac8ba6> in <module>()\n----> 1 name[0] = 'B'\n\nTypeError: 'str' object does not support item assignment\n```","93367d31":"### 8.8 String methods\n\ntype ``str`` has lots of very useful methods.","74230fc3":"## Be humble, sit down and check out the tutorial!\nThis kernel explains important building block, a key concept in Python 3 for a beginner and also a good resource to overview Python. If you can understand this kernel in its entirely, then you are all set to proceed further with learning NumPy and Pandas modules of Python.","393352c6":"### 6.3 for loop with \"`range`\"\n\nrange() is a function that returns a sequence of numbers. It turns out to be very useful for writing loops.","4fcd7ba1":"# <a id='id6'>6. Loop<\/a>","2f6a82b4":"### 10.4 Submodules\n\nWe've seen that modules contain variables which can refer to functions or values. Something to be aware of is that they can also have variables referring to other modules.","dde0a9f0":"### 2.2. Common Pitfalls","74cd1019":"### 4.4 List functions\n\nPython has several useful functions for working with lists.\n\n1. len()\n2. sorted()\n3. sum()\n4. max()","2cc85102":"```python\n File \"<ipython-input-3-40a18c27acfe>\", line 1\n    print('I'm a ztrimus')\n             ^\nSyntaxError: invalid syntax\n          ```\n\n**Some characters can't be directly included in a string.** For instance, double quotes can't be directly included in a double quote string; this would cause it to end prematurely.\n\nCharacters like these must be escaped by placing a backslash before them. \n\n**To avoid this error**.<br>\n\\==================\n\n**We can fix this by \"escaping\" the single quote with a backslash.**\n\nEnter \"\\\\\" Before using single quote inside single quote","af048f45":"In this case 'one', 'two', and 'three' are the keys, and 1, 2 and 3 are their corresponding values.\n\nValues are accessed via square bracket syntax similar to indexing into lists and strings.","3652abba":"### 1.4. Numbers and data types in Python","192dee37":"# Thank You !\n```Pythonista : Saurus Ztrimus```<br>\n[Kaggle](https:\/\/www.kaggle.com\/ztrimus) |\n[LinkedIn](https:\/\/www.linkedin.com\/in\/saurabhzinjad\/) |\n[Github](https:\/\/github.com\/SBZed) |\n[Twitter](https:\/\/twitter.com\/ztrimus) |\n[Instagram](https:\/\/www.instagram.com\/sbzed_sage\/) |","ec12f6ca":"### Yeahhhh !!!\nYou are all set with understanding the fundamental building blocks of Python. Now it is time to proceed with understanding NumPy and Pandas, the Python modules which make working with data that much fun and easy!\n\nNext tutorial will be on Pandas! \ud83d\ude0a","cb98e966":"### 9.3 \"in\" operator in dictionary\n\nThe `in` operator tells us whether something is a key in the dictionary","766be3ec":"### 8.7 Strings are IMMUTABLE","2a47ffd5":"You can\u2019t concatenate strings with numbers (integers)","7195acc3":"### 8.10 .format() : Building strings","22fdb389":"### 3.6. Conditional expressions \/ ternary operator","7b44ecf4":"### 4.5 List Methods","e13acc34":"`math` is a module. A module is just a collection of variables (a `namespace`, if you like) defined by someone else. We can see all the names in `math` using the built-in function `dir()`.","2163363c":"After Uncommenting, Error will look like this \n```python\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-139-f00664a3d877> in <module>()\n      2 from numpy import *\n      3 \n----> 4 print(pi, log(64,2))\n\nTypeError: return arrays must be of ArrayType\n```\n\nThese kinds of \"star imports\" can occasionally lead to weird, difficult-to-debug situations.\n\nIn this case, The problem is that the math and numpy modules both have functions called log, but they have different semantics. Because we import from numpy second, its log overwrites (or \"shadows\") the log variable we imported from math.\n\nA good compromise is to import only the specific things we'll need from each module:","692a6560":"# Do you know about Jupyter Notebook?\nIf no, refer this :\n- [Jupyter Notebook Users Manual](https:\/\/jupyter.brynmawr.edu\/services\/public\/dblank\/Jupyter%20Notebook%20Users%20Manual.ipynb)\n- [Markdown for Jupyter notebooks cheatsheet](https:\/\/medium.com\/ibm-data-science-experience\/markdown-for-jupyter-notebooks-cheatsheet-386c05aeebed)","6ac2e7b6":"**if we don't specify a value, sep is treated as having a default value of ' ' (a single space).**\n\nYou can do that in your function as well,<br>\nAdding optional arguments with default values to the functions we define turns out to be pretty easy,<br>\nlet's do that.","c9ba6604":"#### NOTE: Python uses indentation (white space at the beginning of a line) to delimit blocks of code. Other languages, such as C, use curly braces to accomplish this, but in Python indentation is mandatory; programs won't work without it. As you can see, the statements in the if should be indented.","e2152f92":"**It causes importing all function in math direct in python script\/notebook without it's main as \"math\"**\n\n\n`import *` makes all the module's variables directly accessible to you (without any dotted prefix).\n\nBad news: some purists might grumble at you for doing this.\n\nWorse: they kind of have a point.\n","7e3d80ed":"### 4.1 Indexing\n\n- You can access individual list elements with square brackets.","af76fa08":"# <a id='id4'>4. List<\/a>\n","d486199d":"### 9.1 Dictionary Syntex","55467989":"### 10.3 import `*` : importing all","8fc0bbb4":"### 2.1. Getting Help\n\n`help()` function describes what the function\/method does?\n\n**Note** : don't pass a function with parenthesis. Pass the function name as an argument to `help` function.\n","9c35b18b":"We can access a collection of all the keys or all the values with `dict.keys()` and `dict.values()`, respectively.","022c033b":"### 3.5. non-boolean objects","5216738b":"### 8.3 Newline character","1c6e581a":"#### Different ways to pass value in string","d8e3148f":"# <a id='id9'>9. Dictionary<\/a>\n","166bb95a":"### 9.4 \"for\" loop in dictionary\n\nA for loop over a dictionary will loop over its keys","1bf6443f":"**Returned as tuple**\n\nTuples are often used for functions that have multiple return values.","03f1cea5":"### 8.5 String Operations","c395d8f9":"- we don't need to \"declare\" `my_lucky_number` before assigning to it\n- we don't need to tell Python what type of value `my_name` is going to refer to.","07b62505":"#### Other way\n\nPython provides an easy way to avoid manually writing \"\\n\" to escape newlines in a string. Create a string with three sets of quotes, and newlines that are created by pressing Enter are automatically escaped for you.","c6666a5f":"### 10.2 Short name | Alias : Other import syntax","d2b097ce":"### 3.1. Comarisons","6a4e74d3":"\nSo far we've talked about types and functions which are built-in to the language.\n\nBut one of the best things about Python (especially if you're a data scientist) is the vast number of high-quality custom libraries that have been written for it.\n\nSome of these libraries are in the \"standard library\", meaning you can find them anywhere you run Python. Others libraries can be easily added, even if they aren't always shipped with Python.\n\nEither way, we'll access this code with `imports`.","3eba77fd":"Uncomment both code below and see result","0f1d34e8":"### 8.9 .split() and .join() : Going between strings and lists\n\nstr.split() turns a string into a list of smaller strings, breaking on whitespace by default. This is super useful for taking you from one big string to a list of words.","b4f86a64":"We all know operators for Addition, Subtraction, Multiplication, Division, Exponentiation(power), Negation, Modulus. Let's have a glance at them.\n\n#### 1.5.1 Quotient & Remainder\n\nTo determine the quotient and remainder of a division, use the floor division and modulo operators, respectively.\nFloor division is done using two forward slashes.\nThe modulo operator is carried out with a percent symbol (%).\nThese operators can be used with both floats and integers.\n\n|Operator|Name   \t      |Description                                     |\n|--------|----------------|------------------------------------------------|\n|a \/ b   |True division   |Quotient of a and b                             |\n|a \/\/ b  |Floor division  |Quotient of a and b, removing fractional parts  |\n|a % b   |Modulus         |Integer remainder after division of a by b      |","784bcd71":"### 8.4 Docstrings - Triple Quote\n\nSame as Docstring","dcd5f6ec":"### 1.2. Function calls\n- print is a Python function that displays the value passed to it on the screen.","fe136dba":"### 7.1 if statement in List comprehensions","b837884d":"### 8.1 String Syntax | single and double quote","0ab040c4":"So if we import numpy as above, then calling a function in the random \"submodule\" will require two dots.","93924ceb":"### 3.4. Boolean conversion","75d19a3c":"### 3.3. Conditionals","009fd71c":"### 1.1. Variable assignment\n- A variable allows you to store a value by assigning it to a name, which can be used to refer to the value later in the program. \n- variables don't have specific types, so you can assign a string to a variable, and later assign an integer to the same variable. ","67e58291":"### 2.7. Higher-Order Functions : Functions Applied to Functions\n\nYou can supply functions as arguments to other functions.","a5e12a8c":"### 2.6. Default arguments","fb6283e6":"Wouldn't it be great if we could refer to all the variables in the math module by themselves? i.e. if we could just refer to pi instead of math.pi or mt.pi? Good news: we can do that.","436dba2b":"\n- named after the British comedy troupe **Monty Python**.","34211296":"#### 8.5.2  Multiplication with integer\nStrings can also be **multiplied** by integers. This produces a repeated version of the original string. The order of the string and the integer doesn't matter, but the string usually comes first.\n\nStrings can't be multiplied by other strings. Strings also can't be multiplied by floats, even if the floats are whole numbers.","cb4c963a":"### 6.2 sep & end\n\nThe `print()` function automatically adds a newline character unless we specify a value for the keyword argument end other than the default value of `'\\n'`","0899bf05":"### 8.2 Use of Escaping Character","f26d51ec":"```python\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-10-ad7581c09fc8> in <module>\n      1 # Uncomment and run it\n----> 2 print('who is '+2+'nd person on moon?')\n\nTypeError: must be str, not int```\n\nBut \"Nothing's Gonna Stop Us!\"<br>\nEven if your strings contain numbers, they are still added as strings rather than integers.","e8177c4b":"To see all method available for string, \n1. type `variable_name` \n2. then type `dot` (.)\n3. then Press `Tab` To see available methods","0dcfd4f8":"### 1.6. Order of operations\n**Associativity of Operators**\n\nPEMDAS - Parentheses, Exponents, Multiplication\/Division, Addition\/Subtraction.","d8302054":"### 8.6 Strings are sequences","4282cd50":"#### 8.5.1 Concatenation","f7ced337":"Dictionaries are a built-in Python data structure for mapping keys to values.\n","ae783b31":"# <a id='id1'>1. Hello Python !<\/a>\n","b607d523":"**Better \"Copy And Edit\"(Button at Right Top) before start. So you can edit and try codes on your own.**","f5ee62eb":"### 6.4 while loop","4904cfc9":"The very useful `dict.items()` the method lets us iterate over the keys and values of a dictionary simultaneously. (In Python jargon, an item refers to a key, value pair)","d448a486":"The things an object carries around can also include functions. A function attached to an object is called a method. (Non-function things attached to an object, such as `imag`, are called attributes).","0460a465":"### 2.4. Defining functions","898fcee2":"# <a id='id5'>5. Tuples<\/a>\n","cc701b60":"**As you can see, the `\\n` was automatically put in the output, where we pressed Enter.**","44ce7284":"After Uncommenting, Error will look like this \n\n```python\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-45-58543fb5a6f6> in <module>()\n----> 1 t[0] = 4534\n\nTypeError: 'tuple' object does not support item assignment\n```","d44e6c8b":"# <a id='id3'>3. Booleans<\/a>\n- Another type in Python is the Boolean type. \n- There are two Boolean values:\n    - `True`\n    - `False`\n- To combine result\n    - `and`\n    - `or`\n    - `not`\n- They can be created by comparing values, for instance by using the equal operator ==. \n\n**Note:** Be careful not to confuse **assignment** (one equals sign) with **comparison** (two equals signs).","9d7af792":"After Uncommenting, Error will look like this \n```python\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-49-e27a5884305d> in <module>()\n      1 position = 1\n----> 2 star + ' is ' + position + \" st\" + \"star in our solar system.\"\n\nTypeError: can only concatenate str (not \"int\") to str\n```","a05ca6f5":"These operators can be used on types other than numbers, as well, such as strings.","ecc52b55":"**Python evaluates an expression like this from the inside out. First, it calculates the value of round(-2.01), then it provides help on the output of that expression.**","b1f3eec0":"### 9.2 dictionary comprehension\n\nPython has dictionary comprehensions with a syntax similar to the list comprehensions we saw in the previous tutorial.","dbac932e":"# <a id='id10'>10. import<\/a>\n","95ffe8d5":"### 1.7. Built-in Functions\n- `print`\n- `type`\n- `min`\n- `max`\n- `abs`\n- [many more](https:\/\/www.programiz.com\/python-programming\/methods\/built-in) ...","2e0ff185":"# <a id='id7'>7. List comprehensions<\/a>\n","34934846":"Good programmers use docstrings unless they expect to throw away the code soon after it's used (which is rare). So, you should start writing docstrings too.","bbd8904b":"### 1.3. conditionals","f9d81f73":"#### 1.3.1 if Statements\n\n- You can use if statements to run code if a certain condition holds.\n- If an expression evaluates to True, some statements are carried out. Otherwise, else statement executed.","519dd537":"#### 3: help() (tell me more)","a353a1f1":"numpy's ndarray type is specialized for working with multi-dimensional data, so it defines its own logic for indexing, allowing us to index by a tuple to specify the index at each dimension.","2d307a98":"> Note: When a string is printed, the quotes around it are not displayed.","6acb477b":"### 8.11 f\"\" : for Python3.7+\n\nthis can only use in python 3.7 or onwards version","31bb0ca5":"\n- Lists in Python represent ordered sequences of values.","6499fb5d":"#### Type Conversion\n\nIn Python, it's impossible to complete certain operations due to the types involved. \n\nFor instance, you can't add two strings containing the numbers 2 and 3 together to produce the integer 5, as the operation will be performed on strings, making the result '23'.\nThe solution to this is type conversion.\nIn that example, you would use the int function.\n```python\n>>> \"2\" + \"3\"\n'23'\n>>> int(\"2\") + int(\"3\")\n5```\nIn Python, the types we have used so far have been integers, floats, and strings. The functions used to convert to these are int, float and str, respectively."}}