{"cell_type":{"845c85b5":"code","74b2bafa":"code","d3c92235":"code","9e1e357a":"code","033438ae":"code","f64fef2f":"code","7da6d0b8":"code","f1f679ce":"code","d10f072f":"code","c96d89fd":"code","a29abce0":"code","d08aae1d":"code","a914ca79":"code","453e4bd6":"code","33256304":"code","294d602e":"markdown","4678aa71":"markdown","5e42fa3d":"markdown","61a83de1":"markdown"},"source":{"845c85b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport keras\nimport random\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport math\nimport sklearn.ensemble as skl\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","74b2bafa":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ncombined = [train,test]\ntrain.head()\n","d3c92235":"test.describe()","9e1e357a":"\n#:ets convert sex to a numerical value for simplicity\nfor ds in combined:\n    ds['Sex'] = ds['Sex'].map({'female': 1, 'male': 0})\n    # Next, let's fill in the Embarkation point values. Shamelessly borrowed from https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions\n\n    freq_port = ds.Embarked.dropna().mode()[0]\n    ds['Embarked'] = ds['Embarked'].fillna(freq_port)\n    ds['Embarked'] = ds['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n    \n\n    # Let's simplify the Titles\/Honorifics\n    # In theory, the Age values can be interpreted from these\n    ds['Title'] = ds.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n    \n#NOTE: Will reuse following code a lot\ntrain = combined[0]\ntest = combined[1]\n","033438ae":"#train.head()\npd.crosstab(train[\"Sex\"],train['Title'])","f64fef2f":"#train.head()\npd.crosstab(test[\"Sex\"],test['Title'])","7da6d0b8":"for ds in combined:\n    honorifics = ['Capt','Col','Countess','Don','Dr','Jonkheer','Lady','Major','Rev','Sir','Dona']\n    ds[\"Title\"] = ds[\"Title\"].replace(honorifics, 'Titled')\n    \n    ds[\"Title\"] = ds[\"Title\"].replace([\"Miss\",\"Mlle\"],'Ms')\n    ds[\"Title\"] = ds[\"Title\"].replace([\"Mme\"],'Mrs')\n    \n    ds[\"Title\"]  = ds[\"Title\"].map( {'Master': 0, 'Ms': 1, 'Mr': 2, 'Mrs' : 3, 'Titled' : 4})\n    \n#NOTE: Will reuse following code a lot\ntrain = combined[0]\ntest = combined[1]","f1f679ce":"counts = np.zeros((5,1))\nmeans = np.zeros((5,1))\nst_devs = np.zeros((5,1))\n\n#First thing, go over the completed rows for the age distributions\nmerged = pd.concat(combined, sort=True) #NOTE TO SELF: Go back over the earlier processing steps later maybe\nmerged = merged.dropna(subset=[\"Age\"],axis = \"rows\")\n\nfor i in range(5):\n    a = merged.loc[merged[\"Title\"] == i]\n    means[i] = a.loc[:,\"Age\"].mean()\n    st_devs[i] = a.loc[:,\"Age\"].std()\n","d10f072f":"#Now that we have the descriptive statistics, we will assume gaussian distributions for all of them and fill in accordingly\ni = 0\nfor ds in combined:\n    for index, row in ds.iterrows():\n        if math.isnan(row[\"Age\"]):\n            age = -2\n            title = int(row[\"Title\"])\n            mu = means[title]\n            spread = st_devs[title]\n            while (age < 0):\n                age = np.random.normal(loc = mu,scale = spread)\n            i = i + 1\n            row[\"Age\"] = age\n            ds.loc[index,:] = row\n#NOTE: Will reuse following code a lot\ntrain = combined[0]\ntest = combined[1]            \n","c96d89fd":"#Just making sure nothing broke\ntrain.tail()","a29abce0":"#Now to keep paring it down, we'll cut the unimportant variables and extract the survived column\nfor ds in combined:\n    ds.drop(['Ticket', 'Cabin','Name','PassengerId'], axis=1,inplace = True)\n#NOTE: Will reuse following code a lot\ntrain = combined[0]\ntest = combined[1]\n\nsurvival = train[\"Survived\"]\ntrain.drop([\"Survived\"],axis = 1,inplace = True)\n\n","d08aae1d":"#So it turns out there's a nan in the fares for the test set. Let's fix that\n#Shouldn't make things too bad if we just use mean for this one\nmean_fare = merged[\"Fare\"].mean()\ntest[\"Fare\"] = test[\"Fare\"].fillna(mean_fare)","a914ca79":"#So I guess we try some classification now\n\nclf = skl.RandomForestClassifier(n_estimators=100, max_depth=4, random_state=0)\nclf.fit(train,survival)","453e4bd6":"predictions = clf.predict(test)","33256304":"#Now to package this all up\nIDs  = range(892,1310) #Because I forgot about this\nd = {'PassengerId': IDs, 'Survived': predictions}\nfinal = pd.DataFrame(data = d)\nfinal.to_csv('Final.csv',index = False)","294d602e":"**Step 1: Actually Look at the Data**\n\nFirst things first, we need to see what the dataset looks like- what information we have, and what needs to be filled in","4678aa71":"**So how do we deal with that age column?**\n\nWell,\n* The ages of all passengers should follow some (wide) distribution\n* Within the title classes, there should be significantly tighter distributions\n* So if we assume Gaussians in all title classes, we can fill in the ageless entries with guesses on that distribution\n","5e42fa3d":"**So, some off-the-cuff thoughts**\n* Full name is almost certainly useless\n* ...that being said, I wonder if LENGTH of the name will do something? I'll keep that in mind for future analysis\n* Cabin number appears to contrain many nulls, possibly a category to drop entirely\n* Embarkation location has two nulls: I might just drop these from the dataset\n* Age has quite a few null values, enough that some sort of interpolation\/guessing would be useful","61a83de1":"**So what do we do with all of these?**\n\nI don't think giving each of these a unique title value will be terribly helpful, so let's look for a better categorization. We can group these into five distinct categories by the looks of it:\n1. Master (Presumably younger male passengers)\n2. Mr. (Older male)\n3. Mrs.\/Mme (Married women)\n4. Miss\/Mlle\/Ms. (I.e. unmarried women) (Not sure if this is distinct from 3. in analysis)\n5. All the honorific titles (Capt,Col,Jonkheer, etc.)"}}