{"cell_type":{"f1fe73b2":"code","d11b24c3":"code","098b4f14":"code","d7379e46":"code","f7b1467f":"code","eee2eceb":"code","56c1b94a":"code","e1414302":"code","f298d401":"code","7633d9fc":"code","1850406d":"code","f4cdd204":"code","26ca1afe":"code","43bd9ad9":"code","84cb7f39":"code","c804841f":"code","4c74d576":"code","c072e8bb":"code","41a755fc":"code","6795ff4a":"code","610aa801":"code","01613e0a":"code","5e48932c":"code","dabd7077":"code","034df0c7":"code","99366365":"code","273e9644":"code","398037f2":"code","2c0b4053":"code","ef3722d5":"code","a53d47e9":"code","29c42245":"code","c394bac3":"code","ae1889e3":"code","50fe82ec":"code","8bee7dff":"code","5dbc647f":"code","7e533257":"code","4ed38f93":"code","f53cae57":"code","96a5ec01":"code","b31aa1ae":"code","e7f5f79e":"code","b8bf05f7":"code","3e95ad23":"code","c38491a3":"code","6580a5a9":"markdown","81d4e3e2":"markdown","3fcd3e7d":"markdown","d37f8ce9":"markdown","485b3281":"markdown","8dc83b4f":"markdown","a50c560a":"markdown","f0ff1e65":"markdown"},"source":{"f1fe73b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d11b24c3":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split,GridSearchCV,RandomizedSearchCV,cross_val_score\nfrom sklearn.linear_model import LogisticRegression,RidgeClassifier,LogisticRegressionCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier,VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\nsns.set(style=\"darkgrid\", palette=\"muted\", color_codes=True)\ntrain_main = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_main = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","098b4f14":"train_df=train_main\ntest_df=test_main","d7379e46":"train_main.head()","f7b1467f":"train_main.info()","eee2eceb":"ck=[]\nd_cabin=dict()\nfor i in train_df['Cabin']:\n    if pd.isnull(i) or i=='T':\n        ck.append('a')\n        d_cabin['a']=d_cabin.get('a',0)+1\n        continue\n    ck.append(i[0])\n    d_cabin[i[0]]=d_cabin.get(i[0],0)+1\n# print(ck)\nprint(d_cabin)\ntrain_df['Cabin']=ck\ntrain_df.head()","56c1b94a":"train_df.describe()","e1414302":"num_df=train_df.select_dtypes(exclude='object')\nplt.figure(figsize=(8,8))\nsns.heatmap(num_df.corr(),annot=True,cmap='RdYlBu')","f298d401":"pd.pivot_table(train_df,index='Survived',columns='Cabin',values='Pclass',aggfunc='count')","7633d9fc":"pd.pivot_table(train_df,index='Survived',columns='Sex',values='Pclass',aggfunc='count')","1850406d":"pd.pivot_table(train_df,index='Survived',columns='SibSp',values='Pclass',aggfunc='count')","f4cdd204":"pd.pivot_table(train_df,index='Survived',columns='Parch',values='Pclass',aggfunc='count')","26ca1afe":"print(train_df['SibSp'].value_counts())\nfrom collections import Counter\ndef solve(x):\n    if x==0:\n        return x\n    if x<4:\n        return 1\n    return 2\nck1=[solve(i) for i in train_df['SibSp']]\nck2=[solve(i) for i in train_df['Parch']]\nprint(len(ck1),len(ck2),Counter(ck1),Counter(ck2))\ntrain_df['SibSp']=ck1\ntrain_df['Parch']=ck2","43bd9ad9":"pd.pivot_table(train_df,index='Survived',columns='SibSp',values='Pclass',aggfunc='count')","84cb7f39":"pd.pivot_table(train_df,index='Survived',columns='Parch',values='Pclass',aggfunc='count')","c804841f":"train_df.info()","4c74d576":"test_df.info()","c072e8bb":"X=train_df.drop([\"PassengerId\",\"Name\",\"Ticket\"],axis=\"columns\")\nX.head()\nX.dropna()","41a755fc":"num_df=train_df.select_dtypes(exclude='object')\nplt.figure(figsize=(8,8))\nsns.heatmap(num_df.corr(),annot=True,cmap='RdYlBu')","6795ff4a":"X=pd.get_dummies(X,columns=['Pclass','Sex','SibSp','Parch','Cabin','Embarked'])\nX.head()","610aa801":"X=X.dropna()\nX.info()","01613e0a":"x_train=X.drop([\"Survived\"],axis=\"columns\")\ny_train=X[\"Survived\"]\nx_train,x_test,y_train,y_test=train_test_split(x_train,y_train,test_size=.2,random_state=69)","5e48932c":"model=LogisticRegressionCV(cv=20,solver='liblinear')\nmodel.fit(x_train,y_train)","dabd7077":"model.score(x_test,y_test)","034df0c7":"best_model=LogisticRegressionCV(cv=20,solver='liblinear')\nbest_score=0\nfrom random import randint\n\nx_train=X.drop([\"Survived\"],axis=\"columns\")\ny_train=X[\"Survived\"]\nx_train,x_test,y_train,y_test=train_test_split(x_train,y_train,test_size=.1)\n\nfor i in range(15):\n    x_train_u,x_test_u,y_train_u,y_test_u=train_test_split(x_train,y_train,test_size=0.2)\n    model=LogisticRegressionCV(cv=randint(5,10)*2,solver='liblinear')\n    model.fit(x_train_u,y_train_u)\n    z=model.score(x_test_u,y_test_u)\n    if z>best_score:\n        best_score=z\n        best_model=model\n    print(i+1,'->',z)\nprint(\"best ->\",best_model.score(x_test,y_test))","99366365":"ck=[]\nd_cabin=dict()\nfor i in test_df['Cabin']:\n    if pd.isnull(i):\n        ck.append('a')\n        d_cabin['a']=d_cabin.get('a',0)+1\n        continue\n    ck.append(i[0])\n    d_cabin[i[0]]=d_cabin.get(i[0],0)+1\n\ntest_df['Cabin']=ck\ntest_df.head()\nck1=[solve(i) for i in test_df['SibSp']]\nck2=[solve(i) for i in test_df['Parch']]\nprint(len(ck1),len(ck2),Counter(ck1),Counter(ck2))\ntest_df['SibSp']=ck1\ntest_df['Parch']=ck2\ntest_df.head()","273e9644":"print(Counter(ck1),Counter(ck2),Counter(ck))","398037f2":"Xt=test_df.drop([\"PassengerId\",\"Name\",\"Ticket\"],axis=\"columns\")\nXt.head()","2c0b4053":"Xt=pd.get_dummies(Xt,columns=['Pclass','Sex','SibSp','Parch','Cabin','Embarked'])\nXt.fillna(value={\n    'Age':int(Xt['Age'].mean()),\n    'Fare' : Xt['Fare'].mean()\n    },\n    inplace=True\n)\n\n","ef3722d5":"Xt.head()\npredicted=best_model.predict(Xt)","a53d47e9":"final=pd.DataFrame({\n    \"PassengerId\":test_df[\"PassengerId\"],\n    'Survived':predicted\n})\nfinal.head()\nfile='titanic_predictions'\nfinal.to_csv(file,index=False)\n","29c42245":"predicted","c394bac3":"x_train=X.drop([\"Survived\"],axis=\"columns\")\ny_train=X[\"Survived\"]\nx_train,x_test,y_train,y_test=train_test_split(x_train,y_train,test_size=.2,random_state=69)","ae1889e3":"lr=LogisticRegression(max_iter=669,random_state=69);\nsolvers = ['liblinear','newton-cg']\nc_values = [10,9,8,7,6,4,3,2,1.0,0.5,0.1,0.05,0.01]\nparameters=dict(solver=solvers,C=c_values)\nmodel_lr=GridSearchCV(lr,parameters,n_jobs=4,scoring='accuracy',cv=15)\nmodel_lr.fit(x_train,y_train)","50fe82ec":"best_model_lr=model_lr.best_estimator_\nprint(best_model_lr.score(x_test,y_test))\nprint(model_lr.best_score_, model_lr.best_params_)\npredicted_lr=best_model_lr.predict(Xt)\nprint(predicted_lr)","8bee7dff":"rc=RidgeClassifier(max_iter=669,random_state=69)\nalpha=[i\/10 for i in range(1,11,2)]+[i\/100 for i in range(1,11,2)]+ [i\/500 for i in range(1,11,2)]\nparameters=dict(alpha=alpha)\nmodel_rc=GridSearchCV(rc,parameters,n_jobs=4,scoring='accuracy',cv=15)\nmodel_rc.fit(x_train,y_train)","5dbc647f":"best_model_rc=model_rc.best_estimator_\nprint(best_model_rc.score(x_test,y_test))\nprint(model_rc.best_score_, model_rc.best_params_)\npredicted_rc=best_model_rc.predict(Xt)\nprint(predicted_rc)","7e533257":"knn=KNeighborsClassifier()\nn_neighbors=list(range(3,27,2))\nweights = ['uniform', 'distance']\nmetric = ['euclidean', 'manhattan', 'minkowski']\nparameters = dict(n_neighbors=n_neighbors,weights=weights,metric=metric)\nmodel_knn=GridSearchCV(knn,parameters,n_jobs=4,scoring='accuracy',cv=15)\nmodel_knn.fit(x_test,y_test)","4ed38f93":"best_model_knn=model_knn.best_estimator_\nprint(best_model_knn.score(x_test,y_test))\nprint(model_knn.best_score_, model_knn.best_params_)\npredicted_knn=best_model_knn.predict(Xt)\nprint(predicted_knn)","f53cae57":"svm=SVC(random_state=69)\nkernel = ['poly', 'rbf', 'sigmoid'] # ,'linear'\nC = [10, 1.0, 0.1, 0.01]+[i for i in range(20,80,10)]\ngamma = ['scale']\nparameter=dict(kernel=kernel,C=C,gamma=gamma)\nmodel_svm=GridSearchCV(svm,parameter,scoring='accuracy',n_jobs=4,cv=15)\nmodel_svm.fit(x_train,y_train)","96a5ec01":"best_model_svm=model_svm.best_estimator_\nprint(best_model_svm.score(x_test,y_test))\nprint(model_svm.best_score_, model_svm.best_params_)\npredicted_svm=best_model_svm.predict(Xt)\nprint(predicted_svm)","b31aa1ae":"# model_sft=VotingClassifier(estimators=[('lr',best_model_lr),('knn',best_model_knn),('svc',best_model_svm)],voting='soft',verbose=True)\nmodel_hrd=VotingClassifier(estimators=[('lr',best_model_lr),('rc',best_model_rc),('knn',best_model_knn),('svc',best_model_svm)],voting='hard')","e7f5f79e":"model_hrd.fit(x_train,y_train)","b8bf05f7":"model_hrd.score(x_test,y_test)","3e95ad23":"predicted=model_hrd.predict(Xt)\npredicted\n        ","c38491a3":"final=pd.DataFrame({\n    \"PassengerId\":test_df[\"PassengerId\"],\n    'Survived':predicted\n})\nfinal.head()\nfile='titanic_predictions'\nfinal.to_csv(file,index=False)","6580a5a9":"Importing Modules and dataset","81d4e3e2":"SVM","3fcd3e7d":"Random Forest","d37f8ce9":"voting","485b3281":"As Parch==0 and SibSp==0 has 30% chance of survival\n   0<Parch<4 ans 0<Sib<4 has 50+ chance of survival\n","8dc83b4f":"LOGISTIC REGRISSION","a50c560a":"RIDGE CLASSIFIER","f0ff1e65":"KNN"}}