{"cell_type":{"1505cf80":"code","40dcfaa2":"code","9ae80291":"code","399638e1":"code","ec6e3d69":"code","46bbbdab":"code","ca0dde1a":"code","c105c99a":"code","a82c42c9":"code","6b0732dc":"code","4bfdb7f6":"code","dbdc165d":"code","59984be9":"code","69b95ad4":"code","a76800f7":"code","c5429b87":"code","89c5d4e8":"code","08fa9533":"code","8c70b1aa":"code","453de57c":"code","9b08918a":"code","c474bcfa":"code","77e95876":"code","4d5596be":"code","0563c348":"code","e049f1fa":"code","4895d857":"code","abb704c3":"code","d2dda1bf":"code","1fccbdef":"code","b2b7e141":"code","e2a0443d":"code","a7dad299":"code","524f31a5":"code","a3448c3b":"code","c2858dea":"code","582aea29":"code","6f0fac39":"code","f799bbb0":"code","63a1124d":"code","838bbe44":"code","0924c021":"code","7aa794d9":"code","f82559ba":"code","ee29566d":"code","146fe33c":"code","1427b609":"code","db6ecc22":"code","48d67c56":"code","2d550fa0":"code","abb9995b":"code","b8a6fb6d":"code","3d676e45":"code","94d605e2":"code","190e8c26":"code","4884bb92":"code","027c20e0":"code","574e1a93":"code","03c00335":"code","471bbafc":"code","2dac37a0":"code","1163301a":"code","2c06a746":"code","2e378b28":"code","f93c87cf":"code","823ff520":"code","39e82156":"code","eaac413b":"code","44e23f41":"markdown","a3ee3930":"markdown","3f50e92f":"markdown","1143bb3b":"markdown","5cdb0367":"markdown","991e42d9":"markdown","68fd8eaa":"markdown","58ec3005":"markdown","9d2e5f8d":"markdown","03a328c7":"markdown","b2d0431d":"markdown","7e53e4a0":"markdown","925648d6":"markdown","5f58a41d":"markdown","a8f71b74":"markdown","7809cce6":"markdown","d754ca4b":"markdown","69f2a288":"markdown","b56bb2d4":"markdown","aa948b0d":"markdown","6c8c6110":"markdown","70291d35":"markdown","55ae2797":"markdown","c60a1e90":"markdown","c88e8817":"markdown","ef24398f":"markdown","aff4dc2c":"markdown","20947ff5":"markdown","4d77c894":"markdown","5cbf6755":"markdown","8942cb6d":"markdown","550e65fd":"markdown"},"source":{"1505cf80":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nfrom datetime import datetime\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","40dcfaa2":"medianincomedata = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv\", encoding = \"windows-1252\")\n\ngraduateframe = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv\", encoding = \"windows-1252\")\ngraduateframe.replace(['-'], 'NaT', inplace = True)\ngraduatedata = graduateframe[graduateframe['percent_completed_hs'] != 'NaT']\n\npovertydata = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv\", encoding = \"windows-1252\")\n\npolicepolicydata = pd.read_csv(\"..\/input\/policiesofpolice\/police_policies.csv\", encoding = \"windows-1252\")\npolicepolicydata.City.replace(['Washington DC'], 'Washington', inplace = True)\npolicepolicydata.City.replace(['Kansas City, MO'], 'Kansas City', inplace = True)\npolicepolicydata.fillna('0', inplace = True)\npolicepolicydata.rename(columns = {'Requires\\xa0De-Escalation': 'Requires De-Escalation', 'Has Use of Force\\xa0Continuum' : 'Has Use of Force Continuum',\n                                   'Bans Chokeholds\\xa0and Strangleholds' : 'Bans Chokeholds and Strangleholds', 'Requires Warning\\xa0Before Shooting' : 'Requires Warning Before Shooting',\n                                   'Restricts Shooting\\xa0at Moving Vehicles' : 'Restricts Shooting at Moving Vehicles',\n                                   'Requires Exhaust All Other\\xa0Means Before Shooting' : 'Requires Exhaust All Other Means Before Shooting',\n                                    'Requires Comprehensive\\xa0Reporting' : 'Requires Comprehensive Reporting'}, inplace = True)\n\npolicekillingsdata = pd.read_csv('..\/input\/police-violence-in-the-us\/shootings_wash_post.csv')\npolicekillingsdata2 = pd.read_csv('..\/input\/police-violence-in-the-us\/police_killings.csv')\npolicekillingsdata2.replace({'Physical restraint' : 'Physical Restraint', 'Taser, Pepper spray, beaten' : 'Taser, Pepper Spray, Beaten', 'Unknown race' : 'Unknown Race'}, inplace = True)\npolicekillingsdata2[\"Victim's age\"].replace({'Unknown' : 'NaN', '40s' : 'NaN'}, inplace = True)\npolicekillingsdata2.rename(columns = {'Geography (via Trulia methodology based on zipcode population density: http:\/\/jedkolko.com\/wp-content\/uploads\/2015\/05\/full-ZCTA-urban-suburban-rural-classification.xlsx )' \n                                      : 'Human Geography', 'Date of Incident (month\/day\/year)' : 'date'}, inplace = True)\npolicekillingsdata2['date'] = pd.to_datetime(policekillingsdata2['date'])\npolicekillingsdata2['year'] = policekillingsdata2.apply(lambda row: row['date'].year, axis = 1) \n\nraceframe = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv\", encoding = \"windows-1252\")\nraceframe.replace(['(X)'], 'NaT', inplace = True)\nracedata = raceframe[raceframe['share_white'] != 'NaT']\nracedata.City.replace({' city': '', ' town' : '', 'Urban Honolulu CDP' : 'Honolulu',\n                       'New York City' : 'New York', ' municipality' : '', 'Lexington-Fayette urban county' : 'Lexington',\n                       'Louisville\/Jefferson County metro government' : 'Louisville',\n                      'Nashville-Davidson metropolitan government' : 'Nashville',\n                      'Washington ' : 'Washington'}, regex = True, inplace = True)\n\nracedata2 = pd.read_csv('..\/input\/racedata\/raw_data.csv')\nracedata2.columns = racedata2.iloc[1]\nracedata2 = racedata2[3:]\nracedata2.drop(racedata2.tail(18).index, inplace = True)\nracedata2.replace({'<.01': '0'}, inplace = True)\nracedata2 = racedata2.fillna('0')\n\nstatepop = pd.read_csv(\"..\/input\/statepop\/statepop.csv\", thousands = ',')\nstatepop.dropna(subset = ['Code'], inplace = True)\nstategunlaws = pd.read_csv(\"..\/input\/stategunlaws\/stategunlaws.csv\")\nstategunlaws.rename(columns = {'Code' : 'States'}, inplace = True)\n\ncitypop = pd.read_csv(\"..\/input\/citypop\/City pop.csv\", thousands = ',')\ncitypop.rename(columns = {'Unnamed: 1' : 'City', 'Unnamed: 2' : 'State', 'Unnamed: 14' : 'Population'}, inplace = True)\ncitypop.rename(columns = {'Unnamed: 2' : 'City'}, inplace = True)\ncitypop.City.replace({' city' : '', ' municipality' : '', 'Urban ': '', ' CDP' : '', ' \\(balance\\)' : '', '-Fayette urban county' : '', '\/Jefferson County metro government' : '',\n                     '-Davidson metropolitan government' : ''}, regex = True, inplace = True)\n\nstatenames = statepop['State name'].unique().tolist()\n\npoliticsdata = pd.read_csv('..\/input\/politics\/politics_538.csv', skipinitialspace = True)\n\nbudgetdata = pd.read_csv('..\/input\/budgets\/budgets.csv', skipinitialspace = True)\n\nviolentcrimesdata = pd.read_csv('..\/input\/police-violence-in-the-us\/deaths_arrests_race.csv')\n\njuvenilearrestsdata = pd.read_csv('..\/input\/police-violence-in-the-us\/juvenile_arrests.csv')\n\nchicagocrimes = pd.read_csv('..\/input\/police-violence-in-the-us\/large_metro_areas\/Chicago Crimes_-_2001_to_Present.csv')","9ae80291":"citystatenamelist = list(citypop['State'])\ncitystatenamelist = [str(i) for i in citystatenamelist]\ncitystatenamelist = [i.lstrip() for i in citystatenamelist]\ncitystatecodelist = []\nfor name in citystatenamelist:\n    if name in list(statepop['State name']):\n        citystatecodelist.append(statepop[statepop['State name'] == name]['Code'].item())\n    else:\n        citystatecodelist.append('NaN')\n        \ncitystatecodearray = np.asarray(citystatecodelist)\ncitypop['State code'] = citystatecodearray\n\ncitystatenamelist2 = list(politicsdata['State'])\ncitystatenamelist2 = [str(i) for i in citystatenamelist2]\ncitystatenamelist2 = [i.lstrip() for i in citystatenamelist2]\ncitystatecodelist2 = []\ncitystatecodelist2 = []\nfor name in citystatenamelist2:\n    if name in list(statepop['State name']):\n        citystatecodelist2.append(statepop[statepop['State name'] == name]['Code'].item())\n    else:\n        citystatecodelist2.append('NaN')\ncitystatecodearray2 = np.asarray(citystatecodelist2)\npoliticsdata['State code'] = citystatecodearray2\n\n\ncitystatenamelist3 = list(racedata2['Location'])\ncitystatenamelist3 = [str(i) for i in citystatenamelist3]\ncitystatenamelist3 = [i.lstrip() for i in citystatenamelist3]\ncitystatecodelist3 = []\ncitystatecodelist3 = []\nfor name in citystatenamelist3:\n    if name in list(statepop['State name']):\n        citystatecodelist3.append(statepop[statepop['State name'] == name]['Code'].item())\n    else:\n        citystatecodelist3.append('NaN')\ncitystatecodearray3 = np.asarray(citystatecodelist3)\nracedata2['State code'] = citystatecodearray3","399638e1":"killsbystate2 = pd.Series(policekillingsdata2['State'])\nkillsbystatecount2 = killsbystate2.value_counts()\n\nplt.figure(figsize=(16,10))\nsns.barplot(x = killsbystatecount2.index, y = killsbystatecount2.values)\nplt.ylabel('Police Killings (Jan 2013 - Jan 2020)')\nplt.xlabel('States')\nplt.title('Police Killings by State from 2013 - 2020')","ec6e3d69":"statepop.Population = statepop.Population.astype(float)\nsortedstatepop = statepop.sort_values(by = 'Population', ascending = False)\n\nplt.figure(figsize=(16,10))\nsns.barplot(x = sortedstatepop.Code, y = sortedstatepop.Population)\nplt.xlabel('States')\nplt.title('State Populations')\nplt.ylabel('Estimated Population in 2019 (10,000,000)')","46bbbdab":"policekillingsagedata = policekillingsdata2[policekillingsdata2[\"Victim's age\"].astype(float) > 10][policekillingsdata2[\"Victim's age\"].astype(float) < 100][\"Victim's age\"].value_counts()\n\nplt.figure(figsize = (20, 10))\nsns.barplot(x = policekillingsagedata.index, y = policekillingsagedata.values)\nplt.xlabel('Age')\nplt.ylabel('Total Deaths')\nplt.title('Total Deaths by Age of Victim')","ca0dde1a":"years = (2013, 2014, 2015, 2016, 2017, 2018, 2019)\nb = []\nfor year in years:\n    b.append(len(policekillingsdata2[policekillingsdata2['year'] == year]))\nkillingsperyear = pd.DataFrame({'Police Killings' : b, 'year' : years})\n\nplt.figure(figsize = (16, 10))\nsns.barplot(x = 'year', y = 'Police Killings', data = killingsperyear)\nplt.xlabel('Year')\nplt.title('Total Police Killings By Year')","c105c99a":"dates = pd.date_range(start = '01\/01\/13', end = '12\/31\/19')\ndayspolicekilled = policekillingsdata2['date'].unique()\nkillingsday = []\n\nfor day in dayspolicekilled:\n    killstoday = policekillingsdata2[policekillingsdata2['date'] == day]\n    killingsday.append(len(killstoday))\n\nkillingseachday = pd.DataFrame({'Killings' : killingsday, 'Date' : dayspolicekilled})\nkillingsperday = []\n\nfor day in dates:\n    if day in list(killingseachday['Date'].unique()):\n        killingsperday.append(killingseachday[killingseachday['Date'] == day]['Killings'].item())\n    else:\n        killingsperday.append(0)\n\nkillingsperdayframe = pd.DataFrame({'Killings' : killingsperday, 'Date' : dates})\nkillingsperdayframe['year'] = killingsperdayframe.apply(lambda row: row['Date'].year, axis = 1) \nkillingsperdayframe2 = pd.DataFrame(pd.np.empty((11, 0)) * pd.np.nan) \n\nfor year in years:\n    killingsperdayframe2[year] = killingsperdayframe[killingsperdayframe['year'] == year]['Killings'].value_counts()","a82c42c9":"plt.figure(figsize = (8, 5))\nsns.barplot(x = killingsperdayframe2.index, y = killingsperdayframe2[2013])\nplt.title('2013 Frequency of Deaths from Police Shootings Each Day')\nplt.xlabel('Number of Police Killings')\nplt.ylabel('Number of Days')","6b0732dc":"plt.figure(figsize = (8, 5))\nsns.barplot(x = killingsperdayframe2.index, y = killingsperdayframe2[2014])\nplt.title('2014 Frequency of Deaths from Police Shootings Each Day')\nplt.xlabel('Number of Police Killings')\nplt.ylabel('Number of Days')","4bfdb7f6":"plt.figure(figsize = (8, 5))\nsns.barplot(x = killingsperdayframe2.index, y = killingsperdayframe2[2015])\nplt.title('2015 Frequency of Deaths from Police Shootings Each Day')\nplt.xlabel('Number of Police Killings')\nplt.ylabel('Number of Days')","dbdc165d":"plt.figure(figsize = (8, 5))\nsns.barplot(x = killingsperdayframe2.index, y = killingsperdayframe2[2016])\nplt.title('2016 Frequency of Deaths from Police Shootings Each Day')\nplt.xlabel('Number of Police Killings')\nplt.ylabel('Number of Days')","59984be9":"plt.figure(figsize = (8, 5))\nsns.barplot(x = killingsperdayframe2.index, y = killingsperdayframe2[2017])\nplt.title('2017 Frequency of Deaths from Police Shootings Each Day')\nplt.xlabel('Number of Police Killings')\nplt.ylabel('Number of Days')","69b95ad4":"plt.figure(figsize = (8, 5))\nsns.barplot(x = killingsperdayframe2.index, y = killingsperdayframe2[2018])\nplt.title('2018 Frequency of Deaths from Police Shootings Each Day')\nplt.xlabel('Number of Police Killings')\nplt.ylabel('Number of Days')","a76800f7":"plt.figure(figsize = (8, 5))\nsns.barplot(x = killingsperdayframe2.index, y = killingsperdayframe2[2019])\nplt.title('2019 Frequency of Deaths from Police Shootings Each Day')\nplt.xlabel('Number of Police Killings')\nplt.ylabel('Number of Days')","c5429b87":"states = list(policekillingsdata2['State'].unique())\nstates = [x for x in states if str(x) != 'nan']\nkillsbystatecountframe = killsbystatecount2.to_frame()\nb = []\n\nfor state in states:\n    x = statepop[statepop['Code'] == state]\n    y = killsbystatecountframe[killsbystatecountframe.index == state]\n    killsmillionyear = (((float(y['State'])\/float(x.Population)) \/ 7) * 1000000)\n    b.append(killsmillionyear)\n\nstatekillsPM = pd.DataFrame({'States' : states,'shootingsPM': b})\nstatekillsPM = statekillsPM.sort_values(by = ['shootingsPM'], ascending = False)\n\nplt.figure(figsize=(16,10))\nsns.barplot(x = statekillsPM.States, y = statekillsPM.shootingsPM)\nplt.ylabel('Deaths from Police Shootings per 1M Residence')\nplt.title('Police Shootings per year per 1M Residence by State')","89c5d4e8":"povertydata.poverty_rate.replace(\"-\", 0.0, inplace = True)\npovertydata.poverty_rate = povertydata.poverty_rate.astype(float)\npovertybystatelist = []\n\nfor state in states:\n    statepoverty = povertydata[povertydata['Geographic Area'] == state]\n    meanpoverty = sum(statepoverty.poverty_rate) \/ len(statepoverty)\n    povertybystatelist.append(meanpoverty)\n    \npovertybystate = pd.DataFrame({ \"States\" : states, \"Average poverty rate\" : povertybystatelist})\nsortedpovertybystate = povertybystate.sort_values(by = ['Average poverty rate'], ascending = False)\n\nplt.figure(figsize=(16,10))\nsns.barplot(x = sortedpovertybystate['States'], y = sortedpovertybystate['Average poverty rate'])\nplt.ylabel('% of People Below Poverty Line')","08fa9533":"statepovertyandkills = pd.merge(statekillsPM, sortedpovertybystate, on = 'States', how = 'inner')\n\n\nplot = sns.lmplot(x = 'Average poverty rate', y = 'shootingsPM', data = statepovertyandkills, size = 8)\nplt.xlabel('% of People Below Poverty Line')\nplt.ylabel('Deaths from Police Shootings per year per 1M Residence')\nplt.title('Deaths from Police Shootings compared with Poverty Rate')\n\ndef label_point(x, y, val, ax):\n    a = pd.concat({'x': x, 'y': y, 'val': val}, axis=1)\n    for i, point in a.iterrows():\n        ax.text(point['x'], point['y'], str(point['val']))\n\nlabel_point(statepovertyandkills['Average poverty rate'], statepovertyandkills['shootingsPM'], statepovertyandkills.States, plt.gca())","8c70b1aa":"hsgraduatebystate = pd.DataFrame(columns = ('States', 'Percent Graduated HighSchool'))\nfor state in states:\n    graduatestatedata = graduatedata[graduatedata['Geographic Area'] == state]\n    meangraduatestatedata = ((graduatestatedata['percent_completed_hs'].astype(float).sum()) \/ len(graduatestatedata))\n    hsgraduatebystate = hsgraduatebystate.append({'States' : state, 'Percent Graduated HighSchool' : meangraduatestatedata}, ignore_index = True)","453de57c":"statepovertykillsgraduates = pd.merge(statepovertyandkills, hsgraduatebystate, on = 'States')\n\nsns.lmplot(x = 'Percent Graduated HighSchool', y = 'shootingsPM', data = statepovertykillsgraduates, height = 7)\nplt.ylabel('Deaths from Police Shootings per year per 1M Residence')\n\nlabel_point(statepovertykillsgraduates['Percent Graduated HighSchool'], statepovertykillsgraduates['shootingsPM'], statepovertykillsgraduates.States, plt.gca())","9b08918a":"frame = pd.merge(statekillsPM, stategunlaws, on = 'States', how = 'inner')\n\nnewframe = frame.drop('Unnamed: 2', axis = 1)\nnewframe = newframe.dropna()\n\nplt.figure(figsize=(16,10))\nsns.barplot(x = newframe.States, y = newframe.shootingsPM, hue = newframe['Gun laws'], dodge = False, palette = 'coolwarm')\nplt.ylabel('Deaths from Police Shootings per 1M Residence')\nplt.gca().legend(frameon = False,  title = '     Gun Law Strength \\n 1 Weakest - 10 Strongest', labelspacing = 1)\nplt.title('Relative Police Shootings by State with Gun Law Strength')","c474bcfa":"racelist = list(policekillingsdata2[\"Victim's race\"].unique())\na = policekillingsdata2[\"Victim's race\"].value_counts()\n\nplt.figure(figsize = (16, 10))\nsns.barplot(x = a.index, y = a.values)\nplt.ylabel('Total Deaths')\nplt.xlabel('Race of Victim')\nplt.title('Deaths from Police Physical Force by Race from 2013 - 2020')","77e95876":"physicalforce = ['Physical Restraint', 'Beaten', 'Asphyxiated',\n                 'Pepper Spray', 'Taser, Baton', 'Taser, Physical Restraint', \n                 'Baton, Pepper Spray, Physical Restraint', 'Taser, Pepper Spray, Beaten',\n                 'Taser, Beaten', 'Beaten\/Bludgeoned with instrument',\n                 'Taser', 'Tasered', ]\n\nphysicalforcedeaths = pd.DataFrame()\nfor cause in physicalforce:\n    a = policekillingsdata2[policekillingsdata2['Cause of death'] == cause]\n    physicalforcedeaths = physicalforcedeaths.append(a, ignore_index = True)\nphysicalforcedeathsbystate = pd.Series(physicalforcedeaths['State'])\nphysicalforcedeathscountbystate = physicalforcedeathsbystate.value_counts()\n\nplt.figure(figsize=(16,10))\nsns.barplot(x = physicalforcedeathscountbystate.index, y = physicalforcedeathscountbystate.values)\nplt.ylabel('Deaths from Police Physical Force (Jan 2013 - Dec 2019)')\nplt.xlabel('States')\nplt.title('Deaths from Police Physical Force by State from 2013 - 2020')","4d5596be":"b = []\nfor state in states:\n    if state in list(physicalforcedeaths['State']):\n        x = statepop[statepop['Code'] == state]\n        y = physicalforcedeathscountbystate[physicalforcedeathscountbystate.index == state]\n        killsperhthousand2 = (((float(y.values)\/float(x.Population)) \/ 5) * 1000000)\n        b.append(killsperhthousand2)\n    else:\n        b.append(0)\nphysicalforcedeathsPM = pd.DataFrame({'States': states,'killsPM':b})\nPFkillsPM = physicalforcedeathsPM.sort_values(by = ['killsPM'], ascending = False)\n\n\n\nplt.figure(figsize=(16,10))\nsns.barplot(x = PFkillsPM.States, y = PFkillsPM.killsPM)\nplt.ylabel('Deaths from Police Physical Force per 1M Residence')\nplt.title('Relative Police Killings from Physical Force by State')","0563c348":"armedlist = policekillingsdata['armed'].unique()\nunarmeddeathsbystate = pd.DataFrame(columns = ('States', 'Unarmed Deaths'))\n\nfor state in states:\n    unarmeddeaths = policekillingsdata[policekillingsdata['armed'] == 'unarmed'][policekillingsdata['state'] == state]\n    unarmeddeathsbystate = unarmeddeathsbystate.append({'States' : state, 'Unarmed Deaths' : len(unarmeddeaths)}, ignore_index = True)\n    \nunarmeddeathsbystate.sort_values(by = 'Unarmed Deaths', inplace = True, ascending = False)\nplt.figure(figsize = (16, 10))\nsns.barplot(x = unarmeddeathsbystate['States'], y = unarmeddeathsbystate['Unarmed Deaths'])\nplt.title('Total Police Killings of Unarmed Victims by State')","e049f1fa":"b = []\nfor state in states:\n    x = statepop[statepop['Code'] == state]\n    y = unarmeddeathsbystate[unarmeddeathsbystate['States'] == state]\n    unarmeddeathspermil = (((float(y['Unarmed Deaths'])\/float(x.Population)) \/ 5) * 1000000)\n    b.append(unarmeddeathspermil)\nunarmeddeathspermilframe = pd.DataFrame({'States': states,'Unarmed Deaths per 1M Residence':b})\nsortedunarmeddeathspermil = unarmeddeathspermilframe.sort_values(by = ['Unarmed Deaths per 1M Residence'], ascending = False)\n\nplt.figure(figsize=(16,10))\nsns.barplot(x = sortedunarmeddeathspermil.States, y = sortedunarmeddeathspermil['Unarmed Deaths per 1M Residence'])\nplt.ylabel('Deaths of Unarmed Victims from Police Shootings per year per 1M Residence')\nplt.title('Police Shootings of Unarmed Victims per year per 1M Residence')\n","4895d857":"cities = policepolicydata['City'].unique()\nstates2 = policepolicydata['State']\npolicekillingspercityframe = pd.DataFrame(columns = ('City', 'Number of Deaths'))\n\nx = 0\nfor city in cities:\n    citykillings = policekillingsdata2[policekillingsdata2['City'] == city][policekillingsdata2['State'] == states2[x]]\n    x += 1\n    policekillingspercityframe = policekillingspercityframe.append({'City' : city, 'Number of Deaths' : len(citykillings)}, ignore_index = True)\n\npolicekillingspercityframe = policekillingspercityframe[policekillingspercityframe['City'] != '0']\n\npolicekillingspercityframe.sort_values(by = 'Number of Deaths', inplace = True, ascending = False)\nplt.figure(figsize = (16, 10))\nsns.barplot(x = policekillingspercityframe['City'], y = policekillingspercityframe['Number of Deaths'])\nplt.xticks(rotation=90)\nplt.ylabel('Total Police Killings')\nplt.title('Total Police Killings by city (2013 - 2020)')","abb704c3":"b = []\nfor city in np.delete(cities, [0]):\n    x = citypop[citypop['City'] == city][citypop['State code'] == policepolicydata[policepolicydata['City'] == city]['State'].item()]\n    y = policekillingspercityframe[policekillingspercityframe['City'] == city]\n    citydeathsperyearper1m = ((y['Number of Deaths'].item()\/float(x.Population)) \/ 5) * 1000000\n    b.append(citydeathsperyearper1m)\ncitydeathsyear1m = pd.DataFrame({'City': np.delete(cities, [0]),'Deaths per year per 1M Residence' : b})\nsortedcitydeathsyear1m = citydeathsyear1m.sort_values(by = ['Deaths per year per 1M Residence'], ascending = False)\n\nplt.figure(figsize = (16, 10))\nsns.barplot(x = sortedcitydeathsyear1m['City'], y = sortedcitydeathsyear1m['Deaths per year per 1M Residence'])\nplt.xticks(rotation = 90)\nplt.ylabel('Average Annual Police Killings per 1M Residence ')\nplt.title('Relative Police Killings by city (2013 - 2020)')","d2dda1bf":"policekillingspercityframe2 = pd.DataFrame()\nx = 0\nfor city in cities:\n    citykillings2 = policekillingsdata2[policekillingsdata2['City'] == city][policekillingsdata2['State'] == states2[x]]\n    x += 1\n    policekillingspercityframe2 = policekillingspercityframe2.append({'City' : city, 'Number of Deaths' : len(citykillings2)}, ignore_index = True)\n\nb = []\nfor city in np.delete(cities, [0]):\n    x = citypop[citypop['City'] == city][citypop['State code'] == policepolicydata[policepolicydata['City'] == city]['State'].item()]\n    y = policekillingspercityframe2[policekillingspercityframe2['City'] == city]\n    citydeathsperyearper1m2 = ((y['Number of Deaths'].item()\/float(x.Population)) \/ 7) * 1000000\n    b.append(citydeathsperyearper1m2)\ncitydeathsyear1m = pd.DataFrame({'City' : np.delete(cities, [0]), 'Relative Annual Police Killings' : b})\n\ncolumns = ['City', 'Violent crimes 2013 (if reported by agency)', 'Violent crimes 2014 (if reported by agency)', 'Violent crimes 2015 (if reported by agency)',\n          'Violent crimes 2016 (if reported by agency)', 'Violent crimes 2017 (if reported by agency)', 'Violent crimes 2018 (if reported by agency)']\ncityviolent = violentcrimesdata[columns].mean(axis = 1)\ncolumns = ['City', '2013 Total Arrests (UCR Data)', '2014 Total Arrests', '2015 Total Arrests', '2016 Total Arrests', '2017 Total Arrests', '2018 Total Arrests']\ncityarrests = violentcrimesdata[columns].mean(axis = 1)\ncrimecities = list(violentcrimesdata['City'])\narrestsandviolentcrimes = pd.DataFrame({'City' : crimecities, 'Average Violent Crimes': cityviolent , 'Average Arrests' : cityarrests})\narrestsandviolentcrimes.replace(['Kansas City Missouri'], 'Kansas City', inplace = True)\n\nb = []\nc = []\nfor city in np.delete(cities, [0]):\n    x = citypop[citypop['City'] == city][citypop['State code'] == policepolicydata[policepolicydata['City'] == city]['State'].item()]\n    b.append((arrestsandviolentcrimes[arrestsandviolentcrimes['City'] == city]['Average Violent Crimes'].item() \/ float(x.Population)) * 100000)\n    c.append((arrestsandviolentcrimes[arrestsandviolentcrimes['City'] == city]['Average Arrests'].item() \/ float(x.Population)) * 100000)\n\ncitydeathsyear1m['Pop adjusted violent crimes'] = b\ncitydeathsyear1m['Pop adjusted arrests'] = c\ncitydeathsyear1m = citydeathsyear1m.sort_values(by = 'Relative Annual Police Killings', ascending = False)","1fccbdef":"fig = plt.figure(figsize = (16, 10))\nax =  fig.subplots()\nax.plot(citydeathsyear1m['City'], citydeathsyear1m['Relative Annual Police Killings'], 'o')\nplt.xticks(rotation = 90)\nax.set_xlabel('City', fontsize = '10')\nax.set_ylabel('Average annual Police killings per 1M residence', color = 'blue', fontsize = '10')\n\nax2 = ax.twinx()\nax2.plot(citydeathsyear1m['City'], citydeathsyear1m['Pop adjusted violent crimes'], 'o', color = 'red')\nax2.set_ylabel('Average annual Violent Crimes committed per 100,000 residence', color = 'red', fontsize = '10')","b2b7e141":"fig = plt.figure(figsize = (16, 10))\nax =  fig.subplots()\nax.plot(citydeathsyear1m['City'], citydeathsyear1m['Relative Annual Police Killings'], 'o')\nplt.xticks(rotation = 90)\nax.set_xlabel('City', fontsize = '10')\nax.set_ylabel('Average annual Police killings per 1M residence', color = 'blue', fontsize = '10')\n\nax2 = ax.twinx()\nax2.plot(citydeathsyear1m['City'], citydeathsyear1m['Pop adjusted arrests'], 'o', color = 'red')\nax2.set_ylabel('Average annual Arrests committed per 100,000 residence', color = 'red', fontsize = '10')","e2a0443d":"years = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\nyearcitydeathsdict = {}\n\nfor city in cities:\n    b = []\n    if city in policekillingsdata2.City.unique():\n        for year in years:\n            a = len(policekillingsdata2[policekillingsdata2.City == city][policekillingsdata2['year'] == year])\n            b.append(a)\n    yearcitydeathsdict[city] = b\n\nyearcitydeaths = pd.DataFrame.from_dict(yearcitydeathsdict, orient='index', columns=['2013 Deaths', '2014 Deaths',\n                                                                                     '2015 Deaths', '2016 Deaths',\n                                                                                     '2017 Deaths', '2018 Deaths',\n                                                                                     '2019 Deaths'])\nyearcitydeaths.dropna(inplace = True)\nyearcitydeaths.reset_index(level = 0, inplace = True)\nyearcitydeaths.rename(columns = {'index' : 'City'}, inplace = True)\n\ndeathscrimescity = pd.merge(violentcrimesdata, yearcitydeaths, on = 'City', how = 'inner')\ncolumns = ['2013 Deaths', '2014 Deaths','2015 Deaths', '2016 Deaths','2017 Deaths', '2018 Deaths', '2013 Total Arrests (UCR Data)',\n           '2014 Total Arrests','2015 Total Arrests','2016 Total Arrests','2017 Total Arrests','2018 Total Arrests', 'Violent crimes 2013 (if reported by agency)',\n          'Violent crimes 2014 (if reported by agency)', 'Violent crimes 2015 (if reported by agency)', 'Violent crimes 2016 (if reported by agency)', \n          'Violent crimes 2017 (if reported by agency)', 'Violent crimes 2018 (if reported by agency)',]\ndeathscrimescity = deathscrimescity[columns].astype(float)\ndeathscrimescity = deathscrimescity.transpose()\ndeathscrimescity.convert_dtypes(convert_integer = True)\nmeans = deathscrimescity.mean(axis = 1)\n\ndeathscrimescity = pd.DataFrame({'Deaths' : [means['2013 Deaths'], means['2014 Deaths'], means['2015 Deaths'], means['2016 Deaths'], means['2017 Deaths'], means['2018 Deaths']],\n                                'Arrests' : [means['2013 Total Arrests (UCR Data)'], means['2014 Total Arrests'], means['2015 Total Arrests'], means['2016 Total Arrests'],\n                                                  means['2017 Total Arrests'], means['2018 Total Arrests']],\n                                'Violent Crimes' : [means['Violent crimes 2013 (if reported by agency)'], means['Violent crimes 2014 (if reported by agency)'],\n                                                   means['Violent crimes 2015 (if reported by agency)'], means['Violent crimes 2016 (if reported by agency)'],\n                                                   means['Violent crimes 2017 (if reported by agency)'], means['Violent crimes 2018 (if reported by agency)']]}) \ndeathscrimescity.rename({0 : 2013, 1 : 2014, 2 : 2015, 3 : 2016, 4: 2017, 5 : 2018}, axis = 'index', inplace = True)\n\ndeathscrimescity.index","a7dad299":"fig,ax = plt.subplots()\nax.plot(deathscrimescity.index, deathscrimescity.Deaths, color = \"red\", marker = \"o\")\nax.set_xlabel(\"Year\", fontsize = 14)\nax.set_ylabel(\"Mean Police Killings over 100 Cities\", color = \"red\", fontsize = 14)\nax.set_title('Average Killings and Average Arrests over Time for 100 Cities')\n\nax2 = ax.twinx()\nax2.plot(deathscrimescity.index, deathscrimescity.Arrests, color = \"#1461cc\",marker = \"o\")\nax2.set_ylabel(\"Mean Arrests over 100 Cities\", color = \"#1461cc\", fontsize = 14)\nplt.show()","524f31a5":"fig, ax = plt.subplots()\nax.plot(deathscrimescity.index, deathscrimescity.Deaths, color = \"red\", marker = \"o\")\nax.set_xlabel(\"Year\", fontsize = 14)\nax.set_ylabel(\"Mean Police Killings over 100 Cities\", color = \"red\", fontsize = 14)\nax.set_title('Average Killings and Average Violent Crimes over Time for 100 Cities')\n\nax2 = ax.twinx()\nax2.plot(deathscrimescity.index, deathscrimescity['Violent Crimes'], color = \"#1461cc\", marker = \"o\")\nax2.set_ylabel(\"Mean Violent Crimes over 100 Cities\", color = \"#1461cc\", fontsize = 14)\nplt.show()","a3448c3b":"meanracedata = pd.DataFrame(columns = ['States', 'meanwhite', 'meanblack', 'meanhispanic', 'meanasian', 'meannativeamerican'])\nfor state in states:\n    staterace = racedata[racedata['Geographic area'] == state]\n    meanwhitef = staterace.share_white.astype(float).sum() \/ len(staterace)\n    meanblackf = staterace.share_black.astype(float).sum() \/ len(staterace)\n    meanhispanicf = staterace.share_hispanic.astype(float).sum() \/ len(staterace)\n    meanasianf = staterace.share_asian.astype(float).sum() \/ len(staterace)\n    meannativeamericanf = staterace.share_native_american.astype(float).sum() \/ len(staterace)\n    \n    meanwhite = (meanwhitef \/ (meanwhitef + meanblackf + meanhispanicf + meanasianf + meannativeamericanf)) * 100\n    meanblack = (meanblackf \/ (meanwhitef + meanblackf + meanhispanicf + meanasianf + meannativeamericanf)) * 100\n    meanhispanic = (meanhispanicf \/ (meanwhitef + meanblackf + meanhispanicf + meanasianf + meannativeamericanf)) * 100\n    meanasian = (meanasianf \/ (meanwhitef + meanblackf + meanhispanicf + meanasianf + meannativeamericanf)) * 100\n    meannativeamerican = (meannativeamericanf \/ (meanwhitef + meanblackf + meanhispanicf + meanasianf + meannativeamericanf)) * 100\n    \n    meanracedata = meanracedata.append({'States' : state,'meanwhite' : meanwhite, 'meanblack' : meanblack, 'meanhispanic' : meanhispanic, 'meanasian' : meanasian,\n                                        'meannativeamerican' : meannativeamerican}, ignore_index = True)\nmeanracedata.sort_values(by = 'States', inplace = True)\n","c2858dea":"stateracedata = pd.DataFrame(columns = ['State', 'White', 'Two Or More Races', 'Native Hawaiian\/Other Pacific Islander', 'Black', 'Hispanic', 'Asian', 'American Indian\/Alaska Native'])\nfor state in states:\n    tempracedata = racedata2[racedata2['State code'] == state]\n    white = (stateracedata['White'] \/ (stateracedata['Two Or More Races'] + stateracedata['Native Hawaiian\/Other Pacific Islander'] + stateracedata.White +\n                                                   stateracedata.Black + stateracedata.Hispanic + stateracedata.Asian + stateracedata['American Indian\/Alaska Native'])) * 100\n    mixed = (stateracedata['Two Or More Races'] \/ (stateracedata['Two Or More Races'] + stateracedata['Native Hawaiian\/Other Pacific Islander'] + stateracedata.White +\n                                                   stateracedata.Black + stateracedata.Hispanic + stateracedata.Asian + stateracedata['American Indian\/Alaska Native'])) * 100\n    pi = (stateracedata['Native Hawaiian\/Other Pacific Islander'] \/ (stateracedata['Two Or More Races'] + stateracedata['Native Hawaiian\/Other Pacific Islander'] + stateracedata.White +\n                                                   stateracedata.Black + stateracedata.Hispanic + stateracedata.Asian + stateracedata['American Indian\/Alaska Native'])) * 100\n    black = (stateracedata['Black'] \/ (stateracedata['Two Or More Races'] + stateracedata['Native Hawaiian\/Other Pacific Islander'] + stateracedata.White +\n                                                   stateracedata.Black + stateracedata.Hispanic + stateracedata.Asian + stateracedata['American Indian\/Alaska Native'])) * 100\n    hispanic = (stateracedata['Hispanic'] \/ (stateracedata['Two Or More Races'] + stateracedata['Native Hawaiian\/Other Pacific Islander'] + stateracedata.White +\n                                                   stateracedata.Black + stateracedata.Hispanic + stateracedata.Asian + stateracedata['American Indian\/Alaska Native'])) * 100\n    asian = (stateracedata['Asian'] \/ (stateracedata['Two Or More Races'] + stateracedata['Native Hawaiian\/Other Pacific Islander'] + stateracedata.White +\n                                                   stateracedata.Black + stateracedata.Hispanic + stateracedata.Asian + stateracedata['American Indian\/Alaska Native'])) * 100\n    na = (stateracedata['American Indian\/Alaska Native'] \/ (stateracedata['Two Or More Races'] + stateracedata['Native Hawaiian\/Other Pacific Islander'] + stateracedata.White +\n                                                   stateracedata.Black + stateracedata.Hispanic + stateracedata.Asian + stateracedata['American Indian\/Alaska Native'])) * 100\n    stateracedata = stateracedata.append({'State' : state, 'White' : white, 'Two Or More Races' : mixed, 'Native Hawaiian\/Other Pacific Islander' : pi, 'Black' : black, 'Hispanic' : hispanic,\n                                          'Asian' : asian, 'American Indian\/Alaska Native' : na}, ignore_index = True)","582aea29":"barWidth = 0.85\nnames = racedata2['State code']\ncolumns = ['White', 'Black', 'Hispanic', 'Asian', 'American Indian\/Alaska Native', 'Native Hawaiian\/Other Pacific Islander', 'Two Or More Races']\nracedata2[columns] = racedata2[columns].astype(float)\n\nplt.figure(figsize = (16, 10))\nplt.bar(names, stateracedata.White, color = '#b5ffb9', edgecolor='white', width = barWidth)\nplt.bar(names, stateracedata.Black, bottom = stateracedata.White, color='#f9bc86', edgecolor='white', width = barWidth)\nplt.bar(names, stateracedata.Hispanic, bottom = stateracedata.White + stateracedata.Black, color='#a3acff', edgecolor='white', width=barWidth)\nplt.bar(names, stateracedata.Asian, bottom = stateracedata.White + stateracedata.Black + stateracedata.Hispanic, color='#eda3ff', edgecolor='white', width=barWidth)\nplt.bar(names, stateracedata['American Indian\/Alaska Native'], bottom = stateracedata.White + stateracedata.Black + stateracedata.Hispanic + stateracedata.Asian, color='#eb4b4b', edgecolor='white', width=barWidth)\nplt.bar(names, stateracedata['Native Hawaiian\/Other Pacific Islander'], bottom = stateracedata.White + stateracedata.Black + stateracedata.Hispanic + stateracedata.Asian + stateracedata['American Indian\/Alaska Native'], color='#ffb03b', edgecolor='white', width=barWidth)\nplt.bar(names, stateracedata['Two Or More Races'], bottom = stateracedata['Native Hawaiian\/Other Pacific Islander'] + stateracedata.White + stateracedata.Black + stateracedata.Hispanic + stateracedata.Asian + stateracedata['American Indian\/Alaska Native'], color='#db51e8', edgecolor='white', width=barWidth)\nraces = ['White', 'African American', 'Hispanic', 'Asian', 'Native American', 'Pacific Islander', 'Mixed Race']\nplt.legend(races)\n\nplt.ylabel(\"% of Population by Race\")\nplt.xticks(names)\nplt.xlabel(\"States\")","6f0fac39":"races = list(policekillingsdata2[\"Victim's race\"].unique())\ntotalracedeaths = []\n\nfor race in races:\n    racedeaths = policekillingsdata2[policekillingsdata2[\"Victim's race\"] == race]\n    totalracedeaths.append(len(racedeaths))\n\nplt.figure(figsize = (10, 5))    \nsns.barplot(x = races, y = totalracedeaths)\nplt.xlabel('Race')\nplt.ylabel('Total Deaths')\nplt.title('Total Police Killings by Race (2013 - 2020)')\n","f799bbb0":"racedeathsPM = pd.merge(meanracedata, statekillsPM, on = 'States', how = 'inner')\npoc = pd.DataFrame({'States' : racedeathsPM['States'], 'meanPOC':(100 - racedeathsPM['meanwhite'])})\nracedeathsPM = pd.merge(racedeathsPM, poc, on = 'States', how = 'inner')\n\n\nsns.lmplot(x = 'meanPOC', y = 'shootingsPM', data = racedeathsPM, size = 7)\nplt.xlabel(\"% of Population that are People of Colour\")\nplt.ylabel('Deaths from Police Shootings per year per 1M Residence')\nplt.title('')\n\ndef label_point(x, y, val, ax):\n    a = pd.concat({'x': x, 'y': y, 'val': val}, axis=1)\n    for i, point in a.iterrows():\n        ax.text(point['x'], point['y'], str(point['val']))\n\nlabel_point(racedeathsPM['meanPOC'] + .4, racedeathsPM['shootingsPM'] - .02, racedeathsPM.States, plt.gca())","63a1124d":"\nframe3 = pd.merge(racedeathsPM, statepovertyandkills.drop(columns = ['shootingsPM']), on = 'States', how = 'inner')\n\nsns.lmplot(x = 'meanPOC', y = 'Average poverty rate', data = frame3, height = 7)\nplt.xlabel(\"% of Population that are People of Colour\")\nplt.ylabel('Average % People Below Poverty Line')\nplt.title('')\n\ndef label_point(x, y, val, ax):\n    a = pd.concat({'x': x, 'y': y, 'val': val}, axis=1)\n    for i, point in a.iterrows():\n        ax.text(point['x'], point['y'], str(point['val']))\n\nlabel_point(frame3['meanPOC'] + .4, frame3['Average poverty rate'] - .1, frame3.States, plt.gca())","838bbe44":"racedeathsbystate = pd.DataFrame(columns = ['States', 'White Deaths', 'Black Deaths', 'Hispanic Deaths', 'Asian Deaths', 'Native American Deaths', 'Deaths of Other Races', 'Pacific Islander Deaths'])\nfor state in states:\n    stateracedeaths = pd.Series()\n    statedeaths = policekillingsdata2[policekillingsdata2['State'] == state]\n    for race in races:\n        stateracedeaths[race] = len(statedeaths[statedeaths[\"Victim's race\"] == race])\n    racedeathsbystate = racedeathsbystate.append({'States' : state, 'White Deaths' : stateracedeaths['White'], 'Black Deaths' : stateracedeaths['Black'], 'Hispanic Deaths' : stateracedeaths['Hispanic'],\n                                                  'Asian Deaths' : stateracedeaths['Asian'], 'Native American Deaths' : stateracedeaths['Native American'],\n                                                  'Pacific Islander Deaths' : stateracedeaths['Pacific Islander'],\n                                                  'Deaths of Other Races' : stateracedeaths['Unknown Race'], 'Total Deaths' : len(statedeaths)}, ignore_index = True)\ndeathproportionpoc = pd.DataFrame(columns = ['States', 'DeathProportionPOC'])\nfor state in states:\n    deathproportionpoc = deathproportionpoc.append({'States' : state, 'DeathProportionPOC' : (100 - ((float(racedeathsbystate[racedeathsbystate['States'] == state]['White Deaths'].item()) \/ float(killsbystatecount2[state]) * 100)))}, ignore_index = True)\n\nframe4 = pd.merge(deathproportionpoc, racedeathsbystate, on = 'States')\nframe4 = pd.merge(frame3, frame4, on = 'States')\nframe4.sort_values(by = 'Total Deaths', inplace = True, ascending = False)","0924c021":"barWidth = 0.4\nbars1 = frame4['DeathProportionPOC'].mean()\nbars2 = frame4['meanPOC'].mean()\n \nr1 = 1\nr2 = 1.6\n \nplt.figure(figsize=(18, 10))\nplt.bar(r1, bars1, color='#7f6d5f', width=barWidth, edgecolor='white', label='% of Deaths were Victim was a POC ')\nplt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='white', label='% of POC in the Population')\n\nplt.tick_params(axis='x', which='both', bottom = False, top = False, labelbottom = False)\n#plt.xlabel('States', fontweight='bold')\nplt.legend(fontsize = 'x-large')","7aa794d9":"barWidth = 0.4\nbars1 = frame4['DeathProportionPOC']\nbars2 = frame4['meanPOC']\n \nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1]\n \nplt.figure(figsize=(18, 10))\nplt.bar(r1, bars1, color='#7f6d5f', width=barWidth, edgecolor='white', label='% of Deaths were Victim was a POC ')\nplt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='white', label='% of POC in the Population')\n\nplt.xlabel('States', fontweight='bold')\nplt.xticks([r + barWidth for r in range(len(bars1))], frame4['States'])\nplt.legend()","f82559ba":"racelist = list(physicalforcedeaths[\"Victim's race\"].unique())\na = physicalforcedeaths[\"Victim's race\"].value_counts()\n\nplt.figure(figsize = (16, 10))\nsns.barplot(x = a.index, y = a.values)\nplt.ylabel('Total Deaths')\nplt.xlabel('Race of Victim')\nplt.title('Deaths from Police Physical Force by Race from 2014 - 2020')","ee29566d":"a, b, c = [], [], []\n\nfor index, row in politicsdata.iterrows():\n    if row['City'] in list(citydeathsyear1m['City']):\n        a.append(row['City'])\n        b.append(citydeathsyear1m[citydeathsyear1m['City'] == row['City']]['Relative Annual Police Killings'].item())\n        c.append(row['Republican Vote Share'])\npoliticsdeaths = pd.DataFrame({'City' : a, 'Deaths per year per 1M Residence' : b, 'Republican Vote Share' : c})\n\nsns.lmplot(x = 'Republican Vote Share', y = 'Deaths per year per 1M Residence', data = politicsdeaths)","146fe33c":"citypolicydeaths = pd.merge(citydeathsyear1m, policepolicydata, on = 'City', how = 'inner')\n\ngraph1 = pd.merge(citypolicydeaths['Requires De-Escalation'].astype(float), citypolicydeaths['Relative Annual Police Killings'].astype(float), left_index = True, right_index = True)\nsns.lmplot(x = 'Relative Annual Police Killings',\n           y = 'Requires De-Escalation',\n           data = graph1, y_jitter=.01, logistic=True, truncate=False)\n","1427b609":"graph2 = pd.merge(citypolicydeaths['Has Use of Force Continuum'].astype(float), citypolicydeaths['Relative Annual Police Killings'].astype(float), left_index = True, right_index = True)\nsns.lmplot(x = 'Deaths per year per 1M Residence',\n           y = 'Has Use of Force Continuum',\n           data = graph2, y_jitter=.01, logistic=True, truncate=False)","db6ecc22":"graph3 = pd.merge(citypolicydeaths['Bans Chokeholds and Strangleholds'].astype(float), citypolicydeaths['Relative Annual Police Killings'].astype(float), left_index = True, right_index = True)\nsns.lmplot(x = 'Deaths per year per 1M Residence',\n           y = 'Bans Chokeholds and Strangleholds',\n           data = graph3, y_jitter=.01, logistic=True, truncate=False)","48d67c56":"graph4 = pd.merge(citypolicydeaths['Requires Warning Before Shooting'].astype(float), citypolicydeaths['Relative Annual Police Killings'].astype(float), left_index = True, right_index = True)\nsns.lmplot(x = 'Deaths per year per 1M Residence',\n           y = 'Requires Warning Before Shooting',\n           data = graph4)","2d550fa0":"graph5 = pd.merge(citypolicydeaths['Restricts Shooting at Moving Vehicles'].astype(float), citypolicydeaths['Relative Annual Police Killings'].astype(float), left_index = True, right_index = True)\nsns.lmplot(x = 'Deaths per year per 1M Residence',\n           y = 'Restricts Shooting at Moving Vehicles',\n           data = graph5, y_jitter=.01, logistic=True, truncate=False)","abb9995b":"graph6 = pd.merge(citypolicydeaths['Requires Exhaust All Other Means Before Shooting'].astype(float), citypolicydeaths['Deaths per year per 1M Residence'].astype(float), left_index = True, right_index = True)\nsns.lmplot(x = 'Deaths per year per 1M Residence',\n           y = 'Requires Exhaust All Other Means Before Shooting',\n           data = graph6, y_jitter=.01, logistic=True, truncate=False)","b8a6fb6d":"graph7 = pd.merge(citypolicydeaths['Duty to Intervene'].astype(float), citypolicydeaths['Relative Annual Police Killings'].astype(float), left_index = True, right_index = True)\nsns.lmplot(x = 'Deaths per year per 1M Residence',\n           y = 'Duty to Intervene',\n           data = graph7, y_jitter=.01, logistic=True, truncate=False)","3d676e45":"graph8 = pd.merge(citypolicydeaths['Requires Comprehensive Reporting'].astype(float), citypolicydeaths['Relative Annual Police Killings'].astype(float), left_index = True, right_index = True)\nsns.lmplot(x = 'Deaths per year per 1M Residence',\n           y = 'Requires Comprehensive Reporting',\n           data = graph8, y_jitter=.01, logistic=True, truncate=False)","94d605e2":"graph9 = pd.merge(citypolicydeaths['Bans Chokeholds and Strangleholds'].astype(float), citypolicydeaths['Relative Annual Police Killings'].astype(float), left_index = True, right_index = True)\nsns.lmplot(x = 'Deaths per year per 1M Residence',\n           y = 'Bans Chokeholds and Strangleholds',\n           data = graph9, y_jitter=.1, logistic=True, truncate=False)\n","190e8c26":"list(citypolicydeaths['City'].unique())\nbanningchokeholds = pd.DataFrame(columns = ('City', 'Deaths by physical force'))\nnodata = []\nfor city in list(citypolicydeaths['City'].unique()):\n    if city in policekillingsdata2['City'].unique():\n        b = 0\n        for cause in physicalforce:\n            a = policekillingsdata2[policekillingsdata2['Cause of death'] == cause][policekillingsdata2['City'] == city][policekillingsdata2['State'] == policepolicydata[policepolicydata['City'] == city]['State'].item()]\n            b = b + len(a)\n\n        banningchokeholds = banningchokeholds.append({'City' : city, 'Deaths by physical force' : b}, ignore_index = True)\nbanningchokeholds = pd.merge(banningchokeholds, policepolicydata, on = 'City', how = 'inner')\nbanningchokeholds['Deaths by physical force'] = banningchokeholds['Deaths by physical force'].astype(float)\nbanningchokeholds['Bans Chokeholds and Strangleholds'] = banningchokeholds['Bans Chokeholds and Strangleholds'].astype(float)\nbanningchokeholds['Has Use of Force Continuum'] = banningchokeholds['Has Use of Force Continuum'].astype(float)\n\nsns.lmplot(x = 'Deaths by physical force',\n           y = 'Bans Chokeholds and Strangleholds',\n           data = banningchokeholds, y_jitter=.1, logistic=True, truncate=False)\n","4884bb92":"sns.lmplot(x = 'Deaths by physical force',\n           y = 'Has Use of Force Continuum',\n           data = banningchokeholds, y_jitter=.1, logistic=True, truncate=False)","027c20e0":"racedata[racedata['City'] == 'Detroit']\npolicepolicydata[policepolicydata['City'] == 'Milwaukee']\nb = []\nfor city in np.delete(cities, [0]):\n    if city in list(racedata.City):\n        b.append(100 - float(racedata[racedata['City'] == city][racedata['Geographic area'] == policepolicydata[policepolicydata['City'] == city]['State'].item()]['share_white'].item()))\n\nBMEcity = pd.DataFrame({'City' : np.delete(cities, [0]), '%BME' : b})\nBMEcitydeaths = pd.merge(BMEcity, citydeathsyear1m, on = 'City', how = 'inner')\n\nplt.figure(figsize = (16, 10))\nsns.lmplot(x = 'Deaths per year per 1M Residence',\n           y = '%BME',\n           data = BMEcitydeaths,\n          size = 7)\n\nlabel_point(BMEcitydeaths['Deaths per year per 1M Residence'] + .4, BMEcitydeaths['%BME'] - .1, BMEcitydeaths.City, plt.gca())","574e1a93":"geolist = list(policekillingsdata2['Human Geography'].unique())\nracegeodeaths = pd.DataFrame(columns = ['Human Geography'])\nfor geography in geolist:\n    b = policekillingsdata2[policekillingsdata2['Human Geography'] == geography][\"Victim's race\"].value_counts()\n    racegeodeaths = racegeodeaths.append(b, ignore_index = True)\nracegeodeaths['Human Geography'] = geolist\n\nracegeoplot = pd.melt(racegeodeaths, id_vars = 'Human Geography', var_name = 'Race', value_name = 'Deaths')\n\nsns.catplot(x = 'Human Geography', y = 'Deaths', hue = 'Race', data = racegeoplot, kind = 'bar', size = 7)","03c00335":"budgetdata['police_city']\nplt.figure(figsize = (18,12))\nsns.lineplot(x = 'year', y = 'police_city', data = budgetdata)\nplt.ylabel('Police Budget')","471bbafc":"alljuvenilecrimearrests = juvenilearrestsdata[juvenilearrestsdata['Offense'] == 'All crimes'][juvenilearrestsdata['Category'] == 'Juvenile Arrest Rates (Arrest of Persons Age 10-17\/100,000 Persons Ages 10-17)']\nalljuvenilecrimearrests = alljuvenilecrimearrests.transpose().iloc[2:]\nalljuvenilecrimearrests.reset_index(level = 0, inplace = True)\nalljuvenilecrimearrests.columns = ['year', 'Juvenile arrest rate']\nalljuvenilecrimearrests.year = alljuvenilecrimearrests.year.astype(float)\nalljuvenilecrimearrests['Juvenile arrest rate'] = alljuvenilecrimearrests['Juvenile arrest rate'].astype(float)\n\nbudgetyears = list(budgetdata['year'].unique())\nb = []\nfor year in budgetyears:\n    b.append(budgetdata[budgetdata['year'] == year]['police_city'].mean())\n\nbudgetyearsdata = pd.DataFrame({'year' : budgetyears, 'mean budget' : b})\n\nfig = plt.figure(figsize = (16, 10))\nax = fig.subplots()\nax.plot(alljuvenilecrimearrests['year'], alljuvenilecrimearrests['Juvenile arrest rate'])\nax.set_xlabel('Year', fontsize = '10')\nax.set_ylabel('Juvenile Arrest Rate per 100,000 Juveniles', color = 'blue')\n\nax2 = ax.twinx()\nax2.plot(budgetyearsdata['year'], budgetyearsdata['mean budget'], color = 'red')\nax2.set_ylabel('Police Budget', color = 'red')","2dac37a0":"budgetdatacitylist = list(budgetdata['City'].unique())\ncomparebudgetdata = pd.DataFrame()\nselectcitydeathsyear1m = pd.DataFrame()\nfor city in np.delete(cities, [0]):\n    if city in budgetdatacitylist:\n        comparebudgetdata = comparebudgetdata.append(budgetdata[budgetdata['City'] == city], ignore_index = True)\n        selectcitydeathsyear1m = selectcitydeathsyear1m.append(citydeathsyear1m[citydeathsyear1m['City'] == city], ignore_index = True)\n\nbudgetdata2017 = pd.merge(comparebudgetdata[comparebudgetdata['year'] == 2017], selectcitydeathsyear1m, on = 'City', how = 'inner')\n\nsns.lmplot(x = 'police_city', y = 'Deaths per year per 1M Residence', data = budgetdata2017)","1163301a":"chicagocrimebudget = pd.merge(comparebudgetdata[comparebudgetdata['City'] == 'Chicago'][comparebudgetdata['year'] > 2000],\n                              crimesperyearchicago[crimesperyearchicago['year'] < 2018],\n                              on = 'year',\n                              how = 'inner',)\n\n# create figure and axis objects with subplots()\nfig,ax = plt.subplots()\n# make a plot\nax.plot(chicagocrimebudget.year, chicagocrimebudget.police_city, color=\"red\", marker=\"o\")\n# set x-axis label\nax.set_xlabel(\"Year\",fontsize=14)\n# set y-axis label\nax.set_ylabel(\"Police Budget\",color=\"red\",fontsize=14)\n\n\n# twin object for two different y-axis on the sample plot\nax2 = ax.twinx()\n# make a plot with different y-axis using second axis object\nax2.plot(chicagocrimebudget.year, chicagocrimebudget[\"reported crimes\"],color=\"blue\",marker=\"o\")\nax2.set_ylabel(\"Reported Crimes\",color=\"blue\",fontsize=14)\nplt.show()","2c06a746":"yearlist = list(chicagocrimes.Year.unique())\na = []\nfor year in yearlist:\n    a.append(len(chicagocrimes[chicagocrimes['Year'] == year]))\ncrimesperyearchicago = pd.DataFrame({'year' : yearlist, \n                                     'reported crimes' : a\n                                    })","2e378b28":"plt.figure(figsize = (16, 10))\nsns.barplot(x = 'year', y = 'reported crimes', data = crimesperyearchicago)","f93c87cf":"a = []\nfor year in yearlist:\n    a.append(len(chicagocrimes[chicagocrimes['Year'] == year][chicagocrimes['Arrest'] == True]))\narrestsperyearchicago = pd.DataFrame({'year' : yearlist, \n                                     'arrests' : a\n                                    })\nplt.figure(figsize = (16, 10))\nsns.barplot(x = 'year', y = 'arrests', data = arrestsperyearchicago)","823ff520":"columns = ['City', 'State', 'police_city']\ntemppolicebudgets2017 = budgetdata[budgetdata['year'] == 2017][columns]\ntemppolicebudgets2017.dropna()\npolicebudgets2017 = pd.DataFrame()\nfor city, state in zip(cities, states2):\n    policebudgets2017 = policebudgets2017.append(temppolicebudgets2017[temppolicebudgets2017['City'] == city][temppolicebudgets2017['State'] == state])\nbudgetcrimes = pd.merge(policebudgets2017, citydeathsyear1m, on = 'City', how = 'inner')\nbudgetcrimes.sort_values(by = 'Pop adjusted violent crimes', inplace = True, ascending = False)\n\n\nfig = plt.figure(figsize = (16, 10))\nax = fig.subplots()\nax.plot(budgetcrimes['City'], budgetcrimes['Pop adjusted violent crimes'], 'o', color = 'blue')\nplt.xticks(rotation = 90)\nax.set_ylabel('Violent Crime Rate', color = 'blue')\n\n\nax2 = ax.twinx()\nax2.plot(budgetcrimes['City'], budgetcrimes['police_city'], 'o', color = 'red')\nax2.set_ylabel('Police Budget (per capita dollars)', color = 'red')","39e82156":"budgetcrimes.sort_values(by = 'Pop adjusted arrests', inplace = True, ascending = False)\nfig = plt.figure(figsize = (16, 10))\nax = fig.subplots()\nax.plot(budgetcrimes['City'], budgetcrimes['Pop adjusted arrests'], 'o', color = 'blue')\nplt.xticks(rotation = 90)\nax.set_ylabel('Arrest Rate', color = 'blue')\n\nax2 = ax.twinx()\nax2.plot(budgetcrimes['City'], budgetcrimes['police_city'], 'o', color = 'red')\nax2.set_ylabel('Police Budget (per capita dollars)', color = 'red')","eaac413b":"budgetcrimes[budgetcrimes['City'] == 'Las Vegas']","44e23f41":"Here I will take a look at the racial component to this data. Looking at the break down of each state by race it is clear some states are significantly, this is important because we would expect very different demographic breakdowns of the victims in Arizona compared with Mississippi.","a3ee3930":"This data can also be broken down into cities instead of states.","3f50e92f":"In the total police killings by race graph the most killed race is white followed by Black and then Hispanic. ","1143bb3b":"Though it would be great to calculate relative physical force deaths such as in this graph, this is limited approach due to the low number of data points. It is difficult to draw conclusions based on this data as one death from physical force will have a massive impact on the relative graphs. For example Vermont has 1 death from physical force, however it is 10th in relative killings from physical force due to its low population.","5cdb0367":"For me unarmed deaths fall into the same catagory as the physical force deaths. They are similarly inexcuseable as both are a clear overuse of power from the officer. Perhapse a metric could be computed using both physical force deaths and deaths of unarmed victims, however this metric would have its own issues.","991e42d9":"Adding a state code column to the city population and politics data for comparison with other data.","68fd8eaa":"It is simple to look at the ages of the victims, it appears to follow a right-skewed poisson distribution. The the mode is 25 years old with the peak of this graph being between the mid 20s and mid 30s.","58ec3005":"# Initial look ","9d2e5f8d":"# City Data","03a328c7":"Once again we can also look at relative deaths for a more clear view of where the problem lies. St. Louis has the highest relative police killings by a significant margin, this is suprising considering Missouri's positions 12th for the state list, however in 2017 it was found that it had the highest murder rate of any US city, so maybe not so suprising. Missouri's position as the 12th highest state for relative police killings could therefor be a result of St. Louis bringing it up significantly.","b2d0431d":"Increased poverty is often associated with increased crime, and hence we would expect to see a correlation between the level of poverty in a state and the relative number of police killings. A quick look at the states poverty levels shows that Arizona and New Mexico are in the top 5 for both relative deaths and level of poverty. It would help to make a graph comparing these.","7e53e4a0":"Although the racial data here is simplistic and appears to be based on social distinctions such as skin colour it still serves a useful purpose. Especially since racial profiling is based on social distinctions. So lets take a look at the racial component of these killings. The most killed race is white or caucasian with nearly double the next most killed race, however as with the states we cannot yet draw conclusions from this graph.","925648d6":"A similar graph can be made by swapping out the percentage of people below the poverty line with the percentage of people who graduated highschool, this time we get a negative correlation. Over the range of data we have it seems the regression gradient is steeper for poverty, suggesting that it is a more important factor for effecting police killings.","5f58a41d":"A similar graph can be made by comparing police killings and arrests, this time there appears to be little to no correlation between the two. The small amount of correlation seen in these graphs might suggest in certain cities the police are much more willing to kill citizens than others. However one possibility is that the cities with high police killings also have low police trust, and hence their arrest and violent crime rate are limited by how many citizens are willing to report crimes to the police.","a8f71b74":"# Table of Contents","7809cce6":"Reading and cleaning data.\nSpecifically:\n\nGraduate data - replacing '-' with 'NaT' for ease of handling and removing rows with no data on the percentage that completing highschool.\n\nPolice policy data - replacing Kansas City\/Washington with names used elsewhere in the data set for comparison. Renaming the weirdly named columns with more suitable names.\n\nPolice Killings data - standardise cause of death and age columnm data. Renaming long column names. Creating new year column and reading date in datetime format.\n\nRace data - replacing unknown data with 'NaT' and discarding rows without enough data. Standardising city names.\n\nState data - discarding rows without enough data and renaming a column.\n\nCity data - renaming columns and standadisng city names.","d754ca4b":"As mentioned earlier, to compare the extent of the killing in different states we must take into account population. We calculate this new metric by dividing the police killings by the state population and multiplying by one million, in addition I have further divided by the number of years of data we have. This gives us police killings per year per million residence. We can now see that accounting for its population California is not the dire situation we once thought. The worst offender is now New Mexico with nearly 10 police killings per year per million people.","69f2a288":"By shading the relative police killings graph with the strength of gun laws we can infer a relationship between them. As the number of relative police killings decreases it seems gun law strength increases. There are notable exceptions to this trend, particularly California, hence it is clear the strength of gun laws is not the be all and end all, but it is clearly a contributing factor.","b56bb2d4":"First it is apparent not all states were born equal, California has nearly double the amount of police killings as the next closest state. After seeing this graph you might conclude that California has the biggest problem with police violence, however this graph is misleading.","aa948b0d":"With the coming of the Age of Information nearly ubiquitously held camera phones have led to an unpresidented view into the lives of everyone and anyone. Unfortunately for police that are keen on abuses of power this has shined a light on their malfeasance. The aquital of George Zimmerman sparked the Black Lives Matter (BLM) movement in 2013 and in 2014 the deaths of Eric Garner and Michael Brown crystalized police violence as a frontal issue in the minds of BLM supporters. With the passing years BLM has grown as more people have become aware of the issues and exposed to horrifc images of police brutality. This notebook aims to explore the statistics related to police violence in the USA.\n\nDatasets are used in this notebook:\n1. Uploaded by JohnM this dataset is fantastic, it pulls great data from across the internet on a variety of related sources and is the main basis for this analysis. \n   https:\/\/www.kaggle.com\/jpmiller\/police-violence-in-the-us\n   \n2. Uploaded by Karolina Wallum, this data set brings poverty, graduation, income and race data for cities in the US\n   https:\/\/www.kaggle.com\/kwullum\/fatal-police-shootings-in-the-us\n\n3. Census data from the US Census Bureau on current state and city populations.\n   https:\/\/www.census.gov\/data\/datasets\/time-series\/demo\/popest\/2010s-state-total.html#par_textimage_500989927 \n   https:\/\/www.census.gov\/data\/tables\/time-series\/demo\/popest\/2010s-total-cities-and-towns.html \n   \n4. A very interesting dataset from the people at Giffords Law Centre that quantifies the strength of gun laws in US states in relation to eachother. \n   https:\/\/lawcenter.giffords.org\/scorecard\/","6c8c6110":"# State Data","70291d35":"# Race Data","55ae2797":"# INTRODUCTION","c60a1e90":"Police Killings between 2013 and 2020 look fairly stable around 1100 with the highest being 2018 with 1142 police killings and the lowest being 2014 with 1050. This data is over too short of a time to draw a long term trend. ","c88e8817":"# Body","ef24398f":"Some of the most publicised police killings have been a result of physical force, such as the Eric Garner and George Floyd. Hence I wanted to take a look at the deaths resulting from physical force exherted by the police officers. It appears these are the minority of deaths, with 53 occuring in 7 years of Californian history. The number is low compared to the total deaths, however these tend to be the deaths with the most visceral violence on the part of the officer. My definition of physical force is any cause of death that could ordinarily be considered non-lethal force, hence the officers that killed their victims in this way were using excessive violence.","aff4dc2c":"One justification for a death is the violent crime rate, we would expect that cities that have high police killings are facing more violent crime than other cities. By comparing the two here we can see there is a small correlation, however it is not as significant as we might assume.","20947ff5":"Looking at the police killings against arrests and violent crimes over time may not serve much purpose, this data only covers 5 years so it is difficult to draw any long term correlations. However the inverse correlation that appears between the violent crimes and number of police killings is striking and probably deserves a more indepth analysis with more data.","4d77c894":"Kaggle notebook starting code","5cbf6755":"By looking at the frequency of police killings each day we can see people are killed everyday. The most people killed in one day is 10 in 2013. As 2018 has the most deaths it is unexpected that it has no days where 9 people died. ","8942cb6d":"From this graph it is clear there is a significant posative correlation between the level of poverty and the relatives deaths in a state. However as we said before this is not suprising due to the association of crime with poverty.","550e65fd":"Once we look at the populations of each state is is clear what has happened here. California has the most deaths due to its high population, infact the top three are the same in both graphs. Hence to explore this further later we must produce a metric that accounts for population."}}