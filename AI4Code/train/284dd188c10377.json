{"cell_type":{"7dee048c":"code","315c079f":"code","be2ebdd9":"code","33bf56d5":"code","6c5167b7":"code","f67724a8":"code","32e93b97":"code","e0b360d0":"code","ebd7ea05":"code","e8f232e8":"code","ebbf3fae":"code","5b757428":"code","9e024627":"code","de98e93c":"code","aa699e72":"code","e26d9abb":"code","fca67e6e":"code","a221adb0":"code","96309c0d":"code","c46ef820":"code","40a8ceac":"code","73753c48":"code","f4894969":"code","b302e6a2":"code","d613fa42":"code","e42b0190":"code","5bad3b17":"code","89497ee9":"code","e503cbf7":"code","ab4c3263":"code","68df82da":"code","d6226aaa":"code","5d9d5245":"code","bd730380":"code","17859952":"code","f6d5eeed":"code","4dbcc9ec":"code","e4033472":"code","40424896":"code","4b65a9af":"code","a10b9ff6":"code","3a6516a1":"code","a2f18d0d":"code","abe1ce38":"code","ff92c0fa":"code","fe7a65bf":"code","e6993fcf":"code","9bec201f":"code","19974c6c":"code","9980ccfe":"code","c1dc3b26":"code","8c87cd92":"code","387620e9":"code","6cb76c18":"code","61742bb1":"code","9f50dd22":"code","1a0e101c":"code","7cbcc42b":"code","e816db8a":"code","bde093c9":"markdown","d5068131":"markdown","5c685917":"markdown","f749fea2":"markdown","fe7cf6de":"markdown","8be1369f":"markdown","62c201cc":"markdown","59da2576":"markdown","1bdc70df":"markdown","58979255":"markdown","9c32786c":"markdown","18d72248":"markdown","c16990e6":"markdown","8fb90910":"markdown","633d10f5":"markdown","260bdb75":"markdown","db5de874":"markdown","5c92cc0c":"markdown","4d9f7aa1":"markdown","859758f1":"markdown","fdac80dc":"markdown","fb78dea8":"markdown","434aca96":"markdown","52e20319":"markdown","24e16627":"markdown","c20142c8":"markdown","b8bd0b8f":"markdown","1008a52e":"markdown","545522d5":"markdown","36aba25f":"markdown","b22cf354":"markdown","7f7e3061":"markdown","cc9af81c":"markdown","0ca06acf":"markdown","8c92aafb":"markdown","f66870fe":"markdown","d9b58e1e":"markdown","dc201a1a":"markdown","b0ec8231":"markdown","1008a197":"markdown","288dc202":"markdown","c7a6190a":"markdown"},"source":{"7dee048c":"import pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split, GridSearchCV","315c079f":"df = pd.read_csv('..\/input\/titanic\/train.csv')","be2ebdd9":"df","33bf56d5":"df.info()","6c5167b7":"df.drop('PassengerId', axis=1, inplace=True)","f67724a8":"df.groupby('Pclass').Survived.mean()","32e93b97":"sns.countplot(x=df.Pclass, hue=df.Survived)\nplt.show()","e0b360d0":"df.Name.sample(4)","ebd7ea05":"df.Name = df.Name.apply(lambda x: x.split()[1].replace('.',''))","e8f232e8":"df.Name.unique()","ebbf3fae":"df.Name.value_counts()","5b757428":"def name_fun(x):\n    if x not in ['Mr', 'Miss', 'Mrs', 'Master', 'Dr', 'Rev']:\n        return 'Others'\n    else:\n        return x","9e024627":"df.Name = df.Name.apply(name_fun)","de98e93c":"df.Name = df.Name.map({'Mr':0, 'Miss':1, 'Mrs':2, 'Master':3, 'Dr':3, 'Rev':3, 'Others':4})","aa699e72":"sns.countplot(x=df.Name)\nplt.xticks(rotation=75)\nplt.show()","e26d9abb":"sns.countplot(x=df.Name, hue=df.Survived)\nplt.show()","fca67e6e":"df.Sex = df.Sex.map({'male':1, 'female':0})","a221adb0":"df['Family'] = df.SibSp + df.Parch\ndf.drop(['SibSp', 'Parch'], axis=1, inplace=True)","96309c0d":"df.Ticket.sample(10)","c46ef820":"def ticket_fun(x):\n    if x.isdigit():\n        return str(x)[:1]\n    else:\n        return x[:1]","40a8ceac":"df.Ticket = df.Ticket.apply(lambda x: x.split()[0].replace('.','').replace('\/','').lower())\ndf.Ticket = df.Ticket.apply(ticket_fun)","73753c48":"dict(df.Ticket.value_counts())","f4894969":"sns.countplot(x=df.Ticket, hue=df.Survived)\nplt.show()","b302e6a2":"def ticket_fun2(x):\n    if x not in ['a', 'p', 's', '1', '2', '3', 'c']:\n        return 'Others'\n    else:\n        return str(x)\ndf.Ticket = df.Ticket.apply(ticket_fun2)","d613fa42":"sns.countplot(x=df.Ticket, hue=df.Survived)\nplt.show()","e42b0190":"df.Ticket = df.Ticket.map({'a':0, 'p':1, 's':2, '1':3, '2':3, '3':4, 'c':5, 'Others':6})","5bad3b17":"sns.histplot(df.Fare, bins=range(1,500, 10))\nplt.show()","89497ee9":"def fare_fun(x):\n    if x>0 and x<50:\n        return 'gr1'\n    elif x>50 and x<100:\n        return 'gr2'\n    elif x>100:\n        return 'gr3'\ndf.Fare = df.Fare.apply(fare_fun)","e503cbf7":"sns.countplot(x=df.Fare, hue=df.Survived)\nplt.show()","ab4c3263":"df.Fare = df.Fare.fillna('gr1')\ndf[df.Fare.isnull()]","68df82da":"df.Fare = df.Fare.map({'gr1':0, 'gr2':1, 'gr3':2})","d6226aaa":"df.Cabin = df.Cabin.apply(lambda x: str(x)[0])","5d9d5245":"df.drop(['Cabin'], axis=1, inplace=True)","bd730380":"df.Embarked = df.Embarked.fillna('S')\ndf.Embarked = df.Embarked.map({'S':0, 'Q':1, 'C':2})","17859952":"sns.histplot(df[df.Survived==0].Age, color='r', label='Died')\nsns.histplot(df[df.Survived==1].Age, color='g', label='Survived')\nplt.legend()\nplt.show()","f6d5eeed":"sns.histplot(df[df.Survived==0].Age, color='r', label='Died', bins=[0,15,30,45,60,80])\nsns.histplot(df[df.Survived==1].Age, color='g', label='Survived', bins=[0,15,30,45,60,80])\nplt.legend()\nplt.show()","4dbcc9ec":"def age_fun(x):\n    if x>0 and x<30:\n        return 'gr1'\n    elif x>30 and x<45:\n        return 'gr2'\n    elif x>45 and x<60:\n        return 'gr3'\n    elif x>60:\n        return 'gr4'\ndf.Age = df.Age.apply(age_fun)","e4033472":"sns.countplot(x=df.Age, hue=df.Survived)\nplt.show()","40424896":"sns.countplot(x=df.Age, hue=df.Fare)\nplt.show()","4b65a9af":"df[df.Age.isnull()]","a10b9ff6":"train_data = df[df.Age.isnull()==False]\ntrain_surv = train_data.Survived\ntarget = train_data.Age\ntrain_data.drop(['Age'], axis=1, inplace=True)\n\ntest_data =  df[df.Age.isnull()==True]\ntest_surv = test_data.Survived\ntest_data.drop(['Age'], axis=1, inplace=True)","3a6516a1":"train_data.info()","a2f18d0d":"dtclf = DecisionTreeClassifier()\ndtclf.fit(train_data, target)\ntest_data['Age'] = dtclf.predict(test_data)","abe1ce38":"sns.countplot(x=test_data.Age)\nplt.show()","ff92c0fa":"train_data['Age'] = target\ntrain_data['Survived'] = train_surv\ntest_data['Survived'] = test_surv\ndf = pd.concat([train_data, test_data], axis=0)","fe7a65bf":"df.Age = df.Age.map({'gr1':0, 'gr2':1, 'gr3':2, 'gr4':3})","e6993fcf":"df.info()","9bec201f":"df","19974c6c":"X_train, X_val, y_train, y_val = train_test_split(df.drop(['Survived'], axis=1), df.Survived,\n                                                    test_size=0.10, random_state=42)\n\ngbclf = GradientBoostingClassifier()\ngbclf.fit(X_train, y_train)\ny_pred = gbclf.predict(X_val)\nacc = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc)","9980ccfe":"tdf = pd.read_csv('..\/input\/titanic\/test.csv')","c1dc3b26":"tdf.info()","8c87cd92":"tdf.drop(['PassengerId','Cabin'], axis=1, inplace=True)","387620e9":"tdf.Name = tdf.Name.apply(lambda x: str(x).split()[1].replace('.',''))","6cb76c18":"# For test data\n\ndef name_fun(x):\n    if x not in ['Mr', 'Miss', 'Mrs', 'Master', 'Dr', 'Rev']:\n        return 'Others'\n    else:\n        return x\n    \ntdf.Name = tdf.Name.apply(name_fun)\ntdf.Name = tdf.Name.map({'Mr':0, 'Miss':1, 'Mrs':2, 'Master':3, 'Dr':3, 'Rev':3, 'Others':4})\n\ntdf.Sex = tdf.Sex.map({'male':1, 'female':0})\n\ndef ticket_fun(x):\n    if x.isdigit():\n        return str(x)[:1]\n    else:\n        return x[:1]\n    \ntdf.Ticket = tdf.Ticket.apply(lambda x: x.split()[0].replace('.','').replace('\/','').lower())\ntdf.Ticket = tdf.Ticket.apply(ticket_fun)\n\ndef ticket_fun2(x):\n    if x not in ['a', 'p', 's', '1', '2', '3', 'c']:\n        return 'Others'\n    else:\n        return str(x)\ntdf.Ticket = tdf.Ticket.apply(ticket_fun2)\ntdf.Ticket = tdf.Ticket.map({'a':0, 'p':1, 's':2, '1':3, '2':3, '3':4, 'c':5, 'Others':6})\n\ndef fare_fun(x):\n    x = float(x)\n    if x>0 and x<50:\n        return 'gr1'\n    elif x>50 and x<100:\n        return 'gr2'\n    elif x>100:\n        return 'gr3'\ntdf.Fare = tdf.Fare.apply(fare_fun)\ntdf.Fare = tdf.Fare.fillna('gr1')\ntdf.Fare = tdf.Fare.map({'gr1':0, 'gr2':1, 'gr3':2})\ntdf.Embarked = tdf.Embarked.map({'S':0, 'Q':1, 'C':2})\n\ndef age_fun(x):\n    if x>0 and x<30:\n        return 'gr1'\n    elif x>30 and x<45:\n        return 'gr2'\n    elif x>45 and x<60:\n        return 'gr3'\n    elif x>60:\n        return 'gr4'\ntdf.Age = tdf.Age.apply(age_fun)\ntdf.Age = tdf.Age.fillna('gr1')\ntdf.Age = tdf.Age.map({'gr1':0, 'gr2':1, 'gr3':2, 'gr4':3})","61742bb1":"tdf['Family'] = tdf.SibSp + tdf.Parch\ntdf.drop(['SibSp','Parch'], axis=1, inplace=True)","9f50dd22":"tdf","1a0e101c":"# This one gave 73.4 % accuracy on Submission\n# gbclf = GradientBoostingClassifier()\n\n# params = {    \n#               'loss' : [\"deviance\"],\n#               'n_estimators' : [50,100,200,300,500],\n#               'learning_rate': [0.1, 0.05, 0.01, 0.001, 0.0001],\n#               'max_depth': [4, 8]\n#          }\n\n# gs = GridSearchCV(gbclf,param_grid = params, cv=5, scoring=\"accuracy\", n_jobs= -1, verbose = 1)\n\n# gs.fit(X_train,y_train)","7cbcc42b":"RFC = RandomForestClassifier()\n\n\nparams = { \n              \"max_features\": [1, 3, 5, 10],\n              \"min_samples_split\": [2, 3, 10],\n              \"n_estimators\" :[100,300, 500, 700, 1000, 1200, 1500, 1700],\n              \"criterion\": [\"gini\", \"entropy\"]\n          }\n\n\ngs = GridSearchCV(RFC, param_grid = params, cv=3, scoring=\"accuracy\", n_jobs= -1, verbose = 1)\n\ngs.fit(X_train,y_train)\n\nprint(gs.best_estimator_)\nprint(gs.best_score_)","e816db8a":"submission = pd.DataFrame({ 'PassengerId' : pd.read_csv('..\/input\/titanic\/test.csv')['PassengerId'], \n                           'Survived': gs.predict(tdf)})\nsubmission.to_csv('submission.csv', index=False)","bde093c9":"Lets see survival by the age group. Looks like only 0-5 year olds were certain to live others just followed a natural patter. But we will group them too.","d5068131":"So here is what it looks like after all the tweaking.","5c685917":"#### Age","f749fea2":"In the Name feature, however, anything before the second space is like a title that repeats for several people but anything else in both its sides do not seem to repeat so they give no context to the model. In short they are not helpful.","fe7cf6de":"#### PassengerId","8be1369f":"Here is a truth about the 100% accuracy on Leader Board, this is something that everyone should be aware of while starting - https:\/\/www.kaggle.com\/tarunpaparaju\/titanic-competition-how-top-lb-got-their-score","62c201cc":"#### Fare","59da2576":"And they do have meaning when it comes to survival. But not all categories are relevant so lets reduce the no of buckets.","1bdc70df":"We will keep till 'Rev' and put all others under one label called 'Others'.","58979255":"### Feature Engineering","9c32786c":"This dataset demands a feature centric approach and I haev kept it simple. For each step there is always something new one can do, so one must feel free to experiment. However, keeping it simple is the key.","18d72248":"Now it is cleaner and more precise","c16990e6":"#### Pclass","8fb90910":"We leave the Pclass as it is as no of categories are low and they seem to have meaning in relation to target feature.","633d10f5":"#### Ticket","260bdb75":"### Load Data","db5de874":"This is the prediction for the null values of Age column.","5c92cc0c":"Here is the test data after cleaning that we will use for prediction.","4d9f7aa1":"This should be good enough.","859758f1":"It has so many missing values that it is better to drop.","fdac80dc":"Lets split the train data and check once how a basic model performs. ","fb78dea8":"I took the liberty give few missing values to group 1 as they are the most in no.","434aca96":"### Predicting and Creating Submission File","52e20319":"#### Sex","24e16627":"So our task is to help the model get a clean and effective data and here we see \n1. PassengerId is useless\n2. Missing values in - Age, Cabin","c20142c8":"This gives meaning to the Sibling Spouse Parent Child features and defines one feature called Family.","b8bd0b8f":"#### Name","1008a52e":"There are plenty of Null values to be filled. I could try to infer from other features but lets give this task to a model instead.\n\nWe will predict the age from the data we have.","545522d5":"### Training Model","36aba25f":"### Imports","b22cf354":"That's good enough.","7f7e3061":"#### Cabin","cc9af81c":"#### SibSp and Parch","0ca06acf":"So they do form a group, as we can see.","8c92aafb":"If you like this work, please <b>UPVOTE.<\/b>","f66870fe":"If we group them from 0-50, 51-100, 100 to any value, they fall in line well.","d9b58e1e":"The tickets must correspond to something, cabin area or booking sequence maybe. But they surely form a group, by the initials, be they of the words present in the ticket columns or the first digits of the ticket no. So we break them like that.","dc201a1a":"The bin sizes below hold the values well, so they should make good groups.","b0ec8231":"#### Embarked","1008a197":"It turns out, test data has some NULL values too, we need to take care of that also the encodings must be same.","288dc202":"### Feature Engineering Outcome","c7a6190a":"If we look at the Fare, they follow a pareto chart. They do have groups as we will see next."}}