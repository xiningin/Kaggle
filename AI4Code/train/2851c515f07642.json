{"cell_type":{"9f487c2e":"code","7defd10d":"code","8c67bfd6":"code","5fa7eb5f":"code","25d35e1b":"code","867b50d5":"code","476f4d6d":"code","a1630e6a":"code","a6571b91":"code","db8288f2":"code","d15e2355":"code","498a89a1":"code","6fa41b85":"code","c3a9387a":"code","7b5aaeef":"code","ef9e5500":"code","0328335a":"code","0b8a83ca":"code","0aa0ec99":"code","93530d5d":"code","a6512012":"code","80a8b201":"code","004575a3":"markdown","56151ae9":"markdown","c1229909":"markdown","8496673f":"markdown","25f8f86f":"markdown","3f6f01ae":"markdown","e84e290b":"markdown","9ea07930":"markdown","fe519c96":"markdown","daa41b6a":"markdown","b2d72988":"markdown","f1e1337f":"markdown","69e4c70f":"markdown","cd400a51":"markdown"},"source":{"9f487c2e":"import json\nimport requests\nimport numpy as np\nimport pandas as pd\nimport networkx as nx\nfrom scipy.spatial import distance\nimport time\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.cluster import KMeans\nfrom tqdm.notebook import trange, tqdm","7defd10d":"with open('..\/input\/subway-json-data\/subwaySH.json','r') as f:\n    subwaySH = json.load(f)\n\nmetroData = pd.DataFrame()\nfor i in subwaySH['l']:\n    subwayName = i['ln']\n    subwayData = i['st']\n    \n    terminal = [i['n'] for i in subwayData]\n    longitude = [i['sl'].split(',')[1] for i in subwayData]\n    latitude = [i['sl'].split(',')[0] for i in subwayData]\n    \n    metroDT = pd.DataFrame({\n        'terminal': terminal, \n        'longitude': longitude,\n        'latitude': latitude\n    })\n    \n    metroDT['subwaynames'] = subwayName\n    \n    metroData = metroData.append(metroDT, ignore_index=True)\n\nmetroData","8c67bfd6":"metroData['subwaynames'].unique()","5fa7eb5f":"metroData['longitude'] = metroData['longitude'].astype('float')\nmetroData['latitude'] = metroData['latitude'].astype('float')\nmetroData.info()","25d35e1b":"# \u8ba1\u7b97\u6bcf\u4e00\u7ad9\u4e0e\u5176\u4ed6\u7ad9\u7684\u6b27\u6c0f\u8ddd\u79bb\ndt = pd.DataFrame()\nfor stop in metroData['subwaynames'].unique():\n    \n    for idx1, row1 in metroData.loc[metroData['subwaynames']==stop,].iterrows(): \n        for idx2, row2 in metroData.loc[metroData['subwaynames']==stop,].iterrows():\n            \n            if idx2 == idx1+1:\n                dis = distance.euclidean([row1['longitude'], row1['latitude']], [row2['longitude'], row2['latitude']])\n                \n                oneRow = {\n                    'line':stop,\n                    'from': row1['terminal'],\n                    'to': row2['terminal'],\n                    'w': dis\n                }\n                \n                dt = dt.append(oneRow, ignore_index=True)\n            else:\n                pass\n\ndt","867b50d5":"mean_weight = np.mean(dt['w'])\nmean_weight","476f4d6d":"G = nx.from_pandas_edgelist(dt, source='from', target='to', edge_attr=True,)\nG","a1630e6a":"dat = pd.DataFrame({\n    'between': nx.betweenness_centrality(G),\n    'pagerank': nx.pagerank(G),\n    'close': nx.closeness_centrality(G)\n})\n# dat['close'] = 1 \/ dat['close']\ndat['stop'] = dat.index\ndat.reset_index(drop=True, inplace=True)\ndat = dat[['stop','between','pagerank','close']]\ndat","a6571b91":"print('Betweenness \u6392\u540d\u524d15\u5730\u94c1\u7ad9')\nprint('-'*50)\ndat.sort_values(by=['between'], ascending=False, inplace=True)\ndat.head(10)","db8288f2":"print('Pagerank \u6392\u540d\u524d15\u5730\u94c1\u7ad9')\nprint('-'*50)\ndat.sort_values(by=['pagerank'], ascending=False, inplace=True)\ndat.head(10)","d15e2355":"print('Closeness \u6392\u540d\u524d15\u5730\u94c1\u7ad9')\nprint('-'*50)\ndat.sort_values(by=['close'], ascending=False, inplace=True)\ndat.head(10)","498a89a1":"X = dat\nX.index = X['stop']\nX = dat[['between','pagerank','close']]\nX","6fa41b85":"distortions = []\nfor k in range(1, 10):\n    kmeanModel = KMeans(n_clusters=k).fit(X)\n    distortions.append(sum(np.min(distance.cdist(X, kmeanModel.cluster_centers_, 'euclidean'), axis=1)) \/ X.shape[0])\n    \nfig = go.Figure(data=go.Scatter(x= np.arange(10), y=np.array(distortions)))\nfig.update_layout(\n    height=400,\n    width=550,\n    title='Optimal number of clusters',\n    xaxis_title='Numbers of clusters K',\n    yaxis_title='distance'\n)\nfig.show()","c3a9387a":"kmeans = KMeans(n_clusters=4, random_state=0)\nkmeans.fit(X)\ny_kmeans = kmeans.predict(X) + 1\ndat['class'] = y_kmeans.astype(str) \ndat","7b5aaeef":"dat.groupby(['class'])['between','pagerank','close'].mean()","ef9e5500":"fig = px.scatter(dat, x='pagerank', y='close', text='stop', color='class', size_max=60)\n\nfig.update_traces(textposition='top center')\n\nfig.update_layout(\n    height=800,\n    width=800,\n    title_text=' '\n)\n\nfig.show()","0328335a":"fig = px.scatter(dat, x='pagerank', y='between', text='stop', color='class', size_max=60)\nfig.update_traces(textposition='top center')\nfig.update_layout(\n    height=800,\n    width=800,\n    title_text=' '\n)\n\nfig.show()","0b8a83ca":"fig = px.scatter(dat, x=\"pagerank\", y=\"between\", text='stop',color=\"class\", facet_col=\"class\", facet_col_wrap=2)\nfig.update_traces(textposition='top center')\nfig.update_layout(\n    height=1200,\n    width=1200,\n    title_text=' '\n)\n\nfig.update_yaxes(matches=None)\nfig.update_xaxes(matches=None)\nfig.show()","0aa0ec99":"metroData","93530d5d":"dt0 = pd.DataFrame()\nlat_minmax_diff = 0.02201548 \/ 4 # \u7ecf\u7eac\u5ea6\u67e5\u8be2\u6570\u636e\u7684\u533a\u95f4\nlongi_minmax_diff = 0.04132205 \/ 4\n\ndef extractJson(jsonList):\n    '''\u89e3\u6790json\uff0c\u8fd4\u56de\u5e73\u5747\u4ef7\u683c\u3001\u4e8c\u624b\u623f\u4f9b\u5e94\u6570\u91cf'''\n    try:\n        priceMcount = np.array([int(i['price']) * int(i['count']) for i in jsonList['data']['bubbleList']]).astype('int').sum()\n    except:\n        priceMcount = np.nan\n    try:\n        countSum = np.array([int(i['count']) for i in jsonList['data']['bubbleList']]).astype('int').sum()\n    except: \n        countSum = np.nan\n    avgPrice = round(priceMcount \/ countSum, 0)\n    return avgPrice, countSum\n\nmetroData = metroData[['terminal','longitude','latitude']]\nmetroData = metroData.drop_duplicates()\n\nstart = time.time()\nfor idx, row in tqdm(metroData.iterrows(), total = metroData.shape[0]):\n    #if idx % 20 == 0:\n    #    print('processing row {}'.format(idx))\n    time.sleep(0.1)\n    Longitude = row['longitude']\n    Latitude = row['latitude']\n    a = Longitude + lat_minmax_diff\n    b = Longitude - lat_minmax_diff\n    c = Latitude + longi_minmax_diff\n    d = Latitude - longi_minmax_diff \n    url = \"https:\/\/map.ke.com\/proxyApi\/i.c-pc-webapi.ke.com\/map\/bubblelist?cityId=310000&dataSource=ESF&condition=&id=&groupType=community&maxLatitude={}&minLatitude={}&maxLongitude={}&minLongitude={}\".format(a,b,c,d)\n    # print(url)\n    response = requests.get(url).json()\n    avgPrice, countSum = extractJson(response)\n\n    oneRow = {'stop': row['terminal'],\n              'avgPrice': avgPrice,\n              'countSum' : countSum\n             }\n    \n    dt0 = dt0.append(oneRow, ignore_index=True)\n    \nprint('The program costs %.2f seconds'%(time.time() - start))\ndt0.index = dt0['stop']\ndt0","a6512012":"dt1 = dt0.join(dat[['class']], how = 'left')\ndt1 = dt1.loc[(dt1['class'] == '2') | (dt1['class'] == '3'), ]\n\ndt1 = dt1.loc[(dt1['avgPrice'] > 10) | (dt1['countSum'] > 10),]\ndt1","80a8b201":"fig = px.scatter(dt1, x='avgPrice', y='countSum', text='stop', color='class', size_max=60)\nfig.update_traces(textposition='top center')\nfig.update_layout(\n    height=800,\n    width=1000,\n    xaxis_title=\"\u4e8c\u624b\u623f\u5747\u4ef7\",\n    yaxis_title=\"\u4e8c\u624b\u623f\u4f9b\u5e94\u91cf\",\n)\n\nfig.show()","004575a3":"Pagerank\u6392\u540d\u6bd4\u8f83\u9ad8\u7684\u662f\u591a\u7ad9\u6362\u4e58\u7ad9\uff0c\u6bd4\u5982\u4e16\u7eaa\u5927\u9053\u3001\u9f99\u9633\u8def\u3002","56151ae9":"# \u7ed3\u8bba\n\n+ \u4e0a\u56fe\u5c55\u793a\u7684\u7ad9\u70b9\u51e0\u4e4e\u90fd\u662f\u4ea4\u901a\u4fbf\u5229\u5ea6\u8f83\u9ad8\u76842\u30013\u7c7b\u5730\u94c1\u7ad9\u70b9\n    \n    + \u5728\u8fd9\u4e9b\u7ad9\u70b9\u4e2d\uff0c\u9644\u8fd1\u4e8c\u624b\u623f\u4f9b\u5e94\u91cf\u591a\u4e14\u4fbf\u5b9c\u7684\u7ad9\u70b9\u4e00\u76ee\u4e86\u7136\n    \n    + \u534e\u4e1c\u7406\u5de5\u5927\u5b66\u3001\u5ef6\u957f\u8def\u3001\u5b9d\u5c71\u8def\u3001\u4e0a\u6d77\u5357\u7ad9\u8fd9\u4e9b\u7ad9\u70b9\u5e94\u5f53\u4e88\u4ee5\u5173\u6ce8\n    \n    + \u8d1d\u58f3\u7f51\u63d0\u4f9b\u7684\u6570\u636e\u5b58\u5728\u65f6\u6548\u6027\uff0c\u4e14\u53ef\u80fd\u6709\u504f\uff0c\u56e0\u6b64\u7528\u4e8c\u624b\u623f\u4f9b\u5e94\u91cf\u8fd9\u6837\u7684\u6307\u6807\u6765\u8861\u91cf\u201c\u4ef7\u503c\u6d3c\u5730\u201d\u53ef\u80fd\u4e0d\u51c6\n\n+ \u672c\u6587\u662f\u5bf9[\u300a\u4ece\u5317\u4eac\u5730\u94c1\u89c4\u5212\u518d\u770b\u5730\u6bb5\u7684\u91cd\u8981\u6027\u300b](https:\/\/bjt.name\/2021\/02\/13\/subway.html)\u8fd9\u7bc7\u6587\u7ae0\u7684\u8fc1\u79fb\u548c\u590d\u5236\u3002\u4e8c\u8005\u5173\u8054\u5982\u4e0b\uff1a\n        \n    + \u539f\u6587\u4f7f\u7528R\u8bed\u8a00\u8fdb\u884c\u5206\u6790\uff0c\u672cNotebook\u4f7f\u7528Python\n        \n    + \u539f\u6587\u4f7f\u7528\u5317\u4eac\u5730\u94c1\u6570\u636e\uff0c\u672c\u6587\u4f7f\u7528\u4e86\u4e0a\u6d77\u5730\u94c1\u6570\u636e\n    \n    + \n    \n+ \u805a\u7c7b\u5206\u6790\u6709\u6bd4\u8f83\u5f3a\u7684\u968f\u610f\u6027\uff0c\u4f46\u662f\u672c\u6587\u7684\u5e94\u7528\u573a\u666f(3\u4e2a\u76f8\u4f3c\u5ea6\u90fd\u662f\u8fde\u7eed\u6027\u7279\u5f81)\u6bd4\u8f83\u9002\u5408\u4f7f\u7528\u805a\u7c7b\u5206\u6790\n\n+ `plotly`\u8fd9\u6837\u7684\u4ea4\u4e92\u56fe\u5f62\u7cfb\u7edf\u7528\u8d77\u6765\u8fd8\u662f\u5f88\u9999\u7684\n\n\n\n\n","c1229909":"\u6700\u540e\u5f97\u5230\u7684\u6570\u636e\u5982\u4e0a\u9762\u5c55\u793a\u7684\uff0c\u5305\u542b\u4e86\u6bcf\u4e00\u6761\u7ebf\u8def\u7684\u6bcf\u4e00\u7ad9\uff0c\u6240\u5bf9\u5e94\u7684\u7ecf\u5ea6\u548c\u7eac\u5ea6\u3002\u6709\u4e86\u7ecf\u7eac\u5ea6\u6570\u636e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba1\u7b97\u8ddd\u79bb\u65b9\u9762\u7684\u6307\u6807\u3002","8496673f":"## \u5bfb\u627e\u4ef7\u503c\u6d3c\u5730\n\n+ \u4ece\u8d1d\u58f3\u4e8c\u624b\u623f\u7684\u7f51\u9875\u7aef\u722c\u53d6\u5730\u94c1\u7ad9\u9644\u8fd1\u6570\u636e\n\n+ \u5206\u6790\u5730\u94c1\u7ad9\u9644\u8fd1\uff0c\u4e8c\u624b\u623f\u4f9b\u5e94\u91cf\u4e0e\u623f\u4ef7\u7684\u5173\u7cfb\n\n","25f8f86f":"\u4e0b\u9762\u6253\u5370\u4e86Betweenness\u964d\u5e8f\u6392\u5217\u7684\u524d15\u540d\u7684\u5730\u94c1\u7ad9\u70b9\u30024\u7ebf\u6362\u4e58\u7ad9\u4e16\u7eaa\u5927\u9053\u62d4\u5f97\u5934\u7b79","3f6f01ae":"\u9700\u8981\u6ce8\u610f\u7684\u662fPython\u548cR\u8bed\u8a00\u4e2d\u8ba1\u7b97\u6b27\u6c0f\u8ddd\u79bb\u7684\u65b9\u6cd5\u5177\u6709\u5f88\u660e\u663e\u7684\u533a\u522b\u3002R\u8bed\u8a00\u4f7f\u7528\u5411\u91cf\u5316\u7684\u65b9\u6cd5\uff0c\u5b83\u4e00\u6b21\u603b\u662f\u80fd\u64cd\u4f5c\u6574\u4e2a\u5411\u91cf\u3002\u800cPython\u4e00\u6b21\u5219\u53ea\u80fd\u64cd\u4f5c\u4e00\u4e2a\u6570\u636e\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u901a\u8fc7\u5199\u5faa\u73af\u7684\u65b9\u5f0f\u6765\u8ba1\u7b97\u3002","e84e290b":"\u4e0b\u9762\u4e00\u6bb5\u5faa\u73af\u4e86`metroData`\u6570\u636e\u6846\u7684\u6bcf\u4e00\u884c\uff0c\u5c06\u6bcf\u4e00\u4e2a\u5730\u94c1\u7ad9\u7684\u7ecf\u7eac\u5ea6\u8303\u56f4\u5e26\u5165url\u4e2d\uff0c\u53d1\u51fa\u8bf7\u6c42\u3002\u8d1d\u58f3\u63d0\u4f9b\u7684api\u80fd\u591f\u8fd4\u56de`json`\u6570\u636e\uff0c\u91cc\u9762\u5305\u542b\u4e86\u4e8c\u624b\u623f\u4f9b\u5e94\u91cf\u4e0e\u623f\u4ef7\u4fe1\u606f\u3002\u6211\u4eec\u53ea\u9700\u8981\u89e3\u6790\u8fd9\u4e2ajson\u5b57\u7b26\u4e32\u5c31\u53ef\u4ee5\u4e86\u3002","9ea07930":"\u4ece\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa2\/3\u4e24\u7c7b\u57283\u4e2a\u6307\u6807\u7684\u8868\u73b0\u662f\u6700\u597d\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4e0b\u9762\u7740\u91cd\u5206\u6790\u8fd9\u4e24\u7c7b\u5730\u94c1\u7ad9\u3002","fe519c96":"## K-Means Clustering\n\n\n+ \u5bf9\u4e8eK-Means\u805a\u7c7b\u7684\u95ee\u9898\uff0c\u5e38\u5e38\u4f7f\u7528\u624b\u8098\u6cd5\u6765\u786e\u5b9a\u805a\u7c7b\u7684\u7c7b\u522b\u6570\u3002\n\n+ \u53ea\u5206\u4e3a1\u7c7b\u4e0d\u5408\u7406\u3002\u6839\u636e\u7ecf\u9a8c\u539f\u5219\uff08~~\u968f\u4fbf\u62cd\u8111\u888b\u51b3\u5b9a~~\uff09\u5206\u4e3a4\u7c7b\u3002","daa41b6a":"\u9996\u5148\u6211\u4eec\u4ecejson\u6570\u636e\u4e2d\u5c06\u6570\u636e\u6784\u5efa\u6210`DataFrame()`\u7684\u5f62\u5f0f\u3002\u8fd9\u4e00\u6b65\u9700\u8981\u5bf9json\u6570\u636e\u6709\u6240\u4e86\u89e3\uff0c\u5e76\u4e14\u9700\u8981\u5b66\u4f1a\u89e3\u6790json\u6570\u636e\u3002","b2d72988":"\u8ba1\u7b973\u4e2a\u6307\u6807\uff1a\n\n+ Betweenness centrality\uff1a\u5982\u679c\u5730\u94c1\u7f51\u7edc\u4e2d\u6709\u8fd9\u6837\u4e00\u4e2a\u7ad9\u70b9 A\uff0c\u5176\u4ed6\u7684\u7ad9\u70b9\u90fd\u8981\u901a\u8fc7 A \u624d\u80fd\u5230\u8fbe\u5176\u4ed6\u7684\u7ad9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ad9\u70b9\u8d8a\u91cd\u8981\u3002\u60f3\u8c61\u6781\u7aef\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6ca1\u6709\u4e86\u7ad9\u70b9A\uff0c\u4f60\u9700\u8981\u7ed5\u884c\u5f88\u5927\u4e00\u6bb5\uff0c\u624d\u80fd\u4ece\u4e00\u4e2a\u7ad9\u70b9\u5230\u8fbe\u53e6\u4e00\u4e2a\u7ad9\u70b9\u3002\n\n+ PageRank centrality\uff1a\u5982\u679c\u540c A \u7ad9\u70b9\u8fde\u63a5\u7684\u7ad9\u70b9\u90fd\u975e\u5e38\u597d\uff0c\u90a3\u4e48\u7269\u4ee5\u7c7b\u805a\uff0cA \u7ad9\u70b9\u4e5f\u5e94\u8be5\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u7ad9\u70b9\u3002\u7b80\u5355\u5730\u53ef\u4ee5\u7406\u89e3\u4e3aA\u70b9\u7684\u91cd\u8981\u7a0b\u5ea6\u662f\u5468\u56f4\u8fde\u63a5\u70b9\u91cd\u8981\u7a0b\u5ea6\u7684\u52a0\u6743\u3002\n\n+ Closeness centrality\uff1a\u5982\u679c\u4ece\u5730\u94c1\u7f51\u7edc\u4e2d A \u70b9\uff0c\u5230\u6240\u6709\u5176\u4ed6\u5730\u94c1\u7ad9\u7684\u201c\u6700\u77ed\u8ddd\u79bb\u201d\u7684\u548c\u6700\u5c0f\u7684\u8bdd\uff0c\u90a3\u8fd9\u4e2a\u7ad9\u70b9\u4e00\u5b9a\u662f\u6700\u4fbf\u6377\u7684\uff0c\u5b83\u53cd\u6620\u7684\u662f\u7f51\u7edc\u8282\u70b9A\u5230\u5176\u4ed6\u8282\u70b9\u7684\u5e73\u5747\u6700\u77ed\u8ddd\u79bb\u3002\n\n\n\u8fd9\u91cc\u7684\u5ea6\u91cf\u6807\u51c6\u90fd\u662f\u503c\u8d8a\u5927\uff0c\u4e2d\u5fc3\u5ea6\u8d8a\u9ad8\u3002\u6bd4\u5982\uff0c\u7ad9\u70b9A\u7684Closeness\u503c\u5927\u4e8eB\uff0c\u5c31\u8bf4\u660eA\u7684\u91cd\u8981\u6027\u9ad8\u4e8eB\u3002","f1e1337f":"\u4e00\u987f\u64cd\u4f5c\u540e\u5f97\u5230\u4e86\u4e0b\u9762\u7684\u56fe","69e4c70f":"# \u4e0a\u6d77\u5730\u94c1\u7ad9\u70b9\u7684\u533a\u57df\u91cd\u8981\u6027\n\n\n\u9605\u8bfb\u4e86[\u5218\u601d\u5586](https:\/\/bjt.name\/)\u5927\u4f6c\u7684\u4e24\u7bc7\u6587\u7ae0[\u300a\u597d\u5730\u6bb5\u662f\u600e\u4e48\u9009\u51fa\u6765\u7684-\u4ece\u5317\u4eac\u5730\u94c1\u770b\u533a\u57df\u7684\u91cd\u8981\u6027\u300b](https:\/\/bjt.name\/2013\/01\/05\/Beijing-subway.html)\u548c[\u300a\u4ece\u5317\u4eac\u5730\u94c1\u89c4\u5212\u518d\u770b\u5730\u6bb5\u7684\u91cd\u8981\u6027\u300b](https:\/\/bjt.name\/2021\/02\/13\/subway.html)(2\u7bc7\u6587\u7ae0\u5206\u522b\u4f5c\u4e8e2013\u5e74\u548c2021\u5e74)\u4e4b\u540e\uff0c\u6211\u5bf9\u5176\u4e2d\u7684\u5173\u4e8e\u7f51\u7edc\u548c\u56fe\u7684\u65b9\u6cd5\u6bd4\u8f83\u611f\u5174\u8da3\u3002\u5176\u4e2d\u7b2c\u4e8c\u7bc7\u6587\u7ae0\u7ed9\u4e86\u5b8c\u6574\u7684\u4ee3\u7801\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5bf9\u6587\u7ae0\u4e2d\u7684\u5b9e\u73b0\u65b9\u6cd5\u8fdb\u884c\u7814\u7a76\u548c\u590d\u73b0\u3002\u4e0b\u9762\u4f7f\u7528Python\u590d\u73b0\u5b83\u6240\u7528\u7684\u65b9\u6cd5\u3002\n\n![](https:\/\/i.loli.net\/2021\/08\/03\/eRhNqsBXvEHcLrS.gif)\n\n\u6280\u672f\u53c2\u8003\uff1ahttps:\/\/zhuanlan.zhihu.com\/p\/360736781","cd400a51":"\u5728Closeness\u6392\u540d\u524d15\u7684\u5730\u94c1\u7ad9\u51e0\u4e4e\u90fd\u662f\u4f4d\u4e8e\u5e02\u4e2d\u5fc3\u6838\u5fc3\u5730\u6bb5\u7684\u7ad9\u70b9\u3002\u8fd9\u4e9b\u7ad9\u70b9\u8ddd\u79bb\u5176\u4ed6\u7ad9\u7684\u8ddd\u79bb\u6700\u5c0f\uff0c\u51e0\u4e4e\u90fd\u5206\u5e03\u5728\u5e02\u4e2d\u5fc3\u3002"}}