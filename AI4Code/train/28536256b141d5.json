{"cell_type":{"606373b8":"code","49a11715":"code","fdbbda23":"code","19f48e31":"code","79a9646e":"code","9a654a3c":"code","6b404fa5":"code","48423ccc":"code","9c888172":"code","66d7a90f":"code","9a05736f":"code","ca0f5f89":"code","1cce1df8":"code","6acee47c":"code","d8a13125":"code","950d2ab7":"markdown","7c3951cd":"markdown","17f93e0a":"markdown","9324ad5a":"markdown","f45d0ce3":"markdown","313ec512":"markdown","a22c91b8":"markdown","8db9cd62":"markdown","ae5b755d":"markdown","5b78c793":"markdown","7e905974":"markdown","d7cb062f":"markdown","2c1f34ba":"markdown"},"source":{"606373b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49a11715":"#\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n#-------------------------------\ngames_path = '..\/input\/nfl-big-data-bowl-2022\/games.csv'\nplays_path = '..\/input\/nfl-big-data-bowl-2022\/plays.csv'\nplayers_path = '..\/input\/nfl-big-data-bowl-2022\/players.csv'\nPFFScoutingData_path = '..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv'\ntracking2018_path = '..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv'\ntracking2019_path = '..\/input\/nfl-big-data-bowl-2022\/tracking2019.csv'\ntracking2020_path = '..\/input\/nfl-big-data-bowl-2022\/tracking2020.csv'\n\ngames_data = pd.read_csv(games_path)\nplays_data = pd.read_csv(plays_path)\nplayers_data = pd.read_csv(players_path)\nPFFScoutingData_data = pd.read_csv(PFFScoutingData_path)\n#tracking2018_data = pd.read_csv(tracking2018_path)\n#tracking2019_data = pd.read_csv(tracking2019_path)\n#tracking2020_data = pd.read_csv(tracking2020_path)","fdbbda23":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0442\u043e \u0438\u0437 \u0441\u0435\u0431\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044e\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 NFL\n#\u0412 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043c\u044f\u0447\u043e\u043c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0432 plays_path \u0438 PFFScoutingData_path\n#-------------------------------\ndef describe_data(data, n = 10, d = False):\n    print(data.shape)\n    print(data.columns)\n    print()\n    if d == True:\n        print(data.describe())\n    print()\n    return data.head(n)","19f48e31":"describe_data(plays_data)","79a9646e":"describe_data(PFFScoutingData_data)","9a654a3c":"#\u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0444\u0438\u0447\u0438 \u0438\u0437 Plays\ncol_plays_use_cat = ['specialTeamsPlayType', 'specialTeamsResult']\ncol_plays_use_num = ['yardlineNumber', 'kickLength', 'kickReturnYardage', 'playResult', 'absoluteYardlineNumber']\n\n#\u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0444\u0438\u0447\u0438 \u0438\u0437 PFFScoutingData\ncol_PFF_use_cat = ['snapDetail', 'kickType', 'kickContactType']\ncol_PFF_use_num = ['operationTime', 'hangTime']","6b404fa5":"#\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 DF \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b\n#-------------------------------\ndef creater_df():\n    df1_temp = plays_data[['gameId', 'playId',] + col_plays_use_cat + col_plays_use_num].copy().set_index(['gameId', 'playId'])\n    df2_temp = PFFScoutingData_data[['gameId', 'playId',] + col_PFF_use_cat + col_PFF_use_num].copy().set_index(['gameId', 'playId'])\n    df_temp = df1_temp.join(df2_temp, lsuffix='_CAN', rsuffix='_UK')\n    return df_temp","48423ccc":"#\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043f\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434\n#-------------------------------\ndf = creater_df()\ndf_temp = pd.DataFrame(df.groupby(['specialTeamsPlayType', 'specialTeamsResult']).specialTeamsResult.count())\ndf_temp\n","9c888172":"#\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 DFs \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b. DF \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f Punt\n#-------------------------------\n\ndf = creater_df()\ndf_punt = df.loc[df['specialTeamsPlayType'].isin(['Punt'])]\n\n#\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445\ndef unique_incol(data):\n    for col in data.columns:\n        print(data[col].name)\n        print(data[col].count())\n        print(data[col].isnull().sum(axis = 0))\n        print(data[col].unique(), \"\\n\")\n\n#unique_incol(df_punt)\n#print(\"---------------------------------------\")\n\n#\u0412\u044b\u0431\u0440\u043e\u0441\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c (\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435)\ndf_punt = df_punt.dropna(subset=['kickType', 'kickContactType', 'snapDetail'])\n#kickReturnYardage \u0438\u043c\u0435\u0442 60% \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 NaN, \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u044d\u0442\u0430\u043f\u0435\ndf_punt.drop(columns = ['kickReturnYardage'], inplace=True)\n#\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f NaN \u0441\u0440\u0435\u0434\u043d\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c\ndf_punt['operationTime'] = round(df_punt['operationTime'].fillna(df_punt['operationTime'].mean()), 2)\ndf_punt['hangTime'] = round(df_punt['hangTime'].fillna(df_punt['hangTime'].mean()), 2)\n\nunique_incol(df_punt)\ndf_punt.index = df_punt.index.droplevel(0)\ndf_punt","66d7a90f":"#\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 \u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\n#-------------------------------\nfig = plt.figure(figsize=(18, 15))\ngs = fig.add_gridspec(3, 2)\n\nax = fig.add_subplot(gs[0, 0])\nsns.violinplot(data = df_punt, x='specialTeamsResult', y='yardlineNumber')\n\nax = fig.add_subplot(gs[0, 1])\nsns.violinplot(data = df_punt, x='specialTeamsResult', y='kickLength')\n\nax = fig.add_subplot(gs[1, 0])\nsns.violinplot(data = df_punt, x='specialTeamsResult', y='playResult')\n\nax = fig.add_subplot(gs[1, 1])\nsns.violinplot(data = df_punt, x='specialTeamsResult', y='absoluteYardlineNumber')\n\nax = fig.add_subplot(gs[2, 0])\nsns.violinplot(data = df_punt, x='specialTeamsResult', y='operationTime')\n\nax = fig.add_subplot(gs[2, 1])\nsns.violinplot(data = df_punt, x='specialTeamsResult', y='hangTime')\n\nfig.tight_layout()\n","9a05736f":"#\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0444\u0438\u0447\u0435\u0439\n#-------------------------------\n\n# 1. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438 \u043e \u0442\u043e\u043c \u043a\u0430\u043a \u043f\u0430\u043d\u0442 \u0447\u0442\u043e \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u0441 \u043f\u0430\u043d\u0442\u043e\u043c\ndf_temp = pd.DataFrame(df_punt.groupby(['specialTeamsResult','kickContactType']).kickContactType.count().unstack().reset_index())\n#df2.columns = df2.columns.droplevel(0)\n#df2.columns = df2.columns.map(''.join)\ndf_temp = df_temp.fillna(0)\nprint(df_temp, 5*'\\n')\n\n# 2. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438 \u043e \u0442\u043e\u043c \u0431\u044b\u043b\u0430 \u043b\u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0443 \u043f\u0430\u043d\u0442\u0430\ndf2_temp = pd.DataFrame(df_punt.groupby(['specialTeamsResult','snapDetail']).snapDetail.count().unstack().reset_index())\nprint(df2_temp, 5*'\\n')\n\n# 3.\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438 \u0442\u0438\u043f\u0430 \u043f\u0430\u043d\u0442\u0430\ndf3_temp = pd.DataFrame(df_punt.groupby(['specialTeamsResult','kickType']).kickType.count().unstack().reset_index())\ndf3_temp = df3_temp.fillna(0)\nprint(df3_temp)\n","ca0f5f89":"#\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\n#-------------------------------\n\nfrom sklearn.preprocessing import LabelEncoder\ndata2 = df_punt.copy()\nlabel_encoder = LabelEncoder()\n\ncolumns_LE = {\n    \"1\": 'kickContactType',\n    \"2\": 'snapDetail',\n    \"3\": 'kickType'}\n\nfor name, column in columns_LE.items():\n    print(data2[column].unique())\n    mapped_education = pd.Series(label_encoder.fit_transform(data2[column]))\n    data2[column] = label_encoder.fit_transform(data2[column])\n    print(dict(enumerate(label_encoder.classes_)))\n    print(data2[column].unique())\n\n#data2","1cce1df8":"#\u0412\u044b\u0431\u043e\u0440 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0432\u0441\u0435\u0445 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0444\u0438\u0447\u0435\u0439\n#-------------------------------\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\n\n\nmodels = {\n    \"XGBClassifier\": XGBClassifier(),\n    \"K-Nearest Neighbors\": KNeighborsClassifier(),  \n    \"Stochastic Gradient Descent Classifier\": SGDClassifier(),\n    \"Support Vector Classifier\": SVC(),\n    \"Linear Support Vector Classifier\": LinearSVC(),\n    \"Decision Tree Classifier\": DecisionTreeClassifier(),\n    \"Random Forest Classifer\": RandomForestClassifier(random_state = 5)         \n         }\n \ncols_to_use2 = ['yardlineNumber', 'kickLength', 'playResult', 'hangTime', 'snapDetail', 'kickType']\nX4 = data2[cols_to_use2]\ny4 = data2.specialTeamsResult\nX4_train, X4_valid, y4_train, y4_valid = train_test_split(X4, y4, test_size=0.4, random_state = 11)\n\nfor name, model in models.items():\n    model.fit(X4_train, y4_train)\n    print(name + \" trained\")\n    \nprint(\"-------------------------\", '\\n')\n\nfor name, model in models.items():\n    print(name)\n    predictions4 = model.predict(X4_valid)\n    print(\"Accuracy: %.2f%%\" % (accuracy_score(y4_valid, predictions4, normalize=True) * 100.0))","6acee47c":"#\u041f\u043e\u0434\u0431\u043e\u0440 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 XGBClassifier\n#-------------------------------\n\nfrom sklearn.model_selection import train_test_split\nX5 = data2[cols_to_use2]\ny5 = data2.specialTeamsResult\nX5_train, X5_valid, y5_train, y5_valid = train_test_split(X5, y5, test_size=0.4, random_state = 11)\n\nfrom xgboost import XGBClassifier\nmy_model5 = XGBClassifier(booster='gbtree', max_depth=7, eta=0.07, gamma=0.01, subsample=0.8, colsample_bytree = 1, min_child_weight=2)\nmy_model5.fit(X5_train, y5_train)\n\npredictions5 = my_model5.predict(X5_valid)\n\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y5_valid, predictions5, normalize=True)\nprint(\"Primary Accuracy: 70.57% (with standart parameters)\")\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n\nprint('\\n')\nprint(my_model5)","d8a13125":"#\u041f\u043e\u0434\u0431\u043e\u0440 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 RandomForestClassifier\n#-------------------------------\n\nfrom sklearn.model_selection import train_test_split\nX6 = data2[cols_to_use2]\ny6 = data2.specialTeamsResult\nX6_train, X6_valid, y6_train, y6_valid = train_test_split(X6, y6, test_size=0.4, random_state = 11)\n\nfrom sklearn.ensemble import RandomForestClassifier\nmy_model6 = RandomForestClassifier(max_depth=15, n_estimators=500, max_features = 'auto', random_state = 10)\nmy_model6.fit(X6_train, y6_train)\n\npredictions6 = my_model6.predict(X6_valid)\n\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y6_valid, predictions6, normalize=True)\nprint(\"Primary Accuracy: 69.63% (with standart parameters)\")\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n\nprint('\\n')\nprint(my_model6)","950d2ab7":"# **NFL Big Data Bowl 2022**\n\n#### Punt (\u043f\u0430\u043d\u0442) \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u0432\u0430\u0436\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439. \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044e \u043e\u0447\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u043d\u0442\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0442\u0440\u0435\u043d\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u0430. \u0414\u0430\u043d\u043d\u044b\u0439 \u0431\u043b\u043e\u043a\u043d\u043e\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u043f\u044b\u0442\u043a\u0443 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0433\u043e \u043a\u0430\u043a\u0438\u043c \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u043d\u0442\u0430. ","7c3951cd":"### \u041c\u043e\u0434\u0435\u043b\u044c XGBClassifier \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u0434\u043e\u0441\u0442\u0438\u0433\u043b\u0430 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0432 71,97%.  \n### \u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0442\u0440\u0435\u043a\u0438\u043d\u0433\u0430 \u0438\u0433\u0440\u043e\u043a\u043e\u0432. \u0421\u043e\u0447\u0435\u0442\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u043c\u044f\u0447\u0430 \u0438 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u043d\u0430 \u043f\u043e\u043b\u0435 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u0440\u0430 \u043f\u0430\u043d\u0442\u0435\u0440\u0430 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043f\u043e\u0432\u044b\u0441\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0435\u0451 \u043f\u0440\u0435\u043c\u0438\u043d\u0438\u043c\u043e\u0441\u0442\u044c \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u0433\u0440\u0435 \u043d\u0430 \u043f\u043e\u043b\u0435","17f93e0a":"<center>\n<img src=\"https:\/\/i.gifer.com\/8Zr9.gif\" alt=\"drawing\"\/>\n<img src=\"https:\/\/static.www.nfl.com\/image\/upload\/v1554321393\/league\/nvfr7ogywskqrfaiu38m.svg\" alt=\"drawing\" width=\"320\"\/>\n<\/center>","9324ad5a":"#### \u041f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u044c\u0441\u044f \u043a \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u043b\u0430\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0441\u0445\u043e\u0434\u0430 \u0435\u0441\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a, \u0438\u0445 \u0441\u043e\u0447\u0435\u0442\u0430\u043d\u0438\u0435 \u0438 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043c\u0430\u0442\u0447\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0438\u0441\u0445\u043e\u0434\u0430 \u0440\u043e\u0437\u044b\u0433\u0440\u044b\u0448\u0430 \u043f\u0430\u043d\u0442\u0430.","f45d0ce3":"#### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0444\u0438\u0447\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0441\u0445\u043e\u0434\u0430 \u043f\u0430\u043d\u0442\u0430. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0441\u043a\u0440\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\u0435\u0439, \u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0433\u0440\u0443\u043f\u0438\u0440\u0443\u0435\u043c \u0432 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0441\u0445\u043e\u0434\u0430.\n#### \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442 \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0441\u0445\u043e\u0434 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0444\u0438\u0447\u0435\u0439 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u0438 \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u043c\u044b\u0441\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0438 \u0444\u0438\u0447\u0438. ","313ec512":"### \u0418\u0442\u043e\u0433","a22c91b8":"#### \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0446\u0435\u043b\u044c \u043c\u043e\u0434\u0435\u043b\u0438. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. \u0411\u0443\u0434\u0443\u0449\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0437\u0430\u0434\u0443\u043c\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0440\u043e\u0437\u044b\u0433\u0440\u044b\u0448\u0430 \u043f\u0430\u043d\u0442\u0430. \u0414\u043b\u044f \u043d\u0435\u0433\u043e \u0435\u0441\u0442\u044c \u0432\u043e\u0441\u0435\u043c\u044c \u0438\u0441\u0445\u043e\u0434\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u043b\u0441\u044f \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e \u0440\u0430\u0437\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0440\u0430\u0437 \u0437\u0430 \u0432\u0441\u0435 \u0438\u0433\u0440\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445. \u041c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u0441\u043c\u043e\u0436\u0435\u0442 \u0438\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0442\u044c, \u0430 \u0437\u043d\u0430\u0447\u0438\u0442 \u0432\u044b\u0431\u043e\u0440 \u0446\u0435\u043b\u044c\u044e \u043c\u043e\u0434\u0435\u043b\u0438 specialTeamsResult \u043e\u043f\u0440\u0430\u0432\u0434\u0430\u043d. ","8db9cd62":"#### \u041c\u043e\u0434\u0435\u043b\u0438 XGBClassifier \u0438 RandomForestClassifier \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0434\u043b\u044f \u043d\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0435 \u0435\u0449\u0451 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0432\u044b\u0441\u0438\u0442\u044c \u0438\u0445 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c","ae5b755d":"## \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u044b\u0431\u043e\u0440 \u0446\u0435\u043b\u0438 \u0438 \u0444\u0438\u0447\u0435\u0439 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438","5b78c793":"## \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445  \n","7e905974":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438  ","d7cb062f":"#### \u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0441\u043a\u0440\u0438\u043f\u0438\u0447\u043d\u044b\u0445 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430 operationTime \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u0430 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 Punt, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430 \u0435\u0451 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c.  \n#### \u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430 kickContactType \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u0443\u0442\u0435\u0447\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0438\u043f\u043e\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u0445\u043e\u0434\u043e\u0432 \u043f\u0430\u043d\u0442\u0430, \u0430 \u0446\u0435\u043b\u044c\u044e \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u044b\u043b\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0441\u0430\u043c\u0438\u0445 \u0438\u0441\u0445\u043e\u0434\u043e\u0432. \u0417\u0430\u0431\u0435\u0433\u0430\u044f \u0432\u043f\u0435\u0440\u0435\u0434, \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 kickContactType \u043f\u043e\u0432\u044b\u0448\u0430\u043b\u043e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0441\u0440\u0430\u0437\u0443 \u043d\u0430 15%, \u0447\u0442\u043e \u0438 \u043f\u043e\u0434\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0443\u0442\u0435\u0447\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.","2c1f34ba":"#### \u0411\u0443\u0434\u0435\u043c \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0444\u0438\u0447\u0438, \u0447\u0442\u043e \u0438\u043c\u0435\u044e\u0442 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043a \u043c\u044f\u0447\u0443 (\u0435\u0433\u043e \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0435\u0433\u043e \u043f\u043d\u0443\u043b\u0438 \u0438 \u0442\u043f.). \u0412\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435, \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0438\u0437 \u0434\u0440\u0443\u0433\u0438\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c.  \n> **specialTeamsPlayType**: Formation of play: Extra Point, Field Goal, Kickoff or Punt (text)  \n> **specialTeamsResult**: Special Teams outcome of play dependent on play type: Blocked Kick Attempt, Blocked Punt, Downed, Fair Catch, Kick Attempt Good, Kick Attempt No Good, Kickoff Team Recovery, Muffed, Non-Special Teams Result, Out of Bounds, Return or Touchback (text)  \n> **yardlineNumber**: Yard line at line-of-scrimmage (numeric)  \n> **kickLength**: Kick length in air of kickoff, field goal or punt (numeric)  \n> **kickReturnYardage**: Yards gained by return team if there was a return on a kickoff or punt (numeric)  \n> **playResult**: Net yards gained by the kicking team, including penalty yardage (numeric)  \n> **absoluteYardlineNumber**: Location of ball downfield in tracking data coordinates (numeric)  \n> **snapDetail**: On Punts, whether the snap was on target and if not, provides detail (H: High, L: Low, <: Left, >: Right, OK: Accurate Snap, text)  \n> **kickType**: Kickoff or Punt Type (text). Possible values for punt plays:   \n> > N: Normal - standard punt style  \n> > R: Rugby style punt  \n> > A: Nose down or Aussie-style punts  \n\n> **kickContactType**: Detail on how a punt was fielded, or what happened when it wasn't fielded (text). Possible values:  \n> > BB: Bounced Backwards  \n> > BC: Bobbled Catch from Air  \n> > BF: Bounced Forwards  \n> > BOG: Bobbled on Ground  \n> > CC: Clean Catch from Air  \n> > CFFG: Clean Field From Ground  \n> > DEZ: Direct to Endzone  \n> > ICC: Incidental Coverage Team Contact  \n> > KTB: Kick Team Knocked Back  \n> > KTC: Kick Team Catch  \n> > KTF: Kick Team Knocked Forward  \n> > MBC: Muffed by Contact with Non-Designated Returner  \n> > MBDR: Muffed by Designated Returner  \n> > OOB: Directly Out Of Bounds  \n\n> **operationTime**: Timing from snap to kick on punt plays in seconds: (numeric)  \n> **hangTime**: Hangtime of player's punt or kickoff attempt in seconds. Timing is taken from impact with foot to impact with the ground or a player. (numeric)\n\n"}}