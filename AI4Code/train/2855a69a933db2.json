{"cell_type":{"7a9c0356":"code","7e09be84":"code","948ea3c5":"code","d489e640":"code","402b8272":"code","c5173dbe":"code","6f008955":"code","b76e524a":"code","42006c2d":"code","3dc2d847":"code","34059704":"code","6c8cf5c5":"code","2bb955fc":"code","5d83bfaa":"code","ef2663c1":"code","57f921ed":"code","b9ad117c":"code","cbf57db6":"code","67611370":"code","cdfd86d0":"code","48bd662b":"code","d2fb5fc3":"code","5ab44370":"code","042e6eb1":"code","f2997b5e":"code","1ff15b1b":"code","2057ea8d":"code","373c48ab":"code","c77e26be":"code","e57d9831":"code","bee5e570":"code","ba27aead":"code","97326d06":"code","b6fb7819":"code","ca14fd52":"code","61caa71d":"code","b954ce6b":"code","449f6f70":"code","dbe44863":"code","ff6762bb":"code","d9fb6836":"code","8ea89265":"code","1cd25855":"code","5d618e1a":"code","b9d4805a":"code","922903fe":"code","e9dfd7e0":"code","fd14a5c9":"code","9949493b":"code","b6e7942d":"code","88bba117":"code","989af220":"code","1a8d4775":"code","43bafdd2":"markdown","cb64763f":"markdown","6d422c50":"markdown","44ef0247":"markdown","d2c81e58":"markdown","4337d997":"markdown","dc2a1246":"markdown","0f329fa4":"markdown","f13397a6":"markdown","aae8f228":"markdown","8d707f56":"markdown","b41b5ad9":"markdown","ece0425f":"markdown","bfd75b3f":"markdown","b6560c84":"markdown","6a03f9c6":"markdown","60291551":"markdown","9cf2d912":"markdown","c812a6f7":"markdown","3ad8303d":"markdown","b4824542":"markdown","3f0a328d":"markdown","0c19b760":"markdown","b890dd1c":"markdown","efeb5aa3":"markdown","32683c1a":"markdown","6cbbd72b":"markdown","4fde99a5":"markdown","9ff414fc":"markdown","8afcd693":"markdown","00f76215":"markdown","96abf2c8":"markdown","b975db28":"markdown","4c426360":"markdown","6a3bf390":"markdown","f5b198ba":"markdown","18cf4136":"markdown","d06bb646":"markdown","4a576e25":"markdown","4511eaaf":"markdown","bcad43e4":"markdown","5e31b5a6":"markdown","7f61fe23":"markdown","2740b367":"markdown","57744bfd":"markdown","df0ecbdc":"markdown","d4ed897f":"markdown","34241a0d":"markdown","7c014014":"markdown","6fd62c35":"markdown","04e48ced":"markdown","3e553cf2":"markdown"},"source":{"7a9c0356":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","7e09be84":"pokemons=pd.read_csv('..\/input\/pokemon\/Pokemon.csv')","948ea3c5":"pokemons.sample(7)","d489e640":"pokemons.columns","402b8272":"pokemons.info()","c5173dbe":"del pokemons['Type 2']\npokemons.rename(columns={'Type 1':'Type'},inplace=True)","6f008955":"pokemons.head()","b76e524a":"pokemons.describe()","42006c2d":"len(pokemons.Name.unique())\n# We got 800 DIFFERENT pokemons.","3dc2d847":"pokemons[pokemons.duplicated()]\n#We don't have duplicated values in our data frame.","34059704":"len(pokemons['Type'].unique())\n#There are 18 different types  of pokemons","6c8cf5c5":"pokemons['Generation'].value_counts()","2bb955fc":"sns.countplot(x='Generation',data=pokemons,palette='nipy_spectral')\nplt.title('Number of pokemons grouped by generation')","5d83bfaa":"pokemons.Type.value_counts()","ef2663c1":"plt.figure(figsize=(15,5))\nsns.countplot(pokemons.Type,palette='twilight')","57f921ed":"sns.set_style('darkgrid')\nplt.figure(figsize=(10,6))\nsns.boxplot(data=pokemons.drop(['#','Total','Generation','Legendary'],axis=1),fliersize=3,palette='seismic')\nplt.title('Boxplots for stats')","b9ad117c":"plt.figure(figsize=(10,6))\nsns.violinplot(data=pokemons.drop(['#','Total','Generation','Legendary'],axis=1),palette='rocket')\nplt.title('Violinplots for stats')","cbf57db6":"pokemons.groupby('Type').sum()","67611370":"pokemons.groupby('Type').sum().HP\n\n# In this series the types are alphabetically ordered.","cdfd86d0":"pokemons['Type'].unique()","48bd662b":"list_types=pokemons['Type'].unique().tolist() # Convert the array of types into a list\nlist_types.sort() # Sorting the list of strings alphabetically\nlist_types","d2fb5fc3":"plt.style.use('ggplot')\nplt.style.use('seaborn-darkgrid')\n\nstats=pokemons[['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed']]\nk=1\nm=0\npalette=['magma','ocean','vlag','copper','mako','winter']\nplt.figure(figsize=(17,17))\nfor i in stats:\n    plt.subplot(3,2,k)\n    k=k+1\n    sns.barplot(x=pokemons.groupby('Type').sum()[i],y=list_types,palette=palette[m])\n    m=m+1\n    plt.title(str('Total of '+i))","5ab44370":"k=1;\nm=0;\nplt.figure(figsize=(15,30))\nfor i in stats:\n    plt.subplot(6,1,k);\n    k=k+1;\n    sns.stripplot(x=pokemons.Type,y=pokemons[i],palette='Dark2');\n    plt.title(str('Total of ')+i + str(' for each type'))","042e6eb1":"k=1;\nplt.figure(figsize=(17,22))\nfor i in list_types:\n    plt.subplot(6,3,k);\n    k=k+1;\n    sns.barplot(x=pokemons[pokemons.Type==i].sum().drop(['#','Name','Type','Generation','Legendary','Total']).values,\n                y=pokemons[pokemons.Type==i].sum().drop(['#','Name','Type','Generation','Legendary','Total']).index,\n                palette='inferno');\n    plt.title(i)\n    plt.xlim(0,8500)\n        ","f2997b5e":"pok_melt=pd.melt(pokemons,id_vars=['Name','Type','Legendary'],value_vars=['HP','Defense','Attack','Sp. Atk','Sp. Def','Speed'])\npok_melt.head()","1ff15b1b":"plt.figure(figsize=(17,22))\nk=1\nfor i in list_types:\n    plt.subplot(6,3,k)\n    k=k+1\n    sns.swarmplot(x=pok_melt.variable,y=pok_melt[pok_melt.Type==i].value,palette='gist_stern')\n    plt.title(i)\n    plt.xlabel('')","2057ea8d":"df=pd.DataFrame()\nfor i in stats:\n    df[i]=pokemons.groupby('Type').describe()[i]['mean']","373c48ab":"df","c77e26be":"plt.figure(figsize=(16,20))\nk=1\nm=0\nfor i in stats:\n    plt.subplot(3,2,k)\n    k=k+1\n    sns.barplot(x=df[i],y=df.index,palette=palette[m])\n    m=m+1\n    plt.title(str('Mean of total ')+ i +str(' for each type'))\n    plt.xlabel(i)","e57d9831":"k=1;\nplt.figure(figsize=(16,25))\nfor i in list_types:\n    plt.subplot(6,3,k);\n    k=k+1;\n    sns.barplot(x=df.loc[i,:].values,y=df.loc[i,:].index, palette='Paired');\n    plt.title(i)\n    plt.xlim(0,130)\n    plt.ylabel('Mean')","bee5e570":"plt.figure(figsize=(15,5))\nsns.barplot(x=pokemons.groupby('Type').sum().Total.sort_values(ascending=False).index\n            ,y=pokemons.groupby('Type').sum().Total.sort_values(ascending=False),palette='cool')\nplt.title('Total of all stats for each type of pokemon')","ba27aead":"plt.figure(figsize=(15,5))\nsns.barplot(x=pokemons.groupby('Type').mean().Total.sort_values(ascending=False).index,\n            y=pokemons.groupby('Type').mean().Total.sort_values(ascending=False).values,palette='twilight_shifted')\nplt.title('Mean of the total of all stats for each type of pokemon')","97326d06":"best_stats=[]\nfor i in list_types:\n    best_stats.append(df.loc[i,:].sort_values(ascending=False).index[0])","b6fb7819":"m=0\nfor k in best_stats:\n    print('Best stat of type ',list_types[m],' is ',k)\n    m=m+1","ca14fd52":"pokemons[pokemons.Name.str.contains('Mega')]","61caa71d":"mega_pokemons = ['Mega'+poke.split('Mega')[1] for poke in pokemons[pokemons.Name.str.contains('Mega')].Name]\nmega_pokemons","b954ce6b":"pokemons=pokemons.replace(to_replace=pokemons[pokemons.Name.str.contains('Mega')].Name.values,value=mega_pokemons)","449f6f70":"for n in list_types:\n    print(str('TYPE ')+n.upper())\n    for i in stats:\n        name=pokemons[(pokemons.Type==n)].sort_values(by=i,ascending=False).Name.values[0]\n        print(str('Best ')+i+(' pokemon is ')+name)\n    print('*****************************************')\n","dbe44863":"sns.countplot(x='Generation',data=pokemons,palette='seismic')\nplt.title('Number of pokemons grouped by generation')\nplt.ylabel('Number of pokemons')","ff6762bb":"pokemons.groupby('Generation').sum()","d9fb6836":"plt.figure(figsize=(15,15))\nk=1\nfor i in stats:\n    plt.subplot(3,2,k)\n    x=sns.swarmplot(x='Generation',y=i,data=pokemons,palette='plasma')\n    k=k+1\n    plt.title(i+str(' for each generation'))\n    ","8ea89265":"k=1\nplt.figure(figsize=(17,15))\nfor i in stats:\n    plt.subplot(3,2,k)\n    sns.boxplot(y=pokemons[i],x=pokemons.Generation)\n    k=k+1\n    plt.title(i+str(' for each generation'))","1cd25855":"from bokeh.io import output_notebook, show, output_file\nfrom bokeh.plotting import figure\nfrom bokeh.layouts import row, gridplot\noutput_notebook()\n\np1=figure(plot_width=400,plot_height=200,title='HP for each generation')\np1.circle(x=[1,2,3,4,5,6],y=pokemons.groupby('Generation').sum().HP,size=3,color='red')\np1.line(x=[1,2,3,4,5,6],y=pokemons.groupby('Generation').sum().HP,line_width=1,color='red')\n\np2=figure(plot_width=400,plot_height=200,title='Attack for each generation')\np2.circle(x=[1,2,3,4,5,6],y=pokemons.groupby('Generation').sum().Attack,size=3,color='red')\np2.line(x=[1,2,3,4,5,6],y=pokemons.groupby('Generation').sum().Attack,line_width=1,color='red')\n    \np3=figure(plot_width=400,plot_height=200,title='Defense for each generation')\np3.circle(x=[1,2,3,4,5,6],y=pokemons.groupby('Generation').sum().Defense,size=3,color='red')\np3.line(x=[1,2,3,4,5,6],y=pokemons.groupby('Generation').sum().Defense,line_width=1,color='red')\n\np4=figure(plot_width=400,plot_height=200,title='Sp. Atk for each generation')\np4.circle(x=[1,2,3,4,5,6],y=pokemons.groupby('Generation').sum()['Sp. Atk'],size=3,color='red')\np4.line(x=[1,2,3,4,5,6],y=pokemons.groupby('Generation').sum()['Sp. Atk'],line_width=1,color='red')\n\np5=figure(plot_width=400,plot_height=200,title='Sp. Def for each generation')\np5.circle(x=[1,2,3,4,5,6],y=pokemons.groupby('Generation').sum()['Sp. Def'],size=3,color='red')\np5.line(x=[1,2,3,4,5,6],y=pokemons.groupby('Generation').sum()['Sp. Def'],line_width=1,color='red')\n\np6=figure(plot_width=400,plot_height=200,title='Speed for each generation')\np6.circle(x=[1,2,3,4,5,6],y=pokemons.groupby('Generation').sum().Speed,size=3,color='red')\np6.line(x=[1,2,3,4,5,6],y=pokemons.groupby('Generation').sum().Speed,line_width=1,color='red')\n\ngrid=gridplot([p1,p2,p3,p4,p5,p6],ncols=2)\nshow(grid)","5d618e1a":"len(pokemons[pokemons.Legendary==True])\n# There are 65 Legendary pokemons\n# 8.125% pokemons are Legendary","b9d4805a":"pokemons.groupby('Generation').sum().Legendary\n# Generations 3 ,5 & 4 have the most legendary pokemons","922903fe":"sns.barplot(x=pokemons.groupby('Generation').sum().Legendary.index,\n            y=pokemons.groupby('Generation').sum().Legendary.values,palette='CMRmap')","e9dfd7e0":"pokemons.groupby('Type').sum().Legendary.sort_values(ascending=False)","fd14a5c9":"plt.figure(figsize=(15,10))\nsns.barplot(x=pokemons.groupby('Type').sum().Legendary.sort_values(ascending=False).index,\n              y=pokemons.groupby('Type').sum().Legendary.sort_values(ascending=False).values,palette='Paired')","9949493b":"k=1;\nm=0;\nplt.figure(figsize=(15,30))\nfor i in stats:\n    plt.subplot(6,1,k);\n    k=k+1;\n    sns.swarmplot(x='Type',y=i,palette='Dark2',hue='Legendary',data=pokemons);\n    plt.title(str('Total of ')+i + str(' for each type'))","b6e7942d":"plt.figure(figsize=(17,22))\nk=1\nfor i in list_types:\n    plt.subplot(6,3,k)\n    k=k+1\n    sns.swarmplot(x=pok_melt.variable,y=pok_melt[pok_melt.Type==i].value,palette='Dark2',\n                  hue=pok_melt[pok_melt.Type==i].Legendary)\n    plt.title(i)\n    plt.xlabel('')\n    plt.legend(bbox_to_anchor=(0, 1.02, 1, 0.102), loc='lower left',ncol=2, mode=\"expand\", borderaxespad=0.)\n   ","88bba117":"legend=pokemons[pokemons.Legendary==True]\nfor i in stats:\n    print('Number of legendary pokemons with ',i, ' higher than the average:',\n          len(legend[legend[i]>pokemons[i].mean()]),'\\nPercentage:', round(len(legend[legend[i]>pokemons[i].mean()])\/65*100,2),\n           '\\n**************')","989af220":"plt.figure(figsize=(15,10))\nsns.heatmap(pokemons.drop(['#'],axis=1).corr(),annot=True,cmap=\"YlGnBu\")","1a8d4775":"sns.pairplot(pokemons.drop(['#','Legendary','Generation'],axis=1))","43bafdd2":"Plotting the total of stats for each type of pokemon:","cb64763f":"**So that's it. Hope you enjoyed it and if you have any question\/ improvements don't be shy!**","6d422c50":"How many legendary pokemons are for each type?","44ef0247":"# 1. Importing the libraries","d2c81e58":"Let's see some random observations from our dataset.","4337d997":"Let's answer to some questions:","dc2a1246":"At one point I observed that pokemon's names which contains 'Mega' have the next word doubled. ","0f329fa4":"Checking the distribution of stats with boxplot & violinplot:","f13397a6":"Let's fix this:","aae8f228":"![](https:\/\/cdn.pastemagazine.com\/www\/articles\/Pokemon%20Header%20Best%20Of.jpg)","8d707f56":"We have some outliers for each stat.","b41b5ad9":"How many pokemons are in each generation?","ece0425f":"Firstly, let's see the mean of stats grouped by popkemon's type.","bfd75b3f":"We can observe that Normal, Bug and Water pokemons have more observations than the rest. ","b6560c84":"Let's see some statistics.","6a03f9c6":"3 top types pokemons based on the mean of the Total:\n1. Dragon\n2. Steel\n3. Flying","60291551":"# 2. Importing the data","9cf2d912":"Let's compare the initial total stats and then the mean of total stats.","c812a6f7":"Let's see the corelations between values.","3ad8303d":"* We got 800 observations \n* Column 'Type 2' is almost half filled with NaN values so I will consider Type 1 principal Type of the pokemons.","b4824542":"I made a dataframe with all the means grouped by pokemon's type.","3f0a328d":"How are the stats of legendary pokemons compared to the others?","0c19b760":"Again the swarmplots!","b890dd1c":"These results strengthen the swarmplots. Indeed, most of legendary pokemons are stronger.","efeb5aa3":"*Conclusion*: plotting the mean of the values instead of the actual values makes a big difference.","32683c1a":"**BUT** what if we calculate the mean for each stat and we plot it? In this case the small number of some pokemons of different types will not affect the analyse.","6cbbd72b":"Let's visualize the pokemons grouped by type.","4fde99a5":"So there are only meidum correlation, which is not very helpfull.","9ff414fc":"3 top types pokemons based on the intital Total :\n1. Water\n2. Normal\n3. Grass","8afcd693":"How many pokemons are for each type?","00f76215":"Plotting the sum of stats for each generation:","96abf2c8":"The stats have a similar distribution.","b975db28":"Hello Kaggle! Due the fact that I discovered Fire Red version some years ago and I spent a lot of hours enjoying it, I thought that analysing a dataset about 800 pokemons will be interesting and fun (the cartoons are also awesome). Here we go!","4c426360":"*NOTE: Because the number of pokemons of types Water and Normal is high compared to the rest, the respective pokemons will always have higher total stats ! *","6a3bf390":"The columns are:\n1. #= The id of the pokemon.\n2. Name\n3. Type 1 = Types refer to different elemental properties associated with both Pok\u00e9mon and their moves.\n4. Type 2 = Pok\u00e9mon themselves can have up to two types, making them Dual-Type Pok\u00e9mon; the moves can be only one type.\n5. Total = Represents the sum of all stats of the pokemon, giving a sense of how strong the pokemon is.\n6. HP = (hit points) is related to how much damage a Pokemon can sustain before fainting.\n7. Attack = The strength of a Pok\u00e9mon's physical attacks.\n8. Defense = The Pok\u00e9mon's resistance against physical attacks.\n9. Sp. Atk = Special Attack, the power of a Pok\u00e9mon's special attacks.\n10. Sp. Def = Special Defense, the Pok\u00e9mon's resilience to special attacks.\n11. Speed = The pokemon with a higher speed attacks first.\n12. Generation = Refers to the Pok\u00e9mon game series.\n13. Legendary = Legendary pokemons are extremely rare and powerful. In our dataset Legendary is boolean => says if the pokemon is legendary or not. ","f5b198ba":"* The majority of big or medium correlations are between Total and the other values of stats, which is completely logical. \n* There is no semnificant correlation between values.","18cf4136":"I am going to plot again the numbers of pokemons for each generation.","d06bb646":"Most of the legendary pokemons are very powerful compared to the other non-legendary pokemons.","4a576e25":"Let's see how many legendary pokemon have higher stats than the average stats of other non-legendary pokemon. (*and percentage *)","4511eaaf":"Which is the best pokemon for each type? (according to each stat)","bcad43e4":"So there are no legendary Fighting, Poison or Bug pokemons. The most legendary pokemons are Pshychic & Dragon","5e31b5a6":"Boxplots & Bokeh plotting:","7f61fe23":"Now the legendary pokemons:","2740b367":"Time for some swarmplots!","57744bfd":"There's no surprise that the barplots look similar since the stats have similar distributions.\n","df0ecbdc":"How many legendary pokemons are in total?","d4ed897f":"What about the features legendary and generation? I didn't pay attention to these until now.","34241a0d":"The statistics for stats are similar, so they have similar distributions.\n","7c014014":"1.What's the best stat for each type? (What is the advantage of each type from the 18 types? ; *based on the dataframe with means of the sum of stats*)","6fd62c35":"I need to extract the types of pokemons and order them alphabetically.","04e48ced":"# 3. EDA on pokemons","3e553cf2":"Now let's draw plots for each type separately."}}