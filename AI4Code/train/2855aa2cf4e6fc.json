{"cell_type":{"f1912ed9":"code","bbbfe352":"code","2b4a394e":"code","6c3f88c8":"code","bd08f186":"code","35f1f119":"code","bb2cee70":"code","8a00299a":"code","1348d264":"markdown","839044a0":"markdown","ec1e0ed9":"markdown","70620697":"markdown","3fe5fb34":"markdown","69b566be":"markdown","01b85d94":"markdown"},"source":{"f1912ed9":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport os\nimport ast\nimport cv2\n\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [16, 10]\nplt.rcParams['font.size'] = 14\n\nfrom tensorflow.keras.applications.resnet50 import preprocess_input","bbbfe352":"BASE_SIZE = 256\n\nimg_size = 64\nbatchsize = 128\nline_width = 7","2b4a394e":"colors = [(255, 0, 0) , (255, 255, 0),  (128, 255, 0),  (0, 255, 0), (0, 255, 128), (0, 255, 255), \n          (0, 128, 255), (0, 0, 255), (128, 0, 255), (255, 0, 255)]","6c3f88c8":"def draw_cv2(raw_strokes, size=256, lw=7, time_color=True):\n    img = np.zeros((BASE_SIZE, BASE_SIZE, 3), np.uint8)\n    for t, stroke in enumerate(raw_strokes):\n        for i in range(len(stroke[0]) - 1):\n            color = colors[min(t, len(colors)-1)]\n            _ = cv2.line(img, (stroke[0][i], stroke[1][i]),\n                         (stroke[0][i + 1], stroke[1][i + 1]), color, lw, lineType=cv2.LINE_AA)\n    if size != BASE_SIZE:\n        return cv2.resize(img, (size, size))\n    else:\n        return img","bd08f186":"def test_generator(img_size, batchsize, lw=6):\n    while True:\n        for df in pd.read_csv('..\/input\/test_simplified.csv', chunksize=batchsize):\n            df['drawing'] = df['drawing'].apply(ast.literal_eval)\n            x = np.zeros((len(df), img_size, img_size, 3))\n            for i, raw_strokes in enumerate(df.drawing.values):\n                x[i, :, :, :] = draw_cv2(raw_strokes, size=img_size, lw=lw)\n            yield x, preprocess_input(x).astype(np.float32)","35f1f119":"test_datagen = test_generator(img_size, batchsize, line_width)","bb2cee70":"x, xi = next(test_datagen)\nn = 8\nfig, axs = plt.subplots(nrows=n, ncols=n, sharex=True, sharey=True, figsize=(12, 12))\nfor i in range(n**2):\n    ax = axs[i \/\/ n, i % n]\n    ax.imshow(x[i])\n    ax.axis('off')\nplt.tight_layout()\nfig.savefig('gs.png', dpi=300)\nplt.show();","8a00299a":"fig, axs = plt.subplots(nrows=n, ncols=n, sharex=True, sharey=True, figsize=(12, 12))\nfor i in range(n**2):\n    ax = axs[i \/\/ n, i % n]\n    ax.imshow(xi[i]) # use ax.imshow(xi[i] * 255)\n    ax.axis('off')\nplt.tight_layout()\nfig.savefig('gs.png', dpi=300)\nplt.show();","1348d264":"Thanks.\n\nFurther Experimentation:\n+ What should be the colour palette which gives best result ?","839044a0":"# Convert Strokes to RGB Images\n\nThis kernel explains how to pre-process the image to create rbg images, for using in the traditional pretrained networks. \nWe use the opencv package in python to achieve this. \n\nreference: [\ud83d\udc18Greyscale MobileNet [LB=0.892]](https:\/\/www.kaggle.com\/gaborfodor\/greyscale-mobilenet-lb-0-892)","ec1e0ed9":"## Normal Images ","70620697":"## Normalized Images for Resnet","3fe5fb34":"## Colors Input\n+ I have used a cyclic progression of colors. We can use different palettes available in [seaborn](https:\/\/seaborn.pydata.org\/tutorial\/color_palettes.html) and [Matplotlib](https:\/\/matplotlib.org\/users\/colormaps.html)\n    + Caution : Do not use palettes with huge variation since it might end up as noise to the model. ","69b566be":"## Strokes to RGB function","01b85d94":"## Test Image Generator "}}