{"cell_type":{"7358ff4d":"code","9919425b":"code","e086cc55":"code","6c3ad0ae":"code","3c355214":"code","51a4a09f":"code","3e16768e":"code","85a7dc5f":"code","1ebec76f":"code","bf31caae":"code","9e0191e7":"code","5ba92cd0":"code","5ec94bec":"code","848a5e69":"code","178ed7a9":"code","d4d8cb08":"code","e66391e3":"code","07b3a402":"markdown","9678bac6":"markdown","6ab0098b":"markdown","6b60811c":"markdown","e75a3afa":"markdown","80e3a88f":"markdown"},"source":{"7358ff4d":"import os\nimport numpy as np\nimport pandas as pd","9919425b":"leafType = os.listdir(\"..\/input\/corndiseasedetectionsplit\/corn disease detection\/train\") # list of all the leaf types in the dataset\nmain_dir = \"..\/input\/corndiseasedetectionsplit\/corn disease detection\" ## main directory\ntrain_dir = \"..\/input\/corndiseasedetectionsplit\/corn disease detection\/train\" ## train directory\ntest_dir = \"..\/input\/corndiseasedetectionsplit\/corn disease detection\/test\" ## test directory\nprint('base_dir:', (os.listdir(main_dir )))\nprint('total nubmer of classes:', len(os.listdir(train_dir )))","e086cc55":"# number of samples for each class i.e images in each directory\nprint('total nubmer of images of each class in train set')\nfor i in leafType:\n    temp_dir = os.path.join(train_dir, i)\n    print(i[0:50],\":  \", len( os.listdir(temp_dir)))\n    \n    \nprint('\\ntotal nubmer of images of each class in test set')    \nfor i in leafType:\n    temp_dir = os.path.join(test_dir, i)\n    print(i[0:50],\":  \", len( os.listdir(temp_dir)))","6c3ad0ae":"import matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport random\nfrom PIL import Image \nfrom skimage.io import imread","3c355214":"# randomly plotting images from all categories from training set\nimages = []\nfor folder in os.listdir(train_dir):\n    for image in os.listdir(train_dir + '\/' + folder):\n        images.append(os.path.join(train_dir, folder, image))\n\nplt.figure(1, figsize=(12, 12))\nn = 0\nfor i in range(16):\n    n += 1\n    random_img = random.choice(images)\n    imgs = imread(random_img)\n    sp = plt.subplot(4, 4, n)\n    sp.axis('off')# Don't show axes (or gridlines)\n    plt.imshow(imgs)\nplt.show()","51a4a09f":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,\n                             rotation_range=40,\n                             width_shift_range=0.2,\n                             height_shift_range=0.2,\n                             shear_range=0.2,\n                             zoom_range=0.2,\n                             horizontal_flip=True,\n                             fill_mode='nearest')\n\ntest_datagen  = ImageDataGenerator( rescale = 1.0\/255. )\n\n# --------------------\n# Flow training images in batches of 20 using ImageDataGenerator\n# --------------------\ntrain_generator = train_datagen.flow_from_directory(train_dir,\n                                                    batch_size=20,\n                                                    class_mode='categorical',\n                                                    target_size=(150, 150))     \n# --------------------\n# Flow validation images in batches of 20 using ImageDataGenerator\n# --------------------\ntest_generator =  test_datagen.flow_from_directory(test_dir,\n                                                   batch_size=20,\n                                                   class_mode  = 'categorical',\n                                                   target_size = (150, 150))","3e16768e":"import tensorflow as tf","85a7dc5f":"from tensorflow.keras import layers\nfrom tensorflow.keras import Model\n!wget --no-check-certificate \\\n    https:\/\/storage.googleapis.com\/mledu-datasets\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5 \\\n    -O \/tmp\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","1ebec76f":"  \nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\n\nlocal_weights_file = '\/tmp\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\npre_trained_model = InceptionV3(input_shape = (150, 150, 3), \n                                include_top = False, \n                                weights = None)\n\npre_trained_model.load_weights(local_weights_file)\n\nfor layer in pre_trained_model.layers:\n    layer.trainable = False\n    \npre_trained_model.summary()\n","bf31caae":"last_layer = pre_trained_model.get_layer('mixed7') \nprint('last layer output shape: ', last_layer.output_shape)\nlast_output = last_layer.output","9e0191e7":"from tensorflow.keras.optimizers import RMSprop\n\n# Flatten the output layer to 1 dimension\nx = layers.Flatten()(last_output)\n# Add a fully connected layer with 1,024 hidden units and ReLU activation\nx = layers.Dense(1024, activation='relu')(x)\n# Add a dropout rate of 0.2\nx = layers.Dropout(0.2)(x)                  \n# Add a final layer for classification\nx = layers.Dense  (4, activation='softmax')(x)           \n\nmodel = Model( pre_trained_model.input, x) \n\nmodel.compile(optimizer = RMSprop(lr=0.0001), \n              loss = 'categorical_crossentropy', \n              metrics = ['accuracy'])\n\n","5ba92cd0":"from keras.callbacks import ModelCheckpoint\n\nfilepath=\"corn_disease_classifier.h5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')\ncallbacks_list = [checkpoint]","5ec94bec":"history = model.fit(\n            train_generator,\n            validation_data = test_generator,\n            steps_per_epoch = 100,\n            epochs = 25,\n            validation_steps = 50,\n            callbacks=callbacks_list,\n            verbose = 1)","848a5e69":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n\n# loss plot\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","178ed7a9":"from skimage import io\nfrom keras.preprocessing import image\nimg = image.load_img('..\/input\/corndiseasedetectionsplit\/corn disease detection\/validation\/common_rust\/image (963).JPG', grayscale=False, target_size=(150, 150))\nshow_img=image.load_img('..\/input\/corndiseasedetectionsplit\/corn disease detection\/validation\/common_rust\/image (963).JPG', grayscale=False, target_size=(200, 200))\n\ndisease_class =  ['Corn___Cercospora_leaf_spot Gray_leaf_spot','Corn___Common_rust','Corn___Northern_Leaf_Blight','Corn___healthy']                \n                     \nx = image.img_to_array(img)\nx = np.expand_dims(x, axis = 0)\n\nx \/= 255\n\ncustom = model.predict(x)\nprint(custom[0])\n\n\nx = np.array(x, 'float32')\nx = x.reshape([150, 150,3]);\n\n#plt.gray()\nplt.imshow(show_img)\nplt.show()\n\na=custom[0]\nind=np.argmax(a)\n        \nprint('Prediction:',disease_class[ind])\n","d4d8cb08":"import pathlib \nsaved_model = tf.keras.models.load_model('.\/corn_disease_classifier.h5')\nconverter =  tf.lite.TFLiteConverter.from_keras_model(saved_model)\nconverter.optimizations = [tf.lite.Optimize.OPTIMIZE_FOR_SIZE]\ntflite_model = converter.convert()\n","e66391e3":"tflite_model_file = pathlib.Path('corn_disease_classifier.tflite')\ntflite_model_file.write_bytes(tflite_model)","07b3a402":"## predicting classes","9678bac6":"## Image data preprocessing \n[Image data preprocessing kears documentation](https:\/\/keras.io\/api\/preprocessing\/image\/)","6ab0098b":"## converting into tflite file","6b60811c":"# CornDiseaseDetection ","e75a3afa":"## Building a model with transfer learning using Inception V3","80e3a88f":"## Exploring data"}}