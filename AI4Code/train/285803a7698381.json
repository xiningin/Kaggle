{"cell_type":{"9526f58c":"code","d67df947":"code","af801f0c":"code","650cd062":"code","e93a7cef":"code","6b2a5071":"code","ac396c55":"code","8d9de2ca":"code","aa8ee7be":"code","9014938b":"code","66704858":"code","2700db5f":"code","042538f3":"code","54c127c6":"code","bbc8066f":"code","bd820c48":"code","5a2be3a6":"code","1d15c88f":"code","2ec9de69":"code","774a8474":"code","bbb54bfa":"code","046a0585":"code","cc4bd862":"code","4f8e0619":"code","074e09c9":"code","2b4067d3":"code","b1d90a08":"markdown","1b48a6b1":"markdown","378a3973":"markdown","81a5cd16":"markdown","8a9c622c":"markdown","4b684b4e":"markdown","cd9dfbc6":"markdown"},"source":{"9526f58c":"!pip install geopandas","d67df947":"import pandas as pd\nimport numpy as np\nimport geopandas as gpd\nimport folium as fl\nimport fiona\nfrom shapely.geometry import box, Point, Polygon, MultiPoint, MultiLineString","af801f0c":"def swap_xy(geom):\n    if geom.is_empty:\n        return geom\n\n    if geom.has_z:\n        def swap_xy_coords(coords):\n            for x, y, z in coords:\n                yield (y, x, z)\n    else:\n        def swap_xy_coords(coords):\n            for x, y in coords:\n                yield (y, x)\n\n    # Process coordinates from each supported geometry type\n    if geom.type in ('Point', 'LineString', 'LinearRing'):\n        return type(geom)(list(swap_xy_coords(geom.coords)))\n    elif geom.type == 'Polygon':\n        ring = geom.exterior\n        shell = type(ring)(list(swap_xy_coords(ring.coords)))\n        holes = list(geom.interiors)\n        for pos, ring in enumerate(holes):\n            holes[pos] = type(ring)(list(swap_xy_coords(ring.coords)))\n        return type(geom)(shell, holes)\n    elif geom.type.startswith('Multi') or geom.type == 'GeometryCollection':\n        # Recursive call\n        return type(geom)([swap_xy(part) for part in geom.geoms])\n    else:\n        raise ValueError('Type %r not recognized' % geom.type)","650cd062":"train = pd.read_csv(\"\/kaggle\/input\/cft-shift2022\/train.csv\")\ntrain","e93a7cef":"train[\"target\"] = train[\"target\"].astype(\"int64\")\ntrain = train.set_index(\"ID\")\ntrain.head()","6b2a5071":"train = train.dropna()\ntrain.shape","ac396c55":"train = train.drop_duplicates()\ntrain.shape","8d9de2ca":"train[\"point\"] = tuple(zip(train[\"latitude\"],train[\"longitude\"]))\ntrain[\"point\"] = train[\"point\"].apply(lambda coords: Point(coords[0],coords[1]))\ntrain[\"point\"] = train[\"point\"].astype(\"geometry\")\ntrain.head()","aa8ee7be":"train[\"target\"].value_counts(normalize=True).plot.bar()","9014938b":"places = \"2001 police ,2007 library ,2012 community_centre ,2082 school ,2083 kindergarten ,2110 hospital ,2101 pharmacy ,2204 park ,2030 recycling ,2205 playground ,2251 sports_centre ,2256 stadium ,2501 supermarket ,2504 mall ,5603 tram_stop,5621 bus_stop ,5260 parking,5621 bus_stop ,5250 fuel,2008 town_hall ,2013 nursing_home,2034 recycling_metal,2031 recycling_glass,2032 recycling_paper,2033 recycling_clothes,2301 restaurant ,2562 car_repair,2722 museum,2723 monument,2724 memorial ,2743 zoo ,5651 airport,5601 railway_station,5602 railway_halt ,5603 tram_stop,3100 christian,3300 muslim,3400 buddhist,2010 prison ,2015 graveyard ,2302 fast_food,2601 bank\"\nplaces = places.replace(\" ,\",\",\")\nplaces = places.split(\",\")\nimportant_places = []\nfor place in places:\n    place_info = place.split(\" \")\n    important_places.append({\"code\":int(place_info[0]), \"name\":place_info[1]})","66704858":"layers = fiona.listlayers('\/kaggle\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp')\nlayers.remove('gis_osm_buildings_a_free_1')\nlayers","2700db5f":"maps = []\nfor layer in layers:\n    layerSpecifiedMap = gpd.read_file('..\/input\/osm-central-region-of-russia\/central-fed-district-latest-free.shp',\n                                     layer=layer)\n    maps.append(layerSpecifiedMap)\n    print(layer)\n    print(layerSpecifiedMap.shape)\nmaps = pd.concat(maps)","042538f3":"maps.info()","54c127c6":"maps = maps.drop(columns={\"maxspeed\",\"oneway\",\"ref\",\"population\",\"width\",\"tunnel\",\"bridge\",\"layer\",\"name\"})\nmaps.head()","bbc8066f":"reduced_map = []\nfor place in important_places:\n    place_filter = maps[\"code\"] == place[\"code\"]\n    reduced_map.append(maps.loc[place_filter])\nreduced_map = pd.concat(reduced_map)\nreduced_map","bd820c48":"reduced_map['geometry'] = reduced_map['geometry'].apply(lambda geom: swap_xy(geom))\nreduced_map.head()","5a2be3a6":"reduced_map.to_csv(\"reduced_map.csv\")","1d15c88f":"reduced_map = pd.read_csv(\"..\/input\/central-region-reduced\/reduced_map.csv\")\nreduced_map = gpd.GeoDataFrame(reduced_map).set_index(\"Unnamed: 0\")\nreduced_map[\"geometry\"] = gpd.GeoSeries.from_wkt(reduced_map['geometry'])\nreduced_map[\"osm_id\"] = reduced_map[\"osm_id\"].astype(str)\nreduced_map.head()","2ec9de69":"def get_neighbours(p, offset, m): \n    bound = box(p.x-offset, p.y-offset,p.x+offset,p.y+offset)\n    neighbours_filter = m[\"geometry\"].within(bound) | m[\"geometry\"].overlaps(bound)\n    return m[neighbours_filter]","774a8474":"x = []\nfor index, person in train.iterrows():\n    neighbours = get_neighbours(person['point'],0.01,reduced_map)\n    places_count = []\n    for place in important_places:\n        place_filter = neighbours[\"code\"] == place[\"code\"]\n        places_count.append(neighbours.loc[place_filter].shape[0])\n    x.append([index, person[\"target\"]]+places_count)\n    if index % 100 == 0:\n        print(index)","bbb54bfa":"new_columns = []\nfor place in important_places:\n    new_columns.append(place[\"name\"])\nnew_columns","046a0585":"x = pd.DataFrame(x,columns=['id','target']+new_columns)\nx = x.set_index(\"id\")\nx.head()","cc4bd862":"x.to_csv(\"central_region_processed.csv\")","4f8e0619":"x = pd.read_csv(\"..\/input\/central-region-processed\/central_region_processed.csv\")\nx.head()","074e09c9":"x.groupby(\"town_hall\")[\"target\"].value_counts(normalize=True)","2b4067d3":"def marked_map(markedPeople):\n    startLocation = markedPeople.iloc[0]\n    m = fl.Map(location=(startLocation['latitude'],startLocation[\"longitude\"]), zoom_start=200, tiles=\"OpenStreetMap\")\n    for index, person in markedPeople.iterrows():\n        targetIcon = fl.Icon(color=\"green\", icon=\"check-circle-fill\") if (person[\"target\"] == 0)\\\n        else fl.Icon(color=\"red\", icon=\"exclamation-circle-fill\")\n        fl.Marker((person[\"latitude\"],person[\"longitude\"]),\n                 icon=targetIcon).add_to(m)\n    return m","b1d90a08":"**\u0420\u0435\u043b\u0438\u0433\u0438\u044f:**\n3100 christian\n3300 muslim\n3400 buddhist","1b48a6b1":"**\u041e\u0437\u0435\u043b\u0435\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0439\u043e\u043d\u0430:** 4121 tree\n**\u041f\u043e\u043c\u0435\u0442\u043a\u0430:** \u041f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u0437\u0435\u043b\u0451\u043d\u044b\u0445 \u043d\u0430\u0441\u0430\u0436\u0434\u0435\u043d\u0438\u0439 \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438 \u0437\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\u043c \n\u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0432\u0441\u0435\u0445 \u0432\u0438\u0434\u043e\u0432 \u043e\u0437\u0435\u043b\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438 \u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438 \u0437\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438. \n\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043d\u043e\u0440\u043c\u0430\u043c\u0438 \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438 (\u0421\u041d\u0438\u041f 2.07.01-89) \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f \n\u043e\u0437\u0435\u043b\u0435\u043d\u0451\u043d\u043d\u043e\u0441\u0442\u044c \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c - 45-50%.","378a3973":"**\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0431\u043b\u0430\u0433\u043e\u0443\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0439\u043e\u043d\u0430****:**\n\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0431\u043b\u0430\u0433\u043e\u0443\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0439\u043e\u043d\u0430**:** 2001 police 2007 library 2012 community_centre 2082 school 2083 kindergarten 2110 hospital 2101 pharmacy 2204 park 203\n2001 police \n2007 library \n2012 community_centre \n2082 school \n2083 kindergarten \n2110 hospital \n2101 pharmacy \n2204 park \n2030 recycling \n2205 playground \n2251 sports_centre \n2256 stadium \n2501 supermarket \n2504 mall \n5603 tram_stop\n5621 bus_stop \n5260 parking\n5621 bus_stop \n5250 fuel","81a5cd16":"**\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0431\u043b\u0430\u0433\u043e\u0443\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0439\u043e\u043d\u043e\u0432:**\n2008 town_hall \n2013 nursing_home\n2034 recycling_metal\n2031 recycling_glass\n2032 recycling_paper\n2033 recycling_clothes\n2301 restaurant \n2562 car_repair\n2722 museum\n2723 monument\n2724 memorial \n2743 zoo \n5651 airport\n5601 railway_station\n5602 railway_halt \n5603 tram_stop","8a9c622c":"\u0412\u044b\u0431\u043e\u0440 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0443\u0436\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043a\u0430\u0440\u0442\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0444\u0440\u0435\u0439\u043c\u0430","4b684b4e":"**\u0412\u043b\u0438\u044f\u0435\u0442 \u043b\u0438 \u043a\u0430\u043a-\u0442\u043e \u0431\u043b\u0438\u0437\u043e\u0441\u0442\u044c \u043a \u0431\u0430\u043d\u043a\u0443 \u043d\u0430 \u0442\u043e, \u0432\u0435\u0440\u043d\u0435\u0442 \u043b\u0438 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043a\u0440\u0435\u0434\u0438\u0442 \u0438\u043b\u0438 \u043d\u0435\u0442?**\n\u043a\u043e\u0434 - 2601 \nfclass - bank","cd9dfbc6":"**\u041e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 (\u043f\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044e) \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438**: \n2010 prison \n2015 graveyard \n2302 fast_food"}}