{"cell_type":{"907f2455":"code","a9d7980a":"code","dd415a01":"code","cd86733f":"code","77bb82c5":"code","f3160df8":"code","82828b2f":"code","4f4b2d50":"code","d7c8cc93":"code","aa3c0986":"code","5e6a74b1":"code","11d60e2c":"code","244d89dd":"code","5ca7abfa":"code","b2eff9e5":"code","bd23ed0e":"code","9723b09c":"code","c5e1f2f7":"code","a6901327":"code","c27d1e16":"code","c7b1241e":"code","d0aa4346":"code","bedc50ec":"code","238274e7":"code","30e6768e":"code","25ecabfb":"code","2bb43c0b":"code","16b34cda":"code","07ab25a7":"code","0b16ed46":"code","dee5e894":"code","01717964":"code","086cc1df":"code","ca51ba96":"code","a4941266":"code","b0453877":"code","5536a66e":"code","0b1c03f0":"code","eb0edba7":"code","f1279142":"code","f9205163":"code","9a0f9672":"code","124c8e86":"code","78be3d6a":"code","5b53dd73":"code","5c9ba963":"code","5c3a2df2":"code","f77aca75":"code","2dffac0f":"code","94d7f631":"code","5859e170":"code","c2d4a8dd":"code","f7f87e47":"code","8049ea4a":"code","b3ac64bf":"code","e4fcf653":"code","600de25d":"code","81688fbe":"code","7189e3d5":"code","8a34ef6b":"code","22008c4c":"code","c4a27b7e":"code","41c6d09f":"code","75be257c":"code","baaba373":"code","d5609af8":"code","0fd60178":"code","c8846fb5":"code","1aea218a":"code","e2f335b6":"code","44977e01":"code","556777ef":"markdown","ff1ca68d":"markdown","e9fad9c8":"markdown","c7cee144":"markdown","9cd1031e":"markdown","5a062449":"markdown","0cc02371":"markdown","97b27a21":"markdown","2b58576e":"markdown","390ea142":"markdown","31b44777":"markdown","fd3752a5":"markdown","3c72031a":"markdown","7acc2460":"markdown","162cbda8":"markdown","bd34780d":"markdown","4691e570":"markdown","8400523a":"markdown","2d4b1333":"markdown","dcc6fac8":"markdown","ec1578d0":"markdown","e0a13f8c":"markdown","03cc7deb":"markdown"},"source":{"907f2455":"# Importing important libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport random\nimport math\nimport time\nimport datetime\nimport operator\nimport warnings\nfrom termcolor import colored\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nplt.style.use(\"ggplot\")\n%matplotlib inline\nwarnings.filterwarnings(\"ignore\")","a9d7980a":"# Reading dataset\nconfirmed_case= pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\ndeath_case = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")\nrecoveries_case=pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")\nlatest_case = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/09-09-2020.csv')\nus_medical_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports_us\/09-09-2020.csv')","dd415a01":"# printing first five line of dataset\nconfirmed_case.head()\n","cd86733f":"death_case.head()","77bb82c5":"recoveries_case.head()","f3160df8":"latest_case.head()","82828b2f":"us_medical_data.head()","4f4b2d50":"# printing name of columns\ncolumn = confirmed_case.keys()\ncolumn\n","d7c8cc93":"# printing name of columns\ncolumns = death_case.keys()\ncolumns","aa3c0986":"# printing name of columns\ncolumnss = recoveries_case.keys()\ncolumnss","5e6a74b1":"# printing dates of the outbreaks\nconfirmed = confirmed_case.loc[:, column[4]:column[-1]]\ndeaths = death_case.loc[:, columns[4]:columns[-1]]\nrecoveries = recoveries_case.loc[:, columnss[4]:columnss[-1]]","11d60e2c":"# printing information of confirmed,death,recovered\ndates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\nrecovery_rate = [] \ntotal_recovered = [] \ntotal_active = [] \nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    \n    # confirmed, deaths, recovered, and active\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    total_recovered.append(recovered_sum)\n    total_active.append(confirmed_sum-death_sum-recovered_sum)\n    \n    # calculate rates\n    mortality_rate.append(death_sum\/confirmed_sum)\n    recovery_rate.append(recovered_sum\/confirmed_sum)\n","244d89dd":"# printing total no of confirmed,death and recovered\nprint(confirmed_sum)\nprint(death_sum)\nprint(recovered_sum)","5ca7abfa":"# calculating daily increase\ndef daily_increase(data):\n    d = [] \n    for i in range(len(data)):\n        if i == 0:\n            d.append(data[0])\n        else:\n            d.append(data[i]-data[i-1])\n    return d \n# calculating moving increase\n\ndef moving_average(data, window_size):\n    moving_average = []\n    for i in range(len(data)):\n        if i + window_size < len(data):\n            moving_average.append(np.mean(data[i:i+window_size]))\n        else:\n            moving_average.append(np.mean(data[i:len(data)]))\n    return moving_average\n\n# window size\nwindow = 7\n\n# calculating confirmed cases\nworld_daily_increase = daily_increase(world_cases)\nworld_confirmed_avg= moving_average(world_cases, window)\nworld_daily_increase_avg = moving_average(world_daily_increase, window)\n\n# calculating deaths\nworld_daily_death = daily_increase(total_deaths)\nworld_death_avg = moving_average(total_deaths, window)\nworld_daily_death_avg = moving_average(world_daily_death, window)\n\n\n# calculating recoveries\nworld_daily_recovery = daily_increase(total_recovered)\nworld_recovery_avg = moving_average(total_recovered, window)\nworld_daily_recovery_avg = moving_average(world_daily_recovery, window)\n\n\n# calculating active \nworld_active_avg = moving_average(total_active, window)\n","b2eff9e5":"# changing list into array\ndays_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)","bd23ed0e":"# calculating future forcasting\ndays_in_future = 10\nfuture_forcasting = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcasting[:-10]","9723b09c":"# Converting integer into datetime for better doing visualization\nstart = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcasting_dates = []\nfor i in range(len(future_forcasting)):\n    future_forcasting_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","c5e1f2f7":"# spliting data into train and test\nx_train, x_test, y_train, y_test = train_test_split(days_since_1_22[50:], world_cases[50:], test_size=0.12, shuffle=False)","a6901327":"# Building SVR model\nsvm_confirmed = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_confirmed.fit(x_train, y_train)\nsvm_pred = svm_confirmed.predict(future_forcasting)\nsvm_test_pred = svm_confirmed.predict(x_test)\n# here i am calculating MAE and MSE\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test))","c27d1e16":"# Plotting prediction vs y_test graph\nplt.plot(y_test)\nplt.plot(svm_test_pred)\nplt.title(\"SVM prediction vs y_test\")\nplt.legend(['Test Data', 'SVM Predictions'])","c7b1241e":"# transforming our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_x_train = poly.fit_transform(x_train)\npoly_x_test = poly.fit_transform(x_test)\npoly_future_forcasting = poly.fit_transform(future_forcasting)\n# transforming our data for bayesian polynomial regression\nbayesian_poly = PolynomialFeatures(degree=5)\nbayesian_poly_x_train = bayesian_poly.fit_transform(x_train)\nbayesian_poly_x_test = bayesian_poly.fit_transform(x_test)\nbayesian_poly_future_forcasting = bayesian_poly.fit_transform(future_forcasting)","d0aa4346":"# building Linear Regression model\nclassifier = LinearRegression(normalize=True, fit_intercept=False)\nclassifier.fit(poly_x_train, y_train)\ntest_classifier_pred = classifier.predict(poly_x_test)\nclassifier_pred = classifier.predict(poly_future_forcasting)\nprint('MAE:', mean_absolute_error(test_classifier_pred, y_test))\nprint('MSE:',mean_squared_error(test_classifier_pred, y_test))\nprint(classifier.coef_)","bedc50ec":"# Plotting test data vs polynomila regression prediction\nplt.plot(y_test)\nplt.plot(test_classifier_pred)\nplt.legend(['Test Data', 'Polynomial Regression Predictions'])\nplt.title('Test Data vs Polynomial Regression Predictions')","238274e7":"# building bayesian ridge polynomial regression model\nfrom sklearn import linear_model\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\nbayesian = BayesianRidge(fit_intercept=False)\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nBayReg = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, \n                   return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nBayReg.fit(bayesian_poly_x_train, y_train)","30e6768e":"# printing best parameters\nBayReg.best_params_","25ecabfb":"# calculating MAE and MSE value\nbayesian_confirmed = BayReg.best_estimator_\ntest_bayesian_pred = bayesian_confirmed.predict(bayesian_poly_x_test)\nbayesian_pred = bayesian_confirmed.predict(bayesian_poly_future_forcasting)\nprint('MAE:', mean_absolute_error(test_bayesian_pred, y_test))\nprint('MSE:',mean_squared_error(test_bayesian_pred, y_test))","2bb43c0b":"# plotting  graph of Test Data vs Bayesian Ridge Polynomial Predictions.\nplt.plot(y_test)\nplt.plot(test_bayesian_pred)\nplt.legend(['Test Data', 'Bayesian Ridge Polynomial Predictions'])\nplt.title(\"Test Data vs Bayesian Ridge Polynomial Predictions\")","16b34cda":"# visualizing rate of cases world wide vs moving average\nadjusted_dates = adjusted_dates.reshape(1, -1)[0]\nplt.figure(figsize=(10, 8))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(adjusted_dates, world_confirmed_avg, linestyle='dashed', color='blue')\nplt.title('Rate of Coronavirus world Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('Rate of Cases', size=15)\nplt.legend(['Worldwide Coronavirus Cases', 'Moving Average 7 Days'], prop={'size': 10})\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","07ab25a7":"# visualizing rate of death cases world wide vs moving average\nadjusted_dates = adjusted_dates.reshape(1, -1)[0]\nplt.figure(figsize=(10, 8))\nplt.plot(adjusted_dates, total_deaths)\nplt.plot(adjusted_dates, world_death_avg, linestyle='dashed', color='blue')\nplt.title('Rate of Coronavirus death Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('Rate of Cases', size=15)\nplt.legend(['Worldwide death Coronavirus Cases', 'Moving Average 7 Days'], prop={'size': 10})\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","0b16ed46":"# visualizing rate of recovered cases world wide vs moving average\nadjusted_dates = adjusted_dates.reshape(1, -1)[0]\nplt.figure(figsize=(10, 8))\nplt.plot(adjusted_dates, total_recovered)\nplt.plot(adjusted_dates, world_recovery_avg, linestyle='dashed', color=\"blue\")\nplt.title('Rate of Coronavirus recovered Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('Rate of Cases', size=15)\nplt.legend(['Worldwide recovered Coronavirus Cases', 'Moving Average 7 Days'], prop={'size': 10})\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","dee5e894":"# visualizing rate of active cases world wide vs moving average\nadjusted_dates = adjusted_dates.reshape(1, -1)[0]\nplt.figure(figsize=(10, 8))\nplt.plot(adjusted_dates, total_active)\nplt.plot(adjusted_dates, world_active_avg, linestyle='dashed', color='blue')\nplt.title('Rate of Coronavirus active Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('Rate of Cases', size=15)\nplt.legend(['Worldwide active Coronavirus Cases', 'Moving Average 7 Days'], prop={'size': 10})\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","01717964":"# visualizing rate of world daily increase in cases vs moving average\nplt.figure(figsize=(10,8))\nplt.bar(adjusted_dates, world_daily_increase)\nplt.plot(adjusted_dates, world_daily_increase_avg, color='blue', linestyle='dashed')\nplt.title('World Daily Increases in Confirmed Cases', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('rate of Cases', size=15)\nplt.legend(['Moving Average 7 days', 'World Daily Increase in COVID-19 Cases'], prop={'size': 10})\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","086cc1df":"# visualizing rate of world daily death in cases vs moving average\nplt.figure(figsize=(10,8))\nplt.bar(adjusted_dates, world_daily_death)\nplt.plot(adjusted_dates, world_daily_death_avg, color='blue', linestyle='dashed')\nplt.title('World Daily Increases in Confirmed death cases', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('rate of Cases', size=15)\nplt.legend(['Moving Average 7 days', 'World Daily Increase in COVID-19 death'], prop={'size': 10})\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","ca51ba96":"# visualizing rate of world daily recovery in cases vs moving average\nplt.figure(figsize=(10,8))\nplt.bar(adjusted_dates, world_daily_recovery)\nplt.plot(adjusted_dates, world_daily_recovery_avg, color='blue', linestyle='dashed')\nplt.title('World Daily Increases in Confirmed recovery cases', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('rate of Cases', size=15)\nplt.legend(['Moving Average 7 days', 'World Daily Increase in COVID-19 recovery'], prop={'size': 10})\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","a4941266":"# visualizing log of world cases vs adjusted dates\nplt.figure(figsize=(10,8))\nplt.plot(adjusted_dates, np.log10(world_cases))\nplt.title('Log of world case of Coronavirus Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('rate of Cases', size=15)\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","b0453877":"# visualizing log of total death case vs adjusted dates\nplt.figure(figsize=(10,8))\nplt.plot(adjusted_dates, np.log10(total_deaths))\nplt.title('Log of world death case of Coronavirus Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('rate of Cases', size=15)\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","5536a66e":"# visualizing log of total recovered vs adjusted dates\nplt.figure(figsize=(10,8))\nplt.plot(adjusted_dates, np.log10(total_recovered))\nplt.title('Log of world recovered case of Coronavirus Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('rate of Cases', size=15)\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","0b1c03f0":"# plotting graph\n\ndef country_plot(x, y1, y2, y3, y4, country):\n    # window is set as 7 in in the beginning of the notebook \n    confirmed_avg = moving_average(y1, window)\n    confirmed_increase_avg = moving_average(y2, window)\n    death_increase_avg = moving_average(y3, window)\n    recovery_increase_avg = moving_average(y4, window)\n    \n    plt.figure(figsize=(10,8))\n    plt.plot(x, y1)\n    plt.plot(x, confirmed_avg, color='blue', linestyle='dashed')\n    plt.legend(['{} Confirmed Cases'.format(country), 'Moving Average {} Days'.format(window)], prop={'size': 10})\n    plt.title('{} Confirmed Cases'.format(country), size=15)\n    plt.xlabel('Days Since 1\/22\/2020', size=15)\n    plt.ylabel('rate of Cases', size=15)\n    plt.xticks(size=10)\n    plt.yticks(size=10)\n    plt.show()\n\n    plt.figure(figsize=(10,8))\n    plt.bar(x, y2)\n    plt.plot(x, confirmed_increase_avg, color='blue', linestyle='dashed')\n    plt.legend(['Moving Average {} Days'.format(window), '{} Daily Increase in Confirmed Cases'.format(country)], prop={'size': 10})\n    plt.title('{} Daily Increases in Confirmed Cases'.format(country), size=15)\n    plt.xlabel('Days Since 1\/22\/2020', size=15)\n    plt.ylabel('rate of Cases', size=15)\n    plt.xticks(size=10)\n    plt.yticks(size=10)\n    plt.show()\n\n    plt.figure(figsize=(10, 8))\n    plt.bar(x, y3)\n    plt.plot(x, death_increase_avg, color='blue', linestyle='dashed')\n    plt.legend(['Moving Average {} Days'.format(window), '{} Daily Increase in Confirmed Deaths'.format(country)], prop={'size': 10})\n    plt.title('{} Daily Increases in Deaths'.format(country), size=15)\n    plt.xlabel('Days Since 1\/22\/2020', size=15)\n    plt.ylabel('rate of Cases', size=15)\n    plt.xticks(size=10)\n    plt.yticks(size=10)\n    plt.show()\n\n    plt.figure(figsize=(10, 8))\n    plt.bar(x, y4)\n    plt.plot(x, recovery_increase_avg, color='blue', linestyle='dashed')\n    plt.legend(['Moving Average {} Days'.format(window), '{} Daily Increase in Confirmed Recoveries'.format(country)], prop={'size': 10})\n    plt.title('{} Daily Increases in Recoveries'.format(country), size=15)\n    plt.xlabel('Days Since 1\/22\/2020', size=15)\n    plt.ylabel('rate of Cases', size=15)\n    plt.xticks(size=10)\n    plt.yticks(size=10)\n    plt.show()\n      \n# helper function for getting country's cases, deaths, and recoveries        \ndef get_country_info(country_name):\n    country_cases = []\n    country_deaths = []\n    country_recoveries = []  \n    \n    for i in dates:\n        country_cases.append(confirmed_case[confirmed_case['Country\/Region']==country_name][i].sum())\n        country_deaths.append(death_case[death_case['Country\/Region']==country_name][i].sum())\n        country_recoveries.append(recoveries_case[recoveries_case['Country\/Region']==country_name][i].sum())\n    return (country_cases, country_deaths, country_recoveries)\n    \n    \ndef country_visualizations(country_name):\n    country_info = get_country_info(country_name)\n    country_cases = country_info[0]\n    country_deaths = country_info[1]\n    country_recoveries = country_info[2]\n    \n    country_daily_increase = daily_increase(country_cases)\n    country_daily_death = daily_increase(country_deaths)\n    country_daily_recovery = daily_increase(country_recoveries)\n    \n    country_plot(adjusted_dates, country_cases, country_daily_increase, country_daily_death, country_daily_recovery, country_name)\n    ","eb0edba7":"# Name of all country for which we are going to do visualisation\ncountries = ['US', 'Russia', 'India','Brazil', 'South Africa', 'China', 'Italy',\n             'Germany', 'Spain', 'France', 'United Kingdom', 'Peru', 'Mexico', 'Colombia', 'Saudi Arabia', 'Iran', 'Bangladesh',\n            'Pakistan'] \n\nfor country in countries:\n    country_visualizations(country)","f1279142":"# Comparing corona cases of 5 country by doing visualisation\ncountries_name = ['US', 'Brazil', 'India', 'Russia', 'South Africa'] \ngraph_name = ['Coronavirus Confirmed Cases', 'Coronavirus Confirmed Deaths', 'Coronavirus Confirmed Recoveries']\n\nfor num in range(3):\n    plt.figure(figsize=(10,8))\n    for country in countries_name:\n        plt.plot(get_country_info(country)[num])\n    plt.legend(countries_name, prop={'size': 10})\n    plt.xlabel('Days since 3\/1', size=15)\n    plt.ylabel('rate of Cases', size=15)\n    plt.title(graph_name[num], size=15)\n    plt.xticks(size=10)\n    plt.yticks(size=10)\n    plt.show()","f9205163":"# Viaualizing future forcasting vs prediction\ndef plot_predictions(x, y, pred, algo_name, color):\n    plt.figure(figsize=(10, 8))\n    plt.plot(x, y)\n    plt.plot(future_forcasting, pred, linestyle='dashed', color=color)\n    plt.title('Worldwide Coronavirus Cases Over Time', size=15)\n    plt.xlabel('Days Since 1\/22\/2020', size=15)\n    plt.ylabel('rate of Cases', size=15)\n    plt.legend(['Confirmed Cases', algo_name], prop={'size': 10})\n    plt.xticks(size=10)\n    plt.yticks(size=10)\n    plt.show()","9a0f9672":"# visualizing Predictions for confirmed coronavirus cases worldwide\n\nplot_predictions(adjusted_dates, world_cases, svm_pred, 'SVM Predictions', 'purple')","124c8e86":"# Visualizing Predictions for confirmed coronavirus cases worldwide\nplot_predictions(adjusted_dates, world_cases, classifier_pred, 'Polynomial Regression Predictions', 'pink')","78be3d6a":"# here i am visualizing Predictions for confirmed coronavirus cases worldwide\nplot_predictions(adjusted_dates, world_cases, bayesian_pred, 'Bayesian Ridge Regression Predictions', 'green')","5b53dd73":"# Future predictions using polynomial regression\nlinear_pred = classifier_pred.reshape(1,-1)[0]\nlinear_df = pd.DataFrame({'Date': future_forcasting_dates[-10:], 'Polynomial Predicted rate of Confirmed Cases Worldwide': np.round(linear_pred[-10:])})\nlinear_df.style.background_gradient(cmap='PuBu')","5c9ba963":"# Future predictions using Bayesian Ridge \nbayesian_df = pd.DataFrame({'Date': future_forcasting_dates[-10:], 'Bayesian Ridge Predicted rate of Confirmed Cases Worldwide': np.round(bayesian_pred[-10:])})\nbayesian_df.style.background_gradient(cmap='PuBu')","5c3a2df2":"# Future predictions using SVM \nsvm_df = pd.DataFrame({'Date': future_forcasting_dates[-10:], 'SVM Predicted # of Confirmed Cases Worldwide': np.round(svm_pred[-10:])})\nsvm_df.style.background_gradient(cmap='PuBu')","f77aca75":"# visualizing deaths vs world wide recoveries\nplt.figure(figsize=(10, 8))\nplt.plot(adjusted_dates, total_deaths, color='r')\nplt.plot(adjusted_dates, total_recovered, color='green')\nplt.legend(['death', 'recoveries'], loc='best', fontsize=10)\nplt.title('Worldwide Coronavirus Cases', size=15)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('rate of Cases', size=15)\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","2dffac0f":"# visualizing total deaths vs total recoveries\nplt.figure(figsize=(10, 8))\nplt.plot(total_recovered, total_deaths)\nplt.title('rate of Coronavirus Deaths vs. rate of Coronavirus Recoveries', size=15)\nplt.xlabel('rate of Coronavirus Recoveries', size=15)\nplt.ylabel('rate of Coronavirus Deaths', size=15)\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()\n","94d7f631":"countries =  list(latest_case['Country_Region'].unique())","5859e170":"country_confirmed_cases = []\ncountry_death_cases = [] \ncountry_active_cases = []\ncountry_recovery_cases = []\ncountry_incidence_rate = [] \ncountry_mortality_rate = [] \n\nno_cases = []\nfor i in countries:\n    cases = latest_case[latest_case['Country_Region']==i]['Confirmed'].sum()\n    if cases > 0:\n        country_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n        \nfor i in no_cases:\n    countries.remove(i)\n    \n# sort countries by the number of confirmed cases\nunique_countries = [k for k, v in sorted(zip(countries, country_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\nfor i in range(len(unique_countries)):\n    country_confirmed_cases[i] = latest_case[latest_case['Country_Region']==countries[i]]['Confirmed'].sum()\n    country_death_cases.append(latest_case[latest_case['Country_Region']==countries[i]]['Deaths'].sum())\n    country_recovery_cases.append(latest_case[latest_case['Country_Region']==countries[i]]['Recovered'].sum())\n    country_active_cases.append(latest_case[latest_case['Country_Region']==countries[i]]['Active'].sum())\n    country_incidence_rate.append(latest_case[latest_case['Country_Region']==countries[i]]['Incidence_Rate'].sum())\n    country_mortality_rate.append(country_death_cases[i]\/country_confirmed_cases[i])","c2d4a8dd":"country_df = pd.DataFrame({'Country Name': countries, 'Number of Confirmed Cases': country_confirmed_cases,\n                          'Number of Deaths': country_death_cases, 'Number of Recoveries' : country_recovery_cases, \n                          'Number of Active Cases' : country_active_cases, 'Incidence Rate' : country_incidence_rate,\n                          'Mortality Rate': country_mortality_rate})\n# number of cases per country\/region\n\ncountry_df.style.background_gradient(cmap='PuBu')","f7f87e47":"unique_provinces =  list(latest_case['Province_State'].unique())","8049ea4a":"province_confirmed_cases = []\nprovince_country = [] \nprovince_death_cases = [] \nprovince_active = [] \nprovince_incidence_rate = []\nprovince_mortality_rate = [] \n\nno_cases = [] \nfor i in unique_provinces:\n    cases = latest_case[latest_case['Province_State']==i]['Confirmed'].sum()\n    if cases > 0:\n        province_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n \n#remove areas with no confirmed cases\nfor i in no_cases:\n    unique_provinces.remove(i)\n    \nunique_provinces = [k for k, v in sorted(zip(unique_provinces, province_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\nfor i in range(len(unique_provinces)):\n    province_confirmed_cases[i] = latest_case[latest_case['Province_State']==unique_provinces[i]]['Confirmed'].sum()\n    province_country.append(latest_case[latest_case['Province_State']==unique_provinces[i]]['Country_Region'].unique()[0])\n    province_death_cases.append(latest_case[latest_case['Province_State']==unique_provinces[i]]['Deaths'].sum())\n    province_active.append(latest_case[latest_case['Province_State']==unique_provinces[i]]['Active'].sum())\n    province_incidence_rate.append(latest_case[latest_case['Province_State']==unique_provinces[i]]['Incidence_Rate'].sum())\n    province_mortality_rate.append(province_death_cases[i]\/province_confirmed_cases[i])","b3ac64bf":"# number of cases per province\/state\/city top 100 \nprovince_limit = 100 \nprovince_df = pd.DataFrame({'Province\/State Name': unique_provinces[:province_limit], 'Country': province_country[:province_limit], 'Number of Confirmed Cases': province_confirmed_cases[:province_limit],\n                          'Number of Deaths': province_death_cases[:province_limit],'Number of Active Cases' : province_active[:province_limit], \n                            'Incidence Rate' : province_incidence_rate[:province_limit], 'Mortality Rate': province_mortality_rate[:province_limit]})\n# number of cases per country\/region\n\nprovince_df.style.background_gradient(cmap='PuBu')","e4fcf653":"us_states = list(latest_case[latest_case['Country_Region']=='US']['Province_State'].unique())","600de25d":"state_confirmed_cases = []\nstate_death_cases = [] \nstate_active = [] \nstate_incidence_rate = [] \nstate_mortality_rate = [] \n\nno_cases = [] \nfor i in us_states:\n    cases = latest_case[latest_case['Province_State']==i]['Confirmed'].sum()\n    if cases > 0:\n        state_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n \n# removing areas with no confirmed cases\nfor i in no_cases:\n    us_states.remove(i)\n    \nus_states = [k for k, v in sorted(zip(us_states, state_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\nfor i in range(len(us_states)):\n    state_confirmed_cases[i] = latest_case[latest_case['Province_State']==us_states[i]]['Confirmed'].sum()\n    state_death_cases.append(latest_case[latest_case['Province_State']==us_states[i]]['Deaths'].sum())\n    state_active.append(latest_case[latest_case['Province_State']==us_states[i]]['Active'].sum())\n    state_incidence_rate.append(latest_case[latest_case['Province_State']==us_states[i]]['Incidence_Rate'].sum())\n    state_mortality_rate.append(state_death_cases[i]\/state_confirmed_cases[i])","81688fbe":"# number of cases for us states\n\nstate_df = pd.DataFrame({'State Name': us_states, 'Number of Confirmed Cases': state_confirmed_cases,\n                          'Number of Deaths': state_death_cases, 'Number of Active Cases' : state_active, \n                         'Incidence Rate' : state_incidence_rate, 'Mortality Rate': state_mortality_rate})\n# number of cases per country\/region\n\nstate_df.style.background_gradient(cmap='PuBu')","7189e3d5":"# Visualising Rate of Coronavirus Confirmed Cases\nus_confirmed = latest_case[latest_case['Country_Region']=='US']['Confirmed'].sum()\noutside_us_confirmed = np.sum(country_confirmed_cases) - us_confirmed\nplt.figure(figsize=(10, 6))\nplt.bar('United States', us_confirmed)\nplt.bar('Outside United States', outside_us_confirmed)\nplt.title('Rate of Coronavirus Confirmed Cases', size=15)\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","8a34ef6b":"print('Outside United States {} cases:'.format(outside_us_confirmed))\nprint('United States {} cases'.format(us_confirmed))\nprint('Total: {} cases'.format(us_confirmed+outside_us_confirmed))","22008c4c":"# Only showing 15 countries with the most confirmed cases, the rest are grouped into the other category\nvisual_unique_countries = [] \nvisual_confirmed_cases = []\nothers = np.sum(country_confirmed_cases[10:])\n\nfor i in range(len(country_confirmed_cases[:10])):\n    visual_unique_countries.append(unique_countries[i])\n    visual_confirmed_cases.append(country_confirmed_cases[i])\n    \nvisual_unique_countries.append('Others')\nvisual_confirmed_cases.append(others)","c4a27b7e":"# Plotting bar graph\ndef plot_bar_graphs(x, y, title):\n    plt.figure(figsize=(16, 12))\n    plt.barh(x, y)\n    plt.title(title, size=20)\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()\n# good for a lot x values \ndef plot_bar_graphs_tall(x, y, title):\n    plt.figure(figsize=(10, 8))\n    plt.barh(x, y)\n    plt.title(title, size=15)\n    plt.xticks(size=10)\n    plt.yticks(size=10)\n    plt.show()","41c6d09f":"log_country_confirmed_cases = [math.log10(i) for i in visual_confirmed_cases]\nplot_bar_graphs(visual_unique_countries, log_country_confirmed_cases, 'Common Log rate of Coronavirus Confirmed Cases in Countries\/Regions')","75be257c":"# Only showing 10 provinces with the most confirmed cases, the rest are grouped into the other category\nvisual_unique_provinces = [] \nvisual_confirmed_cases2 = []\nothers = np.sum(province_confirmed_cases[10:])\nfor i in range(len(province_confirmed_cases[:10])):\n    visual_unique_provinces.append(unique_provinces[i])\n    visual_confirmed_cases2.append(province_confirmed_cases[i])\n\nvisual_unique_provinces.append('Others')\nvisual_confirmed_cases2.append(others)\n","baaba373":"plot_bar_graphs(visual_unique_provinces, visual_confirmed_cases2, 'rate of Coronavirus Confirmed Cases in Provinces\/States')","d5609af8":"log_province_confirmed_cases = [math.log10(i) for i in visual_confirmed_cases2]\nplot_bar_graphs(visual_unique_provinces, log_province_confirmed_cases, 'Log of rate of Coronavirus Confirmed Cases in Provinces\/States')","0fd60178":"def plot_pie_charts(x, y, title):\n    # more muted color \n    c = ['lightcoral', 'rosybrown', 'sandybrown', 'navajowhite', 'gold',\n        'khaki', 'lightskyblue', 'turquoise', 'lightslategrey', 'thistle', 'pink']\n    plt.figure(figsize=(20,15))\n    plt.title(title, size=15)\n    plt.pie(y, colors=c,shadow=True, labels=y)\n    plt.legend(x, loc='best', fontsize=12)\n    plt.show()","c8846fb5":"plot_pie_charts(visual_unique_provinces, visual_confirmed_cases2, 'Covid-19 Confirmed Cases per State\/Province\/Region')","1aea218a":"# Plotting countries with regional data using a pie chart \n\ndef plot_pie_country_with_regions(country_name, title):\n    regions = list(latest_case[latest_case['Country_Region']==country_name]['Province_State'].unique())\n    confirmed_cases = []\n    no_cases = [] \n    for i in regions:\n        cases = latest_case[latest_case['Province_State']==i]['Confirmed'].sum()\n        if cases > 0:\n            confirmed_cases.append(cases)\n        else:\n            no_cases.append(i)\n\n    # remove areas with no confirmed cases\n    for i in no_cases:\n        regions.remove(i)\n\n    # only show the top 5 states\n    regions = [k for k, v in sorted(zip(regions, confirmed_cases), key=operator.itemgetter(1), reverse=True)]\n\n    for i in range(len(regions)):\n        confirmed_cases[i] = latest_case[latest_case['Province_State']==regions[i]]['Confirmed'].sum()  \n    \n    # additional province\/state will be considered \"others\"\n    \n    if(len(regions)>5):\n        regions_5 = regions[:5]\n        regions_5.append('Others')\n        confirmed_cases_5 = confirmed_cases[:5]\n        confirmed_cases_5.append(np.sum(confirmed_cases[5:]))\n        plot_pie_charts(regions_5,confirmed_cases_5, title)\n    else:\n        plot_pie_charts(regions,confirmed_cases, title)","e2f335b6":"pie_chart_countries = ['US', 'Brazil', 'Russia', 'India', 'Peru', 'Mexico', 'Canada', \n                       'Australia', 'China', 'Italy', 'Germany', 'France', 'United Kingdom']\n\nfor i in pie_chart_countries:\n    plot_pie_country_with_regions(i, 'Covid-19 Confirmed Cases in {}'.format(i))","44977e01":"# Replace nan with 0\nus_medical_data.fillna(value=0, inplace=True)\n\ndef plot_us_medical_data():\n    states = us_medical_data['Province_State'].unique()\n    testing_number = []\n    testing_rate = []\n    \n    for i in states:\n        testing_number.append(us_medical_data[us_medical_data['Province_State']==i]['People_Tested'].sum())\n        testing_rate.append(us_medical_data[us_medical_data['Province_State']==i]['Testing_Rate'].max())\n    \n    # only show the top 15 states\n    testing_states = [k for k, v in sorted(zip(states, testing_number), key=operator.itemgetter(1), reverse=True)]\n    testing_rate_states = [k for k, v in sorted(zip(states, testing_rate), key=operator.itemgetter(1), reverse=True)]\n  \n    for i in range(len(states)):\n        testing_number[i] = us_medical_data[us_medical_data['Province_State']==testing_states[i]]['People_Tested'].sum()\n        testing_rate[i] = us_medical_data[us_medical_data['Province_State']==testing_rate_states[i]]['Testing_Rate'].sum()\n    \n    top_limit = 30 \n    \n    plot_bar_graphs_tall(testing_states[:top_limit], testing_number[:top_limit], 'Total Testing per State (Top 30)')\n    plot_bar_graphs_tall(testing_rate_states[:top_limit], testing_rate[:top_limit], 'Testing Rate per 100,000 People (Top 30)')\n \n\nplot_us_medical_data()","556777ef":"In this notebook i have done analysis and visualization on 5 different dataset,dataset consist of worldwide case of corona . ","ff1ca68d":"# Data Visualization","e9fad9c8":"**Graphing deaths against recoveries**","c7cee144":"**Getting the latest information about provinces\/states that have confirmed coronavirus cases**","9cd1031e":"Thanks for reading. I hope you like my analysis and visualization found it to be helpful. If you have any questions or suggestions, feel free to write them down in the comment section.","5a062449":"**Drawing country specific graph**\n","0cc02371":"The World Health Organization declared the outbreak a Public Health Emergency of International Concern on 30 January 2020 and a pandemic on 11 March. As of 14 September 2020, more than 29 million cases have been reported in more than 188 countries and territories, resulting in more than 924,000 deaths; more than 19.6 million people have recovered.","97b27a21":"**Getting information about countries\/regions that have confirmed coronavirus cases**","2b58576e":"**Plotting the number of deaths against the number of recoveries**","390ea142":"# Importing libraries","31b44777":"# Bar Chart Visualizations for COVID-19","fd3752a5":"# Contents","3c72031a":"# Coronavirus","7acc2460":"# Conclusion","162cbda8":"# Pie Chart Visualizations for COVID-19","bd34780d":"![image.png](attachment:image.png)","4691e570":"**Data Table**","8400523a":"* Analysing Global Coronavirus Cases\n* Analysing corona case from different countries\n* Doing prediction\n* Data Visualization of confirmed,recovered,death case\n  1. Data Table\n  2. Pie chart\n  3. Bar chart\n* Testing US data\n* Conclusion\n","2d4b1333":"# Building Model","dcc6fac8":"Coronaviruses are a large family of viruses which may cause illness in animals or humans.  In humans, several coronaviruses are known to cause respiratory infections ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS) and Severe Acute Respiratory Syndrome (SARS). The most recently discovered coronavirus causes coronavirus disease COVID-19.\nCOVID-19 is the infectious disease caused by the most recently discovered coronavirus. This new virus and disease were unknown before the outbreak began in Wuhan, China, in December 2019. COVID-19 is now a pandemic affecting many countries globally.","ec1578d0":"# US Medical Data on Testing","e0a13f8c":"# Reading Dataset","03cc7deb":"# Introduction"}}