{"cell_type":{"3391d269":"code","3181cddd":"code","d7912a41":"code","3b475ce6":"code","6d804fb0":"code","4e03bb2b":"code","fcd5f2a9":"code","b3f1c7d0":"code","19a9d674":"code","3d0682ef":"code","cb574f9f":"code","1bbc8f43":"code","0298e194":"code","852c8ea4":"code","82a08783":"code","f5575448":"code","3c5c2e7e":"code","ea855079":"code","3c84e89b":"code","73f6e6cf":"code","6a544a2d":"code","34a129bc":"code","858a0bb1":"code","7137a0ef":"code","be4e8f87":"code","242d5a3d":"code","959062ef":"code","352acbbe":"code","8545a7f3":"code","66306cec":"code","376d92c7":"code","b5637978":"code","9c8fb748":"code","a1d1ede2":"code","5f79cd65":"code","f1555d35":"code","c20a8f55":"markdown","67ecbaf3":"markdown","f3b227dc":"markdown","8ec774f8":"markdown","929cbb96":"markdown","3dd87c79":"markdown","6789fcc9":"markdown","07c4e183":"markdown","caa65192":"markdown","cf86021b":"markdown"},"source":{"3391d269":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3181cddd":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport random\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\n\nimport scipy.stats as stats\nimport seaborn as sns\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.ensemble import RandomForestClassifier#\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_curve, roc_auc_score\n\nimport sys\n\nimport category_encoders as ce\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings('ignore')","d7912a41":"df = pd.read_csv('..\/input\/diabetes-data-set\/diabetes.csv')\n\ndf_copy = df.copy()\ndf_copy.head()","3b475ce6":"df_copy.info()","6d804fb0":"import missingno as msno\nmsno.matrix(df_copy)","4e03bb2b":"df_copy.duplicated().sum()","fcd5f2a9":"df_copy.loc[((df['Age'] > 21) & (df_copy['Age']) < 50), 'NEW_SEX_CAT'] = 'mature'\ndf_copy.loc[df['Age'] <= 21, 'NEW_SEX_CAT'] = 'young'\ndf_copy.loc[df['Age'] > 50, 'NEW_SEX_CAT'] = 'senior'\n\ndf_copy[\"NEW_AGExBMI\"] = df_copy[\"Age\"] * df_copy[\"BMI\"]","b3f1c7d0":"sns.countplot(x=\"Outcome\", data=df_copy)","19a9d674":"numerical_features = [\"Pregnancies\",\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"DiabetesPedigreeFunction\",\"NEW_AGExBMI\"]\n\nRP=plt.figure(figsize=(14,8))\nfor i, feature in enumerate(numerical_features):\n    r=RP.add_subplot(2,4,i+1)\n\n    x_min = int(df_copy[feature].min())\n\n    x_max = int(df_copy[feature].max())\n\n    range_bin_width = range(x_min, x_max, 5)\n    sns.distplot(\n        df_copy[feature], color='#123456',bins=30,\n        kde=False\n    )\n    r.set_title(feature+\" Histogram Plot\")\nRP.tight_layout()","3d0682ef":"box_features = ['model','transmission','fuelType']\n\nRP=plt.figure(figsize=(14,10))\nfor i, feature in enumerate(numerical_features):\n    r=RP.add_subplot(3,3,i+1)\n    sns.boxplot(df_copy[feature])\n    r.set_title(feature+\" Histogram Plot\")\nRP.tight_layout()","cb574f9f":"def replace_outlier(df,feature):\n    q1 = df[feature].quantile(0.25)\n    q3 = df[feature].quantile(0.75)\n    iqr = q3-q1\n    Lower_tail = q1 - 1.5 * iqr\n    Upper_tail = q3 + 1.5 * iqr\n\n    for index, row in df.iterrows():\n        value = df.at[index, feature]\n        if value > Upper_tail:\n            df.at[index, feature] = Upper_tail\n        elif value < Lower_tail:\n            df.at[index, feature] = Lower_tail\n    return df","1bbc8f43":"df_copy = replace_outlier(df_copy,'Insulin')","0298e194":"df_copy['Insulin'].describe()\nsns.boxplot(df_copy['Insulin'])","852c8ea4":"sns.jointplot(data=df_copy, x='Age', y='BMI',hue=\"Outcome\")","82a08783":"sns.jointplot(data=df_copy, x='Age', y='BloodPressure',hue=\"Outcome\")","f5575448":"sns.jointplot(data=df_copy, x='Age', y='Glucose',hue=\"Outcome\")","3c5c2e7e":"df_copy.loc[df_copy['Glucose'] < 20]","ea855079":"len(df_copy.loc[df_copy['Glucose'] < 20])","3c84e89b":"df_copy.loc[df_copy['Glucose'] < 20, 'Glucose'] = df_copy['Glucose'].mean()","73f6e6cf":"df_copy.loc[df_copy['BloodPressure'] < 20, 'BloodPressure'] = df_copy['BloodPressure'].mean()","6a544a2d":"sns.set(font_scale=1.4)\nplt.figure(figsize = (20,15))\nsns.heatmap(df_copy.corr(),cmap='coolwarm',annot=True,linewidths=.5)","34a129bc":"df_copy['NEW_SEX_CAT'] = df_copy['NEW_SEX_CAT'].replace({'young': 0, 'mature': 1,'senior': 2})","858a0bb1":"X = df_copy.drop(['Outcome'],axis=1)\ny = df_copy['Outcome']\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,stratify=y,random_state =42)","7137a0ef":"rfc=RandomForestClassifier(random_state=42)","be4e8f87":"param_grid = { \n    'n_estimators': [10,20,30],\n    'max_features': [1, 'auto', None],\n    'max_depth': [1, 5, 10, None],\n    'min_samples_leaf': [1, 2, 4,]\n}","242d5a3d":"CV_rfc = GridSearchCV(estimator=rfc, param_grid=param_grid, cv= 5)\nCV_rfc.fit(X_train, y_train)","959062ef":"CV_rfc.best_params_","352acbbe":"rfc1 = RandomForestClassifier(random_state=42, max_features='auto', n_estimators= 30, max_depth=5, min_samples_leaf=2)","8545a7f3":"rfc1.fit(X_train, y_train)","66306cec":"pred=rfc1.predict(X_test)","376d92c7":"from sklearn.metrics import accuracy_score\nprint(\"Accuracy for Random Forest on CV data: \",accuracy_score(y_test,pred))","b5637978":"def getModelEvaluationMetrics(classifier, model_name: str, x_test: pd.core.frame.DataFrame,\n                              y_test: pd.core.frame.DataFrame, y_predicted, plot_confusion_matrix=False,\n                              figsize=(10, 8)) -> np.ndarray:\n\n    conf_mat = confusion_matrix(y_true=y_test, y_pred=y_predicted)\n    print('Confusion matrix:\\n\\n {0}'.format(conf_mat))\n\n    if plot_confusion_matrix:\n        labels = ['0', '1']\n        fig = plt.figure(figsize=figsize)\n        ax = fig.add_subplot(111)\n        cax = ax.matshow(conf_mat, cmap=plt.cm.Reds)\n        fig.colorbar(cax)\n        ax.set_xticklabels([''] + labels)\n        ax.set_yticklabels([''] + labels)\n        plt.style.use('fivethirtyeight')\n        sns.set_style(\"white\")\n        plt.xlabel('Predicted')\n        plt.ylabel('Expected')\n        plt.title(f'Confusion Matrix for {model_name}', fontweight='bold')\n        plt.show()\n\n    # Calculating the precision (tp\/tp+fp)\n    precision = str(np.round((conf_mat[1][1] \/ (conf_mat[1][1] +\n                              conf_mat[0][1])) * 100, 2))\n    print('The precision is: {0} %'.format(precision))\n\n    # Calculating the recall (tp\/tp+fn)\n    recall = str(np.round((conf_mat[1][1] \/ (conf_mat[1][1] +\n                           conf_mat[1][0])) * 100, 2))\n    print('The recall is: {0} %'.format(recall))\n\n    return conf_mat","9c8fb748":"def createROCAnalysis(classifier, model_name: str, y_test: pd.core.series.Series, pred_probs: np.ndarray,\n                      plot_ROC_Curve=False, figsize=(10, 8)) -> int:\n   \n    if plot_ROC_Curve:\n        plt.figure(figsize=figsize)\n        plt.plot([0, 1], [0, 1], linestyle='--', label='No Skill Classifier')\n        fp_rate, tp_rate, _ = roc_curve(y_test, pred_probs[:, 1])\n        plt.plot(fp_rate, tp_rate, marker='.', label=model_name)\n        plt.style.use('fivethirtyeight')\n        sns.set_style(\"white\")\n        plt.xlabel('False Positive Rate')\n        plt.ylabel('True Positive Rate')\n        plt.title(f'ROC Curve for {model_name}', fontweight='bold')\n        plt.grid(True, alpha=0.1, color='black')\n        plt.legend(loc='lower right')\n        plt.show()\n\n    # Calculate Area Under Curve (AUC) for the Receiver Operating\n    # Characteristics Curve (ROC)\n    auc_score = np.round(roc_auc_score(y_test, pred_probs[:, 1]), 4)\n    print(f'{model_name} - ROC AUC score: {auc_score}')\n\n    return auc_score","a1d1ede2":"getModelEvaluationMetrics(classifier=rfc1, model_name='Random Forest',x_test=X_test, y_test=y_test,y_predicted=pred, plot_confusion_matrix=True, figsize=(8,6))","5f79cd65":"rf_pred_probs = rfc1.predict_proba(X_test)\ncreateROCAnalysis(classifier=rfc1, model_name='Random Forest', y_test=y_test, pred_probs=rf_pred_probs,\n                  plot_ROC_Curve=True, figsize=(8,6))","f1555d35":"importances = pd.DataFrame(data = rfc1.feature_importances_,index=X.columns,columns=['importances'])\nimportances.rename(columns={0: 'feature'})\nimportances","c20a8f55":"# outlier","67ecbaf3":"# **EDA**","f3b227dc":"# Model and GridSearchCV","8ec774f8":"There are no missing value by now .","929cbb96":"# ordinal encoding","3dd87c79":"Especially it seems that there are many outliers on an insulin , also range of that is pretty big .\nBesides DiabetesPedigreeFunction have outliers , however its range is narrow to compare with insulin , so I keep it by now .","6789fcc9":"# Creates New features with Age and BMI","07c4e183":"In order to fix outlier , I use Z-score .","caa65192":"I split age into 3 classes , following rules.\n\n1. young : less than 21 years old\n2. mature: more than 21 years old , but less than 50 years old\n3. senior: more than 50 years old\n\nThen I multiply age by BMI . ","cf86021b":"# Fix the modle"}}