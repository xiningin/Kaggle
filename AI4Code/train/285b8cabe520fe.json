{"cell_type":{"74cd5586":"code","e1360eef":"code","90b4746a":"code","7de0f50e":"code","817fb4af":"code","4aeec876":"code","7593b4c5":"code","f668c04a":"code","d7124de0":"code","1236d9e3":"code","c3c767fd":"code","12cc9fcc":"code","226bb0fa":"code","b0e35d05":"code","8babb67e":"code","48ecd601":"code","f39152d6":"code","1898ebb1":"code","ae45fc22":"code","8f6296b9":"code","894309ba":"code","68d41fff":"code","84cb9d59":"code","6639659b":"markdown","a4439b26":"markdown"},"source":{"74cd5586":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e1360eef":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns\n","90b4746a":"googleplay = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')\ngoogleplay.head(10)","7de0f50e":"print('Row:', googleplay.shape[0])\nprint('Columns:', googleplay.shape[1]) ","817fb4af":"googleplay.info()","4aeec876":"#Removing columns \ngoogleplay = googleplay.drop(columns=[\"Last Updated\", \"Android Ver\", \"Current Ver\"], axis=1)\n\n#Missing data\ngoogleplay.isnull().sum().sort_values(ascending=False)","7593b4c5":"#Dropping rowns withn NaN values\ngoogleplay = googleplay.dropna(axis=0)","f668c04a":"googleplay.info()","d7124de0":"#Checking and removing duplicates\ngoogleplay = googleplay[googleplay.duplicated(\"App\")].drop_duplicates(keep=False)","1236d9e3":"#Change columns \"Reviews\" for numeric\ngoogleplay[\"Reviews\"] = googleplay[\"Reviews\"].astype(np.int64)","c3c767fd":"#Converting \"Varies with device\" to NaN from columns \"Size\"\ngoogleplay[\"Size\"].replace(\"Varies with device\", np.nan,inplace=True)\n\n#Removing \"M\" and \"k\" from column \"Size\"\ngoogleplay[\"Size\"] = googleplay[\"Size\"].str.replace(\"k\",\"000\").str.replace(\"M\",\n                     \"000000\").astype(np.float64)\n\n#Replacing NaN values with the mean values of the column \"Size\"\ngoogleplay[\"Size\"].fillna(googleplay.groupby(\"Category\")[\"Size\"].transform(\"mean\"),inplace=True)","12cc9fcc":"#Removing \"$\" for columns \"Price\"\ngoogleplay[\"Price\"] = googleplay[\"Price\"].apply(lambda x:x.strip(\"$\"))\n\n#Coverting to numeric \ngoogleplay[\"Price\"] = pd.to_numeric(googleplay.Price)\n\n#Removing \"+\" and \",\" for columns \"Installs\" and converting for numeric\ngoogleplay[\"Installs\"] = googleplay[\"Installs\"].str.rstrip(\"+\").apply(lambda x: x.replace(\",\",\"\")).astype(np.int64)","226bb0fa":"#Separating genres\ngoogleplay[\"First_Genre\"] = np.nan\ngoogleplay[\"Second_Genre\"] = np.nan\n\nfor genre in googleplay[\"Genres\"].values:\n    index = googleplay[googleplay[\"Genres\"] == genre].index\n    g0 = str(genre).split(\";\")[0]\n    googleplay.loc[index,\"First_Genre\"] = str(g0)\n    g1 = str(genre).split(\";\")[-1] \n    googleplay.loc[index,\"Second_Genre\"] = str(g1)\n \ngoogleplay.drop(\"Genres\", axis=1, inplace=True)","b0e35d05":"googleplay.head(10)","8babb67e":"# App \"Category\"\ncategory = googleplay[\"Category\"].value_counts().sort_values(ascending=False)\n\nplt.figure(figsize=(16,10))\nfig_categ_bar = sns.barplot(y = category.index, x = category.values)\nplt.ylabel(ylabel='Categories', fontsize = 16)\nplt.xlabel(xlabel='Number of Apps available', fontsize = 16)\nplt.title(\"Distribution of {} Apps Among Different Categories\".format(len(category)), fontsize = 18)\n\ndef percentages(plot, column):\n    total = len(column)\n    for p in plot.patches:\n        percentage = '{:.1f}%'.format(p.get_width()\/total)\n        x = p.get_x() + p.get_width()\n        y = p.get_y() + p.get_height()\/3 \n        plot.annotate(percentage, (x, y), size = 14, verticalalignment='center')\n    \npercentages(fig_categ_bar, category.values)","48ecd601":"# App Genre\ntable_genre = pd.crosstab(index=googleplay[\"First_Genre\"], columns=googleplay[\"Second_Genre\"])\n\ntable_genre.plot(kind='barh', stacked=True, figsize=(16,16), \n        title=\"Distribution of Apps Among Different Genres\")\nplt.show()","f39152d6":"#Number of installation by category and genres\n\ninstalls_category = googleplay.groupby(\"Category\")[\"Installs\"].sum().sort_values(ascending = False)\nper_million = round(installs_category\/(1000000)).astype(int)\n\ninstalls_genre1 = googleplay.groupby(\"First_Genre\")[\"Installs\"].sum().sort_values(ascending = False)\nper_million_genre = round(installs_genre1\/(1000000)).astype(int)\n\nfig, axes = plt.subplots(1,2,figsize=(20,9))\nper_million.plot(ax=axes[0],kind='bar', x=per_million.index, y=per_million.values)\naxes[0].set_title(\"Categories most popular among users\", fontsize = 14)\naxes[0].set_xlabel(xlabel='Categories', fontsize = 14)\naxes[0].set_ylabel(ylabel='Number of Total Installations by Users (in Millions)', fontsize = 14)\nper_million_genre.plot(ax=axes[1],kind='bar', x=per_million_genre.index, y=per_million_genre.values)\naxes[1].set_title(\"Genres most popular among users\", fontsize = 14)\naxes[1].set_xlabel(xlabel='Genres', fontsize = 14)\naxes[1].set_ylabel(ylabel='Number of Total Installations by Users (in Millions)', fontsize = 14)\nplt.show()","1898ebb1":"#Top 10 apps for category:game and genre:communication more installed\n\ngame = googleplay.loc[googleplay[\"Category\"] == 'GAME'].groupby(\"App\")[\"Installs\"].sum().sort_values(ascending = False)\ngame_per_million = game.div(1000000).round().astype(int)\ncommunication = googleplay.loc[(googleplay[\"First_Genre\"] == 'Communication')].groupby(\"App\")[\"Installs\"].sum().sort_values(ascending = False)\ncommunication_per_million = communication.div(1000000).round().astype(int)\n\nfigg, ax = plt.subplots(2,1, figsize=(15,15))\nfigg.suptitle(\"Top 10 Apps\")\nax[0].set_title('Top 10 apps Categories:GAME',fontsize=10)\nax[1].set_title('Top 10 apps Genres: COMMUNICATION',fontsize=10)\nax[0].set_xlabel('Number of Total Installations by Users (in Millions)', fontsize=10)\nax[0].set_ylabel('Apps', fontsize=10)\nax[1].set_xlabel('Number of Total Installations by Users (in Millions)', fontsize=10)\nax[1].set_ylabel('Apps', fontsize=10)\n\nplot_game = game_per_million[:10]\nsns.barplot(ax=ax[0],y=plot_game.index, x=plot_game.values)\n\nplot_communication = communication_per_million[:10,]\nsns.barplot(ax=ax[1], y=plot_communication.index, x=plot_communication.values)\nplt.show()\n","ae45fc22":"#Distribution of free and paid apps according to their ratings\nfree_app = googleplay[googleplay[\"Type\"] == 'Free']\nmean = round(free_app['Rating'].mean(), 3)\npaid_app = googleplay[googleplay[\"Type\"] == 'Paid']\nmeanp = round(paid_app['Rating'].mean(), 2)\n\nfig = plt.figure(figsize=(10,10))\n\nfree_plot = sns.distplot(free_app[\"Rating\"], label='Free')\nfree_plot.axvline(mean, color='r', linestyle='-', label=\"Mean_free\")\n\npaid_plot = sns.distplot(paid_app[\"Rating\"], label='Paid')\npaid_plot.axvline(meanp, color='b', linestyle='--', label=\"Mean_paid\")\n\nplt.legend()\nplt.xlabel(\"Ratings\", fontsize = 14)\nplt.ylabel(\"Number of Apps\", fontsize = 14)\nplt.title('Distribution of free and paid app ratings', fontsize = 18)\nplt.show()","8f6296b9":"#Size x Rating for free app\nsns.set_style(\"dark\")\njoin_free = sns.jointplot(x = free_app[\"Size\"].div(1000000), y = free_app[\"Rating\"], kind='hex', height=5)\njoin_free.fig.suptitle(\"Relation between Size and Rating for free app\")\njoin_free.set_axis_labels('App Size (in Megabytes)', 'Rating of the App')\nplt.subplots_adjust(top=0.9)\n\n#Size x Rating for paid app\njoin_paid = sns.jointplot(x = paid_app[\"Size\"].div(1000000), y = paid_app[\"Rating\"], height=5)\njoin_paid.fig.suptitle(\"Relation between Size and Rating for paid app\")\njoin_paid.set_axis_labels('App Size (in Megabytes)', 'Rating of the App')\nplt.subplots_adjust(top=0.9)\nplt.show()","894309ba":"#Relationships between columns\nsns.pairplot(googleplay)","68d41fff":"#Correlation between columns\nplt.figure(figsize=(8,8))\nsns.heatmap(googleplay.corr(), cmap='Blues', annot=True, fmt=\".0%\")\nplt.show()","84cb9d59":"#Linear Regression between installs and reviews\n\nfig = plt.figure(figsize=(8,8))\nfig = sns.regplot(x=googleplay.Installs.div(1000000), y=googleplay.Reviews.div(1000000))\nfig.set_title(\"Linear Regression between  number of installs and reviews of users\")\nfig.set_xlabel(\"Installs (million)\")\nfig.set_ylabel(\"Reviews (million)\")\nplt.show()","6639659b":"## Data Cleaning","a4439b26":"## Exploratory Data Analysis"}}