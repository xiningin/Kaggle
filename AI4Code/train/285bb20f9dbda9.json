{"cell_type":{"95635bc8":"code","c812a0e0":"code","d1fffa2d":"code","6a88d96e":"code","a94e2786":"code","d25e030c":"code","887af108":"code","94cf9a75":"code","9dd7fb79":"code","ffb5d64a":"code","d62e4b9e":"code","765455ba":"code","97488f9a":"code","d6796233":"code","3c8ed3dc":"code","563b15fc":"code","c10c7ac9":"markdown","85f3b7bf":"markdown","954d7014":"markdown","58db6dcf":"markdown","95562bbc":"markdown","55b10cf8":"markdown","ce8a8b09":"markdown"},"source":{"95635bc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c812a0e0":"df = pd.read_csv(os.path.join(dirname, 'BankChurners.csv'))\ndf = df.drop(columns = [\n        'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1',\n        'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2'\n    ],\n)\n","d1fffa2d":"df.head()","6a88d96e":"num_cols = ['Customer_Age', 'Dependent_count', 'Months_on_book',\n       'Total_Relationship_Count', 'Months_Inactive_12_mon',\n       'Contacts_Count_12_mon', 'Credit_Limit', 'Total_Revolving_Bal',\n       'Avg_Open_To_Buy', 'Total_Amt_Chng_Q4_Q1', 'Total_Trans_Amt',\n       'Total_Trans_Ct', 'Total_Ct_Chng_Q4_Q1', 'Avg_Utilization_Ratio'\n]\n\ncat_cols = [x for x in df.columns if x not in ['CLIENTNUM']+num_cols]","a94e2786":"df = pd.get_dummies(\n    df,\n    columns=cat_cols\n)\n\n","d25e030c":"df.info()","887af108":"from sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression","94cf9a75":"feature_cols = [x for x in df.columns if x not in ['Attrition_Flag_Existing Customer', 'CLIENTNUM', 'Attrition_Flag_Attrited Customer']]","9dd7fb79":"X=df[feature_cols]\nY=df[['Attrition_Flag_Existing Customer']]\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=42)\n\nmodel=LogisticRegression(C=500,max_iter=50000)\nmodel.fit(X_train, np.ravel(Y_train))\n\n\nprint('Logistic Regression:')\nprint('Traning Model accruracy: {:.2%}'.format(model.score(X_train,Y_train)))\nprint('Test Model accruracy: {:.2%}'.format(model.score(X_test,Y_test['Attrition_Flag_Existing Customer'])))\n","ffb5d64a":"# examine correlations to see if we can remove some of the columns to improve accuracy.\ncorrelations = (\n    df[feature_cols]\n    .corr()\n    .reset_index()\n    .melt(\n        id_vars = ['index'],\n        var_name='col2',\n        value_name='pearsons_corr', \n    )\n    .rename(columns={'index': 'col1'})\n    .query('col1 < col2')\n    .assign(abs_corr = lambda x: abs(x['pearsons_corr']))\n    .sort_values('abs_corr', ascending=False)\n)\n\ncorrelations.head(10)","d62e4b9e":"columns_to_drop = [\n    'Gender_F', 'Avg_Open_To_Buy', 'Card_Category_Blue',\n    'Customer_Age', 'Marital_Status_Married', \n]","765455ba":"X=df[set(feature_cols) - set(columns_to_drop)]\nY=df[['Attrition_Flag_Existing Customer']]\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=42)\n\nmodel=LogisticRegression(C=500, max_iter=2000)\nmodel.fit(X_train, np.ravel(Y_train))\n\n\nprint('Logistic Regression:')\nprint('Traning Model accruracy: {:.2%}'.format(model.score(X_train,Y_train)))\nprint('Test Model accruracy: {:.2%}'.format(model.score(X_test,Y_test['Attrition_Flag_Existing Customer'])))\n","97488f9a":"from sklearn.ensemble import RandomForestClassifier\n\nX=df[set(feature_cols) - set(columns_to_drop)]\nY=df[['Attrition_Flag_Existing Customer']]\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=42)\n\nmodel=RandomForestClassifier(max_depth = 20, random_state=42)\nmodel.fit(X_train, np.ravel(Y_train))\n\n\nprint('Random Forest:')\nprint('Traning Model accruracy: {:.2%}'.format(model.score(X_train,Y_train)))\nprint('Test Model accruracy: {:.2%}'.format(model.score(X_test,Y_test['Attrition_Flag_Existing Customer'])))\n\n","d6796233":"# lets experiment with the depth of the trees\n\nX=df[set(feature_cols) - set(columns_to_drop)]\nY=df[['Attrition_Flag_Existing Customer']]\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=42)\n\nrandom_forest_results = []\n\nfor i in range(1, 30):\n    model=RandomForestClassifier(max_depth=i, random_state=42)\n    model.fit(X_train, np.ravel(Y_train))\n    score = model.score(X_test,Y_test['Attrition_Flag_Existing Customer'])\n    random_forest_results.append({\n        'max_depth': i,\n        'accuracy': score\n    })\n    \npd.DataFrame(random_forest_results).set_index('max_depth').plot()\n    ","3c8ed3dc":"from sklearn.tree import DecisionTreeClassifier\n\nX=df[set(feature_cols) - set(columns_to_drop)]\nY=df[['Attrition_Flag_Existing Customer']]\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=42)\n\nmodel=DecisionTreeClassifier(max_depth=10, random_state=42)\nmodel.fit(X_train, np.ravel(Y_train))\n\n\nprint('Decision Tree')\nprint('Traning Model accruracy: {:.2%}'.format(model.score(X_train,Y_train)))\nprint('Test Model accruracy: {:.2%}'.format(model.score(X_test,Y_test['Attrition_Flag_Existing Customer'])))\n\n\n","563b15fc":"# lets experiment with the depth of the trees\n\nX=df[set(feature_cols) - set(columns_to_drop)]\nY=df[['Attrition_Flag_Existing Customer']]\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=42)\n\ndecision_tree_results = []\n\nfor i in range(1, 30):\n    model=DecisionTreeClassifier(max_depth=i, random_state=42)\n    model.fit(X_train, np.ravel(Y_train))\n    score = model.score(X_test,Y_test['Attrition_Flag_Existing Customer'])\n    decision_tree_results.append({\n        'max_depth': i,\n        'accuracy': score\n    })\n    \npd.DataFrame(decision_tree_results).set_index('max_depth').plot()\n    ","c10c7ac9":"# Random Forest \n\nPotentially some overfitting going on here.","85f3b7bf":"# Creating a train and test set","954d7014":"# Logistic Regression on all feature columns","58db6dcf":"# Can we improve by being more selective with features?","95562bbc":"Accuracy peaks with max depth around 9.","55b10cf8":"# Load + Process data","ce8a8b09":"# Decision Tree Classifier"}}