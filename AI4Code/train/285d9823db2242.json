{"cell_type":{"1ff77c30":"code","35d08fcd":"code","698eef0f":"code","8830f4e8":"code","ef8baeb9":"code","a2955e74":"code","e7a276a5":"code","7fe29a0d":"code","14bc5293":"code","ddd7b865":"code","38b902a0":"code","089fc0d4":"code","244313a9":"code","3c827fd0":"code","487fba38":"code","6c9555a3":"code","4a6454b1":"code","820689b8":"code","7849aecc":"code","8cfa3030":"code","bed49fe3":"code","01ad542d":"code","941e53e0":"code","ab4906d4":"code","ec06c8d7":"code","2f12d0e5":"code","a6fbdd04":"code","c959e1f8":"code","98602c55":"code","b71dd28b":"code","4bd0ed54":"code","f9005390":"code","1708e4d3":"code","4d2d9792":"code","16e6dd0b":"code","4069580c":"code","745fc185":"code","27679bf5":"code","f1aaf87a":"code","41f2aa4c":"code","f7940d7c":"code","1421f03e":"code","67244f5e":"code","cba1ee16":"code","ce8eaeb4":"code","1203edc8":"code","0d461772":"code","9d323af9":"code","0be02426":"code","790d4b16":"code","8d28604a":"code","432a4ee8":"code","4f58ecd5":"code","0d8bd4ee":"code","dd7c85e4":"code","a47a74ab":"code","c7ce8d54":"code","d59a9cf4":"code","a2e74b4a":"code","2d094838":"markdown","6583127e":"markdown","dc9839cf":"markdown","ff02a5fc":"markdown","abafe24d":"markdown","ee908637":"markdown","4cf52752":"markdown","39a9338a":"markdown","c3dcd7a8":"markdown","51d7f30c":"markdown","b337afa8":"markdown","2debe5d6":"markdown","c5169db9":"markdown","a1e4f5c3":"markdown","71690255":"markdown","bae9b117":"markdown","485c098a":"markdown","4f600862":"markdown","4cf27afc":"markdown","a7b7d2eb":"markdown","d4f46a22":"markdown","dc472f89":"markdown","c48679e2":"markdown","a121f634":"markdown","16d386d7":"markdown","2e0f4000":"markdown","3e37a453":"markdown","07b16e01":"markdown","bd862b99":"markdown","4c74dd73":"markdown","2b3981b1":"markdown","6869cd6a":"markdown","1914d761":"markdown","689b97d9":"markdown","df9579d5":"markdown","f5da63e6":"markdown","17e63d82":"markdown","72edef82":"markdown","ca01f139":"markdown","f3eef3b6":"markdown","4863ce96":"markdown","3d37df5d":"markdown","46ddc6d2":"markdown","e406af3d":"markdown","f4e5ec8e":"markdown"},"source":{"1ff77c30":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","35d08fcd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV","698eef0f":"import warnings\nwarnings.filterwarnings('ignore')","8830f4e8":"data = pd.read_csv('\/kaggle\/input\/drug-classification\/drug200.csv')","ef8baeb9":"data.shape","a2955e74":"data.head()","e7a276a5":"data.isnull().sum()","7fe29a0d":"data.isna().sum()","14bc5293":"data.info()","ddd7b865":"print('Maximum age:',max(data['Age']))\nprint('Minimum age:',min(data['Age']))","38b902a0":"sb.distplot(data['Age'])","089fc0d4":"data.Sex.value_counts()","244313a9":"sb.countplot(x = data.Sex)","3c827fd0":"data.BP.value_counts()","487fba38":"sb.countplot(x = data.BP)","6c9555a3":"data.Cholesterol.value_counts()","4a6454b1":"sb.countplot(x = data.Cholesterol)","820689b8":"print(\"Maximum Sodium-Potassium ratio:\",data.Na_to_K.max())\nprint(\"Minimum Sodium-Potassium ratio:\",data.Na_to_K.min())","7849aecc":"sb.distplot(data.Na_to_K)","8cfa3030":"data.Drug.value_counts()","bed49fe3":"sb.countplot(data.Drug)","01ad542d":"sb.swarmplot(x = \"Drug\", y = \"Age\",data = data)\nplt.legend(data.Drug.value_counts().index)\nplt.title(\"Age to Drug\")","941e53e0":"print(\"Maximum Age for administering Drug A:\",data.Age[data.Drug == \"drugA\"].max())\nprint(\"Minimum Age for administering Drug B:\",data.Age[data.Drug == \"drugB\"].min())","ab4906d4":"sex_drug = data.groupby(['Drug','Sex']).size().reset_index(name = 'Count')\nsb.barplot(x = 'Drug',y = 'Count', hue = 'Sex', data = sex_drug)\nplt.title('Sex to Drug')","ec06c8d7":"BP_drug = data.groupby(['Drug','BP']).size().reset_index(name = 'Count')\nsb.barplot(x = 'Drug',y = 'Count', hue = 'BP', data = BP_drug)\nplt.title('BP to Drug')","2f12d0e5":"BP_drug = data.groupby(['Drug','Cholesterol']).size().reset_index(name = 'Count')\nsb.barplot(x = 'Drug',y = 'Count', hue = 'Cholesterol', data = BP_drug)\nplt.title('Cholesterol to Drug')","a6fbdd04":"sb.swarmplot(x = \"Drug\", y = \"Na_to_K\",data = data)\nplt.title(\"Na_to_K - Drug\")","c959e1f8":"print(\"Minimum value of Na_to_K for Drug Y:\",data.Na_to_K[data.Drug == \"DrugY\"].min())","98602c55":"data['Na_to_K>15'] = np.where(data['Na_to_K'] > 15, 1, 0)","b71dd28b":"from sklearn import preprocessing \nlabel_encode = preprocessing.LabelEncoder() ","4bd0ed54":"label_encode_list = ['Sex','BP','Cholesterol','Na_to_K>15','Drug']\n\nfor i in label_encode_list:\n    data[i] = label_encode.fit_transform(data[i])","f9005390":"data.head()","1708e4d3":"from sklearn.model_selection import train_test_split","4d2d9792":"x = data.drop(['Drug'], axis = 1)\ny = data.Drug","16e6dd0b":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42, shuffle = True)\n","4069580c":"\ny_train = y_train.values.reshape(-1,1)\ny_test = y_test.values.reshape(-1,1)","745fc185":"print('x_train shape:', x_train.shape)\nprint('x_test shape:', x_test.shape)\nprint('y_train shape:', y_train.shape)\nprint('y_test shape:', y_test.shape)","27679bf5":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\n\nknn.fit(x_train,y_train)\nknnPred = knn.predict(x_test)","f1aaf87a":"knn.score(x_test,y_test)","41f2aa4c":"grid = {'n_neighbors':np.arange(1,120),\n        'p':np.arange(1,3),\n        'weights':['uniform','distance']\n       }\nknn_cv = GridSearchCV(knn,grid,cv=5)\nknn_cv.fit(x_train,y_train)\nknnCvPred = knn_cv.predict(x_test)\nknn_cv.score(x_test,y_test)\n","f7940d7c":"knn_cv.best_params_","1421f03e":"from sklearn import tree\ndt = tree.DecisionTreeClassifier(criterion = \"entropy\")\ndt.fit(x_train, y_train)\ndtPred = dt.predict(x_test)","67244f5e":"dt.score(x_test,y_test)","cba1ee16":"grid = {'criterion':['gini','entropy'],'max_depth':np.arange(1,5)}\ndt_cv = GridSearchCV(dt, grid, cv=5)\ndt_cv.fit(x_train, y_train)\ndtCvPred = dt_cv.predict(x_test)","ce8eaeb4":"print(dt_cv.best_params_)\ndt_cv.score(x_test,y_test)","1203edc8":"from sklearn.tree import export_graphviz\nimport graphviz\n\nclass_names = ['DrugY','drugC','drugX','drugA','drugB']\nfeature_names = ['Age','Sex','BP','Cholesterol','Na_to_K','Na_to_K>15']\n\ndot_data = export_graphviz(dt, out_file=None, filled=True, rounded=True,\n                                feature_names=feature_names,  \n                                class_names=class_names)\ngraph = graphviz.Source(dot_data)  \ngraph     ","0d461772":"from sklearn.tree import export_graphviz\nimport graphviz\n\nclass_names = ['DrugY','drugC','drugX','drugA','drugB']\nfeature_names = ['Age','Sex','BP','Cholesterol','Na_to_K','Na_to_K>15']\n\ndot_data = export_graphviz(dt_cv.best_estimator_, out_file=None, filled=True, rounded=True,\n                                feature_names=feature_names,  \n                                class_names=class_names)\ngraph = graphviz.Source(dot_data)  \ngraph     ","9d323af9":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(random_state = 42)\nrfc.fit(x_train, y_train)\nrfcPred = rfc.predict(x_test)","0be02426":"print(np.mean(cross_val_score(rfc, x_train, y_train, cv=5)))\nrfc.score(x_test,y_test)","790d4b16":"grid = {'n_estimators':np.arange(100,1000,100),\n        'criterion':['gini','entropy'],\n       }\n\n\nrfc_cv = GridSearchCV(rfc, param_grid=grid, cv= 5)\nrfc_cv.fit(x_train, y_train)\nrfcCvPred = rfc_cv.predict(x_test)","8d28604a":"print(rfc_cv.best_score_)\nprint(rfc_cv.best_params_)\nprint(rfc_cv.score(x_test,y_test))","432a4ee8":"acc_knn = knn.score(x_test,y_test)\nacc_dt = dt.score(x_test,y_test)\nacc_rfc = rfc.score(x_test,y_test)","4f58ecd5":"print(acc_knn,acc_dt,acc_rfc)","0d8bd4ee":"acc_cv_knn = knn_cv.score(x_test,y_test)\nacc_cv_dt = dt_cv.score(x_test,y_test)\nacc_cv_rfc = rfc_cv.score(x_test,y_test)","dd7c85e4":"print(acc_cv_knn,acc_cv_dt,acc_cv_rfc)","a47a74ab":"from sklearn.metrics import plot_confusion_matrix\nfrom sklearn import metrics\nclass_names = ['DrugY','drugC','drugX','drugA','drugB']\n\ndispKnnConfMat = plot_confusion_matrix(knn, x_test, y_test,cmap=plt.cm.Blues,display_labels = class_names)\ndispKnnConfMat.ax_.set_title('Confusion Matrix for Knn')\n\ndispdtConfMat = plot_confusion_matrix(dt, x_test, y_test,cmap=plt.cm.Blues,display_labels = class_names)\ndispdtConfMat.ax_.set_title('Confusion Matrix for Decision Tree')\n\ndisprfcConfMat = plot_confusion_matrix(rfc, x_test, y_test,cmap=plt.cm.Blues,display_labels = class_names)\ndisprfcConfMat.ax_.set_title('Confusion Matrix for Random Forest Classifier')\nplt.show() ","c7ce8d54":"from sklearn.metrics import plot_confusion_matrix\nfrom sklearn import metrics\nclass_names = ['DrugY','drugC','drugX','drugA','drugB']\n\ndispKnnConfMat = plot_confusion_matrix(knn_cv, x_test, y_test,cmap=plt.cm.Blues,display_labels = class_names)\ndispKnnConfMat.ax_.set_title('Confusion Matrix for Knn')\n\ndispdtConfMat = plot_confusion_matrix(dt_cv, x_test, y_test,cmap=plt.cm.Blues,display_labels = class_names)\ndispdtConfMat.ax_.set_title('Confusion Matrix for Decision Tree')\n\ndisprfcConfMat = plot_confusion_matrix(rfc_cv, x_test, y_test,cmap=plt.cm.Blues,display_labels = class_names)\ndisprfcConfMat.ax_.set_title('Confusion Matrix for Random Forest Classifier')\nplt.show() ","d59a9cf4":"report_knn = metrics.classification_report(y_test, knnPred,target_names=class_names)\nreport_dt = metrics.classification_report(y_test, dtPred,target_names=class_names)\nreport_rfc= metrics.classification_report(y_test, rfcPred,target_names=class_names)\nprint(report_knn,report_dt,report_rfc,sep = '\\n\\n')","a2e74b4a":"report_knn = metrics.classification_report(y_test, knnCvPred,target_names=class_names)\nreport_dt = metrics.classification_report(y_test, dtCvPred,target_names=class_names)\nreport_rfc= metrics.classification_report(y_test, rfcCvPred,target_names=class_names)\nprint(report_knn,report_dt,report_rfc,sep = '\\n\\n')","2d094838":"## Age:\n### Age of the patient","6583127e":"## Sex - Drug","dc9839cf":"Drug A is administered to patients below 50 years.\n\nDrug B is administered to patients above 51 years.","ff02a5fc":"## BP - Drug","abafe24d":"# Train-Test split for the dataset","ee908637":"## Decision Tree Classifier","4cf52752":"## Sex:\n### Sex of the patient","39a9338a":"BP ratio seems to be balanced.\n\nSince it is a categorical variable, we convert it to numeric using label encoder in python","c3dcd7a8":"### with GSCV","51d7f30c":"Cholesterol ratio seems to be balanced.\n\nSince it is a categorical variable, we convert it to numeric using label encoder in python","b337afa8":"From this graph, we find Sex is not an important feature for classification.","2debe5d6":"### Without GSCV","c5169db9":"## Na_to_K:\n### Sodium-Potassium ratio in patient's blood","a1e4f5c3":"## Drug:\n### Drug administered to the patient","71690255":"# Relationship between features and target value:","bae9b117":"Sodium-Potassium ratio ranges from 6.269 to 38.247","485c098a":"Dataset is split into training and test data in 4:1 ratio","4f600862":"Drug C is only administered for patients with HIGH Cholesterol.\n\nCholesterol is important feature to classify Drug C.","4cf27afc":"## KNN Classifier","a7b7d2eb":"## Feature analysis","d4f46a22":"## Age - Drug","dc472f89":"Drug is the target column(value) or label.","c48679e2":"### With GSCV","a121f634":"## Cholesterol:\n### Cholesterol of the patient","16d386d7":"# Exploratory Data Analysis","2e0f4000":"## Accuracy\n","3e37a453":"## Report","07b16e01":"### With GSCV","bd862b99":"## Na_to_K - Drug","4c74dd73":"Sex ratio seems to be balanced.\n\nSince it is a categorical variable, we convert it to numeric using label encoder in python","2b3981b1":"Drug A and Drug B is administered only for people who have HIGH blood pressure.\n\nDrug C is administered only for people who have LOW blood pressure.\n\nBP is an important feature for classification.","6869cd6a":"# Performance metrics of Models\n","1914d761":"## Label Encoding","689b97d9":"### Without GSCV","df9579d5":"## BP:\n\n### Blood Pressure of patient","f5da63e6":"### Confusion Matrix Plot","17e63d82":"People who have Na_to_K ratio is greater than 15, Drug Y is administered.\n\nWe can create a new feature from this feature for better classification of Drug Y.","72edef82":"## Feature Engineering","ca01f139":"# Model for the data","f3eef3b6":"## Cholesterol - Drug","4863ce96":"### Without GSCV\n","3d37df5d":"Age ranges from 15 to 74","46ddc6d2":"No missing or null values in data\n\n200 data variables and 6 features(including the label)","e406af3d":"# Data preprocessing:","f4e5ec8e":"## Random Forest Classifier"}}