{"cell_type":{"d00893f2":"code","56b0938e":"code","a5cb073b":"code","0df96394":"code","fd4bd50e":"code","f3ac0d4f":"code","ffd285f0":"code","7e2176ed":"code","4218cfaa":"code","c5e33de3":"code","6d36c93e":"code","c6063c17":"code","d26c28a2":"code","ea0e465b":"code","3d73955e":"code","12316a0d":"code","f2019bb2":"code","820d01dc":"code","e95bffb4":"code","e3a4dd17":"code","229cda63":"code","8a3a19d7":"code","b3134c27":"code","af5c59ef":"code","68f29909":"code","c803830c":"code","45115a24":"code","53d20bdc":"code","2711eba1":"code","af97cfa4":"code","98b808ae":"code","07f4f9bb":"code","0389cb00":"code","6eebb0db":"code","5c9b81e5":"code","65cd42e0":"code","bf7bb5cf":"code","e8bca70e":"code","ac413293":"code","977a10d3":"code","1413a6ac":"code","18727b47":"code","bffb7d0b":"code","0532e49c":"code","a0048d41":"markdown","ebf74ef5":"markdown","18801cbf":"markdown"},"source":{"d00893f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","56b0938e":"import re\n\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\n%matplotlib inline\n\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer \n\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('wordnet')\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score","a5cb073b":"df = pd.read_csv('\/kaggle\/input\/sms-spam-collection-dataset\/spam.csv', encoding='latin-1' )","0df96394":"df.head()","fd4bd50e":"df.columns","f3ac0d4f":"df = df.filter(['v1', 'v2'])","ffd285f0":"df.head()","7e2176ed":"df.columns = ('label', 'text')","4218cfaa":"df.head()","c5e33de3":"df.label.unique()","6d36c93e":"df.groupby('label').describe()","c6063c17":"df.label.value_counts().plot(kind='bar')","d26c28a2":"df['text'] = df['text'].apply(lambda x: x.lower())\ndf['text'] = df['text'].replace(r'[^A-Za-z0-9 ]+', '', regex=True)","ea0e465b":"df.head()","3d73955e":"def clean_text(text, lemmatizer = WordNetLemmatizer(), \n                  stop_words = set(stopwords.words('english'))):\n      \n    words = word_tokenize(text)\n    \n    filtered_words = []\n    \n    for word in words:\n        \n        if word not in stop_words and word.isalpha():\n            filtered_words.append(lemmatizer.lemmatize(word))\n    \n    return filtered_words","12316a0d":"df_spam = df[df['label'] == 'spam']","f2019bb2":"df_spam.head()","820d01dc":"spam_nested_list = df_spam['text'].apply(lambda x: clean_text(x))","e95bffb4":"spam_nested_list[:10]","e3a4dd17":"word_length_spam = [len(w) for w in spam_nested_list]","229cda63":"plt.hist(word_length_spam, bins=25)\nplt.title('WordLength for spam text')\nplt.ylabel('count')\nplt.xlabel('Length of text')\nplt.grid()\nplt.show()","8a3a19d7":"df_spam.head()","b3134c27":"words_spam = clean_text(''.join(str(df_spam['text'].tolist())))","af5c59ef":"words_spam[:15]","68f29909":"(pd.Series(nltk.ngrams(words_spam, 2)).value_counts())[:12]","c803830c":"(pd.Series(nltk.ngrams(words_spam, 3)).value_counts())[:12]","45115a24":"bigrams_series_spam = (pd.Series(nltk.ngrams(words_spam, 2)).value_counts())[:12]\ntrigrams_series_spam = (pd.Series(nltk.ngrams(words_spam, 3)).value_counts())[:12]\n\nbigrams_series_spam.sort_values().plot.barh(color='blue', width=.9, figsize=(12, 8))\nplt.title('20 Most Frequently Occuring Bigrams')\nplt.ylabel('Bigram')\nplt.xlabel('# of Occurances')","53d20bdc":"word_cloud = WordCloud( background_color='white', colormap='winter')\nword_cloud.generate(','.join(words_spam))\nplt.imshow(word_cloud, interpolation='bilinear')\nplt.axis('off')\nplt.show()","2711eba1":"df_ham = df[df['label'] == 'ham']","af97cfa4":"df_ham.sample(15)","98b808ae":"ham_nested_list = df_ham['text'].apply(lambda x: clean_text(x))","07f4f9bb":"ham_nested_list[:10]","0389cb00":"word_length_ham = [len(w) for w in ham_nested_list]\n\nplt.hist(word_length_ham, bins=25)\nplt.title('WordLength for spam text')\nplt.ylabel('count')\nplt.xlabel('Length of text')\nplt.grid()\nplt.show()","6eebb0db":"words_ham = clean_text(''.join(str(df_ham['text'].tolist())))","5c9b81e5":"(pd.Series(nltk.ngrams(words_ham, 2)).value_counts())[:12]","65cd42e0":"(pd.Series(nltk.ngrams(words_ham, 3)).value_counts())[:12]","bf7bb5cf":"bigrams_series_ham = (pd.Series(nltk.ngrams(words_ham, 2)).value_counts())[:12]\ntrigrams_series_ham = (pd.Series(nltk.ngrams(words_ham, 3)).value_counts())[:12]\n\nbigrams_series_ham.sort_values().plot.barh(color='blue', width=.9, figsize=(12, 8))\nplt.title('20 Most Frequently Occuring Bigrams')\nplt.ylabel('Bigram')\nplt.xlabel('# of Occurances')","e8bca70e":"word_cloud = WordCloud( background_color='white', colormap='winter')\nword_cloud.generate(','.join(words_ham))\nplt.imshow(word_cloud, interpolation='bilinear')\nplt.axis('off')\nplt.show()","ac413293":"vectorizer = CountVectorizer(stop_words='english')","977a10d3":"X = df['text']\ny = df['label']","1413a6ac":"X_train, X_test, y_train,y_test = train_test_split(X, y, test_size=0.3)","18727b47":"X_vect = vectorizer.fit_transform(X_train)","bffb7d0b":"nb = MultinomialNB()\n\nnb.fit(X_vect,y_train)\ny_pred = nb.predict(vectorizer.transform(X_test))","0532e49c":"print(accuracy_score(y_test,y_pred))","a0048d41":"# PREDICTING","ebf74ef5":"# Spam EDA","18801cbf":"# Ham EDA"}}