{"cell_type":{"6e268381":"code","b9dfd12f":"code","71e2f6e9":"code","033a330d":"code","47d89106":"code","16b5a3a3":"code","96a719b5":"code","1a35fb5e":"code","865a28f2":"code","6c24b4b1":"code","36d5af68":"code","2654df15":"code","825236ca":"code","d1971e48":"code","7544e3c2":"code","79a76413":"code","eb3114ae":"code","9641d0a4":"code","4f017c14":"code","6b129219":"code","3fdda9cf":"code","5655a530":"code","e1d7043d":"code","d479358e":"code","f519704b":"code","0d047e17":"code","a474f36c":"code","444351d7":"code","67bbfe93":"code","3848d35b":"code","f01f5bd5":"code","3f91ee18":"code","854e04bc":"code","003d3304":"code","8d5d66d3":"code","14613673":"code","c8c8c58c":"code","91b931cc":"code","a7f006ee":"code","324ee0f0":"code","379507d1":"code","fd5a3659":"code","c24dd9e1":"code","49636734":"code","d3a30c0e":"code","9a1b3d44":"code","23b817bb":"code","1947097c":"code","61a917d2":"code","d72c9dba":"code","dcb36d39":"code","096e447b":"code","a384d633":"code","1c2cdc80":"code","c9449396":"code","61a1744b":"code","fb04033f":"code","e7ddb7f1":"code","6bd11fc7":"code","f6fd5a51":"code","ffbea1da":"code","6d6cdf21":"code","632a3938":"code","fd9f489a":"code","8fac9b22":"code","b7f7dd91":"code","0c1e3030":"code","7b7148f0":"code","15bf4ea3":"code","fe75c2b6":"code","a5a77e17":"code","8f2180f4":"code","496cf9dd":"code","708af38b":"code","a35ea36f":"code","3703d117":"code","cfd91c83":"code","7b24c828":"code","e8b087c2":"code","91e5b927":"code","d011ec3a":"code","15a8d710":"code","0f8d630a":"code","1735ad09":"code","b5dd76a0":"code","ad0ee7b7":"code","98b4d885":"code","c148e108":"code","00df9b2a":"code","0b028dd1":"code","f4af1473":"code","151be8e9":"code","0640a44d":"markdown","6a371a6f":"markdown","c8a25601":"markdown","3559eee1":"markdown","a582185a":"markdown","90c82930":"markdown","609d1aa4":"markdown","89bc64df":"markdown","a8b965b3":"markdown","5d379c84":"markdown","7bdadf06":"markdown"},"source":{"6e268381":"import sys\n!conda install --yes --prefix {sys.prefix} -c plotly plotly-orca ","b9dfd12f":"!pip install wget\n!pip install calmap\n!pip install psutil requests","71e2f6e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nfrom datetime import timedelta\nfrom IPython.display import FileLink\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import plot, iplot, init_notebook_mode\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport warnings\nimport calmap\nimport folium\nimport wget\nimport math\nimport os\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nwarnings.filterwarnings('ignore')\ninit_notebook_mode(connected=True)\n\nif not os.path.exists(\"images\"):\n    os.mkdir(\"images\")\n\nif not os.path.exists(\"Maps\"):\n    os.mkdir(\"Maps\")\n    \nif not os.path.exists(\"Datasets\"):\n    os.mkdir(\"Datasets\")\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","033a330d":"# Color pallete\nActive, Recovered, Confirmed, Deceased, Color_1, Color_2 =  '#ff073a', '#28a745', '#007bff', '#6c757d', '#FE9801', '#FF0F80'","47d89106":"# remove existing files\n! rm *.csv\n\n# urls of the files\nurls = ['https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv', \n        'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv',\n        'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv']\n\n# download files\nfor url in urls:\n    filename = wget.download(url)","16b5a3a3":"confirmed_df = pd.read_csv('time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('time_series_covid19_deaths_global.csv')\nrecovered_df = pd.read_csv('time_series_covid19_recovered_global.csv')\ncov = pd.read_csv(\"..\/input\/covid19-useful-features-by-country\/Countries_usefulFeatures.csv\")\ncountry_geo = \"..\/input\/world-countries\/world-countries.json\"","96a719b5":"print(confirmed_df.shape)\nprint(deaths_df.shape)\nprint(recovered_df.shape)","1a35fb5e":"confirmed_df.head()","865a28f2":"deaths_df.head()","6c24b4b1":"recovered_df.head()","36d5af68":"dates = confirmed_df.columns[4:]\n\nconfirmed_df_long = confirmed_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                            value_vars=dates, var_name='Date', value_name='Confirmed')\ndeaths_df_long = deaths_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                            value_vars=dates, var_name='Date', value_name='Deaths')\nrecovered_df_long = recovered_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                            value_vars=dates, var_name='Date', value_name='Recovered')\n\nprint(confirmed_df_long.shape)\nprint(deaths_df_long.shape)\nprint(recovered_df_long.shape)","2654df15":"full_table = pd.merge(left=confirmed_df_long, right=deaths_df_long, how='left',\n                      on=['Province\/State', 'Country\/Region', 'Date', 'Lat', 'Long'])\nfull_table = pd.merge(left=full_table, right=recovered_df_long, how='outer',\n                      on=['Province\/State', 'Country\/Region', 'Date', 'Lat', 'Long'])\n\nfull_table.head()","825236ca":"full_table.shape","d1971e48":"full_table.isna().sum()","7544e3c2":"full_table['Recovered'] = full_table['Recovered'].fillna(0)\nfull_table['Recovered'] = full_table['Recovered'].astype('int')\nfull_table['Deaths'] = full_table['Deaths'].fillna(0)\nfull_table['Deaths'] = full_table['Deaths'].astype('int')\nfull_table['Confirmed'] = full_table['Confirmed'].fillna(0)\nfull_table['Confirmed'] = full_table['Confirmed'].astype('int')\nfull_table.isna().sum()","79a76413":"full_table['Country\/Region'].unique()","eb3114ae":"full_table['Province\/State'].unique()","9641d0a4":"full_table['Country\/Region'] = full_table['Country\/Region'].replace('Korea, South', 'South Korea')\nfull_table['Country\/Region'].unique()","4f017c14":"full_table = full_table[full_table['Province\/State'].str.contains('Recovered')!=True]\nfull_table = full_table[full_table['Province\/State'].str.contains('Grand Princess')!=True]\nfull_table = full_table[full_table['Province\/State'].str.contains('Diamond Princess')!=True]\nfull_table['Province\/State'].unique()","6b129219":"# Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\nfull_table.sample(10)","3fdda9cf":"full_table['Date'] = pd.to_datetime(full_table.Date)\nfull_table.sort_values(by=['Date'], inplace=True)\nfull_table.head()","5655a530":"full_table.to_csv('.\/Datasets\/covid_19_cleaned.csv', index=False)","e1d7043d":"# Grouped by day, country\n# =======================\n\nfull_grouped = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\n\n# new cases ======================================================\ntemp = full_grouped.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\n# renaming columns\ntemp.columns = ['Country\/Region', 'Date', 'No_Of_New_Cases', 'No_Of_New_Deaths', 'No_Of_New_Recovered']\n# =================================================================\n\n# merging new values\nfull_grouped = pd.merge(full_grouped, temp, on=['Country\/Region', 'Date'])\n\n# filling na with 0\nfull_grouped = full_grouped.fillna(0)\n\n# fixing data types\ncols = ['No_Of_New_Cases', 'No_Of_New_Deaths', 'No_Of_New_Recovered']\nfull_grouped[cols] = full_grouped[cols].astype('int')\n\nfull_grouped['No_Of_New_Cases'] = full_grouped['No_Of_New_Cases'].apply(lambda x: 0 if x<0 else x)\nfull_grouped['No_Of_New_Deaths'] = full_grouped['No_Of_New_Deaths'].apply(lambda x: 0 if x<0 else x)\nfull_grouped['No_Of_New_Recovered'] = full_grouped['No_Of_New_Recovered'].apply(lambda x: 0 if x<0 else x)\n\n\nfull_grouped.sample(10)","d479358e":"cov.rename(columns={'Country_Region': 'Country\/Region'}, inplace=True)\nfull_grouped = pd.merge(full_grouped,cov[['Latitude','Longtitude','Country\/Region']], on='Country\/Region')\nfull_grouped.head()","f519704b":"full_grouped.to_csv('.\/Datasets\/covid_19_country_wise.csv', index=False)","0d047e17":"# Per Day\n# ========\n\nPer_Day = full_grouped.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active', 'No_Of_New_Cases'].sum().reset_index()\n\nPer_Day['% Deaths'] = round((Per_Day['Deaths']\/Per_Day['Confirmed'])*100, 2)\nPer_Day['% Recovered'] = round((Per_Day['Recovered']\/Per_Day['Confirmed'])*100, 2)\nPer_Day['% Deaths Per Recovered'] = round((Per_Day['Deaths']\/Per_Day['Recovered'])*100, 2)\nPer_Day['% New Cases'] = round((Per_Day['No_Of_New_Cases']\/Per_Day['Confirmed'])*100, 2)\n\n# no. of countries\nPer_Day['Total Countries'] = full_grouped[full_grouped['Confirmed']!=0].groupby('Date')['Country\/Region'].unique().apply(len).values\n\n# fillna by 0\ncols = ['% Deaths', '% Recovered', '% Deaths Per Recovered', '% New Cases']\nPer_Day[cols] = Per_Day[cols].fillna(0)\n\nPer_Day.head()","a474f36c":"Country_Wise_Lastest = full_grouped[full_grouped['Date'] == max(full_grouped['Date'])]\nCountry_Wise_Lastest.head()","444351d7":"# Top 25 Countries\nCountries = full_grouped[full_grouped['Date']==max(full_grouped['Date'])]\nCountries = Countries.reset_index(drop=True)\n\nTop_Countries = Countries.sort_values(by=['Confirmed'],ascending=False)\nTop_Countries = Top_Countries.iloc[:25,:]\nTop_Countries = Top_Countries.reset_index(drop=True)\n\n\nTop_Countries = pd.merge(Top_Countries, cov, on='Country\/Region')\n\nToday = full_grouped[full_grouped['Date']==max(full_grouped['Date'])].reset_index(drop=True).drop('Date', axis=1)[['Country\/Region', 'Confirmed']]\nPrevious_week = full_grouped[full_grouped['Date']==max(full_grouped['Date'])-timedelta(days=7)].reset_index(drop=True).drop('Date', axis=1)[['Country\/Region', 'Confirmed']]\nPrevious_Month = full_grouped[full_grouped['Date']==max(full_grouped['Date'])-timedelta(days=30)].reset_index(drop=True).drop('Date', axis=1)[['Country\/Region', 'Confirmed']]\n\ntemp = pd.merge(Previous_week, Previous_Month, on='Country\/Region', suffixes=(' last week', ' last month'))\ntemp = pd.merge(Today, temp, on='Country\/Region')\ntemp['New Last Week'] = temp['Confirmed'] - temp['Confirmed last week'] \ntemp['New Last Month'] = temp['Confirmed'] - temp['Confirmed last month']\n\nTop_Countries = pd.merge(Top_Countries, temp[['New Last Week', 'New Last Month', 'Country\/Region']], on='Country\/Region')\nTop_Countries['Population in Millions'] = round(Top_Countries['Population_Size'] \/ 1000000, 2)\nTop_Countries['Cases per Million People'] = round(Top_Countries['Confirmed'] \/ Top_Countries['Population in Millions'])\nTop_Countries['Cases per Million People'] = Top_Countries['Cases per Million People'].astype('int')\n\nTop_Countries.head()","67bbfe93":"Top_Countries_Daily = pd.merge(Top_Countries[['Country\/Region']], full_grouped, on='Country\/Region', how='left')\nTop_Countries_Daily.head()","3848d35b":"Per_Day.to_csv('.\/Datasets\/covid_19_Per_Day.csv', index=False)\nCountry_Wise_Lastest.to_csv('.\/Datasets\/covid_19_Country_Wise_Lastest.csv', index=False)\nTop_Countries.to_csv('.\/Datasets\/covid_19_Top_Countries.csv', index=False)\nTop_Countries_Daily.to_csv('.\/Datasets\/covid_19_Top_Countries_Daily.csv', index=False)\ncov.to_csv('.\/Datasets\/covid_19_Countries_usefulFeatures.csv', index=False)","f01f5bd5":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\n\nmelted_temp = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(melted_temp, path=[\"variable\"], values=\"value\", height=250, width=1200,\n                 color_discrete_sequence=[Active, Recovered, Deceased])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\nfig.write_image(\"images\/treemap_overview.svg\")","3f91ee18":"fig = px.pie(melted_temp, values=\"value\", height=750, names='variable', title='Covid 19',\n                 color_discrete_sequence=[Active, Recovered, Deceased])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\nfig.write_image(\"images\/piechart_overview.svg\")","854e04bc":"temp = full_grouped.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case', height=600,\n             title='Cases over time', color_discrete_sequence = [Recovered, Deceased, Active])\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()\nfig.write_image(\"images\/area_overview.svg\")","003d3304":"fig_1 = px.bar(Per_Day, x=\"Date\", y=\"Confirmed\", color_discrete_sequence = [Confirmed])\nfig_2 = px.bar(Per_Day, x=\"Date\", y=\"Active\", color_discrete_sequence = [Active])\nfig_3 = px.bar(Per_Day, x=\"Date\", y=\"Recovered\", color_discrete_sequence = [Recovered])\nfig_4 = px.bar(Per_Day, x=\"Date\", y=\"Deaths\", color_discrete_sequence = [Deceased])\nfig_5 = px.bar(Per_Day, x=\"Date\", y=\"No_Of_New_Cases\", color_discrete_sequence = [Color_1])\nfig_6 = px.bar(Per_Day, x=\"Date\", y=\"Total Countries\", color_discrete_sequence = [Color_2])\n\nfig = make_subplots(rows=3, cols=2, shared_xaxes=True, horizontal_spacing=0.1,\n                    subplot_titles=('Confirmed cases', 'Active Cases', 'Recovered Cases', 'Deaths reported',\n                                   'New Cases', 'Countries Affected'))\n\nfig.add_trace(fig_1['data'][0], row=1, col=1)\nfig.add_trace(fig_2['data'][0], row=1, col=2)\nfig.add_trace(fig_3['data'][0], row=2, col=1)\nfig.add_trace(fig_4['data'][0], row=2, col=2)\nfig.add_trace(fig_5['data'][0], row=3, col=1)\nfig.add_trace(fig_6['data'][0], row=3, col=2)\n\nfig.update_layout(height=1200, title=\"Day Wise\")\nfig.show()\nfig.write_image(\"images\/Per_Day_Bar.svg\")","8d5d66d3":"fig_1 = px.bar(Per_Day, x=\"Date\", y=\"Confirmed\", color_discrete_sequence = [Confirmed])\nfig_2 = px.bar(Per_Day, x=\"Date\", y=\"Active\", color_discrete_sequence = [Active])\nfig_3 = px.bar(Per_Day, x=\"Date\", y=\"Recovered\", color_discrete_sequence = [Recovered])\nfig_4 = px.bar(Per_Day, x=\"Date\", y=\"Deaths\", color_discrete_sequence = [Deceased])\nfig_5 = px.bar(Per_Day, x=\"Date\", y=\"No_Of_New_Cases\", color_discrete_sequence = [Color_1])\nfig_6 = px.bar(Per_Day, x=\"Date\", y=\"Total Countries\", color_discrete_sequence = [Color_2])\n\nfig = make_subplots(rows=3, cols=2, shared_xaxes=False, horizontal_spacing=0.1,\n                    subplot_titles=('Confirmed cases', 'Active Cases', 'Recovered Cases', 'Deaths reported',\n                                   'New Cases', 'Countries Affected'))\n\nfig.add_trace(fig_1['data'][0], row=1, col=1)\nfig.add_trace(fig_2['data'][0], row=1, col=2)\nfig.add_trace(fig_3['data'][0], row=2, col=1)\nfig.add_trace(fig_4['data'][0], row=2, col=2)\nfig.add_trace(fig_5['data'][0], row=3, col=1)\nfig.add_trace(fig_6['data'][0], row=3, col=2)\n\nfig.update_layout(height=1200,yaxis_type=\"log\", yaxis2_type=\"log\" ,yaxis3_type=\"log\" ,yaxis4_type=\"log\" ,yaxis5_type=\"log\" ,yaxis6_type=\"log\"\n                  , title=\"Day Wise Logarithmic\")\nfig.show()\nfig.write_image(\"images\/Per_Day_Logarithmic_Bar.svg\")","14613673":"fig_1 = px.bar(Per_Day, x=\"Date\", y=\"% Recovered\", color_discrete_sequence = [Recovered])\nfig_2 = px.bar(Per_Day, x=\"Date\", y=\"% Deaths\", color_discrete_sequence = [Active])\nfig_3 = px.bar(Per_Day, x=\"Date\", y=\"% Deaths Per Recovered\", color_discrete_sequence = [\"#161617\"])\nfig_4 = px.bar(Per_Day, x=\"Date\", y=\"% New Cases\", color_discrete_sequence = [Color_1])\n\nfig = make_subplots(rows=2, cols=2, shared_xaxes=False, horizontal_spacing=0.1,\n                    subplot_titles=('% Recovered cases', '% Deaths', '% Deaths Per Recovered', '% New Cases'))\n\nfig.add_trace(fig_1['data'][0], row=1, col=1)\nfig.add_trace(fig_2['data'][0], row=1, col=2)\nfig.add_trace(fig_3['data'][0], row=2, col=1)\nfig.add_trace(fig_4['data'][0], row=2, col=2)\n\n\nfig.update_layout(height=800, title=\"% Day Wise\")\nfig.show()\nfig.write_image(\"images\/%_Per_Day_Bar.svg\")","c8c8c58c":"fig_1 = px.bar(Per_Day, x=\"Date\", y=\"% Recovered\", color_discrete_sequence = [Recovered])\nfig_2 = px.bar(Per_Day, x=\"Date\", y=\"% Deaths\", color_discrete_sequence = [Active])\nfig_3 = px.bar(Per_Day, x=\"Date\", y=\"% Deaths Per Recovered\", color_discrete_sequence = [\"#161617\"])\nfig_4 = px.bar(Per_Day, x=\"Date\", y=\"% New Cases\", color_discrete_sequence = [Color_1])\n\nfig = make_subplots(rows=2, cols=2, shared_xaxes=False, horizontal_spacing=0.1,\n                    subplot_titles=('% Recovered cases', '% Deaths', '% Deaths Per Recovered', '% New Cases'))\n\nfig.add_trace(fig_1['data'][0], row=1, col=1)\nfig.add_trace(fig_2['data'][0], row=1, col=2)\nfig.add_trace(fig_3['data'][0], row=2, col=1)\nfig.add_trace(fig_4['data'][0], row=2, col=2)\n\nfig.update_layout(height=800,yaxis_type=\"log\", yaxis2_type=\"log\" ,yaxis3_type=\"log\" ,yaxis4_type=\"log\", title=\"% Day Wise Logarithmic\")\nfig.show()\nfig.write_image(\"images\/%_Per_Day_Logarithmic_Bar.svg\")","91b931cc":"fig_1 = px.line(Per_Day, x=\"Date\", y=\"Confirmed\", color_discrete_sequence = [Confirmed])\nfig_2 = px.line(Per_Day, x=\"Date\", y=\"Active\", color_discrete_sequence = [Active])\nfig_3 = px.line(Per_Day, x=\"Date\", y=\"Recovered\", color_discrete_sequence = [Recovered])\nfig_4 = px.line(Per_Day, x=\"Date\", y=\"Deaths\", color_discrete_sequence = [Deceased])\nfig_5 = px.line(Per_Day, x=\"Date\", y=\"No_Of_New_Cases\", color_discrete_sequence = [Color_1])\nfig_6 = px.line(Per_Day, x=\"Date\", y=\"Total Countries\", color_discrete_sequence = [Color_2])\n\nfig = make_subplots(rows=3, cols=2, shared_xaxes=False, horizontal_spacing=0.1,\n                    subplot_titles=('Confirmed cases', 'Active Cases', 'Recovered Cases', 'Deaths reported',\n                                   'New Cases', 'Countries Affected'))\n\nfig.add_trace(fig_1['data'][0], row=1, col=1)\nfig.add_trace(fig_2['data'][0], row=1, col=2)\nfig.add_trace(fig_3['data'][0], row=2, col=1)\nfig.add_trace(fig_4['data'][0], row=2, col=2)\nfig.add_trace(fig_5['data'][0], row=3, col=1)\nfig.add_trace(fig_6['data'][0], row=3, col=2)\n\nfig.update_layout(height=1200, title=\"Day Wise\")\nfig.show()\nfig.write_image(\"images\/Per_Day_Line.svg\")","a7f006ee":"fig_1 = px.line(Per_Day, x=\"Date\", y=\"Confirmed\", color_discrete_sequence = [Confirmed])\nfig_2 = px.line(Per_Day, x=\"Date\", y=\"Active\", color_discrete_sequence = [Active])\nfig_3 = px.line(Per_Day, x=\"Date\", y=\"Recovered\", color_discrete_sequence = [Recovered])\nfig_4 = px.line(Per_Day, x=\"Date\", y=\"Deaths\", color_discrete_sequence = [Deceased])\nfig_5 = px.line(Per_Day, x=\"Date\", y=\"No_Of_New_Cases\", color_discrete_sequence = [Color_1])\nfig_6 = px.line(Per_Day, x=\"Date\", y=\"Total Countries\", color_discrete_sequence = [Color_2])\n\nfig = make_subplots(rows=3, cols=2, shared_xaxes=False, horizontal_spacing=0.1,\n                    subplot_titles=('Confirmed cases', 'Active Cases', 'Recovered Cases', 'Deaths reported',\n                                   'New Cases', 'Countries Affected'))\n\nfig.add_trace(fig_1['data'][0], row=1, col=1)\nfig.add_trace(fig_2['data'][0], row=1, col=2)\nfig.add_trace(fig_3['data'][0], row=2, col=1)\nfig.add_trace(fig_4['data'][0], row=2, col=2)\nfig.add_trace(fig_5['data'][0], row=3, col=1)\nfig.add_trace(fig_6['data'][0], row=3, col=2)\n\nfig.update_layout(height=1200,yaxis_type=\"log\", yaxis2_type=\"log\" ,yaxis3_type=\"log\" ,yaxis4_type=\"log\" ,yaxis5_type=\"log\" ,yaxis6_type=\"log\"\n                  , title=\"Day Wise Logarithmic\")\nfig.show()\nfig.write_image(\"images\/Per_Day_Logarithmic_Line.svg\")","324ee0f0":"fig_1 = px.line(Per_Day, x=\"Date\", y=\"% Recovered\", color_discrete_sequence = [Recovered])\nfig_2 = px.line(Per_Day, x=\"Date\", y=\"% Deaths\", color_discrete_sequence = [Active])\nfig_3 = px.line(Per_Day, x=\"Date\", y=\"% Deaths Per Recovered\", color_discrete_sequence = [\"#161617\"])\nfig_4 = px.line(Per_Day, x=\"Date\", y=\"% New Cases\", color_discrete_sequence = [Color_1])\n\nfig = make_subplots(rows=2, cols=2, shared_xaxes=False, horizontal_spacing=0.1,\n                    subplot_titles=('% Recovered cases', '% Deaths', '% Deaths Per Recovered', '% New Cases'))\n\nfig.add_trace(fig_1['data'][0], row=1, col=1)\nfig.add_trace(fig_2['data'][0], row=1, col=2)\nfig.add_trace(fig_3['data'][0], row=2, col=1)\nfig.add_trace(fig_4['data'][0], row=2, col=2)\n\n\nfig.update_layout(height=800, title=\"% Day Wise\")\nfig.show()\nfig.write_image(\"images\/%_Per_Day_Line.svg\")","379507d1":"fig_1 = px.line(Per_Day, x=\"Date\", y=\"% Recovered\", color_discrete_sequence = [Recovered])\nfig_2 = px.line(Per_Day, x=\"Date\", y=\"% Deaths\", color_discrete_sequence = [Active])\nfig_3 = px.line(Per_Day, x=\"Date\", y=\"% Deaths Per Recovered\", color_discrete_sequence = [\"#161617\"])\nfig_4 = px.line(Per_Day, x=\"Date\", y=\"% New Cases\", color_discrete_sequence = [Color_1])\n\nfig = make_subplots(rows=2, cols=2, shared_xaxes=False, horizontal_spacing=0.1,\n                    subplot_titles=('% Recovered cases', '% Deaths', '% Deaths Per Recovered', '% New Cases'))\n\nfig.add_trace(fig_1['data'][0], row=1, col=1)\nfig.add_trace(fig_2['data'][0], row=1, col=2)\nfig.add_trace(fig_3['data'][0], row=2, col=1)\nfig.add_trace(fig_4['data'][0], row=2, col=2)\n\nfig.update_layout(height=800,yaxis_type=\"log\", yaxis2_type=\"log\" ,yaxis3_type=\"log\" ,yaxis4_type=\"log\", title=\"% Day Wise Logarithmic\")\nfig.show()\nfig.write_image(\"images\/%_Per_Day_Logarithmic_Line.svg\")","fd5a3659":"# World wide\ntemp = full_grouped[full_grouped['Date'] == max(full_grouped['Date'])]\n\n_map = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1.5)\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Latitude'], temp.iloc[i]['Longtitude']],\n        color=Confirmed, fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country\/Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['Confirmed'])+\n                    '<li><bold>Active : '+str(temp.iloc[i]['Active'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Deaths'])+\n                    '<li><bold>New Cases : '+str(temp.iloc[i]['No_Of_New_Cases'])+\n                    '<li><bold>New Death : '+str(temp.iloc[i]['No_Of_New_Deaths'])+\n                    '<li><bold>New Recovered : '+str(temp.iloc[i]['No_Of_New_Recovered']),\n        radius=int(temp.iloc[i]['Confirmed'])).add_to(_map)\n_map.save('.\/Maps\/Confirmed.html')\n_map","c24dd9e1":"_map = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1.5)\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Latitude'], temp.iloc[i]['Longtitude']],\n        color=Active, fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country\/Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['Confirmed'])+\n                    '<li><bold>Active : '+str(temp.iloc[i]['Active'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Deaths'])+\n                    '<li><bold>New Cases : '+str(temp.iloc[i]['No_Of_New_Cases'])+\n                    '<li><bold>New Death : '+str(temp.iloc[i]['No_Of_New_Deaths'])+\n                    '<li><bold>New Recovered : '+str(temp.iloc[i]['No_Of_New_Recovered']),\n        radius=int(temp.iloc[i]['Active'])).add_to(_map)\n\n_map.save('.\/Maps\/Active.html')\n_map","49636734":"_map = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1.5)\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Latitude'], temp.iloc[i]['Longtitude']],\n        color=Recovered, fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country\/Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['Confirmed'])+\n                    '<li><bold>Active : '+str(temp.iloc[i]['Active'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(temp.iloc[i]['Recovered'])+\n                    '<li><bold>New Cases : '+str(temp.iloc[i]['No_Of_New_Cases'])+\n                    '<li><bold>New Death : '+str(temp.iloc[i]['No_Of_New_Deaths'])+\n                    '<li><bold>New Recovered : '+str(temp.iloc[i]['No_Of_New_Recovered']),\n        radius=int(temp.iloc[i]['Recovered'])**1.05).add_to(_map)\n\n_map.save('.\/Maps\/Recovered.html')\n_map","d3a30c0e":"_map = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1.5)\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Latitude'], temp.iloc[i]['Longtitude']],\n        color=Deceased, fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country\/Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['Confirmed'])+\n                    '<li><bold>Active : '+str(temp.iloc[i]['Active'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Deaths'])+\n                    '<li><bold>New Cases : '+str(temp.iloc[i]['No_Of_New_Cases'])+\n                    '<li><bold>New Death : '+str(temp.iloc[i]['No_Of_New_Deaths'])+\n                    '<li><bold>New Recovered : '+str(temp.iloc[i]['No_Of_New_Recovered']),\n        radius=int(temp.iloc[i]['Deaths'])**1.2).add_to(_map)\n\n_map.save('.\/Maps\/Deceased.html')\n_map","9a1b3d44":"fig = px.choropleth(full_grouped, locations=\"Country\/Region\", locationmode='country names', color=np.log(full_grouped[\"Confirmed\"]), \n                    hover_name=\"Country\/Region\",\n                    title='Confirmed Cases', color_continuous_scale=px.colors.sequential.Blues)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()\nfig.write_image(\"images\/Confirmed_choropleth.svg\")","23b817bb":"fig = px.choropleth(full_grouped, locations=\"Country\/Region\", locationmode='country names', color=np.log(full_grouped[\"Active\"]), \n                    hover_name=\"Country\/Region\",\n                    title='Active Cases', color_continuous_scale=px.colors.sequential.Reds)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()\nfig.write_image(\"images\/Active_choropleth.svg\")","1947097c":"fig = px.choropleth(full_grouped, locations=\"Country\/Region\", locationmode='country names', color=np.log(full_grouped[\"Recovered\"]), \n                    hover_name=\"Country\/Region\",\n                    title='Recovered Cases', color_continuous_scale=px.colors.sequential.Greens)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()\nfig.write_image(\"images\/Recovered_choropleth.svg\")","61a917d2":"fig = px.choropleth(full_grouped, locations=\"Country\/Region\", locationmode='country names', color=np.log(full_grouped[\"Deaths\"]), \n                    hover_name=\"Country\/Region\",\n                    title='Deceased Cases', color_continuous_scale=px.colors.sequential.Greys)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()\nfig.write_image(\"images\/Deceased_choropleth.svg\")","d72c9dba":"temp = full_grouped[full_grouped['Date'] == max(full_grouped['Date'])]\n\n_map = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1.5)\n\n_map.choropleth( geo_data=country_geo ,data=cov,\n               columns=['Country_Code', 'Mean_Age'],\n                key_on='feature.id',\n               legend_name=\"Mean Age\",\n               fill_color='YlOrRd', fill_opacity=0.7, line_opacity=0.5)\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Latitude'], temp.iloc[i]['Longtitude']],\n        color=Active, fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country\/Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['Confirmed'])+\n                    '<li><bold>Active : '+str(temp.iloc[i]['Active'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Deaths'])+\n                    '<li><bold>New Cases : '+str(temp.iloc[i]['No_Of_New_Cases'])+\n                    '<li><bold>New Death : '+str(temp.iloc[i]['No_Of_New_Deaths'])+\n                    '<li><bold>New Recovered : '+str(temp.iloc[i]['No_Of_New_Recovered']),\n        radius=int(temp.iloc[i]['Confirmed'])).add_to(_map)\n_map.save('.\/Maps\/Mean_Age.html')\n_map","dcb36d39":"temp = full_grouped[full_grouped['Date'] == max(full_grouped['Date'])]\n\n_map = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1.5)\n\n_map.choropleth( geo_data=country_geo ,data=cov,\n               columns=['Country_Code', 'Tourism'],\n                key_on='feature.id',\n               legend_name=\"Tourism\",\n               fill_color='YlOrRd', fill_opacity=0.7, line_opacity=0.5)\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Latitude'], temp.iloc[i]['Longtitude']],\n        color=Active, fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country\/Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['Confirmed'])+\n                    '<li><bold>Active : '+str(temp.iloc[i]['Active'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Deaths'])+\n                    '<li><bold>New Cases : '+str(temp.iloc[i]['No_Of_New_Cases'])+\n                    '<li><bold>New Death : '+str(temp.iloc[i]['No_Of_New_Deaths'])+\n                    '<li><bold>New Recovered : '+str(temp.iloc[i]['No_Of_New_Recovered']),\n        radius=int(temp.iloc[i]['Confirmed'])).add_to(_map)\n_map.save('.\/Maps\/Tourism.html')\n_map","096e447b":"cov['Population in Millions'] = round(cov['Population_Size'] \/ 1000000, 2)\n\ntemp = full_grouped[full_grouped['Date'] == max(full_grouped['Date'])]\n\n_map = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1.5)\n\n_map.choropleth( geo_data=country_geo ,data=cov,\n               columns=['Country_Code', 'Population in Millions'],\n                key_on='feature.id',\n               legend_name=\"Population in Millions\",\n               fill_color='YlOrRd', fill_opacity=0.7, line_opacity=0.5)\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Latitude'], temp.iloc[i]['Longtitude']],\n        color=Active, fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country\/Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['Confirmed'])+\n                    '<li><bold>Active : '+str(temp.iloc[i]['Active'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Deaths'])+\n                    '<li><bold>New Cases : '+str(temp.iloc[i]['No_Of_New_Cases'])+\n                    '<li><bold>New Death : '+str(temp.iloc[i]['No_Of_New_Deaths'])+\n                    '<li><bold>New Recovered : '+str(temp.iloc[i]['No_Of_New_Recovered']),\n        radius=int(temp.iloc[i]['Confirmed'])).add_to(_map)\n_map.save('.\/Maps\/Population.html')\n_map","a384d633":"fig = px.treemap(Country_Wise_Lastest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\"], values=\"Confirmed\", height=700,\n                 title='Number of Confirmed Cases',\n                 color_discrete_sequence = px.colors.qualitative.Dark24)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\nfig.write_image(\"images\/Country_Wise_Treemap_Confirmed.svg\")","1c2cdc80":"fig = px.treemap(Country_Wise_Lastest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\"], values=\"Deaths\", height=700,\n                 title='Number Deaths Reported',\n                 color_discrete_sequence = px.colors.qualitative.Dark24)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\nfig.write_image(\"images\/Country_Wise_Treemap_Deaths.svg\")","c9449396":"fig = px.treemap(Country_Wise_Lastest.sort_values(by='Recovered', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\"], values=\"Recovered\", height=700,\n                 title='Number of Recovered Cases',\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\nfig.write_image(\"images\/Country_Wise_Treemap_Recovered.svg\")","61a1744b":"# confirmed - Active\nfig_1 = px.bar(Top_Countries.sort_values('Confirmed'), x=\"Confirmed\", y=\"Country\/Region\", \n               text='Confirmed', orientation='h', color_discrete_sequence = [Confirmed])\nfig_2 = px.bar(Top_Countries.sort_values('Active'), x=\"Active\", y=\"Country\/Region\", \n               text='Active', orientation='h', color_discrete_sequence = [Active])\n\n# recovered - Deaths\nfig_3 = px.bar(Top_Countries.sort_values('Recovered'), x=\"Recovered\", y=\"Country\/Region\", \n               text='Recovered', orientation='h', color_discrete_sequence = [Recovered])\nfig_4 = px.bar(Top_Countries.sort_values('Deaths'), x=\"Deaths\", y=\"Country\/Region\", \n               text='Deaths', orientation='h', color_discrete_sequence = [Deceased])\n\n# Cases Today - Recovered Today\nfig_5 = px.bar(Top_Countries.sort_values('No_Of_New_Cases'), x=\"No_Of_New_Cases\", y=\"Country\/Region\", \n               text='No_Of_New_Cases', orientation='h', color_discrete_sequence = [Color_1])\nfig_6 = px.bar(Top_Countries.sort_values('No_Of_New_Recovered'), x=\"No_Of_New_Recovered\", y=\"Country\/Region\", \n               text='No_Of_New_Recovered', orientation='h', color_discrete_sequence = [Color_2])\n\n# Deaths Today - Cases Per Million People\nfig_7 = px.bar(Top_Countries.sort_values('No_Of_New_Deaths'), x=\"No_Of_New_Deaths\", y=\"Country\/Region\", \n               text='No_Of_New_Deaths', orientation='h', color_discrete_sequence = ['#222222'])\nfig_8 = px.bar(Top_Countries.sort_values('Cases per Million People'), x=\"Cases per Million People\", y=\"Country\/Region\", \n               text='Cases per Million People', orientation='h', color_discrete_sequence = ['#5e027d'])\n\n# New Cases Last Week - New Cases Last Month\nfig_9 = px.bar(Top_Countries.sort_values('New Last Week'), x=\"New Last Week\", y=\"Country\/Region\", \n               text='New Last Week', orientation='h', color_discrete_sequence = ['#9c0338'])\nfig_10 = px.bar(Top_Countries.sort_values('New Last Month'), x=\"New Last Month\", y=\"Country\/Region\", \n               text='New Last Month', orientation='h', color_discrete_sequence = ['#07a1fa'])\n\n# plot\nfig = make_subplots(rows=5, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.03,\n                    subplot_titles=('Confirmed Cases', 'Active Cases', 'Recovered', 'Deaths Reported', \n                                    'Cases Today', 'Recovered Today', 'Deaths Reported Today',\n                                   'Cases per Million People', 'New Cases Last Week',\n                                   'New Cases Last Month'))\n\nfig.add_trace(fig_1['data'][0], row=1, col=1)\nfig.add_trace(fig_2['data'][0], row=1, col=2)\nfig.add_trace(fig_3['data'][0], row=2, col=1)\nfig.add_trace(fig_4['data'][0], row=2, col=2)\nfig.add_trace(fig_5['data'][0], row=3, col=1)\nfig.add_trace(fig_6['data'][0], row=3, col=2)\nfig.add_trace(fig_7['data'][0], row=4, col=1)\nfig.add_trace(fig_8['data'][0], row=4, col=2)\nfig.add_trace(fig_9['data'][0], row=5, col=1)\nfig.add_trace(fig_10['data'][0], row=5, col=2)\n\nfig.update_layout(height=5500)\nfig.show()\nfig.write_image(\"images\/Top_Countries_Overview.svg\")","fb04033f":"fig = px.scatter(Top_Countries.sort_values('Deaths', ascending=False), \n                 x='Confirmed', y='Deaths', color='Country\/Region', size='Confirmed', height=700,\n                 text='Country\/Region', log_x=True, log_y=True, title='Deaths vs Confirmed (Logarithmic Scale)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.update_layout(height=1500)\nfig.show()\nfig.write_image(\"images\/Top_Countries_Scatter_DvC.svg\")","e7ddb7f1":"fig = px.scatter(Top_Countries.sort_values('Recovered', ascending=False), \n                 x='Confirmed', y='Recovered', color='Country\/Region', size='Confirmed', height=700,\n                 text='Country\/Region', log_x=True, log_y=True, title='Recovered vs Confirmed (Logarithmic Scale)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.update_layout(height=1500)\nfig.show()\nfig.write_image(\"images\/Top_Countries_Scatter_RvC.svg\")","6bd11fc7":"fig = go.Figure(data=[\n    go.Bar(name='Active', x=Top_Countries['Country\/Region'].head(10), y=Top_Countries['Active'], marker_color=Confirmed),\n    go.Bar(name='Recovered', x=Top_Countries['Country\/Region'].head(10), y=Top_Countries['Recovered'], marker_color=Active),\n    go.Bar(name='Deaths', x=Top_Countries['Country\/Region'].head(10), y=Top_Countries['Deaths'], marker_color=Deceased)\n           ])\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()\nfig.write_image(\"images\/Top_Countries_GroupedBar.svg\")","f6fd5a51":"fig = go.Figure(data=[\n    go.Bar(name='Active', x=Top_Countries['Country\/Region'].head(20), y=Top_Countries['Active'], marker_color=Confirmed),\n    go.Bar(name='Recovered', x=Top_Countries['Country\/Region'].head(20), y=Top_Countries['Recovered'], marker_color=Active),\n    go.Bar(name='Deaths', x=Top_Countries['Country\/Region'].head(20), y=Top_Countries['Deaths'], marker_color=Deceased)\n           ])\n# Change the bar mode\nfig.update_layout(barmode='stack')\nfig.show()\nfig.write_image(\"images\/Top_Countries_StackedBar.svg\")","ffbea1da":"fig = px.treemap(Top_Countries.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\"], values=\"Confirmed\", height=700,\n                 title='Number of Confirmed Cases',\n                 color_discrete_sequence = px.colors.qualitative.Dark24)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\nfig.write_image(\"images\/Top_Country_Treemap_Confirmed.svg\")","6d6cdf21":"fig = px.treemap(Top_Countries.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\"], values=\"Deaths\", height=700,\n                 title='Number of Deaths Reported',\n                 color_discrete_sequence = px.colors.qualitative.Dark24)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\nfig.write_image(\"images\/Top_Country_Treemap_Deaths.svg\")","632a3938":"fig = px.treemap(Top_Countries.sort_values(by='Recovered', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\"], values=\"Recovered\", height=700,\n                 title='Number of Recovered Cases',\n                 color_discrete_sequence = px.colors.qualitative.Dark24)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\nfig.write_image(\"images\/Top_Country_Treemap_Recovered.svg\")","fd9f489a":"fig = px.bar(Top_Countries_Daily, x=\"Date\", y=\"Confirmed\", color='Country\/Region', height=750,\n             title='Confirmed', color_discrete_sequence = px.colors.cyclical.Edge)\nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_GroupedBar_Confirmed.svg\")","8fac9b22":"fig = px.bar(Top_Countries_Daily, x=\"Date\", y=\"Deaths\", color='Country\/Region', height=750,\n             title='Deaths', color_discrete_sequence = px.colors.cyclical.IceFire)\nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_GroupedBar_Deaths.svg\")","b7f7dd91":"fig = px.bar(Top_Countries_Daily, x=\"Date\", y=\"No_Of_New_Cases\", color='Country\/Region', height=750,\n             title='New cases', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_GroupedBar_New.svg\")","0c1e3030":"fig = px.bar(Top_Countries_Daily, x=\"Date\", y=\"Recovered\", color='Country\/Region', height=750,\n             title='Recovered', color_discrete_sequence = px.colors.cyclical.IceFire)\nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_GroupedBar_Recovered.svg\")","7b7148f0":"fig = px.line(Top_Countries_Daily, x=\"Date\", y=\"Confirmed\", color='Country\/Region', height=750,\n             title='Confirmed', color_discrete_sequence = px.colors.cyclical.Edge)\nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_GroupedLine_Confirmed.svg\")","15bf4ea3":"fig = px.line(Top_Countries_Daily, x=\"Date\", y=\"Deaths\", color='Country\/Region', height=750,\n             title='Deaths', color_discrete_sequence = px.colors.cyclical.IceFire)\nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_GroupedLine_Deaths.svg\")","fe75c2b6":"fig = px.line(Top_Countries_Daily, x=\"Date\", y=\"No_Of_New_Cases\", color='Country\/Region', height=750,\n             title='New cases', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_GroupedLine_New.svg\")","a5a77e17":"fig = px.line(Top_Countries_Daily, x=\"Date\", y=\"Recovered\", color='Country\/Region', height=750,\n             title='Recovered', color_discrete_sequence = px.colors.cyclical.IceFire)\nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_GroupedLine_Recovered.svg\")","8f2180f4":"fig = px.line(Top_Countries_Daily, x=\"Date\", y=\"Confirmed\", color='Country\/Region', height=750,\n             title='Confirmed (Logarithmic)', color_discrete_sequence = px.colors.cyclical.Edge)\nfig.update_layout(yaxis_type='log')\nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_GroupedLine_Confirmed_Log.svg\")","496cf9dd":"fig = px.line(Top_Countries_Daily, x=\"Date\", y=\"Deaths\", color='Country\/Region', height=750,\n             title='Deaths (Logarithmic)', color_discrete_sequence = px.colors.cyclical.IceFire)\nfig.update_layout(yaxis_type='log')\nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_GroupedLine_Deaths_Log.svg\")","708af38b":"fig = px.line(Top_Countries_Daily, x=\"Date\", y=\"No_Of_New_Cases\", color='Country\/Region', height=750,\n             title='New Cases (Logarithmic)', color_discrete_sequence = px.colors.cyclical.IceFire)\nfig.update_layout(yaxis_type='log')\nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_GroupedLine_New_Log.svg\")","a35ea36f":"fig = px.line(Top_Countries_Daily, x=\"Date\", y=\"Recovered\", color='Country\/Region', height=750,\n             title='Recovered (Logarithmic)', color_discrete_sequence = px.colors.cyclical.IceFire)\nfig.update_layout(yaxis_type='log')\nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_GroupedLine_Recovered_Log.svg\")","3703d117":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Bar(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'Confirmed'], name=Country), row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of Cases in each Country\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Bar_Confirmed.svg\")","cfd91c83":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Bar(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'Active'], name=Country), row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of Active Cases in each Country\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Bar_Active.svg\")","7b24c828":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Bar(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'Deaths'], name=Country), row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of Fatalities Reported in each Country\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Bar_Deaths.svg\")","e8b087c2":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Bar(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'No_Of_New_Cases'], name=Country), row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of New Cases Reported in each Country\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Bar_New.svg\")","91e5b927":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Bar(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'Confirmed']), row=row, col=col)\n    fig.update_yaxes(type='log', row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of Cases in each Country (Logarithmic)\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Bar_Confirmed_Log.svg\")","d011ec3a":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Bar(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'Active'], name=Country), row=row, col=col)\n    fig.update_yaxes(type='log', row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of Active Cases in each Country (Logarithmic)\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Bar_Active_Log.svg\")","15a8d710":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Bar(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'Deaths'], name=Country), row=row, col=col)\n    fig.update_yaxes(type='log', row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of Fatalities Reported in each Country (Logarithmic)\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Bar_Deaths_Log.svg\")","0f8d630a":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Bar(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'No_Of_New_Cases'], name=Country), row=row, col=col)\n    fig.update_yaxes(type='log', row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of New Cases Reported in each Country (Logarithmic)\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Bar_New_Log.svg\")","1735ad09":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Line(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'Confirmed']), row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of Cases in each Country\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Line_Confirmed.svg\")","b5dd76a0":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Line(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'Active'], name=Country), row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of Active Cases in each Country\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Line_Active.svg\")","ad0ee7b7":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Line(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'Deaths'], name=Country), row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of Fatalities Reported in each Country\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Line_Deaths.svg\")","98b4d885":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Line(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'No_Of_New_Cases'], name=Country), row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of New Cases Reported in each Country\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Line_New.svg\")","c148e108":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Line(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'Confirmed']), row=row, col=col)\n    fig.update_yaxes(type='log', row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of Cases in each Country (Logarithmic)\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Line_Confirmed_Log.svg\")","00df9b2a":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Line(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'Active'], name=Country), row=row, col=col)\n    fig.update_yaxes(type='log', row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of Active Cases in each Country (Logarithmic)\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Line_Active_Log.svg\")","0b028dd1":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Line(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'Deaths'], name=Country), row=row, col=col)\n    fig.update_yaxes(type='log', row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of Fatalities Reported in each Country (Logarithmic)\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Line_Deaths_Log.svg\")","f4af1473":"Countries = Top_Countries_Daily['Country\/Region'].unique()\n\nn_cols = 3\nn_rows = math.ceil(len(Countries)\/n_cols)\n\nfig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=Countries)\n\nfor idx, Country in enumerate(Countries):\n    row = int((idx\/n_cols)+1)\n    col = int((idx%n_cols)+1)\n    fig.add_trace(go.Line(x=Top_Countries_Daily['Date'], y=Top_Countries_Daily.loc[Top_Countries_Daily['Country\/Region']==Country, 'No_Of_New_Cases'], name=Country), row=row, col=col)\n    fig.update_yaxes(type='log', row=row, col=col)\n    \nfig.update_layout(height=2500, title_text=\"No. of New Cases Reported in each Country (Logarithmic)\")    \nfig.show()\nfig.write_image(\"images\/Top_Country_Daily_Seperate_Line_New_Log.svg\")","151be8e9":"# Download All files\n!pwd\n! rm *.zip\n!zip -r \/kaggle\/working\/Files.zip \/kaggle\/working\nFileLink(r'Files.zip')","0640a44d":"<h1>Maps<\/h1> <a class=\"anchor\" id=\"Maps\"><\/a>","6a371a6f":"<h1>Top 25 Countries Day Wise Grouped<\/h1> <a class=\"anchor\" id=\"Top_25_Countries_Day_Wise_Grouped\"><\/a>","c8a25601":"<h1>Daily Overview<\/h1> <a class=\"anchor\" id=\"Daily_Overview\"><\/a>","3559eee1":"<h1>Country Wise<\/h1> <a class=\"anchor\" id=\"Country_Wise\"><\/a>","a582185a":"<h1>Top 25 Countries Day Wise<\/h1> <a class=\"anchor\" id=\"Top_25_Countries_Day_Wise\"><\/a>","90c82930":"# Covid-19 visualization\n\n### This notebook tracks and Analyse the spread of the coronavirus(COVID-19).\n\n## Dataset\n * [COVID-19 Data Repository by the Center for Systems Science and Engineering (CSSE) at Johns Hopkins University](https:\/\/github.com\/CSSEGISandData\/COVID-19)\n * [Population by Country - 2020](https:\/\/www.kaggle.com\/tanuprabhu\/population-by-country-2020)\n * [COVID-19 useful features by country](https:\/\/www.kaggle.com\/ishivinal\/covid19-useful-features-by-country)\n * [World Countries](https:\/\/www.kaggle.com\/ktochylin\/world-countries)\n ","609d1aa4":"<h1>Overview<\/h1> <a class=\"anchor\" id=\"Overview\"><\/a>","89bc64df":"## Acknowledgements\n \n * <a href=\"https:\/\/www.kaggle.com\/imdevskp\/covid-19-analysis-visualization-comparisons\">COVID-19 - Analysis, Visualization & Comparisons<\/a>\n * [Covid-19 Analysis](https:\/\/www.kaggle.com\/ishivinal\/covid-19-analysis-visualizations-predictions)","a8b965b3":"# Data Download <a id=\"Data_Download\"><\/a>","5d379c84":"<h1>Choropleths<\/h1> <a class=\"anchor\" id=\"Choropleths\"><\/a>","7bdadf06":"<h1>Top 25 Countries<\/h1> <a class=\"anchor\" id=\"Top_25_Countries\"><\/a>"}}