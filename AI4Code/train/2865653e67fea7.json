{"cell_type":{"5fde27f6":"code","d5451419":"code","d1886aaa":"code","82f6a222":"code","f040ad30":"code","312575af":"code","1cf26a46":"code","6f64e344":"code","3fa4967f":"code","7f42aaca":"code","7f202c3d":"code","54c2c657":"code","92e2663b":"code","d7248345":"code","fab9272b":"code","7fa48015":"code","a7fb7991":"code","81c8876c":"code","5ef83715":"code","3180992a":"code","4116ebe0":"code","42b224ee":"code","3b10a1e3":"markdown","be08e1b9":"markdown","b2f0ef9c":"markdown","c32b0663":"markdown"},"source":{"5fde27f6":"# We will use the official tokenization script created by the Google team\n!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","d5451419":"!wget https:\/\/raw.githubusercontent.com\/Iamsdt\/DLProjects\/master\/utils\/TextPre.py","d1886aaa":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\n\nimport tokenization\nfrom TextPre import clean","82f6a222":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","f040ad30":"def build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    dense = Dense(2048, activation='relu')(clf_output)\n    out = Dense(1, activation='sigmoid')(dense)\n    \n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=0.001), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","312575af":"%%time\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=False)","1cf26a46":"train = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")","6f64e344":"for i in train.text[50:60]:\n    print(i)","3fa4967f":"train.text = train.text.apply(clean)","7f42aaca":"for i in train.text[50:60]:\n    print(i)","7f202c3d":"s = \"Noches El - Bestia  '  @ Alexis_Sanchez :  happy to see my teammates and training hard  ?  ?  goodnight gunners .  ?  ?  ?  ?  ?  ?\"","54c2c657":"from string import punctuation\n\ndef remove_char(text):\n    c = [''.join(i) for i in text if i not in punctuation]\n    return \"\".join(c)\n\n\nremove_char(s)","92e2663b":"train.text = train.text.apply(remove_char)","d7248345":"for i in train.text[50:60]:\n    print(i)","fab9272b":"test.text = test.text.apply(clean)\ntest.text = test.text.apply(remove_char)","7fa48015":"for i in test.text[50:60]:\n    print(i)","a7fb7991":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","81c8876c":"train_input = bert_encode(train.text.values, tokenizer, max_len=150)\ntest_input = bert_encode(test.text.values, tokenizer, max_len=150)\ntrain_labels = train.target.values","5ef83715":"model = build_model(bert_layer, max_len=150)\nmodel.summary()","3180992a":"call = tf.keras.callbacks.EarlyStopping(monitor='val_loss', min_delta=0, patience=2, verbose=0, mode='auto', baseline=None, restore_best_weights=True)\n\n\ntrain_history = model.fit(\n    train_input, train_labels,\n    validation_split=0.2,\n    epochs=10,\n    batch_size=16,\n    callbacks=[call]\n)\n\nmodel.save('model.h5')","4116ebe0":"test_pred = model.predict(test_input)","42b224ee":"submission['target'] = test_pred.round().astype(int)\nsubmission.to_csv('submission.csv', index=False)","3b10a1e3":"### Load Text and process","be08e1b9":"# Model: Build, Train, Predict, Submit","b2f0ef9c":"# Helper Functions","c32b0663":"# Load and Preprocess\n\n- Load BERT from the Tensorflow Hub\n- Load CSV files containing training data\n- Load tokenizer from the bert layer\n- Encode the text into tokens, masks, and segment flags"}}