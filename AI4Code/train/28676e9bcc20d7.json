{"cell_type":{"b8640cc9":"code","6ec498a2":"code","72dd11fb":"code","3eefaed7":"code","1e2a9131":"code","7274b3a5":"code","ae931210":"code","6f2f8ab8":"code","263594e0":"code","aafc7ba6":"code","4b384d3b":"code","4cd7c33d":"code","bdc9e4a8":"code","72e64b9d":"code","a1192bce":"code","b197d6cc":"code","54e493a4":"code","068826ab":"code","0754d1f7":"code","72b293fb":"code","8676eb54":"code","d29af65a":"code","e8e8424c":"code","01327a52":"code","14913dcc":"code","2258784c":"code","1c7617b5":"code","358d03d7":"code","2aface97":"code","8c86a72e":"code","7064c71c":"code","0c01fc43":"code","b101bca4":"code","24fc1acc":"code","a1acd34d":"code","d0376184":"markdown","d3c31c36":"markdown"},"source":{"b8640cc9":"import riiideducation\n# import dask.dataframe as dd\nimport pandas as pd\nimport numpy as np\nenv = riiideducation.make_env()","6ec498a2":"#note I also import the content_type_id to determine if I should filter out negative answered correctly\ntrain= pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv',\n                usecols=[1, 2, 3, 4, 7], dtype={'timestamp': 'int64', 'user_id': 'int64' ,'content_id': 'int16', 'content_type_id': 'bool', 'answered_correctly':'int8'}\n              )","72dd11fb":"train.head()","3eefaed7":"train = train[train.content_type_id == False]","1e2a9131":"train.info()","7274b3a5":"#Make a simple tree model and estimate score","ae931210":"#arrange by timestamp\n\ntrain = train.sort_values(['timestamp'], ascending=True).reset_index(drop = True)\ntrain.head()","6f2f8ab8":"train.tail()","263594e0":"train.drop(['timestamp', 'content_type_id'], axis=1,   inplace=True)","aafc7ba6":"len(list(set(train.iloc[0:90000000,:]['user_id']).intersection(set(train.iloc[90000000:99000000,:]['user_id']))))","4b384d3b":"results_c = train.iloc[0:90000000,:][['content_id','answered_correctly']].groupby(['content_id']).agg(['mean'])\nresults_c.columns = [\"answered_correctly_content\"]\nresults_c.head()","4cd7c33d":"results_u = train.iloc[0:90000000,:][['user_id','answered_correctly']].groupby(['user_id']).agg(['mean', 'sum'])\nresults_u.columns = [\"answered_correctly_user\", 'sum']\nresults_u.head()","bdc9e4a8":"X = train.iloc[90000000:99271299,:]\n","72e64b9d":"X = pd.merge(X, results_u, on=['user_id'], how=\"left\")\nX = pd.merge(X, results_c, on=['content_id'], how=\"left\")","a1192bce":"X=X.sort_values(['user_id'])\n","b197d6cc":"Y = X[[\"answered_correctly\"]]\nX = X.drop([\"answered_correctly\"], axis=1)\nX.head()","54e493a4":"Y.head()","068826ab":"X = X[['answered_correctly_user', 'answered_correctly_content', 'sum']] \nX['answered_correctly_user'].fillna(0.5,  inplace=True)\nX['answered_correctly_content'].fillna(0.5,  inplace=True)\nX['sum'].fillna(0, inplace = True)","0754d1f7":"import lightgbm as lgb\n\nmodel = lgb.LGBMClassifier(num_leaves = 46, learning_rate = 0.11436513141203779, \n                           subsample_for_bin = 130000, min_child_samples = 470, \n                           reg_alpha = 0.5, reg_lambda = 0.26, subsample = 0.5, \n                           is_unbalance = False, n_estimators = 1000, \n                           objective = 'binary', random_state = 126)\n\nmodel.fit(X, Y)","72b293fb":"y_pred = model.predict_proba(X)[:, 1]\ny_true = np.array(Y)","8676eb54":"Y.value_counts()","d29af65a":"from sklearn.metrics import roc_auc_score\nroc_auc_score(y_true, y_pred)","e8e8424c":"###Make sure it works on the test set","01327a52":"test =  pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/example_test.csv')\ntest.shape","14913dcc":"test = pd.merge(test, results_u, on=['user_id'],  how=\"left\")\ntest = pd.merge(test, results_c, on=['content_id'],  how=\"left\")","2258784c":"test.shape","1c7617b5":"test[['answered_correctly_user', 'answered_correctly_content', 'sum']]\ntest['answered_correctly_user'].fillna(0.5, inplace=True)\ntest['answered_correctly_content'].fillna(0.5, inplace=True)\ntest['sum'].fillna(0, inplace = True)","358d03d7":"y_pred = model.predict_proba(test[['answered_correctly_user', 'answered_correctly_content', 'sum']])[:, 1]","2aface97":"y_pred.shape","8c86a72e":"test[[\"answered_correctly\"]] = y_pred\ntest.head()","7064c71c":"#################","0c01fc43":"#Make preds\n\nresults_c = train[['content_id','answered_correctly']].groupby(['content_id']).agg(['mean'])\nresults_c.columns = [\"answered_correctly_content\"]\n\nresults_u = train[['user_id','answered_correctly']].groupby(['user_id']).agg(['mean', 'sum'])\nresults_u.columns = [\"answered_correctly_user\", 'sum']","b101bca4":"results_c.head()","24fc1acc":"iter_test = env.iter_test()","a1acd34d":"for (test_df, sample_prediction_df) in iter_test:\n    test_df = pd.merge(test_df, results_u, on=['user_id'],  how=\"left\")\n    test_df = pd.merge(test_df, results_c, on=['content_id'],  how=\"left\")\n    test_df['answered_correctly_user'].fillna(0.5, inplace=True)\n    test_df['answered_correctly_content'].fillna(0.5, inplace=True)\n    test_df['sum'].fillna(0, inplace=True)\n    test_df['answered_correctly'] =  model.predict_proba(test_df[['answered_correctly_user', 'answered_correctly_content', 'sum']])[:, 1]\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])","d0376184":"Affirmatives (True) are only for those with a different type of content. Probably not real questions.","d3c31c36":"This a simple baseline using the LGBM algorithm. This is a small modification to https:\/\/www.kaggle.com\/lgreig\/simple-lgbm-baseline.\n"}}