{"cell_type":{"5c17e459":"code","48a96396":"code","1b1e5f83":"code","73ccaadf":"code","68327378":"code","da6a4a00":"code","d17b46c8":"code","a56120e6":"code","b0c522ba":"code","acf0198a":"code","08c5ca7f":"code","590dc8bc":"code","1f0e30c2":"code","6f3ec4a4":"code","d33102d6":"code","a6162b9e":"code","9dbf3160":"code","1f519040":"code","eb4c5f5a":"code","1b1ef5c9":"code","2983b05d":"code","9db0953f":"code","4818e265":"code","4da37870":"code","f0c8c88e":"code","420dfda3":"code","751790e3":"code","6898e232":"code","03e7b80c":"code","2868b3eb":"code","a489144a":"code","6a7528bb":"code","0ee0e9ee":"code","54d0c7e0":"code","f808df1a":"code","257f7003":"code","1123b27c":"code","ecfb792e":"code","009d466f":"code","54b9d83a":"code","eecdb131":"code","e44b6e18":"code","273d6670":"code","44a684a9":"code","1b7a4329":"code","d08cfbf5":"code","03c5da1a":"code","d5518d1f":"code","9cc17dc6":"code","620b035f":"code","51868a17":"code","bcd0a876":"code","586b1a0c":"code","cbd79907":"code","6ef730c8":"code","6e435f72":"code","115e9632":"code","78e5ba51":"code","cdb283d5":"code","75d0ffe5":"code","1a6011cf":"code","1827e1ce":"code","df434d3a":"code","9d4b6568":"markdown","6654a5b3":"markdown","675e6c39":"markdown","c4b15ce8":"markdown","1d845388":"markdown","32dd2caf":"markdown","407d96d8":"markdown","3dccb71a":"markdown","07230fd8":"markdown","39d23a1c":"markdown","7ae6a011":"markdown","07898e85":"markdown","d3710bc4":"markdown","480b1c05":"markdown","c21ae65f":"markdown"},"source":{"5c17e459":"import pandas as pd","48a96396":"import pandas as pd","1b1e5f83":"df = pd.read_csv('\/kaggle\/input\/french-second-hand-car\/dataset.csv')","73ccaadf":"df.head()","68327378":"df.dtypes","da6a4a00":"pipeline = []\n\ndef register(func):\n    \"\"\"Helper decorator to register func to be executed on data\"\"\"\n    pipeline.append(func)\n    \n    \ndef run(pipeline,df):\n    \"\"\"Execute all func in pipeline sequentially\"\"\"\n    for func in pipeline:\n        df = func(df)\n    return df","d17b46c8":"@register\ndef clean_publishedsince(df):\n    df[\"publishedsince\"] = df[\"publishedsince\"].apply(lambda x: x.split(\" \")[0])\n    df[\"publishedsince\"] = df[\"publishedsince\"].astype(int)\n    return df\n\n@register\ndef clean_price(df):\n    df[\"price\"] = df[\"price\"].str.extract(\"(.*\\d*\\d)\")\n    df[\"price\"] = df[\"price\"].str.replace(\" \", \"\").astype(float)\n    return df\n\n@register\ndef clean_kilometragecompteur(df):\n    df[\"kilom\u00e9tragecompteur\"] = df[\"kilom\u00e9tragecompteur\"].str.replace(\"Km\", \"\")\n    df[\"kilom\u00e9tragecompteur\"] = (\n        df[\"kilom\u00e9tragecompteur\"].str.replace(\" \", \"\").astype(float)\n    )\n    return df\n\n@register\ndef clean_annee(df):\n    df = df[~df[\"ann\u00e9e\"].isna()]\n    df[\"ann\u00e9e\"] = df[\"ann\u00e9e\"].astype(int)\n    return df\n\n@register\ndef clean_nombreporte(df):\n    df[\"nombredeportes\"] = df[\"nombredeportes\"].astype(float)\n    return df\n\n@register\ndef clean_nombreplaces(df):\n    df[\"nombredeplaces\"] = df[\"nombredeplaces\"].astype(float)\n    return df\n\n@register\ndef clean_nombreproprietaire(df):\n    df[\"nombredepropri\u00e9taires\"] = df[\"nombredepropri\u00e9taires\"].astype(float)\n    return df\n\n@register\ndef clean_puissance_fiscale(df):\n    df[\"puissancefiscale\"] = df[\"puissancefiscale\"].str.replace(\" CV\", \"\")\n    df[\"puissancefiscale\"] = df[\"puissancefiscale\"].astype(float)\n    return df\n\n@register\ndef clean_co2(df):\n    df[\"\u00e9missionsdeco2\"] = df[\"\u00e9missionsdeco2\"].apply(lambda x: str(x).split(\" \")[0])\n    return df\n\n@register\ndef clean_consomixte(df):\n    df[\"consommationmixte\"] = df[\"consommationmixte\"].fillna(\"0 l\")\n    df[\"consommationmixte\"] = df[\"consommationmixte\"].apply(lambda x: x.split(\" \")[1])\n    df[\"consommationmixte\"] = df[\"consommationmixte\"].str.replace(\"l\",\"0.0\")\n    df[\"consommationmixte\"] = df[\"consommationmixte\"].astype(float)\n    return df\n\n@register\ndef clean_carmodel(df):\n    df[\"carmodel\"] = df[\"carmodel\"].str.replace(\"\\\\n\", \"\")\n    df[\"carmodel\"] = df[\"carmodel\"].str.strip()\n    return df\n\n@register\ndef clean_energie(df):\n    df[\"\u00e9nergie\"] = df[\"\u00e9nergie\"].str.strip()\n    return df\n\n@register\ndef clean_option(df):\n    import ast\n    df[\"options\"] = df[\"options\"].apply(lambda x: ast.literal_eval(x)) # converting to python list object as it was stored as a str\n    return df\n    \n@register\ndef add_model_name(df):\n    df[\"marque\"] = df[\"carmodel\"].apply(lambda x: x.split(\" \")[0])\n    return df\n\n@register\ndef add_brand_name(df):\n    df[\"modele\"] = df[\"carmodel\"].apply(lambda x: \" \".join(x.split(\" \")[1:]))\n    return df","a56120e6":"dff = run(pipeline,df)","b0c522ba":"dff.head()","acf0198a":"def generate_frequent_items(dataset,min_support):\n    from mlxtend.preprocessing import TransactionEncoder\n    from mlxtend.frequent_patterns import fpgrowth\n    te = TransactionEncoder()\n    te_ary = te.fit(dataset[\"options\"]).transform(dataset[\"options\"])\n    df_rules = pd.DataFrame(te_ary, columns=te.columns_)\n    frequent_itemsets = fpgrowth(df_rules, min_support=min_support, use_colnames=True)\n    frequent_itemsets[\"len\"] = frequent_itemsets[\"itemsets\"].apply(lambda x: len(x))\n    frequent_itemsets_one = frequent_itemsets[frequent_itemsets[\"len\"] == 1]\n    frequent_itemsets_one = frequent_itemsets_one[\"itemsets\"].tolist()\n    return frequent_itemsets_one\n\ndef convert_to_oneset(itemset):\n    frequent_equipements = []\n    for item in itemset:\n        name, = item\n        frequent_equipements.append(name)\n    frequent_equipements = frozenset(frequent_equipements)\n    return frequent_equipements\n\n\ndef compute_common_equipement_feature(dataset,frequent_equipements):\n    result = {\n    \"id\":[],\n    \"common_equipement\": []\n    }\n    for _id in dataset[\"id\"].unique():\n        dff_id = dataset[dataset[\"id\"] == _id]\n        current_options = dff_id[\"options\"].iloc[0]\n        options = frozenset(current_options)\n        len_intersect = len(frequent_equipements.intersection(options))\/len(frequent_equipements)\n        result[\"id\"].append(_id)\n        result[\"common_equipement\"].append(len_intersect)\n    df_frequent_equip = pd.DataFrame(result)\n    return df_frequent_equip\n    \ndef create_common_equipement_feature(df, min_support=0.3):\n    dataset = df[[\"id\",\"options\"]]\n    frequent_itemsets = generate_frequent_items(dataset,min_support)\n    frequent_equipements = convert_to_oneset(frequent_itemsets)\n    df_frequent_equip = compute_common_equipement_feature(dataset,frequent_equipements)\n    df = df.merge(df_frequent_equip, on=[\"id\"])\n    return df,frequent_equipements","08c5ca7f":"dff,frequent_equipements = create_common_equipement_feature(dff)","590dc8bc":"dff.head()","1f0e30c2":"frequent_equipements","6f3ec4a4":"import seaborn as sns\nfrom matplotlib import pyplot as plt","d33102d6":"plt.figure(figsize=(10,10))\nplt.xticks(rotation=45)\nsns.countplot(dff[\"ann\u00e9e\"])","a6162b9e":"plt.figure(figsize=(10,10))\nplt.xticks(rotation=45)\nsns.countplot(dff[\"\u00e9nergie\"])","9dbf3160":"features = [\n    \"id\",\n    \"ann\u00e9e\",\n    \"contr\u00f4letechnique\",\n    \"nombredeportes\",\n    \"kilom\u00e9tragecompteur\",\n    \"\u00e9nergie\",\n    \"bo\u00eetedevitesse\",\n    \"couleurext\u00e9rieure\",\n    \"nombredeplaces\",\n    \"puissancefiscale\",\n    \"consommationmixte\",\n    \"vendeur\",\n    \"garantie\",\n    \"marque\",\n    \"modele\",\n    \"common_equipement\",\n    \"price\"\n]","1f519040":"dffs = dff[features]\ndffs = dffs[dffs[\"\u00e9nergie\"].isin([\"Essence\", \"Diesel\"])]","eb4c5f5a":"dffs.shape","1b1ef5c9":"sns.boxplot(dffs[\"price\"])","2983b05d":"dffs[\"price\"].describe()","9db0953f":"price_outliers = dffs[dffs[\"price\"]>70000]","4818e265":"price_outliers.shape","4da37870":"price_outliers[\"marque\"].value_counts(normalize=True)[:10]","f0c8c88e":"price_outliers[\"modele\"].value_counts(normalize=True)[:10]","420dfda3":"price_outliers[\"ann\u00e9e\"].describe()","751790e3":"plt.figure(figsize=(10,10))\nplt.xticks(rotation=45)\nsns.countplot(price_outliers[\"ann\u00e9e\"])","6898e232":"sns.scatterplot(x=\"price\",y=\"kilom\u00e9tragecompteur\",data=price_outliers)","03e7b80c":"sns.scatterplot(x=\"price\",y=\"puissancefiscale\",data=price_outliers)","2868b3eb":"sns.scatterplot(x=\"price\",y=\"common_equipement\",data=price_outliers)","a489144a":"price_outliers.dtypes","6a7528bb":"plt.figure(figsize=(10,10))\n\nsns.scatterplot(x=\"price\",y=\"consommationmixte\",data=price_outliers)","0ee0e9ee":"dffs = dffs[~dffs.index.isin(price_outliers.index)]","54d0c7e0":"dffs.shape","f808df1a":"sns.scatterplot(x=\"price\",y=\"kilom\u00e9tragecompteur\",data=dffs,alpha=0.1)","257f7003":"sns.scatterplot(x=\"price\",y=\"puissancefiscale\",data=dffs,alpha=0.1)","1123b27c":"plt.figure(figsize=(10,10))\nplt.xticks(rotation=45)\nsns.boxplot(x=\"ann\u00e9e\", y=\"price\", data=dffs)","ecfb792e":"dffs.head()","009d466f":"dffs[\"modele\"].unique().size","54b9d83a":"dffs[\"modele\"].value_counts(normalize=True)[:10]","eecdb131":"sns.boxplot(dffs[\"kilom\u00e9tragecompteur\"])","e44b6e18":"plt.figure(figsize=(10,10))\nplt.xticks(rotation=45)\nsns.boxplot(x=\"ann\u00e9e\", y=\"common_equipement\", data=dffs)","273d6670":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import KNNImputer, SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.cluster import KMeans","44a684a9":"features_clust = [\n    \"ann\u00e9e\",\n    \"nombredeportes\",\n    \"kilom\u00e9tragecompteur\",\n    \"nombredeplaces\",\n    \"puissancefiscale\",\n    \"consommationmixte\",\n    \"common_equipement\",\n]","1b7a4329":"data_clustering = dffs[features_clust]","d08cfbf5":"numeric_transformer = Pipeline(steps=[\n    ('imputer', KNNImputer()),\n    ('scaler', StandardScaler())])","03c5da1a":"preprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, features_clust),\n    ])","d5518d1f":"pipe = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('kmeans', KMeans(n_clusters=6))])","9cc17dc6":"pipe.fit(data_clustering)","620b035f":"clusters = pipe['kmeans'].labels_","51868a17":"clusters","bcd0a876":"data_clustering[\"cluster\"] = clusters","586b1a0c":"data_clustering.head()","cbd79907":"df_clusters = {}\nfor cluster in data_clustering[\"cluster\"].unique():\n    dff = data_clustering[data_clustering[\"cluster\"] == cluster]\n    df_clusters[cluster] = dff","6ef730c8":"sns.countplot(data_clustering[\"cluster\"])","6e435f72":"sns.boxplot(x='cluster',y=\"kilom\u00e9tragecompteur\",data=data_clustering)","115e9632":"sns.boxplot(x='cluster',y=\"puissancefiscale\",data=data_clustering)","78e5ba51":"sns.boxplot(x='cluster',y=\"common_equipement\",data=data_clustering)","cdb283d5":"sns.boxplot(x='cluster',y=\"ann\u00e9e\",data=data_clustering)","75d0ffe5":"sns.boxplot(x='cluster',y=\"nombredeplaces\",data=data_clustering)","1a6011cf":"sns.boxplot(x='cluster',y=\"nombredeportes\",data=data_clustering)","1827e1ce":"dffs[\"cluster\"] = clusters","df434d3a":"sns.boxplot(x='cluster',y=\"price\",data=dffs)","9d4b6568":"And more power give you a higher price","6654a5b3":"## Feature engineering: extracting useful informations from options","675e6c39":"As we can see there is mainly thermic cars so we'll keep only the two main classes.\nThis means that we have also to drop some features because they were related to electric and hybrid cars.","c4b15ce8":"We will create a new feature that represent how much a car equipement intersect the most common equipements. It means we except in general a lower price for cars that have low equipement level.","1d845388":"We remove high value car from the dataset as they may follow other patterns","32dd2caf":"### Price feature","407d96d8":"## EDA","3dccb71a":"## Data cleaning","07230fd8":"As we can expect, the lower kilometers the lower the price.","39d23a1c":"We can see that a lot of feature need to be cleaned as there is lot of them like price that are of type objet but are in fact numeric type","7ae6a011":"We can see that the dataset contains high value car, let's see what they are","07898e85":"## Clustering","d3710bc4":"For instance car option's in ligne 0 has 40% of intersection with `frequent_equipements`","480b1c05":"#### Focus on high value cars","c21ae65f":"### Data selected for study"}}