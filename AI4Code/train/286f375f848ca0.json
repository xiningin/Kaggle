{"cell_type":{"b3ed1119":"code","592daace":"code","b4deef0f":"code","fd1ffd6f":"code","7cfb83cb":"code","4bcd1b02":"code","e0721308":"code","165f9698":"code","704f1927":"code","c5a76bb5":"code","11baaeb7":"code","79391c69":"code","bc05c539":"code","c9905302":"code","e93479c3":"code","5726ab08":"code","d0ae6634":"code","5074b6cb":"code","a81abcd3":"code","bc6ded1e":"code","5cf98223":"code","0add4ec5":"code","1ca37f82":"code","7ca5acf0":"code","beeb9e92":"code","b5b085da":"code","ced58c1c":"code","2bba4597":"code","bf37ad25":"code","061aa0e5":"code","240231d6":"code","7edf5999":"code","2c633080":"code","df635d73":"code","565bc413":"markdown","33c364b0":"markdown","c557d48e":"markdown","e48d4c9e":"markdown","d98714e5":"markdown","f8defd60":"markdown","8d14e708":"markdown","533f2cf1":"markdown","1eb37f89":"markdown","ed5b521c":"markdown","db11c9e0":"markdown","ad3c6734":"markdown","d3e7eca5":"markdown","1786be56":"markdown","c37462b5":"markdown","c20bbd65":"markdown","694a5fa6":"markdown","bdb2d0d1":"markdown","3adeb3e7":"markdown","b25e2554":"markdown"},"source":{"b3ed1119":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report, roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC ","592daace":"import warnings\nwarnings.filterwarnings(\"ignore\")","b4deef0f":"%matplotlib inline","fd1ffd6f":"path_dataset = '\/kaggle\/input\/titanic\/train.csv'\nseparator = \",\"\ndf = pd.read_csv(path_dataset, sep = separator)\ndf.head()","7cfb83cb":"sns.heatmap(df.corr(), annot=True)\nplt.figure(figsize=(15,6))\nplt.show()","4bcd1b02":"del df['PassengerId']\ndel df['Name']\ndel df['SibSp']\ndel df['Parch']\ndel df['Ticket']\ndel df['Fare']\ndf","e0721308":"df.info()","165f9698":"df.isnull().sum()","704f1927":"df.describe()","c5a76bb5":"df['Cabin'] = df['Cabin'].str[:1]","11baaeb7":"male = df['Sex'] == 'male'\nfemale = df['Sex'] == 'female'\n\ndf.loc[male, 'Age'] = df.loc[male, 'Age'].fillna(df.loc[male, 'Age'].mean())\ndf.loc[female, 'Age'] = df.loc[female, 'Age'].fillna(df.loc[female, 'Age'].mean())","79391c69":"values = {'Cabin': '0', 'Embarked': 'S'}\ndf.fillna(value=values, inplace=True)","bc05c539":"df['Sex'].replace(to_replace=['male', 'female'],value=[0, 1], inplace=True)","c9905302":"df['No_Cabin'] = 0\ndf['No_Cabin'][df['Cabin'] == '0'] = 1\ndel df['Cabin']","e93479c3":"df['Children'] = 0\ndf['Children'][df['Age'] <= 12] = 1","5726ab08":"df = pd.get_dummies(data=df, columns=['Pclass', 'Embarked'])","d0ae6634":"sns.heatmap(df.corr(), annot=True)\nplt.figure(figsize=(15,6))\nplt.show()","5074b6cb":"y = df['Survived']\nX = df.drop(['Survived'], axis=1)","a81abcd3":"colums_X = X.columns.to_list()\nss = StandardScaler()\nss.fit_transform(X)\nX = pd.DataFrame(data = ss.fit_transform(X), columns=colums_X)\nX","bc6ded1e":"forest = ExtraTreesClassifier(n_estimators=250, random_state=0)\ncolumnas = X.columns.to_list()\nforest.fit(X, y)\nimportances = forest.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in forest.estimators_],\n             axis=0)\nindices = np.argsort(importances)[::-1]\n\nprint(\"Feature ranking:\")\n\nfor f in range(X.shape[1]):\n    print(\"%d. feature %s (%f of 100)\" % (f + 1, columnas[indices[f]], importances[indices[f]]*100))","5cf98223":"model_Ada = AdaBoostClassifier()\nmodel_Ada.fit(X, y)\n\npred_Ada_train = model_Ada.predict(X)\n\nprint('LogReg Accuracy: {}'.format(model_Ada.score(X, y)))","0add4ec5":"model_Forest = RandomForestClassifier()\nmodel_Forest.fit(X, y)\n\npred_Forest_train = model_Forest.predict(X)\n\nprint('LogReg Accuracy: {}'.format(model_Forest.score(X, y)))","1ca37f82":"model_KN = KNeighborsClassifier()\nmodel_KN.fit(X, y)\n\npred_KN_train = model_KN.predict(X)\n\nprint('LogReg Accuracy: {}'.format(model_KN.score(X, y)))\n","7ca5acf0":"model_SVC = SVC() \nmodel_SVC.fit(X, y) \n\npredictions_SVC = model_SVC.predict(X) \nprint(classification_report(y, predictions_SVC)) ","beeb9e92":"gs = True\n\nif gs:\n    param_grid = {\n        'n_estimators' : [200, 300],\n        'max_depth' :  [20, 30],\n        'max_features' : ['log2','auto'],\n        'min_samples_split' : [2],\n        'min_samples_leaf' : [2]\n    }\n\n    grid_search_model_Forest = GridSearchCV(model_Forest, param_grid, cv = 10, refit=True)\n    grid_search_model_Forest.fit(X,y)\n    print(f'Best Parameters: {grid_search_model_Forest.best_params_}')\n    print(f'Best Score: {grid_search_model_Forest.best_score_}')","b5b085da":"path_dataset = '\/kaggle\/input\/titanic\/test.csv'\nseparator = \",\"\ndf_test = pd.read_csv(path_dataset, sep = separator)","ced58c1c":"df_test_passengerId = df_test['PassengerId']","2bba4597":"del df_test['PassengerId']\ndel df_test['Name']\ndel df_test['SibSp']\ndel df_test['Parch']\ndel df_test['Ticket']\ndel df_test['Fare']","bf37ad25":"df_test['Cabin'] = df_test['Cabin'].str[:1]\n\nmale = df_test['Sex'] == 'male'\nfemale = df_test['Sex'] == 'female'\n\ndf_test.loc[male, 'Age'] = df_test.loc[male, 'Age'].fillna(df_test.loc[male, 'Age'].mean())\ndf_test.loc[female, 'Age'] = df_test.loc[female, 'Age'].fillna(df_test.loc[female, 'Age'].mean())\n\ndf_test['Sex'].replace(to_replace=['male', 'female'],value=[0, 1], inplace=True)\n\nvalues = {'Cabin': '0', 'Embarked': 'S'}\ndf_test.fillna(value=values, inplace=True)\n\ndf_test['No_Cabin'] = 0\ndf_test['No_Cabin'][df_test['Cabin'] == '0'] = 1\ndel df_test['Cabin']\n\ndf_test['Children'] = 0\ndf_test['Children'][df_test['Age'] <= 12] = 1\n\ndf_test = pd.get_dummies(data=df_test, columns=['Pclass', 'Embarked'])\ndf_test","061aa0e5":"X_test = df_test\n\ncolums_X_test = X_test.columns.to_list()\n\nss = StandardScaler()\nss.fit_transform(X_test)\nX_test = pd.DataFrame(data = ss.fit_transform(X_test), columns=colums_X_test)\nX_test","240231d6":"model_Forest_best_params = RandomForestClassifier(max_depth= 30, max_features= 'log2', min_samples_leaf= 2, min_samples_split= 2, n_estimators= 200)\nmodel_Forest_best_params.fit(X, y)\nmodel_Forest_best_params.score(X, y)","7edf5999":"pred_Forest = model_Forest_best_params.predict(X_test)\npred_Forest","2c633080":"submission = pd.DataFrame({\n        \"PassengerId\": df_test_passengerId,\n        \"Survived\": pred_Forest\n    })\nsubmission","df635d73":"submission.to_csv('titanic_submission.csv', index=False)","565bc413":"# Predict","33c364b0":"Include No_Cabin column to indicate that passengers did not have a cabin","c557d48e":"To take advantage of the cabin column we are left with the first character","e48d4c9e":"# Data preprocessing","d98714e5":"I delete the columns that are not realigned with the problem or that have a high cardinality","f8defd60":"### Random Forest ","8d14e708":"Fill Nan in Age column with mean of male or female","533f2cf1":"### SVC","1eb37f89":"I replace categorical values with numeric values","ed5b521c":"### Ada Boost","db11c9e0":"# Train Models","ad3c6734":"# Load and clean test dataset","d3e7eca5":"# Feature Importance","1786be56":"Fill Nan in Cabin with 0 to indicate that they had no cabin","c37462b5":"\n# Exploratory data analysis","c20bbd65":"# Create Data Submission","694a5fa6":"I create a column to indicate which passengers were children","bdb2d0d1":"### KNeighbors","3adeb3e7":"# Hyperparameter for model","b25e2554":"### I create the dataframes for the feature importances and train the models "}}