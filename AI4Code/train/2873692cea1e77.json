{"cell_type":{"7e344476":"code","f01b07cd":"code","ad8e86dd":"code","dea28daa":"code","6df555cd":"code","0e29d093":"code","f21917f1":"code","d30fe2ee":"code","d4f01ab4":"code","1337602e":"code","8eaf705c":"code","d8d1919d":"code","87280487":"code","2cfa0107":"code","e9c73862":"code","fda061ce":"code","41c07e07":"code","363dc242":"code","a667bf53":"code","34e17bca":"code","2e72dfb2":"markdown","67c369a3":"markdown","6513b232":"markdown","98f2d870":"markdown","a47e8d15":"markdown","b09cc74e":"markdown","5750bf06":"markdown","fca71c73":"markdown","b6b5faab":"markdown","eef18395":"markdown","87ba22ff":"markdown","b704401a":"markdown","3ccbe713":"markdown","fb32b7db":"markdown","04ace5ea":"markdown","73ca3360":"markdown"},"source":{"7e344476":"ratings_initialization = 1500 # where to start Elo ratings\nk_series = [10, 20] # how much importance to give to recent games - higher value assigns more importance\nhome_adv_series = [100, 200] # value of home court advantage\nrevert_series = [0.4, 0.6] # how much mean reversion to allow after seasons - note if revert_option = 'None', still need to have at least one value here\nrevert_option = ['None', 'NCAA', 'Conf'] # options for mean reversion - 'None', 'NCAA', or 'Conf'. NCAA reverts to ratings_initialization, 'Conf' revers to end of season mean for each conference\nfirst_season = [2000, 2010] # what season to start ELO calculation in\nkeep_seasons = [2014, 2015, 2016, 2017, 2018] # which seasons to keep end of season ELOs, for prediction and analysis","f01b07cd":"# for data manipulation\nimport pandas as pd\nimport numpy as np \n\n# for tracking simulation time\nimport time\n\n# for individual log loss function evaluation\nimport math\n\n# for vector log loss metric evaluation\nimport sklearn\nfrom sklearn import metrics\n\n# for visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","ad8e86dd":"regular_season = pd.read_csv(\"..\/input\/datafiles\/RegularSeasonCompactResults.csv\")\ntourney = pd.read_csv(\"..\/input\/datafiles\/NCAATourneyCompactResults.csv\")\nteams = pd.read_csv(\"..\/input\/datafiles\/Teams.csv\")\nseeds = pd.read_csv(\"..\/input\/datafiles\/NCAATourneySeeds.csv\")\nconferences = pd.read_csv(\"..\/input\/datafiles\/TeamConferences.csv\").rename({'TeamID':'team_id', 'Season': 'season'}, axis='columns')\npredictions = pd.read_csv(\"..\/input\/SampleSubmissionStage1.csv\")\nresults = pd.read_csv(\"..\/input\/datafiles\/NCAATourneyCompactResults.csv\")","dea28daa":"# Create tourney data indicator in regular season and tourney data\nregular_season['Tourney_Ind'] = 'N'\ntourney['Tourney_Ind'] = 'Y'\n# Append tourney data to regular season data\ngames = regular_season.append(tourney)\n\n# Columns to help identify teams, store Elo ratings\ngames['Team1ID'] = games.apply(lambda r: '_'.join(map(str, [r['Season']]+sorted([r['WTeamID']]))), axis=1)\ngames['Team2ID'] = games.apply(lambda r: '_'.join(map(str, [r['Season']]+sorted([r['LTeamID']]))), axis=1)\ngames['Team1Elo'] = ratings_initialization\ngames['Team2Elo'] = ratings_initialization\ngames['margin'] = games['WScore'] - games['LScore']\n#games['elo'] = None\n\n# Create dictionary to store Elo ratings, for quick iteration\ndf_Team1 = pd.DataFrame({'Team': games['Team1ID'], 'Elo': games['Team1Elo']})\ndf_Team2 = pd.DataFrame({'Team': games['Team2ID'], 'Elo': games['Team2Elo']})\ndf_Team = df_Team1.append(df_Team2)\ndf_Team = df_Team.drop_duplicates(['Team'])\ndf_Team['Season'] = df_Team['Team'].map(lambda x: x.split('_')[0]).astype(int)\ndf_Team['Team'] = df_Team['Team'].map(lambda x: x.split('_')[1]).astype(int)\nelo_dict = dict(zip(df_Team['Team'], df_Team['Elo']))\n\n# Merge in conference abbreviations for teams\ngames = games.merge(conferences.rename(columns={'team_id': 'WTeamID', 'season':'Season'}), how='inner', on=['WTeamID', 'Season']).rename(columns={'ConfAbbrev': 'WTeam_ConfAbbrev'})\ngames = games.merge(conferences.rename(columns={'team_id': 'LTeamID', 'season':'Season'}), how='inner', on=['LTeamID', 'Season']).rename(columns={'ConfAbbrev': 'LTeam_ConfAbbrev'})","6df555cd":"def elo_dataframe(df, team_id):\n   # Creates dataframe ready to take in Elo simulations \n    d = games.copy()\n    d = d.loc[(d['WTeamID'] == team_id) | (d['LTeamID'] == team_id), :].reset_index(drop=True)\n    d.loc[(d['WTeamID'] == team_id), 'conference'] = d['WTeam_ConfAbbrev']\n    d.loc[(d['LTeamID'] == team_id), 'conference'] = d['LTeam_ConfAbbrev']\n    d.drop_duplicates(['Season'], keep='last', inplace=True)\n    out = pd.DataFrame({\n        'team_id': team_id,\n        'season': d['Season'],\n        'conference': d['conference']\n    })\n    return(out)\n\ndef elo_update(w_elo, l_elo, margin, k):\n    ''' Calculates updated Elo rankings after taking in game results '''\n    \n    elo_diff = w_elo - l_elo\n    pred = (1. \/ (10. ** (-(w_elo - l_elo) \/ 400.) + 1.))\n    mult = math.log(abs(margin)+1)*(2.2\/((w_elo-l_elo)*0.001+2.2))\n    update = k * mult * (1 - pred)\n    \n    return(pred, update)\n\ndef calculate_elo(in_df, out_df, scenario_dict, k, home_adv, revert, option):\n    ''' Iterates through all games in the dataframe, calculating Elo ratings at each point in time '''\n    preds = []\n    elo_df = pd.DataFrame(columns=['team_id', 'season', 'elo'])\n    elo_df['team_id'] = elo_df['team_id'].astype(int)\n    elo_df['season'] = elo_df['season'].astype(int)\n    scenario_dict = {x:ratings_initialization for x, y in scenario_dict.items()}\n                    \n    for i in range(in_df.shape[0]):\n            # Get key data from current row\n            w = in_df.at[i, 'WTeamID']\n            l = in_df.at[i, 'LTeamID']\n            margin = in_df.at[i, 'margin']\n            wloc = in_df.at[i, 'WLoc']\n            # Does either team get a home-court advantage?\n            w_ad, l_ad, = 0., 0.\n            if wloc == \"H\":\n                w_ad += home_adv\n            elif wloc == \"A\":\n                l_ad += home_adv\n            # Get elo updates as a result of the game\n            pred, update = elo_update(scenario_dict[w] + w_ad,\n                                      scenario_dict[l] + l_ad, \n                                      margin,\n                                      k)\n            scenario_dict[w] += update\n            scenario_dict[l] -= update\n            preds.append(pred)\n            # If game is last of the regular season for a given scenario, stores the elo in the elo_df dataframe, to be included in the output\n            if ((i+1 in range(in_df.shape[0])) and (in_df.at[i+1, 'Tourney_Ind'] == 'Y') and (in_df.at[i, 'Tourney_Ind'] == 'N')) or (i == in_df.shape[0]):\n                elo = pd.DataFrame.from_dict(scenario_dict, orient='index', columns=['elo']).reset_index().rename(columns={'index':'team_id'})\n                elo['season']= in_df.at[i, 'Season']\n                elo_df = elo_df.append(elo, sort=True)\n               # print(elo_df.shape)\n            # If a new season is started, account for some mean reversion \n            if (i+1 in range(in_df.shape[0])) and (in_df.at[i, 'Season'] < in_df.at[i+1, 'Season']):\n                if option == 'NCAA':\n                    scenario_dict = {x:((revert*ratings_initialization) + ((1-revert)*y)) for x, y in scenario_dict.items()}\n                elif option == 'Conf':\n                    conf_elo_df = elo.merge(out_df, how='inner', on=['team_id', 'season']) #brings in conferences\n                    conf_elo_df = conf_elo_df[conf_elo_df['season']==in_df.at[i, 'Season']] #only keep current season values\n                    conf_elo_df['conference_elo'] = conf_elo_df['elo'].groupby(conf_elo_df['conference']).transform('mean') # group elos by conference to find conference means\n                    conf_elo_df['new_elo'] = (conf_elo_df['elo']*(1-revert))+(conf_elo_df['conference_elo']*revert)\n                    scenario_dict.update({x:y for x,y in zip(conf_elo_df['team_id'],conf_elo_df['new_elo'])})\n                else:\n                    scenario_dict = scenario_dict\n                               \n    out_df = out_df.merge(elo_df, how='inner', on=['team_id', 'season'])   \n    return(out_df)","0e29d093":"start = time.time()\n\n#Set up dataframes to hold Elo ratings - only setup to keep results that we can test on (2014-2018 tournaments)\ngames = games.sort_values(by=['Season', 'DayNum'], ascending=True).reset_index(drop=True)\nseasons_keep = games[games['Season'].isin(keep_seasons)]\nteam_ids = set(seasons_keep['WTeamID']).union(set(seasons_keep['LTeamID']))\nelo_list = [elo_dataframe(games, i) for i in team_ids]\nseason_elos = pd.concat(elo_list)\nscenario_elos = season_elos\n\nfor season in first_season:\n    # Set games dataframe to only include seasons you want to iterate over\n    games_indexed = games[games['Season'] >= season]\n    # Make sure games index is in order, otherwise functions won't work\n    games_indexed = games_indexed.sort_values(by=['Season', 'DayNum'], ascending=True).reset_index(drop=True)\n    \n    #Run through scenarios\n    for k in k_series:\n        for home_adv in home_adv_series:\n            for revert in revert_series:\n                for option in revert_option:\n            # Calculate Elo ratings\n                    scenario = calculate_elo(in_df = games_indexed, out_df=scenario_elos, scenario_dict=elo_dict, k=k, home_adv=home_adv, revert=revert, option=option).rename({\n                        'elo':'elo_'+str(season)+'_'+str(k)+'_'+str(home_adv)+'_'+str(revert)+'_'+str(option)}, axis='columns')\n                    season_elos =season_elos.merge(scenario, how='inner', on=['team_id', 'season', 'conference'])\n        \nprint(\"Completed in\", time.time() - start, \"seconds\")","f21917f1":"# Data prep\npredictions['Season'] = predictions['ID'].map(lambda x: x.split('_')[0]).astype(int)\npredictions['Team1'] = predictions['ID'].map(lambda x: x.split('_')[1]).astype(int)\npredictions['Team2'] = predictions['ID'].map(lambda x: x.split('_')[2]).astype(int)\n\nelos1 = season_elos.rename(columns={'team_id':'Team1', 'season': 'Season'})\nelos2 = season_elos.rename(columns={'team_id':'Team2', 'season': 'Season'})\n\npredictions = pd.merge(left=predictions, right=elos1, how='left', on=['Team1', 'Season'])\npredictions = pd.merge(left=predictions, right=elos2, how='left', on=['Team2', 'Season'])","d30fe2ee":"# Prediction function\ndef elo_pred(elo1, elo2):\n    pred = 1. \/ (10. ** (-(np.subtract(elo1, elo2)) \/ 400.) + 1.)\n    return pred","d4f01ab4":"# Create predictions\nfor season in first_season:\n    for k in k_series:\n        for home_adv in home_adv_series:\n            for revert in revert_series:\n                for option in revert_option:\n        # Calculate Elo ratings\n                     predictions['pred_'+str(season)+'_'+str(k)+'_'+str(home_adv)+'_'+str(revert)+'_'+str(option)]= elo_pred(predictions['elo_'+str(season)+'_'+str(k)+'_'+str(home_adv)+'_'+str(revert)+'_'+str(option)+'_x'],\n                             predictions['elo_'+str(season)+'_'+str(k)+'_'+str(home_adv)+'_'+str(revert)+'_'+str(option)+'_y'])","1337602e":"# Load in actual results\nresults = results.loc[results['DayNum'] > 135] \nresults['Team1'] = results[['WTeamID','LTeamID']].min(axis=1)\nresults['Team2'] = results[['WTeamID','LTeamID']].max(axis=1)\npredictions = pd.merge(predictions, results, how='inner', on=['Season','Team1','Team2'])\npredictions['result'] = (predictions['WTeamID'] == predictions['Team1']).astype(int)","8eaf705c":"# Total log loss for each iteration of ELO\nlogloss=pd.DataFrame(columns=['name', 'log_loss'])\nname = []\ncalc = []\n\nfor season in first_season:\n    for k in k_series:\n        for home_adv in home_adv_series:\n            for revert in revert_series:\n                for option in revert_option:\n        # Calculate Elo ratings\n                    name_i = str(season)+\"_\"+str(k)+\"_\"+str(home_adv)+\"_\"+str(revert)+\"_\"+str(option)\n                    calc_i = sklearn.metrics.log_loss(predictions['result'], predictions['pred_'+str(season)+\"_\"+str(k)+'_'+str(home_adv)+'_'+str(revert)+'_'+str(option)], eps=1e-15) \n                    \n                    name.append(name_i)\n                    calc.append(calc_i)\n\nlogloss['name'] = name\nlogloss['log_loss'] = calc","d8d1919d":"# Let's only keep top 20 results, for comparison\nlogloss = logloss.sort_values(by='log_loss', ascending=True, axis=0)\nlogloss_top10 = logloss[:9]\nlogloss_top10","87280487":"# Calculate season by season results for scenarios with top 10 total log loss\nlogloss_season=pd.DataFrame(columns=['name', 'season', 'log_loss']) \nname = []\nseason = []\ncalc = []\n\nfor s in predictions['Season'].unique():\n    data = predictions[predictions['Season']==s]\n    for scenario in logloss_top10['name'].unique(): \n        # Calculate Elo ratings\n                    name_i = scenario\n                    season_i = s\n                    calc_i = sklearn.metrics.log_loss(data['result'], data['pred_'+str(scenario)],eps=1e-15) \n                    \n                    name.append(name_i)\n                    season.append(season_i)\n                    calc.append(calc_i)\n\nlogloss_season['name'] = name\nlogloss_season['season'] = season\nlogloss_season['log_loss'] = calc","2cfa0107":"# Visualize season by season results of predictions\nsns.lineplot(x=logloss_season['season'], y=logloss_season['log_loss'], hue=logloss_season['name'], legend=False) ","e9c73862":"# Pick a scenario to further analyze\nscenario = '2000_10_100_0.4_None'","fda061ce":"analysis = predictions[['ID', 'Season', 'Team1', 'Team2', 'conference_x', 'conference_y', 'elo_'+scenario+'_x',\n                       'elo_'+scenario+'_y', 'pred_'+scenario, 'result', 'WScore', 'LScore']]\nanalysis = analysis.rename(columns={'conference_x':'conference1', 'conference_y':'conference2', \n                                   'elo_'+scenario+'_x':'elo1','elo_'+scenario+'_y': 'elo2',\n                                   'pred_'+scenario:'pred'})\n#Bring in team names\nanalysis = analysis.merge(teams[['TeamID', 'TeamName']],left_on=['Team1'], right_on=['TeamID'], how='left').rename(columns={'TeamName':'TeamName1'})\nanalysis = analysis.merge(teams[['TeamID', 'TeamName']],left_on=['Team2'], right_on=['TeamID'], how='left').rename(columns={'TeamName':'TeamName2'})","41c07e07":"# Calculate log loss for individual games to see where biggest errors are\n\ndef logloss(true_label, predicted, eps=1e-15):\n  p = np.clip(predicted, eps, 1 - eps)\n  if true_label == 1:\n    return -math.log(p)\n  else:\n    return -math.log(1 - p)\n\nanalysis['logloss']=0\nanalysis['logloss']=analysis['logloss'].astype(float)\nfor i in range(len(analysis.index)):\n    analysis['logloss'][i] = logloss(analysis['result'][i], analysis['pred'][i], eps=1e-15) ","363dc242":"#Create dataframe for rankings analysis\nrankings = analysis[['Season', 'TeamName1', 'conference1', 'elo1']].drop_duplicates()\nrankings2 = analysis[['Season', 'TeamName2', 'conference2', 'elo2']].drop_duplicates().rename(columns={'TeamName2':'TeamName1', 'conference2':'conference1', 'elo2':'elo1'})\nrankings = rankings.append(rankings2, sort=True).drop_duplicates()\n\n#Create dataframe for evaluating biggest misses\nmisses = analysis[['Season', 'TeamName1', 'TeamName2', 'elo1', 'elo2', 'pred', 'WScore', 'LScore', 'logloss']]","a667bf53":"#2018 rankings\nrankings[rankings['Season']==2018].sort_values('elo1', ascending=False).head(10)","34e17bca":"#2018 biggest misses\nmisses[misses['Season']==2018].sort_values('logloss', ascending=False).head(10)","2e72dfb2":"# Import Data","67c369a3":"# User Defined Values","6513b232":"# Run Simulations","98f2d870":"# Analysis on End of Season ELO Rankings and Biggest Prediction Misses ","a47e8d15":"# Season by Season Log Loss for Top 10 Scenarios","b09cc74e":"# Calculate Log Loss for Each Scenario","5750bf06":"# Analysis","fca71c73":"# Functions to Calculate Elo Ratings and Find End of Regular Season Elo Ratings","b6b5faab":"Notebook that can be used to compare various ELO prediction setups, to find a setup that's optimized to your liking. Set your desired inputs in the \"User Defined Values\" section. General rule of thumb for compute time is about 1000 scenarios per hour.\n\nAll predictions are made using ELO ratings as of the end of the regular season. \n\nHappy to hear any and all ideas to make it better. Enjoy!\n\nResources:\n- https:\/\/en.wikipedia.org\/wiki\/Elo_rating_system\n- https:\/\/fivethirtyeight.com\/features\/how-we-calculate-nba-elo-ratings\/\n- https:\/\/github.com\/fivethirtyeight\/nfl-elo-game\/blob\/master\/forecast.py","eef18395":"# Data Prep for Predictions","87ba22ff":"# Import Packages","b704401a":"# Bring in Actual Results","3ccbe713":"# Function for Prediction","fb32b7db":"# Data Prep for Simulations","04ace5ea":"# Top 10 Log Loss Results for 2014-2018","73ca3360":"# Create Predictions"}}