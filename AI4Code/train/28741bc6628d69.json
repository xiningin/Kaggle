{"cell_type":{"ddddc6d0":"code","4d80745f":"code","1f324742":"code","5eaa257d":"code","1ce01edb":"code","cb317ba3":"code","2ce285e2":"code","867c0cb2":"code","6f3ea2c2":"code","09f95a53":"code","4e09a2aa":"code","d200b258":"code","d0753110":"code","28bcf213":"code","ec3f486e":"code","d10fae0b":"code","8562bea5":"code","43012581":"code","7503a791":"code","6b6cf9a5":"code","65017735":"code","51ba4a6d":"code","46284239":"code","65a907f9":"code","f38d62e0":"code","0faa44e1":"code","feabc319":"code","592d52ec":"code","e2063747":"markdown","62164a01":"markdown","4017bee8":"markdown","f7add5a5":"markdown","bb478c94":"markdown"},"source":{"ddddc6d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n\nimport math\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt","4d80745f":"data = pd.read_excel('\/kaggle\/input\/rbfrna\/Tabel_Treinamento_RNA.xls')","1f324742":"X = np.array(data.drop('d', 1))\ny = np.array(data['d'])","5eaa257d":"def grafDist(omg1,omg2,w1,w2, distXW1, distXW2):\n    circle1 = plt.Circle(w1, np.max(distXW1), color='r', fill=False)\n    circle2 = plt.Circle(w2, np.max(distXW2), color='blue', fill=False)\n    fig, ax = plt.subplots()\n    ax.plot(omg1[:,0],omg1[:,1], \"yo\",omg2[:,0],omg2[:,1], \"co\",w1[0],w1[1],\"ro\",w2[0],w2[1],\"bo\")\n    ax.add_artist(circle1)\n    ax.add_artist(circle2)","1ce01edb":"W1 = np.copy(X[0])\nW2 = np.copy(X[1])","cb317ba3":"O1Ant = np.array([])\nO2Ant = np.array([])\n\nwhile(True):\n\n    omega1 = []\n    omega2 = []\n    dew1s = np.array([])\n    dew2s = np.array([])\n\n    for i in range(len(X)):\n        \n        dew1 = math.sqrt((X[i][0]-W1[0])**2 + (X[i][1]-W1[1])**2)\n        dew2 = math.sqrt((X[i][0]-W2[0])**2 + (X[i][1]-W2[1])**2)\n        \n        if(dew1 < dew2):\n            omega1.append(X[i])\n            dew1s = np.append(dew1s, dew1)\n        else:\n            omega2.append(X[i])\n            dew2s = np.append(dew2s, dew2)\n            \n\n    omega1 = np.array(omega1)\n    omega2 = np.array(omega2)\n\n    if(np.array_equal(O1Ant, omega1) and np.array_equal(O2Ant, omega2)):\n        grafDist(omega1, omega2, W1, W2, dew1s, dew2s)\n        break\n    else:\n        O1Ant = np.copy(omega1)\n        O2Ant = np.copy(omega2)\n        \n        W1[0] = omega1[:, 0].mean()\n        W1[1] = omega1[:, 1].mean()\n\n        W2[0] = omega2[:, 0].mean()\n        W2[1] = omega2[:, 1].mean()","2ce285e2":"def somatoria(x, w):\n    return sum((x - w)**2)","867c0cb2":"def variancia(x, w):\n    return np.mean((x-w)**2)","6f3ea2c2":"var1 = variancia(O1Ant, W1)\nvar2 = variancia(O2Ant, W2)\nprint('var1 = {}\\nvar2 = {}'.format(var1, var2))","09f95a53":"W1","4e09a2aa":"W2","d200b258":"def calcG(x, w, var):\n    \n    g = []\n    \n    for i in range(len(x)):\n        g.append(math.exp(-somatoria(x[i], w)\/(2*var)))\n    \n    return g","d0753110":"g1 = calcG(X, W1, var1)\ng2 = calcG(X, W2, var2)","28bcf213":"#Fun\u00e7\u00e3o para achar o EQM\ndef eqmFun(X,y,w):       \n    yp=[]\n    for i in range(len(X)):\n        yp.append(np.dot(X[i],w))                        \n    return mean_squared_error(y,np.array(yp))","ec3f486e":"X2 = np.array([g1, g2]).T\nX2 = np.hstack((np.ones([len(X2), 1]), X2))","d10fae0b":"X_train, X_test, y_train, y_test = train_test_split(X2, y, test_size=0.30, random_state=42)\n_W = np.random.uniform(0, 1, len(X2[0]))\ntolerancia=0.0000001\nl_rate=0.01\nnum_epocas=100000\nepocas=0\neqm=0.1\neqmIni=0.1","8562bea5":"while(eqm > tolerancia):\n           \n    for i in range(len(X_train)): \n        yp= np.dot(X_train[i], _W)             #Previsao para calcular o erro         \n        erro = y_train[i]-yp                   #Calculo do Erro\n        _W += l_rate * erro * X_train[i]     #Atualiza os pesos\n        \n    eqmFim = eqmFun(X_train, y_train , _W)         #EQM \"final\" que sera utilisado para o calculo do EQM de parada do loop                           \n    eqm = abs(eqmFim-eqmIni)           #Calculo do EQM que para o loop\n    #print(\"EQM: {} | epocas: {}\".format(eqm,epocas))\n    \n    eqmIni = eqmFim               #Copias o EQM \"final\" para o \"inicial\"\n    epocas+=1                  #Adicona 1 ao numero de epocas\n    if(epocas==num_epocas):     #Parada para quando atingir o maximo de epocas\n        break","43012581":"def predict(x, w):\n    return sum(x * w), 1 if(sum(x * w)>=0) else -1","7503a791":"_W","6b6cf9a5":"def test_precisao(x, y, w):\n    acertos = 0\n    for i in range(len(x)):\n        if(predict(x[i], w)[1] == y[i]):\n            acertos += 1\n    return \"Total de Testes: {}, Acertos: {}, Erros: {}, Precis\u00e3o: {} %\".format(len(x), acertos, (len(x)-acertos), round((acertos*100)\/len(x), 2))","65017735":"test_precisao(X_train, y_train, _W)","51ba4a6d":"test_precisao(X_test, y_test, _W)","46284239":"data_teste = pd.read_csv('\/kaggle\/input\/rbfrna\/teste.csv')","65a907f9":"xt = np.array(data_teste.drop('d', 1))\nyt = np.array(data_teste['d'])","f38d62e0":"g1t = calcG(xt, W1, var1)\ng2t = calcG(xt, W2, var2)","0faa44e1":"xt = np.hstack((np.ones([len(xt), 1]), np.array([g1t, g2t]).T))","feabc319":"test_precisao(xt, yt, _W)","592d52ec":"for i in range(len(xt)):\n    pred = predict(xt[i], _W)\n    y = pred[0]\n    ypos = pred[1]\n    resp = yt[i]\n    print('y = {:.7f} \\t ypos = {} \\t resp = {} \\t {}'.format(y, ypos, resp, ypos==resp))","e2063747":"# Testando o desempenho com dados desconhecidos","62164a01":"# Vendo valores de y e ypos","4017bee8":"# Gambiarras do kmeans","f7add5a5":"# Passando o adaline que peguei do DIOGAO pq o meu tava bixado","bb478c94":"# Testando o desempenho com dados conhecidos"}}