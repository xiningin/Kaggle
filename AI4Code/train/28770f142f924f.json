{"cell_type":{"cd581231":"code","204b2397":"code","2a361ddf":"code","2c0f300d":"code","20eacbf5":"code","479635bd":"code","202be21e":"code","bc7be1b9":"code","2f39a985":"code","391d1a72":"code","b4665abc":"code","d8fd2567":"code","d777de91":"code","9d388169":"code","453a022c":"code","3833c717":"code","ddf73fde":"code","5b674a9f":"code","182a4381":"code","acb28b35":"code","8e630197":"code","68e26efe":"code","c90c02b7":"markdown","1827a5af":"markdown","28132609":"markdown","54daa31b":"markdown","18ca4027":"markdown"},"source":{"cd581231":"import numpy as  np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import MobileNetV2\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.keras.layers import Flatten, Dense, Dropout\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import Callback, EarlyStopping\nfrom sklearn.metrics import classification_report, confusion_matrix","204b2397":"data = pd.read_csv('..\/input\/car-damage-assessment\/data.csv')\ndata.head()","2a361ddf":"# Drop 'Unnamed: 0'\ndata.drop(['Unnamed: 0'], axis=1, inplace=True)","2c0f300d":"data.info()","20eacbf5":"data.isnull().sum()","479635bd":"counts = data['classes'].value_counts()\nsns.barplot(x=counts.index, y=counts)\nplt.xlabel('Classes')\nplt.ylabel('Count')\nplt.xticks(rotation=40);","202be21e":"path = '..\/input\/car-damage-assessment\/'\ndef edit_path_img(x):\n    return path + x","bc7be1b9":"data[\"image\"] = data[\"image\"].apply(edit_path_img)\ndata.head()","2f39a985":"datafig, axes = plt.subplots(nrows=4, ncols=2, figsize=(10, 8),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(data.image[i]))\n    ax.set_title(data.classes[i])\nplt.tight_layout()\nplt.show()","391d1a72":"train_df, test_df = train_test_split(data, test_size=0.2)","b4665abc":"train_datagen = ImageDataGenerator(\n    preprocessing_function=preprocess_input,\n    validation_split=0.2\n)\ntest_datagen = ImageDataGenerator(\n    preprocessing_function=preprocess_input\n)","d8fd2567":"train_gen = train_datagen.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='image',\n    y_col='classes',\n    target_size=(224, 224),\n    color_mode='rgb',\n    batch_size=32,\n    shuffle=True,\n    seed=0\n)\n\nval_gen = train_datagen.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='image',\n    y_col='classes',\n    target_size=(224, 224),\n    batch_size=32,\n    shuffle=True,\n    seed=0\n)\n\ntest_gen = test_datagen.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='image',\n    y_col='classes',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=False\n)","d777de91":"pretrained_model = MobileNetV2(\n    input_shape=(224, 224, 3),\n    include_top=False,\n    weights='imagenet',\n    pooling='avg'\n)\n\npretrained_model.trainable = False","9d388169":"inputs = pretrained_model.input\nx = Dense(120, activation='relu')(pretrained_model.output)\nx = Dense(120, activation='relu')(x)\noutputs = Dense(8, activation='softmax')(x)\nmodel = Model(inputs=inputs, outputs=outputs)","453a022c":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","3833c717":"my_callbacks  = [EarlyStopping(monitor='val_accuracy',\n                              min_delta=0,\n                              patience=2,\n                              mode='auto')]","ddf73fde":"history = model.fit(train_gen, validation_data=val_gen, epochs=50, callbacks=my_callbacks)","5b674a9f":"# Plotting Accuracy and val_accuracy\npd.DataFrame(history.history)[['accuracy','val_accuracy']].plot()\nplt.title(\"Accuracy\")\nplt.show()\n\n# Plotting loss and val_loss\npd.DataFrame(history.history)[['loss','val_loss']].plot()\nplt.title(\"Loss\")\nplt.show()","182a4381":"# Calculating Test Accuracy and Loss\nresults = model.evaluate(test_gen, verbose=0)\n\nprint(\"    Test Loss: {:.5f}\".format(results[0]))\nprint(\"Test Accuracy: {:.2f}%\".format(results[1] * 100))","acb28b35":"pred = model.predict(test_gen )\npred = np.argmax(pred,axis=1)\n\n# Map the label\nlabels = (train_gen.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npred = [labels[k] for k in pred]","8e630197":"# Classification report\ny_test = list(test_df.classes)\nprint(classification_report(y_test, pred))","68e26efe":"fig, axes = plt.subplots(nrows=2, ncols=4, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(test_df.image.iloc[i]))\n    ax.set_title(f\"True: {test_df.classes.iloc[i]}\\nPredicted: {pred[i]}\")\nplt.tight_layout()\nplt.show()","c90c02b7":"# Train & Test Split","1827a5af":"# Load Dataset","28132609":"### Checking for null values","54daa31b":"# Importing Libraries","18ca4027":"### bar graph showing \"classes\""}}