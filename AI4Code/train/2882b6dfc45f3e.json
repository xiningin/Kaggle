{"cell_type":{"722188cd":"code","8056efcc":"code","77550f88":"code","fa0adcc1":"code","d560651b":"code","368d6bf8":"code","f5bc91de":"code","56a1afc0":"code","dd9f98a0":"code","8d7ec5a7":"code","99ddb69c":"code","2ad30ab3":"code","fa6fc986":"code","a86863a5":"code","772291cc":"code","999c14ae":"markdown","652e1628":"markdown","3351d453":"markdown","d9f0cfb7":"markdown","24e44c3a":"markdown","6bc808cd":"markdown"},"source":{"722188cd":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport keras\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\n\nimport os\nprint(os.listdir(\"..\/input\"))","8056efcc":"nbr_of_clases = 10\nvalidation_percentage = 0.2\nresnet_path = '..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\ntraining_data = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","77550f88":"def prepare_data_for_resnet50(data_to_transform):\n    data = data_to_transform.copy().values\n    data = data.reshape(-1, 28, 28) \/ 255\n    data = X_rgb = np.stack([data, data, data], axis=-1)\n    return data","fa0adcc1":"y = training_data.pop('label').values\nX = training_data\n\ny = keras.utils.to_categorical(y, nbr_of_clases)\nX_rgb = prepare_data_for_resnet50(X)\n\nX_train, X_val, y_train, y_val = train_test_split(X_rgb, y, test_size=validation_percentage)","d560651b":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.applications.resnet50 import ResNet50\n\nmodel = Sequential()\nmodel.add(ResNet50(include_top=False, pooling='avg', weights=resnet_path))\n\n# model.add(Dense(256, activation='relu'))\n# model.add(Dropout(0.25))\n# model.add(Dense(124, activation='relu'))\nmodel.add(Dropout(0.50))\nmodel.add(Dense(nbr_of_clases, activation='softmax'))\n\n# model.layers[0].trainable = False\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","368d6bf8":"def fit_model(model, epochs=1, train_test_split=0.0):\n    model.fit(X_rgb, y, epochs=epochs, validation_split=train_test_split)\n    \ndef get_fitted_data_generator(data):\n    data_generator = ImageDataGenerator(rotation_range=10, width_shift_range=0.1,\n                                   height_shift_range=0.1, zoom_range=0.1)\n    data_generator.fit(data)\n    return data_generator\n    \ndef fit_model_generator(model, X_train, y_train, epochs=1, batch=32, validation_data=False, X_val=None, y_val=None):\n    image_nbr = np.size(X_train, 0)\n    training_data_generator = get_fitted_data_generator(X_train)\n    \n    if validation_data:\n        return model.fit_generator(training_data_generator.flow(X_train, y_train, batch_size=batch), steps_per_epoch=(image_nbr\/\/batch),\n                        epochs=epochs, validation_data=(X_val, y_val), verbose=1)\n    else:\n        return model.fit_generator(training_data_generator.flow(X_train, y_train, batch_size=batch), steps_per_epoch=(image_nbr\/\/batch),\n                        epochs=epochs, verbose=1)","f5bc91de":"model_history = fit_model_generator(model, X_train, y_train, epochs=1, \n                                    validation_data=True, X_val=X_val, y_val=y_val)","56a1afc0":"def get_predictions(model, data):\n    return np.array([np.argmax(prediction) for prediction in model.predict(data)])","dd9f98a0":"predicted = get_predictions(model, X_val)\npd.Series(predicted).value_counts()","8d7ec5a7":"pd.Series([np.argmax(i) for i in y_val]).value_counts()","99ddb69c":"show_images = 10\n\nfor i in range(show_images):\n    plt.subplot(show_images \/\/ 5 + 1, 5, i + 1)\n    plt.title(str(predicted[i]))\n    plt.imshow(X_val[i, :, :, 1].reshape(28, 28))","2ad30ab3":"# Hyper params\nfinal_epochs = 30","fa6fc986":"# Fit on all data\nfull_data_model = fit_model_generator(model, X_rgb, y, epochs=final_epochs, validation_data=False)","a86863a5":"# Making predictions\ntesting_data = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntesting_data = prepare_data_for_resnet50(testing_data)\n\nfinal_predictions = get_predictions(model, testing_data)","772291cc":"# Output file generation\nsubmission_filename = 'submission.csv'\nanswers = pd.DataFrame({'ImageId':range(1, final_predictions.size + 1),\n                        'Label':final_predictions})\nanswers.to_csv(submission_filename, index=False)","999c14ae":"# Training","652e1628":"Check what are the most common numbers in training dataset","3351d453":"# Model creation\nResNet50 model is used for convolutional part of the network","d9f0cfb7":"# Model accuracy analysis","24e44c3a":"# Data preparation\nData is prepared in such maner:\n1. The label is removed from training data, processed to categorical values and assigned to y.\n2. Training data is reshaped into a numpy array with dimensions of 42000 (number of images), 28, 28 (height & width)\n3. All of training data is divided by 255 so values fit between 0 and 1\n4. Training data is multiplied to three dimensions so ResNet50 could work with it\n5. Training data is split into train and val sets for training and validations respectively\n6. A data augmentation generator is created for train data set","6bc808cd":"# Predictions\n1. Firstly train the model with all of the data  \n2. Then generate predictions for test data set  \n3. Write predictions to an output file  "}}