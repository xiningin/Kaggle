{"cell_type":{"1cffe65c":"code","fc57aede":"code","0adda404":"code","e508d793":"code","672872f6":"code","43fe638f":"code","986620e5":"code","35cdb528":"code","ec5ea501":"code","8e220495":"code","020a202b":"code","71508978":"code","24c7bfd3":"code","a73f6cba":"code","75cfd420":"code","9b058fb4":"code","fb523bbf":"code","9c0a40d2":"code","cb6c3861":"code","126653e3":"code","1d7173d7":"code","9db91495":"code","6ba75d4b":"code","d8c7d2c1":"code","50caf231":"code","7c9c3517":"code","03df538d":"code","1d745108":"code","5e94d85c":"code","6ea203b2":"code","5f2c8c43":"code","0f1e55b6":"code","b82e7e5d":"code","ce567372":"code","a356145a":"code","557d52cb":"code","b68f0476":"code","57d07452":"code","72563d2d":"code","a7467d66":"code","cf41a7aa":"code","c45ade30":"code","961eefd7":"code","ba476ed3":"code","7539109f":"code","75959b52":"code","2a1a85d4":"code","1d45c539":"code","af8c3730":"code","4315821b":"code","be5fd534":"code","52460182":"code","adef2d16":"code","458df587":"code","c5f79176":"code","01708bc0":"code","a19e3652":"code","2d73dcd0":"code","9536d23a":"code","376690f2":"code","c56132dc":"code","749a2bc8":"code","54d409d8":"code","d9144a19":"code","39bb6a94":"code","a6ae0b6f":"code","a2bd0299":"code","a1b7cca9":"code","9993ed54":"code","2c899129":"code","ceed86b9":"code","c37c8a21":"code","44a469c1":"code","ae5ea4d1":"code","23ac2fc0":"code","72401960":"code","b3a88449":"code","c60d89ee":"code","329ce409":"code","5b8af10b":"code","f33928d9":"code","8c7bd98c":"code","3749ff09":"code","e0e19076":"code","5fc257d3":"code","c5911723":"code","cdec2316":"code","e956335f":"code","aacb0352":"code","5b7c56e4":"code","b94b568e":"code","33b24732":"code","904d66a0":"code","e61f7ac0":"code","85d8fffe":"code","c9781edc":"code","1203a044":"code","2ebe0acf":"code","10f65bf4":"code","c625aa39":"markdown","87bb71a7":"markdown","195d016a":"markdown","57f5d21c":"markdown","815bf300":"markdown","b85fcd7b":"markdown","af348682":"markdown","da80a76c":"markdown","9f72c5ef":"markdown","b07e739f":"markdown","5d6009a2":"markdown","f080559f":"markdown","872b614f":"markdown","02abc536":"markdown","b5d2f4d8":"markdown","adb92b3e":"markdown","fa76397a":"markdown","d20ee453":"markdown","3506cae2":"markdown","bbe0789d":"markdown","b43d2d03":"markdown","0a0b2892":"markdown"},"source":{"1cffe65c":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn import neighbors\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import preprocessing","fc57aede":"#Veri setini okutup ilk 5 sat\u0131r\u0131n\u0131 g\u00f6zlemliyoruz.\ndata = pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")\ndata.head()","0adda404":"import warnings\nwarnings.simplefilter(action = \"ignore\")","e508d793":"#Veri setinini boyutunu inceliyoruz. 322 adet g\u00f6zlem ve 20 de\u011fi\u015fken bulunmaktad\u0131r.\ndata.shape","672872f6":"#Veri setine istatiktiksel olarak g\u00f6z at\u0131yoruz.\ndata.describe().T","43fe638f":"#Kategorik de\u011fi\u015fken olup olmad\u0131\u011f\u0131na bak\u0131yoruz. Veri setinde 3 adet kategorik de\u011fi\u015fken bulunuyor.\ndata.nunique()","986620e5":"categorical_columns = [col for col in data.columns if data[col].dtype == 'object']\ncategorical_columns","35cdb528":"numeric_columns = [c for c in data.columns if c not in categorical_columns]\nnumeric_columns","ec5ea501":"#Kategorik de\u011fi\u015fkenlerin s\u0131n\u0131flar\u0131ndan ka\u00e7ar adet oldu\u011funu inceliyoruz.\nprint(data[\"League\"].value_counts())\nprint(data[\"NewLeague\"].value_counts())\nprint(data[\"Division\"].value_counts())","8e220495":"data.NewLeague.value_counts().plot.barh();","020a202b":"data.Division.value_counts().plot.barh();","71508978":"data.NewLeague.value_counts().plot.barh();","24c7bfd3":"# Ba\u011f\u0131ml\u0131 de\u011fi\u015fken olan salary de\u011fi\u015fkeninin maksimum ve minimum de\u011ferlerini buluyoruz.\nprint(\"Salary maksimum de\u011fer:\", data[\"Salary\"].max())\nprint(\"Salary minimum de\u011fer:\", data[\"Salary\"].min())","a73f6cba":"# Salary de\u011fi\u015fkeninin histogram ve yo\u011funluk grafi\u011fini \u00e7izdiriyoruz.\nsns.distplot(data.Salary);","75cfd420":"# Veri setinin korelasyonunu inceleyerek de\u011fi\u015fkenler aras\u0131nda ne t\u00fcr bir ili\u015fki oldu\u011funu anlayabiliriz. \n# Korelasyon de\u011feri > 0 ise pozitif korelasyon bulunmaktad\u0131r. Bir de\u011fi\u015fken de\u011feri artarken di\u011fer de\u011fi\u015fkenin de de\u011feri artmaktad\u0131r.\n# Korelasyon = 0 ise de\u011fi\u015fkenler aras\u0131nda ili\u015fki yoktur anlam\u0131na gelir.\n# Korelasyon < 0 ise negatif korelasyon bulunmaktad\u0131r. Bir de\u011fi\u015fken artarken di\u011fer de\u011fi\u015fken azalmaktad\u0131r. \n# Korelasyonlar incelendi\u011finde salary ba\u011f\u0131ml\u0131 de\u011fi\u015fkene pozitif korelasyon olarak etkimekte olan 2 de\u011fi\u015fken bulunmaktad\u0131r. \n# Bu de\u011fi\u015fkenler CRBI ile CRuns de\u011fi\u015fkenleridir. Bunlar artt\u0131k\u00e7a Salary (Maa\u015f) de\u011fi\u015fkeni de artmaktad\u0131r.\ndata.corr()","9b058fb4":"# Veri setinin korelasyon matrisi grafi\u011fini olu\u015fturuyoruz.\nf, ax = plt.subplots(figsize= [20,15])\nsns.heatmap(data.corr(), annot=True, fmt=\".2f\", ax=ax, cmap = \"magma\" )\nax.set_title(\"Correlation Matrix\", fontsize=20)\nplt.show()","fb523bbf":"#League de\u011fi\u015fkenine g\u00f6re groupby yap\u0131l\u0131p hangi ligde ortalama ne kadar maa\u015f al\u0131nd\u0131\u011f\u0131n\u0131 buluyoruz.\ndata.groupby(\"League\").agg({\"Salary\": \"mean\"})","9c0a40d2":"#Oyuncunun oynad\u0131\u011f\u0131 pozisyona g\u00f6re ortalama ne kadar maa\u015f ald\u0131\u011f\u0131n\u0131 buluyoruz.\ndata.groupby(\"Division\").agg({\"Salary\": \"mean\"})","cb6c3861":"#Veri setinin korelasyonu incelendi\u011finde en y\u00fcksek pozitif y\u00f6nl\u00fc korelasyona CRBI de\u011fi\u015fkeni sahipti. Bu de\u011fi\u015fken artt\u0131k\u00e7a salary de\u011fi\u015fkenin de artmas\u0131n\u0131 bekleriz.\n#CRBI de\u011fi\u015fkeni kariyeri boyunca yapm\u0131\u015f oldu\u011fu vuru\u015f say\u0131s\u0131d\u0131r. CRBI de\u011fi\u015fkenine g\u00f6re gruplay\u0131p salary de\u011fi\u015fkeninin ortalamas\u0131n\u0131 inceliyoruz.\ndata.groupby(\"CRBI\").agg({\"Salary\": \"mean\"})","126653e3":"#Veri setinde CRBI de\u011fi\u015fkeninden sonra en y\u00fcksek korelasyona CRuns de\u011fi\u015fkeni sahip. Ayn\u0131 i\u015flemi onun i\u00e7in de yap\u0131yoruz.\ndata.groupby(\"CRuns\").agg({\"Salary\": \"mean\"})","1d7173d7":"#Yeni lig ve oyuncunun ligde oynad\u0131\u011f\u0131 s\u00fcresine g\u00f6re gruplanarak oyuncunun ald\u0131klar\u0131 maa\u015flar\u0131n ortalamas\u0131n\u0131 buluyoruz.\ndata.groupby([\"NewLeague\",\"Years\"]).agg({\"Salary\": \"mean\"})","9db91495":"#Kariyeri boyunca isabet say\u0131s\u0131 en y\u00fcksek olan g\u00f6zlem birimlerine g\u00f6re veri setini azalan \u015fekilde s\u0131ralayal\u0131m. \ndata.sort_values(\"CHits\", ascending = False)","6ba75d4b":"#Liglere g\u00f6re gruplayarak kariyeri boyunca yap\u0131lan isabet say\u0131lar\u0131n\u0131n maksimum de\u011ferine eri\u015felim.\ndata.groupby(\"League\").agg({\"CHits\": \"max\"})","d8c7d2c1":"#Oyuncular\u0131n oynad\u0131klar\u0131 pozisyonlara g\u00f6re gruplama yaparak kariyeri boyunca isabet say\u0131s\u0131n\u0131n maksimum de\u011ferine eri\u015felim.\ndata.groupby(\"Division\").agg({\"CHits\": \"max\"})","50caf231":"#Lig de\u011fi\u015fkenine g\u00f6re gruplayarak beyzbol sopas\u0131 ile yap\u0131lan vuru\u015f say\u0131s\u0131n\u0131n maksimum de\u011ferlerine eri\u015felim.\ndata.groupby(\"League\").agg({\"AtBat\": \"max\"})","7c9c3517":"#Lig de\u011fi\u015fkenine g\u00f6re gruplayarak liglerde yap\u0131lan hatalar\u0131n ortalama de\u011ferlerine eri\u015felim.\ndata.groupby(\"League\").agg({\"Errors\": \"mean\"})","03df538d":"#Lig de\u011fi\u015fkenine g\u00f6re gruplayarak liglerde yap\u0131lan hatalar\u0131n maksimum de\u011ferlerine eri\u015felim.\ndata.groupby(\"League\").agg({\"Errors\": \"max\"})","1d745108":"#Oyuncunun ligde oynad\u0131\u011f\u0131 s\u00fcresine g\u00f6re gruplay\u0131p oyuncunun kariyeri boyunca beyzbol sopas\u0131 ile yap\u0131lan vuru\u015f say\u0131s\u0131n\u0131n maksimum de\u011ferlerine eri\u015felim.\ndata.groupby(\"Years\").agg({\"CAtBat\": \"max\"})","5e94d85c":"#Lig de\u011fi\u015fkenine g\u00f6re gruplay\u0131p kariyeri boyunca acaba liglerde beyzbol sopas\u0131 ile ortalama ka\u00e7 at\u0131\u015f ger\u00e7ekle\u015fmi\u015ftir buna eri\u015felim.\ndata.groupby(\"League\").agg({\"CAtBat\": \"mean\"})","6ea203b2":"data[\"OrtCAtBat\"] = data[\"CAtBat\"] \/ data[\"Years\"] #Oyuncunun kariyeri boyunca ortalama ka\u00e7 kez topa vurdu\u011fu\ndata[\"OrtCHits\"] = data[\"CHits\"] \/ data[\"Years\"] #Oyuncunun kariyeri boyunca ortalama ka\u00e7 kez isabetli vuru\u015f yapt\u0131\u011f\u0131\ndata[\"OrtCHmRun\"] = data[\"CHmRun\"] \/ data[\"Years\"] #Oyuncunun kariyeri boyunca ortalama ka\u00e7 kez en de\u011ferli vuru\u015fu yapt\u0131\u011f\u0131\ndata[\"OrtCruns\"] = data[\"CRuns\"] \/ data[\"Years\"] #Oyuncunun kariyeri boyunca tak\u0131m\u0131na ortalama ka\u00e7 tane say\u0131 kazand\u0131rd\u0131\u011f\u0131\ndata[\"OrtCRBI\"] = data[\"CRBI\"] \/ data[\"Years\"] #Oyuncunun kariyeri boyunca ortalama ka\u00e7 tane oyuncuya ko\u015fu yapt\u0131rd\u0131\u011f\u0131\ndata[\"OrtCWalks\"] = data[\"CWalks\"] \/ data[\"Years\"] #Oyuncun kariyeri boyunca kar\u015f\u0131 oyuncuya ortalama ka\u00e7 kez hata yapt\u0131rd\u0131\u011f\u0131\ndata.head()","5f2c8c43":"#Amac\u0131m\u0131z maa\u015f tahmini yapmak oldu\u011fu i\u00e7in maa\u015f de\u011fi\u015fkeniyle y\u00fcksek korelasyon i\u00e7erisinde olan de\u011fi\u015fkenlere bakarak tahminleme yapaca\u011f\u0131z.\ndata = data.drop(['AtBat','Hits','HmRun','Runs','RBI','Walks','Assists','Errors','PutOuts'], axis=1)","0f1e55b6":"data.head()","b82e7e5d":"#Kategorik de\u011fi\u015fkenlerin say\u0131sal de\u011ferlere d\u00f6n\u00fc\u015ft\u00fcr\u00fclmesi i\u00e7in Label Encoding ve One Hot Encoding y\u00f6ntemleri kullan\u0131lmaktad\u0131r.\n#One Hot Encoding yaparak kategorik de\u011fi\u015fkenleri say\u0131sal de\u011ferlere d\u00f6n\u00fc\u015ft\u00fcr\u00fcp dummy de\u011fi\u015fken tuza\u011f\u0131ndan korunal\u0131m.\ndata = pd.get_dummies(data, columns =  [\"Division\"], drop_first = True)\ndata = pd.get_dummies(data, columns =  [\"League\"], drop_first = True)\ndata = pd.get_dummies(data, columns =  [\"NewLeague\"], drop_first = True)\ndata.head()","ce567372":"#Veri setinde ka\u00e7 adet eksik de\u011fer var?\ndata.isnull().sum()","a356145a":"#Veri setinde ka\u00e7 adet dolu de\u011fer var?\ndata.notnull().sum()","557d52cb":"import missingno as msno\nmsno.bar(data);","b68f0476":"msno.matrix(data);","57d07452":"#Eksik g\u00f6zlem olan de\u011ferlerin ka\u00e7 y\u0131ll\u0131k kariyere sahip olduklar\u0131n\u0131 ve hangi ligde oynad\u0131klar\u0131n\u0131 inceleyelim.\ndata_eksik = data[data[\"Salary\"].isnull()].head()\ndata_eksik","72563d2d":"#Eksik de\u011ferleri veri setinden \u00e7\u0131kar\u0131yoruz.\ndata=data.dropna()\ndata.shape","a7467d66":"sns.boxplot(x = data[\"Years\"]);","cf41a7aa":"Q1 = data[\"Years\"].quantile(0.25)\nQ3 = data[\"Years\"].quantile(0.75)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"Years\"] > upper) | (data[\"Years\"] < lower)\ndata[\"Years\"] = data[\"Years\"][~(outliers)]\nsns.boxplot(x = data[\"Years\"]);","c45ade30":"sns.boxplot(x = data[\"CAtBat\"]);","961eefd7":"Q1 = data[\"CAtBat\"].quantile(0.30)\nQ3 = data[\"CAtBat\"].quantile(0.70)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"CAtBat\"] > upper) | (data[\"CAtBat\"] < lower)\ndata[\"CAtBat\"] = data[\"CAtBat\"][~(outliers)]\nsns.boxplot(x = data[\"CAtBat\"]);","ba476ed3":"sns.boxplot(x = data[\"CHits\"]);","7539109f":"Q1 = data[\"CHits\"].quantile(0.30)\nQ3 = data[\"CHits\"].quantile(0.70)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"CHits\"] > upper) | (data[\"CHits\"] < lower)\ndata[\"CHits\"] = data[\"CHits\"][~(outliers)]\nsns.boxplot(x = data[\"CHits\"]);","75959b52":"sns.boxplot(x = data[\"CHmRun\"]);","2a1a85d4":"Q1 = data[\"CHmRun\"].quantile(0.35)\nQ3 = data[\"CHmRun\"].quantile(0.65)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"CHmRun\"] > upper) | (data[\"CHmRun\"] < lower)\ndata[\"CHmRun\"] = data[\"CHmRun\"][~(outliers)]\nsns.boxplot(x = data[\"CHmRun\"]);","1d45c539":"sns.boxplot(x = data[\"CRuns\"]);","af8c3730":"Q1 = data[\"CRuns\"].quantile(0.35)\nQ3 = data[\"CRuns\"].quantile(0.65)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"CRuns\"] > upper) | (data[\"CRuns\"] < lower)\ndata[\"CRuns\"] = data[\"CRuns\"][~(outliers)]\nsns.boxplot(x = data[\"CRuns\"]);","4315821b":"sns.boxplot(x = data[\"CRBI\"]);","be5fd534":"Q1 = data[\"CRBI\"].quantile(0.30)\nQ3 = data[\"CRBI\"].quantile(0.70)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"CRBI\"] > upper) | (data[\"CRBI\"] < lower)\ndata[\"CRBI\"] = data[\"CRBI\"][~(outliers)]\nsns.boxplot(x = data[\"CRBI\"]);","52460182":"sns.boxplot(x = data[\"CWalks\"]);","adef2d16":"Q1 = data[\"CWalks\"].quantile(0.35)\nQ3 = data[\"CWalks\"].quantile(0.65)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"CWalks\"] > upper) | (data[\"CWalks\"] < lower)\ndata[\"CWalks\"] = data[\"CWalks\"][~(outliers)]\nsns.boxplot(x = data[\"CWalks\"]);","458df587":"sns.boxplot(x = data[\"Salary\"]);","c5f79176":"Q1 = data[\"Salary\"].quantile(0.25)\nQ3 = data[\"Salary\"].quantile(0.75)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"Salary\"] > upper) | (data[\"Salary\"] < lower)\ndata[\"Salary\"] = data[\"Salary\"][~(outliers)]\nsns.boxplot(x = data[\"Salary\"]);","01708bc0":"data=data.dropna()\ndata.shape","a19e3652":"normalizer = preprocessing.Normalizer()","2d73dcd0":"y = data[\"Salary\"]\nX = data.drop('Salary', axis=1)\ncols = X.columns","9536d23a":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\nX = pd.DataFrame(X, columns = cols)\nX.head()","376690f2":"models = []\nmodels.append(('KNN', KNeighborsRegressor()))\nmodels.append(('SVR', SVR()))\nmodels.append(('CART', DecisionTreeRegressor()))\nmodels.append(('RF', RandomForestRegressor()))\nmodels.append(('GBM', GradientBoostingRegressor()))\nmodels.append((\"XGBoost\", XGBRegressor()))\nmodels.append((\"LightGBM\", LGBMRegressor()))\nmodels.append((\"CatBoost\", CatBoostRegressor(verbose = False)))","c56132dc":"y = data[\"Salary\"]\nX = data.drop(\"Salary\", axis=1)\ncols = X.columns\ncols","749a2bc8":"#Feature Selection\n#Wrapper Method\n#Backward Elimination\n#https:\/\/towardsdatascience.com\/feature-selection-with-pandas-e3690ad8504b\nimport statsmodels.api as sm\ncols = list(X.columns)\npmax = 1\nwhile (len(cols)>0):\n    p= []\n    X_1 = X[cols]\n    X_1 = sm.add_constant(X_1)\n    model = sm.OLS(y,X_1).fit()\n    p = pd.Series(model.pvalues.values[1:],index = cols)      \n    pmax = max(p)\n    feature_with_p_max = p.idxmax()\n    if(pmax>0.05):\n        cols.remove(feature_with_p_max)\n    else:\n        break\nselected_features_BE = cols\nprint(selected_features_BE)","54d409d8":"y = data[\"Salary\"]\nX = data[selected_features_BE]","d9144a19":"scaler = StandardScaler()\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.20, \n                                                    random_state=46)","39bb6a94":"for name, model in models:\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n        rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n        msg = \"%s: (%f)\" % (name, rmse)\n        print(msg)","a6ae0b6f":"knn_params = {\"n_neighbors\": np.arange(1,30,1)}\n\nknn_model = KNeighborsRegressor()\n\nknn_cv_model = GridSearchCV(knn_model, knn_params, cv = 10).fit(X_train, y_train)","a2bd0299":"knn_cv_model.best_params_","a1b7cca9":"knn_tuned = KNeighborsRegressor(**knn_cv_model.best_params_).fit(X_train, y_train)","9993ed54":"y_pred = knn_tuned.predict(X_test)\nknn_tuned_score = np.sqrt(mean_squared_error(y_test, y_pred))\nknn_tuned_score","2c899129":"#nonlinear\nsvr_model = SVR() \n\nsvr_params = {\"C\": [0.01, 0.1,0.3,0.5,0.8,1,5, 10, 50, 100,500,1000,10000]}\n\nsvr_cv_model = GridSearchCV(svr_model, svr_params, cv = 10, n_jobs = -1, verbose =  2).fit(X_train, y_train)","ceed86b9":"svr_cv_model.best_params_","c37c8a21":"svr_tuned = SVR(**svr_cv_model.best_params_).fit(X_train, y_train)","44a469c1":"y_pred = svr_tuned.predict(X_test)\nsvr_tuned_score = np.sqrt(mean_squared_error(y_test, y_pred))\nsvr_tuned_score","ae5ea4d1":"cart_params = {\"max_depth\": [2,3,4,5,6,8,10,20,30,50, 100, 500, 1000,5000,10000],\n              \"min_samples_split\": [2,5,10,20,30,50,100,500,1000,5000,10000]}","23ac2fc0":"cart_model = DecisionTreeRegressor()\ncart_cv_model = GridSearchCV(cart_model, cart_params, cv = 10).fit(X_train, y_train)\ncart_cv_model.best_params_","72401960":"cart_tuned = DecisionTreeRegressor(**cart_cv_model.best_params_).fit(X_train, y_train)\ny_pred = cart_tuned.predict(X_test)\ncart_tuned_score = np.sqrt(mean_squared_error(y_test, y_pred))\ncart_tuned_score","b3a88449":"rf_params = {\"max_depth\": [5,10,None],\n            \"max_features\": [2,5,10],\n            \"n_estimators\": [100, 500, 1000],\n            \"min_samples_split\": [2,10,30]}","c60d89ee":"rf_model = RandomForestRegressor(random_state = 42).fit(X_train, y_train)\nrf_cv_model = GridSearchCV(rf_model, rf_params, cv = 10, n_jobs = -1, verbose = 2).fit(X_train, y_train)","329ce409":"rf_cv_model.best_params_","5b8af10b":"rf_tuned = RandomForestRegressor(max_depth=30,\n            max_features=3,\n            n_estimators=1000,\n            min_samples_split=2).fit(X_train, y_train)","f33928d9":"y_pred = rf_tuned.predict(X_test)\nrf_tuned_score = np.sqrt(mean_squared_error(y_test, y_pred))\nrf_tuned_score","8c7bd98c":"Importance = pd.DataFrame({'Importance':rf_tuned.feature_importances_*100}, \n                          index = cols)\n\n\nImportance.sort_values(by = 'Importance', \n                       axis = 0, \n                       ascending = True).plot(kind = 'barh', \n                                              color = 'b', )\n\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","3749ff09":"xgb_params = {\"learning_rate\": [0.1,0.01,1],\n             \"max_depth\": [2,5,8],\n             \"n_estimators\": [100,500,1000],\n             \"colsample_bytree\": [0.3,0.6,1]}","e0e19076":"xgb = XGBRegressor()\nxgb_cv_model  = GridSearchCV(xgb,xgb_params, cv = 10, n_jobs = -1, verbose = 2).fit(X_train, y_train)","5fc257d3":"xgb_cv_model.best_params_","c5911723":"xgb_tuned = XGBRegressor(**xgb_cv_model.best_params_).fit(X_train, y_train)\ny_pred = xgb_tuned.predict(X_test)\nxgb_tuned_score = np.sqrt(mean_squared_error(y_test, y_pred))\nxgb_tuned_score","cdec2316":"Importance = pd.DataFrame({'Importance':xgb_tuned.feature_importances_*100}, \n                          index = cols)\n\n\nImportance.sort_values(by = 'Importance', \n                       axis = 0, \n                       ascending = True).plot(kind = 'barh', \n                                              color = 'g', )\n\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","e956335f":"lgb_model = LGBMRegressor()\nlgbm_params = {\"learning_rate\": [0.01, 0.1, 1],\n              \"n_estimators\": [200,1000,10000],\n              \"max_depth\": [2,5,10],\n              \"colsample_bytree\": [1,0.5,0.3]}","aacb0352":"lgbm_cv_model = GridSearchCV(lgb_model, \n                             lgbm_params, \n                             cv = 10, \n                             n_jobs = -1, \n                             verbose =2).fit(X_train, y_train)","5b7c56e4":"lgbm_cv_model.best_params_","b94b568e":"lgbm_tuned = LGBMRegressor(learning_rate=0.01,\n              n_estimators=300,\n              max_depth=5,\n              colsample_bytree=1).fit(X_train, y_train)","33b24732":"y_pred = lgbm_tuned.predict(X_test)\nlgbm_tuned_score = np.sqrt(mean_squared_error(y_test, y_pred))\nlgbm_tuned_score","904d66a0":"Importance = pd.DataFrame({'Importance':lgbm_tuned.feature_importances_*100}, \n                          index = cols)\n\n\nImportance.sort_values(by = 'Importance', \n                       axis = 0, \n                       ascending = True).plot(kind = 'barh', \n                                              color = 'y', )\n\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","e61f7ac0":"catb_model = CatBoostRegressor(verbose = False)\ncatb_params = {\"iterations\": [500,1000,10000],\n              \"learning_rate\": [0.01,0.1,1],\n              \"depth\": [2,6,10]}","85d8fffe":"catb_cv_model = GridSearchCV(catb_model, \n                           catb_params, \n                           cv = 5, \n                           n_jobs = -1, \n                           verbose = 2).fit(X_train, y_train)","c9781edc":"catb_cv_model.best_params_","1203a044":"catb_tuned = CatBoostRegressor(iterations=670,\n              learning_rate=0.01,\n              depth=6,verbose=False).fit(X_train, y_train)","2ebe0acf":"y_pred = catb_tuned.predict(X_test)\ncatb_tuned_score = np.sqrt(mean_squared_error(y_test, y_pred))\ncatb_tuned_score","10f65bf4":"index = [\"KNN_tuned\",\"SVR_tuned\",\"CART_tuned\",\"RF_tuned\",\"XGB_tuned\",\"LGBM_tuned\",\"CATB_tuned\"]\ntuned_score_data = pd.DataFrame({\"Tuned Score\":[knn_tuned_score,svr_tuned_score,cart_tuned_score,rf_tuned_score,\n                                                xgb_tuned_score,lgbm_tuned_score,catb_tuned_score]})\ntuned_score_data.index = index\ntuned_score_data","c625aa39":"**Ayk\u0131r\u0131 De\u011fer Sorgulamas\u0131**","87bb71a7":"**One Hot Encoding D\u00f6n\u00fc\u015f\u00fcm\u00fc**","195d016a":"# **Ke\u015fif\u00e7i Veri Analizi**","57f5d21c":"*Veri setinde maa\u015f de\u011fi\u015fkeniyle y\u00fcksek korelasyon ili\u015fkisi olan oyuncunun kariyerine ba\u011fl\u0131 de\u011fi\u015fkenler ve oyuncunun ligde oynad\u0131\u011f\u0131 s\u00fcresi yer almaktad\u0131r. \nBu durumda kariyere ba\u011fl\u0131 de\u011fi\u015fkenler\/kariyer s\u00fcresi yap\u0131l\u0131rsa oyuncu i\u00e7in ortalama de\u011ferler elde edilerek mant\u0131kl\u0131 yeni de\u011fi\u015fkenler olu\u015fturulabilir.*","815bf300":"**Eksik De\u011fer Sorgulamas\u0131**","b85fcd7b":"**2.4) Rastgele Orman Regresyon(Random Forest)**","af348682":"**2.2) SVR(Destek Vekt\u00f6r Regresyon)**","da80a76c":"# **_Lineer Olmayan Regresyon Modelleri ile Maa\u015f Tahmini_**","9f72c5ef":"**2.6) LightGBM Regresyon**","b07e739f":"**Verilerin Standartla\u015ft\u0131r\u0131lmas\u0131**","5d6009a2":"### **2) Model Tuning**","f080559f":"**2.3) CART(Karar A\u011fac\u0131 Regresyon)**","872b614f":"**2.7) CatBoost Regresyon**","02abc536":"**2.1) KNN(K En Yak\u0131n Kom\u015fu) Regresyon**","b5d2f4d8":"**2.5) XGBoost Regresyon**","adb92b3e":"# **Korelasyon \u0130ncelemesi**","fa76397a":"### **1) \u0130lk Sonu\u00e7lar**","d20ee453":"# **De\u011fi\u015fkenlerin Ayr\u0131nt\u0131l\u0131 \u0130ncelenmesi**","3506cae2":"# **Veri \u00d6n \u0130\u015fleme**","bbe0789d":"# **Do\u011frusal Olmayan Regresyon Modelleri ile Modelleme**","b43d2d03":"Lineer olmayan regresyon modelleri kullan\u0131larak maa\u015f tahminleme \u00fczerine bir proje ger\u00e7ekle\u015ftirilecektir. \nAma\u00e7 beyzbol oyuncular\u0131n\u0131n maa\u015flar\u0131n\u0131 tahmin edecek bir makine \u00f6\u011frenmesi modeli geli\u015ftirmektir.\n\n**Uygulanacak Regresyon Modelleri**\n\n- KNN(K En Yak\u0131n Kom\u015fu) Regresyon\n- SVR(Destek Vekt\u00f6r Regresyon)\n- CART(Karar A\u011fac\u0131 Regresyon)\n- Rastgele Orman Regresyon(Random Forest)\n- XGBoost Regresyon\n- LightGBM Regresyon\n- CatBoost Regresyon","0a0b2892":"**Ba\u011f\u0131ml\u0131 De\u011fi\u015fken:** Salary (1986-1987 sezonunda kazan\u0131lan maa\u015f(birimi: bin))\n\n**Ba\u011f\u0131ms\u0131z De\u011fi\u015fkenler:** \n\n- AtBat: 1986-1987 sezonunda bir beyzbol sopas\u0131 ile topa yap\u0131lan vuru\u015f say\u0131s\u0131\n- Hits: 1986-1987 sezonundaki isabet say\u0131s\u0131\n- HmRun: 1986-1987 sezonundaki en de\u011ferli vuru\u015f say\u0131s\u0131\n- Runs: 1986-1987 sezonunda tak\u0131m\u0131na ka\u00e7 say\u0131 kazand\u0131rd\u0131\n- RBI: Bir vurucunun vuru\u015f yapt\u0131g\u0131nda ka\u00e7 tane oyuncuya ko\u015fu yapt\u0131rd\u0131\u011f\u0131.\n- Walks: Kar\u015f\u0131 oyuncuya ka\u00e7 defa hata yapt\u0131rd\u0131\u011f\u0131\n- Years: Oyuncunun major liginde ka\u00e7 sene oynad\u0131\u011f\u0131\n- CAtBat: Oyuncunun kariyeri boyunca ka\u00e7 kez topa vurdu\u011fu\n- CHits*: Oyuncunun kariyeri boyunca ka\u00e7 kez isabetli vuru\u015f yapt\u0131\u011f\u0131\n- CHmRun*: Oyucunun kariyeri boyunca ka\u00e7 kez en de\u011ferli vuru\u015fu yapt\u0131\u011f\u0131\n- CRuns: Oyuncunun kariyeri boyunca tak\u0131m\u0131na ka\u00e7 tane say\u0131 kazand\u0131rd\u0131\u011f\u0131\n- CRBI: Oyuncunun kariyeri boyunca ka\u00e7 tane oyuncuya ko\u015fu yapt\u0131rd\u0131\u011f\u0131\n- CWalks: Oyuncun kariyeri boyunca kar\u015f\u0131 oyuncuya ka\u00e7 kez hata yapt\u0131rd\u0131\u011f\u0131\n- League: Oyuncunun sezon sonuna kadar oynad\u0131\u011f\u0131 ligi g\u00f6steren A ve N seviyelerine sahip bir fakt\u00f6r\n- Division: 1986 sonunda oyuncunun oynad\u0131\u011f\u0131 pozisyonu g\u00f6steren E ve W seviyelerine sahip bir fakt\u00f6r\n- PutOuts: Oyun icinde tak\u0131m arkada\u015f\u0131nla yard\u0131mla\u015fma\n- Assits: 1986-1987 sezonunda oyuncunun yapt\u0131\u011f\u0131 asist say\u0131s\u0131\n- Errors: 1986-1987 sezonundaki oyuncunun hata say\u0131s\u0131\n- NewLeague: 1987 sezonunun ba\u015f\u0131nda oyuncunun ligini g\u00f6steren A ve N seviyelerine sahip bir fakt\u00f6r\n\n**G\u00f6zlem Say\u0131s\u0131:** 322\n\n**De\u011fi\u015fken Say\u0131s\u0131:** 20"}}