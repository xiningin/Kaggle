{"cell_type":{"5f27bd5e":"code","d45aa46f":"code","3c86c3c5":"code","819a5651":"code","9f6a6220":"code","fb7747a1":"code","d4dae341":"code","ad10f05c":"code","a8ccac92":"code","5d6fa80c":"code","aff66bbd":"code","7c4a5753":"code","7baa57ca":"code","c20599be":"code","e75836a5":"code","e7fc6a7f":"code","922fd601":"code","acdf8fd1":"code","0f3d48fb":"code","6bdee1b5":"code","5a567c00":"code","04a2a7ad":"code","f97540b1":"code","1913eed3":"code","3544cff2":"code","5adebf19":"code","c1fc28e6":"code","bc979bf7":"code","8905ff86":"code","d460beaf":"markdown","db9c6e18":"markdown","0f0f2052":"markdown","b09d84aa":"markdown","12386c76":"markdown","7fd32f3c":"markdown","0ffe4727":"markdown","93b8ef9d":"markdown","cb25826c":"markdown","07c56713":"markdown","1315e47c":"markdown","6c206954":"markdown","00a584cd":"markdown","1c34b630":"markdown"},"source":{"5f27bd5e":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler,RobustScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, cross_val_predict\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_curve\n%matplotlib inline","d45aa46f":"df=pd.read_csv(r\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","3c86c3c5":"df.info(verbose=True)","819a5651":"df.describe()","9f6a6220":"#Boxplot for insulin and diabetes\nsns.set_style(\"whitegrid\")\nbox_plot = sns.boxplot(x=\"Outcome\",y=\"Insulin\",data=df)\nmedians = df.groupby([\"Outcome\"])[\"Insulin\"].median()\nvertical_offset = df[\"Insulin\"].median() * 0.05 # offset from median for display\n\nfor xtick in box_plot.get_xticks():\n    box_plot.text(xtick,medians[xtick] + vertical_offset,medians[xtick], \n            horizontalalignment='center',size='x-small',color='w',weight='semibold')\n\nprint(\"Since 0 values appear in both outcomes ,its not an indicator of the insulin level and should be considered null value\")","fb7747a1":"#Counting Zero Values for each column:Glucose\tBloodPressure\tSkinThickness\tInsulin\tBMI\nzero_attributes=[\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\"]\ndef zero_values(df,zero_attributes):\n    for i in zero_attributes:\n        df_count=df.loc[df[i] == 0]\n        x=df_count[i].count()\n        print(f'The Number of zero values in column {i} is {x}')\nzero_values(df,zero_attributes)","d4dae341":"fig = plt.figure(figsize = (20,12))\nax = fig.gca()\ndf.hist(ax = ax)\nplt.show()\nprint(\"we can see that most of the columns are skewed\")","ad10f05c":"di={0.0:0,1.0:1}\nsns.pairplot(df.replace({\"Outcome\":di}),hue=\"Outcome\")\nplt.show()","a8ccac92":"c=[0,1,2,3]\nr=[0,1]\ncols_index=0\ncols=df.columns[:-1]\nfig,axs = plt.subplots(2, 4,figsize=(20,12))\nfor i in r:\n    for j in c:              \n        box_plot = sns.boxplot(x=\"Outcome\",y=cols[cols_index],data=df,ax=axs[i,j])\n        medians = df.groupby([\"Outcome\"])[cols[cols_index]].median()\n        vertical_offset = df[cols[cols_index]].median() * 0.05 \n        cols_index+=1","5d6fa80c":"#first copying the data\ndf_copy=df.copy()","aff66bbd":"X=df_copy.iloc[:,:-1]\ny=df_copy.iloc[:,-1]","7c4a5753":"X_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.2,random_state=42)","7baa57ca":"missing_values=['Glucose', 'BloodPressure','BMI']\ndrop_columns=['Insulin','SkinThickness']","c20599be":"def preprocessing(df,missing_values,drop_columns):\n    df.drop(columns=drop_columns,inplace=True)\n    for col in missing_values:\n        val = df[col].mean()\n        df[col] = df[col].replace(0, val)\n    return df","e75836a5":"\nX_train_processed=preprocessing(X_train,missing_values,drop_columns)\nX_test_processed=preprocessing(X_test,missing_values,drop_columns)","e7fc6a7f":"#scaling data using standard scaler\nscaler=StandardScaler()\nscaler.fit(X_train)\nX_train_Scaled=scaler.transform(X_train_processed)\nX_test_Scaled=scaler.transform(X_test_processed)","922fd601":"knn=KNeighborsClassifier()\nparam_grid = dict(n_neighbors=np.arange(1,50,1))\ngrid = GridSearchCV(knn, param_grid, cv=10, scoring='accuracy')\ngrid.fit(X_train_Scaled,y_train)","acdf8fd1":"print(grid.best_score_)\nprint(grid.best_params_)\nprint(grid.best_estimator_)","0f3d48fb":"knn=grid.best_estimator_\ny_pred_train_knn=knn.predict(X_train_Scaled)\ny_pred_test_knn=knn.predict(X_test_Scaled)","6bdee1b5":"print(f\"the train accuracy is for KNN {accuracy_score(y_train,y_pred_train_knn)}\")\nprint(f\"the test accuracy is for KNN {accuracy_score(y_test,y_pred_test_knn)}\")","5a567c00":"logreg=LogisticRegression()\nlogreg.fit(X_train_Scaled,y_train)","04a2a7ad":"LR=logreg\ny_pred_train_lr=LR.predict(X_train_Scaled)\ny_pred_test_lr=LR.predict(X_test_Scaled)","f97540b1":"print(f\"the train accuracy is for LR {accuracy_score(y_train,y_pred_train_lr)}\")\nprint(f\"the test accuracy is for LR {accuracy_score(y_test,y_pred_test_lr)}\")","1913eed3":"svc=SVC(kernel=\"rbf\",probability=True)\nsvc.fit(X_train_Scaled,y_train)","3544cff2":"svc=svc_grid.best_estimator_\ny_pred_train_svc=svc.predict(X_train_Scaled)\ny_pred_test_svc=svc.predict(X_test_Scaled)","5adebf19":"print(f\"the train accuracy is for SVC {accuracy_score(y_train,y_pred_train_svc)}\")\nprint(f\"the test accuracy is for SVC {accuracy_score(y_test,y_pred_test_svc)}\")","c1fc28e6":"#KNN\nprint(\"KNN Confusion Matrix \\n\")\nconfusion_matrix(y_test,y_pred_test_knn)\nprint(pd.crosstab(y_test, y_pred_test_knn, rownames=['True'], colnames=['Predicted'], margins=True))\nprint(\"________________________________\\n\")\n#LR\nprint(\"LR Confusion Matrix \\n\")\nconfusion_matrix(y_test,y_pred_test_lr)\nprint(pd.crosstab(y_test, y_pred_test_lr, rownames=['True'], colnames=['Predicted'], margins=True))\nprint(\"________________________________\\n\")\n#SVC\nprint(\"SVC Confusion Matrix \\n\")\nconfusion_matrix(y_test,y_pred_test_svc)\nprint(pd.crosstab(y_test, y_pred_test_svc, rownames=['True'], colnames=['Predicted'], margins=True))\nprint(\"________________________________\\n\")","bc979bf7":"#KNN\nprint(\"KNN Classification Report\\n\")\nprint(classification_report(y_test,y_pred_test_knn))\nprint(\"________________________________\\n\")\n#LR\nprint(\"LR Classification Report\\n\")\nprint(classification_report(y_test,y_pred_test_lr))\nprint(\"________________________________\\n\")\n#SVC\nprint(\"SVC Classification Report\\n\")\nprint(classification_report(y_test,y_pred_test_svc))\nprint(\"________________________________\\n\")","8905ff86":"#SVC ROC Curve\ny_pred_proba_svc = svc.predict_proba(X_test_Scaled)[:,1]\nfpr_svc, tpr_svc, thresholds_svc = roc_curve(y_test, y_pred_proba_svc)\nfig,axs=plt.subplots(1,3,figsize=(15,8))\naxs[0].plot([0,1],[0,1],'k--')\naxs[0].plot(fpr_svc,tpr_svc, label='SVC')\naxs[0].set_title('SVC ROC curve')\n#Logistic Regression ROC Curve\ny_pred_proba_lr = LR.predict_proba(X_test_Scaled)[:,1]\nfpr_lr, tpr_lr, thresholds_lr = roc_curve(y_test, y_pred_proba_lr)\naxs[1].plot([0,1],[0,1],'k--')\naxs[1].plot(fpr_lr,tpr_lr, label='LR')\naxs[1].set_title('LR ROC curve')\n#KNN Regression ROC Curve\ny_pred_proba_knn = knn.predict_proba(X_test_Scaled)[:,1]\nfpr_knn, tpr_knn, thresholds_knn = roc_curve(y_test, y_pred_proba_knn)\naxs[2].plot([0,1],[0,1],'k--')\naxs[2].plot(fpr_knn,tpr_knn, label='LR')\naxs[2].set_title('KNN ROC curve')\nplt.show()","d460beaf":"## Scaling Data Standard Scaler","db9c6e18":"## Logistic Regression","0f0f2052":"## Splitting the Data","b09d84aa":"## Visualizing Data Distribution Through Histplot","12386c76":"## K Nearest Neighbor","7fd32f3c":"## Precision, Recall and Accuracy","0ffe4727":"## Preprocessing\n-Dealing with zero values by replacing each zero value with the mean of its column","93b8ef9d":"## SVC","cb25826c":"## Pairplot with target","07c56713":"## ROC Curve","1315e47c":"## Several values have a minimum that doesn't make sense such as:\n-Glucose can't reach zero while the person is still alive.<br>\n-Skin thickness is measured in mm alas it cannot reach 0.<br>\n-Insulin production level could reach zero which is a high indication if the person is diabetic.<br>\n-BMI which is body mass index is calculated from weight and height and cannot reach zero.<br>","6c206954":"## Data Investigation","00a584cd":"## Boxplot for each column with target","1c34b630":"## Confusion Matrix"}}