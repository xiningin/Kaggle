{"cell_type":{"0a7373a2":"code","fdf0fbb5":"code","e8a15b5a":"code","a37d89d2":"code","ba15f05b":"code","1c0b7ee4":"code","5031f46e":"code","ded03f5e":"code","66aa87b8":"code","134b9ab4":"code","dded5e65":"code","4a8a05e6":"code","03dea7d1":"markdown","e8ad58ca":"markdown","a8001133":"markdown","daa9a459":"markdown","17848f7c":"markdown","13eeab4f":"markdown","8341b4d3":"markdown"},"source":{"0a7373a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fdf0fbb5":"credits = pd.read_csv(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv\")\nmovies = pd.read_csv(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")\nratings = pd.read_csv(\"..\/input\/the-movies-dataset\/ratings_small.csv\")","e8a15b5a":"# column name changed\n\ncredits.columns = ['movieId','title','cast','crew']\n\nmovies.rename(columns={\"id\": \"movieId\"}, inplace=True)\n#movies.columns","a37d89d2":"\nratings = ratings.loc[:,[\"userId\",\"movieId\",\"rating\"]]\nratings.head(10)","ba15f05b":"data = pd.merge(credits,movies, on=\"movieId\")\ndf = data.merge(ratings, on=\"movieId\")\ndf.columns","1c0b7ee4":"df.drop(['status', 'title_x', 'title_y'], axis=1, inplace=True)             # benzer attribute lari sildik","5031f46e":"df.head(1)","ded03f5e":"df.vote_average.mean()","66aa87b8":"# what we need is that movie id and title\ndf = df.loc[:,[\"movieId\",\"original_title\",\"userId\",\"vote_average\"]]\ndf.head(10)","134b9ab4":"df.shape","dded5e65":"\npivot_table = df.pivot_table(index = [\"userId\"],columns = [\"original_title\"],values = \"vote_average\")\npivot_table.head(100)","4a8a05e6":"movie_watched = pivot_table[\"2001: A Space Odyssey\"]\n\n\nsimilarity_with_other_movies = pivot_table.corrwith(movie_watched)           \nsimilarity_with_other_movies = similarity_with_other_movies.sort_values(ascending=False)\nsimilarity_with_other_movies.head()","03dea7d1":"\n* It can be concluded that we need to recommend \"Secret Window\",\"\u0421\u043e\u043b\u044f\u0440\u0438\u0441\",\"Open Water\",\"Reindeer Games\" and \"Rize\" movies to people who watched \"2001: A Space Odyssey\".\n* On the other hand even if we do not consider, number of rating for each movie is also important.\n\n","e8ad58ca":"# Conclusion\n\n* If this tutorial is not enough you can check Recommendation System for Beginners prepared by \n    - https:\/\/www.kaggle.com\/kanncaa1\/recommendation-systems-tutorial\n* After this tutorial, my aim is to prepare 'kernel' which is connected to Deep Learning with 'Sign Language MNSIT' data.\n* If you have any suggestions, please could you write for me? I wil be happy for comment and critics!\n* Thank you for your suggestion and votes ;)","a8001133":"* As it can be seen data frame that is above, we have 4 features that are movie id, title user id and rating\n* According to these data frame, we will make item based recommendation system","daa9a459":"* As it can be seen from table above, rows are users, columns are movies and values are ratings\n* For example user 4 gives 6.8 rating to movie \"20,000 Leagues Under the Sea\" and user 8 gives 6.8 rating to same movie.\n* Now lets make a scenario, we have movie web site and \"2001: A Space Odyssey\" movie are watched and rated by people. The question is that which movie do we recommend these people who watched \"2001: A Space Odyssey\" movie.\n* In order to answer this question we will find similarities between \"2001: A Space Odyssey\" movie and other movies.\n\n","17848f7c":"* lets make a pivot table in order to make rows are users and columns are movies. And values are rating","13eeab4f":"### Lets see vote average","8341b4d3":"### what we need is that user id, movie id and rating"}}