{"cell_type":{"06cc13f0":"code","b777b362":"code","35d9a2cc":"code","9fc64fcb":"code","cea6865b":"code","00c3eda9":"code","c1f7af84":"code","2e9de214":"code","02b57cbf":"code","f7f9b822":"code","7553e1f9":"code","f483b4ad":"code","8926d720":"code","32930c38":"code","83a1bcf5":"code","ed1d5f1f":"code","3848685d":"code","8d98d040":"code","ed3564ad":"code","9e39ced9":"code","67044663":"code","7f99b834":"code","76af5883":"code","17be4ec5":"code","0580ef9c":"code","15a905b1":"code","f937d12b":"code","d37fcc55":"code","be1d663c":"code","36fca826":"code","18977d5d":"code","924b50e3":"code","1a78270b":"code","b48fd78a":"code","f58df38b":"code","18dbd7c7":"code","f3e39b6d":"code","1f164521":"code","023ad014":"markdown","bc11b44d":"markdown","99e6a557":"markdown","a78d046e":"markdown","00f0280d":"markdown","2542b5bb":"markdown","782cfe60":"markdown","fce159f6":"markdown","0b889736":"markdown","d27ee1ac":"markdown","5463d312":"markdown","fc44238f":"markdown","437eb66f":"markdown","90ba00db":"markdown","93330aca":"markdown"},"source":{"06cc13f0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b777b362":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n    ","35d9a2cc":"!pip install pandas_flavor","9fc64fcb":"from pandas_flavor import register_dataframe_method,register_series_method\nfrom IPython.core.display import display, HTML\n\n@register_dataframe_method\ndef missing(df):\n        return sorted(\n                    [(col,str(df[col].dtypes),np.round(df[col].isna().sum()\/len(df) * 100,2)) for col in df.columns if df[col].isna().sum() !=0 ],\n                    key = lambda x: x[2], reverse=True)\n    \n@register_dataframe_method\ndef get_numeric_df(df):\n    return df.select_dtypes(np.number)\n\n@register_dataframe_method\ndef get_numeric_col(df):\n    return list(df.select_dtypes(np.number).columns)\n\n@register_dataframe_method\ndef get_cat_col(df):\n    return list(df.select_dtypes(exclude=np.number).columns)\n\n@register_dataframe_method\ndef get_cat_df(df):\n    return df.select_dtypes(exclude=np.number)\n\n@register_dataframe_method\ndef discrete_features(df,thresold):\n#     thresold in number of unique values\n    return [feature for feature in df.columns if len(df[feature].unique()) < thresold]\n\n@register_dataframe_method\ndef continious_features(df,thresold):\n    #     thresold in number of unique values\n    return [feature for feature in df.columns if len(df[feature].unique()) >= thresold]\n\n@register_dataframe_method\ndef dtypes_of_cols(df):\n    return pd.DataFrame(df.dtypes).reset_index().rename(columns={'index':\"Columns\",0: \"dtype\"})\n\n@register_dataframe_method\ndef unique_value_column(df):\n#     returns unique value if object, else describe \n\n    if df.dtype == 'object':\n    \n        return list(df.unique())\n    else:\n        return df.describe().to_dict()\n    \n    \n@register_series_method\ndef IQR_range(df):\n    if isinstance(df, pd.Series):\n        Q3 = np.quantile(df, 0.75)\n        Q1 = np.quantile(df, 0.25)\n        IQR = Q3 - Q1\n\n        lower_range = Q1 - 1.5 * IQR\n        upper_range = Q3 + 1.5 * IQR\n\n        return (lower_range,upper_range)\n    else:\n        assert False, \"df must be of type pandas.Series\"\n        \n@register_dataframe_method\ndef IQR_range(df):\n    if isinstance(df, pd.DataFrame):\n        cols = df.get_numeric_col()\n        features = {}\n        for i in cols:\n            Q3 = np.quantile(df[i], 0.75)\n            Q1 = np.quantile(df[i], 0.25)\n            IQR = Q3 - Q1\n\n            lower_range = Q1 - 1.5 * IQR\n            upper_range = Q3 + 1.5 * IQR\n\n\n            features[i] = (lower_range,upper_range)\n            \n        return pd.DataFrame.from_dict(features,orient='index').rename({0: 'IQR_Low',1: 'IQR_High'}, axis=1)\n    else:\n        assert False, \"df must be of type pandas.DataFrame\"\n        \n        \n    \n@register_series_method\ndef IQR_percent(df):\n    if isinstance(df, pd.Series):\n        \n        lower_range, upper_range = df.IQR_range()\n\n        length = len(df)\n        return np.round((length - df.between(lower_range,upper_range).sum())\/length * 100, 2)\n    else:\n        assert False, \"df must be of type pandas.Series\"\n\n@register_dataframe_method\ndef IQR_percent(df):\n    if isinstance(df, pd.DataFrame):\n        cols = df.get_numeric_col()\n        features = {}\n        for i in cols:\n            lower_range, upper_range = df[i].IQR_range()\n\n            length = len(df[i])\n            tmp = np.round((length - df[i].between(lower_range,upper_range).sum())\/length * 100, 2)\n            if tmp != 0:\n                features[i] = tmp\n#             features[i] = IQR_percent(df[i])\n            \n        return pd.DataFrame.from_dict(features,orient='index').rename({0: 'Percent Missing'}, axis=1)\n    else:\n        assert False, \"df must be of type pandas.DataFrame\"\n\n\n@register_dataframe_method\ndef about(df):\n\n    display(HTML('<h1 style=\"color:green\"> <b> Shape of data <\/b> <\/h1>'))\n    print(df.shape)    \n\n    display(HTML('<h1 style=\"color:green\"> <b> Datatypes in data <\/b> <\/h1> '))\n    print(df.dtypes.value_counts(ascending=False))\n\n    display(HTML('<h1 style=\"color:green\"> <b> dtypes of columns <\/b> <\/h1> '))\n    display(df.dtypes_of_cols())\n\n    display(HTML('<h1 style=\"color:green\"> <b> Percentage of missing values <\/b> <\/h1> '))\n    tmp = missing(df)\n    print(*tmp,sep=\"\\n\") if len(tmp) != 0 else display(HTML(\"<h2> <b> None <b> <\/h2>\"))\n\n    display(HTML('<h1 style=\"color:green\"> <b> Data description <\/b> <\/h1> '))\n    display(df.describe().T)\n    \n    display(HTML('<h1 style=\"color:green\"> <b> Outlier Percentage(IQR) <\/b> <\/h1> '))\n    tmp = df.IQR_percent()\n    display(tmp) if len(tmp) != 0 else display(HTML(\"<h2> <b> None <b> <\/h2>\"))\n\n    display(HTML('<h1 style=\"color:green\"> <b> Example of data <\/b> <\/h1> '))\n    display(df.head())","cea6865b":"sns.set(style=\"darkgrid\",font_scale=1.3)\nplt.rcParams['figure.dpi']=100\n\n\nfrom matplotlib.ticker import MaxNLocator\n\ndef srt_reg(y, df,x_size=20,y_size=20,*args,**kwargs):\n    \n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, figsize=(x_size,y_size))\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n\n        sns.regplot(x=i,\n                    y=y,\n                    data=df,\n                    ax=j,\n                    order=3,\n                    ci=None,\n                    color='#e74c3c',\n                    line_kws={'color': 'black'},\n                    scatter_kws={'alpha':0.4},\n                   *args,**kwargs)\n        j.tick_params(labelrotation=45)\n        j.yaxis.set_major_locator(MaxNLocator(nbins=10))\n\n        plt.tight_layout()\n\ndef srt_box(y, df,*args,**kwargs):\n    fig, axes = plt.subplots(19, 3, figsize=(30,30))\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n\n        sortd = df.groupby([i])[y].median().sort_values(ascending=False)\n        sns.boxplot(x=i,\n                    y=y,\n                    data=df,\n                    palette='plasma',\n                    order=sortd.index,\n                    ax=j,\n                    *args,**kwargs)\n        j.tick_params(labelrotation=45)\n        j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n        plt.tight_layout()\n\ndef histplt(df,x_size=20,y_size=20,*args,**kwargs):\n    \n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, \n                             figsize=(x_size,y_size)\n                            )\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n\n        sns.histplot(df[i],ax=j,*args,**kwargs)\n        j.tick_params(labelrotation=45)\n#         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n        plt.tight_layout()\n\n\ndef countplt(df,x_size=30,y_size=30,*args,**kwargs):\n    \n    if len(df.shape) == 1:\n        fig, ax = plt.subplots(figsize=(x_size,y_size))\n        sns.countplot(x=df,ax=ax,*args,**kwargs)\n        ax.bar_label(ax.containers[0])\n        \n        ax.tick_params(labelrotation=45)\n#         plt.tight_layout()\n        \n    else:\n    \n        ncols = 3\n        nrows = int(np.ceil(df.shape[1]\/ncols))\n\n        fig, axes = plt.subplots(nrows, ncols, \n                                 figsize=(x_size,y_size)\n                                )\n        axes = axes.flatten()\n\n        for i, j in zip(df.columns, axes):\n\n            sns.countplot(data=df, x=i,ax=j,*args,**kwargs)\n            j.tick_params(labelrotation=45)\n            j.bar_label(j.containers[0])\n    #         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n            plt.tight_layout()\n\n    \ndef bar_with_variable(df,y,x_size=30,y_size=30,*args,**kwargs):\n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, \n                             figsize=(x_size,y_size)\n                            )\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n        \n        if i == y:\n            continue\n#         tmp = pd.DataFrame(df.groupby(i)[y].median()).reset_index(inplace=True)\n        sns.barplot(data=pd.DataFrame(df.groupby(i)[y].median()).reset_index(),\n                    x=i,\n                    y=y,\n                    ax=j,*args,**kwargs)\n        j.tick_params(labelrotation=45)\n#         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n        plt.tight_layout()\n    \n    \ndef violinplt(df,y,x_size=30,y_size=30,*args,**kwargs):\n    \n    \n    \n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, \n                             figsize=(x_size,y_size)\n                            )\n    axes = axes.flatten()\n    \n    if df[y].dtype == 'O':\n\n        for i, j in zip(df.columns, axes):\n\n            if i == y:\n                continue\n\n            sns.violinplot(data=df,\n                        x=y,\n                        y=i,\n                        ax=j,*args,**kwargs)\n            \n            lower_range, upper_range = df[i].IQR_range()\n            outliers = df[(df[i] > upper_range) | (df[i] < lower_range)][i]\n            sns.scatterplot(y=outliers, x=0, marker='D', color='crimson', ax=j)\n            j.tick_params(labelrotation=45)\n\n    #         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n            plt.tight_layout()\n        \n        \n    else:\n\n        for i, j in zip(df.columns, axes):\n\n            if i == y:\n                continue\n\n            sns.violinplot(data=df,\n                        x=i,\n                        y=y,\n                        ax=j,*args,**kwargs)\n            j.tick_params(labelrotation=45)\n\n    #         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n            plt.tight_layout()\n        \ndef boxplt(df,y,x_size=30,y_size=30,*args,**kwargs):\n\n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, \n                             figsize=(x_size,y_size)\n                            )\n    axes = axes.flatten()\n    \n    if df[y].dtype == 'O':\n\n        for i, j in zip(df.columns, axes):\n\n            if i == y:\n                continue\n\n            sns.boxplot(data=df,\n                        x=y,\n                        y=i,\n                        ax=j,*args,**kwargs)\n\n    #         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n            plt.tight_layout()\n        \n        \n    else:\n\n        for i, j in zip(df.columns, axes):\n\n            if i == y:\n                continue\n\n            sns.boxplot(data=df,\n                        x=i,\n                        y=y,\n                        ax=j,*args,**kwargs)\n\n    #         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n            plt.tight_layout()\n\n\nimport scipy.stats as stats\n\ndef qqplt(df,x_size=30,y_size=30,*args,**kwargs):\n    \n    if len(df.shape) == 1:\n        fig, ax = plt.subplots(figsize=(x_size,y_size))\n        stats.probplot(df,plot=ax, *args,**kwargs)\n        \n#         ax.set_title(label=df.columns)\n        ax.tick_params(labelrotation=45)\n        ax.yaxis.set_major_locator(MaxNLocator(nbins=10))\n\n#         plt.tight_layout()\n        \n    \n    else:\n        ncols = 3\n        nrows = int(np.ceil(df.shape[1]\/ncols))\n\n        fig, axes = plt.subplots(nrows, ncols, figsize=(x_size,y_size))\n        axes = axes.flatten()\n\n        for i, j in zip(df.columns, axes):\n\n            stats.probplot(df[i],plot=j, *args,**kwargs)\n            j.set_title(label=i)\n            j.tick_params(labelrotation=45)\n            j.yaxis.set_major_locator(MaxNLocator(nbins=10))\n\n            plt.tight_layout()","00c3eda9":"df = pd.read_csv(\"..\/input\/car-price-prediction\/CarPrice_Assignment.csv\")\ndf.drop(\"car_ID\",axis=1,inplace=True)\ndf.about()","c1f7af84":"histplt(df.get_numeric_df(),x_size=30,y_size=25,bins=30,kde=True)","2e9de214":"srt_reg(df=df.get_numeric_df(),y=\"price\")","02b57cbf":"numeric_col_skew = df.get_numeric_df().skew()\nnumeric_col_skew","f7f9b822":"qqplt(df[\"price\"],x_size=10,y_size=10)","7553e1f9":"qqplt(df.get_numeric_df())","f483b4ad":"skew_limit = 0.75\n\nnumeric_col_skew = numeric_col_skew[abs(numeric_col_skew)> skew_limit].sort_values(ascending=False)\nnumeric_col_skew","8926d720":"from sklearn.preprocessing import PowerTransformer","32930c38":"df_trans = df[numeric_col_skew.index].copy()\n\npt = PowerTransformer(method='yeo-johnson')\n\ntrans= pt.fit_transform(df_trans)\n\ndf_trans = pd.DataFrame(trans, columns =numeric_col_skew.index )\nprint(df_trans.skew())\nprint()\n","83a1bcf5":"df_trans = df[numeric_col_skew.index].copy()\n\npt = PowerTransformer(method='box-cox')\n\ntrans= pt.fit_transform(df_trans)\n\ndf_trans = pd.DataFrame(trans, columns =numeric_col_skew.index )\nprint(df_trans.skew())\nprint()\n","ed1d5f1f":"qqplt(df_trans,x_size=30,y_size=10)","3848685d":"qqplt(df[df_trans.columns],x_size=30,y_size=10)","8d98d040":"df[df_trans.columns.to_list()] = df_trans","ed3564ad":"df.columns","9e39ced9":"df.skew()","67044663":"carnames = df[\"CarName\"].unique()\ncarnames","7f99b834":"set([i.split()[0] for i in carnames])","76af5883":"df[\"company\"] = [x.split()[0] for x in df['CarName']]\ndf[\"company\"]","17be4ec5":"df[\"company\"] = df['company'].replace({'maxda': 'Mazda','mazda': 'Mazda', \n                                     'nissan': 'Nissan', \n                                     'porcshce': 'Porsche','porsche':'Porsche', \n                                     'toyouta': 'Toyota', 'toyota':'Toyota',\n                            'vokswagen': 'Volkswagen', 'vw': 'Volkswagen', 'volkswagen':'Volkswagen'})","0580ef9c":"df[\"company\"].unique()\n","15a905b1":"df.drop(\"CarName\",axis=1,inplace=True)","f937d12b":"countplt(df.get_cat_df())","d37fcc55":"violinplt(df= pd.concat([df.get_cat_df(), df[\"price\"]], axis=1),y=\"price\")","be1d663c":"fig, ax = plt.subplots(figsize=(50,10))\n\nsns.violinplot(x=\"company\",y=\"price\",data=df,ax=ax)\nax.tick_params(labelrotation=45)","36fca826":"def compare(df,l_feat,r_feat):\n    \n#     [L_feat] {R_feat1: agg1, R_feat2: agg2}\n    \n    return [ df.groupby(l_feat,sort=True).agg({key: val}).sort_values(by=key,ascending=False) for key, val in zip(r_feat,r_feat.values())][0]\n\n    ","18977d5d":"for i in df.get_cat_col():\n    display(compare(df,i,{\"price\": 'median'}))","924b50e3":"for i in df.get_cat_col():\n    display(compare(df,[\"company\",i],{\"price\": 'median'}))","1a78270b":"from sklearn.preprocessing import StandardScaler, PolynomialFeatures, OneHotEncoder,StandardScaler,PowerTransformer, MinMaxScaler, RobustScaler, LabelEncoder\nfrom sklearn.model_selection import KFold, cross_val_predict, train_test_split,GridSearchCV,cross_val_score\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge,ElasticNet\nfrom sklearn.metrics import r2_score,mean_squared_error\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import make_column_transformer\n\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\n\n\nfrom sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor, ExtraTreesRegressor\nfrom sklearn.feature_selection import SelectKBest,SelectPercentile,f_classif,f_regression,mutual_info_regression,mutual_info_classif,SelectFromModel,RFE\n\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\n\nfrom sklearn.feature_selection import mutual_info_regression\nfrom sklearn.feature_selection import SelectPercentile\n\nimport warnings\nwarnings.filterwarnings('ignore')","b48fd78a":"df[df.get_cat_col()] = df[df.get_cat_col()].apply(LabelEncoder().fit_transform)\n\nX= df.drop('price', axis=1)\ny= df['price']\n\n\ndf.columns","f58df38b":"# determine the mutual information\nmutual_info = mutual_info_regression(X, y)\n\n\nmutual_info = pd.Series(mutual_info)\nmutual_info.index = X.columns\n# print(mutual_info.sort_values(ascending=False))\n\n\n## Selecting the top 30 percentile\nselected_top_columns = SelectPercentile(mutual_info_regression, percentile=30)\nselected_top_columns.fit(X, y)\n\n\n\nselected_top_columns.get_support()\n\n\ncols = X.columns[selected_top_columns.get_support()]\n\nX = df[cols]\ndisplay(X.head())\n\n\nr2_val = cross_val_score(LinearRegression(), X, y, scoring='r2',n_jobs=-1,cv=5, verbose=1)\n# r2_val.sum()\/len(r2_val) * 100\nr2_val","18dbd7c7":"df.columns","f3e39b6d":"\n\nlr = LinearRegression()\nrr = Ridge()\nlas = Lasso()\nel= ElasticNet()\nknn = KNeighborsRegressor()\n\n\nrf = RandomForestRegressor()\ngb = GradientBoostingRegressor()\net= ExtraTreesRegressor()\nxgb = XGBRegressor()\n\n\n\nmodels = {\"LinearRegression\":lr,\n          \"Ridge\":rr,\n          \"Lasso\":las,\n          \"ElasticNet\":el,\n          \"KNN\":knn,\n          \"RandomForest\":rf,\n          \"Gradboost\":gb,\n          \"ExtraTrees\":et,\n          \"XGB\":xgb}\n\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n","1f164521":"r2 = {}\nfor name, model in models.items():\n    tmp = cross_val_score(model, X, y, scoring='r2',n_jobs=-1,cv=5, verbose=1)\n#     print(acc)\n    r2[name] = tmp\n\nr2","023ad014":"**for some reason there is error for \"price\" column for yeo-johnson, box-cox works fine**","bc11b44d":"# Functions for plotting","99e6a557":"# Feature Engg","a78d046e":"## Encoding","00f0280d":"## Training","2542b5bb":"# Import data and EDA","782cfe60":"## Data for this notebook comes from [here](https:\/\/www.kaggle.com\/kaanboke\/car-price-prediction-beginner-friendly-94-3\/notebook)\n# This notebook is my try at various ML algos and EDAs. \n## Please feel free to critique, it helps me improve, Up vote if you like it.","fce159f6":"## Feature selection","0b889736":"## Continuous Values","d27ee1ac":"# Custom methods for pandas","5463d312":"**so lets apply transform to df**","fc44238f":"# Imports","437eb66f":"## Handle Categorical ","90ba00db":"# Some insights into data","93330aca":"# Models"}}