{"cell_type":{"71c1718c":"code","c7a3950d":"code","a0f2438d":"code","5d6de9b0":"code","234dfac1":"code","07f71537":"code","cef58d66":"code","944077c5":"code","a8252895":"code","f536cf8e":"markdown","9c076b4c":"markdown","7c4dd1a9":"markdown","302d093b":"markdown","28dd89ae":"markdown","2ba4e471":"markdown"},"source":{"71c1718c":"#importing necessary libraries\nimport numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense , Dropout , Lambda, Flatten\nfrom sklearn.model_selection import train_test_split\nfrom keras import  backend as K\nfrom keras.preprocessing.image import ImageDataGenerator","c7a3950d":"train=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\nprint(train.shape)\ntrain.sample(5)","a0f2438d":"test=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nprint(test.shape)\ntest.sample(5)","5d6de9b0":"X_train = (train.iloc[:,1:].values).astype('float32') # all pixel values\ny_train = train.iloc[:,0].values.astype('int32') # only labels i.e targets digits\nX_test = test.values.astype('float32')\n\n#Convert train datset to (num_images, img_rows, img_cols) format \nX_train = X_train.reshape(X_train.shape[0], 28, 28)\nplt.figure(figsize=(15,6))\n\nfor i in range(3,9):\n    plt.subplot(330 + (i+1))\n    plt.imshow(X_train[i], cmap=plt.get_cmap('gray'))\n    plt.title(y_train[i]);","234dfac1":"#expand 1 more dimention as 1 for colour channel gray\nX_train = X_train.reshape(X_train.shape[0], 28, 28,1)\nX_test = X_test.reshape(X_test.shape[0], 28, 28,1)\nX_test.shape","07f71537":"# one hot encoding the labels\n\nfrom keras.utils.np_utils import to_categorical\ny_train= to_categorical(y_train)\nnum_classes = y_train.shape[1]\nnum_classes","cef58d66":"from keras.preprocessing import image\ngen = image.ImageDataGenerator()\n# fix random seed for reproducibility\nseed = 42\nnp.random.seed(seed)\n\nfrom sklearn.model_selection import train_test_split\nX = X_train\ny = y_train\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.10, random_state=42)\nbatches = gen.flow(X_train, y_train, batch_size=64)\nval_batches=gen.flow(X_val, y_val, batch_size=64)","944077c5":"import keras\nfrom keras import layers\nfrom keras.models import  Sequential\nfrom keras.layers.core import  Lambda , Dense, Flatten, Dropout\nfrom keras.callbacks import EarlyStopping\nfrom keras.layers import BatchNormalization, Convolution2D , MaxPooling2D\n\nmodel = keras.Sequential(\n    [\n        keras.Input(shape=(28,28,1)),\n        layers.Conv2D(32, kernel_size=(3, 3), activation=\"relu\"),\n        layers.MaxPooling2D(pool_size=(2, 2)),\n        layers.Conv2D(64, kernel_size=(3, 3), activation=\"relu\"),\n        layers.MaxPooling2D(pool_size=(2, 2)),\n        layers.Flatten(),\n        layers.Dropout(0.5),\n        layers.Dense(num_classes, activation=\"softmax\"),\n    ]\n)\n\nmodel.summary()","a8252895":"model.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n\nhistory=model.fit_generator(generator=batches, steps_per_epoch=batches.n, epochs=1, \n                    validation_data=val_batches, validation_steps=val_batches.n)","f536cf8e":"we are getting a validation accuracy of 96% which is really good.\nThis is my first notebbok on Deep Learning neural networks so i'll appreciate if you upvote it if you like it and i'll try to improve and come\nup with better notebooks .Thanks :)","9c076b4c":"# Importing the dataset","7c4dd1a9":"## Simple Model","302d093b":"In this notebook i'll try to build a simple Digit Recognizer model with the help of neural network since i'm a beginner","28dd89ae":"# Model Designing","2ba4e471":"# Standardization"}}