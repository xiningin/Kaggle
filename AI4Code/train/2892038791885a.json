{"cell_type":{"ffec68f2":"code","f4baf251":"code","ee485ef7":"code","af6f2380":"code","c563a258":"code","c465006b":"code","0fec327e":"code","bd334a4a":"code","c2052475":"code","83575847":"code","9a1a828d":"code","958fb749":"code","4ee9cc9f":"code","9425bb4c":"code","d74e7d1d":"code","6fcdd4ab":"code","bbb40957":"code","fd4c83cd":"code","2c2058ed":"code","a1b7f092":"code","3df8c2d4":"code","ab820f28":"code","7d15651d":"code","69205370":"code","0c72612b":"code","7c95b768":"code","3d0fd9bb":"code","f2f70d25":"code","cab831ce":"code","b4851ef6":"code","743ab963":"code","bffc547e":"code","27021175":"code","e4f6084f":"code","12abae1c":"code","c7e5c2cf":"code","5733a73b":"code","dbc11305":"code","68dc7030":"code","2e2c8600":"code","31a4457a":"code","6d37a3ca":"code","bb13762e":"code","f7b34b34":"code","eae8b6b0":"code","4174222f":"code","cf9b9da4":"code","12652a37":"code","55cc981b":"code","94d9e70d":"code","5a8ac4a2":"code","d8482ef2":"code","5e5b88e6":"code","32bf82ec":"code","d9dde108":"code","c876bd58":"code","755eb89b":"code","a2974800":"code","d958c7d8":"code","0979388c":"code","2bcc31c7":"code","e04c61f1":"code","a6bb3def":"code","072ecca9":"code","e3e55d01":"code","22d39988":"code","e0119225":"code","dd8dced3":"code","9fe65b69":"code","404250d9":"code","afb4b972":"code","6521d9a5":"code","17839a07":"code","0265f242":"code","4bb41fcf":"code","89957b5c":"code","b163060b":"code","69f792bb":"code","6a22c0bb":"code","3b1adbec":"code","0f199d81":"code","c30c0993":"code","23cf7855":"code","202a8aeb":"code","d08466e5":"code","fd34d05b":"code","430da72c":"code","fc5f85fa":"code","a8374a90":"code","9e1bfeb7":"code","05c606cf":"code","d30c9c03":"code","407aacd5":"code","a226066f":"code","93b048a3":"code","a80a690d":"code","6e15cfae":"code","01732912":"code","19e3791e":"code","d1b130e6":"code","05949a05":"code","8736c681":"code","f604c823":"code","b65f602d":"code","978ad770":"code","90220e23":"code","4b3703f8":"code","62e545d9":"code","95936cfe":"code","c4669d66":"code","a99106b1":"code","cc1c9b86":"code","0afccb08":"code","08d4e512":"code","512dd1c3":"code","86f8e695":"code","8e8a6f2b":"code","f9818546":"code","19bf7771":"code","a275cc8c":"code","d1b38537":"code","41ed5085":"code","9bca7dc3":"code","e673dfd3":"code","4f269288":"code","583d2c01":"code","77c023ed":"code","c29a7a66":"code","5af89f47":"code","d70378b8":"code","10eeb064":"code","666af69a":"code","2fed2bae":"code","4f134d1d":"code","a3ddf412":"code","9be48086":"code","36960c18":"code","0d08787b":"code","ec0d72ca":"code","768f88bb":"code","c11e6750":"code","784f913b":"code","63a64669":"code","12cab471":"code","e8efbe31":"code","248f16a9":"code","fd26bb2e":"code","a691ba14":"code","be829e32":"code","5d7dbe6a":"code","1121a301":"code","73720d10":"code","8e0224c6":"code","155e0dd1":"code","db0b717e":"code","4506cec0":"code","c858b5a5":"code","ff33bb5e":"code","e61e9edf":"code","6cc6d493":"code","919a5a36":"code","dbe43b42":"code","e4bbab91":"code","5903db28":"code","f1282c25":"code","00b2d122":"code","20285229":"code","6709e15f":"markdown","1d080d29":"markdown","1c35e488":"markdown","75177e39":"markdown","3e02e88e":"markdown","9ec2710f":"markdown","285163bc":"markdown","111d9cc0":"markdown","a9badea2":"markdown","114dabf9":"markdown","0af22871":"markdown","42057fa7":"markdown","92f6fb4b":"markdown","e388a30e":"markdown","5f262cc2":"markdown","8ca0ae20":"markdown","18c09ad9":"markdown","10245ecd":"markdown","304e5ead":"markdown"},"source":{"ffec68f2":"# Kaggle Reference Link: https:\/\/www.kaggle.com\/mnassrib\/titanic-logistic-regression-with-python","f4baf251":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","ee485ef7":"pd.set_option('display.max_rows',1000)\npd.set_option('display.max_columns',1000)\npd.set_option('display.width',1000)","af6f2380":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c563a258":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","c465006b":"train.head()","0fec327e":"test.head()","bd334a4a":"print(train.shape,test.shape)","c2052475":"train.info()","83575847":"test.info()","9a1a828d":"train.shape[0]       ","958fb749":"(train.isnull().sum()\/train.shape[0])*100","4ee9cc9f":"(test.isnull().sum()\/test.shape[0])*100","9425bb4c":"train.describe()","d74e7d1d":"test.describe()","6fcdd4ab":"train_PassengerId = train['PassengerId']\ntest_PassengerId = test['PassengerId']","bbb40957":"train_drop=train.drop(['Cabin','Name','PassengerId','Ticket'],axis=1,inplace=True)\ntest_drop=test.drop(['Cabin','Name','PassengerId','Ticket'],axis=1,inplace=True)","fd4c83cd":"train.head()","2c2058ed":"test.head()","a1b7f092":"train['Survived'].value_counts()","3df8c2d4":"sns.pairplot(train,x_vars=['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked'],y_vars='Survived',size=2,aspect=1)\nplt.show()","ab820f28":"train.isnull().sum()","7d15651d":"train['Age'].fillna(train['Age'].median(),inplace=True)","69205370":"train.isnull().sum()","0c72612b":"train.dropna(inplace=True)","7c95b768":"test.isnull().sum()","3d0fd9bb":"test['Age'].fillna(test['Age'].median(),inplace=True)\ntest['Fare'].fillna(test['Fare'].median(),inplace=True)","f2f70d25":"# test.dropna(inplace=True)","cab831ce":"test.isnull().sum()","b4851ef6":"bxplot=train.select_dtypes(include=['float64','int64'])","743ab963":"bxplot.drop('Survived',axis=1,inplace=True)","bffc547e":"bxcols=bxplot.columns\nbxcols","27021175":"def bxplott(df): \n    for i in bxcols:\n            sns.boxplot(data=df,x=df[i])\n            plt.show()","e4f6084f":"bxplott(train)","12abae1c":"Q3=train['Pclass'].quantile(0.85)\nQ1=train['Pclass'].quantile(0.15)\nIQR=Q3-Q1\ntrain=train[(train['Pclass'] >= Q1 - 1.5*IQR) & (train['Pclass']<= Q3 + 1.5*IQR) ]\n\nQ3=train['Age'].quantile(0.85)\nQ1=train['Age'].quantile(0.15)\nIQR=Q3-Q1\ntrain=train[(train['Age'] >= Q1 - 1.5*IQR) & (train['Age']<= Q3 + 1.5*IQR) ]\n\nQ3=train['SibSp'].quantile(0.85)\nQ1=train['SibSp'].quantile(0.15)\nIQR=Q3-Q1\ntrain=train[(train['SibSp'] >= Q1 - 1.5*IQR) & (train['SibSp']<= Q3 + 1.5*IQR) ]\n\nQ3=train['Parch'].quantile(0.85)\nQ1=train['Parch'].quantile(0.15)\nIQR=Q3-Q1\ntrain=train[(train['Parch'] >= Q1 - 1.5*IQR) & (train['Parch']<= Q3 + 1.5*IQR) ]\n\nQ3=train['Fare'].quantile(0.85)\nQ1=train['Fare'].quantile(0.15)\nIQR=Q3-Q1\ntrain=train[(train['Fare'] >= Q1 - 1.5*IQR) & (train['Fare']<= Q3 + 1.5*IQR) ]","c7e5c2cf":"train.head()","5733a73b":"def bxplott(df): \n      for i in bxcols:\n            sns.boxplot(data=df,x=df[i])\n            plt.show()","dbc11305":"bxplott(train)","68dc7030":"train['Sex']=train['Sex'].map({'male':0,'female':1})\ntest['Sex']=test['Sex'].map({'male':0,'female':1})","2e2c8600":"embarked_train=pd.get_dummies(train['Embarked'],prefix='Embarked',drop_first=True)\ntrain.drop([\"Embarked\"],axis=1,inplace=True)\ntrain=pd.concat([train,embarked_train],axis=1)","31a4457a":"embarked_test=pd.get_dummies(test['Embarked'],prefix='Embarked',drop_first=True)\ntest.drop([\"Embarked\"],axis=1,inplace=True)\ntest=pd.concat([test,embarked_test],axis=1)","6d37a3ca":"train.head()","bb13762e":"test.head()","f7b34b34":"test.isnull().sum()","eae8b6b0":"train['SibSp'].value_counts()","4174222f":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nscalecols=['Pclass','Age','Fare','SibSp','Parch']\ntrain[scalecols]=scaler.fit_transform(train[scalecols])","cf9b9da4":"train.head()","12652a37":"scalecols_test=['Pclass','Age','Fare','SibSp','Parch']\ntest[scalecols_test]=scaler.transform(test[scalecols_test])\ntest.head()","55cc981b":"test.isnull().sum()","94d9e70d":"y=train['Survived']\nX=train.drop(['Survived'],axis=1)","5a8ac4a2":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,train_size=0.7,test_size=0.3,random_state=100)","d8482ef2":"X_train.head()","5e5b88e6":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nprint(\"Cross_Val_Score:\",cross_val_score(logreg,X_train,y_train,cv = 5,scoring = 'accuracy').mean())","32bf82ec":"converted=(sum(train['Survived'])\/len(train['Survived'].index)*100)\nprint(converted)","d9dde108":"cols= X_train.columns","c876bd58":"from sklearn.linear_model import LogisticRegression\nfrom statsmodels import api as sm\nlogreg=LogisticRegression()","755eb89b":"X_train_1 = sm.add_constant(X_train[cols])\nmodel_1 = sm.GLM(y_train,X_train_1,family=sm.families.Binomial()).fit()\nprint(model_1.summary())","a2974800":"y_train_pred_1=model_1.predict(X_train_1)\ny_train_pred_1.head()","d958c7d8":"y_train_pred_1=y_train_pred_1.values.reshape(-1)\ny_train_pred_1[:10]","0979388c":"y_train_pred_1=pd.DataFrame({'Survived':y_train.values,'Survival_Prob':y_train_pred_1})","2bcc31c7":"y_train_pred_1.head()","e04c61f1":"y_train_pred_1['Index']=y_train.index","a6bb3def":"y_train_pred_1.head()","072ecca9":"y_train_pred_1['Predicted_Value']=y_train_pred_1['Survival_Prob'].map(lambda x:1 if x>0.5 else 0)","e3e55d01":"y_train_pred_1.head()","22d39988":"from sklearn import metrics\nconfusion=metrics.confusion_matrix(y_train_pred_1['Survived'],y_train_pred_1['Predicted_Value'])\nprint(confusion)","e0119225":"print(metrics.accuracy_score(y_train_pred_1['Survived'],y_train_pred_1['Predicted_Value']))","dd8dced3":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nVIF=pd.DataFrame()\nVIF['Features']=X_train[cols].columns\nVIF['VIF']=[variance_inflation_factor(X_train[cols].values,i) for i in range(X_train[cols].shape[1])]\nVIF['VIF']=round(VIF['VIF'],2)\nVIF=VIF.sort_values(by='VIF',ascending=False)\nVIF.head()","9fe65b69":"cols=cols.drop(['Embarked_Q'])","404250d9":"X_train_2=sm.add_constant(X_train[cols])\nmodel_2=sm.GLM(y_train,X_train_2,family=sm.families.Binomial()).fit()\nprint(model_2.summary())","afb4b972":"y_train_pred_2=model_2.predict(X_train_2)\ny_train_pred_2.head()","6521d9a5":"y_train_pred_2=pd.DataFrame({'ID':y_train.index,'Survived':y_train,'Survival_Prob':y_train_pred_2})","17839a07":"y_train_pred_2['Predicted_value']=y_train_pred_2['Survival_Prob'].map(lambda x:1 if x>0.5 else 0)\ny_train_pred_2.head()","0265f242":"from sklearn import metrics\nconfusion=metrics.confusion_matrix(y_train_pred_2['Survived'],y_train_pred_2['Predicted_value'])\nconfusion","4bb41fcf":"accuracy=metrics.accuracy_score(y_train_pred_2['Survived'],y_train_pred_2['Predicted_value'])\naccuracy","89957b5c":"vif=pd.DataFrame()\nvif['Features']=X_train[cols].columns\nvif['VIF']=[variance_inflation_factor(X_train[cols].values,i) for i in range(X_train[cols].shape[1])]\nVIF['VIF']=round(vif['VIF'],2)\nvif.head()","b163060b":"cols=cols.drop(['Embarked_S'])","69f792bb":"X_train_3=sm.add_constant(X_train[cols])","6a22c0bb":"model_3=sm.GLM(y_train,X_train_3,family=sm.families.Binomial()).fit()","3b1adbec":"print(model_3.summary())","0f199d81":"y_train_pred_3=model_3.predict(X_train_3)\ny_train_pred_3.head()","c30c0993":"y_train_pred_3=pd.DataFrame({'ID':y_train.index,'Survived':y_train,'Survival_Prob':y_train_pred_3})","23cf7855":"y_train_pred_3['Predicted_value']=y_train_pred_3['Survival_Prob'].map(lambda x:1 if x>0.5 else 0)\ny_train_pred_3.head()","202a8aeb":"confusion=metrics.confusion_matrix(y_train_pred_3['Survived'],y_train_pred_3['Predicted_value'])\nconfusion","d08466e5":"accuracy=metrics.accuracy_score(y_train_pred_3['Survived'],y_train_pred_3['Predicted_value'])\naccuracy","fd34d05b":"vif=pd.DataFrame()\nvif['Features']=X_train[cols].columns\nvif['VIF']=[variance_inflation_factor(X_train[cols].values,i) for i in range(X_train[cols].shape[1])]\nvif['VIF']=round(vif['VIF'],2)\nvif=vif.sort_values(by='VIF',ascending=False)\nvif.head()","430da72c":"cols=cols.drop('Parch')","fc5f85fa":"X_train_4=sm.add_constant(X_train[cols])","a8374a90":"model_4=sm.GLM(y_train,X_train_4,family=sm.families.Binomial()).fit()\nprint(model_4.summary())","9e1bfeb7":"y_train_pred_4=model_4.predict(X_train_4)\ny_train_pred_4.head()","05c606cf":"y_train_pred_4=pd.DataFrame({'ID':y_train.index,'Survived':y_train,'Survival_Prob':y_train_pred_4})","d30c9c03":"y_train_pred_4['Predicted_value']=y_train_pred_4.Survival_Prob.map(lambda x:1 if x>0.5 else 0)\ny_train_pred_4.head()","407aacd5":"confusion=metrics.confusion_matrix(y_train_pred_4['Survived'],y_train_pred_4['Predicted_value'])\nconfusion","a226066f":"accuracy=metrics.accuracy_score(y_train_pred_4['Survived'],y_train_pred_4['Predicted_value'])\naccuracy","93b048a3":"vif=pd.DataFrame()\nvif['Features']=X_train[cols].columns\nvif['VIF']=[variance_inflation_factor(X_train[cols].values,i) for i in range(X_train[cols].shape[1])]\nvif['VIF']=round(vif['VIF'],2)\nvif=vif.sort_values(by='VIF',ascending=False)\nvif.head()","a80a690d":"cols=cols.drop('SibSp')","6e15cfae":"X_train_5=sm.add_constant(X_train[cols])\nmodel_5=sm.GLM(y_train,X_train_5,family=sm.families.Binomial()).fit()\nprint(model_5.summary())","01732912":"y_train_pred_5=model_5.predict(X_train_5)\ny_train_pred_5.head()","19e3791e":"y_train_pred_5=pd.DataFrame({'ID':y_train.index,'Survived':y_train,'Survival_Prob':y_train_pred_5})\ny_train_pred_5['Predicted_value']=y_train_pred_5['Survival_Prob'].map(lambda x:1 if x>0.5 else 0)\ny_train_pred_5.head()","d1b130e6":"confusion=metrics.confusion_matrix(y_train_pred_5['Survived'],y_train_pred_5['Predicted_value'])\nconfusion","05949a05":"accuracy=metrics.accuracy_score(y_train_pred_5['Survived'],y_train_pred_5['Predicted_value'])\naccuracy","8736c681":"vif=pd.DataFrame()\nvif['Features']=X_train[cols].columns\nvif['VIF']=[variance_inflation_factor(X_train[cols].values,i) for i in range(X_train[cols].shape[1])]\nvif['VIF']=round(vif['VIF'],2)\nvif.sort_values(by='VIF',ascending=False)\nvif","f604c823":"cols=cols.drop('Fare')","b65f602d":"### Model 6:","978ad770":"X_train_6=sm.add_constant(X_train[cols])\nmodel_6=sm.GLM(y_train,X_train_6,family=sm.families.Binomial()).fit()\nprint(model_6.summary())","90220e23":"y_train_pred_6=model_6.predict(X_train_6)\ny_train_pred_6.head()","4b3703f8":"y_train_pred_6=pd.DataFrame({'ID':y_train.index,'Survived':y_train,'Survival_Prob':y_train_pred_6})\ny_train_pred_6['Predicted_value']=y_train_pred_6['Survival_Prob'].map(lambda x:1 if x>0.5 else 0)\ny_train_pred_6.head()","62e545d9":"confusion=metrics.confusion_matrix(y_train_pred_6['Survived'],y_train_pred_6['Predicted_value'])\nconfusion","95936cfe":"accuracy=metrics.accuracy_score(y_train_pred_6['Survived'],y_train_pred_6['Predicted_value'])\naccuracy","c4669d66":"vif=pd.DataFrame()\nvif['Features']=X_train[cols].columns\nvif['VIF']=[variance_inflation_factor(X_train[cols].values,i) for i in range(X_train[cols].shape[1])]\nvif['VIF']=round(vif['VIF'],2)\nvif.sort_values(by='VIF',ascending=False)\nvif","a99106b1":"TP=confusion[1,1]\nTN=confusion[0,0]\nFP=confusion[0,1]\nFN=confusion[1,0]\nprint('TP:{0}, TN:{1}, FP:{2}, FN:{3}'.format(TP,TN,FP,FN))","cc1c9b86":"# Sensitivity = TPR = Precision\nSensitivity= round(TP\/(TP+FN),2)\n# Specificity:\nSpecificity=round(TN\/(TN+FP),2)\n# FPR\nFPR=round(FP\/(FP+TN),2)\n# Precision:\nPrecision=round(TP\/(TP+FP),2)\n# Recall:\nRecall=round(TP\/(TP+FN),2)","0afccb08":"print('Sensitivity:',Sensitivity,'Specificity:',Specificity,'FPR:',FPR,'Precicion:',Precision,'Recall:',Recall)","08d4e512":"def draw_roc(actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve(actual, probs,drop_intermediate = False )\n    auc_score = metrics.roc_auc_score(actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n    return None","512dd1c3":"fpr, tpr, thresholds = metrics.roc_curve( y_train_pred_6['Survived'], y_train_pred_6['Survival_Prob'], drop_intermediate = False )","86f8e695":"draw_roc(y_train_pred_6['Survived'], y_train_pred_6['Survival_Prob'])","8e8a6f2b":"metrics.auc(fpr,tpr)","f9818546":"numbers=[float(i\/10) for i in range(10)]\nfor i in numbers:\n    y_train_pred_6[i]=y_train_pred_6['Survival_Prob'].map(lambda x:1 if x>i else 0)","19bf7771":"y_train_pred_6.head()","a275cc8c":"# Now let's calculate accuracy sensitivity and specificity for various probability cutoffs.\ncutoff_df = pd.DataFrame(columns = ['prob','accuracy','sensi','speci'])\nfrom sklearn.metrics import confusion_matrix\nnum = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\nfor i in num:\n    cm1 = metrics.confusion_matrix(y_train_pred_6['Survived'], y_train_pred_6[i] )\n    total1=sum(sum(cm1))\n    accuracy = (cm1[0,0]+cm1[1,1])\/total1\n    \n    speci = cm1[0,0]\/(cm1[0,0]+cm1[0,1])\n    sensi = cm1[1,1]\/(cm1[1,0]+cm1[1,1])\n    cutoff_df.loc[i] =[ i ,accuracy,sensi,speci]\nprint(cutoff_df)","d1b38537":"# Let's plot accuracy sensitivity and specificity for various probabilities.\ncutoff_df.plot.line(x='prob', y=['accuracy','sensi','speci'])\nplt.show()","41ed5085":"y_train_pred_6['FinalPredicted']=y_train_pred_6['Survival_Prob'].map(lambda x:1 if x> 0.3 else 0)\ny_train_pred_6.head()","9bca7dc3":"accuracy=metrics.accuracy_score(y_train_pred_6['Survived'],y_train_pred_6['FinalPredicted'])\naccuracy","e673dfd3":"confusion=metrics.confusion_matrix(y_train_pred_6['Survived'],y_train_pred_6['FinalPredicted'])\nconfusion","4f269288":"TP=confusion[1,1]\nTN=confusion[0,0]\nFP=confusion[0,1]\nFN=confusion[1,0]","583d2c01":"sensitivity=round(TP\/(TP+FN),2)\nspecificity=round(TN\/(TN+FP),2)\nprecision=round(TP\/(TP+FP),2)","77c023ed":"print(\"Sensitivity:\",sensitivity ,\"Specificity:\",specificity ,\"Precision:\",precision)","c29a7a66":"p, r, thresholds = metrics.precision_recall_curve(y_train_pred_6['Survived'], y_train_pred_6['Survival_Prob'])","5af89f47":"plt.plot(thresholds, p[:-1], \"g-\")\nplt.plot(thresholds, r[:-1], \"r-\")\nplt.show()","d70378b8":"X_test=X_test[cols]","10eeb064":"X_test_1=sm.add_constant(X_test)","666af69a":"y_test_pred=model_6.predict(X_test_1)","2fed2bae":"y_test_pred_1=pd.DataFrame(y_test_pred)\n# Let's see the head\ny_test_pred_1.head()","4f134d1d":"# Converting y_test to dataframe\ny_test_df = pd.DataFrame(y_test)","a3ddf412":"# Putting CustID to index\ny_test_df['CustID'] = y_test_df.index","9be48086":"y_test_df=pd.concat([y_test_df,y_test_pred_1],axis=1)","36960c18":"y_test_df.rename(columns={0:'Survival_Prob'},inplace=True)","0d08787b":"y_test_df['Predicted_Survival']=y_test_df['Survival_Prob'].map(lambda x:1 if x>0.29 else 0)","ec0d72ca":"y_test_df.head(2)","768f88bb":"confusion=metrics.confusion_matrix(y_test_df['Survived'],y_test_df['Predicted_Survival'])\nconfusion","c11e6750":"accuracy=metrics.accuracy_score(y_test_df['Survived'],y_test_df['Predicted_Survival'])\naccuracy","784f913b":"TP=confusion[1,1]\nTN=confusion[0,0]\nFP=confusion[0,1]\nFN=confusion[1,0]\nprint('TP:{0}, TN:{1}, FP:{2}, FN:{3}'.format(TP,TN,FP,FN))","63a64669":"# Sensitivity:\nsensitivity=round(TP\/(TP+FN),2)\n# Specificity:\nSpecificity=round(TN\/(TN+FP),2)\n# FPR\nFPR=round(FP\/(FP+TN),2)\n# Precision:\nPrecision=round(TP\/(TP+FP),2)\n# Recall:\nRecall=round(TP\/(TP+FN),2)","12cab471":"print('Sensitivity:',sensitivity,'Specificity:',Specificity,'FPR:',FPR,'Precision:',Precision,'Recall:',Recall )","e8efbe31":"test.shape","248f16a9":"test_cols = test[cols]\ntest_cols.head()\ntest_sm = sm.add_constant(test_cols)","fd26bb2e":"test_sm","a691ba14":"y_test_pred = model_6.predict(test_sm)","be829e32":"y_test_pred[:10]","5d7dbe6a":"y_test_pred.shape","1121a301":"# Converting y_pred to a dataframe which is an array\ny_pred_1 = pd.DataFrame(y_test_pred)","73720d10":"y_pred_1.shape","8e0224c6":"# Converting y_test to dataframe\ny_test_df = pd.DataFrame(test_PassengerId)","155e0dd1":"y_test_df.shape","db0b717e":"# Removing index for both dataframes to append them side by side \ny_pred_1.reset_index(drop=True, inplace=True)\ny_test_df.reset_index(drop=True, inplace=True)","4506cec0":"print(y_pred_1.shape,y_test_df.shape)","c858b5a5":"# Appending y_test_df and y_pred_1\nsubmission = pd.concat([y_test_df, y_pred_1],axis=1)\nsubmission.rename(columns={0:'Survival_Prob'},inplace=True)\nsubmission['Survived']=submission['Survival_Prob'].map(lambda x:1 if x>0.29 else 0)\nsubmission.drop(columns=['Survival_Prob'],inplace=True)","ff33bb5e":"submission.head()","e61e9edf":"submission.to_csv(\"submission_logistic.csv\", index=False)","6cc6d493":"from sklearn.svm import SVC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score, recall_score, f1_score, roc_auc_score, make_scorer","919a5a36":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nparams = {'n_estimators': np.arange(20,101,10), 'max_depth':np.arange(2,16,2),'criterion':['gini', 'entropy'],'min_samples_split':[2,3,4,5,6,7]}\n\nrf_classifier = RandomForestClassifier()\nrf_classifier_rs = GridSearchCV(rf_classifier, param_grid=params,n_jobs=-1 )\nrf_classifier_rs.fit(X, y)","dbe43b42":"rf_classifier_rs.best_estimator_","e4bbab91":"params = {'n_estimators': [20], 'max_depth':[6],'criterion':['gini'],'min_samples_split':[3]}\nrf_classifier_rs = GridSearchCV(rf_classifier, param_grid=params,n_jobs=-1 )\nrf_classifier_rs.fit(X, y)","5903db28":"y_pred = rf_classifier_rs.predict(test)\ndf = pd.DataFrame({'PassengerId': test_PassengerId,\"Survived\": y_pred})\ndf.to_csv('submission_rf.csv', index=False)","f1282c25":"import xgboost as xgb\nxgb=xgb.XGBClassifier()\nparams={'learning_rate':[0.01,0.001], 'max_depth':[8,9], 'gamma':[0,1], 'max_delta_step':[0,1], 'min_child_weight':[1,2], 'n_estimators':[110,115,120,125,130], 'seed':[0,1]}\nxgb_classifier_xgb = GridSearchCV(xgb, param_grid=params,n_jobs=-1 )\nxgb_classifier_xgb.fit(X, y)","00b2d122":"xgb_classifier_xgb.best_estimator_","20285229":"params = {'learning_rate':[0.01], 'max_depth':[8], 'gamma':[0], 'max_delta_step':[0], 'min_child_weight':[1], 'n_estimators':[110], 'seed':[0]}\nxgb_classifier_xgb = GridSearchCV(xgb, param_grid=params,n_jobs=-1)\nxgb_classifier_xgb.fit(X, y)\ny_pred = xgb_classifier_xgb.predict(test)\nsubmission_xgb= pd.DataFrame({'PassengerId': test_PassengerId,\"Survived\": y_pred})\nsubmission_xgb.to_csv('submission_xgb.csv', index=False)","6709e15f":"### Finding optimal cutoff point","1d080d29":"### Cross Validation","1c35e488":"### --------------------------------------------------------------------------------------------------------------\n### Most important values as per our p_Value and VIF are : \n- Age\n- Sex\n- Pclass\n### --------------------------------------------------------------------------------------------------------------","75177e39":"### Making predictions on the test set","3e02e88e":"### Model 5:","9ec2710f":"### XGBoost","285163bc":"### Model 2:","111d9cc0":"### Plotting ROC Curve","a9badea2":"### Building Logistic Regression Model","114dabf9":"### Checking the AUC Curve","0af22871":"### Model 4:","42057fa7":"# Precision Recall Tradeoff","92f6fb4b":"### Random Forest","e388a30e":"### Model 1","5f262cc2":"### Null Value Treatment","8ca0ae20":"### Dummy Variable","18c09ad9":"### Data Preparation","10245ecd":"### Model 3:","304e5ead":"### Outlier Treatment"}}