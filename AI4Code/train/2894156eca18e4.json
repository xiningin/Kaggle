{"cell_type":{"6804923a":"code","2c04fa31":"code","f5a63c68":"code","0d1f2d1e":"code","d036b9aa":"code","90a038c0":"code","c4d578f0":"code","ce43e614":"code","2d0c322b":"code","22987247":"code","043e5803":"code","fb91ea0d":"code","871bdb7f":"code","f856a503":"code","ff5dc8ee":"code","4a2b31d0":"code","aa1c6584":"markdown"},"source":{"6804923a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2c04fa31":"from sklearn import datasets\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import confusion_matrix, accuracy_score  \nfrom sklearn.model_selection import train_test_split","f5a63c68":"test=pd.read_csv(r\"..\/input\/titanic\/test.csv\")\ntest.head()","0d1f2d1e":"train=pd.read_csv(r\"..\/input\/titanic\/train.csv\")\ntrain.head()","d036b9aa":"train.describe()","90a038c0":"test.describe()","c4d578f0":"def null_table(train, test):\n    print(\"Training Data Frame\")\n    print(pd.isnull(train).sum()) \n    print(\" \")\n    print(\"Testing Data Frame\")\n    print(pd.isnull(test).sum())\n\nnull_table(train, test)\n","ce43e614":"train.drop(labels = [\"Cabin\", \"Ticket\"], axis = 1, inplace = True)\ntest.drop(labels = [\"Cabin\", \"Ticket\"], axis = 1, inplace = True)\n\nnull_table(train, test)","2d0c322b":"copy = train.copy()\ncopy.dropna(inplace = True)\nsns.distplot(copy[\"Age\"])","22987247":"#the median will be an acceptable value to place in the NaN cells\ntrain[\"Age\"].fillna(train[\"Age\"].median(), inplace = True)\ntest[\"Age\"].fillna(test[\"Age\"].median(), inplace = True) \ntrain[\"Embarked\"].fillna(\"S\", inplace = True)\ntest[\"Fare\"].fillna(test[\"Fare\"].median(), inplace = True)\n\nnull_table(train, test)\n","043e5803":"sns.set_style('whitegrid')\nsns.boxplot(x='Pclass',y='Age',data=train)","fb91ea0d":"sns.heatmap(train.corr())","871bdb7f":"train = train.dropna()","f856a503":"x = pd.get_dummies(train[['Pclass','Sex','Embarked','SibSp','Parch']])\nx_test = pd.get_dummies(test[['Pclass','Sex','Embarked','SibSp','Parch']])\ny = train['Survived']\n","ff5dc8ee":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nclf = RandomForestClassifier(max_depth=11,random_state=0)\nclf.fit(x,y)\nypred = clf.predict(x_test)\n","4a2b31d0":"output = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': ypred})\noutput.to_csv('my_submission1.csv', index=False)\nprint(\"saved successfully!\")","aa1c6584":"## Random forest"}}