{"cell_type":{"86915186":"code","1c6d32e0":"code","88a5f1ff":"code","bf1662bd":"code","0358c4ed":"code","3267dca3":"code","0471d064":"code","ca86354f":"code","3eff9b1f":"code","ff5d88ae":"code","b73df19f":"code","202ee4e8":"code","9553a23a":"code","8245fb27":"code","c464974e":"code","7a2f8a25":"code","7bd0c499":"code","f71625ff":"code","b6dcb324":"markdown","a726defd":"markdown"},"source":{"86915186":"# Import packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport os\n\n# Review the files contained within the directory\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1c6d32e0":"# Example to get things working is taken from the website : https:\/\/scikit-learn.org\/stable\/auto_examples\/linear_model\/plot_ols.html#sphx-glr-auto-examples-linear-model-plot-ols-py\n\n# Review the datasets that are available\ndir(datasets)","88a5f1ff":"# Request help on the \"load_diabetes\" dataset\nhelp(datasets.load_diabetes)\n\n# Default return value is a tuple with the data and target","bf1662bd":"# Extract the dataset as DataFrames\nd_X, d_Y = datasets.load_diabetes(return_X_y=True, as_frame=True)","0358c4ed":"# Review the dataframe shape\nd_X.shape","3267dca3":"# Review a random sample from the input data\nd_X.head()","0471d064":"# Review the target variable\nd_Y.head()","ca86354f":"# Display the columns\nd_X.columns","3eff9b1f":"# Create the train \/ test split for one variable\nd_x_train = d_X.bmi[:-20, np.newaxis]\nd_x_test = d_X.bmi[-20:, np.newaxis]","ff5d88ae":"# Create the train \/ test split for the target\nd_y_train = d_Y[:-20]\nd_y_test = d_Y[-20:]","b73df19f":"# Create the Linear regression object\nregr = linear_model.LinearRegression()","202ee4e8":"# Train the model using the training sets\nregr.fit(d_x_train, d_y_train)","9553a23a":"# Make a prediction using the test set\nd_y_pred = regr.predict(d_x_test)","8245fb27":"# Display the coefficients\nprint(f'Model coefficients {regr.coef_}')\n# Display the mean squared error\nprint(f'MSE : {mean_squared_error(d_y_test, d_y_pred)}')\n# Display the model fit (R2)\nprint(f'Model fit : {r2_score(d_y_test, d_y_pred)}')","c464974e":"# Plot outputs\nplt.scatter(d_x_test, d_y_test,  color='black')\nplt.plot(d_x_test, d_y_pred, color='blue', linewidth=3)\n\nplt.xticks(())\nplt.yticks(())\n\nplt.show()","7a2f8a25":"# Create empty dataframe\ndf = pd.DataFrame(columns=['Variable','Coeff','MSE','R2'])\ndf.head()","7bd0c499":"# Create a method to populate the dataframe for each variable's stats\nfor col in d_X.columns:\n    dx = d_X[col].to_numpy()\n    d_x_train = dx[:-20, np.newaxis]\n    d_x_test = dx[-20:, np.newaxis]\n    regr = linear_model.LinearRegression()\n    regr.fit(d_x_train, d_y_train)\n    d_y_pred = regr.predict(d_x_test)\n    df = df.append(\n        {\n            'Variable' : col,\n            'Coeff' : regr.coef_,\n            'MSE' : mean_squared_error(d_y_test, d_y_pred),\n            'R2' : r2_score(d_y_test, d_y_pred)\n        }, ignore_index=True\n    )\ndf","f71625ff":"# Order the dataframe by R2 descending\ndf.sort_values('R2', ascending=False)","b6dcb324":"#### Create the dataframe with model stats","a726defd":"### Linear Regression Class\n***\nAim: Create a single factor analysis class dataframe"}}