{"cell_type":{"61fb58ac":"code","9d4256c3":"code","61804534":"code","25fd2af1":"code","89804653":"code","7f622fb8":"code","0c922059":"code","b5f36426":"code","9e959278":"code","c0efb6ce":"code","89022149":"code","3e546502":"code","747fdbef":"code","ae866bdf":"code","6f0615dc":"code","a28ffbb0":"code","24f222a5":"code","49a862e3":"code","37f06645":"code","581199af":"code","7cc21cd0":"code","96c58c2c":"code","1a805ccb":"code","5e57bb1b":"code","75ff77d5":"code","54ee0ff4":"code","846b0165":"code","3f143a77":"code","c039d0e4":"code","1d8135db":"code","a6af4af0":"code","049dd371":"code","68955404":"code","22c60664":"code","290941c1":"code","c0e7e463":"code","85521960":"code","c7fa1008":"code","52d58be4":"code","3c2ee4f1":"code","a97d2df9":"code","27e2c84f":"code","9b9a370a":"code","894ab26e":"code","28fee250":"code","97c91cfe":"code","236416bb":"code","def05ef4":"code","d6b80dff":"code","c80791c5":"code","a53f9f6e":"code","f59488cc":"code","1f5143c7":"code","8ec1c98d":"markdown","a1738c01":"markdown","6d5ddaf7":"markdown","177c4a80":"markdown","556ca6ec":"markdown","219b8c6b":"markdown","357e14b5":"markdown","f6dfb380":"markdown","7e151e49":"markdown","68f6e6cb":"markdown","ad881de9":"markdown","2dd522d0":"markdown","fc632142":"markdown","3e1e158d":"markdown","88c77f2b":"markdown","ea31d951":"markdown","8216404d":"markdown","a76e01d1":"markdown","a67f037b":"markdown","d38f101e":"markdown","ffb024d7":"markdown"},"source":{"61fb58ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        import seaborn as sns\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d4256c3":"# reading data\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","61804534":"# importing necessary files\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","25fd2af1":"# Checking out 1st 5 values of our train data\ntrain.head()","89804653":"# Checking out null values using info() method\ntrain.info()","7f622fb8":"sns.set_style('dark')","0c922059":"# Checking out counts of 'Survived' column using value_counts() method as it returns object containing counts of unique valuesplt.figure(figsize=(15,8))\nplt.figure(figsize=(13,5))\nx=train[\"Survived\"].value_counts()\nmylabel=[\"Not survived (0)\",\"Survived(1)\"]\ncolors=['#f4acb8','#9d8189']\nplt.pie(x,labels=mylabel,autopct=\"%1.1f%%\",startangle=15,shadow=True,colors=colors)\nplt.axis(\"equal\")\nplt.title('Plot showing counts of Survived column')\nplt.show()","b5f36426":"# Here 3 represents 3rd class,1 represents 1st class whereas 2 represents 2nd class\nplt.figure(figsize=(8,5))\ntrain['Pclass'].value_counts().plot.bar(xlabel='Pclass',ylabel='Count',color='crimson',title='Plot showing counts of Pclass column')","9e959278":"# Here 0 represents males and 1 represents females\nplt.figure(figsize=(8,5))\ntrain['Sex'].value_counts().plot.bar(xlabel='Sex',ylabel='Count',color='crimson',title='Plot showing counts of Sex column')","c0efb6ce":"# Siblings\/Spouses count\nplt.figure(figsize=(8,5))\ntrain['SibSp'].value_counts().plot.bar(xlabel='SibSp',ylabel='Count',color='crimson',title='Plot showing counts of SibSp column')","89022149":"# Parents\/Children Count\nplt.figure(figsize=(8,5))\ntrain['Parch'].value_counts().plot.bar(xlabel='Parch',ylabel='Count',color='crimson',title='Plot showing counts of Parch column')","3e546502":"# Port of Embarkation count\nplt.figure(figsize=(8,5))\ntrain['Embarked'].value_counts().plot.bar(xlabel='Embarked',ylabel='Count',color='crimson',title='Plot showing counts of Embarked column')","747fdbef":"# Countplot for Pclass and Sex\nplt.figure(figsize=(8,5))\nsns.countplot(x=train['Pclass'],hue=train['Sex'])","ae866bdf":"# Countplot for Pclass and Embarked\nplt.figure(figsize=(8,5))\nsns.countplot(x=train['Pclass'],hue=train['Embarked'])","6f0615dc":"# Countplot for Survived and Sex\nplt.figure(figsize=(8,5))\nsns.countplot(x=train['Survived'], hue=train['Sex'])","a28ffbb0":"# Countplot for Survived and Pclass\nplt.figure(figsize=(8,5))\nsns.countplot(x=train['Survived'], hue=train['Pclass'])","24f222a5":"# Countplot for Survived and Parch\nplt.figure(figsize=(8,5))\nsns.countplot(x=train['Survived'], hue=train['Parch'])","49a862e3":"# Countplot for Survived and Age\nplt.figure(figsize=(8,5))\nsns.countplot(x=train['Survived'], hue=pd.cut(train['Age'],5))","37f06645":"import re\ndef split_it(data):\n    result = re.search('^.*,(.*)\\.\\s.*$', data)\n    if result.group(1) not in [' Mr', ' Miss', ' Mrs', ' Master']:\n        return ' Misc'\n    else:\n        return result.group(1)\n\ntrain['Title'] = train['Name'].apply(split_it)","581199af":"train","7cc21cd0":"train.drop(\"Cabin\",axis=True,inplace=True)\ntrain.drop(\"Name\",axis=True,inplace=True)","96c58c2c":"train.dropna(inplace=True)","1a805ccb":"train['Sex'].replace({'male':0,'female':1},inplace=True)\ntrain['Embarked'].replace({'S':1,'C':2,'Q':3},inplace=True)","5e57bb1b":"train.drop([\"Ticket\",\"PassengerId\",\"Fare\"],axis=1,inplace=True)","75ff77d5":"train","54ee0ff4":"test['Sex'].replace({'male':0,'female':1},inplace=True)\ntest['Embarked'].replace({'S':1,'C':2,'Q':3},inplace=True)","846b0165":"test['Title'] = test['Name'].apply(split_it)","3f143a77":"test.drop(['PassengerId','Name','Ticket','Cabin','Fare'],axis=1,inplace=True)","c039d0e4":"test","1d8135db":"train[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","a6af4af0":"test.drop([\"Title\"],axis=1,inplace=True)\ntrain.drop([\"Title\"],axis=1,inplace=True)","049dd371":"test","68955404":"from sklearn.model_selection import train_test_split","22c60664":"X=train.drop(['Survived'],axis='columns')","290941c1":"y=train['Survived']","c0e7e463":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)","85521960":"print(len(X_train),len(y_train),len(X_test),len(y_test))","c7fa1008":"from sklearn.linear_model import LogisticRegression\nmodel=LogisticRegression()","52d58be4":"model.fit(X_train,y_train)","3c2ee4f1":"predictions=model.predict(X_test)","a97d2df9":"from sklearn.metrics import accuracy_score","27e2c84f":"print(accuracy_score(y_test, predictions))","9b9a370a":"from sklearn.ensemble import RandomForestClassifier\nmodel_2=RandomForestClassifier()","894ab26e":"model_2.fit(X_train,y_train)","28fee250":"predictions_2=model_2.predict(X_test)","97c91cfe":"print(accuracy_score(y_test, predictions_2))","236416bb":"from sklearn import tree\nmodel_3=tree.DecisionTreeClassifier()\nmodel_3.fit(X_train,y_train)","def05ef4":"predictions_3=model_3.predict(X_test)\nprint(accuracy_score(y_test, predictions_3))","d6b80dff":"model.fit(X,y)","c80791c5":"pred=model.predict(test)","a53f9f6e":"submission=pd.DataFrame({\"PassengerId\": gender_submission[\"PassengerId\"],\"Survived\":pred})","f59488cc":"submission","1f5143c7":"submission.to_csv('submission.csv',index=False)","8ec1c98d":"The above bar plot shows that most passengers travelling boarded from Southampton","a1738c01":"# **TRAIN DATA**","6d5ddaf7":"The above bar plot shows that on using value_counts() method we can see that passengers travelling more in number were males(0).","177c4a80":"**LOGISTIC REGRESSION**","556ca6ec":"The above pie plot shows that on using value_counts() method we can see that 59.6% didn't passengers survived while 40.4% passengers survived. ","219b8c6b":"The above bar plot shows that most passengers travelling were not having much Sibling\/Spouse relation.","357e14b5":"Plot showing that most of the passengers who died belongs between the age group 16 to 33 years. ","f6dfb380":"The above bar plot shows that most passengers travelling were not having much Parents\/children relation.","7e151e49":"Plot showing that passengers died most were from 3rd Class.","68f6e6cb":"# **DATA CLEANING**","ad881de9":"The above bar plot shows that on using value_counts() method we can see that passengers prefered to travel using 3rd Pclass ticket.","2dd522d0":"# **MODEL SELECTION**","fc632142":"**DECISION TREE CLASSIFIER**","3e1e158d":"# Analyzing and Visualising Data ","88c77f2b":"**Split Data**","ea31d951":"* The above plot shows that in each and every class boarding done most was from Southampton.\n* Also most of the passengers travelled in 3rd class","8216404d":"* The above plot shows that in each and every class males travelling were more.\n* Also most of the passengers travelled in 3rd class ","a76e01d1":"**RANDOM FOREST CLASSIFICATION**","a67f037b":"Plot showing that passengers died mostly were not having parent\/children between them.","d38f101e":"Plot showing that passengers died most were males.","ffb024d7":"# **TEST**"}}