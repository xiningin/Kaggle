{"cell_type":{"81d28bde":"code","61c85054":"code","01137681":"code","9ffd8db2":"code","1f65636f":"code","5f32e536":"code","7f9103cc":"markdown"},"source":{"81d28bde":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nfrom sklearn import datasets, linear_model\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.manifold import TSNE\n\n%matplotlib inline\n\ndata_frame = pd.read_csv(\"..\/input\/data.csv\")\ndata_frame = data_frame.drop(\"Unnamed: 0\", axis=\"columns\")\ndata_frame.head(50)","61c85054":"x = data_frame[\"danceability\"].values\ny = data_frame[\"valence\"].values\n\nx = x.reshape(x.shape[0], 1)\ny = y.reshape(y.shape[0], 1)\n\nregr = linear_model.LinearRegression()\nregr.fit(x, y)\n\nfig = plt.figure(figsize=(6, 6))\nfig.suptitle(\"Correlation between danceability and song mood\")\n\nax = plt.subplot(1, 1, 1)\nax.scatter(x, y, alpha=0.5)\nax.plot(x, regr.predict(x), color=\"red\", linewidth=3)\nplt.xticks(())\nplt.yticks(())\n\nax.xaxis.set_major_locator(ticker.MultipleLocator(0.1))\nax.xaxis.set_minor_locator(ticker.MultipleLocator(0.02))\n\nax.yaxis.set_major_locator(ticker.MultipleLocator(0.1))\nax.yaxis.set_minor_locator(ticker.MultipleLocator(0.02))\n\nplt.xlabel(\"danceability\")\nplt.ylabel(\"valence\")\n\nplt.show()","01137681":"x = \"danceability\"\ny = \"valence\"\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=False, sharex=False, figsize=(10, 5))\nfig.suptitle(\"Histograms\")\nh = ax2.hist2d(data_frame[x], data_frame[y], bins=20)\nax1.hist(data_frame[\"energy\"])\n\nax2.set_xlabel(x)\nax2.set_ylabel(y)\n\nax1.set_xlabel(\"energy\")\n\nplt.colorbar(h[3], ax=ax2)\n\nplt.show()","9ffd8db2":"chosen = [\"energy\", \"liveness\", \"tempo\", \"valence\", \"loudness\", \"speechiness\", \"acousticness\", \"danceability\", \"instrumentalness\"]\ntext1 = data_frame[\"artist\"] + \" - \" + data_frame[\"song_title\"]\ntext2 = text1.values\n\n# X = data_frame.drop(droppable, axis=1).values\nX = data_frame[chosen].values\ny = data_frame[\"danceability\"].values\n\nmin_max_scaler = MinMaxScaler()\nX = min_max_scaler.fit_transform(X)\n\npca = PCA(n_components=3)\npca.fit(X)\n\nX = pca.transform(X)\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\ntrace = go.Scatter3d(\n    x=X[:,0],\n    y=X[:,1],\n    z=X[:,2],\n    text=text2,\n    mode=\"markers\",\n    marker=dict(\n        size=8,\n        color=y\n    )\n)\n\nfig = go.Figure(data=[trace])\npy.iplot(fig, filename=\"test-graph\")","1f65636f":"chosen = [\"energy\", \"liveness\", \"tempo\", \"valence\"]\ntext1 = data_frame[\"artist\"] + \" - \" + data_frame[\"song_title\"]\ntext2 = text1.values\n\n# X = data_frame.drop(droppable, axis=1).values\nX = data_frame[chosen].values\ny = data_frame[\"loudness\"].values\n\nmin_max_scaler = MinMaxScaler()\nX = min_max_scaler.fit_transform(X)\n\npca = PCA(n_components=2)\npca.fit(X)\n\nX = pca.transform(X)\n\nfig = {\n    \"data\": [\n        {\n            \"x\": X[:, 0],\n            \"y\": X[:, 1],\n            \"text\": text2,\n            \"mode\": \"markers\",\n            \"marker\": {\"size\": \"8\", \"color\": y}\n        }\n    ],\n    \"layout\": {\n        \"xaxis\": {\"title\": \"How hard is this to dance to?\"},\n        \"yaxis\": {\"title\": \"How metal is this?\"}\n    }\n}\n\npy.iplot(fig, filename=\"test-graph2\")","5f32e536":"import time\n\nchosen = [\"energy\", \"liveness\", \"tempo\", \"valence\", \"loudness\",\n          \"speechiness\", \"acousticness\", \"danceability\", \"instrumentalness\"]\n\nX = data_frame[chosen].values\ny = data_frame[\"loudness\"].values\n\nmin_max_scaler = MinMaxScaler()\nX = min_max_scaler.fit_transform(X)\n\ntime_start = time.time()\ntsne = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=300)\ntsne_results = tsne.fit_transform(X)\n\nprint('t-SNE done! Time elapsed: {} seconds'.format(time.time()-time_start))\n\nfig = {\n    \"data\": [\n        {\n            \"x\": tsne_results[:, 0],\n            \"y\": tsne_results[:, 1],\n            \"text\": text2,\n            \"mode\": \"markers\",\n            \"marker\": {\"size\": \"8\", \"color\": y}\n        }\n    ],\n    \"layout\": {\n        \"xaxis\": {\"title\": \"x-tsne\"},\n        \"yaxis\": {\"title\": \"y-tsne\"}\n    }\n}\n\npy.iplot(fig, filename=\"test-graph2\")","7f9103cc":"Spotify music analysis"}}