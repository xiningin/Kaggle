{"cell_type":{"79d1c70e":"code","47fd5078":"code","a2cb9d5a":"code","2c0e1f2c":"code","0e78fdaf":"code","af7b0b7e":"code","2eda0d80":"code","5b21e0db":"code","a400567a":"code","e050c67e":"code","fe1b282d":"code","768d18ae":"code","817913f4":"code","b8a941df":"code","7a47ac99":"code","2747824f":"code","466ed4ee":"code","4542d1c3":"code","3c64a636":"code","7362f806":"code","ad815f42":"code","be70b0c4":"code","cc8f323b":"code","7e6027c7":"code","adcd88aa":"code","30e6c9bf":"code","747e20c3":"code","391a6571":"code","3a93879e":"code","c3349b2f":"code","42b2e0f6":"code","cd98b4f8":"code","1d522534":"code","700beb3c":"markdown","17fc6634":"markdown","c0c5b823":"markdown","d5c81c49":"markdown","bbc7bbaa":"markdown","4f02a360":"markdown","2e87f188":"markdown","ddf7e34d":"markdown","45158928":"markdown"},"source":{"79d1c70e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","47fd5078":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nimport sklearn.metrics as metrics","a2cb9d5a":"df= pd.read_csv(\"\/kaggle\/input\/pizza-price-prediction\/pizza_v2.csv\")\ndf.head()","2c0e1f2c":"df.isnull().sum()","0e78fdaf":"df.describe()","af7b0b7e":"df.shape","2eda0d80":"df.info()","5b21e0db":"df.head()","a400567a":"df['price_rupiah'] = df['price_rupiah'].apply(lambda x : x.replace(\"Rp\",\"\").replace(\",\",\"\"))\ndf['diameter'] = df['diameter'].apply(lambda x : x.replace(\" inch\",\"\"))","e050c67e":"df.head()","fe1b282d":"df['price_rupiah'] = df['price_rupiah'].astype(float)\ndf['diameter'] = df['diameter'].astype(float)","768d18ae":"df.info()","817913f4":"df['company'].unique()","b8a941df":"df['topping'].unique()","7a47ac99":"df['variant'].unique()","2747824f":"df['size'].unique()","466ed4ee":"df['extra_sauce'].unique()","4542d1c3":"df['extra_cheese'].unique()","3c64a636":"df['extra_mushrooms'].unique()","7362f806":"en = LabelEncoder()\ncatCols = ['company','topping','variant','size','extra_sauce','extra_cheese','extra_mushrooms']\nfor cols in catCols:\n    df[cols] = en.fit_transform(df[cols])","ad815f42":"df.head()","be70b0c4":"df.info()","cc8f323b":"Y=df[\"price_rupiah\"]\nX=df.drop(\"price_rupiah\",axis=1)","7e6027c7":"X.head()","adcd88aa":"Y.head()","30e6c9bf":"Y=pd.DataFrame(Y)\nY.head()","747e20c3":"X_train,X_test,Y_train,Y_test=train_test_split(X,Y,train_size=0.8,test_size=0.2,random_state=0)","391a6571":"X_train.head()","3a93879e":"Y_train.head()","c3349b2f":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\n# Define the model\nmodel = XGBRegressor(n_estimators=1000, learning_rate=0.09) \n\n# Fit the model\nmodel.fit(X_train, Y_train) \n\n# Get predictions\npredictions = model.predict(X_test) \n\n# Calculate MAE\nmae = mean_absolute_error(predictions, Y_test)\nprint(\"Mean Absolute Error:\" , mae)\n\n#Calculating R2\nr2 =  metrics.r2_score(Y_test, predictions)\nprint(\"R2 score :\", r2)","42b2e0f6":"predictions=pd.DataFrame(predictions)","cd98b4f8":"predictions.head()","1d522534":"# Define the model\nmodel2 = XGBRegressor(n_estimators=1000, learning_rate=0.01,max_depth=10) \n\n# Fit the model\nmodel2.fit(X_train, Y_train) \n\n# Get predictions\npredictions2 = model2.predict(X_test) \n\n# Calculate MAE\nmae2 = mean_absolute_error(predictions2, Y_test)\nprint(\"Mean Absolute Error:\" , mae2)\n\n#Calculating R2\nr22 =  metrics.r2_score(Y_test, predictions2)\nprint(\"R2 score :\", r22)","700beb3c":"### Reading The Data","17fc6634":"### Encoding Categorical Features","c0c5b823":"### XGB Regressor","d5c81c49":"### Checking Category Feature In Each category ","bbc7bbaa":"### Splitting The Data","4f02a360":"### Convert Object Data to Numerical","2e87f188":"### Preparing The Dataset","ddf7e34d":"### Train-Test Split","45158928":"### Imroved XGB Boost Version"}}