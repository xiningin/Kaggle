{"cell_type":{"238ff355":"code","aa5e6391":"code","9412bf5c":"code","9096e05a":"code","b8c6e220":"code","efcfe7d5":"code","0483370f":"code","45f5d910":"code","76f95832":"code","40e15c1c":"code","5ef0238e":"code","49fad04b":"code","9adfd329":"code","adbc0925":"code","f620c4a1":"code","5690a122":"code","cb4cce1e":"code","f512bb3d":"code","3d2becc0":"code","4cf0aae4":"code","a6b6efec":"code","29c6df30":"code","c1b769f8":"code","e9402e42":"code","7fd8f2f2":"code","6d84beea":"code","e7db5a8a":"code","d74b141f":"code","9c757452":"code","897448db":"code","7588c9e3":"code","547d5d2b":"code","e1612715":"code","baf24fbb":"code","ff65111e":"code","ac1d74e1":"code","72b0a81e":"code","912184b3":"code","918e3902":"code","fdc30e12":"markdown","1634f1d4":"markdown","2da7a585":"markdown","d9f3e173":"markdown","5fee5831":"markdown","ecb1d19d":"markdown","c2827c36":"markdown","1fa7bf71":"markdown","296738dd":"markdown","37d875ee":"markdown","652eb706":"markdown","33a0cfdc":"markdown","e9c5cda0":"markdown","5465e387":"markdown","87961206":"markdown","fdeeae0e":"markdown","d77e5241":"markdown","cae4149f":"markdown","d22386fe":"markdown","70e305ec":"markdown","31c6ae9f":"markdown","b232c4ff":"markdown","31db6c9d":"markdown","8ded2611":"markdown","c1f40b81":"markdown","77b72f04":"markdown","f2b091d1":"markdown","faa29e45":"markdown","24decb3d":"markdown","2d1239b3":"markdown","2b4d371c":"markdown","d9caa861":"markdown","ac3e3581":"markdown"},"source":{"238ff355":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# What do we say to python warnings? NOT TODAY\nimport warnings\nwarnings.filterwarnings(\"ignore\")","aa5e6391":"# I like the style \"ggplot\"\nplt.style.use('ggplot')","9412bf5c":"pal = \"Set2\"","9096e05a":"dtypes = {\"space_id\":\"category\",\n\"building_name\":\"str\",\n\"air_vel\":\"category\",\n\"body_presence\":\"bool\",\n\"change\":\"category\",\n\"clothing\":\"category\",\n\"comfort\":\"category\",\n\"indoor\/outdoor\":\"category\",\n\"met\":\"category\",\n\"thermal\":\"category\",\n\"user_id\":\"str\"}","b8c6e220":"ts = pd.read_csv(\"\/kaggle\/input\/longitudinal-personal-thermal-comfort-preferences\/enth_tabular_merged.csv\", parse_dates=[\"time\"], dtype=dtypes)","efcfe7d5":"ts.info()","0483370f":"ts.head()","45f5d910":"# Let's drop \"comfort\", we are not going to use id\nts.drop(\"comfort\", axis=1, inplace=True)","76f95832":"# Thermal\nts.thermal.cat.rename_categories({'9.0': 'Warmer', '10.0': 'No Change', '11.0': 'Cooler'}, inplace=True)\nts.thermal.cat.reorder_categories([\"Cooler\",\"No Change\",\"Warmer\"], inplace=True)\n\n# Clothing\nts.clothing.cat.rename_categories({'8.0':'Very Light','9.0': 'Light', '10.0': 'Medium', '11.0': 'Heavy'}, inplace=True)\nts.clothing.cat.reorder_categories([\"Very Light\",\"Light\",\"Medium\",\"Heavy\"], inplace=True)\n\n# Air vel\nts.air_vel.cat.rename_categories({ \"10.0\": \"Not Perceived\", \"11.0\": \"Perceived\"}, inplace=True)\nts.air_vel.cat.reorder_categories([\"Not Perceived\",\"Perceived\"], inplace=True)\n\n# Change\nts.change.cat.rename_categories({\"11.0\": \"Yes Change\", \"10.0\": \"No Change\"}, inplace=True)\nts.change.cat.reorder_categories([\"Yes Change\",\"No Change\"], inplace=True)\n\n# indoor outdoor\nts[\"indoor\/outdoor\"].cat.rename_categories({'9.0': \"Outdoor\", \"11.0\": \"Indoor\"}, inplace=True)\nts[\"indoor\/outdoor\"].cat.reorder_categories([\"Indoor\",\"Outdoor\"], inplace=True)\n\n# met\nts.met.cat.rename_categories({\"8.0\": \"resting\", \"9.0\": \"sitting\", \"10.0\": \"standing\", \"11.0\": \"exercising\"}, inplace=True)\nts.met.cat.reorder_categories([\"resting\",\"sitting\",\"standing\", \"exercising\"], inplace=True)","40e15c1c":"# Let's include the data type \"category\" (you can pass a list with more than one type)\nts_cat = ts.select_dtypes(include=\"category\")\n# check it out\nts_cat.head()","5ef0238e":"sns.countplot(data=ts_cat, x=\"clothing\")","49fad04b":"sns.countplot(data=ts_cat, y=\"clothing\")","9adfd329":"sns.countplot(data=ts_cat, y=\"clothing\", hue=\"thermal\")","adbc0925":"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10,10))","f620c4a1":"axes.shape","5690a122":"axes.flatten().shape","cb4cce1e":"# Define the number of subplots you want. Here, 2x3\n# You can also edit the figure size\nfig, axes = plt.subplots(2, 3, figsize=(20,16))\n# Flatten your axes array\naxes = axes.flatten()\n\n# And create each of your subplots\n\n# 1. Select the axis\nax0 = axes[0]\n# 2. You have to add a parameter to your figure: \"ax\", to indicate where to plot it\n# 3. If you want a different color palette edit the parameter \"palette\"\nfig0 = sns.countplot(data=ts_cat, y=\"space_id\", hue=\"thermal\", ax=ax0, palette=pal)\n\n# And is t he same for every one, just change the variable you are plotting in the parameter \"y\"\n# and the \"hue\" variable there\n# and don't forget to change the \"ax\"\nax1 = axes[1]\nfig1 = sns.countplot(data=ts_cat, y=\"air_vel\", hue=\"thermal\", ax=ax1, palette=pal)\n\nax2 = axes[2]\nfig2 = sns.countplot(data=ts_cat, y=\"change\", hue=\"thermal\", ax=ax2, palette=pal)\n\nax3 = axes[3]\nfig3 = sns.countplot(data=ts_cat, y=\"clothing\", hue=\"thermal\", ax=ax3, palette=pal)\n\nax4 = axes[4]\nfig4 = sns.countplot(data=ts_cat, y=\"indoor\/outdoor\", hue=\"thermal\", ax=ax4, palette=pal)\n\nax5 = axes[5]\nfig5 = sns.countplot(data=ts_cat, y=\"met\", hue=\"thermal\", ax=ax5, palette=pal)\n\n# This is to avoid overlaping\nplt.tight_layout()","f512bb3d":"# First, create the FacetGrid, selecting your grouping columns\n# for column (\"col\") and rows (\"row\")\n# You can choose only one of them\ng = sns.FacetGrid(ts_cat, col=\"thermal\", row=\"clothing\", size=4)\n\n# Then, you \"map\" that grid\n# here you specify the type of plot you want (countplot in this case)\n# and the feature to plot (clothing)\ng.map(sns.countplot, \"air_vel\", palette=pal)","3d2becc0":"# Notice that here we are including two types: float and int\nts_cont = ts.select_dtypes(include=[\"float\", \"int\"])\n# Let's add our columns of interest\nts_cont[\"thermal\"] = ts.thermal\nts_cont[\"clothing\"] = ts.clothing\nts_cont.head()","4cf0aae4":"sns.histplot(data=ts_cont, x=\"temp_zone\")","a6b6efec":"sns.histplot(data=ts_cont, x=\"temp_zone\", hue=\"thermal\")","29c6df30":"sns.boxplot(data=ts_cont, x=\"temp_zone\", y=\"thermal\")","c1b769f8":"cols = ['heartrate', 'response_speed', 'resting_heartrate', 'nb_temp',\n       'skin_temp',\n       'co2_indoor', 'voc_indoor', 'pm25_indoor', 'noise_indoor',\n       '0.3um_count_outdoor', '0.5um_count_outdoor', '1.0um_count_outdoor',\n       '10.0um_count_outdoor', '2.5um_count_outdoor', '5.0um_count_outdoor',\n       'humidity_outdoor', 'pm1.0_outdoor', 'pm10.0_outdoor', 'pm2.5_outdoor',\n       'pressure_outdoor', 'temp_outdoor', 'temp_zone', 'humidity_zone']","e9402e42":"for i, letter in enumerate([\"a\",\"b\",\"c\"]):\n    print(i, letter)","7fd8f2f2":"# Define your figure and axes\nfig, axes = plt.subplots(6, 4, figsize=(15,12))\n# Flatten your axes\naxes = axes.flatten()\n\n# here is the loop, we are using the index (i) to select the axis\n# and the column (col) to plot the bloxplot\nfor i, col in enumerate(cols):\n    ax = axes[i]\n    plot1 = sns.boxplot(data=ts_cont, x=col, y=\"thermal\", ax=ax, palette=pal)\n    \n# Remove last axis\naxes[-1].axis('off')\n\n# This will avoid the subplots to overlap\nplt.tight_layout()","6d84beea":"# First, create the FacetGrid, selecting your grouping columns\n# for column (\"col\") and rows (\"row\")\n# You can choose only one of them\ng = sns.FacetGrid(ts_cont, col=\"thermal\", row=\"clothing\", size=4)\n\n# Then, you \"map\" that grid\n# here you specify the type of plot you want (countplot in this case)\n# and the feature to plot (clothing)\ng.map(sns.boxplot, \"temp_zone\", palette=pal)","e7db5a8a":"temp = ts[[\"time\",\"space_id\",\"temp_zone\",\"thermal\"]]\ntemp.head()","d74b141f":"# The date\ntemp.time.dt.date","9c757452":"# the hour\ntemp.time.dt.hour","897448db":"# The month\ntemp.time.dt.month","7588c9e3":"# the minute\ntemp.time.dt.minute","547d5d2b":"# the weekday (from 0 to 6)\ntemp.time.dt.weekday","e1612715":"temp.groupby(temp.time.dt.hour).mean()","baf24fbb":"#remember to reset the index to have the time as a feature (and not an index)\nhourly = temp.groupby([temp.time.dt.hour, \"thermal\"]).mean().reset_index()\nhourly","ff65111e":"sns.lineplot(data=hourly, x=\"time\", y=\"temp_zone\", hue=\"thermal\", palette=pal)","ac1d74e1":"fig, axes = plt.subplots(2, 3, figsize=(16,10))\naxes = axes.flatten()\n\nax0 = axes[0]\nhourly_comfort = temp.groupby([temp.time.dt.hour, \"thermal\"]).mean().reset_index()\nfig0 = sns.lineplot(data=hourly_comfort, x=\"time\", y=\"temp_zone\", hue=\"thermal\", palette=pal, ax=ax0)\n\nax1 = axes[1]\ndately_comfort = temp.groupby([temp.time.dt.date, \"thermal\"]).mean().reset_index()\nfig1 = sns.lineplot(data=dately_comfort, x=\"time\", y=\"temp_zone\", hue=\"thermal\", palette=pal, ax=ax1)\nax1.tick_params(axis='x', rotation=45) # to avoid overlapping of dates labels\n\nax2 = axes[2]\nweekday_comfort = temp.groupby([temp.time.dt.weekday, \"thermal\"]).mean().reset_index()\nfig2 = sns.lineplot(data=weekday_comfort, x=\"time\", y=\"temp_zone\", hue=\"thermal\", palette=pal, ax=ax2)\n\nax3 = axes[3]\nhourly_thermal = temp.groupby([temp.time.dt.hour, \"thermal\"]).mean().reset_index()\nfig3 = sns.lineplot(data=hourly_thermal, x=\"time\", y=\"temp_zone\", hue=\"thermal\", palette=pal, ax=ax3)\n\nax4 = axes[4]\ndately_thermal = temp.groupby([temp.time.dt.date, \"thermal\"]).mean().reset_index()\nfig4 = sns.lineplot(data=dately_thermal, x=\"time\", y=\"temp_zone\", hue=\"thermal\", palette=pal, ax=ax4)\nax4.tick_params(axis='x', rotation=45) # to avoid overlapping of dates labels\n\nax5 = axes[5]\nweekday_thermal = temp.groupby([temp.time.dt.weekday, \"thermal\"]).mean().reset_index()\nfig5 = sns.lineplot(data=weekday_thermal, x=\"time\", y=\"temp_zone\", hue=\"thermal\", palette=pal, ax=ax5)\n\nplt.tight_layout()","72b0a81e":"correlation_matrix = ts_cont.corr(method=\"pearson\")","912184b3":"correlation_matrix","918e3902":"sns.heatmap(correlation_matrix, cmap=\"coolwarm\", vmin=-1, vmax=1)","fdc30e12":"If you want to access them you have to use the coordinates like this:\n    \n| row\/col | 0     | 1     |\n|---------|-------|-------|\n| 0       | [0,0] | [0,1] |\n| 1       | [1,0] | [1,1] |\n\nBut if you don't want to deal with arrays you can use the method `flatten`, this will collapse the array to a one dimentional vector of 4 elements:","1634f1d4":"# Continuous columns\nNow is time for the continuous columns. We can select them like before:","2da7a585":"# Correlation\nAnother important exploratory technique, specially if you are about to train a machine learning model, is to check the correlation between your continuos features. First step is to create the correlation matrix: this is just a matrix with the correlation value in each feature-feature intersection. Several correlation coefficients exist to quantify it and the methods are available in more than one library. As we are using pandas, we will use the [correlation method](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.corr.html) that comes with it:\n","d9f3e173":"This is great to show all the features at a glance in relation to one `hue` column. But what if we wanted to show in relation to TWO columns at the same time? for example, to `clothing` and `thermal` together. Yes, there's a plot for that! The [FacetGrid](https:\/\/seaborn.pydata.org\/generated\/seaborn.FacetGrid.html) plot can show a plot grouped by a feature in the columns and another feature in the row. In our case, we have 3 categories for the `thermal` class and 4 for the `clothing` class:\n\n| clothing\/thermal | Cooler                 | No change                 | Warmer                 |\n|------------------|------------------------|---------------------------|------------------------|\n| Very light       | t=Cooler, c=Very Light | t=No Change, c=Very Light | t=Warmer, =Very Light  |\n| Light            | t=Cooler, c= Light     | t=No Change, c=Light      | t=Warmer, c=Light      |\n| Medium           | t=Cooler, c=Medium     | t=No Change, c=Medium     | t=Warmer, c=Medium     |\n| Heavy            | t=Cooler, c=Heavy      | t=No Change, c=Heavy      | t=Warmer, c=Heavy      |\n\nOf course, this has to be done for only one feature. Check it out, looks messy but it's really easy:","5fee5831":"## Load data\nAs you probably have seen in the data set description, there is also a [GitHub a repository](https:\/\/github.com\/buds-lab\/longitudinal-personal-thermal-comfort). There you can find a table with the data type of each column.\n\nHere we are creating a dictionary with some of the columns and the correct data type. In general when reading a file, category features are not recognized as categorical data (if you are lucky you'll get an integer). But you can pass a parameter when reading the file with those data types. This step is not mandatory, you can always convert the data types after reading the file (if is needed), but doing it now will make the plotting easier. ","ecb1d19d":"And again, a FacetGrid. Let's check the `skin_temp` column related to `clothing` and `thermal` features:","c2827c36":"# Temporal behaviour\nWhen we are working with temporal data is useful to check how the feature behave during time. Let's try some [line plots](https:\/\/seaborn.pydata.org\/generated\/seaborn.lineplot.html). We will we focusing on how the feature `temp_zone` behave on time. Let's select the features we want first:","1fa7bf71":"And that's all if you want only one plot. But when there are a lot of features, like here, is helpful to have a grid with several subplots to show them all at a glance. For this, we can make use of a [matplotlib feature named `subplots`](https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.pyplot.subplots.html). This method will create an array of axis of the desired size (we'll fill them with plots laters). For example, let's create an empty grid of 2x2:","296738dd":"Let's say we want to plot the behaviour of our feature **by hour**. Clearly, we don't have readings by hour and we don't have only one space, we need to sumarize it somehow. For this, we could group our data by hour calculating the mean. As our column `time` is a datetime object (remember that parameter `parse_date` when reading the data? now is when comes useful) we can access the timeframe we want. For example:","37d875ee":"This returns a figure (which is the one shown above) and a list, `axes`. These are the coordinates for the axes allocated in an array of 2x2:","652eb706":"To visualize correlation, [heatmaps](https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html) are usually the most suitable plots. This plot will show a grid with different color intensity based on the value of our correlation coefficient. As the value moves between -1 and 1 we can specify those values to make the color scale fit those limits:","33a0cfdc":"Let's check the plot!","e9c5cda0":"Ann this is the matrix obtained:","5465e387":"# Categorical columns\nLet's start with the categorical features. [The pandas method `select_dtypes`](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.select_dtypes.html) is designed to filter the columns of the desired type(s).","87961206":"And finally, we can calculate several temporal features and plot them nicely in a grid like we learned in the previous section.","fdeeae0e":"But we want to study the behaviour by the target data:","d77e5241":"And now you have to loop over `cols` list and plot it. We are going to use the method enumerate, which in addition to looping over the elements of your list it adds the index as parameter: this index will be the axis number. Like this:","cae4149f":"## Import libraries","d22386fe":"Ok, time to fill our figure with subplots! Make sure to read the comment's in the code, is and step by step guide.","70e305ec":"Just selecting your data in the parameter `data` and the column you want to count in the parameter `x` makes the work. What if you want the bars to be horizontal? instead of `x` call the parameter `y`:","31c6ae9f":"Ok, but this is the count of the whole column. What if I want to count them separately by each class of `thermal` feature? That's something that could be predicted, is useful to visualize the difference among classes. Luckily, there's a parameter for that named `hue`: it will assing a different color to each group in the variable passed to that parameter. Check it out, is easier with a figure:","b232c4ff":"And let's rename and reorder the categories with the methods [*rename_categories*](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.Series.cat.rename_categories.html) and [*reorder_categories*](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.CategoricalIndex.reorder_categories.html). This is just to show the labels (and not the numbers) in the plots with the order we want.","31db6c9d":"# *Enth* time series exploratory data analysis\nIn this notebook we are going to explore the *Enth* time series data. Basic python knowledge is needed and being familiar with pandas and data visualization will help a lot. I suggest to check these courses first:\n\n- [Python](https:\/\/www.kaggle.com\/learn\/python)\n- [Pandas](https:\/\/www.kaggle.com\/learn\/pandas)\n- [Data visualization](https:\/\/www.kaggle.com\/learn\/data-visualization)\n\nWe are going to use [Seaborn](https:\/\/seaborn.pydata.org\/), a library based on [Matplotlib](https:\/\/matplotlib.org\/). Seaborn plot nicer graphics with a simpler sintax handling the same elements defined in matplotlib. You will find in this notebook links to both documentations.\n\n# Content\n\n- [Customization](#Customization)\n- [Load data](#Load-data)\n- [Categorical columns](#Categorical-columns)\n- [Continuous columns](#Continuous-columns)\n- [Temporal behaviour](#Temporal-behaviour)\n- [Correlation](#Correlation)","8ded2611":"We have a lot of columns with information about each user, some of them are categorical features and other continuous. Take some time to learn about the data (you can find it in the [data set description](https:\/\/www.kaggle.com\/claytonmiller\/longitudinal-personal-thermal-comfort-preferences) and in the [Github repository](https:\/\/github.com\/buds-lab\/longitudinal-personal-thermal-comfort)). Notice that the `comfort` and `thermal` features are the ones that could be used as target in a machine learning model: you can train to predict wether a person would be comfortable based on personal and enviromental data. We will be exploring the features in relation to the target `thermal`.","c1f40b81":"# Summary\nIn this notebook we covered the following subjects:\n\n- How to choose a [matplotlib stylesheet](https:\/\/matplotlib.org\/stable\/gallery\/style_sheets\/style_sheets_reference.html)\n- How to choose a [matplotlib palette](https:\/\/matplotlib.org\/stable\/tutorials\/colors\/colormaps.html)\n- [Matplotlib subplots](https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.pyplot.subplots.html)\n- [Seaborn countplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.countplot.html)\n- [Seaborn histogram](https:\/\/seaborn.pydata.org\/generated\/seaborn.histplot.html#seaborn.histplot)\n- [Seaborn boxplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.boxplot.html)\n- [Seaborn FacetGrid](https:\/\/seaborn.pydata.org\/generated\/seaborn.FacetGrid.html)\n- [Seaborn heatmaps](https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html)","77b72f04":"## Customization\nThis is an optional step but is nice to know it in case you want to customize your visualizations. Matplotlib offer a los of style sheets you can choose from, you can check them all in [this galery](https:\/\/matplotlib.org\/stable\/gallery\/style_sheets\/style_sheets_reference.html). You can use the default one or select the one you want with this line of code:","f2b091d1":"Another useful tool when customizing is the color palette. [These all are the available palettes](https:\/\/matplotlib.org\/stable\/tutorials\/colors\/colormaps.html). You can also create your own color palette but that part is not covered in this notebook (but is easy to google ;) ).\n\nHere I will allocate the palette I like in a variable; this is not mandatory, you can explicitly write the name of the palette in each plot (but I always write the name wrong, so is easier for me to have a variable with an easy name).","faa29e45":"What about a boxplot? Here we don't use the parameter `hue`, we use `x` and `y`.","24decb3d":"There are [a lot of plots you can choose for visualizing categorical data](https:\/\/seaborn.pydata.org\/tutorial\/categorical.html) but in this section we'll focus on [countplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.countplot.html#seaborn.countplot). This plot will count the rows that belong to each category and will return a barplot. Let's plot a single figure:","2d1239b3":"Using this, we could group our data by hour,calculating the mean, like this:","2b4d371c":"Let's plot some features in a grid of subplots. Have you seen how before we repeated the code for each subplot? We can save us some lines of coding using a loop. First, select the columns you want to plot:","d9caa861":"For the continuous variables we can visualize the distribution. There are [several options for this](https:\/\/seaborn.pydata.org\/tutorial\/distributions.html) but we will be focusing on the histograms and bloxplots. Let's plot the feature `temp_zone`:","ac3e3581":"And like before, the parameter `hue` can be used:"}}