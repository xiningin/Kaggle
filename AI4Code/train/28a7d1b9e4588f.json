{"cell_type":{"06da318b":"code","7f02a53a":"code","89092158":"code","b91c1b6d":"code","30b1af90":"code","f0fd4151":"code","65579c6d":"code","36bbbc25":"code","81d7dbc6":"code","25e04e98":"code","94485a92":"code","3faa0129":"code","b6d40987":"code","b926efd2":"code","8fcac258":"code","01e58b34":"code","c0fb2fa3":"code","d593c9be":"code","c15894dc":"code","d693a5cb":"code","1d10ca5f":"code","919f0687":"code","937c05c1":"markdown","8b91666f":"markdown","97977a3f":"markdown","a885f51f":"markdown","a72b56df":"markdown","6a7a6ec4":"markdown","715f4f49":"markdown","ca34f339":"markdown","7eebece5":"markdown","c0274709":"markdown","abe1c7be":"markdown","be49b03f":"markdown","3d2dbb69":"markdown","77eb442e":"markdown","0ca0935b":"markdown","bd34ac26":"markdown"},"source":{"06da318b":"import pandas as pd \nimport numpy as np\nfrom sklearn.model_selection import StratifiedKFold, RandomizedSearchCV\nfrom sklearn.metrics import make_scorer, roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nimport matplotlib.pyplot as plt","7f02a53a":"train = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/train.csv')\ntest = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/test.csv')","89092158":"train.head()","b91c1b6d":"test.head()","30b1af90":"percent_missing = train.isnull().sum() * 100 \/ len(train)\nmissing_vals_df = pd.DataFrame({'Percent Missing': percent_missing})\nprint(missing_vals_df)","f0fd4151":"train = train.drop(columns = ['image_name', 'patient_id','benign_malignant','diagnosis'])\ntrain.head()","65579c6d":"train.info()","36bbbc25":"cat_features = ['sex','anatom_site_general_challenge']\nprint(\"Categorical features:\", cat_features)\n\nnum_features = ['age_approx','target']\nprint(\"Numerical features:\", num_features)","81d7dbc6":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.preprocessing import MinMaxScaler\n\nclass PreprocessTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self, cat_features, num_features):\n        self.cat_features = cat_features\n        self.num_features = num_features\n    \n    def fit(self, X, y=None):\n        return self\n  \n    def transform(self, X, y=None): \n        dataframe = X.copy()\n        for name in self.cat_features:\n            col = pd.Categorical(dataframe[name])\n            dataframe[name] = col.codes\n    \n        # Normalize numerical features\n        scaler = MinMaxScaler()\n        dataframe[self.num_features] = scaler.fit_transform(dataframe[num_features])\n        \n        return dataframe","25e04e98":"# Preprocessing categorical and numerical features\ntrain_processed = PreprocessTransformer(cat_features, num_features).transform(X = train)\n\n# Imputing missing values \ntrain_noNan = pd.DataFrame(SimpleImputer().fit_transform(train_processed))\ntrain_noNan.columns = train_processed.columns\n\ntrain_noNan.head()","94485a92":"percent_missing = train_noNan.isnull().sum() * 100 \/ len(train_noNan)\nmissing_vals_df = pd.DataFrame({'Percent Missing': percent_missing})\nprint(missing_vals_df)","3faa0129":"X_train = train_noNan.copy().drop(columns = ['target'])\ny_train = train_noNan.copy()['target']\n\nX_train.head()","b6d40987":"search_space = [\n  {\n     'max_depth': [10, 20, 30, 40, 50, 60, None],\n     'max_features': ['auto', 'sqrt'],\n     'min_samples_leaf': [1, 2, 4],\n     'min_samples_split': [2, 5, 10],\n     'n_estimators': [200, 400, 600, 800, 1000]\n  }\n]\n\ncv_method = StratifiedKFold(n_splits=5, shuffle = True, random_state=0)\nscoring = {'AUC':make_scorer(roc_auc_score)}","b926efd2":"optimizer = RandomizedSearchCV(\n  estimator = RandomForestClassifier(),\n  param_distributions=search_space,\n  cv=cv_method,\n  scoring=scoring,\n  refit='AUC',\n  return_train_score = True,\n  verbose=1,\n  n_iter = 100,\n  n_jobs = 10, \n)\n\n# Approximately 1 hour run time with GPU assistance\nrf_model = optimizer.fit(X_train, y_train)","8fcac258":"# Display mean AUC score\noptimizer.cv_results_['mean_test_AUC'].mean()","01e58b34":"# Display most important parameters\noptimizer.best_params_","c0fb2fa3":"features = X_train.columns\nimp_dict = {features[i]:optimizer.best_estimator_.feature_importances_[i] for i in range(len(features))}\nimp_dict = sorted(imp_dict.items(), key=lambda x: x[1])\nprint(imp_dict)\n\nplt.bar(*zip(*imp_dict))\nplt.xticks(rotation=\"vertical\")\nplt.show()","d593c9be":"test.head()","c15894dc":"test_copy = test.copy().drop(columns = ['image_name','patient_id'])\n\ncat_features = ['sex','anatom_site_general_challenge']\nnum_features = ['age_approx']\ntest_processed = PreprocessTransformer(cat_features,num_features).transform(X = test_copy)\n\ntest_noNan = pd.DataFrame(SimpleImputer().fit_transform(test_processed))\ntest_noNan.columns = test_processed.columns\n\ntest_processed.head()","d693a5cb":"y_pred = rf_model.predict_proba(test_processed[features])\npd.DataFrame(y_pred).head()","1d10ca5f":"y_pred_malignant = [p[1] for p in y_pred]","919f0687":"submission = pd.DataFrame()\nsubmission['image_name'] = test.image_name.values\nsubmission['target'] = y_pred_malignant\n\nsubmission.to_csv('submission.csv',index = False)\nsubmission.head()","937c05c1":"### Previewing training and testing sets","8b91666f":"### Preprocessing train set","97977a3f":"### Removing non-deterministic features from train set","a885f51f":"## Predicting on test set","a72b56df":"### Determining distribution of missing values in train set","6a7a6ec4":"## Splitting into X (input) and y (output)","715f4f49":"## Fitting random forest classifier to train set","ca34f339":"## Displaying feature importance","7eebece5":"## Hyperparameter adjustment","c0274709":"# Random Forest Classifier","abe1c7be":"# Loading train and test sets","be49b03f":"# Loading packages","3d2dbb69":"### Sectioning into categorical and numerical features","77eb442e":"Codifying categorical variables and normalizing numeric features","0ca0935b":"# Preprocessing","bd34ac26":"### Defining preprocessor"}}