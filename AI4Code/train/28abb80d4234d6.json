{"cell_type":{"0ecbf957":"code","8ebb7cb2":"code","40aa34d3":"code","e7a9efe7":"code","8ca42f2d":"code","47d46466":"code","d10e206f":"code","09644d6f":"code","9451cbd4":"code","1497ff37":"code","ecc1be7a":"code","25da262d":"code","cfa8c025":"markdown","929326ab":"markdown","7a94b4ce":"markdown","f814f832":"markdown","f2fd7542":"markdown","3a4af48b":"markdown","020ad0a8":"markdown","05fded2f":"markdown"},"source":{"0ecbf957":"import numpy as np\nimport pandas as pd","8ebb7cb2":"ass_order = pd.read_csv('\/kaggle\/input\/market-basket-id-ndsc-2020\/association_order.csv')\nrule = pd.read_csv('\/kaggle\/input\/market-basket-id-ndsc-2020\/rules.csv')\n\nprint(ass_order.head())\nprint('The Association order data frame has {} rows and {} columns\\n'.format(ass_order.shape[0], ass_order.shape[1]))\n\nprint(rule.head())\nprint('Rule data frame has {} rows and {} columns\\n'.format(rule.shape[0], rule.shape[1]))","40aa34d3":"def storeToDict(df):\n    dict = {}\n\n    df = df.drop_duplicates()\n    df = df.sort_values(['itemid', 'orderid']).reset_index(drop = True)\n    \n    for i in range(len(df)):\n        currItem = df.loc[i, 'itemid']\n        currOrder = df.loc[i, 'orderid']\n        if currItem in dict:\n            dict[currItem] += [currOrder]\n        else:\n            dict[currItem] = [currOrder]\n\n    return dict","e7a9efe7":"dict = storeToDict(ass_order)","8ca42f2d":"{key:value for (key,value) in [x for x in dict.items()][:6]}","47d46466":"def separateColumn(rule):\n    df = rule.copy()\n    df[['first', 'last']] = df['rule'].str.split(\">\",expand=True)\n    df[['first_A', 'first_B']] = df['first'].str.split(\"&\",expand=True)\n    df[['last_A', 'last_B']] = df['last'].str.split(\"&\",expand=True)\n    df = df.drop(['first', 'last'], axis = 1)\n    \n    return df","d10e206f":"separatedDF = separateColumn(rule)","09644d6f":"separatedDF.loc[5:12]","9451cbd4":"def calculateConfidence(separatedDF, dict):\n    df = separatedDF.copy().reset_index(drop = True)\n    df['confidence'] = 0\n    for i in range(len(df)):\n        no_order_up = 0\n        no_order_bottom = 0\n        A = dict[int(df.loc[i, 'first_A'])]\n        #the first condition is when A > B\n        if df.loc[i, 'first_B'] is None and df.loc[i, 'last_B'] is None:\n            no_order_bottom = len(A)\n            for j in A:\n                B = dict[int(df.loc[i, 'last_A'])]\n                if j in B:\n                    no_order_up += 1 \n        #when A & B > C\n        elif df.loc[i, 'first_B'] is not None:\n            for j in A:\n                B = dict[int(df.loc[i, 'first_B'])]\n                C = dict[int(df.loc[i, 'last_A'])]\n                if j in B:\n                    no_order_bottom += 1 \n                    if j in C:\n                        no_order_up += 1\n        #when A > B & C\n        else:\n            no_order_bottom = len(A)\n            for j in A:\n                B = dict[int(df.loc[i, 'last_A'])]\n                C = dict[int(df.loc[i, 'last_B'])]\n                if j in B:\n                    if j in C:\n                        no_order_up += 1\n        \n        if no_order_bottom == 0:\n            df.loc[i, 'confidence'] = 0\n        else:\n            df.loc[i, 'confidence'] = int(np.floor(no_order_up \/ no_order_bottom * 1000))\n        \n    df = df.drop(['first_A', 'first_B', 'last_A', 'last_B'], axis=1)\n    return df","1497ff37":"output = calculateConfidence(separatedDF, dict)","ecc1be7a":"output","25da262d":"output.to_csv('submission.csv',index=False)","cfa8c025":"## Read Data","929326ab":"Take a look at the dictionary","7a94b4ce":"## Import Library","f814f832":"## Separate 'rule' into 4 column","f2fd7542":"First, import the libray that will be used in the analysis","3a4af48b":"## Calculate the confidence level","020ad0a8":"From the dictionaries whe have made before, we can calculate the confidence level","05fded2f":"## Make a dictionary that store the correspondent orderId for each productId"}}