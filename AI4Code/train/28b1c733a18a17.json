{"cell_type":{"6a63414d":"code","767a11d6":"code","f2b6af4a":"code","598a030b":"code","19f041e9":"code","3bb4aa34":"code","c491cee8":"code","b8f0603f":"code","ba69185a":"code","1aef4505":"code","333c4093":"code","7e02c339":"code","0b1dfb5f":"code","54a0bb49":"code","6588ade0":"code","584c694d":"code","0e9ea493":"code","4f37a023":"code","2281caa9":"code","a16feabe":"code","38e06ce6":"code","74054a00":"code","029ac6bb":"code","1ed749ef":"code","0747196f":"code","297e7e66":"code","2e4dd391":"code","3f2f8d01":"code","a5957658":"code","60973eb8":"code","7c557259":"code","013af7ef":"code","f797d05c":"code","0ba423e6":"code","aa392e40":"code","6cf76b02":"code","b487dbf1":"code","f49e7b05":"code","30f2ff2a":"code","ee6a9217":"code","d1697987":"code","0b60eb02":"code","c131b76f":"code","eca71ae8":"code","f4be761c":"code","ea0d1b01":"code","2a538e5c":"code","c6d98249":"code","f7d36f50":"code","e73fda6e":"code","bd37f736":"code","9ea27e39":"code","7dba33f2":"code","d0b7a872":"code","625f7c70":"code","d462bc84":"code","385a9fba":"code","45c32c50":"code","e3bede5a":"markdown","5f86e2d5":"markdown","4986db13":"markdown","432ed972":"markdown","52e0649e":"markdown","efaf26f3":"markdown","72bfc587":"markdown","7bdc1a7e":"markdown","17c4ad56":"markdown","8c8ec42e":"markdown","634fb717":"markdown","08dd8eae":"markdown","0558d2a9":"markdown","b835e9fc":"markdown","05e43cf8":"markdown","61cd120c":"markdown","77deb726":"markdown","b6f67c73":"markdown","5051dc9d":"markdown","969f3d10":"markdown","e0b8e178":"markdown","ad8d2318":"markdown","26715ec9":"markdown","83584583":"markdown","db2b35eb":"markdown","cf6ef482":"markdown","2c447585":"markdown","2196ad8f":"markdown","dcb983ad":"markdown","c3ac7369":"markdown","85a48b58":"markdown","5ecd9880":"markdown","ce9c028c":"markdown","077b1523":"markdown","1465d830":"markdown","e7db726a":"markdown"},"source":{"6a63414d":"# Import packages\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\npd.set_option('display.max_columns', None)\nwarnings.filterwarnings(\"ignore\")\n\nsns.set(style=\"white\", font_scale=1.2)\n","767a11d6":"# Load dataframes\n\ndf_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv', index_col='Id')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv', index_col='Id')","f2b6af4a":"df_train.head()","598a030b":"df_test.head()","19f041e9":"df_train.describe()","3bb4aa34":"df_train.describe(include='O')","c491cee8":"print('df_train shape:', df_train.shape)\nprint('df_test shape:', df_test.shape)","b8f0603f":"# Function to check missing values in each dataframe\n\ndef check_missing_values(df, df_name):\n    print(f'{df_name} - Missing values:')\n    print('-'*30)\n    columns = df.columns\n\n    for column in columns:\n        count_missing_values = df[column].isnull().sum()\n        missing_values = (count_missing_values \/ len(df[column])) * 100\n    \n        if missing_values !=0:\n            print(f'{column} --> {count_missing_values} values | {missing_values:.2f}%')","ba69185a":"check_missing_values(df_train, 'DF TRAIN')","1aef4505":"check_missing_values(df_test, 'DF TEST')","333c4093":"plt.figure(figsize=(20,5))\nsns.heatmap(df_train.isnull(), cmap='viridis', cbar=False, yticklabels=False)\nplt.title('MISSING VALUES')","7e02c339":"na_means_donthave = ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu', 'GarageType',\n                 'GarageFinish', 'GarageQual', 'GarageCond', 'PoolQC', 'Fence', 'MiscFeature']","0b1dfb5f":"# Function to drop columns with a threshold amount of missing values if that column is not an exception\n\ncolumns_to_drop = []\ndef drop_columns_with_n_missing_values(df, threshold, exceptions):\n    '''\n    df_list: list of dataframes\n    threshold: percentage of missing values threshold\n    exceptions: don't delete if it's from that column\n    '''\n    \n    for col in df.columns:\n        if col in exceptions:\n            continue\n        else:\n            if ((df[col].isnull().sum() \/ len(df[col]))*100  >= threshold):\n                columns_to_drop.append(col)            ","54a0bb49":"drop_columns_with_n_missing_values(df_train, 40, na_means_donthave)","6588ade0":"print('Columns to drop:', columns_to_drop)","584c694d":"df_train.drop(columns_to_drop, axis=1, inplace=True)\ndf_test.drop(columns_to_drop, axis=1, inplace=True)","0e9ea493":"#check_missing_values(df_train, 'DF TRAIN')","4f37a023":"#check_missing_values(df_test, 'DF TEST')","2281caa9":"categoric_var = df_train.select_dtypes(include = [\"object\"]).columns\nnumeric_var = df_train.select_dtypes(exclude = [\"object\"]).columns\nnumeric_var = numeric_var.drop(\"SalePrice\")\n\nprint(\"Numeric variables : \" + str(len(numeric_var)))\nprint(\"Categoric variables : \" + str(len(categoric_var)))","a16feabe":"corr_mat = df_train.corr()\n\ncorr_mat['SalePrice'].sort_values(ascending=False)","38e06ce6":"plt.figure(figsize=(20,10))\nsns.heatmap(corr_mat, linecolor='white', linewidths=0.1)","74054a00":"top_corr_mat = corr_mat.index[abs(corr_mat[\"SalePrice\"])>0.5]\n\nplt.figure(figsize=(10,10))\nsns.heatmap(df_train[top_corr_mat].corr(), annot=True, cmap='coolwarm')","029ac6bb":"top_corr_features = list(top_corr_mat)","1ed749ef":"sns.pairplot(df_train[top_corr_features])","0747196f":"fig, axes = plt.subplots(1,2, figsize=(12,4), sharey=True)\n\nsns.regplot(x='YearBuilt', y='SalePrice', data=df_train, ax=axes[0])\nsns.regplot(x='YearRemodAdd', y='SalePrice', data=df_train, ax=axes[1])\n\nplt.tight_layout()","297e7e66":"fig, axes = plt.subplots(1,2, figsize=(12,4), sharey=True)\n\nsns.regplot(x='TotalBsmtSF', y='SalePrice', data=df_train, ax=axes[0])\nsns.regplot(x='1stFlrSF', y='SalePrice', data=df_train, ax=axes[1])\n\nplt.tight_layout()","2e4dd391":"fig, axes = plt.subplots(1,2, figsize=(12,4), sharey=True)\n\nsns.regplot(x='GrLivArea', y='SalePrice', data=df_train, ax=axes[0])\nsns.regplot(x='GarageArea', y='SalePrice', data=df_train, ax=axes[1])\n\nplt.tight_layout()","3f2f8d01":"fig, axes = plt.subplots(1,2, figsize=(12,4), sharey=True)\n\nsns.barplot(x='OverallQual', y='SalePrice', data=df_train, ax=axes[0])\nsns.barplot(x='FullBath', y='SalePrice', data=df_train, ax=axes[1])\n\nplt.tight_layout()","a5957658":"fig, axes = plt.subplots(1,2, figsize=(12,4), sharey=True)\n\nsns.barplot(x='TotRmsAbvGrd', y='SalePrice', data=df_train, ax=axes[0])\nsns.barplot(x='GarageCars', y='SalePrice', data=df_train, ax=axes[1])\n\nplt.tight_layout()","60973eb8":"# Train DF\nfor col in na_means_donthave:\n    df_train[col].fillna('Not', inplace=True)","7c557259":"# Test DF\nfor col in na_means_donthave:\n    df_test[col].fillna('Not', inplace=True)","013af7ef":"#check_missing_values(df_train, 'DF TRAIN')","f797d05c":"#check_missing_values(df_test, 'DF TEST')","0ba423e6":"df_train[categoric_var].head()","aa392e40":"for col in categoric_var:\n    df_train[col].fillna(df_train[col].mode()[0], inplace=True)","6cf76b02":"for col in categoric_var:\n    df_test[col].fillna(df_test[col].mode()[0], inplace=True)","b487dbf1":"df_train[numeric_var].head()","f49e7b05":"for col in numeric_var:\n    df_train[col].fillna(df_train[col].mean(), inplace=True)","30f2ff2a":"for col in numeric_var:\n    df_test[col].fillna(df_test[col].mean(), inplace=True)","ee6a9217":"check_missing_values(df_train, 'DF TRAIN')","d1697987":"check_missing_values(df_test, 'DF TEST')","0b60eb02":"df_full = pd.concat((df_train, df_test), axis=0)","c131b76f":"df_full = pd.get_dummies(df_full, drop_first=True)","eca71ae8":"df_full['SalePrice']","f4be761c":"df_train = df_full[df_full['SalePrice'].isnull() == False]","ea0d1b01":"df_test = df_full[df_full['SalePrice'].isnull() == True]\n\ndf_test.drop('SalePrice', axis=1, inplace=True)","2a538e5c":"print('df_train shape:', df_train.shape)\nprint('df_test shape:', df_test.shape)","c6d98249":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.metrics import mean_squared_error","f7d36f50":"# dictionary to append the RMSE results of each model\nresults = {}","e73fda6e":"X = df_train.drop('SalePrice', axis=1)\ny = df_train['SalePrice']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","bd37f736":"reg = LinearRegression()\n\nreg.fit(X_train, y_train)\n\nreg_pred = reg.predict(X_test)","9ea27e39":"reg_rmse = np.sqrt(mean_squared_error(y_test, reg_pred))\nprint('Linear Regression (simple) RMSE:', reg_rmse)\n\nresults['Linear Regression (simple)'] = reg_rmse","7dba33f2":"rf = RandomForestRegressor(random_state=1)\n\nrf.fit(X_train, y_train)\n\nrf_pred = rf.predict(X_test)","d0b7a872":"rf_rmse = np.sqrt(mean_squared_error(y_test, rf_pred))\nprint('Random Forest RMSE:', rf_rmse)\n\nresults['Random Forest'] = rf_rmse","625f7c70":"xgb = XGBRegressor(objective='reg:squarederror')\n\nxgb.fit(X_train, y_train)\n\nxgb_pred = xgb.predict(X_test)","d462bc84":"xgb_rmse = np.sqrt(mean_squared_error(y_test, xgb_pred))\nprint('XGB RMSE:', xgb_rmse)\n\nresults['XGB'] = xgb_rmse","385a9fba":"pd.options.display.float_format = '{:.4f}'.format\ndf_results = pd.DataFrame(results.items(), columns=['Algorithm', 'RMSE'])\n\ndf_results.sort_values('RMSE')","45c32c50":"xgb.fit(X, y)\n\nxgb_pred = xgb.predict(df_test)\n\nsubmission_xgb = pd.DataFrame({'Id':df_test.index, 'SalePrice':xgb_pred})\n\nsubmission_xgb.to_csv('submission_xgb.csv', index=False)","e3bede5a":"## Models","5f86e2d5":"### Drop columns with more than X% of missing values if not in exceptions","4986db13":"#### Correlation Matrix","432ed972":"### Correlations","52e0649e":"### Replace NA when it means 'Don't have this feature'","efaf26f3":"### Random Forest","72bfc587":"## Introduction","7bdc1a7e":"**There are some features where 'NA' means: DON'T HAVE that feature.**\n\nThese are: BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, FireplaceQu, GarageType, GarageFinish, GarageQual, GarageCond, PoolQC, Fence, MiscFeature","17c4ad56":"# Predicting House Prices","8c8ec42e":"### Linear Regresion (simple)","634fb717":"### XGBOOST","08dd8eae":"#### Top features","0558d2a9":"**Replace the null values with the MODE of each column**","b835e9fc":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Introduction\" data-toc-modified-id=\"Introduction-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Introduction<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Import-Libraries-and-Data\" data-toc-modified-id=\"Import-Libraries-and-Data-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;<\/span>Import Libraries and Data<\/a><\/span><\/li><li><span><a href=\"#Check-dataframes\" data-toc-modified-id=\"Check-dataframes-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;<\/span>Check dataframes<\/a><\/span><\/li><li><span><a href=\"#Checking-missing-values\" data-toc-modified-id=\"Checking-missing-values-1.3\"><span class=\"toc-item-num\">1.3&nbsp;&nbsp;<\/span>Checking missing values<\/a><\/span><\/li><li><span><a href=\"#Drop-columns-with-more-than-X%-of-missing-values-if-not-in-exceptions\" data-toc-modified-id=\"Drop-columns-with-more-than-X%-of-missing-values-if-not-in-exceptions-1.4\"><span class=\"toc-item-num\">1.4&nbsp;&nbsp;<\/span>Drop columns with more than X% of missing values if not in exceptions<\/a><\/span><\/li><li><span><a href=\"#Numerical-vs-Categorical-variables\" data-toc-modified-id=\"Numerical-vs-Categorical-variables-1.5\"><span class=\"toc-item-num\">1.5&nbsp;&nbsp;<\/span>Numerical vs Categorical variables<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Data-Visualization\" data-toc-modified-id=\"Data-Visualization-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Data Visualization<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Correlations\" data-toc-modified-id=\"Correlations-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;<\/span>Correlations<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Correlation-Matrix\" data-toc-modified-id=\"Correlation-Matrix-2.1.1\"><span class=\"toc-item-num\">2.1.1&nbsp;&nbsp;<\/span>Correlation Matrix<\/a><\/span><\/li><li><span><a href=\"#Top-features\" data-toc-modified-id=\"Top-features-2.1.2\"><span class=\"toc-item-num\">2.1.2&nbsp;&nbsp;<\/span>Top features<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><li><span><a href=\"#Data-Manipulation\" data-toc-modified-id=\"Data-Manipulation-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Data Manipulation<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Replace-NA-when-it-means-'Don't-have-this-feature'\" data-toc-modified-id=\"Replace-NA-when-it-means-'Don't-have-this-feature'-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;<\/span>Replace NA when it means 'Don't have this feature'<\/a><\/span><\/li><li><span><a href=\"#Fill-NA-missing-values-(simple)\" data-toc-modified-id=\"Fill-NA-missing-values-(simple)-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;<\/span>Fill NA missing values (simple)<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Categorical-data\" data-toc-modified-id=\"Categorical-data-3.2.1\"><span class=\"toc-item-num\">3.2.1&nbsp;&nbsp;<\/span>Categorical data<\/a><\/span><\/li><li><span><a href=\"#Numerical-Data\" data-toc-modified-id=\"Numerical-Data-3.2.2\"><span class=\"toc-item-num\">3.2.2&nbsp;&nbsp;<\/span>Numerical Data<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Encoding-features\" data-toc-modified-id=\"Encoding-features-3.3\"><span class=\"toc-item-num\">3.3&nbsp;&nbsp;<\/span>Encoding features<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Models\" data-toc-modified-id=\"Models-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Models<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Linear-Regresion-(simple)\" data-toc-modified-id=\"Linear-Regresion-(simple)-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;<\/span>Linear Regresion (simple)<\/a><\/span><\/li><li><span><a href=\"#Random-Forest\" data-toc-modified-id=\"Random-Forest-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;<\/span>Random Forest<\/a><\/span><\/li><li><span><a href=\"#XGBOOST\" data-toc-modified-id=\"XGBOOST-4.3\"><span class=\"toc-item-num\">4.3&nbsp;&nbsp;<\/span>XGBOOST<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Results\" data-toc-modified-id=\"Results-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Results<\/a><\/span><\/li><li><span><a href=\"#Submissions\" data-toc-modified-id=\"Submissions-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;<\/span>Submissions<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#XGBOOST\" data-toc-modified-id=\"XGBOOST-6.2\"><span class=\"toc-item-num\">6.1&nbsp;&nbsp;<\/span>XGBOOST<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#To-do-list\" data-toc-modified-id=\"To-do-list-7\"><span class=\"toc-item-num\">7&nbsp;&nbsp;<\/span>To do list<\/a><\/span><\/li><\/ul><\/div>","05e43cf8":"## To do list","61cd120c":"### Check dataframes","77deb726":"#### Categorical data","b6f67c73":"## Data Visualization","5051dc9d":"### Numerical vs Categorical variables","969f3d10":"**Replace the null values with the mean of each column**","e0b8e178":"### Checking missing values","ad8d2318":"- Try and tune more models","26715ec9":"### Encoding features","83584583":"## Data Manipulation","db2b35eb":"**Checking for missing values in both datasets**","cf6ef482":"### XGBOOST","2c447585":"## Results","2196ad8f":"#### Numerical Data","dcb983ad":"This features are: BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, FireplaceQu, GarageType, GarageFinish, GarageQual, GarageCond, PoolQC, Fence, MiscFeature","c3ac7369":"**Separate dataframes again**\n\nChecking SalePrice we can see that df_train has price values while df_test has NaN values","85a48b58":"### Fill NA missing values (simple)","5ecd9880":"## Submissions","ce9c028c":"**Combine both dataframes to get dummies**, so we don't get inconsistent number of columns for each dataframes","077b1523":"### Import Libraries and Data","1465d830":"**Pair plot**","e7db726a":"\u00a1I'll use that to check if the value on SalePrice is true or false, and then assign that rows to each dataframe!\n\nAnd then drop the column SalePrice from the df_test dataframe since it doesn't exist originally."}}