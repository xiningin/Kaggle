{"cell_type":{"499b483d":"code","8464ddf1":"code","9e5cad21":"code","d049dd7a":"code","2995aead":"code","ef509c9d":"code","f4f34674":"code","cb4e78b0":"code","353a4f2b":"code","1751927c":"code","ff461bea":"code","62cd664d":"code","df662c77":"code","19f90e18":"code","11d34e0c":"code","8a266d32":"code","9facfbfa":"code","2609004a":"code","cc6f02de":"code","9819fedf":"code","9b304843":"code","4f7161e6":"code","c259ae38":"code","0deae60b":"code","db10722f":"markdown","062d1356":"markdown","4686c949":"markdown","aed95092":"markdown","cb97cd6c":"markdown","0fe1795f":"markdown"},"source":{"499b483d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport matplotlib # \uc2dc\uac01\ud654\ud558\ub294 \ud328\ud0a4\uc9c0  \nimport matplotlib.pyplot as plt","8464ddf1":"train = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/test.csv')\ntrain","9e5cad21":"train['datetime'] = pd.to_datetime(train['datetime'])\ntrain['Year'] = train['datetime'].dt.year\n\ntrain.info()","d049dd7a":"train = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/train.csv')\ntrain['datetime']=pd.to_datetime(train['datetime'])\ntrain['Year'] = train['datetime'].dt.year\ntrain['Month'] = train['datetime'].dt.month\ntrain['Day'] = train['datetime'].dt.day\ntrain['WDay'] = train['datetime'].dt.weekday\ntrain['Hour'] = train['datetime'].dt.hour\ntrain.head()","2995aead":"train['temp'].hist()\n# \ub0a0\uc528\ub294 10\ub3c4 \ub2e8\uc704\ub85c \uadf8\ub8f9\ud551 \nfor i in train.index:\n    t = train.loc[i,'temp']\n    if (t >= 0) and (t < 10):\n        train.loc[i,'tempGroup'] = '0~9'\n    elif (t >= 10) and (t < 20):\n        train.loc[i,'tempGroup'] = '10~19'\n    elif t >= 20 and t < 30:\n        train.loc[i,'tempGroup'] = '20~29'\n    elif t >= 30 and t < 40:\n        train.loc[i,'tempGroup'] = '30~39'\n    elif t >= 40 :\n        train.loc[i,'tempGroup'] = '40~'\n    else:\n        train.loc[i,'tempGroup'] = 'NoValue'\ntrain","ef509c9d":"train['atemp'].hist()\n# \ub0a0\uc528\ub294 10\ub3c4 \ub2e8\uc704\ub85c \uadf8\ub8f9\ud551 \nfor i in train.index:\n    t = train.loc[i,'atemp']\n    if (t >= 0) and (t < 10):\n        train.loc[i,'atempGroup'] = '0~9'\n    elif (t >= 10) and (t < 20):\n        train.loc[i,'atempGroup'] = '10~19'\n    elif t >= 20 and t < 30:\n        train.loc[i,'atempGroup'] = '20~29'\n    elif t >= 30 and t < 40:\n        train.loc[i,'atempGroup'] = '30~39'\n    elif t >= 40 :\n        train.loc[i,'atempGroup'] = '40~'\n    else:\n        train.loc[i,'atempGroup'] = 'NoValue'","f4f34674":"train['humidity'].hist()\n# \uc2b5\ub3c4\ub294 20 \ub2e8\uc704\ub85c \uadf8\ub8f9\ud551 \nfor i in train.index:\n    t = train.loc[i,'humidity']\n    if t >= 0 and t <= 19:\n        train.loc[i,'humidityGroup'] = '0~19'\n    elif t >= 20 and t <= 39:\n        train.loc[i,'humidityGroup'] = '20~39'\n    elif t >= 40 and t <= 59:\n        train.loc[i,'humidityGroup'] = '40~59'\n    elif t >= 60 and t <= 79:\n        train.loc[i,'humidityGroup'] = '60~79'\n    elif t >= 80 :\n        train.loc[i,'humidityGroup'] = '80~'\n    else:\n        train.loc[i,'humidityGroup'] = 'NoValue'","cb4e78b0":"train['windspeed'].hist() \n# \ud48d\uc18d\uc740 10 \ub2e8\uc704\ub85c \uadf8\ub8f9\ud551 \nfor i in train.index:\n    t = train.loc[i,'windspeed']\n    if t >= 0 and t < 10:\n        train.loc[i,'windspeedGroup'] = '0~9'\n    elif t >= 10 and t < 20:\n        train.loc[i,'windspeedGroup'] = '10~19'\n    elif t >= 20 and t < 30:\n        train.loc[i,'windspeedGroup'] = '20~29'\n    elif t >= 30 :\n        train.loc[i,'windspeedGroup'] = '30~'\n    else:\n        train.loc[i,'windspeedGroup'] = 'NoValue'","353a4f2b":"train.head()","1751927c":"round(train.groupby(['tempGroup']).agg({'count':np.sum})\/10000,1).plot(kind='barh')","ff461bea":"round(train.groupby(['atempGroup']).agg({'count':np.sum})\/10000,1).plot(kind='barh')","62cd664d":"round(train.groupby(['humidityGroup']).agg({'count':np.sum})\/10000,1).plot(kind='barh')","df662c77":"round(train.groupby(['windspeedGroup']).agg({'count':np.sum})\/10000,1).plot(kind='barh')\n# idx = (train['windspeedGroup'] == 'NoValue')\n# train.loc[idx,:]","19f90e18":"round(train.groupby(['holiday','workingday']).agg({'count':np.sum})\/10000,1).plot(kind='barh')","11d34e0c":"round(train.groupby(['WDay','holiday']).agg({'count':np.sum})\/10000,1).plot(kind='barh')","8a266d32":"round(train.groupby(['WDay','workingday']).agg({'count':np.sum})\/10000,1).plot(kind='barh')","9facfbfa":"round(train.groupby(['weather']).agg({'count':np.sum})\/10000,1).plot(kind='barh')","2609004a":"# pd.melt(plot_data.reset_index(),id_vars=['Month'])","cc6f02de":"plot_data = train.groupby(['Year','Month']).\\\nagg({'count':np.sum}).\\\npivot_table(index='Month',columns='Year')['count']\nplot_data\nfig = plt.figure() \nax = fig.add_subplot() \nx = plot_data.index \nfor col in plot_data.columns:\n    y = plot_data[col]\n    ax.plot(x,y,'o-',label=col)\n\nax.legend()\nax.set_xticks(np.arange(1,12,3))\nax.set_yticks(np.arange(20000,140000,10000))\nax.grid(axis='both',alpha=0.3)\n\n# plt.show()\n","9819fedf":"plot_data = train.groupby(['Month','Hour']).agg({'count':np.sum}).\\\npivot_table(index='Hour',columns='Month')['count']\nplot_data\nfig = plt.figure() \nax = fig.add_subplot() \nx = plot_data.index \nfor col in plot_data.columns:\n    y = plot_data[col]\n    ax.plot(x,y,'o-',label=col)\nax.set_xticks(x)\nax.grid(axis='both',alpha=0.3)\nax.legend()\nplt.show()","9b304843":"train2 = train[['Year','Month','Hour','weather','temp','atemp','humidity','windspeed']].copy() \ntrain2","4f7161e6":"train2 = train[['Year','Month','Hour','weather','temp','atemp','humidity','windspeed']].copy() \nX = train2.copy()\ny = train['count'].copy()\nfrom sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.3)\n\nfrom sklearn import linear_model\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\n\n# model = linear_model.LinearRegression()\nmodel = RandomForestRegressor()\nmodel.fit(X_train, y_train)\n# X_vaild\uc640 y_vaild\ub85c \uc608\uce21\uc744 \uc5f0\uc2b5 \n# model.predict(X_valid)\nprint(model.score(X_valid,y_valid))\nprint(model.predict(X_valid))\n\ntest = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/test.csv')\ntest['datetime']=pd.to_datetime(test['datetime'])\ntest['Year'] = test['datetime'].dt.year\ntest['Month'] = test['datetime'].dt.month\ntest['Hour'] = test['datetime'].dt.hour\ntest = test[['Year','Month','Hour','weather','temp','atemp','humidity','windspeed']].copy()\nresult = model.predict(test)\nprint(result)","c259ae38":"submission = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/sampleSubmission.csv')\n# submission\nsubmission['count'] = result\n\nsubmission['datetime']=pd.to_datetime(submission['datetime'])\nsubmission['Year'] = submission['datetime'].dt.year\nsubmission['Month'] = submission['datetime'].dt.month\nsubmission['Hour'] = submission['datetime'].dt.hour\n\nplot_data = submission.groupby(['Year','Month']).agg({'count':np.sum}).\\\npivot_table(index='Month',columns='Year')['count']\nfig = plt.figure() \nax = fig.add_subplot() \nx = plot_data.index \nfor col in plot_data.columns:\n    y = plot_data[col]\n    ax.plot(x,y,'o-',label=col)\nax.set_xticks(x)\nax.grid(axis='both',alpha=0.3)\nax.legend()\nplt.show()","0deae60b":"plot_data = submission.groupby(['Month','Hour']).agg({'count':np.sum}).\\\npivot_table(index='Hour',columns='Month')['count']\nfig = plt.figure() \nax = fig.add_subplot() \nx = plot_data.index \nfor col in plot_data.columns:\n    y = plot_data[col]\n    ax.plot(x,y,'o-',label=col)\nax.set_xticks(x)\nax.grid(axis='both',alpha=0.3)\nax.legend()\nplt.show()","db10722f":"# \uc2dc\uac04\uc5d0 \ub530\ub978 \ub300\uc5ec \ud69f\uc218 \ucc28\uc774 \uc54c\uc544\ubcf4\uae30 ","062d1356":"# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 & \ub0a0\uc9dc\ud0c0\uc785 \ub370\uc774\ud130 \uc815\uc81c\ud558\uae30 ","4686c949":"# \ubc94\uc8fc\ud654\ub41c \ubcc0\uc218\ub97c \uc774\uc6a9\ud574 \ub300\uc5ec \ud69f\uc218\uc758 \ucc28\uc774 \uc54c\uc544\ubcf4\uae30 ","aed95092":"# RandomForestRegressor \uc54c\uace0\ub9ac\uc998\uc744 \ud65c\uc6a9\ud55c \uc608\uce21","cb97cd6c":"# \uc22b\uc790 \ud0c0\uc785\uc758 \ub370\uc774\ud130\ub97c \ubc94\uc8fc\ud654\ud558\uae30","0fe1795f":"# \uc608\uce21 \uacb0\uacfc \uc2dc\uac01\ud654\ud558\uae30"}}