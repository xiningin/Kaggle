{"cell_type":{"4559a980":"code","c0393b7d":"code","bb4849f7":"code","9148a2a0":"code","6ca32e70":"code","58d9296c":"code","7c83879e":"code","71066138":"code","d21cb7ae":"code","c3a97044":"code","4c49fad1":"code","84a639d0":"code","1d8a6729":"code","d94f81b2":"code","e64dc38a":"code","c172345c":"code","407627cd":"code","ca344424":"code","5b127b53":"code","7659d074":"code","59445f95":"code","47860628":"code","973c0f70":"code","6fcefc81":"code","efaf91a6":"code","9b034d0e":"code","5d958e04":"code","eb1bcd20":"code","35ce2ee1":"code","d3cf7296":"code","6bff4dda":"code","ceb1a1ec":"code","051a6bb6":"code","863f1968":"code","5b014e80":"code","d541a991":"code","ad681471":"code","7340b694":"code","3775696b":"code","d43331f1":"code","af0ed08e":"code","488e7b41":"code","12a66fbe":"code","ac4d0b3f":"code","b32ab711":"code","fbd3a4f6":"code","c16b36ab":"code","13e7d024":"code","dc608f5c":"code","c2f87286":"code","70d6ddc9":"code","e493ba59":"code","14547a45":"code","9de97f54":"code","fe6f2c3d":"code","688a3606":"markdown","74e81058":"markdown","9b596bac":"markdown","2d88456f":"markdown","2d57093a":"markdown","ea0c254d":"markdown","4480a19d":"markdown","9b28b910":"markdown","63142720":"markdown","cbc15568":"markdown","84280502":"markdown","2a14acac":"markdown","dd95e8cf":"markdown","216e5aa1":"markdown","f9788155":"markdown"},"source":{"4559a980":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0393b7d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams[\"figure.figsize\"]=(10,5)\nimport seaborn as sns","bb4849f7":"df=pd.read_csv(\"\/kaggle\/input\/loan-default-prediction\/Default_Fin.csv\")\ndf.head()","9148a2a0":"df.drop(columns=['Index'],axis=1,inplace=True)","6ca32e70":"df.info()","58d9296c":"df.describe()","7c83879e":"df.nunique()","71066138":"# chceking for duplicate entries\nduplicate_rows=df[df.duplicated()]\nprint(duplicate_rows)","d21cb7ae":"#analysis for part of df having customer data with bank balance 0\nbank_balance=pd.DataFrame()\nbank_balance=df[df['Bank Balance']==0]","c3a97044":"bank_balance.reset_index(inplace=True)","4c49fad1":"bank_balance.drop(columns=['index'],axis=1,inplace=True)","84a639d0":"bank_balance.head()","1d8a6729":"bank_balance.shape","d94f81b2":"bank_balance['Defaulted?'].value_counts()","e64dc38a":"sns.countplot(bank_balance['Defaulted?'])\nplt.show()","c172345c":"bank_balance['Employed'].value_counts()","407627cd":"sns.countplot(bank_balance['Employed'])\nplt.show()","ca344424":"df['Defaulted?'].value_counts()","5b127b53":"sns.countplot(df['Employed'])\nplt.title('Employed count for entire data')\nplt.show()","7659d074":"sns.countplot(df['Defaulted?'])\nplt.title('Defaulted count for entire data')\nplt.show()\n#uneven distribution","59445f95":"sns.distplot(df['Bank Balance'])","47860628":"sns.barplot(x='Employed', y='Bank Balance', data=df)\nplt.title('Employed vs Bank Balance')","973c0f70":"sns.barplot(x='Employed', y='Annual Salary', data=df)\nplt.title('Employed vs Annual Salary')","6fcefc81":"sns.barplot(x='Defaulted?', y='Annual Salary', data=df)\nplt.title('Defaulted vs Annual Salary')","efaf91a6":"sns.barplot(x='Defaulted?', y='Bank Balance', data=df)\nplt.title('Defaulted vs Bank Balance')","9b034d0e":"pd.crosstab(df['Employed'],df['Defaulted?'])","5d958e04":"fig,ax=plt.subplots(figsize=(10,7))\nsns.heatmap(df.corr(),annot=True)","eb1bcd20":"correlation=df.corr()\nprint(correlation['Defaulted?'].sort_values(ascending=False),'\\n')\n","35ce2ee1":"plt.figure(figsize = (10, 5))\nsns.boxplot(y = df['Bank Balance'])\n","d3cf7296":"sns.boxplot(y = df['Annual Salary'])\nplt.show()","6bff4dda":"def IQR_outlier(col):\n  Q1=df[col].quantile(0.25)\n  Q3=df[col].quantile(0.75)\n  IQR=Q3-Q1\n  lower_limit=Q3-1.5*IQR\n  upper_limit=Q3+1.5*IQR\n  df1=df[(df[col]>lower_limit)&(df[col]<upper_limit)]\n  return df1\n\n                                            \ndf1=IQR_outlier('Bank Balance')","ceb1a1ec":"from sklearn.preprocessing import MinMaxScaler","051a6bb6":"col=['Bank Balance', 'Annual Salary']","863f1968":"scaler = MinMaxScaler()\nnew_df = pd.DataFrame(scaler.fit_transform(df[col]), columns=col)","5b014e80":"new_df['Employed']=df['Employed']\nnew_df['Defaulted?']=df['Defaulted?']\nnew_df.tail()","d541a991":"Y=df['Defaulted?']\nX=df.drop(columns=['Defaulted?'],axis=1)\n","ad681471":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test= train_test_split(X,Y, test_size=0.3)","7340b694":"from sklearn.metrics import confusion_matrix, recall_score, precision_score, f1_score, roc_auc_score,accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import svm\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.metrics import f1_score,precision_score,recall_score, classification_report\n\nfrom time import time","3775696b":"classifiers=[\n             LogisticRegression(),\n             DecisionTreeClassifier(),\n             RandomForestClassifier(),\n             svm.SVC(),\n             KNeighborsClassifier()\n]","d43331f1":"mse={}\nfor model in classifiers:\n    start = time()\n    model.fit(X_train, y_train)\n    train_time = time() - start\n    start = time()\n    y_pred = model.predict(X_test)\n    predict_time = time()-start    \n    print(model)\n    print(\"\\tTraining time: %0.3fs\" % train_time)\n    print('accuracy classification: ',accuracy_score(y_test,y_pred).round(4))\n    precision_log=precision_score(y_test,y_pred).round(4)\n    print(\"Precision: \",precision_log)\n    recall_log=recall_score(y_test,y_pred).round(4)\n    print(\"recall: \",recall_log)\n    f1score=f1_score(y_test,y_pred).round(4)\n    print('f1 score: ',f1score)\n    print()\n    print()","af0ed08e":"from sklearn.model_selection import GridSearchCV","488e7b41":"param_grid = { \n    'n_estimators': [200, 500],\n    'max_features': ['auto', 'sqrt'],\n    'max_depth' : [5,7,10,15],\n    \"min_samples_split\":[0.1, 0.25, 0.5, 0.8],\n    'criterion' :['gini', 'entropy']\n}","12a66fbe":"grid_search = GridSearchCV(estimator = RandomForestClassifier(random_state=42), param_grid = param_grid, \n                          cv = 5, n_jobs = -1, verbose = 2)\ngrid_search.fit(X_train,y_train)\ngrid_search.best_params_","ac4d0b3f":"grid_search.best_params_","b32ab711":"model=RandomForestClassifier(random_state=42,criterion='gini', max_depth=7, max_features= 'auto', n_estimators= 500, min_samples_split=0.1)\nmodel=model.fit(X_train,y_train)\ny_pred=model.predict(X_test)\nprint('accuracy classification: ',accuracy_score(y_test,y_pred).round(4))\nprecision_log=precision_score(y_test,y_pred).round(4)\nprint(\"Precision: \",precision_log)\nrecall_log=recall_score(y_test,y_pred).round(4)\nprint(\"recall: \",recall_log)\nf1score=f1_score(y_test,y_pred).round(4)\nprint('f1 score: ',f1score)","fbd3a4f6":"print(classification_report(y_test, y_pred))","c16b36ab":"X=df.drop('Defaulted?',axis=1)\ny=df['Defaulted?']\n\ny.value_counts()","13e7d024":"pip install imbalanced-Learn","dc608f5c":"from imblearn.over_sampling import SMOTE","c2f87286":"smote=SMOTE(sampling_strategy='minority')\nX_sm, y_sm=smote.fit_resample(X,y)\n","70d6ddc9":"X_train,X_test,y_train,y_test=train_test_split(X_sm,y_sm,test_size=0.2,random_state=15, stratify=y_sm)","e493ba59":"model=RandomForestClassifier(random_state=42,criterion='gini', max_depth=10, max_features= 'auto', n_estimators= 500, min_samples_split=0.1)\nmodel=model.fit(X_train,y_train)\ny_pred=model.predict(X_test)\n","14547a45":"print('accuracy classification: ',accuracy_score(y_test,y_pred).round(4))\nprecision_log=precision_score(y_test,y_pred).round(4)\nprint(\"Precision: \",precision_log)\nrecall_log=recall_score(y_test,y_pred).round(4)\nprint(\"recall: \",recall_log)\nf1score=f1_score(y_test,y_pred).round(4)\nprint('f1 score: ',f1score)","9de97f54":"print(classification_report(y_test, y_pred))","fe6f2c3d":"data={'accuracy score':[0.971,0.8935], 'Precision':[0.5614,0.8647],'Recall':[0.3404,0.9327], 'f1 score':[0.4238,0.8975],' Data used':['Original dataset(imbalanced)','SMOTE']}\nr1=pd.DataFrame(data)\nr1","688a3606":"# Handling imbalanced dataset using SMOTE(synthetic minority oversampling technique) and Final Model","74e81058":"# Scaling of Data","9b596bac":"outliers present in Bank Balance","2d88456f":"here 70.56% of customers are employed and 3.33% are defaulted","2d57093a":"# EDA and Visualization","ea0c254d":"# Outlier detection","4480a19d":"# Loading Libraries and Dataset","9b28b910":"we can use df1 (filtered outliers based on IQR) for model training, however I observed that it didnt make much difference in the final model","63142720":"# Model Selection","cbc15568":"# Hyper-Parameter Tuning","84280502":"The f1 score and precision and recall are much better using SMOTE","2a14acac":"Description of Dataset:\n\nEmployed:This is a Boolean 1=employed & 0=unemployed\n\nBank Balance: Bank Balance of the loan taker\n\nAnnual Salary: Annual salary of the loan taker\n\nDefaulted: This is a Boolean 1=defaulted & 0=not defaulted","dd95e8cf":"# Model training and Prediction","216e5aa1":"we can use this scaled data for prediction, however I observed it didn't make major difference on final prediction","f9788155":"on the basis of accuracy, precision, recall and f1 score: Random Forest Classifier is the more better model"}}