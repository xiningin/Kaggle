{"cell_type":{"2e251c0f":"code","a4899b3d":"code","fbd4f9ff":"code","93831a6d":"code","727d90a5":"code","a0a4854c":"code","a00506ad":"code","2220a10f":"code","d8b3926f":"code","3f17fdfd":"code","f96e62c1":"code","52acb6d4":"code","8c7ce7af":"code","3a046dba":"code","b304be02":"code","b389bf95":"code","a5313cea":"code","df975926":"code","173f8bf7":"code","7c2677ab":"code","44486b0b":"code","587f9e57":"code","30f15a8e":"code","a5cde1f5":"markdown","6ba78bc0":"markdown","8b540fc3":"markdown","e98df9c6":"markdown","d2cdbe6b":"markdown","28414601":"markdown","c6d65d14":"markdown","adcffc0f":"markdown","f88c829e":"markdown","4c0f559c":"markdown","0252b9f8":"markdown","3ce6d1a5":"markdown","81ce6293":"markdown","a7148e5e":"markdown","c7ef1010":"markdown","7829f88b":"markdown","c0def9e9":"markdown","bb94a183":"markdown","90cc00e7":"markdown","2bbae0f7":"markdown","8a7eb856":"markdown","d2ef54c8":"markdown","5a732e5f":"markdown","2dc6eebe":"markdown","d43ba956":"markdown","f20b5dac":"markdown","f1a2368d":"markdown","40046f5c":"markdown","4ffb3d7c":"markdown","460cffb2":"markdown","92e7695a":"markdown","5bde6db1":"markdown"},"source":{"2e251c0f":"# 1. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 2. \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\nfrom sklearn.model_selection import KFold, cross_val_score\n\n# 3. \u041c\u043e\u0434\u0435\u043b\u0438\nfrom catboost import CatBoostRegressor\n\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nmatplotlib.rcParams.update({'font.size': 14})","a4899b3d":"DATASET_PATH = '\/kaggle\/input\/realestatepriceprediction\/train.csv'\nTEST_DATASET_PATH = '\/kaggle\/input\/realestatepriceprediction\/test.csv'","fbd4f9ff":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","93831a6d":"df = pd.read_csv(DATASET_PATH)\ndf = reduce_mem_usage(df)","727d90a5":"X_final = pd.read_csv(TEST_DATASET_PATH)\nX_final = reduce_mem_usage(X_final)","a0a4854c":"df.info()","a00506ad":"df_num_features = df.select_dtypes(include=['float32', 'float64', 'int8', 'int16', 'int32'])\ndf_num_features.drop(['Price', 'Id'], axis=1, inplace=True)","2220a10f":"df_num_features.hist(figsize=(16,16), bins=20, grid=False)","d8b3926f":"df.describe().T","3f17fdfd":"for feat in ['Rooms', 'KitchenSquare', 'HouseFloor']:\n    print(f'\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439, \u0433\u0434\u0435 {feat}=0: {df.loc[(df[feat] == 0)].shape[0]}')","f96e62c1":"grid = sns.jointplot(df['Rooms'], df['Price'], kind='reg')\ngrid.fig.set_figwidth(8)\ngrid.fig.set_figheight(8)","52acb6d4":"grid = sns.jointplot(df['KitchenSquare'], df['Price'], kind='reg')\ngrid.fig.set_figwidth(8)\ngrid.fig.set_figheight(8)","8c7ce7af":"df_temp = df.loc[df['KitchenSquare']<250]\ngrid = sns.jointplot(df_temp['KitchenSquare'], df_temp['Price'], kind='reg')\ngrid.fig.set_figwidth(8)\ngrid.fig.set_figheight(8)","3a046dba":"target_mean = round(df['Price'].mean(), 2)\ntarget_median = df['Price'].median()\ntarget_mode = df['Price'].mode()[0]\n\nplt.figure(figsize = (16, 8))\n\nsns.distplot(df['Price'], bins=50)\n\ny = np.linspace(0, 0.000005, 10)\nplt.plot([target_mean] * 10, y, label='target_mean', linestyle=':',  linewidth=4)\nplt.plot([target_median] * 10, y, label='target_median', linestyle='--',  linewidth=4)\nplt.plot([target_mode] * 10, y, label='target_mode', linestyle='-.', linewidth=4)\n\nplt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b')\nplt.legend()","b304be02":"class Data:\n    \n    def __init__(self):\n        \"\"\"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n        self.Square_min = 15\n        self.Square_max = 300\n        \n        self.LifeSquare_min = 10\n        self.LifeSquare_max = 280\n        \n        self.Rooms_min = 1\n        self.Rooms_max = 5\n        \n        self.HouseFloor_min = 1\n        self.HouseFloor_max = 50\n        \n        self.KitchenSquare_min = 3\n        self.KitchenSquare_max = 30\n        \n        self.current_year = datetime.datetime.now().year\n        \n        self.medians = None\n        self.DistrictId_value_counts = None\n        self.SquareMeterPrice_by_DistrictId = None\n        self.Healthcare_1_by_DistrictId = None\n        \n        \n    def fit(self, df):\n        \n        # \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n        self.medians = df[['LifeSquare', 'HouseFloor']].median()\n        \n        # \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0440\u0430\u0439\u043e\u043d\u043e\u0432\n        self.DistrictId_value_counts = dict(df['DistrictId'].value_counts())\n        \n        # \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0446\u0435\u043d\u044b \u0437\u0430 \u043c2 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443\n        df_temp = df.loc[((df['Square'] > self.Square_min) & (df['Square'] < self.Square_max))]\n        df_temp[\"SquareMeterPrice\"] = df_temp[\"Price\"] \/ df_temp[\"Square\"]\n        self.SquareMeterPrice_by_DistrictId = df_temp.groupby('DistrictId', as_index=False)\\\n            .agg({'SquareMeterPrice': 'mean'})\\\n            .rename(columns={'SquareMeterPrice': 'AverageSquareMeterPrice'})\n        \n        # \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Healthcare_1 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443\n        self.Healthcare_1_by_DistrictId = df.groupby('DistrictId', as_index=False)\\\n            .agg({'Healthcare_1': 'mean'})\\\n            .rename(columns={'Healthcare_1': 'AverageHealthcare_1'})\n        \n        del df_temp\n        \n    def transform(self, df):\n        \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n        df[['LifeSquare', 'HouseFloor']] = df[['LifeSquare', 'HouseFloor']].fillna(self.medians)\n        \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n        \n        # \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n        df.loc[(df['Square'] > self.Square_max), 'Square'] = self.Square_max\n        df.loc[(df['Square'] < self.Square_min), 'Square'] = self.Square_min\n        \n        # \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n        df.loc[(df['LifeSquare'] < self.LifeSquare_min), 'LifeSquare'] = self.LifeSquare_min\n        df.loc[(df['LifeSquare'] > self.LifeSquare_max), 'LifeSquare'] = self.LifeSquare_max\n        \n        # \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n        df.loc[(df['KitchenSquare'] < self.KitchenSquare_min), 'KitchenSquare'] = self.KitchenSquare_min\n        df.loc[(df['KitchenSquare'] > self.KitchenSquare_max), 'KitchenSquare'] = self.KitchenSquare_max\n        \n        # \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n        df.loc[(df['HouseYear'] > self.current_year), 'HouseYear'] = self.current_year\n        \n        # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n        df.loc[(df['Rooms'] > self.Rooms_max), 'Rooms'] = self.Rooms_max\n        df.loc[(df['Rooms'] < self.Rooms_min), 'Rooms'] = self.Rooms_min\n        \n        # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439\n        df.loc[(df['HouseFloor'] < self.HouseFloor_min), 'HouseFloor'] = self.HouseFloor_min\n        df.loc[(df['HouseFloor'] > self.HouseFloor_max), 'HouseFloor'] = self.HouseFloor_max\n        \n        # \u0435\u0441\u043b\u0438 \u044d\u0442\u0430\u0436 \u0431\u043e\u043b\u044c\u0448\u0435 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u0430, \u0442\u043e \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u044d\u0442\u0430\u0436 \u043e\u0442 self.HouseFloor_min \u0434\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u0442\u0430\u0436\u0430 \u0432 \u0434\u043e\u043c\u0435\n        floor_outliers = df.loc[df['Floor'] > df['HouseFloor']].index\n        df.loc[floor_outliers, 'Floor'] = df.loc[floor_outliers, 'HouseFloor'].apply(lambda x: self.HouseFloor_min if (self.HouseFloor_min == x) else np.random.randint(self.HouseFloor_min, x))\n        \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\n        df = pd.concat([df, pd.get_dummies(df['Ecology_2'], prefix='Ecology_2', dtype='int8')], axis=1)\n        df = pd.concat([df, pd.get_dummies(df['Ecology_3'], prefix='Ecology_3', dtype='int8')], axis=1)\n        df = pd.concat([df, pd.get_dummies(df['Shops_2'], prefix='Shops_2', dtype='int8')], axis=1)\n        \n        return df\n    \n    def features(self, df):\n        \n        # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0439\u043e\u043d\u0430\n        df['DistrictId_counts'] = df['DistrictId'].map(self.DistrictId_value_counts)\n        df['DistrictId_counts'].fillna(df['DistrictId_counts'].median(), inplace=True)\n        \n        # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043c2 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443\n        df = df.merge(self.SquareMeterPrice_by_DistrictId, on=[\"DistrictId\"], how='left')\n        df['AverageSquareMeterPrice'].fillna(df['AverageSquareMeterPrice'].median(), inplace=True)\n        \n        # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Healthcare_1 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443\n        df = df.merge(self.Healthcare_1_by_DistrictId, on=[\"DistrictId\"], how='left')\n        df['AverageHealthcare_1'].fillna(df['AverageHealthcare_1'].median(), inplace=True)\n        \n        return df","b389bf95":"data_inst = Data()\n\n# \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\ndata_inst.fit(df)\ndf = data_inst.transform(df)\ndf = data_inst.features(df)\n\n# \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nX_final = data_inst.transform(X_final)\nX_final = data_inst.features(X_final)","a5313cea":"feature_names = ['AverageSquareMeterPrice', 'DistrictId_counts', 'Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor',\n                    'HouseFloor', 'HouseYear', 'Helthcare_2', 'Ecology_1', 'Social_1', 'Social_2', 'Social_3',\n                    'Shops_1', 'Ecology_2_A', 'Ecology_2_B', 'Ecology_3_A', 'Ecology_3_B', 'Shops_2_A', 'Shops_2_B',\n                    'AverageHealthcare_1']\ntarget_name = 'Price'","df975926":"df = df[feature_names + [target_name]]\nX_final = X_final[feature_names + ['Id']]","173f8bf7":"X = df[feature_names]\ny = df[target_name]","7c2677ab":"%%time\n\nfinal_model = CatBoostRegressor(\n    silent=True,\n    learning_rate=0.1,\n    iterations=1150,\n    eval_metric='R2',\n    depth=8\n)\n\nfinal_model.fit(X, y)\n\ncv_score = cross_val_score(\n    final_model,\n    X,\n    y,\n    scoring='r2',\n    cv=KFold(\n            n_splits=5,\n            shuffle=True,\n            random_state=42\n    )\n)\n\nprint(f'R2: {round(cv_score.mean(), 3)}')","44486b0b":"feature_importances = pd.DataFrame(\n    zip(X.columns, final_model.get_feature_importance()),\n    columns=['feature_name', 'importance']\n)\n\nfeature_importances.sort_values(by='importance', ascending=False, inplace=True)\nfeature_importances.head(20)","587f9e57":"preds_final = pd.DataFrame()\npreds_final['Id'] = X_final['Id'].copy()\n\nX_final.set_index('Id', inplace=True)\nX_final = X_final[feature_names]","30f15a8e":"y_pred_final = final_model.predict(X_final)\n\npreds_final['Price'] = y_pred_final\npreds_final.to_csv('.\/predictions.csv', index=False, encoding='utf-8', sep=',')\n\npreds_final.head()","a5cde1f5":"#### \u041d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","6ba78bc0":"Rooms","8b540fc3":"#### \u0422\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","e98df9c6":"#### \u0413\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u043b\u0438\u0441\u044c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 randomized_search()\nlearning_rate=0.1\niterations=1150 \ndepth=8","d2cdbe6b":"\u041d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 **LifeSquare** \u0438 **Healthcare_1**","28414601":"#### \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043c\u043e\u0434\u0435\u043b\u0438","c6d65d14":"\u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043b \u0441 GradientBoostingRegressor, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 R2 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0432\u044b\u0448\u0435 0.72 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c.\n\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b \u0441\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440 \u043d\u0430 CatBoostRegressor.","adcffc0f":"\u041f\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 **HouseYear**, **HouseFloor**, **Square** \u0438 **LifeSquare**.","f88c829e":"## \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","4c0f559c":"#### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430","0252b9f8":"#### \u0412\u044b\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b","3ce6d1a5":"## \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441","81ce6293":"#### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e","a7148e5e":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u043d\u0435\u0435 3\u0445 \u043c2 \u0438 \u0431\u043e\u043b\u044c\u0448\u0435 30 \u0431\u0443\u0434\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u043c","c7ef1010":"#### \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","7829f88b":"#### \u041f\u0443\u0442\u0438 \u043a \u0444\u0430\u0439\u043b\u0430\u043c","c0def9e9":"\u041e\u0442\u0441\u0435\u0447\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u043d\u044c\u0448\u0435 1 \u0438 \u0431\u043e\u043b\u044c\u0448\u0435 250","bb94a183":"#### \u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","90cc00e7":"#### \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438","2bbae0f7":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","8a7eb856":"\u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043d\u0435\u043f\u043b\u043e\u0445\u043e, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442","d2ef54c8":"#### \u0413\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0446\u0435\u043d\u044b","5a732e5f":"#### \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","2dc6eebe":"## \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","d43ba956":"#### \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u043c\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438","f20b5dac":"## \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","f1a2368d":"\u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b: **HouseYear**, **KitchenSquare**.\n\n\u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u0430\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u044b\u0441\u043e\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043d\u043e \u0432\u043f\u043e\u043b\u043d\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0435: **HouseFloor**, **LifeSquare**, **Rooms**, **Square**. \n\u0418\u0445 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c.","40046f5c":"\u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u043d\u0435\u0435 1 \u0438 \u0431\u043e\u043b\u0435\u0435 5 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c","4ffb3d7c":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u044f\u043c, \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 **Rooms**, **KitchenSquare**, **HouseFloor** \u0438\u043c\u0435\u044e\u0442 \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u0445 \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","460cffb2":"## \u041a\u043b\u0430\u0441\u0441 \u0441 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445","92e7695a":"## \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","5bde6db1":"KitchenSquare"}}