{"cell_type":{"e75db73b":"code","a6524869":"code","50ea565d":"code","c4fa835d":"code","0f22ffc1":"code","cb2e2007":"code","3d98502a":"code","f60e6df8":"code","4b67c975":"code","8a57075c":"code","ddf4e4f2":"code","0db37afe":"code","70138057":"code","4885b747":"code","02ea957b":"code","a9331dd0":"code","d9c3ac40":"code","67b923c3":"code","fc16fdb8":"code","05d0394c":"code","b0041f9e":"code","2ad9a072":"code","14ff0bd5":"code","10732abf":"code","e2240c36":"code","6f49af01":"code","858bcb94":"code","3f25a54b":"markdown","22a92b5a":"markdown","3519c923":"markdown","21d4c7cc":"markdown","459c2372":"markdown","6889a3eb":"markdown","b326178d":"markdown","21b07db6":"markdown"},"source":{"e75db73b":"import pandas as pd\nimport csv\nimport random\nimport math","a6524869":"!ls ..\/input\/pimaindian\npath = \"..\/input\/pimaindian\/pima-indians-diabetes.data.csv\"","50ea565d":"def loadCsv(path):\n    lines = csv.reader(open(path))\n    dataset = list(lines)\n    for i in range(len(dataset)):\n        dataset[i] = [float(x) for x in dataset[i]]\n    return dataset","c4fa835d":"dataset = loadCsv(path)","0f22ffc1":"dataset","cb2e2007":"pdfData = pd.read_csv(path)\nprint(pdfData.shape)","3d98502a":"len(dataset)","f60e6df8":"def splitDataset(dataset, splitRatio):\n    trainSize = int(len(dataset) * splitRatio)\n    trainSet = []\n    copy = list(dataset)\n    while len(trainSet) < trainSize:\n        index = random.randrange(len(copy))\n        trainSet.append(copy.pop(index))\n    return [trainSet, copy]","4b67c975":"dataset = [[1], [2], [3], [4], [5]]\nsplitRatio = 0.67 # (2\/1)\ntrain, test = splitDataset(dataset, splitRatio)\nprint('Split {0} rows into train with {1} and test with {2}'.format(len(dataset), train, test))","8a57075c":"# Label is the las value in the vector\n# Separated by label\ndef separateByClass(dataset):\n    separated = {}\n    for i in range(len(dataset)):\n        vector = dataset[i]\n        if (vector[-1] not in separated):\n            separated[vector[-1]] = []\n        separated[vector[-1]].append(vector)\n    return separated","ddf4e4f2":"dataset = [[1,20,1], [2,21,0], [3,22,1]]\nseparated = separateByClass(dataset)\nprint('Separated instances: {0}'.format(separated))","0db37afe":"def mean(numbers):\n    # TODO:\n    sum = 0\n    for num in numbers:\n        sum += num\n    \n    mean = sum \/ len(numbers)\n    return mean\n\ndef stdev(numbers):\n    # TODO:\n    meann = mean(numbers)\n    sum = 0\n    for num in numbers:\n        sum += (num - meann) ** 2\n    \n    stdev = math.sqrt(sum \/ len(numbers))    \n    return stdev","70138057":"def summarize(dataset):\n    data = zip(*dataset)\n    \n    summaries = [(mean(attribute), stdev(attribute)) for attribute in zip(*(dataset))]\n    \n    del summaries[-1]\n    return summaries","4885b747":"def summarizeByClass(dataset):\n    separated = separateByClass(dataset)\n    summaries = {}\n    for classValue, instances in separated.items():\n        summaries[classValue] = summarize(instances)\n    return summaries","02ea957b":"## Print out (mean, std) value for each class \ndataset = [[1,20,1], [2,21,0], [3,22,1], [4,22,0]]\n# summary = summarizeByClass(dataset)\nprint('Summary by class value: (class:\\n{0}'.format(summary))","a9331dd0":"## Gaussian Probability Density Function\n# --- #\n# We can use a Gaussian function to estimate the probability of a given attribute value, \n# given the known mean and standard deviation for the attribute estimated from the training data\n# https:\/\/en.wikipedia.org\/wiki\/Gaussian_function\ndef calculateProbability(x, mean, stdev):\n    \"\"\"\n    Calculate the probability of instance x belong to the class with (mean, stdev) value\n    \"\"\"\n    # TODO\n    Probability = (1 \/ (math.sqrt( 2 * math.pi ) * stdev)) * math.exp( - ((x - mean) ** 2) \/ (2 * (stdev**2)))\n    return Probability","d9c3ac40":"# Test the above function\nx = 71.5\nmea = 73\nstde = 6.2\nprobability = calculateProbability(x, mea, stde)\nprint('Probability of belonging to this class: {0}'.format(probability))\n# Expected value: 0.06248965759370005","67b923c3":"## Calculate class probability\n# --- #\ndef calculateClassProbabilities(summaries, inputVector):\n    \"\"\"\n    Given the input vector, calculate the probability of the instance belong to each class\n    \"\"\"\n    probabilities = {}\n    sum = 0\n    # TODO:\n    for dis in summaries:\n        InstanceProbability = calculateProbability(inputVector[0], summaries[dis][0][0], summaries[dis][0][1])\n        probabilities[dis] = InstanceProbability\n        sum += InstanceProbability\n    \n    for key in probabilities:\n        probabilities[key] \/= sum\n    \n    return probabilities","fc16fdb8":"# Test the above function\nsummaries = {0:[(1, 0.5)], 1:[(20, 5.0)]}\ninputVector = [1.1, \"?\"]\nprobabilities = calculateClassProbabilities(summaries, inputVector)\nprint(\"Probabilities for each class: {0}\".format(probabilities))","05d0394c":"## Make the prediction\ndef predict(summaries, inputVector):\n    probabilities = calculateClassProbabilities(summaries, inputVector)\n    bestLabel, bestProb = None, -1\n    for classValue, probability in probabilities.items():\n        if bestLabel is None or probability > bestProb:\n            bestProb = probability\n            bestLabel = classValue\n    return bestLabel","b0041f9e":"# Test the above function\nsummaries = {\"A\":[(1, 0.5)], \"B\":[(20, 5.0)]}\ninputVector = [1.1, \"?\"]\nresult = predict(summaries, inputVector)\nprint(\"Prediction: {0}\".format(result))","2ad9a072":"## Run the preduction for the set\ndef getPredictions(summaries, testSet):\n    predictions = []\n    for i in range(len(testSet)):\n        result = predict(summaries, testSet[i])\n        predictions.append(result)\n    return predictions","14ff0bd5":"summaries = {\"A\":[(1, 0.5)], \"B\":[(20, 5.0)]}\ntestSet = [[1.1, \"?\"], [19.1, \"?\"]]\npredictions = getPredictions(summaries, testSet)\nprint(\"Predictions: {0}\".format(predictions))","10732abf":"## Check the performance\ndef getAccuracy(testSet, predictions):\n    correct = 0\n    for x in range(len(testSet)):\n        if testSet[x][-1] == predictions[x]:\n            correct += 1\n    return (correct\/float(len(testSet))) * 100.0","e2240c36":"testSet = [[1,1,1,'a'], [2,2,2,'a'], [3,3,3,'b']]\npredictions = ['a', 'a', 'a']\naccuracy = getAccuracy(testSet, predictions)\nprint('Accuracy: {0}'.format(accuracy))","6f49af01":"def main():\n    filename = \"..\/input\/pimaindian\/pima-indians-diabetes.data.csv\"\n    splitRatio = 0.67\n    dataset = loadCsv(filename)\n    trainingSet, testSet = splitDataset(dataset, splitRatio)\n    print(\"Split {0} rows into train={1} and test={2} rows\"\n          .format(len(dataset), len(trainingSet), len(testSet)))\n    # prepare model\n    summaries = summarizeByClass(trainingSet)\n    # test model\n    predictions = getPredictions(summaries, testSet)\n    accuracy = getAccuracy(testSet, predictions)\n    print(\"Accuracy: {0}%\".format(accuracy))","858bcb94":"main()","3f25a54b":"### 3. Make prediction","22a92b5a":"### 1. Load data","3519c923":"### 4. Test on the data","21d4c7cc":"The first thing we need to do is load our data file","459c2372":"The first task is to separate the training dataset instances by class value so that we can calculate statistics for each class.","6889a3eb":"#### Data Distribution for the Dataset","b326178d":"We need to calculate the mean of each attribute for a class value. The mean is the central middle or central tendency of the data, and we will use it as the middle of our gaussian distribution when calculating probabilities.","21b07db6":"### 2. Summarize data"}}