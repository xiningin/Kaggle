{"cell_type":{"ca8642de":"code","04f8870a":"code","ed2c646f":"code","4424e71b":"code","be4b4112":"code","2027d23a":"code","bfcc9b8b":"code","ed27122a":"code","9e28491f":"code","1bf3624f":"code","9595acc6":"code","4797029f":"code","555b25f4":"code","aa1f7f33":"code","7bb3196b":"code","86f9a550":"code","9d357e06":"code","c39a1c63":"markdown","10119fbe":"markdown","22e23ff3":"markdown","93fe4e92":"markdown","e6213137":"markdown","f0cc65c7":"markdown","f77cccbb":"markdown","8c7515c2":"markdown","d14f2265":"markdown","72c4b343":"markdown","311af341":"markdown","8c7a7f87":"markdown","e3b40f00":"markdown","750df110":"markdown","590f9359":"markdown","951006b4":"markdown","2c130f62":"markdown","ee3be28a":"markdown"},"source":{"ca8642de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04f8870a":"hit = pd.read_csv('..\/input\/kbo-baseball-for-kaggle\/2019_kbo_for_kaggle_v2.csv')\nhit","ed2c646f":"hit.columns","4424e71b":"topSals = hit.sort_values(by = ['salary'], ascending  = False)\ntopSals['salary']","be4b4112":"plt.plot(hit[['avg', 'salary']])\nplt.xlabel('Avg')\nplt.ylabel('Salary')\nplt.show()","2027d23a":"plt.scatter(x = hit['avg'], y = hit['salary'])\nplt.xlabel('Avg')\nplt.ylabel('Salary')\nplt.show()","bfcc9b8b":"plt.scatter(x = hit['OPS'], y = hit['salary'])\nplt.xlabel('OPS')\nplt.ylabel('Salary')\nplt.show()","ed27122a":"sns.scatterplot(x = hit['OPS'], y = hit['salary'], hue = hit['age']>30)\nplt.xlabel('OPS')\nplt.ylabel('Salary')\nplt.show()","9e28491f":"sns.scatterplot(x = hit['war'], y = hit['salary'])","1bf3624f":"sns.heatmap(data=hit[['avg', 'war', 'OPS']])","9595acc6":"plt.plot(hit[['1B','2B','3B','HR']])\nplt.xlabel('Index')\nplt.ylabel('Hits')\nplt.legend(['1B','2B','3B','HR'])\nplt.show()","4797029f":"counts = [hit['1B'].sum(), hit['2B'].sum(), hit['3B'].sum(), hit['HR'].sum()]\ntotal_hits = hit['H'].sum()\ncounts ","555b25f4":"plt.plot(counts)\nplt.show()","aa1f7f33":"plt.plot(counts)\nplt.title('Hits per Type')\nplt.xticks([0,1,2,3], ['1B','2B','3B', 'HR'])\nplt.show()","7bb3196b":"plt.bar(['1B','2B','3B', 'HR'], counts)","86f9a550":"plt.pie(counts)\nplt.legend(['1B','2B','3B','HR'])\nplt.title('Hits per Type')\nplt.show()","9d357e06":"plt.pie(counts[:4], labels = ['1B','2B','3B','HR'], autopct='%1.1f%%')\n\nplt.title('Hits per Type - Hits + Labels')\nplt.show()","c39a1c63":"Now lets take a look at hits. Whether they were singles(1B), doubles(2B), triples(3B), or homeruns(HR). Lets see if we can visualize the data.","10119fbe":"Lets try a plot so see what is looks like.","22e23ff3":"So this is a lot better, but wouldn't it be great to see the numbers.","93fe4e92":"This better, but still not useful. Lets try to make better labels and see if that helps","e6213137":"The heatmap takes the index and what was specified from the data set. It can be an effective graph but here it is useless. ","f0cc65c7":"As we can see, a line plot doesn't tell us anything. So we know that this isn't a good representation of the data. What if we tried a different kind of plot?","f77cccbb":"Let's look at average and salary.","8c7515c2":"We can see that this graph shows the data a little better. It seems like there are a large amount of players inbetween .2 and .4. The highest paid are closer to .4, which means that players are being paid somewhat equitably.","d14f2265":"Better. The labels are better and the percentages are now shown and we can see the relation between types better than the other 2 options.","72c4b343":"Now we can see each type, but a line plot doesn't really help us visualize the the total make-up of hit types in the data. So lets try a different graph, like a bar graph.","311af341":"Pretty good. It shows the difference well, but it is similar to the line graph in the way the data is visualized. There is a better graph out there, like a pie chart.","8c7a7f87":"Lests look at all the columns avalible to us.","e3b40f00":"WAR is the new thing in baseball. It is supposed to be an all encompassing stat. We can see that there is a great range and doesn't tell us anything","750df110":"OPS contians onbase percentage and slugging percentage. It is supposed to tell the complete picture of a hitter. We can see that the highest paid players are at the to of the pay range for the most part.","590f9359":"This data is the hitting statistics from the KBO - Korean Baseball Org.","951006b4":"So this doesn't show us much. It is very difficult to read. As a result, we will need to find a better way to visualize the data maybe some data wrangling.","2c130f62":"I didn't expect to see a salary column, it sparks my interest. I wonder if salary corralates to play.\n\nI think it will be useful to look at three key stats:\n* Batting Average (avg)\n* On-base Plus Slugging (OPS)\n* Wins Above Replacement (WAR)","ee3be28a":"Using seaborn's scatterplot we can accounts for differnt ages. The orange is of players over 30. This shows how older players are higher on the pay scale and younger players are not paid as much."}}