{"cell_type":{"cc09a5da":"code","39fd52d3":"markdown","ce95226d":"markdown"},"source":{"cc09a5da":"import math\n\n\n\ndef distance(p1, p2):\n    d1 = p1[0] - p2[0]\n    print(d1)\n\n    d2 = p1[1] - p2[1]\n    print(d1)\n\n    s1 = d1 ** 2\n    print(s1)\n\n    s2 = d2 ** 2\n    print(s2)\n\n    t = s1 + s2\n    print(t)\n\n    d = math.sqrt(t)\n\n    return d\n\n\ndef distance2(p1, p2):\n    return math.sqrt(((p1[0] - p2[0]) ** 2) + ((p1[1] - p2[1]) ** 2))\n\n\nprint(distance([3.5, 3.5], [5.5, 5.5]))\nprint(distance2([3.5, 3.5], [5.5, 5.5]))\n\nlocations = [\n    [9, 0],\n    [2, 5],\n    [2, 6],\n    [8, 0],\n    [9, 9],\n]\ncurrent = [4, 6]\n\n\ndef find_nearest(current, locations):\n    best = None\n    best_index = 0\n\n    for index in range(0, len(locations)):\n        item = locations[index]\n\n        d = distance2(item, current)\n\n        if best is None or d < best:\n            best = d\n            best_index = index\n\n        index += 1\n    return [best_index, best]\n\n\nresult = find_nearest(current, locations)\n\nprint(result)\n\n\ndef isNearest(x, y):\n    b = locations[result[0]]\n    if b[0] == x and b[1] == y:\n        return True\n    return False\n\n\ndef isStarbucks(x, y):\n    index = 0\n    for s in locations:\n        if s[0] == x and s[1] == y:\n            return index\n        index += 1\n    return False\n\n\ndef print_grid(n):\n    output = \"\"\n    for x in range(0, n):\n        for y in range(0, n):\n            i = isStarbucks(x, y)\n            if closest_point[0] == x and closest_point[1] == y:\n                    output += \" O\"                \n            elif current[0] == x and current[1] == y:\n                output += \" x\"\n            elif i is not False:\n                if isNearest(x,y):\n                    output += str(i) + \"v\"\n                else:\n                    output += str(i) + \"*\"\n            else:\n                output += \" .\"\n\n        output += \"\\n\"\n\n    print(output)\n\nsize = 10\n\noptions = []\n\nclosest = 100\nclosest_point = []\nfor x in range(0,size):\n    for y in range(0,size):\n            distances = []\n            for index in range(0, len(locations)):\n                item = locations[index]\n                d = distance2(item, [x,y])\n                distances.append(d)\n            average = sum(distances)\/len(distances)\n            if average < closest:\n                closest_point = [x,y]\n                closest = average\nprint(\"OPTIMAL: \", closest_point, closest)\n    \n\nprint_grid(size)\n\n# what is the shortest path from the current location to visit all,\n#  and then return to the start.\n","39fd52d3":"# Solution:","ce95226d":"# Nearest Starbucks\nFinde nearest\nfind the distance beteen the current point\nand all know points\nsort by distance to find the lowest distance\nreturn the point\n\ndisplay ascii grid\nmark the locations\nindicate the current position and the nearest\n\nmark current with x and nearest with v\nnumber can represent index of each location\ne.g.\n```\nOPTIMAL:  [5, 4] 4.76556148451152\n . . . . . . . . . .\n . . . . . . . . . .\n . . . . .1*2v . . .\n . . . . . . . . . .\n . . . . . . x . . .\n . . . . O . . . . .\n . . . . . . . . . .\n . . . . . . . . . .\n3* . . . . . . . . .\n0* . . . . . . . .4*\n \n \n data:\n def distance(p1, p2):\n    return math.sqrt(((p1[0] - p2[0]) ** 2) + ((p1[1] - p2[1]) ** 2))\n\n# USE: \n# print(distance([3.5, 3.5], [5.5, 5.5]))\n\nlocations = [\n    [9, 0],\n    [2, 5],\n    [2, 6],\n    [8, 0],\n    [9, 9],\n]\ncurrent = [4, 6]\n\n```\nExtra Credit.\nWhere would we put a managers office ?\nWhat is the x,y of the the smallest average distance to all the listed reatil locations.\nPlot that also with the letter O.\n"}}