{"cell_type":{"a69a0bb8":"code","0064dac1":"code","72184f99":"code","f9dcd4b1":"code","db09c42e":"code","7e568791":"code","3a378435":"code","0da028c6":"code","766254d2":"code","377d79ce":"code","197a5951":"code","f99e783f":"code","6672e8b2":"code","3b41bdc5":"code","2b31b7bf":"code","8b80ca39":"code","2a9dc2f8":"code","d01105d8":"code","ccbbcede":"code","38fcdb65":"code","1662c120":"code","12290ff6":"code","e8657f8f":"code","f5abd2d9":"code","123d2435":"code","f08ec29c":"code","ea1fa773":"code","83f6749d":"code","8228e5db":"code","c9587739":"code","72a0cb4a":"code","e6fdd783":"code","a9bacae4":"code","06534bf4":"code","98955ab2":"code","bf4f55c4":"code","579df2ca":"code","c8ed28c8":"code","e7242c7f":"code","540aece0":"code","66738bab":"code","706aaf35":"code","8bb64068":"code","7dc158b6":"code","c239167d":"code","270cefbc":"code","bb45844d":"code","75015849":"code","551cc6a3":"code","bc3493f2":"code","ad04657c":"code","aea27da1":"code","6c00afe4":"code","68ba972d":"code","e888eda4":"code","896ea06b":"code","c3c990af":"code","faef29c7":"code","9a11582c":"code","c83e45f2":"code","3902222d":"code","03b50e29":"code","6c78e78e":"code","c1bafeb0":"code","de7c58e2":"code","773f9164":"code","138b5f6c":"code","77e00730":"code","1d92e217":"code","4d67c486":"code","dd4f6841":"code","8bab7bc9":"code","162297dd":"code","f38465cf":"code","e78f6cff":"code","86811a03":"code","6e295a01":"code","d979d95c":"code","24267e9f":"code","0ad44db9":"code","f4f318b7":"code","18aa7dd1":"code","5e59f68d":"code","cc85f9b3":"code","67e2a403":"code","f927279c":"code","b6d02667":"code","84c08f48":"code","cb2510b5":"code","d7ccafb8":"code","0252fa44":"code","c4c9c53d":"code","391658ba":"code","0979a154":"code","3e50d3ca":"code","2558bc13":"code","e3c0abac":"code","65c9a166":"code","45d8e2c3":"code","7d7f45d4":"code","0fbe55b5":"code","0fcb81c0":"code","d44db3ac":"code","01c13adb":"code","eb60f710":"code","cdf5290f":"code","46b34016":"code","566d0c8a":"code","52bb9072":"code","ee7f27b0":"code","7c95998d":"code","1e19cfe5":"code","e8bf6b88":"code","71b98491":"code","791e6af3":"code","2b82ffdc":"code","915459f1":"code","27f147bd":"code","d007700b":"code","d748a300":"code","b1e8fe29":"code","9edafa01":"code","8bb83a06":"code","587cf546":"code","9dc4ee20":"code","eb409af5":"code","2eb2bb12":"code","99cfd315":"code","b9e8aea6":"code","00500eba":"code","4e9a0f2d":"code","dd806dc3":"markdown","d8512e21":"markdown","5281f7d3":"markdown","bb6c8aec":"markdown","ac2b214a":"markdown","e1aa0e54":"markdown","419a62ab":"markdown","aa5fca60":"markdown","c0ae9c54":"markdown","ef6ef4a5":"markdown","0e473ccf":"markdown","853e3ffb":"markdown","0f9f6eb1":"markdown","5ad0cea4":"markdown","d592e135":"markdown","849ce316":"markdown","a9bcfe78":"markdown","f631ea67":"markdown","45a0b84e":"markdown","cfbb4a18":"markdown","e2633e05":"markdown","dbe7ec5b":"markdown","9b6b3a80":"markdown","0d507943":"markdown","cbda8632":"markdown","b03c2cc8":"markdown","59af5fa9":"markdown","7f21a439":"markdown","b4c6d067":"markdown","d57bc4be":"markdown","71f5ca4a":"markdown","7c220000":"markdown","98ff492d":"markdown","1c1babd4":"markdown","5b81624a":"markdown","9253fc5d":"markdown","239ef12e":"markdown","45cf3f61":"markdown","f42c4b71":"markdown","63832a9e":"markdown","2403236b":"markdown","08a3d823":"markdown","eaec1313":"markdown","826e1016":"markdown","73317735":"markdown","37eb18e5":"markdown","56b78457":"markdown","9a4fc0cf":"markdown","4d0d88b2":"markdown","0fa7a367":"markdown","1e976579":"markdown","80fa8828":"markdown","e4aef468":"markdown","9426f6ee":"markdown","5de11262":"markdown","3e62f9d6":"markdown","5d845f1e":"markdown","97b42490":"markdown","ac1d528b":"markdown","89b77f42":"markdown","694a87bd":"markdown","c8111c85":"markdown","7df73dac":"markdown","43c7f570":"markdown","2c85d24f":"markdown","da064362":"markdown","48793d5d":"markdown","f938e500":"markdown","0b81916a":"markdown","b817fe19":"markdown"},"source":{"a69a0bb8":"# Nanti semua import di masukin di awal aja","0064dac1":"# For Dataset handling\nimport numpy as np\nimport pandas as pd\n\n# For Checking Distribution Data\nfrom scipy.stats import chisquare, kstest, normaltest\n\n# For Data Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","72184f99":"df = pd.read_csv('..\/input\/bank-marketing-campaigns-dataset\/bank-additional-full.csv', delimiter=';')","f9dcd4b1":"pd.set_option('display.max_columns', None)","db09c42e":"df.head()","7e568791":"((df['y'].value_counts()\/len(df))*100).round(2)","3a378435":"sizes = list(df['y'].value_counts().sort_values().values)\nlabels = list(df['y'].value_counts().sort_values().index)\n\nexplode = [0, 0.1]\n\nplt.figure(figsize=(6,6))\nplt.pie(sizes, labels=labels, explode = explode,\n        autopct=lambda p:f'{p:.2f}%')\nplt.title('Deposit Succeed', fontsize=25)\nplt.tight_layout()\nplt.show()","0da028c6":"cek = [\"age\", \"duration\", \"campaign\",\"pdays\",\"previous\",\"emp.var.rate\",\"cons.conf.idx\"]","766254d2":"alpha = 0.05","377d79ce":"for i in cek:\n    print ([i])\n    a, b = normaltest(df[i])\n    print(\"statistic\", a, \"pvalue\", b)\n    if b < alpha :\n        print(\"Distribution not normal\")\n    else :\n        print(\"Distribution normal\")\n\n","197a5951":"df.info()","f99e783f":"df.describe().T","6672e8b2":"df.describe(include = 'object').T","3b41bdc5":"dataDesc= []\n\nfor i in df.columns:\n    dataDesc.append([\n        i, \n        df[i].dtypes,\n        df[i].isna().sum(),\n        round((((df[i].isna().sum()) \/ len(df)) * 100),2),\n        df[i].nunique(),\n        df[i].sample(20).drop_duplicates().values\n    ])\npd.DataFrame(dataDesc, columns=[\n    \"Data features\", \n    \"Data types\",\n    \"Null\",\n    \"Null Percentage\",\n    \"Unique\",\n    \"Unique Sample\"\n])","2b31b7bf":"df[df.duplicated()]","8b80ca39":"df.drop_duplicates(keep='first',inplace=True)\ndf.info()","2a9dc2f8":"for column in ['job','marital','education','default', 'housing', 'loan']:\n    df[column] = df[column].replace('unknown', np.NaN)","d01105d8":"df.isna().sum()","ccbbcede":"for column in ['job','marital','education','default', 'housing', 'loan']:\n    df[column].fillna(df[column].mode()[0], inplace=True)","38fcdb65":"df.isna().sum()","1662c120":"plt.figure(figsize=(12,8))\nsns.boxplot(data=df, x=\"age\", hue='y')\n\nplt.show()","12290ff6":"plt.figure(figsize=(12,8))\nsns.boxplot(data=df, x=\"age\", y=\"job\", hue='y')","e8657f8f":"plt.figure(figsize=(12,8))\nsns.boxplot(data=df, x=\"campaign\", hue='y')\n\nplt.show()","f5abd2d9":"plt.figure(figsize=(12,8))\nsns.boxplot(data=df, x=\"cons.conf.idx\", hue='y')\n\nplt.show()","123d2435":"plt.figure(figsize=(12,8))\nsns.boxplot(data=df, x=\"cons.conf.idx\", y=\"job\", hue='y')","f08ec29c":"## checking data pattern of each column ","ea1fa773":"df['y'] = df['y'].apply(lambda y: 1 if y == 'yes' else 0)","83f6749d":"bin_age = [16, 32, 47, 100]\nlabel_age = ['Young Adult', 'Productive Adult', 'Elderly']","8228e5db":"df['age_group'] = pd.cut(df['age'], bins=bin_age, labels=label_age)","c9587739":"df['age_group'].value_counts()","72a0cb4a":"df.head()","e6fdd783":"plt.figure(figsize=(15, 8))\nsns.countplot(x=df[\"age_group\"],hue=df[\"y\"], data=df, palette='mako')\nplt.title('Age Group Comparison')\nplt.show()","a9bacae4":"age = ((pd.crosstab(index= df[\"age_group\"], columns= df[\"y\"], normalize=\"index\"))*100).round(2)\nage\nage.sort_values(1,ascending=False)","06534bf4":"df['marital'].value_counts()","98955ab2":"df['Marital_Status'] =  df['marital'].map({'married' : 'married','single': 'not married','divorced':'not married'})","bf4f55c4":"df['Marital_Status'].value_counts()","579df2ca":"plt.figure(figsize=(15, 8))\nsns.countplot(x=df[\"Marital_Status\"],hue=df[\"y\"], data=df, palette='mako')\nplt.title('Marital Status Comparison')\nplt.show()","c8ed28c8":"Marital = ((pd.crosstab(index= df[\"Marital_Status\"], columns= df[\"y\"], normalize=\"index\"))*100).round(2)\nMarital.sort_values(1,ascending=False)","e7242c7f":"df['job'].value_counts()","540aece0":"job_map = { 'entrepreneur' : 'self-employed'\n    \n}\n\ndf['Job_Type'] = df['job'].replace(job_map)\ndf['Job_Type'].value_counts()","66738bab":"plt.figure(figsize=(15, 8))\nsns.countplot(x=df[\"Job_Type\"],hue=df[\"y\"], data=df, palette='mako')\nplt.title('Job Type Comparison')\nplt.show()","706aaf35":"job = (pd.crosstab(index=df[\"Job_Type\"], columns= df[\"y\"], normalize= \"index\") *100).round(2)\njob.sort_values(1, ascending=False)","8bb64068":"df['education'].value_counts()","7dc158b6":"edu_map = { 'high.school' : 'school', 'basic.9y' : 'school', 'basic.4y' : 'school', 'basic.6y' : 'school'\n    \n}\n\ndf['Edu_Cat'] = df['education'].replace(edu_map)\ndf['Edu_Cat'].value_counts()","c239167d":"plt.figure(figsize=(15, 8))\nsns.countplot(x=df[\"Edu_Cat\"],hue=df[\"y\"], data=df, palette='mako')\nplt.title('Education Campaign Comparison')\nplt.show()","270cefbc":"edu = (pd.crosstab(index=df[\"Edu_Cat\"], columns= df[\"y\"], normalize= \"index\") *100).round(2)\nedu.sort_values(1, ascending=False)","bb45844d":"def pcat(x):\n    if x == 999:\n        return 'Never'\n    else:\n        return 'Yes'","75015849":"df['pdays'] = df['pdays'].apply(pcat)","551cc6a3":"cat =['default',\n 'housing',\n 'loan',\n 'contact',\n 'poutcome',\n 'pdays']\ncat","bc3493f2":"fig, ax = plt.subplots(2,3, figsize=(20,17))\n\ncat \n\nax = ax.ravel()\nposition = 0\nfor i in cat:\n    \n    order = df[i].value_counts().index\n    sns.countplot(data=df, x=i, ax=ax[position], hue='y', palette='GnBu', order=order)\n    ax[position].tick_params(labelrotation=90)\n    ax[position].set_title(i, fontdict={'fontsize':17})\n    \n    position += 1\n\nplt.subplots_adjust(hspace=0.7)\n\nplt.show()","ad04657c":"socio_economic = df.select_dtypes(['int64', 'float64'])\nsocio_economic = socio_economic.drop(columns=['age','duration','campaign','previous','y'])\nsocio_economic.head()","aea27da1":"fig, ax = plt.subplots(3,3, figsize=(20,17))\n\nsocio_economic\n\nax = ax.ravel()\nposition = 0\nfor i in socio_economic:\n    \n    #order = df[i].value_counts().index\n    sns.histplot(data=socio_economic, x=socio_economic[i], ax=ax[position], hue=df['y'], palette='GnBu', bins=8)\n    ax[position].tick_params(labelrotation=90)\n    ax[position].set_title(i, fontdict={'fontsize':17})\n    \n    position += 1\n\nplt.subplots_adjust(hspace=0.7)\n\nplt.show()","6c00afe4":"df['month'].unique()","68ba972d":"plt.figure(figsize=(15, 8))\nsns.countplot(data=df, x=df['month'], hue='y', palette='GnBu')\nplt.title('Education Campaign Comparison')\nplt.show()\n","e888eda4":"month = (pd.crosstab(index=df[\"month\"], columns= df[\"y\"], normalize= \"index\") *100).round(2)\nmonth.sort_values(1, ascending=False)","896ea06b":"comb = (pd.crosstab(index=[df[\"month\"],df[\"day_of_week\"]], columns= df[\"y\"], normalize= \"index\")*100).round(2)\ncomb.sort_values(1, ascending=False).head(5)","c3c990af":"cm = df[df.select_dtypes(['int64', 'float64']).columns].corr()\n\nf , ax = plt.subplots(figsize = (14,12))\nsns.heatmap(cm, cbar=True, \n            annot=True, \n            square=True, \n            fmt='.2g', \n            annot_kws={'size': 10},\n           )\nax.set_xticklabels(ax.get_xticklabels(),rotation=40)\nax.set_yticklabels(ax.get_yticklabels(),rotation=0)\n\nplt.show()","faef29c7":"df.isna().sum()","9a11582c":"from sklearn.model_selection import train_test_split,GridSearchCV,RandomizedSearchCV,StratifiedKFold\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import RobustScaler,PolynomialFeatures,PowerTransformer,OneHotEncoder\nfrom sklearn.compose import ColumnTransformer","c83e45f2":"df.head()","3902222d":"df = df.drop(columns=[\"month\"])\ndf = df.drop(columns=[\"day_of_week\"])\ndf = df.drop(columns=[\"duration\"])\ndf = df.drop(columns=[\"campaign\"])","03b50e29":"df.head()","6c78e78e":"df['loan'].value_counts()","c1bafeb0":"df = df.drop(columns=[\"age\"])\ndf = df.drop(columns=[\"job\"])\ndf = df.drop(columns=[\"marital\"])\ndf = df.drop(columns=[\"education\"])\ndf = df.drop(columns=[\"nr.employed\"])","de7c58e2":"df.head()","773f9164":"df.tail()","138b5f6c":"x = df.drop(columns='y')\ny = df['y']","77e00730":"x.shape","1d92e217":"x_train,x_test,y_train,y_test = train_test_split(x,y,train_size=.80,stratify=y,random_state=42)","4d67c486":"from sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV, cross_val_score\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score, confusion_matrix, classification_report, roc_curve,roc_auc_score","dd4f6841":"def log_evaluation(data_sample_train,data_sample_test, aktual_train,aktual_test, model):\n    hasil_model_train = model.predict(data_sample_train)\n    accuracy_train = accuracy_score(aktual_train, hasil_model_train)\n    recall_train = recall_score(aktual_train, hasil_model_train)\n    precision_train = precision_score(aktual_train, hasil_model_train)\n    f1_train = f1_score(aktual_train, hasil_model_train)\n    rocauc_train = roc_auc_score(aktual_train,hasil_model_train)\n\n    hasil_model_test = model.predict(data_sample_test)\n    accuracy_test = accuracy_score(aktual_test, hasil_model_test)\n    recall_test = recall_score(aktual_test, hasil_model_test)\n    precision_test = precision_score(aktual_test, hasil_model_test)\n    f1_test = f1_score(aktual_test, hasil_model_test)\n    rocauc_test = roc_auc_score(aktual_test,hasil_model_test)\n    \n    cm = confusion_matrix(aktual_test, hasil_model_test, labels=[1,0])\n    df_cm = pd.DataFrame(cm, index = [\"akt1\", \"akt0\"],columns=[\"pred 1\" , \"pred 0\"])\n    cr = classification_report(aktual_test, hasil_model_test)\n\n\n    hasil_evaluation = pd.DataFrame(data= {\"Training\" : [accuracy_train, recall_train, precision_train,f1_train,rocauc_train],\"Testing\" : [accuracy_test, recall_test, precision_test,f1_test,rocauc_test]}, index=[\"accuracy\", \"recall\" , \"precission\", \"F1 Score\", \"ROCAUC\"] )\n\n    return hasil_model_train, hasil_model_test, hasil_evaluation, df_cm, cr","8bab7bc9":"df.head()","162297dd":"num_columns = ['previous','emp.var.rate','cons.price.idx','cons.conf.idx',\"euribor3m\",]\n\ncat_columns = [\"Marital_Status\", \"default\",\"housing\",\"loan\",\"contact\",\"pdays\",\"poutcome\",\"Job_Type\",\"age_group\",\"Edu_Cat\"]\n\nbinary_columns = [\"Marital_Status\", \"default\",\"housing\",\"loan\",\"contact\",\"pdays\"]\n\nOH_columns = [\"poutcome\",\"Job_Type\"]\n\nordinal1_columns = [\"age_group\"]\n\nordinal2_columns = [\"Edu_Cat\"]","f38465cf":"from sklearn.preprocessing import OrdinalEncoder, OneHotEncoder, LabelEncoder","e78f6cff":"num_pipeline = Pipeline([\n    ('imputer',SimpleImputer(strategy='mean'))\n])\n\n\ncat_pipeline = Pipeline([\n    ('encoder',OneHotEncoder())\n])\n\n\n\npreprocessor = ColumnTransformer([\n    ('numeric',num_pipeline,num_columns),\n    ('categoric1',cat_pipeline,cat_columns),\n \n])\n\nPipe_lr = Pipeline([\n    ('prep',preprocessor),\n    ('algo',LogisticRegression(solver='liblinear'))\n\n])","86811a03":"Pipe_lr.fit(x_train,y_train)","6e295a01":"lr_hasil_train, lr_hasil_test, lr_evaluation, lr_cm, lr_cr = log_evaluation(x_train, x_test, y_train, y_test, Pipe_lr)","d979d95c":"lr_evaluation","24267e9f":"lr_cm","0ad44db9":"print(lr_cr)","f4f318b7":"\n\nnum_pipeline = Pipeline([\n    ('imputer',SimpleImputer(strategy='mean')),\n    ('scaler',RobustScaler())\n])\n\n\ncat_pipeline = Pipeline([\n    ('encoder',OneHotEncoder())\n])\n\n\n\npreprocessor = ColumnTransformer([\n    ('numeric',num_pipeline,num_columns),\n    ('categoric1',cat_pipeline,cat_columns)\n    \n])\n\nPipe_SVC = Pipeline([\n    ('prep',preprocessor),\n    ('algo',SVC(max_iter=300,probability=True))\n\n])","18aa7dd1":"Pipe_SVC.fit(x_train,y_train)","5e59f68d":"svm_hasil_train, svm_hasil_test, svm_evaluation, svm_cm, svm_cr = log_evaluation(x_train, x_test, y_train, y_test, Pipe_SVC)","cc85f9b3":"svm_evaluation","67e2a403":"svm_cm","f927279c":"print(svm_cr)","b6d02667":"\nnum_pipeline = Pipeline([\n    ('imputer',SimpleImputer(strategy='mean'))\n])\n\n\ncat_pipeline = Pipeline([\n    ('encoder',OneHotEncoder())\n])\n\n\n\npreprocessor = ColumnTransformer([\n    # ('Nama Instruksi',fungsinya, data yang akan dieksekusi dengan fungsi tsb)\n    ('numeric',num_pipeline,num_columns),\n    ('categoric1',cat_pipeline,cat_columns),\n])\n\nPipe_xgb = Pipeline([\n    ('prep',preprocessor),\n    ('algo',GradientBoostingClassifier())\n\n])","84c08f48":"Pipe_xgb.fit(x_train,y_train)","cb2510b5":"xgb_hasil_train, xgb_hasil_test, xgb_evaluation, xgb_cm, xgb_cr = log_evaluation(x_train, x_test, y_train, y_test, Pipe_xgb)","d7ccafb8":"xgb_evaluation","0252fa44":"xgb_cm","c4c9c53d":"print(xgb_cr)","391658ba":"\nnum_pipeline = Pipeline([\n    ('imputer',SimpleImputer(strategy='mean'))\n])\n\n\ncat_pipeline = Pipeline([\n    ('encoder',OneHotEncoder())\n])\n\n\n\npreprocessor = ColumnTransformer([\n    # ('Nama Instruksi',fungsinya, data yang akan dieksekusi dengan fungsi tsb)\n    ('numeric',num_pipeline,num_columns),\n    ('categoric1',cat_pipeline,cat_columns),\n])\n\nPipe_rf = Pipeline([\n    ('prep',preprocessor),\n    ('algo',RandomForestClassifier())\n\n])","0979a154":"Pipe_rf.fit(x_train,y_train)","3e50d3ca":"rf_hasil_train, rf_hasil_test, rf_evaluation, rf_cm, rf_cr = log_evaluation(x_train, x_test, y_train, y_test, Pipe_rf)","2558bc13":"rf_evaluation","e3c0abac":"rf_cm","65c9a166":"print(rf_cr)","45d8e2c3":"skf = StratifiedKFold(n_splits=4)","7d7f45d4":"Pipe_xgb.get_params()","0fbe55b5":"weights2 = np.arange(0.05,0.9,0.05)\nweights2","0fcb81c0":"pm_xgb = {\n    'algo__n_estimators': [1000, 1100, 1200],\n    'algo__max_depth': np.arange(0,100,1),\n   # 'algo__min_samples_split' : np.arange(1,100,1),\n   # 'algo__min_samples_leaf': np.arange(1,100,1),\n    'algo__learning_rate': np.arange(0.1,1,0.05),\n   # \"algo__random_state\" : [42]\n\n}","d44db3ac":"gs_xgb = RandomizedSearchCV(Pipe_xgb, pm_xgb, cv = skf, n_jobs=-1,verbose = -1,scoring=\"balanced_accuracy\", random_state= 3, n_iter=3)","01c13adb":"gs_xgb.fit(x_train,y_train)","eb60f710":"gs_xgb.best_params_","cdf5290f":"xgb_t = gs_xgb.best_estimator_","46b34016":"xgbt_hasil_train, xgbt_hasil_test, xgbt_evaluation, xgbt_cm, xgbt_cr = log_evaluation(x_train, x_test, y_train, y_test, xgb_t)","566d0c8a":"xgbt_evaluation","52bb9072":"xgbt_cm","ee7f27b0":"print(xgbt_cr)","7c95998d":"pd.concat([xgb_evaluation,xgbt_evaluation], axis= 1)","1e19cfe5":"Pipe_rf.get_params()","e8bf6b88":"weights2 = np.arange(0.1,0.9,0.1)\nweights2","71b98491":"pm_rf = {\n    'algo__n_estimators': [1000, 1100, 1200],\n    'algo__max_depth': np.arange(0,100,1),\n    #'algo__min_samples_split' : np.arange(1,200,1),\n    #'algo__min_samples_leaf': np.arange(1,200,1),\n    'algo__class_weight': [{0:x, 1:1.0-x} for x in weights2],\n    #\"algo__random_state\" : [42]\n\n}","791e6af3":"gs_rft = RandomizedSearchCV(Pipe_rf, pm_rf, cv = skf, n_jobs=-1,verbose = -1,scoring=\"balanced_accuracy\", random_state= 3, n_iter=3)","2b82ffdc":"gs_rft.fit(x_train,y_train)","915459f1":"gs_rft.best_params_","27f147bd":"rf_t = gs_rft.best_estimator_","d007700b":"rft_hasil_train, rft_hasil_test, rft_evaluation, rft_cm, rft_cr = log_evaluation(x_train, x_test, y_train, y_test, rf_t)","d748a300":"rft_evaluation","b1e8fe29":"rft_cm","9edafa01":"print(rft_cr)","8bb83a06":"pd.concat([rf_evaluation,rft_evaluation], axis= 1)","587cf546":"pd.concat([xgbt_evaluation,rft_evaluation], axis= 1).round(2)","9dc4ee20":"pd.concat([xgbt_cm,rft_cm], axis= 1)","eb409af5":"prob = xgb_t.predict_proba(x)","2eb2bb12":"tabel_probability = pd.DataFrame(prob)\ntabel_probability","99cfd315":"tabel_probability[1].round(1)","b9e8aea6":"plt.figure(figsize=(15, 8))\nsns.countplot(x= tabel_probability[1].round(1) , data=tabel_probability)\nplt.title('Probality yang akan menerima campaign')\nplt.show()","00500eba":"tabel_probability = tabel_probability.drop(columns=0).round(1)\ntabel_probability","4e9a0f2d":"tabel_probability.value_counts()","dd806dc3":"## E.3 Handling Outliers","d8512e21":"## E.1 check duplicate values","5281f7d3":"## Handling Categorical Feature for Machine Learning","bb6c8aec":"### 3. cons.conf.idx","ac2b214a":"We categorize age into 3 groups :\n16 - 31 = Young Adult\n32 - 46 = Productive Adult\n47 - 100 = Elderly","e1aa0e54":"# E. Data Cleaning","419a62ab":"# A. Problem Definition\n\nPortuegese Bank notied that during May 2008 to November 2010, only few of Bank client agreed to open term deposit. This impacted on how the bank run the business such as : to put the money in more higher rate of return in financial product or to lend the money out to its other clients, thereby receiving a higher interest rate from the borrowers. The bank will not able to continue its bussiness if they have low in assets (in this case is money deposit from the client)\n\nOur team works as Data Scientist in the Portuguese Bank to help business getting more valuable customer who will agree on the future campaign offer, thus increase marketing effieciency. In addition, we will try to define the probability group (in percentage) of customer who will agree to place term deposit. ","aa5fca60":"## Business Questions for Machine Learning\n\n1. How to predict a successful marketing campaign via Telemarketing in order to increase valuable customer who will open term deposit ?","c0ae9c54":"## D.2 Checking Distribution Data","ef6ef4a5":"Comparison before and after parameter tuning","0e473ccf":"Customer with education background Illiterate tend to agree to open term deposit, it reach 22,22%. Following by education background as University Degree which is 13.82%","853e3ffb":"SUMMARY FOR FEATURE HANDLING \n\nall the feature for machine learning will be handled as below\n\nOrdinal Encoding:\n    - Age Group \n    - Edu_Cat\n\nOne-hot Encoding:\n    - poutcome\n    - Job_Type\n\nBinary Encoding:\n    - Marital\n    - Default\n    - Housing\n    - Loan\n    - Contact\n    - pdays","0f9f6eb1":"- From result in statistical data (point D.3), we checked outliers for Age, Campaign and cons.conf.idx features\n- From correlation ratio, we got correlation value for Age and Campaign as much as 0.03 and 0.07 accordingly.","5ad0cea4":"Drop unused column for machine learning","d592e135":"## Which job type tend to open the term deposit ?","849ce316":"## E.2 Handling Missing Value","a9bcfe78":"## Comparison XGBoost and Random Forest after Hyper Parameter Tuning","f631ea67":"## D.1. Checking Data Proportion","45a0b84e":"# F. Exploratory Data Analysis","cfbb4a18":"# Hyperparameter Tuning\n\n## XGBOOST","e2633e05":"We could see that job crammer's v correlation is decrease if we remove cons.conf.idx outliers. Thus, we're NOT removing outliers in \"cons.conf.idx\" features","dbe7ec5b":"# E. Data Correlation and Outliers","9b6b3a80":"Age_group Adult have the highest percentage of customer (87.41%) agree to open the term deposit.","0d507943":"**Statistical Data for Categorical Features**","cbda8632":"### Finding outliers","b03c2cc8":"## Machine Learning Function","59af5fa9":"## Data Splitting","7f21a439":"- Deafult, housing, loan and contact features follow the same trend, there is a group that is mostly targeted and then it descends. The proportion of 'yes' and 'no', is in line with the descends of the targeted number\n- poutcome and pdays features are the past campaign result features. We conclude that customer which never called before is likely to have bigger proportions than customer which had called before","b4c6d067":"**Statistical Data for Numerical Features**","d57bc4be":"### RANDOM FOREST BASE MODEL","71f5ca4a":"## EDA Conclusion\n\n1. Age_group Adult have the highest percentage of customer (87.41%) agree to open the term deposit. Following by young adult and elderly\n2. Married customer tend to opening the deposit with the percentage of 54.83%, and Not Married customer falls for 45.15 % on agree for opening the deposit\n3. We can conclude that Job type Student, Retired and Unemployed customer are top 3 job type of customer who agree to open deposit term\n4. Customer with education background Illiterate tend to agree to open term deposit, it reach 22,22%. Following by education background as University Degree which is 13.82%\n5. - Deafult, housing, loan and contact features follow the same trend, there is a group that is mostly targeted and then it descends. The proportion of 'yes' and 'no', is in line with the descends of the targeted number\n   - poutcome and pdays features are the past campaign result features. We conclude that customer which never called before is likely to have bigger proportions than customer which had called before\n6. - emp.var.rate : The proportion customer agree to open deposit is when emp.var.rate between -2 and -3\n   - cons.price.idx : The proportion customer agree to open deposit is when euribor3m close to 93\n   - cons.conf.idx : The proportion customer agree to open deposit varying across cons.conf.idx value\n   - euribor3m : The proportion customer agree to open deposit is when euribor3m close to 1\n7. - We can see that December on Tuesday and Wednesday are the day when past campaign was getting the highest proportion of \"yes\" answer\n   - Following by March on Tuesday and Wednesday as well","7c220000":"# D. Data Understanding","98ff492d":"Based on value counts above. Telemarketing would focus to NOT calling those who have probability on 0.0 - 0.1 and focus on other probability instead","1c1babd4":"the correlation ratio is a measure of the curvilinear relationship between the statistical dispersion within individual categories","5b81624a":"# How the rest categorical feature impact on customer decision ?","9253fc5d":"## Business Questions for Data Analysis\n1. Which customer age group is the most targeted on previous campaign  ?\n2. Does marital status impact on decision opening term deposit ?\n3. Which job type tend to open the term deposit ?\n4. How customer last education impact on opening term deposit ?\n5. How the rest categorical feature impact on customer decision  ?\n6. How socio economic attribute impact on customer decision ?\n7. Based on previous campaign, when is the best time customer tend to say \"yes\" ?\n","239ef12e":"We could see that job crammer's v correlation is decrease if we remove age outliers. Thus, we're NOT removing outliers in \"age\" features","45cf3f61":"The highest percentage (50.55%) customer tend to say yes is on March, followed by December and September in the second and third place","f42c4b71":"We can see the data is imbalanced with proportion 88.73 % and 11.27 % for No and Yes anwers","63832a9e":"## XGBOOST Base Model","2403236b":"Based on confussion matrix and evaluation matrix above. XGBOOST algorithm is the best model for this dataset. ","08a3d823":"we need to check the correlation of each features towards label 'y'. Besides, doing correlation checking for Feature Selection and EDA, this also would help to decide how to handle it if there is outliers","eaec1313":"## How customer last education impact on opening term deposit ?","826e1016":"- We can see that December on Tuesday and Wednesday are the day when past campaign was getting the highest proportion of \"yes\" answer\n- Following by March on Tuesday and Wednesday as well","73317735":"Married people tend to opening the deposit with the percentage of 54.83%","37eb18e5":"# How socio economic attribute impact on customer decision ?","56b78457":"# Based on previous campaign, when is the best time customer tend to say \"yes\" ?","9a4fc0cf":"I would like to check probability of the \"Yes\" prediction by this model. By knowing this probability, we're able to prioritize which customer to call first and make the telemarketing more efficient","4d0d88b2":"### SVM BASE MODEL","0fa7a367":"# C. About Dataset","1e976579":"## Pipeline Preprocessing","80fa8828":"This dataset is describing Portugal bank marketing campaigns results. Conducted campaigns were based mostly on direct phone calls, offering bank client to place a term deposit.\nIf after all marking afforts client had agreed to place deposit - target variable marked 'yes', otherwise 'no'. It includes following fields:\n\n| Field          | Description                                                                           | Data Type |\n| -------------- | ------------------------------------------------------------------------------------- | ---------|\n| **Bank Client Data**                                                                                   \n| age            | Whether a loan is paid off on in collection| Int |\n| job            | Type of Job                                                   | Categorical |\n| marital        | Marital Status| Categorical |\n| education      | Education Background                                       | Categorical |\n| default        | Does customer have credit in default               | Categorical |\n| housing        | Does customer have housing loan                                                                     | Categorical |\n| loan           | Does customer have personal loan\n| **Last Contact Details related to Campaign**                                                           | Categorical |\n| contact        | Communication type                                                              | Categorical |\n| month          | Last contact month                                                              | Categorical |\n| day_of_week         | Last contact days of week                                                             | Categorical |\n| duration       |   Last contact duration                                                             | Int |\n| **Attributes**                                                           |\n| campaign        |  number of contacts performed during this campaign and for this client                                                               | Int |\n| pdays        | number of days that passed by after the client was last contacted from a previous campaign                                                              | Int |\n| previous          | number of contacts performed before this campaign and for this client (numeric)                                                             | Int |\n| poutcome          | outcome of the previous marketing campaign                                                                | Categorical |\n| **Socio Economic Attr**                                                           |\n| emp.var.rate       | employment variation rate : Cylical employment variation is essentially the variation of how many people are being hired or fired due to the shifts in the conditions of the economy| Int|\n| cons.price.idx | consumer price index  :  measure of the average change over time in the prices paid by urban consumers for a market basket of consumer goods and services | Int|\n| cons.conf.idx | consumer confidence index :  that measures how optimistic or pessimistic consumers are regarding their expected financial situation | Int|\n| euribor3m | euribor 3 month rate - daily indicator :  serangkaian suku bunga referensi yang diterbitkan setiap hari oleh European Money Markets Institute | Int|\n| nr.employed | number of employees - quarterly indicator| Int|\n| y | Target Prediction | \n\n[Moro et al., 2014] S. Moro, P. Cortez and P. Rita. A Data-Driven Approach to Predict the Success of Bank Telemarketing. Decision Support Systems, Elsevier, 62:22-31, June 2014","e4aef468":"in this section we analyse the categorical feature to be then handled, and choosing between which encoder will be used","9426f6ee":"### LOGISTIC REGRESSION BASE MODEL","5de11262":"## D.3 Checking Data Info and Statistical Data","3e62f9d6":"### 2. Campaign","5d845f1e":"Function to simplify evaluation matrix","97b42490":"## Does marital status impact on decision opening term deposit ?","ac1d528b":"After knowing the outliers of age features, we need to know how diverse age outliers towards \"job\" features because \"job\" features has the highest crammers v correlation score and it might be impacted if we remove the outliers","89b77f42":"## Base Modeling","694a87bd":"## Random Forest","c8111c85":"## Which customer age group is the most targeted on previous campaign  ?","7df73dac":"# B. Business Questions","43c7f570":"# Probability","2c85d24f":"- From numerical descriptive result : \n    - \"campaign\", \"age\" and \"cons.conf.idx\" features having big differences between Q3 (75%) and max value. We need to check further this outliers in the boxplot and scatterplot\n    - duration will be dropped as it has higher correlation with the result of the campaign as we will not know how long the duration will be before the telemarketing team performed the call.\n- From categorical descriptive result :\n    - there is unknown data for features : job ,marital ,education ,default, housing, loan. We will treat this unkown as missing value and we will fill in with modus value (higher frequency of each feature)\n    - day_of_week features shows that previous calls are held during weekdays\n    - month features hows that previous calls are not hold in January and February ","da064362":"Comparison before and after parameter tuning","48793d5d":"in this section all data we got from EDA analysis the will be handled to be used for Machine Learning, which will be tranform into numerical, we will use 3 encoding type to handle categorical data\n\n- Binary Encoding\n- Ordinal Encoding\n- One-hot Encoding ","f938e500":"We can conclude that Job type Student, Retired and Unemployed customer are top 3 job type of customer who agree to open deposit term","0b81916a":"### 1. Age","b817fe19":"# G. Modelling"}}