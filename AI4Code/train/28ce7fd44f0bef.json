{"cell_type":{"216e6715":"code","4dfaa1ec":"code","7ae63e91":"code","ceafef11":"code","02756271":"code","bf3da4bc":"code","8bf98b02":"code","6b056b9e":"code","f07c83fb":"code","ee5bbbb8":"code","c6a4d9f6":"code","eec68368":"code","7cb2daf0":"code","93a74248":"markdown"},"source":{"216e6715":"!pip install PyPDF2","4dfaa1ec":"import numpy as np \nimport pandas as pd\n\nimport PyPDF2\n\nimport os","7ae63e91":"files =  []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        files.append(os.path.join(dirname, filename))","ceafef11":"files = pd.Series(files)","02756271":"pmc_sources = []\ncomm_use_sources = []\nbiorxiv_medrxiv_sources = []\nnoncomm_use_subset_sources = []\nfor source in list(files.values):\n    if ('pmc_custom_license' in source):\n        pmc_sources.append(source)\n    elif ('noncomm_use_subset' in source):\n        noncomm_use_subset_sources.append(source)   \n    elif ('comm_use_subset' in source):\n        comm_use_sources.append(source)\n    elif ('biorxiv_medrxiv' in source):\n        biorxiv_medrxiv_sources.append(source)","bf3da4bc":"print(np.array(pmc_sources).shape, np.array(comm_use_sources).shape, np.array(biorxiv_medrxiv_sources).shape, np.array(noncomm_use_subset_sources).shape)","8bf98b02":"# creating an object \nfile = open('\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/COVID.DATA.LIC.AGMT.pdf', 'rb')\n\n# creating a pdf reader object\nfileReader = PyPDF2.PdfFileReader(file)\npageObj = fileReader.getPage(0) \nprint(pageObj)\nprint('----------------------------------------------------------------------------------------------------------------------------------------------------------------')\nprint(pageObj.extractText()) ","6b056b9e":"import json\nwith open('\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/json_schema.txt','r', encoding='utf-8') as f:\n    print(f.read())","f07c83fb":"All_Sources_Metadata = pd.read_csv('\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/all_sources_metadata_2020-03-13.csv')","ee5bbbb8":"All_Sources_Metadata","c6a4d9f6":"All_Sources_Metadata.columns","eec68368":"All_Sources_Metadata.shape","7cb2daf0":"Key_Metadata = All_Sources_Metadata[['title','abstract','journal','publish_time']]","93a74248":"Welcome to my kernel. Here I divide up the sources, print the json setup, and load the metadata. This is a very simple kernel, but I hope someone gets some good use out of it."}}