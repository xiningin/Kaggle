{"cell_type":{"b176cccd":"code","7ed048d4":"code","f6587e6d":"code","562d798f":"code","484f90e3":"code","e60a96ac":"code","ec507ffe":"code","5d40d4d6":"code","e8924b0f":"code","7132d286":"code","fe0ce476":"code","e4c3803a":"code","07690ddc":"code","7e97fef9":"code","bb344d2d":"code","a214e160":"code","c7133b22":"code","166ebc7f":"code","a66714b2":"code","97427fab":"code","a50c92f1":"code","ecd62443":"code","baa0fe31":"code","aef06ecd":"code","3b5f413f":"code","889a9bd4":"markdown","b068014c":"markdown","ea1256a1":"markdown","b27e228e":"markdown","9deac6ef":"markdown","6adf308f":"markdown","b607f4ee":"markdown","7349741f":"markdown","ebcbcdac":"markdown"},"source":{"b176cccd":"import pandas as pd                             # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandasql                                 # https:\/\/github.com\/yhat\/pandasql\nfrom pandasql import sqldf                      \npysqldf = lambda q: sqldf(q, globals())\nimport matplotlib.pyplot as plt                 # https:\/\/matplotlib.org\/\n%matplotlib inline\nfrom graphviz import Digraph                    # https:\/\/www.graphviz.org\/      graph visualization software\nimport networkx as nx                           # https:\/\/networkx.github.io\/   software for complex networks\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","7ed048d4":"# Let's read in the prepared csv file (for more details, see my main kernel)\n\n# While the column titles read Job_1 and Job_2 when I was first showing promotions only, \n# the data has evolved based on the  assigned category.\n\njob_graph = pd.read_csv('..\/input\/city-of-la-job-graph\/Job_Graph.csv', header=0)   #,nrows=125)\njob_graph['Job_1'] = job_graph['Job_1'].astype(str)\njob_graph['Job_2'] = job_graph['Job_2'].astype(str)\njobs =  list(job_graph.Job_1.unique())\npromotions = list(job_graph.Job_2.unique())\npromotions[0:5]","f6587e6d":"# Let's list the available categories\nquery_text = \"SELECT DISTINCT Category FROM job_graph order by Category asc\"\njob_titles_g = sqldf(query_text)   #,(current_position,current_position))\njob_titles_g\n\n# Age = Age requirement in years\n# Background_Check - is a background check required?\n# Certificate\/License - details of required certifications\n# Citizenship - details of citizenship requirements\n# Drivers_License  - details of drivers license requirements\n# Education - details of education requirements\n# Experience - details of prior experience requirements\n# Health\/Fitness\/Vision\/Drugs - details on medical physicals, drug testing, vision requirements, fitness requirements\n# Job_Title - This is a pre-requisite job Title. If it is entry level, it will state that in the Availability Column. \n# Other - any other requirements of note that don't fit other categories","562d798f":"# Breaking it down\nquery_text = \"SELECT distinct Job_1 as Age FROM job_graph where Category = 'Age' order by Job_1 asc\"\nages_g = sqldf(query_text) ; ages_g\nquery_text = \"SELECT distinct Job_1 as Background_Check FROM job_graph where Category = 'Background_Check' order by Job_1 asc\"\nbg_g = sqldf(query_text)  ;bg_g\nquery_text = \"SELECT distinct Job_1 as Citizenship FROM job_graph where Category = 'Citizenship' order by Job_1 asc\"\ncz_g = sqldf(query_text)  ;cz_g\nquery_text = \"SELECT distinct Job_1 as HealthFitnessVisionDrugs FROM job_graph where Category like '%Drugs%' order by Job_1 asc\"\nhl_g = sqldf(query_text)  ;hl_g\nquery_text = \"SELECT distinct Job_1 as Other FROM job_graph where Category = 'Other' order by Job_1 asc\"\not_g = sqldf(query_text)  ;ot_g\nquery_text = \"SELECT distinct Job_1 as Cert FROM job_graph where Category = 'Certificate\/License' order by Job_1 asc\"\nct_g = sqldf(query_text)  ;ct_g\nquery_text = \"SELECT distinct Job_1 as DL FROM job_graph where Category like '%river%' order by Job_1 asc\"\ndl_g = sqldf(query_text)  ;dl_g","484f90e3":"# What are the different types of availability?\n# Availability : Open\/Entry-Level  or Promotional based on the Job Trees provided by the City of LA\n# Availability_Details: based on the text in the job bulletins","e60a96ac":"# Which category would you like to check?\ncategory = \"'Job_Title'\"\n\n# What is your current position? lower-case please\ncurrent_position = \"'%officer%'\"\n\n\n### I'm going to start with just the Job_Title category\nquery_text = \"SELECT * FROM job_graph where Category = %(category)s and (lower(Job_1) like %(current_position)s or lower(Job_2) like %(current_position)s)\"%locals()\njob_titles_g = sqldf(query_text)   #,(current_position,current_position))\njob_titles_g.head(20)\n","ec507ffe":"dot = Digraph(comment='Promotions')\n\nfor index, row in job_titles_g.iterrows():\n    dot.edge(str(row[\"Job_1\"]), str(row[\"Job_2\"]), label='')\n\ndot","5d40d4d6":"plt.figure(figsize=(50,50))\n# Inspiration from  http:\/\/jonathansoma.com\/lede\/algorithms-2017\/classes\/networks\/networkx-graphs-from-source-target-dataframe\/\n# 1. Create the graph\ng = nx.from_pandas_edgelist(job_graph, source = 'Job_1', target = 'Job_2', edge_attr=None, create_using=None)\n\n# 2. Create a layout for our nodes \nlayout = nx.spring_layout(g,iterations=20)\n\n# 3. Draw the parts we want\n# Edges thin and grey\n# Jobs_1 small and grey\n# Promotions sized according to their number of connections\n# Promotions blue\n# Labels for Promotions ONLY\n# Promotions that are highly connected are a highlighted color\n\n# Go through every promotion ask the graph how many\n# connections it has. Multiply that by 80 to get the circle size\npromotion_size = [g.degree(Job_2) * 80 for Job_2 in promotions]\nnx.draw_networkx_nodes(g, \n                       layout,\n                       nodelist=promotions, \n                       node_size=promotion_size, # a LIST of sizes, based on g.degree\n                       node_color='lightblue')\n\n# Draw all jobs\nnx.draw_networkx_nodes(g, layout, nodelist=jobs, node_color='#cccccc', node_size=100)\n\n# Draw all jobs with most promotional ops\nhot_jobs = [Job_1 for Job_1 in jobs if g.degree(Job_1) > 1]\nnx.draw_networkx_nodes(g, layout, nodelist=hot_jobs, node_color='orange', node_size=100)\n\nnx.draw_networkx_edges(g, layout, width=1, edge_color=\"#cccccc\")\n\nnode_labels = dict(zip(promotions, promotions))\nnx.draw_networkx_labels(g, layout, labels=node_labels)\n\nplt.axis('off')\nplt.title(\"Promotions\")\nplt.show()\n\n# the larger the graph size (200,200) the longer it takes to run..... too small to read","e8924b0f":"g.nodes","7132d286":"job_graph.columns","fe0ce476":"# What are the different Availability Types?\nquery = \"\"\" SELECT distinct Availability from job_graph order by Availability asc\"\"\"\nav = pysqldf(query)\nav","e4c3803a":"count = \"\"\" SELECT count(distinct Job_1) as Possible_Promotions from job_graph where Availability like '%rom%' \"\"\"\npromotion_counts = pysqldf(count)\npromotion_counts","07690ddc":"count = \"\"\" SELECT count(distinct Job_2) as Open_to_Newcomers from job_graph where Availability like '%Entry%' \"\"\"\nopen_counts = pysqldf(count)\nopen_counts","7e97fef9":"# Please answer the following questions\n\n# Which category would you like to check?\ncategory = \"'Job_Title'\"\n\n# What is your current position?\ncurrent_position = \"'%Officer%'\"\n","bb344d2d":"### I'm going to start with just the Job_Title category\nquery_text = \"SELECT * FROM job_graph where Category = %(category)s and (Job_1 like %(current_position)s or Job_2 like %(current_position)s)\"%locals()\njob_titles_g = sqldf(query_text)   #,(current_position,current_position))\njob_titles_g.head(20)\n","a214e160":"from graphviz import Digraph\ndot = Digraph(comment='Promotions')\n\nfor index, row in job_titles_g.iterrows():\n    dot.edge(str(row[\"Job_1\"]), str(row[\"Job_2\"]), label='')\n\ndot\n","c7133b22":"# Which category would you like to check?\ncategory = \"'Job_Title'\"\n\n# What is your current position?\ncurrent_position = \"'%Accountant%'\"\n","166ebc7f":"# Run this cell for the results\n\n#################################################################\nquery_text = \"SELECT * FROM job_graph where Category = %(category)s and (Job_1 like %(current_position)s or Job_2 like %(current_position)s)\"%locals()\njob_titles_g = sqldf(query_text)   #,(current_position,current_position))\njob_titles_g.head()\ndot = Digraph(comment='Promotions')\n\nfor index, row in job_titles_g.iterrows():\n    dot.edge(str(row[\"Job_1\"]), str(row[\"Job_2\"]), label='')\ndot","a66714b2":"# All Categories\n# What is your current position?  all lower-case please\ncurrent_position = \"'%officer%'\"\n","97427fab":"# Run this cell for the results\n\n#################################################################\nquery_text = \"SELECT * FROM job_graph where  (lower(Job_1) like %(current_position)s or lower(Job_2) like %(current_position)s)\"%locals()\njob_titles_g = sqldf(query_text)   #,(current_position,current_position))\njob_titles_g.head()\ndot = Digraph(comment='Promotions')\n\nfor index, row in job_titles_g.iterrows():\n    dot.edge(str(row[\"Job_1\"]), str(row[\"Job_2\"]), label='')\ndot","a50c92f1":"# All Categories\n# What is your current position or interest? all-lower case please\ncurrent_position = \"'%fire%'\"\n\n","ecd62443":"# Run this cell for the results\n\n#################################################################\nquery_text = \"SELECT * FROM job_graph where  (lower(Job_1) like '%Fire%' or lower(Job_2) like '%Fire%')\"\n#query_text = \"SELECT * FROM job_graph where  (lower(Job_1) like %(current_position)s or lower(Job_2) like %(current_position)s)\"%locals()\njob_titles_g = sqldf(query_text)   #,(current_position,current_position))\njob_titles_g.head()\ndot = Digraph(comment='Promotions')\n\nfor index, row in job_titles_g.iterrows():\n    dot.edge(str(row[\"Job_1\"]), str(row[\"Job_2\"]), label='')\ndot","baa0fe31":"job_graph.head(10)","aef06ecd":"# All Categories\n# What is your current position or interest? all-lower case please\ncurrent_position = \"'%nurse%'\"\n\n#################################################################\nquery_text = \"SELECT * FROM job_graph where  (lower(Job_1) like %(current_position)s or lower(Job_2) like %(current_position)s)\"%locals()\njob_titles_g = sqldf(query_text)   #,(current_position,current_position))\njob_titles_g.head()\ndot = Digraph(comment='Promotions')\n\nfor index, row in job_titles_g.iterrows():\n    dot.edge(str(row[\"Job_1\"]), str(row[\"Job_2\"]), label='')\ndot","3b5f413f":"# All Categories\n# What is your current position or interest? all-lower case please\navailability = \"'%entry%'\"\n\n#################################################################\nquery_text = \"SELECT * FROM job_graph where lower(Availability like %(availability)s)\"%locals()\njob_titles_g = sqldf(query_text)   #,(current_position,current_position))\njob_titles_g.head()\ndot = Digraph(comment='Promotions')\n\nfor index, row in job_titles_g.iterrows():\n    dot.edge(str(row[\"Job_1\"]), str(row[\"Job_2\"]), label='')\ndot","889a9bd4":"### This is a spin-off of my main kernel:\n####    https:\/\/www.kaggle.com\/silverfoxdss\/city-of-la-readability-and-promotion-nudges\n\n#### I have been creating a dataset with a rough first shot at the relationships between the positions and the requirements for the positions. It's not perfect and my methods have evolved as I've completed the dataset.  I'll be adding more rows to the dataset over the next couple of weeks. Some data is aquired from the job maps provided, some by the text and pdfs.\n\n####  https:\/\/www.kaggle.com\/silverfoxdss\/city-of-la-job-graph\n\n#### My goal is to have fun and create some sort of interactive experience where a prospect can enter some sort of information and a graph will be created of those opportunities closest to the inquiry.\n\n### For best results, Fork this code and run in your browser\n\n## Enjoy!  Consider and upvote for this or my main kernel - Thanks!\n\n","b068014c":"### Please answer the following questions:","ea1256a1":"# More to come!","b27e228e":"### Please answer the following questions:","9deac6ef":"# Goal 3 : Dynamic Job Graph","6adf308f":"#### I need a life change... Show me all Open\/Entry-Level Positions \n","b607f4ee":"### Please answer the following questions:","7349741f":"### Please answer the following questions:","ebcbcdac":"## City of LA - Fun with Job Graphs"}}