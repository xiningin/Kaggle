{"cell_type":{"f9186400":"code","52401534":"code","7e0d1498":"code","6341268f":"code","fd7c9ec6":"code","04dd0817":"code","757a6425":"code","08b59f0f":"code","afd9933a":"code","833e7000":"code","2628938c":"code","1d63a92d":"code","e2f119b8":"code","44aa049d":"code","c50f0106":"code","2f095f63":"code","4f1140bb":"code","29efdb94":"code","246e4d0e":"markdown","61c4c2d8":"markdown"},"source":{"f9186400":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","52401534":"train = pd.read_csv(\"..\/input\/Kannada-MNIST\/train.csv\") \ntest = pd.read_csv(\"..\/input\/Kannada-MNIST\/test.csv\")","7e0d1498":"y = train[\"label\"]\ntrain.drop(\"label\",axis=1,inplace=True) \ntest.drop(\"id\",axis=1,inplace=True)","6341268f":"x_train = train.values\ntest = test.values\n\nx_train = x_train\/255\ntest = test\/255","fd7c9ec6":"x_train = x_train.reshape(-1,28,28,1)\ntest = test.reshape(-1,28,28,1)","04dd0817":"y_train = pd.get_dummies(y)","757a6425":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x_train,y_train,test_size=0.2,random_state=42,stratify=y_train)","08b59f0f":"from keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, AveragePooling2D, Flatten, Dropout,MaxPool2D,BatchNormalization\nfrom keras.preprocessing. image import ImageDataGenerator\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\nfrom keras.optimizers import RMSprop","afd9933a":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","833e7000":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","2628938c":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","1d63a92d":"checkpoint=ModelCheckpoint('bestweights.hdf5', monitor='val_acc', verbose=1, save_best_only=True, mode=\"max\")","e2f119b8":"model.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=['acc'])","44aa049d":"train_gen = ImageDataGenerator(rotation_range=10, \n                               width_shift_range=0.1, \n                               height_shift_range=0.1, \n                               zoom_range=0.1) ","c50f0106":"history= model.fit_generator(train_gen.flow(x_train,y_train,batch_size=86),\n                             steps_per_epoch=x_train.shape[0]\/\/86,\n                             validation_data=(x_test,y_test),\n                             validation_steps=x_test.shape[0]\/\/86,\n                             epochs=30,callbacks=[checkpoint,learning_rate_reduction ])","2f095f63":"plt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","4f1140bb":"model.load_weights(\"bestweights.hdf5\")","29efdb94":"results = model.predict(test)\nresults = np.argmax(results,axis = 1)\nsubmission = pd.read_csv('..\/input\/Kannada-MNIST\/sample_submission.csv')\nsubmission['label'] = results\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","246e4d0e":"history = model.fit(x_train,y_train,epochs=20,batch_size=32,validation_data=(x_test,y_test),callbacks=[checkpoint])","61c4c2d8":"model = Sequential()\n\nmodel.add(Conv2D(filters=6, kernel_size=(5, 5), activation='relu', input_shape=(28,28,1)))\nmodel.add(AveragePooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(filters=16, kernel_size=(5, 5), activation='relu'))\nmodel.add(AveragePooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(units=120, activation='relu'))\nmodel.add(Dense(units=84, activation='relu'))\nmodel.add(Dense(units=10, activation = 'softmax'))"}}