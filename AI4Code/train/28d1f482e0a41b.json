{"cell_type":{"ab466c48":"code","da001e38":"code","e35ecc24":"code","275d3b9a":"code","d79a3bed":"code","f74d05da":"code","3e1354b4":"code","06b46a2f":"code","841749e9":"code","a26d2a64":"code","1c2d04f3":"code","a1c8150d":"code","b22b36b7":"code","62267298":"markdown","3d67b2f4":"markdown","2d0363a8":"markdown","c958ab10":"markdown","ca1c5fc1":"markdown","d0dbcc3d":"markdown","8e4b8f54":"markdown"},"source":{"ab466c48":"import pandas as pd\nimport numpy as np","da001e38":"movies_df = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","e35ecc24":"movies_df.head()","275d3b9a":"movies_df.columns","d79a3bed":"movies_clean = movies_df[[ 'id','vote_average','vote_count','popularity','original_title']]\nmovies_clean.head()","f74d05da":"R = movies_clean['vote_average']\nv = movies_clean['vote_count']\nm = movies_clean['vote_count'].quantile(0.7) ## setting threshold by selecting top 30% movies for this metric\nC =  movies_clean['vote_average'].mean()","3e1354b4":"movies_clean['weighted_rating'] = ((R*v)+(C*m)) \/ (v+m)","06b46a2f":"movies_clean","841749e9":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nweight_average=movies_clean.sort_values('weighted_rating',ascending=False)\nplt.figure(figsize=(12,6))\naxis1=sns.barplot(x=weight_average['weighted_rating'].head(10), y=weight_average['original_title'].head(10), data=weight_average)\nplt.xlim(4, 10)\nplt.title('Best Movies by average votes', weight='bold')\nplt.xlabel('Weighted Average Score', weight='bold')\nplt.ylabel('Movie Title', weight='bold');","a26d2a64":"weight_average_popularity=movies_clean.sort_values('popularity',ascending=False)\nplt.figure(figsize=(12,6))\naxis1=sns.barplot(x=weight_average_popularity['popularity'].head(10), y=weight_average_popularity['original_title'].head(10), data=weight_average_popularity);\nplt.title('Best Movies by Popularity score', weight='bold')\nplt.xlabel('Popularity Score', weight='bold')\nplt.ylabel('Movie Title', weight='bold');","1c2d04f3":"from sklearn.preprocessing import MinMaxScaler\n\nscalar = MinMaxScaler()\nscaled_scores = pd.DataFrame(scalar.fit_transform(movies_clean[['popularity','weighted_rating']]), \n                             columns=['popularity_scaled','weighted_rating_scaled'])\nmovies_scaled = movies_clean.copy()\nmovies_scaled[['popularity_scaled','weighted_rating_scaled']] = scaled_scores\nmovies_scaled","a1c8150d":"movies_scaled['score'] = (0.5 * movies_scaled['weighted_rating_scaled']) + \\\n                            (0.5 * movies_scaled['popularity_scaled'])","b22b36b7":"weight_average_score_hybrid=movies_scaled.sort_values('score',ascending=False)\nplt.figure(figsize=(12,6))\naxis1=sns.barplot(x=weight_average_score_hybrid['score'].head(20), y=weight_average_score_hybrid['original_title'].head(20), data=weight_average_score_hybrid);\nplt.title('Best Movies by Hybrid score', weight='bold')\nplt.xlabel('Hybrid Score', weight='bold')\nplt.ylabel('Movie Title', weight='bold');","62267298":"## Calculating weighted rating of movies using IMDB System\nSource: http:\/\/trailerpark.weebly.com\/imdb-rating.html?source=post_page\n![Screenshot%202020-01-02%20at%203.01.59%20PM.png](attachment:Screenshot%202020-01-02%20at%203.01.59%20PM.png)","3d67b2f4":"## Computing Hybrid score\nH_SCORE = weighted_rating x 0.5 + popularity x 0.5","2d0363a8":"## References:\nhttps:\/\/github.com\/krishnaik06\/Recommendation_complete_tutorial","c958ab10":"## Plotting values by Weighted Rating","ca1c5fc1":"## Plotting values by Weighted Rating","d0dbcc3d":"## Dropping extraneous features from the movies_df","8e4b8f54":"## Plotting values by Hybrid score"}}