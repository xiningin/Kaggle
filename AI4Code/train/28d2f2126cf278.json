{"cell_type":{"8976f35e":"code","ff2282c3":"code","f550c336":"code","d59fbd2a":"code","4b3ba207":"code","8e9ce0b3":"code","44b9ac3d":"code","dec19d04":"code","d558780f":"code","06c2a6e4":"code","332011b3":"code","ae7ca285":"code","5250062e":"code","a10285ed":"code","0640d3fe":"code","b1032d76":"code","13a16091":"code","85c2c6e0":"code","122711a8":"code","35ffb2f0":"code","17a53933":"code","913477fe":"code","477ba60b":"code","44870a13":"code","a269c885":"code","719aa10f":"code","df84bc67":"code","a412860d":"code","de577c4b":"code","8272fdf8":"code","bcd8ab27":"code","2e79b51a":"code","26315fa1":"code","65db6170":"code","e6a7aa45":"code","f2fdc1b5":"code","fe619061":"code","b00ee2be":"code","c48d9be3":"code","d3c209ee":"code","7f2941c1":"code","2c1d528f":"code","736cbd93":"code","478f0e13":"code","4413f5b5":"code","b1d2e56e":"code","153f8666":"code","ab04ca08":"code","2eab3796":"code","6a202da5":"code","79f4dd0f":"code","00cab3de":"code","45ddddb6":"code","169e522d":"code","b453fc62":"code","b03a01cc":"code","317b42a0":"code","2391f79a":"code","a8e8249d":"code","b10a912c":"code","07d6e258":"code","885a025d":"code","fa4f833e":"code","18123c7f":"code","9a17e435":"code","85ca894a":"code","f471ec80":"code","5c850745":"code","bba752f1":"code","e194218f":"code","3740eba4":"code","f973c924":"code","f038eb6f":"code","60d7b23f":"code","055f174b":"code","b890fbc7":"code","124ac39f":"code","5b58cd37":"code","2ab1a8ba":"code","2b5661ae":"code","764a03a0":"markdown","b1470ff0":"markdown","5e83464e":"markdown","9aa51249":"markdown","02dd362e":"markdown","6bd5068e":"markdown","d7a117af":"markdown","f97e81e6":"markdown","774536fe":"markdown","406f12b9":"markdown","581d1d63":"markdown","ebbbd1e2":"markdown","2d411911":"markdown","19cef5ff":"markdown","059f541e":"markdown","975e4146":"markdown","5ace0789":"markdown","83f5c8fd":"markdown","4c1299a9":"markdown","7e1dfffe":"markdown","2e8dc6e9":"markdown","a0098b43":"markdown","2c19359d":"markdown","b3d562a7":"markdown","c82ae02d":"markdown","6c81f466":"markdown","e3da7006":"markdown","52b8179d":"markdown","4d761c8c":"markdown","ffb06ce9":"markdown","f83de0f0":"markdown","b0ed0d8b":"markdown","4cb6f886":"markdown","4e8ee907":"markdown","f39c4d16":"markdown","07eafc4b":"markdown","0f474ef6":"markdown"},"source":{"8976f35e":"# Importing the necessary datasets\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.feature_selection import RFE\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.metrics import r2_score\n%matplotlib inline","ff2282c3":"# To ignore warnings\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f550c336":"# Reading the dataframe\n\nbikes = pd.read_csv('..\/input\/boombikes\/day.csv')\nbikes.head()","d59fbd2a":"# Checking the number of rows and columns\n\nbikes.shape","4b3ba207":"# Checking for any null values and the data type\n\nbikes.info()","8e9ce0b3":"# Initial data cleaning for the sanity check performed\n\nbikes.mnth = bikes.mnth.map({1:\"Jan\", 2:\"Feb\", 3:\"Mar\", 4:\"Apr\", 5:\"May\", 6:\"Jun\", 7:\"Jul\", 8:\"Aug\", 9:\"Sep\", 10:\"Oct\", 11:\"Nov\", 12:\"Dec\"})\n\nbikes.weekday = bikes.weekday.map({1:\"Mon\", 2:\"Tue\", 3:\"Wed\", 4:\"Thu\", 5:\"Fri\", 6:\"Sat\", 0:\"Sun\"})\n\nbikes.weathersit = bikes.weathersit.map({1:\"Clear\", 2:\"Cloudy\", 3:\"Rainy\", 4:\"Thunderstorm_or_snow\"})\n\nbikes.season = bikes.season.map({1:\"Spring\", 2:\"Summer\", 3:\"Fall\", 4:\"Winter\"})\n","44b9ac3d":"bikes.head()","dec19d04":"# Dropping the \"casual\", \"registered\", \"instant\" and \"dteday\" column\n\nbikes.drop(columns = [\"instant\",\"dteday\", \"casual\", \"registered\"], axis = 1, inplace = True)","d558780f":"bikes.info()","06c2a6e4":"cat_cols = bikes.select_dtypes(include = object).columns\n\nnum_cols = bikes.select_dtypes(include = ['int64','float64' ]).columns","332011b3":"print(cat_cols)\nprint()\nprint(num_cols)","ae7ca285":"# Checking the column: \"season\"\n\nbikes.season.value_counts()","5250062e":"# Visualizing the column \"season\" with \"cnt\"\n\nplt.figure(figsize=[12,5])\nsns.barplot(x = bikes[\"season\"], y = bikes[\"cnt\"], ci=None)\nplt.title(\"Count of people using Boom Bikes vs Season\", size = 15, color = \"Purple\", pad = 20)\nplt.xlabel(\"\\nSeason\", size = 12, color = \"green\")\nplt.ylabel(\"Count of people using Boom Bikes\\n\", size = 12, color = \"green\")\nplt.show()","a10285ed":"# Checking the column: \"mnth\"\n\nbikes.mnth.value_counts()","0640d3fe":"# Visualizing the column \"mnth\" with \"cnt\"\n\nplt.figure(figsize=[12,5])\nsns.barplot(x = bikes[\"mnth\"], y = bikes[\"cnt\"], ci=None)\nplt.title(\"Count of people using Boom Bikes vs Month of the Year\", size = 15, color = \"Purple\", pad = 20)\nplt.xlabel(\"\\nMonth of the Year\", size = 12, color = \"green\")\nplt.ylabel(\"Count of people using Boom Bikes\\n\", size = 12, color = \"green\")\nplt.show()","b1032d76":"# Checking the column: \"weekday\"\n\nbikes.weekday.value_counts()","13a16091":"# Visualizing the column \"weekday\" with \"cnt\"\n\nplt.figure(figsize=[12,5])\nsns.barplot(x = bikes[\"weekday\"], y = bikes[\"cnt\"], ci=None)\nplt.title(\"Count of people using Boom Bikes vs Weekday\", size = 15, color = \"Purple\", pad = 20)\nplt.xlabel(\"\\nWeekday\", size = 12, color = \"green\")\nplt.ylabel(\"Count of people using Boom Bikes\\n\", size = 12, color = \"green\")\nplt.show()","85c2c6e0":"# Checking the column: \"weathersit\"\n\nbikes.weathersit.value_counts()","122711a8":"# Visualizing the column \"weathersit\" with \"cnt\"\n\nplt.figure(figsize=[12,5])\nsns.barplot(x = bikes[\"weathersit\"], y = bikes[\"cnt\"], ci=None)\nplt.title(\"Count of people using Boom Bikes vs Weather Conditions\", size = 15, color = \"Purple\", pad = 20)\nplt.xlabel(\"\\nWeather Conditions\", size = 12, color = \"green\")\nplt.ylabel(\"Count of people using Boom Bikes\\n\", size = 12, color = \"green\")\nplt.show()","35ffb2f0":"num_cols","17a53933":"# Checking the column: 'yr'\n\nbikes.yr.value_counts()","913477fe":"# Visualizing the column \"yr\" with \"cnt\"\n\nplt.figure(figsize=[12,5])\nsns.barplot(x = bikes[\"yr\"], y = bikes[\"cnt\"], ci=None)\nplt.title(\"Count of people using Boom Bikes vs Year\", size = 15, color = \"Purple\", pad = 20)\nplt.xlabel(\"\\nYear\", size = 12, color = \"green\")\nplt.ylabel(\"Count of people using Boom Bikes\\n\", size = 12, color = \"green\")\nplt.xticks(ticks = [0, 1], labels = [\"2018\",\"2019\"])\nplt.show()","477ba60b":"# Checking the column: 'holiday'\n\nbikes.holiday.value_counts()","44870a13":"# Visualizing the column \"holiday\" with \"cnt\"\n\nplt.figure(figsize=[12,5])\nsns.barplot(x = bikes[\"holiday\"], y = bikes[\"cnt\"], ci=None)\nplt.title(\"Count of people using Boom Bikes vs Holidays\", size = 15, color = \"Purple\", pad = 20)\nplt.xlabel(\"\\nHolidays\", size = 12, color = \"green\")\nplt.ylabel(\"Count of people using Boom Bikes\\n\", size = 12, color = \"green\")\nplt.xticks(ticks = [0, 1], labels = [\"Not a Holiday\",\"Holiday\"])\nplt.show()","a269c885":"# Checking the column: 'workingday'\n\nbikes.workingday.value_counts()","719aa10f":"# Visualizing the column \"workingday\" with \"cnt\"\n\nplt.figure(figsize=[12,5])\nsns.barplot(x = bikes[\"workingday\"], y = bikes[\"cnt\"], ci=None)\nplt.title(\"Count of people using Boom Bikes vs WorkingDays\", size = 15, color = \"Purple\", pad = 20)\nplt.xlabel(\"\\nWorkingDays\", size = 12, color = \"green\")\nplt.ylabel(\"Count of people using Boom Bikes\\n\", size = 12, color = \"green\")\nplt.xticks(ticks = [0, 1], labels = [\"Weekends\",\"Weekdays\"])\nplt.show()","df84bc67":"# Visualizing the column \"temp\" with \"cnt\"\n\nplt.figure(figsize=[12,5])\nsns.boxplot(x = bikes[\"temp\"])\nplt.title(\"Count of people using Boom Bikes vs ActualTemperature\", size = 15, color = \"Purple\", pad = 20)\nplt.xlabel(\"\\nActualTemperature\", size = 12, color = \"green\")\nplt.show()","a412860d":"# Visualizing the column \"atemp\" with \"cnt\"\n\nplt.figure(figsize=[12,5])\nsns.boxplot(x = bikes[\"atemp\"])\nplt.title(\"Count of people using Boom Bikes vs FeelingTemperature\", size = 15, color = \"Purple\", pad = 20)\nplt.xlabel(\"\\nFeelingTemperature\", size = 12, color = \"green\")\nplt.show()","de577c4b":"# Visualizing the column \"hum\" with \"cnt\"\n\nplt.figure(figsize=[12,5])\nsns.boxplot(x = bikes[\"hum\"])\nplt.title(\"Count of people using Boom Bikes vs Humidity\", size = 15, color = \"Purple\", pad = 20)\nplt.xlabel(\"\\nHumidity\", size = 12, color = \"green\")\nplt.show()","8272fdf8":"# Checking the percentile \n\nbikes[\"hum\"].describe(percentiles=[0.01,0.02,0.05,0.25,0.5,0.75])","bcd8ab27":"# Removing the outliers\n\nbikes = bikes[bikes[\"hum\"] >= 20]","2e79b51a":"# Visualizing the column \"hum\" with \"cnt\"\n\nplt.figure(figsize=[12,5])\nsns.boxplot(x = bikes[\"hum\"])\nplt.title(\"Count of people using Boom Bikes vs Humidity\", size = 15, color = \"Purple\", pad = 20)\nplt.xlabel(\"\\nHumidity\", size = 12, color = \"green\")\nplt.show()","26315fa1":"# Visualizing the column \"windspeed\" with \"cnt\"\n\nplt.figure(figsize=[12,5])\nsns.boxplot(x = bikes[\"windspeed\"])\nplt.title(\"Count of people using Boom Bikes vs WindSpeed\", size = 15, color = \"Purple\", pad = 20)\nplt.xlabel(\"\\nWindSpeed\", size = 12, color = \"green\")\nplt.show()","65db6170":"# Checking the percentile \n\nbikes[\"windspeed\"].describe(percentiles=[0.25,0.5,0.75,0.95,0.98,0.99])","e6a7aa45":"# Removing the top 1%\n\nQ3 = bikes.windspeed.quantile(0.99)\nbikes = bikes[bikes[\"windspeed\"] <= Q3]","f2fdc1b5":"# Visualizing the column \"windspeed\" with \"cnt\"\n\nplt.figure(figsize=[12,5])\nsns.boxplot(x = bikes[\"windspeed\"])\nplt.title(\"Count of people using Boom Bikes vs WindSpeed\", size = 15, color = \"Purple\", pad = 20)\nplt.xlabel(\"\\nWindSpeed\", size = 12, color = \"green\")\nplt.show()","fe619061":"# Visualizing the numerical columns with \"cnt\" target column\n\nheat = bikes.corr()\n\nplt.figure(figsize=[10,5])\nsns.heatmap(heat, cmap = 'YlGnBu', annot = True)\nplt.show()","b00ee2be":"# First, we need to create the dummy variables for the categorical variables\n\nlist(cat_cols)","c48d9be3":"dummy = pd.get_dummies(bikes[\"season\"], drop_first = True)\nbikes = pd.concat([bikes, dummy], axis = 1)\n\ndummy = pd.get_dummies(bikes[\"mnth\"], drop_first = True)\nbikes = pd.concat([bikes, dummy], axis = 1)\n\ndummy = pd.get_dummies(bikes[\"weekday\"], drop_first = True)\nbikes = pd.concat([bikes, dummy], axis = 1)\n\ndummy = pd.get_dummies(bikes[\"weathersit\"], drop_first = True)\nbikes = pd.concat([bikes, dummy], axis = 1)","d3c209ee":"bikes.drop(columns = list(cat_cols), axis = 1, inplace = True)","7f2941c1":"# Visualizing the numerical columns with \"cnt\" target column\n\nheat1 = bikes.corr()\n\nplt.figure(figsize=[25,10])\nsns.heatmap(heat1, cmap = 'YlGnBu', annot = True)\nplt.show()","2c1d528f":"bikes.info()","736cbd93":"# Defining the columns to be scaled\n\ncols_to_scale = ['temp', 'atemp', 'hum', 'windspeed','cnt']","478f0e13":"# Using train_test_split to split the dataframe\n\ndf_train, df_test = train_test_split(bikes, train_size = 0.7, random_state = 100)","4413f5b5":"# Scaling the numerical columns\n\nscaler = MinMaxScaler()\n\ndf_train[cols_to_scale] = scaler.fit_transform(df_train[cols_to_scale])\n\ndf_train.head()","b1d2e56e":"# Splitting X and y\n\ny_train = df_train.pop('cnt')\n\nX_train = df_train","153f8666":"# Choosing columns using RFE\n\nlm = LinearRegression()\n\nlm.fit(X_train, y_train)\n\nrfe = RFE(lm, 15)\n\nrfe = rfe.fit(X_train, y_train)","ab04ca08":"list(zip(X_train.columns, rfe.support_, rfe.ranking_))","2eab3796":"# Columns selected by RFE\n\nrfe_cols = X_train.columns[rfe.support_]\nrfe_cols","6a202da5":"# Columns RFE did not select\n\nn_rfe_cols = X_train.columns[~rfe.support_]\nn_rfe_cols","79f4dd0f":"# Building the first model\n\nX_train_rfe = X_train[rfe_cols]\n\nX_train_sm = sm.add_constant(X_train_rfe)\n\nmodel1 = sm.OLS(y_train, X_train_sm)\n\nresult = model1.fit()","00cab3de":"result.summary()","45ddddb6":"# Checking the VIF\n\nvif = pd.DataFrame()\nvif['Features'] = X_train_sm.columns\nvif['VIF'] = [variance_inflation_factor(X_train_sm.values, i) for i in range(X_train_sm.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","169e522d":"# Dropping the column: \"holiday\"\n\nX_train_sm.drop(columns = \"holiday\", axis = 1, inplace = True)","b453fc62":"# Building the 2nd Model\n\nX_train_sm = sm.add_constant(X_train_sm)\n\nmodel2 = sm.OLS(y_train, X_train_sm)\n\nresult = model2.fit()","b03a01cc":"result.summary()","317b42a0":"# Checking the VIF\n\nvif = pd.DataFrame()\nvif['Features'] = X_train_sm.columns\nvif['VIF'] = [variance_inflation_factor(X_train_sm.values, i) for i in range(X_train_sm.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","2391f79a":"# Dropping the column: \"atemp\"\n\nX_train_sm.drop(columns = \"atemp\", axis = 1, inplace = True)","a8e8249d":"# Building the 3rd Model\n\nX_train_sm = sm.add_constant(X_train_sm)\n\nmodel3 = sm.OLS(y_train, X_train_sm)\n\nresult = model3.fit()","b10a912c":"result.summary()","07d6e258":"# Checking the VIF\n\nvif = pd.DataFrame()\nvif['Features'] = X_train_sm.columns\nvif['VIF'] = [variance_inflation_factor(X_train_sm.values, i) for i in range(X_train_sm.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","885a025d":"# Dropping the column: \"Sun\"\n\nX_train_sm.drop(columns = \"Sun\", axis = 1, inplace = True)","fa4f833e":"# Building the 4th Model\n\nX_train_sm = sm.add_constant(X_train_sm)\n\nmodel4 = sm.OLS(y_train, X_train_sm)\n\nresult = model4.fit()","18123c7f":"result.summary()","9a17e435":"# Checking the VIF\n\nvif = pd.DataFrame()\nvif['Features'] = X_train_sm.columns\nvif['VIF'] = [variance_inflation_factor(X_train_sm.values, i) for i in range(X_train_sm.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","85ca894a":"# Dropping the column: \"Nov\"\n\nX_train_sm.drop(columns = \"Nov\", axis = 1, inplace = True)","f471ec80":"# Building the 5th Model\n\nX_train_sm = sm.add_constant(X_train_sm)\n\nmodel5 = sm.OLS(y_train, X_train_sm)\n\nresult = model5.fit()","5c850745":"result.summary()","bba752f1":"# Checking the VIF\n\nvif = pd.DataFrame()\nvif['Features'] = X_train_sm.columns\nvif['VIF'] = [variance_inflation_factor(X_train_sm.values, i) for i in range(X_train_sm.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","e194218f":"# predicting in train set\n\ny_train_pred = result.predict(X_train_sm)","3740eba4":"# Residual Analysis\n\nsns.distplot((y_train - y_train_pred))\nplt.show()","f973c924":"# Scaling the test set\n\ndf_test[cols_to_scale] = scaler.transform(df_test[cols_to_scale])\n\ndf_test.head()","f038eb6f":"df_test.yr.value_counts()","60d7b23f":"# Splitting into X and y\n\ny_test = df_test.pop(\"cnt\")\n\nX_test = df_test","055f174b":"# Dropping necessary columns\n\nX_test.drop(columns = n_rfe_cols, axis = 1, inplace = True)\nX_test.drop(columns = [\"Nov\", \"atemp\", \"Sun\", \"holiday\"], axis = 1, inplace = True)","b890fbc7":"# Adding constant\n\nX_test_sm = sm.add_constant(X_test)","124ac39f":"# Predicting on the test set\n\ny_test_pred = result.predict(X_test_sm)","5b58cd37":"# Residual Analysis\n\nsns.distplot((y_test - y_test_pred))\nplt.show()","2ab1a8ba":"# Checking the R2_score\n\nround(r2_score(y_true = y_test, y_pred = y_test_pred),2)","2b5661ae":"# Checking the parameters\n\nresult.params","764a03a0":"- Dropping \"Nov\" as it has a very high P value.","b1470ff0":"#### Analyzing Numerical Columns","5e83464e":"- We have successfully removed the 1% outlier from the column.","9aa51249":"### Step1: Importing libraries and packages and Reading the Dataframe","02dd362e":"- We can see from the heatmap that there is a strong correlation between the 'cnt' and 'temp'\/'atemp' columns.\n- Next we have a good correlation between 'cnt' and 'yr', also, between 'cnt' and 'windspeed'\/'humidity' columns.\n- There is also a very high correlation between 'temp' and 'atemp', we might have to drop one of the columns to avoid multicollinearity","6bd5068e":"- It can be observed that people use Boom Bikes almost equally between Weekends and Weekdays.\n- And this is also evident from our Days of the Week analysis done previously.","d7a117af":"- Here, we can remove the top 1% outlier.","f97e81e6":"- From the above bar graph, we can see that most people like to use the bikes during the summer and fall, but not so much during the beginning of the year or spring.","774536fe":"- We can clearly see that most of the people like to ride the bikes during summer and fall. \n- However, people avoid using it during spring.","406f12b9":"- There are some outliers here.","581d1d63":"- There are some outliers here.","ebbbd1e2":"- Dropping \"Jan\", since it has a high P-value.","2d411911":"### Step6: Predicting on the test set","19cef5ff":"### Problem Statement:\n\nThe Boom Bikes company wishes to increase revenue and sales after Covid scenarios. We are provided a datasets and the company would like to know which features help predict the number of riders.","059f541e":"- It is visible here that Boom Bikes had recieved popularity over the year and have seen increase in the count of people using their bikes.","975e4146":"- We can clearly see that in Boom Bikes thrive during summer and fall. There are ample customers using these bikes during that time. It can be supported by the EDA that we have performed and also by the co-efficients of \"Sep\" and \"temp\".\n- During a clear sunny day, when the temperatures are high, more people tend to go out and hence use the Boom Bikes more.\n- The scenarios which definitely require some attention are during: Bad weather conditions and also during Spring.\n- The company can come out with schemes and special offers to riders during this period to increase participation and boost their income.\n- They can also allow portable umbrellas or rain suits, so that riders are confident about commuting during bad weather.\n\n##### Considering if the above steps are taken, the business for Boom Bikes will thrive for the days to come.","5ace0789":"- Since \"holiday\" has a very high P value, we are dropping this column and building the model again.","83f5c8fd":"#### EDA on categorical features","4c1299a9":"- Now that we are done with the initial cleaning of the data, we will proceed with the EDA.","7e1dfffe":"- Here, we see that \"atemp\" has a very high P value, but, we can also see from the heatmap that it is highly correlated with Winter, so we drop the Winter column instead to check.","2e8dc6e9":"## Boom Bikes Prediction by Vivek Chowdhury","a0098b43":"- Here, we do not observe a noticable difference.\n- Boom Bikes see customers in equal participation throughout the week.","2c19359d":"#### EDA on numerical features","b3d562a7":"### Step7: Conclusion","c82ae02d":"- There are no outliers in this column.","6c81f466":"- Since, the P-values looks significant for all the features and also the VIF is well below 3, we will conclude this as our final model.","e3da7006":"- We can see that more people use these bikes on a working day rather than a holiday.\n- This explains that people use these bikes more often to commute to their workplace.","52b8179d":"### Step4: Preparing the dataframe for modelling","4d761c8c":"### Step2: Analyzing the dataframe and Initial Cleaning","ffb06ce9":"- Since \"Sun\" has a very high P-value, we drop it.","f83de0f0":"### Step5: Building the model","b0ed0d8b":"- It is visible from the graph that, people avoid riding bikes during rainy days.\n- They are however, a go to choice during clear weather conditions","4cb6f886":"- There are no null values in any of the columns\n- Performing Sanity checks, we find that, the columns mnth, weekday, weathersit and season should be converted to categorical columns.\n- Casual and registered columns can be dropped.","4e8ee907":"- The column instant and dteday are not necessary, so we can drop it.","f39c4d16":"- There are no outliers in this column.","07eafc4b":"#### Therefore, our final MLR model equation is:\n\n- cnt = 0.367 +  (0.224*yr) + (0.044*workingday) +  (0.539*temp) + (0.051*Winter) + (0.062*Sep) + (0.056*Sat) - (0.225*hum) - (0.124*windspeed) - (0.117*Spring) - (0.076*Jul) - (0.179*Rainy)","0f474ef6":"### Step3: Exploratory Data Analysis (EDA)"}}