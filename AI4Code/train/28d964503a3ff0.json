{"cell_type":{"11077d9b":"code","8251afc9":"code","afc6f4c4":"code","464ddb82":"code","f925394f":"code","5dc2f64a":"code","a92c6211":"code","929eaa3b":"code","e1ce4296":"code","dee6ed9d":"code","ebcc06f0":"code","257200cb":"code","8e8a825b":"code","3e77ee82":"code","7be084c6":"code","4db94ef2":"code","71efc985":"code","3d054bea":"code","71d1f35d":"code","58683289":"code","6b2a619f":"code","547ec0d6":"code","c986c75d":"code","e25b464f":"code","090e8fb7":"code","92a322c1":"markdown","328de3ef":"markdown"},"source":{"11077d9b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8251afc9":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV","afc6f4c4":"training_data=pd.read_csv('..\/input\/titanic\/train.csv')\ntesting_data=pd.read_csv('..\/input\/titanic\/test.csv')","464ddb82":"training_data.head()","f925394f":"training_data.describe()","5dc2f64a":"sum(training_data['Embarked'].isnull())","a92c6211":"training_data.drop(['PassengerId','Name','Ticket','Cabin'], axis=1, inplace=True)\ntesting_data.drop(['Name','Ticket','Cabin'], axis=1, inplace=True)","929eaa3b":"\ntraining_data[['Embarked']]=training_data[['Embarked']].fillna(training_data.mode()['Embarked'][0])\ntraining_data[['Age']]=training_data[['Age']].fillna(training_data['Age'].mean())\n\ntraining_data[['Fare']]=training_data[['Fare']].fillna(training_data.mode()['Fare'][0])\ntraining_data[['Age']]=training_data[['Age']].fillna(training_data['Age'].mean())","e1ce4296":"testing_data[['Embarked']]=testing_data[['Embarked']].fillna(testing_data.mode()['Embarked'][0])\ntesting_data[['Fare']]=testing_data[['Fare']].fillna(testing_data.mode()['Fare'][0])\ntesting_data[['Age']]=testing_data[['Age']].fillna(testing_data['Age'].mean())","dee6ed9d":"sex=pd.get_dummies(training_data['Sex'])\nembarked=pd.get_dummies(training_data['Embarked'])\npclass=pd.get_dummies(training_data['Pclass'])\ntraining_data=pd.concat([training_data,sex,embarked,pclass], axis=1)\n\n\n\nsex=pd.get_dummies(testing_data['Sex'])\nembarked=pd.get_dummies(testing_data['Embarked'])\npclass=pd.get_dummies(testing_data['Pclass'])\ntesting_data=pd.concat([testing_data,sex,embarked,pclass], axis=1)","ebcc06f0":"training_data.drop(['Sex','Embarked','Pclass'],axis=1,inplace=True)\n\ntesting_data.drop(['Sex','Embarked','Pclass'],axis=1,inplace=True)","257200cb":"training_data['members']= training_data['SibSp']+training_data['Parch']\n\ntesting_data['members']= testing_data['SibSp']+testing_data['Parch']","8e8a825b":"training_data.drop(['SibSp','Parch'],axis=1,inplace=True)\n\ntesting_data.drop(['SibSp','Parch'],axis=1,inplace=True)","3e77ee82":"training_data.head()","7be084c6":"X=training_data.drop('Survived',axis=1)\ny=training_data['Survived']\n","4db94ef2":"sc=StandardScaler()\nX_scaler=sc.fit_transform(X)","71efc985":"\nx_train,x_test,y_train,y_test= train_test_split(X_scaler,y,test_size=0.2)","3d054bea":"\nmodel=GradientBoostingClassifier()\n\nparam={'n_estimators':[100,200,300],\n       'max_depth': [3,5,10,20,50,75,100,None],\n       'max_features': ['auto'],\n       'min_samples_leaf': [1,2,4,6,10],\n       'min_samples_split': [2,5,10,20]}\n    \n\nclf=GridSearchCV(estimator=model,\n                 param_grid=param,\n                 scoring=\"accuracy\",\n                 verbose=1,\n                 n_jobs=-1,\n                 cv=5)","71d1f35d":"clf.fit(x_train,y_train)","58683289":"clf.best_score_","6b2a619f":"df=testing_data['PassengerId']\nx=testing_data.drop(['PassengerId'], axis=1)\n","547ec0d6":"x.describe()","c986c75d":"y_pred=clf.predict(x)","e25b464f":"frame=pd.DataFrame({'PassengerId':df,'Survived':y_pred})","090e8fb7":"frame.to_csv('output1.csv',index=False)","92a322c1":"filling mssing values","328de3ef":"score on testing data\n"}}