{"cell_type":{"0031ca2f":"code","73c002bc":"code","c1ae185b":"code","17bde4c4":"code","07241f70":"code","a8039aba":"code","9447452d":"code","033bce03":"code","0bdd9415":"code","83917dd3":"code","78bd6a69":"code","b7e1ab56":"code","38003df1":"code","b388e608":"code","4d994019":"code","e8d7fcc4":"code","516a3f01":"code","d345feae":"code","b7be302c":"code","f47832ef":"code","4b45760a":"markdown","ce7bbb24":"markdown","e18d1bd7":"markdown","01725af3":"markdown","45b9cbcb":"markdown"},"source":{"0031ca2f":"# import warnings filter\nfrom warnings import simplefilter\n# ignore all future warnings\nsimplefilter(action='ignore', category=FutureWarning)\n\nimport sys\nimport pandas as pd\nimport numpy as np\nimport sklearn\nimport matplotlib\nimport keras\n\nprint('Python: {}'.format(sys.version))\nprint('Numpy: {}'.format(np.__version__))\nprint('Sklearn: {}'.format(sklearn.__version__))\nprint('Pandas: {}'.format(pd.__version__))\nprint('Matplotlib: {}'.format(matplotlib.__version__))\nprint('Keras: {}'.format(keras.__version__))","73c002bc":"import matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix","c1ae185b":"# import the heart disease dataset\nurl = \"http:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/heart-disease\/processed.cleveland.data\"\n\n# the names will be the names of each column in our pandas DataFrame\nnames = ['age',\n        'sex',\n        'cp',\n        'trestbps',\n        'chol',\n        'fbs',\n        'restecg',\n        'thalach',\n        'exang',\n        'oldpeak',\n        'slope',\n        'ca',\n        'thal',\n        'class']\n\n# read the csv\ncleveland = pd.read_csv(url, names=names)","17bde4c4":"# print the shape of the DataFrame, so we can see how many examples we have\nprint('Shape of DataFrame: {}'.format(cleveland.shape))\nprint(cleveland.loc[1])","07241f70":"# print the last twenty or so data points\ncleveland.loc[280:]","a8039aba":"# remove missing data (indicated with a \"?\")\ndata = cleveland[~cleveland.isin(['?'])]\ndata.loc[280:]","9447452d":"# drop rows with NaN values from DataFrame\ndata = data.dropna(axis=0)\ndata.loc[280:]","033bce03":"# print the shape and data type of the dataframe\nprint(data.shape)\nprint(data.dtypes)","0bdd9415":"# transform data to numeric to enable further analysis\ndata = data.apply(pd.to_numeric)\ndata.dtypes","83917dd3":"# print data characteristics, usings pandas built-in describe() function\ndata.describe()","78bd6a69":"# plot histograms for each variable\ndata.hist(figsize = (12, 12))\nplt.show()","b7e1ab56":"# create X and Y datasets for training\nfrom sklearn import model_selection\n\nX = np.array(data.drop(['class'], 1))\ny = np.array(data['class'])\n\nX_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size = 0.2)","38003df1":"# convert the data to categorical labels\nfrom keras.utils.np_utils import to_categorical\n\nY_train = to_categorical(y_train, num_classes=None)\nY_test = to_categorical(y_test, num_classes=None)\nprint(Y_train.shape)\nprint(Y_train[:10])","b388e608":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam\n\n# define a function to build the keras model\ndef create_model():\n    # create model\n    model = Sequential()\n    model.add(Dense(8, input_dim=13, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(4, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(5, activation='softmax'))\n    \n    # compile model\n    adam = Adam(lr=0.001)\n    model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])\n    return model\n\nmodel = create_model()\n\nprint(model.summary())","4d994019":"# fit the model to the training data\nmodel.fit(X_train, Y_train, epochs=100, batch_size=10, verbose = 1)","e8d7fcc4":"# convert into binary classification problem - heart disease or no heart disease\nY_train_binary = y_train.copy()\nY_test_binary = y_test.copy()\n\nY_train_binary[Y_train_binary > 0] = 1\nY_test_binary[Y_test_binary > 0] = 1\n\nprint(Y_train_binary[:20])","516a3f01":"# define a new keras model for binary classification\ndef create_binary_model():\n    # create model\n    model = Sequential()\n    model.add(Dense(8, input_dim=13, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(4, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(1, activation='sigmoid'))\n    \n    # Compile model\n    adam = Adam(lr=0.001)\n    model.compile(loss='binary_crossentropy', optimizer=adam, metrics=['accuracy'])\n    return model\n\nbinary_model = create_binary_model()\n\nprint(binary_model.summary())","d345feae":"# fit the binary model on the training data\nbinary_model.fit(X_train, Y_train_binary, epochs=100, batch_size=10, verbose = 1)","b7be302c":"# generate classification report using predictions for categorical model\nfrom sklearn.metrics import classification_report, accuracy_score\n\ncategorical_pred = np.argmax(model.predict(X_test), axis=1)\n\nprint('Results for Categorical Model')\nprint(accuracy_score(y_test, categorical_pred))\nprint(classification_report(y_test, categorical_pred))","f47832ef":"# generate classification report using predictions for binary model \nbinary_pred = np.round(binary_model.predict(X_test)).astype(int)\n\nprint('Results for Binary Model')\nprint(accuracy_score(Y_test_binary, binary_pred))\nprint(classification_report(Y_test_binary, binary_pred))","4b45760a":"# 1. Importing the Dataset\n\nThe dataset is available through the University of California, Irvine Machine learning repository. Here is the URL:\n\nhttp:\/\/\/\/archive.ics.uci.edu\/ml\/datasets\/Heart+Disease","ce7bbb24":"# 5. Results and Metrics\n\nThe accuracy results we have been seeing are for the training data, but what about the testing dataset? If our model's cannot generalize to data that wasn't used to train them, they won't provide any utility.\n\nLet's test the performance of both our categorical model and binary model. To do this, we will make predictions on the training dataset and calculate performance metrics using Sklearn.","e18d1bd7":"# 4. Improving Results - A Binary Classification Problem\n\nAlthough we achieved promising results, we still have a fairly large error. This could be because it is very difficult to distinguish between the different severity levels of heart disease (classes 1 - 4). Let's simplify the problem by converting the data to a binary classification problem - heart disease or no heart disease.","01725af3":"# 2. Create Training and Testing Datasets\n\nNow that we have preprocessed the data appropriately, we can split it into training and testings datasets. We will use Sklearn's train_test_split() function to generate a training dataset (80 percent of the total data) and testing dataset (20 percent of the total data).\n\nFurthermore, the class values in this dataset contain multiple types of heart disease with values ranging from 0 (healthy) to 4 (severe heart disease). Consequently, we will need to convert our class data to categorical labels. For example, the label 2 will become [0, 0, 1, 0, 0].","45b9cbcb":"# 3. Building and Training the Neural Network\n\nNow that we have our data fully processed and split into training and testing datasets, we can begin building a neural network to solve this classification problem. Using keras, we will define a simple neural network with one hidden layer. Since this is a categorical classification problem, we will use a softmax activation function in the final layer of our network and a categorical_crossentropy loss during our training phase."}}