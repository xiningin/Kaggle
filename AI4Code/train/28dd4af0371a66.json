{"cell_type":{"610193d0":"code","58554191":"code","9e40921e":"code","c1354a6a":"code","e97fe5cc":"code","f8f1ccfa":"code","3402d0cd":"code","a5b8b883":"code","ca73b836":"code","ae15b8ab":"markdown","1468235a":"markdown","45e8a97a":"markdown","9ca3245a":"markdown","5c6c8f4f":"markdown","747cfdb6":"markdown","54762fd2":"markdown","19c4a0d1":"markdown","47e3f260":"markdown","4140858a":"markdown"},"source":{"610193d0":"# 1. Enable Internet in the Kernel (Settings side pane)\n\n# 2. Curl cache may need purged if v0.1.6 cannot be found (uncomment if needed). \n# !curl -X PURGE https:\/\/pypi.org\/simple\/kaggle-environments\n\n# ConnectX environment was defined in v0.1.6\n!pip install 'kaggle-environments>=0.1.6'","58554191":"from kaggle_environments import evaluate, make, utils\n\nenv = make(\"connectx\", debug=True)\nenv.render()","9e40921e":"def my_agent(obs, conf):\n    def get_results(x, y, mark, multiplier):\n        \"\"\" get list of points, lowest cells and \"in air\" cells of a board[x][y] cell considering mark \"\"\"\n        # set board[x][y] as mark\n        board[x][y] = mark\n        results = []\n        # if some points in axis already found - axis blocked\n        blocked = [False, False, False, False]\n        # i is amount of marks required to add points\n        for i in range(conf.inarow, 2, -1):\n            # points\n            p = 0\n            # lowest cell\n            lc = 0\n            # \"in air\" points\n            ap = 0\n            # axis S -> N, only if one mark required for victory\n            if i == conf.inarow and blocked[0] is False:\n                (p, lc, ap, blocked[0]) = process_results(p, lc, ap,\n                              check_axis(mark, i, x, lambda z : z, y + inarow_m1, lambda z : z - 1))\n            # axis SW -> NE\n            if blocked[1] is False:\n                (p, lc, ap, blocked[1]) = process_results(p, lc, ap,\n                    check_axis(mark, i, x - inarow_m1, lambda z : z + 1, y + inarow_m1, lambda z : z - 1))\n            # axis E -> W\n            if blocked[2] is False:\n                (p, lc, ap, blocked[2]) = process_results(p, lc, ap,\n                    check_axis(mark, i, x + inarow_m1, lambda z : z - 1, y, lambda z : z))\n            # axis SE -> NW\n            if blocked[3] is False:\n                (p, lc, ap, blocked[3]) = process_results(p, lc, ap, \n                    check_axis(mark, i, x + inarow_m1, lambda z : z - 1, y + inarow_m1, lambda z : z - 1))\n            results.append((p * multiplier, lc, ap))\n        # restore board[x][y] original value\n        board[x][y] = 0\n        return results\n    \n    def check_axis(mark, inarow, x, x_fun, y, y_fun):\n        \"\"\" check axis (NE -> SW etc.) for lowest cell and amounts of points and \"in air\" cells \"\"\"\n        (x, y, axis_max_range) = get_x_y_and_axis_max_range(x, x_fun, y, y_fun)\n        zeros_allowed = conf.inarow - inarow\n        #lowest_cell = y\n        # lowest_cell calculation turned off\n        lowest_cell = 0\n        for i in range(axis_max_range):\n            x_temp = x\n            y_temp = y\n            zeros_remained = zeros_allowed\n            marks = 0\n            # amount of empty cells that are \"in air\" (don't have board bottom or mark under them)\n            in_air = 0\n            for j in range(conf.inarow):\n                if board[x_temp][y_temp] != mark and board[x_temp][y_temp] != 0:\n                    break\n                elif board[x_temp][y_temp] == mark:\n                    marks += 1\n                # board[x_temp][y_temp] is 0\n                else:\n                    zeros_remained -= 1\n                    if (y_temp + 1) < conf.rows and board[x_temp][y_temp + 1] == 0:\n                        in_air -= 1\n#                 if y_temp > lowest_cell:\n#                     lowest_cell = y_temp\n                if marks == inarow and zeros_remained == 0:\n                    return (sp, lowest_cell, in_air, True)\n                x_temp = x_fun(x_temp)\n                y_temp = y_fun(y_temp)\n                if y_temp < 0 or y_temp >= conf.rows or x_temp < 0 or x_temp >= conf.columns:\n                    return (0, 0, 0, False)\n            x = x_fun(x)\n            y = y_fun(y)\n        return (0, 0, 0, False)\n        \n    def get_x_y_and_axis_max_range(x, x_fun, y, y_fun):\n        \"\"\" set x and y inside board boundaries and get max range of axis \"\"\"\n        axis_max_range = conf.inarow\n        while y < 0 or y >= conf.rows or x < 0 or x >= conf.columns:\n            x = x_fun(x)\n            y = y_fun(y)\n            axis_max_range -= 1\n        return (x, y, axis_max_range)\n    \n    def process_results(p, lc, ap, axis_check_results):\n        \"\"\" process results of check_axis function, return lowest cell and sums of points and \"in air\" cells \"\"\"\n        (points, lowest_cell, in_air, blocked) = axis_check_results\n        if points > 0:\n            if lc < lowest_cell:\n                lc = lowest_cell\n            ap += in_air\n            p += points\n        return (p, lc, ap, blocked)\n    \n    def get_best_cell(best_cell, current_cell):\n        \"\"\" get best cell by comparing factors of cells \"\"\"\n        for i in range(len(current_cell[\"factors\"])):\n            # index 0 = points, 1 = lowest cell, 2 = \"in air\" cells\n            for j in range(3):\n                # if value of best cell factor is smaller than value of\n                # the same factor in the current cell\n                # best cell = current cell and break the loop,\n                # don't compare lower priority factors\n                if best_cell[\"factors\"][i][j] < current_cell[\"factors\"][i][j]:\n                    return current_cell\n                # if value of best cell factor is bigger than value of\n                # the same factor in the current cell\n                # break loop and don't compare lower priority factors\n                if best_cell[\"factors\"][i][j] > current_cell[\"factors\"][i][j]:\n                    return best_cell\n        return best_cell\n    \n    def get_factors(results):\n        \"\"\" get list of factors represented by results and ordered by priority from highest to lowest \"\"\"\n        factors = []\n        for i in range(conf.inarow - 2):\n            if i == 1:\n                # my checker in this cell means my victory two times\n                factors.append(results[0][0][i] if results[0][0][i][0] > st else (0, 0, 0))\n                # opponent's checker in this cell means my defeat two times\n                factors.append(results[0][1][i] if results[0][1][i][0] > st else (0, 0, 0))\n                # if there are results of a cell one row above current\n                if len(results) > 1:\n                    # opponent's checker in cell one row above current means my defeat two times\n                    factors.append(results[1][1][i] if -results[1][1][i][0] > st else (0, 0, 0))\n                    # my checker in cell one row above current means my victory two times\n                    factors.append(results[1][0][i] if -results[1][0][i][0] > st else (0, 0, 0))\n                else:\n                    for j in range(2):\n                        factors.append((0, 0, 0))\n            else:\n                for j in range(2):\n                    factors.append((0, 0, 0))\n                for j in range(2):\n                    factors.append((0, 0, 0))\n            # consider only if there is no \"in air\" cells\n            if results[0][1][i][2] == 0:\n                # placing opponent's checker in this cell means opponent's victory\n                factors.append(results[0][1][i])\n            else:\n                factors.append((0, 0, 0))\n            # placing my checker in this cell means my victory\n            factors.append(results[0][0][i])\n            # central column priority\n            factors.append((1 if i == 1 and shift == 0 else 0, 0, 0))\n            # if there are results of a cell one row above current\n            if len(results) > 1:\n                # opponent's checker in cell one row above current means my defeat\n                factors.append(results[1][1][i])\n                # my checker in cell one row above current means my victory\n                factors.append(results[1][0][i])\n            else:\n                for j in range(2):\n                    factors.append((0, 0, 0))\n        # if there are results of a cell two rows above current\n        if len(results) > 2:\n            for i in range(conf.inarow - 2):\n                # my checker in cell two rows above current means my victory\n                factors.append(results[2][0][i])\n                # opponent's checker in cell two rows above current means my defeat\n                factors.append(results[2][1][i])\n        else:\n            for i in range(conf.inarow - 2):\n                for j in range(2):\n                    factors.append((0, 0, 0))\n        return factors\n\n\n    # define my mark and opponent's mark\n    my_mark = obs.mark\n    opp_mark = 2 if my_mark == 1 else 1\n    \n    # define board as two dimensional array\n    board = []\n    for column in range(conf.columns):\n        board.append([])\n        for row in range(conf.rows):\n            board[column].append(obs.board[conf.columns * row + column])\n    \n    best_cell = None\n    board_center = conf.columns \/\/ 2\n    inarow_m1 = conf.inarow - 1\n    \n    # standard amount of points\n    sp = 1\n    # \"seven\" pattern threshold points\n    st = 1\n    \n    # start searching for best_cell from board center\n    x = board_center\n    \n    # shift to right or left from board center\n    shift = 0\n    \n    # searching for best_cell\n    while x >= 0 and x < conf.columns:\n        # find first empty cell starting from bottom of the column\n        y = conf.rows - 1\n        while y >= 0 and board[x][y] != 0:\n            y -= 1\n        # if column is not full\n        if y >= 0:\n            # results of current cell and cells above it\n            results = []\n            results.append((get_results(x, y, my_mark, 1), get_results(x, y, opp_mark, 1)))\n            # if possible, get results of a cell one row above current\n            if (y - 1) >= 0:\n                results.append((get_results(x, y - 1, my_mark, -1), get_results(x, y - 1, opp_mark, -1)))\n            # if possible, get results of a cell two rows above current\n            if (y - 2) >= 0:\n                results.append((get_results(x, y - 2, my_mark, 1), get_results(x, y - 2, opp_mark, 1)))\n            \n            # list of factors represented by results\n            # ordered by priority from highest to lowest\n            factors = get_factors(results)\n\n            # if best_cell is not yet found\n            if best_cell is None:\n                best_cell = {\n                    \"column\": x,\n                    \"factors\": factors\n                }\n            # compare values of factors in best cell and current cell\n            else:\n                current_cell = {\n                    \"column\": x,\n                    \"factors\": factors\n                }\n                best_cell = get_best_cell(best_cell, current_cell)\n                        \n        # shift x to right or left from board center\n        if shift >= 0: shift += 1\n        shift *= -1\n        x = board_center + shift\n\n    # return index of the best cell column\n    return best_cell[\"column\"]","c1354a6a":"env.reset()\n# Play as the first agent against \"negamax\" agent.\nenv.run([my_agent, my_agent])\n#env.run([my_agent, \"negamax\"])\nenv.render(mode=\"ipython\", width=500, height=450)","e97fe5cc":"# Play as first position against negamax agent.\ntrainer = env.train([None, \"negamax\"])\n\nobservation = trainer.reset()\n\nwhile not env.done:\n    my_action = my_agent(observation, env.configuration)\n    print(\"My Action\", my_action)\n    observation, reward, done, info = trainer.step(my_action)\n    # env.render(mode=\"ipython\", width=100, height=90, header=False, controls=False)\nenv.render()","f8f1ccfa":"def mean_reward(rewards):\n    return \"won {0} of {1}\".format(sum(r[0] for r in rewards), len(rewards))\n\n# Run multiple episodes to estimate its performance.\nprint(\"My Agent vs Random Agent:\", mean_reward(evaluate(\"connectx\", [my_agent, \"random\"], num_episodes=10)))\nprint(\"My Agent vs Negamax Agent:\", mean_reward(evaluate(\"connectx\", [my_agent, \"negamax\"], num_episodes=10)))","3402d0cd":"# \"None\" represents which agent you'll manually play as (first or second player).\nenv.play([my_agent, None], width=500, height=450)\n#env.play([None, my_agent], width=500, height=450)","a5b8b883":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(my_agent, \"submission.py\")","ca73b836":"# Note: Stdout replacement is a temporary workaround.\nimport sys\nout = sys.stdout\nsubmission = utils.read_file(\"\/kaggle\/working\/submission.py\")\nagent = utils.get_last_callable(submission)\nsys.stdout = out\n\nenv = make(\"connectx\", debug=True)\nenv.run([agent, agent])\nprint(\"Success!\" if env.state[0].status == env.state[1].status == \"DONE\" else \"Failed...\")","ae15b8ab":"# Test your Agent","1468235a":"# Create an Agent\n\nTo create the submission, an agent function should be fully encapsulated (no external dependencies).  \n\nWhen your agent is being evaluated against others, it will not have access to the Kaggle docker image.  Only the following can be imported: Python Standard Library Modules, gym, numpy, scipy, pytorch (1.3.1, cpu only), and more may be added later.\n\n","45e8a97a":"# Submit to Competition\n\n1. Commit this kernel.\n2. View the commited version.\n3. Go to \"Data\" section and find submission.py file.\n4. Click \"Submit to Competition\"\n5. Go to [My Submissions](https:\/\/kaggle.com\/c\/connectx\/submissions) to view your score and episodes being played.","9ca3245a":"# Write Submission File\n\n","5c6c8f4f":"# Debug\/Train your Agent","747cfdb6":"# Create ConnectX Environment","54762fd2":"# Validate Submission\nPlay your submission against itself.  This is the first episode the competition will run to weed out erroneous agents.\n\nWhy validate? This roughly verifies that your submission is fully encapsulated and can be run remotely.","19c4a0d1":"# Play your Agent\nClick on any column to place a checker there (\"manually select action\").","47e3f260":"# Install kaggle-environments","4140858a":"# Evaluate your Agent"}}