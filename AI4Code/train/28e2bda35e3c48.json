{"cell_type":{"f65c75ef":"code","0acafc21":"code","ce5f19df":"code","66e5407a":"code","1b5804b8":"code","62461a11":"code","a491c5ff":"code","0843650f":"code","cbfa9f72":"code","9f0febc4":"code","3a018baa":"code","50e79e69":"code","d6b91872":"code","d01fbcc0":"code","c010fac5":"code","99eb0efc":"code","80e96474":"code","02803034":"code","a317a8bc":"code","aea5b98f":"code","13fe86e8":"code","ed7f5ddb":"code","2f31d037":"code","67bafd79":"code","96944c1d":"code","f2c3b99b":"code","a06d260e":"code","1099e85f":"code","24fb9c1c":"code","8271404f":"code","f0a4ac9b":"code","60c73a9e":"code","e6a80f9f":"code","b8ac8965":"code","651d1c92":"code","5090e52c":"code","a0567ec0":"code","73002494":"code","e7c4f266":"code","090b7f70":"code","fed543d7":"code","56b37c32":"code","3d9c723a":"code","81ced487":"code","dcefc3a5":"code","e69cb0c9":"code","9b8c743b":"code","5e904be7":"code","fa4b2d25":"code","2005fe11":"code","b9aa2bc5":"code","a2212026":"code","a6128db7":"code","37deeb9f":"code","c8d315df":"code","de88be8e":"code","edc21d85":"code","aba11408":"code","4e98f1c6":"code","f9d13686":"code","a671ab0c":"code","2576a11e":"code","ea22efcc":"code","36198cef":"markdown","c2e4913a":"markdown","d3039051":"markdown","e11f79c8":"markdown","bfdf7c5a":"markdown","4f0ad52a":"markdown","9bd4fdda":"markdown","eca87058":"markdown","c4cc57b1":"markdown","0ae5851f":"markdown","bd028f96":"markdown","f2a3914e":"markdown","616aca2d":"markdown","80425fe2":"markdown","ffaef42f":"markdown","78a236a1":"markdown","fe3d4dbf":"markdown","65c1837e":"markdown","94fbdd3d":"markdown","a5538210":"markdown","608e12bc":"markdown","3df810cb":"markdown","297fc93f":"markdown","4c08fa03":"markdown","b5ad5592":"markdown","a52b5b32":"markdown"},"source":{"f65c75ef":"# ----linear algebra---- #\nimport numpy as np\n\n# ----data processing---- #\nimport pandas as pd\n\n# ----visualization---- #\nimport seaborn as sns\nsns.set()\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n%matplotlib inline\n\n# ----missing numbers---- #\nimport missingno as msno\n\n# ----confusion matrix---- #\nfrom sklearn.metrics import confusion_matrix,classification_report,plot_confusion_matrix\n\n# ----random forest---- #\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport itertools","0acafc21":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","ce5f19df":"train.head()","66e5407a":"train.describe().transpose()","1b5804b8":"train.info()","62461a11":"train.isnull().sum()\n#Here we can see there are missing values at Age, Cabin, Embarked","a491c5ff":"plt.figure(figsize=(10,4),dpi=200)\nmsno.matrix(train);","0843650f":"plt.figure(figsize=(10,4),dpi=200)\nmsno.bar(df=train);","cbfa9f72":"# Missing Age\n\nsurvive_missing_age = train[(train['Age'].isnull()) & (train['Survived'] == 1)]\nprint(f'People with missing age that survived: {len(survive_missing_age)}')\n\nnot_survive_missing_age = train[(train['Age'].isnull()) & (train['Survived'] == 0)]\nprint(f'People with missing age that did not survive: {len(not_survive_missing_age)}')","9f0febc4":"#Missing Cabin\n\nsurvive_missing_cabin = train[(train['Cabin'].isnull()) & (train['Survived'] == 1)]\nprint(f'People with missing cabin that survived: {len(survive_missing_cabin)}')\n\nnot_survive_missing_cabin = train[(train['Cabin'].isnull()) & (train['Survived'] == 0)]\nprint(f'People with missing cabin that did not survive: {len(not_survive_missing_cabin)}')","3a018baa":"#Missing Embarked\n\ntrain['Embarked'].value_counts()","50e79e69":"train['Embarked'] = train['Embarked'].fillna('S')","d6b91872":"test.head()","d01fbcc0":"test.describe().transpose()","c010fac5":"test.info()\n#Here we can see there are missing values at Age, Fare, Cabin","99eb0efc":"test.isnull().sum()","80e96474":"#Missing Age\n\ntest['Age_missing'] = np.where(test['Age'].isnull(),1,0)","02803034":"#Missing Cabin\n\ntest['Cabin_missing'] = np.where(test['Cabin'].isnull(),1,0)","a317a8bc":"#Missing Embarked (Replacing with highest occuring frequency - 'S')\n\ntest['Embarked'] = test['Embarked'].fillna('S')","aea5b98f":"train.drop('Cabin',axis=1,inplace=True)","13fe86e8":"train = train.drop(['Ticket','PassengerId'],axis=1)\ntest = test.drop(['Ticket','Cabin','Age_missing','Cabin_missing'],axis=1)","ed7f5ddb":"#Let's first look at the correlation between all the features and the Survived feature, to see what features we should focus on\n\nheatmap_corr = train\n\nplt.figure(figsize=(15,6))\nsns.heatmap(data=heatmap_corr.corr(), annot=True)","2f31d037":"f,ax = plt.subplots(3,4,figsize=(22,20))\n\nsns.countplot('Pclass',data=train,ax=ax[0,0])\nsns.countplot('Sex',data=train,ax=ax[0,1])\nsns.boxplot(data=train,x='Pclass',y='Age',ax=ax[0,2])\nsns.countplot('SibSp',hue='Survived',data=train,ax=ax[0,3])\n\nsns.countplot('Pclass',hue='Survived',data=train,ax=ax[1,0])\nsns.countplot('Sex',hue='Survived',data=train,ax=ax[1,1])\nsns.distplot(train[train['Survived']==0]['Age'].dropna(),ax=ax[1,2],kde=False,bins=5)\nsns.distplot(train[train['Survived']==1]['Age'].dropna(),ax=ax[1,2],kde=False,bins=5)\nsns.countplot('Parch',hue='Survived',data=train,ax=ax[1,3])\n\nsns.distplot(train['Fare'].dropna(),ax=ax[2,0],kde=False)\nsns.swarmplot(x='Pclass',y='Fare',hue='Survived',data=train,ax=ax[2,1])\nsns.countplot('Embarked',data=train,ax=ax[2,2])\nsns.countplot('Embarked',hue='Survived',data=train,ax=ax[2,3])\n\nax[0,0].set_title('Total Passengers by Class')\nax[0,1].set_title('Total Passengers by Gender')\nax[0,2].set_title('Age Box Plot by Class')\nax[0,3].set_title('Survival Rate by SibSp')\nax[1,0].set_title('Survival Rate by Class')\nax[1,1].set_title('Survival Rate by Gender')\nax[1,2].set_title('Survival Rate by Age')\nax[1,3].set_title('Survival Rate by Parch')\nax[2,0].set_title('Fare Distribution')\nax[2,1].set_title('Survival Rate by Fare and Class')\nax[2,2].set_title('Total Passengers by Embarked')\nax[2,3].set_title('Survival Rate by Embarked')","67bafd79":"fig,ax = plt.subplots(figsize=(9,9))\nsns.countplot(data=train, x='Survived', lw=1, palette='viridis', edgecolor='black')\nsns.set_theme(style='darkgrid')\n\nplt.title('Survived vs Not Survived')\n\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2., height+2, height, ha='center')","96944c1d":"#Survival vs Age\n\nfig,ax = plt.subplots(figsize=(15,9))\nsns.histplot(data=train, x='Age', hue='Survived', bins=30, kde=True, element=\"step\",\n    palette='viridis')\n\nsns.set_theme(style=\"darkgrid\")\n\nplt.title('Survived\/Not Survived vs Age');","f2c3b99b":"#Survival vs Sex\n\nfig,ax = plt.subplots(figsize=(9,9))\nsns.countplot(data=train, x='Survived', lw=1, palette='viridis', edgecolor='black', hue='Sex')\nsns.set_theme(style='darkgrid')\n\nplt.title('Survived\/Not Survived vs Sex')\n\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2., height+2, height, ha='center')","a06d260e":"#Survival vs Pclass\n\nfig,ax = plt.subplots(figsize=(9,9))\nsns.countplot(data=train, x='Survived', lw=1, palette='viridis', edgecolor='black', hue='Pclass')\nsns.set_theme(style='darkgrid')\n\nplt.title('Survived\/Not Survived vs Pclass')\n\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2., height+2, height, ha='center')","1099e85f":"#Pclass and Sex vs Survival\n\ntab = pd.crosstab(train['Pclass'], train['Sex'])\nprint (tab)\n\n#We can see that there were more males in 3rd Pclass","24fb9c1c":"sns.factorplot(data=train, x='Sex', y='Survived', hue='Pclass', \n               size=4, aspect=2)","8271404f":"#Pclass, Sex and Embarked vs Survival\n\nsns.factorplot(data=train, x='Pclass', y='Survived', \n               hue='Sex', col='Embarked')","f0a4ac9b":"#Survival vs Embarked\n\nfig,ax = plt.subplots(figsize=(9,9))\nsns.countplot(data=train, x='Survived', lw=1, palette='viridis', edgecolor='black', hue='Embarked')\nsns.set_theme(style='darkgrid')\n\nplt.title('Survived\/Not Survived vs Embarked')\n\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2., height+2, height, ha='center')","60c73a9e":"#Survival vs Parch\n\nfig,ax = plt.subplots(figsize=(9,9))\nsns.countplot(data=train, x='Parch', lw=1, palette='viridis', edgecolor='black', hue='Survived')\nsns.set_theme(style='darkgrid')\n\nplt.title('Survived\/Not Survived vs Parch')\nplt.legend(loc='upper right')\n\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2., height+2, height, ha='center')","e6a80f9f":"#Survived (mean) vs Parch\ntrain[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean()","b8ac8965":"sns.barplot(data=train, x='Parch', y='Survived', ci=None)","651d1c92":"#Survival vs SibSp\n\nfig,ax = plt.subplots(figsize=(9,9))\nsns.countplot(data=train, x='SibSp', lw=1, palette='viridis', edgecolor='black', hue='Survived')\nsns.set_theme(style='darkgrid')\n\nplt.title('Survived\/Not Survived vs SibSp')\nplt.legend(loc='upper right')\n\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2., height+2, height, ha='center')","5090e52c":"train[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean()","a0567ec0":"plt.figure(figsize=(15,5),dpi=200)\nsns.barplot(data=train, x='SibSp', y='Survived', ci=None)\nplt.title('Survived\/Not Survived vs SibSp')","73002494":"#Survival vs Age: Sex\n\nfigure = plt.figure(figsize=(10,10))\n\nsns.violinplot(data=train, x=\"Sex\", y=\"Age\", hue=\"Survived\", split=True)\nplt.title('Age vs Sex and Survived\/Not Survived')","e7c4f266":"#Survival vs Age: Pclass\n\nfig = plt.figure(figsize=(10,10))\n\nsns.violinplot(data=train, x=\"Pclass\", y=\"Age\", hue=\"Survived\", split=True)\nplt.title('Age vs Pclass and Survived\/Not Survived')","090b7f70":"#As we can see, Sex and Age had the most effect on the survival rate\n\n#Reassigning Total\nsurvived_total = train[train['Survived']==1]\nnot_survived_total = train[train['Survived']==0]\n\n#Reassigning Male\nsurvived_male = train[(train['Survived']==1) & (train['Sex']==\"male\")]\nnot_survived_male = train[(train['Survived']==0) & (train['Sex']==\"male\")]\n\n#Reassigning Female\nsurvived_female = train[(train['Survived']==1) & (train['Sex']==\"female\")]\nnot_survived_female = train[(train['Survived']==0) & (train['Sex']==\"female\")]","fed543d7":"#Age\n\nplt.figure(figsize=(9,5),dpi=200)\nplt.xlim(0,81)\nplt.ylabel('Probability')\nsns.distplot(survived_total['Age'].values, \n             bins=range(0, 81, 1), color='green')\nsns.distplot(not_survived_total['Age'].values,\n             bins=range(0, 81, 1), color='blue', axlabel='Age')","56b37c32":"#Male\n\nplt.figure(figsize=(9,5),dpi=200)\nplt.xlim(0,81)\nplt.ylabel('Probability')\nsns.distplot(survived_male['Age'].values, \n             bins=range(0, 81, 1), color='green')\nsns.distplot(not_survived_male['Age'].values, \n             bins=range(0, 81, 1), color='blue', axlabel='Male Age')","3d9c723a":"#Female\n\nplt.figure(figsize=(9,5),dpi=200)\nplt.xlim(0,81)\nplt.ylabel('Probability')\nsns.distplot(survived_female['Age'].values, \n             bins=range(0, 81, 1), color='green')\nsns.distplot(not_survived_female['Age'].values, \n             bins=range(0, 81, 1), color='blue', axlabel='Female Age')","81ced487":"#Name\n\ntrain_test_data = [train, test]\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+)\\.')","dcefc3a5":"pd.crosstab(train['Title'], train['Sex'])","e69cb0c9":"#Replacing less popular features with \"Other\"\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col', \\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    \ntrain[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","9b8c743b":"#Converting Titles to numerical form\n\ntitle_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Other\": 5}\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)","5e904be7":"#Converting Sex to numerical form\n\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)","fa4b2d25":"#Converting Embarked to numerical form\n\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)","2005fe11":"#Age (creating age groups)\n\nfor dataset in train_test_data:\n    avg_age = dataset['Age'].mean()\n    std_age = dataset['Age'].std()\n    null_count_age = dataset['Age'].isnull().sum()\n    \n    age_null_random_list = np.random.randint(avg_age - std_age, avg_age + std_age, size=null_count_age)\n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)\n    \ntrain['AgeGroup'] = pd.cut(train['Age'], 5)\n\nprint (train[['AgeGroup', 'Survived']].groupby(['AgeGroup'], as_index=False).mean())","b9aa2bc5":"#Mapping AgeGroup into train_test_data\n\nfor dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4","a2212026":"#Fare (creating fare groups)\n\nfor dataset in train_test_data:\n    dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())","a6128db7":"train['FareGroup'] = pd.qcut(train['Fare'], 4)\nprint (train[['FareGroup', 'Survived']].groupby(['FareGroup'], as_index=False).mean())","37deeb9f":"#Mapping FareGroup into train_test_data\n\nfor dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)","c8d315df":"#Because SibSp and Parch are based on 'Family size', we can combine them\n\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['SibSp'] +  dataset['Parch'] + 1\n\nprint (train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean())","de88be8e":"#Looking at passengers who travelled alone\n\nfor dataset in train_test_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n    \nprint (train[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean())","edc21d85":"features_drop = ['Name', 'SibSp', 'Parch', 'FamilySize']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['AgeGroup', 'FareGroup'], axis=1)","aba11408":"train.head()","4e98f1c6":"test.head()","f9d13686":"X_train = train.drop('Survived', axis=1)\ny_train = train['Survived']\nX_test = test.drop(\"PassengerId\", axis=1).copy()\n\nX_train.shape, y_train.shape, X_test.shape","a671ab0c":"rfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)\ny_pred_random_forest = rfc.predict(X_test)\nrandom_forest_accuracy = round(rfc.score(X_train, y_train) * 100, 2)\nprint (random_forest_accuracy)","2576a11e":"#Confusion Matrix\n\nclass_names = ['Survived', 'Not Survived']\n\ny_pred_random_forest_training_set = rfc.predict(X_train)\n\ncnf_matrix = confusion_matrix(y_train, y_pred_random_forest_training_set)\nnp.set_printoptions(precision=2)\n\nprint ('Confusion Matrix')\nprint (cnf_matrix)\nprint ('')\n\n\ntrue_class_names = ['True Survived', 'True Not Survived']\npredicted_class_names = ['Predicted Survived', 'Predicted Not Survived']\n\ndf_cnf_matrix = pd.DataFrame(cnf_matrix, \n                             index = true_class_names,\n                             columns = predicted_class_names)\n\nplt.figure(figsize = (15,5))\n\nplt.subplot(121)\nsns.heatmap(df_cnf_matrix, annot=True, fmt='d')","ea22efcc":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": y_pred_random_forest\n    })","36198cef":"### Converting categories to numerics","c2e4913a":"### More info about the training dataset","d3039051":"### More info about the test dataset","e11f79c8":"Survived: 342 (38.4%) <br>\nNot Survived: 549 (61.6%)","bfdf7c5a":"Here it is clear that 47.92% of passengers embarking from Southhampton did not survive","4f0ad52a":"### Cleaning the training Data","9bd4fdda":"### Removing invalid data","eca87058":"## Titanic","c4cc57b1":"Here we can see that most passengers that did not survive was between ages 15 and 30","0ae5851f":"### Accuracy","bd028f96":"### Relationships between Features and Survival","f2a3914e":"There are 177 people with missing age out of 891 total ages (Train Data) <br>\nThus 20% of Age data is missing in Train Data","616aca2d":"Males between 0-14 years old have better chance of survival","80425fe2":"From the above 2 violinplots, we can confirm that\n- Pclass 1: Very few children and more old people compared to Pclass 2 and 3\n- Pclass 2: Almost all children (between age 0 to 10) survived.\n- Pclass 3: Most children survived\n- Sex: Females (between age 18-40) had a better chance of survival and most Male children (between age 0-14) survived\n","ffaef42f":"18.89% of Males Survived <br>\n74.20% of Females Survived","78a236a1":"### Importing the Modules","fe3d4dbf":"Children between 0-5 years old had a better chance of survival. Passengers between 30-40 years old have slightly a better chance of survival","65c1837e":"There are only 2 missing values for 'Embarked' <br>\nThus we can replace the missing 'Embarked' values with highest occuring frequency -> Southhampton","94fbdd3d":"### Reading CSV Files","a5538210":"### Removing Invalid Data","608e12bc":"62.96 % (136) of the 1st class passengers (216) survived <br>\n47.28 % (87) of 2nd class passengers (184) survived <br>\n24.24 % (119) of 3rd class passengers (491) survived","3df810cb":"Men from 2nd and 3rd Pclass have +-10% chance of survival <br>\nWomen from 1st and 2nd Pclass have almost 100% chance of survival","297fc93f":"There are 687 people with missing cabins out of 891 total cabins (Train Data) <br>\nThus 77% of Cabin data is missing in Train Data\n","4c08fa03":"Females between 25-40 years old and 50+ years old have a better chance of survival","b5ad5592":"Thus the passengers who travelled alone, only had a 30% chance of survival","a52b5b32":"Here we can confirm that almost all females from Pclass 1 and 2 survived <br>\nMales from the 1st Pclass had a slightly higher chance of survival than from the 2nd and 3rd Pclass"}}