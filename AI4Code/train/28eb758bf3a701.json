{"cell_type":{"f7f194b7":"code","4e64df3f":"code","6e68b4fc":"code","830f5592":"code","7305aba1":"code","dd770251":"code","1a46ec65":"code","bfabfd1c":"code","a304fd74":"code","6e4a0c51":"code","cc508655":"code","c70c75af":"markdown","a3b48a91":"markdown","40fd19a0":"markdown","25dac090":"markdown","b24ed0af":"markdown","2b22a2d6":"markdown"},"source":{"f7f194b7":"import numpy as np \nimport pandas as pd ","4e64df3f":"np.__version__\npd.__version__","6e68b4fc":"!wget https:\/\/raw.githubusercontent.com\/alexeygrigorev\/mlbookcamp-code\/master\/chapter-02-car-price\/data.csv","830f5592":"data = pd.read_csv(\".\/data.csv\")\ndf = data[data['Make'] == 'BMW']\ndf.MSRP.mean()","7305aba1":"len(data[data[\"Engine HP\"]==np.NaN])","dd770251":"mean_before_fill = data['Engine HP'].mean()\nprint(round(mean_before_fill))\nfilled_data = data['Engine HP'].fillna(mean_before_fill)\nmean_after_fill = filled_data.mean()\nprint(round(mean_after_fill))","1a46ec65":"def vector_vector_multiplication(u, v):\n    assert u.shape[0] == v.shape[0]\n    \n    n = u.shape[0]\n    \n    result = 0.0\n\n    for i in range(n):\n        result = result + u[i] * v[i]\n    \n    return result","bfabfd1c":"\ndef matrix_vector_multiplication(U, v):\n    assert U.shape[1] == v.shape[0]\n    \n    num_rows = U.shape[0]\n    \n    result = np.zeros(num_rows)\n    \n    for i in range(num_rows):\n        result[i] = vector_vector_multiplication(U[i], v)\n    \n    return result","a304fd74":"def matrix_matrix_multiplication(U, V):\n    assert U.shape[1] == V.shape[0]\n    \n    num_rows = U.shape[0]\n    num_cols = V.shape[1]\n    \n    result = np.zeros((num_rows, num_cols))\n    \n    for i in range(num_cols):\n        vi = V[:, i]\n        Uvi = matrix_vector_multiplication(U, vi)\n        result[:, i] = Uvi\n    \n    return result","6e4a0c51":"Rolls_royce_data = data[data.Make == \"Rolls-Royce\"]\nfeatures = [\"Engine HP\", \"Engine Cylinders\", \"highway MPG\"]\nmatrix_RR = pd.get_dummies(Rolls_royce_data[features])\nmatrix_RR = matrix_RR.drop_duplicates()\n\nX = np.array(matrix_RR)\nXTX = matrix_matrix_multiplication(X.T, X)\nXTX_inv = np.linalg.inv(XTX)\nXTX_inv.sum()","cc508655":"y = np.array([1000, 1100, 900, 1200, 1000, 850, 1300])\nprod = matrix_matrix_multiplication(XTX_inv, X.T)\nw = matrix_vector_multiplication(prod, y)\nw","c70c75af":"# **Question 7**","a3b48a91":"# **Question 3**","40fd19a0":"# **Question 5**","25dac090":"# **Question 6**","b24ed0af":"# **Question 1, 2**","2b22a2d6":"# ** Question 4 **"}}