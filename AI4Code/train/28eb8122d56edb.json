{"cell_type":{"026b5aea":"code","af71fee7":"code","961343d0":"code","25c5c260":"code","8a0bb76a":"code","a19a41f3":"code","1dc3035a":"code","9aa1002e":"code","6b20a837":"markdown","bcc783a4":"markdown","0c79a6c8":"markdown","fec2dac0":"markdown","1e12d6f5":"markdown"},"source":{"026b5aea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as p # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af71fee7":"from keras.utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import models, Model, Input, layers, callbacks","961343d0":"def prepare_data():\n    \n    train_dir = '\/kaggle\/input\/sign-language-mnist\/sign_mnist_train.csv'\n    test_dir = '\/kaggle\/input\/sign-language-mnist\/sign_mnist_test.csv'\n    \n    df_train = p.read_csv(train_dir)\n    df_test = p.read_csv(test_dir)\n    y_train = to_categorical(df_train['label'])\n    y_test = to_categorical(df_test['label'])\n    del df_train['label']\n    del df_test['label']\n    \n    df_train = df_train.values \/ 255\n    df_test = df_test.values \/ 255\n    x_train = df_train.reshape(df_train.shape[0], 28, 28,1)\n    x_test = df_test.reshape(df_test.shape[0], 28, 28, 1)\n    \n    \n    \n    return x_train, y_train, x_test, y_test","25c5c260":"x_train, y_train, x_test, y_test = prepare_data()","8a0bb76a":"#----COPIED----\ndata_gen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)\n#--------------\ndata_gen.fit(x_train)\n\nmy_callbacks = [callbacks.ReduceLROnPlateau(factor= 0.5, metrics='val_accuracy', patience=3),\n            callbacks.ModelCheckpoint(mointor='val_accuracy', filepath='\/best0.hdf5', save_best_only=True)]","a19a41f3":"model0 = models.Sequential()\n\nmodel0.add(layers.Conv2D(256, (3,3),activation='relu', input_shape=(28, 28, 1)))\nmodel0.add(layers.Conv2D(256, (3,3), activation='relu'))\nmodel0.add(layers.BatchNormalization())\nmodel0.add(layers.MaxPooling2D())\nmodel0.add(layers.Dropout(0.3))\n\nmodel0.add(layers.Conv2D(128, (3,3), activation='relu'))\nmodel0.add(layers.Conv2D(128, (3,3), activation='relu'))\nmodel0.add(layers.BatchNormalization())\nmodel0.add(layers.MaxPooling2D())\nmodel0.add(layers.Dropout(0.3))\n\n\nmodel0.add(layers.Flatten())\n\nmodel0.add(layers.Dense(256, activation='relu'))\nmodel0.add(layers.Dense(25, activation='softmax'))\n\nmodel0.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel0.fit(data_gen.flow(x_train, y_train, batch_size=128), epochs=20, validation_data=(x_test, y_test), callbacks=my_callbacks)","1dc3035a":"model0.load_weights('\/best0.hdf5')","9aa1002e":"model0.evaluate(x_test, y_test)","6b20a837":"# **Data Augmentation, Callbacks**","bcc783a4":"# **Preparing Data**","0c79a6c8":"# **Evaluate On Test Data**","fec2dac0":"# **Training The Model**","1e12d6f5":"# **Importing Libraries**"}}