{"cell_type":{"37987013":"code","49c87837":"code","fbcd53be":"code","45a2c0c1":"code","f05cbd99":"code","7fccd43e":"code","b2bd2765":"code","12549484":"code","16f70819":"code","78c4aa78":"code","296ca935":"code","ad0c6a7a":"code","b8eb0ad7":"code","d88dd5cd":"code","4904c519":"code","7052ee03":"code","08e10c71":"code","f1d2c603":"code","19f40806":"code","872eebb3":"code","b5ee11fb":"code","29b88bb8":"markdown","bb1c33f3":"markdown","14ec23b2":"markdown","b8fd1cd9":"markdown","de3e7373":"markdown","fe000187":"markdown","e6fd92e7":"markdown","92ad005a":"markdown","fb8b984f":"markdown","746b373b":"markdown","65806db2":"markdown","ed8e2f8f":"markdown","e488b6eb":"markdown","92f96c10":"markdown","39462edf":"markdown","8ad5ff89":"markdown"},"source":{"37987013":"import re\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS\nfrom copy import copy\nimport gensim\nfrom gensim.utils import simple_preprocess\nfrom gensim.parsing.preprocessing import STOPWORDS\nfrom nltk.stem import WordNetLemmatizer, SnowballStemmer\nfrom nltk.stem.porter import *\nimport nltk\nfrom gensim import corpora, models\nimport pyLDAvis\nimport pyLDAvis.gensim\nfrom keras.preprocessing.text import Tokenizer\n\npyLDAvis.enable_notebook()\nnp.random.seed(2018)\nimport warnings\nwarnings.filterwarnings('ignore')","49c87837":"with open(\"\/kaggle\/input\/usa-presidential-debate-2020\/presidential_debate_transcript.txt\", \"r\") as file:\n    text_data = file.read()","fbcd53be":"print(f\"Length of transcript text: {len(text_data)}\")","45a2c0c1":"print(f\"Text transcript excerpt:\\n========================\\n\\n{text_data[:256]}\")","f05cbd99":"regex_list = [\"BIDEN:\", \"TRUMP:\", \"WALLACE:\", \"CROSSTALK\"]\ngroup = 0\ntexts = text_data.split(\"\\n\")\nprint(f\"paragraphs: {len(texts)}\")\nfor regex in regex_list:\n    count = 0\n    for text in texts:\n        regex_pattern = re.compile(regex, re.UNICODE)\n        results = [match.group(group) for match in regex_pattern.finditer(text)]\n        count = count + len(results)\n    print(f\"speaker: {regex.rstrip(':')}, count: {count}\")\n","7fccd43e":"stopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='white',\n        stopwords=stopwords,\n        max_words=50,\n        max_font_size=40, \n        scale=5,\n        random_state=1\n    ).generate(str(data))\n\n    fig = plt.figure(1, figsize=(10,10))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()","b2bd2765":"show_wordcloud(text_data, \"Prevalent words in the transcript\")","12549484":"filter_list = [\"TRUMP\", \"BIDEN\", \"WALLACE\", \"CROSSTALK BIDEN\", \"CROSSTALK WALLACE\", \"CROSSTALK TRUMP\", \"CROSSTALK\",\n               \"Vice President\", \"President Trump\",\"President Biden\", \"Mr President\", \"Mr  President\", \"president\"]\n\ntext_data_copy = copy(text_data)\nfor filter_item in filter_list:\n    filtrate = re.compile(filter_item)\n    text_data_copy = filtrate.sub(r\"\", text_data_copy)","16f70819":"show_wordcloud(text_data_copy, \"Prevalent words in the transcript (filter repetitive words)\")","78c4aa78":"def preprocess(text):\n    result = []\n    for token in gensim.utils.simple_preprocess(text):\n        if token not in gensim.parsing.preprocessing.STOPWORDS and len(token) > 2:\n            result.append(token)\n    return result","296ca935":"text_sample = text_data[:256]\nprint('Original text: {}'.format(text_sample))\nprint('Tokenized text: {}'.format(preprocess(text_sample)))","ad0c6a7a":"texts = text_data.split(\"\\n\")\ntext_df = pd.DataFrame(texts)\ntext_df.columns = [\"text\"]\ntext_df.head()","b8eb0ad7":"preprocessed_text = text_df[\"text\"].map(preprocess)","d88dd5cd":"dictionary = gensim.corpora.Dictionary(preprocessed_text)\ndictionary.filter_extremes(no_below=10, no_above=0.5, keep_n=75000)","4904c519":"bow_corpus = [dictionary.doc2bow(doc) for doc in preprocessed_text]\ntfidf = models.TfidfModel(bow_corpus)\ncorpus_tfidf = tfidf[bow_corpus]","7052ee03":"lda_model = gensim.models.LdaMulticore(corpus_tfidf, num_topics=20,\n                                    id2word=dictionary, passes=2, workers=2)","08e10c71":"topics = lda_model.print_topics(num_words=5)\nfor i, topic in enumerate(topics[:10]):\n    print(\"Train topic {}: {}\".format(i, topic))","f1d2c603":"bd5 = bow_corpus[5]\nfor i in range(len(bd5)):\n    print(\"Word {} (\\\"{}\\\") appears {} time.\".format(bd5[i][0], dictionary[bd5[i][0]],bd5[i][1]))","19f40806":"for index, score in sorted(lda_model[bd5], key=lambda tup: -1*tup[1]):\n    print(\"\\nScore: {}\\t \\nTopic: {}\".format(score, lda_model.print_topic(index, 5)))","872eebb3":"vis = pyLDAvis.gensim.prepare(lda_model, bow_corpus, dictionary)","b5ee11fb":"pyLDAvis.save_html(vis, \"LDAVis_text.html\")","29b88bb8":"Let's eliminate the following frequent words:\n* TRUMP\n* BIDEN\n* WALLACE\n* CROSSTALK WALLACE\n* CROSSTALK BIDEN\n* CROSSTALK TRUMP\n* CROSSTALK\n* Vice President\n* President Trump\n* President Biden\n* Mr President\n* president","bb1c33f3":"Let's tokenize now all the text and create a dictionary from th resulting corpora.","14ec23b2":"We create a bow corpus and apply TFIDF.","b8fd1cd9":"We apply LDA to the corpus.","de3e7373":"### 2.2. What are the most frequent words?","fe000187":"### 2.3. Topic modelling\n\n\nWe will use `gensim` and `LDA` to extract the topics.\n\nWe define first a preprocessing function.","e6fd92e7":"Let's check the preprocessor for a small part of the text.","92ad005a":"### 1.2. Load data","fb8b984f":"We prepare the topics for visualization, using LDAVis.","746b373b":"Let's see how many times each of the speakers had interventions.","65806db2":"## 1. Analysis preparation\n\n### 1.1. Load packages","ed8e2f8f":"## 2. Data exploration","e488b6eb":"Let's answer to few simple questions, like:\n* How many times each of the participants has spoken?\n* What are the most used expressions?\n* Could we identify the topics of the discussion?","92f96c10":"To visualize the topics, open the outputed html page from the output section of the Notebook.","39462edf":"### 2.1. Who speaks more?","8ad5ff89":"### 1.3. Glimpse the data"}}