{"cell_type":{"fb8a6df5":"code","c2448684":"code","e5d59435":"code","9ad89416":"code","bdef6303":"code","e39ee34f":"code","46f7d227":"code","4ce9bcb3":"code","9ae38f30":"code","b0676ef4":"code","58b764b1":"code","af65b3a5":"code","deacd316":"code","ae1f1cf3":"code","094ffef1":"code","43e81657":"code","08135e34":"code","539a029f":"markdown","54abbb47":"markdown","ad8d4c70":"markdown","aa71f84f":"markdown","c5d66ec9":"markdown","23b09279":"markdown","e1f63c40":"markdown"},"source":{"fb8a6df5":"!pip install -q efficientnet","c2448684":"import numpy as np\nimport pandas as pd\nimport os\nimport tensorflow as tf\nimport keras\nimport efficientnet.tfkeras as efn\nfrom kaggle_datasets import KaggleDatasets\nfrom tensorflow.keras.models import Sequential\nimport tensorflow.keras.layers as L\nfrom tensorflow.keras.applications import InceptionResNetV2\nfrom tensorflow.keras.layers import Dense, GlobalAveragePooling2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt","e5d59435":"# TPU or GPU detection\n# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy()\n    \ndef seed_everything(seed=0):\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n\nseed = 2048\nseed_everything(seed)\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)\n\n# Data access\nGCS_DS_PATH = KaggleDatasets().get_gcs_path()\n\n# Configuration\nEPOCHS = 40\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync","9ad89416":"def format_path(st):\n    return GCS_DS_PATH + '\/images\/' + st + '.jpg'","bdef6303":"train = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/sample_submission.csv')\n\ntrain_paths = train.image_id.apply(format_path).values\ntest_paths = test.image_id.apply(format_path).values\ntrain_labels = train.loc[:, 'healthy':].values\nSPLIT_VALIDATION =True\nif SPLIT_VALIDATION:\n    train_paths, valid_paths, train_labels, valid_labels =train_test_split(train_paths, train_labels, test_size=0.15, random_state=seed)\n\n## \u0435\u0441\u043b\u0438 \u043f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u0442\u0435 \u043e\u0431\u0443\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u044e\u0449\u0438\u043c \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445\n# train_paths, valid_paths, train_labels, valid_labels = train_test_split(\n#     train_paths, train_labels, test_size=0.15, random_state=2020)","e39ee34f":"image_size = 800","46f7d227":"def decode_image(filename, label=None, image_size=(image_size, image_size)):\n    bits = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(bits, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.resize(image, image_size)\n    \n    if label is None:\n        return image\n    else:\n        return image, label\n\ndef data_augment(image, label=None):\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    \n    if label is None:\n        return image\n    else:\n        return image, label","4ce9bcb3":"train_dataset = (\ntf.data.Dataset\n    .from_tensor_slices((train_paths, train_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .cache()\n    .map(data_augment, num_parallel_calls=AUTO)\n    .repeat()\n    .shuffle(512)\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n)\ntrain_dataset_1 = (\ntf.data.Dataset\n    .from_tensor_slices((train_paths, train_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .cache()\n    .map(data_augment, num_parallel_calls=AUTO)\n    .repeat()\n    .shuffle(512)\n    .batch(64)\n    .prefetch(AUTO)\n)\nvalid_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((valid_paths, valid_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE)\n    .cache()\n    .prefetch(AUTO)\n)\n\ntest_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(test_paths)\n    .map(decode_image, num_parallel_calls=AUTO)\n    .map(data_augment, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE)\n)","9ae38f30":"LR_START = 0.0001\nLR_MAX = 0.00005 * strategy.num_replicas_in_sync\nLR_MIN = 0.0001\nLR_RAMPUP_EPOCHS = 4\nLR_SUSTAIN_EPOCHS = 6\nLR_EXP_DECAY = .8\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)\n\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","b0676ef4":"# from tensorflow.keras.layers import Layer\n\n# class SoftProbField(Layer):\n#     def __init__(self, **kwargs):\n#         super(SoftProbField, self).__init__(**kwargs)\n\n#     def build(self, input_shape):\n#         super(SoftProbField, self).build(input_shape)  # Be sure to call this at the end\n\n#     def call(self, x):\n#         h = x[:, 0]\n#         s = x[:, 1]\n#         r = x[:, 2]\n        \n#         m = s*r*(1-h)\n#         s = s*(1-h)*(1-m)\n#         r = r*(1-h)*(1-m)\n#         return tf.stack([h, m, r, s], axis=-1)\n\n#     def compute_output_shape(self, input_shape):\n#         return (input_shape[0], 4)","58b764b1":"with strategy.scope():\n    model = tf.keras.Sequential([\n        InceptionResNetV2(\n            input_shape=(image_size, image_size, 3),\n            weights='imagenet',\n            include_top=False\n        ),\n        L.GlobalMaxPooling2D(),\n        L.Dense(4, activation='softmax')\n#         SoftProbField()\n    ])\n        \n    model.compile(\n        optimizer = 'adam',\n        loss = 'categorical_crossentropy',\n        metrics=['categorical_accuracy']\n    )\n    model.summary()","af65b3a5":"\nSTEPS_PER_EPOCH = train_labels.shape[0] \/\/ BATCH_SIZE\n\nhistory = model.fit(\n    train_dataset, \n    epochs=EPOCHS, \n    callbacks=[lr_callback],\n    steps_per_epoch=STEPS_PER_EPOCH,\n    validation_data=valid_dataset if SPLIT_VALIDATION else None,\n)","deacd316":"with strategy.scope():\n    model2 = tf.keras.Sequential([\n        efn.EfficientNetB7(\n            input_shape=(image_size, image_size, 3),\n            weights='noisy-student',\n            include_top=False\n        ),\n         L.GlobalMaxPooling2D(),\n        L.Dense(4, activation='softmax')\n    ])\n        \n    model2.compile(\n        optimizer = 'adam',\n        loss = 'categorical_crossentropy',\n        metrics=['categorical_accuracy']\n    )\n    model2.summary()","ae1f1cf3":"STEPS_PER_EPOCH = train_labels.shape[0] \/\/ 64\n\nhistory = model2.fit(\n    train_dataset_1, \n    epochs=EPOCHS, \n    callbacks=[lr_callback],\n    steps_per_epoch=STEPS_PER_EPOCH,\n    validation_data=valid_dataset if SPLIT_VALIDATION else None,\n)","094ffef1":"def display_training_curves(training, validation, title, subplot):\n    \"\"\"\n    Source: https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu\n    \"\"\"\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","43e81657":"display_training_curves(\n    history.history['loss'], \n    history.history['val_loss'], \n    'loss', 211)\ndisplay_training_curves(\n    history.history['categorical_accuracy'], \n    history.history['val_categorical_accuracy'], \n    'accuracy', 212)","08135e34":"probs1 = model.predict(test_dataset, verbose=1)\nprobs2 = model2.predict(test_dataset, verbose=1)\nprobs_avg = (probs1+probs2)\/2\nsub.loc[:, 'healthy':] = probs_avg\nsub.to_csv('submission.csv', index=False)\nsub.head()","539a029f":"# Model Architecture","54abbb47":"# TPU Config","ad8d4c70":"# if you like it ,please vote for it,good score for you ( \u2022\u0300 \u03c9 \u2022\u0301 )\u2727","aa71f84f":"V1: seresnet101 0.959\n\nV6: B7+InceprtionresnetV2 0.974\n\nV7: image_size=800 0.974\n\nV8:replace optimizer 0.978\n\nV9:weight=noisy-student,\n\nV10:maxpooling\n\nV13:add random_crop and TTA\n\nV15:fix seed and add valid_data","c5d66ec9":"# Prediction","23b09279":"# Image Resizing","e1f63c40":"# Load Labels"}}