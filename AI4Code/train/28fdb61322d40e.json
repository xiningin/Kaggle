{"cell_type":{"7cdaeeaa":"code","6de48ca0":"code","3312ce41":"code","f364a887":"code","aee136af":"code","e7b0adf0":"code","8898ac84":"code","7a3cfa61":"code","e4f665cf":"code","61175507":"code","77723632":"code","688905b0":"code","3b3b75d0":"code","8d6794d7":"code","c712c6da":"code","1d0e1607":"code","4575e1db":"code","c9867110":"code","f7df77de":"code","c4f557dc":"code","3ea5ec09":"code","1f69fcd9":"markdown"},"source":{"7cdaeeaa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6de48ca0":"from fastai.tabular import *","3312ce41":"from sklearn.metrics import roc_auc_score\n\ndef auroc_score(input, target):\n    input, target = input.cpu().numpy()[:,1], target.cpu().numpy()\n    return roc_auc_score(target, input)\n\nclass AUROC(Callback):\n    _order = -20 #Needs to run before the recorder\n\n    def __init__(self, learn, **kwargs): self.learn = learn\n    def on_train_begin(self, **kwargs): self.learn.recorder.add_metric_names(['AUROC'])\n    def on_epoch_begin(self, **kwargs): self.output, self.target = [], []\n    \n    def on_batch_end(self, last_target, last_output, train, **kwargs):\n        if not train:\n            self.output.append(last_output)\n            self.target.append(last_target)\n                \n    def on_epoch_end(self, last_metrics, **kwargs):\n        if len(self.output) > 0:\n            output = torch.cat(self.output)\n            target = torch.cat(self.target)\n            preds = F.softmax(output, dim=1)\n            metric = auroc_score(preds, target)\n            return add_metrics(last_metrics, [metric])","f364a887":"train_df = pd.read_csv('..\/input\/creditcard.csv')","aee136af":"cont_names = ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10',\n       'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20',\n       'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount',]\n\ndep_var='Class'\nprocs=[ Normalize]","e7b0adf0":"data = (TabularList.from_df(train_df, cont_names=cont_names , procs=procs,)\n                .split_subsets(train_size=0.8, valid_size=0.2, seed=34)\n                .label_from_df(cols=dep_var)\n                .databunch())","8898ac84":"learn = tabular_learner(data, layers=[200,100],metrics=accuracy, callback_fns=AUROC)","7a3cfa61":"learn.lr_find()","e4f665cf":"learn.recorder.plot()","61175507":"learn.fit_one_cycle(4, 1e-02)","77723632":"from imblearn.over_sampling import SMOTE","688905b0":"#save the column name\ncol_name = train_df.columns\nx_col = col_name[:-1]\ny_col = col_name[-1]\n\nX = train_df.drop('Class', axis=1)\nY = train_df.Class\nX_res, Y_res = SMOTE().fit_resample(X, Y)","3b3b75d0":"smote_df = pd.DataFrame(X_res, columns = x_col)","8d6794d7":"smote_df = smote_df.assign(Class = Y_res)","c712c6da":"smote_df.Class.value_counts()","1d0e1607":"data = (TabularList.from_df(smote_df, cont_names=cont_names , procs=procs,)\n                .split_subsets(train_size=0.8, valid_size=0.2, seed=34)\n                .label_from_df(cols=dep_var)\n                #.add_test(test)\n                .databunch())","4575e1db":"learn = tabular_learner(data, layers=[200,100],metrics=accuracy, callback_fns=AUROC)","c9867110":"learn.lr_find()","f7df77de":"learn.recorder.plot()","c4f557dc":"learn.fit_one_cycle(5, 5e-03)","3ea5ec09":"learn.recorder.plot_losses()","1f69fcd9":"## try to oversample the fraud data by using SMOTE"}}