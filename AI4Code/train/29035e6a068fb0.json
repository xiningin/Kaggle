{"cell_type":{"864be2a3":"code","fac75f14":"code","b3e250b7":"code","3019841d":"code","d550f6ef":"code","7aa5a5fc":"code","e46898f4":"code","57185a86":"code","c7f85d29":"code","780f5b8d":"code","a0601fc8":"code","0ca03bd9":"code","ee1e6c01":"code","c1b77755":"code","260f6371":"code","890ebd0d":"code","7190fa83":"code","b7175efc":"code","4257ce53":"code","6080917d":"code","e1f78d1d":"code","ae3b1071":"code","f51ea161":"code","3cf13c43":"code","16a8b53e":"code","5320546c":"code","3d831999":"code","e66c13c7":"code","3e2e4029":"code","1572229a":"code","99169d87":"code","bdd95dbc":"code","f39acb60":"code","3d372334":"code","712ab47d":"code","4d01eab9":"code","f2dae6e6":"code","d97cf3d5":"code","ddd0b3b2":"code","6f3aff57":"code","13109bfb":"code","890ae52d":"code","d0149df7":"code","b8d8921a":"code","3732cac6":"code","457153c5":"code","d24696b8":"code","96b539b3":"code","39c7fb58":"code","cf02a48e":"code","ca3a9e50":"code","222ef5e0":"code","966597ab":"code","7d061b70":"code","c750892f":"code","19c63d89":"code","d2b130b1":"code","9c32d814":"code","af3cf7c5":"code","e714477b":"code","5d89a971":"code","54027ffb":"code","32b68f3d":"code","24b44fa3":"code","7119e046":"code","47791511":"code","6b6a178b":"code","2f8e9605":"code","1d0464d7":"code","661ba334":"code","be426443":"code","9af47da7":"code","480924f6":"code","522af9cf":"code","3e7f31cf":"code","424f30ac":"markdown","3396f049":"markdown","8feb70a7":"markdown"},"source":{"864be2a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","fac75f14":"specs = pd.read_csv('..\/input\/data-science-bowl-2019\/specs.csv')\nspecs.head()","b3e250b7":"tlabels = pd.read_csv('..\/input\/data-science-bowl-2019\/train_labels.csv')\ntlabels.head()","3019841d":"train = pd.read_csv('..\/input\/data-science-bowl-2019\/train.csv', parse_dates=['timestamp'])\nprint(train.dtypes)\ntrain.head()","d550f6ef":"test = pd.read_csv('..\/input\/data-science-bowl-2019\/test.csv', parse_dates = ['timestamp'])\nprint(test.dtypes)\ntest.head()","7aa5a5fc":"sample_submission = pd.read_csv('..\/input\/data-science-bowl-2019\/sample_submission.csv')","e46898f4":"print('train file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\nprint('train_labels file have {} rows and {} columns'.format(tlabels.shape[0], tlabels.shape[1]))\nprint('test file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\nprint('specs file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\nprint('sample_submission file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))","57185a86":"import seaborn as sns\nx=tlabels['accuracy_group'].value_counts()\nsns.barplot(x.index,x)","c7f85d29":"train2 = train.copy()\ntrain2 = pd.get_dummies(train2, columns=['type', 'world'])\n\ntrain2.head()","780f5b8d":"train2 = pd.merge(train2, tlabels, how = 'right', on = ['game_session', 'installation_id'])\ntrain2.head()","a0601fc8":"train2 = train2.drop(['title_y'], axis = 1)","0ca03bd9":"train2 = train2.rename(columns = {'title_x': 'title'})","ee1e6c01":"train2.head()","c1b77755":"map_label_traintitle = dict(zip(train2['title'].value_counts().sort_index().keys(),\n                     range(1, len(train2['title'].value_counts())+1)))\n\ntrain2['title'] = train2['title'].replace(map_label_traintitle)\n\ntrain2.head()","260f6371":"train2 = train2.drop(['num_correct', 'num_incorrect', 'accuracy'], axis = 1)\ntrain2.columns","890ebd0d":"map_label_testtitle = dict(zip(test['title'].value_counts().sort_index().keys(),\n                     range(1, len(test['title'].value_counts())+1)))\n\ntest['title'] = test['title'].replace(map_label_testtitle)\n\ntest = pd.get_dummies(test, columns = ['type', 'world'])","7190fa83":"train2['month'] = train2['timestamp'].dt.month\ntrain2['day'] = train2['timestamp'].dt.weekday\ntrain2['hour'] = train2['timestamp'].dt.hour","b7175efc":"test['month'] = test['timestamp'].dt.month\ntest['day'] = test['timestamp'].dt.weekday\ntest['hour'] = test['timestamp'].dt.hour","4257ce53":"x=train2['hour'].value_counts()\nsns.barplot(x.index,x)","6080917d":"train2.isna().sum()","e1f78d1d":"test.isna().sum()","ae3b1071":"train_data = train2.drop(['event_id', 'game_session', 'timestamp', 'event_data'], axis = 1)","f51ea161":"test_data = test.drop(['event_id', 'game_session', 'timestamp', 'event_data'], axis = 1)","3cf13c43":"train_data.columns","16a8b53e":"test_data.columns","5320546c":"columnsTitles = ['installation_id', 'event_count', 'event_code', 'game_time', 'title','type_Activity', 'type_Assessment', 'type_Clip', 'type_Game',\n       'world_CRYSTALCAVES', 'world_MAGMAPEAK', 'world_NONE','world_TREETOPCITY', 'month', 'day', 'hour', 'accuracy_group']\n\ntrain_data = train_data.reindex(columns=columnsTitles)\ntrain_data.head()","3d831999":"test_data.head()","e66c13c7":"X_train_data = train_data.copy().drop('accuracy_group', axis = 1)\ny_train_data = train_data[['installation_id','accuracy_group']]","3e2e4029":"X_train_data.set_index('installation_id', inplace = True)\ny_train_data.set_index('installation_id', inplace = True)\ntest_data.set_index('installation_id', inplace = True)","1572229a":"y_train_data.head()","99169d87":"# Logistic Regression\n\n# from sklearn.linear_model import LogisticRegression\n\n# logreg = LogisticRegression(multi_class='multinomial', solver='lbfgs')\n\n# Fit the model with data\n# logreg.fit(X_train_data,y_train_data)","bdd95dbc":"# y_pred_train_lr = logreg.predict(X_train_data)\n# y_pred_test_lr = logreg.predict(test_data)","f39acb60":"# y_pred_test_lr = pd.DataFrame(y_pred_test_lr, columns = ['accuracy_group'])\n# y_pred_test_lr['installation_id'] = test['installation_id']","3d372334":"# columnsTitles = ['installation_id', 'accuracy_group']\n\n# y_pred_test_lr = y_pred_test_lr.reindex(columns=columnsTitles)\n# y_pred_test_lr.head()","712ab47d":"# group_lr_pred = pd.DataFrame(y_pred_test_lr.groupby(['installation_id'])['accuracy_group'].mean())\n# group_lr_pred = group_lr_pred.round().astype(int)\n# group_lr_pred.head(10)","4d01eab9":"# finalsubmission = pd.DataFrame({'installation_id': group_lr_pred.index,'accuracy_group': group_lr_pred['accuracy_group']})\n# finalsubmission.index = sample_submission.index\n# finalsubmission.to_csv('submission.csv', index=False)","f2dae6e6":"from sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score, f1_score","d97cf3d5":"# Decision Tree\n# from sklearn import tree\n# from sklearn.tree import DecisionTreeClassifier\n# parameters={'max_depth':range(1,10)}\n# clf=GridSearchCV(tree.DecisionTreeClassifier(),param_grid=parameters,n_jobs=-1,cv=10)\n# clf.fit(X_train_data,y_train_data)\n# print(clf.best_score_)\n# print(clf.best_params_)","ddd0b3b2":"# dt_reg = clf.best_estimator_\n# pred_train_dtree = dt_reg.predict(X_train_data)\n# pred_test_dtree = dt_reg.predict(test_data)","6f3aff57":"# print(metrics.f1_score(y_train_data, pred_train_dtree, average = None).round(5))","13109bfb":"# y_pred_test_dt = pd.DataFrame(pred_test_dtree, columns = ['accuracy_group'])\n# y_pred_test_dt['installation_id'] = test['installation_id']","890ae52d":"# columnsTitles = ['installation_id', 'accuracy_group']\n\n# y_pred_test_dt = y_pred_test_dt.reindex(columns=columnsTitles)\n# y_pred_test_dt.head()","d0149df7":"# group_dt_pred = pd.DataFrame(y_pred_test_dt.groupby(['installation_id'])['accuracy_group'].mean())\n# group_dt_pred = group_dt_pred.round().astype(int)\n# group_dt_pred.head(10)","b8d8921a":"# finalsubmission_dt = pd.DataFrame({'installation_id': group_dt_pred.index,'accuracy_group': group_dt_pred['accuracy_group']})\n# finalsubmission_dt.index = sample_submission.index\n# finalsubmission_dt.to_csv('submission.csv', index=False)","3732cac6":"# Random Forest\n# from sklearn.ensemble import RandomForestClassifier\n# rfc = RandomForestClassifier()\n# rfc.fit(X = X_train_data,y = y_train_data)","457153c5":"# pred_train_rf = rfc.predict(X_train_data)\n# pred_test_rf = rfc.predict(test_data)","d24696b8":"# print(metrics.f1_score(y_train_data, pred_train_rf, average = None).round(5))","96b539b3":"# y_pred_test_rf = pd.DataFrame(pred_test_rf, columns = ['accuracy_group'])\n# y_pred_test_rf['installation_id'] = test['installation_id']","39c7fb58":"# columnsTitles = ['installation_id', 'accuracy_group']\n\n# y_pred_test_rf = y_pred_test_rf.reindex(columns=columnsTitles)\n# y_pred_test_rf.head()","cf02a48e":"# group_rf_pred = pd.DataFrame(y_pred_test_rf.groupby(['installation_id'])['accuracy_group'].mean())\n# group_rf_pred = group_rf_pred.round().astype(int)\n# group_rf_pred.head(10)","ca3a9e50":"# finalsubmission_rf = pd.DataFrame({'installation_id': group_rf_pred.index,'accuracy_group': group_rf_pred['accuracy_group']})\n# finalsubmission_rf.index = sample_submission.index\n# finalsubmission_rf.to_csv('submission.csv', index=False)","222ef5e0":"# Adaboost\n# from sklearn.ensemble import AdaBoostClassifier\n# from sklearn.tree import DecisionTreeClassifier","966597ab":"# Create adaboost-decision tree classifer object\n# Adaboost_model = AdaBoostClassifier(\n  #  DecisionTreeClassifier(max_depth=5),\n   # n_estimators = 600,\n    #learning_rate = 1)","7d061b70":"# Train model\n#%time Adaboost_model.fit(X_train_data, y_train_data)","c750892f":"# Predict on Test \n# pred_train_ada = Adaboost_model.predict(X_train_data)\n# pred_test_ada = Adaboost_model.predict(test_data)\n# print(\"Accuracy on train is:\",accuracy_score(y_train_data, pred_train_ada))\n# print(\"f1 score - train:\",metrics.f1_score(y_train_data, pred_train_ada, average = None).round(5))","19c63d89":"# y_pred_test_ada = pd.DataFrame(pred_test_ada, columns = ['accuracy_group'])\n# y_pred_test_ada['installation_id'] = test['installation_id']","d2b130b1":"# columnsTitles = ['installation_id', 'accuracy_group']\n# y_pred_test_ada = y_pred_test_ada.reindex(columns=columnsTitles)\n# y_pred_test_ada.head()","9c32d814":"# group_ada_pred = pd.DataFrame(y_pred_test_ada.groupby(['installation_id'])['accuracy_group'].mean())\n# group_ada_pred = group_ada_pred.round().astype(int)\n# group_ada_pred.head(10)","af3cf7c5":"# group_ada_pred_2 = pd.DataFrame(y_pred_test_ada.groupby(['installation_id'])['accuracy_group'].agg(lambda x:x.value_counts().index[0])) \n# group_ada_pred_2 = group_ada_pred_2.round().astype(int)\n# group_ada_pred_2.head(10)","e714477b":"# submission\n# finalsubmission_ada = pd.DataFrame({'installation_id': group_ada_pred_2.index,'accuracy_group': group_ada_pred_2['accuracy_group']})\n# finalsubmission_ada.index = sample_submission.index\n# finalsubmission_ada.to_csv('submission.csv', index=False)","5d89a971":"# Gradient Boost\n# from sklearn.ensemble import GradientBoostingClassifier\n# GBM_model = GradientBoostingClassifier(n_estimators=50,\n  #                                     learning_rate=0.3,\n  #                                     subsample=0.8)","54027ffb":"#### Train Gradient Boosting Classifer\n# %time GBM_model.fit(X_train_data, y_train_data)","32b68f3d":"# Predict on Test \n# from sklearn.metrics import cohen_kappa_score\n# pred_train_gb = GBM_model.predict(X_train_data)\n# pred_test_gb = GBM_model.predict(test_data)\n# print(\"Accuracy on train is:\",accuracy_score(y_train_data, pred_train_gb))\n# print(\"f1 score - train:\",metrics.f1_score(y_train_data, pred_train_gb, average = None).round(5))","24b44fa3":"# y_pred_test_gb = pd.DataFrame(pred_test_gb, columns = ['accuracy_group'])\n# y_pred_test_gb['installation_id'] = test['installation_id']","7119e046":"# columnsTitles = ['installation_id', 'accuracy_group']\n# y_pred_test_gb = y_pred_test_gb.reindex(columns=columnsTitles)\n# y_pred_test_gb.head()","47791511":"# group_gb_pred = pd.DataFrame(y_pred_test_gb.groupby(['installation_id'])['accuracy_group'].agg(lambda x:x.value_counts().index[0])) \n# group_gb_pred = group_gb_pred.round().astype(int)\n# group_gb_pred.head(10)","6b6a178b":"# submission...\n# finalsubmission_gb = pd.DataFrame({'installation_id': group_gb_pred.index,'accuracy_group': group_gb_pred['accuracy_group']})\n# finalsubmission_gb.index = sample_submission.index\n# finalsubmission_gb.to_csv('submission.csv', index=False)","2f8e9605":"# Grid Search GB\nfrom sklearn.ensemble import GradientBoostingClassifier\nGBM = GradientBoostingClassifier()\n# Use a grid over parameters of interest\nparam_grid = { \n           \"n_estimators\" : [50],\n           \"max_depth\" : [8],\n           \"learning_rate\" : [0.3, 0.8]}\n \nCV_GBM = GridSearchCV(estimator=GBM, param_grid=param_grid, cv= 10)","1d0464d7":"%time CV_GBM.fit(X_train_data, y_train_data)","661ba334":"# Find best model\nbest_gbm_model = CV_GBM.best_estimator_\nprint (CV_GBM.best_score_, CV_GBM.best_params_)","be426443":"pred_train_gsgb = best_gbm_model.predict(X_train_data)\npred_test_gsgb = best_gbm_model.predict(test_data)","9af47da7":"y_pred_test_gsgb = pd.DataFrame(pred_test_gsgb, columns = ['accuracy_group'])\ny_pred_test_gsgb['installation_id'] = test['installation_id']","480924f6":"columnsTitles = ['installation_id', 'accuracy_group']\ny_pred_test_gsgb = y_pred_test_gsgb.reindex(columns=columnsTitles)\ny_pred_test_gsgb.head()","522af9cf":"group_gsgb_pred = pd.DataFrame(y_pred_test_gsgb.groupby(['installation_id'])['accuracy_group'].agg(lambda x:x.value_counts().index[0])) \ngroup_gsgb_pred = group_gsgb_pred.round().astype(int)\ngroup_gsgb_pred.head(10)","3e7f31cf":"finalsubmission_gsgb = pd.DataFrame({'installation_id': group_gsgb_pred.index,'accuracy_group': group_gsgb_pred['accuracy_group']})\nfinalsubmission_gsgb.index = sample_submission.index\nfinalsubmission_gsgb.to_csv('submission.csv', index=False)","424f30ac":"### To be continued ..........","3396f049":"### Basic details on different algorithms aimed as reference avenue. Minimal to none FE.","8feb70a7":"## Model Building"}}