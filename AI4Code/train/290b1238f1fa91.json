{"cell_type":{"274ae48d":"code","6de191e1":"code","3835d748":"code","2491ce95":"code","6f35a61e":"code","4fcbfe39":"code","b2d1aa19":"code","f44b69d3":"code","462adfe6":"code","5f57402b":"code","9e0df230":"code","2daa53fc":"code","56d84f1f":"code","2fba299e":"code","1876dd8b":"code","e1da10cf":"code","d32c35e3":"code","82d83c5b":"code","2c67bc13":"code","11b42c74":"code","b7f36263":"code","69ca7a09":"code","a6fba321":"code","4a7109b3":"code","a9e03c32":"code","ea81da73":"code","9508780e":"code","5ab4d5bd":"markdown","f79f45ce":"markdown","ecbfd600":"markdown","966fef15":"markdown","f8379fc7":"markdown","95fabcbd":"markdown","8c5109f4":"markdown","f4164965":"markdown","1a3e4c22":"markdown","3c93e750":"markdown","8d1775a3":"markdown","a4a742d4":"markdown","66e69c7d":"markdown","17250994":"markdown","a0ae64a8":"markdown","3b5ece59":"markdown","8fdf3b64":"markdown","9ee7a684":"markdown","08a47a25":"markdown","ec3a1025":"markdown","4b2698bf":"markdown"},"source":{"274ae48d":"import pandas as pd\nimport numpy as np\n\nfrom matplotlib import pyplot\n\nimport category_encoders as ce\n\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.feature_selection import RFE\nfrom boruta import BorutaPy\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.model_selection import cross_val_score, RepeatedStratifiedKFold\nfrom sklearn.metrics import accuracy_score","6de191e1":"path = \"..\/input\/tabular-playground-series-apr-2021\/\"\n# path = \"\" # local\ntrain = pd.read_csv(path+'train.csv', index_col=0)\ntest = pd.read_csv(path+'test.csv', index_col=0)\nsubmission = pd.read_csv(path+'sample_submission.csv')","3835d748":"# Calcule SameFirstName\n\ntrain['FirstName'] = train['Name'].apply(lambda x:x.split(', ')[0])\ntrain['n'] = 1\ngb = train.groupby('FirstName')\ndf_names = gb['n'].sum()\ntrain['SameFirstName'] = train['FirstName'].apply(lambda x:df_names[x])\n\ntest['FirstName'] = test['Name'].apply(lambda x:x.split(', ')[0])\ntest['n'] = 1\ngb = test.groupby('FirstName')\ndf_names = gb['n'].sum()\ntest['SameFirstName'] = test['FirstName'].apply(lambda x:df_names[x])\n\n# To preprocess\n\ndata = pd.concat([train, test], axis=0)\n\n# Before fill missing\ndata['AnyMissing'] = np.where(data.isnull().any(axis=1) == True, 1, 0)\n\n# Family\ndata['FamilySize'] = data['SibSp'] + data['Parch'] + 1\ndata['IsAlone'] = np.where(data['FamilySize'] <= 1, 1, 0)\n\n# Cabin\ndata['Has_Cabin'] = data[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\ndata['Cabin'] = data['Cabin'].fillna('X').map(lambda x: x[0].strip())\ncabin_map = {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5,\n             'F': 6, 'G': 7, 'T': 1, 'X': 8}\ndata['Cabin'] = data['Cabin'].str[0].fillna('X').replace(cabin_map)\n\n# Embarked\n#map_Embarked = train.Embarked.mode().item()\ndata['Embarked'] = data['Embarked'].fillna(\"No\")\n#conditions = [\n#    (data['Embarked']==\"S\"),\n#    (data['Embarked']==\"Q\"),\n#    (data['Embarked']==\"C\"),\n#    (data['Embarked']==\"No\")\n#]\n#choices = [0, 1, 2, -1]\n#data[\"Embarked\"] = np.select(conditions, choices)\n#data['Embarked'] = data['Embarked'].astype(int)\n\n# Name\ndata['SecondName'] = data.Name.str.split(', ', 1, expand=True)[1] # to try\ndata['IsFirstNameDublicated'] = np.where(data.FirstName.duplicated(), 1, 0)\n\n# Fare\ndata['Fare'] = data['Fare'].fillna(train['Fare'].median())\n# train['CategoricalFare'] = pd.qcut(train['Fare'], 4)\n# [(0.679, 10.04] < (10.04, 24.46] < (24.46, 33.5] < (33.5, 744.66]]\n# From original Titanic:\nconditions = [\n    (data['Fare'] <= 7.91),\n    ((data['Fare'] > 7.91) & (data['Fare'] <= 14.454)),\n    ((data['Fare'] > 14.454) & (data['Fare'] <= 31)),\n    (data['Fare'] > 31)\n]\n\nchoices = [0, 1, 2, 3]\ndata[\"Fare\"] = np.select(conditions, choices)\ndata['Fare'] = data['Fare'].astype(int)\n\n# Fix Ticket\ndata['TicketNum'] = data.Ticket.str.extract(r'(\\d+)').\\\n                    astype('float64', copy=False).\\\n                    fillna(0) # to_try\ndata['Ticket'] = data.Ticket.str.replace('\\.','', regex=True).\\\n                    str.replace('(\\d+)', '', regex=True).\\\n                    str.replace(' ', '', regex=True).\\\n                    replace(r'^\\s*$', 'X', regex=True).\\\n                    fillna('X')\n\n#data['Ticket'] = data['Ticket'].astype('category').cat.codes # to_try\n\n# Age \nconditions = [\n    ((data.Sex==\"female\")&(data.Pclass==1)&(data.Age.isnull())),\n    ((data.Sex==\"male\")&(data.Pclass==1)&(data.Age.isnull())),\n    ((data.Sex==\"female\")&(data.Pclass==2)&(data.Age.isnull())),\n    ((data.Sex==\"male\")&(data.Pclass==2)&(data.Age.isnull())),\n    ((data.Sex==\"female\")&(data.Pclass==3)&(data.Age.isnull())),\n    ((data.Sex==\"male\")&(data.Pclass==3)&(data.Age.isnull()))\n]\nchoices = data[['Age', 'Pclass', 'Sex']].\\\n            dropna().\\\n            groupby(['Pclass', 'Sex']).\\\n            mean()['Age']\n\ndata[\"Age\"] = np.select(conditions, choices)\n\nconditions = [\n    (data['Age'].le(16)),\n    (data['Age'].gt(16) & data['Age'].le(32)),\n    (data['Age'].gt(32) & data['Age'].le(48)),\n    (data['Age'].gt(48) & data['Age'].le(64)),\n    (data['Age'].gt(64))\n]\nchoices = [0, 1, 2, 3, 4]\n\ndata[\"AgeCut\"] = np.select(conditions, choices)\n\n# Sex\ndata['Sex'] = np.where(data['Sex']=='male', 1, 0)\n\n# Drop columns\ndata = data.drop(['n'], axis = 1)\n\n# Transform object to category\nfor col in data.columns[data.dtypes=='object'].tolist():\n    data.loc[:,col] = data.loc[:,col].astype('category')","2491ce95":"# Splitting into train and test\ntrain = data.iloc[:train.shape[0]]\ntest = data.iloc[train.shape[0]:].drop(columns=['Survived'])","6f35a61e":"train.head(3)","4fcbfe39":"encoder = ce.CatBoostEncoder()\nclf1 = DecisionTreeClassifier()\nclf2 = RandomForestClassifier(n_estimators=500, n_jobs=-1, random_state= 314)","b2d1aa19":"X = train.drop(\"Survived\", axis=1)\ny = train[\"Survived\"].values.ravel()","f44b69d3":"def get_models():\n    models = dict()\n    for i in range(2, train.shape[1], 2):\n        rfe = RFE(estimator=clf1, n_features_to_select=i)\n        models[str(i)] = Pipeline(steps=[('encoder', encoder), ('rfe',rfe), ('clf',clf1)])\n    return models\n \ndef evaluate_model(model, X, y):\n    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n    scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1, error_score='raise')\n    return scores","462adfe6":"%%time\n \nmodels = get_models()\n\nresults, names = list(), list()\nfor name, model in models.items():\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    print('>%s %.3f (%.3f)' % (name, np.mean(scores), np.std(scores)))\n# plot model performance for comparison\npyplot.boxplot(results, labels=names, showmeans=True)\npyplot.show() ","5f57402b":"n_features = np.argmax([np.mean(x) for x in results])+2\n\nrfe = RFE(estimator=clf1, n_features_to_select=n_features)\npipe_rfe = Pipeline(steps=[('encoder', encoder), ('rfe',rfe)])\npipe_rfe.fit(X, y)\n\nresults_rfe = pd.DataFrame({\n    'Index': range(X.shape[1]),\n    'Column': X.columns, \n    'Selected_RFE': pipe_rfe.named_steps.rfe.support_,\n    'Rank_RFE': pipe_rfe.named_steps.rfe.ranking_\n})\n\nresults_rfe.sort_values('Rank_RFE')","9e0df230":"X_transform = X.copy()\nX_transform.loc[:,['Name', 'Ticket', 'Embarked', 'FirstName', 'SecondName']] = \\\n    encoder.fit_transform(X_transform.loc[:,['Name', 'Ticket', 'Embarked', 'FirstName', 'SecondName']], y)\nX_transform = X_transform.to_numpy()","2daa53fc":"boruta_feature_selector = BorutaPy(clf2, n_estimators='auto', verbose=1, random_state=4242, max_iter = 50, perc = 90)\nboruta_feature_selector.fit(X_transform, y)","56d84f1f":"boruta_feature_selector.ranking_\n\nresults_boruta = pd.DataFrame({\n    'Index': range(X.shape[1]),\n    'Column': X.columns, \n    'Selected_Boruta': boruta_feature_selector.support_,\n    'Rank_Boruta': boruta_feature_selector.ranking_\n})\n\nresults_boruta.sort_values('Rank_Boruta')","2fba299e":"results_rfe.merge(results_boruta, left_on=['Index', 'Column'], right_on=['Index', 'Column'])","1876dd8b":"X_m = train[train.Sex==1].drop(\"Survived\", axis=1)\ny_m = train[train.Sex==1][\"Survived\"]\n\nX_f = train[train.Sex==0].drop(\"Survived\", axis=1)\ny_f = train[train.Sex==0][\"Survived\"]\n\ntest_m = test[test.Sex==1]\ntest_f = test[test.Sex==0]","e1da10cf":"%%time\n \nmodels = get_models()\n\nresults, names = list(), list()\nfor name, model in models.items():\n    scores = evaluate_model(model, X_f, y_f)\n    results.append(scores)\n    names.append(name)\n    print('>%s %.3f (%.3f)' % (name, np.mean(scores), np.std(scores)))\n# plot model performance for comparison\npyplot.boxplot(results, labels=names, showmeans=True)\npyplot.show() ","d32c35e3":"n_features = np.argmax([np.mean(x) for x in results])+2\n\nrfe = RFE(estimator=clf1, n_features_to_select=n_features)\npipe_rfe = Pipeline(steps=[('encoder', encoder), ('rfe',rfe)])\npipe_rfe.fit(X_f, y_f)\n\nresults_rfe = pd.DataFrame({\n    'Index': range(X.shape[1]),\n    'Column': X_f.columns, \n    'Selected_RFE': pipe_rfe.named_steps.rfe.support_,\n    'Rank_RFE': pipe_rfe.named_steps.rfe.ranking_\n})\n\nresults_rfe.sort_values('Rank_RFE')","82d83c5b":"X_transform_f = X_f.copy()\nX_transform_f.loc[:,['Name', 'Ticket', 'Embarked', 'FirstName', 'SecondName']] = \\\n    encoder.fit_transform(X_transform_f.loc[:,['Name', 'Ticket', 'Embarked', 'FirstName', 'SecondName']], y_f)\nX_transform_f = X_transform_f.to_numpy()","2c67bc13":"boruta_feature_selector = BorutaPy(clf2, n_estimators='auto', verbose=1, random_state=4242, max_iter = 50, perc = 90)\nboruta_feature_selector.fit(X_transform_f, y_f)","11b42c74":"boruta_feature_selector.ranking_\n\nresults_boruta = pd.DataFrame({\n    'Index': range(X.shape[1]),\n    'Column': X_f.columns, \n    'Selected_Boruta': boruta_feature_selector.support_,\n    'Rank_Boruta': boruta_feature_selector.ranking_\n})\n\nresults_boruta.sort_values('Rank_Boruta')","b7f36263":"results_rfe.merge(results_boruta, left_on=['Index', 'Column'], right_on=['Index', 'Column'])","69ca7a09":"%%time\n \nmodels = get_models()\n\nresults, names = list(), list()\nfor name, model in models.items():\n    scores = evaluate_model(model, X_m, y_m)\n    results.append(scores)\n    names.append(name)\n    print('>%s %.3f (%.3f)' % (name, np.mean(scores), np.std(scores)))\n# plot model performance for comparison\npyplot.boxplot(results, labels=names, showmeans=True)\npyplot.show() ","a6fba321":"n_features = np.argmax([np.mean(x) for x in results])+2\n\nrfe = RFE(estimator=clf1, n_features_to_select=n_features)\npipe_rfe = Pipeline(steps=[('encoder', encoder), ('rfe',rfe)])\npipe_rfe.fit(X_m, y_m)\n\nresults_rfe = pd.DataFrame({\n    'Index': range(X.shape[1]),\n    'Column': X_m.columns, \n    'Selected_RFE': pipe_rfe.named_steps.rfe.support_,\n    'Rank_RFE': pipe_rfe.named_steps.rfe.ranking_\n})\n\nresults_rfe.sort_values('Rank_RFE')","4a7109b3":"X_transform_m = X_m.copy()\nX_transform_m.loc[:,['Name', 'Ticket', 'Embarked', 'FirstName', 'SecondName']] = \\\n    encoder.fit_transform(X_transform_m.loc[:,['Name', 'Ticket', 'Embarked', 'FirstName', 'SecondName']], y_m)\nX_transform_m = X_transform_m.to_numpy()","a9e03c32":"boruta_feature_selector = BorutaPy(clf2, n_estimators='auto', verbose=1, random_state=4242, max_iter = 50, perc = 90)\nboruta_feature_selector.fit(X_transform_m, y_m)","ea81da73":"boruta_feature_selector.ranking_\n\nresults_boruta = pd.DataFrame({\n    'Index': range(X.shape[1]),\n    'Column': X_m.columns, \n    'Selected_Boruta': boruta_feature_selector.support_,\n    'Rank_Boruta': boruta_feature_selector.ranking_\n})\n\nresults_boruta.sort_values('Rank_Boruta')","9508780e":"results_rfe.merge(results_boruta, left_on=['Index', 'Column'], right_on=['Index', 'Column'])","5ab4d5bd":"## RFE","f79f45ce":"### RFE","ecbfd600":"# Problem definition\n\nThe dataset is used for this competition is synthetic but based on a real dataset (in this case, the actual Titanic data!) and generated using a CTGAN.\n\nData description: \n\n| Variable        | Definition           | Key  |\n|---------------|:-------------|------:|\n|survival |\tSurvival | 0 = No, 1 = Yes |\n|pclass |\tTicket class | 1 = 1st, 2 = 2nd, 3 = 3rd |\n|sex |\tSex\t ||\n|Age |\tAge in years\t ||\n|sibsp |\t# of siblings \/ spouses aboard the Titanic\t ||\n|parch |\t# of parents \/ children aboard the Titanic\t ||\n|ticket |\tTicket number\t ||\n|fare |\tPassenger fare\t ||\n|cabin |\tCabin number\t| |\n|embarked |\tPort of Embarkation\t| C = Cherbourg, Q = Queenstown, S = Southampton |\n\n<br>\n\nWhere `survival` will be our target variable! \ud83c\udfaf\n\n<br>\n\nCheck out: \n\n  \u279c [Tuning of a Lightgbm with Bayesian Optimization using the `tidymodels` framework in R](https:\/\/www.kaggle.com\/gomes555\/tps-apr2021-r-eda-lightgbm-bayesopt)\n\n  \u279c [AutoML (lgbm + catboost) with mljar](https:\/\/www.kaggle.com\/gomes555\/tps-apr2021-autoboost-mljar)\n<br>\n\n  \u279c [Simple CatBoost + Preprocess](https:\/\/www.kaggle.com\/gomes555\/tps-apr2021-simple-catboost)\n  \n  \u279c [CatBoost + Pseudo Data + MovingThreshold](https:\/\/www.kaggle.com\/gomes555\/tps-apr2021-catboost-pseudo-movingthreshold)\n\n<p align=\"right\"><span style=\"color:firebrick\">Dont forget the upvote if you liked the notebook! \u270c\ufe0f <\/p>","966fef15":"#### Find the best number of features","f8379fc7":"#### Find the best number of features","95fabcbd":"### Boruta","8c5109f4":"## Female","f4164965":"### Get features","1a3e4c22":"## Male","3c93e750":"### Boruta","8d1775a3":"### Find the best number of features","a4a742d4":"#### Get features","66e69c7d":"### Get features","17250994":"#### Get features","a0ae64a8":"### RFE","3b5ece59":"# Feature Selection (all data)","8fdf3b64":"#### Get features","9ee7a684":"# Feature Selection (by `sex`)","08a47a25":"# Preprocess + feature engineering","ec3a1025":"#### Get features","4b2698bf":"## Boruta"}}