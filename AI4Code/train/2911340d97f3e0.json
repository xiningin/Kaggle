{"cell_type":{"23381652":"code","623d23c1":"code","717679cb":"code","1aefd87a":"code","7974e6a8":"code","9ea0aa68":"code","238f44ff":"code","7c95d211":"code","1b0b98ee":"code","96008a80":"code","ec54e0b3":"code","30d9b3e0":"code","b32120d5":"code","35b6696b":"code","59d9dbad":"code","1acae368":"code","1f88f2ea":"code","12d44272":"code","379bfb61":"code","5223a92d":"code","67959bdf":"code","e8767b94":"code","b6cdebbb":"code","2b9366b3":"code","2b22fd4f":"code","285204e7":"code","10337cad":"code","bb637502":"code","1f8018ca":"code","bec28eb8":"code","507bfc33":"code","74af95c9":"code","22f010d0":"code","00c6df1d":"code","e7c7bb97":"code","32932cce":"code","332ed3bb":"code","2fd0842c":"code","a0c87f4f":"code","3eb1b9a1":"code","f0ebfc9a":"code","2947d3ec":"code","c773f97e":"code","883e46dd":"code","b6706f21":"code","291863e6":"code","0b11791a":"markdown","d48ea1bf":"markdown","b9eec72b":"markdown","4b9d1f37":"markdown","57da6836":"markdown","ee2d371f":"markdown","742d3358":"markdown","bea653be":"markdown","074e2e0d":"markdown","47e8bb76":"markdown","2b91263a":"markdown","b851130b":"markdown","1ff804a6":"markdown","e08894ba":"markdown","4bbc0da4":"markdown","effebc4b":"markdown","4421e63c":"markdown","9f334568":"markdown","98d65634":"markdown","c005df3b":"markdown","3eb4304c":"markdown","c1334001":"markdown","1b762ed4":"markdown","251a27c2":"markdown","28071009":"markdown","599c8c07":"markdown","b85c6876":"markdown","9e2e835b":"markdown","f7c4d409":"markdown","5c795d22":"markdown","fb4be4bc":"markdown","f5e53a79":"markdown","6a02d2a0":"markdown","1651170b":"markdown","63a4026a":"markdown","d14fcb7c":"markdown","e97417b4":"markdown","fbca4ceb":"markdown","e1b7eef6":"markdown"},"source":{"23381652":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nimport cufflinks as cf\n#import chart_studio.plotly as py\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom collections import Counter\n\ncf.go_offline()\n\nfrom wordcloud import WordCloud, ImageColorGenerator\n\n%matplotlib inline","623d23c1":"# df = pd.read_csv(\"MoviesOnStreamingPlatforms_updated.csv\")\n# df_countries = pd.read_csv(\"FilmsByCountry.csv\")\n\n# Kaggle\n\ndf = pd.read_csv(\"..\/input\/movies-on-netflix-prime-video-hulu-and-disney\/MoviesOnStreamingPlatforms_updated.csv\")\ndf_countries = pd.read_csv(\"..\/input\/filmsbycountry\/FilmsByCountry.csv\")","717679cb":"df.head()","1aefd87a":"df.info()","7974e6a8":"# Let\u00b4s see what data we are missing\n\nsns.heatmap(df.isna(),yticklabels=False,cbar=False,cmap=\"viridis\")","9ea0aa68":"netflix_movies = len(df[df[\"Netflix\"]==1].index)\nhulu_movies = len(df[df[\"Hulu\"]==1].index)\nprime_movies = len(df[df[\"Prime Video\"]==1].index)\ndisney_movies = len(df[df[\"Disney+\"]==1].index)\n\nprint(\"Number of movies on each platform:\")\nprint(\"\\n\")\nprint(f\"Netflix:\\t {netflix_movies}\")\nprint(f\"Hulu:\\t\\t {hulu_movies}\")\nprint(f\"Prime Video:\\t {prime_movies}\")\nprint(f\"Disney+:\\t {disney_movies}\")","238f44ff":"values = [netflix_movies,hulu_movies,prime_movies,disney_movies]\nlabels = [\"Netflix\",\"Hulu\",\"Prime Video\",\"Disney+\"]\nexplode = (0.1, 0, 0, 0)\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.4)])\nfig.show()","7c95d211":"df_countries.head()","1b0b98ee":"data = df_countries\n\nn = 30\n\nfig = px.bar(df_countries.sort_values(by=\"Number of Films\",ascending=False).reset_index().iloc[:n],\n             x='Country', y='Number of Films',\n             color='Number of Films',\n             title=f\"Top {n} countries with most filmed films\",\n             height=400)\nfig.show()","96008a80":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot","ec54e0b3":"fig = px.choropleth(df_countries, locations=\"CODE\",\n                    color=\"Number of Films\",\n                    hover_name=\"Country\",\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    title=\"Number of films filmed per country\",\n                    height=500,\n                    width=800)\nfig.show() ","30d9b3e0":"df.drop(\"Rotten Tomatoes\",axis=1,inplace=True)","b32120d5":"n = 30\n\ntop_ratings = df.sort_values(by=\"IMDb\",ascending=False).reset_index().iloc[:n]\n\nfig = px.bar(top_ratings,\n             x = \"Title\", y='IMDb',\n             color='IMDb',\n             hover_data=[\"Directors\",\"IMDb\"],\n             title=f\"Top {n} best rated movies\",\n             height=1000,\n             color_continuous_scale=px.colors.sequential.Viridis)\nfig.show()","35b6696b":"df_year = df.groupby(\"Year\").mean()\ndf_year.drop([\"Unnamed: 0\",\"ID\",'Netflix', 'Hulu', 'Prime Video', 'Disney+', 'Type'],inplace=True,axis=1)\ndf_year[\"Movie Count\"] = df.groupby(\"Year\").count()[\"ID\"]\ndf_year.head()","59d9dbad":"# Add a new column to our dataframe that indicates how many movies were made that year\n\n# Get a dictionary from the df_year dataframe, where keys=year and values=movies made\n\nd = df_year[\"Movie Count\"].to_dict()\nd.pop('IMDb', None)\nd.pop(\"Runtime\",None)\n\n# Create our new column using the map function\n\ndf['Movie Count'] = df['Year'].map(d)\ndf.head()","1acae368":"x = df[\"Year\"]\ny = df[\"IMDb\"]\n\nplt.figure(figsize=(8,8))\nsns.scatterplot(x,y,data=df,hue=\"Movie Count\")","1f88f2ea":"Rating = df_year[\"IMDb\"]\nYear = df_year.index\n\nfig = px.line(df_year, x=Year, y=Rating, \n              line_shape=\"spline\", render_mode=\"svg\",\n              hover_name=df.groupby(\"Year\").mean().index,\n              title=\"Average Movie Ratings 1902-2020\")\nfig.show()","12d44272":"fig = px.box(df, x=\"Year\", y=\"IMDb\",color=\"Year\")\nfig.show()","379bfb61":"fig = px.scatter(df,x=\"Runtime\", y=\"IMDb\",color=\"Year\",\n                 marginal_x=\"histogram\",\n                 marginal_y=\"histogram\",\n                 hover_name=\"Title\",hover_data=[\"Age\"])\nfig.show()","5223a92d":"print(df.groupby(\"Age\").count()[\"ID\"])\n\nsns.countplot(data=df,x=\"Age\")","67959bdf":"height = 800\n\nfig2 = px.scatter(df.dropna(),x=\"Runtime\", y=\"IMDb\",color=\"Age\",\n                marginal_x=\"histogram\",\n                hover_name=\"Title\",hover_data=[\"Year\"],\n                height=height)\n\nfig1 = px.scatter(df.dropna(),x=\"Year\", y=\"IMDb\",color=\"Age\",\n                marginal_x=\"histogram\",\n                hover_name=\"Title\",hover_data=[\"Runtime\"],\n                height=height)\nfig1.show()\nfig2.show()","e8767b94":"data = df\n\nn = 30\n\nfig = px.bar(df.sort_values(by=\"Runtime\",ascending=False).reset_index().iloc[:n],\n             x = \"Title\", y='Runtime',\n             color='Runtime',\n             hover_data=[\"Directors\",\"Year\",\"IMDb\"],\n             title=f\"Top {n} longest movies\",\n             height=800)\nfig.show()","b6cdebbb":"fig = px.bar(df.sort_values(by=\"Runtime\",ascending=False).reset_index().iloc[2:n],\n             x = \"Title\", y='Runtime',\n             color='Runtime',\n             hover_data=[\"Directors\",\"Year\",\"IMDb\"],\n             title=f\"Top {n} longest movies\",\n             height=800)\nfig.show()","2b9366b3":"plt.figure(figsize=(10,16))\nsns.barplot(x=\"Runtime\",y=\"Title\",data=df.sort_values(by=\"Runtime\",ascending=False).reset_index().iloc[2:102])","2b22fd4f":"Runtime = df_year[\"Runtime\"]\nYear = df_year.index\n\n#LIneplot\n\nfig = px.line(df_year, x=Year, y=Runtime, \n              line_shape=\"spline\", render_mode=\"svg\",\n              hover_name=df.groupby(\"Year\").mean().index,\n              title=\"Average Movie Runtimes 1902-2020\")\nfig.show()\n\nprint(\"\\n\")\nprint(\"As we did before, we will plot a boxplot to clear thigs up ever more\")\n\n# Boxplot\n\nfig = px.box(df.sort_values(by=\"Runtime\",ascending=False).iloc[2:], x=\"Year\", y=\"Runtime\",\n             color=\"Year\",height=1000,\n             hover_data=[\"Title\"])\nfig.show()","285204e7":"# Create a new dataframe specific for directors and the number of movies they directed\n\ndirectors = pd.DataFrame(df.groupby([\"Directors\"]).count()[\"ID\"])\ndirectors[\"No. of Films\"] = directors[\"ID\"]\ndirectors.drop([\"ID\"],axis=1,inplace=True)","10337cad":"data = directors.sort_values(by=\"No. of Films\",ascending=False).reset_index().iloc[:100]\n\nplt.figure(figsize=(10,16))\nsns.barplot(x=\"No. of Films\",y=\"Directors\",data=data)","bb637502":"n = 40\ndata = directors.sort_values(by=\"No. of Films\",ascending=False).reset_index().iloc[:n]\n\nfig = px.bar(data,\n             x = \"Directors\", y='No. of Films',\n             color='No. of Films',\n             title=f\"Top {n} directors with most directed movies\")\nfig.show()","1f8018ca":"# Create directors dict where key=name and value=number of directors\n\ndirectors = {}\n\nfor i in df[\"Directors\"].dropna():\n    #print(i,len(i.split(\",\")))\n    directors[i] = len(i.split(\",\"))\n    \n# Add this information to our dataframe as a new column\n\ndf[\"Number of Directors\"] = df['Directors'].map(directors)\n\n# Sort by number of directors and show head\n\ndf.sort_values(by=\"Number of Directors\",ascending=False).reset_index().head()","bec28eb8":"data = df.sort_values(by=\"Number of Directors\",ascending=False).reset_index().iloc[:30]\n\nplt.figure(figsize=(10,6))\nsns.barplot(x=\"Number of Directors\",y=\"Title\",data=data)","507bfc33":"# Directors who directed the best and worst IMDb ranked movies\n\nn = 30\nx=\"Directors\"\n\ndata1 = df.groupby(by=\"Directors\").mean().sort_values(by=\"IMDb\",ascending=False).reset_index().iloc[:n]\ndata2 = df.groupby(by=\"Directors\").mean().sort_values(by=\"IMDb\",ascending=True).reset_index().iloc[2:n]\n\n# For the worst IMDb average we droped the worst two because they had an average of 0 and it\u00b4s not considered representative\n\nfig = px.bar(data1,x=data1[\"Directors\"],y=data1[\"IMDb\"],color=\"IMDb\",\n             title=f\"Top {n} Directors with the highest averaged movie ratings\")\nfig.show()\n\nfig = px.bar(data2,x=data2[\"Directors\"],y=data2[\"IMDb\"],color=\"IMDb\",\n            title=f\"Top {n} Directors with the lowest averaged movie ratings\")\nfig.show()","74af95c9":"# Directors who directed the longest and shortest movies\n\nn = 30\nx=\"Directors\"\n\ndata1 = df.groupby(by=\"Directors\").mean().sort_values(by=\"Runtime\",ascending=False).reset_index().iloc[:n]\ndata2 = df.groupby(by=\"Directors\").mean().sort_values(by=\"Runtime\",ascending=True).reset_index().iloc[:n]\n\n# For the worst IMDb average we droped the worst two because they had an average of 0 and it\u00b4s not considered representative\n\nfig = px.bar(data1,x=data1[\"Directors\"],y=data1[\"Runtime\"],color=\"Runtime\",\n             title=f\"Top {n} Directors with longest average runtime for directed movies\")\nfig.show()\n\nfig = px.bar(data2,x=data2[\"Directors\"],y=data2[\"Runtime\"],color=\"Runtime\",\n            title=f\"Top {n} Directors with shortest average runtime for directed movies\")\nfig.show()","22f010d0":"# How many different genres do we have?\n\n\nprint(f\" We have {df['Genres'].nunique()} different genres\")\nprint(\"\\n\")\nprint(df[\"Genres\"].value_counts())","00c6df1d":"# Some films cover various genres\n# We can extract these genres by separating the words where the is a \",\"\n\nall_genres = []\n\nfor genre in df[\"Genres\"].dropna():\n    movie_genres = genre.split(\",\")\n    for i in movie_genres:\n        all_genres.append(i)","e7c7bb97":"d = Counter(all_genres)\nprint(\"These are the basic genres:\")\nd","32932cce":"# Let\u00b4s turn this into a dataframe so that we can plot it\n\ngenres = pd.DataFrame.from_dict(d, orient='index').reset_index()\ngenres[\"Genre\"] = genres[\"index\"]\ngenres[\"Count\"] = genres[0]\ngenres.drop([\"index\",0],axis=1,inplace=True)\ngenres.head()","332ed3bb":"genres.info()","2fd0842c":"# Genres\n\nn = 30\n\n# 1. Genre distribution as described in dataset. Including mixed genres.\n\ndata1 = df.groupby(by=\"Genres\").count().sort_values(by=\"ID\",ascending=False).reset_index().iloc[:n]\n\nfig = px.pie(data1,names=data1[\"Genres\"],values=data1[\"ID\"],\n            title=f'General Genre Distribution. Top {n} most common movie genres')\nfig.show()\n\n# 2. Genre individual distribution.\n# If we split up the movies with a mixed Genre (i.e: Comedy,Drama,Romance)\n# we get 27 basic genres.\n\nfig = px.pie(genres, values='Count', names='Genre', \n             title='Movie Genres Proportion')\nfig.show()","a0c87f4f":"mixed_genres = []\n\nfor i in df[\"Genres\"].dropna():\n    if \",\" in i:\n        mixed_genres.append(i)\n\nd = Counter(mixed_genres)\n\nprint(f\"We found a total of {len(d)} different genres\")\n\n# Create dataframe\n\ndf_mixedg = pd.DataFrame.from_dict(d, orient='index').reset_index()\ndf_mixedg[\"Genre\"] = df_mixedg[\"index\"]\ndf_mixedg[\"Count\"] = df_mixedg[0]\ndf_mixedg.drop([\"index\",0],axis=1,inplace=True)\ndf_mixedg.head()","3eb1b9a1":"n = 30\n\n# 3. Most common mixed genres.\n\nfig = px.pie(df_mixedg.sort_values(by=\"Count\",ascending=False).reset_index().iloc[:n], values='Count', names='Genre', \n             title=f\"Top {n} most common movie mixed genres\")\nfig.show()","f0ebfc9a":"df_genre_year = pd.DataFrame(index=range(1902,2021),columns=Counter(all_genres).keys())\n#df_genre_year.astype(\"float64\")\ndf_genre_year.head()","2947d3ec":"for year in range(1902,2021):\n    genre_year = []\n    for genres in df[df[\"Year\"]==year][\"Genres\"].dropna():\n        for i in genres.split(\",\"):\n            genre_year.append(i)\n\n    d1 = Counter(genre_year)\n    \n    if len(d)==0:\n        #df_genre_year.loc[year].fillna(0,inplace=True)\n        pass\n    \n    df_genre_year.loc[year] = pd.Series(d1)\n\n# Check some random years \n    \ndf_genre_year.loc[1928:1933]","c773f97e":"# Fill all the missing values with 0\n\ndf_genre_year.fillna(0,inplace=True)\ndf_genre_year.loc[1928:1933]","883e46dd":"df_genre_year.plot(figsize=(14,10))\n\n# I tried to make this interactive but for some reason it doesn\u00b4t work in Kaggle... This is a bit messier but we can see that Drama has pretty much always been the most popular genre.","b6706f21":"n = 100\n\ntext = \",\".join(word for word in df[\"Title\"])\nwordcloud = WordCloud(max_words=n,collocations=False,background_color=\"white\").generate(text)\nplt.figure(figsize=(15,10))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\n\nprint(f\"Top {n} most common words used in the movie titles 1902-2020:\")\nplt.show()","291863e6":"year1 = 1950\nyear2 = 2019\nn = 100\n\ntext = \",\".join(word for word in df[df[\"Year\"]==year1][\"Title\"])\nwordcloud = WordCloud(max_words=n,collocations=False,background_color=\"white\").generate(text)\nplt.figure(figsize=(15,10))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\n\nprint(f\"Top {n} most common words used in the movie titles in {year1}:\")\nplt.show()\n\ntext = \",\".join(word for word in df[df[\"Year\"]==year2][\"Title\"])\nwordcloud = WordCloud(max_words=n,collocations=False,background_color=\"white\").generate(text)\nplt.figure(figsize=(15,10))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\n\nprint(\"\\n\")\nprint(f\"Top {n} most common words used in the movie titles in {year2}:\")\nplt.show()","0b11791a":"Let's find out as much information as we can related with the ratings. For this we can use two columns. IMDb or Rotten Tomatoes. I will use IMDb mainly for three reasons: 1. As I showed earlier Rotten Tomatoes is missing a lot of information, 2. Rotten Tomatoes ratings come in string format, which we would have to convert into numeric in order to work with it and 3. Personally I use IMDb on my daoly basis to check out movie ratings and reviews, so I\u00b4m quite familiarized with it.\n\nSo let\u00b4s drop that column before doing anything else.","d48ea1bf":"## Locations","b9eec72b":"Finally, we\u00b4ll do the same fot the longest and shortest movies","4b9d1f37":"# Films Data Set Analysis and Visualization","57da6836":"Apparently it seems pretty obvious that the quality of film-making has gone downhill throughout the years.\n\nHowever, this plot may be misleading due to the fact that there are some years that only contain one movie, whereas there are others with more than a thousand. To clear this up let\u00b4s draw a boxplot. \n\nIn this boxplot, we will only see those years that contain more than one movie. ","ee2d371f":"Let\u00b4s start by simply showing the longest movies ever filmed.","742d3358":"I certainly did not expect this! With all the talk there is about Netflix and you can find three times more movies on Prime Video. I guess Netflix has a better marketing strategy.","bea653be":"We often hear that nowadays they don\u00b4t make films as they used to... as if today\u00b4s films were not as good as the ones filmed years ago. Let\u00b4s see if that's entirely true...","074e2e0d":"This doesn\u00b4t come as a surprise, with most of the movies made in the USA, with Bollywood standing in third position after the UK. ","47e8bb76":"Here are some plots showing this information. Top 100 directors with the most directed movies and top 40 where you can see the number of movies they\u00b4ve directed.","2b91263a":"The runtime of the first two movies Colorado, 1940 and Law of the Lawless, seems to be inaccurate. Accorind to IMDb, teh first on has a length of 57 min whereas the second one lasts 87 min. \n\nThis means that The Vatican Museums would become the longest movie in our data set with 410 minutes (almost 7 hours!).\n\nIt\u00b4s always good to contrast our data when we see something suspicious as a 1256 minute film.\n\nThe ammended graph would look something like this, by removing the first two movies.","b851130b":"As we saw earlier, we are missing a lot of data on this subject, however, from what we have, we can clearly see that most movies are aimed for viewers over 18.\n\nNest, let\u00b4s see how the aimed public has changed over the years (if it has) and if there\u00b4s any relationship between movie lenght and age apropiateness","1ff804a6":"To finish analysing genres, let\u00b4s see how they have varied throughout history.\nWhich have been the most popular genres of each year?","e08894ba":"## Genres","4bbc0da4":"Let\u00b4s explain this a bit more...\n\nThe original \"Genres\" column in the dataset holds 1909 different genres. The reason as to why there are so many is because there are various combinations of different genres, such as Comedy\/Drama, Documentary\/Music or Horror\/Mistery\/Thriller. The first plot shows which of these combinations or individual genres are the most common. We can see that genres such as Drama or Documentary are very popular, as well as Comedy\/Drama or Drama\/Romance.\n\nHowever, if we want to analyse which of the basic genres are the most popular, we must split up the composed genres into basic ones. Then we will find out how many basic genres we have, and how many times they appear. We arrive to the conclusion that there are 27 basic genres, being Drama, Comedy and Thriller the most popular ones. Information about these genres and their proportion is shown in the second plot   ","effebc4b":"We can see that even though there are 1909 different genres including combined and individual, there are only 27 basic ones.\n\nLet\u00b4s analyse which are the ones the audience love most.","4421e63c":"## Platforms","9f334568":"## Taking a look at our Data Set","98d65634":"First, let\u00b4s find out how many different genres we can find in our data set.","c005df3b":"## Ratings","3eb4304c":"Finally, we could see what the most common mixed genres are...","c1334001":"Firstly, let\u00b4s plot a very simple graph to see which are the best rated movies. We have over 16700 movies, so we\u00b4ll select a top! ","1b762ed4":"From now on we can add visual information to our plots that will remind us of how many movies were made on a certain year","251a27c2":"There\u00b4s just no clear conclusion. We can see that the worst rated films were made around the years 2005 to 2018, but also the best rated ones. \n\nTo clear this out, let\u00b4s plot a yearly averaged rating.","28071009":"## Directed by...","599c8c07":"The results are quite interesting. It shows that nowadays themes like love, christmas and life are the most popular, whereas 70 years ago, in 1950, films related to the words eagle, hawk, or sunset where the most common. We can certainly see the Western genre influence at that time.","b85c6876":"But how has this feature variated troughout the years?","9e2e835b":"To end the notebook, let\u00b4s create a visual plot that shows us what words are most commonly used when picking the title for a movie.","f7c4d409":"Now let\u00b4s plot this information.","5c795d22":"According to our data, the film \"The Owner\" is the one directed by the most directors with a total of 28!\n\nNow let\u00b4s find out who directed the best and worst rated movies.","fb4be4bc":"Now it\u00b4s much clearer. The average rating of films has remained pretty stable specially over the last years.","f5e53a79":"In order to simplify things, we create a new dataframe with all the directors and the number of movies they\u00b4ve directed.","6a02d2a0":"## Runtime","1651170b":"## Age appropriateness","63a4026a":"Finally, let\u00b4s analyze the relationship between Rating and Runtime and see if we can extract any conclusions.","d14fcb7c":"We seem to be missing a lot of information on the films age appropriateness as well as the Rotten Tomatoes ratings. We\u00b4re also missing some information about the Directors, Genres, Country, Language and Runtime.","e97417b4":"Where are the films made?\n\nFor this we I\u00b4m going to use the df_countries dataframe which I created on a separate notebook. Te dataframe contains the number of movies filmed on each country as well as the Alpha 3 (ISO 3166) country codes (which was a real pain to add). We\u00b4ll need these codes in order to plot a world-wide cloropeth map.","fbca4ceb":"Here\u00b4s just a longer list of the top 100 movies with the highest runtime.","e1b7eef6":"Are you old enough to watch that movie? Which type of public are most of the films aimed for?"}}