{"cell_type":{"98d01d6e":"code","52e20564":"code","e87f2f52":"code","a9e6e2b3":"code","5f3f8aff":"markdown"},"source":{"98d01d6e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score\nfrom lightgbm import LGBMRegressor\nfrom sklearn import metrics","52e20564":"# Functions\n\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.   \n        https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))    \n    for col in df.columns:\n        col_type = df[col].dtype        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))    \n    return df\n\n\ndef metrics_regression(true, predicted):  \n    \"\"\"Metrics\"\"\"\n    r2_square = metrics.r2_score(true, predicted) \n    print(f'R2_predicted:     {r2_square:.3f}')\n    \n\ndef feature_importances(x, model):\n    df = pd.DataFrame(sorted(list(zip(x, model.feature_importances_)), \n                      key=lambda x: x[1]))\n    plt.figure(figsize=(12, 7))\n    plt.barh(df[0], df[1])\n    plt.show()\n    \n    \ndef model_LGBMRegressor(X, y):\n    model = LGBMRegressor(max_depth=7,\n                          min_samples_leaf=10,\n                          n_estimators=300, \n                          random_state=42,\n                          n_jobs=-1)\n    model.fit(X, y)\n    cv_score = cross_val_score(model, X, y, \n                               scoring='r2', \n                               cv=KFold(n_splits=5, shuffle=True, random_state=42))\n    # cv_score\n    mean = cv_score.mean()\n    std = cv_score.std()\n    print()\n    print('CV_score R2 mean: {:.3f} +- {:.3f}'.format(mean, std))    \n    predictions = model.predict(X)\n    metrics_regression(y, predictions)\n    feature_importances(X, model)\n    return model","e87f2f52":"train = pd.read_csv('\/kaggle\/input\/realestatepriceprediction\/train.csv')\ny = train['Price']\nX = train.drop('Price',  axis=1)\n\n# Feature engineering\ndef feature_engineering(X):\n    X = X.drop(['Id'],  axis=1)\n    X['Healthcare_1'].fillna(X['Healthcare_1'].median(), inplace=True)\n    X['LifeSquare'].fillna(X['Square'] * 0.7, inplace=True)\n    X = reduce_mem_usage(X)\n    print('Shape:', X.shape)\n    return X\n\n# Model\nX = feature_engineering(X)\nmodel = model_LGBMRegressor(X, y)","a9e6e2b3":"# Final\n\nX_final = pd.read_csv('\/kaggle\/input\/realestatepriceprediction\/test.csv')\npreds_final = pd.DataFrame()\npreds_final['Id'] = X_final['Id'].copy()\n\nX_final = feature_engineering(X_final)\npreds_final['Price'] = model.predict(X_final)\npreds_final.to_csv('final.csv', index=False)\npreds_final.head()","5f3f8aff":"### Real Estate Price Prediction\n##### https:\/\/www.kaggle.com\/c\/realestatepriceprediction\/overview"}}