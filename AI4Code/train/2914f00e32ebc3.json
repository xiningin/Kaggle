{"cell_type":{"936cdef1":"code","de5e898a":"code","d6b8da8d":"code","2da13c22":"code","2450a536":"code","5efd1f7f":"code","11d86993":"code","29142749":"code","7aa46808":"code","753f1962":"code","ae50f826":"code","c1f66534":"code","5ad5dd2f":"code","f046ed11":"code","7c8ebb8c":"code","536b3a08":"code","fa5091f6":"code","b2b72915":"code","4526ec87":"code","4388ea50":"code","fd5a0c4a":"code","a2fd1e4a":"code","3ef9f68b":"code","20e53ee8":"code","ce20a24f":"code","51957e9e":"code","244cdfe5":"code","0427f08d":"code","b8a64db7":"code","c45309a7":"code","0e0ca085":"code","f24097c5":"code","175825a7":"code","33cc468f":"code","b4c3c351":"code","c87be119":"code","7ba1f52a":"code","182959a9":"code","bf80283b":"code","cd6153cd":"code","e3d2c640":"code","0ff5070e":"code","0f8447a0":"code","259ff19f":"code","6f364aba":"code","e2d1cbb6":"code","00f4d2e8":"code","0dd28a63":"code","69c39b75":"code","f73d7da1":"code","dbfe99c8":"code","461a0735":"code","101ede10":"code","9b6b2595":"code","90a76014":"code","99e9e09e":"code","e443ade7":"code","a9398ace":"code","dce3df45":"code","329602cb":"code","a47361ab":"code","95438d15":"code","09a4d048":"code","ad0fe164":"code","cebd5570":"code","84dc54d2":"code","06c747ef":"code","95b96ba0":"code","b7e1614b":"code","4d28218f":"code","16aec53d":"code","38c0f066":"code","8db98944":"code","163996fd":"code","59afce8c":"code","e3d28097":"code","c4bb6f59":"code","355f4189":"code","a006ea9b":"code","2c30dc27":"code","d07c311d":"code","57e82c91":"code","a735bba1":"code","eac0d9b8":"code","74f45c6f":"code","241d775a":"code","fb4849e1":"code","e00b5619":"code","5c85ddb2":"code","21642d59":"code","c5414cca":"code","9fc8cefb":"code","b1e62220":"code","427d7dd3":"code","15504d2d":"code","e2f613b8":"code","0cbfa98f":"code","ca5274b3":"code","8b3497ad":"code","f5086d57":"code","7324db33":"code","5c2ea042":"code","5f42c190":"code","c8cb3893":"code","c87f195b":"code","bd24c3fa":"code","d87ce18b":"code","e42d7b84":"code","16867d9b":"code","7d1e3654":"code","b08ac6fb":"code","eacfd3ad":"code","29f110ab":"code","c8881cea":"code","d7b6bd32":"code","d58c3025":"code","c0b9cdbd":"code","18a2bed4":"code","b824ac39":"code","17529d7c":"code","830db081":"code","4e1f4770":"code","43eb6764":"code","af76c5ee":"code","5503838e":"code","760b8a1d":"code","33c370e6":"code","ff3add57":"code","4808c2d5":"code","e259a64f":"markdown","1811a076":"markdown","3c25a7fc":"markdown","e37745f3":"markdown","feb6517a":"markdown","db004752":"markdown","cc6163c7":"markdown","a0442dcc":"markdown","c1bf3b23":"markdown","a2b66b42":"markdown","21f9b48d":"markdown","490ef49d":"markdown","422d685a":"markdown","f422da1c":"markdown","3c02c67d":"markdown","fa2e7259":"markdown","90c6319d":"markdown","dd6619ce":"markdown","b64538af":"markdown","40d8bcff":"markdown","0658baaa":"markdown","05128b83":"markdown","091ba70c":"markdown"},"source":{"936cdef1":"# importing the required libraries\n\nimport numpy as np, pandas as pd\nimport matplotlib.pyplot as plt, seaborn as sns\nfrom IPython.core.display import display, HTML\ndisplay(HTML(\"<style>.container {width:100% !important;}<\/style>\"))\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","de5e898a":"# Reading the dataset and storing it in a new dataframe 'data'\n\ndata = pd.read_csv('..\/input\/dosha-prediction\/dravya_data1.csv')","d6b8da8d":"data.head()","2da13c22":"data.shape","2450a536":"data.value_counts()","5efd1f7f":"data.info()","11d86993":"# there are null values ( in Rasa2 and Guna2) but it is not advisible to replace them.","29142749":"# checking uniquness of distribution  ","7aa46808":"data['Guna1'].value_counts()","753f1962":"## some of the columns names are not unique and hence merging such columns(like laghu, snigdha, tikshna)","ae50f826":"data['Guna1'] = data['Guna1'].str.strip()\ndata['Guna1'].value_counts()","c1f66534":"# from 13, it is brought down to 8 ","5ad5dd2f":"data['Guna2'].value_counts()","f046ed11":"data['Guna2'] = data['Guna2'].str.strip()\ndata['Guna2'].value_counts()","7c8ebb8c":"data['Rasa1'].value_counts()","536b3a08":"data['Rasa1'] = data['Rasa1'].str.strip()\ndata['Rasa1'].value_counts()","fa5091f6":"data['Rasa2'].value_counts()","b2b72915":"data['Vipaka'].value_counts()","4526ec87":"data['Vipaka'] = data['Vipaka'].str.strip()\ndata['Vipaka'].value_counts()","4388ea50":"data['Virya'].value_counts()","fd5a0c4a":"data['Virya'] = data['Virya'].str.strip()\ndata['Virya'].value_counts()","a2fd1e4a":"data['Dosha'].value_counts()","3ef9f68b":"data.Dosha.value_counts(normalize=True)","20e53ee8":"## Assessing the categorical variables","ce20a24f":"cat_cols = data.select_dtypes(\"object\").columns\ncat_cols","51957e9e":"plt.figure(figsize=[20,7])\nfor ind, col in enumerate(cat_cols):\n    plt.subplot(2,5,ind+1)\n    data[col].value_counts(normalize=True).plot.barh()\n    plt.title(col)\nplt.show()","244cdfe5":"data[col].value_counts(normalize=True)","0427f08d":"dumm_cols = ['Guna1', 'Guna2', 'Rasa1', 'Rasa2', 'Vipaka', 'Virya']","b8a64db7":"dravya_dummies = pd.get_dummies(data[dumm_cols], drop_first=True)","c45309a7":"dravya_dummies.head()","0e0ca085":"dravya_dummies.shape","f24097c5":"## Preparing final data by concating original data with dummy data set ","175825a7":"final_data = pd.concat([data, dravya_dummies], axis=1)","33cc468f":"final_data.shape","b4c3c351":"final_data.head()","c87be119":"final_data = final_data.drop(dumm_cols,axis=1)","7ba1f52a":"final_data.describe()","182959a9":"from sklearn.model_selection import train_test_split","bf80283b":"df_train, df_test = train_test_split(final_data, test_size=0.2, random_state=42) ","cd6153cd":"df_train.shape, df_test.shape","e3d2c640":"X_train = df_train.drop(['Dosha','Sanskrit','Sl No '], axis=1)\ny_train = df_train['Dosha']\nX_test = df_test.drop(['Dosha','Sanskrit','Sl No '], axis=1)\ny_test = df_test['Dosha']","0ff5070e":"X_train.shape","0f8447a0":"y_train.shape, y_test.shape","259ff19f":"X_train.shape","6f364aba":"X_train.columns","e2d1cbb6":"from sklearn.tree import DecisionTreeClassifier","00f4d2e8":"dt = DecisionTreeClassifier(max_depth=3)\ndt.fit(X_train, y_train)","0dd28a63":"import sklearn","69c39b75":"print(sklearn.tree.export_graphviz(dt, \n                 filled=True, rounded=True,\n                 special_characters=True, feature_names = X_train.columns,\n                 class_names=['VS', \"PS\", 'KS', 'TS', 'VPS', 'VKS', 'PKS'])) ","f73d7da1":"!pip install pydotplus","dbfe99c8":"# Importing required packages for visualization\nfrom IPython.display import Image  \nfrom sklearn.tree import export_graphviz\nimport pydotplus, graphviz\nfrom six import StringIO ","461a0735":"# plotting tree with max_depth=6\ndot_data = StringIO()  \n\nexport_graphviz(dt, out_file=dot_data, filled=True, rounded=True,\n                feature_names=X_train.columns, \n                class_names=['VS', \"PS\", 'KS', 'TS', 'VPS', 'VKS', 'PKS'])\n\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())\nImage(graph.create_png())\nImage(graph.create_png(),width=800,height=900)\ngraph.write_pdf(\"Dosha_Dravyas\")","101ede10":"print(export_graphviz(dt, filled=True, rounded=True, special_characters=True,\n               feature_names=X_train.columns, \n                 class_names=['VS', \"PS\", 'KS', 'TS', 'VPS', 'VKS', 'PKS']))","9b6b2595":"print(dot_data.getvalue())","90a76014":"y_train_pred = dt.predict(X_train)\ny_test_pred = dt.predict(X_test)","99e9e09e":"from sklearn.metrics import confusion_matrix, accuracy_score","e443ade7":"print(accuracy_score(y_train, y_train_pred))\nconfusion_matrix(y_train, y_train_pred)","a9398ace":"print(accuracy_score(y_test, y_test_pred))\nconfusion_matrix(y_test, y_test_pred)","dce3df45":"## Not much of huge difference between train (72%) and test (68%) accuracy scores.","329602cb":"def get_dt_graph(dt_classifier):\n    dot_data = StringIO()\n    export_graphviz(dt_classifier, out_file=dot_data, filled=True,rounded=True,\n                    feature_names=X_train.columns, \n                    class_names=['VS', \"PS\", 'KS', 'TS', 'VPS', 'VKS', 'PKS'])\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())\n    return graph","a47361ab":"def evaluate_model(dt_classifier):\n    print(\"Train Accuracy :\", accuracy_score(y_train, dt_classifier.predict(X_train)))\n    print(\"Train Confusion Matrix:\")\n    print(confusion_matrix(y_train, dt_classifier.predict(X_train)))\n    print(\"-\"*50)\n    print(\"Test Accuracy :\", accuracy_score(y_test, dt_classifier.predict(X_test)))\n    print(\"Test Confusion Matrix:\")\n    print(confusion_matrix(y_test, dt_classifier.predict(X_test)))","95438d15":"dt_default = DecisionTreeClassifier(random_state=42)\ndt_default.fit(X_train, y_train)","09a4d048":"gph = get_dt_graph(dt_default)\nImage(gph.create_png())","ad0fe164":"evaluate_model(dt_default)","cebd5570":"?DecisionTreeClassifier","84dc54d2":"dt_depth = DecisionTreeClassifier(max_depth=3)\ndt_depth.fit(X_train, y_train)","06c747ef":"gph = get_dt_graph(dt_depth) \nImage(gph.create_png())","95b96ba0":"# lets check with 4 depth-\ndt_depth = DecisionTreeClassifier(max_depth=4)\ndt_depth.fit(X_train, y_train)\ngph = get_dt_graph(dt_depth) \nImage(gph.create_png())","b7e1614b":"evaluate_model(dt_depth)","4d28218f":"dt_min_split = DecisionTreeClassifier(min_samples_split=50)\ndt_min_split.fit(X_train, y_train)","16aec53d":"gph = get_dt_graph(dt_min_split) \nImage(gph.create_png())","38c0f066":"evaluate_model(dt_min_split)","8db98944":"dt_min_leaf = DecisionTreeClassifier(min_samples_leaf=25, random_state=42)\ndt_min_leaf.fit(X_train, y_train)","163996fd":"gph = get_dt_graph(dt_min_leaf)\nImage(gph.create_png())","59afce8c":"evaluate_model(dt_min_leaf)","e3d28097":"dt_min_leaf_entropy = DecisionTreeClassifier(min_samples_leaf=25, random_state=42, criterion=\"entropy\")\ndt_min_leaf_entropy.fit(X_train, y_train)","c4bb6f59":"gph = get_dt_graph(dt_min_leaf_entropy)\nImage(gph.create_png())","355f4189":"evaluate_model(dt_min_leaf_entropy)","a006ea9b":"dt = DecisionTreeClassifier(random_state=42)","2c30dc27":"from sklearn.model_selection import GridSearchCV","d07c311d":"# Create the parameter grid based on the results of random search \nparams = {\n    'max_depth': [2, 3, 5, 10],\n    'min_samples_leaf': [5, 10, 20],\n    'criterion': [\"gini\", \"entropy\"]\n}","57e82c91":"grid_search = GridSearchCV(estimator=dt, \n                       param_grid=params, \n                            cv=4, n_jobs=-1, verbose=1, scoring = \"f1\")","a735bba1":"# Instantiate the grid search model\ngrid_search = GridSearchCV(estimator=dt, \n                           param_grid=params, \n                           cv=4, n_jobs=-1, verbose=1, scoring = \"accuracy\")","eac0d9b8":"%%time\ngrid_search.fit(X_train, y_train)","74f45c6f":"score_df = pd.DataFrame(grid_search.cv_results_)\nscore_df.head()","241d775a":"score_df.nlargest(5,\"mean_test_score\")","fb4849e1":"grid_search.best_estimator_","e00b5619":"dt_best = grid_search.best_estimator_","5c85ddb2":"evaluate_model(dt_best)","21642d59":"from sklearn.metrics import classification_report","c5414cca":"y_pred = dt_best.predict(X_train)","9fc8cefb":"res = df_train\nres['pred'] = y_pred","b1e62220":"res.shape","427d7dd3":"res[res.pred.isnull()]","15504d2d":"res[['Sanskrit','Dosha','pred']].head(10)","e2f613b8":"print(classification_report(y_test, dt_best.predict(X_test)))","0cbfa98f":"gph = get_dt_graph(dt_best)\nImage(gph.create_png(), width=2000, height=2500)\n\n## Image(gph.create_png(), width=900, height=1000)","ca5274b3":"## extracting some of the drugs based on certain above creteria-","8b3497ad":"A = X_train[X_train['Virya_ushna'] < 0.5]","f5086d57":"B= A[A['Rasa1_madhura']< 0.5]\nC= B[B['Vipaka_katu']< 0.5]\nD = C[C['Rasa2_kashaya']> 0.5]\nD","7324db33":"from sklearn.ensemble import RandomForestClassifier","5c2ea042":"rf = RandomForestClassifier(random_state=42, n_estimators=10, max_depth=3)","5f42c190":"rf.fit(X_train, y_train)","c8cb3893":"rf.estimators_[0]","c87f195b":"sample_tree = rf.estimators_[4]","bd24c3fa":"gph = get_dt_graph(sample_tree)\nImage(gph.create_png(), width=900, height=1000)","d87ce18b":"gph = get_dt_graph(rf.estimators_[2])\nImage(gph.create_png(), width=900, height=900)","e42d7b84":"rf = RandomForestClassifier(random_state=42, n_estimators=10, max_depth=3, oob_score=True)","16867d9b":"rf.fit(X_train, y_train)","7d1e3654":"rf.oob_score_","b08ac6fb":"evaluate_model(rf)","eacfd3ad":"# this is relatively better as train and test accuracy are very close","29f110ab":"classifier_rf = RandomForestClassifier(random_state=42, n_jobs=-1)","c8881cea":"# Create the parameter grid based on the results of random search \nparams = {\n    'max_depth': [1, 2, 5],\n    'min_samples_leaf': [5, 10, 20],\n    'max_features': [2,3,4],\n    'n_estimators': [10, 30, 50, 100, 200]\n}","d7b6bd32":"# Instantiate the grid search model\ngrid_search = GridSearchCV(estimator=classifier_rf, param_grid=params, \n                          cv=4, n_jobs=-1, verbose=1, scoring = \"accuracy\")","d58c3025":"%%time\ngrid_search.fit(X_train,y_train)","c0b9cdbd":"rf_best = grid_search.best_estimator_","18a2bed4":"rf_best","b824ac39":"evaluate_model(rf_best)","17529d7c":"sample_tree = rf_best.estimators_[0]","830db081":"gph = get_dt_graph(sample_tree)\nImage(gph.create_png())","4e1f4770":"gph = get_dt_graph(rf_best.estimators_[0])\nImage(gph.create_png(), height=900, width=900)","43eb6764":"gph = get_dt_graph(rf_best.estimators_[7])\nImage(gph.create_png(), height=900, width=900)","af76c5ee":"classifier_rf = RandomForestClassifier(random_state=42, n_jobs=-1, max_depth=5, n_estimators=100, oob_score=True)","5503838e":"classifier_rf.fit(X_train, y_train)","760b8a1d":"classifier_rf.feature_importances_","33c370e6":"imp_df = pd.DataFrame({\n    \"Varname\": X_train.columns,\n    \"Imp\": classifier_rf.feature_importances_\n})","ff3add57":"imp_df.sort_values(by=\"Imp\", ascending=False)","4808c2d5":"## As per the above observation, Virya plays important role (17+17=34%) in deciding the doshic action followed by Madhura Rasa","e259a64f":"Specifying minimum samples before split","1811a076":"Creating helper functions to evaluate model performance and help plot the decision tree","3c25a7fc":"---","e37745f3":"Grid search for hyper-parameter tuning","feb6517a":"Without setting any hyper-parameters","db004752":"Using Entropy instead of Gini","cc6163c7":"##creating Decision Tree graph","a0442dcc":"Controlling the depth of the tree","c1bf3b23":"Problem statement:\nAyurveda- oldest medical system known to mankind, treats the person using herbs. \nThis traditional science strongly believes that the diseases are due to imbalance in Body humors called- Doshas. \nIf these Doshas increases, they will cause disease. \nTo treat the disease, Ayurveda uses various herbs ( and some minerals too). \nThese herbs act on the Doshas through-\n\nRasa (taste): Taste of the drug will have their influence on Doshas. \n    Ex. Sweet taste (madhura Rasa) will decrease the Vata and Pitta\n    \nGuna (Properties): Certain properties like oiliness, heaviness will increase Kapha\n\nVirya (Potency): It can be of Usha (hot) or Sheeta (Cold) rarely Anushna (either hot nor cold) that will have impact of Doshas\n\nVipaka (Final transformation): It can be of Madhura (sweet), Amla (sour) and Katu (pungent- hot taste)\n\nDosha: The overall outcome of any drug can be understood as VS (Vata shamaka- decreases Vata), PS (Pitta shamaka- decreases Pitta), KS(Kapha shamaka- decreases Kapha), TS (Tridosha shamaka- decreases Vata, Pitta and Kapha), VPS (Vata Pitta shamaka- decreases Vata and Pitta), VKS (Vata Kapha shamaka- decreases Vata and Kapha),  PKS (Pitta Kapha shamaka- decreases Pitta and Kapha)\n\nSo, in the given data set, Dosha is the target variable i.e we try to understand that which of the above components- Rasa, Guna, Virya, Vipaka, will have impact on Doshas\n","a2b66b42":"# # step 4 Model building","21f9b48d":"Comments: \n1. the same thing has been documented in the classical text books of Ayurveda. Virya is considered as - \"Utkrishtashaktisampannaguna\" i.e. Highly powered qualities of any drug. \n\n2. the least importance has been give to 'Sara Guna' by the machine and even in the typical ayurvedic practice we see that Physicians gives least importance for the 'Sara Guna' while choosing any drug for Dosha reduction.","490ef49d":"Evaluating model performance","422d685a":"#### Dividing into train and test datasets","f422da1c":"Specifying minimum samples in leaf node","3c02c67d":"OOB score","fa2e7259":"### Random Forest","90c6319d":"## Building predictive models","dd6619ce":"#### Creating dummy variables for the categorical variables","b64538af":"Hyper-parameter tuning","40d8bcff":"### Step2 : Data Cleaning","0658baaa":"### Step3 : Data Preparation","05128b83":"### Step1 : Reading and understanding the data  ","091ba70c":"Variable importance in RandomForest and Decision trees"}}