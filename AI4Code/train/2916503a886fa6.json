{"cell_type":{"90f6760c":"code","e720e958":"code","4032adfe":"code","2362dd4c":"code","0fe28c05":"code","82c02a33":"code","3eb055fb":"code","d78c5073":"code","9104bd64":"code","87b2192b":"code","2e8ba563":"code","946178f6":"code","42b97801":"code","2b6a82f5":"code","618cdff2":"code","4f951210":"code","b882faa7":"code","bb39ae9c":"code","0692be94":"code","7932130e":"code","35bcb53b":"code","11e2a190":"code","91b9add6":"code","53562ab1":"code","076e79be":"code","9db7b610":"code","5ad538d3":"code","a98a1040":"code","5b24551b":"code","49476e8b":"code","5ca892b2":"code","e8287e78":"code","e6b78f84":"code","0ca61fdf":"code","efc7dfee":"code","aefbabb3":"code","35e6f413":"code","a087c6b8":"code","4ab7090f":"code","cc9fb750":"code","1fe9269d":"code","307c5b15":"code","0579eef3":"code","a280c4ba":"code","fb5fe805":"code","43e355ba":"code","5bcc7ded":"code","582a3b44":"code","3fd36ad7":"code","594d5a11":"code","53d3db56":"code","5efdc353":"code","3e7cc392":"code","56085725":"code","d2e9563e":"code","cfeb92ed":"code","ea3a9eb5":"code","6b55d5df":"code","24c0fbd8":"code","42d8f082":"code","e5a86dbc":"code","cbfa8f20":"markdown","59851f03":"markdown","d838b66d":"markdown","ce3660ae":"markdown","513f538a":"markdown","6fa4aba4":"markdown","506bf628":"markdown","ee1529be":"markdown","549cd313":"markdown","c7c09c6a":"markdown","d274dd59":"markdown","be6c62a1":"markdown","e5b7f4ac":"markdown","4b882169":"markdown","c41047ca":"markdown","878ee49a":"markdown","c778bca3":"markdown"},"source":{"90f6760c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e720e958":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","4032adfe":"\n# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","2362dd4c":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","0fe28c05":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","82c02a33":"train = pd.read_csv(\"..\/input\/learn-together\/train.csv\")\ntest = pd.read_csv(\"..\/input\/learn-together\/test.csv\")","3eb055fb":"print(train.shape)\ndisplay(train.head(1))\n\nprint(test.shape)\ndisplay(test.head(1))","d78c5073":"import matplotlib.pyplot as plt\nplt.style.use(style='ggplot')\nplt.rcParams['figure.figsize'] = (10, 6)","9104bd64":"train.plot(kind='scatter', x='Aspect', y='Hillshade_3pm', alpha=0.5, color='mediumorchid', figsize = (12,9))\nplt.title('Aspect And Hillshade_3pm')\nplt.xlabel(\"Aspect\")\nplt.ylabel(\"Hillshade_3pm\")\nplt.show()","87b2192b":"train.Cover_Type.describe()","2e8ba563":"train.plot(kind='scatter', x='Slope', y='Hillshade_3pm', alpha=0.5, color='chartreuse', figsize = (12,9))\nplt.title('Slope And Hillshade_3pm')\nplt.xlabel(\"Slope\")\nplt.ylabel(\"Hillshade_3pm\")\nplt.show()","946178f6":"print (\"Skew is:\", train.Wilderness_Area1.skew())\nplt.hist(train.Wilderness_Area1, color='purple')\nplt.show()","42b97801":"train.plot(kind='scatter', x='Aspect', y='Hillshade_9am', alpha=0.5, color='lightcoral', figsize = (12,9))\nplt.title('Aspect And Hillshade_9am')\nplt.xlabel(\"Aspect\")\nplt.ylabel(\"Hillshade_9am\")\nplt.show()","2b6a82f5":"numeric_features = train.select_dtypes(include=[np.number])\nnumeric_features.dtypes","618cdff2":"corr = numeric_features.corr()\n\nprint (corr['Cover_Type'].sort_values(ascending=False)[1:11], '\\n')\nprint (corr['Cover_Type'].sort_values(ascending=False)[-10:])","4f951210":"def pivotandplot(data,variable,onVariable,aggfunc):\n    pivot_var = data.pivot_table(index=variable,\n                                  values=onVariable, aggfunc=aggfunc)\n    pivot_var.plot(kind='bar', color='purple')\n    plt.xlabel(variable)\n    plt.ylabel(onVariable)\n    plt.xticks(rotation=0)\n    plt.show()","b882faa7":"pivotandplot(train,'Soil_Type29','Cover_Type',np.median)","bb39ae9c":"import seaborn as sns","0692be94":"ax = sns.scatterplot(x=\"Horizontal_Distance_To_Hydrology\", y=\"Vertical_Distance_To_Hydrology\", \\\n                     hue=\"Cover_Type\", legend=\"full\", palette='RdPu', data=train)","7932130e":"ax = sns.scatterplot(x=\"Horizontal_Distance_To_Hydrology\", y=\"Vertical_Distance_To_Hydrology\", \\\n                     hue=\"Cover_Type\", legend=\"full\", palette='GnBu', data=train)","35bcb53b":"ax = sns.scatterplot(x=\"Horizontal_Distance_To_Hydrology\", y=\"Vertical_Distance_To_Hydrology\", \\\n                     hue=\"Cover_Type\", legend=\"full\", palette='BuGn', data=train)","11e2a190":"import seaborn as sns","91b9add6":"train['log_Cover_Type']=np.log(train['Cover_Type']+1)\nCover_Type=train[['Cover_Type','log_Cover_Type']]\n\nCover_Type.head(5)","53562ab1":"_=sns.regplot(train['Soil_Type37'],Cover_Type['Cover_Type'])","076e79be":"ax = sns.scatterplot(x=\"Aspect\", y=\"Hillshade_3pm\", \\\n                     hue=\"Cover_Type\", legend=\"full\", palette = \"BuGn_r\", data=train)","9db7b610":"ax = sns.scatterplot(x=\"Aspect\", y=\"Hillshade_3pm\", \\\n                     hue=\"Cover_Type\", legend=\"full\", palette = \"RdPu_r\", data=train)","5ad538d3":"# Save a palette to a variable:\npalette = sns.color_palette(\"bright\")\n\n# Use palplot and pass in the variable:\nsns.palplot(palette)","a98a1040":"# library & dataset\nfrom matplotlib import pyplot as plt\nimport numpy as np\n \n# create data\nx = np.random.rand(15)\ny = x+np.random.rand(15)\nz = x+np.random.rand(15)\nz=z*z\n \n# Use it with a call in cmap\nplt.scatter(x, y, s=z*2000, c=x, cmap=\"BuPu\", alpha=0.4, edgecolors=\"grey\", linewidth=2)\n \n# You can reverse it:\nplt.scatter(x, y, s=z*2000, c=x, cmap=\"BuPu_r\", alpha=0.4, edgecolors=\"grey\", linewidth=2)\n \n# OTHER: viridis \/ inferno \/ plasma \/ magma\nplt.scatter(x, y, s=z*2000, c=x, cmap=\"plasma\", alpha=0.4, edgecolors=\"grey\", linewidth=2)","5b24551b":"# Then you can pass arguments to each type:\nsns.jointplot(x=train[\"Cover_Type\"], y=train[\"Soil_Type1\"], kind='scatter', s=200, color='m', edgecolor=\"skyblue\", linewidth=2)\n \n# Custom the color\nsns.set(style=\"white\", color_codes=True)\nsns.jointplot(x=train[\"Cover_Type\"], y=train[\"Soil_Type1\"], kind='kde', color=\"skyblue\")","49476e8b":"sequential_colors = sns.color_palette(\"RdPu\", 10)\nsns.palplot(sequential_colors)","5ca892b2":"# Just load seaborn and the chart looks better:\nimport seaborn as sns\nplt.plot( 'x', 'y', data=train, marker='o', color='mediumvioletred')\nplt.show()","e8287e78":"sns.palplot(sns.color_palette(\"Paired\"))","e6b78f84":"# libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n \n# create data\nx = np.random.normal(size=50000)\ny = (x * 3 + np.random.normal(size=50000)) * 5\n \n# Make the plot\nplt.hexbin(x, y, gridsize=(15,15) )\nplt.show()\n \n# We can control the size of the bins:\nplt.hexbin(x, y, gridsize=(150,150) )\nplt.show()","0ca61fdf":"\n# Libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import kde\n \n# Create data: 200 points\ndata = np.random.multivariate_normal([0, 0], [[1, 0.5], [0.5, 3]], 200)\nx, y = data.T\n \n# Create a figure with 6 plot areas\nfig, axes = plt.subplots(ncols=6, nrows=1, figsize=(21, 5))\n \n# Everything sarts with a Scatterplot\naxes[0].set_title('Scatterplot')\naxes[0].plot(x, y, 'ko')\n# As you can see there is a lot of overplottin here!\n \n# Thus we can cut the plotting window in several hexbins\nnbins = 20\naxes[1].set_title('Hexbin')\naxes[1].hexbin(x, y, gridsize=nbins, cmap=plt.cm.BuGn_r)\n \n# 2D Histogram\naxes[2].set_title('2D Histogram')\naxes[2].hist2d(x, y, bins=nbins, cmap=plt.cm.BuGn_r)\n \n# Evaluate a gaussian kde on a regular grid of nbins x nbins over data extents\nk = kde.gaussian_kde(data.T)\nxi, yi = np.mgrid[x.min():x.max():nbins*1j, y.min():y.max():nbins*1j]\nzi = k(np.vstack([xi.flatten(), yi.flatten()]))\n \n# plot a density\naxes[3].set_title('Calculate Gaussian KDE')\naxes[3].pcolormesh(xi, yi, zi.reshape(xi.shape), cmap=plt.cm.BuGn_r)\n \n# add shading\naxes[4].set_title('2D Density with shading')\naxes[4].pcolormesh(xi, yi, zi.reshape(xi.shape), shading='gouraud', cmap=plt.cm.BuGn_r)\n \n# contour\naxes[5].set_title('Contour')\naxes[5].pcolormesh(xi, yi, zi.reshape(xi.shape), shading='gouraud', cmap=plt.cm.BuGn_r)\naxes[5].contour(xi, yi, zi.reshape(xi.shape) )","efc7dfee":"# libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import kde\n \n# create data\nx = np.random.normal(size=500)\ny = x * 3 + np.random.normal(size=500)\n \n# Evaluate a gaussian kde on a regular grid of nbins x nbins over data extents\nnbins=300\nk = kde.gaussian_kde([x,y])\nxi, yi = np.mgrid[x.min():x.max():nbins*1j, y.min():y.max():nbins*1j]\nzi = k(np.vstack([xi.flatten(), yi.flatten()]))\n \n# Make the plot\nplt.pcolormesh(xi, yi, zi.reshape(xi.shape))\nplt.show()\n \n# Change color palette\nplt.pcolormesh(xi, yi, zi.reshape(xi.shape), cmap=plt.cm.Greens_r)\nplt.show()","aefbabb3":"# Then you can pass arguments to each type:\nsns.jointplot(x=train[\"Cover_Type\"], y=train[\"Soil_Type37\"], kind='scatter', s=200, color='m', edgecolor=\"skyblue\", linewidth=2)\n \n# Custom the color\nsns.set(style=\"white\", color_codes=True)\nsns.jointplot(x=train[\"Cover_Type\"], y=train[\"Soil_Type37\"], kind='kde', color=\"skyblue\")","35e6f413":"# libraries\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Dataset\ndf=pd.DataFrame({'X': range(1,101), 'Y': np.random.randn(100)*15+range(1,101), 'Z': (np.random.randn(100)*15+range(1,101))*2 })\n \n# plot\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(train['Cover_Type'], train['Horizontal_Distance_To_Hydrology'], train['Vertical_Distance_To_Hydrology'], c='deeppink', s=60)\nax.view_init(30, 185)\nplt.show()","a087c6b8":"# libraries\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Dataset\ndf=pd.DataFrame({'X': range(1,101), 'Y': np.random.randn(100)*15+range(1,101), 'Z': (np.random.randn(100)*15+range(1,101))*2 })\n \n# plot\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(train['Cover_Type'], train['Horizontal_Distance_To_Hydrology'], train['Vertical_Distance_To_Hydrology'], c='darkolivegreen', s=60)\nax.view_init(30, 185)\nplt.show()","4ab7090f":"# libraries\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Dataset\ndf=pd.DataFrame({'X': range(1,101), 'Y': np.random.randn(100)*15+range(1,101), 'Z': (np.random.randn(100)*15+range(1,101))*2 })\n \n# plot\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(train['Cover_Type'], train['Horizontal_Distance_To_Hydrology'], train['Vertical_Distance_To_Hydrology'], c='midnightblue', s=60)\nax.view_init(30, 185)\nplt.show()","cc9fb750":"# libraries\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Dataset\ndf=pd.DataFrame({'X': range(1,101), 'Y': np.random.randn(100)*15+range(1,101), 'Z': (np.random.randn(100)*15+range(1,101))*2 })\n \n# plot\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(train['Cover_Type'], train['Horizontal_Distance_To_Hydrology'], train['Vertical_Distance_To_Hydrology'], c='orangered', s=60)\nax.view_init(30, 185)\nplt.show()","1fe9269d":"sns.palplot(sns.color_palette(\"Blues\"))","307c5b15":"\nax = sns.violinplot(x=\"Cover_Type\", y=\"Horizontal_Distance_To_Fire_Points\", data=train, \n                    inner=None, color=\".8\")\nax = sns.stripplot(x=\"Cover_Type\", y=\"Horizontal_Distance_To_Fire_Points\", data=train, \n                   jitter=True)\nax.set_title('Hor Dist to Fire Points vs Cover Type')\nax.set_ylabel('Horz Dist to nearest wildfire ignition points')","0579eef3":"\n# Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom math import pi\n \n# Set data\ndf = pd.DataFrame({\n'group': ['A','B','C','D'],\n'var1': [38, 1.5, 30, 4],\n'var2': [29, 10, 9, 34],\n'var3': [8, 39, 23, 24],\n'var4': [7, 31, 33, 14],\n'var5': [28, 15, 32, 14]\n})\n \n \n \n# ------- PART 1: Create background\n \n# number of variable\ncategories=list(df)[1:]\nN = len(categories)\n \n# What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\nangles = [n \/ float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]\n \n# Initialise the spider plot\nax = plt.subplot(111, polar=True)\n \n# If you want the first axis to be on top:\nax.set_theta_offset(pi \/ 2)\nax.set_theta_direction(-1)\n \n# Draw one axe per variable + add labels labels yet\nplt.xticks(angles[:-1], categories)\n \n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([10,20,30], [\"10\",\"20\",\"30\"], color=\"grey\", size=7)\nplt.ylim(0,40)\n \n \n# ------- PART 2: Add plots\n \n# Plot each individual = each line of the data\n# I don't do a loop, because plotting more than 3 groups makes the chart unreadable\n \n# Ind1\nvalues=df.loc[0].drop('group').values.flatten().tolist()\nvalues += values[:1]\nax.plot(angles, values, linewidth=1, linestyle='solid', label=\"group A\")\nax.fill(angles, values, 'b', alpha=0.1)\n \n# Ind2\nvalues=df.loc[1].drop('group').values.flatten().tolist()\nvalues += values[:1]\nax.plot(angles, values, linewidth=1, linestyle='solid', label=\"group B\")\nax.fill(angles, values, 'r', alpha=0.1)\n \n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))","a280c4ba":"sns.palplot(sns.hls_palette(8, l=.3, s=.8))","fb5fe805":"sns.palplot(sns.cubehelix_palette(8))","43e355ba":"x, y = np.random.multivariate_normal([0, 0], [[1, -.5], [-.5, 1]], size=300).T\ncmap = sns.cubehelix_palette(light=1, as_cmap=True)\nsns.kdeplot(x, y, cmap=cmap, shade=True);","5bcc7ded":"sns.palplot(sns.light_palette((210, 90, 60), input=\"husl\"))","582a3b44":"fig, (axis1,axis2,axis3) = plt.subplots(1,3,figsize=(16,8))\n\nsns.boxplot(x='Cover_Type', y='Hillshade_9am', data=train, ax=axis1);\naxis1.set_title('Hillshade 9am vs Cover Type')\naxis1.set_ylabel('Hillshade index at 9am')\nsns.boxplot(x='Cover_Type', y='Hillshade_Noon', data=train, ax=axis2);\naxis2.set_title('Hillshade Noon vs Cover Type')\naxis2.set_ylabel('Hillshade index at noon')\nsns.boxplot(x='Cover_Type', y='Hillshade_3pm', data=train, ax=axis3);\naxis3.set_title('Hillshade 3pm vs Cover Type')\naxis3.set_ylabel('Hillshade index at 3pm')","3fd36ad7":"sns.palplot(sns.light_palette(\"green\"))","594d5a11":"from sklearn.ensemble import RandomForestClassifier","53d3db56":"train.columns","5efdc353":"#Model with columns without modifications + Soil and Wilderness_Area with Compass\ninterest_columns = train.columns\ninterest_columns = interest_columns.drop(['Cover_Type', 'Id'])\n\nX = train[interest_columns]\ny = train.Cover_Type\n#X_test = test[interest_columns]\nmy_model = RandomForestClassifier(n_estimators = 100, random_state=42)\nmy_model = RandomForestClassifier(n_estimators = 719,\n                                       max_features = 0.3,\n                                       max_depth = 464,\n                                       min_samples_split = 2,\n                                       min_samples_leaf = 1,\n                                       bootstrap = False,\n                                       random_state=42)\n\n#CrossValidation\n#scores = cross_val_score(my_model, X, y, cv=5, scoring = 'accuracy')\n#print(scores)","3e7cc392":"##PERMUTATION IMPORTANCE\nfrom sklearn.model_selection import train_test_split\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\nmy_model = RandomForestClassifier(random_state=1).fit(train_X, train_y)\n\nimport eli5\nfrom eli5.sklearn import PermutationImportance\n\nperm = PermutationImportance(my_model, random_state=1).fit(val_X, val_y)\neli5.show_weights(perm, feature_names = val_X.columns.tolist())","56085725":"from matplotlib import pyplot as plt\nfrom pdpbox import pdp, get_dataset, info_plots\n\nfeatures_to_plot = ['Elevation', 'Wilderness_Area3']\ninter1  =  pdp.pdp_interact(model=my_model, dataset=val_X, model_features=val_X.columns, features=features_to_plot)\n\npdp.pdp_interact_plot(pdp_interact_out=inter1, feature_names=features_to_plot, plot_type='contour', plot_pdp=True)\nplt.show()","d2e9563e":"cmap = sns.cubehelix_palette(as_cmap=True)\n\nf, ax = plt.subplots(figsize=(20,10))\npoints = ax.scatter(train['Hillshade_Noon'],train['Elevation'] , c=train['Cover_Type'],label=Cover_Type ,s=20, cmap='rainbow')\n#plt.xticks(np.arange(0, 400,20))\n#plt.axis('scaled')\nf.colorbar(points)\n#plt.legend(labels=Cover_Type_Dict.values(),loc='upper left')\nplt.show()","cfeb92ed":"#Change data type of Continous variable columns to float\ncontinuos_columns={'Elevation':float,'Aspect':float,'Slope':float,'Horizontal_Distance_To_Hydrology':float,'Vertical_Distance_To_Hydrology':float,\n                   'Horizontal_Distance_To_Roadways':float,'Hillshade_9am':float,'Hillshade_Noon':float,'Hillshade_3pm':float,'Horizontal_Distance_To_Fire_Points':float}\ntrain=train.astype(continuos_columns)\ntrain.dtypes","ea3a9eb5":"#Function to plot charts of All features\ndef features_plots(data,continuous_vars,discrete_vars):\n    plt.figure(figsize=(15,24.5))\n    for i, cv in enumerate(continuous_vars):\n        plt.subplot(7, 2, i+1)\n        plt.hist(data[cv], bins=len(data[cv].unique()))\n        plt.title(cv)\n        plt.ylabel('Frequency')\n    \n    for i, dv in enumerate(discrete_vars):\n        plt.subplot(7, 2, i+ 1 + len(continuous_vars))\n        data[dv].value_counts().plot(kind='bar', title=dv)\n        plt.ylabel('Frequency')","6b55d5df":"continuous_vars=continuos_columns.keys()\ndiscrete_vars = ['Cover_Type', 'Wilderness_Area1', 'Soil_Type1']\nfeatures_plots(train,continuous_vars,discrete_vars)","24c0fbd8":"def pair_scatterplot(data,continuous_vars,y_column,target_column):\n    #plt.figure(figsize=(20,10))\n    cmap = sns.cubehelix_palette(as_cmap=True)\n    for i, cv in enumerate(continuous_vars):\n        #plt.subplot(7, 2, i+1)\n        #data.boxplot(column=cv,return_type='axes',by=by_column)\n        f, ax = plt.subplots(figsize=(20,10))\n        ax.set_xlabel(cv)\n        ax.set_ylabel(y_column)\n        points = ax.scatter(train[cv],train[y_column] , c=train[target_column],label=Cover_Type,s=20, cmap='rainbow')\n        f.colorbar(points)\n    plt.show()\n\n\n        #plt.title(cv)\n        #plt.ylabel('Value')","42d8f082":"pair_scatterplot(train,continuous_vars,'Elevation','Cover_Type')","e5a86dbc":"custom_palette = sns.color_palette(\"Paired\", 9)\nsns.palplot(custom_palette)","cbfa8f20":"Another code from Ramakrishnan Srinivasan.","59851f03":"\u201cLight and darkness, brightness and obscurity, or if a more general expression is preferred, light and its absence, are necessary to the production of color\u2026 Color itself is a degree of darkness.\u201d This quote is from Johann Wolfgang von Goethe. In 1810 he published Theory of Colors, his treatise on the nature, function and psychology of colors. His theory explores the psychological impact of different colors on mood and emotion.\nhttps:\/\/www.brainpickings.org\/2012\/08\/17\/goethe-theory-of-colours\/","d838b66d":"Another from RamaKrishnan Srinivasan.","ce3660ae":"Blue: Peaceful, flexible and imaginative; they are natural romantics and nurturers. Colors related to blue: Teal, Turquoise","513f538a":"The codes below are from Jorge Avila. PDP=Partial Dependece Plots.","6fa4aba4":"The three inputs below are from Ramakrishnan Srinivasan. I tried to perform an artistical rehearsal with RGB.","506bf628":"Don't expect to see a GOES-16 satellite presentation. It's more a Cyndi Lauper approach. I decided to play with the beautiful colors that are avaiable in Python Graph Gallery. I'm in the playground. I discovered how a programming language can be so colorful. Like another Cyndi song: G just wanna have fun!\n***Acknowledgements: Sagar Mainkar, Fatih Bilgin, RamaKrishnan Srinivasan, Jorge Avila, my team mate Mukesh Gupta @mukeshtipl, and my inseparable Kaggle bot kerneler .https:\/\/www.colorpsychology.org\/","ee1529be":"Every time I received errors I type a # mark to go on. Till I don't known how to fix them.","549cd313":"Code from Ramakrishnan Srinivasan","c7c09c6a":"Pink stands for tenderness, vulnerability and youth. Also check: Salmon","d274dd59":"Purple: It symbolizes power, nobility, luxury, and ambition. Relevant colors: Indigo, Violet, Lavender, Mauve","be6c62a1":"Sorry \/opt\/conda but failure of imagination can kill. Close your eyes and imagine a rainbow full of blessing and good vibes. I leave you with a last \"rainbow\" palette.","e5b7f4ac":"Codes from my Great team mate Mukesh Gupta @mukeshtipl.","4b882169":"Orange: combines the energy of red and the happiness of yellow.","c41047ca":"The same changing palettes.","878ee49a":"Green, color of nature. It symbolizes growth, harmony, freshness, and fertility. Also check: Chartreuse","c778bca3":"Changing palette name."}}