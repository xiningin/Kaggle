{"cell_type":{"cd86846e":"code","30751695":"code","a026726e":"code","1e37d4fa":"code","35eba55b":"code","68581ef2":"code","8229d1b0":"code","7f826a29":"code","b8ba8787":"code","da95668a":"code","04fb8cb2":"code","c06feec2":"code","501af0a0":"code","5355ce1b":"code","77d5100f":"code","57b4d898":"code","158e3a78":"code","ee87917e":"code","58067d1b":"code","0bba6699":"code","b652fb84":"code","363ab262":"code","b57b32fa":"code","82c9d94b":"code","1cbf9982":"code","f8e150bb":"code","472d175b":"code","ea74efd0":"code","58cb6cf7":"code","ce69f2ee":"code","96a100a2":"code","11457cb7":"code","7e8c85d4":"code","de9285c4":"code","961654ac":"code","97ee247c":"code","3e31eb76":"code","971ab968":"markdown","f7f1bdb6":"markdown","663ed38a":"markdown","f8c7963d":"markdown"},"source":{"cd86846e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","30751695":"df=pd.read_csv('\/kaggle\/input\/russia-real-estate-20182021\/all_v2.csv')","a026726e":"df","1e37d4fa":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns","35eba55b":"import datetime","68581ef2":"df['date']=pd.to_datetime(df['date'])","8229d1b0":"df['time']=pd.to_datetime(df['time'],format='%H:%M:%S').dt.time","7f826a29":"df.describe()","b8ba8787":"df.isnull().sum()","da95668a":"df.describe()","04fb8cb2":"df1 = df.sort_values('price', ascending=False)","c06feec2":"df1","501af0a0":"df[df['price']>=20.000000e+06]","5355ce1b":"df[df['price'] <= 0]","77d5100f":"df[df['rooms'] <= 0]","57b4d898":"price=df[df['price'] <= 0].index\ndf.drop(price,inplace=True)","158e3a78":"rooms=df[df['rooms']<= 0].index\ndf.drop(rooms,inplace=True)","ee87917e":"price_high=df[df['price']>=20.000000e+06].index\ndf.drop(price_high,inplace=True)","58067d1b":"df.corr()","0bba6699":"sns.heatmap(df.corr())","b652fb84":"from sklearn.linear_model import Ridge,Lasso,LinearRegression","363ab262":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import KFold","b57b32fa":"x=df.drop(['date', 'time','price'], axis=1)\ny=df['price']","82c9d94b":"x_train,x_test,y_train,y_test=train_test_split(x, y,train_size=0.8,random_state=123)","1cbf9982":"model1=LinearRegression()\nmodel2=Lasso(alpha=1.0)\nmodel3=Ridge(alpha=0.1)","f8e150bb":"scores=[]\nkf=KFold(n_splits=4,shuffle=True,random_state=71)\nfor tr_idx,va_idx in kf.split(x_train):\n    tr_x,va_x=x_train.iloc[tr_idx],x_train.iloc[va_idx]\n    tr_y,va_y=y_train.iloc[tr_idx],y_train.iloc[va_idx]\n    \n    model1.fit(tr_x,tr_y)\n    va_pred1=model1.predict(va_x)\n    score_rmse1=np.sqrt(mean_squared_error(va_y,va_pred1)).mean()\n    score_mae1=mean_absolute_error(va_y,va_pred1).mean()\n    score_r21=r2_score(va_y,va_pred1).mean()\n\nprint('rmse1:',score_rmse1)\nprint('mae1:',score_mae1)\nprint('R21:',score_r21)","472d175b":"scores=[]\nkf=KFold(n_splits=4,shuffle=True,random_state=71)\nfor tr_idx,va_idx in kf.split(x_train):\n    tr_x,va_x=x_train.iloc[tr_idx],x_train.iloc[va_idx]\n    tr_y,va_y=y_train.iloc[tr_idx],y_train.iloc[va_idx]\n    \n    model2.fit(tr_x,tr_y)\n    va_pred2=model2.predict(va_x)\n    score_rmse2=np.sqrt(mean_squared_error(va_y,va_pred2)).mean()\n    score_mae2=mean_absolute_error(va_y,va_pred2).mean()\n    score_r22=r2_score(va_y,va_pred2).mean()\n\nprint('rmse2:',score_rmse2)\nprint('mae2:',score_mae2)\nprint('R22:',score_r22)","ea74efd0":"scores=[]\nkf=KFold(n_splits=4,shuffle=True,random_state=71)\nfor tr_idx,va_idx in kf.split(x_train):\n    tr_x,va_x=x_train.iloc[tr_idx],x_train.iloc[va_idx]\n    tr_y,va_y=y_train.iloc[tr_idx],y_train.iloc[va_idx]\n    \n    model3.fit(tr_x,tr_y)\n    va_pred3=model3.predict(va_x)\n    score_rmse3=np.sqrt(mean_squared_error(va_y,va_pred3)).mean()\n    score_mae3=mean_absolute_error(va_y,va_pred3).mean()\n    score_r23=r2_score(va_y,va_pred3).mean()\n\nprint('rmse3:',score_rmse3)\nprint('mae3:',score_mae3)\nprint('R23:',score_r23)","58cb6cf7":"import lightgbm as lgb","ce69f2ee":"lgb_train = lgb.Dataset(x_train, y_train)\nlgb_eval = lgb.Dataset(x_test, y_test)","96a100a2":"params={'metric': 'rmse'}","11457cb7":"gbm = lgb.train(params,\n                lgb_train,\n                valid_sets=lgb_eval,\n                num_boost_round=5000,\n                early_stopping_rounds=100,\n                verbose_eval=100)","7e8c85d4":"predicted = gbm.predict(x_test)","de9285c4":"def pred_map(pred_df):\n    rmse = np.sqrt(mean_squared_error(pred_df['data'], pred_df['pred']))\n    R2 = r2_score(pred_df['data'], pred_df['pred']) \n    plt.figure(figsize=(8,8))\n    ax = plt.subplot(111)\n    ax.scatter('data', 'pred', data=pred_df)\n    ax.set_xlabel('Data Value', fontsize=15)\n    ax.set_ylabel('Pred Value', fontsize=15)\n    ax.set_xlim(pred_df.min().min()-0.1 , pred_df.max().max()+0.1)\n    ax.set_ylim(pred_df.min().min()-0.1 , pred_df.max().max()+0.1)\n    x = np.linspace(pred_df.min().min()-0.1, pred_df.max().max()+0.1, 2)\n    y = x\n    ax.plot(x,y,'r-')\n    plt.text(0.1, 0.9, 'rmse = {}'.format(str(round(rmse, 5))), transform=ax.transAxes, fontsize=15)\n    plt.text(0.1, 0.8, 'R2 = {}'.format(str(round(R2, 5))), transform=ax.transAxes, fontsize=15)","961654ac":"df_prediction = pd.concat([y_test.reset_index(drop=True), pd.Series(predicted)], axis=1)\ndf_prediction.columns = ['data', 'pred']","97ee247c":"pred_map(df_prediction)","3e31eb76":"lgb.plot_importance(gbm, height=0.5, figsize=(8,16))","971ab968":"LightGBM model","f7f1bdb6":"LR, Lasso and Ridge Prediction model ","663ed38a":"By LGBM without tuning, I can get more accurate model than LR,Lasso and Ridge.\nRMSE=906567\nR2=0.91014","f8c7963d":"Drop the price below 0 and above 20.000000e+06, and rooms below 0\nSometimes, it is very difficult for us to estimate very high price in the mid city because it is evaluateded by any other reasons. So I doropped the price above 20.000000e+06."}}