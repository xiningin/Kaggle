{"cell_type":{"272fb470":"code","177f5b65":"code","65a56af6":"code","5f223053":"code","a651c1e5":"code","e30b1c00":"code","df7c052f":"markdown","964e3c26":"markdown","087c58a5":"markdown","e99ef6c4":"markdown","92c5c747":"markdown"},"source":{"272fb470":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd","177f5b65":"train_ds_ = image_dataset_from_directory(\n    '..\/input\/fruits\/fruits-360\/Training',\n    labels='inferred',\n    label_mode='categorical',\n    image_size=(100,100),\n    interpolation='nearest',\n    shuffle=True,\n    batch_size=512\n)\n\ntest_ds_ = image_dataset_from_directory(\n    '..\/input\/fruits\/fruits-360\/Test',\n    labels='inferred',\n    label_mode='categorical',\n    image_size=(100,100),\n    interpolation='nearest',\n    shuffle=False,\n    batch_size=512\n)\n\n# Pipeline\ndef convert_to_float(image, label):\n    image = image \/ 255\n    return image, label\n\nAUTOTUNE = tf.data.experimental.AUTOTUNE\n\ntrain_ds = (\n    train_ds_\n    .map(convert_to_float)\n    .cache()\n    .prefetch(buffer_size=AUTOTUNE)\n)\n\ntest_ds = (\n    test_ds_\n    .map(convert_to_float)\n    .cache()\n    .prefetch(buffer_size=AUTOTUNE)\n)","65a56af6":"model = keras.Sequential([\n    layers.Conv2D(filters=32, kernel_size=(3,3), strides=(1,1), activation='relu', input_shape=(100,100,3)),\n    layers.MaxPool2D(pool_size=(2,2), strides=(2,2)),\n    layers.Conv2D(filters=64, kernel_size=(3,3), strides=(1,1), activation='relu'),\n    layers.MaxPool2D(pool_size=(2,2), strides=(2,2)),\n    layers.Conv2D(filters=128, kernel_size=(3,3), strides=(1,1), activation='relu'),\n    layers.MaxPool2D(pool_size=(2,2), strides=(2,2)),\n    layers.Conv2D(filters=256, kernel_size=(3,3), strides=(1,1), activation='relu'),\n    layers.MaxPool2D(pool_size=(2,2), strides=(2,2)),\n    layers.Flatten(),\n    layers.Dense(128, activation='relu'),\n    layers.Dense(131, activation='softmax')\n])","5f223053":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","a651c1e5":"early_stopping = EarlyStopping(\n    min_delta=1e-3,\n    patience=5,\n    restore_best_weights=True\n)\n\nhistory = model.fit(\n    train_ds,\n    batch_size=512,\n    validation_data=(test_ds),\n    callbacks=[early_stopping],\n    epochs=500,\n    verbose=1\n)","e30b1c00":"fit_hist = pd.DataFrame(history.history)\n\nloss = round(np.min(fit_hist['loss']), 2)\nval_loss = round(np.min(fit_hist['val_loss']), 2)\nacc = round(np.max(fit_hist['accuracy']), 2)\nval_acc = round(np.max(fit_hist['val_accuracy']), 2)\n\nplt.title(f\"Train Loss ({loss}) and Validation Loss ({val_loss})\")\nplt.plot(fit_hist['loss'], label='Train Loss')\nplt.plot(fit_hist['val_loss'], label='Val Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.grid(color='#e6e6e6')\nplt.legend()\nplt.show()\n\nplt.title(f\"Train Accuracy ({acc}) and Validation Accuracy ({val_acc})\")\nplt.plot(fit_hist['accuracy'], label='Train Acc')\nplt.plot(fit_hist['val_accuracy'], label='Val Acc')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.grid(color='#e6e6e6')\nplt.legend()\nplt.show()","df7c052f":"## Creating Data Pipelines","964e3c26":"## Plotting Train and Validation Accuracy and Loss","087c58a5":"# Fruits 360 - Convolutional Neural Networks Using TensorFlow","e99ef6c4":"## Training the Model","92c5c747":"## Defining the Model"}}