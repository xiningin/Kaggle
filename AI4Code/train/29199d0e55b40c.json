{"cell_type":{"b1f05ee8":"code","06568949":"code","2b015d76":"code","65c7cd3a":"code","3f2d7ca4":"code","d4b1c6ba":"code","5d0f170b":"code","2c794dc0":"code","1db4dc1e":"code","74df265b":"code","1c061c77":"markdown","09286d3a":"markdown","65bd64bd":"markdown","3dab053a":"markdown"},"source":{"b1f05ee8":"import numpy as np \nimport pandas as pd ","06568949":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","2b015d76":"#1. delete unnecessary columns\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\n#2.find null data and fill new data \ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n#3.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","65c7cd3a":"from sklearn import ensemble","3f2d7ca4":"y = train['Survived']\nX = train.drop(['Survived'], axis=1)\nX_test = test\n\ngbm_est = ensemble.GradientBoostingClassifier()\n\ngbm_est.fit(X,y)","d4b1c6ba":"from sklearn.model_selection import cross_val_score,cross_val_predict,cross_validate\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef showModelEvaluation(y_test,predictions):\n    print(\"precision_score1:\",precision_score(y_test, predictions) )\n    print(\"recall_score1:\",recall_score(y_test, predictions))\n    print(\"f1_score1:\",f1_score(y_test, predictions))\n    print(\"roc_auc score\",roc_auc_score(y_test, predictions) )\n    print(\"\")\n    \n    #condusion metrics\n    cm = confusion_matrix(y_test, predictions)\n    score = np.mean([y_test == predictions])\n    #plot\n    sns.heatmap(cm, annot=True, fmt=\".0f\", linewidths=1, square = True,cbar = False);\n    plt.ylabel('Actual label');\n    plt.xlabel('Predicted label');\n    all_sample_title = 'Accuracy Score: {0}'.format(score)\n    plt.title(all_sample_title, size = 15);","5d0f170b":"cross_validate(gbm_est, X, y, cv=3)","2c794dc0":"y_train_pred = cross_val_predict(gbm_est, X, y, cv=3)\nshowModelEvaluation(y,y_train_pred)","1db4dc1e":"pred_test = gbm_est.predict(X_test)","74df265b":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = (pred_test > 0.5).astype(int)\nsubmission.to_csv('sub.csv', index=False)\nsubmission.head()","1c061c77":"# 3.evaluate model","09286d3a":"# 4.predict & submit","65bd64bd":"# 1.load & preprocess","3dab053a":"# 2.make model (training)"}}