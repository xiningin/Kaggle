{"cell_type":{"ef0373f2":"code","3d0e682b":"code","9abb3ab9":"code","5c5307a8":"code","6f3dd7b5":"code","24006415":"code","84073f4b":"code","8701d4cd":"code","bde29223":"code","d9266092":"code","79f15810":"code","10d638ea":"code","07329a93":"code","5024a935":"code","0b10066c":"code","94f780eb":"code","3abe14eb":"code","f266465f":"code","5f38509a":"code","0c537534":"code","7664c548":"code","b1e2b643":"code","c17a8038":"code","3abcb166":"code","b5db9cbf":"code","18012e00":"code","93ff5496":"markdown","234dc4ba":"markdown"},"source":{"ef0373f2":"# Import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","3d0e682b":"# Import dataset\ndf = pd.read_csv('..\/input\/housedata\/data.csv')","9abb3ab9":"# Take the variables that will be used\ndf = df[['price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'yr_built', 'yr_renovated']]\ndf = df.astype(int)","5c5307a8":"# Replace yr_built into yr_renovated if the house was renovated\ndef year_built(df):\n    if df['yr_built'] < df['yr_renovated']:\n        return df['yr_renovated']\n    else:\n        return df['yr_built']\n    \ndf['year_built'] = df.apply(year_built, axis = 1)","6f3dd7b5":"# Drop yr_built and yr_renovated\ndf.drop(columns = ['yr_built', 'yr_renovated'], inplace = True)","24006415":"# Drop the data with price value = 0\ndf.drop(index = df[df['price'] == 0].index, inplace = True)","84073f4b":"# Checking the data\ndf.info()","8701d4cd":"# Shows the basic stat of the data\ndf.describe()","bde29223":"# Looking correlation bettween the variables\nsns.heatmap(df.corr(), annot = True)","d9266092":"# Shows the plot sqft_living vs price\nplt.figure(figsize = (12, 6))\nsns.pairplot(df, x_vars = ['sqft_living'], y_vars = ['price'], size = 7, kind = 'scatter')\nplt.xlabel('Sqft of Living')\nplt.ylabel('Price')\nplt.title('Sqft of living vs price')\nplt.show()","79f15810":"# Remove the outliers data\ndf.drop(index = df[df['price'] > 10000000].index, inplace = True)\ndf.drop(index = df[df['sqft_living'] > 12000].index, inplace = True)","10d638ea":"# sqft_living vs price without outliers data\nplt.figure(figsize = (12, 6))\nsns.pairplot(df, x_vars = ['sqft_living'], y_vars = ['price'], size = 7, kind = 'scatter')\nplt.xlabel('Sqft of Living')\nplt.ylabel('Price')\nplt.title('Sqft of living vs price')\nplt.show()","07329a93":"# Set X and y for before splitting into train test data\nX = df.drop(columns = ['price'])\ny = df['price']\n\n# Import scikit learn\nfrom sklearn.model_selection import train_test_split\n\n# Split the data into train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, random_state = 100) ","5024a935":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nsc.fit(X_train)","0b10066c":"X_train = sc.transform(X_train)\nX_test = sc.transform(X_test)","94f780eb":"# Importing Linear Regression model\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\n\n# Fitting the model\nlr = LinearRegression()\nlr.fit(X_train, y_train)","3abe14eb":"# Predicting the price for the test value\ny_pred = lr.predict(X_test)","f266465f":"# Importing metrics for model evaluation\nfrom sklearn.metrics import r2_score, mean_squared_error","5f38509a":"# Calculate mMean squuare error\nmse = mean_squared_error(y_test, y_pred)","0c537534":"# Calculate R square value\nr2 = r2_score(y_test, y_pred)","7664c548":"print('Mean squared error : ', mse)\nprint('r square : ', r2)","b1e2b643":"# Intercept and coeff of the line\nprint('Intercept of the model : ', lr.intercept_)\nprint('Coefficient of the line : ', lr.coef_)","c17a8038":"from sklearn.ensemble import RandomForestRegressor\n\nrf = RandomForestRegressor(n_estimators=300, n_jobs=10)\nrf.fit(X_train, y_train)","3abcb166":"y_pred = rf.predict(X_test)","b5db9cbf":"mse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\nprint('Mean squared error : ', mse)\nprint('r square : ', r2)","18012e00":"print('Intercept of the model : ', lr.intercept_)\nprint('Coefficient of the line : ', lr.coef_)","93ff5496":"<b>Conclussion<b\/>\n    \nOur house predicting model by using Linear Regression doesn't have a good accuracy, which is only 51,61%. This model should be improved.\n    \nThe equation of the line is as follows :\n    \n<b>y = 3018251.06 + (-6.07524762e+04 X1) + (2.38002469e+04 X2) + (2.98736933e+02 X3) + (-5.94362127e-01 X4) + (-1.47596702e+03 X5)<b\/>\n","234dc4ba":"# House Pricing Analysis with Simple Linear Regression"}}