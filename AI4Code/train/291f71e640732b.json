{"cell_type":{"04eefc5d":"code","5636665f":"code","c1e30212":"code","adaf06c4":"code","28df04ba":"code","319f205f":"code","cadc0f54":"code","baacad3a":"code","33e2866c":"code","bf79c9f0":"code","03386d05":"code","71aa5d6a":"code","30255da5":"code","7c500b1c":"code","40153bfb":"code","826d93aa":"code","cfd5a4c4":"code","defaf983":"code","c3a86d74":"code","97e6aa8a":"code","c2c45c35":"code","23f9955f":"code","5a997adf":"code","f0724c7c":"code","f7330d9a":"code","608344bd":"code","dd02d565":"code","e508c8cb":"code","c5104df1":"code","a27b854d":"code","dd292150":"code","4f95c1c8":"code","fd41f8a8":"code","369d1bed":"code","fcac178d":"code","9af8765f":"code","2e108cbc":"code","2531d680":"code","37899633":"code","e80cb8d3":"code","3068ddb7":"code","e2d2c792":"code","d367576a":"code","2d218756":"code","5f588283":"code","e98245d8":"code","94e61a85":"code","ee9db9d5":"code","89fee52a":"code","9977af74":"code","f4ae46dc":"code","50061a60":"code","a567aeb7":"code","000fb54a":"code","1834aed3":"code","add85a05":"code","1eb5464a":"code","9b950119":"markdown","c1e1c27c":"markdown","8e82b0b8":"markdown","7029fbac":"markdown","7f150b92":"markdown","3a938af1":"markdown","8e727db2":"markdown","fabd24f2":"markdown","e879341b":"markdown","7d320951":"markdown","5b1eb76c":"markdown","8d4b829e":"markdown","61b5c5b3":"markdown","d2c56815":"markdown","1c64953b":"markdown","9cc98f30":"markdown","a6dca951":"markdown","4952d7a0":"markdown","cb5e62b5":"markdown","d9988b96":"markdown","89b269d3":"markdown","f7d5373b":"markdown","b14064d6":"markdown","9a1bdc1f":"markdown","6b656dda":"markdown","785b4a03":"markdown","e9766872":"markdown","d83240e7":"markdown","f4a3ec80":"markdown","86568245":"markdown","de0c2f46":"markdown"},"source":{"04eefc5d":"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\nimport random\nimport pandas as pd\nimport scipy.stats as stat\nfrom collections import Counter\nfrom scipy.stats import t\nfrom scipy.stats import norm\n\nimport os\n\npath = os.environ['PATH']\n\nif path.startswith('C'):\n    IN_KAGGLE = False\nelse:\n    IN_KAGGLE = True","5636665f":"# Para uso com fun\u00e7\u00f5es da biblioteca standard (ex random.randint)\nrandom.seed(1)\n# Para uso com fun\u00e7\u00f5es da biblioteca numpy (ex np.random.randint)\nnp.random.seed(1)\n\n# Quando for passada como par\u00e2metro a seed\nrandom_state = 1","c1e30212":"# Calcula n\u00famero de desvios na distribui\u00e7\u00e3o t de student para determinada confianca\n\n\ndef calcula_Z_tstudent(confianca, tamanho_amostra):\n    mean = 0\n    std = 1\n    rv = t(df=(tamanho_amostra-1))\n    return rv.interval(confianca)[1]","adaf06c4":"# Calcula n\u00famero de desvios na distribui\u00e7\u00e3o normal para determinada confianca\n\n\ndef calcula_Z_normal(confianca):\n    mean = 0\n    std = 1\n    rv = norm(loc=mean, scale=std)\n    return rv.interval(confianca)[1]","28df04ba":"# Calcula n\u00famero de desvios na distribui\u00e7\u00e3o normal para determinada confianca e m\u00faltiplas propor\u00e7\u00f5es\n\ndef calcula_Z_Multiplas_Proporcoes(confianca, numero_proporcoes):\n    area = math.pow(  confianca, 1\/(numero_proporcoes-1) )\n    return calcula_Z_normal(area)\n\n","319f205f":"# Recupera amostra da popula\u00e7\u00e3o\n\ndef recupera_amostra(populacao, tamanho_amostra):\n    tamanho_amostra = int(tamanho_amostra)\n    if type(populacao) is pd.DataFrame:\n        return populacao.sample(tamanho_amostra)\n    else:\n        #return populacao[np.random.randint(0, len(populacao), tamanho_amostra)]\n        return [populacao[i] for i in np.random.randint(0, len(populacao), tamanho_amostra)]","cadc0f54":"# Fun\u00e7\u00e3o que calcula intervalo de confian\u00e7a para m\u00e9dia com base em uma amostra e a confian\u00e7a desejada\n\ndef calcula_intervalo_media(amostra, confianca, tamanho_populacao):\n    tamanho_amostra = len(amostra)\n    \n    #1-Calcule a m\u00e9dia da amostra ex. media_amostra = np.mean(amostra)\n    media_amostra = np.mean(amostra)\n\n    #2-Calcule o desvio da amostra ex. desvio_amostra = np.std(amostra)\n    desvio_amostra = np.std(amostra)\n\n    #3-Calcule quantos desvios precisar\u00e1 para seu grau de confi\u00e2n\u00e7a ex. numero_desvios = calcula_numero_desvios_tstudent_para_confianca(confian\u00e7a, tamanho_amostra)\n    numero_desvios = calcula_Z_tstudent(confianca, tamanho_amostra)\n\n    #4-Calcule o desvio das amostras ex. desvio_amostras = desvio_amostra\/np.sqrt(tamanho_amostra)\n    desvio_amostras = desvio_amostra\/np.sqrt(tamanho_amostra)\n\n    #5-Calcule a margem de erro ex. margem_erro = numero_desvios*desvio_amostras\n    margem_erro = numero_desvios*desvio_amostras\n    \n    if tamanho_amostra>0.05*tamanho_populacao:\n        margem_erro = margem_erro * (np.sqrt(tamanho_populacao-tamanho_amostra)\/np.sqrt(tamanho_populacao-1))\n\n    #6-Calcule o intervalo ex. inferior = media_amostra-margem_erro, superior = media_amostra+margem_erro\n    inferior = media_amostra-margem_erro\n    superior = media_amostra+margem_erro\n\n    return inferior,superior","baacad3a":"# Fun\u00e7\u00e3o que calcula intervalo de confian\u00e7a para propor\u00e7\u00e3o de determinado valor com base em uma amostra e a confian\u00e7a desejada\n# O par\u00e2metro valor representa a categoria na amostra para a qual se deseja o intervalo de confian\u00e7a da propor\u00e7\u00e3o, por exemplo o nome de um candidato\n\ndef calcula_intervalo_proporcao(amostra, confianca, valor, tamanho_populacao):\n    tamanho_amostra = len(amostra)\n    \n    proporcao_valor = Counter(amostra)[valor]\/tamanho_amostra\n    \n    numero_desvios = calcula_Z_tstudent(confianca, tamanho_amostra)\n\n    margem_erro = numero_desvios*np.sqrt(proporcao_valor*(1-proporcao_valor))\/np.sqrt(tamanho_amostra)\n    \n    if tamanho_amostra>0.05*tamanho_populacao:\n        margem_erro = margem_erro * (np.sqrt(tamanho_populacao-tamanho_amostra)\/np.sqrt(tamanho_populacao-1))\n\n    inferior = proporcao_valor-margem_erro\n    superior = proporcao_valor+margem_erro\n\n    return inferior,superior","33e2866c":"# Fun\u00e7\u00e3o para c\u00e1lculo do n\u00famero de amostras para m\u00e9dias e somas\n\ndef Tamanho_Amostra_Valor_Pontual(Tamanho_Populacao, Numero_Desvios, Variancia, Margem_Erro):\n    return math.ceil( \n            (Tamanho_Populacao * math.pow(Numero_Desvios,2) * Variancia) \/ \\\n            ( (Tamanho_Populacao-1)*math.pow(Margem_Erro,2) + math.pow(Numero_Desvios,2)*Variancia )\n            )","bf79c9f0":"# Fun\u00e7\u00e3o para c\u00e1lculo do n\u00famero de amostras para propor\u00e7\u00f5es simples\n\ndef Tamanho_Amostra_Proporcao_Simples(Tamanho_Populacao, Numero_Desvios, Proporcao, Margem_Erro):\n    return math.ceil( \n            (Tamanho_Populacao * math.pow(Numero_Desvios,2) * Proporcao * (1-Proporcao)) \/ \\\n            ( (Tamanho_Populacao-1)*math.pow(Margem_Erro,2) + math.pow(Numero_Desvios,2)*Proporcao*(1-Proporcao) )\n            )","03386d05":"# Fun\u00e7\u00e3o para c\u00e1lculo do tamanho da amostra para propor\u00e7\u00f5es m\u00faltiplas\n\ndef Tamanho_Amostra_Proporcao_Multipla(Tamanho_Populacao, Confianca, Numero_Proporcoes, Margem_Erro):\n    Confianca_ = calcula_Z_Multiplas_Proporcoes(Confianca, Numero_Proporcoes)\n    return math.ceil( \n            (Tamanho_Populacao * math.pow(Confianca_,2) * 0.25 ) \/ \\\n            ( (Tamanho_Populacao-1)*math.pow(Margem_Erro,2) + math.pow(Confianca_,2)*0.25 )\n            )","71aa5d6a":"Tamanho_Populacao = 2057\nTamanho_Populacao_Clinicas_Publicas = 909\nTamanho_Populacao_Clinicas_Privadas = 1148","30255da5":"# Cria estrutura vazia para guadar dados da popula\u00e7\u00e3o\npopulacao = pd.DataFrame( columns=['Area','Procurou_Outra_Clinica','Dias_Ate_Atendimento','Satisfacao'])","7c500b1c":"#Distribui pacientes em cl\u00ednicas p\u00fablicas e privadas\npopulacao.Area = ['Publico']*909 + ['Privado']*1148\npopulacao.head()","40153bfb":"populacao['Area'].value_counts().plot(kind='bar')\nplt.xlabel('Area')\nplt.ylabel('Quantidade')\n\nplt.title('Area')\nplt.grid(True)\nplt.show()","826d93aa":"# 218 pacientes da p\u00fablica procuraram outra cl\u00ednica (24%), 300 da privada procuraram (26,1%)\npopulacao.Procurou_Outra_Clinica = ['S']*218 + ['N']*691 + ['S']*300 + ['N']*848\npopulacao.head()","cfd5a4c4":"populacao['Procurou_Outra_Clinica'].value_counts().plot(kind='bar')\nplt.xlabel('InteProcurou_Outra_Clinicaresse')\nplt.ylabel('Quantidade')\n\nplt.title('Procurou_Outra_Clinica')\nplt.grid(True)\nplt.show()\n\nprint(sum(populacao.Procurou_Outra_Clinica == 'S')\/Tamanho_Populacao)","defaf983":"# Dias para atendimento m\u00e9dia 71 p\u00fablica, 53 na privada, desvio 22.5 ambas\nrv_pub = norm(loc=71, scale=18.73)\nrv_pri = norm(loc=53, scale=14.69)\npopulacao.Dias_Ate_Atendimento =  list(rv_pub.rvs(size=909)) + list(rv_pri.rvs(size=1148))\npopulacao.Dias_Ate_Atendimento = populacao.Dias_Ate_Atendimento.astype('int')\npopulacao.loc[populacao.Dias_Ate_Atendimento <1,['Dias_Ate_Atendimento']] = 1\npopulacao.head()","c3a86d74":"n, bins, patches = plt.hist(populacao.Dias_Ate_Atendimento,  facecolor='g', alpha=0.75, bins=50)\nplt.xlabel('Dias_Ate_Atendimento')\nplt.ylabel('Quantidade')\n\nplt.title('Dias_Ate_Atendimento')\nplt.grid(True)\nplt.show()\n\nprint(populacao.Dias_Ate_Atendimento.mean())","97e6aa8a":"# Grau de satisfa\u00e7\u00e3o arbitrado\npopulacao.Satisfacao = random.choices(population=['I','R','S'], weights=[0.2,0.5,0.3], k=2057)\npopulacao.head()","c2c45c35":"populacao['Satisfacao'].value_counts().plot(kind='bar')\nplt.xlabel('Satisfacao')\nplt.ylabel('Quantidade')\n\nplt.title('Satisfacao')\nplt.grid(True)\nplt.show()\n\nprint(sum(populacao.Satisfacao == 'I')\/Tamanho_Populacao)","23f9955f":"from sklearn.utils import shuffle\npopulacao = shuffle(populacao)\npopulacao.head()","5a997adf":"Populacao_Clinicas_Publicas = populacao.loc[populacao.Area == 'Publico',:]\nTamanho_Populacao_Clinicas_Publicas = len(Populacao_Clinicas_Publicas)\nPopulacao_Clinicas_Privadas = populacao.loc[populacao.Area == 'Privado',:]\nTamanho_Populacao_Clinicas_Privadas = len(Populacao_Clinicas_Privadas)","f0724c7c":"# Defini\u00e7\u00f5es gerais\nMargem_Erro_Dias = 3\nMargem_Erro_ProcurouOutraClinica = 0.05\nMargem_Erro_Satisfacao = 0.05\n    \nGrau_Confianca = 0.95","f7330d9a":"# Defini\u00e7\u00f5es espec\u00edficas (quando j\u00e1 se conhece a popula\u00e7\u00e3o)\nVariancia_Dias_Estimada = 506\nProporcao_Procurou_Outra_Clinica_Amostra = 0.3\n","608344bd":"# Defini\u00e7\u00f5es espec\u00edficas (quando faz amostra piloto)\nTamanho_Amostra = 30\namostra = recupera_amostra(populacao, Tamanho_Amostra)\nVariancia_Dias_Estimada = amostra.Dias_Ate_Atendimento.var()\nProporcao_Procurou_Outra_Clinica_Amostra = sum(amostra.Procurou_Outra_Clinica == 'S')\/Tamanho_Amostra\nprint('Amostra {}, vari\u00e2ncia dias {}, propor\u00e7\u00e3o procurou outra cl\u00ednica {}'.format(\n                                                            Tamanho_Amostra,\n                                                            Variancia_Dias_Estimada,\n                                                            Proporcao_Procurou_Outra_Clinica_Amostra))","dd02d565":"z = calcula_Z_normal(Grau_Confianca)\n\nTamanho_Amostra_Dias = Tamanho_Amostra_Valor_Pontual(\n    Tamanho_Populacao,\n    z,\n    Variancia_Dias_Estimada,\n    Margem_Erro_Dias)\n\nTamanho_Amostra_Dias","e508c8cb":"z = calcula_Z_normal(Grau_Confianca)\n\nTamanho_Amostra_Procurou_Outra_Clinica = Tamanho_Amostra_Proporcao_Simples(\n    Tamanho_Populacao,\n    z,\n    Proporcao_Procurou_Outra_Clinica_Amostra,\n    Margem_Erro_ProcurouOutraClinica\n)\n\nTamanho_Amostra_Procurou_Outra_Clinica","c5104df1":"Tamanho_Amostra_Satisfacao = Tamanho_Amostra_Proporcao_Multipla(\n    Tamanho_Populacao,\n    Grau_Confianca,\n    3,\n    Margem_Erro_Satisfacao\n)\n\nTamanho_Amostra_Satisfacao","a27b854d":"print('Tamanho_Amostra_Dias {}, Tamanho_Amostra_Procurou_Outra_Clinica {}, Tamanho_Amostra_Satisfacao {}'.format(\n    Tamanho_Amostra_Dias, \n    Tamanho_Amostra_Procurou_Outra_Clinica, \n    Tamanho_Amostra_Satisfacao))","dd292150":"amostraDias = recupera_amostra(populacao, Tamanho_Amostra_Dias)\namostraDias = amostraDias.Dias_Ate_Atendimento","4f95c1c8":"amostraDias.var()","fd41f8a8":"confianca = 0.95\n\ninferior,superior = calcula_intervalo_media(amostraDias, confianca, Tamanho_Populacao)\nprint('Intervalo da m\u00e9dia {} {}'.format(inferior,superior))","369d1bed":"print('Margem de erro {}'.format((superior-inferior)\/2))","fcac178d":"amostraProcurouOutraClinica = recupera_amostra(populacao, Tamanho_Amostra_Procurou_Outra_Clinica)\namostraProcurouOutraClinica = amostraProcurouOutraClinica.Procurou_Outra_Clinica","9af8765f":"confianca = 0.95\n\ninferior,superior = calcula_intervalo_proporcao(amostraProcurouOutraClinica, confianca, 'S', Tamanho_Populacao)\nprint('Intervalo da m\u00e9dia {} {}'.format(inferior,superior))","2e108cbc":"print('Margem de erro {}'.format((superior-inferior)\/2))","2531d680":"amostraSatisfacao = recupera_amostra(populacao, Tamanho_Amostra_Satisfacao)\namostraSatisfacao = amostraSatisfacao.Satisfacao","37899633":"confianca = 0.95\n\ninferior,superior = calcula_intervalo_proporcao(amostraSatisfacao, confianca, 'I', Tamanho_Populacao)\nprint('Intervalo da m\u00e9dia {} {}'.format(inferior,superior))","e80cb8d3":"print('Margem de erro {}'.format((superior-inferior)\/2))","3068ddb7":"proporcao_publico = Tamanho_Populacao_Clinicas_Publicas\/Tamanho_Populacao\n\nproporcao_privado = Tamanho_Populacao_Clinicas_Privadas\/Tamanho_Populacao","e2d2c792":"amostraDiasPublico = recupera_amostra(Populacao_Clinicas_Publicas, proporcao_publico*Tamanho_Amostra_Dias)\namostraDiasPrivado = recupera_amostra(Populacao_Clinicas_Privadas, proporcao_privado*Tamanho_Amostra_Dias)","d367576a":"amostraDias = pd.concat([amostraDiasPublico,amostraDiasPrivado]).Dias_Ate_Atendimento\nlen(amostraDias)","2d218756":"confianca = 0.95\n\ninferior,superior = calcula_intervalo_media(amostraDias, confianca, Tamanho_Populacao)\nprint('Intervalo da m\u00e9dia {} {}'.format(inferior,superior))","5f588283":"print('Margem de erro {}'.format((superior-inferior)\/2))","e98245d8":"eleitoresRegiao = [21389000,63887000,11555000,39230000,10595000]\npopulacao = pd.DataFrame( columns=['Regiao','Voto'])\n\n\npopulacao.Voto = \\\n['B']*int(0.57*eleitoresRegiao[0]) + ['H']*int(0.20*eleitoresRegiao[0]) + ['C']*int(0.09*eleitoresRegiao[0]) +\\\n['B']*int(0.53*eleitoresRegiao[1]) + ['H']*int(0.19*eleitoresRegiao[1]) + ['C']*int(0.12*eleitoresRegiao[1]) +\\\n['B']*int(0.43*eleitoresRegiao[2]) + ['H']*int(0.37*eleitoresRegiao[2]) + ['C']*int(0.09*eleitoresRegiao[2]) +\\\n['B']*int(0.26*eleitoresRegiao[3]) + ['H']*int(0.51*eleitoresRegiao[3]) + ['C']*int(0.17*eleitoresRegiao[3]) +\\\n['B']*int(0.58*eleitoresRegiao[4]) + ['H']*int(0.21*eleitoresRegiao[4]) + ['C']*int(0.10*eleitoresRegiao[4]) \n\npopulacao.Regiao = ['Sul']*(int(0.57*eleitoresRegiao[0]) + int(0.20*eleitoresRegiao[0]) + int(0.09*eleitoresRegiao[0])) + \\\n['Sudeste']*(int(0.53*eleitoresRegiao[1]) + int(0.19*eleitoresRegiao[1]) + int(0.12*eleitoresRegiao[1])) + \\\n['Norte']*(int(0.43*eleitoresRegiao[2]) + int(0.37*eleitoresRegiao[2]) + int(0.09*eleitoresRegiao[2])) + \\\n['Nordeste']*(int(0.26*eleitoresRegiao[3]) + int(0.51*eleitoresRegiao[3]) + int(0.17*eleitoresRegiao[3])) + \\\n['CentroOeste']*(int(0.58*eleitoresRegiao[4]) + int(0.21*eleitoresRegiao[4]) + int(0.10*eleitoresRegiao[4])) ","94e61a85":"TamanhoPopulacao = len(populacao)\n","ee9db9d5":"populacao = shuffle(populacao)\npopulacao.head()","89fee52a":"populacao['Regiao'].value_counts().plot(kind='bar')\nplt.xlabel('Regiao')\nplt.ylabel('Quantidade')\n\nplt.title('Regiao')\nplt.grid(True)\nplt.show()\n\n","9977af74":"populacao['Regiao'].value_counts()\/TamanhoPopulacao","f4ae46dc":"populacao['Voto'].value_counts().plot(kind='bar')\nplt.xlabel('Voto')\nplt.ylabel('Quantidade')\n\nplt.title('Voto')\nplt.grid(True)\nplt.show()","50061a60":"populacao['Voto'].value_counts()\/TamanhoPopulacao","a567aeb7":"Grau_Confianca = 0.95\nMargem_Erro = 0.02\n\n#Criar amostra piloto\nTamanho_Amostra = 30\namostra = recupera_amostra(populacao, Tamanho_Amostra)\n\n\n#Tamanho_Amostra\n\nTamanho_Amostra_Candidato = Tamanho_Amostra_Proporcao_Multipla(\n    TamanhoPopulacao,\n    Grau_Confianca,\n    3,\n    Margem_Erro\n)\n\nTamanho_Amostra_Candidato\n\n","000fb54a":"#amostra = \n#Criar amostra piloto\nAmostra_Candidato = recupera_amostra(populacao, Tamanho_Amostra_Candidato)\nAmostra_Candidato.head()\n\n#amostra = amostra.Voto\n","1834aed3":"#inferior,superior = \namostravoto = Amostra_Candidato.Voto\n\ninferior,superior = calcula_intervalo_proporcao(amostravoto, Grau_Confianca, 'B', TamanhoPopulacao)\n#inferior = int(inferior*TamanhoPopulacao)\n#superior = int(superior*TamanhoPopulacao)\n#print('Intervalo da m\u00e9dia {} {}'.format(inferior,superior))\n\nprint('Intervalo de confian\u00e7a B {} {}'.format(inferior,superior))\n \nprint('Margem de erro {}'.format((superior-inferior)\/2))","add85a05":"inferior,superior = calcula_intervalo_proporcao(amostravoto, Grau_Confianca, 'H', TamanhoPopulacao)\n#inferior = int(inferior*TamanhoPopulacao)\n#superior = int(superior*TamanhoPopulacao)\n#print('Intervalo da m\u00e9dia {} {}'.format(inferior,superior))\n\nprint('Intervalo de confian\u00e7a H {} {}'.format(inferior,superior))\n \nprint('Margem de erro {}'.format((superior-inferior)\/2))\n\n\n\n\n","1eb5464a":"\ninferior,superior = calcula_intervalo_proporcao(amostravoto, Grau_Confianca, 'C', TamanhoPopulacao)\n#inferior = int(inferior*TamanhoPopulacao)\n#superior = int(superior*TamanhoPopulacao)\n#print('Intervalo da m\u00e9dia {} {}'.format(inferior,superior))\n\nprint('Intervalo de confian\u00e7a C {} {}'.format(inferior,superior))\n \nprint('Margem de erro {}'.format((superior-inferior)\/2))","9b950119":"## Calcule o intervalo de confi\u00e2n\u00e7a para o candidato 'C'","c1e1c27c":"# Se tiver informa\u00e7\u00f5es sobre a popula\u00e7\u00e3o, estima vari\u00e2ncia e propor\u00e7\u00f5es","8e82b0b8":"<font size=\"6\" color=\"red\">Fazendo amostra estratificada<\/font>","7029fbac":"# Dias at\u00e9 atendimento","7f150b92":"# Calcula tamanho da amostra para satisfa\u00e7\u00e3o","3a938af1":"# Define margem de erro e grau de confian\u00e7a","8e727db2":"# Satisfa\u00e7\u00e3o com atendimento","fabd24f2":"# Divide entre cl\u00ednicas p\u00fablicas e privadas","e879341b":"<font size=\"6\" color=\"red\">Infer\u00eancia dos par\u00e2metros populacionais com base numa amostra<\/font>","7d320951":"<font size=\"6\" color=\"red\">Amostra piloto<\/font>","5b1eb76c":"# Embaralha registros","8d4b829e":"## Recupere uma amostra com o tamanho acima","61b5c5b3":"## C\u00e1lculo intervalo de confian\u00e7a para dias","d2c56815":"## C\u00e1lculo intervalo de confian\u00e7a para satisfa\u00e7\u00e3o","1c64953b":"# Calcula tamanho amostra para procurou outra cl\u00ednica","9cc98f30":"# C\u00e1lcula tamanho amostra para Dias","a6dca951":"## Fun\u00e7\u00f5es gerais usadas nos exemplos","4952d7a0":"<font size=\"10\" color=\"black\">Amostragem<\/font>\n\nEduardo Chaves Ferreira","cb5e62b5":"# Procurou outra cl\u00ednica?","d9988b96":"## Calcule o intervalo de confi\u00e2n\u00e7a para o candidato 'B'","89b269d3":"## C\u00e1lculo intervalo de confian\u00e7a para procurou outra cl\u00ednica","f7d5373b":"## Mantendo a reprodutibilidade dos resultados\n\nAntes da gera\u00e7\u00e3o de n\u00fameros aleat\u00f3rios \u00e9 importante inicializar o gerador de n\u00fameros para que os resultados sejam os mesmos","b14064d6":"# Cria\u00e7\u00e3o da popula\u00e7\u00e3o de eleitores simulada\n\nEleitores divididos em cinco regi\u00f5es.\n\nTr\u00eas candidatos concorrendo.","9a1bdc1f":"## Calcule o intervalo de confi\u00e2n\u00e7a para o candidato 'H'","6b656dda":"## Defina o tamanho da amostra","785b4a03":"# Se n\u00e3o tiver informa\u00e7\u00f5es sobre a popula\u00e7\u00e3o, estima vari\u00e2ncia e propor\u00e7\u00f5es em amostra piloto (m\u00ednimo 30 elementos)","e9766872":"<font size=\"6\" color=\"red\">Gera\u00e7\u00e3o de dados simulando toda a popula\u00e7\u00e3o<\/font>","d83240e7":"# Separa a popula\u00e7\u00e3o em duas sub popula\u00e7\u00f5es: atendidos por cl\u00ednicas p\u00fablicas e privadas","f4a3ec80":"# Resumo","86568245":"<font size=\"6\" color=\"red\">Exercicio 4 - AvaliacaoPoliticasPublicas<\/font>\n\nhttps:\/\/www.bbc.com\/portuguese\/brasil-45780864","de0c2f46":"## Importa\u00e7\u00e3o de bibliotecas usadas nos exemplos"}}