{"cell_type":{"216e5975":"code","0b0d925a":"code","860ee61b":"code","31212ffc":"code","4e711f50":"code","fc064b12":"code","a9c9b332":"code","d4e75319":"code","2492ecb8":"code","956ecc5e":"code","9c2db754":"code","3e4456a8":"code","072e0501":"code","040a410a":"code","af505991":"code","ecebeea8":"code","44b2e51f":"code","6e1bb536":"code","7080b52d":"code","27e5e841":"code","cb95f84c":"code","f450caa5":"code","6d92eb8a":"code","2e7d8ec2":"markdown","611cfe5c":"markdown","c6f70234":"markdown","571f2bf0":"markdown","bb724f50":"markdown","ddaba6ca":"markdown","9ee9ceee":"markdown","1a2464fa":"markdown"},"source":{"216e5975":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","0b0d925a":"#read data\nmedian_house_hold_in_come = pd.read_csv('..\/input\/MedianHouseholdIncome2015.csv', encoding=\"windows-1252\")\npercentage_people_below_poverty_level = pd.read_csv('..\/input\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\npercent_over_25_completed_highSchool = pd.read_csv('..\/input\/PercentOver25CompletedHighSchool.csv',encoding= \"windows-1252\")\nshare_race_city =pd.read_csv('..\/input\/ShareRaceByCity.csv',encoding=\"windows-1252\")\n\n\n","860ee61b":"percentage_people_below_poverty_level.head()","31212ffc":"percentage_people_below_poverty_level.info()","4e711f50":"#percentage_people_below_poverty_level.poverty_rate.value_counts()\npercentage_people_below_poverty_level.poverty_rate.replace(['-'], 0.0, inplace=True)","fc064b12":"#percentage_people_below_poverty_level.poverty_rate.value_counts()","a9c9b332":"# Poverty rate of each state\npercentage_people_below_poverty_level.poverty_rate.replace(['-'], 0.0, inplace=True)\npercentage_people_below_poverty_level.poverty_rate = percentage_people_below_poverty_level.poverty_rate.astype(float)\narea_list = list(percentage_people_below_poverty_level['Geographic Area'].unique())\narea_poverty_ratio = []\nvarea_poverty_ratio = []\nfor i in area_list:\n    x = percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area']==i]\n    area_poverty_rate = sum(x.poverty_rate)\/len(x)\n    area_poverty_ratio.append(area_poverty_rate)\ndata = pd.DataFrame({'area_list': area_list,'area_poverty_ratio':area_poverty_ratio})\nnew_index = (data['area_poverty_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data.reindex(new_index)\n# visualization\n# barplot\nplt.figure(figsize=(15,16))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_poverty_ratio'])\nplt.xlabel(\"State\")\nplt.ylabel(\"Poverty rate\")\nplt.title(\"Poverty Rate Given States\")\nplt.xticks(rotation= 60)\n\n\n\n","d4e75319":"area_poverty_rate = sum(x.poverty_rate)\/len(x)\narea_poverty_rate","2492ecb8":"#. High school graduation rate of the population that is older than 25 in states\n\npercent_over_25_completed_highSchool.head()\n","956ecc5e":"percent_over_25_completed_highSchool.info()","9c2db754":"#percent_over_25_completed_highSchool.percent_completed_hs.value_counts()","3e4456a8":"percent_over_25_completed_highSchool.percent_completed_hs.replace(['-'],0.0,inplace = True)\npercent_over_25_completed_highSchool.percent_completed_hs = percent_over_25_completed_highSchool.percent_completed_hs.astype(float)\narea_list = list(percent_over_25_completed_highSchool['Geographic Area'].unique())\narea_highschool = []\nfor i in area_list:\n    x = percent_over_25_completed_highSchool[percent_over_25_completed_highSchool['Geographic Area']==i]\n    area_highschool_rate = sum(x.percent_completed_hs)\/len(x)\n    area_highschool.append(area_highschool_rate)\n# sorting\ndata = pd.DataFrame({'area_list': area_list,'area_highschool_ratio':area_highschool})\nnew_index = (data['area_highschool_ratio'].sort_values(ascending=True)).index.values\nsorted_data2 = data.reindex(new_index)\n\n# visualization\nplt.figure(figsize =(15,10))\nsns.barplot(x = sorted_data2['area_list'], y = sorted_data2['area_highschool_ratio'])\nplt.xticks(rotation= 90)\nplt.xlabel(\"States\")\nplt.ylabel(\"High School Graduate Rate\")\nplt.title(\"Percentage of Given State's Population Above 25 that Has Graduated High School\")\n","072e0501":"sorted_data.head()","040a410a":"# high school graduation rate vs Poverty rate of each state\nsorted_data2[\"area_highschool_ratio\"] =sorted_data2[\"area_highschool_ratio\"]\/max(sorted_data2[\"area_highschool_ratio\"])\nsorted_data[\"area_poverty_ratio\"] =sorted_data[\"area_poverty_ratio\"]\/max(sorted_data[\"area_poverty_ratio\"])\n\ndata =pd.concat([sorted_data,sorted_data2[\"area_highschool_ratio\"]], axis = 1)\ndata.sort_values(\"area_poverty_ratio\", inplace= True)\n\nf,ax1 =plt.subplots(figsize = (20,10))\nsns.pointplot(x = \"area_list\" , y = \"area_poverty_ratio\", data = data, color = \"lime\",alpha= 0.8)\nsns.pointplot(x = \"area_list\" , y = \"area_highschool_ratio\", data = data, color = \"red\",alpha= 0.8)\nplt.text(40,0.6 ,\"high school graduate ratio\", fontsize=17,color = \"red\",style =\"italic\")\nplt.text(40,0.55,\"poverty ratio\",fontsize = 17, color =\"lime\",style=\"italic\")\n\nplt.xlabel(\"States\", fontsize =15,color =\"blue\")\nplt.ylabel(\"Value\", fontsize =15,color =\"blue\")\nplt.title(\"High School Graduate  VS  Poverty Rate\",fontsize =15,color =\"blue\")\nplt.grid()\n\n","af505991":"# jointplot \n#high school graduation rate vs Poverty rate of\ng = sns.jointplot(data.area_poverty_ratio, data.area_highschool_ratio, kind =\"kde\", size=7)\nplt.savefig(\"graph.png\")\nplt.show()\n\n","ecebeea8":"g=sns.jointplot(x =\"area_poverty_ratio\", y=\"area_highschool_ratio\",data =data,ratio=3, size =6, color =\"r\")","44b2e51f":" sns.lmplot( x =\"area_poverty_ratio\", y =\"area_highschool_ratio\",data =data)\nplt.show()","6e1bb536":"data.head()","7080b52d":"sns.kdeplot(data.area_poverty_ratio,data.area_highschool_ratio,shade=True,cut =6)\nplt.show()","27e5e841":"pal = sns.cubehelix_palette(2, rot=-.5,dark=.6)\nsns.violinplot(data=data,palette=pal,inner=\"points\")\nplt.show()","cb95f84c":"f, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(data.corr(), annot =True, linewidths=0.5,linecolor=\"green\",fmt=\".2f\",ax=ax)\nplt.show()","f450caa5":"data.head()","6d92eb8a":"sns.pairplot(data)\nplt.show()","2e7d8ec2":"**pair plot**","611cfe5c":"**violin plot**","c6f70234":"**jointplot**","571f2bf0":"**Kde plot**","bb724f50":"**heatmap**","ddaba6ca":"**Lm plot**","9ee9ceee":"#  Poverty rate of each state\n\n","1a2464fa":"# INTRODUCTION\n1. Read datas\n1. Poverty rate of each state\n1. Most common 15 Name or Surname of killed people\n1. High school graduation rate of the population that is older than 25 in states\n1. Percentage of state's population according to races that are black,white,native american, asian and hispanic\n1. High school graduation rate vs Poverty rate of each state\n1. Kill properties\n    * Manner of death\n    * Kill weapon\n    * Age of killed people\n    * Race of killed people\n    * Most dangerous cities\n    * Most dangerous states\n    * Having mental ilness or not for killed people\n    * Threat types\n    * Flee types\n    * Having body cameras or not for police\n1. Race rates according to states in kill data \n1. Kill numbers from states in kill data\n1. Plotly Visualization Tutorial: https:\/\/www.kaggle.com\/kanncaa1\/plotly-tutorial-for-beginners\n<br>\n<br>\nPlot Contents:\n* [Bar Plot](#1)\n* [Point Plot](#2)\n* [Joint Plot](#3)\n* [Pie Chart](#4)\n* [Lm Plot](#5)\n* [Kde Plot](#6)\n* [Violin Plot](#7)\n* [Heatmap](#8)\n* [Box Plot](#9)\n* [Swarm Plot](#10)\n* [Pair Plot](#11)\n* [Count Plot](#12)\n    \n"}}