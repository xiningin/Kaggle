{"cell_type":{"9db3908f":"code","c600c785":"code","13436efc":"code","306c2f6e":"code","574be055":"code","d08c1d64":"code","4c5ddb61":"code","714dc117":"code","908f8e6e":"code","dec514de":"code","ab779222":"code","8c475e9b":"code","91d17670":"code","5c134cce":"code","5a239828":"code","f56f6e67":"code","91d4548e":"code","46612222":"code","fc6ce1db":"code","e3db869c":"code","05febb4f":"code","0c3ff5f4":"code","3f2a2164":"markdown","2dc31b7a":"markdown","01f8388d":"markdown","057409ab":"markdown","ed1af1ca":"markdown","33027642":"markdown","3aaeabcc":"markdown","49418297":"markdown","24065ec9":"markdown","1919230f":"markdown","e5fe047e":"markdown","77f47f65":"markdown","95d9355f":"markdown","f406de54":"markdown"},"source":{"9db3908f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","c600c785":"train = pd.read_csv(\"..\/input\/Dataset_spine.csv\")","13436efc":"train.info()","306c2f6e":"train.head()","574be055":"train.describe()","d08c1d64":"train.columns","4c5ddb61":"sns.set_style('whitegrid')\nsns.countplot(x='Class_att',data=train,palette='RdBu_r')","714dc117":"plt.figure(figsize=(20,10))\nc=train.corr()\nsns.heatmap(c,cmap=\"BrBG\",annot=True)","908f8e6e":"from sklearn.model_selection import train_test_split","dec514de":"X= train [['Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6',]]\ny= train['Class_att']","ab779222":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, \n                                                    random_state=101)","8c475e9b":"from sklearn.tree import DecisionTreeClassifier","91d17670":"dtree = DecisionTreeClassifier()\ndtree.fit(X_train,y_train)","5c134cce":"predictions = dtree.predict(X_test)","5a239828":"from sklearn.metrics import classification_report,confusion_matrix","f56f6e67":"print(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test,predictions))","91d4548e":"from sklearn.ensemble import RandomForestClassifier","46612222":"rfc = RandomForestClassifier(n_estimators=600)","fc6ce1db":"rfc.fit(X_train,y_train)","e3db869c":"predictions = rfc.predict(X_test)","05febb4f":"from sklearn.metrics import classification_report,confusion_matrix","0c3ff5f4":"print(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test,predictions))","3f2a2164":"## Import Libraries","2dc31b7a":"**Predictions and Evaluation**\n\nLet's predict off the y_test values and evaluate our model.\n\n Predict on the X_test data.\n","01f8388d":"Random Forest performed slightly better.","057409ab":"Show the classification report and Confusion Matrix for the predictions.","ed1af1ca":"# Training a Decision Tree Model\n\nLet's start by training a single decision tree first!\n\n**Import DecisionTreeClassifier**\n","33027642":"Data is not balanced.","3aaeabcc":"# Train Test Split\n\nNow its time to split our data into a training set and a testing set!\n\nUse sklearn to split your data into a training set and a testing set as we've done in the past.\n","49418297":"# Get the Data\n\nUse pandas to read Dataset_spine.csv as a dataframe called train.\n","24065ec9":"# Training the Random Forest model\n\nNow its time to train our model!\n\nCreate an instance of the RandomForestClassifier class and fit it to our training data from the previous step.\n","1919230f":"Check out the info(), head(), and describe() methods on the data.","e5fe047e":"# Exploratory Data Analysis\n\nLet's do some data visualization!\n","77f47f65":"**Create an instance of DecisionTreeClassifier() called dtree and fit it to the training data.**","95d9355f":"**Predictions and Evaluation of Decision Tree**\n\nCreate predictions from the test set and create a classification report and a confusion matrix.\n","f406de54":"**What performed better the random forest or the decision tree?**"}}