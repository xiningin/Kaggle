{"cell_type":{"856e188a":"code","6cee9566":"code","dd8fc601":"code","2e1b1d96":"code","abee20e3":"code","08c18772":"code","1a55822d":"code","a1f697be":"code","242ba2f2":"code","c2098528":"code","5b4e5287":"code","e125deb6":"code","def15c97":"code","9f1971d5":"code","8a096b73":"code","11b03238":"code","da8e3c99":"markdown","257df8ab":"markdown","61c50881":"markdown"},"source":{"856e188a":"#Generic Packages\nimport numpy as np\nimport os\nimport pandas as pd\nimport random\n\n#Machine Learning Library\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.utils import shuffle           \n\n#Plotting Libraries\nimport seaborn as sn; sn.set(font_scale=1.4)\nimport matplotlib.pyplot as plt             \n\n#openCV\nimport cv2                                 \n\n#Tensor Flow & Keras\nimport tensorflow as tf    \nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, AveragePooling2D\nfrom keras.layers import Dense, Activation, Dropout, Flatten\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Dense , Activation , Dropout ,Flatten\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.metrics import categorical_accuracy\nfrom keras.models import model_from_json\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.optimizers import *\nfrom keras.layers.normalization import BatchNormalization\n\n#Train & Test Data Split\nfrom sklearn.model_selection import train_test_split\n\n#Garbage Collector\nimport gc","6cee9566":"# FER File Location\nfer_file = '..\/input\/facialexpressionrecognition\/fer2013.csv'\n\n# Expression Labels\nexp_label = ['Anger', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\n\n#Column Names\ncol_names=['emotion','pixels','usage']\n\n#Dataset\ndata = pd.read_csv(fer_file,names=col_names, na_filter=False)\n\nim=data['pixels']\n","dd8fc601":"data.head()","2e1b1d96":"#Function to read the file\ndef getData(file):\n    Y = []\n    X = []\n    first = True\n    for line in open(file):\n        if first:\n            first = False\n        else:\n            row = line.split(',')\n            Y.append(int(row[0]))\n            X.append([int(p) for p in row[1].split()])\n\n    X, Y = np.array(X) \/ 255.0, np.array(Y)\n    return X, Y\n\n# Load Data\nX, Y = getData(fer_file)\nnum_class = len(set(Y))\n#print(num_class)\n\n","abee20e3":"# reshape X dataset\nN, D = X.shape\nX = X.reshape(N, 48, 48, 1)","08c18772":"#Train & Test Data Split\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.1, random_state=0)\ny_train = (np.arange(num_class) == y_train[:, None]).astype(np.float32)\ny_test = (np.arange(num_class) == y_test[:, None]).astype(np.float32)","1a55822d":"#Build Model\n\ndef build_model():\n    model = Sequential()\n    input_shape = (48,48,1)\n    model.add(Conv2D(64, (5, 5), input_shape=input_shape,activation='relu', padding='same'))\n    model.add(Conv2D(64, (5, 5), activation='relu', padding='same'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Conv2D(128, (5, 5),activation='relu',padding='same'))\n    model.add(Conv2D(128, (5, 5),activation='relu',padding='same'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Conv2D(256, (3, 3),activation='relu',padding='same'))\n    model.add(Conv2D(256, (3, 3),activation='relu',padding='same'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Flatten())\n    model.add(Dense(128))\n    model.add(BatchNormalization())\n    model.add(Activation('relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(7))\n    model.add(Activation('softmax'))\n    \n    model.compile(loss='categorical_crossentropy', metrics=['accuracy'],optimizer='adam')\n    return model","a1f697be":"#Instantiate the Model\nmodel=build_model()\n\n#Model Architecture Summary\nmodel.summary()","242ba2f2":"path_model='model_filter.h5' # save model at this location after each epoch\nK.tensorflow_backend.clear_session() # destroys the current graph and builds a new one\nmodel = build_model ()\nK.set_value(model.optimizer.lr,1e-3) # set the learning rate","c2098528":"#Train The Model\n# fit the model\nh=model.fit(x=X_train,y=y_train,batch_size=100,epochs=10,verbose=1,validation_data=(X_test,y_test),shuffle=True,callbacks=[ModelCheckpoint(filepath=path_model),])","5b4e5287":"gc.collect()","e125deb6":"#Checking the Accuracy\ntest_loss = model.evaluate(X_test, y_test)","def15c97":"objects = ('angry', 'disgust', 'fear', 'happy', 'sad', 'surprise', 'neutral')\ny_pos = np.arange(len(objects))\n#print(y_pos)","9f1971d5":"def emotion_analysis(emotions):\n    objects = ['ang', 'dis', 'fear', 'hap', 'sad', 'sur', 'neu']\n    y_pos = np.arange(len(objects))\n    plt.bar(y_pos, emotions, align='center', alpha=0.9)\n    plt.tick_params(axis='x', which='both', pad=10,width=20,length=15)\n    plt.xticks(y_pos, objects)\n    plt.ylabel('percentage')\n    plt.title('emotion')\n    plt.figure(figsize=(15,10))\n    plt.show()\n    \n","8a096b73":"y_pred=model.predict(X_test)\n#print(y_pred)\n#y_test.shape","11b03238":"# Randomly select an unseen image and predict the expression\n\nfrom skimage import io\n\ndirc = '..\/input\/random-facial-expressions\/'  #unseen random images folder\nrandom_img = random.choice(os.listdir(dirc))  # randomly select an image\n\n#img = image.load_img('..\/input\/random-facial-expressions\/5.jpg', grayscale=True, target_size=(48, 48))\n#show_img=image.load_img('..\/input\/random-facial-expressions\/5.jpg', grayscale=False, target_size=(400, 400))\n\nimg = image.load_img(dirc+random_img, grayscale=True, target_size=(48, 48))\nshow_img=image.load_img(dirc+random_img, grayscale=False, target_size=(400, 400))\n\n\n\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis = 0)\n\nx \/= 255\n\ncustom = model.predict(x)\nemotion_analysis(custom[0])\n\nx = np.array(x, 'float32')\nx = x.reshape([48, 48]);\n\nplt.gray()\nplt.imshow(show_img)\nplt.show()\n\nm=0.000000000000000000001\na=custom[0]\nfor i in range(0,len(a)):\n    if a[i]>m:\n        m=a[i]\n        ind=i\n        \nprint('Predicted Expression:',objects[ind])","da8e3c99":"## Load Data","257df8ab":"## Libraries","61c50881":"# Facial Expression Prediction\n\nFacial Expression Classification using CNN with Keras.\n\n"}}