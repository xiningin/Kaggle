{"cell_type":{"178dd65c":"code","270c805c":"code","2df6e953":"code","5d97480b":"code","34030129":"code","193695d4":"code","da77cf38":"code","1e8b1e7d":"markdown","794b6a4a":"markdown","b4a34cb4":"markdown","a478cec1":"markdown","86c4069b":"markdown","7913e205":"markdown","d602fede":"markdown"},"source":{"178dd65c":"# Set up code checking\nimport os\nif not os.path.exists(\"..\/input\/train.csv\"):\n    os.symlink(\"..\/input\/home-data-for-ml-course\/train.csv\", \"..\/input\/train.csv\")  \n    os.symlink(\"..\/input\/home-data-for-ml-course\/test.csv\", \"..\/input\/test.csv\") \nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.ml_intermediate.ex4 import *\nprint(\"Setup Complete\")","270c805c":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\nX_full = pd.read_csv('..\/input\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('..\/input\/test.csv', index_col='Id')\n\n# Remove rows with missing target, separate target from predictors\nX_full.dropna(axis=0, subset=['SalePrice'], inplace=True)\n\n# Perform log-transform on target data\nX_full['SalePrice'] = np.log(X_full['SalePrice'])\n\ny = X_full.SalePrice\nX_full.drop(['SalePrice'], axis=1, inplace=True)\n\n# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()","2df6e953":"X_test.head()\n#X_train.head()","5d97480b":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import cross_val_score\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='mean') # Your code here\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n]) # Your code here\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Define model\nparams = {'max_depth': 4,\n          'learning_rate': 0.002808641487910595,\n          'n_estimators': 7111, \n          'min_child_weight': 1, \n          'colsample_bytree': 0.2799347566364738, \n          'subsample': 0.2217503749819434, \n          'reg_alpha': 0.7171743830887931, \n          'reg_lambda': 0.8553722314363471}\n\nmodel = XGBRegressor(random_state = 0, **params) # Your code here","34030129":"# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model)\n                             ])\n# Preprocessing of training data, fit model \nmy_pipeline.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = my_pipeline.predict(X_valid)\n\n# Evaluate the model\nscore = mean_absolute_error(np.exp(y_valid), np.exp(preds))\n# score = mean_absolute_error(y_valid, preds)\nprint('MAE:', score)\n\n# scores = -1 * cross_val_score(my_pipeline, X_train, y_train,\n#                               cv=5,\n#                               scoring='neg_mean_absolute_error', n_jobs=-1)\n\n# print('MAE with cross validation', scores.mean())","193695d4":"# Preprocessing of test data, fit model\npreds_test = my_pipeline.predict(X_test) # Your code here\n","da77cf38":"# Save test predictions to file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': np.exp(preds_test)})\n# output = pd.DataFrame({'Id': X_test.index,\n#                        'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","1e8b1e7d":"### Part B\n\nRun the code cell below without changes.\n\nTo pass this step, you need to have defined a pipeline in **Part A** that achieves lower MAE than the code above.  You're encouraged to take your time here and try out many different approaches, to see how low you can get the MAE!  (_If your code does not pass, please amend the preprocessing steps and model in Part A._)","794b6a4a":"### Part A\n\nIn the code cell below, define your preprocessing steps and XGBoost model.\n- `numerical_transformer`\n- `categorical_transformer`\n- `model`","b4a34cb4":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161289) to chat with other Learners.*","a478cec1":"# Step 2: Generate test predictions\n\nNow, you'll use your trained model to generate predictions with the test data.","86c4069b":"**VERSION 8**\n\nThis version, I'll be employing some feature engineering from the [Kaggle Feature Engineering](https:\/\/www.kaggle.com\/learn\/feature-engineering) course\n\n# Setup","7913e205":"Run the next code cell without changes to save your results to a CSV file that can be submitted directly to the competition.","d602fede":"You will work with data from the [Housing Prices Competition for Kaggle Learn Users](https:\/\/www.kaggle.com\/c\/home-data-for-ml-course). \n\n![Ames Housing dataset image](https:\/\/i.imgur.com\/lTJVG4e.png)\n\nRun the next code cell without changes to load the training and validation sets in `X_train`, `X_valid`, `y_train`, and `y_valid`.  The test set is loaded in `X_test`."}}