{"cell_type":{"ab1d9627":"code","08605005":"code","cee599fb":"code","c9c810e9":"code","59fcd5e0":"code","28900226":"code","95528d0b":"code","767194a7":"code","5970da2a":"code","16e69119":"code","e9377dec":"code","15b624aa":"code","5773cbb7":"code","db9f0950":"code","1281da47":"code","c137173f":"markdown","71429fda":"markdown","97ce93b0":"markdown","1dd675c0":"markdown"},"source":{"ab1d9627":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.image as mimg\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow import keras","08605005":"train_df = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_train.csv')\ntest_df = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_test.csv')","cee599fb":"print(train_df.shape)\ntrain_df.head()","c9c810e9":"print(test_df.shape)\ntest_df.head()","59fcd5e0":"X_train = train_df.drop(['label'], axis=1)\ny_train = train_df['label']","28900226":"X_test = test_df.drop(['label'], axis=1)\ny_test = test_df['label']","95528d0b":"X_train = np.reshape(X_train.values, (60000, 28, 28))\/255\nX_test = np.reshape(X_test.values, (10000, 28, 28))\/255\ny_train = keras.utils.to_categorical(y_train, 10)\ny_test = keras.utils.to_categorical(y_test, 10)","767194a7":"X_train[0]","5970da2a":"X_train = np.reshape(X_train, (60000, 28, 28, 1))\nX_test = np.reshape(X_test, (10000, 28, 28, 1))","16e69119":"# Build the Model\ninput_shape = (28, 28, 1)\n\nmodel = keras.Sequential([\n    keras.layers.Conv2D(32, 3, activation = 'relu', input_shape = input_shape),\n    keras.layers.BatchNormalization(),\n    keras.layers.Conv2D(32, 3, activation = 'relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Conv2D(32, 5, strides=2, padding='same', activation = 'relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Dropout(0.4),\n    \n    keras.layers.Conv2D(64, 3, activation = 'relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Conv2D(64, 3, activation = 'relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Conv2D(64, 5, strides=2, padding='same', activation = 'relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Dropout(0.4),\n        \n    keras.layers.Conv2D(128, 4, activation = 'relu'),\n    keras.layers.BatchNormalization(),\n    \n    keras.layers.Flatten(),\n    keras.layers.Dropout(0.4),\n    keras.layers.Dense(10, activation = 'softmax')\n])\n\nmodel.summary()","e9377dec":"epochs = 15\nbatch_size = 64\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\nhistory = model.fit(X_train, y_train, epochs = epochs, batch_size = batch_size, \n                    validation_split=0.1)","15b624aa":"history = model.fit(X_train, y_train, epochs = 10, batch_size = batch_size, \n                    validation_split=0.1)","5773cbb7":"history = model.fit(X_train, y_train, epochs = 10, batch_size = batch_size, \n                    validation_split=0.1)","db9f0950":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs_range = range(10)\n\nplt.figure(figsize=(8, 8))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","1281da47":"model.evaluate(X_test, y_test)","c137173f":"## Build the Model","71429fda":"## Load Data","97ce93b0":"### Evaluate the model ","1dd675c0":"### Reshape and Prep Data"}}