{"cell_type":{"36b27497":"code","3cbafcd6":"code","6103c05b":"code","e21ddce8":"code","4d3772f0":"code","00eef60a":"code","c98e3f67":"code","f4acd20f":"code","ea29d0eb":"code","69ef8ffb":"code","cb5a030b":"markdown","a862ace0":"markdown","5ce99856":"markdown","ce42ee77":"markdown","ed69ad47":"markdown","6d127f5e":"markdown","6168acc4":"markdown","e6a24f0a":"markdown"},"source":{"36b27497":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3cbafcd6":"data = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')\ndata.head()","6103c05b":"data = data.iloc[:, 1:]","e21ddce8":"data = pd.get_dummies(data)\ndata.head()","4d3772f0":"x = data.iloc[:, 0:4]\ny = data.iloc[:, 4:]","00eef60a":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx = scaler.fit_transform(x)","c98e3f67":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.25)","f4acd20f":"from sklearn.model_selection import cross_val_score\nfrom tensorflow.keras.wrappers.scikit_learn import KerasClassifier\nimport tensorflow as tf\n\ndef build_classifier():\n    \n    ann = tf.keras.models.Sequential()\n    ann.add(tf.keras.layers.Dense(8, input_dim=x.shape[1], activation='relu'))\n    ann.add(tf.keras.layers.Dense(8, activation='relu'))\n    ann.add(tf.keras.layers.Dense(3, activation='softmax'))\n    \n    ann.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n    return ann","ea29d0eb":"classifier = KerasClassifier(build_fn = build_classifier, epochs=100, batch_size=20)\nscore = cross_val_score(classifier, X=X_train, y=Y_train,cv=3)","69ef8ffb":"score.mean()","cb5a030b":"**Fitting the classifer and cross validating**","a862ace0":"**Building Classifier**","5ce99856":"**Splitting to X and y**","ce42ee77":"**Getting the mean of all the accuracies**","ed69ad47":"**OneHotEncoding the dependant column**","6d127f5e":"**Scaling the independant variables**","6168acc4":"**Removing Id column from the DataFrame**","e6a24f0a":"**Splitting to training and test sets**"}}