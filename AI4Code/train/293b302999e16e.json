{"cell_type":{"de79da6e":"code","fa625a08":"code","d77cd548":"code","94ddd31c":"code","b965edfd":"code","52b062cd":"code","f05bf06d":"code","01ca0f44":"code","3bb8e32f":"code","8370b0b3":"code","ef407603":"markdown","6f1d8093":"markdown","9d36d153":"markdown","93f1ac22":"markdown","40c420e2":"markdown","95ac9b91":"markdown"},"source":{"de79da6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport statsmodels.api as sm\n\nfrom scipy import stats\nstats.chisqprob = lambda chisq, df: stats.chi2.sf(chisq, df)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa625a08":"raw_data = pd.read_csv('\/kaggle\/input\/logistic-regression\/Social_Network_Ads.csv')\nraw_data","d77cd548":"data = raw_data.copy()\ndata = data.drop(['User ID'], axis=1)\ndata['Gender'] = data['Gender'].map({'Female':0, 'Male':1})\ndata","94ddd31c":"data.describe()","b965edfd":"estimators = ['Gender', 'Age', 'EstimatedSalary']\ny = data['Purchased']\nx1 = data[estimators]","52b062cd":"from sklearn.model_selection import train_test_split\nx1_train, x1_test, y_train, y_test = train_test_split(x1, y, test_size=0.25, random_state=42)\n\nx_train = sm.add_constant(x1_train)\nx_test = sm.add_constant(x1_test)","f05bf06d":"reg_log = sm.Logit(y_train, x_train)\nresults_logit = reg_log.fit()\nresults_logit.summary()","01ca0f44":"def confusion_matrix(data,actual_values,model):\n    pred_values = model.predict(data)\n    bins=np.array([0,0.5,1])\n    cm = np.histogram2d(actual_values, pred_values, bins=bins)[0]\n    accuracy = (cm[0,0]+cm[1,1])\/cm.sum()\n    return cm, accuracy","3bb8e32f":"# Train confusion matrix\nconfusion_matrix(x_train, y_train, results_logit)","8370b0b3":"# Test confusion matrix\nconfusion_matrix(x_test, y_test, results_logit)","ef407603":"## Multivariate logistic regression","6f1d8093":"## Split data to train and test","9d36d153":"# Regression","93f1ac22":"## Declare dependent and independent variables","40c420e2":"# Confusion matrix","95ac9b91":"# Load data"}}