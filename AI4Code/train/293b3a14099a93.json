{"cell_type":{"3eb74422":"code","f23d707c":"code","c00a22f5":"code","a2adc173":"code","d410b8b9":"code","b530f6b7":"code","37df5761":"code","0a7bb5d4":"code","bcf7ea79":"code","08375151":"code","a047d8b4":"code","1f60a5d4":"code","448f814d":"markdown","80c9634f":"markdown","f60b15fe":"markdown","1a29c7b3":"markdown","3015fefe":"markdown","b350c597":"markdown","6aebc87d":"markdown"},"source":{"3eb74422":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os     \nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f23d707c":"#reading the data\ndata = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndata.head()","c00a22f5":"# separating the training and output data\ntrain = data.iloc[:,:-1]\ny = data.iloc[:,-1]","a2adc173":"data.isna().sum()","d410b8b9":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\ntrain = sc_X.fit_transform(train)","b530f6b7":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train, y, test_size = 0.20, random_state = 42)","37df5761":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(max_depth=15, random_state=0)\nclf.fit(X_train, y_train)","0a7bb5d4":"pred = clf.predict(X_test)\npred","bcf7ea79":"from sklearn.metrics import accuracy_score\nacc_rf = accuracy_score(y_test,pred)\nacc_rf","08375151":"from xgboost import XGBClassifier\nmodel = XGBClassifier(learning_rate =0.04,n_estimators=500)\nmodel.fit(X_train, y_train)","a047d8b4":"y_pred_xg = model.predict(X_test)\ny_pred_xg","1f60a5d4":"acc_rf = accuracy_score(y_test,y_pred_xg)\nacc_rf","448f814d":"**Prediction using xgboost**","80c9634f":"# Split the data into training and testing","f60b15fe":"# Training on XGBoost Classifier","1a29c7b3":"**Checking the accuracy score**","3015fefe":"# Training on Random Forest Classifier","b350c597":"**Accuracy using xgboost**","6aebc87d":"**Prediction with RF**"}}