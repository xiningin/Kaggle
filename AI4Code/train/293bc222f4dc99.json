{"cell_type":{"c8fcffa4":"code","9dc80e2a":"code","6270a28c":"code","5c90b1dc":"code","dbf91381":"code","6c48d89c":"code","4610a083":"code","a094af66":"code","4b4d0ed1":"code","4a9804ed":"code","57efb150":"code","7ded583a":"code","3529963f":"code","4393c379":"code","44d545fe":"code","57b75d1a":"code","1a0985a0":"code","54d6aeaf":"code","991f09e3":"code","c460cbd3":"code","0f27e79f":"code","1c09ff47":"code","0b9dab47":"code","5ec4a486":"code","4985a004":"code","850527d7":"code","2d9111a6":"code","9b8d1d9c":"code","648effa5":"code","351430a9":"code","57a9de98":"code","1ef4ad11":"code","b223d254":"code","724ff139":"code","8e564bb5":"code","a991a9b1":"code","9885bbe1":"code","8670a13c":"code","d4ab955a":"code","ba189914":"code","40d79b1e":"markdown","f38d705d":"markdown","04c1f629":"markdown","7757c452":"markdown","4a3faf0f":"markdown"},"source":{"c8fcffa4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport functools, datetime\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9dc80e2a":"TRAIN_PATH = '\/kaggle\/input\/facial-keypoints-detection\/training\/training.csv'\nTEST_PATH = '\/kaggle\/input\/facial-keypoints-detection\/test\/test.csv'\nLOOKUP_PATH = '\/kaggle\/input\/facial-keypoints-detection\/IdLookupTable.csv'\nBATCH_SIZE = 256","6270a28c":"train_df = pd.read_csv(TRAIN_PATH)","5c90b1dc":"print('num of cols {}'.format(len(train_df.columns)))\ntrain_df.columns","dbf91381":"sample_img = np.array(train_df['Image'][0].split(' '), dtype=np.float32).reshape(96, 96)","6c48d89c":"sample_img","4610a083":"y = train_df.drop('Image', axis=1)\nt = y.iloc[0].values","a094af66":"plt.imshow(sample_img, cmap='gray')\nplt.scatter(t[0::2], t[1::2], c='red', marker='x')","4b4d0ed1":"train_df.isnull().any(axis=0).value_counts()\ntrain_df.fillna(method='ffill', inplace=True)","4a9804ed":"train_df.isnull().any(axis=0).value_counts()","57efb150":"training_data = train_df['Image'].values\nlabels = train_df.drop('Image', axis=1)","7ded583a":"FEATURES = list(labels.columns)","3529963f":"X_train, X_test, y_train, y_test = train_test_split(training_data, labels, random_state=42, test_size=0.1)","4393c379":"len(X_train)","44d545fe":"def process_img(X, y=None):\n    imgs = [np.array(i.split(' '), dtype=np.float32).reshape(96, 96, 1) for i in X]\n    imgs = [img \/ 255.0 for img in imgs]\n    return np.array(imgs), y","57b75d1a":"def data_pipeline(X, y, shuffle_size):\n    dataset = (\n        tf.data.Dataset.from_tensor_slices((X, y))\n        .shuffle(shuffle_size)\n        .batch(BATCH_SIZE)\n        .prefetch(1)\n        .repeat()\n    )\n#     print('Dataset element spec {}'.format(dataset.element_spec))\n    iterator= dataset.make_one_shot_iterator()\n    return iterator","1a0985a0":"train_shuffle_size = len(X_train)\ntest_shuffle_size = len(X_test)","54d6aeaf":"X_train, y_train = process_img(X_train, y_train.values)\nX_test, y_test = process_img(X_test, y_test.values)","991f09e3":"X_train.shape","c460cbd3":"y_test.shape","0f27e79f":"train_iterator = data_pipeline(X_train, y_train, train_shuffle_size)","1c09ff47":"validation_iterator = data_pipeline(X_test, y_test, test_shuffle_size)","0b9dab47":"Activation='elu'\nInput = tf.keras.layers.Input\nConv2d = functools.partial(\n            tf.keras.layers.Conv2D,\n            activation=Activation,\n            padding='same'\n        )\nBatchNormalization = tf.keras.layers.BatchNormalization\nAveragePooling2D = tf.keras.layers.AveragePooling2D\nMaxPooling2D = tf.keras.layers.MaxPool2D\nDense = functools.partial(\n            tf.keras.layers.Dense,\n            activation=Activation\n        )\nFlatten = tf.keras.layers.Flatten","5ec4a486":"def prepare_model():\n    input = Input(shape=(96, 96, 1,))\n    conv_1 = Conv2d(16, (2, 2))(input)\n    batch_norm_1 = BatchNormalization()(conv_1)\n    \n    conv_2 = Conv2d(32, (3, 3))(batch_norm_1)\n    batch_norm_2 = BatchNormalization()(conv_2)\n    \n    conv_3 = Conv2d(64, (4, 4))(batch_norm_2)\n    avg_pool_1 = AveragePooling2D((2,2))(conv_3)\n    batch_norm_3 = BatchNormalization()(avg_pool_1)\n    \n    conv_128 = Conv2d(128, (4, 4))(batch_norm_2)\n    avg_pool_128 = AveragePooling2D((2,2))(conv_3)\n    batch_norm_128 = BatchNormalization()(avg_pool_1)\n    \n    conv_4 = Conv2d(64, (7, 7))(batch_norm_128)\n    avg_pool_1 = AveragePooling2D((2, 2))(conv_128)\n    batch_norm_4 = BatchNormalization()(avg_pool_128)\n    \n    conv_5 = Conv2d(32, (7, 7))(batch_norm_4)\n    flat_1 = Flatten()(conv_5)\n    \n    dense_1 = Dense(30)(flat_1)\n    outputs = Dense(30)(dense_1)\n    \n    model = tf.keras.Model(input, dense_1)\n    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])\n    return model","4985a004":"model = prepare_model()","850527d7":"model.summary()","2d9111a6":"logdir = os.path.join(\"logs\", datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\"))\ntensorboard_callback = tf.keras.callbacks.TensorBoard(logdir, histogram_freq=1)\ncallbacks = [\n    tf.keras.callbacks.ModelCheckpoint(filepath='.\/weights.hdf5', verbose=1, save_best_only=True),\n    tensorboard_callback,\n    tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5)\n]","9b8d1d9c":"model.fit(train_iterator, steps_per_epoch=24, epochs=50, validation_data=validation_iterator, validation_steps=6,callbacks=callbacks)","648effa5":"%reload_ext tensorboard.notebook\n%tensorboard --logdir logs","351430a9":"test_df = pd.read_csv(TEST_PATH)\nlookup_df = pd.read_csv(LOOKUP_PATH)","57a9de98":"test_imgs, y = process_img(test_df['Image'])","1ef4ad11":"test_imgs.shape","b223d254":"predictions = model.predict(test_imgs)","724ff139":"predictions.shape","8e564bb5":"plt.imshow(test_imgs[0].reshape(96, 96), cmap='gray')\nplt.scatter(predictions[0][0::2], predictions[0][1::2], c='red', marker='x')","a991a9b1":"locations = []\nrows = []","9885bbe1":"for row_id, img_id, feature_name, loc in lookup_df.values:\n    fi = FEATURES.index(feature_name)\n    loc = predictions[img_id - 1][fi]\n    locations.append(loc)\n    rows.append(row_id)","8670a13c":"row_id_series = pd.Series(rows, name='RowId')\nloc_series = pd.Series(locations, name='Location')","d4ab955a":"sub_csv = pd.concat([row_id_series, loc_series], axis=1)","ba189914":"sub_csv.to_csv('face_key_detection_submission.csv',index = False)","40d79b1e":"## Performance","f38d705d":"## Data pipeline","04c1f629":"## Callbacks","7757c452":"## Define model","4a3faf0f":"## Inferance"}}