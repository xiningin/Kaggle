{"cell_type":{"082e1a93":"code","be95bc8f":"code","8d11849c":"code","3d1447f1":"code","8583bb70":"code","a4fc39b6":"code","b80332e0":"code","88864719":"code","877bbf12":"code","44b4ac24":"code","2faae351":"code","d626ef62":"code","0275aa0a":"code","959b84fd":"code","239b9508":"code","8519804d":"code","c3441b93":"code","8ce9b18f":"code","4ff7d619":"code","15a7c8a8":"code","219616a2":"code","7885e615":"code","3ae3de2f":"code","7a2867b3":"code","7a0a127f":"code","6c73b619":"code","219a1891":"code","7eee7c3f":"code","0f82c30d":"code","818485d1":"code","3f35370f":"code","1def218b":"code","41c6ec6d":"code","0ce85448":"code","7f4c41e8":"code","c6a25963":"code","8197e960":"code","c1b4065b":"code","98c28e66":"code","84603e92":"code","8102a384":"code","049a256f":"code","10e96c66":"code","e2b6293d":"code","1f786541":"code","878d49e8":"code","363251e3":"markdown","ffef1e2f":"markdown","255ac9d4":"markdown","3be58682":"markdown","32a2c8dc":"markdown","f18b50b2":"markdown","1b8230d3":"markdown","8c5c12a8":"markdown","897fc491":"markdown"},"source":{"082e1a93":"import numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_samples, silhouette_score\nimport pandas as pd\nimport datetime\nfrom datetime import date\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.preprocessing import StandardScaler, normalize\nfrom sklearn import metrics\nfrom sklearn.mixture import GaussianMixture\nfrom mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nfrom mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules\npd.options.display.float_format = \"{:.3f}\".format","be95bc8f":"data=pd.read_csv('..\/input\/customer-personality-analysis\/marketing_campaign.csv', sep=\"\\t\")","8d11849c":"data.head()","3d1447f1":"data['TotalSpending']=data['MntWines']+data['MntFruits']+data['MntMeatProducts']+data['MntFishProducts']+data['MntSweetProducts']+data['MntGoldProds']\ndata['Education']=data['Education'].replace({'Basic':'Undergraduation','2n Cycle':'Undergraduation'})\ndata['Children']=data['Kidhome']+data['Teenhome']\ndata['Has_child'] = np.where(data.Children> 0, 'Has child', 'No child')\ndata['Age']=2021-data['Year_Birth']\ncut_labels_Age = ['Young', 'Adult', 'Mature', 'Senior']\ncut_bins = [0, 30, 45, 65, 120]\ndata['Age_group'] = pd.cut(data['Age'], bins=cut_bins, labels=cut_labels_Age)\ncut_labels_Income = ['Low income', 'Low to medium income', 'Medium to high income', 'High income']\ndata['Income_group'] = pd.qcut(data['Income'], q=4, labels=cut_labels_Income)","8583bb70":"product={'MntWines':'Wines',\n        'MntFruits':'Fruits',\n        'MntMeatProducts':'Meat',\n        'MntFishProducts':'Fish',\n        'MntSweetProducts':'Sweet',\n        'MntGoldProds':'Gold'}\ndata=data.rename(product,axis=1)","a4fc39b6":"data.describe()","b80332e0":"data=data[data['TotalSpending']<2486]\ndata=data[data['Income']<113734]\ndata=data.dropna()","88864719":"from sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_samples, silhouette_score","877bbf12":"clu1=data[['Income','TotalSpending']]\nclu1 = (clu1 - clu1.mean()) \/ clu1.std()#\u6a19\u6e96\u5316\nclu1","44b4ac24":"#\u4f7f\u7528\u8098\u90e8\u6cd5\u4f86\u5b9a\u7fa9\u8981\u5206\u5e7e\u7fa4\n#\u5728K=3\u4e4b\u5f8c\uff0c\nKs = range(1, 10)\ninertia = [KMeans(i).fit(clu1).inertia_ for i in Ks]\n\nfig = plt.figure()\nplt.plot(Ks, inertia,'go-')\nplt.xlabel('Number of clusters')\nplt.ylabel('Inertia (within-cluster sum of squares)')\nplt.show()","2faae351":"kmeans = KMeans(n_clusters=3)\nkmeans.fit(clu1)","d626ef62":"data['ability']=kmeans.labels_","0275aa0a":"data['ability']=data['ability'].replace({0:'low',1:'med',2:'high'})\ndata['ability'].value_counts()","959b84fd":"products=['Wines',\n        'Fruits',\n        'Meat',\n        'Fish',\n        'Sweet',\n        'Gold']","239b9508":"data1=data.copy()\ncut=['low','med','high']\nfor i in products:\n    data1[i]=pd.qcut(data[i][data[i]>0],q=[0,.3,.7,1],labels=cut)\ndata1=data1[products].astype('object')\ndata1.replace(np.nan,'no',inplace=True)\ndata2=pd.get_dummies(data1)","8519804d":"#\u8a2d\u5b9a\u6700\u5c0f\u652f\u6301\u5ea6(min_support)\uff0c\u4ee5\u904e\u6ffe\u6389\u4e0d\u66a2\u92b7\u7684\u5546\u54c1\nfrequent_items=apriori(data2,use_colnames=True,min_support = 0.1)\nfrequent_items","c3441b93":"rules=association_rules(frequent_items, metric='lift', min_threshold=1).sort_values(by='confidence', ascending=False)\nrules","8ce9b18f":"product='Meat'\nsegment='med'\ntarget = '{\\'%s_%s\\'}' %(product,segment)\nresults_personnal_care = rules[rules['consequents'].astype(str).str.contains(target, na=False)].sort_values(by='confidence', ascending=False)\nresults_personnal_care","4ff7d619":"# product=input('\u8acb\u8f38\u5165\u54c1\u985e\uff1a')\n# segment=input('\u8acb\u8f38\u5165\u6d88\u8cbb\u7b49\u7d1a\uff1a')\n# target = '{\\'%s_%s\\'}' %(product,segment)\n# results_personnal_care = rules[rules['consequents'].astype(str).str.contains(target, na=False)].sort_values(by='confidence', ascending=False)\n# for i in range(2):\n#     x=list(results_personnal_care['antecedents'][:i+1].values)\n#     print('\u63a8\u85a6',i+1,':',list(x[i])[0].split('_')[0])","15a7c8a8":"ML=data[['Age','Marital_Status','Education','Income']]","219616a2":"ML['Education'].value_counts()\nEdu={'Undergraduation':0,'Graduation':1,'PhD':2,'Master':2}\nMS={'Married':1,'Together':1,'Single':0,'Divorced':0,'Widow':0,'Alone':0,'Absurd':0,'YOLO':0}\nchild={'Has child':1,'No child':0}\nML['Education']=ML['Education'].replace(Edu)\nML['Marital_Status']=ML['Marital_Status'].replace(MS)","7885e615":"from sklearn.model_selection import train_test_split\nx=ML.drop('Income',axis=1)\ny=ML['Income']","3ae3de2f":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2)","7a2867b3":"from sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error\nfrom xgboost import XGBRegressor\nxgb=XGBRegressor(n_estimators=100,max_depth=2,learning_rate=0.1,reg_alpha=1,reg_lambda=0.5)\nxgb.fit(X_train,y_train)\ny_pred=xgb.predict(X_test)\nprint(mean_absolute_error(y_test,y_pred))\nprint(mean_squared_error(y_test,y_pred))\nprint(r2_score(y_test,y_pred))","7a0a127f":"ML2=ML\nML2['TotalSpending']=data['TotalSpending']","6c73b619":"ML2['child']=data['Has_child'].replace(child)","219a1891":"ML2.head()","7eee7c3f":"x=ML2.drop('TotalSpending',axis=1)\ny=ML2['TotalSpending']\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2)\nxgb=XGBRegressor(n_estimators=500,max_depth=2,learning_rate=0.01,reg_alpha=1,reg_lambda=0.5)\nxgb.fit(X_train,y_train)\ny_pred=xgb.predict(X_test)\nprint('MAE:',mean_absolute_error(y_test,y_pred))\nprint('MSE:',mean_squared_error(y_test,y_pred))\nprint('R2:',r2_score(y_test,y_pred))","0f82c30d":"pro={'Wines':'WinesL',\n        'Fruits':'FruitsL',\n        'Meat':'MeatL',\n        'Fish':'FishL',\n        'Sweet':'SweetL',\n        'Gold':'GoldL'}\ndata1.rename(pro,axis=1,inplace=1)\nalldata=pd.concat([data,data1],axis=1)\n# alldata.to_csv('customer.csv')","818485d1":"com=['Wines',\n        'Fruits',\n        'Meat',\n        'Fish',\n        'Sweet',\n        'Gold',\n    'Complain',\n    'Income',\n    'Age',\n     'NumWebPurchases',\n 'NumCatalogPurchases',\n'NumStorePurchases',\n'NumWebVisitsMonth',\n'TotalSpending'\n    ]\ncom1=alldata[com]","3f35370f":"fig=plt.figure(figsize=(8,8))\nsns.heatmap(com1.corr(),annot=True)","1def218b":"alldata['allcom']=alldata['AcceptedCmp1']+alldata['AcceptedCmp2']+alldata['AcceptedCmp3']+alldata['AcceptedCmp4']+alldata['AcceptedCmp5']+alldata['Response']\nalldata['allcom'].value_counts()","41c6ec6d":"# alldata.to_csv('customer3.csv')","0ce85448":"#\u8cfc\u8cb7\u6253\u6298\u5546\u54c1\u5927\u65bc\u5169\u6b21\nFruitsL=alldata[alldata['allcom']>2]['FruitsL'].value_counts()\nfig=px.pie(data_frame=FruitsL,names=FruitsL.index,values=FruitsL.values,hole=0.6,title='Fruits')\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()","7f4c41e8":"GoldL=alldata[alldata['allcom']>2]['GoldL'].value_counts()\nfig=px.pie(data_frame=GoldL,names=GoldL.index,values=GoldL.values,hole=0.6,title='Gold')\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()","c6a25963":"FishL=alldata[alldata['allcom']>2]['FishL'].value_counts()\nfig=px.pie(data_frame=FishL,names=FishL.index,values=FishL.values,hole=0.6,title='Fish')\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()","8197e960":"SweetL=alldata[alldata['allcom']>2]['SweetL'].value_counts()\nfig=px.pie(data_frame=SweetL,names=SweetL.index,values=SweetL.values,hole=0.6,title='Sweet')\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()","c1b4065b":"MeatL=alldata[alldata['allcom']>2]['MeatL'].value_counts()\nfig=px.pie(data_frame=MeatL,names=MeatL.index,values=MeatL.values,hole=0.6,title='Meat')\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()","98c28e66":"WinesL=alldata[alldata['allcom']>2]['WinesL'].value_counts()\nfig=px.pie(data_frame=WinesL,names=WinesL.index,values=WinesL.values,hole=0.6,title='Wines')\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()","84603e92":"SweetL=alldata[alldata['allcom']>2]['SweetL'].value_counts()\nfig=px.pie(data_frame=SweetL,names=SweetL.index,values=SweetL.values,hole=0.6,title='Sweet')\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()","8102a384":"cuts=['no','low','med','high']\nnew=pd.DataFrame(columns=cuts)","049a256f":"new=new.append(WinesL)\nnew=new.append(MeatL)\nnew=new.append(FruitsL)\nnew=new.append(GoldL)\nnew=new.append(FishL)\nnew=new.append(SweetL)\n","10e96c66":"new","e2b6293d":"new=new.iloc[:].fillna(0)","1f786541":"# new.to_csv('new.csv')","878d49e8":"alldata[alldata['ability']=='med']['MeatL'].value_counts()","363251e3":"# Kmeans\u5206\u7fa4\nK-means clustering\u5c31\u662f\u5e0c\u671b\u53ef\u4ee5\u6700\u5c0f\u5316\u7fa4\u5167\u7684\u8cc7\u6599\u548c\u7fa4\u5fc3\u7684\u8aa4\u5dee\u5e73\u65b9\u548c\u8d8a\u5c0f\u8d8a\u597d\n\n\u4f9d\u64da\u6536\u5165\u3001\u82b1\u8cbb\u4f86\u70ba\u5ba2\u6236\u505a\u6d88\u8cbb\u80fd\u529b\u5206\u7fa4","ffef1e2f":"# \u7279\u5fb5\u5de5\u7a0b","255ac9d4":"## \u91cd\u8981\u6307\u6a19\n\n\nSupport\u652f\u6301\u7387\uff1a\u51fa\u73fe\u7684\u6982\u7387\u3002\n\nConfidence\u53ef\u4fe1\u5ea6\uff1a\u689d\u4ef6\u6a5f\u7387\uff0c\u7576\u5546\u54c1\u51fa\u73fe\u6642\uff0c\u51fa\u73fe\u53e6\u4e00\u4ef6\u5546\u54c1\u7684\u6982\u7387\u3002\n\nlift\u63d0\u5347\u5ea6:\u8868\u793a\u7576\u4e8b\u60c5X\u767c\u751f\u7684\u60c5\u6cc1\u4e0b\uff0c\u540c\u6642\u767c\u751fY\u7684\u53ef\u80fd\u6027\uff0c\u4e14\u53ea\u770bY\u767c\u751f\u7684\u6a5f\u7387\uff0c\u63d0\u5347\u5ea6\u53cd\u61c9\u4e86X\u8207Y\u7684\u95dc\u806f\u6027\uff0c\u63d0\u5347\u5ea6>1\u6216\u8d8a\u9ad8\u8868\u793a\u8d8a\u76f8\u95dc\uff0c\u63d0\u5347\u5ea6=1\u8868\u793a\u70ba\u4e92\u76f8\u7368\u7acb\uff0c\u63d0\u5347\u5ea6<1\u6216\u8d8a\u4f4e\u4ee3\u8868\u8ca0\u76f8\u95dc\u6027\u8d8a\u9ad8\u3002","3be58682":"# Machine Learning\n1.\u4f9d\u7167\u6559\u80b2\u7a0b\u5ea6\u3001\u5a5a\u59fb\u72c0\u6cc1\u3001\u5e74\u7d00\u4f86\u9810\u6e2c\u6536\u5165\n\n2.\u4f9d\u7167\u6559\u80b2\u7a0b\u5ea6\u3001\u5a5a\u59fb\u72c0\u6cc1\u3001\u5e74\u7d00\u3001\u6536\u5165\u4f86\u9810\u6e2c\u82b1\u8cbb","32a2c8dc":"# \u63a8\u85a6\u7cfb\u7d71\n## \u9810\u8655\u7406","f18b50b2":"## \u79fb\u9664\u96e2\u7fa4\u503c\u8207\u907a\u5931\u503c","1b8230d3":"# What we have?\n\n\n## \u5ba2\u6236\u8cc7\u6599\n\n* ID\uff1a\u5ba2\u6236\u7684ID\n* Year_Birth\uff1a\u5ba2\u6236\u7684\u51fa\u751f\u5e74\u4efd\n* \u6559\u80b2\uff1a\u5ba2\u6236\u7684\u6559\u80b2\u6c34\u5e73\n* Marital_Status\uff1a\u5ba2\u6236\u7684\u5a5a\u59fb\u72c0\u6cc1\n* \u6536\u5165\uff1a\u5ba2\u6236\u7684\u5e74\u5ea6\u5bb6\u5ead\u6536\u5165\n* Kidhome\uff1a\u5ba2\u6236\u5bb6\u4e2d\u7684\u5b69\u5b50\u6578\u91cf\n* Teenhome\uff1a\u5ba2\u6236\u5bb6\u5ead\u4e2d\u7684\u9752\u5c11\u5e74\u4eba\u6578\n* Dt_Customer\uff1a\u5ba2\u6236\u5728\u516c\u53f8\u8a3b\u518a\u7684\u65e5\u671f\n* Recency\uff1a\u81ea\u5ba2\u6236\u4e0a\u6b21\u8cfc\u8cb7\u4ee5\u4f86\u7684\u5929\u6578\n* Complain\uff1a\u5982\u679c\u5ba2\u6236\u5728\u904e\u53bb 2 \u5e74\u5167\u6295\u8a34\uff0c\u5247\u70ba 1\uff0c\u5426\u5247\u70ba 0\n\n## \u7522\u54c1\n\n* MntWines\uff1a\u904e\u53bb\u5169\u5e74\u5728\u8461\u8404\u9152\u4e0a\u7684\u6d88\u8cbb\u91d1\u984d\n* MntFruits\uff1a\u904e\u53bb\u5169\u5e74\u5728\u6c34\u679c\u4e0a\u7684\u82b1\u8cbb\n* MntMeatProducts\uff1a\u904e\u53bb 2 \u5e74\u8089\u985e\u6d88\u8cbb\u91cf\n* MntFishProducts\uff1a\u904e\u53bb 2 \u5e74\u5728\u9b5a\u4e0a\u82b1\u8cbb\u7684\u91d1\u984d\n* MntSweetProducts\uff1a\u904e\u53bb 2 \u5e74\u5728\u7cd6\u679c\u4e0a\u82b1\u8cbb\u7684\u91d1\u984d\n* MntGoldProds\uff1a\u904e\u53bb 2 \u5e74\u5728\u9ec3\u91d1\u4e0a\u82b1\u8cbb\u7684\u91d1\u984d\n\n## Promotion\n\n* NumDealsPurchases\uff1a\u6253\u6298\u7684\u8cfc\u8cb7\u6b21\u6578\n* AcceptedCmp1\uff1a\u5982\u679c\u5ba2\u6236\u5728\u7b2c\u4e00\u500b\u6d3b\u52d5\u4e2d\u63a5\u53d7\u4e86\u5831\u50f9\uff0c\u5247\u70ba 1\uff0c\u5426\u5247\u70ba 0\n* AcceptedCmp2\uff1a\u5982\u679c\u5ba2\u6236\u5728\u7b2c\u4e8c\u500b\u6d3b\u52d5\u4e2d\u63a5\u53d7\u4e86\u5831\u50f9\uff0c\u5247\u70ba 1\uff0c\u5426\u5247\u70ba 0\n* AcceptedCmp3\uff1a\u5982\u679c\u5ba2\u6236\u5728\u7b2c\u4e09\u500b\u6d3b\u52d5\u4e2d\u63a5\u53d7\u4e86\u5831\u50f9\uff0c\u5247\u70ba 1\uff0c\u5426\u5247\u70ba 0\n* AcceptedCmp4\uff1a\u5982\u679c\u5ba2\u6236\u5728\u7b2c 4 \u500b\u6d3b\u52d5\u4e2d\u63a5\u53d7\u4e86\u5831\u50f9\uff0c\u5247\u70ba 1\uff0c\u5426\u5247\u70ba 0\n* AcceptedCmp5\uff1a\u5982\u679c\u5ba2\u6236\u5728\u7b2c 5 \u500b\u6d3b\u52d5\u4e2d\u63a5\u53d7\u4e86\u5831\u50f9\uff0c\u5247\u70ba 1\uff0c\u5426\u5247\u70ba 0\n* Response\uff1a\u5982\u679c\u5ba2\u6236\u5728\u4e0a\u6b21\u6d3b\u52d5\u4e2d\u63a5\u53d7\u4e86\u5831\u50f9\uff0c\u5247\u70ba 1\uff0c\u5426\u5247\u70ba 0\n\n## \u5730\u65b9\n\n* NumWebPurchases\uff1a\u901a\u904e\u516c\u53f8\u7db2\u7ad9\u9032\u884c\u7684\u8cfc\u8cb7\u6b21\u6578\n* NumCatalogPurchases\uff1a\u4f7f\u7528\u76ee\u9304\u9032\u884c\u7684\u8cfc\u8cb7\u6578\u91cf\n* NumStorePurchases\uff1a\u76f4\u63a5\u5728\u5546\u5e97\u8cfc\u8cb7\u7684\u6578\u91cf\n* NumWebVisitsMonth\uff1a\u4e0a\u500b\u6708\u8a2a\u554f\u516c\u53f8\u7db2\u7ad9\u7684\u6b21\u6578","8c5c12a8":"# \u4ee5\u4e0b\u70ba\u53ef\u8996\u5316\u6e96\u5099\u7684\u9810\u8655\u7406","897fc491":"## \u5148\u9a57\u6f14\u7b97\u6cd5\n\u95dc\u806f\u5206\u6790\u662f\u4e00\u7a2e\u5728\u5927\u898f\u6a21\u8cc7\u6599\u96c6\u4e2d\u5c0b\u627e\u76f8\u4e92\u95dc\u4fc2\u7684\u4efb\u52d9\u3002 \u9019\u4e9b\u95dc\u4fc2\u53ef\u4ee5\u6709\u5169\u7a2e\u5f62\u5f0f:\n\n\u983b\u7e41\u9805\u96c6\uff08frequent item sets\uff09: \u7d93\u5e38\u51fa\u73fe\u5728\u4e00\u584a\u7684\u7269\u54c1\u7684\u96c6\u5408\u3002\n\n\u95dc\u806f\u898f\u5247\uff08associational rules\uff09: \u6697\u793a\u5169\u7a2e\u7269\u54c1\u4e4b\u9593\u53ef\u80fd\u5b58\u5728\u5f88\u5f37\u7684\u95dc\u4fc2\u3002\n\n\u512a\u9ede\uff1a\u6613\u7de8\u78bc\u5be6\u73fe\n\n\u7f3a\u9ede\uff1a\u5728\u5927\u6578\u64da\u96c6\u4e0a\u53ef\u80fd\u8f03\u6162\n\n\u9069\u7528\u6578\u64da\u985e\u578b\uff1a\u6578\u503c\u578b\u6216\u8005\u6a19\u6e96\u578b\u6578\u64da\u3002\n"}}