{"cell_type":{"5bf27111":"code","d4044ecb":"code","69e73b2d":"code","413be9f4":"code","1cae89b7":"code","4b37e25a":"code","64836af1":"code","0ce10bcf":"code","3e786b68":"code","e87225c0":"code","f70f1011":"code","e831dc57":"markdown","791b47e7":"markdown","2341dd00":"markdown"},"source":{"5bf27111":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d4044ecb":"import pandas as pd\nfrom sklearn.model_selection import train_test_split","69e73b2d":"data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","413be9f4":"data = data.fillna(0)","1cae89b7":"column_types = []\nfor col in data.columns:\n    if data[col].dtype == 'object':\n        column_types.append(str(col))","4b37e25a":"dtypes = []\nfor col in column_types:\n    column = data[col].unique()\n    for i,val in enumerate(column):\n        #To avoid zero values here i have updating every values +1\n        data[col]=data[col].replace(val , i+1)","64836af1":"training_data = data.drop('SalePrice',axis =1)\nlabel = data['SalePrice']","0ce10bcf":"train_x,test_x,train_y,test_y = train_test_split(training_data,label,test_size = 0.1)","3e786b68":"from sklearn.ensemble import RandomForestRegressor \nreg = RandomForestRegressor()\nreg.fit(train_x,train_y)","e87225c0":"pred = reg.predict(test_x)","f70f1011":"errors = abs(pred - test_y)\nprint('Metrics for Random Forest Trained on Original Data')\n# Calculate mean absolute percentage error (MAPE)\nmape = 100 * (errors \/ test_y)\n# Calculate and display accuracy\naccuracy = 100 - np.mean(mape)\nprint('Accuracy:', round(accuracy, 5), '%.')","e831dc57":"Selecting the object type column to make it to integer type","791b47e7":"Removing the NAN values for the dataset","2341dd00":"Converting Every object to values to integers by the unique values"}}