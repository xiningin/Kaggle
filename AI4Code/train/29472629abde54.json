{"cell_type":{"127fe9e0":"code","4b8749ae":"code","89e7bcf6":"code","907d232c":"code","42089967":"code","fe112713":"code","dc9f6cdd":"code","b2b7d98b":"code","036f6757":"code","ff17c044":"code","4bdb23c5":"code","ab4f75ee":"code","1e7e2964":"code","2ae04fe6":"code","6b061285":"markdown","94f4979a":"markdown","bb5a655b":"markdown","51b43ea4":"markdown","e2a028ff":"markdown","7d592e7c":"markdown","f0f90df8":"markdown","18bc481d":"markdown"},"source":{"127fe9e0":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC","4b8749ae":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","89e7bcf6":"drop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)","907d232c":"train.head()","42089967":"train.columns","fe112713":"def getColumnsExceptOneColumn(df,col):\n    return train.loc[:, train.columns != col].columns.tolist()","dc9f6cdd":"target_col = \"Survived\"\ny = train[target_col]\n\nfeatures = getColumnsExceptOneColumn(train,target_col)\n\n\nX = train[features]\nX_test = test[features]","b2b7d98b":"str_list = [] # empty list to contain columns with strings\nnum_list = []\nfor colname, colvalue in X.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)","036f6757":"str_list","ff17c044":"num_list","4bdb23c5":"!pip install xgboost","ab4f75ee":"from xgboost import XGBClassifier\nxgbc = XGBClassifier()","1e7e2964":"numeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, num_list),\n        ('cat', categorical_transformer, str_list)])\nclf = Pipeline(steps=[('preprocessor', preprocessor),(\"est\", xgbc)])\nclf.fit(X, y)\n\npredictions = clf.predict(X_test)","2ae04fe6":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = predictions\nsubmission.to_csv('submission.csv', index=False)","6b061285":"# Load Data","94f4979a":"# Devide Column ","bb5a655b":"# Delete Columns","51b43ea4":"# Create XGBClassifier default Model ","e2a028ff":"# Set Train data and target \/ Set Test data","7d592e7c":"# install xgboost","f0f90df8":"# Auto Pipeline","18bc481d":"# Submission"}}