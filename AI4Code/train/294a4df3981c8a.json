{"cell_type":{"f718c8a5":"code","c3696f7a":"code","a1cfd459":"code","7701328b":"code","a50c9004":"code","d83177f6":"code","42bfed62":"code","0d04ad0f":"code","b0505f5b":"code","00f98b12":"code","0b3b23ff":"code","c5b223a0":"code","5dce73e2":"code","e0c01c61":"code","577b1976":"code","f91be284":"code","614a7b9a":"code","fa060e6c":"code","8692af4c":"code","b4fcb2ab":"code","e5357538":"code","29eae1a6":"code","fb7fae80":"code","b627a2f4":"code","822c9983":"code","53de02e1":"code","936e0ed8":"code","fc2ad998":"code","0fc4a4b7":"markdown","1805e1b6":"markdown"},"source":{"f718c8a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c3696f7a":"from sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.dummy import DummyRegressor\nfrom sklearn.ensemble import RandomForestRegressor","a1cfd459":" \n    sales_train = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\n    items = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv')\n    shops = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv')\n    item_categories = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\n    test = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')\n    sample_submission = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')","7701328b":"    item_categories","a50c9004":"    items","d83177f6":"sales_train","42bfed62":"    sample_submission\n    ","0d04ad0f":"    shops\n","b0505f5b":"    test\n","00f98b12":"sales_train.info()","0b3b23ff":"type(sales_train['date'])\n","c5b223a0":"sales_train.head()","5dce73e2":"test.tail()","e0c01c61":"print(sorted(sales_train['shop_id'].unique()))\n","577b1976":"print(sorted(test['shop_id'].unique()))\n","f91be284":"gp = sales_train.groupby(['date_block_num', 'shop_id', 'item_id']).agg({'item_cnt_day': ['sum']})","614a7b9a":"X = np.array(list(map(list, gp.index.values)))\ny_train = gp.values","fa060e6c":"test['date_block_num'] = sales_train['date_block_num'].max() + 1\nX_test = test[['date_block_num', 'shop_id', 'item_id']].values","8692af4c":"oh0 = OneHotEncoder(categories='auto').fit(X[:,0].reshape(-1, 1))\nx0 = oh0.transform(X[:,0].reshape(-1, 1))","b4fcb2ab":"oh1 = OneHotEncoder(categories='auto').fit(X[:,1].reshape(-1, 1))\nx1 = oh1.transform(X[:,1].reshape(-1, 1))\nx1_t = oh1.transform(X_test[:,1].reshape(-1, 1))","e5357538":"print(X[:, :1].shape, x1.toarray().shape, X[:, 2:].shape)\nX_train = np.concatenate((X[:, :1], x1.toarray(), X[:, 2:]), axis=1)\nX_test = np.concatenate((X_test[:, :1], x1_t.toarray(), X_test[:, 2:]), axis=1)","29eae1a6":"dmy = DummyRegressor().fit(X_train, y_train)\n","fb7fae80":"reg = LinearRegression().fit(X_train, y_train)\n","b627a2f4":"rfr = RandomForestRegressor().fit(X_train, y_train.ravel())\n","822c9983":"rmse_dmy = np.sqrt(mean_squared_error(y_train, dmy.predict(X_train)))\nprint('Dummy RMSE: %.4f' % rmse_dmy)\nrmse_reg = np.sqrt(mean_squared_error(y_train, reg.predict(X_train)))\nprint('LR RMSE: %.4f' % rmse_reg)\nrmse_rfr = np.sqrt(mean_squared_error(y_train, rfr.predict(X_train)))\nprint('RFR RMSE: %.4f' % rmse_rfr)","53de02e1":"y_test = rfr.predict(X_test)","936e0ed8":"sample_submission['item_cnt_month'] = y_test\n","fc2ad998":"sample_submission.to_csv('xgb_submission.csv', index=False)","0fc4a4b7":"# import libraries","1805e1b6":"# Data Loading"}}