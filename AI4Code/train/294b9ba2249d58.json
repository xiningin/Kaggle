{"cell_type":{"584c733e":"code","45aba85d":"code","6ecd2d30":"code","72cac7ee":"code","4d3acd19":"code","0a415143":"code","c4cf144c":"code","3d835a14":"code","1c114e59":"markdown","704133f6":"markdown","e8aaefcf":"markdown","ced6f4c2":"markdown","fc248f9c":"markdown","004e762c":"markdown","d9752008":"markdown"},"source":{"584c733e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45aba85d":"#Import\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, median_absolute_error\nimport matplotlib.pyplot as plt","6ecd2d30":"#Data\ndata = pd.read_csv('\/kaggle\/input\/salary-data-simple-linear-regression\/Salary_Data.csv')\nX = data.iloc[:, :1]\ny = data.iloc[:, 1:]\ndata.head()","72cac7ee":"#Splitting\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.33, random_state=0, shuffle=True)","4d3acd19":"#Model\nLinearRegressionModel = LinearRegression(copy_X=True, fit_intercept=True, normalize=True)\nLinearRegressionModel.fit(X,y)\nprint(\"Linear Regression Train Score: \",LinearRegressionModel.score(X_train, y_train))\nprint(\"Linear Regression Test Score: \",LinearRegressionModel.score(X_test, y_test))","0a415143":"#Predict\ny_pred = LinearRegressionModel.predict(X_test)","c4cf144c":"#Metrices\nMAEValue = mean_absolute_error(y_test, y_pred, multioutput='uniform_average')\nprint('Mean Absolute Error: ', MAEValue)\n\nMSEValue = mean_squared_error(y_test, y_pred, multioutput='uniform_average')\nprint('Mean Squared Error: ', MSEValue)\n\nMdSEValue = median_absolute_error(y_test, y_pred, multioutput='uniform_average')\nprint('Median Absolute Error: ', MdSEValue)","3d835a14":"#Graph\nplt.style.use('seaborn-whitegrid')\nax = plt.axes()\nax.set(xlabel='X-Train', ylabel='Y-Train and Y-Predict', title='Relationship between Y-Test and Y-Predict')\nplt.scatter(X_test,y_test, alpha=.5, label='Test')\nplt.plot(X_test,y_pred, label='Predict')\nplt.legend(prop={'size': 16})","1c114e59":"**Import The Data**","704133f6":"**Import the needed libraries and classes.**","e8aaefcf":"**We make the prediction using \"X_test\" after editing**","ced6f4c2":"**We make our regression using \"LinearRegression\"**","fc248f9c":"**Prepare The Data:**\nMake 4 variables to split the data to X and y for training and testing.","004e762c":"This graph shows the relationship between Testing Data and Predicted Data\n\n> The Green color refers to the real testing data and The Yellow color refers to the predicted data.","d9752008":"**We calculate the percentage of the error using \"mean_absolute_error\" , \"mean_squared_error\" and \"median_absolute_error\"**"}}