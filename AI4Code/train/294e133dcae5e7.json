{"cell_type":{"a8a071bb":"code","09a72687":"code","17388b77":"code","955f21d3":"code","bad83434":"code","19f336de":"code","18a7dfdd":"code","a4a27b5c":"code","1c41d7f8":"code","7f4ab222":"code","a390ca4d":"code","75472f0e":"code","f6f16684":"code","8a72a34d":"code","6290dcc5":"code","8e82c04f":"code","5b410f14":"code","f1aed5b9":"code","43ba9165":"code","177b2182":"code","9ce98bdd":"code","6db38eed":"code","55e9920a":"code","70df4f74":"code","bbd219f2":"code","b10fcb20":"code","245e92b1":"code","056e8910":"code","5c487b37":"code","e46c81ab":"code","8a15bba5":"code","1c28f9d3":"code","046591e5":"code","a323a878":"code","f868947f":"code","8596a1bf":"code","a5861059":"code","d47834a3":"code","417a0700":"code","2e558f32":"code","d2dfb719":"code","811d821c":"code","15a0df16":"code","78d61373":"code","825e5e81":"markdown","d9d2cba2":"markdown"},"source":{"a8a071bb":"#import the required libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","09a72687":"#separate training and testing data\n\ntrain=pd.read_csv(\"..\/input\/titanic\/train.csv\")","17388b77":"test=pd.read_csv('..\/input\/titanic\/test.csv')","955f21d3":"corr=train.corr()\ntop_co=corr.index\nplt.figure(figsize=(20,20))\ng=sns.heatmap(train[top_co].corr(),annot=True,cmap=\"RdYlGn\")","bad83434":"#check the heatmap to analyze if there are null\/none\/empty values in the data\n\nsns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","19f336de":"#imputing the data with the median\ntrain['Age']=train['Age'].median()","18a7dfdd":"#Drop columns that do not contribute to the prediction\n\ntrain.drop(['PassengerId', 'Ticket'], axis=1, inplace=True)\ntest.drop(['PassengerId', 'Ticket'], axis=1, inplace=True)","a4a27b5c":"train.isna().sum()","1c41d7f8":"train['Embarked'].mode()","7f4ab222":"test.isna().sum()","a390ca4d":"test['Age']=test['Age'].median()","75472f0e":"train.drop(['Cabin'], axis=1, inplace=True)\ntest.drop(['Cabin'], axis=1, inplace=True)","f6f16684":"# Get Title from Name for train\ntrain_title = [i.split(\",\")[1].split(\".\")[0].strip() for i in train[\"Name\"]]\ntrain[\"Title\"] = pd.Series(train_title)\ntrain[\"Title\"].head()","8a72a34d":"g = sns.countplot(x=\"Title\",data=train)\ng = plt.setp(g.get_xticklabels(), rotation=45) ","6290dcc5":"#Convert to categorical values Title \ntrain[\"Title\"] = train[\"Title\"].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ntrain[\"Title\"] = train[\"Title\"].map({\"Master\":0, \"Miss\":1, \"Ms\" : 1 , \"Mme\":1, \"Mlle\":1, \"Mrs\":1, \"Mr\":2, \"Rare\":3})\ntrain[\"Title\"] = train[\"Title\"].astype(int)\n\n","8e82c04f":"# Get Title from Name for train\ntest_title = [i.split(\",\")[1].split(\".\")[0].strip() for i in test[\"Name\"]]\ntest[\"Title\"] = pd.Series(test_title)\ntest[\"Title\"].head()","5b410f14":"g = sns.countplot(x=\"Title\",data=test)\ng = plt.setp(g.get_xticklabels(), rotation=45) ","f1aed5b9":"#Convert to categorical values Title \ntest[\"Title\"] = test[\"Title\"].replace(['Col', 'Dr', 'Rev', 'Dona'], 'Rare')\ntest[\"Title\"] = test[\"Title\"].map({\"Master\":0, \"Miss\":1, \"Ms\" : 1  ,\"Mrs\":1, \"Mr\":2, \"Rare\":3})\ntest[\"Title\"] = test[\"Title\"].astype(int)","43ba9165":"train.isna().sum()","177b2182":"test.isna().sum()","9ce98bdd":"train['Embarked'].fillna('S',inplace=True)","6db38eed":"test.Fare = test['Fare'].fillna(train['Fare'].median())","55e9920a":"train=train.drop('Name',axis=1)","70df4f74":"test=test.drop('Name',axis=1)","bbd219f2":"train['FamilySize'] = train['Parch'] + train['SibSp'] + 1 ","b10fcb20":"test['FamilySize'] = test['Parch'] + test['SibSp'] + 1 ","245e92b1":"# drop the variable 'SibSp' as we have already created a similar variable FamilySize\ntrain = train.drop(['SibSp'], axis = 1)\ntest  = test.drop(['SibSp'], axis = 1)","056e8910":"train.head()","5c487b37":"test.head()","e46c81ab":"train['Sex']=train[\"Sex\"].replace({'male':0,'female':1})\ntest['Sex']=test[\"Sex\"].replace({'male':0,'female':1})","8a15bba5":"train['Embarked']=train[\"Embarked\"].replace({'C':0,'S':1,'Q':3})","1c28f9d3":"test['Embarked']=test[\"Embarked\"].replace({'C':0,'S':1,'Q':3})","046591e5":"# seperate the feature set and the target set\nY_train = train[\"Survived\"]\nX_train = train.drop(labels = [\"Survived\"],axis = 1)\nX_test = test","a323a878":"from sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","f868947f":"model = RandomForestClassifier(n_estimators=250, min_samples_leaf=4, n_jobs=-1)\nmodel.fit(X_train, Y_train)\nmodel.score(X_train, Y_train)","8596a1bf":"X_test=test\ny_predi=model.predict(X_test)","a5861059":"gn=pd.read_csv('..\/input\/titanic\/gender_submission.csv')","d47834a3":"Y_test=gn['Survived'].values","417a0700":"accuracy_score(Y_test,y_predi)","2e558f32":"confusion_matrix(Y_test,y_predi)","d2dfb719":"test1=pd.read_csv('..\/input\/titanic\/test.csv')","811d821c":"data_to_submit = pd.DataFrame({\n    'PassengerId':test1['PassengerId'],\n    'Survived':y_predi\n})\ndata_to_submit.to_csv('finalsub4.csv', index = False)","15a0df16":"data_to_submit.head()","78d61373":"data_to_submit.count()","825e5e81":"#model Creation ","d9d2cba2":"Creating Family Size for train and test data"}}