{"cell_type":{"40c473e9":"code","4f977949":"code","35c14809":"code","f1d5966a":"code","a3770e7b":"code","690a0b2b":"code","744c01b7":"code","6bf8b237":"code","a097748a":"code","92f0e51f":"code","854dabbe":"code","f8d204f1":"code","671f81aa":"code","d8c21c9d":"code","c9e1a032":"code","95d7c2b8":"code","d75d3918":"code","f6c5540b":"code","46ef6fab":"code","f08044bb":"code","f87ed45c":"code","be078526":"code","2533492e":"code","9a060c9f":"code","cf776c47":"code","9ef56c3e":"code","66973d14":"code","c540ba23":"code","7c914786":"code","f896736b":"code","43e8d022":"code","11bf602f":"markdown","3e0c92b1":"markdown","f0860213":"markdown","0fd0728a":"markdown","bc1e6043":"markdown","23fdbc9e":"markdown","b06a4084":"markdown","bc5c36c1":"markdown","10e8ee85":"markdown"},"source":{"40c473e9":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))","4f977949":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","35c14809":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","f1d5966a":"train.info()","a3770e7b":"test.info()","690a0b2b":"all = pd.concat([train, test], sort = False)\nall.info()","744c01b7":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","6bf8b237":"all.info()","a097748a":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","92f0e51f":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","854dabbe":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","f8d204f1":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","671f81aa":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","d8c21c9d":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","c9e1a032":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","95d7c2b8":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","d75d3918":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","f6c5540b":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","46ef6fab":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","f08044bb":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","f87ed45c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101, stratify = all_train['Survived'])","be078526":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier","2533492e":"ada = AdaBoostClassifier(DecisionTreeClassifier(),n_estimators=100, random_state=0)\nada.fit(X_train,y_train)","9a060c9f":"predictions = ada.predict(X_test)","cf776c47":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","9ef56c3e":"print (f'Train Accuracy - : {ada.score(X_train,y_train):.3f}')\nprint (f'Test Accuracy - : {ada.score(X_test,y_test):.3f}')","66973d14":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","c540ba23":"t_pred = ada.predict(TestForPred).astype(int)","7c914786":"PassengerId = all_test['PassengerId']","f896736b":"adaSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nadaSub.head()","43e8d022":"adaSub.to_csv(\"1_Ada_Submission.csv\", index = False)","11bf602f":"****Extra Features:","3e0c92b1":"****Check Accuracy","f0860213":"****Build AdaBoost","0fd0728a":"****Final Predictions","bc1e6043":"# Import Libraries","23fdbc9e":"# Import Data","b06a4084":"## Combine train and test","bc5c36c1":"****Train\/Test Split","10e8ee85":"****Check Accuracy"}}