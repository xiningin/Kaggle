{"cell_type":{"57ea3040":"code","b9aa6eaf":"code","a6e0ed83":"code","b4c30a84":"code","9d71ae22":"code","66c339eb":"code","029f4525":"code","87025d40":"code","886fd5a3":"code","c5df58ec":"code","4bef76f0":"code","bdd27360":"code","cb9f341d":"code","b103e4e8":"code","dfc36d19":"code","d5ed9e4f":"code","3b6f97b4":"code","7ae1c4fe":"code","2e38c4c9":"code","cc38ea29":"code","c1b0fd16":"code","83618da7":"code","6363c3c8":"code","37793597":"code","ba750bdb":"code","bdc1dd57":"code","c68e76a3":"code","c95797cc":"code","e283878d":"code","715e0abc":"code","aeeb58b2":"code","69270907":"code","be8d22cb":"code","00462b25":"code","0c31661c":"code","9a96116b":"code","d1559c24":"markdown","3ec7dbf2":"markdown","378c821b":"markdown","f155c243":"markdown","f3ae3a56":"markdown","4bb6a9b1":"markdown","6e8b79cc":"markdown","97bd1bba":"markdown","98cd61a4":"markdown","d87ce4f6":"markdown","c61e82f3":"markdown","741ce9bf":"markdown","9516bccb":"markdown","74c7cbe3":"markdown","4d9d0e31":"markdown","046fd323":"markdown","4cf9efa0":"markdown","57699dd3":"markdown","34b74ddf":"markdown","a46508f1":"markdown","1a568047":"markdown","7ea57a54":"markdown","194dd2cb":"markdown","820b90eb":"markdown","8075b6fb":"markdown","c78c4f11":"markdown","ca37e386":"markdown","78980475":"markdown","748dcb04":"markdown","7c2664e8":"markdown","ee77a428":"markdown","4d90d21a":"markdown","9c5dfee5":"markdown","9042463d":"markdown","5de06da0":"markdown","1bdf11ae":"markdown"},"source":{"57ea3040":"!pip install chart_studio","b9aa6eaf":"import pandas as pd\nimport numpy as np\n\n\nfrom chart_studio.plotly import plot, iplot as py\n\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot, init_notebook_mode\n\nimport cufflinks\ncufflinks.go_offline(connected=True)\ninit_notebook_mode(connected=True)\n\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\n\nimport plotly.io as pio\npio.templates","a6e0ed83":"!ls ..\/input\/cocolate\/chocolate.csv\n","b4c30a84":"df=pd.read_csv(\"..\/input\/cocolate\/chocolate.csv\", index_col=\"serial\")\ndf.head()","9d71ae22":"df.shape","66c339eb":"for col in df.columns:\n    print(col)","029f4525":"col_to_boolean= [\"beans\",\"cocoa_butter\",\"vanilla\",\"lecithin\",\"salt\",\"sugar\",\"sweetener_without_sugar\"]\n\ndef have_not_have_to_bool(x):\n    if \"have_not\" in x:\n        y=0\n    else:\n        y=1\n    return y\n\nfor col in col_to_boolean:\n    df[col]=df[col].apply(have_not_have_to_bool)\ndf.head()","87025d40":"df.describe()","886fd5a3":"col_for_normal=[\"cocoa_percent\",\"rating\",\"counts_of_ingredients\"]\n\nfig = make_subplots(rows=1, cols=3)\n\nfor col in col_for_normal:\n    \n    i=col_for_normal.index(col)\n    \n    \n    fig.add_trace(\n        go.Histogram(x=df[col],\n                     histnorm='probability',\n                     name=col,),\n        \n        row=1,\n        col=col_for_normal.index(col)+1\n    )\n\n\nfig.update_layout(height=500, width=1000, title_text=\"Histogram\")\nfig.show()","c5df58ec":"col_for_normal=[\"cocoa_percent\",\"rating\",\"counts_of_ingredients\"]\n\nfig = make_subplots(rows=1, cols=3)\n\nfor col in col_for_normal:\n    \n    i=col_for_normal.index(col)\n    \n    \n    fig.add_trace(\n        go.Box(y=df[col], name=col),\n    \n        row=1,\n        col=col_for_normal.index(col)+1\n    )\n\n\nfig.update_layout(height=500, width=1000, title_text=\"Histogram\")\nfig.show()","4bef76f0":"col_for_normal=[\"cocoa_percent\",\"rating\",\"counts_of_ingredients\"]\n\ncorr_dict=[]\nfor col in col_for_normal:\n    corr_dict.append(\n        dict(label=col,values=df[col]),\n    )\n    \n\n\nfig = go.Figure(data=go.Splom(\n                dimensions=corr_dict,\n#                 diagonal_visible=False, # remove plots on diagonal\n                ))\n\n\nfig.update_layout(\n    title=\"Scatter Plot\",\n    width=1000,\n    height=1000,\n)\n\nfig.show()","bdd27360":"col_for_normal=[\"cocoa_percent\",\"rating\",\"counts_of_ingredients\"]\n\ndf_cor=df[col_for_normal].corr()\n\nprint(df_cor)\nimport plotly.express as px\n\nfig = px.imshow(df_cor)\n\nfig.update_layout(\n    title='Heat Map',\n    width=500,\n    height=500,\n)\n\nfig.show()","cb9f341d":"import statsmodels.api as sm\n\ncol_for_normal=[\"cocoa_percent\",\"rating\"]\nX=df[[\"cocoa_percent\",\"counts_of_ingredients\"]]\ny=df[[\"rating\"]]\nX = sm.add_constant(X)\n\nmodel = sm.OLS(y,X)\n\nresults = model.fit()\nresults.summary()","b103e4e8":"df.head()","dfc36d19":"X=df[[\"cocoa_percent\",\"counts_of_ingredients\",\"beans\",\"cocoa_butter\",\"lecithin\",\"salt\",\"vanilla\",\"sugar\",\"sweetener_without_sugar\"]]\ny=df[[\"rating\"]]\n\nmodel = sm.OLS(y, X)\n\nresults = model.fit()\n\nresults.summary()","d5ed9e4f":"X=df[[\"cocoa_butter\",\"sugar\",\"vanilla\",\"sweetener_without_sugar\"]]\n     \ny=df[[\"rating\"]]\n\nmodel = sm.OLS(y, X)\nresults = model.fit()\n\nresults.summary()","3b6f97b4":"results.params","7ae1c4fe":"from sklearn.decomposition import PCA\n\nX=df[[\"cocoa_butter\",\"sugar\",\"vanilla\",\"sweetener_without_sugar\"]]\n# X=df[[\"cocoa_percent\",\"counts_of_ingredients\",\"beans\",\"cocoa_butter\",\"lecithin\",\"salt\",\"vanilla\",\"sugar\",\"sweetener_without_sugar\"]]\n\n\npca = PCA(n_components=2)\nprincipalComponents = pca.fit_transform(X)\n\npca_df= pd.DataFrame(data = principalComponents\n             , columns = ['pca1', 'pca2',], index=df.index)\n\npca_df[\"rating\"]=df[\"rating\"].round(1).astype(float)\npca_df[\"rating\"]*=10\npca_df[\"rating\"]=pca_df[\"rating\"].astype(int)\ndisplay(pca_df.head())\n\n\nfig = go.Figure(data=go.Scatter(\n                x=pca_df[\"pca1\"], y=pca_df[\"pca2\"],\n                mode='markers',\n                hovertext=pca_df[\"rating\"],\n                marker=dict(\n                    size=16,\n                    color=pca_df[\"rating\"],\n                    colorscale='aggrnyl',\n#                     colorscale=\"blues\",\n                    showscale=True)\n                ))\n\n\nfig.update_layout(title='Using PCA to reduce dimension',width=600,height=600)\n\nfig.show()","2e38c4c9":"from sklearn.cluster import KMeans\n\nkmeans = KMeans(n_clusters=6, random_state=0).fit(pca_df)\nkmeans.labels_\n\npca_df[\"label\"]=kmeans.labels_\ndisplay(pca_df.head())\n\n\n\nfig = px.scatter(pca_df, x=\"pca1\", y=\"pca2\", color=\"rating\",  size=\"rating\",hover_data=[\"rating\"], )\nfig.update_layout( title=\"Rating\", width=500, height=400 ,)\nfig.show()\n\n\nfig = px.scatter(pca_df, x=\"pca1\", y=\"pca2\", color=\"label\",size=\"rating\", hover_data=[\"rating\",\"label\"])\nfig.update_layout( title=\"Cluster\", width=500, height=400 )\nfig.show()","cc38ea29":"kmean_df=pca_df[[\"rating\",\"label\"]].groupby(\"label\").mean()\nkmean_df[\"std\"]=pca_df[[\"rating\",\"label\"]].groupby(\"label\").std()[\"rating\"]\ndisplay(kmean_df)","c1b0fd16":"good_df=df[pca_df[\"label\"]==3]\n\nmy_order = good_df.groupby(by=[\"company\"])[\"rating\"].mean().iloc[::-1].index\nmy_order=my_order[:20]\nmy_order\n\ngood_df=good_df[good_df[\"company\"].isin(my_order)]\ndisplay(good_df.head())\n\ngood_df.groupby([\"company\",\"review_date\"])[\"rating\"].mean()","83618da7":"from wordcloud import WordCloud\nfrom matplotlib import pyplot as plt\n\n\ncol_to_combi=[\"first_taste\",\"second_taste\",\"third_taste\",\"fourth_taste\"]\n\ntext=[]\nfor col in col_to_combi:\n    t=good_df[col].tolist()\n    text.extend(t)\nclean_text=\"\"\nfor t in text:\n    if not pd.isna(t):\n        clean_text+= (str(t) +\",\")\n    else:\n        pass\n\nword_cloud = WordCloud(collocations = False, background_color = 'white').generate(clean_text)\nplt.imshow(word_cloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","6363c3c8":"import matplotlib.pyplot as plt\nimport seaborn as sns","37793597":"year_list=sorted(set(df[\"review_date\"]))\n\nfig = plt.figure(figsize=(20,20))\n\na=3\nb=5\nc=1\n\np=sns.color_palette(\"Paired\")\np.extend(p)\n\n\nfor year in year_list:\n    plt.subplot(a,b,c)\n    plt.title(year)\n    sns.kdeplot(data=df[df[\"review_date\"]==year], x=\"rating\", fill=True,color=p[c-1])\n    c+=1\n    \nplt.show()","ba750bdb":"fig = plt.figure(figsize=(20,20))\nsns.boxplot(data=df,x=\"review_date\",y=\"rating\").set_title(\"Rating vs Years Box Plot\")","bdc1dd57":"fig = plt.figure(figsize=(5,5))\n\nstd_df=df[[\"review_date\",\"rating\"]].groupby([\"review_date\"]).std().reset_index()\nsns.lineplot(x=std_df[\"review_date\"],y=std_df[\"rating\"]).set_title(\"Standard Deviation vs Time\")","c68e76a3":"fig = plt.figure(figsize=(5,5))\n\nmean_df=df[[\"review_date\",\"rating\"]].groupby([\"review_date\"]).mean().reset_index()\nsns.lineplot(x=mean_df[\"review_date\"],y=mean_df[\"rating\"]).set_title(\"Rating vs Time\")","c95797cc":"fig = plt.figure(figsize=(10,20))\nmy_order = df.groupby(by=[\"company_location\"])[\"rating\"].mean().iloc[::-1].index\nsns.boxplot(data=df,x=\"rating\",y=\"company_location\", orient=\"h\", order=my_order)\nplt.show()","e283878d":"fig = plt.figure(figsize=(20,10))\n\nmy_order = df.groupby(by=[\"company\"])[\"rating\"].median().iloc[::-1].index\nmy_order_20=my_order[:20]\n\ncomp_df=df[df[\"company\"].isin(my_order_20)]\n\nsns.boxplot(data=comp_df,x=\"company\",y=\"rating\", orient=\"v\", order=my_order_20)\nplt.xticks(rotation=80, fontsize=15)\n\n\nplt.show()","715e0abc":"fig = plt.figure(figsize=(20,10))\n\nmy_order = df.groupby(by=[\"country_of_bean_origin\"])[\"rating\"].mean().iloc[::-1].index\nmy_order_20=my_order[:20]\n\ncomp_df=df[df[\"country_of_bean_origin\"].isin(my_order_20)]\n\nsns.boxplot(data=comp_df,x=\"country_of_bean_origin\",y=\"rating\", orient=\"v\", order=my_order_20)\nplt.xticks(rotation=60, fontsize=15)\n\nplt.show()","aeeb58b2":"fig = plt.figure(figsize=(20,30))\n\na=4\nb=5\nc=1\n\n\nmy_order = df.groupby(by=[\"company\"])[\"rating\"].median().iloc[::-1].index\nmy_order_20=my_order[:20]\n\ncomp_df=df[df[\"company\"].isin(my_order_20)]\n\n\nfor company in my_order_20:\n    plt.subplot(a,b,c)\n    plt.title(company)\n    sns.lineplot(data=comp_df[comp_df[\"company\"]==company], x=\"review_date\",y=\"rating\")\n    c+=1\n    \nplt.show()","69270907":"# twenty-four-blackbirds, Zokoko\n\nmaster_df=df[df[\"company\"]==\"twenty-four blackbirds\"]\n\ndisplay(master_df.head())\n\nmaster_df.groupby([\"rating\",\"country_of_bean_origin\",\"first_taste\",\"second_taste\"]).sum()","be8d22cb":"!pip install jupyter_dash dash_bootstrap_components","00462b25":"import plotly.express as px\nfrom jupyter_dash import JupyterDash\nimport dash_core_components as dcc\nimport dash_html_components as html\nfrom dash.dependencies import Input, Output\nimport dash_bootstrap_components as dbc","0c31661c":"df.head()","9a96116b":"external_stylesheets = ['https:\/\/codepen.io\/chriddyp\/pen\/bWLwgP.css']\n\n\napp = JupyterDash(__name__, external_stylesheets=external_stylesheets)\n\n\napp.layout = html.Div([\n\n    html.H1(\"Web Application Dashboards with Dash\", style={'text-align': 'center'}),\n        \n    \n    \n    dcc.Slider(\n        id='year-slider',\n        min=df['review_date'].min(),\n        max=df['review_date'].max(),\n        value=df['review_date'].min(),\n        marks={str(year): str(year) for year in df['review_date'].unique()},\n        step=None\n    ),\n   \n    dcc.Dropdown(\n        id='graph-dropdown',\n        \n        options=[\n            {'label': 'Scatter', 'value': 'scatter'},\n            {'label': 'Box Plot', 'value': 'boxplot'},\n            {'label': 'Bar Plot', 'value': 'barplot'},\n            \n        ],\n        value='scatter'\n    ),\n            \n    dcc.Graph(id='graph-with-slider'),\n    \n    \n#     html.Label('Dropdown'),\n#     dcc.Dropdown(\n#         options=[\n#             {'label': 'New York City', 'value': 'NYC'},\n#             {'label': u'Montr\u00e9al', 'value': 'MTL'},\n#             {'label': 'San Francisco', 'value': 'SF'}\n#         ],\n#         value='MTL'\n#     ),\n\n#     html.Label('Multi-Select Dropdown'),\n#     dcc.Dropdown(\n#         options=[\n#             {'label': 'New York City', 'value': 'NYC'},\n#             {'label': u'Montr\u00e9al', 'value': 'MTL'},\n#             {'label': 'San Francisco', 'value': 'SF'}\n#         ],\n#         value=['MTL', 'SF'],\n#         multi=True\n#     ),\n\n#     html.Label('Radio Items'),\n#     dcc.RadioItems(\n#         options=[\n#             {'label': 'New York City', 'value': 'NYC'},\n#             {'label': u'Montr\u00e9al', 'value': 'MTL'},\n#             {'label': 'San Francisco', 'value': 'SF'}\n#         ],\n#         value='MTL'\n#     ),\n\n#     html.Label('Checkboxes'),\n#     dcc.Checklist(\n#         options=[\n#             {'label': 'New York City', 'value': 'NYC'},\n#             {'label': u'Montr\u00e9al', 'value': 'MTL'},\n#             {'label': 'San Francisco', 'value': 'SF'}\n#         ],\n#         value=['MTL', 'SF']\n#     ),\n\n#     html.Label('Text Input'),\n#     dcc.Input(id='my-input', value='initial value', type='text'),\n\n#     html.Label('Text Output'),\n#     html.Div(id='my-output'),\n    \n    \n    \n#     html.Label('Slider'),\n#     dcc.Slider(\n#         min=0,\n#         max=9,\n#         marks={i: 'Label {}'.format(i) if i == 1 else str(i) for i in range(1, 6)},\n#         value=5,\n#     ),\n\n    \n    \n])\n\n@app.callback(\n    Output('graph-with-slider', 'figure'),\n    Input('year-slider', 'value'),\n    Input('graph-dropdown', 'value')\n)\n\n\n\n\ndef update_figure(selected_year,graph_type):\n    filtered_df = df[df.review_date == selected_year]\n\n    \n    if graph_type==\"boxplot\":\n        \n        fig = px.box(filtered_df, x='company_location', y='rating',\n                    hover_name=\"company\",\n                    color=\"company_location\")\n \n        fig.update_layout(transition_duration=500)\n\n    elif graph_type==\"barplot\":\n        \n        fig = px.bar(filtered_df, x='company_location', y='rating',\n                    color=\"rating\", hover_name=\"company\",)\n \n        fig.update_layout(transition_duration=500)\n\n    elif graph_type==\"scatter\":\n        fig = px.scatter(filtered_df, x=\"company_location\", y=\"rating\",\n                         color=\"rating\", hover_name=\"company\",\n                         size=\"counts_of_ingredients\",\n    #                      log_x=True, \n                         size_max=55\n                        )\n\n        fig.update_layout(transition_duration=500)\n\n    return fig\n\n# ------------------------------------------------------------------------------\nif __name__ == '__main__':\n    app.run_server(mode='inline',debug=True)","d1559c24":"### General Stats","3ec7dbf2":"## Q: Which company makes the best choclate ?","378c821b":"* Numerical regression= OLS\n* Nominal regression = probit \n* Ordinal regression = logit","f155c243":"## Trailer of data","f3ae3a56":"## Q: Recipie of which company should we follow ?  \n","4bb6a9b1":"## Stepwise OLS","6e8b79cc":"* If the p-value is less than 0.05, \n\n    - we reject the null hypothesis that there's no difference between the means and conclude that a significant difference does exist. If the p-value is larger than 0.05, we cannot conclude that a significant difference exists.03-Dec-2015\n\n* H0:that there's no difference between the means\n* H1:difference exist","97bd1bba":"### Standard Deviation\n","98cd61a4":"## Q: Does Rating change evry year ?\n### Normal Distribution","d87ce4f6":"### Column Names","c61e82f3":"### Boxplot","741ce9bf":"# 4. Final Dashboard","9516bccb":"## KDE - Normal \n## Histogram\n","74c7cbe3":"## Master Choclatier?","4d9d0e31":"1. So much data, do not know what to do 90%\n2. Knows about data, but not good questions 9%  \n3. Knows exact question and exact answers 1%   (Social Media platforms, Shopping platform, Advance Daignostic Transport Platform)\n\nData: http:\/\/flavorsofcacao.com\/index.html","046fd323":"### Mean Rating over time ","4cf9efa0":"### Converting haves and haves_not","57699dd3":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><ul class=\"toc-item\"><li><span><a href=\"#Loading-Libraries\" data-toc-modified-id=\"Loading-Libraries-0.1\"><span class=\"toc-item-num\">0.1&nbsp;&nbsp;<\/span>Loading Libraries<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Descriptive-Analysis\" data-toc-modified-id=\"Descriptive-Analysis-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Descriptive Analysis<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Trailer-of-data\" data-toc-modified-id=\"Trailer-of-data-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;<\/span>Trailer of data<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Shape\" data-toc-modified-id=\"Shape-1.1.1\"><span class=\"toc-item-num\">1.1.1&nbsp;&nbsp;<\/span>Shape<\/a><\/span><\/li><li><span><a href=\"#Column-Names\" data-toc-modified-id=\"Column-Names-1.1.2\"><span class=\"toc-item-num\">1.1.2&nbsp;&nbsp;<\/span>Column Names<\/a><\/span><\/li><li><span><a href=\"#Converting-haves-and-haves_not\" data-toc-modified-id=\"Converting-haves-and-haves_not-1.1.3\"><span class=\"toc-item-num\">1.1.3&nbsp;&nbsp;<\/span>Converting haves and haves_not<\/a><\/span><\/li><li><span><a href=\"#General-Stats\" data-toc-modified-id=\"General-Stats-1.1.4\"><span class=\"toc-item-num\">1.1.4&nbsp;&nbsp;<\/span>General Stats<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#KDE---Normal\" data-toc-modified-id=\"KDE---Normal-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;<\/span>KDE - Normal<\/a><\/span><\/li><li><span><a href=\"#Histogram\" data-toc-modified-id=\"Histogram-1.3\"><span class=\"toc-item-num\">1.3&nbsp;&nbsp;<\/span>Histogram<\/a><\/span><\/li><li><span><a href=\"#Box-PLot\" data-toc-modified-id=\"Box-PLot-1.4\"><span class=\"toc-item-num\">1.4&nbsp;&nbsp;<\/span>Box PLot<\/a><\/span><\/li><li><span><a href=\"#Scatter-Plot\" data-toc-modified-id=\"Scatter-Plot-1.5\"><span class=\"toc-item-num\">1.5&nbsp;&nbsp;<\/span>Scatter Plot<\/a><\/span><\/li><li><span><a href=\"#Heat-Map\" data-toc-modified-id=\"Heat-Map-1.6\"><span class=\"toc-item-num\">1.6&nbsp;&nbsp;<\/span>Heat Map<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Predcitive\" data-toc-modified-id=\"Predcitive-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Predcitive<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#OLS-v1-adding-only-nominal-variables\" data-toc-modified-id=\"OLS-v1-adding-only-nominal-variables-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;<\/span>OLS v1 adding only nominal variables<\/a><\/span><\/li><li><span><a href=\"#OLS-v2-adding-all-variables\" data-toc-modified-id=\"OLS-v2-adding-all-variables-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;<\/span>OLS v2 adding all variables<\/a><\/span><\/li><li><span><a href=\"#Stepwise-OLS\" data-toc-modified-id=\"Stepwise-OLS-2.3\"><span class=\"toc-item-num\">2.3&nbsp;&nbsp;<\/span>Stepwise OLS<\/a><\/span><\/li><li><span><a href=\"#PCA\" data-toc-modified-id=\"PCA-2.4\"><span class=\"toc-item-num\">2.4&nbsp;&nbsp;<\/span>PCA<\/a><\/span><\/li><li><span><a href=\"#Clustering\" data-toc-modified-id=\"Clustering-2.5\"><span class=\"toc-item-num\">2.5&nbsp;&nbsp;<\/span>Clustering<\/a><\/span><\/li><li><span><a href=\"#Verifying-clusters\" data-toc-modified-id=\"Verifying-clusters-2.6\"><span class=\"toc-item-num\">2.6&nbsp;&nbsp;<\/span>Verifying clusters<\/a><\/span><\/li><li><span><a href=\"#Wordcloud\" data-toc-modified-id=\"Wordcloud-2.7\"><span class=\"toc-item-num\">2.7&nbsp;&nbsp;<\/span>Wordcloud<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Prescriptive\" data-toc-modified-id=\"Prescriptive-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Prescriptive<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Q:-Does-Rating-change-evry-year-?\" data-toc-modified-id=\"Q:-Does-Rating-change-evry-year-?-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;<\/span>Q: Does Rating change evry year ?<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Normal-Distribution\" data-toc-modified-id=\"Normal-Distribution-3.1.1\"><span class=\"toc-item-num\">3.1.1&nbsp;&nbsp;<\/span>Normal Distribution<\/a><\/span><\/li><li><span><a href=\"#Boxplot\" data-toc-modified-id=\"Boxplot-3.1.2\"><span class=\"toc-item-num\">3.1.2&nbsp;&nbsp;<\/span>Boxplot<\/a><\/span><\/li><li><span><a href=\"#Standard-Deviation\" data-toc-modified-id=\"Standard-Deviation-3.1.3\"><span class=\"toc-item-num\">3.1.3&nbsp;&nbsp;<\/span>Standard Deviation<\/a><\/span><\/li><li><span><a href=\"#Mean-Rating-over-time\" data-toc-modified-id=\"Mean-Rating-over-time-3.1.4\"><span class=\"toc-item-num\">3.1.4&nbsp;&nbsp;<\/span>Mean Rating over time<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Q:-Which-country-and-country-makes-the-best-chcolate?\" data-toc-modified-id=\"Q:-Which-country-and-country-makes-the-best-chcolate?-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;<\/span>Q: Which country and country makes the best chcolate?<\/a><\/span><\/li><li><span><a href=\"#Q:-Which-company-makes-the-best-choclate-?\" data-toc-modified-id=\"Q:-Which-company-makes-the-best-choclate-?-3.3\"><span class=\"toc-item-num\">3.3&nbsp;&nbsp;<\/span>Q: Which company makes the best choclate ?<\/a><\/span><\/li><li><span><a href=\"#Q:-Does-origin-of-bean-affects-rating?\" data-toc-modified-id=\"Q:-Does-origin-of-bean-affects-rating?-3.4\"><span class=\"toc-item-num\">3.4&nbsp;&nbsp;<\/span>Q: Does origin of bean affects rating?<\/a><\/span><\/li><li><span><a href=\"#Q:-Recipie-of-which-company-should-we-follow-?\" data-toc-modified-id=\"Q:-Recipie-of-which-company-should-we-follow-?-3.5\"><span class=\"toc-item-num\">3.5&nbsp;&nbsp;<\/span>Q: Recipie of which company should we follow ?<\/a><\/span><\/li><li><span><a href=\"#Master-Choclatier?\" data-toc-modified-id=\"Master-Choclatier?-3.6\"><span class=\"toc-item-num\">3.6&nbsp;&nbsp;<\/span>Master Choclatier?<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#4.-Final-Dashboard\" data-toc-modified-id=\"4.-Final-Dashboard-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>4. Final Dashboard<\/a><\/span><ul class=\"toc-item\"><li><ul class=\"toc-item\"><li><span><a href=\"#Three-Componenets-Of-DASH\" data-toc-modified-id=\"Three-Componenets-Of-DASH-4.0.1\"><span class=\"toc-item-num\">4.0.1&nbsp;&nbsp;<\/span>Three Componenets Of DASH<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><li><span><a href=\"#Summary:\" data-toc-modified-id=\"Summary:-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Summary:<\/a><\/span><\/li><\/ul><\/div>","34b74ddf":"## OLS v2 adding all variables","a46508f1":"## Q: Which country and country makes the best chcolate?","1a568047":"## Wordcloud","7ea57a54":"## Loading Libraries","194dd2cb":"### Three Componenets Of DASH\n\n1. Components ->Slider, Checkbox\n2. Graph -> Line char, Scatter plot\n3. Callback -> Function","820b90eb":"## Q: Does origin of bean affects rating?","8075b6fb":"## Heat Map\n","c78c4f11":"## PCA","ca37e386":"# Predcitive\n\n","78980475":"## Verifying clusters","748dcb04":"## Clustering","7c2664e8":"## Scatter Plot","ee77a428":"## Box PLot","4d90d21a":"# Summary:\n1. Methods are always more important than tools\n2. Do not memorize code (Google question or find in Docs\n3. Prepare questions for data\n4. Simple Roadmap \n    1. Describe\n    2. Predict: Ols->StepOls ->Clustering\n    2. Prescribe: Questions ->more Question->Answer->Dashbaord\n","9c5dfee5":"# Descriptive Analysis","9042463d":"### Shape","5de06da0":"# Prescriptive\n\n","1bdf11ae":"## OLS v1 adding only nominal variables"}}