{"cell_type":{"963c3d81":"code","7d96290b":"code","e04b4aab":"code","0734820b":"code","827bc704":"code","857328fc":"code","3fdc6f86":"code","700344ee":"code","461adb90":"code","bbe19611":"markdown","0682df3d":"markdown","1f59cd09":"markdown","5a7e4968":"markdown","aed71e50":"markdown","a924eef8":"markdown","95bc279e":"markdown","aee3ffa4":"markdown"},"source":{"963c3d81":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7d96290b":"# Sobel x-axis Kaggle Notebook\nSOBEL_X = np.array((\n    [-1, 0, 1],\n    [-2, 0, 2],\n    [-1, 0, 1]), dtype=\"int32\")\n\n# Sobel y-axis Kaggle Notebook\nSOBEL_Y = np.array((\n    [-1, -2, -1],\n    [0, 0, 0],\n    [1, 2, 1]), dtype=\"int32\")\n\n# Gaussian Kaggle Notebook\nGAUSS = np.array((\n    [1\/16, 2\/16, 1\/16],\n    [2\/16, 4\/16, 2\/16],\n    [1\/16, 2\/16, 1\/16]), dtype=\"float64\")","e04b4aab":"def convolve(img, kernel):\n    \"\"\"\n    Convolve function for odd dimensions.\n    IT CONVOLVES IMAGES\n    \"\"\"\n    if kernel.shape[0] % 2 != 1 or kernel.shape[1] % 2 != 1:\n        raise ValueError(\"Only odd dimensions on filter supported\")\n\n    img_height = img.shape[0]\n    img_width = img.shape[1]\n    pad_height = kernel.shape[0] \/\/ 2\n    pad_width = kernel.shape[1] \/\/ 2\n    \n    pad = ((pad_height, pad_height), (pad_height, pad_width))\n    g = np.empty(img.shape, dtype=np.float64)\n    img = np.pad(img, pad, mode='constant', constant_values=0)\n    # Do convolution\n    for i in np.arange(pad_height, img_height+pad_height):\n        for j in np.arange(pad_width, img_width+pad_width):\n            roi = img[i - pad_height:i + pad_height +\n                      1, j - pad_width:j + pad_width + 1]\n            g[i - pad_height, j - pad_width] = (roi*kernel).sum()\n\n    if (g.dtype == np.float64):\n        kernel = kernel \/ 255.0\n        kernel = (kernel*255).astype(np.uint8)\n    else:\n        g = g + abs(np.amin(g))\n        g = g \/ np.amax(g)\n        g = (g*255.0)\n    return g","0734820b":"def harris(img, threshold=0.6):\n\n    img_cpy = img.copy() # copying image\n\n    img1_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # grayscaling (0-1)\n\n    dx = convolve(img1_gray, SOBEL_X) # convolving with sobel filter on X-axis\n    dy = convolve(img1_gray, SOBEL_Y) # convolving with sobel filter on Y-axis\n    # square of derivatives\n    dx2 = np.square(dx)\n    dy2 = np.square(dy)\n    dxdy = dx*dy #cross filtering\n    # gauss filter for all directions (x,y,cross axis)\n    g_dx2 = convolve(dx2, GAUSS)\n    g_dy2 = convolve(dy2, GAUSS)\n    g_dxdy = convolve(dxdy, GAUSS)\n    # Harris Function\n    harris = g_dx2*g_dy2 - np.square(g_dxdy) - 0.12*np.square(g_dx2 + g_dy2) # r(harris) = det - k*(trace**2)\n    # Normalizing inside (0-1)\n    cv2.normalize(harris, harris, 0, 1, cv2.NORM_MINMAX)\n\n    # find all points above threshold (nonmax supression line)\n    loc = np.where(harris >= threshold)\n    # drawing filtered points\n    for pt in zip(*loc[::-1]):\n        cv2.circle(img_cpy, pt, 3, (0, 0, 255), -1)\n\n    return img_cpy,g_dx2,g_dy2,dx,dy,loc","827bc704":"img = cv2.imread('\/kaggle\/input\/hongkongnights\/detection\/img00019.jpg')\n\ncorners,g_dx2,g_dy2,dx,dy,loc = harris(img,0.85)","857328fc":"# display raw & filtered images\nplt.figure(figsize=(20, 20))\nplt.subplot(131), plt.imshow(img)\nplt.title(\"Raw Image\"), plt.xticks([]), plt.yticks([])\nplt.subplot(132), plt.imshow(dx)\nplt.title(\"Sobel on X axis\"), plt.xticks([]), plt.yticks([])\nplt.subplot(133), plt.imshow(dy)\nplt.title(\"Sobel on Y axis\"), plt.xticks([]), plt.yticks([])\nplt.show()","3fdc6f86":"plt.figure(figsize=(20, 20))\nplt.subplot(131), plt.imshow(img)\nplt.title(\"Raw Image\"), plt.xticks([]), plt.yticks([])\nplt.subplot(132), plt.imshow(g_dx2)\nplt.title(\"Gauss on X axis\"), plt.xticks([]), plt.yticks([])\nplt.subplot(133), plt.imshow(g_dy2)\nplt.title(\"Gauss on Y axis\"), plt.xticks([]), plt.yticks([])\nplt.show()","700344ee":"plt.figure(figsize=(20, 20))\nplt.subplot(121), plt.imshow(img)\nplt.title(\"Raw Image\"), plt.xticks([]), plt.yticks([])\nplt.subplot(122), plt.imshow(corners)\nplt.title(\"Harris Corner Output\"), plt.xticks([]), plt.yticks([])","461adb90":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Thank you Dasmehdixtr. Keep sharing, I will keep learning. @mpwolke Was Here.' )","bbe19611":"#Codes by Dasmehdixtr https:\/\/www.kaggle.com\/dasmehdixtr\/harris-corner-detector-example-from-scratch","0682df3d":"#Raw Image and Sobel-Gauss Filtered Images Visualization","1f59cd09":"#Raw Image and Sobel Filtered Images Visualization","5a7e4968":"#Raw Image and Harris Corner Output Visualization","aed71e50":"#Image Reading and Filtering Area","a924eef8":"#Harris function\n\nImage converted to grayscale\n\nSobel filters convolved on image for both axis\n\nSquare of derivatives and cross multiply calculated\n\nAll axes filtered with gaussian Kaggle Notebook\n\nCornerness Function used to calculate\n\nNon-max supression implemented\n\nCircles drawed on filtered points","95bc279e":"#Convolution function from scratch. Alternatively, you can use opencv, skimage, pillow libraries.","aee3ffa4":"#Sobel and gaussian Kaggle Notebook defined here with numpy"}}