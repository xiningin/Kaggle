{"cell_type":{"4300d883":"code","d8f7c609":"code","91b7a4cf":"code","3d486777":"code","691425e9":"code","a3aca7e0":"code","0966b6c4":"code","d1b909d6":"code","6959fdf3":"code","8b1d434f":"code","f444a650":"code","cf3f4aff":"code","7f2cde96":"code","d5e41bde":"code","9df6ab2f":"code","360e198f":"code","142de3fa":"code","c69ed44f":"code","b32985a3":"code","d88d7293":"markdown","fae3e939":"markdown","8d99814f":"markdown","029c3172":"markdown","1491b53a":"markdown","b3791a30":"markdown","94889c29":"markdown","24792c4a":"markdown","030de969":"markdown","cd78ac3d":"markdown","e2da6c5d":"markdown","6547ca9c":"markdown","47af5e19":"markdown","4e7d4ef8":"markdown","5c8b0055":"markdown","c1d4f74d":"markdown","4cb39b77":"markdown","853213f4":"markdown","fb5007e8":"markdown","e0074943":"markdown","82047e89":"markdown","a08db768":"markdown"},"source":{"4300d883":"# First step, import libraries and then dataset\nimport numpy as np \nimport pandas as pd \nfrom matplotlib import pyplot as plt","d8f7c609":"# Import the dataset and encode the date\ndf = pd.read_csv(\"..\/input\/coinbaseUSD_1-min_data_2014-12-01_to_2018-11-11.csv\")\ndf['date'] = pd.to_datetime(df['Timestamp'],unit='s').dt.date\ngroup = df.groupby('date')\nReal_Price = group['Weighted_Price'].mean()","91b7a4cf":"# split data\nprediction_days = 30\ndf_train= Real_Price[len(Real_Price)-prediction_days:]\ndf_test= Real_Price[:len(Real_Price)-prediction_days]","3d486777":"# Data preprocess\ntraining_set = df_train.values\ntraining_set = np.reshape(training_set, (len(training_set), 1))\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\ntraining_set = sc.fit_transform(training_set)\nX_train = training_set[0:len(training_set)-1]\ny_train = training_set[1:len(training_set)]\nX_train = np.reshape(X_train, (len(X_train), 1, 1))","691425e9":"# Importing the Keras libraries and packages\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\n# Initialising the RNN\nregressor = Sequential()\n\n# Adding the input layer and the LSTM layer\nregressor.add(LSTM(units = 4, activation = 'sigmoid', input_shape = (None, 1)))\n\n# Adding the output layer\nregressor.add(Dense(units = 1))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nregressor.fit(X_train, y_train, batch_size = 5, epochs = 100)","a3aca7e0":"test_set = df_test.values[1:]\nsc = MinMaxScaler()\ninputs = np.reshape(df_test.values[0:len(df_test)-1], (len(test_set), 1))\ninputs = sc.transform(inputs)\ninputs = np.reshape(inputs, (len(inputs), 1, 1))\npredicted_BTC_price = regressor.predict(inputs)\npredicted_BTC_price = sc.inverse_transform(predicted_BTC_price)","0966b6c4":"# Visualising the results\nplt.figure(figsize=(25,15), dpi=80, facecolor='w', edgecolor='k')\nax = plt.gca()  \nplt.plot(test_set, color = 'red', label = 'Real BTC Price')\nplt.plot(predicted_BTC_price, color = 'blue', label = 'Predicted BTC Price')\nplt.title('BTC Price Prediction', fontsize=40)\ndf_test = df_test.reset_index()\nx=df_test.index\nlabels = df_test['date']\nplt.xticks(x, labels, rotation = 'vertical')\nfor tick in ax.xaxis.get_major_ticks():\n    tick.label1.set_fontsize(18)\nfor tick in ax.yaxis.get_major_ticks():\n    tick.label1.set_fontsize(18)\nplt.xlabel('Time', fontsize=40)\nplt.ylabel('BTC Price(USD)', fontsize=40)\nplt.legend(loc=2, prop={'size': 25})\nplt.show()\n","d1b909d6":"# Import libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nfrom scipy import stats\nimport statsmodels.api as sm\nimport warnings\nfrom itertools import product\nfrom datetime import datetime\nwarnings.filterwarnings('ignore')\nplt.style.use('seaborn-poster')","6959fdf3":"# Load data\ndf = pd.read_csv(\"..\/input\/coinbaseUSD_1-min_data_2014-12-01_to_2018-11-11.csv\")\ndf.head()","8b1d434f":"# Unix-time to \ndf.Timestamp = pd.to_datetime(df.Timestamp, unit='s')\n\n# Resampling to daily frequency\ndf.index = df.Timestamp\ndf = df.resample('D').mean()\n\n# Resampling to monthly frequency\ndf_month = df.resample('M').mean()\n\n# Resampling to annual frequency\ndf_year = df.resample('A-DEC').mean()\n\n# Resampling to quarterly frequency\ndf_Q = df.resample('Q-DEC').mean()","f444a650":"# PLOTS\nfig = plt.figure(figsize=[15, 7])\nplt.suptitle('Bitcoin exchanges, mean USD', fontsize=22)\n\nplt.subplot(221)\nplt.plot(df.Weighted_Price, '-', label='By Days')\nplt.legend()\n\nplt.subplot(222)\nplt.plot(df_month.Weighted_Price, '-', label='By Months')\nplt.legend()\n\nplt.subplot(223)\nplt.plot(df_Q.Weighted_Price, '-', label='By Quarters')\nplt.legend()\n\nplt.subplot(224)\nplt.plot(df_year.Weighted_Price, '-', label='By Years')\nplt.legend()\n\n# plt.tight_layout()\nplt.show()","cf3f4aff":"plt.figure(figsize=[15,7])\nsm.tsa.seasonal_decompose(df_month.Weighted_Price).plot()\nprint(\"Dickey\u2013Fuller test: p=%f\" % sm.tsa.stattools.adfuller(df_month.Weighted_Price)[1])\nplt.show()","7f2cde96":"# Box-Cox Transformations\ndf_month['Weighted_Price_box'], lmbda = stats.boxcox(df_month.Weighted_Price)\nprint(\"Dickey\u2013Fuller test: p=%f\" % sm.tsa.stattools.adfuller(df_month.Weighted_Price)[1])","d5e41bde":"# Seasonal differentiation\ndf_month['prices_box_diff'] = df_month.Weighted_Price_box - df_month.Weighted_Price_box.shift(12)\nprint(\"Dickey\u2013Fuller test: p=%f\" % sm.tsa.stattools.adfuller(df_month.prices_box_diff[12:])[1])","9df6ab2f":"# Regular differentiation\ndf_month['prices_box_diff2'] = df_month.prices_box_diff - df_month.prices_box_diff.shift(1)\nplt.figure(figsize=(15,7))\n\n# STL-decomposition\nsm.tsa.seasonal_decompose(df_month.prices_box_diff2[13:]).plot()   \nprint(\"Dickey\u2013Fuller test: p=%f\" % sm.tsa.stattools.adfuller(df_month.prices_box_diff2[13:])[1])\n\nplt.show()","360e198f":"# Initial approximation of parameters\nQs = range(0, 2)\nqs = range(0, 3)\nPs = range(0, 3)\nps = range(0, 3)\nD=1\nd=1\nparameters = product(ps, qs, Ps, Qs)\nparameters_list = list(parameters)\nlen(parameters_list)\n\n# Model Selection\nresults = []\nbest_aic = float(\"inf\")\nwarnings.filterwarnings('ignore')\nfor param in parameters_list:\n    try:\n        model=sm.tsa.statespace.SARIMAX(df_month.Weighted_Price_box, order=(param[0], d, param[1]), \n                                        seasonal_order=(param[2], D, param[3], 12)).fit(disp=-1)\n    except ValueError:\n        print('wrong parameters:', param)\n        continue\n    aic = model.aic\n    if aic < best_aic:\n        best_model = model\n        best_aic = aic\n        best_param = param\n    results.append([param, model.aic])","142de3fa":"# Best Models\nresult_table = pd.DataFrame(results)\nresult_table.columns = ['parameters', 'aic']\nprint(result_table.sort_values(by = 'aic', ascending=True).head())\nprint(best_model.summary())","c69ed44f":"# Inverse Box-Cox Transformation Function\ndef invboxcox(y,lmbda):\n   if lmbda == 0:\n      return(np.exp(y))\n   else:\n      return(np.exp(np.log(lmbda*y+1)\/lmbda))","b32985a3":"# Prediction\ndf_month2 = df_month[['Weighted_Price']]\ndate_list = [datetime(2017, 6, 30), datetime(2017, 7, 31), datetime(2017, 8, 31), datetime(2017, 9, 30), \n             datetime(2017, 10, 31), datetime(2017, 11, 30), datetime(2017, 12, 31), datetime(2018, 1, 31),\n             datetime(2018, 1, 28)]\nfuture = pd.DataFrame(index=date_list, columns= df_month.columns)\ndf_month2 = pd.concat([df_month2, future])\ndf_month2['forecast'] = invboxcox(best_model.predict(start=0, end=75), lmbda)\nplt.figure(figsize=(15,7))\ndf_month2.Weighted_Price.plot()\ndf_month2.forecast.plot(color='r', ls='--', label='Predicted Weighted_Price')\nplt.legend()\nplt.title('Bitcoin exchanges, by months')\nplt.ylabel('mean USD')\nplt.show()","d88d7293":"Obviously not stationary, hence we ought transform our data. First Box-cox transformation then check the test","fae3e939":"**RNN** To predict bitcoin prices","8d99814f":"![](https:\/\/bitcoinist.com\/wp-content\/uploads\/2018\/06\/shutterstock_1018654609.jpg)","029c3172":"Now we need to make model selection, with help of :\n* Autocorrelation Function (ACF). The plot summarizes the correlation of an observation with lag values. The x-axis shows the lag and the y-axis shows the correlation coefficient between -1 and 1 for negative and positive correlation.\n* Partial Autocorrelation Function (PACF). The plot summarizes the correlations for an observation with lag values that is not accounted for by prior lagged observations.\nWe can get a basic picture of the parameter interval, and using this heuristic we can  with help of AIC- Akaike information criterion decide which are the best p,q,d for ARIMA","1491b53a":"Again series is not stationary, finally let us try regular differentiation","b3791a30":"We need to transform our index into time data and then split the time intervals","94889c29":"Some pre-processing is also necessary:\n","24792c4a":"**ARIMA** Let us first go through theoretical part of ARIMA. (NN should be already familiar, if not visit my other kernels","030de969":"**NOTE!!!** Key thing is following and that is why NN COULD \"fail\". WE used values of today to predict the future values. That is not really failure of NN but jsut goes to show that we need to think about what are we \"feeding\" our NN with. Because it can happen that NN will only learn that price will be slightly higher than yesterdays price. Which is true, except when it is not. Than we fail big.","cd78ac3d":"Good, now we can make predictions with our (ARIMA) model:","e2da6c5d":"Let us start coding","6547ca9c":"**IMPORTANT**\n\nAdopting an ARIMA model for a time series assumes that the underlying process that generated the observations is an ARIMA process. This may seem obvious, but helps to motivate the need to confirm the assumptions of the model in the raw observations and in the residual errors of forecasts from the model.","47af5e19":"Visualize the trend","4e7d4ef8":"Now keras  to build the rNN, Long short-term memory!!! LSTM","5c8b0055":"But how do we check that? And how to de determine the parameters p,d,q in the model?\nFirst of all we need to make sure that the time-series is stationary, thats where differencing comes into place (degree corrects the level of non-stationarity if possible) And model parameters can be determined with the Box-Jenkins Method.\n\nBasicaly we have the following situation:\n1. Define the model by calling ARIMA() and passing in the p, d, and q parameters.\n2. The model is prepared on the training data by calling the fit() function.\n3. Predictions can be made by calling the predict() function and specifying the index of the time or times to be predicted.","c1d4f74d":"**Goal of this kernel is to compare NN and ARIMA modelling. We will be predicting Bitcoin prices with help of Bitcoin historical data.**","4cb39b77":"An **ARIMA** model is a class of statistical models for analyzing and forecasting time series data. ARIMA model is one model for non-stationarity. It assumes that the data becomes stationary after differencing.\n\n**ARIMA** is an acronym that stands for AutoRegressive Integrated Moving Average. It is a generalization of the simpler AutoRegressive Moving Average and adds the notion of integration.\n\n\n\nThese acronyms describe it pretty well:\n1. **AR**: Autoregression. A model that uses the dependent relationship between an observation and some number of lagged observations.\n2.**I**: Integrated. The use of differencing of raw observations (e.g. subtracting an observation from an observation at the previous time step) in order to make the time series stationary.\n3. **MA**: Moving Average. A model that uses the dependency between an observation and a residual error from a moving average model applied to lagged observations.\n\n\n\nEach of these components are explicitly specified in the model as a parameter. A standard notation is used of ARIMA(p,d,q) where the parameters are substituted with integer values to quickly indicate the specific ARIMA model being used.\n\nParameters are defined as follows:\n\n1. **p**: The number of lag observations included in the model, also called the lag order.\n2. **d**: The number of times that the raw observations are differenced, also called the degree of differencing.\n3. **q**: The size of the moving average window, also called the order of moving average.\n\n\n","853213f4":"How does **Box-Jenkins Method** work?\n[https:\/\/machinelearningmastery.com\/gentle-introduction-box-jenkins-method-time-series-forecasting\/](http:\/\/)\n\n","fb5007e8":"Bitcoin predictions are going to be for a month, that is why we need to split the dataset accordingly","e0074943":"We need another transformation. Seasonal differentiation","82047e89":"**There are 4 csv files. CSV files for select bitcoin exchanges for the time period of Jan 2012 to July 2018, with minute to minute updates of OHLC (Open, High, Low, Close), Volume in BTC and indicated currency, and weighted bitcoin price. Timestamps are in Unix time. Timestamps without any trades or activity have their data fields forward filled from the last valid time period. If a timestamp is missing, or if there are jumps, this may be because the exchange (or its API) was down, the exchange (or its API) did not exist, or some other unforseen technical error in data reporting or gathering. **\n\ncoincheckJPY_1-min_data_2014-10-31_to_2018-06-27.csv\n\nbitflyerJPY_1-min_data_2017-07-04_to_2018-06-27.csv\n\ncoinbaseUSD_1-min_data_2014-12-01_to_2018-06-27.csv\n\nbitstampUSD_1-min_data_2012-01-01_to_2018-06-27.csv\n\n**All from different Bitcoin exchanges**","a08db768":"**Stationarity check and STL-decomposition of the series*** Lower the p value the better. Stationarity is our models main assumption and dickey fuller is just hypothesis test of the unit root test"}}