{"cell_type":{"390b0993":"code","49cec24b":"code","50cdfaee":"code","6103fea4":"code","3a20240f":"code","042d5d79":"code","d88d7cff":"code","05743578":"code","e7e1010b":"code","435a5216":"code","38013297":"code","2d529cd8":"code","eb2ac348":"code","057ff929":"code","c845e523":"code","6c9abbfc":"code","f16e9b58":"code","85a533dd":"code","649aba6f":"code","8591dcb4":"code","4a9ae942":"code","cfa6b1d6":"code","0180e3bf":"code","88c80d13":"code","766351af":"code","ca0018e2":"code","48ade750":"code","3742bb4e":"code","c59222f4":"code","d5a56974":"code","2514232d":"code","1fced0b0":"code","6256d968":"code","caf595e1":"code","12ffe8ff":"code","a5327d60":"code","60d9ad9a":"code","969fcd54":"code","7c4b48c2":"code","2efd8d77":"code","e0d08bc3":"code","c32f943e":"code","bf7552a9":"code","0eda7048":"code","1928e936":"code","3173c7d8":"code","d7f99942":"code","a88a95ef":"code","1dfd0b07":"code","e4d29c4c":"code","88047fd9":"code","fad94774":"code","7f53fbb3":"code","9f2de8ee":"code","9774d995":"code","5246d1d1":"code","0e281e1b":"code","df0de7d9":"code","6ea8aae7":"code","0029284b":"code","4a552714":"code","4263b6d8":"code","6d9282d8":"code","a8955237":"code","24e6b607":"code","dfba9f25":"code","d3ed1a24":"code","5a25f02d":"code","e32b74a3":"code","73dbbc26":"code","65500e9d":"code","7917784c":"code","1f257554":"code","7f0495be":"code","abeb9d5b":"code","e50bf75f":"code","4f6f36b1":"code","43ab8e2b":"code","53a9d176":"code","6b5047af":"code","a73603b5":"code","081e79b4":"code","b73a9ca6":"code","f033b71d":"code","ab170ada":"code","bf31c068":"code","e3d711dd":"code","078664a6":"code","64e4ffa6":"code","e09450fa":"code","87b91254":"code","26d9b526":"code","44167e72":"code","3bb3686d":"code","3e7e534f":"code","8c78452d":"code","f54c747b":"code","10778331":"code","2e054a02":"code","c524860e":"code","20fe5578":"code","7ce8b095":"code","f301b18f":"code","5edcc47b":"code","b2af4bc3":"code","d1ed3961":"code","1e34291e":"code","c79f55f9":"code","95cddace":"code","a5ccb749":"code","4ba2d3aa":"code","530cd5da":"code","3819db17":"code","94ddf33a":"code","425b2ac8":"code","cbc5730d":"code","cd657fb0":"code","eff72918":"code","69cc4c32":"code","48781c8d":"code","ab21e663":"code","e1c55fd4":"code","ffa1c3ad":"code","70e5f695":"markdown","2f87965e":"markdown","04ad21d3":"markdown","13758746":"markdown","07afaeb0":"markdown","d4ab2abc":"markdown","984de5e2":"markdown","7de19fb1":"markdown","6c7c896e":"markdown","292390ae":"markdown","0f91a969":"markdown","930dfcd6":"markdown","36332a74":"markdown","852841d9":"markdown","5d86523a":"markdown","a634597d":"markdown","97ad9eae":"markdown","f31a6198":"markdown","f34dbc72":"markdown","6e3d0f4a":"markdown","dc494665":"markdown","c1cdb093":"markdown","dee20e2d":"markdown","151471cc":"markdown","3cb9d8a1":"markdown","38a70306":"markdown","6d6573d7":"markdown","98eb01b4":"markdown","db1468be":"markdown","da8aba21":"markdown","65acefed":"markdown","bd151766":"markdown","7b02d06c":"markdown","af3e4ea3":"markdown","1a6d429c":"markdown","4ea564b8":"markdown","6fe54b9e":"markdown","f9be256d":"markdown","6af3af9c":"markdown","6a70b2ec":"markdown","681451a5":"markdown","1ee4630b":"markdown","5d1b716a":"markdown","a51d2eff":"markdown","126de9b9":"markdown","19e7f13a":"markdown","77e540d0":"markdown","5f17692e":"markdown","a160179e":"markdown","5249b5af":"markdown","4e55ebe2":"markdown","c1a5bc35":"markdown","f5686125":"markdown","eefbb5c3":"markdown","0b7fe7ee":"markdown","177e7664":"markdown","60bef484":"markdown","01c996a3":"markdown","62b1ecf6":"markdown","8bb1b19d":"markdown","4ea4b76f":"markdown","ac623189":"markdown","d5df8f06":"markdown","d336f09a":"markdown","17f2aeb3":"markdown","91f83fb4":"markdown","f66e7563":"markdown","33a98cdd":"markdown","d8fc8019":"markdown","5c51435b":"markdown","8540b090":"markdown","07d49676":"markdown","91480928":"markdown"},"source":{"390b0993":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data frame, data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn') # matplotlib \ub3c4 \uc885\ub958\uac00 \ub2e4\uc591\ud558\uae30 \ub54c\ubb38\uc5d0 seaborn \uc2a4\ud0c0\uc77c\ub85c \uc9c0\uc815\ud55c \uac70\uc784.\nsns.set(font_scale=2.5) # (\uae30\ubcf8\uc73c\ub85c) \ud3f0\ud2b8 \ud06c\uae30 2.5\ub85c \uc9c0\uc815 \ubbf8\ub9ac \ud574\ub193\ub294\uac70 2.5\uba74 \uaf64 \ud06c\uac8c \ub098\uc634\n\nimport missingno as msno # missing data \uc798 \ubcf4\uc5ec\uc8fc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline \n# inline \uc744 \ud574\ub193\uc73c\uba74 \uc0c8 \ucc3d\uc73c\ub85c plot\uc774 \ub728\ub294\uac8c \uc544\ub2c8\ub77c \ud604\uc7ac \ucc3d\uc5d0 \ubcf4\uc5ec\uc90c.\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n","49cec24b":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","50cdfaee":"df_train.head(10)","6103fea4":"df_train.describe() ## summary \ud574\uc8fc\ub294\uac70","3a20240f":"df_test.describe() ## summary \ud574\uc8fc\ub294\uac70","042d5d79":"df_train.shape","d88d7cff":"df_train.columns","05743578":"for col in df_train.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100*(df_train[col].isnull().sum()\/df_train[col].shape[0])) #\uc624\ub978\ucabd\uc815\ub82c\n    print(msg) ","e7e1010b":"df_train[col].isnull().sum()\/df_train[col].shape","435a5216":"df_train['Embarked'].shape","38013297":"for col in df_test.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100*(df_test[col].isnull().sum()\/df_test[col].shape[0])) #\uc624\ub978\ucabd\uc815\ub82c\n    print(msg) ","2d529cd8":"msno.matrix(df=df_train.iloc[:,:], figsize=(8,8), color=(0.8,0.5,0.2)) ## missing map \uc774\ub791 \ub611\uac19\uc74c # figsize\uac00 \uc804\uccb4 \ud06c\uae30 # color\ub3c4 \uac00\ub2a5","eb2ac348":"df_train.iloc[3:5,1:5]","057ff929":"msno.bar(df=df_train.iloc[:,:], figsize=(8,8), color=(0.8,0.5,0.2)) ","c845e523":"type(df_train['Survived'].value_counts())  ## Series\uc784 # series\ub294 \uac01\uac01 \ud50c\ub78f\uc744 \uace0\uc720\ud558\uac8c \uac00\uc9c0\uace0 \uc788\uc74c","6c9abbfc":"plt.plot(df_train['Survived'].value_counts())","f16e9b58":"df_train['Survived'].value_counts().plot() ## matplot\uc774\ub791 \uc5f0\uacb0\ub418\uae30 \uc704\ud55c \uace0\uc720\uc758 \ud50c\ub78f\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uac70\uc784","85a533dd":"df_train['Survived'].value_counts().plot.pie()","649aba6f":"df_train['Survived'].value_counts()    ## talbe()\uc774\ub791 \uac19\uc740 \uc5ed\ud560 ","8591dcb4":"f, ax = plt.subplots(1,2,figsize= (18,8) ) ## \ub3c4\ud654\uc9c0 pallete \ub791 \uac19\uc74c,      1\uc740 row, 2\uac00 column       mfrow(c(1,2))\ub791 \uac19\uc74c\n\ndf_train['Survived'].value_counts().plot.pie(explode = [0,0.1], autopct = '%1.1f%%', ax = ax[0], shadow =True) # explode\ub294 \ud30c\uc774\ud50c\ub78f\uc774 \uc11c\ub85c \ucc22\uc5b4\uc9c0\uac8c # %\ub85c \ub098\ud0c0\ub0b4\uc5b4\uc8fc\uae30 # a[0]\uc740 \uccab\ubc88\uc9f8 # \uadf8\ub9bc\uc790 \ub4dc\ub9ac\uc6b0\uae30\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('') # ylabel \uc5c6\uc560\uaca0\ub2e4..\nsns.countplot('Survived', data=df_train, ax = ax[1])  # Survived \ucf5c\ub7fc\uc744 count \ud574\ub2ec\ub77c     # a[1]\uc740 \ub450\ubc88\uc9f8\nax[1].set_title('Count plot - Survived')\nplt.show()","4a9ae942":"ax # ax\ub294 2\uac1c","cfa6b1d6":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count()","0180e3bf":"df_train[['Pclass', 'Survived']].groupby(['Pclass']).count() ## count\uac00 \uc544\ub2c8\ub77c sum\uc744 \ud558\uba74 0\uc778 \uac2f\uc218 \ube7c\uace0 1\uc778 \uc560\ub4e4 ^^","88c80d13":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True) ## cross table \uc88b\ub124 margins\ub85c \ucd1d\ud569..","766351af":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer')","ca0018e2":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True).style.background_gradient(cmap='spring')","48ade750":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True).style.background_gradient(cmap='cool')","3742bb4e":"df_train[ 'Survived'].unique()","c59222f4":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending = False).plot.bar()\n\n# group \uc9c0\uc815\ud55c \uac83\uc744 index\ub85c \ub46c\uc11c \ubcf4\uc5ec\uc904\uac70\ub0d0 \ub97c as.index\ub85c \uacb0\uc815 # 1\uc5f4\uc774 \ub418\uc5c8\uc73c\ub2c8\uae4c \uc598\ub294 Series\uc784 ,,  \uc774 \uc2dc\ub9ac\uc988\ub294 \uace7 \ud558\ub098\uc758 plot\uc744 \uac00\uc9c0\uac8c \ub418\ub294 \uac70\uc784 -> \uc6d0\ud558\ub294 matplot\uc774 \uac00\ub2a5 # mean \uc774\uc9c0\ub9cc 0,1\uc774\ubbc0\ub85c \uc0dd\uc874\uc728\uc784.","d5a56974":"y_position = 1.02\nf, ax = plt.subplots(1,2, figsize = (18,8))\ndf_train['Pclass'].value_counts().plot.bar(color=['#CD7F32','#FFDF00','#D3D3D3'], ax=ax[0])\nax[0].set_title('Number of passengers By Pclass', y = y_position)\nax[0].set_ylabel('Count')\nsns.countplot('Pclass', hue='Survived', data = df_train, ax=ax[1]) # hue\ub85c \uac01\uac01 \ub530\ub85c \uadf8\ub824\uc11c \uad6c\ubd84\ud560 \uc218 \uc788\ub294 \uac70\uc784\nax[1].set_title('Pclass : Survived vs Dead', y = y_position)\nplt.show()","2514232d":"df_train.head()","1fced0b0":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().sort_values(by='Sex', ascending = False).plot.bar()\n","6256d968":"y_position = 1.02\nf, ax = plt.subplots(1,2, figsize = (18,8))\ndf_train['Sex'].value_counts().plot.bar(color=['#CD7F32','#FFDF00','#D3D3D3'], ax=ax[0])\nax[0].set_title('Number of passengers By Sex', y = y_position)\nax[0].set_ylabel('Count')\nsns.countplot('Sex', hue='Survived', data = df_train, ax=ax[1]) # hue\ub85c survived \uc0c9\uae54\uc744 \ub2e4\ub974\uac8c \uadf8\ub824\uc11c \uad6c\ubd84\ud560 \uc218 \uc788\ub294 \uac70\uc784\nax[1].set_title('Sex : Survived vs Dead', y = y_position)\nplt.show()","caf595e1":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='cool')","12ffe8ff":"sns.factorplot('Pclass','Survived', hue='Sex', data = df_train, size = 6, aspect =1.5)","a5327d60":"sns.factorplot(x='Sex',y= 'Survived', col='Pclass', data = df_train, saturation = .5,\n              size=8, aspect=1)","60d9ad9a":"sns.factorplot(x='Sex',y= 'Survived', hue='Pclass', data = df_train, saturation = .5,\n              size=8, aspect=1)","969fcd54":"print('\uc81c\uc77c \ub098\uc774 \ub9ce\uc740 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].max()))\nprint('\uc81c\uc77c \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].min()))\nprint('\ud0d1\uc2b9\uac1d \ud3c9\uade0 \ub098\uc774 : {:.1f} Years'.format(df_train['Age'].mean()))","7c4b48c2":"foo = df_train['Age']","2efd8d77":"fig, ax = plt.subplots(1, 1, figsize=(9, 5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax=ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","e0d08bc3":"df_train[df_train['Survived']==1]['Age'].hist() ## \uc704\uc758 \ud30c\ub780\uc0c9\uacfc \uc77c\uce58\ud568. (Survive == 1) # \uc5ec\uae30\uc5d0 \uac00\uc6b0\uc2dc\uc548 \ud568\uc218 \uc4f4\uac8c \uc704\uc758 kernel density estimation","c32f943e":"# Age distribution withing classes\nplt.figure(figsize=(8, 6))\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind='kde')\n\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])","bf7552a9":"# Age distribution withing classes\nplt.figure(figsize=(8, 6))\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind='hist')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind='hist')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind='hist')\n\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])","0eda7048":"# Age distribution withing classes\n\nfig, ax = plt.subplots(1,1,figsize = (9,5))\n\nsns.kdeplot(df_train[(df_train['Survived']==0)&(df_train['Pclass'] == 1)]['Age'], ax=ax)\nsns.kdeplot(df_train[(df_train['Survived']==1)&(df_train['Pclass'] == 1)]['Age'], ax=ax)\n\nplt.title('1st Class')\nplt.legend(['Survived==0', 'Survived == 1'])\nplt.show()\n","1928e936":"# Age distribution withing classes\n\nfig, ax = plt.subplots(1,1,figsize = (9,5))\n\nsns.kdeplot(df_train[(df_train['Survived']==0)&(df_train['Pclass'] == 2)]['Age'], ax=ax)\nsns.kdeplot(df_train[(df_train['Survived']==1)&(df_train['Pclass'] == 2)]['Age'], ax=ax)\n\nplt.title('2nd Class')\nplt.legend(['Survived==0', 'Survived == 1'])\nplt.show()","3173c7d8":"# Age distribution withing classes\n\nfig, ax = plt.subplots(1,1,figsize = (9,5))\n\nsns.kdeplot(df_train[(df_train['Survived']==0)&(df_train['Pclass'] == 3)]['Age'], ax=ax)\nsns.kdeplot(df_train[(df_train['Survived']==1)&(df_train['Pclass'] == 3)]['Age'], ax=ax)\n\nplt.title('3rd Class')\nplt.legend(['Survived==0', 'Survived == 1'])\nplt.show()","d7f99942":"cummulate_survival_ratio = []\nfor i in range(1, 80):\n    cummulate_survival_ratio.append(df_train[df_train['Age'] < i]['Survived'].sum() \/ len(df_train[df_train['Age'] < i]['Survived']))\n    \nplt.figure(figsize=(7, 7))\nplt.plot(cummulate_survival_ratio)\nplt.title('Survival rate change depending on range of Age', y=1.02)\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()","a88a95ef":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=df_train, scale='count', split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\n\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=df_train, scale='count', split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","1dfd0b07":"# what is scale?\n\nf,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=df_train, scale='area', split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=df_train, scale='area', split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","e4d29c4c":"# what is split?\n\nf,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=df_train, scale='count', split=False,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=df_train, scale='count', split=False,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","88047fd9":"df_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived', ascending=True)","fad94774":"f, ax = plt.subplots(1, 1, figsize=(7, 7))\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax)","7f53fbb3":"f,ax=plt.subplots(2, 2, figsize=(20,15))\nsns.countplot('Embarked', data=df_train, ax=ax[0,0])\nax[0,0].set_title('(1) No. Of Passengers Boarded')\nsns.countplot('Embarked', hue='Sex', data=df_train, ax=ax[0,1])\nax[0,1].set_title('(2) Male-Female Split for Embarked')\nsns.countplot('Embarked', hue='Survived', data=df_train, ax=ax[1,0])\nax[1,0].set_title('(3) Embarked vs Survived')\nsns.countplot('Embarked', hue='Pclass', data=df_train, ax=ax[1,1])\nax[1,1].set_title('(4) Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2, hspace=0.5) ## plot\ub4e4 \uac04\uc758 \uac01\uac01\uc758 \uac04\uaca9\uc744 \uc798 \uc124\uc815\ud574\uc918\uc57c \uc544\ub798\uc640 \uac19\uc774 \ub098\uc634\nplt.show()","9f2de8ee":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4\ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4","9774d995":"print(\"Maximum size of Family: \", df_train['FamilySize'].max())\nprint(\"Minimum size of Family: \", df_train['FamilySize'].min())","5246d1d1":"f,ax=plt.subplots(1, 3, figsize=(40,10))\nsns.countplot('FamilySize', data=df_train, ax=ax[0])\nax[0].set_title('(1) No. Of Passengers Boarded', y=1.02)\n\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived countplot depending on FamilySize',  y=1.02)\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize',  y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","0e281e1b":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","df0de7d9":"# \uc544\ub798 \uc904\uc740 \ub4a4\ub2a6\uac8c \ubc1c\uacac\ud558\uc600\uc2b5\ub2c8\ub2e4. 13\ubc88\uc9f8 \uac15\uc758\uc5d0 \uc5b8\uae09\ub418\ub2c8, \uc77c\ub2e8 \ub530\ub77c\uce58\uc2dc\uace0 \ub118\uc5b4\uac00\uba74 \ub429\ub2c8\ub2e4.\ndf_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean() # testset \uc5d0 \uc788\ub294 nan value \ub97c \ud3c9\uade0\uac12\uc73c\ub85c \uce58\ud658\ud569\ub2c8\ub2e4.\n\ndf_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)","6ea8aae7":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","0029284b":"import seaborn as sns\n\n# Grouped boxplots by seaborn\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\n\ng = sns.boxplot(x=\"Survived\",y=\"Fare\", data=df_train,hue = 'Survived', ax=ax)\n\nplt.title('Boxplot on Fare')\n\n\nplt.show()\n\n","4a552714":"df_train.head()","4263b6d8":"df_train['Ticket'].value_counts()\n","6d9282d8":"df_train['Age'].isnull().sum()","a8955237":"df_train['Age'].mean()","24e6b607":"df_train['Name'].str.extract ## \uc815\uaddc\ud45c\ud604\uc2dd \ud45c\ud604\uc744 \uc704\ud574? \ucd94\ucd9c\ud574 \ub0c4.","dfba9f25":"df_train['Initial']= df_train.Name.str.extract('([A-Za-z]+)\\.') #lets extract the Salutations\n    \ndf_test['Initial']= df_test.Name.str.extract('([A-Za-z]+)\\.') #lets extract the Salutations","d3ed1a24":"pd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='summer_r') #Checking the Initials with the Sex","5a25f02d":"df_train['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)\n\ndf_test['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)\n## inplace\ub97c \ub123\uc5b4\uc57c \ubc14\ub85c replace\ub85c \ub300\uccb4 \uac00\ub2a5\ud55c \uac70\uc784 \uae4c\uba39\uc9c0 \ub9d0\uae30.","e32b74a3":"df_train.groupby('Initial').mean()","73dbbc26":"df_train.groupby('Initial')['Survived'].mean().plot.bar()\n","65500e9d":"df_train.loc[(df_train['Age'].isnull()) & (df_train['Initial']=='Mr'), :]","7917784c":"df_train.groupby('Initial').mean()","1f257554":"df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age'] = 33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age'] = 36\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age'] = 5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age'] = 22\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Other'),'Age'] = 46\n\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age'] = 33\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'),'Age'] = 36\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'),'Age'] = 5\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'),'Age'] = 22\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Other'),'Age'] = 46","7f0495be":"print('Embarked has ', sum(df_train['Embarked'].isnull()), ' Null values')","abeb9d5b":"df_train['Embarked'].fillna('S', inplace=True)\n","e50bf75f":"df_train['Age_cat'] = 0\ndf_train.loc[df_train['Age'] < 10, 'Age_cat'] = 0\ndf_train.loc[(10 <= df_train['Age']) & (df_train['Age'] < 20), 'Age_cat'] = 1\ndf_train.loc[(20 <= df_train['Age']) & (df_train['Age'] < 30), 'Age_cat'] = 2\ndf_train.loc[(30 <= df_train['Age']) & (df_train['Age'] < 40), 'Age_cat'] = 3\ndf_train.loc[(40 <= df_train['Age']) & (df_train['Age'] < 50), 'Age_cat'] = 4\ndf_train.loc[(50 <= df_train['Age']) & (df_train['Age'] < 60), 'Age_cat'] = 5\ndf_train.loc[(60 <= df_train['Age']) & (df_train['Age'] < 70), 'Age_cat'] = 6\ndf_train.loc[70 <= df_train['Age'], 'Age_cat'] = 7\n\ndf_test['Age_cat'] = 0\ndf_test.loc[df_test['Age'] < 10, 'Age_cat'] = 0\ndf_test.loc[(10 <= df_test['Age']) & (df_test['Age'] < 20), 'Age_cat'] = 1\ndf_test.loc[(20 <= df_test['Age']) & (df_test['Age'] < 30), 'Age_cat'] = 2\ndf_test.loc[(30 <= df_test['Age']) & (df_test['Age'] < 40), 'Age_cat'] = 3\ndf_test.loc[(40 <= df_test['Age']) & (df_test['Age'] < 50), 'Age_cat'] = 4\ndf_test.loc[(50 <= df_test['Age']) & (df_test['Age'] < 60), 'Age_cat'] = 5\ndf_test.loc[(60 <= df_test['Age']) & (df_test['Age'] < 70), 'Age_cat'] = 6\ndf_test.loc[70 <= df_test['Age'], 'Age_cat'] = 7","4f6f36b1":"def category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7    \n    \ndf_train['Age_cat_2'] = df_train['Age'].apply(category_age)","43ab8e2b":"(df_train['Age_cat'] == df_train['Age_cat_2']).all()","53a9d176":"print('1\ubc88 \ubc29\ubc95, 2\ubc88 \ubc29\ubc95 \ub458\ub2e4 \uac19\uc740 \uacb0\uacfc\ub97c \ub0b4\uba74 True \uc918\uc57c\ud568 -> ', (df_train['Age_cat'] == df_train['Age_cat_2']).all())","6b5047af":"df_train.drop(['Age', 'Age_cat_2'], axis=1, inplace=True)\ndf_test.drop(['Age'], axis=1, inplace=True)","a73603b5":"df_train['Initial'] = df_train['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})\ndf_test['Initial'] = df_test['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})","081e79b4":"df_train['Embarked'].unique()\n","b73a9ca6":"df_train['Embarked'].value_counts()\n","f033b71d":"df_train['Embarked'] = df_train['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})","ab170ada":"df_train['Embarked'].isnull().any()\n","bf31c068":"df_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1})\ndf_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1})","e3d711dd":"heatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Fare', 'Embarked', 'FamilySize', 'Initial', 'Age_cat']] \n\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14, 12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0,\n           square=True, cmap=colormap, linecolor='white', annot=True, annot_kws={\"size\": 16})\n\ndel heatmap_data","078664a6":"df_train = pd.get_dummies(df_train, columns=['Initial'], prefix='Initial')\ndf_test = pd.get_dummies(df_test, columns=['Initial'], prefix='Initial')\ndf_train.head()","64e4ffa6":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix='Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')","e09450fa":"df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_test.drop(['PassengerId', 'Name',  'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_train.head()","87b91254":"df_test.head()\n","26d9b526":"## importing all the required ML packages\n\nfrom sklearn.ensemble import RandomForestClassifier # \uc720\uba85\ud55c randomforestclassfier \uc785\ub2c8\ub2e4. \nfrom sklearn import metrics # \ubaa8\ub378\uc758 \ud3c9\uac00\ub97c \uc704\ud574\uc11c \uc501\ub2c8\ub2e4\nfrom sklearn.model_selection import train_test_split # traning set\uc744 \uc27d\uac8c \ub098\ub220\uc8fc\ub294 \ud568\uc218\uc785\ub2c8\ub2e4.","44167e72":"X_train = df_train.drop('Survived', axis=1).values\ntarget_label = df_train['Survived'].values\nX_test = df_test.values\n","3bb3686d":"X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size=0.3, random_state=2018)\n","3e7e534f":"from sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score, roc_auc_score, roc_curve\nfrom sklearn.pipeline import Pipeline\n","8c78452d":"RF = RandomForestClassifier()\nRF.fit(X_tr, y_tr)\nprediction = RF.predict_proba(X_vld)\n","f54c747b":"from matplotlib.pyplot import *\npred = RF.predict(X_vld)\ndef performance(y_vld, pred, color='g', ann=True):\n    acc = accuracy_score(y_vld, pred >0.5 )\n    auc = roc_auc_score(y_vld, pred)\n    fpr, tpr, thr = roc_curve(y_vld, pred)\n    plot(fpr,tpr, color, linewidth='3')\n    xlabel(\"False positive rate\")\n    ylabel(\"True positive rate\")\n    if ann:\n        annotate(\"ACC: %0.2f\" % acc, (0.2,0.7), size=14)\n        annotate(\"AUC: %0.2f\" % auc, (0.2,0.6), size=14)","10778331":"performance(y_vld,pred)","2e054a02":"preds = RF.predict(X_vld)\n\n# Confusion Matrix \ud655\uc778\nprint(\"[Confusion Matrix]\")\nprint(\"------------------------------------------------------------------\")\n\nprint(pd.crosstab(pd.Series(y_vld), pd.Series(preds) \n                  ,rownames=['True'], colnames=['Predicted'], margins=True,\n                ))\ntn, fp, fn, tp = confusion_matrix(y_true = y_vld, y_pred=preds).ravel()\nprint(confusion_matrix(y_true = y_vld, y_pred=preds))\nprint(\"------------------------------------------------------------------\")\nprint(\"True_Positive:\", tp)\nprint(\"True_Negative:\", tn)\nprint(\"False_Positive:\", fp)\nprint(\"False_Negative:\", fn)\n# \ub9ac\ud3ec\ud2b8 \ud655\uc778\nprint(\"------------------------------------------------------------------\")\nprint(\"[Summary]\")\nprint(metrics.classification_report(y_vld, preds))\nprint(\"Accuracy:\", metrics.accuracy_score(y_true = y_vld, y_pred=preds))","c524860e":"print(\"\ud6c8\ub828 \uc138\ud2b8 \uc815\ud655\ub3c4: {:.3f}\".format(RF.score(X_tr, y_tr)))\nprint(\"\ud14c\uc2a4\ud2b8 \uc138\ud2b8 \uc815\ud655\ub3c4: {:.3f}\".format(RF.score(X_vld, y_vld)))","20fe5578":"from pandas import Series\n\nfeature_importance = RF.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)","7ce8b095":"plt.figure(figsize=(8, 8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()\n","f301b18f":"submission = pd.read_csv('..\/input\/gender_submission.csv')\nsubmission.head()\nprediction = RF.predict(df_test)\nsubmission['Survived'] = prediction\n\nsubmission.to_csv(\"my_first_submission_rf.csv\", index=False)","5edcc47b":"from matplotlib.pyplot import *\n\ndef performance(y_true, pred, color='g', ann=True):\n    acc = accuracy_score(y_true, pred[:,1] >0.5 )\n    auc = roc_auc_score(y_true, pred[:,1])\n    fpr, tpr, thr = roc_curve(y_true, pred[:,1])\n    plot(fpr,tpr, color, linewidth='3')\n    xlabel(\"False positive rate\")\n    ylabel(\"True positive rate\")\n    if ann:\n        annotate(\"ACC: %0.2f\" % acc, (0.2,0.7), size=14)\n        annotate(\"AUC: %0.2f\" % auc, (0.2,0.6), size=14)","b2af4bc3":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbrt = GradientBoostingClassifier(random_state=0)\ngbrt.fit(X_tr, y_tr)\n\n","d1ed3961":"pred_gbm = gbrt.predict_proba(X_vld)","1e34291e":"performance(y_vld,pred_gbm)","c79f55f9":"preds_gbm = gbrt.predict(X_vld)\n\n# Confusion Matrix \ud655\uc778\nprint(\"[Confusion Matrix]\")\nprint(\"------------------------------------------------------------------\")\n\nprint(pd.crosstab(pd.Series(y_vld), pd.Series(preds_gbm) \n                  ,rownames=['True'], colnames=['Predicted'], margins=True,\n                ))\ntn, fp, fn, tp = confusion_matrix(y_true = y_vld, y_pred=preds_gbm).ravel()\nprint(confusion_matrix(y_true = y_vld, y_pred=preds_gbm))\nprint(\"------------------------------------------------------------------\")\nprint(\"True_Positive:\", tp)\nprint(\"True_Negative:\", tn)\nprint(\"False_Positive:\", fp)\nprint(\"False_Negative:\", fn)\n# \ub9ac\ud3ec\ud2b8 \ud655\uc778\nprint(\"------------------------------------------------------------------\")\nprint(\"[Summary]\")\nprint(metrics.classification_report(y_vld, preds_gbm))\nprint(\"Accuracy:\", metrics.accuracy_score(y_true = y_vld, y_pred=preds_gbm))","95cddace":"print(\"\ud6c8\ub828 \uc138\ud2b8 \uc815\ud655\ub3c4: {:.3f}\".format(gbrt.score(X_tr, y_tr)))\nprint(\"\ud14c\uc2a4\ud2b8 \uc138\ud2b8 \uc815\ud655\ub3c4: {:.3f}\".format(gbrt.score(X_vld, y_vld)))","a5ccb749":"from pandas import Series\n\nfeature_importance3 = gbrt.feature_importances_\nSeries_feat_imp3 = Series(feature_importance3, index=df_test.columns)\n\nplt.figure(figsize=(8, 8))\nSeries_feat_imp3.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()\n","4ba2d3aa":"submission = pd.read_csv('..\/input\/gender_submission.csv')\nsubmission.head()\nprediction = gbrt.predict(df_test)\nsubmission['Survived'] = prediction\nsubmission.to_csv(\"my_submission_gbrt.csv\", index=False)","530cd5da":"from lightgbm import LGBMClassifier\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\n\n#split dataframe into X & Y\nX = df_train.drop('Survived', axis=1).values\ny = df_train['Survived'].values\nX_test = df_test.values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2018)","3819db17":"df_train.columns","94ddf33a":"#switch off depreciation & user warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=UserWarning) \n\nimport lightgbm as lgb\n\nlgbm = lgb.LGBMClassifier(nthread = 4, boosting_type = 'dart')\n\n#grid search for finding optimum learning rate\nparam_grid  = {'learning_rate': [0.07, 0.08, 0.09, 0.1]}\ngrid_search = GridSearchCV(lgbm, param_grid, scoring='roc_auc', cv=10)\ngrid_result = grid_search.fit(X, y)\n\n#update model parameters with new learning rate\nlgbm.set_params(learning_rate = grid_result.best_params_['learning_rate'])\n\n#using cv function of xgboost to find the optimum number of trees\nlgbm_param = lgbm.get_params()\nlgbm_train = lgb.Dataset(X_train, y_train\n                         )\ncvresult = lgb.cv(lgbm_param, lgbm_train, num_boost_round=1000, metrics=['auc'], early_stopping_rounds=50)\n\n#update model parameters with the resulting number of trees\nlgbm.set_params(n_estimators=len(cvresult['auc-mean']))\n\nlgbm.fit(X_train, y_train)\nprint (lgbm)\n","425b2ac8":"pred_lgbm = lgbm.predict_proba(X_vld)","cbc5730d":"performance(y_vld,pred_lgbm)","cd657fb0":"preds_lgbm = lgbm.predict(X_vld)\n\n# Confusion Matrix \ud655\uc778\nprint(\"[Confusion Matrix]\")\nprint(\"------------------------------------------------------------------\")\n\nprint(pd.crosstab(pd.Series(y_vld), pd.Series(preds_lgbm) \n                  ,rownames=['True'], colnames=['Predicted'], margins=True,\n                ))\ntn, fp, fn, tp = confusion_matrix(y_true = y_vld, y_pred=preds_lgbm).ravel()\nprint(confusion_matrix(y_true = y_vld, y_pred=preds_lgbm))\nprint(\"------------------------------------------------------------------\")\nprint(\"True_Positive:\", tp)\nprint(\"True_Negative:\", tn)\nprint(\"False_Positive:\", fp)\nprint(\"False_Negative:\", fn)\n# \ub9ac\ud3ec\ud2b8 \ud655\uc778\nprint(\"------------------------------------------------------------------\")\nprint(\"[Summary]\")\nprint(metrics.classification_report(y_vld, preds_lgbm))\nprint(\"Accuracy:\", metrics.accuracy_score(y_true = y_vld, y_pred=preds_lgbm))","eff72918":"from pandas import Series\n\nfeature_importance2 = lgbm.feature_importances_\nSeries_feat_imp2 = Series(feature_importance2, index=df_test.columns)\n\nplt.figure(figsize=(8, 8))\nSeries_feat_imp2.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()\n","69cc4c32":"print(\"\ud6c8\ub828 \uc138\ud2b8 \uc815\ud655\ub3c4: {:.3f}\".format(lgbm.score(X_tr, y_tr)))\nprint(\"\ud14c\uc2a4\ud2b8 \uc138\ud2b8 \uc815\ud655\ub3c4: {:.3f}\".format(lgbm.score(X_vld, y_vld)))","48781c8d":"submission = pd.read_csv('..\/input\/gender_submission.csv')\nsubmission.head()","ab21e663":"prediction = lgbm.predict(df_test)\nprediction\n","e1c55fd4":"submission['Survived'] = prediction\nsubmission.head()","ffa1c3ad":"submission.to_csv(\"my_first_submission.csv\", index=False)","70e5f695":"# 4. Building machine learning model and prediction using the trained model","2f87965e":"## Lady first, Money brings Survival?","04ad21d3":"## 4.1 RandomForest","13758746":"## Feature importance ","07afaeb0":"* sklearn \uc5d0\uc11c\ub294 \uc5ec\ub7ec \uba38\uc2e0\ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\uc744 \uc9c0\uc6d0\ud574\uc90d\ub2c8\ub2e4. \uc5f4\uac70\ud558\uae30\uc5d4 \ub108\ubb34 \ub9ce\uc73c\ubbc0\ub85c, \uc9c1\uc811 documentation\uc5d0 \ub4e4\uc5b4\uac00 \ubcf4\uc2dc\uae38 \ucd94\ucc9c\ud569\ub2c8\ub2e4. http:\/\/scikit-learn.org\/stable\/supervised_learning.html#supervised-learning \uc5ec\uae30\uc5d0 \ub4e4\uc5b4\uac00\uc2dc\uba74 \uc9c0\uc6d0\ub418\ub294 \uc54c\uace0\ub9ac\uc998 \uc218\uc5d0 \ub180\ub77c\uc2e4 \uac81\ub2c8\ub2e4.\n* \uac01 \uba38\uc2e0\ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\uc5d0\ub294 \uc5ec\ub7ec \ud30c\ub77c\ubbf8\ud130\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\ubd84\ub958\uae30\ub3c4 n_estimators, max_features, max_depth, min_samples_split, min_samples_leaf \ub4f1 \uc5ec\ub7ec \ud30c\ub77c\ubbf8\ud130\ub4e4\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4\n* \ubaa8\ub378 \uac1d\uccb4\ub97c \ub9cc\ub4e4\uace0, fit \uba54\uc18c\ub4dc\ub85c \ud559\uc2b5\uc2dc\ud0b5\ub2c8\ub2e4.\n* \uadf8\ub7f0 \ud6c4 valid set input \uc744 \ub123\uc5b4\uc8fc\uc5b4 \uc608\uce21\uac12(X_vld sample(\ud0d1\uc2b9\uac1d)\uc758 \uc0dd\uc874\uc5ec\ubd80)\ub97c \uc5bb\uc2b5\ub2c8\ub2e4.","d4ab2abc":"* Embarked \ub294 \ud0d1\uc2b9\ud55c \ud56d\uad6c\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n* \uc704\uc5d0\uc11c \ud574\uc654\ub358 \uac83\uacfc \ube44\uc2b7\ud558\uac8c \ud0d1\uc2b9\ud55c \uacf3\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","984de5e2":"# 1. \ub370\uc774\ud130\uc14b \ud655\uc778","7de19fb1":"* Age \ub294 \ud604\uc7ac continuous feature \uc785\ub2c8\ub2e4. \uc774\ub300\ub85c \uc368\ub3c4 \ubaa8\ub378\uc744 \uc138\uc6b8 \uc218 \uc788\uc9c0\ub9cc, Age \ub97c \uba87\uac1c\uc758 group \uc73c\ub85c \ub098\ub204\uc5b4 category \ud654 \uc2dc\ucf1c\uc904 \uc218 \ub3c4 \uc788\uc2b5\ub2c8\ub2e4. continuous \ub97c categorical \ub85c \ubc14\uafb8\uba74 \uc790\uce6b information loss \uac00 \uc0dd\uae38 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4\ub9cc, \ubcf8 \ud29c\ud1a0\ub9ac\uc5bc\uc5d0\uc11c\ub294 \ub2e4\uc591\ud55c \ubc29\ubc95\uc744 \uc18c\uac1c\ud558\ub294 \uac83\uc774 \ubaa9\uc801\uc774\ubbc0\ub85c \uc9c4\ud589\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n* \ubc29\ubc95\uc740 \uc5ec\ub7ec\uac00\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4. dataframe \uc758 indexing \ubc29\ubc95\uc778 loc \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc9c1\uc811\ud574\uc904 \uc218 \uc788\uace0, \uc544\ub2c8\uba74 apply \ub97c \uc0ac\uc6a9\ud574 \ud568\uc218\ub97c \ub123\uc5b4\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uccab\ubc88\uc9f8\ub85c loc \ub97c \uc0ac\uc6a9\ud55c \ubc29\ubc95\uc785\ub2c8\ub2e4. loc \ub294 \uc790\uc8fc\uc4f0\uac8c \ub418\ubbc0\ub85c \uadf8 \uc0ac\uc6a9\ubc95\uc744 \uc219\uc9c0\ud558\uc2dc\uba74 \uc88b\uc2b5\ub2c8\ub2e4.\n* \ub098\uc774\ub294 10\uc0b4 \uac04\uaca9\uc73c\ub85c \ub098\ub204\uaca0\uc2b5\ub2c8\ub2e4.","6c7c896e":"## Pclass","292390ae":"* \ud55c\ubc88 Null \uc774 \uc0ac\ub77c\uc84c\ub294\uc9c0 \ud655\uc778\ud574\ubd05\uc2dc\ub2e4. Embarked Column\ub9cc \uac00\uc838\uc628 \uac83\uc740 \ud558\ub098\uc758 pandas\uc758 Series \uac1d\uccb4\ubbc0\ub85c, isnull() \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574 Series\uc758 \uac12\ub4e4\uc774 null \uc778\uc9c0 \uc544\ub2cc\uc9c0\uc5d0 \ub300\ud55c boolean \uac12\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\uac83\uc5d0 any() \ub97c \uc0ac\uc6a9\ud558\uc5ec, True \uac00 \ub2e8\ud558\ub098\ub77c\ub3c4 \uc788\uc744 \uc2dc(Null\uc774 \ud55c\uac1c\ub77c\ub3c4 \uc788\uc744 \uc2dc) True \ub97c \ubc18\ud658\ud574\uc8fc\uac8c \ub429\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 Null \uc744 S\ub85c \ub2e4 \ubc14\uafd4\uc8fc\uc5c8\uc73c\ubbc0\ub85c False \ub97c \uc5bb\uac8c \ub429\ub2c8\ub2e4","0f91a969":"## Preparation - Split dataset into train, valid, test set","930dfcd6":"## Cabin","36332a74":"### Violin Plot","852841d9":"* \uc544\ubb34\ub7f0 \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\ub3c4 \ud558\uc9c0 \uc54a\uc558\ub294\ub370 84% \uc758 \uc815\ud655\ub3c4\uac00 \ub098\uc654\uc2b5\ub2c8\ub2e4","5d86523a":"## Drop columns\n* \uace0\uc0dd\ud558\uc168\uc2b5\ub2c8\ub2e4. \uc774\uc81c \ucc45\uc0c1\uc744 \uce58\uc6b8 \ub54c \uc785\ub2c8\ub2e4. \ud544\uc694\ud55c columns \ub9cc \ub0a8\uae30\uace0 \ub2e4 \uc9c0\uc6c1\uc2dc\ub2e4.","a634597d":"## Family - SibSp(\ud615\uc81c \uc790\ub9e4) + Parch(\ubd80\ubaa8, \uc790\ub140)","97ad9eae":"* \uc9c0\uae08\uae4c\uc9c0 \ubcf8, Sex, Pclass, Age, Survived \ubaa8\ub450\uc5d0 \ub300\ud574\uc11c \ubcf4\uace0\uc2f6\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc27d\uac8c \uadf8\ub824\uc8fc\ub294 \uac83\uc774 seaborn \uc758 violinplot \uc785\ub2c8\ub2e4.\n* x \ucd95\uc740 \uc6b0\ub9ac\uac00 \ub098\ub220\uc11c \ubcf4\uace0\uc2f6\uc5b4\ud558\ub294 case(\uc5ec\uae30\uc120 Pclass, Sex) \ub97c \ub098\ud0c0\ub0b4\uace0, y \ucd95\uc740 \ubcf4\uace0 \uc2f6\uc5b4\ud558\ub294 distribution(Age) \uc785\ub2c8\ub2e4.","f31a6198":"## Age","f34dbc72":"## Class \uac00 \ub192\uc744\uc218\ub85d \ub098\uc774 \ubd84\ud3ec\uac00 \ud07c","6e3d0f4a":"* \ud604\uc7ac Initial \uc740 Mr, Mrs, Miss, Master, Other \ucd1d 5\uac1c\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uce74\ud14c\uace0\ub9ac\ub85c \ud45c\ud604\ub418\uc5b4\uc838 \uc788\ub294 \ub370\uc774\ud130\ub97c \ubaa8\ub378\uc5d0 \uc778\ud48b\uc73c\ub85c \ub123\uc5b4\uc904 \ub54c \uc6b0\ub9ac\uac00 \ud574\uc57c\ud560 \uac83\uc740 \uba3c\uc800 \ucef4\ud4e8\ud130\uac00 \uc778\uc2dd\ud560 \uc218 \uc788\ub3c4\ub85d \uc218\uce58\ud654 \uc2dc\ucf1c\uc57c \ud569\ub2c8\ub2e4.\n* map method \ub97c \uac00\uc9c0\uace0 \uac04\ub2e8\ud788 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uc0ac\uc804 \uc21c\uc11c\ub300\ub85c \uc815\ub9ac\ud558\uc5ec mapping \ud558\uaca0\uc2b5\ub2c8\ub2e4","dc494665":"## 4.3 Light GBM","c1cdb093":"* \uc6b0\ub9ac\ub294 \uc5ec\ub7ec feature \ub97c \uac00\uc9c0\uace0 \uc788\uc73c\ub2c8 \uc774\ub97c \ud558\ub098\uc758 maxtrix \ud615\ud0dc\ub85c \ubcf4\uba74 \ud3b8\ud560 \ud150\ub370, \uc774\ub97c heatmap plot \uc774\ub77c\uace0 \ud558\uba70, dataframe \uc758 corr() \uba54\uc18c\ub4dc\uc640 seaborn \uc744 \uac00\uc9c0\uace0 \ud3b8\ud558\uac8c \uadf8\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","dee20e2d":"## Pclass, Sex, Age","151471cc":"## Embarked","3cb9d8a1":"## Fill Null in Age using title","38a70306":"## Ticket","6d6573d7":"## \uc5ec\uc790\uc758 \uacbd\uc6b0 \uc0dd\uc874\ub960\uc774 \ub192\uc558\ub2e4.","98eb01b4":"* pandas \uc758 crosstab \uc744 \uc774\uc6a9\ud558\uc5ec \uc6b0\ub9ac\uac00 \ucd94\ucd9c\ud55c Initial \uacfc Sex \uac04\uc758 count \ub97c \uc0b4\ud3b4\ubd05\uc2dc\ub2e4.","db1468be":"## Fill Null in Embarked","da8aba21":"* FamilySize \uc640 \uc0dd\uc874\uc758 \uad00\uacc4\ub97c \ud55c\ubc88 \uc0b4\ud3b4\ubd05\uc2dc\ub2e4","65acefed":"* \uc774\uc81c \uc911\ubcf5\ub418\ub294 Age_cat \uceec\ub7fc\uacfc \uc6d0\ub798 \uceec\ub7fc Age \ub97c \uc81c\uac70\ud558\uaca0\uc2b5\ub2c8\ub2e4.","bd151766":"* \uc704 \ub450 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud574 Embarked\uac00 S, C, Q \uc138\uac00\uc9c0\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c map\uc744 \uc0ac\uc6a9\ud574\ubd05\uc2dc\ub2e4","7b02d06c":"##  > \ubcf4\uc2dc\ub2e4\uc2dc\ud53c, distribution\uc774 \ub9e4\uc6b0 \ube44\ub300\uce6d\uc778 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.(high skewness). \ub9cc\uc57d \uc774\ub300\ub85c \ubaa8\ub378\uc5d0 \ub123\uc5b4\uc900\ub2e4\uba74 \uc790\uce6b \ubaa8\ub378\uc774 \uc798\ubabb \ud559\uc2b5\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uba87\uac1c \uc5c6\ub294 outlier \uc5d0 \ub300\ud574\uc11c \ub108\ubb34 \ubbfc\uac10\ud558\uac8c \ubc18\uc751\ud55c\ub2e4\uba74, \uc2e4\uc81c \uc608\uce21 \uc2dc\uc5d0 \uc88b\uc9c0 \ubabb\ud55c \uacb0\uacfc\ub97c \ubd80\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n##  > outlier\uc758 \uc601\ud5a5\uc744 \uc904\uc774\uae30 \uc704\ud574 Fare \uc5d0 log \ub97c \ucde8\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n##  > \uc5ec\uae30\uc11c \uc6b0\ub9ac\ub294 pandas \uc758 \uc720\uc6a9\ud55c \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uac81\ub2c8\ub2e4. dataFrame \uc758 \ud2b9\uc815 columns \uc5d0 \uacf5\ud1b5\ub41c \uc791\uc5c5(\ud568\uc218)\ub97c \uc801\uc6a9\ud558\uace0 \uc2f6\uc73c\uba74 \uc544\ub798\uc758 map, \ub610\ub294 apply \ub97c \uc0ac\uc6a9\ud558\uba74 \ub9e4\uc6b0 \uc190\uc27d\uac8c \uc801\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n##  > \uc6b0\ub9ac\uac00 \uc9c0\uae08 \uc6d0\ud558\ub294 \uac83\uc740 Fare columns \uc758 \ub370\uc774\ud130 \ubaa8\ub450\ub97c log \uac12 \ucde8\ud558\ub294 \uac83\uc778\ub370, \ud30c\uc774\uc36c\uc758 \uac04\ub2e8\ud55c lambda \ud568\uc218\ub97c \uc774\uc6a9\ud574 \uac04\ub2e8\ud55c \ub85c\uadf8\ub97c \uc801\uc6a9\ud558\ub294 \ud568\uc218\ub97c map \uc5d0 \uc778\uc218\ub85c \ub123\uc5b4\uc8fc\uba74, Fare columns \ub370\uc774\ud130\uc5d0 \uadf8\ub300\ub85c \uc801\uc6a9\uc774 \ub429\ub2c8\ub2e4.","af3e4ea3":"* \ubcf4\uc2dc\ub2e4\uc2dc\ud53c \uc624\ub978\ucabd\uc5d0 \uc6b0\ub9ac\uac00 \ub9cc\ub4e4\ub824\uace0 \ud588\ub358 one-hot encoded columns \uac00 \uc0dd\uc131\ub41c \uac83\uc774 \ubcf4\uc785\ub2c8\ub2e4\n* Embarked \uc5d0\ub3c4 \uc801\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4. Initial \ub54c\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c one-hot encoding \uc744 \uc0ac\uc6a9\ud574 \ud45c\ud604\ud558\uaca0\uc2b5\ub2c8\ub2e4.","1a6d429c":"## Sex","4ea564b8":"## Prediction on Test set ","6fe54b9e":"## Both Sex and Pclass","f9be256d":"## Change Age(continuous to categorical)","6af3af9c":"* \uc774\uc81c \ubaa8\ub378\uc774 \ud559\uc2b5\ud558\uc9c0 \uc54a\uc558\ub358(\ubcf4\uc9c0 \uc54a\uc558\ub358) \ud14c\uc2a4\ud2b8\uc14b\uc744 \ubaa8\ub378\uc5d0 \uc8fc\uc5b4\uc11c, \uc0dd\uc874\uc5ec\ubd80\ub97c \uc608\uce21\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* \uc774 \uacb0\uacfc\ub294 \uc2e4\uc81c\ub85c submission(\uc81c\ucd9c\uc6a9) \uc774\ubbc0\ub85c \uacb0\uacfc\ub294 leaderboard \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uce90\uae00\uc5d0\uc11c \uc900 \ud30c\uc77c, gender_submission.csv \ud30c\uc77c\uc744 \uc77d\uc5b4\uc11c \uc81c\ucd9c \uc900\ube44\ub97c \ud558\uaca0\uc2b5\ub2c8\ub2e4.","6a70b2ec":"* pandas series \ub97c \uc774\uc6a9\ud558\uba74 \uc27d\uac8c sorting \uc744 \ud558\uc5ec \uadf8\ub798\ud504\ub97c \uadf8\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","681451a5":"* \uc774 feature \ub294 NaN \uc774 \ub300\ub7b5 80% \uc774\ubbc0\ub85c, \uc0dd\uc874\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce60 \uc911\uc694\ud55c \uc815\ubcf4\ub97c \uc5bb\uc5b4\ub0b4\uae30\uac00 \uc27d\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4.\n* \uadf8\ub7ec\ubbc0\ub85c \uc6b0\ub9ac\uac00 \uc138\uc6b0\ub824\ub294 \ubaa8\ub378\uc5d0 \ud3ec\ud568\uc2dc\ud0a4\uc9c0 \uc54a\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","1ee4630b":"* \ubcf4\uc2dc\ub2e4\uc2dc\ud53c, ticket number \ub294 \ub9e4\uc6b0 \ub2e4\uc591\ud569\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uc5ec\uae30\uc11c \uc5b4\ub5a4 \ud2b9\uc9d5\uc744 \uc774\ub04c\uc5b4\ub0b4\uc11c \uc0dd\uc874\uacfc \uc5f0\uacb0\uc2dc\ud0ac \uc218 \uc788\uc744\uae4c\uc694?\n* \uc5ec\ub7ec\ubd84\uc774 \uc9c1\uc811 \ud55c\ubc88 \uc544\uc774\ub514\uc5b4\ub97c \ub0b4\ubcf4\uc138\uc694! \uc774\uac83\uc774 \ubcf8\uaca9\uc801\uc778 \uce90\uae00 \ub808\uc774\uc2a4\uc758 \uc2dc\uc791\uc810\uc785\ub2c8\ub2e4\n* \uc774 \ud29c\ud1a0\ub9ac\uc5bc\uc5d0\uc11c\ub294 \ud29c\ud1a0\ub9ac\uc5bc\uc774\ub2c8 \uc77c\ub2e8 ticket \uc740 \ub118\uae30\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ub05d\ub0b8 \ud6c4, \uc5ec\ub7ec\ubd84\uc758 \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\uae30 \uc704\ud574 ticket \uc5d0\uc11c \uc815\ubcf4\ub97c \uc774\ub04c\uc5b4\ub0b4\ub294 \uac83\ub3c4 \uc88b\uaca0\ub124\uc694!","5d1b716a":"* Sklearn \uc740 \uba38\uc2e0\ub7ec\ub2dd\uc758 \ucc98\uc74c\ubd80\ud130 \ub05d\uae4c\uc9c0\uac00 \ub2e4 \uc788\uc2b5\ub2c8\ub2e4. feature engineering, preprocessing, \uc9c0\ub3c4 \ud559\uc2b5 \uc54c\uace0\ub9ac\uc998, \ube44\uc9c0\ub3c4 \ud559\uc2b5 \uc54c\uace0\ub9ac\uc998, \ubaa8\ub378 \ud3c9\uac00, \ud30c\uc774\ud504\ub77c\uc778 \ub4f1 \uba38\uc2e0\ub7ec\ub2dd\uc5d0 \uad00\ub828\ub41c \ubaa8\ub4e0 \uc791\uc5c5\ub4e4\uc774 \uc190\uc26c\uc6b4 \uc778\ud130\ud398\uc774\uc2a4\ub85c \uad6c\ud604\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130 \ubd84\uc11d + \uba38\uc2e0\ub7ec\ub2dd\uc744 \ud558\uace0\uc2f6\ub2e4\uba74, \uc774 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ubc18\ub4dc\uc2dc \uc219\uc9c0\ud574\uc57c\ud569\ub2c8\ub2e4.\n* \ud30c\uc774\uc36c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud65c\uc6a9\ud55c \uba38\uc2e0\ub7ec\ub2dd(Introduction to machine larning with Python)\ucc45\uc744 \uc0ac\uc11c \uacf5\ubd80\ud558\uc2dc\uae38 \ub9e4\uc6b0 \ucd94\ucc9c\ud574\ub4dc\ub9bd\ub2c8\ub2e4.\n* \uc9c0\uae08 \ud0c0\uc774\ud0c0\ub2c9 \ubb38\uc81c\ub294 target class(survived)\uac00 \uc788\uc73c\uba70, target class \ub294 0, 1\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc73c\ubbc0\ub85c(binary) binary classfication \ubb38\uc81c\uc785\ub2c8\ub2e4.\n* \uc6b0\ub9ac\uac00 \uc9c0\uae08 \uac00\uc9c0\uace0 \uc788\ub294 train set \uc758 survived\ub97c \uc81c\uc678\ud55c input \uc744 \uac00\uc9c0\uace0 \ubaa8\ub378\uc744 \ucd5c\uc801\ud654\uc2dc\ucf1c\uc11c \uac01 \uc0d8\ud50c(\ud0d1\uc2b9\uac1d)\uc758 \uc0dd\uc874\uc720\ubb34\ub97c \ud310\ub2e8\ud558\ub294 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4 \ub0c5\ub2c8\ub2e4.\n* \uadf8 \ud6c4 \ubaa8\ub378\uc774 \ud559\uc2b5\ud558\uc9c0 \uc54a\uc558\ub358 test set \uc744 input \uc73c\ub85c \uc8fc\uc5b4\uc11c test set \uc758 \uac01 \uc0d8\ud50c(\ud0d1\uc2b9\uac1d)\uc758 \uc0dd\uc874 \uc720\ubb34\ub97c \uc608\uce21\ud574\ubd05\ub2c8\ub2e4.","a51d2eff":"* \uac00\uc7a5 \uba3c\uc800, \ud559\uc2b5\uc5d0 \uc4f0\uc77c \ub370\uc774\ud130\uc640, target label(Survived)\ub97c \ubd84\ub9ac\ud569\ub2c8\ub2e4. drop \uc744 \uc0ac\uc6a9\ud574 \uac04\ub2e8\ud788 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n","126de9b9":"* Figure (1) - \uac00\uc871\ud06c\uae30\uac00 1~11\uae4c\uc9c0 \uc788\uc74c\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84 1\uba85\uc774\uace0 \uadf8 \ub2e4\uc74c\uc73c\ub85c 2, 3, 4\uba85\uc785\ub2c8\ub2e4.\n* Figure (2), (3) - \uac00\uc871 \ud06c\uae30\uc5d0 \ub530\ub978 \uc0dd\uc874\ube44\uad50\uc785\ub2c8\ub2e4. \uac00\uc871\uc774 4\uba85\uc778 \uacbd\uc6b0\uac00 \uac00\uc7a5 \uc0dd\uc874\ud655\ub960\uc774 \ub192\uc2b5\ub2c8\ub2e4. \uac00\uc871\uc218\uac00 \ub9ce\uc544\uc9c8\uc218\ub85d, (5, 6, 7, 8, 11) \uc0dd\uc874\ud655\ub960\uc774 \ub0ae\uc544\uc9c0\ub124\uc694. \uac00\uc871\uc218\uac00 \ub108\ubb34 \uc791\uc544\ub3c4(1), \ub108\ubb34 \ucee4\ub3c4(5, 6, 8, 11) \uc0dd\uc874 \ud655\ub960\uc774 \uc791\ub124\uc694. 3~4\uba85 \uc120\uc5d0\uc11c \uc0dd\uc874\ud655\ub960\uc774 \ub192\uc740 \uac78 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","19e7f13a":"* \uc774 feature \ub294 NaN \uc740 \uc5c6\uc2b5\ub2c8\ub2e4. \uc77c\ub2e8 string data \uc774\ubbc0\ub85c \uc6b0\ub9ac\uac00 \uc5b4\ub5a4 \uc791\uc5c5\ub4e4\uc744 \ud574\uc8fc\uc5b4\uc57c \uc2e4\uc81c \ubaa8\ub378\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294\ub370, \uc774\ub97c \uc704\ud574\uc120 \uc0ac\uc2e4 \uc544\uc774\ub514\uc5b4\uac00 \ud544\uc694\ud569\ub2c8\ub2e4.","77e540d0":"* \uc6b0\ub9ac\uac00 EDA\uc5d0\uc11c \uc0b4\ud3b4\ubd24\ub4ef\uc774, Sex \uc640 Pclass \uac00 Survived \uc5d0 \uc0c1\uad00\uad00\uacc4\uac00 \uc5b4\ub290 \uc815\ub3c4 \uc788\uc74c\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uc0dd\uac01\ubcf4\ub2e4 fare \uc640 Embarked \ub3c4 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\uc74c\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \ub610\ud55c \uc6b0\ub9ac\uac00 \uc5ec\uae30\uc11c \uc5bb\uc744 \uc218 \uc788\ub294 \uc815\ubcf4\ub294 \uc11c\ub85c \uac15\ud55c \uc0c1\uad00\uad00\uacc4\ub97c \uac00\uc9c0\ub294 feature\ub4e4\uc774 \uc5c6\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4.\n* \uc774\uac83\uc740 \uc6b0\ub9ac\uac00 \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0ac \ub54c, \ubd88\ud544\uc694\ud55c(redundant, superfluous) feature \uac00 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. 1 \ub610\ub294 -1 \uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uac00\uc9c4 feature A, B \uac00 \uc788\ub2e4\uba74, \uc6b0\ub9ac\uac00 \uc5bb\uc744 \uc218 \uc788\ub294 \uc815\ubcf4\ub294 \uc0ac\uc2e4 \ud558\ub098\uc77c \uac70\ub2c8\uae4c\uc694.\n* \uc774\uc81c \uc2e4\uc81c\ub85c \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0a4\uae30 \uc55e\uc11c\uc11c data preprocessing (\uc804\ucc98\ub9ac)\uc744 \uc9c4\ud589\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4","5f17692e":"## Model generation and prediction","a160179e":"* \ubcf4\uc2dc\ub2e4\uc2dc\ud53c, \uc870\uae08\uc758 \ucc28\uc774\ub294 \uc788\uc9c0\ub9cc \uc0dd\uc874\ub960\uc740 \uc880 \ube44\uc2b7\ud55c \uac70 \uac19\uc2b5\ub2c8\ub2e4. \uadf8\ub798\ub3c4 C\uac00 \uc81c\uc77c \ub192\uad70\uc694.\n* \ubaa8\ub378\uc5d0 \uc5bc\ub9c8\ub098 \ud070 \uc601\ud5a5\uc744 \ubbf8\uce60\uc9c0\ub294 \ubaa8\ub974\uaca0\uc9c0\ub9cc, \uadf8\ub798\ub3c4 \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n* \uc0ac\uc2e4, \ubaa8\ub378\uc744 \ub9cc\ub4e4\uace0 \ub098\uba74 \uc6b0\ub9ac\uac00 \uc0ac\uc6a9\ud55c feature \ub4e4\uc774 \uc5bc\ub9c8\ub098 \uc911\uc694\ud55c \uc5ed\ud560\uc744 \ud588\ub294\uc9c0 \ud655\uc778\ud574\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \ucd94\ud6c4\uc5d0 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uace0 \ub09c \ub2e4\uc74c\uc5d0 \uc0b4\ud3b4\ubcfc \uac83\uc785\ub2c8\ub2e4.","5249b5af":"## 4.2 GBM","4e55ebe2":"# 2. Exploratory data analysis","c1a5bc35":"* Age\uc758 \ud3c9\uade0\uc744 \uc774\uc6a9\ud574 Null value \ub97c \ucc44\uc6b0\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n* pandas dataframe \uc744 \ub2e4\ub8f0 \ub54c\uc5d0\ub294 boolean array\ub97c \uc774\uc6a9\ud574 indexing \ud558\ub294 \ubc29\ubc95\uc774 \ucc38\uc73c\ub85c \ud3b8\ub9ac\ud569\ub2c8\ub2e4.\n* \uc544\ub798 \ucf54\ub4dc \uccab\uc904\uc744 \ud574\uc11d\ud558\uc790\uba74, isnull() \uc774\uba74\uc11c Initial \uc774 Mr \uc778 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 row(\ud0d1\uc2b9\uac1d) \uc758 'Age' \uc758 \uac12\uc744 33\uc73c\ub85c \uce58\ud658\ud55c\ub2e4 \uc785\ub2c8\ub2e4.\n* loc + boolean + column \uc744 \uc0ac\uc6a9\ud574 \uac12\uc744 \uce58\ud658\ud558\ub294 \ubc29\ubc95\uc740 \uc790\uc8fc \uc4f0\uc774\ubbc0\ub85c \uaf2d \uc775\uc219\ud574\uc9d1\uc2dc\ub2e4.","f5686125":"> * log \ub97c \ucde8\ud558\ub2c8, \uc774\uc81c \ube44\ub300\uce6d\uc131\uc774 \ub9ce\uc774 \uc0ac\ub77c\uc9c4 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n> * \uc6b0\ub9ac\ub294 \uc774\ub7f0 \uc791\uc5c5\uc744 \uc0ac\uc6a9\ud574 \ubaa8\ub378\uc774 \uc880 \ub354 \uc88b\uc740 \uc131\ub2a5\uc744 \ub0b4\ub3c4\ub85d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n> * \uc0ac\uc2e4 \ubc29\uae08\ud55c \uac83\uc740 feature engineering \uc5d0 \ub4e4\uc5b4\uac00\ub294 \ubd80\ubd84\uc778\ub370, \uc5ec\uae30\uc11c \uc791\uc5c5\ud588\uc2b5\ub2c8\ub2e4.\n> * \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0a4\uae30 \uc704\ud574, \uadf8\ub9ac\uace0 \uadf8 \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ub192\uc774\uae30 \uc704\ud574 feature \ub4e4\uc5d0 \uc5ec\ub7ec \uc870\uc791\uc744 \uac00\ud558\uac70\ub098, \uc0c8\ub85c\uc6b4 feature\ub97c \ucd94\uac00\ud558\ub294 \uac83\uc744 feature engineering \uc774\ub77c\uace0 \ud558\ub294\ub370, \uc6b0\ub9ac\ub294 \uc774\uc81c \uadf8\uac83\uc744 \uc0b4\ud3b4\ubcfc \uac83\uc785\ub2c8\ub2e4.","eefbb5c3":"* Figure(1) - \uc804\uccb4\uc801\uc73c\ub85c \ubd24\uc744 \ub54c, S \uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc740 \uc0ac\ub78c\uc774 \ud0d1\uc2b9\ud588\uc2b5\ub2c8\ub2e4.\n* Figure(2) - C\uc640 Q \ub294 \ub0a8\ub140\uc758 \ube44\uc728\uc774 \ube44\uc2b7\ud558\uace0, S\ub294 \ub0a8\uc790\uac00 \ub354 \ub9ce\uc2b5\ub2c8\ub2e4.\n* Figure(3) - \uc0dd\uc874\ud655\ub960\uc774 S \uacbd\uc6b0 \ub9ce\uc774 \ub0ae\uc740 \uac78 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\uc774\uc804 \uadf8\ub798\ud504\uc5d0\uc11c \ubd24\uc5c8\uc2b5\ub2c8\ub2e4)\n* Figure(4) - Class \ub85c split \ud574\uc11c \ubcf4\ub2c8, C\uac00 \uc0dd\uc874\ud655\ub960\uc774 \ub192\uc740\uac74 \ud074\ub798\uc2a4\uac00 \ub192\uc740 \uc0ac\ub78c\uc774 \ub9ce\uc774 \ud0c0\uc11c \uadf8\ub807\uc2b5\ub2c8\ub2e4. S\ub294 3rd class \uac00 \ub9ce\uc544\uc11c \uc0dd\uc874\ud655\ub960\uc774 \ub0ae\uac8c \ub098\uc635\ub2c8\ub2e4.","0b7fe7ee":"* Age \uc5d0\ub294 null data\uac00 177\uac1c\ub098 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \ucc44\uc6b8 \uc218 \uc788\ub294 \uc5ec\ub7ec \uc544\uc774\ub514\uc5b4\uac00 \uc788\uc744 \uac83\uc778\ub370, \uc5ec\uae30\uc11c \uc6b0\ub9ac\ub294 title + statistics \ub97c \uc0ac\uc6a9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* \uc601\uc5b4\uc5d0\uc11c\ub294 Miss, Mrr, Mrs \uac19\uc740 title\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. \uac01 \ud0d1\uc2b9\uac1d\uc758 \uc774\ub984\uc5d0\ub294 \uaf2d \uc774\ub7f0 title \uc774 \ub4e4\uc5b4\uac00\uac8c \ub418\ub294\ub370 \uc774\ub97c \uc0ac\uc6a9\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* pandas series \uc5d0\ub294 data \ub97c string \uc73c\ub85c \ubc14\uafd4\uc8fc\ub294 str method, \uac70\uae30\uc5d0 \uc815\uaddc\ud45c\ud604\uc2dd\uc744 \uc801\uc6a9\ud558\uac8c \ud574\uc8fc\ub294 extract method\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc0ac\uc6a9\ud558\uc5ec title \uc744 \uc27d\uac8c \ucd94\ucd9c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. title\uc744 Initial column\uc5d0 \uc800\uc7a5\ud558\uaca0\uc2b5\ub2c8\ub2e4","177e7664":"*  Class \uac00 \ub192\uc744 \uc218\ub85d \ub098\uc774 \ub9ce\uc740 \uc0ac\ub78c\uc758 \ube44\uc911\uc774 \ucee4\uc9d0\n*  \ub098\uc774\ub300\uac00 \ubcc0\ud558\uba74\uc11c \uc0dd\uc874\ub960\uc774 \uc5b4\ub5bb\uac8c \ub418\ub294 \uc9c0 \ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4.\n*  \ub098\uc774\ubc94\uc704\ub97c \uc810\uc810 \ub113\ud600\uac00\uba70, \uc0dd\uc874\ub960\uc774 \uc5b4\ub5bb\uac8c \ub418\ub294\uc9c0 \ud55c\ubc88 \ubd05\uc2dc\ub2e4.","60bef484":"* Fare \ub294 \ud0d1\uc2b9\uc694\uae08\uc774\uba70, \uc5f0\uc18d\ud615 \ubcc0\uc218\uc785\ub2c8\ub2e4.\n* histogram\n* Boxplot","01c996a3":"* \ub450\uac00\uc9c0 \ubc29\ubc95\uc774 \uc798 \uc801\uc6a9\ub42c\ub2e4\uba74, \ub458\ub2e4 \uac19\uc740 \uacb0\uacfc\ub97c \ub0b4\uc57c\ud569\ub2c8\ub2e4.\n* \uc774\ub97c \ud655\uc778\ud558\uae30 \uc704\ud574 Series \uac04 boolean \ube44\uad50 \ud6c4 all() \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud569\uc2dc\ub2e4. all() \uba54\uc18c\ub4dc\ub294 \ubaa8\ub4e0 \uac12\uc774 True \uba74 True, \ud558\ub098\ub77c\ub3c4 False \uac00 \uc788\uc73c\uba74 False \ub97c \uc90d\ub2c8\ub2e4.","62b1ecf6":"* \uc218\uce58\ud654\uc2dc\ud0a8 \uce74\ud14c\uace0\ub9ac \ub370\uc774\ud130\ub97c \uadf8\ub300\ub85c \ub123\uc5b4\ub3c4 \ub418\uc9c0\ub9cc, \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ub192\uc774\uae30 \uc704\ud574 one-hot encoding\uc744 \ud574\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uc218\uce58\ud654\ub294 \uac04\ub2e8\ud788 Master == 0, Miss == 1, Mr == 2, Mrs == 3, Other == 4 \ub85c \ub9e4\ud551\ud574\uc8fc\ub294 \uac83\uc744 \ub9d0\ud569\ub2c8\ub2e4.\n* One-hot encoding \uc740 \ub354\ubbf8\ubcc0\uc218 \ub9cc\ub4dc\ub294 \uac70\ub77c\uace0 \uc0dd\uac01\ud558\uba74 \ub428.\n* \uc704\uc640 \uac19\uc740 \uc791\uc5c5\uc744 \uc9c1\uc811 \ucf54\ub529\ud560 \uc218\ub3c4 \uc788\uc9c0\ub9cc, pandas \uc758 get_dummies \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc27d\uac8c \ud574\uacb0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \ucd1d 5\uac1c\uc758 \uce74\ud14c\uace0\ub9ac\ub2c8, one-hot encoding \uc744 \ud558\uace0 \ub098\uba74 \uc0c8\ub85c\uc6b4 5\uac1c\uc758 column \uc774 \uc0dd\uaca8\ub0a9\ub2c8\ub2e4.\n* Initial \uc744 prefix\ub85c \ub450\uc5b4\uc11c \uad6c\ubd84\uc774 \uc27d\uac8c \ub9cc\ub4e4\uc5b4 \uc90d\ub2c8\ub2e4.","8bb1b19d":"## One-hot encoding on Initial and Embarked","4ea4b76f":"## Boxplot","ac623189":"* \uc704 table \uc744 \ucc38\uace0\ud558\uc5ec, \ub0a8\uc790, \uc5ec\uc790\uac00 \uc4f0\ub294 initial \uc744 \uad6c\ubd84\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. replace \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uba74, \ud2b9\uc815 \ub370\uc774\ud130 \uac12\uc744 \uc6d0\ud558\ub294 \uac12\uc73c\ub85c \uce58\ud658\ud574\uc90d\ub2c8\ub2e4.","d5df8f06":"### Class \ub192\uc744\uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\uc558\ub2e4.","d336f09a":"# 3. Feature engineering","17f2aeb3":"* Embarked \ub3c4 C, Q, S\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc2b5\ub2c8\ub2e4. map \uc744 \uc774\uc6a9\ud574 \ubc14\uafd4\ubd05\uc2dc\ub2e4.\n* \uadf8\ub7ec\uae30 \uc55e\uc11c\uc11c, \ud2b9\uc815 column \uc5d0 \uc5b4\ub5a4 \uac12\ub4e4\uc774 \uc788\ub294 \uc9c0 \ud655\uc778\ud574\ubcf4\ub294 \ubc29\ubc95\uc744 \uc7a0\uae50 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uac04\ub2e8\ud788 unique() \uba54\uc18c\ub4dc\ub97c \uc4f0\uac70\ub098, value_counts() \ub97c \uc368\uc11c count \uae4c\uc9c0 \ubcf4\ub294 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4.","91f83fb4":"### # \ubc94\uc8fc\ud615 vs \ubc94\uc8fc\ud615","f66e7563":"*  \uc774\uc81c \uac01 feature \uac04\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ud55c\ubc88 \ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4. \ub450 \ubcc0\uc218\uac04\uc758 Pearson correlation \uc744 \uad6c\ud558\uba74 (-1, 1) \uc0ac\uc774\uc758 \uac12\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. -1\ub85c \uac08\uc218\ub85d \uc74c\uc758 \uc0c1\uad00\uad00\uacc4, 1\ub85c \uac08\uc218\ub85d \uc591\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uc758\ubbf8\ud558\uba70, 0\uc740 \uc0c1\uad00\uad00\uacc4\uac00 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. ","33a98cdd":"## Change Initial, Embarked and Sex (string to numerical)","d8fc8019":"* \uc774\uc81c \ubcf8\uaca9\uc801\uc73c\ub85c Null \uc744 \ucc44\uc6b8 \uac83\uc785\ub2c8\ub2e4. null data \ub97c \ucc44\uc6b0\ub294 \ubc29\ubc95\uc740 \uc815\ub9d0 \ub9ce\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. statistics \ub97c \ud65c\uc6a9\ud558\ub294 \ubc29\ubc95\ub3c4 \uc788\uace0, null data \uac00 \uc5c6\ub294 \ub370\uc774\ud130\ub97c \uae30\ubc18\uc73c\ub85c \uc0c8\ub85c\uc6b4 \uba38\uc2e0\ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\uc744 \ub9cc\ub4e4\uc5b4 \uc608\uce21\ud574\uc11c \ucc44\uc6cc\ub123\ub294 \ubc29\uc2dd\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 statistics \ub97c \ud65c\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4.\n* \uc5ec\uae30\uc11c statistics \ub294 train data \uc758 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uc5b8\uc81c\ub098 test \ub97c unseen \uc73c\ub85c \ub454 \uc0c1\ud0dc\ub85c \ub194\ub46c\uc57c \ud558\uba70, train \uc5d0\uc11c \uc5bb\uc740 statistics \ub97c \uae30\ubc18\uc73c\ub85c test \uc758 null data \ub97c \ucc44\uc6cc\uc918\uc57c \ud569\ub2c8\ub2e4.","5c51435b":"## Fare","8540b090":"* \ubcf4\ud1b5 train, test \ub9cc \uc5b8\uae09\ub418\uc9c0\ub9cc, \uc2e4\uc81c \uc88b\uc740 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c \uc6b0\ub9ac\ub294 valid set\uc744 \ub530\ub85c \ub9cc\ub4e4\uc5b4 \ubaa8\ub378 \ud3c9\uac00\ub97c \ud574\ubd05\ub2c8\ub2e4.\n* \ub9c8\uce58 \ucd95\uad6c\ub300\ud45c\ud300\uc774 \ud300\ud6c8\ub828(train)\uc744 \ud558\uace0 \ubc14\ub85c \uc6d4\ub4dc\ucef5(test)\ub85c \ub098\uac00\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \ud300\ud6c8\ub828(train)\uc744 \ud55c \ub2e4\uc74c \ud3c9\uac00\uc804(valid)\ub97c \uac70\uccd0 \ud300\uc758 \ud6c8\ub828 \uc815\ub3c4(\ud559\uc2b5\uc815\ub3c4)\ub97c \ud655\uc778\ud558\uace0 \uc6d4\ub4dc\ucef5(test)\uc5d0 \ub098\uac00\ub294 \uac83\uacfc \ube44\uc2b7\ud569\ub2c8\ub2e4.\n* train_test_split \uc744 \uc0ac\uc6a9\ud558\uc5ec \uc27d\uac8c train \uc14b\uc744 \ubd84\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","07d49676":"## ########## \uc815\ub9d0 \uc8fc\uc758\ud560 \uc810 #########\n## Train\uacfc Test\ub97c \ub098\ub204\ub294 \uc758\ubbf8!\n## \uacb0\uce21\uce58 \ub300\uce58\ub97c \ud560 \ub54c Test \uacb0\uce21\uce58\ub97c \ucc44\uc6b0\ub294 \uac12\uc740 \ubb58\ub85c \ucc44\uc6b8\uae4c?\n## \ub2f9\uc5f0\ud788 Train\uc5d0\uc11c \uad6c\ud574\ub0b8 \ud1b5\uacc4\uce58\ub97c \uad6c\ud574\uc57c \ud558\ub294 \uac70\uc784\n## Test\ub294 \uc9c4\uc9dc \ub9d0 \uadf8\ub300\ub85c Test\ud560 \ub54c \uc4f4\ub2e4\ub294 \uac83\uc5d0 \uc720\uc758","91480928":"* \uc544\uc8fc \uc27d\uac8c one-hot encoding \uc744 \uc801\uc6a9\ud588\uc2b5\ub2c8\ub2e4.\n* sklearn \ub85c Labelencoder + OneHotencoder \uc774\uc6a9\ud574\ub3c4 one-hot encoding \uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4.\n* \ub2e4\ub978 \ud29c\ud1a0\ub9ac\uc5bc\uc5d0\uc11c \ud55c\ubc88 \uc368\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 get_dummies \ub85c \ucda9\ubd84\ud788 \uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc5d0 get_dummies \ub9cc\uc73c\ub85c \ub05d\ub0b4\uaca0\uc2b5\ub2c8\ub2e4.\n* \uac00\ub054 category \uac00 100\uac1c\uac00 \ub118\uc5b4\uac00\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub54c one-hot encoding\uc744 \uc0ac\uc6a9\ud558\uba74 column\uc774 100\uac1c\uac00 \uc0dd\uaca8, \ud559\uc2b5\uc2dc \ub9e4\uc6b0 \ubc84\uac70\uc6b8 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\ub294 \ub2e4\ub978 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\uae30\ub3c4 \ud558\ub294\ub370, \uc774\ub294 \ub2e4\uc74c\uc5d0 \ud55c\ubc88 \ub2e4\ub904\ubcf4\uaca0\uc2b5\ub2c8\ub2e4."}}