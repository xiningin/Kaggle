{"cell_type":{"5d5c7b7c":"code","b3e2cfcd":"code","136a43fa":"code","45b78d4e":"code","b463c774":"code","4ffffeb1":"code","026da4cb":"code","bb7e21f4":"code","e26e1b99":"code","0589e276":"code","0d1aacd7":"code","7a93d511":"code","17f87e3f":"code","5d00b8ee":"code","89e672f3":"code","3257cf2e":"code","b869f167":"code","4748a4d6":"code","b1e7965a":"code","986a1603":"code","064885c8":"code","0da3e97d":"code","38c115a1":"code","26d2c5d6":"code","7a36890d":"code","39b9e6a2":"code","4cfcec79":"code","9ce69724":"markdown","60d807f5":"markdown","cb8a6367":"markdown","51571912":"markdown","cac00557":"markdown"},"source":{"5d5c7b7c":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","b3e2cfcd":"data0=pd.read_csv('..\/input\/in-hospital-mortality-prediction\/data01.csv')\ndata0[0:3].T","136a43fa":"data0=data0.drop(['group','ID'],axis=1)","45b78d4e":"print(data0.columns.tolist())\nprint(data0.info())","b463c774":"data0=data0.fillna(0)","4ffffeb1":"target=['outcome']\ndataY=data0[target]\ndataX=data0.drop('outcome',axis=1)","026da4cb":"n=len(data0)\nprint(n)","bb7e21f4":"N=list(range(n))\nrandom.seed(2021)\nrandom.shuffle(N)","e26e1b99":"trainX=dataX.loc[N[0:(n\/\/4)*3-1]]\ntrainY=dataY.loc[N[0:(n\/\/4)*3-1]]\ntestX=dataX.loc[N[(n\/\/4)*3:]]\ntestY=dataY.loc[N[(n\/\/4)*3:]]","0589e276":"print(trainX.shape)\nprint(testX.shape)","0d1aacd7":"df_columns = list(dataX.columns)\nprint(df_columns)","7a93d511":"train_df=trainX\ntest_df=testX","17f87e3f":"train_df.columns=df_columns\ntest_df.columns=df_columns","5d00b8ee":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","89e672f3":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","3257cf2e":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","b869f167":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","4748a4d6":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","b1e7965a":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","986a1603":"y = trainY\nprint(y.shape)\nydf=pd.DataFrame(y)\nydf","064885c8":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('ACTUAL TRAIN '+target[i],fontsize=12)\n    ax.set_ylabel('PREDICTED TRAIN '+target[i],fontsize=12)\n    ax.scatter(y,oof)","0da3e97d":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n    \n    print()\n    print(order[0:9].tolist())\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","38c115a1":"pred1=[]\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n    pred0 = np.array([model.predict(test_feat_df.values) for model in models])\n    pred1+=[np.mean(pred0, axis=0)]","26d2c5d6":"pred1=np.array(pred1)\ntestY=np.array(testY)","7a36890d":"print(pred1.T.shape)\nprint(testY.shape)","39b9e6a2":"for i in range(1):\n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('ACTUAL TEST '+target[i],fontsize=12)\n    ax.set_ylabel('PRDICTED TEST '+target[i],fontsize=12)\n    ax.scatter(testY[:,i],pred1.T[:,i])","4cfcec79":"# Cols are top 9 impportant factors\ncols=['Lactic acid', 'Bicarbonate', 'Anion gap', 'Leucocyte', 'Blood calcium', 'RDW', 'Lymphocyte', 'PCO2', 'Urea nitrogen']\nfig, ax = plt.subplots(3,3,figsize=(15,15))\nfor i in tqdm(range(9)):\n    r=i\/\/3\n    c=i%3\n    sns.histplot(data0[data0.outcome==0][cols[i]], label=cols[i]+' outcome=0', ax=ax[r,c], color='black',bins=20)\n    sns.histplot(data0[data0.outcome==1][cols[i]], label=cols[i]+' outcome=1', ax=ax[r,c], color='C1',bins=20)\n    ax[r,c].legend()\n    ax[r,c].grid()\nplt.show()","9ce69724":"##### Target Variable - Outcome\n* 0 - Alive\n* 1 - Death","60d807f5":"# Target setting","cb8a6367":"# Visualize Importance and Predict","51571912":"# Model","cac00557":"### 'Lactic acid', 'Bicarbonate', and 'Anion gap' are the top 3 important factors for 'outcome'."}}