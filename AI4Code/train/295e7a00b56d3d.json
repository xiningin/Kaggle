{"cell_type":{"0c47faf6":"code","ab420db5":"code","eac83182":"code","f9a57e73":"code","d0479bc5":"code","020afe56":"code","990ddcc0":"code","ff5524cf":"code","3f2a8fe1":"code","ce2c02a7":"code","a11dfb25":"code","8bff238a":"code","613365ee":"code","abfc5c45":"code","b9d677f2":"code","80788322":"markdown","70c205fc":"markdown","9a5b344b":"markdown","57a8a9c0":"markdown","c5f50255":"markdown","9e38d976":"markdown"},"source":{"0c47faf6":"!pip install jcopdl","ab420db5":"import torch\nfrom torchvision import datasets, transforms\nfrom torchvision.models import mobilenet_v2\nfrom torch import nn, optim\nfrom torch.utils.data import DataLoader, TensorDataset\nfrom torchvision.utils import make_grid\n\nfrom tqdm.auto import tqdm\nfrom jcopdl.callback import Callback, set_config\nfrom jcopdl.layers import linear_block, conv_block\n\nimport matplotlib.pyplot as plt\n\nimport pandas as pd\nimport numpy as np\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\ndevice","eac83182":"bs = 128\ncrop_size = 224\n\ntrain_transform = transforms.Compose([\n    transforms.RandomRotation(10),\n    transforms.RandomResizedCrop(crop_size, scale=(0.8, 1.0)),\n    transforms.RandomHorizontalFlip(),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    ])\n\ntest_transform = transforms.Compose([\n    transforms.Resize(230),\n    transforms.CenterCrop(crop_size),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    ])\n\ntrain_set = datasets.ImageFolder(\"..\/input\/100-bird-species\/train\", transform=train_transform)\ntrainloader = DataLoader(train_set, batch_size=bs, shuffle=True, num_workers=2)\n\nval_set = datasets.ImageFolder(\"..\/input\/100-bird-species\/valid\", transform=test_transform)\nvalloader = DataLoader(val_set, batch_size=bs, shuffle=True)\n\ntest_set = datasets.ImageFolder(\"..\/input\/100-bird-species\/test\", transform=test_transform)\ntestloader = DataLoader(test_set, shuffle=True)","f9a57e73":"len(train_set), len(val_set), len(test_set)","d0479bc5":"label2cat = train_set.classes\nlabel2cat, len(label2cat)","020afe56":"feature, target = next(iter(trainloader))\nfeature.shape","990ddcc0":"class CustomMobileNetv2(nn.Module):\n  def __init__(self, output_size):\n    super().__init__()\n    self.mnet = mobilenet_v2(pretrained=True)\n    self.freeze()\n\n    self.mnet.classifier = nn.Sequential(\n        nn.Linear(1280, output_size),\n        nn.LogSoftmax(1)\n    )\n\n  def forward(self, x):\n    return self.mnet(x)\n  \n  def freeze(self):\n    for param in self.mnet.parameters():\n      param.requires_grad = False\n\n  def unfreeze(self):\n    for param in self.mnet.parameters():\n      param.requires_grad = True","ff5524cf":"config = set_config({\n    'batch_size': bs,\n    'crop_size': crop_size,\n    'output_size': len(train_set.classes)\n})","3f2a8fe1":"model = CustomMobileNetv2(config.output_size).to(device)\ncriterion = nn.NLLLoss()\noptimizer = optim.AdamW(model.parameters(), lr=0.001)\ncallback = Callback(model, config, early_stop_patience=2, outdir='model')","ce2c02a7":"def loop_fn(mode, dataset, dataloader, model, criterion, optimizer, device):\n  if mode == 'train':\n    model.train()\n  elif mode == 'val':\n    model.eval()\n  \n  cost = correct = 0\n  for feature, target in tqdm(dataloader, desc=mode.title()):\n    feature, target = feature.to(device), target.to(device)\n    output = model(feature)\n    loss = criterion(output, target)\n\n    if mode == 'train':\n      loss.backward()\n      optimizer.step()\n      optimizer.zero_grad()\n    \n    cost += loss.item() * feature.shape[0]\n    correct += (output.argmax(1) == target).sum().item()\n  cost = cost\/len(dataset)\n  acc = correct\/len(dataset)\n  return cost, acc","a11dfb25":"while True:\n  train_cost, train_score = loop_fn('train', train_set, trainloader, model, criterion, optimizer, device)\n  with torch.no_grad():\n    test_cost, test_score = loop_fn('val', val_set, valloader, model, criterion, optimizer, device)\n\n  # Logging\n  callback.log(train_cost, test_cost, train_score, test_score)\n\n  # Checkpoint\n  callback.save_checkpoint()\n\n  # Runtime Plotting\n  callback.cost_runtime_plotting()\n  callback.score_runtime_plotting()\n\n  # Early Stopping\n  if callback.early_stopping(model, monitor='test_score'):\n    callback.plot_cost()\n    callback.plot_score()\n    break","8bff238a":"model.unfreeze()\noptimizer = optim.AdamW(model.parameters(), lr=1e-5)\n\ncallback.reset_early_stop()\ncallback.early_stop_patience = 3","613365ee":"while True:\n  train_cost, train_score = loop_fn('train', train_set, trainloader, model, criterion, optimizer, device)\n  with torch.no_grad():\n    test_cost, test_score = loop_fn('val', val_set, valloader, model, criterion, optimizer, device)\n\n  # Logging\n  callback.log(train_cost, test_cost, train_score, test_score)\n\n  # Checkpoint\n  callback.save_checkpoint()\n\n  # Runtime Plotting\n  callback.cost_runtime_plotting()\n  callback.score_runtime_plotting()\n\n  # Early Stopping\n  if callback.early_stopping(model, monitor='test_score'):\n    callback.plot_cost()\n    callback.plot_score()\n    break","abfc5c45":"for feature, target in testloader:\n  feature, target = feature.to(device), target.to(device)\n  with torch.no_grad():\n    model.eval()\n    output = model(feature)\n    preds = output.argmax(1)\n\nfig, axes = plt.subplots(6, 6, figsize=(24, 24))\nfor img, label, pred, ax in zip(feature, target, preds, axes.flatten()):\n  ax.imshow(img.permute(1,2,0).cpu())\n  font = {\"color\":'r'} if label != pred else {\"color\": 'g'}\n  label, pred = label2cat[label.item()], label2cat[pred.item()]\n  ax.set_title(f\"Label: {label}\\nPred: {pred}\", fontdict=font);\n  ax.axis(\"off\");","b9d677f2":"accuracy = []\nfor feature, target in testloader:\n  feature, target = feature.to(device), target.to(device)\n  with torch.no_grad():\n    model.eval()\n    output = model(feature)\n    preds = output.argmax(1)\n    if(target == preds):\n      acc = 1\n    else: acc = 0\n    accuracy.append(acc)\naccuracy = np.array(accuracy)\naccuracy.mean()","80788322":"# **Adaptation**","70c205fc":"# **Dataset & Dataloader**","9a5b344b":"# **Predict**","57a8a9c0":"# **Fine-Tuning**","c5f50255":"# **Arsitektur & Config**","9e38d976":"# **Test Score**"}}