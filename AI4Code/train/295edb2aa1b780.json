{"cell_type":{"576d22c0":"code","326bc0bb":"code","ba8d9f7c":"code","8bc085fc":"code","2e171f78":"code","1615d93d":"code","2ac512da":"code","85c45026":"code","3f38a055":"code","79b0806e":"code","cf098449":"code","0e01ee2f":"code","02efe1af":"code","7390d230":"code","dc64302d":"code","c733260a":"markdown","32e93356":"markdown","a35d3731":"markdown","ff5ac65f":"markdown","5e73b8f3":"markdown"},"source":{"576d22c0":"# Loading standard packages\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Installing and loading Pybaseball\n\n!pip install pybaseball\n\nfrom pybaseball import batting_stats\nfrom pybaseball import pitching_stats","326bc0bb":"# Scraping 2019 data\n\nb_2019 = batting_stats(2019, 2019)\n\n# Dropping batters not eligible to be considered for a hitting title (Less than 502 PA)\n\nindexNames = b_2019[b_2019['PA'] < 502].index\nb_2019.drop(indexNames, inplace=True)\n\nb_2019.head()","ba8d9f7c":"# Top 10 Players by OBP\n\nb_2019.groupby('Name').sum()['OBP'] \\\n    .sort_values(ascending=False)[:10] \\\n    .plot(kind='bar', figsize=(15, 5), title='OBP Leaders')\nplt.show()","8bc085fc":"# Top 10 Players by OPS\n\nb_2019.groupby('Name').sum()['OPS'] \\\n    .sort_values(ascending=False)[:10] \\\n    .plot(kind='bar', figsize=(15, 5), title='OPS Leaders')\nplt.show()","2e171f78":"# Top 10 Players by wOBA\n\nb_2019.groupby('Name').sum()['wOBA'] \\\n    .sort_values(ascending=False)[:10] \\\n    .plot(kind='bar', figsize=(15, 5), title='wOBA Leaders')\nplt.show()","1615d93d":"# Top 10 Players by ISO\n\nb_2019.groupby('Name').sum()['ISO'] \\\n    .sort_values(ascending=False)[:10] \\\n    .plot(kind='bar', figsize=(15, 5), title='ISO Leaders')\nplt.show()","2ac512da":"# Top 10 Players by WAR\n\nb_2019.groupby('Name').sum()['WAR'] \\\n    .sort_values(ascending=False)[:10] \\\n    .plot(kind='bar', figsize=(15, 5), title='WAR Leaders')\nplt.show()","85c45026":"# Scraping 2019 data\n\np_2019 = pitching_stats(2019, 2019)\n\n# Dropping pitchers not eligible to be considered for ERA title (Less than 122.1 IP)\n\nindexNames = p_2019[p_2019['IP'] < 122.1].index\np_2019.drop(indexNames, inplace=True)\n\np_2019.head()","3f38a055":"# Top 10 Players by ERA\n\np_2019.groupby('Name').sum()['ERA'] \\\n    .sort_values(ascending=True)[:10] \\\n    .plot(kind='bar', figsize=(15, 5), title='ERA Leaders')\nplt.show()","79b0806e":"# Top 10 Players by WHIP\n\np_2019.groupby('Name').sum()['WHIP'] \\\n    .sort_values(ascending=True)[:10] \\\n    .plot(kind='bar', figsize=(15, 5), title='WHIP Leaders')\nplt.show()","cf098449":"# Top 10 Players by FIP\n\np_2019.groupby('Name').sum()['FIP'] \\\n    .sort_values(ascending=True)[:10] \\\n    .plot(kind='bar', figsize=(15, 5), title='FIP Leaders')\nplt.show()","0e01ee2f":"# Top 10 Players by K\/9\n\np_2019.groupby('Name').sum()['K\/9'] \\\n    .sort_values(ascending=False)[:10] \\\n    .plot(kind='bar', figsize=(15, 5), title='K\/9 Leaders')\nplt.show()","02efe1af":"# Top 10 Players by BB%\n\np_2019.groupby('Name').sum()['BB%'] \\\n    .sort_values(ascending=True)[:10] \\\n    .plot(kind='bar', figsize=(15, 5), title='BB% Leaders')\nplt.show()","7390d230":"# Top 10 Players by WAR\n\np_2019.groupby('Name').sum()['WAR'] \\\n    .sort_values(ascending=False)[:10] \\\n    .plot(kind='bar', figsize=(15, 5), title='WAR Leaders')\nplt.show()","dc64302d":"# Writing our outputs to CSVs:\n\nb_2019.to_csv('batting2019.csv',index=False)\np_2019.to_csv('pitching2019.csv',index=False)","c733260a":"# Outputs","32e93356":"# Analyzing Hitting & Pitching Data with Pybaseball\n\nThis notebook is used to explore and play around with loading Fangraphs data into a df using the Pybaseball API. We'll be using 2019 data as an example to see the kinds of stats and leaderboards we could analyze.","a35d3731":"# 2019 Pitching Statistics","ff5ac65f":"# Batting Leaderboards:","5e73b8f3":"# 2019 Batting Statistics"}}