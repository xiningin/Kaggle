{"cell_type":{"47accd83":"code","e4e250db":"code","d4b46c6e":"code","5a53fe43":"code","2bfa9763":"code","ff1d1d83":"code","072e0643":"code","c73403fc":"code","2d191603":"code","cac2b28f":"code","52fa2ff7":"code","15cd9ae8":"code","4af7424a":"code","44f64494":"code","6351d067":"code","d707dce1":"code","1a2a0f58":"code","f974e367":"code","90920a95":"code","a1a70518":"code","c8a1dab1":"code","076e7aea":"code","94725563":"code","a4d9efe6":"code","1ab511db":"code","ffbbd783":"code","5c843dfc":"code","6db2ca8a":"code","aa87e248":"code","29862d6f":"code","668bd348":"code","12e5f035":"code","8d7a2f7e":"code","54f5ab0f":"code","5c88b357":"code","4797ab86":"code","56062206":"code","97b43bbc":"code","ab46dcd8":"code","a901936e":"code","7d8e4db4":"markdown","9174b8b8":"markdown","e9614536":"markdown","c993face":"markdown","6b595fd2":"markdown","fed22265":"markdown","68325799":"markdown","dae6699f":"markdown","c11fddca":"markdown","b122675a":"markdown","1cb0fb7f":"markdown","17cf9a3f":"markdown","0800e02d":"markdown","f52b5cf4":"markdown","ab2ae7e4":"markdown","5da2c078":"markdown","39cfa61c":"markdown","47eead86":"markdown","2308a337":"markdown","bbdaf152":"markdown","ae463388":"markdown","1a053371":"markdown","9e767b82":"markdown","2b13a7b3":"markdown","2d1dd5da":"markdown","ac4b2038":"markdown","2251691b":"markdown","48f63325":"markdown","9293b630":"markdown","a4da127e":"markdown","bd454c9a":"markdown","12ed16a4":"markdown","f32b6b24":"markdown","c57be0dd":"markdown","fbbf8955":"markdown","a0ae140a":"markdown","3c05b7ad":"markdown","f993793c":"markdown"},"source":{"47accd83":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e4e250db":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt","d4b46c6e":"ipl = pd.read_csv('..\/input\/ipl-data-set\/matches.csv')","5a53fe43":"ipl.head(10)","2bfa9763":"ipl.info()","ff1d1d83":"ipl.shape","072e0643":"ipl['player_of_match'].value_counts()","c73403fc":"ipl['player_of_match'].value_counts()[0:10]","2d191603":"list(ipl['player_of_match'].value_counts()[0:5].keys())","cac2b28f":"plt.figure(figsize=(8,8))\nplt.bar(list(ipl['player_of_match'].value_counts()[0:5].keys()),list(ipl['player_of_match'].value_counts()[0:5]),color='g')\nplt.show()","52fa2ff7":"ipl['result'].value_counts()","15cd9ae8":"ipl['toss_winner'].value_counts()","4af7424a":"batting_first = ipl[ipl['win_by_runs']!=0]","44f64494":"batting_first.head()","6351d067":"plt.figure(figsize=(9,9))\nplt.hist(batting_first['win_by_runs'])\nplt.title('Distribution of Runs')\nplt.xlabel('Runs')\nplt.show()","d707dce1":"batting_first['winner'].value_counts()","1a2a0f58":"plt.figure(figsize=(9,9))\nplt.bar(list(batting_first['winner'].value_counts()[0:3].keys()),list(batting_first['winner'].value_counts()[0:3]), color=['blue', 'yellow', 'pink'])\nplt.show()","f974e367":"plt.figure(figsize=(10,10))\nplt.pie(list(batting_first['winner'].value_counts()), labels=list(batting_first['winner'].value_counts().keys()), autopct ='%0.1f%%')\nplt.show()","90920a95":"batting_second = ipl[ipl['win_by_wickets']!=0]","a1a70518":"batting_second.head()","c8a1dab1":"plt.figure(figsize=(7,7))\nplt.hist(batting_second['win_by_wickets'],bins=30)\nplt.show()","076e7aea":"batting_second['winner'].value_counts()","94725563":"plt.figure(figsize=(7,7))\nplt.bar(list(batting_second['winner'].value_counts()[0:3].keys()),list(batting_second['winner'].value_counts()[0:3]), color=['purple', 'blue', 'yellow'])\nplt.show()","a4d9efe6":"plt.figure(figsize=(10,10))\nplt.pie(list(batting_second['winner'].value_counts()), labels=list(batting_second['winner'].value_counts().keys()),autopct = '%0.1f%%')\nplt.show()","1ab511db":"plt.figure(figsize=(10,10))\nplt.hist(ipl['Season'], bins=30)\nplt.show()\n","ffbbd783":"ipl['city'].value_counts()","5c843dfc":"import numpy as np\nnp.sum(ipl['toss_winner']==ipl['winner'])\n","6db2ca8a":"p = 393\/756\nprint(\"Winning percentage of teams after winning toss in that match: \", p)","aa87e248":"deliveries = pd.read_csv('..\/input\/ipl-data-set\/deliveries.csv')","29862d6f":"deliveries.head()","668bd348":"deliveries['match_id'].unique()","12e5f035":"match_1 = deliveries[deliveries['match_id']==1]","8d7a2f7e":"match_1.head()","54f5ab0f":"match_1.shape","5c88b357":"srh = match_1[match_1['inning']==1]","4797ab86":"srh['batsman_runs'].value_counts()","56062206":"srh['dismissal_kind'].value_counts()","97b43bbc":"rcb = match_1[match_1['inning']==2]","ab46dcd8":"rcb['batsman_runs'].value_counts()","a901936e":"rcb['dismissal_kind'].value_counts()","7d8e4db4":"# Importing Libraries","9174b8b8":"# About DataSet","e9614536":"# Making Pie Chart","c993face":"# Finding out how many  times a team has won the matchafter winning the toss","6b595fd2":"# Visualization ","fed22265":"## Number of mathces played in each city","68325799":"# Making Pie Chart","dae6699f":"# Let's see 'Player_Of_Match'","c11fddca":"## Runs in an inning","b122675a":"## SRH inning","1cb0fb7f":"# Finding out the frequency of number of wins w.r.t. each time after batting second","17cf9a3f":"## Kind of Dismissal","0800e02d":"# Making a bar plot for top 3 teams with most wins after batting second","f52b5cf4":"#   IPL MATCHES","ab2ae7e4":"# Frequent Result Columns","5da2c078":"From above Histogram, we can say that most of the 'win_by_runs' matches won by  0-40 runs and less matches has been ended with margin of 100-140 runs (near 4-5 matches)","39cfa61c":"## Number of matches played each season","47eead86":"# Extracting the records where a team wo n batting first","2308a337":"# Finding out the number of toss with respect to each team","bbdaf152":"## Runs in an inning\n","ae463388":"# Histogram","1a053371":"# Top 3 teams with most wins after batting first (BarPlot)","9e767b82":"As we can see from above histogram that 'win_by_wickets' matches has been ended mostly with teams wons by 5-8 wickets","2b13a7b3":"## About first Match","2d1dd5da":"## RCB inning","ac4b2038":"# Deliveries.csv","2251691b":"# Top 10 rows of datasets","48f63325":"# Bar plot for top 5nplayers with most man of the awards","9293b630":"# Shape of Dataset","a4da127e":"# Finding out the number of wins w.r.t. each team after batting first","bd454c9a":"# Records where a teamm won after batting second","12ed16a4":"## Shape of Datasets","f32b6b24":"# DATASET-MATCHES","c57be0dd":"# Importing dataset","fbbf8955":"# Top 5 players of the match in the list","a0ae140a":"# Top 10 Player of the match","3c05b7ad":"## Winning percentage of teams after winning toss in that match\n","f993793c":"# Historgam about Win By Runs"}}