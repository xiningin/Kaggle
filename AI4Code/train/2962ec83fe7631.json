{"cell_type":{"0efb8dcf":"code","c1b82344":"code","b511ce67":"code","7c6a1301":"code","fb307691":"code","50ca8b79":"code","81529740":"code","40f8969c":"code","ff615ab3":"code","6c8555b6":"code","bc93d91b":"code","955158fd":"code","bf773f62":"code","fcbf5fe9":"code","8f2cc6c0":"code","3b087a19":"code","1e1013c6":"code","a0318b6f":"code","765ca112":"code","60be1eef":"markdown","63d57fff":"markdown","f44d0e68":"markdown","ac791fbc":"markdown","7b5203fc":"markdown","858f577f":"markdown","989bfbdf":"markdown","5ace10c6":"markdown","6ab10230":"markdown","d9548e9f":"markdown","95249831":"markdown","11e024f5":"markdown","4cee0080":"markdown","a30b6269":"markdown","d1637f02":"markdown","9695a73f":"markdown","7ec83826":"markdown","9142a6c7":"markdown","17852ac0":"markdown","8225f39f":"markdown","b7b90415":"markdown","061d94aa":"markdown","fd99c3f1":"markdown","ffa2e0b1":"markdown","24f92c9a":"markdown","e3716300":"markdown","bc6111ea":"markdown"},"source":{"0efb8dcf":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\n\nimport os\nprint(os.listdir(\"..\/input\"))","c1b82344":"data = pd.read_csv(\"..\/input\/data.csv\")","b511ce67":"data.info()","7c6a1301":"data.drop(['Unnamed: 32'], axis=1, inplace=True)","fb307691":"data.head()","50ca8b79":"data.drop(['id'], axis=1, inplace=True)","81529740":"data.diagnosis.value_counts()","40f8969c":"data.diagnosis = [1 if each == \"M\" else 0 for each in data.diagnosis]","ff615ab3":"y = data.diagnosis.values\nx = data.drop(['diagnosis'], axis=1)","6c8555b6":"x = (x - np.min(x) ) \/ ( np.max(x) - np.min(x) ).values","bc93d91b":"f, axis = plt.subplots(figsize = (18,18))\nsns.heatmap(data.corr(), annot = False, linewidths = .4, ax = axis)\nplt.show()","955158fd":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 5)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T","bf773f62":"def initialize_weights_and_bias(dimension):\n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w, b","fcbf5fe9":"def sigmoid(z):\n    output = 1\/( 1 + np.exp(-z) )\n    return output","8f2cc6c0":"def forward_backward_propagation(w,b,x_train,y_train):\n    y_ = np.dot(w.T,x_train) + b # numeric output of regression algorithm\n    y_pre = sigmoid(y_) # binary output of sigmoid function\n    loss = -y_train*np.log(y_pre)-(1-y_train)*np.log(1-y_pre) # output of loss function\n    cost = (np.sum(loss))\/x_train.shape[1] # x_train.shape[1]  is for scaling","3b087a19":"def forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    y_ = np.dot(w.T,x_train) + b # numeric output of regression algorithm\n    y_pre = sigmoid(y_) # binary output of sigmoid function\n    loss = -y_train*np.log(y_pre)-(1-y_train)*np.log(1-y_pre) # output of loss function\n    cost = (np.sum(loss))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_pre-y_train).T)))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    derivative_bias = np.sum(y_pre-y_train)\/x_train.shape[1]                 # x_train.shape[1]  is for scaling\n    gradients = {\"derivative_weight\": derivative_weight,\"derivative_bias\": derivative_bias}\n    return cost,gradients","1e1013c6":"def update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","a0318b6f":"def predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","765ca112":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    \n    dimension =  x_train.shape[0]\n    w,b = initialize_weights_and_bias(dimension)\n    \n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    y_prediction_train = predict(parameters[\"weight\"],parameters[\"bias\"],x_train)\n\n    # Print train\/test Errors\n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_train - y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 100) ","60be1eef":"<a id=\"10\"><br><\/a>\n### Predict Method\nAnd it is time to code the `predict` method to create an interface between us and our algorithm.","63d57fff":"<a id=\"0\"><\/a> \n## Introduction\n\nI will be exploring [Breast Cancer Wisconsin (Diagnostic) Dataset](https:\/\/www.kaggle.com\/uciml\/breast-cancer-wisconsin-data), and then going to explain the math behind Logistic Regression. Then I will be implementing all these techniques on real dataset step-by-step.  \nInstead of using libraries for learning, I will be coding all the functions and methods from scratch.","f44d0e68":"<a id=\"5\"><\/a> \n## Learning  \n\nWe will be using Logistic Regression for learning, but by coding everything from scratch instead of using library functions (like `sklearn`, etc).\n\nFirstly, we need the full understanding of the formula.\n\n$$\\large \u00fd = b_0 + f_0w_0 + f_1w_1 + f_2w_2 + ... + f_nw_n$$\n\nHere $\\large \u00fd$ is the predicted value, i.e. output. In our case, it corresponds to label (`diagnosis`).  \n$\\large b_0$ is the bias of the algorithm.  \n$\\large f_c$ correspons to cth feature, starting from 0. (eg: $\\large f_0$ is `radius_mean`)  \n$\\large w_c$ means the weight (coefficient) of the cth feature.  \n\n<br>\nLet's create a method to initialize the weights and bias of the algorithm:","ac791fbc":"<a id=\"99\"><\/a> \n## Thanks\nThis kernel is inspired by [DATAI](https:\/\/www.kaggle.com\/kanncaa1)'s [kernel](https:\/\/www.kaggle.com\/kanncaa1\/deep-learning-tutorial-for-beginners) and course materials. I would like thank to DATAI Team for all their effort.","7b5203fc":"<a id=\"1\"><\/a> \n## Importing Libraries and Dataset\n\nLet's start by importing necessary libraries:","858f577f":"<a id=\"3\"><\/a> \n## Data Preparation","989bfbdf":"There are some features that are strongly correlated with `diagnosis`. Some of them are:\n* `concave points_worst`\n* `area_worst`\n* `perimeter_worst`\n* `concave points_mean`  \nand etc.","5ace10c6":"<a id=\"8\"><br><\/a>\n### Optimizing Algorithm with Gradient Descent\n\nWe measured how well our algorithms can predict via cost function. Now it is time to optimize algorithm's parameters (weights and bias) so that it can learn from data and make better predictions. It will be handled by **gradient descent** method.  \n\n**What is Gradient Descent?**  \nGradient descent is a first-order iterative optimization algorithm for finding the minimum of a function. To find a local minimum of a function using gradient descent, one takes steps proportional to the negative of the gradient (or approximate gradient) of the function at the current point. [Source of definition](https:\/\/en.wikipedia.org\/wiki\/Gradient_descent)  \n\n**How do we use it?**  \nWe've been through the definition, but what is under the hood?  \nLet's think of a feature's weight ( $\\large w_c$ ), we initialized it with some arbitrary value. But we know that there is an optimal value for it, and values higher or lower than that optimal value increases our cost function, and makes our prediction worse. So we have to find its optimal value iteratively, by using gradient descent method. \n\n$$\\LARGE w := w - \\alpha \\frac{\\partial J(w)}{\\partial w} $$\n\nHere $\\large J(w)$ is the *cost*, we divide its derivative by $\\large w$'s derivative, so we get a numerical result like $\\large 0.02$. And then subtract it from the initial weight, and then update our weight with its new value. \n\nP.S: The $\\large \\alpha$ is the *learning rate*, determines how fast we learn. It shouldn't be too big (jumps over the optimal point) or too small (may never converge).\n\nLet's take a look at the schema to understand what I mean:\n\n![gradiend_descent](https:\/\/cdn-images-1.medium.com\/max\/1600\/0*rBQI7uBhBKE8KT-X.png)  \n\nAs you can see from the image above, we are updating our weight iteratively, until it converges to a local minimum. After convergence, the right part of the formula ( $\\large \\frac{\\partial J(w)}{\\partial w}$) will keep producing zero, which means weight is at the optimal point, and not about to change anymore.  \n\nIn fact, we will be using bias in the formula too, and it's gonna look like this:\n\n$$\\LARGE w := w - \\alpha \\frac{\\partial J(w,b)}{\\partial (w,b)} $$  \n\nWhat we did above is called **backward propagation**. Let's implement it with 'forward propagation' in one function:","6ab10230":"After defining the sigmoid function, all we have to do is passing our prediction ( $ \\large \u00fd$ ) to sigmoid function, and getting the output as 0 or 1. In our case, as we defined before, `0` means Benign and `1` means Malignant.  \n\nGetting the output via sigmoid function is okay, but how can we know how well we predicted it?  \nThe answer is by using **Loss Functions**.","d9548e9f":"What we did so far (from configuring the algorithm to calculating its cost function output) is called **forward propagation**.  \n\nLet's put all the pieces together and code them as a function:","95249831":"Fetch the dataset into pandas dataframe:","11e024f5":"<a id=\"11\"><br><\/a>\n### Coding Logistic Regression\nAnd finally let's put all these things together, i.e, code our custom logistic regression function!","4cee0080":"Normalizing variables is importing to avoid imbalanced weights during learning. We want all values to be scaled between 0 and 1.","a30b6269":"<a id=\"12\"><br><\/a>\n## Conclusions\n* Logistic Regression is a good way to classify binary labels, concluded from a lot of numerical features.\n* Cost gets smaller as the iteration of update (forward and backward propagation) increases.\n* We got an accuracy of `~93.86` on the `test` dataset.","d1637f02":"Target feature will be held in `y`, and the rest of attributes the will be held in `x`.","9695a73f":"<a id=\"7\"><br><\/a>\n### Loss Function\n\nAt its core, a loss function is incredibly simple: it\u2019s a method of evaluating how well your algorithm models your dataset. If your predictions are totally off, your loss function will output a higher number. If they\u2019re pretty good, it\u2019ll output a lower one. As you change pieces of your algorithm to try and improve your model, your loss function will tell you if you\u2019re getting anywhere. \n[Source of definition](https:\/\/blog.algorithmia.com\/introduction-to-loss-functions\/)  \n\nLoss function is basicly calculating the difference between predicted value and real value of target feature. But here, we will be using a kind of specialized loss function, which is **log loss (cross entry loss)**.  \nLet's examine the formula of log loss function:  \n\n$$\\LARGE -( y log(\u00fd) + (1-y)log(1-\u00fd) ) $$\n\nAs you can observe from the formula above, if we predict the value as 0, and the real value of label is 0 too (which means we guessed right), then the output of loss function is 0. It is valid for vice versa (both predicted and real values are 1).  \nOtherwise if we cannot guess it right, then the output of the function would be so high.  \n\nAs a conclusion, *lower the output of loss function, better we predicted the label*.\n\nWe measured the error size of one algorithm via loss function.  We have to add all loss function outputs to get the **cost function**.","7ec83826":"`diagnosis` is the label (target) of the dataset.  \n* `B` indicates Benign  \n* `M` indicates Malignant\n\nWhen it comes to label, we do not prefer working with object-type variables. So let's change them:\n* `1` \u2192 `M`\n* `0` \u2192 `B`","9142a6c7":"As we can observe from the table above, `id` is a unique value per individual patient.  \nIt has nothing to do with diagnosis, so we have to eliminate it.","17852ac0":"<a id=\"6\"><\/a> <br>\n### Sigmoid Function\n\nA sigmoid function is a mathematical function having a characteristic \"S\"-shaped curve or sigmoid curve. [Source of definition](https:\/\/en.wikipedia.org\/wiki\/Sigmoid_function)  \nThe formula of the sigmoid function is:\n\n$$\\LARGE f(x)=\\frac{1}{1+e^{-x}}$$\n\nThe figure below is how it looks like:\n\n![sigmoid-function](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/8\/88\/Logistic-curve.svg\/320px-Logistic-curve.svg.png)\n\nWe will be using sigmoid function as threshold to determine whether output corresponds to 0 or 1. If value is below the threshold (< 0.5) it is going to be considered as 0, otherwise 1.\n\nAfter checking the output, we rearrange the bias and weights and go back to first step (and keep doing it until their optimized values).  \n\nLet's code our sigmoid function:","8225f39f":"Now let's take a glimpse of data with the first five entries, by using `head` method.","b7b90415":"# Breast Cancer Diagnosis with Logistic Regression\n<br>\n![breast-cancer-word-cloud](https:\/\/www.rush.edu\/sites\/default\/files\/breast-cancer-word-cloud-og.jpg)\n\n## Contents\n* [Introduction](#0)\n* [Thanks](#99)\n* [Importing Libraries and Dataset](#1)\n* [Data Exploration and Cleaning](#2)\n* [Data Preparing](#3)\n* [Correlation](#31)\n* [Split Test and Train Variables](#4)\n* [Learning](#5)\n    * [Sigmoid Function](#6)\n    * [Loss Function](#7)\n    * [Optimizing Algorithm with Gradient Descent](#8)\n    * [Update Function](#9)\n    * [Predict Method](#10)\n    * [Coding Logistic Regression](#11)\n* [Conclusions](#12)","061d94aa":"We may call one forward and one backward propagation as one iteration. It can take our algorithm to somewhere, but obviously it wouldn't be enough. So we have to pick an arbitrary number for iteration ($\\large n$), and update our algorithm $\\large n$ times for learning.  \n\n<a id=\"9\"><br><\/a>\n### Update Function\nLet's create a function `update` and use this function to call the methods above to train our algorithm, and give some feedback about costs by printing cost values and visualizing them.","fd99c3f1":"<a id=\"2\"><\/a> \n## Data Exploration and Cleaning\n\nTo have a basic understanding of the data, we have to use pandas' `info` method.","ffa2e0b1":"<a id=\"31\"><\/a> \n## Correlation\nLet's check the correlation among features before jumping into *splitting train\/test variables* part:","24f92c9a":"<a id=\"4\"><\/a> \n## Split Test and Train Variables\n\nWe have to split our data to create train and test variables. To do so, we will be using `sklearn`'s `train_test_split method`.  \n\nWe set the`test_size` parameter to `0.2`, so the train values will be randomly 80% of the data.  Let's briefly describe what all four values correspond to:\n* `x_train` : randomly 80% of data with features of `x` (`radius_mean`, `texture_mean`, etc.)\n* `x_test` : randomly 20% (the rest) of data with features of `x`\n* `y_train` : randomly 80% of data with feature of `y` (`diagnosis`, the target feature)\n* `y_test` : randomly 20% (the rest) of data with feature of `y`  \n\nLet's visualize what I mean:\n\n![train_test_split_image](http:\/\/i68.tinypic.com\/2rf9dev.jpg)","e3716300":"We need the optimized values of bias and weights so that the algorithm will produce the outputs that are closest to real values.\n\nLet's visualize what we want to do.\n\n![learning-image](http:\/\/i67.tinypic.com\/6i49vk.png)\n\nAfter the summation part, we get the output ( $\\large \u00fd$ ) of our algorithm. We need a **threshold** to check whether the numeric output corresponds to `Malignant` or `Benign`. The **sigmoid function** comes handy here to do so.","bc6111ea":"* There are 569 rows and 33 columns in the dataset.\n* `id` is an attribute with integer values, `diagnosis` is an object (string) type variable and the rest of the features are float numbers.\n* Luckily, there is no `NaN` values, excepting `Unnamed: 32` feature. All of the entries have `NaN` values for this column. So it has to be removed from the dataframe.  "}}