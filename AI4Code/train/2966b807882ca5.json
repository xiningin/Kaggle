{"cell_type":{"8f0ebe80":"code","a19faed2":"code","2ccad658":"code","c2abcd82":"code","195e23de":"code","282d7589":"code","92732633":"code","7b1bd2cd":"code","8ea9650f":"markdown"},"source":{"8f0ebe80":"import numpy as np\nimport pandas as pd\nimport catboost as ctb\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import roc_auc_score","a19faed2":"train = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv')\nsub = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/sample_submission.csv')","2ccad658":"cat_features = [col for col in train.columns if 'cat' in col]\ncont_features = [col for col in train.columns if 'cont' in col]\nall_features = cat_features + cont_features","c2abcd82":"all_df = pd.concat([train , test]).reset_index(drop = True)\n\nle = LabelEncoder()\nfor col in cat_features:\n    all_df[col] = le.fit_transform(all_df[col])\n    \ntrain = all_df[:train.shape[0]]\ntest = all_df[train.shape[0]:].reset_index(drop =True)","195e23de":"N_FOLDS = 10\nSEED = 2021\nEARLY_STOPPING_ROUNDS = 100\nVERBOSE = 1000\n\nparams = {\n    'bootstrap_type' : 'Poisson',\n    'loss_function' : 'Logloss',\n    'eval_metric' : 'AUC',\n    'random_seed' : SEED,\n    'task_type' : 'GPU',\n    'max_depth' : 8,\n    'learning_rate' : 0.01,\n    'n_estimators' : 20000,\n    'max_bin' : 280,\n    'min_data_in_leaf' : 64,\n    'l2_leaf_reg' : 0.01,\n    'subsample' : 0.2\n    \n}","282d7589":"oof = np.zeros(train.shape[0])\npred = 0\nskf = StratifiedKFold(n_splits = N_FOLDS , shuffle = True , random_state = SEED)\n\ndata = train[all_features]\ntarget = train['target']\n\nfor fold , (trn_idx , val_idx) in enumerate(skf.split(data , target)):\n    print(f'========FOLD{fold}========')\n    \n    train_x = data.iloc[trn_idx]\n    train_y = target.iloc[trn_idx]\n    val_x = data.iloc[val_idx]\n    val_y = target.iloc[val_idx]\n    \n    model = ctb.CatBoostClassifier(**params)\n    model.fit(train_x , train_y,\n             eval_set = [(val_x,val_y)],\n             use_best_model = True,\n             early_stopping_rounds = EARLY_STOPPING_ROUNDS,\n             verbose = VERBOSE\n             )\n    oof[val_idx] = model.predict_proba(val_x)[: , 1]\n    pred += model.predict_proba(test[all_features])[: , 1]\/N_FOLDS\n    score = roc_auc_score(val_y , oof[val_idx] , average = 'micro')\n    print(f'FOLD {fold} AUC {score}\\n')\n    \nscore = roc_auc_score(target , oof , average = 'micro')\nprint(f'AUC {score}\\n')","92732633":"sub['target'] = pred\nsub.to_csv('ctbsubmission.csv' , index = False)\nsub","7b1bd2cd":"oof_pred = pd.DataFrame({'id' : train['id'] , 'target' : oof})\noof_pred.to_csv('ctboof_predict.csv' , index = False)\noof_pred","8ea9650f":"# Label Encoder"}}