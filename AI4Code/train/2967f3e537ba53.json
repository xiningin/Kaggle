{"cell_type":{"3036386f":"code","dd1c383e":"code","f2061dd3":"code","3e6e86a2":"code","a4fa6b14":"code","21d7160d":"code","588e652a":"code","ab6cdd79":"code","21ff0de6":"code","4e10a375":"code","587769ec":"code","a518e5ac":"code","37ebd2d7":"code","845d21bc":"code","eaa295e8":"code","65c66a7f":"code","fc23261e":"code","8114bc32":"code","31870944":"code","f5539855":"code","a23d79b8":"code","3ed79ad2":"code","ba899727":"code","f199f5b2":"code","8b4ee6cd":"code","d962ca60":"code","d3f14e57":"code","79b2aaa8":"code","221c2cc6":"code","9b0683dc":"code","ad32b9aa":"code","039f017c":"code","90c5242f":"code","289f2f42":"code","8e84d765":"code","c3256bec":"code","7d14529a":"code","a6b43e53":"code","a0d45aba":"code","d93abeaf":"code","5ac6995d":"code","bd6b33c4":"code","eda7a52f":"markdown","607e12e4":"markdown","52a14200":"markdown","1b9e1b64":"markdown","cc94eace":"markdown","ab28d030":"markdown","475a1996":"markdown"},"source":{"3036386f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","dd1c383e":"data =pd.read_csv(\"..\/input\/train.csv\")","f2061dd3":"data.head()","3e6e86a2":"data.info()","a4fa6b14":"data.apply(lambda x: sum(x.isnull()),axis=0) # checking missing values in each column of train dataset","21d7160d":"data['Gender'].value_counts()","588e652a":"data.Gender = data.Gender.fillna('Male')","ab6cdd79":"data['Married'].value_counts()","21ff0de6":"data.Married = data.Married.fillna('Yes')","4e10a375":"data['Dependents'].value_counts()","587769ec":"data.Dependents = data.Dependents.fillna('0')","a518e5ac":"data['Self_Employed'].value_counts()","37ebd2d7":"data.Self_Employed = data.Self_Employed.fillna('No')","845d21bc":"data.LoanAmount = data.LoanAmount.fillna(data.LoanAmount.mean())","eaa295e8":"data['Loan_Amount_Term'].value_counts()","65c66a7f":"data.Loan_Amount_Term = data.Loan_Amount_Term.fillna(360.0)","fc23261e":"data['Credit_History'].value_counts()","8114bc32":"data.Credit_History = data.Credit_History.fillna(1.0)","31870944":"data.apply(lambda x: sum(x.isnull()),axis=0)","f5539855":"data.head()","a23d79b8":"# Splitting traing data\nX = data.iloc[:, 1: 12].values\ny = data.iloc[:, 12].values","3ed79ad2":"X","ba899727":"y","f199f5b2":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1\/3, random_state = 0)","8b4ee6cd":"X_train","d962ca60":"# Encoding categorical data\n# Encoding the Independent Variable\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder_X = LabelEncoder()","d3f14e57":"for i in range(0, 5):\n    X_train[:,i] = labelencoder_X.fit_transform(X_train[:,i])\n\nX_train[:,10] = labelencoder_X.fit_transform(X_train[:,10])","79b2aaa8":"# Encoding the Dependent Variable\nlabelencoder_y = LabelEncoder()\ny_train = labelencoder_y.fit_transform(y_train)","221c2cc6":"X_train","9b0683dc":"y_train","ad32b9aa":"# Encoding categorical data\n# Encoding the Independent Variable\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nlabelencoder_X = LabelEncoder()\nfor i in range(0, 5):\n    X_test[:,i] = labelencoder_X.fit_transform(X_test[:,i])\nX_test[:,10] = labelencoder_X.fit_transform(X_test[:,10])\n# Encoding the Dependent Variable\nlabelencoder_y = LabelEncoder()\ny_test = labelencoder_y.fit_transform(y_test)","039f017c":"X_test","90c5242f":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","289f2f42":"# Applying PCA\nfrom sklearn.decomposition import PCA\npca = PCA(n_components = 2)\nX_train = pca.fit_transform(X_train)\nX_test = pca.fit_transform(X_test)\nexplained_variance = pca.explained_variance_ratio_","8e84d765":"# Fitting Logistic Regression to the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n","c3256bec":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)","7d14529a":"y_pred","a6b43e53":"# Measuring Accuracy\nfrom sklearn import metrics\nprint('The accuracy of Logistic Regression is: ', metrics.accuracy_score(y_pred, y_test))","a0d45aba":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","d93abeaf":"cm","5ac6995d":"# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('pink', 'lightgreen')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n                c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Logistic Regression (Training set)')\nplt.xlabel('PC1')\nplt.ylabel('PC2')\nplt.legend()\nplt.show()\n\n","bd6b33c4":"# Visualising the Test set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_test, y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('pink', 'lightgreen')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n                c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Logistic Regression (Test set)')\nplt.xlabel('PC1')\nplt.ylabel('PC2')\nplt.legend()\nplt.show()","eda7a52f":"### Applying PCA","607e12e4":"** Data Cleaning and filling missing values **","52a14200":"The accuracy of Logistic Regression is:  70.73 %\n","1b9e1b64":"# Results:","cc94eace":"# Classification Algorithms","ab28d030":"## Logistic Regression","475a1996":"# Loan Prediction"}}