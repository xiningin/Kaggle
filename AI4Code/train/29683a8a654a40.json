{"cell_type":{"cd25fdf2":"code","7bd1fb7d":"code","8a1b95c7":"code","cc3dfd91":"code","3568e8db":"code","b1405ff8":"code","23b4d6fc":"code","6fbe051c":"code","de059939":"code","76bb5473":"code","e99c9b4d":"code","2eda0a15":"code","0b791b11":"code","e39c334c":"code","e52ac8ff":"code","d671224f":"code","c1917cc0":"code","e1f4f464":"code","481287e3":"code","73005f2b":"code","8f3b324f":"code","3ebda284":"code","339296a9":"code","4e38c3c7":"code","e9762f19":"code","feb34f98":"code","3b1d4435":"code","bf3ca3a7":"markdown","13959924":"markdown","a2117060":"markdown","da04a884":"markdown","abe71ba6":"markdown","bc965a25":"markdown"},"source":{"cd25fdf2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objs as go\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7bd1fb7d":"!pip install openpyxl","8a1b95c7":"df = pd.read_excel('\/kaggle\/input\/sanskrit-sandhi-corpus\/train.xlsx')\ndf.head()","cc3dfd91":"import re # regular expression libary.\nimport nltk # Natural Language toolkit\nnltk.download(\"stopwords\")  #downloading stopwords\nnltk.download('punkt')\nfrom nltk import word_tokenize,sent_tokenize\nnltk.download('wordnet')\nimport nltk as nlp","3568e8db":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Split)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"salmon\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","b1405ff8":"san_list=[]\n\nfor san in df.Type:\n    san=re.sub(\"[^a-zA-z]\",\" \",san) # if expression in the sentence is not a word then this code change them to space\n    sam=san.lower() # turns all word in the sentence into lowercase.\n    san=nltk.word_tokenize(san) # splits the words that are in the sentence from each other.\n    lemma=nlp.WordNetLemmatizer()\n    san=[lemma.lemmatize(word) for word in san] # this code finds the root of the word for a word in the sentence and change them to their root form.\n    san=\" \".join(san)\n    san_list.append(san) # store sentences in list","23b4d6fc":"from sklearn.feature_extraction.text import CountVectorizer #Bag of Words\n\nmax_features=500 # \"number\" most common(used) words in ham\n\ncount_vectorizer=CountVectorizer(max_features=max_features,stop_words=\"english\") # stop words will be dropped by stopwords command\n\nsparce_matrix=count_vectorizer.fit_transform(san_list).toarray()# this code will create matrix that consist of 0 and 1.","6fbe051c":"sparce_matrix.shape","de059939":"sparce_matrix","76bb5473":"print(\"Top {} the most used word in Sandhi Corpus: {}\".format(max_features,count_vectorizer.get_feature_names()))","e99c9b4d":"data=pd.DataFrame(count_vectorizer.get_feature_names(),columns=[\"Words\"])","2eda0a15":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Type)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Blues', background_color=\"salmon\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","0b791b11":"data.head()","e39c334c":"df.Split.value_counts()","e52ac8ff":"df.Word.value_counts()","d671224f":"df.Type.value_counts()","c1917cc0":"X=sparce_matrix\ny=df.Type","e1f4f464":"from sklearn.model_selection import train_test_split,GridSearchCV,cross_val_score\nfrom sklearn.metrics import confusion_matrix,accuracy_score,classification_report,log_loss,precision_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.metrics import roc_auc_score,roc_curve\n\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)\nprint(\"x_train\",X_train.shape)\nprint(\"x_test\",X_test.shape)\nprint(\"y_train\",y_train.shape)\nprint(\"y_test\",y_test.shape)","481287e3":"from sklearn.svm import SVC\n\nlgbm_model=LGBMClassifier()\n\nlgbm_model.fit(X_train,y_train)","73005f2b":"y_pred=lgbm_model.predict(X_test)","8f3b324f":"print(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))","3ebda284":"xgb=XGBClassifier()\nxgb_model=xgb.fit(X_train,y_train)","339296a9":"y_pred=xgb_model.predict(X_test)\n\n\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))","4e38c3c7":"from sklearn.naive_bayes import BernoulliNB\n\nnb=GaussianNB()\nnb2=BernoulliNB()\n\nnb_model=nb.fit(X_train,y_train)\nnb2_model=nb2.fit(X_train,y_train)\ny_pred=nb_model.predict(X_test)\ny_pred2=nb2_model.predict(X_test)\n\n\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))\nprint(\"**************************************************************\")\nprint(\"Accuracy_NB2:\",accuracy_score(y_test, y_pred2))\nprint(\"Precision_NB2:\",precision_score(y_test, y_pred2,average=\"micro\"))","e9762f19":"from sklearn.ensemble import RandomForestClassifier\n\n\nrf_model=RandomForestClassifier(random_state=42)\nrf_model.fit(X_train,y_train)","feb34f98":"y_pred=rf_model.predict(X_test)\n\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))","3b1d4435":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#2B3A67','#42a7f5','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. @mpwolke is trying to perform in Sanskrit' )","bf3ca3a7":"#RandomForest Classifier","13959924":"#Codes by Erdal Nayir https:\/\/www.kaggle.com\/erdal002\/natural-language-processing\/comments","a2117060":"#Sanskrit\n\nSanskrit is a classical language of South Asia belonging to the Indo-Aryan branch of the Indo-European languages. It arose in South Asia after its predecessor languages had diffused there from the northwest in the late Bronze Age. Sanskrit is the sacred language of Hinduism, the language of classical Hindu philosophy, and of historical texts of Buddhism and Jainism.\n\nIt was a link language in ancient and medieval South Asia, and upon transmission of Hindu and Buddhist culture to Southeast Asia, East Asia and Central Asia in the early medieval era, it became a language of religion and high culture, and of the political elites in some of these regions. As a result, Sanskrit had a lasting impact on the languages of South Asia, Southeast Asia and East Asia, especially in their formal and learned vocabularie.\n\nhttps:\/\/en.wikipedia.org\/wiki\/Sanskrit","da04a884":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcT6YdAyEoYBdv_Bbp8zQZeRx_ACRkhcfZWdlw&usqp=CAU)myvoice.opindia.com","abe71ba6":"#XGBM Classifier","bc965a25":"#Naive Bayes"}}