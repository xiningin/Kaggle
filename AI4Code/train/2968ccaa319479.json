{"cell_type":{"edc29930":"code","4390479a":"code","f8bfaa9c":"code","39c8e5c2":"code","0e8f51d3":"code","2ba9f1d3":"code","104def34":"code","ac5aa1fd":"code","70b88782":"code","e2be48cd":"code","0516242e":"code","6040500c":"code","51ad932e":"code","6f43efde":"code","223ff304":"code","e74c3951":"code","4191d807":"code","0abe490c":"code","7ec0e1a0":"code","149d54a7":"code","f57dac27":"code","1399cf08":"code","80d5f7c8":"code","6124ca9b":"code","41e31b4b":"code","0be032d1":"code","f234de56":"code","10e1b4dc":"code","ce38d03e":"code","c5fd3517":"code","c7ffa86d":"code","43cdee31":"code","c8a663d1":"code","203e7da4":"code","fe361680":"code","c99b25a7":"markdown","6e2e6759":"markdown","e01177b8":"markdown","a53ce615":"markdown","64236f1d":"markdown","8acaf5f2":"markdown","04aab2c7":"markdown","2b86817f":"markdown","c033bf3b":"markdown","16554ad8":"markdown","363a374b":"markdown","0b027310":"markdown","2597d1ba":"markdown","672c2788":"markdown","25b44e25":"markdown","e6d57de2":"markdown","b7df0e46":"markdown","3ee95576":"markdown","eaa6dcd5":"markdown","077b6fe9":"markdown","894c042c":"markdown","f2adb9a3":"markdown","b6d97b06":"markdown","1b45d17c":"markdown","57895a77":"markdown","bd8931be":"markdown","459a3b99":"markdown","65f546c6":"markdown","6bcd5852":"markdown","1725212c":"markdown","3fca2857":"markdown","9a6fa74c":"markdown","f6095c09":"markdown","454c730f":"markdown","ddd86111":"markdown","385a0033":"markdown","399f81f5":"markdown","9597b8b4":"markdown","2aece57a":"markdown","393e7991":"markdown","6c5fd1ab":"markdown","3ae4e9ee":"markdown","5c9ffaf0":"markdown"},"source":{"edc29930":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nimport xgboost as xgb\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier  \nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import confusion_matrix\n","4390479a":"heart=pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\nheart.head()","f8bfaa9c":"print('Number of rows are',heart.shape[0], 'and number of columns are ',heart.shape[1])","39c8e5c2":"heart.isnull().sum()","0e8f51d3":"heart.info()","2ba9f1d3":"heart[heart.duplicated()]\n","104def34":"heart.drop_duplicates(inplace=True)\n","ac5aa1fd":"print('Number of rows are',heart.shape[0], 'and number of columns are ',heart.shape[1])","70b88782":"heart.describe()","e2be48cd":"heart.corr()","0516242e":"x=(heart.sex.value_counts())\nprint(f'Number of people having sex as 1 are {x[1]} and Number of people having sex as 0 are {x[0]}')\np = sns.countplot(data=heart, x=\"sex\")\nplt.show()","6040500c":"x=(heart.cp.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"cp\")\nplt.show()","51ad932e":"x=(heart.fbs.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"fbs\")\nplt.show()","6f43efde":"x=(heart.restecg.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"restecg\")\nplt.show()","223ff304":"x=(heart.exng.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"exng\")\nplt.show()","e74c3951":"x=(heart.thall.value_counts())\nprint(x)\np = sns.countplot(data=heart, x=\"thall\")\nplt.show()","4191d807":"plt.figure(figsize=(10,10))\nsns.distplot(heart.age, color=\"red\", label=\"Age\", kde= True)\nplt.legend()","0abe490c":"plt.figure(figsize=(20,20))\nsns.distplot(heart.trtbps , color=\"green\", label=\"Resting Blood Pressure\", kde= True)\nplt.legend()","7ec0e1a0":"plt.figure(figsize=(10,10))\nsns.distplot(heart[heart['output'] == 0][\"age\"], color='green',kde=True,) \nsns.distplot(heart[heart['output'] == 1][\"age\"], color='red',kde=True)\nplt.title('Attack versus Age')\nplt.show()","149d54a7":"plt.figure(figsize=(10,10))\nsns.distplot(heart[heart['output'] == 0][\"chol\"], color='green',kde=True) \nsns.distplot(heart[heart['output'] == 1][\"chol\"], color='red',kde=True)\nplt.title('Cholestrol versus Age')\nplt.show()","f57dac27":"plt.figure(figsize=(10,10))\nsns.distplot(heart[heart['output'] == 0][\"thalachh\"], color='green',kde=True) \nsns.distplot(heart[heart['output'] == 1][\"thalachh\"], color='red',kde=True)\nplt.title('Thalachh versus Age')\nplt.show()","1399cf08":"plt.figure(figsize=(13,13))\nplt.subplot(2,3,1)\nsns.violinplot(x = 'sex', y = 'output', data = heart)\nplt.subplot(2,3,2)\nsns.violinplot(x = 'thall', y = 'output', data = heart)\nplt.subplot(2,3,3)\nsns.violinplot(x = 'exng', y = 'output', data = heart)\nplt.subplot(2,3,4)\nsns.violinplot(x = 'restecg', y = 'output', data = heart)\nplt.subplot(2,3,5)\nsns.violinplot(x = 'cp', y = 'output', data = heart)\nplt.xticks(fontsize=9, rotation=45)\nplt.subplot(2,3,6)\nsns.violinplot(x = 'fbs', y = 'output', data = heart)\n\nplt.show()","80d5f7c8":"x = heart.iloc[:, 1:-1].values\ny = heart.iloc[:, -1].values\nx,y","6124ca9b":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size= 0.2, random_state= 0)","41e31b4b":"print('Shape for training data', x_train.shape, y_train.shape)\nprint('Shape for testing data', x_test.shape, y_test.shape)","0be032d1":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","f234de56":"x_train,x_test","10e1b4dc":"model = LogisticRegression()\nmodel.fit(x_train, y_train)\npredicted=model.predict(x_test)\nconf = confusion_matrix(y_test, predicted)\nprint (\"Confusion Matrix : \\n\", conf)\nprint (\"The accuracy of Logistic Regression is : \", accuracy_score(y_test, predicted)*100, \"%\")\n\n","ce38d03e":"model = GaussianNB()\nmodel.fit(x_train, y_train)\n  \npredicted = model.predict(x_test)\n  \nprint(\"The accuracy of Gaussian Naive Bayes model is : \", accuracy_score(y_test, predicted)*100, \"%\")","c5fd3517":"model = SVC()\nmodel.fit(x_train, y_train)\n  \npredicted = model.predict(x_test)\nprint(\"The accuracy of SVM is : \", accuracy_score(y_test, predicted)*100, \"%\")","c7ffa86d":"model = RandomForestRegressor(n_estimators = 100, random_state = 0)  \nmodel.fit(x_train, y_train)  \npredicted = model.predict(x_test)\nprint(\"The accuracy of Random Forest is : \", accuracy_score(y_test, predicted.round())*100, \"%\")","43cdee31":"model = KNeighborsClassifier(n_neighbors = 1)  \nmodel.fit(x_train, y_train)\npredicted = model.predict(x_test)\n  \n\nprint(confusion_matrix(y_test, predicted))\nprint(\"The accuracy of KNN is : \", accuracy_score(y_test, predicted.round())*100, \"%\")\n","c8a663d1":"error_rate = []\n  \nfor i in range(1, 40):\n      \n    model = KNeighborsClassifier(n_neighbors = i)\n    model.fit(x_train, y_train)\n    pred_i = model.predict(x_test)\n    error_rate.append(np.mean(pred_i != y_test))\n  \nplt.figure(figsize =(10, 6))\nplt.plot(range(1, 40), error_rate, color ='blue',\n                linestyle ='dashed', marker ='o',\n         markerfacecolor ='red', markersize = 10)\n  \nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","203e7da4":"model = KNeighborsClassifier(n_neighbors = 7)\n  \nmodel.fit(x_train, y_train)\npredicted = model.predict(x_test)\n  \n\nfrom sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test, predicted))\n\nprint(\"The accuracy of KNN is : \", accuracy_score(y_test, predicted.round())*100, \"%\")","fe361680":"model = xgb.XGBClassifier(use_label_encoder=False)\nmodel.fit(x_train, y_train)\n   \npredicted = model.predict(x_test)\n   \ncm = confusion_matrix(y_test, predicted)\nprint()\nprint (\"The accuracy of X Gradient Boosting is : \", accuracy_score(y_test, predicted)*100, \"%\")","c99b25a7":"***Density distribution for Age***","6e2e6759":"***Heart Attack Vs Age***","e01177b8":"**Feature Scaling****","a53ce615":"***K Nearest Neighbours***","64236f1d":"> FBS with value 0 is significantly higher than value 1.","8acaf5f2":"***Checking For datatypes of the attributes***","04aab2c7":"***Violin Plot***","2b86817f":"***EXNG count is more than double for type 0***","c033bf3b":"***Support Vector Machine***","16554ad8":"***Thall count is max for type 2 and min for type 0.***","363a374b":"**People having gender as 1 are more than twice the people having gender as 0**","0b027310":"**Density distribution is highest for age group 55 to 60**\n","2597d1ba":"# **<p style=\"color:Blue;\">About The Dataset :<\/p>**\n    \nage: Age of the patient\n\nsex: Sex of the patient\n\ncp: Chest pain type, 0 = Typical Angina, 1 = Atypical Angina, 2 = Non-anginal Pain, 3 = Asymptomatic\n\ntrtbps: Resting blood pressure (in mm Hg)\n\nchol: Cholestoral in mg\/dl fetched via BMI sensor\n\nfbs: (fasting blood sugar > 120 mg\/dl), 1 = True, 0 = False\n\nrestecg: Resting electrocardiographic results, 0 = Normal, 1 = ST-T wave normality, 2 = Left ventricular hypertrophy\n\nthalachh: Maximum heart rate achieved\n\noldpeak: Previous peak\n\nslp: Slope\n\ncaa: Number of major vessels\n\nthall: Thalium Stress Test result ~ (0,3)\n\nexng: Exercise induced angina ~ 1 = Yes, 0 = No\n\noutput: Target variable\n\n","672c2788":"**Logistic Regression**","25b44e25":"****There's no need for categorical encoding ********","e6d57de2":"***Checking for null values***","b7df0e46":"***Breakdown of FBS***","3ee95576":"**No null values found**","eaa6dcd5":"**Splitting the dataset into training and testing data**","077b6fe9":"**Gaussian Naive Bayes**","894c042c":"***Breakdown for Exercise Induced Angina***","f2adb9a3":"***Trtbs has the highest count around 130***","b6d97b06":"**All attributes are of type 'int' except 'oldpeak'**","1b45d17c":"ECG count is almost the same for type 0 and 1. Also, for type 2 its almost negligible in comparision to type 0 and 1.","57895a77":"With k=7 as it hovers after that","bd8931be":"***X Gradient Boosting***","459a3b99":"**Checking new shape **","65f546c6":"# **Data preprocessing**","6bcd5852":"***Breakdown for chest pain***","1725212c":"***Checking statistical data***","3fca2857":"***Checking the shape of DataFrame***","9a6fa74c":"# ***Data Visualization***","f6095c09":"1. Most of the models are performing really well.\n2. SVM is performing the best for the given dataset.","454c730f":"***Breakdown of ECG***","ddd86111":"# Conclusion\n","385a0033":"***Checking for duplicate rows***","399f81f5":"***Random Forest***","9597b8b4":"***Optimizing the KNN***","2aece57a":"1. It can be observed people have chest pain of type 0 i.e 'Typical Angina' is the highest.\n2. It can be observed people have chest pain of type 3 i.e 'Asymptomatic' is the lowest\n3. It can also be observed people with chest pain of type 0 is almost 50% of all the people.","393e7991":"***Breakdown of gender***","6c5fd1ab":"***Reading The Dataset***","3ae4e9ee":"***Breakdown for Thalium Stress Test***","5c9ffaf0":"***Computing the correlation matrix***"}}