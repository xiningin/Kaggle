{"cell_type":{"7e5a9955":"code","27474739":"code","318aa66f":"code","ee20ce33":"code","80849b0b":"code","18948e4c":"code","a60c2418":"code","38f0d762":"code","3f96b5bc":"code","a9e6e9b3":"code","560d2844":"code","0f8e7e84":"code","27b0e471":"code","3a2ee8df":"code","ed88599a":"code","4beb96f7":"code","5687201c":"code","99adb11b":"code","a57d10d5":"code","b1a77e00":"code","022b946f":"code","6059d08a":"code","c2f8d6e9":"code","7130e73f":"code","3fca78e7":"code","14f5ad1a":"code","8624af43":"code","960fc9a0":"markdown","7d74103d":"markdown","fca015e3":"markdown","59926b58":"markdown","39236fdd":"markdown"},"source":{"7e5a9955":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","27474739":"data0 = pd.read_csv(\"..\/input\/heart-failure-prediction\/heart.csv\")\ndata0","318aa66f":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('NAN')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","ee20ce33":"data1=df\ndata1","80849b0b":"print(data1.columns.tolist())","18948e4c":"target=['HeartDisease']\ndataY=data1[target[0]]\ndataX=data1.drop(target,axis=1)","a60c2418":"print(dataY[0:5].T)\nprint()\nprint(dataX[0:5].T)","38f0d762":"N=list(range(len(dataX)))\nrandom.seed(2021)\nrandom.shuffle(N)\nn=len(dataX)","3f96b5bc":"trainX=dataX.loc[N[0:(n\/\/4)*3]]\ntrainY=dataY.loc[N[0:(n\/\/4)*3]]\ntestX=dataX.loc[N[(n\/\/4)*3:]]\ntestY=dataY.loc[N[(n\/\/4)*3:]]","a9e6e9b3":"print(len(dataX))\nprint(len(trainX))\nprint(len(testX))","560d2844":"df_columns = list(dataX.columns)\nprint(df_columns)","0f8e7e84":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","27b0e471":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","3a2ee8df":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","ed88599a":"train_feat_df = to_feature(trainX)\ntest_feat_df = to_feature(testX)","4beb96f7":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","5687201c":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","99adb11b":"y = trainY\nprint(y.shape)\nprint(type(y))","a57d10d5":"ydf=pd.DataFrame(y)\nydf","b1a77e00":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_ylabel('Predicted Train '+target[i],fontsize=12)\n    ax.set_xlabel('Actual Train '+target[i],fontsize=12)\n    ax.scatter(y,oof)\n","022b946f":"print(target)","6059d08a":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","c2f8d6e9":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)","7130e73f":"pred0 = np.array([model.predict(test_feat_df.values) for model in models])\nPRED = pred0[4]\nPRED[0:5]","3fca78e7":"ANS=np.array(testY)\nANS[0:5]","14f5ad1a":"fig, ax = plt.subplots(figsize=(8,8))\nsns.histplot(PRED, label='Predicted Test '+target[0], ax=ax, color='black',bins=30)\nsns.histplot(oof, label='Predict Train '+target[0], ax=ax, color='C1',bins=30)\nax.legend()\nax.grid()","8624af43":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(target[0],fontsize=20)\nax.set_xlabel('Actual Test '+target[0],fontsize=12)\nax.set_ylabel('Predicted Test '+target[0],fontsize=12)\nax.scatter(ANS,PRED)","960fc9a0":"# Model","7d74103d":"# Visualize Importance","fca015e3":"### Attribute Information\n* Age: age of the patient [years]\n* Sex: sex of the patient [M: Male, F: Female]\n* ChestPainType: chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic]\n* RestingBP: resting blood pressure [mm Hg]\n* Cholesterol: serum cholesterol [mm\/dl]\n* FastingBS: fasting blood sugar [1: if FastingBS > 120 mg\/dl, 0: otherwise]\n* RestingECG: resting electrocardiogram results [Normal: Normal, ST: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]\n* MaxHR: maximum heart rate achieved [Numeric value between 60 and 202]\n* ExerciseAngina: exercise-induced angina [Y: Yes, N: No]\n* Oldpeak: oldpeak = ST [Numeric value measured in depression]\n* ST_Slope: the slope of the peak exercise ST segment [Up: upsloping, Flat: flat, Down: downsloping]\n* HeartDisease: output class [1: heart disease, 0: Normal]","59926b58":"# Target setting","39236fdd":"# Data preparation"}}