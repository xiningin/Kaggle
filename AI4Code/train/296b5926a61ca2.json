{"cell_type":{"ff08f93d":"code","1e1be840":"code","9d564811":"code","51066a66":"code","d552fb0f":"code","3c2506ee":"code","bf44433e":"code","1c1024d7":"code","d5a4e316":"code","ec4a4da0":"code","608ef5bc":"code","8c98057b":"code","f12478fe":"code","d323e1f1":"code","fe1bb14b":"code","b6aa8ed4":"code","d20440c5":"code","7d5920ba":"code","675f4243":"code","b94387ec":"code","02c4ea8b":"code","01c95761":"code","6ca82488":"code","9bdbfdf6":"code","952404c1":"code","5428409d":"code","5cb52ab8":"code","1e462845":"code","196d6290":"code","0f040be1":"code","7133d6d0":"code","f8df5ac2":"code","e6060c49":"code","1c008fb2":"code","b93ed175":"code","f04b7c95":"code","bff4ac2f":"code","ff311f81":"code","76fb10d8":"code","c5bd6506":"code","ad0703b7":"code","ad41019e":"code","30fd351d":"code","0c69efab":"code","9cdaa865":"code","224f10f8":"code","4fff7794":"code","47d1df98":"code","4ea1f65e":"code","af6cad2f":"code","a748588f":"code","78a2fbee":"code","140d7b11":"code","9b377557":"code","02f96019":"code","54d1ddf9":"code","d34de94c":"code","c7ee04b7":"markdown","f70a14cb":"markdown","5d633267":"markdown","eae897c5":"markdown","8c862ecf":"markdown","5cd9d704":"markdown","8f0e875f":"markdown","cdf7d403":"markdown","db8d1b56":"markdown","996a7c5d":"markdown","f63defe4":"markdown","da3c8011":"markdown","17ccf56e":"markdown"},"source":{"ff08f93d":"#task_container_id should be monotonically increasing by user, but it isn't, should it be fixed?\n#train['task_container_id'] = (\n#    train\n#    .groupby('user_id')['task_container_id']\n#    .transform(lambda x: pd.factorize(x)[0])\n#    .astype('int16')\n#)","1e1be840":"#!pip install ..\/input\/python-datatable\/datatable-0.11.0-cp37-cp37m-manylinux2010_x86_64.whl","9d564811":"import riiideducation\n#import datatable as dt\nimport pandas as pd\nimport numpy as np\nfrom sklearn.metrics import roc_auc_score","51066a66":"#train = dt.fread('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv')\n#del train[:, ('row_id', 'user_answer', 'prior_question_had_explanation')]\n#train = train.sort(['user_id', 'timestamp'])\n#train.head()","d552fb0f":"#train = train[dt.f.content_type_id== 0, :]\n#del(train[:,'content_type_id'])","3c2506ee":"#train = train.to_pandas()\n#train.head()","bf44433e":"train = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv',\n                   usecols=[1, 2, 3],\n                   dtype={'timestamp': 'int64',\n                          'user_id': 'int32',\n                          'content_id': 'int16',\n                          'content_type_id': 'int8',\n                          'task_container_id': 'int16',\n                          'answered_correctly':'int8',\n                          'prior_question_elapsed_time': 'float32'}\n                   )","1c1024d7":"train = train[train.content_type_id == 0]\ntrain.drop('content_type_id', axis = 1, inplace = True)\ntrain = train.sort_values(['user_id','timestamp'])","d5a4e316":"#saving value to fillna\nelapsed_mean = train.prior_question_elapsed_time.mean()\n\ntrain.prior_question_elapsed_time.fillna(elapsed_mean, inplace = True)","ec4a4da0":"group1 = train[['task_container_id', 'user_id']].groupby(['task_container_id']).agg(['count'])\ngroup1.columns = ['avg_questions']\ngroup2 = train[['task_container_id', 'user_id']].groupby(['task_container_id']).agg(['nunique'])\ngroup2.columns = ['avg_questions']\ngroup3 = group1 \/ group2\ndel(group1, group2)","608ef5bc":"#supposed to be monotonically increasing by user, but not quite, close enough hopefully\ngroup3['avg_questions_seen'] = group3.avg_questions.cumsum()","8c98057b":"import pickle as pkl\n\ngroup3.to_pickle('.\/group3.pkl', compression='infer')","f12478fe":"results_u_final = train[['user_id','answered_correctly']].groupby(['user_id']).agg(['mean'])\nresults_u_final.columns = ['answered_correctly_user']\n\n","d323e1f1":"results_u_final.to_pickle('.\/results_u_final.pkl', compression='infer')","fe1bb14b":"len(train)","b6aa8ed4":"train.answered_correctly.mean()","d20440c5":"train['time_since_last_action'] = train['timestamp'] - train.timestamp.shift(1)\n\ntrain.time_since_last_action.replace(to_replace=0, method = 'ffill', inplace = True)\n\ntrain.loc[train.time_since_last_action < 0, 'time_since_last_action'] = np.nan\n","7d5920ba":"time_since_median = train.time_since_last_action.median()\n\ntrain.time_since_last_action.fillna(time_since_median, inplace = True)","675f4243":"X = train.sample(frac=.15, random_state = 100)\ntrain = train[~train.index.isin(X.index)]\nlen(X) + len(train)","b94387ec":"X.answered_correctly.mean()","02c4ea8b":"train.answered_correctly.mean()","01c95761":"X.task_container_id.value_counts()","6ca82488":"validation = train.sample(frac=.03, random_state = 100)","9bdbfdf6":"train = train[~train.index.isin(validation.index)]\nlen(train) + len(validation) + len(X)","952404c1":"validation.answered_correctly.mean()","5428409d":"train.answered_correctly.mean()","5cb52ab8":"#clearing memory\ndel(train)","1e462845":"pd.read_pickle(\".\/.pkl\")","196d6290":"X = pd.merge(X, group3, left_on=['task_container_id'], right_index= True, how=\"left\")\nX = pd.merge(X, results_u_final, on=['user_id'], how=\"left\")","0f040be1":"validation = pd.merge(validation, group3, left_on=['task_container_id'], right_index= True, how=\"left\")\nvalidation = pd.merge(validation, results_u_final, on=['user_id'], how=\"left\")","7133d6d0":"#reading in question df\nquestion2 = pd.read_csv('\/kaggle\/input\/question2\/question2.csv')","f8df5ac2":"content_mean = question2.quest_pct.mean()\n\nquestion2.quest_pct.mean()\n#there are a lot of high percentage questions, should use median instead?","e6060c49":"#filling questions with no info with a new value\nquestion2.quest_pct = question2.quest_pct.mask((question2['count'] < 4), .65)\n\n\n#filling very hard new questions with a more reasonable value\nquestion2.quest_pct = question2.quest_pct.mask((question2.quest_pct < .2) & (question2['count'] < 21), .2)\n\n#filling very easy new questions with a more reasonable value\nquestion2.quest_pct = question2.quest_pct.mask((question2.quest_pct > .95) & (question2['count'] < 21), .95)","1c008fb2":"question2.to_pickle('.\/question2.pkl', compression='infer')","b93ed175":"X = pd.merge(X, question2, left_on = 'content_id', right_on = 'question_id', how = 'left')\nvalidation = pd.merge(validation, question2, left_on = 'content_id', right_on = 'question_id', how = 'left')\nX.part = X.part - 1\nvalidation.part = validation.part - 1","f04b7c95":"y = X['answered_correctly']\nX = X.drop(['answered_correctly'], axis=1)\nX.head()\n\ny_val = validation['answered_correctly']\nX_val = validation.drop(['answered_correctly'], axis=1)","bff4ac2f":"#try to concat this to test if it works later\n#time_df = validation[['user_id', 'content_id', 'timestamp', 'time_since_last_action']].drop_duplicates('user_id', keep = 'last')\n#not working on test data yet.","ff311f81":"X = X[['answered_correctly_user', 'quest_pct', 'avg_questions_seen', 'prior_question_elapsed_time', 'time_since_last_action', 'part', 'count']]\nX_val = X_val[['answered_correctly_user', 'quest_pct', 'avg_questions_seen', 'prior_question_elapsed_time', 'time_since_last_action', 'part', 'count']]","76fb10d8":"X['answered_correctly_user'].fillna(0.65,  inplace=True)\nX['quest_pct'].fillna(content_mean, inplace=True)\n\nX['part'].fillna(4, inplace = True)\nX['avg_questions_seen'].fillna(1, inplace = True)\nX['prior_question_elapsed_time'].fillna(elapsed_mean, inplace = True)\n","c5bd6506":"X_val['answered_correctly_user'].fillna(0.65,  inplace=True)\nX_val['quest_pct'].fillna(content_mean,  inplace=True)\n\nX_val['part'].fillna(4, inplace = True)\nX['avg_questions_seen'].fillna(1, inplace = True)\nX_val['prior_question_elapsed_time'].fillna(elapsed_mean, inplace = True)","ad0703b7":"print(len(X), len(X_val))","ad41019e":"import lightgbm as lgb\n\nparams = {\n    'objective': 'binary',\n    'boosting' : 'gbdt',\n    'metric': 'auc'\n    'max_bin': 1500,\n    'learning_rate': 0.0175,\n    'num_leaves': 80\n}\n\nlgb_train = lgb.Dataset(X, y, categorical_feature = ['part'])\nlgb_eval = lgb.Dataset(X_val, y_val, categorical_feature = ['part'], reference=lgb_train)","30fd351d":"del(X, y)","0c69efab":"model = lgb.train(\n    params, lgb_train,\n    valid_sets=[lgb_train, lgb_eval],\n    verbose_eval=50,\n    num_boost_round=1000,\n    early_stopping_rounds=8\n)","9cdaa865":"y_pred = model.predict(X_val)\ny_true = np.array(y_val)\nroc_auc_score(y_true, y_pred)","224f10f8":"import matplotlib.pyplot as plt\nimport seaborn as sns","4fff7794":"#displaying the most important features by split\nlgb.plot_importance(model)\nplt.show()","47d1df98":"#displaying the most important features by gain\nlgb.plot_importance(model, importance_type = 'gain')\nplt.show()","4ea1f65e":"# save model to file\nmodel.save_model('.\/lgbm_model.txt')","af6cad2f":"bst = lgb.Booster(model_file='.\/lgbm_model.txt')\n#y_pred = bst.predict(X_test)","a748588f":"X_val.iloc[0].shape","78a2fbee":"X_val.iloc[0]","140d7b11":"env = riiideducation.make_env()\niter_test = env.iter_test()","9b377557":"for (test_df, sample_prediction_df) in iter_test:\n    test_df['task_container_id'] = test_df.task_container_id.mask(test_df.task_container_id > 9999, 9999)\n    test_df = pd.merge(test_df, group3, left_on=['task_container_id'], right_index= True, how=\"left\")\n    test_df = pd.merge(test_df, question2, left_on = 'content_id', right_on = 'question_id', how = 'left')\n    test_df = pd.merge(test_df, results_u_final, on=['user_id'],  how=\"left\")\n    test_df['answered_correctly_user'].fillna(0.65,  inplace=True)\n    test_df['quest_pct'].fillna(content_mean,  inplace=True)\n    test_df['part'] = test_df.part - 1\n\n    test_df['part'].fillna(4, inplace = True)\n    test_df['avg_questions_seen'].fillna(1, inplace = True)\n    test_df['prior_question_elapsed_time'].fillna(elapsed_mean, inplace = True)\n    test_df['prior_question_had_explanation'].fillna(False, inplace=True)\n    \n    test_df['answered_correctly'] =  model.predict(test_df[['answered_correctly_user', 'quest_pct', 'avg_questions_seen', \n                                                            'prior_question_elapsed_time', 'time_since_last_action', 'part', 'count']])\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])","02f96019":"time_since_median","54d1ddf9":"#students don't appear in every task container ID what can I do about this, can't always follow sequentially?","d34de94c":"#secret code for making calculation work\n'''time_df = pd.concat([time_df, test_df[['user_id', 'content_id', 'timestamp']]], axis=0, ignore_index = True)\n\ntime_df = time_df.sort_values(['user_id','timestamp'])\n\ntime_df['prev_timestamp'] = time_df.timestamp.shift(1)\n\ntime_df['time_since_last_action'] = time_df['timestamp'] - time_df['prev_timestamp']\n\ntime_df.time_since_last_action.replace(to_replace=0, method = 'ffill', inplace = True)\n\ntime_df.loc[time_df.time_since_last_action < 0, 'time_since_last_action'] = np.nan\n\ntime_df.time_since_last_action.fillna(time_since_median, inplace = True)\n\ntest_df = pd.merge(test_df, time_df, on=['user_id', 'content_id', 'timestamp'], how = \"left\")\n\ntest_df.time_since_last_action.fillna(time_since_median, inplace = True)'''\n\n#use map instead if you only have a single column\n","c7ee04b7":"## Reading Data and Importing Libraries ##","f70a14cb":"This will likely be the last public notebook I release for a while. I wanted to clean up my prior LGBM model and give myself a solid baseline before using other models.\n\nI really need to find better ways of getting training and validation data. Grouping by user_id and sampling task_container_id?\n\nThere is a lot more work to do in generating better student\/user features.\n\nI generated the question2 file using bigquery to aggregate question percentage correct and count of questions from the train data with the original question data.","5d633267":"## Creating Validation Set ##","eae897c5":"## Modeling ##","8c862ecf":"## Making Predictions for New Data ##","5cd9d704":"Does it make sense to use last questions as validation? Why is the rate of correct answers so low?\nI am convinced there is a better way to match the test data.","8f0e875f":"## Data Exploration ##","cdf7d403":"## Timestamp Features ##","db8d1b56":"## Extracting Training Data ##","996a7c5d":"## Merging Data ##","f63defe4":"Affirmatives (True) for content_type_id are only for those with a different type of content (lectures). These are not real questions.","da3c8011":"## Examining Feature Importance ##","17ccf56e":"## Saving Grouped Features ##"}}