{"cell_type":{"28aed1ec":"code","deb9e597":"code","072fbcc9":"code","ab076100":"code","c8f5c641":"code","2f7b4a73":"code","e9807a9e":"code","53aac2d2":"code","1df5c387":"code","32faf363":"code","2e878a11":"code","ac7eec4c":"code","75cf2ac2":"code","fa9d0715":"code","fc68e403":"code","98a19567":"code","0753c191":"code","2a5e3247":"code","8cac5017":"code","b7af1f9a":"code","9a001bbe":"code","a64c2b6f":"code","ab03a2b8":"code","77ec600d":"code","e944ffeb":"code","d53b7cf7":"code","db100bc3":"code","7e853b3b":"code","4a5b23f5":"code","a995202f":"code","14be3a4a":"code","7fe490f4":"code","1e3a25c3":"code","1d598d68":"code","b832c79d":"code","b2d25592":"code","5e974462":"code","4afa92f3":"code","7e8c5949":"code","dcf3856b":"code","35272f64":"code","3d2a37b3":"code","64752442":"code","658f0413":"code","254b4534":"code","0a583ddd":"code","942fa87e":"code","93d3b95a":"code","6a4806e9":"code","d9d6014b":"code","020bd25c":"code","49e17fcf":"code","84ede73a":"code","c61cd4fc":"code","93a78fb6":"code","64340f6f":"code","af0b0d96":"code","df67043f":"code","293fbc32":"code","8e9fc236":"code","7b448332":"code","7d897af3":"code","fad6bebc":"code","3930360b":"code","1dfd4a8b":"code","824a5c18":"code","0acc3382":"code","f5599018":"code","2432ada6":"code","2562b9bc":"code","4e549809":"code","55431ec5":"code","b462fb5e":"code","29b52564":"code","4e7e4a60":"code","1c604bd9":"code","d73c7bca":"code","fc3db840":"code","3fba3a7c":"code","942a9d73":"code","1babf612":"code","80918652":"code","3ce520ca":"code","1b3a8a4e":"code","8cca2be2":"code","60ba7a0c":"code","27746ed7":"code","3dbb2919":"code","db885ec1":"code","8b6017bb":"code","be602917":"code","5c907bb6":"code","026f33e6":"code","4a3ca81c":"code","1131c45b":"markdown","8d158105":"markdown","d378fbbd":"markdown","8b0a365c":"markdown","845cde92":"markdown","ae7bb8a9":"markdown","efdfff6f":"markdown","1701e667":"markdown","364323df":"markdown","9080f5be":"markdown","97f39d20":"markdown","35527978":"markdown","a8e35a17":"markdown","13c2ba18":"markdown","678b4612":"markdown","46e6dd84":"markdown","c471ac25":"markdown","9d31c820":"markdown","f5265d3b":"markdown","8e640155":"markdown","0c92f0e5":"markdown","fc2fca99":"markdown","e8d14e35":"markdown","19cfe02d":"markdown","a314f06c":"markdown","c55af5c8":"markdown","ca58dbc1":"markdown","3d64981e":"markdown","4984e81a":"markdown","7f9e3442":"markdown","4467519c":"markdown","7a5af985":"markdown","f433adcc":"markdown","5c01e2d5":"markdown","73edd064":"markdown","5bc40629":"markdown","6349ab5c":"markdown","591ca19f":"markdown","dde5dd20":"markdown","69de6023":"markdown","9de5bf6f":"markdown","a7619e1e":"markdown","008116ef":"markdown","fcdcae85":"markdown","f84e1452":"markdown","fdebbdc8":"markdown","e3f5113d":"markdown","3eee4159":"markdown","6eb8664f":"markdown","76caffe7":"markdown"},"source":{"28aed1ec":"####################################\n#  Libraries\n####################################\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","deb9e597":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df  = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId = test_df['PassengerId']","072fbcc9":"train_df.columns","ab076100":"train_df.head()","c8f5c641":"train_df.describe().T","2f7b4a73":"train_df.info()","e9807a9e":"def bar_plot(variable):\n    \"\"\"\n    \n        input  : variable ex: \"Sex\"\n        output : bar plot & value count\n    \n    \"\"\"\n    # get feature\n    var  = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize \n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable, varValue))","53aac2d2":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","1df5c387":"category2 = ['Cabin', 'Name', 'Ticket']\nfor c in category2:\n    print('{} \\n'.format(train_df[c].value_counts()))","32faf363":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable],bins = 10)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with histogram\".format(variable))\n    plt.show()","2e878a11":"numericalVar = ['Fare', 'Age', 'PassengerId']\nfor n in numericalVar:\n    plot_hist(n)","ac7eec4c":"# Pclass - Survived\ntrain_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","75cf2ac2":"# Sex - Survived\ntrain_df[['Sex', 'Survived']].groupby(['Sex'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","fa9d0715":"# SibSp - Survived\ntrain_df[['SibSp', 'Survived']].groupby(['SibSp'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","fc68e403":"# Parch - Survived\ntrain_df[['Parch', 'Survived']].groupby(['Parch'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","98a19567":"def detect_outlier(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3-Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # Detect Outlier and Their Indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # Store Indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","0753c191":"train_df.loc[detect_outlier(train_df, [\"Age\", \"SibSp\",\"Parch\", \"Fare\"])]","2a5e3247":"# drop outliers \ntrain_df= train_df.drop(detect_outlier(train_df, [\"Age\", \"SibSp\",\"Parch\", \"Fare\"]), axis = 0).reset_index(drop = True)","8cac5017":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)","b7af1f9a":"train_df.head()","9a001bbe":"train_df.columns[train_df.isnull().any()]","a64c2b6f":"train_df.isnull().sum()","ab03a2b8":"train_df[train_df['Embarked'].isnull()]","77ec600d":"# we can fill embarked with pclass and fare\ntrain_df.boxplot(column = 'Fare', by = 'Embarked')\nplt.show()","e944ffeb":"train_df['Embarked'] = train_df['Embarked'].fillna('C')\ntrain_df[train_df['Embarked'].isnull()]","d53b7cf7":"# Lets check Fare's missing value\ntrain_df[train_df['Fare'].isnull()]","db100bc3":"np.mean(train_df[train_df['Pclass'] == 3]['Fare'])","7e853b3b":"train_df['Fare'] =train_df['Fare'].fillna(np.mean(train_df[train_df['Pclass'] == 3]['Fare']))","4a5b23f5":"train_df[train_df['Fare'].isnull()]","a995202f":"list1 = ['SibSp', 'Parch', 'Age', 'Fare', 'Survived']\nsns.heatmap(train_df[list1].corr(), annot = False, fmt = '.2f' )\nplt.show()","14be3a4a":"sns.heatmap(train_df[list1].corr(), annot = True, fmt = '.2f' )\nplt.show()","7fe490f4":"g = sns.factorplot(x = 'SibSp', y = 'Survived', data = train_df, kind = 'bar', size = 7)\ng.set_ylabels('Survived Probability')\nplt.show()","1e3a25c3":"g = sns.factorplot(x = 'Parch', y = 'Survived', kind = 'bar', data = train_df, size = 6)\ng.set_ylabels('Survived Probability')\nplt.show()","1d598d68":"g = sns.factorplot(x = 'Pclass', y = 'Survived', data = train_df, kind = 'bar', size = 6)\ng.set_ylabels('Survived Probability')\nplt.show()","b832c79d":"g = sns.FacetGrid(train_df, col = 'Survived')\ng.map(sns.distplot, 'Age', bins = 25)\nplt.show()","b2d25592":"g = sns.FacetGrid(train_df, col = 'Survived', row = 'Pclass')\ng.map(plt.hist, 'Age', bins = 25)\ng.add_legend()\nplt.show()","5e974462":"g = sns.FacetGrid(train_df, row = 'Embarked', size = 2)\ng.map(sns.pointplot, 'Pclass', 'Survived', 'Sex')\ng.add_legend()\nplt.show()","4afa92f3":"g = sns.FacetGrid(train_df, row = 'Embarked', col = 'Survived', size = 2.3)\ng.map(sns.barplot, 'Sex', 'Fare')\ng.add_legend()\nplt.show()","7e8c5949":"train_df[train_df['Age'].isnull()]","dcf3856b":"sns.factorplot(x = 'Sex', y = 'Age', data = train_df, kind = 'box')\nplt.show()","35272f64":"sns.factorplot(x  ='Sex', y = 'Age', hue  ='Pclass', data = train_df, kind = 'box')\nplt.show()","3d2a37b3":"sns.factorplot(x  ='Parch', y = 'Age', data = train_df, kind = 'box')\nsns.factorplot(x  ='SibSp', y = 'Age', data = train_df, kind = 'box')\nplt.show()","64752442":"train_df['Sex'] = [1 if i =='male' else 0 for i in train_df['Sex']]","658f0413":"sns.heatmap(train_df[['Age', 'Sex', 'SibSp', 'Parch', 'Pclass']].corr(), annot = True)\nplt.show()","254b4534":"index_nan_age = list(train_df['Age'][train_df['Age'].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df['Age'][((train_df['SibSp'] == train_df.iloc[i]['SibSp']) & \n                              (train_df['Parch'] == train_df.iloc[i]['Parch']) &\n                              (train_df['Pclass'] == train_df.iloc[i]['Pclass']))].median()\n    age_med = train_df['Age'].median()\n    if not np.isnan(age_pred):\n        train_df['Age'].iloc[i] = age_pred\n    else:\n        train_df['Age'].iloc[i] = age_med","0a583ddd":"train_df[train_df['Age'].isnull()]","942fa87e":"train_df['Name'].head(10)","93d3b95a":"name = train_df['Name']\ntrain_df['Title'] = [i.split('.')[0].split(',')[-1].strip() for i in name]","6a4806e9":"train_df['Title'].head(10)","d9d6014b":"sns.countplot(x = 'Title', data = train_df)\nplt.xticks(rotation = 60);","020bd25c":"# convert to categorical \ntrain_df['Title'] = train_df['Title'].replace([\"Lady\", \"the Countess\", \"Capt\",\n                                              \"Col\", \"Don\", \"Dr\", \"Major\", \"Rev\",\n                                               \"Sir\", \"Jonkheer\",\"Dona\"], \"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df['Title'].head(30)","49e17fcf":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","84ede73a":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","c61cd4fc":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)\n","93a78fb6":"train_df.head()","64340f6f":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","af0b0d96":"train_df.head()\n","df67043f":"train_df['Fsize'] = train_df['SibSp'] + train_df['Parch'] + 1","293fbc32":"train_df.head()","8e9fc236":"g = sns.factorplot(x = 'Fsize', y = 'Survived', data = train_df, kind = 'bar')\ng.set_ylabels('Survival');","7b448332":"train_df['family_size'] = [1 if i < 5 else 0 for i in train_df['Fsize']]","7d897af3":"train_df.head(10)","fad6bebc":"sns.countplot(x = 'family_size', data = train_df);","3930360b":"g = sns.factorplot(x='family_size', y = 'Survived', data = train_df, kind = 'bar')\ng.set_ylabels('Survival')","1dfd4a8b":"train_df = pd.get_dummies(train_df, columns = ['family_size'])\ntrain_df.head()","824a5c18":"train_df[\"Embarked\"].head()","0acc3382":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","f5599018":"train_df = pd.get_dummies(train_df, columns = ['Embarked'])\ntrain_df.head()              ","2432ada6":"train_df['Ticket'].head()","2562b9bc":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","4e549809":"tickets = []\n\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","55431ec5":"train_df[\"Ticket\"].head(20)","b462fb5e":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head()","29b52564":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","4e7e4a60":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","1c604bd9":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","d73c7bca":"train_df.drop(labels = ['PassengerId',\n                        'Cabin'], axis =1 , inplace = True)","fc3db840":"train_df.columns","3fba3a7c":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","942a9d73":"train_df_len","1babf612":"test = train_df[train_df_len:]\ntest.drop(labels = ['Survived'], axis = 1, inplace = True)","80918652":"test.head()","3ce520ca":"train = train_df[:train_df_len]\nX_train = train.drop(labels = 'Survived', axis = 1)\ny_train = train['Survived']\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = .33, random_state = 123)\nprint('X_train', len(X_train))\nprint('X_test', len(X_test))\nprint('y_train', len(y_train))\nprint('y_train', len(y_train))\n","1b3a8a4e":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","8cca2be2":"random_state = 123\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n              SVC(random_state = random_state),\n              RandomForestClassifier(random_state = random_state),\n              LogisticRegression(random_state = random_state),\n              KNeighborsClassifier()]","60ba7a0c":"dt_param_grid = {'min_samples_split': range(10,500,20),\n                'max_depth': range(1,20,2)}","27746ed7":"svc_param_grid = {'kernel': ['rbf'],\n                  'gamma' : [0.001, 0.01, 0.1, 1],\n                  'C'     : [1,10,50,100,200,300,1000]}","3dbb2919":"rf_param_grid = {\"max_features\": [1,3,10],\n                 \"min_samples_split\":[2,3,10],\n                 \"min_samples_leaf\":[1,3,10],\n                 \"bootstrap\":[False],\n                 \"n_estimators\":[100,300],\n                 \"criterion\":[\"gini\"]}","db885ec1":"logreg_param_grid = {'C'      : np.logspace(-3,3,7),\n                     'penalty':['l1', 'l2']}","8b6017bb":"knn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                  \"weights\"    : [\"uniform\",\"distance\"],\n                  \"metric\"     :[\"euclidean\",\"manhattan\"]}","be602917":"classifier_param = [dt_param_grid,\n                    svc_param_grid,\n                    rf_param_grid,\n                    logreg_param_grid,\n                    knn_param_grid]","5c907bb6":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","026f33e6":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result,\n                           \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\"LogisticRegression\",\"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","4a3ca81c":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                         (\"rfc\",best_estimators[2]),\n                                         (\"lr\",best_estimators[3])],\n                                         voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","1131c45b":"* Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","8d158105":"<a id = '31'><\/a><br>\n\n## Simple Logistic Regression","d378fbbd":"* Passengers who pay higher fare have better survival. Fare can be used as categorical for training.","8b0a365c":"<a id = '7'><\/a><br>\n\n    \n# Outlier Detection","845cde92":"* Small families have more chance to survive than large families","ae7bb8a9":"> <a id = '29'><\/a><br>\n\n# Modeling","efdfff6f":"* Female passengers have much better survival rate than males.\n* Males have better survival rate in p class 3 in c.\n* Embarked and sex will be used in training.","1701e667":"<a id = '3'><\/a><\/br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp and Parch\n* Numerical   Variable: Fare, age and PassengerId ","364323df":"<a id = '21'><\/a><br>\n\n# Feature Engineering","9080f5be":"<a id = '8'><\/a><br>\n\n# Missing Value","97f39d20":"* pclass is important feature for model training","35527978":"<a id = '1'><\/a><\/br>\n# Load and Check Data","a8e35a17":"<a id = '18'><\/a><br>\n\n## Embarked -- Sex -- Pclass -- Survived","13c2ba18":"<a id = '13'><\/a><br>\n\n## SibSp -- Survived","678b4612":"> <a id = '30'><\/a><br>\n\n## Train Test Split","46e6dd84":"Sex is not informative for age prediction, age distribution seems to be same.","c471ac25":"# Introduction\n\nThe sinking of Titanic is one of the most notorious shipwredcks in the history. In 1912, during her voyage, the titanic sank after colliding with an iceberg. Killing out 1502 out of 2224 passengers and crew.\n\n<font color = 'blue'>\n\nContent:\n    \n1. [Load and Check Data](#1)  \n2. [Variable Description](#2)    \n    * [Univariate Variablle Analysis](#3)\n        * [Categorical Variable ](#4)\n        * [Numerical Variable ](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Correlation btw Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill missing; Age Feature](#20)\n    \n7. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop PAssenger ID and Cabin](#28)\n  \n8. [Modeling](#29)","9d31c820":"<a id = '10'><\/a><br>\n\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","f5265d3b":"<a id = '23'><\/a><br>\n\n## Family Size","8e640155":"<a id = '6'><\/a><\/br>\n\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSP - Survived\n* Parch - Survived","0c92f0e5":"<a id = '26'><\/a><br>\n\n## Pclass","fc2fca99":"<a id = '19'><\/a><br>\n\n## Embarked -- Sex -- Fare -- Survived","e8d14e35":"<a id = '11'><\/a><br>\n\n# Visualization","19cfe02d":"<a id = '9'><\/a><br>\n\n## Find Missing Value","a314f06c":"* Having a lot of SibSp have less chanve to survive.\n* If sibsp == 0 or 1 or 2, passenger has more chance to survive\n* We can consider a now feature describing these categories.","c55af5c8":"* Sibsp and parch can be used for new feature extraction with th = 3\n* small families gave more chance to survive.\n* there is a std in survival  of passenger with parch = 3","ca58dbc1":"* age <= 10 has a high survival rate\n* oldest passengers (80) survived\n* large number of 20 years old did not survive\n* most passengers are in 15-35 age range\n* use age feature in training \n* use age distribution for missing value of age","3d64981e":"<a id = '28'><\/a><br>\n\n## Drop Passenger ID and Cabin","4984e81a":"<a id = '15'><\/a><br>\n\n## Pclass -- Survived","7f9e3442":"<a id = '24'><\/a><br>\n\n## Embarked","4467519c":"as we can see median rage of C is close to 80 so our missing values can be filled by C","7a5af985":"<a id = '4'><\/a><\/br>\n## Categorical Variable","f433adcc":"<a id = '5'><\/a><\/br>\n\n## Numerical Variable","5c01e2d5":"Fare feature seems to have correlation with survived feature (0.26).","73edd064":"* float64(2) : Fare and Age  \n* int64(5)   : PassengerId, Survived, Pclass, SibSp, Parch  \n* object(5)  : Name, Sex, Ticket, Cabin, Embarked\n","5bc40629":"<a id = '32'><\/a><br>\n\n##  Hyperparameter Tuning -- Grid Search -- Cross Validation  \n  \nCompare 5 ML classifier and evaluate mean accuracy of each of them by stratified cross validation\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","6349ab5c":"<a id = '17'><\/a><br>\n\n## Pclass -- Survived -- Age","591ca19f":"<a id = '16'><\/a><br>\n\n## Age -- Survived","dde5dd20":"<a id = '12'><\/a><br>\n\n## Correlation btw Sibsp -- Parch -- Age -- Fare -- Survived","69de6023":"<a id = '20'><\/a><br>\n\n## Fill missing; Age Feature","9de5bf6f":"<a id = '22'><\/a><br>\n\n## Name -- Title","a7619e1e":"1st class passengers are older than 2nd and 2nd is older than 3ed class.","008116ef":"if someone have more than 2 sibsp value, has not too much change to survive","fcdcae85":"<a id = '2'><\/a><\/br>\n# Variable Description\n1.  PassengerId : Unique id number to each passenger\n2.  Survived : Passenger survive(1) or died(0)\n3.  Pclass   : Passenger class\n4.  Name     : Name of passenger\n5.  Sex      : Gender of passenger\n6.  Age      : Age of passenger\n7.  SibSp    : Number of siblings\/spouses\n8.  Parch    : Number of parents\/children\n9.  Ticket   : Ticket number\n10. Fare     : Amount of money spent on ticket\n11. Cabin    : Cabin category\n12. Embarked : Port where passenger embarked (C = Cherbourg, Q = Queenstown,                S = Southhampton)","f84e1452":"---","fdebbdc8":"<a id = '27'><\/a><br>\n\n## Sex","e3f5113d":"<a id = '25'><\/a><br>\n\n## Embarked","3eee4159":"<a id = '14'><\/a><br>\n\n## Parch -- Survived","6eb8664f":"<a id = '33'><\/a><br>\n\n## Ensemble Modeling","76caffe7":"Feature Engineering\n\nName -- Title\nFamily Size\nEmbarked\nTicket\nPclass\nSex\nDrop PAssenger ID and Cabin"}}