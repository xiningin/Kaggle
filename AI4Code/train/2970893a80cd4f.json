{"cell_type":{"5f1449f1":"code","e46d8344":"code","85f26ea1":"code","785ee662":"code","40055100":"code","a792df8f":"code","a7fdd23f":"code","f4df4269":"code","79450cfe":"code","eeef0ad8":"code","f0a3105a":"code","bcfcd648":"code","3e1999d0":"code","d065ccd3":"code","a76e5d22":"code","5b413590":"code","cd9b4259":"code","7b52ba1f":"code","b180edb5":"code","8013b290":"code","6cceaa35":"code","f1f60f78":"code","3acf9247":"code","da73354f":"code","d0080e32":"code","ff756e11":"code","1fff45d9":"code","8bec64c1":"code","e20dd138":"code","a52c1af1":"code","3c640705":"code","0ee7005f":"code","4a4c0071":"code","7bf18e09":"code","bb437533":"code","603cd429":"code","6a4f92ed":"code","0db30772":"code","2f79e0c3":"code","5d27e196":"code","61ae5a53":"code","0df7b7e8":"code","55e16feb":"code","0cd6d7af":"code","d0f9d58a":"code","d79bb303":"code","02725f91":"code","b50c5377":"code","e8290670":"code","9dba36be":"code","86b0b452":"code","9e0df758":"code","091c622e":"code","99656443":"code","ec49871d":"code","37de9a82":"code","a6268536":"markdown","0d83cff9":"markdown","9f5205e3":"markdown","34e2b912":"markdown","497392ae":"markdown","0beb0bae":"markdown","91383df1":"markdown","2ea553ce":"markdown","8f238c91":"markdown","00b37a10":"markdown","0f742f7f":"markdown","7785f4dc":"markdown","a3085d79":"markdown","2a50aed1":"markdown","9e4427e6":"markdown","9adc5287":"markdown","4a139a05":"markdown","f25ec2c6":"markdown","29cf582e":"markdown","cc41e79c":"markdown","3bf2f2de":"markdown","3ae8d135":"markdown","07acbc4f":"markdown","8b70c9d9":"markdown","ecdcdda6":"markdown","2d175d16":"markdown","646374bf":"markdown","ba1c8813":"markdown","23d85186":"markdown","9e6869dc":"markdown","2aa057f6":"markdown","b734a856":"markdown","7f6e358d":"markdown","b3e1bed0":"markdown","0952db89":"markdown","b6d5563c":"markdown","67b15737":"markdown","3709bfcd":"markdown","442510e8":"markdown","1f6362bf":"markdown","04d44ffa":"markdown","b398cfba":"markdown","53217417":"markdown"},"source":{"5f1449f1":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nimport numpy as np\nfrom tqdm import tqdm_notebook as tqdm\nimport datetime\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","e46d8344":"df = pd.read_csv(\"..\/input\/daily-temperature-of-major-cities\/city_temperature.csv\", low_memory = False)","85f26ea1":"df.sample(5)","785ee662":"df.info(memory_usage='deep')","40055100":"df.memory_usage(deep=True)","a792df8f":"df[['Month', 'Day']] = df[['Month', 'Day']].astype('int8')\ndf[['Year']] = df[['Year']].astype('int16')\ndf['AvgTemperature'] = df['AvgTemperature'].astype('float16')","a7fdd23f":"df.reset_index(drop=True, inplace=True)","f4df4269":"df.sample(5)","79450cfe":"df = df[df.Year != 200]\ndf = df[df.Year != 201]\ndf = df[df.Year != 2020]","eeef0ad8":"df = df.drop('State', axis = 1)","f0a3105a":"df['Date'] = pd.to_datetime(df.Year.astype(str) + '\/' + df.Month.astype(str))","bcfcd648":"missing = pd.DataFrame(df.loc[df.AvgTemperature == -99, 'Country'].value_counts())\nmissing['TotalData'] = df.groupby('Country').AvgTemperature.count()\nmissing['PercentageMissing'] = missing.apply(lambda row: (row.Country\/row.TotalData)*100, axis = 1)\nmissing.sort_values(by=['PercentageMissing'], inplace=True, ascending = False)\nmissing.head(20)","3e1999d0":"df.loc[df.AvgTemperature == -99, 'AvgTemperature'] = np.nan","d065ccd3":"df.AvgTemperature.isna().sum()","a76e5d22":"df['AvgTemperature'] = df['AvgTemperature'].fillna(df.groupby(['City', 'Date']).AvgTemperature.transform('mean'))","5b413590":"df.AvgTemperature.isna().sum()","cd9b4259":"df.loc[df.AvgTemperature.isna(), 'City'].value_counts()","7b52ba1f":"df['AvgTemperature'] = df['AvgTemperature'].fillna(df.groupby(['City']).AvgTemperature.transform('mean'))","b180edb5":"df.AvgTemperature.isna().sum()","8013b290":"# \u00b0F to \u00b0C: (\u00b0F \u2212 32) \u00d7 5\/9 = \u00b0C\ndf['AvgTempCelsius'] = (df.AvgTemperature -32)*(5\/9)\ndf  = df.drop(['AvgTemperature'], axis = 1)","6cceaa35":"df['AvgTempCelsius_rounded'] = df.AvgTempCelsius.apply(lambda x: \"{0:0.2f}\".format(x))\ndf['AvgTempCelsius_rounded2'] = df.AvgTempCelsius.apply(lambda x: \"{0:0.1f}\".format(x))","f1f60f78":"df['AvgTempCelsius_rounded'] = pd.to_numeric(df['AvgTempCelsius_rounded'])\ndf['AvgTempCelsius_rounded2'] = pd.to_numeric(df['AvgTempCelsius_rounded2'])","3acf9247":"df.sample(5)","da73354f":"plt.figure(figsize=(15,8))\nsns.lineplot(x = 'Year', y = 'AvgTempCelsius', data = df , palette='Set2')\nplt.title('Average Global Temperatures')\nplt.ylabel('Average Temperature (\u00b0C)')\nplt.xlabel('')\nplt.xticks(range(1995,2020))\nplt.show();","d0080e32":"df_mean_month = df.groupby(['Month', 'Year']).AvgTempCelsius_rounded2.mean()\ndf_mean_month = df_mean_month.reset_index()\ndf_mean_month = df_mean_month.sort_values(by = ['Year'])","ff756e11":"df_pivoted = pd.pivot_table(data= df_mean_month,\n                    index='Month',\n                    values='AvgTempCelsius_rounded2',\n                    columns='Year')","1fff45d9":"plt.figure(figsize=(20, 8))\nsns.heatmap(data = df_pivoted, cmap='coolwarm', annot = True, fmt=\".1f\", annot_kws={'size':11})\nplt.xlabel('')\nplt.ylabel('Month')\nplt.title('Average Global Temperatures (\u00b0C)')\nplt.show();","8bec64c1":"s = df.groupby(['Region'])['AvgTempCelsius'].mean().reset_index().sort_values(by='AvgTempCelsius',ascending=False)\ns.style.background_gradient(cmap=\"RdBu_r\")","e20dd138":"f = plt.figure(figsize=(15,8))\nsns.lineplot(x = 'Year', y = 'AvgTempCelsius', hue = 'Region', data = df , palette='hsv')\nplt.title('Average Temperature in Different Regions')\nplt.ylabel('Average Temperature (\u00b0C)')\nplt.xlabel('Year')\nplt.xticks(range(1995,2020))\nplt.legend(loc='center left', bbox_to_anchor=(1.04, 0.5),ncol=1)\nplt.tight_layout()\nplt.show();","a52c1af1":"region_sorted = df.groupby('Region')['AvgTempCelsius'].median().sort_values().index\n\nwith sns.color_palette(\"muted\"):\n    f, ax = plt.subplots(figsize=(10, 7))\n    sns.boxplot(data = df.sort_values(\"AvgTempCelsius\"), x = 'Region', y = 'AvgTempCelsius', order = region_sorted)\n    plt.xticks(rotation = 90)\n    plt.title('Distribution of Temperatures (1995-2019)')\n    plt.xlabel('')\n    plt.ylabel('Average Temperature (\u00b0C)')","3c640705":"with sns.color_palette(\"muted\"):\n    f, ax = plt.subplots(figsize=(15, 5))\n    sns.violinplot(data = df.sort_values(\"AvgTempCelsius\"), x = 'Region', y = 'AvgTempCelsius_rounded', order = region_sorted)\n    plt.xticks(rotation = 90)\n    plt.title('Distribution of Average Temperatures (1995-2019)')\n    plt.xlabel('')\n    plt.ylabel('Average Temperature (\u00b0C)')\n    plt.show;","0ee7005f":"regions = df.Region.unique().tolist()","4a4c0071":"import matplotlib.gridspec as gridspec","7bf18e09":"number_plot = [0, 0, 0, 1, 1, 1, 2]\nposition_a = [0, 2, 4, 0, 2, 4, 2]\nposition_b = [2, 4, 6, 2, 4, 6, 4]\n\nfig = plt.figure(figsize = (25,15))\nplt.suptitle('Global Monthly Temperatures (1995-2019)', y = 1.05, fontsize=15)\n\ngs = gridspec.GridSpec(3, 6)\n\nfor i in range(7): \n    #ax = plt.subplot(3, 3, i+1)\n    ax = plt.subplot(gs[number_plot[i], position_a[i]:position_b[i]])\n    sns.barplot(x = 'Month', y = 'AvgTempCelsius_rounded2', data = df[df.Region == regions[i]])\n    ax.title.set_text(regions[i])\n    ax.set_ylim((0,35))\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n\nplt.subplots_adjust(wspace = 0.5)\n\nplt.savefig('demographics.png')\nplt.tight_layout()\nplt.show();","bb437533":"s = df.groupby(['Country'])['AvgTempCelsius'].mean().reset_index().sort_values(by='AvgTempCelsius',ascending=False)[:10]\ns.style.background_gradient(cmap=\"Reds\")","603cd429":"s = df.groupby(['Country'])['AvgTempCelsius'].mean().reset_index().sort_values(by='AvgTempCelsius',ascending=True)[:10]\ns.style.background_gradient(cmap=\"Blues\")","6a4f92ed":"df_europe = df[df.Region == 'Europe'].copy()","0db30772":"df_europe.sample(5)","2f79e0c3":"f, ax = plt.subplots(figsize=(10, 5))\nsns.distplot(df_europe.AvgTempCelsius_rounded, bins = 20)\nplt.title('Distribution of Temperatures in Europe (1995-2019)')\nplt.xlabel('Temperature (\u00b0C)')\n#ax.axes.yaxis.set_visible(False)\nax.axes.yaxis.set_ticklabels(['']);","5d27e196":"f, ax = plt.subplots(figsize=(10, 5))\nsns.distplot(df_europe[df_europe.Year == 2019].AvgTempCelsius_rounded, bins = 20)\nplt.title('Distribution of Temperatures in Europe (1995-2019)')\nplt.xlabel('Temperature (\u00b0C)')\n#ax.axes.yaxis.set_visible(False)\nax.axes.yaxis.set_ticklabels(['']);","61ae5a53":"countries_sorted = df_europe.groupby('Country')['AvgTempCelsius_rounded2'].median().sort_values().index\n\nwith sns.color_palette(\"muted\"):\n    f, ax = plt.subplots(figsize=(20, 7))\n    sns.boxplot(data = df_europe, x = 'Country', y = 'AvgTempCelsius_rounded', order = countries_sorted)\n    plt.xticks(rotation = 90)\n    plt.title('Distribution of Temperatures in Europe (1995-2019)')\n    plt.ylabel('Temperature (\u00b0C)')\n    plt.xlabel('');","0df7b7e8":"countries_mean_sorted = df_europe.groupby('Country').AvgTempCelsius_rounded2.mean().sort_values().index\n\nplt.figure(figsize = (15,8))\nsns.barplot(x = 'Country', y = 'AvgTempCelsius_rounded2', data = df_europe, \n            order = countries_mean_sorted)\nplt.xticks(rotation = 90)\nplt.xlabel('')\nplt.title('Average Temperatures in Europe (1995-2019)')\nplt.ylabel('Average Temperature (\u00b0C)');","55e16feb":"plt.figure(figsize = (15,8))\nsns.barplot(x = 'Year', y = 'AvgTempCelsius_rounded2', data = df_europe)\nplt.title('Average Yearly Temperature in Europe')\nplt.xlabel('Year')\nplt.ylabel('Average Temperature (\u00b0C)')\nplt.show();","0cd6d7af":"europe_mean_month = df_europe.groupby(['Month', 'Year']).AvgTempCelsius_rounded2.mean()\neurope_mean_month = europe_mean_month.reset_index()\neurope_mean_month = europe_mean_month.sort_values(by = ['Year'])","d0f9d58a":"europe_pivoted = pd.pivot_table(data= europe_mean_month,\n                    index='Month',\n                    values='AvgTempCelsius_rounded2',\n                    columns='Year')","d79bb303":"plt.figure(figsize=(20, 8))\nsns.heatmap(data = europe_pivoted, cmap='coolwarm', annot = True, fmt=\".1f\", annot_kws={'size':11})\nplt.ylabel('Month')\nplt.xlabel('')\nplt.title('Average Temperatures in Europe (\u00b0C)')\nplt.show();","02725f91":"df_austria = df_europe[df_europe.Country == 'Austria'].copy()","b50c5377":"df_austria.head()","e8290670":"f, ax = plt.subplots(figsize=(10, 7))\nsns.distplot(df_austria.AvgTempCelsius_rounded, bins = 20);\nplt.title('Distribution of Average Temperatures in Austria (1995-2019)')\nplt.xlabel('Average Temperature (\u00b0C)')\nax.axes.yaxis.set_ticklabels([]);","9dba36be":"plt.figure(figsize=(20,8))\nsns.lineplot(x = 'Year', y = 'AvgTempCelsius_rounded2', data = df_austria , palette='hsv')\nplt.title('Average Temperatures in Austria')\nplt.ylabel('Average Temperature (\u00b0C)')\nplt.xlabel('')\nplt.xticks(range(1995,2020))\nplt.show()","86b0b452":"years = df_austria.Year.unique().tolist()\nyears = [str(year) for year in years]","9e0df758":"plt.figure(figsize=(20,8))\nsns.lineplot(x = 'Month', y = 'AvgTempCelsius_rounded2', data = df_austria , palette='hsv')\nplt.title('Average Monthly Temperatures in Austria (1995-2019)')\nplt.ylabel('Average Temperature (\u00b0C)')\nplt.xlabel('Month')\nplt.xticks(range(1,13))\nplt.show();","091c622e":"months = ['January', 'February', 'March', 'April', 'May', 'June', \n          'July', 'August', 'September', 'October', 'November', 'December']","99656443":"fig = plt.subplots(3,4, figsize = (15,8))\nfor i in range(1,13): \n    ax = plt.subplot(3, 4, i)\n    sns.lineplot(x = 'Day', y = 'AvgTempCelsius_rounded2', data = df_austria[df_austria.Month == i] , palette='hsv')\n    ax.title.set_text(months[i-1])\n    ax.set_ylim((-5,25))\n    ax.set_xlabel('')\n    ax.set_ylabel('')\nplt.suptitle('Monthly Temperatures in Austria (1995-2019)', y = 1.05)\n#plt.ylabel('Average Temperature (\u00b0C)')\nplt.tight_layout()\nplt.show();","ec49871d":"austria_pivoted = pd.pivot_table(data= df_austria,\n                    index='Month',\n                    values='AvgTempCelsius_rounded2',\n                    columns='Year')","37de9a82":"plt.figure(figsize=(20, 8))\nsns.heatmap(data = austria_pivoted, cmap='coolwarm', annot = True, fmt=\".1f\")\nplt.ylabel('Month')\nplt.xlabel('')\nplt.title('Average Temperatures in Austria (\u00b0C)')\nplt.show();","a6268536":"This exploratory analysis looks at global temperatures between 1995 and 2019 and explores Europe and Austria in more detail.\n\nData from: https:\/\/www.kaggle.com\/sudalairajkumar\/daily-temperature-of-major-cities","0d83cff9":"#### AVERAGE TEMPERATURE IN EUROPE OVER TIME ","9f5205e3":"#### AVERAGE TEMPERATURE IN DIFFERENT EUROPEAN COUNTRIES","34e2b912":"First of all, there are some ambiguous year values in the dataframe, so I drop them. I also drop all data from the year 2020, since there is no data available for the whole year yet.","497392ae":"#### YEARLY AVERAGE TEMPERATURE IN AUSTRIA OVER TIME","0beb0bae":"#### MONTHLY AVERAGE TEMPERATURE IN AUSTRIA (DETAILED)","91383df1":"#### MONTHLY AVERAGE TEMPERATURE IN AUSTRIA","2ea553ce":"#### AVERAGE TEMPERATURE OF DIFFERENT REGIONS OVER TIME","8f238c91":"First, I convert the data type of some of the columns. Month and Day are converted from int64 to int 8 (as they only take on a max. value of 12 and 31, respectively), Year is converted from int64 to int16 (only takes on a max. values of 2020), and AvgTemperature is converted from float64 to float16.","00b37a10":"## Memory usage","0f742f7f":"#### DISTRIBUTION OF TEMPERATURES IN DIFFERENT EUROPEAN COUNTRIES","7785f4dc":"#### DISTRIBUTION OF TEMPERATURES IN AUSTRIA","a3085d79":"Since I have a better intuition for temperatures in Celsius, I convert them.","2a50aed1":"#### TOP 10 HOTTEST COUNTRIES","9e4427e6":"Finally, I round the temperatures in tow different way, once with two and once with one decimal.","9adc5287":"## Analysis","4a139a05":"#### MONTHLY GLOBAL AVERAGE TEMPERATURE OVER TIME","f25ec2c6":"#### DISTRIBUTION OF TEMPERATURES IN EUROPE IN 2019","29cf582e":"#### AVERAGE TEMPERATURE OF DIFFERENT REGIONS","cc41e79c":"## Import","3bf2f2de":"It looks like there is a lot of data missing in Burundi, as well as in some other African, Latin American, Asian and European countries.","3ae8d135":"Having a first look at the dataframe, I see that there's information about the region, country, state (in case of the US), city, date and average temperatuer (in Fahrenheit). ","07acbc4f":"### Austria","8b70c9d9":"#### DISTRIBUTION OF  TEMPERATURES IN EUROPE","ecdcdda6":"#### DISTRIBUTION OF TEMPERATURES IN DIFFERENT REGIONS","2d175d16":"To handle any missing data, I first look at what percentage of data is missing for each country.","646374bf":"I then fill the missing values with the mean temperature of the same city and of the same date every year.","ba1c8813":"#### MONTHLY AVERAGE TEMPERATURE IN EUROPE OVER TIME","23d85186":"So for those cities, I fill the missing data with the overall mean temperature of the city","9e6869dc":"#### YEARLY GLOBAL AVERAGE TEMPERATURE OVER TIME","2aa057f6":"#### MONTHLY AVERAGE TEMPERATURE IN DIFFERENT REGIONS","b734a856":"### Europe","7f6e358d":"However, it seems that for some cities, there is so much data missing, that they may not be any recorded temperature for a given date.","b3e1bed0":"> # Daily Temperatures EDA (Global, Europe, Austria)","0952db89":"Since any missing temperatures are saved as -99, I convert them to NaN.","b6d5563c":"Next, I create a separate datetime column. However, I leave out the Day column since I do not need to work with daily temperatures. Monthly temperatures are fine and will save me some computational cost with certain plots.","67b15737":"Since the dataframe takes 767.7 MB and has almost 3 million rows, I decide to decrease its memory usage in order to be able to work with it a little bit faster.","3709bfcd":"I also drop the column State, since it only applies to the US, which I don't want to analyze in detail.","442510e8":"#### TOP 10 COLDEST COUNTRIES","1f6362bf":"#### MONTHLY AVERAGE TEMPERATURE IN AUSTRIA OVER TIME","04d44ffa":"I noticed that my computer takes quite a while to process the dataframe,so I have a look at its memory usage.","b398cfba":"### Global","53217417":"## Data cleaning\n"}}