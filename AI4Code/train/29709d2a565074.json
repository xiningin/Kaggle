{"cell_type":{"0c72d976":"code","dc014872":"code","a11c89f0":"code","be80ddde":"code","350c7a30":"code","f1b69a08":"code","5a71ce63":"code","de786504":"code","f84114c2":"markdown","d92ff456":"markdown","49bdd47f":"markdown","d6bf43c6":"markdown","03a6a7b8":"markdown","f2c2cd6d":"markdown","f93497c5":"markdown","5be171a7":"markdown"},"source":{"0c72d976":"import pandas as pd\nimport glob,os\nfrom osgeo import gdal\nimport cv2\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport numpy as np\nfrom PIL import Image as PILImage\nfrom IPython.display import Image\nplt.rcParams[\"figure.figsize\"] = (30,20)","dc014872":"def decode_mask(mask):\n    pixels = mask.T.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)","a11c89f0":"\"\"\"\ndef erosion(m,s = 5):\n    m6 = np.zeros_like(m)\n    size = s\/\/2\n    for i in range(size,m.shape[0]-size):\n        for j in range(size,m.shape[1]-size):\n            if m[i-size:i+size+1,j-size:j+size+1].sum() == s**2:\n                m6[i,j] = 1\n    return m6\n\ndef extension(m,size = 5):\n    m6 = np.zeros_like(m)\n    size = size\/\/2\n    for i in range(size,m.shape[0]-size):\n        for j in range(size,m.shape[1]-size):\n            if m[i,j] == 1:\n                m6[i-size:i+size+1,j-size:j+size+1] = 1\n    return m6\n\"\"\"    ","be80ddde":"filename = 'KV1_20170922_SCN9_UN9__KV5_20190912_SCN9_UN10'\nds = gdal.Open('..\/input\/roscosmos-rucode\/Images_composit\/Images_composit\/8_ch\/'+filename+'.tif')\nmask = gdal.Open('..\/input\/roscosmos-rucode\/mask\/mask\/'+filename+'.tif')","350c7a30":"mask = mask.GetRasterBand(1).ReadAsArray()\n\nR1 = ds.GetRasterBand(1).ReadAsArray()\nR1 = R1\/R1.mean()\nG1 = ds.GetRasterBand(2).ReadAsArray()\nG1 = G1\/G1.mean()\nB1 = ds.GetRasterBand(3).ReadAsArray()\nB1 = B1\/B1.mean()\nI1 = ds.GetRasterBand(4).ReadAsArray()\nI1 = I1\/I1.mean()\n\nimage1 = R1+G1+B1+I1\nimage1 = image1\/image1.max()\nimage_rgb1 = np.array([R1,G1,B1]).transpose(1, 2, 0)\nimage_rgb1 = image_rgb1\/image_rgb1.max()\nI1 = I1\/I1.max()\n\nR2 = ds.GetRasterBand(5).ReadAsArray()\nR2 = R2\/R2.mean()\nG2 = ds.GetRasterBand(6).ReadAsArray()\nG2 = G2\/G2.mean()\nB2 = ds.GetRasterBand(7).ReadAsArray()\nB2 = B2\/B2.mean()\nI2 = ds.GetRasterBand(8).ReadAsArray()\nI2 = I2\/I2.mean()\n\nimage2 = R2+G2+B2+I2\nimage2 = image2\/image2.max()\nimage_rgb2 = np.array([R2,G2,B2]).transpose(1, 2, 0)\nimage_rgb2 = image_rgb2\/image_rgb2.max()\nI2 = I2\/I2.max()","f1b69a08":"Image_I1 = PILImage.fromarray(np.uint8(I1*255))\nImage_I2 = PILImage.fromarray(np.uint8(I2*255))\nImage_rgb1 = PILImage.fromarray(np.uint8(image_rgb1*255))\nImage_rgb2 = PILImage.fromarray(np.uint8(image_rgb2*255))\nImage_grey1 = PILImage.fromarray(np.uint8(image1\/image1.max()*255))\nImage_grey2 = PILImage.fromarray(np.uint8(image2\/image2.max()*255))\nImage_mask = PILImage.fromarray(np.uint8(mask*255))\nImage_I1.save('gif.gif',\n                      save_all=True,append_images=[Image_I2,Image_mask,Image_grey1,Image_grey2,Image_mask,Image_rgb1,Image_rgb2,Image_mask,Image_I1],\n                      loop=2,\n                      duration=500)","5a71ce63":"Image(open('gif.gif','rb').read())","de786504":"s = {}\ndataset = glob.glob(os.path.join('..\/input\/roscosmos-rucode\/Images_composit\/Images_composit\/8_ch\/', '*.tif'), recursive=True)\ntrain = os.listdir('..\/input\/roscosmos-rucode\/mask\/mask\/')\nfor filename in dataset:\n\n    ds = gdal.Open(filename)\n    filename = filename.split('\/')[6]\n    if filename in train:\n        continue    \n    filename = filename[:-4]\n\n    R1 = ds.GetRasterBand(1).ReadAsArray()\n    R1 = R1\/R1.mean()\n    G1 = ds.GetRasterBand(2).ReadAsArray()\n    G1 = G1\/G1.mean()\n    B1 = ds.GetRasterBand(3).ReadAsArray()\n    B1 = B1\/B1.mean()\n    I1 = ds.GetRasterBand(4).ReadAsArray()\n    I1 = I1\/I1.mean()\n    m1 = R1+G1+B1+I1\n    m1 = m1\/m1.max()\n    R2 = ds.GetRasterBand(5).ReadAsArray()\n    R2 = R2\/R2.mean()\n    G2 = ds.GetRasterBand(6).ReadAsArray()\n    G2 = G2\/G2.mean()\n    B2 = ds.GetRasterBand(7).ReadAsArray()\n    B2 = B2\/B2.mean()\n    I2 = ds.GetRasterBand(8).ReadAsArray()\n    I2 = I2\/I2.mean()\n    m2 = R2+G2+B2+I2\n    m2 = m2\/m2.max()\n    m3 = (m2-m1)\n    m3[m3<0] = 0\n    m3 = m3\/m3.max()\n\n    m3[m3<0.2] = 0\n    m3[m3>0] = 1\n    \n    #m3 = erosion(m3,3)\n    #m3 = extension(m3,3)\n    kernel = np.ones((3,3),np.uint8)\n    m3 = cv2.erode(m3,kernel,iterations = 1)\n    m3 = cv2.dilate(m3,kernel,iterations = 1)    \n    \n    s[filename] = decode_mask(m3)\ndata = pd.DataFrame.from_dict(s, orient='index').reset_index()\ndata.columns = ['Id','mask']\ndata.to_csv(\"submission.csv\",index=False)","f84114c2":"# \u042d\u0440\u043e\u0437\u0438\u044f \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435. \u041b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c cv2.erode \u0438 cv2.dilate","d92ff456":"# \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","49bdd47f":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u043e\u043a","d6bf43c6":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0433\u0438\u0444\u043a\u0443","03a6a7b8":"# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430","f2c2cd6d":"# \u0411\u0435\u0440\u0443 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u0430\u043d\u0430\u043b\u044b","f93497c5":"# \u041f\u0440\u043e\u0439\u0434\u0435\u043c\u0441\u044f \u043f\u043e\u0440\u043e\u0433\u043e\u043c \u043f\u043e \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439","5be171a7":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0433\u0438\u0444\u043a\u0443"}}