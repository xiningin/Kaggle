{"cell_type":{"434546c5":"code","27a31c99":"code","9d23f7eb":"code","4e40dd6e":"code","aac9c871":"code","a0f716c8":"code","822ac2a2":"code","34c22420":"code","5cc52e4f":"code","3f670282":"code","1f80ade0":"code","7db9e3f3":"code","ab423c55":"code","389104bf":"code","4b83a176":"code","99567795":"code","6f12724f":"code","60183136":"code","b0c3b8ff":"code","f84367ab":"code","c8eb9300":"code","efefc254":"code","ba4f831a":"code","b34a3371":"code","d9ac7401":"code","c795a205":"code","ef8138e7":"code","6715f401":"code","0f41fd9a":"code","002ff559":"code","864b0569":"code","e12e47fc":"code","4edbda0c":"code","4954dbf9":"code","19694ab9":"code","371da7b0":"code","0716717a":"code","371a6092":"markdown"},"source":{"434546c5":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import export_graphviz\nfrom IPython.display import Image\nfrom subprocess import call","27a31c99":"train_data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')\ntrain_data['Type'] = 'train'\ntest_data['Type'] = 'test'","9d23f7eb":"explr_data = train_data.append(test_data)","4e40dd6e":"explr_data.head()","aac9c871":"n_row = explr_data.shape[0]\nfor col in explr_data.columns:\n    print(col, explr_data[col].isna().sum()\/n_row*100)","a0f716c8":"explr_data = explr_data.drop(columns=['Cabin'])","822ac2a2":"explr_data['Sex'] = explr_data['Sex'].replace('male', 1).replace('female', 0)","34c22420":"explr_data['family_size'] = explr_data['Parch'] + explr_data['SibSp'] + 1","5cc52e4f":"explr_data['family_size'].plot(kind='hist')","3f670282":"explr_data['family'] = 'Alone'\nexplr_data.loc[explr_data['family_size'] > 1, 'family'] = 'Small'\nexplr_data.loc[explr_data['family_size'] > 4, 'family'] = 'Big'","1f80ade0":"explr_data = explr_data.drop(columns=['Parch', 'SibSp', 'family_size'])","7db9e3f3":"explr_data['family'].value_counts().plot(kind='bar')","ab423c55":"explr_data = pd.concat([explr_data, pd.get_dummies(explr_data['family'], drop_first=True)], axis=1)\nexplr_data = explr_data.drop(['family'], axis=1) ","389104bf":"explr_data['Title'] = explr_data['Name'].str.extract('([A-Za-z]+)\\.', expand=True)\nexplr_data = explr_data.drop('Name', axis=1)","4b83a176":"mapping = {'Mlle': 'Miss', \n           'Ms': 'Miss', \n           'Mme': 'Mrs',\n           'Major': 'Other', \n           'Col': 'Other', \n           'Dr' : 'Other', \n           'Rev' : 'Other',\n           'Capt': 'Other', \n           'Jonkheer': 'Royal',\n           'Sir': 'Royal', \n           'Lady': 'Royal', \n           'Don': 'Royal',\n           'Countess': 'Royal', \n           'Dona': 'Royal'}\nexplr_data.replace({'Title': mapping}, inplace=True)\ntitles = ['Miss', 'Mr', 'Mrs', 'Royal', 'Other', 'Master']","99567795":"for title in titles:\n    explr_data.loc[explr_data['Title'] == title, 'Age'].plot(kind='density', title='Age, Title='+title)\n    plt.show()","6f12724f":"median_age = explr_data[['Age', 'Title']].groupby(['Title']).median()","60183136":"age_mask = explr_data['Age'].isna()\nexplr_data.loc[age_mask, 'Age'] = median_age.loc[explr_data.loc[age_mask, 'Title'], 'Age'].tolist()","b0c3b8ff":"explr_data['Age'].plot(kind='density')","f84367ab":"explr_data['Fare'].plot(kind='hist')","c8eb9300":"avg_fare = explr_data.loc[explr_data['Pclass'] == 3, 'Fare'].mean()","efefc254":"explr_data.loc[explr_data['Fare'].isna(), 'Fare'] = avg_fare","ba4f831a":"n_row = explr_data.shape[0]\nfor col in explr_data.columns:\n    print(col, explr_data[col].isna().sum()\/n_row*100)","b34a3371":"explr_data.loc[:, 'Child'] = 1\nexplr_data.loc[explr_data['Age']>=18, 'Child'] = 0","d9ac7401":"explr_data = explr_data.drop(['Age'], axis=1)","c795a205":"explr_data.head()","ef8138e7":"explr_data = explr_data.drop(['Title', 'Ticket'], axis=1)","6715f401":"embarked_dummy = pd.get_dummies(explr_data['Embarked'], drop_first=True)\nexplr_data = pd.concat([explr_data, embarked_dummy], axis=1)","0f41fd9a":"train_data = explr_data.loc[explr_data['Type'] == 'train',]\ntest_data = explr_data.loc[explr_data['Type'] == 'test',]","002ff559":"train_data = train_data.drop(['Type', 'Embarked'],axis=1)\ntest_data = test_data.drop(['Type', 'Embarked'], axis=1)","864b0569":"train_col_list = ['Fare', 'Pclass', 'Sex', 'Big', 'Small', 'Child', 'Q', 'S']","e12e47fc":"X_train, X_val, y_train, y_val = train_test_split(train_data[train_col_list], train_data['Survived'], test_size=0.2)","4edbda0c":"model1 = RandomForestClassifier(random_state=2, min_samples_leaf=10)\nmodel1.fit(X_train, y_train)\nprint(accuracy_score(y_val, model1.predict(X_val)))","4954dbf9":"export_graphviz(model1.estimators_[5], out_file='tree.dot',\n               feature_names=X_train.columns,\n               class_names=list(y_train.unique().astype(str)),\n               rounded=True, proportion=False,\n               precision=2, filled=True)\ncall(['dot', '-Tpng', 'tree.dot', '-o', 'tree.png'])\nImage(filename='tree.png')","19694ab9":"model1.fit(X_val[train_col_list], y_val)\ny_pred = pd.Series(data=model1.predict(test_data[train_col_list]).astype(int), name='Survived')\nrfc_submission = pd.concat([test_data['PassengerId'], y_pred], axis=1)\nrfc_submission.to_csv('rfc_submission.csv', index=False)","371da7b0":"model2 = LogisticRegression()\nmodel2.fit(X_train, y_train)\nprint(accuracy_score(y_val, model2.predict(X_val)))","0716717a":"model2.fit(X_val[train_col_list], y_val)\ny_pred2 = pd.Series(data=model2.predict(test_data[train_col_list]).astype(int), name='Survived')\nlgr_submission = pd.concat([test_data['PassengerId'], y_pred2], axis=1)\nlgr_submission.to_csv('lgr_submission.csv', index=False)","371a6092":"## RandomForestClassifier"}}