{"cell_type":{"45b2edec":"code","2a2f54e9":"code","7c2334ed":"code","98544cb4":"code","11497a26":"code","d57d3791":"code","b17d5f7b":"code","7212cae1":"code","7cc95080":"code","256735a4":"code","c0d1894f":"markdown","060cdf52":"markdown"},"source":{"45b2edec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a2f54e9":"#importing required libraries \n\nfrom keras.datasets import mnist\nimport matplotlib.pyplot as plt\nimport os\nimport PIL\nimport tensorflow as tf\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential","7c2334ed":"# example of loading the mnist dataset\n\n# load dataset\n(trainX, trainy), (testX, testy) = mnist.load_data()\n#trainX and testX has the images while trainy and testy has the labels\n# summarize loaded dataset\nprint('Train: X=%s, y=%s' % (trainX.shape, trainy.shape))\nprint('Test: X=%s, y=%s' % (testX.shape, testy.shape))\n# plot first few images\nfor i in range(9):\n\t# define subplot\n\tplt.subplot(330 + 1 + i)\n\t# plot raw pixel data\n\tplt.imshow(trainX[i], cmap=plt.get_cmap('gray'))\n# show the figure\nplt.show()","98544cb4":"#viewing the first image of the dataset\nplt.figure()\nplt.imshow(trainX[0])\nplt.colorbar()\nplt.grid(False)\nplt.show()","11497a26":"#dividing the images by 255 will make the range between 0 to 1\ntrainX = trainX \/ 255.0\ntestX = testX \/ 255.0","d57d3791":"#viewing 15 images from the dataset\nplt.figure(figsize=(15,15))\nfor i in range(15):\n    plt.subplot(5,3,i+1)\n    plt.imshow(trainX[i],cmap=plt.cm.binary)\n    \nplt.show()","b17d5f7b":"# Building the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),#this will make the image 1-D.\n    tf.keras.layers.Dense(128, activation='relu'), #Dense layer is also called as a fully connected layers with 128 units and relu activation.\n    tf.keras.layers.Dropout(0.2),#Dropout is a regularization technique. it helps the model to learn relevant information thus prevent overfitting.\n    tf.keras.layers.Dense(10) #last layer which will output 10 labels\n])","7212cae1":"model.compile(optimizer='adam', #we are using adam optimizer tho there are several other options like rmsprop and momentum\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","7cc95080":"model.fit(trainX, trainy, epochs=10)# training the model with 10 epochs","256735a4":"test_loss, test_acc = model.evaluate(testX,  testy, verbose=2)#testing our model on test dataset\n\nprint('\\nTest accuracy:', test_acc)","c0d1894f":"The pixel value currently ranges from 0 to 255. It needs to be scaled.","060cdf52":"# This is my first step in deep learning so I've started with Mnist dataset to classify the handwritten digits. In this notebook I've explained the the model and just predicted the labels. \n\n# Hope you learn something out of it\n\n# Cheers!"}}