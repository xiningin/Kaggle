{"cell_type":{"1f70050d":"code","4297cbe2":"code","0c44efa1":"code","23d58f5c":"code","00f7d5bf":"code","ab6f74da":"code","cef169fd":"code","ad6008f4":"code","7dedce52":"code","f14f566a":"code","10b4be2f":"code","fe1fbc4c":"code","86407f79":"code","d9addeda":"code","830aa14d":"code","4b05b4c8":"markdown","0449b9e5":"markdown","63f61d6e":"markdown","54077717":"markdown","cb97b64b":"markdown","5cf0c3ee":"markdown","4929ce03":"markdown","061c2b6d":"markdown","d100b6f9":"markdown","dda39721":"markdown","2033eee0":"markdown","d3ade036":"markdown","1c64f18d":"markdown","2b79b6a0":"markdown","164013b2":"markdown","40cb51d2":"markdown","faa4f152":"markdown","31fd3888":"markdown","56c0ec97":"markdown","5071a91b":"markdown"},"source":{"1f70050d":"print(\"You've successfully run some Python code\")\nprint(\"Congratulations!\")","4297cbe2":"from learntools.core import binder; binder.bind(globals())\nfrom learntools.python.ex1 import *\nprint(\"Setup complete! You're ready to start question 0.\")","0c44efa1":"# create a variable called color with an appropriate value on the line below\n# (Remember, strings in Python must be enclosed in 'single' or \"double\" quotes)\ncolor=\"Blue\"\n\n# Check your answer\nq0.check()","23d58f5c":"pi = 3.14159 # approximate\ndiameter = 3\n\n# Create a variable called 'radius' equal to half the diameter\nradius=diameter\/2\n\n# Create a variable called 'area', using the formula for the area of a circle: pi times the radius squared\narea=pi*radius**2\n# Check your answer\nq1.check()","00f7d5bf":"########### Setup code - don't touch this part ######################\n# If you're curious, these are examples of lists. We'll talk about \n# them in depth a few lessons from now. For now, just know that they're\n# yet another type of Python object, like int or float.\na = [1, 2, 3]\nb = [3, 2, 1]\nq2.store_original_ids()\na,b=b,a\n\n# Your code goes here. Swap the values to which a and b refer.\n# If you get stuck, you can always uncomment one or both of the lines in\n# the next cell for a hint, or to peek at the solution.\n\n######################################################################\n\n# Check your answer\nq2.check()","ab6f74da":"(5 - 3 )\/\/ 2","cef169fd":"(8 - 3) * (2 - (1 + 1))","ad6008f4":"# Variables representing the number of candies collected by alice, bob, and carol\nalice_candies = 121\nbob_candies = 77\ncarol_candies = 109\n#Solution:\n\n# Your code goes here! Replace the right-hand side of this assignment with an expression\n# involving alice_candies, bob_candies, and carol_candies\nto_smash = (alice_candies + bob_candies + carol_candies) % 3\n\n# Check your answer\nq4.check()","7dedce52":"# SETUP. You don't need to worry for now about what this code does or how it works.\nfrom learntools.core import binder; binder.bind(globals())\nfrom learntools.python.ex2 import *\nprint('Setup complete.')","f14f566a":"import numpy as np\ndef round_to_two_places(num):\n    \n    return round(num,2)\n    # Replace this body with your own code.\n    # (\"pass\" is a keyword that does literally nothing. We used it as a placeholder\n    # because after we begin a code block, Python requires at least one line of code)\n    pass\n\n# Check your answer\nq1.check()","10b4be2f":"# Put your test code here\nimport numpy as np\ndef round_to_two_places(num):\n    \n    #return round(num,2)\n    return round(num,ndigits=-1)\n    # Replace this body with your own code.\n    # (\"pass\" is a keyword that does literally nothing. We used it as a placeholder\n    # because after we begin a code block, Python requires at least one line of code)\n    pass\n","fe1fbc4c":"def to_smash(total_candies, n_friends=3):\n    \"\"\"Return the number of leftover candies that must be smashed after distributing\n    the given number of candies evenly between 3 friends.\n    \n    >>> to_smash(91)\n    1\n    \"\"\"\n    return total_candies % n_friends\n    return total_candies % 3\n\n# Check your answer\nq3.check()","86407f79":"round(9.9999,2)","d9addeda":"x = -10\ny = 5\n# # Which of the two variables above has the smallest absolute value?\nsmallest_abs = min(x, y)","830aa14d":"def f(x):\n        y = abs(x)\n        return y\n\nprint(f(5))","4b05b4c8":"Can you think of a case where this would be useful?  Once you're ready, run the code cell below to see the answer and to receive credit for completing the problem.","0449b9e5":"<hr\/>\n\n# 1.\n\nComplete the code below. In case it's helpful, here is the table of available arithmetic operations:\n\n\n\n| Operator     | Name           | Description                                            |\n|--------------|----------------|--------------------------------------------------------|\n| ``a + b``    | Addition       | Sum of ``a`` and ``b``                                 |\n| ``a - b``    | Subtraction    | Difference of ``a`` and ``b``                          |\n| ``a * b``    | Multiplication | Product of ``a`` and ``b``                             |\n| ``a \/ b``    | True division  | Quotient of ``a`` and ``b``                            |\n| ``a \/\/ b``   | Floor division | Quotient of ``a`` and ``b``, removing fractional parts |\n| ``a % b``    | Modulus        | Integer remainder after division of ``a`` by ``b``     |\n| ``a ** b``   | Exponentiation | ``a`` raised to the power of ``b``                     |\n| ``-a``       | Negation       | The negative of ``a``                                  |\n\n<span style=\"display:none\"><\/span>\n","63f61d6e":"# 4. (Optional)\u00b6\nIt may not be fun, but reading and understanding error messages will be an important part of your Python career.\n\nEach code cell below contains some commented buggy code. For each cell...\n\n* Read the code and predict what you think will happen when it's run.\n* Then uncomment the code and run it to see what happens. (Tip: In the kernel editor, \n* you can highlight several lines and press ctrl+\/ to toggle commenting.)\nFix the code (so that it accomplishes its intended purpose without throwing an exception)","54077717":"Try adding another line of code in the cell above and re-running it. \n\nNow let's get a little fancier:  Add a new code cell by clicking on an existing code cell, hitting the escape key, and then hitting the `a` or `b` key.  The `a` key will add a cell above the current cell, and `b` adds a cell below.\n\nGreat! Now you know how to use Notebooks.\n\nEach hands-on exercise starts by setting up our feedback and code checking mechanism. Run the code cell below to do that. Then you'll be ready to move on to question 0.","cb97b64b":"<hr\/>\n\n# 2.\n\nAdd code to the following cell to swap variables `a` and `b` (so that `a` refers to the object previously referred to by `b` and vice versa).","5cf0c3ee":"**This notebook is an exercise in the [Python](https:\/\/www.kaggle.com\/learn\/python) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/colinmorris\/hello-python).**\n\n---\n","4929ce03":"The upcoming questions work the same way. The only thing that will change are the question numbers. For the next question, you'll call `q1.check()`, `q1.hint()`, `q1.solution()`, for question 2, you'll call `q2.check()`, and so on.","061c2b6d":"# 0.\n\n*This is a silly question intended as an introduction to the format we use for hands-on exercises throughout all Kaggle courses.*\n\n**What is your favorite color? **\n\nTo complete this question, create a variable called `color` in the cell below with an appropriate value. The function call `q0.check()` (which we've already provided in the cell below) will check your answer.","d100b6f9":"Functions are powerful. Try writing some yourself.\n\nAs before, don't forget to run the setup code below before jumping into question 1.","dda39721":"Didn't get the right answer? How do you not even know your own favorite color?!\n\nDelete the `#` in the line below to make one of the lines run. You can choose between getting a hint or the full answer by choosing which line to remove the `#` from. \n\nRemoving the `#` is called uncommenting, because it changes that line from a \"comment\" which Python doesn't run to code, which Python does run.","2033eee0":"<hr\/>\n\n# 3a.\n\nAdd parentheses to the following expression so that it evaluates to 1.","d3ade036":"<hr\/>\n\n# 4. \nAlice, Bob and Carol have agreed to pool their Halloween candy and split it evenly among themselves.\nFor the sake of their friendship, any candies left over will be smashed. For example, if they collectively\nbring home 91 candies, they'll take 30 each and smash 1.\n\nWrite an arithmetic expression below to calculate how many candies they must smash for a given haul.","1c64f18d":"# Keep Going\n\nNext up, you'll **[learn to write new functions and understand functions others write](https:\/\/www.kaggle.com\/colinmorris\/functions-and-getting-help)**. This will make you at least 10 times more productive as a Python programmer. ","2b79b6a0":"# 2.\nThe help for round says that ndigits (the second argument) may be negative. What do you think will happen when it is? Try some examples in the following cell.","164013b2":"# 3b.  <span title=\"A bit spicy\" style=\"color: darkgreen \">\ud83c\udf36\ufe0f<\/span>\n\n<small>Questions, like this one, marked a spicy pepper are a bit harder.<\/small>\n\nAdd parentheses to the following expression so that it evaluates to 0.","40cb51d2":"# day -2","faa4f152":"# 1.\n\nComplete the body of the following function according to its docstring.\n\nHINT: Python has a built-in function `round`.","31fd3888":"## **for titanic solution visit**  [titanic_top_solution](https:\/\/www.kaggle.com\/vipin20\/titanic-prediction-eda-hyperparameter-top-10)","56c0ec97":"# 3.\nIn the previous exercise, the candy-sharing friends Alice, Bob and Carol tried to split candies evenly. For the sake of their friendship, any candies left over would be smashed. For example, if they collectively bring home 91 candies, they'll take 30 each and smash 1.\n\nBelow is a simple function that will calculate the number of candies to smash for any number of total candies.\n\nModify it so that it optionally takes a second argument representing the number of friends the candies are being split between. If no second argument is provided, it should assume 3 friends, as before.\n\nUpdate the docstring to reflect this new behaviour.","5071a91b":"# Day -1"}}