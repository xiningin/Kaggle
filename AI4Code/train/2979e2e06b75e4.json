{"cell_type":{"31cd8d2d":"code","d9a35636":"code","ea793f36":"code","884e281e":"code","30b20ad0":"code","48dbd165":"code","e8fb96bb":"code","c936bde6":"code","b34c6218":"code","3bd41f13":"code","1a4edf67":"code","01955f7e":"code","db748af8":"code","08f7b6e8":"code","15ef6b0b":"code","7f715530":"code","4d662f86":"code","51f24fb8":"code","f278752b":"code","7bf93810":"code","20933b85":"code","e7ea5efd":"code","4ddef967":"code","3fcfff7f":"code","8159c0c4":"code","1fc35d08":"code","e34dbcae":"code","b318bac3":"code","1ee991e2":"code","cb589f8d":"code","46b6c5b3":"code","656455d3":"code","dd9b96b9":"code","4e61466e":"code","ba7de745":"code","ad18b5d0":"code","fbcafec5":"code","145c35c2":"code","658f6c96":"code","fab93eae":"code","598c0361":"code","2a05d3f0":"code","1ae09f51":"markdown","b253e8cb":"markdown","59ce6fc0":"markdown","69f39668":"markdown","5b5716e6":"markdown","b53c2e24":"markdown","8506b12c":"markdown","c23af2ee":"markdown","f07f1dd7":"markdown","ea3b8dca":"markdown","73e1b529":"markdown"},"source":{"31cd8d2d":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import cross_val_score\nimport sklearn\nfrom sklearn.ensemble import RandomForestRegressor\n# import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","d9a35636":"train_filepath = '..\/input\/titanic\/train.csv'\ntest_filepath = '..\/input\/titanic\/test.csv'","ea793f36":"X_train = pd.read_csv(train_filepath)\nX_test = pd.read_csv(train_filepath)","884e281e":"X_train.head()","30b20ad0":"y_train = X_train['Survived']\nreduced_X_train = X_train.drop(['Survived'], axis=1)","48dbd165":"# reduced_X_train = reduced_X_train.fillna('')\nreduced_X_train.head()","e8fb96bb":"reduced_X_train.describe()","c936bde6":"reduced_X_train['ExtFamily'] = reduced_X_train['Parch'] + reduced_X_train['SibSp']\nsns.jointplot(x=reduced_X_train['ExtFamily'], y=y_train, kind='kde')","b34c6218":"missing_val_count_by_column = ( reduced_X_train.isnull().sum() )\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","3bd41f13":"reduced_X_train.dtypes","1a4edf67":"X_train.dtypes","01955f7e":"reduced_X_train = reduced_X_train.drop('Cabin', axis=1)\nreduced_X_train['Age'] = reduced_X_train['Age'].fillna(reduced_X_train['Age'].mean())\nreduced_X_train['Embarked'] = reduced_X_train['Embarked'].fillna(reduced_X_train['Embarked'].value_counts().max())","db748af8":"missing_val_count_by_column = ( reduced_X_train.isnull().sum() )\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","08f7b6e8":"reduced_X_train.head()","15ef6b0b":"reduced_X_train['Embarked'].value_counts()","7f715530":"reduced_X_train.loc[reduced_X_train['Embarked']==644, 'Embarked'] = 'S'\nreduced_X_train['Embarked'].value_counts()\n","4d662f86":"def get_prefix(name):\n    \"\"\"Scans a string for an honorary prefix and returns it if present\n       otherwise returns None\n       \n       name: string, name in format: 'Braund, Mr. Owen Harris'\n       \n       returns: string\n    \"\"\"\n    m = name.find(',')\n    n = name.find(' ', m+2)\n    \n    return name[m+1: n].strip()","51f24fb8":"print(f\"Unaltered name is: {reduced_X_train['Name'][0]}\")\nprint(f\"Prefix is: {get_prefix(reduced_X_train['Name'][0])}\")","f278752b":"reduced_X_train['Prefix'] = reduced_X_train['Name'].apply(get_prefix)","7bf93810":"reduced_X_train['Prefix'].value_counts()","20933b85":"honorary_prefixes = ['Dr.', 'Rev.', 'Col.', 'Major.', 'Don.', 'Capt.', 'Sir.', 'Jonkheer.', 'Lady.']\nhonorific = [1 if prefix in honorary_prefixes else 0 for prefix in reduced_X_train['Prefix'] ]\nreduced_X_train['Honorific'] = honorific","e7ea5efd":"reduced_X_train = reduced_X_train.drop(['Prefix', 'Name', 'Ticket', 'PassengerId'], axis=1)\nreduced_X_train.head()","4ddef967":"sns.catplot(x='Pclass', y='Age', hue='Sex', kind='swarm', data=X_train)","3fcfff7f":"sns.catplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", kind=\"bar\", data=X_train)","8159c0c4":"sns.catplot(x=\"Embarked\", y=\"Survived\", hue=\"Pclass\", kind=\"bar\", data=X_train)","1fc35d08":"sns.distplot(a=reduced_X_train['Fare'], kde=False)","e34dbcae":"\nfare_bins = [0, 50, 100, 200, np.inf]\nfare_intervals = pd.IntervalIndex.from_tuples([(fare_bins[x], fare_bins[x+1]) for x in range(len(fare_bins)-1)]) \nfare_labels = ['Fare'+'_'+f'{int(x[0])}-{int(x[1])}' if x[1] != np.inf else 'Fare'+'_'+ f'Over_{int(x[0])}' for x in fare_intervals.to_tuples()]\nreduced_X_train['FaresCat'] = pd.cut(reduced_X_train['Fare'], bins=fare_bins, labels=fare_labels)\nreduced_X_train.head()\n# reduced_X_train['Fare'].describe()","b318bac3":"sns.histplot(reduced_X_train['Age'], bins=8)","1ee991e2":"age_bins = list(range(0, 80, 10))\nage_bins.append(np.inf)\nprint(age_bins)","cb589f8d":"age_intervals = pd.IntervalIndex.from_tuples([(age_bins[x], age_bins[x+1]) for x in range(len(age_bins)-1)]) \nage_labels = ['Age'+'_'+f'{int(x[0])}-{int(x[1])}' if x[1] != np.inf else 'Age'+'_'+f'Over_{int(x[0])}' for x in age_intervals.to_tuples()]\nreduced_X_train['AgeCat'] = pd.cut(reduced_X_train['Age'], bins=age_bins, labels=age_labels)\n","46b6c5b3":"parch_bins = [0, 1, 2, np.inf]\nparch_intervals = pd.IntervalIndex.from_tuples([(parch_bins[x], parch_bins[x+1]) for x in range(len(parch_bins)-1)]) \nparch_labels = ['Parch'+'_'+f'{int(x[0])}-{int(x[1])}' if x[1] != np.inf else 'Parch'+'_'+f'Over_{int(x[0])}' for x in parch_intervals.to_tuples()]\nreduced_X_train['ParchCat'] = pd.cut(reduced_X_train['Parch'], bins=parch_bins, labels=parch_labels)\n\nsibsp_bins = [0, 1, 2, np.inf]\nsibsp_intervals = pd.IntervalIndex.from_tuples([(sibsp_bins[x], sibsp_bins[x+1]) for x in range(len(sibsp_bins)-1)]) \nsibsp_labels = ['SibSp'+'_'+f'{int(x[0])}-{int(x[1])}' if x[1] != np.inf else 'SibSp'+'_'+f'Over_{int(x[0])}' for x in sibsp_intervals.to_tuples()]\nreduced_X_train['SibSpCat'] = pd.cut(reduced_X_train['SibSp'], bins=sibsp_bins, labels=sibsp_labels)\n\nextended_bins = [0, 1, 2, 3, np.inf]\nextended_intervals = pd.IntervalIndex.from_tuples([(extended_bins[x], extended_bins[x+1]) for x in range(len(extended_bins)-1)]) \nextended_labels = ['ExtFamily'+'_'+f'{int(x[0])}-{int(x[1])}' if x[1] != np.inf else 'ExtFamily'+'_'+f'Over_{int(x[0])}' for x in extended_intervals.to_tuples()]\nreduced_X_train['ExtFamilyCat'] = pd.cut(reduced_X_train['ExtFamily'], bins=extended_bins, labels=extended_labels)\n\nreduced_X_train.head()","656455d3":"OH_train = pd.get_dummies(reduced_X_train, columns=['Sex'], drop_first=True)\nOH_train = pd.get_dummies(OH_train, columns=['Pclass', 'Embarked', 'ParchCat', 'SibSpCat', 'FaresCat', 'AgeCat', 'ExtFamilyCat'])\nOH_train = OH_train.drop(['Age', 'Fare', 'Parch', 'SibSp', 'ExtFamily'], axis=1)\nOH_train.head()","dd9b96b9":"model = XGBRegressor(n_estimators=1000, learning_rate=0.01)\n","4e61466e":"X_test = pd.read_csv(test_filepath)\nX_test.describe()","ba7de745":"missing_test_val_count_by_column = ( X_test.isnull().sum() )\nprint(missing_test_val_count_by_column[missing_test_val_count_by_column > 0])","ad18b5d0":"X_test['Embarked'].value_counts()","fbcafec5":"reduced_X_test = X_test.drop('Cabin', axis=1)\nreduced_X_test['Age'] = reduced_X_test['Age'].fillna(X_train['Age'].mean())\nreduced_X_test['Embarked'] = reduced_X_test['Embarked'].fillna(X_train['Embarked'].value_counts().max())\nreduced_X_test.loc[reduced_X_test['Embarked']==644, 'Embarked'] = 'S'\nreduced_X_test['ExtFamily'] = reduced_X_test['Parch'] + reduced_X_test['SibSp']\n\nreduced_X_test['Prefix'] = reduced_X_test['Name'].apply(get_prefix)\nhonorific_test = [1 if prefix in honorary_prefixes else 0 for prefix in reduced_X_test['Prefix'] ]\nreduced_X_test['Honorific'] = honorific_test\nreduced_X_test = reduced_X_test.drop(['Prefix', 'Name', 'Ticket', 'PassengerId'], axis=1)\nreduced_X_test['FaresCat'] = pd.cut(reduced_X_test['Fare'], bins=fare_bins, labels=fare_labels)\nreduced_X_test['AgeCat'] = pd.cut(reduced_X_test['Age'], bins=age_bins, labels=age_labels)\nreduced_X_test['ParchCat'] = pd.cut(reduced_X_test['Parch'], bins=parch_bins, labels=parch_labels)\nreduced_X_test['SibSpCat'] = pd.cut(reduced_X_test['SibSp'], bins=sibsp_bins, labels=sibsp_labels)\nreduced_X_test['ExtFamilyCat'] = pd.cut(reduced_X_test['ExtFamily'], bins=extended_bins, labels=extended_labels)\n\nOH_test = pd.get_dummies(reduced_X_test, columns=['Sex'], drop_first=True)\nOH_test = pd.get_dummies(OH_test, columns=['Pclass', 'Embarked', 'ParchCat', 'SibSpCat', 'FaresCat', 'AgeCat', 'ExtFamilyCat'])\nOH_test = OH_test.drop(['Age', 'Fare', 'Parch', 'SibSp', 'ExtFamily'], axis=1)\n","145c35c2":"OH_test.head()","658f6c96":"model.fit(OH_train, y_train)","fab93eae":"preds = model.predict(OH_test)","598c0361":"THRESHOLD = 0.5\n\npreds[preds>THRESHOLD] = 1\npreds[preds<=THRESHOLD] = 0\npreds = preds.astype(int)\nprint(preds)","2a05d3f0":"output = pd.DataFrame({'PassengerId': X_test.PassengerId, 'Survived': preds})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","1ae09f51":"# Remove the Survived column and store it as y_train","b253e8cb":"# Create One-Hot features from all the categorical ones","59ce6fc0":"# Define Filepaths for input \/ output data and load them ","69f39668":"# Split the fare prices in ranges","5b5716e6":"# Drop the Cabin feature as irrelevant (very few entries) and fill empty values in the Age and Embarked features","b53c2e24":"# Create an Extended Family column (Parch + SibSp)","8506b12c":"# Create a Prefix feature that is 1 if a passenger has an honorific prefix (Sir., Lady. etc.) and 0 if not","c23af2ee":"# XGBoost","f07f1dd7":"# Split the number of relatives in the Parch, SibSp and ExtFamily features to bins","ea3b8dca":"# Split the Ages in ranges","73e1b529":"# Perform to the test set the same feature analysis as in the train set"}}