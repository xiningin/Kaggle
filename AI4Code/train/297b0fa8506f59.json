{"cell_type":{"120ab75a":"code","1fbaa5b7":"code","9468623c":"code","ef793f52":"code","c0476249":"code","ca1032bf":"code","05422398":"code","0449dfd7":"code","f7fc814b":"code","a66d97a0":"code","9c08d6a0":"code","d4663ee3":"code","da0b9c58":"code","1844fd20":"code","a5efdcf2":"code","f1d9bd76":"code","d742408d":"code","4eb58fe3":"code","d424472e":"code","d1900127":"code","0badac62":"code","af12bb0a":"code","f814906c":"code","c9277e42":"code","91c1d4f3":"code","e0d53c9e":"code","ee7654f9":"code","153bedb8":"markdown","81f632fb":"markdown","7d342827":"markdown","a0107714":"markdown","5f34e924":"markdown","ac061a0f":"markdown","cd106bf9":"markdown","571d0582":"markdown","51d24c60":"markdown","85e574ba":"markdown","4491bff5":"markdown","40f0c389":"markdown","ba1cd710":"markdown","0c9cfae8":"markdown","872b54b5":"markdown","ef67c378":"markdown"},"source":{"120ab75a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1fbaa5b7":"# import libraries \nimport pandas as pd # Import Pandas for data manipulation using dataframes\nimport numpy as np # Import Numpy for data statistical analysis \nimport matplotlib.pyplot as plt # Import matplotlib for data visualisation\nimport random\nimport seaborn as sns\nfrom fbprophet import Prophet\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go","9468623c":"print(os.getcwd())\nprint(os.path.abspath('..\/input'))\ntrain_data=pd.read_csv('\/kaggle\/input\/demand-forecasting-kernels-only\/train.csv',parse_dates=['date'])","ef793f52":"print(train_data.info())\nprint(train_data.describe())\n","c0476249":"train_data.isnull().sum()","ca1032bf":"train_data=train_data.sort_values(['date'])\ntrain_data","05422398":"# plotting using plt\nplt.figure(figsize=(10,8))\nplt.plot(train_data['date'],train_data['sales'])\nplt.grid()\nplt.show()","0449dfd7":"#plotting using go\npy.iplot([go.Scatter(x=train_data.date,y=train_data.sales)])","f7fc814b":"sales_vs_item=train_data[['item','sales']]\nsales_vs_item.set_index('item',inplace=True)\n\n\nplt.figure(figsize=(15,10))\nsns.distplot(sales_vs_item['sales'])\n# maximum no of products  lies between 30 to 50","a66d97a0":"data=sales_vs_item.groupby(['item']).mean()\nplt.figure(figsize=(20,10))\nsns.barplot(data.index,data['sales'])","9c08d6a0":"indexed_data=train_data.set_index(['date','store','item'])\nindexed_data","d4663ee3":"# Sales trend over the months and year\ntrain_data['Month']=train_data['date'].dt.month\ntrain_data['Year']=train_data['date'].dt.year\nplt.figure(figsize=(10,30))\nsns.catplot(data = train_data, x ='Month', y = \"sales\",row = \"Year\")\nplt.show()","da0b9c58":"store_df = train_data.copy()\nsales_pivoted_df = pd.pivot_table(store_df, index='store', values=['sales'], columns='item', aggfunc=np.mean)\n# Pivoted dataframe\ndisplay(sales_pivoted_df)","1844fd20":"store_data=train_data[['store','sales']]\nstore_data.set_index('store',inplace=True)\nstore_data=store_data.groupby('store').mean()\nplt.figure(figsize=(10,10))\nsns.barplot(store_data.index,store_data['sales'])","a5efdcf2":"# performing time series analysis for particular item of store\n# print(train_data)\nprint('Before Filtering '+str(train_data.shape))\n# let consider particular item and store\n# store=10\n# item=40\n\nsample=train_data[train_data.store==10]\nsample=sample[sample.item==40]\nprint('After Filtering '+str(sample.shape))\n# print(sample)\npy.iplot([go.Scatter(\n    x=sample.date,\n    y=sample.sales)])","f1d9bd76":"print('Before Filtering '+str(train_data.shape))\n\nitem=[10,20,25,45]\nstore=[1,5,8,9]\nsample=train_data.copy()\nsample=sample[sample.item.isin(item)]\nsample=sample[sample.store.isin(store)]\n\nprint('After Filtering '+str(train_data.shape))\n\nmulti_data = []\nfor i in range(0,4):\n    flt = sample[sample.store == store[i]]\n    flt = flt[flt.item == item[i]]\n    multi_data.append(go.Scatter(x=flt.date, y=flt.sales, name = \"Store:\" + str(store[i]) + \",Item:\" + str(item[i])))\npy.iplot(multi_data)","d742408d":"train_data=train_data.rename(columns={'date':'ds','sales':'y'})\ntrain_data","4eb58fe3":"model=Prophet(yearly_seasonality=True)\nmodel.fit(train_data)","d424472e":"forecast=model.make_future_dataframe(periods=90)\nforecast=model.predict(forecast)\nforecast[[\"ds\", \"yhat\", \"yhat_lower\", \"yhat_upper\"]]","d1900127":"figure=model.plot(forecast,xlabel='Date',ylabel='Sales')","0badac62":"figure2=model.plot_components(forecast)","af12bb0a":"def predictions(item,store):\n        pg=Prophet(yearly_seasonality=True)\n        test=train_data[train_data.store==store]\n        test=test[test.item==item]\n        pg.fit(test)\n        future=pg.make_future_dataframe(periods=90)\n        forecast=pg.predict(future)\n        forecast_final=forecast[forecast['ds'].dt.year==2018]\n        return forecast_final[['ds','yhat']]","f814906c":"results=list()\nfor i in range(1,11):\n    for j in range(1,51):\n        result=predictions(j,i)\n        print(result)\n        results.append(result['yhat'].values)\n","c9277e42":"final_result=[]\nfor each in results:\n    for ele in each:\n        final_result.append(ele)\nlen(final_result)\nfinal_result=pd.DataFrame(final_result)\nfinal_result.iloc[:,0]","91c1d4f3":"test_data=pd.read_csv('\/kaggle\/input\/demand-forecasting-kernels-only\/test.csv')\ntest_data.id","e0d53c9e":"output = pd.DataFrame({'Id': test_data.id,\n                      'sales':final_result.iloc[:,0]})\noutput.to_csv('submission.csv', index=False)","ee7654f9":"# output","153bedb8":"# Relation between date and sale\n","81f632fb":"# Exploratory Data Analysis","7d342827":"## Relation between 50 items and their sales","a0107714":"# Pedictions","5f34e924":"**Starting with Dataset**","ac061a0f":"## Let us understand the sales data distribution across the stores","cd106bf9":"# Time Series Analysis","571d0582":"The above graph shows a sinosodal or seasonal trend. As you can see, sales were high during mid year and at the end of year.\nLets continue same exploration with other stores and items.","51d24c60":"2. indexed_data has sorted out number of items that were sold on a particular date, corresponding to each store ","85e574ba":"1. Cost corresponding to each item\n       a)showing demand of different items\n       b)as we can see some items has high demand in comparision to other","4491bff5":"## Sales acoording to month and year","40f0c389":"1. Above, first plot shows total sales are increasing on yearly basis.\n2. Second plot shows weekly trend, sales on everyday of week. Also, sales on monday is highly low.\n3. Third plot shows yearly trend, as you can see during months july, august, december the sales are high as compared to other months of year. So, we can conclude that sales are high in months, during which we have holidays or festivals like christmas.","ba1cd710":"3.Sales across 12 months of every year\n\nTrend is same across each year , showing sales are almost sales is almost same every year","0c9cfae8":"As you can see the seaasonal trend is available in sales of all the items of all the store hence we can conclude that it going to follow this trend for results too.","872b54b5":"Trend of Sales across different time","ef67c378":"# Evaluating Model"}}