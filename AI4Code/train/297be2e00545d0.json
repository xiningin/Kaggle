{"cell_type":{"2b6781ad":"code","de90e478":"code","117ea5c2":"code","e80481b9":"code","4fe1756d":"code","580f1e9a":"code","aadb9ee8":"code","d124a04b":"code","76bd41dd":"code","e38e8088":"code","8968f809":"code","54bfb928":"code","d9f44ead":"code","c904eb48":"code","323391d6":"code","1d5defd1":"markdown","257d6a11":"markdown","6deccdc3":"markdown","fcdac17d":"markdown","c0440178":"markdown","3dd327b3":"markdown","02608637":"markdown","1f40ceea":"markdown","b5ddadbd":"markdown","de8e4c61":"markdown"},"source":{"2b6781ad":"import sklearn\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np","de90e478":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","117ea5c2":"game_data = pd.read_csv(r'\/kaggle\/input\/european-football-database-20192020\/E0.csv')\ngame_data","e80481b9":"# removing extraneous data - just want to start with win rate analysis. Will do other info later\n\nwin_data = game_data[['Date','HomeTeam','AwayTeam', 'FTHG', 'FTAG','FTR']]\nwin_data","4fe1756d":"# Adjusting the info to make the upcoming steps simpler\n\npd.set_option('mode.chained_assignment', None)\nwin_data['HomeWin'] = win_data['FTR'].apply(lambda x: 1 if x is 'H' else 0)\nwin_data['HomeLoss'] = win_data['FTR'].apply(lambda x: 1 if x is 'A' else 0)\nwin_data['HomeDraw'] = win_data['FTR'].apply(lambda x: 1 if x is 'D' else 0)\n\nwin_data['AwayWin'] = win_data['FTR'].apply(lambda x: 1 if x is 'A' else 0)\nwin_data['AwayLoss'] = win_data['FTR'].apply(lambda x: 1 if x is 'H' else 0)\nwin_data['AwayDraw'] = win_data['FTR'].apply(lambda x: 1 if x is 'D' else 0)\n# win_data = win_data[['Date','HomeTeam', 'AwayTeam', 'HomeWin', 'HomeLoss','HomeDraw']]\nwin_data = win_data.drop('FTR', axis=1)\nwin_data","580f1e9a":"# splitting data for before and after break\npreCOVID = win_data.iloc[:224]\npostCOVID = win_data.iloc[224:]","aadb9ee8":"pd.options.display.float_format = '{:,.1f}'.format\ntable = win_data.groupby('HomeTeam').agg({'HomeTeam': 'count', 'FTHG': 'sum', 'FTAG' : 'sum', 'HomeWin' : 'sum', 'HomeDraw' : 'sum', 'HomeLoss' : 'sum'})\naway = win_data.groupby('AwayTeam').agg({'AwayTeam': 'count', 'FTAG': 'sum', 'FTHG' : 'sum', 'AwayWin' : 'sum', 'AwayDraw' : 'sum', 'AwayLoss' : 'sum'})\ntable = pd.concat([table,away], axis=1)\ntable['Points'] = table['HomeWin']*3 + table['HomeDraw']*1 + table['AwayWin']*3 + table['AwayDraw']*1\ntable = table.rename(columns={'HomeTeam': 'HomeGames', 'AwayTeam': 'AwayGames'})\ntable = table.sort_values('Points', ascending = False)\ntable['MP'] = table['HomeGames'] + table['AwayGames']\ntable['GF'] = table.iloc[:,1] + table.iloc[:,7]\ntable['GA'] = table.iloc[:,2] + table.iloc[:,8]\ntable['GD'] = table['GF'] - table['GA']\ntable['W'] = table['HomeWin'] + table['AwayWin']\ntable['D'] = table['HomeDraw'] + table['AwayDraw']\ntable['L'] = table['HomeLoss'] + table['AwayLoss']\ntable = table[['MP','W','D','L','GF','GA','GD','Points']]\ntable","d124a04b":"table = win_data.groupby('HomeTeam').agg({'HomeTeam': 'count', 'FTHG': 'mean', 'FTAG' : 'mean', 'HomeWin' : 'sum', 'HomeDraw' : 'sum', 'HomeLoss' : 'sum'})\naway = win_data.groupby('AwayTeam').agg({'AwayTeam': 'count', 'FTAG': 'mean', 'FTHG' : 'mean', 'AwayWin' : 'sum', 'AwayDraw' : 'sum', 'AwayLoss' : 'sum'})\ntable = pd.concat([table,away], axis=1)\ntable['Points'] = table['HomeWin']*3 + table['HomeDraw']*1 + table['AwayWin']*3 + table['AwayDraw']*1\ntable = table.rename(columns={'HomeTeam': 'HomeGames', 'AwayTeam': 'AwayGames'})\ntable = table.sort_values('Points', ascending = False)\ntable = table.rename(columns={'FTHG': 'AveHomeGoals', 'FTAG': 'AveAwayGoals'})\ntable","76bd41dd":"def color_negative_red(value):\n  \"\"\"\n  Colors elements in a dateframe\n  green if positive and red if\n  negative. Does not color NaN\n  values.\n  \"\"\"\n\n  if value < 0:\n    color = 'red'\n  elif value > 0:\n    color = 'green'\n  else:\n    color = 'black'\n\n  return 'color: %s' % color","e38e8088":"# pre-COVID break\npd.options.display.float_format = '{:,.1f}'.format\n\ndata = preCOVID.groupby('HomeTeam').agg({'HomeTeam': 'count', 'FTHG': 'mean', 'FTAG' : 'mean', 'HomeWin' : 'sum', 'HomeDraw' : 'sum', 'HomeLoss' : 'sum'})\ndata.columns = ['# pre-COVID matches', 'AveGF1', 'AveGA1', 'W', 'D', 'L']\n\ndata['WinRate1'] = data['W']\/data['# pre-COVID matches']\ndata = data.sort_values('WinRate1', ascending = False)\n\n# post-COVID break\n\n\ndata2 = postCOVID.groupby('HomeTeam').agg({'HomeTeam': 'count', 'FTHG': 'mean', 'FTAG' : 'mean', 'HomeWin' : 'sum', 'HomeDraw' : 'sum', 'HomeLoss' : 'sum'})\ndata2.columns = ['# post-COVID matches', 'AveGF2', 'AveGA2', 'W2', 'D2', 'L2']\n\ndata2['WinRate2'] = data2['W2']\/data2['# post-COVID matches']\n# data2 = data2.sort_values('WinRate2', ascending = False)\n\nhome = pd.concat([data,data2], axis=1)\nhome['\u0394GF'] = home['AveGF2'] - home['AveGF1']\nhome['\u0394GA'] = home['AveGA2'] - home['AveGA1']\nhome['\u0394WinRate'] = home['WinRate2'] - home['WinRate1']\n\ns = home.style.applymap(color_negative_red, subset=['\u0394WinRate','\u0394GF','\u0394GA'])\ns = s.format(\"{:.0f}\")\ns = s.format({'\u0394WinRate': \"{:.1%}\",'WinRate1': \"{:.1%}\", 'WinRate2': \"{:.1%}\",'\u0394GF': \"{:.1f}\",'\u0394GA': \"{:.1f}\",'AveGF1': \"{:.1f}\",'AveGA1': \"{:.1f}\",'AveGF2': \"{:.1f}\",'AveGA2': \"{:.1f}\"})\ns","8968f809":"fig, axs = plt.subplots(1, 2, figsize=(10, 5))\naxs[0].bar(['Pre-COVID', 'Post-COVID'], [home.AveGF1.mean(), home.AveGF2.mean()])\naxs[0].set_title('Home Goals Scored')\naxs[1].bar(['Pre-COVID', 'Post-COVID'], [home.WinRate1.mean(), home.WinRate2.mean()])\naxs[1].set_title('Home Win Rate')\nprint('Change in Mean Home Goals: '+'{:.1f}'.format(home.\u0394GF.mean()))\nprint('Change in Home Win Rate: '+'{:.1%}'.format(home.\u0394WinRate.mean()))","54bfb928":"# want to assess statistical significance of the change in win rate at some point\n\nprint('Pre-COVID Win Rate: '+'{:.3f}'.format(home.WinRate1.mean()))\nprint('Pre-COVID Win Rate sd: '+'{:.3f}'.format(home.WinRate1.std()))\nprint('Post-COVID Win Rate: '+'{:.3f}'.format(home.WinRate2.mean()))\nprint('Post-COVID Win Rate: '+'{:.3f}'.format(home.WinRate2.std()))\ndata = win_data.groupby('HomeTeam').agg({'HomeTeam': 'count', 'FTHG': 'mean', 'FTAG' : 'mean', 'HomeWin' : 'sum', 'HomeDraw' : 'sum', 'HomeLoss' : 'sum'})\ndata.columns = ['# pre-COVID matches', 'AveGF1', 'AveGA1', 'W', 'D', 'L']\ndata['WinRate'] = data['W']\/data['# pre-COVID matches']\nprint('Season Average Win Rate: '+'{:.3f}'.format(data.WinRate.mean()))\n\n\n","d9f44ead":"# pre-COVID break\npd.options.display.float_format = '{:,.1f}'.format\n\ndata3 = preCOVID.groupby('AwayTeam').agg({'AwayTeam': 'count', 'FTAG': 'mean', 'FTHG' : 'mean', 'AwayWin' : 'sum', 'AwayDraw' : 'sum', 'AwayLoss' : 'sum'})\ndata3.columns = ['# pre-COVID matches', 'AveGF1', 'AveGA1', 'W', 'D', 'L']\n\ndata3['WinRate1'] = data3['W']\/data3['# pre-COVID matches']\ndata3 = data3.sort_values('WinRate1', ascending = False)\n\n# post-COVID break\ndata4 = postCOVID.groupby('AwayTeam').agg({'AwayTeam': 'count', 'FTAG': 'mean', 'FTHG' : 'mean', 'AwayWin' : 'sum', 'AwayDraw' : 'sum', 'AwayLoss' : 'sum'})\ndata4.columns = ['# post-COVID matches', 'AveGF2', 'AveGA2', 'W2', 'D2', 'L2']\n\ndata4['WinRate2'] = data2['W2']\/data2['# post-COVID matches']\n\nhome = pd.concat([data3,data4], axis=1)\nhome['\u0394GF'] = home['AveGF2'] - home['AveGF1']\nhome['\u0394GA'] = home['AveGA2'] - home['AveGA1']\nhome['\u0394WinRate'] = home['WinRate2'] - home['WinRate1']\n\ns = home.style.applymap(color_negative_red, subset=['\u0394WinRate','\u0394GF','\u0394GA'])\ns = s.format(\"{:.0f}\")\ns = s.format({'\u0394WinRate': \"{:.1%}\",'WinRate1': \"{:.1%}\", 'WinRate2': \"{:.1%}\",'\u0394GF': \"{:.1f}\",'\u0394GA': \"{:.1f}\",'AveGF1': \"{:.1f}\",'AveGA1': \"{:.1f}\",'AveGF2': \"{:.1f}\",'AveGA2': \"{:.1f}\"})\ns","c904eb48":"fig, axs = plt.subplots(1, 2, figsize=(10, 5))\naxs[0].bar(['Pre-COVID', 'Post-COVID'], [home.AveGF1.mean(), home.AveGF2.mean()])\naxs[0].set_title('Away Goals Scored')\naxs[1].bar(['Pre-COVID', 'Post-COVID'], [home.WinRate1.mean(), home.WinRate2.mean()])\naxs[1].set_title('Away Win Rate')\nprint('Change in Mean Away Goals: '+'{:.1f}'.format(home.\u0394GF.mean()))\nprint('Change in Away Win Rate: '+'{:.1%}'.format(home.\u0394WinRate.mean()))","323391d6":"table = preCOVID.groupby('HomeTeam').agg({'HomeTeam': 'count', 'FTHG': 'sum', 'FTAG' : 'sum', 'HomeWin' : 'sum', 'HomeDraw' : 'sum', 'HomeLoss' : 'sum'})\naway = preCOVID.groupby('AwayTeam').agg({'AwayTeam': 'count', 'FTAG': 'sum', 'FTHG' : 'sum', 'AwayWin' : 'sum', 'AwayDraw' : 'sum', 'AwayLoss' : 'sum'})\ntable = pd.concat([table,away], axis=1)\ntable['Points'] = table['HomeWin']*3 + table['HomeDraw']*1 + table['AwayWin']*3 + table['AwayDraw']*1\ntable = table.rename(columns={'HomeTeam': 'HomeGames', 'AwayTeam': 'AwayGames'})\ntable = table.sort_values('Points', ascending = False)\ntable['MP'] = table['HomeGames'] + table['AwayGames']\ntable['GF'] = table.iloc[:,1] + table.iloc[:,7]\ntable['GA'] = table.iloc[:,2] + table.iloc[:,8]\ntable['GD'] = table['GF'] - table['GA']\ntable['W'] = table['HomeWin'] + table['AwayWin']\ntable['D'] = table['HomeDraw'] + table['AwayDraw']\ntable['L'] = table['HomeLoss'] + table['AwayLoss']\ntable = table[['MP','W','D','L','GF','GA','GD','Points']]\n\ntable1 = postCOVID.groupby('HomeTeam').agg({'HomeTeam': 'count', 'FTHG': 'sum', 'FTAG' : 'sum', 'HomeWin' : 'sum', 'HomeDraw' : 'sum', 'HomeLoss' : 'sum'})\naway = postCOVID.groupby('AwayTeam').agg({'AwayTeam': 'count', 'FTAG': 'sum', 'FTHG' : 'sum', 'AwayWin' : 'sum', 'AwayDraw' : 'sum', 'AwayLoss' : 'sum'})\ntable1 = pd.concat([table1,away], axis=1)\ntable1['Points'] = table1['HomeWin']*3 + table1['HomeDraw']*1 + table1['AwayWin']*3 + table1['AwayDraw']*1\ntable1 = table1.rename(columns={'HomeTeam': 'HomeGames', 'AwayTeam': 'AwayGames'})\ntable1 = table1.sort_values('Points', ascending = False)\ntable1['MP'] = table1['HomeGames'] + table1['AwayGames']\ntable1['GF'] = table1.iloc[:,1] + table1.iloc[:,7]\ntable1['GA'] = table1.iloc[:,2] + table1.iloc[:,8]\ntable1['GD'] = table1['GF'] - table1['GA']\ntable1['W'] = table1['HomeWin'] + table1['AwayWin']\ntable1['D'] = table1['HomeDraw'] + table1['AwayDraw']\ntable1['L'] = table1['HomeLoss'] + table1['AwayLoss']\ntable1 = table1[['MP','W','D','L','GF','GA','GD','Points']]\n\ntable = pd.concat([table,table1], axis=1)\ntable","1d5defd1":"# Away Stats  \nWe can use the away stats to further interrogate the significance of the Home game stats.  \nAccording to our hypothesis, the lack of home team advantage from fans should result in improved Away team performance.  \n\nThe final three columns of the following dataframe give a good insight into the claim.","257d6a11":"# Referee Home Bias  \nWill explore this next","6deccdc3":"# Home and Away Combined  \nshowing overall stats for before and after the COVID break.","fcdac17d":"![Image](https:\/\/e0.365dm.com\/20\/05\/2048x1152\/skysports-bundesliga-dortmund_4983488.jpg)\n# Are teams playing worse?  \nA friend commented on the fact that the quality of play seemed worse since the league has resumed, and says an effect might be the lack of fans watching live in the stadium (i.e. the 12th player). An example of how this can manifest is the crowd encouraging the home team, cheering passes etc. while booing and creating a general hostile environment for when the away team has the ball.\n\nAnother aspect of home-field advantage is the impact a crowd can have on a referee. A considerable body of academic research, in fact, has long suggested that \u201call or part of home advantage\u201d is down to \u201crefereeing decisions being subconsciously in favor of the home team\" (Gleave). \n\nThis notebook will be updated as more games are played.\n\nFactors to be explored:\n1. Change in Home win rate.\n2. Change in Home team penalisation by referee.","c0440178":"## Conclusions\n1. There is a small decrease in home goals scored after the COVID break, which gives support to the hypothesis.\n2. There is also a decent reduction in Home win rate, again supporting the hypothesis.\n3. Contributing factor to big drop for Dortmund is likely due to the fact that Bayern have already won the league, so there is less drive for players to win.\n4. There is also noticible post-COVID improvement for Bayern and Hertha, would be interesting to understand why. (Just checked, Hertha got a new manager - would explain the big performance difference).","3dd327b3":"## A table showing more detailed information","02608637":"## Conclusions  \n1. Slight increase in average goals scored by away team again supports the hypothesis that the removal of fans has led to a reduction in home advantage.\n2. There is still a reduction in away team win rate, though this is much smaller than the reduction in win rate for home teams. This means that perhaps there was a negative effect on team performance in general from the break, due to other factors such as disrupted training.","1f40ceea":"### statistical significance of the change in win rate\nThis isn't finished yet","b5ddadbd":"# Home Stats\n\nThe hypothesis is that the lack of fans in the stadium may result in a drop in both home win rate and drop in the number of home goals scored.  \n\nThe final three columns of the following dataframe give a good insight into the claim.","de8e4c61":"# Current Table  \n (as of 28\/07\/2020)"}}