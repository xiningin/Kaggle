{"cell_type":{"9a44c116":"code","23cb7c1c":"code","9adf2ade":"code","0278c5b3":"code","d32a4340":"code","7cf5040f":"code","aa325679":"code","a155b0a7":"code","62c8c4dd":"code","f135fd9e":"code","a4b16fcb":"code","828ad30f":"code","e0861c41":"code","629a7929":"code","6e825e92":"code","97c92434":"code","9f170d6d":"code","fa19cee1":"code","b2607fb3":"code","fec952e1":"code","303693fb":"code","261d0c2e":"code","ee689908":"code","6496abcf":"code","032b3845":"code","bbad416c":"code","8fb345b4":"code","e9853c7e":"code","92627ad0":"code","7421af02":"code","1cd32137":"code","43f18ce4":"code","bc48592e":"code","599a0582":"code","35b01e2e":"code","f754a39e":"code","fc9abdbc":"code","15681760":"code","53d6454f":"code","34e293dc":"code","0dcbeecb":"code","cb980061":"code","33d1ba6a":"code","c37aeaff":"code","ace4a607":"code","31bafb8f":"code","484e9186":"code","40ff3fd4":"code","ec70c3a2":"code","a62b1fce":"code","f5becdd9":"code","71fe5e6a":"code","75dee600":"code","5f28a640":"code","fb24802c":"code","88be8747":"code","9793015a":"code","cff98af0":"code","cf1c5a12":"code","9461589e":"code","980f6a0a":"code","d6462a63":"code","a65b5107":"code","83e4b618":"code","2705e116":"code","9eca84e3":"code","0430c424":"markdown","a32c2a23":"markdown","e69a47bc":"markdown","b2fa5bf7":"markdown","ce4fc27a":"markdown","2bdd2533":"markdown","5e943cf4":"markdown","e18c924e":"markdown","f6ef9b06":"markdown","fb7e1e3a":"markdown","a3a34160":"markdown","ea2aa74c":"markdown","4be43edc":"markdown","d62790ba":"markdown","ae19a25c":"markdown","08f4c95f":"markdown","628b843b":"markdown","05cf8388":"markdown","c573cdd2":"markdown","60599aa2":"markdown","1c40bd48":"markdown","518693d3":"markdown","3788e5c0":"markdown","b6a08f2e":"markdown","b58bcda8":"markdown","19540ae7":"markdown","a02844c3":"markdown","1adb34ec":"markdown","12bc1e06":"markdown","8d6cc434":"markdown","9e986d26":"markdown","14c60a46":"markdown","023da9fd":"markdown","e8072d61":"markdown","3e7af63f":"markdown","f551eba0":"markdown","6be91285":"markdown","a7f69dfb":"markdown","b274321b":"markdown","463934ad":"markdown","93e24692":"markdown","79e71562":"markdown","7536b0cc":"markdown","f6479a34":"markdown","d87446c2":"markdown","d2a84480":"markdown","7f6ae963":"markdown","7cf7ec3f":"markdown","3098f28d":"markdown","170570b8":"markdown"},"source":{"9a44c116":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sbn\n\n%matplotlib inline","23cb7c1c":"plant1_gen = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv') \nplant2_gen = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv')","9adf2ade":"plant1_sens = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')\nplant2_sens = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv')","0278c5b3":"plant1_gen","d32a4340":"plant1_gendaily = plant1_gen.groupby('DATE_TIME')[['DC_POWER','AC_POWER', 'DAILY_YIELD','TOTAL_YIELD']].agg('sum').reset_index()\nplant1_gendaily","7cf5040f":"plant2_gendaily = plant2_gen.groupby('DATE_TIME')[['DC_POWER','AC_POWER', 'DAILY_YIELD','TOTAL_YIELD']].agg('sum').reset_index()\nplant2_gendaily","aa325679":"#Plant 1 generation data\nplant1_gendaily['DATE_TIME'] = pd.to_datetime(plant1_gendaily['DATE_TIME']) # Conversion using Pandas built-in method\nplant1_gendaily['TIME'] = plant1_gendaily['DATE_TIME'].dt.time # Creates new column and passes TIME into time \nplant1_gendaily['DATE'] = pd.to_datetime(plant1_gendaily['DATE_TIME'].dt.date) # Creates new column and passes DATE into time \n\n#Plant 2 generation data\nplant2_gendaily['DATE_TIME'] = pd.to_datetime(plant2_gendaily['DATE_TIME']) \nplant2_gendaily['TIME'] = plant2_gendaily['DATE_TIME'].dt.time \nplant2_gendaily['DATE'] = pd.to_datetime(plant2_gendaily['DATE_TIME'].dt.date)","a155b0a7":"plant1_gen.info()","62c8c4dd":"plant1_gendaily.info()","f135fd9e":"plant1_gendaily.describe()","a4b16fcb":"plant2_gendaily.describe()","828ad30f":"print('Plant 1 Generation Data')\nsbn.heatmap(plant1_gen.isnull(), yticklabels=False, cbar=False, cmap='magma')\nplt.show()\n\nprint('Plant 2 Generation Data')\nsbn.heatmap(plant2_gen.isnull(), yticklabels=False, cbar=False, cmap='magma')\nplt.show()","e0861c41":"print('There are {} inverters in Solar Power Plant 1.'.format(plant1_gen['SOURCE_KEY'].nunique()))\nprint('There are {} inverters in Solar Power Plant 2.'.format(plant2_gen['SOURCE_KEY'].nunique()))","629a7929":"print('Plant 1 Inverters')\nsbn.barplot(x='SOURCE_KEY', y='AC_POWER', data=plant1_gen)\nplt.xticks([])\nplt.show()\n\nprint('Plant 2 Inverters')\nsbn.barplot(x='SOURCE_KEY', y='AC_POWER', data=plant2_gen)\nplt.xticks([])\nplt.show()","6e825e92":"plant1_gen.columns","97c92434":"plant1_gendaily.plot(x= 'TIME', y='DC_POWER', style='.', figsize = (15, 5), colormap='Pastel1')\nplt.ylabel('DC Power')\nplt.xlabel('Time of Day')\nplt.title('DC Power against Time for Plant 1')\nplt.show()\n\nplant1_gendaily.plot(x= 'TIME', y='AC_POWER', style='.', figsize = (15, 5), colormap='Accent') \nplt.ylabel('AC Power')\nplt.xlabel('Time of Day')\nplt.title('AC Power against Time for Plant 1')\nplt.show()\n\nplant2_gendaily.plot(x= 'TIME', y='DC_POWER', style='.', figsize = (15, 5), colormap='Pastel1')\nplt.ylabel('DC Power')\nplt.xlabel('Time of Day')\nplt.title('DC Power against Time for Plant 2')\nplt.show()\n\nplant2_gendaily.plot(x= 'TIME', y='AC_POWER', style='.', figsize = (15, 5), colormap='Accent') \nplt.ylabel('AC Power')\nplt.xlabel('Time of Day')\nplt.title('AC Power against Time for Plant 2')\nplt.show()","9f170d6d":"# DC output from solar module\nDCcompare = plant1_gendaily.plot(x='TIME', y='DC_POWER', figsize=(15,5), legend=True, style='.', label='Plant 1')\nplant2_gendaily.plot(x='TIME', y='DC_POWER', legend=True, style='.', label='Plant 2', ax=DCcompare)\nplt.title('DC Power Output for Each Plant')\nplt.ylabel('Power')\nplt.show()\n\n# AC output from inverter\nACcompare = plant1_gendaily.plot(x='TIME', y='AC_POWER', figsize=(15,5), legend=True, style='.', label='Plant 1')\nplant2_gendaily.plot(x='TIME', y='DC_POWER', legend=True, style='.', label='Plant 2', ax=ACcompare)\nplt.title('AC Power Output for Each Plant')\nplt.ylabel('Power')\nplt.show()","fa19cee1":"g1corr = plant1_gen.drop('PLANT_ID', axis=1).corr()\ng2corr = plant2_gen.drop('PLANT_ID', axis=1).corr()\n\nprint('Plant 1 Generation Data Correlation Coefficient')\nprint(g1corr)\n\nprint('Plant 2 Generation Data Correlation Coefficient')\nprint(g2corr)","b2607fb3":"g1mask = np.triu(np.ones_like(g1corr, dtype=bool))\ng2mask = np.triu(np.ones_like(g2corr, dtype=bool))\n\ncmap = 'magma_r'\n\nf, ax = plt.subplots(figsize=(11, 9))\nsbn.heatmap(g1corr, mask=g1mask, cmap=cmap, square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot=True)\nplt.show()\n\nf, ax = plt.subplots(figsize=(11, 9))\nsbn.heatmap(g2corr, mask=g2mask, cmap=cmap, square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot=True)\nplt.show()","fec952e1":"plant1_sens","303693fb":"plant1_sensdaily = plant1_sens.groupby('DATE_TIME')[['AMBIENT_TEMPERATURE','MODULE_TEMPERATURE',\n                                                     'IRRADIATION', 'SOURCE_KEY']].agg('sum').reset_index()\n\nplant1_sensdaily","261d0c2e":"plant2_sensdaily = plant2_sens.groupby('DATE_TIME')[['AMBIENT_TEMPERATURE','MODULE_TEMPERATURE',\n                                                     'IRRADIATION', 'SOURCE_KEY']].agg('sum').reset_index()\n\nplant2_sensdaily","ee689908":"#Plant 1 sensor data\nplant1_sensdaily['DATE_TIME'] = pd.to_datetime(plant1_sensdaily['DATE_TIME']) \nplant1_sensdaily['TIME'] = plant1_sensdaily['DATE_TIME'].dt.time \nplant1_sensdaily['DATE'] = pd.to_datetime(plant1_sensdaily['DATE_TIME'].dt.date)\n\n#Plant 2 sensor data\nplant2_sensdaily['DATE_TIME'] = pd.to_datetime(plant2_sensdaily['DATE_TIME']) \nplant2_sensdaily['TIME'] = plant2_sensdaily['DATE_TIME'].dt.time \nplant2_sensdaily['DATE'] = pd.to_datetime(plant2_sensdaily['DATE_TIME'].dt.date)","6496abcf":"plant1_sensdaily.info()","032b3845":"print('Plant 1 Sensor Data')\nsbn.heatmap(plant1_sensdaily.isnull(), yticklabels=False, cbar=False, cmap='magma')\nplt.show()\n\nprint('Plant 2 Sensor Data')\nsbn.heatmap(plant2_sensdaily.isnull(), yticklabels=False, cbar=False, cmap='magma')\nplt.show()","bbad416c":"plant1_sensdaily.columns","8fb345b4":"plant1_sensdaily['DATE'].nunique()","e9853c7e":"#Plant 1\n#Irradiation\nsbn.lineplot(x='DATE', y='IRRADIATION', data=plant1_sensdaily, err_style='band', color='red')\n\nplt.ylabel('Irradiation')\nplt.xlabel('Date')\nplt.title('Plant 1 Daily Solar Irradiation')\nplt.xticks(rotation=45)\nplt.show()\n\n#Module Temperature\nsbn.lineplot(x='DATE', y='MODULE_TEMPERATURE', data=plant1_sensdaily, err_style='band', color='blue')\n\nplt.ylabel('Module Temperature')\nplt.xlabel('Date')\nplt.title('Plant 1 Daily Module Temperature')\nplt.xticks(rotation=45)\nplt.show()\n\n#Ambient Temperature\nsbn.lineplot(x='DATE', y='AMBIENT_TEMPERATURE', data=plant1_sensdaily, err_style='band', color='green')\n\nplt.ylabel('Ambient Temperature')\nplt.xlabel('Date')\nplt.title('Plant 1 Daily Ambient Temperature')\nplt.xticks(rotation=45)\nplt.show()\n\n#Plant 2\n#Irradiation\nsbn.lineplot(x='DATE', y='IRRADIATION', data=plant2_sensdaily, err_style='band', color='red')\n\nplt.ylabel('Irradiation')\nplt.xlabel('Date')\nplt.title('Plant 2 Daily Solar Irradiation')\nplt.xticks(rotation=45)\nplt.show()\n\n#Module Temperature\nsbn.lineplot(x='DATE', y='MODULE_TEMPERATURE', data=plant2_sensdaily, err_style='band', color='blue')\n\nplt.ylabel('Module Temperature')\nplt.xlabel('Date')\nplt.title('Plant 2 Daily Module Temperature')\nplt.xticks(rotation=45)\nplt.show()\n\n#Ambient Temperature\nsbn.lineplot(x='DATE', y='AMBIENT_TEMPERATURE', data=plant2_sensdaily, err_style='band', color='green')\n\nplt.ylabel('Ambient Temperature')\nplt.xlabel('Date')\nplt.title('Plant 2 Daily Ambient Temperature')\nplt.xticks(rotation=45)\nplt.show()","92627ad0":"# Plant 1 temperature sensors\ntempsens_plant1 = sbn.lineplot(x='DATE', y='MODULE_TEMPERATURE', data=plant1_sensdaily, err_style='band', label='Module Temperature')\nsbn.lineplot(x='DATE', y='AMBIENT_TEMPERATURE', data=plant1_sensdaily, err_style='band', label='Ambient Temperature', ax=tempsens_plant1)\nplt.ylabel('Temperature')\nplt.xlabel('Date')\nplt.title('Module and Ambient Temperatures for Plant 1')\nplt.xticks(rotation=45)\nplt.show()\n\n# Plant 2 temperature sensors\ntempsens_plant2 = sbn.lineplot(x='DATE', y='MODULE_TEMPERATURE', data=plant2_sensdaily, err_style='band', label='Module Temperature')\nsbn.lineplot(x='DATE', y='AMBIENT_TEMPERATURE', data=plant2_sensdaily, err_style='band', label='Ambient Temperature', ax=tempsens_plant2)\nplt.ylabel('Temperature')\nplt.xlabel('Date')\nplt.title('Module and Ambient Temperatures for Plant 2')\nplt.xticks(rotation=45)\nplt.show()","7421af02":"# Comparing both plants\n# Daily Irradiation\nambient_compare = sbn.lineplot(x='DATE', y='IRRADIATION', data=plant1_sensdaily, err_style='band', label='Plant 1')\nsbn.lineplot(x='DATE', y='IRRADIATION', data=plant2_sensdaily, err_style='band', label='Plant 2', ax=ambient_compare)\nplt.ylabel('Irradiation')\nplt.xlabel('Date')\nplt.title('Daily Solar Irradiation for Both Plants')\nplt.xticks(rotation=45)\nplt.show()\n\n# Daily Module Temperature\nmodtemp_compare = sbn.lineplot(x='DATE', y='MODULE_TEMPERATURE', data=plant1_sensdaily, err_style='band', label='Plant 1')\nsbn.lineplot(x='DATE', y='MODULE_TEMPERATURE', data=plant2_sensdaily, err_style='band', label='Plant 2', ax=modtemp_compare)\nplt.ylabel('Module Temperature')\nplt.xlabel('Date')\nplt.title('Daily Module Temperature for Both Plants')\nplt.xticks(rotation=45)\nplt.show()\n\n# Daily Ambient Temperature\nambtemp_compare = sbn.lineplot(x='DATE', y='AMBIENT_TEMPERATURE', data=plant1_sensdaily, err_style='band', label='Plant 1')\nsbn.lineplot(x='DATE', y='AMBIENT_TEMPERATURE', data=plant2_sensdaily, err_style='band', label='Plant 2', ax=ambtemp_compare)\nplt.ylabel('Ambient Temperature')\nplt.xlabel('Date')\nplt.title('Daily Ambient Temperature for Both Plants')\nplt.xticks(rotation=45)\nplt.show()","1cd32137":"# Plant 1\n# Irradiation\nplant1_sensdaily.plot(x= 'TIME', y='IRRADIATION', style='.', figsize = (15, 5), colormap='PiYG') \nplt.ylabel('Irradiation')\nplt.xlabel('Time of Day')\nplt.title('Plant 1 Irradiation against Time')\nplt.show()\n\n# Module Temperature\nplant1_sensdaily.plot(x= 'TIME', y='MODULE_TEMPERATURE', style='.', figsize = (15, 5), colormap='Paired') \nplt.ylabel('Module Temperature')\nplt.xlabel('Time of Day')\nplt.title('Plant 1 Module Temperature against Time')\nplt.show()\n\n# Ambient Temperature\nplant1_sensdaily.plot(x= 'TIME', y='AMBIENT_TEMPERATURE', style='.', figsize = (15, 5), colormap='summer') \nplt.ylabel('Ambient Temperature')\nplt.xlabel('Time of Day')\nplt.title('Plant 1 Ambient Temperature against Time')\nplt.show()\n\n# Plant 2\n# Irradiation\nplant2_sensdaily.plot(x= 'TIME', y='IRRADIATION', style='.', figsize = (15, 5), colormap='PiYG') \nplt.ylabel('Irradiation')\nplt.xlabel('Time of Day')\nplt.title('Plant 2 Irradiation against Time')\nplt.show()\n\n# Module Temperature\nplant2_sensdaily.plot(x= 'TIME', y='MODULE_TEMPERATURE', style='.', figsize = (15, 5), colormap='Paired') \nplt.ylabel('Module Temperature')\nplt.xlabel('Time of Day')\nplt.title('Plant 2 Module Temperature against Time')\nplt.show()\n\n# Ambient Temperature\nplant2_sensdaily.plot(x= 'TIME', y='AMBIENT_TEMPERATURE', style='.', figsize = (15, 5), colormap='summer') \nplt.ylabel('Ambient Temperature')\nplt.xlabel('Time of Day')\nplt.title('Plant 2 Ambient Temperature against Time')\nplt.show()\n","43f18ce4":"# Hourly sens for each plant\n\n# Irradiation\nirr_hour = plant1_sensdaily.plot(x= 'TIME', y='IRRADIATION', style='.', figsize = (15, 5),\n                                legend=True, label='Plant 1')\nplant2_sensdaily.plot(x='TIME', y='IRRADIATION', style='.', label='Plant 2', ax=irr_hour)\nplt.ylabel('Irradiation')\nplt.xlabel('Time of Day')\nplt.title('Irradiation for Each Plant')\nplt.show()\n\n# Module temperature\nmodtemp_hour = plant1_sensdaily.plot(x= 'TIME', y='MODULE_TEMPERATURE', style='.', figsize = (15, 5),\n                                legend=True, label='Plant 1')\nplant2_sensdaily.plot(x='TIME', y='MODULE_TEMPERATURE', style='.', label='Plant 2', ax=modtemp_hour)\nplt.ylabel('Module Temperature')\nplt.xlabel('Time of Day')\nplt.title('Module Temperature for Each Plant')\nplt.show()\n\n# Ambient temperature\nambtemp_hour = plant1_sensdaily.plot(x= 'TIME', y='AMBIENT_TEMPERATURE', style='.', figsize = (15, 5),\n                                legend=True, label='Plant 1')\nplant2_sensdaily.plot(x='TIME', y='AMBIENT_TEMPERATURE', style='.', label='Plant 2', ax=ambtemp_hour)\nplt.ylabel('Ambient Temperature')\nplt.xlabel('Time of Day')\nplt.title('Ambient Temperature for Each Plant')\nplt.show()","bc48592e":"mergedata1 = plant1_sensdaily.merge(plant1_gendaily, left_on='DATE_TIME', right_on='DATE_TIME')\nmergedata1.head()","599a0582":"mergedata2 = plant2_sensdaily.merge(plant1_gendaily, left_on='DATE_TIME', right_on='DATE_TIME')\nmergedata2.head()","35b01e2e":"# Remove unneeded columns\n\nmergedata1.drop(columns =['TIME_x', 'DATE_x', 'TIME_y', 'DATE_y'], inplace=True)\nmergedata2.drop(columns =['TIME_x', 'DATE_x', 'TIME_y', 'DATE_y'], inplace=True)","f754a39e":"mergedata1","fc9abdbc":"mergedata2","15681760":"mergedata1.info()","53d6454f":"mergedata2.info()","34e293dc":"mergecorr1 = mergedata1.corr()\nmergecorr2 = mergedata2.corr()\n\n\nprint('Plant 1 Generation and Sensor Data Correlation Coefficient')\nprint(mergecorr1)\nprint('')\n\nprint('Plant 2 Generation and Sensor Data Correlation Coefficient')\nprint(mergecorr2)","0dcbeecb":"s1mask = np.triu(np.ones_like(mergecorr1, dtype=bool))\ns2mask = np.triu(np.ones_like(mergecorr2, dtype=bool))\n\ncmap = 'magma_r'\n\nprint('Plant 1')\nf, ax = plt.subplots(figsize=(11, 9))\nsbn.heatmap(mergecorr1, mask=s1mask, cmap=cmap, square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot=True)\nplt.show()\n\nprint('Plant 2')\nf, ax = plt.subplots(figsize=(11, 9))\nsbn.heatmap(mergecorr2, mask=s2mask, cmap=cmap, square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot=True)\nplt.show()","cb980061":"# Plant 1\nc1 = mergecorr1.unstack()\nsort1 = c1.sort_values(kind=\"quicksort\")\nprint('Plant 1 Top Correlations:')\nprint(sort1[22:42])\nprint('')\n\n# Plant 2\nc2 = mergecorr2.unstack()\nsort2 = c2.sort_values(kind=\"quicksort\")\nprint('Plant 2 Top Correlations:')\nprint(sort2[22:42])","33d1ba6a":"mergedata1.columns","c37aeaff":"sbn.lmplot(x='AMBIENT_TEMPERATURE', y='AC_POWER', data=mergedata1)\nprint('Plant 1')\nplt.show()","ace4a607":"sbn.lmplot(x='AMBIENT_TEMPERATURE', y='AC_POWER', data=mergedata2)\nprint('Plant 2')\nplt.show()","31bafb8f":"mergedata1.columns","484e9186":"X = mergedata1[['AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE', 'IRRADIATION']] # Features\ny = mergedata1['AC_POWER'] # Target","40ff3fd4":"from sklearn.model_selection import train_test_split","ec70c3a2":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) # Splits train and test sets","a62b1fce":"# Training the model\nfrom sklearn.linear_model import LinearRegression","f5becdd9":"lm = LinearRegression() # creates an instance of LinearRegression() model ","71fe5e6a":"lm.fit(X_train, y_train) # fit on training data","75dee600":"print('PLANT 1')\nprint('The intercept for the linear regression is at', lm.intercept_)\nprint('The linear regression coefficients are:')\n\ncoef_df = pd.DataFrame(lm.coef_, X.columns, columns=['Coeff'])\nprint(coef_df)","5f28a640":"mergedata2.columns","fb24802c":"X2 = mergedata2[['AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE', 'IRRADIATION']] # Features\ny2 = mergedata2['AC_POWER'] # Target","88be8747":"X2_train, X2_test, y2_train, y2_test = train_test_split(X2, y2, test_size=0.3) # Splits train and test sets","9793015a":"lm2 = LinearRegression()","cff98af0":"lm2.fit(X2_train, y2_train)","cf1c5a12":"print('PLANT 2')\nprint('The intercept for the linear regression is at', lm2.intercept_)\nprint('The linear regression coefficients are:')\n\ncoef2_df = pd.DataFrame(lm2.coef_, X2.columns, columns=['Coeff2'])\nprint(coef2_df)","9461589e":"predictions1 = lm.predict(X_test)\npredictions1","980f6a0a":"plt.scatter(y_test, predictions1)\nplt.title('Actual Solar Output Values vs Predicted Values for Plant 1')\nplt.xlabel('Predicted Output')\nplt.ylabel('Actual Output')","d6462a63":"predictions2 = lm2.predict(X2_test)\npredictions2","a65b5107":"plt.scatter(y2_test, predictions2)\nplt.title('Actual Solar Output Values vs Predicted Values for Plant 2')\nplt.xlabel('Predicted Output')\nplt.ylabel('Actual Output')","83e4b618":"from sklearn import metrics\n\n# PLANT 1\nMAE1 = metrics.mean_absolute_error(y_test,predictions1)\nMSE1 = metrics.mean_squared_error(y_test,predictions1)\nRMSE1 = np.sqrt(metrics.mean_squared_error(y_test,predictions1))\nprint('Metrics for Plant 1 Linear Model')\nprint('MAE: ', MAE1)\nprint('MSE: ',MSE1)\nprint('RMSE: ', RMSE1)\nprint()\n\n# PLANT 2\nMAE1 = metrics.mean_absolute_error(y2_test,predictions2)\nMSE1 = metrics.mean_squared_error(y2_test,predictions2)\nRMSE1 = np.sqrt(metrics.mean_squared_error(y2_test,predictions2))\nprint('Metrics for Plant 2 Linear Model')\nprint('MAE: ', MAE1)\nprint('MSE: ',MSE1)\nprint('RMSE: ', RMSE1)","2705e116":"sbn.displot((y_test-predictions1), kde=True)\nplt.title('Plant 1 Residuals')","9eca84e3":"sbn.displot((y2_test-predictions2), kde=True)\nplt.title('Plant 2 Residuals')","0430c424":"### Evaluating the models","a32c2a23":"# Exploratory Data Analysis","e69a47bc":"This dataset is obtained from two solar power plants in India. \n\nSolar energy is one of the more promising renewable sources of energy. It is harvested through solar panels.\n\nSolar panels are made up of arrays of solar modules, which in turn are made up of smaller solar cells. These cells are also known as photovoltaic cells (PV cells). A conventional monocrystalline silicon PV cell is capable of producing around 0.5V of electricity.\n\nThe working principle of solar cells is as follows:\n1. Photons with sufficient energy (>1.12eV) will dislodge electrons from the silicon.\n2. These dislodged electrons will be accelerated from the valence band into the conduction band by the electric field from the PN junction.\n3. With the presence of a circuit, DC current flow will be generated.\n\nEach photon has an energy of *E = hc\/\u03bb*. As *h* is constant, the parameters resulting in adequately energetic photons are its speed (*c*) and wavelength (*\u03bb*). Ignoring the negligible changes of speed of light in air, the output of a solar cell is affected by the wavelength of light AND the intensity of light (more photons, more energy). Intuitively, the intensity of light varies throughout the day, and the wavelength of light that impedes a solar cell also varies throughout the day due to atmospheric scattering. We will explore how the **irradiation**, **module temperature**, and **ambient temperature**, reflect these changes.\n\nIn a typical Solar Energy Generating System (SEGS), solar energy is converted into electricity in the form of Direct Current (**DC**) by the solar panels. This DC is then passed through an **inverter** to convert it to Alternating Current (**AC**) which is better suited for transmission through the centralized power grid.\n\n![image.png](attachment:a43e0e74-4710-43bb-a3cf-20b60b8f184b.png)\n* The above diagram depicts a typical Solar Energy Generating System (SEGS)\n\nWe will conduct an exploratory data analysis on this dataset to discover some key relationships, analytics, and correlations between the features provided. We will then make some educated guesses on the underlying factors to the patterns discovered. After that, we will conduct a regression analysis in order to obtain a deeper insight on the interactions and relationships between each feature. Lastly, we will try to make some predictive modelling from our linear regression and obtain a few key metrics to evaluate our model.","b2fa5bf7":"> * Power output is generated with the presence of sunlight, which starts at around 0540hrs and ends at around 1800hrs. \"Presence of sunlight\" is dictated by the intensity of sunlight and the wavelength of sunlight that hits the PV cells. This means that even though there may still be sunlight at 1800hrs, they are diffused sunlight and scattered sunlight that do not have adequate range of wavelength for power generation.\n> * Plant 2 exhibits more scattered AC and DC Power values. Inverters may not be faulty but instead the modules are.","ce4fc27a":"## Data cleaning ##","2bdd2533":"#### Groupby day for summation of yield ####","5e943cf4":"#### Check for faulty inverters\/modules ####","e18c924e":"1. Plant 1 is located at a colder region with less fluctuation in ambient temperature.\n2. Plant 1 has more reliable PV modules, with 10 times more DC output than Plant 2 and higher AC output stability.\n3. Plant 1 has higher correlation between output and yield, which means that Plant 1 has a higher overall system efficiency than Plant 2, despite having similar inverter efficiency.\n4. Despite recording different temperature levels, both plants seem to receive similar amount of sunlight every day. However Plant 2 is slightly more erratic with more extreme values of irradiation. This could mean that Plant 2 is located at a more cloudy region as compared to Plant 1. By extension, Plant 1 could be located at an elevated location, where less clouds are present and the temperatures are lower. This could also mean that the modules in Plant 2 simply require maintenance.\n5. The larger temperatures of Plant 2 mainly result from diffused sunlight, which does not have as much energy and wavelength range to excite the electrons in the PV cells.\n6. For Plant 1, a unit increase in irradiation results in roughly 26500.433104kW \u00b1 735.74kW (RMSE) increase in AC output. (Values slightly differ every run)\n7. Plant 1 is more predictable than Plant 2, with tighter regression and lower RMSE values.\n8. The models can be optimized by addressing the following factors:\n* Inadequate features to aid supervised learning. Additional features such as weather data will be helpful in increasing model accuracy.\n* Inadequate data points (30 days) which could not provide enough training for highly weather-dependent systems such as solar power plants.\n* Faulty modules in Plant 2 provide misleading data, resulting in a loose linear regression.\n* Human error in analysis.\n9. The following data-driven solutions can be considered to increase overall efficiency of solar power plant:\n* Conduct maintenance on Plant 2 solar modules to improve irradiation.\n* Increase DC output by increasing the number of solar modules at Plant 2, especially if the plant is located at a cloudy region.","f6ef9b06":"#### Check for missing values ####","fb7e1e3a":"> * Slightly scattered distribution indicates suboptimal model.\n> * This can be credited to the irregularities in output, possibly brought forth by faulty modules.","a3a34160":"#### Correlation coefficient and matrix","ea2aa74c":"There are no missing values. We may proceed.","4be43edc":"> * Correlation coefficient between DAILY_YIELD and output (AC_POWER and DC_POWER) for Plant 1 is higher than Plant 2.\n> * Higher values mean higher correlation between the pair. \n> * Looking at the correlation between AC_POWER and DC_POWER, the efficiency of the inverters can be estimated: 0.999996 for Plant 1, and 0.999997 for Plant 2.","d62790ba":"#### Sorting correlation pairs","ae19a25c":"> * The residuals show that the points are normally distributed around 0 with minimal extreme points.","08f4c95f":"## Observe relationship between sensor data features ##\n","628b843b":"#### Convert DATE_TIME into datetime format ####","05cf8388":"> * The residuals show that most points center around 0 and there are some extreme points in the negative.","c573cdd2":"#### Correlation coefficient for merged data ####","60599aa2":"# Introduction #","1c40bd48":"> * Generally, the lower the MAE, MSE, RMSE values, the higher the precision. RMSE values can be interpreted in the unit of kW. This will be our main metric.","518693d3":"> * The DC power output from solar module of Plant 2 is significantly lower than Plant 1, at almost ten times lower. \n> * However, the AC power outputs from both plants are at similar levels, despite the AC output from Plant 2 being more erratic.\n> * Another plausible angle is that Plant 1 produces 10 ten times more DC power output.","3788e5c0":"## Import dependencies ##","b6a08f2e":"#### Check for missing values ####","b58bcda8":"#### Descriptive analytics","19540ae7":"> * The inverters in Plant 1 have stable outputs, while the inverters in Plant 2 have varying outputs. Assuming fully functional solar modules, this may be due to faulty inverters. Let's explore further.","a02844c3":"> * AC_POWER against AMBIENT_TEMPERATURE shows slight linearity.","1adb34ec":"#### PLANT 1","12bc1e06":"#### PLANT 1","8d6cc434":"> * Module Temperature is always higher than Ambient Temperature","9e986d26":"> * There are no missing values. We're good to go.","14c60a46":"> * The mean solar irradiation values for both plants are similar.\n> * The mean module temperature of Plant 1 is slightly lower than Plant 2 most of the time.\n> * The mean ambient temperature of Plant 1 is noticeably lower than Plant 2.\n> * Plant 1 is located at a colder region in India as compared to Plant 2. One of the plausible explanations for similar solar irradiation is that Plant 1 is located at a higher location as compared to Plant 2.","023da9fd":"#### Residuals","e8072d61":"Thank you very much for for reading this analysis. Coming from an Applied Physics background, I am new to data science and this project is my first Kaggle code. It is highly likely that there may be some errors in my analysis, and I would be grateful if you could let me know if you find anything weird! \n\nThanks again for your time, and I hope you have a great day.","3e7af63f":"> * Tight distribution indicates good predictions.","f551eba0":"### Post-scriptum","6be91285":"#### Groupby day unneeded here, but it's good to remove PLANT_ID and SOURCE_KEY while standardizing variable naming","a7f69dfb":"> Ignoring the obvious correlation between AC_POWER and DC_POWER, these are the top correlations with AC_POWER\/DC_POWER:\n\n> FACTOR (AC1, DC1, AC2, DC2)\n> 1. IRRADIATION (0.996664, 0.996746, 0.924785, 0.924574)\n> 2. MODULE_TEMPERATURE (0.959787, 0.959706, 0.877665, 0.877453)\n> 3. AMBIENT_TEMPERATURE (0.703721, 0.703512, 0.590186, 0.589997)\n\n> * Plant 2 has a non-trivial lower temperature correlation coefficient than Plant 1.","b274321b":"## Read CSV ##","463934ad":"#### PLANT 2","93e24692":"### Splitting data and fitting into model","79e71562":"> * Ambient temperature goes down much later in the evening as compared to module temperature. This could mean that the specific heat capacity of the module is much lower than the specific heat capacity of the surrounding atmosphere.","7536b0cc":"# Training and Prediction","f6479a34":"> * Plant 2 has more extreme values in irradiation.\n> * Plant 2 has higher ambient temperature values.","d87446c2":"#### Convert DATE_TIME into datetime format ####","d2a84480":"## Merge sensor data and generation data","7f6ae963":"#### PLANT 2","7cf7ec3f":"# Key takeaways","3098f28d":"## Observe relationship between power generation data features ##","170570b8":"### Predicting from models"}}