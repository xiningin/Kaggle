{"cell_type":{"7a47990c":"code","75cfb528":"code","c0dc2a5a":"code","4b7f272a":"code","9c43f5a6":"code","f586cd24":"code","6138ff20":"code","1513ad04":"code","6f7ade5b":"code","129c5242":"markdown","19df5727":"markdown","581902e6":"markdown","7cb3da5f":"markdown","d12a9559":"markdown","c6b56583":"markdown","73d5009b":"markdown","74ea7d5b":"markdown"},"source":{"7a47990c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","75cfb528":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport pylab as pl\nimport numpy as np\n%matplotlib inline","c0dc2a5a":"df = pd.read_csv(\"..\/input\/spotify-dataset-19212020-160k-tracks\/data.csv\")\n\n# take a look at the dataset\ndf.head()","4b7f272a":"cdf = df[['acousticness','danceability','duration_ms','energy','explicit','instrumentalness','key','liveness','loudness','mode','popularity','speechiness','tempo','valence']]\ncdf.head(14)","9c43f5a6":"plt.scatter(cdf.instrumentalness, cdf.speechiness,  color='red')\nplt.xlabel(\"instrumentalness\")\nplt.ylabel(\"speechiness\")\nplt.show()","f586cd24":"msk = np.random.rand(len(df)) < 0.7\ntrain = cdf[msk]\ntest = cdf[~msk]","6138ff20":"plt.scatter(cdf.instrumentalness, cdf.speechiness,  color='red')\nplt.xlabel(\"instrumentalness\")\nplt.ylabel(\"speechiness\")\nplt.show()","1513ad04":"from sklearn import linear_model\nregr = linear_model.LinearRegression()\nx = np.asanyarray(train[['instrumentalness','duration_ms','energy']])\ny = np.asanyarray(train[['tempo']])\nregr.fit (x, y)\n# The coefficients\nprint ('Coefficients: ', regr.coef_)","6f7ade5b":"y_hat= regr.predict(test[['instrumentalness','duration_ms','energy']])\nx = np.asanyarray(test[['instrumentalness','duration_ms','energy']])\ny = np.asanyarray(test[['tempo']])\nprint(\"Sum of squares: %.4f\"\n      % np.mean((y_hat - y) ** 2))\n\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.4f' % regr.score(x, y))","129c5242":"5. Prediction","19df5727":"Train data distribution.","581902e6":"4. Multiple Regression Model","7cb3da5f":"Creating train and test dataset.","d12a9559":"1. Importing Needed Packages","c6b56583":"2. Understanding Data\n\n(spotify-dataset)data.csv\n\nacousticness eg - 0.991000 artists eg - ['Mamie Smith'] danceability eg - 0.598 duration_ms eg - 168333 energy eg - 0.224 explicit eg - 0 id eg - 0cS0A1fUEUd1EW3FcF8AEI instrumentalness eg - 0.000522 keyeg - 5 liveness eg - 0.3790 loudness eg - -12.628 mode eg - 0 name eg - Keep A Song In Your Soul popularity eg - 12 release_date eg - 1920\nspeechiness eg-0.0936 tempo eg-149.976\nvalence eg-0.6340\nyear eg-1920","73d5009b":"3. Reading the data in","74ea7d5b":"Selecting features for regression."}}