{"cell_type":{"f238c911":"code","824292c4":"code","76dc05de":"code","35a0e3db":"code","5339ceea":"code","9fbbe35b":"code","5d85e7e8":"code","5fec796b":"code","cf739dfb":"code","9de9b732":"code","29dcdd5a":"code","889ffc34":"code","55689b35":"code","8a405e0d":"code","45650c16":"code","dc179056":"code","156ef908":"code","32d63001":"code","9a903c4f":"code","736a9088":"code","67f4b739":"code","7b261f7d":"code","816029f4":"code","d649a171":"code","02880b93":"code","a5863701":"code","1eb1c1de":"code","dd305737":"code","487ef0ce":"code","e381f28c":"code","d475de95":"markdown","56bd5c47":"markdown","178e7651":"markdown"},"source":{"f238c911":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom matplotlib.ticker import MaxNLocator\nfrom pandas_profiling import ProfileReport\nimport math\nimport random\nimport os\nimport time\n","824292c4":"%time data = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')\nprint(data.shape)","76dc05de":"data.head()","35a0e3db":"data.info()","5339ceea":"#missing data\ntotal = data.isnull().sum().sort_values(ascending=False)\npercent = (data.isnull().sum()\/data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(6)","9fbbe35b":"#Dropping columns with NaN values\ndata= data.dropna()","5d85e7e8":"print(data.info())\nprint(data.describe())","5fec796b":"#Converting\ndata.isnull().sum()","cf739dfb":"#Checking for duplicates in thw whole dataset\nduplicate = data[data.duplicated()] \n  \nprint(\"Duplicate Rows :\") \n  \n# Print the resultant Dataframe \nduplicate ","9de9b732":"#Column: App\n#Checking for duplicates \nduplicate1 = data[data.duplicated('App')] \n  \nprint(\"Duplicate Rows :\") \n  \n# Print the resultant Dataframe \nduplicate1 ","29dcdd5a":"#Removing Duplicates\ndata = pd.concat([data, duplicate, duplicate1]).drop_duplicates(keep=False)","889ffc34":"#Column: Reviews\n#Checking if all values are numeric\ndata.Reviews.count() - data.Reviews.str.isnumeric().sum()\n#Since all values are numeric, hence we don't need to clean this column","55689b35":"#Column: Size\n#Converting 'Varies with device' to NaN\ndata['Size'].replace('Varies with device', np.nan, inplace = True ) ","8a405e0d":"data['Size']","45650c16":"#Removing M&k from size\ndata.Size = (data.Size.replace(r'[kM]+$', '', regex=True).astype(float) * \\\n             data.Size.str.extract(r'[\\d\\.]+([KM]+)', expand=False)\n            .fillna(1)\n            .replace(['k','M'], [10**3, 10**6]).astype(int))","dc179056":"#Now Replacing all the NaN values with the mean value of the column 'Size' \ndata['Size'].fillna(data.groupby('Category')['Size'].transform('mean'),inplace = True)","156ef908":"data['Size']","32d63001":"#Column: Installs\ndata.Installs.value_counts()","9a903c4f":"#Removing '+' and ','\ndata.Installs=data.Installs.apply(lambda x: x.strip('+'))\ndata.Installs=data.Installs.apply(lambda x: x.replace(',',''))\ndata.Installs.value_counts()","736a9088":"#Converting all data points to Numeric\ndata.Installs=pd.to_numeric(data.Installs)","67f4b739":"import plotly.express as px\ndf = px.data.tips()\nfig = px.histogram(data, x='Installs')\nfig.show()","7b261f7d":"#Column: Price\n#Removing '$'\ndata.Price=data.Price.apply(lambda x: x.strip('$'))","816029f4":"#Converting all data points to Numeric\ndata.Price=pd.to_numeric(data.Price)","d649a171":"data.Genres.unique()","02880b93":"#Using a separator to separate genres, make a df using crosstab and visualize it using stacked columns\nsep = ';'\nrest = data.Genres.apply(lambda x: x.split(sep)[0])\ndata['Prime_Genres']=rest\nrest1 = data.Genres.apply(lambda x: x.split(sep)[-1])\ndata['Second_Genres']=rest1\ngrouped = data.groupby(['Prime_Genres','Second_Genres'])\ntwowaytable = pd.crosstab(index=data[\"Prime_Genres\"],columns=data[\"Second_Genres\"])\ntwowaytable.plot(kind=\"barh\", figsize=(15,15),stacked=True)\nplt.legend(bbox_to_anchor=(1.0,1.0))","a5863701":"#Column: Last Updated\nfrom datetime import datetime,date\ntemp=pd.to_datetime(data['Last Updated'])\nprint(temp.head())\ndata['Last_Updated_Days'] = temp.apply(lambda x:date.today()-datetime.date(x))\nprint(data.Last_Updated_Days.head())","1eb1c1de":"data.info()","dd305737":"data = data.drop(columns = ['Android Ver'])","487ef0ce":"#Since Prime_genres and Second_genres are highly correlated to Category, we can safely remove those columns\ndata = data.drop(columns = ['Prime_Genres','Second_Genres'])","e381f28c":"data.head()","d475de95":"Among these 'Android Ver' can be replaced by 'Version_begin'","56bd5c47":"# Data Cleaning","178e7651":"Let's look at all the columns"}}