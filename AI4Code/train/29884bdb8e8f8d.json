{"cell_type":{"747cfe93":"code","b98b3461":"code","f7154eb2":"code","47842d5c":"code","a7587ac7":"code","a9872eaa":"code","febc3e6c":"code","4e795cb4":"code","d7f41526":"code","0603156a":"code","bebf827a":"code","550f19ad":"code","c95c0d85":"code","c4f5fd12":"code","9d9a4fa4":"code","4046c7f8":"code","8723fcb9":"code","8753097f":"code","832d02cd":"code","17d83a49":"code","304512ce":"code","06f23660":"code","fb0b94c2":"code","f9ac87bf":"code","8cadd63d":"code","b59a9480":"code","feb46c4b":"code","51e9d165":"code","189cf688":"code","ffe3281b":"code","eafb7ff8":"code","b126f270":"code","024eb685":"code","7e8dd169":"code","067fca4d":"code","322ac3cb":"code","53d0af3c":"code","6229932c":"code","3ddd8de1":"code","a83a01db":"code","2f0db6e3":"code","f6d93a0e":"code","5fbfce76":"code","57ecda6a":"code","dc76f593":"markdown","052ae871":"markdown","c9d16726":"markdown","3edce21e":"markdown","6bb14969":"markdown","c66b09d7":"markdown","6249fe62":"markdown","2b66f52f":"markdown"},"source":{"747cfe93":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b98b3461":"!pip install NRCLex","f7154eb2":"import matplotlib.pyplot as plt\nimport cufflinks as cf\nimport plotly\nimport plotly.express as px\nimport numpy as np\nimport re\nimport nltk\nimport plotly.graph_objs as go\nimport random\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib.image as mpimg\n\nfrom matplotlib.offsetbox import (TextArea, DrawingArea, OffsetImage,\n                                  AnnotationBbox)\nfrom matplotlib.cbook import get_sample_data\nfrom wordcloud import WordCloud,STOPWORDS\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom pandas import DataFrame\nfrom PIL import Image\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode,iplot,plot\nfrom nrclex import NRCLex\nfrom nltk.corpus import stopwords\nfrom colorama import Fore, Back, Style\ny_ = Fore.YELLOW\nr_ = Fore.RED\ng_ = Fore.GREEN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA\nstop = stopwords.words('english')","47842d5c":"cf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)","a7587ac7":"df = pd.read_csv('..\/input\/the-simpsons-dataset\/simpsons_script_lines.csv')\ndf.head(5)","a9872eaa":"df = df.head(6000)","febc3e6c":"df.shape","4e795cb4":"df = df.dropna()","d7f41526":"df['word_count'] = df['word_count'].astype(str).astype(int)","0603156a":"df.dtypes","bebf827a":"description_list=[]\nfor description in df['normalized_text']:\n    description=re.sub(\"[^a-zA-Z]\", \" \", description)\n    description=description.lower()\n    description=nltk.word_tokenize(description)\n    description=[word for word in description if not word in set(stopwords.words(\"english\"))]\n    lemma=nltk.WordNetLemmatizer()\n    description=[lemma.lemmatize(word) for word in description]\n    description=\" \".join(description)\n    description_list.append(description)\ndf[\"normalized_text_new\"]=description_list\ndf.head(5)","550f19ad":"for i,row in df.iterrows():\n    print(row['character_id'],row['raw_character_text'])","c95c0d85":"val_homer=[]\nval_bart=[]\nval_marge=[]\nval_lisa=[]\n\nfor i,row in df.iterrows():\n    val = row['normalized_text_new']\n    if row['character_id'] == 2:\n        val_homer.append(val)\n    elif row['character_id']== 8:\n        val_bart.append(val)\n    elif row['character_id'] == 1:\n        val_marge.append(val)\n    elif row['character_id']== 9:\n        val_lisa.append(val)    \n","c4f5fd12":"pat = r'\\b(?:{})\\b'.format('|'.join(stop))\ndef text_cleaning(val_list):\n    df1 = DataFrame (val_list,columns =['normalized_text_new']).dropna()\n    df1[\"normalized_text_new\"] = df1[\"normalized_text_new\"].str.replace(pat, '')\n    df1[\"normalized_text_new\"] = df1[\"normalized_text_new\"].str.replace(r'\\s+', ' ')\n    return df1","9d9a4fa4":"bart = text_cleaning(val_bart)\nhomer = text_cleaning(val_homer)\nmarge = text_cleaning(val_marge)\nlisa = text_cleaning(val_lisa)","4046c7f8":"wc = WordCloud()\nwc.generate(' '.join(bart['normalized_text_new']))\nplt.imshow(wc, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","8723fcb9":"wc = WordCloud(background_color=\"white\", max_words=2000,\n               stopwords=STOPWORDS, max_font_size=256,\n               random_state=42, width=500, height=500)\nwc.generate(' '.join(bart['normalized_text_new']))\nplt.imshow(wc, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","8753097f":"def wordcloud(char,img_path,color):\n    plt.subplots(figsize=(10,10))\n    mask = np.array(Image.open(img_path))\n    wc = WordCloud(stopwords=STOPWORDS, \n                   mask=mask, background_color=\"white\", contour_width=2, contour_color=color,\n                   max_words=2000, max_font_size=256,\n                   random_state=42, width=mask.shape[1],\n                   height=mask.shape[0])\n    wc.generate(' '.join(char['normalized_text_new']))\n    plt.imshow(wc, interpolation=\"bilinear\")\n    plt.axis('off')\n    plt.show()","832d02cd":"def get_top_n_words(corpus, n=None):\n    vec = CountVectorizer().fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in     vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\n\ndef get_top_n_bigram(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(2, 2)).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\n\n\ndef get_top_n_trigram(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(3, 3)).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]","17d83a49":"def plot(x,char,name,w,p):\n    common_words = x(char['normalized_text_new'], 20)\n    common_words_df = DataFrame (common_words,columns=['word','freq'])\n\n    plt.figure(figsize=(16, 10))\n    sns.barplot(x='word', y='freq', data=common_words_df,palette=p)\n    plt.title(\"Top 20 \"+w+\" used by \"+name, fontsize=16)\n    plt.ylabel(\"Frequency\", fontsize=14)\n    plt.yticks(fontsize=13)\n    plt.xticks(rotation=90, fontsize=13)\n    plt.xlabel(\"\");","304512ce":"wordcloud(bart,'..\/input\/intermediate-notebooks-data\/bart.png',\"orange\")","06f23660":"common_words = get_top_n_words(bart['normalized_text_new'], 20)\ncommon_words_df = DataFrame (common_words,columns=['word','freq'])\ncharacter_img = mpimg.imread('..\/input\/intermediate-notebooks-data\/bart1.jpg')\nimagebox = OffsetImage(character_img, zoom=0.07)\nxy = (0.5, 0.7)\nab = AnnotationBbox(imagebox, xy,\n                    xybox=(17, 37),\n                    pad=0.5,frameon=False\n                    )\nplt.figure(figsize=(16, 6))\nax = sns.barplot(x='word', y='freq', data=common_words_df,palette='OrRd')\nax.add_artist(ab)\n\nplt.title(\"Top 20 unigrams used by Bart\", fontsize=16)\nplt.ylabel(\"Frequency\", fontsize=14)\nplt.yticks(fontsize=13)\nplt.xticks(rotation=45, fontsize=13)\nplt.xlabel(\"\");","fb0b94c2":"plot(get_top_n_bigram,bart,\"Bart\",\"bigrams\",'OrRd')\nplot(get_top_n_trigram,bart,\"Bart\",\"trigrams\",'OrRd')","f9ac87bf":"wordcloud(lisa,'..\/input\/intermediate-notebooks-data\/lisa.jpg',\"orange\")","8cadd63d":"common_words = get_top_n_words(lisa['normalized_text_new'], 20)\ncommon_words_df = DataFrame (common_words,columns=['word','freq'])\ncharacter_img = mpimg.imread('..\/input\/intermediate-notebooks-data\/lisa1.jpg')\nimagebox = OffsetImage(character_img, zoom=0.4)\nxy = (0.5, 0.7)\nab = AnnotationBbox(imagebox, xy,\n                    xybox=(16, 30),\n                    pad=0.5,frameon=False\n                    )\nplt.figure(figsize=(16, 6))\nax = sns.barplot(x='word', y='freq', data=common_words_df,palette='PuRd')\nax.add_artist(ab)\n\nplt.title(\"Top 20 unigrams used by Lisa\", fontsize=16)\nplt.ylabel(\"Frequency\", fontsize=14)\nplt.yticks(fontsize=13)\nplt.xticks(rotation=45, fontsize=13)\nplt.xlabel(\"\");","b59a9480":"plot(get_top_n_bigram,lisa,\"Lisa\",\"bigrams\",\"PuRd\")\nplot(get_top_n_trigram,lisa,\"Lisa\",\"trigrams\",\"PuRd\")","feb46c4b":"wordcloud(homer,'..\/input\/intermediate-notebooks-data\/homer.jpg',\"green\")","51e9d165":"common_words = get_top_n_words(homer['normalized_text_new'], 20)\ncommon_words_df = DataFrame (common_words,columns=['word','freq'])\ncharacter_img = mpimg.imread('..\/input\/intermediate-notebooks-data\/homer1.jpg')\nimagebox = OffsetImage(character_img, zoom=0.2)\nxy = (0.5, 0.7)\nab = AnnotationBbox(imagebox, xy,\n                    xybox=(17, 78),\n                    pad=0.5,frameon=False\n                    )\nplt.figure(figsize=(16, 7))\nax = sns.barplot(x='word', y='freq', data=common_words_df,palette='BuPu')\nax.add_artist(ab)\n\nplt.title(\"Top 20 unigrams used by Homer\", fontsize=16)\nplt.ylabel(\"Frequency\", fontsize=14)\nplt.yticks(fontsize=13)\nplt.xticks(rotation=45, fontsize=13)\nplt.xlabel(\"\");","189cf688":"plot(get_top_n_bigram,homer,\"Homer\",\"bigrams\",'BuPu')\nplot(get_top_n_trigram,homer,\"Homer\",\"trigrams\",'BuPu')","ffe3281b":"wordcloud(marge,'..\/input\/intermediate-notebooks-data\/marge7.png',\"green\")","eafb7ff8":"common_words = get_top_n_words(marge['normalized_text_new'], 20)\ncommon_words_df = DataFrame (common_words,columns=['word','freq'])\n\ncharacter_img = mpimg.imread('..\/input\/intermediate-notebooks-data\/marge2.jpg')\nimagebox = OffsetImage(character_img, zoom=0.18)\nxy = (0.5, 0.7)\nab = AnnotationBbox(imagebox, xy,\n                    xybox=(17, 65),\n                    pad=0.5,frameon=False\n                    )\nplt.figure(figsize=(16, 6))\nax = sns.barplot(x='word', y='freq', data=common_words_df,palette='GnBu')\nax.add_artist(ab)\n\nplt.title(\"Top 20 unigrams used by Marge\", fontsize=16)\nplt.ylabel(\"Frequency\", fontsize=14)\nplt.yticks(fontsize=13)\nplt.xticks(rotation=45, fontsize=13)\nplt.xlabel(\"\");","b126f270":"plot(get_top_n_bigram,marge,\"Marge\",\"bigrams\",'GnBu')\nplot(get_top_n_trigram,marge,\"Marge\",\"trigrams\",'GnBu')","024eb685":"text_object = NRCLex(' '.join(df['normalized_text_new']))","7e8dd169":"text_object.affect_frequencies","067fca4d":"text_object.top_emotions","322ac3cb":"sentiment_scores = pd.DataFrame(list(text_object.raw_emotion_scores.items())) ","53d0af3c":"sentiment_scores = sentiment_scores.rename(columns={0: \"Sentiment\", 1: \"Count\"})\nsentiment_scores","6229932c":"fig = px.pie(sentiment_scores, values='Count', names='Sentiment',\n             title='Sentiment Scores',\n             hover_data=['Sentiment'])\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","3ddd8de1":"sentiment = sentiment_scores['Sentiment'].to_list()\nsentiment","a83a01db":"sentiment_words = pd.DataFrame(list(text_object.affect_dict.items()),columns = ['words','sentiments'])\nsentiment_words","2f0db6e3":"for y in sentiment:\n    sentiment_words[y] = 9\nsentiment_words","f6d93a0e":"a=0\nfor i in sentiment_words['sentiments']: \n    for y in sentiment:\n        sentiment_words[y][a] = int(y in i)\n    a=a+1","5fbfce76":"sentiment_words.head(5)","57ecda6a":"for y in sentiment:\n    word_list = sentiment_words[sentiment_words[y]== 1].words.head(10)\n    print(f\"{y_}Sentiment:{y}\")\n    print(f\"{r_}{word_list.values}\\n\")","dc76f593":"<div>\n<center><img src=\"https:\/\/i.imgur.com\/RZnmNC3.gif\" width=\"500\" height=\"500\"><\/center>\n<center><img src=\"https:\/\/habrastorage.org\/webt\/t6\/sr\/jr\/t6srjrmjjmm6qn8gpld9emy4txu.gif\" width=\"500\" height=\"500\"><\/center>\n<\/div>\n\n\n<div class=\"alert alert-block alert-info\">  \n<h1><strong><center>The Simpsons<\/center><\/strong><\/h1>\n    <p>The Simpsons is an American animated sitcom created by Matt Groening. The series is a satirical depiction of working-class life, epitomized by the Simpson family, which consists of Homer, Marge, Bart, Lisa, and Maggie. The show is set in the fictional town of Springfield and parodies American culture and society, television, and the human condition.\n    <\/p>\n<\/div>","052ae871":"# Text preprocessing","c9d16726":"# Word Clouds","3edce21e":"# Imports","6bb14969":"# NRCLex\nNRCLex will measure emotional affect from a body of text. Affect dictionary contains approximately 27,000 words, and is based on the National Research Council Canada (NRC) affect lexicon and the NLTK library's WordNet synonym sets.\n\nEmotional affects measured include the following:\n\n* fear\n* anger\n* anticipation\n* trust\n* surprise\n* positive\n* negative\n* sadness\n* disgust\n* joy","c66b09d7":"# Work in progress..\n![](https:\/\/media.tenor.com\/images\/c93f6b355513bf7c1b3c415a83323fcd\/tenor.gif)","6249fe62":"# A quick look at the data we're working with","2b66f52f":"# Unigrams, Bigrams and Trigrams"}}