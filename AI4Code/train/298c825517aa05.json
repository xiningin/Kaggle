{"cell_type":{"75b1596a":"code","f11590e2":"code","4c8f2c2a":"code","2fec3110":"code","810ed737":"code","558ccc81":"code","12553038":"code","e3f6ef02":"code","5c7cd0c5":"code","3baa3e45":"code","483386dc":"code","28a92dd0":"code","2eae9b9c":"markdown","566444ea":"markdown","43eed034":"markdown"},"source":{"75b1596a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport xgboost\nimport os","f11590e2":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4c8f2c2a":"train_df = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')\ntrain_df","2fec3110":"x_train = train_df.drop(['Unnamed: 32', 'id', 'diagnosis'], axis=1)\ny_train = train_df.diagnosis\n\nprint(\"Features\", x_train)\nprint(\"Labels\", y_train)","810ed737":"B, M = y_train.value_counts()\n\nprint('Number of Benign: ' , B)\nprint('Number of Malignant : ' , M)","558ccc81":"f,ax = plt.subplots(figsize=(18, 18))\ncorr_mat = sns.heatmap(x_train.corr(), cmap='coolwarm', annot=False, linewidths=.5, fmt= '.1f',ax=ax)","12553038":"from sklearn.svm import SVC\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_selection import RFECV\n\n# Create the RFE object and compute a cross-validated score.\nsvc = SVC(kernel='linear')\nrfecv = RFECV(estimator=svc, step=1, cv=StratifiedKFold(2), scoring='accuracy')\nrfecv.fit(x_train.values, y_train.values)\n\nprint(\"Optimal number of features : %d\" % rfecv.n_features_)","e3f6ef02":"best_features = list(x_train.columns[rfecv.support_])\nprint('Best features :', best_features)","5c7cd0c5":"f,ax = plt.subplots(figsize=(12, 12))\ncorr_mat = sns.heatmap(x_train[best_features].corr(), cmap='coolwarm', annot=False, linewidths=.5, fmt= '.1f',ax=ax)","3baa3e45":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\ndef preprocess(X):\n    #extracting chosen features\n    X = X[best_features]\n    #Standardizing Features\n    sc = StandardScaler()\n    X = sc.fit_transform(X)\n    return X\n\nx_train = preprocess(x_train)\nx_train","483386dc":"x_train, x_test, y_train, y_test = train_test_split(x_train, y_train, \n                                                    test_size=0.20, random_state=42, shuffle=False)","28a92dd0":"model = xgboost.XGBClassifier()\nmodel.fit(x_train, y_train)\nprediction = model.predict(x_test)\n\naccuracy = accuracy_score(y_test, prediction) * 100\nconfusion = confusion_matrix(y_test, prediction)\nprecision = confusion[0][0]\/(confusion[0][0] + confusion[1][0]) * 100\nxg_recall1 = confusion[0][0]\/(confusion[0][0] + confusion[0][1]) * 100\nscore = ((2 * precision * xg_recall1) \/ (precision + xg_recall1)) \/ 100\n\nprint(\"Accuracy:\", accuracy)\nprint(\"Precision:\", precision)\nprint(\"Score:\", score)","2eae9b9c":"# **Load and Read Data**","566444ea":"# **Creating and Training the Model**","43eed034":"# **Preprocessing the Data**"}}