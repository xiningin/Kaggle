{"cell_type":{"1abd050e":"code","3489c517":"code","fb70e8eb":"code","35241840":"code","6a0f70a1":"code","58129963":"code","538c873c":"code","de88637c":"code","88861e27":"code","e5c4191d":"code","3210397e":"code","e7ddc4b3":"code","180ee5cc":"code","1cb0968d":"code","5f43df17":"code","c7a5d28d":"code","8c4b8369":"code","05285672":"code","596d0a1c":"code","7fc436ff":"markdown","be70c980":"markdown","b3713837":"markdown","2631d166":"markdown","0ee6fa81":"markdown","70aa35eb":"markdown","29db4b90":"markdown","c917a2dd":"markdown","f07b1f7e":"markdown","0f80bf62":"markdown"},"source":{"1abd050e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3489c517":"df = pd.read_csv('\/kaggle\/input\/cardiovascular-disease-dataset\/cardio_train.csv',sep=';')\ndf.head()","fb70e8eb":"df.drop('id', axis = 1, inplace = True)\ndf.info()","35241840":"print(\"{} rows are same\".format(df.duplicated().sum()))","6a0f70a1":"dp = df[df.duplicated(keep=False)]\ndp = dp.sort_values(by=['age', \"gender\", \"height\"], ascending= False)\ndp.head(2)","58129963":"df.drop_duplicates(inplace= True)\nprint(\"{} rows are same\".format(df.duplicated().sum()))","538c873c":"df.describe().T","de88637c":"plt.figure(figsize=(14,6))\nplt.subplot(1,2,1)\nsns.boxplot(x='cardio',y='height',data=df,palette='winter')\nplt.subplot(1,2,2)\nsns.boxplot(x='cardio',y='weight',data=df,palette='summer')\nplt.show()","88861e27":"df[\"bmi\"] = (df[\"weight\"] \/ (df[\"height\"] \/ 100)**2).round(1)\ndf.head()","e5c4191d":"df = df[(df[\"bmi\"]>10) & (df[\"bmi\"]<100)]","3210397e":"df.drop([\"weight\",\"height\"],axis = 1,inplace = True)","e7ddc4b3":"df = df[(df['ap_hi'] < 250) & (df['ap_lo'] < 200)]\ndf = df[(df['ap_hi'] > 20) & (df['ap_lo'] > 20)]\n\ndf['age'] =  df['age'] \/ 365","180ee5cc":"df.head()","1cb0968d":"df['cholesterol'].unique()","5f43df17":"df['cholesterol'] = df['cholesterol'].map({ 1: 'normal', 2: 'aboveNormal', 3: 'wellAboveNormal'})\ndf['gluc']=df['gluc'].map({ 1: 'normal', 2: 'aboveNormal', 3: 'wellAboveNormal'})\n\ndummies = pd.get_dummies(df[['cholesterol','gluc']])\n\n\nfinal_df = pd.concat([df,dummies],axis=1)\nfinal_df.drop(['cholesterol','gluc'],axis=1,inplace=True)\nfinal_df.head()","c7a5d28d":"final_df[\"gender\"] = final_df[\"gender\"] % 2\nfinal_df.head()","8c4b8369":"y = final_df[\"cardio\"]\nX = final_df.drop(\"cardio\", axis = 1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=17)","05285672":"print('Train set shape is',format(X_train.shape))\nprint('Test set shape is',format(X_test.shape))","596d0a1c":"logreg = LogisticRegression(solver='liblinear')\n\nlogreg.fit(X_train,y_train)\n\ny_pred = pd.Series(logreg.predict(X_test))\n\naccuracy_score(y_test,y_pred)","7fc436ff":"## Data Preprocessing\nWe can add BMI value to our dataset with small math.","be70c980":"We don't need the id column so that we can remove it","b3713837":"Let's remove dublicated rows","2631d166":"# Logistic Regression","0ee6fa81":"# Data Visualization","70aa35eb":"# Test Train Split","29db4b90":"In this notebook, I will apply very simple binary classifiaction problem. ","c917a2dd":"# Import Necessary Libraries","f07b1f7e":"# Data Description\n\n1. **Age** | Objective Feature | age | int (days)\n2. **Height** | Objective Feature | height | int (cm) |\n3. **Weight** | Objective Feature | weight | float (kg) |\n4. **Gender** | Objective Feature | gender | categorical code |\n5. **Systolic blood pressure** | Examination Feature | ap_hi | int |\n6. **Diastolic blood pressur**e | Examination Feature | ap_lo | int |\n7. **Cholesterol** | Examination Feature | cholesterol | 1: normal, 2: above normal, 3: well above normal |\n8. **Glucose** | Examination Feature | gluc | 1: normal, 2: above normal, 3: well above normal |\n9. **Smoking** | Subjective Feature | smoke | binary |\n10. **Alcohol intake** | Subjective Feature | alco | binary |\n11.**Physical activity** | Subjective Feature | active | binary |\n12. **Presence or absence of cardiovascular disease** | Target Variable | cardio | binary |\n","0f80bf62":"# Read Data"}}