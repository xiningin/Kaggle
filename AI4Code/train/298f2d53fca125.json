{"cell_type":{"021ffa52":"code","32787c38":"code","a4cd8953":"code","6cbff609":"code","a597378a":"code","d82205ce":"code","1f9b747b":"code","5c03befc":"code","05a5ca50":"code","1d2b26fa":"code","b37d8971":"code","84e68c87":"code","57899a39":"code","0611485a":"code","4ce145ab":"code","b37a568a":"code","fb3e9707":"code","2d6ab354":"code","4e719386":"markdown","2299b1d3":"markdown","31011df9":"markdown","f47c1c99":"markdown","2ffe94a4":"markdown","9aa4c5bd":"markdown","aaa2bb21":"markdown","cfedb367":"markdown","91c79b43":"markdown","26f588bb":"markdown","6ef777a6":"markdown","5a4270df":"markdown","28027b5e":"markdown","1ee4fce3":"markdown"},"source":{"021ffa52":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ntrain_df = pd.read_csv('..\/input\/tabular-playground-series-feb-2022\/train.csv')\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-feb-2022\/test.csv')\n\nrow_id = test_df['row_id']\ntrain_df = train_df.drop('row_id', axis = 1)\ntest_df = test_df.drop('row_id', axis = 1)\n\ntrain_df.head()","32787c38":"!pip install pycaret","a4cd8953":"from pycaret.classification import *\n\nmult_classification = setup(data = train_df, target = 'target', session_id = 123, fold_shuffle= True, train_size = 0.8, use_gpu= True, silent = True)","6cbff609":"# best_model = compare_models(n_select = 4, fold = 5)","a597378a":"models()","d82205ce":"Ext_Classifier = create_model('et')","1f9b747b":"Rf_Classifier = create_model('rf')","5c03befc":"dt_Classifier = create_model('dt')","05a5ca50":"knn_Classifier = create_model('knn')","1d2b26fa":"plot_model(Ext_Classifier, plot = 'confusion_matrix')","b37d8971":"plot_model(Ext_Classifier, plot = 'class_report')","84e68c87":"plot_model(Ext_Classifier, plot='boundary')","57899a39":"plot_model(Ext_Classifier, plot = 'error')","0611485a":"# blender = blend_models(estimator_list = [Ext_Classifier, Rf_Classifier, dt_Classifier, knn_Classifier])","4ce145ab":"# stacking = stack_models(estimator_list = [Ext_Classifier, Rf_Classifier, dt_Classifier, knn_Classifier])","b37a568a":"ensemble = ensemble_model(Ext_Classifier, method = 'Boosting')","fb3e9707":"# blen_label = predict_model(blender, data = test_df)\n# stack_label = predict_model(stacking, data = test_df)\nensemble_label = predict_model(ensemble, data = test_df)","2d6ab354":"# choose option!\n# submit = pd.DataFrame({\n#     'row_id' : row_id,\n#     'target' : blen_label['Label']\n# })\n\n# submit.to_csv('submission(blend).csv', index = False)\n\n# submit = pd.DataFrame({\n#     'row_id' : row_id,\n#     'target' : stack_label['Label']\n# })\n\n# submit.to_csv('submission(stack).csv', index = False)\n\nsubmit = pd.DataFrame({\n    'row_id' : row_id,\n    'target' : ensemble_label['Label']\n})\n\nsubmit.to_csv('submission(Ensemble).csv', index = False)","4e719386":"# Create Variety Model\n\ncreate_model is the most granular function in PyCaret and is often the foundation behind most of the PyCaret functionalities. \n\nAs the name suggests this function trains and evaluates a model using cross validation that can be set with fold parameter.\n\nThis selector mean top performing or idea for this type of data. (just, illustration)\n\n\nStaking Model  AC - 96.9%<br>\nBlending Model  AC- 93.3%<br>\nEnsemble Model  AC- 95.6%","2299b1d3":"# Blending Model\n![image.png](attachment:a5cf8839-cf90-43d7-a830-1c66e6b005ad.png)","31011df9":"# Submit & Conclusion","f47c1c99":"You can see available model","2ffe94a4":"# Import Pycaret","9aa4c5bd":"# Load Dataset","aaa2bb21":"# reference Link\n\nPycaret : https:\/\/pycaret.readthedocs.io\/en\/latest\/index.html","cfedb367":"# Stacking Model\n![image.png](attachment:f52aab51-b6d8-4e24-98f2-ac0dd074e455.png)","91c79b43":"### It is still in the early stage, sometimes there's an error, but it's well Work. Don't Worry","26f588bb":"# Upvote! It's Free.","6ef777a6":"<img src = 'https:\/\/ichi.pro\/assets\/images\/max\/724\/1*-REN2wCkTiWKo66_kSPP2g.png'>\n\nIt's very simple and useful Skill!, It's make great score faster. I recommand this library.\n\n**If you want study more this library. reference below Link!**\n\nStaking Model  AC - 96.9%<br>\nBlending Model  AC- 93.3%<br>\nEnsemble Model  AC- 95.6%\n\n**It's not use GridSearchCV, just Default Model. I think if you using GridSearchCV, and Tune Hyper Parameter. You get great Best Score.** \n\n**If you useful or helpful, Upvote! Thanks for reading**\n\n## Contents\n\n- Load Dataset\n- import Pycaret\n- Setting Enviroment in Pycaret\n- Compare All Models\n- Create Model\n- Model Data Visualization\n- Model\n- predict test Data\n- submission","5a4270df":"# Compare All Models\n<hr>\n\nit work default 10 times KFOLD and if you want to change fold parameter,you can use parameter  ex (fold = 5)\n\nThe grid by default is sorted using 'Accuracy' (highest to lowest) which can be changed by passing the sort parameter.\n\n**but It's so slow. if you want to see run code.**\n![image.png](attachment:c35ce37a-efc6-451f-a85b-6fc87849d943.png)","28027b5e":"# Data & Model Visualization","1ee4fce3":"# Ensemble Model\n- Method for ensembling base estimator. It can be \u2018Bagging\u2019 or \u2018Boosting'"}}