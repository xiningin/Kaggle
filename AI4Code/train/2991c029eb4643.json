{"cell_type":{"c10dc409":"code","44af61d5":"code","6d75c510":"code","4f092195":"code","61aa1564":"code","a729884b":"code","668715e7":"code","cc010445":"code","4ba21e45":"code","6c6b834c":"code","e0047bec":"code","c0dd5b71":"code","e6812a7a":"code","962307d1":"code","dc7cb34a":"code","879f7062":"code","78b3bf1f":"code","b2345cb3":"code","6905cab5":"code","7b2b3539":"code","465f1f30":"code","2ecc25a3":"code","06f52469":"code","59459439":"code","33674e22":"code","1a020dee":"code","f47a9f8e":"code","6e797ccf":"code","546e8f33":"markdown","0784e214":"markdown","08a40f81":"markdown","454de3d3":"markdown","f48b6267":"markdown","933f41ce":"markdown","89b7bfcd":"markdown","87ce0d5a":"markdown","94b5ecd1":"markdown"},"source":{"c10dc409":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","44af61d5":"data = pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")","6d75c510":"data.head() #pelvic_tilt numeric isimlendirmesi bizim i\u00e7in s\u0131k\u0131nt\u0131  bir isimlendirme","4f092195":"data_columns_v2 = [\"pelvic_incidence\",\"pelvic_tilt_numeric\",\"lumbar_lordosis_angle\",\"sacral_slope\",\"pelvic_radius\",\"degree_spondylolisthesis\",\"class\"]\ndata.columns = data_columns_v2\ndata.head()","61aa1564":"data.info()","a729884b":"# Let's int the properties with string values\n\ndata[\"class\"] = [1 if each == \"Abnormal\" else 0 for each in data[\"class\"]]\ndata.head()","668715e7":"# For train and test : Determining the x and y values.\n\ny = data[\"class\"].values\n\nx_data = data.drop([\"class\"], axis=1)","cc010445":"# Normaization\n\nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data))","4ba21e45":"# Let's set the data according to the class values\n\nANO = data[data[\"class\"] == 1]\n\nNO = data[data[\"class\"] == 0]","6c6b834c":"ANON = ANO[\"class\"].count()\nNON = NO[\"class\"].count()\n\nlabels = \"Abnormal\",\"Normal\"\nsizes = [ANON,NON]\nexplode = (0, 0.3)  # only \"explode\" the 2nd slice (i.e. 'Hogs')\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode,labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.title(\"Abnormal and Normal\")\n\nplt.show()","e0047bec":"# Let's set the data according to the class values\n\nANO = data[data[\"class\"] == 1]\n\nNO = data[data[\"class\"] == 0]","c0dd5b71":"import plotly.graph_objects as go\n\nx_data = [[\"Abnormal\",\"Normal\"],[\"Abnormal\",\"Normal\"],[\"Abnormal\",\"Normal\"],[\"Abnormal\",\"Normal\"],[\"Abnormal\",\"Normal\"],[\"Abnormal\",\"Normal\"]]\n\ny0 = ANO[\"pelvic_incidence\"]\ny1 = NO[\"pelvic_incidence\"]\n\ny2 = ANO[\"pelvic_tilt_numeric\"]\ny3 = NO[\"pelvic_tilt_numeric\"]\n\ny4 = ANO[\"lumbar_lordosis_angle\"]\ny5 = NO[\"lumbar_lordosis_angle\"]\n\ny6 = ANO[\"sacral_slope\"]\ny7 = NO[\"sacral_slope\"]\n\ny8 = ANO[\"pelvic_radius\"]\ny9 = NO[\"pelvic_radius\"]\n\ny10 = ANO[\"degree_spondylolisthesis\"]\ny11 = NO[\"degree_spondylolisthesis\"]\n\n\ny_data = [[y0, y1],[y2, y3],[y4,y5],[y6,y7],[y8,y9],[y10,y11]]\n\ncolors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)', 'rgba(44, 160, 101, 0.5)',\n          'rgba(255, 65, 54, 0.5)', 'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)','rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)', 'rgba(44, 160, 101, 0.5)',\n          'rgba(255, 65, 54, 0.5)', 'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)']\n\nfig = plt.figure(figsize=(6,2))\n\nfor xd, yd, cls,columns in zip(x_data, y_data, colors,data.columns):\n        \n    fig= go.Figure()\n    fig.add_trace(go.Box(\n        y=yd[0],\n        name=xd[0],\n        boxpoints='all',\n        jitter=0.5,\n        whiskerwidth=0.2,\n        fillcolor=cls,\n        marker_size=2,\n        line_width=1))\n        \n    fig.add_trace(go.Box(\n        y=yd[1],\n        name=xd[1],\n        boxpoints='all',\n        jitter=0.5,\n        whiskerwidth=0.2,\n        fillcolor=cls,\n        marker_size=2,\n        line_width=1),)\n        \n\n    fig.update_layout(\n        yaxis=dict(\n                                                                                            \n            title=columns,\n            autorange=True,\n            showgrid=True,\n            zeroline=True,\n            dtick=5,\n            gridcolor='rgb(255, 255, 255)',\n            gridwidth=1,\n            zerolinecolor='rgb(255, 255, 255)',\n            zerolinewidth=2,),\n        margin=dict(\n            l=40,\n            r=30,\n            b=40,\n            t=100,\n        ),\n        paper_bgcolor='rgb(243, 243, 243)',\n        plot_bgcolor='rgb(243, 243, 243)',\n        showlegend=False\n    )\n\n    fig.show()\n    \n   \nplt.show()","e6812a7a":"plt.figure(figsize=(15,10))\n\nplt.subplot(231)\nsns.boxplot(data[\"class\"],data[\"pelvic_incidence\"])\nplt.subplot(232)\nsns.boxplot(data[\"class\"],data[\"pelvic_tilt_numeric\"])\nplt.subplot(233)\nsns.boxplot(data[\"class\"],data[\"lumbar_lordosis_angle\"])\nplt.subplot(234)\nsns.boxplot(data[\"class\"],data[\"sacral_slope\"])\nplt.subplot(235)\nsns.boxplot(data[\"class\"],data[\"pelvic_radius\"])\nplt.subplot(236)\nsns.boxplot(data[\"class\"],data[\"degree_spondylolisthesis\"])\n\n\nplt.show()","962307d1":"data.corr()","dc7cb34a":"sns.pairplot(data, hue=\"class\")","879f7062":"# Train Test Split\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.3, random_state=43)","78b3bf1f":"# knn model 2\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors = 3) # k\n\nknn.fit(x_train,y_train)","b2345cb3":"# predict 1\n\npredict = knn.predict(x_test)\npredict","6905cab5":"print(\" {} nn score: {} \".format(3,knn.score(x_test,y_test)))","7b2b3539":"# find k value\nscore_list = []\nfor each in range(1,15):\n    knn2 = KNeighborsClassifier(n_neighbors = each)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\n    \nplt.figure(figsize=(20,10))\nplt.plot(range(1,15),score_list)\n\nplt.show()","465f1f30":"# knn model 2\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors = 11) # k\n\nknn.fit(x_train,y_train)","2ecc25a3":"# predict 2\n\npredict = knn.predict(x_test)\npredict","06f52469":"print(\" {} nn score: {} \".format(11,knn.score(x_test,y_test)))","59459439":"predict","33674e22":"y_test","1a020dee":"Test = np.concatenate((y_test,predict), axis=0)\n\nTest = Test.reshape(2,93)\n\nTest","f47a9f8e":"x_test","6e797ccf":"deger = x_test\ndeger = deger.reset_index() \ndeger[\"Real_Values\"] = [\"Abnormal\" if each == 0 else \"Normal\" for each in y_test]\ndeger[\"Test_Values\"] = [\"Abnormal\" if each == 0 else \"Normal\" for each in predict]\ndeger[\"Difference\"] = -(y_test - predict)\n\ndeger","546e8f33":"## Libraries","0784e214":"## Visualization 1","08a40f81":"## Data Review","454de3d3":"## Visualization 3","f48b6267":"## Visualization 2\n","933f41ce":"# K nearest neighborhood (KNN) Classification with Orthopedic Diseases","89b7bfcd":"## Train the Model\n","87ce0d5a":"## Test","94b5ecd1":"## Visualization 4"}}