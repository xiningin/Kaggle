{"cell_type":{"ce07cee0":"code","3d10bc86":"code","cd5e1fe4":"code","dfba3969":"code","9f031972":"code","52723103":"code","6ee70ffb":"markdown","3373b21b":"markdown","148362b6":"markdown","5be4cf5c":"markdown","dab0473e":"markdown","58c446b3":"markdown"},"source":{"ce07cee0":"import base64\n\ndata = 'AQAAAAENAr\/nvMzW5ZzOJutsnm7hTZRMq2bTKY\/cm3a1wljY6aSXCrZ16FI8atZdCA2tHbhuLJPm\/7ZXRICMEhf0e0V6Es0AA0+VntJJq9D\/ZwDwekCneMjDxjslyms7pVWfgManloXwECOrN48v\/N+Nkk6+VHVevCeCSP6txuxkOiw4zYizBHMBBLWUJfGhTA5uVZl5NB8\/twaGxxF4qAGBoOtJ+ooMjjIZdM+FSvoZYQv53IQkzJtxenfwoUS9g3Io8K0iNg4SQWIABknicaGVJjYz6ik5iHeZkXg5A8TSqteAboGB76PPF\/wcDXK6kAolDMf6tf1m4sAKo8maKK8KDziyuPOiZk9IGIcBCTFZtMmLjz\/43bg58+WIZoZEZ7el6PrJ1j5LWvkHXBvXC5XZpQBDNdm2lGTo9i9CWYiiglsBTI5HzACXfBtDDxcACt+f6HC6EpbIFvwaYYX13yVHWDjE45qmf\/Cglcy9R6MmUzUX9YjMwuoEn7u8H6BnE0MMgkq8SatlWP\/eZS4AKG4AC\/ZxCxUGxRIq98y83S7\/OvQ3fR8TkYAv+MUAFi\/Yt1nxXIiDPDwYRKvFJQHc7rNPWeP8ADrM+5DAgSoySCK+w84ADEGHwICVkvwTmRHeoIyOzDjm1dqCGMVnZ5BtH+oA\/NwED7NJE+hgwaY3SUZ8LDuiwjx7erNtYpG61HIyDhu5vWkADWA+G8B+HBlxiBikqNZascrxb9RMTiqHRSCyHor8bm1gCRerkOSvwB86GUuyuvCau8i1JY\/N4hNLc3RLRIxsDYoBDsJn1uuJcxv4jwv22I3Whq\/0vA9Igvy7ESleSJdYirCJCTL3y4KsMI\/zBrO03FOFBRx4gMxmZ48rXrGfCPm9AWQAD5iV+AHg3fsrhtWSbCPDS0mBmdp5BVAQleBOLg8zDlcHAKTmfMrlNf6JuYXc\/r60bKWdFqOMwg71rfVLY9tf4csAEOUbQQGcg0vfUkYGsN4F6MZRD\/O23h4hgJ52x3xptY5iDprBqGbTnCFAcIe1s22RoVpeNMmET\/8zx7Nf9nBeJaoAElyQkfmIfXD+krIfUqxIHLs8OWPpQcOvzj52xhPyb1IHbK9q8\/v\/Zun\/2QkOb07hpw3bw6bq+k8uCODmsJTKBP0BYZwBm7IiAQAABQAAAAAAAAAAAAAAAFpYUFqW0dv435HLIbVEGfw26T\/eAAAAAAAACPsPAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABybIs09AAAAAAAAAAAAAAAAaSWXsAnRPEBJqUfKsiObfWUXh18ABQAAAAAAAAAAAAAAAAxYWm423i6lqhxECPxaa4xNaQo\/AAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=='\nbase64_bytes = data.encode('utf-8')\nmessage_bytes = base64.b64decode(base64_bytes).hex()\nprint(message_bytes)\n","3d10bc86":"print('Chain ID is: ', message_bytes[len(message_bytes)-349])\n","cd5e1fe4":"print(message_bytes.count('0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde'))","dfba3969":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json\nimport requests\n\npolygon = '0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde'\nsolana = 'ec7372995d5cc8732397fb0ad35c0121e0eaa90d26f828a534cab54391b3a4f5'\nethereum = '0000000000000000000000003ee18b2214aff97000d974cf647e7c347e8fa585' \nbsc = '000000000000000000000000b6f6d86a8f9879a9c87f643768d9efc38c1da6e7' \n\nflipside_data = requests.get('https:\/\/api.flipsidecrypto.com\/api\/v2\/queries\/358ed1a9-5556-48f9-ada2-f0fc29a4f3e2\/data\/latest')\nTerra_Wormhole = pd.DataFrame(flipside_data.json())\nchainID = []\npolygon_ID = []\nsolana_ID = []\nethereum_ID = []\nbsc_ID = []\naddress = []\nvaa_data = []\nsender = Terra_Wormhole['SENDER']\nfor index, row in Terra_Wormhole[['VAA_DATA']].iterrows():\n    data = row['VAA_DATA']\n    base64_bytes = data.encode('utf-8')\n    message_bytes = base64.b64decode(base64_bytes).hex()\n#    chainID.append(message_bytes[len(message_bytes)-349])\n    address.append(sender[index])\n    chainID.append(message_bytes.count(solana) * 1 + message_bytes.count(ethereum) * 2 + message_bytes.count(bsc) * 4 + message_bytes.count(polygon) * 5)\n#    polygon_ID.append(message_bytes.count(polygon))\n#    solana_ID.append(message_bytes.count(solana))\n#    ethereum_ID.append(message_bytes.count(ethereum))\n#    bsc_ID.append(message_bytes.count(bsc))\n#    vaa_data.append(message_bytes)\n\nWormhole_data = {'Address': address, 'Chain ID': chainID} \nWormhole_data = pd.DataFrame(proposition_dict)\nWormhole_data.to_csv('Wormhole_data.csv', index=False)\n\n\n","9f031972":"Wormhole_data['Chain ID'].value_counts()\n","52723103":"Wormhole_data.groupby('Chain ID').Address.nunique()\n","6ee70ffb":"This can be separated into:\n\nVersion: 01\n\nSome data: 000000010d02bfe7bcccd6e59cce26eb6c9e6ee14d944cab66d3298fdc9b76b5c258d8e9a4970ab675e8523c6ad65d080dad1db86e2c93e6ffb65744808c1217f47b457a12cd00034f959ed249abd0ff6700f07a40a778c8c3c63b25ca6b3ba5559f80c6a79685f01023ab378f2ffcdf8d924ebe54755ebc278248feadc6ec643a2c38cd88b304730104b59425f1a14c0e6e559979341f3fb70686c71178a80181a0eb49fa8a0c8e321974cf854afa19610bf9dc8424cc9b717a77f0a144bd837228f0ad22360e124162000649e271a195263633ea293988779991783903c4d2aad7806e8181efa3cf17fc1c0d72ba900a250cc7fab5fd66e2c00aa3c99a28af0a0f38b2b8f3a2664f48188701093159b4c98b8f3ff8ddb839f3e58866864467b7a5e8fac9d63e4b5af9075c1bd70b95d9a5004335d9b69464e8f62f425988a2825b014c8e47cc00977c1b430f17000adf9fe870ba1296c816fc1a6185f5df25475838c4e39aa67ff0a095ccbd47a326533517f588ccc2ea049fbbbc1fa06713430c824abc49ab6558ffde652e00286e000bf6710b1506c5122af7ccbcdd2eff3af4377d1f1391802ff8c500162fd8b759f15c88833c3c1844abc52501dceeb34f59e3fc003accfb90c0812a324822bec3ce000c4187c0809592fc139911dea08c8ecc38e6d5da8218c56767906d1fea00fcdc040fb34913e860c1a63749467c2c3ba2c23c7b7ab36d6291bad472320e1bb9bd69000d603e1bc07e1c19718818a4a8d65ab1caf16fd44c4e2a874520b21e8afc6e6d600917ab90e4afc01f3a194bb2baf09abbc8b5258fcde2134b73744b448c6c0d8a010ec267d6eb89731bf88f0bf6d88dd686aff4bc0f4882fcbb11295e4897588ab0890932f7cb82ac308ff306b3b4dc5385051c7880cc66678f2b5eb19f08f9bd0164000f9895f801e0ddfb2b86d5926c23c34b498199da7905501095e04e2e0f330e570700a4e67ccae535fe89b985dcfebeb46ca59d16a38cc20ef5adf54b63db5fe1cb0010e51b41019c834bdf524606b0de05e8c6510ff3b6de1e21809e76c77c69b58e620e9ac1a866d39c21407087b5b36d91a15a5e34c9844fff33c7b35ff6705e25aa00125c9091f9887d70fe92b21f52ac481cbb3c3963e941c3afce3e76c613f26f52076caf6af3fbff66e9ffd9090e6f4ee1a70ddbc3a6eafa4f2e08e0e6b094ca04fd01619c019bb2220100000\n\nEmitter Chain (Chain ID): 5\n\nEmitter address: 0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde\n\nUnknown data: 00000000000008fb0f\n\nPayload: 010000000000000000000000000000000000000000000000000000001c9b22cd3d000000000000000000000000692597b009d13c4049a947cab2239b7d6517875f00050000000000000000000000000c585a6e36de2ea5aa1c4408fc5a6b8c4d690a3f00030000000000000000000000000000000000000000000000000000000000000000\n\n=> The chain ID is the 349th characters counting from the end.","3373b21b":"Number of transactions:","148362b6":"Update: I got all the vaa message from Flipside and ran with the method above and found 50 \/ 4400 out of range results (0 or 6-10-a-b-c,...). I change my method and instead of looking for the chainID at a specific position, I search for the emitter address in the vaa to identify the corresponding chain.\n\nQuery to get all vaa data from Flipside: https:\/\/app.flipsidecrypto.com\/velocity\/queries\/358ed1a9-5556-48f9-ada2-f0fc29a4f3e2\n\nMy code below:","5be4cf5c":"Source to double check: \n    \nPolygon: https:\/\/polygonscan.com\/tx\/0x78b6513cd21d19627d50937f4b15345990305aa5142c5b1cd072c1c1540c85a4\n\nTerra: https:\/\/finder.extraterrestrial.money\/columbus-5\/tx\/81E441FD62E385E89D38856FF50ECD634B579A21DCEA0B09C3FA62951373E2AF\n\nWormhole explorer: https:\/\/wormholenetwork.com\/en\/explorer\/?txId=0x78b6513cd21d19627d50937f4b15345990305aa5142c5b1cd072c1c1540c85a4","dab0473e":"=> Only 1 entry I cannot identify the correct chain, I believe this number is correct","58c446b3":"Number of unique addresses:"}}