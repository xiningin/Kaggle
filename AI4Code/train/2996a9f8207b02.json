{"cell_type":{"d8409297":"code","d2dbe51e":"code","a62ea771":"code","e018c6d8":"code","435a262c":"code","c99fa972":"code","5f76e9f3":"code","970c6d78":"code","42e0fb7e":"code","5610d810":"code","839a7243":"code","e24f8b7a":"code","96bd1837":"code","e130324a":"code","6c6f7f95":"code","071f33b6":"code","35797fcc":"code","726f7902":"code","3ad9c536":"code","dca64a4a":"code","3d515933":"code","a07110e9":"code","50cc9127":"code","28b96a46":"code","19bf4b6c":"code","19a86db9":"code","f248b194":"code","8cab272a":"code","cf806f27":"code","d5fe915c":"code","8fec3290":"code","2a513bf2":"code","85e36772":"code","8d78aa60":"code","9da46749":"code","d6f51c56":"code","2c63877a":"code","e6f29b23":"code","ba8a83f1":"code","b4a2382f":"code","1a5e52f9":"code","58e9d53a":"code","92f21e61":"code","76c84f3c":"code","a6efd1b0":"code","181ac487":"code","5887042b":"code","48ecae57":"code","d7538c33":"code","1166ec7c":"code","da5e8db5":"code","4e2bb26d":"code","b598b4b0":"code","d98e6b8a":"code","e24896d0":"code","c1c54860":"code","a57bf7f1":"code","08ecc531":"code","6e9654f0":"code","0a35241a":"code","ed3a583c":"code","ffd5c5e2":"code","eac9c7a8":"code","06c8cada":"code","5f7391a5":"code","3e2fe76f":"code","27037f81":"code","db4df98e":"code","8588e2ec":"code","ef80a6c3":"code","26c71cb5":"code","fdb97c42":"code","7cde1360":"code","d48047c1":"code","028aa710":"code","06bd92d0":"code","720debf9":"code","a465b0ba":"code","692e3032":"code","38d4b164":"code","f79654fb":"code","b61524e8":"code","c1503567":"code","1ed8caa9":"code","e3032668":"code","797fae80":"code","a3050c7a":"code","b77c64fb":"code","053e27ee":"code","3301bf5f":"code","aa7cc983":"code","0ea4dbf5":"code","63133256":"markdown","e30a5843":"markdown","0456815b":"markdown","e75352fa":"markdown","acb2dfb9":"markdown","3be03f2f":"markdown","90f2abe5":"markdown","2df7b2fe":"markdown","4f76822d":"markdown","5c257455":"markdown","270fb851":"markdown","9f249ab3":"markdown","455805b6":"markdown","61a9d64e":"markdown","face6d88":"markdown","fcced815":"markdown","c4d57975":"markdown","719ec8df":"markdown","47670add":"markdown","5ab03dca":"markdown","3e978885":"markdown","ea985e6a":"markdown","031fd091":"markdown","834296a8":"markdown","57a239d9":"markdown","f673cb70":"markdown","0b95bef5":"markdown","b19d1477":"markdown"},"source":{"d8409297":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d2dbe51e":"train_df=pd.read_csv('..\/input\/titanic\/train.csv')\ntrain_df.head()","a62ea771":"test_df=pd.read_csv('..\/input\/titanic\/test.csv')\ntest_df.head()","e018c6d8":"submit=pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmit.head()","435a262c":"train_df.info()","c99fa972":"test_df.info()","5f76e9f3":"submit.info()","970c6d78":"titanic_df=pd.concat([train_df,test_df], axis=0)\ntitanic_df.set_index('PassengerId',inplace=True)","42e0fb7e":"titanic_df.head()","5610d810":"titanic_df.columns\n","839a7243":"titanic_df.info()","e24f8b7a":"titanic_df.isnull().sum()","96bd1837":"train_df.isnull().sum()","e130324a":"test_df.isnull().sum()","6c6f7f95":"def missing_percent(df):\n    nan_percent= 100*(df.isnull().sum()\/len(df))\n    nan_percent= nan_percent[nan_percent>0].sort_values()\n    return nan_percent","071f33b6":"print(missing_percent(titanic_df),'\\n')\nprint(missing_percent(train_df),'\\n')\nprint(missing_percent(test_df),'\\n')\n    ","35797fcc":"train_df['Age'].isnull().sum()","726f7902":"arr_index=train_df[train_df['Age'].isnull()].index\narr_index","3ad9c536":"all_data=[train_df,test_df]\nfor dataset in all_data:\n    mean = titanic_df[\"Age\"].mean()\n    std = titanic_df[\"Age\"].std()\n    dataset_isnull=dataset['Age'].isnull().sum()\n    dataset_r_age=np.random.randint(mean - std, mean + std, size = dataset_isnull)\n\n    \n    age_slice=dataset['Age'].copy()\n    age_slice[np.isnan(age_slice)]=dataset_r_age\n    dataset[\"Age\"]=age_slice\n    dataset[\"Age\"]=dataset[\"Age\"].astype(int)","dca64a4a":"print(train_df['Age'].isnull().sum())\nprint(test_df['Age'].isnull().sum())","3d515933":"print(titanic_df['Embarked'].describe())\nprint(\"\\n\")\nprint(titanic_df['Embarked'].value_counts())","a07110e9":"common_value = 'S'\nall_data = [train_df, test_df]\n\nfor dataset in all_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna(common_value)","50cc9127":"print(train_df['Embarked'].isnull().sum())\nprint(test_df['Embarked'].isnull().sum())","28b96a46":"all_data = [train_df, test_df]\n\nfor dataset in all_data:\n    dataset['Fare'] = dataset['Fare'].fillna(0)\n    dataset['Fare'] = dataset['Fare'].astype(int)","19bf4b6c":"print(train_df['Fare'].isnull().sum())\nprint(test_df['Fare'].isnull().sum())","19a86db9":"all_data = [train_df, test_df]\n\nfor dataset in all_data:\n    dataset.drop(['Cabin'], axis=1, inplace=True)\n\n","f248b194":"print(train_df.isnull().sum(),'\\n\\n')\nprint(test_df.isnull().sum())","8cab272a":"survived = 'survived'\nnot_survived = 'not survived'\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10, 4))\nwomen = train_df[train_df['Sex']=='female']\nmen = train_df[train_df['Sex']=='male']\nax = sns.distplot(women[women['Survived']==1].Age.dropna(), bins=18, label = survived, ax = axes[0], kde =False)\nax = sns.distplot(women[women['Survived']==0].Age.dropna(), bins=40, label = not_survived, ax = axes[0], kde =False)\nax.legend()\nax.set_title('Female')\nax = sns.distplot(men[men['Survived']==1].Age.dropna(), bins=18, label = survived, ax = axes[1], kde = False)\nax = sns.distplot(men[men['Survived']==0].Age.dropna(), bins=40, label = not_survived, ax = axes[1], kde = False)\nax.legend()\nax= ax.set_title('Male')","cf806f27":"train_df['Sex'].value_counts()","d5fe915c":"sns.countplot(data=train_df,x='Survived')","8fec3290":"sns.countplot(data=train_df,x='Sex')","2a513bf2":"sns.boxplot(data=train_df,x='Sex',y='Age')","85e36772":"# sns.boxplot(data=train_df,x='Sex',y='Survived')","8d78aa60":"sns.scatterplot(data=train_df, x='Pclass', y='Age', hue='Sex')","9da46749":"sns.countplot(data=train_df,x='Pclass',hue=\"Sex\",palette='nipy_spectral_r')","d6f51c56":"sns.countplot(data=train_df,x='Embarked',hue=\"Sex\",palette='coolwarm')","2c63877a":"FacetGrid = sns.FacetGrid(train_df, row='Embarked', size=4.5, aspect=1.6)\nFacetGrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette=None,  order=None, hue_order=None )\nFacetGrid.add_legend()","e6f29b23":"data = [train_df, test_df]\nfor dataset in data:\n    dataset['relatives'] = dataset['SibSp'] + dataset['Parch']\n    dataset.loc[dataset['relatives'] > 0, 'not_alone'] = 0\n    dataset.loc[dataset['relatives'] == 0, 'not_alone'] = 1\n    dataset['not_alone'] = dataset['not_alone'].astype(int)\ntrain_df['not_alone'].value_counts()","ba8a83f1":"# train_df = train_df.drop(['Parch'], axis=1)\n# train_df = train_df.drop(['SibSp'], axis=1)\ntrain_df = train_df.drop(['relatives'], axis=1)\n\n\n# test_df = test_df.drop(['Parch'], axis=1)\n# test_df = test_df.drop(['SibSp'], axis=1)\ntest_df = test_df.drop(['relatives'], axis=1)","b4a2382f":"sns.countplot(data=train_df,x='not_alone',palette='coolwarm')","1a5e52f9":"sns.countplot(data=train_df,x='not_alone',hue=\"Sex\",palette='coolwarm')","58e9d53a":"sns.pairplot(train_df,hue='Sex')","92f21e61":"sns.heatmap(train_df.corr(), annot=True)","76c84f3c":"sns.lmplot(x='Age', y='Fare', data=train_df, line_kws={'color':'red'})","a6efd1b0":"sns.lmplot(x='Age',\n           y='Fare',\n           data=train_df,\n           line_kws={'color':'red'},\n           col='Sex'\n          )","181ac487":"# train_df","5887042b":"import plotly.express as px\nfig = px.scatter_3d(train_df, x='Age', y='Pclass', z='Survived',color='Pclass',opacity=0.7)\nfig.show()\n","48ecae57":"# train_df['Sex'] = train_df['Sex'].map({'male': 0,'female': 1})\n","d7538c33":"train_df['Title'] = train_df.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\ntest_df['Title'] = train_df.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n","1166ec7c":"train_df['Title'].value_counts()","da5e8db5":"data = [train_df, test_df]\n\nfor dataset in data:\n    # replace titles with a more common title or as Rare\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr',\\\n                                            'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\ntrain_df = train_df.drop(['Name'], axis=1)\ntest_df = test_df.drop(['Name'], axis=1)","4e2bb26d":"# genders = {\"male\": 0, \"female\": 1}\n# data = [train_df, test_df]\n\n# for dataset in data:\n#     dataset['Sex'] = dataset['Sex'].map(genders)","b598b4b0":"train_df['Ticket'].describe()\n","d98e6b8a":"train_df.drop(['Ticket'], axis=1, inplace=True)\ntest_df.drop(['Ticket'], axis=1, inplace=True)","e24896d0":"y = train_df['Survived'].apply(int)\ntrain_df.drop(['Survived'], axis=1,inplace=True)\n","c1c54860":"train_df","a57bf7f1":"test_df","08ecc531":"all_df = pd.concat([train_df , test_df], axis=0)\nall_df.index = np.arange(1, len(all_df) + 1)\nall_df","6e9654f0":"all_df.drop('PassengerId', axis=1, inplace=True)\nall_df","0a35241a":"all_df.isnull().sum()","ed3a583c":"# num_df= all_df.select_dtypes(exclude='object')\n# obj_df= all_df.select_dtypes(include='object')","ffd5c5e2":"all_df.info()","eac9c7a8":"all_df['Pclass'] = all_df['Pclass'].apply(str)\nall_df['not_alone'] = all_df['not_alone'].apply(str)\n\n# all_df['Parch'] = all_df['Parch'].apply(str)\n# all_df['SibSp'] = all_df['SibSp'].apply(str)\n","06c8cada":"num_df=all_df[['Age','Fare','SibSp', 'Parch']]\nobj_df=all_df[['Pclass', 'Sex', 'Embarked','not_alone']]\n# obj_df=all_df[[\"Pclass\", \"Sex\", \"SibSp\", \"Parch\",'Embarked','not_alone']]","5f7391a5":"num_df","3e2fe76f":"obj_df","27037f81":"obj_df= pd.get_dummies(obj_df, drop_first=True)\nobj_df","db4df98e":"train_num_df = num_df.iloc[:891, :]\ntrain_obj_df = obj_df.iloc[:891, :]\n","8588e2ec":"test_num_df = num_df.iloc[891:, :]\ntest_obj_df = obj_df.iloc[891:, :]","ef80a6c3":"train_df_new = pd.concat([train_num_df, train_obj_df], axis=1)\ntest_df_new = pd.concat([test_num_df, test_obj_df], axis=1)\ntrain_df_new.reset_index(drop=True, inplace=True)\ntrain_df_new['Survived']=y","26c71cb5":"train_df_new.head()","fdb97c42":"train_df_new.isnull().sum()","7cde1360":"test_df_new.head()","d48047c1":"test_df_new.isnull().sum()","028aa710":"train_df_new.to_csv('train_df_cleaned.csv')\ntest_df_new.to_csv('test_df_cleaned.csv')","06bd92d0":"from sklearn.preprocessing import StandardScaler\n","720debf9":"names = train_num_df.columns\n\nscaler= StandardScaler()\nscaler.fit(train_num_df)\ntrain_num_df= scaler.transform(train_num_df)\ntest_num_df= scaler.transform(test_num_df)\n\ntrain_num_df = pd.DataFrame(train_num_df, columns= names)\ntrain_num_df.index = np.arange(1, len(train_num_df) + 1)\n\ntest_num_df = pd.DataFrame(test_num_df, columns= names)\ntest_num_df.index = np.arange(892, 892 + len(test_num_df))","a465b0ba":"train_scaled_df = pd.concat([train_num_df, train_obj_df], axis=1)\ntest_scaled_df = pd.concat([test_num_df, test_obj_df], axis=1)\ntrain_scaled_df","692e3032":"train_scaled_df","38d4b164":"from sklearn.linear_model import LogisticRegression\nlog_model= LogisticRegression()\nlog_model.fit(train_scaled_df, y)","f79654fb":"log_model.coef_\n","b61524e8":"y_pred= log_model.predict(test_scaled_df)\n","c1503567":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, plot_confusion_matrix","1ed8caa9":"y_test=submit['Survived']","e3032668":"accuracy_score(y_test, y_pred)","797fae80":"confusion_matrix(y_test, y_pred)","a3050c7a":"plot_confusion_matrix(log_model, test_scaled_df, y_test)","b77c64fb":"print(classification_report(y_test, y_pred))","053e27ee":"from sklearn.metrics import precision_recall_curve, plot_precision_recall_curve, plot_roc_curve","3301bf5f":"plot_precision_recall_curve(log_model, test_scaled_df, y_test)","aa7cc983":"plot_roc_curve(log_model, test_scaled_df, y_test)","0ea4dbf5":"# submission = pd.DataFrame()\n# submission['PassengerId'] = test_scaled_df.index\n# submission['Survived'] = y_pred\n# submission.to_csv('submission.csv',index=False)","63133256":"### Data Visualisation","e30a5843":"### Evaluating Curves and AUC","0456815b":"## Fare","e75352fa":"#### Dealing with the categorical data and  numerical values","acb2dfb9":"### Importing Libraries","3be03f2f":"#### we can see that the features have widely different ranges, that we will need to convert into roughly the same scale","90f2abe5":"## Age","2df7b2fe":"#### Merging the test and train dataset","4f76822d":"You can see that men have a high probability of survival when they are between 18 and 30 years old, which is also a little bit true for women but not fully. For women the survival chances are higher between 14 and 40.\nFor men the probability of survival is very low between the age of 5 and 18, but that isn\u2019t true for women. Another thing to note is that infants also have a little bit higher probability of survival.","5c257455":"### Load Data","270fb851":"#### The **Embarked** feature has only 2 missing values, which can easily be filled. It will be much more tricky, to deal with the **\u2018Age\u2019** feature, which has 177 missing values. The **\u2018Cabin\u2019** feature needs further investigation, but it looks like that we might want to drop it from the dataset, since 77 % of it are missing.","9f249ab3":" **SibSp and Parch:**\n \nSibSp and Parch would make more sense as a combined feature, that shows the total number of relatives, a person has on the Titanic. I will create it below and also a feature that sows if someone is not alone.","455805b6":"### RMS Titanic\n**The RMS Titanic was a British passenger liner that sank in the North Atlantic Ocean in the early morning hours of 15 April 1912, after it collided with an iceberg during its maiden voyage from Southampton to New York City. There were an estimated 2,224 passengers and crew aboard the ship, and more than 1,500 died, making it one of the deadliest commercial peacetime maritime disasters in modern history. The RMS Titanic was the largest ship afloat at the time it entered service and was the second of three Olympic-class ocean liners operated by the White Star Line. The Titanic was built by the Harland and Wolff shipyard in Belfast. Thomas Andrews, her architect, died in the disaster.**","61a9d64e":"> Ticket attribute has 681 unique tickets, it will be a bit tricky to convert them into useful categories. So we will drop it from the dataset.","face6d88":"### Data Scaling","fcced815":"Now we can tackle the issue with the age features missing values. I will create an array that contains random numbers, which are computed based on the mean age value in regards to the standard deviation and is_null.","c4d57975":"### Embarked feature has only 2 missing values, we will fill these with the most common one.\n","719ec8df":"## Cabin","47670add":"### Data Information _ Analysis","5ab03dca":"#### We should some features, that contain missing values (NaN = not a number), that we need to deal with.\n","3e978885":"## Embarked","ea985e6a":"#### Evaluating the Model","031fd091":"Embarked seems to be correlated with survival, depending on the gender.\nWomen on port Q and on port S have a higher chance of survival. The inverse is true, if they are at port C. Men have a high survival probability if they are on port C, but a low probability if they are on port Q or S.\nPclass also seems to be correlated with survival.","834296a8":"#### We will use the Name feature to extract the Titles from the Name","57a239d9":"##  Logistic Regression Model","f673cb70":"#### Model Coeficient","0b95bef5":"### Dealing with the missing data","b19d1477":" Let\u2019s take a more detailed look at what data is actually missing:"}}