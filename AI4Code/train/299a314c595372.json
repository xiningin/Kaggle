{"cell_type":{"6f7d43ac":"code","10da0f2e":"code","6933faf1":"code","9a62acfd":"code","12e3bc86":"code","bc34d9a4":"code","9008d2ec":"code","80375bc5":"code","e7606dd8":"code","d3596824":"code","2a0d2368":"code","114781a4":"code","e4a47452":"code","96573113":"code","44e5d776":"code","f5963fa8":"code","83ab7601":"code","bc8b9ce1":"code","f2c52ba8":"code","f376005a":"code","f5eb963a":"code","c591c477":"code","f775c471":"code","85adff59":"code","88951c78":"code","529f5ff6":"code","f1dc7c1c":"code","d9b20f08":"code","d9777301":"code","a2882d16":"code","68a707c6":"code","5c067a46":"code","1ff3c402":"code","042be6f9":"code","e8c6bd6f":"code","3bc738db":"code","3ce04916":"code","88f14ccf":"code","2fa083a2":"code","733bd426":"code","3234f6c1":"markdown","cbf2a0c6":"markdown","0697899f":"markdown","b3d6ebb8":"markdown","508552fd":"markdown","f1e93622":"markdown","bf906a8d":"markdown","28073a2f":"markdown","a118e949":"markdown","4739b541":"markdown","43eac6ea":"markdown","b08b8bb4":"markdown","9605c000":"markdown","205992cc":"markdown","c8384e39":"markdown","052dbdc2":"markdown","3f0eb35b":"markdown","faf5fcf1":"markdown","17735b3b":"markdown","e2dd6b4d":"markdown"},"source":{"6f7d43ac":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","10da0f2e":"from sklearn.datasets import make_regression","6933faf1":"reg_data1 = make_regression(n_samples=20, n_features=4, n_informative=2, n_targets=1, \n                        bias=0.0, effective_rank=None,tail_strength=0.5, \n                        noise=0.0, shuffle=True, coef=False, random_state=None)\nreg_df1 = pd.DataFrame(reg_data1[0],columns=['x'+str(i) for i in range(1,5)])\nreg_df1['y'] = reg_data1[1]","9a62acfd":"reg_df1.head()","12e3bc86":"plt.figure(figsize=(15,10))\nfor i in range(1,5):\n    fit = np.polyfit(reg_df1[reg_df1.columns[i-1]],reg_df1['y'],1)\n    fit_fn = np.poly1d(fit)\n    plt.subplot(2,2,i)\n    plt.scatter(reg_df1[reg_df1.columns[i-1]],reg_df1['y'],s=200,c='red',edgecolor='k')\n    plt.plot(reg_df1[reg_df1.columns[i-1]],fit_fn(reg_df1[reg_df1.columns[i-1]]),'b-',lw=3)\n    plt.grid(True)","bc34d9a4":"gau_data2 = make_regression(n_samples=20, n_features=4, n_informative=2, n_targets=1, \n                        bias=0.0, effective_rank=None,tail_strength=0.5, \n                        noise=2.0, shuffle=True, coef=False, random_state=None)\ndf2 = pd.DataFrame(gau_data2[0],columns=['x'+str(i) for i in range(1,5)])\ndf2['y'] = gau_data2 [1]","9008d2ec":"df2.head()","80375bc5":"plt.figure(figsize=(15,10))\nfor i in range(1,5):\n    fit = np.polyfit(df2[df2.columns[i-1]],df2['y'],1)\n    fit_fn = np.poly1d(fit)\n    plt.subplot(2,2,i)\n    plt.scatter(df2[df2.columns[i-1]],df2['y'],s=200,c='red',edgecolor='k')\n    plt.plot(df2[df2.columns[i-1]],fit_fn(df2[df2.columns[i-1]]),'b-',lw=3)\n    plt.grid(True)","e7606dd8":"plt.figure(figsize=(15,6))\ndf2 = pd.DataFrame(data=np.zeros((20,1)))\nfor i in range(3):\n    data2 = make_regression(n_samples=20, n_features=1, n_informative=1, n_targets=1, \n                        bias=0.0, effective_rank=None,tail_strength=0.5, \n                        noise=i*10, shuffle=True, coef=False, random_state=None)\n    df2['x'+str(i+1)]=data2[0]\n    df2['y'+str(i+1)] = data2[1]\n\nfor i in range(3):\n    fit = np.polyfit(df2['x'+str(i+1)],df2['y'+str(i+1)],1)\n    fit_fn = np.poly1d(fit)\n    plt.subplot(1,3,i+1)\n    plt.scatter(df2['x'+str(i+1)],df2['y'+str(i+1)],s=200,c='red',edgecolor='k')\n    plt.plot(df2['x'+str(i+1)],fit_fn(df2['x'+str(i+1)]),'b-',lw=3)\n    plt.grid(True)\n","d3596824":"from sklearn.datasets import make_classification","2a0d2368":"data3 = make_classification(n_samples=20, n_features=4, n_informative=4, n_redundant=0, n_repeated=0, \n                            n_classes=2, n_clusters_per_class=1, weights=None, flip_y=0.01, class_sep=1.0, \n                            hypercube=True, shift=0.0, scale=1.0, shuffle=True, random_state=None)\ndf3 = pd.DataFrame(data3[0],columns=['x'+str(i) for i in range(1,5)])\ndf3['y'] = data3[1]","114781a4":"df3.head()","e4a47452":"from itertools import combinations\nfrom math import ceil\nlst_var=list(combinations(df3.columns[:-1],2))\nlen_var = len(lst_var)\nplt.figure(figsize=(18,10))\nfor i in range(1,len_var+1):\n    plt.subplot(2,ceil(len_var\/2),i)\n    var1 = lst_var[i-1][0]\n    var2 = lst_var[i-1][1]\n    plt.scatter(df3[var1],df3[var2],s=200,c=df3['y'],edgecolor='k')\n    plt.xlabel(var1,fontsize=14)\n    plt.ylabel(var2,fontsize=14)\n    plt.grid(True)","96573113":"data3 = make_classification(n_samples=20, n_features=4, n_informative=4, n_redundant=0, n_repeated=0, \n                            n_classes=2, n_clusters_per_class=1, weights=None, flip_y=0.01, class_sep=3.0, \n                            hypercube=True, shift=0.0, scale=1.0, shuffle=True, random_state=None)\ndf3 = pd.DataFrame(data3[0],columns=['x'+str(i) for i in range(1,5)])\ndf3['y'] = data3[1]","44e5d776":"from itertools import combinations\nfrom math import ceil\nlst_var=list(combinations(df3.columns[:-1],2))\nlen_var = len(lst_var)\nplt.figure(figsize=(18,10))\nfor i in range(1,len_var+1):\n    plt.subplot(2,ceil(len_var\/2),i)\n    var1 = lst_var[i-1][0]\n    var2 = lst_var[i-1][1]\n    plt.scatter(df3[var1],df3[var2],s=200,c=df3['y'],edgecolor='k')\n    plt.xlabel(var1,fontsize=14)\n    plt.ylabel(var2,fontsize=14)\n    plt.grid(True)","f5963fa8":"data3 = make_classification(n_samples=20, n_features=4, n_informative=4, n_redundant=0, n_repeated=0, \n                            n_classes=2, n_clusters_per_class=1, weights=None, flip_y=0.01, class_sep=0.5, \n                            hypercube=True, shift=0.0, scale=1.0, shuffle=True, random_state=None)\ndf3 = pd.DataFrame(data3[0],columns=['x'+str(i) for i in range(1,5)])\ndf3['y'] = data3[1]","83ab7601":"from itertools import combinations\nfrom math import ceil\nlst_var=list(combinations(df3.columns[:-1],2))\nlen_var = len(lst_var)\nplt.figure(figsize=(18,10))\nfor i in range(1,len_var+1):\n    plt.subplot(2,ceil(len_var\/2),i)\n    var1 = lst_var[i-1][0]\n    var2 = lst_var[i-1][1]\n    plt.scatter(df3[var1],df3[var2],s=200,c=df3['y'],edgecolor='k')\n    plt.xlabel(var1,fontsize=14)\n    plt.ylabel(var2,fontsize=14)\n    plt.grid(True)","bc8b9ce1":"plt.figure(figsize=(18,10))\nfor i in range(6):\n    data3 = make_classification(n_samples=20, n_features=4, n_informative=4, n_redundant=0, n_repeated=0, \n                                n_classes=2, n_clusters_per_class=1, weights=None, flip_y=0.1*i, class_sep=1.0, \n                                hypercube=True, shift=0.0, scale=1.0, shuffle=False, random_state=101)\n    df3 = pd.DataFrame(data3[0],columns=['x'+str(i) for i in range(1,5)])\n    df3['y'] = data3[1]\n    plt.subplot(2,3,i+1)\n    plt.title(f\"Plot for flip_y={round(0.1*i,2)}\")\n    plt.scatter(df3['x1'],df3['x2'],s=200,c=df3['y'],edgecolor='k')\n    plt.xlabel('x1',fontsize=14)\n    plt.ylabel('x2',fontsize=14)\n    plt.grid(True)\n","f2c52ba8":"plt.figure(figsize=(18,5))\ndf2 = pd.DataFrame(data=np.zeros((20,1)))\nfor i in range(3):\n    data2 = make_classification(n_samples=20, n_features=2, n_informative=2, n_redundant=0, n_repeated=0, \n                                n_classes=2, n_clusters_per_class=1, weights=None, flip_y=0, class_sep=i+0.5, \n                                hypercube=True, shift=0.0, scale=1.0, shuffle=False, random_state=101)\n    df2['x'+str(i+1)+'1']=data2[0][:,0]\n    df2['x'+str(i+1)+'2']=data2[0][:,1]\n    df2['y'+str(i+1)] = data2[1]\n\nfor i in range(3):\n    plt.subplot(1,3,i+1)\n    plt.scatter(df2['x'+str(i+1)+'1'],df2['x'+str(i+1)+'2'],s=200,c=df2['y'+str(i+1)],edgecolor='k')\n    plt.grid(True)","f376005a":"from sklearn.datasets import make_blobs","f5eb963a":"data4 = make_blobs(n_samples=60, n_features=4, centers=3, cluster_std=1.0, \n                   center_box=(-5.0, 5.0), shuffle=True, random_state=None)\ndf4 = pd.DataFrame(data4[0],columns=['x'+str(i) for i in range(1,5)])\ndf4['y'] = data4[1]","c591c477":"from itertools import combinations\nfrom math import ceil\nlst_var=list(combinations(df4.columns[:-1],2))\nlen_var = len(lst_var)\nplt.figure(figsize=(18,10))\nfor i in range(1,len_var+1):\n    plt.subplot(2,ceil(len_var\/2),i)\n    var1 = lst_var[i-1][0]\n    var2 = lst_var[i-1][1]\n    plt.scatter(df4[var1],df4[var2],s=200,c=df4['y'],edgecolor='k')\n    plt.xlabel(var1,fontsize=14)\n    plt.ylabel(var2,fontsize=14)\n    plt.grid(True)","f775c471":"data4 = make_blobs(n_samples=60, n_features=4, centers=3, cluster_std=0.3, \n                   center_box=(-5.0, 5.0), shuffle=True, random_state=None)\ndf4 = pd.DataFrame(data4[0],columns=['x'+str(i) for i in range(1,5)])\ndf4['y'] = data4[1]","85adff59":"from itertools import combinations\nfrom math import ceil\nlst_var=list(combinations(df4.columns[:-1],2))\nlen_var = len(lst_var)\nplt.figure(figsize=(18,10))\nfor i in range(1,len_var+1):\n    plt.subplot(2,ceil(len_var\/2),i)\n    var1 = lst_var[i-1][0]\n    var2 = lst_var[i-1][1]\n    plt.scatter(df4[var1],df4[var2],s=200,c=df4['y'],edgecolor='k')\n    plt.xlabel(var1,fontsize=14)\n    plt.ylabel(var2,fontsize=14)\n    plt.grid(True)","88951c78":"data4 = make_blobs(n_samples=60, n_features=4, centers=3, cluster_std=2.5, \n                   center_box=(-5.0, 5.0), shuffle=True, random_state=None)\ndf4 = pd.DataFrame(data4[0],columns=['x'+str(i) for i in range(1,5)])\ndf4['y'] = data4[1]","529f5ff6":"from itertools import combinations\nfrom math import ceil\nlst_var=list(combinations(df4.columns[:-1],2))\nlen_var = len(lst_var)\nplt.figure(figsize=(18,10))\nfor i in range(1,len_var+1):\n    plt.subplot(2,ceil(len_var\/2),i)\n    var1 = lst_var[i-1][0]\n    var2 = lst_var[i-1][1]\n    plt.scatter(df4[var1],df4[var2],s=200,c=df4['y'],edgecolor='k')\n    plt.xlabel(var1,fontsize=14)\n    plt.ylabel(var2,fontsize=14)\n    plt.grid(True)","f1dc7c1c":"data5 = make_blobs(n_samples=50, n_features=2, centers=3,cluster_std=1.5)","d9b20f08":"\ntransformation = [[0.5, -0.5], [-0.4, 0.8]]","d9777301":"data5_0=np.dot(data5[0],transformation)\ndf5 = pd.DataFrame(data5_0,columns=['x'+str(i) for i in range(1,3)])\ndf5['y'] = data5[1]","a2882d16":"\nplt.figure(figsize=(8,5))\nplt.scatter(df5['x1'],df5['x2'],c=df5['y'],s=200,edgecolors='k')\nplt.xlabel('x1',fontsize=14)\nplt.ylabel('x2',fontsize=14)\nplt.grid(True)\nplt.show()\n","68a707c6":"from sklearn.datasets import make_circles","5c067a46":"\ndata6 = make_circles(n_samples=50, shuffle=True, noise=None, random_state=None, factor=0.6)\ndf6 = pd.DataFrame(data6[0],columns=['x'+str(i) for i in range(1,3)])\ndf6['y'] = data6[1]","1ff3c402":"plt.figure(figsize=(8,5))\nplt.scatter(df6['x1'],df6['x2'],c=df6['y'],s=200,edgecolors='k')\nplt.xlabel('x1',fontsize=14)\nplt.ylabel('x2',fontsize=14)\nplt.grid(True)\nplt.show()","042be6f9":"\ndata6 = make_circles(n_samples=50, shuffle=True, noise=0.15, random_state=None, factor=0.6)\ndf6 = pd.DataFrame(data6[0],columns=['x'+str(i) for i in range(1,3)])\ndf6['y'] = data6[1]","e8c6bd6f":"plt.figure(figsize=(8,5))\nplt.scatter(df6['x1'],df6['x2'],c=df6['y'],s=200,edgecolors='k')\nplt.xlabel('x1',fontsize=14)\nplt.ylabel('x2',fontsize=14)\nplt.grid(True)\nplt.show()","3bc738db":"from sklearn.datasets import make_moons","3ce04916":"data7 = make_moons(n_samples=50, shuffle=True, noise=None, random_state=None)\ndf7 = pd.DataFrame(data7[0],columns=['x'+str(i) for i in range(1,3)])\ndf7['y'] = data7[1]","88f14ccf":"plt.figure(figsize=(8,5))\nplt.scatter(df7['x1'],df7['x2'],c=df7['y'],s=200,edgecolors='k')\nplt.xlabel('x1',fontsize=14)\nplt.ylabel('x2',fontsize=14)\nplt.grid(True)\nplt.show()","2fa083a2":"data7 = make_moons(n_samples=50, shuffle=True, noise=0.1, random_state=None)\ndf7 = pd.DataFrame(data7[0],columns=['x'+str(i) for i in range(1,3)])\ndf7['y'] = data7[1]","733bd426":"plt.figure(figsize=(8,5))\nplt.scatter(df7['x1'],df7['x2'],c=df7['y'],s=200,edgecolors='k')\nplt.xlabel('x1',fontsize=14)\nplt.ylabel('x2',fontsize=14)\nplt.grid(True)\nplt.show()","3234f6c1":"# Plot","cbf2a0c6":"# Making class separation hard by tweaking class_sep","0697899f":"# Data with Gaussian noise","b3d6ebb8":"# Plot datasets with varying degree of class separation","508552fd":"# Classification problem generation","f1e93622":"# Making clusters compact and easily separable by tweaking cluster_std","bf906a8d":"# Making class separation easy by tweaking class_sep","28073a2f":"# Making data noisy by increasing flip_y","a118e949":"# Plot","4739b541":"# Regression problem generation","43eac6ea":"# Synthetic Data Generation","b08b8bb4":"# Introduce noise in the moon-shaped clusters","9605c000":"# Making concentric circle clusters","205992cc":"# Make moon shape clusters","c8384e39":"# Clustering problem generation","052dbdc2":"# Plot datasets with varying degree of noise","3f0eb35b":"# Making anisotropically distributed clustering problem","faf5fcf1":"# Making clusters spread out and difficult to separate by tweaking cluster_std","17735b3b":"# Introdue noise in the circle clusters","e2dd6b4d":"# Plot"}}