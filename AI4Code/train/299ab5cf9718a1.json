{"cell_type":{"ed2eab6c":"code","cff7e172":"code","89cd8d6c":"code","0d9e6c65":"code","5d8601c3":"code","9fda1922":"code","5eedfa56":"code","ed1d600d":"code","d1aea83a":"code","34702358":"code","dd72d396":"code","b1683255":"code","5e0343ec":"code","6ef54630":"code","02c29b9f":"code","9cacf0ad":"code","a95c8ca0":"code","d6c7eabc":"code","cc6c7628":"code","24651f85":"code","8df0735c":"code","8d9da6b7":"code","3b7d7b89":"code","7cacfe79":"code","07b60ac7":"code","04b24578":"code","223d8116":"code","55ee2c09":"code","7ce809e2":"code","35f64afa":"code","ba5129e9":"code","5dbc8b96":"code","6c473948":"code","295b9859":"code","b3834024":"code","afec498f":"code","ff280a95":"code","6bb34a64":"code","f2bc75b8":"code","e721fc6d":"code","5d9a9348":"code","637bbcbe":"code","e7ea3e45":"code","c5662929":"code","7de8dc75":"code","8970547a":"code","5860e252":"code","3c49bdbd":"code","f991fb27":"code","ef9d14d1":"code","5b897494":"code","df800ddd":"code","c69f4781":"code","8e79a2ab":"code","eb4da58d":"code","a7c9ccc8":"code","0b190a2a":"code","6b44b3c7":"markdown","06bc6663":"markdown","5d3feacc":"markdown","04582279":"markdown","a9c2e6eb":"markdown","7a7c1411":"markdown","515df2f1":"markdown","098f0308":"markdown","8dbf93da":"markdown","b896a0ab":"markdown","dd92559a":"markdown","6e146b01":"markdown","dd00548a":"markdown","1b53d7d8":"markdown","15d03fd0":"markdown","f2f82887":"markdown","c472e2e2":"markdown","675e771b":"markdown","11d79bb2":"markdown","1758a203":"markdown","4283ddc7":"markdown","24694e92":"markdown","2ec2a886":"markdown","67c064d0":"markdown"},"source":{"ed2eab6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cff7e172":"# Plotting Libraries\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cufflinks as cf\n%matplotlib inline\n\n# Metrics for Classification technique\n\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\n\n# Scaler\n\nfrom sklearn.preprocessing import RobustScaler, StandardScaler\n\n# Cross Validation\n\nfrom sklearn.model_selection import KFold, cross_val_score, GridSearchCV, RandomizedSearchCV, train_test_split\n\n# Linear Models\n\nfrom sklearn.linear_model import LogisticRegression\n\n# Ensemble Technique\n\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier\n\n# Other model\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\n\n# Model Stacking \n\nfrom mlxtend.classifier import StackingCVClassifier\n\n# Other libraries\n\nfrom datetime import datetime\nfrom scipy.stats import skew\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\nfrom sklearn.impute import SimpleImputer\nfrom numpy import nan\nfrom scipy.stats import randint as sp_randint\nfrom scipy.stats import uniform as sp_uniform","89cd8d6c":"data = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndata.head(6) # Mention no of rows to be displayed from the top in the argument","0d9e6c65":"# Shape of the dataset\n\ndata.shape","5d8601c3":"data.info()","9fda1922":"data.describe().transpose()","5eedfa56":"plt.figure(figsize=(20,12))\nsns.set_context('notebook',font_scale = 1.3)\nsns.heatmap(data.corr(),annot=True,cmap='coolwarm')\nplt.tight_layout()","ed1d600d":"sns.countplot(x=data['Outcome'],data = data)","d1aea83a":"X = data.drop('Outcome',axis = 1)\ny = data['Outcome']\n","34702358":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state=42)","dd72d396":"print(\"total number of rows : {0}\".format(len(data)))\nprint(\"number of rows missing glucose_conc: {0}\".format(len(data.loc[data['Glucose'] == 0])))\nprint(\"number of rows missing diastolic_bp: {0}\".format(len(data.loc[data['BloodPressure'] == 0])))\nprint(\"number of rows missing insulin: {0}\".format(len(data.loc[data['Insulin'] == 0])))\nprint(\"number of rows missing bmi: {0}\".format(len(data.loc[data['BMI'] == 0])))\nprint(\"number of rows missing diab_pred: {0}\".format(len(data.loc[data['DiabetesPedigreeFunction'] == 0])))\nprint(\"number of rows missing age: {0}\".format(len(data.loc[data['Age'] == 0])))","b1683255":"# Filling Zero values\n\nfill_values = SimpleImputer(missing_values=0, strategy=\"mean\")\n\nX_train = fill_values.fit_transform(X_train)\nX_test = fill_values.fit_transform(X_test)","5e0343ec":"# RandomForestClassifier\n\nrandom_forest_model = RandomForestClassifier(random_state = 42)\n\nrandom_forest_model.fit(X_train, y_train.ravel())","6ef54630":"predict_train_data = random_forest_model.predict(X_test)\n\nprint(\"Accuracy = {0:.3f}\".format(accuracy_score(y_test, predict_train_data)))","02c29b9f":"## Hyperparameter Optimzation\n\nparams1={\n    \n    \"n_estimators\" : [100, 300, 500, 800, 1200], \n    \"max_depth\" : [5, 8, 15, 25, 30],\n    \"min_samples_split\" : [2, 5, 10, 15, 100],\n    \"min_samples_leaf\" : [1, 2, 5, 10] \n\n}","9cacf0ad":"rfm = RandomForestClassifier(random_state = 42)","a95c8ca0":"rfms = RandomizedSearchCV(rfm,param_distributions=params1,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)","d6c7eabc":"def timer(start_time=None):\n    if not start_time:\n        start_time = datetime.now()\n        return start_time\n    elif start_time:\n        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)\n        tmin, tsec = divmod(temp_sec, 60)\n        print('\\n Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))","cc6c7628":"# Here we go\nstart_time = timer(None) # timing starts from this point for \"start_time\" variable\nrfms.fit(X_train,y_train.ravel())\ntimer(start_time) # timing ends here for \"start_time\" variable","24651f85":"rfms.best_estimator_","8df0735c":"model1 = RandomForestClassifier(max_depth=8, min_samples_split=10, n_estimators=500,\n                       random_state=42)","8d9da6b7":"model1.fit(X_train,y_train)\ny_pred1 = model1.predict(X_test)","3b7d7b89":"print(accuracy_score(y_test,y_pred1))\nprint(confusion_matrix(y_test,y_pred1))","7cacfe79":"model2 = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n              min_child_weight=1, missing=nan, monotone_constraints='()',\n              n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n              tree_method='exact', validate_parameters=1, verbosity=None)","07b60ac7":"model2.fit(X_train,y_train.ravel())\ny_pred2 = model2.predict(X_test)","04b24578":"print(accuracy_score(y_test,y_pred2))\nprint(confusion_matrix(y_test,y_pred2))","223d8116":"model3 = CatBoostClassifier()","55ee2c09":"model3.fit(X_train,y_train)\ny_pred3 = model3.predict(X_test)","7ce809e2":"print(accuracy_score(y_test,y_pred3))\nprint(confusion_matrix(y_test,y_pred3))","35f64afa":"params4 = {'C': [0.1, 1, 10, 100, 1000],  \n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001], \n              'kernel': ['rbf']} ","ba5129e9":"svcs = RandomizedSearchCV(SVC(),param_distributions=params4,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)","5dbc8b96":"# Here we go\nstart_time = timer(None) # timing starts from this point for \"start_time\" variable\nsvcs.fit(X_train,y_train.ravel())\ntimer(start_time) # timing ends here for \"start_time\" variable","6c473948":"svcs.best_estimator_","295b9859":"model4 = SVC(C=0.1, gamma=0.001)","b3834024":"model4.fit(X_train,y_train)\ny_pred4 = model4.predict(X_test)","afec498f":"print(accuracy_score(y_test,y_pred4))\nprint(confusion_matrix(y_test,y_pred4))","ff280a95":"params5 = {'n_estimators':[500,1000,2000],'learning_rate':[.001,0.01,.1]}","6bb34a64":"adas = RandomizedSearchCV(AdaBoostClassifier(),param_distributions=params5,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)","f2bc75b8":"# Here we go\nstart_time = timer(None) # timing starts from this point for \"start_time\" variable\nadas.fit(X_train,y_train.ravel())\ntimer(start_time) # timing ends here for \"start_time\" variable","e721fc6d":"adas.best_estimator_","5d9a9348":"model5 = AdaBoostClassifier(learning_rate=0.01, n_estimators=500)","637bbcbe":"model5.fit(X_train,y_train)\ny_pred5 = model5.predict(X_test)","e7ea3e45":"print(accuracy_score(y_test,y_pred5))\nprint(confusion_matrix(y_test,y_pred5))","c5662929":"params6 = {\n    'learning_rate': [ 0.1],\n    'num_leaves': [31],\n    'boosting_type' : ['gbdt'],\n    'objective' : ['binary']\n}","7de8dc75":"lgbs = RandomizedSearchCV(LGBMClassifier(),param_distributions=params6,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)","8970547a":"# Here we go\nstart_time = timer(None) # timing starts from this point for \"start_time\" variable\nlgbs.fit(X_train,y_train.ravel())\ntimer(start_time) # timing ends here for \"start_time\" variable","5860e252":"lgbs.best_estimator_","3c49bdbd":"model6 = LGBMClassifier(objective='binary')","f991fb27":"model6.fit(X_train,y_train)\ny_pred6 = model6.predict(X_test)","ef9d14d1":"print(accuracy_score(y_test,y_pred6))\nprint(confusion_matrix(y_test,y_pred6))","5b897494":"model7 = GradientBoostingClassifier(random_state = 42)","df800ddd":"model7.fit(X_train,y_train)\ny_pred7 = model7.predict(X_test)","c69f4781":"print(accuracy_score(y_test,y_pred7))\nprint(confusion_matrix(y_test,y_pred7))","8e79a2ab":"## Stacking of Models\n\nmodel8 = StackingCVClassifier(classifiers=[model1,model2,model3,model5,model6,model7],\n                            meta_classifier=model1,\n                            random_state=42)","eb4da58d":"model8.fit(X_train,y_train.ravel())","a7c9ccc8":"y_pred8 = model8.predict(X_test)","0b190a2a":"print(accuracy_score(y_test,y_pred8))\nprint(confusion_matrix(y_test,y_pred8))","6b44b3c7":"# Importing Necessary Libraries","06bc6663":"**So after doing Hyperparameter optimization, we are able to achieve accuracy of 74% approx through GradientBoostingClassifier. Now let's try stacking of models.**","5d3feacc":"# Exploring Dataset","04582279":"# Feature Engineering","a9c2e6eb":"**There are no missing values in the dataset. Two columns are of float type and rest are int type.**","7a7c1411":"**So after doing Hyperparameter optimization, we are able to achieve accuracy of 73% approx through XGBoost Classifier. Let's try CatBoostClassifier.**","515df2f1":"**So after doing Hyperparameter optimization, we are able to achieve accuracy of 77% approx through AdaBoost Classifier. Let's try LightGBM Classifier.**","098f0308":"**So after doing Hyperparameter optimization, we are able to achieve accuracy of 74% approx through LightGBM Classifier. Let's try GradientBoostingClassifier.**","8dbf93da":"**It looks like ratio between negative and positive patients is approx 2:1 and actually this is not imbalanced dataset as we have enough values for both 0 and 1.**","b896a0ab":"# Modelling and Stacking ","dd92559a":"# EDA","6e146b01":"# Pima Indians Diabetes Database\n\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\n\n* This tutorial is highly recommended for beginners.\n* This is my fourth notebook. Do point out my mistakes in comment section.\n* I achieved accuracy 77% on test data.\n* If you find my work interesting, do upvote it.","dd00548a":"# Loading Dataset\n\nOur first step is to extract data. We will be extracting data using pandas function read_csv. Specify the location to the dataset and import them.","1b53d7d8":"**Let's check the correlation between the features.**","15d03fd0":"**Let's check whether the dependent variable is balanced or not.**","f2f82887":"**So after doing Hyperparameter optimization, we are able to achieve accuracy of 75% approx through CatBoostClassifier. Let's try SVC.**","c472e2e2":"**So after doing Hyperparameter optimization, we are able to achieve accuracy of 70% approx through SVC. Let's try AdaBoost Classifier.**","675e771b":"This is default first cell in any kaggle kernel. They import NumPy and Pandas libraries and it also lists the available Kernel files. NumPy is the fundamental package for scientific computing with Python. Pandas is the most popular python library that is used for data analysis.","11d79bb2":"**Note : My next work will be on Malaria Dataset. My aim is to work on atleaat 5 disease dataset and then I will be creating Web app using Flask where user can check whether they are suffering from those diseases or not. After completing the web app, I will deploy it on Heroku and code can be accessed from GitHub.**","1758a203":"**There are 768 rows and 9 columns in the dataset.**","4283ddc7":"**Checking for zero values.**","24694e92":"**So after doing Hyperparameter optimization, we are able to achieve accuracy of 76% approx through RandomForestClassifier model. Let's try XGBoost Classifier.**","2ec2a886":"**After stacking the models, we are able to achieve accuracy of 76%. Highest so far is achieved by AdaBoost Classifier which is 77%.**","67c064d0":"# Thank You!!"}}