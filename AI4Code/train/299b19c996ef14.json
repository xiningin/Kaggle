{"cell_type":{"b10f2f88":"code","fec71afa":"code","8886d90e":"code","f03fdb44":"code","c4dafb9a":"code","381e27fd":"code","a821f918":"code","d9af19a3":"code","72159862":"code","ccd951d2":"code","c2b41095":"code","dd7105cc":"code","db7a3d81":"code","3ace683e":"code","23d46451":"code","11f441e1":"code","7b3958e5":"markdown"},"source":{"b10f2f88":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pickle\nimport sys\nfrom sklearn import metrics\n\nif not sys.warnoptions:\n    import warnings\n    warnings.simplefilter(\"ignore\")\n      \n        \nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.figure_factory as ff\n","fec71afa":"dataset = pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\n","8886d90e":"dataset.head()","f03fdb44":"dataset.info()","c4dafb9a":"lab = dataset[\"Churn\"].value_counts().keys().tolist()\nval = dataset[\"Churn\"].value_counts().values.tolist()\n\ntrace = go.Pie(labels = lab ,\n               values = val ,\n               marker = dict(colors =  [ 'royalblue' ,'lime'],\n                             line = dict(color = \"white\",\n                                         width =  1.3)\n                            ),\n               rotation = 90,\n               hoverinfo = \"label+value+text\",\n               hole = .5\n              )\nlayout = go.Layout(dict(title = \"Customer attrition in data\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                       )\n                  )\n\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)","381e27fd":"sns.countplot(x= 'Churn', data = dataset)\n","a821f918":"for i in range(len(dataset['TotalCharges'])):\n    if dataset.iloc[i,19] == ' ':\n        print(i)","d9af19a3":"dataset['TotalCharges'] = dataset['TotalCharges'].replace(' ', np.nan)\n\ndataset = dataset[dataset['TotalCharges'].notnull()]\ndataset = dataset.reset_index()[dataset.columns]\n\ndataset['TotalCharges'] = dataset['TotalCharges'].astype(float)\n\nreplace_columns = [ 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection','TechSupport','StreamingTV', 'StreamingMovies']\n\nfor i in replace_columns:\n    dataset[i] = dataset[i].replace({'No internet service' : 'No'})\n    \ndataset['MultipleLines'] = dataset['MultipleLines'].replace({'No phone service' : 'No'})","72159862":"print (\"Rows     : \" ,dataset.shape[0])\nprint (\"Columns  : \" ,dataset.shape[1])\nprint (\"\\nFeatures : \\n\" ,dataset.columns.tolist())\nprint (\"\\nMissing values :  \", dataset.isnull().sum().values.sum())\nprint (\"\\nUnique values :  \\n\",dataset.nunique())\n\n\nprint(dataset['Contract'].unique())\nprint(dataset['PaymentMethod'].unique())\nprint(dataset['InternetService'].unique())","ccd951d2":"slice_df = pd.concat([dataset.iloc[:,1:8],dataset.iloc[:,9:15], dataset.iloc[:,16:17], dataset.iloc[:,18:]], axis = 1)","c2b41095":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\nencode_columns = [ 'gender', 'Partner', 'Dependents','PhoneService','MultipleLines','OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'PaperlessBilling', 'Churn']\n\nfor i in encode_columns:\n    slice_df[i] = le.fit_transform(slice_df[i])\n\nchurn = slice_df.iloc[:,-1:]\nslice_df = slice_df.iloc[:,:-1]\n\n\ninternet_service = dataset.iloc[:,8:9]\ncontract = dataset.iloc[:,-6:-5]\npayment_method = dataset.iloc[:,-4:-3]\nfrom sklearn.preprocessing import OneHotEncoder\nohe = OneHotEncoder()\ninternet_service = ohe.fit_transform(internet_service).toarray()\ncontract = ohe.fit_transform(contract).toarray()\npayment_method = ohe.fit_transform(payment_method).toarray()","dd7105cc":"internet_service = pd.DataFrame(data = internet_service, index = range(len(internet_service)), columns = ['DSL','Fiber optic', 'No internet service'])\ncontract = pd.DataFrame(data = contract, index = range(len(contract)), columns = ['Month-to-month', 'One year', 'Two year'])\npayment_method = pd.DataFrame(data = payment_method, index = range(len(payment_method)), columns = ['Bank transfer (automatic)', 'Credit card (automatic)', 'Electronic check', 'Mailed check'])\n\nX = pd.concat([slice_df, internet_service, contract, payment_method], axis = 1)\nX = X.values\nY = churn.values","db7a3d81":"from sklearn.model_selection import train_test_split\nx_train, x_test,y_train,y_test = train_test_split(X, Y,test_size=0.2, random_state=0)","3ace683e":"from sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\nX_train = sc.fit_transform(x_train)\nX_test = sc.fit_transform(x_test)","23d46451":"import keras\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\n\n\n\nclassifier = Sequential(layers = None, name = None)\n\nclassifier.add(Dense(128, activation = 'tanh')) \nclassifier.add(Dense(256, activation = 'tanh'))  \nclassifier.add(Dense(512, activation = 'tanh'))\nclassifier.add(Dense(1024, activation = 'tanh'))\nclassifier.add(Dense(1, activation = 'sigmoid'))\n\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n            \n            \nclassifier.fit(X_train, y_train, epochs = 50)\n\n\ny_pred = classifier.predict(X_test, use_multiprocessing=True, max_queue_size=1)\ny_pred = (y_pred > 0.5)","11f441e1":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_pred))\ncategories = ['Churn', 'Not Churn']\ncm = confusion_matrix(y_test, y_pred)\nsns.heatmap(cm\/np.sum(cm), cmap = 'Blues', fmt = '.2%', annot = True, xticklabels = categories, yticklabels = categories)","7b3958e5":"## **Detection of bad lines.**\n\n**In some lines of the data set, a space character is assigned instead of 'nan' value. This situation causes meaning confusion. We detect these lines through a loop.**"}}