{"cell_type":{"5fee5651":"code","d13176c3":"code","38468525":"code","3026fc7f":"code","bf9255cf":"code","df78ffd9":"code","67a45799":"code","2bb6aba3":"code","f62caa29":"code","34388865":"code","85426057":"code","36d45250":"code","17ab2328":"code","3c44b8dd":"code","273342c2":"code","57114b8b":"code","1dc78daa":"markdown","f0f369df":"markdown","913f88e4":"markdown","bf08eacc":"markdown","e1545eca":"markdown","84bbe003":"markdown","ce5b591d":"markdown","276a69f8":"markdown","fe2f6dcb":"markdown","381e1e09":"markdown","7862fa85":"markdown","fd1270f2":"markdown"},"source":{"5fee5651":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import Ridge, LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nimport warnings\nwarnings.filterwarnings('ignore')","d13176c3":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","38468525":"print('Shape of train is ', train.shape)\nprint('shape of test is ',  test.shape)","3026fc7f":"train.head()","bf9255cf":"test.head()","df78ffd9":"target = train.iloc[:,[0,257]].set_index('id')\ntrain = train.iloc[:,0:257].set_index('id')\ntest = test.set_index('id')","67a45799":"print(target.describe())\nplt.hist(target.values, bins=10)\nplt.title('Histogram target counts')\nplt.xlabel('Count')\nplt.ylabel('Target')\nplt.show()","2bb6aba3":"for n in range(2):\n    plt.figure(figsize=(8, 3))\n    plt.hist(train.iloc[:,n].values, bins=200)\n    plt.title('Destribution of data' + str(n))\n    plt.xlabel('Value')\n    plt.ylabel('Count')\n    plt.show()","f62caa29":"plt.figure(figsize=(8, 3))\nplt.hist(train['wheezy-copper-turtle-magic'].values, bins=200)\nplt.title('Histogram muggy-smalt-axolotl-pembus counts')\nplt.xlabel('Value')\nplt.ylabel('Count')\nplt.show()","34388865":"train.describe()","85426057":"test.describe()","36d45250":"scaler = StandardScaler()\nscaler.fit(train)\ntrain_scaled = pd.DataFrame(scaler.transform(train), columns=train.columns)\nscaler.fit(test)\ntest_scaled = pd.DataFrame(scaler.transform(test), columns=test.columns)","17ab2328":"%%time\nfolds = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\noof = np.zeros(train_scaled.shape[0])\npred = 0\n\nfor fold_, (train_index, validation_index) in enumerate(folds.split(train_scaled.values, target.values)):\n    print(\"Fold {}\".format(fold_+1))\n    x_train, y_train = train_scaled.iloc[train_index], target.iloc[train_index]\n    x_val, y_val = train_scaled.iloc[validation_index], target.iloc[validation_index]\n    classifier = LogisticRegression(verbose=0, n_jobs=-1)\n    classifier.fit(x_train, y_train)\n    val_pred = classifier.predict_proba(x_val)[:,1]\n    oof[validation_index] = val_pred\n    pred += classifier.predict_proba(test_scaled)[:,1]\/10\n    print(roc_auc_score(y_val, val_pred))\n    \nprint(roc_auc_score(target.values, oof))","3c44b8dd":"from tqdm import tqdm_notebook as tqdm\nfrom sklearn.svm import SVC\n\ncols = [c for c in train.columns if c not in ['id']]\ncols.remove('wheezy-copper-turtle-magic')\ninteractions = np.zeros((512,255))\noof = np.zeros(len(train))\npreds = np.zeros(len(test))\n\nfor n in tqdm(range(512)):\n    # ONLY TRAIN WITH DATA WHERE WHEEZY EQUALS I\n    target2 = target[train['wheezy-copper-turtle-magic']==n]\n    train2 = train[train['wheezy-copper-turtle-magic']==n]\n    test2 = test[test['wheezy-copper-turtle-magic']==n]\n    idx1 = []\n    idx2 = []\n    for m in range(262144):\n        if train['wheezy-copper-turtle-magic'][m] == n:\n            idx1.append(m)\n    for l in range(131073):\n        if test['wheezy-copper-turtle-magic'][l] == n:\n            idx2.append(l)\n    idx1 = np.array(idx1)\n    idx2 = np.array(idx2)\n    target2.reset_index(drop=True,inplace=True)\n    train2.reset_index(drop=True,inplace=True)\n    test2.reset_index(drop=True,inplace=True)\n\n    \n    folds = StratifiedKFold(n_splits=5, random_state=0)\n    for train_index, test_index in folds.split(train2.values, target2.values):\n        # LOGISTIC REGRESSION MODEL\n        clf = SVC(probability=True,kernel='poly',degree=4,gamma='auto')\n        clf.fit(train2.iloc[train_index],target2.iloc[train_index])\n        oof[idx1[test_index]] = clf.predict_proba(train2.iloc[test_index])[:,1]\n        preds[idx2] += clf.predict_proba(test2)[:,1] \/ 5.0\n        # RECORD INTERACTIONS\n#        for j in range(255):\n#            if clf.coef_[0][j]>0: interactions[n,j] = 1\n#            elif clf.coef_[0][j]<0: interactions[n,j] = -1\n    #if i%25==0: print(i)\n\n        \n# PRINT CV AUC\nauc = roc_auc_score(target,oof)\nprint('LR with interactions scores CV =',round(auc,5))","273342c2":"auc = roc_auc_score(target,oof)\nprint('LR with interactions scores CV =',round(auc,5))","57114b8b":"sample = pd.read_csv(\"..\/input\/sample_submission.csv\")\nprint(sample)\nsample.target = preds\nsample.to_csv('submisson.csv',index=False)","1dc78daa":"Observe overview of data.\n\n------------------------------------------------------\n\n\u30c7\u30fc\u30bf\u306e\u6982\u8981\u3092\u898b\u3066\u307f\u308b\u3002","f0f369df":"Normalize train and test data.\n\n------------------------------------------------\n\n\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u3092\u6b63\u898f\u5316\u3059\u308b\u3002","913f88e4":"Reading data.\n\n------------------------------------------------------------------------------------------------\n\n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u3002","bf08eacc":"Making Submission csv.\n\n--------------------------------------------------------\n\n\u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\u3002","e1545eca":"Observe distribution of target column.\n\n\u2193\n\nWe can understand \"Quantity of target 1 and 0 is almost same.\"\n\n----------------------------------------------------------------------------------------------\n\n\"target\" \u30ab\u30e9\u30e0\u306e\u5206\u5e03\u3092\u89b3\u5bdf\u3059\u308b\u3002\n\n\u2193\n\n\uff11\u3068\uff10\u306e\u6570\u306f\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3042\u308b\u3002\n","84bbe003":"Observe distribution of features column.\n\n\u2193\n\nWe can understand \"Most features have normal distribution.\"\n\n-------------------------------------------------------------------------------\n\n\u7279\u5fb4\u91cf\u306e\u30ab\u30e9\u30e0\u306e\u5206\u5e03\u3092\u89b3\u5bdf\u3059\u308b\u3002\n\n\u2193\n\n\u307b\u3068\u3093\u3069\u3059\u3079\u3066\u306e\u7279\u5fb4\u91cf\u304c\u6b63\u898f\u5206\u5e03\u3092\u6301\u3064\u3053\u3068\u304c\u308f\u304b\u308b\u3002","ce5b591d":"I made so simple model with LogisticRegressoion.\nkernel of https:\/\/www.kaggle.com\/tunguz helped me.\nI'm beginner, so there may be many strange point. Please give me a advise.\n\n------------------------------------------------------------------------------------------------\n\n\u65e5\u672c\u8a9e\u3067\u66f8\u304b\u308c\u305fkernels\u304c\u307b\u3068\u3093\u3069\u306a\u304b\u3063\u305f\u305f\u3081\n\u5c11\u3057\u3067\u3082\u521d\u5fc3\u8005\u306e\u52a9\u3051\u306b\u306a\u308c\u3070\u3068\u3053\u3061\u3089\u306ekernels\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306b\u3088\u308b\u30b7\u30f3\u30d7\u30eb\u306a\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u307e\u3057\u305f\u3002\nhttps:\/\/www.kaggle.com\/tunguz\u3000\u306ekernel\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\u521d\u5fc3\u8005\u306e\u305f\u3081\u81f3\u3089\u306a\u3044\u70b9\u3082\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u305c\u3072\u30a2\u30c9\u30d0\u30a4\u30b9\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n","276a69f8":"Score is not good.\nI made interactive model.\n\n-----------------------------------------------\n\n\u30b9\u30b3\u30a2\u306f\u3088\u304f\u306a\u304b\u3063\u305f\u3002\n\u76f8\u4e92\u4f5c\u7528\u9805\u3092\u8003\u616e\u3057\u3066\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u307f\u308b\u3002","fe2f6dcb":"Predict with LogisticRegression.\nValidation with 5 split Kfold.\nPrint ROCAUC score.\n\n----------------------------------------------------------------------------\n\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306b\u3088\u3063\u3066\u4e88\u6e2c\u3092\u884c\u3046\u3002\n\u4e94\u5206\u5272\u3057\u3066\u4ea4\u5dee\u691c\u5b9a\u3092\u884c\u3046\u3002\nROCAUC\u30b9\u30b3\u30a2\u3092\u51fa\u529b\u3059\u308b\u3002","381e1e09":"Divide train data to 'target' and 'train'.\nSetting 'id' column to index.\n\n---------------------------------------------------------------------------------\n\n\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3092\u3001\"train\"\u3068\u201dtarget\"\u306b\u5206\u3051\u308b\u3002\n\u307e\u305f\u3001\"id\"\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u6307\u5b9a\u3059\u308b\u3002","7862fa85":"But 'wheezy-copper-turtle-magic' has not normal distribution but like that.\n\n----------------------------------------------------------------------------------------\n\n\u3057\u304b\u3057 'wheezy-copper-turtle-magic' \u30ab\u30e9\u30e0\u306f\u5c11\u3057\u7279\u7570\u306a\u5206\u5e03\u3092\u793a\u3059\u3002","fd1270f2":"Observe shape of data.\n\n-------------------------------------------------------------------------------------------------------\n\n\u30c7\u30fc\u30bf\u306e\u5927\u304d\u3055\u3092\u898b\u3066\u307f\u308b\u3002"}}