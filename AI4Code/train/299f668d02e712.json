{"cell_type":{"2ba5b2bb":"code","43c9bd25":"code","d45be11d":"code","64916970":"code","a5299336":"code","d3213614":"code","84616f9a":"code","93ec5f65":"code","2ae3a10a":"code","5f6f4ced":"code","6f0e4dcb":"code","c4e701e2":"code","d3c86c48":"code","c5e11b7d":"code","a65cd655":"markdown","76d78da9":"markdown","6c0fb5cd":"markdown","cbf3e6cb":"markdown","0d711ed9":"markdown","8a24cee9":"markdown","b1f913fb":"markdown"},"source":{"2ba5b2bb":"#import the modules\nimport os\nimport numpy as np\nimport pandas as pd\nimport plotly as plt \nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n","43c9bd25":"#read all the files using pandas' read_csv\nplant1_pg = pd.read_csv(\"\/kaggle\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv\")\nplant2_pg = pd.read_csv(\"\/kaggle\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv\")\nplant1_ws = pd.read_csv(\"\/kaggle\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv\")\nplant2_ws = pd.read_csv(\"\/kaggle\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv\")\n\n#creating a map\nfiles = {\n    0: plant1_pg,\n    1: plant1_ws,\n    2: plant2_pg,\n    3: plant2_ws,\n}","d45be11d":"#plant-1 power generation data\nfiles[0].sample(5)","64916970":"#plant-1 weather sensor data\nfiles[1].sample(5)","a5299336":"#converting the date-time in the right format using to_datetime \n#droping the plant_id column from all the files\nfor i in range(len(files)):\n    files[i][\"DATE_TIME\"] = pd.to_datetime(files[i][\"DATE_TIME\"])\n    files[i] =  files[i].drop(columns=[\"PLANT_ID\"], axis=1) \n    ","d3213614":"import plotly.express as px\n\ndef LineChart(temp_df,columns,start_date_time,end_date_time, title):\n    temp_df = temp_df.loc[start_date_time : end_date_time]\n    fig = px.line(temp_df[columns])\n    fig.update_layout(title_text = title, title_x=0.5)\n    fig.show()    ","84616f9a":"data1 = files[0][files[0].SOURCE_KEY == \"3PZuoBAID5Wc2HD\"]\ndata1= data1.set_index('DATE_TIME')\n\nstime = \"25-05-2020 05:00\"\netime = \"25-05-2020 20:00\"\nLineChart(data1, [\"DC_POWER\",\"AC_POWER\"],stime,etime,\"Power Generation during the Day\")","93ec5f65":"data2 = files[1].set_index('DATE_TIME')\n\nstime = \"2020-05-25 05:00:00\"\netime = \"2020-05-25 20:00:00\"\nLineChart(data2,[\"AMBIENT_TEMPERATURE\",\"MODULE_TEMPERATURE\"],stime,etime,\"Temperature during the day\")","2ae3a10a":"data2 = files[1].set_index('DATE_TIME')\nstime = \"2020-05-25 05:00:00\"\netime = \"2020-05-25 20:00:00\"\nLineChart(data2,[\"IRRADIATION\"],stime,etime,\"Irradiation during the day\")","5f6f4ced":"#check for the data distribution and outliers\ndef BoxPlots(files, column1,column2,titles):\n    fig = make_subplots(rows=2, cols=1, subplot_titles=titles)\n    for i,file in enumerate(files):\n        fig.add_trace(go.Box(x = list(file[column1].astype('int64')),name=column1),row=i+1,col=1)\n        fig.add_trace(go.Box(x = list(file[column2].astype('int64')), name=column2),row=i+1,col=1)\n    fig.update_layout(height=800, width=1000)\n    fig.show()\n    \n\nBoxPlots([files[0],files[2]],\"DC_POWER\",\"AC_POWER\",[\"Plant-1\",\"Plant-2\"])\n\n","6f0e4dcb":"BoxPlots([files[1],files[3]],\"AMBIENT_TEMPERATURE\",\"MODULE_TEMPERATURE\",[\"Plant-1\",\"Plant-2\"])","c4e701e2":"tmp1 = files[0].copy()\ntmp1[\"MONTH\"] = tmp1[\"DATE_TIME\"].dt.month\ntmp1[\"YEAR\"] = tmp1[\"DATE_TIME\"].dt.year\nplant1 = tmp1[tmp1.YEAR == 2020].sort_values('MONTH').groupby('MONTH').agg({\"DAILY_YIELD\":\"sum\"}).reset_index()\nplant1.index.name = None\n\nplant2 = pd.DataFrame(0, index=plant1.index, columns=['MONTH','DAILY_YIELD'])\nplant2['MONTH'] = pd.DataFrame(range(1,13))\n\ntmp2 = files[2].copy()\ntmp2[\"MONTH\"] = tmp2[\"DATE_TIME\"].dt.month\ntmp2[\"YEAR\"] = tmp2[\"DATE_TIME\"].dt.year \ntmp2 = tmp2[tmp2.YEAR == 2020].sort_values('MONTH').groupby('MONTH').agg({\"DAILY_YIELD\":\"sum\"}).reset_index()\ntmp2.index.name = None\nplant2.iloc[4:6] = tmp2.iloc[:].values","d3c86c48":"def BarMonth(temp_df,x,y, year, title):\n    fig = px.bar(temp_df,x=x,y=y)\n    fig.update_layout(title_text = title, title_x=0.5)\n    fig.show()  ","c5e11b7d":"BarMonth(plant1,'MONTH','DAILY_YIELD',2020,\"Plant-1 Monthly Yield\")\nBarMonth(plant2,'MONTH','DAILY_YIELD',2020,\"Plant-2 Monthly Yield\")","a65cd655":"<h1>Solar Power Plant - EDA<\/h1> ","76d78da9":"**<h2>Power Generation and Temperature<\/h2>**\nIn most of the parts of India, it's presumable to have maximum sunlight between 11:00 am to 4:00 pm and more sunlight means more power generation, more hot weather as well. \n\nfrom the data we can see that, as weather gets hot panels start getting hotter an hotter, at the same time panels are getting more sunlight and power generation increases drastically due to wich panels' temperature raises.","6c0fb5cd":"**<h2>Power Plant Data<\/h2>**\n* DATE_TIME -> date and time of the particular recorded instance\n* SOURCE_KEY -> it's a unique identity for the inverters (there can be multiple solar panels attached to a single inverter)\n* DC_POWER -> power generated in kW per 15 min time period\n* AC_POWER -> power generated in kW per 15 min time period\n* DAILY_YIELD -> power generated on a particular day\n* TOTAL_YIELD -> total power generated from the very beginning","cbf3e6cb":"It's quite obvious that month 5(May) and 6(June) both are summer months in india and during those time we get maximum heat. ","0d711ed9":"**<h2>Weather Sensor Data at Power Plant<\/h2>**\n* DATE_TIME -> date and time of the particular recorded instance\n* SOURCE_KEY -> it's a unique identity of the sensor (only one sensor at a plant)\n* AMBIENT_TEMPERATURE -> temperature of surrounding environment of the plant\n* MODULE_TEMPERATURE -> temperature of the solar panel\n* IRRADIATION -> it's a way of messuring amount of sun light coming on the unit area of solar panels\n\n**ASSUMPTIONS**\n1. Module temperature is the average temprature of all the solar panels at a given time\n2. all the solar panels are of same unit size OR the irradiation is the mean value for all the panels in a power plant","8a24cee9":"**I have observed all the 4 files and we have to do**\n1. All 4 datasets are having no null values, which is good.\n2. DATE_TIME(obj) needs to be DATE_TIME(datetime64).\n3. PLANT_ID will be droped ","b1f913fb":"plant-1 has heavy capacity\/production of DC power compare to the Ac power.\n"}}