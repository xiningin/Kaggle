{"cell_type":{"3ef743e2":"code","3b11a0d5":"code","04782baa":"code","8e2132d5":"code","7b2f3f6d":"code","96bcc2e9":"code","eed8e0c5":"code","97696b1e":"code","874ceea9":"code","954c518b":"code","db0abd57":"code","1f48e867":"code","feb1d977":"code","a770977f":"code","b8f60659":"code","022b88a8":"code","03989876":"code","e3da6958":"code","db3403a0":"code","caa358ad":"code","0c9ee27c":"code","263ef9f7":"code","4506d349":"code","2f0ca390":"code","34c02a1c":"code","513185c5":"code","635a4e61":"code","6cd95b6e":"code","10d62e9a":"code","75b883fc":"code","c792f3a8":"markdown","d83272db":"markdown","4576f078":"markdown","4594da36":"markdown","d4753410":"markdown","5b7c1a53":"markdown","22556179":"markdown","130c5734":"markdown"},"source":{"3ef743e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3b11a0d5":"import nltk\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('wordnet')","04782baa":"#linear algebra,data preprocessing,Csv files\nimport pandas as pd\nimport nltk\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n#for data cleaning\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nimport re\nimport string\n\n#for feature selection\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\n\n#evalution metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n\n#for classification\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.pipeline import Pipeline\n\n#model selection\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split","8e2132d5":"train_data = pd.read_csv('\/kaggle\/input\/ag-news-classification-dataset\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/ag-news-classification-dataset\/test.csv')","7b2f3f6d":"train_data.head()","96bcc2e9":"test_data.head()","eed8e0c5":"# I have changed the name of columns for the ease of use.\n\ntrain_data['text'] = train_data['Title'] + ' ' + train_data['Description']\ntest_data['text'] = test_data['Title'] + ' ' + test_data['Description']  \ntrain_data.head()\n","97696b1e":"#dropping unnecessary columns\n\ntrain_data = train_data.drop(columns=['Title', 'Description'])\ntest_data = test_data.drop(columns=['Title', 'Description'])\ntrain_data.head()","874ceea9":"#mapping category column with category index\n\n\ncategories = {1:'World News', 2:'Sports News', 3:'Business News', 4:'Science-Technology News'}\n\ntrain_data['category'] = train_data['Class Index'].map(categories)\ntest_data['category'] = test_data['Class Index'].map(categories)\n\ntrain_data = train_data.drop(columns=['Class Index'])\ntest_data = test_data.drop(columns=['Class Index'])","954c518b":"train_data.head()","db0abd57":"plt.style.use('ggplot')\ncategory  = train_data['category'].value_counts()\nplt.figure(figsize=(10,5))\nsns.barplot(category.index, category.values, alpha=0.8)\nplt.title('Frequency of each category of news(train data)')\nplt.ylabel('Number of Occurrences', fontsize=12)\nplt.xlabel('Category', fontsize=12)\nplt.show()","1f48e867":"plt.style.use('ggplot')\ncategory  = test_data['category'].value_counts()\nplt.figure(figsize=(10,5))\nsns.barplot(category.index, category.values, alpha=0.8)\nplt.title('Frequency of each category of news(test data)')\nplt.ylabel('Number of Occurrences', fontsize=12)\nplt.xlabel('Category', fontsize=12)\nplt.show()","feb1d977":"#removing punctuations\n\n\ndef remove_punc(text):\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    return text\n\ntrain_data['text'] = train_data['text'].apply(lambda x: remove_punc(x))\ntest_data['text'] = test_data['text'].apply(lambda x: remove_punc(x))","a770977f":"#normalizing case\n\ndef normalize(text):        \n    lower_case = text.lower()\n    tokens=word_tokenize(lower_case)\n    return (\" \".join(tokens)).strip()\n\n\n\ntrain_data['text'] = train_data['text'].apply(lambda x: normalize(x))\ntest_data['text'] = test_data['text'].apply(lambda x: normalize(x))","b8f60659":"#removing stop words\n\nnltk_stop_words = nltk.corpus.stopwords.words('english')\ndef remove_stop(text):        \n    word_list=[word for word in text.split() if word not in nltk_stop_words]\n    return \" \".join(word_list)\n\ntrain_data['text'] = train_data['text'].apply(lambda x: remove_stop(x))\ntest_data['text'] = test_data['text'].apply(lambda x: remove_stop(x))","022b88a8":"#lemmatizing \n\nlemmatizer = WordNetLemmatizer()\ndef lemma(text): \n    lemmas = [lemmatizer.lemmatize(word) for word in text.split()]\n    return \" \".join(lemmas)\n\ntrain_data['text'] = train_data['text'].apply(lambda x: lemma(x))\ntest_data['text'] = test_data['text'].apply(lambda x: lemma(x))\nprint(train_data['text'])","03989876":"count_vect = CountVectorizer()\nX_train_counts = count_vect.fit_transform(train_data.text)\nX_train_counts.shape","e3da6958":"tfidf_transformer = TfidfTransformer()\nX_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)\nX_train_tfidf.shape","db3403a0":"text_clf = Pipeline([('vect', CountVectorizer()),\n                     ('tfidf', TfidfTransformer()),\n                    ('clf', MultinomialNB()),])\n\ntext_clf = text_clf.fit(train_data.text, train_data.category)\npredicted_mnb = text_clf.predict(test_data.text)\nnp.mean(predicted_mnb == test_data.category)","caa358ad":"classification_report(test_data.category,predicted_mnb)","0c9ee27c":"confusion_matrix(test_data.category,predicted_mnb)","263ef9f7":"text_clf_svm = Pipeline([('vect', CountVectorizer()),\n                   ('tfidf', TfidfTransformer()),\n                     ('clf-svm', SGDClassifier(loss='hinge', penalty='l2',\n                                           alpha=1e-3,random_state=42)),])\n\ntext_clf_svm = text_clf_svm.fit(train_data.text, train_data.category)\npredicted_svm = text_clf_svm.predict(test_data.text)\nnp.mean(predicted_svm == test_data.category)","4506d349":"classification_report(test_data.category,predicted_svm)","2f0ca390":"confusion_matrix(test_data.category,predicted_svm)","34c02a1c":"logreg = Pipeline([('vect', CountVectorizer()),\n                ('tfidf', TfidfTransformer()),\n                ('clf', LogisticRegression(n_jobs=1, C=1e5,max_iter=10000)),\n               ])\nlogreg=logreg.fit(train_data.text,train_data.category)\npredicted_logreg = logreg.predict(test_data.text)\nnp.mean(predicted_logreg == test_data.category)","513185c5":"classification_report(test_data.category,predicted_logreg)","635a4e61":"confusion_matrix(test_data.category,predicted_logreg)","6cd95b6e":"parameters = {'vect__ngram_range': [(1, 1), (1, 2)],\n              'tfidf__use_idf': (True, False),\n               'clf__alpha': (1e-2, 1e-3),\n }\n\ngs_clf = GridSearchCV(text_clf, parameters, n_jobs=-1)\ngs_clf = gs_clf.fit(train_data.text, train_data.category)\npredicted_gs = gs_clf.predict(test_data.text)\nnp.mean(predicted_gs == test_data.category)","10d62e9a":"classification_report(test_data.category,predicted_gs)","75b883fc":"confusion_matrix(test_data.category,predicted_gs)","c792f3a8":"**Running Machine Learning Algorithm**","d83272db":"**Logistic Regression**","4576f078":"**Grid SearchCV**","4594da36":"**SVM Algorithm**","d4753410":"**Data Cleaning**","5b7c1a53":"**Feature Extraction**","22556179":"**Data Visualization**","130c5734":"Multinomial Naives Bayes"}}