{"cell_type":{"a6743f78":"code","fd064c30":"code","35e74472":"code","bc182f1e":"code","12494460":"code","e998fd5f":"code","0f23d95c":"code","a48314ff":"code","2583faee":"code","0927a53d":"code","fbda4de2":"code","2cc71ffc":"code","f45603a5":"code","3a507444":"code","71f2f236":"code","d592a3ce":"code","918a46f7":"code","2e067e73":"code","82e94767":"code","ea438a2f":"code","2f907484":"code","368003e2":"code","2fd9b437":"code","028e1570":"code","8568c21d":"code","af27502c":"code","eceec076":"code","59a54492":"code","f060ecd0":"code","253c6e99":"code","03f4bdf8":"code","71eccc13":"code","5885916d":"code","1fa6fde7":"code","d84fc524":"code","b3919fad":"code","337fea18":"code","971aa3b2":"code","c0e9df7f":"code","0d3e4e58":"code","d9d4e7dc":"code","86f1a0e1":"code","dde89abf":"code","1e1c641d":"code","ca23b55e":"code","5d8d9b09":"code","7a3bb771":"code","9ed8b200":"code","e4fbb1b1":"code","5497f8f8":"code","45c2209f":"code","ee7fbd52":"code","153c373b":"code","acdf0c8d":"code","e6e56358":"code","d6bb2eba":"code","79ee5291":"code","3b5ecd54":"code","f270ca6c":"code","86c21ad8":"code","b252f544":"code","db6e44b3":"code","7a82a4b6":"code","1513f28c":"code","0f7e0a7c":"code","3eda37c7":"code","4386c631":"code","2e6d0816":"code","6aec4a54":"code","34d85b97":"code","6fa0c83e":"code","a4459dc7":"code","bfe883eb":"code","b2b3aed4":"code","54b40e6c":"code","105ac05f":"code","0d2c2814":"code","ed8b60e1":"code","3a68e667":"code","6acdb3bf":"code","29872e3f":"code","1d077d0f":"code","66f0253a":"code","9ae2d572":"code","8ff358cb":"code","70a7ea0e":"code","90f20510":"code","facab58a":"code","50b716e9":"code","31bfc06b":"code","e16fcb0c":"code","3cb76e34":"code","0f018d66":"code","06a02786":"code","f434f061":"code","c45673e1":"code","a48c6cc8":"code","22406a02":"code","83fb0929":"code","a766186e":"code","ec7ddadc":"code","e79e3e8d":"code","32dc4413":"code","9ceaabf9":"code","01f19dcb":"code","03bd125a":"code","e4c4bbb9":"code","c30fb5bd":"code","f4f4bab6":"code","505fc873":"code","75460569":"code","917e51d5":"code","643aaa62":"code","aa41e430":"code","3e6237d7":"code","6914ec8e":"code","f11ebbfd":"code","c0060b65":"code","44db9231":"code","b244b3aa":"code","8d1ed1c1":"code","3b97b06b":"code","7276f6a5":"code","6bab9bf5":"code","6b5ab15e":"code","57b67aa5":"code","76199f2f":"code","c7980398":"code","c25b7650":"code","92dde14f":"code","ed8928b7":"code","6a147d14":"code","69da655d":"code","4208196f":"code","18ddc446":"code","5cea7e30":"code","6fab3d3f":"code","9a02d887":"code","5f8c0af4":"code","55850cb6":"code","dcb15e83":"code","2f5e7c80":"code","3a8fdaa7":"code","8b390e8c":"code","114ec836":"code","a2c612c0":"code","ee28d03f":"code","54bd9334":"code","d3592cd7":"code","56a3e1ad":"code","663f7aab":"code","39e78f2b":"code","d3b43bfe":"code","fb1f17f7":"code","88e9bfa9":"code","dcf2cdff":"code","8147bcc2":"code","b061e2c6":"code","ecfa196b":"code","edcba7da":"code","d4db150b":"code","53528935":"code","3b8ba193":"code","84454b8b":"code","d518332a":"code","4c2dc8f9":"code","827aaad1":"code","96e4aa89":"code","4fa6b5f1":"code","b4b4eaf4":"code","2a81252d":"code","2927054c":"code","4f437bb4":"code","18fea9bf":"code","a4420426":"code","2dbd44fd":"code","8395ef84":"markdown","08315ffd":"markdown","83c189ed":"markdown","2b503944":"markdown","f144db46":"markdown","e8aeef35":"markdown","4cf4d2aa":"markdown","acd4d454":"markdown","91440452":"markdown","1a78abc4":"markdown","297fd1a2":"markdown","a7282afd":"markdown","13c5443f":"markdown","a63645ea":"markdown","22fa947a":"markdown","3865c283":"markdown","19bf78f4":"markdown","5bf9bbe4":"markdown","09c133d7":"markdown","3d113137":"markdown","455b9f07":"markdown","1b54f04e":"markdown","6c2a7064":"markdown","4903cde7":"markdown","3678e395":"markdown","20b50656":"markdown","7da65067":"markdown","ea0a5a91":"markdown","6c961045":"markdown","ae587d76":"markdown","fdda746e":"markdown","7f6b542d":"markdown","b699d2fc":"markdown","19801f21":"markdown","b4277538":"markdown","9d8bb257":"markdown","b9e65006":"markdown"},"source":{"a6743f78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd064c30":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ngender_submission_df=pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ntest_PassengerId=test_df[\"PassengerId\"]","35e74472":"train_df.head()","bc182f1e":"test_df.head()","12494460":"gender_submission_df.head()","e998fd5f":"train_df.info()\n","0f23d95c":"print(train_df.columns)","a48314ff":"train_df.describe()","2583faee":"sns.countplot(x=\"Survived\",data=train_df)","0927a53d":"sns.countplot(x=\"Sex\",data=train_df)","fbda4de2":"sns.countplot(x=\"Pclass\",data=train_df)","2cc71ffc":"sns.countplot(x=\"Embarked\",data=train_df)","f45603a5":"sns.countplot(x=\"Cabin\",data=train_df)","3a507444":"sns.countplot(x=\"Ticket\",data=train_df)","71f2f236":"sns.countplot(x=\"SibSp\",data=train_df)","d592a3ce":"sns.countplot(x=\"Parch\",data=train_df)","918a46f7":"sns.distplot(train_df.Fare)","2e067e73":"sns.distplot(train_df.Age)","82e94767":"sns.barplot(x=train_df.PassengerId,y=train_df.PassengerId.value_counts(),data=train_df)","ea438a2f":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","2f907484":"sns.countplot(x=\"Pclass\", hue=\"Survived\", data=train_df)","368003e2":"train_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","2fd9b437":"sns.countplot(x=\"Sex\", hue=\"Survived\", data=train_df)","028e1570":"train_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","8568c21d":"sns.countplot(x=\"SibSp\", hue=\"Survived\", data=train_df)","af27502c":"train_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","eceec076":"sns.countplot(x=\"Parch\", hue=\"Survived\", data=train_df)","59a54492":"#sns.set_theme(style=\"ticks\", color_codes=True)\n\nsns.catplot(x=\"Sex\", y=\"Parch\",hue=\"Survived\", data=train_df)","f060ecd0":"#sns.set_theme(style=\"ticks\", color_codes=True)\n\nsns.catplot(x=\"Sex\", y=\"SibSp\",hue=\"Survived\", data=train_df)","253c6e99":"sns.countplot(x=\"Age\", hue=\"Survived\", data=train_df)","03f4bdf8":"sns.catplot(x=\"Survived\", y=\"Age\", data=train_df)","71eccc13":"sns.catplot(x=\"Pclass\", y=\"Age\",hue=\"Survived\", data=train_df)","5885916d":"sns.catplot(x=\"Sex\", y=\"Age\",hue=\"Survived\", data=train_df)","1fa6fde7":"sns.catplot(x=\"Sex\", y=\"Pclass\",hue=\"Survived\", data=train_df)","d84fc524":"#sns.catplot(x=\"Fare\", y=\"Age\",hue=\"Survived\", data=train_df)","b3919fad":"#sns.pairplot(train_df,height=1.5)","337fea18":"#corelation\nlist1=[\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot=True,fmt=\".2f\")","971aa3b2":"sns.boxplot(x=train_df[\"Age\"])","c0e9df7f":"sns.boxplot(x=train_df[\"SibSp\"])","0d3e4e58":"sns.boxplot(x=train_df[\"Parch\"])","d9d4e7dc":"sns.boxplot(x=train_df[\"Fare\"])","86f1a0e1":"train_df.columns[train_df.isnull().any()]","dde89abf":"test_df.columns[test_df.isnull().any()]","1e1c641d":"#train ve test df leri yukar\u0131dan a\u015fa\u011f\u0131 birle\u015ftirelim\ntrain_df_len=len(train_df)\ntrain_df=pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","ca23b55e":"train_df.columns[train_df.isnull().any()]","5d8d9b09":"#hangifeature'da ka\u00e7 eksik de\u011fer var.\ntrain_df.isnull().sum()","7a3bb771":"train_df[train_df[\"Embarked\"].isnull()]","9ed8b200":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")","e4fbb1b1":"train_df.Fare[train_df.Embarked==\"C\"].describe()","5497f8f8":"train_df.Fare[train_df.Embarked==\"Q\"].describe()","45c2209f":"train_df.Fare[train_df.Embarked==\"S\"].describe()","ee7fbd52":"train_df.Fare[train_df.Embarked==\"S\"].mean()","153c373b":"#it seems like the closest value to 80$ is C port\n\ntrain_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")","acdf0c8d":"#let us check if we still have NaN value\ntrain_df[train_df[\"Embarked\"].isnull()]","e6e56358":"train_df[train_df[\"Fare\"].isnull()]","d6bb2eba":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")","79ee5291":"train_df[train_df[\"Pclass\"]==3].describe()","3b5ecd54":"train_df[train_df[\"Pclass\"]==3].mean()","f270ca6c":"train_df.Fare[1043]=train_df[train_df[\"Pclass\"]==3].Fare.mean()","86c21ad8":"train_df.Fare[1043]","b252f544":"list1=[\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot=True,fmt=\".2f\")","db6e44b3":"g=sns.factorplot(x=\"SibSp\", y=\"Survived\", data=train_df, kind=\"bar\", size=6)\ng.set_ylabels(\"Survived Probablity\")\nplt.show()","7a82a4b6":"sns.countplot(x=\"SibSp\", hue=\"Survived\", data=train_df)","1513f28c":"g=sns.factorplot(x=\"Parch\", y=\"Survived\", data=train_df, kind=\"bar\", size=6)\ng.set_ylabels(\"Survived Probablity\")\nplt.show()","0f7e0a7c":"sns.countplot(x=\"Parch\", hue=\"Survived\", data=train_df)","3eda37c7":"g=sns.factorplot(x=\"Pclass\", y=\"Survived\", data=train_df, kind=\"bar\", size=6)\ng.set_ylabels(\"Survived Probablity\")\nplt.show()","4386c631":"sns.countplot(x=\"Pclass\", hue=\"Survived\", data=train_df)","2e6d0816":"g=sns.FacetGrid(train_df,col=\"Survived\")\ng.map(sns.distplot,\"Age\",bins=100)\nplt.show()","6aec4a54":"sns.countplot(x=\"Age\", hue=\"Survived\", data=train_df)","34d85b97":"g=sns.FacetGrid(train_df,col=\"Survived\", row=\"Pclass\",size=2)\ng.map(plt.hist,\"Age\",bins=25)\ng.add_legend()\nplt.show()","6fa0c83e":"sns.catplot(x=\"Pclass\", y=\"Age\",hue=\"Survived\", data=train_df)","a4459dc7":"g=sns.FacetGrid(train_df, row=\"Embarked\", size=2)\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","bfe883eb":"g=sns.FacetGrid(train_df,row=\"Embarked\",col=\"Survived\",size=2)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","b2b3aed4":"train_df[train_df[\"Age\"].isnull()]","54b40e6c":"g=sns.factorplot(x=\"Sex\",y=\"Age\", data=train_df, kind=\"box\")\nplt.show()","105ac05f":"g=sns.factorplot(x=\"Pclass\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","0d2c2814":"g=sns.factorplot(x=\"Sex\",y=\"Age\",hue=\"Pclass\", data=train_df,kind=\"box\")\nplt.show()","ed8b60e1":"g=sns.factorplot(x=\"Parch\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","3a68e667":"g=sns.factorplot(x=\"Parch\",y=\"Age\",data=train_df,kind=\"box\")\ng=sns.factorplot(x=\"SibSp\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","6acdb3bf":"#now let us check the corr. between some of features. to do that we'll use heatmap\n\nsns.heatmap(train_df[[\"Age\",\"Sex\", \"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot=True)\nplt.show()\n\n# sex feature is not seen at the heatmap. Because it has string contents(male and female)\n# we will apply list comprehension to convert the content\n\n#train_df[\"Sex\"]=[1 if i==\"male\" else 0 for i in train_df[\"Sex\"]]\n\n","29872e3f":"#let us check again\ntrain_df[\"Sex\"]=[1 if i==\"male\" else 0 for i in train_df[\"Sex\"]]\nsns.heatmap(train_df[[\"Age\",\"Sex\", \"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot=True)\nplt.show()\n","1d077d0f":"train_df.Sex.value_counts()","66f0253a":"# fill the empty data in age feature\n\n\nindex_nan_age=list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)","9ae2d572":"index_nan_age","8ff358cb":"for i in index_nan_age:\n    age_predict=train_df[\"Age\"][((train_df[\"SibSp\"]==train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"]==train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"]==train_df.iloc[i][\"Pclass\"]))].median()\n    age_med=train_df[\"Age\"].median()\n    if not np.isnan(age_predict):\n        train_df[\"Age\"].iloc[i]=age_predict\n    else:\n        train_df[\"Age\"].iloc[i]=age_med\n        \n    ","70a7ea0e":"age_predict","90f20510":"train_df[train_df[\"Age\"].isnull()]","facab58a":"train_df[\"Name\"].head(10)","50b716e9":"s=\"Braund, Mr. Owen Harris\"\ns.split(\".\")","31bfc06b":"s.split(\".\")[0]","e16fcb0c":"s.split(\".\")[0].split(\",\")","3cb76e34":"s.split(\".\")[0].split(\",\")[1]","0f018d66":"# it is better to use -1 because it means the last item\ns.split(\".\")[0].split(\",\")[-1]","06a02786":"# to erase the space before Mr use strip method\ns.split(\".\")[0].split(\",\")[-1].strip()","f434f061":"name=train_df[\"Name\"]\ntrain_df[\"Title\"]=[ i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","c45673e1":"train_df[\"Title\"].head(10)","a48c6cc8":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","22406a02":"train_df[\"Title\"].value_counts()","83fb0929":"#convert to categorical\ntrain_df[\"Title\"]=train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")","a766186e":"train_df[\"Title\"].value_counts()","ec7ddadc":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","e79e3e8d":"train_df[\"Title\"]=[0 if i == \"Master\" else 1 if i== \"Miss\" or i==\"Ms\" or i==\"Mlle\" or i==\"Mrs\" else 2 if i==\"Mr\" else 3 for i in train_df[\"Title\"]]","32dc4413":"train_df[\"Title\"].head(10)","9ceaabf9":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","01f19dcb":"#check the survival rates  of new created categories\ng=sns.factorplot(x=\"Title\",y=\"Survived\", data=train_df,kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","03bd125a":"sns.countplot(x=\"Title\", hue=\"Survived\", data=train_df)","e4c4bbb9":"#we have title feature. so we can drop the name feature\n\ntrain_df.drop(labels=[\"Name\"],axis=1,inplace=True)","c30fb5bd":"train_df.head()","f4f4bab6":"train_df=pd.get_dummies(train_df,columns=[\"Title\"])","505fc873":"train_df.head()","75460569":"train_df.head()","917e51d5":"#if the passenger is alone than we use 1\ntrain_df[\"Fsize\"]=train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","643aaa62":"train_df.head()","aa41e430":"g=sns.factorplot(x=\"Fsize\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","3e6237d7":"train_df[\"family-size\"]=[1 if i<5 else 0 for i in train_df[\"Fsize\"]]","6914ec8e":"train_df.head()","f11ebbfd":"sns.countplot(x=\"family-size\",data=train_df)\nplt.show()","c0060b65":"g=sns.factorplot(x=\"family-size\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","44db9231":"sns.catplot(x=\"family-size\", y=\"Survived\", data=train_df)","b244b3aa":"train_df=pd.get_dummies(train_df,columns=[\"family-size\"])","8d1ed1c1":"train_df.head()","3b97b06b":"train_df[\"Embarked\"].head()","7276f6a5":"sns.countplot(x=\"Embarked\",data=train_df)\nplt.show()","6bab9bf5":"train_df=pd.get_dummies(train_df,columns=[\"Embarked\"])","6b5ab15e":"train_df.head()","57b67aa5":"train_df[\"Ticket\"].head(10)","76199f2f":"a=\"          A.\/5. 2152\"","c7980398":"a","c25b7650":"a.replace(\".\",\"\")","92dde14f":"a.replace(\".\",\"\").replace(\"\/\",\"\")","ed8928b7":"a.replace(\".\",\"\").replace(\"\/\",\"\").strip()","6a147d14":"a.replace(\".\",\"\").replace(\"\/\",\"\").strip().split()","69da655d":"tickets=[]\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split()[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"]=tickets","4208196f":"train_df[\"Ticket\"].head(20)","18ddc446":"train_df.head()","5cea7e30":"train_df=pd.get_dummies(train_df,columns=[\"Ticket\"],prefix=\"T\")","6fab3d3f":"train_df.head(5)","9a02d887":"g=sns.countplot(x=\"Pclass\",data=train_df)\nplt.show()","5f8c0af4":"train_df[\"Pclass\"].head()","55850cb6":"train_df[\"Pclass\"]=train_df[\"Pclass\"].astype(\"category\")","dcb15e83":"train_df[\"Pclass\"].head()","2f5e7c80":"train_df=pd.get_dummies(train_df,columns=[\"Pclass\"])","3a8fdaa7":"train_df.head()","8b390e8c":"train_df.Sex","114ec836":"train_df.Sex=train_df.Sex.astype(\"category\")","a2c612c0":"train_df.Sex.value_counts()","ee28d03f":"train_df=pd.get_dummies(train_df,columns=[\"Sex\"])","54bd9334":"train_df.head()","d3592cd7":"train_df.drop(labels=[\"PassengerId\", \"Cabin\"],axis=1, inplace=True)","56a3e1ad":"train_df.head()","663f7aab":"train_df.drop(labels=[\"SibSp\", \"Parch\"],axis=1, inplace=True)","39e78f2b":"train_df.Sex_0.value_counts()","d3b43bfe":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\n","fb1f17f7":"train_df_len","88e9bfa9":"test=train_df[train_df_len:]","dcf2cdff":"test.head()","8147bcc2":"test.drop(labels=[\"Survived\"], axis=1, inplace=True)","b061e2c6":"test.head()","ecfa196b":"train=train_df[:train_df_len]\nX_train= train.drop(labels=[\"Survived\"],axis=1)\ny_train=train.Survived\nprint(\"X_train\",len(X_train))\nprint(\"y_train\",len(y_train))\n\nX_train, X_test, y_train, y_test=train_test_split(X_train, y_train, test_size=0.10, random_state=42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","edcba7da":"X_train.info()","d4db150b":"logreg=LogisticRegression(solver ='lbfgs',multi_class ='multinomial',max_iter = 500)\n\nlogreg.fit(X_train,y_train)","53528935":"acc_log_train=round(logreg.score(X_train,y_train)*100,2)","3b8ba193":"acc_log_train","84454b8b":"acc_log_test=round(logreg.score(X_test,y_test)*100,2)","d518332a":"acc_log_test","4c2dc8f9":"print(\"Training accuracy {}\".format(acc_log_train))\nprint(\"Test accuracy {}\".format(acc_log_test))","827aaad1":"nb=GaussianNB()\nnb.fit(X_train,y_train)\nacc_nb_train=round(nb.score(X_train,y_train)*100,2)\nacc_nb_test=round(nb.score(X_test,y_test)*100,2)\nprint(acc_nb_train)\nprint(acc_nb_test)\n","96e4aa89":"random_state=42\nclassifier=[DecisionTreeClassifier(random_state=random_state),\n           SVC(random_state=random_state),\n           RandomForestClassifier(random_state=random_state),\n           LogisticRegression(random_state=random_state),\n           KNeighborsClassifier()]\n\n#selecting to needed parameter for hyper parameter tuning\n##decision tree parameter grid\ndt_param_grid={\"min_samples_split\": range(10,500,20),\n              \"max_depth\": range(1,20,2)}\nsvc_param_grid={\"kernel\":[\"rbf\"],\n               \"gamma\":[0.001,0.01,0.1,1],\n               \"C\":[1,10,50,100,200,300,1000],\n               \"probability\" : [True]}#erdem ekledi\n\nrf_param_grid={\"max_features\":[1,3,5,10,25,35,50],#[1,3,10,],\n              \"min_samples_split\":[2,3,10],\n              \"min_samples_leaf\":[1,3,10],\n              \"bootstrap\":[False],\n              \"n_estimators\":[100,300],\n              \"criterion\":[\"gini\",\"entropy\"]}#entropy yi ben ekledim\n\nlogreg_param_grid={\"C\":np.logspace(-3,13,17),\n                  \"penalty\":[\"l1\",\"l2\"],\"max_iter\":  [500]}#max_iter \u015fimdi ekledim erdem\n\nknn_param_grid={\"n_neighbors\": np.linspace(1,50,50,dtype=int).tolist(),\n               \"weights\":[\"uniform\",\"distance\"],\n               \"metric\":[\"euclidean\",\"manhattan\"]}\n\nclassifier_param=[dt_param_grid,svc_param_grid,rf_param_grid,\n                  logreg_param_grid,knn_param_grid]\n","4fa6b5f1":"range(len(classifier))","b4b4eaf4":"#keep the results in cv_result\ncv_result=[]\n\nbest_estimators=[]\n\nfor i in range(len(classifier)):\n    clf=GridSearchCV(classifier[i],param_grid=classifier_param[i],\n                     cv=StratifiedKFold(n_splits=10),scoring=\"accuracy\",\n                    n_jobs=-1,# for parallel running for higher speed\n                    verbose=1  #show the results while the code is running\n                    )\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])\n","2a81252d":"cv_results=pd.DataFrame({\"Cross Validation Means\":cv_result,\n          \"ML Models\": [\"DecisionTreeClassifier\",\"SVC\",\"RandomForestClassifier\",\n                        \"LogisticRegression\",\"KNeighborsClassifier\"\n                       ]\n                       })\ng=sns.barplot(\"Cross Validation Means\",\"ML Models\",data=cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")\nplt.show()","2927054c":"#use 3 models which are higher rate than 80%\nvotingC=VotingClassifier(estimators=[(\"dt\",best_estimators[0]),\n                                    (\"rfc\",best_estimators[2]),\n                                    (\"lr\",best_estimators[3])],\n                                    voting=\"soft\",n_jobs=-1)\n\n\n\nvotingC=votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","4f437bb4":"test_survived=pd.Series(votingC.predict(test),name=\"Survived\")\nresults=pd.concat([test_PassengerId,test_survived],axis=1)\nresults.to_csv(\"titanic.csv\",index=False)","18fea9bf":"test_survived","a4420426":"test_survived=pd.Series(votingC.predict(test),name=\"Survived\").astype(int)\nresults=pd.concat([test_PassengerId,test_survived],axis=1)\nresults.to_csv(\"titanic.csv\",index=False)","2dbd44fd":"test_survived","8395ef84":"<a id=\"8\"><\/a><br>\n# Missing Value","08315ffd":"<a id = \"1\"><\/a><br>\n## Load and Check Data","83c189ed":"<a id=\"33\"><\/a><br>\n## Ensemble Modeling","2b503944":"<a id=\"16\"><\/a><br>\n### Age -- Survived","f144db46":"<a id=\"30\"><\/a><br>\n## Train - Test Split","e8aeef35":"<a id=\"20\"><\/a><br>\n### Fill Mising : Age Feature","4cf4d2aa":"<a id=\"19\"><\/a><br>\n### Embarked -- Sex -- Fare -- Survived\n","acd4d454":"<a id=\"25\"><\/a><br>\n## Pclass","91440452":"<a id=\"15\"><\/a><br>\n### Pclass -- Survived","1a78abc4":"let us check some of other relations between features","297fd1a2":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew_.\n\n<font color = 'blue'>\nContent: \n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32) \n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","a7282afd":"FeaturesForOutlierAnl: Age,SibSp,Parch,Fare","13c5443f":"<a id=\"5\"><\/a><br>\n## Numerical Variable\nFare, Age, PassengerId","a63645ea":"<a id=\"13\"><\/a><br>\n### Sibsp -- Survived","22fa947a":"<a id=\"31\"><\/a><br>\n## Simple Logistic Regression","3865c283":"<a id=\"25\"><\/a><br>\n## Ticket","19bf78f4":"<a id=\"27\"><\/a><br>\n## Sex","5bf9bbe4":"We will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","09c133d7":"<a id = \"2\"><\/a><br>\n## Variable Description\n1. PassengerId: unique id number to each passenger\n1. Survived: passenger survive(1) or died(0)\n1. Pclass: passenger class\n1. Name: name\n1. Sex: gender of passenger \n1. Age: age of passenger \n1. SibSp: number of siblings\/spouses\n1. Parch: number of parents\/children \n1. Ticket: ticket number \n1. Fare: amount of money spent on ticket\n1. Cabin: cabin category\n1. Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)","3d113137":"<a id=\"22\"><\/a><br>\n### Name -- Title","455b9f07":"## naive bayes","1b54f04e":"<a id=\"3\"><\/a><br>\n# Univariate Variable Analysis\n\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, age and passengerId\n","6c2a7064":"<a id=\"12\"><\/a><br>\n### Correlation between SibSp -- Parch -- Age -- Fare -- Survived","4903cde7":"<a id=\"14\"><\/a><br>\n### Parch -- Survived","3678e395":"<a id=\"10\"><\/a><br>\n## Fill Missing Value\n*  Embarked has two missing values\n*  Fare has one missing value","20b50656":"<a id=\"11\"><\/a><br>\n# Visualization","7da65067":"<a id=\"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation","ea0a5a91":"<a id=\"23\"><\/a><br>\n## Family Size","6c961045":"<a id=\"24\"><\/a><br>\n## Embarked","ae587d76":"<a id=\"9\"><\/a><br>\n## Find Missing Value","fdda746e":"<a id=\"34\"><\/a><br>\n## Prediction and Submission","7f6b542d":"<a id=\"18\"><\/a><br>\n### Embarked -- Sex -- Pclass -- Survived","b699d2fc":"<a id=\"28\"><\/a><br>\n## Drop Passenger ID and Cabin","19801f21":"<a id=\"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","b4277538":"<a id=\"29\"><\/a><br>\n# Modeling","9d8bb257":"<a id=\"17\"><\/a><br>\n### Pclass -- Survived -- Age","b9e65006":"<a id=\"7\"><\/a><br>\n# Outlier Detection"}}