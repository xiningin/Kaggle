{"cell_type":{"fa327e27":"code","a688e4a6":"code","88807f67":"code","bf9eefcd":"code","e8bde8b6":"code","229c0c5d":"code","fd2c4e12":"code","0258c01c":"code","fc07e4e8":"code","8cbe535f":"code","af648349":"code","2b888070":"code","0ce84d26":"code","4ca66f62":"markdown","fad78b93":"markdown","54785037":"markdown","c9e4ae58":"markdown"},"source":{"fa327e27":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n","a688e4a6":"data = pd.read_csv(\"..\/input\/fire-department-calls-for-service.csv\")\n\ndata.head(10)","88807f67":"colWithMixedType = (1,9,20,25,29,30)\n\ndata.dtypes\n","bf9eefcd":"Latitude = []\nLongitude = []\n\nfor i in range(len(data['Location'])):\n    x = data['Location'].iloc[i].split('\\'')\n    Latitude.append(float(x[5]))\n    Longitude.append(float(x[9]))\n    \ndata['Latitude'] = pd.Series(Latitude)\ndata['Longitude'] = pd.Series(Longitude)","e8bde8b6":"print(data.shape[0])\n\nper = (data.isnull().sum()\/data.shape[0])*100\npercents = per.iloc[per.nonzero()[0]]\n\nprint(percents)\n\nfrom matplotlib import pyplot as plt\npercents.plot.barh()\nplt.show()","229c0c5d":"data = data[data['Available DtTm'].notnull()]\ndata = data[data['City'].notnull()]\ndata = data[data['Zipcode of Incident'].notnull()]\ndata = data[data['Station Area'].notnull()]\ndata = data[data['Box'].notnull()]\ndata = data[data['Original Priority'].notnull()]\ndata = data[data['Priority'].notnull()]\ndata = data[data['Unit sequence in call dispatch'].notnull()]\n","fd2c4e12":"print(data.shape[0])\n\nper = (data.isnull().sum()\/data.shape[0])*100\npercents = per.iloc[per.nonzero()[0]]\n\nprint(percents)","0258c01c":"len(data['Call Number'].unique())","fc07e4e8":"len(data['Unit ID'].unique())","8cbe535f":"len(data['Call Type'].unique())","af648349":"len(data['Call Date'].unique())","2b888070":"\ndata[\"Call Number\"].value_counts().nlargest(30).plot(\"barh\",width = 1).invert_yaxis()\nplt.title(\"Call Number\")\nplt.xlabel('Count')\nplt.ylabel('Call Number')\nplt.show()\n\ndata[\"Unit ID\"].value_counts().nlargest(30).plot(\"barh\",width = 1).invert_yaxis()\nplt.title(\"Unit ID\")\nplt.xlabel('Count')\nplt.ylabel('Unit ID')\nplt.show()\n\ndata[\"Call Type\"].value_counts().nlargest(20).plot(\"barh\",width = 1).invert_yaxis()\nplt.title(\"Call Type\")\nplt.xlabel('Count')\nplt.ylabel('Call Type')\nplt.show()\n\ndata[\"Call Date\"].value_counts().nlargest(30).plot(\"barh\",width = 1).invert_yaxis()\nplt.title(\"Call Date\")\nplt.xlabel('Count')\nplt.ylabel('Call Date')\nplt.show()\n\ndata[\"Zipcode of Incident\"].value_counts().nlargest(30).plot(\"barh\",width = 1).invert_yaxis()\nplt.title(\"Zipcode of Incident\")\nplt.xlabel('Count')\nplt.ylabel('Zipcode of Incident')\nplt.show()\n","0ce84d26":"from mpl_toolkits.basemap import Basemap\nimport folium\nfrom folium import plugins\n\nmm = folium.Map([37.7749, -122.4194], tiles = \"Stamen Terrain\", zoom_start=12)\n\nhm_wide = plugins.HeatMap( list(zip(data.Latitude.values, data.Longitude.values)),\n                     min_opacity=0.2,\n                     radius=17, blur=15,\n                     max_zoom=1\n                 )\nmm.add_child(hm_wide)\n\nmm","4ca66f62":"# Looking at each variable one at a time","fad78b93":"# Plots\n","54785037":"Removing rows where percentage is less than 2.","c9e4ae58":"# Missing Values"}}