{"cell_type":{"a4917d3e":"code","d718f578":"code","9ada3bf6":"code","9d55378e":"code","8bcfe56b":"markdown"},"source":{"a4917d3e":"# \u52a0\u8f7d\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\nimport numpy as np\npokemon_train = np.load(\"..\/input\/pokemon_train.npy\")\npokemon_test = np.load(\"..\/input\/pokemon_test.npy\")","d718f578":"# \u8bad\u7ec3\u6570\u636e\u7684\u7b2c\u4e00\u5217\u662f\u6807\u7b7e\uff0c\u540e\u9762128*128*3\u5217\u662f\u56fe\u7247\u6bcf\u4e00\u4e2a\u50cf\u7d20\n# \u6d4b\u8bd5\u6570\u636e\u6ca1\u6709\u6807\u7b7e\nx_train = pokemon_train[:, 1:].reshape(-1, 128, 128, 3)\ny_train = pokemon_train[:, 0].reshape([-1])\nx_test = pokemon_test.reshape(-1, 128, 128, 3)\n\n# \u53ef\u89c6\u5316\u524d10\u4e2a\u8bad\u7ec3\u6570\u636e\nimport matplotlib.pyplot as plt\nfig, axes = plt.subplots(2, 5, figsize=(10, 4))\naxes = axes.flatten()\nfor i in range(10):\n    axes[i].imshow(x_train[i])\n    axes[i].set_xticks([])\n    axes[i].set_yticks([])\nplt.tight_layout()\nplt.show()\n\nprint('\u8fd9\u5341\u5f20\u56fe\u7247\u7684\u6807\u7b7e\u5206\u522b\u662f\uff1a', y_train[:10])\n\n# \u5c06\u6807\u7b7e\u5bf9\u5e94\u4e3a\u5b9d\u53ef\u68a6\u79cd\u7c7b\nlabel_name = {0:'\u5999\u86d9\u79cd\u5b50', 1:'\u5c0f\u706b\u9f99', 2:'\u8d85\u68a6', 3:'\u76ae\u5361\u4e18', 4:'\u6770\u5c3c\u9f9f'}\nname_list = []\nfor i in range(10):\n    name_list.append(label_name[y_train[i]])\nprint('\u8fd9\u5341\u5f20\u56fe\u7247\u6807\u7b7e\u5bf9\u5e94\u7684\u5b9d\u53ef\u68a6\u79cd\u7c7b\u5206\u522b\u4e3a\uff1a', name_list)","9ada3bf6":"# \u5f00\u59cb\u8bad\u7ec3\u4e00\u4e2a\u7b80\u5355\u7684CNN\u6a21\u578b\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.optimizers import Adam\n\nx_train = pokemon_train[:, 1:].reshape(-1, 128, 128, 3)\ny_train = pokemon_train[:, 0].reshape([-1])\nx_test = pokemon_test.reshape(-1, 128, 128, 3)\n\nx_train = x_train \/ 255\ny_train = keras.utils.to_categorical(y_train)\n\nmodel = Sequential()\nmodel.add(Conv2D(32, (5, 5), activation=\"relu\", input_shape=(128, 128, 3)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation=\"relu\"))\nmodel.add(Dense(5, activation=\"softmax\"))\n\nmodel.compile(loss=\"categorical_crossentropy\",  optimizer=Adam(lr=0.00001), metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, batch_size=32, epochs=8)","9d55378e":"from IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\n\n# \u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u6765\u9884\u6d4b\u6d4b\u8bd5\u96c6\u7684\u6807\u7b7e\nx_test = pokemon_test.reshape(-1, 128, 128, 3)\nx_test = x_test \/ 255\npredict_labels = model.predict_classes(x_test, batch_size=32)\n\npredict_label_csv = np.hstack([(np.arange(predict_labels.shape[0])+1).reshape([-1, 1]), predict_labels.reshape([-1, 1])])\nnp.savetxt('predict_label.csv', predict_label_csv, delimiter = ',', header='Id,Category')\n\n# \u4e3a\u9884\u6d4b\u7684\u6807\u7b7e\u751f\u6210\u4e00\u4e2a\u4e0b\u8f7d\u94fe\u63a5\uff0c\u4e0b\u8f7d\u5f97\u5230\u7684csv\u6587\u4ef6\u53ef\u4ee5\u76f4\u63a5\u63d0\u4ea4\u7136\u540e\u67e5\u770b\u81ea\u5df1\u7684\u6392\u540d\ndef create_download_link(title = \"Download CSV file\", filename = \"data.csv\"):  \n    html = '<a href={filename}>{title}<\/a>'\n    html = html.format(title=title,filename=filename)\n    return HTML(html)\n\ncreate_download_link(filename='predict_label.csv')","8bcfe56b":"\u8fd9\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684CNN\u5c1d\u8bd5\uff0c\u6700\u7ec8\u7684\u9884\u6d4b\u6807\u7b7e\u63d0\u4ea4\u540e\u5f97\u5230\u7684\u5206\u6570\u662f0.81437\n\n\u8fd9\u91cc\u6709\u4e00\u4e9b\u6539\u8fdb\u8fd9\u4e2abaseline\u7684\u5efa\u8bae\uff1a\n1. \u8c03\u6574CNN\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u4f8b\u5982\u52a0\u6df1\u3001\u589e\u5927\u5377\u79ef\u6838\u4e2a\u6570\n2. \u4f7f\u7528\u4e0d\u540c\u7684\u4f18\u5316\u5668\n3. \u8c03\u6574\u5b66\u4e60\u7387\n4. \u8bad\u7ec3\u66f4\u591a\u8f6e\u6570\n5. \u4f7f\u7528\u56fe\u50cf\u589e\u5f3a\n\n\u76f8\u4fe1\u540c\u5b66\u4eec\u7ecf\u8fc7\u4e00\u7cfb\u5217\u7684\u6539\u8fdb\u540e\u4e00\u5b9a\u80fd\u53d6\u5f97\u66f4\u68d2\u7684\u7ed3\u679c"}}