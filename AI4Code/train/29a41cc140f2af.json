{"cell_type":{"5e39cb9a":"code","c0e2d60d":"code","d867f98a":"code","9ca5febb":"code","736adbbd":"code","c8f0513b":"code","461a8d42":"code","4d38604f":"code","d7b9289d":"code","15b0277c":"code","7d9aff5e":"code","fe3ea7bd":"code","bc6f6726":"code","b766297d":"code","9ce3e5b5":"code","d43eec8d":"code","e6f67b57":"code","437542ee":"code","52c279ce":"code","e4dece5d":"code","380629c0":"code","bed4c58d":"code","c7378952":"code","8e6d853b":"code","86045ee9":"code","2ca19b5f":"code","1a36f2b1":"code","706ad311":"code","1babbd21":"code","a34bf4a5":"markdown","768efd6d":"markdown","375cf779":"markdown"},"source":{"5e39cb9a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\nimport matplotlib.cm as cm\nimport re\nsns.set_style(\"whitegrid\")\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import PolynomialFeatures","c0e2d60d":"df = pd.read_csv('..\/input\/fifa19\/data.csv')\ndf.columns","d867f98a":"df = df[['Name', 'Age', 'Nationality', 'Overall', 'Potential', 'Club', 'Value', 'Position']]\ndf.head(10)","9ca5febb":"# get remaining potential\ndf['Remaining Potential'] = df['Potential'] - df['Overall']","736adbbd":"df.head(10)","c8f0513b":"df['Unit'] = df['Value'].str[-1]\ndf['Value (M)'] = np.where(df['Unit'] == '0', 0, df['Value'].str[1:-1].replace(r'[a-zA-Z]',''))\ndf['Value (M)'] = df['Value (M)'].astype(float)\ndf['Value (M)'] = np.where(df['Unit'] == 'M', df['Value (M)'], df['Value (M)']\/1000)","461a8d42":"df.head(10)","4d38604f":"df = df.drop('Unit', axis = 1)","d7b9289d":"df.head(10)","15b0277c":"# 'ST', 'RW', 'LW', 'GK', 'CDM', 'CB', 'RM', 'CM', 'LM', 'LB', 'CAM','RB', 'CF', 'RWB', 'LWB'\n\ndef get_best_squad(position):\n    df_copy = df.copy()\n    store = []\n    for i in position:\n        \n        store.append([i,df_copy.loc[[df_copy[df_copy['Position'] == i]['Overall'].idxmax()]]['Name'].to_string(index = False), df_copy[df_copy['Position'] == i]['Overall'].max(),df_copy.loc[[df_copy[df_copy['Position'] == i]['Overall'].idxmax()]]['Club'].to_string(index = False)])\n       \n        df_copy.drop(df_copy[df_copy['Position'] == i]['Overall'].idxmax(), inplace = True)\n    #return store\n    return pd.DataFrame(np.array(store).reshape(11,4), columns = ['Position', 'Player', 'Overall','Club']).to_string(index = False)\n\n# 4-3-3\nsquad_433 = ['GK', 'LB', 'CB', 'CB', 'RB', 'LM', 'CDM', 'RM', 'LW', 'ST', 'RW']\nprint ('4-3-3')\nprint (get_best_squad(squad_433))","7d9aff5e":"# 3-5-2\nsquad_352 = ['GK', 'LWB', 'CB', 'RWB', 'LM', 'CDM', 'CAM', 'CM', 'RM', 'LW', 'RW']\nprint ('3-5-2')\nprint (get_best_squad(squad_352))","fe3ea7bd":"df_p = df.groupby(['Age'])['Potential'].mean()\ndf_o = df.groupby(['Age'])['Overall'].mean()\n\ndf_summary = pd.concat([df_p, df_o], axis=1)\n\nax = df_summary.plot()\nax.set_ylabel('Rating')\nax.set_title('Average Rating by Age')","bc6f6726":"df.fillna('',inplace=True)","b766297d":"df.info()","9ce3e5b5":"def get_best_squads(position, club = '*', measurement = 'Overall'):\n    df_copy = df.copy()\n    df_copy = df_copy[df_copy['Club'] == club]\n    store = []\n    for i in position:\n        store.append([df_copy.loc[[df_copy[df_copy['Position'].str.contains(i)][measurement].idxmax()]]['Position'].to_string(index = False),\n                      df_copy.loc[[df_copy[df_copy['Position'].str.contains(i)][measurement].idxmax()]]['Name'].to_string(index = False),\n                      df_copy[df_copy['Position'].str.contains(i)][measurement].max(), \n                      float(df_copy.loc[[df_copy[df_copy['Position'].str.contains(i)][measurement].idxmax()]]['Value (M)'].to_string(index = False))])\n        df_copy.drop(df_copy[df_copy['Position'].str.contains(i)][measurement].idxmax(), inplace = True)\n    return np.mean([x[2] for x in store]).round(1),pd.DataFrame(np.array(store).reshape(11,4), columns = ['Position', 'Player', measurement, 'Value (M)']).to_string(index = False),np.sum([x[3] for x in store]).round(1)\n\n# easier constraint\nsquad_433_adj = ['GK', 'B$', 'B$', 'B$', 'B$', 'M$', 'M$', 'M$', 'W$|T$', 'W$|T$', 'W$|T$']\n\n# Example Output for Chelsea\nrating_433_Chelsea_Overall, best_list_433_Chelsea_Overall, value_433_Chelsea_Overall = get_best_squads(squad_433_adj, 'Chelsea', 'Overall')\nrating_433_Chelsea_Potential, best_list_433_Chelsea_Potential, value_433_Chelsea_Potential  = get_best_squads(squad_433_adj, 'Chelsea', 'Potential')\n\nprint('-Overall-')\nprint('Average rating: {:.1f}'.format(rating_433_Chelsea_Overall))\nprint('Total Value (M): {:.1f}'.format(value_433_Chelsea_Overall))\nprint(best_list_433_Chelsea_Overall)\n\nprint('-Potential-')\nprint('Average rating: {:.1f}'.format(rating_433_Chelsea_Potential))\nprint('Total Value (M): {:.1f}'.format(value_433_Chelsea_Potential))\nprint(best_list_433_Chelsea_Potential)\n","d43eec8d":"# very easy constraint since some club do not have strict squad\nsquad_352_adj = ['GK', 'B$', 'B$', 'B$', 'M$|W$|T$', 'M$|W$|T$', 'M$|W$|T$', 'M$|W$|T$', 'M$|W$|T$', 'W$|T$|M$', 'W$|T$|M$']\n\nBy_club = df.groupby(['Club'])['Overall'].mean()\n\ndef get_summary(squad):\n    OP = []\n    # only get top 100 clubs for shorter run-time\n    for i in By_club.sort_values(ascending = False).index[0:100]:\n        # for overall rating\n        O_temp_rating, _, _  = get_best_squads(squad, club = i, measurement = 'Overall')\n        # for potential rating & corresponding value\n        P_temp_rating, _, P_temp_value = get_best_squads(squad, club = i, measurement = 'Potential')\n        OP.append([i, O_temp_rating, P_temp_rating, P_temp_value])\n    return OP\n\n\nOP_df = pd.DataFrame(np.array(get_summary(squad_352_adj)).reshape(-1,4), columns = ['Club', 'Overall', 'Potential', 'Value of highest Potential squad'])\nOP_df.set_index('Club', inplace = True)\nOP_df = OP_df.astype(float)    ","e6f67b57":"fig, ax = plt.subplots()\nOP_df.plot(kind = 'scatter', x = 'Overall', y = 'Potential', c = 'Value of highest Potential squad', \n           s = 50, figsize = (15,15), xlim = (70, 90), ylim = (70, 90),\n           title = 'Current Rating vs Potential Rating by Club: 3-5-2', ax = ax)\n","437542ee":"fig, ax = plt.subplots()\nOP_df.plot(kind = 'scatter', x = 'Overall', y = 'Potential', c = 'Value of highest Potential squad',\n           s = 50, figsize = (15,15), xlim = (80, 90), ylim = (85, 90),\n           title = 'Current Rating vs Potential Rating by Club: 3-5-2', ax = ax)\n\ndef label_point(x, y, val, ax):\n    a = pd.concat({'x': x, 'y': y, 'val': val}, axis=1)\n    for i, point in a.iterrows():\n        ax.text(point['x'], point['y'], str(point['val']))\n\nOP_df['Club_label'] = OP_df.index\n        \nOP_df_sub = OP_df[(OP_df['Potential']>=85) & (OP_df['Value of highest Potential squad']<=350)]\n\nlabel_point(OP_df_sub['Overall'], OP_df_sub['Potential'], OP_df_sub['Club_label'], ax)","52c279ce":"squad_352_adj = ['GK', 'B$', 'B$', 'B$', 'M$|W$|T$', 'M$|W$|T$', 'M$|W$|T$', 'M$|W$|T$', 'M$|W$|T$', 'W$|T$|M$', 'W$|T$|M$']\n\nrating_352_TH_Overall, best_list_352_TH_Overall, value_352_TH_Overall = get_best_squads(squad_352_adj, \n                                                                                        'Tottenham Hotspur',\n                                                                                        'Overall')\nrating_352_TH_Potential, best_list_352_TH_Potential, value_352_TH_Potential  = get_best_squads(squad_352_adj,\n                                                                                               'Tottenham Hotspur',\n                                                                                               'Potential')\nprint('Tottenham Hotspur')\nprint('-Overall-')\nprint('Average rating: {:.1f}'.format(rating_352_TH_Overall))\nprint('Total Value (M): {:.1f}'.format(value_352_TH_Overall))\nprint(best_list_352_TH_Overall)\n\nprint('-Potential-')\nprint('Average rating: {:.1f}'.format(rating_352_TH_Potential))\nprint('Total Value (M): {:.1f}'.format(value_352_TH_Potential))\nprint(best_list_352_TH_Potential)\n","e4dece5d":"# group the data by football club\ndata_group_by_club = df.groupby('Club')\n# find the mean of each attribute and select the Overall column\nclubs_average_overall = data_group_by_club.mean()['Overall']\n# sort the average overall in descending order and slice the top 5\ntop_clubs_top_5 = clubs_average_overall.sort_values(ascending = False)[:5]\n# filter the big dataframe to include only players from top clubs\nfifa18_top_5 = df.loc[df['Club'].isin(top_clubs_top_5.index)]\n# create seaborn FacetGrid object, it will contain cell per club\ng = sns.FacetGrid(fifa18_top_5, col='Club')\n# In each column plot the age distrubtion of a club\ng.map(sns.distplot, \"Age\")\nplt.show()","380629c0":"g = sns.FacetGrid(fifa18_top_5, col='Club')\ng.map(sns.boxplot, \"Age\", order='')\nplt.show()","bed4c58d":"Ori_df = pd.read_csv('..\/input\/fifa19\/data.csv')\n","c7378952":"Ori_df.columns","8e6d853b":"columns_needed_rearranged = ['Aggression','Crossing', 'Curve', 'Dribbling', 'Finishing',\n       'FKAccuracy', 'HeadingAccuracy', 'LongShots','Penalties', 'ShotPower', 'Volleys', \n       'ShortPassing', 'LongPassing',\n       'Interceptions', 'Marking', 'SlidingTackle', 'StandingTackle',\n       'Strength', 'Vision', 'Acceleration', 'Agility', \n       'Reactions', 'Stamina', 'Balance', 'BallControl','Composure','Jumping', \n       'SprintSpeed', 'Positioning','Position']","86045ee9":"df_new = Ori_df[columns_needed_rearranged]\ndf_new.fillna('',inplace = True)\ndf_new.info()\n","2ca19b5f":"df_new['Position'] = df_new['Position'].str.strip()\ndf_new = df_new[df_new['Position'] != 'GK']\ndf_new.head()\n","1a36f2b1":"df_new.isnull().values.any()","706ad311":"df_new","1babbd21":"fig, ax = plt.subplots()\ndf_new_ST = df_new[df_new['Position'] == 'ST'].iloc[::200,:-1]\ndf_new_ST.T.plot.line(color = 'black', figsize = (15,10), legend = False, ylim = (0, 110), title = \"ST's attributes distribution\", ax=ax)\n\nax.set_xlabel('Attributes')\nax.set_ylabel('Rating')\n\nfor ln in ax.lines:\n    ln.set_linewidth(1)\n\nax.axvline(0, color='red', linestyle='--')   \nax.axvline(12.9, color='red', linestyle='--')\n\nax.axvline(13, color='blue', linestyle='--')\nax.axvline(17, color='blue', linestyle='--')\n\nax.axvline(17.1, color='green', linestyle='--')\nax.axvline(28, color='green', linestyle='--')\n\nax.text(5, 100, 'Attack Attributes', color = 'red', weight = 'bold')\nax.text(13.5, 100, 'Defend Attributes', color = 'blue', weight = 'bold')\nax.text(22, 100, 'Mixed Attributes', color = 'green', weight = 'bold')","a34bf4a5":"highly skilled players on average in top 5 clubs and distrubiton of ages","768efd6d":"player position predictor","375cf779":"Drop empty 'Unit' Column"}}