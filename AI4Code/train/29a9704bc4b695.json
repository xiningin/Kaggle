{"cell_type":{"4ac1bcaa":"code","4ea50439":"code","3f902f8b":"code","1b0dafd6":"code","479ad423":"code","17d790a1":"code","8334c2b0":"code","d6c69251":"code","355caa55":"code","a7a0ea62":"code","344611ba":"code","36627418":"code","e5af3247":"code","78fc31ac":"markdown","b9f25250":"markdown","671a2b49":"markdown","783e639a":"markdown","86150ab1":"markdown","7b59b032":"markdown","09218108":"markdown","cfcc873a":"markdown","71cc9988":"markdown","790efa96":"markdown","af4138eb":"markdown","71bc20c1":"markdown","309821a9":"markdown","a5df049c":"markdown","a0af05dc":"markdown"},"source":{"4ac1bcaa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom plotly.offline import init_notebook_mode, iplot, plot\nfrom plotly import tools\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go \nimport collections\nfrom wordcloud import WordCloud # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4ea50439":"year = pd.read_csv(\"\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/data_by_year.csv\")\n","3f902f8b":"# Prepare last five year list\nlast10_year = year.tail(10)\nlast10_year","1b0dafd6":"# Fixing indexes\nlast10_year = last10_year.reset_index()\ndel last10_year[\"index\"]\nlast10_year\n","479ad423":"f,ax = plt.subplots(figsize=(7,7))\nsns.heatmap(last10_year.corr(),annot = True,linewidths = 0.5,linecolor = \"white\",fmt = \".1f\",ax = ax)\nplt.show()","17d790a1":"plt.figure(figsize=(7,7))\nsns.barplot(x=last10_year[\"year\"],y=last10_year[\"popularity\"])\nplt.xticks(rotation = 45)\nplt.xlabel(\"Year\")\nplt.ylabel(\"Popularity\")\nplt.title(\"Last 10 Year Popularity\")\nplt.show()\n\n","8334c2b0":"trace1 = go.Bar(x = last10_year.year,\n               y = last10_year.danceability,\n               name = \"Danceability\",\n               marker = dict(color = \"rgba(255, 174, 255, 0.5)\",\n                            line = dict(color='rgb(0,0,0)',width=1.5)),\n               text = last10_year.popularity)\n\ntrace2 = go.Bar(x = last10_year.year,\n               y = last10_year.energy,\n               name = \"Energy\",\n               marker = dict(color = \"rgba(255, 255, 255, 0.5)\",\n                            line = dict(color='rgb(0,0,0)',width=1.5)),\n               text = last10_year.popularity)\n\ndata = [trace1,trace2]\nlayout  = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data,layout = layout)\niplot(fig)","d6c69251":"trace1 = go.Scatter(x = last10_year.year,\n                    y = last10_year.danceability,\n                    mode = \"lines\",\n                    name = \"Danceability\",\n                    marker = dict(color = \"rgba(255,255,0,0.8)\"),\n                    text  = last10_year.year\n                   )\n\ntrace2 = go.Scatter(x = last10_year.year,\n                    y = last10_year.acousticness,\n                    mode = \"lines+markers\",\n                    name = \"Acousticness\",\n                    marker = dict(color = \"rgba(255,128,192,0.8)\"),\n                    text = last10_year.year)\n\ndata = [trace1,trace2]\nlayout = dict(title = \"Danceability and Acousticness in Years\",\n              xaxis = dict(title = \"Year\",ticklen = 5, zeroline = False)) \n\nfig = dict(data = data,layout = layout)\niplot(fig)","355caa55":"trace1 = go.Scatter3d(x = last10_year.year,\n                      y = last10_year.energy,\n                      z = last10_year.duration_ms,\n                      mode = \"markers\",\n                      marker = dict(color = \"rgba(255,128,192,0.8)\",size = 10))\n                    \ndata = [trace1]\nlayout = go.Layout(margin = dict(l = 0, r = 0 ,b = 0,t = 0))\n\nfig = go.Figure(data = data,layout = layout)\niplot(fig)\n                      ","a7a0ea62":"y_instrumentalness = [each for each in last10_year.instrumentalness]\ny_tempo  = [float(each) for each in last10_year.tempo]\nx_year = [each for each in last10_year.year]\nx_net_year  = [each for each in last10_year.year]\ntrace0 = go.Bar(\n                x=y_instrumentalness,\n                y=x_year,\n                marker=dict(color='rgba(171, 50, 96, 0.6)',line=dict(color='rgba(156, 87, 36, 1.0)',width=1)),\n                name='Instrumentalness',\n                orientation='h',\n)\ntrace1 = go.Scatter(\n                x=y_tempo,\n                y=x_net_year,\n                mode='lines+markers',\n                line=dict(color='rgb(128, 128, 255)'),\n                name='Tempo',\n)\nlayout = dict(\n                title='Tempo and Instrumentalness',\n                yaxis=dict(showticklabels=True,domain=[0, 0.85]),\n                yaxis2=dict(showline=True,showticklabels=False,linecolor='rgba(102, 102, 102, 0.8)',linewidth=2,domain=[0, 0.85]),\n                xaxis=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0, 0.42]),\n                xaxis2=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0.47, 1],side='top',dtick=25),\n                legend=dict(x=0.029,y=1.038,font=dict(size=10) ),\n                margin=dict(l=200, r=20,t=70,b=70),\n                paper_bgcolor='rgb(240, 240, 255)',\n                plot_bgcolor='rgb(240, 240, 255)',\n)\nannotations = []\ny_s = np.round(y_instrumentalness, decimals=2)\ny_nw = np.rint(y_tempo)\n# Adding labels\nfor ydn, yd, xd in zip(y_nw, y_s, x_year):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x2', yref='y2', y=xd, x=ydn - 4,text='{:,}'.format(ydn),font=dict(family='Arial', size=12,color='rgb(63, 72, 204)'),showarrow=False))\n    # labeling the bar net worth\n    annotations.append(dict(xref='x1', yref='y1', y=xd, x=yd + 3,text=str(yd),font=dict(family='Arial', size=12,color='rgb(171, 50, 96)'),showarrow=False))\n\nlayout['annotations'] = annotations\n\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                          shared_yaxes=False, vertical_spacing=0.001)\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(layout)\niplot(fig)","344611ba":"year_pop = [float(each) for each in last10_year.popularity]\nspeech_color = [float(each) for each in last10_year.speechiness ]\ndata = [ {\n    \"y\" : last10_year.liveness,\n    \"x\" : last10_year.year,\n    \"mode\" : \"markers\",\n    \"marker\" : {\"color\" : speech_color,\n                \"size\" : year_pop,\n                \"showscale\" : True},\n    \"text\" : last10_year.year\n}]\niplot(data)","36627418":"trace = go.Scatter(x = last10_year.loudness,\n                   y = last10_year.energy,\n                   mode = \"markers\",\n                   name = \"2011\",\n                   marker = dict(color = \"rgba(213,12,312,0.8)\",size = 10),\n                   text = last10_year.year)\n\n\n\n\ndata = [trace]\nlayout = dict(title = \"Loudness-Energy Last 10 Year\",xaxis = dict(title = \"Loudness\",ticklen = 5,zeroline = False),yaxis = dict(title = \"Energy\",ticklen=5,zeroline = False))\nfig = dict(data = data , layout = layout)\niplot(fig)\n","e5af3247":"sns.lmplot(x = \"year\",y = \"key\",data = last10_year,)\nplt.show()","78fc31ac":"<a id = 3><\/a><br>\n\n## 3. Danceability-Energy\n\n* Danceability : The relative measurement of the track being danceable.\n* Energy : The energy of the track.","b9f25250":"Now , it seems much better \ud83d\ude03","671a2b49":"![](http:\/\/oyuncubur.com\/wp-content\/uploads\/2019\/02\/spotify-gif-oliver-keane.gif)\n\n\n\n# INTRODUCTION\n\nFounded on April 23, 2006, Spotify has become a great platform for listening to music or sharing their music with people and in this notebook, we will analyze data by considering last ten years.\n\n\n## CONTENT:\n<font color=\"green\">\n    \n* [Heatmap Method for Between Correlation Values](#1)\n    \n* [Last 10 Year Popularity](#2)\n    \n* [Danceability-Popularity](#3)\n\n* [Danceability-Acousticness](#4)\t\n    \n* [Energy-Duration MS](#5) \n\n* [Tempo-Instrumentalness](#6)\n    \n* [Liveness-Speechiness-Popularity](#7)\n    \n* [Loudness-Energy](#8)  \n    \n* [Last 10 Year Key](#9)     \n\n\n\n","783e639a":"Indexes are seems really bad , let's fix that.\n","86150ab1":"If you guys click the button on your right you have chance to see Danceability and Acousticness for alone in years \ud83d\udc4d","7b59b032":"<a id=7><\/a><br>\n## 7. Liveness-Speechiness-Popularity\n\n* Liveness : The relative duration of the track sounding as a live performance.\n\n* Speechiness : The relative length of the track containing any kind of human voice.","09218108":"<a id=6><\/a><br>\n## 6. Tempo-Instrumentalness\n\n* Tempo : Tempo is the speed at which a track is interpreted in music\n\n* Instrumentalness : The relative ratio of the track being instrumental","cfcc873a":"<a id=1><\/a><br>\n## 1. Heatmap Method for Between Correlation Values","71cc9988":"On this table we can see the all correlation situation basicly if it is close to 1, it is directly proportional. If it is close to -1, it is inversely proportional. Also if it is close 0 , it's mean they don't have any correlation between this two.","790efa96":"### GUYS IF YOU LIKE IT PLEASE UP YOUR VOTE ALSO YOUR COMMENTS ARE REALLY IMPORTANT FOR IMPROVE MYSELF... \n\n## THANK YOU\ud83d\ude0a","af4138eb":"<a id = 9><\/a><br>\n## 9. Last 10 Year Key \n\n* Key : All keys on octave encoded as values ranging from 0 to 11, starting on C as 0, C# as 1 and so on\u2026","71bc20c1":"<a id = 5><\/a><br>\n## 5. Energy-Duration MS \n\n* Energy : The energy of the track.\n\n* Duration MS : The length of the track in milliseconds (ms)","309821a9":"<a id=2><\/a><br>\n## 2. Last 10 Year Popularity ","a5df049c":"<a id = 4><\/a><br>\n## 4. Danceability-Acousticness\n\n* Danceability : The relative measurement of the track being danceable.\n\n* Acousticness : The relative metric of the track being acoustic.\n","a0af05dc":"<a id=8><\/a><br>\n## 8. Loudness-Energy\n\n* Loudness : Relative loudness of the track in the typical range [-60, 0] in decibel (dB)\n\n* Energy : The energy of the track."}}