{"cell_type":{"f27ae2ef":"code","f8e749e2":"code","e0dc5e43":"code","549c95a3":"code","d0cdcd9f":"code","aeda2386":"code","9c2307d8":"code","49c4a5f0":"code","54442b86":"code","f282144e":"code","15147bd0":"code","ddc7c1af":"code","bdabeeae":"markdown","9f216979":"markdown","0471e02f":"markdown"},"source":{"f27ae2ef":"from  datetime import datetime, timedelta\nimport numpy as np, pandas as pd\nimport lightgbm as lgb\nfrom sklearn import preprocessing\nimport os, sys, gc, time, warnings, pickle, psutil, random\nfrom multiprocessing import Pool\nimport matplotlib.pyplot as plt\n\nwarnings.filterwarnings('ignore')\npd.options.display.max_columns = 100\npd.options.display.max_rows = 300\n\nval_start=1942\nval_end=1969\nTARGET='sale'\npredict_len=1941-100","f8e749e2":"def dtypes_opt(df):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    obj_type=['object']\n    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        \n        if col=='id':\n            df[col]=df[col].astype('object')\n\n        elif col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                       df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        elif col_type in obj_type:\n            df[col] = df[col].astype('category')\n    return \ndef train_format(predict=False):\n    raw=pd.read_csv('sales_train_evaluation.csv')\n\n        \n    for i in range(val_start,val_end+1):\n        col_name='d_'+str(i)\n        raw[col_name]=np.nan\n        \n    df=pd.melt(raw,id_vars=['id','item_id','dept_id','cat_id','store_id','state_id']\n               ,value_vars=[ 'd_'+str(d) for d in range(1,val_end+1)],\n               var_name='d', \n               value_name='sale')\n    df.d=df.d.apply(lambda x: x.split('_')[1]).astype(np.int16)\n    \n    if predict:\n        df=df[df['d']>=predict_len]\n    \n    for col in list(df):\n        if col!='id' and df[col].dtypes=='object':\n            le = preprocessing.LabelEncoder()\n            le.fit(raw[col])\n            df[col]=le.transform(df[col])\n\n    dtypes_opt(df)                            \n    return df \n\ndef calendar_fe() :\n    calendar=pd.read_csv('calendar.csv')\n    calendar.d=calendar.d.apply(lambda x: x.split('_')[1]).astype('int16')\n    \n    calendar['date']=pd.to_datetime(calendar.date)\n    calendar['y']=pd.to_datetime(calendar.date).dt.year\n    calendar['qua']=pd.to_datetime(calendar.date).dt.quarter\n    calendar['mon']=pd.to_datetime(calendar.date).dt.month\n    calendar['wy']=pd.to_datetime(calendar.date).dt.weekofyear\n    calendar['dw']=pd.to_datetime(calendar.date).dt.dayofweek\n    calendar['dm']=pd.to_datetime(calendar.date).dt.day\n    calendar['weekend']=calendar.dw.apply(lambda x: 1 if x>=5 else 0 ).astype('int8')   \n    \n    # print('calendar:') \n    del calendar['month'],calendar['wday'],calendar['year'],calendar['weekday'],calendar['date']\n    dtypes_opt(calendar)\n    \n    \n    for col in list(calendar):\n        if calendar[col].dtype.name=='category':\n            calendar[col] = calendar[col].cat.codes.astype('int')\n    dtypes_opt(calendar)\n    return calendar\n\n\n\n\ndef price_fe():\n    price=pd.read_csv('sell_prices.csv')\n    price['id']=price['item_id']+'_'+price['store_id']+'_evaluation'\n\n    # Price encode\n    price['price_max']=price.groupby(['id'])['sell_price'].transform('max')\n    price['price_min']=price.groupby(['id'])['sell_price'].transform('min')\n    price['price_enc_1']=price['sell_price']\/price['price_max']\n    price['price_enc_2']=price['sell_price']\/price['price_min']\n    \n    del price['price_max'],price['price_min'],price['store_id'],price['item_id']\n    \n    dtypes_opt(price)\n    return price\n\ndef sale_fe(df,predict=False):\n    sale_fe=df[['id','d','sale']]\n    shift_days=[7,28]\n    windows=[7,28]\n    \n    sale_fe['shift_1_sale_fe']=sale_fe[['id','d','sale']].groupby(['id'])['sale'].transform(lambda x: x.shift(1)).astype('float16')\n    sale_fe['1rmean_7days_fe']=sale_fe[['id','d','sale']].groupby(['id'])['sale'].transform(lambda x: x.shift(1).rolling(7).mean()).astype('float16')\n#     sale_fe['1rmax_7days_fe']=sale_fe[['id','d','sale']].groupby(['id'])['sale'].transform(lambda x: x.shift(1).rolling(7).max()).astype('float16')\n#     sale_fe['1rmin_7days_fe']=sale_fe[['id','d','sale']].groupby(['id'])['sale'].transform(lambda x: x.shift(1).rolling(7).min()).astype('float16')\n#     sale_fe['1rstd_7days_fe']=sale_fe[['id','d','sale']].groupby(['id'])['sale'].transform(lambda x: x.shift(1).rolling(7).std()).astype('float16')\n    \n    for day in shift_days:\n        start_time=time.time()\n        print('Shift Day:',day)\n        col_name='shift_'+str(day)+'_sale'+'_fe'\n        sale_fe[col_name]=sale_fe[['id','d','sale']].groupby(['id'])['sale'].transform(lambda x: x.shift(day)).astype('float16')\n        for window in windows:\n            print('Window',window)\n            sale_fe[str(day)+'rmean_'+str(window)+'days'+'_fe']=sale_fe[['id','d','sale']].groupby(['id'])['sale'].transform(lambda x: x.shift(day).rolling(window).mean()).astype('float16')\n            sale_fe[str(day)+'rmax_'+str(window)+'days'+'_fe']=sale_fe[['id','d','sale']].groupby(['id'])['sale'].transform(lambda x: x.shift(day).rolling(window).max()).astype('float16')\n            sale_fe[str(day)+'rmin_'+str(window)+'days'+'_fe']=sale_fe[['id','d','sale']].groupby(['id'])['sale'].transform(lambda x: x.shift(day).rolling(window).min()).astype('float16')\n            sale_fe[str(day)+'rstd_'+str(window)+'days'+'_fe']=sale_fe[['id','d','sale']].groupby(['id'])['sale'].transform(lambda x: x.shift(day).rolling(window).std()).astype('float16')            \n        print('Time:',time.time()-start_time)\n    if not predict:\n        sale_fe.dropna(inplace=True,subset=[col for col in sale_fe.columns if '_fe' in col])\n    dtypes_opt(sale_fe)\n    return sale_fe\n","e0dc5e43":"df=train_format()\ncalendar=calendar_fe() \ndf=df.merge(calendar,on='d',copy=False)\n\ndummy_state=pd.get_dummies(df.state_id).rename(columns={0:'CA',1:'TX',2:'WI'})\ndf=pd.concat([df,dummy_state],axis=1)\ndf['snap']=df['snap_CA']*df['CA']+df['snap_TX']*df['TX']+df['snap_WI']*df['WI']\nremove_feat=['snap_CA','snap_TX','snap_WI','CA','TX','WI']\nfor feat in remove_feat: \n    del df[feat]\ndtypes_opt(df)    \ndel dummy_state,calendar;gc.collect() \n\nprice=price_fe()\ndf=df.merge(price,on=['id','wm_yr_wk'],copy=False)\ndel df['wm_yr_wk'],price;gc.collect()\n\nsale=sale_fe(df)\nsale.to_pickle('sale.pkl')\n\ndf=df.drop('sale',axis=1).merge(sale,on=['id','d'])\ndel sale;gc.collect()","549c95a3":"train=df.query(\"d<{}\".format(val_start))\n# training after 50 days\ntrain_shift=50\ntrain['flag']=train[['id','d','sale']].groupby(['id'])['sale'].transform(lambda x: x.shift(train_shift)).astype('float16')\ntrain.dropna(subset=['flag'],inplace=True)\ndel train['flag']\n\nremove_col=['id','d','sale']\ntrain_col=[col for col in list(train) if col not in remove_col]\nX=train[train_col]\nY=train[TARGET]\n\n","d0cdcd9f":"np.random.seed(42)\nval_index = np.random.choice(X.index.values, int(X.shape[0]\/20), replace = False)\ntrain_index = np.setdiff1d(X.index.values, val_index)\ncat_feats=['item_id', 'dept_id', 'cat_id', 'store_id', 'state_id', \n           'event_name_1','event_type_1', 'event_name_2', 'event_type_2','snap',\n           'y', 'qua', 'mon', 'wy', 'dw', 'dm', 'weekend']\n           \nX_train = lgb.Dataset(X.loc[train_index] , label = Y.loc[train_index], \n                      categorical_feature=cat_feats, free_raw_data=False)\nX_val = lgb.Dataset(X.loc[val_index], label = Y.loc[val_index],\n                    categorical_feature=cat_feats,free_raw_data=False)\n\ndel  X, Y ; gc.collect()","aeda2386":"params = {\n            'boosting_type': 'gbdt',\n            'objective': 'tweedie',\n            'tweedie_variance_power': 1.1,\n            'metric': 'rmse',\n            'subsample': 0.5,\n            'subsample_freq': 1,\n            'learning_rate': 0.03,\n            'num_leaves': 2**11-1,\n            'min_data_in_leaf': 2**12-1,\n            'feature_fraction': 0.5,\n            'max_bin': 100,\n            'n_estimators': 1500,\n            'boost_from_average': False,\n            'verbose': 20,\n            'early_stopping_round':50\n            } \nm_lgb = lgb.train(params, X_train, valid_sets = [X_train,X_val], verbose_eval=20) \nm_lgb.save_model(\"final_model.lgb\")","9c2307d8":"pred=train_format(predict=True)\ncalendar=calendar_fe() \n\npred=pred.merge(calendar,on='d',copy=False)\n\ndummy_state=pd.get_dummies(pred.state_id).rename(columns={0:'CA',1:'TX',2:'WI'})\npred=pd.concat([pred,dummy_state],axis=1)\npred['snap']=pred['snap_CA']*pred['CA']+pred['snap_TX']*pred['TX']+pred['snap_WI']*pred['WI']\nremove_feat=['snap_CA','snap_TX','snap_WI','CA','TX','WI']\nfor feat in remove_feat: \n    del pred[feat]\ndtypes_opt(pred)    \ndel dummy_state,calendar;gc.collect() \n\nprice=price_fe()\npred=pred.merge(price,on=['id','wm_yr_wk'],copy=False)\ndel pred['wm_yr_wk'],price;gc.collect()\n\npred_sale=sale_fe(pred,predict=True)\npred=pred.drop('sale',axis=1).merge(pred_sale,on=['id','d'])","49c4a5f0":"def str_fun(x):\n    x=x[:-10]\n    x=x+'validation'\n    return x\nval=pred[(pred.d>=1914)&(pred.d<=1941)]\nval.id=val.id.apply(str_fun)","54442b86":"estimator = lgb.Booster(model_file='final_model.lgb')\nval['pred_sale']=estimator.predict(val.drop(['id','d','sale'],axis=1))\n\npred_val=val[['id','d','pred_sale']]\n","f282144e":"roll_fe=pd.read_pickle('roll_fe.pkl')\ntmp_pred=pred[pred.d>=1949]\ntmp_pred=tmp_pred.merge(roll_fe,on='id',how='left')\n\ntmp_pred['7rmax_7days_fe']=tmp_pred['tmp_7rmax_7days_fe']\ntmp_pred['7rmin_7days_fe']=tmp_pred['tmp_7rmin_7days_fe']\ntmp_pred['7rstd_7days_fe']=tmp_pred['tmp_7rstd_7days_fe']\ntmp_pred['7rmax_28days_fe']=tmp_pred['tmp_7rmax_28days_fe']\ntmp_pred['7rmin_28days_fe']=tmp_pred['tmp_7rmin_28days_fe']\ntmp_pred['7rstd_28days_fe']=tmp_pred['tmp_7rstd_28days_fe']\n\ntmp_pred=tmp_pred.drop(['tmp_7rmax_7days_fe','tmp_7rmin_7days_fe','tmp_7rstd_7days_fe','tmp_7rmax_28days_fe','tmp_7rmin_28days_fe','tmp_7rstd_28days_fe'],axis=1)","15147bd0":"pred=pd.concat([pred[pred.d<1949],tmp_pred])\npred=pred.sort_values(by=['id','d']).reset_index(drop=True)\npred[pred.id=='FOODS_3_825_WI_3_evaluation']","ddc7c1af":"all_preds = pd.DataFrame()\nday=7\nwindows=[7,28]\nTARGET='sale'\nmain_time = time.time()\n\nfor PREDICT_DAY in range(1,29):    \n    print('Predict | Day:', PREDICT_DAY)\n    start_time = time.time()\n\n    grid_df = pred.copy()\n    grid_df['shift_1_sale_fe']=grid_df[['id','d','sale']].groupby(['id'])['sale'].transform(lambda x: x.shift(1)).astype('float16')\n    grid_df['1rmean_7days_fe']=grid_df[['id','d','sale']].groupby(['id'])['sale'].transform(lambda x: x.shift(1).rolling(7).mean()).astype('float16')    \n    print('Shift:',day)\n    col_name='shift_'+str(day)+'_sale'+'_fe'\n    grid_df[col_name]=grid_df[['id','d','sale']].groupby(['id'])['sale'].transform(lambda x: x.shift(day)).astype('float16')\n    for window in windows:\n        print('Window:',window)        \n        grid_df[str(day)+'rmean_'+str(window)+'days'+'_fe']=grid_df[['id','d','sale']].groupby(['id'])['sale'].transform(lambda x: x.shift(day).rolling(window).mean()).astype('float16')\n  \n\n    print('Sale Feature Time:',time.time()-start_time)\n        \n\n        \n    estimator = lgb.Booster(model_file='final_model.lgb')\n    day_mask = pred['d']==(1941+PREDICT_DAY)\n\n    mask = day_mask\n    pred[TARGET][mask] = estimator.predict(grid_df[mask].drop(['id','d','sale'],axis=1))\n\n\n    temp_df = pred[day_mask][['id',TARGET]]\n    temp_df.columns = ['id','F'+str(PREDICT_DAY)]\n    if 'id' in list(all_preds):\n        all_preds = all_preds.merge(temp_df, on=['id'], how='left')\n    else:\n        all_preds = temp_df.copy()\n        \n    print('#'*10, ' %0.2f min round |' % ((time.time() - start_time) \/ 60),\n                  ' %0.2f min total |' % ((time.time() - main_time) \/ 60),\n                  ' %0.2f day sales |' % (temp_df['F'+str(PREDICT_DAY)].sum()))\n    del temp_df\n    \npred_eva = all_preds.reset_index(drop=True)","bdabeeae":"# Predict-Evaluation","9f216979":"# Predict-Validation","0471e02f":"# Train Model"}}