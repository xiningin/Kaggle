{"cell_type":{"c48acba3":"code","90ae9faa":"code","d37a435e":"code","355d599e":"code","18b26080":"code","0c3feb0b":"code","65e83d0e":"code","2015cad7":"code","1c56e179":"code","6cbfa54c":"code","eb43352f":"code","9112c4c3":"code","4eb253b2":"code","d6c0eed9":"code","34493298":"code","812250ea":"code","04337337":"code","1a931a85":"code","02c8e5f8":"code","f2e094f1":"code","00ae7485":"code","a0719f81":"code","d4641b95":"code","d9c793c8":"code","95f6797c":"code","e99fd8f9":"code","b6ac1e76":"code","a04ed571":"code","db68718a":"code","62c051e1":"code","69e9a489":"code","170a6f13":"code","9b5247ad":"code","c8a05fcd":"markdown","c1a2c555":"markdown","823b3a2f":"markdown","94df0196":"markdown","eb56fd76":"markdown","4dcdb768":"markdown","1576df5b":"markdown"},"source":{"c48acba3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport time\nimport math\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","90ae9faa":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","d37a435e":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","355d599e":"train.info()","18b26080":"test.info()","0c3feb0b":"all = pd.concat([train, test], sort = False)\nall.info()","65e83d0e":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","2015cad7":"all.info()","1c56e179":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","6cbfa54c":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","eb43352f":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","9112c4c3":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","4eb253b2":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","d6c0eed9":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","34493298":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","812250ea":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","04337337":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","1a931a85":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","02c8e5f8":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","f2e094f1":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","00ae7485":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","a0719f81":"from sklearn.linear_model import LogisticRegression","d4641b95":"logmodel = LogisticRegression(solver = 'liblinear')\nlogmodel.fit(X_train,y_train)","d9c793c8":"predictions = logmodel.predict(X_test)\npredictions","95f6797c":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","e99fd8f9":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,predictions)","b6ac1e76":"all_test.head()","a04ed571":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","db68718a":"TestForPred.info()","62c051e1":"t_pred = logmodel.predict(TestForPred).astype(int)","69e9a489":"PassengerId = all_test['PassengerId']","170a6f13":"logSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nlogSub.head()","9b5247ad":"logSub.to_csv(\"1_Logistics_Regression_Submission.csv\", index = False)","c8a05fcd":"****Train\/Test Split","c1a2c555":"****Final Predictions","823b3a2f":"****Check Accuracy","94df0196":"### ***Show Your support by Upvoting this Post*** \ud83d\udc4d \n\n### ***Follow me on Kaggle for getting more of such resources.***","eb56fd76":"****Build Logistic Model","4dcdb768":"****Confusion Matrix","1576df5b":"****Extra Features:"}}