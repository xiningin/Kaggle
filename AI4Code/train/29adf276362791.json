{"cell_type":{"a44ac65b":"code","c4cdb132":"code","266b337d":"code","2e4e8e49":"code","cddef0af":"code","0ceb84b3":"code","b2f9b33b":"code","d81969ae":"code","5a37e6fb":"markdown","22afff09":"markdown","5058f66f":"markdown","b94f5542":"markdown","782a7dbb":"markdown","0b585b44":"markdown","b3926653":"markdown"},"source":{"a44ac65b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfilepath = '..\/input\/mushroom-classification'\ndf = pd.read_csv(filepath + '\/mushrooms.csv');","c4cdb132":"df.head()","266b337d":"df.info()","2e4e8e49":"from sklearn.preprocessing import LabelEncoder\n\nfor col in df.columns: # Consider each column (except 'y' column, we deal with that separately)\n    \n    # Generate labels for each value in column\n    le = LabelEncoder();\n    le.fit(df[col].unique());\n    \n    # Print labels\n    print('\\n' + col + ':');\n    for val in df[col].unique():\n        print(val, int(le.transform([val])));\n        \n    # Transform data    \n    df[col] = le.transform(df[col]);\n    \nprint('\\n Sample of transformed data-frame:');\n\ndf.head()","cddef0af":"# randomly shuffle the data\ndf = df.sample(frac=1, random_state = 20);\n\n# Divide the samples for training and testing\nX_train = df.drop(['class'], axis = 1)[0:6499]; \ny_train = df['class'][0:6499];\nX_test = df.drop(['class'], axis = 1)[6500:8123];\ny_test = df['class'][6500:8123];","0ceb84b3":"from sklearn.neural_network import MLPClassifier\n\n# train model\nnn = MLPClassifier().fit(X_train, y_train);\n\n# evaluate model\nprint(\"Accuracy on train-set:\", \"%.2f\" %(nn.score(X_train, y_train)*100), '%');\nprint(\"Accuracy on test-set:\", \"%.2f\" %(nn.score(X_test, y_test)*100), '%');","b2f9b33b":"from sklearn.svm import SVC\n\n# train model\nsvm = SVC(gamma = 'auto').fit(X_train, y_train);\n\n# evaluate model\nprint(\"Accuracy on train-set:\", \"%.2f\" %(svm.score(X_train, y_train)*100), '%');\nprint(\"Accuracy on test-set:\", \"%.2f\" %(svm.score(X_test, y_test)*100), '%')","d81969ae":"from sklearn import tree\n\n# train model\ndt = tree.DecisionTreeClassifier().fit(X_train, y_train);\n\n# evaluate model\nprint(\"Accuracy on train-set:\", \"%.2f\" %(dt.score(X_train, y_train)*100), '%');\nprint(\"Accuracy on test-set:\", \"%.2f\" %(dt.score(X_test, y_test)*100), '%');","5a37e6fb":"## Converting categorical data to numerical","22afff09":"# Pre-processing","5058f66f":"## Modeling - using SVMs","b94f5542":"# Machine learning","782a7dbb":"## Modeling - using Decision trees","0b585b44":"# Data evaluation","b3926653":"## Modeling - using neural networks"}}