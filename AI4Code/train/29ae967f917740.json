{"cell_type":{"d15694e2":"code","7c31f3d5":"code","4d328e96":"code","1d6b6f9c":"code","5fb18b9c":"code","c1045e2f":"code","dc74a3bd":"code","a78e06d4":"code","4a25220c":"markdown","ba2c9a69":"markdown","bc5dc098":"markdown"},"source":{"d15694e2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pylab as plt\nimport plotly\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom sklearn.linear_model import LinearRegression\nimport datetime\nimport colorlover as cl\nplt.style.use('ggplot')\ncolor_pal = [x['color'] for x in plt.rcParams['axes.prop_cycle']]\n\n# Format the data\ndf = pd.read_csv('..\/input\/nflbigdatabowl2020lb\/nfl-big-data-bowl-2020-publicleaderboard_11_16_2019.csv')\ndf['SubmissionDate'] = pd.to_datetime(df['SubmissionDate'])\ndf = df.set_index(['TeamName','SubmissionDate'])['Score'].unstack(-1).T\ndf.columns = [name for name in df.columns]\n\nFIFTEENTH_SCORE = df.min().sort_values(ascending=True)[15]\nFIFTYTH_SCORE = df.min().sort_values(ascending=True)[50]\nTOP_SCORE = df.min().sort_values(ascending=True)[0]","7c31f3d5":"# Interative Plotly\nmypal = cl.scales['9']['div']['Spectral']\ncolors = cl.interp( mypal, 15 )\nannotations = []\ninit_notebook_mode(connected=True)\nTOP_TEAMS = df.min().loc[df.min() < FIFTEENTH_SCORE].index.values\ndf_filtered = df[TOP_TEAMS].ffill()\ndf_filtered = df_filtered.iloc[df_filtered.index >= '10-01-2019']\nteam_ordered = df_filtered.min(axis=0) \\\n    .sort_values(ascending=True).index.tolist()\n\ndata = []\ni = 0\nfor col in df_filtered[team_ordered].columns:\n    data.append(go.Scatter(\n                        x = df_filtered.index,\n                        y = df_filtered[col],\n                        name=col,\n                        line=dict(color=colors[i], width=2),)\n               )\n    i += 1\n\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='NFL Big Data Bowl Leaderboard',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n\nlayout = go.Layout(yaxis=dict(range=[TOP_SCORE-0.0001, 0.015]),\n                   hovermode='x',\n                   plot_bgcolor='white',\n                  annotations=annotations,\n                  )\nfig = go.Figure(data=data, layout=layout)\nfig.update_layout(\n    legend=go.layout.Legend(\n        traceorder=\"normal\",\n        font=dict(\n            family=\"sans-serif\",\n            size=12,\n            color=\"black\"\n        ),\n        bgcolor=\"LightSteelBlue\",\n        bordercolor=\"Black\",\n        borderwidth=2,\n    )\n)\n\nfig.update_layout(legend_orientation=\"h\")\nfig.update_layout(template=\"plotly_white\")\n#fig.update_yaxes(showgrid=True, gridwidth=0.5, gridcolor='LightGrey')\nfig.update_xaxes(showgrid=False)\n\niplot(fig)","4d328e96":"# Scores of top teams over time\nplt.rcParams[\"font.size\"] = \"12\"\nALL_TEAMS = df.columns.values\ndf_ffill = df[ALL_TEAMS].ffill()\n\n# This is broken\ndf_ffill.plot(figsize=(20, 10),\n                           color=color_pal[0],\n                           legend=False,\n                           alpha=0.05,\n                           ylim=(TOP_SCORE-0.0001, 0.02),\n                           title='All Teams Public LB Scores over Time')\n\ndf.ffill().min(axis=1).plot(color=color_pal[1], label='1st Place Public LB', legend=True)\nplt.show()","1d6b6f9c":"plt.rcParams[\"font.size\"] = \"13\"\nax = df.ffill() \\\n    .count(axis=1) \\\n    .plot(figsize=(20, 8),\n          title='Number of Teams in the Competition by Date',\n          color=color_pal[5], lw=5)\nax.set_ylabel('Number of Teams')\n#ax.set_ylim('2019-10-01','2019-11-30')\nplt.axvline('11-20-2019', color='orange', linestyle='-.')\n#plt.text('11-20-2019', 0.1,'Merger Deadline',rotation=-90)\nplt.axvline('11-27-2019', color='orange', linestyle='-.')\n#plt.text('11-27-2019', 40,'Deadline',rotation=-90)\nplt.show()","5fb18b9c":"plt.style.use('ggplot')\nplt.rcParams[\"font.size\"] = \"25\"\nteam_over_time = df.ffill() \\\n    .count(axis=1)\n\nlr = LinearRegression()\n_ = lr.fit(np.array(pd.to_numeric(team_over_time.index).tolist()).reshape(-1, 1),\n           team_over_time.values)\n\nteamcount_df = pd.DataFrame(team_over_time)\n\nteamcount_pred_df = pd.DataFrame(index=pd.date_range('10-09-2019','11-30-2019'))\nteamcount_pred_df['Forecast Using All Data'] = lr.predict(np.array(pd.to_numeric(teamcount_pred_df.index).tolist()).reshape(-1, 1))\n\nlr = LinearRegression()\n_ = lr.fit(np.array(pd.to_numeric(team_over_time[-100:].index).tolist()).reshape(-1, 1),\n           team_over_time[-100:].values)\n\nteamcount_pred_df['Forecast Using Recent Data'] = lr.predict(np.array(pd.to_numeric(teamcount_pred_df.index).tolist()).reshape(-1, 1))\n\nplt.rcParams[\"font.size\"] = \"12\"\nax =df.ffill() \\\n    .count(axis=1) \\\n    .plot(figsize=(20, 8),\n          title='Forecasting the Final Number of Teams',\n         color=color_pal[5], lw=5,\n         xlim=('10-01-2019','11-30-2019'))\nteamcount_pred_df['Forecast Using All Data'].plot(ax=ax, style='.-.', alpha=0.5, label='Regression Using All Data')\nteamcount_pred_df['Forecast Using Recent Data'].plot(ax=ax, style='.-.', alpha=0.5, label='Regression Using last 1000 observations')\nax.set_ylabel('Number of Teams')\nteamcount_pred_df.plot(ax=ax, style='.-.', alpha=0.5)\nplt.axvline('11-20-2019', color='orange', linestyle='-.')\nplt.text('11-20-2019', 900,'Merger Deadline',rotation=-90)\nplt.axvline('11-27-2019', color='orange', linestyle='-.')\nplt.text('11-27-2019', 500,'Deadline',rotation=-90)\nplt.show()","c1045e2f":"plt.rcParams[\"font.size\"] = \"12\"\n# Create Top Teams List\nTOP_TEAMS = df.min().loc[df.min() < FIFTYTH_SCORE].index.values\ndf[TOP_TEAMS].min().sort_values(ascending=False).plot(kind='barh',\n                                       xlim=(TOP_SCORE-0.0005, 0.014),\n                                       title='Top 50 Public LB Teams',\n                                       figsize=(12, 15),\n                                       color=color_pal[3])\nplt.show()","dc74a3bd":"plt.rcParams[\"font.size\"] = \"12\"\ndf[TOP_TEAMS].nunique().sort_values().plot(kind='barh',\n                                           figsize=(12, 15),\n                                           color=color_pal[1],\n                                           title='Count of Submissions improving LB score by Team')\nplt.show()","a78e06d4":"plt.rcParams[\"font.size\"] = \"7\"\nn_weeks = (datetime.date.today() - datetime.date(2019, 10, 10)).days #\/ 7 # Num days of the comp\nn_weeks = int(n_weeks)\nfig, axes = plt.subplots(n_weeks, 1, figsize=(15, 25), sharex=True)\n#plt.subplots_adjust(top=8, bottom=2)\nfor x in range(n_weeks):\n    date2 = df.loc[df.index.date == datetime.date(2019, 10, 10) + datetime.timedelta(x+1)].index.min()\n    num_teams = len(df.ffill().loc[date2].dropna())\n    max_cutoff = df.ffill().loc[date2] < 0.019\n    df.ffill().loc[date2].loc[max_cutoff].plot(kind='hist',\n                               bins=50,\n                               ax=axes[x],\n                               title='{} ({} Teams)'.format(date2.date().isoformat(),\n                                                            num_teams),\n                                              xlim=(0.012, 0.019))\n    y_axis = axes[x].yaxis\n    y_axis.set_label_text('')\n    y_axis.label.set_visible(False)","4a25220c":"## Teams By Date","ba2c9a69":"# Top Leaderboard Scores","bc5dc098":"# Tracking the Public Leaderboard for the NFL Competition"}}