{"cell_type":{"16725ce6":"code","d3e784e3":"code","385c6ca4":"code","2fd50b6c":"code","cbdc4178":"code","675e5649":"code","4eb70e91":"code","4471faaa":"code","c764c360":"code","8d0f6780":"code","04b4ff1d":"code","5d0ceb55":"code","81f3962a":"code","d0e11c38":"code","5ac5d190":"code","07152ede":"code","6ad4f4dd":"code","f976a84d":"code","587d3ea2":"code","6784e98d":"code","e2693bd8":"code","0b41ad0a":"code","a588a72d":"code","f5d9b83e":"code","154edfd4":"code","1584d56d":"code","510d1c16":"code","0fb5b654":"code","0b24751b":"code","0a360fd1":"code","161eb80d":"code","36cbdb8c":"code","505acec9":"code","7b65e768":"markdown","a877447a":"markdown"},"source":{"16725ce6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d3e784e3":"#load image\ndata='\/kaggle\/input\/animal-image-datasetdog-cat-and-panda\/animals\/'","385c6ca4":"import os\nfrom os import listdir","2fd50b6c":"listdir(\"\/kaggle\/input\")","cbdc4178":"listdir(\"\/kaggle\/input\/animal-image-datasetdog-cat-and-panda\")","675e5649":"listdir(\"\/kaggle\/input\/animal-image-datasetdog-cat-and-panda\/animals\")","4eb70e91":"listdir(\"\/kaggle\/input\/animal-image-datasetdog-cat-and-panda\/animals\/animals\")","4471faaa":"listdir(\"\/kaggle\/input\/animal-image-datasetdog-cat-and-panda\/animals\/animals\/cats\")","c764c360":"from keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array","8d0f6780":"x=[]\ny=[]\n\nk=\"\/kaggle\/input\/animal-image-datasetdog-cat-and-panda\/animals\/animals\/\"\nfor file1 in listdir(k):\n    file2=k+\"\/\"+file1\n    for file3 in listdir(file2):\n        file4=file2+\"\/\"+file3\n        image = load_img(file4,target_size=(108,108,3))\n        img_array = img_to_array(image)\n        x.append(img_array)\n        y.append(file1)","04b4ff1d":"len(x),len(y)","5d0ceb55":"import numpy as np","81f3962a":"x=np.array(x)\ny=np.array(y)","d0e11c38":"x.shape,y.shape","5ac5d190":"from sklearn.preprocessing import LabelEncoder\nk = LabelEncoder()\ny= k.fit_transform(y)","07152ede":"from keras.utils import to_categorical\ny=to_categorical(y)","6ad4f4dd":"x=x\/255\n","f976a84d":"y.shape","587d3ea2":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 1\/3, random_state = 0)","6784e98d":"from keras.applications.vgg16 import VGG16","e2693bd8":"model=VGG16(input_shape=(108,108,3),include_top=False)","0b41ad0a":"from keras import Model\nfrom keras.optimizers import SGD\nfrom keras.layers import Flatten, Dense","a588a72d":"def Animal_Image():\n    model=VGG16(input_shape=(108,108,3),include_top=False)\n    for layer in model.layers:\n        layer.trainable = False\n    flat1 = Flatten()(model.layers[-1].output)\n    class1 = Dense(128, activation=\"relu\", kernel_initializer=\"he_uniform\")(flat1)\n    class2 = Dense(62, activation=\"relu\", kernel_initializer=\"he_uniform\")(class1)\n    output = Dense(3, activation=\"softmax\")(class1)\n    model1 = Model(inputs=model.inputs, outputs=output)\n    opt = SGD(lr=0.01, momentum=0.9)\n    model1.compile(optimizer=opt,loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n    return model1","f5d9b83e":"obj=Animal_Image()","154edfd4":"objective=obj.fit(x_train,y_train,batch_size=32, validation_data=(x_test,y_test),epochs=12,verbose=1)","1584d56d":"_, acc =obj.evaluate(x_test,y_test, verbose=0)","510d1c16":"acc","0fb5b654":"from keras.applications.resnet50 import ResNet50\nfrom keras.optimizers import Adam\nfrom keras.layers import Dropout","0b24751b":"# define cnn model\ndef define_model():\n    \n    model = ResNet50(include_top=False, input_shape=(108, 108, 3))\n\n    for layer in model.layers:\n        layer.trainable = False\n\n    flat1 = Flatten()(model.layers[-1].output)\n    class1 = Dense(128, activation=\"relu\", kernel_initializer=\"he_uniform\")(flat1)\n    class2 = Dense(62, activation=\"relu\", kernel_initializer=\"he_uniform\")(class1)\n    output = Dense(3, activation=\"softmax\")(class1)\n# define new model\n    model = Model(inputs=model.inputs, outputs=output)\n\n    opt = Adam(lr=0.001)\n    model.compile(optimizer=opt, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n    return model","0a360fd1":"k2=define_model()","161eb80d":"k=k2.fit(x_train,y_train,batch_size=32, validation_data=(x_test,y_test),epochs=12,verbose=1)","36cbdb8c":"_, acc =k2.evaluate(x_test, y_test, verbose=0)","505acec9":"acc","7b65e768":"Applying VGG16 convolutional neural network","a877447a":"Using ResNet Learning on this dataset"}}