{"cell_type":{"3337b4d4":"code","f5120a3c":"code","675eb551":"code","98c3fc01":"code","4dd4924a":"code","fe446fe5":"code","14fd0b5b":"code","bd5f0fc0":"code","9d0267a1":"code","1850c96b":"code","a1597eb0":"code","dfdf6026":"code","88339a87":"code","34d18ebf":"code","078595bb":"code","8c2f8535":"code","2bbd55f0":"code","2cb6cefa":"code","fe7bf918":"code","139eeae9":"code","79d73688":"code","fa250009":"code","ad239b13":"code","efb04a1b":"code","953e77ff":"code","c7577051":"code","02f06e09":"code","5c74dcca":"code","121dc07f":"code","6a994204":"code","77a4a63f":"code","da032c31":"code","ef89118b":"code","cf10f48e":"code","586352a7":"code","2e52e3d8":"code","a7616e15":"code","501f8330":"code","c1e916e8":"code","04ffa711":"code","1cf80923":"markdown","6d977f1c":"markdown","a11b3a03":"markdown"},"source":{"3337b4d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f5120a3c":"import gc\nimport os\nimport warnings\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\n\nfrom keras import backend as K\nwarnings.filterwarnings(action='ignore')\n\nK.image_data_format()","675eb551":"DATA_PATH = '..\/input'\nos.listdir(DATA_PATH)","98c3fc01":"TRAIN_IMG_PATH = os.path.join(DATA_PATH,'train')\nTEST_IMG_PATH = os.path.join(DATA_PATH,'test')\n\ndf_train = pd.read_csv(os.path.join(DATA_PATH, 'train.csv'))\ndf_test = pd.read_csv(os.path.join(DATA_PATH, 'test.csv'))\ndf_class=pd.read_csv(os.path.join(DATA_PATH, 'class.csv'))","4dd4924a":"df_train.shape, df_test.shape, df_class.shape","fe446fe5":"df_train.head()","14fd0b5b":"if set(list(df_train.img_file)) == set(os.listdir(TRAIN_IMG_PATH)):\n    print(\"ok\")\nelse : \n    print(\"is null\")","bd5f0fc0":"if set(list(df_test.img_file)) == set(os.listdir(TEST_IMG_PATH)):\n    print(\"ok\")\nelse : \n    print(\"is null\")","9d0267a1":"print(\"Number of Train Data : {}\".format(df_train.shape[0]))\nprint(\"Number of Test Data : {}\".format(df_test.shape[0]))","1850c96b":"df_class.head()","a1597eb0":"print(\"Number of Target : {}\".format(df_class.shape[0]))\nprint(\"Varierty of Train Data Target : {}\".format(df_train['class'].nunique()))","dfdf6026":"plt.figure(figsize=(12,6))\nsns.countplot(df_train['class'], order=df_train['class'].value_counts(ascending=True).index)","88339a87":"cntEachClass = df_train['class'].value_counts(ascending=False)\nprint(\"class of most count : {}\".format(cntEachClass.index[0]))\nprint(\"num of most count : {}\".format(cntEachClass[cntEachClass.index[0]]))","34d18ebf":"print(\"class of least count : {}\".format(cntEachClass.index[-1]))\nprint(\"num of least count : {}\".format(cntEachClass[cntEachClass.index[-1]]))","078595bb":"print(\"Mean : {}\".format(cntEachClass.mean()))","8c2f8535":"cntEachClass.describe()","2bbd55f0":"import PIL\nfrom PIL import ImageDraw\n\ntmp_imgs = df_train['img_file'][100:110]\nplt.figure(figsize=(12,20))\n\nfor num, f_name in enumerate(tmp_imgs):\n    img = PIL.Image.open(os.path.join(TRAIN_IMG_PATH, f_name))\n    plt.subplot(5,2, num+1)\n    plt.imshow(img)","2cb6cefa":"def draw_rect(drawcontext, pos, outline=None, width=0):\n    (x1, y1) = (pos[0], pos[1])\n    (x2, y2) = (pos[2], pos[3])\n    points = (x1,y1), (x2,y1), (x2,y2), (x1,y2), (x1,y1)\n    drawcontext.line(points, fill=outline, width=width)","fe7bf918":"def make_boxing_img(img_name):\n    if img_name.split('_')[0] == \"train\":\n        PATH = TRAIN_IMG_PATH\n        data = df_train\n    elif img_name.split('_')[0] == \"test\":\n        PATH = TEST_IMG_PATH\n        data = df_test\n    \n    img = PIL.Image.open(os.path.join(PATH, img_name))\n    pos = data.loc[data[\"img_file\"] == img_name, \\\n                  ['bbox_x1','bbox_y1','bbox_x2','bbox_y2']].values.reshape(-1)\n    draw = ImageDraw.Draw(img)\n    draw_rect(draw, pos, outline='red',width=10)\n    \n    return img","139eeae9":"f_name = \"train_00102.jpg\"\n\nplt.figure(figsize=(20,10))\nplt.subplot(1,2,1)\n\norigin_img = PIL.Image.open(os.path.join(TRAIN_IMG_PATH, f_name))\nplt.imshow(origin_img)\n\nplt.subplot(1,2,2)\nboxing = make_boxing_img(f_name)\nplt.imshow(boxing)\n\nplt.show()","79d73688":"from sklearn.model_selection import train_test_split\n\ndf_train['class'] = df_train['class'].astype('str')","fa250009":"df_train = df_train[['img_file','class']]\ndf_test = df_test[['img_file']]\n\nits = np.arange(df_train.shape[0])\ntrain_idx, val_idx = train_test_split(its, train_size = 0.8, random_state=42)\n\nX_train = df_train.iloc[train_idx, :]\nX_val = df_train.iloc[val_idx, :]\n\nprint(X_train.shape, X_val.shape, df_test.shape)","ad239b13":"from keras.applications.resnet50 import ResNet50, preprocess_input\nfrom keras.preprocessing.image import ImageDataGenerator\n\nimg_size = (224, 224)\nnb_train_samples = len(X_train)\nnb_validation_samples = len(X_val)\nnb_test_samples = len(df_test)\nepochs = 3\nbatch_size = 32\n\ntrain_datagen = ImageDataGenerator(\n    horizontal_flip = True,\n    vertical_flip = False,\n    zoom_range = 0.1,\n    preprocessing_function = preprocess_input)\n\nval_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\ntest_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    dataframe = X_train,\n    directory = '..\/input\/train',\n    x_col = 'img_file',\n    y_col = 'class',\n    target_size = img_size,\n    color_mode = 'rgb',\n    class_mode = 'categorical',\n    batch_size=batch_size,\n    seed = 42\n)\n\nvalidation_generator = val_datagen.flow_from_dataframe(\n    dataframe = X_val,\n    directory = '..\/input\/train',\n    x_col = 'img_file',\n    y_col = 'class',\n    target_size = img_size,\n    color_mode = 'rgb',\n    class_mode = 'categorical',\n    batch_size=batch_size,\n    shuffle=False\n)\n\ntest_generator = test_datagen.flow_from_dataframe(\n    dataframe = df_test,\n    directory = '..\/input\/test',\n    x_col = 'img_file',\n    y_col = None,\n    target_size = img_size,\n    color_mode = 'rgb',\n    class_mode = None,\n    batch_size=batch_size,\n    shuffle=False\n)","efb04a1b":"#resNet_model = ResNet50(include_top=False, input_shape = (224,224,3))","953e77ff":"#resNet_model.summary()","c7577051":"\"\"\"\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, Flatten, Activation, Conv2D, GlobalAveragePooling2D\n\nmodel = Sequential()\nmodel.add(resNet_model)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Dense(196, activation='softmax', kernel_initializer='he_normal'))\nmodel.summary()\n\"\"\"","02f06e09":"from keras import layers\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, Flatten, Activation, Conv2D, GlobalAveragePooling2D\n\nmodel = Sequential()\nmodel.add(layers.Conv2D(64, (5,5), activation='relu', input_shape=(224, 224, 3)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.ZeroPadding2D(padding=1))\nmodel.add(layers.Conv2D(256, (3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.ZeroPadding2D(padding=1))\nmodel.add(layers.Conv2D(512, (3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.ZeroPadding2D(padding=1))\nmodel.add(layers.Conv2D(512, (3,3), activation='relu'))\nmodel.add(layers.GlobalAveragePooling2D())\nmodel.add(layers.Dense(196, activation='softmax', kernel_initializer='he_normal'))\nmodel.summary()","5c74dcca":"from sklearn.metrics import f1_score\n\ndef micro_f1(y_true, y_pred):\n    return f1_score(y_true, y_pred, average='micro')\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['acc'])","121dc07f":"def get_steps(num_samples, batch_size):\n    if (num_samples % batch_size)>0:\n        return (num_samples \/\/ batch_size) + 1\n    else :\n        return num_samples \/\/ batch_size","6a994204":"%%time\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\n\nfilepath = \"my_resnet_model_{val_acc:.2f}_{val_loss:.4f}.h5\"\n\nes = EarlyStopping(monitor='val_acc', min_delta=0, patience=3, verbose=1, mode='auto')\n\ncallbackList = [es]\n\nhistory = model.fit_generator(\n    train_generator,\n    steps_per_epoch = get_steps(nb_train_samples, batch_size),\n    epochs = epochs,\n    validation_data = validation_generator,\n    validation_steps = get_steps(nb_validation_samples, batch_size),\n    callbacks = callbackList\n)\ngc.collect()","77a4a63f":"plt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.show()","da032c31":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.show()","ef89118b":"%%time\ntest_generator.reset()\nprediction = model.predict_generator(\n    generator = test_generator,\n    steps = get_steps(nb_test_samples, batch_size),\n    verbose=1\n)","cf10f48e":"prediction","586352a7":"train_generator.class_indices","2e52e3d8":"predicted_class_indices = np.argmax(prediction, axis=1)","a7616e15":"labels = (train_generator.class_indices)","501f8330":"dict((v,k) for k,v in labels.items())","c1e916e8":"labels = dict((v,k) for k,v in labels.items())\npredictions = [labels[k] for k in predicted_class_indices]","04ffa711":"submission = pd.read_csv(os.path.join(DATA_PATH, 'sample_submission.csv'))\nsubmission['class'] = predictions\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission.head()","1cf80923":"---","6d977f1c":"# 20190721 \uc790\uccb4 CNN \ubaa8\ub378 \uc801\uc6a9\ud574\ubcf4\uae30","a11b3a03":"---"}}