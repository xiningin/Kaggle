{"cell_type":{"c08c3404":"code","1f68c381":"code","15db5a2c":"code","3a32de77":"code","7c574b10":"code","11b881f3":"code","27990545":"code","cbae3845":"code","b52baf72":"code","05c94620":"code","2e9f9881":"code","d6fcaf75":"code","10e776dc":"code","4d25ff99":"code","2e931b0d":"code","3efd7192":"code","c7a95df0":"code","de5eae52":"code","24c2ea3f":"code","455644eb":"code","6b6b708e":"code","5e3682bf":"code","1712ad8a":"code","c982158e":"code","be5711d9":"code","269efd62":"code","e71dd559":"code","de9f7251":"code","b7e76ee3":"code","3b15fe57":"code","602cc1bd":"markdown","2c1a48a5":"markdown","7af82c19":"markdown","07dc3b04":"markdown","716f0c44":"markdown","a99c8935":"markdown","157e6832":"markdown","793ea7de":"markdown","4ca5778e":"markdown","31a2e1c3":"markdown","618acf80":"markdown","5888fec5":"markdown","fe4c1189":"markdown","e1d0b9cd":"markdown","36a6a4f7":"markdown","1c563d24":"markdown","7ab3dd81":"markdown","88e59dde":"markdown","c0815e6c":"markdown","46e4af54":"markdown","c846e18a":"markdown","3eea2fba":"markdown","8c9dfa49":"markdown","ed054db6":"markdown","9b9d6c3c":"markdown","5b2d097d":"markdown","ecd73b5d":"markdown","fdda4fc4":"markdown","3334f3b2":"markdown","78404213":"markdown","73b98385":"markdown","0576ee7c":"markdown","14f89176":"markdown","c02a9b29":"markdown","58018aa8":"markdown","f29c629c":"markdown","92923031":"markdown","826622a2":"markdown","5a78224a":"markdown","2eed40aa":"markdown","3997258a":"markdown","b39ca48c":"markdown","30c66f6e":"markdown","a85a9f16":"markdown","895cba0e":"markdown","16cfb724":"markdown"},"source":{"c08c3404":"from csv import reader\n\nopened_file = open('..\/input\/android\/googleplaystore.csv')\nread_file = reader(opened_file)\nandroid = list(read_file)\nandroid_header = android[0]\nandroid = android[1:]\n\nopened_file = open('..\/input\/appleios\/AppleStore.csv')\nread_file = reader(opened_file)\nios = list(read_file)\nios_header = ios[0]\nios = ios[1:]","1f68c381":"def explore_data(dataset, start, end, rows_and_columns=False):\n    dataset_slice = dataset[start:end]    \n    for row in dataset_slice:\n        print(row)\n        print('\\n') \n\n    if rows_and_columns:\n        print('Number of rows:', len(dataset))\n        print('Number of columns:', len(dataset[0]))\n        \nprint(ios_header)\nprint('\\n')\nexplore_data(ios, 1, 5, True)\nprint('\\n')\nprint(android_header)\nprint('\\n')\nexplore_data(android, 1, 5, True)\n\n        ","15db5a2c":"print(android[10472])","3a32de77":"del android[10472]","7c574b10":"for app in android:\n    name = app[0]\n    if name == 'Instagram':\n        print(app)","11b881f3":"duplicate_apps = []\nunique_apps =[]\n\nfor app in android:\n    name = app[0]\n    if name in unique_apps:\n        duplicate_apps.append(name)\n    else:\n        unique_apps.append(name)\n        \nprint('Number of duplicate apps in Google Play data set:',len(duplicate_apps))","27990545":"reviews_max = {}\n\nfor app in android:\n    name = app[0]\n    n_reviews = float(app[3])\n    \n    if name in reviews_max and reviews_max[name] < n_reviews:\n        reviews_max[name] = n_reviews\n        \n    elif name not in reviews_max:\n        reviews_max[name] = n_reviews\n        \n\nprint(len(reviews_max))","cbae3845":"print('Expected length:', len(android) - 1181)\nprint('Actual length:', len(reviews_max))","b52baf72":"android_clean = []\nalready_added = []\n\nfor app in android:\n    name = app[0]\n    n_reviews = float(app[3])\n    \n    if (reviews_max[name] == n_reviews) and (name not in already_added):\n        android_clean.append(app)\n        already_added.append(name)","05c94620":"explore_data(android_clean, 0, 3, True)","2e9f9881":"print(ios[813][1])\nprint(ios[6731][1])\n\nprint(android_clean[4412][0])\nprint(android_clean[7940][0])","d6fcaf75":"def english(string): \n \n    for character in string:\n        if ord(character) > 127:\n            return False\n    \n    return True\n\nprint(english('Instagram'))\nprint(english('\u7231\u5947\u827aPPS -\u300a\u6b22\u4e50\u98822\u300b\u7535\u89c6\u5267\u70ed\u64ad'))","10e776dc":"print(english('Instachat \ud83d\ude1c'))\nprint(ord('\u2122'))\nprint(ord('\ud83d\ude1c'))","4d25ff99":"def english(string):\n    non_ascii = 0\n    \n    for character in string:\n        if ord(character) > 127:\n            non_ascii += 1\n    \n    if non_ascii > 3:\n        return False\n    else:\n        return True\n\nprint(english('Docs To Go\u2122 Free Office Suite'))\nprint(english('Instachat \ud83d\ude1c'))","2e931b0d":"\nandroid_english = []\nios_english = []\n\nfor app in android_clean:\n    name = app[0]\n    if english(name):\n        android_english.append(app)\n        \nfor app in ios:\n    name = app[1]\n    if english(name):\n        ios_english.append(app)\n        \nexplore_data(android_english, 0, 3, True)\nprint('\\n')\nexplore_data(ios_english, 0, 3, True)","3efd7192":"android_final = []\nios_final = []\n\nfor app in android_english:\n    price = app[7]\n    if price == '0':\n        android_final.append(app)\n\nfor app in ios_english:\n    price = app[4]\n    if price == '0.0':\n        ios_final.append(app)\n\nexplore_data(android_final, 0, 3, True)\nprint('\\n')\nexplore_data(ios_final, 0, 3, True)","c7a95df0":"def freq_table(dataset, index):\n    table = {}\n    total = 0\n    \n    for row in dataset:\n        total += 1\n        value = row[index]\n        if value in table:\n            table[value] += 1\n        else:\n            table[value] = 1\n    \n    table_percentages = {}\n    for key in table:\n        percentage = (table[key] \/ total) * 100\n        table_percentages[key] = percentage \n    \n    return table_percentages\n\n\ndef display_table(dataset, index):\n    table = freq_table(dataset, index)\n    table_display = []\n    for key in table:\n        key_val_as_tuple = (table[key], key)\n        table_display.append(key_val_as_tuple)\n        \n    table_sorted = sorted(table_display, reverse = True)\n    for entry in table_sorted:\n        print(entry[1], ':', entry[0])\n\n","de5eae52":"display_table(ios_final, 11)","24c2ea3f":"display_table(android_final, 9)","455644eb":"display_table(android_final, 1)","6b6b708e":"genres_ios = freq_table(ios_final, -5)\n\nfor genre in genres_ios:\n    total = 0\n    len_genre = 0\n    for app in ios_final:\n        genre_app = app[-5]\n        if genre_app == genre:            \n            n_ratings = float(app[5])\n            total += n_ratings\n            len_genre += 1\n    avg_n_ratings = total \/ len_genre\n    print(genre, ':', avg_n_ratings)","5e3682bf":"for app in ios_final:\n    if app[-5] == 'Navigation':\n        print(app[1], ':', app[5]) # print name and number of ratings","1712ad8a":"for app in ios_final:\n    if app[-5] == 'Reference':\n        print(app[1], ':', app[5]) ","c982158e":"display_table(android_final, 5)","be5711d9":"categories_android = freq_table(android_final, 1)\n\nfor category in categories_android:\n    total = 0\n    len_category = 0\n    for app in android_final:\n        category_app = app[1]\n        if category_app == category:            \n            n_installs = app[5]\n            n_installs = n_installs.replace(',', '')\n            n_installs = n_installs.replace('+', '')\n            total += float(n_installs)\n            len_category += 1\n    avg_n_installs = total \/ len_category\n    print(category, ':', avg_n_installs)","269efd62":"for app in android_final:\n    if app[1] == 'COMMUNICATION' and (app[5] == '1,000,000,000+'\n                                      or app[5] == '500,000,000+'\n                                      or app[5] == '100,000,000+'):\n        print(app[0], ':', app[5])","e71dd559":"under_100_m = []\n\nfor app in android_final:\n    n_installs = app[5]\n    n_installs = n_installs.replace(',', '')\n    n_installs = n_installs.replace('+', '')\n    if (app[1] == 'COMMUNICATION') and (float(n_installs) < 100000000):\n        under_100_m.append(float(n_installs))\n        \nsum(under_100_m) \/ len(under_100_m)","de9f7251":"for app in android_final:\n    if app[1] == 'BOOKS_AND_REFERENCE':\n        print(app[0], ':', app[5])","b7e76ee3":"for app in android_final:\n    if app[1] == 'BOOKS_AND_REFERENCE' and (app[5] == '1,000,000,000+'\n                                            or app[5] == '500,000,000+'\n                                            or app[5] == '100,000,000+'):\n        print(app[0], ':', app[5])","3b15fe57":"for app in android_final:\n    if app[1] == 'BOOKS_AND_REFERENCE' and (app[5] == '1,000,000+'\n                                            or app[5] == '5,000,000+'\n                                            or app[5] == '10,000,000+'\n                                            or app[5] == '50,000,000+'):\n        print(app[0], ':', app[5])","602cc1bd":"run python","2c1a48a5":"\n### We'll build two functions we can use to analyze the frequency tables:\n\n- One function to generate frequency tables that show percentages.\n\n- Another function that we can use to display the percentages in a descending order","7af82c19":"### To fully address the issue and remove duplicates, we need to know the full scope of the issue. By using a for loop and creating a list to hold our duplicate apps, we can better identify and remove these duplicates.","07dc3b04":"## Most Common Apps by Genre: Part Two","716f0c44":"\n### One problem with this data is that is not precise. For instance, we don't know whether an app with 100,000+ installs has 100,000 installs, 200,000, or 350,000. However, we don't need very precise data for our purposes \u2014 we only want to get an idea which app genres attract the most users, and we don't need perfect precision with respect to the number of users.\n\n### We're going to leave the numbers as they are, which means that we'll consider that an app with 100,000+ installs has 100,000 installs, and an app with 1,000,000+ installs has 1,000,000 installs, and so on.\n\n### To perform computations, however, we'll need to convert each install number to float \u2014 this means that we need to remove the commas and the plus characters, otherwise the conversion will fail and raise an error. We'll do this directly in the loop below, where we also compute the average number of installs for each genre (category).","a99c8935":"### My goal in this project is to find mobile app profiles that are profitable for the App Store and Google Play markets. Through cleaning and analyzing android and ios app data, I will deliver data-driven insights that will hopefully inpsire developers understand what types of apps attract more users and therefore increase more ad revenue.","157e6832":"### In the last section, we found that there are 1,181 cases where an app occurs more than once, so the length of our dictionary (of unique apps) should be equal to the difference between the length of our data set and 1,181.","793ea7de":"### The function is still flawed, and very few non-English apps might get past our filter, but this seems good enough at this point in our analysis. Below I use the english() function to loop through the data set.","4ca5778e":"## Most Popular Apps by Genre on Google Play.","31a2e1c3":"# Most Common Apps by Genre: Part One","618acf80":"### This niche seems to be dominated by software for processing and reading ebooks, as well as various collections of libraries and dictionaries, so it's probably not a good idea to build similar apps since there'll be some significant competition.\n\n### We also notice there are quite a few apps built around the book Quran, which suggests that building an app around a popular book can be profitable. It seems that taking a popular book (perhaps a more recent book) and turning it into an app could be profitable for both the Google Play and the App Store markets.\n\n### However, it looks like the market is already full of libraries, so we need to add some special features besides the raw version of the book. This might include daily quotes from the book, an audio version of the book, quizzes on the book, a forum where people can discuss the book, etc.","5888fec5":"### If you explore the data sets enough, you'll notice the names of some of the apps suggest they are not directed toward an English-speaking audience. Below, we see a couple of examples from both data sets:","fe4c1189":"### If we review the Google Play data set closely, we will notice that it has a few duplicate rows. A good example are the duplicate Instagram rows below.","e1d0b9cd":"### On average, navigation apps have the highest number of user reviews, but this figure is heavily influenced by Waze and Google Maps, which have close to half a million user reviews together:\n","36a6a4f7":"### The difference between the Genres and the Category columns is not crystal clear, but one thing we can notice is that the Genres column is much more granular (it has more categories).\n\n### The most common genre in our Google Play app genres was Tools, with a frequency of 8.4%. Entertainment, Education and Business accounted for 6%, 5%, and 4% respectively. \n\n### The pattern for the Google Play data set differs from the Ios App Store market in that the most frequent Google Play apps were for more practical genres  (family, tools, business, lifestyle, productivity, etc.) than for entertainment. The sample overall was more balanced than the Ios data set. \n\n","1c563d24":"****As we mentioned in the introduction, our aim is to determine the kinds of apps that are likely to attract more users because our revenue is highly influenced by the number of people using our apps.\n\n### Let's begin the analysis by getting a sense of the most common genres for each market. For this, we'll build a frequency table for the prime_genre column of the App Store data set, and the Genres and Category columns of the Google Play data set.","7ab3dd81":"### We're not interested in keeping these kind of apps, so we'll remove them. One way to go about this is to remove each app whose name contains a symbol that is not commonly used in English text \u2014 English text usually includes letters from the English alphabet, numbers composed of digits from 0 to 9, punctuation marks (., !, ?, ;, etc.), and other symbols (+, *, \/, etc.).\n\n### All these characters that are specific to English texts are encoded using the ASCII standard. Each ASCII character has a corresponding number between 0 and 127 associated with it, and we can take advantage of that to build a function that checks an app name and tells us whether it contains non-ASCII characters.\n\n### I built this function below, and we use the built-in ord() function to find out the corresponding encoding number of each character.","88e59dde":"\n### We see the same pattern for the video players category, which is the runner-up with 24,727,872 installs. The market is dominated by apps like Youtube, Google Play Movies & TV, or MX Player. The pattern is repeated for social apps (where we have giants like Facebook, Instagram, Google+, etc.), photography apps (Google Photos and other popular photo editors), or productivity apps (Microsoft Word, Dropbox, Google Calendar, Evernote, etc.).\n\n### Again, the main concern is that these app genres might seem more popular than they really are. Moreover, these niches seem to be dominated by a few giants who are hard to compete against.\n\n### The game genre seems pretty popular, but previously we found out this part of the market seems a bit saturated, so we'd like to come up with a different app recommendation if possible.\n\n### The books and reference genre looks fairly popular as well, with an average number of installs of 8,767,811. It's interesting to explore this in more depth, since we found this genre has some potential to work well on the App Store, and our aim is to recommend an app genre that shows potential for being profitable on both the App Store and Google Play.\n\n### Let's take a look at some of the apps from this genre and their number of installs:","c0815e6c":"### We can easily identify Games as the most common genre with a frequency of 58%, this is far more than the frequency of the Entertainment genre which is the runner-up at nearly 8%. Furthermore, only 3.66% of the apps are designed for education, followed by social networking apps which amount for 3.29% of the apps in our data set.\n\n### The impression I get from the frequency of the Apple Store app genres listed above is that most apps are designed for entertainment than practical purposes.\n\n### However, the fact that entertainment apps are the most numerous doesn't also imply that they also have the greatest number of users \u2014 the demand might not be the same as the offer.\n\n### Let's continue by examining the Genres and Category columns of the Google Play data set.\n\n\n","46e4af54":"### Let's quickly explore this data set and confirm that is has 9,659 rows.","c846e18a":"## Removing Non-English Apps: Part Two","3eea2fba":"### The datasets I have are from September 2018, there were approximately 2 million iOS apps available on the App Store, and 2.1 million Android apps on Google Play at that time..\n\n### Collecting data for over four million apps requires a significant amount of time, so we'll try to analyze a sample of data instead. To avoid spending resources with collecting new data ourselves, we should first try to see whether we can find any relevant existing data at no cost. Luckily, the android and ios spreadsheets (found in the input section) hold the necesary data for this project.\n\n### Let's start by opening the two data sets and then continue with exploring the data. After I read in the csv files, I use a function to allow me to more clearly see the data as I print by adding spaces between each line using 'n\/'","8c9dfa49":"## Removing Duplicate Entries: Part One","ed054db6":"### One way to find out what genres are the most popular (have the most users) is to calculate the average number of installs for each app genre. For the Google Play data set, we can find this information in the Installs column, but for the App Store data set this information is missing. As a workaround, we'll take the total number of user ratings as a proxy, which we can find in the rating_count_tot app.\n\n### Below, we calculate the average number of user ratings per app genre on the App Store:","9b9d6c3c":"### Now, let's use the reviews_max dictionary to remove the duplicates. For the duplicate cases, we'll only keep the entries with the highest number of reviews. In the code cell below:\n\n### We start by initializing two empty lists, android_clean and already_added.We loop through the android data set, and for every iteration, and isolate the name of the app and the number of reviews. \n\n### The code in the below is created to add the current row (app) to the android_clean list, and the app name (name) to the already_added list if: \n\n* The number of reviews of the current app matches the number of reviews of that app as described in the reviews_max dictionary.\n* And the name of the app is not already in the already_added list. (We need to add this supplementary condition to account for those cases where the highest number of reviews of a duplicate app is the same for more than one entry.).","5b2d097d":"\n### However, this niche seems to show some potential. One thing we could do is take another popular book and turn it into an app where we could add different features besides the raw version of the book. This might include daily quotes from the book, an audio version of the book, quizzes about the book, etc. On top of that, we could also embed a dictionary within the app, so users don't need to exit our app to look up words in an external app.\n\n### This idea seems to fit well with the fact that the App Store is dominated by for-fun apps. This suggests the market might be a bit saturated with for-fun apps, which means a practical app might have more of a chance to stand out among the huge number of apps on the App Store.\n\n### Other genres that seem popular include weather, book, food and drink, or finance. The book genre seem to overlap a bit with the app idea we described above, but the other genres don't seem too interesting to us:\n\n### Weather apps \u2014 people generally don't spend too much time in-app, and the chances of making profit from in-app adds are low. Also, getting reliable live weather data may require us to connect our apps to non-free APIs.\n\n### Food and drink \u2014 examples here include Starbucks, Dunkin' Donuts, McDonald's, etc. So making a popular food and drink app requires actual cooking and a delivery service, which is outside the scope of our company.\n\n### Finance apps \u2014 these apps involve banking, paying bills, money transfer, etc. Building a finance app requires domain knowledge, and we don't want to hire a finance expert just to build an app.\n\n### Now let's analyze the Google Play market a bit.","ecd73b5d":"### We can see that we're left with 9614 Android apps and 6183 iOS apps","fdda4fc4":"# Profitable Apps Profiles for App Store and Google Play Markets\n\n## A Data Analysis Project by Montel Hardy","3334f3b2":"### For the Google Play market, we actually have data about the number of installs, so we should be able to get a clearer picture about genre popularity. However, the install numbers don't seem precise enough \u2014 we can see that most values are open-ended (100+, 1,000+, 5,000+, etc.):","78404213":"### In the above output we see dataset printed along with: the first five rows, the header, as well as the total rows and columns.\n\n### As I began to clean to clean the data, I identified that row 10472 as a row does not have a category column, I opted to use the delete function to remove it from the dataset.","73b98385":"### As we mentioned in the introduction, we only build apps that are free to download and install, and our main source of revenue consists of in-app ads. Our data sets contain both free and non-free apps, and we'll need to isolate only the free apps for our analysis. Below, we isolate the free apps for both our data sets. And use or explore_data function to get a brief snapshot of our free app data.","0576ee7c":"### If we removed all the communication apps that have over 100 million installs, the average would be reduced roughly ten times:","14f89176":"### On average, communication apps have the most installs: 38,456,119. This number is heavily skewed up by a few apps that have over one billion installs (WhatsApp, Facebook Messenger, Skype, Google Chrome, Gmail, and Hangouts), and a few others with over 100 and 500 million installs:","c02a9b29":"### The function seems to work fine, but some English app names use emojis or other symbols (\u2122, \u2014 (em dash), \u2013 (en dash), etc.) that fall outside of the ASCII range. Because of this, we'll remove useful apps if we use the function in its current form.","58018aa8":"\nThe book and reference genre includes a variety of apps: software for processing and reading ebooks, various collections of libraries, dictionaries, tutorials on programming or languages, etc. It seems there's still a small number of extremely popular apps that skew the average:","f29c629c":"### The same pattern applies to social networking apps, where the average number is heavily influenced by a few giants like Facebook, Pinterest, Skype, etc. Same applies to music apps, where a few big players like Pandora, Spotify, and Shazam heavily influence the average number.\n\n### Our aim is to find popular genres, but navigation, social networking or music apps might seem more popular than they really are. The average number of ratings seem to be skewed by very few apps which have hundreds of thousands of user ratings, while the other apps may struggle to get past the 10,000 threshold. We could get a better picture by removing these extremely popular apps for each genre and then rework the averages, but we'll leave this level of detail for later.\n\n### Reference apps have 74,942 user ratings on average, but it's actually the Bible and Dictionary.com which skew up the average rating:","92923031":"### If you examine the rows we printed two cells above for the Instagram app, the main difference happens on the fourth position of each row, which corresponds to the number of reviews. The different numbers show that the data was collected at different times. We can use this to build a criterion for keeping rows. We won't remove rows randomly, but rather we'll keep the rows that have the highest number of reviews because the higher the number of reviews, the more reliable the ratings.\n\n### In the next section, we will:\n\n* Create a dictionary where each key is a unique app name, and the value is the highest number of reviews of that app.\n* Use the dictionary to create a new data set, which will have only one entry per app (and we only select the apps with the highest number of reviews)","826622a2":"## Most Popular Apps by Genre on the App Store","5a78224a":"# Opening and Exploring the Data","2eed40aa":"## Removing Non-English Apps: Part One\n    \n","3997258a":"# Part Two\n\n","b39ca48c":"### However, it looks like there are only a few very popular apps, so this market still shows potential. Let's try to get some app ideas based on the kind of apps that are somewhere in the middle in terms of popularity (between 1,000,000 and 100,000,000 downloads):","30c66f6e":"## Isolating the Free Apps","a85a9f16":"### To minimize data loss, we only remove an app if its' name has more than three Non- ASCII characters.","895cba0e":"## Most Common Apps by Genre: Part Three","16cfb724":"# Conclusions\n\n### In this project, we analyzed data about the App Store and Google Play mobile apps with the goal of recommending an app profile that can be profitable for both markets.\n\n### We concluded that taking a popular book (perhaps a more recent book) and turning it into an app could be profitable for both the Google Play and the App Store markets. The markets are already full of libraries, so we need to add some special features besides the raw version of the book. This might include daily quotes from the book, an audio version of the book, quizzes on the book, a forum where people can discuss the book, etc."}}