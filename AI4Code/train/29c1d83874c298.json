{"cell_type":{"0b601314":"code","137c7656":"code","f1cb6688":"code","d90e41e6":"code","b6dc28e9":"code","1629aa49":"code","eb9c44a0":"code","c918a3d5":"code","da7694de":"code","917dd195":"code","e293e4cb":"code","6810501a":"code","d5cece18":"code","0318b72f":"code","ccc0d666":"code","43164e17":"code","77c71271":"code","877f696b":"code","b29b4459":"code","a666122a":"code","54d57114":"markdown","c8409ea1":"markdown","88f6f7df":"markdown","38cb0518":"markdown","fbd63609":"markdown","52e02cfd":"markdown","0be134f9":"markdown"},"source":{"0b601314":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly.graph_objs as go\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","137c7656":"data = pd.read_csv(\"\/kaggle\/input\/machine-learning-for-diabetes-with-python\/diabetes_data.csv\")","f1cb6688":"data.head()","d90e41e6":"data.info()","b6dc28e9":"data.describe()","1629aa49":"y_data = data.Outcome.values\ny_data\nx_data = data.drop([\"Outcome\"],axis=1)\nx_data","eb9c44a0":"x_data = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data)).values\nx_data","c918a3d5":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x_data,y_data,test_size = 0.2, random_state = 10)\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\n\nx_test","da7694de":"x_data.boxplot(column=[\"BloodPressure\",\"SkinThickness\",\"BMI\"])","917dd195":"x_data.boxplot(column=[\"Pregnancies\"])","e293e4cb":"x_data.boxplot(column=[\"Glucose\"])","6810501a":"\ndef detect_outliers(x_data,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(x_data[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(x_data[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = x_data[(x_data[c] < Q1 - outlier_step) | (x_data[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 1)\n    \n    return multiple_outliers\nx_data.loc[detect_outliers(data,[\"BloodPressure\",\"SkinThickness\",\"Glucose\",\"BMI\"])]\n","d5cece18":"x_data = x_data.drop(detect_outliers(x_data,[\"BloodPressure\",\"SkinThickness\",\"Glucose\",\"BMI\"]),axis = 0).reset_index(drop = True)\n","0318b72f":"\ndef initialize_weights_and_bias(dimension):\n    \n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b\n\ndef sigmoid(z):\n    \n    y_head = 1 \/ (1+np.exp(-z))\n    \n    return y_head","ccc0d666":"def forward_backward_propagation(w,b,x_train,y_head):\n    \n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head) - (1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss)) \/ x_train.shape[1]\n    \n    #backward propogation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {\"derivative_weight\": derivative_weight,\"derivative_bias\": derivative_bias}\n    return cost,gradients","43164e17":"def update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost)) #if section defined to print our cost values in every 10 iteration. We do not need to do that. It's optional.\n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","77c71271":"\ndef predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is one means has diabete (y_head=1),\n    # if z is smaller than 0.5, our prediction is zero means does not have diabete (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction\n","877f696b":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]\n    w,b = initialize_weights_and_bias(dimension)\n    \n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    \n\n    # Print train\/test Errors\n    \n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))","b29b4459":"logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 2, num_iterations =400)","a666122a":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint(\"Test Accuracy {}\".format(lr.score(x_test.T,y_test.T)))","54d57114":"<a id = '4'><\/a><br>\n# Detect Outlier","c8409ea1":"<a id = '2'><\/a><br>\n# Normalization","88f6f7df":"<a id = '2'><\/a><br>\n# Train and Test","38cb0518":"<a id = '1'><\/a><br>\n# Data","fbd63609":"<a id = '4'><\/a><br>\n# Functions","52e02cfd":"<a id = '4'><\/a><br>\n# Result","0be134f9":"# Table of Contents\n<font color = 'blue'>\n\n\n1. [Data](#1)\n1. [Normalization](#2)\n1. [Train-Test Split](#3)\n1. [Detect Outlier](#4)\n1. [Functions](#5)\n1. [Result](#6)\n\n    "}}