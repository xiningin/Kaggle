{"cell_type":{"9d3456a5":"code","ff5487c1":"code","bba5f056":"code","14ca45b0":"code","ee8cfd06":"code","3166e5c4":"code","0462102b":"code","eb991911":"code","bda5fcb0":"code","802fcb6a":"code","e1047b26":"code","3584a3ed":"code","48e1587c":"code","3fd931a4":"code","951fc7fe":"code","823bbd84":"code","1c92f400":"code","c003024f":"code","15d8443b":"code","7065ccdc":"code","4316323a":"code","58f4214c":"code","4d1cf0e1":"code","b8235f81":"code","d9606f95":"code","70075ee3":"code","5b411f09":"code","4eacf057":"code","1e91dec0":"code","68020785":"code","148d45f3":"code","03157482":"code","cff26d2c":"code","35690d56":"code","8f45f478":"code","4304f032":"code","5e68314e":"code","975d55dd":"code","89aa1da1":"code","f4a87214":"code","4cedb66d":"code","cfb29312":"code","9c76d2f9":"code","63e8fdba":"code","74ca3af7":"markdown","0964de8b":"markdown","426af092":"markdown","2e6b737c":"markdown","797474ad":"markdown","c4540b4d":"markdown","fd7195a5":"markdown","8e54b055":"markdown","ac18481a":"markdown","c936db80":"markdown","1c2f0b65":"markdown","c3cfdaec":"markdown","e92bfd29":"markdown","e1ad9257":"markdown","5c056c72":"markdown","46b32b02":"markdown","30284bb2":"markdown","d01b6851":"markdown","364b25f7":"markdown","81dbb158":"markdown"},"source":{"9d3456a5":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(color_codes = True)  #sets nice background color","ff5487c1":"zom = pd.read_csv('..\/input\/zomato.csv')","bba5f056":"zom.head()\n\n#Getting the 1st 5 rows of the dataset","14ca45b0":"zom.shape\n\n#There are around 51k rows and 17 columns ","ee8cfd06":"zom.info()","3166e5c4":"zom.describe()","0462102b":"#Removing the Duplicates\nzom.duplicated().sum()\nzom.drop_duplicates(inplace=True)\n","eb991911":"#dropping irrelevant columns\nzom=zom.drop(['url','address','phone','dish_liked', 'menu_item', 'reviews_list'],axis=1) \nzom.head()","bda5fcb0":"pd.DataFrame( zom.isnull().sum(), columns= ['Number of missing values'])","802fcb6a":"zom['rate'].value_counts()","e1047b26":"zom['rate'].unique()\n","3584a3ed":"zom = zom.loc[zom.rate !='NEW']\nzom = zom.loc[zom.rate !='-'].reset_index(drop=True)\nremove_denom = lambda x: x.replace('\/5', '') if type(x) == np.str else x\nzom.rate = zom.rate.apply(remove_denom).str.strip().astype('float')\nzom['rate'].head()","48e1587c":"zom[\"rate\"] = zom[\"rate\"].fillna(zom[\"rate\"].median())\n","3fd931a4":"pd.DataFrame( zom.isnull().sum(), columns= ['Number of missing values'])\n\n# All missing values from rate is gone","951fc7fe":"zom['approx_cost(for two people)'].unique()","823bbd84":"zom['approx_cost(for two people)'] = zom['approx_cost(for two people)'].astype(str)\nzom['approx_cost(for two people)'] = zom['approx_cost(for two people)'].apply(lambda x: x.replace(',',''))\nzom['approx_cost(for two people)'] = zom['approx_cost(for two people)'].astype(float)\nzom.info()","1c92f400":"zom['approx_cost(for two people)'].unique()","c003024f":"zom[\"approx_cost(for two people)\"] = zom[\"approx_cost(for two people)\"].fillna(zom[\"approx_cost(for two people)\"].median())\n","15d8443b":"pd.DataFrame( zom.isnull().sum(), columns= ['Number of missing values'])\n\n#Filled NaN values in cost for two peopel column as well","7065ccdc":"zom[\"location\"] = zom['location'].fillna(zom[\"location\"].mode().iloc[0])\nzom[\"rest_type\"] = zom[\"rest_type\"].fillna(zom[\"rest_type\"].mode().iloc[0])\nzom[\"cuisines\"] = zom[\"cuisines\"].fillna(zom[\"cuisines\"].mode().iloc[0])\n\n\n#May have contrasting inputs but best for data to be filled with mode.","4316323a":"pd.DataFrame( zom.isnull().sum(), columns= ['Number of missing values'])\n","58f4214c":"zom.head()","4d1cf0e1":"top_5_loc = zom.location.value_counts().nlargest(5)","b8235f81":"sns.barplot(y=top_5_loc.index, x=top_5_loc.values, palette=\"CMRmap\")","d9606f95":"top_5_rest = zom.rest_type.value_counts().nlargest(5)","70075ee3":"sns.barplot(y=top_5_rest.index, x=top_5_rest.values, palette=\"Accent_r\")","5b411f09":"top_5_cui = zom.cuisines.value_counts().nlargest(5)","4eacf057":"sns.barplot(y=top_5_cui.index, x=top_5_cui.values, palette=\"Paired\")","1e91dec0":"top_5_res = zom.name.value_counts().nlargest(5)","68020785":"sns.barplot(y=top_5_res.index, x=top_5_res.values, palette=\"Oranges\")","148d45f3":"zom.book_table.value_counts().plot(kind='pie')","03157482":"zom.online_order.value_counts().plot(kind='pie')","cff26d2c":"sns.jointplot(data=zom, x=\"approx_cost(for two people)\", y=\"rate\")","35690d56":"zom.columns","8f45f478":"zom.rest_type.value_counts()","4304f032":"from sklearn.preprocessing import LabelEncoder\n\nlb_make = LabelEncoder()\n\nzom['online_order'] = lb_make.fit_transform(zom['online_order'])\nzom['book_table'] = lb_make.fit_transform(zom['book_table'])\nzom['location'] = lb_make.fit_transform(zom['location'])\nzom['rest_type'] = lb_make.fit_transform(zom['rest_type'])\nzom['cuisines'] = lb_make.fit_transform(zom['cuisines'])\nzom['listed_in(type)'] = lb_make.fit_transform(zom['listed_in(type)'])\n\n","5e68314e":"X= zom.drop(labels=['name', 'rate', 'listed_in(city)'], axis=1)\ny = zom[['rate']]\nX.head()","975d55dd":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n","89aa1da1":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n\n\n\nmodel = LinearRegression()\n\nmodel.fit(X_train,y_train)\n\ny_pred=model.predict(X_test)\n","f4a87214":"print('Accuracy prediction for Linear Regression model :', r2_score(y_test,y_pred))\n","4cedb66d":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\n\n\n# tuning=dict()\nrf=RandomForestRegressor(n_estimators=200,random_state=50,min_samples_leaf=.00001)\nrf.fit(X_train,y_train)\ny_pred=rf.predict(X_test)\nr2_score(y_test,y_pred)","cfb29312":"from xgboost import XGBRegressor\n\nxgb = XGBRegressor(booster = 'gbtree', learning_rate = 0.1, max_depth = 15, n_estimators = 200)\nxgb.fit(X_train, y_train)\ny_predict=xgb.predict(X_test)\n\nr2_score(y_test,y_predict)","9c76d2f9":"X.head()","63e8fdba":"new_input = [1, 1, 920, 5, 27, 922, 500.0, 0]\nrest = pd.DataFrame(new_input)\nrest.T.columns =[\"online_order\",\"book_table\",\"votes\",\"location\",\"rest_type\",\"cuisines\",\"cost\",\"type\"]\nrest.T\ny_pred_new=rf.predict(rest.T)\n\nprint('The new restaurant type is predicted to have a rating of -> ',y_pred_new)\n","74ca3af7":"### BTM seems to be the most popular locality in BTM for restaurants\n","0964de8b":"#### We have eliminated all the null values and filled with approriate values","426af092":"# Top 5 cuisine options \n","2e6b737c":"### Many restaurants don't require their customers to book a table in advance","797474ad":"### Top 5 famous Restaurant types","c4540b4d":"### Top 5 popular localities","fd7195a5":"# Visualising relation btw online order and ratings","8e54b055":"# Out of the three models, XGBoost seems to be the best model with highest r2 score.","ac18481a":"### Most of the outlets have the option where customers can order food online as well.","c936db80":"#### There doesn't seem to be a relation between cost and ratings of a restaurant. On the contarty, one may beliee that an expensive restaurant will have higher ratings.","1c2f0b65":"#### Therefore average number of votes for the restaurants is around 283.","c3cfdaec":"### North indian seems to be the most popular cuisine","e92bfd29":"# Importing the dataset","e1ad9257":"### Quick bites type of restaurants seem to be the most famous","5c056c72":"# Model building","46b32b02":"# Visualization","30284bb2":"# Conclusion : Using the Zomato restaurants dataset, we have explored the relations between different features like lcoation, online order, etc. Using XGB model which has the best accuracy, we have succesfully predicted the rating of a restaurant, given other parameters","d01b6851":"# EDA and cleaning of data\n","364b25f7":"### Cafe coffee day has the maximum number of outlets in Bangalore","81dbb158":"# Restuarants with most outlets\n"}}