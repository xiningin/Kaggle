{"cell_type":{"60ddd1e7":"code","32cdf16b":"code","7ebf77b2":"code","a7b50f06":"code","dc6e6029":"code","f3768b83":"code","7da54eaf":"code","e8917b02":"code","41ea3b5b":"code","d104944c":"code","147d1146":"code","ef4d4d11":"code","8ea54b51":"code","4b23f74c":"code","ed468c4d":"code","4db4dd76":"code","ac63a9a6":"code","fc79dad2":"code","e53b8a69":"code","b4afc8e3":"code","63e01e72":"code","2c833903":"code","ce211eee":"code","e0323d2f":"code","3d64e635":"code","1af715f3":"code","3607c00b":"code","0b392053":"code","c9a966f3":"code","59d9b1d2":"code","041db7e3":"code","33060def":"code","1e958d28":"code","e74aced3":"markdown","714e53a7":"markdown","02fa3fe5":"markdown","993a760e":"markdown","8f69aa19":"markdown","41671919":"markdown"},"source":{"60ddd1e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","32cdf16b":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","7ebf77b2":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","a7b50f06":"train.info()","dc6e6029":"test.info()","f3768b83":"all = pd.concat([train, test], sort = False)\nall.info()","7da54eaf":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","e8917b02":"all.info()","41ea3b5b":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","d104944c":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","147d1146":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","ef4d4d11":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","8ea54b51":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","4b23f74c":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","ed468c4d":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","4db4dd76":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","ac63a9a6":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","fc79dad2":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","e53b8a69":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","b4afc8e3":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","63e01e72":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","2c833903":"from sklearn.linear_model import LogisticRegression","ce211eee":"logmodel = LogisticRegression(solver = 'liblinear')\nlogmodel.fit(X_train,y_train)","e0323d2f":"predictions = logmodel.predict(X_test)\npredictions","3d64e635":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","1af715f3":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,predictions)","3607c00b":"all_test.head()","0b392053":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","c9a966f3":"TestForPred.info()","59d9b1d2":"t_pred = logmodel.predict(TestForPred).astype(int)","041db7e3":"PassengerId = all_test['PassengerId']","33060def":"logSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nlogSub.head()","1e958d28":"logSub.to_csv(\"1_Logistics_Regression_Submission.csv\", index = False)","e74aced3":"****Train\/Test Split","714e53a7":"****Extra Features:","02fa3fe5":"****Final Predictions","993a760e":"****Confusion Matrix","8f69aa19":"****Build Logistic Model","41671919":"****Check Accuracy"}}