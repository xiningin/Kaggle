{"cell_type":{"2ea08733":"code","a07e1504":"code","11038a91":"code","3d7a7209":"code","6880e640":"code","2dd89200":"code","2d8ac5a2":"code","914bb388":"code","31f9d4f0":"code","413b39d7":"code","9fcb502d":"code","2f826134":"code","aa4d0dfe":"code","8034795a":"code","f6273f7e":"code","fa72b855":"code","5bd6ca25":"code","fd795316":"code","94d42365":"code","9868a16a":"code","49d21978":"code","c9fc405f":"code","43af2431":"code","6b31b2c2":"markdown","722522f5":"markdown","6b335b87":"markdown","bfcd5642":"markdown","e77bd640":"markdown","a029e9da":"markdown","5ac9baf5":"markdown","4a733f15":"markdown","8f212586":"markdown","3597de0a":"markdown","2bc5f4b7":"markdown","c34ed921":"markdown","7a95d1fc":"markdown","89781a2c":"markdown"},"source":{"2ea08733":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","a07e1504":"df = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndf.shape","11038a91":"df.head()\n","3d7a7209":"df.isnull().sum()","6880e640":"df.describe().transpose()","2dd89200":"plt.figure(figsize=(12,7))\nsns.heatmap(df.corr(),annot=True,cmap=\"inferno\")\nplt.show()","2d8ac5a2":"df.T.apply(lambda x: x.nunique(), axis=1)","914bb388":"categorial_data=['sex','cp','fbs','restecg','exng','slp','thall','caa']\ncount_data=['age','trtbps','chol','thalachh','oldpeak']\ntargt_data=['output']\nprint(\"Categorial Features:=\\n\",categorial_data,\"\\nNon Categorial Features:=\\n\",count_data,\"\\nTarget Data:=\\n\",targt_data)","31f9d4f0":"sns.pairplot(df,hue=\"output\", diag_kind='kde',palette='husl')\nplt.show()","413b39d7":"plt.figure(figsize=(20,13))\n\nplt.subplot(2,3,1)\nplt.title('Distribution of age with respect to output',fontsize=12)\nsns.histplot(x = df['age'], hue = df['output'],kde=True)\n\nplt.subplot(2,3,2)\nplt.title('Distribution of trtbps with respect to output',fontsize=12)\nsns.histplot(x = df['trtbps'], hue = df['output'],kde=True)\n\nplt.subplot(2,3,3)\nplt.title('Distribution of chol with respect to output',fontsize=12)\nsns.histplot(x = df['chol'], hue = df['output'],kde=True)\n\n\nplt.subplot(2,3,4)\nplt.title('Distribution of thalachh with respect to output',fontsize=12)\nsns.histplot(x = df['thalachh'], hue = df['output'],kde=True)\n\nplt.subplot(2,3,5)\nplt.title('Distribution of oldpeak with respect to output',fontsize=12)\nsns.histplot(x = df['oldpeak'], hue = df['output'],kde=True)\nplt.show()\n","9fcb502d":"plt.figure(figsize=(20,13))\nplt.subplot(2,3,1)\nplt.title('Distribution of age with respect to output',fontsize=12)\nsns.kdeplot(data=df,x ='age', hue = 'output',fill=True,alpha=.5,\n           common_norm=False, palette=\"crest\",linewidth=0)\n\nplt.subplot(2,3,2)\nplt.title('Distribution of trtbps with respect to output',fontsize=12)\nsns.kdeplot(data=df,x = 'trtbps', hue = 'output',fill=True,alpha=.5,\n           common_norm=False, palette=\"crest\",linewidth=0)\n\nplt.subplot(2,3,3)\nplt.title('Distribution of chol with respect to output',fontsize=12)\nsns.kdeplot(data=df,x ='chol', hue = 'output',fill=True,alpha=.5,\n           common_norm=False, palette=\"crest\",linewidth=0)\n\nplt.subplot(2,3,4)\nplt.title('Distribution of thalachh with respect to output',fontsize=12)\nsns.kdeplot(data=df,x = 'thalachh', hue = 'output',fill=True,alpha=.5,\n           common_norm=False, palette=\"crest\",linewidth=0)\n\nplt.subplot(2,3,5)\nplt.title('Distribution of oldpeak with respect to output',fontsize=12)\nsns.kdeplot(data=df,x = 'oldpeak', hue = 'output',fill=True,alpha=.5,\n            common_norm=False, palette=\"crest\",linewidth=0)\nplt.show()\n","2f826134":"plt.figure(figsize=(20,10))\nplt.subplot(2,3,1)\nplt.title('Chest pain distribution',fontsize=12)\nsns.kdeplot(data=df, x='cp',hue=\"output\", \n            fill=True,palette=[\"#ff7733\",\"#cbd629\"], alpha=.5, linewidth=0)\n\nplt.subplot(2,3,2)\nplt.title('Heart attack according to sex',fontsize=12)\nsns.countplot(data=df,x= 'sex', hue = 'output')\n\nplt.subplot(2,3,3)\nplt.title('Heart attack according to fbs',fontsize=12)\nsns.countplot(data=df,x= 'fbs', hue = 'output')\n\nplt.subplot(2,3,4)\nplt.title('Strip plot fbs vs age',fontsize=12)\nsns.stripplot( data=df,x='fbs',y='age',hue='output',palette=[\"#0080ff\",\"#ff6600\"])\n\nplt.subplot(2,3,5)\nplt.title('Strip plot sex vs age',fontsize=12)\nsns.stripplot( data=df,x='sex',y='age',hue='output',palette=[\"#0080ff\",\"#ff6600\"])\n\nplt.show()","aa4d0dfe":"df.head()","8034795a":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn import metrics\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\nimport xgboost as xgb\nacc=[]\nmodel=[]","f6273f7e":"sc = RobustScaler()\nx = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values\n\nxtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=.2,random_state=0)\n\nxtrain = sc.fit_transform(xtrain)\nxtest = sc.transform(xtest)\n\nprint(\"xtrain shape:= \",xtrain.shape)\nprint(\"xtest shape:= \",xtest.shape)\nprint(\"ytrain shape:= \",ytrain.shape)\nprint(\"xtest shape:= \",ytest.shape)","fa72b855":"### Decision Tree\nDecisionTree = DecisionTreeClassifier(criterion=\"entropy\",random_state=2,max_depth=5)\nDecisionTree.fit(xtrain,ytrain)\npred_value=DecisionTree.predict(xtest)\nx=metrics.accuracy_score(ytest,pred_value)\nacc.append(x)\nmodel.append('Decision Tree')\nprint(\"DecisionTrees's Accuracy is: \", x*100)\nprint(classification_report(ytest,pred_value))\n","5bd6ca25":"NB=GaussianNB()\nNB.fit(xtrain,ytrain)\npred_value=NB.predict(xtest)\nx=metrics.accuracy_score(ytest,pred_value)\nacc.append(x)\nmodel.append('Guassian Naive Bayes')\nprint(\"Guassian Naive Bayes Accuracy is: \", x*100)\nprint(classification_report(ytest,pred_value))","fd795316":"svm=SVC()\nsvm.fit(xtrain,ytrain)\npred_value=svm.predict(xtest)\nx=metrics.accuracy_score(ytest,pred_value)\nacc.append(x)\nmodel.append('SVM')\nprint('SVM accuracy is: ',x*100)\nprint(classification_report(ytest,pred_value))","94d42365":"logisreg=LogisticRegression(random_state=2)\nlogisreg.fit(xtrain,ytrain)\npred_value=logisreg.predict(xtest)\nx=metrics.accuracy_score(ytest,pred_value)\nacc.append(x)\nmodel.append('Logistic Regression')\nprint('Logistic Regression: ',x*100)\nprint(classification_report(ytest,pred_value))\n","9868a16a":"RF = RandomForestClassifier(n_estimators=20, random_state=0)\nRF.fit(xtrain,ytrain)\n\npred_value = RF.predict(xtest)\n\nx = metrics.accuracy_score(ytest, pred_value)\nacc.append(x)\nmodel.append('RF')\nprint(\"RF's Accuracy is: \", x)\n\nprint(classification_report(ytest,pred_value))","49d21978":"XB = xgb.XGBClassifier()\nXB.fit(xtrain,ytrain)\n\npred_value = XB.predict(xtest)\n\nx = metrics.accuracy_score(ytest, pred_value)\nacc.append(x)\nmodel.append('XGBoost')\nprint(\"XGBoost's Accuracy is: \", x)\n\nprint(classification_report(ytest,pred_value))","c9fc405f":"plt.figure(figsize=[10,5],dpi = 100)\nplt.title('Accuracy Comparison')\nplt.xlabel('Accuracy')\nplt.ylabel('Algorithm')\nsns.barplot(x = acc,y = model,palette='dark')","43af2431":"svc = SVC(kernel = 'rbf',C = 1, degree = 5, random_state = 0)\nsvc.fit(xtrain,ytrain)\npred = svc.predict(xtest)\nx=metrics.accuracy_score(pred,ytest)\nprint(\"Accuracy is:= \",x)\nprint(classification_report(ytest,pred_value))\n","6b31b2c2":"# **KDE Plot**","722522f5":"# **Start Prediction**","6b335b87":"Corr Matrix","bfcd5642":"# **Summary**","e77bd640":"Visulization","a029e9da":"**Logistic Regression**","5ac9baf5":"# **Import packages**","4a733f15":"**SVM Hypertunning**","8f212586":"**Guassian Naive Bayes**","3597de0a":"**RandomForest**","2bc5f4b7":"**XG Boost**","c34ed921":"# **Pair Plot**","7a95d1fc":"**SVM**","89781a2c":"# **Hist Plot**"}}