{"cell_type":{"18417f2e":"code","ec3ec55c":"code","9a1fa7d8":"code","f0304f05":"code","2e60d724":"code","a69eec1d":"code","88480b08":"code","c821f95e":"code","c07f94ea":"code","6cce6dec":"code","2c312831":"code","07691507":"code","85365417":"code","633409cb":"code","9e2e982a":"code","0bd6be8a":"code","2c208b53":"code","7e1bd5d1":"markdown"},"source":{"18417f2e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec3ec55c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport warnings\ndef ignore_all_warnings(*args, **kwargs):\n    pass\nwarnings.warn = ignore_all_warnings\n\ntrain_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv').drop(['Id'], axis=1)\ntest_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv').drop(['Id'], axis=1)\n\nall_data = pd.concat((train_data.loc[:,'MSSubClass':'SalePrice'],\n                      test_data.loc[:,'MSSubClass':'SaleCondition']))","9a1fa7d8":"train_data.info()","f0304f05":"train_data.describe()","2e60d724":"all_data.describe()","a69eec1d":"all_data.info()","88480b08":"\n#corr_mat = train_data.corr()\ncorr_mat = all_data.corr()\ncorr_mat['SalePrice'].sort_values(ascending=False)","c821f95e":"plt.figure(figsize=(20,20))\nsns.heatmap(corr_mat, cmap='rainbow')","c07f94ea":"plt.figure(figsize=(7,7))\ncorr_cols = corr_mat.nlargest(5, 'SalePrice')['SalePrice']\nsns.heatmap(all_data[corr_cols.index].corr(), annot=True, square=True, cmap='coolwarm')","6cce6dec":"sns.distplot(all_data['SalePrice']);","2c312831":"print(\"Skewness: %f\" % all_data['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % all_data['SalePrice'].kurt())","07691507":"var = 'OverallQual'\nplotdata = pd.concat([all_data['SalePrice'], all_data[var]], axis=1)\nf, ax = plt.subplots(figsize=(20, 20))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=plotdata)\nfig.axis(ymin=0, ymax=800000);","85365417":"from scipy import stats\nfrom scipy.stats import norm\nfig = plt.figure(figsize=(20, 20))\nsns.distplot(all_data['SalePrice'], fit=norm, vertical=True)\nfig = plt.figure(figsize=(20, 20))\nres = stats.probplot(all_data['SalePrice'], plot=plt)","633409cb":"sns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(all_data[cols], size = 2.5, hue='YearBuilt')\nplt.show()","9e2e982a":"total_miss = all_data.isnull().sum().sort_values(ascending=False)\npercent_miss = (all_data.isnull().sum()\/all_data.isnull().count()).sort_values(ascending=False)\nmissing_data_df = pd.concat([total_miss, percent_miss], axis=1, keys=['Total', 'Percentage'])\nmissing_data_df.head(20)","0bd6be8a":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=missing_data_df.index, y=missing_data_df.Percentage)\nplt.xlabel('Dataset Features', fontsize=15)\nplt.ylabel('Percentage Missing', fontsize=15)\nplt.title('Percentage Missing Data by Dataset feature', fontsize=15)","2c208b53":"all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")\nall_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")\nall_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")\nall_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")\nall_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda lots: lots.fillna(lots.median()))\nfor col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')\nall_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)\nall_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])\nall_data = all_data.drop(['Utilities'], axis=1)\nall_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")\nall_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])\nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\nall_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])\nall_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")\nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","7e1bd5d1":"# EDA Analysis"}}