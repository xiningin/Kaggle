{"cell_type":{"afc9e1b4":"code","6c8a40ac":"code","36fa5b5a":"code","da1fe5b8":"code","35001a67":"code","e89b4359":"code","6f0f262e":"code","bb0f3ba3":"code","513c7d72":"code","05599d69":"code","058cb698":"code","67557c35":"code","6e71d817":"code","2e38a6e7":"code","d8a4b1bc":"code","1325be59":"code","b0d2127d":"code","e5f0ea43":"code","87c15af4":"code","d3748cec":"code","63df4214":"code","4a10267d":"code","fa1972cd":"code","ceed5d5f":"code","46841174":"code","85287e82":"code","b12ef0ef":"code","9420c3e3":"code","751504e8":"code","dcd5e115":"code","94d01a6a":"code","4fb4a9ff":"code","a204dbee":"code","df061773":"code","689c8955":"code","4c540c04":"code","ec2de9f7":"code","d0feeaee":"code","778152d1":"code","cf7d1ab3":"code","3ef12ccc":"code","a001aeb3":"code","39cf765a":"markdown","9231bf58":"markdown","892adc06":"markdown","719face3":"markdown","976bc96a":"markdown","e7bb96a3":"markdown","aa71222e":"markdown","c28f96fa":"markdown","2b5ab48b":"markdown","7b35392e":"markdown","f385b28b":"markdown","1aa3aada":"markdown","02066e0f":"markdown","dc9a9298":"markdown","d7ef8f81":"markdown","067a87d0":"markdown","f2011cac":"markdown","1b5dcb1e":"markdown","9e39a6a7":"markdown","831a0d90":"markdown","5c3e57b2":"markdown","63017f90":"markdown","617aa6ed":"markdown","1db7c9e3":"markdown","419a7cd0":"markdown","b50c690b":"markdown","8c31e767":"markdown","7d90b16d":"markdown"},"source":{"afc9e1b4":"import os\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, r2_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn import preprocessing","6c8a40ac":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","36fa5b5a":"data = pd.read_csv(\"\/kaggle\/input\/used-cars-price-prediction\/train-data.csv\")","da1fe5b8":"print('Number of samples: {}, number of attributes: {}'.format(data.shape[0], data.shape[1]))","35001a67":"data.head()","e89b4359":"data_clean = data.copy(deep = True)","6f0f262e":"data_clean.dropna(\"index\").shape","bb0f3ba3":"print(\"The number of NaN values in New_Price column is: \" + str(data_clean.New_Price.isna().sum()))","513c7d72":"data_clean.drop(columns = [\"Unnamed: 0\", \"New_Price\"], inplace = True)","05599d69":"data_clean.dropna(\"index\", inplace = True)\ndata_clean = data_clean.reset_index(drop = True)\ndata_clean.shape","058cb698":"len(np.unique(list(data_clean.Name)))","67557c35":"names = list(data_clean.Name)\nfor i in range(len(names)):\n    names[i] = names[i].split(' ', 1)[0]\ndata_clean.Name = names\ndata_clean.head()","6e71d817":"len(np.unique(list(data_clean.Name)))","2e38a6e7":"mileage = list(data_clean.Mileage)\nengine = list(data_clean.Engine)\npower = list(data_clean.Power)\nfor i in range(len(names)):\n    mileage[i] = mileage[i].split(' ', 1)[0]\n    engine[i] = engine[i].split(' ', 1)[0]\n    power[i] = power[i].split(' ', 1)[0]\ndata_clean.Mileage = mileage\ndata_clean.Engine = engine\ndata_clean.Power = power\ndata_clean.head()","d8a4b1bc":"data_clean[\"Price\"] = data_clean[\"Price\"].astype(float)\ndata_clean[\"Kilometers_Driven\"] = data_clean[\"Kilometers_Driven\"].astype(float)\ndata_clean[\"Mileage\"] = data_clean[\"Mileage\"].astype(float)\ndata_clean[\"Engine\"] = data_clean[\"Engine\"].astype(float)","1325be59":"idx = []\nlt = list(data_clean[\"Power\"])\nfor i in range(len(lt)):   \n    if( lt[i] == \"null\"):\n        idx.append(i)\ndata_clean = data_clean.drop(idx)\ndata_clean = data_clean.reset_index(drop = True)","b0d2127d":"data_clean[\"Power\"] = data_clean[\"Power\"].astype(float)","e5f0ea43":"data_clean.head()","87c15af4":"np.unique(list(data_clean.Name))","d3748cec":"np.unique(list(data_clean.Location))","63df4214":"np.unique(list(data_clean.Year))","4a10267d":"np.unique(list(data_clean.Fuel_Type))","fa1972cd":"np.unique(list(data_clean.Transmission))","ceed5d5f":"np.unique(list(data_clean.Owner_Type))","46841174":"np.unique(list(data_clean.Seats))","85287e82":"data_clean.head()","b12ef0ef":"(data_clean.dtypes)","9420c3e3":"data_clean['Year'] = pd.Categorical(data_clean['Year'])\ndata_clean['Seats'] = pd.Categorical(data_clean['Seats'])","751504e8":"data_clean = pd.get_dummies(data_clean, prefix_sep='_', drop_first=True)","dcd5e115":"data_clean.head()","94d01a6a":"    fig, ax = plt.subplots(1,5, figsize=(18, 6))\n    ax[0].boxplot(list(data_clean.Kilometers_Driven))\n    ax[0].set_title(\"Kilometers Driven\")\n\n    ax[1].boxplot(data_clean.Mileage)\n    ax[1].set_title(\"Mileage\")\n\n    ax[2].boxplot(data_clean.Engine)\n    ax[2].set_title(\"Engine\")\n    \n    ax[3].boxplot(list(data_clean.Power))\n    ax[3].set_title(\"Power\")\n    \n    ax[4].boxplot(list(data_clean.Price))\n    ax[4].set_title(\"Price\")\n    \n    plt.show()","4fb4a9ff":"sns.pairplot(data=data_clean, x_vars=['Kilometers_Driven', 'Mileage', 'Engine', 'Power'], y_vars = 'Price', size=3)","a204dbee":"idx = []\nlt = list(data_clean[\"Kilometers_Driven\"])\nfor i in range(len(lt)):   \n    if( lt[i] > 1000000):\n        idx.append(i)\ndata_clean = data_clean.drop(idx)\ndata_clean = data_clean.reset_index(drop = True)","df061773":"sns.pairplot(data=data_clean, x_vars=['Kilometers_Driven', 'Mileage', 'Engine', 'Power'], y_vars = 'Price', size=3)","689c8955":"y = data_clean[[\"Price\"]].to_numpy()\ndata_clean = data_clean.drop(columns = [\"Price\"])","4c540c04":"x = data_clean.values\ncolumns = data_clean.columns\nmin_max_scaler = preprocessing.MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(x)\ndata_clean = pd.DataFrame(x_scaled)\ndata_clean.columns = columns","ec2de9f7":"X = data_clean.to_numpy()","d0feeaee":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.85, test_size=0.15, random_state=1)","778152d1":"lm = LinearRegression(fit_intercept=True, normalize=True, copy_X=True)\nlm.fit(X_train, y_train)\nprint('Training accuracy (the coefficient of determination): {:.3f}'.format(lm.score(X_train, y_train)))","cf7d1ab3":"prediction = lm.predict(X_test)","3ef12ccc":"print('Testing accuracy by using score function: {:.3f}'.format(lm.score(X_test, y_test)))\nprint('Testing accuracy by using r2_score meric: {:.3f}'.format(r2_score(y_test, lm.predict(X_test))))","a001aeb3":"mean_absolute_error(y_test, prediction)","39cf765a":"As you could see, now we have only 31 unique car makes.","9231bf58":"# Preprocess the data","892adc06":"As you can see Year and Seats columns are int64 type. Let's convert the columns to the categorical type.","719face3":"Let's investiage whether there exist any outliers in numerical data.","976bc96a":"We lost only a small number of rows, so let's proceed with a clean dataframe.","e7bb96a3":"As you can see, testing accuracy is very similar to training accuracy, so we could say that the model didn't overfit the training data. Let's use a more intuitive metric\u200a-\u200amean absolute error\u200a-\u200ato evaluate the performance of the model.","aa71222e":"First, let's create normalized training and test data","c28f96fa":"Now, let's fit the model and check accuracy on the training data.","2b5ab48b":"As you could see, there is a lot of NaN values in the column, so let's solve this problem easily - simply drop this column. It will (most likely) reduce a predictive power, but will make things way simplier. Also, we need to drop \"Unnamed: 0\" column, as it does not carry any additional and useful information.","7b35392e":"Let's try dropping all the rows with NaN values again and check the shape of the dataframe.","f385b28b":"There is one noticeable outlier, the one whire Kilimeters Drive is more than 6000000. Let's remove this value from the dataframe.","1aa3aada":"As you could see, we lost more than one sixth of rows because of NaN values in one or more columns. My intuition tells me that New_Price column is at fault, so let's check my assumption first.","02066e0f":"The next thing we should do is to remove non-numerical parts in Milage, Engine and Power columns.","dc9a9298":"# Linear Regression","d7ef8f81":"Let's check how dataframe will look without NaN values.","067a87d0":"Now we are ready to encode categorical data. First, we need to chech whether all data have a required data type.","f2011cac":"Now it seems that there is no more outliers, so we could start creating our model.","1b5dcb1e":"Looks that there is no typos in categorical data, so we could encde the data.","9e39a6a7":"As unique Name values make almost a third of all datapoints, let's drop a car model and keep only car make (Audi, BMW, etc.). It will help to avoid overfitting problem, meaning that our model won't rely too much on a Name of the car to make a prediction.","831a0d90":"Our model performs quite well. On average, it will misprice a car by around 2.74 INR Lakhs.\nThank you for reading!","5c3e57b2":"Let's now investigate values of categorical data. ","63017f90":"# Imports","617aa6ed":"The next step is to convert numerical data to numeric type and categorical data to categorical type. \nFirst, let's convert numerical data to numerical type.","1db7c9e3":"Let's now check the number of unique Name values.","419a7cd0":"# Data exploration","b50c690b":"As there are some \"null\" values in Power column, let's first delete all rows with all such values and convert Power column to numeric type afterwards.","8c31e767":"Now we could test the model on the test data.","7d90b16d":"Now we're ready to encode categorical values using get_dummies"}}