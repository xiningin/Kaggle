{"cell_type":{"538d59a2":"code","9bf6570a":"code","bc7779e7":"code","4073b255":"code","854fd312":"code","8b22a4cd":"code","53238c33":"code","37a0d4af":"code","395bdcc3":"code","6eb21a25":"code","ff66d2c5":"code","54924da0":"code","8ac53cf6":"code","b7ebac45":"code","449135f5":"code","93e8c738":"code","f484833d":"code","4b545425":"code","7bcb2b04":"code","b84ac534":"code","3cfdcd0a":"code","31c3d3c0":"code","d1c94920":"code","517c1696":"code","497105e6":"code","36844e0f":"code","5a035c36":"code","bc2b8807":"markdown","58b63c93":"markdown","1b5224c5":"markdown","db9105c5":"markdown","487bc8cc":"markdown","f95c1781":"markdown"},"source":{"538d59a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9bf6570a":"train = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv\")","bc7779e7":"train.head()\ntrain.shape","4073b255":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics: \n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max< np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","854fd312":"train = reduce_mem_usage(train)","8b22a4cd":"calendar = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv\")","53238c33":"calendar.head()","37a0d4af":"calendar = reduce_mem_usage(calendar)","395bdcc3":"import datetime as dt\ndate_index = calendar['date']\ndates = date_index[0:1913]\ndates_list = [dt.datetime.strptime(date, '%Y-%m-%d').date() for date in dates]","6eb21a25":"dates_list[:10]","ff66d2c5":"train['item_store_id'] = train.apply(lambda x: x['item_id']+'_'+x['store_id'],axis=1)\nDF_Sales = train.loc[:,'d_1':'d_1913'].T\nDF_Sales.columns = train['item_store_id'].values\nDF_Sales = pd.DataFrame(DF_Sales).set_index([dates_list])\nDF_Sales.index = pd.to_datetime(DF_Sales.index)\nDF_Sales.head()","54924da0":"for col in DF_Sales.columns[:5]:\n    y = pd.DataFrame(DF_Sales.loc[:,col])\n    y = pd.DataFrame(y).set_index([dates_list])\n    \n    y.index = pd.to_datetime(y.index)\n    \n    ax = y.plot(figsize=(30, 9),color='red')\n    ax.set_facecolor('lightgrey')\n    plt.xticks(fontsize=21 )\n    plt.yticks(fontsize=21 )\n    plt.legend(fontsize=20)\n    plt.title(label = 'Sales Demand Selected Time Series Over Time',fontsize = 23)\n    plt.ylabel(ylabel = 'Sales Demand',fontsize = 21)\n    plt.xlabel(xlabel = 'Date',fontsize = 21)\n    plt.show()\n    ","8ac53cf6":"from sklearn.preprocessing import MinMaxScaler","b7ebac45":"data = np.array(y)\nscaler = MinMaxScaler(feature_range=(0, 1))\ndataset = scaler.fit_transform(data.reshape(-1, 1))","449135f5":"dataset","93e8c738":"train_size = int(len(dataset) * 0.67)\ntest_size = len(dataset) - train_size\ntrain, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]\ntrain.shape,test.shape","f484833d":"def create_dataset(dataset, look_back=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-look_back-1):\n        a = dataset[i:(i+look_back), 0]\n        dataX.append(a)\n        dataY.append(dataset[i + look_back, 0])\n    return np.array(dataX), np.array(dataY)","4b545425":"X_train,y_train = create_dataset(train,28)","7bcb2b04":"X_test,y_test = create_dataset(test,28)","b84ac534":"trainX = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\ntestX = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))","3cfdcd0a":"trainX","31c3d3c0":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import GRU\nfrom tensorflow.keras.layers import Bidirectional\nfrom tensorflow.keras.layers import Conv1D","d1c94920":"model = Sequential()\nmodel.add(Conv1D(filters=32, kernel_size=5,\n                      strides=1, padding=\"causal\",\n                      activation=\"relu\",\n                      input_shape=[None, 1]))\nmodel.add(LSTM(512))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam',metrics=[\"mean_squared_error\"])\nmodel.fit(trainX, y_train, epochs=100,batch_size=1, verbose=2)","517c1696":"traning_pred = model.predict(trainX)","497105e6":"train_pred = pd.Series(scaler.inverse_transform(traning_pred).flatten())","36844e0f":"plt.figure(num=None, figsize=(19, 6), facecolor='w', edgecolor='k')\nplt.plot(train_pred)\nplt.plot(train)\nplt.legend([\"Predicted\",\"Real\"])","5a035c36":"test_pred = scaler.inverse_transform(model.predict(testX)).flatten()\nplt.figure(num=None, figsize=(19, 6), dpi=80, facecolor='w', edgecolor='k')\nplt.plot(test_pred)\nplt.plot(test)\nplt.legend([\"Predicted\",\"Real\"])","bc2b8807":"# **We will try to predict for one store for now**","58b63c93":"**Converting the date to datetime object and extracting all the dates in a list for further use**","1b5224c5":"# **Do upvote if you found it helpful.**","db9105c5":"**After looking at the 1st and 2nd graph I see some seasonality as there is increase in sales in the beginning of a new year, but this is not true for all of them for some reason**","487bc8cc":"**I Have Copied this code, but all it does is reduces the memory usage so that the ram doesn't blow up.**","f95c1781":"**This code converts the dataframe that we can use to forecast every shop.We only took the values and removed everything and then transposed it.**"}}