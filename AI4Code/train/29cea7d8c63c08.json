{"cell_type":{"9142efba":"code","bccff827":"code","75dd0ec2":"code","94abd36f":"code","bc12104b":"code","f6d29ac5":"code","6d4a71ac":"code","e66827f1":"code","94b8afc4":"code","5460bb4e":"code","beef634f":"code","92a74a91":"code","e7b7b2b0":"code","9697e4f5":"code","7f97a5da":"code","73ec9ed2":"code","6b93fb26":"code","1e68352f":"code","afdf4b84":"code","caea4ce0":"code","7ccbea01":"code","a3d3eb82":"code","fdb04656":"code","6b0c0ece":"code","d65f098c":"code","416bf861":"code","6ff84b9a":"code","19c2c2cd":"code","0fdc6999":"code","af779ecd":"code","ba389068":"code","80d7b322":"code","61fed698":"code","0f29d08e":"code","bddd4505":"code","49549c32":"code","08eee071":"code","7731fada":"code","cdc1e1a0":"code","0078d8a7":"code","06f38dfb":"code","07401b5d":"code","f15aa7b6":"code","5b14c4b7":"code","2baf34a9":"code","8716280c":"code","c8bfad6b":"code","0a27b25a":"code","a2df154f":"code","77dd416b":"code","1a51264c":"code","18ab8325":"code","4d8f63db":"code","768fc9fa":"code","f57517ec":"code","b0ad7e27":"code","05d2fb64":"code","51b09e09":"code","c9b35966":"code","f3c7d03d":"code","1908c05f":"code","db9a7f86":"code","25739d2a":"code","59e13519":"code","f702c68a":"code","75f027ef":"code","13703ff0":"code","209c1b9d":"code","298c0675":"code","6d91bab3":"code","e117c341":"code","59ea22fb":"code","82b03f71":"code","e6992a99":"code","11d3ed2c":"code","c54400b4":"code","d2e722eb":"code","80bece9b":"code","8f4cef46":"code","b5b36c86":"code","fda2ad2c":"code","b7cd744c":"code","1bffd14c":"code","ecd6bf03":"code","f7299afc":"code","9c75b772":"code","207e60a7":"code","9054afe1":"code","947b1bdc":"code","dabf94e9":"code","f93958b2":"code","1b88f8fd":"code","d74068ad":"code","ac7b7868":"code","6c9da37d":"code","8e214d4a":"code","dc2ce0ad":"code","0871a61c":"code","f969a91a":"markdown","da0506fc":"markdown","845f4a4f":"markdown","48c788a6":"markdown","b000536a":"markdown","057f1200":"markdown","2a3444c4":"markdown","2027f99d":"markdown","8223bd18":"markdown","7230f155":"markdown","1c388d58":"markdown","3f6cafb8":"markdown","31452aa7":"markdown","6a69579d":"markdown","c3114f5e":"markdown","ac889ff0":"markdown","6a1d65c9":"markdown","bf8c081d":"markdown","87076909":"markdown","51bee171":"markdown","8c757ae2":"markdown","fbd9ecfd":"markdown","f558f3c6":"markdown"},"source":{"9142efba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifierCV\nfrom sklearn.model_selection import KFold\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.model_selection import cross_val_score,GridSearchCV,ShuffleSplit\n\nimport numpy as np # linear algebra\nimport pandas as copycsv # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport missingno as msno\nimport plotly.express as px\n\nfrom mlxtend.classifier import StackingClassifier\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier\n\nfrom matplotlib import pyplot as plt\nimport scikitplot as skplt\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bccff827":"copycsv.set_option('display.max_rows', 500)\ncopycsv.set_option('display.max_columns', 500)\ncopycsv.set_option('display.width', 1000)","75dd0ec2":"cm = [\"#ee00ff\",\"#00b3ff\",\"#af05fa\",\"#6c04d7\",\"#0000ac\"]\ngradient = [\"#ee00ff\",\"#00b3ff\",\"#af05fa\",\"#6c04d7\",\"#0000ac\",\"#000180\",\"#00005a\",\"#000039\"]\nprint(\"Gradient from the picture for this notebook\")\nsns.palplot(gradient)","94abd36f":"path = \"\/kaggle\/input\/mymusicalprefrences\/\"\nmain_train = copycsv.read_csv(f\"{path}train.csv\").set_index(\"Id\", drop=True)\nmain_test = copycsv.read_csv(f\"{path}test.csv\").set_index(\"Id\", drop=True)\nraw = copycsv.concat([main_train, main_test], axis=0)\nraw.head(20).style.background_gradient(cmap='Purples')\nmain = raw.copy(deep=True)","bc12104b":"msno.bar(main, figsize=(20,5), color=cm)","f6d29ac5":"mainplot = main.copy(deep=True)\nmainplot[\"Category\"] = mainplot[\"Category\"].astype(str)\nplot = px.histogram(mainplot, x=\"Release_year\",color=\"Category\", color_discrete_sequence=cm)\nplot.show()","6d4a71ac":"main['2010-2021'] = 0\nmain.loc[(main[\"Release_year\"]>=2010),\"2010-2021\"] = 1\nmain[main[\"2010-2021\"] == 1].head(10).style.background_gradient(cmap=\"Purples\")","e66827f1":"main['2000-2010'] = 0\nmain.loc[(main[\"Release_year\"]<2010)&(main[\"Release_year\"]>=2000),\"2000-2010\"] = 1\nmain[main[\"2000-2010\"] == 1].head(10).style.background_gradient(cmap=\"Purples\")","94b8afc4":"main['1990-2000'] = 0\nmain.loc[(main[\"Release_year\"]<2000)&(main[\"Release_year\"]>=1990),\"1990-2000\"] = 1\nmain[main[\"1990-2000\"] == 1].head(10).style.background_gradient(cmap=\"Purples\")","5460bb4e":"main['1980-1990'] = 0\nmain.loc[(main[\"Release_year\"]<1990)&(main[\"Release_year\"]>=1980),\"1980-1990\"] = 1\nmain[main[\"1980-1990\"] == 1].head(10).style.background_gradient(cmap=\"Purples\")","beef634f":"main['-1980'] = 0\nmain.loc[(main[\"Release_year\"]<1980),\"-1980\"] = 1\nmain[main[\"-1980\"] == 1].head(10).style.background_gradient(cmap=\"Purples\")","92a74a91":"print(f'Liking coefficient for new music:\\t{len(main[(main[\"2010-2021\"]==1) & (main[\"Category\"]==0)])\/len(main[(main[\"2010-2021\"]==1) & (main[\"Category\"]==1)])}')\nprint(f'Liking coefficient for mid music:\\t{len(main[(main[\"2000-2010\"]==1) & (main[\"Category\"]==0)])\/len(main[(main[\"2000-2010\"]==1) & (main[\"Category\"]==1)])}')\nprint(f'Liking coefficient for old music:\\t{len(main[(main[\"1990-2000\"]==1) & (main[\"Category\"]==0)])\/len(main[(main[\"1990-2000\"]==1) & (main[\"Category\"]==1)])}')\nprint(f'Liking coefficient for new music:\\t{len(main[(main[\"1980-1990\"]==1) & (main[\"Category\"]==0)])\/len(main[(main[\"1980-1990\"]==1) & (main[\"Category\"]==1)])}')\nprint(f'Liking coefficient for mid music:\\t{len(main[(main[\"-1980\"]==1) & (main[\"Category\"]==0)])\/len(main[(main[\"-1980\"]==1) & (main[\"Category\"]==1)])}')","e7b7b2b0":"main = main.drop(\"Release_year\", axis=1)","9697e4f5":"mainplot = main.copy(deep=True)\nplot = px.scatter(main.astype(str), x=\"Key\",y=\"Track\", color= \"Category\", color_discrete_sequence=cm, size_max=6,width=1200, height=500)\nplot.show()","7f97a5da":"main.head(10).style.background_gradient(cmap=\"Purples\")","73ec9ed2":"main[\"Minor\"] = 0\nmain[\"MinorP\"] = main[\"Key\"].apply(lambda x: x.split(\" \")[1])\nmain[\"Key\"] = main[\"Key\"].apply(lambda x: x.split(\" \")[0])\nmain.loc[(main[\"MinorP\"]==\"Minor\"),\"Minor\"] = int(1)\nmain.head(10).style.background_gradient(cmap=\"Purples\")","6b93fb26":"mainplot = main.copy(deep=True)\nplot = px.scatter(main.astype(str), x=\"Key\",y=\"Track\", color= \"Category\", color_discrete_sequence=cm, size_max=6,width=1200, height=500)\nplot.show()","1e68352f":"main.loc[:,\"Key\"] = main[\"Key\"].replace({\"C#\":\"D\u266d\"})\nmainplot = main.copy(deep=True)\nplot = px.scatter(main.astype(str), x=\"Key\",y=\"Track\", color= \"Category\", color_discrete_sequence=cm, size_max=6,width=1200, height=500)\nplot.show()","afdf4b84":"Key = []\nfor i in main.index:\n    Key.extend(main.loc[i, \"Key\"].split('|'))\nKey_only = list(set(Key))\nKey_only","caea4ce0":"for i in Key_only:\n    main[i] = 0\nfor i in main.index:\n    if main.loc[i,\"Key\"] in Key_only:\n        main.loc[i,main.loc[i,\"Key\"]] = 1\nmain = main.drop(\"Key\", axis=1)\nmain = main.drop(\"MinorP\", axis=1)\nmain.head(10).style.background_gradient(cmap=\"Purples\")","7ccbea01":"mainplot = main.copy(deep=True)\nplot = px.scatter(main.astype(str), x=\"Artists_Genres\", color= \"Category\", color_discrete_sequence=cm, size_max=6,width=1200, height=500)\nplot.show()","a3d3eb82":"mainplot = main.copy(deep=True)\nmainplot[\"Category\"] = mainplot[\"Category\"].astype(str)\nplot = px.histogram(mainplot, x=\"Artists_Genres\",color=\"Category\", color_discrete_sequence=cm)\nplot.show()","fdb04656":"Artists_Genres=[]\nfor i in main.index:\n    Artists_Genres.extend(main.loc[i, \"Artists_Genres\"].split('|'))\nif \"\" in Artists_Genres:\n    Artists_Genres.remove(\"\")\nOnly_Genres = list(set(Artists_Genres))\nOnly_Genres","6b0c0ece":"Main_Genres = []\nOther_Genres = []\nfor i in Only_Genres:\n    print(f'{i} - {Artists_Genres.count(i)}')\n    if Artists_Genres.count(i) > 3: \n        Main_Genres.append(i)\n    else:\n        Other_Genres.append(i)","d65f098c":"Main_Genres","416bf861":"Other_Genres","6ff84b9a":"main[\"Other Genres\"] = 0\nfor i in Main_Genres:\n    main[i] = 0\nfor i in main.index:\n    for k in main.loc[i,\"Artists_Genres\"].split(\"|\"):\n        if k in Main_Genres:\n            main.loc[i,k] = 1\n        if k in Other_Genres:\n            main.loc[i,\"Other Genres\"] = 1\nmain = main.drop(\"Artists_Genres\", axis=1)\nmain.head(10).style.background_gradient(cmap=\"Purples\")","19c2c2cd":"mainplot = main.copy(deep=True)\nmainplot[\"Category\"] = mainplot[\"Category\"].astype(str)\nplot = px.histogram(mainplot, x=\"Artists\",color=\"Category\", color_discrete_sequence=cm)\nplot.show()","0fdc6999":"main[main[\"Artists\"].isna()]","af779ecd":"main[\"Artists\"] = main[\"Artists\"].fillna(\"N\\A\")\nArtists=[]\nfor i in main.index:\n    Artists.extend(main.loc[i, \"Artists\"].split('|'))\nif \"\" in Artists:\n    Artists.remove(\"\")\nArtists_only = list(set(Artists))\nArtists_only","ba389068":"Main_Artists = []\nOther_Artists = []\nfor i in Artists_only:\n    #print(f'{i} - {Artists.count(i)}')\n    if Artists.count(i) > 3: \n        Main_Artists.append(i)\n    else:\n        Other_Artists.append(i)","80d7b322":"print(f'Number of common Artists at this table - {len(Main_Artists)}')\nprint(f'Number of rare Artists at this table- {len(Other_Artists)}')\nprint(f'Number of all Artists at this table - {len(Artists_only)}')","61fed698":"main[\"Other Artists\"] = 0\nfor i in Main_Artists:\n    main[i] = 0\nfor i in main.index:\n    for k in main.loc[i,\"Artists\"].split(\"|\"):\n        if k in Main_Artists:\n            main.loc[i,k] = 1\n        if k in Other_Artists:\n            main.loc[i,\"Other Artists\"] = 1\nmain = main.drop(\"Artists\", axis=1)\nmain.head(10).style.background_gradient(cmap=\"Purples\")","0f29d08e":"mainplot = main.copy(deep=True)\nmainplot[\"Category\"] = mainplot[\"Category\"].astype(str)\nplot = px.histogram(mainplot, x=\"Album\",color=\"Category\", color_discrete_sequence=cm)\nplot.show()","bddd4505":"main[main[\"Album\"].isna()]","49549c32":"#main.loc[501,\"Album\"] = \"Ready to Die\"\n#main.loc[501,\"Album_type\"] = \"single\"","08eee071":"#ain.loc[250,\"Album\"] = \"Smash\"\n#main.loc[250,\"Labels\"] = \"Mercury\"\nmain[\"Labels\"] = main[\"Labels\"].fillna(\"N\/A\")\nmain[\"Album\"] = main[\"Album\"].fillna(\"N\/A\")\nmain[\"Album_type\"] = main[\"Album_type\"].fillna(\"N\/A\")","7731fada":"#main.loc[250]","cdc1e1a0":"#main.loc[501]","0078d8a7":"Albums=[]\nfor i in main.index:\n    Albums.extend(main.loc[i, \"Album\"].split('|'))\nAlbums_only = list(set(Albums))\nAlbums_only.remove(\"N\/A\")\n#Albums_only","06f38dfb":"Main_Albums = []\nOther_Albums = []\nfor i in Albums_only:\n    #print(f'{i} - {Albums.count(i)}')\n    if Albums.count(i) > 3: \n        Main_Albums.append(i)\n    else:\n        Other_Albums.append(i)","07401b5d":"print(f'Number of common Albums at this table - {len(Main_Albums)}')\nprint(f'Number of rare Albums at this table- {len(Other_Albums)}')\nprint(f'Number of all Albums at this table - {len(Albums_only)}')","f15aa7b6":"main[\"Other Albums\"] = 0\nfor i in Main_Albums:\n    main[i] = 0\nfor i in main.index:\n    for k in main.loc[i,\"Album\"].split(\"|\"):\n        if k in Main_Albums:\n            main.loc[i,k] = 1\n        if k in Other_Albums:\n            main.loc[i,\"Other Albums\"] = 1\nmain = main.drop(\"Album\", axis=1)\nmain.head(10).style.background_gradient(cmap=\"Purples\")","5b14c4b7":"mainplot = main.copy(deep=True)\nmainplot[\"Category\"] = mainplot[\"Category\"].astype(str)\nplot = px.histogram(mainplot, x=\"Labels\",color=\"Category\", color_discrete_sequence=cm)\nplot.show()","2baf34a9":"main[main[\"Labels\"].isna()]","8716280c":"#main.loc[85,\"Labels\"] = \"Universal Music\/Island\"\n#main.loc[195,\"Labels\"] = \"Buddhist Punk\"\n#main.loc[501,\"Labels\"] = \"Bad Boy|Arista\"\n#main.loc[508,\"Labels\"] = \"Playground Music\"\n#main.loc[770,\"Labels\"] = \"Parlophone\"\nmain[\"Labels\"] = main[\"Labels\"].fillna(\"N\/A\")","c8bfad6b":"Labels=[]\nfor i in main.index:\n    Labels.extend(main.loc[i, \"Labels\"].split('|'))\nLabels_only = list(set(Labels))\nLabels_only.remove(\"N\/A\")\nLabels_only","0a27b25a":"Main_Labels = []\nOther_Labels = []\nfor i in Labels_only:\n    #print(f'{i} - {Labels.count(i)}')\n    if Labels.count(i) > 3: \n        Main_Labels.append(i)\n    else:\n        Other_Labels.append(i)","a2df154f":"print(f'Number of common Labels at this table - {len(Main_Labels)}')\nprint(f'Number of rare Labels at this table- {len(Other_Labels)}')\nprint(f'Number of all Labels at this table - {len(Labels_only)}')","77dd416b":"main[\"Other Labels\"] = 0\nfor i in Main_Labels:\n    main[i] = 0\nfor i in main.index:\n    for k in main.loc[i,\"Labels\"].split(\"|\"):\n        if k in Main_Labels:\n            main.loc[i,k] = 1\n        if k in Other_Labels:\n            main.loc[i,\"Other Labels\"] = 1\nmain = main.drop(\"Labels\", axis=1)\nmain.head(10).style.background_gradient(cmap=\"Purples\")","1a51264c":"mainplot = main.copy(deep=True)\nmainplot[\"Category\"] = mainplot[\"Category\"].astype(str)\nplot = px.histogram(mainplot, x=\"Version\",color=\"Category\", color_discrete_sequence=cm)\nplot.show()","18ab8325":"main[\"Version\"] = main[\"Version\"].fillna(\"N\/A\")\n\nVersion=[]\nfor i in main.index:\n    Version.extend(main.loc[i, \"Version\"].split('|'))\nVersion_only = list(set(Version))\nVersion_only.remove(\"N\/A\")\nVersion_only","4d8f63db":"for i in Version_only:\n    main[i] = 0\nfor i in main.index:\n    if main.loc[i,\"Version\"] in Version_only:\n        main.loc[i,main.loc[i,\"Version\"]] = 1\nmain = main.drop(\"Version\", axis=1)\nmain.head(10).style.background_gradient(cmap=\"Purples\")","768fc9fa":"mainplot = main.copy(deep=True)\nmainplot[\"Category\"] = mainplot[\"Category\"].astype(str)\nplot = px.histogram(mainplot, x=\"Album_type\",color=\"Category\", color_discrete_sequence=cm)\nplot.show()","f57517ec":"main[\"Album_type\"] = main[\"Album_type\"].fillna(\"N\/A\")\n\nAlbum_type=[]\nfor i in main.index:\n    Album_type.extend(main.loc[i, \"Album_type\"].split('|'))\nAlbum_type_only = list(set(Album_type))\nAlbum_type_only.remove(\"N\/A\")\nAlbum_type_only","b0ad7e27":"for i in Album_type_only:\n    main[i] = 0\nfor i in main.index:\n    if main.loc[i,\"Album_type\"] in Album_type_only:\n        main.loc[i,main.loc[i,\"Album_type\"]] = 1\nmain = main.drop(\"Album_type\", axis=1)\nmain.head(10).style.background_gradient(cmap=\"Purples\")","05d2fb64":"mainplot = main.copy(deep=True)\nmainplot[\"Category\"] = mainplot[\"Category\"].astype(str)\nplot = px.histogram(mainplot, x=\"Vocal \",color=\"Category\", color_discrete_sequence=cm)\nplot.show()","51b09e09":"main[main[\"Vocal \"].isna()]","c9b35966":"#main.loc[737,\"Vocal \"] = \"M\"\nmain[\"Vocal \"] = main[\"Vocal \"].fillna(\"N\/A\")\n\nVocal=[]\nfor i in main.index:\n    Vocal.extend(main.loc[i, \"Vocal \"].split('|'))\nVocal_only = list(set(Vocal))\nVocal_only.remove(\"N\/A\")\nVocal_only","f3c7d03d":"main[\"Male\"] = 0\nmain[\"Female\"] = 0\nmain[\"N\"] = 0\nfor i in main.index:\n    for k in main.loc[i,\"Vocal \"].split(\"|\"):\n        if k in Vocal_only:\n            if k == \"M\":\n                main.loc[i,\"Male\"] = 1\n            if k == \"F\":\n                main.loc[i,\"Female\"] = 1\n            if k == \"N\":\n                main.loc[i,\"N\"] = 1","1908c05f":"main.head(20).style.background_gradient(cmap=\"Purples\")","db9a7f86":"main = main.drop(\"Vocal \", axis=1)","25739d2a":"mainplot = main.copy(deep=True)\nmainplot[\"Category\"] = mainplot[\"Category\"].astype(str)\nplot = px.histogram(mainplot, x=\"Country\",color=\"Category\", color_discrete_sequence=cm)\nplot.show()","59e13519":"main[main[\"Country\"].isna()]","f702c68a":"main.loc[main[\"Country\"].isna(),\"Country\"] = 'N\/A'\nCountry=[]\nfor i in main.index:\n    Country.extend(main.loc[i, \"Country\"].split('|'))\nCountry_only = list(set(Country))\nCountry_only.remove(\"N\/A\")\nCountry_only","75f027ef":"Main_Countries = []\nOther_Countries = []\nfor i in Country_only:\n    print(f'{i} - {Country.count(i)}')\n    if Country.count(i) > 3: \n        Main_Countries.append(i)\n    else:\n        Other_Countries.append(i)","13703ff0":"print(f'Number of common Country at this table - {len(Main_Countries)}')\nprint(f'Number of rare Country at this table- {len(Other_Countries)}')\nprint(f'Number of all Country at this table - {len(Country_only)}')","209c1b9d":"main[\"Other Countries\"] = 0\nfor i in Main_Countries:\n    main[i] = 0\nfor i in main.index:\n    for k in main.loc[i,\"Country\"].split(\"|\"):\n        if k in Main_Countries:\n            main.loc[i,k] = 1\n        if k in Other_Countries:\n            main.loc[i,\"Other Countries\"] = 1\nmain = main.drop(\"Country\", axis=1)\nmain.head(10).style.background_gradient(cmap=\"Purples\")","298c0675":"raw.head(10).style.background_gradient(cmap=\"Purples\")","6d91bab3":"main[main[\"Happiness\"].isna()]","e117c341":"main[(main[\"Minor\"]==1)&(main[\"B\u266d\"]==1)][\"Energy\"].median()\nmain.loc[661,\"Energy\"] = main[(main[\"Minor\"]==1)&(main[\"B\u266d\"]==1)][\"Energy\"].median()","59ea22fb":"main[(main[\"Minor\"]==1)&(main[\"B\u266d\"]==1)][\"Dancebility\"].median()\nmain.loc[661,\"Dancebility\"] = main[(main[\"Minor\"]==1)&(main[\"B\u266d\"]==1)][\"Dancebility\"].median()","82b03f71":"main[(main[\"Minor\"]==1)&(main[\"B\u266d\"]==1)][\"Happiness\"].median()\nmain.loc[661,\"Happiness\"] = main[(main[\"Minor\"]==1)&(main[\"B\u266d\"]==1)][\"Happiness\"].median()","e6992a99":"model_ML = main.copy(deep=True)\nmodel_ML = model_ML.drop(\"Track\", axis=1)\ntrain = model_ML[~model_ML[\"Category\"].isna()]\ncheck = model_ML[model_ML[\"Category\"].isna()]\ncheck = check.drop(\"Category\", axis=1)\ntrain.loc[:,\"Category\"] = train.loc[:,\"Category\"].astype(bool)\nx_lab = train.drop(\"Category\", axis=1)\ny_feat = train[\"Category\"].astype(int)\nmodel_ML.head(10).style.background_gradient(cmap=\"Purples\")","11d3ed2c":"tuned_parametersCatBoostClassifier = {\"learning_rate\" : [0.007, 0.008, 0.009],\"l2_leaf_reg\":[1,3,5],\"iterations\":[900,1000]}","c54400b4":"model = {}\naccuracy = {}\ncrval = ShuffleSplit(n_splits=5)\ncatboostGrid = GridSearchCV(CatBoostClassifier(**{\"rsm\":0.1,\"verbose\":False, \"random_state\":0}), tuned_parametersCatBoostClassifier, cv=crval)\nmodel[\"CatBoostClassifier\"] = catboostGrid\nmodel[\"CatBoostClassifier\"].fit(x_lab,y_feat, early_stopping_rounds=500)\ny_feat_N = model[\"CatBoostClassifier\"].predict(x_lab)\naccuracy[\"CatBoostClassifier\"] = accuracy_score(y_feat,y_feat_N)\nfile = copycsv.DataFrame(model[\"CatBoostClassifier\"].predict(check), index= check.index,columns = [\"Category\"]).astype(int)\nfile.to_csv(f'CatBoostClassifier.csv')","d2e722eb":"count = 0\nfor k in model[\"CatBoostClassifier\"].cv_results_[\"mean_test_score\"]:\n    count = count + 1\n    print(f\"{count}:\\t{k}\")","80bece9b":"count = 0\nfor k in model[\"CatBoostClassifier\"].cv_results_[\"params\"]:\n    count = count + 1\n    print(f\"{count}:\\t{k}\")","8f4cef46":"print(model[\"CatBoostClassifier\"].best_params_)\nprint({accuracy[\"CatBoostClassifier\"]})","b5b36c86":"kfold_model = model_ML.copy(deep=True)\nkf = KFold(n_splits=5, shuffle=True)\nclassifiers = []\nclassifiers1 = []\nfor kfold_train, kfold_test in kf.split(train): \n    table_train_kfold = kfold_model.loc[kfold_train]\n    table_test_kfold = kfold_model.loc[kfold_test]\n    x_train_split = table_train_kfold.drop(\"Category\", axis=1)\n    y_train_split = table_train_kfold[\"Category\"].astype(int)\n    x_test_split = table_test_kfold.drop(\"Category\", axis=1)\n    y_test_split = table_test_kfold[\"Category\"].astype(int)\n    clf = CatBoostClassifier(**{\"rsm\":0.1, \"learning_rate\":0.01,\"iterations\":800,\"l2_leaf_reg\":5,\"verbose\":False,\"random_state\":0})\n    clf.fit(x_train_split, y_train_split, eval_set=(x_test_split, y_test_split), use_best_model=True, early_stopping_rounds=500)\n    clf1 = CatBoostClassifier(**{\"rsm\":0.1, \"learning_rate\":0.008,\"iterations\":1000,\"l2_leaf_reg\":3,\"verbose\":False,\"random_state\":0})\n    clf1.fit(x_train_split, y_train_split, eval_set=(x_test_split, y_test_split), use_best_model=True, early_stopping_rounds=500)\n    # \u043f\u043e\u043b\u0443\u0447\u0438\u043c 5 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432\n    classifiers.append(clf)\n    classifiers1.append(clf1)","fda2ad2c":"i = 0\nprint(\"1 - KFold\")\nfor kfold_model in classifiers:\n    i += 1\n    model[f\"CatBoostClassifier_Kfold_{i}\"] = kfold_model\n    y_feat_N = model[f\"CatBoostClassifier_Kfold_{i}\"].predict(x_lab)\n    accuracy[f\"CatBoostClassifier_Kfold_{i}\"] = accuracy_score(y_feat,y_feat_N)\n    file = copycsv.DataFrame(model[f\"CatBoostClassifier_Kfold_{i}\"].predict(check), index= check.index,columns = [\"Category\"]).astype(int)\n    file.to_csv(f\"CatBoostClassifier_Kfold_{i}.csv\")\n    print(f\"{i} - {kfold_model}\")\ni = 0\nprint(\"2 - KFold\")\nfor kfold_model in classifiers1:\n    i += 1\n    model[f\"CatBoostClassifier_Kfold_2.{i}\"] = kfold_model\n    y_feat_N = model[f\"CatBoostClassifier_Kfold_2.{i}\"].predict(x_lab)\n    accuracy[f\"CatBoostClassifier_Kfold_2.{i}\"] = accuracy_score(y_feat,y_feat_N)\n    file = copycsv.DataFrame(model[f\"CatBoostClassifier_Kfold_2.{i}\"].predict(check), index= check.index,columns = [\"Category\"]).astype(int)\n    file.to_csv(f\"CatBoostClassifier_Kfold_2.{i}.csv\")\n    print(f\"2.{i} - {kfold_model}\")","b7cd744c":"tuned_parametersLogisticRegression = [\n    {\"penalty\":['l1'],'max_iter': [900],\"solver\": ['liblinear'],\"C\":[1, 2.5, 3, 5]},\n    {\"penalty\":['l2'],'max_iter': [900],\"solver\": ['lbfgs'],\"C\":[1, 2.5, 3, 5]},\n    {\"penalty\":['l2'],'max_iter': [900],\"solver\": ['liblinear'],\"C\":[1, 2.5, 3, 5]},\n]","1bffd14c":"crval = ShuffleSplit(n_splits=5)\nLogisticRegressionGrid = GridSearchCV(LogisticRegression(**{\"random_state\":0}), tuned_parametersLogisticRegression, cv=crval)\nmodel[\"LogisticRegression\"] = LogisticRegressionGrid\nmodel[\"LogisticRegression\"].fit(x_lab,y_feat)\ny_feat_N = model[\"LogisticRegression\"].predict(x_lab)\naccuracy[\"LogisticRegression\"] = accuracy_score(y_feat,y_feat_N)\nfile = copycsv.DataFrame(model[\"LogisticRegression\"].predict(check), index= check.index,columns = [\"Category\"]).astype(int)\nfile.to_csv(f'LogisticRegression.csv')","ecd6bf03":"count = 0\nfor k in model[\"LogisticRegression\"].cv_results_[\"mean_test_score\"]:\n    count = count + 1\n    print(f\"{count}:\\t{k}\")","f7299afc":"count = 0\nfor k in model[\"LogisticRegression\"].cv_results_[\"params\"]:\n    count = count + 1\n    print(f\"{count}:\\t{k}\")","9c75b772":"print(model[\"LogisticRegression\"].best_params_)\nprint({accuracy[\"LogisticRegression\"]})","207e60a7":"tuned_parametersXGBClassifier = [\n    {\"eta\":[0.3, 0.5],\"gamma\":[0,3,5,7],\"max_depth\":[5,6,7],'subsample':[0.5],'max_delta_step':[0],\"lambda\":[0.1,0.3],\"alpha\":[10]},\n    #{\"rsm\":0.1, \"learning_rate\":0.005,\"iterations\":500,\"l2_leaf_reg\":5},\n]","9054afe1":"crval = ShuffleSplit(n_splits=5)\nXGBClassifierGrid = GridSearchCV(XGBClassifier(**{'verbosity':0, 'use_label_encoder':False,\"random_state\":0}), tuned_parametersXGBClassifier, cv=crval)\nmodel[\"XGBClassifier\"] = XGBClassifierGrid\nmodel[\"XGBClassifier\"].fit(x_lab,y_feat)\ny_feat_N = model[\"XGBClassifier\"].predict(x_lab)\naccuracy[\"XGBClassifier\"] = accuracy_score(y_feat,y_feat_N)\nfile = copycsv.DataFrame(model[\"XGBClassifier\"].predict(check), index= check.index,columns = [\"Category\"]).astype(int)\nfile.to_csv(f'XGBClassifier.csv')","947b1bdc":"count = 0\nfor k in model[\"XGBClassifier\"].cv_results_[\"mean_test_score\"]:\n    count = count + 1\n    print(f\"{count}:\\t{k}\")","dabf94e9":"count = 0\nfor k in model[\"XGBClassifier\"].cv_results_[\"params\"]:\n    count = count + 1\n    print(f\"{count}:\\t{k}\")","f93958b2":"print(model[\"XGBClassifier\"].best_params_)\nprint({accuracy[\"XGBClassifier\"]})","1b88f8fd":"print(\"Accuracy on the training set:\")\nfor k in accuracy:\n    print(f\"{k}\\t:\\t{accuracy[k]}\")","d74068ad":"fig = plt.figure(figsize=(35,10))\ncount=1\nfor k in model:\n    ax = fig.add_subplot(1,len(model),count)\n    count+=1\n    skplt.metrics.plot_confusion_matrix(y_feat, model[k].predict(x_lab), normalize=True, figsize=(5,5),ax=ax, cmap=\"Purples\")\n    ax.set_title(k)\nplt.show()","ac7b7868":"classifiers1.append(model[\"LogisticRegression\"])\n#classifiers1.append(model[\"XGBClassifier\"])","6c9da37d":"model[\"Ensemble\"] = StackingClassifier(classifiers = classifiers1, meta_classifier=LogisticRegression(**{\"penalty\":\"l1\",\"solver\": \"liblinear\",\"C\":5,}), use_features_in_secondary=True) \n#model[\"Ensemble\"] =  model[f\"LogisticRegression\"] \n#model[\"Ensemble\"] =  model[f\"XGBClassifier\"] \nmodel[\"Ensemble\"].fit(x_lab,y_feat)\ny_feat_N = model[\"Ensemble\"].predict(x_lab)\naccuracy[\"Ensemble\"] = accuracy_score(y_feat,y_feat_N)\nfile = copycsv.DataFrame(model[\"Ensemble\"].predict(check), index= check.index,columns = [\"Category\"]).astype(int)\nfile.to_csv(f'Ensemble.csv')","8e214d4a":"print(f\"Ensemble\\t:\\t{accuracy['Ensemble']}\")","dc2ce0ad":"fig = plt.figure(figsize=(35,10))\nskplt.metrics.plot_confusion_matrix(y_feat, model['Ensemble'].predict(x_lab), normalize=True, figsize=(5,5), cmap=\"Purples\")\nplt.show()","0871a61c":"file = copycsv.DataFrame(model['Ensemble'].predict(check), index= check.index,columns = [\"Category\"]).astype(int)\nfile.to_csv(f'submission.csv')","f969a91a":"# **2 Building models:**","da0506fc":"**Split the Artists feature:**","845f4a4f":"Fill \"Album\" and \"Album_type\" feature from the Wikipedia:\n\nid 501 - https:\/\/ru.wikipedia.org\/wiki\/Big_Poppa\n\nid 250 - https:\/\/en.wikipedia.org\/wiki\/Hello_(Martin_Solveig_and_Dragonette_song)","48c788a6":"**Let's analyze the eras of music:**\n","b000536a":"*Select all genres:*","057f1200":"\"Version\" feature:","2a3444c4":"**CatBoostClassifier with using GridSearchCV and ShuffleSplit:**","2027f99d":"\"Album_type\" feature:","8223bd18":"**Final accuracy of models:**","7230f155":"Fill \"Labels\" feature from the Wikipedia:\n\nid 85 - https:\/\/en.wikipedia.org\/wiki\/Tonight_(Reamonn_song)\n\nid 195 - https:\/\/en.wikipedia.org\/wiki\/Big_City_Life\n\nid 501 - https:\/\/ru.wikipedia.org\/wiki\/Big_Poppa\n\nid 508 - https:\/\/ru.wikipedia.org\/wiki\/In_the_Shadows\n\nid 770 - https:\/\/ru.wikipedia.org\/wiki\/Feel_Good_Inc.","1c388d58":"**Split the \"Version\", \"Album_type\", \"Vocal\" features:**","3f6cafb8":"**LogisticRegression with using GridSearchCV and ShuffleSplit:**","31452aa7":"\"Vocal\" feature:","6a69579d":"**Split the key feature:**\n","c3114f5e":"**XGBClassifier with using GridSearchCV and ShuffleSplit:**","ac889ff0":" # **1. Explorational Data Analysis**","6a1d65c9":"Set the parameters by cross-validation:","bf8c081d":"**Split the Album feature:**","87076909":"**CatBoostClassifier with using KFold:**","51bee171":"With the help of \"https:\/\/www.youtube.com\/watch?v=3Q9rewnLFYw\", we can understand that the vocal of this track is \"M\".","8c757ae2":"**Split the \"Country\" feature:**","fbd9ecfd":"**Let's analyze the genres features:**","f558f3c6":"**Split the Labels feature:**"}}