{"cell_type":{"24a44369":"code","673cefc0":"code","eb17f980":"code","8e678a34":"code","1d50dfd9":"code","3df2f6c8":"markdown","cc1bc4d0":"markdown","1c22216b":"markdown","f1a9919b":"markdown","f7a9941e":"markdown"},"source":{"24a44369":"import matplotlib.pyplot as plt\nimport networkx as nx\nimport pandas as pd","673cefc0":"## Small dataset with networkx\nNetxG=nx.Graph()\nNetxG.add_nodes_from([\"Alice\", \"Bob\", \"Claire\", \"Dennis\", \"Esther\", \"Frank\", \"George\"])\n#NetxG.add_edge(2, 3)\nNetxG.add_edges_from([(\"Alice\",\"Bob\"),(\"Alice\",\"Claire\"),(\"Claire\",\"Dennis\")\n        ,(\"Dennis\",\"Claire\"),(\"Alice\",\"Frank\"),(\"George\",\"Frank\"),(\"Esther\",\"Frank\")])\n#print(list(NetxG.nodes))\n#print(list(NetxG.edges))\nnx.draw(NetxG,with_labels=True) ","eb17f980":"# Larger data preperation - SNA of Trump's Person-Person Edge List\n# Edgelist & Adjacency list is created by myself with the dataset above\ndf1=pd.read_csv(\"..\/input\/Person_Person.csv\",encoding = \"ISO-8859-1\")\np_a=df1['Person A']\np_b=df1['Person B']\ndf2=pd.concat([p_a,p_b],axis=0)    \ndf2_l=df2.values.tolist() # To count the frequency of names\n# Filter vertices - each one must know 2 or more people\noutput = [] # Get unique values \nfor x in p_a:\n    if x not in output:\n        output.append(x)\nfor x in p_b:\n    if x not in output:\n        output.append(x)\n#print (output)\ndf3=pd.DataFrame(output)\ncnt=[]\nfor x in output:\n    cnt.append(df2_l.count(x))\ndf3['cnt']=cnt # Add a new column of frequency of the names\ndf4=df3\ndf4=df4.drop(df3[df3.cnt>1].index) # Get the list the vertices with only 1 target\ndf4_l=df4[0].values.tolist()# list the vertices with only 1 target\n# Drop the names who only know one person\nfor x in df4_l:\n    df1=df1[~df1['Person A'].str.contains(x)]\n    df1=df1[~df1['Person B'].str.contains(x)]\np_a1=df1['Person A'].values.tolist()\np_b1=df1['Person B'].values.tolist()\noutput2 = [] # Get unique values again\nfor x in p_a1:\n    if x not in output2:\n        output2.append(x)\nfor x in p_b1:\n    if x not in output2:\n        output2.append(x)\n# The number of viterces has been reduced from 232 to 89","8e678a34":"## networkx - edgelist\nl=list(zip(p_a1,p_b1)) # EDGELIST\nNetxG1 = nx.Graph()\nNetxG1.add_nodes_from(output2)\nNetxG1.add_edges_from(l)\n#print(list(NetxG1.nodes))\n#print(list(NetxG1.edges))\nplt.figure(figsize=(20,20)) \nnx.draw(NetxG1,with_labels=True)\nplt.show()","1d50dfd9":"## networkx - weighted edges & arrows\nweights=[]\nfor x in range(len(p_a1)):\n    m=df3.loc[df3[0] == p_a1[x],'cnt'].iloc[0]\n    n=df3.loc[df3[0] == p_b1[x],'cnt'].iloc[0]\n    mn=0.05*m\/10*n\n    weights.append(mn)\nweighted_eg=[]\nfor i in range(len(l)): # Create a weighted edge list\n    weighted_eg.append([l[i][0],l[i][1],weights[i]])\nNetxG3=nx.DiGraph()\nNetxG3.add_weighted_edges_from(weighted_eg)\nplt.figure(figsize=(30,30)) \nnx.draw(NetxG3,with_labels=True,width=weights,arrowsize=20)\nplt.show()","3df2f6c8":"Also we can add weights and arrows to the edges to make it a direted network plot.","cc1bc4d0":"Make sure that NetworkX works with a small dataset with only few nodes and edges.","1c22216b":"There were so many people only appear once and making it relatively harder to interprete the plots, so I dropped those names because the whole idea of this script was to practice building network plots with NetworkX. Hence I created the following cell to do that job.","f1a9919b":"**Introduction:**\n\nThis script helps create network plots based on the \"Person to Person\" dataset with NetworkX.","f7a9941e":"Here with the edgelist I created, the most basic network plot can be done. "}}