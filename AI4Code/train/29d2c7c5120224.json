{"cell_type":{"c9adec3b":"code","48dbc33d":"code","5a965a8a":"code","afdd9666":"code","13102501":"code","8a28e2a0":"code","a1e166ab":"code","8434e3ef":"code","ae26064a":"code","12ef9e44":"code","695ce98a":"code","8e934651":"code","02ab2578":"code","e14bfb02":"code","ff451cbc":"code","e9ae34f7":"code","f2de693a":"code","c1d3abff":"code","8042080c":"code","439e33d5":"code","872cbe93":"code","65e82353":"code","7850fdb6":"code","5950508d":"code","92ebde0c":"code","591df422":"code","79a704bc":"code","b74e2b4a":"code","2728e6f1":"code","290ba18f":"code","c4489cb5":"code","fb0def3e":"code","fb0481d4":"code","8711b3fd":"code","bf638b4c":"code","ab97bd42":"code","bc11350b":"markdown","44906f3f":"markdown","868c1157":"markdown","f967841d":"markdown","27f9239d":"markdown","1f79e1d0":"markdown","b434dbc5":"markdown","9b4e3f67":"markdown","dfe1acd9":"markdown","f75f5bc7":"markdown","c94dca74":"markdown","3f29f8ca":"markdown","fc6d7986":"markdown"},"source":{"c9adec3b":"import numpy as np \nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(\"ignore\")","48dbc33d":"train_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv\")","5a965a8a":"train_df.head()","afdd9666":"test_df.head()","13102501":"train_df.info()","8a28e2a0":"test_df.info()","a1e166ab":"train_df.describe()","8434e3ef":"test_df.describe()","ae26064a":"def plot_count(feature, title, df, size=1):\n    '''\n    Plot count of classes \/ feature\n    param: feature - the feature to analyze\n    param: title - title to add to the graph\n    param: df - dataframe from which we plot feature's classes distribution \n    param: size - default 1.\n    '''\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:30], palette='Set1')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()  ","12ef9e44":"train_df.columns","695ce98a":"plot_count('Survived', 'Survived', train_df, 1.5)","8e934651":"plot_count('Pclass', 'Pclass - Train', train_df, 1.5)\nplot_count('Pclass', 'Pclass - Test', test_df, 1.5)","02ab2578":"plot_count('Sex', 'Sex - Train', train_df, 1.5)\nplot_count('Sex', 'Sex - Test', test_df, 1.5)","e14bfb02":"plot_count('SibSp', 'SibSp - Train', train_df, 3)\nplot_count('SibSp', 'SibSp - Test', test_df, 3)","ff451cbc":"plot_count('Parch', 'Parch - Train', train_df, 3)\nplot_count('Parch', 'Parch - Test', test_df, 3)","e9ae34f7":"plot_count('Embarked', 'Embarked - Train', train_df, 2)\nplot_count('Embarked', 'Embarked - Test', test_df, 2)","f2de693a":"def plot_feature_distribution(data_df, feature, feature2, title, kde_mode=False, hist_mode=True, log=False):\n    f, ax = plt.subplots(1,1, figsize=(12,6))\n    for item in list(data_df[feature2].unique()):\n        d_df = data_df.loc[data_df[feature2]==item]\n        try:\n            if log:\n                sns.distplot(np.log1p(d_df[feature]), kde=kde_mode, hist=hist_mode, label=item)\n            else:\n                sns.distplot(d_df[feature], kde=kde_mode, hist=hist_mode, label=item)\n        except:\n            pass\n    plt.legend(labels=list(data_df[feature2].unique()), bbox_to_anchor=(1, 1), loc='upper right', ncol=2)\n    plt.title(title)\n    plt.show()","c1d3abff":"plot_feature_distribution(train_df, 'Age', 'Sex', 'Age distribution, grouped by Sex (Train)')","8042080c":"plot_feature_distribution(test_df, 'Age', 'Sex', 'Age distribution, grouped by Sex (Test)')","439e33d5":"plot_feature_distribution(train_df, 'Fare', 'Pclass', 'Fare distribution (log), grouped by Pclass (Train)',log=True)","872cbe93":"plot_feature_distribution(test_df, 'Fare', 'Pclass', 'Fare distribution (log), grouped by Pclass (Test)',log=True)","65e82353":"plt.figure(figsize = (12,12))\nplt.title('Features correlation plot (Pearson)')\ncorr = train_df.corr()\nsns.heatmap(corr,xticklabels=corr.columns,yticklabels=corr.columns,linewidths=.1,cmap=\"rainbow\")\nplt.show()","7850fdb6":"train_df['Age'].fillna(train_df['Age'].mean(), inplace=True)\ntest_df['Age'].fillna(test_df['Age'].mean(), inplace=True)\ntrain_df['Fare'].fillna(train_df['Fare'].mean(), inplace=True)\ntest_df['Fare'].fillna(test_df['Fare'].mean(), inplace=True)","5950508d":"train_df = pd.get_dummies(train_df, columns=[\"Sex\", \"Embarked\"])\ntest_df = pd.get_dummies(test_df, columns=[\"Sex\", \"Embarked\"])","92ebde0c":"predictors = [\"Pclass\", \"Age\", \"SibSp\", \"Parch\", \"Sex_male\", \"Sex_female\", \"Embarked_C\", \"Embarked_Q\", \"Embarked_S\"]\ntarget = 'Survived'","591df422":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier","79a704bc":"trn_df, val_df = train_test_split(train_df, test_size=0.2, random_state=42, shuffle=True)","b74e2b4a":"clf = RandomForestClassifier(n_jobs=-1, \n                             random_state=42,\n                             criterion='gini',\n                             n_estimators=200,\n                             verbose=False)","2728e6f1":"print(f\"train\/validation shape: {trn_df.shape}, {val_df.shape}\")","290ba18f":"clf.fit(trn_df[predictors], trn_df[target].values)","c4489cb5":"preds = clf.predict(val_df[predictors])","fb0def3e":"print(f\"ROC AUC score (validation): {roc_auc_score(val_df['Survived'].values, preds)}\")","fb0481d4":"pred_test = clf.predict(test_df[predictors])","8711b3fd":"submission_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-apr-2021\/sample_submission.csv\")\nsubmission_df['Survived'] = pred_test","bf638b4c":"submission_df.head()","ab97bd42":"submission_df.to_csv(\"submission.csv\", index=False)","bc11350b":"## 3.1. Glimpse the data","44906f3f":"<a id=\"4\"><\/a><h1 style='background:#12A4F2; border:0; color:black'><center>4. Feature engineering<\/center><\/h1> ","868c1157":"<a id=\"5\"><\/a><h1 style='background:#12A4F2; border:0; color:black'><center>5. Model<\/center><\/h1> ","f967841d":"## 3.2. Data quality","27f9239d":"<a id=\"6\"><\/a><h1 style='background:#12A4F2; border:0; color:black'><center>6. Submission<\/center><\/h1> ","1f79e1d0":"## 2.1. Load packages","b434dbc5":"## 2.2. Load data","9b4e3f67":"One hot encoding for `Sex` and `Embarked` features.","dfe1acd9":"<a id=\"2\"><\/a><h1 style='background:#12A4F2; border:0; color:black'><center>2. Analysis preparation<\/center><\/h1> ","f75f5bc7":"<a id=\"3\"><\/a><h1 style='background:#12A4F2; border:0; color:black'><center>3. Data exploration<\/center><\/h1> ","c94dca74":"## 3.3. Data visualization","3f29f8ca":"<a id=\"1\"><\/a><h1 style='background:#12A4F2; border:0; color:black'><center>1. Introduction<\/center><\/h1> \n\n\nIn this Notebook, I will:\n* Explore the dataset;\n* Perform feature engineering;\n* Build a baseline model;\n* Prepare a submission\n\n<a id=\"0\"><\/a>\n### Content\n* <a href='#1'>1. Introduction<\/a>  \n* <a href='#2'>2. Analysis preparation<\/a>  \n* <a href='#3'>3. Data exploration<\/a>    \n* <a href='#4'>4. Feature engineering<\/a>    \n* <a href='#5'>5. Model<\/a>    \n* <a href='#5'>6. Submission<\/a>    \n\n","fc6d7986":"Mean imputation for few of the features (`Age` and `Fare`)."}}