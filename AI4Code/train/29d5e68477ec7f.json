{"cell_type":{"a9e94421":"code","1ce22626":"code","af71cb5a":"code","5200a307":"code","c6017e4a":"code","d7962ae0":"code","2c747117":"code","ace5147b":"code","1789a7fd":"code","ea900226":"code","cb92e0da":"code","8213b770":"code","122cc244":"code","9e22d7bb":"code","ce8f7ca1":"code","500932fe":"code","16e95e9a":"code","519adb67":"code","cc5f5a59":"code","a7c3e26f":"code","db860056":"code","93c99be4":"code","8e4b98c6":"code","0cd13d40":"code","dd2b2eff":"code","4cb55de6":"code","13e1d137":"code","506ff8ba":"markdown","cec7911c":"markdown","ecc610ca":"markdown","bee384dc":"markdown","9e2fd42c":"markdown","59923ab7":"markdown","88c1564a":"markdown","c511f5eb":"markdown"},"source":{"a9e94421":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np","1ce22626":"Items_df = pd.read_csv('..\/input\/amazon-cell-phones-reviews\/20191226-items.csv')\nreviews_df = pd.read_csv('..\/input\/amazon-cell-phones-reviews\/20191226-reviews.csv')\nItems_df.head()","af71cb5a":"Items_df = Items_df[[\"asin\",\"title\" ,\"brand\", \"rating\",\"price\"]]\nprint(Items_df.shape)\nItems_df.head(5)","5200a307":"Items_df = Items_df[Items_df[\"price\"] != 0]\nprint(Items_df.shape)\nItems_df.head(5)","c6017e4a":"Items_df = Items_df.dropna()\nprint(Items_df.shape)\nItems_df.head(5)","d7962ae0":"Items_df.dtypes","2c747117":"Items_df.describe()","ace5147b":"Items_df['brand'] = Items_df['brand'].astype(str)\nItems_df['brand'] = Items_df['brand'].apply(lambda x: x.strip())\nItems_df = Items_df.reset_index(drop=True)\nItems_df.head(5)","1789a7fd":"Items_df_2 = Items_df.copy()\nbins=[0, 2, 4, 5]\nlabels=['low', 'medium', 'high']\nItems_df_2['rating'] = pd.cut(Items_df_2['rating'], bins, labels=labels)\nItems_df_2.head(5)","ea900226":"bins=[0, 300, 600,1000]\nlabels=['economical', 'expensive', 'very expensive']\nItems_df_2['price'] = pd.cut(Items_df_2['price'], bins, labels=labels)\nItems_df_2.head(5)","cb92e0da":"Items_df_features = Items_df_2.copy()\nItems_df_features = pd.get_dummies(Items_df_features, columns=['brand'])\nItems_df_features = pd.get_dummies(Items_df_features, columns=['rating'])\nItems_df_features = pd.get_dummies(Items_df_features, columns=['price'])\n\nItems_df_features.head(5)","8213b770":"userInput = [\n            {'title':'Apple iPhone 7, 32GB, Rose Gold - For AT&T \/ T-Mobile (Renewed)', 'user_rating':4.5},\n            {'title':'Apple iPhone Xs Max, 256GB, Space Gray - Fully Unlocked (Renewed)', 'user_rating':5},\n            {'title':'Nokia 3 - Android 9.0 Pie - 16 GB - Unlocked Smartphone (AT&T\/T-Mobile\/Metropcs\/Cricket\/Mint) - 5.0\" HD Screen - Copper', 'user_rating':2},\n            {'title':'Motorola Moto G (1st Generation) Unlocked Cellphone, 8GB, White', 'user_rating':3},\n            {'title':'Samsung Galaxy A80 SM-A805F\/DS Dual Sim (Factory Unlocked) 6.7\" 128GB 8GB RAM (Ghost White)', 'user_rating':4}\n         ] \ninputItems = pd.DataFrame(userInput)\ninputItems\n","122cc244":"inputId = Items_df[Items_df['title'].isin(inputItems['title'].tolist())]\ninputId.head()","9e22d7bb":"inputItems = pd.merge(inputId, inputItems , on='title')\ninputItems.head()","ce8f7ca1":"inputItems = inputItems.drop('brand', 1).drop('rating', 1).drop('price', 1)\ninputItems.head()","500932fe":"userItems = Items_df_features[Items_df_features['asin'].isin(inputItems['asin'].tolist())]\nuserItems","16e95e9a":"userItems = userItems.reset_index(drop=True)\nuserItems","519adb67":"userfeatureTable = userItems.drop('asin', 1).drop('title', 1)\nuserfeatureTable","cc5f5a59":"inputItems['user_rating']","a7c3e26f":"#Dot produt to get weights\nuserProfile = userfeatureTable.transpose().dot(inputItems['user_rating'])\n#The user profile\nuserProfile","db860056":"#Now let's get the features of every item in our original dataframe\nfeatureTable = Items_df_features.set_index(Items_df_features['asin'])\nfeatureTable.head(2)","93c99be4":"#And drop the unnecessary information\nfeatureTable = featureTable.drop('asin', 1).drop('title', 1)\nfeatureTable.head(3)","8e4b98c6":"featureTable.shape","0cd13d40":"#Multiply the features by the weights and then take the weighted average\nrecommendationTable_df = ((featureTable*userProfile).sum(axis=1))\/(userProfile.sum())\nrecommendationTable_df.head()","dd2b2eff":"#Sort our recommendations in descending order\nrecommendationTable_df = recommendationTable_df.sort_values(ascending=False)\n#Just a peek at the values\nrecommendationTable_df.head()","4cb55de6":"#The final recommendation table\nItems_df.loc[Items_df['asin'].isin(recommendationTable_df.head(20).keys())]","13e1d137":"Items_df.loc[Items_df['asin'].isin(recommendationTable_df.tail(20).keys())]","506ff8ba":"Here, I will create a user profile who likes Apple iPhones based on the rating:","cec7911c":"# Content-Based Recommender System\n\nTo create a recommender system, we need to have a user profile which we do not.\nLater in this notebook, I will make one based on the Items dataset in which I will rate some Items based on my opinion, and then I will create a recommendation system for the user profile I created.\n\nWe can use both content-based and collaborative filtering methods. But, since our items are cellphones and we have a small dataset, it is hard to find similar tastes with our user profile, so  I think it's better to use a content-based method.\n\n\n","ecc610ca":"You can find the dataset and its description in [here](https:\/\/www.kaggle.com\/grikomsn\/amazon-cell-phones-reviews)","bee384dc":"I want to categorize the **price** and the average **rating** columns:","9e2fd42c":"First I'm going to prepare the data:","59923ab7":"Best recommendations for the user we made are:","88c1564a":"Worst recommendations for the user we made are:","c511f5eb":"Now I'm going to build a straightforward recommendation system:"}}