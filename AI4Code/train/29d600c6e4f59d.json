{"cell_type":{"e24e3ef4":"code","408bd939":"code","889239f0":"code","d13794c5":"code","07a36c23":"code","9e3cdf74":"code","b4199a72":"code","aca4a565":"code","452034a4":"code","49098389":"code","60ec8e8c":"code","cba728a7":"code","8ed23b49":"code","c660676c":"code","b48339df":"code","5e769d29":"code","c4d370fc":"code","c11228b8":"code","30d35913":"code","f7db4c7a":"code","958c4fef":"code","f54a06b4":"code","163feb72":"code","292bc356":"code","82c6a5f8":"code","c3d85b92":"code","27c1e5de":"code","93a9e690":"code","7def8db1":"code","87a74649":"code","8ca543b4":"code","097e74b2":"code","7c232e7e":"code","0804985d":"code","49532069":"code","c97717b0":"code","4b3f91c7":"code","01804d29":"code","59673e3e":"code","52af1370":"code","760acbea":"code","ccae3a0b":"code","02a85871":"code","363d63d9":"code","84781707":"code","01dda7f1":"markdown","7da2ec38":"markdown","4c86fdd6":"markdown","8963626a":"markdown","311e68d8":"markdown","b0c74e27":"markdown","3535d934":"markdown","aeae77ad":"markdown","895d192c":"markdown","daf830d6":"markdown","868d8f8d":"markdown","7297402c":"markdown","4c6f69da":"markdown","a4813454":"markdown","1e356519":"markdown","5365e045":"markdown","f76612c4":"markdown","9f46fc3c":"markdown","07281ef0":"markdown"},"source":{"e24e3ef4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n##### Scikit Learn modules needed for Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import LabelEncoder,MinMaxScaler , StandardScaler\n\n# Plotting libraries\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(color_codes = True)\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","408bd939":"# Load data\ndf = pd.read_csv(\"..\/input\/travel-insurance-prediction-data\/TravelInsurancePrediction.csv\")\ndf.head()","889239f0":"#checking null value\ndf.info()","d13794c5":"df.describe()","07a36c23":"sns.set_style('darkgrid')\nsns.countplot(data=df,x='TravelInsurance')\nplt.show()","9e3cdf74":"df.EverTravelledAbroad.unique()##cheching uniqness","b4199a72":"df.FrequentFlyer.unique()##cheching uniqness","aca4a565":"df.GraduateOrNot.unique()##cheching uniqness","452034a4":"#function for converting yes or no\n\ndef clean_string(x):\n    if x == 'Yes':\n        return 1\n    else:\n        return 0","49098389":"#function for employment\ndef employment(x):\n    if x == 'Government Sector':\n        return 1\n    else:\n        return 0","60ec8e8c":"df.head()","cba728a7":"df_clean = df\ndf_clean['GraduateOrNot'] = df_clean['GraduateOrNot'].apply(clean_string)\ndf_clean['FrequentFlyer'] = df_clean['FrequentFlyer'].apply(clean_string)\ndf_clean['EverTravelledAbroad'] = df_clean['EverTravelledAbroad'].apply(clean_string)\ndf_clean['Employment Type'] = df_clean['Employment Type'].apply(employment)","8ed23b49":"df_clean","c660676c":"## correlation will give relation between each variable\ncorrelation = df_clean.corr()\nplt.figure(figsize=(15,10) )\nsns.heatmap(correlation,annot = True,cmap = 'Blues')","b48339df":"fig, ax = plt.subplots(figsize=(8,8))\nsns.countplot(hue='EverTravelledAbroad',x='TravelInsurance',data=df)\nplt.show()","5e769d29":"fig, ax = plt.subplots(figsize=(8,8))\nsns.countplot(hue='AnnualIncome',x='TravelInsurance',data=df)\nplt.show()","c4d370fc":"fig, ax = plt.subplots(figsize=(8,8))\nsns.countplot(hue='FrequentFlyer',x='TravelInsurance',data=df)\nplt.show()","c11228b8":"df_clean.head()","30d35913":"df_drop = df_clean.drop(\"Unnamed: 0\",axis=1) ## dropping 1st column which dont have any relation in data","f7db4c7a":"df_drop.head()","958c4fef":"df_drop.TravelInsurance.value_counts()","f54a06b4":"x = df_drop.iloc[:,:-1]\nx.head()","163feb72":"y = df_drop['TravelInsurance']\ny.head(10)","292bc356":"standard = StandardScaler()\nstd_x = standard.fit_transform(x)","82c6a5f8":"x_train, x_test, y_train, y_test = train_test_split(std_x, y, test_size=0.20, random_state= 20)\n\nprint(\"Training data:{}\".format(x_train.shape))\nprint(\"Test data:{}\".format(x_test.shape))","c3d85b92":"results = []","27c1e5de":"clf = LogisticRegression()\nclf.fit(x_train, y_train)\ny_predicted = clf.predict(x_test)\nscore = clf.score(x_test, y_test)","93a9e690":"# Model diagnostic\nprint(score)\nprint(y_predicted)","7def8db1":"print(\"Predicted_value\",\"true_vale\")\nfor i,j in zip(y_predicted, y_test):\n    print(i,j)","87a74649":"minmax = MinMaxScaler()\nX_minmax = minmax.fit_transform(x)","8ca543b4":"x.head()","097e74b2":"X_minmax","7c232e7e":"# Train & Test split\nx_train, x_test, y_train, y_test = train_test_split(X_minmax,y,test_size=0.20,\n                                                    random_state=21)\n\nprint('Shape of Training Xs:{}'.format(x_train.shape))\nprint('Shape of Test Xs:{}'.format(x_test.shape))\nprint('Shape of Training y:{}'.format(y_train.shape))\nprint('Shape of Test y:{}'.format(y_test.shape))","0804985d":"# Build Model\nclf = LogisticRegression()\nclf.fit(x_train, y_train)\ny_predicted = clf.predict(x_test)\nscore=clf.score(x_test,y_test);#testing the linear regression model","49532069":"# Model diagnostic\nprint(score)\nprint(y_predicted)","c97717b0":"cnf_matrix = confusion_matrix(y_test, y_predicted)\nnp.set_printoptions(precision=2)\ncnf_matrix","4b3f91c7":"import itertools\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.tight_layout()","01804d29":"classes = df['TravelInsurance'].value_counts()","59673e3e":"#With Normalization\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes=classes.index,\n                      title='Confusion matrix, without normalization')\n# With normalization\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes= classes.index, normalize=True,\n                      title='Normalized confusion matrix')\n\nplt.show()","52af1370":"from sklearn.tree import DecisionTreeClassifier","760acbea":"clf_1 = DecisionTreeClassifier(criterion = 'entropy')\n\n\n\nclf_1.fit(x_train,y_train)\ny_predicted = clf_1.predict(x_test)\nscore = clf_1.score(x_test,y_test)\n\n\nprint(score)\nresults.append(score)","ccae3a0b":"cnf_matrix = confusion_matrix(y_test, y_predicted)\nnp.set_printoptions(precision=2)\ncnf_matrix","02a85871":"from sklearn.ensemble import RandomForestClassifier","363d63d9":"# Build Model\nclf = RandomForestClassifier(criterion= \"entropy\",bootstrap = False,n_estimators = 1000,n_jobs = 2,verbose = 1,max_features =3)\nclf.fit(x_train, y_train)\ny_predicted = clf.predict(x_test)\nscore=clf.score(x_test,y_test)\nresults.append(score)","84781707":"print(score)","01dda7f1":"### from above plot we can say that for travel insurance EverTravelledAbroad impact more which is +0.43, annual income +0.4 and FrequentFlyer +0.23","7da2ec38":"## 3 Preprocessing of Data ","4c86fdd6":"## 5. Split Data ","8963626a":"### from above plot we can say that those people who are travelling by plane frequently they mostly take insurance ","311e68d8":"## 2.Loading data","b0c74e27":"## 9. solving with decision tree classifier","3535d934":"### near about 700 peoples taken insurance out of 1986 ","aeae77ad":"## 8. confusion matrix","895d192c":"### 1. load libraries","daf830d6":"### from above data we can see that it is in different units so if we pass same data our model will not give better accuracy to convert all data in same format will use standard scaler method","868d8f8d":"## 4. Visualize Data","7297402c":"## 5. Split Data in Training & Testing samples","4c6f69da":"## 6. Build Logistic Regression Model","a4813454":"## min age is= 25 and max age = 35 \n## family members min= 2  max= 9","1e356519":"### from above plot we can see that those who not travel abroad yet they have not taken insurance","5365e045":"## Conclusion :\n\n## Logistic Regression = 0.7688442211055276\n## Decision tree = 0.7537688442211056\n## Random forest = 0.7763819095477387\n## in this problem random forest gives best accuracy which is 77%\u00b6\n","f76612c4":"##  7. using MinMax Scalar to preprocess data","9f46fc3c":"## 10. random forest","07281ef0":"### in data we can see that FrequentFlyer, EverTravelledAbroad & GraduateOrNot columns having yes or no for proper results   will convert it into yes=1 and no=0\n ### simillarly for Employment Type column will convert graduate= 1 and non-graduate=0**"}}