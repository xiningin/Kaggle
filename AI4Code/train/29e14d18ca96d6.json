{"cell_type":{"5e5f388b":"code","9598f93e":"code","2a236a1b":"code","99d79714":"code","d2c45517":"code","f6bb6bc4":"code","d1d45dd6":"code","feeacfa4":"code","bfdd03da":"code","310e3599":"code","dcb1187a":"code","5c7ee0d8":"code","c8635f95":"code","95b1b5e6":"code","07e85af8":"code","58e3c1ea":"code","85a10d31":"code","e47e93f8":"code","ed2c6498":"code","4552e76d":"code","7b9bed80":"code","41cbb3ad":"code","ff795aa5":"code","b3ad8463":"code","e9c82479":"markdown","bbb36df1":"markdown","ed524fcd":"markdown","40fec05d":"markdown","0caf77a4":"markdown","1fd74a1e":"markdown","ea2e789e":"markdown","ca8d19eb":"markdown","887dc364":"markdown"},"source":{"5e5f388b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sn # data visualization\nfrom matplotlib import pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\n\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import f1_score\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9598f93e":"data_df = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")","2a236a1b":"data_df.head()","99d79714":"data_df.info()","d2c45517":"data_df.hist(figsize = (15,15))","f6bb6bc4":"data_df_neg,data_df_pos = data_df.groupby(['Outcome'])\ndata_df_filtered = pd.concat([data_df_neg[1].sample(268),data_df_pos[1].sample(268)])","d1d45dd6":"data_df_filtered[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = data_df_filtered[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)\ndata_df_filtered['Glucose'].fillna(data_df_filtered['Glucose'].mean(), inplace = True)\ndata_df_filtered['BloodPressure'].fillna(data_df_filtered['BloodPressure'].mean(), inplace = True)\ndata_df_filtered['SkinThickness'].fillna(data_df_filtered['SkinThickness'].median(), inplace = True)\ndata_df_filtered['Insulin'].fillna(data_df_filtered['Insulin'].median(), inplace = True)\ndata_df_filtered['BMI'].fillna(data_df_filtered['BMI'].median(), inplace = True)","feeacfa4":"data_df_filtered.hist(figsize = (15,15))","bfdd03da":"data_df_filtered.describe()","310e3599":"data_df_filtered.corr()","dcb1187a":"sn.jointplot(data=data_df_filtered,x='Glucose',y='BMI',hue='Outcome',kind='kde')","5c7ee0d8":"sn.histplot(data=data_df_filtered,x='Glucose',hue='Outcome',kde=True)","c8635f95":"sn.scatterplot(data=data_df_filtered,x='Glucose', y='BMI',hue='Outcome')","95b1b5e6":"# LABELS = ['Glucose','BloodPressure','Insulin','BMI','Age']\nLABELS = ['Pregnancies','Glucose','BloodPressure','Insulin','BMI','Age','DiabetesPedigreeFunction','SkinThickness']","07e85af8":"X = data_df_filtered[LABELS].values\ny = data_df_filtered['Outcome']\nscaler = StandardScaler()\nscaler.fit(X)\nX = scaler.transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y,train_size=0.2,shuffle=True)","58e3c1ea":"kmeans = KMeans(n_clusters=2).fit(X_train)\ndata_df_filtered['kMeansPrediction'] = kmeans.predict(X)\nsn.scatterplot(data=data_df_filtered,x='Glucose', y='BMI',hue='kMeansPrediction')\nprint(\"kMeans f1 score:\\t\\t\",f1_score(y_test,kmeans.predict(X_test)))","85a10d31":"# Hyperparameter search\nparam_score = []\nparam_arr = []\nfor num_estimators in range(100,300,10):\n    clf = RandomForestClassifier(num_estimators)\n    clf.fit(X_train[0:50],y_train[0:50]) # train\n    param_score.append(clf.score(X_train,y_train))\n    param_arr.append(num_estimators)\nbest_estimator = max(param_arr)\nsn.scatterplot(x=param_arr,y=param_score)","e47e93f8":"clf = RandomForestClassifier(best_estimator)\nclf.fit(X_train,y_train) # train\ndata_df_filtered['randomForestProba'] = clf.predict_proba(X)[:,1] # Probability of sample being negative\ndata_df_filtered['randomForestPrediction'] = clf.predict(X)\nsn.scatterplot(data=data_df_filtered,x='Glucose', y='BMI',hue='randomForestPrediction') \nprint(\"Random Forest f1 score:\\t\\t\",f1_score(y_test,clf.predict(X_test)))","ed2c6498":"LABELS2 = LABELS + ['randomForestProba']\nX2 = data_df_filtered[LABELS2].values\n# y = data_df_filtered['Outcome']","4552e76d":"X_train_boosted = np.concatenate((X_train.copy(),clf.predict_proba(X_train)[:,1].reshape(-1,1)),1)\nX_test_boosted = np.concatenate((X_test.copy(),clf.predict_proba(X_test)[:,1].reshape(-1,1)),1)\nX_train_boosted[0]","7b9bed80":"boost = AdaBoostClassifier(clf)\nboost.fit(X_train_boosted,y_train)\ndata_df_filtered['BoostPrediction'] = boost.predict(X2)\nsn.scatterplot(data=data_df_filtered,x='Glucose', y='BMI',hue='BoostPrediction')\nprint(\"Boosting f1 score:\\t\",f1_score(y_test,(boost.predict(X_test_boosted))))","41cbb3ad":"data_df_filtered.head()","ff795aa5":"data_df_filtered['predictedCorrectly'] = data_df_filtered['Outcome'] == data_df_filtered['BoostPrediction']\nsn.scatterplot(data=data_df_filtered,x='Glucose', y='BMI',hue='predictedCorrectly')\n# We can see that the error tends to be where we saw the two regions overlapping","b3ad8463":"print(classification_report(y_test,(boost.predict(X_test_boosted))))","e9c82479":"# Statistical Analysis","bbb36df1":"# Import Data","ed524fcd":"# Transform Data","40fec05d":"# Data Visualization","0caf77a4":"## Visualize the error region","1fd74a1e":"# Machine Learning\n## kMeans","ea2e789e":"## Random Forest","ca8d19eb":"## Predictions","887dc364":"## Boosting"}}