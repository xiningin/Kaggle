{"cell_type":{"5ba15c4d":"code","e1d18b23":"code","363df888":"code","e4d7f1ff":"code","0682fb4e":"code","b1e5e959":"code","31aeb39c":"code","9b8d0fa1":"code","defc73fd":"code","662cb206":"code","f78179d9":"code","a2926123":"code","73ac7fbb":"code","ccb38d9e":"code","6b26f1f3":"code","cc80cdc4":"code","0b587406":"markdown","469660bf":"markdown","e0939e27":"markdown","e55a4f56":"markdown","d1d36f07":"markdown","6346d6df":"markdown"},"source":{"5ba15c4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e1d18b23":"# Importing all the necassaries libraries\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns; sns.set()\n# Visualisation\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nimport seaborn as sns\nimport missingno as msno\n# Importing ARIMA based libraries\nfrom statsmodels.tsa.ar_model import AR\nfrom random import random\nfrom pandas import DataFrame\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error\n# Importing Autocorrelation based libraries\nfrom pandas import datetime\nfrom pandas.plotting import autocorrelation_plot","363df888":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","e4d7f1ff":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","0682fb4e":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","b1e5e959":"nRowsRead = 1000 # specify 'None' if want to read whole file\n### time_series_covid19_confirmed_global_1.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('..\/input\/ece657aw20asg4coronavirus\/time_series_covid19_confirmed_global.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'time_series_covid19_confirmed_global_1.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","31aeb39c":"df1.head(5)","9b8d0fa1":"plotPerColumnDistribution(df1, 10, 5)","defc73fd":"plotCorrelationMatrix(df1, 17)","662cb206":"plotScatterMatrix(df1, 20, 10)","f78179d9":"df1.columns","a2926123":"# Configure visualisations\n%matplotlib inline\nmpl.style.use( 'ggplot' )\nplt.style.use('fivethirtyeight')\nsns.set(context=\"notebook\", palette=\"dark\", style = 'whitegrid' , color_codes=True)\ny=df1.loc[df1['Province\/State']=='Ontario'].iloc[0,4:]\ns = pd.DataFrame({'Ontario':y})\nprint(s)","73ac7fbb":"# Plotting the confirmed cases in ontario, to observe the trend in the number of cases\ny.index.freq = 'MS'\nax = y.plot(figsize = (16,5), title = \"Confired cases in ontario\")\nax.set(xlabel='Dates', ylabel='Total cases');","ccb38d9e":"series =y\nautocorrelation_plot(series)\npyplot.show()","6b26f1f3":"# Developing ARIMA model for the Confiremed cases in Ontario\nseries = y.to_numpy()\n# fit model\nmodel = ARIMA(series, order=(3,1,0))\nmodel_fit = model.fit(disp=0)\nprint(model_fit.summary())\n# plot residual errors\nresiduals = DataFrame(model_fit.resid)\nresiduals.plot()\npyplot.show()\nresiduals.plot(kind='kde')\npyplot.show()\nprint(residuals.describe())","cc80cdc4":"\n\nX = y\nsize = int(len(X) * 0.9)\ntrain, test = X[0:size], X[size:len(X)]\nhistory = [x for x in train]\npredictions = list()\nfor t in range(len(test)):\n\tmodel = ARIMA(history, order=(2,1,0))\n\tmodel_fit = model.fit(disp=0)\n\toutput = model_fit.forecast()\n\tyhat = output[0]\n\tpredictions.append(yhat)\n\tobs = test[t]\n\thistory.append(obs)\n\tprint('predicted=%f, expected=%f' % (yhat, obs))\nerror = mean_squared_error(test, predictions)\nprint('Test MSE: %.3f' % error)\n# plot\npyplot.plot(test,label= 'Expected')\npyplot.legend()\npyplot.plot(predictions, color='red',label = 'Predictions')\npyplot.show()","0b587406":"### - In this portion, the ARIMA model will be fitted on the number of confirmed cases in ontario and the residual errors will be analysed. ","469660bf":"### - Based on the Autocorrelation plot, it is fairly obvious that the first 20 lags have a posituve correlation. If we observe closely, the first few lags have very significant correation (especially the first 3 lags). \n### - So in the further portions, i will be utilizing this as a good starting point for the ARIMA model,to make predictions.","e0939e27":"## - Developing the ARIMA model","e55a4f56":"### - Trying to plot the autocorrelation plot of the time series, this helps in plotting large number of lags in the time series.","d1d36f07":"# Assignment 4\n## ARIMA model for time series forecasting of Confiremed cases of COVID-19 in Ontario - By Abhishek Mungekar(20867324)\n### - In the following notebook, the Autoregressive Integrated Moving Average Model will be utilized to make predictions on the confiremed cases in Ontario.\n### - Before jumping into the time forecasting  process, let's visvalize the data a bit more.","6346d6df":"### - Specifically obatining confirmed cases in ontario. "}}