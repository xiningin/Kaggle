{"cell_type":{"c2e1f75f":"code","aaeddf73":"code","2dea5b7c":"code","54a85f55":"code","6330d09c":"code","0bd3470c":"code","e51499d1":"code","9e01e21d":"code","a84a6792":"code","e9d3ea06":"code","8f7347c1":"code","59ef90f2":"code","d46a79b5":"code","47d4baa7":"code","78af600a":"code","40775714":"code","22dd607d":"code","0126404a":"code","ec9e3e44":"code","d46f0ce0":"code","7f67a194":"code","b2a59d4c":"code","74390cab":"code","cc29367f":"code","c1542968":"code","103559da":"code","32fe6eaf":"code","b2c244a4":"code","f7766f34":"code","56afc1e9":"code","e96c18d9":"markdown","a85cffb2":"markdown","ed143e37":"markdown"},"source":{"c2e1f75f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aaeddf73":"train = pd.read_csv('\/kaggle\/input\/sf-crime\/train.csv.zip')\ntrain.head()","2dea5b7c":"test = pd.read_csv('\/kaggle\/input\/sf-crime\/test.csv.zip')\ntest.head()\n# train\uc5d0\uc11c Category, Descript, Resolution \ubcc0\uc218\uac00 \uc5c6\uc74c.","54a85f55":"sub = pd.read_csv('\/kaggle\/input\/sf-crime\/sampleSubmission.csv.zip')\nsub.head()\n# class 39\uac1c","6330d09c":"train.shape","0bd3470c":"test.shape","e51499d1":"sub.shape","9e01e21d":"train.info() #.dtypes","a84a6792":"train[\"Dates\"] = pd.to_datetime(train[\"Dates\"])\ntrain[\"YEAR\"] = train[\"Dates\"].dt.year\ntrain[\"MONTH\"] = train[\"Dates\"].dt.month\ntrain[\"DAY\"] = train[\"Dates\"].dt.day\ntrain[\"HOUR\"] = train[\"Dates\"].dt.hour\n\ntest[\"Dates\"] = pd.to_datetime(test[\"Dates\"])\ntest[\"YEAR\"] = test[\"Dates\"].dt.year\ntest[\"MONTH\"] = test[\"Dates\"].dt.month\ntest[\"DAY\"] = test[\"Dates\"].dt.day\ntest[\"HOUR\"] = test[\"Dates\"].dt.hour","e9d3ea06":"train.info()\n#train.dtypes\n# \ubcc0\uc218 \ud0c0\uc785\uc774 object\uc778 \uac83\uc740  \uc218\uce58\/\ubc94\uc8fc\ud615\uc73c\ub85c \ubcc0\uacbd","8f7347c1":"train = train.astype({'Category' : 'category', \n                      'DayOfWeek' : 'string', \n                      'PdDistrict': 'string',\n                      'Resolution' : 'string',\n                      'Address' : 'string'})\ntrain.dtypes","59ef90f2":"test = test.astype({'DayOfWeek' : 'string', \n                    'PdDistrict': 'string',\n                    'Address' : 'string'})\ntest.dtypes","d46a79b5":"# target variable\nimport matplotlib.pyplot as plt\n# import seaborn as sns\n\nTARGET = train['Category']\nDF_ = TARGET.value_counts()\nlen_x = np.arange(len(DF_))\n\nplt.figure(figsize = (20, 12))\nplt.bar(len_x, DF_)\nplt.title(\"distribution of target variable(categorical)\")\nplt.ylabel('count')\nplt.xlabel('Category')\nplt.xticks(range(0, len(DF_.index)), DF_.index, rotation = \"vertical\")\n\n# TRIAN_SUM_BY_CATE = train.groupby('Category')\n# TRIAN_SUM_BY_CATE.count()\n# plt.bar(3, DF_)","47d4baa7":"DF_","78af600a":"train_x = train[['DayOfWeek', 'PdDistrict', 'Address', \n                 'X', 'Y', 'YEAR', 'MONTH', 'DAY', 'HOUR']]\ntrain_y = train[['Category']]\n\ntest_x = test[['DayOfWeek', 'PdDistrict', 'Address', \n                 'X', 'Y', 'YEAR', 'MONTH', 'DAY', 'HOUR']]\n\n\n\ntrain_x.head()","40775714":"train_x.info()","22dd607d":"train_y.head()","0126404a":"from sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nle = preprocessing.LabelEncoder()\n\ntrain_x[\"DayOfWeek\"] = le.fit_transform(train_x[\"DayOfWeek\"])\ntrain_x[\"PdDistrict\"] = le.fit_transform(train_x[\"PdDistrict\"])\ntrain_x[\"Address\"] = le.fit_transform(train_x[\"Address\"])\n\ntest_x[\"DayOfWeek\"] = le.fit_transform(test_x[\"DayOfWeek\"])\ntest_x[\"PdDistrict\"] = le.fit_transform(test_x[\"PdDistrict\"])\ntest_x[\"Address\"] = le.fit_transform(test_x[\"Address\"])\n","ec9e3e44":"clf = RandomForestClassifier(n_estimators = 20, \n                             max_depth = 5, random_state = 0)\nrf1 = clf.fit(train_x, train_y)","d46f0ce0":"predictions = rf1.predict_proba(test_x)","7f67a194":"predictions","b2a59d4c":"predictions.shape","74390cab":"np.linspace(0, 38, 39, dtype='int16')","cc29367f":"sub_length = le.inverse_transform(np.linspace(0, 38, 39, dtype='int16'))\nsub_length","c1542968":"train_y['Category'].unique()","103559da":"sub.head()","32fe6eaf":"len(predictions[0])","b2c244a4":"sub.iloc[:,1:] = predictions","f7766f34":"sub.head()","56afc1e9":"sub.to_csv('sub1.csv', index = False)","e96c18d9":"**2 random forest**","a85cffb2":"**2. DATA EDA**","ed143e37":"**1. DATA LOAD**"}}