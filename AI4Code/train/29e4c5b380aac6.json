{"cell_type":{"c161dfe2":"code","dd417d06":"code","e02dd01d":"code","d8fb23f5":"code","ecda56b6":"code","52f03934":"code","66661ad3":"code","0233ef9f":"code","1a00c170":"code","5ee5e5dd":"code","a7e6e6a0":"code","86f3bd55":"code","3d03d45f":"code","d20a74f4":"markdown","466e2cfd":"markdown","c78cdf83":"markdown"},"source":{"c161dfe2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nimport pandas as pd\nimport numpy as np\nfrom keras import backend as K\nfrom keras.models import Model\nfrom keras.callbacks import EarlyStopping\nfrom keras.layers import Input, LSTM, Dense, BatchNormalization, Lambda, Flatten, Reshape\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.layers.normalization import BatchNormalization\nfrom keras import backend as K\nfrom keras.layers import Input, Dense, Flatten, Dropout, Lambda, \\\n    TimeDistributed, Permute, RepeatVector, LSTM, GRU, Add, Concatenate, Reshape, Multiply, merge, Dot, Activation, \\\n    concatenate, dot, Subtract\nfrom keras.initializers import Identity\nfrom keras.activations import sigmoid\n\nfrom keras.layers.advanced_activations import LeakyReLU\nfrom keras.layers.convolutional import Conv1D\nfrom keras.models import Sequential, Model\nfrom keras.optimizers import Adam, SGD, RMSprop\n# from database import get_datasets\nfrom sklearn.neighbors import KernelDensity\nfrom scipy.stats import ks_2samp, trim_mean, shapiro, normaltest, anderson\nfrom keras.losses import mse, binary_crossentropy, sparse_categorical_crossentropy\nfrom keras import backend as K\nimport matplotlib.pyplot as plt\n","dd417d06":"def read_data():\n    data = pd.read_csv(\"..\/input\/datatrain4\/train4.csv\")\n    data = data.values\n    return data","e02dd01d":"data = read_data()","d8fb23f5":"def handle_country_text(data):\n    stats = list(np.unique(data[:, 2]))\n    for idx, d in enumerate(data):\n        country = d[2]\n        id = stats.index(country)\n        d[2] = id\n\n    return stats, data","ecda56b6":"stats, data = handle_country_text(data)","52f03934":"def create_sequences(data, stats):\n    sequences = []\n    to_compute = []\n    for idx, s in enumerate(stats):\n        seq = data[data[:, 2] == idx]\n        if pd.isnull(seq[0, 1]):\n            seq = np.delete(seq, [1], 1)\n        else:\n            to_compute.append(seq)\n            stats_p = list(np.unique(seq[:, 1]))\n            for idx2, s2 in enumerate(stats_p):\n                seqs2 = seq[seq[:, 1] == s2]\n                seqs2 = np.delete(seqs2, [0, 1, 3], 1)\n                for idx, value in enumerate(reversed(seqs2[:, 1:])):\n                    if idx + 1 < len(seqs2):\n                        cases = value[0] - seqs2[-(idx + 2), 1]\n                        deaths = value[1] - seqs2[-(idx + 2), 2]\n                        seqs2[-(idx + 1), 1] = cases\n                        seqs2[-(idx + 1), 2] = deaths\n                # seqs2[:, 3] = seqs2[:, 3] \/ 100\n                # seqs2[:, 4] = seqs2[:, 4] \/ 100\n                offset = float(idx2) \/ 10\n                seqs2[:, 0] = seqs2[:, 0] + offset\n                sequences.append(seqs2)\n            continue\n\n        seq = np.delete(seq, [0, 2], 1)\n\n        for idx,value in enumerate(reversed(seq[:,1:])):\n            if idx + 1 < len(seq):\n                cases = value[0] - seq[-(idx + 2), 1]\n                deaths = value[1] - seq[-(idx + 2), 2]\n                seq[-(idx + 1), 1] = cases\n                seq[-(idx + 1), 2] = deaths\n            # seq[:, 3] = seq[:, 3] \/ 100\n            # seq[:, 4] = seq[:, 4] \/ 100\n        sequences.append(seq)\n\n    return np.array(sequences)","66661ad3":"sequences = create_sequences(data, stats)\nsequences = np.array(sequences)\nsequences_train = np.delete(sequences, [0], 2)\nsequences_train = np.array(sequences_train)","0233ef9f":"def dain(input):\n\n    n_features = 2\n\n    #mean\n    mean = Lambda(lambda x: K.mean(input, axis=1))(input)\n    adaptive_avg = Dense(n_features,\n                         kernel_initializer=Identity(gain=1.0),\n                         bias=False)(mean)\n    adaptive_avg = Reshape((1, n_features))(adaptive_avg)\n    X = Lambda(lambda inputs: inputs[0] - inputs[1])([input, adaptive_avg])\n\n    #std\n    std = Lambda(lambda x: K.mean(x**2, axis=1))(X)\n    std = Lambda(lambda x: K.sqrt(x+1e-8))(std)\n    adaptive_std = Dense(n_features,\n                         #kernel_initializer=Identity(gain=1.0),\n                         bias=False)(std)\n    adaptive_std = Reshape((1, n_features))(adaptive_std)\n    # eps = 1e-8\n    #adaptive_avg[adaptive_avg <= eps] = 1\n    X = Lambda(lambda inputs: inputs[0] \/ inputs[1])([X, adaptive_std])\n\n    # # #gating\n    avg = Lambda(lambda x: K.mean(x, axis=1))(X)\n    gate = Dense(n_features,\n                 activation=\"sigmoid\",\n                 kernel_initializer=Identity(gain=1.0),\n                 bias=False)(avg)\n    gate = Reshape((1, n_features))(gate)\n    X = Lambda(lambda inputs: inputs[0] * inputs[1])([X, gate])\n\n    return X, adaptive_avg, adaptive_std","1a00c170":"def build_generator(encoder_input_shape, missing_len, verbose=True):\n    learning_rate = 0.0002\n    optimizer = Adam(lr=learning_rate)\n    generator_decoder_type ='seq2seq'\n\n    encoder_inputs = Input(shape=encoder_input_shape)\n\n    hidden, avg, std = dain(encoder_inputs)\n    decoder_outputs = []\n    # encoder\n\n    encoder = LSTM(128, return_sequences=True, return_state=True)\n    lstm_outputs, state_h, state_c = encoder(hidden)\n    if generator_decoder_type == 'seq2seq':\n        states = [state_h, state_c]\n        decoder_lstm = LSTM(128, return_sequences=True, return_state=True)\n        decoder_cases = Dense(1, activation='relu')\n        decoder_deaths = Dense(1, activation='relu')\n        all_outputs_c = []\n        all_outputs_d = []\n        inputs = lstm_outputs\n        for idx in range(missing_len):\n            outputs, state_h, state_c = decoder_lstm(inputs, initial_state=states)\n            inputs = outputs\n            outputs = BatchNormalization()(outputs)\n            outputs = Flatten()(outputs)\n            outputs_cases = decoder_cases(outputs)\n            outputs_deaths = decoder_deaths(outputs)\n\n            states = [state_h, state_c]\n            std_c = Lambda(lambda inputs: inputs[:, 0, 0])(std)\n            avg_c = Lambda(lambda inputs: inputs[:, 0, 0])(avg)\n\n            outputs_cases = Multiply()([outputs_cases, std_c])\n            outputs_cases = Add()([outputs_cases, avg_c])\n\n            std_d = Lambda(lambda inputs: inputs[:, 0, 1])(std)\n            avg_d = Lambda(lambda inputs: inputs[:, 0, 1])(avg)\n\n            outputs_deaths = Multiply()([outputs_deaths, std_d])\n            outputs_deaths = Add()([outputs_deaths, avg_d])\n            all_outputs_c.append(outputs_cases)\n            all_outputs_d.append(outputs_deaths)\n\n        decoder_outputs_c = Lambda(lambda x: x)(outputs_cases)\n        decoder_outputs_d = Lambda(lambda x: x)(outputs_deaths)\n   \n    model = Model(inputs=encoder_inputs,\n                  outputs=[decoder_outputs_c, decoder_outputs_d])\n    if verbose:\n        print('\\nGenerator summary: ')\n        print(model.summary())\n\n    model.compile(loss='mean_squared_logarithmic_error', optimizer=optimizer)\n    return model","5ee5e5dd":"given = 80\nmissing = 1\ntotal_missing = 33\n\nmodel = build_generator(sequences_train[:, :given, :].shape[1:], missing)\nes = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=30)\nhistory = model.fit(x=sequences_train[:, :given, :],\n              y=[sequences_train[:, given:, 0], sequences_train[:, given:, 1]],\n              epochs=1,\n              validation_split=0.2,\n              shuffle=True,\n              callbacks=[es])\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.savefig('plots\/losses.png')\nplt.close()","a7e6e6a0":"def backtest2(sequences, model, given, missing):\n    sequences_test = sequences[:, -given:]\n\n    pred_d = []\n    pred_c = []\n    for i in range(0, missing):\n        predictions = model.predict(sequences_test[:, :, ])\n                                       \n        predictions[0][predictions[0] < 0] = 0 #* std[0] + m[0]\n        predictions[1][predictions[1] < 0] = 0 #* std[1] + m[1]\n        predictions[1] = np.around(predictions[1].astype(np.double))\n        predictions[0] = np.around(predictions[0].astype(np.double))\n        pred = np.concatenate(\n            [np.expand_dims(predictions[0], axis=2),\n             np.expand_dims(predictions[1], axis=2)],\n            axis=2)\n        pred_c.append(pred)\n        pred_d.append(predictions[1])\n        sequences_test = np.concatenate([sequences_test[:, 1:],\n                                         pred],\n                                        axis=1)\n    predictions = np.array(pred_c[0])\n    for i in range(1, len(pred_c)):\n        predictions = np.concatenate([predictions,\n                                     pred_c[i]],\n                                     axis=1)\n\n\n    # #real cases\/death denorm\n    seq_cases = sequences[:, :, 0] #* std[0] + m[0]\n    seq_death = sequences[:, :, 1]# * std[1] + m[1]\n\n    #reverse real variations\n    death = np.cumsum(seq_death, axis=1)\n    # death = seq_death\n    # cases = seq_cases\n    cases = np.cumsum(seq_cases, axis=1)\n\n    cases = np.around(cases.astype(np.double))\n    cases[cases < 0] = 0\n    cases_csv = np.expand_dims(cases[:, -1], axis=1)\n    predictions[0] = np.around(predictions[0].astype(np.double))\n    cases_csv = np.concatenate((cases_csv, predictions[:, :, 0]), axis=1)\n\n    death = np.around(death.astype(np.double))\n    death[death < 0] = 0\n    death_csv = np.expand_dims(death[:, -1], axis=1)\n    predictions[1] = np.around(predictions[1].astype(np.double))\n    death_csv = np.concatenate((death_csv, predictions[:, :, 1]), axis=1)\n\n    #reverse variations predictions\n    cases_csv = np.cumsum(cases_csv, axis=1)\n    death_csv = np.cumsum(death_csv, axis=1)\n    death_csv = death_csv[:, 1:]\n    cases_csv = cases_csv[:, 1:]\n\n    #align with testset\n    death_csv = np.concatenate((death[:, -11:], death_csv), axis=1)\n    cases_csv = np.concatenate((cases[:, -11:], cases_csv), axis=1)\n\n    #flatten and save\n    csv = []\n    cases_csv = np.reshape(cases_csv[:, 1:], (-1, 1))\n    death_csv = np.reshape(death_csv[:, 1:], (-1, 1))\n\n    j = 1\n    for idx, (c, d) in enumerate(zip(cases_csv, death_csv)):\n        csv.append([j, c, d])\n        j += 1\n#     df = pd.DataFrame(csv, columns =['ForecastId','ConfirmedCases','Fatalities'])\n#     df.ConfirmedCases.astype(np.double)\n#     df.Fatalities.astype(np.double)\n#     df.ForecastId = df.ForecastId.astype(np.int)\n#     df.to_csv(\"submission.csv\", index=False)\n    print('done')\n","86f3bd55":"backtest2(sequences_train, model, given, total_missing)","3d03d45f":"sub = pd.read_csv('..\/input\/submission2\/submission.csv', header=None,dtype=np.float32) \nsub = pd.DataFrame(sub.values, columns =['ForecastId','ConfirmedCases','Fatalities'])\nsub.ConfirmedCases.astype(np.double)\nsub.Fatalities.astype(np.double)\nsub.ForecastId = sub.ForecastId.astype(np.int)\nsub.to_csv(\"submission.csv\", index=False)\nprint('done')\n","d20a74f4":"## Trained in local\n![loss](https:\/\/i.ibb.co\/JHMSZR3\/losses.png)\nlosses","466e2cfd":"This notebook aims to produce predictions about the number of new cases and the death tolls of coronavirus (per each country) using a sequence to sequence model. The first step is to create the time-series for each country in order to have the input sequences for the model, once we have the sequences I decided to normalize the data with an adaptive normalization layer in order to take in consideration the magnitude of each sequence therefore the predictions will have higher fluctuations if the number of cases is big and viceversa. The model is trained to produce only the next number of the newcases time-series and the deathtoll time-series, when the model is trained it will produce the next value of an input sequence at the time t, with that value is possible to create a new timeseries at the time t+1 just concatenating the new data at the end of the sequence and therefore it's possible to ask to the model for a new prediction and continuing until the desired number of predictions is reached. To be noticed that the model is trained with the sequences of all the countries, and not one model per country. I made this choice becuase I believe the model can detect similitaries among the different time-series and use them to create more accurate results.","c78cdf83":"## Trained in local, next cell it's for the submission file creation"}}