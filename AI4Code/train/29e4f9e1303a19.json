{"cell_type":{"31f8d084":"code","a9d15e02":"code","a0ea75fa":"code","b791612f":"code","1732e8a6":"code","679e753b":"code","34df5056":"code","d8a3324e":"code","c6c52e0f":"code","23503167":"code","4d7809f8":"code","9ad38669":"code","56dd288c":"code","8e17fb6b":"code","23e81fa4":"code","795598b5":"code","7d67f5ed":"code","081432f7":"code","49dd3ee7":"code","97418b7b":"code","944051df":"code","07466a3b":"code","36d3bb16":"code","4dc4ad6a":"code","d2934520":"code","5001ec68":"code","2ab3bf5b":"code","f77d9587":"code","35179cd5":"code","990d6c28":"code","4ed9f415":"code","66ee5b8c":"code","cd78cb29":"code","d9a8724c":"code","b6a23a84":"code","14479966":"markdown","12708dcf":"markdown","e3ae145b":"markdown","02241e66":"markdown","8a9310ef":"markdown","4801aebb":"markdown","21728392":"markdown","65da8158":"markdown","6d3f5330":"markdown","f0cae824":"markdown","a0dcb4c0":"markdown","87aa64ee":"markdown"},"source":{"31f8d084":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a9d15e02":"Train=pd.read_csv('..\/input\/train.csv',index_col='Id')\nTest=pd.read_csv('..\/input\/test.csv',index_col='Id')\nSample=pd.read_csv('..\/input\/sample_submission.csv',index_col='Id')","a0ea75fa":"pd.set_option('display.max_columns', None)\nTrain.head()","b791612f":"# Categorical Columns\n\nTrain_category_data=Train.select_dtypes(include='object')\nTrain_category_column=list(Train_category_data.columns)\nprint(f'Name of Categorical Columns: \\n {Train_category_column},\\n\\n Length of Categorical columns: {len(Train_category_column)}')","1732e8a6":"# Numerical_value COlumns\n\nTrain_num_cat_data=Train.select_dtypes(exclude='object')\nTrain_num_cat_column=list(Train_num_cat_data.columns)\nprint(f'Name of Numerical_Categorical Columns: \\n {Train_num_cat_column},\\n\\n Length of Numerical_Categorical columns: {len(Train_num_cat_column)}')","679e753b":"CORR=Train.corr()\n# Values of CORR of different features of data with respect to 'SalePrice'\nCORR['SalePrice'].sort_values(ascending=False)[:20]","34df5056":"Higher_Corr_list=list((CORR['SalePrice'].sort_values(ascending=False)[:20]).index)\nHigher_Corr_list","d8a3324e":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig = plt.figure(figsize=(10,40))\n\nfor i in range(len(Higher_Corr_list)):\n    fig.add_subplot(10, 2, i+1)\n    sns.regplot(Train[Higher_Corr_list].iloc[:,i], Train['SalePrice'])\n    \nplt.tight_layout()\nplt.show()","c6c52e0f":"Train=Train.drop(Train[(Train['GrLivArea'] > 4000) & (Train['SalePrice'] <200000)].index) #1\nTrain=Train.drop(Train[Train['GarageArea']>1200].index) #2\nTrain=Train.drop(Train[Train['TotalBsmtSF']>4000].index) #3\nTrain=Train.drop(Train[Train['1stFlrSF']>4000].index) #4\nTrain=Train.drop(Train[Train['MasVnrArea']>1400].index) #5\nTrain=Train.drop(Train[Train['BsmtFinSF1']>4000].index) #6\nTrain=Train.drop(Train[Train['LotFrontage']>300].index) #7\nTrain=Train.drop(Train[Train['OpenPorchSF']>500].index) #7","23503167":"Train.shape","4d7809f8":"# Total Missing Values including Categorical and Numerical Data\n(Train.isnull().sum().sort_values(ascending=False)[:21])","9ad38669":"# For Categorical Data Missing Values\nTrain[Train_category_column].isnull().sum().sort_values(ascending = False)[:17]\nNull_cat_column = ['PoolQC', 'MiscFeature', 'Alley', 'Fence' , 'FireplaceQu' ,'GarageCond' , 'GarageQual','GarageFinish','GarageType', 'BsmtFinType2',\n                   'BsmtExposure', 'BsmtFinType1', 'BsmtQual', 'BsmtCond', 'MasVnrType', 'Electrical']","56dd288c":"Null_cat_column = ['PoolQC', 'MiscFeature', 'Alley', 'Fence' , 'FireplaceQu' ,'GarageCond' , 'GarageQual','GarageFinish','GarageType', 'BsmtFinType2',\n                   'BsmtExposure', 'BsmtFinType1', 'BsmtQual', 'BsmtCond', 'MasVnrType', 'Electrical']","8e17fb6b":"d={}\nfor col in Null_cat_column:\n    i= len(Train[col].unique())\n    d[col]= Train[col].unique()[:i]","23e81fa4":"d","795598b5":"## Replacce th None\ncat_None=['PoolQC', 'MiscFeature', 'Alley', 'Fence' , 'FireplaceQu' ,'GarageCond' , 'GarageQual','GarageFinish','GarageType', 'BsmtFinType2',\n                   'BsmtExposure', 'BsmtFinType1', 'BsmtQual', 'BsmtCond']\n\nfor col in cat_None:\n    Train[col]=Train[col].fillna('None').astype(str)","7d67f5ed":"Train['MasVnrType']=Train['MasVnrType'].fillna(Train['MasVnrType'].mode()[0])\nTrain['Electrical']=Train['Electrical'].fillna(Train['Electrical'].mode()[0])","081432f7":"Train[['LotFrontage','LotConfig', 'LotArea']]","49dd3ee7":"Train['LotFrontage']=Train['LotFrontage'].fillna(Train['LotFrontage'].mean())","97418b7b":"print(Train[['MasVnrArea','MasVnrType']])","944051df":"Train['MasVnrArea']=Train['MasVnrArea'].fillna(0)","07466a3b":"Train[['GarageYrBlt','YearBuilt']]","36d3bb16":"index = list(Train['GarageYrBlt'].index[Train['GarageYrBlt'].apply(np.isnan)])\n#(Train['GarageYrBlt'].index.isnull())","4dc4ad6a":"index","d2934520":"for i in index:\n        Train['GarageYrBlt'][i]=Train['YearBuilt'][i]\n#Train['GarageYrBlt']= Train['GarbageYrBlt'].map(Train['YearBuilt'])","5001ec68":"Train['GarageYrBlt']","2ab3bf5b":"Y=Train['SalePrice']\nTrain=Train.drop(columns='SalePrice')\n","f77d9587":"Train.shape","35179cd5":"from sklearn.preprocessing import LabelEncoder\nlabel=LabelEncoder()\nfor col in Train_category_column:\n    Train[col]=label.fit_transform(Train[col])","990d6c28":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor","4ed9f415":"X_t,x_t,Y_t,y_t=train_test_split(Train,Y, test_size=0.3)\nmodel=RandomForestRegressor()","66ee5b8c":"model.fit(X_t,Y_t)","cd78cb29":"y_p=model.predict(x_t)","d9a8724c":"from sklearn.metrics import accuracy_score, mean_absolute_error\n\nMAE= mean_absolute_error(y_p,y_t)\n","b6a23a84":"MAE","14479966":"### Here We can see that Most of the parameters in 'MasVnrArea' is relatively zero, therefore filled the eight empty rows with the zero","12708dcf":"* Checking Caterogical and Numerical Data","e3ae145b":"\n# Filling missing parameters","02241e66":"## Checking Correlation of 'SalePrice' with Other paramters","8a9310ef":"** Checking Lot Frontage missing Critical Parameter","4801aebb":"Plotting These on higher value of correlation on graph to watch outliers","21728392":"# House Price Competetion... ","65da8158":"NUll Values Presented from PoolQc to BsmtCond are higher in quantity, which signifies that missing values are none","6d3f5330":"* First we will import Training data ('Train')\n* Testing Data ('Test')\n* Sample Data ('Sample')","f0cae824":"### Here we can see that 'GarageYrBlt' and 'YearBuilt' data are relatively same.","a0dcb4c0":"* Based on the observation of Regression Plot:\n* Following condition of outlier are found for the numerical_category Features\n\n    1. Gr'GrLivArea' > 4000 and SalePrice < 2xe5\n    2. 'GarageArea' > 1200\n    3. 'TotalBsmtSF'> 4000\n    4. '1stFlrSF' > 4000\n    5. 'MasVnrArea' > 1400\n    6. 'BsmtFinSF1' > 4000\n    7. 'LotFrontage > 300\n    8. 'OpenPorchSF' > 500","87aa64ee":"   # Missing Numerical Category Data\n   * After closely observing LotFrontage with LotConfig, It was found that empty cells in LotFront was filled with the mean valuses."}}