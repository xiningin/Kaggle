{"cell_type":{"266c4954":"code","648832cf":"code","2269bac3":"code","d1ec9fae":"code","c40d947d":"code","8976d26f":"code","748fb365":"code","6458ab8e":"code","6bfe59ab":"code","735d4844":"code","130ce296":"code","75327aa0":"code","bebf3d3a":"code","f68f6a5d":"code","86f243ee":"code","55dde3e8":"code","7fdab85e":"code","98f2531d":"code","aed932ab":"code","c38d9a4e":"code","ec87d3f6":"code","aee739c1":"code","d2b51e98":"code","758769da":"code","61d3c772":"code","453381a2":"code","3c50661a":"code","58fdc470":"code","121da992":"code","93421379":"code","de24462f":"code","8ffd1590":"code","0f931d66":"code","2abbc9b6":"code","66041a22":"code","310477a8":"code","09980b35":"code","c860bdb8":"code","f419b8a6":"code","5cb2aa2c":"code","e01d5d5a":"code","8b1a14d3":"code","b3f3edce":"code","7f7688d4":"markdown","b374ed07":"markdown","17edc774":"markdown","00157c11":"markdown","813fcc44":"markdown","eb34e022":"markdown","2ae4cec5":"markdown","d2ebbb22":"markdown","7014ecd3":"markdown","409d93d2":"markdown","0776057b":"markdown","155ae3e4":"markdown","ddcaa6d9":"markdown","e4c3bbf4":"markdown","eafe0742":"markdown","ac9ebffa":"markdown","bd788f3e":"markdown","6e099a3f":"markdown","2f5ad659":"markdown","3f445640":"markdown","8c07a51d":"markdown","54bed068":"markdown","77e6c91b":"markdown","c92a23a8":"markdown","4108f8c0":"markdown","d1c0388c":"markdown","298014fb":"markdown","cbec2088":"markdown","f83f9a6d":"markdown","9331ac79":"markdown","4a2acbdf":"markdown","c1c2e3ab":"markdown","ce26861b":"markdown","0b6f2ede":"markdown","7b3c6a7f":"markdown","ef8f0eb3":"markdown","cd9eb746":"markdown","4125b6fc":"markdown"},"source":{"266c4954":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom IPython.display import Image\nfrom IPython.core.display import HTML\n# Any results you write to the current directory are saved as output.\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)","648832cf":"Olympics_Master = pd.read_csv(\"..\/input\/athlete_events.csv\")\nOlympics_Region = pd.read_csv(\"..\/input\/noc_regions.csv\")\nOlympics_Master.head()","2269bac3":"Olympics_Master.describe()","d1ec9fae":"print(\"Dataset Shape\\nRows:{0}\\nColumns:{1}\".format(Olympics_Master.shape[0],Olympics_Master.shape[1]))","c40d947d":"sns.heatmap(Olympics_Master.isnull(), cbar=False)\nplt.show()","8976d26f":"import matplotlib as plt\nx = Olympics_Master.isnull().sum().to_frame()\nprint(x)","748fb365":"imp_col = ['Age','Height','Weight']\nfor col in  imp_col:\n    Olympics_Master[col] = Olympics_Master[col].fillna(np.mean(Olympics_Master[col]))\n    Olympics_Master[col] = np.round(Olympics_Master[col],1)","6458ab8e":"sns.heatmap(Olympics_Master.isnull(), cbar=False)","6bfe59ab":"df1 = Olympics_Master[Olympics_Master.Season=='Summer'].groupby(['Year']).sum()\ndf2 = Olympics_Master[Olympics_Master.Season=='Winter'].groupby(['Year']).sum()\ndf3 = Olympics_Master[Olympics_Master.Season=='Summer'].groupby(['Year'])['NOC'].nunique()\ndf4 = Olympics_Master[Olympics_Master.Season=='Winter'].groupby(['Year'])['NOC'].nunique()\ndf5 = Olympics_Master[Olympics_Master.Season=='Summer'].groupby(['Year'])['Event'].nunique()\ndf6 = Olympics_Master[Olympics_Master.Season=='Winter'].groupby(['Year'])['Event'].nunique()","735d4844":"import matplotlib.pyplot as plt\nplt.style.use('dark_background')\nfig,ax = plt.subplots(3,1)\nfig.tight_layout()\nfig.set_figheight(12)\nfig.set_figwidth(10)\n\nax[0].plot(df1.ID, marker = 'o', color = 'red', linestyle = '-')\nax[0].plot(df2.ID, marker = 'o', color = 'blue', linestyle = '-')\nax[0].set_title('Number of Athletes',fontsize=16)\nax[0].set_xlabel('Year',fontsize=14)\nax[0].set_ylabel('Athletes',fontsize=14)\nax[0].legend(['Summer','Winter'])\n#ax[0].grid(b=True, which='major', color='white')\n\nax[1].plot(df3, marker = '*',color='red')\nax[1].plot(df4, marker='*',color='blue')\nax[1].set_title('Number of Nations',fontsize=16)\nax[1].set_xlabel('Year',fontsize=14)\nax[1].set_ylabel('Nations',fontsize=14)\nax[1].legend(['Summer','Winter'])\n#ax[1].grid(b=True, which='major', color='white')\n\nax[2].plot(df5, marker = '*',color='red')\nax[2].plot(df6, marker='*',color='blue')\nax[2].set_title('Number of Athletes',fontsize=16)\nax[2].set_xlabel('Year',fontsize=14)\nax[2].set_ylabel('Events',fontsize=14)\nax[2].legend(['Summer','Winter'])\n#ax[2].grid(b=True, which='major', color='white')\nplt.show()","130ce296":"df0 = Olympics_Master[Olympics_Master.Sport=='Art Competitions'].groupby(['Year'])['Event'].nunique()\ndf1 = Olympics_Master[Olympics_Master.Sport=='Art Competitions'].groupby(['Year'])['NOC'].nunique()\ndf2 = Olympics_Master[Olympics_Master.Sport=='Art Competitions'].groupby(['Year'])['ID'].nunique()","75327aa0":"plt.style.use('ggplot')\nfig, ax = plt.subplots(3,1)\nfig.tight_layout()\nfig.set_figheight(12)\nfig.set_figwidth(10)\n\nax[0].plot(df0, marker = 'o', color='black')\nax[0].set_ylabel('Events', fontsize='14', fontdict=dict(weight='bold'))\n\nax[1].plot(df1, marker = 'o', color='black')\nax[1].set_ylabel('Nations', fontsize='14', fontdict=dict(weight='bold'))\n\nax[2].plot(df2, marker = 'o', color='black')\nax[2].set_ylabel('Artists', fontsize='14', fontdict=dict(weight='bold'))\nax[2].set_xlabel('Year', fontsize='14', fontdict=dict(weight='bold'))\nplt.show()","bebf3d3a":"from matplotlib import rcParams\nrcParams['figure.figsize'] = 16,8\n#df0 = Olympics_Master[Olympics_Master['Medal'].notnull()].groupby(['Team'])['Medal'].value_counts()\ndf0 = Olympics_Master[(Olympics_Master['Medal'].notnull()) & (Olympics_Master['Sport'] =='Art Competitions')].groupby(['Team'])['Medal'].value_counts()\ndf0 = df0.reset_index(level=0)\ndf0.rename(columns={'Medal': 'Count'}, inplace=True)\ndf0 = df0.reset_index()\ndf0.head()","f68f6a5d":"sns.set_style(\"darkgrid\", {\"axes.facecolor\": \".9\"})\ndf0 = Olympics_Master[(Olympics_Master['Medal'].notnull()) & (Olympics_Master['Sport'] =='Art Competitions')].groupby('Team').count().reset_index()[['Team','Medal']]\ndf0 = df0.sort_values(by=['Medal'],ascending=False)\nfig = sns.barplot(x='Medal', y='Team',data=df0,palette='dark')\n\nfig.set_xlabel(\"Count\",fontsize=16)\nfig.set_ylabel(\"Team\",fontsize=16)\nfig.set_title('Historical Medal Counts from Art Competitions',fontsize=16)\nplt.show()","86f243ee":"sns.set_style(\"darkgrid\", {\"axes.facecolor\": \".9\"})\ndf0 = Olympics_Master[(Olympics_Master['Medal'].notnull()) & (Olympics_Master['Sport'] =='Art Competitions') & (Olympics_Master['Year'] ==1936)].groupby('Team').count().reset_index()[['Team','Medal']]\ndf0 = df0.sort_values(by=['Medal'],ascending=False)\nfig = sns.barplot(x='Medal', y='Team',data=df0,palette='dark')\nfig.set_xlabel(\"Count\",fontsize=16)\nfig.set_ylabel(\"Team\",fontsize=16)\nfig.set_title('Nazi Domination of Art Competitions at the 1936 Olymics',fontsize=16)\nplt.show()","55dde3e8":"original = [1994,1998,2002,2006,2010,2014]\nfor i in Olympics_Master.index:\n    if (Olympics_Master.at[i, 'Year'] in original):\n        Olympics_Master.at[i, 'Year'] =   Olympics_Master.at[i, 'Year'] + 2","7fdab85e":"print(Olympics_Master.Year.unique())","98f2531d":"df0 = Olympics_Master[(Olympics_Master.Sex=='M')&(Olympics_Master.Sport !='Art Competitions')].groupby([\"Year\"])['ID'].nunique()\ndf0 = df0.reset_index()\ndf1 = Olympics_Master[(Olympics_Master.Sex=='F')&(Olympics_Master.Sport !='Art Competitions')].groupby([\"Year\"])['ID'].nunique()\ndf1 = df1.reset_index()\nfig, ax = plt.subplots()\nax.plot(df0.Year, df0.ID,marker ='o',color='blue',label='M')\nax.plot(df1.Year, df1.ID, marker ='o',color='red',label='F')\nax.legend()\nax.set_xlabel('Year', fontsize=14)\nax.set_ylabel('Athletes',fontsize=14)\nax.set_title('Number of Male and Female Olympians Over Time',fontsize=16)\nplt.show()","aed932ab":"df0 = Olympics_Master[(Olympics_Master.Sport !='Art Competitions')].groupby([\"Year\", \"NOC\", \"Sex\"])['ID'].nunique().to_frame()\ndf0 = df0.reset_index()\n\nYearsPlt = [2016,1996,1976,1956,1936]  ## To be plotted data for Years\nfor i in df0.index:\n    if (df0.at[i, 'Year'] not in YearsPlt):\n        df0.drop([i], inplace=True)","c38d9a4e":"dM = df0[df0.Sex=='M']\ndF = df0[df0.Sex=='F']\ndF = dF.drop(['Sex'], axis=1)\ndM = dM.drop(['Sex'], axis=1)\ndF = dF.rename(columns={\"ID\": \"Female\"})\ndM = dM.rename(columns={\"ID\": \"Male\"})\n\ndPlot = pd.merge(dF, dM, how='inner', on=['Year', 'NOC'])\ndPlot.head()","ec87d3f6":"fig = sns.lmplot(x='Male',y='Female',data=dPlot,hue='Year',palette='muted',height=8,aspect=1.5,truncate=True)\nfig.set(ylim=(-25, 425), xlim=(0, 500))\nplt.title(\"Female vs Male Plympians from partiipating NOCs\", fontsize=16)\nplt.show()","aee739c1":"# Manipulating dataset to calcuate Women Athlete Count and Medal Ratios\ndf = Olympics_Master[Olympics_Master.Year == 1936].groupby(['Year', 'NOC', 'Sex']).agg({'ID' : 'nunique','Medal' : 'count'})\ndf = df.reset_index()\n\ndF = df[df.Sex=='F']\ndM = df[df.Sex=='M']\n\ndF = dF.rename(columns={\"ID\": \"Athletes_F\", \"Medal\":\"Medal_F\"})\ndM = dM.rename(columns={\"ID\": \"Athletes_M\", \"Medal\":\"Medal_M\"})\n\ndF = dF.drop(['Sex'], axis=1)\ndM = dM.drop(['Sex'], axis=1)\n\ndPlot = pd.merge(dF, dM, how='inner', on=['Year', 'NOC'])\ndPlot = dPlot[(dPlot.Athletes_F + dPlot.Athletes_M)>49]\n\ndPlot['Ratio1'] = dPlot.Athletes_F\/(dPlot.Athletes_F+dPlot.Athletes_M)\ndPlot['Ratio2'] = dPlot.Medal_F\/(dPlot.Medal_F+dPlot.Medal_M)\ndPlot = dPlot.sort_values('Ratio1')\n# dPlot.head()","d2b51e98":"plt.scatter(x='Ratio1',y='NOC',data=dPlot,color='black',label='Athletes')\nplt.scatter(x='Ratio2',y='NOC',data=dPlot,color='gold',label='Medals')\nplt.xlim(-0.05,1)\nplt.legend(bbox_to_anchor=(1.15, 0.5), fontsize=14)\nplt.xticks(np.arange(0, 1, step=0.25))\nplt.title('1936 Olympics',fontsize=18)\nplt.xlabel('Proportion Female', fontsize=16)\nplt.ylabel('NOC', fontsize=16)\nplt.show()","758769da":"df_1936 = Olympics_Master[(Olympics_Master.Year == 1936) & (Olympics_Master.Sex == 'F')].dropna()\ndf_1936 = df_1936.groupby(['NOC','Medal']).agg({'Medal':'count'})\ndf_1936 = df_1936.rename(columns = {'Medal':'Count'})\ndf_1936 = df_1936.reset_index()","61d3c772":"# Adding Count zero for .. Tweaking dataset inorder to get stacked bar plot in matplotlib.\nfor n in df_1936.NOC.unique():\n    if(df_1936[(df_1936.NOC == n)&(df_1936.Medal == 'Silver')]).empty:\n        df_1936.loc[-1] = [n, 'Silver', 0]  # adding a row\n        df_1936.index = df_1936.index + 1  # shifting index\n        df_1936 = df_1936.sort_index()  # sorting by index.\n        \nfor n in df_1936.NOC.unique():\n    if(df_1936[(df_1936.NOC == n)&(df_1936.Medal == 'Gold')]).empty:\n        df_1936.loc[-1] = [n, 'Gold', 0]  # adding a row\n        df_1936.index = df_1936.index + 1  # shifting index\n        df_1936 = df_1936.sort_index()  # sorting by index.\n        \nfor n in df_1936.NOC.unique():\n    if(df_1936[(df_1936.NOC == n)&(df_1936.Medal == 'Bronze')]).empty:\n        df_1936.loc[-1] = [n, 'Bronze', 0]  # adding a row\n        df_1936.index = df_1936.index + 1  # shifting index\n        df_1936 = df_1936.sort_index()  # sorting by index.\n        \n#Sort Values in Order of NOC        \ndf_1936 = df_1936.sort_values(by='NOC')\n\n#Setting width and left parameter for stacked barplot\nC_Gold =df_1936[df_1936.Medal=='Gold']['Count']\nC_Silver = df_1936[df_1936.Medal=='Silver']['Count']\nC_Bronze = df_1936[df_1936.Medal=='Bronze']['Count']\nB_bottom = [sum(x) for x in zip(df_1936[df_1936.Medal=='Gold']['Count'].tolist(), df_1936[df_1936.Medal=='Silver']['Count'].tolist())]\n\n#creating stacked bar plot\nplt.barh(y=(df_1936[df_1936.Medal=='Gold']['NOC']), width=C_Gold,label='Gold',color='#D4AF37')\nplt.barh(y=df_1936[df_1936.Medal=='Silver']['NOC'], width=C_Silver, left=C_Gold,label='Silver',color='silver')\nplt.barh(y=df_1936[df_1936.Medal=='Bronze']['NOC'], width=C_Bronze,left=B_bottom,label='Bronze',color='#CD7F32')\n\n#Manipulating Labels\nplt.legend(fontsize=16)\nplt.xlabel('Medal Count', fontsize=14)\nplt.ylabel('NOC', fontsize=14)\nplt.title('Medal Count For Women at 1936 Olympics',fontsize=16)\nplt.show()","453381a2":"# Manipulating dataset to calcuate Women Athlete Count and Medal Ratios\ndf = Olympics_Master[Olympics_Master.Year == 1976].groupby(['Year', 'NOC', 'Sex']).agg({'ID' : 'nunique','Medal' : 'count'})\ndf = df.reset_index()\n\ndF = df[df.Sex=='F']\ndM = df[df.Sex=='M']\n\ndF = dF.rename(columns={\"ID\": \"Athletes_F\", \"Medal\":\"Medal_F\"})\ndM = dM.rename(columns={\"ID\": \"Athletes_M\", \"Medal\":\"Medal_M\"})\n\ndF = dF.drop(['Sex'], axis=1)\ndM = dM.drop(['Sex'], axis=1)\n\ndPlot = pd.merge(dF, dM, how='inner', on=['Year', 'NOC'])\ndPlot = dPlot[(dPlot.Athletes_F + dPlot.Athletes_M)>49]\n\ndPlot['Ratio1'] = dPlot.Athletes_F\/(dPlot.Athletes_F+dPlot.Athletes_M)\ndPlot['Ratio2'] = dPlot.Medal_F\/(dPlot.Medal_F+dPlot.Medal_M)\ndPlot = dPlot.sort_values('Ratio1')\n# dPlot.head()\n\nplt.scatter(x='Ratio1',y='NOC',data=dPlot,color='black',label='Athletes')\nplt.scatter(x='Ratio2',y='NOC',data=dPlot,color='gold',label='Medals')\nplt.xlim(-0.05,1)\nplt.legend(bbox_to_anchor=(1.15, 0.5), fontsize=14)\nplt.xticks(np.arange(0, 1, step=0.25))\nplt.title('1976 Olympics',fontsize=18)\nplt.xlabel('Proportion Female', fontsize=16)\nplt.ylabel('NOC', fontsize=16)\nplt.show()","3c50661a":"df_1976 = Olympics_Master[(Olympics_Master.Year == 1976) & (Olympics_Master.Sex == 'F')].dropna()\ndf_1976 = df_1976.groupby(['NOC','Medal']).agg({'Medal':'count'})\ndf_1976 = df_1976.rename(columns = {'Medal':'Count'})\ndf_1976 = df_1976.reset_index()\n\n# Adding Count zero for .. Tweaking dataset inorder to get stacked bar plot in matplotlib.\nfor n in df_1976.NOC.unique():\n    if(df_1976[(df_1976.NOC == n)&(df_1976.Medal == 'Silver')]).empty:\n        df_1976.loc[-1] = [n, 'Silver', 0]  # adding a row\n        df_1976.index = df_1976.index + 1  # shifting index\n        df_1976 = df_1976.sort_index()  # sorting by index.\n        \nfor n in df_1976.NOC.unique():\n    if(df_1976[(df_1976.NOC == n)&(df_1976.Medal == 'Gold')]).empty:\n        df_1976.loc[-1] = [n, 'Gold', 0]  # adding a row\n        df_1976.index = df_1976.index + 1  # shifting index\n        df_1976 = df_1976.sort_index()  # sorting by index.\n        \nfor n in df_1976.NOC.unique():\n    if(df_1976[(df_1976.NOC == n)&(df_1976.Medal == 'Bronze')]).empty:\n        df_1976.loc[-1] = [n, 'Bronze', 0]  # adding a row\n        df_1976.index = df_1976.index + 1  # shifting index\n        df_1976 = df_1976.sort_index()  # sorting by index.\n        \n#Sort Values in Order of NOC        \ndf_1976 = df_1976.sort_values(by='NOC')\n\n#Setting width and left parameter for stacked barplot\nC_Gold =df_1976[df_1976.Medal=='Gold']['Count']\nC_Silver =df_1976[df_1976.Medal=='Silver']['Count']\nC_Bronze = df_1976[df_1976.Medal=='Bronze']['Count']\nB_bottom = [sum(x) for x in zip(df_1976[df_1976.Medal=='Gold']['Count'].tolist(), df_1976[df_1976.Medal=='Silver']['Count'].tolist())]\n\n#creating stacked bar plot\nplt.barh(y=(df_1976[df_1976.Medal=='Gold']['NOC']), width=C_Gold,label='Gold',color='#D4AF37')\nplt.barh(y=df_1976[df_1976.Medal=='Silver']['NOC'], width=C_Silver, left=C_Gold,label='Silver',color='silver')\nplt.barh(y=df_1976[df_1976.Medal=='Bronze']['NOC'], width=C_Bronze,left=B_bottom,label='Bronze',color='#CD7F32')\n\n#Manipulating Labels\nplt.legend(fontsize=16)\nplt.xlabel('Medal Count', fontsize=14)\nplt.ylabel('NOC', fontsize=14)\nplt.title('Medal Count For Women at 1976 Olympics',fontsize=16)\nplt.show()","58fdc470":"# Manipulating dataset to calcuate Women Athlete Count and Medal Ratios\ndf = Olympics_Master[Olympics_Master.Year == 2016].groupby(['Year', 'NOC', 'Sex']).agg({'ID' : 'nunique','Medal' : 'count'})\ndf = df.reset_index()\n\ndF = df[df.Sex=='F']\ndM = df[df.Sex=='M']\n\ndF = dF.rename(columns={\"ID\": \"Athletes_F\", \"Medal\":\"Medal_F\"})\ndM = dM.rename(columns={\"ID\": \"Athletes_M\", \"Medal\":\"Medal_M\"})\n\ndF = dF.drop(['Sex'], axis=1)\ndM = dM.drop(['Sex'], axis=1)\n\ndPlot = pd.merge(dF, dM, how='inner', on=['Year', 'NOC'])\ndPlot = dPlot[(dPlot.Athletes_F + dPlot.Athletes_M)>49]\n\ndPlot['Ratio1'] = dPlot.Athletes_F\/(dPlot.Athletes_F+dPlot.Athletes_M)\ndPlot['Ratio2'] = dPlot.Medal_F\/(dPlot.Medal_F+dPlot.Medal_M)\ndPlot = dPlot.sort_values('Ratio1')\n# dPlot.head()\n\nplt.figure(figsize=(12,20))\nplt.scatter(x='Ratio1',y='NOC',data=dPlot,color='black',label='Athletes')\nplt.scatter(x='Ratio2',y='NOC',data=dPlot,color='gold',label='Medals')\nplt.xlim(-0.05,1)\nplt.legend(bbox_to_anchor=(1.2, 0.5), fontsize=14)\nplt.xticks(np.arange(0, 1, step=0.25))\nplt.title('2016 Olympics',fontsize=18)\nplt.xlabel('Proportion Female', fontsize=16)\nplt.ylabel('NOC', fontsize=16)\nplt.show()","121da992":"df_2016 = Olympics_Master[(Olympics_Master.Year == 2016) & (Olympics_Master.Sex == 'F')].dropna()\ndf_2016 = df_2016.groupby(['NOC','Medal']).agg({'Medal':'count'})\ndf_2016 = df_2016.rename(columns = {'Medal':'Count'})\ndf_2016 = df_2016.reset_index()\n\n# Adding Count zero for .. Tweaking dataset inorder to get stacked bar plot in matplotlib.\nfor n in df_2016.NOC.unique():\n    if(df_2016[(df_2016.NOC == n)&(df_2016.Medal == 'Silver')]).empty:\n        df_2016.loc[-1] = [n, 'Silver', 0]  # adding a row\n        df_2016.index = df_2016.index + 1  # shifting index\n        df_2016 = df_2016.sort_index()  # sorting by index.\n        \nfor n in df_2016.NOC.unique():\n    if(df_2016[(df_2016.NOC == n)&(df_2016.Medal == 'Gold')]).empty:\n        df_2016.loc[-1] = [n, 'Gold', 0]  # adding a row\n        df_2016.index = df_2016.index + 1  # shifting index\n        df_2016 = df_2016.sort_index()  # sorting by index.\n        \nfor n in df_2016.NOC.unique():\n    if(df_2016[(df_2016.NOC == n)&(df_2016.Medal == 'Bronze')]).empty:\n        df_2016.loc[-1] = [n, 'Bronze', 0]  # adding a row\n        df_2016.index = df_2016.index + 1  # shifting index\n        df_2016 = df_2016.sort_index()  # sorting by index.\n        \n#Sort Values in Order of NOC        \ndf_2016 = df_2016.sort_values(by='NOC')\n\n#Setting width and left parameter for stacked barplot\nC_Gold =df_2016[df_2016.Medal=='Gold']['Count']\nC_Silver =df_2016[df_2016.Medal=='Silver']['Count']\nC_Bronze = df_2016[df_2016.Medal=='Bronze']['Count']\nB_bottom = [sum(x) for x in zip(df_2016[df_2016.Medal=='Gold']['Count'].tolist(), df_2016[df_2016.Medal=='Silver']['Count'].tolist())]\n\n#creating stacked bar plot\nplt.figure(figsize=(12,20))\nplt.barh(y=(df_2016[df_2016.Medal=='Gold']['NOC']), width=C_Gold,label='Gold',color='#D4AF37')\nplt.barh(y=df_2016[df_2016.Medal=='Silver']['NOC'], width=C_Silver, left=C_Gold,label='Silver',color='silver')\nplt.barh(y=df_2016[df_2016.Medal=='Bronze']['NOC'], width=C_Bronze,left=B_bottom,label='Bronze',color='#CD7F32')\n\n#Manipulating Labels\nplt.legend(fontsize=16)\nplt.xlabel('Medal Count', fontsize=14)\nplt.ylabel('NOC', fontsize=14)\nplt.title('Medal Count For Women at 2016 Olympics',fontsize=16)\nplt.show()","93421379":"df_1928 = Olympics_Master[Olympics_Master.Games =='1928 Summer'].groupby(['NOC']).agg({'ID':'nunique'})\ndf_1928 = df_1928.reset_index()\ndf_1928 = pd.merge(df_1928, Olympics_Region, how='left', on=['NOC'])\n#df_1928.head()\ndf_1928.drop(axis=1, columns=(['notes']),inplace=True)\n\n\ndf_1928 = df_1928.dropna()\ndf_1928.sort_values(by='NOC',ascending=True,inplace=True)\n#df_1928.head()\n\ndata = dict(\n        type = 'choropleth',\n        locations = df_1928['NOC'],\n        z = df_1928['ID'],\n        colorscale='Reds',\n        colorbar = {'title' : 'Athletes'},\n      ) \n\nlayout = dict(\n    title = '1928 Olympics',\n    geo = dict(\n        showframe = False,\n        projection = {'type':'natural earth'}\n    )\n)\n\n\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap)","de24462f":"df_1972 = Olympics_Master[Olympics_Master.Games =='1972 Summer'].groupby(['NOC']).agg({'ID':'nunique'})\ndf_1972 = df_1972.reset_index()\ndf_1972 = pd.merge(df_1972, Olympics_Region, how='left', on=['NOC'])\n#df_1972.head()\ndf_1972.drop(axis=1, columns=(['notes']),inplace=True)\n\n\ndf_1972 = df_1972.dropna()\ndf_1972.sort_values(by='NOC',ascending=True,inplace=True)\n#df_1972.head()\n\ndata = dict(\n        type = 'choropleth',\n        locations = df_1972['NOC'],\n        z = df_1972['ID'],\n        colorscale='Reds',\n        colorbar = {'title' : 'Athletes'},\n      ) \n\nlayout = dict(\n    title = '1972 Olympics',\n    geo = dict(\n        showframe = False,\n        projection = {'type':'natural earth'}\n    )\n)\n\n\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap)","8ffd1590":"df_2016 = Olympics_Master[Olympics_Master.Games =='2016 Summer'].groupby(['NOC']).agg({'ID':'nunique'})\ndf_2016 = df_2016.reset_index()\ndf_2016 = pd.merge(df_2016, Olympics_Region, how='left', on=['NOC'])\n#df_2016.head()\ndf_2016.drop(axis=1, columns=(['notes']),inplace=True)\n\n\ndf_2016 = df_2016.dropna()\ndf_2016.sort_values(by='NOC',ascending=True,inplace=True)\n#df_2016.head()\n\ndata = dict(\n        type = 'choropleth',\n        locations = df_2016['NOC'],\n        z = df_2016['ID'],\n        colorscale='Reds',\n        colorbar = {'title' : 'Athletes'},\n      ) \n\nlayout = dict(\n    title = '2016 Olympics',\n    height=600, width=900,\n    autosize=True,\n    geo = dict(\n        showframe = True,\n        projection = {'type':'mercator'}\n    )\n)     \nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap)","0f931d66":"sns.boxplot(data=Olympics_Master[Olympics_Master.Year>=1960],y='Height',x='Year',hue='Sex',width=0.5)\nplt.show()","2abbc9b6":"sns.boxplot(data=Olympics_Master[Olympics_Master.Year>=1960],y='Weight',x='Year',hue='Sex',width=0.5)\nplt.show()","66041a22":"Olympics_India = Olympics_Master[Olympics_Master.NOC=='IND'].reset_index(drop=True)","310477a8":"Olympics_India.head()","09980b35":"print('India first participated at the Olympic Games in {}'.format(Olympics_India['Year'].min()))\n\nprint('with a {} athlete (Norman Pritchard) winning two medals- both silver- in athletics.'.format(Olympics_India[Olympics_India.Year == 1900]['ID'].nunique()))\n\nprint('Total number if medals: {}'.format(Olympics_India[Olympics_India.Year == 1900]['Medal'].count()))\n\nprint('First appearance at Winter Olympics: {}'.format(Olympics_India[Olympics_India.Season == 'Winter']['Year'].min()))","c860bdb8":"import IPython\nurl = 'https:\/\/en.wikipedia.org\/wiki\/India_at_the_Olympics#List_of_competitors'\niframe = '<iframe src=' + url + ' width=1200 height=350><\/iframe>'\nIPython.display.HTML(iframe)","f419b8a6":"India_Summer = Olympics_India[Olympics_India.Season=='Summer']\nIndia_Winter = Olympics_India[Olympics_India.Season=='Winter']","5cb2aa2c":"Sports = India_Summer.groupby(['Year']).agg({'Sport': lambda x: len(x.unique())}).reset_index()\n\nMen = India_Summer[India_Summer.Sex=='M'].groupby(['Year']).agg({'ID': lambda x: len(x.unique())}).reset_index()\nMen.columns = ['Year','Men']\nWomen = India_Summer[India_Summer.Sex=='F'].groupby(['Year']).agg({'ID': lambda x: len(x.unique())}).reset_index()\nWomen.columns = ['Year','Women']\n\nGold = India_Summer[India_Summer.Medal=='Gold'].groupby(['Year']).agg({'Medal': len}).reset_index()\nGold.columns = ['Year','Gold']\nSilver = India_Summer[India_Summer.Medal=='Silver'].groupby(['Year']).agg({'Medal': len}).reset_index()\nSilver.columns = ['Year','Silver']\nBronze = India_Summer[India_Summer.Medal=='Bronze'].groupby(['Year']).agg({'Medal': len}).reset_index()\nBronze.columns = ['Year','Bronze']\n\n# This approach doesn't seem to be efficient. I want to do this using the pivot_table function. \n#Will update same once achieved. Looking for suggestions.","e01d5d5a":"from functools import reduce\ndfs = [Sports, Men, Women,Gold,Silver,Bronze]\ndf_final = reduce(lambda left,right: pd.merge(left,right,on='Year',how='outer'), dfs).fillna(0).astype(int)\ndf_final","8b1a14d3":"Sports = India_Winter.groupby(['Year']).agg({'Sport': lambda x: len(x.unique())}).reset_index()\n\nMen = India_Winter[India_Winter.Sex=='M'].groupby(['Year']).agg({'ID': lambda x: len(x.unique())}).reset_index()\nMen.columns = ['Year','Men']\nWomen = India_Winter[India_Winter.Sex=='F'].groupby(['Year']).agg({'ID': lambda x: len(x.unique())}).reset_index()\nWomen.columns = ['Year','Women']\n\nGold = India_Winter[India_Winter.Medal=='Gold'].groupby(['Year']).agg({'Medal': len}).reset_index()\nGold.columns = ['Year','Gold']\nSilver = India_Winter[India_Winter.Medal=='Silver'].groupby(['Year']).agg({'Medal': len}).reset_index()\nSilver.columns = ['Year','Silver']\nBronze = India_Winter[India_Winter.Medal=='Bronze'].groupby(['Year']).agg({'Medal': len}).reset_index()\nBronze.columns = ['Year','Bronze']\n\ndfs = [Sports, Men, Women,Gold,Silver,Bronze]\ndf_final = reduce(lambda left,right: pd.merge(left,right,on='Year',how='outer'), dfs).fillna(0).astype(int)\ndf_final","b3f3edce":"df1 = Olympics_India[Olympics_India.Season=='Summer'].groupby(['Year']).sum()\ndf2 = Olympics_India[Olympics_India.Season=='Winter'].groupby(['Year']).sum()\n\nfig,ax = plt.subplots()\nplt.style.use('grayscale')\nfig.set_figheight(4)\nfig.set_figwidth(12)\nfig.tight_layout()\nax.plot(df1.ID, marker = 'o', color = 'red', linestyle = '-')\nax.plot(df2.ID, marker = 'o', color = 'blue', linestyle = '-')\nax.set_title('Number of Athletes',fontsize=16)\nax.set_xlabel('Year',fontsize=14)\nax.set_ylabel('Athletes',fontsize=14)\nax.legend(['Summer','Winter'])\nplt.show()\n","7f7688d4":"## Medal counts for women of different nations: 1976","b374ed07":"### Imputing Null Values with Mean\nWorking with Null values of Field Age, Height, Weight might be problemaatic to work with.\nNull fields can be imputed with mean value of column.","17edc774":"## Calculating TeamWise Medal Count","00157c11":"## Nazis crush the 1936 Art Competitions","813fcc44":"**Hello Everyone,\nThanks for checking out my kernel.\nIn this kernel I am going to perform EDA  of 120 years of Olympic history: athletes and results.**\n\nI am new to Data Science and have been learning through online courses.\nThis is my first Kernel and Purpose of this kernel is  to improve what I learned through these courses and become more confident in Visualization Techniques.\n\nThis kernel is inspired from and  can be considered as Python version of R code in below kernel.\nhttps:\/\/www.kaggle.com\/heesoo37\/olympic-history-data-a-thorough-analysis\n\nThis way it was easier for me to validate what I am doing as a learner.\n\nI believe there is a better and efficient way to perform the task I have done.\nPlease fill free to give suggestion where my code can be improved.\n\n### UPDATE:  \n\n<a href=\"#India-at-the-Olympics\" target=\"_self\"><span class=\"toc-section-number\">1<\/span> \"How India performed over  120 years of Olympics.\"<\/a>","eb34e022":"## Medal counts for women of different nations: 1936","2ae4cec5":"## Proportion of women on Olympic teams: 2016","d2ebbb22":"**Updating Kernel... :)**\n\n**If you like my work so far.. Please Upvote , Share your comments\/opinions...**","7014ecd3":"# India at the Olympics","409d93d2":"## 1972 Olympics","0776057b":"### List of competitors : Winter Olympics","155ae3e4":"## Which countries won the most art medals?","ddcaa6d9":"### Getting Dimensions of DataSet","e4c3bbf4":"## 1928 Olympics","eafe0742":"# Geographic representations for 1928, 1972, 2016","ac9ebffa":"### Importing data from CSV files\n### Looking into head of Events dataframe","bd788f3e":"## Number of women relative to men across countries","6e099a3f":"# Exploratory Data Analysis","2f5ad659":"## Number of men and women over time\n\n Recode year of Winter Games after 1992 to match the next Summer Games\nThus, \"Year\" now applies to the Olympiad in which each Olympics occurred ","3f445640":"### Gender Wise count of Athletes for different NOC's","8c07a51d":" ## How the number of athletes, nations, and events changed over time?","54bed068":"## Visualization of Null Values in DataSet\nSince data ranges from 1896 to 2016. There is possibility that  few field values are missing from data set.\nLet's have a look at heatmap of Dataframe","77e6c91b":"## Proportion of women on Olympic teams: 1976","c92a23a8":"---","4108f8c0":"## Numer of events, nations, and artists over time","d1c0388c":"### Verifying Years Have Been Modified Successfully","298014fb":"There is clearly issue with Medal count. For some years Medal count in around 15.  This is because For each hockey team medal is counted 14 times. \nThis needs to be fixed.","cbec2088":"\n### Trend Over Years","f83f9a6d":"## Proportion of women on Olympic teams: 1936","9331ac79":"## Medal counts for women of different nations: 2016","4a2acbdf":"### HeatMap of Null Values in DataFrame after imputing \nOnce missing field values are imputed, let's again visualize heamap of dataframe.\nPlease note values are not imputed for the Column 'Medal'.","c1c2e3ab":"**Now we got interesting task to do. Lets validate Wikipedia story from given data.\nI think this may bring some challanges and will be more interesting to work instead of  keep visualizing ALL_X vs ALL_Y.**\n![image.png](attachment:image.png)\n\n**New Chapter Name:** \n## India at the Olympics - Building Wikipedia Story","ce26861b":"## History as Wikipedia tells it\n\n        India first participated at the Olympic Games in 1900, with a lone athlete (Norman Pritchard) winning two medals- both silver- in athletics. The nation first sent a team to the Summer Olympic Games in 1920, and has participated in every Summer Games since then. India has also competed at several Winter Olympic Games beginning in 1964. Indian athletes have won a total of 28 medals so far, all at the Summer Games. For a period of time, India national field hockey team was dominant in Olympic competition, winning eleven medals in twelve Olympics between 1920 and 1980. The run included 8 gold medals total and six successive gold medals from 1928\u20131956.\n","0b6f2ede":"## 2016 Olympics","7b3c6a7f":"### Field Wise Count of Null Values","ef8f0eb3":"Let's validate first line about India At Olympics  from Wikipedia. ","cd9eb746":"**Lets Start with Building Following Section of Wikipedia**","4125b6fc":"## Variation of Height and Weight "}}