{"cell_type":{"775f6767":"code","893f43a0":"code","880d9f7e":"code","e20196c5":"code","eda683a2":"code","61b38793":"code","c1a74975":"code","69a00a4f":"code","e358092e":"code","38c6648a":"code","2024b42b":"code","7b3ce66c":"code","3acc2825":"code","9ce068ea":"code","0cb0535d":"code","8f237e09":"code","c347e884":"code","606e11a4":"code","49edc018":"code","a11a4960":"code","e4aae079":"code","680cbbfb":"code","923b4f16":"code","11c637f7":"code","c1c9492a":"code","81cc75d3":"code","68332a53":"code","3e4c9b0d":"code","fcc866a0":"code","6685c5d6":"code","33c69429":"code","ede0c0d5":"code","8da2575e":"code","38e32b60":"code","f8defc20":"code","c09d0f98":"code","349ec71f":"code","7681f32e":"code","ad7bb27e":"code","4f144746":"code","59f2eeff":"code","54bef8a1":"code","1f703bd4":"code","48d2e164":"code","0b990fba":"code","cc67ca3f":"code","47c94e87":"code","ddacf701":"code","741c43a7":"code","68ecc183":"code","0b0bc3a3":"code","a4626468":"code","8709e32b":"markdown"},"source":{"775f6767":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","893f43a0":"import os\nimport torch\nimport torchvision\nimport tarfile\nfrom torchvision.datasets.utils import download_url\nfrom torch.utils.data import random_split","880d9f7e":"project_name='05-cifar10-cnn'","e20196c5":"# Dowload the dataset\ndataset_url = \"https:\/\/s3.amazonaws.com\/fast-ai-imageclas\/cifar10.tgz\"\ndownload_url(dataset_url, '.')","eda683a2":"# Extract from archive\nwith tarfile.open('.\/cifar10.tgz', 'r:gz') as tar:\n    tar.extractall(path='.\/data')","61b38793":"data_dir = '.\/data\/cifar10'\n\nprint(os.listdir(data_dir))\nclasses = os.listdir(data_dir + \"\/train\")\nprint(classes)","c1a74975":"airplane_files = os.listdir(data_dir + \"\/train\/airplane\")\nprint('No. of training examples for airplanes:', len(airplane_files))\nprint(airplane_files[:5])","69a00a4f":"ship_test_files = os.listdir(data_dir + \"\/test\/ship\")\nprint(\"No. of test examples for ship:\", len(ship_test_files))\nprint(ship_test_files[:5])","e358092e":"from torchvision.datasets import ImageFolder\nfrom torchvision.transforms import ToTensor","38c6648a":"dataset = ImageFolder(data_dir+'\/train', transform=ToTensor())","2024b42b":"img, label = dataset[0]\nprint(img.shape, label)\nimg","7b3ce66c":"print(dataset.classes)","3acc2825":"import matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nmatplotlib.rcParams['figure.facecolor'] = '#ffffff'","9ce068ea":"\ndef show_example(img, label):\n    print('Label: ', dataset.classes[label], \"(\"+str(label)+\")\")\n    plt.imshow(img.permute(1, 2, 0))","0cb0535d":"show_example(*dataset[0])","8f237e09":"show_example(*dataset[1222])","c347e884":"random_seed = 42\ntorch.manual_seed(random_seed);","606e11a4":"val_size = 5000\ntrain_size = len(dataset) - val_size\n\ntrain_ds, val_ds = random_split(dataset, [train_size, val_size])\nlen(train_ds), len(val_ds)","49edc018":"from torch.utils.data.dataloader import DataLoader\n\nbatch_size=128","a11a4960":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=4, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=4, pin_memory=True)","e4aae079":"from torchvision.utils import make_grid\n\ndef show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 6))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images, nrow=16).permute(1, 2, 0))\n        break","680cbbfb":"show_batch(train_dl)","923b4f16":"def apply_kernel(image, kernel):\n    ri, ci = image.shape       # image dimensions\n    rk, ck = kernel.shape      # kernel dimensions\n    ro, co = ri-rk+1, ci-ck+1  # output dimensions\n    output = torch.zeros([ro, co])\n    for i in range(ro): \n        for j in range(co):\n            output[i,j] = torch.sum(image[i:i+rk,j:j+ck] * kernel)\n    return output","11c637f7":"sample_image = torch.tensor([\n    [3, 3, 2, 1, 0], \n    [0, 0, 1, 3, 1], \n    [3, 1, 2, 2, 3], \n    [2, 0, 0, 2, 2], \n    [2, 0, 0, 0, 1]\n], dtype=torch.float32)\n\nsample_kernel = torch.tensor([\n    [0, 1, 2], \n    [2, 2, 0], \n    [0, 1, 2]\n], dtype=torch.float32)\n\napply_kernel(sample_image, sample_kernel)","c1c9492a":"import torch.nn as nn\nimport torch.nn.functional as F","81cc75d3":"simple_model = nn.Sequential(\n    nn.Conv2d(3, 8, kernel_size=3, stride=1, padding=1),\n    nn.MaxPool2d(2, 2)\n)","68332a53":"for images, labels in train_dl:\n    print('images.shape:', images.shape)\n    out = simple_model(images)\n    print('out.shape:', out.shape)\n    break","3e4c9b0d":"class ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_acc']))\n        \ndef accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))","fcc866a0":"class Cifar10CnnModel(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 64 x 16 x 16\n\n            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 128 x 8 x 8\n\n            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 256 x 4 x 4\n\n            nn.Flatten(), \n            nn.Linear(256*4*4, 1024),\n            nn.ReLU(),\n            nn.Linear(1024, 512),\n            nn.ReLU(),\n            nn.Linear(512, 10))\n        \n    def forward(self, xb):\n        return self.network(xb)","6685c5d6":"model = Cifar10CnnModel()\nmodel","33c69429":"for images, labels in train_dl:\n    print('images.shape:', images.shape)\n    out = model(images)\n    print('out.shape:', out.shape)\n    print('out[0]:', out[0])\n    break","ede0c0d5":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","8da2575e":"device = get_default_device()\ndevice","38e32b60":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device);","f8defc20":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","c09d0f98":"model = to_device(Cifar10CnnModel(), device)","349ec71f":"evaluate(model, val_dl)","7681f32e":"num_epochs = 10\nopt_func = torch.optim.Adam\nlr = 0.001","ad7bb27e":"history = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)","4f144746":"history","59f2eeff":"def plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');","54bef8a1":"plot_accuracies(history)","1f703bd4":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","48d2e164":"plot_losses(history)","0b990fba":"test_dataset = ImageFolder(data_dir+'\/test', transform=ToTensor())","cc67ca3f":"def predict_image(img, model):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    _, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return dataset.classes[preds[0].item()]","47c94e87":"for i in range(100):\n    img, label = test_dataset[i]\n    plt.imshow(img.permute(1, 2, 0))\n    print('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","ddacf701":"test_loader = DeviceDataLoader(DataLoader(test_dataset, batch_size*2), device)\nresult = evaluate(model, test_loader)\nresult","741c43a7":"torch.save(model.state_dict(), 'cifar10-cnn.pth')","68ecc183":"model2 = to_device(Cifar10CnnModel(), device)","0b0bc3a3":"model2.load_state_dict(torch.load('cifar10-cnn.pth'))","a4626468":"evaluate(model2, test_loader)","8709e32b":"sample:"}}