{"cell_type":{"c46a8cce":"code","71e8b4f2":"code","637d47f8":"code","6014a00c":"code","998dd17b":"code","ba377e52":"code","6aee2e77":"code","37152735":"code","8832ab74":"code","93d991db":"code","532dd918":"code","d037959e":"code","b461ee47":"code","5b54807b":"markdown","47e0503a":"markdown","5d7fded2":"markdown","1ffde620":"markdown","0ed17b51":"markdown","f62e1301":"markdown","d355a5d5":"markdown"},"source":{"c46a8cce":"import itertools\nimport pandas as pd\nimport numpy as np\n    \n!wget http:\/\/www.math.uwaterloo.ca\/~bico\/qsopt\/downloads\/codes\/ubuntu\/qsopt.a -P qsopt\n!wget http:\/\/www.math.uwaterloo.ca\/~bico\/qsopt\/downloads\/codes\/ubuntu\/qsopt.h -P qsopt\n!wget https:\/\/www.math.uwaterloo.ca\/tsp\/concorde\/downloads\/codes\/src\/co031219.tgz\n!tar xvfz co031219.tgz\n!cd concorde; .\/configure --with-qsopt=\/kaggle\/working\/qsopt --enable-ccdefaults ; make","71e8b4f2":"bestnprint('The best solution is length',len(best))","637d47f8":"def is_perm(s):\n    y = True\n    for k in range(1,8):\n        y = y&(str(k) in s)\n        if not y: break\n    return y\n\npermutations = []\nfor k in range(len(best)-6):\n    s = best[k:k+7]\n    if (is_perm(s))&(s not in permutations)&(s[:2]!='54'):\n        permutations.append(s)\n        \nprint('There are',len(permutations),'that can be split among 3 strings')","6014a00c":"mandatory = ['54'+''.join(x) for x in itertools.permutations(['1','2','3','6','7'], 5)]\nprint('There are',len(mandatory),'that must be incluced in all 3 strings')","998dd17b":"adjust1 = 18\nadjust2 = 12\n\ngroup1 = permutations[:1640-adjust1] + mandatory\ngroup2 = permutations[1640-adjust1:3280+adjust2] + mandatory\ngroup3 = permutations[3280+adjust2:] + mandatory\n\nlen(group1), len(group2), len(group3)","ba377e52":"def hamming_distance(str1, str2):\n    return sum( (c1!=c2) for c1, c2 in zip(str1, str2))\n\ndef offset(s1, s2):\n    assert(len(s1)==len(s2))\n    ln = len(s1)\n    j = ln\n    for k in range(0,ln):\n        if hamming_distance(s1[k:],s2[:7-k])==0:\n            j=k\n            break\n    return j","6aee2e77":"def reformulate_ATSP_as_TSP(x, inf=100, neg_inf=0):\n    np.fill_diagonal(x, neg_inf)\n    a = np.concatenate((np.full(x.shape, inf), np.transpose(x)), axis=1)\n    b = np.concatenate((x, np.full(x.shape, inf)), axis=1)\n    return np.concatenate((a, b), axis=0)\n\ndef get_tsp_solution(group):\n    \n    # CREATE DISTANCE MATRIX\n    SIZE_ATSP = len(group)\n    M = np.zeros((SIZE_ATSP, SIZE_ATSP), dtype='int8')\n    for j in range(SIZE_ATSP):\n        #if j%25==0: print(j,', ',end='')\n        for k in range(SIZE_ATSP):\n            M[j,k] = offset(group[j],group[k])\n    \n    # Concorde can solve only symmetric TSP\n    # So we convert ATSP to TSP\n    M = reformulate_ATSP_as_TSP(M)\n    SIZE_TSP = SIZE_ATSP*2\n\n    # WRITE PARAMETER FILE\n    f = open(f'distances.tsp','w')\n    f.write(\"NAME: distances\\n\")\n    f.write(\"TYPE: TSP\\n\")\n    f.write(\"COMMENT: Symmetric TSP\\n\")\n    f.write(f\"DIMENSION: {SIZE_TSP}\\n\")\n    f.write(\"EDGE_WEIGHT_TYPE: EXPLICIT\\n\")\n    f.write(\"EDGE_WEIGHT_FORMAT: FULL_MATRIX\\n\")\n    f.write(\"EDGE_WEIGHT_SECTION\\n\")\n    for j in range(SIZE_TSP):\n        #if j%25==0: print(j,', ',end='')\n        for k in range(SIZE_TSP):\n            f.write(f\"{M[j,k]:2d} \") \n        f.write(\"\\n\")\n    f.close()\n    \n    # EXECUTE TSP SOLVER\n    !cd concorde\/TSP; .\/concorde -x -V ..\/..\/distances.tsp\n    # READ RESULTING ORDER\n    with open('.\/concorde\/TSP\/distances.sol') as f:\n        lines = f.readlines()\n    perms = []\n    for ln in lines[1:]:\n        lns = ln.strip().split(' ')\n        perms.extend([int(x) for x in lns])\n    \n    # TSP -> ATSP\n    perms = [x for x in perms if x < SIZE_ATSP]\n    perms = list(set(perms))\n    \n    # CREATE STRING\n    result = group[ perms[0] ]\n    for k in range(1,len(perms)):\n        s1 = group[ perms[k-1] ]\n        s2 = group[ perms[k] ]\n        d = offset(s1,s2)\n        assert(d!=0)\n        result += s2[-d:]\n    \n    return result","37152735":"def print_header(x):\n    print(); print()\n    print('#'*25)\n    print('### Computing String',x)\n    print('#'*25); print()\n\nprint_header(1)\nstring1 = get_tsp_solution(group1)\nprint_header(2)\nstring2 = get_tsp_solution(group2)\nprint_header(3)\nstring3 = get_tsp_solution(group3)","8832ab74":"all_permutations = [''.join(x) for x in itertools.permutations(['1','2','3','4','5','6','7'], 7)]\n\nfor p in all_permutations:\n    if p not in string1 and p not in string2 and p not in string3:\n        print(p)","93d991db":"for p in mandatory:\n    if p not in string1:\n        print(p)\n    if p not in string2:\n        print(p)\n    if p not in string3:\n        print(p)","532dd918":"print((len(string1), len(string2), len(string3)))","d037959e":"# CONVERT NUMBERS TO EMOJIS\nreplace_dict = {\n '5': '\ud83c\udf85',\n '4': '\ud83e\udd36',\n '8': '\ud83c\udf1f',\n '1': '\ud83e\udd8c',\n '2': '\ud83e\udddd',\n '3': '\ud83c\udf84',\n '6': '\ud83c\udf81',\n '7': '\ud83c\udf80'}\n\nfor k,v in replace_dict.items():\n    string1 = string1.replace(k, v)\n    string2 = string2.replace(k, v)\n    string3 = string3.replace(k, v)","b461ee47":"# WRITE SUBMISSION CSV\nsub = pd.DataFrame()\nsub['schedule'] = [string1, string2, string3]\nsub.to_csv('submission.csv',index=False)\nsub.head()","5b54807b":"# Solve with Concorde TSP Solver","47e0503a":"# Begin With Best n=7 Solution\nWe begin with the best published superpermutation for n=7 [here][1]\n\n[1]: https:\/\/www.gregegan.net\/SCIENCE\/Superpermutations\/Superpermutations.html","5d7fded2":"# Verify\nLet's verify that all permutations are contained in at least one string. And let's verify that the mandatory sequences are contained in every string.","1ffde620":"# Santa Movie Challenge as Traveling Salesman Problem \nBased on https:\/\/www.kaggle.com\/cdeotte\/santa-2021-tsp-baseline-2500.\n\nIf you have any suggestion or remark - don't hesitate to comment!","0ed17b51":"# Write Submission CSV","f62e1301":"# Assign Permutations To 3 Submission Strings\nThere are 5040 permutations for `n=7`. The 120 that start with \ud83c\udf85\ud83e\udd36 must be contained in every string. There are 4920 remaining. We will assign rougly one third of the remaining 4920 to each string. And we will assign the 120 to every string.","d355a5d5":"# Helper Functions"}}