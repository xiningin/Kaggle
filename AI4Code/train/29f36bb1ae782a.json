{"cell_type":{"10bfa00d":"code","cb5f5599":"code","251e5593":"code","22b0f8fa":"code","3b65bb04":"code","66cb6694":"code","a6e18df4":"code","36e5e4b2":"code","b196aa77":"code","4f5a2146":"code","3036ad9a":"code","34e3d4b1":"code","228624c6":"code","051f3b48":"code","7d390c9b":"code","383b842e":"code","5a1a2ad9":"markdown","0b93c484":"markdown","294f074c":"markdown","517fd8e7":"markdown","a97422aa":"markdown","609d58ef":"markdown","7ea6033b":"markdown","ecfd95ad":"markdown","10d4a4b4":"markdown","c0a987d2":"markdown","4dc3be3e":"markdown","52110317":"markdown","b2e5bd4f":"markdown"},"source":{"10bfa00d":"import cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef showme(frame,title=None):\n    #window_title = \"map\"\n    cv2.namedWindow(title, cv2.WINDOW_NORMAL) #open a window\n    cv2.imshow(title, frame)                  #show the image in that widow\n    cv2.waitKey(0)                            #wait for any key\n    cv2.destroyAllWindows()                   #close everything\n\ndef showplt(image, title=None, pltnative=False, custSize=[100,10]):\n    plt.figure(figsize = (custSize))\n    if pltnative: \n        plt.imshow(image)\n    else: \n        plt.imshow(image[...,::-1])\n    plt.title(title)\n    plt.xticks([]), plt.yticks([])  # to hide tick values on X and Y axis\n    plt.show()\n\n#\ndef warpImages(img1, img2, H):\n    rows1, cols1 = img1.shape[:2]\n    rows2, cols2 = img2.shape[:2]\n    \n    list_of_points_1 = np.float32([\n        [0,0], \n        [0,rows1],\n        [cols1,rows1], \n        [cols1,0]\n    ])\n    list_of_points_1 = list_of_points_1.reshape(-1,1,2)\n\n    temp_points = np.float32([\n        [0,0], \n        [0,rows2], \n        [cols2,rows2],\n        [cols2,0]\n    ])\n    temp_points = temp_points.reshape(-1,1,2)\n    \n    list_of_points_2 = cv2.perspectiveTransform(temp_points, H)\n    \n    list_of_points = np.concatenate((list_of_points_1, list_of_points_2), axis=0)\n    \n    ##Define boundaries:\n    [x_min, y_min] = np.int32(list_of_points.min(axis=0).ravel() - 0.5)\n    [x_max, y_max] = np.int32(list_of_points.max(axis=0).ravel() + 0.5)\n    \n    translation_dist = [-x_min,-y_min]\n    \n    H_translation = np.array([[1, 0, translation_dist[0]], [0, 1, translation_dist[1]], [0,0,1]])\n    \n    output_img = cv2.warpPerspective(img2, \n                                     H_translation.dot(H), \n                                     (x_max - x_min, y_max - y_min))\n    ## Paste the image:\n    output_img[translation_dist[1]:rows1+translation_dist[1], \n               translation_dist[0]:cols1+translation_dist[0]] = img1\n    \n    return output_img\n#\ndef warp(img1, img2, min_match_count = 10):\n    sift = cv2.SIFT_create()\n    \n    # Extract the keypoints and descriptors\n    keypoints1, descriptors1 = sift.detectAndCompute(img1, None)\n    keypoints2, descriptors2 = sift.detectAndCompute(img2, None)\n    \n    # Initialize parameters for Flann based matcher\n    FLANN_INDEX_KDTREE = 0\n    index_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 5)\n    search_params = dict(checks = 50)\n    \n    # Initialize the Flann based matcher object\n    flann = cv2.FlannBasedMatcher(index_params, search_params)\n    \n    # Compute the matches\n    matches = flann.knnMatch(descriptors1, descriptors2, k=2)\n    \n    # Store all the good matches as per Lowe's ratio test\n    good_matches = []\n    for m1,m2 in matches:\n        if m1.distance < 0.7*m2.distance:\n            good_matches.append(m1)\n            \n    if len(good_matches) > min_match_count:\n        src_pts = np.float32([ keypoints1[good_match.queryIdx].pt\n                              for good_match in good_matches ]).reshape(-1,1,2)\n        \n        dst_pts = np.float32([ keypoints2[good_match.trainIdx].pt \n                              for good_match in good_matches ]).reshape(-1,1,2)\n        \n        M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC, 5.0)\n        result = warpImages(img2, img1, M)\n        return result\n        #cv2.imshow('Stitched output', result)\n        #cv2.waitKey()\n    else:\n        print (\"We don't have enough number of matches between the two images.\")\n        print (\"Found only \" + str(len(good_matches)) + \" matches.\")\n        print (\"We need at least \" + str(min_match_count) + \" matches.\")","cb5f5599":"cup1 = cv2.imread(\"..\/input\/images\/Cup (1).jpg\")\ncup2 = cv2.imread(\"..\/input\/images\/Cup (2).jpg\")\ncup3 = cv2.imread(\"..\/input\/images\/Cup (3).jpg\")\ncup4 = cv2.imread(\"..\/input\/images\/Cup (4).jpg\")\nshowplt(cup1, title='cup1', custSize=[10,2])\nshowplt(cup2, title='cup2', custSize=[10,2])\nshowplt(cup3, title='cup3', custSize=[10,2])\nshowplt(cup4, title='cup4', custSize=[10,2])","251e5593":"# We're going to collage cup1 and cup2\n# Result showing great, but just a little error at the edge of the table\ncupCollage = warp(cup1, cup2)\nshowplt(cupCollage)","22b0f8fa":"# We're going to collage cup1 and cup4\n# Result showing very bad, because we take picture in Opposite angles and the matching points couldn't find\ncupCollage = warp(cup1, cup4)\nshowplt(cupCollage)","3b65bb04":"# Now we'll try to switch the main image to collage, warp(cup4, cup1)\n# Result showing a bit bad, but the edge of table is merging correctly. unless the cup and the floor they are not correct\ncupCollage = warp(cup4, cup1)\nshowplt(cupCollage)","66cb6694":"# Now we're trying 4 and 3\n# Result couldn't warpping because 2 images have matching point <=10\n# We comment the code below because it has error, if you want to try please uncomment and will see the error\n\n#cupCollage = warp(cup4, cup3)\n#showplt(cupCollage)","a6e18df4":"car1 = cv2.imread(\"..\/input\/images\/StreetCar (2).jpg\")\ncar2 = cv2.imread(\"..\/input\/images\/StreetCar (3).jpg\")\ncar3 = cv2.imread(\"..\/input\/images\/StreetCar (4).jpg\")\ncar4 = cv2.imread(\"..\/input\/images\/StreetCar (1).jpg\")\nshowplt(car1, title='car1', custSize=[10,2])\nshowplt(car2, title='car2', custSize=[10,2])\nshowplt(car3, title='car3', custSize=[10,2])\nshowplt(car4, title='car4', custSize=[10,2])","36e5e4b2":"# We're going to collage car1 and car2\n# Result showing good, but a bit color not match in the middle of the image and the blue Fence\ncarCollage1 = warp(car1, car2)\nshowplt(carCollage1)","b196aa77":"# In this line we're going to collage the previous Collage with car3\n# This step is a bit slow (2mn), please have a wait\n# Result showing bad, next code we will change the order of main pic to merge\ncarCollage2 = warp(carCollage1, car3)\nshowplt(carCollage2)","4f5a2146":"# Warping the car3 and carCollage1. We don't do with car4 since the image is already big\n# Result is great\ncarCollage3 = warp(car3, carCollage1)\nshowplt(carCollage3)","3036ad9a":"building1 = cv2.imread(\"..\/input\/images\/Building (2).jpg\")\nbuilding2 = cv2.imread(\"..\/input\/images\/Building (3).jpg\")\nbuilding3 = cv2.imread(\"..\/input\/images\/Building (4).jpg\")\nbuilding4 = cv2.imread(\"..\/input\/images\/Building (1).jpg\")\nupBuilding1 = cv2.imread(\"..\/input\/images\/UP Building (1).jpg\")\nupBuilding2 = cv2.imread(\"..\/input\/images\/UP Building (2).jpg\")\n\nshowplt(building1, title='building1', custSize=[10,2])\nshowplt(building2, title='building2', custSize=[10,2])\nshowplt(building3, title='building3', custSize=[10,2])\nshowplt(building4, title='building4', custSize=[10,2])\nshowplt(upBuilding1, title='upBuilding1', custSize=[10,2])\nshowplt(upBuilding2, title='upBuilding2', custSize=[10,2])","34e3d4b1":"# We're going to warping building 2 3 and 4\n# Result is great, but the color and the tree look not symmetry \nbuildinCollage1 = warp(building2, building3)\nbuildinCollage2 = warp(building4, buildinCollage1)\nshowplt(buildinCollage2)","228624c6":"# Now we will try building 1 and 2\n# Result is supergood, but if you use warp(building1, building2), you will see the first image look very big and stretching isn't very good\nbuildinCollage = warp(building2, building1)\nshowplt(buildinCollage)","051f3b48":"# Now we will try upBuilding1 and upBuilding2\n# Result not good. The conten, ground and cloud very bad. But we can see the edge the building merging good.\nbuildinCollage = warp(upBuilding2, upBuilding1)\nshowplt(buildinCollage)","7d390c9b":"carNight1 = cv2.imread(\"..\/input\/images\/Night Car (2).jpg\")\ncarNight2 = cv2.imread(\"..\/input\/images\/Night Car (3).jpg\")\ncarNight3 = cv2.imread(\"..\/input\/images\/Night Car (1).jpg\")\ncarNight4 = cv2.imread(\"..\/input\/images\/Night Car (4).jpg\")\n\nshowplt(carNight1, title='carNight1', custSize=[10,2])\nshowplt(carNight2, title='carNight2', custSize=[10,2])\nshowplt(carNight3, title='carNight3', custSize=[10,2])\nshowplt(carNight4, title='carNight4', custSize=[10,2])","383b842e":"# Since carNight1 and carNight2 are the same model, let's trying\n# Result showing bad, because the position pixels of the car is not in the matching place.\n# We're trying with different car and still see the matching isn't good\ncarNightCollage = warp(carNight1, carNight2)\nshowplt(carNightCollage)","5a1a2ad9":"# Step 3: Building (Very Large Scene)","0b93c484":"In this step we're taking photos of a Building from different angles","294f074c":"# Readme\nThis is the assignment project of Computer Vision Group 3. We'll working on image stitching and collaging (Merging). Our team member: Phos Sophea, Voern Kimsoer, Acmatac Seing\n* Firstly, you've to run the Utils that contain all the function needed for this project\n* Please run each step 1 by 1 and will see the result + explaination comment above the code. If you're not really clear about step, please read the project steps detail below\n* If you have any issue with images, please have a see this link : https:\/\/drive.google.com\/drive\/folders\/1BFYaSq7UAimsx7u1GLt86IhfFpQSdJ7J?usp=sharing\n* If you want to use your own images, please make sure they need to have match points > 10","517fd8e7":"# Step 4: Compare the quality of the three results. Write down your observations: how does the quality depend on the composition of each image?","a97422aa":"In this step we're taking photos of a Car from different angles","609d58ef":"# Step 1 : Cup (Small Object)","7ea6033b":"Here are the observations result of the 3 steps:\n* Step1 the image is near and small, the warping is depending on the composition. As you can see the Cup4 and Cup3 having matching very low. because the pictures are angles different.\n* Step2 and Step3 we're take the photos not really far angle, we take most of them block by block so the images are merging good. but not the UP Building, as you can see we're take from left side to the right side. So the coding is hard to find the matching (Opinion from Acmatac)","ecfd95ad":"# Project steps\n* Step 1\n\n> Take several pictures of a small object (e.g. tea cup, small chair) from different angles and short distance. (e.g. as far as to reach by hand)\n> For better assessment, describe the object in question (what are you taking pictures of).\n> Obtain the collage of the images that includes the object in question.\n\n* Step 2\n\n> Take several pictures of a larger object (e.g. car, tree) from different angles and a moderate distance (10-15 steps away).\n> For better assessment, describe the object in question (what are you taking pictures of).\n> Obtain the collage of the images that includes the object in question.\n\n* Step3\n\n> Take several pictures of a a very large scene (e.g. hotel, school building, city skyline) from different positions and a an very large distance (3-5 km away). You may > have to go for an afternoon walk for this step.\n> For better assessment, describe the scene in question (what are you taking pictures of).\n> Obtain the collage of the images that includes the scene in question.\n\n* Step 4\n\n> Compare the quality of the three results.\n> Write down your observations: how does the quality depend on the composition of each image?\n\n* Step 5\n\n> Try one of the following changes in the environment:\n1. light (e.g. take pictures at night);\n2. weather (e.g. mist, rain)\n3. movement (e.g. take pictures of a moving car);\n4. crowded scene (e.g. crowd of people, marketplace, etc);\n5. underwater\n6. clouds\n7. other significant changes.\n","10d4a4b4":"# Step 2: StreetCar (Large Object)","c0a987d2":"In this step we're taking photos of a cup from different angles","4dc3be3e":"In this step we're taking picture of a movement object (Car)","52110317":"# Utils","b2e5bd4f":"# Step 5: Night (movement + light)"}}