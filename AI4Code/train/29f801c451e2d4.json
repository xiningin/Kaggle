{"cell_type":{"56584f7f":"code","9049b97b":"code","ea749c4f":"code","62c5f8ed":"code","4c2a51da":"code","1fd7d7cc":"code","4458ac8d":"code","8ca0c60d":"code","491fddde":"code","dcc02601":"code","e8f1b99f":"code","c60d84d2":"code","85cd4860":"code","b2c97a3f":"code","674cf5ca":"code","e491adc0":"code","6be2e257":"code","7f24075f":"code","5e1b8338":"code","afdd89c1":"code","48c741da":"markdown"},"source":{"56584f7f":"# importing libraries to be used\nimport numpy as np                  # Scientific Computing\nimport pandas as pd                 # Data Analysis\nimport matplotlib.pyplot as plt     # Plotting\nimport seaborn as sns               # Statistical Data Visualization","9049b97b":"# loading data from a CSV file into a Pandas DataFrame\ndata_g = pd.read_csv(\"..\/input\/WorldCupMatches.csv\") \ndata_p = pd.read_csv(\"..\/input\/WorldCupPlayers.csv\")\ndata_c = pd.read_csv(\"..\/input\/WorldCups.csv\")","ea749c4f":"# printing a concise summary of created dataframes\ndata_g.info()  \n# data_p.info()  -> not used but here just in case you may work on it\n# data_c.info()  -> not used but here just in case you may work on it","62c5f8ed":"# correlation table for WC games columns\n# One important note here; Correlation can be created between integer values, so columns come with string values will not be included.\ndata_g.corr()","4c2a51da":"# You may consider dropping some columns that not make sense for your analysis.\ndata_g_d = data_g.drop(['RoundID', 'MatchID'], axis = 1)\n# data_g_d       -> new data frame after drop\n# data_g         -> old data frame for WC Games\n# Syntax must be precise, Round Brackets, Square Brackets etc.\n# axis = 1       -> dropping index use \"0\", dropping column\/s \"1\"","1fd7d7cc":"# New correlation table after drop of ID columns.\ndata_g_d.corr()","4458ac8d":"fig, ax = plt.subplots(1, 1, figsize = (12, 12))\n# fig                 -> figure\n# ax                  -> array of axes objects\n# \"first\" 1           -> it's the i in an array of [i]x[j] (to see effect, please change it)\n# \"second\" 1          -> it's the j in an array of [i]x[j] (to see effect, please change it)\n# figsize = (4, 4)    -> footprint of table (to see effect, please change it)\n\nsns.heatmap(data_g_d.corr(), vmin = -1.50, vmax = 1.50, cmap = \"YlGnBu\", annot = True, linewidths = 1.5, linecolor = \"red\", fmt = \".2f\")\n# data_g_d.corr()     -> correlation excel data table above to be used into annotated type table\n# vmin                -> min value of color bar, not really possible but just to show it can be changed.\n# vmax                -> max value of color bar, Correlation can't be higher than 1 but just to show it's changable.\n# cmap = \"YlGnBu\"     -> selection of heatmap color \n# annot = True        -> correlation rates on above table will be visible on new table.\n# linewidths = 1.5    -> table border thickness\n# linecolor = \"red\"   -> table border color\n# fmt = \".2f\"         -> Number of digits after dot for each correlated data\n\nplt.xticks(rotation = 45) # making labels readable otherwise \"overlapping text\" problem occurs (You may consider changing figsize at first place, then this action won't be necessary)\nplt.yticks(rotation = 45) # making labels readable otherwise \"overlapping text\" problem occurs (You may consider changing figsize at first place, then this action won't be necessary)\n","8ca0c60d":"# Bring first ten rows, it brings first five rows, if you leave pharantesis empty.\ndata_g_d.head(10)","491fddde":"# correlation ascending order, also duplicated correlation value will be dropped with drop_duplicates()\ndata_g_d.corr().unstack().sort_values().drop_duplicates()","dcc02601":"# just columns\ndata_g_d.columns","e8f1b99f":"# Generates descriptive statistics excluding NaN values, Analyzes both numeric and object series\ndata_g_d.describe()","c60d84d2":"# Some of columns are with space, let's make them workable by replacing \"spaces\" with \"underscores\" \ndata_g_d.columns = [c.replace(' ', '_') for c in data_g_d.columns]","85cd4860":"# Now it will be ready to work\ndata_g_d.columns","b2c97a3f":"## LINE PLOT - Please click twice on graphics to increase visibility for regions\n\ndata_g_d.Home_Team_Goals.plot(kind = 'line', color = 'b', label = 'Home', linewidth = 2.5, alpha = 0.5, grid = True, linestyle = '-', figsize = (36,10))\ndata_g_d.Away_Team_Goals.plot(color = 'r',label = 'Away',linewidth=2.5, alpha = 0.5,grid = True,linestyle = '-.')\n# you may find complete syntax and legends here, https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.plot.html\n# kind = 'line'           -> various type possible, we will use line plot, if you choose another type, some syntax parameters must be taken out.\n# color                   -> color of graphic line\n# label                   -> name of the legend\n# linewidth               -> thickness of graphic lines.\n# alpha                   -> transparency\n# grid                    -> to be able to see and read the graphic better.\n# linestyle = '-'         -> graphic line style, you may choose others as | '-' | '--' | '-.' | ':' | 'None' | ' ' | '' |\n# figsize = (36,10)       -> You know, size matters a lot. The bigger is better as Freddie said.\nplt.legend(loc = 'upper right',fontsize = 20)        # showing place for legend\nplt.xlabel('games', fontsize = 20)                   # label = name of label\nplt.ylabel('goals', fontsize = 20)\nplt.title('Line Plot', fontsize = 20)                # title = title of plot\n\nplt.show()","674cf5ca":"data_c.info()","e491adc0":"# I will use WC datas for scatter plot\ndata_c.head()","6be2e257":"## SCATTER PLOT\n\nplt.scatter(data_c.Year, data_c.MatchesPlayed, color = 'b', alpha = 0.5, label = 'Number of Games')\nplt.scatter(data_c.Year, data_c.GoalsScored, color = 'r', alpha = 0.5, label = 'Number of Goals' )\nplt.xlabel('Year')\nplt.ylabel('Goals & Games')\nplt.title('World Cup Matches & Goals')\nplt.legend(loc = 'upper left')\nplt.show()","7f24075f":"# HISTOGRAM\ndata_g_d.Away_Team_Goals.plot(kind = 'hist', bins = 8, figsize = (10,10))\nplt.xlabel('Away Team Goals', fontsize = 20)\nplt.ylabel('Frequency', fontsize = 20)\nplt.title('Frequency based Number of Goals scored by Away Teams')\nplt.show()\n# plt.clf() for clean up","5e1b8338":"# Filtering Pandas data frame\nx = data_c['GoalsScored'] > 100\ndata_c[x]   # We filter table and bring WC where more than 100 goals scored.","afdd89c1":"# Filtering Pandas data frame with logical_and\ndata_c[np.logical_and(data_c['GoalsScored'] > 100, data_c['QualifiedTeams'] == 24)]\n# WC with 24 participants and more than 100 goals scored\n\n# another method\n# data_c[(data_c['GoalsScored'] > 100) & (data_c['QualifiedTeams'] == 24)]","48c741da":"# SECTION 1"}}