{"cell_type":{"91ca9ac5":"code","4940ae08":"code","05abbb4e":"code","03c47244":"code","386ca4ec":"code","b0f91a42":"code","09ddc37b":"code","ec69dda5":"code","165cb5b6":"code","f326bc9b":"code","72001265":"code","93755c48":"code","2aaa65eb":"code","37f4fcea":"code","38a1e3e2":"code","08df775f":"code","998eb8f7":"code","def9e78b":"code","6f2a05f4":"code","c0b11546":"code","063a1bef":"code","53c5b9e5":"code","55a129dc":"code","aa3a2255":"markdown","befd899b":"markdown","2ba0558c":"markdown","9510d844":"markdown"},"source":{"91ca9ac5":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Flatten, AveragePooling2D, Dropout\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf","4940ae08":"data = pd.read_csv('..\/input\/xAPI-Edu-Data\/xAPI-Edu-Data.csv')","05abbb4e":"data","03c47244":"data.info()","386ca4ec":"data.isna().sum()","b0f91a42":"def get_uniques(df, columns):\n    return {column: list(df[column].unique()) for column in columns}\n\ndef get_categorical_columns(df):\n    return [column for column in df.columns if df.dtypes[column] == 'object']","09ddc37b":"get_uniques(data, get_categorical_columns(data))","ec69dda5":"binary_features = ['gender', 'Semester', 'Relation', 'ParentAnsweringSurvey', 'ParentschoolSatisfaction', 'StudentAbsenceDays']\n\nordinal_features = ['StageID', 'GradeID']\n\nnominal_features = ['NationalITy', 'PlaceofBirth', 'SectionID', 'Topic']\n\n\ntarget_column = 'Class'","165cb5b6":"binary_positive_values = ['M', 'S', 'Father', 'Yes', 'Good', 'Above-7']\n\nstage_ordering = ['lowerlevel', 'MiddleSchool', 'HighSchool']\ngrade_ordering = [\n    'G-02',\n    'G-04',\n    'G-05',\n    'G-06',\n    'G-07',\n    'G-08',\n    'G-09',\n    'G-10',\n    'G-11',\n    'G-12'\n]\n\nnominal_prefixes = ['N', 'B', 'S', 'T']","f326bc9b":"def binary_encode(df, column, positive_value):\n    df = df.copy()\n    df[column] = df[column].apply(lambda x: 1 if x == positive_value else 0)\n    return df\n\ndef ordinal_encode(df, column, ordering):\n    df = df.copy()\n    df[column] = df[column].apply(lambda x: ordering.index(x))\n    return df\n\ndef onehot_encode(df, column, prefix):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column], prefix=prefix)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","72001265":"for feature, positive_value in zip(binary_features, binary_positive_values):\n    data = binary_encode(data, feature, positive_value)","93755c48":"data = ordinal_encode(data, 'StageID', stage_ordering)\ndata = ordinal_encode(data, 'GradeID', grade_ordering)","2aaa65eb":"for feature, prefix in zip(nominal_features, nominal_prefixes):\n    data = onehot_encode(data, feature, prefix)","37f4fcea":"target_ordering = ['L', 'M', 'H']\ndata = ordinal_encode(data, target_column, target_ordering)","38a1e3e2":"data","08df775f":"y = data[target_column]\nX = data.drop(target_column, axis=1)","998eb8f7":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","def9e78b":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8)","6f2a05f4":"X.shape","c0b11546":"inputs = tf.keras.Input(shape=(55,))\n\nx = tf.keras.layers.Dense(32, activation='relu')(inputs)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\nx = tf.keras.layers.Dense(128, activation='relu')(x)\n\n\n\n#x= Dropout(0.5)(x)\n\noutputs = tf.keras.layers.Dense(3, activation='softmax')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\n\n\nbatch_size = 64\nepochs = 50\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs,\n    verbose=1\n)","063a1bef":"fig = px.line(\n    history.history,\n    y=['loss', 'val_loss'],\n    labels={'index': \"Epoch\", 'value': \"Loss\"},\n    title=\"Training and Validation Loss\"\n)\n\nfig.show()","53c5b9e5":"np.argmin(history.history['val_loss'])","55a129dc":"model.evaluate(X_test, y_test)","aa3a2255":"## Splitting and Scaling","befd899b":"# Training","2ba0558c":"# Preprocessing","9510d844":"## Encoding"}}