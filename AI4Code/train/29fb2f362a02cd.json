{"cell_type":{"e8d2669a":"code","df3085eb":"code","925c3372":"code","61c15c16":"code","e944e509":"code","c5c427ad":"code","cd727e03":"code","b8a32164":"code","4c9f3647":"code","357dd688":"code","4ff122c3":"code","439cd67c":"code","732b976f":"code","e8dbaeb4":"code","db684d6d":"code","5150c88c":"code","85cd220a":"code","6bae9045":"code","1efccefb":"code","467107cd":"markdown","688a39dd":"markdown","1d9c6714":"markdown","725234a5":"markdown","8f3efbe8":"markdown","f0fb26a2":"markdown","8bd66305":"markdown","0da33afd":"markdown","22a2e08a":"markdown","75d4c176":"markdown","970da05a":"markdown","8737cc58":"markdown","278a9392":"markdown","e3ad33ac":"markdown","2bc7e0c3":"markdown","b48d403b":"markdown","7c910a1a":"markdown","9fe299fc":"markdown","2f243871":"markdown","7efaa9ce":"markdown","5090cbcd":"markdown","51b207f5":"markdown","bf28716e":"markdown"},"source":{"e8d2669a":"import pandas as pd\nimport numpy as np\nimport gc\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport warnings\nwarnings.simplefilter('ignore')\n","df3085eb":"train_df = pd.read_parquet('..\/input\/ubiquant-parquet\/train_low_mem.parquet')","925c3372":"train_df.describe()","61c15c16":"print('the number of investment_id: ',len(train_df['investment_id'].unique()))\nprint('the number of time_id: ',len(train_df['time_id'].unique()))\nprint('the number of features: ',len([i for i in train_df.columns if 'f_' in i]))","e944e509":"null_data=train_df.isnull().sum()\nnull_list=[]\nfor i in null_data.index:\n    if null_data[i]!=0:\n        null_list.append(null_data[i])\n        \n        \nif len(null_list)==0:\n    print('There are no null.')","c5c427ad":"for number in range(100,3700,500):\n    try:\n        example=train_df[train_df['investment_id']==number]\n        plt.plot(example['time_id'],example['target'])\n        plt.title('investment_id='+str(number))\n        plt.show()\n        \n    except:print(number,'is not found.')","cd727e03":"list_id=np.sort(train_df['investment_id'].unique())","b8a32164":"mean_list=[]\nfor i in range(300):\n        number=list_id[i]\n        example=train_df[train_df['investment_id']==number]\n        example['target'].hist(bins = 100, alpha = 0.1, figsize = (20,10))\n        mean_list.append(example['target'].mean())\nmean_=np.array(mean_list).mean()\nplt.axvline(mean_, ls = \"--\",color = \"navy\")\nplt.title('target mean='+str(mean_))\nplt.show()","4c9f3647":"median_list=[]\nfor i in range(300):\n        number=list_id[i]\n        example=train_df[train_df['investment_id']==number]\n        example['target'].hist(bins = 100, alpha = 0.1, figsize = (20,10))\n        median_list.append(example['target'].median())\nmedian_=pd.Series(median_list).median()\nplt.axvline(median_, ls = \"--\", color = \"red\")\nplt.title('target median='+str(median_))\nplt.show()","357dd688":"print('target mean=',train_df['target'].mean())\nprint('target median=',train_df['target'].median())","4ff122c3":"df_all=pd.DataFrame()\nfor number in list_id:\n        example=train_df[train_df['investment_id']==number]\n        example.index=example['time_id']\n        example['inv_'+str(number)]=example['target']\n        df_all=pd.concat([df_all,example['inv_'+str(number)]],axis=1)","439cd67c":"df_all.describe()","732b976f":"plt.figure(figsize=(15,10))\nplt.ylabel(\"length of time index\")\nplt.xlabel(\"ivestment_id\")\nplt.bar(df_all.count().index,df_all.count().values)","e8dbaeb4":"import statsmodels as sm\nfrom statsmodels.tsa.ar_model import AutoReg\nfrom statsmodels.tsa.arima_model import ARMA\n\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\nfrom statsmodels.tsa.stattools import adfuller\n\n# good stationarity\n\ndef check_stationarity(series):\n    # Copied from https:\/\/machinelearningmastery.com\/time-series-data-stationary-python\/\n\n    result = adfuller(series.values)\n\n   #print('ADF Statistic: %f' % result[0])\n    #print('p-value: %f' % result[1])\n    #print('Critical Values:')\n    #for key, value in result[4].items():\n        #print('\\t%s: %.3f' % (key, value))\n\n    if (result[1] <= 0.05) & (result[4]['5%'] > result[0]):\n        print(\"\\u001b[32mStationary\\u001b[0m\")\n    else:\n        print(\"\\x1b[31mNon-stationary\\x1b[0m\")\n\nfor number in range(100,3700,100):\n    try:\n        print('investment_id=',number)\n        example=train_df[train_df['investment_id']==number]\n\n        check_stationarity(example['target'])\n\n        example['target_diff'] = example['target'].diff().fillna(0)\n\n        check_stationarity(example['target_diff'])\n        print('-----------------')\n    except:print(number,'is not found.')","db684d6d":"train_df.describe()","5150c88c":"rows, cols = 5, 10  \nfig, aX_invs = plt.subplots(ncols=cols, nrows=rows, figsize=(18, 10)) \nfor i in range(50):\n    r = i \/\/ cols\n    c = i % cols\n    \n    f = 'f_'+str(i)\n    aX_invs[r, c].hist(train_df[f],bins = 100)\n    aX_invs[r, c].set_title(f)\n    aX_invs[r, c].get_xaxis().set_visible(False)\n    aX_invs[r, c].get_yaxis().set_visible(False)\nplt.show()","85cd220a":"f_list = ['f_105','f_106']\nfor f in f_list:\n    train_df[f].hist(bins = 100, figsize = (10,5),color='green')\n    plt.title(f)\n    plt.show()","6bae9045":"f_list = ['f_48','f_296']\nfor f in f_list:\n    train_df[f].hist(bins = 100, figsize = (10,5),color='orange')\n    plt.title(f)\n    plt.show()","1efccefb":"#You can change the investment_id.\ndata_200=train_df[train_df['investment_id']==200]\n\n#all features\nrows, cols = 60, 5\nfig, aX_invs = plt.subplots(ncols=cols, nrows=rows, figsize=(18, 120)) \nfor i in range(300):\n    r = i \/\/ cols\n    c = i % cols\n    \n    f = 'f_'+str(i)\n    #plt.scatter(data_200.index,data_200[f])\n    plt.title(f)\n    aX_invs[r, c].scatter(data_200[f],data_200['target'],alpha=0.5)\n    aX_invs[r, c].set_title(f)\n    aX_invs[r, c].get_xaxis().set_visible(False)\n    aX_invs[r, c].get_yaxis().set_visible(False)\nplt.show()","467107cd":"## Features vs target","688a39dd":"reference:[Ubiquant EDA and Baseline](https:\/\/www.kaggle.com\/ilialar\/ubiquant-eda-and-baseline)","1d9c6714":"# About Features","725234a5":"# No missing data ","8f3efbe8":"* row_id : connect time_id and investment_id\u3000(time_id\u304a\u3088\u3073investment_id)\n\n* time_id : time index(\u6642\u9593\u30a4\u30f3\u30c7\u30c3\u30af\u30b9)\n\n* investment_id : investment's id(\u6295\u8cc7\u306eID)\n\n* target : an investment's return rate(\u6295\u8cc7\u306e\u53ce\u76ca\u7387)\n\n* f_0~f_299 : features(\u7279\u5fb4\u91cf)\n\n","f0fb26a2":"# About Target","8bd66305":"There are no null.","0da33afd":"Let's see every features once with a specific investment_id.\n\n\u7279\u5b9a\u306einvestment_id\u3092\u4f7f\u7528\u3057\u3066\u3059\u3079\u3066\u306e\u6a5f\u80fd\u3092\u4e00\u5ea6\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002","22a2e08a":"So let's see the 300 features.\n\n300\u306e\u7279\u5fb4\u91cf\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002","75d4c176":"Next let's check the target more. \n\u6b21\u306b\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u3055\u3089\u306b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046","970da05a":"Let's check the number of missing data.","8737cc58":"# About Train","278a9392":"* bimodal=having two modes, of a statistical distribution.(having two maxima)\n\n* multimodal=having more than two modes.\n\n* \u4e8c\u5cf0\u6027 = \u7d71\u8a08\u7684\u5206\u5e03\u306e2\u3064\u306e\u30e2\u30fc\u30c9\u3092\u6301\u3063\u3066\u3044\u308b(2\u3064\u306e\u6700\u5927\u5024\u3092\u6301\u3063\u3066\u3044\u308b\u3002)\n\n* \u591a\u5cf0\u6027 = 2\u3064\u4ee5\u4e0a\u306e\u30e2\u30fc\u30c9\u3092\u6301\u3063\u3066\u3044\u308b","e3ad33ac":"the number of investments are 3579, the number of features are 300, and time index is 1211.\n\n\u6295\u8cc7\u306e\u6570\u306f3579\u3001\u6a5f\u80fd\u306e\u6570\u306f300\u3001\u6642\u9593\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f0~1211\u3067\u3059\u3002","2bc7e0c3":"## Augmented Dickey-Fuller (ADF) test\n\nUse the Augmented Dickey Fuller (ADF) test with some investment_id targets to see how constant the rate of change in your investment is.\n\n\n\u3044\u304f\u3064\u304b\u306einvestment_id\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u3067\u3001\u62e1\u5f35\u30c7\u30a3\u30c3\u30ad\u30fc\u30d5\u30e9\u30fc\uff08ADF\uff09\u30c6\u30b9\u30c8\u3092\u4f7f\u7528\u3057\u3066\u6295\u8cc7\u306e\u5909\u5316\u7387\u306e\u5b9a\u5e38\u6027\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n\nAbout Augmented Dickey Fuller (ADF) :[Time Series: Interpreting ACF and PACF](https:\/\/www.kaggle.com\/iamleonie\/time-series-interpreting-acf-and-pacf)","b48d403b":"### statistical distribution(\u7d71\u8a08\u5206\u5e03)\n\nMostly, statistical distributions\u3000of unimodal.But sometimes they are included  bimodal and multimodal.\n\n\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u3001\u30e6\u30cb\u30e2\u30fc\u30c0\u30eb\u306e\u7d71\u8a08\u5206\u5e03\u3067\u3059\u304c\u3001\u30d0\u30a4\u30e2\u30fc\u30c0\u30eb\u3068\u30de\u30eb\u30c1\u30e2\u30fc\u30c0\u30eb\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n","7c910a1a":"Some time index are missing.\n\n\u3044\u304f\u3064\u304b\u306e\u6642\u9593\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u6b20\u843d\u3057\u3066\u3044\u307e\u3059\u3002","9fe299fc":"<p style=\"text-decoration:underline; text-decoration-color:#FF0000;\">\"In this competition, you\u2019ll build a model that forecasts an investment's return rate.\"<\/p>\n\n<p style=\"text-decoration:underline; text-decoration-color:#FF0000;\">\"\u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u3067\u306f\u3001\u6295\u8cc7\u306e\u53ce\u76ca\u7387\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002\"<\/p>","2f243871":"The median and mean of target are little negative\n\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u4e2d\u592e\u5024\u3068\u5e73\u5747\u5024\u306f\u5c11\u3057\u30de\u30a4\u30ca\u30b9\u3067\u3059\u3002","7efaa9ce":"This notebook is  'Ubiquant Market Prediction Competition' EDA for biginner's.\n\nThe goal of 'Ubiquant Market Prediction Competition' is for forecast the return rates of investment.\n\nIn this competition, big data over 18GB have to be treated.\n\nSo, I reccomend to read as parguet not csv, when reading datasets of this competition,because kaggle notebooks don't make crash.\n\n\n\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306f\u3001\u300cUbiquantMarketPredictionCompetition\u300d\u306e\u521d\u5fc3\u8005\u5411\u3051EDA\u3067\u3059\u3002\n\u300cUbiquant Market Prediction Competition\u300d\u306e\u76ee\u6a19\u306f\u3001\u6295\u8cc7\u53ce\u76ca\u7387\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\n\u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u3067\u306f18GB\u3092\u8d85\u3048\u308b\u30d3\u30c3\u30b0\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3057\u305f\u304c\u3063\u3066\u3001\u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u3080\u3068\u304d\u306f\u3001kaggle\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u306a\u3044\u305f\u3081\u3001parguet\u3068\u3057\u3066\u8aad\u3080\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\n\nreflection:[\u23eb Fast Data Loading and Low Mem with Parquet Files](https:\/\/www.kaggle.com\/robikscube\/fast-data-loading-and-low-mem-with-parquet-files)","5090cbcd":"Target seems to have a lot of data that stationarity is confirmed.\nTarget\u306f\u5b9a\u5e38\u6027\u304c\u78ba\u8a8d\u3055\u308c\u308b\u30c7\u30fc\u30bf\u304c\u591a\u3044\u3088\u3046\u3067\u3059\u3002","51b207f5":"We can see they don't have clear correlations with the target.\n\n\n\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306e\u660e\u78ba\u306a\u76f8\u95a2\u95a2\u4fc2\u304c\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n","bf28716e":"If you look at it so far, I think it's similar to the Jane Street competition in the past competitions.\n\nThe JaneStreet competition was a classification, but there are many similarities such as the number of features and the method of distribution.\n\n\u3053\u3053\u307e\u3067\u898b\u3066\u307f\u308b\u3068\u904e\u53bb\u306e\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u3067JaneStreet\u306e\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u306b\u5c11\u3057\u4f3c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nJaneStreet\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u306f\u30af\u30e9\u30b9\u5206\u985e\u3067\u3057\u305f\u304c\u3001\u7279\u5fb4\u91cf\u306e\u591a\u3055\u3084\u5206\u6563\u306e\u4ed5\u65b9\u306a\u3069\u4f3c\u3066\u3044\u308b\u70b9\u304c\u591a\u3044\u3068\u611f\u3058\u307e\u3059\u3002"}}