{"cell_type":{"bbb4f70d":"code","6202cf84":"code","47b99d07":"code","83b5e1e4":"code","4a6ca388":"code","4624ecb4":"code","87951cf9":"code","4770ce37":"code","29e029ce":"code","a6ff08cb":"code","a20a6df2":"code","a9a0b2b6":"code","d4490a6f":"code","69fec477":"code","2f5bb0c3":"code","d28431e4":"code","20b3caa9":"code","6397cc91":"markdown","1996ca5a":"markdown","ca892d6d":"markdown","0b86e5ec":"markdown","8a155e23":"markdown","bfb46b3a":"markdown","d4ff999d":"markdown"},"source":{"bbb4f70d":"!pip install -q quick-ml","6202cf84":"import tensorflow as tf\nimport quick_ml","47b99d07":"from quick_ml.begin_tpu import define_tpu_strategy, get_training_dataset, get_validation_dataset, get_test_dataset\n\n","83b5e1e4":"strategy, tpu = define_tpu_strategy()","4a6ca388":"from quick_ml.callbacks import get_callbacks\n\n","4624ecb4":"\ncallbacks = get_callbacks(lr_scheduler = 'rampup', early_stopping = None, reduce_lr_on_plateau = None)\n\n\nprint(callbacks)","87951cf9":"from quick_ml.load_models_quick import create_model\n\n","4770ce37":"with strategy.scope():\n    \n    model = create_model(1, model_name = 'EfficientNetB1', classification_model = 'default', freeze = False, input_shape = [192,192,3], activation = 'sigmoid', weights = 'imagenet', optimizer = 'rmsprop', loss = 'binary_crossentropy', metrics = 'accuracy')\n    \n    \n    callbacks = get_callbacks(lr_scheduler = 'rampup', early_stopping = None, reduce_lr_on_plateau = None)\n","29e029ce":"from kaggle_datasets import KaggleDatasets\n\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('cats-dogs-tfrecords-192x192')","a6ff08cb":"print(GCS_DS_PATH)","a20a6df2":"EPOCHS = 5","a9a0b2b6":"BATCH_SIZE = 16 * strategy.num_replicas_in_sync\nprint(BATCH_SIZE)","d4490a6f":"dictionary_labeled = \"{ 'image_raw' : tf.io.FixedLenFeature([], tf.string), 'label' : tf.io.FixedLenFeature([], tf.int64)}\"\nIMAGE_SIZE = \"192,192\"\n\nfrom quick_ml.begin_tpu import get_labeled_tfrecord_format\nget_labeled_tfrecord_format(dictionary_labeled, IMAGE_SIZE)","69fec477":"train_tfrec_path = '\/train.tfrecords'\ntrain_dataset = get_training_dataset(GCS_DS_PATH, train_tfrec_path, BATCH_SIZE)","2f5bb0c3":"STEPS_PER_EPOCH = 14961 \/\/ BATCH_SIZE","d28431e4":"val_tfrec_path = '\/val.tfrecords'\n\nval_dataset = get_validation_dataset(GCS_DS_PATH, val_tfrec_path, BATCH_SIZE)","20b3caa9":"model.fit(train_dataset, validation_data = val_dataset, epochs = EPOCHS\n         , steps_per_epoch = STEPS_PER_EPOCH, batch_size = BATCH_SIZE, callbacks = callbacks)","6397cc91":"### III. Define the callbacks needed","1996ca5a":"### II. Defining TPU Strategy & Instance","ca892d6d":"### V. Define the parameters needed","0b86e5ec":"### I. Installation & Necessary Imports","8a155e23":"### IV. Model definition along with callbacks","bfb46b3a":"1. GCS_DS_PATH\n2. EPOCHS\n3. BATCH_SIZE\n4. dictionary_labeled\n5. IMAGE_SIZE\n6. 4 + 5 => get_labeled_tfrecord_format\n7. train_tfrec_path\n8. training & val dataset","d4ff999d":"### VI. Begin Model Training"}}