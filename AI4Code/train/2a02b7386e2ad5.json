{"cell_type":{"bb9bf37e":"code","5e829e6d":"code","69de9e6f":"code","005ef189":"code","77daa537":"code","d0c89560":"code","93bebbb0":"code","6ba62b6f":"code","42d31ff9":"code","77f90ccc":"code","67b9fc45":"code","411f5e2d":"code","cf295d0c":"code","b8edbb34":"code","9190b334":"code","bd692e92":"code","0e55c2bf":"code","b1d29a41":"code","b5eb6d7e":"code","07a8e69d":"code","833164a9":"code","177c1994":"code","fecb2e05":"code","80087c29":"code","b6be4f4b":"code","65b48a46":"code","97ad1943":"code","85a94240":"code","9d19a65e":"code","a254f099":"code","625d77c8":"code","6110a2da":"code","de81ce39":"markdown","f6a7ab4c":"markdown","446f4767":"markdown","bacb2536":"markdown","7a4822e8":"markdown","f2fd671c":"markdown","2cbb95e1":"markdown","53548fd6":"markdown","1ef9b794":"markdown","54a62562":"markdown"},"source":{"bb9bf37e":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pathlib import Path","5e829e6d":"path = Path('..\/input\/prediction-of-music-genre')\ndf = pd.read_csv(path \/ 'music_genre.csv')","69de9e6f":"df.head()","005ef189":"df.dtypes","77daa537":"df.describe()","d0c89560":"for column in df.columns:\n    print(\"Number of Missing value\",column,\":\", df[column].isnull().values.sum())\nprint(\"Data original Shape\", df.shape)\nprint()\ndf = df.dropna()\nprint(\"Total Number of Missing value: \", df.isnull().sum().sum())\nprint(\"Data shape after drop missing rows\",df.shape)","93bebbb0":"print(\"Duplicate Data: \",df.duplicated().sum())","6ba62b6f":"df.columns","42d31ff9":"data = df.drop(columns=['instance_id', \"obtained_date\", 'tempo'])\ndata.columns","77f90ccc":"data['music_genre'] = data['music_genre'].apply(lambda x: 1 if x == \"Electronic\" else 0)\n","67b9fc45":"from sklearn.preprocessing import LabelEncoder\n\nlabel_encoder = LabelEncoder()\ndata['mode'] = label_encoder.fit_transform(data['mode']).astype('float64')\n# data['music_genre'] = label_encoder.fit_transform(data['music_genre']).astype('float64')\ndata['key'] = label_encoder.fit_transform(data['key']).astype('float64')","411f5e2d":"text = []\nnumeric = []\nfor name in data.columns:\n    if data[name].dtype == object:\n        text.append(name)\n    else:\n        numeric.append(name)\nprint(\"Numeric Data: \", *numeric)\nprint(\"Text Columns: \", *text)","cf295d0c":"import re\nimport string\n\ndef preprocessing(text):\n    text = str(text).lower()\n    text = re.sub('\\[.*?\\]','',text)\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+','',text)\n    text = re.sub(\"[%s]\" % re.escape(string.punctuation),'',text)\n    text = re.sub(\"\\n\",'',text)\n    text = re.sub('\\w*\\d\\w*','',text)\n    \n    return(text)\ndata['track_name'] = data['track_name'].apply(preprocessing)\ndata['artist_name'] = data['artist_name'].apply(preprocessing)","b8edbb34":"import nltk\nnltk.download('punkt')","9190b334":"sentence = list()\nfor i in data['artist_name']:\n    sentence.append(nltk.word_tokenize(i))\nfor i in data['track_name']:\n    sentence.append(nltk.word_tokenize(i))","bd692e92":"from gensim.models import Word2Vec","0e55c2bf":"model_w2c=Word2Vec(sentence,vector_size=100,window=3,workers=4,min_count=2)","b1d29a41":"def word_to_bow(text):\n    words = nltk.word_tokenize(text)\n    bow = 0\n    for i in words:\n        try:\n            bow += sum(model_w2c.wv[i])\n        except:\n            pass\n    return bow\ndata['track_name'] = data['track_name'].apply(word_to_bow)\ndata['artist_name'] = data['artist_name'].apply(word_to_bow)","b5eb6d7e":"data","07a8e69d":"inp =  data.drop(columns = ['music_genre'])\nout = data['music_genre']","833164a9":"from sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(inp, out, test_size = 0.1)","177c1994":"print(\"Shape of xtrain is \",xtrain.shape)\nprint(\"Shape of xtest is \",xtest.shape)\nprint(\"Shape of ytrain is \",ytrain.shape)\nprint(\"Shape of ytest is \",ytest.shape)","fecb2e05":"from sklearn.metrics import confusion_matrix, accuracy_score, roc_auc_score\nfrom sklearn.metrics import roc_curve, classification_report\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier","80087c29":"lr = LogisticRegression()\nmodel = lr.fit(xtrain, ytrain)\ny_pred = lr.predict(xtest)\nprint(\"AUC:\",roc_auc_score(ytest, y_pred))\nprint(classification_report(ytest, y_pred))","b6be4f4b":"dtc = DecisionTreeClassifier()\nmodel = dtc.fit(xtrain, ytrain)\ny_pred = dtc.predict(xtest)\nprint(\"AUC:\",roc_auc_score(ytest, y_pred))\nprint(classification_report(ytest, y_pred))","65b48a46":"rfc = RandomForestClassifier()\nmodel = rfc.fit(xtrain, ytrain)\ny_pred = rfc.predict(xtest)\nprint(\"AUC:\",roc_auc_score(ytest, y_pred))\nprint(classification_report(ytest, y_pred))","97ad1943":"knn_metric = []\nfor i in range(2,15):\n    knn = KNeighborsClassifier(n_neighbors = i)\n    model = knn.fit(xtrain, ytrain)\n    y_pred = knn.predict(xtest)\n    knn_metric.append([roc_auc_score(ytest, y_pred), accuracy_score(ytest, y_pred)])\n\nprint(\"Model selected base on AUC\")\nprint(f'AUC: {max(knn_metric, key = lambda x: x[0])[0]}')\nprint(f'Accuracy: {max(knn_metric, key = lambda x: x[0])[1]}')\nprint(\"K = \", knn_metric.index(max(knn_metric, key = lambda x: x[0]))+2)\nprint()\nprint(\"Model selected base on Accuracy\")\nprint(f'AUC: {max(knn_metric, key = lambda x: x[1])[0]}')\nprint(f'Accuracy: {max(knn_metric, key = lambda x: x[1])[1]}')\nprint(\"K = \", knn_metric.index(max(knn_metric, key = lambda x: x[1]))+2)","85a94240":"from sklearn.model_selection import RandomizedSearchCV\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\nprint(random_grid)","9d19a65e":"rf = RandomForestClassifier()\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 10, cv = 3, n_jobs = -1)\nrf_random.fit(xtrain, ytrain)","a254f099":"rf_random.best_params_","625d77c8":"#Test set Performance\ny_pred = rf_random.best_estimator_.predict(xtest)\nprint(\"AUC:\",roc_auc_score(ytest, y_pred))\nprint(classification_report(ytest, y_pred))","6110a2da":"# Training Performance\ny_pred = rf_random.best_estimator_.predict(xtrain)\nprint(\"AUC:\",roc_auc_score(ytrain, y_pred))\nprint(classification_report(ytrain, y_pred))","de81ce39":"## Model Development","f6a7ab4c":"Check Duplicated Data","446f4767":"Change the categorical data to numeric values","bacb2536":"Drop uninformative columns and corrupted column","7a4822e8":"## Classify \u201cElectronic\u201d music among other genres","f2fd671c":"## Processing Text Data","2cbb95e1":"## EDA","53548fd6":"## Hyperparameter tunning for RandomForest using Random Grid Search","1ef9b794":"Change the music_genre to a binary value since only Electronic and Other are two classes that we care","54a62562":"Check Missing Values"}}