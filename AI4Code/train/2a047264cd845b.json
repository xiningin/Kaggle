{"cell_type":{"50cf8df9":"code","f2d42e47":"code","215cea5d":"code","c122e7a7":"code","b4fd7a25":"code","2b8af049":"code","52797a02":"code","fe827724":"code","050d41c8":"markdown","c2f37711":"markdown","8a05f5b2":"markdown","2e70ec63":"markdown","a613eb01":"markdown","53ababe8":"markdown"},"source":{"50cf8df9":"import pandas as pd \nimport numpy as np \ncredits_df=pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\nmovies_df=pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","f2d42e47":"credits_df.columns = ['id','tittle','cast','crew']\ndf= movies_df.merge(credits_df,on='id')\nprint(\"df columns after merging\")\nprint(df.columns)\nprint(\"-----------------------------------------------------------------------------------------\")\ndf","215cea5d":"from surprise import Reader, Dataset, SVD\nreader = Reader()\nratings = pd.read_csv('..\/input\/the-movies-dataset\/ratings_small.csv')\nratings.head()","c122e7a7":"from surprise.model_selection import KFold\ndata= Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)\nkf = KFold(n_splits=5)\nkf.split(data)","b4fd7a25":"from surprise.model_selection import cross_validate\nsvd = SVD()\ncross_validate(svd, data, measures=['RMSE', 'MAE'])","2b8af049":"trainset = data.build_full_trainset()\nsvd.fit(trainset)","52797a02":"ratings[ratings['userId'] == 1]","fe827724":"svd.predict(1, 302, 3)","050d41c8":"Note that in this dataset movies are rated on a scale of 5 unlike the earlier one.","c2f37711":"## **Conclusion** \nWe create recommenders using demographic , content- based and collaborative filtering. While demographic filtering is very elemantary and cannot be used practically, **Hybrid Systems** can take advantage of content-based and collaborative filtering as the two approaches are proved to be almost complimentary.\nThis model was very baseline and only provides a fundamental framework to start with.\n\nI would like to mention some excellent refereces that I learned from\n\n1. [https:\/\/www.kaggle.com\/rounakbanik\/movie-recommender-systems](https:\/\/www.kaggle.com\/rounakbanik\/movie-recommender-systems)\n2. [https:\/\/towardsdatascience.com\/how-to-build-a-movie-recommendation-system-67e321339109](https:\/\/towardsdatascience.com\/how-to-build-a-movie-recommendation-system-67e321339109)\n","8a05f5b2":"### **Single Value Decomposition**\nOne way to handle the scalability and sparsity issue created by CF is to leverage a **latent factor model** to capture the similarity between users and items. Essentially, we want to turn the recommendation problem into an optimization problem. We can view it as how good we are in predicting the rating for items given a user. One common metric is Root Mean Square Error (RMSE). **The lower the RMSE, the better the performance**.\n\nNow talking about latent factor you might be wondering what is it ?It is a broad idea which describes a property or concept that a user or an item have. For instance, for music, latent factor can refer to the genre that the music belongs to. SVD decreases the dimension of the utility matrix by extracting its latent factors. Essentially, we map each user and each item into a latent space with dimension r. Therefore, it helps us better understand the relationship between users and items as they become directly comparable. The below figure illustrates this idea.\n\n![](https:\/\/cdn-images-1.medium.com\/max\/800\/1*GUw90kG2ltTd2k_iv3Vo0Q.png)","2e70ec63":"Now enough said , let's see how to implement this.\nSince the dataset we used before did not have userId(which is necessary for collaborative filtering) let's load another dataset. We'll be using the [**Surprise** ](https:\/\/surprise.readthedocs.io\/en\/stable\/index.html) library to implement SVD.","a613eb01":"# **Collaborative Filtering**\n\nOur content based engine suffers from some severe limitations. It is only capable of suggesting movies which are close to a certain movie. That is, it is not capable of capturing tastes and providing recommendations across genres.\n\nAlso, the engine that we built is not really personal in that it doesn't capture the personal tastes and biases of a user. Anyone querying our engine for recommendations based on a movie will receive the same recommendations for that movie, regardless of who she\/he is.\n\nTherefore, in this section, we will use a technique called Collaborative Filtering to make recommendations to Movie Watchers.\nIt is basically of two types:-\n\n*  **User based filtering**-  These systems recommend products to a user that similar users have liked. For measuring the similarity between two users we can either use pearson correlation or cosine similarity.\nThis filtering technique can be illustrated with an example. In the following matrixes, each row represents a user, while the columns correspond to different movies except the last one which records the similarity between that user and the target user. Each cell represents the rating that the user gives to that movie. Assume user E is the target.\n![](https:\/\/cdn-images-1.medium.com\/max\/1000\/1*9NBFo4AUQABKfoUOpE3F8Q.png)\n\nSince user A and F do not share any movie ratings in common with user E, their similarities with user E are not defined in Pearson Correlation. Therefore, we only need to consider user B, C, and D. Based on Pearson Correlation, we can compute the following similarity.\n![](https:\/\/cdn-images-1.medium.com\/max\/1000\/1*jZIMJzKM1hKTFftHfcSxRw.png)\n\nFrom the above table we can see that user D is very different from user E as the Pearson Correlation between them is negative. He rated Me Before You higher than his rating average, while user E did the opposite. Now, we can start to fill in the blank for the movies that user E has not rated based on other users.\n![](https:\/\/cdn-images-1.medium.com\/max\/1000\/1*9TC6BrfxYttJwiATFAIFBg.png)\n\nAlthough computing user-based CF is very simple, it suffers from several problems. One main issue is that users\u2019 preference can change over time. It indicates that precomputing the matrix based on their neighboring users may lead to bad performance. To tackle this problem, we can apply item-based CF.\n\n* **Item Based Collaborative Filtering** - Instead of measuring the similarity between users, the item-based CF recommends items based on their similarity with the items that the target user rated. Likewise, the similarity can be computed with Pearson Correlation or Cosine Similarity. The major difference is that, with item-based collaborative filtering, we fill in the blank vertically, as oppose to the horizontal manner that user-based CF does. The following table shows how to do so for the movie Me Before You.\n![](https:\/\/cdn-images-1.medium.com\/max\/1000\/1*LqFnWb-cm92HoMYBL840Ew.png)\n\nIt successfully avoids the problem posed by dynamic user preference as item-based CF is more static. However, several problems remain for this method. First, the main issue is ***scalability***. The computation grows with both the customer and the product. The worst case complexity is O(mn) with m users and n items. In addition, ***sparsity*** is another concern. Take a look at the above table again. Although there is only one user that rated both Matrix and Titanic rated, the similarity between them is 1. In extreme cases, we can have millions of users and the similarity between two fairly different movies could be very high simply because they have similar rank for the only user who ranked them both.\n\n","53ababe8":"For movie with ID 302, we get an estimated prediction of **2.618**. One startling feature of this recommender system is that it doesn't care what the movie is (or what it contains). It works purely on the basis of an assigned movie ID and tries to predict ratings based on how the other users have predicted the movie."}}