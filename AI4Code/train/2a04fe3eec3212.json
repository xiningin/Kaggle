{"cell_type":{"25aa2aa5":"code","bd5587d4":"code","1e00f81b":"code","9ef3949e":"code","002c0d0c":"code","5ce9eb9d":"code","78c55bbc":"code","2937ac89":"code","1ad6aade":"code","f2dbb593":"code","61a1cf15":"code","2e2adf33":"code","312313d3":"code","cd3c4263":"code","acfe99b8":"code","f6da8bf2":"code","b808bdfa":"code","6f96cb73":"code","13701b9a":"code","cf63f248":"code","3d79ca04":"code","cb675f28":"code","a83c359e":"code","94b06835":"code","8e057765":"code","85a7ad2e":"code","29be3723":"code","83d0eb59":"code","89ce714a":"code","a05ea86f":"markdown","f250da32":"markdown","bc02d6ed":"markdown","4adc9578":"markdown","1e0d08bf":"markdown","6b9a1f0f":"markdown","6576a093":"markdown","9629792e":"markdown","00e0ec81":"markdown","5a3c42e9":"markdown","1966f923":"markdown","c2cb4269":"markdown","2831e36e":"markdown","b496d544":"markdown","c3cbe177":"markdown","304388d1":"markdown","b09178e0":"markdown","3524082a":"markdown","0926f513":"markdown","6970bc0b":"markdown","43f7e6ae":"markdown","7953d537":"markdown","9ee76225":"markdown","6d83fe63":"markdown","89004ea4":"markdown","a6516b1b":"markdown","5e7eb186":"markdown","c53cc203":"markdown","40b4c62d":"markdown","94d84fba":"markdown"},"source":{"25aa2aa5":"from fastai.vision import *\nimport warnings\nwarnings.filterwarnings('ignore')","bd5587d4":"path='..\/input\/number-captcha\/content\/images\/char-5-epoch-6\/train'\ntest_path='..\/input\/number-captcha\/content\/images\/char-5-epoch-6\/test'\nfns = get_image_files(path)\nfns_test= get_image_files(test_path)","1e00f81b":"len(fns),len(fns_test)","9ef3949e":"fns[0]","002c0d0c":"open_image(fns[0])","5ce9eb9d":"# Input: Path of image file\ndef get_image_name(fns):\n  path=[]\n  labels=[]\n  for f in fns:\n    f=str(f)\n    path.append(f.strip('\/'))\n    labels.append(\"\".join(f).split('\/')[-1].split('.')[0].split('_')[0])\n  return (labels)","78c55bbc":"labels=get_image_name(fns)","2937ac89":"characters = set([letter for label in labels for letter in label])\ncharacters=list(characters)\ncharacters.sort()\nprint(len(characters), 'different characters were found')\nprint(characters)","1ad6aade":"encoding_dict = {l:e for e,l in enumerate(characters)}\nencoding_dict","f2dbb593":"decoding_dict = {e:l for l,e in encoding_dict.items()}\ndecoding_dict","61a1cf15":"code_dimension=len(characters) #10=>0-9\ncaptcha_dimension=5 # because we have 5 length captcha\ndef to_onehot(filename):\n    code = str(filename).split('\/')[-1].split('.')[0].split(\"_\")[0]\n    onehot = np.zeros((code_dimension, captcha_dimension))\n    for column, letter in enumerate(code):\n        onehot[encoding_dict[letter], column] = 1\n    print(onehot)\n    return onehot.reshape(-1)","2e2adf33":"print(\"One-Hot Encoding for the captcha\",labels[0])\nto_onehot(fns[0])","312313d3":"test_data=ImageList.from_folder(test_path)\ndata=(ImageList.from_folder(path)\n        .split_by_rand_pct(0.2,42)\n        .label_from_func(to_onehot, label_cls = FloatList) #making it a regression instead of classification (because this gave better results)\n        .transform(size=(96,256))\n        .databunch(bs=64))\ndata.add_test(test_data)","cd3c4263":"data.show_batch(rows=1)","acfe99b8":"def decode(onehot):\n    onehot = onehot.reshape(code_dimension, captcha_dimension)\n    idx = np.argmax(onehot, axis=0)\n    return [decoding_dict[i.item()] for i in idx]\n\n\n# metrics are calculated based on the number of correctly detected CAPTCHAs as a whole (i.e. correct detection of all\n# five individual digits in a given CAPTCHA)\n                            \ndef captcha_accuracy(preds, actuals):\n    pred = torch.unbind(preds)\n    act = torch.unbind(actuals)\n    \n    valid = 0\n    total = 0\n    \n    for left,right in zip(pred,act):\n        total+=1\n        p = decode(left)\n        a = decode(right)\n        if p==a: valid += 1\n     \n    #print(valid,total)\n    return torch.tensor(valid\/total).cuda()","f6da8bf2":"captcha_model = cnn_learner(data, models.resnet50, model_dir='..\/input\/captcha-model',pretrained=False,path=Path(''),metrics=[captcha_accuracy],\n                   ps=0.1)","b808bdfa":"captcha_model.lr_find()","6f96cb73":"captcha_model.recorder.plot()","13701b9a":"losses=captcha_model.recorder.losses\nlrs=captcha_model.recorder.lrs\nmin_lr=lrs[np.argmin(losses)]\nsteep_lr=1e-4","cf63f248":"%%time\ncaptcha_model.fit_one_cycle(10,max_lr=2e-03,wd=0.01)","3d79ca04":"#  test set labels \nlabels_test=[]\nfor f in fns_test:\n  labels_test.append(to_onehot(f))\nlabels_test=tensor(labels_test)","cb675f28":"res = captcha_model.get_preds(DatasetType.Test)","a83c359e":"captcha_accuracy(res[0],labels_test)","94b06835":"captcha_model.data.test_ds.x[1]","8e057765":"decode(res[0][1])","85a7ad2e":"captcha_model.data.test_ds.x[50]","29be3723":"decode(res[0][50])","83d0eb59":"captcha_model.data.test_ds.x[240]","89ce714a":"decode(res[0][240])","a05ea86f":"When deeper networks are able to start converging, a  degradation problem has been exposed: with the network\ndepth increasing, accuracy gets saturated and then degrades rapidly. Unexpectedly,such degradation is not caused by overfitting, and adding\nmore layers to a suitably deep model leads to higher training error,\n\n**Solution** - Residual Neural Networks (ResNets)\n\n**What are Residual Neural Networks ?**\n\nResNet50 is a variant of ResNet model which has 48 Convolution layers along with 1 MaxPool and 1 Average Pool layer. It has 3.8 x 10^9 Floating points operations.\n\n* Take shallow network and add extra layers without losing accuracy \n\nThe idea behind residual network is simple whenever we backpropagate through an operation, we have to use the chain rule and multiply, but what if we were to backpropagate through the identity function? Then the gradient would simply be multiplied by 1 and nothing would happen to it! This is the idea behind ResNet: it stacks these residual blocks together where we use an identity function to preserve the gradient.","f250da32":"### Decoding Dictionary","bc02d6ed":"When Jeremy howard used ResNet-50 in first lecture , I have heard about it many times , but never used , but this time I was curious to know the underlying architecture behind it. So I started learning about it .\n\nResNet has been trained with 34, 50, 101 and 152 layers. And if that was not enough, with 1000 layers too!!\n\nBefore we understand the architecture of ResNet lets first understand about **vanishing gradient problem**\n\n![image.png](attachment:image.png)\n\nThe gradient descent algorithm, in specific, updates the weights by the negative of the gradient multiplied by some small (between 0 and 1) scalar value.\n\nAs you can see, we are to \u201crepeat\u201d until convergence. In reality, though, we actually set a hyper-parameter for the number of max iterations. If the number of iterations is too small for certain deep neural nets, we will have inaccurate results. If the number is too large, the training duration will become infeasibly long. It\u2019s an unsettling tradeoff between training time and accuracy.\n\n\nFor shallow network with only a few layers that use these activations, this isn\u2019t a big problem. However, when more layers are used, it can cause the gradient to be too small for training to work effectively.(Approches to 0 )\n","4adc9578":"# Evaluating Model on Test Dataset","1e0d08bf":"<img src=\"https:\/\/i.pinimg.com\/originals\/e2\/d7\/c7\/e2d7c71b09ae9041c310cb6b2e2918da.gif\">","6b9a1f0f":"mathematically ,\n\n```H(x) = F(x) + x, where F(x) = W2*relu(W1*x+b1)+b2```","6576a093":"#  ResNet-50(Residual Networks)","9629792e":"# About Dataset\nI am generating captcha images using this github repository - https:\/\/github.com\/JackonYang\/captcha-tensorflow\n\nI have generated 5 digits captcha by just running this - \n\n```\n    python3 datasets\/gen_captcha.py -d --npi=5 -n 6\n```","00e0ec81":"### Encoding dictionary","5a3c42e9":"### One-hot Encoding ","1966f923":"![image.png](attachment:image.png)","c2cb4269":"![image.png](attachment:image.png)","2831e36e":"### Example 3","b496d544":"\n### What is Captcha (Completely Automated Public Turing test to Tell Computers and Humans Apart)???  \nAccording to Wikipedia, a CAPTCHA is a type of challenge\u2013response test used in computing to determine whether or not the user is human.\n\n### How does a CAPTCHA work?\nThe idea is that a computer program such as a bot will be unable to interpret the distorted letters, while a human being, who is used to seeing and interpreting letters in all kinds of contexts \u2013 different fonts, different handwritings, etc. \u2013 will usually be able to identify them.","c3cbe177":"![image.png](attachment:image.png)","304388d1":"<font size=\"+1\" color='blue'><b> I hope you enjoyed this kernel , Please don't forget to appreciate me with an Upvote.<\/b><\/font>","b09178e0":"### Example 2","3524082a":"So, that's our architecture , now let's use it .","0926f513":"**Now let's understand what above code does?**\n\nThe above code first taking all images from path specified and split the images to train\/validation set (0.2 means 20% validation 80% train) and then adding labels from our specified function and then transforming images .After all that is specified we can create a DataBunch from the final output.\nIn fastai the data-containing object that we need to feed to a neural network is called a DataBunch. This is called a \u2018bunch\u2019 because it bunches together several PyTorch classes into one.","6970bc0b":"![image.png](attachment:image.png)","43f7e6ae":"![image.png](attachment:image.png)","7953d537":"# Data Preprocessing","9ee76225":"#  Introduction","6d83fe63":"### Function to get name of image(labels) from path","89004ea4":"![image.png](attachment:image.png)","a6516b1b":"### Test Set Accuracy","5e7eb186":"###  Example 1","c53cc203":"We can see on this plot that in the range 1e-6 to 1e-5, nothing really happens and the model doesn't train. Then the loss starts to decrease until it reaches a minimum, and then increases again. We don't want a learning rate greater than point where it started increasing again.\nwe can choose learning rate between min_lr\/10 and steep_lr , so I choose 2e-03","40b4c62d":"## References -\n\n[1] https:\/\/arxiv.org\/pdf\/2006.08296.pdf\n\n[2] https:\/\/github.com\/JackonYang\/captcha-tensorflow\n\n[3] https:\/\/arxiv.org\/abs\/1512.03385\n","94d84fba":"**CAPTCHAs** were designed to prevent computers from automatically filling out forms by verifying that you are a real person. But with the rise of deep learning and computer vision, they can now often be defeated easily.\n\nSo after watching **Jeremy Howard** deeplearning course I decided to try something interesting and fun , so i choose this problem."}}