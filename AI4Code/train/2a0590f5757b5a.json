{"cell_type":{"23cc2fa5":"code","e1cf9c7b":"code","4cbd93c9":"code","10e5a1a5":"code","fb7ad2b3":"code","452ed15f":"code","afeb2374":"code","699a86e1":"code","340eb58b":"code","1164c6d5":"code","51eeb9da":"code","17bb5da6":"code","c1dbac28":"code","7905970d":"code","c3b9f735":"code","149290d6":"code","b12f3774":"code","f66e5dda":"code","b63ba98a":"code","ffec2542":"code","4308aba6":"code","b0e752a1":"code","ae1f1542":"code","1dfecc2d":"code","7512f4fd":"code","a984f44a":"code","97fe4111":"code","8532a9aa":"code","7a224b17":"code","a0db3e57":"code","b415e576":"code","fc4a80d5":"code","6bd5247d":"code","e0d078e7":"code","c5d6fd2b":"code","a32813fc":"code","6b387ee4":"code","1f521c87":"markdown","b05b8a46":"markdown","1f50979c":"markdown","d926233c":"markdown","a19f4121":"markdown","84eb0fb9":"markdown","0a6d7615":"markdown","5e021e36":"markdown","7f040cba":"markdown","25485498":"markdown","c57f478f":"markdown","d565630f":"markdown","8fb1970d":"markdown","1f6b9f54":"markdown","9eec8cb4":"markdown","d4c9da63":"markdown","b597f6f8":"markdown","548a01fe":"markdown","31f8570d":"markdown","3f3b6bf4":"markdown","a11021b9":"markdown"},"source":{"23cc2fa5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e1cf9c7b":"import numpy as np \nimport pandas as pd \nimport os\nimport missingno as msno\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom scipy import stats\nfrom sklearn.linear_model import LogisticRegression\nfrom imblearn.over_sampling import SMOTE\nfrom collections import Counter\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestRegressor\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")","4cbd93c9":"df = pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')\ndf.head()","10e5a1a5":"df.shape","fb7ad2b3":"df.info()","452ed15f":"cate_col, contin_val=[],[]\nfor i in df.columns:\n    \n    if df[i].dtype == 'object':\n        cate_col.append(i)\n    else:\n        contin_val.append(i)","afeb2374":"print(cate_col)","699a86e1":"print(contin_val)","340eb58b":"df.nunique()","1164c6d5":"df.isnull().sum()","51eeb9da":"msno.matrix(df)","17bb5da6":"msno.bar(df, sort='ascending')","c1dbac28":"msno.heatmap(df)","7905970d":"df['RainTomorrow'] = df['RainTomorrow'].map({'Yes': 1, 'No': 0})\ndf['RainToday'] = df['RainToday'].map({'Yes': 1, 'No': 0})\n\nprint(df.RainToday)\nprint(df.RainTomorrow)","c3b9f735":"#Checking percentage of missing data in every column\n\n(df.isnull().sum()\/len(df))*100","149290d6":"#Filling the missing values for continuous variables with mean\ndf['MinTemp'] = df['MinTemp'].fillna(df['MinTemp'].mean())\ndf['MaxTemp'] = df['MinTemp'].fillna(df['MaxTemp'].mean())\ndf['Rainfall']= df['Rainfall'].fillna(df['Rainfall'].mean())\ndf['Evaporation'] = df['Evaporation'].fillna(df['Evaporation'].mean())\ndf['Sunshine']= df['Sunshine'].fillna(df['Sunshine'].mean())\ndf['WindGustSpeed'] = df['WindGustSpeed'].fillna(df['WindGustSpeed'].mean())\ndf['WindSpeed9am']= df['WindSpeed9am'].fillna(df['WindSpeed9am'].mean())\ndf['WindSpeed3pm'] = df['WindSpeed3pm'].fillna(df['WindSpeed3pm'].mean())\ndf['Humidity9am'] = df['Humidity9am'].fillna(df['Humidity9am'].mean())\ndf['Humidity3pm']= df['Humidity3pm'].fillna(df['Humidity3pm'].mean())\ndf['Pressure9am']= df['Pressure9am'].fillna(df['Pressure9am'].mean())\ndf['Pressure3pm']= df['Pressure3pm'].fillna(df['Pressure3pm'].mean())\ndf['Cloud9am']= df['Cloud9am'].fillna(df['Cloud9am'].mean())\ndf['Cloud3pm']= df['Cloud3pm'].fillna(df['Cloud3pm'].mean())\ndf['Temp9am']= df['Temp9am'].fillna(df['Temp9am'].mean())\ndf['Temp3pm']= df['Temp3pm'].fillna(df['Temp3pm'].mean())","b12f3774":"#Filling the missing values for continuous variables with mode\n\ndf['RainToday']= df['RainToday'].fillna(df['RainToday'].mode()[0])\ndf['RainTomorrow']=df['RainTomorrow'].fillna(df['RainTomorrow'].mode()[0])","f66e5dda":"#Filling the missing values for continuous variables with mode\ndf['WindDir9am'] = df['WindDir9am'].fillna(df['WindDir9am'].mode()[0])\ndf['WindGustDir'] = df['WindGustDir'].fillna(df['WindGustDir'].mode()[0])\ndf['WindDir3pm'] = df['WindDir3pm'].fillna(df['WindDir3pm'].mode()[0])","b63ba98a":"#Checking percentage of missing data in every column\n\n(df.isnull().sum()\/len(df))*100","ffec2542":"fig, ax =plt.subplots(1,2)\nprint(df.RainToday.value_counts())\nprint(df.RainTomorrow.value_counts())\n\nplt.figure(figsize=(20,20))\nsns.countplot(data=df,x='RainToday',ax=ax[0])\nsns.countplot(data=df,x='RainTomorrow',ax=ax[1])","4308aba6":"fig, ax =plt.subplots(3,1)\nplt.figure(figsize=(10,10))\n\nsns.countplot(data=df,x='WindDir9am',ax=ax[0])\nsns.countplot(data=df,x='WindDir3pm',ax=ax[1])\nsns.countplot(data=df,x='WindGustDir',ax=ax[2])\nfig.tight_layout()","b0e752a1":"#Dropping date column\ndf=df.iloc[:,1:]\ndf","ae1f1542":"#Encoding Categorical variabels\nle = preprocessing.LabelEncoder()\ndf['Location'] = le.fit_transform(df['Location'])\ndf['WindDir9am'] = le.fit_transform(df['WindDir9am'])\ndf['WindDir3pm'] = le.fit_transform(df['WindDir3pm'])\ndf['WindGustDir'] = le.fit_transform(df['WindGustDir'])","1dfecc2d":"df.head()","7512f4fd":"#Checking the Co-relation by using heatmap\nplt.figure(figsize=(15,15))\nax = sns.heatmap(df.corr(), square=True, annot=True, fmt='.2f')\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)          \nplt.show();","a984f44a":"#Checking the Outliers in the humidity column\nfig, ax =plt.subplots(2,1)\nplt.figure(figsize=(10,10))\nsns.boxplot(df['Humidity3pm'],orient='v',color='c',ax=ax[0])\nsns.boxplot(df['Humidity9am'],orient='v',color='c',ax=ax[1])\nfig.tight_layout()","97fe4111":"# Checing the Outlier from 9 - 15 time\nfig, ax =plt.subplots(2,1)\nplt.figure(figsize=(10,10))\nsns.boxplot(df['Pressure3pm'],orient='v',color='c',ax=ax[0])\nsns.boxplot(df['Pressure9am'],orient='v',color='c',ax=ax[1])\nfig.tight_layout()","8532a9aa":"sns.violinplot(x='RainToday',y='MaxTemp',data=df,hue='RainTomorrow')","7a224b17":"sns.violinplot(x='RainToday',y='MinTemp',data=df,hue='RainTomorrow')","a0db3e57":"print('Shape Before Removing Outliers', df.shape )\ndf=df[(np.abs(stats.zscore(df)) < 3).all(axis=1)]\nprint('Shape After Removing Outliers', df.shape )","b415e576":"#Removing highly co-related column\ndf = df.drop(['Temp3pm','Temp9am','Humidity9am'],axis=1)\ndf.columns","fc4a80d5":"#Blancing data by using SMOTE\nos = SMOTE()\nx, y = os.fit_resample(df.iloc[:,:-1], df.iloc[:,-1])\ncount = Counter(y)\nprint(count)","6bd5247d":"# Training data\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","e0d078e7":"model = GaussianNB()\nmodel.fit(x_train, y_train)\n  \npredicted = model.predict(x_test)\n  \nprint(\"The accuracy of Gaussian Naive Bayes model is : \", accuracy_score(y_test, predicted)*100, \"%\")\nprint()\nprint(\"F1 score for Gaussian Naive Bayes is :\",f1_score(y_test, predicted,)*100, \"%\")","c5d6fd2b":"model = BernoulliNB()\nmodel.fit(x_train, y_train)\n  \npredicted = model.predict(x_test)\n  \nprint(\"The accuracy of Gaussian Naive Bayes model is : \", accuracy_score(y_test, predicted)*100, \"%\")\nprint()\nprint(\"F1 score for Bernoulli Naive Bayes is :\",f1_score(y_test, predicted,)*100, \"%\")","a32813fc":"model = RandomForestRegressor(n_estimators = 100, random_state = 0)  \nmodel.fit(x_train, y_train)  \npredicted = model.predict(x_test)\nprint(\"The accuracy of Random Forest is : \", accuracy_score(y_test, predicted.round())*100, \"%\")","6b387ee4":"xgbc = XGBClassifier(objective='binary:logistic')\nxgbc.fit(x_train,y_train)\npredicted = xgbc.predict(x_test)\nprint (\"The accuracy of Logistic Regression is : \", accuracy_score(y_test, predicted)*100, \"%\")\nprint()\nprint(\"F1 score for XGBoost is :\",f1_score(y_test, predicted,)*100, \"%\")","1f521c87":"# Checking Null values","b05b8a46":"## Random Forest","1f50979c":"## Bernoulli Naive Bayes","d926233c":"## Gaussian Naive Bayes","a19f4121":"## Removing Outliers","84eb0fb9":"# 2.Data Visualisation\n* Count of Today and Tommorow rain","0a6d7615":"# Shape of DataFrame","5e021e36":"# Describing Attributes","7f040cba":"# Importing Modules","25485498":"# Filling Missing values","c57f478f":"# Changing dummie values yes or No columns","d565630f":"# Reading DataSet","8fb1970d":"## Rain Prediction with 90.51 % accuracy\n* Python \u00b7 Rain in Australia","1f6b9f54":"## Bivariate Analysis","9eec8cb4":"# 1.Creating DataFrame","d4c9da63":"## Seperating Categorical and Continues values","b597f6f8":"## XGBoost Model","548a01fe":"# Visualising Missing values","31f8570d":"## Wind direction 9:00 AM - 15:00 PM","3f3b6bf4":"# Displaing unique values","a11021b9":"# 3. Training Model"}}