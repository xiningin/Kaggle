{"cell_type":{"a77b43f2":"code","d13458d2":"code","94e6a90d":"code","36b7df6b":"code","76414f18":"code","7d0e1756":"code","6d9f9ddb":"code","8f389ca9":"code","9c8ba677":"code","c11ab6d5":"code","d64c97ac":"code","8de29114":"code","85965b12":"code","2982caf9":"code","666fa3cf":"code","bab060ad":"code","5afcd2bf":"code","e7f12362":"code","53402f8e":"code","1ee48410":"code","671177e0":"code","8a77cdc7":"code","586d5031":"code","c1e27141":"code","c79f9293":"code","507f4b82":"code","21979b5a":"code","3bebab23":"code","cc943d80":"code","edfcdf37":"code","aa196402":"markdown","91669354":"markdown","7e8a0343":"markdown","36ad8d41":"markdown","15a9316a":"markdown","3f26bffd":"markdown","8406d00b":"markdown","6b25386e":"markdown","e99b5d86":"markdown","c3c50d3f":"markdown","ec725c38":"markdown","4e10ba38":"markdown","40ab6d8c":"markdown","6b59c8da":"markdown","c4fb61d8":"markdown","be7c7ee0":"markdown","52aa4c44":"markdown"},"source":{"a77b43f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","d13458d2":"data = pd.read_csv('\/kaggle\/input\/iris-flower-dataset\/IRIS.csv')","94e6a90d":"data.head()","36b7df6b":"data.info()","76414f18":"data.shape","7d0e1756":"data.describe()","6d9f9ddb":"data.groupby('species').size()","8f389ca9":"data.groupby('species').mean()","9c8ba677":"data.plot(kind='box' , sharex = False , sharey = False, figsize=(15,10))","c11ab6d5":"data.hist(edgecolor = 'black', linewidth=1.2, figsize=(15,5))","d64c97ac":"data.boxplot(by=\"species\",figsize=(15,10))","8de29114":"# Using seaborn pairplot to see the bivariate relation between each pair of features\nsns.pairplot(data, hue=\"species\")","85965b12":"# Importing metrics for evaluation\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","2982caf9":"# Seperating the data into dependent and independent variables\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values","666fa3cf":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","bab060ad":"# LogisticRegression\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression()\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)","5afcd2bf":"# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))","e7f12362":"# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('accuracy is',accuracy_score(y_pred,y_test))","53402f8e":"# Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)","1ee48410":"# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))","671177e0":"# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('accuracy is',accuracy_score(y_pred,y_test))","8a77cdc7":"# Support Vector Machine's \nfrom sklearn.svm import SVC\n\nclassifier = SVC()\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)","586d5031":"# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))","c1e27141":"# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('accuracy is',accuracy_score(y_pred,y_test))","c79f9293":"# K-Nearest Neighbours\nfrom sklearn.neighbors import KNeighborsClassifier\n\nclassifier = KNeighborsClassifier(n_neighbors=8)\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)","507f4b82":"# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))","21979b5a":"# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('accuracy is',accuracy_score(y_pred,y_test))","3bebab23":"# Decision Tree's\nfrom sklearn.tree import DecisionTreeClassifier\n\nclassifier = DecisionTreeClassifier()\n\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)","cc943d80":"# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))","edfcdf37":"# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('accuracy is',accuracy_score(y_pred,y_test))","aa196402":"### K-Nearest Neighbours","91669354":"## Part 2 - Data Visualization","7e8a0343":"## Part 1- Data Preprocessing","36ad8d41":"### Support Vector Machine","15a9316a":"## Applying different Classification Models","3f26bffd":"### Decision tree","8406d00b":"Box and whisker plots","6b25386e":"Histogram","e99b5d86":"### Summary of The Dataset","c3c50d3f":"Scatter plot matrix","ec725c38":"### Logistic Regression","4e10ba38":"## Iris Dataset Analysis And Machine Learning","40ab6d8c":"Boxplot on each feature split out by species\n","6b59c8da":"From the above, \n\nWe can see that **Iris-Setosa** is separated from both other species in all the features.\n","c4fb61d8":"If you have reached till here, So i hope you liked my Analysis.\n\nIf you learned anything new from this dataset then do give a upvote.\n\nI'm a rookie and any suggestion in the comment box is highly appreciated.\n\nIf you have any doubt reagrding any part of the notebook, feel free to comment your doubt in the comment box.\n\nThank you!!","be7c7ee0":"### Importing the Dataset","52aa4c44":"### Naive Bayes"}}