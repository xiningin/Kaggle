{"cell_type":{"b93911b1":"code","8fa132d2":"code","c026a774":"code","671dedeb":"code","b037013e":"code","bac6d704":"code","17eef1bf":"code","92a36e41":"code","b118b10a":"code","46be798f":"code","ece9a69c":"code","486d26f1":"code","2f0ccdf0":"code","a5688f3a":"code","a7bb8ec9":"code","0d874894":"code","f695b6b9":"code","bc358d58":"code","3ff3ff3a":"code","7ec4318f":"code","dc62eb42":"code","9cff0f16":"code","3068836f":"code","c0a0ea03":"code","11b13be0":"code","0c236552":"code","a0e84153":"code","6bd01d86":"code","6027fdbd":"code","b9c786a7":"code","5900be52":"code","8aa651d9":"code","4820c34f":"code","b72f1477":"code","c8959ac0":"code","bb94ff82":"code","f8da3fc2":"code","b908b573":"code","c30a4c8b":"code","5b340213":"code","f617c25c":"markdown","7b1f73b3":"markdown","c139e951":"markdown","3016b0e2":"markdown","282a971d":"markdown","3dffa542":"markdown","54ee7189":"markdown","cd9d97f2":"markdown","8371e621":"markdown","fcd87465":"markdown","020d5d0e":"markdown","1ee01196":"markdown","6c7e36a2":"markdown","c563120e":"markdown","8e980cdf":"markdown","c083c0ed":"markdown","2058fa88":"markdown","06ae1e02":"markdown","4797de7f":"markdown","a444211f":"markdown","85c9b826":"markdown","10f1c352":"markdown","7bc46c2d":"markdown","9ad78f7b":"markdown","03623f91":"markdown","1c586865":"markdown","07c561d7":"markdown"},"source":{"b93911b1":"import warnings\nwarnings.filterwarnings(\"ignore\")","8fa132d2":"import pandas as pd\ndata = pd.read_csv(\"..\/input\/london-bike-sharing-dataset\/london_merged.csv\")","c026a774":"data.head()","671dedeb":"import tensorflow.compat.v1 as tf\nprint(tf.test.gpu_device_name())\n# See https:\/\/www.tensorflow.org\/tutorials\/using_gpu#allowing_gpu_memory_growth\nconfig = tf.ConfigProto()\nconfig.gpu_options.allow_growth = True","b037013e":"import pandas as pd\nimport numpy as np\n\ndata.shape\ndata.info(memory_usage=\"deep\")\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(context=\"notebook\", style=\"darkgrid\", palette=\"deep\", font=\"sans-serif\", font_scale=1, color_codes=True)\n\ndata.columns\ndata.head()\n\ndata[\"timestamp\"] = pd.to_datetime(data[\"timestamp\"])\n\ndata = data.set_index(\"timestamp\")\n\ndata[\"hour\"] = data.index.hour\ndata[\"day_of_month\"] = data.index.day\ndata[\"day_of_week\"]  = data.index.dayofweek\ndata[\"month\"] = data.index.month\n\ndata.columns\ndata.shape\n\ncorr_matrix = data.corr().abs()\nhigh_corr_var=np.where(corr_matrix>0.8)\nhigh_corr_var=[(corr_matrix.columns[x],corr_matrix.columns[y]) for x,y in zip(*high_corr_var) if x!=y and x<y]","bac6d704":"print(high_corr_var)","17eef1bf":"data.head()","92a36e41":"plt.figure(figsize=(16,6))\nsns.heatmap(data.corr(),cmap=\"YlGnBu\",square=True,linewidths=.5,center=0,linecolor=\"red\")","b118b10a":"plt.figure(figsize=(16,6))\ndata.isnull().sum()\nsns.heatmap(data.isnull(),cmap=\"viridis\")","46be798f":"plt.figure(figsize=(15,6))\nsns.lineplot(data=data,x=data.index,y=data.cnt)\nplt.xticks(rotation=90)","ece9a69c":"df_by_month = data.resample(\"M\").sum()\n\nplt.figure(figsize=(16,6))\nsns.lineplot(data=df_by_month,x=df_by_month.index,y=df_by_month.cnt,color=\"red\")\nplt.xticks(rotation=90)","486d26f1":"plt.figure(figsize=(16,6))\nsns.pointplot(data=data,x=data.hour,y=data.cnt,color=\"black\")","2f0ccdf0":"plt.figure(figsize=(16,6))\nsns.pointplot(data=data,x=data.month,y=data.cnt,color=\"red\")","a5688f3a":"plt.figure(figsize=(16,6))\nsns.pointplot(data=data,x=data.day_of_week,y=data.cnt,color=\"black\")","a7bb8ec9":"plt.figure(figsize=(16,6))\nsns.lineplot(data=data,x=data.day_of_month,y=data.cnt,color=\"r\")","0d874894":"plt.figure(figsize=(16,6))\nsns.pointplot(data=data,x=data.hour,y=data.cnt,hue=data.is_holiday)","f695b6b9":"plt.figure(figsize=(16,6))\nsns.pointplot(data=data,x=data.month,y=data.cnt,hue=data.is_holiday)","bc358d58":"plt.figure(figsize=(16,6))\nsns.pointplot(data=data,hue=data.season,y=data.cnt,x=data.month)","3ff3ff3a":"plt.figure(figsize=(16,6))\nsns.countplot(data=data,hue=data.is_holiday,x=data.season)","7ec4318f":"plt.figure(figsize=(16,6))\nsns.pointplot(data=data,x=data.hum,y=data.cnt,color=\"black\")\nplt.xticks(rotation=90)","dc62eb42":"plt.figure(figsize=(16,6))\nsns.pointplot(data=data,x=data.wind_speed,y=data.cnt)\nplt.xticks(rotation=90)","9cff0f16":"plt.figure(figsize=(16,6))\nsns.pointplot(data=data,x=data.weather_code,y=data.cnt)\nplt.xticks(rotation=90)","3068836f":"plt.figure(figsize=(16,6))\nsns.lineplot(x=data.hour,y=data.cnt,data=data,hue=data.is_weekend)","c0a0ea03":"plt.figure(figsize=(16,6))\nsns.pointplot(x=data.hour,y=data.cnt,data=data,hue=data.season)","11b13be0":"plt.figure(figsize=(16,6))\nsns.pointplot(x=data.hour,y=data.cnt,data=data,hue=data.weather_code)","0c236552":"plt.figure(figsize=(16,6))\nsns.countplot(data=data,x=data.day_of_week,hue=data.weather_code,palette=\"viridis\")\nplt.legend(loc=\"best\")","a0e84153":"plt.figure(figsize=(16,6))\nsns.boxplot(data=data,x=data[\"hour\"],y=data.cnt)","6bd01d86":"plt.figure(figsize=(16,6))\nsns.boxplot(data=data,x=data[\"day_of_week\"],y=data.cnt)","6027fdbd":"plt.figure(figsize=(16,6))\nsns.boxplot(data=data,x=data[\"day_of_month\"],y=data.cnt)","b9c786a7":"plt.figure(figsize=(16,6))\nsns.boxplot(data=data,x=data[\"month\"],y=data.cnt)","5900be52":"plt.figure(figsize=(16,6))\nsns.boxplot(data=data,x=data[\"day_of_month\"],y=data.cnt,hue=data[\"is_holiday\"])","8aa651d9":"from sklearn.model_selection import train_test_split\ntrain,test = train_test_split(data,test_size=0.1,random_state=0)\n\nprint(train.shape)\nprint(test.shape)\n","4820c34f":"from sklearn.preprocessing import MinMaxScaler\nscaler  = MinMaxScaler()\n\nnum_colu = ['t1', 't2', 'hum', 'wind_speed']\ntrans_1 = scaler.fit(train[num_colu].to_numpy())\ntrain.loc[:,num_colu] = trans_1.transform(train[num_colu].to_numpy())\ntest.loc[:,num_colu] = trans_1.transform(test[num_colu].to_numpy())\n\ncnt_scaler = MinMaxScaler()\ntrans_2 = cnt_scaler.fit(train[[\"cnt\"]])\ntrain[\"cnt\"] = trans_2.transform(train[[\"cnt\"]])\ntest[\"cnt\"] = trans_2.transform(test[[\"cnt\"]])","b72f1477":"from tqdm import tqdm_notebook as tqdm\ntqdm().pandas()\ndef prepare_data(X,y,time_steps=1):\n    Xs = []\n    Ys = []\n    for i in tqdm(range(len(X) - time_steps)):\n        a = X.iloc[i:(i + time_steps)].to_numpy()\n        Xs.append(a)\n        Ys.append(y.iloc[i+time_steps])\n    return np.array(Xs),np.array(Ys)    \n\nsteps=24\nX_train , y_train = prepare_data(train,train.cnt,time_steps=steps)\nX_test , y_test = prepare_data(test,test.cnt,time_steps=steps)\nprint(\"X_train : {}\\nX_test : {}\\ny_train : {}\\ny_test: {}\".format(X_train.shape,X_test.shape,y_train.shape,y_test.shape))","c8959ac0":"### LSTMM model\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout , LSTM , Bidirectional \n\n\nmodel = Sequential()\nmodel.add(Bidirectional(LSTM(128,input_shape=(X_train.shape[1],X_train.shape[2]))))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1,activation=\"sigmoid\"))\nmodel.compile(optimizer=\"adam\",loss=\"mse\")\n\nwith tf.device('\/GPU:0'):\n    prepared_model = model.fit(X_train,y_train,batch_size=32,epochs=100,validation_data=[X_test,y_test])\n\nplt.plot(prepared_model.history[\"loss\"],label=\"loss\")\nplt.plot(prepared_model.history[\"val_loss\"],label=\"val_loss\")\nplt.legend(loc=\"best\")\nplt.xlabel(\"No. Of Epochs\")\nplt.ylabel(\"mse score\")","bb94ff82":"pred = model.predict(X_test)\n\ny_test_inv = cnt_scaler.inverse_transform(y_test.reshape(-1,1))\npred_inv = cnt_scaler.inverse_transform(pred)\n\nplt.figure(figsize=(16,6))\nplt.plot(y_test_inv.flatten(),marker=\".\",label=\"actual\")\nplt.plot(pred_inv.flatten(),marker=\".\",label=\"prediction\",color=\"r\")","f8da3fc2":"y_test_actual = cnt_scaler.inverse_transform(y_test.reshape(-1,1))\ny_test_pred = cnt_scaler.inverse_transform(pred)\n\narr_1 = np.array(y_test_actual)\narr_2 = np.array(y_test_pred)\n\nactual = pd.DataFrame(data=arr_1.flatten(),columns=[\"actual\"])\npredicted = pd.DataFrame(data=arr_2.flatten(),columns = [\"predicted\"])","b908b573":"final = pd.concat([actual,predicted],axis=1)\nfinal.head()","c30a4c8b":"from sklearn.metrics import mean_squared_error, r2_score\nrmse = np.sqrt(mean_squared_error(final.actual,final.predicted)) \nr2 = r2_score(final.actual,final.predicted) \nprint(\"rmse is : {}\\nr2 is : {}\".format(rmse,r2))","5b340213":"plt.figure(figsize=(16,6))\nplt.plot(final.actual,label=\"Actual data\")\nplt.plot(final.predicted,label=\"predicted values\")\nplt.legend(loc=\"best\")","f617c25c":"<a id='Evaluation'><\/a>\n# **Evaluation**","7b1f73b3":"[](http:\/\/)","c139e951":"# **Goal:**\n* ***Our goal is to predict the number of future bike shares given the historical data of London bike shares.***","3016b0e2":"**Demand decreases with Increasing humidity.** ","282a971d":"**Least demand comes from weekend.**","3dffa542":"![image.png](attachment:image.png)\n","54ee7189":"# **GPU**","cd9d97f2":"# Conclusion : \n**AS you can see that I have used Bidirectional LSTM to train our model and Our model is working quite well.Our model is capable to capture the trend and not capturing the Extreme values which is a really good thing. SO, we can say that the overall perfomance is good.**","8371e621":"# If you like this notebook Please Do give an Upvote.\n","fcd87465":"<a id='Preprocessing'><\/a>\n# **Preprocessing**","020d5d0e":"* Training set = 90% of tha data\n* Testing set  = 10% of the data","1ee01196":"From the above heatmap we can say that **t1** and **t2** are Highly Correlated with each other.","6c7e36a2":"![image.png](attachment:image.png)","c563120e":"**Here we can say that between morning 8 to 9 the Demand is on peak.**","8e980cdf":"#  **Bike Demand Prediction with LSTMs using TensorFlow and Keras **\n","c083c0ed":"# **Bidirectional LSTM :** \nUsing Bidirectional LSTMs, we feed the learning algorithm with the original data once from beginning to the end and once from end to beginning.","2058fa88":"<a id='Demand Predictions'><\/a>\n# **Demand Predictions**","06ae1e02":"**Note that our model is predicting only one point in the future. That being said, it is doing very well. Although our model can\u2019t really capture the extreme values it does a good job of predicting (understanding) the general pattern.**","4797de7f":"**This clean heatmap says that data does not have even a single Null value.**","a444211f":"<a id='Exploratory Data Analysis'><\/a>\n# **Exploratory Data Analysis**","85c9b826":"<a id='Model Building'><\/a>\n# **Model Building**","10f1c352":"# **Here are the steps:**\n* <a href='#Data'>Data<\/a>\n* <a href='#Feature Engineering'>Feature Engineering<\/a>\n* <a href='#Exploratory Data Analysis'>Exploratory Data Analysis<\/a>\n* <a href='#Preprocessing'>Preprocessing<\/a>\n* <a href='#Model Building'>Model Building<\/a>\n* <a href='#Demand Predictions'>Demand Predictions<\/a>\n* <a href='#Evaluation'>Evaluation<\/a>","7bc46c2d":"**By looking at the above graph we can say that in the July month the demand is on peak and then start to decrease.**","9ad78f7b":"**Maximul demands comes in scattered coluds weather.**","03623f91":"Metadata:\n* \"timestamp\" - timestamp field for grouping the data\n* \"cnt\" - the count of a new bike shares\n* \"t1\" - real temperature in C\n* \"t2\" - temperature in C \"feels like\"\n* \"hum\" - humidity in percentage\n* \"windspeed\" - wind speed in km\/h\n* \"weathercode\" - category of the weather\n* \"isholiday\" - boolean field - 1 holiday \/ 0 non holiday\n* \"isweekend\" - boolean field - 1 if the day is weekend\n* \"season\" - category field meteorological seasons: 0-spring ; 1-summer; 2-fall; 3-winter\n* \"weathe_code\" category description:\n* 1 = Clear ; mostly clear but have some values with haze\/fog\/patches of fog\/ fog in vicinity 2 = scattered clouds \/ few clouds 3 = Broken clouds 4 = Cloudy 7 = Rain\/ light Rain shower\/ Light rain 10 = rain with thunderstorm 26 = snowfall 94 = Freezing Fog","1c586865":"<a id='Data'><\/a>\n# **Data**","07c561d7":"<a id='Feature Engineering'><\/a>\n# **Feature Engineering**"}}