{"cell_type":{"c4e90f04":"code","567136f6":"code","16b56b02":"code","95c049d0":"code","8a2422e7":"code","48faaf3e":"code","a0c7f3b7":"code","9996bce9":"code","28daf8de":"markdown","bf56cc75":"markdown","5dd8900f":"markdown","8c1251a6":"markdown","7128a1c5":"markdown","8d9c7347":"markdown","f70e54c4":"markdown"},"source":{"c4e90f04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","567136f6":"import pandas as pd\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndef display_images(X, rows=5, columns=5, cmap=\"gray\", h=128,w=128):\n    \"\"\" Utility function to display images\n    \"\"\"\n    fig, ax = plt.subplots(rows,columns, figsize=(8,8))\n    for row in range(rows):\n        for column in range(columns):\n            ax[row][column].imshow(X[(row*columns)+column].reshape(h,w), cmap=cmap)\n            ax[row][column].set_axis_off()","16b56b02":"df = pd.read_csv(\"..\/input\/sample\/sample.csv\")\ndf.head()","95c049d0":"X = df.iloc[:,1:].values.reshape(len(df),128,128,1)\ny = df.iloc[:,0].values\n\nX.shape","8a2422e7":"display_images(X)","48faaf3e":"from keras.preprocessing.image import ImageDataGenerator\nidg = ImageDataGenerator(\n    rotation_range=30,\n    zoom_range = 0.3, \n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    horizontal_flip=True,\n    vertical_flip=True,\n    brightness_range=[0.9,1.01],\n    fill_mode='constant', cval=255\n)","a0c7f3b7":"image_data = idg.flow(X, y,batch_size=25).next()\ndisplay_images(image_data[0])","9996bce9":"image_data[0][0].shape, image_data[1][0]","28daf8de":"### Image Data Augmentation with Keras\/Tensorflow\nWe usually need large image datasets to meet our model optimization goals, but that is usually not available.  \nSmall image datasets can be augmented artificially. The general idea is to randomly make small transformations (e.g.zoom,rotate,translate,flip, add gaussian noise etc) to original images to create new ones. While this technique is indispensable with small datasets, large datasets benefit from this as well. See this [notebook](https:\/\/www.kaggle.com\/vinayshanbhag\/keras-cnn-optimization) for details.\n\nKeras [ImageDataGenerator](https:\/\/keras.io\/preprocessing\/image\/#imagedatagenerator) makes it easy. Specific transformations may need to be chosen based on context. e.g. a vertical flip may not make sense when dealing with alphanumeric text, a 9 may turn into a 6. In this case, we have picked fillmode as a constant white background, as that makes sense given the images in this dataset. Other parameters may need to be carefully selected based on context.","bf56cc75":"### Preview images\nHere are a few sample images from the dataset.","5dd8900f":"Here are a few images produced by the ImageDataGenerator","8c1251a6":"### Load Data\nInput data consists of 100 grayscale JPEG images 128x128pixel. Each row in CSV file has a label (0=Negative, 1=Positive) and 16384 pixel values corresponding to the input image.","7128a1c5":"### Background\n\nImages in this data set are sample x-ray images from the [Opioid Detection Challenge](https:\/\/www.opioiddetectionchallenge.com\/about-the-challenge\/). The challenge calls for novel plans for rapid, nonintrusive detection tools that will help find illicit opioids in international mail. The sample images provided are of various dimensions. A typical convolutional neural network requires images of a particular size. Images in this dataset were resized and padded to fit 128x128 pixel grayscale images.","8d9c7347":"### Reconstitute input images from the dataframe\nEach image is 128x128pixel, single channel (grayscale), so we reshape the data from CSV file to reconstitute images from each row vector.","f70e54c4":"### Introduction\nTraining a convolutional neural network for image classification, involves tuning model parameters such that a given input(image) maps to the correct output class (in this case positive or negative for opioids). To meet our model optimization goals we require large number of data samples. But this is usually not available.\n\nWhat can we do if we do not have a large dataset to start with? \nIn this notebook we will explore data augmentation technique with Keras\/Tensorflow when we have small image datasets. "}}