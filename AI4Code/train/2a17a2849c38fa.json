{"cell_type":{"e3b58bd4":"code","3224f478":"code","4e993162":"code","972d4011":"code","b8121a97":"code","4186f7a5":"code","5152012c":"code","47d5562e":"code","5a9c2269":"code","c6329513":"code","eb81aaf9":"code","68d64295":"markdown","d6aa6bb9":"markdown","28156b88":"markdown","f0fed64c":"markdown","d103a4e7":"markdown","7ef91b5c":"markdown","1f3f69f2":"markdown","e696cdb8":"markdown","e488af89":"markdown","188022a1":"markdown","6e356e97":"markdown","051be7b2":"markdown","52f2f58d":"markdown","ff528207":"markdown","5ffd28b9":"markdown","8ff3dce1":"markdown","2edf58f2":"markdown","0120a8b3":"markdown","50c64557":"markdown","3b1258c3":"markdown","00df34e9":"markdown","931c9934":"markdown","b0b2bcc9":"markdown","57b2ac38":"markdown","9ec8840d":"markdown","6b2f4f9c":"markdown","ad18f6bf":"markdown","f63c6582":"markdown"},"source":{"e3b58bd4":"#Importing the basic librarires\n\nimport math\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom datetime import datetime as dt\nfrom IPython.display import display\n\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom pandas.tseries.offsets import DateOffset\n\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [15,8]\n\nimport warnings \nwarnings.filterwarnings('ignore')","3224f478":"#Importing the dataset\n\ndf = pd.read_csv('..\/input\/imf-zinc-price-forecast-dataset\/zinc.csv')\nvariable='Price'\ndf.loc[:,'Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\noriginal_df = df.copy(deep=True)\ndisplay(df.head())\n\nprint('\\n\\033[1mInference:\\033[0m The Datset consists of {} features & {} samples.'.format(df.shape[1], df.shape[0]))","4e993162":"# Plotting the Timeseries\n\ndf.plot()\nplt.grid()\nplt.show()","972d4011":"#Stationary Check\n\ndef Staionarity_Check(ts):\n    plt.plot(ts, label='Original')\n    plt.plot(ts.rolling(window=52, center=False).mean(), label='Rolling Mean')\n    plt.plot(ts.rolling(window=52, center=False).std(), label='Rolling Std')\n    plt.grid()\n    plt.legend()\n    plt.show()\n    \n    adf = adfuller(ts, autolag='AIC')\n    padf = pd.Series(adf[:4], index=['T Statistic','P-Value','#Lags Used','#Observations Used'])\n    for k,v in adf[4].items():\n        padf['Critical value {}'.format(k)]=v\n    print(padf)\n    \nStaionarity_Check(df[variable])","b8121a97":"#Decomposing using moving average\n\ntsl = np.log(df)\nma = tsl.rolling(window=12).mean()\nms = tsl.rolling(window=12).std()\n\nplt.plot(ma, c='r')#, center=False)\nplt.plot(ms, c='g')\nplt.plot(tsl)\nplt.grid()\nplt.show()","4186f7a5":"# Stationarity Check for Decomposed Time Series\n\ntsl - np.log(df)\nma = tsl.rolling(window=12, center=False).mean()\n\ntslma = tsl - ma\ntslma = tslma.dropna()\nStaionarity_Check(tslma)","5152012c":"#Auto Correlation Fuction #q\n\nplt.plot(np.arange(acf(tslma, nlags=10,fft=True).shape[0]),acf(tslma, nlags=10, fft=True))\nplt.axhline(y=0, linestyle='--', c='gray')\nplt.axhline(y=-7.96\/np.sqrt(len(tslma)), linestyle='--',c='gray')\nplt.axhline(y=7.96\/np.sqrt(len(tslma)), linestyle='--',c='gray')\n\nplt.title('Auto Correlation Fuction')\nplt.grid()\nplt.show()","47d5562e":"#Partial Auto Correlation Fuction #p\n\nplt.plot(np.arange(pacf(tslma, nlags=10).shape[0]),pacf(tslma, nlags=10))\nplt.axhline(y=0, linestyle='--', c='gray')\nplt.axhline(y=-7.96\/np.sqrt(len(tslma)), linestyle='--',c='gray')\nplt.axhline(y=7.96\/np.sqrt(len(tslma)), linestyle='--',c='gray')\n\nplt.title('Partial Auto Correlation Fuction')\nplt.grid()\nplt.show()","5a9c2269":"#Building ARIMA Model\n\nArima = ARIMA(tslma, order=(2,5,1))\nAr = Arima.fit()\n# plt.plot(tslma, label=['Original'])\n# plt.plot(Ar.fittedvalues,c='r', label=['Forecast'])\n# plt.legend()\n# plt.grid()\n\nAr.summary()","c6329513":"# Forecasting future predictions\n\nfuture_dates=[df.index[-1]+ DateOffset(months=x)for x in range(0,24)]\nfuture_datest_df=pd.DataFrame(index=future_dates[1:],columns=df.columns)\nfuture_datest_df.tail()\n\nfuture_df=pd.concat([df,future_datest_df])\n\nfuture_df['a'] = Ar.predict(start =350, end = 420, dynamic= False)\n\nplt.plot(future_df[variable][:-95], label=['Original'])\nplt.plot(np.exp(future_df['a']+(1.08*ma.mean()[0])), label=['Forecast'])\nplt.grid()\nplt.legend()\nplt.show()","eb81aaf9":"#<<<------------------------------------- THE END ----------------------------------------------->>>","68d64295":"1. Visualize the time series - Check for trend, seasonality, or random patterns.\n2. Stationarize the series using decomposition or differencing techniques.\n3. Plot ACF\/PACF and find (p,d,q) parameters.\n4. Building the forecasting model - can be AR, MA, ARMA or ARIMA.\n5. Making Predictions using the Forecasting Model","d6aa6bb9":"---","28156b88":"---","f0fed64c":"---","d103a4e7":"**Inference:** Since the test statistic is higher than the critical value, & the rolling mean is not constant over time, therefore the null hypothesis cannot be rejected. This implies that the time-series is non-staionary!\nLet us fix this by decomposing using moving average...","7ef91b5c":"## <center> Stractegic Plan of Action:","1f3f69f2":"---","e696cdb8":"**Inference**: Now the test staistic can be observed to be less that 5% critical value, hence the nullhypothsis can be rejected. Indicating that the time series is stationary & we can use it to create our ARIMA Model. But before that, let us find the parameters - `p` & `q` required by the model, by plotting Auto-Correlation Function & Partial Auto-Correlation Function.","e488af89":"# <center> \u2605 AI \/ ML Project - Zinc Prices Forecast \u2605\n#### <center> ***Domain: Manufacturing***","188022a1":"**Inference:** The Arima Model fits well on the time-series data with nearly perfect p-values. Let us now forcast the future data with the help of the trained ARIMA Model.","6e356e97":"### Description:\n\nA simple yet challenging project, to forecast the IMF commodity price of Zinc, based on monthly totals zinc price recorded from 1980 to 2016.\nCan you overcome these obstacles & Forecast its future prices?\n\nThis data frame contains the following columns:\n\n* Month : The month of observation\n* Price : Average Prices of zinc in that particular month\n\n### Acknowledgement\n\nThis dataset is referred from Kaggle.\n\n### Objectives:\n- Understand the Dataset & cleanup (if required).\n- Perform the necessary checks like stationarity & DF on the Dataset.\n- Build a forcasting model to forecast zinc prices.","051be7b2":"### Here are some of the key outcomes of the project:\n- The Zinc Price Time-Series Dataset was quiet small, with just 434 samples.\n- It was clear from the visuals that the time-series dataset had an upward trend & some seasonality.\n- The same was confirmed with help of visual (rolling mean & std) & statistical (Dicky-Fuller Test) stionarity checks.\n- The time-series was subject to Decomposition in order to stationarize the outputs.\n- Futher ACF & PACF curves were plotted to extract the values of p & q, as it is required for the ARIMA Model.\n- The Forecasting Model was then built with the time-series data, by feeding the optimal p,q,d values.\n- Finally, the model was used to forecast the time-series of the zinc prices, into the future.","52f2f58d":"---","ff528207":"## <center> Project Outcomes & Conclusions","5ffd28b9":"## <center>2. Stationarize the Series","8ff3dce1":"---","2edf58f2":"## <center>3. Plotting ACF \/ PACF","0120a8b3":"**Inference:**<br>\nThe model's forecast seems to be precise as it captures most of the sesonality & possible trends in the time-series data.\n","50c64557":"## <center>5. Forecasting","3b1258c3":"---","00df34e9":"## <center>1. Visualizing the Time Series","931c9934":"**Inference:** It's clear from the plot that there is an uptrend in the volumne of Passengers, with some seasonality. Let us perform stationarity check using visual (rolling mean & std) & statistical tests ( Dicky-Fooler's Test) to confirm the same.","b0b2bcc9":"<center> <img src=\"https:\/\/raw.githubusercontent.com\/Masterx-AI\/Project_IMF_Zinc_Price_Forcast_\/main\/zinc.jpg\" style=\"width: 600px;\"\/>","57b2ac38":"**Inference:** The ACF Curve passes throught the upper confidence value when the lag value is between 5 & 6, hence the optimal value of `q` can be either 5 or 6.","9ec8840d":"## <center>4. Model Building","6b2f4f9c":"---","ad18f6bf":"---","f63c6582":"**Inference:** The PACF Curve drops to 0 when the lag value is between 1 & 2, hence the optimal value of `p` can be either 1 or 2."}}