{"cell_type":{"70b01ef5":"code","7c6a856d":"code","fdaa862a":"code","a78c1893":"code","700438f9":"code","74e0f646":"code","82922725":"code","0a0ae171":"code","0450a2cb":"code","c3cf8aae":"code","2de5f3f6":"code","f9e2596a":"code","41c8d0ea":"markdown","45a0229d":"markdown","11af9824":"markdown","460af346":"markdown","0099bdf6":"markdown"},"source":{"70b01ef5":"%config InlineBackend.figure_format = 'retina'\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport pandas as pd","7c6a856d":"# Make things a little bigger\nmpl.rcParams['figure.titlesize'] = 22\nmpl.rcParams['axes.labelsize'] = 18\nmpl.rcParams['axes.titlesize'] = 20\nmpl.rcParams['legend.fontsize'] = 18\nmpl.rcParams['xtick.labelsize'] = 16\nmpl.rcParams['ytick.labelsize'] = 16\n\n# Don't limit the number of columns displayed\npd.set_option(\"display.max_columns\", None)","fdaa862a":"def read_csv(filename: str) -> pd.DataFrame:\n    \"\"\"\n    Read DataFrame from a CSV file ``filename`` and convert to a \n    preferred schema.\n    \"\"\"\n    df = pd.read_csv(\n        filename,\n        sep=\",\",\n        na_values=\"\\\\N\",\n        dtype={\n            \"station_id\": str,\n            # Use Pandas Int16 dtype to allow for nullable integers\n            \"num_bikes_available\": \"Int16\",\n            \"num_ebikes_available\": \"Int16\",\n            \"num_bikes_disabled\": \"Int16\",\n            \"num_docks_available\": \"Int16\",\n            \"num_docks_disabled\": \"Int16\",\n            \"is_installed\": \"Int16\",\n            \"is_renting\": \"Int16\",\n            \"is_returning\": \"Int16\",\n            \"station_status_last_reported\": \"Int64\",\n            \"station_name\": str,\n            \"lat\": float,\n            \"lon\": float,\n            \"region_id\": str,\n            \"capacity\": \"Int16\",\n            # Use pandas boolean dtype to allow for nullable booleans\n            \"has_kiosk\": \"boolean\",\n            \"station_information_last_updated\": \"Int64\",\n            \"missing_station_information\": \"boolean\"\n        },\n    )\n    # Read in timestamps as UNIX\/POSIX epochs but then convert to the local\n    # bike share timezone.\n    df[\"station_status_last_reported\"] = pd.to_datetime(\n        df[\"station_status_last_reported\"], unit=\"s\", origin=\"unix\", utc=True\n    ).dt.tz_convert(\"US\/Eastern\")\n\n    df[\"station_information_last_updated\"] = pd.to_datetime(\n        df[\"station_information_last_updated\"], unit=\"s\", origin=\"unix\", utc=True\n    ).dt.tz_convert(\"US\/Eastern\")\n    return df","a78c1893":"df = read_csv(\"\/kaggle\/input\/citi-bike-stations\/citi_bike_data_00000.csv\")","700438f9":"df.head()","74e0f646":"def station_stats(station: pd.DataFrame) -> pd.Series:\n    stats = {\n        \"most_recent_name\": station.iloc[station[\"station_status_last_reported\"].argmax()][\"station_name\"],\n        \"num_samples\": len(station),\n        \"status_first_reported\": station[\"station_status_last_reported\"].min(),\n        \"status_last_reported\": station[\"station_status_last_reported\"].max(),\n        \"min_capacity\": station[\"capacity\"].min(),\n        \"max_capacity\": station[\"capacity\"].max(),\n        \"max_ebikes_ever_available\": station[\"num_ebikes_available\"].max(),\n        \"max_bikes_disabled\": station[\"num_bikes_disabled\"].max(),\n        \"max_docks_disabled\": station[\"num_docks_disabled\"].max(),\n    }\n    return pd.Series(stats)\n\n\nprint(f\"Number of samples: {len(df)}\")\nprint(f\"Number of stations: {df['station_id'].nunique()}\")\n\nprint(\"Station-specific stats:\")\n# Filter out stations with erroneous timestamps\nmask = df[\"station_status_last_reported\"] >= \"2016-01-01\"\n(\n    df[mask]\n    .groupby(\"station_id\")\n    .apply(station_stats)\n    .sort_values(\"num_samples\", ascending=False)\n)","82922725":"# Pick out data for a particular station\nstation_id = \"466\"\nstation = df[df[\"station_id\"] == station_id]","0a0ae171":"# Print out some info about the station.\n# This information is null for all data prior to 8\/2019.\nstation_info = station[station[\"station_name\"].notna()].iloc[0]\nstation_info[[\"station_name\", \"lat\", \"lon\", \"capacity\"]]","0450a2cb":"# Turn into a clean time series\n\n# Only include columns whose values are present throughout the full \n# time period of the dataset.\ncolumns_to_keep = [\n    \"num_bikes_available\", \n    \"num_docks_available\", \n    \"station_status_last_reported\"\n]\nstation = station[columns_to_keep]\n\n# There are occasions where station_status_last_reported is clearly\n# erroneous (it's ~1970-01-01). Let's just drop this data.\nstation = station[station[\"station_status_last_reported\"] >= \"2016-01-01\"]\n\n# Index by time and sort\nstation = station.set_index(\"station_status_last_reported\").sort_index()\n\n# Now resample so that the index corresponds to 5 minute increments. \n# We pick .last() so that we are not leaking future information into the \n# past.\nstation = station.resample(\"5T\").last()\n\n# Finally, we fill any missing data after the resampling using the most\n# recently known data.\nstation = station.fillna(method=\"ffill\")","c3cf8aae":"station.head()","2de5f3f6":"fig, ax = plt.subplots(figsize=(16, 8))\nstation.loc[\"2019-06-01\":\"2019-06-14\"].plot(ax=ax)\nNone","f9e2596a":"fig, ax = plt.subplots(figsize=(16, 8))\nstation.loc[\"2019-06-04\":\"2019-06-06 00:00:00\", \"num_bikes_available\"].plot(ax=ax)\nNone","41c8d0ea":"This notebook will show how to read in, clean, and visualize the Citi Bike Stations dataset.\n\n## Load Libraries and Data","45a0229d":"### Some Light Viz\nWe'll start by looking at 2 weeks worth of data from June 1st to June 14th in 2019. June 1st was a Saturday, and you can clearly see the daily and weekly periodicity in this station. Also the number of bikes available is perfectly out of phase with the number of docks available which makes sense!","11af9824":"The station is in the Flatiron neighborhood and not too far from Madison Square Park. My guess is that this is a commuter _destination_ station because there are lots of companies in this area. We can confirm this by zooming in on the data and setting the timezone to the local, New York time (the time is currently in UTC).\n\nAs you can see, the number of bikes at the station rapidly increases during the morning commute and then slowly drops at the end of the work day as people pickup bikes and ride home. This is a good lesson not to work past 6 PM -- there won't be a bike available!","460af346":"## Some Basic Stats\n\nBelow, we print out some basic stats about the different stations. Why do some stations not have a name? I have no idea. What's with the weird `motivate` stations with the UUIDs? I have no idea.","0099bdf6":"## Diving into a Single Station"}}