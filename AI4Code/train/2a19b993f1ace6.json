{"cell_type":{"acee9a02":"code","0cc26689":"code","12de051e":"code","0056b881":"code","a06bb048":"code","91f7e464":"code","cbcd5ea9":"code","26e3099e":"code","46478be9":"code","0ac1cb3e":"code","3f50ee88":"code","b377f064":"code","979f9c53":"code","af38805c":"code","96697afe":"code","3bf2dcda":"code","9075f49f":"code","0f335b2a":"code","93f9c7e2":"code","0e0ea684":"code","419bce90":"code","60248fb4":"code","806a6704":"code","24123ed5":"code","36838af2":"code","d84d1496":"code","2faf438c":"code","f83e668b":"code","ec9ac89c":"code","8885d114":"code","647bb424":"code","ce5a2cec":"code","b5942c59":"code","d6685489":"code","44741a46":"code","3461610e":"code","4f57e443":"code","03082041":"markdown","53747a55":"markdown","6e778ccd":"markdown","fede2cdb":"markdown","b09d5ec2":"markdown","691a9a59":"markdown","3a9aec5e":"markdown","7371f7f1":"markdown","14641de3":"markdown","603ee76d":"markdown"},"source":{"acee9a02":"import tensorflow as tf\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport warnings\nwarnings.simplefilter('ignore')","0cc26689":"from tensorflow.examples.tutorials.mnist import input_data\ndata = input_data.read_data_sets(\"data\/MNIST\/\",one_hot=True)","12de051e":"train = data.train.images\ntrain_labels = data.train.labels\ntest = data.test.images\ntest_labels = data.test.labels","0056b881":"print(\"shape of train \",train.shape)\nprint(\"shape of test \",test.shape)","a06bb048":"def plot_images(images,true_label,pred_label=None,missclassification=False):\n  length = np.shape(images)[0]\n  assert length==9\n  fig = plt.figure(figsize=(7,7))\n  ax = fig.subplots(3,3)\n  for i,a in enumerate(ax.flat):\n    a.imshow(np.reshape(images[i],(28,28)))\n    if(pred_label==None):\n      xlabel = \"true label:{}\".format(true_label[i])\n    if(pred_label!=None):\n      xlabel = \"true label:{}, pred label:{}\".format(true_label[i],pred_label[i])\n    a.set_xlabel(xlabel)\n    a.set_xticks([])\n    a.set_yticks([])\n    a.set_xlabel(xlabel)\n  if(missclassification==True):\n    fig.suptitle('Missclassified Examples',fontsize=20)\n  else:\n    fig.suptitle(\"Examples from dataset\",fontsize=20)\n  plt.show()\n ","91f7e464":"plot_images(train[0:9,:],list(np.argmax(train_labels[0:9,:],axis=1)))","cbcd5ea9":"def initialize_placeholders(X,Y):\n  x = tf.placeholder(tf.float32,[None,X.shape[1]])\n  y = tf.placeholder(tf.float32,[None,Y.shape[1]])\n  return x,y","26e3099e":"x,y = initialize_placeholders(train,train_labels)","46478be9":"def weight_initialize(X,Y):\n  parameters ={}\n  input_flat_shape = X.get_shape().as_list()[1]\n  class_shape = Y.get_shape().as_list()[1]\n  W1 = tf.get_variable(\"W1\",initializer=tf.zeros([input_flat_shape,class_shape]))\n  b1 = tf.get_variable(\"B1\",initializer=tf.ones([class_shape]))\n  parameters['w1'] = W1\n  parameters['b1'] = b1\n  return parameters\n  \n  ","0ac1cb3e":"parameters = weight_initialize(x,y)","3f50ee88":"def logits(parameters,X,y):\n  W1 = parameters['w1']\n  b1 = parameters['b1']\n  logit_ =tf.matmul(X,W1)+b1\n  return logit_","b377f064":"logit = logits(parameters,x,y)\ny_pred = tf.nn.softmax(logit)","979f9c53":"logit","af38805c":"def loss(logit,y):\n  cross_entropy = tf.nn.softmax_cross_entropy_with_logits(logits = logit,labels =y)\n  cost = tf.reduce_mean(cross_entropy)\n  return cost","96697afe":"loss = loss(logit,y)","3bf2dcda":"def optimize(cost,learning_rate=0.01):\n  optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(cost)\n  return optimizer","9075f49f":"optimizer = optimize(loss,0.01)","0f335b2a":"def Accuracy(y_pred,y):\n  acc = tf.equal(tf.argmax(y_pred,dimension=1),tf.argmax(y,dimension=1))\n  accuracy = tf.reduce_mean(tf.cast(acc,tf.float32))\n  return accuracy","93f9c7e2":"\naccuracy = Accuracy(y_pred,y)","0e0ea684":"import math\ndef batches_tuples(X,y,mini_batch=64):\n  batches =[]\n  num_batches = math.floor(X.shape[0]\/mini_batch)\n  for i in range(num_batches-1):\n    (x_batch,y_batch) = X[i*mini_batch:(i+1)*mini_batch,:],y[i*mini_batch:(i+1)*mini_batch,:]\n    batch = (x_batch,y_batch)\n    batches.append(batch)\n    \n  (x_batch,y_batch)= X[(i+1)*mini_batch:X.shape[0],:],y[(i+1)*mini_batch:y.shape[0],:]\n  batches.append((x_batch,y_batch))\n  return batches\n  \n    ","419bce90":"sess = tf.Session()","60248fb4":"def model_run(mini_batch=64,num_epochs=1):\n  init = tf.global_variables_initializer()\n  batches = batches_tuples(train,train_labels,mini_batch=64)\n  saver = tf.train.Saver()\n  sess.run(init)\n  cost_history = []\n  acc_history = []\n  test_acc_history =[]\n  for i in range(num_epochs):\n      total_cost = 0\n      for j in range(len(batches)):\n        (x_mini_train,y_mini_train) = batches[j]\n        #print(x_mini_train.shape,y_mini_train.shape)\n        _,c = sess.run([optimizer,loss],feed_dict = {x:x_mini_train,y:y_mini_train})\n        total_cost = total_cost+c\n      avg_cost = total_cost\/len(batches)\n      sess.run(y_pred,feed_dict={x:train,y:train_labels})\n      acc = sess.run(accuracy,feed_dict={x:train,y:train_labels})\n      test_acc = sess.run(accuracy,feed_dict={x:test,y:test_labels})\n      cost_history.append(avg_cost)\n      acc_history.append(acc)\n      test_acc_history.append(test_acc)\n      saver_path = saver.save(sess,\"tmp\/model_mnist.ckpt\")\n      if(i%5==0):\n        print(\"epoch number:{}\".format(i), \"cost:{}\".format(avg_cost),\"train accuracy:{}\".format(acc),\"test_acc:{}\".format(test_acc))\n  print(\"epoch number:{}\".format(i), \"cost:{}\".format(avg_cost),\"train accuracy:{}\".format(acc),\"test_acc:{}\".format(test_acc))      \n  plt.plot(range(num_epochs),cost_history,\"r-\")\n#   plt.plot(acc_history,\"b-\")\n#   plt.plot(test_acc_history,\"g-\")\n  plt.xlabel(\"Number of epochs\")\n  plt.ylabel(\"cost\")\n  plt.title(\"cost v\/s epochs\")\n  plt.show()\n  print(\"model saved in\",saver_path)\n  \n        \n        \n      ","806a6704":"model_run(64,25)","24123ed5":"def plot_weights(img_shape,variable_name,model_path):\n  trainable = tf.trainable_variables()\n  w = [v for v in trainable if v.name==variable_name ]\n  saver = tf.train.Saver()\n  graph = tf.get_default_graph()\n  with tf.Session(graph = graph) as sess:\n    saver.restore(sess,model_path)\n    print(\"model resotred\")\n    weights = sess.run(w)\n  wmin = np.min(weights[0])\n  wmax = np.max(weights[0])\n  \n  fig = plt.figure(figsize=(15,5))\n  fig.subplots_adjust(hspace=0.3,wspace=0.3)\n  axes = fig.subplots(3,4)\n  for i,ax in enumerate(axes.flat):\n    if(i>=10):\n      ax.set_visible(False)\n      continue\n    \n    ax.imshow(weights[0][:,i].reshape(img_shape),vmin=wmin,vmax=wmax,cmap='seismic')\n    ax.set_xlabel(\"class:{}\".format(i))\n    ax.set_xticks([])\n    ax.set_yticks([])\n  plt.show()\n","36838af2":"plot_weights((28,28),\"W1:0\",'tmp\/model_mnist.ckpt')","d84d1496":"\ndef print_confusion_matrix(X,Y):\n  pred = sess.run(y_pred,feed_dict={x:X,y:Y})\n  pred = np.argmax(pred,axis=1)\n  cm = confusion_matrix(pred,np.argmax(Y,axis=1))\n  plt.figure(figsize=(8,8))\n  sns.heatmap(cm,annot=True,cmap='YlGnBu',fmt='d')\n  plt.xlabel(\"predicted label\")\n  plt.ylabel(\"true label\")\n  plt.title(\"confusion matrix\")\n  plt.show()\n  \n    ","2faf438c":"print_confusion_matrix(train,train_labels)","f83e668b":"print_confusion_matrix(test,test_labels)","ec9ac89c":"def misclassified_example(X,Y):\n  pred = sess.run(y_pred,feed_dict={x:X,y:Y})\n  predictions = np.argmax(pred,axis=1)\n  labels = np.argmax(Y,axis=1)\n  #print(labels)\n  bool_ar = sess.run(tf.equal(predictions,labels))\n  bool_ar = bool_ar==False\n  #print(bool_ar)\n  bool_ar = list(bool_ar)\n  index_arr  =[i for i in range(len(bool_ar)) if bool_ar[i]==True]\n  #print(index_arr)\n  example_missclassified = X[index_arr,:][0:9]\n  #print(example_missclassified)\n  true_labels = np.argmax(Y[index_arr,:],axis=1)\n  #print(true_labels)\n  true_labels=true_labels[0:9]\n  #print(true_labels)\n  predicted_labels = [predictions[i] for i in index_arr]\n  predicted_labels =predicted_labels[:9]\n  \n  plot_images(example_missclassified,true_labels,predicted_labels,True)\n  \n  ","8885d114":"misclassified_example(train,train_labels)","647bb424":"misclassified_example(test,test_labels)","ce5a2cec":"train_feed_dict={x:train,y:train_labels}\ntest_feed_dict = {x:test, y:test_labels}","b5942c59":"from sklearn.metrics import auc,roc_curve,classification_report","d6685489":"prob = y_pred.eval(session=sess,feed_dict =test_feed_dict)\ntpr_per_class={}\nfpr_per_class={}\nauc_per_class={}\nauc_per_class={}\nthresholds={}\nfor i in range(10):\n  fpr_per_class[i],tpr_per_class[i],thresholds[i] = roc_curve(test_labels[:,i],prob[:,i])\n  auc_per_class[i] = auc(fpr_per_class[i],tpr_per_class[i])","44741a46":"def plot_roc(fpr,tpr):\n  fig = plt.figure(figsize=(15,15))\n  axes = fig.subplots(4,3)\n  for i,ax in enumerate(axes.flat):\n    if(i>=10):\n      ax.set_visible(False)\n      continue\n    ax.plot(fpr[i],tpr[i],color=\"darkorange\")\n    ax.set_xlabel(\"FPR(false positive rate)\")\n    ax.set_ylabel(\"TPR(True positive rate)\")\n    ax.legend([\"class:{}\".format(i)+\" ROC_curve(area:{0:.2f})\".format(auc_per_class[i])],loc='lower left')\n  fig.suptitle(\"ROC CURVES\",fontsize=20)\n  plt.show()\n  \n  print(classification_report(np.argmax(test_labels,axis=1),np.argmax(prob,axis=1)))","3461610e":"plot_roc(fpr_per_class,tpr_per_class)","4f57e443":"sess.close()","03082041":"# Tensorflow Function","53747a55":"# Confusion Matrix","6e778ccd":"# Batches for SGD","fede2cdb":"# Performance Metrics","b09d5ec2":"# Visualizing Learned Weights","691a9a59":"# Missclassified Examples visualization","3a9aec5e":"## Starting a session","7371f7f1":"# VISUALIZATION ","14641de3":"# Model run function","603ee76d":"# MNIST DATASET DOWNLOAD"}}