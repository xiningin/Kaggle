{"cell_type":{"35989dda":"code","9bd6438e":"code","d7431942":"code","00f86acf":"code","476004b8":"code","c55555cd":"code","0d4809d6":"code","d3ac6499":"markdown","72c53df8":"markdown","6580f07b":"markdown","d98e21c6":"markdown"},"source":{"35989dda":"import numpy  as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nimport os\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","9bd6438e":"def get_train_file_path(image_id): return \"..\/input\/seti-breakthrough-listen\/train\/{}\/{}.npy\".format(image_id[0], image_id)\ndef get_test_file_path(image_id):  return \"..\/input\/seti-breakthrough-listen\/test\/{}\/{}.npy\".format( image_id[0], image_id)\n\ntrain_df = pd.read_csv('..\/input\/seti-breakthrough-listen\/train_labels.csv')\ntest_df  = pd.read_csv('..\/input\/seti-breakthrough-listen\/sample_submission.csv')\n\ntrain_df['file_path'] = train_df['id'].apply(get_train_file_path)\ntest_df['file_path']  = test_df['id'].apply(get_test_file_path)\n\ndisplay(train_df.head())\ndisplay(test_df.head())","d7431942":"def plot_image_parts(df_row, rows=1, cols=6):\n    total = rows * cols \n    plt.figure(figsize=(100\/cols, rows*2))\n    # plt.subplots_adjudf_rowst(left=None, bottom=None, right=None, top=None, wspace=0, hspace=1)\n    image = np.load(df_row['file_path'])    # (6, 273, 256)\n    image = image.astype(np.float32)\n    for i in range(6):\n        plt.subplot(rows, cols, i + 1)\n        plt.title(f\"{df_row['id']} = {df_row['target']}\")\n        plt.imshow(image[i])\n    plt.show()\n\ndef plot_vstack(df, rows=10, cols=2):\n    total = rows * cols \n    plt.figure(figsize=(48\/cols, rows*2))\n    # plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=0, hspace=1)\n    for i in range(total):\n        image = np.load(df.iloc[i]['file_path'])    # (6, 273, 256)\n        image = image.astype(np.float32)\n        image = np.vstack(image).transpose((1, 0))  # (1638, 256) -> (256, 1638)\n#         image = np.hstack(image).transpose((1, 0))  # (1638, 256) -> (256, 1638)\n        plt.subplot(rows, cols, i + 1)\n        plt.title(f\"{df.iloc[i]['id']} = {df.iloc[i]['target']}\")\n        plt.imshow(image)\n    plt.show()\n    \n    \n# Source: https:\/\/www.kaggle.com\/ihelon\/signal-search-exploratory-data-analysis\ndef plot_cadence(df_row) -> None:\n    filename = df_row['file_path']\n    label    = df_row['target']\n            \n    plt.figure(figsize=(8, 5))\n    arr = np.load(filename)\n    for i in range(6):\n        plt.subplot(6, 1, i + 1)\n        if i == 0:\n            plt.title(f\"ID: {os.path.basename(filename)} TARGET: {label}\", fontsize=18)\n        plt.imshow(arr[i].astype(float), interpolation='nearest', aspect='auto')\n        plt.text(5, 100, [\"ON\", \"OFF\"][i % 2], bbox={'facecolor': 'white'})\n        plt.xticks([])\n    plt.show()","00f86acf":"print('Signal')\nplot_image_parts(train_df.query('target == 1').iloc[0])\nplot_vstack(train_df.query('target == 1'), cols=1, rows=1)\nplot_cadence(train_df.query('target == 1').iloc[0])","476004b8":"print('No Signal')\nplot_image_parts(train_df.query('target == 0').iloc[0])\nplot_vstack(train_df.query('target == 0'), cols=1, rows=1)\nplot_cadence(train_df.query('target == 0').iloc[0])","c55555cd":"print('Signal')\nfor i, df_row in train_df.query('target == 1').iterrows(): \n    plot_cadence(df_row)","0d4809d6":"print('No Signal')\nplot_vstack(train_df.query('target == 0'))","d3ac6499":"Now show a larger number of samples?\n","72c53df8":"Load data and resolve filenames from ids","6580f07b":"# SETI - What Do Signals Look Like?","d98e21c6":"Plot signal\/no-signal data both as indivual parts and vstacked "}}