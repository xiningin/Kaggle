{"cell_type":{"c2c0cc11":"code","7784255e":"code","ba6e324d":"code","84fc6872":"code","164161ea":"code","027475c7":"code","6a947f94":"code","6bca8100":"code","f94ebb52":"code","1c666b73":"markdown","2b8ab2b7":"markdown","d99ab47d":"markdown","342b4b14":"markdown"},"source":{"c2c0cc11":"%matplotlib inline\n\nimport numpy as np\nfrom matplotlib import pyplot as plt","7784255e":"class KNearestNeighbor(object):\n    def __init__(self, k=3):\n        self.k = k\n        \n    def fit(self, X, y):\n        # Store the original points\n        \n        self.X = X\n        self.y = y\n        \n        return self\n        \n    def predict(self, X, y=None):\n#         print(\"self.X:\", self.X)\n#         print(\"self.X.shape:\", self.X.shape)\n        \n        # Initialize a zero distance matrix\n        dists = np.zeros((X.shape[0], self.X.shape[0]))\n#         print(\"dists.shape:\", dists.shape)\n        \n        # Loop through all possible pairs and compute their distances\n        for i in range(dists.shape[0]):\n            for j in range(dists.shape[1]):\n#                 print(i, j, X[i], self.X[j])\n                dists[i, j] = self.distance(X[i], self.X[j])\n                \n#         print(\"dists:\", dists)\n        \n        # Sort the distance array row-wise, and select the top k indexes for each row\n        indexes = np.argsort(dists, axis=1)[:,:self.k]\n#         print(\"indexes:\", indexes)\n        \n        # Compute the mean of the values\n        mean = np.mean(self.y[indexes], axis=1)\n#         print(\"mean:\", mean)\n#         print(\"mean.shape:\", mean.shape)\n        \n        return mean\n                \n    def distance(self, x, y):\n        return np.sqrt(np.dot(x - y, x - y))","ba6e324d":"x = np.linspace(0, 5, 20)","84fc6872":"m = 1.5\nc = 1\ny = m * x + c + np.random.normal(size=(20,))","164161ea":"plt.plot(x, y, 'x')","027475c7":"model = KNearestNeighbor(k=3)","6a947f94":"model.fit(x, y)","6bca8100":"# predicted = model.predict(x)\npredicted = model.predict(x.reshape(-1, 1))","f94ebb52":"plt.plot(\n    x, y, \"x\",\n    x, model.predict(x), \"-o\"\n)\nplt.legend([\"actual\", \"prediction\"])","1c666b73":"### Implementation","2b8ab2b7":"Generate sample data","d99ab47d":"Instantiate and fit model","342b4b14":"### Sample usage"}}