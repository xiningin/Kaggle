{"cell_type":{"86b90ba0":"code","7c8c3717":"code","4add0b8a":"code","8cbe385c":"code","aae01834":"code","0d7ec249":"code","14be6845":"code","e4056132":"markdown","cef3454e":"markdown","5cd99f41":"markdown","28c35f65":"markdown","7ec25106":"markdown","d9b2df2f":"markdown","c40f98b0":"markdown","ebccfcd6":"markdown"},"source":{"86b90ba0":"import pandas as pd # dataframe manipulation\nimport numpy as np # linear algebra\n\n# data visualization\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nprint('Seaborn verion', sns.__version__)\nsns.set_style('whitegrid')\n\n# text data\nimport string\nimport re\n","7c8c3717":"df = pd.read_csv('..\/input\/amazon-top-50-bestselling-books-2009-2019\/bestsellers with categories.csv')\ndf","4add0b8a":"df.rename(columns={\"User Rating\": \"User_Rating\"}, inplace=True)\ndf[df.Author == 'J. K. Rowling']\ndf[df.Author == 'J.K. Rowling']\ndf.loc[df.Author == 'J. K. Rowling', 'Author'] = 'J.K. Rowling'\ndf['name_len'] = df['Name'].apply(lambda x: len(x) - x.count(\" \")) # subtract whitespaces\npunctuations = string.punctuation\nprint('list of punctuations : ', punctuations)\n\n# percentage of punctuations\ndef count_punc(text):\n    \"\"\"This function counts the number of punctuations in a text\"\"\"\n    count = sum(1 for char in text if char in punctuations)\n    return round(count\/(len(text) - text.count(\" \"))*100, 3)\n\n# apply function\ndf['punc%'] = df['Name'].apply(lambda x: count_punc(x))","8cbe385c":"\nno_dup = df.drop_duplicates('Name')\ng_count = no_dup['Genre'].value_counts()\n\nfig, ax = plt.subplots(figsize=(8, 8))\n\ndef make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{p:.2f}%\\n({v:d})'.format(p=pct,v=val)\n    return my_autopct\n\ngenre_col = ['navy','crimson']\n#genre_col = ['khaki','plum']\n\ncenter_circle = plt.Circle((0, 0), 0.7, color='white')\nplt.pie(x=g_count.values, labels=g_count.index, autopct=make_autopct(g_count.values), \n          startangle=90, textprops={'size': 15}, pctdistance=0.5, colors=genre_col)\nax.add_artist(center_circle)\n\nfig.suptitle('Distribution of Genre for all unique books from 2009 to 2019', fontsize=20)\nfig.show()","aae01834":"y1 = np.arange(2009, 2014)\ny2 = np.arange(2014, 2020)\ng_count = df['Genre'].value_counts()\n\nfig, ax = plt.subplots(2, 6, figsize=(12,6))\n\nax[0,0].pie(x=g_count.values, labels=None, autopct='%1.1f%%',\n            startangle=90, textprops={'size': 12, 'color': 'white'},\n            pctdistance=0.5, radius=1.3, colors=genre_col)\nax[0,0].set_title('2009 - 2019\\n(Overall)', color='darkgreen', fontdict={'fontsize': 15})\n\nfor i, year in enumerate(y1):\n    counts = df[df['Year'] == year]['Genre'].value_counts()\n    ax[0,i+1].set_title(year, color='darkred', fontdict={'fontsize': 15})\n    ax[0,i+1].pie(x=counts.values, labels=None, autopct='%1.1f%%', \n                  startangle=90, textprops={'size': 12,'color': 'white'}, \n                  pctdistance=0.5, colors=genre_col, radius=1.1)\n\nfor i, year in enumerate(y2):\n    counts = df[df['Year'] == year]['Genre'].value_counts()\n    ax[1,i].pie(x=counts.values, labels=None, autopct='%1.1f%%', \n                startangle=90, textprops={'size': 12,'color': 'white'},\n                pctdistance=0.5, colors=genre_col, radius=1.1)\n    ax[1,i].set_title(year, color='darkred', fontdict={'fontsize': 15})\n\n#plt.suptitle('Distribution of Fiction and Non-Fiction books for every year from 2009 to 2019',\n             #fontsize=25)\nfig.legend(g_count.index, loc='center right', fontsize=12)\nfig.show()","0d7ec249":"st_nf_authors = df.groupby(['Author', 'Genre']).agg({'Name': 'count'}).unstack()['Name', 'Non Fiction'].sort_values(ascending=False)[:11]\nbest_nf_authors = df.groupby(['Author', 'Genre']).agg({'Name': 'count'}).unstack()['Name', 'Fiction'].sort_values(ascending=False)[:11]\n\nwith plt.style.context('Solarize_Light2'):\n    fig, ax = plt.subplots(1, 2, figsize=(8,8))\n    \n    ax[0].barh(y=best_nf_authors.index, width=best_nf_authors.values,\n           color=genre_col[0])\n    ax[0].invert_xaxis()\n    ax[0].yaxis.tick_left()\n    ax[0].set_xticks(np.arange(max(best_f_authors.values)+1))\n    ax[0].set_yticklabels(best_nf_authors.index, fontsize=12, fontweight='semibold')\n    ax[0].set_xlabel('Number of appreances')\n    ax[0].set_title('Non Fiction Authors')\n    \n    ax[1].barh(y=best_f_authors.index, width=best_f_authors.values,\n           color=genre_col[1])\n    ax[1].yaxis.tick_right()\n    ax[1].set_xticks(np.arange(max(best_f_authors.values)+1))\n    ax[1].set_yticklabels(best_f_authors.index, fontsize=12, fontweight='semibold')\n    ax[1].set_title('Fiction Authors')\n    ax[1].set_xlabel('Number of appreances')\n    \n    fig.legend(['Non Fiction', 'Fiction'], fontsize=12)\n    \nplt.show()","14be6845":"n_best = 20\n\ntop_authors = df.Author.value_counts().nlargest(n_best)\nno_dup = df.drop_duplicates('Name') # removes all rows with duplicate book names\n\nfig, ax = plt.subplots(1, 3, figsize=(11,10), sharey=True)\n\ncolor = sns.color_palette(\"hls\", n_best)\n\nax[0].hlines(y=top_authors.index , xmin=0, xmax=top_authors.values, color=color, linestyles='dashed')\nax[0].plot(top_authors.values, top_authors.index, 'go', markersize=9)\nax[0].set_xlabel('Number of appearences')\nax[0].set_xticks(np.arange(top_authors.values.max()+1))\nax[0].set_yticklabels(top_authors.index, fontweight='semibold')\nax[0].set_title('Appearences')\n\nbook_count = []\ntotal_reviews = []\nfor name, col in zip(top_authors.index, color):\n    book_count.append(len(no_dup[no_dup.Author == name]['Name']))\n    total_reviews.append(no_dup[no_dup.Author == name]['Reviews'].sum()\/1000)\nax[1].hlines(y=top_authors.index , xmin=0, xmax=book_count, color=color, linestyles='dashed')\nax[1].plot(book_count, top_authors.index, 'go', markersize=9)\nax[1].set_xlabel('Number of unique books')\nax[1].set_xticks(np.arange(max(book_count)+1))\nax[1].set_title('Unique books')\n\nax[2].barh(y=top_authors.index, width=total_reviews, color=color, edgecolor='black', height=0.7)\nfor name, val in zip(top_authors.index, total_reviews):\n    ax[2].text(val+2, name, val)\nax[2].set_xlabel(\"Total Reviews (in 1000's)\")\nax[2].set_title('Total reviews')\n\n#plt.suptitle('Top 20 best selling Authors (from 2009 to 2019) details', fontsize=15)\nplt.show()","e4056132":"# Data Preparation:\nNow the next step is to prepare the data, here I will rename User Rating as user_rating, and then we will fix some spellings in the data:","cef3454e":"Now let\u2019s visualize the above insights according to each year:","5cd99f41":"uthor Jeff Kinney is the best-selling author with 12 appearances in best-selling books from 2009 to 2019. This is how we can analyze any data related to sales consisting of different categories.\n\nI hope you liked this article on the Data Science project on Amazon Bestselling books analysis with Python programming language. Feel free to ask your valuable questions in the comments section below.","28c35f65":"# Amazon Bestselling Books Analysis with Python\n","7ec25106":"Top-selling authors are selected based on their appearances in the top 50 best-selling books each year. The number of appearances includes duplicate book names. Their unique posts and overall reviews are featured below:","d9b2df2f":"The bestselling authors are selected based on their appearances in the top 50 bestselling books each year, from 2009 to 2019. Now let\u2019s look at the top 10 bestselling authors of both fiction and non-fiction categories:","c40f98b0":"In this article, I\u2019m going to introduce you to a data science project on Amazon bestselling books analysis with the Python programming language. The data I\u2019ll be using in this data science project is a dataset of Amazon\u2019s 50 Best Books between 2009 and 2019.\n\nThe dataset contains 550 books and has been categorized into fiction and non-fiction using Goodreads.","ebccfcd6":"In the data set, Genre is a categorical dummy variable; Fiction and non-fiction. Non-fiction was a more popular category than fiction, each year from 2009 to 2019. Of the 351 unique books, 54.4% were non-fiction and 45.6% were fiction.\n\nThe highest fraction (66%) of non-fiction books were sold in 2015 and the lowest for fiction books. For fiction books, the highest fraction (48%) of books were sold in 2009, 2013 and 2017, and the lowest for non-fiction books. Let\u2019s visualize the data according to the genre:\n\n"}}