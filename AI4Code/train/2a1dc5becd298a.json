{"cell_type":{"fee86b05":"code","85bc3ecd":"code","641fa041":"code","d54d3ef4":"code","6bba397c":"code","290a7666":"code","5ea2869f":"code","829afb77":"code","1adb8184":"code","ff2db34f":"code","797cdf99":"code","52194595":"code","0bcfddc6":"code","0524267e":"code","44a62eb0":"code","da27bd5e":"code","f1ee5a34":"code","edf6241f":"code","5d2e13af":"code","72f43941":"code","c8df74f1":"code","9dbcf96d":"code","1546a94f":"code","7a978d3a":"code","54e5480d":"code","79cac9e7":"code","a16e910d":"code","99d6832d":"code","8715c2a2":"code","93c383aa":"code","dd6a1daa":"code","fc704054":"code","69e16206":"code","58ce8680":"code","cefddd94":"code","7d4a93a5":"code","8f1b96b5":"code","ed610352":"code","2d79f4af":"code","487b8608":"code","9b885bc8":"code","41c8f65a":"code","388c08b4":"code","99525735":"code","1e18816a":"code","18580e21":"code","77ca1136":"code","dc276935":"code","68d9eeb5":"code","7e286f65":"code","32d7abb0":"code","71b7c711":"markdown","ede19de6":"markdown","b9472af0":"markdown","a76ee50b":"markdown","187ca86a":"markdown","4876e237":"markdown","0b883f6f":"markdown","eecb3e7a":"markdown","9a3853c5":"markdown","2f884802":"markdown","45b90309":"markdown","793dd646":"markdown","6082af18":"markdown","6846bf60":"markdown","f544c88a":"markdown","aacd0fdf":"markdown","1917efde":"markdown","908562b7":"markdown","6ca736e1":"markdown","bafc001f":"markdown","d6baf811":"markdown","d636f49a":"markdown","c442c25e":"markdown","a2a59fa7":"markdown","7b813c2f":"markdown","4f5d0a39":"markdown","478f0b58":"markdown","f763e034":"markdown","e8385711":"markdown","dc0e727d":"markdown","63853b94":"markdown","ed9a7c44":"markdown","eb0ea088":"markdown","8e02d8b5":"markdown","5e2d1fdb":"markdown","0ff1a130":"markdown","a81ba9c4":"markdown","11cb244b":"markdown","db8a14e6":"markdown","0353220b":"markdown","cf3bb117":"markdown","55dac13b":"markdown","ca275629":"markdown","a95b16b7":"markdown"},"source":{"fee86b05":"# Loading packages\nimport pandas as pd #Analysis \nimport matplotlib.pyplot as plt #Visulization\nimport seaborn as sns #Visulization\nimport numpy as np #Analysis \nfrom scipy.stats import norm #Analysis \nfrom sklearn.preprocessing import StandardScaler #Analysis \nfrom scipy import stats #Analysis \nimport warnings \nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport gc","85bc3ecd":"df_train = pd.read_csv('..\/input\/2019-2nd-ml-month-with-kakr\/train.csv')\ndf_test  = pd.read_csv('..\/input\/2019-2nd-ml-month-with-kakr\/test.csv')","641fa041":"!ls -al ..\/input\/myfirst-house-price-prediction","d54d3ef4":"print(\"train.csv. Shape: \",df_train.shape)\nprint(\"test.csv. Shape: \",df_test.shape)","6bba397c":"df_train.head()","290a7666":"#descriptive statistics summary\ndf_train['price'].describe()","5ea2869f":"#histogram\nf, ax = plt.subplots(figsize=(8, 6))\nsns.distplot(df_train['price'])","829afb77":"#skewness and kurtosis\nprint(\"Skewness: %f\" % df_train['price'].skew())\nprint(\"Kurtosis: %f\" % df_train['price'].kurt())","1adb8184":"fig = plt.figure(figsize = (15,10))\n\nfig.add_subplot(1,2,1)\nres = stats.probplot(df_train['price'], plot=plt)\n\nfig.add_subplot(1,2,2)\nres = stats.probplot(np.log1p(df_train['price']), plot=plt)","ff2db34f":"df_train['price'] = np.log1p(df_train['price'])\n#histogram\nf, ax = plt.subplots(figsize=(8, 6))\nsns.distplot(df_train['price'])","797cdf99":"# correlation\uc774 \ub192\uc740 \uc0c1\uc704 10\uac1c\uc758 heatmap\n# continuous + sequential variables --> spearman\n# abs\ub294 \ubc18\ube44\ub840\uad00\uacc4\ub3c4 \uace0\ub824\ud558\uae30 \uc704\ud568\n# https:\/\/www.kaggle.com\/junoindatascience\/let-s-eda-it \uc900\ud638\ub2d8\uc774 \uc218\uc815\ud574 \uc900 \ucf54\ub4dc\ub85c \uc0ac\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4. \nimport scipy as sp\n\ncor_abs = abs(df_train.corr(method='spearman')) \ncor_cols = cor_abs.nlargest(n=10, columns='price').index # price\uacfc correlation\uc774 \ub192\uc740 column 10\uac1c \ubf51\uae30(\ub0b4\ub9bc\ucc28\uc21c)\n# spearman coefficient matrix\ncor = np.array(sp.stats.spearmanr(df_train[cor_cols].values))[0] # 10 x 10\nprint(cor_cols.values)\nplt.figure(figsize=(10,10))\nsns.set(font_scale=1.25)\nsns.heatmap(cor, fmt='.2f', annot=True, square=True , annot_kws={'size' : 8} ,xticklabels=cor_cols.values, yticklabels=cor_cols.values)","52194595":"data = pd.concat([df_train['price'], df_train['grade']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='grade', y=\"price\", data=data)","0bcfddc6":"data = pd.concat([df_train['price'], df_train['sqft_living']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_living', y=\"price\", data=data)","0524267e":"data = pd.concat([df_train['price'], df_train['sqft_living15']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_living15', y=\"price\", data=data)","44a62eb0":"data = pd.concat([df_train['price'], df_train['sqft_above']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_above', y=\"price\", data=data)","da27bd5e":"data = pd.concat([df_train['price'], df_train['bathrooms']], axis=1)\nf, ax = plt.subplots(figsize=(18, 6))\nfig = sns.boxplot(x='bathrooms', y=\"price\", data=data)","f1ee5a34":"data = pd.concat([df_train['price'], df_train['bedrooms']], axis=1)\nf, ax = plt.subplots(figsize=(18, 6))\nfig = sns.boxplot(x='bedrooms', y=\"price\", data=data)","edf6241f":"from plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nfrom sklearn import model_selection, preprocessing, metrics, ensemble, naive_bayes, linear_model\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.decomposition import TruncatedSVD\n\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999\n\nimport plotly.graph_objs as go\n\nimport time\nimport random\n\n#https:\/\/www.kaggle.com\/ashishpatel26\/bird-eye-view-of-two-sigma-nn-approach\ndef mis_value_graph(data):  \n    data = [\n    go.Bar(\n        x = data.columns,\n        y = data.isnull().sum(),\n        name = 'Counts of Missing value',\n        textfont=dict(size=20),\n        marker=dict(\n        line=dict(\n            color= generate_color(),\n            #width= 2,\n        ), opacity = 0.45\n    )\n    ),\n    ]\n    layout= go.Layout(\n        title= '\"Total Missing Value By Column\"',\n        xaxis= dict(title='Columns', ticklen=5, zeroline=False, gridwidth=2),\n        yaxis= dict(title='Value Count', ticklen=5, gridwidth=2),\n        showlegend=True\n    )\n    fig = go.Figure(data=data, layout=layout)\n    py.iplot(fig, filename='skin')\n    \ndef generate_color():\n    color = '#{:02x}{:02x}{:02x}'.format(*map(lambda x: random.randint(0, 255), range(3)))\n    return color\n\ndf_all = pd.concat([df_train,df_test])\ndel df_all['price']\nmis_value_graph(df_all)","5d2e13af":"### \uc720\ub2c8\ud06c \uac2f\uc218 \uacc4\uc0b0\ntrain_unique = []\ncolumns = ['bedrooms','bathrooms','floors','waterfront','view','condition','grade']\n\nfor i in columns:\n    train_unique.append(len(df_train[i].unique()))\nunique_train = pd.DataFrame()\nunique_train['Columns'] = columns\nunique_train['Unique_value'] = train_unique\n\ndata = [\n    go.Bar(\n        x = unique_train['Columns'],\n        y = unique_train['Unique_value'],\n        name = 'Unique value in features',\n        textfont=dict(size=20),\n        marker=dict(\n        line=dict(\n            color= generate_color(),\n            #width= 2,\n        ), opacity = 0.45\n    )\n    ),\n    ]\nlayout= go.Layout(\n        title= \"Unique Value By Column\",\n        xaxis= dict(title='Columns', ticklen=5, zeroline=False, gridwidth=2),\n        yaxis= dict(title='Value Count', ticklen=5, gridwidth=2),\n        showlegend=True\n    )\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='skin')","72f43941":"df_train['floors'].unique()","c8df74f1":"data = pd.concat([df_train['price'], df_train['sqft_living']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_living', y=\"price\", data=data)","9dbcf96d":"df_train.loc[df_train['sqft_living'] > 13000]","1546a94f":"df_train = df_train.loc[df_train['id']!=8990]","7a978d3a":"data = pd.concat([df_train['price'], df_train['grade']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='grade', y=\"price\", data=data)","54e5480d":"df_train.loc[(df_train['price']>12) & (df_train['grade'] == 3)]","79cac9e7":"df_train.loc[(df_train['price']>14.7) & (df_train['grade'] == 8)]","a16e910d":"df_train.loc[(df_train['price']>15.5) & (df_train['grade'] == 11)]","99d6832d":"df_train = df_train.loc[df_train['id']!=456]\ndf_train = df_train.loc[df_train['id']!=2302]\ndf_train = df_train.loc[df_train['id']!=4123]\ndf_train = df_train.loc[df_train['id']!=7259]\ndf_train = df_train.loc[df_train['id']!=2777]","8715c2a2":"data = pd.concat([df_train['price'], df_train['bedrooms']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='bedrooms', y=\"price\", data=data)","93c383aa":"skew_columns = ['sqft_living', 'sqft_lot', 'sqft_above', 'sqft_basement']\n\nfor c in skew_columns:\n    df_train[c] = np.log1p(df_train[c].values)\n    df_test[c] = np.log1p(df_test[c].values)","dd6a1daa":"for df in [df_train,df_test]:\n    df['date'] = df['date'].apply(lambda x: x[0:8])\n    df['yr_renovated'] = df['yr_renovated'].apply(lambda x: np.nan if x == 0 else x)\n    df['yr_renovated'] = df['yr_renovated'].fillna(df['yr_built'])","fc704054":"df_train.head()","69e16206":"for df in [df_train,df_test]:\n    # \ubc29\uc758 \uc804\uccb4 \uac2f\uc218 \n    df['total_rooms'] = df['bedrooms'] + df['bathrooms']\n    \n    # \uac70\uc2e4\uc758 \ube44\uc728 : 15\ub85c \uc218\uc815\n    df['sqft_ratio'] = df['sqft_living15'] \/ df['sqft_lot15']\n    \n    df['sqft_total_size'] = df['sqft_above'] + df['sqft_basement']\n    \n    # \uba74\uc801 \ub300\ube44 \uac70\uc2e4\uc758 \ube44\uc728 : 15\ub85c \uc218\uc815\n    df['sqft_ratio_1'] = df['sqft_living15'] \/ df['sqft_total_size']\n    \n    df['sqft_ratio15'] = df['sqft_living15'] \/ df['sqft_lot15'] \n    \n    # \uc7ac\uac74\ucd95 \uc5ec\ubd80 \n    df['is_renovated'] = df['yr_renovated'] - df['yr_built']\n    df['is_renovated'] = df['is_renovated'].apply(lambda x: 0 if x == 0 else 1)\n    df['date'] = df['date'].astype('int')","58ce8680":"df_train['per_price'] = df_train['price']\/df_train['sqft_total_size']\nzipcode_price = df_train.groupby(['zipcode'])['per_price'].agg({'mean','var'}).reset_index()\ndf_train = pd.merge(df_train,zipcode_price,how='left',on='zipcode')\ndf_test = pd.merge(df_test,zipcode_price,how='left',on='zipcode')\n\nfor df in [df_train,df_test]:\n    df['zipcode_mean'] = df['mean'] * df['sqft_total_size']\n    df['zipcode_var'] = df['var'] * df['sqft_total_size']\n    del df['mean']; del df['var']","cefddd94":"df_train.head()","7d4a93a5":"from sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm\n\ntrain_columns = [c for c in df_train.columns if c not in ['id','price','per_price']]\n\nmodel = sm.OLS(df_train['price'].values, df_train[train_columns])\nresult = model.fit()\nprint(result.summary())","8f1b96b5":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\nvif = pd.DataFrame()\n\nvif[\"Features\"] = df_train.columns\nvif[\"VIF Values\"] = [variance_inflation_factor(\n    df_train.values, i) for i in range(df_train.shape[1])]\n\nvif.sort_values(by='VIF Values',ascending=False)","ed610352":"import lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.linear_model import RidgeCV\n\nparam = {'num_leaves': 31,\n         'min_data_in_leaf': 30, \n         'objective':'regression',\n         'max_depth': -1,\n         'learning_rate': 0.015,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 11,\n         \"metric\": 'rmse',\n         \"lambda_l1\": 0.1,\n         \"verbosity\": -1,\n         \"nthread\": 4,\n         \"random_state\": 4950}\n\ny_reg = df_train['price']\n\n#prepare fit model with cross-validation\nfolds = KFold(n_splits=5, shuffle=True, random_state=42)\noof = np.zeros(len(df_train))\npredictions = np.zeros(len(df_test))\nfeature_importance_df = pd.DataFrame()\n\n#run model\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(df_train)):\n    trn_data = lgb.Dataset(df_train.iloc[trn_idx][train_columns], label=y_reg.iloc[trn_idx])#, categorical_feature=categorical_feats)\n    val_data = lgb.Dataset(df_train.iloc[val_idx][train_columns], label=y_reg.iloc[val_idx])#, categorical_feature=categorical_feats)\n\n    num_round = 10000\n    clf = lgb.train(param, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=500, early_stopping_rounds = 100)\n    oof[val_idx] = clf.predict(df_train.iloc[val_idx][train_columns], num_iteration=clf.best_iteration)\n    #feature importance\n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"Feature\"] = train_columns\n    fold_importance_df[\"importance\"] = clf.feature_importance()\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    #predictions\n    predictions += clf.predict(df_test[train_columns], num_iteration=clf.best_iteration) \/ folds.n_splits\n    \ncv = np.sqrt(mean_squared_error(oof, y_reg))\nprint(cv)","2d79f4af":"cv1 = np.sqrt(mean_squared_error(np.expm1(oof), np.expm1(y_reg)))\nprint(cv1)","487b8608":"##plot the feature importance\ncols = (feature_importance_df[[\"Feature\", \"importance\"]]\n        .groupby(\"Feature\")\n        .mean()\n        .sort_values(by=\"importance\", ascending=False)[:1000].index)\nbest_features = feature_importance_df.loc[feature_importance_df.Feature.isin(cols)]\n\nplt.figure(figsize=(14,26))\nsns.barplot(x=\"importance\", y=\"Feature\", data=best_features.sort_values(by=\"importance\",ascending=False))\nplt.title('LightGBM Features (averaged over folds)')\nplt.tight_layout()\nplt.savefig('lgbm_importances.png')","9b885bc8":"df_oof = pd.DataFrame(oof)\ndf_y_reg = pd.DataFrame(y_reg)\n\ndata = pd.concat([df_oof, df_y_reg], axis=1)\ndata.columns = ['oof','y_reg']\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='oof', y=\"y_reg\", data=data)","41c8f65a":"data = pd.concat([df_oof, df_y_reg], axis=1)\ndata.columns = ['oof','y_reg']\ndata['error'] = data['y_reg'] - data['oof']\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='y_reg', y=\"error\", data=data)","388c08b4":"lgb1_oof = pd.DataFrame()\nlgb1_oof['id'] = df_train.id\nlgb1_oof['price'] = oof\n\nlgb1_sub = pd.DataFrame()\nlgb1_sub['id'] = df_test.id\nlgb1_sub['price'] = predictions\n\ncv1 = np.sqrt(mean_squared_error(np.expm1(oof), np.expm1(y_reg)))\nprint(cv1)","99525735":"import lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.linear_model import RidgeCV\n\nparam = {'num_leaves': 31,\n         'min_data_in_leaf': 30, \n         'objective':'regression',\n         'max_depth': -1,\n         'learning_rate': 0.005,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 11,\n         \"metric\": 'rmse',\n         \"lambda_l1\": 0.1,\n         \"verbosity\": -1,\n         \"nthread\": 4,\n         \"random_state\": 4950}\n\ny_reg = np.expm1(df_train['price'])\n\n#prepare fit model with cross-validation\nfolds = KFold(n_splits=5, shuffle=True, random_state=42)\noof = np.zeros(len(df_train))\npredictions = np.zeros(len(df_test))\nfeature_importance_df = pd.DataFrame()\n\n#run model\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(df_train)):\n    trn_data = lgb.Dataset(df_train.iloc[trn_idx][train_columns], label=y_reg.iloc[trn_idx])#, categorical_feature=categorical_feats)\n    val_data = lgb.Dataset(df_train.iloc[val_idx][train_columns], label=y_reg.iloc[val_idx])#, categorical_feature=categorical_feats)\n\n    num_round = 10000\n    clf = lgb.train(param, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=500, early_stopping_rounds = 100)\n    oof[val_idx] = clf.predict(df_train.iloc[val_idx][train_columns], num_iteration=clf.best_iteration)\n    #feature importance\n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"Feature\"] = train_columns\n    fold_importance_df[\"importance\"] = clf.feature_importance()\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    #predictions\n    predictions += clf.predict(df_test[train_columns], num_iteration=clf.best_iteration) \/ folds.n_splits\n    \ncv = np.sqrt(mean_squared_error(oof, y_reg))\nprint(cv)","1e18816a":"lgb2_oof = pd.DataFrame()\nlgb2_oof['id'] = df_train.id\nlgb2_oof['price'] = oof\n\nlgb2_sub = pd.DataFrame()\nlgb2_sub['id'] = df_test.id\nlgb2_sub['price'] = predictions\n\ncv2 = np.sqrt(mean_squared_error(oof, y_reg))\nprint(cv2)","18580e21":"# code : https:\/\/www.kaggle.com\/karell\/kakr-2nd-house-price-xgb-starter-109145\nimport xgboost as xgb\n\nxgb_params = {\n    'eta': 0.01,\n    'max_depth': 6,\n    'subsample': 0.8,\n    'colsample_bytree': 0.8,\n    'objective': 'reg:linear',\n    'eval_metric': 'rmse',\n    'silent': 1\n}\n\nlog_y_reg = np.log1p(y_reg)\nprint('Transform DMatrix...')\ndtrain = xgb.DMatrix(df_train[train_columns], log_y_reg)\ndtest = xgb.DMatrix(df_test[train_columns])\n\nprint('Start Cross Validation...')\n\ncv_output = xgb.cv(xgb_params, dtrain, num_boost_round=5000, early_stopping_rounds=50,verbose_eval=500, show_stdv=False)\nprint('best num_boost_rounds = ', len(cv_output))\nrounds = len(cv_output)\n\nmodel = xgb.train(xgb_params, dtrain, num_boost_round = rounds)\npreds = model.predict(dtest)\n\nxgb1_sub = df_test[['id']]\nxgb1_sub['price'] = preds","77ca1136":"# code : https:\/\/www.kaggle.com\/karell\/kakr-2nd-house-price-xgb-starter-109145\nimport xgboost as xgb\n\nxgb_params = {\n    'eta': 0.01,\n    'max_depth': 6,\n    'subsample': 0.8,\n    'colsample_bytree': 0.8,\n    'objective': 'reg:linear',\n    'eval_metric': 'rmse',\n    'silent': 1\n}\n\nprint('Transform DMatrix...')\ndtrain = xgb.DMatrix(df_train[train_columns], y_reg)\ndtest = xgb.DMatrix(df_test[train_columns])\n\nprint('Start Cross Validation...')\n\ncv_output = xgb.cv(xgb_params, dtrain, num_boost_round=20000, early_stopping_rounds=50,verbose_eval=500, show_stdv=False)\nprint('best num_boost_rounds = ', len(cv_output))\nrounds = len(cv_output)\n\nmodel = xgb.train(xgb_params, dtrain, num_boost_round = rounds)\npreds = model.predict(dtest)\n\nxgb2_sub = df_test[['id']]\nxgb2_sub['price'] = preds","dc276935":"lgb_oof = pd.merge(lgb1_oof,lgb2_oof,how='left',on='id')\nlgb_train = df_train[['id','price']]\nlgb_oof = pd.merge(lgb_oof,lgb_train,how='left',on='id')\nlgb_oof.columns = ['id','price1','price2','price']\n\nlgb_ensemble = (0.9*np.expm1(lgb_oof['price1']) + 0.1*lgb_oof['price2']).values\ncv = np.sqrt(mean_squared_error(lgb_ensemble, np.expm1(lgb_oof['price']).values))\nprint(cv)","68d9eeb5":"lgb_sub = pd.merge(lgb1_sub,lgb2_sub,how='left',on='id')\nlgb_sub.columns = ['id','price1','price2']\nlgb_sub['price'] = (0.9*np.expm1(lgb_sub['price1']) + 0.1*lgb_sub['price2'])\nlgb_sub = lgb_sub[['id','price']]","7e286f65":"xgb_sub = pd.merge(xgb1_sub,xgb2_sub,how='left',on='id')\nxgb_sub.columns = ['id','price1','price2']\nxgb_sub['price'] = (0.9*np.expm1(xgb_sub['price1']) + 0.1*xgb_sub['price2'])\nxgb_sub = xgb_sub[['id','price']]","32d7abb0":"ensemble_sub = pd.merge(lgb_sub,xgb_sub,how='left',on='id')\nensemble_sub.columns = ['id','price1','price2']\nensemble_sub['price'] = 0.9*ensemble_sub['price1'] + 0.1*ensemble_sub['price2']\nensemble_sub = ensemble_sub[['id','price']]\nensemble_sub.to_csv(\"submission.csv\",index=False)","71b7c711":"grade\uc758 \uacbd\uc6b0 *\"1-3\uc740 \uac74\ubb3c \uac74\ucd95 \ubc0f \ub514\uc790\uc778\uc5d0 \ubbf8\uce58\uc9c0 \ubabb\ud558\uace0 7\uc740 \ud3c9\uade0 \uc218\uc900\uc758 \uac74\ucd95 \ubc0f \ub514\uc790\uc778\uc744, 11-13\uc740 \ub192\uc740 \uc218\uc900\uc758 \uac74\ucd95 \ubc0f \ub514\uc790\uc778\uc744 \uc9c0\ub2c8\uace0 \uc788\uc2b5\ub2c8\ub2e4.\" * \ub77c\uace0 \ud569\ub2c8\ub2e4. \n\n\uc9d1\uc758 \ub4f1\uae09\uc774 \ub192\uc73c\uba74 \uac00\uaca9\uc774 \uc88b\uc544\uc9c0\ub294 \uac83\uc740 \uc704\uc758 \ud788\ud2b8\ub9f5\uc5d0\uc11c\ub3c4 \ubd24\ub4ef\uc774 \ub2f9\uc5f0\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc804\ubc15\uc801\uc73c\ub85c \uc0c1\uc2b9\uace1\uc120\uc758 \ud615\ud0dc\ub3c4 \ubcf4\uc774\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \n- ***\ub4f1\uae09 3\uc758 \uacbd\uc6b0 \uac12\uc774 \ud070 \uc774\uc720***\n- ***\ub4f1\uae09 7,8,9\uc5d0\uc11c \uc774\uc0c1\uce58\uac00 \ub9ce\uc740 \uc774\uc720*** \n- ***\ub4f1\uae09 8\uacfc 11\uc5d0\uc11c \ucc28\uc774\uac00 \ud070 \uc774\uc0c1\uce58\uac00 \ub098\ud0c0\ub098\ub294 \uc774\uc720***\n\n\uc704\uc758 3\uac00\uc9c0\ub294 \uc880 \ub354 \uc790\uc138\ud788 \uc0b4\ud3b4\ubd10\uc57c \ud569\ub2c8\ub2e4. ","ede19de6":"\uce68\uc2e4\uc758 \uc218\ub97c \ubcf4\uba74 \uc704\uc5d0\uc11c \ud55c \uc598\uae30\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c median\uc774 \uc591\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ub744\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 bedrooms\uac00 2 ~ 6\uc740 \ubd84\uc0b0\uc774 \ub9e4\uc6b0 \ud070 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac00\uc6b4\ub370\uc758 \uc800 \uac12\ub4e4\uc740 \ub2e4\ub978 \ubcc0\uc218\ub4e4\uc758 \uc601\ud5a5\uc774 \ud06c\ubbc0\ub85c \uc704\uc758 \uc815\ubcf4\ub9cc\uc744 \ubcf4\uace0 \uc81c\uac70\ud558\uc9c0\ub294 \uc54a\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.  ","b9472af0":"\uc704\uc758 3\uac12 \ubaa8\ub450 \ud2b9\ubcc4\ud55c \uc774\uc720\uac00 \uc5c6\uc774 \uac00\uaca9\uc774 \ub192\uc544 \ubcf4\uc774\ubbc0\ub85c \uc774\uc0c1\uce58\ub85c \uaddc\uc815\ud558\uace0 \uc81c\uac70\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. ","a76ee50b":"### 1.3 \ubcc0\uc218 \uc2dc\uac01\ud654 ( \ubaa9\uc801\ubcc0\uc218 )","187ca86a":"# Ensemble","4876e237":"\ubaa9\uc801\ubcc0\uc218\uc640 \uc0c1\uad00\ub3c4\uac00 \ub192\uc740 \ubcc0\uc218\ub294 \uc9d1\uc758 \ub4f1\uae09 - \uc8fc\uac70\uacf5\uac04\uc758 \ud06c\uae30 - \uc804\uccb4 \ud06c\uae30\uc21c\uc774\uace0 \uc7ac\ubbf8\uc788\uac8c lat\uc774\ub77c\ub294 \uc704\ub3c4 \uac12\uc774 \ub4e4\uc5b4\uc788\uc2b5\ub2c8\ub2e4. \uc704\ub3c4\uac00 \uc99d\uac00\ud568\uc5d0 \ub530\ub77c \uac00\uaca9\uc774 \uc65c \uc99d\uac00\ud558\ub294\uc9c0 ? \uc774\uac83\uc744 \uc5b4\ub5bb\uac8c \ud65c\uc6a9\ud560 \uc218 \uc788\ub294\uc9c0\ub294 \uc880 \ub354 \ud0d0\uc0c9\uc774 \ud544\uc694\ud574\ubcf4\uc785\ub2c8\ub2e4. \n\n--- \n2019-03-12 +) \uc704\uc5d0\uc11c lat\uc758 \uacbd\uc6b0 price\uc640 \uc0c1\uad00\uc131\uc774 \ub192\uc740 \uac83\uc744 \ubcfc \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uce74\ud1a1\ubc29\uacfc [Discussion](https:\/\/www.kaggle.com\/c\/2019-2nd-ml-month-with-kakr\/discussion\/83549)\uc5d0 \ub530\ub974\uba74, \uc704\uc758 \uc9c0\uc5ed\uc740 \uc2dc\uc560\ud2c0\uc778\ub370 \uc2dc\uc560\ud2c0\uc740 \ubd81\ucabd\uc73c\ub85c \uac08 \uc218\ub85d \uc0b4\uae30 \uc88b\uc740 \uc9d1\ub4e4\uc774 \ub9ce\ub2e4\uace0 \ud569\ub2c8\ub2e4. \n\n\uc774 \ubd80\ubd84\uc5d0 \ub300\ud574\uc11c [\uae40\ud0dc\uc9c4\ub2d8\uc758 \ucee4\ub110](https:\/\/www.kaggle.com\/fulrose\/map-visualization-with-folium-ing)\uc758 \uc790\ub8cc\uc5d0\uc11c \ub098\uc628 \ubd80\ubd84\uc744 \ubcf4\uba74 \ub354 \uc790\uc138\ud558\uac8c \uc778\uc0ac\uc774\ud2b8\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","0b883f6f":"### 1.3 \ubcc0\uc218\uc2dc\uac01\ud654 ( \ubc18\uc751\ubcc0\uc218 )\n- \ud53c\uc5b4\uc2a8 \uc0c1\uad00\uad00\uacc4 : \uc5f0\uc18d\ud615 \ubcc0\uc218\uc5d0 \uc0ac\uc6a9\n- \uc2a4\ud53c\uc5b4\ub9cc \uc21c\uc704 \uc0c1\uad00\uad00\uacc4 : \ubc94\uc8fc\ud615 \ubcc0\uc218\ub3c4 \ud3ec\ud568\ub418\uc5c8\uc744 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9 ","eecb3e7a":"### 2.3 \ubcc0\uc218 \uc218\uc815","9a3853c5":"\uc544\ub798\ub294 \ubaa9\uc801\ubcc0\uc218\uc778 \uac00\uaca9\uacfc \uac00\uc7a5 \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc740 \uc21c\uc11c\ub300\ub85c \uc2a4\ud53c\uc5b4\ub9cc \uc21c\uc704 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf8 \ud788\ud2b8\ub9f5\uc785\ub2c8\ub2e4. \uc804\ubd80 \ubcf4\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ubd84\uc11d\uc758 \ud3b8\uc758\ub97c \uc704\ud574 \uc0c1\uad00\ub3c4\uac00 \ub192\uc740 \uc0c1\uc704 10\uac1c\uc758 \uac12\ub9cc \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. ","2f884802":"#### 2.1.3 bedrooms ","45b90309":"## 1. \ub370\uc774\ud130 \ud0d0\uc0c9\n### 1.1 \ubb38\uc81c \uc815\uc758 \n\uc774\ubc88 \ub370\uc774\ud130\uc758 \ubaa9\uc801\uc740 \uc9d1\uc758 \uc815\ubcf4\ub97c \uac00\uc9c0\uace0 \uac00\uaca9\uc744 \uc608\uce21\ud558\ub294 \ud68c\uadc0\ubb38\uc81c \uc785\ub2c8\ub2e4. \n\n\ud3c9\uac00\ub85c\ub294 RMSE\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \n\n\ube44\uc2b7\ud55c \ub300\ud68c\ub85c\ub294 \ub370\uc774\ucf58\uc5d0\uc11c \uc5f4\ub9b0 [\uc9c1\ubc29 \ubaa8\ub378\ub9c1 \ub300\ud68c](https:\/\/dacon.io\/cpt4)\uc640 \uce90\uae00\uc5d0\uc11c \uc5f4\ub9b0 [House Prices: Advanced Regression Techniques](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques)\uac00  \uc788\uc2b5\ub2c8\ub2e4. \n\n","793dd646":"\ubaa8\ub378\uc758 \uc124\uba85\ub825\uc744 \ubcf4\uba74 1\ub85c \uad49\uc7a5\ud788 \ub192\uc9c0\ub9cc, \uac01\uac01\uc758 \ubcc0\uc218\ub4e4 \uc911\uc5d0\uc11c\ub294 p-value\uac00 \ub192\uc740 \uac12\ub4e4\uc774 \uc788\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ud55c \uc774\uc720\ub97c \uc0dd\uac01\ud574\ubcf4\uba74 FE\ud574\uc11c \ub098\uc628 \ud30c\uc0dd\ubcc0\uc218\ub4e4\uc740 \uae30\uc874\uc758 \ubcc0\uc218\uc640 \uc5f0\uad00\ub418\uc5b4\uc788\uace0 sqft_\ub85c \uc2dc\uc791\ud558\ub294 \ubcc0\uc218\ub4e4\ub07c\ub9ac\uc758 \uc0c1\uad00\uc131\ub4f1\uc774 \uc788\uc5b4\uc11c \ub2e4\uc911\uacf5\uc120\uc131\uc758 \ubb38\uc81c\ub97c \uac00\uc9c0\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc2e4\uc81c\ub85c \ub2e4\uc911\uacf5\uc120\uc131\uc744 \uccb4\ud06c\ud558\uae30 \uc704\ud574 vif\ub97c \uc774\uc6a9\ud55c \ud655\uc778\uc744 \ud558\uba74 \n","6082af18":"\ubaa9\uc801\ubcc0\uc218 price\uc758 \uacbd\uc6b0 *\uc9d1\uc744 \uad6c\ub9e4\ud55c \uc2dc\uc810* \uc758 \uac00\uaca9\uc785\ub2c8\ub2e4. \uc774 \ub9d0\uc740 \ud604\uc7ac\uc758 \uac00\uaca9\uc744 \ubc18\uc601\ud558\ub294\uac8c \uc544\ub2c8\ub77c\ub294 \ub9d0\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc9d1\uc744 \uc0b0 \uc774\ud6c4 \ub9ac\ubaa8\ub378\ub9c1\uc744 \ud1b5\ud574 \uc9d1\uc744 \uace0\ucce4\uc5b4\ub3c4 \uc9d1\uc758 \uac00\uaca9\uc5d0\ub294 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \ubabb\ud569\ub2c8\ub2e4. \n\n\ucc38\uace0 : https:\/\/www.kaggle.com\/c\/2019-2nd-ml-month-with-kakr\/discussion\/83957","6846bf60":"## 3. \ubcc0\uc218 \uc0dd\uc131","f544c88a":"### sqlf_living \/ sqlf_lot\n(\uc8fc\uac70 \ud3c9\ubc29 \ud53c\ud2b8 \/ \ubd80\uc9c0 \ud3c9\ubc29 \ud53c\ud2b8)\n\n1sqlf\ub294 0.0281\ud3c9\uc785\ub2c8\ub2e4. sqlf_lot\ub294 \ubd80\uc9c0 \ud3c9\ubc29 \ud53c\ud2b8\uc778\ub370, \ud754\ud788 \uc6b0\ub9ac\ub098\ub77c\uc758 \uacbd\uc6b0, 32\ud3c9\ud615 \uc544\ud30c\ud2b8\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uc2e4\uc81c\ub85c \uc4f0\ub294 \uc804\uc6a9 \uba74\uc801\uc740 25.7\ud3c9 \uc815\ub3c4\uc785\ub2c8\ub2e4. \n\n*\uc989, sqlf_living\uc740 \uc2e4\uc81c \uc0ac\uc6a9 \uba74\uc801 \/ sqlf_lot\ub294 \ucd1d \ubd80\uc9c0\uc758 \uba74\uc801\uc73c\ub85c \uc0dd\uac01\ud558\uba74 \ub429\ub2c8\ub2e4.*","aacd0fdf":"- \uc65c\ub3c4 : \uc624\ub978\ucabd \uaf2c\ub9ac\uac00 \uae38\uc218\ub85d \uac12\uc774 \ub354 \ud07d\ub2c8\ub2e4. \n- \ucca8\ub3c4 (kurtosis \/ kurtosis) : \ucca8\ub3c4 \uac12 (K)\uc774 3\uc5d0 \uac00\uae4c\uc6b8 \uacbd\uc6b0, scatter\uc740 \uc815\uaddc \ubd84\ud3ec\uc5d0 \uac00\uae5d\uc2b5\ub2c8\ub2e4. (K <3), \ubd84\ud3ec\uac00 \uc815\uaddc \ubd84\ud3ec\ubcf4\ub2e4 \ub354 \ud3c9\ud0c4\ud558\uac8c \ud3c9\ud0c4\ud558\ub2e4\uace0 \ud310\ub2e8 \ud560 \uc218 \uc788\uc73c\uba70, \ucca8\ub3c4\uac00 3\ubcf4\ub2e4 \ud070 \uc591\uc218\uc778 \uacbd\uc6b0 (K> 3), \ubd84\ud3ec\uac00\ubcf4\ub2e4 \ubfb0\uc871\ud55c \ubd84\ud3ec\ub85c \uac04\uc8fc \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","1917efde":"### 4.2 LightGBM","908562b7":"view\uc758 \uc720\ub2c8\ud06c\uac2f\uc218\uac00 5\uc778\uac78\ub85c \ubcf4\ub2c8 grade\uac19\uc774 \uc21c\uc704\ud615\ubcc0\uc218\ub85c \uc0dd\uac01\ub418\uc5b4\uc9c0\uace0 waterfront\uc758 \uacbd\uc6b0\ub294 2\uac1c\ub85c \uc788\ub2e4\/\uc5c6\ub2e4\ub294 \uc0c1\uc9d5\ud558\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc704\uc5d0\uc11c \uba87\uba87 \uac12\ub4e4\uc744 \uc790\uc138\ud788 \uc0b4\ud3b4\ubcf4\uba74, ","6ca736e1":"### 2.2 \uc815\uaddc\ud654 \n\ucf54\ub4dc\ub294 \ub2e4\uc74c\uc758 \ub9c1\ud06c\ub97c \ud65c\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4. \nhttps:\/\/www.kaggle.com\/kcs93023\/2019-ml-month-2nd-baseline","bafc001f":"## 2019 2nd ML month with KaKR\n[TEAM - EDA] 2019-03-11 ~ \n- [updated] 3.12 \ub370\uc774\ud130\uc0c1\uc758 \uc911\ubcf5\uc774\uc288\uac00 \ubc1c\uc0dd\ud574\uc11c \uadf8 \ubd80\ubd84 \uc218\uc815\ud558\uace0 \ub2e4\uc2dc \ub3cc\ub9bd\ub2c8\ub2e4. \n- [updated] 4.03 \ub370\uc774\ud130\uac00 \ubc14\uaef4\uc11c \uae30\uc874\uacfc \uc124\uba85 \ub2ec\ub790\ub358 \ubd80\ubd84 \uc218\uc815 \n    - \ub370\uc774\ud130\uac00 \ubc14\uaef4\uc11c \uc124\uba85\ud558\uace0 \uc880 \ub2e4\ub978 \ubd80\ubd84 \uc218\uc815 + correlation \ucf54\ub4dc \uc218\uc815\n    - \ubcc0\uc218\uc5d0 \ub300\ud55c \ud0d0\uc0c9\uc744 \uc880 \ub354 \uc2ec\ud654 \n    - \uc120\ud615\ud68c\uadc0 \uac00\uc815 \ucd94\uac00 + \ub4b7 \ubd80\ubd84 \ubaa8\ub378\uc744 \ud574\uc11d\ub825 \uc788\ub294 DT\uc640 OLS\ub85c \uc218\uc815\n    - \ubcc0\uc218\ub4e4\ub07c\ub9ac\uc758 \uad00\uacc4 \ud30c\uc545 \n    - \ud53c\uccd0\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \ubd80\ubd84 \uc0c1\uc138\ud55c \uc124\uba85 \ucd94\uac00 \n- [updated] 4.09 \ub2e4\uc591\ud55c \ubaa8\ub378\uc744 \ucd94\uac00\ud558\uc5ec \uc131\ub2a5\uc744 \ub192\uc784 \n    - LGB \/ XGB \/ CAT with Log, not Log ","d6baf811":"#### 2.1.2 grade","d636f49a":"- date\uc758 \uacbd\uc6b0 yyyy-mm-dd + T000000\uc758 \ud615\ud0dc\ub85c \uc800\ud76c\uac00 \ud544\uc694\ud55c \ubd80\ubd84\uc740 \uc55e\uc758 8\uc790\ub9ac \uc785\ub2c8\ub2e4. \n- bathrooms\uc758 \uacbd\uc6b0 \uc18c\uc22b\uc810\uc758 \uac12\uc774 \ubcf4\uc774\ub294\ub370, \uc774\ub294 \ubbf8\uad6d\uc758 \uae30\uc900\uc5d0 \ub530\ub978 \uac83\uc785\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc544\ub798 \ubd80\ubd84\uc5d0 \ub098\uc635\ub2c8\ub2e4. \n- yr_renovated\uc758 \uacbd\uc6b0 0\uc758 \uac12\uc774 \ubcf4\uc774\ub294\ub370, 0\ub144\ub3c4\uc5d0 \uc7ac\uac74\ucd95\uc774 \ub418\uc5c8\ub2e4\ub294 \uc758\ubbf8\uac00 \uc544\ub2c8\ub77c \uc7ac\uac74\ucd95\uc744 \ud558\uc9c0 \uc54a\uc558\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \n- sqft_living \uacfc sqft_living15\ucc98\ub7fc \ube44\uc2b7\ud55c \uac12\uc774 \ubcf4\uc785\ub2c8\ub2e4. \ub458\uc740 15\ub144\ub3c4\ub97c \uae30\uc900\uc73c\ub85c \ud06c\uae30 \uacc4\uc0b0\uc758 \uae30\uc900\uc5d0 \ub530\ub77c \ub2e4\ub978 \uac12\uc744 \ubcf4\uc785\ub2c8\ub2e4. \ub458\uc758 \ucc28\uc774\uac00 \uaf64 \ud070 \ubd80\ubd84\ub3c4 \uc788\uc5b4\uc11c \uc774\ub97c \uc798 \ud65c\uc6a9\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \n\nhead\ub97c \ud1b5\ud574\uc11c\ub294 \uc774 \uc815\ub3c4\ub85c \uac00\ubccd\uac8c \ubcc0\uc218\ub97c \uc774\ud574\ud574\ubcf4\uace0 \ud558\ub098\ud558\ub098 \ubcc0\uc218\ub97c \uc0b4\ud3b4\ubcf4\uba74\uc11c \uc804\ucc98\ub9ac\ud574\uc57c \ud560 \ubd80\ubd84\uacfc \ud53c\uccd0 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\uc744 \ud560 \uc544\uc774\ub514\uc5b4\ub97c \uace0\ubbfc\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. ","c442c25e":"\uac00\uc7a5 \uc911\uc694\ud55c \ubcc0\uc218\uc778 grade, sqft_ \ubaa8\ub450 \ub0ae\uc740 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub450 \uac12 \ubaa8\ub450 \uc774\uc0c1\uce58\ub85c \uaddc\uc815\ud558\uace0 \uc81c\uac70\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. ","a2a59fa7":"\uc704\uc758 \uac12\uc744 \ubd24\uc744 \ub54c, \ub2e4\ub978\uac12\ub4e4\uc5d0 \ube44\ud574 sqft_living\ub9cc \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uaf64 \ud070 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucd94\uac00\uc801\uc73c\ub85c price\uc640 \uc0c1\uad00\uc131\uc774 \ub192\uc740 `grade`\uc640 \ub2e4\ub978 \ud3c9\uc218\ub4e4\uc744 \uc0b4\ud3b4\ubd10\ub3c4 \ud070 \uc758\ubbf8\ub294 \uc5c6\uc5b4\ubcf4\uc774\ubbc0\ub85c \uc81c\uac70\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. ","7b813c2f":"\ubcf4\ud1b5\uc758 \uacbd\uc6b0 10 \uc774\uc0c1\uc774\uba74 \ub2e4\uc911\uacf5\uc120\uc131\uc774 \uc874\uc7ac\ud55c\ub2e4\uace0 \ub9d0\ud558\ub294\ub370, \uc704\uc758 \uc2dd\uc5d0\uc11c\ub294 waterfront, view, sqft_lot15, is_renovated 4\uac00\uc9c0 \ubcc0\uc218\ub97c \uc81c\uc678\ud55c \ubaa8\ub4e0 \ubcc0\uc218\ub4e4\uc5d0\uc11c \ub2e4\uc911\uacf5\uc120\uc131\uc774 \uc874\uc7ac\ud558\ub294 \ubb38\uc81c\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \n\n\uc774\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud55c \ubc29\uc548\uc73c\ub85c\ub294 \n- \ub2e4\uc911\uacf5\uc120\uc131\uc5d0 robust\ud55c \ud2b8\ub9ac\ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\n- \ubcc0\uc218\uc81c\uac70 \ubc0f FE, \ubcc0\ud658\ub4f1\uc744 \ud1b5\ud55c \ub300\uccb4 \n- \uad00\uce21\uac12\uc744 \ub298\ub824 \ud45c\ubcf8\uc758 \ud06c\uae30\ub97c \uc99d\uac00 \n\n\ud558\uc9c0\ub9cc \ub9c8\uc9c0\ub9c9 3\uc758 \ubc29\uc548\uc740 \uc2e4\ud604\uc774 \ubd88\uac00\ub2a5\ud558\uace0 \uc120\ud615\ud68c\uadc0\ub97c \uc0ac\uc6a9\ud560\uac70\uba74 2\ub97c \ucd5c\ub300\ud55c \ud65c\uc6a9\ud558\uace0, \uadf8\ub807\uc9c0 \uc54a\uc744 \uacbd\uc6b0\uc5d0\ub294 1\ubc88 \ubc29\uc548\uc744 \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4. ","4f5d0a39":"sqft_living15\uc758 \uacbd\uc6b0 15\ub144\ub3c4\ub97c \uae30\uc900\uc73c\ub85c \ud588\ub2e4\ubcf4\ub2c8 sqft_living\uc5d0 \ube44\ud574 \uac00\uaca9\uc758 \ubd84\uc0b0\uc774 \ud07d\ub2c8\ub2e4. \uc544\ubb34\ub798\ub3c4 \uc7ac\uac74\ucd95\uc73c\ub85c \uc778\ud55c \uc601\ud5a5\uc77c \uac83\uc73c\ub85c \uc0dd\uac01\ub418\uc5b4\uc9c0\uace0 sqft_living15 \uadf8 \uc790\uccb4\ub97c \uc0ac\uc6a9\ud558\uae30\ubcf4\ub2e4\ub294 \uc801\uc808\ud55c FE\uc774 \ud544\uc694\ud574 \ubcf4\uc785\ub2c8\ub2e4. ","478f0b58":"\ubc29\uc758 \uacbd\uc6b0 median \uac12\uc744 \uc911\uc2ec\uc73c\ub85c \uc0b4\ud3b4\ubcf4\uba74 \uc5b4\ub290\uc815\ub3c4 \uc120\ud615\uad00\uacc4\ub97c \ub744\ub294\uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ubc29\uc758 \uac2f\uc218\uac00 2~6\uc758 \uacbd\uc6b0 \ubc29\uc774 \uc801\uc74c\uc5d0\ub3c4 \uac12\uc774 \ud070 \uac12\ub4e4\uc774 \ub9ce\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uc6b0\ub9ac\ub098\ub77c\uc758 \uacbd\uc6b0\ucc98\ub7fc \ubc29\uc758 \ud06c\uae30\ub294 \uc791\uc544\ub3c4 \uac15\ub0a8\ucc98\ub7fc \ube44\uc2fc \uc9c0\uc5ed\uc77c \uac00\ub2a5\uc131\uc774 \ub192\uc2b5\ub2c8\ub2e4.  ","f763e034":"#### 2.1.1 sqft_living","e8385711":"\uc804\ubc18\uc801\uc73c\ub85c \uc120\ud615\uc131\uc744 \ubcf4\uc774\uc9c0\ub9cc \uac00\uaca9\uc774 14~15\uc0ac\uc774\uc5d0 sqft_living\uc774 14000\uc5d0 \uac00\uae4c\uc6b4 \uac12\uc740 \uaf64\ub098 \uc774\uc0c1\ud55c \uac12(\uc774\uc0c1\uce58)\uc73c\ub85c \uc0dd\uac01\ub418\uc5b4\uc9d1\ub2c8\ub2e4. \uc81c\uac70\ud560\uc9c0 \ub9d0\uc9c0\ub294 \uc800 \uac12\uc744 \ud655\uc778\ud574\ubcf4\uace0 \uacb0\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. ","dc0e727d":"## \ubaa9\ucc28 \n### - \ub370\uc774\ud130 \ud0d0\uc0c9\n    - \ubb38\uc81c \uc815\uc758\n    - \ubcc0\uc218 \uc124\uba85\n    - \uc2dc\uac01\ud654 \n    - \uc774\uc0c1\uce58 \ubc0f \uacb0\uce21\uce58 \ud655\uc778\n    - \uc720\ub2c8\ud06c \uac2f\uc218\n### - \ub370\uc774\ud130 \uc804\ucc98\ub9ac\n    - \uc774\uc0c1\uce58 \ubc0f \uacb0\uce21\uce58 \ucc98\ub9ac\n    - \uc815\uaddc\ud654\n### - \ubcc0\uc218 \uc0dd\uc131\n### - \ubaa8\ub378\ub9c1 \n    - \ud68c\uadc0\n    - GBM ( LGB\/XGB )\n    - \uc559\uc0dd\ube14 \n### - \uc794\ucc28\ubd84\uc11d ","63853b94":"\ub2e4\ud589\ud788\ub3c4 \uc704\uc758 \uacb0\uce21\uce58 \uadf8\ub798\ud504\ub97c \ubcf4\uba74 \uacb0\uce21\uce58\uac00 \uc5c6\ub294 \uc0c1\ud669\uc785\ub2c8\ub2e4. ","ed9a7c44":"\uc2e4\uc81c y_reg\uc640 error\uc640\uc758 \uad00\uacc4\ub97c \ubcf4\uba74 \uc794\ucc28\uac00 \ub3c5\ub9bd\uc801\uc774\uc9c0 \uc54a\ub294\uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. 13~14\ubd80\uadfc\uc740 error\uac00 0\uc5d0 \uac00\uae5d\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc 15 \uc774\uc0c1\uc740 \ub354 \ub192\uac8c \uc608\uce21\uc744 \ud558\ub294 \uacbd\ud5a5\uc744 \ubcf4\uc774\uace0, 12\uc774\ud558\ub294 \ub354 \ub0ae\uac8c \uc608\uce21\ud558\ub294 \uacbd\ud5a5\uc744 \ubcf4\uc785\ub2c8\ub2e4. \n\n\uc774\ub97c \uac1c\uc120\ud558\uae30 \uc704\ud574\uc11c\ub294 \n- 15\uc774\uc0c1\uc5d0\uc11c \ud06c\uac8c \uc608\uce21\ud55c \uc774\uc720\n- 12\uc774\ud558\uc5d0\uc11c \uc791\uac8c \uc608\uce21\ud558\ub294 \uc774\uc720 \n- error\uac00 0.5 \uc774\uc0c1\uc778 \uac12\ub4e4\uc758 \uc774\uc720 \n\n3\uac00\uc9c0 \uad00\uc810\uc5d0\uc11c \uc811\uadfc\uc744 \ud574\uc57c \ud569\ub2c8\ub2e4. ","eb0ea088":"### 1.2 \ubcc0\uc218\uc124\uba85\n\ubcc0\uc218 \uc124\uba85\uc740 \uc0c1\ud601\ub2d8\uc758 \ucee4\ub110\uc744 \ucc38\uace0\ud558\uc600\uc2b5\ub2c8\ub2e4  : https:\/\/www.kaggle.com\/cookierhkwk\/eda-house-price-prediction\n- ID : \uc9d1\uc744 \uad6c\ubd84\ud558\ub294 \ubc88\ud638\n- date : \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uc9dc\n- price : \uc9d1\uc758 \uac00\uaca9(Target variable)\n- bedrooms : \uce68\uc2e4\uc758 \uc218\n- bathrooms : \ud654\uc7a5\uc2e4\uc758 \uc218\n- sqft_living : \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n- sqft_lot : \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n- floors : \uc9d1\uc758 \uce35 \uc218\n- waterfront : \uc9d1\uc758 \uc804\ubc29\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc720\ubb34 (a.k.a. \ub9ac\ubc84\ubdf0)\n- view : Has been viewed\n- condition : \uc9d1\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc\n- grade : King County grading \uc2dc\uc2a4\ud15c \uae30\uc900\uc73c\ub85c \ub9e4\uae34 \uc9d1\uc758 \ub4f1\uae09\n- sqft_above : \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n- sqft_basement : \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n- yr_built : \uc9c0\uc5b4\uc9c4 \ub144\ub3c4\n- yr_renovated : \uc9d1\uc744 \uc7ac\uac74\ucd95\ud55c \ub144\ub3c4\n- zipcode : \uc6b0\ud3b8\ubc88\ud638\n- lat : \uc704\ub3c4\n- long : \uacbd\ub3c4\n- sqft_living15 : 2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n- sqft_lot15 : 2015\ub144 \uae30\uc900 \uc8fc\ucc28 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788","8e02d8b5":"## 2. \ub370\uc774\ud130 \uc804\ucc98\ub9ac \n### 2.1 \uc774\uc0c1\uce58 \uc81c\uac70 \n\uc704\uc5d0\uc11c \uc911\uc694\ud55c \ubcc0\uc218\ub4e4\uc5d0 \ub300\ud574 \uc2dc\uac01\ud654\ub97c \ud574\ubd24\uc744\ub54c, \ub2e4\uc74c\uc758 \ubcc0\uc218\ub4e4\uc5d0 \ub300\ud574 \uc774\uc0c1\uce58\uac00 \uc788\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \n- sqft_living, grade, bedrooms ","5e2d1fdb":"### 1.5 \uc720\ub2c8\ud06c\ud55c \uac2f\uc218","0ff1a130":"### 1.4 \uacb0\uce21\uce58 ","a81ba9c4":"log\ub97c \ucde8\ud574\uc8fc\uba74 \uae30\uc874\ubcf4\ub2e4 \ub354 \uc815\uaddc\uc131\uc744 \uac00\uc9c0\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","11cb244b":"\uc544\ub798\ub294 \uc9d1\uac12 \uac19\uc740 \uacbd\uc6b0\ub294 \ube44\uc2b7\ud55c \uc9c0\uc5ed\uc5d0 \uc601\ud5a5\uc744 \ubc1b\uc544\uc11c \uadf8\uac83\uc744 \ucf54\ub4dc\ub85c \uad6c\ud604\ud55c \uac83 \uc785\ub2c8\ub2e4. \uc8fc\uc758\ud574\uc57c \ud560 \uc810\uc740 \ub2e8\uc21c \uc9d1\uac12\uc774 \uc544\ub2c8\ub77c \ud3c9\ub2f9 \uac00\uaca9\uc744 \uc368\uc57c \ud55c\ub2e4\ub294 \uc810 \uc785\ub2c8\ub2e4 !!!","db8a14e6":"## 4. \ubaa8\ub378\ub9c1\n### 4.1 \ub2e8\uc21c \uc120\ud615\ud68c\uadc0 ","0353220b":"\ubaa9\uc801\ubcc0\uc218\uc758 \uacbd\uc6b0 min\uacfc max\uc758 \ucc28\uc774\uac00 \ud06c\uace0, std\uac00 \uad49\uc7a5\ud788 \ud070 \ud3b8\uc785\ub2c8\ub2e4. \uc544\ub798\uc758 \uadf8\ub9bc\uc744 \ubcf4\uba74 \ub354 \uba85\ud655\ud558\uaca0\uc9c0\ub9cc \uc67c\ucabd\uc73c\ub85c \ubd84\ud3ec\uac00 \uad49\uc7a5\ud788 \uce58\uc6b0\uce5c \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","cf3bb117":"bathrooms\uac19\uc740\uacbd\uc6b0 \uc18c\uc22b\uc810\uc774 \uc788\uc5b4\uc11c \ub9ce\uc774 \ud5f7\uac08\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac01\uac01\uc758 \uac12\uc774 \uc758\ubbf8\ud558\ub294\uac83\uc740 \uc544\ub798\uc640 \uac19\uace0 \uc704\uc758 \uac12\ub9cc\uc744 \uac00\uc9c0\uace0 \uac01\uac01\uc758 \uac12\uc774 \uba87\uac1c\uc788\ub294\uc9c0\ub294 \uad6c\ubd84\ud558\uae30 \ud798\ub4e4\uc5b4 \ubcf4\uc785\ub2c8\ub2e4. \n- 0.5 : \uc138\uba74\ub300, \ud654\uc7a5\uc2e4 \n- 0.75 : \uc138\uba74\ub300, \ud654\uc7a5\uc2e4, \uc0e4\uc6cc\uc2e4\n- 1 : \uc138\uba74\ub300, \ud654\uc7a5\uc2e4, \uc0e4\uc6cc\uc2e4, \uc695\uc870 ","55dac13b":"\uce35\uc218\uc758 \uacbd\uc6b0 1.5, 2.5, 3.5\uc640 \uac19\uc774 \uc18c\uc22b\uc810\uc744 \uac00\uc9d1\ub2c8\ub2e4. \uc774\ub294 \ubbf8\uad6d\uc5d0\uc11c \ud754\ud788 \ubcfc \uc218 \uc788\ub294 \ud615\ud0dc\ub85c \ub2e4\ub77d\ubc29\uc744 \ub07c\uace0 \uc788\ub294 \ud615\ud0dc\ub85c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4. ","ca275629":"\ud6c8\ub828\uacfc \ud3c9\uac00 \ub370\uc774\ud130\uc758 \ud06c\uae30\ub294 15000\uacfc 6500\uc73c\ub85c \uc801\uc740\ud3b8\uc774\uace0 \ube44\uc728\uc740 5:2 \ub85c \uc2ec\ud558\uac8c \ubd88\uade0\ub4f1\ud558\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \ubcc0\uc218\uc758 \uac2f\uc218\uac00 20\uac1c\ub85c \uc801\uc740\ud3b8\uc774\uc11c \uc88b\uc740 \ud53c\uccd0\ub97c \ub9cc\ub4e4\uc5b4 \ub0b4\ub294\uac83\uc774 \ubaa8\ub378\uc131\ub2a5\uc5d0 \uad00\uac74\uc73c\ub85c \uc0dd\uac01\ub429\ub2c8\ub2e4. ","a95b16b7":"\uc704\uc758 \ubaa9\uc801\ubcc0\uc218\uc758 \uacbd\uc6b0 \ucca8\ub3c4, \uc65c\ub3c4\ub3c4 \uad49\uc7a5\ud788 \uc815\uaddc\ubd84\ud3ec\ub97c \ub530\ub974\uc9c0\uc54a\uace0, \ubd84\uc0b0 \ub610\ud55c \ub9e4\uc6b0 \ud070 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc800\ub294 \ud68c\uadc0\ubaa8\ub378\uc744 \uc0ac\uc6a9\ud560 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 Normalize\ub97c \ud1b5\ud574 price\uc758 \ubd84\ud3ec\uac00 \uc815\uaddc\ubd84\ud3ec\ub97c \uac00\uc9c0\ub3c4\ub85d \ub9cc\ub4e4\uc5b4 \uc8fc\uaca0\uc2b5\ub2c8\ub2e4. "}}