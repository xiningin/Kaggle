{"cell_type":{"533c054c":"code","ff6dd8ba":"code","36078cfb":"code","fb5650e9":"code","1bb22b3d":"code","7742e7ba":"code","46889218":"code","3127b6e4":"code","88fc472f":"code","6799f450":"code","1952f71e":"code","a9be51e6":"code","46be8ce1":"code","f9c9aff4":"code","3a0d8459":"code","357bca28":"code","48a5621b":"code","abb247ed":"code","e54e9d5d":"code","50ea488b":"code","3789664a":"code","cd3dc7ea":"code","9ab2aa5e":"code","b0d111e5":"code","ea94ba66":"markdown","67412acb":"markdown","b6e01dfd":"markdown","85659b00":"markdown","5cf3660e":"markdown","e4d71186":"markdown","3f2a7384":"markdown","01dd4e08":"markdown","2d8010c4":"markdown","843b71c7":"markdown","cb2c8226":"markdown","1d766fd6":"markdown","eeac2d30":"markdown","8cea09d1":"markdown","461e4027":"markdown","effee8ec":"markdown","e690f442":"markdown","04eb25a8":"markdown","7d2c1adf":"markdown"},"source":{"533c054c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ff6dd8ba":"from scipy.io import loadmat\n\n#mat_contents = loadmat('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/test\/B07957.mat')\nmat_contents = loadmat('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/af\/B00210.mat')\n#mat_contents = loadmat('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/normal\/B00019.mat')\nmat_contents","36078cfb":"mat_contents.keys()","fb5650e9":"mat_contents['val']","1bb22b3d":"\nmat_contents['val'][0]","7742e7ba":"import matplotlib.pyplot as plt\n\ny = mat_contents['val'][0]\nlength = len(y)\nx = np.linspace(0, length, length)\n\nplt.style.use('ggplot')\nplt.figure()\nplt.plot(x, y)\nplt.show()","46889218":"import matplotlib.pyplot as plt\n\ny = mat_contents['val'][0]\nlength = len(y)\nx = np.linspace(0, length, length)\n\nplt.style.use('ggplot')\nplt.figure()\nplt.plot(x, y)\nplt.show()","3127b6e4":"from glob import glob\nimport statistics\n\nidx_ = []  # index\nlen_ = []  # length\nmean_ = []  # mean\nstd_ = []  # standard deviation\nste_ = []  # standard error\nmax_ = []  # maximum value\nmin_ = []  # minimum value\nrange_ = [] # maximum - minimum\nmedian_ = []\ny_ = []\nfor d in ['normal', 'af']:\n    for path in sorted(glob('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/' + d +'\/*.mat')):\n        filename = path.split('\/')[-1]  # e.g. B05821.mat\n        i = filename.split('.')[0]  # e.g. B05821\n        idx_.append(i)\n        mat_contents = loadmat(path)\n        x = mat_contents['val'][0]\n        len_.append(len(x))\n        mean_.append(x.mean())\n        std_.append(x.std())\n        ste_.append(x.std()\/np.sqrt(len(x)))\n        max_.append(x.max())\n        min_.append(x.min())\n        range_.append(x.max()-x.min())\n        median_.append(statistics.median(x))\n        if d == 'normal':\n            y_.append(0)\n        else:\n            y_.append(1)","88fc472f":"train_df = pd.DataFrame(index=idx_, columns=['length', 'mean', 'standard deviation', 'standard error', 'maximum value', 'minimum value','range','median', 'y'])\ntrain_df['length'] = len_\ntrain_df['mean'] = mean_\ntrain_df['standard deviation'] = std_\ntrain_df['standard error'] = ste_\ntrain_df['maximum value'] = max_\ntrain_df['minimum value'] = min_\ntrain_df['range'] = range_\ntrain_df['median'] = median_\ntrain_df['y'] = y_\ntrain_df","6799f450":"from glob import glob\n\nidx_ = []  # index\nlen_ = []  # length\nmean_ = []  # mean\nstd_ = []  # standard deviation\nste_ = []  # standard error\nmax_ = []  # maximum value\nmin_ = []  # minimum value\nrange_ = [] # maximum - minimum\nmedian_ = []\nfor path in sorted(glob('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/test\/*.mat')):\n    filename = path.split('\/')[-1]  # e.g. B05821.mat\n    i = filename.split('.')[0]  # e.g. B05821\n    idx_.append(i)\n    mat_contents = loadmat(path)\n    x = mat_contents['val'][0]\n    len_.append(len(x))\n    mean_.append(x.mean())\n    std_.append(x.std())\n    ste_.append(x.std()\/np.sqrt(len(x)))\n    max_.append(x.max())\n    min_.append(x.min())\n    range_.append(x.max()-x.min())\n    median_.append(statistics.median(x))\n","1952f71e":"test_df = pd.DataFrame(index=idx_, columns=['length', 'mean', 'standard deviation', 'standard error', 'maximum value', 'minimum value', 'range', 'median'])\ntest_df['length'] = len_\ntest_df['mean'] = mean_\ntest_df['standard deviation'] = std_\ntest_df['standard error'] = ste_\ntest_df['maximum value'] = max_\ntest_df['minimum value'] = min_\ntest_df['range'] = range_\ntest_df['median'] = median_\ntest_df","a9be51e6":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('ggplot')\nplt.figure()\nsns.pairplot(train_df)\nplt.show()","46be8ce1":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\ncorr = train_df.corr()\n\nplt.style.use('ggplot')\nplt.figure()\nsns.heatmap(corr, square=True, annot=True)\nplt.show()","f9c9aff4":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\nX = train_df.drop('y', axis=1).to_numpy()\ny = train_df['y'].to_numpy()\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=0)\n\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)","3a0d8459":"p_train = model.predict_proba(X_valid)\np_train","357bca28":"from sklearn.metrics import roc_curve, auc\n\ny_pred = model.predict_proba(X_valid)[:,1]\nfpr, tpr, thresholds = roc_curve(y_valid, y_pred)\nauc(fpr, tpr)","48a5621b":"import optuna\ndef objective(trial):\n    criterion = trial.suggest_categorical('criterion', ['gini', 'entropy'])\n    max_depth = trial.suggest_int('max_depth', 1, 10)\n    n_estimators = trial.suggest_int('n_estimators',10,300)\n    model = RandomForestClassifier(criterion=criterion, max_depth=max_depth, n_estimators=n_estimators, random_state=0,n_jobs=-1)\n    model.fit(X_train, y_train)\n    y_pred = model.predict_proba(X_valid)[:,1]  # \u4e88\u6e2c\n    fpr, tpr, thresholds = roc_curve(y_valid, y_pred)  # ROC\u66f2\u7dda\u3092\u6c42\u3081\u308b\n    return (-auc(fpr, tpr))  # \u8a55\u4fa1\n\nstudy = optuna.create_study()\nstudy.optimize(objective, n_trials=100)\nstudy.best_params","abb247ed":"criterion=study.best_params['criterion']\nmax_depth=study.best_params['max_depth']\nn_estimators=study.best_params['n_estimators']\nmodel = RandomForestClassifier(criterion=criterion, max_depth=max_depth, n_estimators=n_estimators, random_state=0,n_jobs=-1)\nmodel.fit(X_train, y_train)\ny_pred = model.predict_proba(X_valid)[:,1]\nfpr, tpr, thresholds = roc_curve(y_valid, y_pred)\nauc(fpr, tpr)","e54e9d5d":"from imblearn.over_sampling import SMOTE\n\nsmote = SMOTE()\nX_res, y_res = smote.fit_sample(X, y)","50ea488b":"X_train, X_valid, y_train, y_valid = train_test_split(X_res, y_res, test_size=0.2, random_state=0)\n\nmodel = RandomForestClassifier(criterion=criterion, max_depth=max_depth, n_estimators=n_estimators, random_state=0,n_jobs=-1)\nmodel.fit(X_train, y_train)\ny_pred = model.predict_proba(X_valid)[:,1]\nfpr, tpr, thresholds = roc_curve(y_valid, y_pred)\nauc(fpr, tpr)","3789664a":"y_train","cd3dc7ea":"X_test = test_df.to_numpy()\n\np_test = model.predict_proba(X_test)\np_test","9ab2aa5e":"submit_df = pd.read_csv('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/sampleSubmission.csv', index_col=0)\nsubmit_df['af'] = p_test[:,1]\nsubmit_df","b0d111e5":"submit_df.to_csv('submission.csv')","ea94ba66":"# Making a submission file","67412acb":"## Correlation heatmap","b6e01dfd":"## Test data","85659b00":"## Answers","5cf3660e":"# Loading a data in Matlab format","e4d71186":"## Raw\nTo load Matlab format, you can use `scipy.io.loadmat()`.\nIt returns a dictionary.\n\nSee also [scipy.io.loadmat](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.io.loadmat.html) in the SciPy Reference Guide.","3f2a7384":"## NumPy ndarray","01dd4e08":"## Training data","2d8010c4":"## Scatterplot matrix","843b71c7":"## Visualizing","cb2c8226":"# Random Forest","1d766fd6":"## Test data","eeac2d30":"# Visualization","8cea09d1":"# Predicting","461e4027":"## Traning data","effee8ec":"# DataFrame","e690f442":"## Values","04eb25a8":"# Tuning","7d2c1adf":"## Structure"}}