{"cell_type":{"378ba980":"code","f8f9b847":"code","6cf1d0d2":"code","e65c2615":"code","80a7ac72":"code","907b35b4":"code","4bc67cc5":"code","824d6f20":"code","a6ec79be":"code","cfdf1dde":"code","ba19602a":"code","e3078fcc":"code","f206cb66":"code","1767d364":"code","d4a295ff":"code","1978668c":"code","17f2c876":"code","d720bf81":"code","2d679850":"code","96b31029":"markdown"},"source":{"378ba980":"import torch\nimport torch.optim as optim\nimport numpy as np\nimport torch.nn as nn\nimport pandas as pd\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split","f8f9b847":"if torch.cuda.is_available() is True:\n  device = torch.device('cuda')\nelse:\n  device = torch.device('cpu')","6cf1d0d2":"data = pd.read_csv('18011862Aitrain.csv')\npd_test = pd.read_csv('alltestdata.csv')","e65c2615":"x_train = np.array(x_train)\ny_train = np.array(y_train)\nx_test = np.array(x_test)\nprint(x_train.shape)\nprint(x_test.shape)","80a7ac72":"data.replace('\ubd88\uba85',np.NAN, inplace=True)\ndata.dropna(inplace=True)\n\n##\uacbd\ucc30\uc11c \ucc98\ub9ac\ndata['\uad00\ud560\uacbd\ucc30\uc11c'][data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc11c\uc6b8')] = '0'\ndata['\uad00\ud560\uacbd\ucc30\uc11c'][data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc778\ucc9c')] = '2'\ndata['\uad00\ud560\uacbd\ucc30\uc11c'][data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc218\uc6d0')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc77c\uc0b0')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc131\ub0a8')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc6a9\uc778')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc548\uc591')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc548\uc0b0')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uacfc\ucc9c')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uad11\uba85')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uad70\ud3ec')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\ubd80\ucc9c')|\n                   data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc2dc\ud765')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uae40\ud3ec')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc548\uc131')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc624\uc0b0')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc758\uc655')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc774\ucc9c')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\ud3c9\ud0dd')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\ud558\ub0a8')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\ud654\uc131')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc5ec\uc8fc')|\n                   data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc591\ud3c9')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uace0\uc591')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uad6c\ub9ac')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\ub0a8\uc591\uc8fc')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\ub3d9\ub450\ucc9c')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc591\uc8fc')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc758\uc815\ubd80')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\ud30c\uc8fc')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\ud3ec\ucc9c')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uc5f0\ucc9c')|\n                   data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\uac00\ud3c9')|data.\uad00\ud560\uacbd\ucc30\uc11c.str.contains('\ubd84\ub2f9')] = '1'\n\nlabel1 = data['\uad00\ud560\uacbd\ucc30\uc11c'] == '0'\nlabel2 = data['\uad00\ud560\uacbd\ucc30\uc11c'] == '1'\nlabel3 = data['\uad00\ud560\uacbd\ucc30\uc11c'] == '2'\n\npd_train = data[label1| label2| label3]\npd_train['\uad00\ud560\uacbd\ucc30\uc11c'] = pd_train['\uad00\ud560\uacbd\ucc30\uc11c'].astype(int)\n\n##\uc131\ubcc4 \ucc98\ub9ac\nreplace_values = {'\ub0a8\uc790' : 1,'\uc5ec\uc790' : 2}\npd_train = pd_train.replace({\"\uc131\ubcc4\": replace_values})\npd_test = pd_test.replace({\"\uc131\ubcc4\" : replace_values})\n\npd_train = pd_train.iloc[:,1:]","907b35b4":"##\uc2dc\uac04 \ucc98\ub9ac_train\n\npd_train['\uce21\uc815\uc77c\uc2dc'] = pd.to_datetime(pd_train['\uce21\uc815\uc77c\uc2dc'], format = '%Y-%m-%d %H:%M',errors = 'raise')\n\npd_train['\uce21\uc815\uc694\uc77c'] = pd_train['\uce21\uc815\uc77c\uc2dc'].dt.weekday\npd_train['\uce21\uc815\uc2dc\uac01'] = pd_train['\uce21\uc815\uc77c\uc2dc'].dt.hour\n\npd_train = pd_train[['\uc131\ubcc4','\uc801\ubc1c\ud69f\uc218','\uce21\uc815\uc694\uc77c','\uce21\uc815\uc2dc\uac01','\uad00\ud560\uacbd\ucc30\uc11c','\ub098\uc774']]\n\n\n##\uc2dc\uac04 \ucc98\ub9ac_test\npd_test['\uce21\uc815\uc77c\uc2dc'] = pd.to_datetime(pd_test['\uce21\uc815\uc77c\uc2dc'], format = '%Y-%m-%d %H:%M',errors = 'raise')\n\npd_test['\uce21\uc815\uc694\uc77c'] = pd_test['\uce21\uc815\uc77c\uc2dc'].dt.weekday\npd_test['\uce21\uc815\uc2dc\uac01'] = pd_test['\uce21\uc815\uc77c\uc2dc'].dt.hour\n\npd_test = pd_test[['\uc131\ubcc4','\uc801\ubc1c\ud69f\uc218','\uce21\uc815\uc694\uc77c','\uce21\uc815\uc2dc\uac01','\uad00\ud560\uacbd\ucc30\uc11c']]","4bc67cc5":"pd_y = pd_train['\ub098\uc774'].astype(int)\npd_x = pd_train.iloc[:,:-1]\n\n\npd_y[pd_y<40] = 0\npd_y[pd_y>=40] = 1\n\npd_y.sum()","824d6f20":"x_train = torch.FloatTensor(np.array(pd_x)).to(device)\ny_train = torch.FloatTensor(np.array(pd_y).reshape(-1,1)).to(device)\n\nx_test = torch.FloatTensor(np.array(pd_test)).to(device)\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)","a6ec79be":"y_train.shape","cfdf1dde":"torch.manual_seed(1)\ntorch.cuda.manual_seed_all(1)\n\n\nX_train, X_valid, Y_train, Y_valid = train_test_split(x_train, y_train, test_size = 0.1, random_state = 100)\nprint(X_train.shape)\nprint(X_valid.shape)\nprint(Y_train.shape)\nprint(Y_valid.shape)","ba19602a":"Y_train.shape","e3078fcc":"lr = 1e-3\nbatch_size = 200\nEpochs = 100","f206cb66":"d = torch.utils.data.TensorDataset(X_train, Y_train)\ndata_loader = torch.utils.data.DataLoader(dataset = d,\n                                          batch_size=batch_size,\n                                          shuffle = True,\n                                          drop_last=True)","1767d364":"torch.manual_seed(1)\ntorch.cuda.manual_seed_all(1)\n\nlinear1 = nn.Linear(5,256,bias=True)\nlinear2 = nn.Linear(256, 128, bias=True)\nlinear3 = nn.Linear(128, 1, bias=True)\n\nrelu = nn.ReLU()\n\nmodel = nn.Sequential(linear1, relu, linear2, relu, linear3).to(device)\n\nfor layer in model.children():\n  if isinstance(layer, nn.Linear):\n    nn.init.xavier_uniform_(layer.weight)\n\nloss = nn.BCELoss().to(device)\noptimizer = optim.Adam(model.parameters(), lr = lr)","d4a295ff":"total_batch = len(data_loader);\nbest_acc = 0\naccuracy = 0\n\nfor epoch in range(Epochs+1):\n  model.train()\n  avg_cost = 0;\n\n  for X, Y in data_loader:\n    X = X.view(-1,5)\n    optimizer.zero_grad()\n    H = torch.sigmoid(model(X))\n    cost=(loss(H,Y))\n    cost.backward()\n    optimizer.step()\n\n    avg_cost += cost \/ total_batch\n    # scheduler.step(cost)\n  with torch.no_grad():\n    model.eval()\n    # import pdb;pdb.set_trace()\n\n    valid = torch.sigmoid(model(X_valid))\n    valid[valid<0.5] = 0\n    valid[valid>=0.5] = 1\n    \n    accuracy = accuracy_score(Y_valid.to('cpu'), valid.to('cpu').detach().numpy())*100\n\n    if best_acc < accuracy :\n      best_acc = accuracy\n      print(\"save bestmodel, epoch: {:4d}\".format(epoch))\n      torch.save(model, '.\/best_model.ptr')\n\n  print(\"Epoch{:4d}\/{}, cost : {:.06f}, accuracy : {:.06f}\".format(epoch,\n                                              Epochs,\n                                              avg_cost,\n                                              accuracy))\n  \nprint('finish')","1978668c":"model = torch.load(\".\/best_model.ptr\")","17f2c876":"with torch.no_grad():\n  \n  model.eval()\n  predict = torch.sigmoid(model(x_test))\npredict[predict>=0.5] = 1\npredict[predict<0.5] = 0\npredict.sum()","d720bf81":"label = predict.to('cpu').detach().numpy()\nId = np.array([int(i) for i in range(len(predict))]).reshape(-1,1)\n\nresult = np.hstack((Id, label))\nresult","2d679850":"df = pd.DataFrame(result, columns=(['ID','Label']))\ndf['ID'] = df['ID'].astype(int)\ndf.to_csv(\"submission.csv\",index=False, header=True)","96b31029":"## 2\ubc88\uc9f8 \ubca0\uc774\uc2a4\ub77c\uc778 \ucf54\ub4dc\uc640 \ucc28\ubcc4\uc810\n-\ubc30\uce58\uc0ac\uc774\uc988"}}