{"cell_type":{"2e9d53c6":"code","22726899":"code","c167bd25":"code","3a9f82a4":"code","a3d24ee0":"code","d4253ccc":"code","285d2ec5":"code","ca67fd7f":"code","e822dd80":"code","59e68438":"code","c593e9de":"code","9f89fa6a":"code","ec0b4acb":"code","5aede775":"code","f636d853":"code","3c9598c1":"code","e3bf4908":"code","67bd49bc":"code","0ee2461f":"code","63888b01":"code","aec67b50":"markdown","84860be2":"markdown","2f3448b9":"markdown","98b7ff12":"markdown","4c2ddf56":"markdown","0ec52919":"markdown","b572a9b7":"markdown","953b01af":"markdown","b0948fd5":"markdown","fc7f4ccc":"markdown"},"source":{"2e9d53c6":"import tensorflow as tf\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom tensorflow.keras import utils\nfrom tensorflow.keras.datasets import mnist\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, BatchNormalization\nfrom keras.callbacks import ModelCheckpoint   \nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping\n\nfrom tensorflow.keras.metrics import Precision, TruePositives, TrueNegatives, Recall\n\nprint(\"Tensorflow version \" + tf.__version__)","22726899":"!pip install -q efficientnet\n\nimport efficientnet.tfkeras as efn","c167bd25":"tpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect()\ntpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    tpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    tpu_strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", tpu_strategy.num_replicas_in_sync)","3a9f82a4":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntrain.head()","a3d24ee0":"Y_train = train['label'].values.astype('float32')\nY_train = tf.keras.utils.to_categorical(Y_train, 10)","d4253ccc":"X_train = train.drop(labels=['label'], axis=1)","285d2ec5":"X_train = X_train.astype('float32')\nX_train = X_train \/ 255","ca67fd7f":"X_train = X_train.values.reshape(42000,28,28,1)","e822dd80":"plt.imshow(X_train[1][:,:,0])\n","59e68438":"X_train = np.pad(X_train, ((0,0), (2,2), (2,2), (0,0)), mode='constant')","c593e9de":"X_train = np.squeeze(X_train, axis=-1)\nX_train = stacked_img = np.stack((X_train,)*3, axis=-1)","9f89fa6a":"plt.imshow(X_train[1][:,:,0])","ec0b4acb":"def create_model():\n    enet = efn.EfficientNetB3(\n    input_shape=(32, 32, 3),\n    weights='imagenet',\n    include_top=False,\n    )        \n    \n    model = tf.keras.Sequential([\n        enet,\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(1024, activation=\"relu\"),\n        tf.keras.layers.Dropout(0.5),\n        tf.keras.layers.Dense(10, activation='softmax')\n    ])\n    \n    return model","5aede775":"with tpu_strategy.scope():\n  model = create_model()\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","f636d853":"%%time\n\nmodel.fit(\n    X_train, Y_train,\n    epochs=10,\n    batch_size = 210,\n    shuffle=True,\n    verbose = 1\n)","3c9598c1":"test = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntest.head()","e3bf4908":"test = test.astype('float32')\ntest = test \/ 255\ntest = test.values.reshape(len(test),28,28,1)\ntest = np.pad(test, ((0,0), (2,2), (2,2), (0,0)), mode='constant')\ntest = np.squeeze(test, axis=-1)\ntest = stacked_img = np.stack((test,)*3, axis=-1)","67bd49bc":"%%time\n\ntest_predictions = model.predict(test)","0ee2461f":"results = np.argmax(test_predictions,axis = 1)\nresults = pd.Series(results,name=\"Label\")","63888b01":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"submission.csv\",index=False)\n\nsubmission.head()","aec67b50":"<h1 style=\"background:#FCE4EC; text-align:center; color:#212121;height:75px;line-height: 75px\">Prediction<\/h1>","84860be2":"<h1 style=\"background:#FCE4EC; text-align:center; color:#212121;height:75px;line-height: 75px\">Load train data<h1>","2f3448b9":"<h1 style=\"background:#FCE4EC; text-align:center; color:#212121;height:75px;line-height: 75px\">Train<h1>","98b7ff12":"<h1 style=\"background:#FCE4EC; text-align:center; color:#212121;height:75px;line-height: 75px\">Show example image<h1>","4c2ddf56":"<h1 style=\"background:#FCE4EC; text-align:center; color:#212121;height:75px;line-height: 75px\">Import the Necessary Packages<h1>","0ec52919":"<h1 style=\"background:#FCE4EC; text-align:center; color:#212121;height:75px;line-height: 75px\">Enable TPU<h1>","b572a9b7":"<h1 style=\"background:#FCE4EC; text-align:center; color:#212121;height:75px;line-height: 75px\">Load test data<h1>","953b01af":"<h1 style=\"background:#FCE4EC; text-align:center; color:#212121;height:75px;line-height: 75px\">Normalize data<h1>","b0948fd5":"<h1 style=\"background:#FCE4EC; text-align:center; color:#212121;height:75px;line-height: 75px\">Model<h1>","fc7f4ccc":"<h1 style=\"background:#FCE4EC; text-align:center; color:#212121;height:75px;line-height: 75px\">Reshape data<h1>"}}