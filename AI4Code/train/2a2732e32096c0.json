{"cell_type":{"55e0d18c":"code","3a9d35ba":"code","6d7e8ee7":"code","7133390b":"code","41f535d5":"code","6a275c32":"code","e1d37cc9":"code","2fcd9745":"code","b85c7fdf":"code","b5ed11eb":"code","357cd4dc":"code","1ed6121a":"code","6f91f36f":"code","c0bfbb3c":"code","9db7f0f9":"code","eea447dc":"code","cbea86a5":"code","4178f1e0":"code","83d7a547":"markdown","6560ef23":"markdown","9d5053f0":"markdown","7eaf7e40":"markdown","53b50a6d":"markdown","c4974dc8":"markdown","834899c4":"markdown","829510d3":"markdown","4c4aa754":"markdown"},"source":{"55e0d18c":"%magic","3a9d35ba":"!echo \"print('hello world!')\" > hello_world.py","6d7e8ee7":"%run hello_world.py","7133390b":"%timeit L = [n ** 2 for n in range(1000)]","41f535d5":"%%timeit\nL = []\nfor n in range(1000):\n    L.append(n ** 2)","6a275c32":"%timeit?","e1d37cc9":"%lsmagic","2fcd9745":"import math","b85c7fdf":"math.sin(2)","b5ed11eb":"math.cos(20)","357cd4dc":"print(In), print(Out)","1ed6121a":"print(_), print(__)","6f91f36f":"# Supressing the output\nmath.sin(20);","c0bfbb3c":"# Printing the history \n\n%history -n 1-5","9db7f0f9":"!ls","eea447dc":"!pwd","cbea86a5":"content = !ls\nprint(content)","4178f1e0":"message = \"hello from shell\"\n!echo {message}","83d7a547":"### Magic commands\n\n1. **%run**\nAs you begin developing more extensive code, you will likely find yourself working in both IPython for interactive exploration, as well as a text editor to store code that you want to reuse. Rather than running this code in a new window, it can be convenient to run it within your IPython session. This can be done with the %run magic.","6560ef23":"Shell commands can not only be called from IPython, but can also be made to interact with the IPython namespace. For example, you can save the output of any shell command to a Python list using the assignment operator:","9d5053f0":"### Using Shell commands in Ipython\n\nA full intro to using the shell\/terminal\/command-line is well beyond the scope of this chapter, but for the uninitiated we will offer a quick introduction here. The shell is a way to interact textually with your computer. Ever since the mid 1980s, when Microsoft and Apple introduced the first versions of their now ubiquitous graphical operating systems, most computer users have interacted with their operating system through familiar clicking of menus and drag-and-drop movements. But operating systems existed long before these graphical user interfaces, and were primarily controlled through sequences of text input: at the prompt, the user would type a command, and the computer would do what the user told it to. Those early prompt systems are the precursors of the shells and terminals that most active data scientists still use today.\n\nAs an example, here is a sample of a Linux\/OSX shell session where a user explores, creates, and modifies directories and files on their system (osx:~ \\\\$ is the prompt, and everything after the \\$ sign is the typed command; text that is preceded by a # is meant just as description, rather than something you would actually type in):","7eaf7e40":"The benefit of %timeit is that for short commands it will automatically perform multiple runs in order to attain more robust results.\nFor multi line statements, adding a second % sign will turn this into a cell magic that can handle multiple lines of input. For example, here's the equivalent construction with a for-loop:","53b50a6d":"# Introduction to IPython\n\n> Originally taken from: https:\/\/jakevdp.github.io\/PythonDataScienceHandbook\/01.00-ipython-beyond-normal-python.html\n\nThere are many options for development environments for Python, and I'm often asked which one I use in my own work. My answer sometimes surprises people: my preferred environment is [IPython](http:\/\/ipython.org\/) plus a text editor (in my case, Emacs or Atom depending on my mood). [IPython](http:\/\/ipython.org\/) (short for Interactive Python) was started in 2001 by Fernando Perez as an enhanced Python interpreter, and has since grown into a project aiming to provide, in Perez's words, \"Tools for the entire life cycle of research computing.\" If Python is the engine of our data science task, you might think of [IPython](http:\/\/ipython.org\/) as the interactive control panel.\n\nIPython is about using Python effectively for interactive scientific and data-intensive computing. This chapter will start by stepping through some of the IPython features that are useful to the practice of data science, focusing especially on the syntax it offers beyond the standard features of Python. Next, we will go into a bit more depth on some of the more useful \"magic commands\" that can speed-up common tasks in creating and using data science code. Finally, we will touch on some of the features of the notebook that make it useful in understanding data and sharing results.\n\n\n### Installing IPython and Jupyter notebook\n\nIpython comes with 2 options: \n1. Terminal Based option\n2. Jupyter notebooks\n\nIpython could be installed as follows:\n```bash\npip install ipython\npip install jupyter notebook\n```\n\n### Launching the IPython Shell\n\nStart by launching the IPython interpreter by typing `ipython` on the command-line; alternatively, if you've installed a distribution like Anaconda or EPD, there may be a launcher specific to your system.\n\n### Launching the Jupyter notebook\n\nThe Jupyter notebook is a browser-based graphical interface to the IPython shell, and builds on it a rich set of dynamic display capabilities. As well as executing Python\/IPython statements, the notebook allows the user to include formatted text, static and dynamic visualizations, mathematical equations, JavaScript widgets, and much more. Furthermore, these documents can be saved in a way that lets other people open them and execute the code on their own systems.\n\nThough the IPython notebook is viewed and edited through your web browser window, it must connect to a running Python process in order to execute code. This process (known as a \"kernel\") can be started by running the following command in your system shell:\n```bash\n$ jupyter notebook\n```\n\nThis command will launch a local web server that will be visible to your browser. It immediately spits out a log showing what it is doing; that log will look something like this:\n```bash\n$ jupyter notebook\n[NotebookApp] Serving notebooks from local directory: \/Users\/UserName\/folder\n[NotebookApp] 0 active kernels \n[NotebookApp] The IPython Notebook is running at: http:\/\/localhost:8888\/\n[NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).\n```\n\nUpon issuing the command, your default browser should automatically open and navigate to the listed local URL; the exact address will depend on your system. If the browser does not open automatically, you can open a window and manually open this address (http:\/\/localhost:8888\/ in this example).\n","c4974dc8":"# Using Ipython shell in Jupyter Notebook\n\nIPython lets you use and explore Python efficiently and interactively. Here we'll begin discussing some of the enhancements that IPython adds on top of the normal Python syntax. These are known in IPython as magic commands, and are prefixed by the % character. \n\nMagic commands come in two flavors: line magics, which are denoted by a single % prefix and operate on a single line of input, and cell magics, which are denoted by a double %% prefix and operate on multiple lines of input. We'll demonstrate and discuss a few brief examples here, and come back to more focused discussion of several useful magic commands later in the chapter.","834899c4":"### Help on Magic Functions: ?, %magic, and %lsmagic\u00b6\n\nlike normal Python functions, IPython magic functions have docstrings, and this useful documentation can be accessed in the standard manner. So, for example, to read the documentation of the %timeit magic simply type this:","829510d3":"2. **%timeit**\nAnother example of a useful magic function is _%timeit_, which will automatically determine the execution time of the single-line Python statement that follows it. For example, we may want to check the performance of a list comprehension:","4c4aa754":"### IPython's In and Out Objects"}}