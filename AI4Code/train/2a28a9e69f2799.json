{"cell_type":{"ef261945":"code","95288984":"code","14fa2797":"code","bd75340c":"code","303b73c2":"code","52b9b32e":"code","46359c64":"code","5cc98275":"code","70e4be52":"code","423c28fc":"code","ab37ed8b":"code","d56e3445":"code","e0f291d3":"code","7b0b077d":"code","168e9fbd":"code","980b5c3e":"code","cfb8eb7c":"code","b7214538":"code","95328b32":"code","156c4a49":"code","7ceed6c7":"code","2c32c90c":"code","2fbc77b1":"code","0c4ca874":"code","a49f2c8a":"code","e7e6204e":"code","61dc1e6d":"code","8137d221":"code","bbffc97a":"code","46dc8f89":"code","d07661b2":"code","2e81e00e":"code","b0b78440":"code","bd8ff740":"code","4f6b94c7":"code","585388e2":"code","617666f1":"code","fcee02b8":"code","0daeae39":"code","b8d99898":"code","d760896d":"code","fa38e2d6":"code","8a5e9f0f":"code","e4dfbd68":"code","98a60378":"code","b566fe8f":"code","46ada643":"code","7f35caae":"code","d575f1cf":"code","bc9d45d9":"code","3feb12db":"code","3db97f5b":"code","8df5639d":"code","09a905a0":"code","786ee98d":"code","329cd5b7":"code","4382cfd8":"code","e36cfb73":"code","7a96db7c":"code","5f344897":"code","62c04310":"code","e7835f52":"code","be463b03":"markdown"},"source":{"ef261945":"\"\"\"\nBike Sharing Demand \uc9c4\ud589\ubc29\ud5a5\n1) \ud6c8\ub828, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc758 \ud615\ud0dc \ubc0f \uceec\ub7fc\uc758 \uc18d\uc131 \ub370\uc774\ud130 \uac12 \ud30c\uc545\n2) \ub370\uc774\ud130 \uc804\ucc98\ub9ac \ubc0f \uc2dc\uac01\ud654\n3) \ud68c\uadc0\ubaa8\ub378 \uc801\uc6a9\n4) \uacb0\ub860 \ub3c4\ucd9c\n\n\ud568\uc218 \uc0ac\uc6a9\uc2dc \uafc0\ud301\n\n\ud568\uc218\ub97c \uc801\uc6a9 \uc2dc \ub0b4\ubd80 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \ubaa8\ub97c \ub54c Anaconda Prompt or Windows PowerShell\uc744 \ud65c\uc6a9\ud558\uc5ec \ub0b4\ubd80\uc758 REPL python \uba85\ub839\ucc3d\uc5d0\uc11c\nex)) pandas.to_numeric() \ud568\uc218\uc758 \ub0b4\ubd80 parameter\ub97c \uc54c\uace0 \uc2f6\ub2e4\uba74\nhelp(pandas.to_numeric)\ud558\uac8c \ub418\uba74, \ud568\uc218\uc758 \uc0ac\uc6a9\ubc95 \ub4f1 \ubb38\uc11c\ub97c \uc5f4\ub78c\ud560 \uc218 \uc788\uc74c\n=> \uc81c\uac00 \uad49\uc7a5\ud788 \ub9ce\uc774 \uc501\ub2c8\ub2e4!!\n\n\"\"\"","95288984":"\"\"\"\ud544\uc694 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4 \ud638\ucd9c\"\"\"\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns #\uc2dc\uac01\ud654\ub97c \uc704\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport matplotlib.pyplot as plt\nimport calendar \nfrom datetime import datetime\n\nimport os\nprint(os.listdir(\"..\/input\"))","14fa2797":"\"\"\"\n1) \ud6c8\ub828, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc758 \uac1c\uad04\uc801\uc778 \ud615\ud0dc \ubc0f \ub370\uc774\ud130\uc758 \uceec\ub7fc\uc758 \uc18d\uc131 \ubc0f \uac12\uc758 \uac1c\uc218 \ud30c\uc545\n\"\"\"\n\n#\ud6c8\ub828\ub370\uc774\ud130\uc640 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \ubd88\ub7ec\uc628\ub2e4\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","bd75340c":"#\ud6c8\ub828\ub370\uc774\ud130 \uc14b\uc758 \uac1c\uad04\uc801\uc778 \ubaa8\ud615 \ud30c\uc545\ntrain.head()","303b73c2":"#\ub370\uc774\ud130 \uc14b \ub0b4\uc5d0 \uc788\ub294 \uceec\ub7fc \uc18d\uc131\ub4e4\uc5d0 \ub300\ud55c \uc124\uba85\n\n\"\"\"\ndatetime - hourly date + timestamp  \nseason -  1 = spring, 2 = summer, 3 = fall, 4 = winter \nholiday - whether the day is considered a holiday\nworkingday - whether the day is neither a weekend nor holiday\nweather - 1: Clear, Few clouds, Partly cloudy, Partly cloudy \n2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist \n3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds \n4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog \ntemp - temperature in Celsius\natemp - \"feels like\" temperature in Celsius\nhumidity - relative humidity\nwindspeed - wind speed\ncasual - number of non-registered user rentals initiated\nregistered - number of registered user rentals initiated\ncount - number of total rentals\n\"\"\"\n\n#\ud6c8\ub828 \ub370\uc774\ud130\uc14b\uc758 \uac01 \uceec\ub7fc\ubcc4 \ub370\uc774\ud130\ud0c0\uc785 \ubc0f \uac12\uc758 \uac2f\uc218 \ud30c\uc545\ntrain.info()","52b9b32e":"#\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc14b\uc758 \uac1c\uad04\uc801\uc778 \ud615\ud0dc \ucd9c\ub825\ntest.head()","46359c64":"\"\"\" 2) \ub370\uc774\ud130 \uc804\ucc98\ub9ac \ubc0f \uc2dc\uac01\ud654 \"\"\"\n\n#datetime\uc18d\uc131\uc744 \ubd84\ub9ac\ud558\uc5ec \ucd94\ucd9c\uc18d\uc131\uc73c\ub85c \ud65c\uc6a9\ud558\uae30 \uc704\ud574 split\ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub144-\uc6d4-\uc77c \uacfc \uc2dc\uac04\uc744 \ubd84\ub9ac\ud55c\ub2e4.\ntrain['tempDate'] = train.datetime.apply(lambda x:x.split())","5cc98275":"#\ubd84\ub9ac\ud55c tempDate\ub97c \uac00\uc9c0\uace0 \ub144-\uc6d4-\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec year,month,day \uadf8\ub9ac\uace0 weekday column\uc744 \ucd94\ucd9c\ud55c\ub2e4.\n# split() \ub0b4\uc7a5\ud568\uc218 \uc124\uba85: https:\/\/wikidocs.net\/13 [\ubb38\uc790\ud615 \uc790\ub8cc\ud615_ \ubb38\uc790\uc5f4 \ub098\ub204\uae30] <=> join() [\ubb38\uc790\ud615 \uc790\ub8cc\ud615_ \ubb38\uc790\uc5f4 \uc0bd\uc785]\ntrain['year'] = train.tempDate.apply(lambda x:x[0].split('-')[0])\ntrain['month'] = train.tempDate.apply(lambda x:x[0].split('-')[1])\ntrain['day'] = train.tempDate.apply(lambda x:x[0].split('-')[2])\n#weekday\ub294 calendar\ud328\ud0a4\uc9c0\uc640 datetime\ud328\ud0a4\uc9c0\ub97c \ud65c\uc6a9\ud55c\ub2e4.\n#calendar.day_name \uc0ac\uc6a9\ubc95 : https:\/\/stackoverflow.com\/questions\/36341484\/get-day-name-from-weekday-int\n#datetime.strptime \ubb38\uc11c: https:\/\/docs.python.org\/3\/library\/datetime.html#strftime-strptime-behavior\n#\ud30c\uc774\uc36c\uc5d0\uc11c \ub0a0\uc9dc\uc640 \uc2dc\uac04 \ub2e4\ub8e8\uae30: https:\/\/datascienceschool.net\/view-notebook\/465066ac92ef4da3b0aba32f76d9750a\/ \ntrain['weekday'] = train.tempDate.apply(lambda x:calendar.day_name[datetime.strptime(x[0],\"%Y-%m-%d\").weekday()])\n\ntrain['hour'] = train.tempDate.apply(lambda x:x[1].split(':')[0])","70e4be52":"#\ubd84\ub9ac\ub97c \ud1b5\ud574 \ucd94\ucd9c\ub41c \uc18d\uc131\uc740 \ubb38\uc790\uc5f4 \uc18d\uc131\uc744 \uac00\uc9c0\uace0 \uc788\uc74c \ub530\ub77c\uc11c \uc22b\uc790\ud615 \ub370\uc774\ud130\ub85c \ubcc0\ud658\ud574 \uc904 \ud544\uc694\uac00 \uc788\uc74c.\n#pandas.to_numeric(): https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.to_numeric.html\ntrain['year'] = pd.to_numeric(train.year,errors='coerce')\ntrain['month'] = pd.to_numeric(train.month,errors='coerce')\ntrain['day'] = pd.to_numeric(train.day,errors='coerce')\ntrain['hour'] = pd.to_numeric(train.hour,errors='coerce')","423c28fc":"#year,month,day,hour\uac00 \uc22b\uc790\ud615\uc73c\ub85c \ubcc0\ud658\ub418\uc5c8\uc74c\uc744 \uc54c \uc218 \uc788\uc74c.\ntrain.info()","ab37ed8b":"#\ud544\uc694\ub97c \ub2e4\ud55c tempDate column\uc744 drop\ud568\ntrain = train.drop('tempDate',axis=1)","d56e3445":"#\uac01\uac01\uc758 \uc18d\uc131\uacfc \uc608\uce21\uc758 \uacb0\uacfc\uac12\uc73c\ub85c \uc4f0\uc774\ub294 count\uac12\uacfc\uc758 \uad00\uacc4 \ud30c\uc545\n\n#\ub144\ub3c4\uc640 count\nfig = plt.figure(figsize=[12,10])\nax1 = fig.add_subplot(2,2,1)\nax1 = sns.barplot(x='year',y='count',data=train.groupby('year')['count'].mean().reset_index())\n\n#month\uc640 count\nax2 = fig.add_subplot(2,2,2)\nax2 = sns.barplot(x='month',y='count',data=train.groupby('month')['count'].mean().reset_index())\n\n#day\uc640 count\nax3 = fig.add_subplot(2,2,3)\nax3 = sns.barplot(x='day',y='count',data=train.groupby('day')['count'].mean().reset_index())\n\n#hour\uc640 count\nax4 = fig.add_subplot(2,2,4)\nax4 = sns.barplot(x='hour',y='count',data=train.groupby('hour')['count'].mean().reset_index())","e0f291d3":"#\uacc4\uc808\uacfc count\nfig = plt.figure(figsize=[12,10])\nax1 = fig.add_subplot(2,2,1)\nax1 = sns.barplot(x='season',y='count',data=train.groupby('season')['count'].mean().reset_index())\n\n#\ud734\uc77c \uc5ec\ubd80\uc640 count\nax2 = fig.add_subplot(2,2,2)\nax2 = sns.barplot(x='holiday',y='count',data=train.groupby('holiday')['count'].mean().reset_index())\n\n#\uc791\uc5c5\uc77c \uc5ec\ubd80\uc640 count\nax3 = fig.add_subplot(2,2,3)\nax3 = sns.barplot(x='workingday',y='count',data=train.groupby('workingday')['count'].mean().reset_index())\n\n#\ub0a0\uc528\uc640 count\nax4 = fig.add_subplot(2,2,4)\nax4 = sns.barplot(x='weather',y='count',data=train.groupby('weather')['count'].mean().reset_index())","7b0b077d":"\"\"\"\n\ud574\ub2f9 \ubd80\ubd84\uc740 \ud544\uc790\uac00 \uc2a4\uc2a4\ub85c \ub370\uc774\ud130\ub97c \ubcf4\uace0 \uc774\uc0c1\ud568\uc744 \ub290\uaef4 \uc804\ucc98\ub9ac\ud568.\n\uc65c\ub0d0\ud558\uba74, \ucc98\uc74c import\ud55c \ub370\uc774\ud130 \uc14b\uc5d0\uc11c head()\ub97c \ud558\uc600\uc744 \ub54c 1\uc6d41\uc77c\uc758 season column\uc740 1 \uc989 \ubd04\uc744 \uac00\ub974\ud0a4\ub294\ub370,\n\uc9c1\uc811 3\uc6d4\uc5d0 washington\uc744 \uc9c1\uc811 \uac00\ubcf8 \uacb0\uacfc 1\uc6d4\uc740 \ud655\uc2e4\ud788 \uaca8\uc6b8\uc774\ub2e4.\n\ub530\ub77c\uc11c \uc544\ub798\uc758 badToRight\ub97c \uc774\uc6a9\ud558\uc5ec season column\uc744 \uc218\uc815\ud558\uace0\uc790 \ud588\uc74c.\n\uc774 \ub370\uc774\ud130 \ub54c\ubb38\uc5d0 \ucc38\uc870\ud588\ub358 \ucee4\ub110\uacfc\ub294 \ub2e4\ub978 \uc815\ud655\ub3c4\ub97c \ub098\ud0c0\ub0bc \uc218 \uc788\uc74c.\n\"\"\"\n\ndef badToRight(month):\n    if month in [12,1,2]:\n        return 4\n    elif month in [3,4,5]:\n        return 1\n    elif month in [6,7,8]:\n        return 2\n    elif month in [9,10,11]:\n        return 3\n\n#apply() \ub0b4\uc7a5\ud568\uc218\ub294 split(),map(),join(),filter()\ub4f1 \uacfc \ud568\uaf10 \ud544\uc218\uc801\uc73c\ub85c \uc219\uc9c0\ud574\uc57c \ud560 \ud568\uc218\uc774\ub2e4.\ntrain['season'] = train.month.apply(badToRight)","168e9fbd":"#\uc704\uc758 \uc2dc\uac01\ud654\uc640 \uac19\uc774 \ud558\ub098\uc758 \uceec\ub7fc\uacfc \uacb0\uacfc \uac12\uc744 \ube44\uad50\ud574\ubcf4\uc790\n\n#\uacc4\uc808\uacfc count\nfig = plt.figure(figsize=[12,10])\nax1 = fig.add_subplot(2,2,1)\nax1 = sns.barplot(x='season',y='count',data=train.groupby('season')['count'].mean().reset_index())\n\n#\ud734\uc77c \uc5ec\ubd80\uc640 count\nax2 = fig.add_subplot(2,2,2)\nax2 = sns.barplot(x='holiday',y='count',data=train.groupby('holiday')['count'].mean().reset_index())\n\n#\uc791\uc5c5\uc77c \uc5ec\ubd80\uc640 count\nax3 = fig.add_subplot(2,2,3)\nax3 = sns.barplot(x='workingday',y='count',data=train.groupby('workingday')['count'].mean().reset_index())\n\n#\ub0a0\uc528\uc640 count\nax4 = fig.add_subplot(2,2,4)\nax4 = sns.barplot(x='weather',y='count',data=train.groupby('weather')['count'].mean().reset_index())","980b5c3e":"#\uadf8\ub9ac\uace0 \ub0a8\uc740 \ubd84\ud3ec\ub97c \ud1b5\ud574 \ud45c\ud604\ud558\uc600\uc744 \ub54c \uc88b\uc740 \uceec\ub7fc\ub4e4\uc744 count\uc640 \ube44\uad50\ud574\ubcf4\uc790\n\n#\uc628\ub3c4\uc640 count\nfig = plt.figure(figsize=[12,10])\nax1 = fig.add_subplot(2,2,1)\nax1 = sns.distplot(train.temp,bins=range(train.temp.min().astype('int'),train.temp.max().astype('int')+1))\n\n#\ud3c9\uade0\uc628\ub3c4\uc640 count\nax2 = fig.add_subplot(2,2,2)\nax2 = sns.distplot(train.atemp,bins=range(train.atemp.min().astype('int'),train.atemp.max().astype('int')+1))\n\n#\uc2b5\ub3c4\uc640 count\nax3 = fig.add_subplot(2,2,3)\nax3 = sns.distplot(train.humidity,bins=range(train.humidity.min().astype('int'),train.humidity.max().astype('int')+1))\n\n#\ubc14\ub78c\uc18d\ub3c4\uc640 count\nax4 = fig.add_subplot(2,2,4)\nax4 = sns.distplot(train.windspeed,bins=range(train.windspeed.min().astype('int'),train.windspeed.max().astype('int')+1))","cfb8eb7c":"#\uac01\uac01\uc758 \uceec\ub7fc\ub4e4 \uac04\uc758 \uc0c1\uad00\uacc4\uc218\ub97c heatmap\uc744 \ud1b5\ud574 \uc2dc\uac01\ud654\n\nfig = plt.figure(figsize=[20,20])\nax = sns.heatmap(train.corr(),annot=True,square=True)","b7214538":"#heatmap \uc0c1\uad00\uad00\uacc4\ub97c \ucc38\uc870\ud558\uc5ec \uc774\uc804\uc758 \uc2dc\uac01\ud654\uc640\ub294 \ub2ec\ub9ac \ub450 \uac1c\uc758 \uc11c\ub85c\ub2e4\ub978 \uceec\ub7fc\uc774 \uc801\uc6a9\ub41c count\ub97c \uc2dc\uac01\ud654\ud574\ubcf4\uc790\n\n#\uc2dc\uac04\uacfc \uacc4\uc808\uc5d0 \ub530\ub978 count\nfig = plt.figure(figsize=[12,10])\nax1 = fig.add_subplot(2,2,1)\nax1 = sns.pointplot(x='hour',y='count',hue='season',data=train.groupby(['season','hour'])['count'].mean().reset_index())\n\n#\uc2dc\uac04\uacfc \ud734\uc77c \uc5ec\ubd80\uc5d0 \ub530\ub978 count\nax2 = fig.add_subplot(2,2,2)\nax2 = sns.pointplot(x='hour',y='count',hue='holiday',data=train.groupby(['holiday','hour'])['count'].mean().reset_index())\n\n#\uc2dc\uac04\uacfc \ud734\uc77c \uc5ec\ubd80\uc5d0 \ub530\ub978 count\nax3 = fig.add_subplot(2,2,3)\nax3 = sns.pointplot(x='hour',y='count',hue='weekday',hue_order=['Sunday','Monday','Tuesday','Wendnesday','Thursday','Friday','Saturday'],data=train.groupby(['weekday','hour'])['count'].mean().reset_index())\n\n#\uc2dc\uac04\uacfc \ub0a0\uc528\uc5d0 \ub530\ub978 count\nax4 = fig.add_subplot(2,2,4)\nax4 = sns.pointplot(x='hour',y='count',hue='weather',data=train.groupby(['weather','hour'])['count'].mean().reset_index())","95328b32":"#\ub9c8\uc9c0\ub9c9 \uc2dc\uac01\ud654\uc5d0 \uc774\uc0c1\uce58\uac00 \uc788\ub294 \uac83\uac19\uc544\uc11c \ud655\uc778\n\ntrain[train.weather==4]","156c4a49":"#\ub2ec\uacfc \ub0a0\uc528\uc5d0 \ub530\ub978 count \nfig = plt.figure(figsize=[12,10])\nax1 = fig.add_subplot(2,1,1)\nax1 = sns.pointplot(x='month',y='count',hue='weather',data=train.groupby(['weather','month'])['count'].mean().reset_index())\n\n#\ub2ec\ubcc4 count\nax2 = fig.add_subplot(2,1,2)\nax2 = sns.barplot(x='month',y='count',data=train.groupby('month')['count'].mean().reset_index())","7ceed6c7":"\"\"\"\nWindspeed \ubd84\ud3ec\ub97c \ud45c\ud604\ud55c \uadf8\ub798\ud504\uc5d0\uc11c Windspeed\uac00 0\uc778 \uac12\ub4e4\uc774 \ub9ce\uc558\ub294\ub370,\n\uc774\ub294 \uc2e4\uc81c\ub85c 0\uc774\uc5c8\ub358\uc9c0 or \uac12\uc744 \uc81c\ub300\ub85c \uce21\uc815\ud558\uc9c0 \ubabb\ud574\uc11c 0\uc778\uc9c0 \ub450 \uac1c\uc758 \uacbd\uc6b0\uac00 \uc788\ub2e4.\n\ud558\uc9c0\ub9cc \ud6c4\uc790\uc758 \uc0dd\uac01\uc744 \uac00\uc9c0\uace0 \uc6b0\ub9ac\uc758 \ub370\uc774\ud130\ub97c \ud65c\uc6a9\ud558\uc5ec windspeed\uac12\uc744 \ubd80\uc5ec\ud574\ubcf4\uc790\n\"\"\"\n\n#\uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378\uc5d0 \ud6c8\ub828\uc2dc\ud0ac \ub54c\ub294 \ubb38\uc790\uc5f4 \uac12\uc740 \ubd88\uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc790\uc5f4\uc744 \uce74\ud14c\uace0\ub9ac\ud654 \ud558\uace0 \uac01\uac01\uc5d0 \ud574\ub2f9\ud558\ub294 \uac12\uc744 \uc22b\uc790\ub85c \ubcc0\ud658\ud574\uc900\ub2e4\ntrain['weekday']= train.weekday.astype('category')","2c32c90c":"print(train['weekday'].cat.categories)","2fbc77b1":"#0:Sunday --> 6:Saturday\ntrain.weekday.cat.categories = ['5','1','6','0','4','2','3']","0c4ca874":"\"\"\"\nRandomForest\ub97c \ud65c\uc6a9\ud558\uc5ec Windspeed\uac12\uc744 \ubd80\uc5ec\ud574\ubcf4\uc790\n\ud558\ub098\uc758 \ub370\uc774\ud130\ub97c Windspeed\uac00 0\uc778 \uadf8\ub9ac\uace0 0\uc774 \uc544\ub2cc \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ubd84\ub9ac\ud558\uace0\n\ud559\uc2b5\uc2dc\ud0ac 0\uc774 \uc544\ub2cc \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0\uc11c\ub294 Windspeed\ub9cc \ub2f4\uae34 Series\uc640 \uc774\uc678\uc758 \ud559\uc2b5\uc2dc\ud0ac column\ub4e4\uc758 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ubd84\ub9ac\ud55c\ub2e4\n\ud559\uc2b5 \uc2dc\ud0a8 \ud6c4\uc5d0 Windspeed\uac00 0\uc778 \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0\uc11c \ud559\uc2b5\uc2dc\ud0a8 \uceec\ub7fc\uacfc \uac19\uac8c \ucd94\ucd9c\ud558\uc5ec \uacb0\uacfc \uac12\uc744 \ubd80\uc5ec\ubc1b\uc740 \ud6c4,\nWindspeed\uac00 0\uc778 \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 Windspeed\uac12\uc744 \ubd80\uc5ec\ud55c\ub2e4.\n\"\"\"\nfrom sklearn.ensemble import RandomForestRegressor\n\n#Windspeed\uac00 0\uc778 \ub370\uc774\ud130\ud504\ub808\uc784\nwindspeed_0 = train[train.windspeed == 0]\n#Windspeed\uac00 0\uc774 \uc544\ub2cc \ub370\uc774\ud130\ud504\ub808\uc784\nwindspeed_Not0 = train[train.windspeed != 0]\n\n#Windspeed\uac00 0\uc778 \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \ud22c\uc785\uc744 \uc6d0\uce58 \uc54a\ub294 \uceec\ub7fc\uc744 \ubc30\uc81c\nwindspeed_0_df = windspeed_0.drop(['windspeed','casual','registered','count','datetime'],axis=1)\n\n#Windspeed\uac00 0\uc774 \uc544\ub2cc \ub370\uc774\ud130 \ud504\ub808\uc784\uc740 \uc704\uc640 \ub3d9\uc77c\ud55c \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \ud615\uc131\ud558\uace0 \ud559\uc2b5\uc2dc\ud0ac Windspeed Series\ub97c \uadf8\ub300\ub85c \ub460\nwindspeed_Not0_df = windspeed_Not0.drop(['windspeed','casual','registered','count','datetime'],axis=1)\nwindspeed_Not0_series = windspeed_Not0['windspeed'] \n\n#\ubaa8\ub378\uc5d0 0\uc774 \uc544\ub2cc \ub370\uc774\ud130\ud504\ub808\uc784\uacfc \uacb0\uacfc\uac12\uc744 \ud559\uc2b5\nrf = RandomForestRegressor()\nrf.fit(windspeed_Not0_df,windspeed_Not0_series)\n#\ud559\uc2b5\ub41c \ubaa8\ub378\uc5d0 Windspeed\uac00 0\uc778 \ub370\uc774\ud130\ud504\ub808\uc784\uc758 Windspeed\ub97c \ub3c4\ucd9c\npredicted_windspeed_0 = rf.predict(windspeed_0_df)\n#\ub3c4\ucd9c\ub41c \uac12\uc744 \uc6d0\ub798\uc758 \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 \uc0bd\uc785\nwindspeed_0['windspeed'] = predicted_windspeed_0","a49f2c8a":"#\ub098\ub208 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \uc6d0\ub798\uc758 \ud615\ud0dc\ub85c \ubcf5\uc6d0\ntrain = pd.concat([windspeed_0,windspeed_Not0],axis=0)","e7e6204e":"#\uc2dc\uac04\ubcc4 \uc815\ub82c\uc744 \uc704\ud574 string type\uc758 datetime\uc744 datetime\uc73c\ub85c \ubcc0\ud658\ntrain.datetime = pd.to_datetime(train.datetime,errors='coerce')","61dc1e6d":"#\ud569\uccd0\uc9c4 \ub370\uc774\ud130\ub97c datetime\uc21c\uc73c\ub85c \uc815\ub82c\ntrain = train.sort_values(by=['datetime'])","8137d221":"#windspeed\ub97c \uc218\uc815\ud55c \ud6c4 \ub2e4\uc2dc \uc0c1\uad00\uacc4\uc218\ub97c \ubd84\uc11d\n#\uc6b0\ub9ac\uc758 \uae30\ub300\uc640\ub294 \ub2ec\ub9ac windspeed\uc640 count\uc758 \uc0c1\uad00\uad00\uacc4\ub294 0.1\uc5d0\uc11c 0.11\ub85c \uac04\uc18c\ud55c \ucc28\uc774\ub9cc \ubcf4\uc784.\nfig = plt.figure(figsize=[20,20])\nax = sns.heatmap(train.corr(),annot=True,square=True)","bbffc97a":"fig = plt.figure(figsize=[5,5])\nsns.distplot(train['windspeed'],bins=np.linspace(train['windspeed'].min(),train['windspeed'].max(),10))\nplt.suptitle(\"Filled by Random Forest Regressor\")\nprint(\"Min value of windspeed is {}\".format(train['windspeed'].min()))","46dc8f89":"\"\"\"\uc774\uc81c \ubaa8\ub4e0 \ub3d9\uc77c\ud55c \uc804\ucc98\ub9ac \uacfc\uc815\uc744 test\uc14b\uacfc \ud55c\uaebc\ubc88\uc5d0 \uc9c4\ud589\"\"\"\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","d07661b2":"combine = pd.concat([train,test],axis=0)","2e81e00e":"combine.info()","b0b78440":"combine['tempDate'] = combine.datetime.apply(lambda x:x.split())\ncombine['weekday'] = combine.tempDate.apply(lambda x: calendar.day_name[datetime.strptime(x[0],\"%Y-%m-%d\").weekday()])\ncombine['year'] = combine.tempDate.apply(lambda x: x[0].split('-')[0])\ncombine['month'] = combine.tempDate.apply(lambda x: x[0].split('-')[1])\ncombine['day'] = combine.tempDate.apply(lambda x: x[0].split('-')[2])\ncombine['hour'] = combine.tempDate.apply(lambda x: x[1].split(':')[0])","bd8ff740":"combine['year'] = pd.to_numeric(combine.year,errors='coerce')\ncombine['month'] = pd.to_numeric(combine.month,errors='coerce')\ncombine['day'] = pd.to_numeric(combine.day,errors='coerce')\ncombine['hour'] = pd.to_numeric(combine.hour,errors='coerce')","4f6b94c7":"combine.info()","585388e2":"combine['season'] = combine.month.apply(badToRight)","617666f1":"combine.head()","fcee02b8":"combine.weekday = combine.weekday.astype('category')","0daeae39":"combine.weekday.cat.categories = ['5','1','6','0','4','2','3']","b8d99898":"dataWind0 = combine[combine['windspeed']==0]\ndataWindNot0 = combine[combine['windspeed']!=0]","d760896d":"dataWind0.columns","fa38e2d6":"dataWind0_df = dataWind0.drop(['windspeed','casual','registered','count','datetime','tempDate'],axis=1)\n\ndataWindNot0_df = dataWindNot0.drop(['windspeed','casual','registered','count','datetime','tempDate'],axis=1)\ndataWindNot0_series = dataWindNot0['windspeed']","8a5e9f0f":"dataWindNot0_df.head()","e4dfbd68":"dataWind0_df.head()","98a60378":"rf2 = RandomForestRegressor()\nrf2.fit(dataWindNot0_df,dataWindNot0_series)\npredicted = rf2.predict(dataWind0_df)\nprint(predicted)","b566fe8f":"dataWind0['windspeed'] = predicted","46ada643":"combine = pd.concat([dataWind0,dataWindNot0],axis=0)","7f35caae":"#\uc6b0\ub9ac\uac00 \uac00\uc9c4 column\ub4e4 \uc911 \uac12\ub4e4\uc774 \uc77c\uc815\ud558\uace0 \uc815\ud574\uc838\uc788\ub2e4\uba74 category\ub85c \ubcc0\uacbd\ud574\uc8fc\uace0\n#\ud544\uc694\ud558\uc9c0 \uc54a\uc740 column\ub4e4\uc740 \uc774\uc81c \ubc84\ub9b0\ub2e4.\ncategorizational_columns = ['holiday','humidity','season','weather','workingday','year','month','day','hour']\ndrop_columns = ['datetime','casual','registered','count','tempDate']","d575f1cf":"#categorical\ud558\uac8c \ubcc0\ud658\nfor col in categorizational_columns:\n    combine[col] = combine[col].astype('category')","bc9d45d9":"#\ud569\uccd0\uc9c4 combine\ub370\uc774\ud130 \uc14b\uc5d0\uc11c count\uc758 \uc720\ubb34\ub85c \ud6c8\ub828\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc744 \ubd84\ub9ac\ud558\uace0 \uac01\uac01\uc744 datetime\uc73c\ub85c \uc815\ub82c\ntrain = combine[pd.notnull(combine['count'])].sort_values(by='datetime')\ntest = combine[~pd.notnull(combine['count'])].sort_values(by='datetime')\n\n#\ub370\uc774\ud130 \ud6c8\ub828\uc2dc \uc9d1\uc5b4 \ub123\uac8c \ub420 \uac01\uac01\uc758 \uacb0\uacfc \uac12\ub4e4\ndatetimecol = test['datetime']\nyLabels = train['count'] #count\nyLabelsRegistered = train['registered'] #\ub4f1\ub85d\ub41c \uc0ac\uc6a9\uc790\nyLabelsCasual = train['casual'] #\uc784\uc2dc \uc0ac\uc6a9\uc790","3feb12db":"#\ud544\uc694 \uc5c6\ub294 column\ub4e4\uc744 \ubc84\ub9b0 \ud6c4\uc758 \ud6c8\ub828\uacfc \ud14c\uc2a4\ud2b8 \uc14b\ntrain = train.drop(drop_columns,axis=1)\ntest = test.drop(drop_columns,axis=1)","3db97f5b":"\"\"\"\n\ud574\ub2f9 \ubb38\uc81c\uc5d0\uc11c\ub294 RMSLE\ubc29\uc2dd\uc744 \uc774\uc6a9\ud558\uc5ec \uc81c\ub300\ub85c \uc608\uce21\uc774 \ub418\uc5c8\ub294\uc9c0 \ud3c9\uac00\ud558\uac8c \ub428.\nRMSLE\ub294 \uc544\ub798 \ub9c1\ud06c\ub97c \ucc38\uc870\ud558\uc5ec \uc774\uc6a9.\nhttps:\/\/programmers.co.kr\/learn\/courses\/21\/lessons\/943#\n\nRMSLE\n\uacfc\ub300\ud3c9\uac00 \ub41c \ud56d\ubaa9\ubcf4\ub2e4\ub294 \uacfc\uc18c\ud3c9\uac00 \ub41c \ud56d\ubaa9\uc5d0 \ud398\ub110\ud2f0\ub97c \uc8fc\ub294\ubc29\uc2dd\n\uc624\ucc28\ub97c \uc81c\uacf1\ud558\uc5ec \ud615\uade0\ud55c \uac12\uc758 \uc81c\uacf1\uadfc\uc73c\ub85c \uac12\uc774 \uc791\uc544\uc9c8 \uc218\ub85d \uc815\ubc00\ub3c4\uac00 \ub192\uc74c\n0\uc5d0 \uac00\uae4c\uc6b4 \uac12\uc774 \ub098\uc62c \uc218\ub85d \uc815\ubc00\ub3c4\uac00 \ub192\ub2e4\n\"\"\"\n\n# y is predict value y_ is actual value\ndef rmsle(y, y_,convertExp=True):\n    if convertExp:\n        y = np.exp(y), \n        y_ = np.exp(y_)\n    log1 = np.nan_to_num(np.array([np.log(v + 1) for v in y]))\n    log2 = np.nan_to_num(np.array([np.log(v + 1) for v in y_]))\n    calc = (log1 - log2) ** 2\n    return np.sqrt(np.mean(calc))","8df5639d":"#\uc120\ud615 \ud68c\uadc0 \ubaa8\ub378\n#\uc120\ud615 \ud68c\uadc0\ubaa8\ub378\uc740 \uac74\ub4dc\ub9b4 \ub9cc\ud55c \ub0b4\ubd80 attr\ub4e4\uc774 \uc5c6\uc74c\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso\n\n\nlr = LinearRegression()\n\n\"\"\"\n\uc544\ub798\uc758 \ucee4\ub110\uc744 \ucc38\uc870\ud558\uc5ec yLabels\ub97c \ub85c\uadf8\ud654 \ud558\ub824\ub294\ub370 \uc65c np.log\uac00 \uc544\ub2cc np.log1p\ub97c \ud65c\uc6a9\ud558\ub294\uac00??\nnp.log1p\ub294 np.log(1+x)\uc640 \ub3d9\uc77c. \uc774\uc720\ub294 \ub9cc\uc57d \uc5b4\ub5a4 x\uac12\uc774 0\uc778\ub370 \uc774\ub97c log\ud558\uac8c\ub418\uba74, (-)\ubb34\ud55c\ub300\ub85c \uc218\ub834\ud558\uae30 \ub54c\ubb38\uc5d0 np.log1p\ub97c \ud65c\uc6a9\ud568. \n\ucc38\uc870: https:\/\/ko.wikipedia.org\/wiki\/%EB%A1%9C%EA%B7%B8 \n\"\"\"\nyLabelslog = np.log1p(yLabels)\n#\uc120\ud615 \ubaa8\ub378\uc5d0 \uc6b0\ub9ac\uc758 \ub370\uc774\ud130\ub97c \ud559\uc2b5\nlr.fit(train,yLabelslog)\n#\uacb0\uacfc \uac12 \ub3c4\ucd9c\npreds = lr.predict(train)\n#rmsle\ud568\uc218\uc758 element\uc5d0 np.exp()\uc9c0\uc218 \ud568\uc218\ub97c \ucde8\ud558\ub294 \uc774\uc720\ub294 \uc6b0\ub9ac\uc758 preds\uac12\uc5d0 \uc5bb\uc5b4\uc9c4 \uac83\uc740 \ud55c\ubc88 log\ub97c \ud55c \uac12\uc774\uae30 \ub54c\ubb38\uc5d0 \uc6d0\ub798 \ubaa8\ub378\uc5d0\ub294 log\ub97c \ud558\uc9c0 \uc54a\uc740 \uc6d0\ub798\uc758 \uac12\uc744 \ub123\uae30 \uc704\ud568\uc784.\nprint('RMSLE Value For Linear Regression: {}'.format(rmsle(np.exp(yLabelslog),np.exp(preds),False)))","09a905a0":"\"\"\"\n\ub370\uc774\ud130 \ud6c8\ub828\uc2dc Log\uac12\uc744 \ucde8\ud558\ub294 \uc774\uc720??\n\uc6b0\ub9ac\uac00 \uacb0\uacfc \uac12\uc73c\ub85c \ud22c\uc785\ud558\ub294 Count\uac12\uc774 \ucd5c\uc800 \uac12\uacfc \ucd5c\uace0 \uac12\uc758 \ub099\ud3ed\uc774 \ub108\ubb34 \ucee4\uc11c\n\ub9cc\uc57d log\ub97c \ucde8\ud558\uc9c0 \uc54a\uace0 \ud574\ubcf4\uba74 print\ud558\ub294 \uacb0\uacfc \uac12\uc774 inf(infinity)\ub85c \ub728\uac8c \ub428\n\"\"\"\n\n#count\uac12\uc758 \ubd84\ud3ec\nsns.distplot(yLabels,bins=range(yLabels.min().astype('int'),yLabels.max().astype('int')))\n\n#\uae30\uc874 \ud6c8\ub828 \ub370\uc774\ud130\uc14b\uc758 count\uc758 \uac1c\uc218\nprint(yLabels.count()) #10886\n\n\"\"\" \n3 sigma\ub97c \ud65c\uc6a9\ud55c \uc774\uc0c1\uce58 \ud655\uc778\n\ucc38\uc870 : https:\/\/ko.wikipedia.org\/wiki\/68-95-99.7_%EA%B7%9C%EC%B9%99\n\"\"\"\n#3\uc2dc\uadf8\ub9c8\ub97c \uc801\uc6a9\ud55c \uc774\uc0c1\uce58\ub97c \ubc30\uc81c\ud55c \ud6c8\ub828 \ub370\uc774\ud130\uc14b\uc758 count\uc758 \uac1c\uc218\nyLabels[np.logical_and(yLabels.mean()-3*yLabels.std() <= yLabels,yLabels.mean()+3*yLabels.std() >= yLabels)].count() #10739\n#\uc774\uc0c1\uce58\ub4e4\uc774 \uc874\uc7ac\ud560 \ub54c\ub294 log\ub97c \ud65c\uc6a9\ud558\uc5ec \uac12\uc744 \ub3c4\ucd9c","786ee98d":"\"\"\"\nGridSearchCV\ub97c \ud65c\uc6a9\ud558\uba74 \uc6b0\ub9ac\uac00 \uc774\uc6a9\ud558\uac8c \ub420 \uac01\uac01\uc758 \ubaa8\ub378\ub9c8\ub2e4 \ubcc0\uacbd\ud574\uc57c \ud558\ub294 \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc2dc \uc5b4\ub5a4 \ud30c\ub77c\ubbf8\ud130\uac00 \ucd5c\uc801\uc758 \uac12\uc744 \ub0b4\ub294\uc9c0 \ub4f1\uc744 \uc54c \uc218 \uc788\uc74c.\n\nGridSearchCV \ucc38\uc870:\nhttps:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.GridSearchCV.html\nhttps:\/\/datascienceschool.net\/view-notebook\/ff4b5d491cc34f94aea04baca86fbef8\/\n\"\"\"\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics\n\n#Ridge\ubaa8\ub378\uc740 L2\uc81c\uc57d\uc744 \uac00\uc9c0\ub294 \uc120\ud615\ud68c\uadc0\ubaa8\ub378\uc5d0\uc11c \uac1c\uc120\ub41c \ubaa8\ub378\uc774\uba70 \ud574\ub2f9 \ubaa8\ub378\uc5d0\uc11c \uc720\uc758 \uae4a\uac8c \ud29c\ub2dd\ud574\uc57c\ud558\ub294 \ud30c\ub77c\ubbf8\ud130\ub294 alpha\uac12\uc774\ub2e4.\nridge = Ridge()\n\n#\uc6b0\ub9ac\uac00 \ud29c\ub2dd\ud558\uace0\uc790\ud558\ub294 Ridge\uc758 \ud30c\ub77c\ubbf8\ud130 \uc911 \ud2b9\uc815 \ud30c\ub77c\ubbf8\ud130\uc5d0 \ubc30\uc5f4 \uac12\uc73c\ub85c \ub118\uaca8\uc8fc\uac8c \ub418\uba74 \ud14c\uc2a4\ud2b8 \ud6c4 \uc5b4\ub5a4 \ud30c\ub77c\ubbf8\ud130\uac00 \ucd5c\uc801\uc758 \uac12\uc778\uc9c0 \uc54c\ub824\uc90c \nridge_params = {'max_iter':[3000],'alpha':[0.001,0.01,0.1,1,10,100,1000]}\nrmsle_scorer = metrics.make_scorer(rmsle,greater_is_better=False)\ngrid_ridge = GridSearchCV(ridge,ridge_params,scoring=rmsle_scorer,cv=5)\n\ngrid_ridge.fit(train,yLabelslog)\npreds = grid_ridge.predict(train)\nprint(grid_ridge.best_params_)\nprint('RMSLE Value for Ridge Regression {}'.format(rmsle(np.exp(yLabelslog),np.exp(preds),False)))","329cd5b7":"#\uacb0\uacfc\uc5d0 \ub300\ud574 GridSearchCV\uc758 \ubcc0\uc218\uc778 grid_ridge\ubcc0\uc218\uc5d0 cv_result_\ub97c \ud1b5\ud574 alpha\uac12\uc758 \ubcc0\ud654\uc5d0 \ub530\ub77c \ud3c9\uade0\uac12\uc758 \ubcc0\ud654\ub97c \ud30c\uc545 \uac00\ub2a5\ndf = pd.DataFrame(grid_ridge.cv_results_)","4382cfd8":"df.head()","e36cfb73":"#Ridge\ubaa8\ub378\uc740 L1\uc81c\uc57d\uc744 \uac00\uc9c0\ub294 \uc120\ud615\ud68c\uadc0\ubaa8\ub378\uc5d0\uc11c \uac1c\uc120\ub41c \ubaa8\ub378\uc774\uba70 \ud574\ub2f9 \ubaa8\ub378\uc5d0\uc11c \uc720\uc758 \uae4a\uac8c \ud29c\ub2dd\ud574\uc57c\ud558\ub294 \ud30c\ub77c\ubbf8\ud130\ub294 alpha\uac12\uc774\ub2e4.\nlasso = Lasso()\n\nlasso_params = {'max_iter':[3000],'alpha':[0.001,0.01,0.1,1,10,100,1000]}\ngrid_lasso = GridSearchCV(lasso,lasso_params,scoring=rmsle_scorer,cv=5)\ngrid_lasso.fit(train,yLabelslog)\npreds = grid_lasso.predict(train)\nprint('RMSLE Value for Lasso Regression {}'.format(rmsle(np.exp(yLabelslog),np.exp(preds),False)))","7a96db7c":"rf = RandomForestRegressor()\n\nrf_params = {'n_estimators':[1,10,100]}\ngrid_rf = GridSearchCV(rf,rf_params,scoring=rmsle_scorer,cv=5)\ngrid_rf.fit(train,yLabelslog)\npreds = grid_rf.predict(train)\nprint('RMSLE Value for RandomForest {}'.format(rmsle(np.exp(yLabelslog),np.exp(preds),False)))","5f344897":"from sklearn.ensemble import GradientBoostingRegressor\n\ngb = GradientBoostingRegressor()\ngb_params={'max_depth':range(1,11,1),'n_estimators':[1,10,100]}\ngrid_gb=GridSearchCV(gb,gb_params,scoring=rmsle_scorer,cv=5)\ngrid_gb.fit(train,yLabelslog)\npreds = grid_gb.predict(train)\nprint('RMSLE Value for GradientBoosting {}'.format(rmsle(np.exp(yLabelslog),np.exp(preds),False)))","62c04310":"predsTest = grid_gb.predict(test)\nfig,(ax1,ax2)= plt.subplots(ncols=2)\nfig.set_size_inches(12,5)\nsns.distplot(yLabels,ax=ax1,bins=50)\nsns.distplot(np.exp(predsTest),ax=ax2,bins=50)","e7835f52":"submission = pd.DataFrame({\n        \"datetime\": datetimecol,\n        \"count\": [max(0, x) for x in np.exp(predsTest)]\n    })\nsubmission.to_csv('bike_predictions_gbm_separate_without_fe.csv', index=False)","be463b03":"## Reference\n> Vivek Srinivasan's EDA & Ensemble Model (Top 10 Percentile)\n> https:\/\/www.kaggle.com\/viveksrinivasan\/eda-ensemble-model-top-10-percentile"}}