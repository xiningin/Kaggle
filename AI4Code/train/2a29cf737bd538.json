{"cell_type":{"db2080bd":"code","63790705":"code","796b6989":"code","79756e8e":"code","d1b42fb7":"code","c40bb46e":"code","662c97dc":"code","60eed5e2":"code","5cefeee5":"code","449fcc2c":"code","67266b81":"code","4eb00103":"code","acea5ee9":"code","0abe40c2":"code","fb5dad1a":"code","7afdea92":"code","75095ccd":"code","a7aae4d8":"code","6e54b87e":"code","0d67c2dd":"code","8551768b":"code","1c992668":"code","160b8f34":"code","9e5c07c3":"code","a31d6626":"code","066620ad":"markdown","4bbe24db":"markdown","3a1ba356":"markdown","1c2be3e8":"markdown","48b140a0":"markdown","060fc74f":"markdown","8ee3bb47":"markdown","3632616b":"markdown","a1dfb857":"markdown","c9aba438":"markdown","e6ec52d0":"markdown","c4fc72a7":"markdown","7e22e8ac":"markdown","755a43f3":"markdown","5bd0e565":"markdown","39b16192":"markdown","be6591fe":"markdown"},"source":{"db2080bd":"import tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.datasets import cifar10\n%matplotlib inline","63790705":"# Setting the name of the classes that will be predicted\nclass_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']","796b6989":"# Loading the database\n(X_train, y_train), (X_test, y_test) = cifar10.load_data()","79756e8e":"X_train[0]","d1b42fb7":"X_train = X_train \/ 255.0","c40bb46e":"X_train.shape","662c97dc":"X_test = X_test \/ 255.0","60eed5e2":"plt.imshow(X_test[1])","5cefeee5":"model = tf.keras.models.Sequential()","449fcc2c":"model.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, padding=\"same\", activation=\"relu\", input_shape=[32, 32, 3]))","67266b81":"model.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, padding=\"same\", activation=\"relu\"))","4eb00103":"model.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2, padding='valid'))","acea5ee9":"model.add(tf.keras.layers.Conv2D(filters=64, kernel_size=3, padding=\"same\", activation=\"relu\"))","0abe40c2":"model.add(tf.keras.layers.Conv2D(filters=64, kernel_size=3, padding=\"same\", activation=\"relu\"))","fb5dad1a":"model.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2, padding='valid'))","7afdea92":"model.add(tf.keras.layers.Flatten())","75095ccd":"model.add(tf.keras.layers.Dense(units=128, activation='relu'))","a7aae4d8":"model.add(tf.keras.layers.Dense(units=10, activation='softmax'))","6e54b87e":"model.summary()","0d67c2dd":"# 0 0 0 1 0 0 0 0 0 0\ny_test[0]","8551768b":"model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"Adam\", metrics=[\"sparse_categorical_accuracy\"])","1c992668":"model.fit(X_train, y_train, epochs=5)","160b8f34":"test_loss, test_accuracy = model.evaluate(X_test, y_test)","9e5c07c3":"print(\"Test accuracy: {}\".format(test_accuracy))","a31d6626":"test_loss","066620ad":"### Adding the second convolution layer and the max-pooling layer\n\nHyper-parameters of the convolution layer:\n- filters: 32\n- kernel_size (kernel size):3\n- padding: same\n- activation function: relu\n\nMax-pooling layer hyper-parameters:\n- pool_size: 2\n- strides: 2\n- padding: valid","4bbe24db":"### Added the first convolution layer\n\nHyper-parameters of the convolution layer:\n- filters: 32\n- kernel_size (kernel size): 3\n- padding: same\n- activation function: relu\n- input_shape (input layer): (32, 32, 3)","3a1ba356":"# If you find this notebook useful, support with an upvote \ud83d\udc4d","1c2be3e8":"### Compiling the model\n\n#### sparse_categorical_accuracy\n\nhttps:\/\/stackoverflow.com\/questions\/44477489\/keras-difference-between-categorical-accuracy-and-sparse-categorical-accuracy ","48b140a0":"### Adding the third convolution layer\n\nHyper-parameters of the convolution layer:\n\n     filters: 64\n     kernel_size:3\n     padding: same\n     activation: relu\n","060fc74f":"# Importing the Libraries","8ee3bb47":"### Adding the first dense (fully-connected) layer\n\nDense layer hyper-parameters:\n- units\/neurons: 128\n- activation function: relu","3632616b":"### Evaluating the model","a1dfb857":"### Adding the flattening layer","c9aba438":"### Loading the Cifar10 database","e6ec52d0":"### Training the model","c4fc72a7":"# Pre-processing","7e22e8ac":"### Adding the output layer\n\nOutput layer hyper-parameters:\n\n  - units\/neurons: 10 (number of classes)\n  - activation: softmax","755a43f3":"### Defining the model","5bd0e565":"### Adding the fourth convolution layer and the max pooling layer\n\nHyper-parameters of the convolution layer:\n\n     filters: 64\n     kernel_size:3\n     padding: same\n     activation: relu\n\nHyper-parameters of the max pooling layer:\n\n     pool_size: 2\n     strides: 2\n     padding: valid","39b16192":"## Building the Convolutional Neural Network","be6591fe":"### Image normalization"}}