{"cell_type":{"ddb284a1":"code","67bbd97c":"code","c7c5aa09":"code","2600149f":"code","5b07e68a":"markdown","59a743c1":"markdown","dd9804af":"markdown","7393ebef":"markdown","34037d93":"markdown","25024f8f":"markdown","24d6bd26":"markdown","f7749629":"markdown","1917b9af":"markdown","58892ba6":"markdown","f368ffca":"markdown","c5d30273":"markdown"},"source":{"ddb284a1":"import math \n# In order to use different variables, we have to import the external library \"math\".","67bbd97c":"def bearing (x1, y1, x2, y2): # Arguments - (Two sets of coordinates)\n    dx = x2 - x1\n    dy = y2 - y1\n \n    # Part 1 of the function is about the special cases.\n    # Normally if the dx or dx are equal to 0, the printed answer would be \"ERROR\". \n    # Therefore the answers(outputs) of different special cases of the corresponding inputs have to  be calculated.\n    # The direction of the bearings have to be adjusted if dx= or dy=0.\n    if dx == 0 and dy > 0:\n        B = 0 \n    elif dx > 0 and dy == 0:\n        B = 90 \n    elif dx == 0 and dy < 0:\n        B = 180\n    elif dx < 0 and dy == 0:\n        B = 270\n    elif dx == 0 and dy == 0:\n        B = None #return 0 in this case!\n        \n    # Part 2 of the function is about the normal cases.\n    # B is the the equation for calculating the Whole Circle Bearings\n    # What below the equation is different cases which would appear.\n    else:\n        AB = math.atan(dx\/dy)\n        B = math.degrees(AB) #to change the radian to degree\n\n        # I have to adjust the values by adding different number based on whether the values of dx and dy are positive or negative. \n        if dx > 0 and dy > 0:\n            B = B + 0\n        elif dx > 0 and dy < 0:\n            B = B + 180\n        elif dx < 0 and dy < 0:\n            B = B + 180\n        elif dx < 0 and dy > 0:\n            B = B + 360\n        \n    \n    return(B) # The equation in the end of the function need to be retured","c7c5aa09":"#Special Cases\nprint(bearing(1, 1, 1, 5)) #dx=0 and dy>0\nprint(bearing(1, 1, 5, 1)) #dx>0 and dy=0\nprint(bearing(5, 1, 1, 1)) #dx<0 and dy=0\nprint(bearing(1, 5, 1, 1)) #dx=0 and dy<0\nprint(bearing(1, 1, 1, 1)) #dx=0 and dy=0","2600149f":"#Normal Cases\nprint(bearing(1, 1, 5, 5)) #dx>0 and dy>0\nprint(bearing(0, 5, 1, 1)) #dx>0 and dy<0\nprint(bearing(5, 5, 1, 1)) #dx<0 and dy<0\nprint(bearing(1, 1, 0, 5)) #dx<0 and dy>0","5b07e68a":"## I'd include a more detailed description of the problem\n\n<font size = '+2' color='ff0000'>It would be good to include a picture here to describe the problem eg.<\/font>\n\n![](https:\/\/th.bing.com\/th\/id\/R.f86f9b4fe437e6bdba699db5de318d60?rik=WISrEWj%2b6%2f%2bcuw&pid=ImgRaw&r=0)","59a743c1":"# You test against expected output.  Good to include a table of results for a quck look\n![image.png](attachment:ead569f4-81ce-4a01-8d43-47d73cf65565.png)\n","dd9804af":"## I'd include the expected output in the print statement as well","7393ebef":"# You don't really explain the function here (some in comments below) but a textual description of the code would help here in Markdown","34037d93":"The results above show that all codes function well and every answers are match to the answers that are calculated using the calculator in person. The reason of doing the calculation by hand is to ensure that the answers are correct in the computer.","25024f8f":"                                                   Testing","24d6bd26":"    A decent report, but missing some detail and depth.  Code looks OK, but you don't fully demonstrate that it works correctly for all inputs - the best way to do this is to show actual against expected outputs","f7749629":"<font size='+2' color='ff0000'>\n \n* We would customarily also include a function description as below\n\n<font size='+1' color='ffffff'>\n<code>\n    def bearing(x1, y1, x2, y2):\n        \"\"\"\n        Summary: calculates whole circle bearings between 0 ansd 360 degrees\n        ------------------\n        arguments:\n        x1: x value of the from coordinate\n        y1: y value of the y coordinate\n        x2: x value to the to coordinate\n        y2: y value of the to coordinate\n        ------------------\n        returns:\n        bearing in decimal degrees\n        ------------------\n        notes:\n        coordinates with matching x and y returns a bearing of 0\n        \"\"\"\n\n        #code here\n    <\/code>","1917b9af":"                                               Conclusion\n\nThe aim of the task is to find the whole circle bearings in different cases. It showed the process of using function to deal with different situation when finding the bearings, some testings are included to see if the function works. The result of the tast is satisfied. ","58892ba6":"Several testing codes in terms of both special cases and normal cases are created in order to test whether the function works or not. The testing codes are set to fit different situations for example when dx and dy are both equal to 0 or simply when dx is larger than 0 whilst dy is smaller than 0.","f368ffca":"                                                  Function\n\nThe **Definition** function is used to add the name of the function and the brackets to include the arguments that the data this function requires in order to compute the answer or return the value. The compound statements are the required elements of the equation for calculating the whole circle bearings.\n\nSince there are more than 1 option when finding the bearings, **Conditional Statements** (IF statement, elif, else) need to be used to indicate the conditional branching.","c5d30273":"                                              Introduction\n                                    \nThe task aims to calculate and return the **Whole Circle Bearings**. The importance of knowing the whole circle bearing could help surveyors to check the angle between two features physically. Not only do the normal bearings have to be calculated but also some special cases need to be solved."}}