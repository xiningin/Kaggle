{"cell_type":{"b8a1a73d":"code","9c2ac2d1":"code","0525ff50":"code","fd19e1cc":"code","fc26649d":"code","834e08ae":"code","4c672501":"code","3a2eb26a":"code","8a25e242":"code","72b96cb3":"code","06dadae4":"code","e44f847e":"code","75deb7f7":"code","f21d8f8e":"code","0445a88f":"code","209c7220":"code","2c4273fc":"code","bbfc837a":"code","59baaf1e":"code","49affa01":"code","a4bc9533":"code","6e3961b0":"code","0fa446e4":"code","71d4f600":"code","4b3669ef":"code","b90bc4d5":"code","c56298eb":"code","4a5c9a5a":"markdown"},"source":{"b8a1a73d":"## This is just a practice problem for predicting loan application approvals with a relatively small dataset\n## We'll use pandas for data manupulations and wrangling and sklearn for fitting machine learning models.","9c2ac2d1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegressionCV, SGDClassifier, LogisticRegression\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix","0525ff50":"df= pd.read_csv('..\/input\/train_u6lujuX_CVtuZ9i (1).csv')","fd19e1cc":"df.head()\n# checking the dataset","fc26649d":"df.drop('Loan_ID', axis=1, inplace= True)\n#we'll drop the ID variables as it does not add to the model","834e08ae":"df.info()","4c672501":"obj_cols= [*df.select_dtypes('object').columns]\nobj_cols.remove('Loan_Status')\n# as Loan_Status is a target variable","3a2eb26a":"obj_cols","8a25e242":"plt.figure(figsize=(24, 18))\n\nfor idx, cols in enumerate(obj_cols):\n    \n    plt.subplot(3, 3, idx+1)\n    \n    sns.countplot(cols, data= df, hue='Loan_Status')","72b96cb3":"num_cols= [*df.select_dtypes(['Int64', 'Float64']).columns]\nnum_cols.remove('Loan_Amount_Term')\nnum_cols.remove('Credit_History')\nnum_cols","06dadae4":"plt.figure(figsize=(24, 18))\ncount = 1\n\nfor cols in num_cols:\n    \n    plt.subplot(3, 2, count)\n    \n    sns.boxenplot(x='Loan_Status', y= cols, data= df)\n    \n    count +=1\n    \n    plt.subplot(3, 2, count)\n    \n    sns.distplot(df.loc[df[cols].notna(), cols])\n    \n    count+=1","e44f847e":"df.describe()\n# we see that LoanAmount, Loan_Amount_Term and Credit History have a some missing values.\n\"\"\"we also see that there could be possible outliers in the dataset for ApplicantIncome, CoapplicantIncome \nand Loan_Amount.\"\"\"\n# We see that there are places where there is 0 for Coapplicant income, this might help us create a new feature\n# Credit history seems to be a binary filed with just 0s and 1s, we will consider this a categorical feature.","75deb7f7":"df.isna().sum()\n\"\"\"we see that there are missing values in more than the columns list above, this can also be found from \ndf.info() method\"\"\"\n\"\"\"# we'll use a simple imputer for missing values and create a new column for Loan_Amount_Term \nwhere 1 idicates term 360 months and 0 for rest\"\"\"","f21d8f8e":"df.Loan_Status.replace({'Y': 0, 'N': 1}, inplace= True)","0445a88f":"df['Loan_Status']= df.Loan_Status.astype(int)","209c7220":"dummies= pd.get_dummies(df, drop_first=True)","2c4273fc":"# we will now impute values\n\nSimImp = SimpleImputer()\n\ntrain= pd.DataFrame(SimImp.fit_transform(dummies), columns=dummies.columns)","bbfc837a":"train.sample(10)","59baaf1e":"train.info()\n# we see that all missing values have been replaced","49affa01":"train['Loan_Term_360']= np.where(train.Loan_Amount_Term == 360, 1, 0)\n# we'll create a binary column here for loan amount term and check the data with a count plot\nsns.countplot(y='Loan_Term_360', data= train, hue='Loan_Status')\n# looks like there is some importance and can be used in the model","a4bc9533":"train.drop('Loan_Amount_Term', inplace= True, axis= 1)","6e3961b0":"train.head()\n# we'll also create a new variable to called \"NoCoapplicantIncome\" to check it's significane in the model.","0fa446e4":"NoCoapplicantIncome= np.where(train['CoapplicantIncome']== 0, 1, 0)","71d4f600":"sns.countplot(y=NoCoapplicantIncome, hue=train.Loan_Status)\n\"\"\"we see that regardless of coapplicant income loans have been rejected in equal amounts,\nthis variable might not help\"\"\"","4b3669ef":"#we'll split the data to train and test set\n\nobj_train = train.drop(num_cols, axis=1)\n\n# for this model we'll only use the categorical features for training \n\nX, y = obj_train.drop('Loan_Status', axis=1), obj_train.Loan_Status\n\nX_train, X_test, y_train, y_test= train_test_split(X, y, test_size=0.2, random_state=123, stratify= y)","b90bc4d5":"logit= LogisticRegressionCV()\nlogit.fit(X_train, y_train)\n\nlogit_pred= logit.predict(X_test)\n\nprint(accuracy_score(y_test, logit_pred))\n\nconfusion_matrix(y_test, logit_pred)","c56298eb":"sgd_clf = SGDClassifier()\n\nsgd_clf.fit(X_train, y_train)\n\nsgd_pred= sgd_clf.predict(X_test)\n\nprint(accuracy_score(y_test, sgd_pred))\n\nconfusion_matrix(y_test, sgd_pred)\n","4a5c9a5a":"### We see that we get a better prediction using Logit model. We will stop here. as we have close to 80% accuracy in the model."}}