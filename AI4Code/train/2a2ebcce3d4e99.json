{"cell_type":{"62a31dd4":"code","9dc9ac7e":"code","65713674":"code","525e9451":"code","4b243468":"code","e2cfc897":"code","0bfcb1ea":"code","3312fae9":"code","840733c3":"code","7f0cefa6":"code","e284b499":"code","ac0a43a3":"code","f2caa6d7":"code","d9480b42":"code","d1bf2d4d":"code","fa380459":"code","372b0af5":"code","b698300e":"code","e55b9654":"code","fbef2b7a":"code","46621deb":"code","fe0c1f18":"code","3830bbaa":"code","02a4ba15":"code","9d117aeb":"code","fd10822e":"code","282422f7":"code","240d98b6":"code","f7cd1ad7":"code","a3bcd008":"code","c1c8dbdb":"code","f9ee3af9":"code","ecba07a5":"code","bde67ed9":"code","6b0099ad":"code","3441938f":"code","aa3914db":"code","993f6f34":"code","560373ac":"code","c340c82a":"code","65897b58":"code","d608e55a":"code","993fdcec":"code","07100f01":"code","49e700f3":"code","e9bed705":"code","f71da002":"code","c9b366df":"code","a570e75f":"code","5617a134":"code","d2a8e9be":"code","5586534a":"code","7a195327":"code","eb6970f3":"code","bb328569":"code","344b4f2c":"code","7ac62002":"code","b4ad68ad":"code","50f40124":"code","e06aff1f":"code","b9eecb60":"code","14b341ac":"code","78a79da8":"code","0684578a":"code","d78f03cc":"code","f9d6fbff":"code","4e781ecb":"code","b7cdbe71":"code","832bb8ea":"code","4dee021d":"code","21a68308":"code","fb4e4259":"code","56d80107":"code","33eb3d7a":"code","ff6d9900":"code","e6490e77":"code","f158f69c":"code","9f99a4eb":"code","c06bcded":"code","46d68f13":"code","1bea140a":"markdown","b4d9c3d7":"markdown","4c476ecb":"markdown","25757231":"markdown","497862c1":"markdown","24ec9110":"markdown","a6c6c1d8":"markdown","8b281bd7":"markdown","5ac23385":"markdown"},"source":{"62a31dd4":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","9dc9ac7e":"#bring in the six packs\ndf_train = pd.read_csv('..\/input\/train.csv')\ndf_train","65713674":"#bring in the six packs\ndf_test = pd.read_csv('..\/input\/test.csv')\ndf_test","525e9451":"#check the decoration\ndf_train.columns","4b243468":"#descriptive statistics summary\ndf_train['price'].describe()","e2cfc897":"#histogram\nsns.distplot(df_train['price']);","0bfcb1ea":"#skewness and kurtosis\nprint(\"Skewness: %f\" % df_train['price'].skew())\nprint(\"Kurtosis: %f\" % df_train['price'].kurt())","3312fae9":"#scatter plot view\/saleprice\nvar = 'view'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,8000000));","840733c3":"#scatter plot grade\/saleprice\nvar = 'grade'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,8000000));","7f0cefa6":"#box plot grade\/saleprice\nvar = 'grade'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"price\", data=data)\nfig.axis(ymin=0, ymax=8000000);","e284b499":"var = 'yr_built'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 8))\nfig = sns.boxplot(x=var, y=\"price\", data=data)\nfig.axis(ymin=0, ymax=8000000);\nplt.xticks(rotation=90);","ac0a43a3":"#correlation matrix\ncorrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","f2caa6d7":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'price')['price'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","d9480b42":"corr_matrix = df_train.corr()\ncorr_matrix[\"price\"].sort_values(ascending=False)","d1bf2d4d":"#scatterplot\nsns.set()\ncols = ['price', 'sqft_living', 'sqft_above', 'view', 'grade', 'bathrooms', 'sqft_living15']\nsns.pairplot(df_train[cols], size = 2.5)\nplt.show();","fa380459":"#standardizing data\nsaleprice_scaled = StandardScaler().fit_transform(df_train['price'][:,np.newaxis]);\nlow_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\nhigh_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","372b0af5":"#histogram and normal probability plot\nsns.distplot(df_train['price'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['price'], plot=plt)","b698300e":"#applying log transformation\ndf_train['price'] = np.log(df_train['price'])","e55b9654":"#transformed histogram and normal probability plot\nsns.distplot(df_train['price'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['price'], plot=plt)","fbef2b7a":"#histogram and normal probability plot\nsns.distplot(df_train['grade'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['grade'], plot=plt)","46621deb":"#histogram and normal probability plot\nsns.distplot(df_train['yr_built'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['yr_built'], plot=plt)","fe0c1f18":"#histogram and normal probability plot\nsns.distplot(df_train['bedrooms'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['bedrooms'], plot=plt)","3830bbaa":"#scatter plot \nvar = 'bedrooms'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","02a4ba15":"#scatter plot \nvar = 'bathrooms'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","9d117aeb":"#scatter plot \nvar = 'sqft_living'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","fd10822e":"#scatter plot \nvar = 'sqft_lot'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","282422f7":"#scatter plot \nvar = 'floors'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","240d98b6":"#scatter plot \nvar = 'waterfront'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","f7cd1ad7":"#scatter plot \nvar = 'view'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","a3bcd008":"#scatter plot \nvar = 'condition'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","c1c8dbdb":"#scatter plot \nvar = 'grade'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","f9ee3af9":"#scatter plot \nvar = 'sqft_above'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","ecba07a5":"#scatter plot \nvar = 'sqft_basement'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","bde67ed9":"#scatter plot \nvar = 'yr_built'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","6b0099ad":"#scatter plot \nvar = 'yr_renovated'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","3441938f":"#scatter plot \nvar = 'sqft_living15'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","aa3914db":"#scatter plot \nvar = 'sqft_lot15'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","993f6f34":"#scatter plot \nvar = 'zipcode'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","560373ac":"#scatter plot \nvar = 'lat'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","c340c82a":"#scatter plot \nvar = 'long'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,18));","65897b58":"#import some necessary librairies\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\nimport matplotlib.pyplot as plt  # Matlab-style plotting\nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\n\n\npd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #Limiting floats output to 3 decimal points\n\n","d608e55a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib\n\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\nfrom scipy.stats.stats import pearsonr\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import metrics\n\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\n\n%config InlineBackend.figure_format = 'retina' #set 'png' here when working on notebook\n%matplotlib inline","993fdcec":"df2_train = pd.read_csv(\"..\/input\/train.csv\")\ndf2_test = pd.read_csv(\"..\/input\/test.csv\")","07100f01":"feature_names = ['bedrooms', 'bathrooms', 'sqft_living', 'lat', 'long', 'sqft_living15', 'sqft_lot15',\n                 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode']\nX_test = df2_test[feature_names]","49e700f3":"X_test = pd.get_dummies(X_test)","e9bed705":"X_test","f71da002":"feature_names = ['bedrooms', 'bathrooms', 'sqft_living', 'lat', 'long', 'sqft_living15', 'sqft_lot15',\n                 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode']\nX_train = df2_train[feature_names]","c9b366df":"X_train","a570e75f":"X_train = pd.get_dummies(X_train)\nX_train ","5617a134":"label_name = 'price'\n\ny_train = df2_train[label_name]\n\nprint(y_train.shape)\ny_train.head()","d2a8e9be":"print('X.shape: {}, y.shape{}'.format(X_train.shape, y_train.shape))","5586534a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import expon\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor, GradientBoostingClassifier\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn import datasets\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n%matplotlib inline\n","7a195327":"import lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.linear_model import RidgeCV","eb6970f3":"lgb = lgb.LGBMRegressor(objective='regression', num_leaves = 5, n_estimators=720, learning_rate=0.05,\n                                   max_bin = 55, bagging_fraction = 0.8, bagging_freq = 5, feature_fraction = 0.2319, \n                                   feature_fraction_seed=9, bagging_seed=9, min_data_in_leaf = 6, min_sum_hessian_in_leaf = 11)\n\nlgb.fit(X_train, y_train)","bb328569":"prediction8 = lgb.predict(X_test)\nprint(prediction8.shape)\nprediction8[:20]","344b4f2c":"submission8 = pd.DataFrame({'id':df_test['id'],'price':prediction8})\nsubmission8.head()","7ac62002":"filename = 'House Price Prediction_8.csv'\nsubmission8.to_csv(filename,index=False)\nprint('Saved file: ' + filename)","b4ad68ad":"import xgboost\nxgb = xgboost.XGBRegressor(n_estimators=100, learning_rate=0.08, gamma=0, subsample=0.75, colsample_bytree=1, max_depth=7)\nxgb.fit(X_train, y_train)","50f40124":"prediction9 = xgb.predict(X_test)\nprint(prediction9.shape)\nprediction9[:20]","e06aff1f":"submission9 = pd.DataFrame({'id':df_test['id'],'price':prediction9})\nsubmission9.head()","b9eecb60":"filename = 'House Price Prediction_9.csv'\nsubmission9.to_csv(filename,index=False)\nprint('Saved file: ' + filename)","14b341ac":"from sklearn.ensemble import GradientBoostingRegressor","78a79da8":"GBoost = GradientBoostingRegressor(n_estimators=8000, learning_rate=0.05,\n                                   max_depth=5, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =4)\nGBoost.fit(X_train, y_train)\nprediction7 = GBoost.predict(X_test)\nprint(prediction7.shape)\nprediction7[:20]","0684578a":"submission7 = pd.DataFrame({'id':df_test['id'],'price':prediction7})\nsubmission7.head()","d78f03cc":"filename = 'House Price Prediction_7.csv'\nsubmission7.to_csv(filename,index=False)\nprint('Saved file: ' + filename)","f9d6fbff":"import numpy as np\n\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n","4e781ecb":"X_train2, X_test2, y_train2, y_test2 = train_test_split(X_train, y_train, test_size=0.25, random_state=123)","b7cdbe71":"X_train.shape","832bb8ea":"X_test2.shape","4dee021d":"y_test2.shape","21a68308":"# \uac1c\ubcc4 ML \ubaa8\ub378\uc744 \uc704\ud55c Classifier \uc0dd\uc131.\nknn_clf  = KNeighborsRegressor(n_neighbors=4)\nrf_clf = RandomForestRegressor(n_estimators=1000, random_state=0)\nada_clf = AdaBoostRegressor(n_estimators=1000)\nGboost = GradientBoostingRegressor(n_estimators=8000, learning_rate=0.05, max_depth=5)","fb4e4259":"# \ucd5c\uc885 Stacking \ubaa8\ub378\uc744 \uc704\ud55c Classifier\uc0dd\uc131. \n\nGBoost_stacking = GradientBoostingRegressor(n_estimators=8000, learning_rate=0.05,\n                                   max_depth=5, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =4)\n","56d80107":"# \uac1c\ubcc4 \ubaa8\ub378\ub4e4\uc744 \ud559\uc2b5. \nknn_clf.fit(X_train, y_train)\nrf_clf.fit(X_train , y_train)\nada_clf.fit(X_train, y_train)\nGboost.fit(X_train, y_train)","33eb3d7a":"# \ud559\uc2b5\ub41c \uac1c\ubcc4 \ubaa8\ub378\ub4e4\uc774 \uac01\uc790 \ubc18\ud658\ud558\ub294 \uc608\uce21 \ub370\uc774\ud130 \uc14b\uc744 \uc0dd\uc131\nknn_pred = knn_clf.predict(X_train)\nrf_pred = rf_clf.predict(X_train)\nada_pred = ada_clf.predict(X_train)\ngbm_pred = Gboost.predict(X_train)\n","ff6d9900":"pred = np.array([knn_pred, rf_pred, ada_pred, gbm_pred])\nprint(pred.shape)\n\n# transpose\ub97c \uc774\uc6a9\ud574 \ud589\uacfc \uc5f4\uc758 \uc704\uce58 \uad50\ud658. \uceec\ub7fc \ub808\ubca8\ub85c \uac01 \uc54c\uace0\ub9ac\uc998\uc758 \uc608\uce21 \uacb0\uacfc\ub97c \ud53c\ucc98\ub85c \ub9cc\ub4e6. \npred2 = np.transpose(pred)\nprint(pred2.shape)\nprint(y_test2.shape)\nprint(X_test2.shape)","e6490e77":"GBoost_stacking.fit(pred2, y_train)","f158f69c":"knn_pred_f = knn_clf.predict(X_test)\nrf_pred_f = rf_clf.predict(X_test)\nada_pred_f = ada_clf.predict(X_test)\ngbm_pred_f = Gboost.predict(X_test)\n\npred_f = np.array([knn_pred_f, rf_pred_f, ada_pred_f,gbm_pred_f])\npred_f2 = np.transpose(pred_f)","9f99a4eb":"prediction18 = GBoost_stacking.predict(pred_f2)\nprint(prediction18.shape)\nprediction18[:20]","c06bcded":"submission18 = pd.DataFrame({'id':df_test['id'],'price':prediction18})\nsubmission18.head()","46d68f13":"filename = 'House Price Prediction_18.csv'\nsubmission18.to_csv(filename,index=False)\nprint('Saved file: ' + filename)","1bea140a":"# Parameter (\ub9e4\uac1c\ubcc0\uc218) \ud29c\ub2dd\uc744 \ud1b5\ud55c \ubaa8\ub378 \uc131\ub2a5 \uac1c\uc120","b4d9c3d7":"# Stacking","4c476ecb":"# GBR(GradientBoostingRegressor)","25757231":"# \ubd84\uc11d \uc124\uc815","497862c1":"# Thank you","24ec9110":"# Light GBM","a6c6c1d8":"# \uc124\uc815","8b281bd7":"# EDA","5ac23385":"# Simple xgboost"}}