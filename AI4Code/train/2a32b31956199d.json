{"cell_type":{"fde671e3":"code","97ff8090":"code","6a8dd66b":"code","8db4e8f2":"code","5ebcaf22":"code","a8ed94a6":"code","9b8566c5":"code","fbdaff89":"code","4dfda8c9":"code","1f7b6b0d":"code","ba2806dc":"code","8a0fe2bb":"code","c039a570":"code","5cfc2293":"code","539c7d52":"code","5ef1a618":"code","a4e1107d":"code","5a911447":"code","fb336e8b":"code","8053ebf4":"code","aa035eb8":"code","615e68e5":"code","aa4042e3":"code","0ba6ffa9":"code","74bc7330":"markdown","ad50fc42":"markdown","95551bc9":"markdown","a5195e4a":"markdown","f8e38275":"markdown","5d1cf686":"markdown","9ae5de1c":"markdown","9ee6c907":"markdown"},"source":{"fde671e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","97ff8090":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")","6a8dd66b":"train_data = pd.read_csv(\"\/kaggle\/input\/mobile-price-classification\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/mobile-price-classification\/test.csv\")","8db4e8f2":"train_data.head()","5ebcaf22":"train_data.columns","a8ed94a6":"train_data.isna().sum()","9b8566c5":"train_data.describe()","fbdaff89":"from tqdm.auto import tqdm\ncategorical_columns = []\nnumerical_columns = []\nfor c in tqdm(train_data.columns,total=len(train_data.columns)):\n    if(len(train_data[c].value_counts())<=10):\n        categorical_columns.append(c)\n    else:\n        numerical_columns.append(c)","4dfda8c9":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report","1f7b6b0d":"y = train_data[\"price_range\"]\nX = train_data.drop(columns=[\"price_range\"],axis=1)","ba2806dc":"def calculate_metrics(X,y):\n    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)\n    \n    logistic = LogisticRegression()\n    logistic.fit(X_train,y_train)\n\n    y_pred = logistic.predict(X_test)\n\n    \n    print(classification_report(y_test,y_pred))","8a0fe2bb":"calculate_metrics(X,y)","c039a570":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","5cfc2293":"def transform_numeric_features(train_data,numerical_columns):\n    for col in numerical_columns:\n        X = np.array(train_data[col]).reshape(-1,1)\n        train_data[col] = scaler.fit_transform(X)\n    return train_data","539c7d52":"train_data_transformed = transform_numeric_features(train_data,numerical_columns)","5ef1a618":"y_new = train_data_transformed[\"price_range\"]\nX_new = train_data_transformed.drop(columns=[\"price_range\"],axis=1)","a4e1107d":"categorical_columns.remove(\"price_range\")\nX_new = pd.get_dummies(X_new,columns=categorical_columns,prefix_sep=\"_\")","5a911447":"calculate_metrics(X_new,y_new)","fb336e8b":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nbestfeatures = SelectKBest(score_func=chi2, k=10)\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Specs','Score']  #naming the dataframe columns\ntop_10_important_features = featureScores.nlargest(10,'Score')[\"Specs\"].values","8053ebf4":"X3 = train_data[top_10_important_features]\ny3 = train_data[\"price_range\"]","aa035eb8":"from tqdm.auto import tqdm\ncategorical_columns1 = []\nnumerical_columns1 = []\nfor c in tqdm(X3.columns,total=len(X3.columns)):\n    if(len(X3[c].value_counts())<=10):\n        categorical_columns1.append(c)\n    else:\n        numerical_columns1.append(c)","615e68e5":"X3 = transform_numeric_features(X3,numerical_columns1)","aa4042e3":"X3 = pd.get_dummies(X3,columns=categorical_columns1,prefix_sep=\"_\")","0ba6ffa9":"calculate_metrics(X3,y3)","74bc7330":"### price_range is our dependant variable and the rest of the features are independant variables.","ad50fc42":"### We achieved 63% accuracy without transforming and standardizing the data","95551bc9":"### The following features are numerical variables and must be standardised before we can train our predictive model","a5195e4a":"### No missing data on the training data","f8e38275":"### When we used top 10 important features then our accuracy increases from 96% to 98%","5d1cf686":"### Accuracy increased from 63% to 96% when we standardized and transformed the data for our analysis. This is the power of Data Wrangling.","9ae5de1c":"### First let us try and do a classification without any data standardization and assuming all the data as numeric in nature","9ee6c907":"### Now let us only consider relevant features in our analysis and see how the accuracy gets affected."}}