{"cell_type":{"7a7741ad":"code","f17d9d7c":"code","dda407a7":"code","c2d726c5":"code","595a146e":"code","5c3e9894":"code","ea6f62ba":"code","40708d99":"code","6c0ab127":"markdown","8c0b3de5":"markdown","5aa6aa16":"markdown","0609a7b9":"markdown"},"source":{"7a7741ad":"import cv2\nimport datetime\nimport gc\nimport glob\nimport imagehash\nimport math\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport sys\nimport tqdm\nimport PIL","f17d9d7c":"root_dir = '..\/input\/petfinder-pawpularity-score\/'\ntrain_dir = f'{root_dir}\/train\/'\ntrain_csv_path = f'{root_dir}train.csv'\ntrain_df = pd.read_csv(train_csv_path)\ntrain_df","dda407a7":"### from https:\/\/www.kaggle.com\/kwk100\/siim-covid-19-duplicate-training-images\ndef images_find_duplicates(image_files, threshold=0.9):\n    \"\"\"\n    Function to find duplicates in images.\n    References: https:\/\/www.kaggle.com\/appian\/let-s-find-out-duplicate-images-with-imagehash\n    Args:\n        image_files:\n        threshold:\n\n    Returns:\n\n    \"\"\"\n    funcs = [imagehash.average_hash, imagehash.phash, imagehash.dhash, imagehash.whash]\n    image_ids = image_files\n    hashes = []\n    for file in tqdm.tqdm(image_files):\n        image = PIL.Image.open(file)\n        hashes.append(np.array([f(image).hash for f in funcs]).reshape(256))\n    hashes_all = np.array(hashes)\n\n    # Comparisons without Pytorch\n    sim_list = []\n    for i in tqdm.tqdm(range(hashes_all.shape[0])):\n        sim_list.append(np.sum(hashes_all[i] == hashes_all, axis=1)\/256)\n\n    # nxn-matrix of similarities (n = # of images), upper triangular matrix\n    similarities = np.triu(np.array(sim_list), 1)\n\n    idx_pair = np.where(similarities > threshold)\n    df_pairs = pd.DataFrame({'image1': [image_ids[i] for i in list(idx_pair[0])],\n                             'image2': [image_ids[i] for i in list(idx_pair[1])],\n                             'similarity': [similarities[i1, i2] for i1, i2 in zip(idx_pair[0], idx_pair[1])]})\n\n    idx_group = np.zeros(len(image_files))\n    group_id = 1\n    for i1, i2 in zip(idx_pair[0], idx_pair[1]):\n        if idx_group[i1] == 0 and idx_group[i2] == 0:\n            idx_group[i1] = group_id\n            idx_group[i2] = group_id\n            group_id += 1\n        elif idx_group[i1] != 0 and idx_group[i2] == 0:\n            idx_group[i2] = idx_group[i1]\n        elif idx_group[i1] == 0 and idx_group[i2] != 0:\n            idx_group[i1] = idx_group[i2]\n        elif idx_group[i1] != 0 and idx_group[i2] != 0 and idx_group[i1] != idx_group[i2]:\n            common_id = min(idx_group[i1], idx_group[i2])\n            idx_group[idx_group == idx_group[i1]] = common_id\n            idx_group[idx_group == idx_group[i2]] = common_id\n\n    group_list = []\n    for i in range(1, group_id + 1):\n        group_ids = list(np.where(idx_group == i)[0])\n        if len(group_ids) > 0:\n            group_list.append([image_ids[j] for j in group_ids])\n\n    return df_pairs, group_list","c2d726c5":"train_files = []\nfor image in train_df['Id']:\n    image_path = f'{train_dir}{image}.jpg'\n    train_files.append(image_path)\nprint(f'Number of Petfinder training files: {len(train_files)}')","595a146e":"total_files = []\ntotal_files.extend(train_files)","5c3e9894":"df_pairs, group_list = images_find_duplicates(total_files, threshold=0.90)\nprint(f'\\nNumber of duplicate pairs: {len(df_pairs)}')","ea6f62ba":"### from https:\/\/stackoverflow.com\/questions\/41793931\/plotting-images-side-by-side-using-matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef img_is_color(img):\n\n    if len(img.shape) == 3:\n        # Check the color channels to see if they're all the same.\n        c1, c2, c3 = img[:, : , 0], img[:, :, 1], img[:, :, 2]\n        if (c1 == c2).all() and (c2 == c3).all():\n            return True\n\n    return False\n\ndef show_image_list(list_images, list_titles=None, list_cmaps=None, grid=True, num_cols=2, figsize=(20, 10), title_fontsize=30):\n    '''\n    Shows a grid of images, where each image is a Numpy array. The images can be either\n    RGB or grayscale.\n\n    Parameters:\n    ----------\n    images: list\n        List of the images to be displayed.\n    list_titles: list or None\n        Optional list of titles to be shown for each image.\n    list_cmaps: list or None\n        Optional list of cmap values for each image. If None, then cmap will be\n        automatically inferred.\n    grid: boolean\n        If True, show a grid over each image\n    num_cols: int\n        Number of columns to show.\n    figsize: tuple of width, height\n        Value to be passed to pyplot.figure()\n    title_fontsize: int\n        Value to be passed to set_title().\n    '''\n\n    assert isinstance(list_images, list)\n    assert len(list_images) > 0\n    assert isinstance(list_images[0], np.ndarray)\n\n    if list_titles is not None:\n        assert isinstance(list_titles, list)\n        assert len(list_images) == len(list_titles), '%d imgs != %d titles' % (len(list_images), len(list_titles))\n\n    if list_cmaps is not None:\n        assert isinstance(list_cmaps, list)\n        assert len(list_images) == len(list_cmaps), '%d imgs != %d cmaps' % (len(list_images), len(list_cmaps))\n\n    num_images  = len(list_images)\n    num_cols    = min(num_images, num_cols)\n    num_rows    = int(num_images \/ num_cols) + (1 if num_images % num_cols != 0 else 0)\n\n    # Create a grid of subplots.\n    fig, axes = plt.subplots(num_rows, num_cols, figsize=figsize)\n    \n    # Create list of axes for easy iteration.\n    if isinstance(axes, np.ndarray):\n        list_axes = list(axes.flat)\n    else:\n        list_axes = [axes]\n\n    for i in range(num_images):\n\n        img    = list_images[i]\n        title  = list_titles[i] if list_titles is not None else 'Image %d' % (i)\n        cmap   = list_cmaps[i] if list_cmaps is not None else (None if img_is_color(img) else 'gray')\n        \n        list_axes[i].imshow(img, cmap=cmap)\n        list_axes[i].set_title(title, fontsize=title_fontsize) \n        list_axes[i].grid(grid)\n\n    for i in range(num_images, len(list_axes)):\n        list_axes[i].set_visible(False)\n\n    fig.tight_layout()\n    _ = plt.show()","40708d99":"for path1,path2 in zip(df_pairs['image1'],df_pairs['image2']):\n    image_id1 = path1.split('\/')[-1].split('.')[0]\n    image_id2 = path2.split('\/')[-1].split('.')[0]\n    image1 = cv2.imread(path1)\n    image2 = cv2.imread(path2)\n    p1 = train_df[train_df.Id == image_id1]['Pawpularity'].values\n    p2 = train_df[train_df.Id == image_id2]['Pawpularity'].values\n#     show_image_list(list_images=[image1, image2], \n#                     list_titles=[f'{image_id1}-{p1}', f'{image_id2}-{p2}'],\n#                     num_cols=3,\n#                     figsize=(20, 10),\n#                     grid=False,\n#                     title_fontsize=20)\n    print(image_id1,image_id2)","6c0ab127":"# **Load data**","8c0b3de5":"# **Show duplicate images with image Id and Pawpularity score**","5aa6aa16":"# **Find duplicate images**","0609a7b9":"# **Import 3rdparty**"}}