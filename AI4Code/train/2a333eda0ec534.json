{"cell_type":{"e6f0a4b6":"code","97b5f517":"code","293fa117":"code","c5858b13":"code","05e6f914":"code","088ec559":"code","e07f159e":"code","bd6b9a96":"code","1db12860":"code","32934334":"code","6ccd6db6":"markdown","7d13db8b":"markdown"},"source":{"e6f0a4b6":"%%time\n# INSTALL RAPIDS OFFLINE (FROM KAGGLE DATASET). TAKES 1 MINUTE :-)\nimport sys\n!cp ..\/input\/rapids\/rapids.0.11.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + [\"\/opt\/conda\/envs\/rapids\/lib\/python3.6\"] + [\"\/opt\/conda\/envs\/rapids\/lib\/python3.6\/site-packages\"] + sys.path\n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","97b5f517":"from sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score, roc_auc_score\nimport cudf, cuml\nimport cupy as cp\nfrom cuml.linear_model import LogisticRegression\nimport numpy as np\n#from cuml.metrics import accuracy_score\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport gc\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","293fa117":"from cuml.linear_model import Ridge\n","c5858b13":"train = cudf.read_csv('..\/input\/multi-cat-encodings\/X_train_te.csv')\ntest = cudf.read_csv('..\/input\/multi-cat-encodings\/X_test_te.csv')\nsample_submission = cudf.read_csv('..\/input\/cat-in-the-dat-ii\/sample_submission.csv')","05e6f914":"train_oof = cp.zeros((train.shape[0],))\ntest_preds = 0\ntrain_oof.shape","088ec559":"def auc_cp(y_true,y_pred):\n    y_true = y_true.astype('float32')\n    ids = np.argsort(-y_pred) # we want descedning order\n    y_true = y_true[ids.values]\n    y_pred = y_pred[ids.values]\n    zero = 1 - y_true\n    acc_one = cp.cumsum(y_true)\n    acc_zero = cp.cumsum(zero)\n    sum_one = cp.sum(y_true)\n    sum_zero = cp.sum(zero)\n    tpr = acc_one\/sum_one\n    fpr = acc_zero\/sum_zero\n    return calculate_area(fpr,tpr)\n\ndef calculate_area(fpr,tpr):\n    return cp.sum((fpr[1:]-fpr[:-1])*(tpr[1:]+tpr[:-1]))\/2","e07f159e":"features = test.columns\n","bd6b9a96":"%%time\nn_splits = 5\nkf = KFold(n_splits=n_splits, random_state=137)\nscores = []\n\nfor jj, (train_index, val_index) in enumerate(kf.split(train)):\n    print(\"Fitting fold\", jj+1)\n    train_features = train.loc[train['fold_column'] != jj][features]\n    train_target = train.loc[train['fold_column'] != jj]['target'].values.astype(float)\n    \n    val_features = train.loc[train['fold_column'] == jj][features]\n    val_target = train.loc[train['fold_column'] == jj]['target'].values.astype(float)\n    \n    model = Ridge(alpha = 5)\n    model.fit(train_features, train_target)\n    val_pred = model.predict(val_features)\n    train_oof[val_index] = val_pred\n    val_target = cp.asarray(val_target)\n    score = auc_cp(val_target, val_pred)\n    print(\"Fold AUC:\", score)\n    scores.append(cp.asnumpy(score))\n    test_preds += model.predict(test).values\/n_splits\n    del train_features, train_target, val_features, val_target\n    gc.collect()\n    \nprint(\"Mean AUC:\", np.mean(scores))","1db12860":"sample_submission['target'] = test_preds\nsample_submission.to_csv('submission.csv', index=False)","32934334":"cp.save('test_preds', test_preds)\ncp.save('train_oof', train_oof)","6ccd6db6":"[Rapids](https:\/\/rapids.ai) is an open-source GPU accelerated Data Sceince and Machien Learnign library, developed adn mainatained by [Nvidia](https:\/\/www.nvidia.com). It is designed to be compatible with many existing CPU tools, such as Pandas, scikit-learn, numpy, etc. It enables **massive** acceleration of many data-science and machine learning tasks, oftentimes by a factor fo 100X, or even more. \n\nRapids is still undergoing developemnt, and as of right now it's not availabel in the Kaggle Docker environment. If you are interested in installing and riunning Rapids locally on your own machine, then you shoudl [refer to the followong instructions](https:\/\/rapids.ai\/start.html).\n\nThe first successful install of a Rapids library on kaggle was done by [Chris Deotte](https:\/\/www.kaggle.com\/cdeotte) in the follwiong [Digit Recognizer kernel](https:\/\/www.kaggle.com\/cdeotte\/rapids-gpu-knn-mnist-0-97). An improved install version that uses a Kaggle Dataset for install can be found [here](https:\/\/www.kaggle.com\/cdeotte\/rapids-data-augmentation-mnist-0-985).  In this kerenl we'll follow that approach.","7d13db8b":"In this kernels we'll use Ridge regression as our model. Ridge regression is actually a very good choice for **classification** problem when the evaluation metric is AUC - it often performs nearly as well, or even better, than Logistic Reression. "}}