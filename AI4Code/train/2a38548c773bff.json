{"cell_type":{"0e5ef994":"code","82bcf0bc":"code","ee455a63":"code","a0d644a7":"code","98813b05":"code","6b143dc0":"code","e479b9d6":"code","377520c1":"code","c05325e9":"code","9bd99e02":"code","ce7bb7bb":"code","47ebeeba":"code","83173b0e":"code","185c2057":"markdown","bd018f90":"markdown","6a739ad3":"markdown"},"source":{"0e5ef994":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","82bcf0bc":"# libs\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import *\nfrom sklearn.ensemble import *\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix","ee455a63":"data = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndata","a0d644a7":"# insights about the data\ndata.describe()","98813b05":"x = data.loc[:,:\"time\"]\ny = data.loc[:,[\"DEATH_EVENT\"]]\nx_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.2, random_state=2)","6b143dc0":"clf_dt = DecisionTreeClassifier(criterion=\"gini\",max_features=\"log2\",max_depth=2,random_state=1)\nclf_dt = clf_dt.fit(x_train,y_train)\nclfdt_pred = clf_dt.predict(x_test)\nclf_dt.score(x_test,y_test)","e479b9d6":"# building heatmap\ncf_matrix = confusion_matrix(y_test, clfdt_pred)\nsns.heatmap(cf_matrix, cmap='Oranges',annot = True)","377520c1":"x = data.loc[:,:\"time\"]\ny = data.loc[:,[\"DEATH_EVENT\"]]\nx_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.2, random_state=1)","c05325e9":"clf_random = RandomForestClassifier(max_depth=4,max_features=\"log2\",random_state=4)\nclf_random = clf_random.fit(x_train,y_train)\nclfrandom_pred = clf_random.predict(x_test)\nclf_random.score(x_test,y_test)","9bd99e02":"# building heatmap\ncf_matrix = confusion_matrix(y_test, clfrandom_pred)\nsns.heatmap(cf_matrix, cmap='Oranges',annot = True)","ce7bb7bb":"x = data.loc[:,:\"time\"]\ny = data.loc[:,[\"DEATH_EVENT\"]]\nx_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.2, random_state=2)","47ebeeba":"clf_grad = GradientBoostingClassifier(learning_rate=0.1,max_depth=2)\nclf_grad.fit(x_train,y_train)\nclfgrad_pred = clf_grad.predict(x_test)\nclf_grad.score(x_test,y_test)","83173b0e":"# building heatmap\ncf_matrix = confusion_matrix(y_test, clfgrad_pred)\nsns.heatmap(cf_matrix, cmap='Oranges',annot = True)","185c2057":"# DecisionTree classifier","bd018f90":"# **Gradient boost approach**","6a739ad3":"# RandomForest classification"}}