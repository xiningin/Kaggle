{"cell_type":{"30b885aa":"code","0b54f377":"code","3dce21bc":"code","d71eec5e":"code","93009803":"code","9fc1b0a3":"code","984c0977":"code","3d7381ee":"code","029ced0b":"code","de8d3f89":"code","1a0f3ed5":"code","f04c8fe0":"code","29c85930":"code","449dd9f9":"code","f003a735":"code","b96ad795":"code","e14e0e0d":"code","dcf051c3":"code","e385631e":"code","e009d3bb":"code","4cc797bf":"code","9a176b69":"code","53c7e7b2":"code","ba7692b7":"markdown","9ccf66dd":"markdown","1f46362f":"markdown","47f70049":"markdown"},"source":{"30b885aa":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\n#Visualization","0b54f377":"folder_name = \"\/kaggle\"","3dce21bc":"train_features = pd.read_csv(folder_name + \"\/input\/lish-moa\/train_features.csv\")\ntest_features = pd.read_csv(folder_name +  \"\/input\/lish-moa\/test_features.csv\")","d71eec5e":"train_features.head(5)","93009803":"test_features.head(5)","9fc1b0a3":"print('We have {} training rows and {} test rows.'.format(train_features.shape[0], test_features.shape[0]))\nprint('We have {} training columns and {} test columns.'.format(train_features.shape[1], test_features.shape[1]))","984c0977":"print(f'We have {train_features.isnull().values.sum()} missing values in train data')\nprint(f'We have {test_features.isnull().values.sum()} missing values in test data')","3d7381ee":"print(train_features.describe())","029ced0b":"train_features.info()","de8d3f89":"indexName = train_features.columns.tolist()\ntype(indexName)","1a0f3ed5":"gIndexName = [name for name in indexName if 'g-' in name]","f04c8fe0":"gIndexData = train_features.loc[:,gIndexName]\ngIndexData.head(5)","29c85930":"g_mean_df = []\ng_std_df = [] ","449dd9f9":"for index in gIndexName:\n    mData = gIndexData[index].mean()\n    gData = gIndexData[index].std()\n    g_mean_df.append(mData) #print(gIndexData.std(axis=0));\n    g_std_df.append(gData)","f003a735":"plt.plot( gIndexName , g_mean_df  ,linestyle='--', linewidth=1) \nplt.plot(gIndexName, g_std_df, linestyle='-', linewidth=2)\nplt.title('Line Graph w\/ different linestyles and linewidths', fontsize=20) \nplt.ylabel('Cummulative Num', fontsize=14)\nplt.xlabel('Date', fontsize=14)\nplt.legend(fontsize=12, loc='best')\nplt.show()\n","b96ad795":"cIndexName = [name for name in indexName if 'c-' in name]","e14e0e0d":"cIndexData = train_features.loc[:,cIndexName]\ncIndexData.head(5)","dcf051c3":"c_mean_df = []\nc_std_df = [] ","e385631e":"for index in cIndexName:\n    mData = cIndexData[index].mean()\n    cData = cIndexData[index].std()\n    c_mean_df.append(mData) #print(gIndexData.std(axis=0));\n    c_std_df.append(cData)","e009d3bb":"plt.plot( cIndexName , c_mean_df  ,linestyle='--', linewidth=1) \nplt.plot(cIndexName, c_std_df, linestyle='-', linewidth=2)\nplt.title('Line Graph w\/ different linestyles and linewidths', fontsize=20) \nplt.ylabel('Cummulative Num', fontsize=14)\nplt.xlabel('Date', fontsize=14)\nplt.legend(fontsize=12, loc='best')\nplt.show()\n","4cc797bf":"plt.figure(figsize=(16,6))\nax=sns.countplot(train_features['cp_type'],palette=\"hls\",order = train_features['cp_type'].value_counts().index)\nplt.title(\"Pitch (quality of sound - how high\/low the tone is)\", fontsize=16)\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nplt.ylabel(\"Frequency\", fontsize=14)\nplt.xlabel(\"\");","9a176b69":"plt.figure(figsize=(16,6))\nax=sns.countplot(train_features['cp_dose'],palette=\"hls\",order = train_features['cp_dose'].value_counts().index)\nplt.title(\"Pitch (quality of sound - how high\/low the tone is)\", fontsize=16)\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nplt.ylabel(\"Frequency\", fontsize=14)\nplt.xlabel(\"\");","53c7e7b2":"plt.figure(figsize=(16,6))\nax=sns.countplot(train_features['cp_time'],palette=\"hls\",order = train_features['cp_time'].value_counts().index)\nplt.title(\"Pitch (quality of sound - how high\/low the tone is)\", fontsize=16)\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nplt.ylabel(\"Frequency\", fontsize=14)\nplt.xlabel(\"\");","ba7692b7":"## c \uc5f4 ","9ccf66dd":"## graph","1f46362f":"## g \uc5f4 ","47f70049":"## \uc57d\ubb3c\uc791\uc6a9\ub9e4\ucee4\ub2c8\uc998(MOA, Drug Mode of Action)\n\n- \uc57d\ubb3c\uc774 \uc6b0\ub9ac \ubab8\uc18d\uc5d0\uc11c \uc5b4\ub5a4\uc77c\uc744 \ubc8c\uc774\ub294\uac00?\n- g- signify gene expression data \uc720\uc804\uc790\ubc1c\ud604\uc790\ub8cc \n- c- signify cell viability data\n- cp_type indicates samples treated with a compound\n- ctrl_vehicle : control perturbation\n- dose high or low\n- cp_dose treatment duration(24,48,72) \n\n\n\ucd9c\ucc98) http:\/\/geference.blogspot.com\/2012\/08\/drug-mode-of-action.html"}}