{"cell_type":{"2e311b2c":"code","27064ba0":"code","b4257f5e":"code","63756398":"code","44536087":"code","3ef9e83e":"code","17df5512":"code","bb1cee28":"code","40b36e85":"code","7f21c5a4":"code","d83391e3":"code","37ec3bbe":"code","47f973bb":"code","b163d5c3":"code","ab85323c":"code","e441b843":"markdown","e52ee28b":"markdown","dda59154":"markdown","8713df5f":"markdown","b904909e":"markdown","ec0e57fc":"markdown","115c1bd9":"markdown","a924f451":"markdown","1421111a":"markdown"},"source":{"2e311b2c":"import os\nimport zipfile\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tqdm import tqdm_notebook\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img,img_to_array,array_to_img\n%matplotlib inline\nfrom scipy.stats import norm\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras.layers import Dense,Layer,Lambda,Add,Multiply,Input,Conv2D,MaxPool2D,Flatten,Conv2DTranspose,Reshape,Dropout,GlobalAveragePooling2D,GaussianNoise\nfrom tensorflow.keras.models import Sequential,Model\nfrom tensorflow.keras.utils import plot_model\nfrom PIL import Image\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.losses import mse\nimport pandas as pd\nimport shutil\nfrom skimage.filters import threshold_local","27064ba0":"X_train_path = \"..\/input\/synthetic-holograms64x64x1\/X_train_HOLO\/Labels\/\"\ny_train_path = \"..\/input\/synthetic-holograms64x64x1\/y_train_obj\/objects\/\"","b4257f5e":"X_train_list = os.listdir(path=X_train_path+'.')\ny_train_list = os.listdir(path=y_train_path+'.')","63756398":"X_train_list.sort()\ny_train_list.sort()\nprint(X_train_list[1:10])\nprint(y_train_list[1:10])","44536087":"X_train = np.zeros((1,64,64,1))\ny_train = np.zeros((1,64,64,1))\ni = 0\nfor a,b in zip(X_train_list,y_train_list):\n    if i%100==0:\n        print(i,end=\" \")\n    i+=1\n    imx = load_img(path=X_train_path+a,color_mode='grayscale')\n    imy = load_img(path=y_train_path+b,color_mode='grayscale')\n    imx = np.asarray(imx).reshape(1,64,64,1)\n    imy = np.asarray(imy).reshape(1,64,64,1)\n    X_train = np.concatenate((X_train,imx),axis=0)\n    y_train = np.concatenate((y_train,imy),axis=0)","3ef9e83e":"X_train = X_train[1:]#\/255.\ny_train = y_train[1:]#\/255.","17df5512":"# Train data\nfig = plt.figure(figsize=(8,8))\n\nfor i in range(16):\n    test = X_train[i*30].reshape(64,64)\n    plt.subplot(4,4,i+1)\n    plt.imshow(test,cmap='gray')\n    plt.axis('off')\nplt.show()","bb1cee28":"# Train label data\nfig = plt.figure(figsize=(8,8))\n\nfor i in range(16):\n    test = y_train[i*30].reshape(64,64)\n    plt.subplot(4,4,i+1)\n    plt.imshow(test,cmap='gray')\n    plt.axis('image')\n    plt.xticks([])\n    plt.yticks([])\nplt.show()","40b36e85":"shap = (64,64,1)\ninp = Input(shape=shap)\nd1 = Conv2D(filters=20,kernel_size=3,strides=2,activation='relu',padding='same')(inp)\ne1 = Conv2DTranspose(filters=1,kernel_size=3,strides=2,activation='relu',padding='same')(d1)\nmodel = Model(inp,e1)","7f21c5a4":"plot_model(model,to_file='model.png',show_shapes=True)\ndata = plt.imread('model.png')\nplt.figure(figsize=(10,10))\nplt.imshow(data,cmap='gray')\nplt.show()","d83391e3":"model.summary()","37ec3bbe":"model.compile(optimizer='adam',loss=\"mse\",metrics=['mse'])","47f973bb":"training = model.fit(X_train,y_train,batch_size=16,epochs=200,workers=-1,use_multiprocessing=True)","b163d5c3":"fig = plt.figure(figsize=(8,8))\nplt.plot(training.history['loss'][5:])\n#plt.plot(training.history['val_loss'][5:])\n#plt.legend(['training loss','testing loss'])\nplt.xlabel('number of Epochs')\nplt.ylabel('Mean Squared error Loss')\n#plt.savefig('Loss_image')\nplt.show()","ab85323c":"fig = plt.figure(figsize=(8,8))\ny_pred = model.predict(X_train)\n\nfor i in range(4):\n    xte = X_train[i*200].reshape(64,64) #X_test image\n    yte = y_train[i*200].reshape(64,64) #y_test image\n    cnn = y_pred[i*200].reshape(64,64) #output of the CNN\n    local_thresh = threshold_local(cnn,block_size = 11,offset=25)\n    fin = cnn > local_thresh         # final output after local thresholding\n\n    plt.subplot(4,4,i*4+1)\n    plt.imshow(xte,cmap='gray')\n    plt.axis('off')\n\n    plt.subplot(4,4,i*4+2)\n    plt.imshow(yte,cmap='gray')\n    plt.axis('image')\n    plt.xticks([])\n    plt.yticks([])\n\n    plt.subplot(4,4,i*4+3)\n    plt.imshow(cnn,cmap='gray')\n    plt.axis('off')\n\n    plt.subplot(4,4,i*4+4)\n    plt.imshow(fin,cmap='gray')\n    plt.axis('image')\n    plt.xticks([])\n    plt.yticks([])\nplt.savefig('output_pic')\nplt.show()","e441b843":"# Proccessing Data","e52ee28b":"# Importing essential Libraries","dda59154":"# Loss Curve","8713df5f":"# Training Model","b904909e":"# Creating CNN Model","ec0e57fc":"# Input Data","115c1bd9":"# Creating Tensor","a924f451":"# Expected Output","1421111a":"# Final Output of CNN and after Local Thresholding"}}