{"cell_type":{"6750c3f3":"code","f6a2accf":"code","547043a5":"code","dfa1b23b":"code","b7af6f16":"code","daa5936e":"code","9dfde578":"code","d6275f29":"code","9d542d6b":"code","f23d9c61":"code","7cff7a89":"code","cd34f5d0":"code","e0862583":"code","4b323e55":"code","e9cecb92":"code","a2515024":"code","e0f43b00":"code","8310dba9":"code","fb06c0fa":"code","4cead44b":"code","f5f5de31":"code","43650ce1":"code","3ae2db8b":"code","f9bb0cb6":"code","48c03bd9":"code","4fc2d3a6":"code","6dc9279c":"code","3bfc34b1":"code","6f9990e1":"code","06b4a62c":"code","b2d287be":"code","1bf49ba1":"code","77797f3d":"code","0adb809f":"code","2217c086":"code","e0dceca5":"code","1fb05e65":"code","82ad21d0":"code","ef6f5d5b":"code","f1d912eb":"code","9d82dfe2":"code","644ce53f":"code","528147a4":"code","ad33dead":"code","dc9c682d":"code","a3ca3869":"code","33e37b7b":"code","5660d946":"code","2703dcb0":"code","049e642c":"code","1fda672d":"code","09e581a3":"code","9a96fa95":"code","426d77fc":"code","0c133424":"code","948a9bb1":"code","45e7bb9a":"code","6c9d6859":"code","2a215e18":"code","3c296463":"code","3c99fff7":"code","8b6e9e1b":"code","c1b8a4f4":"code","a7c3fec8":"code","1d0b42ef":"code","bd18bbbf":"code","58acb761":"code","142fb8e5":"code","c91ad2b4":"code","d5696f25":"code","25551490":"code","fa3c398a":"code","5713f958":"code","70bef1e6":"code","c4371340":"code","56507381":"code","886df43a":"code","576bcd3a":"code","039c1cbd":"code","2faeef6a":"code","4a91c03c":"code","497c7362":"code","ef85d6e0":"code","f14b1a77":"code","a74b8ed3":"code","bab05f5a":"code","f930cbc3":"code","197b99c9":"code","103bb67c":"code","52e56bd4":"code","dbe4ba97":"code","90ce7504":"code","1aad6081":"code","6ac1a65e":"code","7e35ed82":"code","0a47cfc0":"code","91c5ce6f":"markdown","d8b44d90":"markdown","73485c16":"markdown","fc5062dd":"markdown","29718610":"markdown","020dbe22":"markdown","c39add61":"markdown","c5a08f0b":"markdown","388a6bb2":"markdown","31d335b9":"markdown","9ed1b3fd":"markdown","7d7ae676":"markdown","c96dce14":"markdown","f6ff157e":"markdown","ccb6b9ee":"markdown","ff4c7078":"markdown","0de068e9":"markdown","82c779d7":"markdown","ab9021bf":"markdown","8835f4e9":"markdown","3be78f79":"markdown","d9b6857f":"markdown","167a5735":"markdown","3f85ab7e":"markdown","5175762f":"markdown","6f835f2a":"markdown","a60443d9":"markdown","8437f2fa":"markdown","edc78a50":"markdown","5a6b1826":"markdown","fe26591c":"markdown","04f021f2":"markdown","8533896f":"markdown","ee57c046":"markdown","a17e9cf8":"markdown","9af30648":"markdown","0d640aeb":"markdown","6466f648":"markdown","386b20f2":"markdown","6303eafd":"markdown","a215a714":"markdown","07ee4a43":"markdown","f703b9e0":"markdown","49497fe0":"markdown","3f6345e9":"markdown","39a0d2ac":"markdown","5d93a0e2":"markdown","dfd6e4e0":"markdown","df2b2031":"markdown","bb41b803":"markdown","6b69f52c":"markdown","fed177e0":"markdown","8af5c445":"markdown"},"source":{"6750c3f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f6a2accf":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","547043a5":"train_df.columns","dfa1b23b":"test_PassengerId = train_df[\"PassengerId\"]","b7af6f16":"test_PassengerId","daa5936e":"train_df.head()","9dfde578":"train_df.describe()","d6275f29":"train_df.info()","9d542d6b":"def bar_plot(variable):\n    \"\"\"\n        Input: variable;\n            Example: \"Sex\"\n        \n        Output: Bar Plot & Value Count\n    \n    \"\"\"\n    \n    # Get Feature\n    var = train_df[variable]\n    \n    # Count Number of Categorical Variable(Value\/Sample)\n    var_value = var.value_counts()\n    \n    # Visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(var_value.index,var_value)\n    plt.xticks(var_value.index, var_value.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    \n    print(\"{}:\\n{}\".format(variable, var_value))","f23d9c61":"category1 = [\"Survived\", \"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Embarked\"]\n\nfor c in category1:\n    bar_plot(c)","7cff7a89":"category2 = [\"Name\", \"Ticket\", \"Cabin\"]\n\nfor c in category2:\n    print(\"{}\\n\".format(train_df[c].value_counts()))","cd34f5d0":"def hist_plot(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} Distribution with Histogram\".format(variable))\n    plt.show()","e0862583":"numeric_variable = [\"PassengerId\", \"Age\", \"Fare\"]\n\nfor n in numeric_variable:\n    hist_plot(n)","4b323e55":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","e9cecb92":"train_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","a2515024":"train_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","e0f43b00":"train_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","8310dba9":"def detect_outliers(df,features):\n    \n    outlier_indices = []\n    \n    for c in features:\n        \n        # 1st Quartile\n        Q1 = np.percentile(df[c],25)\n        # 3st Quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier Step\n        outlier_step = IQR * 1.5\n        # Detect Outlier and Their Indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # Store Indeces\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i,v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers\n    ","fb06c0fa":"train_df.loc[detect_outliers(train_df,[\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","4cead44b":"# Drop Outliers\n\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis=0).reset_index(drop=True)","f5f5de31":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis=0).reset_index(drop=True)","43650ce1":"train_df.head()","3ae2db8b":"train_df.columns[train_df.isnull().any()]","f9bb0cb6":"train_df.isnull().sum()","48c03bd9":"train_df[train_df[\"Embarked\"].isnull()]","4fc2d3a6":"train_df.boxplot(column=\"Fare\", by=\"Embarked\")\nplt.show()","6dc9279c":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","3bfc34b1":"train_df[train_df[\"Embarked\"].isnull()]","6f9990e1":"train_df[train_df[\"Fare\"].isnull()]","06b4a62c":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","b2d287be":"train_df[train_df[\"Fare\"].isnull()]","1bf49ba1":"list1 = [\"Survived\", \"Age\", \"SibSp\", \"Parch\", \"Fare\"]\nsns.heatmap(train_df[list1].corr(), annot=True, fmt=\".2f\")\nplt.show()","77797f3d":"g = sns.factorplot(x=\"SibSp\", y=\"Survived\", data=train_df, kind=\"bar\", size=6)\ng.set_ylabels(\"Survived Probabilty\")\nplt.show()","0adb809f":"g = sns.factorplot(x=\"Parch\", y=\"Survived\", kind=\"bar\", data=train_df, size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","2217c086":"g = sns.factorplot(x=\"Pclass\", y=\"Survived\", data=train_df, kind=\"bar\", size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","e0dceca5":"g = sns.FacetGrid(train_df, col=\"Survived\")\ng.map(sns.distplot, \"Age\", bins=25)\nplt.show()","1fb05e65":"g = sns.FacetGrid(train_df, col=\"Survived\", row=\"Pclass\", size=2)\ng.map(plt.hist, \"Age\", bins=25)\ng.add_legend()\nplt.show()","82ad21d0":"g = sns.FacetGrid(train_df, row=\"Embarked\", size=2)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")#\"Pclass\", \"Sex\", \"Survived\"\ng.add_legend()\nplt.show()","ef6f5d5b":"g = sns.FacetGrid(train_df, row=\"Embarked\", col=\"Survived\", size = 2.25)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","f1d912eb":"train_df[train_df[\"Age\"].isnull()]","9d82dfe2":"sns.factorplot(x=\"Sex\", y=\"Age\", data=train_df, kind=\"box\")\nplt.show()","644ce53f":"sns.factorplot(x=\"Sex\", y=\"Age\", hue=\"Pclass\", data=train_df, kind=\"box\")\nplt.show()","528147a4":"sns.factorplot(x=\"SibSp\", y=\"Age\", data=train_df, kind=\"box\")\nsns.factorplot(x=\"Parch\", y=\"Age\", data=train_df, kind=\"box\")\nplt.show()","ad33dead":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","dc9c682d":"sns.heatmap(train_df[[\"Age\", \"Sex\", \"Pclass\", \"SibSp\", \"Parch\"]].corr(), annot=True)\nplt.show()","a3ca3869":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\n\nfor i in index_nan_age:\n    \n    age_pred = train_df[\"Age\"][((train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]) & (train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]))].median()\n    \n    \n    age_med = train_df[\"Age\"].median()\n    \n    \n    if not np.isnan(age_pred):\n        \n        train_df[\"Age\"].iloc[i] = age_pred\n    \n    else:\n        \n        train_df[\"Age\"].iloc[i] = age_med","33e37b7b":"train_df[train_df[\"Age\"].isnull()]","5660d946":"train_df[\"Name\"].head(10)","2703dcb0":"name = train_df[\"Name\"]\n\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","049e642c":"train_df[\"Title\"].head(10)","1fda672d":"sns.countplot(x=\"Title\", data=train_df)\nplt.xticks(rotation=60)\nplt.show()","09e581a3":"# Convert to Categorical Variable\n\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Don\", \"Rev\", \"Dr\", \"Major\", \"Lady\", \"Sir\", \"Col\", \"Capt\", \"the Countess\", \"Jonkheer\", \"Dona\"], \"Other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Mrs\" or i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]","9a96fa95":"train_df[\"Title\"].head(10)","426d77fc":"sns.countplot(x=\"Title\", data=train_df)\nplt.xticks(rotation=60)\nplt.show()","0c133424":"g = sns.factorplot(x=\"Title\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_xticklabels([\"Master\", \"Mrs-Miss-Ms-Mlle\", \"Mr\", \"Other\"])\ng.set_ylabels(\"Survived Probability\")\nplt.show()","948a9bb1":"train_df.drop(labels=[\"Name\"], axis=1, inplace=True)","45e7bb9a":"train_df.head()","6c9d6859":"train_df = pd.get_dummies(train_df, columns=[\"Title\"])","2a215e18":"train_df.head()","3c296463":"train_df.head()","3c99fff7":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","8b6e9e1b":"train_df.head()","c1b8a4f4":"g = sns.factorplot(x=\"Fsize\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_ylabels(\"Survived Probability\")\nplt.show()","a7c3fec8":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","1d0b42ef":"train_df.head()","bd18bbbf":"sns.countplot(x=\"family_size\", data=train_df)\nplt.show()","58acb761":"g = sns.factorplot(x=\"family_size\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_ylabels(\"Survived Probability\")\nplt.show()","142fb8e5":"train_df = pd.get_dummies(train_df, columns=[\"family_size\"])","c91ad2b4":"train_df.head()","d5696f25":"train_df[\"Embarked\"].head()","25551490":"sns.countplot(x=\"Embarked\", data=train_df)\nplt.show()","fa3c398a":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])","5713f958":"train_df.head()","70bef1e6":"train_df[\"Ticket\"].head(10)","c4371340":"tickets = []\n\nfor i in list(train_df.Ticket):\n    \n    if not i.isdigit():\n        \n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n        \n    else:\n        \n        tickets.append(\"X\")\n        \ntrain_df[\"Ticket\"] = tickets","56507381":"train_df[\"Ticket\"].head()","886df43a":"train_df = pd.get_dummies(train_df, columns=[\"Ticket\"], prefix=\"T\")","576bcd3a":"train_df.head()","039c1cbd":"sns.countplot(x=\"Pclass\", data=train_df)\nplt.show()","2faeef6a":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Pclass\"])","4a91c03c":"train_df.head()","497c7362":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])","ef85d6e0":"train_df.head()","f14b1a77":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis=1, inplace=True)","a74b8ed3":"train_df.columns","bab05f5a":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","f930cbc3":"train_df_len","197b99c9":"test = train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"], axis=1, inplace=True)","103bb67c":"test.head()","52e56bd4":"train = train_df[:train_df_len]\n\nX_train = train.drop(labels=[\"Survived\"], axis=1)\ny_train = train[\"Survived\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.33, random_state=42)\n\nprint(\"X_train:\",len(X_train))\nprint(\"X_test:\",len(X_test))\nprint(\"y_train:\",len(y_train))\nprint(\"y_test:\",len(y_test))\nprint(\"test:\",len(test))","dbe4ba97":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\n\nacc_log_train = round(logreg.score(X_train,y_train)*100,2)\nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\n\nprint(\"Accuracy of Train: %{}\".format(acc_log_train))\nprint(\"Accuracy of Test: %{}\".format(acc_log_test))","90ce7504":"random_state = 42\n\nclassifier = [DecisionTreeClassifier(random_state=random_state),\n             SVC(random_state=random_state),\n             RandomForestClassifier(random_state=random_state),\n             LogisticRegression(random_state=random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\":range(10,500,20),\n                \"max_depth\":range(1,20,2)}\n\nsvc_param_grid = {\"kernel\":[\"rbf\"],\n                 \"gamma\":[0.001, 0.01, 0.1, 1],\n                 \"C\":[1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\":[1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\":[\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\":np.linspace(1,19,10,dtype = int).tolist(),\n                 \"weights\":[\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\n\n\n\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","1aad6081":"cv_result = []\n\nbest_estimators = []\n\nfor i in range(len(classifier)):\n    \n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv=StratifiedKFold(n_splits=10), scoring=\"accuracy\", n_jobs=-1, verbose=1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    \n    print(cv_result[i])","6ac1a65e":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data=cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","7e35ed82":"votingC = VotingClassifier(estimators=[(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting=\"soft\", n_jobs=-1)\nvotingC = votingC.fit(X_train, y_train)\n\nprint(accuracy_score(votingC.predict(X_test),y_test))","0a47cfc0":"test_survived = pd.Series(votingC.predict(test), name=\"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis=1)\nresults.to_csv(\"titanic.csv\", index=False)","91c5ce6f":"\"Fare Feature\" seems to have correlation with \"Survived Feature\"(0.26)...","d8b44d90":"<a id=\"20\"><\/a><br>\n### Fill Missing Value: Age Feature","73485c16":"<a id=\"8\"><\/a><br>\n## Missing Value\n* [Find Missing Value](#9)\n* [Fill Missing Value](#10)","fc5062dd":"<a id=\"7\"><\/a><br>\n## Outlier Detection","29718610":"#### Result\n\n* \"PassangerId\"(Passanger) *who pay higher \"Fare\"* has high chance to \"Survive\"...\n* \"Fare\" can be used as **Categorical Variable** for **Model Training**...\n","020dbe22":"<a id=\"21\"><\/a><br>\n## Feature Engineering","c39add61":"### Sex - Survived\n","c5a08f0b":"<a id=\"27\"><\/a><br>\n### Feature Engineering: Sex","388a6bb2":"* \"Sex\" is not informative for *Prediction of \"Age\"*, *Distribution of \"Age\"* seems to be same...","31d335b9":"* Use \"Age\" in **Model Training**...\n* Use *Distribution of \"Age\"* for *Missing Value of \"Age\"*...","9ed1b3fd":"<a id=\"6\"><\/a><br>\n## Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","7d7ae676":"<a id=\"31\"><\/a><br>\n### Simple Logistic Regression","c96dce14":"<a id=\"14\"><\/a><br>\n### Feature Analysis | Parch - Survived","f6ff157e":"<a id=\"10\"><\/a><br>\n### Fill Missing Value\n* \"Embarked\" has 2 missing value!\n* \"Fare\" has only 1 missing value!","ccb6b9ee":"<a id=\"32\"><\/a><br>\n### Hyperparameter Tuning - Grid Search - Cross Validation\n\nWe will compare **5 Machine Learning Classifier Models** and *Evaluate Mean Accuracy* of each of them by *Stratified Cross Validation*:\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","ff4c7078":"#### Result\n\n* \"Parch\" and \"SibSp\" can be used for **NEW FEATURE EXTRACTION**(with th=3)...\n* As you see, *small families*(<=3)have more chance to \"Survive\"...\n* There is a *std* in *Survival of Passenger* with \"Parch\"=3...","0de068e9":"<a id=\"11\"><\/a><br>\n## Visualization","82c779d7":"* \"Sex\" is **not correlated** with \"Age\".\n* \"Sex\" is **correlated** with \"Pclass\", \"SipSp\", \"Parch\".","ab9021bf":"<a id=\"15\"><\/a><br>\n### Feature Analysis | Pclass - Survived","8835f4e9":"### SibSp - Survived","3be78f79":"<a id=\"25\"><\/a><br>\n### Feature Engineering: Ticket","d9b6857f":"### Pclass - Survived","167a5735":"#### Result\n\n* If \"Age\" <=10 | >=80, \"PassangerId\"(Passanger) has high chance to \"Survive\"...\n* *Large Number of 20 Years Old* **did not** \"Survive\"...\n* *Most Passenger(s)* are in **15-35 Age Range**...","3f85ab7e":"#### Result\n\n* If \"Sex\" == \"female\", \"PassangerId\"(Passanger) has high chance to \"Survive\"...\n* If \"Sex\" == \"male\", \"PassangerId\"(Passanger) has high chance to \"Survive\" in \"Pclass\" == 3 & \"Embarked\" == \"C\"..","5175762f":"<a id=\"28\"><\/a><br>\n### Feature Engineering: Drop PassengerId and Cabin","6f835f2a":"<a id=\"34\"><\/a><br>\n### Prediction and Submission","a60443d9":"* As you see, *small families*(f_size == 1)have more chance to \"Survive\"...","8437f2fa":"<a id=\"22\"><\/a><br>\n### Feature Engineering: Name ---> Title","edc78a50":"<a id=\"16\"><\/a><br>\n### Feature Analysis | Age - Survived","5a6b1826":"# Introduction\n\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1512 out of 2224 passengers and crew.\n\n<font color=\"blue\">\n    \nContent:\n    \n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4) \n        * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Matrix(Between Survived-Age-SibSp-Parch-Fare)](#12)\n    * [Feature Analysis | SibSp - Survived](#13)\n    * [Feature Analysis | Parch - Survived](#14)\n    * [Feature Analysis | Pclass - Survived](#15)\n    * [Feature Analysis | Age - Survived](#16)\n    * [Feature Analysis | Pclass - Age - Survived](#17)\n    * [Feature Analysis | Pclass - Sex - Embarked - Survived](#18)\n    * [Feature Analysis | Fare - Sex - Embarked - Survived](#19)\n    * [Fill Missing Value: Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Feature Engineering: Name ---> Title](#22)\n    * [Feature Engineering: SibSp + Parch ---> Family Size](#23)\n    * [Feature Engineering: Embarked](#24)\n    * [Feature Engineering: Ticket](#25)\n    * [Feature Engineering: Pclass](#26)\n    * [Feature Engineering: Sex](#27)\n    * [Feature Engineering: Drop PassengerId and Cabin](#28)\n1. [Modeling](#29)\n    * [train_test_split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning - Grid Search - Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","fe26591c":"<a id=\"12\"><\/a><br>\n### Correlation Matrix(Between Survived-Age-SibSp-Parch-Fare)","04f021f2":"**Age Ranking(Avarage)**\n* 1st Class > 2nd Class > 3rd Class ","8533896f":"#### Result\n\n* Having a lot of \"SibSp\" have less chance to \"Survive\"...\n* If \"SibSp\" = 0 or 1 or 2, \"PassangerId\"(Passanger) has more chance to \"Survive\"...\n* We can consider a **NEW FEATURE** describing these categories...","ee57c046":"#### Result\n\n* \"Pclass\" is important for **Model Training**...","a17e9cf8":"<a id=\"4\"><\/a><br>\n#### Categorical Variable","9af30648":"<a id=\"18\"><\/a><br>\n### Feature Analysis | Pclass - Sex - Embarked - Survived","0d640aeb":"<a id=\"19\"><\/a><br>\n### Feature Analysis | Fare - Sex - Embarked - Survived","6466f648":"<a id=\"9\"><\/a><br>\n### Find Missing Value","386b20f2":"<a id=\"5\"><\/a><br>\n#### Numerical Variable","6303eafd":"<a id=\"23\"><\/a><br>\n### Feature Engineering: SibSp + Parch ---> Family Size","a215a714":"<a id=\"13\"><\/a><br>\n### Feature Analysis | SibSp - Survived","07ee4a43":"* float64(2): Age and Fare\n* int64(5): PassangerId, Survived, Pclass, SibSp and Parch\n* object(5): Name, Sex, Ticket, Cabin and Embarked","f703b9e0":"<a id=\"30\"><\/a><br>\n### train_test_split","49497fe0":"<a id=\"33\"><\/a><br>\n### Ensemble Modeling","3f6345e9":"<a id=\"29\"><\/a><br>\n## Modeling","39a0d2ac":"<a id=\"26\"><\/a><br>\n### Feature Engineering: Pclass","5d93a0e2":"<a id=\"2\"><\/a><br>\n## Variable Description\n\n1. PassengerId: Unique Id Number of each passenger...\n2. Survived: Passenger survive(1) or died(0)...\n3. Pclass: Passenger Class... \n4. Name: Name of each passenger...\n5. Sex: Gender of each passenger...\n6. Age: Age of each passenger... \n7. SibSp: Number of siblings\/spouses...\n8. Parch: Number of parents\/childrens... \n9. Ticket: Ticket Number... \n10. Fare:  Amount of money spent on ticket...\n11. Cabin: Cabin Category...\n12. Embarked: Port where passenger embarked...(S: Southampton, C: Cherbourg, Q: Queenstown)","dfd6e4e0":"<a id=\"24\"><\/a><br>\n### Feature Engineering: Embarked","df2b2031":"<a id=\"17\"><\/a><br>\n### Feature Analysis | Pclass - Age - Survived","bb41b803":"### Parch - Survived","6b69f52c":"<a id=\"3\"><\/a><br>\n### Univariate Variable Analysis\n\n* Categorical Variable: Survived, Pclass, Name, Sex, SibSp, Parch, Ticket, Cabin, Embarked\n* Numerical Variable: PassengerId, Age, Fare","fed177e0":"* \"Embarked\" and \"Sex\" will be used in **Model Training**...","8af5c445":"<a id=\"1\"><\/a><br>\n## Load and Check Data"}}