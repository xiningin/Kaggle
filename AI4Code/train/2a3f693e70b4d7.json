{"cell_type":{"a747e783":"code","b4a4b3bd":"code","5ce0435c":"code","457b82ad":"code","2f0da089":"code","0101938a":"code","d1de2f57":"code","832f1901":"code","234267ab":"markdown","046eeb18":"markdown","b8d160ef":"markdown","1324f878":"markdown","62b70e9f":"markdown","6bf991de":"markdown","09fa51e5":"markdown"},"source":{"a747e783":"import numpy as np\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Flatten, Conv2D\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.applications.vgg19 import VGG19\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\nfrom glob import glob\nimport matplotlib.pyplot as plt\n","b4a4b3bd":"#resize all the image for training\nimage_size = [224,224,3]\n\n'''Training of the model was done on a smaller dataset link at the end of notebook\n    TO make use of the attached public dataset use sklearn for train-test split and ofc GPU\/TPU ;)'''\n\ntrain_path = 'Dataset\/Train'\ntest_path = 'Dataset\/Test'\n \n''' VGG19 gave the best results to the chosen parameters,\n     feel free to tune them and or use other models'''\n\nvgg19 = VGG19(input_shape=image_size, weights='imagenet',include_top=False)\n ","5ce0435c":"vgg19.summary()\n#the layers have been already trained on imagenet dataset \nfor layer in vgg19.layers:\n    layer.trainable = False\n\nfolders = glob('Dataset\/Train\/*')","457b82ad":"#Adding last layers for training \nx = Flatten()(vgg19.output)\n\nprediction = Dense(len(folders),activation='softmax')(x)\n\n#create model object \nmodel = Model(inputs = vgg19.input,outputs= prediction)\n\nmodel.summary()\n\nmodel.compile(\n    loss='categorical_crossentropy', \n    optimizer = 'adam',  #you can try other optimizers too \n    metrics=['accuracy']\n)\n","2f0da089":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   shear_range=0.2,\n                                   zoom_range=0.2,\n                                   horizontal_flip=True )\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntraining_data = train_datagen.flow_from_directory(train_path,\n                                        target_size=(224,224),\n                                        batch_size =32,\n                                        class_mode = 'categorical')\n\nvalidation_data = test_datagen.flow_from_directory(test_path,\n                                        target_size=(224,224),\n                                        batch_size =32,\n                                        class_mode = 'categorical')\n","0101938a":"history = model.fit(\n    training_data,\n    validation_data=validation_data,\n    epochs=2,  #keep the epochs around 10 to get better results \n    steps_per_epoch=len(training_data),\n    validation_steps=len(validation_data)\n)","d1de2f57":"plt.plot(history.history['loss'],label = 'Train loss')\nplt.plot(history.history['val_loss'],label='Validation loss')\nplt.legend()\nplt.show()\nplt.savefig('Loss')\n\nplt.plot(history.history['accuracy'],label = 'Train accuracy')\nplt.plot(history.history['val_accuracy'],label='Validation accuracy')\nplt.legend()\nplt.show()\nplt.savefig('Accuracy')","832f1901":"model.save('VGG_19.h5')\n\ny_pred = model.predict(validation_data)\n\ny_pred = np.argmax(y_pred , axis=1)\nprint(y_pred.shape)\n\n\n\n#testing with custom image \nfrom tensorflow.keras.models import load_model\nmodel = load_model('VGG_19.h5')\n\nimg = image.load_img('Dataset\/Test\/Uninfected\/C3thin_original_IMG_20150608_163002_cell_93.png',target_size=(224,224))\nx= image.img_to_array(img)\nprint(x)\nprint(x.shape)\nx= np.expand_dims(x,axis=0)\nx=x\/255\nimage_data = preprocess_input(x)\nop = np.argmax(model.predict(image_data),axis=1)\n\nprint(op.shape)\n\nif (op[0]==1):\n    print('No malaria :D')\nelse:\n    print('Malaria')","234267ab":"# 5. Making Prediction","046eeb18":"# Versions\n* numpy ==  1.18.5\n* tensorflow == 2.3.0\n* matplotlib == 3.3.0\n\n","b8d160ef":"# 2.Data Augmentation","1324f878":"The Link to Smaller Dataset for training on CPU :(https:\/\/github.com\/iamMOY\/Malaria-Detection\/blob\/master\/Dataset.zip)","62b70e9f":"# 4.Plotting the loss and accuracy","6bf991de":"# 1.Importing Libraries\n\n","09fa51e5":"# 3.Training The Model"}}