{"cell_type":{"43306aad":"code","f9c6fa13":"code","1f7e2dee":"code","00093e72":"code","f45a0864":"code","c2598278":"code","3bee44ce":"code","bd9d728e":"code","cdebb7cb":"code","5780e0f1":"code","34acbf68":"code","d3d8b979":"code","2221225d":"code","7b7926c9":"code","41710b91":"code","72e15496":"code","4b5651a0":"code","18a10f86":"code","23171b72":"code","1b2b4c1a":"code","b68576b4":"code","04bf841b":"code","ea34cef9":"code","88f9094a":"code","28ffaddf":"code","203aefab":"code","0a078de9":"code","4bc61e69":"code","d8f0d406":"code","c41d6d56":"code","e49d5752":"code","4d64a35d":"markdown","e119e720":"markdown","6935f13e":"markdown","8c732527":"markdown","3ec3f05f":"markdown","6b20af0f":"markdown","3d95b1be":"markdown","3c1f5c50":"markdown","51214256":"markdown","d3e1d154":"markdown","ce721dff":"markdown","bbcb19e9":"markdown","d5510b36":"markdown","ad4c8e9c":"markdown","7d0a807e":"markdown","ff268a5d":"markdown","ec24a247":"markdown"},"source":{"43306aad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nimport plotly as pl\n\nimport plotly.graph_objects as go\n\nimport librosa\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n        \npd.set_option(\"display.max_rows\", 999, \"display.max_columns\", 999)\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9c6fa13":"train_file = pd.read_csv('\/kaggle\/input\/birdsong-recognition\/train.csv')\ntest_file = pd.read_csv('\/kaggle\/input\/birdsong-recognition\/test.csv')","1f7e2dee":"train_file","00093e72":"train_file.info()","f45a0864":"train_file.nunique()","c2598278":"train_file.describe()","3bee44ce":"x = train_file['ebird_code'].unique()\n\nprint(\"Total Birds in the data set: \", len(x))\n\nx","bd9d728e":"import requests \n\nBird_name = input('Type the bird name: ')\nprint(Bird_name)\n\nlink = \"https:\/\/ebird.org\/species\/{0}#\".format(Bird_name)\nfrom IPython.display import IFrame\nIFrame(link, width=1000, height=700) ","cdebb7cb":"import plotly.express as px\nfig = px.histogram(train_file, x=\"duration\")\nfig.show()","5780e0f1":"fig = px.histogram(train_file, x=\"duration\", y=\"species\", histfunc= 'avg').update_yaxes(categoryorder=\"total descending\")\nfig.show()","34acbf68":"def dateprocessing(row):\n    year = row.split('-')[0]\n    month = row.split('-')[1]\n    date = row.split('-')[2]\n    return year, month, date","d3d8b979":"#train_file = train_file['date'].apply(dateprocessing)\ntrain_file['year'],  train_file['month'], train_file['day'] = zip(*train_file['date'].apply(dateprocessing))","2221225d":"import plotly.express as px\nfig = px.histogram(train_file, x=\"month\")\nfig.show()","7b7926c9":"import plotly.express as px\nfig = px.histogram(train_file, x=\"day\")\nfig.show()","41710b91":"train_file","72e15496":"pitch= train_file[\"pitch\"].value_counts().sort_values()\n\npitch.plot.barh()","4b5651a0":"x = train_file['species'].value_counts()[train_file['species'].value_counts() < 100]\nfig = go.FigureWidget(data=go.Bar(y=x))\nfig","18a10f86":"train_file[\"species\"].value_counts(ascending= True)[:30].sort_values()","23171b72":"import random \nimport os\n\n\npath ='\/kaggle\/input\/birdsong-recognition\/train_audio\/{0}\/'.format(Bird_name)\nfiles = os.listdir(path)\nindex = random.randrange(0, len(files))\nrndm_file = files[index]\n\n\ninput_audio = '\/kaggle\/input\/birdsong-recognition\/train_audio\/{0}\/{1}'.format(Bird_name,rndm_file)\ndata, sr = librosa.load(input_audio, sr = 44100) ","1b2b4c1a":"print('Audio loaded: ', data, sr)\n\nprint('\\nlength of the numpy array,' , len(data))","b68576b4":"#data = librosa.effects.trim(data)","04bf841b":"time = np.arange(0, len(data))\/ sr\ntime","ea34cef9":"import IPython.display as ipd\nipd.Audio(input_audio)","88f9094a":"fig, ax = plt.subplots()\nax.plot(time, data)\nax.set(xlabel='Time', ylabel = 'Amplitude')","28ffaddf":"import librosa.display\nplt.figure(figsize=(30, 4))\nlibrosa.display.waveplot(data, sr=sr)","203aefab":"X = librosa.stft(data,)\nXdb = librosa.amplitude_to_db(abs(X))\nplt.figure(figsize=(14, 5))\nlibrosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='hz')\nplt.colorbar()","0a078de9":"plt.figure(figsize=(14, 5))\nlibrosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='log')\nplt.colorbar()","4bc61e69":"import sklearn\nspectral_centroids = librosa.feature.spectral_centroid(data, sr=sr)[0]\nspectral_centroids.shape","d8f0d406":"plt.figure(figsize=(12, 4))\nframes = range(len(spectral_centroids))\nt = librosa.frames_to_time(frames)","c41d6d56":"def normalize(x, axis=0):\n    return sklearn.preprocessing.minmax_scale(x, axis=axis)","e49d5752":"plt.figure(figsize=(12, 4))\nlibrosa.display.waveplot(data, sr=sr, alpha=0.4)\nplt.plot(t, normalize(spectral_centroids), color='b')","4d64a35d":"## Lets Load the audio data","e119e720":"## Month of recording","6935f13e":"1. Spectral Centroid\n\nThe spectral centroid indicates at which frequency the energy of a spectrum is centered upon or in other words It indicates where the \u201d center of mass\u201d for a sound is located. This is like a weighted mean:","8c732527":"# Get the ramdom files from the bird choosen","3ec3f05f":"## Lets View the actual bird and dont forget to checkout the sound!","6b20af0f":"## Plot audio over time","3d95b1be":"44.1 kHz\nFor most music applications, \n44.1 kHz is the best sample rate to go for. 48 kHz is common when creating music or other audio for video. \nHigher sample rates can have advantages for professional music and audio production work, but many professionals work at 44.1 kHz.\n\nSource: Google","3c1f5c50":"## Pitch Distributed ","51214256":"## Average Duration of recordings for each species","d3e1d154":"## Audio Waveplot","ce721dff":"## Top 30 birds with low number of recordings\n","bbcb19e9":"## Get the Audio Features ","d5510b36":"### Lets Get the basic stats arounf the train dataset","ad4c8e9c":"## Spectrum","7d0a807e":"## Duration of the recording","ff268a5d":"## Audio Amplitude graph","ec24a247":"#### This is work in Progress notebook. Please feel free to leave a comment\/ upvote if you find anything useful. Thanks for reading"}}