{"cell_type":{"d83a8e6f":"code","d9518684":"code","8b6ad3df":"code","20f6fb5b":"code","94f94c7e":"code","0f552c2b":"code","7d713b64":"code","e72c8653":"code","4345e9fc":"code","12ded966":"code","f0745408":"code","839ffe11":"code","c06fda8d":"code","44f942cd":"code","8b60cb78":"code","81f8934e":"code","fd92b295":"code","fdabfffe":"code","f08c19e4":"markdown","144e6295":"markdown","95ba6ae7":"markdown"},"source":{"d83a8e6f":"import gc\nimport os\nfrom pathlib import Path\nimport random\nimport sys\n\nfrom tqdm import tqdm_notebook as tqdm\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom IPython.core.display import display, HTML\n\n# --- plotly ---\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\n\n# --- models ---\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cb\n\nfrom sklearn.metrics import mean_squared_error","d9518684":"# Original code from https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage by @gemartin\n# Modified to support timestamp type, categorical type\n# Modified to add option to use float16 or not. feather format does not support float16.\nfrom pandas.api.types import is_datetime64_any_dtype as is_datetime\nfrom pandas.api.types import is_categorical_dtype\n\ndef reduce_mem_usage(df, use_float16=False):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        if is_datetime(df[col]) or is_categorical_dtype(df[col]):\n            # skip datetime type or categorical type\n            continue\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if use_float16 and c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","8b6ad3df":"# H2O ML MODEL ======================================================================================================================\n# preproc ===========================\nimport h2o\nfrom h2o.estimators.glm import H2OGeneralizedLinearEstimator\n\n# init ==============================\nh2o.init(max_mem_size='14G')\n\n# import data =======================\ntrain = h2o.import_file(\"..\/input\/ashrae-stack-set-train-fin\/train.csv\", header=1)\n\ny = \"target\"\nx = train.columns[0:20]\n\n# fit model =========================\nglm_model = H2OGeneralizedLinearEstimator(\n    family=\"gaussian\", \n    solver='AUTO', \n    alpha=0.5,\n    #lambda=0.0,\n    link='Family_Default',\n    intercept=True,\n    lambda_search=True, \n    nlambdas=100, \n    missing_values_handling='MeanImputation',\n    standardize=True,\n    #nfolds = 5, \n    seed = 1333\n)\nglm_model.train(x=x, y=y, training_frame=train)","20f6fb5b":"# Eval mod ==========================\n#glm_model.rmse(xval=True)","94f94c7e":"# release memory and load test ========\nh2o.remove(train)\ndel train\ngc.collect()","0f552c2b":"# Model pred ========================\ntest = h2o.import_file(\"..\/input\/ashrae-stack-set-test-fin\/test.csv\", header=1)\npreds = glm_model.predict(test).as_data_frame()\n\n# release memory and load test ========\nh2o.remove(test)\ndel test\ngc.collect()\n\nh2o.cluster().shutdown()","7d713b64":"#preds.to_csv(preds, 'preds.csv', index=False, float_format='%.4f')","e72c8653":"%%time\n\ntest_df = pd.read_csv('..\/input\/ashrae-energy-prediction\/test.csv', parse_dates=[\"timestamp\"])\nbuilding_meta_df = pd.read_csv('..\/input\/ashrae-energy-prediction\/building_metadata.csv')","4345e9fc":"# leak data\nleak_df = pd.read_feather('..\/input\/ashrae-leak-data-station\/leak.feather')\n\nleak_df.fillna(0, inplace=True)\nleak_df = leak_df[(leak_df.timestamp.dt.year > 2016) & (leak_df.timestamp.dt.year < 2019)]\nleak_df.loc[leak_df.meter_reading < 0, 'meter_reading'] = 0 # remove large negative values\nleak_df = leak_df[leak_df.building_id!=245]","12ded966":"test_df['pred'] = np.expm1(preds['predict'])\ntest_df.loc[test_df.pred<0, 'pred'] = 0\n\ntest_df = reduce_mem_usage(test_df)\nleak_df = reduce_mem_usage(leak_df)","f0745408":"leak_df = leak_df.merge(test_df[['building_id', 'meter', 'timestamp', 'pred','row_id']], left_on = ['building_id', 'meter', 'timestamp'], right_on = ['building_id', 'meter', 'timestamp'], how = \"left\")\nleak_df = leak_df.merge(building_meta_df[['building_id', 'site_id']], on='building_id', how='left')","839ffe11":"sample_submission = pd.read_csv('..\/input\/ashrae-energy-prediction\/sample_submission.csv')\nsample_submission['meter_reading'] = test_df.pred\nsample_submission.loc[sample_submission.meter_reading < 0, 'meter_reading'] = 0","c06fda8d":"sample_submission.head()","44f942cd":"sns.distplot(np.log1p(sample_submission.meter_reading))","8b60cb78":"leak_df = leak_df[['meter_reading', 'row_id']].set_index('row_id').dropna()\nsample_submission.loc[leak_df.index, 'meter_reading'] = leak_df['meter_reading']","81f8934e":"sns.distplot(np.log1p(sample_submission.meter_reading))","fd92b295":"sample_submission.head()","fdabfffe":"sample_submission.to_csv('submission.csv', index=False, float_format='%.4f')","f08c19e4":"# Submit","144e6295":"## Link and out subm","95ba6ae7":"## Fit H2O Model"}}