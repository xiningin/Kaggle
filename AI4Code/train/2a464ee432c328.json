{"cell_type":{"7b23737e":"code","79ddc73a":"code","d055e657":"code","f21f61ca":"code","b2b1dd41":"code","a053652c":"code","a1e7a33c":"code","e4145e75":"code","6155e810":"code","457b292d":"code","c258c191":"code","92167b4e":"code","a6a5530f":"code","517c732c":"code","7e001b81":"code","90779aee":"markdown","d0476286":"markdown","4ab33dc4":"markdown","5877a286":"markdown","7047a522":"markdown","09bf60e5":"markdown","1592bcb9":"markdown","e002a9cd":"markdown","ee117006":"markdown","ae0c413f":"markdown","a0caaddb":"markdown","cce920b1":"markdown","e63e6691":"markdown","a4c953c1":"markdown","82215766":"markdown","e769ce14":"markdown"},"source":{"7b23737e":"\"\"\"\n@author: Mohamed Wael Bishr\n\"\"\"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom textblob import TextBlob\nimport nltk\n\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize \nimport collections\nfrom collections import Counter \nfrom wordcloud import WordCloud, STOPWORDS \nimport warnings\n\n#Downloading wordbags from nltk\n\nnltk.download('stopwords')\nnltk.download('punkt')\n\n# ignore warnings\nwarnings.filterwarnings(\"ignore\")","79ddc73a":"S =[]\nl=[]\nnum=0\nAll=[]\nsent=0.0\nPos=0\nNeg=0\nNat=0\nWords=''\nword_counter=0\nPOS_LST=[]\nNEG_LST=[]\nNAT_LST=[]\nCloudPOS='';CloudNEG='';CloudNAT=''\nCLOUDS=[CloudPOS,CloudNEG,CloudNAT]\n","d055e657":"df = pd.read_csv('\/kaggle\/input\/qurancsv\/Quran.csv')","f21f61ca":"print(plt.style.available) # look at available plot styles\nplt.style.use('ggplot')\ndf.describe()","b2b1dd41":"data= df.drop(columns=['OrignalArabicText', 'ArabicText','ArabicWordCount','ArabicLetterCount'],axis=1)","a053652c":"for i in data['SurahNo']:\n    if i not in l:\n        l.append(i)\n\nfor x in range(1,len(l)+1):\n    for m in data['SurahNo']:\n        if m == x:\n            num +=1\n    S.append([x,num])\n    num=0\n        \nfor j in range(len(S)):\n    surah = S[j][0]\n    aya =   S[j][1]\n    ayas = []\n    for a in range(len(data['SurahNo'])):\n        if data['SurahNo'][a] == surah:\n            ayas.append(data['EnglishTranslation'][a])\n    All.append([surah,ayas])\n    ayas=[]","a1e7a33c":"for s in All:\n    for a in s[1]:\n        obj = TextBlob(a)\n        sent = sent + obj.sentiment.polarity\n        Words+=''+a\n    result = sent\/(len(s[1]))*100\n    if result > 0:\n        Pos+=1\n    elif result < 0:\n        Neg+=1\n    else:\n        Nat+=1\n    sent=0    \nprint(f'''\n          ==========================\n          Happy Surahs   => {Pos}\n          Sad Surahs     => {Neg}\n          Natural Surhas => {Nat}\n          ==========================\n          ''')","e4145e75":"stoplist = set(stopwords.words('english')) \n  \nword_tokens = word_tokenize(Words) \n  \nfiltered_sentence = [w for w in word_tokens if not w in stoplist] \n\nimport string\ncleanList = []\nstring.punctuation\nfor i in filtered_sentence:\n    cleanList.append(i.translate(str.maketrans('','',string.punctuation)))\n    \nfor i in cleanList:\n    if i=='':\n        cleanList.remove(i)\n        \n\n# Pass the split_it list to instance of Counter class. ","6155e810":"\nfor word in cleanList:\n    obj = TextBlob(word)\n    sent = obj.sentiment.polarity\n    if sent >0: POS_LST.append(word)\n    elif sent < 0 : NEG_LST.append(word)\n    else: NAT_LST.append(word)\n  \n","457b292d":" \n\nC_POS = Counter(POS_LST)\nmost_occurPOS = C_POS.most_common(50)\ndfPOS = pd.DataFrame(most_occurPOS, columns = ['Word', 'Count'])\ndfPOS.plot.bar(x='Word',y='Count')\nC_NEG = Counter(NEG_LST)\nmost_occurNEG = C_NEG.most_common(50)\ndfNEG = pd.DataFrame(most_occurNEG, columns = ['Word', 'Count'])\ndfNEG.plot.bar(x='Word',y='Count')\nC_NAT = Counter(NAT_LST)\nmost_occurNAT = C_NAT.most_common(50)\ndfNAT = pd.DataFrame(most_occurNAT, columns = ['Word', 'Count'])\ndfNAT.plot.bar(x='Word',y='Count')\n# most_common() produces k frequently encountered \n# input values and their respective counts. ","c258c191":"print(f'''Pos: {len(POS_LST)} [{len(POS_LST)\/len(word_tokens)*100}%]\n          Neg: {len(NEG_LST)} [{len(NEG_LST)\/len(word_tokens)*100}%] \n          Nat: {len(NAT_LST)} [{len(NAT_LST)\/len(word_tokens)*100}%]''')","92167b4e":"for word in POS_LST:\n    CloudPOS +=word+' '\n    \nfor word in NEG_LST:\n    CloudNEG +=word+' '\n    \nfor word in NAT_LST:\n    CloudNAT +=word+' '\n","a6a5530f":"wordcloud = WordCloud(width = 800, height = 800, background_color ='white', stopwords = stopwords.words(), min_font_size = 10).generate(CloudPOS) \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \nplt.show() ","517c732c":"wordcloud = WordCloud(width = 800, height = 800, background_color ='white', stopwords = stopwords.words(), min_font_size = 10).generate(CloudNEG) \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \nplt.show() ","7e001b81":"wordcloud = WordCloud(width = 800, height = 800, background_color ='white', stopwords = stopwords.words(), min_font_size = 10).generate(CloudNAT) \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \nplt.show() ","90779aee":"> **Droping Unnecessary Columns ['OrignalArabicText', 'ArabicText','ArabicWordCount','ArabicLetterCount']**","d0476286":"> **Convert Each Polarity List To String**","4ab33dc4":"> **Importing Important Libraries**","5877a286":"> **Plotting The Words With Higher Occurrence In Each Polarity List**","7047a522":"> **Type Percentage Of Each Polarity To All Words**","09bf60e5":"> **Plotting WordCloud Of Natural Words Using WordCloud Module**","1592bcb9":"> Splitting The Words In Hole Quran After Cleaning It Into **3 Lists** For Each Polarity **POS , NEG , NAT**","e002a9cd":"> **Get The Average Sentiment Polarity For Each Surah Using TextBlob Library**","ee117006":"> **Define Variables**","ae0c413f":"> **Lets see it**","a0caaddb":"> **Looping Over Columns To Make A List Of Surahs And Its Number Of Ayahs**","cce920b1":"> **Removing The stopword using nltk stopwords wordbag**","e63e6691":"> **As U Can See We Got Number Of Surahs For Each Polarity**\n\n**Positive** Means That Most Of Surah's Ayahs Is **Positive** Like ***Heaven , Good , Happiness , Belivers***\n\n**Negative** Means That Most Of Surah's Ayahs Is **Negative** Like ***Hell , Evil , Sadness , Unbelivers***\n\n**Natural** Means That Most Of Surah's Ayahs Is **Natural** Like ***Light , Walk , Go , In , Say***","a4c953c1":"> **Plotting WordCloud Of Negative Words Using WordCloud Module**","82215766":"> **Read The Dataset**","e769ce14":"> **Plotting WordCloud Of Positive Words Using WordCloud Module**"}}