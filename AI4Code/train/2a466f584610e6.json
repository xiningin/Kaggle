{"cell_type":{"d7dd837c":"code","2b1b6dad":"code","bb90266d":"code","49143506":"code","3aaa9333":"code","edad8e35":"code","f3471aac":"code","62d2488b":"code","6c0df006":"code","11d56a2d":"code","10519b3f":"code","b24836a5":"code","c925b7a6":"code","220c5128":"code","ecd919dc":"code","c0b71da9":"code","ebb44449":"code","c583b3f0":"code","521de40c":"code","969c1713":"markdown","5a9bc2d9":"markdown","7ba8f4b0":"markdown","418ddaf7":"markdown","60186d54":"markdown","40e8b235":"markdown","0bdec8eb":"markdown","19b4426f":"markdown","695ff0d9":"markdown","d7abc260":"markdown","e899ee20":"markdown","839433ef":"markdown","8c1b9565":"markdown","7418dc84":"markdown","62f9a602":"markdown","0ef2a794":"markdown"},"source":{"d7dd837c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b1b6dad":"import numpy as np\nimport keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Input\nfrom keras import optimizers\nfrom keras.optimizers import Adam\nimport matplotlib.pyplot as plt","bb90266d":"(x_train, y_train), (x_test, y_test) = mnist.load_data()","49143506":"train_x = x_train.reshape(60000, 784) \/ 255\nval_x = x_test.reshape(10000, 784) \/ 255","3aaa9333":"autoencoder = Sequential()\nautoencoder.add(Dense(512,  activation='elu', input_shape=(784,)))\nautoencoder.add(Dense(128,  activation='elu'))\nautoencoder.add(Dense(10,    activation='linear', name=\"bottleneck\"))\nautoencoder.add(Dense(128,  activation='elu'))\nautoencoder.add(Dense(512,  activation='elu'))\nautoencoder.add(Dense(784,  activation='sigmoid'))\nautoencoder.compile(loss='mean_squared_error', optimizer = Adam())\ntrained_model = autoencoder.fit(train_x, train_x, batch_size=1024, epochs=10, verbose=1, validation_data=(val_x, val_x))","edad8e35":"encoder = Model(autoencoder.input, autoencoder.get_layer('bottleneck').output)\nencoded_data = encoder.predict(train_x)  # bottleneck representation\ndecoded_output = autoencoder.predict(train_x)        # reconstruction\nencoding_dim = 10","f3471aac":"# return the decoder\nencoded_input = Input(shape=(encoding_dim,))\ndecoder = autoencoder.layers[-3](encoded_input)\ndecoder = autoencoder.layers[-2](decoder)\ndecoder = autoencoder.layers[-1](decoder)\ndecoder = Model(encoded_input, decoder)","62d2488b":"import matplotlib.pyplot as plt\nplt.imshow(x_test[0])","6c0df006":"from keras.preprocessing import image\n\ninputs = val_x[0].reshape(1,784)\ntarget_data = autoencoder.predict(inputs)\ndist = np.linalg.norm(inputs - target_data, axis=-1)\nprint(dist)","11d56a2d":"from keras.preprocessing import image\n# if the img.png is not one of the MNIST dataset that the model was trained on, the error will be very high.\nimg = image.load_img(\"..\/input\/test-image-data\/demo-image.png\", target_size=(28, 28), color_mode = \"grayscale\")\ninput_img = image.img_to_array(img)\ninputs = input_img.reshape(1,784)\ntarget_data = autoencoder.predict(inputs)\ndist = np.linalg.norm(inputs - target_data, axis=-1)\nprint(dist)","10519b3f":"# The code below is from the Keras Blogs\n# https:\/\/blog.keras.io\/building-autoencoders-in-keras.html\n\nnoise_factor = 5\nx_train_noisy = x_train + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_train.shape) \nx_test_noisy = x_test + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_test.shape) \n","b24836a5":"x_train_noisy = np.clip(x_train_noisy, 0., 1.)\nx_test_noisy = np.clip(x_test_noisy, 0., 1.)","c925b7a6":"#Print one image to see the noise\nplt.imshow(x_test_noisy[1].reshape(28, 28))","220c5128":"from tensorflow.keras.layers import Conv2D, MaxPooling2D, UpSampling2D","ecd919dc":"input_img = Input(shape=(28, 28, 1))","c0b71da9":"nn = Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)\nnn = MaxPooling2D((2, 2), padding='same')(nn)\nnn = Conv2D(32, (3, 3), activation='relu', padding='same')(nn)\nencoded = MaxPooling2D((2, 2), padding='same')(nn)","ebb44449":"nn = Conv2D(32, (3, 3), activation='relu', padding='same')(encoded)\nnn = UpSampling2D((2, 2))(nn)\nnn = Conv2D(32, (3, 3), activation='relu', padding='same')(nn)\nnn = UpSampling2D((2, 2))(nn)\ndecoded = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(nn)","c583b3f0":"autoencoder = Model(input_img, decoded)\nautoencoder.compile(optimizer='adadelta',loss='binary_crossentropy')\nautoencoder.fit(x_train_noisy, x_train,\n                epochs=50,\n                batch_size=256,\n                validation_data=(x_test_noisy, x_test))","521de40c":"from keras.preprocessing import image\n# if the img.png is not one of the MNIST dataset that the model was trained on, the error will be very high.\nimg = image.load_img(\"..\/input\/mnist-image\/mnistimg.png\", target_size=(28, 28), color_mode = \"grayscale\")\ninput_img = image.img_to_array(img)\ninputs = input_img\ntarget_data = autoencoder.predict(inputs)\n","969c1713":"The output is pretty noisy and fuzzy.","5a9bc2d9":"# Anomaly Detection","7ba8f4b0":"**Autoencoder reduces data dimensions by learning how to ignore the noise in tha data.**","418ddaf7":"## Convolutional Autoencoder Neural Network","60186d54":"**Adding synthetic noise to the MNIST data.**","40e8b235":"The code below is the reconstruction part of the original digits. This is where the network actually learns how to remove the noise from the input images. We use UpSampling function to rebuild the images to the original dimensions (28, 28)","0bdec8eb":"# What is an Auto-Encoder?","19b4426f":"**Now, let\u2019s do some anomaly detection.**","695ff0d9":"# Image Denoising","d7abc260":"Autoencoder is an **unsupervised ANN** that learns how to efficiently compress and encode data, then it learns how to reconstruct the data back from the reduced encoded representation to a representation that is as close to the original input as possible. ","e899ee20":"Here, I have used the first image from our test data. The result is 2.801, this means the image is not an anomaly.","839433ef":"## FeedForward neural network on the MNIST dataset","8c1b9565":"Here, I have taken a random image and the anomaly is really high.","7418dc84":" the last reconstruction loss\/error for the validation set is 0.0193 which is great.","62f9a602":"![image.png](attachment:1d8ea98c-f5ba-4f4e-9c89-350005647167.png)","0ef2a794":"This is one of the uses of Autoencoder neural network. Detecting the **anomalies and outliers** in the data. This is beacuse the encoding operation relies on the correlated features to compress the data."}}