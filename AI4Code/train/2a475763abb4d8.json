{"cell_type":{"87c2bf54":"code","e39bf7c7":"code","2743d82c":"code","29f49fa9":"code","081dde2f":"code","eec09755":"code","e1165438":"code","ddfda92f":"code","ec0b476e":"code","ca0ca5af":"code","c0069548":"code","d0c7a9c7":"code","b4934f18":"code","64c0a0cc":"code","df8a9011":"code","7dd6ecce":"code","8fd4c150":"code","8adf6fb3":"code","fa36d2ee":"code","cac82749":"code","20d834cf":"code","c384d694":"code","0798bbf4":"code","06a0c7ab":"code","635a0feb":"code","693fe4f5":"code","766977b2":"code","36eaf57f":"code","46caf46d":"code","7fa5379c":"code","6fcd5e78":"code","a0cc7788":"code","c38447e1":"code","0bf02304":"code","a7e149bb":"code","d3def031":"code","db80d69f":"code","0b0b029d":"code","fa2d495e":"code","2d7b9a35":"code","86af7cce":"code","6f81e90c":"code","332b4a44":"code","112dfa74":"code","72245dc4":"code","f1fc44c9":"code","0b9e541f":"code","04d6eac3":"code","6faf124c":"code","d2b6fcbb":"code","6abed882":"code","96f99e0f":"code","1fc4d98e":"code","d9e85fac":"code","e3e97005":"code","89e51ac6":"code","8be100f4":"code","f7c56550":"markdown","80659be6":"markdown","d1e36750":"markdown","55dd80c1":"markdown","0e050e42":"markdown","49eea02f":"markdown","4c98c85a":"markdown","5e08c56c":"markdown","79beb86c":"markdown","5e31b82d":"markdown","e5b48461":"markdown","b1b66415":"markdown","e9b5015b":"markdown","260a693e":"markdown","c483a9c3":"markdown","cf80ab83":"markdown","abc672ca":"markdown","1a397a9d":"markdown","3076b674":"markdown","89972dca":"markdown","8f8ae1c2":"markdown","70a5c109":"markdown","69f7d5d0":"markdown","96d1d2e4":"markdown","96cce38d":"markdown","3dcda320":"markdown","7c5803a9":"markdown","12ad1591":"markdown","e06791a9":"markdown","5afa5144":"markdown","5515ba0f":"markdown","442ad4da":"markdown","91cec56f":"markdown","28b8f826":"markdown"},"source":{"87c2bf54":"# import all the necessary libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","e39bf7c7":"# reading data from \"Twitch_user_data.csv\" file\n\ndata = pd.read_csv(\"..\/input\/twitch-users-dataset\/Twitch_user_data.csv\")","2743d82c":"# top 20 records of data\n\ndata.head(20)","29f49fa9":"# bottom 20 records of data\n\ndata.tail(20)","081dde2f":"# Shape of DataFrame\n\ndata.shape","eec09755":"# total number of records in the dataset\n\nprint(\"There are totally {} records in our dataset\".format(data.index.stop))","e1165438":"# all column names\n\ndata.columns","ddfda92f":"# let's see all the column types before performing any visualization\n\ndata.dtypes","ec0b476e":"# finding any nulll values present in our data\n\ndata.isnull().sum()","ca0ca5af":"# more info about data\n\ndata.info()","c0069548":"# a breif idea about the data with the help of describe method\n\ndata.describe()","d0c7a9c7":"# finding correlation between features\n\ndata.corr()","b4934f18":"# Sample channel name that's looking differently.\n\ndata.iloc[17,0]","64c0a0cc":"# exctracting Channel name\n\nimport re \n\noriginal_chan_names = data[\"Channel\"]\nmodified_chan_names = []\n\n# regex pattern to exctract Channel names\npattern = \"\\([a-zA-Z0-9]+\\_*[a-zA-Z0-9]*\\)\"\n\n\nfor i in data[\"Channel\"]:\n    if \"(\" in i:\n        val = re.findall(pattern,i)[0]\n        modified_chan_names.append(val)\n    else:\n        modified_chan_names.append(i)\n        \n# 18th record channel name\n\nmodified_chan_names[17]","df8a9011":"# removing \"(\" \")\" from extracted movie names\n\nmodified_chan_names = [i.strip(\"()\") for i in modified_chan_names]\n\n\n# Now let's see the 18th record Channel name \nmodified_chan_names[17]\n","7dd6ecce":"# replacing the Original channel names with modified Channel names\n\ndata[\"Channel\"]=modified_chan_names","8fd4c150":"# finding the channel names which are top in each category\n\nfor column in data.columns[1:-3]:\n    chan_name = data[data[column]==max(data[column])][\"Channel\"].values\n    print(\"{} is top in {}\".format(chan_name[0],column))\n    print()","8adf6fb3":"data.head()","fa36d2ee":"# setting the figure size\nfig = plt.figure(figsize=(10,8))\n\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\nsns.heatmap(data.corr(),annot=True,cmap=cmap)\nplt.title(\"Heatmap Showing Correlations\")\nplt.show()","cac82749":"# pair plot showing relationship among different features (Bivariate analysis)\n\nsamp_data = data[['Watch time(Minutes)', 'Stream time(minutes)',\n       'Peak viewers', 'Average viewers', 'Followers', 'Followers gained',\n       'Views gained']]\n\n\nsns.pairplot(samp_data,kind=\"scatter\")\nplt.show()","20d834cf":"fig = plt.figure(figsize=(10,5))\n\nsns.swarmplot(data[\"Language\"],data[\"Watch time(Minutes)\"])\nplt.xticks(rotation=90)\nplt.show()","c384d694":"# simple scatter plot showing relationship between Watch time(Minutes) and Followers\n\nsns.jointplot(data[\"Followers\"],data[\"Watch time(Minutes)\"],kind=\"scatter\",color=\"r\")\nplt.show()","0798bbf4":"# Counting Matured content channels  and child content channel\n\nMature_content_chans = data[data[\"Mature\"]==True][\"Channel\"].values\n\nChild_content_chans = data[data[\"Mature\"]==False][\"Channel\"].values\n\nprint(\"There are {} Matured  content channels\".format(len(Mature_content_chans)))\nprint(\"There are {} Non Matured content channels\".format(len(Child_content_chans)))","06a0c7ab":"# Counter plot showing no of Matured content channels \n\nfig = plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nplt.title(\"Count of Mature Content Channels\")\nsns.countplot(data[\"Mature\"])\nplt.plot([],[],color=\"b\",label=\"False\")\nplt.plot([],[],color=\"orange\",label=\"True\")\nplt.legend()\n\n\n\n# Counter plot showing No of Partnered Channels\n\nplt.subplot(1,2,2)\nplt.title(\"Coun of Partnered Channels\")\nsns.countplot(data[\"Partnered\"])\nplt.plot([],[],color=\"b\",label=False)\nplt.plot([],[],color=\"orange\",label=True)\nplt.legend()\nplt.show()","635a0feb":"# Top 5 mostly used languages\n\nfrom collections import Counter\n\nsamp_dict = Counter(data[\"Language\"])\ntop_5_lang = samp_dict.most_common(5)\ntop_5_lang = dict(top_5_lang)\nsamp_dict = dict(samp_dict)\n\nfig = plt.figure(figsize=(15,8))\nplt.subplot(1,2,1)\nplt.pie(top_5_lang.values(),labels=['English', 'Korean', 'Russian', 'Spanish', 'French'],startangle=90)\nplt.title(\"Top 5 Mostly used Languages\")\nplt.show()","693fe4f5":"# bar plot showing count of all languages\n\nfig = plt.figure(figsize=(10,5))\nplt.bar(samp_dict.keys(),samp_dict.values(),color=\"r\")\nplt.xticks(rotation=90)\nplt.show()","766977b2":"data.head()","36eaf57f":"top_10 = sorted(data[\"Followers\"])[-10:]\n\ntop_10_chan_names = []\ntop_10_chan_follows = []\ntop_10_chan_watch = []\ntop_10_chan_stream = []\ntop_10_chan_avg = []\n\n\nfor i,row in data.iterrows():\n    if row[\"Followers\"] in top_10:\n        top_10_chan_names.append(row[\"Channel\"])\n        top_10_chan_follows.append(row[\"Followers\"])\n        top_10_chan_watch.append(row[\"Watch time(Minutes)\"])\n        top_10_chan_stream.append(row[\"Stream time(minutes)\"])\n        top_10_chan_avg.append(row[\"Average viewers\"])\n","46caf46d":"fig = plt.figure(figsize=(10,5))\nplt.bar(top_10_chan_names,top_10_chan_follows,color=\"#1affa3\",width=0.5)\nplt.title(\"Bar plot showing Followers of Top 10 Channels\")\nplt.xticks(rotation=45)\nplt.show()","7fa5379c":"fig = plt.figure(figsize=(10,5))\nplt.bar(top_10_chan_names,top_10_chan_watch,color=\"#4da6ff\",width=0.5)\nplt.title(\"Bar plot showing Watch time(Minutes) of Top 10 Channels\")\nplt.xticks(rotation=45)\nplt.show()","6fcd5e78":"fig = plt.figure(figsize=(10,5))\nplt.bar(top_10_chan_names,top_10_chan_stream,color=\"#66ff33\",width=0.5)\nplt.title(\"Bar plot showing Stream time(Minutes) of Top 10 Channels\")\nplt.xticks(rotation=45)\nplt.show()","a0cc7788":"fig = plt.figure(figsize=(10,5))\nplt.bar(top_10_chan_names,top_10_chan_avg,color=\"#ffff1a\",width=0.5)\nplt.title(\"Bar plot showing Average viewers of Top 10 Channels\")\nplt.xticks(rotation=45)\nplt.show()","c38447e1":"data.head()","0bf02304":"# sample viz showing the outliers present in followers column\nsns.boxplot(data[\"Followers\"])","a7e149bb":"# data types before binarization \n\ndata[[\"Mature\",\"Partnered\",\"Language\"]].dtypes","d3def031":"# lambda function for Mature and Partnered\nx = lambda a : 1 if a==True else 0\n\nMature = data[\"Mature\"].apply(x)\nPartnered = data[\"Partnered\"].apply(x)\n\n# creating a new column with modified numerical values\ndata[\"Mod_Mature\"]=Mature\ndata[\"Mod_Partnered\"]=Partnered","db80d69f":"data[\"Mod_Mature\"].head()","0b0b029d":"data[\"Mod_Partnered\"].head()","fa2d495e":"val_dict = data[\"Language\"].value_counts()","2d7b9a35":"lang_dict = {\"English\":1,\"Korean\":2,\"Russian\":3,\"Spanish\":4,\"French\":5,\"Portuguese\":6,\"German\":7,\"Chinese\":8,\"Turkish\":9,\"Other\":10}\n\nsamp_numeric = []\n\nfor i in data[\"Language\"]:\n    if val_dict[i]>20:\n        samp_numeric.append(samp_dict[i])\n    else:\n        samp_numeric.append(samp_dict[\"Other\"])\n\n        \n# sample top 10 values \nsamp_numeric[:10]","86af7cce":"# adding new column with modified values for language colum\ndata[\"Mod_Lang\"] = samp_numeric","6f81e90c":"def remove(df,col,outlier):\n    q1,q2=np.percentile(col,[25,75])\n    iqr = q2-q1\n    lb = q1 - 1.5*iqr\n    ub = q2 + 1.5*iqr\n    for i in range(len(col)):\n        if(col[i]>ub or col[i]<lb):\n            if df.index[i] not in outlier:\n                outlier.append(df.index[i])\n                \n# creating sample dataframe without categorical data\n\nsamp_data= data.drop([\"Channel\",\"Mature\",\"Partnered\",\"Language\"],axis=1)\nsamp_data.head()","332b4a44":"# applying the above function to the whole data\n\noutliers = []\nfor i in samp_data:\n    remove(samp_data,samp_data[i],outliers)","112dfa74":"# dropping outliers from the datset\nmod_data = data.drop(outliers,axis=0)","72245dc4":"new_data = mod_data.drop([\"Mature\",\"Channel\",\"Partnered\",\"Language\"],axis=1)","f1fc44c9":"new_data.head()","0b9e541f":"# Followers column will be target feature, so let's separte it now\n\ntarget_data = new_data[\"Followers\"]","04d6eac3":"# importng necessary libraries \n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error","6faf124c":"# splitting the train and test data\n\nx_train,y_train,x_test,y_test = train_test_split(new_data.drop(\"Followers\",axis=1),target_data,test_size=0.25)","d2b6fcbb":"# sample view of data after splitting\n\nprint(\"Shape of x_train:\",x_train.shape)\nprint(\"Shape of x_test:\",x_test.shape)\nprint(\"Shape of y_train:\",y_train.shape)\nprint(\"Shape of y_test:\",y_test.shape)","6abed882":"# Creating an object for linear regression model\n\nlinear_mod = LinearRegression()\nlinear_mod.fit(x_train,x_test)","96f99e0f":"# predicting values for y_train\n\ny_pred = linear_mod.predict(y_train)","1fc4d98e":"y_pred","d9e85fac":"# Model Evalution","e3e97005":"\nlinear_mod.intercept_","89e51ac6":"linear_mod.coef_","8be100f4":"r2_score(y_test,y_pred)","f7c56550":"## Channel names which are top in each categories ( Watch time , followers and etc)","80659be6":"## Outliers removing","d1e36750":"<h6> There are no missing values to handle<\/h6>","55dd80c1":"##  D) Scatter plot showing relation between Followers and Watch time(Minutes)","0e050e42":"#### Before removing outliers let's convert all the categorical data into numerical data.\n> Mature, Partnered, Language are the only columns having categorical data.","49eea02f":"# 3. OUTLIERS DETECTION\n\n* An outlier is a point or a set of data points which lies away from the rest of the values in the dataset.\n* Problems with outliers\n> 1. Affects the standard deviation of data.\n> 2. Manipulates the overall mean of the data.\n> 3. Converts the data into skewed form.\n> 4. It causes bias in the accuracy estimation of a ML model.\n> 5. Affects the distribution and statistics of dataset.\n\n* Different methods to detect outliers\n> 1. Z-Score\n> 2. Scatter plots\n> 3. IQR (Inter Quartile Range)\n\nIn this particular notebook i will be using IQR to find the outliers and will be using boxplots for detecting the outliers visually.","4c98c85a":"* Followers and Watch time(Minutes) are having high positive correlations, i.e When Followers increases then the Watch time(Minutes) also increases.\n\n* Average Viewers and Stream time(Minutes) are having high negative correlation i.e when one feature increases another feature decreases. ","5e08c56c":"## 2. EDA FOR BETTER UNDERSTANDING OF DATA","79beb86c":"## B) Pair Plot showing Correlations with the help scatter plot","5e31b82d":"* The English Languae channels are having high watch time compared to other language channels.\n* There are some other languages like Greek, Slovak, Finnish, Swedish and etc are having very less Watch time(Minutes) and also the no of channels using these languages are also less in count.","e5b48461":"# VISUALIZATIONS","b1b66415":"## A) Simple heatmap showing the correlation between different features","e9b5015b":"> There are so  many number of Languages for binarization or to assign integer values, so to improve efficieny combine all the languages which is used by less than 20 channels.","260a693e":"## F) Top 5 mostly languages.","c483a9c3":"* Feature selection is the process of selecting the features which are important for model training and removing the unwanted features.","cf80ab83":"<h6> Average viewers of Top 10 channels","abc672ca":"## E) Bar plots showing the count of Mature content channels and Count of partnered Channels","1a397a9d":"# BREIF  DESCRIPTION OF THIS NOTEBOOK\n\n* This notebook mainly consists of the following steps\n> 1. Basic operations for simple understanding of data.\n> 2. EDA for better understanding of data.\n> 3. Outliers detection.\n> 4. Feature selection.\n> 5. Model building and Training.","3076b674":"<h6> Stream time of Top 10 Channels <\/h6>","89972dca":"## HAPPY TO SEE ANY SUGGESTIONS TO IMPROVE THIS NOTEBOOK","8f8ae1c2":"* The main aim of this notebook is EDA we aren't much bothered about the model and efficiency.\n* We can also other metrices like mean absolutre error or mean squared error and etc","70a5c109":"### FORMATTING THE CHANNEL NAMES\n* #### If we had observed in detail there are some weird names to some of the channels, so let's fix that now.","69f7d5d0":"## C) Swarm plot Showing relationship between Watch time and Language","96d1d2e4":"![regex_video1.gif](attachment:regex_video1.gif)\n## 1. BASIC OPERATIONS ","96cce38d":"##### Now let's convert the language column ( Categorical column ) into numerical data column. So for this process i am going to rank the languages based on their Channels count.","3dcda320":"# <CENTER>THANK YOU :)<\/CENTER>","7c5803a9":"<h6> So in order to remove that non alphabet letters and to exctarct the exact channel name, I am gonna use regex <\/h6> ","12ad1591":"# <CENTER> DO SUPPORT BY UPVOTING<\/CENTER>","e06791a9":"## F) Top 10 channels Details based on their followers","5afa5144":"## 5. Model Creation and Training","5515ba0f":"## 4. FEATURE SELECTION","442ad4da":"\n* As the first record index starts from 0 we will be having 999 as the last record index","91cec56f":"<h6> Watch time of top 10 channels <\/h6>","28b8f826":"<h6> Followers of Top 10 channels <\/h6>"}}