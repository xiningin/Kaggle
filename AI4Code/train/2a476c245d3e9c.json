{"cell_type":{"7c37ebbe":"code","46be8300":"code","188938ef":"code","96f9d9ec":"code","5f27714e":"code","6f50c04a":"code","f5f5f5d0":"code","4b199492":"code","7a97f7c0":"code","79647f39":"code","66edeabe":"code","f9768fff":"code","5e879393":"code","9f2ea641":"code","3c1a8dc2":"code","d1fa80a0":"code","2d63c653":"code","21c3a59d":"code","e6a3dddd":"code","abfd4793":"code","5158f418":"code","334c7ba2":"code","56519377":"code","33e26453":"code","9c0e79e7":"code","259d23ad":"code","a950eb8d":"code","0c75c532":"code","5130945a":"code","8fb6c4de":"code","ec291eff":"code","1f697ccd":"code","ed228590":"code","2349927c":"code","3e0769dc":"code","3bd8f2de":"code","a6e99cfd":"code","9da6b882":"code","224d0386":"code","79288289":"code","b604d34e":"code","4d77767c":"code","dc5b8c74":"code","1b3efb2a":"code","03849ac7":"code","cfcb0472":"code","745df15a":"code","f42ed911":"code","f3a1923f":"code","4141a5e9":"code","d79dc240":"code","c4502235":"code","d309c7c2":"code","9179d29d":"code","e4fcc5dc":"code","66395f3f":"code","aa8a2ae5":"code","073b6fb1":"code","6148611a":"code","48d1096e":"code","8ca18101":"code","0d674b3f":"code","0165eaea":"code","0590e509":"code","9a1a9b69":"code","344ddd4a":"code","10c24680":"code","8d74c864":"code","70bc7b0f":"code","d954021f":"code","837d03cd":"code","1273d3ed":"code","a0ef0cbe":"code","137f6b24":"code","cc0bc629":"code","cff40944":"code","11fb850c":"code","d4b97f56":"code","007bcbc4":"code","cb9419b1":"code","e16ddbea":"code","e7049954":"code","4ba872a6":"code","3238bf8d":"code","49042e1f":"code","f956a257":"code","c4bf0a1e":"code","0d07e40c":"code","b1f1c378":"code","c1a9a61c":"code","de26e025":"code","f9d8f2c1":"code","6859d84a":"code","4ce63422":"code","53152ccb":"code","da6a1851":"code","c8911726":"code","88c9fb8e":"code","1cd9de6e":"code","222a1746":"code","bfa37d13":"code","7cf01a55":"code","8e3c6386":"code","4257cb7f":"code","7ea5cd65":"code","87773336":"code","f1465972":"code","92b2edab":"code","d37dfbc4":"code","343c2feb":"code","53a50ee7":"code","0ec9f4d4":"code","f7180989":"code","60b814dd":"code","52eb5cda":"code","5e8390fe":"code","e88799ca":"code","e5cfef5b":"code","5ec7ce5c":"code","c2271405":"code","2ae2e95e":"code","95d87771":"code","ddc8ffa3":"code","0c66c22c":"code","da302f97":"code","f3ae4a1b":"code","fdd1f7a4":"code","5bb9b59e":"code","d3e102a5":"code","f07aaf5e":"code","9653b4cb":"code","e4b293eb":"code","face4ec8":"code","3b2dd7ca":"markdown","4e594ca6":"markdown","b002201f":"markdown","674a6bb8":"markdown","9f49ce45":"markdown","005b2016":"markdown","6cceef53":"markdown","694d6a5a":"markdown","53eec5e1":"markdown","61bb2714":"markdown","323598fd":"markdown","3ec41db4":"markdown","ae3b6de9":"markdown","9716c915":"markdown","a7440bc1":"markdown","4391d69e":"markdown","f7b57fa9":"markdown","18097547":"markdown","33c355b1":"markdown","11a1a3b4":"markdown","b14e0ded":"markdown","2523e0b5":"markdown","62e97ee0":"markdown","939fb88f":"markdown","f5e65422":"markdown","a84f5cea":"markdown","ded9e289":"markdown","ea4ce943":"markdown","78513bff":"markdown","2d4ff777":"markdown","bccb7f58":"markdown","cfc3db68":"markdown"},"source":{"7c37ebbe":"import pandas as pd","46be8300":"dry_fruits = ['Almonds','Raisins','Cashew Nut','Walnuts']\ndry_fruits","188938ef":"pd.Series(dry_fruits)","96f9d9ec":"some_nums = [4,7,9,1,45]\npd.Series(some_nums)","5f27714e":"some_booleans = [True,False,True,False,True,True]\npd.Series(some_booleans)","6f50c04a":"nouns = {\"Banana\":\"Fruit\",\n        \"Cow\":\"Animal\",\n        \"Magenta\":\"Colour\"}\npd.Series(nouns)\n\n","f5f5f5d0":"about_me = ['Smart','Intelligent','Humble','Focused']\npd.Series(about_me) # this series is not stored, so we need to store it in a var\ns = pd.Series(about_me) # whatever happens at the right side of the equals sign, happens first :-)\n# to view the series now, we have to put s on the line\ns","4b199492":"s.values #this is an attribute!","7a97f7c0":"s.index","79647f39":"s.dtype # internal pandas lingo for string : 'O'","66edeabe":"prices = [44.5,22,64.6]\ns = pd.Series(prices)\ns","f9768fff":"s.sum # it says something to us you see! We need parenthese","5e879393":"s.sum()","9f2ea641":"s.product()","3c1a8dc2":"s.mean()","d1fa80a0":"s.min()","2d63c653":"s.max()","21c3a59d":"fruits = ['Apple','Orange','Plum','Grape','Blueberry']\nweekdays = ['Monday','Tuesday','Wednesday','Thursday','Friday']\n\npd.Series(data=fruits,index = weekdays) # supplying the parameters!","e6a3dddd":"pd.Series(fruits,weekdays) # without supplying the name of parameters! \n# Make sure you have a look at the documentation!","abfd4793":"pd.Series(fruits, index=weekdays)","5158f418":"fruits = ['Apple','Orange','Plum','Grape','Blueberry','Strawberry']\nweekdays = ['Monday','Tuesday','Wednesday','Thursday','Friday','Monday']","334c7ba2":"pd.Series(fruits,weekdays)","56519377":"pokemon = pd.read_csv(\"..\/input\/pokemon.csv\") # this will create a dataframe","33e26453":"my_col = pd.read_csv(\"..\/input\/pokemon.csv\", usecols= ['Pokemon']) # this will create a dataframe","9c0e79e7":"pd.read_csv(\"..\/input\/pokemon.csv\", usecols= ['Pokemon'], squeeze = True) # this will create a Series","259d23ad":"google = pd.read_csv(\"..\/input\/google_stock_price.csv\", squeeze = True)\ngoogle","a950eb8d":"pokemon.head() # returns a new Dataframe with only 5 values ;)","0c75c532":"google.head() # returns a new Series! ;) # you can also pass a number as a parameter!","5130945a":"pokemon.tail() # returns last 5 rows! you can modify it to print any number of rows from the end","8fb6c4de":"pokemon = pd.read_csv(\"..\/input\/pokemon.csv\", squeeze = True, usecols = ['Pokemon'])\ngoogle = pd.read_csv(\"..\/input\/google_stock_price.csv\", squeeze = True)","ec291eff":"len(pokemon)","1f697ccd":"type(pokemon)","ed228590":"dir(pokemon) # this gives us an idea of available functions corresponding to that object!","2349927c":"sorted(pokemon)","3e0769dc":"list(pokemon)","3bd8f2de":"dict(pokemon)","a6e99cfd":"max(pokemon)","9da6b882":"min(pokemon)","224d0386":"pokemon.values","79288289":"google.index","b604d34e":"pokemon.dtype","4d77767c":"pokemon.is_unique # checks if all the values are unique","dc5b8c74":"google.is_unique # if all the values are unique","1b3efb2a":"pokemon.ndim","03849ac7":"pokemon.shape #(rows,cols)","cfcb0472":"pokemon.size # rows","745df15a":"pokemon.name","f42ed911":"pokemon.head()","f3a1923f":"pokemon.name = 'Pokemon Monsters'","4141a5e9":"pokemon.head()","d79dc240":"pokemon = pd.read_csv(\"..\/input\/pokemon.csv\", squeeze = True, usecols = ['Pokemon'])\ngoogle = pd.read_csv(\"..\/input\/google_stock_price.csv\", squeeze = True)","c4502235":"pokemon.sort_values()","d309c7c2":"pokemon.sort_values().head()","9179d29d":"pokemon.sort_values(ascending=False) # default - True","e4fcc5dc":"google.sort_values().head()","66395f3f":"google.sort_values(ascending=False).tail()","aa8a2ae5":"pokemon = pd.read_csv(\"..\/input\/pokemon.csv\", squeeze = True, usecols = ['Pokemon'])\ngoogle = pd.read_csv(\"..\/input\/google_stock_price.csv\", squeeze = True)","073b6fb1":"google.head()","6148611a":"# this overwrite all the values\ngoogle = google.sort_values()","48d1096e":"google.head()","8ca18101":"google.sort_values(ascending=False).head()","0d674b3f":"google.head()","0165eaea":"google.sort_values(ascending=False, inplace=True)","0590e509":"google.head()","9a1a9b69":"pokemon = pd.read_csv(\"..\/input\/pokemon.csv\", squeeze = True, usecols = ['Pokemon'])\ngoogle = pd.read_csv(\"..\/input\/google_stock_price.csv\", squeeze = True)","344ddd4a":"pokemon.sort_values(inplace= True)","10c24680":"pokemon.head()","8d74c864":"pokemon.sort_index(inplace=True)","70bc7b0f":"pokemon.head(3)","d954021f":"pokemon = pd.read_csv(\"..\/input\/pokemon.csv\", squeeze = True, usecols = ['Pokemon'])\ngoogle = pd.read_csv(\"..\/input\/google_stock_price.csv\", squeeze = True)","837d03cd":"3 in [1,2,3]","1273d3ed":"200 in [1,2,3]","a0ef0cbe":"pokemon.head()","137f6b24":"\"Bulbasaur\" in pokemon","cc0bc629":"720 in pokemon\n","cff40944":"721 in pokemon","11fb850c":"pokemon.index","d4b97f56":"100 in pokemon # when writing this, it is equivalent to the next line\n100 in pokemon.index","007bcbc4":"\"Bulbasaur\" in pokemon.values # now we get it, why we were not able to get a True!!!","cb9419b1":"\"Pikachu\" in pokemon.values","e16ddbea":"pokemon = pd.read_csv(\"..\/input\/pokemon.csv\", squeeze = True, usecols = ['Pokemon'])\ngoogle = pd.read_csv(\"..\/input\/google_stock_price.csv\", squeeze = True)","e7049954":"pokemon.head()","4ba872a6":"pokemon[500]","3238bf8d":"pokemon[[10,20,30,40]]","49042e1f":"pokemon[1:5]","f956a257":"pokemon[1:9:2]\n","c4bf0a1e":"pokemon = pd.read_csv(\"..\/input\/pokemon.csv\",index_col = \"Pokemon\")","0d07e40c":"pokemon.head() # our values of the column has now become the index","b1f1c378":"pokemon = pd.read_csv(\"..\/input\/pokemon.csv\",index_col = \"Pokemon\", squeeze=True)","c1a9a61c":"pokemon.head()","de26e025":"pokemon[0] # we can continue using this","f9d8f2c1":"pokemon['Bulbasaur':'Pikachu']","6859d84a":"pokemon = pd.read_csv(\"..\/input\/pokemon.csv\", squeeze = True, index_col = ['Pokemon'])\npokemon.sort_index(inplace = True)\npokemon.head(3)","4ce63422":"pokemon.get(\"Moltres\")","53152ccb":"pokemon.get(['Moltres','Meowth'])","da6a1851":"pokemon.get(key = \"aishwarya\", default = 'This is not a pokemon')","c8911726":"pokemon.get(key = [\"aishwarya\",\"Charizard\"], default = 'This is not a pokemon')","88c9fb8e":"google = pd.read_csv(\"..\/input\/google_stock_price.csv\", squeeze = True)\ngoogle.head(3)","1cd9de6e":"google.count()","222a1746":"len(google)","bfa37d13":"google.sum()","7cf01a55":"google.mean()","8e3c6386":"google.sum()\/google.count()","4257cb7f":"\ngoogle.std()","7ea5cd65":"google.min()","87773336":"google.max()","f1465972":"google.median()","92b2edab":"google.mode()","d37dfbc4":"\ngoogle.describe()","343c2feb":"google.max()","53a50ee7":"google.min()","0ec9f4d4":"google.idxmax() #index of the max value","f7180989":"google[3011]","60b814dd":"google.idxmin()","52eb5cda":"google[11]","5e8390fe":"google[google.idxmin()]","e88799ca":"pokemon = pd.read_csv(\"..\/input\/pokemon.csv\", index_col = \"Pokemon\", squeeze = True)\npokemon.head(3)","e5cfef5b":"pokemon.value_counts().sum()","5ec7ce5c":"pokemon.count()","c2271405":"pokemon.value_counts(ascending=True)","2ae2e95e":"google = pd.read_csv(\"..\/input\/google_stock_price.csv\", squeeze = True)\ngoogle.head(6)","95d87771":"def classify_performance(number):\n    if number < 300:\n        return \"OK\"\n    elif number >= 300 and number < 650:\n        return \"Satisfactory\"\n    else:\n        return \"Incredible!\"","ddc8ffa3":"google.apply(classify_performance).tail()","0c66c22c":"google.head()","da302f97":"google.apply(lambda stock_price: stock_price + 1) # wont reflect anything until you don't assign it back","f3ae4a1b":"google.head()","fdd1f7a4":"pokemon_names = pd.read_csv(\"..\/input\/pokemon.csv\", usecols = [\"Pokemon\"], squeeze = True)\npokemon_names.head(3)","5bb9b59e":"pokemon_types = pd.read_csv(\"..\/input\/pokemon.csv\", index_col = \"Pokemon\", squeeze = True)\npokemon_types.head(3)","d3e102a5":"pokemon_names.map(pokemon_types).head(10) # Mapping a Series to Series","f07aaf5e":"pokemon_names = pd.read_csv(\"..\/input\/pokemon.csv\", usecols = [\"Pokemon\"], squeeze = True)\npokemon_types = pd.read_csv(\"..\/input\/pokemon.csv\", index_col = \"Pokemon\", squeeze = True).to_dict()","9653b4cb":"pokemon_names.head()","e4b293eb":"pokemon_types # this is a dictionary!","face4ec8":"pokemon_names.map(pokemon_types) # Mapping a Series to a dictionary!","3b2dd7ca":"# Attributes-Methods of Series\n### Attributes\n1. Attribute return information about the object! **Summmary\/detail**\n2. They **do not manipulate the object**. They just simple observe\/view the object.\n3. Attributes **do not need parantheses** in the end but methods need them.\n\n\n### Methods\n1. **Operation\/manipulation\/calculation** are performed on the object by these entities!\n2. **Need parentheses in the end**","4e594ca6":"## Math Methods on `Series` Objects\n\n`object.count()` will exclude the missing or the NaN values","b002201f":"# Python's `in` Keyword!","674a6bb8":"# Parameters and Arguments!\nWhy? Example = \n1. Video Game's Difficulty!\n2. Volume - 1 to 10\n3. Subtitles = True\/False\n\n**Important** : To look at the **documentation** of the method **press shift and tab**\nIf you press it two times or more, it will expand! :-D","9f49ce45":"# Why Bulbasaur is False?\n\n> Python will always look in the numeric index when using `in` operator","005b2016":"## The `.idxmax()` and `.idxmin()` Methods\nindex max and index min methods","6cceef53":"As you can see above that theindex is not required to be unique always, however in case of non-unique indexes, some of the operations might not be possible!","694d6a5a":"Till the time you don't overwrite, it won't change the values so to have this feature executed for us, we would use `inplace` parameter","53eec5e1":"# Python Built-In functions!","61bb2714":"How to bring back the data in it's original form?\n\n# The .sort_index() method","323598fd":"# The ```inplace``` parameter","3ec41db4":"# Create Series from a dictionary","ae3b6de9":"# More `Series` Attribute","9716c915":"# Extract Values by Index Label","a7440bc1":"## The `.value_counts()` Method","4391d69e":"# head() and tail() methods!","f7b57fa9":"# Create Series from List object","18097547":"# Import `Series` with the `read_csv` Method","33c355b1":"## The `.apply()` Method","11a1a3b4":"# The .sort_values() Method","b14e0ded":"### A glimpse of method chaining","2523e0b5":"Construction of Series object by different pre-existing Data Type:\n    1. List\n    2. Dictionary","62e97ee0":"use only specific columns you need - attribute - `usecols =`","939fb88f":"# The `.get()` Method on a Series\nSimilar to how our brackets work, with an advantage,<br> \n1. if the value is not present, we don't get an index error, \n2. it always return None if the value is not present.<br>\n\n***Get into a habit of checking te parameters of a function***\n*The default parameter of the function get = None* this means whenever we are not getting any corresponding index value None is returned.<br> We can also provide a default value to the get parameter.\n\nWe can fetch the index of the corresponding data","f5e65422":"## The `.map()` Method","a84f5cea":"**make sure that the length of both the lists you are using is identical**","ded9e289":"### Some of the methods\n> Manipulation and operations!!","ea4ce943":"### Some of the Attributes \n> No manipulation","78513bff":"# Extract Values by Index Position","2d4ff777":"# How do we import a series?\n> use `squeeze = TRUE` parameter","bccb7f58":"### All our values are in their right place using this method!!","cfc3db68":"Special Mentions:\n1. Pandas turns the keys into Index\n2. Indexes are not necessarily required to be numbers\n3. Advantage of series is that index labels in a series not necessarily have to be unique \n\nSeries = List + Dictionary along with very wonderful methods and functions!"}}