{"cell_type":{"2899754b":"code","1124dcb1":"code","78f51886":"code","0914c43d":"code","042b3f5e":"code","ef1d43c3":"code","467e6233":"code","5083bd9f":"code","c10a9c1c":"code","64b4779b":"code","702467d1":"code","f58d621e":"code","16043a1d":"code","d86784e5":"code","62b43a9a":"code","f8a28b51":"markdown","a5b165ef":"markdown","e7c47c96":"markdown","f9084ec4":"markdown","8e5dfe65":"markdown","036fb44f":"markdown","f593f429":"markdown","2de90376":"markdown","219f6ad8":"markdown"},"source":{"2899754b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nfrom PIL import Image\nprint(os.listdir(\"..\/input\"))","1124dcb1":"path_dogs = r'..\/input\/training_set\/training_set\/dogs\/'\npath_cats = r'..\/input\/training_set\/training_set\/cats\/'\npath_test_cats = r'..\/input\/test_set\/test_set\/cats\/'\npath_test_dogs = r'..\/input\/test_set\/test_set\/dogs\/'\ntraining_dogs = os.listdir(path_dogs)\ntraining_cats = os.listdir(path_cats)\ntesting_dogs = os.listdir(path_test_dogs)\ntesting_cats = os.listdir(path_test_cats)\n","78f51886":"if '.DS_Store' in training_dogs:\n    training_dogs.remove('.DS_Store')\n    \nif '.DS_Store' in testing_dogs:\n    testing_dogs.remove('.DS_Store')\n\nif '.DS_Store' in training_cats:\n    training_cats.remove('.DS_Store')\n    \nif '.DS_Store' in testing_cats:\n    testing_cats.remove('.DS_Store')","0914c43d":"dog_fig, dog_axes = plt.subplots(3,3)\ndog_fig.set_figheight(24)\ndog_fig.set_figwidth(24)\n\nfor i, axis in enumerate(dog_axes):\n    for j, f in enumerate(axis):\n        img = plt.imread(path_dogs+training_dogs[i*3+j])\n        dog_axes[i,j].imshow(img)\n        dog_axes[i,j].set_title(\"Shape.{}\".format(img.shape))","042b3f5e":"cat_fig, cat_axes = plt.subplots(3,3)\ncat_fig.set_figheight(24)\ncat_fig.set_figwidth(24)\n\nfor i, axis in enumerate(cat_axes):\n    for j, f in enumerate(axis):\n        img = plt.imread(path_cats+training_cats[i*3+j])\n        cat_axes[i,j].imshow(img)\n        cat_axes[i,j].set_title(\"Shape.{}\".format(img.shape))","ef1d43c3":"input_shape = (224,224,3)\nnum_classes = 2","467e6233":"from keras.models import Sequential, load_model\nfrom keras.layers import Dense, Dropout, Flatten, Activation\nfrom keras.optimizers import SGD\nfrom keras.utils import np_utils\nfrom keras.applications.mobilenet import MobileNet","5083bd9f":"mobilenet = MobileNet(input_shape, weights='imagenet', include_top=False)","c10a9c1c":"model = Sequential()\nmodel.add(mobilenet)\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes, activation='sigmoid'))\nmodel.summary()\nsgd = SGD(lr=0.0001, decay=1e-6, momentum=0.9, nesterov=True)\nmodel.compile(loss='binary_crossentropy', optimizer=sgd, metrics=['accuracy'])","64b4779b":"img_resize = (224,224)\ndogs_train = []\ncats_train = []\ndogs_test = []\ncats_test = []\nfor dog in training_dogs:\n    img = Image.open(path_dogs + dog)\n    img = img.resize(img_resize)\n    img = np.asarray(img)\n    dogs_train.append(img)\n    \nfor cat in training_cats:\n    img = Image.open(path_cats + cat)\n    img = img.resize(img_resize)\n    img = np.asarray(img)\n    cats_train.append(img)\n    \nfor dog in testing_dogs:\n    img = Image.open(path_test_dogs + dog)\n    img = img.resize(img_resize)\n    img = np.asarray(img)\n    dogs_test.append(img)\n    \nfor cat in testing_cats:\n    img = Image.open(path_test_cats + cat)\n    img = img.resize(img_resize)\n    img = np.asarray(img)\n    cats_test.append(img)\n\ndogs_train_label = [0 for _ in range(len(dogs_train))]\ncats_train_label = [1 for _ in range(len(cats_train))]\ndogs_test_label = [0 for _ in range(len(dogs_test))]\ncats_test_label = [1 for _ in range(len(cats_test))]\n\ndogs_train_label.extend(cats_train_label)\ndogs_test_label.extend(cats_test_label)\nlabel_train = np_utils.to_categorical(dogs_train_label, num_classes)\nlabel_test = np_utils.to_categorical(dogs_test_label, num_classes)\n\n\n#for train data\ndogs_train.extend(cats_train)\ndata_train = np.array(dogs_train, dtype=np.float32)\ndata_train \/= 255\nindex = np.arange(len(data_train))\nnp.random.shuffle(index)\ndata_train = data_train[index]\nlabel_train = label_train[index]\n\n#for test data\ndogs_test.extend(cats_test)\ndata_test = np.array(dogs_test, dtype=np.float32)\ndata_test \/= 255\nindex = np.arange(len(data_test))\nnp.random.shuffle(index)\ndata_test = data_test[index]\nlabel_test = label_test[index]\n","702467d1":"data_train = np.squeeze(data_train)\ndata_test = np.squeeze(data_test)\nlabel_train = np.squeeze(label_train)\nlabel_test = np.squeeze(label_test)\nprint(\"Training label shape: \", label_train.shape)\nprint(\"Testing label shape: \", label_test.shape)\nprint(\"Training data shape: \", data_train.shape)\nprint(\"Testing data shape: \", data_test.shape)","f58d621e":"history = model.fit(data_train, label_train, validation_split=0.2, batch_size=4, epochs=6)","16043a1d":"print(history.history.keys())\n# summarize history for accuracy\nplt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","d86784e5":"test_result = model.predict(data_test, batch_size=4)\n\n_fig, _axes = plt.subplots(3,3)\n_fig.set_figheight(24)\n_fig.set_figwidth(24)\n\nfor i in range(3):\n    for j in range(3):\n        img = data_test[i*3+j]\n        _axes[i,j].imshow(img)\n        if np.argmax(test_result[i*3+j]) == 0:\n            _axes[i,j].set_title(\"Prediction  {}\".format('Dog'))\n        else:\n            _axes[i,j].set_title(\"Prediction  {}\".format('Cat'))","62b43a9a":"_fig, _axes = plt.subplots(3,3)\n_fig.set_figheight(24)\n_fig.set_figwidth(24)\n\nwrong_index = 0\nfor i in range(3):\n    for j in range(3):\n        while wrong_index < len(data_test):\n            if np.argmax(test_result[wrong_index]) != np.argmax(label_test[wrong_index]):\n                img = data_test[wrong_index]\n                _axes[i,j].imshow(img)\n                if np.argmax(test_result[wrong_index]) == 0:\n                    _axes[i,j].set_title(\"Prediction  {}\".format('Dog'))\n                else:\n                    _axes[i,j].set_title(\"Prediction  {}\".format('Cat'))\n                wrong_index += 1\n                break\n            wrong_index += 1\n        if wrong_index ==len(data_test):\n            break","f8a28b51":"Now we would like to see the performance of the model during training","a5b165ef":"Now start traning","e7c47c96":"Let's first display some of the images and their shapes","f9084ec4":"We will be using the 'MobileNet' from Keras API which is also pretrained on ImageNet dataset. See more info [here](https:\/\/keras.io\/applications\/#mobilenet).","8e5dfe65":"Today we are going to build a dog and cat image classifier.","036fb44f":"It can be seen that these images do not have the same shapes","f593f429":"Now we plot some of the classifcation results on test data","2de90376":"Now let's plot some of the wrong classifications","219f6ad8":"Now we need to prepare the training and testing dataset, we assign dogs to class 0 and cats to class 1."}}