{"cell_type":{"43a7e877":"code","cf149c38":"code","55d59dda":"code","2698a716":"code","7f2f8756":"code","d5e52115":"code","2730327d":"code","033ec6d7":"code","32945c4f":"code","6e6bedd0":"code","ccd91340":"code","52fbf6b6":"code","f075278b":"code","9fa3321b":"code","1edce514":"code","f13a7eab":"code","8501fa62":"code","8d442fb5":"code","e6582593":"code","af133cd9":"code","dbb2985a":"markdown","0217a731":"markdown","76f6924e":"markdown","6f22cb08":"markdown","8d97aaba":"markdown","24b1f1c3":"markdown","81911b69":"markdown","09ce1e86":"markdown","b2273b20":"markdown","fab9bd63":"markdown","530fdc5e":"markdown","4674c618":"markdown","f8f19d9c":"markdown"},"source":{"43a7e877":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style = 'whitegrid')\n#plt.style.use('ggplot')","cf149c38":"data2015 = pd.read_csv('..\/input\/world-happiness-report-20152021\/2015.csv')\ndata2015['Year'] = 2015 \n\ndata2016 = pd.read_csv('..\/input\/world-happiness-report-20152021\/2016.csv')\ndata2016['Year'] = 2016\n\ndata2017 = pd.read_csv('..\/input\/world-happiness-report-20152021\/2017.csv')\ndata2017 = data2017.rename(columns = {'Happiness.Rank':'Happiness Rank', 'Happiness.Score' : 'Happiness Score', \n                                      'Economy..GDP.per.Capita.' : 'Economy (GDP per Capita)', 'Health..Life.Expectancy.' : 'Health (Life Expectancy)',\n                                      'Trust..Government.Corruption.' : 'Trust (Government Corruption)', 'Dystopia.Residual' : 'Dystopia Residual'})\ndata2017['Year'] = 2017 \n\n\ndata2018 = pd.read_csv('..\/input\/world-happiness-report-20152021\/2018.csv')\ndata2018 = data2018.rename(columns = {'Overall rank':'Happiness Rank', 'Country or region' : 'Country', 'Score' : 'Happiness Score',\n                                      'GDP per capita' : 'Economy (GDP per Capita)', 'Social support' : 'Family',\n                                      'Healthy life expectancy' : 'Health (Life Expectancy)','Freedom to make life choices' : 'Freedom',\n                                      'Perceptions of corruption' : 'Trust (Government Corruption)'})\ndata2018['Year'] = 2018\n\n\ndata2019 = pd.read_csv('..\/input\/world-happiness-report-20152021\/2019.csv')\ndata2019 = data2019.rename(columns = {'Overall rank':'Happiness Rank', 'Country or region' : 'Country', 'Score' : 'Happiness Score',\n                                      'GDP per capita' : 'Economy (GDP per Capita)', 'Social support' : 'Family',\n                                      'Healthy life expectancy' : 'Health (Life Expectancy)','Freedom to make life choices' : 'Freedom'\n                                     , 'Perceptions of corruption' : 'Trust (Government Corruption)'})\ndata2019['Year'] = 2019 \n\ndata2020 = pd.read_csv('..\/input\/world-happiness-report-20152021\/2020.csv')\ndata2020['Happiness Rank'] =  range(1, len(data2020.index)+1)\ndata2020 = data2020.rename(columns = {'Country name' : 'Country', 'Ladder score' : 'Happiness Score', \n                                      'Logged GDP per capita' : 'Economy (GDP per Capita)', 'Social support' : 'Family', 'Healthy life expectancy' : 'Health (Life Expectancy)',\n                                      'Freedom to make life choices' : 'Freedom', 'Perceptions of corruption' : 'Trust (Government Corruption)'})\ndata2020['Year'] = 2020 \n\ndata2020\n\n\ndata2021 = pd.read_csv('..\/input\/world-happiness-report-20152021\/2021.csv')\ndata2021['Happiness Rank'] =  range(1, len(data2021.index)+1)\ndata2021 = data2021.rename(columns = {'Country name' : 'Country', 'Ladder score' : 'Happiness Score', \n                                      'Logged GDP per capita' : 'Economy (GDP per Capita)', 'Social support' : 'Family', 'Healthy life expectancy' : 'Health (Life Expectancy)',\n                                      'Freedom to make life choices' : 'Freedom', 'Perceptions of corruption' : 'Trust (Government Corruption)'})\ndata2021['Year'] = 2021\n\ndata2021","55d59dda":"datarank = pd.DataFrame(columns = ['Country', 'Happiness Rank', 'Happiness Score', 'Economy (GDP per Capita)',\n                                   'Family', 'Health (Life Expectancy)', 'Freedom','Trust (Government Corruption)',\n                                   'Generosity', 'Year'])\nn = [data2015, data2016, data2017, data2018, data2019, data2020, data2021]\nfor i in n:\n    datarank = datarank.append(i[['Country', 'Happiness Rank', 'Happiness Score', 'Economy (GDP per Capita)',\n                                   'Family', 'Health (Life Expectancy)', 'Freedom','Trust (Government Corruption)',\n                                   'Generosity', 'Year']], ignore_index = 'True')\n","2698a716":"#pd.set_option('display.max_rows', 1000)\ndatarank","7f2f8756":"def color_rank(value):\n    if value == 1:\n        color = 'yellow'\n    elif value == 2:\n        color = 'silver'\n    elif value == 3:\n        color = 'moccasin'\n    else:\n        color = 'default'\n    return 'background-color: %s' % color\n\n\ndef highlight_max(data, color='yellow'):\n    '''\n    highlight the maximum in a Series or DataFrame\n    '''\n    attr = 'background-color: {}'.format(color)\n    data = data.astype(float)\n    if data.ndim == 1: \n        is_max = data == data.max()\n        return [attr if v else '' for v in is_max]\n    else:  \n        is_max = data == data.max().max()\n        return pd.DataFrame(np.where(is_max, attr, ''),\n                            index=data.index, columns=data.columns)\n    \n","d5e52115":"\ndatapivothappiness_rank = datarank.pivot(index='Country', columns='Year', values=['Happiness Rank'])\n\n\ndatapivothappiness_rank = datapivothappiness_rank.dropna(axis = 0)\ndatapivothappiness_rank['AVG'] = datapivothappiness_rank.mean(axis = 1)\ndatapivothappiness_rank = datapivothappiness_rank.sort_values(by = ['AVG'])\ndatapivothappiness_rank['Rank'] = range(1, len(datapivothappiness_rank)+1)\ndatapivothappiness_rank.style.applymap(color_rank, subset = ['Happiness Rank', 'Rank'])","2730327d":"\ndatapivothappiness_score = datarank.pivot_table(index='Country', columns='Year', values=['Happiness Score'])\n\ndatapivothappiness_score = datapivothappiness_score.reset_index()  \n\ndatapivothappiness_score = datapivothappiness_score.dropna(axis = 0)\ndatapivothappiness_score['AVG'] = datapivothappiness_score.mean(axis = 1)\ndatapivothappiness_score = datapivothappiness_score.sort_values(by = ['AVG'], ascending = False)\n\ndatapivothappiness_score['Rank'] = range(1, len(datapivothappiness_score)+1)\ndatapivothappiness_score = datapivothappiness_score.set_index(['Country', 'Rank'])\ndatapivothappiness_score.style.apply(highlight_max)\n","033ec6d7":"plt.figure(figsize = (20,5))\nplt.subplot(1,2,1)\nplt.title('Top 5 Countries Based on Average Happiness Score From 2015 to 2021', fontsize = 14, y=1.05)\ndatapivothappiness_score[0:5]['AVG'].plot(kind = 'bar')\nplt.xlabel('Countries,Rank', fontsize=14)\nplt.yticks(np.arange(0, 8, step = 1))\nfor index,data in enumerate(np.round(datapivothappiness_score[0:5]['AVG'], 4)):\n    plt.text(x=index-0.2 , y =data-0.5 , s=f\"{data}\" , fontdict=dict(fontsize=12))\nplt.ylabel('Happiness Score (AVG)', fontsize=14)\n\nplt.subplot(1,2,2)    \nplt.title('Bottom 5 Countries Based on Average Happiness Score From 2015 to 2021', fontsize = 14, y=1.05)\ndatapivothappiness_score[-6:-1]['AVG'].plot(kind = 'bar', color = 'red')\nplt.xlabel('Countries,Rank', fontsize=14)\nplt.yticks(np.arange(0, 8, step = 1))\nfor index,data in enumerate(np.round(datapivothappiness_score[-6:-1]['AVG'], 4)):\n    plt.text(x=index-0.2 , y =data-0.5 , s=f\"{data}\" , fontdict=dict(fontsize=12))\nplt.ylabel('Happiness Score (AVG)', fontsize=14)\n\nplt.show()","32945c4f":"datapivot_economy = datarank.pivot_table(index='Country', columns='Year', values=['Economy (GDP per Capita)'])\n\ndatapivot_economy = datapivot_economy.reset_index()  \n\ndatapivot_economy = datapivot_economy.dropna(axis = 0)\ndatapivot_economy['AVG'] = datapivot_economy.mean(axis = 1)\ndatapivot_economy = datapivot_economy.sort_values(by = ['AVG'], ascending = False)\n\ndatapivot_economy['Rank'] = range(1, len(datapivot_economy)+1)\ndatapivot_economy = datapivot_economy.set_index(['Country', 'Rank'])\ndatapivot_economy.style.apply(highlight_max)\n","6e6bedd0":"plt.figure(figsize = (20,5))\nplt.subplot(1,2,1)\nplt.title('Top 5 Countries Based on Average Economy Score From 2015 to 2021', fontsize = 14, y=1.05)\ndatapivot_economy[0:5]['AVG'].plot(kind = 'bar')\nplt.xlabel('Countries,Rank', fontsize=14)\nplt.yticks(np.arange(0, 4, step = 1))\nfor index,data in enumerate(np.round(datapivot_economy[0:5]['AVG'], 4)):\n    plt.text(x=index-0.2 , y =data-0.2 , s=f\"{data}\" , fontdict=dict(fontsize=12))\nplt.ylabel('Economy Score (AVG)', fontsize=14)\n\nplt.subplot(1,2,2)    \nplt.title('Bottom 5 Countries Based on Average Economy Score From 2015 to 2021', fontsize = 14, y=1.05)\ndatapivot_economy[-6:-1]['AVG'].plot(kind = 'bar', color = 'red')\nplt.xlabel('Countries,Rank', fontsize=14)\nplt.yticks(np.arange(0, 4, step = 1))\nfor index,data in enumerate(np.round(datapivot_economy[-6:-1]['AVG'], 4)):\n    plt.text(x=index-0.2 , y =data-0.2 , s=f\"{data}\" , fontdict=dict(fontsize=12))\nplt.ylabel('Economy Score (AVG)', fontsize=14)\n\nplt.show()","ccd91340":"datapivot_family = datarank.pivot_table(index='Country', columns='Year', values=['Family'])\n\ndatapivot_family = datapivot_family.reset_index()  \n\ndatapivot_family = datapivot_family.dropna(axis = 0)\ndatapivot_family['AVG'] = datapivot_family.mean(axis = 1)\ndatapivot_family = datapivot_family.sort_values(by = ['AVG'], ascending = False)\n\ndatapivot_family['Rank'] = range(1, len(datapivot_family)+1)\ndatapivot_family = datapivot_family.set_index(['Country', 'Rank'])\ndatapivot_family.style.apply(highlight_max)\n","52fbf6b6":"plt.figure(figsize = (20,5))\nplt.subplot(1,2,1)\nplt.title('Top 5 Countries Based on Average Family Score From 2015 to 2021', fontsize = 14, y=1.05)\ndatapivot_family[0:5]['AVG'].plot(kind = 'bar')\nplt.xlabel('Countries,Rank', fontsize=14)\nplt.yticks(np.arange(0, 1.6, step = 0.2))\nfor index,data in enumerate(np.round(datapivot_family[0:5]['AVG'], 4)):\n    plt.text(x=index-0.2 , y =data-0.1 , s=f\"{data}\" , fontdict=dict(fontsize=12))\nplt.ylabel('Family Score (AVG)', fontsize=14)\n\nplt.subplot(1,2,2)    \nplt.title('Bottom 5 Countries Based on Average Family Score From 2015 to 2021', fontsize = 14, y=1.05)\ndatapivot_family[-6:-1]['AVG'].plot(kind = 'bar', color = 'red')\nplt.xlabel('Countries,Rank', fontsize=14)\nplt.yticks(np.arange(0, 1.6, step = 0.2))\nfor index,data in enumerate(np.round(datapivot_family[-6:-1]['AVG'], 4)):\n    plt.text(x=index-0.2 , y =data-0.1 , s=f\"{data}\" , fontdict=dict(fontsize=12))\nplt.ylabel('Family Score (AVG)', fontsize=14)\n\nplt.show()","f075278b":"datapivot_health = datarank.pivot_table(index='Country', columns='Year', values=['Health (Life Expectancy)'])\n\ndatapivot_health = datapivot_health.reset_index()  \n\ndatapivot_health = datapivot_health.dropna(axis = 0)\ndatapivot_health['AVG'] = datapivot_health.mean(axis = 1)\ndatapivot_health = datapivot_health.sort_values(by = ['AVG'], ascending = False)\n\ndatapivot_health['Rank'] = range(1, len(datapivot_health)+1)\ndatapivot_health = datapivot_health.set_index(['Country', 'Rank'])\ndatapivot_health.style.apply(highlight_max)","9fa3321b":"plt.figure(figsize = (20,5))\nplt.subplot(1,2,1)\nplt.title('Top 5 Countries Based on Average Health Score From 2015 to 2021', fontsize = 14, y=1.05)\ndatapivot_health[0:5]['AVG'].plot(kind = 'bar')\nplt.xlabel('Countries,Rank', fontsize=14)\nplt.yticks(np.arange(0, 14, step = 1))\nfor index,data in enumerate(np.round(datapivot_health[0:5]['AVG'], 4)):\n    plt.text(x=index-0.25 , y =data-1 , s=f\"{data}\" , fontdict=dict(fontsize=12))\nplt.ylabel('Health Score (AVG)', fontsize=14)\n\nplt.subplot(1,2,2)    \nplt.title('Bottom 5 Countries Based on Average Health Score From 2015 to 2021', fontsize = 14, y=1.05)\ndatapivot_health[-6:-1]['AVG'].plot(kind = 'bar', color = 'red')\nplt.xlabel('Countries,Rank', fontsize=14)\nplt.yticks(np.arange(0, 14, step = 1))\nfor index,data in enumerate(np.round(datapivot_health[-6:-1]['AVG'], 4)):\n    plt.text(x=index-0.2 , y =data-1 , s=f\"{data}\" , fontdict=dict(fontsize=12))\nplt.ylabel('Health Score (AVG)', fontsize=14)\n\nplt.show()","1edce514":"datapivot_freedom = datarank.pivot_table(index='Country', columns='Year', values=['Freedom'])\n\ndatapivot_freedom = datapivot_freedom.reset_index()  \n\ndatapivot_freedom = datapivot_freedom.dropna(axis = 0)\ndatapivot_freedom['AVG'] = datapivot_freedom.mean(axis = 1)\ndatapivot_freedom = datapivot_freedom.sort_values(by = ['AVG'], ascending = False)\n\ndatapivot_freedom['Rank'] = range(1, len(datapivot_freedom)+1)\ndatapivot_freedom = datapivot_freedom.set_index(['Country', 'Rank'])\ndatapivot_freedom.style.apply(highlight_max)","f13a7eab":"plt.figure(figsize = (20,5))\nplt.subplot(1,2,1)\nplt.title('Top 5 Countries Based on Average Freedom Score From 2015 to 2021', fontsize = 14, y=1.05)\ndatapivot_freedom[0:5]['AVG'].plot(kind = 'bar')\nplt.xlabel('Countries,Rank', fontsize=14)\nplt.yticks(np.arange(0, 0.8, step = 0.1))\nfor index,data in enumerate(np.round(datapivot_freedom[0:5]['AVG'], 4)):\n    plt.text(x=index-0.2 , y =data-0.05 , s=f\"{data}\" , fontdict=dict(fontsize=12))\nplt.ylabel('Freedom Score (AVG)', fontsize=14)\n\nplt.subplot(1,2,2)    \nplt.title('Bottom 5 Countries Based on Average Freedom Score From 2015 to 2021', fontsize = 14, y=1.05)\ndatapivot_freedom[-6:-1]['AVG'].plot(kind = 'bar', color = 'red')\nplt.xlabel('Countries,Rank', fontsize=14)\nplt.yticks(np.arange(0, 0.8, step = 0.1))\nfor index,data in enumerate(np.round(datapivot_freedom[-6:-1]['AVG'], 4)):\n    plt.text(x=index-0.2 , y =data-0.05 , s=f\"{data}\" , fontdict=dict(fontsize=12))\nplt.ylabel('Freedom Score (AVG)', fontsize=14)\n\nplt.show()","8501fa62":"datapivot_trustgov = datarank.pivot_table(index='Country', columns='Year', values=['Trust (Government Corruption)'])\n\ndatapivot_trustgov = datapivot_trustgov.reset_index()  \n\ndatapivot_trustgov = datapivot_trustgov.dropna(axis = 0)\ndatapivot_trustgov['AVG'] = datapivot_trustgov.mean(axis = 1)\ndatapivot_trustgov = datapivot_trustgov.sort_values(by = ['AVG'], ascending = False)\n\ndatapivot_trustgov['Rank'] = range(1, len(datapivot_trustgov)+1)\ndatapivot_trustgov = datapivot_trustgov.set_index(['Country', 'Rank'])\ndatapivot_trustgov.style.apply(highlight_max)","8d442fb5":"plt.figure(figsize = (20,5))\nplt.subplot(1,2,1)\nplt.title('Top 5 Countries Based on Average Trust Goverment Score From 2015 to 2021', fontsize = 14, y=1.05)\ndatapivot_trustgov[0:5]['AVG'].plot(kind = 'bar')\nplt.xlabel('Countries,Rank', fontsize=14)\nplt.yticks(np.arange(0, 0.5, step = 0.05))\nfor index,data in enumerate(np.round(datapivot_trustgov[0:5]['AVG'], 4)):\n    plt.text(x=index-0.2 , y =data-0.03 , s=f\"{data}\" , fontdict=dict(fontsize=12))\nplt.ylabel('Trust Goverment Score (AVG)', fontsize=14)\n\nplt.subplot(1,2,2)    \nplt.title('Bottom 5 Countries Based on Trust Goverment Freedom Score From 2015 to 2021', fontsize = 14, y=1.05)\ndatapivot_trustgov[-6:-1]['AVG'].plot(kind = 'bar', color = 'red')\nplt.xlabel('Countries,Rank', fontsize=14)\nplt.yticks(np.arange(0, 0.5, step = 0.05))\nfor index,data in enumerate(np.round(datapivot_trustgov[-6:-1]['AVG'], 4)):\n    plt.text(x=index-0.2 , y =data-0.03 , s=f\"{data}\" , fontdict=dict(fontsize=12))\nplt.ylabel('Trust Goverment Score (AVG)', fontsize=14)\n\nplt.show()","e6582593":"datapivot_generosity = datarank.pivot_table(index='Country', columns='Year', values=['Generosity'])\n\ndatapivot_generosity = datapivot_generosity.reset_index()  \n\ndatapivot_generosity = datapivot_generosity.dropna(axis = 0)\ndatapivot_generosity['AVG'] = datapivot_generosity.mean(axis = 1)\ndatapivot_generosity = datapivot_generosity.sort_values(by = ['AVG'], ascending = False)\n\ndatapivot_generosity['Rank'] = range(1, len(datapivot_generosity)+1)\ndatapivot_generosity = datapivot_generosity.set_index(['Country', 'Rank'])\ndatapivot_generosity.style.apply(highlight_max)","af133cd9":"plt.figure(figsize = (20,5))\nplt.subplot(1,2,1)\nplt.title('Top 5 Countries Based on Average Generosity Score From 2015 to 2021', fontsize = 14, y=1.05)\ndatapivot_generosity[0:5]['AVG'].plot(kind = 'bar')\nplt.xlabel('Countries,Rank', fontsize=14)\nplt.yticks(np.arange(0, 0.8, step = 0.1))\nfor index,data in enumerate(np.round(datapivot_generosity[0:5]['AVG'], 4)):\n    plt.text(x=index-0.2 , y =data-0.05 , s=f\"{data}\" , fontdict=dict(fontsize=12))\nplt.ylabel('Freedom Score (AVG)', fontsize=14)\n\nplt.subplot(1,2,2)    \nplt.title('Bottom 5 Countries Based on Average Generosity Score From 2015 to 2021', fontsize = 14, y=1.05)\ndatapivot_generosity[-6:-1]['AVG'].plot(kind = 'bar', color = 'red')\nplt.xlabel('Countries,Rank', fontsize=14)\n\nfor index,data in enumerate(np.round(datapivot_generosity[-6:-1]['AVG'], 4)):\n    plt.text(x=index-0.2 , y =0.002 , s=f\"{data}\" , fontdict=dict(fontsize=12))\nplt.ylabel('Freedom Score (AVG)', fontsize=14)\n\nplt.show()","dbb2985a":"## Family","0217a731":"# Analysis Each Columns \/ Subjects","76f6924e":"## Preprocessing Each Data into Same Format Columns","6f22cb08":"## Store Each Data from to 2015 - 2021 into New Data Frame","8d97aaba":"## Happiness Score","24b1f1c3":"## Economy per GDP","81911b69":"## Function","09ce1e86":"## Health ( Life Expectancy )","b2273b20":"## Generosity","fab9bd63":"## Happiness Rank","530fdc5e":"## Freedom","4674c618":"## Trust (Government Corruption)","f8f19d9c":"## This notebook is un update from this excellent notebook : https:\/\/www.kaggle.com\/rifkyahmadsaputra\/analysis-happiness-report-from-2015-to-2020\n## Please upvote original notebook !"}}