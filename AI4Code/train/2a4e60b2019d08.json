{"cell_type":{"61a1fb6f":"code","3d6a7d46":"code","9ae6e73d":"code","cd4a615e":"code","f3527c83":"code","20b5e27f":"code","b204419b":"code","cc77bc68":"code","1d54afc5":"code","8925ea09":"code","7f36e254":"code","53ea8137":"code","e0206229":"code","74a06d50":"code","8f7b4d85":"code","1782ad3f":"code","dbe43c79":"code","f551443a":"code","6966d212":"code","b8d7a247":"code","8e24ce48":"code","d25c0d66":"code","c6839b0c":"code","99ce701a":"code","212b8b49":"code","f19d65ac":"code","c8420974":"code","86db8f31":"code","0dc179a1":"code","fafc04ca":"code","769c8399":"code","2369c73d":"code","39494c03":"code","aefe617e":"code","18ce6390":"code","67dc16fc":"code","bcb0bb7a":"code","54b82f43":"code","7a217c39":"code","2c8e5f27":"code","8ed83968":"code","844a6cba":"code","198c067f":"code","2139a95c":"code","663bc20b":"code","ff5a3f23":"code","2a4f4378":"code","6866e6e6":"code","f6d4b014":"code","5dc98eea":"code","f28b9a95":"markdown","d0c6f318":"markdown","50143801":"markdown","0b0c9a2f":"markdown","874698be":"markdown","ea4a1fdf":"markdown","f7800caf":"markdown","08ebaf6d":"markdown","05b5e483":"markdown","696c5d09":"markdown","8f03210e":"markdown","2fa18673":"markdown","336cbf5a":"markdown","8e679205":"markdown","8cc2df66":"markdown","221f1951":"markdown","a35d2200":"markdown","f5982b2b":"markdown"},"source":{"61a1fb6f":"import pandas as pd # for Data Analysis\nimport numpy as np # For Numerical Activity\nimport matplotlib.pyplot as plt # For visualization\nimport seaborn as sns # For Visualization\n\nimport plotly.express as px\n\nplt.style.use('fivethirtyeight')\n","3d6a7d46":"df = pd.read_csv(\"..\/input\/beginners-classification-dataset\/classification.csv\")","9ae6e73d":"df.head()","cd4a615e":"df.info()","f3527c83":"df.head()","20b5e27f":"df.isnull().sum()","b204419b":"df.isnull().sum().plot(kind='bar')\nplt.title(\"No Null Values\")\nplt.xlabel(\"Attributes\")\nplt.ylabel(\"Counts\")","cc77bc68":"sns.set_theme(style=\"whitegrid\")\nsns.boxplot(x=\"age\", data=df, palette=\"Set3\")\nplt.title(\"Age Distribution\")","1d54afc5":"df.age.min(), df.age.max()","8925ea09":"sns.set_theme(style=\"whitegrid\")\nsns.boxplot(x=\"interest\", data=df, palette=\"Set1\")\nplt.title(\"Interests Distribution\")","7f36e254":"df.interest.min(), df.interest.max()","53ea8137":"df.success.unique()","e0206229":"df.success.value_counts().plot(kind='bar')\nplt.xlabel(\"Success or Not\")\nplt.ylabel(\"Count\")\nplt.title(\"Success \")","74a06d50":"sns.scatterplot(data=df, x=\"age\", y=\"interest\", hue=\"success\")","8f7b4d85":"fig = px.scatter(df, x=\"age\", y=\"interest\", color=\"success\")\nfig.show()","1782ad3f":"sns.heatmap(df.corr(), annot=True)","dbe43c79":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","f551443a":"X = df[[\"age\",\"interest\"]]\nY = df[\"success\"]","6966d212":"from sklearn.linear_model import LogisticRegression\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.30, random_state=42)\nclf = LogisticRegression(random_state=0).fit(X_train, y_train)","b8d7a247":"y_pred = clf.predict(X_test)","8e24ce48":"y_pred","d25c0d66":"clf.score(X_train, y_train)","c6839b0c":"accuracy_score(y_test,y_pred)","99ce701a":"from sklearn.neighbors import KNeighborsClassifier","212b8b49":"neigh = KNeighborsClassifier(n_neighbors=2)\nneigh.fit(X_train, y_train)","f19d65ac":"y_pred = neigh.predict(X_test)","c8420974":"y_pred","86db8f31":"accuracy_score(y_test,y_pred)","0dc179a1":"from sklearn.naive_bayes import GaussianNB","fafc04ca":"model = GaussianNB()\nmodel.fit(X_train,y_train)","769c8399":"y_pred = model.predict(X_test)","2369c73d":"accuracy_score(y_test,y_pred)","39494c03":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler","aefe617e":"X = df[[\"age\", \"success\"]]\nY = df[\"interest\"]\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.30, random_state=42)","18ce6390":"lr = LinearRegression()\nlr.fit(X_train,y_train)\nlr.score(X_train, y_train)","67dc16fc":"y_hat = lr.predict(X_test)\nprint(\"MSE\", mean_squared_error(y_test, y_hat))\nprint(\"MAE\", mean_absolute_error(y_test, y_hat))\nprint(\"Score\", r2_score(y_test, y_hat))","bcb0bb7a":"plt.figure(figsize=(12, 5))\n\nax1 = sns.distplot(df['interest'], hist=False, color=\"r\", label=\"Actual Value\") # hist=True\nsns.distplot(y_hat, hist=False, color=\"b\", label=\"Predicted Values\" , ax=ax1)\n\n\nplt.title('Actual vs Predicted Values for Interest')\nplt.xlabel('Interest')\nplt.ylabel('Proportion of Interest')\nplt.legend()\nplt.show()\nplt.close()","54b82f43":"pr=PolynomialFeatures(degree=2)\npr","7a217c39":"X = df[[\"age\", \"success\"]]\nY = df[\"interest\"]\n","2c8e5f27":"X_pr = pr.fit_transform(X)","8ed83968":"X_train_pr, X_test_pr, y_train, y_test = train_test_split(X_pr, Y, test_size=0.30, random_state=42)","844a6cba":"lr = LinearRegression()\nlr.fit(X_train_pr,y_train)\nlr.score(X_train_pr, y_train)","198c067f":"y_hat = lr.predict(X_test_pr)\nprint(\"MSE\", mean_squared_error(y_test, y_hat))\nprint(\"MAE\", mean_absolute_error(y_test, y_hat))\nprint(\"Score\", r2_score(y_test, y_hat))","2139a95c":"plt.figure(figsize=(12, 5))\n\nax1 = sns.distplot(df['interest'], hist=False, color=\"r\", label=\"Actual Value\") # hist=True\nsns.distplot(y_hat, hist=False, color=\"b\", label=\"Predicted Values\" , ax=ax1)\n\n\nplt.title('Actual vs Predicted Values for Interest')\nplt.xlabel('Interest')\nplt.ylabel('Proportion of Interest')\nplt.legend()\nplt.show()\nplt.close()","663bc20b":"norm = MinMaxScaler()\npr = PolynomialFeatures(2)","ff5a3f23":"X_norm = norm.fit_transform(X)\nX_pr = pr.fit_transform(X_norm)","2a4f4378":"X_train_pr, X_test_pr, y_train, y_test = train_test_split(X_pr, Y, test_size=0.30, random_state=42)","6866e6e6":"lr = LinearRegression()\nlr.fit(X_train_pr,y_train)\nlr.score(X_train_pr, y_train)","f6d4b014":"y_hat = lr.predict(X_test_pr)\nprint(\"MSE\", mean_squared_error(y_test, y_hat))\nprint(\"MAE\", mean_absolute_error(y_test, y_hat))\nprint(\"Score\", r2_score(y_test, y_hat))","5dc98eea":"plt.figure(figsize=(12, 5))\n\nax1 = sns.distplot(df['interest'], hist=False, color=\"r\", label=\"Actual Value\") # hist=True\nsns.distplot(y_hat, hist=False, color=\"b\", label=\"Predicted Values\" , ax=ax1)\n\n\nplt.title('Actual vs Predicted Values for Interest')\nplt.xlabel('Interest')\nplt.ylabel('Proportion of Interest')\nplt.legend()\nplt.show()\nplt.close()","f28b9a95":"# 4. Model Preparation & Visualization","d0c6f318":"| Model      | Accuracy\/R2 Score |\n| ----------- | ----------- |\n| Binary Classification - Logistic Regression      | 0.9       |\n| Binary Classification - kNN   | 0.9111        |\n| Binary Classification - Naive Bayes | 0.9     |\n| Linear Regression - Multivariate (Age)   | 0.5346246397434944       |\n| Linear Regression - Polynomial with Normalization   | 0.5903856169804524       |","50143801":"# 1. Loading Libraries","0b0c9a2f":"## 3. Interest Column","874698be":"# 3. Data Preparation","ea4a1fdf":"## 1. Binary Classification - Logistic Regression","f7800caf":"## 6. Linear Regression - Polynomial with Normalization","08ebaf6d":"## 2. Binary Classification - kNN","05b5e483":"# 2. Loading Data","696c5d09":"## 5. Linear Regression - Polynomial Features","8f03210e":"## 4. Success","2fa18673":"## 4. Linear Regression - Multivariate","336cbf5a":"## 3. Binary Classification - Naive Bayes","8e679205":"###  Please Upvote if you liked this notebook. ","8cc2df66":"## 1. Finding Missing Values","221f1951":"## 2. Age Column","a35d2200":"# 5. Inference: ","f5982b2b":"Hi Kaggle Family, \n\nIn this beginner classification dataset, we will be doing visualization of the data and will be applying some classification algorithms and regression algorithms. \n\nPlease <b>\"Upvote\"<\/b> if you liked it. "}}