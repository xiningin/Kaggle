{"cell_type":{"9f935300":"code","a7b64f26":"code","e9988cff":"code","ffacce3b":"code","1452ab9b":"code","97047bb3":"code","d2a564b6":"code","bf1a6539":"code","a7c4457b":"code","419ce7ae":"code","38d969d3":"code","b24b50ec":"code","abaf4fa0":"code","e6f2fb30":"code","38f15f79":"code","444995e7":"code","b45282f6":"code","1702c68e":"code","70e2199b":"code","8041eb14":"code","93037af3":"code","a67701bd":"code","91a86b8e":"code","50346bd7":"code","cd8b7cc9":"code","35bdc7af":"code","92feaecb":"code","1601e311":"code","ce836a85":"code","de316ae9":"code","cdbafe0c":"code","db813f00":"code","c9042725":"code","4c67353c":"code","33c36d39":"code","03955586":"code","88e40b33":"code","c760e897":"code","87ab1c09":"code","9dfdb6a5":"code","a2a5f9b3":"code","4707159b":"code","fe764bc1":"code","7e8eb7fe":"code","e7851b02":"code","5cd4dc04":"code","69e3849c":"code","1e3e367c":"code","898b6575":"code","e89fa359":"code","45963ad6":"code","0f1986ef":"code","a767bf20":"code","05dcc2d0":"code","6997b1ad":"code","3d7bb85f":"code","9a091dcb":"code","9855c090":"code","80e26237":"code","f6779b04":"code","02ee128c":"code","c8ce3c9b":"code","6ae12418":"code","965bacd1":"code","75edf6ea":"code","6acb0664":"code","6905226d":"code","0e0d3d09":"code","74bea4b3":"code","ade52440":"code","6b27d5ce":"code","92d24d47":"code","68ad4cf2":"code","62f9053d":"code","a496fc38":"code","6c5815f5":"code","b332bf28":"code","bd9b59bb":"code","db36c16d":"code","fee41710":"code","ccd18629":"code","11d07c80":"markdown","368a0509":"markdown","e5abc860":"markdown","3b1a4ff9":"markdown","b31e0f6b":"markdown","fb1c899c":"markdown","196e524e":"markdown","4b73c05e":"markdown","ebcef1ce":"markdown","b935fc23":"markdown","e36a3f1c":"markdown","f9e4ec14":"markdown","2d62e5a1":"markdown","42aaef7c":"markdown","db184d39":"markdown"},"source":{"9f935300":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","a7b64f26":"import scipy as sp\nfrom collections import Counter\nfrom functools import partial","e9988cff":"import os\nprint(os.listdir(\"..\/input\"))","ffacce3b":"data_path=\"..\/input\/petfinder-adoption-prediction\"\nfirst_kernel_path=\"..\/input\/pets-adoption-simple-pandas-random-forest\"\nimage_kernel_path=\"..\/input\/pet-adoption-only-images\"\nsvd_kernel_path=\"..\/input\/pet-adoption-only-text-svd\"","1452ab9b":"train = pd.read_csv(data_path+\"\/train\/train.csv\")\ntest = pd.read_csv(data_path+\"\/test\/test.csv\")\ncolor_labels = pd.read_csv(data_path+\"\/color_labels.csv\")\nbreed_labels = pd.read_csv(data_path+\"\/breed_labels.csv\")\nstate_labels = pd.read_csv(data_path+\"\/state_labels.csv\")","97047bb3":"import warnings\nwarnings.filterwarnings('ignore')","d2a564b6":"def print_columns_with_null(df):\n    dfn=df.isnull().sum()\n    return dfn[dfn>0]","bf1a6539":"df_all0 = pd.read_csv(first_kernel_path+\"\/df_all0.csv\")\ndf_all0.head()","a7c4457b":"txt_data = pd.read_csv(first_kernel_path+\"\/txt_data.csv\")\ntxt_data.columns = ['PetID','sent_magnitude','sent_score','sent_language']\ntxt_data.head()","419ce7ae":"img_df1a = pd.read_csv(image_kernel_path+\"\/img_df1a_local.csv\")\nimg_df1a.columns = ['PetID','ImageID','img_met_score','img_met_description']\nimg_df1a.head()","38d969d3":"img_df1c = pd.read_csv(image_kernel_path+\"\/img_df1c_local.csv\")\nimg_df1c.columns = ['PetID','ImageID','img_crp_x','img_crp_y','img_crp_conf','img_crp_if']\nimg_df1c.head()","b24b50ec":"img_df1p = pd.read_csv(image_kernel_path+\"\/img_df1p_local.csv\")\nimg_df1p.columns = ['PetID','ImageID','img_par_red','img_par_green','img_par_blue','img_par_score','img_par_pf']\nimg_df1p.head()","abaf4fa0":"des_svd_df = pd.read_csv(svd_kernel_path+\"\/des_svd_df.csv\")\ndes_svd_df.iloc[:,0:10].head()","e6f2fb30":"prev_subm = pd.read_csv(\"..\/input\/pets-adoption-simple-pandas-random-forest\/submission.csv\")\nprev_subm.head()","38f15f79":"df_all0.shape","444995e7":"txt_data.shape","b45282f6":"img_df1a.shape","1702c68e":"img_df1c.shape","70e2199b":"img_df1p.shape","8041eb14":"des_svd_df.shape","93037af3":"rescuers=df_all0.groupby(by='RescuerID')['RescuerID'].count()\ndf_rescuers=pd.DataFrame(rescuers)\ndf_rescuers.columns=['ResLev']\ndf_rescuers.reset_index(inplace=True)\ndf_rescuers.head()","a67701bd":"dfm=df_all0.merge(df_rescuers,on='RescuerID')\nnumeric_cols=['Age','PhotoAmt','Quantity','Fee','DescriptionLength','ResLev']\ncategorical_cols=['Sterilized','FurLength','Breed1','State','AdoptionSpeed','Breed2','MaturitySize','Gender','Dewormed','Color1','Color2','Color3','Health']\ncols=['PetID']+numeric_cols+categorical_cols\ndfm=dfm[cols]\ndfm.shape","91a86b8e":"dfm=dfm.merge(txt_data,on='PetID', how='left')\ncategorical_cols=categorical_cols+['sent_language']\ndfm.shape","50346bd7":"n_svd=32\nsvd=des_svd_df.iloc[:,0:n_svd+3]\nsvd.drop('Description',axis=1,inplace=True)\nsvd.drop('AdoptionSpeed',axis=1,inplace=True)\ndfm=dfm.merge(svd,on='PetID', how='left')\ndfm.shape","cd8b7cc9":"img_df1ad=img_df1a.groupby(['PetID'])['img_met_description'].apply(', '.join).reset_index()","35bdc7af":"img_df1ad['img_met_description1']=img_df1ad['img_met_description'].apply(lambda s:s.split(',')).apply(set).apply(','.join)","92feaecb":"img_df1ad['img_met_description1'].loc[0]","1601e311":"img_df1ad['img_met_description'].loc[0]","ce836a85":"img_df1ad.drop('img_met_description',axis=1,inplace=True)\nimg_df1ad.head()","de316ae9":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD","cdbafe0c":"def find_svd(df,txt_col_name,n_comp):\n    tfv = TfidfVectorizer(analyzer='word', stop_words = 'english', token_pattern=r'\\b[a-zA-Z]\\w+\\b',\n                      min_df=1,  max_features=10000, strip_accents='unicode', \n                      ngram_range=(1, 32), use_idf=1, smooth_idf=1, sublinear_tf=1,)\n    corpus=list(df[txt_col_name])\n    txt_trasf=tfv.fit_transform(corpus)\n    svd = TruncatedSVD(n_components=n_comp, n_iter=10, tol=1.0)\n    svd.fit(txt_trasf)\n    txt_svd=svd.transform(txt_trasf)\n    txt_svd_df=pd.DataFrame(txt_svd)\n    return(txt_svd_df)","db813f00":"nc=16\nimg_met_svd=find_svd(img_df1ad,'img_met_description1',nc)\nimg_met_svd.columns=['SVD_'+str(c) for c in range(0,nc)]\nimg_met_svd['PetID']=img_df1ad['PetID']","c9042725":"img_df1ar=img_met_svd\nimg_df1ar['img_met_score_max']=img_df1a.groupby(by=['PetID','ImageID'],as_index=False).agg({'img_met_score': 'max'})['img_met_score'] \nimg_df1ar['img_met_score_min']=img_df1a.groupby(by=['PetID','ImageID'],as_index=False).agg({'img_met_score': 'min'})['img_met_score'] \nimg_df1ar.head()","4c67353c":"img_df1cr1=img_df1c[img_df1c['ImageID']==1]\nimg_df1cr1.drop('ImageID', axis=1, inplace=True)\nimg_df1cr1.columns=['PetID','img_crp_x1','img_crp_y1','img_crp_conf1','img_crp_if1']\nimg_df1cr2=img_df1c[img_df1c['ImageID']==2]\nimg_df1cr2.drop('ImageID', axis=1, inplace=True)\nimg_df1cr2.columns=['PetID','img_crp_x2','img_crp_y2','img_crp_conf2','img_crp_if2']\nimg_df1cr3=img_df1c[img_df1c['ImageID']==3]\nimg_df1cr3.drop('ImageID', axis=1, inplace=True)\nimg_df1cr3.columns=['PetID','img_crp_x3','img_crp_y3','img_crp_conf3','img_crp_if3']\nimg_df1cr=img_df1cr1\nimg_df1cr.head()","33c36d39":"img_df1cr=img_df1cr.merge(img_df1cr2,on='PetID')\nimg_df1cr=img_df1cr.merge(img_df1cr3,on='PetID')\nimg_df1cr.head()","03955586":"img_df1cr.isna().sum()","88e40b33":"img_df1cr.fillna(-1, inplace=True)","c760e897":"img_df1p.head()","87ab1c09":"img_df1p.shape","9dfdb6a5":"img_df1pg=img_df1p.groupby(by=['PetID','ImageID'],as_index=False).agg({'img_par_score': 'max', \n                                                             'img_par_red':'first',\n                                                             'img_par_green':'first',\n                                                             'img_par_blue':'first',\n                                                             'img_par_pf':'first'})\nimg_df1pg.head()","a2a5f9b3":"img_df1pr1=img_df1pg[img_df1pg['ImageID']==1]\nimg_df1pr1.drop('ImageID', axis=1, inplace=True)\nimg_df1pr1.columns=['PetID','img_par_red1','img_par_green1','img_par_blue1','img_par_pf1','img_par_score1']\nimg_df1pr2=img_df1pg[img_df1pg['ImageID']==2]\nimg_df1pr2.drop('ImageID', axis=1, inplace=True)\nimg_df1pr2.columns=['PetID','img_par_red2','img_par_green2','img_par_blue2','img_par_pf2','img_par_score2']\nimg_df1pr3=img_df1pg[img_df1pg['ImageID']==3]\nimg_df1pr3.drop('ImageID', axis=1, inplace=True)\nimg_df1pr3.columns=['PetID','img_par_red3','img_par_green3','img_par_blue3','img_par_pf3','img_par_score3']\nimg_df1pr=img_df1pr1\nimg_df1pr.head()","4707159b":"img_df1pr=img_df1pr.merge(img_df1pr2,on='PetID')\nimg_df1pr=img_df1pr.merge(img_df1pr3,on='PetID')\nimg_df1pr.head()","fe764bc1":"img=img_df1ar\nimg=img.merge(img_df1cr,on=['PetID'], how='left')\nimg=img.merge(img_df1pr,on=['PetID'], how='left')\nimg.shape","7e8eb7fe":"img.fillna(-1,inplace=True)\nimg.head()","e7851b02":"dfm=dfm.merge(img,on='PetID', how='left')\ndfm.shape","5cd4dc04":"df_all=dfm\ndf_all.head()","69e3849c":"print_columns_with_null(df_all)","1e3e367c":"df_all['sent_magnitude'].fillna(-1, inplace=True) # -1=no comments received\ndf_all['sent_score'].fillna(-1, inplace=True) # -1=no comments received\ndf_all['sent_language'].fillna('en', inplace=True) # default=english","898b6575":"df_all.fillna(-1, inplace=True) # -1=no images","e89fa359":"print_columns_with_null(df_all)","45963ad6":"# categorical_cols=categorical_cols # no add to do\ncategorical_cols","0f1986ef":"df_all[categorical_cols]=df_all[categorical_cols].apply(lambda c : c.astype('category'))","a767bf20":"df_all.to_csv('df_all.csv')\ndf_all.head()","05dcc2d0":"df_all.dtypes[df_all.dtypes=='object']","6997b1ad":"df_all.columns","3d7bb85f":"dftrain=df_all[np.invert(df_all['AdoptionSpeed']==-1)].copy()\ndftest=df_all[df_all['AdoptionSpeed']==-1].copy()","9a091dcb":"dftest_ids=dftest['PetID']\ndftest_ids.head()","9855c090":"dftrain = dftrain.drop(['PetID'],axis=1)\ndftest = dftest.drop(['PetID'],axis=1)","80e26237":"XT = dftest.drop('AdoptionSpeed',axis=1)\ny  = dftrain['AdoptionSpeed']\nX  = dftrain.drop('AdoptionSpeed',axis=1)","f6779b04":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import KFold","02ee128c":"import lightgbm as lgb","c8ce3c9b":"cat_features=[x for x in categorical_cols if x!='AdoptionSpeed']","6ae12418":"parameters = {'application': 'regression',\n              'boosting': 'gbdt',\n              'metric': 'rmse',\n              'max_bin' : 8,\n              'num_leaves': 12,\n              'max_depth': 4,\n              'learning_rate': 0.01,\n              'bagging_fraction': 0.8,\n              'feature_fraction': 0.8,\n              'min_split_gain': 0.01,\n              'min_child_samples': 128,\n              'min_child_weight': 0.1,\n              'data_random_seed': 123,\n              'verbosity': -1,\n              'early_stopping_rounds': 50,\n              'num_rounds': 3000}\nevals_result={}","965bacd1":"def qks(a,b):\n    return cohen_kappa_score(np.round(a), np.round(b), weights='quadratic')","75edf6ea":"kf_splits=10\nk_fold = KFold(n_splits=kf_splits, shuffle=True)\nk=0\ndf_qks=pd.DataFrame(columns=['best_round','qks_train','qks_valid'])\ndf_y=pd.DataFrame(index=XT.index)\nperf_list=[]\nfor train_idx, valid_idx in k_fold.split(X,y):\n    k=k+1\n    print('Step k={}'.format(k))\n    X_train = X.iloc[train_idx, :]\n    X_valid = X.iloc[valid_idx, :]\n    y_train = y.iloc[train_idx]\n    y_valid = y.iloc[valid_idx]\n    lgb_train_set = lgb.Dataset(X_train, label=y_train, categorical_feature=cat_features,free_raw_data=False)\n    lgb_valid_set = lgb.Dataset(X_valid, label=y_valid,free_raw_data=False)\n    lgbm=lgb.LGBMRegressor()\n    lgbm = lgb.train(parameters,\n                     train_set=lgb_train_set,\n                     valid_sets=[lgb_train_set,lgb_valid_set],\n                     verbose_eval=100,\n                     evals_result=evals_result)\n    best_round=lgbm.best_iteration\n    y_train_pred = lgbm.predict(X_train,num_iteration=best_round)\n    y_valid_pred = lgbm.predict(X_valid,num_iteration=best_round)\n    y_test_pred = lgbm.predict(XT,num_iteration=best_round)\n    qks1=qks(y_train_pred,y_train)\n    qks2=qks(y_valid_pred,y_valid)\n    df_qks.loc[k]=[best_round,qks1,qks2]\n    perf_list=perf_list+[evals_result]\n    df_y[k]=y_test_pred","6acb0664":"evals_result.keys()","6905226d":"fig, ax = plt.subplots(1,1, figsize=(8,6))\nfor i in range(0,kf_splits):\n    ax.plot(perf_list[i]['training']['rmse'], color='blue')\n    ax.plot(perf_list[i]['valid_1']['rmse'], color='red')","0e0d3d09":"fig,ax = plt.subplots(1,1,figsize=(12,32))\nlgb.plot_importance(lgbm, ax=ax)","74bea4b3":"df_qks","ade52440":"ym=df_y.mean(axis=1)\nym.describe()","6b27d5ce":"sns.distplot(ym)","92d24d47":"df_all[df_all['AdoptionSpeed'].astype(int)>=0]['AdoptionSpeed'].value_counts()","68ad4cf2":"sum(ym>3.5)","62f9053d":"def distrib_err(coef,test_proba,train_label):\n    test_predictions = pd.cut(test_proba, [-np.inf] + list(np.sort(coef)) + [np.inf], labels = [0, 1, 2, 3, 4])\n    N_CLASS=5\n    freq_train=np.zeros(N_CLASS)\n    freq_test=np.zeros(N_CLASS)\n    delta_freq=np.zeros(N_CLASS)\n    for i in range(0,N_CLASS):\n        freq_train[i]=100*Counter(train_label)[i]\/len(train_label)\n        freq_test[i]=100*Counter(test_predictions)[i]\/len(test_predictions)\n        delta_freq[i]=freq_test[i]-freq_train[i]\n    return np.sum(delta_freq**2)","a496fc38":"initial_coef = [2.0, 2.5, 3.0, 3.5]\ndistrib_err_partial = partial(distrib_err, test_proba=ym, train_label=y)\nfinal_coef = sp.optimize.minimize(distrib_err_partial, initial_coef, method='nelder-mead')\nfinal_coef","6c5815f5":"def apply_lim(y_calc,limits):\n    y_round=np.zeros(len(y_calc))\n    for i,yc in enumerate(y_calc):\n        if (yc<=limits[0]):\n            y_round[i]=0\n        if ((yc>limits[0])&(yc<=limits[1])): \n            y_round[i]=1\n        if ((yc>limits[1])&(yc<=limits[2])): \n            y_round[i]=2\n        if ((yc>limits[2])&(yc<=limits[3])):\n            y_round[i]=3\n        if (yc>limits[3]):\n            y_round[i]=4\n    return y_round","b332bf28":"y_test_pred_r = apply_lim(ym,final_coef['x'])","bd9b59bb":"y_pred = y_test_pred_r.astype('int')","db36c16d":"subm=pd.DataFrame({'PetID': dftest_ids,'AdoptionSpeed': y_pred})\nsubm.head()","fee41710":"subm['AdoptionSpeed'].value_counts()","ccd18629":"subm.to_csv('submission.csv', index=False)","11d07c80":"# Modelling","368a0509":"Here is a function to apply a vector of custom limits:","e5abc860":"**Cross Fold Validation** ","3b1a4ff9":"Let's try to map it into the original one:","b31e0f6b":"Classifier Choice: I used **LGBM instead of XGB**. **We have to perform a Classification but we use the LGBM Regressor followed by a custom rounding** (credits: Abishek).","fb1c899c":"Ok, it's time to merge all the images tables:","196e524e":"# **Pet Adoption Simple (Part II)**","4b73c05e":"# Imports and Data Preparation","ebcef1ce":"So this is the idea I think I got from the OptimizeRounder: **why simply rounding the output of LGBM**? Why not use the **additional degree of freedom** coming from a custom rounder? ","b935fc23":"# Final Submission","e36a3f1c":"From \"Pet Adoption Simple\" we have:\n\n* df_all0, basic dataframe\n* df_svd, SVD of descriptions in df_all0 and img_data \n* txt_data, data from sentiment analysis\n* img_data, data from images\n\nThe preparation basically consists of merging the information in one dataframe, the \"new\" df_all\n","f9e4ec14":"This Kernel **continues my previous** \"[Pet Adoption Simple](https:\/\/www.kaggle.com\/ludovicoristori\/pets-adoption-simple-pandas-random-forest)\". Actually, when I started loading and processing the json data, that notebook became all but simple. So I took this decision: one new kernel (this) to use the data prepared and to add some modification to the basic dataframe df_all, too. \n\nTopics of this notebook: focus on **categorical data** and **merging different dataframes** (images, SVD of descriptions). In addition, I substituted Random Forests and XGBM with **LGBM** which I found better with columns like description or breed (categorical with many values).\n\nThanks to [Abishek](http:\/\/https:\/\/www.kaggle.com\/abhishek\/maybe-something-interesting-here) for the idea of rescaling\/rounding outputs. It's the first time I have seen something like that and started using it practically anytime. Probably I abused a bit in the final part of this notebook, let's see after the submission...","2d62e5a1":"# Merging dataframes","42aaef7c":"What can we do with RescuerID, as there are so many? In the previous kernel I distincted top rescuers from others. This time I try to count the occurrences of every rescuer, and then find a sort of rescuer level or rank to include in the main dataframe.","db184d39":"Ok, I tried with a lot of different combinations of parameters but is very difficult to have a train error less than rmse=1%. But the most important thing is that with these predictions, it's impossible to fit the original distribution of Adoption Speed. For example, we have\n\n"}}