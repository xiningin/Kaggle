{"cell_type":{"43a49b4f":"code","198f1e21":"code","b193f024":"code","96d6aea1":"code","a17d0d9d":"code","7326c507":"code","435258e6":"code","ec8201f5":"code","8e5cdde2":"code","62b795bf":"code","aa4397f0":"code","e9cf34b6":"code","5b140423":"code","8edba61e":"code","67959b12":"code","ca0cb401":"code","41f1ed4c":"code","6b06c4f6":"code","4244b18b":"code","58650083":"code","e2a8ba51":"code","affcf66c":"code","c6b24359":"code","948dc8bc":"code","5faa23b1":"code","4a330ee6":"code","4c236c09":"code","46e4a338":"markdown","89cac7ed":"markdown","bbf17e4c":"markdown","616d352f":"markdown","44e0ae10":"markdown","8f57760a":"markdown","e68d54e3":"markdown","31953d5f":"markdown","6e83e833":"markdown","28b59cbc":"markdown","8050fba6":"markdown","72f7cc6a":"markdown","b00bfa74":"markdown","43bfc6f2":"markdown","1f018ee2":"markdown","0364fe6c":"markdown","04c516d9":"markdown","176b4307":"markdown","69920dfb":"markdown","a23caf26":"markdown","a1b0972e":"markdown","16aaa34a":"markdown"},"source":{"43a49b4f":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport warnings\nwarnings.filterwarnings('ignore')","198f1e21":"file = pd.read_csv(\"..\/input\/men-women-shoes-reviews\/Shoes_Data.csv\")","b193f024":"df = file[[\"reviews\", \"reviews_rating\"]]\ndf.head()","96d6aea1":"rew  = []\nrat = []\n\nfor j in df.index:\n    lst = [i for i in df.iloc[j].reviews.split('||')]\n    for k in lst:\n        rew.append(k)\n        \nfor j in df.index:\n    lst = [i for i in df.iloc[j].reviews_rating.split('||')]\n    for k in lst:\n        rat.append(k)\n        \ndf = pd.DataFrame(list(zip(rew, rat)),\n               columns =['Review', 'Review_rating'])","a17d0d9d":"df.head()","7326c507":"# Getting all unique symbols in text\nall_text = str()\nfor sentence in df['Review'].values:\n    all_text += sentence\n    \n''.join(set(all_text))","435258e6":"import nltk\n#nltk.download('stopwords')\n#from nltk.corpus import stopwords\n#stop = stopwords.words('english')\n\n# Set of stopwords to remove\n#stop = set(stop)\n\n# Set of punctuation signs to remove\nfrom string import punctuation","ec8201f5":"import re\n\ndef lower(text):\n    return text.lower()\n\ndef remove_punctuation(text):\n    return text.translate(str.maketrans('','', punctuation))\n\ndef remove_stopwords(text):\n    return \" \".join([word for word in str(text).split() if word not in stop])\n\n# Removing all words with digits and standalone digits\ndef remove_digits(text):\n    return re.sub(r'\\d+', '', text)\n\ndef remove_emoji(text):\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', text)\n\n# Removing all non-printable symbols like \"\u0921\", \"\u0b9f\"\ndef remove_non_printable(text):\n    text = text.encode(\"ascii\", \"ignore\")\n    return text.decode()\n        \n# One function to clean it all\ndef clean_text(text):\n    text = lower(text)\n    text = remove_punctuation(text)\n    #text = remove_stopwords(text)\n    text = remove_digits(text)\n    text = remove_emoji(text)\n    text = remove_non_printable(text)\n    return text","8e5cdde2":"# Returns first digit entry in a string\ndef get_first_digit(text):\n    match = re.search(r'\\d', text)\n    return match[0]","62b795bf":"df['Review_rating']=df['Review_rating'].apply(get_first_digit)\ndf['clean_review']=df['Review'].apply(clean_text)\ndf.head()","aa4397f0":"all_text_clean = str()\nfor sentence in df['clean_review'].values:\n    all_text_clean += sentence\n''.join(set(all_text_clean))","e9cf34b6":"df[\"clean_review\"].value_counts()","5b140423":"df = df[~df.Review.str.contains(\"Report abuse\")]\ndf = df[~df.Review.str.contains(\"Verified\")]","8edba61e":"df[\"clean_review\"].value_counts()","67959b12":"from wordcloud import WordCloud\n\nplt.figure(figsize=(40,25))\n\nsubset1 = df[df['Review_rating']=='1']\ntext = subset1.clean_review.values\ncloud1=WordCloud(background_color='pink',colormap=\"Dark2\",collocations=False,width=2500,height=1800).generate(\" \".join(text))\n\nplt.subplot(3, 2, 1)\nplt.axis('off')\nplt.title(\"1\",fontsize=40)\nplt.imshow(cloud1)\n\nsubset2 = df[df['Review_rating']=='2']\ntext = subset2.clean_review.values\ncloud2=WordCloud(background_color='pink',colormap=\"Dark2\",collocations=False,width=2500,height=1800).generate(\" \".join(text))\n\nplt.subplot(3, 2, 2)\nplt.axis('off')\nplt.title(\"2\",fontsize=40)\nplt.imshow(cloud2)\n\nsubset3 = df[df['Review_rating']=='3']\ntext = subset3.clean_review.values\ncloud3=WordCloud(background_color='pink',colormap=\"Dark2\",collocations=False,width=2500,height=1800).generate(\" \".join(text))\n\nplt.subplot(3, 2, 3)\nplt.axis('off')\nplt.title(\"3\",fontsize=40)\nplt.imshow(cloud3)\n\nsubset4 = df[df['Review_rating']=='4']\ntext = subset4.clean_review.values\ncloud4=WordCloud(background_color='pink',colormap=\"Dark2\",collocations=False,width=2500,height=1800).generate(\" \".join(text))\n\nplt.subplot(3, 2, 4)\nplt.axis('off')\nplt.title(\"4\",fontsize=40)\nplt.imshow(cloud4)\n\nsubset5 = df[df['Review_rating']=='5']\ntext = subset5.clean_review.values\ncloud5=WordCloud(background_color='pink',colormap=\"Dark2\",collocations=False,width=2500,height=1800).generate(\" \".join(text))\n\nplt.subplot(3, 2, 5)\nplt.axis('off')\nplt.title(\"5\",fontsize=40)\nplt.imshow(cloud5)","ca0cb401":"from nltk.sentiment import SentimentIntensityAnalyzer\nsia = SentimentIntensityAnalyzer()\n\nsentiments = []\n\nfor sentence in df['clean_review'].values:\n    sentiments.append(max(sia.polarity_scores(sentence), key=sia.polarity_scores(sentence).get))","41f1ed4c":"df[\"sentiment\"] = sentiments\ndf.head()","6b06c4f6":"count = df[['Review_rating', 'sentiment']].value_counts().to_frame().reset_index()\ncount.columns.values[2] = \"count\"\n\nimport plotly.express as px\n\nfig = px.bar(count, x=\"Review_rating\", y=\"count\", color=\"sentiment\", text=\"sentiment\")\nfig.update_layout(title_text='Review rating\/detected sentiments',  title_x=0.5)\nfig.show()","4244b18b":"import plotly.graph_objs as go\nfrom plotly.offline import iplot\n\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')","58650083":"df['review_len'] = df['clean_review'].astype(str).apply(len)\ndf['review_word_count'] = df['clean_review'].apply(lambda x: len(str(x).split()))","e2a8ba51":"one = df[df['Review_rating']=='1']\ntwo = df[df['Review_rating']=='2']\nthree = df[df['Review_rating']=='3']\nfour = df[df['Review_rating']=='4']\nfive = df[df['Review_rating']=='5']","affcf66c":"trace0 = go.Box(\n    y=one['review_len'],\n    name = 'One star',\n    marker = dict(\n        color = 'red',\n    )\n)\n\ntrace1 = go.Box(\n    y=two['review_len'],\n    name = 'Two stars',\n    marker = dict(\n        color = 'green',\n    )\n)\n\ntrace2 = go.Box(\n    y=three['review_len'],\n    name = 'Three stars',\n    marker = dict(\n        color = 'orange',\n    )\n)\n\ntrace3 = go.Box(\n    y=four['review_len'],\n    name = 'Four stars',\n    marker = dict(\n        color = 'blue',\n    )\n)\n\ntrace4 = go.Box(\n    y=five['review_len'],\n    name = 'Five stars',\n    marker = dict(\n        color = 'purple',\n    )\n)\n\ndata = [trace0, trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    title = \"Length of the reviews\", title_x=0.5,\n)\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","c6b24359":"trace0 = go.Box(\n    y=one['review_word_count'],\n    name = 'One star',\n    marker = dict(\n        color = 'red',\n    )\n)\n\ntrace1 = go.Box(\n    y=two['review_word_count'],\n    name = 'Two stars',\n    marker = dict(\n        color = 'blue',\n    )\n)\n\ntrace2 = go.Box(\n    y=three['review_word_count'],\n    name = 'Three stars',\n    marker = dict(\n        color = 'darksalmon',\n    )\n)\n\ntrace3 = go.Box(\n    y=four['review_word_count'],\n    name = 'Four stars',\n    marker = dict(\n        color = 'purple',\n    )\n)\n\ntrace4 = go.Box(\n    y=five['review_word_count'],\n    name = 'Five stars',\n    marker = dict(\n        color = 'green',\n    )\n)\ndata = [trace0, trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    title = \"Word count of the reviews\", title_x=0.5,\n)\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","948dc8bc":"def get_top_n_gram(corpus,ngram_range,n=None):\n    vec = CountVectorizer(ngram_range=ngram_range,stop_words = 'english').fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]","5faa23b1":"pos_unigrams = get_top_n_gram(five['clean_review'],(1,1),10)\nneg_unigrams = get_top_n_gram(one['clean_review'],(1,1),10)\n\n\ndf1 = pd.DataFrame(pos_unigrams, columns = ['Text' , 'count'])\ndf1.groupby('Text').sum()['count'].sort_values(ascending=True).iplot(\n    kind='bar', yTitle='Count', linecolor='black',color='green', title='Top 10 Unigrams in positve text',orientation='h')\n\ndf2 = pd.DataFrame(neg_unigrams, columns = ['Text' , 'count'])\ndf2.groupby('Text').sum()['count'].sort_values(ascending=True).iplot(\n    kind='bar', yTitle='Count', linecolor='black', color='red',title='Top 10 Unigrams in negative text',orientation='h')","4a330ee6":"pos_bigrams = get_top_n_gram(five['clean_review'],(2,2),10)\nneg_bigrams = get_top_n_gram(one['clean_review'],(2,2),10)\n\n\ndf1 = pd.DataFrame(pos_bigrams, columns = ['Text' , 'count'])\ndf1.groupby('Text').sum()['count'].sort_values(ascending=True).iplot(\n    kind='bar', yTitle='Count', linecolor='black',color='green', title='Top 10 Bigrams in positve text',orientation='h')\n\ndf2 = pd.DataFrame(neg_bigrams, columns = ['Text' , 'count'])\ndf2.groupby('Text').sum()['count'].sort_values(ascending=True).iplot(\n    kind='bar', yTitle='Count', linecolor='black', color='red',title='Top 10 Bigrams in negative text',orientation='h')","4c236c09":"df.head()","46e4a338":"# <span style=\"font-size:40px;\"><center>Shoes Reviews Analysis<\/center> <\/span>","89cac7ed":"Applying all formatting functions:","bbf17e4c":"![](https:\/\/7kmtorg.com.ua\/wp-content\/uploads\/2020\/11\/zhenskaya-obuv-optom.jpg)","616d352f":"# <center>Data preparation<\/center>","44e0ae10":"We can see that there's plenty of symbols we better get rid of, like emojis and non-printable ones.","8f57760a":"We can see that reviews and ratings are separated by \"||\", so row 1 row contains a number of reviews. To analyse them, we need to make \"1 row - 1 review\" format.","e68d54e3":"Check how it worked:","31953d5f":"\"verified purchase\" and \"report abuse\" seem to be some automatic texts, so we can just delete them from dataset.","6e83e833":"# <center> Sentiment analysis <\/center>","28b59cbc":"The preprocessed dataset can be used for text classification task.","8050fba6":"Let's check the length and word counts in the reviews. <p>\nReference: https:\/\/www.kaggle.com\/parulpandey\/eda-and-preprocessing-for-bert","72f7cc6a":"Let's see how well nltk performed by comparing rating of the reviews and their sentiment:","b00bfa74":"Reviews with five stars are not very wordy. <p>\nLet's check unigrams and bigrams in the reviews.","43bfc6f2":"#  <center>Word clouds<\/center>","1f018ee2":"We will use nltk library to perform sentiment analysis of the reviews. Sentiment can be \"positive\", \"negative\", \"neutral\" and \"compound\".","0364fe6c":"We got the sentiment that had the most probability for every review:","04c516d9":"Much better! But not enough. First, we need to check all symbols presented in text.","176b4307":"Let's find most frequent reviews:","69920dfb":"The results of sentiment analysis are actually fine: reviews with \"1\" - \"2\" stars was mostly detected as negative\/neutral, and \"4\" - \"5\" stars are positive\/neutral.","a23caf26":"Second, we only need one digit in \"Review_rating\" column, not a full string.","a1b0972e":"All we need is two columns from the original dataset:","16aaa34a":"# <center> EDA <\/center>"}}