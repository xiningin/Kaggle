{"cell_type":{"df81246b":"code","e11ce4c6":"code","04166c46":"code","03d578e6":"code","9a4058e6":"code","808917d9":"code","95228154":"code","be93dffd":"code","11b2e8cc":"code","4cb16940":"code","5bcfd121":"code","0c5ad705":"code","47e72515":"code","78f300b2":"code","b2ea5b4d":"code","bfa15c92":"code","03f32806":"code","31e918bd":"code","1febf2ee":"code","8da5ea96":"code","896a91e8":"code","f0c22283":"code","0ceeb17d":"code","56d86de4":"code","406623d5":"code","92238116":"code","9c050ed7":"code","4fe8476c":"code","a7aa8fd5":"code","91f6adf3":"code","d790fe9d":"code","9f852fd2":"code","aebba166":"code","8b604aba":"code","c86845ef":"code","c4216cdb":"code","0c505e74":"code","d65bdda2":"code","15f0f971":"code","b4ddcbd3":"code","4e7c282b":"code","3755963b":"code","0ca307cc":"code","01de390a":"code","b6792795":"code","18a7d079":"code","f4edb820":"code","f3a08930":"code","54b90cab":"code","4101182e":"code","00493319":"code","5f6ea5c6":"code","62cc6235":"code","20634aab":"code","25e4ece5":"code","6e6d99da":"code","d0db99b4":"code","50f9c3a9":"code","e1e5934f":"code","7226eed5":"code","ddee8ede":"code","d0138f28":"code","71d02976":"code","224974da":"code","b8176d21":"code","288ae9de":"markdown","b3bcd116":"markdown","12ebe29b":"markdown","df18ed25":"markdown","5cfcf6a7":"markdown","ecade30d":"markdown","8ad6e07b":"markdown","ad19c2e9":"markdown","fe9bb868":"markdown","1684b57e":"markdown","38bff44d":"markdown","2c0e9ff2":"markdown","fd2e0c1f":"markdown","e684c9ac":"markdown","79d7a64b":"markdown","fd49a3ea":"markdown","79ab7e6b":"markdown","6864477c":"markdown","60061db5":"markdown","1897d4c4":"markdown","b6b6585f":"markdown","7133cbd9":"markdown","98ecd496":"markdown","3a583057":"markdown","57fadcda":"markdown","3d42a5d3":"markdown","9c836ca6":"markdown","10a90ef3":"markdown","5fc3a958":"markdown","fe351b35":"markdown"},"source":{"df81246b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e11ce4c6":"data = pd.read_csv(\"\/kaggle\/input\/student-alcohol-consumption\/student-mat.csv\")\ndata.head()","04166c46":"data.info()","03d578e6":"data.columns","9a4058e6":"data.describe()","808917d9":"data.corr()","95228154":"#correlation map\n\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","be93dffd":"data[\"free_time_level\"] = [\"high\" if i>2 else \"low\" for i in data[\"freetime\"] ]\ndata.loc[:10,[\"free_time_level\",\"freetime\"]]\n","11b2e8cc":"data[\"study_time_level\"] = [\"high\" if i>7 else  \"normal\" if 8>i>4 else \"low\" for i in data[\"studytime\"] ]\ndata.loc[:10,[\"study_time_level\",\"studytime\"]]\n","4cb16940":"data.info()","5bcfd121":"data.shape","0c5ad705":"print(data[\"Mjob\"].value_counts(dropna=False))","47e72515":"print(data[\"Fjob\"].value_counts(dropna=True))","78f300b2":"data.describe()","b2ea5b4d":"data[\"study_time_level\"] = [\"high\" if i>2 else \"low\" for i in data[\"studytime\"] ]\ndata.loc[:10,[\"study_time_level\",\"studytime\"]]","bfa15c92":"data.boxplot(column=\"goout\", by=\"study_time_level\" )","03f32806":"df_Fjob= data.loc[data.Fjob == \"health\"]\ndf_Fjob","31e918bd":"melted_dads=pd.melt(frame=df_Fjob, id_vars= \"Fjob\", value_vars=[\"Dalc\",\"Walc\"])\nmelted_dads","1febf2ee":"df1=data.head()\ndf2=data.tail()\nconcat_df_rows=pd.concat([df1,df2],axis=0)\nconcat_df_rows","8da5ea96":"df3=data[\"Walc\"]\ndf4=data[\"Dalc\"]\ndf_concat_coloum=pd.concat([df3,df4],axis=1)\ndf_concat_coloum","896a91e8":"data.info()","f0c22283":"data[\"sex\"]=data[\"sex\"].astype(\"category\")\ndata.info()","0ceeb17d":"data[\"G3\"]=data[\"G3\"].astype(\"float\")\ndata.dtypes","56d86de4":"data[\"none\"]=[None if i==\"M\" else 1 for i in data[\"sex\"]]\ndata.head()","406623d5":"data[\"none\"].value_counts(dropna =False)","92238116":"data[\"none\"].dropna(inplace=True)\ndata[\"none\"].value_counts(dropna =False) #NaN is gone","9c050ed7":"assert data[\"none\"].notnull().all()","4fe8476c":"student = [\"Granger\",\"Potter\",\"Weasley\"]\ngrade = [\"AA\", \"BB\",\"CC\"]\nlist_label= [\"student\",\"grade\"]\nlist_col=[student,grade]\nzipped=list(zip(list_label,list_col))\nhogw_dict=dict(zipped)\nhogw_df=pd.DataFrame(hogw_dict)\nhogw_df","a7aa8fd5":"hogw_df[\"SnapeHate\"] = [5,10,7] #How much you hate Snape out of 10\nhogw_df","91f6adf3":"hogw_df[\"HagridLove\"]=10 #Broadcasting entire column\nhogw_df","d790fe9d":"df2={\"student\":[\"Longbottom\",\"Malfoy\",\"Lovegood\",\"Chang\",\"Thomas\"],\n     \"grade\": [\"CC\",\"CB\",\"BA\",\"BB\",\"CC\"],\"SnapeHate\":[10,4,8,7,7],\"HagridLove\":[8,0,8,7,7]}\ndf2=pd.DataFrame(df2)\nhogw_df =hogw_df.append(df2,ignore_index=True)\nhogw_df","9f852fd2":"time_list=[\"1979-09-19\",\"1980-07-31\",\"1980-03-01\",\"1980-07-30\",\"1980-07-05\",\"1979-02-13\",\"1979-05-30\",\"1979-10-20\"]\ndatetime_object=pd.to_datetime(time_list)\nhogw_df[\"birthday\"]=datetime_object\nhogw_df=hogw_df.set_index(\"birthday\")\nhogw_df","aebba166":"print(hogw_df.loc[\"1980-07-31\"])","8b604aba":"print(hogw_df.loc[\"1979-05-30\":\"1980-07-05\"]) #between September 9,1979 and July,5 1980","c86845ef":"hogw_df.resample(\"A\").mean() #resample the data according to year,mounth by calculating means. A=year","c4216cdb":"hogw_df.resample(\"M\").mean() #M=mounth. A lot of nan because hogw_df does not include all months","0c505e74":"#to fill NaN's, interpolate from first value\n\nhogw_df.resample(\"M\").first().interpolate(\"linear\")","d65bdda2":"hogw_df.resample(\"M\").mean().interpolate(\"linear\")","15f0f971":"df_alc=data.loc[:,[\"Walc\",\"Dalc\"]]\ndf_alc.plot()","b4ddcbd3":"df_alc.plot(subplots=True)\nplt.show()","4e7c282b":"data.plot(kind=\"scatter\", x=\"age\", y=\"Walc\")\nplt.show()","3755963b":"data.plot(kind = \"hist\",y = \"age\",bins = 50,range= (15,22))\nplt.show()","0ca307cc":"data.head() # We can see that place for index is empty","01de390a":"data[\"index\"] = np.arange(1, len(data)+1)\ndata.head() #we've created coloumn named index starting from 1","b6792795":"data= data.set_index(\"index\")\ndata.head()","18a7d079":"data[\"Fjob\"][3] #one way way of sellecting data","f4edb820":"data.Fjob[3] #another way of sellecting data","f3a08930":"data[[\"Dalc\",\"Walc\"]] #choosing some coloumns","54b90cab":"data.loc[5,[\"Walc\"]] #using loc","4101182e":"print(type(data[\"Walc\"]))\nprint(type(data[[\"Walc\"]]))","00493319":"data.loc[1:10,\"G1\":\"none\"] #1 to 10 for rows, from G1 to None for coloumns","5f6ea5c6":"data.loc[10:1:-1,\"G1\":\"none\"] #reverse","62cc6235":"data.loc[1:10,\"G1\":] #coloumns from G1 to end","20634aab":"boolean_variable= data[\"G1\"]<10\ndata[boolean_variable]","25e4ece5":"f1= data.G2 < 10 #first filter\nf2 =data[\"G1\"] > 10 #second filter\ndata[f1&f2] #their intersection, student scoring high in first exam but low in second exam","6e6d99da":"# Filtering column based\ndata.goout[data.Dalc>2]  #going out degree of students with high workday alcohol consumption","d0db99b4":"def daily(n):\n    return n\/7\ndata[\"dailystudy\"]= data.studytime.apply(daily) #gives us daily study time\ndata.head()","50f9c3a9":"#using lambda function \ndata[\"studydaily\"]=data.studytime.apply(lambda x: x\/7 )\ndata.head()","e1e5934f":"data[\"totalscore\"]= data.G1+data.G2+data.G3\ndata.head()","7226eed5":"print(data.index.name)","ddee8ede":"#change index name\ndata.index.name=\"#\"\ndata.head()","d0138f28":"data1=data.set_index([\"Mjob\",\"Fjob\"])\ndata1.head(100)","71d02976":"data.groupby(\"sex\").mean()","224974da":"data.groupby(\"Fjob\").max()","b8176d21":"data.groupby(\"school\").Walc.mean()","288ae9de":"**INDEXING PANDAS TIME SERIES**\n","b3bcd116":"When x=0, we add rows, otherwise we add columns.","12ebe29b":"# **HARRY POTTER AND PANDAS HALLOWS**","df18ed25":"It does not give errorr so THAT MEANS WHAT WE DID WORKED. *assert* helps us check things.","5cfcf6a7":"**Box plots: visualize basic statistics**","ecade30d":"**This kernel is a adapted work of Data Science Tutorial for Beginners. The original tutorial can be found [here](https:\/\/www.kaggle.com\/kanncaa1\/data-sciencetutorial-for-beginners).**\n","8ad6e07b":"**DATA TIME SERIES**","ad19c2e9":"freetime - free time after school (numeric: from 1 - very low to 5 - very high)","fe9bb868":"data[\"Walc\"] is series \n\ndata[[\"Walc\"]] is data frame.  ","1684b57e":"We've changed from object\/string type to category. Let's change from intiger to float","38bff44d":"**MISSING DATA & ASSERT**\n\nWe did not have missing value in this data set so we made up some.","2c0e9ff2":"It seems there is no missing value. ","fd2e0c1f":"**BULDING DATAFRAME** \n\nLet's say you are McGonagal and want to create dataframe for grades in transfiguration lesson.\n\nFirst,we create list and dictionary, then using pd, we create dataframe.","e684c9ac":"**CONCATENATING DATA**","79d7a64b":"# CLEANING DATA","fd49a3ea":"**VISUAL EXPLORATORY DATA ANALYSIS**","79ab7e6b":"value_counts(): Frequency counts","6864477c":"studytime - weekly study time (numeric: 1 - 10 hours)","60061db5":"Strings do not interpolate ofcourse. Let's interpolate w\/ mean.\n","1897d4c4":"**LIST COMPREHENSION**","b6b6585f":"I want to find students with a health profession dad.","7133cbd9":"**DATA CONVERSION**","98ecd496":"Now we can select according to our birthday index. It is not string. We've changed to datetime.","3a583057":"We can see that max study time a week is max 4 hours and min 1 hour so our code above to add another column for study time level is useless. Let's change iit. ","57fadcda":"**TRANSFORMING DATA**","3d42a5d3":"# **Manipulating Dataframes with Pands**","9c836ca6":"OR","10a90ef3":"**RESAMPLING**","5fc3a958":"**MELTING DATA**","fe351b35":"**FILTERING DATA FRAMES**"}}