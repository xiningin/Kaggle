{"cell_type":{"01f70ba6":"code","399ce3dc":"code","960d46e5":"code","5b38e0a9":"code","bf64e97a":"code","c7ba4af0":"code","6f338bf3":"code","75044607":"code","d53b4970":"code","d1c70d1e":"code","2eee118f":"code","b9e0f94c":"code","4cdbf20d":"code","01966195":"code","17c7a983":"code","d1ec27c0":"code","1f52e15c":"code","c97b09f1":"code","c8a3720f":"code","fb92aa3d":"code","3d201f29":"code","0e6db2df":"code","97a803db":"code","c56abc2e":"code","f220db97":"code","ca941244":"code","93e8a34e":"code","ac83c71c":"code","f972a0a7":"code","365bd8d1":"code","0dbc231b":"code","c47e5614":"code","d560ffee":"code","4987d6e9":"code","d000a5e3":"code","2f5c2c56":"code","2d40173d":"code","d45126e7":"code","466d4d0c":"code","7f99d198":"code","90d44c28":"code","4f44fe9d":"code","4d1d047c":"code","4b82a9a4":"code","b2a82fe2":"code","0f3c507a":"markdown","a64c800b":"markdown","eca9c2e7":"markdown"},"source":{"01f70ba6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","399ce3dc":"import plotly.express as px\nimport plotly.graph_objects as go","960d46e5":"annual_ticket_sales = pd.read_csv(\"..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/AnnualTicketSales.csv\")\nhighest_grossers = pd.read_csv(\"..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/HighestGrossers.csv\")\npopular_creative_types = pd.read_csv(\"..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/PopularCreativeTypes.csv\")\ntop_distributors = pd.read_csv(\"..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/TopDistributors.csv\")\ntop_genres = pd.read_csv(\"..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/TopGenres.csv\")\ntop_grossing_ratings = pd.read_csv(\"..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/TopGrossingRatings.csv\")\ntop_grossing_sources = pd.read_csv(\"..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/TopGrossingSources.csv\")\ntop_production_methods = pd.read_csv(\"..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/TopProductionMethods.csv\")\nwide_release_count = pd.read_csv(\"..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/WideReleasesCount.csv\")","5b38e0a9":"annual_ticket_sales.head()","bf64e97a":"annual_ticket_sales.drop(columns=[\"Unnamed: 5\"], axis=1, inplace=True)","c7ba4af0":"annual_ticket_sales.isnull().sum()","6f338bf3":"annual_ticket_sales.info()","75044607":"annual_ticket_sales[\"TICKETS SOLD\"] = annual_ticket_sales[\"TICKETS SOLD\"].str.replace(\",\",\"\")\n\nfor i in [\"TOTAL BOX OFFICE\",\"TOTAL INFLATION ADJUSTED BOX OFFICE\"]:\n    annual_ticket_sales[i] = annual_ticket_sales[i].str.replace(\",\",\"\")\n    annual_ticket_sales[i] = annual_ticket_sales[i].str.replace(\"$\",\"\")\n\nannual_ticket_sales[\"AVERAGE TICKET PRICE\"] = annual_ticket_sales[\"AVERAGE TICKET PRICE\"].str.replace(\"$\", \"\")","d53b4970":"annual_ticket_sales.head()","d1c70d1e":"for col in [\"TICKETS SOLD\", \"TOTAL BOX OFFICE\", \"TOTAL INFLATION ADJUSTED BOX OFFICE\"]:\n    annual_ticket_sales[col] = pd.to_numeric(annual_ticket_sales[col])\n\nannual_ticket_sales[\"AVERAGE TICKET PRICE\"] = pd.to_numeric(annual_ticket_sales[\"AVERAGE TICKET PRICE\"], downcast=\"float\")","2eee118f":"annual_ticket_sales[\"avg_upscaled\"] = annual_ticket_sales[\"AVERAGE TICKET PRICE\"]*150000000\nannual_ticket_sales[\"box_downscaled\"] = annual_ticket_sales[\"TOTAL BOX OFFICE\"]\/5","b9e0f94c":"annual_ticket_sales[\"Tickets_Sold\"] = annual_ticket_sales[\"TICKETS SOLD\"]\nannual_ticket_sales[\"Average_Ticket_Price\"] = annual_ticket_sales[\"AVERAGE TICKET PRICE\"].apply(lambda x: \"Average Ticket Price: $\" + str(x)[0:4])\nannual_ticket_sales[\"Total_Box_Office\"] = annual_ticket_sales[\"TOTAL BOX OFFICE\"]","4cdbf20d":"def foo(x):\n    if len(str(x)) == 7:\n        return \"Tickets Sold: \" + str(x)[0:1] + \" Million\"\n    elif len(str(x)) == 8:\n        return \"Tickets Sold: \" + str(x)[0:2] + \" Million\"\n    elif len(str(x)) == 9:\n        return \"Tickets Sold: \" + str(x)[0:3] + \" Million\"\n    elif len(str(x)) == 10:\n        return \"Tickets Sold: \" + str(x)[0:1] + \".\" + str(x)[1:2] + \" Billion\"\n    elif len(str(x)) == 11:\n        return \"Tickets Sold: \" + str(x)[0:2] + \".\" + str(x)[2:3] + \" Billion\"\n    else:\n        return \"Tickets Sold: \" + str(x)[0:3] + \".\" + str(x)[3:4] + \" Billion\"\n\ndef foo_2(x):\n    if len(str(x)) == 7:\n        return \"Total Box Office: \" + str(x)[0:1] + \" Million\"\n    elif len(str(x)) == 8:\n        return \"Total Box Office: \" + str(x)[0:2] + \" Million\"\n    elif len(str(x)) == 9:\n        return \"Total Box Office: \" + str(x)[0:3] + \" Million\"\n    elif len(str(x)) == 10:\n        return \"Total Box Office: \" + str(x)[0:1] + \".\" + str(x)[1:2] + \" Billion\"\n    elif len(str(x)) == 11:\n        return \"Total Box Office: \" + str(x)[0:2] + \".\" + str(x)[2:3] + \" Billion\"\n    else:\n        return \"Total Box Office: \" + str(x)[0:3] + \".\" + str(x)[3:4] + \" Billion\"","01966195":"annual_ticket_sales[\"TS\"] = annual_ticket_sales[\"Tickets_Sold\"].apply(foo)\nannual_ticket_sales[\"TBO\"] = annual_ticket_sales[\"Total_Box_Office\"].apply(foo_2)","17c7a983":"fig1 = px.bar(annual_ticket_sales,\n            x=\"YEAR\",\n            y=\"TICKETS SOLD\",\n            custom_data=[\"TS\"],\n            color_discrete_sequence=[\"Teal\"])\n\nfig1.update_traces(hovertemplate=\"<br>\".join([\"<b>%{customdata[0]}<b>\"]))\n\nfig2 = px.line(annual_ticket_sales,\n            x=\"YEAR\",\n            y=\"avg_upscaled\",\n            custom_data=[\"Average_Ticket_Price\"],\n            color_discrete_sequence=[\"Black\"])\n\nfig2.update_traces(hovertemplate=\"<br>\".join([\"<b>%{customdata[0]}<b>\"]))\n\nfig3 = px.line(annual_ticket_sales,\n            x=\"YEAR\",\n            y=\"box_downscaled\",\n            custom_data=[\"TBO\"],\n            color_discrete_sequence=[\"Red\"])\n\nfig3.update_traces(hovertemplate=\"<br>\".join([\"<b>%{customdata[0]}<b>\"]))\n\nfig = go.Figure(data=fig1.data + fig2.data + fig3.data)\n\nfig.update_yaxes(visible=False)\n\nfig.update_layout(hovermode=\"x unified\", template=\"simple_white\", title=\"Ticket Sales, Average Ticket Price and Total Box Office\")\nfig.update_layout(title_x=0.5,\n    font_family=\"Rockwell\",\n    legend=dict(\n        title=None, orientation=\"h\", y=1, yanchor=\"bottom\", x=0.5, xanchor=\"center\"\n    )\n)\n\nfig.show()","d1ec27c0":"highest_grossers.head()","1f52e15c":"highest_grossers.isnull().sum()","c97b09f1":"highest_grossers.info()","c8a3720f":"highest_grossers[highest_grossers[\"GENRE\"].isnull()] ","fb92aa3d":"highest_grossers[\"GENRE\"].value_counts().reset_index()","3d201f29":"highest_grossers.fillna(\"Adventure\", inplace=True)\nhighest_grossers.at[25,'GENRE']=\"Action\"","0e6db2df":"highest_grossers.tail()","97a803db":"highest_grossers[\"TICKETS SOLD\"] = highest_grossers[\"TICKETS SOLD\"].str.replace(\",\",\"\")\n\nfor i in [\"TOTAL FOR YEAR\",\"TOTAL IN 2019 DOLLARS\"]:\n    highest_grossers[i] = highest_grossers[i].str.replace(\",\",\"\")\n    highest_grossers[i] = highest_grossers[i].str.replace(\"$\",\"\")","c56abc2e":"for col in [\"TICKETS SOLD\", \"TOTAL FOR YEAR\", \"TOTAL IN 2019 DOLLARS\"]:\n    highest_grossers[col] = pd.to_numeric(highest_grossers[col])","f220db97":"highest_grossers.dtypes","ca941244":"highest_grossers[\"tickets_sold\"] = highest_grossers[\"TICKETS SOLD\"]*3","93e8a34e":"highest_grossers[\"TS\"] = highest_grossers[\"TICKETS SOLD\"].apply(foo)\nhighest_grossers[\"TBO\"] = highest_grossers[\"TOTAL FOR YEAR\"].apply(foo_2)","ac83c71c":"fig1 = px.line(highest_grossers,\n            x=\"YEAR\",\n            y=\"TOTAL FOR YEAR\",\n            custom_data=[\"MOVIE\"],\n            color_discrete_sequence=[\"black\"])\n\nfig1.update_traces(hovertemplate=\"<br>\".join([\"<b>%{customdata[0]}<b>\"]))\n\nfig2 = px.scatter(highest_grossers,\n            x=\"YEAR\",\n            y=\"TOTAL FOR YEAR\",\n            color=\"DISTRIBUTOR\",\n            custom_data=[\"DISTRIBUTOR\",\"TBO\"],\n            size=\"TOTAL FOR YEAR\",\n            opacity=0.8)\n\nfig2.update_traces(hovertemplate=\"<br>\".join([\"<b>%{customdata[0]}<b>\",\"<b>%{customdata[1]}<b>\"]))\n\nfig3 = px.bar(highest_grossers,\n            x=\"YEAR\",\n            y=\"tickets_sold\",\n            custom_data=[\"TS\"],\n            color_discrete_sequence=[\"grey\"])\n\nfig3.update_traces(hovertemplate=\"<br>\".join([\"<b>%{customdata[0]}<b>\"]))\n\nfig = go.Figure(data=fig1.data + fig2.data + fig3.data)\n\nfig.update_layout(hovermode=\"x unified\", template=\"simple_white\", title=\"Highest Grossing Movies Each Year\")\nfig.update_layout(title_x=0.5,\n    font_family=\"Rockwell\",\n    legend=dict(\n        title=None, orientation=\"h\", y=1, yanchor=\"bottom\", x=0.5, xanchor=\"center\"\n    )\n)\n\nfig.update_yaxes(visible=False, showticklabels=False)\n\nfig.update_layout(template=\"simple_white\")\n\nfig.show()","f972a0a7":"popular_creative_types.head()","365bd8d1":"popular_creative_types.info()","0dbc231b":"popular_creative_types.isnull().sum()","c47e5614":"popular_creative_types.tail()","d560ffee":"popular_creative_types.drop(9, inplace=True)\npopular_creative_types.drop(columns=[\"RANK\"], inplace=True)","4987d6e9":"popular_creative_types[\"MOVIES\"] = popular_creative_types[\"MOVIES\"].str.replace(\",\",\"\")\n\nfor i in [\"TOTAL GROSS\",\"AVERAGE GROSS\"]:\n    popular_creative_types[i] = popular_creative_types[i].str.replace(\",\",\"\")\n    popular_creative_types[i] = popular_creative_types[i].str.replace(\"$\",\"\")","d000a5e3":"popular_creative_types.dtypes","2f5c2c56":"for col in [\"TOTAL GROSS\",\"AVERAGE GROSS\",\"MOVIES\"]:\n    popular_creative_types[col] = pd.to_numeric(popular_creative_types[col])","2d40173d":"popular_creative_types.dtypes","d45126e7":"popular_creative_types","466d4d0c":"popular_creative_types[\"market_share\"] = popular_creative_types[\"MARKET SHARE\"].str.replace(\"%\",\"\")\npopular_creative_types[\"market_share\"] = pd.to_numeric(popular_creative_types[\"market_share\"])","7f99d198":"fig = px.pie(popular_creative_types, names=\"CREATIVE TYPES\", values=\"market_share\", hole=0.7, custom_data=[\"CREATIVE TYPES\"],color_discrete_sequence=px.colors.qualitative.Set3)\n\nfig.update_traces(hovertemplate=\"<br>\".join([\"<b>%{customdata[0]}<b>\"]))\n\nfig.update_layout(template=\"simple_white\", title=\"Creative Types Market Share\")\nfig.update_layout(title_x=0.5,\n    font_family=\"Rockwell\",\n    legend=dict(\n        title=None, orientation=\"h\", x=0.5, xanchor=\"center\"\n    )\n)\n\nfig.show()","90d44c28":"popular_creative_types = popular_creative_types.sort_values(\"MOVIES\", ascending=False).reset_index()","4f44fe9d":"popular_creative_types[\"total_gross\"] = popular_creative_types[\"TOTAL GROSS\"]\/10000000\npopular_creative_types[\"avg_gross\"] = popular_creative_types[\"AVERAGE GROSS\"]\/19000","4d1d047c":"def foo_3(x):\n    if len(str(x)) <= 9:\n        return \"$\" + str(x)[0:3] + \" M\"\n    else:\n        return \"$\" + str(x)[0:1] + \".\" + str(x)[1:2] + \" B\"\n\ndef foo_4(x):\n    if len(str(x)) <= 9:\n        return \"$\" + str(x)[0:3] + \" M Total Gross\"\n    elif len(str(x)) == 10:\n        return \"$\" + str(x)[0:1] + \".\" + str(x)[1:2] + \" B Total Gross\"\n    elif len(str(x)) == 11:\n        return \"$\" + str(x)[0:2] + \".\" + str(x)[2:3] + \" B Total Gross\"\n    else:\n        return \"$\" + str(x)[0:3] + \".\" + str(x)[3:4] + \" B Total Gross\"\n\ndef foo_5(x):\n    if len(str(x)) == 7:\n        return \"$\" + str(x)[0:1] + \".\" + str(x)[1:2] + \" M Average Gross\"\n    elif len(str(x)) == 8:\n        return \"$\" + str(x)[0:2] + \".\" + str(x)[2:3] + \" M Average Gross\"\n    elif len(str(x)) == 9:\n        return \"$\" + str(x)[0:3] + \".\" + str(x)[3:4] + \" M Average Gross\"\n    elif len(str(x)) == 10:\n        return \"$\" + str(x)[0:1] + \".\" + str(x)[1:2] + \" B Average Gross\"\n    elif len(str(x)) == 11:\n        return \"$\" + str(x)[0:2] + \".\" + str(x)[2:3] + \" B Average Gross\"\n    else:\n        return \"$\" + str(x)[0:3] + \".\" + str(x)[3:4] + \" B Average Gross\"","4b82a9a4":"popular_creative_types[\"TG\"] = popular_creative_types[\"TOTAL GROSS\"].apply(foo_4)\npopular_creative_types[\"TG2\"] = popular_creative_types[\"TOTAL GROSS\"].apply(foo_4)\npopular_creative_types[\"M\"] = popular_creative_types[\"MOVIES\"].apply(lambda x: str(x) + \" Movies\")\npopular_creative_types[\"AVG\"] = popular_creative_types[\"AVERAGE GROSS\"].apply(foo_5)","b2a82fe2":"fig1 = px.bar(popular_creative_types,\n            x=\"CREATIVE TYPES\",\n            y=\"MOVIES\",\n            custom_data=[\"M\"],\n            color_discrete_sequence=[\"burlywood\"])\n\nfig1.update_traces(hovertemplate=\"<br>\".join([\"<b>%{customdata[0]}<b>\"]))\n\nfig2 = px.bar(popular_creative_types,\n            x=\"CREATIVE TYPES\",\n            y=\"total_gross\",\n            custom_data=[\"TG\"],\n            color_discrete_sequence=[\"lightseagreen\"])\n\nfig2.update_traces(hovertemplate=\"<br>\".join([\"<b>%{customdata[0]}<b>\"]))\n\nfig3 = px.scatter(popular_creative_types,\n            x=\"CREATIVE TYPES\",\n            y=\"avg_gross\",\n            custom_data=[\"AVG\"],\n            size=\"AVERAGE GROSS\",\n            size_max=50,\n            opacity=0.9,\n            color_discrete_sequence=[\"DarkSlateGray\"])\n\nfig3.update_traces(hovertemplate=\"<br>\".join([\"<b>%{customdata[0]}<b>\"]))\n\nfig = go.Figure(data=fig1.data + fig2.data + fig3.data)\n\nfig.update_layout(hovermode=\"x unified\", template=\"simple_white\", title=\"Total and Average Gross of Creative Types\")\nfig.update_layout(title_x=0.5,\n    font_family=\"Rockwell\",\n    legend=dict(\n        title=None, orientation=\"h\", y=1, yanchor=\"bottom\", x=0.5, xanchor=\"center\"\n    )\n)\n\nfig.update_yaxes(visible=False, showticklabels=False)\n\nfig.add_annotation(text=\"Super Hero movies had the most average profit\", x=\"Super Hero\", y=popular_creative_types[\"avg_gross\"].iloc[1]+6000,font_size=15, showarrow=False)\n\nfig.show()","0f3c507a":"### Popular Creative Types","a64c800b":"### AnnualTicketSales.csv","eca9c2e7":"### HighestGrossers.csv"}}