{"cell_type":{"caf639be":"code","1a0d219a":"code","977f50fd":"code","fe40d41a":"code","17fbd9c3":"code","ed1b239e":"code","edb3faa0":"code","90830a88":"code","16ab529b":"code","872545ee":"code","aadd1b3e":"code","d052e0b5":"code","2cfbf418":"code","a82ec93b":"code","ee961d09":"code","537aedf6":"code","3e2310b8":"code","a17fbbe7":"code","ce313668":"code","6ef5a4b8":"code","72b8b18c":"code","1b01d39e":"code","36430811":"code","9f65e338":"code","c424c433":"code","eeb059f1":"code","e57823fc":"code","4e0024bc":"code","f1ee7145":"code","2e0fb6cb":"code","d6fcaa03":"code","46b90050":"code","49422dcf":"code","bd62bd3e":"code","37b64954":"markdown","9239194f":"markdown","18fac834":"markdown","178a096a":"markdown","6cd4bd20":"markdown","9af51701":"markdown","e37bfa9c":"markdown","8d27873f":"markdown","02237d4e":"markdown","e8f55f84":"markdown"},"source":{"caf639be":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n%matplotlib inline\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nprint(os.listdir())","1a0d219a":"import plotly.graph_objs as go\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go","977f50fd":"train = pd.read_csv('..\/input\/train_V2.csv')\ntest = pd.read_csv('..\/input\/test_V2.csv')\nsample = pd.read_csv('..\/input\/sample_submission_V2.csv')","fe40d41a":"train.head()","17fbd9c3":"train.info()","ed1b239e":"train.isnull().any()","edb3faa0":"sns.set_style('dark')","90830a88":"print(\"On an average a player uses {:.2f} number of healing items in his\/her gameplay.\".format(np.mean(train.heals.values)))\nprint(\"90% Players use {:.2f} number of healing items in his\/her gameplay.\".format((train.heals.quantile(0.9))))","16ab529b":"train.head()","872545ee":"print(\"% Distribution of kills of many players\")\n(train.kills.value_counts() \/ sum(train.kills) * 100)[:10]","aadd1b3e":"temp = train.copy()\ndef kill_dist(x):\n    if x < 15:\n        return x\n    else:\n        return \"15+\"","d052e0b5":"temp[\"kills\"] = temp[\"kills\"].apply(kill_dist)","2cfbf418":"temp[\"kills\"].unique()","a82ec93b":"print(temp.shape)\nprint(train.shape)\nprint(test.shape)\nprint(sample.shape)","ee961d09":"temp.columns","537aedf6":"trace1 = go.Bar(\n            x=temp['kills'].value_counts().index,\n            y=temp['kills'].value_counts().values,\n            marker = dict(color = 'rgba(255, 255, 135, 1)',\n                  line=dict(color='rgb(0,0,255)',width=2)),\n\n            name = 'Kills'\n    )\n\ntrace2 = go.Bar(\n            x=train.heals.value_counts()[:10].index,\n            y=train.heals.value_counts()[:10].values,\n            marker = dict(color = 'rgba(255, 128, 128, 3)',\n                      line=dict(color='rgb(0,0,255)',width=2)),\n            name='Heals'\n    )\n\ndata = [trace1, trace2]\n\nlayout = dict(title = 'Kills Count Plot',\n              xaxis= dict(title= 'Kills v\/s Heals',ticklen= 5,zeroline= False),\n              yaxis = dict(title = \"Number\")\n             )\nfig = dict(data = data, layout=layout)\niplot(fig)","3e2310b8":"temp2 = train.copy()","a17fbbe7":"temp2['CategoryKills'] = pd.cut(train['kills'], [-1, 0, 2, 5, 10, 50, 100],\n      labels=['0 kills','1-2 kills', '2-4 kills', '5-10 kills', '10-50', '> 50 kills'])","ce313668":"train.head()","6ef5a4b8":"temp2['CategoryDamageDealt'] = pd.cut(train['damageDealt'], [-1, 0, 10, 50, 150, 300, 1000, 6000],\n      labels = ['O Damage Taken', '1-10 Damage Taken', '11-50 Damage Taken', '51-150 Damage Taken', '151-300 Damage Taken', '301-1000 Damage Taken', '1000+ Damage Taken']) ","72b8b18c":"plt.figure(figsize=(16, 8))\nsns.countplot(temp2['CategoryDamageDealt'], saturation = 0.76,\n              linewidth=2,\n              edgecolor = sns.set_palette(\"dark\", 3))\nplt.xlabel(\"Damage Taken\")\nplt.ylabel(\"Number\")","1b01d39e":"plt.figure(figsize=(16, 8))\nsns.boxplot(x='CategoryDamageDealt', y='winPlacePerc', data=temp2, palette='Set2', saturation=0.8, dodge=True, linewidth=2.5)\nplt.xlabel(\"Damage Dealt\")\nplt.ylabel(\"Win Place Percentage\")\nplt.title('Damage and Win Place Percentage Distribution')","36430811":"plt.figure(figsize=(16, 8))\nsns.boxplot(x='CategoryKills', y='winPlacePerc', data=temp2, palette='Set3', saturation=0.8, linewidth=2.5)\nplt.xlabel(\"Kills Distribution\")\nplt.ylabel(\"Win Place Percentage\")\nplt.title(\"Category Kills and Win Percentage Dependencies\")","9f65e338":"temp2['CategoryweaponsAcquired'] = pd.cut(train['weaponsAcquired'], [-1, 0, 5, 10, 15, 20, 100],\n      labels = ['O weapons', '1-5 weapons', '6-10 weapons', '11-15 weapons', '16-20 weapons', '20+ weapons']) ","c424c433":"train.head()","eeb059f1":"trace1 = go.Bar(\n            x=temp2['CategoryweaponsAcquired'].value_counts().index,\n            y=temp2['CategoryweaponsAcquired'].value_counts().values,\n            marker = dict(\n                  line=dict(color='rgb(0,0,255)',width=2)),\n            name = 'Weapons Acquired'\n    )\n\ndata = [trace1]\n\nlayout = dict(title = 'Weapons Acquired Plot',\n              xaxis= dict(title= 'Weapons Acquired',ticklen= 5,zeroline= False),\n              yaxis = dict(title = \"Number\")\n             )\nfig = dict(data = data, layout=layout)\niplot(fig)","e57823fc":"train.head()","4e0024bc":"plt.figure(figsize=(10, 8))\ntrain.matchType.value_counts().plot(kind='barh', align='center')\nplt.title(\"Match Types\")\nplt.xlabel(\"Count\")","f1ee7145":"distances = train[['rideDistance', 'swimDistance', 'walkDistance']]\ndistances['Total Distance'] = distances['rideDistance'] + distances['swimDistance'] + distances['walkDistance']","2e0fb6cb":"plt.figure(figsize=(10, 6))\n# plt.hist(distances['Total Distance'], bins=20)\nsns.distplot(distances['Total Distance'], bins=10)\nplt.title(\"Total Distance Distribution\")\nplt.xlabel(\"Distribution\")","d6fcaa03":"trace1 = go.Bar(\n            x=temp2['vehicleDestroys'].value_counts().index,\n            y=temp2['vehicleDestroys'].value_counts().values,\n            marker = dict(\n                color='rgb(102,149,232)',\n                  line=dict(color='rgb(0,0,100)',width=2)),\n            name = 'Vehicles Destroyed'\n    )\n\ndata = [trace1]\n\nlayout = dict(title = 'Vehicles Destroyed',\n              xaxis= dict(title= 'Vehicles',ticklen= 5,zeroline= False),\n              yaxis = dict(title = \"Number\")\n             )\nfig = dict(data = data, layout=layout)\niplot(fig)","46b90050":"plt.figure(figsize=(12, 8))\nsns.pointplot(x='vehicleDestroys',y='winPlacePerc',data=temp2)\nplt.xlabel('Number of Vehicle Destroys')\nplt.ylabel('Win Percentage')\nplt.title('Vehicle Destroys affecting Win Ratio')\nplt.show()","49422dcf":"### Vehicles destroyed along with Weapons acquired affecting Win Percentage","bd62bd3e":"plt.figure(figsize=(12, 8))\nsns.pointplot(x='vehicleDestroys',y='winPlacePerc',data=temp2, hue=\"CategoryweaponsAcquired\")\nplt.xlabel('Number of Vehicle Destroys')\nplt.ylabel('Win Percentage')\nplt.title('Vehicle Destroys affecting Win Ratio')\nplt.show()","37b64954":"#### It seems that only ```winPlacePerc``` has ```null``` values","9239194f":"### Checking for Null Values","18fac834":"### More Coming Soon","178a096a":"## A breif Data Description\n\n```groupId``` - Integer ID to identify a group within a match. If the same group of players plays in different matches, they will have a different groupId each time.\n\n```matchId``` - Integer ID to identify match. There are no matches that are in both the training and testing set.\n\n```assists``` - Number of enemy players this player damaged that were killed by teammates.\n\n```boosts``` - Number of boost items used.\n\n```damageDealt``` - Total damage dealt. Note: Self inflicted damage is subtracted.\n\n```DBNOs``` - Number of enemy players knocked.\n\n```headshotKill``` - Number of enemy players killed with headshots.\n\n```heals``` - Number of healing items used.\n\n```killPlace``` - Ranking in match of number of enemy players killed.\n\n```killPoints``` - Kills-based external ranking of player. (Think of this as an Elo ranking where only kills matter.)\n\n```kills``` - Number of enemy players killed.\n\n```killStreaks``` - Max number of enemy players killed in a short amount of time.\n\n```longestKill``` - Longest distance between player and player killed at time of death. This may be misleading, as downing a - player and driving away may lead to a large longestKill stat.\n\n```maxPlace``` - Worst placement we have data for in the match. This may not match with numGroups, as sometimes the data skips over placements.\n\n```numGroups``` - Number of groups we have data for in the match.\n\n```revives``` - Number of times this player revived teammates.\n\n```rideDistance``` - Total distance traveled in vehicles measured in meters.\n\n```roadKills``` - Number of kills while in a vehicle.\n\n```swimDistance``` - Total distance traveled by swimming measured in meters.\n\n```teamKills``` - Number of times this player killed a teammate.\n\n```vehicleDestroys``` - Number of vehicles destroyed.\n\n```walkDistance``` - Total distance traveled on foot measured in meters.\n\n```weaponsAcquired``` - Number of weapons picked up.\n\n```winPoints``` - Win-based external ranking of player. (Think of this as an Elo ranking where only winning matters.)\n\n```winPlacePerc``` - The target of prediction. This is a percentile winning placement, where 1 corresponds to 1st place, and 0 corresponds to last place in the ```match. It is calculated off of maxPlace, not numGroups, so it is possible to have missing chunks in a match.","6cd4bd20":"### *Weapons Acquired*","9af51701":"### **PUBG THE MOST POPULAR MOBILE GAME RIGHT NOW**\n<img src=\"https:\/\/i.imgur.com\/rboIlPi.jpg\" width=\"800px\"\/>","e37bfa9c":"### *Category Kills*","8d27873f":"### *Distances*","02237d4e":"### *Vehicles*","e8f55f84":"### *Damage Dealt*"}}