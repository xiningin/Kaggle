{"cell_type":{"b6506485":"code","6bfd9e76":"code","2cca791c":"code","23474fab":"code","e73af402":"code","a7223681":"code","e52552cb":"code","8a60a2f2":"code","78ef65cf":"code","fe9b689f":"code","8d342b53":"code","2a35c847":"code","c6bb0816":"code","f8b55718":"code","b9ff957f":"code","9af3ad5f":"code","ec81854c":"code","7c6c79ff":"code","2917185a":"code","e2720cef":"code","997711d8":"code","19fdc170":"code","37efba30":"code","21d8a5d2":"code","aee75598":"code","887d69d6":"code","658f97d2":"code","5af7a478":"code","5167d880":"code","fc5dee56":"code","23ec2f65":"code","6681e69b":"code","ef4c8bdc":"code","c867077b":"code","0ddac144":"code","1b33fa5f":"code","31e60b74":"code","a146f56b":"code","ab5457e6":"code","9ac288ef":"code","306f3bc9":"code","cbe2f0a7":"code","d002f660":"code","d7d8cc4f":"code","8f7b01dc":"code","2430b486":"code","b6bb65c9":"code","0d733881":"code","c055419c":"code","4b858cd1":"code","43ece3cd":"code","0169edd5":"code","a83cdffe":"code","67b2d4a5":"code","3b5c5cfc":"code","328bf726":"code","17abd7fa":"code","79e16e88":"code","343b6d63":"code","9485da6d":"code","d5c8a715":"code","fe5a928b":"code","51c4afd4":"code","02a07782":"code","4a744917":"code","05745872":"code","58d98bba":"code","9824f983":"code","0e775358":"code","e4b5e1e8":"code","8e0972be":"markdown","bb61dad0":"markdown"},"source":{"b6506485":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale=2.5)\n\nimport missingno as msno\n\n# ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline\n","6bfd9e76":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test=pd.read_csv('..\/input\/titanic\/test.csv')","2cca791c":"df_train.head()","23474fab":"df_train.describe()","e73af402":"for col in df_train.columns:\n    msg = 'column: {:<10}\\t Percent of NaN value: {: .2f}%'.format(col, 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0]))\n    print(msg)","a7223681":"msno.matrix(df=df_train.iloc[:,:],figsize=(8,8), color=(0.8,0.5,0.2))","e52552cb":"f, ax= plt.subplots(1,2, figsize=(18,8))\n\ndf_train['Survived'].value_counts().plot.pie(explode=[0,0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived', data=df_train, ax=ax[1])\nax[1].set_title('Count plot - Survived')\nplt.show ","8a60a2f2":"df_train.shape","78ef65cf":"df_train[['Pclass','Survived']].groupby(['Pclass'], as_index=True).count()","fe9b689f":"pd.crosstab(df_train['Pclass'],df_train['Survived'],margins=True)","8d342b53":"df_train[['Pclass','Survived']].groupby(['Pclass'],as_index=True).mean().plot.bar()","2a35c847":"y_position = 1.02\nf, ax = plt.subplots(1, 2, figsize=(18,8))\ndf_train['Pclass'].value_counts ().plot.bar(color=['#CD7F32', '#FFDF00', '#D3D3D3'], ax=ax[0])\nax[0].set","c6bb0816":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\ndf_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","f8b55718":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","b9ff957f":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","9af3ad5f":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","ec81854c":"sns.factorplot('Pclass', 'Survived', hue='Sex', data=df_train, \n               size=6, aspect=1.5)","7c6c79ff":"sns.factorplot(x='Sex', y='Survived', col='Pclass',\n              data=df_train, satureation=.5,\n               size=9, aspect=1\n              )","2917185a":"print('\uc81c\uc77c \ub098\uc774 \ub9ce\uc740 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].max()))\nprint('\uc81c\uc77c \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].min()))\nprint('\ud0d1\uc2b9\uac1d \ud3c9\uade0 \ub098\uc774 : {:.1f} Years'.format(df_train['Age'].mean()))","e2720cef":"fig, ax = plt.subplots(1, 1, figsize=(9, 5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax=ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","997711d8":"# Age distribution withing classes\nplt.figure(figsize=(8, 6))\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind='kde')\n\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])","19fdc170":"cummulate_survival_ratio = []\nfor i in range(1, 80):\n    cummulate_survival_ratio.append(df_train[df_train['Age'] < i]['Survived'].sum() \/ len(df_train[df_train['Age'] < i]['Survived']))\n    \nplt.figure(figsize=(7, 7))\nplt.plot(cummulate_survival_ratio)\nplt.title('Survival rate change depending on range of Age', y=1.02)\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()","37efba30":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=df_train, scale='count', split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=df_train, scale='count', split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","21d8a5d2":"f, ax = plt.subplots(1, 1, figsize=(7, 7))\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax)","aee75598":"f,ax=plt.subplots(2, 2, figsize=(20,15))\nsns.countplot('Embarked', data=df_train, ax=ax[0,0])\nax[0,0].set_title('(1) No. Of Passengers Boarded')\nsns.countplot('Embarked', hue='Sex', data=df_train, ax=ax[0,1])\nax[0,1].set_title('(2) Male-Female Split for Embarked')\nsns.countplot('Embarked', hue='Survived', data=df_train, ax=ax[1,0])\nax[1,0].set_title('(3) Embarked vs Survived')\nsns.countplot('Embarked', hue='Pclass', data=df_train, ax=ax[1,1])\nax[1,1].set_title('(4) Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()\n","887d69d6":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4\ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4","658f97d2":"print(\"Maximum size of Family: \", df_train['FamilySize'].max())\nprint(\"Minimum size of Family: \", df_train['FamilySize'].min())","5af7a478":"f,ax=plt.subplots(1, 3, figsize=(40,10))\nsns.countplot('FamilySize', data=df_train, ax=ax[0])\nax[0].set_title('(1) No. Of Passengers Boarded', y=1.02)\n\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived countplot depending on FamilySize',  y=1.02)\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize',  y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","5167d880":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","fc5dee56":"# \uc544\ub798 \uc904\uc740 \ub4a4\ub2a6\uac8c \ubc1c\uacac\ud558\uc600\uc2b5\ub2c8\ub2e4. 13\ubc88\uc9f8 \uac15\uc758\uc5d0 \uc5b8\uae09\ub418\ub2c8, \uc77c\ub2e8 \ub530\ub77c\uce58\uc2dc\uace0 \ub118\uc5b4\uac00\uba74 \ub429\ub2c8\ub2e4.\ndf_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean() # testset \uc5d0 \uc788\ub294 nan value \ub97c \ud3c9\uade0\uac12\uc73c\ub85c \uce58\ud658\ud569\ub2c8\ub2e4.\n\ndf_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)","23ec2f65":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","6681e69b":"df_train['Name'].head()","ef4c8bdc":"df_train['Initial']= df_train.Name.str.extract('([A-Za-z]+)\\.') #lets extract the Salutations\ndf_test['Initial']= df_test.Name.str.extract('([A-Za-z]+)\\.') #lets extract the Salutations","c867077b":"pd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='summer_r') #Checking the Initials with the Sex","0ddac144":"df_train['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)\n\ndf_test['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)","1b33fa5f":"df_train.groupby('Initial')['Survived'].mean().plot.bar()\n","31e60b74":"df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age'] = 33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age'] = 36\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age'] = 5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age'] = 22\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Other'),'Age'] = 46\n\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age'] = 33\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'),'Age'] = 36\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'),'Age'] = 5\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'),'Age'] = 22\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Other'),'Age'] = 46","a146f56b":"df_train['Embarked'].fillna('S', inplace=True)","ab5457e6":"df_train.Age","9ac288ef":"df_train.shape","306f3bc9":"df_test.shape","cbe2f0a7":"def category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7    \n    \ndf_train['Age_cat'] = df_train['Age'].apply(category_age)\ndf_test['Age_cat'] = df_test['Age'].apply(category_age)","d002f660":"df_test.head()","d7d8cc4f":"df_train.drop('Age',axis=1,inplace=True)\ndf_test.drop('Age',axis=1,inplace=True)","8f7b01dc":"df_train['Initial'] = df_train['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})\ndf_test['Initial'] = df_test['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})","2430b486":"df_train['Embarked'] = df_train['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})","b6bb65c9":"df_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1})\ndf_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1})","0d733881":"heatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Fare', 'Embarked', 'FamilySize', 'Initial', 'Age_cat']] \n\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14, 12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0,\n           square=True, cmap=colormap, linecolor='white', annot=True, annot_kws={\"size\": 16})\n\ndel heatmap_data","c055419c":"df_train = pd.get_dummies(df_train, columns=['Initial'], prefix='Initial')\ndf_test = pd.get_dummies(df_test, columns=['Initial'], prefix='Initial')","4b858cd1":"df_train.head()","43ece3cd":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix='Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')","0169edd5":"df_test.head()","a83cdffe":"df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_test.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)","67b2d4a5":"#importing all the required ML packages\nfrom sklearn.ensemble import RandomForestClassifier # \uc720\uba85\ud55c randomforestclassfier \uc785\ub2c8\ub2e4. \nfrom sklearn import metrics # \ubaa8\ub378\uc758 \ud3c9\uac00\ub97c \uc704\ud574\uc11c \uc501\ub2c8\ub2e4\nfrom sklearn.model_selection import train_test_split # traning set\uc744 \uc27d\uac8c \ub098\ub220\uc8fc\ub294 \ud568\uc218\uc785\ub2c8\ub2e4.","3b5c5cfc":"X_train = df_train.drop('Survived', axis=1).values\ntarget_label = df_train['Survived'].values\nX_test = df_test.values","328bf726":"X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size=0.3, random_state=2018)","17abd7fa":"model = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)\nprediction = model.predict(X_vld)","79e16e88":"print('\ucd1d {}\uba85 \uc911 {:.2f}% \uc815\ud655\ub3c4\ub85c \uc0dd\uc874\uc744 \ub9de\ucda4'.format(y_vld.shape[0], 100 * metrics.accuracy_score(prediction, y_vld)))","343b6d63":"X_tr.shape","9485da6d":"X_vld.shape","d5c8a715":"y_tr.shape","fe5a928b":"\ny_vld.shape","51c4afd4":"df_test.head()","02a07782":"df_train.head()","4a744917":"from pandas import Series\n\nfeature_importance = model.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)","05745872":"plt.figure(figsize=(8, 8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","58d98bba":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","9824f983":"submission.head()","0e775358":"prediction = model.predict(X_test)\nsubmission['Survived'] = prediction","e4b5e1e8":"submission.to_csv('.\/my_first_submission.csv', index=False)","8e0972be":"**2.1 PClass**","bb61dad0":"2.2 Sex"}}