{"cell_type":{"9348eab8":"code","5070e77f":"code","380afedc":"code","f801c4b1":"code","fe2884ec":"code","fb7607cf":"code","633e3649":"code","4c12f1eb":"code","f0bcc0c2":"code","5be202e4":"code","eac3d96f":"code","cfe402df":"markdown","75a8119d":"markdown","b511f3e5":"markdown"},"source":{"9348eab8":"import sys\nsys.path.append('..\/input\/yolov3-for-care-symbols\/')","5070e77f":"from yolo import YOLO\nfrom PIL import Image\n\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","380afedc":"FLAGS = {\n        \"model_path\": '..\/input\/yolov3-for-care-symbols\/best_model.h5',\n        \"anchors_path\": '..\/input\/yolov3-for-care-symbols\/yolo_anchors.txt',\n        \"classes_path\": '..\/input\/yolov3-for-care-symbols\/classes.txt',\n        \"score\" : 0.3,\n        \"iou\" : 0.45,\n        \"model_image_size\" : (416, 416),\n        \"gpu_num\" : 1,\n    }\n\nyolo_obj = YOLO(**(FLAGS))","f801c4b1":"IMG_PATH = '..\/input\/identification-care-symbols\/test\/Test\/test_147.jpg'\n\nimg = yolo_obj.detect_image(Image.open(IMG_PATH), return_image=True)\n\nplt.figure(figsize=(20,10))\n\nplt.imshow(img)","fe2884ec":"import glob\n\nfrom tqdm import tqdm\n\nimport numpy as np\n\nimport os","fb7607cf":"file_dict = {}\nfor v, k in zip(glob.glob('..\/input\/identification-care-symbols\/train\/Train\/*'), map(lambda x: x.split('\/')[-1].split('.')[0], glob.glob('..\/input\/identification-care-symbols\/train\/Train\/*'))):\n    file_dict[k] = v","633e3649":"c = 0\n\nos.makedirs('train_cropped\/', exist_ok=True)\n\nfor f in tqdm(list(file_dict.values())[:20]):\n    img = Image.open(f)\n    coor = yolo_obj.detect_image(img)\n    f_n = f\"train_cropped\/{f.split('\/')[-1]}\"\n    \n    try:\n        coord = coor[0][0].astype(int)\n\n        coord[0] -= 30\n        coord[2] += 30\n\n        coord[1] -= 30\n        coord[3] += 30\n        \n        coord[coord < 0] = 0\n        \n        img = np.array(img)\n        \n        img = img[coord[0]:coord[2], coord[1]:coord[3]]\n        \n    except Exception as e:\n        c += 1\n        img = np.array(img)\n        pass\n        \n    plt.imsave(f_n, img)","4c12f1eb":"print(f\"total images: {len(file_dict)}, {c} of them cannot be cropped\")","f0bcc0c2":"file_dict = {}\nfor v, k in zip(glob.glob('..\/input\/identification-care-symbols\/test\/Test\/*'), map(lambda x: x.split('\/')[-1].split('.')[0], glob.glob('..\/input\/identification-care-symbols\/test\/Test\/*'))):\n    file_dict[k] = v","5be202e4":"c = 0\n\nos.makedirs('test_cropped\/', exist_ok=True)\n\nfor f in tqdm(list(file_dict.values())[:20]):\n    img = Image.open(f)\n    coor = yolo_obj.detect_image(img)\n    f_n = f\"test_cropped\/{f.split('\/')[-1]}\"\n    \n    try:\n        coord = coor[0][0].astype(int)\n\n        coord[0] -= 30\n        coord[2] += 30\n\n        coord[1] -= 30\n        coord[3] += 30\n        \n        coord[coord < 0] = 0\n        \n        img = np.array(img)\n        \n        img = img[coord[0]:coord[2], coord[1]:coord[3]]\n        \n    except Exception as e:\n        c += 1\n        img = np.array(img)\n        pass\n        \n    plt.imsave(f_n, img)","eac3d96f":"print(f\"total images: {len(file_dict)}, {c} of them cannot be cropped\")","cfe402df":"## Crop Train and Test Images","75a8119d":"### Train Images","b511f3e5":"### Test Images"}}