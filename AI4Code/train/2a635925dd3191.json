{"cell_type":{"ba35d643":"code","65296dae":"code","4074a37c":"code","70aa97c1":"code","a9b180d8":"code","8580eacb":"code","dec4f8e5":"code","ba4090a2":"code","4a637bad":"code","9ead7d56":"code","46366cc0":"code","7bd0851f":"code","96a98816":"code","041c5cf9":"code","27fbe1c2":"code","432ebc34":"code","e70fc45d":"markdown","5b59e7c3":"markdown","b398f587":"markdown","1d333126":"markdown","2fb6ede7":"markdown","e67fe718":"markdown","3c3c2ceb":"markdown","e340bc3f":"markdown","1b134bc4":"markdown","0023f4c5":"markdown","e14ae807":"markdown","c24b460c":"markdown","b807cb99":"markdown","d584d4a8":"markdown"},"source":{"ba35d643":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","65296dae":"import pandas as pd\ndata = pd.read_csv(\"..\/input\/crime-in-los-angeles\/Crime_Data_2010_2017.csv\")","4074a37c":"data.head()","70aa97c1":"data.shape[0]","a9b180d8":"sorted = data.sort_values(['Date Occurred', 'Time Occurred'], ascending=False)","8580eacb":"sorted.iloc[:3]","dec4f8e5":"date = data[data['Date Occurred'] == '03\/14\/2013']","ba4090a2":"date.shape[0]","4a637bad":"top25 = data.groupby('Crime Code Description') \\\n.size() \\\n.sort_values(ascending=False) \\\n.head(25)","9ead7d56":"top25.plot \\\n.barh() \\\n.invert_yaxis()","46366cc0":"data.groupby('Crime Code Description')['Victim Age'] \\\n.mean() \\\n.idxmin()","7bd0851f":"data.groupby('Crime Code Description')['Victim Age'] \\\n.mean() \\\n.idxmax()","96a98816":"data[data['Crime Code Description'] == 'ROBBERY'] \\\n.groupby('Area Name') \\\n.size() \\\n.sort_values(ascending=False) \\\n.head()","041c5cf9":"data[data['Crime Code Description'] == 'ROBBERY'] \\\n.groupby('Area Name') \\\n.size() \\\n.plot \\\n.pie()","27fbe1c2":"data[data['Crime Code Description'] == 'BURGLARY'] \\\n.groupby('Area Name') \\\n.size() \\\n.sort_values(ascending=False) \\\n.head()","432ebc34":"data[data['Crime Code Description'] == 'BURGLARY'] \\\n.groupby('Area Name') \\\n.size() \\\n.plot \\\n.pie()","e70fc45d":"## 3. Sorting and Selecting\nIn this section of the tutorial, we will explore our DataFrame by sorting and selecting certain parts of it.\n\n### Display the last 3 crimes that were reported in this data set.\nBefore selecting any data, we will need to sort our data. Since we want the last 3 crimes reported, we need to sort by the date occurred and the time occurred, with the earliest shown first. This can be achieved with **.sort_values()**, which can take a list of values (columns in the DataFrame) to sort by and a Boolean value for *ascending* to indicate what order to sort in. The default value for *ascending* is *true*.\n\n(9) Sorting: Store the sorted data in a new DataFrame named *sorted*.","5b59e7c3":"### Display the crime with the lowest average victim age and the crime with the highest average victim age.\n\nTo do this, we will group by the crime again, but this time, we will only be looking at the Victim Age columns. After grouping, we want to find the mean victim age of each group, which can be achieved with **.mean()**.\n\n(5) Summary Statistics (6) Split-apply-combine (10) Max and Min:  Display the crime with the lowest average victim age.","b398f587":"### How many crimes were reported?\n**.shape** returns a list with the element at index 0 representing the *number of rows* in the DataFrame and the element at index 1 representing the *number of columns* in the DataFrame.\n\n(2) Basic Information: To find how many crimes were reported, we want to access the number of rows in our DataFrame.","1d333126":"Because we want to display the last 3 crimes reported, we only want to show the first 3 rows of the *sorted* data frame. This can be achieved with **.iloc**, which returns rows of a DataFrame based on index. **iloc** indexing is similar to that of lists.\n\n(3) Selection: Display the first 3 rows of our new DataFrame.","2fb6ede7":"### How many crimes were occurred on 03\/14\/2013?\nAnother method of selecting data is with **Boolean indexing**.\n\n(4) Conditional Selection: Display all crimes that occurred on 03\/14\/2013 and store the data in a new DataFrame named *date*.","e67fe718":"A horizontal bar plot can be created using **.plot.barh()**. By default, the plot will show the first row of the DataFrame at the bottom. To show the first row of the DataFrame at the top, you can use **.invert_yaxis()**.\n\n(8) Plots: Show the *top25* DataFrame as a horizontal bar plot with the most common crime at the top of the plot.\n\nFrom this plot, we can see that Battery - Simple Assault is the most commonly committed crime in LA.","3c3c2ceb":"## 1. Load Data\nTo begin, we will load data from a CSV file into a pandas DataFrame using **.read_csv**. The first argument in .read_csv is a file path leading to the CSV.\n\nFor more information on .read_csv, refer to this documentation: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_csv.html.","e340bc3f":"# Quiz 4 Question 1\nThis EDA tutorial explores crime in Los Angeles from 2010 to 2017 using the pandas library.","1b134bc4":"## 4. Summarizing\n\n### Display the top 25 most common crimes and their frequency.\nTo find the frequency of each crime, we must group the data by the crime and return the size of the group. This can be achieved with **.groupby()**, which takes a string or list of strings to group the DataFrame by, and **.size()**, whuch returns the size of each group.\n\nWe will also need to sort the data, displaying the most common crimes first. This can be achieved with **sort_values()**. To display the top 25 rows, we will use **.head()**, which can take an argument for the number of rows to show.\n\n(1) Preview (7) Frequency Count (9) Sorting: Display the name and frequency of the top 25 most common crimes and store the data in a new DataFrame named *top25*.","0023f4c5":"## 2. DataFrame Attributes\nAfter loading our data, we want to conduct some a preliminary analysis to get a better idea of what our data looks like:\n\n(1) Preview: Display the first 5 rows using **.head()**.","e14ae807":"(5) Summary Statistics (6) Split-apply-combine (10) Max and Min:  Display the crime with the highest average victim age.","c24b460c":"(2) Basic Information: How many crimes occurred on 03\/14\/2013?","b807cb99":"#### Analysis\nThe 5 most commmon areas where robberies occurred include 4 of the top 5 areas with the lowest annual household income in Los Angeles (77th Street, Newton, Southwest, Southeast), with 77th Street as the area with the lowest annual household income. As seen in the pie chart, robberies occur overwhelmingly in this area, followed by Southeast and Southwest.\n\nThe 5 most common areas where burglaries occurered, on the other hand, include 3 of the top 4 areas with the highest annual household income in Los Angeles (Pacific, Devonshire, West Valley), with Pacific as the area with the highest annual household income. While lower income areas like 77th Street and Southwest are still in the top 5 most common areas where burglaries occurred, there is a stark increase in the proportion of these crimes occurring between robberies and burglaries in higher income areas of LA.\n\nThis illustrates an interesting nuance in the definitions of robbery and burglary. Most associate both crimes with theft, but burglary specifically requires the assailant to enter the building with the intent of committing a crime. Robbery requires the assailant to force or threaten to force someone to give something up. Because burglars usually target homes and there is no person to person contact, it makes sense that burglars would targer areas with higher incomes and thus more valuables to steal.","d584d4a8":"### Compare the 5 most common areas in which robberies occur vs. the 5 most common areas in which burglaries occur.\n\n(1) Preview (7) Frequency Count (8) Plot (9) Sorting"}}