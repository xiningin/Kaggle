{"cell_type":{"0f0c080b":"code","28f0e6ad":"code","5081df1a":"code","d30f4032":"code","3a4e9c1e":"code","7d33e8f0":"code","dd07056d":"code","059fae79":"code","ae74d97f":"code","d6568d07":"code","c60ab2ff":"code","a3f0adf4":"code","9d53aa20":"code","f5094df7":"code","fbaacb2a":"code","cbee4ed0":"code","67866d7d":"code","f808a247":"code","55759962":"code","95e7179d":"code","abbc13f2":"code","de7e5208":"code","07d65288":"markdown","086dd1a0":"markdown","5d591863":"markdown","2412a6df":"markdown","aed4e072":"markdown","706d22e7":"markdown"},"source":{"0f0c080b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport lightgbm as lgb\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","28f0e6ad":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nsub = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","5081df1a":"pd.set_option('display.max_columns', None) #\u30c7\u30fc\u30bf\u306e\u5217\u3092\u7701\u7565\u305b\u305a\u306b\u8868\u793a\u3059\u308b\u3002\ntrain.head()","d30f4032":"test.head()","3a4e9c1e":"sub.head()","7d33e8f0":"# \u6570\u5024\u30c7\u30fc\u30bf\u306e\u307f\u62bd\u51fa\nnumeric_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumeric = []\nfor i in train.columns:\n    if train[i].dtype in numeric_dtypes:\n        if i in ['TotalSF', 'Total_Bathrooms','Total_porch_sf','haspool','hasgarage','hasbsmt','hasfireplace']:\n            pass\n        else:\n            numeric.append(i)     \n\n# \u5916\u308c\u5024\u3092\u53ef\u8996\u5316\u3059\u308b\nsns.set_style(\"white\")\nsns.set_color_codes(palette='deep')\nfig, axs = plt.subplots(ncols=2, nrows=0, figsize=(12, 120))\nplt.subplots_adjust(right=2)\nplt.subplots_adjust(top=2)\nsns.color_palette(\"husl\", 8)\nfor i, feature in enumerate(list(train[numeric]), 1):\n    if(feature=='MiscVal'):\n        break\n    plt.subplot(len(list(numeric)), 3, i)\n    sns.scatterplot(x=feature, y='SalePrice', hue='SalePrice', palette='Blues', data=train)\n        \n    plt.xlabel('{}'.format(feature), size=15,labelpad=12.5)\n    plt.ylabel('SalePrice', size=15, labelpad=12.5)\n    \n    for j in range(2):\n        plt.tick_params(axis='x', labelsize=12)\n        plt.tick_params(axis='y', labelsize=12)\n    \n    plt.legend(loc='best', prop={'size': 10})\n        \nplt.show()","dd07056d":"# \u5404\u5909\u6570\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u30d7\u30ed\u30c3\u30c8\ncorr = train.corr()\nplt.subplots(figsize=(15,12))\nsns.heatmap(corr, vmax=0.9, cmap=\"Blues\", square=True)","059fae79":"n_train = len(train) # train\u30c7\u30fc\u30bf\u306e\u9577\u3055 \nall_features = pd.concat([train, test], sort=False).reset_index(drop=True)","ae74d97f":"all_features['HasWoodDeck'] = (all_features['WoodDeckSF'] == 0) * 1\nall_features['HasOpenPorch'] = (all_features['OpenPorchSF'] == 0) * 1\nall_features['HasEnclosedPorch'] = (all_features['EnclosedPorch'] == 0) * 1\nall_features['Has3SsnPorch'] = (all_features['3SsnPorch'] == 0) * 1\nall_features['HasScreenPorch'] = (all_features['ScreenPorch'] == 0) * 1\nall_features['YearsSinceRemodel'] = all_features['YrSold'].astype(int) - all_features['YearRemodAdd'].astype(int)\nall_features['YearsSinceBuilt'] = all_features['YrSold'].astype(int) - all_features['YearBuilt'].astype(int)\nall_features['Total_Home_Quality'] = all_features['OverallQual'] + all_features['OverallCond']\nall_features = all_features.drop(['Utilities', 'Street', 'PoolQC',], axis=1)\nall_features['TotalSF'] = all_features['TotalBsmtSF'] + all_features['1stFlrSF'] + all_features['2ndFlrSF']\nall_features['Total_sqr_footage'] = (all_features['BsmtFinSF1'] + all_features['BsmtFinSF2'] +\n                                 all_features['1stFlrSF'] + all_features['2ndFlrSF'])\nall_features['Total_Bathrooms'] = (all_features['FullBath'] + (0.5 * all_features['HalfBath']) +\n                               all_features['BsmtFullBath'] + (0.5 * all_features['BsmtHalfBath']))\nall_features['Total_porch_sf'] = (all_features['OpenPorchSF'] + all_features['3SsnPorch'] +\n                              all_features['EnclosedPorch'] + all_features['ScreenPorch'] +\n                              all_features['WoodDeckSF'])\nall_features['TotalBsmtSF'] = all_features['TotalBsmtSF'].apply(lambda x: np.exp(6) if x <= 0.0 else x)\nall_features['2ndFlrSF'] = all_features['2ndFlrSF'].apply(lambda x: np.exp(6.5) if x <= 0.0 else x)\nall_features['GarageArea'] = all_features['GarageArea'].apply(lambda x: np.exp(6) if x <= 0.0 else x)\nall_features['GarageCars'] = all_features['GarageCars'].apply(lambda x: 0 if x <= 0.0 else x)\nall_features['LotFrontage'] = all_features['LotFrontage'].apply(lambda x: np.exp(4.2) if x <= 0.0 else x)\nall_features['MasVnrArea'] = all_features['MasVnrArea'].apply(lambda x: np.exp(4) if x <= 0.0 else x)\nall_features['BsmtFinSF1'] = all_features['BsmtFinSF1'].apply(lambda x: np.exp(6.5) if x <= 0.0 else x)\n\nall_features['haspool'] = all_features['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\nall_features['has2ndfloor'] = all_features['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\nall_features['hasgarage'] = all_features['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\nall_features['hasbsmt'] = all_features['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\nall_features['hasfireplace'] = all_features['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\n","d6568d07":"test = all_features[n_train:].reset_index(drop=True) #\u7d50\u5408\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092train\u3068test\u306b\u518d\u5206\u5272\ntrain = all_features[:n_train]","c60ab2ff":"train.info()","a3f0adf4":"def label_encoding(train: pd.DataFrame, test: pd.DataFrame, col_definition: list):\n    n_train = len(train) # train\u30c7\u30fc\u30bf\u306e\u9577\u3055 \n    train = pd.concat([train, test], sort=False).reset_index(drop=True) # train\u3068test\u30c7\u30fc\u30bf\u3092\u7d50\u5408\n    for column in col_definition: # col_definition\u306b\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u30ab\u30e9\u30e0\u540d\u306e\u30ea\u30b9\u30c8\u304c\u5165\u308b column\u306f\u5404\u30ab\u30c6\u30b4\u30ea\u540d\u304cstring\u578b\u3067\u5165\u308b\n        try:\n            lbl = preprocessing.LabelEncoder()\n            train[column] = lbl.fit_transform(list(train[column].values)) # LabelEncoding\u3092\u9069\u7528\n        except:\n            print(column)\n    test = train[n_train:].reset_index(drop=True) #\u7d50\u5408\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092train\u3068test\u306b\u518d\u5206\u5272\n    train = train[:n_train]\n    return train, test","9d53aa20":"categorical_cols = list(train.select_dtypes(include=['object']).columns) \n# \u30ab\u30c6\u30b4\u30ea\u5909\u6570(type=object)\u304c\u5165\u3063\u3066\u3044\u308b\u30ab\u30e9\u30e0\u306e\u540d\u524d\u3092\u30ea\u30b9\u30c8\u306b\u3059\u308b\nprint(categorical_cols)\n# \u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ntrain, test = label_encoding(train, test, categorical_cols)","f5094df7":"# \u6700\u7d42\u7684\u306a\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\u3057\u305f\u3044\u6642\u4ee5\u5916\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8 \u52dd\u624b\u306b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u304f\u308c\u308b\nimport optuna.integration.lightgbm as lgb","fbaacb2a":"X = train.drop(['Id', 'SalePrice'], axis=1)\ny = np.log1p(train['SalePrice'])\nX_test = test.drop(['Id','SalePrice',], axis=1)","cbee4ed0":"outliers = [30, 88, 462, 631, 1322]\nX = X.drop(X.index[outliers])\nX.reset_index(inplace=True, drop=True)\ny = y.drop(y.index[outliers])\ny.reset_index(inplace=True, drop=True)","67866d7d":"X.head()","f808a247":"y.head()","55759962":"y_preds = []\nmodels = []\noof_train = np.zeros((len(X),))\ncv = KFold(n_splits=10, shuffle=True, random_state=0)\n\nparams = {\n    'num_leaves': 24,\n    'max_depth': 6,\n    'objective': 'regression',\n    'metric': 'rmse',\n    'learning_rate': 0.05\n}\n\nfor fold_id, (train_index, valid_index) in enumerate(cv.split(X)):\n    X_tr = X.loc[train_index, :]\n    X_val = X.loc[valid_index, :]\n    y_tr = y[train_index]\n    y_val = y[valid_index]\n\n    lgb_train = lgb.Dataset(X_tr,\n                            y_tr,\n                            categorical_feature=categorical_cols)\n\n    lgb_eval = lgb.Dataset(X_val,\n                           y_val,\n                           reference=lgb_train,\n                           categorical_feature=categorical_cols)\n    \n    model = lgb.train(params,\n                      lgb_train,\n                      valid_sets=[lgb_train, lgb_eval],\n                      verbose_eval=10,\n                      num_boost_round=1000,\n                      early_stopping_rounds=10)\n\n\n    oof_train[valid_index] = model.predict(X_val,\n                                           num_iteration=model.best_iteration)\n    y_pred = model.predict(X_test,\n                           num_iteration=model.best_iteration)\n\n    y_preds.append(y_pred)\n    models.append(model)","95e7179d":"print(f'CV: {np.sqrt(mean_squared_error(y, oof_train))}')","abbc13f2":"pd.set_option('display.max_rows', 100)\nimportance = pd.DataFrame(model.feature_importance(importance_type=\"gain\"), index=X.columns, columns=['importance'])\nimportance = importance.sort_values(\"importance\", ascending=False)\ndisplay(importance)","de7e5208":"y_sub = sum(y_preds) \/ len(y_preds)\ny_sub = np.expm1(y_sub)\nsub['SalePrice'] = y_sub\nsub.to_csv('submission.csv', index=False)\nsub.head()","07d65288":"# 2. \u7279\u5fb4\u91cf\u4f5c\u6210","086dd1a0":"# 1. EDA","5d591863":"# \u6982\u8981\nLightgbm\u30b7\u30f3\u30b0\u30eb\u30e2\u30c7\u30eb\u306b\u3088\u308b\u3001House Prices\u30b3\u30f3\u30da\u306e\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\nLightgbm\u306e\u30b7\u30f3\u30b0\u30eb\u30e2\u30c7\u30eb\u3067\u53d6\u308a\u7d44\u3093\u3060\u306e\u306f\u3001\u524d\u51e6\u7406\u3092\u3059\u308b\u624b\u9593\u3092\u304b\u3051\u305a\u306b\u7279\u5fb4\u91cf\u304c\u52b9\u3044\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u7c21\u5358\u306b\u5b9f\u9a13\u3067\u304d\u308b\u304b\u3089\u3002\n\u8a73\u3057\u304f\u306fu++\u3055\u3093\u306e\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u7167 https:\/\/upura.hatenablog.com\/entry\/2019\/10\/29\/184617","2412a6df":"# 4. \u30e2\u30c7\u30eb\u69cb\u7bc9\u3068\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","aed4e072":"# \u4eca\u5f8c\n\u4eca\u56de\u306fLightGBM\u3060\u3051\u3067\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u305f\u304c\u3001\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306bRidge\u3084SVM,XGBoost\u306a\u3069\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3059\u308b\u3079\u304d\n\u3088\u308a\u826f\u3044\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u624b\u6cd5\u3092\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff1f","706d22e7":"# 3. \u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0"}}