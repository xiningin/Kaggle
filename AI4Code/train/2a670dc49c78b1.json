{"cell_type":{"71f3efac":"code","27194611":"code","ba025309":"code","21adf141":"code","ca4ad0f9":"code","2e70cdac":"code","ec3bdb9d":"code","075532ae":"code","993d0926":"code","c8aa6325":"code","0936c463":"code","da7525a5":"code","42baf11f":"code","c8dc4a35":"markdown"},"source":{"71f3efac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","27194611":"import cv2\nimport matplotlib.pyplot as plt\nimport random\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport h5py","ba025309":"from keras import backend as K\nfrom keras.callbacks import  EarlyStopping, Callback\nfrom keras.utils import np_utils\nfrom keras import optimizers\nfrom keras.models import Sequential, model_from_json\nfrom keras.layers import  Conv2D, MaxPool2D,Activation,Dropout,Flatten,Dense, BatchNormalization\n\n","21adf141":"# defining constant values\nimg_width = 64\nimg_height = 64\nsplit_size = 0.2\nbatch_size = 128\nchannels = 3","ca4ad0f9":"train_data = h5py.File('..\/input\/train_happy.h5', \"r\")\nX_train = np.array(train_data[\"train_set_x\"][:]) \ny_train = np.array(train_data[\"train_set_y\"][:]) \ny_train = y_train.reshape((1, y_train.shape[0]))\n\ntest_data = h5py.File('..\/input\/test_happy.h5', \"r\")\nX_test = np.array(test_data[\"test_set_x\"][:])\ny_test = np.array(test_data[\"test_set_y\"][:]) \ny_test = y_test.reshape((1, y_test.shape[0]))\n","2e70cdac":"print(\"Shape of Training data :{}\".format(X_train.shape))\nprint(\"Shape of Test data :{}\".format(X_test.shape))","ec3bdb9d":"#Rescaling the given data\nX_train = X_train\/255.\nX_test = X_test\/255.\ny_train = y_train.T\ny_test = y_test.T\n","075532ae":"#Visualizing the data\nfig=plt.figure(figsize=(8, 8))\ncolumns = 4\nrows = 5\nfor i in range(1, columns*rows +1):\n    img = X_train[i]\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(img)\nplt.show()","993d0926":"model = Sequential()\n\nmodel.add(Conv2D(8,(3,3),input_shape=(img_width,img_height,channels),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPool2D(pool_size=(3,3)))\n\nmodel.add(Conv2D(16,padding='same',kernel_size=(3,3)))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(32,padding='same',kernel_size=(3,3)))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\n\nmodel.add(Conv2D(32,kernel_size=(3,3),padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\n\n#Compile Model\nmodel.add(Flatten())\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='Adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.summary()\n","c8aa6325":"model.fit(X_train, y_train, batch_size=30, epochs=20)\n","0936c463":"y_predict = model.predict_classes(X_test)","da7525a5":"y_predict","42baf11f":"from sklearn.metrics import precision_recall_fscore_support, accuracy_score\n \naccuracy = accuracy_score(y_test, y_predict)\nprecision, recall, f1_score, _ = precision_recall_fscore_support(y_test, y_predict, average='binary')\n \nprint(\"Accuracy: \", accuracy)\nprint(\"Precision: \", precision)\nprint(\"Recall: \", recall)\nprint(\"F1 score: \", f1_score)","c8dc4a35":"# Model 1: CNN "}}