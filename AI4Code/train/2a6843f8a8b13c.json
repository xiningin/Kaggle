{"cell_type":{"4a951bdc":"code","b0fc4cee":"code","cd4c886c":"code","c39d1808":"code","8f7cb31f":"code","cd81914b":"code","81f18b67":"code","2cdb40e0":"code","d1054100":"code","b8358dd6":"code","5b33b894":"code","dc419ff2":"code","e343261e":"code","731d6a73":"code","4c744267":"code","59f3dd5a":"code","adb18ab0":"code","2ca4df5e":"code","82037e1b":"code","e8e9c091":"code","d22fb17a":"code","6474bdfc":"code","803b31cc":"code","97f0c6c8":"code","7c520732":"code","7579454b":"code","39abece4":"code","783d6f9c":"code","f4394978":"code","20854e86":"code","bb697511":"code","698a3da6":"code","d8218c90":"code","24b4e94b":"code","0e975089":"code","e71b3851":"code","e43254ee":"code","b0441be4":"code","d936ac56":"code","514c48ce":"code","e573715f":"markdown","ec3be13f":"markdown","97cf0b74":"markdown","de800705":"markdown","ab2409dd":"markdown","d6d7f416":"markdown","928dd38d":"markdown","a9745503":"markdown","b59bb62b":"markdown","bcbab32b":"markdown","5cfe9f4b":"markdown","8eda7f16":"markdown","91f0460e":"markdown","1d8981c1":"markdown","5aff6bf0":"markdown","8511219f":"markdown","16073a43":"markdown","3fc4313a":"markdown","cbde4b0b":"markdown","f2d60762":"markdown","d30f2b36":"markdown","89e94095":"markdown","9fefc7af":"markdown"},"source":{"4a951bdc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","b0fc4cee":"pd.set_option('display.width', 1200)\npd.set_option('display.max_columns', 25)","cd4c886c":"\ndf = pd.read_csv(\"\/kaggle\/input\/flight-take-off-data-jfk-airport\/M1_final.csv\") \ndf.head()","c39d1808":"column_names = {\"OP_UNIQUE_CARRIER\":\"CARRIER_CODE\",\n                \"TAIL_NUM\":\"FLIGHT_NO\",\n                \"CRS_ELAPSED_TIME\":\"SCHEDULED_DURATION\",\n                \"CRS_DEP_M\":\"SCHEDULED_DEPARTURE\",\n                \"DEP_TIME_M\":\"ACTUAL_DEP_TIME\",\n                \"CRS_ARR_M\":\"SCHEDULED_ARRIVAL\",\n                \"sch_dep\":\"FLT_SCH_ARRIVAL\",\n                \"sch_arr\":\"FLT_SCH_DEPARTURE\"\n               }\n\ndf = df.rename(column_names, axis=1)\n\ndf.head()","8f7cb31f":"df.shape","cd81914b":"df.info()","81f18b67":"df.isnull().sum()","2cdb40e0":"df[\"Wind\"].value_counts()","d1054100":"df[\"Wind\"] = df[\"Wind\"].fillna(value=\"W\", limit=1)\n\ndf[\"Wind\"] = df[\"Wind\"].fillna(value=\"NW\", limit=1)","b8358dd6":"df.isnull().sum()","5b33b894":"df.describe()","dc419ff2":"df[\"CARRIER_CODE\"].value_counts()","e343261e":"df['Dew Point'].astype(str).astype(int)\n\n","731d6a73":"df[\"Dew Point\"].describe()","4c744267":"df['DEP_DELAY'].plot(kind=\"box\", figsize=(30,30))","59f3dd5a":"df['DELAYED'] = np.where(df['DEP_DELAY'] > 0, 1, 0)\n\ndf['EARLY'] = np.where(df['DEP_DELAY'] < 0, 1, 0)\n\ndf['ONTIME'] = np.where(df['DEP_DELAY'] == 0, 1, 0)\n","adb18ab0":"\nearly = df['EARLY'].sum()\ndelayed = df['DELAYED'].sum()\nontime = df['ONTIME'].sum()\ntotal = df.shape[0]\np_early = early \/ total * 100\np_delayed = delayed \/ total * 100\np_ontime = ontime \/ total * 100\n\nprint(\"Flights are {0:.2f} percent ontime, {1:.2f} percent delayed and {2:.2f} percent early.\"\n.format(p_ontime, p_delayed, p_early))","2ca4df5e":"df[\"TOTAL_SCHEDULED\"] = df[\"FLT_SCH_ARRIVAL\"] + df[\"FLT_SCH_DEPARTURE\"]\n\ndf.head()","82037e1b":"df[\"TOTAL_SCHEDULED\"].value_counts(ascending = True)","e8e9c091":"\ndf[\"AIRPORT_STATUS\"] = pd.cut(df[\"TOTAL_SCHEDULED\"], bins=[0,20,40,100],\n                             include_lowest=True, labels = [\"0\",\"1\",\"2\"])\n\ndf.head()","d22fb17a":"plt.figure(figsize=(16,10))\n\ncorr = df.corr()\nax = sns.heatmap(\n    corr,\n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n)\n\nplt.show()\n","6474bdfc":"plt.figure(figsize=(12,8))\ndf.groupby('Condition')['DELAYED'].mean().plot(kind=\"barh\")","803b31cc":"h_df = df[df['Humidity'] > 70] #boolean masking\nh_p_delay = h_df['DELAYED'].mean() * 100\nprint(\"The percent of delay is {0:.2f} for the flights when the humidity is over 70.\"\n.format(h_p_delay))","97f0c6c8":"from matplotlib.pyplot import figure\nfigure(figsize=(15, 20), dpi=80)\n\n\ndf.groupby('DEST')['DELAYED'].mean().plot(kind=\"pie\")","7c520732":"df.groupby('CARRIER_CODE')['DELAYED'].mean().plot(kind=\"bar\")","7579454b":"df.drop([\"CARRIER_CODE\"], axis=1, inplace=True)","39abece4":"df.drop([\"SCHEDULED_DURATION\"], axis=1, inplace=True)","783d6f9c":"df.drop([\"SCHEDULED_DEPARTURE\"], axis=1, inplace=True)\ndf.drop([\"ACTUAL_DEP_TIME\"], axis=1, inplace=True)\ndf.drop([\"SCHEDULED_ARRIVAL\"], axis=1, inplace=True)\ndf.drop([\"FLIGHT_NO\"], axis=1, inplace=True)\ndf.drop([\"Dew Point\"], axis=1, inplace=True)\ndf.drop([\"Wind Gust\"], axis=1, inplace=True)\ndf.drop([\"FLT_SCH_ARRIVAL\"], axis=1, inplace=True)\ndf.drop([\"FLT_SCH_DEPARTURE\"], axis=1, inplace=True)\ndf.drop([\"ONTIME\"], axis=1, inplace=True)\ndf.drop([\"EARLY\"], axis=1, inplace=True)\ndf.drop([\"Pressure\"], axis=1, inplace=True)","f4394978":"df.head()","20854e86":"degrees = {'NNW': 340, 'CALM': 0, 'NNE':20, 'NE':45, 'VAR':0, 'WSW':230, 'S':180,\n           'SSW':200, 'WNW':290, 'ESE':115, 'N': 360, 'SW':225, 'E':90, 'W':270,\n           'SSE':155, 'ENE':70, 'NW':315, 'SE':135}\n\nfor i in degrees:\n    df.loc[df['Wind'] == i, \"Wind\"] = degrees[i]\n    \n    \ndf.head()","bb697511":"y = df['TAXI_OUT']\nX = df.drop(['TAXI_OUT'],axis = 1)\n\nobjects = list(X.select_dtypes(include = 'object').columns)\nnumerics = list(set(X.columns) - set(objects))\n\nX = X.copy()","698a3da6":"from sklearn import preprocessing \nlabel_encoder = preprocessing.LabelEncoder()\nfor i in objects:\n    X[i] = label_encoder.fit_transform(X[i].astype(str))","d8218c90":"from sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state =42)","24b4e94b":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","0e975089":"from sklearn.linear_model import LinearRegression\nfrom sklearn import metrics","e71b3851":"model = LinearRegression()\n\nmodel.fit(X_train, y_train)\n\nprediction = model.predict(X_test)","e43254ee":"model.score(X_test, y_test)","b0441be4":"model.coef_","d936ac56":"print(\"Mean squared error: %.2f\" % np.mean((model.predict(X_test) - y_test) ** 2))","514c48ce":"print('Variance score: %.2f' % model.score(X_test, y_test))","e573715f":"This file contains data about flights leaving from JKF ariport between Nov 2019-Dec-2020.\n\nTaxi-Out prediction has been an important concept as it helps in calculating Runway time and directly impact the cost of the flight.","ec3be13f":"From the graph above, we can see the probabilites of delays according to the weather conditions.","97cf0b74":"I would like to create 3 new feautures which are DELAYED, EARLY, and ONTIME.\n\nThese columns will have values as 1 = yes and 0 = no","de800705":"Flight that are flying to JAC has more probability to be delayed.","ab2409dd":"With the help of the descriptions, I have made some changes on column names to have a better understanding.","d6d7f416":"There are only 2 missing values which are in the Wind feature","928dd38d":"Adding a new feature to see total planned flights","a9745503":"Categorical features should be transformed","b59bb62b":"We have almost 29k rows and 23 columns.","bcbab32b":"As expected, DEP_DELAY has some extreme outliers since the max value is way more than the third quartile value. Mean departure delay is only 6 min but the standard deviation is 38.735 which is high. ","5cfe9f4b":"Converting Dew Point which is an object dtype to an integer.","8eda7f16":"Carriers have similar delay rates.","91f0460e":"We can drop carrier code since their delayed flight rates does not differ that much.\n","1d8981c1":"Most common values for the Wind feature are W and NW.\n\nI filled the 2 missing values by using them both once.","5aff6bf0":"No missing values left.","8511219f":"Since DEP_DELAY is important and enough for us we can drop SCHEDULED_DEPARTURE, \"ACTUAL_DEP_TIME\", and SCHEDULED_ARRIVAL. \n\nWind Gust and Wind Speed are highly correlated so one can be dropped.\n\nDew Point is related to Humidity so it can be dropped as well.\n\nWe have used FLT_SCH_ARRIVAL and FLT_SCH_DEPARTURE to calculate TOTAL_SCHEDULED so we can drop them.\n\nONTIME and EARLY can be dropped as there are already DELAYED \n\nWind Speed and Pressure are negatively correlated and they represent similar things. Thus, Pressure can be dropped.","16073a43":"Since distance and duration represent similar things and are highly correlated, we can drop duration","3fc4313a":"Wind values can be transformed to degrees to fit the model","cbde4b0b":"**Correlation Heatmap**","f2d60762":"This code allows us to see all columns when we print the dataframe.","d30f2b36":"When the geographical aspects and the relationships between the features are taken into account, the correlation results are as expected.","89e94095":"Adding a new feature called AIRPORT_STATUS which uses the TOTAL_SCHEDULED values and labels them as 0,1 and 2 to show the status of the airport.\n\nValues between 0 and 20 are labeled as 0,\n\nValues between 20 and 40 are labeled as 1,\n\nValues between 40 and more are labeled as 2 showing that it is busy\n      \n   ","9fefc7af":"To explore the percent of delayed flights when the humidity is over 70, let's use a boolean mask."}}