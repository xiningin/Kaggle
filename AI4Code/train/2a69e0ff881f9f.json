{"cell_type":{"d9f41885":"code","8496e41d":"code","6650c55a":"code","ab929949":"code","5ed07786":"code","8575bace":"code","cec6df9c":"code","d80c0877":"code","ce60bf1d":"code","80e60441":"code","45e394be":"code","94ed7044":"code","b63f45b4":"code","bce678fe":"code","66a86ece":"code","5148ad0a":"code","985899d7":"code","7b30a556":"code","d47acda5":"code","42c9a40d":"code","e2ecdeba":"code","1103c37d":"code","3b628cb0":"code","e106c79d":"code","6bc2fa9a":"code","3bbad11a":"code","9e206eee":"code","53621507":"markdown","a91b5539":"markdown","924829b3":"markdown","8c98432f":"markdown"},"source":{"d9f41885":"import matplotlib.pyplot as plt\nimport numpy as np","8496e41d":"import pandas as pd\n\ndf=pd.read_csv('..\/input\/fake-news\/train.csv')\n\ndf.head()","6650c55a":"df.shape","ab929949":"df= df.dropna()","5ed07786":"messages=df.copy()\nmessages.reset_index(inplace=True)\nmessages.head(5)","8575bace":"from nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nimport re\nps = PorterStemmer()\ncorpus = []\nfor i in range(0, len(messages)):\n    review = re.sub('[^a-zA-Z]', ' ', messages['text'][i])\n    review = review.lower()\n    review = review.split()\n    \n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)","cec6df9c":"## TFidf Vectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ntfidf_v=TfidfVectorizer(max_features=5000,ngram_range=(1,3))\nX=tfidf_v.fit_transform(corpus).toarray()","d80c0877":"X.shape","ce60bf1d":"tfidf_v.get_feature_names()[:10]","80e60441":"tfidf_v.get_params()","45e394be":"from wordcloud import WordCloud","94ed7044":"real=' '.join(list(messages[messages['label']==0]['title']))\nreal=WordCloud(width=512, height=512).generate(real)\nplt.figure(figsize=(5,5),facecolor='k')\nplt.imshow(real)\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","b63f45b4":"fake=' '.join(list(messages[messages['label']==1]['title']))\nfake=WordCloud(width=512, height=512).generate(fake)\nplt.figure(figsize=(5,5),facecolor='k')\nplt.imshow(fake)\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","bce678fe":"X.shape","66a86ece":"y=messages['label']","5148ad0a":"from sklearn.model_selection import train_test_split\nX_train,X_test, y_train, y_test=train_test_split(X,y, test_size=0.33, random_state=1)","985899d7":"count_df = pd.DataFrame(X_train, columns=tfidf_v.get_feature_names())\ncount_df.head()","7b30a556":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    See full source and example: \n    http:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_confusion_matrix.html\n    \n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","d47acda5":"from sklearn.naive_bayes import MultinomialNB\nnb=MultinomialNB()","42c9a40d":"from sklearn import metrics\nimport itertools","e2ecdeba":"nb.fit(X_train, y_train)\npred = nb.predict(X_test)\nscore = metrics.accuracy_score(y_test, pred)\nprint(\"accuracy:   %0.3f\" % score)\ncm = metrics.confusion_matrix(y_test, pred)\nplot_confusion_matrix(cm, classes=['FAKE', 'REAL'])","1103c37d":"classifier=MultinomialNB(alpha=0.1)","3b628cb0":"previous_score=0\nfor alpha in np.arange(0,1,0.1):\n    sub_classifier=MultinomialNB(alpha=alpha)\n    sub_classifier.fit(X_train,y_train)\n    y_pred=sub_classifier.predict(X_test)\n    score = metrics.accuracy_score(y_test, y_pred)\n    if score>previous_score:\n        classifier=sub_classifier\n    print(\"Alpha: {}, Score : {}\".format(alpha,score))","e106c79d":"from sklearn.linear_model import PassiveAggressiveClassifier\nlinear_clf = PassiveAggressiveClassifier()","6bc2fa9a":"linear_clf.fit(X_train, y_train)\npred = linear_clf.predict(X_test)\nscore = metrics.accuracy_score(y_test, pred)\nprint(\"accuracy:   %0.3f\" % score)\ncm = metrics.confusion_matrix(y_test, pred)\nplot_confusion_matrix(cm, classes=['FAKE Data', 'REAL Data'])","3bbad11a":"test=pd.read_csv('..\/input\/fake-news\/test.csv')\ntest.head()","9e206eee":"test.isnull().sum()","53621507":"# Passive Aggressive Classifier Algorithm","a91b5539":"# Let's try our model on test.csv","924829b3":"# Multinomial Classifier with Hyperparameter","8c98432f":"# Using MultinomialNB classifier"}}