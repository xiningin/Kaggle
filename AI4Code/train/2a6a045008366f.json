{"cell_type":{"e8b1cc29":"code","bf299445":"code","84f16aac":"code","c1a23ec0":"code","54e31bf8":"code","6bcfb6ee":"code","a63fccac":"code","be77532b":"code","d58f65e4":"code","ddb3b38e":"code","d4f7530e":"code","9f7db056":"code","b1e1efe4":"code","acfd9255":"code","0008e724":"code","a9c2c0a8":"code","fe40a8d1":"code","575850db":"code","3e6b67d2":"code","fcb54def":"code","47f3b338":"code","6baad3fd":"code","ad6615cf":"code","74267070":"code","64ade803":"code","790f25cc":"code","2ed08d25":"code","9aef9534":"code","0b87abe5":"code","23842d34":"code","a527132c":"code","b25f64cf":"markdown","68e16dde":"markdown","2f47f3aa":"markdown","67b3f1d2":"markdown","250dab33":"markdown","c028a9d0":"markdown","d75ce61b":"markdown","610ecbb1":"markdown","bd5600f4":"markdown","272784f4":"markdown","e0ed216a":"markdown","ccec2910":"markdown","90417397":"markdown","2147066e":"markdown","e21a48da":"markdown","790a88b5":"markdown","363f51fd":"markdown","cbc3a206":"markdown"},"source":{"e8b1cc29":"import numpy as np\nimport pandas as pd \nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport random\nimport os\nprint(os.listdir(\"..\/input\"))","bf299445":"FAST_RUN = False\nIMAGE_WIDTH=128\nIMAGE_HEIGHT=128\nIMAGE_SIZE=(IMAGE_WIDTH, IMAGE_HEIGHT)\nIMAGE_CHANNELS=3","84f16aac":"import zipfile\nwith zipfile.ZipFile(\"..\/input\/dogs-vs-cats\/train.zip\",\"r\") as z:\n    z.extractall(\".\")\n\nwith zipfile.ZipFile(\"..\/input\/dogs-vs-cats\/test1.zip\",\"r\") as z:\n    z.extractall(\".\")\n\ntrain_path = \"\/kaggle\/working\/train\"\nfilenames = os.listdir(train_path)\ncategories = []\n\nfor filename in filenames:\n    category = filename.split('.')[0]\n    if category == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})","c1a23ec0":"df.head()","54e31bf8":"df['category'].value_counts().plot.bar()","6bcfb6ee":"sample = random.choice(filenames)\nimage = load_img(\".\/train\/\"+sample)\nplt.imshow(image)","a63fccac":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization\n\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax')) # 2 because we have cat and dog classes\n\nmodel.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\nmodel.summary()","be77532b":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau","d58f65e4":"earlystop = EarlyStopping(patience=10)","ddb3b38e":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","d4f7530e":"callbacks = [earlystop, learning_rate_reduction]","9f7db056":"df[\"category\"] = df[\"category\"].replace({0: 'cat', 1: 'dog'}) ","b1e1efe4":"train_df, validate_df = train_test_split(df, test_size=0.20, random_state=42)\ntrain_df = train_df.reset_index(drop=True)\nvalidate_df = validate_df.reset_index(drop=True)","acfd9255":"train_df['category'].value_counts().plot.bar()","0008e724":"validate_df['category'].value_counts().plot.bar()","a9c2c0a8":"total_train = train_df.shape[0]\ntotal_validate = validate_df.shape[0]\nbatch_size=15","fe40a8d1":"train_datagen = ImageDataGenerator(\n    rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","575850db":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","3e6b67d2":"example_df = train_df.sample(n=1).reset_index(drop=True)\nexample_generator = train_datagen.flow_from_dataframe(\n    example_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical'\n)","fcb54def":"plt.figure(figsize=(12, 12))\nfor i in range(0, 15):\n    plt.subplot(5, 3, i+1)\n    for X_batch, Y_batch in example_generator:\n        image = X_batch[0]\n        plt.imshow(image)\n        break\nplt.tight_layout()\nplt.show()","47f3b338":"epochs=3 if FAST_RUN else 10\nhistory = model.fit_generator(\n    train_generator, \n    epochs=epochs,\n    validation_data=validation_generator,\n    validation_steps=total_validate\/\/batch_size,\n    steps_per_epoch=total_train\/\/batch_size,\n    callbacks=callbacks\n)","6baad3fd":"model.save_weights(\"model.h5\")","ad6615cf":"test_filenames = os.listdir(\".\/test1\")\ntest_df = pd.DataFrame({\n    'filename': test_filenames\n})\nnb_samples = test_df.shape[0]","74267070":"test_gen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    \".\/test1\/\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    target_size=IMAGE_SIZE,\n    batch_size=batch_size,\n    shuffle=False\n)","64ade803":"predict = model.predict_generator(test_generator, steps=np.ceil(nb_samples\/batch_size))","790f25cc":"test_df['category'] = np.argmax(predict, axis=-1)","2ed08d25":"label_map = dict((v,k) for k,v in train_generator.class_indices.items())\ntest_df['category'] = test_df['category'].replace(label_map)","9aef9534":"test_df['category'] = test_df['category'].replace({ 'dog': 1, 'cat': 0 })","0b87abe5":"test_df['category'].value_counts().plot.bar()","23842d34":"sample_test = test_df.head(18)\nsample_test.head()\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(\".\/test1\/\"+filename, target_size=IMAGE_SIZE)\n    plt.subplot(6, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel(filename + '(' + \"{}\".format(category) + ')' )\nplt.tight_layout()\nplt.show()","a527132c":"submission_df = test_df.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","b25f64cf":"## Learning Rate Reduction\n\nWe will reduce the learning rate when then accuracy not increase for 2 steps","68e16dde":"For categoral classication the prediction will come with probability of each category. So we will pick the category that have the highest probability with numpy average max","2f47f3aa":"# Callbacks","67b3f1d2":"# sample image","250dab33":"# Model Building\n- Input Layer: It represent input image data. It will reshape image into single diminsion array. Example your image is 64x64 = 4096, it will convert to (4096,1) array.\n- Conv Layer: This layer will extract features from image.\n- Pooling Layer: This layerreduce the spatial volume of input image after convolution.\n- Fully Connected Layer: It connect the network from a layer to another layer\n- Output Layer: It is the predicted values layer.","c028a9d0":"## Early Stop\n\nTo prevent over fitting we will stop the learning after 10 epochs and val_loss value not decreased","d75ce61b":"# Validation Generator","610ecbb1":"We will convert the predict category back into our generator classes by using train_generator.class_indices. It is the classes that image generator map","bd5600f4":"# Predict","272784f4":"# Test","e0ed216a":"# Prepare Testing Data","ccec2910":"# Testing Generator","90417397":"# Prepare Traning Data","2147066e":"We need to convert column category into string. Then imagenerator will convert it one-hot encoding which is good for our classification.\n\nSo we will convert 1 to dog and 0 to cat","e21a48da":"# Traning Generator","790a88b5":"# Submission","363f51fd":"# Fit Model","cbc3a206":"# Prepare data"}}