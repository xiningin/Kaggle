{"cell_type":{"d3434179":"code","fcb434bb":"code","8b6a9695":"code","6d7e4622":"code","27eda8f6":"code","08d95227":"code","348f15f7":"code","dfb46e74":"code","0df08cd0":"code","bb60e92e":"code","7f56e05f":"code","4de7ea65":"code","f15ee5df":"code","b688c537":"code","d9ba7687":"code","90432488":"code","c0bb6e9a":"code","35936b34":"markdown","0181733c":"markdown","68695d91":"markdown","ad0d6f5a":"markdown","ef7f04e2":"markdown","80b57a8f":"markdown"},"source":{"d3434179":"!pip install kaggle-environments -U > \/dev\/null\n!cp -r ..\/input\/lux-ai-2021\/* .","fcb434bb":"%%writefile agent.py\nimport os\nimport time\nimport pickle\n\nimport builtins as __builtin__\n\nfrom lux.game import Game, Missions\n\nfrom make_actions import make_city_actions, make_unit_missions, make_unit_actions\nfrom make_annotations import annotate_game_state, annotate_missions, annotate_movements\n\ngame_state = Game()\nmissions = Missions()\n\n\ndef game_logic(game_state: Game, missions: Missions, DEBUG=False):\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    game_state.calculate_features(missions)\n    state_annotations = annotate_game_state(game_state)\n    actions_by_cities = make_city_actions(game_state, missions, DEBUG=DEBUG)\n    missions = make_unit_missions(game_state, missions, DEBUG=DEBUG)\n    mission_annotations = annotate_missions(game_state, missions)\n    missions, actions_by_units = make_unit_actions(game_state, missions, DEBUG=DEBUG)\n    movement_annotations = annotate_movements(game_state, actions_by_units)\n\n    print(\"actions_by_cities\", actions_by_cities)\n    print(\"actions_by_units\", actions_by_units)\n    print(\"mission_annotations\", mission_annotations)\n    print(\"movement_annotations\", movement_annotations)\n    actions = actions_by_cities + actions_by_units + mission_annotations + movement_annotations + state_annotations\n    return actions, game_state, missions\n\n\ndef agent(observation, configuration, DEBUG=False):\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    del configuration  # unused\n    global game_state, missions\n\n    if observation[\"step\"] == 0:\n        game_state = Game()\n        game_state._initialize(observation[\"updates\"])\n        game_state.player_id = observation.player\n        game_state._update(observation[\"updates\"][2:])\n        game_state.fix_iteration_order()\n    else:\n        # actually rebuilt and recomputed from scratch\n        game_state._update(observation[\"updates\"])\n\n    if not os.environ.get('GFOOTBALL_DATA_DIR', ''):  # on Kaggle compete, do not save items\n        str_step = str(observation[\"step\"]).zfill(3)\n        with open('snapshots\/observation-{}-{}.pkl'.format(str_step, game_state.player_id), 'wb') as handle:\n            pickle.dump(observation, handle, protocol=pickle.HIGHEST_PROTOCOL)\n        with open('snapshots\/game_state-{}-{}.pkl'.format(str_step, game_state.player_id), 'wb') as handle:\n            pickle.dump(game_state, handle, protocol=pickle.HIGHEST_PROTOCOL)\n        with open('snapshots\/missions-{}-{}.pkl'.format(str_step, game_state.player_id), 'wb') as handle:\n            pickle.dump(missions, handle, protocol=pickle.HIGHEST_PROTOCOL)\n\n    game_state.compute_start_time = time.time()\n    actions, game_state, missions = game_logic(game_state, missions)\n    return actions\n","8b6a9695":"%%writefile make_actions.py\n# functions executing the actions\n\nimport builtins as __builtin__\nfrom typing import Tuple, List\n\nfrom lux.game import Game, Mission, Missions\nfrom lux.game_objects import CityTile, Unit\nfrom lux.game_position import Position\nfrom lux.constants import Constants\nfrom lux.game_constants import GAME_CONSTANTS\n\nfrom heuristics import find_best_cluster\n\nDIRECTIONS = Constants.DIRECTIONS\n\n\ndef make_city_actions(game_state: Game, missions: Missions, DEBUG=False) -> List[str]:\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    player = game_state.player\n    missions.cleanup(player,\n                     game_state.player_city_tile_xy_set,\n                     game_state.opponent_city_tile_xy_set,\n                     game_state.convolved_collectable_tiles_xy_set)\n    game_state.repopulate_targets(missions)\n\n    units_cap = sum([len(x.citytiles) for x in player.cities.values()])\n    units_cnt = len(player.units)  # current number of units\n\n    actions: List[str] = []\n\n    def do_research(city_tile: CityTile):\n        action = city_tile.research()\n        game_state.player.research_points += 1\n        actions.append(action)\n\n    def build_workers(city_tile: CityTile):\n        nonlocal units_cnt\n        action = city_tile.build_worker()\n        actions.append(action)\n        units_cnt += 1\n\n    city_tiles: List[CityTile] = []\n    for city in player.cities.values():\n        for city_tile in city.citytiles:\n            city_tiles.append(city_tile)\n    if not city_tiles:\n        return []\n\n    city_tiles.sort(key=lambda city_tile:\n        (city_tile.pos.x*game_state.x_order_coefficient, city_tile.pos.y*game_state.y_order_coefficient))\n\n    for city_tile in city_tiles:\n        if not city_tile.can_act():\n            continue\n\n        unit_limit_exceeded = (units_cnt >= units_cap)\n\n        cluster_leader = game_state.xy_to_resource_group_id.find(tuple(city_tile.pos))\n        cluster_unit_limit_exceeded = \\\n            game_state.xy_to_resource_group_id.get_point(tuple(city_tile.pos)) <= len(game_state.resource_leader_to_locating_units[cluster_leader])\n        if cluster_unit_limit_exceeded:\n            print(\"unit_limit_exceeded\", city_tile.cityid, tuple(city_tile.pos))\n\n        if player.researched_uranium() and unit_limit_exceeded:\n            print(\"skip city\", city_tile.cityid, tuple(city_tile.pos))\n            continue\n\n        if not player.researched_uranium() and game_state.turns_to_night < 3:\n            print(\"research and dont build units at night\", tuple(city_tile.pos))\n            do_research(city_tile)\n            continue\n\n        nearest_resource_distance = game_state.distance_from_collectable_resource[city_tile.pos.y, city_tile.pos.x]\n        travel_range = game_state.turns_to_night \/\/ GAME_CONSTANTS[\"PARAMETERS\"][\"UNIT_ACTION_COOLDOWN\"][\"WORKER\"]\n        resource_in_travel_range = nearest_resource_distance < travel_range\n\n        if resource_in_travel_range and not unit_limit_exceeded and not cluster_unit_limit_exceeded:\n            print(\"build_worker\", city_tile.cityid, city_tile.pos.x, city_tile.pos.y, nearest_resource_distance, travel_range)\n            build_workers(city_tile)\n            continue\n\n        if not player.researched_uranium():\n            print(\"research\", tuple(city_tile.pos))\n            do_research(city_tile)\n            continue\n\n        # otherwise don't do anything\n\n    return actions\n\n\ndef make_unit_missions(game_state: Game, missions: Missions, DEBUG=False) -> Missions:\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    player = game_state.player\n    missions.cleanup(player,\n                     game_state.player_city_tile_xy_set,\n                     game_state.opponent_city_tile_xy_set,\n                     game_state.convolved_collectable_tiles_xy_set)\n\n    unit_ids_with_missions_assigned_this_turn = set()\n\n    player.units.sort(key=lambda unit:\n        (unit.pos.x*game_state.x_order_coefficient, unit.pos.y*game_state.y_order_coefficient, unit.encode_tuple_for_cmp()))\n\n    for unit in player.units:\n        # mission is planned regardless whether the unit can act\n        current_mission: Mission = missions[unit.id] if unit.id in missions else None\n        current_target_position = current_mission.target_position if current_mission else None\n\n        # avoid sharing the same target\n        game_state.repopulate_targets(missions)\n\n        # if the unit is waiting for dawn at the side of resource\n        stay_up_till_dawn = (unit.get_cargo_space_left() <= 4 and (not game_state.is_day_time or game_state.turn%40 == 0))\n        # if the unit is full and it is going to be day the next few days\n        # go to an empty tile and build a citytile\n        # print(unit.id, unit.get_cargo_space_left())\n        if unit.get_cargo_space_left() == 0 or stay_up_till_dawn:\n            nearest_position, distance_with_features = game_state.get_nearest_empty_tile_and_distance(unit.pos, current_target_position)\n            if stay_up_till_dawn or distance_with_features[0] * 2 <= game_state.turns_to_night - 2:\n                print(\"plan mission to build citytile\", unit.id, unit.pos, \"->\", nearest_position)\n                mission = Mission(unit.id, nearest_position, unit.build_city())\n                missions.add(mission)\n                continue\n\n        if unit.id in missions:\n            mission: Mission = missions[unit.id]\n            if mission.target_position == unit.pos:\n                # take action and not make missions if already at position\n                continue\n\n        if unit.id in missions:\n            # the mission will be recaluated if the unit fails to make a move after make_unit_actions\n            continue\n\n        best_position, best_cell_value = find_best_cluster(game_state, unit, DEBUG=DEBUG)\n        # [TODO] what if best_cell_value is zero\n        distance_from_best_position = game_state.retrieve_distance(unit.pos.x, unit.pos.y, best_position.x, best_position.y)\n        print(\"plan mission adaptative\", unit.id, unit.pos, \"->\", best_position)\n        mission = Mission(unit.id, best_position, None)\n        missions.add(mission)\n        unit_ids_with_missions_assigned_this_turn.add(unit.id)\n\n        # [TODO] when you can secure a city all the way to the end of time, do it\n\n        # [TODO] just let units die perhaps\n\n    return missions\n\n\ndef make_unit_actions(game_state: Game, missions: Missions, DEBUG=False) -> Tuple[Missions, List[str]]:\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    player, opponent = game_state.player, game_state.opponent\n    actions = []\n\n    units_with_mission_but_no_action = set(missions.keys())\n    prev_actions_len = -1\n\n    # repeat attempting movements for the units until no additional movements can be added\n    while prev_actions_len < len(actions):\n      prev_actions_len = len(actions)\n\n      for unit in player.units:\n        if not unit.can_act():\n            units_with_mission_but_no_action.discard(unit.id)\n            continue\n\n        # if there is no mission, continue\n        if unit.id not in missions:\n            units_with_mission_but_no_action.discard(unit.id)\n            continue\n\n        mission: Mission = missions[unit.id]\n        print(\"attempting action for\", unit.id, unit.pos, \"->\", mission.target_position)\n\n        # if the location is reached, take action\n        if unit.pos == mission.target_position:\n            units_with_mission_but_no_action.discard(unit.id)\n            print(\"location reached and make action\", unit.id, unit.pos)\n            action = mission.target_action\n\n            # do not build city at last light\n            if action and action[:5] == \"bcity\" and game_state.turn%40 == 30:\n                del missions[unit.id]\n                continue\n\n            if action:\n                actions.append(action)\n            del missions[unit.id]\n            continue\n\n        # attempt to move the unit\n        direction = attempt_direction_to(game_state, unit, mission.target_position)\n        if direction != \"c\":\n            units_with_mission_but_no_action.discard(unit.id)\n            action = unit.move(direction)\n            print(\"make move\", unit.id, unit.pos, direction, unit.pos.translate(direction, 1))\n            actions.append(action)\n            continue\n\n        # [TODO] make it possible for units to swap positions\n\n    # if the unit is not able to make an action, delete the mission\n    for unit_id in units_with_mission_but_no_action:\n        mission: Mission = missions[unit_id]\n        mission.delays += 1\n        if mission.delays >= 1:\n            del missions[unit_id]\n\n    return missions, actions\n\n\ndef attempt_direction_to(game_state: Game, unit: Unit, target_pos: Position) -> DIRECTIONS:\n\n    smallest_cost = [2,2,2,2]\n    closest_dir = DIRECTIONS.CENTER\n    closest_pos = unit.pos\n\n    for direction in game_state.dirs:\n        newpos = unit.pos.translate(direction, 1)\n\n        cost = [0,0,0,0]\n\n        # do not go out of map\n        if tuple(newpos) in game_state.xy_out_of_map:\n            continue\n\n        # discourage if new position is occupied, not your city tile and not your current position\n        if tuple(newpos) in game_state.occupied_xy_set:\n            if tuple(newpos) not in game_state.player_city_tile_xy_set:\n                if tuple(newpos) != tuple(unit.pos):\n                    cost[0] = 3\n\n        # discourage going into a city tile if you are carrying substantial wood\n        if tuple(newpos) in game_state.player_city_tile_xy_set and unit.cargo.wood >= 60:\n            cost[0] = 1\n\n        # path distance as main differentiator\n        path_dist = game_state.retrieve_distance(newpos.x, newpos.y, target_pos.x, target_pos.y)\n        cost[1] = path_dist\n\n        # manhattan distance to tie break\n        manhattan_dist = (newpos - target_pos)\n        cost[2] = manhattan_dist\n\n        # prefer to walk on tiles with resources\n        aux_cost = game_state.convolved_collectable_tiles_matrix[newpos.y, newpos.x]\n        cost[3] = -aux_cost\n\n        # if starting from the city, consider manhattan distance instead of path distance\n        if tuple(unit.pos) in game_state.player_city_tile_xy_set:\n            cost[1] = manhattan_dist\n\n        # update decision\n        if cost < smallest_cost:\n            smallest_cost = cost\n            closest_dir = direction\n            closest_pos = newpos\n\n    if closest_dir != DIRECTIONS.CENTER:\n        game_state.occupied_xy_set.discard(tuple(unit.pos))\n        if tuple(closest_pos) not in game_state.player_city_tile_xy_set:\n            game_state.occupied_xy_set.add(tuple(closest_pos))\n        unit.cooldown += 2\n\n    return closest_dir\n","6d7e4622":"%%writefile make_annotations.py\nimport time\nfrom itertools import chain\nfrom typing import List\n\nimport builtins as __builtin__\n\nfrom lux.game import Game, Mission, Missions, Player, Unit\nimport lux.annotate as annotate\n\n\ndef annotate_game_state(game_state: Game, DEBUG=False):\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    print(\"Turn number: \", game_state.turn)\n    print(\"Citytile count: \", game_state.player.city_tile_count)\n    print(\"Unit count: \", len(game_state.player.units))\n\n    if game_state.player_id == 1:\n        # reduce clutter for mirror matchup\n        return []\n\n    annotations = []\n\n    for city in chain(game_state.player.cities.values(), game_state.opponent.cities.values()):\n        for citytile in city.citytiles:\n            if city.night_fuel_duration >= game_state.night_turns_left:\n                annotation = annotate.circle(citytile.pos.x, citytile.pos.y)\n                annotations.append(annotation)\n            else:\n                annotation = annotate.text(citytile.pos.x, citytile.pos.y, str(city.night_fuel_duration), 50)\n                annotations.append(annotation)\n\n\n    for unit in chain(game_state.player.units, game_state.opponent.units):\n        if unit.cargo.get_shorthand():\n            annotation = annotate.text(unit.pos.x, unit.pos.y, unit.cargo.get_shorthand(), 50)\n            annotations.append(annotation)\n\n    # you can also read the pickled game_state and print its attributes\n    return annotations\n\n\ndef annotate_missions(game_state: Game, missions: Missions, DEBUG=False):\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    print(\"Missions\")\n    print(missions)\n    # you can also read the pickled missions and print its attributes\n\n    annotations: List[str] = []\n    player: Player = game_state.player\n\n    for unit_id, mission in missions.items():\n        mission: Mission = mission\n        unit: Unit = player.units_by_id[unit_id]\n\n        annotation = annotate.line(unit.pos.x, unit.pos.y, mission.target_position.x, mission.target_position.y)\n        annotations.append(annotation)\n\n        if mission.target_action and mission.target_action.split(\" \")[0] == \"bcity\":\n            annotation = annotate.circle(mission.target_position.x, mission.target_position.y)\n            annotations.append(annotation)\n        else:\n            annotation = annotate.x(mission.target_position.x, mission.target_position.y)\n            annotations.append(annotation)\n\n    annotation = annotate.sidetext(\"Unit Count: {}-{} Citytiles: {}-{} Groups: {}\/{} Runtime: {:.3f}\".format(\n        len(game_state.player.units), len(game_state.opponent.units),\n        len(game_state.player_city_tile_xy_set), len(game_state.opponent_city_tile_xy_set),\n        game_state.targeted_cluster_count, game_state.xy_to_resource_group_id.get_group_count(),\n        time.time() - game_state.compute_start_time))\n    annotations.append(annotation)\n\n    return annotations\n\n\ndef annotate_movements(game_state: Game, actions_by_units: List[str]):\n    annotations = []\n    dirs = game_state.dirs\n    d5 = game_state.dirs_dxdy\n\n    for action_by_units in actions_by_units:\n        if action_by_units[:2] != \"m \":\n            continue\n        unit_id, dir = action_by_units.split(\" \")[1:]\n        unit = game_state.player.units_by_id[unit_id]\n        x, y = unit.pos.x, unit.pos.y\n        dx, dy = d5[dirs.index(dir)]\n        annotation = annotate.line(x, y, x+dx, y+dy)\n        annotations.append(annotation)\n\n    return annotations\n","27eda8f6":"%%writefile heuristics.py\n# contains designed heuristics\n# which could be fine tuned\n\nimport numpy as np\nimport builtins as __builtin__\n\nfrom typing import List\nfrom lux import game\n\nfrom lux.game import Game, Unit\nfrom lux.game_map import Cell, RESOURCE_TYPES\nfrom lux.constants import Constants\nfrom lux.game_position import Position\nfrom lux.game_constants import GAME_CONSTANTS\n\n\ndef find_best_cluster(game_state: Game, unit: Unit, distance_multiplier = -0.5, DEBUG=False):\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    # passing game_state attributes to compute travel range\n    unit.compute_travel_range((game_state.turns_to_night, game_state.turns_to_dawn, game_state.is_day_time),)\n\n    # for debugging\n    score_matrix_wrt_pos = game_state.init_matrix()\n\n    # default response is not to move\n    best_position = unit.pos\n    best_cell_value = (0,0,0,0)\n\n    # only consider other cluster if the current cluster has more than one agent mining\n    consider_different_cluster = False\n    # must consider other cluster if the current cluster has more agent than tiles\n    consider_different_cluster_must = False\n\n    # calculate how resource tiles and how many units on the current cluster\n    current_leader = game_state.xy_to_resource_group_id.find(tuple(unit.pos))\n    units_mining_on_current_cluster = game_state.resource_leader_to_locating_units[current_leader] & game_state.resource_leader_to_targeting_units[current_leader]\n    if len(units_mining_on_current_cluster) >= 1:\n        consider_different_cluster = True\n    resource_size_of_current_cluster = game_state.xy_to_resource_group_id.get_point(current_leader)\n    if len(units_mining_on_current_cluster) >= resource_size_of_current_cluster:\n        consider_different_cluster_must = True\n\n    for y in game_state.y_iteration_order:\n        for x in game_state.x_iteration_order:\n\n            # what not to target\n            if (x,y) in game_state.targeted_xy_set:\n                continue\n            if (x,y) in game_state.targeted_for_building_xy_set:\n                continue\n            if (x,y) in game_state.opponent_city_tile_xy_set:\n                continue\n            if (x,y) in game_state.player_city_tile_xy_set:\n                continue\n\n            # cluster targeting logic\n            target_bonus = 1\n            target_leader = game_state.xy_to_resource_group_id.find((x,y))\n            if consider_different_cluster or consider_different_cluster_must:\n                # if the target is a cluster and not the current cluster\n                if target_leader and target_leader != current_leader:\n\n                    units_targeting_or_mining_on_target_cluster = \\\n                        game_state.resource_leader_to_locating_units[target_leader] | \\\n                        game_state.resource_leader_to_targeting_units[target_leader]\n\n                    # target bonus depends on how many resource tiles and how many units that are mining or targeting\n                    if len(units_targeting_or_mining_on_target_cluster) == 0:\n                        target_bonus = game_state.xy_to_resource_group_id.get_point(target_leader)\/\\\n                                       (1 + len(game_state.resource_leader_to_locating_units[target_leader] &\n                                                game_state.resource_leader_to_targeting_units[target_leader]))\n\n                    if consider_different_cluster_must:\n                        target_bonus = target_bonus * 100\n\n            elif target_leader == current_leader:\n                target_bonus = 2\n\n            # prefer empty tile because you can build afterwards quickly\n            empty_tile_bonus = 1\/(0.5+game_state.distance_from_buildable_tile[y,x])\n\n            # no empty tile preference if resource is not wood\n            for dx,dy in game_state.dirs_dxdy:\n                xx, yy = x+dx, y+dy\n                if (xx,yy) in game_state.wood_exist_xy_set:\n                    break\n            else:\n                empty_tile_bonus = 1\/(0.5+max(1,game_state.distance_from_buildable_tile[y,x]))\n\n            # scoring function\n            if game_state.convolved_collectable_tiles_matrix[y,x] > 0:\n                # using path distance\n                distance = game_state.retrieve_distance(unit.pos.x, unit.pos.y, x, y)\n                distance = max(0.5, distance)  # prevent zero error\n\n                # estimate target score\n                if distance <= unit.travel_range:\n                    cell_value = (target_bonus,\n                                  empty_tile_bonus * game_state.convolved_collectable_tiles_matrix[y,x] * distance ** distance_multiplier,\n                                  game_state.distance_from_edge[y,x],\n                                  -game_state.distance_from_opponent_assets[y,x])\n                    score_matrix_wrt_pos[y,x] = cell_value[0]*1000 + cell_value[1]*100 + cell_value[2]*10 + cell_value[3]\n\n                    # update best target\n                    if cell_value > best_cell_value:\n                        best_cell_value = cell_value\n                        best_position = Position(x,y)\n\n    # for debugging\n    game_state.heuristics_from_positions[tuple(unit.pos)] = score_matrix_wrt_pos\n\n    return best_position, best_cell_value\n","08d95227":"%%writefile main.py\nfrom typing import Dict\nimport sys\nfrom agent import agent\nif __name__ == \"__main__\":\n\n    def read_input():\n        \"\"\"\n        Reads input from stdin\n        \"\"\"\n        try:\n            return input()\n        except EOFError as eof:\n            raise SystemExit(eof)\n    step = 0\n    class Observation(Dict[str, any]):\n        def __init__(self, player=0) -> None:\n            self.player = player\n            # self.updates = []\n            # self.step = 0\n    observation = Observation()\n    observation[\"updates\"] = []\n    observation[\"step\"] = 0\n    player_id = 0\n    while True:\n        inputs = read_input()\n        observation[\"updates\"].append(inputs)\n\n        if step == 0:\n            player_id = int(observation[\"updates\"][0])\n            observation.player = player_id\n        if inputs == \"D_DONE\":\n            actions = agent(observation, None)\n            observation[\"updates\"] = []\n            step += 1\n            observation[\"step\"] = step\n            print(\",\".join(actions))\n            print(\"D_FINISH\")\n","348f15f7":"%%writefile lux\/game.py\nimport time\nimport heapq\nfrom collections import defaultdict, deque\nfrom typing import DefaultDict, Dict, List, Tuple, Set\n\nimport numpy as np\n\nfrom .constants import Constants\nfrom .game_map import GameMap, RESOURCE_TYPES\nfrom .game_objects import Player, Unit, City\nfrom .game_position import Position\nfrom .game_constants import GAME_CONSTANTS\n\nINPUT_CONSTANTS = Constants.INPUT_CONSTANTS\n\n\nclass Mission:\n    def __init__(self, unit_id: str, target_position: Position, target_action: str = \"\"):\n        self.target_position: Position = target_position\n        self.target_action: str = target_action\n        self.unit_id: str = unit_id\n        self.delays: int = 0\n        # [TODO] some expiry date for each mission\n\n    def __str__(self):\n        return \" \".join([str(self.target_position), self.target_action])\n\n\nclass Missions(defaultdict):\n    def __init__(self):\n        self: DefaultDict[str, Mission] = defaultdict(Mission)\n\n    def add(self, mission: Mission):\n        self[mission.unit_id] = mission\n\n    def cleanup(self, player: Player,\n                player_city_tile_xy_set: Set[Tuple],\n                opponent_city_tile_xy_set: Set[Tuple],\n                convolved_collectable_tiles_xy_set: Set[Tuple]):\n        # probably should be a standalone function instead of a method\n\n        for unit_id in list(self.keys()):\n            mission: Mission = self[unit_id]\n\n            # if dead, delete from list\n            if unit_id not in player.units_by_id:\n                del self[unit_id]\n                continue\n\n            unit: Unit = player.units_by_id[unit_id]\n            # if you want to build city without resource, delete from list\n            if mission.target_action and mission.target_action[:5] == \"bcity\":\n                if unit.cargo == 0:\n                    del self[unit_id]\n                    continue\n\n            # if opponent has already built a base, reconsider your mission\n            if tuple(mission.target_position) in opponent_city_tile_xy_set:\n                del self[unit_id]\n                continue\n\n            # if you are in a base, reconsider your mission\n            if tuple(unit.pos) in player_city_tile_xy_set:\n                del self[unit_id]\n                continue\n\n            # if your target no longer have resource, reconsider your mission\n            if tuple(mission.target_position) not in convolved_collectable_tiles_xy_set:\n                del self[unit_id]\n                continue\n\n    def __str__(self):\n        return \" \".join([unit_id + \" \" + str(x) for unit_id,x in self.items()])\n\n    def get_targets(self):\n        return [mission.target_position for unit_id, mission in self.items()]\n\n    def get_targets_and_actions(self):\n        return [(mission.target_position, mission.target_action) for unit_id, mission in self.items()]\n\n\nclass DisjointSet:\n    def __init__(self):\n        self.parent = {}\n        self.sizes = defaultdict(int)\n        self.points = defaultdict(int)  # tracks resource pile size\n        self.num_sets = 0\n\n    def find(self, a, point=0):\n        if a not in self.parent:\n            self.parent[a] = a\n            self.sizes[a] += 1\n            self.points[a] += point\n            self.num_sets += 1\n        acopy = a\n        while a != self.parent[a]:\n            a = self.parent[a]\n        while acopy != a:\n            self.parent[acopy], acopy = a, self.parent[acopy]\n        return a\n\n    def union(self, a, b):\n        a, b = self.find(a), self.find(b)\n        if a != b:\n            if self.sizes[a] < self.sizes[b]:\n                a, b = b, a\n\n            self.num_sets -= 1\n            self.parent[b] = a\n            self.sizes[a] += self.sizes[b]\n            self.points[a] += self.points[b]\n\n    def get_size(self, a):\n        return self.sizes[self.find(a)]\n\n    def get_point(self, a):\n        return self.points[self.find(a)]\n\n    def get_groups(self):\n        groups = defaultdict(list)\n        for element in self.parent:\n            leader = self.find(element)\n            if leader:\n                groups[leader].append(element)\n        return groups\n\n    def get_group_count(self):\n        return sum(self.points[leader] > 1 for leader in self.get_groups().keys())\n\n\nclass Game:\n\n    # counted from the time after the objects are saved to disk\n    compute_start_time = -1\n\n    def _initialize(self, messages):\n        \"\"\"\n        initialize state\n        \"\"\"\n        self.player_id: int = int(messages[0])\n        self.turn: int = -1\n        # get some other necessary initial input\n        mapInfo = messages[1].split(\" \")\n        self.map_width: int = int(mapInfo[0])\n        self.map_height: int = int(mapInfo[1])\n        self.map: GameMap = GameMap(self.map_width, self.map_height)\n        self.players: List[Player] = [Player(0), Player(1)]\n\n        self.x_iteration_order = list(range(self.map_width))\n        self.y_iteration_order = list(range(self.map_height))\n        self.dirs: List = [\n            Constants.DIRECTIONS.NORTH,\n            Constants.DIRECTIONS.EAST,\n            Constants.DIRECTIONS.SOUTH,\n            Constants.DIRECTIONS.WEST,\n            Constants.DIRECTIONS.CENTER\n        ]\n        self.dirs_dxdy: List = [(0,-1), (1,0), (0,1), (-1,0), (0,0)]\n\n\n    def fix_iteration_order(self):\n        '''\n        Fix iteration order at initisation to allow moves to be symmetric\n        '''\n        assert len(self.player.cities) == 1\n        assert len(self.opponent.cities) == 1\n        px,py = tuple(list(self.player.cities.values())[0].citytiles[0].pos)\n        ox,oy = tuple(list(self.opponent.cities.values())[0].citytiles[0].pos)\n\n        flipping = False\n        self.y_order_coefficient = 1\n        self.x_order_coefficient = 1\n\n        if px == ox:\n            if py < oy:\n                flipping = True\n                self.y_iteration_order = self.y_iteration_order[::-1]\n                self.y_order_coefficient = -1\n                idx1, idx2 = 0,2\n        elif py == oy:\n            if px < ox:\n                flipping = True\n                self.x_iteration_order = self.x_iteration_order[::-1]\n                self.x_order_coefficient = -1\n                idx1, idx2 = 1,3\n        else:\n            assert False\n\n        if flipping:\n            self.dirs[idx1], self.dirs[idx2] = self.dirs[idx2], self.dirs[idx1]\n            self.dirs_dxdy[idx1], self.dirs_dxdy[idx2] = self.dirs_dxdy[idx2], self.dirs_dxdy[idx1]\n\n\n    def _end_turn(self):\n        print(\"D_FINISH\")\n\n\n    def _reset_player_states(self):\n        self.players[0].units = []\n        self.players[0].cities = {}\n        self.players[0].city_tile_count = 0\n        self.players[1].units = []\n        self.players[1].cities = {}\n        self.players[1].city_tile_count = 0\n\n        self.player: Player = self.players[self.player_id]\n        self.opponent: Player = self.players[1 - self.player_id]\n\n\n    def _update(self, messages):\n        \"\"\"\n        update state\n        \"\"\"\n        self.map = GameMap(self.map_width, self.map_height)\n        self.turn += 1\n        self._reset_player_states()\n\n        for update in messages:\n            if update == \"D_DONE\":\n                break\n            strs = update.split(\" \")\n            input_identifier = strs[0]\n\n            if input_identifier == INPUT_CONSTANTS.RESEARCH_POINTS:\n                team = int(strs[1])   # probably player_id\n                self.players[team].research_points = int(strs[2])\n\n            elif input_identifier == INPUT_CONSTANTS.RESOURCES:\n                r_type = strs[1]\n                x = int(strs[2])\n                y = int(strs[3])\n                amt = int(float(strs[4]))\n                self.map._setResource(r_type, x, y, amt)\n\n            elif input_identifier == INPUT_CONSTANTS.UNITS:\n                unittype = int(strs[1])\n                team = int(strs[2])\n                unitid = strs[3]\n                x = int(strs[4])\n                y = int(strs[5])\n                cooldown = float(strs[6])\n                wood = int(strs[7])\n                coal = int(strs[8])\n                uranium = int(strs[9])\n                unit = Unit(team, unittype, unitid, x, y, cooldown, wood, coal, uranium)\n                self.players[team].units.append(unit)\n                self.map.get_cell(x, y).unit = unit\n\n            elif input_identifier == INPUT_CONSTANTS.CITY:\n                team = int(strs[1])\n                cityid = strs[2]\n                fuel = float(strs[3])\n                lightupkeep = float(strs[4])\n                self.players[team].cities[cityid] = City(team, cityid, fuel, lightupkeep)\n\n            elif input_identifier == INPUT_CONSTANTS.CITY_TILES:\n                team = int(strs[1])\n                cityid = strs[2]\n                x = int(strs[3])\n                y = int(strs[4])\n                cooldown = float(strs[5])\n                city = self.players[team].cities[cityid]\n                citytile = city._add_city_tile(x, y, cooldown)\n                self.map.get_cell(x, y).citytile = citytile\n                self.players[team].city_tile_count += 1\n\n            elif input_identifier == INPUT_CONSTANTS.ROADS:\n                x = int(strs[1])\n                y = int(strs[2])\n                road = float(strs[3])\n                self.map.get_cell(x, y).road = road\n\n        # create indexes to refer to unit by id\n        self.player.make_index_units_by_id()\n        self.opponent.make_index_units_by_id()\n\n\n    def calculate_features(self, missions: Missions):\n\n        # load constants into object\n        self.wood_fuel_rate = GAME_CONSTANTS[\"PARAMETERS\"][\"RESOURCE_TO_FUEL_RATE\"][RESOURCE_TYPES.WOOD.upper()]\n        self.wood_collection_rate = GAME_CONSTANTS[\"PARAMETERS\"][\"WORKER_COLLECTION_RATE\"][RESOURCE_TYPES.WOOD.upper()]\n        self.coal_fuel_rate = GAME_CONSTANTS[\"PARAMETERS\"][\"RESOURCE_TO_FUEL_RATE\"][RESOURCE_TYPES.COAL.upper()]\n        self.coal_collection_rate = GAME_CONSTANTS[\"PARAMETERS\"][\"WORKER_COLLECTION_RATE\"][RESOURCE_TYPES.COAL.upper()]\n        self.uranium_fuel_rate = GAME_CONSTANTS[\"PARAMETERS\"][\"RESOURCE_TO_FUEL_RATE\"][RESOURCE_TYPES.URANIUM.upper()]\n        self.uranium_collection_rate = GAME_CONSTANTS[\"PARAMETERS\"][\"WORKER_COLLECTION_RATE\"][RESOURCE_TYPES.URANIUM.upper()]\n\n        # [TODO] Use constants here\n        self.night_turns_left = (360 - self.turn)\/\/40 * 10 + min(10, (360 - self.turn)%40)\n\n        self.turns_to_night = (30 - self.turn)%40\n        self.turns_to_night = 0 if self.turns_to_night > 30 else self.turns_to_night\n\n        self.turns_to_dawn = (40 - self.turn%40)\n        self.turns_to_dawn = 0 if self.turns_to_dawn > 10 else self.turns_to_dawn\n\n        self.is_day_time = self.turns_to_dawn == 0\n\n        # update matrices\n        self.calculate_matrix()\n        self.calculate_resource_matrix()\n        self.calculate_resource_groups()\n        self.calculate_distance_matrix()\n\n        self.repopulate_targets(missions)\n\n        self.heuristics_from_positions: Dict = dict()\n\n\n    def init_matrix(self, default_value=0):\n        # [TODO] check if order of map_height and map_width is correct\n        return np.full((self.map_height,self.map_width), default_value)\n\n\n    def calculate_matrix(self):\n\n        # amount of resources left on the tile\n        self.wood_amount_matrix = self.init_matrix()\n        self.coal_amount_matrix = self.init_matrix()\n        self.uranium_amount_matrix = self.init_matrix()\n        self.all_resource_amount_matrix = self.init_matrix()\n\n        self.player_city_tile_matrix = self.init_matrix()\n        self.opponent_city_tile_matrix = self.init_matrix()\n\n        self.player_units_matrix = self.init_matrix()\n        self.opponent_units_matrix = self.init_matrix()\n\n        # if there is nothing on tile\n        self.empty_tile_matrix = self.init_matrix()\n\n        # if you can build on tile (a unit may be on the tile)\n        self.buildable_tile_matrix = self.init_matrix()\n\n        for y in self.y_iteration_order:\n            for x in self.x_iteration_order:\n                cell = self.map.get_cell(x, y)\n\n                is_empty = True\n                is_buildable = True\n\n                if cell.unit:\n                    is_empty = False\n                    if cell.unit.team == self.player_id:\n                        self.player_units_matrix[y,x] += 1\n                    else:   # unit belongs to opponent\n                        self.opponent_units_matrix[y,x] += 1\n\n                if cell.has_resource():\n                    is_empty = False\n                    is_buildable = False\n                    if cell.resource.type == RESOURCE_TYPES.WOOD:\n                        self.wood_amount_matrix[y,x] += cell.resource.amount\n                    if cell.resource.type == RESOURCE_TYPES.COAL:\n                        self.coal_amount_matrix[y,x] += cell.resource.amount\n                    if cell.resource.type == RESOURCE_TYPES.URANIUM:\n                        self.uranium_amount_matrix[y,x] += cell.resource.amount\n                    self.all_resource_amount_matrix[y,x] += cell.resource.amount\n\n                elif cell.citytile:\n                    is_empty = False\n                    is_buildable = False\n                    if cell.citytile.team == self.player_id:\n                        self.player_city_tile_matrix[y,x] += 1\n                    else:   # city tile belongs to opponent\n                        self.opponent_city_tile_matrix[y,x] += 1\n\n                if is_empty:\n                    self.empty_tile_matrix[y,x] += 1\n\n                if is_buildable:\n                    self.buildable_tile_matrix[y,x] += 1\n\n        # binary matrices\n        self.wood_exist_matrix = (self.wood_amount_matrix > 0).astype(int)\n        self.coal_exist_matrix = (self.coal_amount_matrix > 0).astype(int)\n        self.uranium_exist_matrix = (self.uranium_amount_matrix > 0).astype(int)\n        self.all_resource_exist_matrix = (self.all_resource_amount_matrix > 0).astype(int)\n\n        # positive if on empty cell and beside the resource\n        self.wood_side_matrix = self.convolve(self.wood_exist_matrix) * self.empty_tile_matrix\n        self.coal_side_matrix = self.convolve(self.coal_exist_matrix) * self.empty_tile_matrix\n        self.uranium_side_matrix = self.convolve(self.uranium_exist_matrix) * self.empty_tile_matrix\n\n        self.convert_into_sets()\n\n\n    def populate_set(self, matrix, set_object):\n        # modifies the set_object in place and add nonzero items in the matrix\n        for y in self.y_iteration_order:\n            for x in self.x_iteration_order:\n                if matrix[y,x] > 0:\n                    set_object.add((x,y))\n\n\n    def convert_into_sets(self):\n        self.wood_exist_xy_set = set()\n        self.coal_exist_xy_set = set()\n        self.uranium_exist_xy_set = set()\n        self.player_city_tile_xy_set = set()\n        self.opponent_city_tile_xy_set = set()\n        self.player_units_xy_set = set()\n        self.opponent_units_xy_set = set()\n        self.empty_tile_xy_set = set()\n        self.buildable_tile_xy_set = set()\n\n        for set_object, matrix in [\n            [self.wood_exist_xy_set,            self.wood_exist_matrix],\n            [self.coal_exist_xy_set,            self.coal_exist_matrix],\n            [self.uranium_exist_xy_set,         self.uranium_exist_matrix],\n            [self.player_city_tile_xy_set,      self.player_city_tile_matrix],\n            [self.opponent_city_tile_xy_set,    self.opponent_city_tile_matrix],\n            [self.player_units_xy_set,          self.player_units_matrix],\n            [self.opponent_units_xy_set,        self.opponent_units_matrix],\n            [self.empty_tile_xy_set,            self.empty_tile_matrix],\n            [self.buildable_tile_xy_set,        self.buildable_tile_matrix]]:\n\n            self.populate_set(matrix, set_object)\n\n        self.xy_out_of_map: Set = set()\n        for y in [-1, self.map_height]:\n            for x in range(self.map_width):\n                self.xy_out_of_map.add((x,y))\n        for y in range(self.map_height):\n            for x in [-1, self.map_width]:\n                self.xy_out_of_map.add((x,y))\n\n        # used for distance calculation\n        # out of map - yes\n        # occupied by enemy units or city - yes\n        # occupied by self unit not in city - yes\n        # occupied by self city - no (even if there are units)\n        self.occupied_xy_set = (self.player_units_xy_set | self.opponent_units_xy_set | \\\n                                self.opponent_city_tile_xy_set | self.xy_out_of_map) \\\n                                - self.player_city_tile_xy_set\n\n        for unit in self.opponent.units:\n            if unit.can_act() and unit.get_cargo_space_left() > 4:\n                # expect opponent unit to move and not occupy the space\n                self.occupied_xy_set.discard(tuple(unit.pos))\n\n    def calculate_distance_matrix(self, blockade_multiplier_value=100):\n        self.distance_from_edge = self.init_matrix(self.map_height + self.map_width)\n        for y in range(self.map_height):\n            y_distance_from_edge = min(y, self.map_height-y-1)\n            for x in range(self.map_width):\n                x_distance_from_edge = min(x, self.map_height-x-1)\n                self.distance_from_edge[y,x] = y_distance_from_edge + x_distance_from_edge\n\n        def calculate_distance_from_set(relevant_set):\n            visited = set()\n            matrix = self.init_matrix(default_value=-1)\n            for y in self.y_iteration_order:\n                for x in self.x_iteration_order:\n                    if (x,y) in relevant_set:\n                        visited.add((x,y))\n                        matrix[y,x] = 0\n\n            queue = deque(list(visited))\n            while queue:\n                x,y = queue.popleft()\n                for dx,dy in [(0,1), (1,0), (0,-1), (-1,0)]:\n                    xx, yy = x+dx, y+dy\n                    if (xx,yy) in visited:\n                        continue\n                    if 0 <= xx < self.map_width and 0 <= yy < self.map_height:\n                        matrix[yy,xx] = matrix[y,x] + 1\n                        queue.append((xx,yy))\n                        visited.add((xx,yy))\n            return matrix\n\n        # calculate distance from resource (with fulfilled research requirements)\n        self.distance_from_collectable_resource = calculate_distance_from_set(self.collectable_tiles_xy_set)\n\n        # calculate distance from city or tiles\n        self.distance_from_player_assets = calculate_distance_from_set(self.player_units_xy_set | self.player_city_tile_xy_set)\n        self.distance_from_opponent_assets = calculate_distance_from_set(self.opponent_units_xy_set | self.opponent_city_tile_xy_set)\n\n        self.distance_from_buildable_tile = calculate_distance_from_set(self.buildable_tile_xy_set)\n\n        # calculating distances from every unit positions and its adjacent positions\n        # avoid blocked places as much as possible\n        self.positions_to_calculate_distances_from = set()\n\n        for unit in self.player.units:\n            x,y = tuple(unit.pos)\n            self.positions_to_calculate_distances_from.add((x,y),)\n            if unit.can_act():\n                self.positions_to_calculate_distances_from.add((x+1,y),)\n                self.positions_to_calculate_distances_from.add((x-1,y),)\n                self.positions_to_calculate_distances_from.add((x,y+1),)\n                self.positions_to_calculate_distances_from.add((x,y-1),)\n\n        self.distance_matrix = np.full((self.map_height,self.map_width,self.map_height,self.map_width), 1001)\n\n        for sy in range(self.map_height):\n            for sx in range(self.map_width):\n                if (sx,sy) not in self.positions_to_calculate_distances_from:\n                    continue\n                blockade_multiplier_value_for_syx = blockade_multiplier_value\n                if (sx,sy) in self.player_city_tile_xy_set:\n                    blockade_multiplier_value_for_syx = 2\n\n                start_pos = (sx,sy)\n                xy_processed = set()\n\n                d4 = [(1,0),(0,1),(-1,0),(0,-1)]\n                heap = [(0, start_pos),]\n                while heap:\n                    curdist, (x,y) = heapq.heappop(heap)\n                    if (x,y) in xy_processed:\n                        continue\n                    xy_processed.add((x,y),)\n                    self.distance_matrix[sy,sx,y,x] = curdist\n\n                    for dx,dy in d4:\n                        xx,yy = x+dx,y+dy\n                        if not (0 <= xx < self.map_width and 0 <= yy < self.map_height):\n                            continue\n                        if (xx,yy) in xy_processed:\n                            continue\n\n                        edge_length = 1\n                        if (xx,yy) in self.occupied_xy_set:\n                            edge_length = blockade_multiplier_value_for_syx\n                        if (xx,yy) in self.player_city_tile_xy_set:\n                            edge_length = blockade_multiplier_value_for_syx * 2\n\n                        heapq.heappush(heap, (curdist + edge_length, (xx,yy)))\n\n\n    def retrieve_distance(self, sx, sy, ex, ey):\n        return self.distance_matrix[sy,sx,ey,ex]\n\n\n    def convolve(self, matrix):\n        # each worker gets resources from (up to) five tiles\n        new_matrix = matrix.copy()\n        new_matrix[:-1,:] += matrix[1:,:]\n        new_matrix[:,:-1] += matrix[:,1:]\n        new_matrix[1:,:] += matrix[:-1,:]\n        new_matrix[:,1:] += matrix[:,:-1]\n        return new_matrix\n\n\n    def calculate_resource_matrix(self):\n        # calculate value of the resource considering the reasearch level\n        self.collectable_tiles_matrix = self.wood_exist_matrix\n\n        if self.player.researched_coal():\n            self.collectable_tiles_matrix += self.coal_exist_matrix\n\n        if self.player.researched_uranium():\n            self.collectable_tiles_matrix += self.uranium_exist_matrix\n\n        # adjacent cells collect from the cell as well\n        self.convolved_collectable_tiles_matrix = self.convolve(self.collectable_tiles_matrix)\n\n        self.collectable_tiles_xy_set = set()  # exclude adjacent\n        self.populate_set(self.collectable_tiles_matrix, self.collectable_tiles_xy_set)\n        self.convolved_collectable_tiles_xy_set = set()  # include adjacent\n        self.populate_set(self.convolved_collectable_tiles_matrix, self.convolved_collectable_tiles_xy_set)\n\n\n    def calculate_resource_groups(self):\n        # compute join the resource cluster and calculate the amount of resource\n        self.xy_to_resource_group_id: DisjointSet = DisjointSet()\n        for y in self.y_iteration_order:\n            for x in self.x_iteration_order:\n                if (x,y) in self.collectable_tiles_xy_set:\n                    if (x,y) in self.wood_exist_xy_set or (x,y) in self.uranium_exist_xy_set:\n                        self.xy_to_resource_group_id.find((x,y), point=5)\n                    else:\n                        self.xy_to_resource_group_id.find((x,y), point=1)\n\n        for y in self.y_iteration_order:\n            for x in self.x_iteration_order:\n                if (x,y) in self.collectable_tiles_xy_set:\n                    for dy,dx in [(1,0),(0,1),(-1,0),(0,-1)]:\n                        xx, yy = x+dx, y+dy\n                        if 0 <= yy < self.map_height and 0 <= xx < self.map_width:\n                            self.xy_to_resource_group_id.union((x,y), (xx,yy))\n\n\n    def repopulate_targets(self, missions: Missions):\n        # with missions, populate the following objects for use\n        # probably these attributes belong to missions, but left it here to avoid circular imports\n        pos_list = missions.get_targets()\n        self.targeted_leaders: Set = set(self.xy_to_resource_group_id.find(tuple(pos)) for pos in pos_list)\n        self.targeted_cluster_count = sum(self.xy_to_resource_group_id.get_point((x,y)) > 0 for x,y in self.targeted_leaders)\n        self.targeted_xy_set: Set = set(tuple(pos) for pos in pos_list) - self.player_city_tile_xy_set\n\n        pos_and_action_list = missions.get_targets_and_actions()\n        self.targeted_for_building_xy_set: Set = \\\n            set(tuple(pos) for pos,action in pos_and_action_list if action and action[:5] == \"bcity\") - self.player_city_tile_xy_set\n\n        self.resource_leader_to_locating_units: DefaultDict[Tuple, Set[str]] = defaultdict(set)\n        for unit_id in self.player.units_by_id:\n            unit: Unit = self.player.units_by_id[unit_id]\n            current_position = tuple(unit.pos)\n            leader = self.xy_to_resource_group_id.find(current_position)\n            if leader:\n                self.resource_leader_to_locating_units[leader].add(unit_id)\n\n        self.resource_leader_to_targeting_units: DefaultDict[Tuple, Set[str]] = defaultdict(set)\n        for unit_id in missions:\n            mission: Mission = missions[unit_id]\n            target_position = tuple(mission.target_position)\n            leader = self.xy_to_resource_group_id.find(target_position)\n            if leader:\n                self.resource_leader_to_targeting_units[leader].add(unit_id)\n\n\n    def get_nearest_empty_tile_and_distance(self, current_position: Position, current_target: Position=None) -> Tuple[Position, int]:\n        best_distance_with_features = (10**9+7,0,0)\n        nearest_position: Position = current_position\n\n        if self.all_resource_amount_matrix[current_position.y, current_position.x] == 0:\n            if tuple(current_position) not in self.player_city_tile_xy_set:\n                best_distance_with_features = (0,0,0)\n                return nearest_position, best_distance_with_features\n\n        for y in self.y_iteration_order:\n            for x in self.x_iteration_order:\n                if (x,y) not in self.buildable_tile_xy_set:\n                    continue\n\n                if (x,y) in self.targeted_for_building_xy_set:\n                    # we allow units to build at a tile that is targeted but not for building\n                    if current_target and (x,y) != tuple(current_target):\n                        continue\n\n                # only build beside a collectable resource\n                if self.distance_from_collectable_resource[y,x] != 1:\n                    continue\n\n                position = Position(x, y)\n                distance = self.retrieve_distance(current_position.x, current_position.y, position.x, position.y)\n\n                # among tied distances we want to pick a better location\n                distance_with_features = (distance,\n                                          -self.distance_from_edge[y,x],\n                                          self.distance_from_opponent_assets[y,x])\n\n                # update best location\n                if distance_with_features < best_distance_with_features:\n                    best_distance_with_features = distance_with_features\n                    nearest_position = position\n\n        return nearest_position, best_distance_with_features\n","dfb46e74":"%%writefile lux\/game_map.py\nimport math, random\nfrom typing import List, Set, Tuple\n\nfrom .constants import Constants\nfrom .game_objects import CityTile, Unit\nfrom .game_position import Position\n\nRESOURCE_TYPES = Constants.RESOURCE_TYPES\n\n\nclass Resource:\n    def __init__(self, r_type: str, amount: int):\n        self.type = r_type\n        self.amount = amount\n\n\nclass Cell:\n    def __init__(self, x, y):\n        self.pos = Position(x, y)\n        self.resource: Resource = None\n        self.citytile: CityTile = None\n        self.unit: Unit = None\n        self.road = 0\n\n    def has_resource(self):\n        return self.resource is not None and self.resource.amount > 0\n\n\nclass GameMap:\n    def __init__(self, width, height):\n        self.height = height\n        self.width = width\n        self.map: List[List[Cell]] = [None] * height\n        for y in range(0, self.height):\n            self.map[y] = [None] * width\n            for x in range(0, self.width):\n                self.map[y][x] = Cell(x, y)\n\n    def get_cell_by_pos(self, pos) -> Cell:\n        return self.map[pos.y][pos.x]\n\n    def get_cell(self, x, y) -> Cell:\n        return self.map[y][x]\n\n    def _setResource(self, r_type, x, y, amount):\n        \"\"\"\n        do not use this function, this is for internal tracking of state\n        \"\"\"\n        cell = self.get_cell(x, y)\n        cell.resource = Resource(r_type, amount)\n","0df08cd0":"%%writefile lux\/game_objects.py\nfrom lux import annotate\nimport random\nfrom typing import Dict, List\n\nfrom .constants import Constants\nfrom .game_position import Position\nfrom .game_constants import GAME_CONSTANTS\n\nUNIT_TYPES = Constants.UNIT_TYPES\nDIRECTIONS = Constants.DIRECTIONS\n\nclass Player:\n    def __init__(self, team):\n        self.team = team\n        self.research_points = 0\n        self.units: list[Unit] = []\n        self.cities: Dict[str, City] = {}\n        self.city_tile_count = 0\n\n        self.units_by_id: Dict[str, Unit] = {}\n\n    def researched_coal(self) -> bool:\n        return self.research_points >= GAME_CONSTANTS[\"PARAMETERS\"][\"RESEARCH_REQUIREMENTS\"][\"COAL\"]\n\n    def researched_uranium(self) -> bool:\n        return self.research_points > GAME_CONSTANTS[\"PARAMETERS\"][\"RESEARCH_REQUIREMENTS\"][\"URANIUM\"]\n\n    def make_index_units_by_id(self):\n        self.units_by_id: Dict[str, Unit] = {}\n        for unit in self.units:\n            self.units_by_id[unit.id] = unit\n\n\nclass City:\n    def __init__(self, teamid, cityid, fuel, light_upkeep):\n        self.cityid = cityid\n        self.team = teamid\n        self.fuel = fuel\n        self.citytiles: list[CityTile] = []\n        self.light_upkeep = light_upkeep\n        self.night_fuel_duration = int(self.fuel \/\/ self.light_upkeep)\n\n    def _add_city_tile(self, x, y, cooldown):\n        ct = CityTile(self.team, self.cityid, x, y, cooldown)\n        self.citytiles.append(ct)\n        return ct\n\n    def get_light_upkeep(self):\n        return self.light_upkeep\n\n\nclass CityTile:\n    def __init__(self, teamid, cityid, x, y, cooldown):\n        self.cityid = cityid\n        self.team = teamid\n        self.pos = Position(x, y)\n        self.cooldown = cooldown\n\n    def can_act(self) -> bool:\n        \"\"\"\n        Whether or not this unit can research or build\n        \"\"\"\n        return self.cooldown < 1\n\n    def research(self) -> str:\n        \"\"\"\n        returns command to ask this tile to research this turn\n        \"\"\"\n        return \"r {} {}\".format(self.pos.x, self.pos.y)\n\n    def build_worker(self) -> str:\n        \"\"\"\n        returns command to ask this tile to build a worker this turn\n        \"\"\"\n        return \"bw {} {}\".format(self.pos.x, self.pos.y)\n\n    def build_cart(self) -> str:\n        \"\"\"\n        returns command to ask this tile to build a cart this turn\n        \"\"\"\n        return \"bc {} {}\".format(self.pos.x, self.pos.y)\n\n\nclass Cargo:\n    def __init__(self):\n        self.wood: int = 0\n        self.coal: int = 0\n        self.uranium: int = 0\n\n    def __str__(self) -> str:\n        return f\"Cargo | Wood: {self.wood}, Coal: {self.coal}, Uranium: {self.uranium}\"\n\n    def get_shorthand(self) -> str:\n        total_resources = self.wood + self.coal + self.uranium\n        if total_resources >= 100:\n            total_resources_string = \"F\"\n        else:\n            total_resources_string = str(total_resources)\n\n        if self.wood > total_resources\/\/2:\n            return f\"{total_resources_string}W\"\n        if self.coal > total_resources\/\/2:\n            return f\"{total_resources_string}C\"\n        if self.uranium > total_resources\/\/2:\n            return f\"{total_resources_string}U\"\n        if total_resources:\n            return f\"{total_resources_string}\"\n        return \"\"\n\n\nclass Unit:\n    def __init__(self, teamid, u_type, unitid, x, y, cooldown, wood, coal, uranium):\n        self.pos = Position(x, y)\n        self.team = teamid\n        self.id = unitid\n        self.type = u_type\n        self.cooldown = cooldown\n        self.cargo = Cargo()\n        self.cargo.wood = wood\n        self.cargo.coal = coal\n        self.cargo.uranium = uranium\n        self.compute_travel_range()\n\n    def is_worker(self) -> bool:\n        return self.type == UNIT_TYPES.WORKER\n\n    def is_cart(self) -> bool:\n        return self.type == UNIT_TYPES.CART\n\n    def get_cargo_space_left(self):\n        \"\"\"\n        get cargo space left in this unit\n        \"\"\"\n        spaceused = self.cargo.wood + self.cargo.coal + self.cargo.uranium\n        if self.type == UNIT_TYPES.WORKER:\n            return GAME_CONSTANTS[\"PARAMETERS\"][\"RESOURCE_CAPACITY\"][\"WORKER\"] - spaceused\n        else:\n            return GAME_CONSTANTS[\"PARAMETERS\"][\"RESOURCE_CAPACITY\"][\"CART\"] - spaceused\n\n    def can_build(self, game_map) -> bool:\n        \"\"\"\n        whether or not the unit can build where it is right now\n        \"\"\"\n        cell = game_map.get_cell_by_pos(self.pos)\n        if not cell.has_resource() and self.can_act() and (self.cargo.wood + self.cargo.coal + self.cargo.uranium) >= GAME_CONSTANTS[\"PARAMETERS\"][\"CITY_BUILD_COST\"]:\n            return True\n        return False\n\n    def can_act(self) -> bool:\n        \"\"\"\n        whether or not the unit can move or not. This does not check for potential collisions into other units or enemy cities\n        \"\"\"\n        return self.cooldown < 1\n\n    def move(self, dir) -> str:\n        \"\"\"\n        return the command to move unit in the given direction, and annotate\n        \"\"\"\n        return \"m {} {}\".format(self.id, dir)\n\n    def random_move(self) -> str:\n        return \"m {} {}\".format(self.id, random.choice([\n            DIRECTIONS.NORTH,\n            DIRECTIONS.EAST,\n            DIRECTIONS.SOUTH,\n            DIRECTIONS.WEST]))\n\n    def transfer(self, dest_id, resourceType, amount) -> str:\n        \"\"\"\n        return the command to transfer a resource from a source unit to a destination unit as specified by their ids\n        \"\"\"\n        return \"t {} {} {} {}\".format(self.id, dest_id, resourceType, amount)\n\n    def build_city(self) -> str:\n        \"\"\"\n        return the command to build a city right under the worker\n        \"\"\"\n        return \"bcity {}\".format(self.id)\n\n    def pillage(self) -> str:\n        \"\"\"\n        return the command to pillage whatever is underneath the worker\n        \"\"\"\n        return \"p {}\".format(self.id)\n\n    def compute_travel_range(self, turn_info=None) -> None:\n        fuel_per_turn = GAME_CONSTANTS[\"PARAMETERS\"][\"LIGHT_UPKEEP\"][\"WORKER\"]\n        cooldown_required = GAME_CONSTANTS[\"PARAMETERS\"][\"UNIT_ACTION_COOLDOWN\"][\"WORKER\"]\n        day_length = GAME_CONSTANTS[\"PARAMETERS\"][\"DAY_LENGTH\"]\n        night_length = GAME_CONSTANTS[\"PARAMETERS\"][\"NIGHT_LENGTH\"]\n\n        turn_survivable = (self.cargo.wood \/\/ GAME_CONSTANTS[\"PARAMETERS\"][\"RESOURCE_TO_FUEL_RATE\"][\"WOOD\"]) \/\/ fuel_per_turn\n        turn_survivable += self.cargo.coal + self.cargo.uranium  # assumed RESOURCE_TO_FUEL_RATE > fuel_per_turn\n        self.night_turn_survivable = turn_survivable\n        self.night_travel_range = turn_survivable \/\/ cooldown_required  # plus one perhaps\n\n        if turn_info:\n            turns_to_night, turns_to_dawn, is_day_time = turn_info\n            travel_range = max(1, turns_to_night \/\/ cooldown_required + self.night_travel_range - cooldown_required)\n            if self.night_turn_survivable > turns_to_dawn and not is_day_time:\n                travel_range = day_length \/\/ cooldown_required + self.night_travel_range\n            if self.night_turn_survivable > night_length:\n                travel_range = day_length \/\/ cooldown_required + self.night_travel_range\n            self.travel_range = travel_range\n\n    def encode_tuple_for_cmp(self):\n        return (self.cooldown, self.cargo.wood, self.cargo.coal, self.cargo.uranium, self.is_worker())\n","bb60e92e":"%%writefile lux\/game_position.py\nfrom lux import game\nimport random\nfrom typing import List, Set, Tuple\n\nfrom .constants import Constants\n\nDIRECTIONS = Constants.DIRECTIONS\n\n\nclass Position:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __sub__(self, pos: 'Position') -> int:\n        return abs(pos.x - self.x) + abs(pos.y - self.y)\n\n    def distance_to(self, pos: 'Position'):\n        \"\"\"\n        Returns Manhattan (L1\/grid) distance to pos\n        \"\"\"\n        return self - pos\n\n    def is_adjacent(self, pos: 'Position'):\n        return (self - pos) <= 1\n\n    def __eq__(self, pos: 'Position') -> bool:\n        return self.x == pos.x and self.y == pos.y\n\n    def equals(self, pos: 'Position'):\n        return self == pos\n\n    def translate(self, direction, units) -> 'Position':\n        if direction == DIRECTIONS.NORTH:\n            return Position(self.x, self.y - units)\n        elif direction == DIRECTIONS.EAST:\n            return Position(self.x + units, self.y)\n        elif direction == DIRECTIONS.SOUTH:\n            return Position(self.x, self.y + units)\n        elif direction == DIRECTIONS.WEST:\n            return Position(self.x - units, self.y)\n        elif direction == DIRECTIONS.CENTER:\n            return Position(self.x, self.y)\n\n    def __str__(self) -> str:\n        return f\"({self.x}, {self.y})\"\n\n    def __iter__(self):\n        for i in (self.x, self.y):\n            yield i\n","7f56e05f":"%%writefile lux\/game_constants.py\nimport json\nfrom os import path\ndir_path = path.dirname(__file__)\nconstants_path = path.abspath(path.join(dir_path, \"game_constants.json\"))\nwith open(constants_path) as f:\n    GAME_CONSTANTS = json.load(f)\n","4de7ea65":"%%writefile lux\/constants.py\nclass Constants:\n    class INPUT_CONSTANTS:\n        RESEARCH_POINTS = \"rp\"\n        RESOURCES = \"r\"\n        UNITS = \"u\"\n        CITY = \"c\"\n        CITY_TILES = \"ct\"\n        ROADS = \"ccd\"\n        DONE = \"D_DONE\"\n    class DIRECTIONS:\n        NORTH = \"n\"\n        WEST = \"w\"\n        SOUTH = \"s\"\n        EAST = \"e\"\n        CENTER = \"c\"\n    class UNIT_TYPES:\n        WORKER = 0\n        CART = 1\n    class RESOURCE_TYPES:\n        WOOD = \"wood\"\n        URANIUM = \"uranium\"\n        COAL = \"coal\"\n","f15ee5df":"%%writefile lux\/annotate.py\ndef circle(x: int, y: int) -> str:\n    return f\"dc {x} {y}\"\n\ndef x(x: int, y: int) -> str:\n    return f\"dx {x} {y}\"\n\ndef line(x1: int, y1: int, x2: int, y2: int) -> str:\n    return f\"dl {x1} {y1} {x2} {y2}\"\n\n# text at cell on map\ndef text(x: int, y: int, message: str, fontsize: int = 50) -> str:\n    return f\"dt {x} {y} '{message}' {fontsize}\"\n\n# text besides map\ndef sidetext(message: str) -> str:\n    return f\"dst '{message}'\"\n","b688c537":"!mkdir snapshots\nfrom kaggle_environments import make\nenv = make(\"lux_ai_2021\", debug=True, configuration={\"annotations\": True, \"width\":12, \"height\":12})\nsteps = env.run([\"agent.py\", \"agent.py\"])","d9ba7687":"env.render(mode=\"ipython\", width=900, height=800)","90432488":"import pickle\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom agent import game_logic\n\nstr_step = \"010\"\nplayer_id = 0\nwith open(f'snapshots\/game_state-{str_step}-{player_id}.pkl', 'rb') as handle:\n    game_state = pickle.load(handle)\nwith open(f'snapshots\/missions-{str_step}-{player_id}.pkl', 'rb') as handle:\n    missions = pickle.load(handle)\n\ngame_logic(game_state, missions, DEBUG=True)\nplt.imshow(game_state.convolved_collectable_tiles_matrix)\nplt.colorbar()\nplt.show()","c0bb6e9a":"!rm snapshots\/*.pkl\n!tar --exclude='*.ipynb' --exclude=\"*.pyc\" --exclude=\"*.pkl\" -czf submission.tar.gz *\n!rm *.py && rm -rf __pycache__\/ && rm -rf lux\/","35936b34":"\n# [Lux AI] Working Title Bot\nThe code structure and logic, and version updates are elaborated in the comment section.\n\nI hope this can be a useful template for you to work on your bot on.\nYou are recommended to edit on a clone\/fork of [my repository](https:\/\/github.com\/tonghuikang\/lux-ai-2021) with your favorite IDE.\nYou can submit the zip the repository to the competition. This notebook is generated with `generate_notebook.py`.\n\nRegardless, do feel free to clone this notebook and submit `submission.tar.gz` under the \"Data\" tab.\n","0181733c":"# Upgraded Game Kit\nThe game kit has been edited to include more features for the agent to make decisions on.\n","68695d91":"# Game Rendering\nThis is a replay of the agent fighting against itself.\n\nThe missions of each unit is annotated.\n`X` and `O` indicates target position for the unit to move to.\nIn addition, `O` indicates that the unit will build a citytile upon arrival at the tile.\n\n`O` on the city tile indicates that the citytile have enough fuel to last to the end of the game.\nOtherwise, the number of nights it can endure will be indicated on the tile.\n\nThe inscription on the unit indicates the amount of total resources it has, and the majority type of resource.\n`F` indicates that it has at least 100 resources. If the unit has moved in the turn, the inscription is annotated on the previous location.\n","ad0d6f5a":"# Debugging\nIn the run, we have saved the game state and missions as Python pickle files.\n\nWe can rerun the game logic and debug how missions are planned and actions are executed.\n\nFor visualisation, we plot `convolved_collectable_tiles_matrix`.\nThis matrix is used for estimating the best target position of a mission.\nYou could also print other attributes of `game_state`.\n","ef7f04e2":"# Agent Logic\nThe following scipts contain the algorithms that the agent uses.\nThe algorithm is described in the comments.\nFeel free to ask for more clarification.\n","80b57a8f":"# Make Submission"}}