{"cell_type":{"779801ca":"code","ce068d7f":"code","93098623":"code","b3dbc57c":"code","db5ca54a":"code","bb06ad81":"code","588be7c2":"code","17f7f367":"code","20ee39e9":"code","2be6c664":"code","d1470dc5":"code","a22bc1d3":"code","744e7613":"code","8f39b866":"code","8957896c":"code","25bc7ae1":"markdown"},"source":{"779801ca":"# importing basic libaries\nimport os # to get the path information\nimport cv2 # to deal up with images\nimport numpy as np # to deal with the maths to convert images to array\nimport seaborn as sns # to visualize the data\nimport matplotlib.pyplot as plt # to plot the data\\\n\n# importing keras libaries for preprocessing\nimport keras\nfrom keras.utils import to_categorical # to convert the data to categorical foam(like one hot encoding)\nfrom sklearn.model_selection import train_test_split # to split the dataset into test and train\n\n# importing thee basic layers requried to make our CNN model\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Flatten, Activation, Dropout\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D, AveragePooling2D","ce068d7f":"PATH = '\/kaggle\/input\/harpethockey-action-recognizition-pose-estimation\/hockey\/' # the working directory for our model it may vary acc to your computer","93098623":"os.listdir(PATH)","b3dbc57c":"IMG_SIZE = 64 # the size to which we will resize our images\nAction = ['Backward', \"Forward\", \"Passing\", \"Shooting\"] # the four Actions in our dataset\nLabels = [] #to get the labels(0-> Backward,\n#                                  1-> Forward,\n#                                  2-> Passing,\n#                                  3-> shooting)\nDataset = [] # to append the images of a particular action\nfor action in Action:\n    print(\"Getting data for Action: \", action)\n    for image_from_folder in os.listdir(PATH + action):\n        image = cv2.imread(PATH + action + '\/' + image_from_folder)\n        image = cv2.resize(image, (IMG_SIZE, IMG_SIZE))\n        Dataset.append(image)\n        Labels.append(Action.index(action))\n\nprint(\"\\nDataset Images size:\", len(Dataset))\nprint(\"Image Shape:\", Dataset[0].shape) # geeting the shape of images after resize\nprint(\"Labels size:\", len(Labels))","db5ca54a":"# plotting the bar chat for the no of each classes in our dataset\nsns.countplot(x = Labels)","bb06ad81":"print(\"Count of Backward images:\", Labels.count(Action.index(\"Backward\")))\nprint(\"Count of Forward images:\", Labels.count(Action.index(\"Forward\")))\nprint(\"Count of Passing images:\", Labels.count(Action.index(\"Passing\")))\nprint(\"Count of Shooting images:\", Labels.count(Action.index(\"Shooting\")))","588be7c2":"# looking at some of the random images from our dataset and showing them here \nindex = np.random.randint(0, len(Dataset) - 1, size= 20)\nplt.figure(figsize=(15,10))\n\nfor i, ind in enumerate(index, 1):\n    img = Dataset[ind]\n    lab = Labels[ind]\n    lab = Action[lab]\n    plt.subplot(4, 5, i)\n    plt.title(lab)\n    plt.axis('off')\n    plt.imshow(img)","17f7f367":"# converting the dataset into the array for the processing of the data\nDataset = np.array(Dataset)\nDataset = Dataset.astype(\"float32\") \/ 255.0 # normalization of the data\n\n#Applying the One hot encode labels\nLabels = np.array(Labels)\nLabels = to_categorical(Labels)\n\n# Split Dataset to train\\test, keeping the 80% train dataset and 20% for test dataset\n(trainX, testX, trainY, testY) = train_test_split(Dataset, Labels, test_size=0.2, random_state=42)\n\nprint(\"X Train shape:\", trainX.shape)\nprint(\"X Test shape:\", testX.shape)\nprint(\"Y Train shape:\", trainY.shape)\nprint(\"Y Test shape:\", testY.shape)","20ee39e9":"# training of our CNN model \nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=(64,64,3)))\nmodel.add(Conv2D(64 , kernel_size = (5 , 5) , activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(32 , activation = 'relu'))\nmodel.add(Dense(16 , activation = 'softmax'))\nmodel.add(Dense(4, activation='softmax'))","2be6c664":"model.compile(loss=keras.losses.categorical_crossentropy,optimizer= 'adam',metrics=['accuracy'])","d1470dc5":"# fitting the model over 50 epoches\nhistory = model.fit(trainX, trainY,\n          batch_size=16,\n          epochs=50,\n          verbose=1,\n          validation_data=(testX, testY))","a22bc1d3":"#plotting the train and test accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","744e7613":"#plotting the train and test losses\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","8f39b866":"# making predictions on our model\ny_pred = model.predict(testX)","8957896c":"# checking the result we have got after training our model\nfig = plt.figure(figsize=(20, 40))\nfor i, idx in enumerate(np.random.choice(testX.shape[0], size=24, replace=False)):\n    ax = fig.add_subplot(8, 8, i + 1, xticks=[], yticks=[])\n    ax.imshow(np.squeeze(testX[idx]))\n    pred_idx = np.argmax(y_pred[idx])\n    true_idx = np.argmax(testY[idx])\n    ax.set_title(\"\\nActual:-{}\\n Predicted:-{}\".format(Action[pred_idx], Action[true_idx]),\n                 color=(\"green\" if pred_idx == true_idx else \"red\"))","25bc7ae1":"# HARPET - (Hockey Action Recognition Pose Estimation, Temporal)"}}