{"cell_type":{"af2beb59":"code","1ec7cbab":"code","33617760":"code","f1ca5c26":"code","30bb593b":"code","e82a69c6":"code","6bb36414":"code","e161b043":"code","e8227be7":"code","756500c9":"code","b5cd9daf":"code","386ec584":"code","4ae28957":"code","3eb320d3":"code","c52b3556":"code","2ca7a68d":"code","d813483b":"code","5eb24a6a":"code","2586faaa":"code","7615203e":"code","1abab4f9":"code","f9ec59dd":"code","a14db35f":"code","04c6e176":"code","8ba15ece":"code","a2c989b4":"code","7258cd05":"code","bfd67ab8":"code","b79c4216":"code","63f6739c":"code","5255ba05":"code","30713f44":"code","bdf1a4e8":"code","e1f66bd8":"code","ac1bdf3a":"code","d32cf9ee":"code","7f98923a":"code","907aec3e":"code","6a9d0d82":"code","d7909038":"code","4d43a423":"code","12b790dd":"code","bd097975":"code","07ce7be3":"code","c022cc08":"code","2fdb6008":"code","58306e86":"code","d0b25d97":"code","157d9ad1":"code","abeb9038":"code","5dca51ba":"code","a05700b1":"code","6bdf4f01":"code","379abaec":"code","3f6bcb12":"code","3231b5fc":"code","b5d775bb":"code","97c6e0b7":"code","52554f07":"code","fc9a6df8":"code","dc477e0d":"code","9d8f4301":"code","eb3b4028":"code","f7395408":"code","9c364d94":"code","1306a43d":"code","54911b58":"code","e9e0fdc9":"code","15fda41e":"markdown","d284d1b6":"markdown","5bec302e":"markdown","c63c1fef":"markdown","84aa98dc":"markdown","022801b1":"markdown","017a01c4":"markdown","a135ea47":"markdown","f254121c":"markdown","982de882":"markdown","4176b944":"markdown","6054593c":"markdown","e2bb8fa6":"markdown","0817ee6e":"markdown","ef1a06f7":"markdown","847a0d28":"markdown","22b7d6c0":"markdown","b1d93053":"markdown","7db4c057":"markdown","ca583174":"markdown","b8a0aa6f":"markdown","5acbd384":"markdown","3ef825aa":"markdown","277f30a4":"markdown","fc9ad021":"markdown","c624a549":"markdown","41d12e81":"markdown","688298ff":"markdown","659a8684":"markdown","a1981b15":"markdown","6470c5cf":"markdown"},"source":{"af2beb59":"import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\npd.set_option(\"display.max_columns\",None)\nimport warnings \nwarnings.filterwarnings('ignore')","1ec7cbab":"df_train=pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test=pd.read_csv('..\/input\/titanic\/test.csv')","33617760":"df_train.head()","f1ca5c26":"df_train.info()","30bb593b":"df_train.describe()","e82a69c6":"df_train.describe(include='object')","6bb36414":"df_train.drop(columns=[\"Cabin\",\"Ticket\",],inplace=True)","e161b043":"df_train.head(10)","e8227be7":"df_test.drop(columns=[\"Cabin\",\"Ticket\",],inplace=True)","756500c9":"df_test.head()","b5cd9daf":"df_train.isnull().sum()","386ec584":"df_train[\"Age\"] = df_train[\"Age\"].fillna(df_train[\"Age\"].mean())","4ae28957":"df_train.head()","3eb320d3":"df_train.dropna(inplace = True)","c52b3556":"df_train.head()","2ca7a68d":"df_test.isnull().sum()","d813483b":"df_test[\"Age\"] = df_test[\"Age\"].fillna(df_test[\"Age\"].mean())","5eb24a6a":"df_test['Fare'] = df_test['Fare'].fillna(df_test['Fare'].median()) ","2586faaa":"df_test.isnull().sum()","7615203e":"df_train['title']=list(map(lambda x : x.split(',')[1].split('.')[0].lstrip(),df_train['Name']))","1abab4f9":"df_train.title.unique()","f9ec59dd":"df_test['title']=list(map(lambda x : x.split(',')[1].split('.')[0].lstrip(),df_test['Name']))","a14db35f":"df_test.title.unique()","04c6e176":"column=df_train.describe().columns\nplt.figure(figsize=(20,10))\ndf_train.boxplot(column=['Survived','Pclass','Age','SibSp','Parch','Fare'])","8ba15ece":"sns.countplot(df_train['Survived'])","a2c989b4":"sns.barplot(x=\"Sex\", y=\"Survived\", data=df_train)\n\n#print percentages of females vs. males that survive\nprint(\"Percentage of females who survived:\", df_train[\"Survived\"][df_train[\"Sex\"] == 'female'].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of males who survived:\", df_train[\"Survived\"][df_train[\"Sex\"] == 'male'].value_counts(normalize = True)[1]*100)","7258cd05":"# Create subplot\nplt.subplots(figsize = (8,5))\nsns.barplot(x = \"Pclass\", y = \"Survived\", data=df_train, linewidth=2)\nplt.title(\"Passenger Class Distribution - Survived vs Non-Survived\", fontsize = 10)\nplt.xlabel(\"Socio-Economic class\", fontsize = 10);\nplt.ylabel(\"% of Passenger Survived\", fontsize = 10);\nlabels = ['1st', '2nd', '3rd']\nval = [0,1,2] \nplt.xticks(val, labels);\n\n\n#print percentages of 1st vs. 2nd and 3rd class\nprint(\"Percentage of 1st class who survived:\", df_train[\"Survived\"][df_train[\"Pclass\"] == 1].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of 2nd class who survived:\", df_train[\"Survived\"][df_train[\"Pclass\"] == 2].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of 3rd class who survived:\", df_train[\"Survived\"][df_train[\"Pclass\"] == 3].value_counts(normalize = True)[1]*100)","bfd67ab8":"#create a subplot\nf,ax=plt.subplots(1,2,figsize=(10,5))\n\n# create bar plot using groupby\ndf_train[['Sex','Survived']].groupby(['Sex']).mean().plot.bar(color=['#a85ee0'],ax=ax[0])\nax[0].set_title('Survived vs Sex')\n\n# create count plot\nsns.countplot('Sex',hue='Survived',data=df_train,ax=ax[1])\nax[1].set_title('Sex:Survived vs Dead')\nplt.show()","b79c4216":"# create subplot plot\nf,ax=plt.subplots(1,2,figsize=(10,5))\n\n# create bar plot using groupby\ndf_train['Pclass'].value_counts().plot.bar(color=['#080035','#0F006B','#8B80C7'],ax=ax[0])\nax[0].set_title('Number Of Passengers By Pclass')\nax[0].set_ylabel('Count')\n\n# create count plot\nsns.countplot('Pclass',hue='Survived',data=df_train,ax=ax[1])\nax[1].set_title('Pclass:Survived vs Dead')\nplt.show()","63f6739c":"# create subplot plot\n\nf,ax=plt.subplots(1,2,figsize=(18,8))\n\n# create violinplot plot using groupby\n\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=df_train,split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=df_train,split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","5255ba05":"# create subplot plot\nf,ax=plt.subplots(2,2,figsize=(20,8))\n\n# create Bar (count) plot for Embarked vs. No. Of Passengers Boarded\nsns.countplot('Embarked',data=df_train,ax=ax[0,0],color=\"#b4bf82\")\nax[0,0].set_title('No. Of Passengers Boarded')\n\n# create Bar (count) plot for Embarked vs. Male-Female Split\nsns.countplot('Embarked',hue='Sex',data=df_train,ax=ax[0,1])\nax[0,1].set_title('Male-Female Split for Embarked')\n\n# create Bar (count) plot for Embarked vs Survived\nsns.countplot('Embarked',hue='Survived',data=df_train,ax=ax[1,0])\nax[1,0].set_title('Embarked vs Survived')\n\n# create Bar (count) plot for Embarked vs Pclass\nsns.countplot('Embarked',hue='Pclass',data=df_train,ax=ax[1,1])\nax[1,1].set_title('Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2,hspace=0.5)\nplt.show()","30713f44":"sns.boxplot(x=\"Pclass\", y=\"Age\", data=df_train)\nsns.stripplot(x=\"Pclass\", y=\"Age\", data=df_train, jitter=True, edgecolor=\"gray\")","bdf1a4e8":"tab = pd.crosstab(df_train['Sex'], df_train['Survived'])\nprint(tab)\n\ndummy = tab.div(tab.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True)\ndummy = plt.xlabel('Port embarked')\ndummy = plt.ylabel('Percentage')","e1f66bd8":"sns.lmplot(x='Age', y='Fare', hue='Survived', \n           data=df_train.loc[df_train['Survived'].isin([1,0])], \n           fit_reg=False)","ac1bdf3a":"sns.heatmap(df_train.corr(),cmap=\"ocean\",annot=True)","d32cf9ee":"df_train.boxplot('Age','title',figsize=(15,8))","7f98923a":"df_train.info()","907aec3e":"sns.pairplot(df_train[['Survived','Pclass','Age','SibSp','Parch','Fare']], kind=\"scatter\", hue=\"Survived\", palette=\"Set2\")","6a9d0d82":"df_train.head()","d7909038":"df_test.head()","4d43a423":"# so we have titles for Nobels like Master, Capt...and others for regular people..\n# so lets replace Nobels people by Dummy value 1 and regular people by Dummy value 0\ntitle_mapping = {'Mr': 0, 'Mrs': 0, 'Miss': 0, 'Master' : 1,'Don': 1, 'Rev' : 1,'Dr' : 1,'Mme': 0, 'Ms': 0, 'Major': 1,\n 'Lady': 1, 'Sir': 1, 'Mlle': 0, 'Col': 1, 'Capt': 1, 'Countess': 1, 'Jonkheer': 1,'Dona': 1,}\n\ndf_train['title'] = df_train['title'].map(title_mapping)\ndf_train['title'] = df_train['title'].fillna(0)\ndf_train['title']=df_train['title'].astype('int')\n    \nprint(df_train['title'].unique())","12b790dd":"df_train['title'].value_counts()","bd097975":"title_mapping = {'Mr': 0, 'Mrs': 0, 'Miss': 0, 'Master' : 1,'Don': 1, 'Rev' : 1,'Dr' : 1,'Mme': 0, 'Ms': 0, 'Major': 1,\n 'Lady': 1, 'Sir': 1, 'Mlle': 0, 'Col': 1, 'Capt': 1, 'Countess': 1, 'Jonkheer': 1,'Dona': 1,}\n\ndf_test['title'] = df_test['title'].map(title_mapping)\ndf_test['title'] = df_test['title'].fillna(0)\n\n    \nprint(df_test['title'].unique())","07ce7be3":"df_train=pd.get_dummies(data=df_train,columns=['Sex','Embarked'],drop_first=True)\ndf_test=pd.get_dummies(data=df_test,columns=['Sex','Embarked'],drop_first=True)","c022cc08":"df_train.drop(columns=['PassengerId','Name'],inplace=True)\ndf_test.drop(columns=['Name'],inplace=True)","2fdb6008":"df_train.head()","58306e86":"df_test.head()","d0b25d97":"import statsmodels.api as sm\nfrom sklearn.metrics import confusion_matrix,accuracy_score,classification_report,roc_auc_score,log_loss,f1_score\n\nx=df_train.drop(columns=['Survived'])\ny=df_train['Survived']\nx.head()","157d9ad1":"from sklearn.preprocessing import StandardScaler\nss=StandardScaler()\nX=ss.fit_transform(x)","abeb9038":"from sklearn.tree import DecisionTreeClassifier\ndt=DecisionTreeClassifier(criterion='entropy',random_state=0,class_weight='balanced')\n\nfrom sklearn.linear_model import LogisticRegression\nLR=LogisticRegression(class_weight='balanced')\n\nfrom sklearn.naive_bayes import GaussianNB\nnb=GaussianNB()\n\nfrom sklearn.metrics import confusion_matrix,accuracy_score,roc_auc_score,roc_curve\nfrom sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier(n_estimators=100,random_state=0,class_weight='balanced')\n\nfrom sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier()\n\nfrom sklearn.ensemble import AdaBoostClassifier,BaggingClassifier,GradientBoostingClassifier\ngb=GradientBoostingClassifier(random_state=0)\nbc=BaggingClassifier(base_estimator=knn,random_state=0)\n\nimport lightgbm as lgb\nlgbm=lgb.LGBMClassifier(random_state=0)\n\nfrom xgboost import XGBClassifier\nclassifier = XGBClassifier()","5dca51ba":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint as sp_randint\n\nrfc_tunned=RandomForestClassifier(n_estimators=100,random_state=0)\nparams={'n_estimators':sp_randint(1,1000),\n        'max_features':sp_randint(1,9),\n        'max_depth': sp_randint(2,50),\n        'min_samples_split':sp_randint(2,80),\n        'min_samples_leaf':sp_randint(1,80),\n        'criterion':['gini','entropy']}\n\nrsearch_rfc=RandomizedSearchCV(rfc_tunned,params,cv=3,scoring='accuracy',n_jobs=-1,random_state=0)\n\nrsearch_rfc.fit(X,y)","a05700b1":"rsearch_rfc.best_params_","6bdf4f01":"rfc_tunned=RandomForestClassifier(**rsearch_rfc.best_params_,random_state=0)","379abaec":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV\nfrom scipy.stats import randint as sp_randint\n\nknn_tunned=KNeighborsClassifier()\n\nparams={'n_neighbors':sp_randint(1,20),'p':sp_randint(1,30)}\n\nrsearch_knn=RandomizedSearchCV(knn_tunned,params,cv=3,scoring='accuracy',n_jobs=-1,random_state=0)\nrsearch_knn.fit(X,y)","3f6bcb12":"rsearch_knn.best_params_","3231b5fc":"knn_tunned=KNeighborsClassifier(**rsearch_knn.best_params_)","b5d775bb":"from scipy.stats import randint as sp_randint\nfrom scipy.stats import uniform as sp_uniform \n\nlgbm_tunned=lgb.LGBMClassifier(random_state=0)\nparams={'n_estimators':sp_randint(1,1000),\n       'max_depth': sp_randint(2,80),\n        'learning_rate':sp_uniform(0.001,0.05),\n        'num_leaves':sp_randint(2,50)\n       }\n\nrsearch_lgbm=RandomizedSearchCV(lgbm_tunned,param_distributions=params,cv=3,scoring='accuracy',n_iter=200,n_jobs=-1,random_state=0)\n\nrsearch_lgbm.fit(X,y)","97c6e0b7":"rsearch_lgbm.best_params_","52554f07":"lgbm_tunned=lgb.LGBMClassifier(**rsearch_lgbm.best_params_,random_state=0)","fc9a6df8":"from scipy.stats import randint as sp_randint\nfrom scipy.stats import uniform as sp_uniform \n\ngb_tuned=GradientBoostingClassifier(random_state=0)\nparams= {'learning_rate':[0.15,0.1,0.05,0.01,0.005,0.001], \n         'n_estimators':sp_randint(2,1500),\n         'max_depth':sp_randint(1,10),\n        'min_samples_split':sp_randint(2,100), \n         'min_samples_leaf':sp_randint(1,10),\n        'max_features':sp_randint(1,9),\n        'subsample':[0.7,0.75,0.8,0.85,0.9,0.95,1]}\n\nrsearch_gb=RandomizedSearchCV(gb_tuned,param_distributions=params,cv=3,n_iter=200,n_jobs=-1,random_state=0)\n\nrsearch_gb.fit(X,y)","dc477e0d":"rsearch_gb.best_params_","9d8f4301":"gb_tuned=GradientBoostingClassifier(**rsearch_gb.best_params_,random_state=0)","eb3b4028":"models=[]\nmodels.append(('Logistic',LR))\nmodels.append(('Decision Tree',dt))\nmodels.append(('Naive Bayes',nb))\nmodels.append(('Random Forest',rfc))\nmodels.append(('Random Forest Tunned',rfc_tunned))\nmodels.append(('KNN',knn))\nmodels.append(('KNN Tunned',knn_tunned))\nmodels.append(('Bagging',bc))\nmodels.append(('Gradient Boost',gb))\nmodels.append(('Gradient Boost Tunned',gb_tuned))\nmodels.append(('LGBM',lgbm))\nmodels.append(('LGBM Tunned',lgbm_tunned))\nmodels.append(('XGB',classifier))","f7395408":"from sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n\nresults=[]\nVar=[]\nnames=[]\nfor name,model in models:\n    #kfold=model_selection.KFold(shuffle=True,n_splits=10,random_state=0)\n    cv_results=cross_val_score(model,X,y,cv=10,scoring='roc_auc')\n    results.append(np.mean(cv_results))\n    Var.append(np.var(cv_results))\n    names.append(name)\n\nr_df=pd.DataFrame({'Model':names,'ROC-AUC':results,'Variance Error':Var})\nprint(r_df)","9c364d94":"df_test.head()","1306a43d":"df_test2=df_test.drop('PassengerId',axis=1)","54911b58":"gb.fit(X,y)\ny_test_pred = gb.predict(df_test2)","e9e0fdc9":"submission = pd.DataFrame({\n        \"PassengerId\": df_test[\"PassengerId\"],\n        \"Survived\": y_test_pred\n    })\n\nsubmission.to_csv('gender_submission.csv', index=False)","15fda41e":"#### Observation:\n    1. The number of men on the ship is lot more than the number of women. Still the number of women saved is almost twice the number of males saved.\n    2. The survival rates for a women on the ship is around 75% while that for men in around 18-19%.","d284d1b6":"### Pclass Column and embarked column","5bec302e":"# Titanic","c63c1fef":"#### Observation:\n\n1.Fare feature seems to have a significative correlation with the survival probability.","84aa98dc":"# EDA on train data","022801b1":"#### Observation:\n\n1.We can see the distribution of ages based on the titles of the passengers. and there are some outliers.","017a01c4":"#### Observation:\n\n1. 62% first class passenger survived titanic tragedy, while\n2. 47% second class and\n3. only 24% third class passenger survived.\n\nThe rich people would mostly be staying in the upper decks of the ship, which would have been easier for evacuation.","a135ea47":"# Data Cleaning","f254121c":"#### Observations:\n    1. The chart shows Female die more compare to male\n    2. But Male are high count in compare to Female.","982de882":"#### Observation:\n    \n   1. We can clear see there are some correlation in dataset.\n   2. Age have correlation with fare.\n   3. Other features have No significant correlation with each other.","4176b944":"### Tuned LGBM","6054593c":"#### Observations:\n\n    1. Maximum passenegers boarded from S. Majority of them being from Pclass3.\n    2. Port Q had almost 95% of the passengers were from Pclass3.","e2bb8fa6":"# Model Building","0817ee6e":"#### Observation:\n\n1. This bar plot above shows the number of passengers survived and not survived. The x_label represents Survival feature while the y_label represents the count of passenger. ","ef1a06f7":"### Droping unwanted Columns","847a0d28":"**Data Description:-**\n\n**Survival**\n0 = No, 1 = Yes\n\n**pclass**\nTicket class\n1 = 1st, 2 = 2nd, 3 = 3rd\n\n**sex**\nSex\n\n**Age**\nAge in years\n\n**sibsp**\nsiblings \/ spouses aboard the Titanic\n\n**parch**\nparents \/ children aboard the Titanic\n\n**ticket**\nTicket number\n\n**fare**\nPassenger fare\n\n**cabin**\nCabin number\n\n**embarked**\nPort of Embarkation\nC = Cherbourg, Q = Queenstown, S = Southampton","22b7d6c0":"### Tuned GB","b1d93053":"#### Observation:\n    1. Scatter plot showing some relation but not very useful in this case.","7db4c057":"### Tuned KNN","ca583174":"#### Observation:\n\n1. The Passenegers Of Pclass 1 were given a very high priority while rescue. Even though the the number of Passengers in Pclass 3 were a lot higher, still the number of survival from them is very low, somewhere around 25%.","b8a0aa6f":"#### Observations: \n    1. Average age goes down from class 1 to class 3.\n    2. We can also see Outliers","5acbd384":"#### Observation:\n\n1. This bar plot above shows the distribution of female and male survived. The x_label represents Sex feature while the y_label represents the % of passenger survived. \n2. This bar plot shows that ~74% female passenger survived while only ~18% male passenger survived.","3ef825aa":"# Please upvote if you like my work.","277f30a4":"# Predicting on Test Data","fc9ad021":"# Submission file","c624a549":"### Droping Unwanted Columns","41d12e81":"### Null Value Imputation for train data","688298ff":"### Tuned RFC","659a8684":"### Title Column","a1981b15":"### Null Value Imputation for test data","6470c5cf":"#### Observations:\n    \n     1.The No.of children increases with Pclass and the survival rate for passenegers below Age10(i.e children)decreases.\n     2.Survival chances for Passenegers aged 20-50 from Pclass1 is high.\n     3.For males, the survival chances decreases with an increase in age."}}