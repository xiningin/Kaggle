{"cell_type":{"e3c7b527":"code","dc6760c8":"code","accf6d52":"code","ad42e6f1":"code","9e56ab2d":"code","04cf8a10":"code","2e49e94c":"code","31f83bd2":"code","d7e9a942":"code","495e35ee":"code","2aff35ea":"code","03d1236e":"code","d87f3ea7":"markdown","e55726b1":"markdown","f477f64c":"markdown","eae4bcca":"markdown","d4756ac2":"markdown","5f15c2ed":"markdown","a3968b72":"markdown","7b00287f":"markdown","a5a9116b":"markdown","69d60257":"markdown"},"source":{"e3c7b527":"import matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\nimport re\nimport os\n","dc6760c8":"df = pd.read_csv(\"..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\")\ndf = df.drop(df.index[0], axis = 0)\ndf.head()","accf6d52":"number_pattern = \"\\d+_\"","ad42e6f1":"df = pd.read_csv(\"..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\")\ndf = df.drop(df.index[0], axis = 0)\n\ndef clean_df(df):\n    df_cols = df.columns\n    \n    for col in df.columns:\n        \n        #print(col)\n        \n        if \"_Part_\" in col:\n            try:\n                # Check for the unique value of this.\n                col_number = re.findall(number_pattern, col)[0].replace(\"_\", \"\")\n                \n                unique_colval = df[col].dropna().unique()\n                \n                col_value = unique_colval[0]\n                \n                real_col_name = \"Q\" + str(col_number) + \"_\" + str(col_value)\n                \n                #print(real_col_name)\n                \n                df[col] = df[col].notna()\n                \n                df.rename(columns = {col:real_col_name}, inplace = True)\n                \n                \n            except:\n                print(\"couldn't rename\", col)\n            \n        else:\n            pass\n    \n    return df\n\nclean_df(df).head(3)","9e56ab2d":"def clean_colnames(df):\n    df.columns = map(str.lower, df.columns)\n    df.columns = df.columns.str.replace(' ', '_')\n    df.columns = df.columns.str.replace('(', '')\n    df.columns = df.columns.str.replace(')', '_')\n    df.columns = df.columns.str.replace('+', 'plus')\n    df.columns = df.columns.str.replace('\/', 'or')\n    df.columns = df.columns.str.replace('.', '_')\n    df.columns = df.columns.str.replace('__', '_')\n    df.columns = df.columns.str.replace('___', '_')\n    \n    # BUG TO FIX - None of the other columns are working.\n    # This column wasn't working.  Fix it here.\n    # df[\"q35_b_other\"] = df[\"q35_b_other\"].notna()\n    \n    return df\n\ndf = clean_colnames(df)\ndf.head()","04cf8a10":"def fix_others(df):\n    \n    for col in df.columns:\n        if \"other\" in col:\n            try:\n                df[col] = df[col].notna()\n            except:\n                print(\"did not convert\")\n\n    return(df)\n\ndf = fix_others(df)","2e49e94c":"df.head()","31f83bd2":"df.to_csv(\"cleaned_kaggle_questionere.csv\", index = False)","d7e9a942":"df.mean()","495e35ee":"df.filter(like = \"q35\")","2aff35ea":"df.filter(like = \"q35\").sum()","03d1236e":"question_number = \"q35\"\n\nsums = df.filter(like = question_number).sum()\nax = sns.barplot(sums.index, sums)\n\nnames = list(df.filter(like = question_number).columns)\nremove_questions_names = [str(answer)\n                          .replace(question_number, \"\") for answer in names]\n\nax.set_xticklabels(\n    remove_questions_names, \n    rotation=60, \n    horizontalalignment='right'\n)\n\nplt.title(question_number)\nplt.show()","d87f3ea7":"## Cleaning Function ##","e55726b1":"## Illustrations of Simpler Graphing and processing ##","f477f64c":"## Initial Dataframe ##","eae4bcca":"You can now get proportions of answers easily.","d4756ac2":"# Demonstration of Cleaning Function #\n\nThe point of this function is to rename the columns so they are meaningful\nand then binarize each column value so that it can easily be summed for statistical\nanalysis.","5f15c2ed":"## Fix the \"Other\" Columns, which were not converting","a3968b72":"## Download the CSV here or use the dataset ##","7b00287f":"# Clean the colnames #","a5a9116b":"### Use df.filter(like = \"\") to isolate questions\n\nYou can also query the dataframe for the question itself and return a subset that matters to you","69d60257":"And then you can get value counts for all the rows"}}