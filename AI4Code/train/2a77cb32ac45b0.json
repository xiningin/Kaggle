{"cell_type":{"9d57d089":"code","a58f0911":"code","b2971faa":"code","b6c8c9f0":"markdown","02800dc6":"markdown","59e57e6e":"markdown"},"source":{"9d57d089":"import numpy as np\nimport pandas as pd\nimport json\nimport os\n\ntitles = []\nabstracts = []\ntexts = []\nfor dirname, _, filenames in os.walk(\"\/kaggle\/input\/CORD-19-research-challenge\/\"):\n    for filename in filenames:\n        file = os.path.join(dirname, filename)\n        if file.split(\".\")[-1] == \"json\":\n            with open(file,\"r\")as f:\n                doc = json.load(f)\n                titles.append(doc[\"metadata\"][\"title\"])\n                abstracts.append(\" \".join([item[\"text\"] for item in doc[\"abstract\"]]))\n                texts.append(\" \".join([item[\"text\"] for item in doc[\"body_text\"]]))","a58f0911":"from nltk.tokenize import sent_tokenize\nfrom gensim.utils import simple_preprocess\nfrom gensim.sklearn_api.phrases import PhrasesTransformer\nfrom gensim.models import Word2Vec\n\nsentences = []\nfor text in texts:\n    sentences += [simple_preprocess(sentence) for sentence in sent_tokenize(text)]\nbigrams = PhrasesTransformer(min_count=20, threshold=100)\nmodel = Word2Vec(bigrams.fit_transform(sentences), \n                 size=100, \n                 window=10, \n                 min_count=10,\n                 sg=1,\n                 negative=5,\n                 max_final_vocab=30000, \n                 workers=4, \n                 iter=4)","b2971faa":"from sklearn.decomposition import TruncatedSVD\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set()\n\nmain_keywords = [\"transmission\", \"incubation\", \"genetics\"]\nvectors = []\nkeywords = []\nfor k in main_keywords:\n    vectors.append(model.wv[k])\n    keywords.append(k)\n    for w, s in model.wv.most_similar(positive=k, topn=5):\n        vectors.append(model.wv[w])\n        keywords.append(w)\nsvd = TruncatedSVD(n_components=2)\nX = svd.fit_transform(vectors)\nplt.figure(figsize=(15, 10))\ncolors = [\"red\", \"blue\", \"green\"]\nfor i in range(3):\n    plt.scatter(X[i*6:(i+1)*6,0], X[i*6:(i+1)*6,1], c=colors[i])\ni = 0\nfor keyword in keywords:\n    plt.annotate(keywords[i], (X[i,0], X[i,1]))\n    i += 1 ","b6c8c9f0":"# Find keywords using Word2Vec\n\nThis notebook shows how to learn word vectors from the corpus and then identify keywords based on nearest neighbors.\n\n## Read the data","02800dc6":"## Visualize the nearest neighbors\n\nWe identify the 5 nearest neighbors for \"transmission\", \"incubation\" and \"genetics\", project there representations on a plan via PCA and plot them.","59e57e6e":"## Learn the word vectors\n\nWe split the texts into sentences, clean them, merge phrases and train the word vectors using Skip-Gram with negative sampling."}}