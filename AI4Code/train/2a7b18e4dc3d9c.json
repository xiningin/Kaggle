{"cell_type":{"fa097587":"code","8eff4249":"code","7d937602":"code","a415dd61":"code","4a127bef":"code","0dbdf22c":"code","a3ad4676":"code","9b24ebdc":"code","f91e8929":"code","48307756":"code","910c7949":"code","a833c186":"code","ca6bed48":"code","b1686b87":"code","19bfd299":"code","44677574":"code","5b944020":"code","31d658a0":"code","7fe8b9a3":"code","6f8f59e4":"code","4e803c29":"code","86031b66":"code","702475dd":"code","eb3a1fab":"code","bffa583a":"code","ac3bce2f":"code","c7f32c77":"code","2eca073e":"code","4cc9d378":"code","ad79a48e":"code","848c0bcb":"code","8d3efc22":"code","f2ab3969":"code","06d03356":"code","0335746a":"code","010aa715":"code","6f33adb9":"code","fc1faaca":"code","0efdf941":"code","00a04287":"code","ace6a2b0":"code","9bbe0234":"code","00e1dbc5":"code","cdd01dd0":"code","d551f8c7":"code","7e32df9c":"code","5634dd7f":"code","cc811213":"code","7c889f2b":"code","6c0034c4":"code","a39d8d18":"code","42e19249":"code","1af28e92":"code","72b73870":"code","59d4d537":"code","794308fa":"code","c2863f31":"code","6ef4bc9a":"code","9d2f5532":"code","e6588adb":"code","6f4523a8":"code","dbdf9056":"code","ceaaaaca":"code","a7198096":"code","267f23a0":"code","7c6c3c1c":"code","9178acb2":"code","67610bf8":"code","36ca0b6b":"code","f42bfaee":"markdown","3307eea0":"markdown","21615bde":"markdown","8f1e5993":"markdown","f30501cc":"markdown","75241caf":"markdown","36814721":"markdown","73b6a790":"markdown","ddfb18ea":"markdown","439f953e":"markdown","07f11b01":"markdown","a7bd8082":"markdown","1b62e40e":"markdown","ec31a821":"markdown","c7aecf8a":"markdown","6f44e6dc":"markdown","00cc0f27":"markdown","a46f332c":"markdown","e539bbea":"markdown","cb22bedf":"markdown","ac781a30":"markdown","dcf45d80":"markdown","ca2eae5e":"markdown"},"source":{"fa097587":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8eff4249":"train_data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')","7d937602":"train_data.head()","a415dd61":"test_data.head()","4a127bef":"print('Training set shape:', train_data.shape)\nprint('Testing set shape: ', test_data.shape)","0dbdf22c":"train_data.describe()","a3ad4676":"sns.heatmap(train_data.corr(), annot=True);","9b24ebdc":"train_data.groupby('Pclass')['Survived'].value_counts().plot(kind='bar');","f91e8929":"sns.pairplot(train_data.dropna());","48307756":"sns.distplot(train_data['Age'].dropna(),kde=False,color='darkred',bins=30);","910c7949":"sns.boxplot(x='Pclass',y='Age',data=train_data,palette='winter')","a833c186":"train_data.isnull().sum()","ca6bed48":"test_data.isnull().sum()","b1686b87":"total = train_data.isnull().sum().sort_values(ascending=False)\npercent_1 = train_data.isnull().sum()\/train_data.isnull().count()*100\npercent_2 = (round(percent_1, 1)).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent_2], axis=1, keys=['Total', '%'])\nmissing_data.head()","19bfd299":"sns.heatmap(train_data.isnull(),yticklabels=False,cbar=False,cmap='viridis')","44677574":"train_data['Embarked'].value_counts()","5b944020":"train_data['Embarked'] = train_data['Embarked'].fillna('S')","31d658a0":"test_data['Embarked'] = test_data['Embarked'].fillna('S')","7fe8b9a3":"train_data[\"Age\"] = train_data[\"Age\"].fillna(value=train_data[\"Age\"].median())","6f8f59e4":"test_data[\"Age\"] = test_data[\"Age\"].fillna(value=test_data[\"Age\"].median())","4e803c29":"train_data.head()","86031b66":"train_data[\"Fare\"] = train_data[\"Fare\"].fillna(value=train_data[\"Fare\"].median())   ","702475dd":"test_data[\"Fare\"] = test_data[\"Fare\"].fillna(value=test_data[\"Fare\"].median())","eb3a1fab":"train_data = train_data.drop('Cabin',axis=1)","bffa583a":"test_data = test_data.drop('Cabin',axis=1)","ac3bce2f":"def get_title(name):\n    if '.' in name:\n        return name.split(',')[1].split('.')[0].strip()\n    else:\n        return 'Unknown'\n\ndef title_number(title):\n    if title == 'Mr':\n        return 1\n    elif title == 'Mrs':\n        return 2\n    elif title == 'Miss':\n        return 3\n    elif title == 'Master':\n        return 4\n    else:\n        return 5  ","c7f32c77":"train_data['get_title'] = train_data['Name'].apply(get_title).apply(title_number)","2eca073e":"test_data['get_title'] = test_data['Name'].apply(get_title).apply(title_number)","4cc9d378":"train_data['get_title'].value_counts()","ad79a48e":"train_data.groupby('get_title')['Survived'].value_counts().plot(kind='bar')","848c0bcb":"train_data['Sex'] = train_data['Sex'].map({'male':0, 'female':1})","8d3efc22":"test_data['Sex'] = test_data['Sex'].map({'male':0, 'female':1})","f2ab3969":"def get_age(various):\n    if various <= 11:\n        return  0\n    elif various <= 18: \n        return 1\n    elif (various > 18) & (various <= 22):\n        return 2\n    elif (various > 22) & (various <= 27):\n        return 3\n    elif (various > 27) & (various <= 33):\n        return 4\n    elif (various > 33) & (various <= 40):\n        return 5\n    elif (various > 40) & (various <= 66):\n        return 6\n    else:\n        return 7","06d03356":"train_data['get_age'] = train_data['Age'].apply(get_age)","0335746a":"test_data['get_age'] = test_data['Age'].apply(get_age)","010aa715":"train_d= train_data.copy()","6f33adb9":"sns.countplot(x='Survived', hue='get_age',data=train_d,palette='rainbow')","fc1faaca":"ages = pd.get_dummies(train_data['get_age'],prefix='age',drop_first=True)\nages_test = pd.get_dummies(test_data['get_age'],prefix='age',drop_first=True)","0efdf941":"ages.shape","00a04287":"ages_test.shape","ace6a2b0":"trainor = pd.concat([train_data,ages],axis=1)","9bbe0234":"testor= pd.concat([test_data,ages_test],axis=1)","00e1dbc5":"print(trainor.shape)\nprint(testor.shape)","cdd01dd0":"def get_embark(embark):\n    if embark == 'S':\n        return 0\n    elif embark  == 'C':\n        return 1\n    else:\n        return 2","d551f8c7":"trainor['Embarked'] = trainor['Embarked'].apply(get_embark)","7e32df9c":"testor['Embarked'] = testor['Embarked'].apply(get_embark)","5634dd7f":"def get_person(pers):\n    age, sex = pers\n    \n    if age < 16: \n        return 3\n    else: \n        return sex","cc811213":"trainor['person'] = trainor[['Age','Sex']].apply(get_person,axis=1)","7c889f2b":"testor['person'] = testor[['Age','Sex']].apply(get_person,axis=1)","6c0034c4":"trainor['person'].value_counts()","a39d8d18":"testor['person'].value_counts()","42e19249":"trainor[train_da['person']== 3].Survived.value_counts().plot(kind='barh')","1af28e92":"trainor.hist('person');","72b73870":"trainor.head()","59d4d537":"sns.countplot(x='Survived', hue='person',data=trainor,palette='rainbow')","794308fa":"print(train_da.shape)\nprint(test_da.shape)","c2863f31":"X_train = trainor.drop(['PassengerId',\"Survived\",'Name','Age','Ticket','get_age'],axis=1)\nY_train = trainor[\"Survived\"]\nX_test  = testor.drop(['PassengerId','Name','Age','Ticket','get_age'],axis=1).copy()","6ef4bc9a":"X_train.head()","9d2f5532":"X_test.head()","e6588adb":"from sklearn.linear_model import LogisticRegression","6f4523a8":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)","dbdf9056":"y_pred = logreg.predict(X_test)","ceaaaaca":"logreg.score(X_train,Y_train)","a7198096":"y_pred","267f23a0":"from sklearn.neighbors import KNeighborsClassifier","7c6c3c1c":"knn = KNeighborsClassifier(n_neighbors = 3) \nknn.fit(X_train, Y_train)  \nY_pred = knn.predict(X_test)  \nknn_round = round(knn.score(X_train, Y_train) * 100, 2)\nknn_round","9178acb2":"knn = KNeighborsClassifier(n_neighbors = 5) \nknn.fit(X_train, Y_train)  \nY_pred = knn.predict(X_test)  \nknn_round = round(knn.score(X_train, Y_train) * 100, 2)\nknn_round","67610bf8":"submission = pd.DataFrame({\n        \"PassengerId\": test_da[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('titanic_submission.csv', index=False)","36ca0b6b":"submit = pd.read_csv('titanic_submission.csv')\nsubmit","f42bfaee":"The heatmap shows that there is a strong correlation between the columns Pclass and Survived. \nThe below bar plot shows that as far as Pclass is concerned the largest group that didn't survive were in 3rd class.","3307eea0":"# 0 =didn't survive\n# 0.0=Male, 1.0=female","21615bde":"Convert Categorical Columns\nNon-numerical data needs to be converted numerically so that it can be processed by the models. For the Name column, not much can be done with the actual names but the listed titles can be grouped accordingly.\nName","8f1e5993":"Fare\nThe column Fare has 1 null value. I'll assign the median Fare value to the null value.\n\n","f30501cc":"Exploratory Data Analysis\nExploratory data analysis is conducted on the dataset before a model is created to get an idea visually of what the data can tell us, i.e., the number of survivors in each class.","75241caf":"Age\nAge in the traing set has 177 missing values out of 891 observations which is 19.9% of the dataset. I will assign the median age of everyone to the missing values.","36814721":"The largest group in the dataset is males.","73b6a790":"Missing Values\nThere are missing values in the following columns: Age, Cabin and Embarked. I will address the missing values by either substituting the null values with the most common value or the median value for that column. In addition, where there's nothing that can be done to realistically address the null value without distorting the data I will delete the column.","ddfb18ea":"Sex\nSex column is non-numerical so it needs to be converted.","439f953e":"Embarked\nThe column needs to be converted to a numeric value","07f11b01":"The largest age group on the Titanic based on the data is around 24yrs. old of which there are over 70 individuals.","a7bd8082":"Logisitic Regression","1b62e40e":"The Titanic dataset is a classification problem because we are creating a model to predict whether a passenger survived or not. Specifically, this is a binary classification problem because there are only 2 options to consider: survived or not. Under the Survived column, 0 stands for didn't survive and 1 means survived.","ec31a821":"The below bar plot shows that the highest number of individuals that didn't survive had the title Mr. in the Name category.","c7aecf8a":"Embarked","6f44e6dc":"Age\nThe Age feature has numerous unique values so it would be helpful to group the ages. Based on the below countplot, the largest age group that didn't survive was the age group 27 to 33. This age group also had the largest number of survivors.","00cc0f27":"Cabin.\nThe column Cabin has 687 missing values which is 77.1% of the training dataset. Not much can be done to rectify the problem so I will delete the column completely.\n****\n","a46f332c":"Create column to determine the number of children that survived. Based on the below bar plot, luckily more children survived than not.","e539bbea":"\nEmbarked has 2 missing values in the training set. 'S' has the most values so I'll assign the 2 missing values an 'S'.","cb22bedf":"K Nearest Neighbors Classifier\nI applied the KNN model to the data and got an accuracy of 87.65% with 3 neighbors. I increased the number of neighbors to 5 and the accuracy decreased.","ac781a30":"This dataframe tells us what percentage the missing values are in a specific column, i.e., Cabin has a total of 687 null values in the training dataset which consitutes 77.1% of the data in that column.","dcf45d80":"The boxplot shows us that the median age in 1st class was around 38 years old. The median age in 2nd class was around 29 years and the median age in 3rd class was around 25 years old. The youngest age group was in 3rd class.\n\n","ca2eae5e":"The heatmap gives us a visual of the proportion of missing values (yellow lines) in relation to the dataset. Cabin has alot of missing values."}}