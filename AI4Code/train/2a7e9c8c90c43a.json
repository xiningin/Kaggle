{"cell_type":{"9d1f9875":"code","07ee5132":"code","b0e90ada":"code","6841081a":"code","44ceb52f":"code","07c0f4ea":"markdown","5c9c680b":"markdown","d918fe8c":"markdown","ac5fd9b0":"markdown","46369818":"markdown"},"source":{"9d1f9875":"import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\n\n#for splitting given data and checking our results without making submission:\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import average_precision_score\nfrom sklearn.metrics import recall_score\n\n#for optimizing parameters of our RandomForestClassifier:\nfrom sklearn.model_selection import GridSearchCV\n\ntrain_data = pd.read_csv(\"..\/input\/train.csv\")","07ee5132":"#X - labels and y - features\nX = train_data.drop([\"Survived\", \"Name\", \"Ticket\", \"Cabin\", \"Embarked\"], axis=1)\nX = X.replace([\"male\", \"female\"], [1, 0])\nX = X.fillna(X.Age.mean())\n\ny = train_data[\"Survived\"]","b0e90ada":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=11)\n\nclf = RandomForestClassifier(max_depth=5, n_estimators=40)\n#created classifier with most optimized parameters found by GridSearch\n\nclf.fit(X_train, y_train)\n\npred = clf.predict(X_test)\n\nprint(\"accuracy: \", accuracy_score(y_test, pred))\nprint(\"f1_score: \", f1_score(y_test, pred))\nprint(\"precision: \", average_precision_score(y_test, pred))\nprint(\"recall: \", recall_score(y_test, pred))","6841081a":"test_data = pd.read_csv(\"..\/input\/test.csv\")\n\ntest_data = test_data.drop([\"Name\", \"Ticket\", \"Cabin\", \"Embarked\"], axis=1)\ntest_data = test_data.replace([\"male\", \"female\"], [1, 0])\ntest_data = test_data.fillna(X.Age.mean())\n\nclf.fit(X, y)","44ceb52f":"PassengerId = test_data['PassengerId']\n\npredictions = clf.predict(test_data)\npd.DataFrame({ \"PassengerId\": PassengerId, \"Survived\": predictions }).to_csv(\"submission.csv\", index=False)","07c0f4ea":"And split it in to be able to make intermediate evaluation of our classifier","5c9c680b":"Then we should do some preprocession and delete irrelevant data(some of which is not totally irrelevant, I just don't know how to process it yet ;P)","d918fe8c":"Predicting test_data labels and making submission","ac5fd9b0":"Fitting our classifier on whole training set","46369818":"This is my first Jupyter Notebook in which I show how I used RandomForestClassifier to make submission for[ Titanic Competition](https:\/\/www.kaggle.com\/c\/titanic).\n\nFirst of all, we need to import necesery libraries and our data:"}}