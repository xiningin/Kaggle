{"cell_type":{"1c74286c":"code","96b0a7a4":"code","4fb2070a":"code","56be9f72":"code","6066c410":"code","799fc320":"code","cc8da4d2":"code","4ea4d299":"code","94016dd0":"code","c82f1e9b":"code","26389ea2":"code","b23e462d":"code","c58eaffc":"code","7ffc7bbc":"code","2fc36bc8":"code","3d4c7e8d":"code","fc053d92":"code","448ebb70":"code","392d57a0":"code","62c131d5":"code","b6931490":"code","88620d9d":"code","b7af90c8":"code","feb0fefc":"code","08fd845c":"code","61badef8":"code","1393cd67":"code","6353aa2b":"code","9d597178":"markdown","e4a6fa96":"markdown","94d9e255":"markdown","df56f1fb":"markdown","5b816bd2":"markdown","e4a38c83":"markdown","0034ba97":"markdown","53f5ed0f":"markdown","8606436c":"markdown","b1c2e9f9":"markdown"},"source":{"1c74286c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport seaborn as sns\nfrom plotly import tools\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\n\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.figure_factory as ff\nimport math\nimport warnings\nwarnings.filterwarnings('ignore')\n\ncolor = sns.color_palette()\n%matplotlib inline\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\nimport folium\n\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 9999\n\ndf = pd.read_csv('..\/input\/2016 School Explorer.csv')\ndf1 = pd.read_csv('..\/input\/D5 SHSAT Registrations and Testers.csv')\n\n\ndf.head(2)","96b0a7a4":"\ndf.shape","4fb2070a":"df.describe(include='all')","56be9f72":"# Define Function\n\ndef floater(x):\n    return float(x.strip('%'))\n\n# Apply Function\n\ndf[\"Percent Asian\"] = df[\"Percent Asian\"].astype(str).apply(floater) \ndf[\"Percent Black\"] = df[\"Percent Black\"].astype(str).apply(floater)\ndf[\"Percent Hispanic\"] = df[\"Percent Hispanic\"].astype(str).apply(floater)\ndf[\"Percent White\"] = df[\"Percent White\"].astype(str).apply(floater)\ndf[\"Percent Others\"] = (df[\"Percent Black\"] + df[\"Percent Hispanic\"] + df[\"Percent White\"] + df[\"Percent Asian\"]).sub(100).mul(-1) # Define Percent Other\ndf[\"Rigorous Instruction %\"] = df[\"Rigorous Instruction %\"].astype(str).apply(floater)\ndf[\"Collaborative Teachers %\"] = df[\"Collaborative Teachers %\"].astype(str).apply(floater)\ndf['School Income Estimate'] = df['School Income Estimate'].str.replace(',', '')\ndf['School Income Estimate'] = df['School Income Estimate'].str.replace('$', '')\ndf['School Income Estimate'] = df['School Income Estimate'].str.replace(' ', '')\ndf['School Income Estimate'] = df['School Income Estimate'].astype(str).apply(floater)\ndf[\"Supportive Environment %\"] = df[\"Supportive Environment %\"].astype(str).apply(floater)\ndf[\"Effective School Leadership %\"] = df[\"Effective School Leadership %\"].astype(str).apply(floater)\ndf[\"Strong Family-Community Ties %\"] = df[\"Strong Family-Community Ties %\"].astype(str).apply(floater)\ndf[\"Trust %\"] = df[\"Trust %\"].astype(str).apply(floater)\ndf[\"Student Attendance Rate\"] = df[\"Student Attendance Rate\"].astype(str).apply(floater)\ndf[\"Percent of Students Chronically Absent\"] = df[\"Percent of Students Chronically Absent\"].astype(str).apply(floater)","6066c410":"#Overview of the data\nd3 = pd.DataFrame(df.groupby(['City']).mean())\nd3[['Economic Need Index','School Income Estimate','Percent Asian','Percent Black','Percent Hispanic','Percent White', 'Percent Others']]","799fc320":"missing_df = df.isnull().sum(axis=0).reset_index()\nmissing_df.columns = ['column_name', 'missing_count']\nmissing_df = missing_df.ix[missing_df['missing_count']>0]\nmissing_df = missing_df.sort_values(by='missing_count')\n\nind = np.arange(missing_df.shape[0])\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(12,18))\nrects = ax.barh(ind, missing_df.missing_count.values, color='blue')\nax.set_yticks(ind)\nax.set_yticklabels(missing_df.column_name.values, rotation='horizontal')\nax.set_xlabel(\"Count of missing values\")\nax.set_title(\"Number of missing values in each column\")\nplt.show()","cc8da4d2":"total = df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent Missing'])\nmissing_data.head(25)","4ea4d299":"df[\"Economic Need Index\"] = df[\"Economic Need Index\"].fillna(df[\"Economic Need Index\"].mean())\ndf[\"School Income Estimate\"] = df[\"School Income Estimate\"].fillna(df[\"School Income Estimate\"].mean())\ndf[\"Student Attendance Rate\"] = df[\"Student Attendance Rate\"].fillna(df[\"Student Attendance Rate\"].mean())\ndf[\"Percent of Students Chronically Absent\"] = df[\"Percent of Students Chronically Absent\"].fillna(df[\"Percent of Students Chronically Absent\"].mean())\ndf[\"Rigorous Instruction %\"] = df[\"Rigorous Instruction %\"].fillna(df[\"Rigorous Instruction %\"].mean())\ndf[\"Collaborative Teachers %\"] = df[\"Collaborative Teachers %\"].fillna(df[\"Collaborative Teachers %\"].mean())\ndf[\"Average ELA Proficiency\"] = df[\"Average ELA Proficiency\"].fillna(df[\"Average ELA Proficiency\"].mean())\ndf[\"Average Math Proficiency\"] = df[\"Average Math Proficiency\"].fillna(df[\"Average Math Proficiency\"].mean())\ndf[\"Percent Asian\"] = df[\"Percent Asian\"].fillna(df[\"Percent Asian\"].mean())\ndf[\"Percent Black\"] = df[\"Percent Black\"].fillna(df[\"Percent Black\"].mean())\ndf[\"Percent Hispanic\"] = df[\"Percent Hispanic\"].fillna(df[\"Percent Hispanic\"].mean())\ndf[\"Percent White\"] = df[\"Percent White\"].fillna(df[\"Percent White\"].mean())\ndf[\"Percent Others\"] = df[\"Percent Others\"].fillna(df[\"Percent Others\"].mean())\ndf[\"Rigorous Instruction %\"] = df[\"Rigorous Instruction %\"].fillna(df[\"Rigorous Instruction %\"].mean())\ndf[\"Collaborative Teachers %\"] = df[\"Collaborative Teachers %\"].fillna(df[\"Collaborative Teachers %\"].mean())\ndf[\"Supportive Environment %\"] = df[\"Supportive Environment %\"].fillna(df[\"Supportive Environment %\"].mean())\ndf[\"Effective School Leadership %\"] = df[\"Effective School Leadership %\"].fillna(df[\"Effective School Leadership %\"].mean())\ndf[\"Strong Family-Community Ties %\"] = df[\"Strong Family-Community Ties %\"].fillna(df[\"Strong Family-Community Ties %\"].mean())\ndf[\"Trust %\"] = df[\"Trust %\"].fillna(df[\"Trust %\"].mean())","94016dd0":"trace1 = go.Scatter(\n    y = df[\"Latitude\"].values,\n    x = df[\"Longitude\"].values,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color = df[\"District\"].values, #set color equal to a variable\n        colorscale='Reds',\n        #showscale=True\n    ),\n    text = df[\"School Name\"].values\n)\nlayout = go.Layout(\n    autosize=False,\n    #plot_bgcolor='rgba(240,240,240,1)',\n    plot_bgcolor='rgba(255,160,122,0.1)',\n    width=1000,\n    height=900,\n    title = \"Location of schools (district)\"\n)\ndata = [trace1]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='scatter-plot-with-colorscale')","c82f1e9b":"df[\"School Income Estimate\"] = df[\"School Income Estimate\"].apply(lambda x: float(str(x).replace(\"$\",\"\").replace(\",\",\"\")))\n\ntrace1 = go.Scatter(\n    y = df[\"Latitude\"].values,\n    x = df[\"Longitude\"].values,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color = df[\"School Income Estimate\"].values, #set color equal to a variable\n        colorscale='YlOrRd',\n        showscale=True,\n        reversescale=True\n    ),\n    text = df[\"School Name\"].values\n)\nlayout = go.Layout(\n    autosize=False,\n    plot_bgcolor='rgba(255,160,122,0.1)',\n    width=1000,\n    height=900,\n    title = \"Location of schools (Income)\"\n)\ndata = [trace1]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='scatter-plot-with-colorscale')","26389ea2":"f, ax = plt.subplots(1, 2, figsize = (15, 7))\nf.suptitle(\"Community School?\", fontsize = 18.)\n_ = df['Community School?'].value_counts().plot.bar(ax = ax[0], rot = 0, color = (sns.color_palette()[0], sns.color_palette()[2])).set(xticklabels = [\"No\", \"Yes\"])\n_ = df['Community School?'].value_counts().plot.pie(labels = (\"No\", \"Yes\"), autopct = \"%.2f%%\", label = \"\", fontsize = 13., ax = ax[1],\\\ncolors = (sns.color_palette()[0], sns.color_palette()[2]), wedgeprops = {\"linewidth\": 1.5, \"edgecolor\": \"#F7F7F7\"}), ax[1].texts[1].set_color(\"#F7F7F7\"), ax[1].texts[3].set_color(\"#F7F7F7\")","b23e462d":"target_list = ['Average ELA Proficiency','Average Math Proficiency']\n\nfig,ax = plt.subplots(nrows=3, ncols=2, figsize=(24,24))\nplt.suptitle('Community vs. Non-community schools')\n\nsns.boxplot(x=\"Community School?\",y=\"Economic Need Index\",\n            data=df,ax=ax[0,0],palette='hls')\nsns.boxplot(x=\"Community School?\",y=\"School Income Estimate\",\n            data=df,ax=ax[0,1],palette='hls')\n\nsns.distplot(df[target_list[0]][df['Community School?']=='Yes'],\n             ax=ax[1,0],label='Yes')\nsns.distplot(df[target_list[0]][df['Community School?']=='No'],\n             ax=ax[1,0],label='Yes')\nax[1,0].legend()\n\nsns.distplot(df[target_list[1]][df['Community School?']=='Yes'],\n             ax=ax[1,1],color='#3636ff',label='Yes')\nsns.distplot(df[target_list[1]][df['Community School?']=='No'],\n             ax=ax[1,1],label='No')\nax[1,0].legend()\n\nsns.countplot(x=\"Community School?\",hue=\"Student Achievement Rating\", \n              data=df,ax=ax[2,0],palette='hls')\nsns.countplot(x=\"Community School?\",hue=\"Trust Rating\", \n              data=df,ax=ax[2,1],palette='bwr');","c58eaffc":"plt.figure(figsize=(14,8))\nsns.countplot(df['Grade Low'])\nplt.show()","7ffc7bbc":"plt.figure(figsize=(14,8))\nsns.countplot(df['Grade High'])\nplt.show()","2fc36bc8":"plt.figure(figsize=(25,12))\nsns.barplot(x=df['City'].value_counts().index, y=df['City'].value_counts().values, data=df, \n            order=pd.value_counts(df['City']).index)\nplt.xticks(fontsize = 16, rotation='vertical')\nplt.show()","3d4c7e8d":"fig,ax = plt.subplots(1, figsize=(14,7))\ndf[['Average ELA Proficiency','Average Math Proficiency']]\\\n.plot.hist(bins=100,alpha=0.8,figsize=(14,5),ax=ax,\n           color=['skyblue','lightcoral'],\n           title='Average Proficiency for Schools')\nax.set_xlabel('Average Proficiency Levels')\n\nfig,ax = plt.subplots(1, figsize=(14,7))\nax.scatter(df['Economic Need Index'],\n           df['Average Math Proficiency'],\n           label='Math',color='lightcoral')\nax.scatter(df['Economic Need Index'],\n           df['Average ELA Proficiency'],\n           label='ELA',color='skyblue')\nax.set_xlabel('Economic Need Index')\nax.set_ylabel('Average ELA Proficiency')\nax.legend()\nplt.suptitle('Economic Need Index & Education');","fc053d92":"f, axes = plt.subplots(2, 2, figsize=(19, 9), sharex=True)\nsns.despine(left=True)\n\nsns.regplot(x=df[\"Economic Need Index\"], y=df[\"Percent Asian\"], color='goldenrod', ax=axes[0, 0], line_kws={\"color\": \"black\"})\nsns.regplot(x=df[\"Economic Need Index\"], y=df[\"Percent White\"], color='c', ax=axes[0, 1], line_kws={\"color\": \"black\"})\nsns.regplot(x=df[\"Economic Need Index\"], y=df[\"Percent Black\"], color='khaki', ax=axes[1, 0], line_kws={\"color\": \"black\"})\nsns.regplot(x=df[\"Economic Need Index\"], y=df[\"Percent Hispanic\"], color='lightcoral', ax=axes[1, 1], line_kws={\"color\": \"black\"})\n\naxes[0,0].set_title('Ecnomic Need Index (Asian)')\naxes[0,1].set_title('Ecnomic Need Index (White)')\naxes[1,0].set_title('Ecnomic Need Index (Black)')\naxes[1,1].set_title('Ecnomic Need Index (Hispanic)')\n\nplt.subplots_adjust(hspace=0.4)","448ebb70":"df2013 = df1[df1['Year of SHST'] == 2013]\ndf2014 = df1[df1['Year of SHST'] == 2014]\ndf2015 = df1[df1['Year of SHST'] == 2015]\ndf2016 = df1[df1['Year of SHST'] == 2016]\n\ntotal =  [df2013['Number of students who registered for the SHSAT'].sum(), \n          df2014['Number of students who registered for the SHSAT'].sum(),\n          df2015['Number of students who registered for the SHSAT'].sum(),\n          df2016['Number of students who registered for the SHSAT'].sum()]\n\n\nyears = [2013,2014,2015,2016]\n\ntrace = go.Bar(\n                x = years,\n                y = total,\n                marker = dict(color = 'light blue',\n                             line=dict(color='black',width=1.5)),\n                )\n\ndata = [trace]\nlayout = go.Layout(barmode = \"group\", xaxis= dict(title= 'Year',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Number of Students',ticklen= 5,zeroline= False), \n                  title='Total students registered')\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","392d57a0":"trace = go.Bar(\n                x = years,\n                y = total,\n                marker = dict(color = 'light blue',\n                             line=dict(color='black',width=1.5)),\n                )\n\ndata = [trace]\nlayout = go.Layout(barmode = \"group\", xaxis= dict(title= 'Year',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Number of Students',ticklen= 5,zeroline= False), \n                  title='Total students who took SHSAT')\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","62c131d5":"plt.figure(figsize=(14,8))\nplt.title('Economic Need Index')\nsns.distplot(df[\"Economic Need Index\"])\nplt.show()","b6931490":"data = [\n    {\n        'x': df[\"Longitude\"],\n        'y': df[\"Latitude\"],\n        'text': df[\"School Name\"],\n        'mode': 'markers',\n        'marker': {\n            'color': df[\"Economic Need Index\"].mul(100),\n            'size': df[\"School Income Estimate\"]\/5000,\n            'showscale': True,\n            'colorscale':'Portland'\n        }\n    }\n]\n\nlayout= go.Layout(\n    title= 'Economic Need Index',\n    xaxis= dict(\n        title= 'Longitude'\n    ),\n    yaxis=dict(\n        title='Latitude'\n    ))\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='scatter_hover_labels')","88620d9d":"plt.figure(figsize=(14,8))\nsns.regplot(x='School Income Estimate', y='Economic Need Index',  data =df)\nplt.show()","b7af90c8":"temp = df[\"Supportive Environment Rating\"].value_counts()\nfig = {\n  \"data\": [\n    {\n      \"values\": temp.values,\n      \"labels\": temp.index,\n      \"domain\": {\"x\": [0, 1]},\n      \"hole\": .4,\n      \"type\": \"pie\"\n    },\n    \n    ],\n  \"layout\": {\n        \"title\":\"Supportive Environment Rating\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 17\n                },\n                \"showarrow\": False,\n                \"text\": \"Rating\",\n                \"x\": 0.5,\n                \"y\": 0.5\n            }\n            \n        ]\n    }\n}\niplot(fig, filename='donut')","feb0fefc":"temp = df[\"Student Achievement Rating\"].value_counts()\nfig = {\n  \"data\": [\n    {\n      \"values\": temp.values,\n      \"labels\": temp.index,\n      \"domain\": {\"x\": [0, 1]},\n      \"hole\": .4,\n      \"type\": \"pie\"\n    },\n    \n    ],\n  \"layout\": {\n        \"title\":\"Student Achievement Rating\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 17\n                },\n                \"showarrow\": False,\n                \"text\": \"Rating\",\n                \"x\": 0.5,\n                \"y\": 0.5\n            }\n            \n        ]\n    }\n}\niplot(fig, filename='donut')","08fd845c":"df[target_list].plot.hist(bins=100,alpha=0.8,figsize=(14,5),\n                                       title='Average Proficiency for Schools');","61badef8":"#plt.style.use('seaborn-whitegrid')\nplt.figure(figsize=(14,17))\nsns.countplot(y=\"School name\", data=df1, palette='hls')\nplt.title('D5 SHSAT. Number of Notes by School', fontsize=20);","1393cd67":"plt.figure(figsize=(14,5))\nsns.countplot(y=\"Year of SHST\",hue=\"Grade level\",data=df1, palette='hls')\nplt.title('Year Distribution. D5 SHSAT', fontsize=20);","6353aa2b":"df2 = df.iloc[:,16:36]\n#Correlation Matrix\ncorr = df2.corr()\ncorr = (corr)\n\nsns.set(font_scale=1.15)\nplt.figure(figsize=(14, 10))\nsns.heatmap(corr, vmax=.8, linewidths=0.01,\n            square=True,annot=True,cmap='YlGnBu',linecolor=\"black\")\nplt.title('Correlation between features');","9d597178":"# Next steps\n\n*  More data visualizations\n*  Feature Engineering\n\n\nPlease upvote\/comment if you liked it :-)","e4a6fa96":"\n\n# Data Cleaning","94d9e255":"\n\nThere are lot of '%' in our data. Let's remove it","df56f1fb":"# If you like the Kernel, please upvote\/comment as it will help me stay motivated...Thanks :-) \n\n\n\n\n**Overview**\n\nPASSNYC is a not-for-profit organization that facilitates a collective impact that is dedicated to broadening educational opportunities for New York City's talented and underserved students. New York City is home to some of the most impressive educational institutions in the world, yet in recent years, the City\u2019s specialized high schools - institutions with historically transformative impact on student outcomes - have seen a shift toward more homogeneous student body demographics.\n\nPASSNYC uses public data to identify students within New York City\u2019s under-performing school districts and, through consulting and collaboration with partners, aims to increase the diversity of students taking the Specialized High School Admissions Test (SHSAT). By focusing efforts in under-performing areas that are historically underrepresented in SHSAT registration, we will help pave the path to specialized high schools for a more diverse group of students.\n\n**Problem Statement**\n\nPASSNYC and its partners provide outreach services that improve the chances of students taking the SHSAT and receiving placements in these specialized high schools. The current process of identifying schools is effective, but PASSNYC could have an even greater impact with a more informed, granular approach to quantifying the potential for outreach at a given school. Proxies that have been good indicators of these types of schools include data on English Language Learners, Students with Disabilities, Students on Free\/Reduced Lunch, and Students with Temporary Housing.\n\nPart of this challenge is to assess the needs of students by using publicly available data to quantify the challenges they face in taking the SHSAT. The best solutions will enable PASSNYC to identify the schools where minority and underserved students stand to gain the most from services like after school programs, test preparation, mentoring, or resources for parents.","5b816bd2":"# Economic Need Index","e4a38c83":"# Data Visualization","0034ba97":"School Income Estimate and Economic need Index are inversely proportional, which makes sense\n\n# Rating\n\n**Framework for Great Schools**\n\nThe Framework for Great Schools sets forth six elements\u2014Rigorous Instruction, Collaborative Teachers, Supportive Environment, Effective School Leadership, Strong Family-Community Ties, and Trust\u2014that drive student achievement and school improvement.\nThe School Quality Reports share ratings and information on how schools are performing on the six Framework elements.\n\n1. **Rigorous Instruction**: This section looks at whether curriculum and instruction are designed to engage students, foster critical-thinking skills, and are aligned to the Common Core. This section draws upon data from the Quality Review and the NYC School Survey.\n\n2. **Collaborative Teachers**: This section looks at whether teachers participate in opportunities to develop, grow, and contribute to the continuous improvement of the school community. This section draws upon data from the Quality Review and the NYC School Survey.\n\n3. **Supportive Environment**: This section looks at whether the school establishes a culture where students feel safe, challenged to grow, and supported to meet high expectations. This section draws upon data from the Quality Review, the NYC School Survey, chronic absenteeism (or average change in student attendance, for some school types), and movement of students with disabilities to less restrictive environments.\n\n4. **Effective School Leadership**: This section looks at whether school leadership inspires the school community with a clear instructional vision and effectively distributes leadership to realize this vision. This section draws upon data from the NYC School Survey and the Quality Review.\n\n5. **Strong Family-Community Ties**: This section looks at whether the school forms effective partnerships with families to improve the school. This section draws NYC Department of Education 2 upon data from the NYC School Survey and the Quality Review.\n\n6. **Trust**: This section looks at whether relationships between administrators, educators, students, and families are based on trust and respect. This section draws upon data from the NYC School Survey.\n","53f5ed0f":"\n# Missing Values\n\n\nData can have missing values for a number of reasons such as observations that were not recorded and data corruption.\n\nHandling missing data is important as many machine learning algorithms do not support data with missing values. Let's find out missing values in our dataset","8606436c":"\nLet us fill the missing values by inserting mean","b1c2e9f9":"\n![](http:\/\/i.imgur.com\/x1IVrsd.png)"}}