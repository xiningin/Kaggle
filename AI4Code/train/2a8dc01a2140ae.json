{"cell_type":{"b9ac7893":"code","bfd6f619":"code","50a8436d":"code","48740c32":"code","d8630ffc":"code","c82ce612":"code","4c918a5b":"code","a26675ce":"code","e0066eba":"code","51d38ca0":"code","3f4cfce8":"code","b69eb28e":"code","4f90aab0":"code","cce6ddaf":"code","5b880f41":"code","cc584c6b":"code","53fe89f7":"code","a4899ff0":"code","f99b831c":"code","f98cbf2d":"code","7a195d43":"code","a52420ab":"code","194d80b4":"code","cd6ac52e":"code","15ef3f5c":"code","cc318092":"code","581bed64":"code","79c51555":"code","9a56f4de":"code","8dbee9a8":"code","5952eb66":"code","22ea7f84":"code","0a08e3a0":"markdown"},"source":{"b9ac7893":"from __future__ import print_function\n\nfrom keras.utils import np_utils\nfrom keras import applications\nimport cv2 \nfrom os import listdir\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Input\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten, Activation, AveragePooling2D,BatchNormalization\nfrom keras.models import Model\nimport pywt\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport tensorflow as tf\nimport random\nimport seaborn as sns\nimport cv2\nimport os\n\nfrom pathlib import Path\nfrom keras.utils import to_categorical\nfrom collections import Counter\nfrom plotly.subplots import make_subplots\nfrom keras.layers.experimental import preprocessing as ps\nfrom keras.callbacks import EarlyStopping\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix","bfd6f619":"\n\npath = Path(\"\/kaggle\/input\/covid-wwo-pneumonia-chest-xray\/Data\")\ncovid_without_PNEUMONIA_train_path = path \/ 'train' \/ 'covid_without_PNEUMONIA'\ncovid_with_PNEUMONIA_train_path = path \/ 'train' \/ 'covid_with_PNEUMONIA'\n\ncovid_without_PNEUMONIA_test_path = path \/ 'test' \/ 'covid_without_PNEUMONIA'\ncovid_with_PNEUMONIA_test_path = path \/ 'test' \/ 'covid_with_PNEUMONIA'\n","50a8436d":"covid_without_PNEUMONIA_path = [covid_without_PNEUMONIA_train_path, covid_without_PNEUMONIA_test_path]\ncovid_with_PNEUMONIA_path = [covid_with_PNEUMONIA_train_path, covid_with_PNEUMONIA_test_path]","48740c32":"print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\n","d8630ffc":"np.random.seed(42)\nrandom.seed(42)","c82ce612":"label2category = {'covid_without_PNEUMONIA': 0, 'covid_with_PNEUMONIA': 1}\ncategory2label = {0: 'covid_without_PNEUMONIA', 1: 'covid_with_PNEUMONIA'}","4c918a5b":"data = []\n\nfor path in covid_without_PNEUMONIA_path:\n    for img in path.glob('*.jpeg'):\n        data.append({'img_path': str(img), 'label': 'covid_without_PNEUMONIA'})\n    \nfor path in covid_with_PNEUMONIA_path:\n    for img in path.glob('*.jpeg'):\n        data.append({'img_path': str(img), 'label': 'covid_with_PNEUMONIA'})\n        \n# np.random.shuffle(data)","a26675ce":"def counter_label(data=None, key=None, index=None):\n    label = []\n\n    for value in data:\n        label.append(value[key])\n\n    return Counter(label)","e0066eba":"# counter_df = counter_df(data=data, key='label', index='without_augmentation')\nimg_l_counter = counter_label(data, 'label')\nkeys = list(img_l_counter.keys())\nvalues = list(img_l_counter.values())\n\npx.bar(x=keys, y=values, color=keys, width=800, height=400)","51d38ca0":"plt.figure(figsize=(20,7))\n\nfor i, data_ in enumerate(data[:10]):\n    path, label = data_['img_path'], data_['label']\n    plt.subplot(2,5,i+1)\n    img = cv2.imread(path)\n    plt.imshow(img)\n    plt.xlabel(label)\n    \nplt.show()","3f4cfce8":"aug_model = Sequential()\naug_model.add(ps.RandomFlip())","b69eb28e":"%%time\n\nimages_array = []\nimages_label = []\n\nIMG_SIZE = (64,64)\n\nfor data_ in data:\n    category = label2category[data_['label']]\n    label = to_categorical(category, 2)\n    img = cv2.imread(data_['img_path'])\n\n    if category == 0:\n        for i in range(2):\n            batch = tf.expand_dims(img, 0)\n            aug_img = aug_model(batch)\n            aug_img = np.array(aug_img[0])\n            img = cv2.resize(aug_img, IMG_SIZE)\n            img = img \/ 255\n            images_array.append(img)\n            images_label.append(label)\n\n    else:\n\n        img = cv2.resize(img, IMG_SIZE)\n        img = img \/ 255\n        images_array.append(img)\n        images_label.append(label)","4f90aab0":"images_array = np.array(images_array)\nimages_label = np.array(images_label)\n\nprint('shape of images array: {}'.format(images_array.shape))\nprint('shape of images label: {}'.format(images_label.shape))","cce6ddaf":"def to_labels(labels):\n    label_list = []\n    for label in labels:\n        am = label.argmax()\n        label_list.append(category2label[am])\n        \n    return Counter(label_list)","5b880f41":"img_l_counter = to_labels(images_label)\nkeys = list(img_l_counter.keys())\nvalues = list(img_l_counter.values())\n\npx.bar(x=keys, y=values, color=keys, width=800, height=400)","cc584c6b":"x_train, x_test, y_train, y_test = train_test_split(images_array, images_label, test_size=0.2, random_state=10)","53fe89f7":"print('train input shape: {}'.format(x_train.shape))\nprint('train output shape: {}'.format(y_train.shape))\nprint('test input shape: {}'.format(x_test.shape))\nprint('test output shape: {}'.format(y_test.shape))","a4899ff0":"model = Sequential()\n\nmodel.add(Conv2D(32, (3,3), input_shape=(64,64,3), activation='relu'))\n# model.add(BatchNormalization())\nmodel.add(MaxPooling2D((2,2), strides=(1,1), padding='same'),)\n\nmodel.add(Conv2D(64, (3,3), activation='relu'),)\n# model.add(BatchNormalization())\nmodel.add(MaxPooling2D((2,2), strides=(1,1), padding='same'),)\n\nmodel.add(Conv2D(128, (3,3), activation='relu'),)\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2,2), strides=(1,1), padding='same'),)\n\n\nmodel.add(Conv2D(256, (3,3), activation='relu'),)\n# model.add(BatchNormalization())\nmodel.add(MaxPooling2D((2,2), strides=(1,1), padding='same'),)\n\nmodel.add(Conv2D(512, (3,3), activation='relu'),)\n# model.add(BatchNormalization())\nmodel.add(MaxPooling2D((2,2), strides=(1,1), padding='same'),)\n\nmodel.add(Flatten())\n\n\n# model.add(Dense(512, activation='relu'))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\n\n\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))","f99b831c":"model.summary()","f98cbf2d":"import keras\nkeras.utils.plot_model(\n    model,\n    to_file=\"model.png\",\n    show_shapes=True,\n    show_layer_names=True,\n    rankdir=\"TB\",\n    expand_nested=False,\n    dpi=96,\n)","7a195d43":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n# categorical_crossentropy\n# binary_crossentropy","a52420ab":"mdl = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=50)","194d80b4":"model.evaluate(x_test, y_test)","cd6ac52e":"from sklearn.metrics import classification_report\ny_pred = np.argmax(model.predict(x_test,batch_size=1), axis=1) \n\nprint('Classification Report')\ny_classes = [np.argmax(y, axis=None, out=None) for y in y_test]\nreport = classification_report(y_classes, y_pred, target_names=label2category.keys())\nprint(report)","15ef3f5c":"# Plot training & validation accuracy values\nplt.plot(mdl.history[\"accuracy\"])\nplt.plot(mdl.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\n\nplt.savefig('\/kaggle\/working\/Training_Valid_Accuray_legend.png')\nplt.show()","cc318092":"# Plot training & validation loss values\nplt.plot(mdl.history['loss'])\nplt.plot(mdl.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\n\nplt.savefig('\/kaggle\/working\/Training_valid_Loss_legend.png')\nplt.show()","581bed64":"yhat = model.predict(x_test)\nyhat = yhat.argmax(axis=1)\nytrue = y_test.argmax(axis=1)\n\nplt.figure(figsize=(5,4))\nplot_confusion_matrix(confusion_matrix(ytrue, yhat), figsize=(12,8), hide_ticks=True, cmap=plt.cm.Greens)\nplt.xticks(range(2), ['covid_without_PNEUMONIA', 'covid_with_PNEUMONIA'], fontsize=16)\nplt.yticks(range(2), ['covid_without_PNEUMONIA', 'covid_with_PNEUMONIA'], fontsize=16)\nplt.show()\nplt.savefig('\/kaggle\/working\/Confusion Matrix.png')","79c51555":"_loss, _val_loss = mdl.history['loss'], mdl.history['val_loss']\n_accuracy, _val_accuracy = mdl.history['accuracy'], mdl.history['val_accuracy']\n_epochs = range(len(_loss))","9a56f4de":"plt.figure(figsize=(20,5))\n\nplt.subplot(1,2,1)\nplt.plot(_epochs, _loss, label='loss')\nplt.plot(_epochs, _val_loss, label='val_loss')\n\nplt.xlabel('epochs')\nplt.ylabel('loss')\n\nplt.subplot(1,2,2)\nplt.plot(_epochs, _accuracy, label='accuracy')\nplt.plot(_epochs, _val_accuracy, label='val_accuracy')\n\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\n\nplt.show()\n# plt.savefig('\/kaggle\/working\/Accuray_Loss.png')","8dbee9a8":"model.save('\/kaggle\/working\/Final_Covid_w_wo_pneumonia.h5')","5952eb66":"model.save('\/kaggle\/working\/Final_Covid_w_wo_pneumonia.hdf5')","22ea7f84":"model.save('\/kaggle\/working\/saved_model')","0a08e3a0":"https:\/\/stackoverflow.com\/questions\/51704808\/what-is-the-difference-between-loss-accuracy-validation-loss-validation-accur"}}