{"cell_type":{"2d4c879f":"code","2b8a678b":"code","b3d31d67":"code","25fac2e0":"code","9b267503":"code","a4e9e3ec":"code","81d3dd74":"code","db5b34be":"code","0192262e":"code","b0ff91f5":"code","b7c0fe1f":"code","893a5ac4":"code","432e629e":"code","5eb84c39":"code","2b334606":"code","1800d1b5":"code","e1283735":"code","68b88107":"code","b82d1afa":"code","e610d8f9":"code","2e889f2b":"code","4d8b797d":"code","31f6dcd0":"code","b288cc69":"code","541eebc1":"code","0b226dbf":"code","043617f0":"code","38585ba3":"code","a886b23b":"code","15326f4b":"code","d012ddb6":"code","730b8889":"code","ccf7753d":"code","d4461813":"code","bc342203":"code","fca67af8":"code","43dbe530":"code","cb9583ac":"code","8b09af63":"code","f452fa49":"code","82988641":"code","58d9975c":"markdown","4b2ee4fc":"markdown","7e414fe8":"markdown","960e5df2":"markdown","3e49ff31":"markdown","1e653e6b":"markdown","b9d584e3":"markdown","7b424caa":"markdown","a788847b":"markdown","9dd2c1b9":"markdown","58af5898":"markdown","d0709d20":"markdown","6e1ed2f9":"markdown"},"source":{"2d4c879f":"#Import all necessery libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy import stats\nfrom pathlib import Path\n\n\n# Statistics\nfrom scipy.stats import norm\nfrom scipy import stats\n\n\n# Preprocessing\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import LabelEncoder\n\n#ML\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","2b8a678b":"train = pd.read_csv(r'..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain.head(2)","b3d31d67":"test = pd.read_csv(r'..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest.shape","25fac2e0":"test.OverallQual.isna().sum()","9b267503":"all_data = pd.concat((train.iloc[:,:80],test))\nall_data","a4e9e3ec":"missing_val= pd.DataFrame(all_data.isnull().sum()[all_data.isnull().sum()!=0]\\\n                          .sort_values(ascending = False)).rename(columns = {0:'num_miss'})\nmissing_val['missing_perc'] = (missing_val\/all_data.shape[0]*100).round(1)\nmissing_val = missing_val.query('missing_perc > 40')\nmissing_val","81d3dd74":"drop_cols = missing_val.index.to_list()\ndrop_cols","db5b34be":"all_data.drop(['Id'],axis=1,inplace=True)\nall_data.drop(columns=drop_cols,axis=1,inplace=True)","0192262e":"num_cols = all_data.select_dtypes(include=['number'])\ncat_cols = all_data.select_dtypes(include=['object'])\n\nprint(f'The dataset contains {len(num_cols.columns.tolist())} numerical columns \\\nand {len(cat_cols.columns.tolist())} categorical columns')","b0ff91f5":"num_corr_price = train.corr()['SalePrice'][:-1]\nnum_corr_price.sort_values(ascending = False)","b7c0fe1f":"num_missing_value = num_cols.isnull()\nnum_missing_value.head()","893a5ac4":"for column in num_missing_value.columns.values.tolist():\n    print(column)\n    print (num_missing_value[column].value_counts())\n    print(\"x\")","432e629e":"num_cols.replace([np.inf, -np.inf], np.nan)\nnum_cols.isna().sum().sort_values(ascending = False)","5eb84c39":"avg_LotFrontage  = num_cols['LotFrontage'].astype('float').mean(axis=0)\navg_LotFrontage","2b334606":"avg_GarageYrBlt = num_cols['GarageYrBlt'].astype('float').mean(axis=0)\navg_GarageYrBlt","1800d1b5":"avg_MasVnrArea = num_cols['MasVnrArea'].astype('float').mean(axis=0)\navg_MasVnrArea","e1283735":"num_cols[\"LotFrontage\"].replace(np.nan, avg_LotFrontage, inplace=True)\nnum_cols[\"GarageYrBlt\"].replace(np.nan, avg_GarageYrBlt, inplace=True)\nnum_cols[\"MasVnrArea\"].replace(np.nan, avg_MasVnrArea, inplace=True)","68b88107":"num_cols.isna().sum().sort_values(ascending = False)","b82d1afa":"best_features = num_corr_price[abs(num_corr_price) > 0.60].sort_values(ascending=False)\nprint(\"There are {} strongly correlated numerical features with SalePrice:\\n{}\"\\\n      .format(len(best_features), best_features))","e610d8f9":"num_cols['OverallQual'] = (num_cols['OverallQual']-num_cols['OverallQual'].mean())\/(num_cols['OverallQual'].std());\nnum_cols['GrLivArea'] = (num_cols['GrLivArea']-num_cols['GrLivArea'].mean())\/(num_cols['GrLivArea'].std());\nnum_cols['GarageArea'] = (num_cols['GarageArea']-num_cols['GarageArea'].mean())\/(num_cols['GarageArea'].std());","2e889f2b":"num_cols[['OverallQual','GrLivArea', 'GarageArea']]","4d8b797d":"cat_cols.isna().sum().sort_values(ascending = False)","31f6dcd0":"from sklearn.preprocessing import OneHotEncoder\n\n#first categorical data\noe_style = OneHotEncoder()\noe_results = oe_style.fit_transform(all_data[[\"Street\"]])\ndf_ohe1 = pd.DataFrame(oe_results.toarray(), columns=oe_style.categories_).astype(int)\ndf_ohe1.head(5)","b288cc69":"#second categorical data\noe_results = oe_style.fit_transform(all_data[[\"LandSlope\"]])\ndf_ohe2 = pd.DataFrame(oe_results.toarray(), columns=oe_style.categories_).astype(int)\ndf_ohe2.head(5)","541eebc1":"df1 = pd.concat([df_ohe1, df_ohe2], axis = 1)\ndf1.iloc[1460:,]","0b226dbf":"df2 = num_cols[['OverallQual','GrLivArea', 'GarageArea']]\ndf2.reset_index(inplace=True)\ndf2.iloc[1460:,]","043617f0":"# df1 = df1.loc[~df1.index.duplicated(keep='first')]\n# df2 = df2.loc[~df2.index.duplicated(keep='first')]","38585ba3":"df_final = pd.concat([df1, df2], axis=1)\ndf_final","a886b23b":"features = df_final.drop(columns='index')\nfeatures","15326f4b":"features","d012ddb6":"X = features[:train.shape[0]]\nX_train = features[:train.shape[0]]\nX_test = features[train.shape[0]:]\ny = train.SalePrice","730b8889":"y_test = y.iloc[:1459]","ccf7753d":"X_test.shape","d4461813":"reg_multiple = LinearRegression()\nreg_multiple.fit(X_train, y)","bc342203":"X_test = np.nan_to_num(X_test)","fca67af8":"y_pred=reg_multiple.predict(X_test)\ny_pred","43dbe530":"from sklearn.metrics import r2_score\nprint(\"Variance-score (coefficient of determination): R\u00b2 = %.2f\" % r2_score(y_test, y_pred))","cb9583ac":"print(\"Residual sum of squares (RSS): %.2f\" % sum((y_pred - y_test) ** 2))\nprint(\"Mean absolute error (MAE): %.2f\" % np.mean(abs(y_pred - y_test)))\nprint(\"Mean square error (MSE): %.2f\" % np.mean((y_pred - y_test) ** 2))\nprint(\"Root mean square error (RMSE): %.2f\" % np.sqrt(np.mean((y_pred - y_test) ** 2)))","8b09af63":"import statsmodels.api as sm\n\nX_sm = sm.add_constant(X)\nregressor = sm.OLS(y, X_sm).fit()\nprint(regressor.summary())","f452fa49":"submission= pd.DataFrame({\"id\":test.Id, \"SalePrice\":y_pred})\nsubmission","82988641":"submission = submission.to_csv('submission.csv', index=False)","58d9975c":"#### Finding missing value in Numerical data\n","4b2ee4fc":"#### Normalization of feature (GrlivArea and GarageArea) with Z-Score Method","7e414fe8":"#### Categorical Vs Numerical Data","960e5df2":"### feature selection - dealing with numerical data","3e49ff31":"============================================================END============================================================","1e653e6b":"# EDA","b9d584e3":"## Continous Data (Numerical Data)","7b424caa":"### Load the dataset","a788847b":"### One hot Encoding","9dd2c1b9":"#### Imputing missing values with mean imputation method","58af5898":"### Categorical data","d0709d20":"# Modeling","6e1ed2f9":"# Submission"}}