{"cell_type":{"ade5cf37":"code","7e9b191e":"code","f6c6f91d":"code","1a011de8":"code","37194661":"code","8d3238b1":"code","03aa1f77":"code","01843833":"code","9f94d4bd":"code","23ec35c3":"code","7dde4c4d":"code","1ef95958":"code","e0e68ccd":"code","559a561f":"code","f87aafac":"code","7034823d":"code","8536ab09":"code","999d0106":"code","c642c3fa":"code","ea9b28c7":"code","9291e650":"code","6e287fff":"code","8aa582e7":"code","78920a92":"code","bfee89fb":"code","ba212676":"markdown","d401ebc9":"markdown","f9822be9":"markdown","b424b831":"markdown","c7ee1670":"markdown","217373a8":"markdown","e0cf6793":"markdown","505cfb0f":"markdown","f169f05b":"markdown"},"source":{"ade5cf37":"import warnings                          # to hide error messages(if any)\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","7e9b191e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","f6c6f91d":"df = pd.read_csv('..\/input\/Iris.csv')\ndf.head()","1a011de8":"#Removing unnecessary column i.e. Id\ndf = df.drop(['Id'], axis = 1)\n","37194661":"df.shape","8d3238b1":"df.dtypes","03aa1f77":"df.isnull().sum()","01843833":"df['Species'].unique()","9f94d4bd":"df['Species'].value_counts()","23ec35c3":"df.describe()","7dde4c4d":"sns.countplot(x = 'Species', data = df)\nplt.show()","1ef95958":"corr = df.corr()\nplt.figure(figsize = (10,6))\n\n#Drawing a heatmap to show how various features are correlated\n\nsns.heatmap(corr,annot = True)\nplt.yticks(rotation = 45)\nplt.show()","e0e68ccd":"sns.pairplot(df, hue = 'Species')\nplt.show()","559a561f":"#Scatter plot between petal length and petal witdth\nplt.figure(figsize = (10,6))\nsns.lmplot(x = 'PetalLengthCm', y = 'PetalWidthCm',data = df, hue = 'Species')\nplt.show()","f87aafac":"plt.figure(figsize =(10,6) )\nsns.lmplot(x = 'SepalLengthCm', y = 'SepalWidthCm', data = df, hue = 'Species')","7034823d":"#swarmplot\nplt.figure(figsize = (10,6))\nsns.swarmplot(x = 'SepalLengthCm', y = 'SepalWidthCm', data = df, hue = 'Species')\nplt.show()\n","8536ab09":"#Box Plot\nplt.figure(figsize =(10,7) )\nsns.boxplot(x = 'Species', y = 'SepalWidthCm', data = df)\nplt.show()","999d0106":"from sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n","c642c3fa":"X = np.array(df.iloc[:,0:4])\ny = np.array(df['Species'])","ea9b28c7":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.33, random_state = 42)","9291e650":"knn = KNeighborsClassifier(n_neighbors = 7)\nknn.fit(X_train,y_train)","6e287fff":"knn.score(X_test,y_test)","8aa582e7":"neighbors = []     #empty list to store the number of neighbors\ncv_scores = []     #empty list to score cross validation scores\n\nfrom sklearn.model_selection import cross_val_score\nfor i in range(1,51,2):\n    neighbors.append(i)\n    knn = KNeighborsClassifier(n_neighbors = i)\n    \n    #Performing 10 fold cross-validation\n    \n    scores = cross_val_score(knn,X_train,y_train, cv = 10, scoring = 'accuracy')\n    cv_scores.append(scores.mean())\n","78920a92":"#Misclassification error rates\nMSE = [1-x for x in cv_scores]\n\n#determining the best k\noptimal_k = neighbors[MSE.index(min(MSE))]\nprint('The optimal number of neighbors is %d ' %optimal_k)","bfee89fb":"#Plotting misclassification versus k(number of nearest neighbors)\n\nsns.set()\nplt.figure(figsize = (10,6))\nplt.plot(neighbors,MSE, 'c')\nplt.xlabel('Neighbors')\nplt.ylabel('Misclassification Error Rate')\nplt.title('Misclassification Error Rate vs. Nearest Neighbors')\nplt.show()","ba212676":"### Performing Cross Validation","d401ebc9":"### Checking if any column has null values","f9822be9":"### Loading the data set","b424b831":"### Different type of Species present are:\n1.Iris-setosa<br\/>\n2.Iris-versicolor<br\/>\n3.Iris-virginica","c7ee1670":"### Loading required libraries","217373a8":"### Visualizing the given data","e0cf6793":"The features described in the above data set are:\n\n**1. count** tells us the number of NoN-empty rows in a feature.\n\n**2. mean** tells us the mean value of that feature.\n\n**3. std** tells us the Standard Deviation Value of that feature.\n\n**4. min** tells us the minimum value of that feature.\n\n**5. 25%**, **50%**, and **75%** are the percentile\/quartile of each features.\n\n**6. max** tells us the maximum value of that feature.","505cfb0f":"### Loading Machine Learning Libraries","f169f05b":"#### There are 50 Species of each type"}}