{"cell_type":{"5f6d79c4":"code","d7f5bf82":"code","dcee8dc7":"code","9d32291c":"code","1298fc99":"code","72c33597":"code","47691cb7":"code","0a6c11cc":"code","fb85c5e5":"code","25acec31":"code","af7ee308":"code","9d29e366":"code","5d3fa736":"code","8239ec2e":"code","a38413aa":"code","2be2ab7c":"code","0cdd8eeb":"code","816520fc":"code","2fcf630b":"code","a66f9113":"code","af6abe81":"code","1c15be4d":"code","8bda8e2f":"code","60441f65":"code","be7a63ea":"code","a150ac1d":"code","f1975ca5":"code","34c9f808":"code","7a12f2a1":"code","0827dba3":"code","e66bb234":"code","57b6406d":"code","288572f1":"code","3be693b0":"code","8bd1db4a":"code","f3038eb5":"code","d4b94bcd":"code","195cf755":"code","f53ab52a":"code","4a44fc70":"code","285ae8a5":"code","6345cb94":"code","255993ab":"code","cfb6527a":"code","0c51f533":"code","5110c4f1":"code","dcd70293":"code","8bd79940":"code","f030c42e":"code","31d557cd":"code","fcedaf88":"code","d088b29a":"code","874ea2d5":"code","1764b484":"code","a9f0d737":"code","6db6fdfe":"code","be0f7294":"code","2ad4f8aa":"code","3edbf380":"code","433761e3":"code","2cd095bc":"code","e90446f8":"code","5001ddab":"code","a0391739":"code","9a45ed3c":"code","ab995147":"code","02d9cb3e":"code","32106597":"code","ecf668d4":"code","2cb702c7":"code","1a9b0182":"code","cab756b9":"code","d8080aba":"code","67e57167":"code","3b341ac4":"code","0aef9045":"code","a42cb6c9":"code","95a6106e":"code","f2938f3d":"code","cef2fc4b":"code","601a5c9c":"code","8da39e1e":"code","15896bb4":"code","f0258eb1":"code","0c46e637":"code","aaeb6788":"code","e2c5dffb":"code","3d55e655":"code","6e6bcf92":"code","f9612a46":"code","1f9e9157":"code","641f5e03":"code","12370de5":"code","d3d5d3cd":"code","2f7781bb":"code","2042d42a":"code","6726197d":"code","3d35a876":"code","c34d5f96":"code","33c5c096":"code","9b35822e":"code","2cf3acc8":"code","90899bd3":"code","8b2be0c1":"code","201366c6":"code","38c1c955":"code","02c1e45d":"code","d4760fba":"code","894e9a07":"code","6c016a33":"code","ac2b537f":"code","23f6164d":"code","7b136459":"code","8c639d4c":"code","6703d63e":"code","733bb6d1":"code","37a28374":"code","96fc04c6":"code","0622eab8":"code","33bfad8e":"code","a198b2f4":"code","7e194049":"code","ee661fd3":"code","a9fea0de":"code","3f366dc3":"code","2003f29a":"code","5271c793":"code","4b4bdb59":"code","0406933d":"code","fd0ae1ca":"code","ec213356":"code","a996aa9f":"code","8f15eaac":"code","3e9bb1b8":"code","aa76b31e":"code","a03e235d":"code","c7c398cb":"code","90ab4236":"code","4ddcb4ac":"code","cfccf1d0":"code","7f1fd525":"code","f5a7fe80":"code","c20f16d2":"code","9e2ad635":"code","bba06142":"code","fd04bd46":"code","316b28c5":"code","01c9a8ec":"code","4c6365c4":"code","091d0f87":"code","1f038c21":"code","5ea4aad2":"code","ee6052ff":"code","7c0b05bc":"code","736c235d":"code","2bc80e69":"code","6bb700cf":"code","50c8c5aa":"code","dcbac8a3":"code","9984b5c3":"code","4f67e3fe":"code","8caf8c35":"code","d4d48ccc":"code","2801f838":"code","5c2a85bf":"code","f2b3e134":"code","958dbcaa":"code","1776e5ce":"code","a6d8b3fe":"code","0b1c43b4":"code","5bec4205":"code","b742375d":"code","d2cdc8b4":"code","6e16ea99":"code","5cae85cc":"code","3cada88c":"code","2952d9ff":"code","5c047309":"code","ed279b0b":"code","35304085":"code","281ed39b":"code","e9367046":"code","9251b919":"code","ba5599a2":"code","bdce8776":"code","56678de0":"code","871f0fd5":"code","49906425":"code","ccd9ced9":"code","a79f3156":"code","ba380e22":"markdown","2493c365":"markdown","5bbdb37b":"markdown","41d20a1b":"markdown","04d255e5":"markdown","1bdbd6c3":"markdown","71c45b45":"markdown","9fa56a3b":"markdown","1f37dd6f":"markdown","f8d73918":"markdown","03fb4705":"markdown","ee463e84":"markdown","d910ba7a":"markdown","9818e3c4":"markdown","9addc97e":"markdown","e0a8b438":"markdown","cea7864f":"markdown","ec411595":"markdown","8d498120":"markdown","5b5ac189":"markdown","728eccc6":"markdown","a5447031":"markdown","9464b486":"markdown","9efc2fce":"markdown","ed72fad3":"markdown","793c7185":"markdown","33876728":"markdown","8ca8a819":"markdown","4bb532fc":"markdown","ad37ab31":"markdown","626dd304":"markdown","14265c1f":"markdown","8fa77d6a":"markdown","1b4a431f":"markdown","2b6978d3":"markdown","6fcd7c33":"markdown","26257b6f":"markdown","c47d9a24":"markdown","8aecd17b":"markdown","d5c547d8":"markdown","78fd3c1c":"markdown","93e41205":"markdown","0b5af47e":"markdown","bb61a45f":"markdown","49efe813":"markdown","0ce76a36":"markdown","c9c19503":"markdown","0a158fd6":"markdown","01a696e5":"markdown","33568ee4":"markdown","039088e9":"markdown","db06587d":"markdown","73c607e8":"markdown","cc415f1c":"markdown","44c8bfb2":"markdown","d68f4cea":"markdown","86671503":"markdown","1451d83f":"markdown","ff962a98":"markdown","9ad6ba7b":"markdown","9799d2e5":"markdown","cac2fa89":"markdown"},"source":{"5f6d79c4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport matplotlib.style as style\nimport seaborn as sns\n\nstyle.use('fivethirtyeight')\n\n\nimport warnings\nimport plotly.express as px\n%matplotlib inline\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","d7f5bf82":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","dcee8dc7":"test=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","9d32291c":"train.head(5)","1298fc99":"train.info()","72c33597":"test.head(5)","47691cb7":"test.info()","0a6c11cc":"#drop unnecassary column\ntest.drop('PassengerId',axis=1,inplace=True)\ntrain.drop('PassengerId',axis=1,inplace=True)","fb85c5e5":"sns.pairplot(train,hue='Survived');","25acec31":"from plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)\nimport plotly.express as px","af7ee308":"px.parallel_categories(train,color='Survived',color_continuous_scale=px.colors.diverging.oxy,title='Parallel Categories')","9d29e366":"fig,axes=plt.subplots(1,1,figsize=(12,6))\nsns.heatmap(train.corr(),annot=True,square=True)\nplt.yticks(rotation=0)\nplt.title('Correlations');","5d3fa736":"#missing value ratio\ntrain['Survived'].isnull().sum()\/len(train['Survived'])","8239ec2e":"#survived info\ntrain.groupby('Survived').mean().style.background_gradient(cmap='YlGnBu',text_color_threshold=0.5)","a38413aa":"#correlation of features to target value\ncorrs=train.drop('Survived',axis=1).corrwith(train['Survived'])","2be2ab7c":"fig,axes=plt.subplots(1,1,figsize=(12,6))\naxes.axhline(corrs[corrs>0].mean(), ls=':',color='black',linewidth=2)\naxes.text(1,corrs[corrs>0].mean()+.015, \"Average = {:.3f}\".format(corrs[corrs>0].mean()),color='black',size=14)\naxes.axhline(corrs[corrs<0].mean(), ls=':',color='black',linewidth=2)\naxes.axhline(0, ls='-',color='black',linewidth=3)\naxes.text(2,corrs[corrs<0].mean()-.035, \"Average = {:.3f}\".format(corrs[corrs<0].mean()),color='black',size=14)\nsns.barplot(y=corrs,x=corrs.index,palette='viridis')\nplt.title('Correlation of Survived to other Features',size=20,color='black')\nplt.xticks(rotation=90)\nplt.tight_layout();","0cdd8eeb":"fig,axes=plt.subplots(ncols=2,nrows=1,figsize=(12,6))\nsns.countplot(train['Survived'],ax=axes[0])\naxes[1].pie(x=train['Survived'].value_counts(),autopct='%.2f%%',labels=train['Survived'].value_counts().index,colors=['#0090cc','#dd5530'])\nfor p in axes[0].patches:\n        value = p.get_height()\n        if value <1:\n            value=float(str(value)[:5])\n        x = p.get_x() + p.get_width()\/2.2\n        y = p.get_y() + p.get_height()+value*.015\n        axes[0].text(x, y, (value), ha=\"left\",fontsize=11,color='#000000',fontweight='bold')\naxes[0].set_title('Survived')\naxes[1].set_title('Survive Ratio');","816520fc":"#Ticket class\n#1st\n#2nd\n#3rd","2fcf630b":"train['Pclass'].isnull().sum()","a66f9113":"#pclass info\ntrain.groupby('Pclass',sort=False).mean().style.background_gradient(cmap='YlGnBu',text_color_threshold=0.5)","af6abe81":"#plass survive ratio\nratio={}\ntemp_df=train.groupby('Pclass',sort=False)['Survived'].value_counts()\nfor i in range (1,4):\n    ratio[i]=temp_df[i,1]\/temp_df.xs(i).sum()\nratio=pd.DataFrame(ratio.values(),index=ratio.keys(),columns=['Ratio'])","1c15be4d":"fig,axes=plt.subplots(ncols=2,nrows=1,figsize=(12,6))\nsns.countplot(data=train,x='Pclass',hue='Survived',ax=axes[0])\nsns.barplot(y=ratio['Ratio'],x=ratio.index,ax=axes[1],palette='inferno')\naxes[0].set_title('Counts')\naxes[1].set_title('Survive Ratio')\naxes[1].set_xlabel('Pclass')\nfor i in axes:\n    for p in i.patches:\n            value = p.get_height()\n            if value <1:\n                value=float(str(value)[:5])\n            x = p.get_x() + p.get_width()\/3.5\n            y = p.get_y() + p.get_height()+value*.015\n            i.text(x, y, (value), ha=\"left\",fontsize=11,color='#000000',fontweight='bold')\nplt.tight_layout();","8bda8e2f":"colors=['#00aaff','#cc2000','#ffaa00']\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(12,6))\naxes[0].pie(x=train['Pclass'].value_counts(),autopct='%.2f%%',labels=train['Pclass'].value_counts().index,colors=colors)\naxes[1].pie(x=test['Pclass'].value_counts(),autopct='%.2f%%',labels=train['Pclass'].value_counts().index,colors=colors)\naxes[0].set_title('Train')\naxes[1].set_title('Test')\nplt.tight_layout()\nplt.legend(title='Ticket Class',loc=1 ,labels=['3rd', '2nd','1st'],prop={'size': 10});","60441f65":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.barplot(y=train.groupby('Pclass').mean()['Fare'],x=train.groupby('Pclass').mean().index,palette='inferno')\nplt.title('Mean Fare')\nfor p in axes.patches:\n            value = p.get_height()\n            x = p.get_x() + p.get_width()\/2.5\n            y = p.get_y() + p.get_height()+value*.015\n            axes.text(x, y,s='{:.3f}'.format(value), fontsize=11,color='#000000',fontweight='bold')\nplt.tight_layout()\naxes.axhline(train['Fare'].mean(), ls=':',color='black',linewidth=2)\naxes.text(1,train['Fare'].mean()+2, \"Avg = {:.3f}\".format(train['Fare'].mean()),color='black',size=12);","be7a63ea":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.boxenplot(train[train['Pclass']==1]['Fare'])\nsns.swarmplot(train[train['Pclass']==1]['Fare'],palette='magma')\nplt.title('1st Class Ticket Fare');","a150ac1d":"from scipy.stats import norm\nfig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.distplot(train[train['Pclass']==1]['Fare'],fit=norm)\nplt.title('1st Class Ticket Fare')\naxes.axvline(train[train['Pclass']==1]['Fare'].mean(), ls=':',color='black',linewidth=2)\naxes.text(train[train['Pclass']==1]['Fare'].mean()+10,.01, \"1st Class Avg = {:.3f}\".format(train[train['Pclass']==1]['Fare'].mean()),color='black',size=12);\n","f1975ca5":"train[train['Fare']>400]","34c9f808":"train[train['Ticket']=='PC 17755']","7a12f2a1":"#check for nan\ntrain['Name'].isnull().sum()","0827dba3":"train['Name'].nunique()","e66bb234":"train['Name'].sample(5)","57b6406d":"titles_train=train['Name'].apply(lambda x: x.split(',')[1].split('.')[0][1:])","288572f1":"titles_train.value_counts()","3be693b0":"t={     'Mr':'Mr',\n        'Miss':'Mrs',\n        'Mlle':'Mrs',\n        'Mme':'Mrs',\n        'Ms':'Mrs',\n        'Master':'Master',\n        'Rev':'Rare',\n        'Major':'Rare',\n        'Col':'Rare',\n        'Jonkheer':'Rare',\n        'Capt':'Rare',\n        'Lady':'Rare',\n        'Don':'Rare',\n        'the Countess':'Rare',\n        'Sir':'Rare',\n        'Dr':'Rare',\n        'Mrs':'Mrs',\n        'Dona':'Rare' #exist on test data\n        }","8bd1db4a":"titles_train=titles_train.map(t)","f3038eb5":"titles_train.isnull().sum()","d4b94bcd":"titles_train.value_counts()","195cf755":"#adding new feature as a Titles\ntrain['Titles']=titles_train","f53ab52a":"train.groupby('Titles',as_index=True,sort=False).mean().style.background_gradient(cmap='YlGnBu',text_color_threshold=0.5)","4a44fc70":"fig,axes=plt.subplots(ncols=2,nrows=1,figsize=(12,6))\nsns.countplot(train['Titles'],hue=train['Survived'],ax=axes[0])\nsns.barplot(x=train.groupby('Titles',sort=False).mean()['Survived'].index,y=train.groupby('Titles',sort=False).mean()['Survived'],ax=axes[1],palette='inferno')\nfor p in axes[1].patches:\n        value = p.get_height()\n        if value <1:\n            value=float(str(value)[:5])\n        x = p.get_x() + p.get_width()\/3\n        y = p.get_y() + p.get_height()+value*.015\n        axes[1].text(x, y, (value), ha=\"left\",fontsize=11,color='#000000',fontweight='bold')\naxes[0].set_title('Counts')\naxes[1].set_title('Survive Ratio')\nplt.tight_layout();","285ae8a5":"fig,axes=plt.subplots(ncols=2,nrows=1,figsize=(12,6))\nsns.barplot(x=(train.groupby('Titles')['Age'].mean()).index,y=(train.groupby('Titles')['Age'].mean()),ax=axes[0],palette='inferno')\nsns.barplot(x=(train.groupby('Titles')['Pclass'].mean()).index,y=(train.groupby('Titles')['Pclass'].mean()),ax=axes[1],palette='inferno')\n\naxes[0].axhline(train['Age'].mean(), ls=':',color='black',linewidth=2)\naxes[0].text(-.43,train['Age'].mean()+1, \"Avg = {:.3f}\".format(train['Age'].mean()),color='black',size=12)\nfor i in axes:\n    for p in i.patches:\n            value = p.get_height()\n            if value <1:\n                value=float(str(value)[:5])\n            x = p.get_x() + p.get_width()\/3\n            y = p.get_y() + p.get_height()+value*.015\n            i.text(x, y, '{:.2f}'.format(value), ha=\"left\",fontsize=11,color='#000000',fontweight='bold')\n\naxes[0].set_title('Mean Age of Titles')\naxes[1].set_title('Mean Pclass of Titles')\nplt.tight_layout();","6345cb94":"fig,axes=plt.subplots(ncols=2,nrows=1,figsize=(12,6))\nsns.barplot(y=(train.groupby('Titles')['SibSp'].mean()).index,x=(train.groupby('Titles')['SibSp'].mean()),ax=axes[0],palette='inferno')\nsns.barplot(y=(train.groupby('Titles')['Parch'].mean()).index,x=(train.groupby('Titles')['Parch'].mean()),ax=axes[1],palette='inferno');\naxes[0].set_title('Mean SibSp of Titles')\naxes[1].set_title('Mean Parch of Titles')\naxes[1].set_ylabel('')\nplt.tight_layout();","255993ab":"titles_test=test['Name'].apply(lambda x: x.split(',')[1].split('.')[0][1:])","cfb6527a":"titles_test=titles_test.map(t)","0c51f533":"titles_test.isnull().sum()","5110c4f1":"test['Titles']=titles_test","dcd70293":"test","8bd79940":"train['Sex'].isnull().sum()","f030c42e":"train.groupby('Sex',sort=False).mean().style.background_gradient(cmap='YlGnBu',text_color_threshold=0.5)","31d557cd":"fig,axes=plt.subplots(ncols=2,nrows=1,figsize=(12,6))\nsns.countplot(train['Sex'],hue=train['Survived'],ax=axes[0])\nsns.barplot(x=train.groupby('Sex').mean()['Survived'].index.sort_values(ascending=False),y=train.groupby('Sex').mean()['Survived'].sort_values(),ax=axes[1])\naxes[0].set_title('Counts')\naxes[1].set_title('Survive Ratio')\naxes[1].set_xlabel('Sex')\nfor i in axes:\n    for p in i.patches:\n            value = p.get_height()\n            if value <1:\n                value=float(str(value)[:5])\n            x = p.get_x() + p.get_width()\/3\n            y = p.get_y() + p.get_height()+value*.015\n            i.text(x, y, (value), ha=\"left\",fontsize=11,color='#000000',fontweight='bold')\nplt.tight_layout();\n","fcedaf88":"fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(12,6))\naxes[0].pie(x=train['Sex'].value_counts(),autopct='%.2f%%',labels=train['Sex'].value_counts().index,colors=colors)\naxes[1].pie(x=test['Sex'].value_counts(),autopct='%.2f%%',labels=train['Sex'].value_counts().index,colors=colors)\naxes[0].set_title('Train')\naxes[1].set_title('Test')\nplt.tight_layout();","d088b29a":"#missing value ratio\ntrain['Age'].isnull().sum()\/len(train['Age'])","874ea2d5":"test['Age'].isnull().sum()\/len(test['Age'])","1764b484":"train['Age'].describe()","a9f0d737":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\naxes.axvline(train['Age'].mean(), ls=':',color='black',linewidth=2)\naxes.text(train['Age'].mean()+2,.033, \"Average = {:.3f}\".format(train['Age'].mean()),color='black',size=12)\nsns.distplot(train[train['Survived']==0]['Age'],label=['Not Survived'],kde_kws={'linewidth':3})\nsns.distplot(train[train['Survived']==1]['Age'],label=['Survived'],kde_kws={'linewidth':3})\nplt.legend()\nplt.title('Age Distribution');","6db6fdfe":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.boxenplot(train['Age'])\nsns.swarmplot(train['Age'],palette='magma')\nplt.title('Age')\nplt.tight_layout();","be0f7294":"train[train['Age']>70]","2ad4f8aa":"train[train['Age']<5]['Survived'].value_counts()","3edbf380":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.distplot(train[(train['Survived']==0) & (train['Age']<5)]['Age'],label=['Not Survived'],kde_kws={'linewidth':3})\nsns.distplot(train[(train['Survived']==1) & (train['Age']<5)]['Age'],label=['Survived'],kde_kws={'linewidth':3})\nplt.tight_layout()\nplt.legend()\nplt.title('Age <5');","433761e3":"# of siblings \/ spouses aboard the Titanic","2cd095bc":"train['SibSp'].isnull().sum()\/len(train['SibSp'])","e90446f8":"train['SibSp'].describe()\n","5001ddab":"train.groupby('SibSp').mean().style.background_gradient(cmap='YlGnBu',text_color_threshold=0.5)\n","a0391739":"fig, axes = plt.subplots(nrows=2, ncols=1,figsize=(12,12))\nsns.countplot(train['SibSp'],hue=train['Survived'],ax=axes[0])\nsns.barplot(x=train.groupby('SibSp',sort=False).mean()['Survived'].index,y=train.groupby('SibSp',sort=False).mean()['Survived'],ax=axes[1],palette='inferno')\naxes[1].set_title('Survive Ratio')\naxes[0].set_title('SibSp')\nfor p in axes[1].patches:\n        value = p.get_height()\n        if value <1:\n            value=float(str(value)[:5])\n        x = p.get_x() + p.get_width()\/3\n        y = p.get_y() + p.get_height()+value*.01\n        axes[1].text(x, y, (value), ha=\"left\",fontsize=11,color='#000000',fontweight='bold')\nplt.tight_layout();","9a45ed3c":"#parch > # of parents \/ children aboard the Titanic","ab995147":"train['Parch'].isnull().sum()\/len(train['Parch'])","02d9cb3e":"train['Parch'].describe()","32106597":"train.groupby('Parch').mean().style.background_gradient(cmap='YlGnBu',text_color_threshold=0.5)","ecf668d4":"fig, axes = plt.subplots(nrows=2, ncols=1,figsize=(12,12))\nsns.countplot(train['Parch'],ax=axes[0],hue=train['Survived'],)\nsns.barplot(x=train.groupby('Parch',sort=False).mean()['Survived'].index,y=train.groupby('Parch',sort=False).mean()['Survived'],ax=axes[1],palette='inferno')\naxes[0].set_title('Parch')\naxes[1].set_title('Survive Ratio')\nplt.tight_layout();\n","2cb702c7":"train['Ticket'].isnull().sum()\/len(train['Ticket'])","1a9b0182":"train['Ticket'].value_counts().head(10)","cab756b9":"train['Ticket'].nunique()","d8080aba":"train['Fare'].isnull().sum()\/len(train['Fare'])","67e57167":"train['Fare'].describe()","3b341ac4":"train[(train['Survived']==1) & (train['Fare']<200)]['Fare']","0aef9045":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\n# axes.axvline(train['Age'].mean(), ls=':',color='black',linewidth=2)\n# axes.text(train['Age'].mean()+2,.033, \"Average = {:.3f}\".format(train['Age'].mean()),color='black',size=12)\nsns.distplot(train[(train['Survived']==1)]['Fare'],label=['Not Survived'],kde_kws={'linewidth':3},bins=20)\nsns.distplot(train[(train['Survived']==0)]['Fare'],label=['Survived'],kde_kws={'linewidth':3},bins=20)\nplt.legend();","a42cb6c9":"train['Fare'].describe()","95a6106e":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\ngp=sns.boxenplot(train['Fare'])\nsns.swarmplot(train['Fare'],palette='magma')\nplt.title('Fare')\nplt.tight_layout();","f2938f3d":"train[train['Fare']>300]","cef2fc4b":"train['Embarked'].isnull().sum()\/len(train['Embarked'])","601a5c9c":"train.groupby('Embarked',sort=False).mean().style.background_gradient(cmap='YlGnBu',text_color_threshold=0.5)","8da39e1e":"fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(12,6))\nsns.countplot(train['Embarked'],ax=axes[0],hue=train['Survived'])\nsns.barplot(x=train.groupby('Embarked',sort=False).mean()['Survived'].index,y=train.groupby('Embarked',sort=False).mean()['Survived'],ax=axes[1],palette='inferno')\naxes[1].axhline(train['Survived'].mean(), ls=':',color='black',linewidth=2)\naxes[0].set_title('Embarked')\naxes[1].set_title('Survive Ratio')\nfor i in axes:\n    for p in i.patches:\n        value = p.get_height()\n        if value <1:\n            value=float(str(value)[:5])\n        x = p.get_x() + p.get_width()\/3\n        y = p.get_y() + p.get_height()+value*.01\n        i.text(x, y, (value), ha=\"left\",fontsize=11,color='#000000',fontweight='bold')\nplt.tight_layout();","15896bb4":"#creating y_train before imputing missing values\ny_train=train['Survived']\n#concatenate train-test for missing values\nntrain = train.shape[0] #for recreating data later\nall_df = pd.concat((train, test)).reset_index(drop=True)","f0258eb1":"#na ratio\nna_ratio=all_df.isnull().sum()[all_df.isnull().sum()>0].sort_values(ascending=False)\/len(all_df)*100\n#total na\nna_sum=all_df.isnull().sum()[all_df.isnull().sum()>0].sort_values(ascending=False)","0c46e637":"all_df","aaeb6788":"na_ratio","e2c5dffb":"na_sum","3d55e655":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.barplot(y=na_ratio.index,x=na_ratio,ax=axes,palette='magma')\nplt.title('Missing Value Ratio')\n\nfor p in axes.patches:\n    value = p.get_width()\n    x = p.get_x() + p.get_width()+1\n    y = p.get_y() + p.get_height()-.4\n    axes.text(x, y, '%{:.3f}'.format(value), ha=\"left\",fontsize=11,color='#000000',fontweight='bold',bbox=dict(facecolor='#dddddd', edgecolor='black',boxstyle='round', linewidth=.5))\nplt.tight_layout();\n","6e6bcf92":"all_df['Cabin'].sample(5)","f9612a46":"all_df['Cabin'].nunique()","1f9e9157":"all_df.drop('Cabin',axis=1,inplace=True)","641f5e03":"data=['Pclass','Sex','Embarked','Titles','Parch','SibSp']","12370de5":"for i in data:\n    print(all_df[all_df['Age'].isnull()][i].value_counts())","d3d5d3cd":"fig,axes=plt.subplots(ncols=2,nrows=3,figsize=(12,18))\nfor i, feature in enumerate(all_df[data]):\n        try:\n            row = int(i\/2)\n            col = i%2\n            gp=sns.boxenplot(y=all_df['Age'],x=all_df[feature],ax=axes[row][col])\n            median=all_df.groupby(feature,sort=False)['Age'].median()\n            axes[row][col].set_title(feature)\n            axes[row][col].axhline(all_df['Age'].mean(),ls='--',color='red',linewidth=2)\n            for xtick in gp.get_xticks():\n                axes[row][col].text(xtick,median[xtick]+2,median[xtick],horizontalalignment='center',size=13,color='black',weight='semibold')\n        except KeyError:\n            continue\nfor i,y in zip(all_df.groupby('Pclass')['Age'].median(),[0,1,2]):\n    axes[0][0].text(y,i+1.5,i,horizontalalignment='center',size='small',color='black',weight='semibold')\nplt.tight_layout();","2f7781bb":"def master_rare(row):\n    age=row[0]\n    title=row[1]\n    if pd.isnull(age):\n        if title=='Master':\n            return all_df[all_df['Titles']=='Master']['Age'].median()\n        if title=='Rare':\n            return all_df[all_df['Titles']=='Rare']['Age'].median()\n    return age\n","2042d42a":"all_df['Age']=all_df[['Age','Titles']].apply(master_rare,axis=1)","6726197d":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.distplot(train[train['Pclass']==1]['Age'],label='Pclass=1')\nsns.distplot(train[train['Pclass']==2]['Age'],label='Pclass=2')\nsns.distplot(train[train['Pclass']==3]['Age'],label='Pclass=3')\nplt.legend();","3d35a876":"def pclass(row):\n    age=row[0]\n    pclass=row[1]\n    if pd.isnull(age):\n        return all_df[all_df['Pclass']==pclass]['Age'].median()\n    return age\n    ","c34d5f96":"all_df['Age']=all_df[['Age','Pclass']].apply(pclass,axis=1)","33c5c096":"all_df['Age'].isnull().sum()","9b35822e":"#creating age group\ndef age_group(row):\n    age=row\n    if age<=15.0:\n        return 'Baby-Child'\n    elif 15 < age <=25:\n        return 'Young'\n    elif 25< age <=40:\n        return 'Middle'\n    elif 40 < age <=50:\n        return 'Up-Middle'\n    else:\n        return 'Old'","2cf3acc8":"all_df['Age_group']=all_df['Age'].apply(age_group)    ","90899bd3":"all_df","8b2be0c1":"all_df.groupby('Age_group').mean()","201366c6":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.barplot(x=all_df.groupby('Age_group').mean().index,y=all_df.groupby('Age_group').mean()['Survived'],palette='inferno');","38c1c955":"all_df[all_df['Embarked'].isnull()]","02c1e45d":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nall_df.groupby('Embarked',sort=False)['Titles'].value_counts()['S'].plot(kind='bar',title='Southampton');","d4760fba":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nall_df.groupby('Embarked',sort=False)['Titles'].value_counts()['C'].plot(kind='bar',title='Cherbourg');","894e9a07":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nall_df.groupby('Embarked',sort=False)['Titles'].value_counts()['Q'].plot(kind='bar',title='Queenstown');","6c016a33":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.boxenplot(x=all_df['Embarked'],y=all_df['Fare']);","ac2b537f":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.boxenplot(x=all_df['Embarked'],y=all_df['Parch']);","23f6164d":"all_df.groupby('Embarked',sort=False)['Survived'].value_counts()","7b136459":"all_df['Embarked']=all_df['Embarked'].fillna('C')","8c639d4c":"all_df['Embarked'].isnull().any()","6703d63e":"all_df[all_df['Fare'].isnull()]","733bb6d1":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.boxenplot(y=all_df['Fare'],x=all_df['Pclass'])","37a28374":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.boxenplot(y=all_df['Fare'],x=all_df['SibSp']);","96fc04c6":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.boxenplot(y=all_df['Fare'],x=all_df['Parch']);","0622eab8":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.regplot(x=all_df['Fare'],y=all_df['Age']);","33bfad8e":"all_df['Fare']=all_df['Fare'].fillna(all_df[all_df['Pclass']==3]['Fare'].median())","a198b2f4":"all_df.isnull().sum()","7e194049":"all_df['Family_size']=all_df['SibSp']+all_df['Parch']+1","ee661fd3":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.barplot(x=all_df.groupby('Family_size',sort=False).mean().index,y=all_df.groupby('Family_size',sort=False).mean()['Survived']);","a9fea0de":"# grouping family size\ndef family_group(row):\n    size=row\n    if size==1:\n        return 'Solo'\n    if 1 < size <5:\n        return 'Small'\n    if 5<= size <=7:\n        return 'Medium'\n    else:\n        return 'Large'","3f366dc3":"all_df['Family_size_group']=all_df['Family_size'].apply(family_group)","2003f29a":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.barplot(x=all_df.groupby('Family_size_group').mean().index,y=all_df.groupby('Family_size_group').mean()['Survived']);","5271c793":"all_df['Alone']=all_df['SibSp'].apply(lambda x: 1 if x==1 else 0)","4b4bdb59":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.distplot(all_df[(all_df['Survived']==1) & (all_df['Fare']<200)]['Fare'],label=['Not Survived'],kde_kws={'linewidth':3},bins=20)\nsns.distplot(all_df[(all_df['Survived']==0) & (all_df['Fare']<200)]['Fare'],label=['Survived'],kde_kws={'linewidth':3},bins=20)\nplt.legend();","0406933d":"def fare_group(row):\n    fare=row\n    if fare < 15:\n        return 'Low'\n    elif 15 < fare < 50:\n        return 'Normal'\n    elif 50 < fare <100:\n        return 'High'\n    else: \n        return 'Very High'","fd0ae1ca":"all_df['Fare_group']=all_df['Fare'].apply(fare_group)","ec213356":"fig, axes = plt.subplots(nrows=1, ncols=1,figsize=(12,6))\nsns.barplot(x=all_df.groupby('Fare_group').mean().index,y=all_df.groupby('Fare_group').mean()['Survived']);","a996aa9f":"all_df.drop(['Survived','Name','Ticket'],axis=1,inplace=True)\nall_df\n","8f15eaac":"all_df=pd.get_dummies(all_df,drop_first=True)","3e9bb1b8":"X_train = all_df[:ntrain]\nX_test = all_df[ntrain:]","aa76b31e":"X_train.shape","a03e235d":"y_train.shape","c7c398cb":"X_test.shape","90ab4236":"import statsmodels.api as sm","4ddcb4ac":"def logit(X,y):\n    X_train=X\n    y_train=y\n    logit_model=sm.Logit(y_train,X_train)\n    result=logit_model.fit(method='bfgs', maxiter=200)\n    print(result.summary())","cfccf1d0":"def drop(column):\n    X_train.drop(column,axis=1,inplace=True)\n    X_test.drop(column,axis=1,inplace=True)","7f1fd525":"logit(X_train,y_train)","f5a7fe80":"drop('Parch')","c20f16d2":"logit(X_train,y_train)","9e2ad635":"drop('Sex_male')","bba06142":"logit(X_train,y_train)","fd04bd46":"drop('Embarked_Q')","316b28c5":"logit(X_train,y_train)","01c9a8ec":"drop('Alone')","4c6365c4":"logit(X_train,y_train)","091d0f87":"drop('Age_group_Young')","1f038c21":"logit(X_train,y_train)","5ea4aad2":"drop('Age_group_Old')","ee6052ff":"logit(X_train,y_train)","7c0b05bc":"drop('Age_group_Up-Middle')","736c235d":"logit(X_train,y_train)","2bc80e69":"drop('Family_size')","6bb700cf":"logit(X_train,y_train)","50c8c5aa":"drop('SibSp')","dcbac8a3":"logit(X_train,y_train)","9984b5c3":"drop('Titles_Mrs')","4f67e3fe":"logit(X_train,y_train)","8caf8c35":"drop('Fare')","d4d48ccc":"logit(X_train,y_train)","2801f838":"drop('Fare_group_Very High')","5c2a85bf":"logit(X_train,y_train)","f2b3e134":"drop('Embarked_S')","958dbcaa":"logit(X_train,y_train)","1776e5ce":"drop('Age_group_Middle')","a6d8b3fe":"logit(X_train,y_train)","0b1c43b4":"#imports\nfrom sklearn.model_selection import cross_val_score,KFold\nfrom sklearn.metrics import confusion_matrix,classification_report,plot_roc_curve,plot_precision_recall_curve,roc_auc_score,roc_curve,precision_recall_curve, average_precision_score,plot_precision_recall_curve","5bec4205":"#cross validation function\nkf = KFold(3, shuffle=True, random_state=42)\ndef acc_cv(model):\n    acc= (cross_val_score(model, X_train, y_train, cv = kf,scoring='accuracy',error_score='raise'))\n    return(['{:3f}'.format(acc.mean()),'{:3f}'.format(acc.std())])","b742375d":"#imports\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import make_pipeline ,Pipeline\nfrom sklearn.preprocessing import StandardScaler,RobustScaler","d2cdc8b4":"import optuna\nfrom optuna import visualization","6e16ea99":"\ndef objective(trial):\n\n    scalers = trial.suggest_categorical(\"scalers\", ['standard', 'robust'])\n    if scalers == \"standard\":\n        scaler = StandardScaler()\n    else:\n        scaler = RobustScaler()\n        \n    C=trial.suggest_uniform('C',.0001,1000)\n    shrinking=trial.suggest_categorical('shrinking',[ True, False])\n    probability=trial.suggest_categorical('probability',[ True, False])\n    gamma=trial.suggest_uniform('gamma',.000001,.1)\n    tol=trial.suggest_uniform('tol',.00001,1)\n\n    classifier=make_pipeline(scaler,SVC(C=C,random_state=42,gamma=gamma,shrinking=shrinking,kernel='rbf',probability=probability,tol=tol))                        \n      \n    score = cross_val_score(classifier, X_train, y_train,  cv=kf)\n    accuracy = score.mean()\n    return accuracy\n\nstudy = optuna.create_study(direction=\"maximize\")\nstudy.optimize(objective, n_trials=50)\nprint(study.best_params)\n\n","5cae85cc":"visualization.plot_optimization_history(study)","3cada88c":"visualization.plot_slice(study)","2952d9ff":"visualization.plot_edf(study)","5c047309":"visualization.plot_param_importances(study)","ed279b0b":"rf=RandomForestClassifier()","35304085":"rf.fit(X_train,y_train)","281ed39b":"impt=pd.Series(dict(zip(all_df.columns,rf.feature_importances_)))","e9367046":"plt.figure(figsize=(12,9))\nsns.barplot(y=impt.index,x=impt)\nplt.title('Feature Importances');","9251b919":"svc=make_pipeline(RobustScaler(),SVC(C= 693.4962502228669, gamma= 0.016592615831983425, tol= 0.6884459058984236,kernel='rbf',random_state=42,shrinking= False, probability= True))","ba5599a2":"acc_cv(svc)","bdce8776":"svc.fit(X_train,y_train)\npred_svc=svc.predict(X_test)","56678de0":"df=pd.DataFrame()","871f0fd5":"df['PassengerId']=X_test.index+1","49906425":"df['Survived']=pred_svc","ccd9ced9":"df.sample(5)","a79f3156":"df.to_csv('submission.csv',index=False)","ba380e22":"## Name-Title","2493c365":"Mr >>> Mr<br>\nMiss,Mlle,Mme,Ms >>> Mrs<br>\nMaster >>> Master<br>\nRev, Major, Col, Jonkheer, Capt, Lady, Don, the Countess, Sir >>> Rare<br>","5bbdb37b":"We may consider the dropping that indexes because they are outliers. Outliers effect negatively to the model. But dropping them dangerous sometimes.<br>\nSince our model is binary classification and same outliers can be in test data we keep the outliers.<br>\nAlso we'll make pipeline with scaler later for the models that not immune to outliers to lower negative effect.","41d20a1b":"We do same for the test data.","04d255e5":"### Alone","1bdbd6c3":"## Embarked","71c45b45":"# Backward Elimination","9fa56a3b":"### Family Group","1f37dd6f":"## Feature Importances with Random Forest","f8d73918":"## Parameter Tuning with Optuna","03fb4705":"The RMS Titanic sank in the early morning hours of 15 April 1912 in the North Atlantic Ocean, four days into her maiden voyage from Southampton to New York City. The largest ocean liner in service at the time, Titanic had an estimated 2,224 people on board when she struck an iceberg at around 23:40 (ship's time) on Sunday, 14 April 1912. Her sinking two hours and forty minutes later at 02:20 (ship's time; 05:18 GMT) on Monday, 15 April, resulted in the deaths of more than 1,500 people, making it one of the deadliest peacetime maritime disasters in history.<br><br>Titanic received six warnings of sea ice on 14 April but was travelling about 22 knots when her lookouts sighted the iceberg. Unable to turn quickly enough, the ship suffered a glancing blow that buckled her starboard side and opened six of her sixteen compartments to the sea. Titanic had been designed to stay afloat with four of her forward compartments flooded but no more, and the crew soon realised that the ship would sink. They used distress flares and radio (wireless) messages to attract help as the passengers were put into lifeboats.\n\nIn accordance with existing practice, Titanic's lifeboat system was designed to ferry passengers to nearby rescue vessels, not to hold everyone on board simultaneously; therefore, with the ship sinking rapidly and help still hours away, there was no safe refuge for many of the passengers and crew with only 20 lifeboats, including 4 collapsible lifeboats. Poor management of the evacuation meant many boats were launched before they were completely full.\n<b><a href=\"https:\/\/en.wikipedia.org\/wiki\/Sinking_of_the_Titanic\">  Titanic Disaster<\/a><\/b>","ee463e84":"# Preparing Data","d910ba7a":"***survival > Survival > 0 = No, 1 = Yes<br><br>\npclass > Ticket class > A proxy for socio-economic status (SES)<br> 1st = Upper<br> 2nd = Middle<br> 3rd = Lower<br><br>\nsex > Sex > Male-Female<br><br>\nAge > Age in years<br><br>\nsibsp > # of siblings \/ spouses aboard the Titanic<br>\nSibling = brother, sister, stepbrother, stepsister<br>\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)<br><br>\nparch > # of parents \/ children aboard the Titanic<br>\nParent = mother, father<br>\nChild = daughter, son, stepdaughter, stepson<br>\nSome children travelled only with a nanny, therefore parch=0 for them.<br><br>\nticket > Ticket number <br><br>\nfare > Passenger fare <br><br>\ncabin > Cabin number<br><br>\nembarked > Port of Embarkation > C = Cherbourg, Q = Queenstown, S = Southampton***<br><br>","9818e3c4":"As seen above Mrs and Master title's survive ratio is higher. Children and women seem to have been given priority on rescue.","9addc97e":"# Introduction","e0a8b438":"When we look at the mean fare of p class, there is an ascending order to 3rd>2nd>1st as expected. <br>But 1st class ticket's mean fare is way higher than the others.","cea7864f":"## Cross Validation Function","ec411595":"* Master = Child-Baby <br>\n* Dr = Doctor - include passenger and crew<br>\n* Rev = Reverend i think.<br>\n* Major = Major <b><a href=\"https:\/\/en.wikipedia.org\/wiki\/Archibald_Butt\"> Archibald Butt<\/a><\/b><br>\n* Mlle = Matmazel in French<br>\n* Col = Colonel<b><a href=\"https:\/\/en.wikipedia.org\/wiki\/Archibald_Gracie_IV\"> Archibald Gracie IV<\/a><\/b><br>\n* Mme = Madame in French<br>\n* Jonkheer = ?<br>\n* Ms=For women who are not known whether they are married or not<br>\n* Capt=Captain<br>\n* Lady=Noble woman<br>\n* Don=Noble<br>\n* Countess=Noble woman<br>\n* Sir=Noble<br>\n","8d498120":"## SibSp","5b5ac189":"We can fill values that where title is rare and master according to median of title.","728eccc6":"## Parch","a5447031":"The names of passengers not useful for the model. Because as seen above there are 891 different names. However, we can use titles contained in names. ","9464b486":"## Cabin ","9efc2fce":"## Fare","ed72fad3":"Some 1st class ticket's fare is extremely high.","793c7185":"# Missing Values","33876728":"# Exploring Important Features","8ca8a819":"According to the sinking position cabins might define who survive or not.","4bb532fc":"It seems that as the number of companions increases, the chances of survival decrease except for alone passengers.","ad37ab31":"%77 of cabin values are missing.","626dd304":"## Embarked","14265c1f":"Filling the rest missing age values according the their pclass.","8fa77d6a":"When we look at the tickets that cost over 500 fare, they all named as PC 17755","1b4a431f":"## Getting Dummies","2b6978d3":"Since the Master group consists of babies and children mean age is 4.57<br>\nMr and Mrs close each other and average.<br>\nRare is the highest with 45.55.","6fcd7c33":"The age of passengers does not seem to have much of an effect on survival. ","26257b6f":"## Optuna Visualization","c47d9a24":"Filling missing fare value according to the pclass.","8aecd17b":"## Age","d5c547d8":"## Sex","78fd3c1c":"Perhaps useful information can be extracted from letters and numbers. However, I drop this data as the missing data is too much. ","93e41205":"The number of male passengers is more than twice the number of female passengers.<br>However, while the vast majority of male passengers do not survive, it is the opposite for female passengers.","0b5af47e":"## Ticket","bb61a45f":"![image.png](attachment:8f287f27-4c3e-4cff-843d-b97ac5c586db.png)!","49efe813":"<b><i>The main idea of this work is predicting Titanic passengers who survived or not in Titanic disaster based on their unique characteristics.<\/i><\/b>","0ce76a36":"## Adding New Features","c9c19503":"The passengers who embarked on Cherbourg managed to survive at a higher rate than Queenstown and Southampton. ","0a158fd6":"## Predictions","01a696e5":"I do not now what do to with ticket. There is a lot of different tickets with no relationship. With google search useful informations can be found. But i drop ticket from dataset later.","33568ee4":"Ticket classes seems has effect on survival. 1st class is the highest survival rate ticket with %69, 2nd %47 and 3rd %24.<br>Also 3rd class ticket count much higher compare the others. Can we say same for the test data?","039088e9":"### Fare Group","db06587d":"## Fare","73c607e8":"The are 3 passengers with PC 17755 ticket in train data. They all survived and embarked at Cherbourg.<br>\nThis information can be useful later.","cc415f1c":"# Modelling","44c8bfb2":"## Survived","d68f4cea":"Creating a new feature called Age_group.","86671503":"## Age","1451d83f":"# Dataset Info","ff962a98":" Port of Embarkation<br>C = Cherbourg<br>Q = Queenstown<br>S = Southampton","9ad6ba7b":"## Pclass","9799d2e5":"Filling missing embarked values with 'Cherbourg'","cac2fa89":"There are 17 titles in total. We can combine these titles into several groups. "}}