{"cell_type":{"31ba6d4c":"code","c00671dc":"code","947eb521":"code","4b1cdb79":"code","f0762a7a":"code","68617da1":"code","594cc200":"code","22a35106":"code","c059b94c":"code","2d311e6d":"code","c207a465":"code","ff452bbc":"code","f863c51a":"code","a87f7a90":"code","9d35fb61":"code","a583fd44":"code","910332ac":"code","c2747b59":"code","24ccd0ae":"code","c0486b03":"code","6e335722":"code","6e7d07f4":"code","c85d83ae":"code","566eeaaa":"code","3dc0a319":"code","c2a40d2c":"code","b95adc7a":"code","593414ce":"code","0a37a425":"code","eb5a2180":"code","4ee63cbf":"code","a135d36e":"code","5af7f2c4":"code","9a491acd":"code","94740d5c":"code","5adaffe0":"code","08f27739":"code","9c317217":"code","26c8994a":"code","7c13de33":"code","9cf31e12":"code","ddd3e42c":"code","c8cc90da":"code","9b9ef535":"code","95da4f15":"code","45ed5ff4":"code","5026805b":"code","b096ba19":"code","506b3bc7":"code","f12a6d4f":"code","804a26b7":"code","e2d4cc0a":"code","cc2feb82":"code","adf8d808":"code","86c3efb7":"markdown","5477b64b":"markdown","f9cecb77":"markdown","488bef15":"markdown","de1fdd53":"markdown","c3cd877e":"markdown","a93d7acf":"markdown","08baee84":"markdown","9d830dac":"markdown","85028e46":"markdown","3ad16602":"markdown","2db076d0":"markdown","525baf00":"markdown","b4a037a3":"markdown","56956bb9":"markdown","6faa16fa":"markdown","ea78ebff":"markdown","e2b81abb":"markdown","3afdec65":"markdown","5d3bc149":"markdown","a31d05c6":"markdown","26ac8352":"markdown","07e6f32a":"markdown"},"source":{"31ba6d4c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c00671dc":"!pip install openpyxl","947eb521":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)","4b1cdb79":"# Creating DataFrame\ndf_2017 = pd.read_excel('\/kaggle\/input\/forbes-top-200020172021\/Forbes-2017.xlsx')\ndf_2018 = pd.read_excel('\/kaggle\/input\/forbes-top-200020172021\/Forbes-2018.xlsx')\ndf_2019 = pd.read_excel('\/kaggle\/input\/forbes-top-200020172021\/Forbes-2019.xlsx')\ndf_2020 = pd.read_excel('\/kaggle\/input\/forbes-top-200020172021\/Forbes-2020.xlsx')\ndf_2021 = pd.read_excel('\/kaggle\/input\/forbes-top-200020172021\/Forbes-2021.xlsx')","f0762a7a":"df_2021.info()","68617da1":"df_2021.isna().sum()","594cc200":"# Checking the missing value for Assets\ndf_2021[df_2021['Assets'].isna()] ","22a35106":"df_2017[df_2017['Assets'].isna()]","c059b94c":"# Using value counts on the name column\ndf_2021['Name'].value_counts(ascending=False)","2d311e6d":"# Lets check some of the duplicated name\ndf_2021[(df_2021['Name'] == 'Kiyo Bank') | (df_2021['Name'] == 'TransUnion')].sort_values(by='Name')","c207a465":"# Checking for Duplicate\nprint(\"Are there duplicate instances:\",df_2021['Name'].duplicated().any())\n\n# Dropping Duplicate \ndf_2021 = df_2021.drop_duplicates(subset=['Name','Country','Sales','Profit','Assets','Market Value'])\n\n# Checking for Duplicate again\nprint(\"Are there duplicate instances:\",df_2021['Name'].duplicated().any())","ff452bbc":"# Missing Ranking?\ndf_2021[df_2021['Rank'].isna()].head()","f863c51a":"# Checking a range of the DataFrame that contains NaN value for Rank column\ndf_2021.iloc[12:17]","a87f7a90":"# Lets look at year 2021 First\ndf_2021.head()","9d35fb61":"# Check if the input is really from year 2021 - it is!\ndf_2021['Year'].unique()","a583fd44":"df_2021.sort_values(by='Market Value',ascending = False).head(10)","910332ac":"# So far, I see only B (Billion) and M (Million) unit for these weight indicators \n# With this function I will be able to see if there is any other indicators \n\ndef conversion(value):\n    '''\n    For converting wealth indicator from String to Float\n    like $45.8 B to 45800000000000.0\n    '''\n    try:\n        if value[-1].upper() == 'B':\n            worth = float(value.replace('$',\"\").replace(\" B\",\"\").replace(\",\",\"\")) * (10**9)\n        elif value[-1].upper() == 'M':\n            worth = float(value.replace('$',\"\").replace(\" M\",\"\").replace(\",\",\"\")) * (10**6)\n    except:\n        # For NaN value, that I haven't removed yet...these company most likely won't be in the analysis anyways\n        worth = 0\n        \n    return worth\n\n# Example of how this conversion funtion works\nvalue = df_2021['Profit'][0] # '$45.8 B'\nprint('Orginial:',value)\nprint('Conversion:',conversion(value))","c2747b59":"# Create new column using conversion function to assign new value\nfor col in df_2021.loc[:,\"Sales\":\"Market Value\"].columns.to_list():\n    df_2021[col+' Conversion'] = df_2021[col].apply(lambda val: conversion(val))\n\ndf_2021.head()","24ccd0ae":"df_2021['Country'].value_counts().head(10)","c0486b03":"# World map\nfig = px.choropleth(data_frame = df_2021['Country'].value_counts().reset_index().rename(columns={'Country':'Count','index':'Country'}),\n                    locations = 'Country',\n                    color = 'Count',\n                    locationmode = 'country names',\n                    scope = 'world',\n                    title = 'Number of company from different Countires')\n\nfig.show()","6e335722":"# Top 10 Country\nplt.figure(dpi=150)\nsns.countplot(data = df_2021,\n              x = 'Country',\n              order = df_2021['Country'].value_counts().iloc[:10].index.to_list(),\n              palette = 'Set3')\nplt.title(\"Top 10 Countires with Highest Number of Companies listed\\n in Forbes Top 2000 (in 2021)\")\nplt.xticks(rotation=90)\nplt.show()","6e7d07f4":"# do Sales, Profit, Assets, and Market Value in a subplot\ntotalSales_country = df_2021.groupby('Country')['Sales Conversion'].sum().sort_values(ascending=False).reset_index()\n\n# Change the yticks value later?\nimport matplotlib.ticker as ticker\n\nfig, ax = plt.subplots(dpi=150)\n\nax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: '{:,.0f}'.format(x\/10**12) + 'B'))\n\nsns.barplot(data = totalSales_country.head(10),\n            x = 'Country', y = 'Sales Conversion',\n            palette = 'Set3',ax=ax)\nplt.title(\"Top 10 Country with Highest Total Sales\")\nplt.ylabel(\"Sales (Billion US Dollar)\")\nplt.xticks(rotation=90)\nplt.show()","c85d83ae":"from matplotlib.patches import Patch\n\ndef barplotVisualization(df,feature,ylabel):\n    '''\n    Barplot visualization for specified feature\n    and the Company Name associated with it\n    '''\n    data = df.sort_values(feature, ascending = False).head(5)\n    \n    fig, ax = plt.subplots(dpi=120)\n    \n    colors = sns.color_palette('gist_rainbow_r',n_colors=len(data))\n    \n    \n    sns.barplot(data = data,\n                x = 'Name', y = feature, palette = colors, ax = ax)\n    \n    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: '{:,.0f}'.format(x\/10**9) + 'B'))\n    \n    cmap = dict(zip(data['Name'],colors))\n    patches = [Patch(color = c, label = l ) for l,c in cmap.items()]\n    \n    ax.set_ylabel(ylabel)\n    ax.set_xlabel(\"Company Name\")\n    plt.legend(handles = patches, bbox_to_anchor = (1.04,0.5), loc = 'center left', borderaxespad=0)\n    ax.set_xticklabels([])\n    plt.show()\n    \n    ","566eeaaa":"df_2021.sort_values('Sales Conversion',ascending = False).head(5)","3dc0a319":"barplotVisualization(df_2021,'Sales Conversion','Sales (Billion US Dollar)')","c2a40d2c":"df_2021.sort_values('Profit Conversion',ascending = False).head(5)","b95adc7a":"barplotVisualization(df_2021,'Profit Conversion','Profit (Billion US Dollar)')","593414ce":"df_2021.sort_values('Assets Conversion',ascending = False).head(5)","0a37a425":"barplotVisualization(df_2021,'Assets Conversion','Assets (Billion US Dollar)')","eb5a2180":"df_2021.sort_values('Market Value Conversion',ascending = False).head(5)","4ee63cbf":"barplotVisualization(df_2021,'Market Value Conversion','Market Value (Billion US Dollar)')","a135d36e":"# Check for duplicates \nprint(\"Duplicate 2017:\")\nprint(df_2017.isna().sum())\n\nprint(\"\\nDuplicate 2018:\")\nprint(df_2018.isna().sum())\n\nprint(\"\\nDuplicate 2019:\")\nprint(df_2019.isna().sum())\n\nprint(\"\\nDuplicate 2020:\")\nprint(df_2020.isna().sum())\n\nprint(\"\\nDuplicate 2021:\")\nprint(df_2021.isna().sum())","5af7f2c4":"df_2017.info()","9a491acd":"# Checking 2017\n\ndf_2017.head()","94740d5c":"df_2018.head()","5adaffe0":"df_2019.head()","08f27739":"df_2020.head()","9c317217":"df_2021.head()","26c8994a":"# Modifying Float value for \ndef conversionToBillion(value):\n    '''\n    For converting wealth indicator from String to Float\n    like $45.8 B to 45.8\n    '''\n    try:\n        if value[-1].upper() == 'B':\n            worth = float(value.replace('$',\"\").replace(\" B\",\"\").replace(\",\",\"\"))\n        elif value[-1].upper() == 'M':\n            worth = float(value.replace('$',\"\").replace(\" M\",\"\").replace(\",\",\"\")) * (10**6) \/ (10**9)\n    except:\n        # For NaN value, that I haven't removed yet...these company most likely won't be in the analysis anyways\n        worth = 0\n        \n    return worth","7c13de33":"# Conversion for 2020\nfor col in df_2020.loc[:,\"Sales\":\"Market Value\"].columns.to_list():\n    df_2020[col] = df_2020[col].apply(lambda val: conversionToBillion(val))\n\ndf_2020.head()","9cf31e12":"# Conversion for 2021\nfor col in df_2021.loc[:,\"Sales\":\"Market Value\"].columns.to_list():\n    df_2021[col] = df_2021[col].apply(lambda val: conversionToBillion(val))\n\ndf_2021.head()","ddd3e42c":"# Concat all the adjusted value dataframe together\ncomp = pd.concat([df_2017 ,df_2018, df_2019, df_2020, df_2021]).drop(columns = 'Rank')\ncomp.sort_values(by='Name')","c8cc90da":"# Top Sales\ntop = df_2021[df_2021['Country'] == 'United States'].sort_values(by='Sales',ascending = False)['Name'].iloc[:5].to_list()\n\nfig = px.bar(data_frame = comp[comp['Name'].isin(top)].sort_values(by='Year'),\n             x = 'Year', y = 'Sales', color = 'Name', barmode = 'group',\n             title = 'Top 5 Companies (US) in <b>Sales<\/b> in 2021')\n\nfig.update_layout(yaxis_title = 'Sales<br>(in Billion US dollar)',\n                  legend_title = 'Company Name',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.show()","9b9ef535":"# Top Profit\ntop = df_2021[df_2021['Country'] == 'United States'].sort_values(by='Profit',ascending = False)['Name'].iloc[:5].to_list()\n\nfig = px.bar(data_frame = comp[comp['Name'].isin(top)].sort_values(by='Year'),\n              x = 'Year', y = 'Profit', color = 'Name', barmode = 'group',\n              title = 'Top 5 Companies (US) in <b>Profit<\/b> in 2021')\n\nfig.update_layout(yaxis_title = 'Profit<br>(in Billion US dollar)',\n                  legend_title = 'Company Name',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.show()","95da4f15":"# Top Assets\ntop = df_2021[df_2021['Country'] == 'United States'].sort_values(by='Assets',ascending = False)['Name'].iloc[:5].to_list()\n\nfig = px.bar(data_frame = comp[comp['Name'].isin(top)].sort_values(by='Year'),\n              x = 'Year', y = 'Assets', color = 'Name', barmode = 'group',\n              title = 'Top 5 Companies (US) in <b>Assets<\/b> in 2021')\n\nfig.update_layout(yaxis_title = 'Assets<br>(in Billion US dollar)',\n                  legend_title = 'Company Name',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.show()","45ed5ff4":"# Top Market Value\ntop = df_2021[df_2021['Country'] == 'United States'].sort_values(by='Market Value',ascending = False)['Name'].iloc[:5].to_list()\n\nfig = px.bar(data_frame = comp[comp['Name'].isin(top)].sort_values(by='Year'),\n              x = 'Year', y = 'Market Value', color = 'Name', barmode = 'group',\n              title = 'Top 5 Companies (US) in <b>Market Value<\/b> in 2021')\n\nfig.update_layout(yaxis_title = 'Market Value<br>(in Billion US dollar)',\n                  legend_title = 'Company Name',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.show()","5026805b":"# FAANG Sales from 2017 to 2021\nfaang = ['Facebook','Amazon','Apple','Netflix','Google'] # However is not listed in any of the Forbes Top 2000\n\n\nfig = px.bar(data_frame = comp[comp['Name'].isin(faang)].sort_values(by='Year'),\n              x = 'Year', y = 'Sales', color = 'Name', barmode = 'group',\n              title = 'FAANG Sales from 2017 to 2021')\n\nfig.update_layout(yaxis_title = 'FANNG Sales<br>(in Billion US dollar)',\n                  legend_title = 'Company Name',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.show()","b096ba19":"# FAANG Profit from 2017 to 2021\nfig = px.bar(data_frame = comp[comp['Name'].isin(faang)].sort_values(by='Year'),\n              x = 'Year', y = 'Profit', color = 'Name', barmode = 'group',\n              title = 'FAANG Profit from 2017 to 2021')\n\nfig.update_layout(yaxis_title = 'FANNG Profit<br>(in Billion US dollar)',\n                  legend_title = 'Company Name',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.show()","506b3bc7":"# FAANG Assets from 2017 to 2021\nfig = px.bar(data_frame = comp[comp['Name'].isin(faang)].sort_values(by='Year'),\n              x = 'Year', y = 'Assets', color = 'Name', barmode = 'group',\n              title = 'FAANG Assets from 2017 to 2021')\n\nfig.update_layout(yaxis_title = 'FANNG Assets<br>(in Billion US dollar)',\n                  legend_title = 'Company Name',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.show()","f12a6d4f":"# FAANG Market Value from 2017 to 2021\nfig = px.bar(data_frame = comp[comp['Name'].isin(faang)].sort_values(by='Year'),\n              x = 'Year', y = 'Market Value', color = 'Name', barmode = 'group',\n              title = 'FAANG Market Value from 2017 to 2021')\n\nfig.update_layout(yaxis_title = 'FANNG Market Value<br>(in Billion US dollar)',\n                  legend_title = 'Company Name',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.show()","804a26b7":"# By Sales\ntop = df_2021[df_2021['Country'] == 'China'].sort_values(by='Sales',ascending = False)['Name'].iloc[:5].to_list()\n\nfig = px.bar(data_frame = comp[comp['Name'].isin(top)].sort_values(by='Year'),\n              x = 'Year', y = 'Sales', color = 'Name', barmode = 'group',\n              title = 'Top Companies (China) in Sales from 2017 to 2021')\n\nfig.update_layout(yaxis_title = 'Sales<br>(in Billion US dollar)',\n                  legend_title = 'Company Name',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.show()","e2d4cc0a":"# By Profit\ntop = df_2021[df_2021['Country'] == 'China'].sort_values(by='Profit',ascending = False)['Name'].iloc[:5].to_list()\n\nfig = px.bar(data_frame = comp[comp['Name'].isin(top)].sort_values(by='Year'),\n              x = 'Year', y = 'Profit', color = 'Name', barmode = 'group',\n              title = 'Top Companies (China) in Profit from 2017 to 2021')\n\nfig.update_layout(yaxis_title = 'Profit<br>(in Billion US dollar)',\n                  legend_title = 'Company Name',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.show()","cc2feb82":"# By Assets\ntop = df_2021[df_2021['Country'] == 'China'].sort_values(by='Assets',ascending = False)['Name'].iloc[:5].to_list()\n\nfig = px.bar(data_frame = comp[comp['Name'].isin(top)].sort_values(by='Year'),\n              x = 'Year', y = 'Assets', color = 'Name', barmode = 'group',\n              title = 'Top Companies (China) in Assets from 2017 to 2021')\n\nfig.update_layout(yaxis_title = 'Assets<br>(in Billion US dollar)',\n                  legend_title = 'Company Name',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.show()","adf8d808":"# By Market Value\ntop = df_2021[df_2021['Country'] == 'China'].sort_values(by='Market Value',ascending = False)['Name'].iloc[:5].to_list()\n\nfig = px.bar(data_frame = comp[comp['Name'].isin(top)].sort_values(by='Year'),\n              x = 'Year', y = 'Market Value', color = 'Name', barmode = 'group',\n              title = 'Top Companies (China) in Market Value from 2017 to 2021')\n\nfig.update_layout(yaxis_title = 'Market Value<br>(in Billion US dollar)',\n                  legend_title = 'Company Name',\n                  font = dict(family = \"Courier New, monospace\",\n                              size = 14, color = 'black')\n                  )\n\nfig.show()","86c3efb7":"### Creating New DataFrame for 2017 - 2021 Analysis","5477b64b":"### Highest Market Value","f9cecb77":"You may run into problem lile \"ImportError\" when trying to read the Excel file (.xlsx). You may have to install \"openpyxl\" package (running this command: !pip install openpyxl). You will probably runs into the problem, like I did, that you cannot install new packages. You have to make sure that your \"Internet\" option is selected. \nTo get to that:\n* click on the \">|\" icon on the upper right corner of the kernel\n* clikc on \"Settings\"\n* If you haven't already verify your phone number, you have to do it. Otherwise, the \"Internet\" option won't show up.\n* After verifying your phone number, click the \"Internet\" option. \n* Now, you should be able to install new packages!","488bef15":"## Companies from different countries appearing in Forbes Top 2000 for Year 2021","de1fdd53":"# Time Series Analysis","c3cd877e":"# Forbes Top 2000 Visualization and Analysis","a93d7acf":"### Highest Profit","08baee84":"# Individual Company Performance\nLets explore how does individual company performs ","9d830dac":"I will used the function similar to the one I wrote earlier when I was analysis the 2021 dataset to modify the data for 2020 dataset. However, there will be some adjusted to the return value in order to match the format of value in dataframe for year 2017 to 2019","85028e46":"### Highest Assets","3ad16602":"From looking at how the data is recorded for the wealth related columns, there are two different ways that the data is begin recorded. As the dataset for year 2017 to 2019, the numbers were recorded in billion dollar with no dollar sign and 'M' or 'B' indication like dataset for year 2020 onward. For simplicity, I will convert the value for 2020 and 2021 dataset to match that of the later year.  ","2db076d0":"# Thank you for checking out my work!","525baf00":"# Tracking the Top Company (Analysis)","b4a037a3":"## Checking the Wealth Indicators columns","56956bb9":"Sales, Profit, Assets and Market Value isn't a numerical value that we can sort using builtin function; therefore, it requires some modification. ","6faa16fa":"# Exploring and Cleaning the Data for Analysis","ea78ebff":"### FANNG ( but sadly no Google)","e2b81abb":"It is a duplicated value! Now, I have to check if there are other duplicate value in the dataframe or not.","3afdec65":"It seems that the Rank is independence from the index and any wealth indicator columns like Sales, Profit, etc. Therefore, I cannot use the Rank column for evaluating how each companies perform.  ","5d3bc149":"### Top Companies in the US in 2021 (tracing back to 2017)","a31d05c6":"### Top Companies in China in 2021 (tracing back to 2017)","26ac8352":"There are indeed duplicate data! I will be removing them.","07e6f32a":"### Highest Sales"}}