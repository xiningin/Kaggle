{"cell_type":{"7964650c":"code","54ca1144":"code","bae27cdf":"code","bbccf65a":"code","6a9264e3":"code","f532bf9e":"code","4b610aa5":"code","c446547b":"code","75f598f3":"code","409cb6d4":"markdown","a5aaf0c5":"markdown","b3c8acf1":"markdown","b37b81e4":"markdown","13999df5":"markdown","3b7ff77e":"markdown","8b37a5de":"markdown","c0eaa41b":"markdown"},"source":{"7964650c":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Dense, Flatten, BatchNormalization\nfrom keras.utils import np_utils, plot_model\nfrom keras import regularizers, optimizers","54ca1144":"df_train = pd.read_csv(\"\/kaggle\/input\/Kannada-MNIST\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/Kannada-MNIST\/test.csv\")\ndf_test = df_test.drop(columns=\"id\")\n\n# Shuffle\ndf_train = df_train.sample(frac=1).reset_index(drop=True)","bae27cdf":"def normalize(X):\n    X = X.astype(\"float\")\n    mean = X.mean()\n    std = X.std() + 10**(-8)\n    X -= mean\n    X \/= std\n    return X\n\ndef preprocess(df):\n    X = df.drop(columns=\"label\").to_numpy()\n    # Normalize\n    X = normalize(X)\n    # Reshape to fit in Conv2D\n    X = X.reshape(X.shape[0], 28, 28, 1)\n    # One hot encode labels\n    y = np_utils.to_categorical(df[\"label\"].to_numpy())\n    return X,y\n\nXtrain, ytrain = preprocess(df_train)\n\nXtest = df_test.to_numpy()\nXtest = normalize(Xtest)\nXtest = Xtest.reshape(Xtest.shape[0], 28, 28, 1)","bbccf65a":"img = Xtrain[0]\nimg = np.array(img, dtype='float')\npixels = img.reshape((28, 28))\nplt.imshow(pixels, cmap='gray')\nplt.show()\nprint(\"Label: {}\".format(ytrain[0]))","6a9264e3":"# Model Architecture\nimg_width, img_height = Xtrain.shape[1], Xtrain[2]\nn_classes = ytrain.shape[1]\nmodel = Sequential()\nmodel.add(Conv2D(64,# Number of filters\n                (3,3), # Kernel Size\n                input_shape=(img_width,img_width,1),\n                activation=\"relu\",\n                padding=\"same\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dropout(0.4))\nmodel.add(Dense(50, activation=\"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(n_classes, activation=\"softmax\"))\n\n\nmodel.compile(loss='categorical_crossentropy', optimizer=\"adam\", metrics=['accuracy'])\nmodel.summary()","f532bf9e":"plot_model(model)","4b610aa5":"history = model.fit(Xtrain, ytrain, validation_split=0.2, batch_size=64, epochs=10)","c446547b":"# Plot training & validation accuracy values\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='best')\nplt.show()\n\n# Plot training & validation loss values\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='best')\nplt.show()","75f598f3":"predictions = model.predict(Xtest)\npredictions = np.argmax(predictions,axis=1)\nsubmission = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/sample_submission.csv')\nsubmission['label'] = predictions\nsubmission.to_csv(\"submission.csv\", index=False)","409cb6d4":"# Visualize Results","a5aaf0c5":"# Initialize Model","b3c8acf1":"# Normalize","b37b81e4":"# Visualize Model","13999df5":"# Predict Testdata","3b7ff77e":"# Fit the model","8b37a5de":"# Visualize an image","c0eaa41b":"# Load Data"}}