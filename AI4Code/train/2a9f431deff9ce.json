{"cell_type":{"a03699d9":"code","74977491":"code","278516d2":"code","6c5b9695":"code","94bd12d4":"code","7cf0bb20":"code","e2344314":"code","70151553":"code","0edb9bc6":"code","df6eb0c5":"code","a72d484c":"code","dd62bafa":"code","288aafdb":"code","3b979211":"code","7928d2f6":"code","2716d5a8":"code","9012a498":"code","99f5613e":"code","69c45c60":"code","445e15b3":"code","e6a22ec1":"code","f59298f7":"code","7ff73fd8":"code","71833557":"code","fc3c02c4":"code","5055887a":"code","a341e98e":"code","4977b572":"code","d471866e":"code","e417a44e":"code","427f58f7":"code","f6a70ef7":"code","adea0ef0":"code","db7d1b3c":"code","89a1a065":"code","8acb98a0":"code","9dfc782f":"code","3bbb2342":"code","73fabfd0":"code","f2be610b":"code","5583e7f6":"code","c4828fad":"code","ab105ffa":"code","297ad961":"code","de4bda49":"code","a50ccf56":"code","b9bac01e":"code","b42d1d93":"code","7766fed1":"code","57157aa5":"code","76a46d2d":"code","6bfc960f":"code","e2600422":"code","3e6b51a1":"code","b231b950":"code","3a320d92":"code","a90f2e39":"code","23308428":"code","15507258":"code","3040200e":"code","6e44d32b":"code","0d2085d8":"code","17467df4":"code","60d6aff1":"code","816bfcd3":"code","38d254b1":"code","579810ad":"code","c048a568":"code","1a98d36c":"code","96cd6739":"code","8bec4281":"code","8614db4f":"markdown","d9f95bd5":"markdown","03cd3155":"markdown","2a73536c":"markdown","a36e648f":"markdown","4bc1c595":"markdown","393bf3c5":"markdown","9e6f509f":"markdown","e0f64617":"markdown","216486cb":"markdown","6e17d18d":"markdown","e20d95a9":"markdown","3e1a5357":"markdown","1d7ffc55":"markdown","0e7c4567":"markdown","feff1f84":"markdown","8aa45a3c":"markdown","55f3a6a3":"markdown","1eae1a8a":"markdown","0bb90224":"markdown","73aabb7a":"markdown","165af108":"markdown","0e75c475":"markdown","cdb50380":"markdown","55a04dd4":"markdown"},"source":{"a03699d9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns # visualization\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nfrom eli5 import show_weights\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import cross_val_score\nfrom xgboost import XGBRegressor\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport nltk\nimport string\nfrom wordcloud import WordCloud, STOPWORDS\nimport re\nfrom nltk.tokenize import RegexpTokenizer \nfrom collections import Counter\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import datasets\nfrom IPython.display import Image  \nfrom sklearn import tree\n\n\n","74977491":"wine_file_path = '..\/input\/wine-reviews\/winemag-data-130k-v2.csv'\nwine_data = pd.read_csv(wine_file_path)\nselected_wine_data = pd.read_csv(wine_file_path)","278516d2":"wine_data","6c5b9695":"#MATTHEW CADENA\nprint(\"Columns with Number of Missing Entries:\")\nprint(wine_data.isnull().sum())","94bd12d4":"#LILLIAN SAEGER\n\n#print out important information about the dataframe\ndef info_table(data_frame):\n    print(f\"Dataset Shape: {data_frame.shape}\")\n    info = pd.DataFrame(data_frame.dtypes, columns=['dtypes'])\n    info = info.reset_index()\n    info['Name'] = info['index']\n    info = info[['Name', 'dtypes']]\n    info[\"Missing\"] = data_frame.isnull().sum().values\n    info['Unique'] = data_frame.nunique().values\n    info['First Value'] = data_frame.loc[0].values\n    info['Second Value'] = data_frame.loc[1].values\n    info['Third Value'] = data_frame.loc[2].values\n\n    return info\n\ninfo_table(wine_data)\n","7cf0bb20":"#LILLIAN SAEGER\n\n#information about price per country- how many, min, max for all data\n\nfrom learntools.pandas.grouping_and_sorting import *\nwine_data.groupby(['country']).price.agg([len,min,max])\n\n","e2344314":"#MATTHEW CADENA\nwine_data.price.describe()\n#USED TO SEE THE INFO BEFORE MANIP","70151553":"#LILLIAN SAEGER \n\n#find outliers\ndef findOutliers(data_frame):\n    #mean, standard deviation and three standard deviations\n    data_mean = np.mean(data_frame)\n    data_std = np.std(data_frame)\n    three_stds = data_std *3\n\n    #looking for outlier data that is 3 std above or below the mean\n    lower_three_stds = data_mean - three_stds\n    upper_three_stds = data_mean + three_stds\n    \n    lower_outliers = [x for x in data_frame if x < lower_three_stds]\n    upper_outliers = [x for x in data_frame if x > upper_three_stds]\n    \n    without_outliers = [x for x in data_frame if x > lower_three_stds and x < upper_three_stds]\n    \n    num_lower = len(lower_outliers)\n    num_higher = len(upper_outliers)\n    num_total_outliers = num_lower + num_higher\n    num_non_outliers = len(without_outliers)\n    total = num_total_outliers + num_non_outliers\n    \n    upper_outliers.sort(reverse = True)\n    #sorted_upper_outliers = sorted(upper_outliers)\n    #print(sorted_upper_outliers[:10])\n    print(\"Highest outliers: \" , upper_outliers[:100])\n    \n    print(\"Mean of data: \" , data_mean)\n    print('Lower outliers: %d' % num_lower)\n    print('Upper outliers: %d' % num_higher)\n    print('Non-outliers: %d' % num_non_outliers)\n    print(\"*********************\")\n    print('num total outliers: %d'% num_total_outliers )\n    print('total: %d' % total)\n    print('**********************')\n    print(\"Total PERCENT that are outliers: \", round(num_total_outliers\/total, 9)* 100)\n    ","0edb9bc6":"#MATTHEW CADENA\nq = wine_data[\"price\"].quantile(0.999)\nprint(q)\nwine_data_Outliers = wine_data[wine_data[\"price\"]<q]\nwine_data.price.describe()\n#USED TO SEE THE INFO AFTER MANIP","df6eb0c5":"#LILLIAN SAEGER\n\nfindOutliers(wine_data['price'])","a72d484c":"#Lillian Saeger\n#drop NAN's in the entire dataframe\nselected_wine_data.dropna(inplace = True)\n\n#make all columns categorical\nselected_wine_data = pd.DataFrame({col: selected_wine_data[col].astype('category').cat.codes for col in selected_wine_data}, index=selected_wine_data.index)\n\n#create correlations and correlation heat map\ncorr= selected_wine_data.corr(method = 'pearson')\nsns.heatmap(corr)","dd62bafa":"#MATTHEW CADENA\n#THIS FILLS ANY MISSING ENTRIES WITH THE AVERAGE OF THEIR RESPECTIVE COLUMNS\nprice_avg = wine_data[\"price\"].mean()\n\nwine_data['price'].fillna(price_avg, inplace = True)\n","288aafdb":"\nwine_data = wine_data[['country', 'province', 'region_1', 'winery', 'price', 'points', 'variety', 'title', 'taster_name', 'description']]\nwine_data.rename(columns={'region_1':'region'}, inplace = True)\n","3b979211":"#TIFFANY TRAN\nwine_data = wine_data.dropna(axis=0)\nwine_data.head()","7928d2f6":"#Label Encoding \n#convert a column to a category, then use those category values for the label encoding\nwine_data[\"country\"] = wine_data[\"country\"].astype('category')\nwine_data[\"description\"] = wine_data[\"description\"].astype('category')\nwine_data[\"province\"] = wine_data[\"province\"].astype('category')\nwine_data[\"region\"] = wine_data[\"region\"].astype('category')\nwine_data[\"taster_name\"] = wine_data[\"taster_name\"].astype('category')\nwine_data[\"title\"] = wine_data[\"title\"].astype('category')\nwine_data[\"variety\"] = wine_data[\"variety\"].astype('category')\nwine_data[\"winery\"] = wine_data[\"winery\"].astype('category')\n\n#assign the encoded variable to a new column using the cat.codes accessor:\nwine_data[\"country codes\"] = wine_data[\"country\"].cat.codes\nwine_data[\"description codes\"] = wine_data[\"description\"].cat.codes\nwine_data[\"province codes\"] = wine_data[\"province\"].cat.codes\nwine_data[\"region codes\"] = wine_data[\"region\"].cat.codes\nwine_data[\"taster codes\"] = wine_data[\"taster_name\"].cat.codes\nwine_data[\"title codes\"] = wine_data[\"title\"].cat.codes\nwine_data[\"variety codes\"] = wine_data[\"variety\"].cat.codes\nwine_data[\"winery codes\"] = wine_data[\"winery\"].cat.codes","2716d5a8":"cData = wine_data.copy()","9012a498":"cData['description']= cData['description'].str.lower()\ncData['description']= cData['description'].apply(lambda elem: re.sub('[^a-zA-Z]',' ', elem))  \ncData['description']","99f5613e":"tokenizer = RegexpTokenizer(r'\\w+')\nwords_descriptions = cData['description'].apply(tokenizer.tokenize)\nwords_descriptions.head()","69c45c60":"from collections import Counter\nall_words = [word for tokens in words_descriptions for word in tokens]\n\ncount_all_words = Counter(all_words)\ncount_all_words.most_common(100)","445e15b3":"stopword_list = stopwords.words('english')\nps = PorterStemmer()\nwords_descriptions = words_descriptions.apply(lambda elem: [word for word in elem if not word in stopword_list])\nwords_descriptions = words_descriptions.apply(lambda elem: [ps.stem(word) for word in elem])\ncData['description_cleaned'] = words_descriptions.apply(lambda elem: ' '.join(elem))","e6a22ec1":"all_words = [word for tokens in words_descriptions for word in tokens]\nVOCAB = sorted(list(set(all_words)))\nprint(\"%s words total, with a vocabulary size of %s\" % (len(all_words), len(VOCAB)))\ncount_all_words = Counter(all_words)\nlist_of_words = count_all_words.most_common(15)\nlist_of_words","f59298f7":"first_ele =  [x[0] for x in list_of_words]\nfirst_ele","7ff73fd8":"#TIFFANY TRAN\n\n\nplt.title('Top Words Repeated in Wine Descriptions', fontsize=30)\nwc = WordCloud(max_font_size=30,background_color='white')\nwc.generate(' '.join(first_ele))\nplt.imshow(wc,interpolation=\"bilinear\")\nplt.axis('off')","71833557":"#TIFFANY TRAN\n\nplt.figure(figsize= (16,8))\nplt.title('Word Cloud of Wine Description')\nwc = WordCloud(max_words=1000,max_font_size=40,background_color='white', stopwords = stopword_list)\nwc.generate(' '.join(wine_data['description']))\nplt.imshow(wc,interpolation=\"bilinear\")\nplt.axis('off')","fc3c02c4":"index = 0\ndata1=pd.DataFrame()\ndata2=pd.DataFrame()\ndata3=pd.DataFrame()\ndata4=pd.DataFrame()\ndata5=pd.DataFrame()\ndata6=pd.DataFrame()\ndata7=pd.DataFrame()\ndata8=pd.DataFrame()\ndata9=pd.DataFrame()\ndata10=pd.DataFrame()\ndata11=pd.DataFrame()\ndata12=pd.DataFrame()\ndata13=pd.DataFrame()\ndata14=pd.DataFrame()\ndata15=pd.DataFrame()\ndfs = [data1,data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12, data13, data14, data15]\n#x = [pd.DataFrame() for x in dfs]\nwhile index < len(dfs):\n    dfs[index] = cData[cData['description'].str.contains(first_ele[index])]\n    index = index + 1","5055887a":"sns.set_style(\"dark\")\nfig, axes = plt.subplots(nrows=5, ncols=3, figsize=(30,30))\n\nindex = 0\nrow = 0\ncol = 0\nwhile( index<len(dfs)):\n    y = dfs[index]['points'].value_counts()\n    x = y.index\n    axes[row,col].bar(x,y)\n    axes[row,col].set_title('Points Influenced by the keyword ' + first_ele[index])\n    index = index + 1\n    \n    if col == 2:\n        col = 0\n        row = row + 1\n        \n    elif col != 2:\n        col = col + 1","a341e98e":"#TIFFANY TRAN\nplt.figure(figsize=(50,20))\n\nsns.boxplot(x = 'points', y = 'price', palette = 'bone', data = wine_data, linewidth = 1.5)\nplt.title(\"Correlation between Price and Points\", fontsize=70)\nplt.xlabel(\"Points\",fontsize=50)\nplt.ylabel(\"Price\",fontsize=50)\nplt.xticks(fontsize=30)\nplt.yticks(fontsize=30)\nplt.show()","4977b572":"#TIFFANY TRAN\n#without outliers\nplt.figure(figsize=(50,20))\n\nsns.boxplot(x = 'points', y = 'price', palette = 'bone', data = wine_data_Outliers, linewidth = 1.5)\nplt.title(\"Correlation between Price and Points without Outliers\", fontsize=70)\nplt.xlabel(\"Points\", fontsize=50)\nplt.ylabel(\"Price\",fontsize=50)\nplt.xticks(fontsize=30)\nplt.yticks(fontsize=30)\n\nplt.show()","d471866e":"#LILLIAN SAEGER\n\n#distplot price distribution up to $500 by frequency for all data\n\nplt.figure(figsize=(12,5))\n\n#graph = sns.distplot(wine_data['price'])\ngraph = sns.distplot(wine_data[wine_data['price'] < 500]['price'])\ngraph.set_title(\"Price Distribution up to $500\", fontsize=18)\ngraph.set_xlabel(\"Price\", fontsize=14)\ngraph.set_ylabel(\"Frequency Distribution\", fontsize=14)","e417a44e":"#LJS\n\n#distplot price distribution up to $500 by frequency for all data\n\nplt.figure(figsize=(12,5))\n\n#graph = sns.distplot(wine_data['price'])\ngraph = sns.distplot(wine_data_Outliers[wine_data_Outliers['price'] < 500]['price'])\ngraph.set_title(\"Price Distribution up to $500 without Outliers\", fontsize=18)\ngraph.set_xlabel(\"Price\", fontsize=14)\ngraph.set_ylabel(\"Frequency Distribution\", fontsize=14)","427f58f7":"#MATTHEW CADENA\nsns.set(font_scale = 1.5)\nsns.set_style(\"dark\")\nwine_data.price.plot.hist(bins = 100, range= (0, 200), figsize=(20,10),color=['cyan'], edgecolor = 'black')\nplt.title('Frequency of Wine Prices', fontsize=40)\nplt.xlabel('Price Point', fontsize=20)\nplt.ylabel('Count', fontsize=20)\nplt.show()","f6a70ef7":"#MATTHEW CADENA\nsns.set(font_scale = 1.5)\nsns.set_style(\"dark\")\nwine_data_Outliers.price.plot.hist(bins = 100, range= (0, 200), figsize=(20,10),color=['cyan'], edgecolor = 'black')\nplt.title('Frequency of Wine Prices without Outliers', fontsize=40)\nplt.xlabel('Price Point', fontsize=20)\nplt.ylabel('Count', fontsize=20)\nplt.show()","adea0ef0":"#LILLIAN SAEGER\n\n#regplot of Points vs distribution of Price for all data\n\nplt.figure(figsize=(10,4))\n\ngraph = sns.regplot(x='points',y='price', data=wine_data, fit_reg = True)\ngraph.set_title(\"Points vs Distribution of Price\", fontsize=18)\ngraph.set_xlabel(\"Points\", fontsize=14)\ngraph.set_ylabel(\"Price Distribution\", fontsize=14)\ngraph.set(ylim=(0, 400)) #TIFFANY T ADDED One Line","db7d1b3c":"#MATTHEW CADENA\nsns.set_style(\"dark\")\nplt.title('Wine Price vs Wine Points', fontsize=40)\nplt.xlabel('Price Point', fontsize=20)\nplt.ylabel('Points', fontsize=20)\n#plt.show()\nplt.xlim([0,200])   \nplt.ylim([75,105])\ng = sns.regplot(x = wine_data['price'], y = wine_data['points'],scatter=False, ci = 99.99, label= 'with Outliers', color='r')\ng.figure.set_size_inches(20,10)\n\nplt.xlim([0,200])   \nplt.ylim([75,105])\ng = sns.regplot(x = wine_data_Outliers['price'], y = wine_data_Outliers['points'],scatter=False, ci = 99.99, label='without Outliers')\ng.figure.set_size_inches(20,10)\n\nplt.legend()\n\nplt.show()","89a1a065":"#TIFFANY TRAN\nplt.figure(figsize=(5,5))\ngraph = wine_data[wine_data.price < 100].dropna().sample(5000)\nsns.kdeplot(graph.price, graph.points, shade=True, cmap=\"bone_r\")\nplt.xlabel(\"Price\", fontsize=15)\nplt.ylabel(\"Points\", fontsize=15)\nplt.yticks(fontsize=10)\nplt.xticks(fontsize=10)\nplt.title(\"Price and Points Correlation\", fontsize= 15)\nplt.suptitle('Sample Size 5000', fontsize= 10)\n\nplt.figure(figsize=(5,5))\ngraph2 = wine_data_Outliers[wine_data_Outliers.price < 100].dropna().sample(5000)\nsns.kdeplot(graph2.price, graph2.points, shade=True, cmap=\"GnBu\")\nplt.xlabel(\"Price\", fontsize=15)\nplt.ylabel(\"Points\", fontsize=15)\nplt.yticks(fontsize=10)\nplt.xticks(fontsize=10)\nplt.title(\"Price and Points Correlation without Outliers\", fontsize= 15)\nplt.suptitle('Sample Size 5000', fontsize= 10)\n\n\nplt.show()","8acb98a0":"#Wine prices by country \ncountries =['Argentina','Italy', 'France', 'Spain', 'US', 'Chile', 'Portugal', 'New Zealand', 'Germany', 'South Africa']\nsub_data = wine_data[wine_data['country'].isin(countries)]\nplt.figure(figsize=(15,10))\nsns.set_context(\"paper\", font_scale=2.5)\n#sns.violinplot(x=\"country\", y=\"price\", data=sub_data,inner=None)\nsns.violinplot(x=\"country\", y=\"price\", data=wine_data,order=pd.value_counts(wine_data['country']).iloc[:15].index ,inner=None)\nplt.ylabel(\"Price\", fontsize=25)\nplt.xlabel(\"Country\", fontsize=25)\nplt.title(\"Top 10 Wine Producing Countries and Wine Price Spread\", fontsize=30)\n#MATTHEW CADENA: I ADDED THE ORDER PARAMETER TO ONLY DISPLAY THE COUNTRIES IN THE 'COUNTRIES' LIST INSTEAD ALL THE COUNTRIES\n#Cris L\nplt.ylim(0,450)\nplt.xticks(rotation =90)","9dfc782f":"sns.catplot(x=\"country\", hue=\"points\", kind=\"count\", palette=\"pastel\", edgecolor=\".2\",\n           data=wine_data, height=7, aspect =2)\nplt.ylabel('Country',fontsize=30)\nplt.xlabel('Points',fontsize=30)\nplt.yticks(fontsize=20)\nplt.xticks(fontsize=20)\nplt.title('Countries by Points Spread',fontsize=50)","3bbb2342":"#CHRISTOPHER MUCKENFUSS\n\ncounts = wine_data['taster_name'].value_counts()\nplt.figure(figsize=(30,10))\ng = sns.barplot(x = counts.index, y = counts)\n\nplt.title(\"Number of Reviews from each Taster\", fontsize=40)\nplt.ylabel(\"Reviews\", fontsize=30)\nplt.xlabel(\"Tasters\", fontsize=30)\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\n\nplt.xticks(rotation=45) #TIFFANY T ADDED One Line\n\ncounts = wine_data_Outliers['taster_name'].value_counts()\nplt.figure(figsize=(30,10))\ng = sns.barplot(x = counts.index, y = counts)\n\nplt.title(\"Number of Reviews from each Taster without Outliers\", fontsize=40)\nplt.ylabel(\"Reviews\", fontsize=30)\nplt.xlabel(\"Tasters\", fontsize=30)\n\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\n\nplt.xticks(rotation=45) #TIFFANY T ADDED One Line\n\nplt.show()","73fabfd0":"#CHRISTOPHER MUCKENFUSS\n\ncountry_counts = wine_data['country'].value_counts()\nplt.figure(figsize=(30,10))\nsns.barplot(x = country_counts.index, y = country_counts)\nplt.title(\"Number of Wines from each Country\", fontsize=50)\nplt.ylabel(\"Number of Wines\", fontsize=30)\nplt.xlabel(\"Country\", fontsize=30)\nplt.xticks(rotation=45, fontsize=30) #TIFFANY T ADDED One Line\nplt.yticks(fontsize=20) #TIFFANY T ADDED One Line\nplt.xlim(0, 14) #TIFFANY T ADDED One Line PLUS THE FONT SIZES BECAUSE THE TEXT WAS TOO SMALL\n\n","f2be610b":"#MATTHEW CADENA\nsns.set(font_scale = 1.5)\ng=sns.catplot(x=\"taster_name\",kind=\"count\", palette=\"Spectral\",data = wine_data,order=pd.value_counts(wine_data['taster_name']).iloc[:15].index)\ng.set_xticklabels(rotation=60)\n\ng.fig.set_size_inches(30,10)\ng.fig.suptitle('Top 15 Tasters by Wine Reviews', fontsize=40)\nplt.ylabel(\"Reviews\", fontsize = 30)\nplt.xlabel(\"Tasters\", fontsize = 30)\n\nsns.set(font_scale = 1.5)\ng=sns.catplot(x=\"taster_name\",kind=\"count\", palette=\"Spectral\",data = wine_data_Outliers,order=pd.value_counts(wine_data_Outliers['taster_name']).iloc[:15].index)\ng.set_xticklabels(rotation=60)\n\ng.fig.set_size_inches(30,10)\ng.fig.suptitle('Top 15 Tasters by Wine Reviews without Outliers', fontsize=40)\nplt.ylabel(\"Reviews\", fontsize = 30)\nplt.xlabel(\"Tasters\", fontsize = 30)\n\n\nplt.show()","5583e7f6":"import pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns \n\n%matplotlib inline \n\n \n\n#TIFFANY TRAN\npoints_counts = wine_data['points'].value_counts()\nplt.figure(figsize=(25,10))\ng=sns.barplot(x = points_counts.index, y = points_counts)\nplt.title(\"Number of Wines in Each Point Value\", fontsize = 40)\nplt.ylabel(\"Number of Wines\", fontsize = 30)\nplt.xlabel(\"Point Value\", fontsize = 30)\n\nfor p in g.patches: \n    g.annotate(format(p.get_height()), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points') \n #LILLIAN SAEGER ONE LINE\n\n","c4828fad":"#BOXPLOT FOR THE TOP 20 VARIETIES OF WINE BASED ON POINTS\n#MATTHEW CADENA\nfig = plt.figure(figsize=(35,10))\ng = sns.boxplot(x=\"variety\", y=\"points\", data=wine_data,order=pd.value_counts(wine_data['variety']).iloc[:150].index)\ng.set_xticklabels(wine_data.variety, rotation = 270)\nplt.xlabel(\"Variety\", fontsize=40)\nplt.ylabel(\"Points\", fontsize=40)\nplt.title(\"Top 20 Varieties of Wine based on Points\",fontsize= 60)\nplt.ylim([75,100])\n\n\nfig = plt.figure(figsize=(35,10))\ng = sns.boxplot(x=\"winery\", y=\"points\", data=wine_data,order=pd.value_counts(wine_data['winery']).iloc[:100].index)\ng.set_xticklabels(wine_data.winery, rotation = 270)\nplt.ylim([75,100])\ng.set_title(\"Top 100 Wineries by Points\", fontsize = 60)\ng.set_xlabel(\"Winery\", fontsize=40)\ng.set_ylabel(\"Points\", fontsize =40)\n\n\nplt.show()","ab105ffa":"#TIFFANY TRAN\nfig = plt.figure(figsize=(10,5))\n\nwine_data['points'].value_counts().sort_index().plot.line(label='with Outliers')\nplt.xlabel(\"Points\", fontsize=12)\nplt.ylabel(\"Number of Wines\", fontsize=12)\nplt.title(\"Number of Wines in Each Point Value\",fontsize= 15)\nplt.yticks(fontsize=10)\nplt.xticks(fontsize=10)\n\nwine_data_Outliers['points'].value_counts().sort_index().plot.line(label='without Outliers')\nplt.yticks(fontsize=10)\nplt.xticks(fontsize=10)\nplt.legend()\nplt.show()","297ad961":"#BOXPLOT FOR THE TOP 100 WINERIES OF WINE BASED ON POINTS\n#MATTHEW CADENA\nfig = plt.figure(figsize=(35,10))\ng = sns.boxplot(x=\"winery\", y=\"points\", data=wine_data_Outliers,order=pd.value_counts(wine_data_Outliers['winery']).iloc[:100].index)\ng.set_xticklabels(wine_data_Outliers.winery, rotation = 270)\nplt.ylim([75,100])\ng.set_title(\"Top 100 Wineries by Points\", fontsize = 60)\ng.set_xlabel(\"Winery\", fontsize=40)\ng.set_ylabel(\"Points\", fontsize =40)","de4bda49":"#BOXPLOT FOR THE TOP 5 COUNTRIES BASED ON POINTS SPREAD\n#MATTHEW CADENA\nsns.set_palette(sns.color_palette(\"colorblind\"))\n\nplt.figure(figsize=(10,10))\n\ncountry = wine_data.country.value_counts()[:5]\n\ngraph = sns.boxplot(x='country', y = \"points\", data=wine_data[(wine_data.country.isin(country.index.values))],order=pd.value_counts(wine_data['country']).iloc[:5].index)\ngraph.set_title(\"Top 5 Counries Based on Points\", fontsize=20)\ngraph.set_xlabel(\"Country\", fontsize=15)\ngraph.set_ylabel(\"Points\", fontsize=15)\ngraph.set_xticklabels(graph.get_xticklabels(), rotation = 45)\nplt.ylim([79,95])","a50ccf56":"#MATTHEW CADENA\n#TOP 15 VARIETY OF WINES\nsns.set(font_scale = 1.5)\ng=sns.catplot(x=\"variety\",kind=\"count\", palette=\"inferno_r\",data = wine_data,order=pd.value_counts(wine_data['variety']).iloc[:15].index)\ng.set_xticklabels(rotation=60)\ng.fig.set_size_inches(30,10)\nplt.title(\"Most Reviewed Wine Varieties\", fontsize = 40)\nplt.ylabel(\"Reviews\", fontsize = 30)\nplt.xlabel(\"Wine Variety\", fontsize = 30)\n\nsns.set(font_scale = 1.5)\ng2=sns.catplot(x=\"variety\",kind=\"count\", palette=\"inferno_r\",data = wine_data_Outliers,order=pd.value_counts(wine_data_Outliers['variety']).iloc[:15].index)\ng2.set_xticklabels(rotation=60)\ng2.fig.set_size_inches(30,10)\nplt.title(\"Most Reviewed Wine Varieties without Outliers\", fontsize = 40)\nplt.ylabel(\"Reviews\", fontsize = 30)\nplt.xlabel(\"Wine Variety\", fontsize = 30)\n\n\n\nplt.show()","b9bac01e":"#CRISTIAN LYNCH\nprint('Showing Wines in the US')\n#Wines in the US\nwine_data_US = wine_data[wine_data['country'] == 'US']\nwine_data_US.head()","b42d1d93":"#CRISTIAN LYNCH\nprint('Reviews by Country')\n#Reviews by Country\nCountryReviews = pd.DataFrame(wine_data[\"country\"].value_counts())\nCountryReviews.describe().T\n","7766fed1":"#CRISTIAN LYNCH\nprint('Showing the Top 5 wine variety in the US')\n#Top 5 wine variety in the US\nvalue_counts = wine_data_US[\"variety\"].value_counts()\nvalue_counts.head()","57157aa5":"#CRISTIAN LYNCH\n#Plot of reviews by US provinces\n\nwine_data_US = wine_data[wine_data['country'] == 'US']\n\nsns.set_style(\"dark\")\nplt.figure(figsize=(20, 10))\nplt.rc('xtick', labelsize=20)\nplt.rc('ytick', labelsize=20)\nsns.countplot(x=\"province\", data=wine_data_US,order=pd.value_counts(wine_data_US['province']).iloc[:5].index)\nplt.ylabel(\"Province\", fontsize=30)\nplt.xlabel(\"Review Count\", fontsize=30)\nplt.title(\"Count of Reviews by province in US\", fontsize=40)\nplt.show()\n#MATTHEW CADENA: I ADDED THE ORDER PARAMETER TO ONLY DISPLAY THE TOP 5 RATHER THAN EVERY PROVINCE","76a46d2d":"#CHRISTOPHER MUCKENFUSS\nusp = wine_data_US[wine_data_US['province'] == 'California']\nusp_points = usp['points'].value_counts()\nplt.figure(figsize=(30,10))\nsns.barplot(x = usp_points.index, y = usp_points)\nplt.title(\"Number of Times Wines recieved each Score in California\", fontsize=40)\nplt.ylabel(\"Number of Wines\",fontsize =30)\nplt.xlabel(\"Points\",fontsize =30)\nplt.xticks(rotation=45)\nplt.xlim(0, 20)\n","6bfc960f":"#CHRISTOPHER MUCKENFUSS\n\nhundred = wine_data[wine_data['points'] == 100]\nhundred_country = hundred['country'].value_counts()\nplt.figure(figsize=(30,10))\nsns.barplot(x = hundred_country.index, y = hundred_country, order = hundred_country.index)\nplt.title(\"Number of Wines from each Country that scored 100 Points\",fontsize=40)\nplt.ylabel(\"Number of Wines\",fontsize=30)\nplt.xlabel(\"Country\",fontsize=30)\nplt.xticks(rotation=45)\nplt.xlim(0, 14)","e2600422":"#CHRISTOPHER MUCKENFUSS\nwine_data_Italy = wine_data[wine_data['country'] == 'Italy']\nsns.set_style(\"dark\")\nplt.figure(figsize=(20, 10))\nplt.rc('xtick', labelsize=20)\nplt.rc('ytick', labelsize=20)\nsns.countplot(x=\"province\", data=wine_data_Italy,order=pd.value_counts(wine_data_Italy['province']).iloc[:5].index)\nplt.ylabel(\"Province\", fontsize=30)\nplt.xlabel(\"Review Count\", fontsize=30)\nplt.title(\"Count of Reviews by province in Italy\", fontsize= 40)\nplt.show()","3e6b51a1":"#CHRISTOPHER MUCKENFUSS\nwine_data_France = wine_data[wine_data['country'] == 'France']\n\n \nsns.set_style(\"dark\")\nplt.figure(figsize=(20, 10))\nplt.rc('xtick', labelsize=20)\nplt.rc('ytick', labelsize=20)\nsns.countplot(x=\"province\", data=wine_data_France,order=pd.value_counts(wine_data_France['province']).iloc[:5].index)\nplt.ylabel(\"Province\", fontsize=30)\nplt.xlabel(\"Review Count\", fontsize=30)\nplt.title(\"Count of Reviews by province in France\", fontsize= 40)\nplt.show()","b231b950":"wine_data[\"country\"] = wine_data[\"country\"].astype('category')\nwine_data[\"description\"] = wine_data[\"description\"].astype('category')\nwine_data[\"province\"] = wine_data[\"province\"].astype('category')\nwine_data[\"region\"] = wine_data[\"region\"].astype('category')\nwine_data[\"taster_name\"] = wine_data[\"taster_name\"].astype('category')\nwine_data[\"title\"] = wine_data[\"title\"].astype('category')\nwine_data[\"variety\"] = wine_data[\"variety\"].astype('category')\nwine_data[\"winery\"] = wine_data[\"winery\"].astype('category')\n\nwine_data[\"country codes\"] = wine_data[\"country\"].cat.codes\nwine_data[\"description codes\"] = wine_data[\"description\"].cat.codes\nwine_data[\"province codes\"] = wine_data[\"province\"].cat.codes\nwine_data[\"region codes\"] = wine_data[\"region\"].cat.codes\nwine_data[\"taster codes\"] = wine_data[\"taster_name\"].cat.codes\nwine_data[\"title codes\"] = wine_data[\"title\"].cat.codes\nwine_data[\"variety codes\"] = wine_data[\"variety\"].cat.codes\nwine_data[\"winery codes\"] = wine_data[\"winery\"].cat.codes","3a320d92":"#CHRISTOPHER MUCKENFUSS AND TIFFANY TRAN\ny = wine_data.points\nfeatures = ['price', 'country codes', 'province codes', 'variety codes', 'winery codes', 'region codes']\nx = wine_data[features]\ntrain_x, val_x, train_y, val_y = train_test_split(x, y, random_state = 0)\nbasic_model = DecisionTreeRegressor()\nbasic_model.fit(train_x, train_y)\nval_predictions = basic_model.predict(val_x)\nprint(\"Printing MAE for Basic Decision Tree Regressor:\", mean_absolute_error(val_y, val_predictions))\n","a90f2e39":"#CHRISTOPHER MUCKENFUSS\ndef get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):\n    leaf_model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    leaf_model.fit(train_x, train_y)\n    preds_val = leaf_model.predict(val_x)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)\n\nfor max_leaf_nodes in [5, 50, 500, 5000]:\n    my_mae = get_mae(max_leaf_nodes, train_x, val_x, train_y, val_y)\n    print(\"Max leaf nodes: %d  \\t\\t Mean Absolute Error:  %f\" %(max_leaf_nodes, my_mae)) #TIFFANY JUST ADDED PRINT STATEMENT","23308428":"#CHRISTOPHER MUCKENFUSS\nforest_model = RandomForestRegressor(random_state=1)\nforest_model.fit(train_x, train_y)\nforest_preds = forest_model.predict(val_x)\nprint(\"Printing MAE for RandomForest Model:\",mean_absolute_error(val_y, forest_preds)) #TIFFANY JUST ADDED PRINT STATEMENT","15507258":"#CHRISTOPHER MUCKENFUSS\nperm = PermutationImportance(basic_model, random_state=1).fit(val_x, val_y)\neli5.show_weights(perm, feature_names = val_x.columns.tolist())","3040200e":"#TIFFANY TRAN\n\n#choosing the prediction target\ny = wine_data.points\n\n#choosing features\nwine_features = ['price', 'country codes', 'province codes', 'variety codes', 'winery codes', 'region codes']\nX = wine_data[wine_features]\n\n#testing\n#X.describe()\nX.head()","6e44d32b":"#TIFFANY TRAN\nwine_model = DecisionTreeRegressor(random_state=1)\nwine_model.fit(X,y)","0d2085d8":"#TIFFANY TRAN\nprint(\"Making point predictions for the following 5 Wines:\")\nprint(X.head())\nprint(\"The points predictions are\")\nprint(wine_model.predict(X.head()))\n\nprint('\\nOriginal points')\nprint(wine_data['points'].head())","17467df4":"#TIFFANY TRAN\npredicted_wine_points = wine_model.predict(X)\nprint(\"Printing the mean absolute error\", mean_absolute_error(y, predicted_wine_points))","60d6aff1":"#TIFFANY TRAN\ntrain_X, val_X, train_y, val_y = train_test_split(X,y, random_state = 0)\n\nwine_model = DecisionTreeRegressor()\n\nwine_model.fit(train_X,train_y)\n\n#getting predicted points\nval_predictions = wine_model.predict(val_X)\nprint(\"Using the DecisionTreeRegressor.. Now\\nPrinting the mean absolute value \",mean_absolute_error(val_y, val_predictions))","816bfcd3":"#TIFFANY TRAN\nprint(\"Making point predictions for the following 5 Wines:\")\nprint(train_X.head())\nprint(\"The points predictions are\")\nprint(wine_model.predict(train_X.head()))\n\nprint('\\nOriginal points')\nprint(wine_data['points'].head())","38d254b1":"#TIFFANY TRAN\nmy_pipeline = Pipeline(steps=[('preprocessor', SimpleImputer()),\n                              ('model',\n                               RandomForestRegressor(n_estimators=50,random_state=0))])","579810ad":"#TIFFANY TRAN\n##takes forever to run \npoints_CV = -1 * cross_val_score(my_pipeline, X, y, cv=5, \n                              scoring = 'neg_mean_absolute_error')\nprint(\"Using Cross Validation..\\nNow Printing Mean Absolute Error points:\\n\",\n      points_CV)","c048a568":"#TIFFANY TRAN\nprint(\"Using Cross Validation..\\nNow Printing Average Mean Absolute Error points across all experiments: \\n\", points_CV.mean())","1a98d36c":"#CHRISTOPHER MUCHKENFUSS\n\n\npipe_data = pd.read_csv(wine_file_path)\n\npipe_data.dropna(axis=0, inplace=True)\ny = pipe_data.points\n#pipe_data.drop(['price'], axis=1, inplace=True)\n\n \n\n\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(pipe_data, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n# Select categorical columns\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10000 and \n                    X_train_full[cname].dtype == \"object\"]\n\n \n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]\n\n \n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\n#X_test = X_test_full[my_cols].copy()\n\n \n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant')\n\n \n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n \n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n \n\n# Define model\nmodel = RandomForestRegressor(n_estimators=100, random_state=0)\n\n \n\n# Bundle preprocessing and modeling code in a pipeline\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model', model)\n                     ])\n\n \n\n# Preprocessing of training data, fit model \nclf.fit(X_train, y_train)\n\n \n\n# Preprocessing of validation data, get predictions\npreds = clf.predict(X_valid)\n\nprint('MAE Using Pipeline:', mean_absolute_error(y_valid, preds))","96cd6739":"#TIFFANY TRAN\n\nxgbr_model = XGBRegressor(n_estimators=1000, learning_rate=0.05, n_jobs=4)\nxgbr_model.fit(train_X, train_y, \n             early_stopping_rounds=5, \n             eval_set=[(val_X, val_y)], \n             verbose=False)","8bec4281":"#TIFFANY TRAN\npredictionsXBGR = xgbr_model.predict(val_X)\nprint(\"Mean Absolute Error using XGBR: \" + str(mean_absolute_error(predictionsXBGR, val_y)))","8614db4f":"The next few graphs compare **Wine Points** to various other columns.","d9f95bd5":"These next graph shows the number of reviews per taster.","03cd3155":"**Using a Pipeline**","2a73536c":"# Data  Visualization\n\n\nWe will now look at various relationships between different aspects of the wine data set.","a36e648f":"Now we will be using the basic Decision Tree and adding Leaf Nodes to try and focus the data.","4bc1c595":"Cross validation used 5 different splits of the data to compute MAE. Now we will look at the whole model to be able to determine the model's quality and compare various models.","393bf3c5":"Now we will look at the Random Forest Regressor model.","9e6f509f":"# Top Country Data\n\nNow we will take a look at wine data pertaining to the US because it contains the most reviews.","e0f64617":"**Using Cross-Validation\n**\n\n\nCross-Validation is a way to get a more accurate measure of the model's quality. First  we need to define a pipeline, which will fill in the missing values. A randomforest model will make the predictions.","216486cb":"The following graphs show the number of wines from each country.","6e17d18d":"Since we have split the data into validation and training portions, we predict point values again.","e20d95a9":"Now that we have dropped all the missing values, we are going to start looking at the description column.","3e1a5357":"We noticed that the full dataset has missing values. Lets take a look at information regarding missing entries.","1d7ffc55":"# Dealing with Outliers and Missing Data\n\nNow we are going to drop outliers.\n\nOutliers in this dataset are the data points that lie outside the overall pattern of the dataset.\nExtreme outliers can cause probelms when we start using the dataset for predictions. We must balance this with the idea that getting rid of too many outliers changes the pattern of prediction.","0e7c4567":"Now the data will be split into training and validation portions. \n\n","feff1f84":"The next graph shows the  15 top tasters of wines.","8aa45a3c":"**XCBRegressor\n**\n\n\nWe will be working with extreme gradient boosting.","55f3a6a3":"We first look at the dataset.","1eae1a8a":"These next few graphs will be dealing with **Wine Prices**.","0bb90224":"There is a lot of missing data in the columns. We are going to drop the columns that are unnecessary, fill in the columns that have numeric values with their average, and one drop columns that have similar data.","73aabb7a":"# Model Visualization\n\nWe have just looked at all the graphs and data visualization for this dataset. We will now work with the data to build models and make predictions based on the data.\nFirst, we will create a basica model look at the Mean Absolute Error.","165af108":"The following is a prediction of mean absolute error using the entire dataset. Recall that [error = actual - predicted] ","0e75c475":"The next graph will show top **Wine Varieties**.","cdb50380":"# Exploring and Manipulating the Wine Reviews DataSet\n\nIn this notebook we will be exploring a wine dataset to create visuals that will allow us to show the relationship between different aspects of the data as well as create models to help predict beneficial wine making practices.","55a04dd4":"# Description Clean Up\n\nWe will now begin our visuals by looking at the 15 most frequent, relevant words from the description column. Visualizations display how wine reviews containing those words affect point values."}}