{"cell_type":{"9f5cf6ed":"code","4052a212":"code","f6b4ad11":"code","e8d50c9b":"code","003c8c4a":"code","e5b41fa7":"code","da54b0e3":"code","888df172":"code","19c6e677":"code","187d7249":"code","ee5e34be":"code","fc3d3539":"code","fc6adc8f":"code","ca7afa1b":"code","84c4d343":"code","42852868":"code","632d393b":"code","3a5eccd8":"code","8d9bf360":"markdown","eadd9f13":"markdown","3124b43b":"markdown","7f499813":"markdown","47b3f38f":"markdown","1cb02daa":"markdown","0ebe04c6":"markdown","0d557a34":"markdown","fb091151":"markdown","9fa8ecc2":"markdown","2ee0612e":"markdown","471050dc":"markdown","3b7f4370":"markdown"},"source":{"9f5cf6ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4052a212":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n#Load Data\n\ninput = pd.read_csv(\"..\/input\/disaster-tweets\/tweets.csv\")\n\n\nprint(input.shape)","f6b4ad11":"#Exploration\n\ninput.head(5)","e8d50c9b":"#checking for any duplicated rows\n\ninput.duplicated().sum()","003c8c4a":"#Checking for missing values in the data\n\ninput.isna().sum()","e5b41fa7":"#Class distribution\n\nplt.figure(figsize=(6, 7))\nplot= sns.countplot(input[\"target\"], \n                   order = input[\"target\"].value_counts().index)\n\nfor p in plot.patches:\n    plot.annotate(format(p.get_height(), '.2f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')","da54b0e3":"#Exploring Keywords and their distribution\n\nprint(input.keyword.nunique())\n\n#Most common Keywords\n\nplt.figure(figsize = (9,6))\nsns.countplot(y= input.keyword, order = input.keyword.value_counts().iloc[:10].index)\nplt.title('Top 10 Keywords')\nplt.show()","888df172":"disaster = input[input.target == 1]\nprint(disaster.shape)\n\nnondisaster = input[input.target ==0]\nprint(nondisaster.shape)\n\nkw_dis = disaster.keyword.value_counts().head(10)\nkw_nondis = nondisaster.keyword.value_counts().head(10)\n\nplt.figure(figsize=(18,6))\nplt.subplot(121)\nsns.barplot(kw_dis, kw_dis.index, color = 'g')\nplt.title('Top Keywords for Disaster tweets')\n\nplt.subplot(122)\nsns.barplot(kw_nondis, kw_nondis.index, color = 'b')\nplt.title('Top Keywords for Non-Disaster tweets')","19c6e677":"# Exploring 'Location' data\n\n#Top 10 locations w.r.t number of tweets\n\nplt.figure(figsize = (8,6))\nsns.countplot(y = input.location, order = input.location.value_counts().iloc[:10].index)\nplt.title(\"Top 10 Locations based on No. of Tweets\")\n\nplt.show()","187d7249":"#Top locations with highest percentage of disaster tweets\n\n#filtering tweets originating from top 10 locations\ntop_loc = list(input.location.value_counts().iloc[:10].index)\ntop_loc_tweets = input[input.location.isin(top_loc)]\n\n\nloc_dis = top_loc_tweets.groupby('location').mean()['target'].sort_values(ascending = False)\n\nplt.figure(figsize = (10,6))\nsns.barplot(x= loc_dis.index, y = loc_dis)\nplt.title('% of disaster tweets for top 10 locations')\nplt.xticks(rotation = 85)\nplt.axhline(np.mean(input.target))\nplt.show()\n\n\n","ee5e34be":"import re\n\ndef text_clean(text):\n    text = re.sub(r'https?:\/\/\\S+', '', text) #removing links\n    text = re.sub(r'\\n', ' ', text) #removing line breaks\n    text = re.sub(r'\\s+', ' ', text).strip() #removing extra spaces\n    return text","fc3d3539":"def hash_tags(text):\n    return \" \".join([match.group(0)[1:] for match in re.finditer(r\"#\\w+\", text)]) or 'no'\n                    \ndef mentions(text):\n    return \" \".join([match.group(0)[1:] for match in re.finditer(r\"@\\w+\", text)]) or 'no'\n                    \n\ndef tweet_process(df):\n    \n    df['clean_text'] = df['text'].apply(lambda x: text_clean(x))\n    df['hashtags'] = df['text'].apply(lambda x: hash_tags(x))\n    df['mentions'] = df['text'].apply(lambda x: mentions(x))\n    return df\n                    \ninput = tweet_process(input)\nprint(input.head(5))","fc6adc8f":"# Top 10 hashtags \n\nplt.figure(figsize=(10,6))\n\nsns.countplot(y=input.hashtags, order = input.hashtags.value_counts().iloc[1:11].index) #ignoring 'No' which would be the top row in 'hashtags'\nplt.title(\"Top 10 hashtags\")\n\nplt.show()\n\n\n#Percentage of disaster tweets\n\ntop_hashtags = input.hashtags.value_counts().iloc[1:11].index\nht_tweets = input[input.hashtags.isin(top_hashtags)]\ntop_ht = ht_tweets.groupby('hashtags').mean()['target'].sort_values(ascending=False)\n\n\nplt.figure(figsize = (10,6))\nsns.barplot(x= top_ht.index, y = top_ht)\nplt.xticks(rotation=85)\nplt.show()\n","ca7afa1b":"from nltk import word_tokenize, FreqDist\nfrom wordcloud import STOPWORDS\n\nstopwords = set(STOPWORDS)\n\n\n","84c4d343":"\nword_freq = FreqDist(w for w in word_tokenize(' '.join(input['clean_text']).lower()) if \n                     (w not in stopwords) & (w.isalpha()))\n\n\ndf_freq = pd.DataFrame.from_dict(word_freq, orient = 'index', columns = ['count'])\ntop20w = df_freq.sort_values('count',ascending=False).head(20)\nprint(top20w)","42852868":"plt.figure(figsize=(10,6))\nsns.barplot(y=top20w.index, x= top20w['count'])\nplt.title(\"Most frequent words\")\nplt.show()","632d393b":"plt.figure(figsize = (18,6))\nplt.subplot(121)\n\n\nword_freq1 = FreqDist(w for w in word_tokenize(' '.join(input.loc[input.target==1,'clean_text']).lower()) if \n                     (w not in stopwords) & (w.isalpha()))\n\n\ndf_freq1 = pd.DataFrame.from_dict(word_freq1, orient = 'index', columns = ['count'])\ntop20w1 = df_freq1.sort_values('count',ascending=False).head(20)\nsns.barplot(y=top20w1.index, x= top20w1['count'])\nplt.title(\"Most frequent words for disaster tweets\")\n\n\nplt.subplot(122)\n\nword_freq2 = FreqDist(w for w in word_tokenize(' '.join(input.loc[input.target==0,'clean_text']).lower()) if \n                     (w not in stopwords) & (w.isalpha()))\n\ndf_freq2 = pd.DataFrame.from_dict(word_freq2, orient = 'index', columns = ['count'])\ntop20w2 = df_freq2.sort_values('count',ascending=False).head(20)\nsns.barplot(y=top20w2.index, x= top20w2['count'])\nplt.title(\"Most frequent words for non-disaster tweets\")\n\nplt.show()","3a5eccd8":"from nltk import bigrams\n\nplt.figure(figsize = (22,10))\nplt.subplot(121)\n\n\nbigram_1 = list(bigrams([w for w in word_tokenize(' '.join(input.loc[input.target==1, 'clean_text']).lower()) if \n              (w not in stopwords) & (w.isalpha())]))\n\nword_freq_b1 = FreqDist(x for x in bigram_1)\ndf_freq_b1 = pd.DataFrame.from_dict(word_freq_b1, orient = 'index', columns = ['count'])\ndf_freq_b1.index = df_freq_b1.index.map(lambda x: ' '.join(x))\n\ntop20w_b1 = df_freq_b1.sort_values('count',ascending=False).head(20)\nsns.barplot(y=top20w_b1.index, x= top20w_b1['count'])\nplt.title(\"Most frequent bigrams for disaster tweets\")\n\n\nplt.subplot(122)\n\nbigram_2 = list(bigrams([w for w in word_tokenize(' '.join(input.loc[input.target==0, 'clean_text']).lower()) if \n              (w not in stopwords) & (w.isalpha())]))\n\nword_freq_b2 = FreqDist(x for x in bigram_2)\ndf_freq_b2 = pd.DataFrame.from_dict(word_freq_b2, orient = 'index', columns = ['count'])\ndf_freq_b2.index = df_freq_b2.index.map(lambda x: ' '.join(x))\n\ntop20w_b2 = df_freq_b2.sort_values('count',ascending=False).head(20)\nsns.barplot(y=top20w_b2.index, x= top20w_b2['count'])\nplt.title(\"Most frequent bigrams for non-disaster tweets\")\n\n\nplt.show()","8d9bf360":"We try to see how the most frequent words change for disaster and non-disaster tweets","eadd9f13":"Cleaning up text column to remove any links, whitespaces and create a 'clean' column. Create separate columns for hashtags and mentions.\n\n","3124b43b":"UK, US and India (along with versions of them) are the location with highest percentage of disaster tweets","7f499813":"There are no duplicated rows","47b3f38f":"The data has more \"Non-disaster\" tweets","1cb02daa":"We see that the 'Location' data is not clean. It has Countries and cities mixed with each other and there is no standardization ( there is USA and United States )","0ebe04c6":"We can see that in disaster tweets, words such as fire, volcano and thunderstorm appear. For non-disaster tweets, there is no such pattern. Let's now check, if there are more clear patterns in bigrams.","0d557a34":"Most bigrams of the disaster tweets are in line with expectations. With 'taal volcano' and 'severe thunderstorms' being the most frequent. There is no pattern in the non-disaster tweets although we do find some related bigrams like 'taal volcano', ' heat wave' and 'bush fires'. But they are not at the top of the list.","fb091151":"We see that top 10 tweets for either classes are not the same.","9fa8ecc2":"Let's explore if the top keywords change wrt Disaster and Non-disaster tweets","2ee0612e":"Let's try to find out top hashtags. Also the percentage of disaster tweets for them.","471050dc":"Finding the most frequent words and bi-grams","3b7f4370":"We can see that the list is not clean."}}