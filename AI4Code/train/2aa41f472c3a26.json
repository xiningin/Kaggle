{"cell_type":{"3c29def4":"code","c9117807":"code","67b9e77a":"code","aee84c91":"code","080fccd2":"code","edc56f8c":"code","8b098a25":"code","97be9dcb":"code","710cb200":"code","ccee8a8c":"code","f42839eb":"code","4e37335e":"code","37b88d4f":"code","1a29e19c":"code","df316d81":"code","ab8b7358":"code","ac4bd721":"code","19669e74":"code","6fb0f328":"code","5d964851":"code","0602da75":"code","9eca649f":"code","352dc0da":"code","26abc516":"code","1a00d491":"code","48649fc2":"code","13c42f08":"code","e333b05a":"code","c93dfecf":"code","e552f56d":"code","8944342e":"code","d5e36d2c":"code","e32948e4":"code","4a4b4464":"code","fe4944be":"code","4b084fee":"code","491b36dc":"code","89422d2d":"code","c944ff2c":"code","ca622260":"code","c3719961":"code","de6917c7":"code","dfa61c2a":"code","7e2dffab":"code","0bb91317":"code","621e380d":"code","6c17f6c4":"markdown","af0962bb":"markdown","6344696b":"markdown","3b1261a8":"markdown"},"source":{"3c29def4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c9117807":"import tensorflow as tf\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n\nimport nltk \nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem import SnowballStemmer\n\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n\n\nimport re\n\nprint(\"Tensorflow Version\",tf.__version__)","67b9e77a":"data = pd.read_csv('..\/input\/spam-mails-dataset\/spam_ham_dataset.csv')\ndata.head()","aee84c91":"data = data.drop(['Unnamed: 0', 'label'], axis=1)","080fccd2":"val_count = data.label_num.value_counts()\n\nplt.figure(figsize=(8,4))\nplt.bar(val_count.index, val_count.values)\nplt.title(\"Spam\/ham Data Distribution\")","edc56f8c":"data.head()","8b098a25":"stop_words = stopwords.words('english')\nstemmer = SnowballStemmer('english')\n\ntext_cleaning_re = \"@\\S+|https?:\\S+|http?:\\S+|[^A-Za-z0-9]:\\S+|subject:\\S+|nbsp\"","97be9dcb":"def preprocess(text, stem=False):\n    text = re.sub(text_cleaning_re, ' ', str(text).lower()).strip()\n    tokens = []\n    for token in text.split():\n        if token not in stop_words:\n            if stem:\n                tokens.append(stemmer.stem(token))\n            else:\n                tokens.append(token)\n    return \" \".join(tokens)\ndata.text = data.text.apply(lambda x: preprocess(x))\ndata.head()","710cb200":"x = data['text']\ny = data['label_num']\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2,\n                                         random_state=7) # Splits Dataset into Training and Testing set\nprint(\"Train Data size:\", len(x_train))\nprint(\"Test Data size\", len(x_test))","ccee8a8c":"from keras.preprocessing.text import Tokenizer\n\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(x_train)\n\nword_index = tokenizer.word_index\nvocab_size = len(tokenizer.word_index) + 1000\nprint(\"Vocabulary Size :\", vocab_size)","f42839eb":"x_train.head().reset_index()","4e37335e":"word_index","37b88d4f":"from keras.preprocessing.sequence import pad_sequences\n\nx_train = pad_sequences(tokenizer.texts_to_sequences(x_train),\n                        maxlen = 50)\nx_test = pad_sequences(tokenizer.texts_to_sequences(x_test),\n                       maxlen = 50)\n\nprint(\"Training X Shape:\",x_train.shape)\nprint(\"Testing X Shape:\",x_test.shape)","1a29e19c":"x_train[0]","df316d81":"type(y_train)","ab8b7358":"x_test[0].shape","ac4bd721":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nann = Sequential()\nann.add(Dense(16, activation='relu', input_dim=50))\n# Adding dropout to prevent overfitting\nann.add(Dropout(0.1))\nann.add(Dense(1, activation='sigmoid'))","19669e74":"ann.summary()","6fb0f328":"ann.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","5d964851":"ann.fit(x_train, y_train, batch_size=100, epochs=150)","0602da75":"# Predicting the Test set results\ny_pred = ann.predict(x_test)\ny_pred = (y_pred > 0.5)","9eca649f":"y_pred[0]","352dc0da":"y_test1 = np.array(y_test)","26abc516":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","1a00d491":"cm","48649fc2":"695 +43 +222+75","13c42f08":"print(\"Our accuracy is {}%\".format(((cm[0][0] + cm[1][1])\/1035)*100))","e333b05a":"from keras.layers import SimpleRNN\nrnn = Sequential()\nrnn.add(SimpleRNN(128, activation='relu', input_dim=50 , return_sequences = True))\nrnn.add(SimpleRNN(64, activation='relu' ,  return_sequences = False))\n# Adding dropout to prevent overfitting\n#rnn.add(Dropout(0.1))\nrnn.add(Dense(1, activation='sigmoid'))","c93dfecf":"rnn.summary()","e552f56d":"rnn.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","8944342e":"print(x_train.shape)\nprint(y_train.shape)","d5e36d2c":"#x_train1 = x_train.reshape(4136,1,50)\ny_train1 = np.array(y_train).reshape(4136,1,1)","e32948e4":"rnn.fit(x_train1, y_train1, batch_size=100, epochs=150)","4a4b4464":"#LSTM hyperparameters\nMAX_SEQUENCE_LENGTH = 50\nn_lstm = 200\ndrop_lstm =0.2\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, GlobalAveragePooling1D, Dense, Dropout, LSTM, Bidirectional\nembeding_dim = 16\ndrop_value = 0.2\nn_dense = 24\nnum_epochs = 5\nearly_stop = EarlyStopping(monitor='val_loss', patience=3)\n#LSTM Spam detection architecture\nmodel1 = Sequential()\nmodel1.add(Embedding(vocab_size, embeding_dim, input_length=MAX_SEQUENCE_LENGTH))\nmodel1.add(LSTM(n_lstm, dropout=drop_lstm, return_sequences=True))\nmodel1.add(LSTM(n_lstm, dropout=drop_lstm, return_sequences=True))\nmodel1.add(Dense(1, activation='relu'))\nmodel1.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics=['accuracy'])\nearly_stop = EarlyStopping(monitor='val_loss', patience=2)\nhistory = model1.fit(x_train, y_train, epochs=num_epochs, verbose=2)","fe4944be":"# Predicting the Test set results\ny_pred_lstm = model1.predict(x_test)\ny_pred_lstm = (y_pred_lstm > 0.5)","4b084fee":"def func(x):\n    if x>0.5:\n        return 1\n    else:\n        return 0","491b36dc":"y_pred_lstm1 = y_pred_lstm.reshape(len(y_pred_lstm[0]))\nfor j in range (len(y_pred_lstm1)):\n    y_pred_lstm1[j] = func(y_pred_lstm1[j])\n    #for i in range (len(y_pred1)):\n    pred = int(y_pred_lstm1.all())","89422d2d":"len(y_pred_lstm[0])","c944ff2c":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm1 = confusion_matrix(y_test, y_pred_lstm)","ca622260":"cm1","c3719961":"print(\"Our accuracy is {}%\".format(((cm1[0][0] + cm1[1][1])\/1035)*100))","de6917c7":"model2 = Sequential()\nmodel2.add(Embedding(vocab_size, embeding_dim, input_length=MAX_SEQUENCE_LENGTH))\nmodel2.add(Bidirectional(LSTM(n_lstm, dropout=drop_lstm, return_sequences=True)))\nmodel2.add(Dense(1, activation='sigmoid'))\nmodel2.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics=['accuracy'])\n# Training\nnum_epochs = 5\nearly_stop = EarlyStopping(monitor='val_loss', patience=2)\nhistory = model2.fit(x_train, y_train, epochs=num_epochs, \n                    callbacks =[early_stop], verbose=2)","dfa61c2a":"y_pred_bi_lstm = model2.predict(x_test)\ny_pred_bi_lstm = (y_pred_bi_lstm > 0.5)","7e2dffab":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm2 = confusion_matrix(y_test, y_pred_bi_lstm)","0bb91317":"cm2","621e380d":"print(\"Our accuracy is {}%\".format(((cm2[0][0] + cm2[1][1])\/1035)*100))","6c17f6c4":"# lstm","af0962bb":"# bi lstm","6344696b":"# ANN\n","3b1261a8":"# RNN "}}