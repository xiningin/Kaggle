{"cell_type":{"8892218b":"code","98e1d5db":"code","91853dc1":"code","bd1668bf":"code","da19bbb2":"code","80b8d85a":"code","46f3da6c":"code","3c5cf20b":"code","3b63d6c0":"code","d168dc61":"code","b1150407":"code","c25e5be3":"code","09dc664f":"code","5f49bced":"code","29677ca5":"code","e3977095":"code","e74d483d":"code","fbf7779a":"code","a9698223":"code","e2c165a4":"code","cc139f30":"code","0220874f":"code","7329ae42":"code","7fdc05ef":"code","16e7889a":"code","7886cfe1":"code","7cb622b5":"code","e257611e":"code","6d7aae66":"code","19172dc4":"markdown","23d63062":"markdown","90ece4cf":"markdown","02451c0f":"markdown","24af3fa2":"markdown","77d6f7c3":"markdown","edfe4c5e":"markdown","40bb63c2":"markdown","d1eebfab":"markdown","577a527e":"markdown","df62386b":"markdown","3d740d50":"markdown"},"source":{"8892218b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nprint(os.listdir(\"..\/input\/leapgestrecog\/leapGestRecog\"))\n\n# Any results you write to the current directory are saved as output.","98e1d5db":"import os\nimport numpy as np\nfrom PIL import Image\nimport matplotlib.image as mpimg \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport IPython.display\npath='..\/input\/leapgestrecog\/leapGestRecog'\nfolders=os.listdir(path)\nfolders=set(folders)\n\nimport codecs\nimport json\n\n\ndifferent_classes=os.listdir(path+'\/'+'00')\ndifferent_classes=set(different_classes)\n\n\n\n\nprint(\"The different classes that exist in this dataset are:\")\nprint(different_classes,sep='\\n')","91853dc1":"x=[]\nz=[]\ny=[]#converting the image to black and white\nthreshold=200\nimport cv2\n\n\nfor i in folders:\n    print('***',i,'***')\n    subject=path+'\/'+i\n    subdir=os.listdir(subject)\n    subdir=set(subdir)\n    for j in subdir:\n        print(j)\n        images=os.listdir(subject+'\/'+j)\n        for k in images:\n            results=dict()\n            results['y']=j.split('_')[0]\n            img = cv2.imread(subject+'\/'+j+'\/'+k,0)\n            img=cv2.resize(img,(int(160),int(60)))\n            \n            ret, imgf = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)\n            imgD=np.asarray(img,dtype=np.float64)\n            z.append(imgD)\n            imgf=np.asarray(imgf,dtype=np.float64)\n            x.append(imgf)\n            y.append(int(j.split('_')[0]))\n            results['x']=imgf\n\nprint(list(set(y)))\n        \n# import pandas as pd \n# df=pd.DataFrame({'x':x,'y':y})\n# df.to_csv('results.csv',index=False)","bd1668bf":"#sample black and white image from each class\nl = []\nlist_names = []\nfor i in range(10):\n    l.append(0)\nfor i in range(len(x)):\n    if(l[y[i] - 1] == 0):\n        l[y[i] - 1] = i\n        if(len(np.unique(l)) == 10):\n            break\nfor i in range(len(l)):\n    %matplotlib inline\n    print(\"Class Label: \" + str(i + 1))\n    plt.imshow(np.asarray(z[l[i]]), cmap  =cm.gray)\n    plt.show()\n    plt.imshow(np.asarray(x[l[i]]), cmap = cm.gray)     \n    plt.show()","da19bbb2":"x=np.array(x)\ny=np.array(y)\ny = y.reshape(len(x), 1)\nprint(x.shape)\nprint(y.shape)\nprint(max(y),min(y))","80b8d85a":"x_data = x.reshape((len(x), 60, 160, 1))\n\nx_data\/=255\nx_data=list(x_data)\nfor i in range(len(x_data)):\n    x_data[i]=x_data[i].flatten()","46f3da6c":"from sklearn.decomposition import PCA\npca = PCA(n_components=4)\nx_data=np.array(x_data)\nx_data=pca.fit_transform(x_data)\nprint(pca.explained_variance_ratio_)  \nprint(pca.singular_values_)  ","3c5cf20b":"from sklearn.model_selection import train_test_split\nx_train,x_further,y_train,y_further = train_test_split(x_data,y,test_size = 0.2)\n","3b63d6c0":"from sklearn.preprocessing import StandardScaler  \nscaler = StandardScaler()  \nscaler.fit(x_train)\n\nX_train = scaler.transform(x_train)  \nX_test = scaler.transform(x_further)  ","d168dc61":"from sklearn.linear_model import SGDClassifier\nsgd= SGDClassifier(loss='modified_huber',shuffle=True,random_state=101)\nsgd.fit(X_train, y_train)\ny_pred_sgd = sgd.predict(X_test) \ny_train_score_sgd=sgd.predict(X_train)\nfrom sklearn.metrics import accuracy_score\nprint(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred_sgd, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score_sgd, normalize=True, sample_weight=None))","b1150407":"from sklearn.neighbors import KNeighborsClassifier  \nclassifier = KNeighborsClassifier(n_neighbors=5)  \nclassifier.fit(X_train, y_train)  \n","c25e5be3":"y_pred_knn = classifier.predict(X_test)  ","09dc664f":"y_train_score_knn=classifier.predict(X_train)","5f49bced":"from sklearn.metrics import accuracy_score\nprint(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred_knn, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score_knn, normalize=True, sample_weight=None))","29677ca5":"from sklearn import tree\nclf = tree.DecisionTreeClassifier(max_depth=10)\nclf = clf.fit(X_train, y_train)","e3977095":"y_pred_dt=clf.predict(X_test)\ny_train_score_dt=clf.predict(X_train)","e74d483d":"print(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred_dt, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score_dt, normalize=True, sample_weight=None))","fbf7779a":"from sklearn.ensemble import RandomForestClassifier\nclf_rft = RandomForestClassifier(n_estimators=100, max_depth=15,random_state=0)\nclf_rft = clf_rft.fit(X_train, y_train)\n","a9698223":"y_pred_rft=clf_rft.predict(X_test)\ny_train_score_rft=clf_rft.predict(X_train)","e2c165a4":"print(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred_rft, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score_rft, normalize=True, sample_weight=None))","cc139f30":"\n\nfrom sklearn.linear_model import LogisticRegression\nlogistic = LogisticRegression(solver = 'lbfgs')\nlogistic.fit(X_train, y_train)\ny_pred_logistic=logistic.predict(X_test)\ny_train_score_logistic=logistic.predict(X_train)\nprint(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred_logistic, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score_logistic, normalize=True, sample_weight=None))","0220874f":"from sklearn.naive_bayes import GaussianNB \ngnb = GaussianNB() \ngnb.fit(X_train, y_train)\ny_pred_gnb=gnb.predict(X_test)\ny_train_score_gnb=gnb.predict(X_train)\nprint(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred_gnb, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score_gnb, normalize=True, sample_weight=None))","7329ae42":"from sklearn.neural_network import MLPClassifier\n\nann_clf = MLPClassifier()\nann_clf.fit(X_train, y_train)\ny_pred_ann=ann_clf.predict(X_test)\ny_train_score_ann=ann_clf.predict(X_train)\nprint(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred_ann, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score_ann, normalize=True, sample_weight=None))","7fdc05ef":"from sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier\ngdc_model= GradientBoostingClassifier(learning_rate=0.01,random_state=1)\ngdc_model.fit(x_train, y_train)\ny_pred_gdc=gdc_model.predict(X_test)\ny_train_score_gdc=gdc_model.predict(X_train)\nprint(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred_gdc, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score_gdc, normalize=True, sample_weight=None))","16e7889a":"from sklearn.svm import SVC \nsvm_model_rbf = SVC(kernel = 'rbf', C = 10,probability=True).fit(X_train, y_train) \ny_pred_svm=svm_model_rbf.predict(X_test)\ny_train_score_svm=svm_model_rbf.predict(X_train)\nprint(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred_svm, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score_svm, normalize=True, sample_weight=None))","7886cfe1":"from sklearn.ensemble import VotingClassifier\nmodel = VotingClassifier(estimators=[('logistic',logistic),('nb',gnb),('gdc',gdc_model),('ann',ann_clf),('clf_rft',clf_rft),('dt',clf),('sv',svm_model_rbf),('knn',classifier),('stochastic',sgd)],voting='soft')\nmodel.fit(X_train, y_train)\ny_pred=model.predict(X_test)\ny_train_score=model.predict(X_train)\nprint(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score, normalize=True, sample_weight=None))","7cb622b5":"stacking_xtest=[[y_pred_svm[i],y_pred[i],y_pred_ann[i],y_pred_rft[i],y_pred_dt[i],y_pred_knn[i],y_pred_sgd[i],y_pred_logistic[i],y_pred_gnb[i],y_pred_gdc[i]] for i in range(len(X_test))]\nstacking_xtrain=[[y_train_score_svm[i],y_train_score[i],y_train_score_ann[i],y_train_score_rft[i],y_train_score_dt[i],y_train_score_knn[i],y_train_score_sgd[i],y_train_score_logistic[i],y_train_score_gnb[i],y_train_score_gdc[i]] for i in range(len(X_train))]\n\n\nann_stacking = MLPClassifier()\nann_stacking.fit(stacking_xtrain, y_train)\ny_pred_stacking=ann_stacking.predict(stacking_xtest)\ny_train_score_stacking=ann_stacking.predict(stacking_xtrain)\nprint(\"accuracy of the model is:\\nTest \", accuracy_score(y_further, y_pred_stacking, normalize=True, sample_weight=None))\nprint('Train',accuracy_score(y_train, y_train_score_stacking, normalize=True, sample_weight=None))\n\n","e257611e":"names=['Stochastic Gradient Classifier','K Nearest Neighbour','Decision Tree','Random Forest Tree','Logistic Regression','Naive Bayes','Artificial Neural Network','Gradient Descent Classifier','Support Vector Machine','Voting','Stacking']\nall_models=[y_pred_sgd,y_pred_knn,y_pred_dt,y_pred_rft,y_pred_logistic,y_pred_gnb,y_pred_ann,y_pred_gdc,y_pred_svm,y_pred,y_pred_stacking]\nall_training=[y_train_score_sgd,y_train_score_knn,y_train_score_dt,y_train_score_rft,y_train_score_logistic,y_train_score_gnb]\nall_training+=[y_train_score_ann,y_train_score_gdc,y_train_score_svm,y_train_score,y_train_score_stacking]\ntesting_accuracy=[]\ntraining_accuracy=[]\nfor i in all_models:\n    testing_accuracy.append(accuracy_score(y_further, i, normalize=True, sample_weight=None))\nfor i in all_training:\n    training_accuracy.append(accuracy_score(y_train, i, normalize=True, sample_weight=None))\n","6d7aae66":"import pandas as pd\ndf=pd.DataFrame({'Names':names,'Training Accuracy':training_accuracy,'Testing Accuracy':testing_accuracy})\ndf=df[['Names','Training Accuracy','Testing Accuracy']]\ndf","19172dc4":"## Naive Bayes","23d63062":"## Gradient Descent Classifier","90ece4cf":"## Stacking","02451c0f":"## SGD classifier","24af3fa2":"## Logistic Regression","77d6f7c3":"## Decision tree","edfe4c5e":"## PCA to the data","40bb63c2":"## SVM","d1eebfab":"## Voting for all the models","577a527e":"## ANN","df62386b":"## Random forest","3d740d50":"## KNN"}}