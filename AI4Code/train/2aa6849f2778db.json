{"cell_type":{"bc5be6ee":"code","2db63a17":"code","cd2d44a2":"code","d0bf8cdb":"code","66446858":"code","3b00a6ae":"code","dba69d04":"code","9a536879":"code","c61d91b6":"code","f10d7d88":"code","526637c5":"code","8e75d903":"code","03696238":"code","079a7f1a":"markdown"},"source":{"bc5be6ee":"import numpy as np\nimport pandas as pd\nimport os\nimport cv2\nfrom matplotlib import pyplot as plt\n\nfrom tqdm import tqdm\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2db63a17":"img_dir='..\/input\/yolo-annotated-wind-turbines-586x371\/NordTank586x371\/images'\ntxt_dir='..\/input\/yolo-annotated-wind-turbines-586x371\/NordTank586x371\/labels'","cd2d44a2":"impaths=[]\nfiles=os.listdir(img_dir)\nfor item in files:\n    impaths+=[os.path.join(img_dir,item)]","d0bf8cdb":"images0=[]\nfor i in tqdm(range(len(impaths)\/\/4)):\n    images0+=[cv2.imread(impaths[i])]","66446858":"txtpaths=[]\ntexts=os.listdir(txt_dir)\nfor item in texts:\n    txtpaths+=[os.path.join(txt_dir,item)]","3b00a6ae":"boxdata=[]\nboxfile=[]\nfor i in range(len(txtpaths)):\n    file=txtpaths[i]\n    if file.split('\/')[-1]!='labels.txt':\n        boxdata+=[np.loadtxt(file)]     \n        boxfile+=[file[0:-4].split('\/')[-1]]\nprint(boxdata[0:5])\nprint(boxfile[0:5])","dba69d04":"BOX=pd.DataFrame()\n\nfor i in range(len(boxdata)):\n    if type(boxdata[i][0])==np.float64:\n        add=pd.DataFrame([boxdata[i]])\n        add[5]=boxfile[i]\n        BOX=pd.concat([BOX,add])\n    else:\n        add=pd.DataFrame(boxdata[i])\n        add[5]=boxfile[i]\n        BOX=pd.concat([BOX,add])       \n\nBOX2=BOX.reset_index(drop=True)\nBOX2[0:10]","9a536879":"#!mkdir source0","c61d91b6":"def draw_box(num0):\n    \n    impath=impaths[num0]\n    image=cv2.imread(impath)\n    H,W=image.shape[0],image.shape[1]\n    file=impath[0:-4].split('\/')[-1]\n    \n    if BOX2[BOX2[5]==file] is not None:\n        box=BOX2[BOX2[5]==file]\n        box=box.reset_index(drop=True)\n\n        for i in range(len(box)):\n            label=box.loc[i,0].astype(int)\n            x=box.loc[i,1]\n            y=box.loc[i,2]\n            w=box.loc[i,3] \n            h=box.loc[i,4]\n            x0=((x-w\/2)*W).astype(int)\n            y0=((y-h\/2)*H).astype(int)\n            x1=((x+w\/2)*W).astype(int)\n            y1=((y+h\/2)*H).astype(int)\n            #print((x0,y0),(x1,y1))\n            \n            if label==0:\n                cv2.rectangle(image,(x0,y0),(x1,y1),(0,255,0),2)                \n            elif label==1:\n                cv2.rectangle(image,(x0,y0),(x1,y1),(0,255,0),2)            \n        \n        #cv2.imwrite('\/kaggle\/working\/source0\/'+file+'.png',image)        \n        #plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n        #plt.show() \n        \n    return image","f10d7d88":"images1=[]\nfor i in tqdm(range(len(impaths)\/\/4)):\n    images1+=[draw_box(i)]","526637c5":"from matplotlib import animation, rc\nrc('animation', html='jshtml')","8e75d903":"def create_animation(ims):\n    \n    fig=plt.figure(figsize=(10,6))\n    plt.axis('off')\n    im=plt.imshow(cv2.cvtColor(ims[0],cv2.COLOR_BGR2RGB))\n    \n    def animate_func(i):\n        im.set_array(cv2.cvtColor(ims[i],cv2.COLOR_BGR2RGB))\n        return [im]\n\n    return animation.FuncAnimation(fig, animate_func, frames=len(ims), interval=1000\/\/2)","03696238":"create_animation(images1)","079a7f1a":"# Slide Show"}}