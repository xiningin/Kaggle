{"cell_type":{"f1a4156e":"code","9cbeb719":"code","8a81702d":"code","a09361d8":"code","41f8c3c2":"code","9599fe99":"code","565f9254":"code","4adfb099":"code","f1d16211":"code","2d4681a9":"code","6b07b427":"code","0ec28341":"code","666c50b2":"code","b8dcc83f":"code","1f688083":"code","dc6fd263":"code","49f736df":"code","89defdb4":"code","6a1f1752":"code","bff981e1":"code","65405851":"code","36836a84":"code","ccb81c57":"code","10cbf960":"code","5b07948d":"code","e7a55eca":"code","b11df68b":"code","f4b5f9db":"code","6574b168":"code","3bd56973":"code","773445a6":"code","7ed3808a":"code","bd6d3266":"code","9c45f6be":"code","5b6eadd1":"code","4a4d4e8f":"code","a7c556d4":"code","4a1d2bbe":"code","4d5f4e86":"code","bada1670":"code","78a95524":"code","8fabf708":"code","c2134474":"markdown","91acd6ae":"markdown","acdcd7de":"markdown","f4ab683c":"markdown","ef1cedf1":"markdown","18384b65":"markdown","64cd6cd5":"markdown","08557ebd":"markdown"},"source":{"f1a4156e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","9cbeb719":"confirmed = pd.read_csv('..\/input\/covid-dataset\/time_series_covid19_confirmed_global.csv')\ndeaths = pd.read_csv('..\/input\/covid-dataset\/time_series_covid19_deaths_global.csv')\nrecovered = pd.read_csv('..\/input\/covid-dataset\/time_series_covid19_recovered_global.csv')","8a81702d":"confirmed.head()","a09361d8":"world_confirmed = confirmed.drop(labels=['Province\/State', 'Lat', 'Long', 'Country\/Region'], axis=1)\nworld_confirmed.head()","41f8c3c2":"world_confirmed_T = world_confirmed.T","9599fe99":"world_confirmed_T['Total'] = world_confirmed_T[0]\nfor col in world_confirmed_T.columns:\n    if col == 0:\n        continue\n    world_confirmed_T['Total'] += world_confirmed_T[col]","565f9254":"world_confirmed_T.reset_index(inplace=True)","4adfb099":"world_confirmed_T","f1d16211":"world_confirmed = world_confirmed_T[['index', 'Total']]\nworld_confirmed = world_confirmed.rename(columns={'index':'Date'})\nworld_confirmed","2d4681a9":"train_c = world_confirmed[:140]\ntest_c = world_confirmed[140:]","6b07b427":"train_time = train_c.Date\ntrain_time = pd.to_datetime(train_time)\ntrain_c = train_c.drop(labels=['Date'], axis=1)\ntrain_c.index = train_time\ntest_time = test_c.Date\ntest_time = pd.to_datetime(test_time)\ntest_c = test_c.drop(labels=['Date'], axis=1)\ntest_c.index = test_time","0ec28341":"train_c.head()","666c50b2":"from statsmodels.tsa.holtwinters import ExponentialSmoothing","b8dcc83f":"model = ExponentialSmoothing(train_c['Total'], trend='mul', seasonal_periods=12).fit()\npred = model.forecast(len(test_c))\nplt.figure(figsize=(10, 6))\nplt.plot(train_c.index, train_c.Total, label='train')\nplt.plot(test_c.index, test_c.Total, label='test')\nplt.plot(test_c.index, pred, label='predict')","1f688083":"deaths.head()","dc6fd263":"world_deaths = deaths.drop(labels=['Province\/State', 'Lat', 'Long', 'Country\/Region'], axis=1)\nworld_deaths.head()","49f736df":"world_deaths_T = world_deaths.T","89defdb4":"world_deaths_T['Total'] = world_deaths_T[0]\nfor col in world_deaths_T.columns:\n    if col == 0:\n        continue\n    world_deaths_T['Total'] += world_deaths_T[col]","6a1f1752":"world_deaths_T.reset_index(inplace=True)","bff981e1":"world_deaths_T","65405851":"world_deaths = world_deaths_T[['index', 'Total']]\nworld_deaths = world_deaths.rename(columns={'index':'Date'})\nworld_deaths","36836a84":"train_d = world_deaths[0:140]\ntest_d = world_deaths[140:]","ccb81c57":"train_time = train_d.Date\ntrain_time = pd.to_datetime(train_time)\ntrain_d = train_d.drop(labels=['Date'], axis=1)\ntrain_d.index = train_time\ntest_time = test_d.Date\ntest_time = pd.to_datetime(test_time)\ntest_d = test_d.drop(labels=['Date'], axis=1)\ntest_d.index = test_time","10cbf960":"train_d.head()","5b07948d":"x = np.arange(len(train_d))\nx = x.reshape(-1, 1)","e7a55eca":"y_train = np.array(train_d.Total)\ny_train","b11df68b":"from sklearn.preprocessing import PolynomialFeatures\npoly = PolynomialFeatures(degree=2)\nX_train = poly.fit_transform(x)","f4b5f9db":"x1 = np.arange(len(train_d)+1, len(train_d)+len(test_d)+1)\nx1 = x1.reshape(-1, 1)\nX_test = poly.transform(x1)","6574b168":"y_test = np.array(test_d.Total)\ny_test","3bd56973":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import accuracy_score\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\ny_base_predict = model.predict(X_train)\nplt.scatter(train_d.index, y_train, label='given data')\nplt.plot(train_d.index, y_base_predict, color='r', label='line of best fit')\nplt.legend()\nplt.show()","773445a6":"y_pred = model.predict(X_test)\nplt.plot(train_d.index, y_train, label='Train')\nplt.plot(test_d.index, y_test, label='Test')\nplt.plot(test_d.index, y_pred, label='Predict')\nplt.legend()\nplt.show()","7ed3808a":"recovered.head()","bd6d3266":"world_recovered = recovered.drop(labels=['Province\/State', 'Lat', 'Long', 'Country\/Region'], axis=1)\nworld_recovered.head()","9c45f6be":"world_recovered_T = world_recovered.T","5b6eadd1":"world_recovered_T['Total'] = world_recovered_T[0]\nfor col in world_recovered_T.columns:\n    if col == 0:\n        continue\n    world_recovered_T['Total'] += world_recovered_T[col]","4a4d4e8f":"world_recovered_T.reset_index(inplace=True)","a7c556d4":"world_recovered_T","4a1d2bbe":"world_recovered = world_recovered_T[['index', 'Total']]\nworld_recovered = world_recovered.rename(columns={'index':'Date'})\nworld_recovered","4d5f4e86":"train_r = world_recovered[0:140]\ntest_r = world_recovered[140:]","bada1670":"train_time = train_r.Date\ntrain_time = pd.to_datetime(train_time)\ntrain_r = train_r.drop(labels=['Date'], axis=1)\ntrain_r.index = train_time\ntest_time = test_r.Date\ntest_time = pd.to_datetime(test_time)\ntest_r = test_r.drop(labels=['Date'], axis=1)\ntest_r.index = test_time","78a95524":"train_r.head()","8fabf708":"model = ExponentialSmoothing(train_r['Total'], trend='mul', seasonal='mul').fit()\npred = model.forecast(len(test_r))\nplt.figure(figsize=(10, 6))\nplt.plot(train_r.index, train_r.Total, label='train')\nplt.plot(test_r.index, test_r.Total, label='test')\nplt.plot(test_r.index, pred, label='predict')","c2134474":"## Predicting Recoveries","91acd6ae":"## Predicting Deaths","acdcd7de":"## Predicting Confirmed","f4ab683c":"### as we have seen that the death prediction is pretty high than the actual value and linear reg takes lots of data format changes the exponential smoothing with slight tweaks is better.","ef1cedf1":"### Lets try time series analysis and prediction with linear regression but as the linear reg fits a straight line which not a good fit in our case i have used polynomial transform for getting a exponential line to fit","18384b65":"### You can see the exponential line that fits almost our data","64cd6cd5":"### Here Exponential Smoothing is used which is best for time series analysis and forecasting","08557ebd":"### lets see how the model gives the predictions "}}