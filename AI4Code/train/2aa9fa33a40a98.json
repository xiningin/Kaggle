{"cell_type":{"c9ecc81a":"code","07af2f9c":"code","be7b3949":"code","38e33221":"code","9d1a0aa3":"code","c3379557":"code","41698eed":"code","d0c619a4":"code","83052251":"code","2fe900e7":"code","b6ff1cf1":"code","a69892af":"code","2e298d1e":"code","4d47cdf8":"code","f59c889e":"code","bffa9558":"code","d1e8bed2":"code","afde6afc":"code","a5b6a5a8":"code","5462ed85":"code","ed7b6205":"code","2821f4c6":"code","90314ec3":"code","7f9703ed":"code","bf2ee236":"code","c506d546":"code","25a40d4f":"code","77e54791":"code","b3716646":"code","ddee9547":"code","57939ed7":"code","7577f5a3":"code","74ae18f8":"code","0f5187bf":"code","81f7dae4":"code","899fc2b8":"code","cadbe4fb":"code","df2c9021":"code","95161483":"code","735db6aa":"code","677c18dc":"code","a411cdd4":"markdown","d15a226c":"markdown","ab5822f2":"markdown","847865d9":"markdown","2db6cb71":"markdown","9481f4cf":"markdown","cbdf4ed7":"markdown","e6c11208":"markdown","74f2bf9e":"markdown","fe24d5ff":"markdown","43d441be":"markdown","a6cb5795":"markdown"},"source":{"c9ecc81a":"# Dependancies\n\n# Data manipulation\nimport numpy as np\nimport pandas as pd\n\n# Data visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Data Mining\n!pip install apyori\nfrom apyori import apriori","07af2f9c":"# Styling\nplt.style.use('ggplot')\nplt.rcParams['figure.figsize'] = (16, 8)\nplt.rcParams['axes.titlesize'] = 20\nplt.rcParams['xtick.labelsize'] = 'large'","be7b3949":"# Load dataset\ndf = pd.read_csv('..\/input\/absenteeism-at-work-uci-ml-repositiory\/Absenteeism_at_work.csv', sep=';')","38e33221":"# Rename colums - Kerstin Wagner [1]\ndf.rename(columns={\n    'Reason for absence': 'Reason',\n    'Month of absence': 'Month',\n    'Day of the week': 'Weekday',\n    'Seasons': 'Season',\n    'Disciplinary failure': 'Failure',\n    'Transportation expense': 'Expense',\n    'Distance from Residence to Work': 'Distance',\n    'Service time': 'ServiceTime',\n    'Work load Average\/day ': 'Workload',\n    'Hit target': 'HitTarget',\n    'Son': 'Child',\n    'Social drinker': 'Drinker',\n    'Social smoker': 'Smoker',\n    'Body mass index': 'BMI',\n    'Absenteeism time in hours': 'AbsH'}, \n    inplace = True)","9d1a0aa3":"# Set attributes as category\ncat_attributes = ['ID', 'Reason', 'Month', 'Weekday', 'Season', 'Education', 'Failure', 'Drinker', 'Smoker']\nfor att in cat_attributes:\n    df[att] = df[att].astype('category')","c3379557":"# Rows & Cols\ndf.info()","41698eed":"# Missing data\ndf.isna().apply(sum)","d0c619a4":"# Numeric variables description\ndf.describe(include=np.number)","83052251":"# Categorical variables description\ndf.describe(include='category')","2fe900e7":"# Update month\ndf.loc[df['Month'] == 0, 'Month'] = 1","b6ff1cf1":"# Hist of AbsH\nplt.title('Histogram of Absence Duration')\ng = df['AbsH'].plot(kind='hist', bins=120);\ng.set_xlabel('Time (h)')\nplt.legend()\ng.set_xticks(range(0, 125, 5));","a69892af":"# Boxplot AbsH Reason\nplt.title('Distribution of Absence Duration by Reason')\nsns.boxplot(data=df, x='Reason', y='AbsH');","2e298d1e":"# Cleaning - Keep short absences\ndf = df[df['AbsH'] <= 8]","4d47cdf8":"# Total number and time of absences\nplt.title('Total Missed Hours by Employees')\ndata_ = df.groupby('ID').sum().reset_index()\nsns.barplot(data=data_, x='ID', y='AbsH');","f59c889e":"plt.title('Total Number of Absences by Employees')\ndata_ = df[df['Reason'] != 0].groupby('ID').apply(len).rename('AbsNumber').reset_index()\nsns.barplot(data=data_, x='ID', y='AbsNumber');","bffa9558":"# People\n\npersonal_attributes_count = df.groupby('ID').nunique() == 1\n\ndef mapcol(val):\n    col = 'green' if val else 'red'\n    return f'background-color: {col}'\n\npersonal_attributes_count.style.applymap(mapcol)","d1e8bed2":"# Let's take a closer look at number 29\ndf[df['ID'] == 29][['ID', 'Age', 'Education', 'Child', 'ServiceTime']]","afde6afc":"# Delete rows 51\ndf = df.drop(51)","a5b6a5a8":"# Employee data \n\n# Delete 29\nemployees = df[~((df['ID'] == 29) & (df['Age'] == 28))]\n\n# Get personal attributes\npersonal_attributes = ['ID', 'Expense', 'Distance', 'ServiceTime', 'Age', 'Education', 'Child', 'Drinker', 'Smoker', 'Pet', 'Weight', 'Height', 'BMI']\nemployees = employees[personal_attributes]\n\n# Delete dupliactes\nemployees = employees.drop_duplicates().set_index('ID')","5462ed85":"# Absences with Employees data\n\ncdf = df\n\n# Delete recors with unvalid values\n\n# Invalid Month\ncdf.loc[cdf['Month'] == 0, 'Month'] = 1","ed7b6205":"# Absence records\n\n# Get absence attributes\nrecord_attributes = ['ID', 'AbsH', 'Failure', 'HitTarget', 'Month', 'Reason', 'Season', 'Weekday', 'Workload']\nabsences = cdf[record_attributes]\n\n# Delete present people\nabsences = absences[(absences['Reason'] != 0) & (absences['AbsH'] != 0)]","2821f4c6":"# Add absenteeism information to employees\n\nemployees['AbsNumber'] = 0\nemployees['AbsTime'] = 0\n\nfor _, row in absences.iterrows():\n    if row['ID'] in employees.index:\n        employees.loc[row['ID'], 'AbsNumber'] += 1\n        employees.loc[row['ID'], 'AbsTime'] += row['AbsH']","90314ec3":"# Total number and time of absences\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(17, 11))\nax1.title.set_text('Total Number of Absences by Employees')\nax2.title.set_text('Total Missed Hours by Employees')\nsns.barplot(x=employees.index, y=employees['AbsTime'], ax=ax1)\nsns.barplot(x=employees.index, y=employees['AbsNumber'], ax=ax2);","7f9703ed":"# Correlation\nplt.figure(figsize=(12, 10))\nplt.title('Correlation of employees attributes')\nsns.heatmap(employees.corr(), annot=True, cmap=\"YlGnBu\", fmt='.0%', square=True, linewidths =.5);","bf2ee236":"# Correlation\nplt.figure(figsize=(12, 10))\nplt.title('Correlation of absences attributes')\nsns.heatmap(absences.corr(), annot=True, cmap=\"YlGnBu\", fmt='.0%', square=True, linewidths =.5);","c506d546":"# Scatter plot\nplt.title('Total Missed Hours by Reason')\n\ngroups = absences.groupby('Reason')['AbsH']\nnumber = groups.apply(len).iloc[1:]\ntime = groups.sum().iloc[1:]\n\np = sns.scatterplot(x=number, y=time)\n\nfor i in number.index:\n        p.text(number.loc[i]+0.5, time.loc[i], i, size='medium', weight='semibold')\n    \np.set_ylabel('Total Time of Absences')\np.set_xlabel('Total Number of Absences');","25a40d4f":"# Reason & Time\nabsences['Month'] = absences['Month'].astype(int).astype('category')\nplt.title('Number of Absences by Month and by Reason')\nsns.heatmap(absences.groupby(['Month', 'Reason'])['AbsH'].sum().unstack(), annot=True, cmap=\"YlGnBu\", square=True, linewidths =.5);","77e54791":"# Reason & Number\nplt.figure(figsize=(16, 8))\ndata = absences.groupby(['Month', 'Reason']).apply(len) \/ absences.groupby('Reason').apply(len)\ndata = data.unstack()\ndata = data.loc[:, sorted(data.columns)]\nsns.heatmap(data, annot=True, cmap=\"YlGnBu\", square=True, linewidths =.5, fmt='.0%');","b3716646":"# Reason & Number\nplt.figure(figsize=(16, 8))\ndata = absences.groupby(['Month', 'Reason']).apply(len) \/ absences.groupby('Month').apply(len)\ndata = data.unstack()\ndata = data.loc[:, sorted(data.columns)]\nsns.heatmap(data, annot=True, cmap=\"YlGnBu\", square=True, linewidths =.5, fmt='.0%');","ddee9547":"# Additional Processing\n\nscdf = cdf.copy()\nscdf = scdf[scdf['AbsH'] > 0]\n\nfor col in ['Expense', 'Distance', 'ServiceTime', 'Age', 'Workload', 'HitTarget']:\n    idx = scdf[col] > scdf[col].mean()\n    scdf.loc[idx, col] = 'SUP'\n    scdf.loc[~idx, col] = 'INF'\n    \n# BMI\ncol = 'BMI'\nidx_no = scdf[col] <= 18\nidx_inf = (18 < scdf[col]) & (scdf[col] < 24) \nidx_sup = 24 <= scdf[col]\n\nscdf.loc[idx_no, col] = 'Too Less'\nscdf.loc[idx_inf, col] = 'Good'\nscdf.loc[idx_sup, col] = 'Too Much'\n\nscdf = scdf.astype(str)\n\nscdf = scdf.drop(['Height', 'Weight', 'ID', 'Month'], axis=1)\n\nfor col in scdf.columns:\n    scdf.loc[:, col] =  str(col) + '-' + scdf[col].str[:]\n    \nrecords = scdf.values.tolist()","57939ed7":"# Mine\nassociation_rules = apriori(records, \n                            min_support=0.15, \n                            min_confidence=0.6,\n                            min_lift=3, \n                            min_length=2)\n\n# Print\n\nrules_name = set()\nrules = set()\n\nfor item in association_rules:\n    \n    # first index of the inner list\n    # Contains base item and add item\n    pair = item[0] \n    items = [x for x in pair]\n    \n    srule = \"Rule: \" + items[0] + \" -> \" + items[1]\n    ssup = \"Support: \" + str(item[1])\n    sconf = \"Confidence: \" + str(item[2][0][2])\n    \n    rule = '\\n'.join([srule, ssup, sconf])\n    \n    if srule in rules_name:\n        continue\n        \n    rules_name.add(srule)\n    rules.add(rule)\n    print(rule)\n    print()","7577f5a3":"# Additional Processing\n\nscdf = employees.copy()\n\nfor col in ['Expense', 'Distance', 'ServiceTime', 'Age']:\n    idx = scdf[col] > scdf[col].mean()\n    scdf.loc[idx, col] = 'SUP'\n    scdf.loc[~idx, col] = 'INF'\n    \n# AbsTime\nidx_no = scdf['AbsTime'] == 0\nidx_inf = scdf['AbsTime'] < scdf['AbsTime'].mean()\nidx_sup = scdf['AbsTime'] > scdf['AbsTime'].mean()\n\nscdf.loc[idx_no, 'AbsTime'] = 'No'\nscdf.loc[idx_inf, 'AbsTime'] = 'Inf'\nscdf.loc[idx_sup, 'AbsTime'] = 'Sup'\n\n# AbsNumber\nidx_no = scdf['AbsNumber'] == 0\nidx_inf = scdf['AbsNumber'] < scdf['AbsNumber'].mean()\nidx_sup = scdf['AbsNumber'] > scdf['AbsNumber'].mean()\n\nscdf.loc[idx_no, 'AbsNumber'] = 'No'\nscdf.loc[idx_inf, 'AbsNumber'] = 'Inf'\nscdf.loc[idx_sup, 'AbsNumber'] = 'Sup'\n\n# BMI\ncol = 'BMI'\nidx_no = scdf[col] <= 18\nidx_inf = (18 < scdf[col]) & (scdf[col] < 24) \nidx_sup = 24 <= scdf[col]\n\nscdf.loc[idx_no, col] = 'Too Less'\nscdf.loc[idx_inf, col] = 'Good'\nscdf.loc[idx_sup, col] = 'Too Much'\n\nscdf = scdf.astype(str)\n\nscdf = scdf.drop(['Height', 'Weight'], axis=1)\n\nfor col in scdf.columns:\n    scdf.loc[:, col] =  str(col) + '-' + scdf[col].str[:]\n    \nrecords = scdf.values.tolist()","74ae18f8":"# Mine\nassociation_rules = apriori(records, \n                            min_support=0.05, \n                            min_confidence=0.6,\n                            min_lift=3, \n                            min_length=2)\n\n# Print\n\nrules_name = []\nrules = []\n\nfor item in association_rules:\n    \n    # first index of the inner list\n    # Contains base item and add item\n    pair = item[0] \n    items = [x for x in pair]\n    \n    #if ('AbsTime' not in items[1]) and ('AbsNumber' not in items[1]):\n    if ('Service' not in items[0]) or ('Distance' not in items[1]):\n        continue\n    \n    srule = \"Rule: \" + items[0] + \" -> \" + items[1]\n    ssup = \"Support: \" + str(item[1])\n    sconf = \"Confidence: \" + str(item[2][0][2])\n    \n    rule = '\\n'.join([srule, ssup, sconf])\n    \n    if srule in rules_name:\n        continue\n        \n    rules_name.append(srule)\n    rules.append(rule)\n    \nprint('\\n\\n'.join(sorted(rules)))","0f5187bf":"# Add year\nabsences['Year'] = -1\nyear = 2007\nnew_year = (absences['Month'].shift(1) == 12) & (absences['Month'] == 1)\nfor ind, ny in zip(absences.index, new_year):\n    year = year + 1 if ny else year\n    absences.loc[ind, 'Year'] = year","81f7dae4":"# Create Month Index Column\nabsences['MonthInd'] = absences['Year'].astype(str).str[:] + '-' + absences['Month'].astype(str).str.rjust(2, '0')\nabsences['MonthInd'] = pd.to_datetime(absences['MonthInd'])\n\n# Create Time Serie\nmonthly_total = absences.groupby('MonthInd').sum()['AbsH']\nmonthly_total.index = monthly_total.index.to_period(freq='M')","899fc2b8":"# Plot time series\nplt.figure(figsize=(14, 8))\nplt.title('Monthly Total Missed Hours', fontsize='18')\nmonthly_total.plot(style='-*', color='lightcoral', marker='D', markeredgecolor='black')","cadbe4fb":"# Split\ny_train = monthly_total.iloc[:25]\ny_test = monthly_total.iloc[25:]","df2c9021":"# Plot time series\nplt.figure(figsize=(14, 8))\nplt.title('Monthly Total Missed Hours', fontsize='18')\ny_train.plot(style='-*', color='blue', marker='D', markeredgecolor='black', label='Train')\ny_test.plot(style='-*', color='green', marker='D', markeredgecolor='black', label='Test')\nplt.legend();","95161483":"# Dummy Model : Last Value\ny_last_value = pd.Series(y_train.iloc[-1], index=y_test.index)\ny_last_value","735db6aa":"# Dummy Model : Last Value Same Month\ny_monthly_last_value = pd.Series(y_train.iloc[-12:].values,index=y_test.index)\ny_monthly_last_value","677c18dc":"# Plot time series\nplt.figure(figsize=(14, 8))\nplt.title('Monthly Total Missed Hours', fontsize='18')\ny_test.plot(style='-*', color='green', marker='D', markeredgecolor='black', label='Test')\n\ny_last_value.plot(style='-*', color='grey', marker='D', markeredgecolor='black', label='Last Value')\ny_monthly_last_value.plot(style='-*', color='steelblue', marker='D', markeredgecolor='black', label='Monthly Last Value')\nplt.legend();","a411cdd4":"### Employees","d15a226c":"### Feature Engineering ","ab5822f2":"### Forecasting","847865d9":"### Absences","2db6cb71":"## Time Series Forecasting -- Too few data to get interesting insight","9481f4cf":"## Data Analysis","cbdf4ed7":"### Split Training \/ Testing Sets : 2 Years \/ 1 Year","e6c11208":"## Load data","74f2bf9e":"## Exploratory Analysis & Data Cleaning","fe24d5ff":"## Processing","43d441be":"## Data Mining - Rules","a6cb5795":"### Time Serie Creation : Monthly Total Missed Hours"}}