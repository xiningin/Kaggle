{"cell_type":{"9c56f936":"code","3ece9a38":"code","795396a3":"code","a9780598":"code","01717a39":"code","007e9543":"code","3164e19d":"code","fbaf6b9d":"code","c0d8db97":"code","ff871645":"code","69d50fba":"code","1cbe5022":"code","dd7d4860":"code","93154b3f":"code","0c588f24":"code","be50c737":"code","91de4b6b":"code","393df291":"code","b077d17f":"code","e6743246":"code","8cce56d4":"code","0f9b0f50":"code","96b194f1":"code","0da3f40e":"code","29dd9030":"code","4827d48d":"code","41f06ff2":"code","c0d85519":"code","08bbfe23":"code","7f750356":"code","81c018d5":"code","d9a1b2e5":"code","0f0a59c8":"code","c29a645b":"code","ec015c18":"code","59863595":"code","55f4b7d8":"code","d73e75cb":"code","09258836":"code","07693456":"code","62424001":"code","92de83a5":"code","b26f23c8":"code","d1770471":"markdown","858b7881":"markdown","8af9c61f":"markdown","38853345":"markdown","99c58cd3":"markdown","b24bb429":"markdown","dcb34395":"markdown","6fa06f72":"markdown","fbb0e0b6":"markdown","004e8548":"markdown","03c37386":"markdown","29b9fdc7":"markdown","5683fb25":"markdown","977bce4c":"markdown","29eb7de0":"markdown","85f95354":"markdown","c200f8a3":"markdown","50a123c1":"markdown","c0ade9a0":"markdown","6b702a05":"markdown","d4af1e13":"markdown","2308729b":"markdown","4385ac30":"markdown","17cb1bb0":"markdown","11ecdd69":"markdown","9d0f2479":"markdown","e8f5df4e":"markdown"},"source":{"9c56f936":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nprint(\"setup completed\")","3ece9a38":"filepath = '..\/input\/weather-dataset-rattle-package\/weatherAUS.csv'","795396a3":"df = pd.read_csv(filepath)\nprint(df.shape)\ndf","a9780598":"df.keys()","01717a39":"df.info()","007e9543":"df.describe()","3164e19d":"object_col = []\nnumeric_val=[]\n\nfor rain in df.columns:\n    \n    if df[rain].dtype == 'object':\n        object_col.append(rain)\n    else:\n        numeric_val.append(rain)\n        \nprint(object_col)\nprint(numeric_val)","fbaf6b9d":"df.nunique()","c0d8db97":"col  = df.columns\ncol\nfor column in col:\n    print(column,'--> ', df[column].unique())","ff871645":"df.isnull().sum()","69d50fba":"df.isnull().sum().sum()","1cbe5022":"plt.figure(figsize=(30,30))\nsns.heatmap(df.isnull(),cbar=False,cmap='Dark2')\nplt.title(\"Heatmap of the with nan values\",fontsize=30)\nplt.xlabel(\"Columns\",fontsize=30)\nplt.ylabel(\"Rows\",fontsize=30)\nplt.show()","dd7d4860":"df['RainToday'] = df['RainToday'].map({'Yes': 1, 'No' : 0})\ndf.RainToday","93154b3f":"df['RainTomorrow'] = df['RainTomorrow'].map({'Yes': 1, 'No' : 0})\ndf.RainToday","0c588f24":"df['MinTemp']=df['MinTemp'].fillna(df['MinTemp'].mean())\ndf['MaxTemp']=df['MaxTemp'].fillna(df['MaxTemp'].mean())\ndf['Rainfall']=df['Rainfall'].fillna(df['Rainfall'].mean())\ndf['Evaporation']=df['Evaporation'].fillna(df['Evaporation'].mean())\ndf['Sunshine']=df['Sunshine'].fillna(df['Sunshine'].mean())\ndf['WindGustSpeed']=df['WindGustSpeed'].fillna(df['WindGustSpeed'].mean())\ndf['WindSpeed9am']=df['WindSpeed9am'].fillna(df['WindSpeed9am'].mean())\ndf['WindSpeed3pm']=df['WindSpeed3pm'].fillna(df['WindSpeed3pm'].mean())\ndf['Humidity9am']=df['Humidity9am'].fillna(df['Humidity9am'].mean())\ndf['Humidity3pm']=df['Humidity3pm'].fillna(df['Humidity3pm'].mean())\ndf['Pressure9am']=df['Pressure9am'].fillna(df['Pressure9am'].mean())\ndf['Pressure3pm']=df['Pressure3pm'].fillna(df['Pressure3pm'].mean())\ndf['Cloud9am']=df['Cloud9am'].fillna(df['Cloud9am'].mean())\ndf['Cloud3pm']=df['Cloud3pm'].fillna(df['Cloud3pm'].mean())\ndf['Temp9am']=df['Temp9am'].fillna(df['Temp9am'].mean())\ndf['Temp3pm']=df['Temp3pm'].fillna(df['Temp3pm'].mean())","be50c737":"df['RainToday']=df['RainToday'].fillna(df['RainToday'].mode()[0])\ndf['RainTomorrow']=df['RainTomorrow'].fillna(df['RainTomorrow'].mode()[0])\n\ndf['WindDir9am'] = df['WindDir9am'].fillna(df['WindDir9am'].mode()[0])\ndf['WindGustDir'] = df['WindGustDir'].fillna(df['WindGustDir'].mode()[0])\ndf['WindDir3pm'] = df['WindDir3pm'].fillna(df['WindDir3pm'].mode()[0])","91de4b6b":"plt.figure(figsize=(30,30))\nsns.heatmap(df.isnull(),cbar=False,cmap='Dark2')\nplt.title(\"Heatmap of the without nan values\",fontsize=30)\nplt.xlabel(\"Columns\",fontsize=30)\nplt.ylabel(\"Rows\",fontsize=30)\nplt.show()","393df291":"miss_val_per = df.isnull().mean()*100\nmiss_val_per","b077d17f":"df.isnull().sum().sum()","e6743246":"plt.figure(figsize=(16,9))\nplt.subplot(1,2,1)\nsns.countplot(x  = 'RainToday', hue = 'RainToday', data = df )\nprint(df.RainToday.value_counts())\n\nplt.subplot(1,2,2)\nsns.countplot(x  = 'RainTomorrow', hue = 'RainTomorrow', data = df )\nprint(df.RainTomorrow.value_counts())","8cce56d4":"plt.figure(figsize=(16,10))\nplt.subplot(2,2,1)\nsns.countplot(x  = 'WindDir9am', data = df )\nplt.title(\"Wind Direction at 9 am\")\nplt.subplot(2,2,2)\nsns.countplot(x  = 'WindDir3pm', data = df )\nplt.title(\"Wind Direction at 3 pm\")\nplt.subplot(2,2,3)\nsns.countplot(x  = 'WindGustDir', data = df )\nplt.title(\"WindGustDirection\")\n\nprint('At 9 am, it is highest for direction N')\nprint('At 3 pm, it is highest for direction SE')","0f9b0f50":"df.drop('Date',axis = 1,inplace=True)\ndf","96b194f1":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\ndf['Location'] = le.fit_transform(df['Location'])\ndf['WindDir9am'] = le.fit_transform(df['WindDir9am'])\ndf['WindDir3pm'] = le.fit_transform(df['WindDir3pm'])\ndf['WindGustDir'] = le.fit_transform(df['WindGustDir'])","0da3f40e":"df.head(20)","29dd9030":"plt.figure(figsize=(25,25))\nax = sns.heatmap(df.corr(),linewidths=1, square=True, annot=True, fmt='.2f')\nax.set_xticklabels(ax.get_xticklabels())\nplt.title('Correlation of of the DataFrame',fontsize = 20)\nplt.show()","4827d48d":"print('Temp3pm and Temp9am highly correlated')\nprint('Humidity9am and Humidity3pm highly correlated')\nprint('MaxTemp and Temp9am highly correlated')\nprint('MaxTemp and Temp3pm highly correlated')\nprint('MinTemp and Temp9am highly correlated')\nprint('MinTemp and Temp3pm highly correlated')","41f06ff2":"import warnings\nwarnings.filterwarnings(\"ignore\")\nplt.figure(figsize=(16,16))\nplt.subplot(3,2,1)\nsns.boxplot(df['Humidity3pm'],orient='v',color='r')\nplt.subplot(3,2,2)\nsns.boxplot(df['Humidity9am'],orient='v',color='r')\nplt.subplot(3,2,3)\nsns.boxplot(df['Pressure3pm'],orient='v',color='c')\nplt.subplot(3,2,4)\nsns.boxplot(df['Pressure9am'],orient='v',color='c')\nplt.subplot(3,2,5)\nsns.violinplot(x='RainToday',y='MaxTemp',data=df,hue='RainTomorrow')\nplt.subplot(3,2,6)\nsns.violinplot(x='RainToday',y='MinTemp',data=df,hue='RainTomorrow')\nplt.show()","c0d85519":"from scipy import stats\nprint('Shape of DataFrame Before Removing Outliers', df.shape )\ndf=df[(np.abs(stats.zscore(df)) < 3).all(axis=1)]\nprint('Shape of DataFrame After Removing Outliers', df.shape )","08bbfe23":"df=df.drop(['Temp3pm','Temp9am','Humidity9am'],axis=1)\ndf.columns","7f750356":"import os\nfrom imblearn.over_sampling import SMOTE\nfrom collections import Counter\nos = SMOTE()\nX, y = os.fit_resample(df.iloc[:,:-1], df.iloc[:,-1])\ncount = Counter(y)\nprint(count)","81c018d5":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=51)","d9a1b2e5":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsClassifier","0f0a59c8":"from sklearn.svm import SVC\nsvc_classifier = SVC()\nsvc_classifier.fit(X_train, y_train)\ny_pred_scv = svc_classifier.predict(X_test)\naccuracy_score(y_test, y_pred_scv)","c29a645b":"rfr = RandomForestRegressor(n_estimators = 100, random_state = 42)  \nrfr.fit(X_train, y_train)  \ny_pred_rfr = rfr.predict(X_test)\naccuracy_score(y_test, y_pred_rfr.round())","ec015c18":"from xgboost import XGBClassifier\nxgb_classifier = XGBClassifier()\nxgb_classifier.fit(X_train, y_train)\ny_pred_xgb = xgb_classifier.predict(X_test)\naccuracy_score(y_test, y_pred_xgb)","59863595":"knn_classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nknn_classifier.fit(X_train, y_train)\ny_pred_knn = knn_classifier.predict(X_test)\naccuracy_score(y_test, y_pred_knn)","55f4b7d8":"nb_classifier = GaussianNB()\nnb_classifier.fit(X_train, y_train)\ny_pred_nb = nb_classifier.predict(X_test)\naccuracy_score(y_test, y_pred_nb)","d73e75cb":"from sklearn.tree import DecisionTreeClassifier\ndt_classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 51)\ndt_classifier.fit(X_train, y_train)\ny_pred_dt = dt_classifier.predict(X_test)\naccuracy_score(y_test, y_pred_dt)","09258836":"from sklearn.ensemble import AdaBoostClassifier\nadb_classifier = AdaBoostClassifier(DecisionTreeClassifier(criterion = 'entropy', random_state = 200),\n                                    n_estimators=2000,\n                                    learning_rate=0.1,\n                                    algorithm='SAMME.R',\n                                    random_state=1,)\nadb_classifier.fit(X_train, y_train)\ny_pred_adb = adb_classifier.predict(X_test)\naccuracy_score(y_test, y_pred_adb)","07693456":"print(f\"RandomForestRegressor {0.9068931345209836*100} accuracy score \")\nprint(f\"XGBClassifier {0.9065704869673434*100} accuracy score \")\nprint(f\"svc_classifier {0.7643290083196976*100} accuracy score \")\nprint(f\"KNeighborsClassifier {0.859740499181858*100} accuracy score \")\nprint(f\"GaussianNB {0.7450162476089511*100} accuracy score \")\nprint(f\"DecisionTreeClassifier {0.8552003871770644*100} accuracy score \")\nprint(f\"AdaBoostClassifier {0.917448318775783*100} accuracy score \")","62424001":"print(\"AdaBoostClassifier is the best nodel for this dataset with 91%\")","92de83a5":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred_adb))","b26f23c8":"print(\"Thank You !!! Keep supporting\")","d1770471":"#  Decision Tree Classifier","858b7881":"# Dropping date column","8af9c61f":"# Finding unique values of columns","38853345":"# Boxplot and Bivariate Analysis\n\n","99c58cd3":"# `Data Visualization for the dataset","b24bb429":"# Finding numerical and categorical columns","dcb34395":"# Finding null values of columns","6fa06f72":"# K \u2013 Nearest Neighbor Classifier","fbb0e0b6":"# Suppor vector Classifier","004e8548":"# Gaussian Naive Bayes","03c37386":"# Balancing data for training and testing","29b9fdc7":"# Dropping highly correlated columns","5683fb25":"# Filling missing values with mean (numerical columns)","977bce4c":"# Applying Machine Learing Algorithm","29eb7de0":"# Checking correlation","85f95354":"# Import file path ","c200f8a3":"# Result","50a123c1":"# Random Forest Regressor","c0ade9a0":"# Cheaking if there have any null value left","6b702a05":"# Convert into DataFrame","d4af1e13":"# Train test split","2308729b":"# Removing Outliers","4385ac30":"# AdaBoostClassifier","17cb1bb0":"# Handling missing values using mean,mode","11ecdd69":"# Encoding the categorical variables","9d0f2479":"# XGBoost Classifier","e8f5df4e":"# Filling missing values with mode(categorical and continuous columns)"}}