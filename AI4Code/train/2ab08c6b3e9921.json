{"cell_type":{"4ca989a1":"code","241f33ec":"code","fd603c13":"code","975bf15b":"code","8ca9aca6":"code","4062ded9":"code","99978bdf":"code","3fa8d1aa":"code","9befdad7":"code","06b0d183":"code","121a7f11":"code","8799c6e4":"code","f528fcd5":"code","82eb7303":"code","af2ad667":"markdown"},"source":{"4ca989a1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('max_rows',1000)\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.subplots as subplots\nimport plotly as py\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\nline_color = ['#008abc','#96508e','#4fcb93','#f86e35','#ddaa18','#20beff']\n\nfrom xgboost import XGBRegressor\n\nfrom xgboost import plot_importance\nfrom sklearn.inspection import partial_dependence, plot_partial_dependence\n\nimport datetime\n","241f33ec":"df_covid = pd.read_csv('..\/input\/covid19panels\/country_panel.csv',index_col=[0,1])\ndf_covid.to_csv('\/kaggle\/working\/df_covid.csv',header=False)","fd603c13":"def plot_graph(df,countries_to_view,column_to_plot,title):\n    fig = go.Figure()\n\n    count = 0\n    for country in countries_to_view:\n        fig.add_trace(go.Scatter(x=df.loc[(country,slice(None)),:].index.get_level_values(1), y=df.loc[(country,slice(None)),column_to_plot],connectgaps=True, name=df.loc[(country,slice(None)),:].index.get_level_values(0)[0],\n                         #line=dict(color=line_color[count],width=4)))\n                        line=dict(width=4)))\n\n        count+=1\n        \n    fig.update_layout(title=title,\n                       yaxis = dict(rangemode = 'tozero'))\n    \n    return fig","975bf15b":"countries_to_view = ['Australia','Germany','India' ,'Israel' ,'Sweden' ,'United Kingdom' ,'United States']","8ca9aca6":"df_covid['new_cases_per_million_7_day_average'] = df_covid['new_cases_per_million'].rolling(7).mean()\nfig = plot_graph(df_covid,countries_to_view,'new_cases_per_million_7_day_average','New cases per million')\npy.offline.iplot(fig)\n","4062ded9":"fig = plot_graph(df_covid,countries_to_view,'Delta_perc_sequences','Percentage of Sequences that are the Delta variant')\npy.offline.iplot(fig)\n","99978bdf":"fig = plot_graph(df_covid,countries_to_view,'people_fully_vaccinated_per_hundred','Percentage of people fully vaccinated')\npy.offline.iplot(fig)\n\n","3fa8d1aa":"df_covid['workplaces_percent_change_from_baseline_7_day_average'] = df_covid['workplaces_percent_change_from_baseline'].rolling(7).mean()\nfig = plot_graph(df_covid,countries_to_view,'workplaces_percent_change_from_baseline_7_day_average','Time spent at workplaces')\npy.offline.iplot(fig)\n\n\n","9befdad7":"fig = plot_graph(df_covid,countries_to_view,'excess_mortality','Excess mortaility (measured as percentage increase above usual patterns)')\npy.offline.iplot(fig)\n","06b0d183":"df_covid['perc_hospital_beds_for_covid'] = df_covid['hosp_patients_per_million']\/(df_covid['hospital_beds_per_thousand']*1000)*100\nfig = plot_graph(df_covid,countries_to_view,'perc_hospital_beds_for_covid','Percentage of hospital beds used by COVID patients')\npy.offline.iplot(fig)\n","121a7f11":"df_covid['perc_hospital_beds_for_covid'] = df_covid['hosp_patients_per_million']\/(df_covid['hospital_beds_per_thousand']*1000)*100\nfig = plot_graph(df_covid,countries_to_view,'perc_hospital_beds_for_covid','Percentage of hospital beds used by COVID patients')\npy.offline.iplot(fig)\n","8799c6e4":"df_covid['mRNA_perc_of_total_vaccinations'] = df_covid['Moderna_perc_of_total_vaccinations'] + df_covid['Pfizer\/BioNTech_perc_of_total_vaccinations']\nfig = plot_graph(df_covid,countries_to_view,'mRNA_perc_of_total_vaccinations','Percentage of vaccines that are mRNA vaccines')\npy.offline.iplot(fig)\n","f528fcd5":"latest_date = (pd.to_datetime(df_covid.index.get_level_values(1).max())-datetime.timedelta(1)).strftime('%Y-%m-%d')\n \ncountries = df_covid.index.get_level_values(0).unique()\nfor country in countries:\n    df_covid.loc[(country,slice(None)),'new_deaths_per_million_last_14_days'] = df_covid.loc[(country,slice(None)),'new_deaths_per_million'].rolling(14).sum()\n    \ndf_death_rate = df_covid.loc[(slice(None),latest_date),['new_deaths_per_million_last_14_days','people_fully_vaccinated_per_hundred']]\ndf_death_rate = df_death_rate.droplevel('date', axis=0)\n\nfig = px.scatter(df_death_rate, x=\"people_fully_vaccinated_per_hundred\", y=\"new_deaths_per_million_last_14_days\", text=df_death_rate.index, trendline=\"ols\", width=1200, height=800,                 \n                 labels={\n                     \"people_fully_vaccinated_per_hundred\": \"% of population that is full vaccinated\",\n                     \"new_deaths_per_million_last_14_days\": \"New deaths per million\",\n                 },\n                title=\"Relationship between death rate and vaccination rate\"\n                )\n\nfig.update_traces(textposition='top center')\n\nfig.show()\n","82eb7303":"latest_date = df_covid.index.get_level_values(1).max()\n \ndf_death_rate = df_covid.loc[(slice(None),latest_date),['new_deaths_per_million_last_14_days','people_fully_vaccinated_per_hundred']]\ndf_death_rate = df_death_rate.droplevel('date', axis=0)\ndf_death_rate.loc[:,'new_deaths_per_million_last_14_days_global_peak'] = df_covid.loc[(slice(None),'2021-01-20'),'new_deaths_per_million_last_14_days'].droplevel('date', axis=0)\n\n\ndf_death_rate_select_countries = df_death_rate[df_death_rate.index.get_level_values(0).isin(countries_to_view)]\n\nfig = go.Figure(data=[\n    go.Bar(name='COVID death rate in late Jan', x=df_death_rate_select_countries.index, y=df_death_rate_select_countries['new_deaths_per_million_last_14_days_global_peak']),\n    go.Bar(name='COVID death rate now', x=df_death_rate_select_countries.index, y=df_death_rate_select_countries['new_deaths_per_million_last_14_days'])\n])\n# Change the bar mode\nfig.update_layout(barmode='group',title=\"COVID death rate at global peak vs COVID death rate now\")\nfig.show()","af2ad667":"This notebook is a fork of https:\/\/www.kaggle.com\/antgoldbloom\/eda-on-covid-panel\/ (which was released under the Apache 2.0 open source license).  It was modified to update on a weekly basis (as a test of the new\/upcoming \"scheduled notebook run\" feature on Kaggle).  I also hid\/collapsed the code cells to draw more attention towards the graphs."}}