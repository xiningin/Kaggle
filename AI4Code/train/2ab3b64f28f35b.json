{"cell_type":{"f79de962":"code","cfcfdabf":"code","c4d1a87c":"code","d4386a8a":"code","802d967c":"code","e4fc8c69":"code","7c61a291":"code","f6e7e980":"code","b360ed8a":"code","310153db":"code","821e7e43":"code","dc410d56":"code","94bbfe0c":"code","9dc8c77a":"code","f168550d":"code","03aa645f":"code","30f1bb64":"code","508d48bf":"code","529f5209":"code","40c690a2":"code","d98aeba5":"code","04fd87ca":"code","8c7e72ff":"code","aecc5192":"code","b420c4fd":"code","7e54c343":"markdown","0d313925":"markdown","49d8547a":"markdown","fdcfff13":"markdown","62bed3b7":"markdown","1672a16f":"markdown","2feb1cf0":"markdown","67fcf012":"markdown","ae91387e":"markdown","6d261f22":"markdown","278ecfe0":"markdown","a155d4e7":"markdown","e56c7836":"markdown","ee5c61c4":"markdown","c91714de":"markdown","36965fe9":"markdown","3790ecae":"markdown","40647dfa":"markdown","b03ddee8":"markdown","90257ad3":"markdown"},"source":{"f79de962":"#!pip install google.colab\nfrom datetime import datetime\nfrom collections import defaultdict\nimport requests\nimport operator\nimport pandas as pd\nimport matplotlib.pyplot as plt\n#import plotly.graph_objects as go","cfcfdabf":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True) ","c4d1a87c":"## fetching the raw data\nr = requests.get('https:\/\/api.covid19india.org\/raw_data.json')\njsonData = r.json()\n\n","d4386a8a":"listJsonData = jsonData.get('raw_data')\nCoviddf = pd.DataFrame.from_dict(listJsonData, orient='columns')\n#print(Coviddf)","802d967c":"RawCoviddf= Coviddf\nRawCoviddf['dateannounced'] = pd.to_datetime(RawCoviddf['dateannounced'],format ='%d\/%m\/%Y')\nRawCoviddf.dropna(subset=['detectedstate'],inplace = True)\n","e4fc8c69":"# recovered\nurl1 = 'https:\/\/api.covid19india.org\/states_daily_csv\/recovered.csv'\nrecDf = pd.read_csv(url1)\nrecDf = recDf.iloc[:,0:recDf.shape[1]-1]\nrecDf.fillna(0,inplace = True)","7c61a291":"# deceased\nurl2 = 'https:\/\/api.covid19india.org\/states_daily_csv\/deceased.csv'\ndecDf =pd.read_csv(url2)\ndecDf = decDf.iloc[:,0:decDf.shape[1]-1]\ndecDf.fillna(0,inplace = True)","f6e7e980":"# confirmed\nurl3 = 'http:\/\/api.covid19india.org\/states_daily_csv\/confirmed.csv'\nconDf = pd.read_csv(url3)\nconDf = conDf.iloc[:,0:conDf.shape[1]-1]\nconDf.fillna(0,inplace = True)","b360ed8a":"# state\nstateDict  = {'AP': 'Andhra Pradesh','AR': 'Arunachal Pradesh','AS': 'Assam','BR': 'Bihar','CT': 'Chhattisgarh','GA': 'Goa',\n              'GJ': 'Gujarat','HR': 'Haryana','HP': 'Himachal Pradesh','JH': 'Jharkhand','KA': 'Karnataka','KL': 'Kerala',\n              'MP': 'Madhya Pradesh','MH': 'Maharashtra','MN': 'Manipur','ML': 'Meghalaya','MZ': 'Mizoram','NL': 'Nagaland',\n              'OR': 'Odisha','PB': 'Punjab','RJ': 'Rajasthan','SK': 'Sikkim','TN': 'Tamil Nadu','TG': 'Telangana','TR': 'Tripura',\n              'UT': 'Uttarakhand','UP': 'Uttar Pradesh','WB': 'West Bengal','AN': 'Andaman and Nicobar Islands','CH': 'Chandigarh',\n              'DN': 'Dadra and Nagar Haveli','DD': 'Daman and Diu','DL': 'Delhi','JK': 'Jammu and Kashmir','LA': 'Ladakh','LD': 'Lakshadweep',\n              'PY': 'Puducherry'}","310153db":"combinedDf = pd.DataFrame(columns= ['Date','State','Confirmed','Recovered','Dead'])","821e7e43":"index = 0\nfor i in range(len(recDf)):\n    for j in range(2,len(recDf.iloc[i])):\n        if conDf.iloc[i,j]==0 and recDf.iloc[i,j]==0 and decDf.iloc[i,j]==0:\n            continue\n        record = [recDf['date'][i],stateDict.get(recDf.columns[j]),int(conDf.iloc[i,j]),int(recDf.iloc[i,j]),int(decDf.iloc[i,j])]\n        combinedDf.loc[index]=record\n        index=index+1","dc410d56":"index = 0\nfor i in range(len(recDf)):\n    for j in range(2,len(recDf.iloc[i])):\n        if conDf.iloc[i,j]==0 and recDf.iloc[i,j]==0 and decDf.iloc[i,j]==0:\n            continue\n        record = [recDf['date'][i],stateDict.get(recDf.columns[j]),int(conDf.iloc[i,j]),int(recDf.iloc[i,j]),int(decDf.iloc[i,j])]\n        combinedDf.loc[index]=record\n        index=index+1","94bbfe0c":"\nobj = datetime.strptime(combinedDf['Date'][len(combinedDf)-1],'%d-%b-%y')\n\n# getting the data till Yesterday\nRawCoviddf = RawCoviddf[RawCoviddf['dateannounced']<=datetime.strftime(obj,'%Y-%m-%d')]\ncombinedDf['Date'] = pd.to_datetime(combinedDf['Date'],format ='%d-%b-%y')","9dc8c77a":"stateCount = defaultdict(list)\n\n# state Wise summing up\nfor i in range(len(combinedDf)):\n\n    #Active case calculation\n    value = combinedDf['Confirmed'][i] -(combinedDf['Recovered'][i]+combinedDf['Dead'][i])\n    \n    if combinedDf['State'][i] not in stateCount:\n        stateCount[combinedDf['State'][i]].append(combinedDf['Confirmed'][i])\n        stateCount[combinedDf['State'][i]].append(combinedDf['Recovered'][i])\n        stateCount[combinedDf['State'][i]].append(combinedDf['Dead'][i])\n        stateCount[combinedDf['State'][i]].append(value)\n    else:\n        stateCount[combinedDf['State'][i]][0]+=combinedDf['Confirmed'][i]\n        stateCount[combinedDf['State'][i]][1]+=combinedDf['Recovered'][i]\n        stateCount[combinedDf['State'][i]][2]+=combinedDf['Dead'][i]\n        stateCount[combinedDf['State'][i]][3]+=value\n\n","f168550d":"# sorting in reverse order to get the state with maximum cases\nstateCount = dict(sorted(stateCount.items(), key = lambda x :x[1][0], reverse=True ))","03aa645f":"stateCount","30f1bb64":"Tabulation = pd.DataFrame.from_dict(stateCount,orient='index',columns=list(combinedDf.columns[2:])+['Active'])\nTabulation","508d48bf":"#calculation Part\nvalue = list(Tabulation.sum(axis=0,skipna=True))\n\n# display using plotly pie chart\ncolors = ['red','green','grey']\nfig = go.Figure(data=go.Pie(values = value[:-1], labels = Tabulation.columns.tolist(),textinfo='percent+label',marker=dict(colors=colors)))\nfig.update_layout(title_text='Affect of COVID 19 in India')\n\nfig.show()","529f5209":"# calculation Part\ndf = combinedDf.groupby('Date').sum().groupby('Date').cumsum()\ndf['Confirmed'] = df['Confirmed'] - (df['Recovered']+df['Dead'])\ndf.columns =['Active','Recovered','Dead']\n\n#display\nfig = go.Figure(data=[\n    go.Bar(name='Dead', x=df.index.tolist(), y=df['Dead'],marker_color = 'grey'),\n    go.Bar(name='Recovered', x=df.index.tolist(), y=df['Recovered'],marker_color = 'green'),\n    go.Bar(name='Active', x=df.index.tolist(), y=df['Active'],marker_color = 'red')\n])\n\nfig.update_layout(barmode='stack')\nfig.update_layout(title_text='Daily cases of Covid-19 in India',yaxis=dict(title='Number of cases recorded' ),xaxis=dict(title='Date' ))\n\nfig.show()","40c690a2":"#calculation Part\ndf = combinedDf.groupby('Date').sum().groupby('Date').cumsum()\ncumDate= df.cumsum()\ncumDate\n\n#display\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=cumDate.index.tolist(), y=cumDate['Dead'],\n    hoverinfo='x+y',\n    mode='lines+markers',\n     line_color='grey',\n    stackgroup='one',\n    name = \"Dead\"\n))\n\nfig.add_trace(go.Scatter(x=cumDate.index.tolist(), y=cumDate['Recovered'],\n    hoverinfo='x+y',\n    mode='lines+markers',\n    line_color='green',\n    stackgroup='one',\n    name = \"Recovered\"\n))\nfig.add_trace(go.Scatter( x=cumDate.index.tolist(), y=cumDate['Confirmed'],\n    hoverinfo='x+y',\n    mode='lines+markers',\n    line_color='red',\n    stackgroup='one',\n    name =\"Confirmed\"\n))\nfig.update_layout(title_text='Cummulative Trends of Covid-19 India',yaxis=dict(title='Number of cases' ),xaxis=dict(title='Date'))\nfig.show()","d98aeba5":"#calculation Part\ngrowthRate=dict()\nfor i in range(len(combinedDf)):\n    \n    if combinedDf['State'][i] not in growthRate:\n        growthRate[combinedDf['State'][i]]=0\n\nfor i in growthRate.items():\n    l = []\n    for j in range(len(combinedDf)):\n        if i[0] == combinedDf['State'][j]:\n            l.append(combinedDf['Confirmed'][j])\n    res = sum(list(map(operator.sub, l[1:], l[:-1])))\n    if res >0:\n        growthRate[i[0]]+=res\ngrowthRate = dict(sorted(growthRate.items(), key = lambda x :x[1], reverse=True ))\nlabel = list(growthRate.keys())\nvalue = list(growthRate.values())\ntotal = sum(value)\nvalue = [ round(((value[i]\/total)*100),2)for i in range(len(value))]\n\n#display\nfig = go.Figure(go.Bar(\n            x=value,\n            y=label,\n            orientation='h'))\n          \nfig.update_layout(title_text='State Wise Growth Rate of Covid-19 India',yaxis=dict(title='States',autorange=\"reversed\"),xaxis=dict(title='percentage'))\nfig.show()\n","04fd87ca":"#calculation Part\ntcdf = combinedDf.groupby(['Date','State']).sum().groupby(['State']).cumsum()\ntcdf = tcdf.reset_index()\n\n#display\nfig = go.Figure()\nfor i in Tabulation.index.tolist():\n    l=[]\n    for j in range(len(tcdf)):\n        if tcdf['State'][j]==i:\n            l.append(tcdf['Confirmed'][j])\n    fig.add_trace(go.Scatter(x=cumDate.index.tolist(), y=l,\n        mode='lines',name=i))\nfig.update_layout(title_text='State Wise confirmed cases of Covid-19 in India',yaxis=dict(title='Number of cases counted' ),xaxis=dict(title='Date' ))\nfig.show()","8c7e72ff":"#calculation Part & display\nfig = go.Figure()\nfor i in Tabulation.index.tolist():\n    l=[]\n    for j in range(len(tcdf)):\n        if tcdf['State'][j]==i:\n            l.append(tcdf['Recovered'][j])\n    fig.add_trace(go.Scatter(x=cumDate.index.tolist(), y=l,\n                    mode='lines',\n                    name=i))\nfig.update_layout(title_text='State Wise recovered cases of Covid-19 India',yaxis=dict(title='Number of cases' ),xaxis=dict(title='Date' ))\nfig.show()","aecc5192":"fig = go.Figure()\nfor i in Tabulation.index.tolist():\n    l=[]\n    for j in range(len(tcdf)):\n        if tcdf['State'][j]==i:\n            l.append(tcdf['Dead'][j])\n    fig.add_trace(go.Scatter(x=cumDate.index.tolist(), y=l,\n                    mode='lines',\n                    name=i))\nfig.update_layout(title_text='State Wise dead cases of Covid-19 India',yaxis=dict(title='Number of cases' ),xaxis=dict(title='Date' ))\nfig.show()","b420c4fd":"#calculation Part\nimport numpy as np\nriDf = combinedDf.groupby('Date').sum()\nrecoveryRate = round((sum(combinedDf['Recovered'])+sum(combinedDf['Dead']))\/sum(combinedDf['Confirmed']),2)\n\ngrratelist =[]\nfor i in range(len(riDf)-1):\n    grratelist.append(round(riDf['Confirmed'][i+1]\/riDf['Confirmed'][i],2))\n\nrrratelist= []\nfor i in range(len(cumDate)):\n    rrratelist.append(round(((cumDate['Recovered'][i]+cumDate['Dead'][i])\/cumDate['Confirmed'][i]),2))\n\n#display\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=cumDate.index.tolist()[:-1], y=rrratelist[:-1],\n    hoverinfo='x+y',\n    mode='lines+markers',\n     line_color='green',\n    stackgroup='one',\n    name = \"recovery\"\n))\nfig.add_trace(go.Scatter(\n    x=riDf.index.tolist()[:-1], y=grratelist,\n    hoverinfo='x+y',\n    mode='lines+markers',\n     line_color='red',\n    stackgroup='one',\n    name = \"growth\"\n))\n\nprint(\"Average Rate of growth : \",round(np.mean(rrratelist),2))\nfig.update_layout(title_text='Daily Growth Rate and Recovery Rate of Covid-19 in India',yaxis=dict(title='Rate' ),xaxis=dict(title='Date' ))\nfig.show()","7e54c343":"State Wise Growth Rate of Covid-19 India\n\n\n**calculation :**\n* For all the states :\n    * calculate the cummulative difference with respect to Date\n    * sum the cummulative difference.\n\n* State has the highest sum means, the Growth Rate is more.\n* State has the lowest sum means, the Growth Rate is less.","0d313925":"The state codes are converted to names of the state ","49d8547a":"Daily Growth Rate and Recovery Rate of Covid-19 India\n\n**calculation :**\n* Growth Rate = Current Day Confirmed cases \/ Previous Day Confirmed cases\n* ( Recovered cases = Current Day Recovered + Current Day Dead )\n* Recovery Rate = Recovered cases \/ Current Day Confirmed","fdcfff13":"Below line will display the plotly curves in the kernel itself","62bed3b7":"Taking the recovered cases file and replacing the null values to 0","1672a16f":"From json to csv","2feb1cf0":"Cummulative Trends of Covid-19 India\n\n**calculation :**\n* group the data with respect to : Date\n* And, summing : Confirmed, Recovered, Dead\n* And, cummulative summing : Confirmed, Recovered, Dead","67fcf012":"Taking the confirmed cases file and replacing the null values to 0","ae91387e":"Data has the number of confirmed, recovered, dead for each state per day","6d261f22":"Changing the format of the date","278ecfe0":"State Wise dead cases of Covid-19 India\n\n**calculation :**\n* For all the States:\n    * cummulative summing the Dead Case","a155d4e7":"Combining all","e56c7836":"Daily cases of Covid-19 India\n\n**Calculation :**\n* group the data with respect to : Date\n* And, summing : Active, Recovered, Dead","ee5c61c4":"Data is collected from the following websites\n* https:\/\/api.covid19india.org\/raw_data.json\n* https:\/\/api.covid19india.org\/states_daily_csv\/recovered.csv\n* https:\/\/api.covid19india.org\/states_daily_csv\/deceased.csv\n* http:\/\/api.covid19india.org\/states_daily_csv\/confirmed.csv\n\n### Data Vizualization using plotly\n---------------------------------------------------------------\n\n\n","c91714de":"State Wise confirmed cases of Covid-19 India\n\n**calculation :**\n* For all the States:\n    * cummulative summing the Confirmed Case\n","36965fe9":"Changing the values to integer type and combining them","3790ecae":"Taking the deceased cases file and replacing the null values to 0","40647dfa":"\nData collection, Preprocessing and transformation","b03ddee8":"State Wise recovered cases of Covid-19 India\n\n**calculation :**\n* For all the States:\n    * cummulative summing the Recovered Case","90257ad3":"The packages you need to install"}}