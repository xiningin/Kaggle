{"cell_type":{"c5cb1205":"code","66d59e93":"code","6bf179ba":"code","3f3ebd14":"code","6f6b2857":"code","ca8a93ff":"code","9ce54fd2":"code","52c99729":"code","1b11c97c":"code","24c0fdcf":"code","fcdf0766":"code","7d478062":"code","92e651da":"code","36884eab":"code","24ee75b2":"code","e2c6516a":"code","ebb4195f":"code","8f6ac4b9":"code","2e2de3eb":"code","8c876a6a":"code","a657ba13":"code","9821ec88":"code","fbf630a6":"code","9f5d45cf":"code","1b67dbc5":"code","413da462":"code","42aa4e24":"code","151563d8":"code","d8866f9d":"code","dd141f70":"code","d8039728":"code","21429def":"code","30f45e4f":"code","485c7ed5":"code","7089b9c5":"code","0f3afe95":"markdown","ba6c1db0":"markdown","ba0b23b0":"markdown","163e5fe3":"markdown","a34cf990":"markdown","b4c12cbe":"markdown","6ef4efec":"markdown","19772a05":"markdown","c16c3e86":"markdown","40be9781":"markdown","8c2ba660":"markdown","094d47b3":"markdown","f1298fb8":"markdown","a5f57ec6":"markdown","a86aa579":"markdown","f4d9b45b":"markdown","41b413ef":"markdown","2ba10889":"markdown","1ab5225b":"markdown","8b7ab112":"markdown","112fd175":"markdown","5ecc246b":"markdown","f57774ae":"markdown","a39ae53e":"markdown","740af4df":"markdown","ff0ae361":"markdown","0728618e":"markdown"},"source":{"c5cb1205":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing, svm\nfrom sklearn import model_selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n\nimport warnings\nwarnings.filterwarnings('ignore')","66d59e93":"# read datasets\nbottle = pd.read_csv('..\/input\/bottle.csv')","6bf179ba":"bottle.head(2)","3f3ebd14":"bottle.describe()","6f6b2857":"bottle = bottle[['Salnty', 'T_degC']]\nbottle.columns = ['Sal', 'Temp']\ndata = bottle  #copy original data for later use","ca8a93ff":"# Limiting amount of entries to speed up regression time\nbottle = bottle[:][:500]\n\nprint(bottle.head())","9ce54fd2":"data.columns","52c99729":"data.dtypes","1b11c97c":"data.describe()","24c0fdcf":"data.head(2)","fcdf0766":"# This produces a scatter \nsns.lmplot(x=\"Sal\", y=\"Temp\", data=bottle,\n           order=2, ci=None);","7d478062":"# Identify where we are seeing the null values\nbottle.isnull().sum()","92e651da":"# Eliminating NaN or missing input numbers\nbottle.fillna(method='ffill', inplace=True)","36884eab":"X = np.array(bottle['Sal']).reshape(-1, 1)\ny = np.array(bottle['Temp']).reshape(-1, 1)","24ee75b2":"# split data\nvalidation_size = 0.011\nseed = 0","e2c6516a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=validation_size, \n                                                    random_state=seed)","ebb4195f":"model_UnitTest = LinearRegression()  #unit test one LR model\nmodel_UnitTest.fit(X_train, y_train)","8f6ac4b9":"y_pred = model_UnitTest.predict(X_test)","2e2de3eb":"accuracy = model_UnitTest.score(X_test, y_test)\nprint(\"Basic Linear Regression Model accuracy: \" +\"{:.1%}\".format(accuracy));","8c876a6a":"print(\"R2 Score: \" +\"{:.3}\".format(r2_score(y_test, y_pred)));","a657ba13":"plt.scatter(X_test, y_test, color='b')\nplt.plot(X_test, y_pred, color='k')\nplt.show()","9821ec88":"# Test the model using the new dataset\nX_new = [[30],[36]] #X_test[5].reshape(1, -1)\ny_pred = model_UnitTest.predict(X_new)\n\nplt.scatter(X_train, y_train, color='b')\n\nplt.plot(X_new, y_pred, color='r')\nplt.show()","fbf630a6":"# Import regression models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\nmodels = []\nmodels.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))","9f5d45cf":"data.fillna(method='ffill', inplace=True)\n\nX2 = np.array(data['Sal']).reshape(-1, 1)\ny2 = np.array(data['Temp']).reshape(-1, 1)","1b67dbc5":"from sklearn.model_selection import train_test_split\nvalidation_size2 = 0.20\nseed2 = 5\n\nX_train2, X_validation2, Y_train2, Y_validation2 = train_test_split(\n    X2, y2, test_size=validation_size2, random_state=seed2)","413da462":"X_train2[1]","42aa4e24":"Y_train2[1]","151563d8":"#lab_enc = preprocessing.LabelEncoder()  #fix ValueError: Unknown label type: continuous\n#Y_train_encoded = lab_enc.fit_transform(Y_train)","d8866f9d":"Y_train2_int_type = Y_train2.astype('int')","dd141f70":"scoring = 'accuracy'    #10 fold cross validation\n\nresults = []\nnames = []\nfor name, model in models:\n\tkfold = model_selection.KFold(n_splits=10, random_state=seed2)\n\tcv_results = model_selection.cross_val_score(model, X_train2, \n                                                 Y_train2_int_type, \n                                                 cv=kfold, scoring=scoring)\n\tresults.append(cv_results)\n\tnames.append(name)\n\tmsg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n\tprint(msg)","d8039728":"fig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nplt.plot([1,2,3])\nax = fig.add_subplot(211)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","21429def":"model = KNeighborsClassifier()\nmodel.fit(X_train2, Y_train2_int_type)","30f45e4f":"y_pred2 = model.predict(X_train2)","485c7ed5":"print(\"R2 Score: \" +\"{:.3}\".format(r2_score(Y_train2, y_pred2)));","7089b9c5":"plt.scatter(X_train2[:10], Y_train2[:10], color='b')\nplt.plot(X_train2[2:4], y_pred2[2:4], color='g')\nplt.show()","0f3afe95":"Get Stats","ba6c1db0":"**Visualize final model with the best fit Regression Model**","ba0b23b0":"Let us assume less than 1% of total data is only used to model by mistake","163e5fe3":"**Choose the final and check on the accuracy of the best model**","a34cf990":"**Draw Algorithm Comparison Plots**","b4c12cbe":"**Let's test the model real time** which is completely new and not in the original dataset) - Production simulation","6ef4efec":"Clean the data","19772a05":"**Feature Transformation**","c16c3e86":"Evaluate the Final Model performance","40be9781":"Visualize the data","8c2ba660":"Review Full Dataset and Get Overall Stats","094d47b3":"**Thank you for your time**","f1298fb8":"Let's draw **plots** to verify how model is doing","a5f57ec6":"Make predictions using the Final Model","a86aa579":"Assume **Linear Regression model is chosen by default** and used for predictions as part of first round","f4d9b45b":"**Evaluate** each model in a loop","41b413ef":"**Feature Extraction**","2ba10889":"Since the above model is overfitting, we need to tune our model and work on hyper parameters a bit.\nNow let's jump onto the fun part - **Regression Models' Comparison...!!!**","1ab5225b":"# Import Libraries","8b7ab112":"Assume validation set is **less than 20%** and seed is not chosen at the first round of modeling","112fd175":"**Split** the data","5ecc246b":"**Take full set of data** and select the features","f57774ae":"**Model accuracy - Evaluate model**","a39ae53e":"**Load dataset**","740af4df":"**Split data** - 80% for training and 20% for validating the model","ff0ae361":"Let's **predict** with validation data ","0728618e":"**Select features and set the target variable**"}}