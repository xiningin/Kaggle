{"cell_type":{"5aae2b30":"code","4487ba93":"code","00197e36":"code","48c5eb79":"code","262916b5":"code","e4adf9e5":"code","ae16baf1":"code","bf186bb8":"code","38e3c261":"code","b8d0923e":"code","11c72b96":"code","706675ac":"code","7b9b2890":"code","15aab66c":"code","1c44a049":"code","ce343272":"code","905e126c":"code","7166f440":"code","b2d1928c":"code","4d3d9b31":"code","6f52e3e6":"code","016849a3":"code","88160064":"code","ae69d163":"code","b09fafa7":"code","937ea696":"code","c6dfbf79":"code","feb59f22":"code","8f4ba195":"code","63f9c7b1":"code","be6875af":"code","9335e568":"code","fd553e00":"code","acd2ff94":"code","8bd431a3":"code","3b051a82":"code","c43a927d":"code","3467e403":"code","3747c63e":"code","5443bc3e":"code","c36c7e46":"code","6feaf92e":"code","2ca8c184":"code","2ec571d5":"code","3f2bc4f0":"code","91e72505":"code","b5e28373":"code","c460e583":"code","6deea9ae":"code","a7f32ac1":"code","9e5448ed":"code","4c7f64f7":"code","3f9f86e4":"code","3d5d613b":"code","78fdc83d":"code","e1d61877":"code","d9ae7fc4":"code","149ce932":"code","28b2fda5":"code","51514e79":"code","4112edc1":"code","7fea993c":"code","8df4897a":"code","ac826405":"code","ea81b4f3":"code","eb575324":"code","a3976650":"code","ec249678":"code","891bc638":"markdown","952d4179":"markdown","ad50c186":"markdown","101f5a51":"markdown","c89dedb0":"markdown","64400de8":"markdown","ab4815d4":"markdown","f0a3f44b":"markdown","084bff95":"markdown","9ee2424b":"markdown"},"source":{"5aae2b30":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline \nimport matplotlib as mpl \nimport matplotlib.pyplot as plt \nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nmpl.rc(\"axes\",labelsize=16)\nmpl.rc(\"xtick\",labelsize=14)\nmpl.rc(\"ytick\",labelsize=14)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","4487ba93":"train=pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","00197e36":"train.info()","48c5eb79":"test.info()","262916b5":"train.head()","e4adf9e5":"train_label=train.label\ntrain_data=train.drop(\"label\",axis=1)\nprint(train_label)\nprint(train_data)","ae16baf1":"test.head()","bf186bb8":"from xgboost import XGBClassifier\nxgb=XGBClassifier()\nsmldata=train_data[0:200]\nsmllabel=train_label[0:200]\nsmldata2=train_data[200:400]\nsmllabel2=train_label[200:400]\nxgb.fit(smldata,smllabel)\ninitial_predictions=xgb.predict(smldata2)\nprint(initial_predictions[0:5])\nprint(train_label[200:205])","38e3c261":"from sklearn.metrics import mean_absolute_error\ninit_diff=mean_absolute_error(smllabel,initial_predictions)\nprint(np.sqrt(init_diff))","b8d0923e":"train_all=train_data.to_numpy()\nsome_digit= train_data.loc[36000]\nsome_digit_image=some_digit.values.reshape(28,28)\nplt.imshow(some_digit_image,cmap='Greys_r',interpolation=\"nearest\")\nplt.axis(\"off\")\nplt.show()","11c72b96":"train_data.shape","706675ac":"def plot_digit(data):\n    image=data.values.reshape(28,28)\n    plt.imshow(image,cmap='Greys_r',interpolation='nearest')\n    plt.axis(\"off\")\n    \nplot_digit(train_data.loc[1])\nprint(type(train_data.loc[1]))","7b9b2890":"def plot_digits(instances, images_per_row=10, **options):\n    flx=instances.to_numpy()\n    size = 28\n    images_per_row = min(len(instances), images_per_row)\n    images = [instance.reshape(size,size) for instance in flx]\n    n_rows = (len(instances) - 1) \/\/ images_per_row + 1\n    row_images = []\n    n_empty = n_rows * images_per_row - len(instances)\n    images.append(np.zeros((size, size * n_empty)))\n    for row in range(n_rows):\n        rimages = images[row * images_per_row : (row + 1) * images_per_row]\n        row_images.append(np.concatenate(rimages, axis=1))\n    image = np.concatenate(row_images, axis=0)\n    plt.imshow(image, cmap = \"Greys_r\", **options)\n    plt.axis(\"off\")\nplt.figure(figsize=(10,10))\nplot_digits(train_data[5:69],images_per_row=10)","15aab66c":"shuffle_index=np.random.permutation(42000)\ntrain_shuffle,label_shuffle=train_data.loc[shuffle_index],train_label.loc[shuffle_index]","1c44a049":"train_5=(label_shuffle==5)","ce343272":"from sklearn.linear_model import SGDClassifier\nsgd_clf=SGDClassifier(max_iter=5,tol=-np.infty,random_state=17)\nsgd_clf.fit(train_shuffle,train_5)","905e126c":"sgd_clf.predict([some_digit])","7166f440":"from sklearn.model_selection import cross_val_score\ncross_val_score(sgd_clf,train_shuffle,train_5,cv=3,scoring=\"accuracy\")","b2d1928c":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.base import clone\nskfolds=StratifiedKFold(n_splits=3)\n\nfor train_index,test_index in skfolds.split(train_shuffle, train_5):\n    clone_clf=clone(sgd_clf)\n    train_shuffle_folds=train_shuffle.loc[train_index]\n    train_5_folds=train_5.loc[train_index]\n    Test_shuffle_folds=train_shuffle.loc[test_index]\n    Test_5_folds=train_5.loc[test_index]\n    \n    clone_clf.fit(train_shuffle_folds,train_5_folds)\n    pred=clone_clf.predict(Test_shuffle_folds)\n    n_correct=sum(pred==Test_5_folds)\n    print(n_correct\/len(pred))","4d3d9b31":"from sklearn.base import BaseEstimator \nclass Never5Estimator(BaseEstimator):\n    def fit(self,X,y=None):\n        pass\n    def predict(self,X):\n        return np.zeros((len(X),1),dtype=bool)\n","6f52e3e6":"never_5_clf=Never5Estimator()\ncross_val_score(never_5_clf,train_shuffle,train_5,cv=3,scoring=\"accuracy\")","016849a3":"from sklearn.model_selection import cross_val_predict\ntrain_pred=cross_val_predict(sgd_clf,train_shuffle,train_5,cv=3)","88160064":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(train_5,train_pred)","ae69d163":"from sklearn.metrics import precision_score, recall_score\nprecision_score(train_5,train_pred)","b09fafa7":"2809\/(2809+712)","937ea696":"recall_score(train_5,train_pred)","c6dfbf79":"2809\/(2809+986)","feb59f22":"from sklearn.metrics import f1_score\nf1_score(train_5,train_pred)","8f4ba195":"scores=sgd_clf.decision_function([some_digit])\nscores","63f9c7b1":"threshold=0\nsome_digit_pred=(scores >threshold)","be6875af":"some_digit_pred","9335e568":"threshold=140000\nsome_digit_pred=(scores >threshold)\nsome_digit_pred","fd553e00":"scores=cross_val_predict(sgd_clf,train_shuffle,train_5,cv=3,method='decision_function')","acd2ff94":"scores.shape","8bd431a3":"from sklearn.metrics import precision_recall_curve\nprecisions, recalls , thresholds =precision_recall_curve(train_5,scores)\nprint(precisions)\nprint(thresholds)","3b051a82":"def plot_precision_recall_vs_thresholds(precisions,recalls,thresholds):\n    plt.plot(thresholds,precisions[:-1],\"b--\",label=\"Precision\",linewidth=2)\n    plt.plot(thresholds,recalls[:-1],\"g-\",label=\"Recall\",linewidth=2)\n    plt.xlabel(\"Threshold\",fontsize=16)\n    plt.legend(loc=\"upper right\",fontsize=16)\n    plt.ylim([0,1])\n    \nplt.figure(figsize=(14,8))\nplot_precision_recall_vs_thresholds(precisions,recalls,thresholds)\nplt.xlim([-800000,700000])\nplt.show()","c43a927d":"(train_pred==(scores >0)).all()","3467e403":"train_pred_90=(scores > 170000)","3747c63e":"precision_score(train_5,train_pred_90)","5443bc3e":"recall_score(train_5,train_pred_90)","c36c7e46":"def plot_precision_vs_recall(precisions,recalls):\n    plt.plot(recalls,precisions,\"b-\",linewidth=2)\n    plt.xlabel('Recall',fontsize=14)\n    plt.ylabel('Precision',fontsize=14)\n    plt.axis([0,1,0,1])\n    \nplt.figure(figsize=(14,8))\nplot_precision_vs_recall(precisions,recalls)\nplt.title(\"Precision vs Recall Plot\")\nplt.show()","6feaf92e":"from sklearn.metrics import roc_curve\nfpr,tpr, thresholds=roc_curve(train_5,scores)\n","2ca8c184":"def plot_roc_curve(fpr,tpr,label=None):\n    plt.plot(fpr,tpr,linewidth=2,label=label)\n    plt.plot([0,1],[0,1],'r--')\n    plt.axis([0,1,0,1])\n    plt.xlabel('False Positive Rate',fontsize=16)\n    plt.ylabel('True Postive Rate',fontsize=16)\n    \nplt.figure(figsize=(14,8))\nplot_roc_curve(fpr,tpr)\nplt.title('Recieving Operator Characterstic Curve')\nplt.show()","2ec571d5":"from sklearn.metrics import roc_auc_score\nroc_auc_score(train_5,scores)","3f2bc4f0":"from xgboost import XGBClassifier\nxgb_clf=XGBClassifier(n_estimators=10,random_state=17)\nproba_xgb=cross_val_predict(xgb_clf,train_shuffle,train_5,cv=3,method=\"predict_proba\")","91e72505":"scores_xgb=proba_xgb[:,1]\nfpr_xgb,tpr_xgb,thresholds_xgb=roc_curve(train_5,scores_xgb)","b5e28373":"plt.figure(figsize=(14,8))\nplt.plot(fpr,tpr,\"b:\",linewidth=2,label=\"SGD\")\nplot_roc_curve(fpr_xgb,tpr_xgb,\"XGB\")\nplt.legend(loc=\"lower right\",fontsize=16)\nplt.title('Recieving Operator Characterstic Curve')\nplt.show()","c460e583":"roc_auc_score(train_5,scores_xgb)","6deea9ae":"xgb_pred=cross_val_predict(xgb_clf,train_shuffle,train_5,cv=3)\nprecision_score(train_5,xgb_pred)","a7f32ac1":"recall_score(train_5,xgb_pred)","9e5448ed":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\ntrain_scaled=scaler.fit_transform(train_data)\ntest_scaled=scaler.fit_transform(test)","4c7f64f7":"sgd_clf.fit(train_data,train_label)\nsgd_clf.predict([some_digit])","3f9f86e4":"some_digit_scores=sgd_clf.decision_function([some_digit])\nsome_digit_scores","3d5d613b":"np.argmax(some_digit_scores)","78fdc83d":"sgd_clf.classes_[1]","e1d61877":"xgb_clf.fit(train_all,train_label)\nsome_digit=train_all[15030]\nxgb_clf.predict(train_all[34:36])","d9ae7fc4":"cross_val_score(sgd_clf,train_data, train_label,cv=3,scoring=\"accuracy\")","149ce932":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\ntrain_scaled=scaler.fit_transform(train_data.astype(np.float64))\ncross_val_score(sgd_clf,train_scaled,train_label,cv=3,scoring=\"accuracy\")","28b2fda5":"predictions=cross_val_predict(sgd_clf,train_scaled,train_label,cv=3)\nconf_mx=confusion_matrix(train_label,predictions)  ","51514e79":"def plot_confusion_matrix(matrix):\n    fig=plt.figure(figsize=(8,8))\n    ax=fig.add_subplot(111)\n    cax=ax.matshow(matrix)\n    fig.clorbar(cax)","4112edc1":"plt.matshow(conf_mx,cmap=\"Greens_r\")\nplt.show()","7fea993c":"row_sums=conf_mx.sum(axis=1,keepdims=True)\nnorm_conf_mx=conf_mx\/row_sums","8df4897a":"np.fill_diagonal(norm_conf_mx,0)\nplt.matshow(norm_conf_mx,cmap=\"Greens_r\")\nplt.show()","ac826405":"cl_a,cl_b=3,5\nX_aa=train_data[(train_label==cl_a) & (predictions == cl_a)]\nX_ab=train_data[(train_label==cl_a) & (predictions == cl_b)]\nX_ba=train_data[(train_label==cl_b) & (predictions == cl_a)]\nX_bb=train_data[(train_label==cl_b) & (predictions == cl_b)]\n\nplt.figure(figsize=(8,8))\nplt.subplot(221); plot_digits(X_aa[:25], images_per_row=5)\nplt.subplot(222); plot_digits(X_ab[:25], images_per_row=5)\nplt.subplot(223); plot_digits(X_ba[:25], images_per_row=5)\nplt.subplot(224); plot_digits(X_bb[:25], images_per_row=5)\nplt.show()","ea81b4f3":"from sklearn.neighbors import KNeighborsClassifier\n\ntrain_large=(train_label >=7)\ntrain_odd=(train_label % 2==1)\ntrain_multilabel=np.c_[train_large,train_odd]\n\nknn_clf=KNeighborsClassifier()\nknn_clf.fit(train_data,train_multilabel)","eb575324":"knn_clf.predict([some_digit])","a3976650":"noise = np.random.randint(0, 100, (len(train), 784))\nX_train_mod = train_all + noise\nnoise = np.random.randint(0, 100, (len(test), 784))\ntest_all=test.to_numpy()\nX_test_mod = test + noise\ny_train_mod = train\ny_test_mod = test\nX_test_mod.info()","ec249678":"some_index=5500\nplt.subplot(121); plot_digit(X_test_mod.loc[some_index])\nplt.subplot(122); plot_digit(y_test_mod.loc[some_index])\nplt.show()","891bc638":"## <span style= color:Aquamarine>Using KNN Classifier ","952d4179":"# <span style= color:Aquamarine>Introduction\nWhile the MNIST Dataset , has many good notebooks , this notebooks seems to explain some concepts which might be useful for beginners . Have a look!!","ad50c186":"# <span style=color:Coral>Precision Recall Curve\nPrecision-Recall is a useful measure of success of prediction when the classes are very imbalanced. In information retrieval, precision is a measure of result relevancy, while recall is a measure of how many truly relevant results are returned.\n\nThe precision-recall curve shows the tradeoff between precision and recall for different threshold. A high area under the curve represents both high recall and high precision, where high precision relates to a low false positive rate, and high recall relates to a low false negative rate. High scores for both show that the classifier is returning accurate results (high precision), as well as returning a majority of all positive results (high recall).\n\nA system with high recall but low precision returns many results, but most of its predicted labels are incorrect when compared to the training labels. A system with high precision but low recall is just the opposite, returning very few results, but most of its predicted labels are correct when compared to the training labels. An ideal system with high precision and high recall will return many results, with all results labeled correctly.\n\n![image.png](attachment:image.png)","101f5a51":"# <span style= color:skyblue >Confusion Matrix\n","c89dedb0":"# <span style= color:Green>Plotting Digits ","64400de8":"## <span style=color:Purple>Using SGD Classifier","ab4815d4":"# <span style= color:Thistle>Precision vs Recall Plot","f0a3f44b":"# <span style= color:Maroon>Recieving Operator Characterstic Curve \nAUC - ROC curve is a performance measurement for classification problem at various thresholds settings. ROC is a probability curve and AUC represents degree or measure of separability. It tells how much model is capable of distinguishing between classes. Higher the AUC, better the model is at predicting 0s as 0s and 1s as 1s. By analogy, Higher the AUC, better the model is at distinguishing between patients with disease and no disease.\nThe ROC curve is plotted with TPR against the FPR where TPR is on y-axis and FPR is on the x-axis.\n![image.png](attachment:image.png)\n![image.png](attachment:image.png)\n![image.png](attachment:image.png)","084bff95":"# <span style= color:Navy>Confusion Matrix Plot\n","9ee2424b":"# <span style= color:Orange>Adding Noise to Images "}}