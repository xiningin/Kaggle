{"cell_type":{"e50e273e":"code","51fc2378":"code","314dece6":"code","c86ebbaf":"code","152ef491":"code","88faab7c":"code","e84dad3e":"code","81877bb9":"code","e5e39ed2":"code","b68b177c":"code","ce808b47":"code","9a2339b2":"code","b40a9f9f":"code","c19fa84d":"code","9f4a2d86":"code","de601e93":"code","12394c3f":"code","9cd09b81":"markdown","9497defb":"markdown","e1e97612":"markdown"},"source":{"e50e273e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","51fc2378":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","314dece6":"#reading data\ndata = pd.read_csv('\/kaggle\/input\/usa-cers-dataset\/USA_cars_datasets.csv')\nprint(data.shape)\ndata.head()","c86ebbaf":"#drop un-necessary columns\ndata = data.drop(columns=['Unnamed: 0', 'vin','lot','country','condition'], axis=1)\ndata.describe()","152ef491":"#check for null values\ndata.isnull().sum()","88faab7c":"#check duplicates\nduplicate = data[data.duplicated()]\nduplicate.shape","e84dad3e":"data.year.value_counts()","81877bb9":"#some rows have price and mileage zero, lets filter them\ndata = data[data['price']!=0]\ndata = data[data['mileage']!=0]\n\ndata = data[data['year']>2000]","e5e39ed2":"for brand in data[\"brand\"].unique():\n    print(brand, end=',\\t')","b68b177c":"# Plotting a Histogram for brands and number of cars\ndata['brand'].value_counts().plot(kind='bar', figsize=(20,5))\nplt.title(\"Number of cars by brand\")\nplt.ylabel(\"Number of cars\")\nplt.xlabel(\"Brand\");","ce808b47":"# Plotting a scatter plot for brand and price\nfig, ax = plt.subplots(figsize=(30,6))\nax.scatter(data['brand'], data['price'])\nax.set_xlabel('Brand')\nax.set_ylabel('Price');","9a2339b2":"print('Highest price entry \\n', data[data.price == data.price.max()])","b40a9f9f":"# Plot Bar chart of number of cars in each year\ndata['year'].value_counts().nlargest(10).plot(kind='bar', figsize = (20,5))\nplt.title(\"Number of cars vs year\")\nplt.ylabel(\"Number of cars\")\nplt.xlabel(\"Year\");","c19fa84d":"# Plot Bar chart of number of cars vs color\ndata['color'].value_counts().nlargest(20).plot(kind='bar', figsize = (20,5))\nplt.title(\"Number of cars vs year\")\nplt.ylabel(\"Number of cars\")\nplt.xlabel(\"Color\");","9f4a2d86":"## Preprocess data\nX = data.iloc[:, [1,2,3,4,5,6,7]].values  # input columns are: brand, model, year, title_status, mileage, color, state\ny = data.iloc[:, 0].values # output columns are: price\n\n#Encoding text columns\nprint('Input row before encoding:', X[0])\n\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nX[:,1]=le.fit_transform(X[:,1]) \nX[:,3]=le.fit_transform(X[:,3])\nX[:,5]=le.fit_transform(X[:,5])\nX[:,6]=le.fit_transform(X[:,6])\nX[:,0]=le.fit_transform(X[:,0])\n\nprint('Input row after encoding:', X[0])","de601e93":"# Split dataset into train and test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)\n\n# Training the Random Forest Regression model on the whole dataset\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 1000, random_state = 0)\nregressor.fit(X_train, y_train)\n\ny_pred = regressor.predict(X_test)","12394c3f":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","9cd09b81":"# **Data Cleaning**","9497defb":"As you can see, it's showing min price and mileage zero,\n    1. Data contains some zero values for price and mileage\n    2. Some row of year 1973 is here","e1e97612":"# Predict Car Price - using RandomForestRegressor"}}