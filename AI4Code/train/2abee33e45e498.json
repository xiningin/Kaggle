{"cell_type":{"24c817f7":"code","29322f67":"code","821ee1c5":"code","5637f668":"code","2ad94ee6":"code","9070c20a":"code","39d02658":"code","80b51650":"code","65762b2e":"code","06c0875a":"code","8b665bda":"code","2edcd9fb":"code","23df5bbf":"code","11647659":"code","7c2991d3":"code","8c0de16e":"code","5a2b881e":"code","64e6697f":"code","63945d27":"code","c4496f2d":"code","ad954ff1":"code","e093d1fc":"code","15b3ce88":"code","395dd039":"code","fd6be289":"code","b0e706a7":"code","4db548ea":"code","5c3c3503":"code","4e5b9c15":"code","3f9cfef3":"code","76ad85d5":"code","4c6c5cf4":"code","d35ab9a8":"code","0ddf9248":"code","fd08f57b":"code","9f51da50":"code","7c744fba":"code","c262e516":"code","0afbe697":"code","615b162a":"markdown","bbce10d9":"markdown","399db3dc":"markdown","75155fd2":"markdown","a47694ae":"markdown","ba6341f5":"markdown","ed52084c":"markdown","9bcc0649":"markdown"},"source":{"24c817f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","29322f67":"tel = pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","821ee1c5":"tel.info()","5637f668":"tel.describe()","2ad94ee6":"tel.head()","9070c20a":"tel.corr()","39d02658":"print(tel.isnull().sum())","80b51650":"tel.columns","65762b2e":"#Replacing spaces with null values in total charges column\ntel['TotalCharges'] = tel[\"TotalCharges\"].replace(\" \",np.nan)\n\n#Dropping null values from total charges column which contain .15% missing data \ntel = tel[tel[\"TotalCharges\"].notnull()]\ntel = tel.reset_index()[tel.columns]\n\n#convert to float type\ntel[\"TotalCharges\"] = tel[\"TotalCharges\"].astype(float)","06c0875a":"gender_num = pd.get_dummies(tel['gender'],drop_first=True,prefix='Gender')\nDependents_num = pd.get_dummies(tel['Dependents'],drop_first=True,prefix='Dependents')\nPartner_num = pd.get_dummies(tel['Partner'],drop_first=True,prefix='Partner')\nPhoneService_num = pd.get_dummies(tel['PhoneService'],drop_first=True,prefix='PhoneService')\nOnlineBackup_num = pd.get_dummies(tel['OnlineBackup'],drop_first=True,prefix='OnlineBackup')\nDeviceProtection_num = pd.get_dummies(tel['DeviceProtection'],drop_first=True,prefix='DeviceProtection')\nTechSupport_num = pd.get_dummies(tel['TechSupport'],drop_first=True,prefix='TechSupport')\nStreamingTV_num = pd.get_dummies(tel['StreamingTV'],drop_first=True,prefix='StreamingTV')\nStreamingMovies_num = pd.get_dummies(tel['StreamingMovies'],drop_first=True,prefix='StreamingMovies')\nContract_num = pd.get_dummies(tel['Contract'],drop_first=True,prefix='Contract')\nPaperlessBilling_num = pd.get_dummies(tel['PaperlessBilling'],drop_first=True,prefix='PaperlessBilling')\nMultipleLines_num = pd.get_dummies(tel['MultipleLines'],drop_first=True,prefix='MultipleLines')\nInternetService_num = pd.get_dummies(tel['InternetService'],drop_first=True,prefix='InternetService')\nPaymentMethod_num = pd.get_dummies(tel['PaymentMethod'],drop_first=True,prefix='PaymentMethod')\nChurn_num = pd.get_dummies(tel['Churn'],drop_first=True,prefix='Churn')\nOnlineSecurity_num = pd.get_dummies(tel['OnlineSecurity'],drop_first=True,prefix='OnlineSecurity')","8b665bda":"tel = pd.concat([tel,gender_num,Partner_num,Dependents_num,\n       PhoneService_num,MultipleLines_num,InternetService_num,\n       OnlineSecurity_num, OnlineBackup_num, DeviceProtection_num, TechSupport_num,\n       StreamingTV_num, StreamingMovies_num, Contract_num, PaperlessBilling_num,\n       PaymentMethod_num,Churn_num],axis=1)","2edcd9fb":"tel.drop(['gender','Partner','Dependents',\n       'PhoneService','MultipleLines','InternetService',\n       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n       'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',\n       'PaymentMethod','Churn'],axis=1,inplace=True)","23df5bbf":"tel.drop(['customerID'],axis=1,inplace=True)","11647659":"te = tel[tel.columns[-1]]","7c2991d3":"te","8c0de16e":"tr = tel[tel.columns[:-1]]","5a2b881e":"tr.head()","64e6697f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(tr, te, test_size=0.30, random_state=101)","63945d27":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)","c4496f2d":"rfc_pred = rfc.predict(X_test)","ad954ff1":"from sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_test,rfc_pred))\nprint('\\n')\nprint(classification_report(y_test,rfc_pred))","e093d1fc":"from sklearn.svm import SVC\nsvm_model = SVC()\nsvm_model.fit(X_train,y_train)","15b3ce88":"svm_predictions = svm_model.predict(X_test)","395dd039":"print(confusion_matrix(y_test,svm_predictions))\nprint('\\n')\nprint(classification_report(y_test,svm_predictions))","fd6be289":"from sklearn.model_selection import GridSearchCV\nparam_grid = {'C': [0.1,1, 10, 100, 1000], 'gamma': [1,0.1,0.01,0.001,0.0001], 'kernel': ['rbf']} \ngrid = GridSearchCV(SVC(),param_grid,refit=True,verbose=3)","b0e706a7":"grid.fit(X_train,y_train)","4db548ea":"grid.best_params_","5c3c3503":"grid.best_estimator_","4e5b9c15":"grid_predictions = grid.predict(X_test)","3f9cfef3":"print(confusion_matrix(y_test,grid_predictions))\nprint('\\n')\nprint(classification_report(y_test,grid_predictions))","76ad85d5":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(tel.drop('Churn_Yes',axis=1))\nscaled_features = scaler.transform(tel.drop('Churn_Yes',axis=1))","4c6c5cf4":"df_feat = pd.DataFrame(scaled_features,columns=tel.columns[:-1])\ndf_feat.head()","d35ab9a8":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df_feat,tel['Churn_Yes'],test_size=0.30, random_state =101)","0ddf9248":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)","fd08f57b":"print(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","9f51da50":"error_rate = []\n\n# Will take some time\nfor i in range(1,40):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","7c744fba":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","c262e516":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=24)\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)","0afbe697":"print(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","615b162a":"# Grid Search","bbce10d9":"# Random forest","399db3dc":"As we can there is no null element in any column.","75155fd2":"# Scaling the data for KNN","a47694ae":"\"Predict behavior to retain customers. You can analyze all relevant customer data and develop focused customer retention programs.\" [IBM Sample Data Sets]\n\n# Content\nEach row represents a customer, each column contains customer\u2019s attributes described on the column Metadata.\n\nThe data set includes information about:\n\nCustomers who left within the last month \u2013 the column is called Churn\nServices that each customer has signed up for \u2013 phone, multiple lines, internet, online security, online backup, device protection, tech support, and streaming TV and movies\nCustomer account information \u2013 how long they\u2019ve been a customer, contract, payment method, paperless billing, monthly charges, and total charges\nDemographic info about customers \u2013 gender, age range, and if they have partners and dependents\n# Inspiration\nTo explore this type of models and learn more about the subject.","ba6341f5":"Changing the categorical data into numeric data","ed52084c":"## Data Analysis","9bcc0649":"# SVM"}}