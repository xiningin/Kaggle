{"cell_type":{"52ab2e58":"code","56a0c796":"code","bd996ce8":"code","8b8c2948":"code","a5bc20ce":"code","995c4089":"code","74c66e6c":"code","493af333":"code","2c6b84ec":"code","852a5326":"code","7d27dbde":"code","ef358024":"code","43a2700b":"code","1257b399":"code","c5283bec":"code","12e9e84f":"markdown","abae06c2":"markdown","d5c6ef75":"markdown","1504bd2e":"markdown","942f0fdf":"markdown","77f071de":"markdown","cd93304a":"markdown","548501ec":"markdown","60804170":"markdown","cc0b65e2":"markdown","1c5fee0c":"markdown","9f9cbd3f":"markdown","49110fbd":"markdown","5623ad4a":"markdown","a2a368c2":"markdown","c796dac3":"markdown","9d955ece":"markdown","56f6b601":"markdown","69d7f18d":"markdown"},"source":{"52ab2e58":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nprint('All libraries have been imported.')","56a0c796":"filepath = '..\/input\/students-performance-in-exams\/StudentsPerformance.csv'\nstudent = pd.read_csv(filepath)\n\nstudent.head()","bd996ce8":"student.shape","8b8c2948":"student.dtypes","a5bc20ce":"student.columns = ['gender', 'race', 'parent_education', 'lunch', 'test_prep', 'math_score', 'reading_score', 'writing_score']\n\nstudent.head()","995c4089":"student.isnull().sum()","74c66e6c":"student.describe()","493af333":"# Framework for subplots and subplot titles.\nfig, axes = plt.subplots(nrows = 1, ncols = 3, figsize = (20, 5))\nchart_titles = ['Math Score Distribution', 'Reading Score Distribution', 'Writing Score Distribution']\n\n# Plot charts.\nfor col, ax, chart_title in zip(student.columns[-3:], axes.flatten(), chart_titles):\n    sns.distplot(student[col], norm_hist = True, ax = ax, kde = False).set_title(chart_title, fontsize = 14)\n    ax.set(xlabel = 'Score')\n    \n# Add gridlines to all plots from this point forward.\nplt.rcParams['axes.grid'] = True","2c6b84ec":"for col in student.columns[:5]:\n    print('\\n' + '-'*50)       # Serves as a divider between each column summary.\n    print(col.upper() + ' COLUMN SUMMARY:\\n') # Indicates which column is being summarized in each section.\n    print(student[col].value_counts())","852a5326":"# Framework and titles for subplots.\nfig, axes = plt.subplots(nrows = 3, ncols = 2, figsize = (15, 15))\nchart_titles = ['Gender (Total: 1,000)', 'Race (Total: 1,000)', 'Parental Education (Total: 1,000)', 'Lunch (Total: 1,000)', 'Test Preparation (Total: 1,000)']\n\n# Plot charts.\nfor col, ax, chart_title in zip(student.columns[:5], axes.flatten(), chart_titles):\n    sns.countplot(y = str(col), ax = ax, data = student).set_title(chart_title, fontsize = 14)\n    ax.set(xlabel = 'Count', ylabel = col.replace('_', ' ').title())\nfig.delaxes(axes[2,1]) # Delete extra plot, only needed 5.\n\n# Adjust spacing.\nplt.subplots_adjust(wspace = 0.3, hspace = 0.3)","7d27dbde":"# New col for composite test score averages.\nstudent['composite'] = student.mean(axis = 1).round(2)\n\nstudent.head()","ef358024":"sns.distplot(student.composite, norm_hist = True, kde = False)\nplt.title('Composite Score Distribution')\nplt.xlabel('Score')","43a2700b":"student = student.drop(columns = ['math_score', 'reading_score', 'writing_score'])\nstudent.head()","1257b399":"# Grouped-by summary statistics\nfor col in student.columns[:5]:\n    print('-'*50)\n    print(col.upper() + ' COLUMN STATISTICAL SUMMARY:\\n')\n    print(student.groupby(col).describe())","c5283bec":"# Framework and titles for subplots.\nfig, axes = plt.subplots(nrows = 3, ncols = 2, figsize = (15, 20))\nchart_titles = ['Composite Test Score Avg.\\nby Gender', 'Composite Test Score Avg.\\nby Race','Composite Test Score Avg.\\nby Level of Parental Education',\n                'Composite Test Score Avg.\\nby Lunch Type', 'Composite Test Score Avg.\\nby Status of Test Prep Course']\n\n# Plot charts.\nfor col, ax, chart_title in zip(student.columns[:5], axes.flatten(), chart_titles):\n    sns.boxplot(x = str(col), y = 'composite', ax = ax, data = student).set_title(chart_title, fontsize = 14)\n    ax.tick_params(axis = 'x', labelrotation = 45)\n    ax.set(xlabel = 'Count', ylabel = col.replace('_', ' ').title())\nfig.delaxes(axes[2,1]) # Delete extra plot, only need 5.\n\n# Adjust spacing.\nplt.subplots_adjust(wspace = 0.2, hspace = 0.55)","12e9e84f":"Let's go ahead and create some bar charts to gain a more intuitive understanding of each column's distribution:","abae06c2":"Now, let's look a bit more into the categorical data. The first thing we will do is look at the value counts for each column:","d5c6ef75":"The dimensions of this DataFrame are 1,000 rows by 8 columns. This means that the DataFrame contains data on 1,000 different test-takers, each of whom has data recorded on them in 8 different categories.","1504bd2e":"In this Jupyter Noteboook, we will be exploring how various factors affect exam performance. We will do this by using Seaborn and Matplotlib to create informative visualizations that show the relationship between various categorical variables and exam performance. \n\nFirst, let's import some necessary libraries:","942f0fdf":"Next, let's see if there are any missing values we need to take care of:","77f071de":"Next, we will import the dataset and preview it to see what we're working with:","cd93304a":"# Exam Performance Visualizations with Seaborn and Matplotlib","548501ec":"All of the data is in the format we need it to be; categorical data (gender, race, parental level of education, lunch, and test preparation) are stored as strings, while numerical data (math, reading, and writing test scores) are stored as integers.\n\nNow let's clean up the DataFrame so it is easier to work with. First, we will rename the columns with more accessible names:","60804170":"Luckily, there are no missing values we need to take care of.\n\nIt seems that these are all the adjustments we need to make. Now let's go ahead and learn more about the data itself. We'll start by looking at some descriptive statistics about the numerical values:","cc0b65e2":"And we will create a histogram like we previously did for the individual test subject scores: ","1c5fee0c":"Before we do some cleaning of the data, let's look at the dtypes:","9f9cbd3f":"Some important statistics that we can draw from both the table and histograms above are the following:\n- Math: Mean score of 66.10 with a standard deviation of 15.16\n- Reading: Mean score of 69.17 with a standard deviation of 14.60\n- Writing: Mean score of 68.05 with a standard deviation of 15.20","49110fbd":"These box and whisker plots are extremely helpful because they allow us to compare side by side differences in composite test scores for a given category. As such, it becomes evident that certain categorical attributes indicate likely outcomes for composite test score averagers. A specific example can be observed in the last chart, which compares people who completed a test prep course versus people who did not. It is evident that people who took the test prep course on average scored higher than those who didn't; the former scored an average of 73% while the latter scored an average of 65%. The same methodolgy can be used to examine the other box and whiskerp plots, further revealing how various categorical attributes lead to higher average test scores.","5623ad4a":"Before creating visualizations showing the relationship between categorical variables and composite test scores, let's look at summary statistics when grouped by each categorical variable:","a2a368c2":"Looking at the bar charts above allows us to actually see the distribution of various categorical values in the DataFrame.\n\nNow let's explore the relationship between our categorical variables and the test-taker's respective test scores. To make this simpler, we will instead use a composite test score average for our analysis. However, the DataFrame does not already contain this data, so we will need to make a new column for composite scores:","c796dac3":"Now that we have the composite test score column, we won't be needing the individual test score columns so let's go ahead and drop them from the DataFrame:","9d955ece":"Now let's look at the shape of the DataFrame:","56f6b601":"Let's create some visualizations which show the relationships between various categorical variables and the test-takers' composite test scores. Box and whisker plots would likely be the best choice here, because we are showing numerical distributions by category.","69d7f18d":"Next, let's create visualizations to get a more intuitive understanding of the above statistics. Histograms are perfect for understanding distributions amongst a group -- in this case, we want to understand the distribution of test scores among the 1,000 test-takers for each test subject."}}