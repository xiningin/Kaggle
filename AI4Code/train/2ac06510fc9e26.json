{"cell_type":{"1409b45b":"code","a77fe4b4":"code","24da2fa9":"code","3953bf21":"code","07db5e3e":"code","b4816f22":"code","41a0f8aa":"code","afed5873":"code","26fa3fcc":"code","71da3cda":"code","3700e3a7":"code","6f65b925":"code","c69db03c":"code","6decdf70":"code","7d394502":"code","6eb3880e":"code","b8c986df":"code","03c0244e":"markdown","20cfd572":"markdown"},"source":{"1409b45b":"from sklearn.cluster import DBSCAN \nfrom sklearn.preprocessing import StandardScaler\nfrom yellowbrick.cluster import KElbowVisualizer\nfrom sklearn.cluster import AgglomerativeClustering\nimport scipy.cluster.hierarchy as sch\nimport sklearn.metrics as sk\nfrom sklearn.cluster import KMeans\nfrom math import sqrt\nfrom sklearn import preprocessing\nimport matplotlib.pylab as pylab\nimport matplotlib.pyplot as plt\nfrom pandas import get_dummies\nimport matplotlib as mpl\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport warnings\nimport sklearn\nimport scipy\nimport numpy\nimport json\nimport sys\nimport csv\nimport os","a77fe4b4":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","24da2fa9":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3953bf21":"df=pd.read_csv(\"\/kaggle\/input\/sonaralldata\/sonar.all-data.csv\")","07db5e3e":"df.head()","b4816f22":"df.dtypes","41a0f8aa":"#correltaion matrix\/heatmap\ndf.corr()\nf,ax=plt.subplots(figsize=(10,10))\nsns.heatmap(df.corr())\nplt.title('heat map')","afed5873":"x_onehot=pd.get_dummies(df)","26fa3fcc":"#standardising data\nx_scale = StandardScaler().fit_transform(x_onehot)","71da3cda":"#elbow method to find n clusters\nwcss = []\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)\n    kmeans.fit(x_scale)\n    wcss.append(kmeans.inertia_)\nplt.plot(range(1, 11), wcss)\nplt.title('Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')\nplt.show()","3700e3a7":"#check silhouette score\n# Instantiate a scikit-learn K-Means model\nmodel = KMeans(random_state=0)\n\n# Instantiate the KElbowVisualizer with the number of clusters and the metric \nvisualizer = KElbowVisualizer(model, k=(2,10), metric='silhouette', timings=False)\n\n# Fit the data and visualize\nvisualizer.fit(x_scale)    \nvisualizer.poof()   ","6f65b925":"#applying kmeans algorith\nkmeans = KMeans(n_clusters=2, init='k-means++', max_iter=300, n_init=10, random_state=0)\npred_y = kmeans.fit_predict(x_scale)\nplt.scatter(x_scale[:,0],x_scale[:,1],c=pred_y,cmap='viridis')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red')\nplt.show()\n#calculating davies bouldin score\nsklearn.metrics.davies_bouldin_score(x_scale,pred_y)","c69db03c":"x=df.drop(['R'],axis=1)","6decdf70":"#comparisons\nx_kmeans=x.copy()\nx_kmeans['R']=pred_y\nx_kmeans.groupby('R').mean()\ndf.groupby('R').mean()","7d394502":"#hierarchical clustering-plotting dendrogram\ndendrogram = sch.dendrogram(sch.linkage(x_scale, method='ward'))","6eb3880e":"#applying agglomerative clustering algorithm\nmodel = AgglomerativeClustering(n_clusters=2, affinity='euclidean', linkage='ward')\nmodel.fit_predict(x_scale)\nlabels = model.labels_\n#plotting clusters on scatter plot\nplt.figure(figsize=(10, 7))\nplt.scatter(x_scale[labels==0, 0], x_scale[labels==0, 1], s=50, marker='o', color='red')\nplt.scatter(x_scale[labels==1, 0], x_scale[labels==1, 1], s=50, marker='o', color='blue')\nsklearn.metrics.davies_bouldin_score(x_scale,labels)","b8c986df":"x_hrcl=x.copy()\nx_hrcl['R']=labels\nx_hrcl.groupby('R').mean()\ndf.groupby('R').mean()\n","03c0244e":"**SONAR**","20cfd572":"(please upvote if you like )"}}