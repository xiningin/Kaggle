{"cell_type":{"edd8d9d8":"code","43865f76":"code","986335d2":"code","6a6ed165":"code","09926c15":"code","a97ac27a":"code","962a3510":"code","a1f637f0":"code","7e7c4db6":"code","6d46931c":"code","21686b08":"code","91accf44":"code","e53f979c":"code","cc535330":"code","2ec38ad6":"code","d8dbbe86":"code","c9b8ef41":"code","a2f01f1c":"code","33348fd2":"code","7b99c47d":"code","0e102ff4":"code","d0bbceb1":"code","6ae7ce49":"code","f5643c07":"code","91e524fc":"code","a0a4939a":"code","a1910c95":"markdown","0eb717a2":"markdown","486fb388":"markdown","3a8c2766":"markdown","6db7fdab":"markdown","7b3e4c7b":"markdown","01750e41":"markdown","eaac6b0e":"markdown","ed0ff261":"markdown","5db563d8":"markdown","3f205d42":"markdown","c0aff5ac":"markdown","f1ce834d":"markdown","87aaed8d":"markdown","572ed8f7":"markdown","67bf8400":"markdown","2903a5d3":"markdown","490cd621":"markdown","e8f4f6e8":"markdown","4868bc51":"markdown","2938b8a1":"markdown","3df39de7":"markdown"},"source":{"edd8d9d8":"# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os, sys\n","43865f76":"pd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)\nplt.rcParams[\"figure.figsize\"] = [20,15]","986335d2":"import os\npath = '\/kaggle\/input'\nfor dirname, _, filenames in os.walk(path):\n    Data = []\n    rows = 0\n    for filename in filenames:\n        p = os.path.join(dirname, filename)\n        df = pd.read_csv(p)\n        rows += df.shape[0]\n    \n        Data.append(df)\n    \n    \nfor df in Data:\n    df.columns = ['Inning', 'Over', 'Batting Team', 'Batsman', 'Non-Striker', 'Baller', 'Runs', 'Extra']\n    \ncombine_data = pd.concat(Data).reset_index(drop=True)","6a6ed165":"combine_data.shape","09926c15":"combine_data.head()","a97ac27a":"combine_data.isnull().sum()","962a3510":"combine_data.describe()","a1f637f0":"Four = []\nsix = []\nfor x in combine_data['Runs']:\n    if x == 4:\n        Four.append(1)\n        six.append(0)\n    elif x == 6:\n        Four.append(0)\n        six.append(1)\n    else:\n        Four.append(0)\n        six.append(0)\ncombine_data[\"Four\"] = Four\ncombine_data['Six'] = six","7e7c4db6":"combine_data.head()","6d46931c":"batsman_group = combine_data.groupby(\"Batsman\").sum()\nbatsman_group = batsman_group.sort_values(by='Runs', ascending=False).drop(\"Inning\", axis=1).reset_index()\nbatsman_group.head()","21686b08":"Top_100_batsman = batsman_group.head(100)","91accf44":"top_runs_plot = sns.barplot(x = \"Batsman\", y = \"Runs\", data=Top_100_batsman)\ntop_runs_plot.set_xticklabels(top_runs_plot.get_xticklabels(), rotation=90)\nplt.title(\"Top 100 Batsman\")\nplt.show()","e53f979c":"top_runs_plot = sns.barplot(x = \"Batsman\", y = \"Six\", data=Top_100_batsman)\ntop_runs_plot.set_xticklabels(top_runs_plot.get_xticklabels(), rotation=90)\nplt.title(\"Top 100 Batsman\")\nplt.show()","cc535330":"Ball_Bat_Stats = pd.pivot_table(combine_data, values=\"Runs\", index=\"Baller\", columns=\"Batsman\", aggfunc=np.sum)\nBall_Bat_Stats.shape","2ec38ad6":"Na_col = (Ball_Bat_Stats.isnull().sum()\/Ball_Bat_Stats.shape[0])*100\ncolumn_to_drop = list(Na_col[Na_col.values >= 70].index)\nBall_Bat_Stats.drop(labels = column_to_drop,axis =1,inplace=True)        \nBall_Bat_Stats.info()","d8dbbe86":"Na_Rows = ((Ball_Bat_Stats.isnull().sum(axis=1))\/Ball_Bat_Stats.shape[1])*100\nrows_to_drop = list(Na_Rows[Na_Rows.values >= 10].index)\nBall_Bat_Stats.drop(labels = rows_to_drop, axis=0, inplace=True)        ","c9b8ef41":"Ball_Bat_Stats.fillna(0, inplace=True)\nBall_Bat_Stats","a2f01f1c":"sns.heatmap(Ball_Bat_Stats, cmap=\"YlGnBu\")\nplt.show()","33348fd2":"Baller_group = combine_data.groupby(\"Baller\").sum()\nBaller_group = Baller_group.sort_values(by=\"Runs\", ascending=False)\nBaller_group_Top_50 = Baller_group.head(50).reset_index()\nBaller_group_Top_50.head()","7b99c47d":"Top_ballers_plot = sns.barplot(x = \"Baller\", y = \"Runs\", data=Baller_group_Top_50)\nTop_ballers_plot.set_xticklabels(Top_ballers_plot.get_xticklabels(), rotation=90)\nplt.show()","0e102ff4":"combine_data[\"Boundries\"] = combine_data[\"Four\"]+combine_data[\"Six\"]\ncombine_data.head()","d0bbceb1":"Ball_Bat_boundries_stat = pd.pivot_table(combine_data, values=\"Boundries\", index=\"Baller\", columns=\"Batsman\", aggfunc=np.sum)\nNa_cols = Ball_Bat_boundries_stat.isnull().sum()\/ Ball_Bat_boundries_stat.shape[0]*100\ncolumns_to_drop = list(Na_cols[Na_cols.values >= 70].index)\nBall_Bat_boundries_stat.drop(labels = columns_to_drop, axis=1, inplace=True)\nBall_Bat_boundries_stat.shape","6ae7ce49":"Na_Row = Ball_Bat_boundries_stat.isnull().sum(axis=1)\/Ball_Bat_boundries_stat.shape[1]*100\nrows_to_drop =list(Na_Row[Na_Row.values >= 10].index)\nBall_Bat_boundries_stat.drop(labels = rows_to_drop, axis=0, inplace=True)\nBall_Bat_boundries_stat.fillna(0, inplace=True)\nBall_Bat_boundries_stat.head()","f5643c07":"sns.heatmap(Ball_Bat_boundries_stat, cmap=\"Blues\")\nplt.show()","91e524fc":"Top_batsman_sixes = combine_data.groupby(\"Batsman\").sum()\nTop_batsman_sixes = Top_batsman_sixes.sort_values(by= \"Six\", ascending=False)\nTop_batsman_sixes = Top_batsman_sixes.head(50).reset_index()\nTop_batsman_sixes.head()","a0a4939a":"import squarify \nsquarify.plot(sizes=Top_batsman_sixes[\"Six\"], label=Top_batsman_sixes[\"Batsman\"], alpha=0.6 )","a1910c95":"#### Lets Plot tree-map and find the amount of sixes score by top batsman","0eb717a2":"#### Group data for batsman and calculate mesures(Runs, Fours, Sixes, Extra)","486fb388":"#### Import files from the path and concat them to make one single file ","3a8c2766":"#### Performance of Baller against batsman ","6db7fdab":"#### Lets observe one more thing which batsman score more runs in boundaries obivously he is Gayle but oberve against which baller he score more boundaries.","7b3e4c7b":"-  Above plot is complicated to observe but after observing carefully we can say that sixer king gayle score more boundries against `P chawla, P Kumar, JD Unadkat, B kumar, AD russell`\n-  Dhoni score more score against the fast ballers and also score more boundries against on of the world fastest baller `DW steyn`","01750e41":"From above analysis `Virat Kohli` is top scorer from all IPL seasons. If we observe top 10 batsman 8 out of those are Indians","eaac6b0e":"#### Now we are repeating the above data cleaning code ","ed0ff261":"-  We obesrve that `Piyush chawala, Harbhajan Singh, A mishra` are spinners and they consume more runs. Probably they palays more matches also we will oberve that later. Above plot show th baller and their run consumption.\n-  One more obervations their are more spinner than pacer who consume more runs.","5db563d8":"#### Lets find out player who score more sixes","3f205d42":"### Some observation related to baller performance ","c0aff5ac":"-  Remove the columns(batsman) which has more than 70% of null values. We are removing the player from column who score less against any baller.","f1ce834d":"Add two extra columns for `Four` and `Six`","87aaed8d":"#### Observations from above heat map\n-  `Gayle` score more runs against `B Kumar, Chawla, P Kumar, Harbhajan Singh` \n-  `Suresh Raina` Play well against spinner you can see he score more against `Harbhajan and Piyush Chawala`\n-  If we observe the performance of `MS Dhoni` he played well against pacer as compare to spinner","572ed8f7":"We can clearly see that size of `Gayle` in above tree map is bigger that means he score more sixes thatn anyone followed by `AD de, MS Dhoni, Virat Kohali`","67bf8400":"-  Remove the rows which has more than 10 percent of null value i.e. we are removing the baller who played less.","2903a5d3":"It is not possible to plot all batsman scored run so we plot top 100 batsman","490cd621":"Check for diamentions of the file","e8f4f6e8":"-  Create pivot table for the baller and batsman with runs as value","4868bc51":"#### Create heat map for Baller Vs Batsman","2938b8a1":"Check for null values","3df39de7":"-  Replace NaN values with `0`."}}