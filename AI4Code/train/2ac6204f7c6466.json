{"cell_type":{"51dc843a":"code","55f5b993":"code","642bf1c6":"code","bd713052":"code","f813fdb0":"code","2e8b9718":"code","63d8d9cd":"code","5f8e1de4":"code","74c6d65b":"code","477cc8d3":"code","b5ea4312":"code","bab609e4":"code","395679b1":"code","22683c40":"code","ad7b6617":"code","7561e503":"code","aeaba3b9":"code","7da240e5":"code","2f835f57":"code","8b3e0e7e":"code","7778ca00":"markdown","c2ef0b61":"markdown","5fd03931":"markdown","44577b4e":"markdown","8627d2e1":"markdown"},"source":{"51dc843a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport io\nimport requests\nimport re\nimport warnings\nimport os\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.io as pio\npio.templates\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-notebook')\nfrom matplotlib.ticker import StrMethodFormatter\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelBinarizer\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\nprint(os.listdir(\"..\/input\"))","55f5b993":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","642bf1c6":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","bd713052":"train_data.columns","f813fdb0":"gender_data = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ngender_data.head()","2e8b9718":"gender_data.columns","63d8d9cd":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women survived:\", rate_women)","5f8e1de4":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men survived:\", rate_men)","74c6d65b":"data = [train_data, test_data]\nfor dataset in data:\n    mean = train_data[\"Age\"].mean()\n    std = test_data[\"Age\"].std()\n    is_null = dataset[\"Age\"].isnull().sum()\n    # compute random numbers between the mean, std and is_null\n    rand_age = np.random.randint(mean - std, mean + std, size = is_null)\n    # fill NaN values in Age column with random values generated\n    age_slice = dataset[\"Age\"].copy()\n    age_slice[np.isnan(age_slice)] = rand_age\n    dataset[\"Age\"] = age_slice\n    dataset[\"Age\"] = train_data[\"Age\"].astype(int)","477cc8d3":"survived = 'survived'\nnot_survived = 'not survived'\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(16, 8))\nwomen = train_data[train_data['Sex']=='female']\nmen = train_data[train_data['Sex']=='male']\nax = sns.distplot(women[women['Survived']==1].Age.dropna(), bins=18, label = survived, ax = axes[0], kde =False, color=\"green\")\nax = sns.distplot(women[women['Survived']==0].Age.dropna(), bins=40, label = not_survived, ax = axes[0], kde =False, color=\"red\")\nax.legend()\nax.set_title('Female')\nax = sns.distplot(men[men['Survived']==1].Age.dropna(), bins=18, label = survived, ax = axes[1], kde = False, color=\"green\")\nax = sns.distplot(men[men['Survived']==0].Age.dropna(), bins=40, label = not_survived, ax = axes[1], kde = False, color=\"red\")\nax.legend()\n_ = ax.set_title('Male');","b5ea4312":"df = pd.read_csv('..\/input\/titanic\/train.csv')\nfig = px.scatter_3d(df, x='Name', y='Sex', z='Age',\n                    color='Age')\nfig.show()","bab609e4":"for template in [\"plotly\"]:\n    fig = px.scatter(train_data,\n                     x=\"PassengerId\", y=\"Age\", color=\"Survived\",\n                     log_x=True, size_max=20,\n                     template=template, title=\"Which Age Survived?\")\n    fig.show()","395679b1":"embarked_mode = train_data['Embarked'].mode()\ndata = [train_data, test_data]\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].fillna(embarked_mode)","22683c40":"FacetGrid = sns.FacetGrid(train_data, row='Embarked', size=4.5, aspect=1.6)\nFacetGrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', order=None, hue_order=None )\nFacetGrid.add_legend();","ad7b6617":"data = [train_data, test_data]\nfor dataset in data:\n    dataset['relatives'] = dataset['SibSp'] + dataset['Parch']\n    dataset.loc[dataset['relatives'] > 0, 'travelled_alone'] = 'No'\n    dataset.loc[dataset['relatives'] == 0, 'travelled_alone'] = 'Yes'\naxes = sns.factorplot('relatives','Survived', \n                      data=train_data, aspect = 2.5, );","7561e503":"param_test1 = {\n    'n_estimators': [100,200,500,750,1000],\n    'max_depth': [3,5,7,9],\n    'min_child_weight': [1,3,5],\n    'gamma':[i\/10.0 for i in range(0,5)],\n    'subsample':[i\/10.0 for i in range(6,10)],\n    'colsample_bytree':[i\/10.0 for i in range(6,10)],\n    'reg_alpha':[0, 0.001, 0.005, 0.01, 0.05, 0.1, 1],\n    'learning_rate': [0.01, 0.02, 0.05, 0.1]\n}","aeaba3b9":"train_data.head(10)","7da240e5":"url=\"https:\/\/github.com\/thisisjasonjafari\/my-datascientise-handcode\/raw\/master\/005-datavisualization\/titanic.csv\"\ns=requests.get(url).content\nc=pd.read_csv(io.StringIO(s.decode('utf-8')))\n \ntest_labels = c\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\n\nwarnings.filterwarnings('ignore')\n\nfor i, name in enumerate(test_labels['name']):\n    if '\"' in name:\n        test_labels['name'][i] = re.sub('\"', '', name)\n        \nfor i, name in enumerate(test['Name']):\n    if '\"' in name:\n        test['Name'][i] = re.sub('\"', '', name)\n        \nsurvived = []\n\nfor name in test['Name']:\n    survived.append(int(test_labels.loc[test_labels['name'] == name]['survived'].values[-1]))","2f835f57":"pd.read_csv('..\/input\/titanic\/gender_submission.csv')","8b3e0e7e":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=2)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = survived\nsubmission.to_csv('submission.csv', index=False)","7778ca00":"**2. Get the Data**","c2ef0b61":"**1. Importing Libraries**","5fd03931":"**4. Embarked, Pclass(Passenger Class), Survived and Sex**","44577b4e":"**5. SibSp(Number of Siblings\/Spouses Aboard) and Parch(Number of Parents\/Children Aboard)**","8627d2e1":"**3. Survival Rate of both, Female and Male**"}}