{"cell_type":{"8cd86874":"code","af857164":"code","265420a9":"code","b955efd3":"code","2dd07c12":"code","a8aa20e6":"code","31a36b19":"code","c98be851":"code","889a0b2a":"code","e92b5cb9":"code","6143608c":"code","43cfd214":"code","49f85246":"code","aa9c5898":"code","608349ef":"code","ffb5c4d0":"code","d68f4903":"code","ed17c3e9":"code","6fa71c09":"code","a94c5880":"code","fa0c3f3f":"code","33170d9e":"code","6419d12e":"code","c1c194d4":"code","87047b77":"code","0e457929":"code","aa74c7c1":"code","95292939":"code","68b0e7b0":"code","9f9dcaba":"markdown","669a3d56":"markdown","6a2af196":"markdown","70a15614":"markdown","a4c4d59f":"markdown","ab713867":"markdown","5f836f7f":"markdown","b1137146":"markdown"},"source":{"8cd86874":"import matplotlib.pyplot as plt\nimport sklearn.ensemble\nimport sklearn.manifold\nimport sklearn.decomposition\nimport sklearn.metrics\nimport numpy as np\nimport pandas as pd","af857164":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)","265420a9":"from sklearn.model_selection import train_test_split\ndata = pd.read_csv(\"..\/input\/train.csv\")\ndf = data.drop(\"id\", axis=1)\nprint(df.shape)","b955efd3":"df['target'].value_counts()","2dd07c12":"df.info()","a8aa20e6":"mapping = {'Class_2':2, 'Class_6':6, 'Class_8':8, 'Class_3':3, 'Class_9':9, 'Class_7':7, 'Class_4':4, 'Class_5':5, 'Class_1':1}      \n#mapping = {'set': 1, 'test': 2}\ndf_cat = df.replace({'target': mapping})","31a36b19":"df_cat.head()","c98be851":"y = df_cat['target'].values\nX = df_cat.drop('target', axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, shuffle = False)","889a0b2a":"from sklearn.decomposition import PCA","e92b5cb9":"pca = PCA(n_components=2)\npca.fit(X_train)\nmodel_pca_trans = pca.fit_transform(X_train)","6143608c":"plt.figure(figsize=(20, 10))\nlabel_color_dict = {label:idx for idx, label in enumerate(np.unique(y_train))}\ncvec = [label_color_dict[label] for label in y_train]\nplt.scatter(model_pca_trans[:, 0], model_pca_trans[:, 1], c=cvec, edgecolor='', alpha=0.2)","43cfd214":"from sklearn.manifold import TSNE\nX_embedded = TSNE(n_components=2,  learning_rate=1000, init=\"random\", random_state=1234).fit_transform(X_train)","49f85246":"plt.figure(figsize=(20, 10))\nplt.scatter(X_embedded[:, 0], X_embedded[:, 1], c=cvec, edgecolor='', alpha=0.2)","aa9c5898":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV","608349ef":"param_grid_lr = {\n    'C': np.power(10., np.arange(-4,4,1,dtype=int))\n}\nlr = LogisticRegression(solver='liblinear')\nsg_lr = GridSearchCV(lr, param_grid_lr, scoring='neg_log_loss', cv=5)\nsg_lr.fit(X_train, y_train)\n# \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nprint(sg_lr.best_params_, '\\n')\nprint(sg_lr.best_score_, '\\n')\nprint(sg_lr.best_estimator_, '\\n')","ffb5c4d0":"# \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u043b\u0435\u0441\u0430\nparam_grid_rf = {\n    'max_depth': np.arange(2,48,2,dtype=int),\n}\nrf = RandomForestClassifier(n_estimators=50)\n# \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0435\u0442\u043a\u0435\nsg_rf = GridSearchCV(rf, param_grid_rf, scoring='neg_log_loss', cv=5)\nsg_rf.fit(X_train, y_train)\n# \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nprint(sg_rf.best_params_, '\\n')\nprint(sg_rf.best_score_, '\\n')\nprint(sg_rf.best_estimator_, '\\n')","d68f4903":"from sklearn import metrics","ed17c3e9":"# \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f\nprint('LogisticRegression')\nprint('accuracy', metrics.accuracy_score(y_test, sg_lr.predict(X_test)))","6fa71c09":"# \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441\nprint('RandomForestClassifier')\nprint('accuracy', metrics.accuracy_score(y_test, sg_rf.predict(X_test)))","a94c5880":"pca_test = PCA(n_components=2)\npca_test.fit(X_test)\nmodel_pca_trans_test = pca.fit_transform(X_test)","fa0c3f3f":"lr_pca = LogisticRegression(solver='liblinear')\nsg_lr_pca = GridSearchCV(lr_pca, param_grid_lr, scoring='neg_log_loss', cv=5)\nsg_lr_pca.fit(model_pca_trans, y_train)\n# \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nprint(sg_lr_pca.best_params_, '\\n')\nprint(sg_lr_pca.best_score_, '\\n')\nprint(sg_lr_pca.best_estimator_, '\\n')","33170d9e":"# \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f\nprint('LogisticRegression')\nprint('accuracy', metrics.accuracy_score(y_test, sg_lr_pca.predict(model_pca_trans_test)))","6419d12e":"# \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u043b\u0435\u0441\u0430\nrf_pca = RandomForestClassifier(n_estimators=50)\n# \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0435\u0442\u043a\u0435\nsg_rf_pca = GridSearchCV(rf_pca, param_grid_rf, scoring='neg_log_loss', cv=5)\nsg_rf_pca.fit(model_pca_trans, y_train)\n# \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nprint(sg_rf_pca.best_params_, '\\n')\nprint(sg_rf_pca.best_score_, '\\n')\nprint(sg_rf_pca.best_estimator_, '\\n')","c1c194d4":"# \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441\nprint('RandomForestClassifier')\nprint('accuracy', metrics.accuracy_score(y_test, sg_rf_pca.predict(model_pca_trans_test)))","87047b77":"X_embedded_test = TSNE(n_components=2,  learning_rate=1000, init=\"random\", random_state=1234).fit_transform(X_test)","0e457929":"lr_sne = LogisticRegression(solver='liblinear')\nsg_lr_sne = GridSearchCV(lr_sne, param_grid_lr, scoring='neg_log_loss', cv=5)\nsg_lr_sne.fit(X_embedded, y_train)\n# \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nprint(sg_lr_sne.best_params_, '\\n')\nprint(sg_lr_sne.best_score_, '\\n')\nprint(sg_lr_sne.best_estimator_, '\\n')","aa74c7c1":"# \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f\nprint('LogisticRegression')\nprint('accuracy', metrics.accuracy_score(y_test, sg_lr_sne.predict(X_embedded_test)))","95292939":"# \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u043b\u0435\u0441\u0430\nrf_sne = RandomForestClassifier(n_estimators=50)\n# \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0435\u0442\u043a\u0435\nsg_rf_sne = GridSearchCV(rf_sne, param_grid_rf, scoring='neg_log_loss', cv=5)\nsg_rf_sne.fit(X_embedded, y_train)\n# \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nprint(sg_rf_pca.best_params_, '\\n')\nprint(sg_rf_pca.best_score_, '\\n')\nprint(sg_rf_pca.best_estimator_, '\\n')","68b0e7b0":"# \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441\nprint('RandomForestClassifier')\nprint('accuracy', metrics.accuracy_score(y_test, sg_rf_sne.predict(X_embedded_test)))","9f9dcaba":"### Data Download","669a3d56":"## Using t-SNE and PCA don't improve classification","6a2af196":"### Using t-SNE to improve classification","70a15614":"### Training models","a4c4d59f":"### Visualization with PCA","ab713867":"### Visualization with t-SNE","5f836f7f":"### Use PCA to improve classification","b1137146":"[Otto Group Product Classification Challenge](https:\/\/www.kaggle.com\/c\/otto-group-product-classification-challenge)"}}