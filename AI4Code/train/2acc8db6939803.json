{"cell_type":{"c6fd5168":"code","612d3ba2":"code","07416dd0":"code","d9fc6c75":"code","f37cb30e":"code","e100cc8c":"code","642a521f":"code","5626aa12":"code","b9acf9be":"code","bf29e64b":"code","8b31adeb":"code","a466a28e":"code","7d538fc4":"code","2d157a4a":"code","b0722939":"code","90abe723":"code","6f9675fb":"code","7c777def":"code","dd191700":"code","51624a3f":"code","7bcb9207":"code","3a3dc1c8":"code","f65cd279":"code","3a6ce9d2":"code","5211b8d3":"code","d016e8ec":"code","6f3283ab":"code","3962681d":"code","ce2a29bd":"code","8624e450":"code","aed15a2e":"code","e70ab809":"code","f7f56da0":"code","b232585d":"code","05377f6b":"code","6b3569a3":"code","9bd11b5a":"code","477d5be9":"code","99b97e26":"code","59beebe4":"code","7098bedd":"code","446a2b41":"code","f7b90a72":"code","476e94aa":"code","ad7afa23":"code","dadf930e":"code","28174bf3":"code","31a7e666":"code","28ad31ec":"code","c525ad02":"code","8753a0c7":"code","e9085dd5":"markdown","73afe37f":"markdown","5f16ba5a":"markdown","1826a66d":"markdown","38075436":"markdown","895989da":"markdown","80012d0b":"markdown","79cae940":"markdown","4f0f3e5b":"markdown","b740f03e":"markdown","93c4bc69":"markdown","9e193dab":"markdown","0641378e":"markdown","d0ad2589":"markdown","027e867a":"markdown","5f71e34a":"markdown","aa1bf0a9":"markdown","d9a37b8b":"markdown","002b701e":"markdown","b683320a":"markdown","338b5503":"markdown","04a34ca3":"markdown","e78332bb":"markdown","80b4ef06":"markdown","bc090b57":"markdown","af9910a1":"markdown","b4dea092":"markdown","265a15a8":"markdown","2168041d":"markdown","29d1ef2e":"markdown","87485dda":"markdown","fbf73bba":"markdown","90685818":"markdown","e5f44172":"markdown","66d4e0eb":"markdown","322c22db":"markdown","dfdacca1":"markdown","9ee70527":"markdown","2c7c096a":"markdown","b6b4c780":"markdown","2a828bee":"markdown","a95fd030":"markdown","c1ebc9bb":"markdown","f5b49e1d":"markdown","aadb45d3":"markdown","09715ae7":"markdown","ea39484b":"markdown","fe0b79c0":"markdown","2abcd1ed":"markdown","1cc2f50f":"markdown","13223536":"markdown","88643117":"markdown","efc7029d":"markdown","5490e5d9":"markdown","897f0622":"markdown","577c6512":"markdown","be74abd3":"markdown","ea2ece88":"markdown","542e4ef7":"markdown","f6bbc804":"markdown","e1660271":"markdown","68171ec2":"markdown","3823a671":"markdown","d18738a7":"markdown"},"source":{"c6fd5168":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np","612d3ba2":"# path to train dataset\ntrain_path = '..\/input\/titanic\/train.csv'\n# path to test dataset\ntest_path = '..\/input\/titanic\/test.csv'\n\n# Read a comma-separated values (csv) file into pandas DataFrame\ntrain_data = pd.read_csv(train_path)\ntest_data = pd.read_csv(test_path)\n\n# shape of tha data\nprint('Train shape: ', train_data.shape)\nprint('Test shape: ', test_data.shape)","07416dd0":"# create a sequence of DataFrame objects\nframes = [train_data, test_data]\n# Concatenate pandas objects along a particular axis \nall_data = pd.concat(frames, sort = False)\n# shape of the data\nprint('All data shape: ', all_data.shape)\n# Show first 4 rows of the concatenated DataFrame\nall_data.head(4)","d9fc6c75":"all_data.info()","f37cb30e":"# check data for NA values\nall_data_NA = all_data.isna().sum()\ntrain_NA = train_data.isna().sum()\ntest_NA = test_data.isna().sum()\n\npd.concat([train_NA, test_NA, all_data_NA], axis=1, sort = False, keys = ['Train NA', 'Test NA', 'All NA'])","e100cc8c":"# set size of the plot\nplt.figure(figsize=(6, 4.5)) \n\n# countplot shows the counts of observations in each categorical bin using bars.\n# x - name of the categorical variable\nax = sns.countplot(x = 'Survived', data = all_data, palette=[\"#3f3e6fd1\", \"#85c6a9\"])\n\n# set the current tick locations and labels of the x-axis.\nplt.xticks( np.arange(2), ['drowned', 'survived'] )\n# set title\nplt.title('Overall survival (training dataset)',fontsize= 14)\n# set x label\nplt.xlabel('Passenger status after the tragedy')\n# set y label\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Survived'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v-40, str(v), horizontalalignment = 'center', size = 14, color = 'w', fontweight = 'bold')\n    \nplt.show()","642a521f":"all_data['Survived'].value_counts(normalize = True)","5626aa12":"# set plot size\nplt.figure(figsize=(15, 3))\n\n# plot a univariate distribution of Age observations \nsns.distplot(all_data[(all_data[\"Age\"] > 0)].Age, kde_kws={\"lw\": 3}, bins = 50)\n\n# set titles and labels\nplt.title('Distrubution of passengers age (all data)',fontsize= 14)\nplt.xlabel('Age')\nplt.ylabel('Frequency')\n# clean layout\nplt.tight_layout()","b9acf9be":"# Descriptive statistics include those that summarize the central tendency, \n# dispersion and shape of a dataset\u2019s distribution, excluding NaN values.\nage_distr = pd.DataFrame(all_data['Age'].describe())\n# Transpose index and columns.\nage_distr.transpose()","bf29e64b":"plt.figure(figsize=(15, 3))\n\n# Draw a box plot to show Age distributions with respect to survival status.\nsns.boxplot(y = 'Survived', x = 'Age', data = train_data,\n     palette=[\"#3f3e6fd1\", \"#85c6a9\"], fliersize = 0, orient = 'h')\n\n# Add a scatterplot for each category.\nsns.stripplot(y = 'Survived', x = 'Age', data = train_data,\n     linewidth = 0.6, palette=[\"#3f3e6fd1\", \"#85c6a9\"], orient = 'h')\n\nplt.yticks( np.arange(2), ['drowned', 'survived'])\nplt.title('Age distribution grouped by surviving status (train data)',fontsize= 14)\nplt.ylabel('Passenger status after the tragedy')\nplt.tight_layout()","8b31adeb":"# Descriptive statistics:\npd.DataFrame(all_data.groupby('Survived')['Age'].describe())","a466a28e":"all_data[all_data['Age'] == max(all_data['Age'] )]","7d538fc4":"train_data.loc[train_data['PassengerId'] == 631, 'Age'] = 48\nall_data.loc[all_data['PassengerId'] == 631, 'Age'] = 48","2d157a4a":"# Descriptive statistics:\npd.DataFrame(all_data.groupby('Survived')['Age'].describe())","b0722939":"# set size\nplt.figure(figsize=(20, 6))\n\n# set palette\npalette = sns.cubehelix_palette(5, start = 3)\n\nplt.subplot(1, 2, 1)\nsns.boxplot(x = 'Pclass', y = 'Age', data = all_data,\n     palette = palette, fliersize = 0)\n\nsns.stripplot(x = 'Pclass', y = 'Age', data = all_data,\n     linewidth = 0.6, palette = palette)\nplt.xticks( np.arange(3), ['1st class', '2nd class', '3rd class'])\nplt.title('Age distribution grouped by ticket class (all data)',fontsize= 16)\nplt.xlabel('Ticket class')\n\n\nplt.subplot(1, 2, 2)\n\n# To use kdeplot I need to create variables with filtered data for each category\nage_1_class = all_data[(all_data[\"Age\"] > 0) & \n                              (all_data[\"Pclass\"] == 1)]\nage_2_class = all_data[(all_data[\"Age\"] > 0) & \n                              (all_data[\"Pclass\"] == 2)]\nage_3_class = all_data[(all_data[\"Age\"] > 0) & \n                              (all_data[\"Pclass\"] == 3)]\n\n# Ploting the 3 variables that we create\nsns.kdeplot(age_1_class[\"Age\"], shade=True, color='#eed4d0', label = '1st class')\nsns.kdeplot(age_2_class[\"Age\"], shade=True,  color='#cda0aa', label = '2nd class')\nsns.kdeplot(age_3_class[\"Age\"], shade=True,color='#a2708e', label = '3rd class')\nplt.title('Age distribution grouped by ticket class (all data)',fontsize= 16)\nplt.xlabel('Age')\nplt.xlim(0, 90)\nplt.tight_layout()\nplt.show()","90abe723":"# Descriptive statistics:\npd.DataFrame(all_data.groupby('Pclass')['Age'].describe())","6f9675fb":"plt.figure(figsize=(20, 5))\npalette = \"Set3\"\n\nplt.subplot(1, 3, 1)\nsns.boxplot(x = 'Sex', y = 'Age', data = age_1_class,\n     palette = palette, fliersize = 0)\nsns.stripplot(x = 'Sex', y = 'Age', data = age_1_class,\n     linewidth = 0.6, palette = palette)\nplt.title('1st class Age distribution by Sex',fontsize= 14)\nplt.ylim(-5, 80)\n\nplt.subplot(1, 3, 2)\nsns.boxplot(x = 'Sex', y = 'Age', data = age_2_class,\n     palette = palette, fliersize = 0)\nsns.stripplot(x = 'Sex', y = 'Age', data = age_2_class,\n     linewidth = 0.6, palette = palette)\nplt.title('2nd class Age distribution by Sex',fontsize= 14)\nplt.ylim(-5, 80)\n\nplt.subplot(1, 3, 3)\nsns.boxplot(x = 'Sex', y = 'Age',  data = age_3_class,\n     order = ['female', 'male'], palette = palette, fliersize = 0)\nsns.stripplot(x = 'Sex', y = 'Age', data = age_3_class,\n     order = ['female', 'male'], linewidth = 0.6, palette = palette)\nplt.title('3rd class Age distribution by Sex',fontsize= 14)\nplt.ylim(-5, 80)\n\nplt.show()","7c777def":"# Descriptive statistics:\nage_1_class_stat = pd.DataFrame(age_1_class.groupby('Sex')['Age'].describe())\nage_2_class_stat = pd.DataFrame(age_2_class.groupby('Sex')['Age'].describe())\nage_3_class_stat = pd.DataFrame(age_3_class.groupby('Sex')['Age'].describe())\n\npd.concat([age_1_class_stat, age_2_class_stat, age_3_class_stat], axis=0, sort = False, keys = ['1st', '2nd', '3rd'])","dd191700":"all_data['Title'] = all_data['Name'].str.split(',', expand = True)[1].str.split('.', expand = True)[0].str.strip(' ')\n\nplt.figure(figsize=(6, 5))\nax = sns.countplot( x = 'Title', data = all_data, palette = \"hls\", order = all_data['Title'].value_counts().index)\n_ = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light'  \n)\n\nplt.title('Passengers distribution by titles',fontsize= 14)\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Title'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nplt.tight_layout()\nplt.show()\n","51624a3f":"all_data[all_data['Title']=='Ms']","7bcb9207":"title_dict = {  'Mr':     'Mr',\n                'Mrs':    'Mrs',\n                'Miss':   'Miss',\n                'Master': 'Master',\n              \n                'Ms':     'Miss',\n                'Mme':    'Mrs',\n                'Mlle':   'Miss',\n\n                'Capt':   'military',\n                'Col':    'military',\n                'Major':  'military',\n\n                'Dr':     'Dr',\n                'Rev':    'Rev',\n                  \n                'Sir':    'honor',\n                'the Countess': 'honor',\n                'Lady':   'honor',\n                'Jonkheer': 'honor',\n                'Don':    'honor',\n                'Dona':   'honor' }\n\n# map titles to category\nall_data['Title_category'] = all_data['Title'].map(title_dict)","3a3dc1c8":"fig = plt.figure(figsize=(12, 5))\n\n\nax1 = fig.add_subplot(121)\nax = sns.countplot(x = 'Title_category', data = all_data, palette = \"hls\", order = all_data['Title_category'].value_counts().index)\n_ = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light'  \n)\nplt.title('Passengers distribution by titles',fontsize= 12)\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Title_category'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nplt.tight_layout()\n\nax2 = fig.add_subplot(122)\nsurv_by_title_cat = all_data.groupby('Title_category')['Survived'].value_counts(normalize = True).unstack()\nsurv_by_title_cat = surv_by_title_cat.sort_values(by=1, ascending = False)\nsurv_by_title_cat.plot(kind='bar', stacked='True', color=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax2)\n\nplt.legend( ( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light'  \n)\n\n\nplt.title('Proportion of survived\/drowned by titles (train data)',fontsize= 12)\n\nplt.tight_layout()\nplt.show()","f65cd279":"category_survived = sns.catplot(x=\"Title_category\",  col=\"Survived\",\n                data = all_data, kind=\"count\",\n                height=4, aspect=.7)\n\ncategory_survived.set_xticklabels(rotation=45, \n    horizontalalignment='right',\n    fontweight='light')\n\nplt.tight_layout()","3a6ce9d2":"class_by_title_cat = all_data.groupby('Title_category')['Pclass'].value_counts(normalize = True)\nclass_by_title_cat = class_by_title_cat.unstack().sort_values(by = 1, ascending = False)\nclass_by_title_cat.plot(kind='bar', stacked='True', color = ['#eed4d0', '#cda0aa', '#a2708e'])\nplt.legend(loc=(1.04,0))\n_ = plt.xticks(\n    rotation = 45, \n    horizontalalignment = 'right',\n    fontweight = 'light'  \n)\n\n\nplt.title('Proportion of 1st\/2nd\/3rd ticket class in each title category',fontsize= 14)\nplt.xlabel('Category of the Title')\nplt.tight_layout()","5211b8d3":"all_data['deck'] = all_data['Cabin'].str.split('', expand = True)[1]\nall_data.loc[all_data['deck'].isna(), 'deck'] = 'U'\nprint('Unique deck letters from the cabin numbers:', all_data['deck'].unique())","d016e8ec":"fig = plt.figure(figsize=(20, 5))\n\nax1 = fig.add_subplot(131)\nsns.countplot(x = 'deck', data = all_data, palette = \"hls\", order = all_data['deck'].value_counts().index, ax = ax1)\nplt.title('Passengers distribution by deck',fontsize= 16)\nplt.ylabel('Number of passengers')\n\nax2 = fig.add_subplot(132)\ndeck_by_class = all_data.groupby('deck')['Pclass'].value_counts(normalize = True).unstack()\ndeck_by_class.plot(kind='bar', stacked='True',color = ['#eed4d0', '#cda0aa', '#a2708e'], ax = ax2)\nplt.legend(('1st class', '2nd class', '3rd class'), loc=(1.04,0))\nplt.title('Proportion of classes on each deck',fontsize= 16)\nplt.xticks(rotation = False)\n\nax3 = fig.add_subplot(133)\ndeck_by_survived = all_data.groupby('deck')['Survived'].value_counts(normalize = True).unstack()\ndeck_by_survived = deck_by_survived.sort_values(by = 1, ascending = False)\ndeck_by_survived.plot(kind='bar', stacked='True', color=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax3)\nplt.title('Proportion of survived\/drowned passengers by deck',fontsize= 16)\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\nplt.xticks(rotation = False)\nplt.tight_layout()\n\nplt.show()\n","6f3283ab":"all_data[(all_data['deck']=='A') & (all_data['Survived']==0)]","3962681d":"all_data['Family_size'] = all_data['SibSp'] + all_data['Parch'] + 1\nfamily_size = all_data['Family_size'].value_counts()\nprint('Family size and number of passengers:')\nprint(family_size)","ce2a29bd":"all_data['Surname'] = all_data['Name'].str.split(',', expand = True)[0]","8624e450":"all_data[all_data['Family_size'] == 7]['Surname'].value_counts()","aed15a2e":"all_data[(all_data['Family_size'] == 7) & (all_data['Surname']=='Andersson')]","e70ab809":"all_data[(all_data['Family_size'] == 7) & (all_data['Surname']=='Andersson')].Ticket.value_counts()","f7f56da0":"all_data[(all_data['Ticket'] == '3101281') | (all_data['Ticket'] == '347091')]","b232585d":"all_data.loc[all_data['PassengerId'] == 69, ['SibSp', 'Parch', 'Family_size']] = [0,0,1]\nall_data.loc[all_data['PassengerId'] == 1106, ['SibSp', 'Parch', 'Family_size']] = [0,0,1]\nall_data[(all_data['Ticket'] == '3101281') | (all_data['Ticket'] == '347091')]","05377f6b":"all_data[all_data['Family_size'] == 5]['Surname'].value_counts()","6b3569a3":"all_data[(all_data['Surname'] == 'Kink-Heilmann')&(all_data['Family_size'] == 5)]","9bd11b5a":"fig = plt.figure(figsize = (12,4))\n\nax1 = fig.add_subplot(121)\nax = sns.countplot(all_data['Family_size'], ax = ax1)\n\n# calculate passengers for each category\nlabels = (all_data['Family_size'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+6, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \nplt.title('Passengers distribution by family size')\nplt.ylabel('Number of passengers')\n\nax2 = fig.add_subplot(122)\nd = all_data.groupby('Family_size')['Survived'].value_counts(normalize = True).unstack()\nd.plot(kind='bar', color=[\"#3f3e6fd1\", \"#85c6a9\"], stacked='True', ax = ax2)\nplt.title('Proportion of survived\/drowned passengers by family size (train data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\nplt.xticks(rotation = False)\n\nplt.tight_layout()","477d5be9":"all_data['Family_size_group'] = all_data['Family_size'].map(lambda x: 'f_single' if x == 1 \n                                                            else ('f_usual' if 5 > x >= 2 \n                                                                  else ('f_big' if 8 > x >= 5 \n                                                                       else 'f_large' )\n                                                                 ))                                                       ","99b97e26":"fig = plt.figure(figsize = (14,5))\n\nax1 = fig.add_subplot(121)\nd = all_data.groupby('Family_size_group')['Survived'].value_counts(normalize = True).unstack()\nd = d.sort_values(by = 1, ascending = False)\nd.plot(kind='bar', stacked='True', color = [\"#3f3e6fd1\", \"#85c6a9\"], ax = ax1)\nplt.title('Proportion of survived\/drowned passengers by family size (training data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\n\nax2 = fig.add_subplot(122)\nd2 = all_data.groupby('Family_size_group')['Pclass'].value_counts(normalize = True).unstack()\nd2 = d2.sort_values(by = 1, ascending = False)\nd2.plot(kind='bar', stacked='True', color = ['#eed4d0', '#cda0aa', '#a2708e'], ax = ax2)\nplt.legend(('1st class', '2nd class', '3rd class'), loc=(1.04,0))\nplt.title('Proportion of 1st\/2nd\/3rd ticket class in family group size')\n_ = plt.xticks(rotation=False)\n\nplt.tight_layout()","59beebe4":"ax = sns.countplot(all_data['Pclass'], palette = ['#eed4d0', '#cda0aa', '#a2708e'])\n# calculate passengers for each category\nlabels = (all_data['Pclass'].value_counts(sort = False))\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+2, str(v), horizontalalignment = 'center', size = 12, color = 'black', fontweight = 'bold')\n    \n    \nplt.title('Passengers distribution by family size')\nplt.ylabel('Number of passengers')\nplt.tight_layout()","7098bedd":"fig = plt.figure(figsize=(14, 5))\n\nax1 = fig.add_subplot(121)\nsns.countplot(x = 'Pclass', hue = 'Survived', data = all_data, palette=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax1)\nplt.title('Number of survived\/drowned passengers by class (train data)')\nplt.ylabel('Number of passengers')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\nax2 = fig.add_subplot(122)\nd = all_data.groupby('Pclass')['Survived'].value_counts(normalize = True).unstack()\nd.plot(kind='bar', stacked='True', ax = ax2, color =[\"#3f3e6fd1\", \"#85c6a9\"])\nplt.title('Proportion of survived\/drowned passengers by class (train data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\nplt.tight_layout()","446a2b41":"sns.catplot(x = 'Pclass', hue = 'Survived', col = 'Sex', kind = 'count', data = all_data , palette=[\"#3f3e6fd1\", \"#85c6a9\"])\n\nplt.tight_layout()","f7b90a72":"plt.figure(figsize=(20, 10))\npalette=[\"#3f3e6fd1\", \"#85c6a9\"]\n\nplt.subplot(2, 3, 1)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_1_class[age_1_class['Sex']=='male'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#e1f3f6\")\nplt.axhspan(16, 40, color = \"#bde6dd\")\nplt.axhspan(40, 80, color = \"#83ceb9\")\nplt.title('Age distribution (males, 1st class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 2)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_2_class[age_2_class['Sex']=='male'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#e1f3f6\")\nplt.axhspan(16, 40, color = \"#bde6dd\")\nplt.axhspan(40, 80, color = \"#83ceb9\")\nplt.title('Age distribution (males, 2nd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 3)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_3_class[age_3_class['Sex']=='male'],\n              linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#e1f3f6\")\nplt.axhspan(16, 40, color = \"#bde6dd\")\nplt.axhspan(40, 80, color = \"#83ceb9\")\nplt.title('Age distribution (males, 3rd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\n\nplt.subplot(2, 3, 4)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_1_class[age_1_class['Sex']=='female'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#ffff9978\")\nplt.axhspan(16, 40, color = \"#ffff97bf\")\nplt.axhspan(40, 80, color = \"#ffed97bf\")\nplt.title('Age distribution (females, 1st class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 5)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_2_class[age_2_class['Sex']=='female'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#ffff9978\")\nplt.axhspan(16, 40, color = \"#ffff97bf\")\nplt.axhspan(40, 80, color = \"#ffed97bf\")\nplt.title('Age distribution (females, 2nd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 6)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_3_class[age_3_class['Sex']=='female'],\n              linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#ffff9978\")\nplt.axhspan(16, 40, color = \"#ffff97bf\")\nplt.axhspan(40, 80, color = \"#ffed97bf\")\nplt.title('Age distribution (females, 3rd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\n\nplt.show()","476e94aa":"plt.figure(figsize = (15,4))\n\nplt.subplot (1,3,1)\nax = sns.countplot(all_data['Sex'], palette=\"Set3\")\nplt.title('Number of passengers by Sex')\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Sex'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nplt.subplot (1,3,2)\nsns.countplot( x = 'Pclass', data = all_data, hue = 'Sex', palette=\"Set3\")\nplt.title('Number of male\/female passengers by class')\nplt.ylabel('Number of passengers')\nplt.legend( loc=(1.04,0))\n\nplt.subplot (1,3,3)\nsns.countplot( x = 'Family_size_group', data = all_data, hue = 'Sex', \n              order = all_data['Family_size_group'].value_counts().index , palette=\"Set3\")\nplt.title('Number of male\/female passengers by family size')\nplt.ylabel('Number of passengers')\nplt.legend( loc=(1.04,0))\nplt.tight_layout()","ad7afa23":"fig = plt.figure(figsize = (15,4))\n\nax1 = fig.add_subplot(131)\npalette = sns.cubehelix_palette(5, start = 2)\nax = sns.countplot(all_data['Embarked'], palette = palette, order = ['C', 'Q', 'S'], ax = ax1)\nplt.title('Number of passengers by Embarked')\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Embarked'].value_counts())\nlabels = labels.sort_index()\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nax2 = fig.add_subplot(132)\nsurv_by_emb = all_data.groupby('Embarked')['Survived'].value_counts(normalize = True)\nsurv_by_emb = surv_by_emb.unstack().sort_index()\nsurv_by_emb.plot(kind='bar', stacked='True', color=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax2)\nplt.title('Proportion of survived\/drowned passengers by Embarked (train data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\n\nax3 = fig.add_subplot(133)\nclass_by_emb = all_data.groupby('Embarked')['Pclass'].value_counts(normalize = True)\nclass_by_emb = class_by_emb.unstack().sort_index()\nclass_by_emb.plot(kind='bar', stacked='True', color = ['#eed4d0', '#cda0aa', '#a2708e'], ax = ax3)\nplt.legend(('1st class', '2nd class', '3rd class'), loc=(1.04,0))\nplt.title('Proportion of clases by Embarked')\n_ = plt.xticks(rotation=False)\n\nplt.tight_layout()","dadf930e":"\nsns.catplot(x=\"Embarked\", y=\"Fare\", kind=\"violin\", inner=None,\n            data=all_data, height = 6, palette = palette, order = ['C', 'Q', 'S'])\nplt.title('Distribution of Fare by Embarked')\nplt.tight_layout()","28174bf3":"# Descriptive statistics:\npd.DataFrame(all_data.groupby('Embarked')['Fare'].describe())","31a7e666":"train_data[train_data['Embarked'].isna()]","28ad31ec":"sns.catplot(x=\"Pclass\", y=\"Fare\", kind=\"swarm\", data=all_data, palette=sns.cubehelix_palette(5, start = 3), height = 6)\n\nplt.tight_layout()","c525ad02":"sns.catplot(x=\"Pclass\", y=\"Fare\",  hue = \"Survived\", kind=\"swarm\", data=all_data, \n                                    palette=[\"#3f3e6fd1\", \"#85c6a9\"], height = 6)\nplt.tight_layout()","8753a0c7":"all_data[all_data['Fare'] == min(all_data['Fare'])]","e9085dd5":"## 6.5 Family\nDoes the size of the family on Board together affect the chances of surviving a disaster? Does having children increase the chance of getting into a boat, or is it easier to survive being single?  \nI calculate the family size, by summarizing the number of siblings with the parch number  plus 1 (passenger himself).  \nFamily size = sib + parch + 1\n\n### 6.5.1 Calculate family size","73afe37f":"Actually, Mr Algernon Henry Barkworth was born on 4 June 1864.He was 48 in 1912 and died in 1945 at 80 y.o.\n","5f16ba5a":"### 6.6.3 Class vs surviving status vs gender","1826a66d":"## 6.3 What is in the name? \nEach passenger Name value contains the title of the passenger which we can extract and discover.  \nTo create new variable \"Title\":  \n1. I am using method 'split' by comma to divide Name in two parts and save the second part\n2. I am splitting saved part by dot and save first part of the result\n3. To remove spaces around the title I am using 'split' method\n\nTo visualize, how many passengers hold each title, I chose countplot.","38075436":"* The smallest group is \"honor\", passengers with royal-kind titles.  \n\nTraining data:\n* The biggiest proportion of survivals is in \"Mrs\" group - married woman.   \n* More than 80% drowned in \"Mr.\" group.  \n* Nobody survived among Reverend group.","895989da":"### 6.6.4 Class vs. Gender vs. Age -> Surviving status \nFor better understanding how the combination of some factors influence on chances to survive, lets break passengers into 18 imaginary groups separated by:\n* **Class** (1 \/ 2 \/ 3)\n* **Gender** (male \/ female)\n* **Age** ( <16 \/ 16-40 \/ 40<)  \n\nTo do so I will create 6 stripplots (3 for male, 3 for female), with values grouped by Surviving status and add background color to separate age groups:","80012d0b":"Looks strange that there are 16 passengers with family size of 7, for example. Let's check!  \nAlso, I will add a surname variable, by extraxting first word ow the name.","79cae940":"### 6.2.3 Age by class\nThere I will compare three age distributions, grouped by class of the passenger.  \nAs visualisations I will use 2 gaphs:\n1. boxplot+stripplot as before\n2. kdeplot, to plot age density curves for each class. This method can't handle missing values, so I filter the data before using it.","4f0f3e5b":"## 5.2 Types of the variables","b740f03e":"* Most number of passengers (914) were embarked in Southampton. Also Southampton has the biggiest proportion of drowned passengers.\n* 270 passengers emarked in Cherbourg and more than 50% of them survived (in the training dataset). \n* 123 of passengers embarked in Queenstown, the vast majority of them are 3rd class passengers\n","93c4bc69":"# 1. Introduction\nSince I am a beginner on the Kaggle, and I am currently located in Belfast (the city in which the Titanic was built) for a year for my Master's degree, I could not get past this legendary Titanic competition!  \nThis notebook is the **first part** of my work and contains **EDA** (exploratory data analysis) and missing data research.\n\n\ud83c\udf89 \u2728 [** !!!!!! Second part with ML *solution* you can check here !!!!!**](https:\/\/www.kaggle.com\/demidova\/titanic-feature-engineering-and-solution-tutorial)\n\n*I collapsed all the cells with the code for easy viewing. If you are interested in viewing the code, you can click \"code\" button near the graph or fork my notebook to view the entire code.*","9e193dab":"## 6.9 Fare\n","0641378e":"# 2. Domain information\n[Titanic](https:\/\/en.wikipedia.org\/wiki\/Sinking_of_the_RMS_Titanic) was a British passenger liner operated by the White Star Line. Titanic was on its way from Southampton to New York City when it sank in the North Atlantic Ocean in the early morning hours of **15 April 1912** after Titanic collided with an iceberg. The ship carried **2224** people, considering passengers and crew aboard,**1514** of them died.  \n\nTitanic carried 16 wooden lifeboats and four collapsibles, which could accommodate 1,178 people, only one-third of Titanic's total capacity (and 53% of real number of passengers). At the time, lifeboats were intended to ferry survivors from a sinking ship to a rescuing ship\u2014not keep afloat the whole population or power them to shore. If the SS Californian would responded to Titanic's distress calls, the lifeboats may have been adequate to ferry the passengers to safety as planned, but it didn't happen and the only way to survive were to get on the lifeboat.\n\nThe main question of the competition is **\u201cwhat sorts of people were more likely to survive?\u201d**","d0ad2589":"# 6. Exploring the data","027e867a":"I was curious, so I read a bit about some of these passengers:  \n[John Hugo Ross](https:\/\/www.encyclopedia-titanica.org\/titanic-victim\/john-hugo-ross.html) When he boarded on 10 April 1912, he was so ill from dysentery he had to be carried to his cabin on a stretcher. When Ross was told the ship had struck an iceberg and that he should get dressed, Ross refused to believe the trouble serious. \"Is that all,?\" he told Peuchen. \"It will take more than an iceberg to get me off this ship.\" Presumably, Ross drowned in his bed.  \n\n[Andrews, Mr. Thomas Jr](https:\/\/en.wikipedia.org\/wiki\/Thomas_Andrews) was a managing director of H&W (built the Titanic) in charge of designing and was familiar with every detail of the construction of the firm's ships. He helped to evacuate people.\n\n[Roebling, Mr. Washington Augustus II ](https:\/\/www.encyclopedia-titanica.org\/titanic-victim\/washington-roebling.html) helped to evacuate people as well.\n\nIt is obvious that there is no algorithm that can predict the survival rate by 100 percent based on the factors of the passenger's location on the ship or his age, since the human factor and the unpredicted emergensy were involved in the rescue process.\n\nFor training process it will be better to include passenger from T deck to the A deck group.","5f71e34a":"# 4. Loading data\nAs input information I have two CSV files:\n\n* **train.csv** - training part of the dataset, contains labels and information about passengers.\n* **test.csv** - testing part of the dataset, doesn't contain labels.\n\nIn this notebook I will use all available information (train + test datasets) to perform exploratory data analysis.  \n\n1. First, load both csv files into two DataFrames, using pandas read_csv method and check the shape of the loaded data:","aa1bf0a9":"The oldest and the youngest passengers are female.  \nIn each class the average Age of female are slightly less than the average Age of male passengers.","d9a37b8b":"* The wider fare distribution among passengers who embarked in Cherbourg. It makes scence - many first-class passengers boarded the ship here, but the share of third-class passengers is quite significant.\n* The smallest variation in the price of passengers who boarded in q. Also, the average price of these passengers is the smallest, I think this is due to the fact that the path was supposed to be the shortest + almost all third-class passengers.\n\nLet's check NA values of Embarked variable:","002b701e":"## 6.4 Cabin\n![Titanic_cutaway_diagram-small.png](attachment:Titanic_cutaway_diagram-small.png)\n\nFrom the number of the cabin we can extract first letter, which will tell us about placement of the cabin on the ship! And it seems to me as a very important knowlege:   \n* How close cabin located to the lifeboats\n* How far from the most damaged parts of the ship\n* How close to people who have information about what is happening and how to act\n* How many obstacles passenger had in the way to the lifeboat\n\nI found some description of each Titanic deck:\n\nThere were 8 decks: the upperdeck - for lifeboats, other 7 were under it and had letter symbols:\n* **A**: it did not run the entire length of the vessel (i.e. it did not reach from the stern to the bow of the vessel), and was intended for passengers of the **1st class**.\n* **B**: it did not run the entire length of the ship (it was interrupted by 37 meters above the C deck, and served as a place for anchors in the front).\n* **C**: in the front part of the galley, dining room for the crew, as well as a walking area for passengers of the 3rd class.\n* **D**: a walking area for passengers .\n* **E**: cabins of the **1st and 2nd class**.\n* **F**: part of the passenger cabins of the **2nd class**, most of the cabins of the **3rd class**.\n* **G**: did not run the entire length of the ship, the boiler rooms were located in the center.\n* **T** - boat deck ?\n\nTo the passengers without deck information I will imput U letter (as unknown).","b683320a":"## 6.8 Embarked\nTitanic had 3 embarkation points before the ship started its route to New York:\n* Southampton\n* Cherbourg\n* Queenstown  \n\nSome passengers could leave Titanic in Cherbourg or Queenstown and avoid catastrophe. Also, the point of embarkation could have an influence on ticket fare and location on the ship.  \n\n![09269a9f7d50a3f019182a11f7aa7981.jpg](attachment:09269a9f7d50a3f019182a11f7aa7981.jpg)\n\nPort of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)\n","338b5503":"Despite the previously identified prerequisites (on average, older people are more likely to die, and in the first class, the average age is higher than in other classes. Also, passengers on deck A, which consists of 100% first class, have a large proportion of drowned passengers), the first class has the largest number of survivors and the proportion of survivors within the class is the largest.  \nThird-class tickets had the highest number of drowned passengers, and most of the third-class passengers drowned.","04a34ca3":"### 6.2.4 Age vs class vs gender\nComparison of age distribution by gender I will do separately for each class since we have such a noticeable age difference between classes.","e78332bb":"Kink-Heilmann, Mr. Anton\t had 2 other siblings on the ship unlike his wife, for whom these relatives do not fit the description of relatives in the data set. We will assume that all other \"mismatches\" in the groups are similar to this. Since I plan to group the size of families into groups, this will eliminate possible inconsistencies.","80b4ef06":"1st class has wider distribution compare to 2nd and 3rd and almost symmetric.  \nBoth 2nd and 3rd classes age distributions are right skewed.  \nThe youngest passenger has 3rd class ticket, age = 0.17.  \nThe oldest passenger has 1st class ticket, age = 76.  \n3rd class mean age = 24.8, 2nd classe average age is 29.5 and 1st class average age is 39.1.   \n \n \nSince survived passengers on average younger than drowned, does it mean, that 3rd class passengers had more chances to survive? We will discover it later.  \n\nFrom graphs we can see difference in age distribution between classes. So when I will do missing data imputation I will take class into account.  ","bc090b57":"Let's update our description:  \nThe mean age of survived passenger is 28.23 which on 2.39 smaller than the mean age of drowned passengers (only passengers we know survived status for).=\nThe maximum age of survived passenger is 63 y.o.  \nIt looks like there is a slightly bigger chance to survive for younger people.","af9910a1":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#1.-Introduction\" data-toc-modified-id=\"1.-Introduction-1\">1. Introduction<\/a><\/span><\/li><li><span><a href=\"#2.-Domain-information\" data-toc-modified-id=\"2.-Domain-information-2\">2. Domain information<\/a><\/span><\/li><li><span><a href=\"#3.-Loading-libraries:\" data-toc-modified-id=\"3.-Loading-libraries:-3\">3. Loading libraries:<\/a><\/span><\/li><li><span><a href=\"#4.-Loading-data\" data-toc-modified-id=\"4.-Loading-data-4\">4. Loading data<\/a><\/span><\/li><li><span><a href=\"#5.-First-look:-variables,-NAs\" data-toc-modified-id=\"5.-First-look:-variables,-NAs-5\">5. First look: variables, NAs<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#5.1-Variables\" data-toc-modified-id=\"5.1-Variables-5.1\">5.1 Variables<\/a><\/span><\/li><li><span><a href=\"#5.2-Types-of-the-variables\" data-toc-modified-id=\"5.2-Types-of-the-variables-5.2\">5.2 Types of the variables<\/a><\/span><\/li><li><span><a href=\"#5.3-Check-data-for-NA\" data-toc-modified-id=\"5.3-Check-data-for-NA-5.3\">5.3 Check data for NA<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#6.-Exploring-the-data\" data-toc-modified-id=\"6.-Exploring-the-data-6\">6. Exploring the data<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#6.1-Survivals---target-value\" data-toc-modified-id=\"6.1-Survivals---target-value-6.1\">6.1 Survivals - target value<\/a><\/span><\/li><li><span><a href=\"#6.2-AGE\" data-toc-modified-id=\"6.2-AGE-6.2\">6.2 AGE<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#6.2.1-Age-distribution\" data-toc-modified-id=\"6.2.1-Age-distribution-6.2.1\">6.2.1 Age distribution<\/a><\/span><\/li><li><span><a href=\"#6.2.2-Age-by-surviving-status\" data-toc-modified-id=\"6.2.2-Age-by-surviving-status-6.2.2\">6.2.2 Age by surviving status<\/a><\/span><\/li><li><span><a href=\"#6.2.3-Age-by-class\" data-toc-modified-id=\"6.2.3-Age-by-class-6.2.3\">6.2.3 Age by class<\/a><\/span><\/li><li><span><a href=\"#6.2.4-Age-vs-class-vs-gender\" data-toc-modified-id=\"6.2.4-Age-vs-class-vs-gender-6.2.4\">6.2.4 Age vs class vs gender<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#6.3-What-is-in-the-name?\" data-toc-modified-id=\"6.3-What-is-in-the-name?-6.3\">6.3 What is in the name?<\/a><\/span><\/li><li><span><a href=\"#6.4-Cabin\" data-toc-modified-id=\"6.4-Cabin-6.4\">6.4 Cabin<\/a><\/span><\/li><li><span><a href=\"#6.5-Family\" data-toc-modified-id=\"6.5-Family-6.5\">6.5 Family<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#6.5.1-Calculate-family-size\" data-toc-modified-id=\"6.5.1-Calculate-family-size-6.5.1\">6.5.1 Calculate family size<\/a><\/span><li><span><a href=\"#6.5.2-Family-size-and-chanses-for-surviving\" data-toc-modified-id=\"6.5.2-Family-size-and-chanses-for-surviving-6.5.2\">6.5.2 Family size and chanses for surviving<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#6.6-Class\" data-toc-modified-id=\"6.6-Class-6.6\">6.6 Class<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#6.6.1-Passengers-by-class\" data-toc-modified-id=\"6.6.1-Passengers-by-class-6.6.1\">6.6.1 Passengers by class<\/a><\/span><\/li><li><span><a href=\"#6.6.2-Class-vs-surviving-status\" data-toc-modified-id=\"6.6.2-Class-vs-surviving-status-6.6.2\">6.6.2 Class vs surviving status<\/a><\/span><\/li><li><span><a href=\"#6.6.3-Class-vs-surviving-status-vs-gender\" data-toc-modified-id=\"6.6.3-Class-vs-surviving-status-vs-gender-6.6.3\">6.6.3 Class vs surviving status vs gender<\/a><\/span><\/li><li><span><a href=\"#6.6.4-Class-vs.-Gender-vs.-Age-->-Surviving-status\" data-toc-modified-id=\"6.6.4-Class-vs.-Gender-vs.-Age-->-Surviving-status-6.6.4\">6.6.4 Class vs. Gender vs. Age -&gt; Surviving status<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#6.7-Gender\" data-toc-modified-id=\"6.7-Gender-6.7\">6.7 Gender<\/a><\/span><\/li><li><span><a href=\"#6.8-Embarked\" data-toc-modified-id=\"6.8-Embarked-6.8\">6.8 Embarked<\/a><\/span><\/li><li><span><a href=\"#6.9-Fare\" data-toc-modified-id=\"6.9-Fare-6.9\">6.9 Fare<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#7.-Conclusion\" data-toc-modified-id=\"7.-Conclusion-7\">7. Conclusion<\/a><\/span><\/li><\/ul><\/div>","b4dea092":"### 6.5.2 Family size and chanses for surviving","265a15a8":"### 6.6.2 Class vs surviving status","2168041d":"Data types, non-null values count:","29d1ef2e":"# 7. Conclusion\nWe know that there were not enough boats on Board the Titanic for all passengers to be able to evacuate. After studying the information about the passengers, we can make some assumptions about who had a better chance of survival in a shipwreck situation as well as General observations about passengers.\n\n* There are 891 passengers in the train dataset, 549 (61,6%) of them drowned and only 342 (38,4%) survived. But we know, that lifeboats (16 wooden lifeboats and four collapsible) could carry 53% of total passengers.\n* The Age of all passengers vary from about 0.17 year to 80 years with average 29.88. The mean age of survived passenger is 28.23 which on 2.39 smaller than the mean age of drowned passengers (only passengers we know survived status for). It looks like there is a slightly bigger chance to survive for younger people.\n* Exploring the title of passengers, we can see that the biggest proportion of survivors is in the \"Mrs\" group - a married woman. More than 80% drowned in the \"Mr.\" group and nobody survived among the Reverend group.\n* Most passengers don't have cabin numbers. The largest part of passengers with known cabin numbers was located on the 'C' deck and had 1st class ticket. 'C' deck is fifth by a percentage of the survivor.  \nThe largest surviving rate (among passengers with known cabin numbers in training dataset) had passengers from deck 'D'. Deck A was the closest to the deck with lifeboats, but it is the last in the surviving rate.\n* The family size on board also seems to have an influence on chances for survival: there were two large families with sizes 8 and 11 and all their members from the training dataset are drowned.  We can observe that the percentage of survivors in people who have a family of 2, 3, 4 people is greater than in singles, then the percentage of survivors decreases as the family size increases.  \n* Most of the Titanic's passengers were traveling third class (709). The second class is the smallest in terms of the number of passengers. Despite the previously identified prerequisites (on average, older people are more likely to die, and in the first class, the average age is higher than in other classes. Also, passengers on deck A, which consists of 100% first class, have a large proportion of drowned passengers), the first-class has the largest number of survivors and the proportion of survivors within the class is the largest.  \nThird-class tickets had the highest number of drowned passengers, and most of the third-class passengers drowned.\n* However, most of the male passengers of the first class drowned, and the female almost all survived. In the third grade, half of the females survived.  \nThere were overall more males than females on board, it is fair for each ticket class, but in the 3rd class number of males more than twice bigger than females.  \nAlmost 600 male passengers traveled without family members and only about 200 females, but in usual and big families there were slightly more female passengers.  \n* Most numbers of passengers (914) were embarked in Southampton. Also, Southampton has the biggest proportion of drowned passengers. 270 passengers embarked in Cherbourg and more than 50% of them survived (in the training dataset). 123 of passengers embarked in Queenstown, the vast majority of them are 3rd class passengers.  \n\n \nIf we use a naive approach and consider all the parameters separately, then young female first-class passengers with the title Mrs have a moderate number of relatives on Board, who paid a large amount for a ticket and went on Board in  Cherbourg have a better chance of survival. \nFor sure, there is a relationship between variables, and survival was influenced not only by the title, or ticket, or age itself but by a combination of factors that are to some extent interrelated.   \nAnd It is obvious that there is no algorithm that can predict the survival rate by 100 percent based on the factors of the passenger's location on the ship or his age, since the human factor and the unpredicted emergency were involved in the rescue process.\n\n[**Second part of my work**](https:\/\/www.kaggle.com\/demidova\/titanic-feature-engineering-and-solution-tutorial) with Titanic dataset and contains:\n\n* Missing data imputation\n* Feature generation\n* Models implementation and tuning: Logistic Regression, Random Forest, XGBoost\n* Comparing models and submission\n","87485dda":"These two passengers traveled together (same ticket number). To impute missing values, we can use mode value for passengers with the closest fare value and Pclass.","fbf73bba":"## 6.1 Survivals - target value\nLet's calculate and visualise distribution of our target variable - 'Survived'.  \nA countplot of seaborn module is a very useful way to show the counts of observations in each category.  \nSince we have target only for the training part, these numbers don't include all passengers.","90685818":"Some of the passengers have \"Line\" tickets, perhaps they were somehow involved in the Titanic, but were not the ship's crew. I don't think we should change these prices, but add an additional feature for these passengers.","e5f44172":"## 6.6 Class\nWe have made a lot of assumptions about the survival rate depending on the classes. Let's now look closely at this variable.\n\n### 6.6.1 Passengers by class","66d4e0eb":"Most of the Titanic's passengers were traveling third class (709).  \nThe second class is the smallest in terms of the number of passengers.","322c22db":"![MA_00079563_yvu84f.jpg](attachment:MA_00079563_yvu84f.jpg)","dfdacca1":"# 3. Loading libraries: \n\nList of libraries I am using in this kernel:\n* pandas - offers data structures and operations for manipulating numerical tables and time series. (imported as pd) [Documentation](https:\/\/pandas.pydata.org\/)\n* seaborn - data visualization library based on matplotlib. [Documentation](https:\/\/seaborn.pydata.org\/)\n* matplotlib.pyplot - to create some visualizations (imported as plt) [Documentation](https:\/\/matplotlib.org\/tutorials\/introductory\/pyplot.html)\n* numpy - The fundamental package for scientific computing with Python. [Documentation](https:\/\/numpy.org\/)","9ee70527":"However, most of the male passengers of the first class drowned, and the female almost all survived. In the third grade, half of the female survived.","2c7c096a":"## 5.3 Check data for NA\nTo check the dataset for NAs I am using **isna()** dataframe function, which returns a boolean same-sized object indicating if the values are NA and then I am calculating the number of True values for each variable.   \nNA values for each dataframe (train, test, all) presented in the table below:","b6b4c780":"From these graphs (training data only) we can see, that \n* only one kid (<16) from 1st and 2nd classes are drowned (female from the 1st class).\n* but children from the 3rd class were not so lucky, looks like chances to survive for passengers <16 were 50\/50 for male and female.\n* most females from 1st and 2nd class are survived, without much difference in Age.\n* females from 3rd class in Age group 40+ drowned except one.\n* similar picture for males in 2nd and 3rd classes in the Age group 40+: only 2 from each class are survived.\n* for 40+ males from 1st class situation were slightly different, there are more survived passengers.\n* the largest \"accumulation\" of drowned passengers is observed in the Age group 16-40 males, 3rd class.","2a828bee":"## 6.2 AGE\nWhat is the age of passengers, how it relates to the chances of survival, and how it changes depending on class and gender.\n### 6.2.1 Age distribution\nWe have 263 missing values:  \n* 177 missing in the training dataset \n* 86 in the test dataset\n\nOverall age distribution (seaborn distplot) and descriptive statistics:","a95fd030":"Looks like they actually traveled alone, I will correct that data.","c1ebc9bb":"The distribution of Age is slightly right skewed. The Age vary from about **0.17** year to **80** years with mean = 29.88, and there don't seem to be any obvious outliers, but we will check it.","f5b49e1d":"# 5. First look: variables, NAs \n## 5.1 Variables\nFrom the data overview of the competition, we have a description of each variable:\n* PassengerId - unique identifier\n* Survived:\n        0 = No\n        1 = Yes\n* Pclass: Ticket class\n        1 = 1st, Upper\n        2 = 2nd, Middle\n        3 = 3rd, Lower\n* Name: full name with a title\n* Sex: gender\n* Age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n* Sibsp: Number of siblings \/ spouses aboard the Titanic. The dataset defines family relations in this way:\n        Sibling = brother, sister, stepbrother, stepsister\n        Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n* Parch: Number of parents \/ children aboard the Titanic. The dataset defines family relations in this way:\n        Parent = mother, father\n        Child = daughter, son, stepdaughter, stepson\n        Some children travelled only with a nanny, therefore parch=0 for them.\n* Ticket: Ticket number.\n* Fare: Passenger fare.\n* Cabin: Cabin number.\n* Embarked: Port of Embarkation:\n        C = Cherbourg\n        Q = Queenstown\n        S = Southampton","aadb45d3":"## 6.7 Gender\nLet's discover gender a little bit more:","09715ae7":"There were overall more males than females on board, it is fair for each ticket class, but in the 3rd class number of males more than twice bigger than females.  \nAlmost 600 male passengers traveled without family members and only about 200 females, but in usual and big families there were slightly more female passengers.","ea39484b":"We have 891 passengers in train dataset, 549 (61,6%) of them drowned and only 342 (38,4%) survived.  \nBut we know, that lifeboats could carry 53% of total passengers.","fe0b79c0":"* There were two large families with sizes 8 and 11 and all their members from the training dataset are drowned.  \n* Most of the passengers were traveling alone, percent of survivals not very large.  \n* The biggest proportion of survived passengers in group of people who had 4 family members on board. \n\nWe can observe that the percentage of survivors in people who have a family of 2, 3, 4 people is greater than in singles, then the percentage of survivors decreases as the family size increases.  \nI will create 'Family_size_group' variable with four categories: \n* single\n* usual (sizes 2, 3, 4)\n* big (5, 6, 7)\n* and large (all bigger then 7)","2abcd1ed":"Overall, we have information about 1309 passengers. I am guessing, this dataset contains data only about passengers, not crew members (we know, that Titanic carried 2224 people).","1cc2f50f":"Most passengers don't have cabin numbers ('U').  \nThe largest part of passengers with known cabin numbers were located on the  'C' deck and had 1st class ticket. 'C' deck is fifth by a percentage of the survivor.  \nThe largest surviving rate (among passengers with known cabin numbers in training dataset) had passengers from deck 'D'.  \nDeck A was the closest to the deck with lifeboats, but it is the last in surviving rate (except unknown and T deck). How did it happen?","13223536":"#### size 5\nThere are some inconsistencies in other categories, with fewer relatives.  \nLet's check people with 5-size family and group them by Surname:","88643117":"* All honor and military titles occupied the 1st class.  \n* All Reverends occupied 2nd class.\n* The biggest percent of the 3rd class is in the Master category.\n\nFor sure, there is a relationship between variables, and survival was influenced not only by the title itself but by a combination of factors that are to some extent interrelated. How class could relate on surviving? Let's go further and discover.","efc7029d":"We can observe that the distribution of prices for the second and third class is very similar. The distribution of first-class prices is very different, has a larger spread, and on average prices are higher. \n\nLet's add colours to our points to indicate surviving status of passenger (there will be only data from training part of the dataset):","5490e5d9":"Looks like the bigger passenger paid, the more chances to survive he had.  \nWhat about zero fare in the first class? Is it a mistake?","897f0622":"There are overall 263 missing Age values, 1 missing Fare, 1014 NAs in Cabin variable, and 2 in Embarked variable.  \n418 NA in Survived variable due to the absence of this information in the test dataset. I will not impute these missings in the current notebook :) So, when I will use this variable for visualization, there will be information only for the training part of the data.\n\nIn this notebook I will do some missing data handling for the combined dataset. But in the second part of my work (ML solution) this should be done based on what we know only about training data, to avoid any data leakage.","577c6512":"### 6.2.2 Age by surviving status\nDid age had a big influence on chances to survive?  \nTo visualize two age distributions, grouped by surviving status I am using boxlot and stripplot showed together:","be74abd3":"If we consider the survivors not by percentage within each group but by comparing the number of survivors between groups, then \"Miss\" title category is the luckiest one. The \"Mr\" category lost the biggest number of passengers.\n\nLet's also visualize, how Title categories and ticket classes are related:","ea2ece88":"2. Let's group Andersons with 7-size family by ticket number.  \nThere are  7 of them used the same ticket and travelled together. 5 children (each of them has 4 siblings) and 2 parents.\nTo passengers used separated tickets.","542e4ef7":"#### size 7\n1. Group people with family size = 7 by Surname  \nWe have 9 Andersons, who have family size of 7","f6bbc804":"The training part contains information about 891 passengers, described by 12 variables, including 1 target variable.  \nThe testing part contains 418 observations, i.e information about passengers, described by 11 variables (the test dataset doesn't contain target value.)\n\n2. Combine test and train data into one \"all_data\" DataFrame.   \nTo do so, I create a sequence of DataFrame objects and use pandas concat method. Terget values of testing data in resulting dataset will be NaN.  \nCheck the shape of the result DataFrame and take a look at the first 4 rows:","e1660271":"Age and Fare are continuous numeric variables.  \nPclass is integer, but in fact it is categorical variable, represented by 3 numbers.  \nAfter previous manipulations, Survived variable has type 'float', it's not correct, since it's categorical variable too, but it will not influence my EDA process, so I will let it be float for now.\n","68171ec2":"The most frequent title among passangers is Mister (Mr.) - general title or respect of an adult male. The second title by its frequency is Miss (unmarried woman), the third - Mrs. (married woman).  \nOther titles are less frequent, I will discover if I can combine them into particular groups. I am going to use titles as a fiture, but if they split the data too much, leaving just a few observations in each group, it can lead to overfitting. And for a general understanding of the data, it will be more convenient to put titles in clearer groups.\n\n* Master -  By the late 19th century, etiquette dictated that men be addressed as Mister, and boys as Master.\n* Mme -  Madame. a French title of respect equivalent to \u201cMrs.\u201d, used alone or prefixed to a woman's married name or title. I will add to \"Mrs\".\n* Mlle - Mademoiselle is a French courtesy title, abbreviated Mlle, traditionally given to an unmarried woman. The equivalent in English is \"Miss\". I will add to \"Miss\" group.\n* Dr. - Doctor is an academic title\n* Rev. - Reverend, is usually a courtesy title for Protestant Christian ministers or pastors.\n\n\"Military\" group of titles:\n* Capt. -Captain is a title for the commander of a military unit\n* Major is a military rank of commissioned officer status\n* Col. - The honorary title of Colonel is conferred by several states in the US and certain military units of the Commonwealth of Nations\n\n\"Honor\"  group of titles:\n* Sir -  is a formal English honorific address for men. Sir is used for men titled knights i.e. of orders of chivalry, and later also to baronets, and other offices. \n* the Countess - is a historical title of nobility\n* Lady - a formal title in the United Kingdom. A woman with a title of nobility or honorary \n* Jonkheer - is an honorific in the Low Countries denoting the lowest rank within the nobility. \n* Don - is an honorific prefix primarily used in Spain and the former Spanish Empire, Italy, Portugal, the Philippines, Latin America, Croatia, and Goa. (male)\n* Dona - Feminine form for don (honorific) a Spanish, Portuguese, southern Italian, and Filipino title, given as a mark of respect\n\n\nNot sure about the title Ms,we have only 2 passengers with this title, I will convert it to Miss.\n\nI created a dictionary of titles and I am using method \"map\" to create variable \"Title_category\".","3823a671":"The mean age of survived passenger is 28.34 which on 2.28 smaller than the mean age of drowned passengers (only passengers we know survived status for).   \nThe minimum age of drowned passengers is 1 y.o which is very sad.  \nThe maximum age of survived passenger is 80 y.o, let's check if there is no mistake.","d18738a7":"Large families are all from 3rd class and no one from the training part of the dataset is survived.  \nThe biggest proportion of the 1st class in the usual size of the family and the proportion of survivors in the usual family is the biggest."}}