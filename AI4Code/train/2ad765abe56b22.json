{"cell_type":{"400b8a41":"code","255a9f21":"code","91f4f2f3":"code","5b2db380":"code","45a9436e":"code","5f8bd35d":"code","ae8ec23c":"code","8f976fd6":"code","80403aa7":"code","36ecbbd8":"code","e80c5d8b":"code","b7f59a1a":"code","e43e762b":"code","1533b719":"code","f387f37c":"code","47bcfd4a":"code","6c770c5f":"code","af937ef2":"code","1f9f574b":"code","8dbee2c0":"code","86f2d69b":"code","afe6f13b":"code","6e828aab":"code","b9a89079":"code","5141ebdc":"code","5335eb7a":"markdown","9bee9b43":"markdown","af8563b3":"markdown","79a35ae6":"markdown","94bcc7f2":"markdown","550a2439":"markdown","138934b1":"markdown","a86b614f":"markdown","9b6b4d88":"markdown","f0e2c10b":"markdown","b274840d":"markdown","b6bd05c7":"markdown"},"source":{"400b8a41":"## Importing libraries\nimport pandas as pd\nimport numpy as np\nimport cv2\nimport os\nimport glob\nfrom scipy.spatial import distance\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential, models\nfrom tensorflow.keras.layers import Flatten, Dense, Conv2D, MaxPool2D\nfrom keras.preprocessing.image import ImageDataGenerator\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","255a9f21":"path = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/\"","91f4f2f3":"dataset = {\n    \"image_path\": [],\n    \"mask_status\": [],\n    \"where\": []\n}\n\nfor where in os.listdir(path):\n    for status in os.listdir(path+\"\/\"+where):\n        for image in glob.glob(path+where+\"\/\"+status+\"\/\"+\"*.png\"):\n            dataset[\"image_path\"].append(image)\n            dataset[\"mask_status\"].append(status)\n            dataset[\"where\"].append(where)\n            \ndataset = pd.DataFrame(dataset)\ndataset.head()","5b2db380":"## Choosing a random image to detect the face in the image\nface_model = cv2.CascadeClassifier('..\/input\/haarcascades\/haarcascade_frontalface_default.xml')\n\n## Choosing the image from the directory\nimg = cv2.imread(\"..\/input\/face-mask-detection\/images\/maksssksksss352.png\")\n\n## Converting the image to grayscale to apply haarcascade algorithm\nimg = cv2.cvtColor(img, cv2.IMREAD_GRAYSCALE)\n\n## Returns the x, y, w, h co-ordinates as numpy arrays for all the detected faces\ndetected_face = face_model.detectMultiScale(img)\n\n## Converting from grayscale to colored image\noutput_img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n\n## Drawing rectangle box around the faces in the image\nfor (x, y, w, h) in detected_face:\n    cv2.rectangle(output_img, (x,y), (x+w, y+h), (0, 0, 200), 2)\n    \n## Displaying the image\nplt.figure(figsize = (15, 15))\nplt.imshow(output_img)","45a9436e":"if len(detected_face) >= 2:\n    # Track to check for violation of social distance violation\n    label = [0 for i in range(len(detected_face))]\n    \n    # Getting the distance from one image to rest of the image  \n    for i in range(len(detected_face)-1):\n        for j in range(i+1, len(detected_face)):\n            # [:2] gets only x, y co ordinates\n            dist = distance.euclidean(detected_face[i][:2], detected_face[j][:2])\n            # Checking if the distance is less than 6 feet \n            if dist < 130:\n                # If less than 6 feet, flag the respective images\n                label[i] = 1\n                label[j] = 1\n    \n    # Coloring the image\n    new_image = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n    \n    # Coloring the rectangle around the image\n    for i in range(len(detected_face)):\n        (x, y, w, h) = detected_face[i]\n        if label[i] == 1:\n            # If its 1, then the distance is less than 6 feet so mark red\n            cv2.rectangle(new_image, (x, y), (x+w, y+h), (255, 0, 0), 2)\n        else:\n            # If not mark green \n            cv2.rectangle(new_image, (x, y), (x+w, y+h), (0, 255, 0), 2)\n         \n    plt.figure(figsize = (10, 10))\n    plt.imshow(new_image)","5f8bd35d":"## Checking for total number of images in the dataset\nprint(f\"With Mask:\", dataset.value_counts(\"mask_status\")[0])\nprint(f\"Without Mask:\", dataset.value_counts(\"mask_status\")[1])\n\n## Plotting the numbers\nsns.countplot(x = dataset[\"mask_status\"])","ae8ec23c":"plt.figure(figsize = (15, 10))\n\nfor i in range(9):\n    random = np.random.randint(1, len(dataset))\n    plt.subplot(3, 3, i+1)\n    plt.imshow(cv2.imread(dataset.loc[random,\"image_path\"]))\n    plt.title(dataset.loc[random,\"mask_status\"], size = 15)\n    plt.xticks([])\n    plt.yticks([])\n    \nplt.show()","8f976fd6":"## Splitting train test and Validation Dataset\ntrain_df = dataset[dataset[\"where\"] == \"Train\"]\ntest_df = dataset[dataset[\"where\"] == \"Test\"]\nvalid_df = dataset[dataset[\"where\"] == \"Validation\"]\n\nprint(train_df.head(10))\n\n## Shuffling the dataset \ntrain_df = train_df.sample(frac = 1)\ntest_df = test_df.sample(frac = 1)\nvalid_df = valid_df.sample(frac = 1)\n\nprint(\"\\n After Shuffling \\n\")\nprint(train_df.head(10))","80403aa7":"plt.figure(figsize = (15, 5))\nplt.subplot(1, 3, 1)\nsns.countplot(x = train_df[\"mask_status\"])\nplt.title(\"Training Dataset\", size = 10)\n\nplt.subplot(1, 3, 2)\nsns.countplot(x = test_df[\"mask_status\"])\nplt.title(\"Test Dataset\", size = 10)\n\nplt.subplot(1, 3, 3)\nsns.countplot(x = valid_df[\"mask_status\"])\nplt.title(\"Validation Dataset\", size = 10)\n\nplt.show()","36ecbbd8":"train_df = train_df.reset_index().drop(\"index\", axis = 1)\ntrain_df.head()","e80c5d8b":"## Reading all the image into a list and changing the size of the image to (150,150)\ndata = []\nimage_size = 150\n\nfor i in range(len(train_df)):\n    ## Converting the image into grayscale\n    img_array = cv2.imread(train_df[\"image_path\"][i], cv2.IMREAD_GRAYSCALE)\n\n    ## Resizing the array\n    new_image_array = cv2.resize(img_array, (image_size, image_size))\n\n    ##Encoding the image with the label\n    if train_df[\"mask_status\"][i] == \"WithMask\":\n        data.append([new_image_array, 1])\n    else:\n        data.append([new_image_array, 0])","b7f59a1a":"data = np.array(data)","e43e762b":"data[0][0].shape","1533b719":"## Shuffling the data to make sure everything is not in order\nnp.random.shuffle(data)","f387f37c":"## Looking at the training samples\n\nfig, ax = plt.subplots(2, 3, figsize=(10, 10))\n\nfor row in range(2):\n    for col in range(3):\n        image_index = row*100+col\n        \n        ax[row, col].axis(\"off\")\n        ax[row,col].imshow(data[image_index][0], cmap = \"gray\")\n    \n        if data[image_index][1] == 0:\n            ax[row, col].set_title(\"Without Mask\")\n        else:\n            ax[row, col].set_title(\"With Mask\")\n            \nplt.show()","47bcfd4a":"# datagen = ImageDataGenerator(rescale = 1.\/255)\n\n# train_generator=datagen.flow_from_dataframe(\n# dataframe=train_df,\n# directory=\"..\/input\",\n# x_col=\"image_path\",\n# y_col=\"mask_status\",\n# batch_size=80,\n# seed=42,\n# shuffle=False,\n# class_mode=\"binary\",\n# target_size=(150,150))","6c770c5f":"X = []\ny = []\n\n## Seperating X and y\nfor image in data:\n    X.append(image[0])\n    y.append(image[1])\n    \n## Converting X and y to numpy array as Tensorflow accepts only numpy arrays\nX = np.array(X)\ny = np.array(y)","af937ef2":"### Normalizing the data\nX = X\/255\n\n### Train Test Split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.2, random_state = 42)","1f9f574b":"model = Sequential()\nmodel.add(Conv2D(64, (3, 3), activation = \"relu\"))\nmodel.add(Conv2D(64, (3, 3), activation = \"relu\"))\nmodel.add(MaxPool2D(pool_size=(3, 3)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = \"relu\"))\nmodel.add(Dense(1, activation = \"sigmoid\"))\n# model.summary()","8dbee2c0":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.BinaryCrossentropy(),\n              metrics=['accuracy'])","86f2d69b":"# X_train = X_train.reshape(-1, 32, 150, 150)\n## Reshaping training set to match Conc2D\nX_train = X_train.reshape(len(X_train), X_train.shape[1], X_train.shape[2], 1)\nX_val = X_val.reshape(len(X_val), X_val.shape[1], X_val.shape[2], 1)\n\nhistory = model.fit(X_train, y_train, epochs=5, batch_size = 32)","afe6f13b":"model.summary()","6e828aab":"model.evaluate(X_val, y_val)","b9a89079":"prediction = model.predict_classes(X_val)","5141ebdc":"print(classification_report(y_val, prediction))\nprint(confusion_matrix(y_val, prediction))","5335eb7a":"We can observe that Default face detection Haar Cascading that we choose doesnt do a good job in identifying the faces. (Will replace this with other algorithms)","9bee9b43":"### Getting the directories, Path and Data","af8563b3":"### Building the model","79a35ae6":"### Detecting Social Distance","94bcc7f2":"### Visualising the distribution of train test and validation set","550a2439":"### Visualisations","138934b1":"##### Drawbacks:","a86b614f":"#### 1. Motivation<br>\nCovid-19 started in November 2019 and started to spread across the world killing 3.74 million people. To curb the spread were to wear masks and maintain 6 feet distance. Although vaccines are available now and the cases have come down in some few countries, many countries are still struggling. In order to aid in stopping the spread and identify individuals not following the safety policies, we aim to build an Object Detection and Convolution Neural Network based face mask and social distance detection system. The dataset to be used contains numerous images of instances where people are with and without mask and the model aims to identify people violating safety policies and flag the images with violation concerns. <br>\n","9b6b4d88":"### Face Detection using HAAR Cascade Algorithm","f0e2c10b":"**Objective:**\n\nIdentiying if a person is wearing facemask or not and violating any social distance norms.","b274840d":"### Preparing data to be loaded into the Model","b6bd05c7":"Note: Red showing that they are not 6 feet apart. Green shows that they are 6 feet apart"}}