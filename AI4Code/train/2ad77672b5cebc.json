{"cell_type":{"938a28ba":"code","a0fff008":"code","aa053339":"code","5aeb0074":"code","fdbf933e":"code","1403dd33":"code","60117839":"code","145f3f57":"code","085b6623":"code","5f3d87c6":"code","111e96cb":"code","1cb69f11":"code","bdd69b89":"code","dae0ecbf":"code","9664df11":"code","a502929a":"code","537dea62":"code","afbc5ff6":"code","e53d5b40":"code","62667710":"code","1955a31d":"code","c02f453b":"code","c78713f4":"code","92e12ba1":"markdown","08423db0":"markdown","ee27b03e":"markdown"},"source":{"938a28ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a0fff008":"!pip install pywaffle\n!pip install calmap","aa053339":"## import libraries\nimport pandas as pd\nimport requests\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nimport matplotlib.patches as mpatches\nfrom matplotlib.dates import date2num\nimport seaborn as sns\nfrom pywaffle import Waffle\nimport calmap\nfrom datetime import datetime as dt\nfrom datetime import timedelta\nimport random","5aeb0074":"## define the color scheme\n\ndark_hk = '#7d1709'\nhk = '#c44f54'\nsinovac = '#d20010'\nbiontech = '#007cc2'\nbloomberg = '#2800D7'\nothers = 'lightgray'\nbackground_color = \"#fafafa\"\ntext_color = \"#262626\"\n\nListedColormap([dark_hk, hk, sinovac, biontech, bloomberg, others, background_color])","fdbf933e":"## set default font\nfrom matplotlib import rcParams\nrcParams['font.family'] = 'serif'\nrcParams['text.color'] = text_color","1403dd33":"## fetch the data from the gov\nhk_covid = pd.read_csv('http:\/\/www.chp.gov.hk\/files\/misc\/enhanced_sur_covid_19_eng.csv')\n\n## preprocessing \ncolumns = [column.lower().replace('.','').replace('*','').replace(' ','_') for column in hk_covid.columns]\ncol_dict = {hk_covid.columns[i]: columns[i] for i in range(len(hk_covid.columns))}\nhk_covid.rename(columns= col_dict, inplace=True)\nhk_covid.report_date = pd.to_datetime(hk_covid.report_date, format='%d\/%m\/%Y', errors='coerce').apply(lambda x: x.date())\nhk_covid.date_of_onset = pd.to_datetime(hk_covid.date_of_onset, format='%d\/%m\/%Y', errors='coerce').apply(lambda x: x.date())","60117839":"## fetch the data from the gov\nhk_daily = pd.read_csv('https:\/\/static.data.gov.hk\/covid-vaccine\/bar_vaccination_date.csv')\nhk_summary = pd.read_csv('https:\/\/static.data.gov.hk\/covid-vaccine\/summary.csv')\nworld = pd.read_csv('https:\/\/covid.ourworldindata.org\/data\/owid-covid-data.csv')\nworld_vac = pd.read_csv('https:\/\/raw.githubusercontent.com\/owid\/covid-19-data\/master\/public\/data\/vaccinations\/vaccinations.csv')\n\n## stamp the date on which the data is fetched\ndata_date = dt.today().date()\n\n## preprocessing -- convert to datetime\nhk_daily.date = pd.to_datetime(hk_daily.date)\nworld.date = pd.to_datetime(world.date)\nworld_vac.date = pd.to_datetime(world_vac.date)\n\n## preprocessing -- convert percentage string to float\nhk_summary.firstDosePercent = hk_summary.firstDosePercent.apply(lambda x: float(x.strip('%'))\/100)\nhk_summary.secondDosePercent = hk_summary.secondDosePercent.apply(lambda x: float(x.strip('%'))\/100)","145f3f57":"## Daily confirmed cases\ndaily_case = hk_covid.groupby('report_date', as_index=False).agg({'case_no':'count'}) \ndaily_case['7d_ma'] = daily_case.case_no.rolling(window=7).mean()\n\nhk_death = world.loc[world.location=='Hong Kong'].dropna(subset=['new_deaths'])\nhk_death = hk_death.loc[hk_death.new_deaths > 0]\n\n## form the figure\nfig, ax = plt.subplots(figsize=(12,9), facecolor=background_color)\nax.plot(daily_case.report_date, daily_case.case_no, color='slategrey', alpha=0.6, label='Daily Case')\nax.plot(daily_case.report_date, daily_case['7d_ma'], color=bloomberg, label='7-day Moving Avg')\nax.plot(hk_death.date, hk_death.new_deaths, color=dark_hk, label='Death')\nax.set_xlabel('Date')\nax.set_ylabel('Infection')\nax.legend(facecolor=background_color, framealpha=0, loc='upper right', bbox_to_anchor=(0.95, 1))\n\n## add patches to show the total confirmed cases and deaths\nfig.patches.extend([plt.Rectangle((0.71,0.7),0.142,0.08,\n                                  fill=True, color='grey', alpha=0.1, zorder=1000,\n                                  transform=fig.transFigure, figure=fig)])\nfig.text(0.715,0.76,'Total Cases',fontfamily='monospace',fontsize=10)\nfig.text(0.715,0.715,f\"{int(world.loc[world.location=='Hong Kong']['total_cases'].max()):,d}\",fontfamily='monospace', \n         color=bloomberg,fontsize=25)\n\n\nfig.patches.extend([plt.Rectangle((0.71,0.6),0.142,0.08,\n                                  fill=True, color='grey', alpha=0.1, zorder=1000,\n                                  transform=fig.transFigure, figure=fig)])\nfig.text(0.715,0.66,'Total Deaths',fontfamily='monospace',fontsize=10)\nfig.text(0.715,0.615,f\"{int(world.loc[world.location=='Hong Kong']['total_deaths'].max()):,d}\",\n         fontfamily='monospace', color=dark_hk,fontsize=25)\n\n\n## title and subtitle and date\nfig.text(0.055,1.02,'Daily Updates',fontfamily='serif',fontsize=40,fontweight='bold')\nfig.text(0.055,0.92,f'After 4 waves of infections, the daily confirmed cases have \\nreturned to a steady level.',color='gray',fontfamily='arial',fontsize=20)\nfig.text(0.055,0.02,f'as on {data_date}',color='gray',fontfamily='arial',fontsize=13, style='italic')\n\n# Removing axis and spines\nfor s in ['top', 'right', 'bottom', 'left']:\n    ax.spines[s].set_visible(False) \n\n# remove y ticks\nax.tick_params(axis=u'both', which=u'both',length=0)\n\nax.set_facecolor(background_color)\n# plt.savefig('daily_updates.png', dpi=300,bbox_inches = \"tight\")\nplt.show()\n","085b6623":"## covid infection per 1000 population\nworld.head()","5f3d87c6":"## timeseries of vaccination progress - hk vs regional countries\n\n## form the figure\nfig, ax = plt.subplots(figsize=(12,9), facecolor=background_color)\nax = sns.lineplot(data=world, x='date',y=world['total_cases_per_million']\/1000,hue='location', palette='Greys_r', alpha=0.1, legend=False)\nax = sns.lineplot(data=world[world.location=='Hong Kong'], x='date',y=world[world.location=='Hong Kong']['total_cases_per_million']\/1000, label='Hong Kong', color=bloomberg, legend=False)\ndummy_date = world.date[0]\nax.hlines(0, xmin=dummy_date, xmax=dummy_date, label='World',color='silver')\nax.set_xlabel('Date',fontsize=11)\nax.set_ylabel(\"Cummulated Infection per Million (000s)\", fontsize=11)\n\n## plot a point in HK\nhk_per_mil = world[world.location=='Hong Kong']['total_cases_per_million'].tolist()[-1]\/1000\nhk_date = world[world.location=='Hong Kong']['date'].tolist()[-1]\nax.scatter(y=hk_per_mil, x=hk_date, s=100, color=bloomberg, edgecolor='white', linewidths= 1, zorder=20) ## end scatter points\nax.legend(facecolor=background_color, framealpha=0, loc='upper right', bbox_to_anchor=(0.95, 1))\n\n## title and subtitle and date\nfig.text(0.055,0.98,\"Infections per Million\",fontfamily='serif',fontsize=40,fontweight='bold')\nfig.text(0.055,0.90,f\"Hong Kong has done an exception job in curbing \\nthe spread of Covid to say the least.\",color='gray',fontfamily='arial',fontsize=20)\nfig.text(0.055,0.05,f'as on {data_date}',color='gray',fontfamily='arial',fontsize=13, style='italic')\n\n\n# Removing axis and spines and set spine color\nfor s in ['top', 'right', 'bottom', 'left']:\n    ax.spines[s].set_visible(False)\nax.spines['left'].set_color('#3b3b3b')    \nax.spines['bottom'].set_color('#3b3b3b')\n    \n## remove ticks on x and y axis\nax.tick_params(axis=u'both', which=u'both',length=0)\nax.xaxis.set_tick_params(labelsize=11)\nfig.set_facecolor(background_color)\nax.set_facecolor(background_color)\n# plt.savefig('covid_per_million.png',dpi=300,bbox_inches='tight')\nplt.show()","111e96cb":"## how long did it take for the government to reduce 80% \n\ndaily_case.report_date = pd.to_datetime(daily_case.report_date)\n## define the date range for the 4 waves\nwave1 = daily_case.loc[(daily_case['report_date'] > '2020-01-23') & (daily_case['report_date'] <= '2020-5-10')]\nwave2 = daily_case.loc[(daily_case['report_date'] > '2020-05-10') & (daily_case['report_date'] <= '2020-10-10')]\nwave3 = daily_case.loc[(daily_case['report_date'] > '2020-10-10') & (daily_case['report_date'] <= '2021-3-10')]\nwave4 = daily_case.loc[(daily_case['report_date'] > '2021-2-15') & (daily_case['report_date'] <= '2021-7-10')]\nwaves = [wave1, wave2, wave3, wave4]\n\ncovid_wave = []\nmax_date = []\nmax_case = []\nmin_date = []\nmin_case = []\n\npercent = 0.9   ## declare percentage \n\nfor ix, wave in enumerate(waves):\n    wave_max = wave.loc[wave.case_no==wave.case_no.max()]\n    for i in range(wave_max.index[0],wave.index[-1]):\n        maxx = wave_max.case_no.values[0]\n        if wave.case_no[i] <= maxx*(1-percent):\n            covid_wave.append(f'Wave {ix+1}')\n            max_date.append(wave_max.report_date.tolist()[0])\n            min_date.append(wave.loc[i].report_date)\n            max_case.append(maxx)\n            min_case.append(wave.loc[i].case_no)\n            break\n\n## form df with the lists\nwaves_df = pd.DataFrame({'wave': covid_wave,\n            'max_date': max_date,\n            'max_case': max_case,\n            'min_date': min_date,\n            'min_case': min_case})\n\n## calculate the days difference between the max and min\nwaves_df['days_taken'] = (waves_df.min_date - waves_df.max_date).dt.days","1cb69f11":"waves_df","bdd69b89":"## reverse the order \nwaves_df = waves_df.loc[::-1]\n\n## form the figure\nfig, ax = plt.subplots(figsize=(12,6), facecolor=background_color)\nax.hlines(y=waves_df.wave, xmin=(waves_df.max_date[0]-timedelta(days=30)), xmax=(waves_df.min_date[3]+timedelta(days=30)), color='gray', alpha=0.7, linewidth=1, linestyles='dashed')\nax.scatter(y=waves_df.wave, x=waves_df.max_date, s=200, color=dark_hk, label='Peak', edgecolor='white',linewidths=3, zorder=10) ## start scatter points\nax.hlines(y=waves_df.wave, xmin=waves_df.max_date, xmax=waves_df.min_date, color='grey', linewidth=3, zorder=1) ## line in between points\nax.scatter(y=waves_df.wave, x=waves_df.min_date, s=200, color='lightsteelblue',label='Trough (10% of peak)', edgecolor='white', linewidths=3, zorder=20,) ## end scatter points\nax.set_xlabel('Date')\nax.legend(facecolor=background_color, framealpha=0, loc='upper right', bbox_to_anchor=(0.95, 1.1))\n\n## annotate\nfor i in range(len(waves_df)):\n    ax.annotate(text=f'{waves_df.days_taken[i]} Days', xy=(waves_df.min_date[i]+timedelta(days=10),waves_df.wave[i]), fontsize=15, zorder=30)\n\n## data for line plot\ndata_ = daily_case.loc[(daily_case.report_date >= waves_df.max_date[0]-timedelta(days=30)) & (daily_case.report_date <= waves_df.min_date[3]+timedelta(days=30))]\nax2 = ax.twinx()\nax2.plot(data_.report_date, data_.case_no,color='gray', alpha=0.4, linewidth=1)\nax2.set_yticks([]) ## empty y axis\n\n## title and subtitle and date\nfig.text(0.055,1.15,'Reaction Time to 4 Waves',fontfamily='serif',fontsize=40,fontweight='bold')\nfig.text(0.055,1,f'It took almost 80 days to reduce the daily infections by 90% in the 3rd Wave, \\ncompared to an average of 19 days in the other 3 waves.',color='gray',fontfamily='arial',fontsize=20)\nfig.text(0.055,0.02,f'as on {data_date}',color='gray',fontfamily='arial',fontsize=13, style='italic')\n\n# Removing axis and spines\nfor s in ['top', 'right', 'bottom', 'left']:\n    ax.spines[s].set_visible(False) \n    ax2.spines[s].set_visible(False)\n    \n# remove y ticks\nax.tick_params(axis=u'both', which=u'both',length=0)\n\nax.set_facecolor(background_color)\n# plt.savefig('waves.png', dpi=300,bbox_inches = \"tight\")\nplt.show()\n","dae0ecbf":"hk_summary","9664df11":"## HK vaccination rate (note: this percentage is based on the population eligible for taking the vaccine instead of the entire population)\nsecond_dose = round(hk_summary.secondDosePercent[0]*100)\nfirst_dose = round(hk_summary.firstDosePercent[0]*100)\nawaiting = 100 - first_dose\n\n## form the figure\nfig = plt.figure(figsize=(5, 5),dpi=150,facecolor=background_color,\n    FigureClass=Waffle,\n    rows=10,colors=[dark_hk,hk,others],\n    columns=10,vertical=True,\n    values={'Second Dose %': second_dose,'First Dose %': first_dose - second_dose, 'Awaiting': awaiting},\n    legend={'loc': 'lower left', 'bbox_to_anchor': (-0.015, -0.07), 'ncol': 3, 'framealpha': 0,'fontsize':7})\n\n## title and subtitle and date\nfig.text(0.035,1.09,'HK Vaccination Rate',fontfamily='serif',fontsize=20,fontweight='bold')\nfig.text(0.035,1.01,f'Nearly {first_dose}% of the population have\\nreceived their first vaccine dose.',color='gray',fontfamily='arial',fontsize=10)\nfig.text(0.035,-0.02,f'as on {data_date}',color='gray',fontfamily='arial',fontsize=6, style='italic')\n\nfig.set_facecolor(background_color)\n# plt.savefig('hk_vac_waffle.png', dpi=300,bbox_inches = \"tight\")\nplt.show()","a502929a":"## HK vaccination absolute value\n\n## declare the variables\nsecond_dose = hk_summary.secondDoseTotal[0]\nfirst_dose = hk_summary.firstDoseTotal[0]\nfirst_dose_only = first_dose - second_dose\nawaiting = int((hk_summary.firstDoseTotal[0]\/hk_summary.firstDosePercent[0]) - first_dose)\n\n\n## form the figure\nfig, ax = plt.subplots(figsize=(18, 3.5))\nax.barh(hk_summary.index, second_dose, \n        color=dark_hk, alpha=0.9, label='Second Dose')\nax.barh(hk_summary.index, first_dose_only, left=second_dose,\n        color=hk, alpha=0.9, label='First Dose')\nax.barh(hk_summary.index, awaiting, left=first_dose,\n        color='lightgrey', alpha=0.9, label='Awaiting')\n\n## annotate the bar chart - second dose\nax.annotate(f\"{second_dose:,d}\", \n                   xy=(second_dose\/2, 0.05),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='serif',\n                   color='white')\nax.annotate(f\"Completed 2 Doses\", \n                   xy=(second_dose\/2, -0.1),\n                   va = 'top', ha='center',fontsize=17, fontweight='light', fontfamily='serif',\n                   color='white')\n\n## annotate the bar chart - first dose only\nax.annotate(f\"{first_dose_only:,d}\", \n                   xy=(second_dose+first_dose_only\/2, 0),\n                   va = 'center', ha='center',fontsize=25, fontweight='light', fontfamily='serif',\n                   color='white', rotation=270)\nax.annotate(f\"1 Dose Only\", \n                   xy=(second_dose+first_dose_only\/2-80000, 0),\n                   va = 'center', ha='right',fontsize=12.5, fontweight='light', fontfamily='serif', \n                   color='white',rotation=270)\n\n## annotate the bar chart - unvaccinated\nax.annotate(f\"{awaiting:,d}\", \n                   xy=(first_dose+awaiting\/2, 0.05),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='serif')\nax.annotate(f\"Unvaccinated\", \n                   xy=(first_dose+awaiting\/2, -0.1),\n                   va = 'top', ha='center',fontsize=17, fontweight='light', fontfamily='serif')\n\n\n## title and subtitle and date\nfig.text(0.125,1.1,'HK Vaccination Count',fontfamily='serif',fontsize=40,fontweight='bold')\nfig.text(0.125,0.95,f'Over {round(awaiting,-5):,d} in the city still have not received their first dose.',color='gray',fontfamily='arial',fontsize=20)\nfig.text(0.125,0.05,f'as on {data_date}',color='gray',fontfamily='arial',fontsize=13, style='italic')\n\n\n# Removing axis and spines\nax.axis('off')\nfig.set_facecolor(background_color)\n# plt.savefig('hk_vac_count.png', dpi=300,bbox_inches = \"tight\")\nplt.show()","537dea62":"## biontech vs sinovac doses comparison\n\n## week of vaccination programme\nhk_daily['week'] = hk_daily.date.apply(lambda x: x.week - hk_daily.date[0].week+1)\nweekly_vac = hk_daily.groupby('week').agg({'totalDose.daily.sinovac': 'sum', 'totalDose.daily.biontech': 'sum', 'totalDose.daily.total':'sum'})\n\n## form the figure\nfig, ax = plt.subplots(figsize=(16,10))\nax.fill_between(x=weekly_vac.index, y1=weekly_vac['totalDose.daily.biontech'], y2=0, color=[biontech])\nax.fill_between(x=weekly_vac.index, y1=weekly_vac['totalDose.daily.sinovac']*-1, y2=0, color=[sinovac], alpha=0.9)\n\n## annotate the graph\nax.annotate(f\"{sum(weekly_vac['totalDose.daily.biontech']):,d} BioNTech Doses\", \n                   xy=(weekly_vac.index[-1]\/2, 40000),\n                   va = 'center', ha='center',fontsize=20, fontweight='light', fontfamily='serif',\n                   color='white')\nax.annotate(f\"{sum(weekly_vac['totalDose.daily.sinovac']):,d} Sinovac Doses\", \n                   xy=(weekly_vac.index[-1]\/2, -40000),\n                   va = 'center', ha='center',fontsize=20, fontweight='light', fontfamily='serif',\n                   color='white')\n\n## title and subtitle and date\nbion_sino = round(sum(weekly_vac['totalDose.daily.biontech']) - sum(weekly_vac['totalDose.daily.sinovac']),-5)\nfig.text(0.145,0.9,'BioNTech or Sinovac?',fontfamily='serif',fontsize=40,fontweight='bold')\nfig.text(0.145,0.82,f'With over {bion_sino:,d} fewer doses administered than BioNTech, \\napparently people are wary of products manufactured in China.',color='gray',fontfamily='arial',fontsize=20)\nfig.text(0.145,0.05,f'as on {data_date}',color='gray',fontfamily='arial',fontsize=13, style='italic')\n\n## empty y axis\nax.set_yticks([])\n\n## set x axis labels and font\nplt.xticks(weekly_vac.index, fontfamily='serif', fontsize=12)\nax.set_xlabel('Week',fontfamily='serif', fontsize=12)\n\n# Removing axis and spines\nfor s in ['top', 'right', 'bottom', 'left']:\n    ax.spines[s].set_visible(False)   \n    \nfig.set_facecolor(background_color)\nax.set_facecolor(background_color)\n# plt.savefig('bio_sino.png', dpi=300,bbox_inches = \"tight\")\nplt.show()\n","afbc5ff6":"## calendar plot require df.index as datetime\nhkdata = hk_daily.set_index('date')\n\n## form the figure\nplt.figure(figsize=(12,10), facecolor='grey')\ncalmap.calendarplot(hkdata['totalDose.daily.total'],fig_kws={'figsize': (12,9), 'facecolor': background_color}, yearlabels=False, fillcolor='whitesmoke', yearlabel_kws={'color':'black', 'fontsize':14})\nplt.text(-1,10,'Vaccination Heatmap', fontsize=30, fontweight='bold')\nplt.text(-1,8.3,'How the vaccination program is progressing overtime.', fontfamily='arial', fontsize=20, color='gray')\n# plt.savefig('vac_heatmap.png', dpi=300, bbox_inches = \"tight\")\nplt.show()","e53d5b40":"## which weekday more popular for vaccination\n\n## get weekday from a datetime object\nhk_daily['weekday'] = hk_daily.date.apply(lambda x: x.strftime(\"%A\"))\nweekday_vac = hk_daily.groupby('weekday').agg({'date':'min','totalDose.daily.sinovac': 'mean', 'totalDose.daily.biontech': 'mean', 'totalDose.daily.total':'mean'})\nweekday_vac['order'] = [4,0,5,6,3,1,2]\nweekday_vac = weekday_vac.reset_index().set_index('order').sort_values('order')\ndaily_max = weekday_vac[weekday_vac['totalDose.daily.total']==weekday_vac['totalDose.daily.total'].max()]\n\n## form the figure\nfig, ax = plt.subplots(figsize=(12,6))\nax.hlines(y=weekday_vac.weekday[::-1], xmin=0, xmax=weekday_vac['totalDose.daily.total'][::-1], color='grey', linewidth=3, alpha=0.4)\nax.scatter(y=weekday_vac.weekday[::-1], x=weekday_vac['totalDose.daily.total'][::-1], s=200, color=dark_hk)\nax.scatter(y=daily_max.weekday, x=daily_max['totalDose.daily.total'], s=900, color=hk)\nplt.yticks(fontname = \"serif\",fontsize=12)\nplt.xticks(fontname = \"serif\",fontsize=12)\n\n## xlabel & adjust position\nax.set_xlabel('Avg. Daily Dose',fontfamily='serif', fontsize=12)\nax.xaxis.set_label_coords(0.45, -0.055)\n\n## highest\nax.annotate(f'{int(round(daily_max[\"totalDose.daily.total\"],-3)\/1000)}K', xy=(daily_max['totalDose.daily.total'],daily_max.weekday),\n            color='white', fontsize=13, fontfamily='serif', va='center', ha='center', zorder=20)\n\n## title and subtitle and date\nfig.text(0.035,1.05,'The best day for a jab?',fontfamily='serif',fontsize=40,fontweight='bold')\nfig.text(0.035,0.93,f'You can expect a very crowded vaccination centre \\non Fridays and Saturdays.',color='gray',fontfamily='arial',fontsize=20)\nfig.text(0.035,0.01,f'as on {data_date}',color='gray',fontfamily='arial',fontsize=13, style='italic')\n\n# Removing axis and spines\nfor s in ['top', 'right', 'bottom', 'left']:\n    ax.spines[s].set_visible(False)   \n    \n## remove ticks on x and y axis\nax.tick_params(axis=u'both', which=u'both',length=0)\n    \nfig.set_facecolor(background_color)\nax.set_facecolor(background_color)\n# plt.savefig('best_day.png', dpi=300,bbox_inches = \"tight\")\nplt.show()","62667710":"## time series analysis of vaccination in hk\n\n## key events relevant to vaccination - lucky draw, deaths, etc.\nkey_events = [\n(dt(2021,6,2), 'Sino apartment lucky draw annoucement'),\n(dt(2021,3,19), '1st BioNTech-related death'),\n(dt(2021,2,28), '1st Sinovac-related death'),\n(dt(2021,3,24), 'Defect found on BioNTech packaging'),\n(dt(2021,4,27), 'Vaccine Bubble announcement'),\n(dt(2021,6,14), 'Lowered min. age to 12 for BioNTech'),\n(dt(2021,8,2), 'Mandatory vaccination \\nfor civil servant annoucement')\n]\n\nweekly_vac = hk_daily.groupby('week').agg({'date':'min','totalDose.daily.sinovac': 'sum', 'totalDose.daily.biontech': 'sum', 'totalDose.daily.total':'sum'})\n\n\n## form the figure\nfig, ax = plt.subplots(figsize=(12,9),facecolor=background_color)\nax.plot(weekly_vac.date, weekly_vac['totalDose.daily.biontech']\/1000, color=biontech,alpha=0.7, label='BioNTech')\nax.plot(weekly_vac.date, weekly_vac['totalDose.daily.sinovac']\/1000, color=sinovac, alpha=0.7, label='Sinovac')\nax.plot(weekly_vac.date, weekly_vac['totalDose.daily.total']\/1000, color='forestgreen', alpha=0.7, label='Total')\nfor event in key_events:\n    rand_ = random.randrange(-30,50,10)\n    ax.scatter(x=event[0],y=490+rand_, marker='v', s=120,color='firebrick', edgecolors='white', alpha=0.5)\n    ax.vlines(x=event[0],ymin=0, ymax=490+rand_, color='firebrick', linestyle='--',linewidth=1, alpha=0.4)\n    ax.annotate(text=event[1], xy=(event[0]+timedelta(days=2),490+rand_),fontfamily='arial', fontsize=10)\n    \nax.set_ylabel('Weekly Doses (000s)',fontfamily='serif', fontsize=10)\nax.yaxis.set_label_coords(-0.09, 0.5)\nax.legend(facecolor=background_color, framealpha=0, loc='upper right', bbox_to_anchor=(1, 1.1))\n\n## second x axis in terms of week #\nax2 = ax.twiny()\nax2.set_xticks(weekly_vac.index)\nax2.xaxis.set_ticks_position('bottom')\nax2.spines['bottom'].set_position(('outward', 20))\nax2.set_xlabel('Week # \/ Date')\nax2.xaxis.set_label_coords(0.5, -0.1)\n\n## title and subtitle and date\nfig.text(0.035,1.02,'Weekly Doses Adminstered',fontfamily='serif',fontsize=40,fontweight='bold')\nfig.text(0.035,0.92,f'How have the vaccination numbers changed over time \\nand in response to specific events and initiatives?.',color='gray',fontfamily='arial',fontsize=20)\nfig.text(0.035,0.01,f'as on {data_date}',color='gray',fontfamily='arial',fontsize=13, style='italic')\n    \n# Removing axis and spines\nfor s in ['top', 'right', 'bottom', 'left']:\n    ax.spines[s].set_visible(False) \n    ax2.spines[s].set_visible(False)\n\n# remove y ticks\nax.tick_params(axis=u'both', which=u'both',length=0)\n\nax.set_facecolor(background_color)\n# plt.savefig('weekly_doses.png', dpi=300,bbox_inches = \"tight\")\nplt.show()\n","1955a31d":"## vaccination rate vs rest of the world\nworld_latest = world_vac.groupby(['location', 'iso_code'],as_index=False).agg({'date':'max','people_vaccinated':'max','people_fully_vaccinated':'max'})\n\n## join total population\nworld_latest = world_latest.merge(world.loc[world.date == max(world_vac.date)][['iso_code','population']], left_on='iso_code', right_on='iso_code')\n\n## vaccination rate\nworld_latest['vaccination_rate'] = (world_latest['people_vaccinated']\/world_latest['population'])*100\nworld_latest['full_vaccination_rate'] = (world_latest['people_fully_vaccinated']\/world_latest['population'])*100\n\n## sort the dataframe by vac. rate\nworld_latest = world_latest.dropna(subset=['vaccination_rate','full_vaccination_rate']).sort_values('vaccination_rate', ascending=True).reset_index(drop=True)\ntop = 10\nworld_latest_top = world_latest.tail(top)\nworld_latest_hk = world_latest.loc[world_latest.location == 'Hong Kong'].reset_index()\nhk_position = len(world_latest)+1-world_latest.loc[world_latest.location=='Hong Kong'].index.tolist()[0]\n\n\n## form the figure\nfig, (ax1,ax2) = plt.subplots(2,1, figsize=(12,7), sharex=True, gridspec_kw={'height_ratios': [top, 0.7]})\nax1.barh(y=[f'{x} {y}' for x,y in zip(range(1,len(world_latest_top)+1)[::-1],world_latest_top.location)], width=world_latest_top.vaccination_rate, color='lightgrey', height=0.7)\nax1.barh(y=[f'{x} {y}' for x,y in zip(range(1,len(world_latest_top)+1)[::-1],world_latest_top.location)], width=world_latest_top.full_vaccination_rate, color='slategrey', alpha=0.7, height=0.7)\nax2.barh(y=f'{hk_position} Hong Kong', width=world_latest_hk.vaccination_rate, color=hk, alpha=0.5, height=0.3)\nax2.barh(y=f'{hk_position} Hong Kong', width=world_latest_hk.full_vaccination_rate, color=dark_hk, alpha=0.7, height=0.3)\nax2.set_xlabel(\"Vaccination Progress (%)\", fontsize=11)\nfig.tight_layout()\n\n## annotate the values\nfor x, y in zip([f'{x} {y}' for x,y in zip(range(1,len(world_latest_top)+1)[::-1],world_latest_top.location)],world_latest_top.vaccination_rate):\n    ax1.annotate(f'{round(y,1)}%', xy=(y+1, x), fontsize=10)\nfor x, y in zip([f'{x} {y}' for x,y in zip(range(1,len(world_latest_top)+1)[::-1],world_latest_top.location)],world_latest_top.full_vaccination_rate):\n    ax1.annotate(f'{round(y,1)}%', xy=(y\/2, x), fontsize=10, color='white')\n\nax2.annotate(f'{round(world_latest_hk.vaccination_rate[0],1)}%', xy=(world_latest_hk.vaccination_rate[0]+1, f'{hk_position} Hong Kong'), fontsize=10, color='black')\nax2.annotate(f'{round(world_latest_hk.full_vaccination_rate[0],1)}%', xy=(world_latest_hk.full_vaccination_rate[0]\/2, f'{hk_position} Hong Kong'), fontsize=10, color='white')\n\n    \n## customize legend with mpatches\nfirst_patch = mpatches.Patch(color='slategrey', label='Fully Vaccinated')\nsecond_patch = mpatches.Patch(color='lightgrey', label='Vaccinated')\nplt.legend(handles=[first_patch,second_patch],bbox_to_anchor=(0.87,0.45),loc='lower center',ncol=1,\n          facecolor=background_color, framealpha=0)\n\n## title and subtitle and date\nfig.text(0.035,1.06,\"Vaccination Progress\",fontfamily='serif',fontsize=40,fontweight='bold')\nfig.text(0.035,1.01,f\"How does Hong Kong's vaccination progress compare to the rest of the world?\",color='gray',fontfamily='arial',fontsize=20)\nfig.text(0.035,-0.05,f'as on {data_date}',color='gray',fontfamily='arial',fontsize=13, style='italic')\nfig.text(0.5,0.17,f'...',color='lightgrey',fontfamily='serif',fontsize=30, fontweight='bold')\n\n\n# removing axis and spines\nfor s in ['top', 'right', 'bottom', 'left']:\n    ax1.spines[s].set_visible(False)  \n    ax2.spines[s].set_visible(False)  \n    \n## remove ticks on x and y axis\nax1.tick_params(axis=u'both', which=u'both',length=0)\nax2.tick_params(axis=u'both', which=u'both',length=0)\nax2.xaxis.set_tick_params(labelsize=11)\nfig.set_facecolor(background_color)\nax1.set_facecolor(background_color)\nax2.set_facecolor(background_color)\n# plt.savefig('vac_progress_barh.png', dpi=300,bbox_inches = \"tight\")\nplt.show()","c02f453b":"## cumulative vaccination rate vs rest of the world over time\nworld_cum = world_vac[(~world_vac.iso_code.str.contains('OWID'))]\n\n## join total population\nworld_cum = world_cum.merge(world.loc[world.date == max(world_vac.date)][['iso_code','population']], left_on='iso_code', right_on='iso_code')\n\n## vaccination rate\nworld_cum['vaccination_rate'] = (world_cum['people_vaccinated']\/world_cum['population'])*100\nworld_cum['full_vaccination_rate'] = (world_cum['people_fully_vaccinated']\/world_cum['population'])*100\n\n## drop na\nworld_cum = world_cum.dropna(subset=['people_vaccinated','population'])\n\ncountries = world_cum.groupby('location').agg({'vaccination_rate':'max'}).sort_values('vaccination_rate').tail(15)['vaccination_rate'].index","c78713f4":"## timeseries of vaccination progress - hk vs regional countries\ncountries = ['Singapore', 'Taiwan', 'China', 'Japan','Macao', 'Thailand', 'South Korea', 'Malaysia', 'Philippines']\n\n## time series analysis of vaccination in hk\nfig, ax = plt.subplots(figsize=(12,9), facecolor=background_color)\nax = sns.lineplot(data=world_cum[world_cum.location.isin(countries)], x='date',y='vaccination_rate',hue='location', palette='Blues', alpha=0.8, legend=False)\nax = sns.lineplot(data=world_cum[world_cum.location=='Hong Kong'], x='date',y='vaccination_rate', color=hk, legend=False)\nax.set_xlabel('Date',fontsize=11)\nax.set_ylabel(\"Cummulated Vaccination Progress (%)\", fontsize=11)\n\n## plot the dot at the end of the line\nworld_ = world_cum[world_cum.location.isin(countries+['Hong Kong'])].groupby('location',as_index=False).agg({'date':'max','vaccination_rate':'max'})\nax = sns.scatterplot(data=world_.loc[world_.location!='Hong Kong'], x='date', y='vaccination_rate', s=100, hue='location', palette='Blues', legend=False)\nax = sns.scatterplot(data=world_.loc[world_.location=='Hong Kong'], x='date', y='vaccination_rate', s=180, color=hk, legend=False)\n\nfor i in range(len(world_)):\n    ax.annotate(f'{world_.location[i]} ({round(world_.vaccination_rate[i],2)}%)', (max(world_.date)+timedelta(days=10),world_.vaccination_rate[i]))\n\n## title and subtitle and date\nfig.text(0.055,1.0,\"Vaccination Progress, Regionwise\",fontfamily='serif',fontsize=40,fontweight='bold')\nfig.text(0.055,0.95,f\"How does Hong Kong's vaccination progress compare to other countries in the region?\",color='gray',fontfamily='arial',fontsize=20)\nfig.text(0.055,0.05,f'as on {data_date}',color='gray',fontfamily='arial',fontsize=13, style='italic')\n\n# removing axis and spines and set spine color\nfor s in ['top', 'right']:\n    ax.spines[s].set_visible(False)\nax.spines['left'].set_color('#3b3b3b')    \nax.spines['bottom'].set_color('#3b3b3b')\n    \n## remove ticks on x and y axis\nax.tick_params(axis=u'both', which=u'both',length=0)\nax.xaxis.set_tick_params(labelsize=11)\nfig.set_facecolor(background_color)\nax.set_facecolor(background_color)\n# plt.savefig('vac_progress_region.png',dpi=300,bbox_inches='tight')\nplt.show()\n","92e12ba1":"## Confirmed Cases","08423db0":"## Vaccination Program","ee27b03e":"Hello fellow Kagglers! This is my first Kaggle notebook and in this notebook I will focus on visualizing the Covid-19 status in Hong Kong, including the infection situation and vaccination progress. Let's see what interesting insights we can get out of them!\n\n\n**Reference**\n\nI borrowed a lot of my ideas and learned a great deal from: https:\/\/www.kaggle.com\/joshuaswords. \n\n**Data**\n\nThe data used in this notebook are from [Our World in Data](https:\/\/ourworldindata.org\/coronavirus) and the [Hong Kong Government](https:\/\/www.covidvaccine.gov.hk\/en\/dashboard)"}}