{"cell_type":{"b5040c53":"code","7f7f8010":"code","6e64a6a1":"code","70ae82e3":"code","4eba749d":"code","46adf3d1":"code","835b72aa":"code","01ec311b":"code","6b9ecee3":"code","ed4283ea":"code","86842056":"code","99e5e7f9":"code","e2fae5e7":"code","88d37ef9":"code","4c69ff1e":"code","9db30bcf":"code","51a40a2d":"code","3a695844":"code","fe505f0b":"code","6e448069":"code","c5e12ebe":"markdown","17b1c50f":"markdown","c5d3012c":"markdown"},"source":{"b5040c53":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f7f8010":"fashion_mnist=keras.datasets.fashion_mnist\n(train_images,train_label),(test_images,test_label)=fashion_mnist.load_data()","6e64a6a1":"print(len(train_images),len(train_label))\nprint(len(test_images),len(test_label))","70ae82e3":"plt.imshow(train_images[2], interpolation='nearest')\nplt.show()","4eba749d":"train_images[0].shape","46adf3d1":"pt_x_train=[]\npt_y_train=[]\n\npt_x_test=[]\npt_y_test=[]\n\ntl_x_train=[]\ntl_y_train=[]\n\ntl_x_test=[]\ntl_y_test=[]\n\nm=train_images.shape[0]\nfor i in range(m):\n    if train_label[i]<5:\n        pt_x_train.append(train_images[i]\/255)\n        pt_y_train.append(train_label[i])\n    else:\n        tl_x_train.append(train_images[i]\/255)\n        tl_y_train.append(train_label[i])\n        \n        \nn=test_images.shape[0]\nfor i in range(n):\n    if test_label[i]<5:\n        pt_x_test.append(test_images[i]\/255)\n        pt_y_test.append(test_label[i])\n    else:\n        tl_x_test.append(test_images[i]\/255)\n        tl_y_test.append(test_label[i])\n        ","835b72aa":"pt_x_train=np.asarray(pt_x_train).reshape(-1,28,28,1)\npt_x_test=np.asarray(pt_x_test).reshape(-1,28,28,1)\n\ntl_x_train=np.asarray(tl_x_train).reshape(-1,28,28,1)\ntl_x_test=np.asarray(tl_x_test).reshape(-1,28,28,1)","01ec311b":"from keras.utils import np_utils\npt_y_train=np_utils.to_categorical(np.asarray(pt_y_train))\npt_y_test=np_utils.to_categorical(np.asarray(pt_y_test))\n\ntl_y_train=np_utils.to_categorical(np.asarray(tl_y_train))\ntl_y_test=np_utils.to_categorical(np.asarray(tl_y_test))","6b9ecee3":"print(pt_x_train.shape,tl_x_train.shape)\nprint(pt_x_test.shape,tl_x_test.shape)","ed4283ea":"print(pt_y_train.shape,tl_y_train.shape)\nprint(pt_y_test.shape,tl_y_test.shape)","86842056":"from keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, Flatten, MaxPool2D, Activation, Dropout","99e5e7f9":"model=Sequential()\n\nmodel.add(Conv2D(32,5,activation='relu',input_shape=(28,28,1)))\n\nmodel.add(Conv2D(16,5,activation='relu'))\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(8,3,activation='relu'))\n\nmodel.add(Flatten())\n\nmodel.add(Dropout(0.40))\n\nmodel.add(Dense(128,activation='relu'))\n\nmodel.add(Dense(5,activation='softmax'))\n\nmodel.summary()","e2fae5e7":"model.compile(optimizer='adam',\n             loss='categorical_crossentropy',\n             metrics=['accuracy'])","88d37ef9":"model.fit(pt_x_train,pt_y_train,\n         validation_data=(pt_x_test,pt_y_test),\n         epochs=14,\n         batch_size=64,\n         shuffle=True,\n         verbose=1)","4c69ff1e":"model.layers","9db30bcf":"for layer in model.layers[:6]:\n    layer.trainable= False\n\nfor layer in model.layers:\n    print(layer,\" \",layer.trainable)\n    ","51a40a2d":"tl_model=Sequential(model.layers[:6])\n\ntl_model.add(Dense(128,activation='relu'))\n\ntl_model.add(Dense(10,activation='softmax'))\n\ntl_model.summary()","3a695844":"tl_model.compile(optimizer='adam',\n                loss=\"categorical_crossentropy\",\n                metrics=[\"accuracy\"])","fe505f0b":"tl_model.fit(tl_x_train,tl_y_train,\n            validation_data=(tl_x_test,tl_y_test),\n            epochs=14,\n            batch_size=64,\n            shuffle=True,\n            verbose=1)","6e448069":"x=45\nplt.imshow(test_images[x], interpolation='nearest',cmap=plt.cm.binary)\nplt.show()\nu=np.argmax(tl_model.predict(test_images[x].reshape(1,28,28,1)))\nlabel={0 :'T-shirt',\n1 :'Trouser',\n2 :'Pullover',\n3 :'Dress',\n4 :'Coat',\n5 :'Sandal',\n6 :'Shirt',\n7 :'Sneaker',\n8 :'Bag',\n9 :'Ankle boot'}\nprint(\"Prediction= \",label[u])\nprint(\"Real label =\",label[test_label[x]])","c5e12ebe":"**Loading Dataset**","17b1c50f":"After Creating pt_x_train, tl_x_train, pt_x_test,tl_x_test\n* Shape of pt_x_train=(30000,28,28)\n* Shape of tl_x_train=(30000,28,28)\n* Shape of pt_x_test=(5000,28,28)\n* Shape of tl_x_test=(5000,28,28)","c5d3012c":"## Pre Train Model"}}