{"cell_type":{"0d241de7":"code","d82cb11a":"code","e822e899":"code","a3970a47":"code","d8e2b800":"code","10be3f7a":"code","0f6f1155":"code","2948e6c3":"code","dc18c122":"code","dab7f25b":"code","56fe0852":"code","fa687185":"code","4ca7655e":"code","af1df792":"code","9bafbdb9":"code","c1d7818b":"code","1fa35e3a":"code","5420c953":"code","41992670":"code","4a01a15b":"code","6c4e71e8":"markdown","f48a1df1":"markdown","79cae7e6":"markdown","85f26907":"markdown","6a31a72f":"markdown","1a57092e":"markdown","ccd25dfe":"markdown","3c8fcb63":"markdown"},"source":{"0d241de7":"%%script false --no-raise-error\n# check if all works\nimport tensorflow.compat.v1 as tf\ntf.disable_eager_execution()\nwith tf.device('\/gpu:0'):\n    a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')\n    b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')\n    c = tf.matmul(a, b)\n\nwith tf.Session() as sess:\n    print (sess.run(c))","d82cb11a":"%%script false --no-raise-error\nfrom tensorflow.python.client import device_lib\nprint(device_lib.list_local_devices())\n\n","e822e899":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport time\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\n\nfrom keras import backend as K\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Conv2D, BatchNormalization, Dropout, Flatten, Dense\nfrom keras.callbacks import LearningRateScheduler\n\nimport tensorflow as tf\n","a3970a47":"# some settings to run model\ngpus = tf.config.experimental.list_physical_devices('GPU')\nif gpus:\n    try:\n        # Restrict TensorFlow to only use the fourth GPU\n        tf.config.experimental.set_visible_devices(gpus[0], 'GPU')\n\n        # Currently, memory growth needs to be the same across GPUs\n        for gpu in gpus:\n            tf.config.experimental.set_memory_growth(gpu, True)\n        logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n        print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n    except RuntimeError as e:\n        # Memory growth must be set before GPUs have been initialized\n        print(e)","d8e2b800":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/\/test.csv')","10be3f7a":"y = train.pop('label')\n\n\ntrain_y = to_categorical(y)\n\ntrain_X = train\/255\ntest_X = test\/255\n\ntrain_X = train_X.to_numpy()\ntest_X = test_X.to_numpy()","0f6f1155":"# reshape for NN\ntrain_X = train_X.reshape(-1,28,28,1)\ntest_X = test_X.reshape(-1,28,28,1)","2948e6c3":"train_X.shape, train_y.shape","dc18c122":"sub_test_X, sub_train_X, sub_test_y, sub_train_y = train_test_split(train_X, train_y, \n                                                                    train_size=0.2, stratify=train_y)","dab7f25b":"sub_test_X.shape, sub_train_X.shape, sub_test_y.shape, sub_train_y.shape","56fe0852":"img_gen = ImageDataGenerator(rotation_range = 12, width_shift_range=.12, height_shift_range=.12, \n                             zoom_range=.12) ","fa687185":"plt.imshow(img_gen.flow(sub_train_X[0].reshape(-1,28,28,1), sub_train_y[0].reshape(1,10)).next()[0].reshape((28,28)))","4ca7655e":"def build_model(save = False):\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size = 3,  activation = 'relu',  input_shape = (28,28,1)))\n    model.add(BatchNormalization())\n    model.add(Conv2D(32, kernel_size = 3,  activation = 'relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(32, kernel_size = 3,  activation = 'relu', padding = 'same'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.4))\n\n    model.add(Conv2D(64, kernel_size = 3,  activation = 'relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(64, kernel_size = 3,  activation = 'relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(64, kernel_size = 3,  activation = 'relu', padding = 'same'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.4))\n\n    model.add(Conv2D(128, kernel_size = 3,  activation = 'relu'))\n    model.add(BatchNormalization())\n    model.add(Flatten())\n    model.add(Dropout(0.4))\n    model.add(Dense(10,  activation ='softmax'))\n\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n    return model\n\ndef train_model(model, train_X, train_y, save = False):\n    sub_test_X, sub_train_X, sub_test_y, sub_train_y = train_test_split(train_X, train_y, \n                                                                    train_size=0.2, stratify=train_y)\n    annealer = LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x)\n    start = time.clock()\n    model.fit_generator(img_gen.flow(sub_train_X, sub_train_y), epochs=10, \n                                 steps_per_epoch=sub_train_X.shape[0]\/\/64, \n                                validation_data = (sub_test_X,sub_test_y), callbacks=[annealer])\n    print(f'Overall it takes {time.clock()-start} sec')\n    if save ==True:\n        model.save('\/kaggle\/input\/trained-model\/model.h5')\n        \n\ndef load_my_model():\n    re_model = load_model('\/kaggle\/input\/trained-model\/first_model.h5')\n    return re_model\n","af1df792":"num_models = 3\nmodels = [0]*num_models\nfor i in range(num_models):\n    models[i] = build_model()\n    train_model(models[i],train_X, train_y)\n\n","9bafbdb9":"prediction = np.zeros((test_X.shape[0],10))\nfor i in range(len(models)):\n    prediction += models[i].predict(test_X)","c1d7818b":"predict = np.argmax(prediction, axis =1)\npredict = np.vstack((np.arange(predict.shape[0])+1, predict)).T","1fa35e3a":"submission = pd.DataFrame(data=predict, columns=['imageid', 'label'])","5420c953":"submission","41992670":"submission.to_csv('submit.csv',index=False )","4a01a15b":"print('FINISHED')","6c4e71e8":"### --------------------------------------------------------\n# Preprocess data\n### =======================================================","f48a1df1":"### --------------------------------------------------------\n# Form submission\n### =======================================================","79cae7e6":"### --------------------------------------------------------\n# Submit data\n### =======================================================","85f26907":"### --------------------------------------------------------\n# Build model\n### =======================================================","6a31a72f":"### --------------------------------------------------------\n# init\n### =======================================================","1a57092e":"### --------------------------------------------------------\n# Predict\n### =======================================================","ccd25dfe":"### --------------------------------------------------------\n# Checks (after init if needed)\n### =======================================================","3c8fcb63":"### --------------------------------------------------------\n# Finish\n### ======================================================="}}