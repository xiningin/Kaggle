{"cell_type":{"ee015dfb":"code","1b4cfdb1":"code","63601fd1":"code","2b2cd623":"code","9c5ef203":"code","f62c7534":"code","94659b0d":"code","96f9324d":"code","4bb8b37b":"code","7e85f1ea":"code","7c41b20a":"code","5d89796e":"code","137b6e46":"code","2fcb262d":"code","6049bb23":"code","50159234":"code","c7ad1c16":"code","481c5faa":"code","60cd641b":"code","f7401d78":"code","cc0ecf06":"code","e875870b":"code","9fca84c5":"code","2ee0b26c":"code","b2e30ba4":"code","bd07088a":"code","bc87296b":"code","6f371342":"code","9e07d65d":"code","888ddca3":"code","17b623b9":"code","c09775e8":"code","04d290b7":"code","0e6e5da9":"code","110dc263":"code","5b9d9c1e":"code","29195452":"markdown","65ec7da7":"markdown","a2142e39":"markdown","7355132a":"markdown","4daa7c28":"markdown","b7b7249f":"markdown","4c219f7f":"markdown","a79a80f1":"markdown","73755dfc":"markdown","adbc7f10":"markdown","442d7003":"markdown","61bb30a0":"markdown","cbc357c8":"markdown","e03ea451":"markdown","e9e09bfe":"markdown","b3d016d2":"markdown","c8d1b8e5":"markdown","5b6be4b4":"markdown","b32e4b8f":"markdown","d40ca4b5":"markdown","25f5a566":"markdown","caf9b9b5":"markdown","7ca0b732":"markdown"},"source":{"ee015dfb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1b4cfdb1":"df = pd.read_csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndf.head()","63601fd1":"df.neighbourhood.unique()","2b2cd623":"drop_elements = ['last_review', 'host_name','id']\ndf.drop(drop_elements, axis = 1, inplace= True)\ndf.fillna({'reviews_per_month':0}, inplace=True)\ndf.reviews_per_month.isnull().sum()","9c5ef203":"df.rename(columns={'neighbourhood_group':'borough'}, inplace = True)\ndf.head()","f62c7534":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig = plt.subplots(figsize = (12,5))\nsns.countplot(x = 'room_type', hue = 'borough', data = df)","94659b0d":"a = df.groupby('borough')['neighbourhood'].value_counts()\nb = a.index.levels[0]\na14 = []\na16 = []\n\nfor i in range(len(b)):\n    df_level = a.loc[[b[i], 'neighbourhood']]\n    df_level_ch = pd.DataFrame(df_level)\n    for j in range(1):\n        a13 = df_level_ch.iloc[j].name\n        b1 = df_level_ch.values[j][0]\n        print(a13, b1)\n        a14.append(a13)\n        a16.append(b1)\na15 = pd.DataFrame(a14)\na16 = pd.DataFrame(a16)\na17 = pd.concat([a15, a16], axis = 1)\na17.columns = ['borough', 'neighbourhood', 'total']\na17.plot.bar(x = 'neighbourhood', y = 'total')","96f9324d":"df.price.mean()","4bb8b37b":"plt.figure(figsize = (16,12))\nprix = df[df['price'] < 600]\nsns.violinplot(x = 'borough', y = 'price', data = prix)","7e85f1ea":"df_onehot = pd.get_dummies(df[['price']], prefix = \"\", prefix_sep = \"\")\ndf_onehot['neighbourhood'] = df['neighbourhood']\nfixed_columns = [df_onehot.columns[-1]] + list(df_onehot.columns[:-1])\ndf_grouped = df_onehot.groupby('neighbourhood').mean().reset_index()\ndf_grouped.head(20)","7c41b20a":"# Import libraries\nfrom sklearn.cluster import KMeans\nfrom sklearn import metrics\nfrom scipy.spatial.distance import cdist","5d89796e":"df_clustering = df_grouped.drop('neighbourhood',1)\ndf_clustering.head()","137b6e46":"K = range(1,10)\ndistortions = []\nfor k in K:\n    kmeans = KMeans(init = 'k-means++', n_clusters = k, n_init = 12, random_state = 0)\n    kmeans.fit(df_clustering.values.reshape(-1,1))\n    distortions.append(sum(np.min(cdist(df_clustering.values.reshape(-1, 1),kmeans.cluster_centers_, 'euclidean'), axis = 1)) \/ df_clustering.shape [0])\n\nimport matplotlib.pyplot as plt\nplt.plot(K, distortions, 'bx-')\nplt.xlabel('k')\nplt.ylabel('Distortion')\nplt.title('The Elbow Method showing the optimal K')\nplt.show()               ","2fcb262d":"num_clusters = 6\n\nkmeans = KMeans(n_clusters = num_clusters, random_state = 0).fit(df_clustering)\nkmeans.labels_","6049bb23":"df_grouped.insert(0, 'Cluster', kmeans.labels_)\n","50159234":"df_grouped.head()","c7ad1c16":"df_co = df.copy()\ndf_co.drop_duplicates(subset = ['neighbourhood'])\ndrop_element = 'price'\ndf_co.drop(drop_element, axis = 1)\ndf_co.head()","481c5faa":"df_merge = pd.merge(df_co, df_grouped[['Cluster','neighbourhood','price']],on = 'neighbourhood')\ndf_merge.head()","60cd641b":"df_merge.head()","f7401d78":"cluster_1 = df_merge.loc[df_merge['Cluster'] == 0]\ncluster_1.head(3)","cc0ecf06":"cluster_1.shape","e875870b":"cluster_2 = df_merge.loc[df_merge['Cluster'] == 1]\ncluster_2.head()","9fca84c5":"cluster_2.shape","2ee0b26c":"cluster_3 = df_merge.loc[df_merge['Cluster'] == 2]\ncluster_3.head()","b2e30ba4":"cluster_3.shape","bd07088a":"cluster_4 = df_merge.loc[df_merge['Cluster'] == 3]\ncluster_4.head()","bc87296b":"cluster_4.shape","6f371342":"cluster_5 = df_merge.loc[df_merge['Cluster'] == 4]\ncluster_5.head()","9e07d65d":"cluster_5.shape","888ddca3":"cluster_6 = df_merge.loc[df_merge['Cluster'] == 5]\ncluster_6.head()","17b623b9":"cluster_6.shape","c09775e8":"# This function is used to help plot the maps in the notebook\ndef embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')","04d290b7":"# Import libraries\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\nimport folium\n\n# Creat the folium map\n\nmap_cluster = folium.Map(location = [40.730610,-73.935242], zoom_start=10)\n\n# Set color for clusters\nx = np.arange(num_clusters)\nys = [i + x +(i*x)**2 for i in range(num_clusters)]\ncolors_array = cm.rainbow(np.linspace(0,1,len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# Set the marker for the map\nmarkers_colors = []\nfor lat, lng, cluster in zip(df_merge['latitude'], df_merge['longitude'], df_merge['Cluster']):\n  label = folium.Popup(' Cluster ' + str(cluster), parse_html=True)\n  folium.CircleMarker([lat, lng],\n                      radius=2,\n                      popup=label,\n                      color=rainbow[cluster-1],\n                      fill=True,\n                      fill_color=rainbow[cluster-1],\n                      fill_opacity=0.7).add_to(map_cluster)\nembed_map(map_cluster, 'map_cluster.html')","0e6e5da9":"df_clu=pd.DataFrame(np.arange(6).reshape((1,6)),index=['0'],columns=['cluster_1','cluster_2','cluster_3','cluster_4','cluster_5','cluster_6'])\ndf_clu.cluster_1 = len(cluster_1)\ndf_clu.cluster_2 = len(cluster_2)\ndf_clu.cluster_3 = len(cluster_3)\ndf_clu.cluster_4 = len(cluster_4)\ndf_clu.cluster_5 = len(cluster_5)\ndf_clu.cluster_6 = len(cluster_6)\n\nplt.figure(figsize = (16,12))\nsns.barplot(data = df_clu)\nplt.xlabel('Cluster Number',fontsize =12)\nplt.ylabel('Total Shared Room', fontsize = 12)\nplt.title('Total Number shared Room for Each Cluster',fontsize = 12 )\nplt.show()","110dc263":"print('The mean price of cluster 1 is: ',cluster_1.price_x.mean())\nprint('The total review in cluster 1 is:',len(cluster_1.number_of_reviews))\nprint('The mean price of cluster 4 is: ',cluster_4.price_x.mean())\nprint('The total review in cluster 4 is:',len(cluster_4.number_of_reviews))\nprint('The mean price of cluster 6 is: ',cluster_6.price_x.mean())\nprint('The total review in cluster 6 is:',len(cluster_6.number_of_reviews))","5b9d9c1e":"plt.figure(figsize = (16,12))\nsns.countplot(x = 'room_type', hue = 'Cluster', data = df_merge)","29195452":"Determine cluster number by Elbow Method","65ec7da7":"### Cluster 4","a2142e39":"We observe that the most of rooms are concentrated in Manhattan and Brooklyn.","7355132a":"Let's check the neibourhood in data frame.","4daa7c28":"Let's check the quantity of each type of room in each region by count plot.","b7b7249f":"Let's check the price distribution in these five regions.","4c219f7f":"Let's check the average price of shared room in NY.","a79a80f1":"Refer to the average price of cluster 1, 4 and 6 (and average price of NY is 152.72), we can define our shared room price. Then, we can check which type of room is more polular in each cluster.","73755dfc":"### Cluster 3","adbc7f10":"### Cluster 1","442d7003":"### Cluster 2","61bb30a0":"### Conclusion\n\n\n\nWe observed if we have a private room for sharing, we can refer to cluster 1 and cluster 4 of pricing. If we have entire apt, we can refer to cluster 4 of pricing. For the area, we can choose Manhattan and Brooklyn.","cbc357c8":"### Cluster 6","e03ea451":"Let's find the 'neighborhood' of the most rooms in these five 'borough'","e9e09bfe":"### Cluster 5","b3d016d2":"We can check the total number of shared room for each cluster.","c8d1b8e5":"Because the last_review, host_name and id are not important for analysis. We can drop these three columns and set 0 by NaN for reviews_per_month.","5b6be4b4":"Load data by pandas","b32e4b8f":"In general, there are more shared room in Manhattan and Brooklyn. This is related to the local economy and we know where is the most neighbourhood in each region and the price. The most expensive area is Manhattan and second one is Brooklyn. Because Manhattan has a high cost of living. Bronx is the cheap. The quantity of shared room is less than private room and entire home\/appartment.","d40ca4b5":"In domain of cluster 4 has the most quantity of shared room. In the domain of cluster 6 and cluster 1 have more room than the other. The cluster 3 has the least shared room. It means cluster 4 is the most acceptable.","25f5a566":"Cluster Neighbourhood","caf9b9b5":"If someone wants to do a bussiness on shared room in New York, how should it be priced.\n\nWe can use the cluster model for this question.","7ca0b732":"Let's check the average price for cluster 1, cluster 4 and cluster 6."}}