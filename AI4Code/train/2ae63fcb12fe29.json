{"cell_type":{"a5e4e175":"code","d2d9ca1d":"code","31251872":"code","cff57cc5":"code","88456c08":"code","46423cbf":"code","256b7f97":"code","e5e6aa36":"code","8eab0d08":"code","c090ae98":"code","10ae885c":"code","cdf39e1d":"code","0b45b0eb":"code","b1ab97cf":"code","3e0bd288":"code","76877646":"code","cd50392f":"code","c72e54e5":"code","c19f46b0":"code","5ba34ab7":"code","112e6227":"code","b6b49fb9":"code","920a9818":"code","7f4402f6":"code","eb44ff2a":"code","e04d1a83":"code","574838d8":"code","baaff26e":"code","0c54e7eb":"code","7da61857":"code","460134eb":"code","57f305e3":"code","a64fd0e7":"code","1ca9a78f":"code","b43e81fc":"code","6d1a231d":"code","8db5f023":"code","b68846ba":"code","085c6b16":"code","600a68a3":"code","b6bb06d1":"code","3152df5d":"code","647ba927":"code","4af72ecd":"code","78671df9":"code","8dba8a5b":"code","efe14aa4":"code","d79f8eff":"code","9fe6d2f4":"code","14a05c3c":"code","d24d17cc":"code","b29f1748":"code","1f19f85b":"code","4f0042bf":"code","17f30336":"code","69e31752":"code","614abb94":"code","94bbaea4":"code","c9029cc6":"code","ac287a3a":"code","9a5be60d":"code","53003fc0":"code","b8923215":"code","90546f13":"code","3c299b14":"code","52f5c021":"code","a88ae232":"code","c57672db":"code","8beb3a42":"code","625a4310":"code","97f527e0":"code","f2c78ce0":"code","4943e537":"code","3bdd79d8":"markdown","1dfeea99":"markdown","2a0f7404":"markdown","d04e3bb0":"markdown","a827745b":"markdown","a6b8c34c":"markdown","e3c86871":"markdown","596a49bf":"markdown","4c2d4b8f":"markdown","7ca7b2c2":"markdown","57532a5f":"markdown","128446db":"markdown","648795b0":"markdown","fd176c71":"markdown","8be04a0d":"markdown","7b821733":"markdown","54e9c1bd":"markdown","68ed2371":"markdown","d804aab0":"markdown","399ad3b7":"markdown","02970549":"markdown","958c95a0":"markdown","68f6318a":"markdown","6ebdeceb":"markdown","6d662f55":"markdown","c690ceb6":"markdown","59c2150c":"markdown","2ea03a27":"markdown","b8be118b":"markdown","e0083c06":"markdown","9dd375cd":"markdown","7ed070b9":"markdown","d435b7ba":"markdown","3a194c69":"markdown","4e066cdc":"markdown","5c81016d":"markdown","8109d0fb":"markdown","d11d742b":"markdown","60095487":"markdown"},"source":{"a5e4e175":"import pandas as pd\nimport pandas.plotting\nfrom pandas.plotting import scatter_matrix\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport squarify\nfrom matplotlib import animation\nfrom matplotlib.animation import FuncAnimation,FFMpegFileWriter\nfrom mpl_toolkits.mplot3d import Axes3D","d2d9ca1d":"pd.set_option('display.max_row',111)\npd.set_option('display.max_column',111)","31251872":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","cff57cc5":"train.head()","88456c08":"df=train.copy()\nprint(df.columns)","46423cbf":"print(df.shape)","256b7f97":"print(df.dtypes.value_counts())\ndf.dtypes.value_counts().plot.pie()","e5e6aa36":"df.isna()\nplt.figure(figsize=(20,10))\nsns.heatmap(df.isna(), cbar=False)","8eab0d08":"(df.isna().sum()\/df.shape[0]).sort_values(ascending=True)","c090ae98":"df['Survived'].value_counts()","10ae885c":"df['Survived'].value_counts(normalize=True)","cdf39e1d":"df.select_dtypes('float').columns","0b45b0eb":"for col in df.select_dtypes('float'):\n    #print(col)\n    plt.figure()\n    sns.distplot(df[col])","b1ab97cf":"df.select_dtypes('int64').columns","3e0bd288":"df.select_dtypes('object').columns","76877646":"for col in df[['Sex','Embarked','Pclass', 'SibSp', 'Parch']]:\n    plt.figure()\n    df[col].value_counts().plot.pie()","cd50392f":"survivant_df=df[df['Survived']==1]","c72e54e5":"decedes_df=df[df['Survived']==0]","c19f46b0":"for col in df.select_dtypes('float'):\n    plt.figure()\n    sns.distplot(survivant_df[col], label='survivant')\n    sns.distplot(decedes_df[col], label='decedes')\n    plt.legend()","5ba34ab7":"plt.figure(figsize=(20,10))\nsns.countplot(x='Age',hue='Survived', data=df)","112e6227":"facet = sns.FacetGrid(df, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, df['Age'].max()))\nfacet.add_legend()\nplt.xlim(0)","b6b49fb9":"sns.countplot(x='Pclass',hue='Survived', data=df)","920a9818":"sns.countplot(x='SibSp',hue='Survived', data=df)","7f4402f6":"sns.countplot(x='Parch',hue='Survived', data=df)","eb44ff2a":"pd.crosstab(df['Survived'],df['Sex'])","e04d1a83":"pd.crosstab(df['Survived'],df['Embarked'])","574838d8":"for col in df[['Sex','Embarked','Pclass', 'SibSp', 'Parch']]:\n        plt.figure()\n        sns.heatmap(pd.crosstab(df['Survived'],df[col]),annot=True,fmt='d')","baaff26e":"import researchpy as rp\ncorr_type, corr_matrix, corr_ps = rp.corr_case(df.select_dtypes('float'))\nprint(corr_type)","0c54e7eb":"corr_matrix","7da61857":"corr_ps","460134eb":"df_train = train.copy()\ndf_test = test.copy()\ndf_train.head()","57f305e3":"df_train['Title'] = df_train['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)# tout stringaccompagn\u00e9 de point(.)\ndf_test['Title'] = df_test['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)# tout stringaccompagn\u00e9 de point(.)\ndf_train['Title'].value_counts()","a64fd0e7":"def encodigingName(df):\n    code = {\"Mr\": 0, \n                     \"Miss\": 1, \n                     \"Mrs\": 2, \n                     \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                     \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\n    df['Title'] = df['Title'].map(code)\n    df.drop('Name', axis=1, inplace=True)\n    return df\n\nencodigingName(df_train)\nencodigingName(df_test)","1ca9a78f":"sns.heatmap(pd.crosstab(df_train['Survived'],df_train['Title']),annot=True,fmt='d')","b43e81fc":"def encodigingSexe(df):\n    code = {\"male\": 0, \n            \"female\": 1}\n    df['Sex'] = df['Sex'].map(code)\n    return df\n\nencodigingSexe(df_test)\nencodigingSexe(df_train)","6d1a231d":"sns.heatmap(pd.crosstab(df_train['Survived'],df_train['Sex']),annot=True,fmt='d')","8db5f023":"df_train[\"Age\"].fillna(df_train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ndf_test[\"Age\"].fillna(df_test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","b68846ba":"facet = sns.FacetGrid(df_train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, df_train['Age'].max()))\nfacet.add_legend()\nplt.show() ","085c6b16":"def encodigingAge(dataset):\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4\n    return dataset\n\nencodigingAge(df_test)\nencodigingAge(df_train)","600a68a3":"sns.heatmap(pd.crosstab(df_train['Survived'],df_train['Age']),annot=True,fmt='d')","b6bb06d1":"# Pour connaitre le dominant dans la colonne Embarked afin de remplir les valeurs manquantes\ndef ClasseEmbarked(df):\n    Pclass1 = df[df['Pclass']==1]['Embarked'].value_counts()\n    Pclass2 = df[df['Pclass']==2]['Embarked'].value_counts()\n    Pclass3 = df[df['Pclass']==3]['Embarked'].value_counts()\n    df = pd.DataFrame([Pclass1, Pclass2, Pclass3])\n    df.index = ['1st class','2nd class', '3rd class']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))\n    \nClasseEmbarked(df_test)    \nClasseEmbarked(df_train)","3152df5d":"# le \"S\" est le plus dominant donc on remplace les NAN par les S\ndf_train['Embarked'] = df_train['Embarked'].fillna('S')\ndf_test['Embarked'] = df_test['Embarked'].fillna('S')","647ba927":"def encodiging(df):\n    code = {\"S\": 0, \n            \"C\": 1, \n            \"Q\": 2}\n    df['Embarked'] = df['Embarked'].map(code)\n    return df\n\nencodiging(df_test)\nencodiging(df_train)","4af72ecd":"df_train[\"Fare\"].fillna(df_train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ndf_test[\"Fare\"].fillna(df_test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)","78671df9":"facet = sns.FacetGrid(df_train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, df_train['Fare'].max()))\nfacet.add_legend()\nplt.show() ","8dba8a5b":"def classeFare(dataset):\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3\n    return dataset\n\nclasseFare(df_test)\nclasseFare(df_train)","efe14aa4":"df_train['Cabin'].value_counts()","d79f8eff":"def extratCabin(df):\n    df['Cabin'] = df['Cabin'].str[:1]\n    return df\n\nextratCabin(df_test)\nextratCabin(df_train)","9fe6d2f4":"def classeCabin(df):\n    Pclass1 = df[df['Pclass']==1]['Cabin'].value_counts()\n    Pclass2 = df[df['Pclass']==2]['Cabin'].value_counts()\n    Pclass3 = df[df['Pclass']==3]['Cabin'].value_counts()\n    df = pd.DataFrame([Pclass1, Pclass2, Pclass3])\n    df.index = ['1st class','2nd class', '3rd class']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))\n\nclasseCabin(df_train)","14a05c3c":"def encodigingCabin(df):\n    code = {\"A\": 0, \n            \"B\": 0.4, \n            \"C\": 0.8, \n            \"D\": 1.2, \n            \"E\": 1.6, \n            \"F\": 2, \n            \"G\": 2.4, \n            \"T\": 2.8}\n    df['Cabin'] = df['Cabin'].map(code)\n    return df \n\nencodigingCabin(df_test)\nencodigingCabin(df_train)","d24d17cc":"df_train[\"Cabin\"].fillna(df_train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ndf_test[\"Cabin\"].fillna(df_test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","b29f1748":"df_train[\"FamilySize\"] = df_train[\"SibSp\"] + df_train[\"Parch\"] + 1\ndf_test[\"FamilySize\"] = df_test[\"SibSp\"] + df_test[\"Parch\"] + 1","1f19f85b":"facet = sns.FacetGrid(df_train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, df_train['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","4f0042bf":"def encodigingFamily(df):\n    code = {1: 0,\n            2: 0.4, \n            3: 0.8, \n            4: 1.2, \n            5: 1.6, \n            6: 2, \n            7: 2.4, \n            8: 2.8, \n            9: 3.2, \n            10: 3.6, \n            11: 4}\n    df['FamilySize'] = df['FamilySize'].map(code)\n    return df\n    \nencodigingFamily(df_test)\nencodigingFamily(df_train)","17f30336":"variables_drop = ['Ticket', 'SibSp', 'Parch']\n\ndf_train = df_train.drop(variables_drop, axis=1)\ndf_test = df_test.drop(variables_drop, axis=1)","69e31752":"df_train = df_train.drop(['PassengerId'], axis=1)\n#X_test = df_test.drop(\"PassengerId\", axis=1).copy()\n\n#trainset en Xtrain et Ytrain\nX_train= df_train.drop('Survived', axis=1)\ny_train = df_train['Survived']\n\nX_train.shape, y_train.shape","614abb94":"X_train.head()","94bbaea4":"X_test = df_test.drop(\"PassengerId\", axis=1).copy()\nX_test.head()","c9029cc6":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nfrom sklearn.model_selection import learning_curve\n\nimport numpy as np","ac287a3a":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","9a5be60d":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, X_train, y_train, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)\n\nprint(\"\\nle score KNN moyenne est :\" + str(round(np.mean(score)*100, 2)))\n","53003fc0":"N, train_score, val_score = learning_curve(clf, X_train, y_train,cv=k_fold, scoring=scoring,train_sizes=np.linspace(0.1, 1, 10))\nplt.figure(figsize=(12, 8))\nplt.plot(N, train_score.mean(axis=1), label='train score')\nplt.plot(N, val_score.mean(axis=1), label='validation score')\nplt.legend()","b8923215":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, X_train, y_train, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)\nprint(\"\\nle score Decision Tree moyenne est :\" + str(round(np.mean(score)*100, 2)))","90546f13":"N, train_score, val_score = learning_curve(clf, X_train, y_train,cv=k_fold, scoring=scoring,train_sizes=np.linspace(0.1, 1, 10))\nplt.figure(figsize=(12, 8))\nplt.plot(N, train_score.mean(axis=1), label='train score')\nplt.plot(N, val_score.mean(axis=1), label='validation score')\nplt.legend()","3c299b14":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, X_train, y_train, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)\nprint(\"\\n le score Ramdom Forest moyenne est :\" + str(round(np.mean(score)*100, 2)))","52f5c021":"N, train_score, val_score = learning_curve(clf, X_train, y_train,cv=k_fold, scoring=scoring,train_sizes=np.linspace(0.1, 1, 10))\nplt.figure(figsize=(12, 8))\nplt.plot(N, train_score.mean(axis=1), label='train score')\nplt.plot(N, val_score.mean(axis=1), label='validation score')\nplt.legend()","a88ae232":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, X_train, y_train, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)\nprint(\"\\n le score Naive Bayes moyenne est :\" + str(round(np.mean(score)*100, 2)))","c57672db":"N, train_score, val_score = learning_curve(clf, X_train, y_train,cv=k_fold, scoring=scoring,train_sizes=np.linspace(0.1, 1, 10))\nplt.figure(figsize=(12, 8))\nplt.plot(N, train_score.mean(axis=1), label='train score')\nplt.plot(N, val_score.mean(axis=1), label='validation score')\nplt.legend()","8beb3a42":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, X_train, y_train, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)\nprint(\"\\n le score SVM moyenne est :\" + str(round(np.mean(score)*100, 2)))","625a4310":"N, train_score, val_score = learning_curve(clf, X_train, y_train,cv=k_fold, scoring=scoring,train_sizes=np.linspace(0.1, 1, 10))\nplt.figure(figsize=(12, 8))\nplt.plot(N, train_score.mean(axis=1), label='train score')\nplt.plot(N, val_score.mean(axis=1), label='validation score')\nplt.legend()","97f527e0":"clf = SVC()\nclf.fit(X_train, y_train)\nypred = clf.predict(X_test)\nypred","f2c78ce0":"resultat = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": ypred\n    })\n\nresultat.head()","4943e537":"resultat.to_csv('resultat.csv', index=False)","3bdd79d8":"#### kNN","1dfeea99":"### ==========================================================\n### Les modules de travail\n### ==========================================================","2a0f7404":"#### Ramdom Forest","d04e3bb0":"#### Age","a827745b":"### Relation Target \/ age","a6b8c34c":"#### Cabin","e3c86871":"### Histogramme des variables quantitatives continues","596a49bf":"### Table de contingence","4c2d4b8f":"#### Drop des variables inutiles","7ca7b2c2":"### Relation Target \/ Pclass","57532a5f":"#### Naive Bayes","128446db":"#### SVM","648795b0":"### ===============================================================\n###  Declaration du dossier de travail\n### ===============================================================","fd176c71":"### ===============================================================\n### Analyse de la forme des donn\u00e9es de train\n### ===============================================================","8be04a0d":"## Modellisation","7b821733":"#### Cross Validation (K-fold)","54e9c1bd":"## TrainTest - Nettoyage - Encodage","68ed2371":"### Relation Target \/ Embarked  (quali * quali \/ table de contingence)","d804aab0":"#### Analyse de la forme de train\n\n  - **variable target (variable \u00e0 expliquer)** : Survived\n  - **linges et colonnes** :891, 12\n  - **types de variables (variables explicatives)**: quantitatives :7 , qualitatives : 5\n - **Analyse des valeurs manquantes** :\n    - beaucoup de NaN concernant les variables age avec un taux de 19,86% et Cabin un taux  de 77%","399ad3b7":"### ===============================================================\n### V\u00e9rification des  donn\u00e9es \n### ===============================================================","02970549":"### Relation Target \/ Sibsp","958c95a0":"### Examen de la colonne target (variable \u00e0 expliquer)","68f6318a":"### Diagramme en barres des variables qualitatives (Treemap)","6ebdeceb":"# PRE-PROCESSING","6d662f55":"### Relations  (quanti * quanti)","c690ceb6":"#### Decision Tree","59c2150c":"### ===============================================================\n### Analyse du fond\n### ===============================================================","2ea03a27":"#### Fare","b8be118b":"### Relation Target \/ Sex  (quali * quali \/ table de contingence)","e0083c06":"#### name","9dd375cd":"#### FamilySize","7ed070b9":"##### Embarked","d435b7ba":"### Imputation des valeurs manquantes selon la variable cl\u00e9e Pclass","3a194c69":"## Relation entre Target \/ Variables (quali * quanti) & (quali * quali)","4e066cdc":"### Relation Target \/ Parch","5c81016d":"### Target \/ float (quali * quanti \/ histogramme ou Boxplot)","8109d0fb":"#### sexe","d11d742b":"### ===============================================================\n### importation des  donn\u00e9es \n### ===============================================================","60095487":"#### Cr\u00e9ation de sous-ensembles positifs  et n\u00e9gatifs"}}