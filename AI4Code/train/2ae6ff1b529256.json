{"cell_type":{"61ca9a74":"code","9a1335de":"code","bf2d219f":"code","4e4bca2a":"code","d7e384ad":"code","21f2bfe5":"code","16a72832":"code","ff30df45":"code","38edec09":"code","b3a1f6fc":"code","3a67347a":"code","b6dc26b4":"code","3c0daa6d":"code","23c2b7e9":"code","01d8eefe":"code","ed9ea053":"code","b3ce6852":"code","1288c66b":"code","a6699799":"code","c85d6987":"code","adfcc4c2":"code","8718d5e9":"code","10f14cbd":"code","7c9533af":"code","e99536d7":"code","92b8d942":"code","60816680":"code","9feec809":"code","fb59885f":"code","64875a0c":"code","4e2764f1":"code","e5b4a22a":"code","57155a32":"code","06545ebb":"code","2d3bafca":"code","cfa0141b":"code","270cb46d":"markdown","e942044c":"markdown"},"source":{"61ca9a74":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport category_encoders as ce\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score","9a1335de":"data0 = pd.read_csv(\"..\/input\/telecom-users-dataset\/telecom_users.csv\")\ndata0[0:2]","bf2d219f":"data0.columns","4e4bca2a":"data1=data0.drop(['Unnamed: 0', 'customerID',],axis=1)","d7e384ad":"print(data1['InternetService'].unique())\nprint(data1['OnlineSecurity'].unique())\nprint(data1['OnlineBackup'].unique())\nprint(data1['DeviceProtection'].unique())\nprint(data1['Contract'].unique())\nprint(data1['Churn'].unique())","21f2bfe5":"data1['Contract']=data1['Contract'].map({ 'Two year':3,'One year':2,'Month-to-month':1 })","16a72832":"list_cols = ['gender', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines',\n       'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n       'TechSupport', 'StreamingTV', 'StreamingMovies', 'PaperlessBilling', \n       'PaymentMethod', 'Churn', 'MonthlyCharges', 'TotalCharges' ]\nce_ohe = ce.OrdinalEncoder(cols=list_cols,handle_unknown='impute')\ndata2 = ce_ohe.fit_transform(data1)\ndata2[0:2]","ff30df45":"data2.info()","38edec09":"n=len(data2)\nprint(n)","b3a1f6fc":"N=[]\nfor i in range(n):\n    N+=[i]\nrandom.shuffle(N)","3a67347a":"datay=data2['Churn']\ndata3=data2.drop(['Churn'],axis=1)\ndata3[0:2]","b6dc26b4":"data4=np.array(data3)\ndatay4=np.array(datay)","3c0daa6d":"data3.columns","23c2b7e9":"train=data4[N[0:(n\/\/10)*8]]\ntest=data4[N[(n\/\/10)*8:]]\ntrainy=datay4[N[0:(n\/\/10)*8]]\ntesty=datay4[N[(n\/\/10)*8:]]","01d8eefe":"df_columns= ['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure',\n       'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity',\n       'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n       'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod',\n       'MonthlyCharges', 'TotalCharges']","ed9ea053":"train_df=pd.DataFrame(train)\ntest_df=pd.DataFrame(test)","b3ce6852":"train_df.shape","1288c66b":"train_df.columns=df_columns\ntest_df.columns=df_columns","a6699799":"def create_numeric_feature(input_df):\n    use_columns = df_columns\n    return input_df[use_columns].copy()","c85d6987":"create_numeric_feature(train_df)[0:2]","adfcc4c2":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","8718d5e9":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","10f14cbd":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","7c9533af":"train_feat_df[0:2]","e99536d7":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, \n             y, \n             cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","92b8d942":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n}","60816680":"y = trainy","9feec809":"from sklearn.model_selection import KFold\n\nfold = KFold(n_splits=5, shuffle=True, random_state=71)\ncv = list(fold.split(train_feat_df, y))\noof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)","fb59885f":"fig,ax = plt.subplots(figsize=(8,8))\nax.set_xlabel('oof',fontsize=20)\nax.set_ylabel('train_y',fontsize=20)\nax.scatter(oof,y)","64875a0c":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    ax.tick_params(axis='x', rotation=0)\n    ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    return fig, ax\n\nfig, ax = visualize_importance(models, train_feat_df)","4e2764f1":"def revert_to_real(preda):\n    predb = pd.Series(preda).apply(lambda x:round(x))\n    return predb","e5b4a22a":"pred0 = np.array([model.predict(test_feat_df.values) for model in models])\npred1 = np.mean(pred0, axis=0)\npred2 = revert_to_real(pred1)\nprint(pred1[0:5])\nprint(np.array(pred2)[0:5])","57155a32":"accuracy=accuracy_score(testy,pred2)\nprint(accuracy)","06545ebb":"fig, ax = plt.subplots(figsize=(8,8))\nsns.histplot(pred1, label='Test Predict', ax=ax, color='black')\nsns.histplot(oof, label='Train Predict', ax=ax, color='C1')\nax.legend()\nax.grid()","2d3bafca":"print(data0['Churn'].unique())\nprint(data2['Churn'].unique())\nprint(data0['Contract'].unique())\nprint(data2['Contract'].unique())\nprint(data0['InternetService'].unique())\nprint(data2['InternetService'].unique())","cfa0141b":"data2p=data2.groupby('Churn').mean()\ndata2p.T","270cb46d":"could not convert string to float: ","e942044c":"The result shows tenuer and type of customer contract are the most important factors for churning."}}