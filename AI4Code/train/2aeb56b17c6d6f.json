{"cell_type":{"ae69b5d7":"code","491bdef4":"code","97ea5a89":"code","4ef96aa7":"code","479bf75d":"code","9ebf9186":"code","906ca285":"code","a959a533":"code","b186cb60":"code","e804d348":"code","d450dd17":"code","ca88218b":"code","72e7030a":"code","d6bb7855":"code","cc92476f":"code","54598cdf":"code","55cb13fc":"code","44116b2e":"code","f9a1a658":"code","36035116":"code","417ff800":"code","10526633":"code","b134e5bf":"code","f3ef1d98":"code","355e492e":"code","6a705831":"code","8646f0b7":"code","5661507e":"code","bd68cb31":"code","59574365":"code","fdb2dba0":"code","6a1cf37c":"code","342ad104":"code","b6087c36":"code","3b97d416":"code","16d96ac4":"code","807cc783":"code","5960ccc3":"code","b7f44ead":"code","fa6a8898":"code","9c9fd888":"code","540da5b4":"code","da0c65ed":"code","8216324a":"code","5dddc95e":"code","fe5596e4":"code","35be557d":"code","61506647":"code","3df45da4":"code","3d4dd235":"code","4ca45775":"code","66be8d68":"code","b36b6d42":"code","adbc5302":"code","ff48ac98":"code","a4e86688":"code","efda9ad7":"code","277dc302":"code","710f6b01":"code","4e5f76b4":"code","7ccb78dd":"code","c137a21a":"code","03fabacf":"code","8a474f72":"code","4a455752":"code","584f2926":"code","02e15c50":"code","bdde13cd":"code","a829c79d":"code","49732da9":"code","957dc57d":"code","ce4ab57a":"markdown","65dc2302":"markdown","ace7def2":"markdown","ba5d7a40":"markdown","bee607cf":"markdown","5fc2b652":"markdown","fc23aa2c":"markdown","5fc39c46":"markdown","bacf7c23":"markdown","aed789ef":"markdown","e746afa3":"markdown","5c436d09":"markdown","9450e745":"markdown","a45037d9":"markdown","8c8836c5":"markdown","be3dbd28":"markdown","a979b007":"markdown","e6e21946":"markdown","e74b6b96":"markdown","26746b8b":"markdown"},"source":{"ae69b5d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport missingno as msno\nfrom datetime import date\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler\nfrom xgboost import XGBClassifier, plot_importance\nfrom sklearn.model_selection import GridSearchCV\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","491bdef4":"train=pd.read_csv('\/kaggle\/input\/health-insurance-cross-sell-prediction\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/health-insurance-cross-sell-prediction\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/health-insurance-cross-sell-prediction\/sample_submission.csv')","97ea5a89":"train.head()","4ef96aa7":"train.shape","479bf75d":"train.isnull().sum()","9ebf9186":"train.drop(\"id\",axis =1).quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T","906ca285":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    \"\"\"\n\n    It gives the names of categorical, numerical, and categorical but cardinal variables in the data set.\n    Note: Categorical variables with numerical appearance are also included in categorical variables.\n\n    Parameters\n    ------\n        dataframe: dataframe\n        cat_th: int, optional\n                the class threshold for numeric but categorical variables\n        car_th: int, optinal\n                the class threshold for categorical but cardinal variables\n\n    Returns\n    ------\n        cat_cols: list\n                Categorical Variables List\n        num_cols: list\n                Numeric Variables List\n        cat_but_car: list\n                Categorical but cardinal variables list\n\n    Examples\n    ------\n        import seaborn as sns\n        df = sns.load_dataset(\"iris\")\n        print(grab_col_names(df))\n\n\n    Notes\n    ------\n        cat_cols + num_cols + cat_but_car = total number of variables\n        num_but_cat is in cat_cols\n\n    \"\"\"\n\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    return cat_cols, num_cols, cat_but_car\n\ncat_cols, num_cols, cat_but_car = grab_col_names(train)","a959a533":"cat_cols","b186cb60":"num_cols = [col for col in num_cols if \"id\" not in col]\nnum_cols = [col for col in num_cols if \"Policy_Sales_Channel\" not in col]","e804d348":"# SUMMARY CATEGORICAL COLUMNS\ndef cat_summary(dataframe, col_name, plot=False):\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts() \/ len(dataframe)}))\n    if plot:\n        sns.countplot(x=dataframe[col_name], data=dataframe)\n        plt.show()\n\n\nfor i in cat_cols:\n    cat_summary(train, i, plot=True)","d450dd17":"# SUMMARY NUMERIC COLUMNS\ndef num_summary(dataframe, numerical_col, plot=False):\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)\n\n    if plot:\n        dataframe[numerical_col].hist(bins=50)\n        plt.xlabel(numerical_col)\n        plt.title(numerical_col)\n        plt.show()\n\n    print(\"#####################################\")\n\nfor col in num_cols:\n    num_summary(train, col, plot=True)","ca88218b":"def target_summary_with_num(dataframe, target, numerical_col):\n    print(dataframe.groupby(target).agg({numerical_col: \"mean\"}), end=\"\\n\\n\\n\")","72e7030a":"for col in num_cols:\n    target_summary_with_num(train, \"Response\", col)","d6bb7855":"sns.boxplot(x=train[\"Age\"])","cc92476f":"sns.boxplot(x=train[\"Annual_Premium\"])","54598cdf":"sns.boxplot(x=train[\"Vintage\"])","55cb13fc":"sns.countplot(train.Gender)","44116b2e":"df=train.groupby(['Gender','Response'])['id'].count().to_frame().rename(columns={'id':'count'}).reset_index()","f9a1a658":"g = sns.catplot(x=\"Gender\", y=\"count\",col=\"Response\",\n                data=df, kind=\"bar\",\n                height=4, aspect=.7);","36035116":"df=train.groupby(['Gender'])['Driving_License'].count().to_frame().reset_index()\ndf","417ff800":"sns.catplot(x=\"Gender\", y=\"Driving_License\",\n                data=df, kind=\"bar\");","10526633":"df=train.groupby(['Vehicle_Age','Response'])['id'].count().to_frame().rename(columns={'id':'count'}).reset_index()\ndf","b134e5bf":"g = sns.catplot(x=\"Vehicle_Age\", y=\"count\",col=\"Response\",\n                data=df, kind=\"bar\",\n                height=4, aspect=.7);","f3ef1d98":"df=train.groupby(['Vehicle_Damage','Response'])['id'].count().to_frame().rename(columns={'id':'count'}).reset_index()","355e492e":"g = sns.catplot(x=\"Vehicle_Damage\", y=\"count\",col=\"Response\",\n                data=df, kind=\"bar\",\n                height=4, aspect=.7);","6a705831":"def outlier_thresholds(dataframe, col_name, q1=0.05, q3=0.95):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 3 * interquantile_range\n    low_limit = quartile1 - 3 * interquantile_range\n    return low_limit, up_limit\n\n\ndef check_outlier(dataframe, col_name):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n        return True\n    else:\n        return False","8646f0b7":"for col in num_cols:\n    print(f\"{col} : {check_outlier(train,col)}\")","5661507e":"def grab_outliers(dataframe, col_name, index=False):\n    low, up = outlier_thresholds(dataframe, col_name)\n\n    if dataframe[((dataframe[col_name] < low) | (dataframe[col_name] > up))].shape[0] > 10:\n        print(dataframe[((dataframe[col_name] < low) | (dataframe[col_name] > up))].head())\n    else:\n        print(dataframe[((dataframe[col_name] < low) | (dataframe[col_name] > up))])\n\n    if index:\n        outlier_index = dataframe[((dataframe[col_name] < low) | (dataframe[col_name] > up))].index\n        return outlier_index","bd68cb31":"for col in num_cols:\n    col, grab_outliers(train, col)","59574365":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","fdb2dba0":"for col in num_cols:\n    replace_with_thresholds(train, col)","6a1cf37c":"# CHECK OUTLIERS AGAIN\nfor col in num_cols:\n    print(f\"{col} : {check_outlier(train,col)}\")","342ad104":"train.drop(\"id\",axis =1).quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T","b6087c36":"df.corrwith(train[\"Response\"]).sort_values(ascending=False)\ncorr_df = train.corr()\nplt.figure(figsize=(12, 9))\nsns.heatmap(corr_df, annot=True, xticklabels=corr_df.columns, yticklabels=corr_df.columns)\n\ncorr_df = corr_df.corr().unstack().sort_values().drop_duplicates()\ncorr_df = pd.DataFrame(corr_df, columns=[\"corr\"])\ncorr_df.index.names = ['1', '2']\ncorr_df = corr_df.reset_index()\ncorr_df.sort_values(by=\"corr\", ascending=True).head(30)\n\nhigh_corr = corr_df[(corr_df[\"corr\"] >= 0.70) | (corr_df[\"corr\"] <= -0.70)]\nhigh_corr","3b97d416":"train['Gender'] = train['Gender'].map( {'Female': 0, 'Male': 1} ).astype(int)","16d96ac4":"train=pd.get_dummies(train,drop_first=True)","807cc783":"train","5960ccc3":"train=train.rename(columns={\"Vehicle_Age_< 1 Year\": \"Vehicle_Age_lt_1_Year\", \"Vehicle_Age_> 2 Years\": \"Vehicle_Age_gt_2_Years\"})\ntrain['Vehicle_Age_lt_1_Year']=train['Vehicle_Age_lt_1_Year'].astype('int')\ntrain['Vehicle_Age_gt_2_Years']=train['Vehicle_Age_gt_2_Years'].astype('int')\ntrain['Vehicle_Damage_Yes']=train['Vehicle_Damage_Yes'].astype('int')","b7f44ead":"train[\"premium_age_ratio\"] = train[\"Annual_Premium\"]\/train[\"Age\"]","fa6a8898":"train[\"premium_vintage_ratio\"] = train[\"Annual_Premium\"]\/train[\"Vintage\"]","9c9fd888":"train","540da5b4":"num_feat = ['Age','Vintage','premium_age_ratio','premium_vintage_ratio']\nss = StandardScaler()\ntrain[num_feat] = ss.fit_transform(train[num_feat])","da0c65ed":"mm = MinMaxScaler()\ntrain[['Annual_Premium']] = mm.fit_transform(train[['Annual_Premium']])","8216324a":"train=train.drop('id',axis=1)","5dddc95e":"cat_feat = ['Gender', 'Driving_License', 'Previously_Insured', 'Vehicle_Age_lt_1_Year','Vehicle_Age_gt_2_Years','Vehicle_Damage_Yes']\nfor column in cat_feat:\n    train[column] = train[column].astype('str')","fe5596e4":"test['Gender'] = test['Gender'].map( {'Female': 0, 'Male': 1} ).astype(int)\ntest=pd.get_dummies(test,drop_first=True)\ntest=test.rename(columns={\"Vehicle_Age_< 1 Year\": \"Vehicle_Age_lt_1_Year\", \"Vehicle_Age_> 2 Years\": \"Vehicle_Age_gt_2_Years\"})\ntest['Vehicle_Age_lt_1_Year']=test['Vehicle_Age_lt_1_Year'].astype('int')\ntest['Vehicle_Age_gt_2_Years']=test['Vehicle_Age_gt_2_Years'].astype('int')\ntest['Vehicle_Damage_Yes']=test['Vehicle_Damage_Yes'].astype('int')\ntest[\"premium_age_ratio\"] = test[\"Annual_Premium\"]\/test[\"Age\"]\ntest[\"premium_vintage_ratio\"] = test[\"Annual_Premium\"]\/test[\"Vintage\"]\ntest=test.drop('id',axis=1)","35be557d":"ss = StandardScaler()\ntest[num_feat] = ss.fit_transform(test[num_feat])\n\n\nmm = MinMaxScaler()\ntest[['Annual_Premium']] = mm.fit_transform(test[['Annual_Premium']])","61506647":"for column in cat_feat:\n    test[column] = test[column].astype('str')","3df45da4":"training_data, testing_data = train.drop('Response', axis=1),train['Response']","3d4dd235":"x_train, x_test, y_train, y_test = train_test_split(training_data,testing_data, test_size=0.2, random_state=42)","4ca45775":"x_train","66be8d68":"x_test","b36b6d42":"for column in cat_feat:\n    x_train[column] = x_train[column].astype('int')\n    x_test[column] = x_test[column].astype('int')","adbc5302":"for column in num_feat:\n    x_train[column] = x_train[column].astype('int')\n    x_test[column] = x_test[column].astype('int')","ff48ac98":"model_xgb = XGBClassifier()\nmodel_xgb.fit(x_train, y_train,eval_metric='mlogloss')\n\npred_xgb = model_xgb.predict(x_test) \npredictions_xgb = [round(value) for value in pred_xgb]\naccuracy_xgb = accuracy_score(y_test, predictions_xgb)\nprint(\"Accuracy: %.2f%%\" % (accuracy_xgb * 100.0))","a4e86688":"#params = {\n    #\"max_depth\" : range(2,10,1),\n    #\"n_estimators\" : range(60,220,40),\n    #\"learning_rate\" : [0.1,0.01,0.05]}","efda9ad7":"#grid_search_xgb = GridSearchCV(model_xgb,\n                               #param_grid = params,\n                               #scoring = 'roc_auc',\n                               #n_jobs = 10,\n                               #cv = 10,\n                               #verbose = True)","277dc302":"#grid_search_xgb.fit(x_train,y_train)","710f6b01":"#grid_search_xgb.best_estimator_","4e5f76b4":"model_xgb_tuned = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n                                colsample_bynode=1, colsample_bytree=1, enable_categorical=False,\n                                gamma=0, gpu_id=-1, importance_type=None,\n                                interaction_constraints='', learning_rate=0.1, max_delta_step=0,\n                                max_depth=5, min_child_weight=1,eval_metric='mlogloss',\n                                monotone_constraints='()', n_estimators=180, n_jobs=12,\n                                num_parallel_tree=1, predictor='auto', random_state=0,\n                                reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n                                tree_method='exact', validate_parameters=1, verbosity=None)\n\n\nmodel_xgb_tuned.fit(x_train, y_train)\npred_xgb_tuned = model_xgb_tuned.predict(x_test) \npredictions_xgb_tuned = [round(value) for value in pred_xgb_tuned]\naccuracy_xgb_tuned = accuracy_score(y_test, predictions_xgb_tuned)\nprint(\"Accuracy: %.2f%%\" % (accuracy_xgb_tuned * 100.0))","7ccb78dd":"X_train, Y_train = train.drop(\"Response\",axis = 1), train[\"Response\"]","c137a21a":"X_train","03fabacf":"Y_train","8a474f72":"test","4a455752":"for column in cat_feat:\n    X_train[column] = X_train[column].astype('int')\n    test[column] = test[column].astype('int')","584f2926":"for column in num_feat:\n    X_train[column] = X_train[column].astype('int')\n    test[column] = test[column].astype('int')","02e15c50":"from xgboost import XGBClassifier, plot_importance\n\n# fit model no training data\nmodel2 = XGBClassifier(eval_metric='mlogloss')\nmodel2.fit(X_train, Y_train)\n\ny_pred1 = model2.predict(test)\npredictions2 = [round(value) for value in y_pred1]","bdde13cd":"test_2 = pd.DataFrame()","a829c79d":"test_2['Response'] = sub['Response']\ntest_2[\"Pred_Response\"] = predictions2","49732da9":"test_2","957dc57d":"accuracy_2 = accuracy_score(test_2['Response'].values, test_2['Pred_Response'].values)\nprint(\"Accuracy: %.2f%%\" % (accuracy_2 * 100.0))","ce4ab57a":"# DATA PREPROCESSING","65dc2302":"### Gender-Response Visualization","ace7def2":"## CORRELATION ANALYSIS","ba5d7a40":"## OUTLIERS","bee607cf":"### Applying the same processes to the Test Data","5fc2b652":"## FEATURE ENGINEERING","fc23aa2c":"***There is no missing data.***","5fc39c46":"### Response-Vehicle age Visualization","bacf7c23":"***Let use all values in the train set to estimate Response values in test data. Then we'll compare prediction Responses according to the Submission data. Because the sample_submission.csv has actual Responses values. We can see how our model is good.***","aed789ef":"## XGBOOST","e746afa3":"### Damage Vehicle-Response Visualization","5c436d09":"# HEALTH INSURANCE CROSS SELL PREDICTION","9450e745":"![1.jpg](attachment:544d8b88-bde4-4e2b-92a2-2542814988cc.jpg)","a45037d9":"### Import Dataset","8c8836c5":"### Import Libraries","be3dbd28":"### Train-Test Split","a979b007":"## Data Description\n**id:** Unique ID for the customer\n\n**Gender:** Gender of the customer\n\n**Age:** Age of the customer\n\n**Driving_License\t0 :** Customer does not have DL, **1 :** Customer already has DL\n\n**Region_Code:** Unique code for the region of the customer\n\n**Previously_Insured\t1 :** Customer already has Vehicle Insurance, **0 :** Customer doesn't have Vehicle Insurance\n\n**Vehicle_Age:** Age of the Vehicle\n\n**Vehicle_Damage\t1 :** Customer got his\/her vehicle damaged in the past. **0 :** Customer didn't get his\/her vehicle damaged in the past.\n\n**Annual_Premium:**\tThe amount customer needs to pay as premium in the year\n\n**PolicySalesChannel:**\tAnonymized Code for the channel of outreaching to the customer ie. Different Agents, Over Mail, Over Phone, In Person, etc.\n\n**Vintage:**\tNumber of Days, Customer has been associated with the company\n\n**Response\t1 :** Customer is interested, **0 :** Customer is not interested","e6e21946":"### Driving license-Gender Visualization","e74b6b96":"Our client is an Insurance company that has provided Health Insurance to its customers now they need your help in building a model to predict whether the policyholders (customers) from the past year will also be interested in Vehicle Insurance provided by the company.\n\nAn insurance policy is an arrangement by which a company undertakes to provide a guarantee of compensation for specified loss, damage, illness, or death in return for the payment of a specified premium. A premium is a sum of money that the customer needs to pay regularly to an insurance company for this guarantee.\n\nFor example, you may pay a premium of Rs. 5000 each year for a health insurance cover of Rs. 200,000\/- so that if God forbid, you fall ill and need to be hospitalized in that year, the insurance provider company will bear the cost of hospitalization, etc. for up to Rs. 200,000. Now if you are wondering how can the company bear such high hospitalization costs when it charges a premium of only Rs. 5000\/-, that is where the concept of probabilities comes into the picture. For example, like you, there may be 100 customers who would be paying a premium of Rs. 5000 every year, but only a few of them (say 2-3) would get hospitalized that year, and not everyone. This way everyone shares the risk of everyone else.\n\nJust like medical insurance, there is vehicle insurance where every year customer needs to pay a premium of a certain amount to insurance provider company so that in case of unfortunate accident by the vehicle, the insurance provider company will provide compensation (called \u2018sum assured\u2019) to the customer.\n\nBuilding a model to predict whether a customer would be interested in Vehicle Insurance is extremely helpful for the company because it can then accordingly plan its communication strategy to reach out to those customers and optimize its business model and revenue.\n\nNow, in order to predict, whether the customer would be interested in Vehicle insurance, you have information about demographics (gender, age, region code type), Vehicles (Vehicle Age, Damage), Policy (Premium, sourcing channel), etc.","26746b8b":"### Check Columns (Categorical or Numeric)"}}