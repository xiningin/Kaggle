{"cell_type":{"13452c45":"code","3721ddae":"code","d95bbb18":"code","181ad4a1":"code","9d27e00a":"code","34a0f5f0":"code","2330f50f":"code","f88b2293":"code","a5b678c6":"code","ce6497cb":"code","c71fc298":"code","8d0619fd":"code","f022880a":"code","63f89345":"code","a592f676":"code","88d1cfe4":"code","b2250025":"code","bee6770a":"code","ac89889f":"code","2ed81900":"code","ae3373e8":"code","3dd22958":"code","31c8f6a8":"code","796fb1bd":"code","594c0a09":"code","2c400632":"code","703bdc9f":"code","8d4be0ce":"markdown","32a65051":"markdown","14089ebb":"markdown","a9a6d678":"markdown","82968c2c":"markdown","ce34ba9f":"markdown","40ebe741":"markdown","9114448a":"markdown","052c909d":"markdown","3a1f8acf":"markdown","86a36003":"markdown","651f8282":"markdown","ad629dd8":"markdown","77b971ff":"markdown","2a925adc":"markdown","e9c3f8c8":"markdown","438343a0":"markdown","1ef80fa0":"markdown","5155b32d":"markdown","73584b30":"markdown","62c94cdf":"markdown","46e58592":"markdown","e7d2331f":"markdown","d404e9ba":"markdown","3fdfc18a":"markdown","fec94251":"markdown","9f255200":"markdown","9f903112":"markdown","5f1afa69":"markdown","ead8e816":"markdown","17dc8219":"markdown","b8fbcad5":"markdown","1f15d374":"markdown","98a1d886":"markdown","7c3ebf07":"markdown","8136fbab":"markdown","7c169957":"markdown","b1333df6":"markdown","d2ec9712":"markdown","cdd1858f":"markdown","11678be0":"markdown","1db2ce05":"markdown","796fe7ef":"markdown"},"source":{"13452c45":"#Data Processing\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', None)\n\n#Visualization\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt \nimport matplotlib.dates as mdates\nimport seaborn as sns\n\n#Set-up Visualization settings\n%matplotlib inline\nplt.style.use('fivethirtyeight')\nmpl.rcParams['figure.figsize'] = (11, 4)\nblue=\"#30a2da\"\nred = \"#fc4f30\"\nyellow = \"#e5ae38\"\ngreen = \"#6d904f\"\ngrey = \"#8b8b8b\"\nfive_thirty_eight = [blue, red, yellow, green, grey]\nsns.set_palette(five_thirty_eight)\n\n\n#Maps Visualization\nimport geopandas as gpd\nimport folium\nfrom folium import Choropleth","3721ddae":"#Read in the Data\nlistings_19 = pd.read_csv('..\/input\/airbnb\/listings_summary.csv', parse_dates=['last_review'])\nlistings_20 = pd.read_csv('..\/input\/airbnb-2020-post-covid\/listings_20.csv', parse_dates=['last_review'])\nreviews = pd.read_csv('..\/input\/airbnb-2020-post-covid\/reviews_20.csv',parse_dates=['date'])","d95bbb18":"#Explore the 2019 data\nlistings_19","181ad4a1":"#Explore columns\nlistings_19.info()","9d27e00a":"#Explore the 2020 data\nlistings_20","34a0f5f0":"#Explore columns\nlistings_20.info()","2330f50f":"#Drop listings with no reviews\nlistings_19.dropna(subset=['last_review'], inplace=True)\nlistings_20.dropna(subset=['last_review'], inplace=True)","f88b2293":"#Explore reviews\nreviews","a5b678c6":"reviews.info()","ce6497cb":"#Group Total Reviews by Month and Year\nreviews = reviews.set_index('date')\nyear_reviews = reviews.resample('Y').size()\nmonth_reviews = reviews.resample('M').size()\nyear_mean = month_reviews.resample('Y').mean()\nyear_mean = year_mean.shift(6, freq='M') #centre it in the middle of each year","c71fc298":"#Format percentages for plotting\ndef convert_to_pct(x):\n    if x<0:\n        return str(x)+'%'\n    if x>0:\n        return '+'+str(x)+'%'\n    if x==0:\n        return '0.0%'\n\n#Calculate the total reviews year percentage change\nper_change = round(year_reviews.pct_change().loc['2012':]*100,1).apply(convert_to_pct)","8d0619fd":"#Plot Total Reviews per Year Evolution\n\nfig, ax = plt.subplots()\n\nyear_reviews.plot.bar(ax=ax)\n\nax.set_xticklabels(list(range(2009,2021)))\nax.get_yaxis().set_major_formatter(\n    mpl.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax.set_ylim(-10000,410000)\n\nfor i, p in enumerate(ax.patches[3:]):\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy() \n    ax.annotate(f'{per_change[i]}', (x + width\/2, y + height+5000), ha='center')\n    \nax.set_xlabel('')\nax.set_ylabel('Year Reviews')\nax.set_title('Total Reviews per Year Evolution');","f022880a":"#Plot Total Reviews per Month Evolution\nfig, ax = plt.subplots()\nmonth_reviews.plot(figsize=(15,10), marker='o', markersize=8, ax=ax, label='Monthly Reviews')\nyear_mean.plot(ax=ax, color='green', marker='o', markersize=12, label='Monthly Reviews (Year Mean)')\nax.axvline('20-March-2020', color='red', linestyle='--', label = 'Start of First England Lockdown', linewidth=3)\nax.set_xlim('Dec-2009','Feb-2021')\nax.set_xticks(pd.to_datetime(list(range(2010,2022)), format='%Y'))\nax.set_xticklabels(list(range(2010,2022)))\nax.set_xlabel('')\nax.get_yaxis().set_major_formatter(\n    mpl.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax.set_ylabel('Monthly Reviews')\nax.set_title('Total Reviews per Month Evolution')\nplt.legend();","63f89345":"#Prepare x-axis dates\ndates = pd.date_range(start='31-Jan-2016', end='31-Jan-2021', freq='3M')\ndates = dates[dates.month!=1]\nyears = pd.to_datetime(list(range(2016,2022)), format='%Y')\nyears.strftime('%Y')\n\n#Plot Total Reviews per Month Evolution\nfig, ax = plt.subplots()\nmonth_reviews_16_20 = month_reviews[month_reviews.index.year>=2016].copy()\nmonth_reviews_16_20.plot(figsize=(15,10), marker='o', markersize=8, ax=ax, label='Monthly Reviews')\nyear_mean.plot(ax=ax, color='green', marker='o', markersize=12, label='Monthly Reviews (Year Mean)')\nax.axvline('20-March-2020', color='red', linestyle='--', label = 'Start of 1st England Lockdown', linewidth=3)\nax.axvline('1-June-2020', color='purple', linestyle='--', label = 'End of 1st England Lockdown', linewidth=3)\nax.axvline('12-Oct-2020', color='brown', linestyle='--', label = 'Tier System Announced', linewidth=3)\n\nax.set_xlim('Dec-2015','Feb-2021')\nax.set_xticks(years, minor=False)\nax.set_xticklabels(years.strftime('%Y'), rotation=90, minor=False, fontweight='bold')\nax.set_xticks(dates, minor=True)\nax.set_xticklabels(dates.strftime('%b'), rotation=90, minor=True)\nax.grid(which='minor')\n\nfor year in years:\n    ax.axvline(year, linewidth=1, color='grey')\n\nax.get_yaxis().set_major_formatter(\n    mpl.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))    \n\nax.set_xlabel('')\nax.set_ylabel('Monthly Reviews')\nax.set_title('Total Reviews per Month Evolution')\nplt.legend();","a592f676":"#Prepare data for plotting\nmonth_reviews_19 = month_reviews['2019'].values[:-1]\nmonth_reviews_20 = month_reviews['2020'].values\nindex = pd.date_range(start='2020-01', freq='M', periods=11).month_name()\nreviews_compare = pd.DataFrame(data={'2019':month_reviews_19, '2020':month_reviews_20}, index=index)\nper_change = round(reviews_compare.apply(lambda row: (row.iloc[1]-row.iloc[0])\/row.iloc[0]*100, axis=1),1)\n\n#Plot Month Reviews Comparison 2019vs2020\nfig, axes = plt.subplots(2, 1, figsize=(11, 10))\n\nreviews_compare.plot.bar(ax=axes[0])\naxes[0].set_ylabel('Monthly Reviews')\naxes[0].get_yaxis().set_major_formatter(\n    mpl.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\naxes[0].set_title('Total Monthly Reviews\\n (2019 vs 2020)')\naxes[0].legend(loc=(1,0.8))\nplt.tight_layout()\n\nper_change.plot(ax=axes[1], color='black', linewidth=3, marker='o', markersize=8)\naxes[1].set_xticks(np.arange(11))\naxes[1].set_xticklabels(index, rotation=90)\naxes[1].set_ylim(-105,105)\naxes[1].axhline(0, linewidth=1, color='black')\naxes[1].yaxis.set_major_formatter(mpl.ticker.PercentFormatter())\naxes[1].set_title('Percentage Change in Total Monthly Reviews (2019 to 2020)')\nplt.tight_layout()","88d1cfe4":"lry_19 = listings_19['last_review'].dt.year.value_counts() #Last-reviewed Year Distribution\nlry_19.index = lry_19.index.astype(int) #Prepare for plotting\nlry_19 = lry_19.sort_index()\n\nlry_19_per = round(listings_19['last_review'].dt.year.value_counts(normalize=True),2) #Calculate percentage for each year\nlry_19_per = lry_19_per.sort_index(ascending=True)\n\n#Plot year of last review distribution on 05-11-19\nfig, ax = plt.subplots()\nlry_19.plot.bar()\nax.set_xlabel('\\nYear of Last Review')\nax.set_ylabel('Number of Listings\\n')\nax.set_ylim(-1000,61000)\n\nax.get_yaxis().set_major_formatter(\n    mpl.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\nax.set_title('05-Nov-2019')\n\nfor i,p in enumerate(ax.patches):\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy() \n    ax.annotate(f'{lry_19_per.iloc[i]:.1%}', (x + width\/2, y + height+700), ha='center')","b2250025":"lry_20 = listings_20['last_review'].dt.year.value_counts() #Last-reviewed Year Distribution\nlry_20.index = lry_20.index.astype(int) #Prepare for plotting\nlry_20 = lry_20.sort_index()\n\nlry_20_per = round(listings_20['last_review'].dt.year.value_counts(normalize=True),2) #Calculate percentage for each year\nlry_20_per = lry_20_per.sort_index(ascending=True)\n\n#Plot year of last review distribution on 06-11-20\nfig, ax = plt.subplots()\nblue='#008FD5'\nred = '#FF2700'\nlry_20.plot.bar(color=red)\nax.set_xlabel('\\nYear of Last Review')\nax.set_ylabel('Number of Listings\\n')\nax.set_ylim(-1000,61000)\n\nax.get_yaxis().set_major_formatter(\n    mpl.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\nax.set_title('06-Nov-2020')\n\nfor i,p in enumerate(ax.patches):\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy() \n    ax.annotate(f'{lry_20_per.iloc[i]:.1%}', (x + width\/2, y + height+700), ha='center')","bee6770a":"list_act_19 = listings_19[listings_19['last_review'].dt.year==2019]\nlist_act_20 = listings_20[listings_20['last_review'].dt.year==2020]\n\nnum_act_19 = len(list_act_19)\nnum_act_20 = len(list_act_20)\n\ndf_act = pd.Series({'2019':num_act_19, '2020':num_act_20})\nax = df_act.plot.bar(color=[blue, red])\nax.get_yaxis().set_major_formatter(\n    mpl.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax.set_ylim(-1000,55000)\nax.set_xlabel('')\nax.set_ylabel('Total Active Listings')\nax.set_title('Change in Number of Active Listings');","ac89889f":"fig, axes = plt.subplots(2,1, figsize=(14,5), sharex=True)\n\nlist_act_19['reviews_per_month'].plot.box(vert=False, ax=axes[0])\naxes[0].set_yticklabels([''])\naxes[0].set_title('Distribution of Average Reviews per Month in 2019')\n\n\nlist_act_19['reviews_per_month'].plot.hist(ax=axes[1])\naxes[1].set_xlabel('Average Reviews per Month')\naxes[1].set_ylabel('Number of Listings')\naxes[1].get_yaxis().set_major_formatter(\n    mpl.ticker.FuncFormatter(lambda x, p: format(int(x), ',')));","2ed81900":"#Combine both datasets to make it easier to plot\n\ndata_19 = list_act_19[['id','reviews_per_month', 'price', 'neighbourhood', 'room_type']].copy()\ndata_19['year']=2019\ndata_20 = list_act_20[['id','reviews_per_month', 'price', 'neighbourhood', 'room_type']].copy()\ndata_20['year']=2020\n\ncombined = pd.concat([data_19, data_20], ignore_index=True)","ae3373e8":"combined_plt = combined[combined.reviews_per_month<=8.5] #Don't show the most extreme outliers\n\n#Plot Listing Average Reviews Distribution\\n(2019 vs 2020)\nfig, axes = plt.subplots(2,1, figsize=(14,5), sharex=True)\n\nsns.boxplot(x='reviews_per_month', y='year', data=combined_plt, orient='h', ax=axes[0]).set(ylabel='Year\\n')\naxes[0].set_title('Listings Average Monthly Reviews\\nFrequency Distribution\\n(2019 vs 2020)')\nplt.tight_layout()\naxes[1].set_xlabel('')\n\nlist_act_19['reviews_per_month'].plot.hist(\n    ax=axes[1], bins=np.arange(0,9,0.5),  #Don't show the most extreme outliers\n    histtype='step', linewidth=3, label=2019\n    )\nlist_act_20['reviews_per_month'].plot.hist(\n    ax=axes[1], bins=np.arange(0,9,0.5), #Don't show the most extreme outliers\n    histtype='step', linewidth=3, label=2020)\n\naxes[1].set_xticks(np.arange(0,9,0.5))\naxes[1].set_xlabel('Reviews per Month')\naxes[1].set_ylabel('Number of Listings')\naxes[1].get_yaxis().set_major_formatter(\n    mpl.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\naxes[1].set_ylim(-1000,16000)\naxes[1].legend();","3dd22958":"#Calculate the number and percentage of listings for each type of accommodation in 2019 and 2020\nlisting_types = pd.crosstab(index=combined['room_type'], columns=combined['year'])\nlisting_types_per = pd.crosstab(index=combined['room_type'], columns=combined['year'], normalize='columns')\nlisting_types = listing_types.loc[['Entire home\/apt', 'Private room','Hotel room', 'Shared room']]\nlisting_types_per = listing_types_per.loc[['Entire home\/apt', 'Private room','Hotel room', 'Shared room']]\n\n#Plot Types of Active Listings 2019 vs 2020\nfig, ax = plt.subplots()\n\nlisting_types.T.plot.bar(ax=ax)\n\nax.get_yaxis().set_major_formatter(\n    mpl.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\nax.set_ylim(-1000,31000)\n\nax.set_xlabel('Year')\nax.set_ylabel('Total Active Listings')\nax.set_title('Types of Active Listings\\n(2019 vs 2020)')\n\nfor i,p in enumerate(ax.patches):\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy() \n    value = listing_types_per.T.unstack().iloc[i]\n    ax.annotate(f'{value:.1%}', (x + width\/2, y + height+700), ha='center')","31c8f6a8":"review_rates_rooms = combined.pivot_table(index='room_type', columns=['year'], aggfunc='mean').loc[:,'reviews_per_month']\nreview_rates_rooms = review_rates_rooms.loc[['Entire home\/apt', 'Private room','Hotel room', 'Shared room']]\nper_change = round(review_rates_rooms.apply(lambda row: (row.iloc[1]-row.iloc[0])\/row.iloc[0]*100, axis=1),1).astype(str)+'%'\n\n#Plot Change in Review Rate\\nper Accommodation Type\\n(Active Listings Only)\nfig, ax = plt.subplots(figsize=(6,6))\n\nreview_rates_rooms.T.plot(marker='o', ax=ax)\nax.set_xticks([2019,2020])\nax.set_xticklabels([2019,2020])\nax.set_ylim(0.75,2.1)\nax.set_xlabel('Year')\nax.set_ylabel('Mean Monthly Listings Reviews')\nax.set_title('Change in Review Rate\\nper Accommodation Type\\n(Active Listings Only)')\nax.text(x = 2019.2, y = 1.8, s = per_change['Private room'], color = red, weight = 'bold')\nax.text(x = 2019.2, y = 1.55, s = per_change['Shared room'], color = green, weight = 'bold')\nax.text(x = 2019.2, y = 1.1, s = per_change['Entire home\/apt'], color = blue, weight = 'bold')\nax.text(x = 2019.2, y = 1.3, s = per_change['Hotel room'], color = yellow, weight = 'bold')\n\nax.legend(loc=1);","796fb1bd":"# Plot price Distribution by Accommodation Type\nfig, ax = plt.subplots(figsize=(11, 10))\n\ncombined_price_cleaned = combined[combined.price<400]\nsns.boxplot(x='price', y='room_type', hue='year', \n            data=combined_price_cleaned, orient='h', ax=ax).set(xlabel='Price ($)\\n', ylabel='Accommodation Type\\n')\nax.set_title('Price Distribution by Accommodation Type\\n(2019 vs 2020)')\nplt.show()","594c0a09":"#Calculate the number of listings per neighbourhood\nlistings_nbd_year = pd.crosstab(index=combined['neighbourhood'], columns=combined['year'])\nper_change = listings_nbd_year.apply(lambda row: (row.iloc[1]-row.iloc[0])\/row.iloc[0], axis=1)\norder = combined.loc[combined.year==2019, 'neighbourhood'].value_counts().sort_values(ascending=True).index\nlistings_nbd_year = listings_nbd_year.loc[order]\nper_change = per_change.loc[order]\n\n#Plot Change in Number of Listings per Neighbourhood\nfig, ax = plt.subplots(figsize=(11,15))\n\nlistings_nbd_year[[2020,2019]].plot.barh(ax=ax, color=[red,blue])\nax.set_xlabel('Number of Active Listings')\nax.set_ylabel('Neighbourhood')\nax.set_xlim(-100,7100)\nax.set_title('Change in Number of Listings per Neighbourhood\\n(2019 vs 2020)')\nfor i,p in enumerate(ax.patches[33:66]):\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy()\n    value = per_change.iloc[i]\n    ax.annotate(f'{value:.1%}', (x+width+400, y-height\/2), ha='center')\n    \nax.legend(loc=(0.8,0.8))\n    \nplt.show()","2c400632":"#Calculate the proportion of listing types per borough and year\nroom_types_nb_19 = pd.crosstab(index=list_act_19['neighbourhood'], columns=list_act_19['room_type'], normalize='index')*100\nroom_types_nb_19 = room_types_nb_19.loc[order, listing_types.index]\n\n#Plot the proportion of listing types per borough and year\nfig, ax = plt.subplots(figsize=(11, 10))\nroom_types_nb_19.sort_values(by='Entire home\/apt').plot.barh(ax=ax, stacked=True)\nax.set_xlabel('Percentage (%)')\nax.set_ylabel('Borough')\nax.set_title('Types of Active Listings per Borough (2019)')\nax.legend(loc=(1.05,0.5))\nplt.show()\n\nroom_types_nb_20 = pd.crosstab(index=list_act_20['neighbourhood'], columns=list_act_20['room_type'], normalize='index')*100\nroom_types_nb_20 = room_types_nb_20.loc[order, listing_types.index]\n\nfig, ax = plt.subplots(figsize=(11, 10))\nroom_types_nb_20.sort_values(by='Entire home\/apt').plot.barh(ax=ax, stacked=True)\nax.set_xlabel('Percentage (%)')\nax.set_ylabel('Borough')\nax.set_title('Types of Active Listings per Borough (2020)')\nax.legend(loc=(1.05,0.5))\nplt.show()","703bdc9f":"nb_listings = list_act_19['neighbourhood'].value_counts().sort_values()\n\nboroughs = gpd.read_file('..\/input\/airbnb\/neighbourhoods.geojson')\nboroughs = boroughs[['neighbourhood', 'geometry']].set_index('neighbourhood')\n\nf = folium.Figure(width=1000, height=700)\nm_1 = folium.Map(tiles='openstreetmap').add_to(f)\nm_1.fit_bounds([[51.697855, -0.519505], [51.276832, 0.353619]])\n\nChoropleth(geo_data=boroughs.__geo_interface__, \n           data=nb_listings, \n           key_on=\"feature.id\", \n           fill_color='YlGnBu', \n           legend_name='Number of Listings'\n          ).add_to(m_1)\nm_1","8d4be0ce":"# 6. Impact by Neighbourhood","32a65051":"Observations:\n- These 2 datasets are 'pictures' of the airbnb website on a certain day. The first one on 05-11-19 (pre-covid) and the second one on 06-11-20 (post-covid) respectively. \n- There is not a variable that tells us directly the occupancy rate of the listings. We'll use the reviews_per_month column as a proxy variable. It's sensible to think that the review rate is approximately proportional to the occupancy rate.\n- There are missing values on the last_review and reviews_per_month columns in both datasets. There are also listings where the last review was more than a year before the data was taken. We'll get rid of the listings that have not received any reviews at all.","14089ebb":"The occupancy rate in 2020 was still growing in January and February with respect to 2019. Every month after that experienced a huge drop. April, May, June and November were the worst months. July, August, September and October have the highest occupancy rates in 2020 but still suffered very large drops in occupancy.","a9a6d678":"By the end of 2019, 25% of listings had not received a review on that year. We'll consider them inactive and delete them. Let's take a look at 2020:","82968c2c":"In this project, we'll assess how the Covid-19 pandemic has affected the Airbnb market in London. We'll aim to find out the impact on:\n- Occupation Rates\n- Types of Accommodation\n- Prices\n- Which neighbourhoods are most affected","ce34ba9f":"We can see that listings in popular tourist destinations like the West End and trendy areas like the East End have the highest number of listings, whereas listings in Outer London Boroughs have much lower numbers. The drop in the number of active listings is around 50% in tourist popular boroughs, whereas in not touristy areas is lower, and as low as 14.8% in Bexley, in Outer London.","40ebe741":"The proportion of listing types has not changed significantly for any neighbourhood.","9114448a":"As we can see in the graph below, boroughs with tourist destinations tend to have a higher proportion of Entire Homes, whereas in outer London, the most popular option is Private Rooms. This explains why Private Rooms had a lower decrease in price than Entire Homes.","052c909d":"As it was expected, Hotel Rooms and Entire Homes are the most expensive on average, followed by Private Rooms and Shared Rooms. The biggest drop in price from 2019 to 2020 happened for Hotel Rooms, followed by Entire Homes, whereas the price for Shared Rooms increased slightly and for Private Rooms decreased slightly.","3a1f8acf":"Let's compare 2020 with 2019:","86a36003":"Let's look at the change in prices:","651f8282":"Let's take a look at the monthly variation:","ad629dd8":"The map below helps visualize the difference in popularity among boroughs in 2019:","77b971ff":"The data is publicly available on the website [Inside Airbnb](http:\/\/insideairbnb.com\/). It contains data from listings in many cities across Europe and America. The data is sourced from publicly available information from the Airbnb site, so there are no privacy issues.\n\nWe'll compare the scrapped data on November-2019 (pre-pandemic) to the one on November-2020.","2a925adc":"The number of active listings has nearly halved in the past year, which is consistent with the drop in the total occupancy rate.","e9c3f8c8":"# 5. Impact on Types of Listings","438343a0":"# 1. Import Libraries","1ef80fa0":"In this project, we assessed the impact of the Covid-19 Pandemic on the London Airbnb Market. We found out that:\n- The total number of bookings in 2020 was 75% less than in 2019, breaking a rapid growing trend. The number of listings that got at least 1 review was half.\n- Boroughs popular with tourists like Westminster and Kensington, and trendy areas like Tower Hamlets and Hackney were the most affected.\n- Entire Homes, which are the most popular option in central touristy areas, and hotels had the highest decrease in price. Prices in Private Rooms, which are the majority in the rest of London had a lower drop. Prices in Shared Rooms increased slightly, though this option remains the least popular.\n\nIdeas to expand this project include:\n- Analyse the change in price per accommodation type per borough.\n- Compare the impact on London with other cities. Data is publicly available on [Inside Airbnb](http:\/\/insideairbnb.com\/).\n- Compare the impact on the Airbnb Market with the impact on the housing market.","5155b32d":"# 7. Conclusion","73584b30":"Before 2020, there was a clear growing trend from year to year and a similar seasonal variation with respect to the mean for each year. The winter months had the lowest occupation rate and the summer months the highest.\n\nIn happier pre-pandemic times August was always the busiest month for holidays, but we can see that September typically has a higher review rate than August. This is very likely due to guests taking a few weeks to leave a review. We can assume that there is a time offset between the review rate and the occupancy rate.\n\nThere is a huge drop in the review rate from March-2020 onwards. The month of March, whose review rate is typically larger than February's, includes reviews from stays in February, so it is very likely that the occupancy rate was already rapidly falling before the 1st Lockdown was announced, as a result of people cancelling holidays due to the great uncertainty the world was experiencing. The summer months are the only months that save 2020 from having an occupancy rate close to 0. Once the lockdown restrictions were partially eased, the occupancy rate grew, but not to levels comparable to recent years. Once restrictions came back we can see a drop to almost 0% occupancy rate.","62c94cdf":"We can see that the distribution of the Listing Average Reviews per Month for listings in 2020 is more skewed to the bottom-left than in 2019. This means that there were fewer listings being occupied at all in 2020, and the ones that did had lower occupancy rates on average.","46e58592":"# 2. Read and Explore the Data","e7d2331f":"In 2019 Private and Shared Rooms had the highest review rates, and Entire Homes and Hotels the lowest. We considered the total occupancy rate for all listings proportional to the total number of reviews. However, we need to be careful with this assumption when it comes to comparing review rates for different types of accommodations, as people staying in someone's home and personally meeting the host will be more keen on leaving a review than when staying in a hotel or a whole flat and not meeting the host.\n\nThe review rate for Entire Homes and Private rooms had a higher fall than for Hotel Rooms and Shared Rooms. Shared rooms and Hotel Rooms, although being a significantly lower portion of listings than Entire Homes and Private Rooms in houses and flats seem to be less affected by the pandemic.","d404e9ba":"The listings DataFrames have a column called last_review that contains the date each listing was last reviewed. This is a good approximation for when the listing was last occupied. The data for the listings_19 DataFrame was gathered on 5th-Nov-19 and the data for listings_20 on 6th-Nov-2020 (Before and after the pandemic).","3fdfc18a":"We can see that by the end of 2019, 75% of the listings on the website had been occupied in that year. In 2020 there is a big drop, to just 47%.\n\nBelow we compare the number of active listings in the past year for both years:","fec94251":"# Analysis of the impact of the Covid Pandemic on the Airbnb Market in London","9f255200":"Zooming in:","9f903112":"Let's analyse the change in occupancy rate and prices for each neighbourhood:","5f1afa69":"Below we plot the number of reviews per year and the percentage change from the previous year:","ead8e816":"- The total number of active listings in November-2020 was half the number of November-2019, and the total occupation rate fell by 75%.\n- Although still the majority of listings, the proportion of Entire Homes did not increase significantly.\n- Prices for Hotel Rooms and Entire Homes (the majority of listings in popular tourist destinations) were the most affected. Prices for Private and Shared Rooms (most popular option in Outer London) did not change significantly.\n- Areas like the touristy West-End and the trendy East-End had the highest occupancy rate drops.","17dc8219":"# 4. Impact on Individual Listing Occupancy Rates","b8fbcad5":"Observations:\n- The reviews dataset is quite large, containing more than 1 million reviews. This tells us how big the Airbnb market used to be in London.\n- We've got data ranging from 2010 to 2020, so it will allow us to view the change in the review rate across a large time period. \n- We can join the reviews DataFrame with the listings DataFrames on the listing_id column to get interesting information about the occupancy rates for different types of accommodations.","1f15d374":"So far, we've explored the impact on the total occupancy rate, looking at the timeline before and after the pandemic. Now we'll take a look how the reviews were distributed across different types of accommodations.","98a1d886":"As previously mentioned, we'll use the review rate as a proxy variable for the occupancy rate. We'll assume that the total number of reviews is proportional to the total number of bookings.","7c3ebf07":"Let's take a look at when listings were last reviewed: ","8136fbab":"Let's look at the change in occupancy rate for each accommodation type:","7c169957":"We can see that before 2020, the occupancy rate of Airbnbs in London grew every year. It had very low occupancy rates in the early years and then grew really fast from 2012 to 2015, more than doubling each year. It slowed down from 2016, but kept growing at a high pace.\nThe decrease in 2020 of 70.5% is quite significant, completely breaking this trend.","b1333df6":"Let's look at the change in the review rate: ","d2ec9712":"We can see that the vast majority of listings didn't get more than 5 reviews a month in 2019. There are a few listings with very high review rates that distort the distribution. We won't plot these outliers when comparing the distribution of 2019 vs 2020.","cdd1858f":"# 3. Total Occupancy Rate Timeline","11678be0":"Now we'll assess the impact of the Covid Pandemic in more detail. We'll first look at what types of accommodation have been the most affected. Note that we consider to be Active Listings those that have received at least 1 review in the last year:","1db2ce05":"Observations:\n- In 2019, Entire Homes represented the majority of the listings, with 57.6% of the total, followed by Private Rooms in shared houses, with 40.3%. Hotel rooms and Shared rooms have much smaller numbers. \n- We can see that there's been a big decrease in the number of listings for each type of accommodation except Shared Rooms. \n- The last is strange, as we would expect that Shared Rooms would have been wiped and Entire Homes would now represent the vast majority of listings. However, their share has only increased 2%.","796fe7ef":"# Summary of Results"}}