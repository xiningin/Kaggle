{"cell_type":{"b3545077":"code","f51696c9":"code","2eb7b425":"code","eebf6544":"code","5f1d991c":"code","979cba13":"code","1b9dc4bf":"code","dcfc14b8":"code","696d6605":"code","eaf69680":"code","99bdb767":"code","0357c0f3":"code","63001c29":"code","d53ad176":"code","e78e8931":"code","cf6e528c":"code","501f4588":"code","5a1bbbc6":"code","33c09b8b":"code","77176122":"code","685bf861":"code","d23dcc90":"code","b3240892":"code","dcfe230c":"code","53f6d380":"code","977c2068":"code","8a17965e":"code","e8056b42":"code","5b0da179":"code","48674960":"code","da7be0c3":"code","2f70189d":"code","a7c41ffc":"code","3bdb991d":"code","3b24f333":"code","bec66484":"code","888634c8":"code","3159a6e6":"code","e2ce8051":"code","68de9178":"code","0a32e4b4":"code","41644630":"code","d0e793ae":"code","c9e0f105":"code","680d8536":"markdown","d4e64832":"markdown","8b7df78e":"markdown","8d82c52d":"markdown","11f5abda":"markdown","c6f5766a":"markdown","a6026d99":"markdown","dc96b6da":"markdown","1918f3df":"markdown","ae74e927":"markdown"},"source":{"b3545077":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f51696c9":"df_train = pd.read_csv(\"..\/input\/titanic\/train.csv\", index_col=0)\ndf_test = pd.read_csv(\"..\/input\/titanic\/test.csv\", index_col=0)\nprint(df_train.shape)\nprint(df_test.shape)\nfor col in df_train.columns:\n    df_train.rename(columns={col:col.capitalize()}, inplace=True)   #I just like it capitalized\ndf_train.head()","2eb7b425":"df_train.describe()","eebf6544":"df_train.info()","5f1d991c":"df_train.isnull().sum()","979cba13":"#this is just representing the null values visually\nsns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap=\"Blues_r\")","1b9dc4bf":"fig, ax = plt.subplots(figsize=(12,10))\nsns.heatmap(df_train.corr(), ax=ax, annot=True)","dcfc14b8":"df_train.groupby('Sex').mean()","696d6605":"df_train.head()","eaf69680":"df_train['Embarked'] = df_train['Embarked'].astype('category')\ndf_train['Pclass'] = df_train['Pclass'].astype('category')","99bdb767":"df_train['Cabin'].describe()","0357c0f3":"df_train['Cabin'].unique()","63001c29":"df_train[['Cabin']] = df_train[['Cabin']].fillna('Unknown')\ndf_train['Cabin'] = df_train['Cabin'].str[0]\ndf_train['Cabin'] = df_train['Cabin'].astype('category')\n\ndf_train.head()","d53ad176":"#Cabin survival rate\nfig, ax = plt.subplots(figsize=(10,9))\nsns.countplot(x='Cabin', data=df_train, hue='Survived', ax=ax)","e78e8931":"#Cabin survival rate (Normalized)\nx,y = 'Cabin', 'Survived'\n\ndf1 = df_train.groupby(x)[y].value_counts(normalize=True)\ndf1 = df1.mul(100)\ndf1 = df1.rename('percent').reset_index()\ndf1.rename(columns={'level_1':'Survived'}, inplace=True)\n\n\ng = sns.catplot(x=x,y='percent',hue=y,kind='bar',data=df1, height=6, aspect=1.5)\n\nfor p in g.ax.patches:\n    txt = str(p.get_height().round(2)) + '%'\n    txt_x = p.get_x() \n    txt_y = p.get_height()\n    g.ax.text(txt_x,txt_y,txt)","cf6e528c":"#Embarked survival rate\nfig, ax = plt.subplots(figsize=(7,5))\n\nsns.countplot(x='Embarked', data=df_train, hue='Survived')","501f4588":"df_train.isnull().sum()","5a1bbbc6":"g = sns.barplot(x='Pclass', y='Age', data=df_train[['Pclass', 'Age']])\nfor i in g.patches:\n    print(i.get_height())","33c09b8b":"#No need for the this graph im just flexing\nsns.countplot(x='Pclass', data=df_train)","77176122":"def GetClassAge(x):\n    if np.isnan(x.loc['Age']):\n        if x.loc['Pclass'] == 1:\n            return 38\n        if x.loc['Pclass'] == 2:\n            return 30\n        if x.loc['Pclass'] == 3:\n            return 25\n    return x.loc['Age']","685bf861":"df_train['Age'] = df_train.apply(GetClassAge, axis=1)","d23dcc90":"print(df_train.shape)\ndf_train.isnull().sum()","b3240892":"df_train.dropna(inplace=True)\nprint(df_train.shape)\ndf_train.isnull().sum()","dcfe230c":"X=df_train.drop(columns=['Name','Ticket'],axis=1)\ntest=df_test.drop(columns=['Name','Ticket'],axis=1)","53f6d380":"# Classification\nfrom sklearn.ensemble import RandomForestClassifier,BaggingClassifier,GradientBoostingClassifier,AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Modelling Helpers :\nfrom sklearn.model_selection import train_test_split, cross_val_score, RandomizedSearchCV\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, OrdinalEncoder\nfrom sklearn.metrics import classification_report, confusion_matrix, f1_score, recall_score, precision_score, plot_roc_curve\nfrom sklearn.preprocessing import OrdinalEncoder","977c2068":"Y = X.pop('Survived')\n\n#converting strings to numbers\nX[[\"Embarked\"]] =  OrdinalEncoder().fit_transform(X[[\"Embarked\"]])\nX[[\"Cabin\"]] =  OrdinalEncoder().fit_transform(X[[\"Cabin\"]])\nX['Sex'] = (X['Sex'] == 'male')\n\nX['Embarked'] = X['Embarked'].astype('category')\nX['Cabin'] = X['Cabin'].astype('category')\nX['Sex'] = X['Sex'].astype('uint8')\n\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 37)","8a17965e":"RFC = RandomForestClassifier(random_state=82)\nKNN = KNeighborsClassifier()\nBAG = BaggingClassifier(random_state = 222, n_estimators=92)\nGradBost = GradientBoostingClassifier(random_state = 15)\nADA = AdaBoostClassifier(random_state = 37)\nDT = DecisionTreeClassifier(random_state=12)","e8056b42":"DT.fit(x_train,y_train)\nDT_pred = DT.predict(x_test)\nprint(\"accuracy: \"+ str(DT.score(x_test,y_test)*100) + \"%\")\nfor Counter, i in enumerate(DT.feature_importances_):\n    if i > 0.10:\n        print(f\"{X.columns[Counter]} makes up {i*100:.2f} % of the decision making process\")","5b0da179":"RFC.fit(x_train,y_train)\nRFC_pred = RFC.predict(x_test)\nprint(\"accuracy: {} %\".format((RFC.score(x_test,y_test)*100)))\nfor Counter, i in enumerate(RFC.feature_importances_):\n    if i > 0.10:\n        print(f\"{X.columns[Counter]} makes up {i*100:.2f} % of the decision making process\")","48674960":"ADA.fit(x_train,y_train)\nADA_pred = ADA.predict(x_test)\nprint(\"accuracy: \"+ str(ADA.score(x_test,y_test)*100) + \"%\")\nfor Counter, i in enumerate(ADA.feature_importances_):\n    if i > 0.10:\n        print(f\"{X.columns[Counter]} makes up {i*100:.2f} % of the decision making process\")","da7be0c3":"BAG.fit(x_train,y_train)\nBAG_pred = BAG.predict(x_test)\nprint(\"accuracy: \"+ str(BAG.score(x_test,y_test)*100) + \"%\")","2f70189d":"GradBost.fit(x_train,y_train)\nGradBost_pred = GradBost.predict(x_test)\nprint(\"accuracy: \"+ str((\"%.6f\" %(GradBost.score(x_test,y_test)*100))) + \"%\")\nfor Counter, i in enumerate(GradBost.feature_importances_):\n    if i > 0.10:\n        print(f\"{X.columns[Counter]} makes up {i*100:.2f} % of the decision making process\")","a7c41ffc":"X.info()","3bdb991d":"test.head()","3b24f333":"test['Embarked'] = test['Embarked'].astype('category')\ntest['Pclass'] = test['Pclass'].astype('category')\n\ntest['Sex'] = (test['Sex'] == 'male')\ntest['Sex'] = test['Sex'].astype('uint8')\n\ntest[['Cabin']] = test[['Cabin']].fillna('Unknown')\ntest['Cabin'] = test['Cabin'].str[0]\ntest['Cabin'] = test['Cabin'].astype('category')\n\ntest['Age'] = test.apply(GetClassAge, axis=1)\n\ntest[[\"Embarked\"]] =  OrdinalEncoder().fit_transform(test[[\"Embarked\"]])\ntest[[\"Cabin\"]] =  OrdinalEncoder().fit_transform(test[[\"Cabin\"]])\n\ntest['Embarked'] = test['Embarked'].astype('category')\ntest['Cabin'] = test['Cabin'].astype('category')\n\ntest.head()","bec66484":"test.isnull().sum()","888634c8":"g = sns.barplot(x='Pclass', y='Fare', data=df_train[['Pclass', 'Fare']])\nfor i in g.patches:\n    print(i.get_height())","3159a6e6":"def GetFare(x):\n    if np.isnan(x.loc['Fare']):\n        if x.loc['Pclass'] == 1:\n            return 84.1935\n        if x.loc['Pclass'] == 2:\n            return 20.6622\n        if x.loc['Pclass'] == 3:\n            return 13.6756\n    return x.loc['Fare']","e2ce8051":"test['Fare'] = test.apply(GetFare, axis=1)","68de9178":"test.isnull().sum()","0a32e4b4":"test.head()","41644630":"GradBost.fit(X,Y)\nGradBost_pred = GradBost.predict(test)","d0e793ae":"submission = pd.DataFrame(index=test.index, data=GradBost_pred, columns=['Survived'])\nsubmission","c9e0f105":"submission.to_csv('CleanSubmission.csv')","680d8536":"# Time to explore the data","d4e64832":"## Now for submmision","8b7df78e":"### Cabin is mostly NaN but rather than dropping NaN we can use it as information","8d82c52d":"### just 2 values so just drop them","11f5abda":"## Time for Training!","c6f5766a":"### I will use Pclass to get avarage Fare to fill the NaN values since it has to highest coorelation to Fare (as seen in the heat map at the start of the notebook)","a6026d99":"### don't think we can get any useful info from these columns","dc96b6da":"## Now for some Graphs ","1918f3df":"### I doubt the numbers in Cabin mean something so I will drop the number part and keep the letter part so i can use the NaN values\n\n### and even if the numbers meant something, the most frequent cabin was 4 times so meh..","ae74e927":"### I will use Pclass to get avarage Age to fill the NaN values since it has to highest coorelation to age (as seen in the heat map at the start of the notebook)"}}