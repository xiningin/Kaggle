{"cell_type":{"9b5326d7":"code","dc7e10f9":"code","4f17e70d":"code","230d04a5":"code","1a873fd5":"code","8acbac25":"code","6b79249d":"code","211c51e8":"code","911525a8":"code","6a79d842":"code","653c4a86":"code","37d4eabf":"code","6a6c6329":"code","a216d7d8":"code","d960f314":"code","b45d1561":"code","75862fc9":"code","2be590f7":"code","d327c84f":"code","9d51f88f":"code","6c4c89e7":"code","db652331":"code","e4870e1f":"code","a078b43b":"code","eea25a78":"code","12de7133":"code","1b4db215":"code","7ef013de":"code","f4360b28":"code","898fb11e":"code","eeb1e5e5":"code","8a5a64df":"code","9f9352e1":"code","462bdbf3":"code","960d5ba1":"code","1d5c8e79":"code","1638f264":"code","1dbea43b":"code","634f0c90":"code","52084437":"code","419ca661":"code","82b2d283":"code","3123055c":"code","7f08511d":"code","bb8dc04f":"code","c9726b76":"code","f043c45b":"code","e0670982":"code","d68a23ee":"code","2c9b55bb":"code","796d4291":"code","1055a2c3":"code","60c6ebdb":"code","143880ca":"code","ce582497":"code","6f09a229":"code","98a41410":"code","61c8fc3d":"code","e2b23a38":"code","7b24c464":"code","9035fa7d":"code","736ded1d":"code","c8c575ae":"code","bff2aa5e":"markdown","58d12219":"markdown"},"source":{"9b5326d7":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport sys\nimport pandas\nimport numpy\nimport sklearn\nimport keras\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport pandas as pd\nimport numpy as np\n\n# import the uci pima indians diabetes dataset\nnames = ['n_pregnant', 'glucose_concentration', 'blood_pressuer (mm Hg)', 'skin_thickness (mm)', 'serum_insulin (mu U\/ml)',\n        'BMI', 'pedigree_function', 'age', 'class']\ndf = pd.read_csv('..\/input\/diabetes.csv', names = names)\ndf.info()","dc7e10f9":"# import the uci pima indians diabetes dataset\ndf.columns = df.iloc[0].values\ndf.drop(0,inplace=True)\ndf.describe()","4f17e70d":"df.head()","230d04a5":"df = df.reset_index()\ndf.drop('index',axis=1,inplace=True)\ndf.head()","1a873fd5":"for x in df.columns.tolist():\n    df[x] = pd.to_numeric(df[x])","8acbac25":"df.info()","6b79249d":"plt.figure(figsize=(12,12))\nsns.heatmap(df.corr(),annot=True,cmap='magma')","211c51e8":"data = df\ndata.head()","911525a8":"gluc_0 = data[data['Glucose']==0]\ngluc_0","6a79d842":"blood_0 = data[data['BloodPressure']==0]\nblood_0.head()","653c4a86":"skin_0 = data[data['SkinThickness']==0]\nskin_0.head()","37d4eabf":"serum_0 = data[data['Insulin']==0]\nserum_0.head()","6a6c6329":"bmi_0 = data[data['BMI']==0]\nbmi_0.head()","a216d7d8":"ped_0 = data[data['DiabetesPedigreeFunction']==0]\nped_0","d960f314":"age_0 = data[data['Age']==0]\nage_0","b45d1561":"'''cols = ['glucose_concentration','blood_pressuer (mm Hg)','skin_thickness (mm)','serum_insulin (mu U\/ml)','BMI']\nfor col in cols:\n    df[col].replace(0,np.NaN,inplace=True)\n\ndf.describe()'''","75862fc9":"from sklearn.preprocessing import PolynomialFeatures\npf = PolynomialFeatures(degree=1)","2be590f7":"X = data.loc[data['BloodPressure']!=0,['Glucose','Pregnancies','DiabetesPedigreeFunction','Age']]\ny = data.loc[data['BloodPressure']!=0,'BloodPressure']\nX_poly = pf.fit_transform(X)\nX_poly.shape,y.shape","d327c84f":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X_poly,y,random_state=42)\nfor x in (X_train,X_test,y_train,y_test):\n    print(x.shape)","9d51f88f":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\n\nlr.fit(X_train,y_train)\n\npreds = lr.predict(X_test)\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\nmean_absolute_error(y_test,preds),mean_squared_error(y_test,preds)","6c4c89e7":"for i,j in zip(lr.predict(X_train),y_train.tolist()[:15]):\n    print(j,'-->',i)","db652331":"data.loc[blood_0.index,'BloodPressure'] = lr.predict(pf.transform(data.loc[blood_0.index,['Glucose','Pregnancies','DiabetesPedigreeFunction','Age']]))","e4870e1f":"data[(data['SkinThickness']==0) & (data['Glucose']==0)]","a078b43b":"#pf = PolynomialFeatures(degree=3)\nX = data.loc[data['BMI']!=0,['BloodPressure','Glucose','Pregnancies','DiabetesPedigreeFunction','Age']]\ny = data.loc[data['BMI']!=0,'BMI']\n'''X_poly = pf.fit_transform(X)'''\nX.shape,y.shape","eea25a78":"X_train,X_test,y_train,y_test = train_test_split(X,y,random_state=42)\nfor x in (X_train,X_test,y_train,y_test):\n    print(x.shape)","12de7133":"lr = LinearRegression()\n\nlr.fit(X_train,y_train)\n\npreds = lr.predict(X_test)\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\nmean_absolute_error(y_test,preds),mean_squared_error(y_test,preds)","1b4db215":"for i,j in zip(preds,y_test.tolist()[:15]):\n    print(j,'-->',i)","7ef013de":"mae_sum = 0\nfor p,t in zip(preds, y_test):\n    mae_sum += abs(p - t)\nmae = mae_sum \/ len(y_test)\nmae","f4360b28":"data.loc[bmi_0.index,'BMI'] = lr.predict(data.loc[bmi_0.index,['BloodPressure','Glucose','Pregnancies','DiabetesPedigreeFunction','Age']])\n\ndata.loc[bmi_0.index,'BMI']","898fb11e":"pf = PolynomialFeatures(degree=2)\nX = data.loc[data['SkinThickness']!=0,['BMI','BloodPressure','Glucose','Pregnancies','DiabetesPedigreeFunction','Age']]\ny = data.loc[data['SkinThickness']!=0,'SkinThickness']\nX_poly = pf.fit_transform(X)\nX_poly.shape,y.shape","eeb1e5e5":"X_train,X_test,y_train,y_test = train_test_split(X_poly,y,random_state=42)\nfor x in (X_train,X_test,y_train,y_test):\n    print(x.shape)","8a5a64df":"lr = LinearRegression()\n\nlr.fit(X_train,y_train)\n\npreds = lr.predict(X_test)\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\nmean_absolute_error(y_test,preds),mean_squared_error(y_test,preds)","9f9352e1":"for i,j in zip(preds,y_test.tolist()[:15]):\n    print(j,'-->',i)","462bdbf3":"data.loc[skin_0.index,'SkinThickness'] = lr.predict(pf.transform(data.loc[skin_0.index,['BMI','BloodPressure','Glucose','Pregnancies','DiabetesPedigreeFunction','Age']]))","960d5ba1":"data[data['Glucose']==0]","1d5c8e79":"#pf = PolynomialFeatures(degree=3)\nX = data.loc[data['Glucose']!=0,['SkinThickness','BMI','BloodPressure','Pregnancies','DiabetesPedigreeFunction','Age']]\ny = data.loc[data['Glucose']!=0,'Glucose']\n#X_poly = pf.fit_transform(X)\nX.shape,y.shape","1638f264":"X_train,X_test,y_train,y_test = train_test_split(X,y,random_state=42)\nfor x in (X_train,X_test,y_train,y_test):\n    print(x.shape)\n\nlr = LinearRegression()\n\nlr.fit(X_train,y_train)\n\npreds = lr.predict(X_test)\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\nmean_absolute_error(y_test,preds),mean_squared_error(y_test,preds)","1dbea43b":"for i,j in zip(preds,y_test.tolist()[:15]):\n    print(j,'-->',i)","634f0c90":"data.loc[gluc_0.index,'Glucose'] = lr.predict(data.loc[gluc_0.index,['SkinThickness','BMI','BloodPressure','Pregnancies','DiabetesPedigreeFunction','Age']])","52084437":"data[data['Glucose']==0]","419ca661":"#pf = PolynomialFeatures(degree=3)\nX = data.loc[data['Insulin']!=0,['Glucose','SkinThickness','BMI','BloodPressure','Pregnancies','DiabetesPedigreeFunction','Age']]\ny = data.loc[data['Insulin']!=0,'Insulin']\n#X_poly = pf.fit_transform(X)\nX.shape,y.shape","82b2d283":"X_train,X_test,y_train,y_test = train_test_split(X,y,random_state=42)\nfor x in (X_train,X_test,y_train,y_test):\n    print(x.shape)","3123055c":"lr = LinearRegression()\n\nlr.fit(X_train,y_train)\n\npreds = lr.predict(X_test)\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\nmean_absolute_error(y_test,preds),mean_squared_error(y_test,preds)","7f08511d":"for i,j in zip(preds,y_test.tolist()[:15]):\n    print(j,'-->',i)","bb8dc04f":"data.loc[serum_0.index,'Insulin'] = lr.predict(data.loc[serum_0.index,['Glucose','SkinThickness','BMI','BloodPressure','Pregnancies','DiabetesPedigreeFunction','Age']])","c9726b76":"X = data.iloc[:,:8]\ny = data.iloc[:,8]\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\nsc.fit(X)\nX_sc = sc.transform(X)\nprint(X_sc.shape,y.shape)","f043c45b":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X_sc,y)\nfor x in (X_train,X_test,y_train,y_test):\n    print(x.shape)","e0670982":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier()\n\nclf.fit(X_train,y_train)\n\npreds = clf.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix\n\nconfusion_matrix(y_true=y_test,y_pred=preds)","d68a23ee":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=1000)\n\nclf.fit(X_train,y_train)\n\npreds = clf.predict(X_test)\n\nconfusion_matrix(y_true=y_test,y_pred=preds)","2c9b55bb":"confusion_matrix(y_true=y_train,y_pred=clf.predict(X_train))","796d4291":"from sklearn.neighbors import KNeighborsClassifier\nclf = KNeighborsClassifier(n_neighbors=3)\n\nclf.fit(X_train,y_train)\n\npreds = clf.predict(X_test)\n\nconfusion_matrix(y_true=y_test,y_pred=preds)","1055a2c3":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX = data.iloc[:,:8]\ny = data.iloc[:,8]\nprint(X.shape,y.shape)\n\nX_standardized = scaler.fit_transform(X)\n\ndata2 = pd.DataFrame(X_standardized)\ndata2.describe()","60c6ebdb":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X_standardized,y)\nfor x in (X_train,X_test,y_train,y_test):\n    print(x.shape)","143880ca":"#df.dropna(inplace=True)\nsns.pairplot(data,hue='Outcome',diag_kind='kde')","ce582497":"df.drop('BloodPressure',inplace=True,axis=1)\n\ndf.describe()","6f09a229":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","98a41410":"dataset = df.values\ndataset.shape","61c8fc3d":"X = dataset[:,:7]\ny = dataset[:,7]\nprint(X.shape,y.shape)\n\nX_standardized = scaler.fit_transform(X)\n\ndata = pd.DataFrame(X_standardized)\ndata.describe()","e2b23a38":"X_standardized.shape,y.shape","7b24c464":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X_standardized,y)\nfor x in (X_train,X_test,y_train,y_test):\n    print(x.shape)","9035fa7d":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier()\n\nclf.fit(X_train,y_train)\n\npreds = clf.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix\n\nconfusion_matrix(y_true=y_test,y_pred=preds)","736ded1d":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=100,max_depth=10)\n\nclf.fit(X_train,y_train)\n\npreds = clf.predict(X_test)\n\nconfusion_matrix(y_true=y_test,y_pred=preds)","c8c575ae":"from sklearn.neighbors import KNeighborsClassifier\nclf = KNeighborsClassifier(n_neighbors=3)\n\nclf.fit(X_train,y_train)\n\npreds = clf.predict(X_test)\n\nconfusion_matrix(y_true=y_test,y_pred=preds)","bff2aa5e":"**Random forest with n_estimators=1000 results in overfitting**","58d12219":"**Making predictions of zero values in each column**"}}