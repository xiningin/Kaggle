{"cell_type":{"32dc5fca":"code","0f9a9b4e":"code","fc87f47c":"code","30a4aec1":"code","857da0a1":"code","95cc70f4":"code","3904a191":"code","d4cf2f1c":"markdown","58984ea1":"markdown","8f4cf427":"markdown","9c176893":"markdown"},"source":{"32dc5fca":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\nimport tensorflow as tf #Will be using tensor flow keras\nimport matplotlib.pyplot as plt # For vizualization\n\n        ","0f9a9b4e":"train_path = \"\/kaggle\/input\/he-dance-forms\/dataset\/train\" #path to the images ","fc87f47c":"data = pd.read_csv(\"\/kaggle\/input\/he-dance-forms\/dataset\/train.csv\") #dataframe containg the image and class mapping","30a4aec1":"Image_gen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.\/255,     \n                                                            horizontal_flip=True,\n                                                           )\n\n#More tranformations are defined here \n#https:\/\/keras.io\/api\/preprocessing\/image\/#imagedatagenerator-class","857da0a1":"train_gen = Image_gen.flow_from_dataframe(dataframe=  data,                #Name of the dataframe\n                                                    directory= train_path, #File location of the images \n                                                    x_col='Image',         #Column with the image name, with the extension \n                                                    y_col='target',        #Column with the name of labels\n                                                    seed=40,               #Seed for reproducblity\n                                                    target_size=(150, 150),#Size of all the target images\n                                                    batch_size=16,          #number of batches u want to generate   \n                                                    shuffle=True,\n                                                    class_mode='categorical',\n                                                    #save_to_dir=\".\/\" Uncomment if u want to save a copy of agumented images to disk as a png \n                                      )","95cc70f4":"X_batch_history, Y_batch_History = [], [] # Empty lists to save the previousily generated images, can also be saved to disk \n\ndef reverse_dict(orig_dict):\n    '''\n        A function to reverse the keys and values in python dictonary\n        \n        \n        [param]orgi_dict: It accepts a dictionary mapping of classes_name  to numericals \n        \n        example run : - reverse_dict(train_gen.class_indices)\n    '''\n    \n    \n\n    new_dict = {}\n    for i, j in orig_dict.items():\n        #print(i, j)\n        new_dict[j]=i\n    return new_dict\n    \n\ndef keras_batch_viz(gen_object):\n    '''\n    Generates a plot of 16 images \n    \n    [param]gen_pbject: A  DataFrameIterator i.e ImageDataGenerator which has called it's flow_from_dataframe method\n    example run :- keras_batch_viz(train_gen_test)\n    '''\n    \n    if (gen_object.batch_size < 16):\n        print(\"ERROR, the batch_size is less than 16 in your flow_from_dataframe method\")\n        return -1\n    \n    rdict = reverse_dict(gen_object.class_indices)\n    keep_going_on = True\n    while keep_going_on:\n        x_batch, y_batch = next(gen_object)\n    #Comment these if you don't need to save history of the vizualization \n    \n        X_batch_history.append(x_batch)\n        Y_batch_History.append(y_batch)\n    \n        fig = plt.figure(figsize=(13, 13))\n        columns = 4\n        rows = 4\n    \n        ax = []\n        for i in range(1, 17): #this will loop over and display the 16 images, change according to ur needs\n            image = x_batch[i-1]\n            ax.append(fig.add_subplot(rows, columns, i))\n            ax[-1].set_title(rdict[np.argmax(y_batch[i-1])])\n            plt.imshow(image)\n        plt.grid(None)\n        plt.tight_layout()\n        plt.show()\n        \n        print(\"Press Y\/y if u want to keep going on generating batches to vizualize\", end=':')\n        keep_going_on = input()\n        if keep_going_on.lower() != 'y':\n            keep_going_on = False\n            print(\"----- Terminating ------\")\n            return 0\n        print(\"WAIT GENERATING THE NEXT BATCH\", \"---\"*100)\n    ","3904a191":"keras_batch_viz(train_gen)","d4cf2f1c":"Now let us instanitate an instance of ImageDataGenerator Class as follows and use flow_from_dataframe. <br>\n\nThe details of ImageDataGenerator and flow_from_dataframe are explained here in offical keras docs <br> https:\/\/keras.io\/api\/preprocessing\/image\/#imagedatagenerator-class ","58984ea1":"<pre><b>This should help anyone who wants to vizualize the agumentations that they plan to apply and visualy confirm what they applied is what they need\n\n\nPlease upvote if you find the stuff useful and leave your thoughts below in the comment\nThank you !!\n<\/b><\/pre>","8f4cf427":"#      This a short Kaggle NoteBook that shows how we can vizualise the images that are generated through keras ImageDataGenerator Class for Data Agumentation.","9c176893":"Refrences: -\n\nhttps:\/\/keras.io\/api\/preprocessing\/image <br>\nhttps:\/\/stackoverflow.com\/questions\/46615554\/how-to-display-multiple-images-in-one-figure-correctly\/46616645"}}