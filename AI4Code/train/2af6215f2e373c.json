{"cell_type":{"7a1e05f2":"code","1b465d5a":"code","51689eff":"code","ec36eeab":"code","bc78bf0f":"code","802b0a88":"code","14670666":"code","16125ee0":"code","7fa0700a":"code","5103619a":"code","e9151505":"code","73e9d6ef":"code","99875877":"code","bdc62c05":"code","c50f2562":"code","0c830282":"code","e5cae2c7":"code","dc647a21":"code","69ee3cd7":"code","3bf21b50":"code","417aac52":"code","0dacb7d5":"code","e262f853":"code","b2290e64":"code","a793c15a":"code","191be120":"code","e64ab597":"code","1185ca30":"code","fcc8c31e":"code","084b66bc":"code","73115a88":"code","efe79cd9":"code","4a54d729":"code","3abc92f8":"code","9743ac15":"code","10bcc348":"code","f564f310":"code","5fb02531":"code","8d50358a":"code","06eb01ee":"code","bba2e1ed":"code","b3ae64e6":"code","a919bd09":"code","3ff8f09a":"code","94ac0a93":"code","eb613acc":"code","b117cc85":"code","4b755ee7":"code","def8b440":"code","2edbd1d8":"code","8ce17e14":"code","544f36b7":"code","5fb3b66d":"code","600c42dc":"markdown","40e8ef88":"markdown","150b38cc":"markdown","863a59c4":"markdown","b2a19698":"markdown","0d274151":"markdown","b37b4fa6":"markdown","846d2488":"markdown","a7dfdfe7":"markdown","42db6d3b":"markdown"},"source":{"7a1e05f2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\nfrom scipy.optimize import minimize","1b465d5a":"train_dataset = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/train.csv')\ntest_dataset = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/test.csv')\nsubmission = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/submission.csv')","51689eff":"submission.head()","ec36eeab":"train_dataset.info()","bc78bf0f":"train_dataset.describe()","802b0a88":"train_dataset.head()","14670666":"test_dataset.head()","16125ee0":"train_dataset.isna().sum()","7fa0700a":"test_dataset.isna().sum()","5103619a":"train_dataset['Province_State'].fillna('', inplace = True)\ntest_dataset['Province_State'].fillna('', inplace = True)","e9151505":"train_dataset['Country_Region'] = train_dataset['Country_Region'] + ' ' + train_dataset['Province_State']\ntest_dataset['Country_Region'] = test_dataset['Country_Region'] + ' ' + test_dataset['Province_State']\ndel train_dataset['Province_State']\ndel test_dataset['Province_State']","73e9d6ef":"train_dataset.head()","99875877":"test_dataset.head()","bdc62c05":"# How many countries\ntrain_dataset['Country_Region'].describe()","c50f2562":"country_list = train_dataset['Country_Region'].unique()","0c830282":"train_date = train_dataset.Date.unique()\ntrain_date","e5cae2c7":"test_date = test_dataset.Date.unique()\ntest_date","dc647a21":"train_days = np.arange(len(train_date))\ntrain_days","69ee3cd7":"train_days[train_date == '2020-04-02']","3bf21b50":"train_days[train_date == '2020-04-22']","417aac52":"test_days = np.arange(len(test_date)) + 71\ntest_days","0dacb7d5":"train_end = train_days[train_date == '2020-04-22']\ntest_start = test_days[0]","e262f853":"train_end","b2290e64":"test_start","a793c15a":"Day = np.zeros(len(train_dataset))\nfor ii in range(len(train_date)):\n    Day[train_dataset.Date == train_date[ii]] = train_days[ii]\ntrain_dataset['Day'] = Day","191be120":"train_dataset.head(5)","e64ab597":"Day = np.zeros(len(test_dataset))\nfor ii in range(len(test_date)):\n    Day[test_dataset.Date == test_date[ii]] = test_days[ii]\ntest_dataset['Day'] = Day","1185ca30":"test_dataset.head(5)","fcc8c31e":"top_comfirmedcases = train_dataset[train_dataset.Date == '2020-04-22'].sort_values(by = 'ConfirmedCases', ascending = False)\ntop_comfirmedcases.head(10)","084b66bc":"def country_plot(country):\n    train = train_dataset[train_dataset['Country_Region'] == country]\n    test = test_dataset[test_dataset['Country_Region'] == country]\n    \n    # X_train\n    x_train = train.Day.values\n    confirmed_train = train.ConfirmedCases.values\n    fatalities_train = train.Fatalities.values\n    \n    # Plot figures\n    # Confirmed cases\n    plt.figure(figsize = (15, 3))\n    plt.subplot(1, 2, 1)\n    plt.xlabel('Days')\n    plt.ylabel('Confirmed cases')\n    plt.title(country)\n    plt.plot(x_train, confirmed_train)\n    plt.grid()\n\n    # Fatalities\n    plt.subplot(1, 2, 2)\n    plt.xlabel('Days')\n    plt.ylabel('Fatalities')\n    plt.title(country)\n    plt.plot(x_train, fatalities_train, color = 'orange')\n    plt.grid()\n    plt.show()","73115a88":"for country in top_comfirmedcases.Country_Region[0:9].values:\n    country_plot(country)","efe79cd9":"def Gompertz(t, theta1, theta2, theta3):\n    '''\n    theta1: The asymptote.\n    theta2: The displacement along the x-axis.\n    theta3: The growth rate.\n    '''\n    f = theta1 * np.exp(-theta2 * np.exp(-theta3 * t))\n    return f","4a54d729":"x = np.linspace(start = -2, stop = 5, num = 50)\ny1 = Gompertz(x, theta1 = 5, theta2 = 1, theta3 = 1)\ny2 = Gompertz(x, theta1 = 5, theta2 = 1.5, theta3 = 1)\ny3 = Gompertz(x, theta1 = 5, theta2 = 2, theta3 = 1)\n\nplt.figure(figsize = (12, 8))\nplt.plot(x, y1, label = 'y1')\nplt.plot(x, y2, label = 'y1')\nplt.plot(x, y3, label = 'y1')\nplt.legend()\nplt.grid()\nplt.show()","3abc92f8":"x = np.linspace(start = -2, stop = 5, num = 50)\ny1 = Gompertz(x, theta1 = 5, theta2 = 1, theta3 = 0.1)\ny2 = Gompertz(x, theta1 = 5, theta2 = 1, theta3 = 0.5)\ny3 = Gompertz(x, theta1 = 5, theta2 = 1, theta3 = 1)\n\nplt.figure(figsize = (12, 8))\nplt.plot(x, y1, label = 'y1')\nplt.plot(x, y2, label = 'y1')\nplt.plot(x, y3, label = 'y1')\nplt.legend()\nplt.grid()\nplt.show()","9743ac15":"country = 'Korea, South '\ntrain = train_dataset[train_dataset['Country_Region'] == country]\ntest = test_dataset[test_dataset['Country_Region'] == country]\n\n# X_train\nx_train = train.Day.values\nconfirmed_train = train.ConfirmedCases.values\nfatalities_train = train.Fatalities.values\n\n# X_test\nx_test = test.Day.values\ncountry_plot(country)","10bcc348":"popt_confirmed, pcov_confirmed = curve_fit(f = Gompertz, \n                                           xdata = x_train, \n                                           ydata = confirmed_train, \n                                           p0 = [3 * max(confirmed_train), 1, 1], \n                                           maxfev = 800)","f564f310":"popt_confirmed","5fb02531":"pcov_confirmed","8d50358a":"def curve_plot(x_train, y_train, x_test, est):\n    plt.figure(figsize = (12, 5))\n    plt.xlabel('Days')\n    plt.ylabel('Cases')\n    plt.title(country)\n    plt.scatter(x_train, y_train, color = 'r')\n    plt.plot(x_train, Gompertz(x_train, *est), label = 'Fitting curve (train)')\n    plt.plot(x_test, Gompertz(x_test, *est), label = 'Fitting curve (test)')\n    plt.axvline(x = test_start, color = 'r', linestyle = ':', label = 'test_start = %.f' % (test_start))\n    plt.axvline(x = train_end, color = 'b', linestyle = ':', label = 'train_end = %.f' % (train_end))\n    plt.legend()\n    plt.show()","06eb01ee":"curve_plot(x_train = x_train, y_train = confirmed_train, x_test = x_test, est = popt_confirmed)","bba2e1ed":"popt_fatalities, pcov_fatalities = curve_fit(f = Gompertz, \n                                             xdata = x_train, \n                                             ydata = fatalities_train, \n                                             p0 = [3 * max(fatalities_train), 1, 1], \n                                             maxfev = 800)","b3ae64e6":"popt_fatalities","a919bd09":"pcov_fatalities","3ff8f09a":"curve_plot(x_train = x_train, y_train = fatalities_train, x_test = x_test, est = popt_fatalities)","94ac0a93":"# Minimize the Loss function: MSE\ndef growth_curve(x, y):\n    # Loss function\n    def l_fun(params): \n        theta1 = np.exp(params[0])\n        theta2 = np.exp(params[1])\n        theta3 = np.exp(params[2])\n        mse = np.mean((y - Gompertz(x, theta1, theta2, theta3)) ** 2)\n        return mse\n\n    p0 = [np.log(3 * max(y)), 0, 0]\n    res = minimize(fun = l_fun, x0 = p0, method = 'L-BFGS-B')\n    mse = res.fun\n\n    # convergence_res\n    convergence_res = {'MSE': mse,\n                       'nfev': res.nfev, \n                       'nit': res.nit, \n                       'status': res.status}\n\n    # Estimator\n    est = np.exp(res.x)\n    return est, convergence_res","eb613acc":"# Confirmed cases\nest_confirmed, convergence_res = growth_curve(x = x_train, y = confirmed_train)\nconvergence_res","b117cc85":"curve_plot(x_train = x_train, y_train = confirmed_train, x_test = x_test, est = est_confirmed)","4b755ee7":"# Confirmed cases\nest_fatalities, convergence_res = growth_curve(x = x_train, y = fatalities_train)\nconvergence_res","def8b440":"curve_plot(x_train = x_train, y_train = fatalities_train, x_test = x_test, est = est_fatalities)","2edbd1d8":"confirmed_pred = np.zeros(len(test_dataset))\nfatalities_pred = np.zeros(len(test_dataset))","8ce17e14":"for country in country_list:\n    train = train_dataset[train_dataset['Country_Region'] == country]\n    test = test_dataset[test_dataset['Country_Region'] == country]\n    \n    # X_train\n    x_train = train.Day.values\n    confirmed_train = train.ConfirmedCases.values\n    fatalities_train = train.Fatalities.values\n    \n    # X_test\n    x_test = test.Day.values\n\n    # Confirmed cases\n    confirmed_est, confirmed_convergence = growth_curve(x = x_train, y = confirmed_train)\n    \n    # Fatalities    \n    fatalities_est, fatalities_convergence = growth_curve(x = x_train, y = fatalities_train)\n    \n    # Predictions\n    confirmed_pred[test_dataset.Country_Region == country] = Gompertz(x_test, *confirmed_est)\n    fatalities_pred[test_dataset.Country_Region == country] = Gompertz(x_test, *fatalities_est)","544f36b7":"submission['ConfirmedCases'] = confirmed_pred\nsubmission['Fatalities'] = fatalities_pred","5fb3b66d":"submission.to_csv('submission.csv', index = False)","600c42dc":"## **Minimized loss function:** scipy.optimize.minimize\n\nConsider the nonlinear regression model\n\n$$y_{i} = f(t_{i};\\theta) + \\varepsilon_{i},\\quad  i=1, 2, ..., n$$\n\nThe function is given by\n\n$$f(t;\\theta) = \\theta_{1} e^{-\\theta_{2} e^{-\\theta_{3} t}}$$\n\n, where $\\theta_{1} > 0$, $\\theta_{2} > 0$, $\\theta_{3} > 0$.\n\nThe estimator $(\\hat{\\theta}_{1}, \\hat{\\theta}_{2}, \\hat{\\theta}_{3})$ is obtained by minimizing loss function\n\n$$L(\\theta) = \\frac{1}{n} \\sum_{i=1}^{n} [y_{i} - f(t_{i};\\theta)]^{2}$$","40e8ef88":"## Importing dataset","150b38cc":"## Combine **'Province_State'** and **'Country_Region'**","863a59c4":"## Submission","b2a19698":"## Importing Libraries","0d274151":"## Gompertz model\n\n$$f(t) = \\theta_{1} e^{-\\theta_{2} e^{-\\theta_{3} t}}$$\n\nwhere\n\n- $\\theta_{1}$ is an asymptote, since $\\lim_{t \\to \\infty} f(t) = \\theta_{1}$ \n- $\\theta_{2}$ sets the displacement along the x-axis (translates the graph to the left or right). Symmetry is when $\\theta_{2} = \\log(2)$.\n- $\\theta_{3}$ sets the growth rate (y scaling)\n\nReference: [wiki](https:\/\/en.wikipedia.org\/wiki\/Gompertz_function)","b37b4fa6":"## **Least-Squared-Estimation**: scipy.optimize.curve_fit","846d2488":"## Example: 'Korea, South '","a7dfdfe7":"## Top 10 confirmed cases countries (2020-04-22)","42db6d3b":"## View information about the dataset."}}