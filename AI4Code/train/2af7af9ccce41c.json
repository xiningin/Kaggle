{"cell_type":{"4ac85246":"code","03f45d79":"code","da5f5ac5":"code","9c6a8181":"code","d8e3409d":"code","e71876a2":"code","6196f905":"code","46aba2f8":"code","a4b8fe59":"code","b09a703c":"code","e55d6556":"code","4d2b9a77":"code","992e8edc":"code","9bfdbd3b":"code","1c83e7a7":"code","5cd0f1a6":"code","fc4aad51":"code","8ed0edea":"code","0f66773e":"code","83a71621":"code","00486a55":"code","65662366":"code","73ad9268":"code","e0fdcf1d":"code","79bf98c3":"code","3a818b26":"code","06dfade1":"markdown","1520e449":"markdown","006cb187":"markdown","c199d713":"markdown","7bf80009":"markdown","71537abd":"markdown","c03d04af":"markdown","bd0d27ef":"markdown","1bbd2bb0":"markdown","cf33b845":"markdown","9566b1d9":"markdown","f8a35a7e":"markdown","9084664f":"markdown","790103b4":"markdown","a2d7552f":"markdown","749a11e9":"markdown","89ac9a6f":"markdown","97c8811d":"markdown","0d21726a":"markdown"},"source":{"4ac85246":"# !pip download lightautoml -d .\/lightautoml\/","03f45d79":"# !tar cvfz lightautoml.tgz .\/lightautoml\/","da5f5ac5":"!tar xvfz ..\/input\/lightautoml-tar\/lightautoml.tgz","9c6a8181":"!pip install lightautoml --no-index --find-links=file:.\/lightautoml\/ ","d8e3409d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport torch\nfrom sklearn.metrics import mean_squared_error\nfrom lightautoml.automl.presets.text_presets import TabularNLPAutoML\nfrom lightautoml.tasks import Task","e71876a2":"N_THREADS = 8 # threads cnt for lgbm and linear models\nRANDOM_STATE = 42 # fixed random state for various reasons\nTEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 60 * 170 # Time in seconds for automl run\nTARGET_NAME = 'target'","6196f905":"np.random.seed(RANDOM_STATE)\ntorch.set_num_threads(N_THREADS)","46aba2f8":"%%time\n\ntrain_data = pd.read_csv('..\/input\/commonlitreadabilityprize\/train.csv')\ntrain_data.head()","a4b8fe59":"test_data = pd.read_csv('..\/input\/commonlitreadabilityprize\/test.csv')\ntest_data.head()","b09a703c":"submission = pd.read_csv('..\/input\/commonlitreadabilityprize\/sample_submission.csv')\nsubmission.head()","e55d6556":"train_data.shape, test_data.shape, submission.shape","4d2b9a77":"train_data.info()","992e8edc":"train_data['license'].value_counts(dropna = False)","9bfdbd3b":"def clean_text(text):\n    \n    return text.lower()","1c83e7a7":"def preprocess_text(df):\n    df['len_tokens'] = df['excerpt'].str.strip().str.split(' ').apply(len)\n    df['len'] = df['excerpt'].str.strip().apply(len)\n    df['len_sent'] = df['excerpt'].str.strip().str.split('.').apply(len)\n    df['n_comm'] = df['excerpt'].str.strip().str.split(',').apply(len)\n    _t = df['excerpt'].str.strip().str.split(' ').values\n    df['d_mean'] = [np.sum([j.isdigit() for j in i]) for i in _t]\n    df['u_mean'] = [np.sum([j.isupper() for j in i]) for i in _t]\n    df['license'] = df['license'].astype(str)\n    df['url_legal'] = df['url_legal'].astype(str)\n    df.loc[df['license'].value_counts()[df['license']].values < 5, 'license'] = \"RARE_VALUE\"\n    df.loc[df['license'] == 'nan', 'license'] = np.nan\n    df.loc[df['url_legal'] != 'nan', 'url_legal'] = 1\n    df.loc[df['url_legal'] == 'nan', 'url_legal'] = 0\n\n    df['excerpt'] = df['excerpt'].map(clean_text)","5cd0f1a6":"preprocess_text(train_data)\ntrain_data","fc4aad51":"%%time\ndef rmse(x, y): return np.sqrt(mean_squared_error(x, y))\ntask = Task('reg', metric=rmse)","8ed0edea":"%%time\n\nroles = {'target': TARGET_NAME, \n         'text': ['excerpt'],\n        'drop': ['id', \"standard_error\"]}","0f66773e":"train_data","83a71621":"!pip install torch-scatter","00486a55":"import torch_scatter","65662366":"%%time \n\nautoml = TabularNLPAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       gpu_ids='all',\n                       reader_params = {'cv': 5},\n                       general_params = {'nested_cv': False, 'use_algos': [['nn']]},\n                       text_params = {'lang': 'en'},\n                       tuning_params = {'max_tuning_iter': 20, 'max_tuning_time': 60},\n                       nn_params = {'lang': 'en', \n                                    'bert_name': '..\/input\/roberta-base', \n                                    'opt_params': { 'lr': 1e-5},\n                                    'max_length': 300, 'bs': 13,\n                                    'n_epoch': 5\n                                    },\n                       )\n\noof_pred = automl.fit_predict(train_data, roles = roles)\nprint('oof_pred:\\n{}\\nShape = {}'.format(oof_pred, oof_pred.shape))","73ad9268":"preprocess_text(test_data)\ntest_pred = automl.predict(test_data)\nprint('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred, test_pred.shape))","e0fdcf1d":"submission['target'] = test_pred.data[:, 0]\nsubmission","79bf98c3":"submission['target'].value_counts()","3a818b26":"submission.to_csv(\"submission.csv\",index=False)","06dfade1":"## Step 4. Predict to test data","1520e449":"# Step 0.1. Import necessary libraries ","006cb187":"## Download the archive into your machine\n\nBy using the download button on the file name.","c199d713":"# Step 0. Install LAMA","7bf80009":"## Step 3. Create AutoML from preset","71537abd":"To create AutoML model here we use `TabularNLPAutoML` preset.\n\n\nAll params we set above can be send inside preset to change its configuration:","c03d04af":"## Upload the downloaded zip as input data\u00b6\nPress \"+ Add Data\" in the top-right to upload your zip file. Upload the zip file as a dataset (the name you give is not important).","bd0d27ef":"#  ==== AutoML preset usage ====\n\n\n## Step 1. Create Task","1bbd2bb0":"# Step 0.2. Parameters ","cf33b845":"## Uncompress the downloaded zip into a library","9566b1d9":"## Compress the downloaded library into a zip archive","f8a35a7e":"# Step 0.6. Data cleaning and preparation","9084664f":"# Step 0.5. Some EDA","790103b4":"## Step 6. Generate submission file","a2d7552f":"\n\n\n# Step 0.4. Example data load ","749a11e9":"# Step 0.3. Fix torch number of threads and numpy seed ","89ac9a6f":"## Download the packages into a directory in the output space","97c8811d":"## Step 2. Setup columns roles","0d21726a":"## Install the offline packages into our kernel"}}