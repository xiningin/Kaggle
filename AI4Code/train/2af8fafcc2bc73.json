{"cell_type":{"b131d26e":"code","300a19da":"code","1f070525":"code","dda1e6fb":"code","2c0553dd":"code","0cba84c7":"code","6f7d2587":"code","b257981e":"code","2d9620c2":"code","7217f523":"code","c6e341a5":"code","e9b2f48c":"code","925284e7":"markdown","20877222":"markdown","86378e61":"markdown","98607b6c":"markdown","e9cd23d0":"markdown","11f1cfbc":"markdown","34bf306a":"markdown","9b9e5351":"markdown","cc2ca543":"markdown","5c028bd4":"markdown","0216be7c":"markdown","75a922c3":"markdown","5cf7a39e":"markdown"},"source":{"b131d26e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import make_scorer\nfrom sklearn.model_selection import train_test_split","300a19da":"# Leitura dos dados do csv\ndf = pd.read_csv('..\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv')\ndf.pop('gameId')\ndf.shape","1f070525":"df.head()","dda1e6fb":"df.describe()","2c0553dd":"# Histograma\nhist = df.hist(figsize=(20,20), **{\"align\": \"mid\"})","0cba84c7":"fig = plt.figure(figsize=(60,40))\nsns.heatmap(df.loc[:].corr(), annot = True, cmap='jet')","6f7d2587":"# Removendo colunas redundantes\ndf.pop('blueDeaths')\ndf.pop('redDeaths')\ndf.pop('blueTotalGold')\ndf.pop('redTotalGold')\ndf.pop('blueTotalMinionsKilled')\ndf.pop('redTotalMinionsKilled')\ndf.pop('redFirstBlood')\ndf.pop('redGoldDiff')\ndf.pop('redExperienceDiff')","b257981e":"fig = plt.figure(figsize=(60,40))\nsns.heatmap(df.loc[:].corr(), annot = True, cmap='jet')","2d9620c2":"X = df.drop(['blueWins'], axis=1)\ny = df.blueWins\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","7217f523":"#creating Scoring parameter: \nscoring = {'accuracy': make_scorer(accuracy_score),\n           'precision': make_scorer(precision_score),'recall':make_scorer(recall_score)}\n\n# A sample parameter\n\nparameters = {\n    #\"learning_rate\": [0.01, 0.025, 0.05, 0.075, 0.1, 0.15, 0.2],\n    \"max_depth\":[3,5,8],\n    \"max_features\":[\"log2\",\"sqrt\"],\n    \"criterion\": [\"friedman_mse\",  \"mae\"],\n    \"subsample\":[0.5, 0.618, 0.8, 0.85, 0.9, 0.95, 1.0],\n    \"n_estimators\":[10]\n    }\n\ngrid = GridSearchCV(GradientBoostingClassifier(), parameters,scoring=scoring,refit=False,cv=2, n_jobs=-1)\ngrid.fit(X_train, y_train)","c6e341a5":"#converting the clf.cv_results to dataframe\ncv_results_df = pd.DataFrame.from_dict(grid.cv_results_)\n#here Possible inputs for cross validation is cv=2, there two split split0 and split1\ncv_results_df[['split0_test_accuracy','split1_test_accuracy','split0_test_precision','split1_test_precision','split0_test_recall','split1_test_recall']]","e9b2f48c":"#find the best parameter based on the accuracy_score\n#taking the average of the accuracy_score\ncv_results_df['accuracy_score']=(cv_results_df['split0_test_accuracy']+df['split1_test_accuracy'])\/2\n\ncv_results_df.loc[cv_results_df['accuracy_score'].idxmax()]['params']","925284e7":"## Objetivo:\n\nEste trabalho tem como objetivo an\u00e1lisar os datasets que cont\u00e9m game data do jogo League of Legeneds (LoL) referentes aos primeiros 10 e 15 minutos das partidas para predizer os resultados delas.","20877222":"#### Estat\u00edsticas\nO met\u00f3do `describe()` permite observar estat\u00edsticas iniciais que podem ser cruciais para o tratamento posteior dos dados, como a contagem de linhas por coluna, a m\u00e9dia, o desvio padr\u00e3o, etc. ","86378e61":"Primeira visualiza\u00e7\u00e3o do dataset","98607b6c":"# Trabalho Computacional: An\u00e1lise de game data do jogo Leaghe of Legends e predi\u00e7\u00e3o de vit\u00f3ria\n\n* Jo\u00e3o Andr\u00e9 Pestre - 116050844 (`joaoandre.pestre@poli.ufrj.br`)\n* Paulo Henrique Mattos - 116013884 (`paulo.mattos@poli.ufrj.br`)","e9cd23d0":"### Importa\u00e7\u00e3o e an\u00e1lise inicial","11f1cfbc":"Podemos ver de cara que algumas colunas possuem distribui\u00e7\u00f5es semelhantes, como `blueWins` e `blueFirstBlood`, indicando uma poss\u00edvel rela\u00e7\u00e3o entre essas colunas, talvez o time que consegue o *first blood* tamb\u00e9m seja o time mais prov\u00e1vel de vencer a partida.","34bf306a":"Utilizando a visualiza\u00e7\u00e3o de histogramas, podemos observar as distribui\u00e7\u00f5es das diferentes colunas do dataset.","9b9e5351":"Podemos observar que o dataset n\u00e3o posui valores faltantes, j\u00e1 que todas as colunas possuem a mesma contagem de dados. Al\u00e9m disso, observamos que, em m\u00e9dia, o time azul venceu em torno de 49% das partidas.","cc2ca543":"#### Matriz de Correla\u00e7\u00e3o\nCom essa visualiza\u00e7\u00e3o podemos observar melhor as poss\u00edveis correla\u00e7\u00f5es que vimos intuitivamente nas semelhan\u00e7as entre histogramas.","5c028bd4":"## O Dataset:\n\nO dataset escolhido, [`League of Legends Diamond Ranked Games (10 min)`](https:\/\/www.kaggle.com\/bobbyscience\/league-of-legends-diamond-ranked-games-10-min), apresenta dados referentes aos primeiros 10 minutos de partidas *rankeadas* de jogadores *Diamond* (alt\u00edssimo *rank*) e possui colunas referentes \u00e0s vit\u00f3rias de cada time, \u00e0 conquista de objetivo intermedi\u00e1rios (*dragons*, *barons*, *rift heralds*, ...) e ao comportamento dos jogadores (instala\u00e7\u00e3o e remo\u00e7\u00e3o de *wards*, elimina\u00e7\u00e3o de jogadores inimigos, assit\u00eancias, ...)\n\nO dataset cont\u00e9m 19 colunas de game data por time, 38 no total, mais o id do jogo e a coluna *blueWins* que indica o resultado da partida (se 1, o time azul venceu, se 0 o time vermelho venceu) totalizando 40 colunas e 9879 linhas no arquivo csv.","0216be7c":"A matriz de correla\u00e7\u00e3o ap\u00f3s a remo\u00e7\u00e3o de colunas redundantes:","75a922c3":"Para o tratamento e a an\u00e1lise desses dados, foram utilizadas as bibliotecas `numpy`, `pandas` e `sklearn`","5cf7a39e":"Com essa matriz, conseguimos observar alguns pares de colunas com correla\u00e7\u00e3o 1, por exemplo (`blueKills`,`redDeaths`). Isso se d\u00e1 porque essas colunas realmente representam a mesma informa\u00e7\u00e3o, j\u00e1 que cada elimina\u00e7\u00e3o do time azul \u00e9 necessariamente uma morte do time vermelho. Essas colunas podem ser removidas."}}