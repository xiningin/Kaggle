{"cell_type":{"789230c8":"code","bc22a6e9":"code","5ca049da":"code","e519214e":"code","ccd3d1c0":"code","989217b7":"code","fa79b679":"code","70e8e85f":"code","bbed4fe8":"code","3b074b3f":"code","d2387881":"code","ed365205":"code","8f7e56d7":"code","9481e5e7":"code","ad57f143":"code","b7f118e7":"code","5f092921":"code","bdd6a003":"code","1b08bbbc":"code","2c0f47ff":"code","e897f6de":"code","e5756e88":"code","efde1774":"code","0d06f132":"code","7fba243e":"code","0f6f79f8":"code","22410fa0":"code","f915b224":"code","6f02f184":"code","3a85f0c0":"code","9ff4a0d4":"code","87a974cd":"code","fe805d7c":"code","d03e8be1":"code","44a3d039":"code","0596b02b":"code","5083db06":"code","5908c2ba":"code","12884af6":"code","bc7d5826":"code","7d87f505":"code","a9fb5e05":"code","20920616":"code","4dc9267f":"code","b9e9893f":"code","e96e8826":"code","f16642bb":"code","6aff6385":"code","aa0d4e6a":"code","7905f30c":"code","0dcc59f2":"code","db750778":"code","9f00562d":"code","e8413dda":"code","e3b875d4":"code","fd44a8b3":"code","337d67f9":"code","4f7b4251":"markdown","b4a560e5":"markdown","3a0a224a":"markdown","335c5e06":"markdown","49a0c1e6":"markdown","2bc5b0ed":"markdown","ee8a1810":"markdown","f7771524":"markdown","00579d12":"markdown","6c2bc866":"markdown","e53e291d":"markdown","639b2073":"markdown","ad12f7fc":"markdown","16a52202":"markdown","75a84c59":"markdown","2aaa0934":"markdown","fd7b8b1e":"markdown","b801c6aa":"markdown","3b3c134c":"markdown","3b2ba9b0":"markdown","be0ba181":"markdown","d664c429":"markdown","aafa2b84":"markdown","a5cfbe70":"markdown","12b2d1db":"markdown","8d61ae0d":"markdown","0673820f":"markdown","7d88f64c":"markdown","a1f4ad14":"markdown","24b8c436":"markdown","8c0e2509":"markdown","18556440":"markdown","44b4756a":"markdown"},"source":{"789230c8":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np","bc22a6e9":"files = ['audi','bmw','ford','hyundi','merc','skoda','toyota','vauxhall','vw']  # file names","5ca049da":"dataframes = {}\nfor f in files:\n\n  dataframes[f+'_data'] = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/'+f+'.csv')\n  dataframes[f+'_data']['company'] = [f]*dataframes[f+'_data'].shape[0]\n  dataframes[f+'_data'] = dataframes[f+'_data'].reindex(columns = sorted(dataframes[f+'_data'].columns))\n  print( f+'_data :' , dataframes[f+'_data'].info() )","e519214e":"dataframes['hyundi_data'].rename(columns={\"tax(\u00a3)\": \"tax\"} , inplace = True)","ccd3d1c0":"dataframes['hyundi_data'].info()","989217b7":"Carsdata = pd.DataFrame()\nCarsdata = pd.concat(dataframes.values() )","fa79b679":"Carsdata.sample(10)","70e8e85f":"Carsdata.info()","bbed4fe8":"Carsdata.year.loc[17726]= 2006","3b074b3f":"from pandas_profiling import ProfileReport","d2387881":"profile = ProfileReport(Carsdata , title ='Pandas Profiling')  # report for data with outliers.","ed365205":"# code snippit for removing outliers.\ndf = Carsdata\nQ1 = df.quantile(0.25)\nQ3 = df.quantile(0.75)\nIQR = Q3 - Q1\nprint('Q1 :', Q1)\nprint('Q3 :', Q3)\nprint('IQR ', IQR)\ndff = df[~( (df < (Q1 - 1.5*IQR))|(df > (Q3 + 1.5*IQR)) ).any(axis=1)]\ndff.shape","8f7e56d7":"profile2 = ProfileReport(dff , title ='Pandas Profiling Report of Cars dataset')   # report for data without outliers.","9481e5e7":"profile2","ad57f143":"fig ,  ax = plt.subplots(1,2,figsize=(15, 5) )\nax[0].scatter( Carsdata.price ,  Carsdata.mileage)\nax[1].scatter( dff.price ,  dff.mileage)\n\nplt.title(' Without Outliers Price VS Mileage ')\nplt.xlabel('price')\nplt.ylabel('Mileage')","b7f118e7":"Carsdata.boxplot(['mileage' ],by= ['engineSize'] , figsize=(18 ,5))","5f092921":"Carsdata.boxplot(['price' ],by= ['engineSize'] , figsize=(18 ,5))","bdd6a003":"Carsdata[Carsdata.engineSize == 1.9]","1b08bbbc":"Carsdata[Carsdata.engineSize == 4.0].fuelType.value_counts()","2c0f47ff":"Carsdata[Carsdata.engineSize == 4.0].transmission.value_counts()","e897f6de":"Carsdata[Carsdata.engineSize == 5.2]","e5756e88":"Carsdata.boxplot(['price','mileage'] , by = ['transmission'] , figsize=(15 , 4) )\ndff.boxplot( ['price','mileage'] , by = ['transmission'] , figsize=(15 , 4) )","efde1774":"Carsdata.boxplot(['price','mileage'] , by= ['fuelType'] , figsize=(15 , 4) )\ndff.boxplot(['price','mileage'], by= ['fuelType'] ,  figsize=(15 , 4) )","0d06f132":"Carsdata.boxplot(['price']  , by= ['company'], figsize=(15 , 4) )\ndff.boxplot(['price']  , by= ['company'], figsize=(15 , 4) )","7fba243e":"dff.boxplot(['mpg'] , by= ['transmission'])","0f6f79f8":"dff.boxplot(['mpg'] , by= ['fuelType'])","22410fa0":"dff.boxplot(['mpg'] , by= ['company'] , figsize=(10 ,5))","f915b224":"dff.company.value_counts()","6f02f184":"Carsdata.company.value_counts()","3a85f0c0":"Carsdata.info()","9ff4a0d4":"from sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import make_column_transformer","87a974cd":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt","fe805d7c":"feature_data = Carsdata.drop(columns=['price','model'])      # data with outliers.\ntarget_data = Carsdata.price\n###############################################################\nfeature_data1 = dff.drop(columns=['price','model'])           # data without outliers\ntarget_data1 = dff.price","d03e8be1":"cat_data = feature_data.select_dtypes(include=['object'])\nprint(cat_data.columns)\nnum_data = feature_data.select_dtypes(include=['int','float'])\nprint(num_data.columns)","44a3d039":"oe = OrdinalEncoder()\noe.fit(cat_data)\nss = StandardScaler()\nss.fit(num_data)\ncat = pd.DataFrame(data = oe.transform(cat_data) , columns=cat_data.columns)\nnum = pd.DataFrame(data = ss.transform(num_data), columns= num_data.columns)","0596b02b":"cat_pipeline = make_pipeline(OrdinalEncoder())\nnum_pipeline = make_pipeline(StandardScaler())","5083db06":"preprocessor = make_column_transformer(\n              (cat_pipeline,cat_data.columns),\n              (num_pipeline,num_data.columns)\n)\n","5908c2ba":"from sklearn.model_selection import train_test_split\ntrainX, testX, trainY, testY = train_test_split(feature_data, target_data)        # data with outliers\n##########################################################################\ntrainX1, testX1, trainY1, testY1 = train_test_split(feature_data1, target_data1)     # data without outliers","12884af6":"from sklearn.linear_model import LinearRegression","bc7d5826":"pipeline = make_pipeline(preprocessor, LinearRegression())","7d87f505":"pipeline.fit( trainX , trainY)\nprint(\"Training Score : \",pipeline.score(trainX, trainY))\nprint('Testing Score : ',pipeline.score(testX, testY))\nprint('Root mean square error :',  sqrt(mean_squared_error(testY, pipeline.predict(testX))))","a9fb5e05":"pipeline.fit( trainX1 , trainY1)\nprint(\"Training Score : \", pipeline.score( trainX1, trainY1 ))\nprint('Testing Score : ', pipeline.score( testX1, testY1 ))\nprint('Root mean square error :', sqrt(mean_squared_error(testY1 , pipeline.predict( testX1 ))))","20920616":"from sklearn.ensemble import RandomForestRegressor","4dc9267f":"rf_pipeline = make_pipeline( preprocessor , RandomForestRegressor( n_estimators= 100 ))","b9e9893f":"rf_pipeline.fit( trainX , trainY)\nprint(\"Training Score : \",rf_pipeline.score(trainX, trainY))\nprint('Testing Score : ',rf_pipeline.score(testX, testY))\nprint('Root mean square error :',  sqrt(mean_squared_error(testY, rf_pipeline.predict(testX))))","e96e8826":"rf_pipeline.fit( trainX1 , trainY1)\nprint(\"Training Score : \", rf_pipeline.score( trainX1, trainY1 ))\nprint('Testing Score : ', rf_pipeline.score( testX1, testY1 ))\nprint('Root mean square error :', sqrt(mean_squared_error(testY1 , rf_pipeline.predict( testX1 ))))","f16642bb":"from sklearn.neighbors import KNeighborsRegressor","6aff6385":"kn_pipeline = make_pipeline( preprocessor , KNeighborsRegressor(n_neighbors=4))","aa0d4e6a":"kn_pipeline.fit( trainX , trainY)\nprint(\"Training Score : \",kn_pipeline.score(trainX, trainY))\nprint('Testing Score : ',kn_pipeline.score(testX, testY))\nprint('Root mean square error :',  sqrt(mean_squared_error(testY, kn_pipeline.predict(testX))))","7905f30c":"kn_pipeline.fit( trainX1 , trainY1)\nprint(\"Training Score : \", kn_pipeline.score( trainX1, trainY1 ))\nprint('Testing Score : ', kn_pipeline.score( testX1, testY1 ))\nprint('Root mean square error :', sqrt(mean_squared_error(testY1 , kn_pipeline.predict( testX1 ))))","0dcc59f2":"from sklearn.model_selection import GridSearchCV","db750778":"gs_pipeline = make_pipeline(preprocessor, RandomForestRegressor(n_estimators=100))","9f00562d":"params = {'randomforestregressor__n_estimators':[100,200,250]}","e8413dda":"gs = GridSearchCV(gs_pipeline, param_grid=params, cv=5, n_jobs=4)","e3b875d4":"gs.fit( trainX , trainY)\nprint(\"Training Score : \",gs.score(trainX, trainY))\nprint('Testing Score : ',gs.score(testX, testY))\nprint('Root mean square error :',  sqrt(mean_squared_error(testY, gs.predict(testX))))\nprint('******************************')\nprint('Best params :',gs.best_params_)\nprint('Best Score :', gs.best_score_ )","fd44a8b3":"gs.fit( trainX1 , trainY1)\nprint(\"Training Score : \", gs.score( trainX1, trainY1 ))\nprint('Testing Score : ', gs.score( testX1, testY1 ))\nprint('Root mean square error :', sqrt(mean_squared_error(testY1 , gs.predict( testX1 ))))\nprint('******************************')\nprint('Best params :', gs.best_params_)\nprint('Best Score :', gs.best_score_ )","337d67f9":"result = pd.DataFrame()\nresult['actual'] = testY1\nresult['prediction'] = gs.predict( testX1)\nresult.sample(10)","4f7b4251":"# Car price model for all car companies ","b4a560e5":"### Creating Pandas Profile report of dataframe.","3a0a224a":"Reading data from multiple files.","335c5e06":"* data without outliers.","49a0c1e6":"* cars with hybrid fuelType give  more mpg.\n* cars with petrol fuelType give  less mpg.","2bc5b0ed":"### **Linear Regressor**","ee8a1810":"### **Results**","f7771524":"* the reason of being so expensive of this engineSize 4.0 is the transmission i.e 'Semi-Auto' and 'Autometic'.","00579d12":"* from the above graph we get to know that there is a negative corelation between the price and the mileage.","6c2bc866":"Importing Libraries","e53e291d":"* data with outliers.","639b2073":"* Manual cars are cheaper and give good mileage were as Automatic and Semi-auto once are expensive and give less mileage.","ad12f7fc":"* data with outliers.","16a52202":"* data without outliers.","75a84c59":"* data with outliers.","2aaa0934":"* Conclusion \n  * getting the least RMSE of 1909.40 testing model with data without outliers in RendomForestRegress with n_estimetors :250 ","fd7b8b1e":"* from above we get the reason of engineSize 1.9 to be cheaper that is because it is an old modle when cars use to be cheaper as compaerd to now.\n* The another reason of long road life is the fuel type that is 'Diesel', and transmission is 'Manual' , so it needs less fule . ","b801c6aa":"* data with outliers.","3b3c134c":"### **Random Forest Regressor**","3b2ba9b0":"* the reason of being so expensive of this engineSize 5.2 is the transmission i.e 'Semi-Auto' and 'Autometic'.","be0ba181":"* from the we get to know that cars with engineSize 1.9 , 2.7 , 3.7 are very good mileage.","d664c429":"### **Hyper parameter tuning using GridSearchCV**","aafa2b84":"* from above two boxplots we get know that 1.9 engineSize is cost efficent as well as has long on road life.\n* and also engine sizes 4.0 and 5.2 are the most costly ones. ","a5cfbe70":"### **KNeighbors Regressor**","12b2d1db":"### **Data preprocessing**","8d61ae0d":"* cars with Hybrid & Diesel fueltype are expensive.\n* cars with fueltype Petrol are less expensive.\n* because of the fuel prices\n  * cars with Diesel fueltype have more mileage\n  * cars with Petrol fueltype have less mileage","0673820f":"* data without outliers.","7d88f64c":"* from over previous observations we know that toyota company sell the budget range cars. and \n* from this we graphs we get to know that 'toyota' cars gives good mpg as compaired to other companies.\n* After toyota there is ford with same measures.\n\n","a1f4ad14":"* data without outliers.","24b8c436":"### Vizualization","8c0e2509":"* from the above graph we gets to know that 'merc','audi','bwm' are the top 3 companies thoes sell the most expensive cars.\n* another thing we gets to know that is we want to go for budget friendly car than we shoul go with 'hyundai','ford','toyota'..","18556440":"* Manual cars give more mile per galen as comapared to other types.","44b4756a":"Creating a dataframe by concatinating data from allthe files."}}