{"cell_type":{"ff5d0cef":"code","a69e2e78":"code","4d48ca55":"code","eee93e81":"code","cec1bf2b":"code","475244fc":"code","0cf4180d":"code","af9d6e93":"code","63c5ecc6":"code","c447f6cb":"code","30d4ee87":"code","a77a5328":"code","c8580f42":"code","b5dbdbc8":"code","1efe8e25":"code","6e562126":"code","92c60d6f":"code","0ed8dd33":"code","a3fee489":"code","57a59aab":"code","7faf8570":"code","0aea9b6f":"code","2df5601f":"code","6b787617":"code","29b276a3":"code","b09dba5e":"code","42de09a3":"code","0971b0e3":"markdown","6dc67dd7":"markdown","4154eefa":"markdown"},"source":{"ff5d0cef":"import pandas as pd\nimport numpy as np","a69e2e78":"df = pd.read_csv('..\/input\/iris\/Iris.csv')\ndf.head()","4d48ca55":"df = df.iloc[: ,1:]\ndf.head()","eee93e81":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()","cec1bf2b":"df['Species'] = encoder.fit_transform(df['Species'])\ndf.head()","475244fc":"df.drop(['SepalLengthCm', 'PetalWidthCm'], axis = 1, inplace=True)  # making problem little bit tough.","0cf4180d":"df.head(), df.shape","af9d6e93":"df = df[df['Species'] != 0]  # converting to binary problem","63c5ecc6":"df.head(), df.shape","c447f6cb":"import matplotlib.pyplot as plt\nimport seaborn as sns","30d4ee87":"plt.scatter(df['SepalWidthCm'], df['PetalLengthCm'], c = df['Species'], cmap = 'winter')","a77a5328":"# Taking only 10 rows for training\ndf = df.sample(100)\ndf_train = df.iloc[:60,:].sample(10)\ndf_val = df.iloc[60:80,:].sample(5)\ndf_test = df.iloc[80:,:].sample(5)","c8580f42":"df_train","b5dbdbc8":"df_val","1efe8e25":"df_test","6e562126":"X_test = df_val.iloc[:,0:2].values\ny_test = df_val.iloc[:,-1].values","92c60d6f":"# Data for Tree 1\ndf_bag = df_train.sample(8,replace=True)\n\nX = df_bag.iloc[:,0:2]\ny = df_bag.iloc[:,-1]\n\ndf_bag","0ed8dd33":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import plot_tree\nfrom mlxtend.plotting import plot_decision_regions\nfrom sklearn.metrics import accuracy_score","a3fee489":"dt_bag1 = DecisionTreeClassifier()  # max_depth is none so it's a LBHV tree","57a59aab":"def evaluate(clf,X,y):\n    clf.fit(X,y)\n    plot_tree(clf)\n    plt.show()\n    plot_decision_regions(X.values, y.values, clf=clf, legend=2)\n    y_pred = clf.predict(X_test)\n    print(accuracy_score(y_test,y_pred))","7faf8570":"evaluate(dt_bag1, X, y)","0aea9b6f":"# Data for Tree 2\ndf_bag = df_train.sample(8,replace=True)\n\n# Fetch X and y\nX = df_bag.iloc[:,0:2]\ny = df_bag.iloc[:,-1]\n\n# print df_bag\ndf_bag","2df5601f":"dt_bag2 = DecisionTreeClassifier()\nevaluate(dt_bag2,X,y)","6b787617":"# Data for Tree 3\ndf_bag = df_train.sample(8,replace=True)\n\n# Fetch X and y\nX = df_bag.iloc[:,0:2]\ny = df_bag.iloc[:,-1]\n\n# print df_bag\ndf_bag","29b276a3":"dt_bag3 = DecisionTreeClassifier()\nevaluate(dt_bag3,X,y)","b09dba5e":"df_test\n","42de09a3":"print(\"Bag 1\",dt_bag1.predict(np.array([2.2,5.0]).reshape(1,2)))\nprint(\"Bag 2\",dt_bag2.predict(np.array([2.2,5.0]).reshape(1,2)))\nprint(\"Bag 3\",dt_bag3.predict(np.array([2.2,5.0]).reshape(1,2)))","0971b0e3":"Mode will be the predicted value","6dc67dd7":"# CASE 1 - Bagging","4154eefa":"# Predict"}}