{"cell_type":{"8c0a9ea8":"code","adbbe222":"code","abb14024":"code","0ef47760":"code","d9e9a851":"code","11edccb4":"code","3218a800":"code","2dd9f9c6":"code","f9f800b5":"code","db8daf47":"code","452bf7f1":"code","af9effa7":"code","c533924a":"code","d6323d73":"code","e6c1e77a":"code","5fc740ee":"code","4bb59440":"code","0f872ed6":"code","997e5a9b":"code","8f7e1351":"code","32e36c67":"code","be6d8cc4":"code","a3d8a214":"code","eb6c4b04":"code","552283b8":"code","9d9ca76d":"code","3f7e4487":"code","ae2d96a7":"code","e61517e9":"code","79262162":"code","8e84547c":"code","62000114":"code","0aeb329e":"code","9ff4a747":"code","caf51829":"code","b88c685f":"code","9aebad2d":"code","b7382761":"code","b5e8f07f":"code","eaa5c953":"code","5a7c93e4":"code","9ede6c7b":"code","9d995fb5":"code","16f40dfb":"code","ca7de307":"code","683b7860":"code","104409ed":"code","c3665d37":"code","a4a15b83":"markdown","ac8ce407":"markdown","e7628ea6":"markdown","bfb1c5fa":"markdown","11f5ef8e":"markdown","d8eb1573":"markdown","c53f8f4d":"markdown","281f8ba1":"markdown","c48de0e3":"markdown","8e020d76":"markdown","50dd9695":"markdown","24452a76":"markdown","cbda387c":"markdown","41ad3da0":"markdown","40925bed":"markdown","4b7d0990":"markdown","0cb8371d":"markdown"},"source":{"8c0a9ea8":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sb","adbbe222":"PNS_PATH = '..\/input\/pns-2019\/pns_2019.csv'\ndf = pd.read_csv(PNS_PATH, low_memory=False)","abb14024":"df","0ef47760":"cols = df.columns.to_list()\ncol_code = [col.split(']')[0][1:] for col in cols]","d9e9a851":"code_to_desc = dict(zip(col_code, cols))","11edccb4":"code_to_desc","3218a800":"df.columns = col_code","2dd9f9c6":"df.columns","f9f800b5":"df","db8daf47":"columns_to_drop = ['C012', 'C00301', 'C004','V0025A', 'E027', 'F016', 'J007', 'V0024', 'UPA_PNS', 'V0006_PNS', 'V0020', 'VDDATA', 'V0015', 'V001', 'V00101', 'C00701', 'C00702', 'C00703', 'Y001', 'P00102','P00103','P00104','P00201','P00402','P00403','P00404','P00405', 'V0028','V0029','V00281','V00291','V00282','V00292','V00283','V00293', 'M00203', 'D001', 'D015']\ndf.drop(columns_to_drop, axis=1, inplace=True)","452bf7f1":"columns_to_drop = ['P00601','P00602','P00603','P00604','P00605','P00607','P00608','P00609','P00610','P00611','P00612','P00613','P00614','P00615','P00616','P00617','P00618','P00619','P00620','P00621','P00622','P00623','P006']\ndf.drop(columns_to_drop, axis=1, inplace=True)","af9effa7":"df","c533924a":"def code_of_desc(value):\n    \"\"\"\n    Extracts the code from description\n    \n    example: \n    code_of_desc('[V0001] Unidade da Federa\u00e7\u00e3o') -> 'V0001'\n    \"\"\"\n    if isinstance(value, str):\n        return value.split(']')[0][1:]\n    elif isinstance(value, list):\n        return [i.split(']')[0][1:] for i in value]\n    else:\n        return None\n\ndef cols_contains(name):\n    \"\"\"\n    Return columns codes which contains the substring\n    \n    example: \n    cols contains('federa\u00e7\u00e3o') -> '[V0001] Unidade da Federa\u00e7\u00e3o'\n    \"\"\"\n    return [code_of_desc(c) for c in list(code_to_desc.values()) if name in c.lower()]","d6323d73":"depression_cols = cols_contains('depress\u00e3o')\nfor col in depression_cols:\n    print (code_to_desc[col])","e6c1e77a":"depression_cols","5fc740ee":"df.drop(depression_cols[1:], axis=1, inplace=True)","4bb59440":"df","0f872ed6":"na = df.Q092.isna()","997e5a9b":"df = df.drop(na[na == True].index)","8f7e1351":"df.reset_index(drop=True, inplace=True)","32e36c67":"df.C008.describe()","be6d8cc4":"df = df[df.C008 <= 29]","a3d8a214":"cols = df.columns.to_list()\nremove_from_dataset = ['A', 'B', 'I', 'J', 'H', 'W', 'N', 'Q', 'U', 'O', 'T', 'Y']\ncols_to_remove = [col for col in cols if col[0] in remove_from_dataset and col != 'Q092']","eb6c4b04":"df.drop(cols_to_remove, axis=1, inplace=True)","552283b8":"df","9d9ca76d":"def select_by_code(self, code):\n    return df[col_starts_with(self, code)]\n\ndf.select_by_code = select_by_code","3f7e4487":"plt.figure(figsize=(25,16))\nax = sb.heatmap(df.isna(),yticklabels=False,cbar=False,cmap='viridis')","ae2d96a7":"df = df.dropna(axis=1, thresh=len(df)*0.75)","e61517e9":"df","79262162":"df.columns.to_list()","8e84547c":"plt.figure(figsize=(25,16))\nax = sb.heatmap(df.isna(),yticklabels=False,cbar=False,cmap='viridis')","62000114":"df_20 = df[df.C008 <= 20].copy()\ndf_21 = df[df.C008 > 20].copy()\ndf_20.reset_index(drop=True, inplace=True)\ndf_21.reset_index(drop=True, inplace=True)","0aeb329e":"df.C006.unique()","9ff4a747":"df_h = df[df.C006 == 'Homem'].copy()\ndf_h.reset_index(drop=True, inplace=True)\n\ndf_m = df[df.C006 == 'Mulher'].copy()\ndf_m.reset_index(drop=True, inplace=True)\n\ndf_20_h = df_20[df_20.C006 == 'Homem'].copy()\ndf_20_h.reset_index(drop=True, inplace=True)\n\ndf_21_h = df_21[df_21.C006 == 'Homem'].copy()\ndf_21_h.reset_index(drop=True, inplace=True)\n\ndf_20_m = df_20[df_20.C006 == 'Mulher'].copy()\ndf_20_m.reset_index(drop=True, inplace=True)\n\ndf_21_m = df_21[df_21.C006 == 'Mulher'].copy()\ndf_21_m.reset_index(drop=True, inplace=True)","caf51829":"a = len(df) == len(df_20) + len(df_21)\nb = len(df) == len(df_h) + len(df_m)\nc = len(df_h) == len(df_20_h) + len(df_21_h)\nd = len(df_m) == len(df_20_m) + len(df_21_m)\ne = len(df_20) == len(df_20_h) + len(df_20_m)\nf = len(df_21) == len(df_21_h) + len(df_21_m)\n\na and b and c and d and e and f","b88c685f":"df.V0022.unique()","9aebad2d":"def numerical_to_categorical(serie):\n    \"\"\"\n    Transform a series of numerical data into categorical data with labels lower than Q1, between Q1 and Q3, greater than Q3\n    \"\"\"\n    intervals = serie.quantile([0.25, 0.75]).to_list()\n    intervals = [round(val, 2)  if val % 1 != 0 else val for val in intervals]\n    \n    return serie.apply(lambda v: num_to_label(v, intervals))\n    \ndef num_to_label(value, intervals):\n    if isinstance(value, str):\n        return value\n    elif value <= intervals[0]:\n        return '( ,' + str(intervals[0]) + ']'\n    elif value > intervals[0] and value <= intervals[1]:\n        return '(' + str(intervals[0]) + ' , ' + str(intervals[1]) + ']'\n    elif value > intervals[1]:\n        return '(' + str(intervals[1]) + ', )'\n    else:\n        None\n\nnumerical_to_categorical(df.V0022)","b7382761":"df.dtypes.unique()","b5e8f07f":"data_frames = [df, df_20, df_21, df_h, df_m, df_20_h, df_21_h, df_20_m, df_21_m]\nnames = ['df', 'df_20', 'df_21', 'df_h', 'df_m', 'df_20_h', 'df_21_h', 'df_20_m', 'df_21_m']\n\nfor d in data_frames:\n    for col_type in zip(d.columns, d.dtypes):\n        #print (col_type[0], col_type[1])\n        if col_type[1] != 'object':\n            d[col_type[0]] = numerical_to_categorical(d[col_type[0]])\n        \n        ","eaa5c953":"df","5a7c93e4":"for col_type in zip(df.columns, df.dtypes):\n    print (col_type[0], col_type[1])","9ede6c7b":"df","9d995fb5":"new_columns = [code_to_desc[col] for col in df.columns.to_list()]\n\nfor d in data_frames:\n    d.columns = new_columns","16f40dfb":"df_20_m","ca7de307":"df.columns.to_list()","683b7860":"import csv","104409ed":"for df in data_frames:\n    df.columns = df.columns.str.replace(',','')","c3665d37":"i=0\nfor df in data_frames:\n    cols = df.columns.to_list()\n    cols.remove('[Q092] Algum m\u00e9dico ou profissional de sa\u00fade mental (como psiquiatra ou psic\u00f3logo) j\u00e1 lhe deu o diagn\u00f3stico de depress\u00e3o?')\n    cols.append('[Q092] Algum m\u00e9dico ou profissional de sa\u00fade mental (como psiquiatra ou psic\u00f3logo) j\u00e1 lhe deu o diagn\u00f3stico de depress\u00e3o?')\n    df = df.reindex(columns=cols)\n    df.fillna('NA', inplace=True)\n    \n    df.to_csv('pns_'+names[i]+'.csv', index=False, quotechar='\"', quoting=csv.QUOTE_NONNUMERIC, sep=';')\n    i = i+1","a4a15b83":"## Splitting Data in different data frames","ac8ce407":"i = 0\nfor d in data_frames:\n    d.to_csv('2019_'+names[i]+'.csv', index=False)\n    i = i+1","e7628ea6":"## Transform numerical data into categorical data","bfb1c5fa":"## Recover columns description","11f5ef8e":"## Drop columns without depression label","d8eb1573":"## Import libs","c53f8f4d":"## Read data","281f8ba1":"# Depression subgroup discovery","c48de0e3":"## Save data","8e020d76":"## Drop columns related to depression","50dd9695":"## Drop columns without context related to depression","24452a76":"## Drop samples > 29 years old","cbda387c":"## Drop columns without 75% of values","41ad3da0":"## Drop columns without meaning","40925bed":"## Final Check","4b7d0990":"## Remove columns description","0cb8371d":"## Drop redundant columns from P"}}