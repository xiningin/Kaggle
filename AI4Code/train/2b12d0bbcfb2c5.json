{"cell_type":{"df35bf8f":"code","1c602226":"code","916331b2":"code","95d2e011":"code","67bd5a68":"code","0cd5f70c":"code","9c97311c":"code","642401e1":"code","23f90fd5":"code","0e90a2f0":"code","7c5afa35":"code","5a1d69be":"code","158769e0":"code","f345d80f":"code","41aa2364":"code","2286bea4":"code","7ec0d24f":"code","bd670ff1":"code","1c6af10a":"code","86d57183":"code","f85b905c":"code","e4d79482":"code","6f46b908":"code","8ebde3dd":"code","09977bff":"code","42b34704":"code","78679521":"code","8a743183":"markdown","67f758f2":"markdown"},"source":{"df35bf8f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n%matplotlib inline\nsns.set_style('whitegrid')","1c602226":"df = pd.read_csv('\/kaggle\/input\/disney-movies-and-tv-shows\/disney_plus_titles.csv')","916331b2":"df.head()","95d2e011":"print(f'summary of the data: \\n{df.info()}')","67bd5a68":"print(f'coloumns in dataframe: \\n{df.columns}')","0cd5f70c":"print(f'Data types in given dataset: \\n{df.dtypes}')","9c97311c":"print(f'checking null values: \\n{df.isnull().sum()}')","642401e1":"df.describe().style.background_gradient(cmap = 'Spectral')","23f90fd5":"df[df['release_year'] == 2003] #mean value is \"2003\"","0e90a2f0":"##Analysis of \"type of the movie\"\ndf['type'].value_counts()","7c5afa35":"values = df['type'].value_counts()\nkeys = df['type'].unique()\n\nfig = go.Figure(go.Pie(values= values, labels = keys, hole = 0.3))\nfig.show()","5a1d69be":"df['date_added'] = pd.to_datetime(df['date_added'], format = \"%B %d, %Y\")","158769e0":"#extract month and date added\n\ndf['month'] = df['date_added'].dt.month.fillna(0)","f345d80f":"df['date_added'].plot()","41aa2364":"fig = px.histogram(data_frame=df, x = 'date_added', title=\"Date\")\nfig.show()","2286bea4":"df['release_year'].plot(kind = 'hist')","7ec0d24f":"fig = px.histogram(df['release_year'], color = df['month'], nbins = 100, title=\"Release Year\")\nfig.show()","bd670ff1":"df['country'].str.split(',', expand=True)","1c6af10a":"country_count = df.copy()\ncountry_count = pd.concat([country_count, df['country'].str.split(',', expand=True)])\ncountry_count = country_count.melt(id_vars = ['type', 'title'], value_vars = range(15), value_name = 'country')\ncountry_count = country_count[country_count['country'].notna()]\n#country_count","86d57183":"fig = px.histogram(data_frame=country_count, x = 'country', title=\"Country count\").update_xaxes(categoryorder='total descending')\nfig.show()","f85b905c":"##Analysis of ratings\n\ndf['rating'].value_counts()","e4d79482":"fig = px.bar(data_frame= df, x = 'rating', title=\"Ratings of the Movies and TV-shows\")\nfig.show()","6f46b908":"fig = px.histogram(data_frame=df, x = ['rating'], color = 'type', title=\"Ratings of the Movies and TV-shows\")\nfig.show()","8ebde3dd":"df['listed_in'].str.split(',', expand=True)","09977bff":"genre_count = df.copy()\ngenre_count = pd.concat([genre_count, df['listed_in'].str.split(',', expand=True)])\ngenre_count = genre_count.melt(id_vars = ['type', 'title'], value_vars = range(3), value_name = 'genre')\ngenre_count = genre_count[genre_count['genre'].notna()]","42b34704":"fig = px.histogram(data_frame= genre_count, x = ['genre'], title=\"Genre of the Movies\")\nfig.show()\n","78679521":"keys = df['director'].value_counts().keys().to_list()\nvalues = df['director'].value_counts().to_list()\n\nfig = px.bar(x = keys[:30], y = values[:30], data_frame = df, \n             title=\"Top 30 Directors\", \n             labels={'x': 'Directors', 'y': 'no of movies'})\nfig.show()","8a743183":"Univariate Analysis","67f758f2":"# Exploratory Data Analysis"}}