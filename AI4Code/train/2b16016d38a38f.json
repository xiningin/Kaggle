{"cell_type":{"4d6bfdb9":"code","0b6b7227":"code","2d4997a3":"code","5bc03674":"code","76f32769":"code","12c9f87b":"code","8f2c4f29":"code","f0ffbe58":"code","47abcb9c":"code","b77c104e":"code","d6f77f25":"code","45889388":"code","9cb9370a":"code","b502f7ee":"code","89c6f449":"code","41393342":"code","5adeaf1c":"code","11b090ba":"code","015719da":"code","376f1a2e":"code","63ef55b8":"code","d5dd64dc":"code","b2beb8a8":"code","c7313b8b":"code","04ba2507":"code","6a454595":"code","72b671f4":"code","13676c18":"code","e67131d1":"code","1b85dee6":"code","f46d9e56":"code","21a2f273":"code","00d96e61":"code","0145dac6":"markdown","60954447":"markdown","0f218eb9":"markdown","1c88ddd4":"markdown","005c801c":"markdown","5c91bc08":"markdown","e648c123":"markdown","1c6f4ec9":"markdown","8bd97abd":"markdown","cee53cda":"markdown"},"source":{"4d6bfdb9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b6b7227":"import matplotlib.pyplot as plt\nimport seaborn as sbn\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline","2d4997a3":"dataframe = pd.read_csv(\"\/kaggle\/input\/advertising-data\/Advertising.csv\")","5bc03674":"dataframe.head(10)","76f32769":"dataframe = dataframe.iloc[:, 1:len(dataframe)]\ndataframe.head(10)","12c9f87b":"dataframe.info()","8f2c4f29":"X = dataframe.drop([\"Sales\"], axis= 1)\ny = dataframe[[\"Sales\"]]\nX","f0ffbe58":"y","47abcb9c":"X_train , X_test , y_train , y_test = train_test_split(X ,y , test_size = 0.2 , random_state = 15)\nX_train","b77c104e":"X_test","d6f77f25":"sbn.jointplot(x = \"TV\" , y = \"Sales\" , data = dataframe , kind = \"reg\") # x -> feature y -> label\nplt.xlim(-10 , 310)\nplt.ylim(bottom = 0)","45889388":"simpleX = X_train[[\"TV\"]]\nsimpleX","9cb9370a":"regression = LinearRegression()","b502f7ee":"model = regression.fit(simpleX,y_train)","89c6f449":"constant = model.intercept_\ncoefficient = model.coef_\nprint(\"Constant : \" , constant ,\"\\n\",\"Coefficient : \" , coefficient)","41393342":"graph = sbn.regplot(dataframe[\"TV\"] ,dataframe[\"Sales\"]  , ci = None , scatter_kws = { \"color\" : \"r\" , \"s\" : 9} )\ngraph.set_title(\"Sales = Constant + Coefficient * TV graph\")\ngraph.set_xlabel(\"TV spending\")\ngraph.set_ylabel(\"Sales\")\nplt.xlim(-10,300)\nplt.ylim(bottom = 0)\nplt.show()","5adeaf1c":"# for example let's find TV spending = 165 manually\nsalesmanually = constant + coefficient*165\n# let's model find TV spending = 165\nsaleswithmodel = model.predict([[165]])\nprint(\"salesmanually : \" , salesmanually , \"\\nsaleswithmodel : \", saleswithmodel )","11b090ba":"simpleX_test = X_test[\"TV\"]\n\nsimpleX_test = pd.DataFrame(simpleX_test )\n","015719da":"realvalues = y_test.values\nrealvalues = pd.DataFrame(realvalues)\nrealvalues","376f1a2e":"realvalues\npredictvalues =pd.DataFrame(model.predict(simpleX_test)[0:len(realvalues)])\nerrordf = pd.concat([realvalues , predictvalues] , axis =1 , ignore_index = True )\nerrordf.columns = [\"real\" , \"predict\"]\nerrordf[\"error\"] = errordf[\"real\"] - errordf[\"predict\"]\nerrordf","63ef55b8":"# finding mean squarared error (mse)\nerrordf[\"se\"] = errordf[\"error\"] ** 2 # se means squared error\nerrordf","d5dd64dc":"MSE = np.mean(errordf[\"se\"])\nMSE","b2beb8a8":"MultiLinearRegression = LinearRegression()","c7313b8b":"Model = MultiLinearRegression.fit(X_train , y_train)","04ba2507":"coefficient = Model.coef_\nconstant = Model.intercept_\nprint(\"coefficient is : \" , coefficient , \"Constant is : \", constant)","6a454595":"X_test.head(1)","72b671f4":"manualtest = constant + coefficient[0][0] * 66.9 + coefficient[0][1] * 11.7 + coefficient[0][2] * 36.8\ntestwithmodel= Model.predict([[66.9 , 11.7 , 36.8]])\nprint(\"Manually : \" , manualtest , \"\\nWith Model : \", testwithmodel)\n#As we can see they are same ","13676c18":"multipleX_test = pd.DataFrame(X_test )\nmultiplerealvalues = y_test.values\nmultiplerealvalues = pd.DataFrame(multiplerealvalues)","e67131d1":"multiplepredictedvalues = pd.DataFrame(Model.predict(multipleX_test)[0:len(realvalues)])\nerrordf2 = pd.concat([multiplerealvalues , multiplepredictedvalues ], axis = 1 , ignore_index = True)\nerrordf2.columns = [\"mreal\" , \"mpredicted\"]\nerrordf2[\"error\"] = errordf2[\"mreal\"] - errordf2[\"mpredicted\"]\nerrordf2\n","1b85dee6":"from sklearn.metrics import mean_squared_error , mean_absolute_error","f46d9e56":"MSE = mean_squared_error(errordf2[\"mreal\"] , errordf2[\"mpredicted\"])\nMSE","21a2f273":"RMSE = np.sqrt(MSE)\nRMSE","00d96e61":"MAE = mean_absolute_error(errordf2[\"mreal\"] , errordf2[\"mpredicted\"])\nMAE","0145dac6":"Let's make an example manually and with model.","60954447":"# ADD L\u0130BRAR\u0130ES\n<a class=\"anchor\" id = '1'>","0f218eb9":"**Now we can say our formula is : \nSales = Constant + Coefficient*TV**","1c88ddd4":"# DATA\n<a class=\"anchor\" id = '2'>","005c801c":"# CONTENT\n\n- [ADD L\u0130BRAR\u0130ES](#1)\n- [DATA](#2)\n- [S\u0130MPLE L\u0130NEAR REGRESS\u0130ON](#3)\n- [MULT\u0130PLE L\u0130NEAR REGRESS\u0130ON](#4)","5c91bc08":"# MULT\u0130PLE L\u0130NEAR REGRESS\u0130ON <a class=\"anchor\" id = '4'>","e648c123":"# S\u0130MPLE L\u0130NEAR REGRESS\u0130ON <a class=\"anchor\" id = '3'>","1c6f4ec9":"The first parameters are 66.9 , 11.7 , 36.8 in test dataframe.","8bd97abd":"There 3 three columns so 3 coefficients. \n\n\n**Sales = Constant + coefficient[0]* TV + coefficient[1] * radio + coefficient[2] * newspaper**","cee53cda":"Let's try simple linear regression on TV advertising."}}