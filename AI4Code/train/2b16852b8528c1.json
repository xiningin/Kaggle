{"cell_type":{"1177b1e9":"code","84489c8d":"code","96c8baa0":"code","5e11b0d9":"code","4ee430a3":"code","561c6902":"code","26ee6cba":"code","ace3552c":"code","079ea650":"code","c3eb315e":"code","bdc6057d":"code","2ace8d93":"code","2b99c79d":"code","1513dc34":"code","e0e8ecf0":"code","6005c5bb":"code","298b236e":"code","91c9d739":"code","7f82ada2":"code","551fb3b7":"code","c6808f51":"code","68220e48":"code","9c3702f5":"code","a81e44d0":"code","6f81c6c8":"code","4f0308f9":"code","c7612de2":"code","5dc9a3bf":"code","09dd5da9":"code","8294b45d":"markdown"},"source":{"1177b1e9":"!pip -q install -U sentence-transformers","84489c8d":"import pandas as pd\nimport numpy as np\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom tqdm.notebook import tqdm\nimport torch\nimport torch.nn as nn\nfrom transformers import AutoModel, AutoTokenizer\nfrom torch.utils.data import Dataset,DataLoader\nfrom sentence_transformers import SentenceTransformer\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\n\n\nclass config():\n    model_name=\"sentence-transformers\/paraphrase-multilingual-mpnet-base-v2\"\n    maxlen=128\n    batchsize=64\n    \nCFG=config()","96c8baa0":"class config():\n    model_name=\"sentence-transformers\/paraphrase-multilingual-mpnet-base-v2\"\n    maxlen=128\n    batchsize=64\n    \nCFG=config()","5e11b0d9":"df=pd.read_csv(\"..\/input\/dataaaaaaaahaaaaa\/seekAppUserDataV2.csv\")\ndf.head()","4ee430a3":"df=df.fillna(\" \")\ndf.head()","561c6902":"df.shape","26ee6cba":"# df[\"textCol\"]=df[\"title\"]+df[\"description\"]+df[\"text\"]+df[\"imageTitle\"]\ndf=df.fillna(\" \")\n\ndf[\"textCol\"]=df[\"title\"]\ndf=df.groupby('Id').agg(lambda x: x.tolist()).reset_index()\ndf[\"collectionNameLower\"]=df[\"collectionNameLower\"].map(lambda x:[x[0]])\ndf[\"owner\"]=df[\"owner\"].map(lambda x:[x[0]])\n\ndf[\"textCol\"]+=df[\"collectionNameLower\"]\ndf[\"textCol\"]=df[\"textCol\"].map(lambda x:\" \".join(x))\ndf.head()","ace3552c":"combinedDf=pd.DataFrame(columns=[\"owner\",\"Id\",\"textCol\"])\ncombinedDf[\"owner\"]=df[\"owner\"].map(lambda x:\" \".join(x))\ncombinedDf[\"Id\"]=df[\"Id\"]\ncombinedDf[\"textCol\"]=df[\"textCol\"]","079ea650":"combinedDf.head()","c3eb315e":"tokenizer=AutoTokenizer.from_pretrained(CFG.model_name)","bdc6057d":"class SADataset(Dataset):\n  def __init__(self,text,userId):\n    self.sentence=text\n    self.userId=userId\n#     self.tokenizer=tokenizer\n\n  def __len__(self):\n    return len(self.sentence)\n  \n  def __getitem__(self,idx):\n#     inp_tokens=self.tokenizer.encode_plus(self.sentence[idx], \n#                                           padding=\"max_length\", \n#                                           add_special_tokens=True,\n#                                           max_length=CFG.maxlen, \n#                                           truncation=True)\n#     inp_id=inp_tokens.input_ids\n#     inp_mask=inp_tokens.attention_mask\n\n    return {\n        \"userId\":self.userId[idx],\n        \"sentence\":self.sentence[idx],\n#         \"input_ids\":torch.tensor(inp_id, dtype=torch.long),\n#         \"input_attention_mask\":torch.tensor(inp_mask, dtype=torch.long),\n    }","2ace8d93":"dataset=SADataset(combinedDf[\"textCol\"],combinedDf[\"Id\"])","2b99c79d":"dataloader=DataLoader(dataset,\n                     batch_size=CFG.batchsize,\n                     num_workers=2,\n                     shuffle=False)","1513dc34":"# next(iter(dataloader))","e0e8ecf0":"device=torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","6005c5bb":"# class Model(nn.Module):\n#     def __init__(self):\n#         super(Model, self).__init__()\n#         self.model=AutoModel.from_pretrained(CFG.model_name)\n        \n#     def forward(self,input_ids,mask):\n#         x=self.model(input_ids=input_ids\n#                     )\n#         output=x.pooler_output\n#         return output","298b236e":"model=SentenceTransformer('sentence-transformers\/stsb-xlm-r-multilingual')","91c9d739":"model.to(device)","7f82ada2":"embeddings=list()\ncolIds=list()\nfor batch in tqdm(dataloader):\n    sentences=batch[\"sentence\"]\n    ids=batch[\"userId\"]\n#     input_ids=batch[\"input_ids\"].to(device)\n#     mask=batch[\"input_attention_mask\"].to(device)\n#     output=model(input_ids=input_ids,\n#                 mask=mask)\n    output=model.encode(sentences)\n    colIds.extend(ids)\n    embeddings.extend(output.tolist())","551fb3b7":"len(embeddings)","c6808f51":"len(colIds)","68220e48":"embeddings=np.stack(embeddings)\nembeddings.shape","9c3702f5":"col=np.array(colIds)","a81e44d0":"np.savez(\"embeddings_coll.npz\",userIds=col,embeddings=embeddings)","6f81c6c8":"df=combinedDf.groupby('owner').agg(lambda x: x.tolist()).reset_index()","4f0308f9":"df","c7612de2":"def collections_to_follow(user):\n    emb=[]\n    for i in df[df['owner']==user]['Id'][df[df['owner']==user]['Id'].index[0]]:\n        emb.append(embeddings[combinedDf[combinedDf['Id']==i].index[0]])\n    a=list(combinedDf[combinedDf['owner']==user].index)\n    results=[]\n    results.append(cosine_similarity([np.mean(emb, axis=0)],embeddings))\n    b=list(np.concatenate( results, axis=0 ).flatten())\n    x=sorted(range(len(b)), key=lambda i: b[i])\n    for i in a:\n        x.remove(i)\n\n    return list(np.array(combinedDf[combinedDf.index.isin(x[-10:])]['Id'])),emb","5dc9a3bf":"t,d=collections_to_follow('GLi15um5d3TMb1zT8KALRhFDCjc2')","09dd5da9":"t","8294b45d":"***Generate Collection Embeddings***"}}