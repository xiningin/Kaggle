{"cell_type":{"6d13a7e6":"code","ad4caca7":"code","23f22b64":"code","a57128a2":"code","20705162":"code","42f28745":"code","c73f449d":"code","5f816828":"code","5964c3b7":"code","1b8e1933":"code","4e3a08da":"code","f4257e3d":"code","572c23a4":"code","cba43af2":"code","d262eac1":"code","fbe39286":"code","8df8d9cf":"code","ec27cf93":"code","b5924a6d":"code","e489a926":"code","9dfec035":"markdown","8dc6a3af":"markdown","cd8fa5a7":"markdown"},"source":{"6d13a7e6":"pip install tldextract","ad4caca7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport os\nimport re\nimport ipaddress\nimport tldextract","23f22b64":"inputfile = \"\/kaggle\/input\/ping-result\/pingtestresult.txt\"","a57128a2":"destinations = [\"103.104.195.113\", \"103.104.195.115\", \n                \"103.104.195.117\", \"103.104.195.118\", \n                \"103.104.195.119\", \"103.104.195.121\", \n                \"103.104.195.122\", \"www.google.com.my\", \n                \"www.yahoo.com\", \"www.monash.edu.my\", \n                \"www.taylors.edu.my\", \"www.lazada.edu.my\",\n                \"www.lazada.com.my\", \"www.lazada.com\", \n                \"103.111.75\", \"103.111.75.\", \"103.111.75.101\", \n                \"103.111.75.102\", \"103.111.75.103\", \n                \"103.111.75.104\", \"103.111.75.105\", \n                \"103.111.75.106\"]","20705162":"def validate_ip_address(address):\n    try:\n        ip = ipaddress.ip_address(address)\n        return True\n    except ValueError:\n        return False","42f28745":"def stripAddress(line):\n    value = line.strip()\n    if (value.find(\"[\") != -1 and value.find(\"]\") != -1):\n        address = value[value.find(\"[\")+1:value.find(\"]\")]\n        return address\n    else:\n        return None","c73f449d":"def getIpAddress(destination, lines):\n    if (validate_ip_address(destination) == True):\n        return destination\n    else:\n        regex = re.compile(\"^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$\")\n        if(regex.match(destination)):\n            extract = tldextract.extract(destination)\n            expecteddomain = extract.domain + \".\" + extract.suffix\n            for line in lines:\n                if (expecteddomain in line):\n                    return stripAddress(line)\n            else:\n                for line in lines:\n                    if (extract.domain in line):\n                        return stripAddress(line)\n                else:\n                    return None\n        else:\n            return None","5f816828":"# Target line inside the ping data file is \n# Ping statistics for IP address (dynamic)\n# let us look for that particular line\n\n# The next line has the ping statistic detail\n# Packets: Sent = 2, Received = 2, Lost = 0 (0% loss),\n# we can split this line into 2 using : as delimiter\n# [\"Packets\", \"Sent = 2, Received = 2, Lost = 0 (0% loss),\"]\n# obviously we are interested in the second slice (string) which is\n# Sent = 2, Received = 2, Lost = 0 (0% loss),\n# Let us split the string again using , as delimiter\n# The string gets into 4 slices \n# [\"Sent = 2\", \"Received = 2\", \"Lost = 0 (0% loss)\", \"\"]\n# This list of tokens are assigned to the variable values\n\n# Let us iterate the list and get the items one by one\n# and add it into a dictionary result\n# { \"ipaddress\": ipaddress }\n# result[\"Sent\"] = 2\n# result[\"Received\"] = 2\n# result[\"Lost\"] = 0 (0% loss)\n# result = {\n#     'ipaddress':'192.168.1.254',\n#     'Sent':'2',\n#     'Received':'2',\n#     'Lost':'0 (0% loss)'\n# }\n\ndef extract(lines, destination):\n    address = getIpAddress(destination, lines)\n    if address is not None:\n        expectedLine = \"Ping statistics for \" + address + \":\"\n        result = { \"ipaddress\": address }\n        for index, line in enumerate(lines):\n            if expectedLine in line:\n                packetsLine = lines[index + 1].strip(\"\\n\")\n                values = packetsLine.split(\":\")[1].split(\",\")\n                for value in values:\n                    if value.strip() != \"\":\n                        key, value = value.split(\"=\")\n                        result[key.strip()] = value.strip()\n                if (int(result['Received']) != 0):\n                    roundTripLine = lines[index + 3].strip(\"\\n\")\n                    values = roundTripLine.split(\",\")\n                    for value in values:\n                        if value.strip() != \"\":\n                            key, value = value.split(\"=\")\n                            result[key.strip()] = value.strip()                \n        return result","5964c3b7":"# The analyze function takes list of ip addresses as paramter\n\n# The function opens input file in read mode and reads \n# every single line in input file and append it to lines variable\n\n# The analyze function iterate through ip addresses and send \n# every ip address to extract function along with all the lines \n# inside the input file\n\n# The extract function returns a dictionary with all information\n\n# The returned dictionary is then added to a result list and \n# the analyze function returns the result list\n\ndef analyze(destinations):\n    result = []\n    with open(inputfile, \"rt\") as filehandler:\n        lines = filehandler.readlines()\n        for destination in destinations:\n            value = extract(lines, destination)\n            if value is not None:\n                result.append(value)\n    return result","1b8e1933":"result = analyze(destinations)\nresult","4e3a08da":"pingdata = pd.DataFrame(result)\npingdata","f4257e3d":"pingdata['Sent'] = pd.to_numeric(pingdata['Sent'])\npingdata['Received'] = pingdata['Received'].astype(int)","572c23a4":"pingdata.info()","cba43af2":"pingdata.set_index('ipaddress', inplace=True)","d262eac1":"ax = pingdata[['Sent', 'Received']].plot(kind=\"barh\", figsize=(8, 12))\nfor label in (ax.get_xticklabels() + ax.get_yticklabels()):\n    label.set_fontsize(16)\nplt.title(\"Ping test Result\", fontsize=26)\nplt.xlabel(\"Count\", fontsize=24)\nplt.ylabel(\"IP Address\", fontsize=24)\nplt.grid()\nplt.show()","fbe39286":"alive = pingdata[pingdata['Received'] > 0]\nalive","8df8d9cf":"alive = alive.applymap(lambda x: x.rstrip('ms') if (isinstance(x, str)) else x)\nalive","ec27cf93":"alive['Minimum'] = alive['Minimum'].astype(int)\nalive['Maximum'] = alive['Maximum'].astype(int)\nalive['Average'] = alive['Average'].astype(int)","b5924a6d":"alive.info()","e489a926":"ax = alive[['Minimum', 'Maximum', 'Average']].plot(kind=\"barh\", figsize=(8, 12))\nfor label in (ax.get_xticklabels() + ax.get_yticklabels()):\n    label.set_fontsize(16)\nplt.title(\"Ping test Result\", fontsize=26)\nplt.xlabel(\"Count\", fontsize=24)\nplt.ylabel(\"IP Address\", fontsize=24)\nplt.grid()\nplt.show()","9dfec035":"# Ping Data\nThe following pingtest function was used to collect the ping details for the ip addresses listed in the destinations variable. The pingtest function use subprocess and call the windows <b>ping<\/b> command. The output of ping command is captured inside the pingtestresult.txt file","8dc6a3af":"#### Objective\nThe objective of this notebook is to extract information from the data produced by the ping command and create a data frame. We use various string functions to extract information and convert it to a dictionary. The dictionary is then passed to pandas and DataFrame is created.","cd8fa5a7":"<pre>\ndef pingtest(ipaddresses):\n    f = open(<b>\"pingtestresult.txt\"<\/b>, \"wt\")\n    for ip in ipaddresses:\n        subprocess.call(\"ping %s -n 2\" % ip, stdout=f)\n    \ndestinations = [\"103.104.195.113\", \"103.104.195.115\", \n    \"103.104.195.117\", \"103.104.195.118\", \n    \"103.104.195.119\", \"103.104.195.121\", \n    \"103.104.195.122\", \"www.google.com.my\", \n    \"www.yahoo.com\", \"www.monash.edu.my\", \n    \"www.taylors.edu.my\", \"www.lazada.edu.my\",\n    \"www.lazada.com.my\", \"www.lazada.com\", \"103.111.75\", \n    \"103.111.75.\", \"103.111.75.101\", \"103.111.75.102\", \n    \"103.111.75.103\", \"103.111.75.104\", \"103.111.75.105\", \n    \"103.111.75.106\"]\n\npingtest(destinations)\n<\/pre>"}}