{"cell_type":{"8f070167":"code","fdf0cfe8":"code","1b6417df":"code","9b3410d5":"code","3560944b":"code","fed145ee":"code","944ae835":"code","3463dac6":"code","222dad6c":"code","8a6fca51":"code","1daf7d97":"markdown"},"source":{"8f070167":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdf0cfe8":"#Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","1b6417df":"#Importing the dataset\ndataset = pd.read_csv('..\/input\/wine-features\/wine features.csv')\nx = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","9b3410d5":"#Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)","3560944b":"#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","fed145ee":"#Applying LDA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nlda = LDA(n_components = 2)\nx_train = lda.fit_transform(x_train, y_train)\nx_test = lda.transform(x_test)","944ae835":"#Training the Logistic Regression model on the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(x_train, y_train)","3463dac6":"#Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nx_set, y_set = x_train, y_train\nx1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 1, stop = x_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = x_set[:, 1].min() - 1, stop = x_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(x1, x2, classifier.predict(np.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green', 'blue')))\nplt.xlim(x1.min(), x1.max())\nplt.ylim(x2.min(), x2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1],\n                c = ListedColormap(('red', 'green', 'blue'))(i), label = j)\nplt.title('Logistic Regression (Training set)')\nplt.xlabel('LD1')\nplt.ylabel('LD2')\nplt.legend()\nplt.show()","222dad6c":"#Visualising the Test set results\nfrom matplotlib.colors import ListedColormap\nx_set, y_set = x_test, y_test\nx1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 1, stop = x_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = x_set[:, 1].min() - 1, stop = x_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(x1, x2, classifier.predict(np.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green', 'blue')))\nplt.xlim(x1.min(), x1.max())\nplt.ylim(x2.min(), x2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1],\n                c = ListedColormap(('red', 'green', 'blue'))(i), label = j)\nplt.title('Logistic Regression (Test set)')\nplt.xlabel('LD1')\nplt.ylabel('LD2')\nplt.legend()\nplt.show()","8a6fca51":"#Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(x_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","1daf7d97":"**Linear Discrimant Analysis**  on wine characteristic dataset to determine what kind of wine certain people prefer to drink to increase sales while decreasing the complexity."}}