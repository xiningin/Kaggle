{"cell_type":{"390c5c25":"code","92de80cf":"code","491557b4":"code","1a66b652":"code","af5db634":"code","fd869569":"code","7e3119ef":"code","2582e890":"code","4cb460ed":"code","dd4e32b3":"code","f0fc3cbf":"code","8403bc02":"code","27556991":"code","b5b1cc06":"code","074cff37":"code","b15562a5":"code","72fb52ee":"code","8943a943":"code","9523fe20":"code","508b0ca4":"code","c8b4e36b":"code","f4dac2b2":"code","5a43c06d":"code","38b9665a":"code","4c4d9ac5":"code","7d5dcd1e":"code","a138bf63":"code","62f88b41":"code","755639e4":"code","3c7cbedf":"code","266c18e4":"code","7434cdab":"code","e073476a":"code","1c2720b7":"code","ef56c5d0":"code","1af1363a":"code","f962bc7f":"code","c0e336ac":"code","da770c77":"code","8e998fc4":"code","985d0f09":"code","e418983b":"code","aa01e666":"code","8862b832":"code","e8568cd9":"code","b13de192":"code","a0e75b34":"code","91f8502e":"code","d543090c":"code","708a6e5c":"code","9ab39f5b":"code","d21ef26f":"code","047e6dd6":"code","b5c840cf":"code","631db971":"code","e396d372":"code","d0b613a8":"code","7b272fed":"code","6a04266c":"code","d86819d6":"code","c7bd3976":"markdown","19b4b022":"markdown","7e615a83":"markdown","a7b93cf1":"markdown","06546c24":"markdown","5e6a84e3":"markdown","a8788e15":"markdown","518d3de5":"markdown","93418041":"markdown","23e578ba":"markdown","fd2ffeba":"markdown","45a3766f":"markdown","63fa5a33":"markdown","e6775340":"markdown","0dff9439":"markdown","c44c434a":"markdown","3cc032c3":"markdown","3dcb1573":"markdown","0d5a7339":"markdown","f0a417eb":"markdown","5dbe77f2":"markdown","941ed0cf":"markdown","553d7dbc":"markdown","f5f42c39":"markdown","732b5868":"markdown","9f3259fa":"markdown","50e7a439":"markdown","11c79ed0":"markdown","fb68adfb":"markdown","76e7899f":"markdown","836c16ce":"markdown","4ad16cfa":"markdown","efa109c9":"markdown","944e3f92":"markdown","29a01536":"markdown","bee3c78a":"markdown","f44b2a37":"markdown","507173ef":"markdown"},"source":{"390c5c25":"import numpy as np\nimport pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup\nimport seaborn as sns\n%matplotlib inline\nimport plotly.express as px\nfrom datetime import date \nimport datetime\nimport shapefile as shp\nimport geopandas as gpd\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport warnings\nimport itertools\n\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n\n\nfrom wordcloud import WordCloud, ImageColorGenerator\n\nimport statsmodels.api as sm\n\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()","92de80cf":"#confirmed, recovered and deceased cases till Apr 19th.  \ncases_till_19Apr=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/raw_data1.csv')\n\n#confirmed, recovered and deceased cases from April 20th till Apr 26th.  \ncases_20Apr_to_26Apr=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/raw_data2.csv')\n\n# confirmed, recovered and deceased cases from April 27th till May 9th  \ncases_27Apr_to_9May=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/raw_data3.csv')\n\n# confirmed, recovered and deceased cases from May 10th till May 23rd  \ncases_10May_to_23May=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/raw_data4.csv')\n\n# confirmed, recovered and deceased cases from May 24th till June 4th \ncases_24May_to_4June=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/raw_data5.csv')\n\n#confirmed, recovered and deceased cases from April 20th till Apr 26th.  \ncases_5June_to_19June=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/raw_data6.csv')\n\n# confirmed, recovered and deceased cases from April 27th till May 9th  \ncases_20June_to_30June=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/raw_data7.csv')\n\n# confirmed, recovered and deceased cases from May 10th till May 23rd  \ncases_1July_to_7July=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/raw_data8.csv')\n\n# confirmed, recovered and deceased cases from May 24th till June 4th \ncases_8July_to_13July=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/raw_data9.csv')\n\n# confirmed, recovered and deceased cases from May 10th till May 23rd  \ncases_14July_to_17July=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/raw_data10.csv')\n\n# confirmed, recovered and deceased cases from May 24th till June 4th \ncases_18July_to_22July=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/raw_data11.csv')\n\n# confirmed, recovered and deceased cases from July 23rd onwards\ncases_23July_onwards=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/raw_data12.csv')\n\n#Frozen as of Apr 26th.  \ndeath_and_recovered_till_26Apr=pd.read_csv('..\/input\/covid-23-june\/death_and_recovered_till_26Apr.csv')\n\n#The current statewise situation  \nstate_wise=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/state_wise.csv')\n\n#Time series of Confirmed, Recovered and Deceased cases  \ncase_time_series=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/case_time_series.csv')\n\n#The current Districtwise numbers situation  \ndistrict_wise=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/district_wise.csv')\n\n#Statewise timeseries of Confirmed, Recovered and Deceased numbers.  \nstate_wise_daily=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/state_wise_daily.csv')\n\n#Number of tests conducted by the state, ventilators and hospital bed information reported in state bulletins  \nstatewise_tested_numbers_data=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/statewise_tested_numbers_data.csv')\n\n#Number of tests reported by ICMR  \ntested_numbers_icmr_data=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/tested_numbers_icmr_data.csv')\n\n#List of sources. Some links mentioned could break as states change their reporting location  \nsources_list=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/sources_list.csv')\n\n#Travel history of patients,. It is static data and not updated anymore.  \ntravel_history=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/travel_history.csv')\n\n#Global Deaths\nglobal_deaths = pd.read_csv('..\/input\/covid-23-june\/global_deaths .csv')\n\n#World Population\nWorld_population = pd.read_csv('..\/input\/covid-23-june\/population_by_country_2020.csv')","491557b4":"#Removing non relevant columns and to make the datasets consistent\n\ncases_till_19Apr.drop(['Patient Number','Backup Notes', 'Estimated Onset Date'], axis=1, inplace=True)\ncases_20Apr_to_26Apr.drop(['Patient Number','Backup Notes', 'Estimated Onset Date'], axis=1, inplace=True)\ncases_27Apr_to_9May.drop(['Entry_ID', 'Patient Number'], axis=1, inplace=True)\ncases_10May_to_23May.drop(['Entry_ID','Patient Number'], axis=1, inplace=True)\ncases_24May_to_4June.drop(['Entry_ID','Patient Number'], axis=1, inplace=True)\ncases_5June_to_19June.drop(['Entry_ID','Patient Number'], axis=1, inplace=True)\ncases_20June_to_30June.drop(['Entry_ID','Patient Number'], axis=1, inplace=True)\ncases_1July_to_7July.drop(['Entry_ID','Patient Number'], axis=1, inplace=True)\ncases_8July_to_13July.drop(['Entry_ID','Patient Number'], axis=1, inplace=True)\ncases_14July_to_17July.drop(['Entry_ID','Patient Number'], axis=1, inplace=True)\ncases_18July_to_22July.drop(['Entry_ID','Patient Number'], axis=1, inplace=True)\ncases_23July_onwards.drop(['Entry_ID','Patient Number'], axis=1, inplace=True)\n\nstate_wise.drop(['State_Notes'], axis=1, inplace=True)\ndistrict_wise.drop(['SlNo','District_Notes','Last_Updated'], axis=1, inplace=True)\ntravel_history.drop([' ','lat_long','Accuracy_Location','Type'], axis=1, inplace=True)","1a66b652":"#Renaming columns to match the datasets for merge\ncases_till_19Apr.rename(columns={'Num cases': 'Num Cases'}, inplace=True)\ncases_20Apr_to_26Apr.rename(columns={'Num cases': 'Num Cases'}, inplace=True)\n\n\n#Reordering column to match data for total cases reported.\ncases_till_19Apr=cases_till_19Apr[['State Patient Number',\n'Date Announced',\n'Age Bracket',\n'Gender',\n'Detected City',\n'Detected District',\n'Detected State',\n'State code',\n'Num Cases',\n'Current Status',\n'Contracted from which Patient (Suspected)',\n'Notes',\n'Source_1',\n'Source_2',\n'Source_3',\n'Nationality',\n'Type of transmission',\n'Status Change Date'\n]]\n\ncases_20Apr_to_26Apr=cases_20Apr_to_26Apr[['State Patient Number',\n'Date Announced',\n'Age Bracket',\n'Gender',\n'Detected City',\n'Detected District',\n'Detected State',\n'State code',\n'Num Cases',\n'Current Status',\n'Contracted from which Patient (Suspected)',\n'Notes',\n'Source_1',\n'Source_2',\n'Source_3',\n'Nationality',\n'Type of transmission',\n'Status Change Date'\n]]","af5db634":"total_cases=pd.concat([cases_till_19Apr,\ncases_20Apr_to_26Apr,\ncases_27Apr_to_9May,\ncases_10May_to_23May,\ncases_24May_to_4June,\ncases_5June_to_19June,\ncases_20June_to_30June,\ncases_1July_to_7July,\ncases_8July_to_13July,\ncases_14July_to_17July,\ncases_18July_to_22July,\ncases_23July_onwards])\ntotal_cases.info()\n#Selecting columns with more than 70% data in the column.\n\ntotal_cases=total_cases[['State Patient Number','Date Announced','Detected District','Detected State','State code','Current Status','Num Cases', 'Source_1','Source_2','Source_3']]\ntotal_cases.head(5)","fd869569":"global_deaths.rename(columns={global_deaths.columns[-1]: 'Today'}, inplace=True)\nglobal_deaths_orginal=global_deaths\nglobal_deaths.drop(['Province\/State','Lat','Long'], axis=1,inplace=True)\nglobal_deaths=pd.concat([global_deaths.iloc[1:,:].nlargest(5, 'Today'),global_deaths[global_deaths['Country\/Region']=='India']])\nglobal_deaths","7e3119ef":"global_deaths=global_deaths.transpose()\nglobal_deaths.reset_index(level=0, inplace=True)\nglobal_deaths.columns = global_deaths.iloc[0]\nglobal_deaths.drop(global_deaths.index[0], inplace=True)\nglobal_deaths.rename(columns={global_deaths.columns[0]: 'Date'}, inplace=True)\nglobal_deaths.head()","2582e890":"plt.figure(figsize=(8,8))\nplt.plot(global_deaths.index,global_deaths['US'], label = 'US')\nplt.plot(global_deaths.index,global_deaths['United Kingdom'], label = 'United Kingdom')\nplt.plot(global_deaths.index,global_deaths['Italy'], label = 'Italy')\nplt.plot(global_deaths.index,global_deaths['France'], label = 'France')\nplt.plot(global_deaths.index,global_deaths['Brazil'], label = 'Brazil')\nplt.plot(global_deaths.index,global_deaths['India'], label = 'India')\nplt.title('Number of Coronavirus Deaths')\nplt.xlabel('Days')\nplt.ylabel('Number of deaths')\nplt.legend()\nplt.grid(zorder = 0)\nplt.show()","4cb460ed":"#Global Deaths\nglobal_deaths_current=global_deaths_orginal.iloc[:,[-10,-9,-8,-7,-6,-5,-4,-3,-2,-1]].groupby(global_deaths_orginal['Country\/Region']).sum()\nglobal_deaths_current.reset_index(level=0, inplace=True)\nglobal_deaths_current.columns=['Country','Day 1','Day 2','Day 3','Day 4','Day 5','Day 6','Day 7','Day 8','Day 9','Day 10']","dd4e32b3":"global_deaths_current.sort_values(['Day 10'],ascending=False, inplace=True)\nglobal_deaths_current.head()","f0fc3cbf":"\nWorld_Population=World_population[['Country (or dependency)','Population (2020)']]\nWorld_Population.columns=['Country','Population(in millions)']\nWorld_Population['Population(in millions)']=World_Population['Population(in millions)']\/1000000","8403bc02":"global_deaths_current.replace('US','United States', inplace=True)\nglobal_deaths_current=pd.merge(global_deaths_current, World_Population, on='Country', how='inner')\nglobal_deaths_current.head()","27556991":"global_deaths_current_per_million=global_deaths_current\nglobal_deaths_current_per_million['Day 1']=round((global_deaths_current_per_million['Day 1']\/global_deaths_current_per_million['Population(in millions)']),2)\nglobal_deaths_current_per_million['Day 2']=round((global_deaths_current_per_million['Day 2']\/global_deaths_current_per_million['Population(in millions)']),2)\nglobal_deaths_current_per_million['Day 3']=round((global_deaths_current_per_million['Day 3']\/global_deaths_current_per_million['Population(in millions)']),2)\nglobal_deaths_current_per_million['Day 4']=round((global_deaths_current_per_million['Day 4']\/global_deaths_current_per_million['Population(in millions)']),2)\nglobal_deaths_current_per_million['Day 5']=round((global_deaths_current_per_million['Day 5']\/global_deaths_current_per_million['Population(in millions)']),2)\nglobal_deaths_current_per_million['Day 6']=round((global_deaths_current_per_million['Day 6']\/global_deaths_current_per_million['Population(in millions)']),2)\nglobal_deaths_current_per_million['Day 7']=round((global_deaths_current_per_million['Day 7']\/global_deaths_current_per_million['Population(in millions)']),2)\nglobal_deaths_current_per_million['Day 8']=round((global_deaths_current_per_million['Day 8']\/global_deaths_current_per_million['Population(in millions)']),2)\nglobal_deaths_current_per_million['Day 9']=round((global_deaths_current_per_million['Day 9']\/global_deaths_current_per_million['Population(in millions)']),2)\nglobal_deaths_current_per_million['Day 10']=round((global_deaths_current_per_million['Day 10']\/global_deaths_current_per_million['Population(in millions)']),2)\nglobal_deaths_current_per_million.drop(['Population(in millions)'], axis=1, inplace=True)","b5b1cc06":"global_deaths_current_per_million=global_deaths_current_per_million.head(10)","074cff37":"#update labels\n\nplt.figure(figsize=(8,8))\nplt.scatter(global_deaths_current_per_million['Day 1'],global_deaths_current_per_million['Country'], label = 'Day 1')\nplt.scatter(global_deaths_current_per_million['Day 6'],global_deaths_current_per_million['Country'], label = 'Day 6')\nplt.scatter(global_deaths_current_per_million['Day 10'],global_deaths_current_per_million['Country'], label = 'Today')\nplt.legend()\nplt.title(\"Death Rate per Million in Hotspot Countries\");\nplt.xlabel('Death Rate per Million');","b15562a5":"\nglobal_deaths_current_per_million=global_deaths_current_per_million.transpose()\nglobal_deaths_current_per_million.reset_index(level=0, inplace=True)\nglobal_deaths_current_per_million.columns = global_deaths_current_per_million.iloc[0]\nglobal_deaths_current_per_million.drop(global_deaths_current_per_million.index[0], inplace=True)\nglobal_deaths_current_per_million.head()\n","72fb52ee":"plt.figure(figsize=(8,8))\nplt.plot('Country', 'United States',linewidth = 3,data=global_deaths_current_per_million)\nplt.plot('Country', 'United Kingdom',data=global_deaths_current_per_million)\nplt.plot('Country', 'Italy',data=global_deaths_current_per_million)\nplt.plot('Country', 'France',data=global_deaths_current_per_million)\nplt.plot('Country', 'Spain',data=global_deaths_current_per_million)\nplt.plot('Country', 'India',data=global_deaths_current_per_million)\nplt.xlabel('Dates')\nplt.ylabel('Total Cases')\nplt.title(\"Cases Trend\")\nplt.xticks(rotation=90)\nplt.legend(loc='lower right', bbox_to_anchor=(1.3,0.7))","8943a943":"plt.figure(figsize=(8,8))\nplt.plot(case_time_series.index,'Total Confirmed',data=case_time_series)\nplt.plot(case_time_series.index,'Total Recovered',data=case_time_series)\nplt.plot(case_time_series.index,'Total Deceased',data=case_time_series)\nplt.xlabel('Since 22 January')\nplt.ylabel('Number of Cases')\nplt.title(\"Total Cases Trend\")\nplt.xticks(rotation=90)\nplt.legend()\nplt.show()","9523fe20":"#opening the shape file\nshp_path = '..\/input\/ind-adm\/IND_adm1.shp'\n\n#reading the shape file by using reader function of the shape lib\nmap_df = gpd.read_file(shp_path)\n\nmap_df.head()\n#map_df.plot()","508b0ca4":"state_wise.reset_index(level=0, inplace=True)\nstate_wise1=state_wise[['State','Confirmed','Active']]\nstate_wise1=state_wise.loc[1:,:]\nstate_wise.loc[state_wise['State'] == 'Odisha', ['State']] = 'Orissa'\nstate_wise1.sort_values(by=['State'], inplace=True)\nmerged=pd.merge(map_df, state_wise1, left_on='NAME_1', right_on='State')","c8b4e36b":"merged = merged[merged['Active'].notna()]\n# set a variable that will call whatever column we want to visualise on the map\nvariable = merged['Active']\n# set the range for the choropleth\nvmin, vmax = 120, 220\n# create figure and axes for Matplotlib\n#fig, ax = plt.subplots(1, figsize=(10, 6))\n\nax=merged.plot(column=variable, cmap='gist_heat_r', linewidth=0.8, edgecolor='0.8', figsize=(10,10), legend=True)\nax.axis('off')\n\n# add a title\nax.set_title('Active cases in India', fontdict={'fontsize': '25', 'fontweight' : '3'})\n# create an annotation for the data source\nax.annotate('Source: https:\/\/api.covid19india.org',xy=(0.1, .08),  xycoords='figure fraction', horizontalalignment='left', verticalalignment='bottom', fontsize=12, color='#555555')","f4dac2b2":"case_time_series.head(1)","5a43c06d":"case_time_series['Date']=case_time_series['Date'] + \" 2020\"\ncase_time_series['Date']=pd.to_datetime(case_time_series['Date'], format='%d %B %Y')\ncases_last_10_days=case_time_series[case_time_series['Date'] >= (pd.to_datetime(date.today()) - pd.Timedelta(days=10))]","38b9665a":"plt.figure(figsize=(8,8))\nplt.plot('Date','Daily Confirmed',data=cases_last_10_days)\nplt.plot('Date','Daily Recovered',data=cases_last_10_days)\nplt.plot('Date','Daily Deceased',data=cases_last_10_days)\nplt.xlabel('Dates')\nplt.ylabel('Number of Cases')\nplt.title(\"Daily Cases Trend\")\nplt.xticks(rotation=90)\nplt.legend()\nplt.show()","4c4d9ac5":"state_wise.sort_values(by=['Confirmed'], inplace=True, ascending=False)\nstate_wise.drop(state_wise[state_wise['State'] == 'State Unassigned'].index, inplace=True)\nstate_wise.head()","7d5dcd1e":"state_wise_pie=state_wise[['State','Confirmed','Recovered','Deaths','Active']].head(1)\nstate_wise_pie=state_wise_pie.transpose()\nstate_wise_pie.reset_index(inplace = True) \nstate_wise_pie=state_wise_pie.loc[2:,:]\nstate_wise_pie.columns=['State of Patient','Number of Cases']","a138bf63":"state_wise_pie","62f88b41":"fig = px.pie(state_wise_pie,\n             values='Number of Cases',\n             names=\"State of Patient\",\n             title=\"Coronavirus Cases\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","755639e4":"state_wise=state_wise.set_index('State')\nplt.figure(figsize=(15,8))\nsns.heatmap(state_wise.iloc[1:11,1:5], annot=True, linewidths=2, fmt='g')","3c7cbedf":"#Number of tests reported by ICMR  \ntested_numbers_icmr_data=pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/tested_numbers_icmr_data.csv')\ntested_numbers_icmr_data=tested_numbers_icmr_data.dropna(subset=['Total Samples Tested'])\n\nnew = tested_numbers_icmr_data[\"Update Time Stamp\"].str.split(\" \", n = 1, expand = True) \ntested_numbers_icmr_data['Date']=new[0]\ntested_numbers_icmr_data.drop(\"Update Time Stamp\", axis=1, inplace=True)\ntested_numbers_icmr_data['Date']= pd.to_datetime(tested_numbers_icmr_data['Date']) \ntested_numbers_icmr_data['Date'] = tested_numbers_icmr_data['Date'].dt.strftime('%d-%m-%Y')","266c18e4":"tested_numbers_icmr_data_graph=tested_numbers_icmr_data.groupby('Date').sum()\ntested_numbers_icmr_data_graph.reset_index(level=0, inplace=True)\ntested_numbers_icmr_data_graph['Date']= pd.to_datetime(tested_numbers_icmr_data_graph['Date']) \ntested_numbers_icmr_data_graph.sort_values(by=['Date'], inplace=True)\ntested_numbers_icmr_data_graph=tested_numbers_icmr_data_graph.tail(20)\ntested_numbers_icmr_data_graph.head()","7434cdab":"fig=px.bar(tested_numbers_icmr_data_graph, y='Total Samples Tested', x='Date')    \nfig.update_layout(title_text='Total Testing(per ICMR Data)', title_x=0.5, font=dict(\n        family=\"Classic\",\n        size=18,\n        color=\"#7f7f7f\"))\nfig.show()","e073476a":"statewise_tested_numbers_data1=pd.DataFrame(statewise_tested_numbers_data['Total Tested'].groupby(statewise_tested_numbers_data['State']).sum())\nstatewise_tested_numbers_data1.reset_index(level=0, inplace=True)\nstatewise_tested_numbers_data1.sort_values(by=['Total Tested'], inplace=True, ascending=False)","1c2720b7":"plt.figure(figsize=(8,8))\n#my_colors = ['#66b3ff','green','red']\nstatewise_tested_numbers_data['Total Tested'].groupby(statewise_tested_numbers_data.State).sum()\nplt.pie('Total Tested',labels= 'State', autopct='%1.1f%%'#,colors=my_colors\n        ,data=statewise_tested_numbers_data1.head(15))\nplt.axis('equal')\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\nplt.title('Percentage of testing in top 15 States\\n', size=20)\nplt.show()","ef56c5d0":"case_time_series['Daily Growth factor']=0.0\ncase_time_series['Daily Growth factor']=case_time_series['Daily Growth factor'].astype(float)\nfor i in range(len(case_time_series)-1):\n    if(case_time_series.at[i,'Daily Confirmed']!=0):\n        case_time_series.at[i+1,'Daily Growth factor']=np.nan_to_num(case_time_series.at[i+1,'Daily Confirmed']\/case_time_series.at[i,'Daily Confirmed'])\n    else:\n        case_time_series.at[i+1,'Daily Growth factor']=0.0\n\ncase_time_series.at[len(case_time_series)-1,'Daily Growth factor']=1.0","1af1363a":"First_lock_down = case_time_series.loc[(case_time_series['Date']>'2020-03-24') & (case_time_series['Date']<'2020-04-15')]\nSecond_lock_down = case_time_series.loc[(case_time_series['Date']>'2020-04-14') & (case_time_series['Date']<'2020-05-04')]\nThird_lock_down = case_time_series.loc[(case_time_series['Date']>'2020-05-03') & (case_time_series['Date']<'2020-05-18')]\nFourth_lock_down = case_time_series.loc[(case_time_series['Date']>'2020-05-17') & (case_time_series['Date']<'2020-06-01')]\nFirst_unlock = case_time_series.loc[(case_time_series['Date']>'2020-05-31')]","f962bc7f":"First_lock_down_gf=round(sum(First_lock_down['Daily Growth factor'])\/len(First_lock_down),2)\nSecond_lock_down_gf = round(sum(Second_lock_down['Daily Growth factor'])\/len(Second_lock_down),2)\nThird_lock_down_gf = round(sum(Third_lock_down['Daily Growth factor'])\/len(Third_lock_down),2)\nFourth_lock_down_gf = round(sum(Fourth_lock_down['Daily Growth factor'])\/len(Fourth_lock_down),2)\nFirst_unlock_gf = round(sum(First_unlock['Daily Growth factor'])\/len(First_unlock),2)","c0e336ac":"Growth=pd.DataFrame(columns=['Lockdown_num','Growth Factor'])\nGrowth['Growth Factor']=Growth['Growth Factor'].astype('float')\n\nGrowth.loc[0,:]=['First lock down',First_lock_down_gf]\nGrowth.loc[1,:]=['Second lock down',Second_lock_down_gf]\nGrowth.loc[2,:]=['Third lock down',Third_lock_down_gf]\nGrowth.loc[3,:]=['Fourth lock down',Fourth_lock_down_gf]\nGrowth.loc[4,:]=['First unlock',First_unlock_gf]","da770c77":"fig = px.line(Growth, x=\"Lockdown_num\", y=\"Growth Factor\",title='Growth Factor from 14th March onwards',\n              labels=dict(Lockdown_num=\"Lockdown Number\"), template=\"plotly_dark\")\nfig.show()","8e998fc4":"state_wise_daily.drop(['TT','DD','TT','UN'],axis=1, inplace=True)\nstate_wise_daily.columns=['Date','Status','Andaman and Nicobar Islands',\n'Andhra Pradesh',\n'Arunachal Pradesh',\n'Assam',\n'Bihar',\n'Chandigarh',\n'Chhattisgarh',\n'Dadra and Nagar Haveli and Daman and Diu',\n'Delhi',\n'Goa',\n'Gujarat',\n'Haryana',\n'Himachal Pradesh',\n'Jammu and Kashmir',\n'Jharkhand',\n'Karnataka',\n'Kerala',\n'Ladakh',\n'Lakshadweep',\n'Madhya Pradesh',\n'Maharashtra',\n'Manipur',\n'Meghalaya',\n'Mizoram',\n'Nagaland',\n'Odisha',\n'Puducherry',\n'Punjab',\n'Rajasthan',\n'Sikkim',\n'Tamil Nadu',\n'Telangana',\n'Tripura',\n'Uttar Pradesh',\n'Uttarakhand',\n'West Bengal'\n]","985d0f09":"state_wise_daily_latest=state_wise_daily[state_wise_daily['Status']=='Confirmed'].tail(1).transpose().iloc[2:,:]\nstate_wise_daily_latest.columns=['Total']\n#state_wise_daily_latest=state_wise_daily_latest.sort_values(by='Total', inplace=True, ascending=False)\n\nstate_wise_daily_latest=state_wise_daily_latest.sort_values(by='Total', ascending=False).head(6)\nstate_wise_daily_latest","e418983b":"col=state_wise_daily_latest.index[:]\ncol=col.insert(6, 'Date') \nstate_wise_daily[state_wise_daily['Status']=='Confirmed'][col]","aa01e666":"state_wise_daily_growth=state_wise_daily[state_wise_daily['Status']=='Confirmed'][col]\nstate_wise_daily_growth.reset_index(inplace=True)\nstate_wise_daily_growth.drop(['index'],axis=1,inplace=True)","8862b832":"state_wise_daily_growth[col[0]+'_gf']=0.0\nstate_wise_daily_growth[col[1]+'_gf']=0.0\nstate_wise_daily_growth[col[2]+'_gf']=0.0\nstate_wise_daily_growth[col[3]+'_gf']=0.0\nstate_wise_daily_growth[col[4]+'_gf']=0.0\nstate_wise_daily_growth[col[5]+'_gf']=0.0","e8568cd9":"for i in range(1,len(state_wise_daily_growth)):\n    state_wise_daily_growth.at[i,col[0]+'_gf']=(state_wise_daily_growth.at[i,col[0]]\/state_wise_daily_growth.at[i-1,col[0]])\n    state_wise_daily_growth.at[i,col[1]+'_gf']=(state_wise_daily_growth.at[i,col[1]]\/state_wise_daily_growth.at[i-1,col[1]])\n    state_wise_daily_growth.at[i,col[2]+'_gf']=(state_wise_daily_growth.at[i,col[2]]\/state_wise_daily_growth.at[i-1,col[2]])\n    state_wise_daily_growth.at[i,col[3]+'_gf']=(state_wise_daily_growth.at[i,col[3]]\/state_wise_daily_growth.at[i-1,col[3]])\n    state_wise_daily_growth.at[i,col[4]+'_gf']=(state_wise_daily_growth.at[i,col[4]]\/state_wise_daily_growth.at[i-1,col[4]])\n    state_wise_daily_growth.at[i,col[5]+'_gf']=(state_wise_daily_growth.at[i,col[5]]\/state_wise_daily_growth.at[i-1,col[5]])","b13de192":"state_wise_daily_growth.replace(np.nan,0.00, inplace=True)\nstate_wise_daily_growth.replace(np.inf,0.00, inplace=True)\nstate_wise_daily_growth=state_wise_daily_growth.tail(45)\nstate_wise_daily_growth.round(2)\nstate_wise_daily_growth.head(1)","a0e75b34":"fig = make_subplots(rows=2, cols=3,subplot_titles=(state_wise_daily_growth.columns[0],state_wise_daily_growth.columns[1],\n                                                   state_wise_daily_growth.columns[2],state_wise_daily_growth.columns[3],\n                                                   state_wise_daily_growth.columns[4],state_wise_daily_growth.columns[5]),\n                   )\nfig.append_trace(go.Scatter(x=state_wise_daily_growth[\"Date\"], y=state_wise_daily_growth[col[0]+'_gf'], fill='tozeroy'),row=1, col=1)\nfig.append_trace(go.Scatter(x=state_wise_daily_growth[\"Date\"], y=state_wise_daily_growth[col[1]+'_gf'], fill='tozeroy'),row=1, col=2)\nfig.append_trace(go.Scatter(x=state_wise_daily_growth[\"Date\"], y=state_wise_daily_growth[col[2]+'_gf'], fill='tozeroy'),row=1, col=3)\nfig.append_trace(go.Scatter(x=state_wise_daily_growth[\"Date\"], y=state_wise_daily_growth[col[3]+'_gf'], fill='tozeroy'),row=2, col=1)\nfig.append_trace(go.Scatter(x=state_wise_daily_growth[\"Date\"], y=state_wise_daily_growth[col[4]+'_gf'], fill='tozeroy'),row=2, col=2)\nfig.append_trace(go.Scatter(x=state_wise_daily_growth[\"Date\"], y=state_wise_daily_growth[col[5]+'_gf'], fill='tozeroy'),row=2, col=3)\n\nfig.update_layout(height=700, width=980,\n                  title_text=\"Daily Growth for top 6 States(last 45 Days)\",font=dict(\n        family=\"Serif\",\n        size=18,\n        color=\"#7f7f7f\"))\nfig.update_layout(showlegend=False)\nfig.show()","91f8502e":"case_time_series['Total Recovered\/Deceased']=case_time_series['Total Recovered']+case_time_series['Total Deceased']\ndata=case_time_series[['Date','Daily Confirmed','Total Confirmed','Total Recovered\/Deceased']]\n#confirm_cs = pd.DataFrame(data).cumsum()\narima_data = data.reset_index()\narima_data.columns = ['index','Date','Daily Confirmed','Total Confirmed','Total Recovered\/Deceased']","d543090c":"model = ARIMA(arima_data['Daily Confirmed'].values, order=(4,1,0))\nfit_model = model.fit(trend='c', full_output=True, disp=True)\nforecast=fit_model.forecast(steps=60)\npred = list(forecast[0])\n#fit_model.summary()","708a6e5c":"start_date = case_time_series['Date'].max()\nprediction_dates = []\nfor i in range(60):\n    date = start_date + datetime.timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date\nplt.figure(figsize= (15,10))\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Daily cases',fontsize = 20)\nplt.title(\"Predicted Values for the next 60 Days\" , fontsize = 20)\nplt.plot_date(y= pred,x= prediction_dates,linestyle ='dashed',color = '#ff9999',label = 'Predicted Daily Cases');\nplt.plot_date(y='Daily Confirmed',x='Date',linestyle = '-',color = 'blue',label = 'Actual Daily Cases', data=case_time_series.tail(30));\nplt.legend();","9ab39f5b":"model = ARIMA(arima_data['Total Confirmed'].values, order=(4,2,0))\nfit_model = model.fit(trend='c', full_output=True, disp=True)\nforecast=fit_model.forecast(steps=60)\npred = list(forecast[0])\n\n#fit_model.summary()","d21ef26f":"start_date = case_time_series['Date'].max()\nprediction_dates = []\nfor i in range(60):\n    date = start_date + datetime.timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date\nplt.figure(figsize= (15,10))\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total Confirmed Cases',fontsize = 20)\nplt.title(\"Predicted Values for the next 60 Days\" , fontsize = 20)\nplt.plot_date(y= pred,x= prediction_dates,linestyle ='dashed',color = '#ff9999',label = 'Predicted Confirmed Cases');\nplt.plot_date(y='Total Confirmed',x='Date',linestyle = '-',color = 'blue',label = 'Actual Confirmed Cases', data=case_time_series.tail(30));\nplt.legend();","047e6dd6":"forecast=fit_model.forecast(steps=280)\npred = list(forecast[0])","b5c840cf":"model = ARIMA(arima_data['Total Recovered\/Deceased'].values, order=(7,2,1))\nfit_model = model.fit(trend='c', full_output=True, disp=True)\nforecast=fit_model.forecast(steps=280)\npred1 = list(forecast[0])\n\nfit_model.summary()","631db971":"start_date = case_time_series['Date'].max()\nprediction_dates = []\nfor i in range(280):\n    date = start_date + datetime.timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date\nplt.figure(figsize= (15,10))\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total Cases',fontsize = 20)\nplt.title(\"Predicted Values for the next 280 Days\" , fontsize = 20)\nplt.plot_date(y='Total Confirmed',x='Date',linestyle = '-',color = 'Red',label = 'Actual Confirmed Cases', data=case_time_series);\nplt.plot_date(y= pred,x= prediction_dates,linestyle ='dashed',color = 'pink',label = 'Predicted Confirmed Cases');\nplt.plot_date(y='Total Recovered\/Deceased',x='Date',linestyle = '-',color = 'blue',label = 'Actual Recovery\/Deceased', data=case_time_series);\nplt.plot_date(y= pred1,x= prediction_dates,linestyle ='dashed',color = '#00BFFF',label = 'Predicted Recovery\/Deceased');\nplt.legend();","e396d372":"model = ARIMA(arima_data['Total Confirmed'].values, order=(4,2,0))\nfit_model = model.fit(trend='c', full_output=True, disp=True)\nforecast=fit_model.forecast(steps=365)\npred = list(forecast[0])","d0b613a8":"model = ARIMA(arima_data['Total Recovered\/Deceased'].values, order=(4,2,0))\nfit_model = model.fit(trend='c', full_output=True, disp=True)\nforecast=fit_model.forecast(steps=365)\npred1 = list(forecast[0])\n\n#fit_model.summary()","7b272fed":"start_date = case_time_series['Date'].max()\nprediction_dates = []\nfor i in range(365):\n    date = start_date + datetime.timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date\n    \npred_active=[]\nfor j in range(365):\n    pred_active.append(pred[j]-pred1[j])","6a04266c":"plt.figure(figsize= (15,10))\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total Cases',fontsize = 20)\nplt.title(\"Predicted Values for the next 1 Year\" , fontsize = 20)\nplt.plot_date(y='Total Confirmed',x='Date',color = 'Red',label = 'Actual Confirmed Cases', data=case_time_series);\nplt.plot_date(y= pred,x= prediction_dates,color = 'pink',label = 'Predicted Confirmed Cases');\nplt.plot_date(y='Total Recovered\/Deceased',x='Date',color = 'blue',label = 'Actual Recovery\/Deceased', data=case_time_series);\nplt.plot_date(y= pred1,x= prediction_dates,color = '#00BFFF',label = 'Predicted Recovery\/Deceased');\nplt.plot_date(y= pred_active,x= prediction_dates,color = 'black',label = 'Predicted Active Case');\nplt.legend();","d86819d6":"total_cases_new = pd.DataFrame(columns=['Source'])\n\ntotal_cases_new['Source'] = pd.concat([total_cases['Source_1'], total_cases['Source_2'], total_cases['Source_3']], ignore_index=True)\ntotal_cases_new.dropna(inplace=True)\n\nstrip_character1='\/'\ntotal_cases_new['Source1'] = total_cases_new['Source'].apply(lambda x: x.replace('www', ' ').replace('.in\/', ' ').replace(strip_character1, ' ').replace('com', ' ').replace('.', ' ').replace('\\'', ' ').split() [1:2])\n\ntext = \" \".join(str(each) for each in total_cases_new.Source1)\nwordcloud = WordCloud(#max_words=200,\n                      colormap='gist_earth_r', \n                      background_color=\"white\",min_font_size = 4).generate(text)\n#plt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.figure(figsize=(10, 10), facecolor = None)\nplt.tight_layout(pad = 0) \nplt.show()","c7bd3976":"<p style=\"font-size:14px; color:blue\"> We will try to understand the position of the India in global number of deaths.\n    In this analysis, We will consider the top 5 countries who have faced the maximum number of deaths.\n    <br><br>\n    This list fetches the real time numbers as per the code run time. <\/p> ","19b4b022":"<h1 style=\"font-size:5vw\" align='center'><b>Will COVID-19 end in INDIA ??<\/b><\/h1>","7e615a83":"In this final predictions, assuming that the vaccine do not come for next 1 year, we are trying to find out if the total cases and recovered cases will merge.<br><br>\nSadly, there is no merge and hence, the cases will not become 0 in the next 1 year based on current rate. I have also plotted the active cases in this graph to understand the predictions.<br><br>\nThis predictions is based on the Assumptions:<br>\n1.&nbsp; The growth rate do not change dramatically.<br>\n2.&nbsp; The recovered rate do not change dramatically.<br>\n3.&nbsp; No strict lockdown imposed in next 1 year.<br><br>","a7b93cf1":"<p style=\"font-size:14px; color:blue\"> The above graph has shown us the trend for the last 140 days. <br><br>\n    The number of cases and deaths can be related to the population of the country and hence, as next part of analysis, we will try to understand the death trend as per population of the countries.<br>\n    We will also try to analyze the graph movement for the last 10 days to detrmine the speed of the pandemic. ","06546c24":"<p style=\"font-size:14px; color:blue\">Per the previous graph, there are considerable number of Active cases in the country. Hence, with this heat map, we will try to understand the cases as per various category.<br><br><\/p>\n    \n<p style=\"font-size:14px; color:blue\">\nThis graph can be used for following analysis:<br>\n    &emsp;1. Number of cases in each state of patients.<br>\n    &emsp;2. Recovery rates in Top states. Eg: The recovered rate is high in Gujarat.<br>\n    &emsp;3. Deceased rates in Top states. Eg: The deceased rate is high in Gujarat.<\/p>","5e6a84e3":"<p style=\"font-size:14px; color:blue\">This graph is plotted for the Top 6 states in terms of cases growth rate in India. These are also the states which contributes the maximum daily case count. Therefore, if we can control the rate of cases growth in each state, we can control the overall pandemic.<\/p>","a8788e15":"1.&nbsp;&nbsp;[Import libraries\/data files](#section_id1)<br>\n2.&nbsp;&nbsp;[Global Death rate for Top countries](#section_id2)<br>\n3.&nbsp;&nbsp;[Global Death rate in last 10 days](#section_id3)<br>\n4.&nbsp;&nbsp;[Death trends per million population for India and Top 5 countries](#section_id5)<br>\n5.&nbsp;&nbsp;[The spread of COVID-19 in the India](#section_id6)<br>\n6.&nbsp;&nbsp;[Calculating Deaths per million](#section_id4)<br>\n7.&nbsp;&nbsp;[India Lockdown\/Unlock Impact](#section_id7)<br>\n8.&nbsp;&nbsp;[Growth Rates per states](#section_id8)<br>\n9.&nbsp;&nbsp;[Predicting Daily Cases](#section_id9)<br>\n10.&nbsp;[Predicting Daily Confirmed Cases](#section_id10)<br>\n11.&nbsp;[Prediction for next 1 year](#section_id11)<br>\n12.&nbsp;[Data Sources](#section_id12)<br>","518d3de5":"<a id='section_id11'><br><h2>Prediction for next 1 year<h2> <\/a>","93418041":"<a id='section_id7'><br><h2>India Lockdown\/Unlock Impact<\/h2><\/a>","23e578ba":"<h4> This prediction is based on the ARIMA model. <\/h4>\n<p style=\"font-size:14px; color:blue\"> ARIMA(Auto Regressive Integrated Moving Average) is a class of models that 'explains' a given time series based on its own past values, that is, its own lags and the lagged forecast errors, so that equation can be used to forecast future values","fd2ffeba":"<p style=\"font-size:14px; color:blue\">After analyzing the data, the data available in death_and_recovered_till_26Apr dataframe is incomplete and complete data till data can be obtained from cases dataset using current status column.<\/p>","45a3766f":"<h3>Content:<\/h3>","63fa5a33":"<a id='section_id1'><br><h2> Import libraries\/data files<\/h2><\/a>","e6775340":"<a href=\"https:\/\/en.wikipedia.org\/wiki\/Coronavirus\" target=\"_blank\">Source of information<\/a>","0dff9439":"<p style=\"font-size:14px; color:blue\">Phase 1: 25 March 2020 \u2013 14 April 2020 (21 days) <br>Phase 2: 15 April 2020 \u2013 3 May 2020 (19 days) <br>Phase 3: 4 May 2020 \u2013 17 May 2020 (14 days) <br>Phase 4: 18 May 2020 \u2013 31 May 2020 (14 days)<br>Unlock 1: 1 June 2020 - ongoing<\/p>","c44c434a":"<a id='section_id10'><br><h2>Predicting Daily Confirmed Cases based on the existing trend.<\/h2><\/a>","3cc032c3":"<a id='section_id4'><br><h2>Current State of Patient<\/h2><\/a>","3dcb1573":"<p style=\"font-size:14px; color:blue\"> Till now, we have analyzed the the rate of growth for active cases is almost constant over the last few months. Now, it's time to understand the trend in last 10 days. <br>As this pandemic spreads really fast, the strategies to control it should be reviewed every few days by analyzing the trend.<br><br><\/p>\n    \n<p style=\"font-size:14px; color:blue\">\nWe can notice few deviations in the graph. This can be due to 2 factors:<br>\n&emsp;1.&nbsp;The increase is not constant. <br>\n&emsp; &emsp; OR<br>\n&emsp;2.&nbsp;The manual entries into the system are not real time and delayed;sometimes even by few days. Eg: Multiple states added major pending death counts on \n    &emsp; &nbsp; &nbsp; 16th of June.<\/p>","0d5a7339":"<p style=\"font-size:14px; color:blue\">We have discussed the testing trend and how it is an important factor. Now we will analyze the second most important cure for this pandemic iz. SOCIAL DISTANCING. <br><\/p>\n\n<p style=\"font-size:14px; color:blue\">\n    The country with the second largest population in the World can only implement social distancing by LOCKDOWN. As we have practically experienced, that even when the first lockdown was difficult for people to mend their habits and take a hit in their business, people learnt overtime. However,with the latest unlock, the growth is increasing.<br><\/p>\n \n<p style=\"font-size:14px; color:blue\">\n    These numbers might looks small but just multiple it with atleast 10000 and you will understand the impact. As we have moved into Unlock 1, the numbers are growing at the pace of 0.96 daily.<br><\/p>\n    \n<p style=\"font-size:14px; color:blue\">    \n    Also, point to be noted is it is not only a difference of 0.13(lockdown1) and 0.08(Unlock1), it makes a bigger impact when it is multiplied with the previous day count. <br>\neg: During lockdown 1, 0.13*4000(average increase)=520 cases per day but in unlock 1, 0.08*12000(average increase)=960<br>\nAs it is evident that even after the lower growth rate, this rate is more dangerous because it is adding more number of cases. Also, the growth factor is increasing day by day.<br>\n\n<p style=\"font-size:14px; color:blue\">\nNow, it is very important to control the growth rate. The overall rate can only be controlled if the state level rates are controlled.<\/p>","f0a417eb":"<p style=\"font-size:14px; color:blue\">There are various sources of data used in this predictions. Few of them are:<br>\n    1. api.covid19india.org<br>\n    2. raw.githubusercontent.com\/CSSEGISandData <br>\n    3. https:\/\/www.worldometers.info\/world-population\/population-by-country\/ <br>\n    These websites have various sources of data. The weightages of each source is as per the size of the text in the below   World cloud.<\/p>","5dbe77f2":"<p style=\"font-size:14px; color:blue\"> We will first try to understand the trend which we couldn't understand in the previous graph due to incomparable range of data.<br>\n    In this graph, I have plotted the trend graph, for the last 140 days (22nd January onwards). This indicates how the confirmed, recovered and deceased cases have grown up in last few months.<\/p>","941ed0cf":"<a id='section_id5'><br><h2>Understanding the death trends per million population for India and Top 5 countries<\/h2><\/a>","553d7dbc":"<a id='section_id3'><br><h2>Understanding the Global Death rate in last 10 days.<\/h2><\/a>","f5f42c39":"<p style=\"font-size:14px; color:blue\">The legend indicates darker the color, the more number of active cases in the states.<br>\n    &emsp; I have plotted the number of active cases on the graph instead of confirmed cases to eliminate the recovered factor from the analysis. This also eliminates the state to be in darker color which have better recovery rates.<br><br>\n    &emsp; As it is clearly visible:<br>\n    &emsp; <b>Worst affected States <\/b>are:<br>\n    &emsp;&emsp;1.&nbsp; Maharastra<br>\n    &emsp;&emsp;2.&nbsp; Delhi<br>\n    &emsp;&emsp;3.&nbsp; Tamil Nadu<br>\n    &emsp; <b>Medium affected States<\/b> are:<br>\n    &emsp;&emsp;1.&nbsp; Gujarat<br>\n    &emsp;&emsp;2.&nbsp; Uttar Pradesh<br>\n    &emsp;&emsp;3.&nbsp; West Bengal<br>\n<\/p>","732b5868":"<p style=\"font-size:14px; color:blue\"> As per the studies, it is evident that the coronavirus virus can be controlled by 2 ways:<br>\n    &emsp;1.&nbsp;More Testing<br>\n    &emsp;2.&nbsp;Social Distancing<br><br>\nFirst, we will analyze the testing which is going on in the country based on Indian Council of Medical Research(ICMR) data.<br><br>\nThe graph shows the numbers in millions. There is a steady increase in the number of testing on daily basis. These numbers are an aggregate overview of the increament. We need to analyze this data at more granual level i.e at state level.  <\/p>\n    ","9f3259fa":"<h4> Predicting the daily cases\/ confirmed cases only indicates the increment rate. However this will not help us to stop the pandemic. <br><br> There are 3 solutions to this pandemic:<br><br>\n    &emsp;1.&nbsp;Vaccination. - Many countries are working on it. However, we do not have any expected timeline for it.<br><br>\n    &emsp;2.&nbsp;Adjusting to new normal of social distancing, masks, sanitizer etc. -People are adjusting to it.This will only limit the spread but will not finish it.<br><br>\n     &emsp;3.&nbsp;The recovery+deceased rates should be more than cases growth rate. - This is the area of focus for us.<br><br>\nWe have plotted the predictions based on ARIMA model for confirmed cases and recovered\/deceased cases for the next 280 days.<br><br> In the analysis, there is NO MERGE in the predictions and with the current growth rate, CORONA cases will not finish in next 280 days.<\/h4>","50e7a439":"<a id='section_id2'><br><h2>Global Death rate for Top 5 countries and India.<\/h2><\/a>","11c79ed0":"<h3>Understanding the Coronaviruses<\/h3>","fb68adfb":"<a id='section_id8'><br><h2>Growth Rates per states<\/h2><\/a>","76e7899f":"Coronaviruses are a group of related RNA viruses that cause diseases in mammals and birds. In humans, these viruses cause respiratory tract infections that can range from mild to lethal. Mild illnesses include some cases of the common cold (which is also caused by other viruses, predominantly rhinoviruses), while more lethal varieties can cause SARS, MERS, and COVID-19. Symptoms in other species vary: in chickens, they cause an upper respiratory tract disease, while in cows and pigs they cause diarrhea. For now, there are no vaccines or antiviral drugs to prevent or treat human coronavirus infections.","836c16ce":"<p style=\"font-size:14px; color:blue\">The graph is based on the total testings being done till date.<br><br>\nAs per the shown numbers the top 2 states in terms of testing which are also in top slots for the number of cases are:<br>\n    &emsp;1. &nbsp;Maharashtra<br>\n    &emsp;2. &nbsp;Tamil Nadu<br><\/p>\n<p style=\"font-size:14px; color:blue\">\nThese numbers are also dependent on the size of the population and hence should be analyzed with that factor in mind.<br>\nEg: 1. Delhi has small size and population as compared to Maharastra and hence direct comparison of numbers should not be the only criteria.<br>\n    2. Uttar Pradesh is a bigger state and population. The testing percentage looks pretty less when compared with other similar size states.<\/p>","4ad16cfa":"<a id='section_id12'><br><h2>Data Sources:<\/h2><\/a>","efa109c9":"<a id='section_id6'><br><h2>Understanding the spread of COVID-19 in the country<\/h2><\/a>","944e3f92":"<p style=\"font-size:14px\">Below graph demonstrate that the <b>number of deaths in India<\/b> are less as \ncompared to top 6 countries in the world.<br><br>\nHowever, there are 2 major observations for India:<br>\n    1. The number of deaths are increasing is at fast pace in last 20 days.<br>\n    2. The graph curve is no more near to flattening like France and Italy.<\/p>","29a01536":"<a id='section_id9'><br><h2>Predicting Daily Cases based on the existing trend.<\/h2><\/a>","bee3c78a":"[![corona.jpg](attachment:corona.jpg)]","f44b2a37":"<p style=\"font-size:14px; color:blue\">Below graph is to showcase the trend in the last 10 days:<br><br>\n    &emsp; For India, the number of deaths per day for last 10 days looks constant. However, this needs deeper analysis, because in this graph we are comparing the numbers againest countries with very high numbers. So, the curve can be constant or with a constant increase.<br><br>\n    &emsp; I have also tried to generate this graph with normalized numbers for relative study. However, normalized graph is also not enough to conclude any observations for the country.<\/p>\n    ","507173ef":"<p style=\"font-size:14px; color:blue\"> In order to enhance readability and avoid confusion, I have plotted 3 days death count for the countries relative to their population.<br><br><\/p>\n    <p style=\"font-size:14px; color:blue\"> The observations for India are:<br><p style=\"font-size:14px; color:blue\"> \n        1. The rate of increase in deaths is less as compared to other countries.<br>\n        2. The number of deaths per 5 days seems to be constant or less variant.<\/p>"}}