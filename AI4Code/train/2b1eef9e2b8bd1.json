{"cell_type":{"a5806031":"code","2cf8140f":"code","b03fc62c":"code","ff60b746":"code","da98882f":"code","9bce975e":"code","f18e2b0f":"code","e080bf0f":"code","22cb4870":"code","e7a3421f":"code","51a2079f":"code","18dd1231":"code","de83a54e":"markdown","22f9cf8f":"markdown","a3bb8214":"markdown","359981a2":"markdown","458ec67d":"markdown","cf215725":"markdown","ee444182":"markdown"},"source":{"a5806031":"\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\nimport random\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2cf8140f":"data = pd.read_csv('\/kaggle\/input\/accidentsbcn\/ACCIDENTS_GU_BCN_2013.csv', encoding = \"ISO-8859-1\")\ndata['Date'] = data[u'Dia de mes'].apply(lambda x: str(x)) + '-' + data[u'Mes de any'].apply(lambda x: str(x)) #\u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0434\u0435\u043d\u044c-\u043c\u0435\u0441\u044f\u0446(\u0433\u0434\u0435-\u0442\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u043b\u0443\u0447\u0430\u0439)\naccidents = data.groupby(['Date']).size()#\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u0442\nprint(accidents.mean())#\u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435","b03fc62c":"df = accidents.to_frame() #\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442 \u0432 \u0434\u0430\u0442\u0430-\u0444\u0440\u0435\u0439\u043c\nN_test = 10000\nelements = 200\n# mean array of samples\n# mean array of samples\nmeans = [0] * N_test\n# sample generation\nfor i in range (N_test):\n     rows = np.random.choice(df.index.values , elements)\n     sampled_df = df.loc[rows]\n     means[i] = sampled_df.mean()\n","ff60b746":"rows = np.random.choice(df.index. values , 200)\nsampled_df = df.loc[rows]\nest_sigma_mean = sampled_df.std()\/ math.sqrt(200)\nprint('Direct estimation of SE from one sample of 200 elements:', est_sigma_mean[0])\nprint('Estimation of the SE by simulating 10000 samples of 200 elements:', np.array(means).std())","da98882f":"def meanBootstrap(X, numberb):\n    x = [0]* numberb\n    for i in range (numberb):\n        sample = [X[j]\n            for j in np.random.randint(len(X), size=len(X))]\n        x[i] = np.mean(sample)\n    return x\nm = meanBootstrap(accidents, 10000)\nprint('Mean estimate:', np.mean(m))","9bce975e":"m = accidents.mean()\nse = accidents.std() \/ math.sqrt(len(accidents))\nci = [m - se * 1.96, m + se * 1.96]\nprint('Confidence interval:', ci)","f18e2b0f":"m = meanBootstrap(accidents , 10000)\nsample_mean = np.mean(m)\nsample_se = np.std(m)\nprint('Mean estimate:', sample_mean)\nprint('SE of the estimate:', sample_se)\nci = [np.percentile(m, 2.5), np. percentile(m, 97.5)]\nprint('Confidence interval:', ci)","e080bf0f":"data = pd.read_csv('\/kaggle\/input\/accidentsbcn\/ACCIDENTS_GU_BCN_2010.csv', encoding = \"ISO-8859-1\")\ndata['Date'] = data['Dia de mes'].apply(lambda x: str(x)) + '-' + data['Mes de any'].apply(lambda x: str(x))\ndata2 = data['Date']\ncounts2010 = data['Date'].value_counts()\nprint('2010: Mean', counts2010.mean())\ndata = pd.read_csv('\/kaggle\/input\/accidentsbcn\/ACCIDENTS_GU_BCN_2013.csv', encoding = \"ISO-8859-1\")\ndata['Date'] = data['Dia de mes'].apply(lambda x: str(x)) + '-' + data['Mes de any'].apply(lambda x: str(x))\ndata2 = data['Date']\ncounts2013 = data['Date'].value_counts()\nprint('2013: Mean', counts2013. mean())","22cb4870":"n = len(counts2013)\nmean = counts2013.mean()\ns = counts2013.std()\nci = [mean - s * 1.96\/ np.sqrt(n), mean + s * 1.96 \/ np.sqrt(n)]\nprint('2010 accident rate estimate:', counts2010.mean())\nprint('2013 accident rate estimate:', counts2013.mean())\nprint('CI for 2013:', ci)","e7a3421f":"m = len(counts2010)\nn = len(counts2013)\np = (counts2013.mean() - counts2010.mean())\nprint('m: ', m, 'n: ', n)\nprint('mean difference: ', p)","51a2079f":"x = counts2010\ny = counts2013\npool = np.concatenate([x, y])\nnp.random.shuffle(pool)\nN = 10000 # number of samples\ndiff = list(range(N))\nfor i in range(N):\n     p1 = [random.choice(pool) for _ in range(n)]\n     p2 = [random.choice(pool) for _ in range(n)]\n     diff[i] = (np.mean(p1) - np.mean(p2))\n","18dd1231":"diff2 = np.array(diff)\nw1 = np.where(diff2 > p)[0]\nprint('p-value (Simulation)=', len(w1)\/ float (N), '(', len(w1) \/ float(N) * 100 ,'%)', 'Difference =', p)\nif (len(w1)\/ float (N)) < 0.05:\n     print('The effect is likely')\nelse:\n     print('The effect is not likely')","de83a54e":"\u0434\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b:","22f9cf8f":"\u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435:","a3bb8214":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0433\u0438\u043f\u043e\u0442\u0435\u0437 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432","359981a2":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0433\u0438\u043f\u043e\u0442\u0435\u0437 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c p-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","458ec67d":"\u041d\u0438\u0436\u0435 \u0438\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430, \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e\n","cf215725":"\u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043f\u0443\u0442\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438:","ee444182":" \u044d\u043c\u043f\u0438\u0440\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f:"}}