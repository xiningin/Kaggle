{"cell_type":{"5abaa51f":"code","c4f863db":"code","0f91b220":"code","b8279d6a":"code","19b11df9":"code","263fa904":"code","015c6991":"code","b6220fb4":"code","102a0dcf":"code","d1054e69":"code","ddd101e4":"code","ec46bab8":"code","c7244f4c":"code","f472758a":"code","be9afb94":"code","e116b203":"code","abe21fe9":"code","0c25bae6":"code","26044841":"code","1f8310f2":"code","f8cd7423":"code","7150907a":"code","7a76eac7":"code","d05125ff":"code","cc13d42a":"code","fa427cab":"code","d8e80292":"code","3807fd91":"markdown","5b2c2883":"markdown","82ea49c9":"markdown","da1da5d7":"markdown","4a75a356":"markdown","d32cbfc1":"markdown","f1f1419c":"markdown","7259394a":"markdown","e29d0845":"markdown","260517f2":"markdown","2a62436b":"markdown","adfd51f9":"markdown","46a61647":"markdown","fd3b3658":"markdown","5f736cad":"markdown","daca08e7":"markdown","fdca657d":"markdown","5f0fbe8c":"markdown","764e4a33":"markdown","6c71f425":"markdown"},"source":{"5abaa51f":"# Import libraries\nimport numpy as np # forlinear algebra\nimport matplotlib.pyplot as plt #for plotting things\nimport os\nfrom PIL import Image\nprint(os.listdir(\"..\/input\"))\n\n# Keras Libraries\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom sklearn.metrics import classification_report, confusion_matrix","c4f863db":"#list the names of the entries in the directory\n\nDIR = os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray')\nprint(DIR)","0f91b220":"#create a folder for each train, test and val \n\ntrain_folder = '..\/input\/chest-xray-pneumonia\/chest_xray\/train'\ntest_folder = '..\/input\/chest-xray-pneumonia\/chest_xray\/test'\nval_folder = '..\/input\/chest-xray-pneumonia\/chest_xray\/val'","b8279d6a":"#labeling the dataset\n\nlabels = [\"NORMAL\", \"PNEUMONIA\"] # each folder has two sub folder name \"PNEUMONIA\", \"NORMAL\"\nIMG_SIZE = 50 # resize image\n\ndef get_data_train(data_dir):\n    data = []\n    for label in labels:\n        path = os.path.join(data_dir, label)\n        class_num = labels.index(label)\n        for img in os.listdir(path):\n            try:\n                img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n                new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))\n                data.append([new_array, class_num])\n            except Exception as e:\n                print(e)\n    return np.array(data)","19b11df9":"#train = get_data_train(train_folder)\n#test = get_data_train(test_folder)\n#val = get_data_train(val_folder)\n","263fa904":"train_folder","015c6991":"# train \nos.listdir(train_folder)\ntrain_n = train_folder+'\/NORMAL\/'\ntrain_p = train_folder+'\/PNEUMONIA\/'\n","b6220fb4":"#Normal pic \nprint(len(os.listdir(train_n)))\nrand_norm= np.random.randint(0,len(os.listdir(train_n)))\nnorm_pic = os.listdir(train_n)[rand_norm]\nprint('normal picture title: ',norm_pic)\n\nnorm_pic_address = train_n+norm_pic\n\n#Pneumonia\nrand_p = np.random.randint(0,len(os.listdir(train_p)))\n\nsic_pic =  os.listdir(train_p)[rand_norm]\nsic_address = train_p+sic_pic\nprint('pneumonia picture title:', sic_pic)\n\n# Load the images\nnorm_load = Image.open(norm_pic_address)\nsic_load = Image.open(sic_address)\n\n#Let's plt these images\nf = plt.figure(figsize= (10,6))\na1 = f.add_subplot(1,2,1)\nimg_plot = plt.imshow(norm_load)\na1.set_title('Normal')\n\na2 = f.add_subplot(1, 2, 2)\nimg_plot = plt.imshow(sic_load)\na2.set_title('Pneumonia')","102a0dcf":"l = []\nfor i in train: # for each image in np array of the picture from the train data.\n    #print(type(i))\n    if(i[1] == 0):\n        l.append(\"Normal\")\n    else:\n        l.append(\"Pneumonia\")\n         \nsns.countplot(l) \n","d1054e69":"X_train = []\ny_train = []\n\nX_val = []\ny_val = []\n\nX_test = []\ny_test = []\n\nfor feature, label in train:\n    X_train.append(feature)\n    y_train.append(label)\n\nfor feature, label in test:\n    X_test.append(feature)\n    y_test.append(label)\n    \nfor feature, label in val:\n    X_val.append(feature)\n    y_val.append(label)","ddd101e4":"y_train = np.array(y_train) \ny_val = np.array(y_val)\ny_test = np.array(y_test)\n","ec46bab8":"X_train = np.array(X_train) \/ 255\nX_val = np.array(X_val) \/ 255\nX_test = np.array(X_test) \/ 255","c7244f4c":"model=keras.Sequential()\nmodel.add(keras.Input(shape=X_train.shape[1:]))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation=\"relu\"))\nmodel.add(Dense(1))\nmodel.add(Activation(\"sigmoid\"))\nmodel.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\nhistory = model.fit(X_train, y_train, epochs=25, validation_data=(X_test, y_test), shuffle=True)\nmodel.save(\"initial.model\")","f472758a":"X_train = X_train.reshape(-1, IMG_SIZE, IMG_SIZE, 1)\ny_train = np.array(y_train)\n\nX_val = X_val.reshape(-1, IMG_SIZE, IMG_SIZE, 1)\ny_val = np.array(y_val)\n\nX_test = X_test.reshape(-1, IMG_SIZE, IMG_SIZE, 1)\ny_test = np.array(y_test)","be9afb94":"# source and comment in my own words.\n\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), padding=\"same\", input_shape=X_train.shape[1:]))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(2, 2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(64, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(2, 2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(128, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(2, 2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation=\"relu\"))\n\nmodel.add(Dense(1))\nmodel.add(Activation(\"sigmoid\"))\n\nmodel.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\nhistory = model.fit(X_train, y_train, epochs=25, validation_data=(X_test, y_test), shuffle=True)\n\nmodel.save(\"cnn.model\")","e116b203":"#Visualization \n\naccuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(accuracy))\n\nplt.plot(epochs, accuracy, \"b\", label=\"trainning accuracy\")\nplt.plot(epochs, val_accuracy, \"r\", label=\"test accuracy\")\nplt.legend()\nplt.show()\n\nplt.plot(epochs, loss, \"b\", label=\"trainning loss\")\nplt.plot(epochs, val_loss, \"r\", label=\"test loss\")\nplt.legend()\nplt.show()","abe21fe9":"Training accuracy \nTest Accuracy \nTrainign loss \nTest loss ","0c25bae6":"#predict classes\n\npredict_x=model.predict(X_test) \nclasses_x=np.argmax(predict_x,axis=1)\npredict_x= predict_x.reshape(1, -1)[0]\npredict_x[:15]\n","26044841":"# correct and incorrect\n# you can check tensorflow website\n\ncorrect = np.nonzero(predict_x == y_test)[0]\nincorrect = np.nonzero(predict_x != y_test)[0]","1f8310f2":"j = 0\nfor i in correct[:6]:\n    #print(j)\n    plt.subplot(3,2,j+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(X_test[i].reshape(50,50), cmap=\"gray\", interpolation='none')\n    plt.title(\"Pred {},Act {}\".format(predict_x[i], y_test[i]))\n    #print(type(predict_x)) #\n    plt.xlabel(labels[int(predict_x[i])])\n    plt.tight_layout()\n    j += 1    ","f8cd7423":"j = 0\nfor i in incorrect[:6]:\n    plt.subplot(3,2,j+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(X_test[i].reshape(50,50), cmap=\"gray\", interpolation='none')\n    plt.title(\"Pred{:.4f}, Act {}\".format(predict_x[i], y_test[i]))\n    plt.xlabel(labels[int(predict_x[i])])\n    plt.tight_layout()\n    j += 1    \n  ","7150907a":"# Second model wit only one droupout value. \n\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), padding=\"same\", input_shape=X_train.shape[1:]))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(2, 2))\n\nmodel.add(Conv2D(64, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(2, 2))\n\n\nmodel.add(Conv2D(128, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(2, 2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation=\"relu\"))\n\nmodel.add(Dense(1))\nmodel.add(Activation(\"sigmoid\"))\n\nmodel.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\nhistory = model.fit(X_train, y_train, epochs=25, validation_data=(X_test, y_test), shuffle=True)\n\nmodel.save(\"cnn.model\")","7a76eac7":"#Visualization \n\naccuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(accuracy))\n\nplt.plot(epochs, accuracy, \"b\", label=\"trainning accuracy\")\nplt.plot(epochs, val_accuracy, \"r\", label=\"test accuracy\")\nplt.legend()\nplt.show()\n\nplt.plot(epochs, loss, \"b\", label=\"trainning loss\")\nplt.plot(epochs, val_loss, \"r\", label=\"test loss\")\nplt.legend()\nplt.show()","d05125ff":"predict_x=model.predict(X_test) \nclasses_x=np.argmax(predict_x,axis=1)\npredict_x= predict_x.reshape(1, -1)[0]\npredict_x[:15]","cc13d42a":"# correct and incorrect\n\n\ncorrect = np.nonzero(predict_x == y_test)[0]\nincorrect = np.nonzero(predict_x != y_test)[0]","fa427cab":"j = 0\nfor i in correct[:6]:\n    #print(j)\n    plt.subplot(3,2,j+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(X_test[i].reshape(50,50), cmap=\"gray\", interpolation='none')\n    plt.title(\"Pred {},Act {}\".format(predict_x[i], y_test[i]))\n    #print(type(predict_x)) #\n    plt.xlabel(labels[int(predict_x[i])])\n    plt.tight_layout()\n    j += 1","d8e80292":"#plotting the pneumonic imaages \n\nj = 0\nfor i in incorrect[:6]:\n    plt.subplot(3,2,j+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(X_test[i].reshape(50,50), cmap=\"gray\", interpolation='none')\n    plt.title(\"Pred{:.4f}, Act {}\".format(predict_x[i], y_test[i]))\n    plt.xlabel(labels[int(predict_x[i])])\n    plt.tight_layout()\n    j += 1    \n  ","3807fd91":"The data source is Kaggle. A total of 5,863 chest x-ray images that comprise pneumonic and normal were used.","5b2c2883":"# Modeling ","82ea49c9":"It is estimated that nearly 251,000 deaths annually occur in the U.S due to medical error. A study also indicated an annual loss of 22,165 lives in hospitalized patients that are considered as preventable deaths in US. Pneumonia, one of the leading cause of death globally,is an infection that inflames the air sacs in one or both lungs. The air sacs may fill with fluid or pus (purulent material), causing cough with phlegm or pus, fever, chills, and difficulty breathing. A variety of organisms, including bacteria, viruses and fungi, can cause pneumonia. Pneumonia can range in seriousness from mild to life-threatening. It is most serious for infants and young children, people older than age 65, and people with health problems or weakened immune systems.\n\nIf pneumonia is suspected, physicians usually adhere ot one or more of the tests including:\nBlood tests: Blood tests are used to confirm an infection and to try to identify the type of organism causing the infection. However, precise identification isn't always possible.\nChest X-ray: This helps your doctor diagnose pneumonia and determine the extent and location of the infection. However, it can't tell your doctor what kind of germ is causing the pneumonia.\nPulse oximetry: This measures the oxygen level in your blood. Pneumonia can prevent your lungs from moving enough oxygen into your bloodstream.\nSputum test: A sample of fluid from your lungs (sputum) is taken after a deep cough and analyzed to help pinpoint the cause of the infection.\nYour doctor might order additional tests if you're older than age 65, are in the hospital, or have serious symptoms or health conditions. These may include:\nCT scan: If your pneumonia isn't clearing as quickly as expected, your doctor may recommend a chest CT scan to obtain a more detailed image of your lungs.\nPleural fluid culture: A fluid sample is taken by putting a needle between your ribs from the pleural area and analyzed to help determine the type of infection.\n\nThe diagnosis of pneumonia and otehr diseases is decisive for planning proper treatment and ensuring the well-being of patients. Human error hinders accurate diagnostics, as interpreting medical information is a complex and cognitively challenging task. The application of artifcial intelligence (AI) can improve the level of diagnostic accuracy and efciency. \n\nThe objective of this project is to devlop and comapare models so as to determine and classify whehter the chest x-ray images has pneumonia or not.\n\nThe prediction outputs (model and analysis) of this study will give radiologists and other concerned medical and veterinary professionals an laternative way of diagnosis of different disease conditions using artifical intelligence.This in turn, enables end users to leverage an accurate and effective diagnostic tool.\n\nThe methodologies used in these models can be used as a reference for future work, and also can be compared with different models for performance evaluation with other diagnostic tools used to diagnose pneumonia. In cognizant of the data type we have, and our objectives, Simple perceptorn algorithm and Convolutional Neural Network (ConvNet\/CNN) were used.In order to classify the images exactly as pneuomonic or not, a higher accuracy output was used. ","da1da5d7":"# EDA ","4a75a356":"# Data Understanding\n","d32cbfc1":"I recommend that radiologists and medical\/veterinary professionals to consider using AI based imagge classification of x-ray immages as alternative and accurate tool for pneumonia diagnosis.\n\n ","f1f1419c":"# Training the Model","7259394a":"## Importing the required libraries ","e29d0845":"There were a few changes we made to the data set. First, data was normalized for each train, test and validation.","260517f2":"\n### Modelless Baseline   ","2a62436b":"# Diagnosis of Pneumonia from Chest X-Ray using Ariticial Intelligence ","adfd51f9":"# Business Problem","46a61647":"In this project, a chest x-ray images were used as a data to correctly identify pneumonaia. Despite the fact that there are vatious diagnistic tests used to diagnose patients from pneumonia, it is important to use new technology and adavanced techniques as an alternative tool. Artifical Intelligence(AI) has became an emergin technology in the diagnosis of diseases including pneumonia. Three different machine learning models were developed to make their predictions on whether the x-ray immage is normal or pnemuonic . The accuracy of the model were used to interpret the prediction.","fd3b3658":"### Normalization","5f736cad":"# Conclusions & Recommendations","daca08e7":"## Simple Model","fdca657d":"From the above simple perceptorn model, an accuracy of 96% were recorded. ","5f0fbe8c":"## Reshaping train,test and validation\n","764e4a33":"## Data Preparation","6c71f425":"# Overview "}}