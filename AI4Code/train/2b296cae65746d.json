{"cell_type":{"84ef9f6f":"code","4041f13c":"code","52f3d94a":"code","1189850b":"code","6acc33ef":"code","dca7e9ce":"code","ff6409c0":"code","2edd0d0d":"code","2444d1d4":"code","f2c2958a":"code","e1ed27e8":"code","359a166d":"code","16617449":"code","9bf82c99":"code","f57e2bad":"code","24309ab5":"code","6845bb5b":"code","ce73e3d5":"code","68601fab":"code","d02dd79e":"code","fcebceba":"code","a10bce35":"code","7e30df0f":"code","e9cda7f4":"code","d171d3c6":"code","665c198a":"code","9eb77010":"code","903cbfc8":"code","4449be33":"code","c0574bf7":"code","3036bdf6":"code","fdacd164":"code","8d71ff52":"code","22fa422a":"code","40bfd384":"code","8eeb9f45":"code","e091238a":"code","cf1ae3d0":"code","d6f29982":"code","436c9f92":"code","c2524a7c":"code","397e16f0":"code","c6ef3718":"code","f4b68b2b":"code","642ce351":"code","e1a7765d":"code","7cb9aaa0":"code","f8e52a51":"code","3f57e2eb":"code","aa59803e":"code","2e86a981":"code","01ad7250":"code","198ad461":"code","ac69a55e":"code","ad70a5af":"code","27b68af4":"code","c75b7ceb":"code","d80121a1":"code","eebf93d4":"code","d407edd9":"code","b28740c5":"code","2a285ae4":"code","2394faad":"code","2fe3332a":"code","2d4a111c":"code","c7f7f7a8":"code","7cc63e06":"code","0f1be946":"code","3bdd2112":"code","8d77ab7c":"code","5a6c1a9a":"code","a30ba382":"code","67598e92":"code","8665f19e":"code","9c292b89":"code","823cfbdf":"code","e0f65013":"code","b7f149ca":"code","7176c3b4":"code","a9195d21":"code","0997cfb3":"code","bedce7dc":"code","b21fa06e":"code","33c3dc30":"code","96ed0a2e":"code","364e50b7":"code","28aceae7":"code","18095e18":"code","387c92c5":"code","fbadd35e":"code","2a31eca8":"code","70a10f0a":"code","51890a80":"code","9867423a":"code","6f788798":"markdown","9bcf077f":"markdown","ce6d4aff":"markdown","cc3851bf":"markdown","1c9da3b9":"markdown","3a30c8c8":"markdown","66d3ee05":"markdown","3cd0fa29":"markdown","bcf08cb8":"markdown","7b03349c":"markdown","91c4bbaf":"markdown","75e37b80":"markdown","9163371f":"markdown","677e7b4b":"markdown","79e7c9b7":"markdown","6471cd66":"markdown","95cb344c":"markdown"},"source":{"84ef9f6f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4041f13c":"t_news = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/True.csv')\nf_news = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/Fake.csv')","52f3d94a":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport spacy\nfrom spacy.lang.en.stop_words import STOP_WORDS","1189850b":"t_news['category'] = 'true'\nf_news['category'] = 'fake'","6acc33ef":"f_news = f_news.sample(t_news.shape[0])","dca7e9ce":"news = f_news.append(t_news, ignore_index = True)","ff6409c0":"news['Word_Count'] = news['text'].apply(lambda x: len(str(x).split()))","2edd0d0d":"news['Char_Count'] = news['text'].apply(lambda x: len(x))","2444d1d4":"news['text'] = news['text'].apply(lambda x: ' '.join(x.split()))","f2c2958a":"import re","e1ed27e8":"news['punct_count'] = news['text'].apply(lambda x: len(re.findall('[^a-z A-Z 0-9-]+', x)))","359a166d":"news['hashtags_count'] = news['text'].apply(lambda x: len([t for t in x.split() if t.startswith('#')]))\nnews['mention_count'] = news['text'].apply(lambda x: len([t for t in x.split() if t.startswith('@')]))","16617449":"news['numerics_count'] = news['text'].apply(lambda x: len([t for t in x.split() if t.isdigit()]))","9bf82c99":"news['UPPER_CASE_COUNT'] = news['text'].apply(lambda x: len([t for t in  x.split() if t.isupper() and len(x)>3]))","f57e2bad":"contractions = {\n\"aight\": \"alright\",\n\"ain't\": \"am not\",\n\"amn't\": \"am not\",\n\"aren't\": \"are not\",\n\"can't\": \"can not\",\n\"cause\": \"because\",\n\"could've\": \"could have\",\n\"couldn't\": \"could not\",\n\"couldn't've\": \"could not have\",\n\"daren't\": \"dare not\",\n\"daren't\": \"dared not\",\n\"daresn't\": \"dare not\",\n\"dasn't\": \"dare not\",\n\"didn't\": \"did not\",\n\"doesn't\": \"does not\",\n\"don't\": \"do not\",\n\"don't\": \"does not\",\n\"d'ye\": \"do you\",\n\"d'ye\": \"did you\",\n\"e'er\": \"ever\",\n\"everybody's\": \"everybody is\",\n\"everyone's\": \"everyone is\",\n\"finna\": \"fixing to\",\n\"finna\": \"going to\",\n\"g'day\": \"good day\",\n\"gimme\": \"give me\",\n\"giv'n\": \"given\",\n\"gonna\": \"going to\",\n\"gon't\": \"go not\",\n\"gotta\": \"got to\",\n\"hadn't\": \"had not\",\n\"had've\": \"had have\",\n\"hasn't\": \"has not\",\n\"haven't\": \"have not\",\n\"he'd\": \"he had\",\n\"he'd\": \"he would\",\n\"he'dn't've'd\": \"he would not have had\",\n\"he'll\": \"he shall\",\n\"he'll\": \"he will\",\n\"he's\": \"he has\",\n\"he's\": \"he is\",\n\"he've\": \"he have\",\n\"how'd\": \"how did\",\n\"how'd\": \"how would\",\n\"howdy\": \"how do you do\",\n\"howdy\": \"how do you fare\",\n\"how'll\": \"how will\",\n\"how're\": \"how are\",\n\"I'll\": \"I shall\",\n\"I'll\": \"I will\",\n\"I'm\": \"I am\",\n\"I'm'a\": \"I am about to\",\n\"I'm'o\": \"I am going to\",\n\"innit\": \"is it not\",\n\"I've\": \"I have\",\n\"isn't\": \"is not\",\n\"it'd\": \"it would\",\n\"it'll\": \"it shall\",\n\"it'll\": \"it will\",\n\"it's\": \"it has\",\n\"it's\": \"it is\",\n\"let's\": \"let us\",\n\"ma'am\": \"madam\",\n\"mayn't\": \"may not\",\n\"may've\": \"may have\",\n\"methinks\": \"me thinks\",\n\"mightn't\": \"might not\",\n\"might've\": \"might have\",\n\"mustn't\": \"must not\",\n\"mustn't've\": \"must not have\",\n\"must've\": \"must have\",\n\"needn't\": \"need not\",\n\"ne'er\": \"never\",\n\"o'clock\": \"of the clock\",\n\"o'er\": \"over\",\n\"ol'\": \"old\",\n\"oughtn't\": \"ought not\",\n\"'s\": \"is, has, does, or us\",\n\"shalln't\": \"shall not\",\n\"shan't\": \"shall not\",\n\"she'd\": \"she had\",\n\"she'd\": \"she would\",\n\"she'll\": \"she shall\",\n\"she'll\": \"she will\",\n\"she's\": \"she has\",\n\"she's\": \"she is\",\n\"should've\": \"should have\",\n\"shouldn't\": \"should not\",\n\"shouldn't've\": \"should not have\",\n\"somebody's\": \"somebody has\",\n\"somebody's\": \"somebody is\",\n\"someone's\": \"someone has\",\n\"someone's\": \"someone is\",\n\"something's\": \"something has\",\n\"something's\": \"something is\",\n\"so're\": \"so are\",\n\"that'll\": \"that shall\",\n\"that'll\": \"that will\",\n\"that're\": \"that are\",\n\"that's\": \"that has\",\n\"that's\": \"that is\",\n\"that'd\": \"that would\",\n\"that'd\": \"that had\",\n\"there'd\": \"there had\",\n\"there'd\": \"there would\",\n\"there'll\": \"there shall\",\n\"there'll\": \"there will\",\n\"there're\": \"there are\",\n\"there's\": \"there has\",\n\"there's\": \"there is\",\n\"these're\": \"these are\",\n\"these've\": \"these have\",\n\"they'd\": \"they had\",\n\"they'd\": \"they would\",\n\"they'll\": \"they shall\",\n\"they'll\": \"they will\",\n\"they're\": \"they are\",\n\"they're\": \"they were\",\n\"they've\": \"they have\",\n\"this's\": \"this has\",\n\"this's\": \"this is\",\n\"those're\": \"those are\",\n\"those've\": \"those have\",\n\"'tis\": \"it is\",\n\"to've\": \"to have\",\n\"'twas\": \"it was\",\n\"wanna\": \"want to\",\n\"wasn't\": \"was not\",\n\"we'd\": \"we had\",\n\"we'd\": \"we would\",\n\"we'd\": \"we did\",\n\"we'll\": \"we shall\",\n\"we'll\": \"we will\",\n\"we're\": \"we are\",\n\"we've\": \"we have\",\n\"weren't\": \"were not\",\n\"what'd\": \"what did\",\n\"what'll\": \"what shall\",\n\"what'll\": \"what will\",\n\"what're\": \"what are\",\n\"what're\": \"what were\",\n\"what's\": \"what has\",\n\"what's\": \"what is\",\n\"what's\": \"what does\",\n\"what've\": \"what have\",\n\"when's\": \"when has\",\n\"when's\": \"when is\",\n\"where'd\": \"where did\",\n\"where'll\": \"where shall\",\n\"where'll\": \"where will\",\n\"where're\": \"where are\",\n\"where's\": \"where has\",\n\"where's\": \"where is\",\n\"where's\": \"where does\",\n\"where've\": \"where have\",\n\"which'd\": \"which had\",\n\"which'd\": \"which would\",\n\"which'll\": \"which shall\",\n\"which'll\": \"which will\",\n\"which're\": \"which are\",\n\"which's\": \"which has\",\n\"which's\": \"which is\",\n\"which've\": \"which have\",\n\"who'd\": \"who would\",\n\"who'd\": \"who had\",\n\"who'd\": \"who did\",\n\"who'd've\": \"who would have\",\n\"who'll\": \"who shall\",\n\"who'll\": \"who will\",\n\"who're\": \"who are\",\n\"who's\": \"who has\",\n\"who's\": \"who is\",\n\"who's\": \"who does\",\n\"who've\": \"who have\",\n\"why'd\": \"why did\",\n\"why're\": \"why are\",\n\"why's\": \"why has\",\n\"why's\": \"why is\",\n\"why's\": \"why does\",\n\"won't\": \"will not\",\n\"would've\": \"would have\",\n\"wouldn't\": \"would not\",\n\"wouldn't've\": \"would not have\",\n\"y'all\": \"you all\",\n\"y'all'd've\": \"you all would have\",\n\"y'all'dn't've'd\": \"you all would not have had\",\n\"y'all're\": \"you all are\",\n\"you'd\": \"you had\",\n\"you'd\": \"you would\",\n\"you'll\": \"you shall\",\n\"you'll\": \"you will\",\n\"you're\": \"you are\",\n\"you're\": \"you are\",\n\"you've\": \"you have\",\n\" u \": \"you\",\n\" ur \": \"your\",\n\" n \": \"and\"\n}","24309ab5":"def cont_to_exp(x):\n    if type(x) is str:\n        for key in contractions:\n            value = contractions[key]\n            x = x.replace(key,value)\n        return x\n    else:\n        return x","6845bb5b":"news['text'] = news['text'].apply(lambda x: cont_to_exp(x))","ce73e3d5":"news['Emails'] = news['text'].apply(lambda x: re.findall(r'([a-zA-Z0-9+._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)',x))","68601fab":"news['text'] = news['text'].apply(lambda x: re.sub(r'([a-zA-Z0-9+._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)', '',x))","d02dd79e":"news['URL_Flags'] = news['text'].apply(lambda x: len(re.findall(r'(http|ftp|https):\/\/([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\/~+#-]*[\\w@?^=%&\/~+#-])?', x)))","fcebceba":"news['text'] = news['text'].apply(lambda x: re.sub(r'(http|ftp|https):\/\/([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\/~+#-]*[\\w@?^=%&\/~+#-])?', '', x))","a10bce35":"news['text'] = news['text'].apply(lambda x: re.sub('[^a-z A-Z 0-9-]+', '', x))","7e30df0f":"from wordcloud import WordCloud","e9cda7f4":"text = ' '.join(news['text'])","d171d3c6":"text = text.split()","665c198a":"x = ' '.join(text[:20000])","9eb77010":"wc = WordCloud(width = 2000, height = 1000).generate(x)\nplt.imshow(wc)\nplt.axis('off')\nplt.show()","903cbfc8":"news['date'] = news['date'].str.replace('Jul', 'July')","4449be33":"news['date'] = news['date'].str.replace('Sep', 'September')","c0574bf7":"news['date'] = news['date'].str.replace('Oct', 'October')","3036bdf6":"news['date'] = news['date'].str.replace('Aug', 'August')","fdacd164":"news['date'] = news['date'].str.replace('Augustust', 'August')","8d71ff52":"news['date'] = news['date'].str.replace('Dec', 'December')","22fa422a":"news['date'] = news['date'].str.replace('Nov', 'November')","40bfd384":"news['date'] = news['date'].str.replace('Decemberember', 'December')","8eeb9f45":"news['date'] = news['date'].str.replace('Septembertember', 'September')","e091238a":"news['date'] = news['date'].str.replace('Jun', 'June')","cf1ae3d0":"news['date'] = news['date'].str.replace('Junee', 'June')","d6f29982":"news['date'] = news['date'].str.replace('Feb', 'February')","436c9f92":"news['date'] = news['date'].str.replace('Februaryruary', 'February')","c2524a7c":"news['date'] = news['date'].str.replace('Mar', 'March')","397e16f0":"news['date'] = news['date'].str.replace('Marchch', 'March')","c6ef3718":"news['date'] = news['date'].str.replace('Apr', 'April')","f4b68b2b":"news['date'] = news['date'].str.replace('Aprilil', 'April')","642ce351":"news['date'] = news['date'].str.replace('Julyy', 'July')","e1a7765d":"news['date'] = news['date'].str.replace('Jan', 'January')","7cb9aaa0":"news['date'] = news['date'].str.replace('Januaryuary', 'January')","f8e52a51":"news['date'] = news['date'].str.replace('Novemberember', 'November')","3f57e2eb":"news['date'] = news['date'].str.replace('Octoberober', 'October')","aa59803e":"i = news[(news.date == '14-February-18')].index","2e86a981":"news = news.drop(i)","01ad7250":"j = news[(news.date == '15-February-18')].index","198ad461":"news = news.drop(j)","ac69a55e":"k = news[(news.date == '16-February-18')].index","ad70a5af":"news = news.drop(k)","27b68af4":"l = news[(news.date == '17-February-18')].index","c75b7ceb":"news = news.drop(l)","d80121a1":"m = news[(news.date == '18-February-18')].index","eebf93d4":"news = news.drop(m)","d407edd9":"n = news[(news.date == '19-February-18')].index","b28740c5":"news = news.drop(n)","2a285ae4":"o = news[(news.date == 'https:\/\/100percentfedup.com\/video-hillary-asked-about-trump-i-just-want-to-eat-some-pie\/')].index","2394faad":"news = news.drop(o)","2fe3332a":"p = news[(news.date == 'https:\/\/100percentfedup.com\/12-yr-old-black-conservative-whose-video-to-obama-went-viral-do-you-really-love-america-receives-death-threats-from-left\/')].index","2d4a111c":"news = news.drop(p)","c7f7f7a8":"q = news[(news.date == 'https:\/\/fedup.wpengine.com\/wp-content\/uploads\/2015\/04\/hillarystreetart.jpg')].index","7cc63e06":"news = news.drop(q)","0f1be946":"r = news[(news.date == 'https:\/\/fedup.wpengine.com\/wp-content\/uploads\/2015\/04\/entitled.jpg')].index","3bdd2112":"news = news.drop(r)","8d77ab7c":"s = news[(news.date == 'MSNBC HOST Rudely Assumes Steel Worker Would Never Let His Son Follow in His Footsteps\u2026He Couldn\u2019t Be More Wrong [Video]')].index","5a6c1a9a":"news = news.drop(s)","a30ba382":"t = news[(news.date == 'https:\/\/100percentfedup.com\/served-roy-moore-vietnamletter-veteran-sets-record-straight-honorable-decent-respectable-patriotic-commander-soldier\/')].index","67598e92":"news = news.drop(t)","8665f19e":"news['date'] = pd.to_datetime(news['date'])","9c292b89":"news['Day'] = news['date'].dt.day\nnews['Month'] = news['date'].dt.month\nnews['Year'] = news['date'].dt.year","823cfbdf":"plt.hist(news[news['category']=='fake']['Word_Count'], bins=100, alpha=0.7)\nplt.hist(news[news['category']=='true']['Word_Count'], bins=100, alpha=0.7)\nplt.show()","e0f65013":"plt.hist(news[news['category']=='fake']['punct_count'], bins=100, alpha=0.7)\nplt.hist(news[news['category']=='true']['punct_count'], bins=100, alpha=0.7)\nplt.show()","b7f149ca":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer ","7176c3b4":"X = news['text']\ny = news['category']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0, shuffle = True, \n                                                    stratify = news['category'])","a9195d21":"vectorizer = TfidfVectorizer()","0997cfb3":"X_train1 = vectorizer.fit_transform(X_train)","bedce7dc":"X_train1.shape","b21fa06e":"clf = Pipeline([('tfidf',TfidfVectorizer()),('clf',RandomForestClassifier(n_estimators=100, n_jobs=-1))])","33c3dc30":"clf.fit(X_train,y_train)","96ed0a2e":"y_pred = clf.predict(X_test)","364e50b7":"confusion_matrix(y_test,y_pred)","28aceae7":"print(classification_report(y_test,y_pred))","18095e18":"accuracy_score(y_test,y_pred)","387c92c5":"clf = Pipeline([('tfidf',TfidfVectorizer()),('clf',SVC(C = 1000, gamma = 'auto'))])","fbadd35e":"clf.fit(X_train,y_train)","2a31eca8":"y_pred = clf.predict(X_test)","70a10f0a":"confusion_matrix(y_test,y_pred)","51890a80":"print(classification_report(y_test,y_pred))","9867423a":"accuracy_score(y_test,y_pred)","6f788798":"#### Removing multiple Spaces","9bcf077f":"### Count and Removing Emails","ce6d4aff":"### EDA","cc3851bf":"### Text Preprocessing and Cleaning\n#### Word Count ","1c9da3b9":"### Pipeline and RandomForestClassifier","3a30c8c8":"#### If numeric digits are present in tweets","66d3ee05":"### Bag of Words Creation","3cd0fa29":"#### Punctuation Count","bcf08cb8":"####  Count hashtags(#) and @ mentions","7b03349c":"#### Balancing this data","91c4bbaf":"#### Count URLs and remove them","75e37b80":"#### UPPER_case_words_count","9163371f":"### Data Preparation","677e7b4b":"#### Character_Count","79e7c9b7":"#### WordCloud Visualization","6471cd66":"### SVM","95cb344c":"####  Removal of special chars and punctuation"}}