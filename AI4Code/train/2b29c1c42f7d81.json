{"cell_type":{"369a1c62":"code","1de563ed":"code","60f5d510":"code","83ade820":"code","9e766e78":"code","3056121a":"code","018803c3":"code","30e3ce3b":"code","e331bbf2":"code","0406df1f":"code","d61577df":"code","f515b691":"code","0de8be01":"code","dfb4698b":"code","0126f1f8":"code","dcb5d9f1":"code","fe0c98bc":"code","99cc688b":"code","f2212244":"code","9c46deba":"code","ca85d6ec":"code","ed63621a":"code","286a165e":"code","5c03cfb6":"code","05652d98":"code","326f1e34":"code","f2a9dca9":"code","f22a5709":"code","c2178b0f":"code","49e586d7":"code","5db6c887":"code","40db6492":"code","4855fde0":"code","5b5fd723":"code","1f4e2e47":"code","9924edac":"code","fd6193f8":"code","b70dfc45":"code","25f1b699":"code","33999da6":"code","e1c74c06":"code","f965a32c":"code","7044b103":"code","180ebe45":"code","ae72a100":"code","1ff67be9":"code","bc3e0988":"code","a76e5a24":"code","4ee07b5d":"code","43dce9f1":"code","6184054a":"code","fa0d5b33":"code","b59cb8ae":"code","762536a6":"code","8dae939f":"code","a0472c11":"code","02592cee":"code","b3eef28f":"code","e057f2d1":"code","ddb70ff6":"code","2e3e2713":"code","0441ab54":"code","5705e28f":"code","50d6f5e4":"code","3f135d8b":"code","cb514e1d":"code","d3c408a2":"markdown","13683cdd":"markdown","85c8b53a":"markdown","3d26b4cd":"markdown","6f4d10c2":"markdown","243b7516":"markdown","275cde3b":"markdown","c29a69ac":"markdown","69c78f59":"markdown","ecc3a52b":"markdown"},"source":{"369a1c62":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1de563ed":"df = pd.read_csv('\/kaggle\/input\/pokemon\/Pokemon.csv')","60f5d510":"#Display the first elements of the dataset\ndf.head()","83ade820":"#check the shape of the dataframe\ndf.shape","9e766e78":"#We use the columns function to see the all columns names\ndf.columns","3056121a":"#Descriptive statistics using describe\ndf.describe()","018803c3":"#Check the types of the columns\ndf.dtypes","30e3ce3b":"#Number of null values per column\ndf.isnull().sum()","e331bbf2":"#Number of Legendary and non-legendary Pokemons\nprint(df.Legendary.value_counts())","0406df1f":"#Plotting 'isLegendary' using seaborn function 'countplot' with countplot function\nplt.figure(figsize=(8, 4))\nsns.countplot(data = df , y = 'Legendary')","d61577df":"#Now we try a Pie chart\nfig = plt.figure(figsize=(5,5))\nax = fig.add_axes([0,0,1,1])\nax.axis('equal')\nLeg = df.Legendary.value_counts() \nlabels = ['Normal', 'Legendary']\nax.pie(Leg, labels = labels,autopct='%1.2f%%',colors=['skyblue','red'])\nplt.show()","f515b691":"#Print the number of types using nunique()\nprint('Number of Types : ',df['Type 1'].nunique())\n#Print the  Types using unique()\nprint('Types : ',df['Type 1'].unique())","0de8be01":"#Plotting 'Type_1' using seaborn function 'countplot' with countplot function\nplt.figure(figsize=(12, 6))\nsns.countplot(data = df , x = 'Type 1')","dfb4698b":"#Plotting 'Type_1' using seaborn function 'countplot' with countplot function, and with the type as a hue (splitting criteria)\nplt.figure(figsize=(15, 6))\nsns.countplot(data = df , x = 'Legendary', hue='Type 1')","0126f1f8":"#Plotting 'Type_1' using seaborn function 'countplot' with countplot function, with the legendary 'hue'\nplt.figure(figsize=(15, 6))\nsns.countplot(data = df , x = 'Type 1', hue='Legendary')","dcb5d9f1":"#Plotting 'isLegendary' using seaborn function 'countplot' for only 'with countplot function, with the legendary 'hue'\nplt.figure(figsize=(12, 6))\nsns.countplot(data = df[df.Legendary ], x = 'Type 1')\nprint('Number of Legendary : ' ,len(df[df.Legendary]))","fe0c98bc":"#Plot 'Type_2' Variable using countplot\nplt.figure(figsize=(12, 6))\nsns.countplot(data = df , x = 'Type 2')","99cc688b":"#Plot 'Type_1' with 'isLegendary' as a hue\nplt.figure(figsize=(15, 6))\nsns.countplot(data = df , x = 'Type 2', hue='Legendary')","f2212244":"#Let's see the Water pokemon per generation, and see how many legendary pokemon is introduced per generation\nplt.figure(figsize=(10, 6))\nsns.countplot(data = df[df['Type 1']=='Water'] , x = 'Generation', hue='Legendary',palette=\"Blues\")","9c46deba":"#Let's see the Fire pokemon per generation, and see how many legendary pokemon is introduced per generation\nplt.figure(figsize=(10, 6))\nsns.countplot(data = df[df['Type 1']=='Fire'] , x = 'Generation', hue='Legendary',palette=\"Reds\")","ca85d6ec":"#Plot the number of Legendary Pokemons introduced per Generation :\nplt.figure(figsize=(15, 6))\nsns.countplot(data = df[df.Legendary == True] , x = 'Generation')","ed63621a":"# Density Plot and Histogram of Defense Feature\nplt.figure(figsize=(10, 6))\nsns.distplot(df['Defense'], hist=True, kde=True, \n             bins=40, color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 3,'shade': True,})","286a165e":"# Density Plot and Histogram of Attack Feature\nplt.figure(figsize=(10, 6))\nsns.distplot(df['Attack'], hist=False, kde=True, \n             bins=20, color = 'red', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 3,'shade': True,})","5c03cfb6":"# Density Plot and Histogram of HP Feature\nplt.figure(figsize=(10, 6))\nplt.xticks(fontsize=15, rotation=90)\nplt.yticks(fontsize=15)\nsns.distplot(df['HP'], hist=False, kde=True, \n              color = 'green',\n             kde_kws={'linewidth': 3,'shade': True,})","05652d98":"# Density Plot and Histogram of the Speed Feature\nplt.figure(figsize=(10, 6))\nplt.xticks(fontsize=15, rotation=90)\nplt.yticks(fontsize=15)\nsns.distplot(df['Speed'], hist=False, kde=True, \n              color = '#FEC803',\n             kde_kws={'linewidth': 3,'shade': True,})","326f1e34":"# Density Plot and Histogram of Total Points Feature\nplt.figure(figsize=(10, 6))\nplt.xticks(fontsize=15, rotation=90)\nplt.yticks(fontsize=15)\nsns.distplot(df['Total'], hist=False, kde=True,  color = '#12C803',\n             kde_kws={'linewidth': 3,'shade': True,})","f2a9dca9":"#Scatter plot of Attack and Defense \nplt.figure(figsize=(10, 7))\nlab = ['Attack', 'Defense']\nplt.xlabel('Attack')\nplt.ylabel('Defense')\nplt.scatter(x = df.Attack, y = df.Defense, alpha=0.5)\nplt.show()","f22a5709":"#We will Color the Legendary Pokemons with the Red Color\ncolors = []\nfor index,row in df.iterrows():\n  if row['Legendary']==True:\n    colors.append('red')\n  else:\n    colors.append('blue')","c2178b0f":"#Now we plot using the Color List we created\nplt.figure(figsize=(10, 7))\nlab = ['Attack', 'Defense']\nplt.xlabel('Attack',fontsize=40)\nplt.ylabel('Defense',fontsize=40)\nplt.scatter(x = df.Attack, y = df.Defense, alpha=0.5,c=colors)\nplt.show()","49e586d7":"#Seaborn makes our life easier\nplt.figure(figsize=(10, 7))\nsns.scatterplot(data = df , x=\"Attack\", y=\"Defense\", hue=\"Legendary\")","5db6c887":"#Now we scatter plot with a linear regression function, using regplot (regression plot), to see the relation between defence and weight\nplt.figure(figsize=(10, 7))\nplt.xlabel('Defense',fontsize=40)\nplt.ylabel('Weight_kg',fontsize=40)\nsns.regplot(data = df , x=\"Defense\", y=\"Attack\",color='brown')","40db6492":"#Now we scatter plot with a linear regression function, using regplot (regression plot), to see the relation between defence and HP\nplt.figure(figsize=(10, 7))\nplt.xlabel('Defense',fontsize=40)\nplt.ylabel('HP',fontsize=40)\nsns.regplot(data = df , x=\"Defense\", y=\"HP\",color = 'green')","4855fde0":"# To see both Legendary and Non Legendary classes regression plot, we use lmplot function\nplt.figure(figsize=(15, 10))\nsns.lmplot(data = df , x=\"Defense\", y=\"HP\", hue=\"Legendary\")","5b5fd723":"#Move to the Box plot, lets try 'Attack'\nsns.boxplot(x=[\"Attack\"], data=df,orient=\"v\")","1f4e2e47":"#We can use the defeined function in Pandas, but it is not so pretty\ndf.boxplot(figsize=(10,6))","9924edac":"df.columns","fd6193f8":"#Lets use slicing , to extract Numerical Values\ndfNum = df[['Attack','Defense','Speed']]","b70dfc45":"dfNum.head()","25f1b699":"#Melt function help us transform our Dataframe to a format\n#where one or more columns are identifier variables, while all other columns, considered measured variables\nmelt = pd.melt(dfNum)","33999da6":"melt.head()","e1c74c06":"#Now we can use our 'melt' dataframe to diplay multiple columns\nplt.figure(figsize=(15, 10))\nsns.boxplot(data = melt,x=\"variable\", y=\"value\")","f965a32c":"df.Legendary==1","7044b103":"#Now we Seperate Legendary and Normal Pokemons, so we can plot them in a seperated way, to gain more insight\n#We start with Legendary Pokemons\ndfLegend = dfNum[df.Legendary==1]","180ebe45":"#Now we move to Normal Pokemons\ndfNormal= dfNum[df.Legendary==0]","ae72a100":"#We boxplot Normal pokemns Dataset\nplt.figure(figsize=(15, 10))\nsns.boxplot(data = pd.melt(dfNormal),x=\"variable\", y=\"value\")","1ff67be9":"#Now we Plot Legendary Pokemons\nplt.figure(figsize=(15, 10))\nsns.boxplot(data = pd.melt(dfLegend),x=\"variable\", y=\"value\")","bc3e0988":"df[df.Legendary == 1].groupby('Type 2').Legendary.count().sum()\n#More than the half","a76e5a24":"for index,row in df.iterrows():\n  try :\n    np.isnan(row['Type 2']) #is nan generate an error of non convertable to float type is used\n    df.at[index,'TwoTypes'] = True\n  except:\n    df.at[index,'TwoTypes'] = False","4ee07b5d":"df.isnull().sum()","43dce9f1":"#Time to drop unecessary Features\ndf.drop(['Name','Type 2','Generation'],axis=1,inplace = True)","6184054a":"#Quick Check\ndf.head()","fa0d5b33":"from sklearn import preprocessing","b59cb8ae":"le = preprocessing.LabelEncoder()","762536a6":"#First We fit our encoder\nle.fit(df['Type 1'])","8dae939f":"#And then we transform our Data\ndf['Type 1'] = le.transform(df['Type 1'])\ndf['Type 1']","a0472c11":"#Another Quick Check\ndf.head()","02592cee":"#Describe the dataset\ndf.describe()","b3eef28f":"X = df.drop(['Legendary'],axis = 1)\ny =df.Legendary","e057f2d1":"#Feature Scaling : \n\nfrom sklearn.preprocessing import StandardScaler\n\nSc = StandardScaler()\n\n# We need to fit and transform the dataset\ndfScale = Sc.fit_transform(df)","ddb70ff6":"from sklearn.model_selection import train_test_split","2e3e2713":"#We use a 70%\/30% Split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state = 42)","0441ab54":"from sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier","5705e28f":"from sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import f1_score","50d6f5e4":"names = [\"Support Vector Classifier\", \"K-Neighbors Classifier\", \"Random Forest Classifier\"]","3f135d8b":"classifiers = [SVC(),\n               KNeighborsClassifier(),\n               RandomForestClassifier() ]","cb514e1d":"for name, clf in zip(names, classifiers):\n    clf.fit(x_train, y_train)\n    preds = clf.predict(x_test)\n    acc = accuracy_score(preds,y_test)\n    precision = precision_score(y_test,preds)\n    recall = recall_score(y_test,preds)\n    f1 = f1_score(y_test,preds)\n    cm = confusion_matrix(y_test,preds)\n    print (name, 'Accuracy  :  ', \"%.2f\" %(acc*100),'%', ', Precision',\"%.3f\" %precision, ' , Recall : ', \"%.3f\" %recall, ' , F1-Score : ',\"%.3f\" %f1)\n    print('The confusion Matrix : ' )\n    print(cm)\n    print(' *-----------------------------------------------------------------------------------------------------*')","d3c408a2":"Check the shape of the dataset","13683cdd":"### Train_Test Split","85c8b53a":"### To choose the ML algorithm, we can look at this map :\n![Image](https:\/\/miro.medium.com\/max\/1400\/1*tpOZa-wju9pD-5vFd-Es-g.png)\n","3d26b4cd":"### Importing","6f4d10c2":"## Let's move to Numerial Values","243b7516":"# Pokemon Dataset\n## Data Cleaning and preprocessing , Legendary Prediction","275cde3b":"#### Now we will encode our Categorical Data, using LabelEncoder from sklearn","c29a69ac":"## Categorical Data","69c78f59":"### We seperate the Features from Target, in Our case Target  'Legendary'","ecc3a52b":"### EDA : Exploratory data analysis"}}