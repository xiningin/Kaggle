{"cell_type":{"db30df63":"code","e077ed24":"code","8289d964":"code","fbfc22ae":"code","b7771be1":"code","5e091d00":"code","d3accfa5":"code","65202847":"code","5732fcf2":"code","46d64676":"code","e55995ca":"code","2c37c0b3":"code","f91d4f85":"code","bac0458c":"code","696bcfce":"code","c61e1f7c":"code","743d0b4b":"code","545c98a1":"code","c9ce5aa6":"code","ead9e3a4":"code","ef661364":"code","faaa27b4":"code","057f1bc9":"code","7dd7b0d4":"markdown","bbdbf4e7":"markdown","27122b5c":"markdown","465feead":"markdown","368fdd40":"markdown","e1220305":"markdown","ecdb68f4":"markdown","a8866c8e":"markdown","0afdb7c7":"markdown","0a136bb8":"markdown"},"source":{"db30df63":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e077ed24":"df=pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","8289d964":"df","fbfc22ae":"X=df.drop(columns='Outcome')\ny=df['Outcome']","b7771be1":"from sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score, classification_report","5e091d00":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)","d3accfa5":"svm=SVC()","65202847":"svm.fit(X_train,y_train)","5732fcf2":"y_pred_train=svm.predict(X_train)\ny_pred_test=svm.predict(X_test)","46d64676":"print('Training Accuracy: ',accuracy_score(y_pred_train,y_train))\nprint('Testing Accuracy: ',accuracy_score(y_pred_test,y_test))","e55995ca":"print(\"Training Classification Report: \\n\", classification_report(y_train,y_pred_train))\nprint(\"Testing Classification Report: \\n\", classification_report(y_test,y_pred_test))","2c37c0b3":"c=np.linspace(0.05,20,20)\n\nscores_train=[]\nscores_test=[]\n\nfor i in range(len(c)):\n    svm=SVC(kernel='linear',C=c[i])\n    svm.fit(X_train,y_train)\n    y_pred_train=svm.predict(X_train)\n    y_pred_test=svm.predict(X_test)\n    scores_train.append(accuracy_score(y_pred_train,y_train))\n    scores_test.append(accuracy_score(y_pred_test,y_test))\n    print(f\"Completed {i}\")","f91d4f85":"plt.plot(c,scores_train, label='Training Accuracies')\nplt.plot(c,scores_test, label='Testing Accuracies')\nplt.legend()","bac0458c":"print(max(scores_test))\nc[np.argmax(scores_test)]","696bcfce":"c=np.linspace(0.05,20,20)\n\nscores_train=[]\nscores_test=[]\n\nfor i in range(len(c)):\n    svm=SVC(kernel='poly',C=c[i])\n    svm.fit(X_train,y_train)\n    y_pred_train=svm.predict(X_train)\n    y_pred_test=svm.predict(X_test)\n    scores_train.append(accuracy_score(y_pred_train,y_train))\n    scores_test.append(accuracy_score(y_pred_test,y_test))\n    print(f\"Completed {i}\")","c61e1f7c":"plt.plot(c,scores_train, label='Training Accuracies')\nplt.plot(c,scores_test, label='Testing Accuracies')\nplt.legend()","743d0b4b":"print(max(scores_test))\nc[np.argmax(scores_test)]","545c98a1":"c=np.linspace(0.05,20,20)\n\nscores_train=[]\nscores_test=[]\n\nfor i in range(len(c)):\n    svm=SVC(kernel='sigmoid',C=c[i])\n    svm.fit(X_train,y_train)\n    y_pred_train=svm.predict(X_train)\n    y_pred_test=svm.predict(X_test)\n    scores_train.append(accuracy_score(y_pred_train,y_train))\n    scores_test.append(accuracy_score(y_pred_test,y_test))\n    print(f\"Completed {i}\")","c9ce5aa6":"plt.plot(c,scores_train, label='Training Accuracies')\nplt.plot(c,scores_test, label='Testing Accuracies')\nplt.legend()","ead9e3a4":"print(max(scores_test))\nc[np.argmax(scores_test)]","ef661364":"c=np.linspace(0.05,20,20)\n\nscores_train=[]\nscores_test=[]\n\nfor i in range(len(c)):\n    svm=SVC(kernel='rbf',C=c[i])\n    svm.fit(X_train,y_train)\n    y_pred_train=svm.predict(X_train)\n    y_pred_test=svm.predict(X_test)\n    scores_train.append(accuracy_score(y_pred_train,y_train))\n    scores_test.append(accuracy_score(y_pred_test,y_test))\n    print(f\"Completed {i}\")","faaa27b4":"plt.plot(c,scores_train, label='Training Accuracies')\nplt.plot(c,scores_test, label='Testing Accuracies')\nplt.legend()","057f1bc9":"print(max(scores_test))\nc[np.argmax(scores_test)]","7dd7b0d4":"### Finding best C score for RBF Kernel","bbdbf4e7":"### Finding Best C score for sigmoid kernel","27122b5c":"### Finding best C score for Ploy Kernel","465feead":"#### Best Accuracy for Linear kernel 78.57% was at C=1.1 ","368fdd40":"#### Best accuracy for RBF kernel 81.1% was at C=12.65 ","e1220305":"### Finding best C score for Linear Kernel","ecdb68f4":"#### For Sigmoid kernel Accuracies when c> 0.1 are continously decreasing and accuracies when c<0.1 are stuck at 71% ","a8866c8e":"#### Best Accuracy for Poly kernel 81.82% was at C=13.7","0afdb7c7":"## Best Accuracy for this dataset was achived to be almost 81% using RBF kernel and when C was almost 13.","0a136bb8":"### Applying a Simple SVM to see initially how the accuracy scores are"}}