{"cell_type":{"7ba00853":"code","10474575":"code","01267436":"code","cc4def0d":"code","8e94bb3b":"code","f7e42c1a":"code","8a8baca8":"code","aee9a7c9":"code","37949410":"code","518d9568":"code","d25d4a9b":"code","4d2c5cd2":"code","0ecac5cf":"code","c009d050":"code","86c6dba1":"code","cbedcbd6":"code","663def2b":"code","e686b2a0":"code","c48e78b3":"code","75fb720c":"code","d1541601":"code","0944a3ff":"code","49e5fc5f":"code","fb1e6c33":"code","56062cfa":"code","c6df6aa3":"code","ee18e572":"code","b6b7444e":"code","36a6946d":"code","7b179bb0":"code","618fc4d2":"code","f23ab1d0":"code","0bda322f":"code","4f9e8eb0":"code","08bbe8ad":"code","0ab3f477":"code","2f04dacd":"code","098960d1":"code","a02d2e7b":"code","80232b72":"code","b7be2668":"code","3b1e46d0":"code","2828ba6a":"code","185e1671":"code","0e5d999f":"code","3959d81c":"code","2b7ae89e":"code","75e38893":"code","42bb5586":"code","6dcb0899":"code","3007cca8":"code","a657aaae":"code","7025530f":"code","2e18380a":"code","fe457e2b":"code","7224c24d":"code","0f0906f0":"code","69116695":"code","5391b220":"code","2df2f3d7":"code","0f964fa8":"code","9b16643d":"code","e9a4a782":"code","c0f3058d":"code","40b7dc86":"code","6fbb41dc":"code","52d12a30":"code","a3ae7859":"code","08ff8a76":"code","4e3237d6":"code","c3be0759":"code","aec817b4":"code","831ded8f":"code","727fa542":"code","a6dba3e2":"code","72a64d8b":"code","fbe949b9":"code","27ef1a40":"code","d3e49858":"code","014642b2":"code","e01faca4":"code","8c6b597e":"code","20d9eb80":"code","2aeab248":"code","bc4bac46":"code","d84ffc4f":"code","15e2e90b":"code","139b8824":"code","72264c1c":"code","a79c8c21":"code","0dbcffef":"code","8cd14bbf":"code","1d816c5a":"code","2d964580":"code","e0abe7ca":"code","948f4208":"code","07190f73":"code","6fb0aa4e":"code","4865ca01":"code","ce1df864":"code","0b9d9d1c":"code","133d4c9f":"code","53faac4b":"code","e5bb5754":"code","decfd450":"code","abb305e3":"code","bba3100b":"code","3a73cc89":"code","5d448447":"code","4eb7c055":"code","c0175d5e":"code","4fbb5131":"markdown","c5e197fe":"markdown","6d49112e":"markdown","2e5969ac":"markdown","7b799080":"markdown","c67012f7":"markdown","9d37f4d4":"markdown","f6ddd93d":"markdown","d29f6bdb":"markdown","a55790e8":"markdown","35ee3914":"markdown","40bbaf76":"markdown","c474e321":"markdown","7d4fede2":"markdown","4da0b44b":"markdown","df51e1a4":"markdown","6058bdce":"markdown","85955c10":"markdown","89d827cd":"markdown","2acf57c3":"markdown"},"source":{"7ba00853":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","10474575":"df=pd.read_csv('..\/input\/hotel-bookings\/hotel_bookings.csv')\ndf.head()","01267436":"df.shape","cc4def0d":"df.isna().sum()","8e94bb3b":"# Replace missing values:\n# agent: If no agency is given, booking was most likely made without one.\n# company: If none given, it was most likely private.\n# rest schould be self-explanatory.","f7e42c1a":"def data_clean(df):\n    df.fillna(0,inplace=True)\n    print(df.isnull().sum())","8a8baca8":"data_clean(df)","aee9a7c9":"list=['children','adults','babies']\n\nfor i in list:\n    print('{} has unique values as {}'.format(i,df[i].unique()))","37949410":"### seems to have some dirtiness in data as Adults,babies & children cant be zero at a same time","518d9568":"df.shape","d25d4a9b":"len(df[df['adults']==0])","4d2c5cd2":"filter=(df['children']==0) & (df['adults']==0) & (df['babies']==0)\ndf[filter]","0ecac5cf":"### Visualise Entire Dataframe where adult,children & babies are 0","c009d050":"pd.set_option('display.max_columns',32)","86c6dba1":"filter=(df['children']==0) & (df['adults']==0) & (df['babies']==0)\ndf[filter]","cbedcbd6":"data=df[~filter]","663def2b":"data.shape","e686b2a0":"data.head()","c48e78b3":"country_wise_data=data[data['is_canceled']==0]['country'].value_counts().reset_index()\ncountry_wise_data.columns=['country','No of guests']\ncountry_wise_data","75fb720c":"import folium\nfrom folium.plugins import HeatMap","d1541601":"basemap=folium.Map()","0944a3ff":"country_wise_data.dtypes","49e5fc5f":"import plotly.express as px","fb1e6c33":"# show on map\nmap_guest = px.choropleth(country_wise_data,\n                    locations=country_wise_data['country'],\n                    color=country_wise_data['No of guests'], \n                    hover_name=country_wise_data['country'], \n                    title=\"Home country of guests\")\nmap_guest.show()","56062cfa":"data.head()","c6df6aa3":"data2=data[data['is_canceled']==0]","ee18e572":"# boxplot:\nplt.figure(figsize=(12, 8))\nsns.boxplot(x=\"reserved_room_type\",\n            y=\"adr\",\n            hue=\"hotel\",\n            data=data2)\nplt.title(\"Price of room types per night and person\", fontsize=16)\nplt.xlabel(\"Room type\", fontsize=16)\nplt.ylabel(\"Price [EUR]\", fontsize=16)\nplt.legend(loc=\"upper right\")\nplt.ylim(0, 600)\nplt.show()","b6b7444e":"data_resort = data[(data[\"hotel\"] == \"Resort Hotel\") & (data[\"is_canceled\"] == 0)]\ndata_city = data[(data[\"hotel\"] == \"City Hotel\") & (data[\"is_canceled\"] == 0)]","36a6946d":"data_resort.head()","7b179bb0":"resort_hotel=data_resort.groupby(['arrival_date_month'])['adr'].mean().reset_index()\nresort_hotel","618fc4d2":"city_hotel=data_city.groupby(['arrival_date_month'])['adr'].mean().reset_index()\ncity_hotel","f23ab1d0":"final=resort_hotel.merge(city_hotel,on='arrival_date_month')\nfinal.columns=['month','price_for_resort','price_for_city_hotel']\nfinal","0bda322f":"!pip install sort-dataframeby-monthorweek\n\n## Dependency package needs to be installed\n!pip install sorted-months-weekdays","4f9e8eb0":"import sort_dataframeby_monthorweek as sd","08bbe8ad":"def sort_data(df,colname):\n    return sd.Sort_Dataframeby_Month(df,colname)\n","0ab3f477":"final=sort_data(final,'month')\nfinal","2f04dacd":"px.line(final, x='month', y=['price_for_resort','price_for_city_hotel'], title='Room price per night over the Months')","098960d1":"data_resort.head()","a02d2e7b":"rush_resort=data_resort['arrival_date_month'].value_counts().reset_index()\nrush_resort.columns=['month','no of guests']\nrush_resort","80232b72":"rush_city=data_city['arrival_date_month'].value_counts().reset_index()\nrush_city.columns=['month','no of guests']\nrush_city","b7be2668":"final_rush=rush_resort.merge(rush_city,on='month')\nfinal_rush.columns=['month','no of guests in resort','no of guest in city hotel']\nfinal_rush","3b1e46d0":"final_rush=sort_data(final_rush,'month')\nfinal_rush","2828ba6a":"final_rush.dtypes","185e1671":"final_rush.columns","0e5d999f":"px.line(data_frame=final_rush, x='month', y=['no of guests in resort','no of guest in city hotel'], title='Total no of guests per Months')","3959d81c":"filter=data['is_canceled']==0\nclean_data=data[filter]","2b7ae89e":"clean_data.head()","75e38893":"clean_data[\"total_nights\"] = clean_data[\"stays_in_weekend_nights\"] + clean_data[\"stays_in_week_nights\"]","42bb5586":"clean_data.head()","6dcb0899":"stay=clean_data.groupby(['total_nights','hotel']).agg('count').reset_index()\nstay=stay.iloc[:,0:3]\nstay.head()","3007cca8":"stay=stay.rename(columns={'is_canceled':'Number of stays'})\nstay.head()","a657aaae":"plt.figure(figsize=(20, 8))\nsns.barplot(x = \"total_nights\", y = \"Number of stays\" , hue=\"hotel\",\n            hue_order = [\"City Hotel\", \"Resort Hotel\"], data=stay)","7025530f":"data.head()","2e18380a":"co_relation=data.corr()\nco_relation","fe457e2b":"co_relation=data.corr()[\"is_canceled\"]\nco_relation","7224c24d":"co_relation.abs().sort_values(ascending=False)","0f0906f0":"co_relation.abs().sort_values(ascending=False)[1:]","69116695":"data.columns","5391b220":"data.groupby(\"is_canceled\")[\"reservation_status\"].value_counts()","2df2f3d7":"list_not=['days_in_waiting_list','arrival_date_year']","0f964fa8":"num_features=[col for col in data.columns if data[col].dtype!='O' and col not in list_not]\nnum_features","9b16643d":"cat_not=['arrival_date_year', 'assigned_room_type', 'booking_changes', 'reservation_status', 'country','days_in_waiting_list']","e9a4a782":"cat_features=[col for col in data.columns if data[col].dtype=='O' and col not in cat_not]\ncat_features","c0f3058d":"data_cat=data[cat_features]","40b7dc86":"data_cat.head()","6fbb41dc":"import warnings\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")","52d12a30":"data_cat['reservation_status_date']=pd.to_datetime(data_cat['reservation_status_date'])","a3ae7859":"data_cat['year']=data_cat['reservation_status_date'].dt.year\ndata_cat['month']=data_cat['reservation_status_date'].dt.month\ndata_cat['day']=data_cat['reservation_status_date'].dt.day","08ff8a76":"data_cat.head()","4e3237d6":"data_cat.drop('reservation_status_date',axis=1,inplace=True)","c3be0759":"data_cat['cancellation']=data['is_canceled']","aec817b4":"data_cat.columns","831ded8f":"cols=data_cat.columns[0:8]\ncols","727fa542":"for col in cols:\n    print(data_cat.groupby([col])['cancellation'].mean())\n    print('\\n')","a6dba3e2":"for col in cols:\n    print(data_cat.groupby([col])['cancellation'].mean().to_dict())\n    print('\\n')\n    ","72a64d8b":"df=data_cat.copy()","fbe949b9":"\nfor col in cols:\n    dict=data_cat.groupby([col])['cancellation'].mean().to_dict()\n    data_cat[col]=data_cat[col].map(dict)\n    ","27ef1a40":"data_cat.head(20)","d3e49858":"dataframe=pd.concat([data_cat,data[num_features]],axis=1)","014642b2":"dataframe.head()","e01faca4":"dataframe.drop(['cancellation'],axis=1,inplace=True)","8c6b597e":"dataframe.shape","20d9eb80":"sns.distplot(dataframe['lead_time'])","2aeab248":"import numpy as np\n\ndef handle_outlier(col):\n    dataframe[col]=np.log1p(dataframe[col])\n","bc4bac46":"handle_outlier('lead_time')","d84ffc4f":"sns.distplot(dataframe['lead_time'].dropna())","15e2e90b":"sns.distplot(dataframe['adr'])","139b8824":"handle_outlier('adr')","72264c1c":"sns.distplot(dataframe['adr'].dropna())","a79c8c21":"dataframe.isnull().sum()","0dbcffef":"dataframe.dropna(inplace=True)","8cd14bbf":"## separate dependent & independent features\ny=dataframe['is_canceled']\nx=dataframe.drop('is_canceled',axis=1)","1d816c5a":"\nfrom sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel\n","2d964580":"\n# select a suitable alpha (equivalent of penalty).\n# The bigger the alpha the less features that will be selected.\n\nfeature_sel_model = SelectFromModel(Lasso(alpha=0.005, random_state=0)) # remember to set the seed, the random state in this function\nfeature_sel_model.fit(x,y)","e0abe7ca":"feature_sel_model.get_support()","948f4208":"cols=x.columns","07190f73":"# let's print the number of total and selected features\n\n# this is how we can make a list of the selected features\nselected_feat = cols[(feature_sel_model.get_support())]","6fb0aa4e":"# let's print some stats\nprint('total features: {}'.format((x.shape[1])))\nprint('selected features: {}'.format(len(selected_feat)))\n","4865ca01":"selected_feat","ce1df864":"x=x[selected_feat]","0b9d9d1c":"\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.75,random_state=0)","133d4c9f":"from sklearn.linear_model import LogisticRegression\nlogreg=LogisticRegression()\nlogreg.fit(x_train,y_train)","53faac4b":"y_pred=logreg.predict(x_test)","e5bb5754":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,y_pred)\ncm\n","decfd450":"from sklearn.metrics import accuracy_score\nscore=accuracy_score(y_test,y_pred)\nscore\n","abb305e3":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(logreg,x,y,cv=10)","bba3100b":"score","3a73cc89":"score.mean()","5d448447":"#fit naive bayes\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier","4eb7c055":"### classifier models\nmodels = []\nmodels.append(('LogisticRegression', LogisticRegression()))\nmodels.append(('Naive Bayes',GaussianNB()))\nmodels.append(('RandomForest', RandomForestClassifier()))\nmodels.append(('Decision Tree', DecisionTreeClassifier()))\nmodels.append(('KNN', KNeighborsClassifier(n_neighbors = 5)))","c0175d5e":"\n\nfor name, model in models:\n    print(name)\n    model.fit(x_train, y_train)\n    \n    # Make predictions.\n    predictions = model.predict(x_test)\n\n    # Compute the error.\n    from sklearn.metrics import confusion_matrix\n    print(confusion_matrix(predictions, y_test))\n\n    from sklearn.metrics import accuracy_score\n    print(accuracy_score(predictions,y_test))\n    print('\\n')","4fbb5131":"## How much do guests pay for a room per night?","c5e197fe":"#### Both hotels have different room types and different meal arrangements. Seasonal factors are also important. So the prices vary a lot. Since no currency information is given, but Portugal is part of the European Monetary Union, I assume that all prices are in EUR.","6d49112e":"### Feature Encoding","2e5969ac":"#### People from all over the world are staying in these two hotels. Most guests are from Portugal and other countries in Europe","7b799080":"    From this list it is apparent that lead_time, total_of_special_requests, required_car_parking_spaces, booking_changes and previous_cancellations are the 5 most important numerical features.\n    However, to predict whether or not a booking will be canceled, the number of booking changes is a possible source of leakage, because this information can change over time.\n    I will also not include days_in_waiting_list,booking changes  and arrival_date_year.\n\n    The most important feature to exclude is the \"reservation_status\":","c67012f7":"### Play with multiple Algos","9d37f4d4":"### Perform Mean Encoding Technique ","f6ddd93d":"### This clearly shows that the prices in the Resort hotel are much higher during the summer (no surprise here)., The price of the city hotel varies less and is most expensive during spring and autumn.","d29f6bdb":"## How does the price per night vary over the year?","a55790e8":"### Select important Features using Co-relation","35ee3914":"## How long do people stay at the hotels?","40bbaf76":"### splitting dataset & model Building","c474e321":"#### This figure shows the average price per room, depending on its type and the standard deviation. Note that due to data anonymization rooms with the same type letter may not necessarily be the same across hotels.","7d4fede2":"### Handle Outliers","4da0b44b":"## Which are the most busy month or in which months Guests are high?","df51e1a4":"##  Where do the guests come from?Lets perform Spatial Analysis","6058bdce":"### Cross validate your model","85955c10":"### Feature Importance","89d827cd":"### Conclusion\n     The City hotel has more guests during spring and autumn, when the prices are also highest.\n    In July and August there are less visitors, although prices are lower.\n\n    Guest numbers for the Resort hotel go down slighty from June to September, which is also when the prices are highest.\n    Both hotels have the fewest guests during the winter.","2acf57c3":"#### now we will observe over here is month column is not in order, & if we will visualise we will get improper conclusion\n#### so very first we have to provide right hierarchy to the month column"}}