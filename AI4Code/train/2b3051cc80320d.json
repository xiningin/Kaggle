{"cell_type":{"716168d4":"code","adf82995":"code","b727f888":"code","19cb50a5":"code","c743f72a":"code","04280936":"code","833a48f5":"code","1e065359":"markdown","cf90ac15":"markdown","6047c586":"markdown","75c87a08":"markdown","e8ac0a11":"markdown","cf9ce9bb":"markdown","4e13e626":"markdown"},"source":{"716168d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","adf82995":"train_sales = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\nsubmission_file = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv')\nsell_prices = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv')\ncalendar = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')","b727f888":"def disp_price_demand(product,plot=False):\n    \n    # create series to map the day index to the week number\n    df = pd.Series(calendar.wm_yr_wk.values,index=calendar.d)\n\n    # keep only sale data for product\n    item1 = sell_prices[sell_prices.item_id.isin([product])]\n    \n    # create series to map week number to price\n    df2 = item1.groupby('wm_yr_wk').mean().sell_price\n\n    # keep only data for product\n    sale_item = train_sales[train_sales.item_id.isin([product])]\n    \n    # sum over all stores\n    sales = sale_item.sum()[6:]\n    \n    # create dataframe and use df and df2 to map over the day of sales into the sale price\n    total = pd.DataFrame()\n    total[\"d\"] = sales.index\n    total[\"sales\"] = sales.values.astype(int)\n    total[\"wk\"] = total.d.map(df).fillna(0).astype(int)\n    total[\"price\"] = total.wk.map(df2)\n\n\n    # drop nans and round to 1 decimal place\n    tdf = total.dropna()\n    tdf.price = tdf.price.round(1)\n    \n    #print('total_sales: ',tdf.sales.sum())\n    \n    # get the average number of sales for a given price\n    tdf1 = tdf.groupby('price').mean()\n    \n    # get the std of sales for a given price\n    error = tdf.groupby('price').std().sales\n    \n    # performing a fit so want at least 3 different prices\n    if len(tdf1)>2:\n        \n        # get linear fit\n        m,c = np.polyfit(tdf1.sales,tdf1.index,1)\n        \n        # create values for plot\n        xvalues=np.linspace(tdf1.sales.min()-error.mean(),tdf1.sales.max()+error.mean(),10,)\n        yvalues =  m*xvalues + c\n        \n        # get predictions for mse\n        y_pred = m*(tdf1.sales) + c\n                \n        mse = mean_squared_error(y_pred,tdf1.index)\n\n        if plot:\n            # plot fit\n            plt.plot(xvalues,yvalues)\n            \n            # plot data with error bars\n            plt.errorbar(tdf1.sales,tdf1.index,xerr=error,marker='o')\n            plt.xlabel('quantity sold \/day')\n            plt.ylabel('price')\n            \n            plt.show()\n\n        return mse\n    else:\n        return 1000","19cb50a5":"# get a subsection of data\nnames = sorted(train_sales.item_id.unique()[::20])\nnum = len(names)\nmse_list=np.zeros(num)\n\nfor idx in tqdm(range(num)):\n    product = names[idx]\n    #print('product: ',product)\n    mse = disp_price_demand(product)\n    mse_list[idx] = mse","c743f72a":"for i in np.argsort(mse_list)[:10]:\n    product = names[i]\n    print(product)\n    mse = disp_price_demand(product,plot=True)\n    print(mse_list[i])","04280936":"for i in np.argsort(mse_list)[:20]:\n    product = names[i]\n    print(product)","833a48f5":"for i in np.argsort(mse_list)[90:100]:\n    product = names[i]\n    print(product)\n    mse = disp_price_demand(product,plot=True)\n    print(mse_list[i])","1e065359":"## function creates the price demand curve, attempts a linear fit of the data and returns the mean-squared-error","cf90ac15":"## I had done a little work recently on price elasticity so wanted to see if i could create a price-demand curve for some of these products","6047c586":"## Display some bad ones","75c87a08":"# Price Demand Curve","e8ac0a11":"<img src=\"https:\/\/www.investopedia.com\/thmb\/OeU-W_PH3kN8cTLz-Fg1Le23Zfw=\/1000x1000\/smart\/filters:no_upscale()\/demand_curve2-1a87890730a044e79de897ddb61ccc76.PNG\" width=500\/>","cf9ce9bb":"* ## Most products do not show a clear demand curve\n\n* ## Many also show a reverse trend with quantity and price\n\n* ## There is a large deviation in quantity sold for a given price\n\n# As expected, quantity sold is not merely a function of price","4e13e626":"## Display the best fits"}}