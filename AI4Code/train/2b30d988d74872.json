{"cell_type":{"905ee23d":"code","6af1c668":"code","d4370c7c":"code","84d42068":"code","44d8341f":"code","defcebb0":"code","178f89ed":"code","05aa1a49":"code","45b0abf3":"code","a0a13001":"code","8aae529a":"code","e3bfcc14":"code","b8e10505":"code","ae8fc921":"code","169474de":"code","47db382d":"code","a27bbece":"code","55b6b483":"code","f3405dfc":"code","1aeb0bb9":"code","f37110d6":"code","ec46e5c2":"code","4f00ae68":"code","241a6521":"code","03c3fdf4":"code","4a9085c5":"code","33326e40":"markdown","c34faf7e":"markdown","042429ea":"markdown","3cd978c4":"markdown","f4e0e5fe":"markdown","bb84a59c":"markdown","e92f2ae4":"markdown","345903cb":"markdown","152b8c4e":"markdown","1c36c2fd":"markdown","0820203e":"markdown","3aafc8d9":"markdown","67c9ec5b":"markdown","2547134d":"markdown","e1ead014":"markdown","7c46abcd":"markdown","869c69fc":"markdown","20195154":"markdown","d208c8e1":"markdown","4ece425a":"markdown","a608a8b8":"markdown","5a2206e5":"markdown","3e35c6b6":"markdown","fbdd8eef":"markdown","dab32939":"markdown","6938a7e3":"markdown","80ee06d8":"markdown","97f02c89":"markdown","e2f9c7e5":"markdown","acdbee02":"markdown","cdf7df34":"markdown","6dec2756":"markdown","bb59c724":"markdown","c64319cc":"markdown","b0d540f1":"markdown"},"source":{"905ee23d":"import pandas as pd  # Data manipulation and reading\nimport numpy as np # Algebra operations package\nimport seaborn as sns # Seaborn data visualization\nfrom scipy.stats import chi2_contingency # Chi-square analysis for categorical variables\nimport matplotlib.pyplot as plt  # Data visualization - matplotlib","6af1c668":"pd.set_option('display.max_columns', None)","d4370c7c":"# Loading the data\ndata_mushrooms = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\ndata_mushrooms.head(5)","84d42068":"data_mushrooms['cap-shape'] = data_mushrooms['cap-shape'].replace({ 'b':'bell','c':'conical','x':'convex', 'f':'flat', 'k':'knobbed', 's':'sunken' })\ndata_mushrooms['cap-surface'] =  data_mushrooms['cap-surface'].replace({'f':'fibrous','g':'grooves','y':'scaly','s':'smooth' })\ndata_mushrooms['cap-color'] = data_mushrooms['cap-color'].replace({'n':'brown', 'b':'buff','c':'cinnamon','g':'gray', 'r':'green', 'p':'pink','u':'purple','e':'red','w':'white','y':'yellow' })\ndata_mushrooms['bruises'] =data_mushrooms['bruises'].replace({'t':'bruises','f':'no' })\ndata_mushrooms['odor'] = data_mushrooms['odor'].replace({ 'a':'almond','l':'anise','c':'creosote','y':'fishy','f':'foul', 'm':'musty','n':'none','p':'pungent','s':'spicy' })\ndata_mushrooms['gill-attachment'] = data_mushrooms['gill-attachment'].replace({ 'a':'attached','d':'descending','f':'free','n':'notched' })\ndata_mushrooms['gill-spacing'] = data_mushrooms['gill-spacing'].replace({'c':'close','w':'crowded','d':'distant' })\ndata_mushrooms['gill-size'] = data_mushrooms['gill-size'].replace({ 'b':'broad','n':'narrow' })\ndata_mushrooms['gill-color'] = data_mushrooms['gill-color'].replace({ 'k':'black','n':'brown','b':'buff','h':'chocolate','g':'gray','r':'green','o':'orange','p':'pink','u':'purple','e':'red', 'w':'white','y':'yellow' })\ndata_mushrooms['stalk-shape'] = data_mushrooms['stalk-shape'].replace({ 'e':'enlarging','t':'tapering' })\ndata_mushrooms['stalk-root'] = data_mushrooms['stalk-root'].replace({ 'b':'bulbous','c':'club','u':'cup','e':'equal', 'z':'rhizomorphs','r':'rooted','?':'missing' })\ndata_mushrooms['stalk-surface-above-ring'] = data_mushrooms['stalk-surface-above-ring'].replace({ 'f':'fibrous','y':'scaly','k':'silky','s':'smooth' })\ndata_mushrooms['stalk-surface-below-ring'] = data_mushrooms['stalk-surface-below-ring'].replace({ 'f':'fibrous','y':'scaly','k':'silky','s':'smooth' })\ndata_mushrooms['stalk-color-above-ring'] = data_mushrooms['stalk-color-above-ring'].replace({ 'n': 'brown','b':'buff','c':'cinnamon','g':'gray','o':'orange', 'p':'pink','e':'red','w':'white','y':'yellow'})\ndata_mushrooms['stalk-color-below-ring'] = data_mushrooms['stalk-color-below-ring'].replace({ 'n': 'brown','b':'buff','c':'cinnamon','g':'gray','o':'orange', 'p':'pink','e':'red','w':'white','y':'yellow'})\ndata_mushrooms['veil-type'] = data_mushrooms['veil-type'].replace({ 'p':'partial','u':'universal' })\ndata_mushrooms['veil-color'] = data_mushrooms['veil-color'].replace({ 'n':'brown','o':'orange','w':'white','y':'yellow' })\ndata_mushrooms['ring-number'] =data_mushrooms['ring-number'].replace({ 'n':'none', 'o':'one','t':'two' })\ndata_mushrooms['ring-type'] = data_mushrooms['ring-type'].replace({'c':'cobwebby','e':'evanescent','f':'flaring','l':'large', 'n':'none','p':'pendant','s':'sheathing','z':'zone' })\ndata_mushrooms['spore-print-color'] = data_mushrooms['spore-print-color'].replace({'k':'black','n':'brown','b':'buff','h':'chocolate','r':'green', 'o':'orange','u':'purple','w':'white','y':'yellow'})\ndata_mushrooms['population'] = data_mushrooms['population'].replace({ 'a':'abundant','c':'clustered','n':'numerous', 's':'scattered','v':'several','y':'solitary' })\ndata_mushrooms['habitat'] = data_mushrooms['habitat'].replace({  'g':'grasses','l':'leaves','m':'meadows','p':'paths', 'u':'urban','w':'waste','d':'woods' })\ndata_mushrooms['class'] = data_mushrooms['class'].replace({ 'p':'Poisonous' , 'e':'Edible'})","44d8341f":"# Data Transformation\ndata_mushrooms.head(5)","defcebb0":"LABELS = [\"Edible\", \"Poisonous\"]\nclass_counts = pd.value_counts(data_mushrooms['class'], sort = True)\nclass_counts.plot(kind = 'bar', rot=0, color=['#3399ff','red']) #Added colors\nplt.title('Edible \/ Poisonous count')\nplt.xticks(range(2), LABELS)\nplt.xlabel(\"Class\")\nplt.ylabel(\"\");","178f89ed":"g = sns.catplot(x=\"spore-print-color\", col=\"class\", col_wrap=4,\n            data=data_mushrooms,\n            kind=\"count\", height=3.5, aspect=.9)\ng.set_xticklabels(rotation=45)\nplt.show()","05aa1a49":"g = sns.catplot(x=\"odor\", col=\"class\", col_wrap=4,\n            data=data_mushrooms,\n            kind=\"count\", height=3.5, aspect=.9)\ng.set_xticklabels(rotation=45)\nplt.show()","45b0abf3":"# Determining missing values \ndata_mushrooms.isnull().values.any() # There is possibly a category of missing value that differs from none.","a0a13001":"cols = list(data_mushrooms.columns) # List of columns\n\nobs =[] # Keeping the observed matrix..\nchi_square = [] # calculated p-value\ncorr = pd.DataFrame()\nk = 0\n\nfor j in cols:\n    for i in cols:\n        obs.append(pd.crosstab(data_mushrooms[j],data_mushrooms[i]))\n        aux = chi2_contingency(observed= pd.crosstab(data_mushrooms['class'],data_mushrooms[i])) # Matriz de contig\u00eancia para cada par (n,m) de vari\u00e1veis\n        chi_square.append(aux[1])\n    corr[j] = chi_square\n    chi_square = []\n    k = k + 1","8aae529a":"corr.index = cols\ncorr = round(corr, 2)\nsns.heatmap(corr, annot=True, cmap=\"YlGnBu\")\nplt.show()","e3bfcc14":"data_mushrooms['veil-type'].value_counts()","b8e10505":"data_mushrooms['stalk-root'].value_counts() # 30% missing values = ?","ae8fc921":"data_mushrooms.drop(['veil-type','stalk-root'], axis=1, inplace = True)","169474de":"from sklearn.base import BaseEstimator #Packages needed for development\nfrom sklearn.base import TransformerMixin\n\nclass LowFrequency():\n    \n    def __init__(self):\n        pass\n\n    def fit(self, X,y=None):\n        return self\n    \n    def transform(self, X,y=None):\n        \n        X_ = X.copy()\n        \n        def transf_low_freq(df, col, K):\n\n            SIZE = len(df)\n\n            freq_col = df[col].value_counts()\/SIZE # frequency calculation\n            quantile = freq_col.quantile(q=K) #custom percentile\n\n            less_freq_col = freq_col[freq_col <= quantile]\n            df.loc[df[col].isin(less_freq_col.index.tolist()), col] = \"others\" # Categoria outros.\n \n            return (df)\n\n        list_cols = list(X_.columns)\n\n        for item in list_cols:\n            transf_low_freq(X_, item, K = 0.1)\n        \n        return(X_)","47db382d":"# Pipeline libraries\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\n\n# Template packages\nfrom sklearn.ensemble import RandomForestClassifier ","a27bbece":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import FeatureUnion\n\nle = LabelEncoder()\nX = data_mushrooms.drop('class', axis = 1)\nlist_cols = list(X.columns)\n\n# Using featureUnion, using my custom function\nunion = FeatureUnion([(\"lfreq\", LowFrequency())])\n\n# Features and transformation\nX = union.fit_transform(X)\nX = pd.DataFrame(X, columns=list_cols)\nX = pd.get_dummies(X, columns = X.columns)\n\n# Class \ny = data_mushrooms['class'].values\ny = le.fit_transform(y)","55b6b483":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2020) # Hould-out","f3405dfc":"from sklearn.model_selection import GridSearchCV\n\npipe_rf = Pipeline( steps = [('rf',RandomForestClassifier(random_state=2020))]) \n\nparam_grid_rf = {'rf__criterion': [\"gini\", \"entropy\"], \n                  'rf__n_estimators': [50, 100, 150],\n                  'rf__max_depth': range(0,7),\n                  'rf__max_features': [5, 7, 10, 15],\n                  'rf__min_samples_split' : [0.005, 0.08]}","1aeb0bb9":"grid_rf = GridSearchCV(pipe_rf, \n                    param_grid=param_grid_rf, \n                    cv=10, # CV = 10\n                    verbose = 2,\n                    scoring='accuracy', \n                    n_jobs = -1)\n\ngrid_rf.fit(X_train, y_train)","f37110d6":"# Final Model\ngrid_rf.best_estimator_","ec46e5c2":"feat_importances = pd.Series(grid_rf.best_estimator_.named_steps[\"rf\"].feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(10).plot(kind='barh');","4f00ae68":"ypred = grid_rf.predict(X_test) # Using the test base","241a6521":"from sklearn.metrics import confusion_matrix\nM_confusao = confusion_matrix(y_test, ypred)\n\n# Confusion matrix plot\nax= plt.subplot()\nsns.heatmap(M_confusao, annot=True, ax = ax, annot_kws={\"size\": 10},fmt=\".0f\");\nax.set_xlabel('Predict');ax.set_ylabel('Real'); \nax.set_title('Confusion Matrix'); \nplt.grid(False)\nax.xaxis.set_ticklabels(['Edible', 'Poisonous']); ax.yaxis.set_ticklabels(['Edible', 'Poisonous']);","03c3fdf4":"# Table of classification measures in both classes 0 = Edible, 1 = Poisonous\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, ypred, digits=5))","4a9085c5":"# Generated ROC AUC curve\n\nimport sklearn.metrics as metrics\n\ny_pred_proba = grid_rf.predict_proba(X_test)[::,1]\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(y_test, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","33326e40":"One of the interesting ways to identify an Edible mushroom is by the odor or even the color of its spores [1]. In the Figure below it is possible to observe different spores and \/ or colors of different populations of mushrooms, so it is up to the researcher to analyze these and other characteristics that can be complementary to classify whether an edible mushroom or not.\n\n[1] https:\/\/www.wildfooduk.com\/articles\/how-to-tell-the-difference-between-poisonous-and-edible-mushrooms\/","c34faf7e":"\nBased on the previous analyzes, we have all available information that will be used in the proposed model. As an experimental form, we have a **class** developed for **FeatureUnion**, the purpose of this class is to summarize the frequencies of the categories of each variable in the data set, and to transform categories with low frequency **(Based on a 10% percertil - Customized)** in the **others** category (Group), so that we can reduce the variation of the categories of variables in our data set.","042429ea":"\nIn order to identify **Poisonous mushrooms**, this work proposes to expose some statistical approaches in the analysis of the studied variables and the use of the Random Forest Model to classify whether a particular mushroom can be harmful to health or not.","3cd978c4":"We want to understand how each variable is associated with each other, with the existence of dependent variables we have evidence that possibly the variables can influence each other and there is a distinction between the categories. With a **Chi-square** test we can determine this influence under a hypothesis test. The **null hypothesis** is that the variables are not associated, in other words, they are independent and the **alternative hypothesis** is that the variables are associated, or dependent.\n\n\n$$\\left\\{\\begin{matrix}\nH_0: Independence\n\\\\ \nH_1: Dependency\n\\end{matrix}\\right.$$","f4e0e5fe":"### Conclusion\n\n\nAccording to the previous results we see that the model had a great performance, we have an AUC of approximately 1 and we had as a result of **accuracy** of **99.95%**. In addition, the **recall** and **precision** are considerably high even when validating on the test basis (30%), that is, the model proposed by this work is effective, being a possible model that we can use in classification of a poisonous mushroom and an edible one.","bb84a59c":"![image.png](attachment:image.png)","e92f2ae4":"\nIn this step, in view of the trained model, we will classify the observations based on my test base (30%) of the edible poisonous mushrooms.","345903cb":"### Objective","152b8c4e":"### Exploratory Analysis","1c36c2fd":"As shown in the Figure below, represented by p-values from the Chi-square test, we see that the **p-value** of greater intensity is the variable **veil-type** under all other variables that we have, that is , we have evidence that we can accept $H_0$ under a significance level of $\\ alpha =$ 5%. Therefore, this variable is independent and there is no direct association between it and the other variables, so by preference it will be removed from the model that will be adjusted.","0820203e":"We want to understand the frequency of edible and poisonous mushrooms in our base, it is important to note that both categories are substantially balanced, with Edible 48% and Poisonous 52% under the total of observations.","3aafc8d9":"### Variables of Model Importance","67c9ec5b":"### Curva ROC - AUC","2547134d":"## **Mushroom Classification**","e1ead014":"\n### Packages used for the proposed model","7c46abcd":"###  Dependency analysis between qualitative variables","869c69fc":"### Prediction of the generated Model","20195154":"### Introduction\n\nThe dataset consists of 22 variables that characterize the mushrooms of the Agaricaceae and Lepiota family, classifying them as edible (e - edible) or poisonous (p - poisonous). We have a total of 8124 observations.","d208c8e1":"Look that the variables in this analysis are only qualitatives, all in their nominal state, that is, there are no levels more important than another in each of the analyzed variables. The categories of each variable are represented by letters, this meaning was transformed into literal in order to bring an interpretation to the problem.","4ece425a":"#### Best Model","a608a8b8":"### Starter packages used for data visualization","5a2206e5":"\nApparently the variables that we have can discriminate well a poisonous mushroom from an edible potential, it is interesting to point out that with other variables we can have a greater gain of information on the characteristics of a mushroom, in order to classify potential poisonous mushrooms from edible.","3e35c6b6":"\nThe proposed model will be Random Forest for this work, and the main reasons for having used Random Forest is because it is a **nonparametric** model and brings good results in the market today, in addition to being less sensitive to outliers.","fbdd8eef":"As hyperparameters of the best model we have:\n* The best criterion for dividing the tree is Entropy.\n* Maximum depth of each tree is at most up to 6.\n* Minimum number of sample divisions on each sheet is 0.005.\n* Number of estimators (Trees) used is size 150.\n* Maximum number of features in each adjusted tree is 15.","dab32939":"It is interesting to note that the proposed model generates the variables that have the greatest impact on the classification between a poisonous mushroom and a non-poisonous one, we see from the Figure below **(Top 10 most important variables)**, that the most important variable is **odor in category none (no smell)** and the second variable is **odor foul (Fetid)** corroborating previous exploratory analyzes.","6938a7e3":"In the Figure below, it is interesting to note that the largest spore-print-color categories for poison mushrooms (Poisonous) are chocolate (chocolate) and white (white), implying that the highest frequency of poisonous mushrooms contains that coloring. Edible mushrooms (Edible) are mostly black (black) and brown (brown) in their spores, but even so there is a small existence of edible mushrooms that contain the coloration of chocolate and white spores.","80ee06d8":"### Model Application\n\n#### Random Forest\n\nIn order to capture the best model for this data set, this work proposes the use of GridSearch to be able to tune the model and find the best hyperparameters.","97f02c89":"### setup-premilinary settings","e2f9c7e5":"**Note:** We do not use **lowFrequency ()** (**My personalized class**) and **OnehotEnconder()** in **Pipeline** to not have problems with the number of training base columns be different from the test, but if we want to use an entire base there is no problem using the **custom function** and **OnehotEnconder**, but with this we can have possible overfitting contingencies.","acdbee02":"\nRegarding the odor of the mushroom, we see that the essential characteristic of a poisonous mushroom is that it has an unpleasant (fetid) odor, being referred to by foul. Edible mushrooms tend to have no smell at all.","cdf7df34":"### Transformation of Variables using FeatureUnion and OneHotEncoder \/ LabelEnconder","6dec2756":"In the Figure below, we see the division of our data set in training and testing, the training base will serve us to train the model **(Using cross-validation K = 10 and grid search)** and adjust the best hyperparameters to infer in future classifications.","bb59c724":"<img src=\"https:\/\/chrisdrury.co.uk\/wp-content\/uploads\/2012\/03\/spore_grid_web-849x600.jpg\" width=\"350px\">","c64319cc":"Another interesting point is that we have a lot of missing information in the stalk-root variable, there is an information loss of 30%, so to avoid problems with a bias that we can put in the model it will be excluded.","b0d540f1":"### Data modeling"}}