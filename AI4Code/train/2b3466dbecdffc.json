{"cell_type":{"c1eab00f":"code","4e47c43c":"code","241ceb7f":"code","03fd6740":"code","30b09634":"code","28d40abe":"code","b674732f":"code","985b9ce0":"code","51393fab":"code","583ff419":"code","19847697":"code","9a34a473":"code","1a15b4b6":"code","c301b6ed":"code","8fcdc2f6":"code","aee0796b":"code","2d69bea9":"markdown","0d6ccb66":"markdown","3035f35f":"markdown","56e7be9a":"markdown","8ee61f89":"markdown","e4ecb3d7":"markdown","c88527a5":"markdown","76212432":"markdown","72039449":"markdown","842b0b0f":"markdown","f1235fb2":"markdown","e9d4f3a6":"markdown"},"source":{"c1eab00f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4e47c43c":"dataset = pd.read_csv('\/kaggle\/input\/buy-product-based-on-county-age-and-salary\/Data.csv')","241ceb7f":"dataset","03fd6740":"x = dataset.iloc[:,:-1].values \nx","30b09634":"y = dataset.iloc[:,3].values\ny","28d40abe":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan,strategy = \"mean\")\nimputer = imputer.fit(x[:,1:3])\nx[:,1:3] = imputer.transform(x[:,1:3])\nx","b674732f":"from sklearn.preprocessing import LabelEncoder,OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nlabelencoder_x = LabelEncoder()","985b9ce0":"x[:,0] = labelencoder_x.fit_transform(x[:,0])\nx","51393fab":"transformer = ColumnTransformer(\n    transformers = [\n        (\"OneHot\",\n         OneHotEncoder(),\n         [0]\n        )\n    ],\n    remainder='passthrough'\n)\nx = transformer.fit_transform(x)\nx","583ff419":"labelencoder_y = LabelEncoder() \ny = labelencoder_y.fit_transform(y)\ny","19847697":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state = 0) #'0.2' means 20%\nx_train","9a34a473":"y_train","1a15b4b6":"x_test","c301b6ed":"x_train","8fcdc2f6":"from sklearn.preprocessing import StandardScaler\nsc_x = StandardScaler()\nx_train = sc_x.fit_transform(x_train)\nx_test = sc_x.transform(x_test)\nx_train","aee0796b":"x_test","2d69bea9":"## Feature Scaling","0d6ccb66":"## Encoding catagorical Data","3035f35f":"### Encode the country names into integers","56e7be9a":"### AS there are only two type varibales in y , yes and no we can use labelencoder","8ee61f89":"##### For 2d array : [rows,colums] -> (from 1 to : n-1 ) , ':' means all , ':-1' means all except last one","e4ecb3d7":"### For Independent variable we will take all the rows and all  the colum except last one in a array","c88527a5":"## Split the dataset into training set  and Test Set","76212432":"## Handling the missing data","72039449":"## Importing Datasets ","842b0b0f":"### 3rd column is  Dependent variable and take it as y","f1235fb2":"### Encode Dummy variables like ","e9d4f3a6":"##### Now this could be problem for machine that they can assume that lebel 0 is less then 1 or 2 but they are just labels"}}