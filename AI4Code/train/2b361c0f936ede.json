{"cell_type":{"24c91681":"code","18551638":"code","3973b5c8":"code","ef0f4aca":"code","a4548f7a":"code","187fde2c":"code","958151d8":"code","ffc56122":"code","dbd744bf":"code","d69c11e6":"code","5fd83520":"code","6ecc9c36":"code","19f0a31e":"code","1492a0e3":"code","9930a0da":"code","50df4491":"code","e5f1dc1f":"code","79041bf3":"code","8e6b073f":"code","bc4e7348":"code","9b0ba572":"code","bb400ca6":"code","a93134a7":"code","4984a7e7":"code","c5eadb96":"code","1d74ee3c":"code","126bcbb3":"code","06fb610a":"code","430c71b8":"code","8880db3d":"markdown"},"source":{"24c91681":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18551638":"import pandas as pd","3973b5c8":"train = pd.read_csv('\/kaggle\/input\/malaria-detection-train\/train.csv')","ef0f4aca":"test = pd.read_csv('\/kaggle\/input\/malaria-detection-test\/test.csv')","a4548f7a":"train.head()","187fde2c":"import matplotlib.pyplot as plt","958151d8":"X_train = train.drop(['label'],axis=1).values\ny_train = train['label'].values","ffc56122":"X_test = test.drop(['label'],axis=1).values\ny_test = test['label'].values","dbd744bf":"plt.imshow(X_train[2000].reshape(50,50),cmap='gray')\nprint(y_train[2000])","d69c11e6":"plt.imshow(X_train[20000].reshape(50,50),cmap='gray')\nprint(y_train[20000])","5fd83520":"X_train = X_train.reshape(X_train.shape[0],50,50,1).astype('float32')\nX_train = X_train \/ 255.0\n\nX_test = X_test.reshape(X_test.shape[0],50,50,1).astype('float32')\nX_test = X_test \/ 255.0","6ecc9c36":"from sklearn.preprocessing import LabelBinarizer\nlb = LabelBinarizer()\ny_train = lb.fit_transform(y_train)\ny_test = lb.fit_transform(y_test)","19f0a31e":"y_train[0]","1492a0e3":"import tensorflow as tf","9930a0da":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import *","50df4491":"model = Sequential()","e5f1dc1f":"model.add(Conv2D(filters=16,kernel_size=3,padding='same',activation='relu',input_shape=(50,50,1)))\nmodel.add(MaxPooling2D(pool_size=2,strides=2))\n\nmodel.add(Conv2D(filters=32,kernel_size=3,padding='same',activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2,strides=2))\n\nmodel.add(Conv2D(filters=64,kernel_size=3,padding='same',activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2,strides=2))\n\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(units=200,activation='relu'))\n\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(units=2,activation='softmax'))","79041bf3":"from tensorflow.keras.utils import to_categorical","8e6b073f":"y_train = to_categorical(y_train)\ny_test = to_categorical(y_test)","bc4e7348":"model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","9b0ba572":"model.fit(X_train,y_train_1,batch_size=50,epochs=20)","bb400ca6":"predictions = model.evaluate(X_test,y_test)","a93134a7":"index=100\nplt.imshow(X_test[index].reshape(50,50),cmap='gray')\nprint(y_test[index])","4984a7e7":"X_test[index]","c5eadb96":"X_test[0].shape","1d74ee3c":"import numpy as np\ntest_image = np.expand_dims(X_test[4200], axis = 0)\nresult = model.predict(test_image)\nresult = result[0].argmax()\n","126bcbb3":"print(result)","06fb610a":"if result==0:\n    pred='Infected'\nelse:\n    pred='uninfected'","430c71b8":"pred","8880db3d":"0 -> Infected   \n1  -> Uninfected"}}