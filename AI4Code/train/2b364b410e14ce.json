{"cell_type":{"175d9a81":"code","ff810720":"code","f197b791":"code","6a318b23":"code","9b358bc3":"code","ad18d1e2":"code","93d30ac1":"code","e9c56069":"code","0597787d":"code","616d6b9d":"code","48b61750":"code","6cc2e099":"code","5064c6d2":"code","51dc2f7e":"code","26b8c059":"code","9e91f7a0":"code","c07460ea":"code","d21d16f0":"code","b2888918":"code","9835ddf0":"code","0ca4f3cf":"code","c97f43aa":"code","49ec3e3f":"code","4ed65859":"code","41e84879":"code","ffeb00c4":"code","111e1fdb":"code","95810f11":"code","65e60870":"code","ddce164b":"code","fc99dbb6":"code","d840c4f9":"markdown","45e21f1f":"markdown","3da319af":"markdown","a6918595":"markdown","f40cc325":"markdown","0c2c435a":"markdown","d40cc49c":"markdown","38868202":"markdown","b40a8467":"markdown","66902cb0":"markdown","ea4d1563":"markdown","6f7e22da":"markdown","e885ffb8":"markdown","d8a18a8a":"markdown","b29a7713":"markdown","b9a32e3f":"markdown","e47b9032":"markdown","d3f5438a":"markdown","b713cc3e":"markdown","a462addf":"markdown","9b3eeab1":"markdown","d85b9644":"markdown","1e53c3b1":"markdown","5acdfb25":"markdown","c8e5ebbf":"markdown","efe1e983":"markdown","f5b5b50e":"markdown","d053f310":"markdown","e5095808":"markdown"},"source":{"175d9a81":"from IPython.core.display import display, HTML\n\nimport pandas as pd\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\nimport os\nimport gc\n\nfrom joblib import Parallel, delayed\n\nfrom sklearn import preprocessing, model_selection\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import r2_score\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport numpy.matlib\nimport warnings\nwarnings.simplefilter('ignore')","ff810720":"train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntrain","f197b791":"plt.figure(figsize=(10,8))\nsns.heatmap(train.corr(), vmin=-1.0, vmax=1.0, annot=True, cmap='coolwarm', linewidths=0.1)\nplt.show()","6a318b23":"test = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\ntest","9b358bc3":"len(train.breath_id.unique())","ad18d1e2":"train.describe()","93d30ac1":"check = train[train['breath_id']==1]\n#check['check'] = (np.log1p(check['u_in'] )+ np.log1p(check['u_out'])*2)*4\nsamples = [\"u_in\",\"pressure\",'u_out']\n\nplt.figure(figsize=(20,5))\n\nfor num,idx in enumerate(samples):\n    \n    plt.plot(check[\"time_step\"],check[idx],label=idx)\nplt.legend(fontsize=12)","e9c56069":"check","0597787d":"check = train[train['breath_id']==2]\n\ncheck['check'] = (np.log1p(check['u_in'] )+ np.log1p(check['u_out'])*2)*4\nsamples = [\"u_in\",\"pressure\",'u_out']\n\nplt.figure(figsize=(20,5))\n\nfor num,idx in enumerate(samples):\n    \n    plt.plot(check[\"time_step\"],check[idx],label=idx)\nplt.legend(fontsize=12)","616d6b9d":"check = train[train['breath_id']==3]\n\nsamples = [\"u_in\",\"pressure\",'u_out']\n\nplt.figure(figsize=(20,5))\n\nfor num,idx in enumerate(samples):\n    \n    plt.plot(check[\"time_step\"],check[idx],label=idx)\nplt.legend(fontsize=12)","48b61750":"plt.figure(figsize=(20,5))\nfor i in range(1,10):\n check = train[train['breath_id']==i]\n\n samples = [\"u_in\",\"pressure\",'u_out']\n\n    \n plt.plot(check[\"time_step\"],check['u_in'],color='r')\n plt.plot(check[\"time_step\"],check['pressure'],color='b')\n plt.plot(check[\"time_step\"],check['u_out'],color='y')\n plt.legend(fontsize=12)","6cc2e099":"plt.figure(figsize=(20,5))\nfor i in range(1,10):\n check = train[train['breath_id']==i]\n\n samples = [\"u_in\",\"pressure\",'u_out']\n a = check['u_in'].shift(1)\n b = check['pressure'].shift(1) \n    \n plt.plot(check[\"time_step\"],check['u_in']-a,color='r')\n plt.plot(check[\"time_step\"],check['pressure']-b,color='b')\n plt.legend(fontsize=12)","5064c6d2":"plt.figure(figsize=(20,5))\nfor i in range(1,10):\n check = train[train['breath_id']==i]\n\n samples = [\"u_in\",\"pressure\",'u_out']\n a = check['u_in'].shift(2)\n b = check['pressure'].shift(2) \n    \n plt.plot(check[\"time_step\"],check['u_in']-a,color='r')\n plt.plot(check[\"time_step\"],check['pressure']-b,color='b')\n plt.legend(fontsize=12)","51dc2f7e":"plt.figure(figsize=(20,5))\nfor i in range(1,10):\n check = train[train['breath_id']==i]\n\n samples = [\"u_in\",\"pressure\",'u_out']\n a = check['u_in'].shift(3)\n b = check['pressure'].shift(3) \n    \n plt.plot(check[\"time_step\"],check['u_in']-a,color='r')\n plt.plot(check[\"time_step\"],check['pressure']-b,color='b')\n plt.legend(fontsize=12)","26b8c059":"plt.figure(figsize=(20,5))\nfor i in range(1,10):\n check = train[train['breath_id']==i]\n\n samples = [\"u_in\",\"pressure\",'u_out']\n a = check['u_in'].shift(4)\n b = check['pressure'].shift(4) \n    \n plt.plot(check[\"time_step\"],check['u_in']-a,color='r')\n plt.plot(check[\"time_step\"],check['pressure']-b,color='b')\n plt.legend(fontsize=12)","9e91f7a0":"check = train[train['breath_id']==3]\ncheck['u_in_lag'] = check['u_in'].shift(2).fillna(0)\nsamples = [\"u_in\",\"pressure\",'u_in_lag']\n\nplt.figure(figsize=(20,5))\n\nfor num,idx in enumerate(samples):\n    \n    plt.plot(check[\"time_step\"],check[idx],label=idx)\nplt.legend(fontsize=12)\n","c07460ea":"fig, ax = plt.subplots(figsize = (12, 8))\nplt.subplot(2, 2, 1)\nsns.countplot(x='R', data=train)\nplt.title('Counts of R in train');\nplt.subplot(2, 2, 2)\nsns.countplot(x='R', data=test)\nplt.title('Counts of R in test');\nplt.subplot(2, 2, 3)\nsns.countplot(x='C', data=train)\nplt.title('Counts of C in train');\nplt.subplot(2, 2, 4)\nsns.countplot(x='C', data=test)\nplt.title('Counts of C in test');","d21d16f0":"check = train[train['breath_id']==1]\nsamples = [\"u_in\",\"pressure\",'R','C']\n\nplt.figure(figsize=(20,5))\n\nfor num,idx in enumerate(samples):\n    \n    plt.plot(check[\"time_step\"],check[idx],label=idx)\nplt.legend(fontsize=12)","b2888918":"check = train[train['breath_id']==2]\nsamples = [\"u_in\",\"pressure\",'R','C']\n\nplt.figure(figsize=(20,5))\n\nfor num,idx in enumerate(samples):\n    \n    plt.plot(check[\"time_step\"],check[idx],label=idx)\nplt.legend(fontsize=12)","9835ddf0":"check.head()","0ca4f3cf":"check = train[train['breath_id']==3]\nsamples = [\"u_in\",\"pressure\",'R','C']\n\nplt.figure(figsize=(20,5))\n\nfor num,idx in enumerate(samples):\n    \n    plt.plot(check[\"time_step\"],check[idx],label=idx)\nplt.legend(fontsize=12)","c97f43aa":"check['ewm_u_in_mean'] = check.groupby('breath_id')['u_in'].ewm(halflife=15).mean().reset_index(level=0,drop=True)\ncheck['ewm_u_in_std'] = check.groupby('breath_id')['u_in'].ewm(halflife=15).std().reset_index(level=0,drop=True) \ncheck['ewm_u_in_corr'] = check.groupby('breath_id')['u_in'].ewm(halflife=15).corr().reset_index(level=0,drop=True) \nsamples = [\"ewm_u_in_mean\",\"ewm_u_in_std\",\"ewm_u_in_corr\",\"pressure\"]\n\nplt.figure(figsize=(20,5))\n\nfor num,idx in enumerate(samples):\n    \n    plt.plot(check[\"time_step\"],check[idx],label=idx)\nplt.legend(fontsize=12)","49ec3e3f":"check['ewm_u_in_mean'] = check.groupby('breath_id')['u_in'].ewm(halflife=8).mean().reset_index(level=0,drop=True)\ncheck['ewm_u_in_std'] = check.groupby('breath_id')['u_in'].ewm(halflife=8).std().reset_index(level=0,drop=True) \ncheck['ewm_u_in_corr'] = check.groupby('breath_id')['u_in'].ewm(halflife=8).corr().reset_index(level=0,drop=True) \nsamples = [\"ewm_u_in_mean\",\"ewm_u_in_std\",\"ewm_u_in_corr\",\"pressure\"]\n\nplt.figure(figsize=(20,5))\n\nfor num,idx in enumerate(samples):\n    \n    plt.plot(check[\"time_step\"],check[idx],label=idx)\nplt.legend(fontsize=12)","4ed65859":"check[[\"15_in_max\",\"15_out_std\"]] = check.groupby('breath_id')['u_in'].rolling(window=15,min_periods=1).agg({\"15_in_max\":\"max\",\"15_in_std\":\"std\"}).reset_index(level=0,drop=True)\nsamples = [\"15_in_max\",\"15_out_std\",\"pressure\"]\n\nplt.figure(figsize=(20,5))\n\nfor num,idx in enumerate(samples):\n    \n    plt.plot(check[\"time_step\"],check[idx],label=idx)\nplt.legend(fontsize=12)","41e84879":"check[[\"8_in_max\",\"8_out_std\"]] = check.groupby('breath_id')['u_in'].rolling(window=8,min_periods=1).agg({\"8_in_max\":\"max\",\"8_in_std\":\"std\"}).reset_index(level=0,drop=True)\nsamples = [\"8_in_max\",\"8_out_std\",\"pressure\"]\n\nplt.figure(figsize=(20,5))\n\nfor num,idx in enumerate(samples):\n    \n    plt.plot(check[\"time_step\"],check[idx],label=idx)\nplt.legend(fontsize=12)","ffeb00c4":"check[[\"4_in_max\",\"4_out_std\"]] = check.groupby('breath_id')['u_in'].rolling(window=4,min_periods=1).agg({\"4_in_max\":\"max\",\"4_in_std\":\"std\"}).reset_index(level=0,drop=True)\nsamples = [\"4_in_max\",\"4_out_std\",\"pressure\"]\n\nplt.figure(figsize=(20,5))\n\nfor num,idx in enumerate(samples):\n    \n    plt.plot(check[\"time_step\"],check[idx],label=idx)\nplt.legend(fontsize=12)","111e1fdb":"check['u_in_cumsum'] = (check['u_in']).groupby(check['breath_id']).cumsum()\nsamples = ['u_in',\"u_in_cumsum\",\"pressure\"]\n\nplt.figure(figsize=(20,5))\n\nfor num,idx in enumerate(samples):\n    \n    plt.plot(check[\"time_step\"],check[idx],label=idx)\n#plt.plot(check[\"seconds_in_bucket\"],check_trade[\"size\"],label=\"trade_parquet\")\nplt.legend(fontsize=12)","95810f11":"len(test.breath_id.unique())","65e60870":"test.describe()","ddce164b":"check = test[test['breath_id']==0]\n\nsamples = [\"u_in\",'u_out']\n\nplt.figure(figsize=(20,5))\n\nfor num,idx in enumerate(samples):\n    \n    plt.plot(check[\"time_step\"],check[idx],label=idx)\n#plt.plot(check[\"seconds_in_bucket\"],check_trade[\"size\"],label=\"trade_parquet\")\nplt.legend(fontsize=12)","fc99dbb6":"sub = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')\nsub","d840c4f9":"### shift1 ","45e21f1f":"![image.png](attachment:ee776dcb-7c9e-4ff5-b3d0-46debbb172c3.png)","3da319af":"## Rolling=15","a6918595":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Test data Analyze<\/span>","f40cc325":"### breath_id 1-9","0c2c435a":"### What is R&C?\nR and C seem to be adjusted for each patient.","d40cc49c":"### C and R","38868202":"\ud83d\ude3a\ud83d\ude05\u3299\ud83d\udd30\ud83d\uddd1\u2b1b\ud83d\udfe5\ud83d\udfe8\ud83d\udfe9","b40a8467":"### breath_id 3","66902cb0":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Train data Analyze<\/span>","ea4d1563":"## Rolling=8","6f7e22da":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Train data read<\/span>","e885ffb8":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Test data read<\/span>","d8a18a8a":"The first control input is a continuous variable from 0 to 100 representing the percentage the inspiratory solenoid valve is open to let air into the lung (i.e., 0 is completely closed and no air is let in and 100 is completely open). The second control input is a binary variable representing whether the exploratory valve is open (1) or closed (0) to let air out.","b29a7713":"### HEATMAP","b9a32e3f":"### u_in and u_in.shift(2)","e47b9032":"## u_in_cumsum","d3f5438a":"### breath_id 2","b713cc3e":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Submit data read<\/span>","a462addf":"### shift2","9b3eeab1":"### breath_id 1\n\"pressure\" seems to come a little later than \"u_in\".","d85b9644":"### shift4","1e53c3b1":"### shift3","5acdfb25":"## ewm=8","c8e5ebbf":"In this competition, you\u2019ll simulate a ventilator connected to a sedated patient's lung. The best submissions will take lung attributes compliance and resistance into account.","efe1e983":"## Rolling=4","f5b5b50e":"<pre>\nid - globally-unique time step identifier across an entire file\nbreath_id - globally-unique time step for breaths\nR - lung attribute indicating how restricted the airway is (in cmH2O\/L\/S). Physically, this is the change in pressure per change in flow (air volume per time). Intuitively, one can imagine blowing up a balloon through a straw. We can change R by changing the diameter of the straw, with higher R being harder to blow.\nC - lung attribute indicating how compliant the lung is (in mL\/cmH2O). Physically, this is the change in volume per change in pressure. Intuitively, one can imagine the same balloon example. We can change C by changing the thickness of the balloon\u2019s latex, with higher C having thinner latex and easier to blow.\ntime_step - the actual time stamp.\nu_in - the control input for the inspiratory solenoid valve. Ranges from 0 to 100.\nu_out - the control input for the exploratory solenoid valve. Either 0 or 1.\npressure - the airway pressure measured in the respiratory circuit, measured in cmH2O.","d053f310":"## ewm=15","e5095808":"thanks https:\/\/www.kaggle.com\/artgor\/ventilator-pressure-prediction-eda-fe-and-models"}}