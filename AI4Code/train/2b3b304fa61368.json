{"cell_type":{"4b7d40e0":"code","59d265ba":"code","0ed5a200":"code","28214b45":"code","926f825a":"code","b90cb380":"code","410c9490":"code","5f187a11":"code","ef78eef7":"code","4dc433fa":"markdown","a019ca7b":"markdown","91109de4":"markdown","e199fd72":"markdown","e28f338d":"markdown","4c791b68":"markdown","70fefc0d":"markdown","bd41c19e":"markdown","d3e1d234":"markdown","a42c4e60":"markdown"},"source":{"4b7d40e0":"%matplotlib inline\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import decomposition\nfrom sklearn.manifold import TSNE\nimport seaborn as sns","59d265ba":"train = pd.read_csv(\"..\/input\/sign-language-mnist\/sign_mnist_train\/sign_mnist_train.csv\")\ntrain.head()","0ed5a200":"# Split data\ny = train['label']\nX = train.drop(['label'], axis=1)\n\nX.shape, y.shape","28214b45":"pca = decomposition.PCA()\npca.n_components = 2\npca_data = pca.fit_transform(X\/255)\nprint('shape of pca_reduced.shape = ', pca_data.shape)\nprint('Explained variation per principal component: {}'.format(pca.explained_variance_ratio_))\npca_data = np.vstack((pca_data.T, y)).T\npca_df = pd.DataFrame(pca_data, columns=('PC 1', 'PC 2', 'label'))\npca_df.head()","926f825a":"sns.FacetGrid(pca_df, hue='label', height=8).map(plt.scatter, 'PC 1', \"PC 2\").add_legend()","b90cb380":"model = TSNE(n_components =2, random_state =0, perplexity =50, n_iter=1000)\ntsne_data = model.fit_transform(X\/255)\n\nprint('shape of tsne_reduced.shape = ', tsne_data.shape)\n\ntsne_data = np.vstack((tsne_data.T, y)).T\ntsne_df = pd.DataFrame(tsne_data, columns = ('PC 1', 'PC 2', 'label'))\ntsne_df.head()","410c9490":"sns.FacetGrid(tsne_df, hue='label', height=8).map(plt.scatter, 'PC 1', \"PC 2\").add_legend()","5f187a11":"only_pca_model = decomposition.PCA()\nonly_pca_model.n_components = 200\nonly_pca_data = only_pca_model.fit_transform(X\/255)\nonly_pca_data = np.vstack((only_pca_data.T, y)).T\n\npca_tsne_model = TSNE(n_components =2, random_state =0, perplexity =50, n_iter=1000, verbose=1)\npca_tsne_data = model.fit_transform(only_pca_data)\n\npca_tsne_data = np.vstack((pca_tsne_data.T, y)).T\npca_tsne_df = pd.DataFrame(pca_tsne_data, columns = ('PC 1', 'PC 2', 'label'))\npca_tsne_df.head()","ef78eef7":"sns.FacetGrid(pca_tsne_df, hue='label', height=8).map(plt.scatter, 'PC 1', \"PC 2\").add_legend()","4dc433fa":"# Conclusion:","a019ca7b":"# Visualizing t - SNE","91109de4":"# t - SNE dimensionality reduction","e199fd72":"**We can see that PCA + t - SNE does great job!!**","e28f338d":"# Data preparation","4c791b68":"# PCA dimensionality reduction","70fefc0d":"# PCA + t-SNE","bd41c19e":"# Loading the data","d3e1d234":"# Visualizing PCA","a42c4e60":"# Importing necessary packages"}}