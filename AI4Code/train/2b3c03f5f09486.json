{"cell_type":{"996a2f92":"code","93d3ea62":"code","ed698bfe":"code","77d180a1":"code","091be8ff":"code","dc06f28e":"code","b4894869":"code","a0be3817":"code","be4a36b7":"code","aba3f615":"code","b97e5009":"code","0fc1bdf2":"code","6081e213":"code","3e3a761e":"code","ce054446":"code","41576bdd":"code","21c44f26":"code","9f248fd9":"code","3cba43fd":"markdown","0e95ca0a":"markdown","b946ad5d":"markdown"},"source":{"996a2f92":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nfrom numpy.random import seed\nseed(42)\nimport tensorflow as tf\ntf.random.set_seed(42)\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","93d3ea62":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.layers import AveragePooling2D\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n!pip install imutils\nfrom imutils import paths\nimport matplotlib.pyplot as plt\nimport argparse\nimport cv2\nimport os","ed698bfe":"# initialize the initial learning rate, number of epochs to train for,\n# and batch size\nINIT_LR = 1e-3\nEPOCHS = 25\nBS = 8","77d180a1":"# grab the list of images in our dataset directory, then initialize\n# the list of data (i.e., images) and class images\nprint(\"[INFO] loading images...\")\nimagePaths = list(paths.list_images(\"\/kaggle\/input\/xray-images-corona-pneumonia\/dataset\"))\ndata = []\nlabels = []\n\n# loop over the image paths\nfor imagePath in imagePaths:\n    # extract the class label from the filename\n    label = imagePath.split(os.path.sep)[-2]\n\n    # load the image, swap color channels, and resize it to be a fixed\n    # 224x224 pixels while ignoring aspect ratio\n    image = cv2.imread(imagePath)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = cv2.resize(image, (224, 224))\n\n    # update the data and labels lists, respectively\n    data.append(image)\n    labels.append(label)\n    \n# convert the data and labels to NumPy arrays while scaling the pixel\n# intensities to the range [0, 255]\ndata = np.array(data) \/ 255.0\nlabels = np.array(labels)\n\n# perform one-hot encoding on the labels\nlb = LabelBinarizer()\nlabels = lb.fit_transform(labels)\nlabels = to_categorical(labels)","091be8ff":"# partition the data into training and testing splits using 80% of\n# the data for training and the remaining 20% for testing\ntrainX, testX, trainY, testY = train_test_split(data, labels, test_size=0.20, stratify=labels, random_state=42)","dc06f28e":"# initialize the training data augmentation object\ntrainAug = ImageDataGenerator(rotation_range=15, fill_mode=\"nearest\")","b4894869":"# load the VGG16 network, ensuring the head FC layer sets are left off\nbaseModel = VGG16(weights=\"imagenet\", include_top=False, input_tensor=Input(shape=(224, 224, 3)))","a0be3817":"# construct the head of the model that will be placed on top of the base model\nheadModel = baseModel.output\nheadModel = AveragePooling2D(pool_size=(4, 4))(headModel)\nheadModel = Flatten(name=\"flatten\")(headModel)\nheadModel = Dense(64, activation=\"relu\")(headModel)\nheadModel = Dropout(0.5)(headModel)\nheadModel = Dense(2, activation=\"softmax\")(headModel)\n\n# place the head FC model on top of the base model (this will become the actual model we will train)\nmodel = Model(inputs=baseModel.input, outputs=headModel)","be4a36b7":"# loop over all layers in the base model and freeze them so they will not be updated during the first training process\nfor layer in baseModel.layers:\n    layer.trainable = False","aba3f615":"# compile our model\nprint(\"[INFO] compiling model...\")\nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])\nprint(model.summary())","b97e5009":"# train the head of the network\nprint(\"[INFO] training head...\")\nH = model.fit_generator(\n    trainAug.flow(trainX, trainY, batch_size=BS),\n    steps_per_epoch=len(trainX) \/\/ BS,\n    validation_data=(testX, testY),\n    validation_steps=len(testX) \/\/ BS,\n    epochs=EPOCHS)","0fc1bdf2":"# make predictions on the testing set\nprint(\"[INFO] evaluating network...\")\npredIdxs = model.predict(testX, batch_size=BS)","6081e213":"# for each image in the testing set we need to find the index of the\n# label with corresponding largest predicted probability\npredIdxs = np.argmax(predIdxs, axis=1)","3e3a761e":"# show a nicely formatted classification report\nprint(classification_report(testY.argmax(axis=1), predIdxs, target_names=lb.classes_))","ce054446":"# compute the confusion matrix and and use it to derive the raw\n# accuracy, sensitivity, and specificity\ncm = confusion_matrix(testY.argmax(axis=1), predIdxs)\ntotal = sum(sum(cm))\nacc = (cm[0, 0] + cm[1, 1]) \/ total\nsensitivity = cm[0, 0] \/ (cm[0, 0] + cm[0, 1])\nspecificity = cm[1, 1] \/ (cm[1, 0] + cm[1, 1])","41576bdd":"# show the confusion matrix, accuracy, sensitivity, and specificity\nprint(cm)\nprint(\"acc: {:.4f}\".format(acc))\nprint(\"sensitivity: {:.4f}\".format(sensitivity))\nprint(\"specificity: {:.4f}\".format(specificity))","21c44f26":"# plot the training loss and accuracy\nN = EPOCHS\nplt.style.use(\"ggplot\")\nplt.figure()\nplt.plot(np.arange(0, N), H.history[\"loss\"], label=\"train_loss\")\nplt.plot(np.arange(0, N), H.history[\"val_loss\"], label=\"val_loss\")\nplt.plot(np.arange(0, N), H.history[\"accuracy\"], label=\"train_acc\")\nplt.plot(np.arange(0, N), H.history[\"val_accuracy\"], label=\"val_acc\")\nplt.title(\"Training Loss and Accuracy on COVID-19 Dataset\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\/Accuracy\")\nplt.legend(loc=\"lower left\")\nplt.savefig(\"plot.png\")","9f248fd9":"# serialize the model to disk\nprint(\"[INFO] saving COVID-19 detector model...\")\nmodel.save(\"covid19.model\", save_format=\"h5\")","3cba43fd":"**Full credit goes to Adrian Rosebrock, PhD**\n**https:\/\/www.pyimagesearch.com\/2020\/03\/16\/detecting-covid-19-in-x-ray-images-with-keras-tensorflow-and-deep-learning\/**\n\n**One of the biggest limitations of the method discussed in this notebook is data. We simply don\u2019t have enough (reliable) data to train a COVID-19 detector.**\n\n**I imagine in the next 12-18 months we\u2019ll have more high quality COVID-19 image datasets; but for the time being, we can only make do with what we have.**\n\n**Corona Positive Case Dataset Used From Below Repo:**\n\n**https:\/\/github.com\/ieee8023\/covid-chestxray-dataset**\n\n**For Negative Cases I used Below Dataset:**\n\n**https:\/\/www.kaggle.com\/paultimothymooney\/chest-xray-pneumonia**\n\n**From above two links, I have collected 25-25 images for my prediction model**\n\n**This notebbok is for educational purposes only. This article and accompanying results are not intended to be a journal article nor does it conform to the TRIPOD guidelines on reporting predictive models.**","0e95ca0a":"**As our training history plot shows, our network is not overfitting, despite having very limited training data**","b946ad5d":"**Of patients that do have COVID-19 (i.e., true positives), we could accurately identify them as \u201cCOVID-19 positive\u201d 100% of the time using our model.**\n\n**Of patients that do not have COVID-19 (i.e., true negatives), we could accurately identify them as \u201cCOVID-19 negative\u201d 100% of the time using our model.**\n\n**Balancing sensitivity and specificity is incredibly challenging when it comes to medical applications, especially infectious diseases that can be rapidly transmitted, such as COVID-19.**\n\n**When it comes to medical computer vision and deep learning, we must always be mindful of the fact that our predictive models can have very real consequences \u2014 a missed diagnosis can cost lives.**"}}