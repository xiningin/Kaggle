{"cell_type":{"bd81f360":"code","2e5d0266":"code","9d1ffd40":"code","6532d254":"code","b1f5d6d7":"code","fdeff05c":"code","31be46fb":"code","1bc50e04":"code","02ec4ce2":"code","e3ea7d2b":"code","a953c113":"code","0d719250":"code","c3d3e9e6":"code","1f38353d":"code","e029ee6a":"code","98815287":"code","e582db9b":"code","f4ca6e30":"code","52d4c49f":"markdown","106bc985":"markdown","bbf0bf16":"markdown","374154dc":"markdown","28681c74":"markdown","c4d7a8a4":"markdown","fb05fd5d":"markdown","7c90b950":"markdown"},"source":{"bd81f360":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\n#Other libraries \n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport datetime\n%matplotlib inline\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nprint(__version__) # requires version >= 1.9.0\nimport cufflinks as cf\ninit_notebook_mode(connected=True)\ncf.go_offline()","2e5d0266":"bank_stocks = pd.read_pickle('..\/input\/all_banks') \nbank_stocks.head()\n","9d1ffd40":"bank_stocks.xs(key='Close',axis=1,level='Stock Info').head(3)","6532d254":"bank_stocks.xs(key='Close',axis=1,level='Stock Info').max()","b1f5d6d7":"tickers = ['BAC', 'C', 'GS', 'JPM', 'MS', 'WFC']\nreturns = pd.DataFrame()\n\nfor x in tickers:\n    returns[x + ' Return'] = bank_stocks.xs('Close',axis=1,level=1)[x].pct_change()\nreturns.head()","fdeff05c":"sns.pairplot(returns[1:])","31be46fb":"# Worst Drop of returns (4 of them on Inauguration day)\nreturns.idxmin()","1bc50e04":"# Best Drop of returns (4 of them on Inauguration day)\nreturns.idxmax()","02ec4ce2":"# Citigroup riskiest\nreturns.std()","e3ea7d2b":"returns.loc['2015-01-01':'2015-12-31'].std() ","a953c113":"returns.loc['2015-01-01':'2015-12-31'].std() # Very similar risk profiles, but Morgan Stanley or BofA","0d719250":"sns.distplot(returns.loc['2015-01-01':'2015-12-31']['MS Return'],color='green',bins=100)","c3d3e9e6":"sns.distplot(returns.loc['2008-01-01':'2008-12-31']['C Return'],color='red',bins=100)","1f38353d":"from plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\nbank_stocks.xs('Close',axis=1,level=1).iplot()","e029ee6a":"# This same plot can be done with a for loop\nimport matplotlib.pyplot as plt\nfor tick in tickers:\n     bank_stocks[tick]['Close'].plot(label=tick,figsize=(6,2))\nplt.legend()","98815287":"\nrolling_avg = pd.DataFrame()\nrolling_avg['30 Day Avg'] = bank_stocks.loc['2008-01-01':'2008-12-31'].xs('Close',axis=1,level=1)['BAC'].rolling(window=30).mean()\n\nrolling_avg['30 Day Avg'].plot(figsize=(12,6),label='30 Day Avg')\nbank_stocks.loc['2008-01-01':'2008-12-31'].xs('Close',axis=1,level=1)['BAC'].plot(figsize=(12,6),label='BofA Close')\nplt.legend()\n","e582db9b":"sns.heatmap(bank_stocks.xs('Close',axis=1,level=1).corr(),annot=True)","f4ca6e30":"sns.clustermap(bank_stocks.xs('Close',axis=1,level=1).corr(),annot=True)","52d4c49f":"\n## Finance crisis up to early 2016.\n\n\n**Visualizing the use data optaine from google finance. \nSecond data capstone project for my Udemy Data Science and ML Bootcamp, \nby Jose Portilla, Udemy.**\n\nhttps:\/\/www.udemy.com\/python-for-data-science-and-machine-learning-bootcamp\n\n**Don't expect much, it is just meant to practice my visualization and pandas skills.\n**\n\n\n","106bc985":"** Standard deviation of the returns, which stock would it classify as the riskiest over the entire time period? Which would it classify as the riskiest for the year 2015?**","bbf0bf16":"**Documentation on [Multi-Level](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/advanced.html) Indexing and  [Using .xs](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.xs.html). **\n\n** What is the max Close price for each bank's stock throughout the time period?**","374154dc":"## Moving Averages\n\nLet's analyze the moving averages for these stocks in the year 2008.\n\n** Plot the rolling 30 day average against the Close Price for Bank Of America's stock for the year 2008**\n","28681c74":"** Create a distplot using seaborn of the 2015\/2008 returns for Morgan Stanley **","c4d7a8a4":"** Using this returns DataFrame, figure out on what dates each bank stock had the best and worst single day returns. You should notice that 4 of the banks share the same day for the worst drop, did anything significant happen that day?**","fb05fd5d":"** DataFrame returns. This dataframe will contain the returns for each bank's stock. returns are typically defined by:**\n\n$$r_t = \\frac{p_t - p_{t-1}}{p_{t-1}} $$","7c90b950":"\n## Data\n\n**We will get stock information for the following banks:**\n\n    Bank of America BAC\n    CitiGroup C\n    Goldman Sachs GS\n    JPMorgan Chase JPM\n    Morgan Stanley MS\n    Wells Fargo WF\n\n**I will be using stock data from Jan 1st 2006 to Jan 1st 2016 for each of these banks.**\n"}}