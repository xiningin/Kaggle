{"cell_type":{"e99aea1f":"code","b3ce09cb":"code","04892a1f":"code","dd532a5e":"code","5b8c7c84":"code","455858f3":"code","447f6b71":"code","fb11c2ac":"code","0f48b28d":"code","8fdac69b":"code","41e0dbcd":"code","1ad73249":"code","53e586fd":"code","7c60da20":"code","23307e20":"code","8d2cf6c8":"code","86c0901e":"code","be4e4cab":"code","35b9a471":"code","ef7cdefb":"code","e43b3e97":"code","f1d081a8":"code","d23fc71a":"code","d37bc639":"code","7174ac35":"code","bff52c6b":"code","cb396389":"code","142e8e3f":"code","7314b103":"code","a55b9df9":"code","c8e5ed09":"code","e974a534":"markdown","728906a0":"markdown","557096f1":"markdown","89d493ca":"markdown","9e502e9e":"markdown","37ababd0":"markdown","5c84baf6":"markdown","ee285826":"markdown","0743ab5d":"markdown","8b100210":"markdown","4887b88a":"markdown","8c067621":"markdown","8ca90873":"markdown","aa05006e":"markdown","d8e81896":"markdown"},"source":{"e99aea1f":"import os\nimport json\nimport subprocess\n\nimport geopandas\nimport numpy as np \nimport pandas as pd \nimport plotly.express as px","b3ce09cb":"!ls \/kaggle\/input","04892a1f":"BASE_PATH = \"\/kaggle\/input\/georgia-voter-list-202011\"\nall_file_paths = os.listdir(BASE_PATH)\n\nvoter_file_paths = sorted([\n    file_path for file_path in all_file_paths \n    if file_path.startswith(\"tbl_prod\")])\nprint(\"Voter Files\")\nprint(\"===========\")\nfor file_path in voter_file_paths:\n    print(\"  \", file_path)\nprint()\n\ngeo_file_paths = sorted([\n    file_path for file_path in all_file_paths \n    if file_path.startswith(\"cb_2019\")])\nprint(\"Geography Files\")\nprint(\"===============\")\nfor file_path in geo_file_paths:\n    print(\"  \", file_path)","dd532a5e":"DATES = [\n    \"202010\", \n    \"202011\", \n    \"202012\"\n]\nSAMPLE_NAMES = [\n    \"all\", \n    \"dropped_records\", \n    \"new_records\",\n    \"voter_status_change\",\n    \"voter_in_inactive\",\n    \"address_change\",\n    \"name_change\",\n]\nGEO_ENTITIES = [\n    \"cbsa\",\n    \"cd116\",\n    \"county\",\n    \"csa\",\n    \"division\",\n    \"nation\",\n    \"region\",\n    \"state\",\n    \"zcta510\",\n]\nFONT_FAMILY = \"Ubuntu\"\nFONT_SIZE = 14","5b8c7c84":"!mkdir -p plots","455858f3":"def count_file_lines(file_path: str) -> int:\n    output = subprocess.check_output([\"wc\", \"-l\", file_path])\n    num_lines = int(output.split()[0])\n    return num_lines","447f6b71":"def create_line_count_dataframe():\n    \n    # add file line counts to dataframe\n    records = []\n    for date in DATES:\n        for sample in SAMPLE_NAMES:\n            file_name = f\"tbl_prod_GABU{date}_{sample}.csv\"\n            file_path = os.path.join(BASE_PATH, file_name)\n            num_lines = count_file_lines(file_path)\n            records.append({\n                \"date\": \"{}-{}\".format(date[0:4], date[4:]),\n                \"sample\": sample,\n                \"count\": num_lines - 1 # for header\n            })\n    df_counts = pd.DataFrame.from_records(records)\n    \n    # add voter_in_active data\n    for date in df_counts['date'].unique():\n        count_all = df_counts[\n            (df_counts[\"date\"]==date) & (df_counts[\"sample\"]==\"all\")\n        ].iloc[0][\"count\"]\n        count_inactive = df_counts[\n            (df_counts[\"date\"]==date) & (df_counts[\"sample\"]==\"voter_in_inactive\")\n        ].iloc[0][\"count\"]\n        record = {\n            \"date\": date,\n            \"sample\": \"voter_in_active\",\n            \"count\": count_all - count_inactive,\n        }\n        df_counts = df_counts.append(record, ignore_index=True)    \n    \n    return df_counts","fb11c2ac":"df_counts = create_line_count_dataframe()\ndf_counts","0f48b28d":"samples = [\"dropped_records\", \"new_records\"]\nfig = px.bar(\n    df_counts[df_counts['sample'].isin(samples)], \n    x=\"date\", \n    y=\"count\", \n    color=\"sample\",\n    barmode=\"group\",\n    title=\"Number of Georgia Voters Dropped and Added by Month\",\n)\nfig.update_layout(\n    font_family=FONT_FAMILY,\n    font_size=FONT_SIZE,\n)\nfig.update_xaxes(type='category')\nfig.write_html(\"plots\/bar_group_dropped_new.html\")\nfig.show()","8fdac69b":"samples = [\"voter_in_active\", \"voter_in_inactive\"]\nfig = px.bar(\n    df_counts[df_counts['sample'].isin(samples)], \n    x=\"count\", \n    y=\"date\", \n    color='sample',\n    title=\"Number of Georgia Voters in Active and Inactive Status by Month\",\n)\nfig.update_layout(\n    font_family=FONT_FAMILY,\n    font_size=FONT_SIZE,\n)\nfig.update_yaxes(type='category')\nfig.write_html(\"plots\/bar_active_inactive.html\")\nfig.show()","41e0dbcd":"def read_geojson(base_path, entity, res=\"20m\"):\n    file_path = os.path.join(base_path, f\"cb_2019_us_{entity}_{res}.geojson\")\n    with open(file_path, \"r\") as fp:\n        gjson = json.load(fp)\n    return gjson\n\ndef read_df_geojson(base_path, entity, res=\"20m\"):\n    file_path = os.path.join(BASE_PATH, f\"cb_2019_us_{entity}_{res}.geojson\")\n    return geopandas.read_file(file_path)\n\ngjsons = {}\nfor entity in GEO_ENTITIES:\n    res = \"500k\" if entity==\"zcta510\" else \"20m\"\n    gjsons[entity] = read_geojson(BASE_PATH, entity, res=res)\n\ndf_geos = {}\nfor entity in GEO_ENTITIES:\n    res = \"500k\" if entity==\"zcta510\" else \"20m\"\n    file_path = os.path.join(BASE_PATH, f\"cb_2019_us_{entity}_{res}.geojson\")\n    df_geos[entity] = geopandas.read_file(file_path)","1ad73249":"df_counties = df_geos[\"county\"]\ndf_counties = df_counties[df_counties[\"STATEFP\"]==\"13\"].sort_values(\"NAME\")\ndf_counties[\"county_code\"] = [\"{:0>3d}\".format(el) for el in np.arange(1, df_counties.shape[0] + 1)]\ndf_counties.set_index(\"GEOID\", inplace=True)\ndf_counties","53e586fd":"GA_COLUMNS = json.load(open(os.path.join(BASE_PATH, \"ga_columns.json\"), \"r\"))\nKEY_TO_FILE = {}\nfor date in DATES:\n    for sample_name in SAMPLE_NAMES:\n        key = f\"{sample_name}_{date}\"\n        file_path = os.path.join(BASE_PATH, f\"tbl_prod_GABU{date}_{sample_name}.csv\")\n        KEY_TO_FILE[key] = file_path","7c60da20":"def read_voter_file(file_path, ga_columns, current_year=None):\n    TYPE_MAP = {\"str\": str, \"int\": int, \"date\": str}\n    \n    df = pd.read_table(                                                                             \n        file_path,\n        sep=\"|\",\n        dtype={\n            col_name: TYPE_MAP[col_type] for col_name, col_type in\n            zip(ga_columns[\"column_names\"], ga_columns[\"column_types\"])\n        }\n    )\n    \n    # merge in some county geo data \n    df = pd.merge(\n        df, \n        df_counties.reset_index()[[\"STATEFP\", \"COUNTYFP\", \"COUNTYNS\", \"AFFGEOID\", \"GEOID\", \"county_code\"]], \n        on=\"county_code\")\n    \n    # clean and trip zip codes\n    df[\"zipcode\"] = df['residence_zipcode'].astype(str).apply(lambda x: x[:5])\n    \n    # calculate age from birth year\n    if current_year is not None:\n        df['age'] = current_year - df[\"birthyear\"]\n    return df","23307e20":"date = 202010\ndfs = {}\nfor sample_name in SAMPLE_NAMES:\n    key = key = f\"{sample_name}_{date}\"\n    print(key)\n    dfs[key] = read_voter_file(KEY_TO_FILE[key], GA_COLUMNS, current_year=2020)","8d2cf6c8":"df_county_demo = df_counties[[\"NAME\"]].copy()\nfor key in dfs.keys():\n    df_county_demo[f\"{key}_count\"] = dfs[key].groupby(['GEOID']).size()\n    if not (\"all\" in key):\n        df_county_demo[f\"{key}_per1k\"] =  df_county_demo[f\"{key}_count\"] \/ df_county_demo[f\"all_{date}_count\"] * 1000\ndf_county_demo.reset_index(inplace=True)\ndf_county_demo","86c0901e":"def create_choropleth_fig(df_demo, gjson, locations, featureidkey, color, hover_data, title, range_color=None):\n    fig = px.choropleth(\n        df_demo,\n        geojson=gjson,\n        locations=locations,\n        featureidkey=featureidkey,\n        color=color,\n        color_continuous_scale=\"Viridis\",\n        hover_data=hover_data,\n        title=title,\n        range_color=range_color,\n    )\n\n    # horizontal\n    loncen = -83.2\n    lonwin = 5\n    # vertical\n    latcen = 32.7\n    latwin = 5\n\n    fig = fig.update_geos(\n        visible=True,\n        lonaxis={\"range\": (loncen-lonwin\/2, loncen+lonwin\/2)},\n        lataxis={\"range\": (latcen-latwin\/2, latcen+latwin\/2)},\n    )\n    fig = fig.update_layout(\n        margin={\"r\":0, \"t\": 100, \"l\": 0, \"b\": 0},\n        height=600,\n    )\n    fig = fig.update_layout(\n        font_family=FONT_FAMILY,\n        font_size=FONT_SIZE,\n    )\n    return fig","be4e4cab":"fig = create_choropleth_fig(\n    df_county_demo, \n    gjsons[\"county\"],\n    'GEOID',\n    'properties.GEOID',\n    f\"dropped_records_{date}_count\",\n    [\"NAME\"],\n    f\"Dropped Voter Count by County in {date}\"\n)\nfig.write_html(f\"plots\/choro_{date}_dropped_count_county.html\")\nfig.show()\n\n\nfig = create_choropleth_fig(\n    df_county_demo, \n    gjsons[\"county\"],\n    'GEOID',\n    'properties.GEOID',\n    f\"new_records_{date}_count\",\n    [\"NAME\"],\n    f\"Added Voter Count by County in {date}\"\n)\nfig.write_html(f\"plots\/choro_{date}_added_count_county.html\")\nfig.show()","35b9a471":"fig = create_choropleth_fig(\n    df_county_demo, \n    gjsons[\"county\"],\n    'GEOID',\n    'properties.GEOID',\n    f\"dropped_records_{date}_per1k\", \n    [\"NAME\"],\n    f\"Dropped Voters Per 1k by County in {date}\"\n)\nfig.write_html(f\"plots\/choro_{date}_dropped_per1k_county.html\")\nfig.show()\n\n\nfig = create_choropleth_fig(\n    df_county_demo, \n    gjsons[\"county\"],\n    'GEOID',\n    'properties.GEOID',\n    f\"new_records_{date}_per1k\", \n    [\"NAME\"],\n    f\"Added Voters Per 1k by County in {date}\"\n)\nfig.write_html(f\"plots\/choro_{date}_added_per1k_county.html\")\nfig.show()","ef7cdefb":"zipcodes = set(dfs[f\"all_{date}\"][\"zipcode\"].unique())","e43b3e97":"gjsons['zcta510']['features'] = [\n    feature for feature in gjsons['zcta510']['features'] \n    if feature['properties']['ZCTA5CE10'] in zipcodes\n]","f1d081a8":"df_zcta_demo = pd.DataFrame()\ndf_zcta_demo[\"zipcode\"] = dfs[f\"all_{date}\"][\"zipcode\"].unique()\ndf_zcta_demo.set_index('zipcode', inplace=True)\nfor key in dfs.keys():\n    df_zcta_demo[f\"{key}_count\"] = dfs[key].groupby(['zipcode']).size()\n    if not \"all\" in key:\n        df_zcta_demo[f\"{key}_per1k\"] =  df_zcta_demo[f\"{key}_count\"] \/ df_zcta_demo[f\"all_{date}_count\"] * 1000\ndf_zcta_demo.reset_index(inplace=True)\ndf_zcta_demo","d23fc71a":"fig = create_choropleth_fig(\n    df_zcta_demo, \n    gjsons[\"zcta510\"],\n    'zipcode',\n    'properties.ZCTA5CE10',\n    f\"dropped_records_{date}_count\",\n    [],\n    f\"Dropped Voter Count by Zipcode in {date}\"\n)\nfig.write_html(f\"plots\/choro_{date}_dropped_count_zipcode.html\")\nfig.show()\n\nfig = create_choropleth_fig(\n    df_zcta_demo, \n    gjsons[\"zcta510\"],\n    'zipcode',\n    'properties.ZCTA5CE10',\n    f\"new_records_{date}_count\",\n    [],\n    f\"Added Voter Count by Zipcode in {date}\"\n)\nfig.write_html(f\"plots\/choro_{date}_added_count_zipcode.html\")\nfig.show()","d37bc639":"fig = create_choropleth_fig(\n    df_zcta_demo, \n    gjsons[\"zcta510\"],\n    'zipcode',\n    'properties.ZCTA5CE10',\n    f\"dropped_records_{date}_per1k\",\n    [],\n    f\"Dropped Voters per 1k by Zipcode in {date}\",\n    range_color=(0,6),\n)\nfig.write_html(f\"plots\/choro_{date}_dropped_per1k_zipcode.html\")\nfig.show()\n\nfig = create_choropleth_fig(\n    df_zcta_demo, \n    gjsons[\"zcta510\"],\n    'zipcode',\n    'properties.ZCTA5CE10',\n    f\"new_records_{date}_per1k\",\n    [],\n    f\"Added Voters per 1k by Zipcode in {date}\",\n    range_color=(0,51),\n)\nfig.write_html(f\"plots\/choro_{date}_added_per1k_zipcode.html\")\nfig.show()","7174ac35":"df_plt = pd.DataFrame()\nfor key in [f\"all_{date}\", f\"dropped_records_{date}\", f\"new_records_{date}\"]: \n    df1 = dfs[key].groupby('race_desc')['race_desc'].agg(['size']).reset_index()\n    df1['sample'] = key\n    df1['fraction of sample'] = df1['size'] \/ df1['size'].sum()\n    df_plt = pd.concat([df_plt, df1])","bff52c6b":"df_plt","cb396389":"fig = px.bar(\n    df_plt, \n    x='fraction of sample', \n    y='race_desc', \n    facet_col='sample', \n    facet_col_wrap=2,\n    title='Race Breakdown by Fraction of Sample',\n    height=800,\n)\nfig = fig.update_layout(\n    font_family=FONT_FAMILY,\n    font_size=FONT_SIZE,\n)\nfig.write_html(f\"plots\/bar_{date}_race_all_dropped_new.html\")\nfig.show()","142e8e3f":"fig = px.bar(\n    df_plt, \n    x='fraction of sample', \n    y='race_desc', \n    color='sample', \n    barmode='group',\n    #facet_col_wrap=2,\n    title='Race Breakdown by Fraction of Sample',\n    height=800,\n)\nfig = fig.update_layout(\n    font_family=FONT_FAMILY,\n    font_size=FONT_SIZE,\n)\nfig.write_html(f\"plots\/bar_{date}_race_all_dropped_new.html\")\nfig.show()","7314b103":"#age_bins = np.linspace(17.5, 100.5, 84)\n#ages = np.linspace(18, 100, 83)\n\nage_bins = [17.5, 20.5, 25.5, 30.5, 35.5, 40.5, 45.5, 50.5, 55.5, 60.5, 65.5, 100]\nages = [\"18-20\", \"21-25\", \"26-30\", \"31-35\", \"36-40\", \"41-45\", \"46-50\", \"51-55\", \"56-60\", \"61-65\", \">65\"]\n\ndf_plt = pd.DataFrame()\n\nsamples = [\"dropped_records\", \"new_records\"]\nfor sample in samples:\n    hist, bin_edges = np.histogram(dfs[f'{sample}_{date}']['age'], bins=age_bins)\n    df1 = pd.DataFrame()\n    df1['age'] = ages\n    df1['sample'] = sample\n    df1['count'] = hist\n    df1['frac'] = hist \/ hist.sum()\n    df_plt = pd.concat([df_plt, df1])","a55b9df9":"df_plt","c8e5ed09":"fig = px.bar(\n    df_plt, \n    x='age', \n    y='count', \n    color='sample',\n    barmode='group',\n    title=f\"Dropped and Added Counts by Age for {date}\"\n)\nfig = fig.update_layout(\n    font_family=FONT_FAMILY,\n    font_size=FONT_SIZE,\n)\nfig.write_html(f\"plots\/bar_{date}_age_count_dropped_new.html\")\nfig.show()\n\nfig = px.bar(\n    df_plt, \n    x='age', \n    y='frac', \n    color='sample',\n    barmode='group',\n    title=f\"Dropped and Added Fraction of Sample by Age for {date}\"\n)\nfig = fig.update_layout(\n    font_family=FONT_FAMILY,\n    font_size=FONT_SIZE,\n)\nfig.write_html(f\"plots\/bar_{date}_age_frac_dropped_new.html\")\nfig.show()","e974a534":"# Lets Count File Lines","728906a0":"# Race Breakdown of All\/New\/Dropped","557096f1":"# Voters Dropped and Added per 1000 Voters in the Zipcode","89d493ca":"# Lets Make Some Plots with Line Counts","9e502e9e":"# List Files","37ababd0":"# Calculate County Level Demographics","5c84baf6":"# Voters Dropped and Added by Zipcode","ee285826":"# Filter Out Non GA Zipcode Geo Data","0743ab5d":"# Read Voter Files","8b100210":"# Age Breakdown of New and Dropped","4887b88a":"# Voters Dropped and Added by County","8c067621":"# Voters Dropped and Added per 1000 Voters in the County ","8ca90873":"# Calculate Zipcode Level Demographics","aa05006e":"# Create county_code to FIPS mapping","d8e81896":"# Read Geographic Data"}}