{"cell_type":{"78df1b72":"code","c8fc9473":"code","84804865":"code","95704dca":"code","6d478eff":"code","73b90a71":"code","602827c0":"code","6649f1c3":"code","a43ee920":"code","253d5ff7":"code","6ae4bd5c":"code","518fd9b0":"code","d12568e5":"code","14a1275f":"code","9de62334":"code","710237e9":"code","abbe68c9":"code","426882ec":"code","f0257aaa":"code","ad0c8f19":"code","90ccf044":"code","88062659":"code","a61cd390":"code","3427a1e1":"code","09b0e014":"code","41b2b10c":"code","c619d4b5":"code","0b1dc4c6":"code","68d98a2d":"code","e7adc01e":"code","7cfd285d":"code","e84f0f47":"markdown"},"source":{"78df1b72":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","c8fc9473":"train.info()","84804865":"print(train.shape)\nprint(test.shape)","95704dca":"null_cols = (train.isnull().sum() \/ len(train)).sort_values(ascending=False)[:20]\nnull_cols","6d478eff":"null_cols = null_cols[null_cols > 0.1].index\nnull_cols","73b90a71":"null_cols = list(null_cols)\nnull_cols","602827c0":"null_cols.append('Id')\nnull_cols","6649f1c3":"train_processed = train.drop(null_cols, axis=1)\ntest_processed = test.drop(null_cols, axis=1)","a43ee920":"print(train_processed.shape)\nprint(test_processed.shape)","253d5ff7":"correlation = pd.get_dummies(train_processed, drop_first=True).corr()['SalePrice']\ncorrelation = abs(correlation)\ncorrelation","6ae4bd5c":"low_corr = correlation[correlation < 0.2].index\nlow_corr","518fd9b0":"train_processed = pd.get_dummies(train_processed, drop_first=True)\ntest_processed = pd.get_dummies(test_processed, drop_first=True)","d12568e5":"print(train_processed.shape)\nprint(test_processed.shape)","14a1275f":"missing_cols = set(train_processed.columns) - set(test_processed.columns)\nmissing_cols","9de62334":"for col in missing_cols:\n    test_processed[col] = 0","710237e9":"print(train_processed.shape)\nprint(test_processed.shape)","abbe68c9":"train_processed.drop(low_corr, axis=1, inplace=True)\ntest_processed.drop(low_corr, axis=1, inplace=True)","426882ec":"print(train_processed.shape)\nprint(test_processed.shape)","f0257aaa":"X = train_processed.drop('SalePrice', axis=1)\nY = train_processed.SalePrice","ad0c8f19":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import Pipeline","90ccf044":"imputer = SimpleImputer()\nscaler = StandardScaler()","88062659":"preprocess = Pipeline([('imputer', imputer), ('scaler', scaler)])","a61cd390":"lr = LinearRegression()","3427a1e1":"pipeline = Pipeline([('preprocess', preprocess), ('lr', lr)])","09b0e014":"X_train, X_test, y_train, y_test = train_test_split(X, Y, train_size=0.8)","41b2b10c":"pipeline.fit(X_train, y_train)","c619d4b5":"pipeline['lr'].coef_","0b1dc4c6":"pipeline.score(X_test, y_test)","68d98a2d":"test_processed.drop('SalePrice', axis=1, inplace=True)\npred = pipeline.predict(test_processed)","e7adc01e":"submission = pd.DataFrame({\n    'Id': test.Id,\n    'SalePrice': pred\n})\nsubmission.head()","7cfd285d":"submission.to_csv('output.csv', index=False)","e84f0f47":"## import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))"}}