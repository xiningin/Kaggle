{"cell_type":{"1c396c70":"code","ba9324e7":"code","e601f9d4":"code","3d801d16":"code","05deca6f":"code","eed875cd":"code","058fcd89":"code","badbdd25":"code","ec0e1d63":"code","c4dc6911":"code","3c7f597b":"code","4080a31a":"code","317d28ff":"code","f3ff30f1":"code","080c4558":"code","922fc266":"code","8ec81136":"code","ab579b40":"code","3689f198":"code","3ed1e510":"code","56a67b54":"code","6b181c1a":"code","aa9ecda3":"code","d7a77e0a":"code","cdb238fb":"code","8856145c":"markdown","38b61a0d":"markdown","dda44f7a":"markdown","5c763bc5":"markdown","d218d706":"markdown","d006ef88":"markdown","ea6c932f":"markdown","f024f7d2":"markdown","3070638f":"markdown","7dac2c5a":"markdown","9f6d15b4":"markdown","5714cd9a":"markdown","28c8879e":"markdown","879942b0":"markdown","9508f330":"markdown","5b0ba0df":"markdown","0bb4818e":"markdown"},"source":{"1c396c70":"#standard import\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn import preprocessing\n%matplotlib inline","ba9324e7":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","e601f9d4":"import warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\npd.set_option('display.float_format', lambda x: '{:.3f}'.format(x))","3d801d16":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df    = pd.read_csv(\"..\/input\/test.csv\")","05deca6f":"fig, ax = plt.subplots()\nax.scatter(x = train_df['GrLivArea'], y = train_df['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","eed875cd":"print(train_df.shape)\n#remove outliers\ntrain_df = train_df.drop(train_df[(train_df['GrLivArea']>4000) & (train_df['SalePrice']<300000)].index)\nprint(train_df.shape)","058fcd89":"train_df[\"SalePrice\"] = np.log1p(train_df[\"SalePrice\"])\ny_train = train_df.SalePrice.values\nall_data = pd.concat((train_df, test_df)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nall_data.drop(['Id'], axis=1, inplace=True)\nntrain = train_df.shape[0]\nntest = test_df.shape[0]\nprint(all_data.shape)","badbdd25":"all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")\nall_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")\nall_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")\nall_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")\nall_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))\nfor col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')\nall_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)\nall_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])\nall_data = all_data.drop(['Utilities'], axis=1)\nall_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")\nall_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])\nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\nall_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])\nall_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")\n#MSSubClass=The building class\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)\n\nfrom sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\nprint(all_data.columns)","ec0e1d63":"all_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","c4dc6911":"from scipy import stats\nfrom scipy.stats import norm, skew \nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nprint(skewness.head(10))\nskewness = skewness[abs(skewness) > 0.75]\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    all_data[feat] = boxcox1p(all_data[feat], lam)","3c7f597b":"all_data = pd.get_dummies(all_data)","4080a31a":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","317d28ff":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\nENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\nKRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)\nGBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\nmodel_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\n\nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\n","f3ff30f1":"train = all_data[:ntrain]\ntest = all_data[ntrain:]\npd.set_option('display.max_columns', 4)\nprint(test)","080c4558":"n_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","922fc266":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","8ec81136":"class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    # we define clones of the original models to fit the data in\n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        # Train cloned base models\n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n    \n    #Now we do the predictions for cloned models and average them\n    def predict(self, X):\n        predictions = np.column_stack([\n            model.predict(X) for model in self.models_\n        ])\n        return np.mean(predictions, axis=1)   ","ab579b40":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    # We again fit the data on clones of the original models\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        # Train cloned base models then create out-of-fold predictions\n        # that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    #Do the predictions of all base models on the test data and use the averaged predictions as \n    #meta-features for the final prediction which is done by the meta-model\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)   ","3689f198":"x_train = train.values\ny_train = y_train\nx_pred=test.values","3ed1e510":"stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n                                                 meta_model = lasso)\nstacked_averaged_models.fit(x_train, y_train)\nstacked_train_pred = stacked_averaged_models.predict(x_train)\nstacked_pred = np.expm1(stacked_averaged_models.predict(x_pred))\nprint(rmsle(y_train, stacked_train_pred))","56a67b54":"averaged_models = AveragingModels(models = (ENet, GBoost, KRR, lasso))\naveraged_models.fit(x_train, y_train)\ntrain_pred = averaged_models.predict(x_train)\nave_pred = np.expm1(averaged_models.predict(x_pred))\nprint(rmsle(y_train, train_pred))","6b181c1a":"model_xgb.fit(train, y_train)\nxgb_train_pred = model_xgb.predict(train)\nxgb_pred = np.expm1(model_xgb.predict(test))\nprint(rmsle(y_train, xgb_train_pred))","aa9ecda3":"model_lgb.fit(train, y_train)\nlgb_train_pred = model_lgb.predict(train)\nlgb_pred = np.expm1(model_lgb.predict(test.values))\nprint(rmsle(y_train, lgb_train_pred))","d7a77e0a":"ensemble = stacked_pred*0.5 + ave_pred*0.2+ xgb_pred*0.1 + lgb_pred*0.2","cdb238fb":"sub = pd.DataFrame()\ntest_ID = test_df['Id']\nsub['Id'] = test_ID\nsub['SalePrice'] = ensemble\nprint(sub)\nsub.to_csv('submission.csv',index=False)","8856145c":"**What you will learn from here:**   \n1. EDA: exploratory data analysis\n2. Averaging Models\n3. Stacking Models\n4. Skew handling on SalePrice\n5. log precessing","38b61a0d":"3.4 Stacking averaged model function","dda44f7a":"This is a general method in handling outliers trend.","5c763bc5":"In here, I use log( ) function to process the target SalePrice. My reason for doing so is in log-log space, the small changes appears to be more significant. Therefore, SalePrice will be more sensitive to features.","d218d706":"3.3 Averaged model function","d006ef88":"3.6 Ensemble and submission","ea6c932f":"**2. EDA**","f024f7d2":"**3. ML**","3070638f":"**If you are as new as me, why don't you start your House Pricing Model with me. Part 2: advance model **  \nCreated by Raymond Wang\n\nIf you are as new as me Series:   \nTitanic https:\/\/www.kaggle.com\/yw6916\/titanic-if-you-are-as-new-as-me-1    \nHouse Pricing (Part 1) https:\/\/www.kaggle.com\/yw6916\/house-pricing-if-you-are-as-new-as-me-2   \n\nIn this Kernal, I will try to use some advance but popular techniques in Kaggle. This Kernal can be seen as one step-up from my original model (Part 1), and you may learn some of my logic and reasoning for improving performance.\nSince this is a advanced version, I will try to keep my words simple. If you have any question, please do leave me a comment.","7dac2c5a":"Standard import and data importation","9f6d15b4":"3.1. Data split","5714cd9a":"Feature Extraction: Adding total sqfootage feature to make a new one","28c8879e":"3.2 Vlidation","879942b0":"2.2 Skew Handling","9508f330":"2.1 Outliers Handling","5b0ba0df":"3.5 Model training","0bb4818e":"Data Engineering: transform all non-numerical data into numerical processable ones, and fill missing values."}}