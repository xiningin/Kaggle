{"cell_type":{"a668d4e9":"code","0e667279":"code","f9e7927a":"code","6eb00b76":"code","1aaca763":"code","19d9b6fd":"code","f5952240":"code","5f4e582d":"code","510628dc":"code","f3eecfb7":"code","98e81262":"code","308213ac":"code","4f34726f":"code","f8d655db":"code","fb0758dd":"code","2f44d8fa":"code","5b2284cf":"code","2867eb4a":"code","72b02f57":"code","c9759ddf":"code","48c9ff4c":"code","299b645f":"code","c64d40f8":"code","53cf4bcb":"code","8d645780":"code","d65f30cb":"code","67b60cb1":"code","7147b104":"code","2046a2bd":"code","f5e661f7":"code","1d3fb630":"markdown","99245c50":"markdown","38cfa9b5":"markdown","424d6e51":"markdown","2ddbd950":"markdown","84ab904e":"markdown","e3937c42":"markdown","96ecbcdd":"markdown","3f234461":"markdown","237a73a6":"markdown","b9577eaf":"markdown","cc66470c":"markdown","35947d68":"markdown","6bf2b97c":"markdown","38ca8283":"markdown","efe2e013":"markdown"},"source":{"a668d4e9":"! pip install https:\/\/github.com\/pandas-profiling\/pandas-profiling\/archive\/master.zip\n!pip install sweetviz\n","0e667279":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nfrom pandas_profiling import ProfileReport\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport matplotlib.pyplot as plt\n\nimport imblearn\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport matplotlib.pyplot as plt\n        \nfrom collections import Counter\nfrom sklearn.datasets import make_classification\nfrom imblearn.over_sampling import RandomOverSampler\nfrom imblearn.under_sampling import RandomUnderSampler\n\ninput_path = Path('\/kaggle\/input\/tabular-playground-series-mar-2021\/')","f9e7927a":"train = pd.read_csv(input_path \/ 'train.csv', index_col='id')\ndisplay(train.head())\n\ntest = pd.read_csv(input_path \/ 'test.csv', index_col='id')\ndisplay(test.head())\n\nsubmission = pd.read_csv(input_path \/ 'sample_submission.csv', index_col='id')\ndisplay(submission.head())","6eb00b76":"for c in train.columns:\n    if train[c].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(train[c].values) + list(test[c].values))\n        train[c] = lbl.transform(train[c].values)\n        test[c] = lbl.transform(test[c].values)\n        \ndisplay(train.head())","1aaca763":"target = train.pop('target')\nX_train, X_test, y_train, y_test = train_test_split(train, target, train_size=0.80)","19d9b6fd":"prof = ProfileReport(train)\n#prof","f5952240":"import sweetviz as sv\n#analyzing the dataset\ndf_analysis=sv.analyze(train)\n\n#df_analysis.show_html('train_analysis.html')\n","5f4e582d":"print(target.value_counts())\n\ntarget.value_counts().plot(kind=\"bar\");","510628dc":"clf = RandomForestClassifier(n_estimators=200, max_depth=7, n_jobs=-1)\nclf.fit(X_train, y_train)\ny_pred = clf.predict_proba(X_test)[:, 1] # This grabs the positive class prediction\nscore = roc_auc_score(y_test, y_pred)\nprint(f'{score:0.5f}') # 0.87323 shows we're doing better than a dummy model","f3eecfb7":"from catboost import CatBoostClassifier\n#!pip install --upgrade xgboost\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\n\n\nmodel_names = [\n                \"Random Forest\"\n               , \"CatBoost\"\n               , \"LGBM\"\n              ]\nmodels = [\n    RandomForestClassifier(n_estimators=200, max_depth=7, n_jobs=-1)\n    ,CatBoostClassifier(logging_level='Silent')\n    ,LGBMClassifier()\n]\nperfs={}\n\nfor name, model in zip(model_names, models):\n    model.fit(X_train, y_train)\n    y_pred = model.predict_proba(X_test)[:, 1] # This grabs the positive class prediction\n    score = roc_auc_score(y_test, y_pred)\n    print(name,\" : \", score)\n    perfs[name]=score","98e81262":"print(perfs)","308213ac":"from catboost import CatBoostClassifier\nmodel = CatBoostClassifier(logging_level='Silent')\n\nmodel.fit(X_train, y_train)\ny_pred = model.predict_proba(X_test)[:, 1] # This grabs the positive class prediction\nscore = roc_auc_score(y_test, y_pred)\nprint(\"Score : \", score)\nfor key, value in model.get_all_params().items():\n    print(f\"    {key}: {value}\")","4f34726f":"import optuna\nimport catboost as cb\n\nX = np.array(X_train)\ny = np.array(y_train)\n\ndef objective(trial):\n    train_x, valid_x, train_y, valid_y = train_test_split(X,y, test_size=0.3)\n\n    param = {\n#        \"objective\": trial.suggest_categorical(\"objective\", [\"Logloss\", \"CrossEntropy\"]),\n        \"objective\": trial.suggest_categorical(\"objective\", [\"Logloss\"]),\n        #\"colsample_bylevel\": trial.suggest_float(\"colsample_bylevel\", 0.01, 0.1),\n        #\"learning_rate\": trial.suggest_float(\"colsample_bylevel\", 0.09, 0.11),\n        \"depth\": trial.suggest_int(\"depth\", 4, 8),\n        \"boosting_type\": trial.suggest_categorical(\"boosting_type\", [\"Ordered\", \"Plain\"]),\n        \"bootstrap_type\": trial.suggest_categorical(\n            \"bootstrap_type\", [\n                                \"Bayesian\"\n                               #, \"Bernoulli\"\n                               , \"MVS\"]\n        ),\n        \"auto_class_weights\":\"SqrtBalanced\",\n        \"used_ram_limit\": \"3gb\",\n    }\n\n    if param[\"bootstrap_type\"] == \"Bayesian\":\n        param[\"bagging_temperature\"] = trial.suggest_float(\"bagging_temperature\", 0, 10)\n    elif param[\"bootstrap_type\"] == \"Bernoulli\":\n        param[\"subsample\"] = trial.suggest_float(\"subsample\", 0.1, 1)\n\n    gbm = cb.CatBoostClassifier(**param)\n\n    gbm.fit(train_x, train_y, eval_set=[(valid_x, valid_y)], verbose=0, early_stopping_rounds=100)\n\n    preds = gbm.predict_proba(valid_x)[:, 1]\n    score = roc_auc_score(valid_y, preds)\n    return score\n\n\nstudy = optuna.create_study(direction=\"maximize\")\nstudy.optimize(objective, n_trials=50, timeout=600)","f8d655db":"optuna.visualization.plot_optimization_history(study)","fb0758dd":"optuna.visualization.plot_param_importances(study)","2f44d8fa":"print(\"Best trial until now:\")\nprint('Number of finished trials:', len(study.trials))\nprint('Best value:', study.best_value)\nprint(\"Best trial: \", study.best_trial.value)\nprint(\" Params: \")\nfor key, value in study.best_trial.params.items():\n    print(f\"    {key}: {value}\")\n\nclf = cb.CatBoostClassifier(**study.best_trial.params)\n\ntrain_x, valid_x, train_y, valid_y = train_test_split(np.array(X_train),np.array(y_train), test_size=0.3)\n\nclf.fit(train_x, train_y, eval_set=[(valid_x, valid_y)], verbose=0, early_stopping_rounds=1000)\n\ny_pred = clf.predict_proba(X_test)[:, 1] # This grabs the positive class prediction\nscore = roc_auc_score(y_test, y_pred)\nprint(f'{score:0.5f}')\nsubmission['target'] = clf.predict_proba(test)[:, 1]\nsubmission.to_csv('catboost_optuna.csv')","5b2284cf":"%%time\nfrom sklearn.model_selection import KFold\nfolds = KFold(n_splits = 10, shuffle = True, random_state = 42)\nX = np.array(X_train)\ny = np.array(y_train)\n\npredictions = np.zeros(len(test))\n\nfor fold, (trn_idx, val_idx) in enumerate(folds.split(X_train, y_train)):\n    \n    X_train_kf, X_val_kf = X_train.iloc[trn_idx], X_train.iloc[val_idx]\n    y_train_kf, y_val_kf = y_train.iloc[trn_idx], y_train.iloc[val_idx]\n\n    model = CatBoostClassifier(**study.best_trial.params)\n   \n    model.fit(X_train_kf, y_train_kf, eval_set = [(X_val_kf, y_val_kf)], verbose = False, early_stopping_rounds = 222)\n    \n    predictions += model.predict_proba(test)[:,1] \/ folds.n_splits ","2867eb4a":"submission = pd.DataFrame({'id': test.index, 'target': predictions})\nsubmission.to_csv('submission_optuna_catboost_kfold.csv', index = False)","72b02f57":"plt.figure(figsize=(8,4))\nplt.hist(y_pred[np.where(y_test == 0)], bins=100, alpha=0.75, label='neg class')\nplt.hist(y_pred[np.where(y_test == 1)], bins=100, alpha=0.75, label='pos class')\nplt.legend()\nplt.show()","c9759ddf":"import optuna\nfrom lightgbm import LGBMClassifier\n\nX = np.array(X_train)\ny = np.array(y_train)\n\ndef objective(trial):\n    X_train_opt, X_val_opt, y_train_opt, y_val_opt = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n    params = {\n        'reg_alpha': trial.suggest_float('reg_alpha', 0.001, 10.0),\n        'reg_lambda': trial.suggest_float('reg_lambda', 0.001, 10.0),\n        'num_leaves': trial.suggest_int('num_leaves', 11, 333),\n        'min_child_samples': trial.suggest_int('min_child_samples', 5, 100),\n        'max_depth': trial.suggest_int('max_depth', 5, 20),\n        'learning_rate': trial.suggest_categorical('learning_rate', [0.01, 0.02, 0.05, 0.005, 0.1]),\n        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.1, 0.5),\n        'n_estimators': trial.suggest_int('n_estimators', 50, 3000),\n        'random_state': 42,\n        'boosting_type': 'gbdt',\n        'metric': 'AUC',\n        'device': 'gpu'\n    }\n    \n    model = LGBMClassifier(**params)  \n    model.fit(X_train_opt, y_train_opt, eval_set = [(X_val_opt,y_val_opt)], early_stopping_rounds = 222, verbose = False)\n    y_pred_opt = model.predict_proba(X_val_opt)[:,1]\n    score = roc_auc_score(y_val_opt, y_pred_opt)\n    return score\n\n\nstudy = optuna.create_study(direction=\"maximize\")\nstudy.optimize(objective, n_trials=50, timeout=600)","48c9ff4c":"optuna.visualization.plot_optimization_history(study)","299b645f":"optuna.visualization.plot_param_importances(study)","c64d40f8":"print(\"Best trial until now:\")\nprint('Number of finished trials:', len(study.trials))\nprint('Best value:', study.best_value)\nprint(\"Best trial: \", study.best_trial.value)\nprint(\" Params: \")\nfor key, value in study.best_trial.params.items():\n    print(f\"    {key}: {value}\")\n\nclf = LGBMClassifier(**study.best_trial.params)\n\ntrain_x, valid_x, train_y, valid_y = train_test_split(np.array(X_train),np.array(y_train), test_size=0.3)\n\nclf.fit(train_x, train_y, eval_set=[(valid_x, valid_y)], verbose=0, early_stopping_rounds=1000)\n\ny_pred = clf.predict_proba(X_test)[:, 1] # This grabs the positive class prediction\nscore = roc_auc_score(y_test, y_pred)\nprint(f'{score:0.5f}')\nsubmission['target'] = clf.predict_proba(test)[:, 1]\nsubmission.to_csv('lgbm_optuna.csv')","53cf4bcb":"%%time\nfrom sklearn.model_selection import KFold\nfolds = KFold(n_splits = 10, shuffle = True, random_state = 42)\nX = np.array(X_train)\ny = np.array(y_train)\n\npredictions = np.zeros(len(test))\n\nfor fold, (trn_idx, val_idx) in enumerate(folds.split(X_train, y_train)):\n    \n    X_train_kf, X_val_kf = X_train.iloc[trn_idx], X_train.iloc[val_idx]\n    y_train_kf, y_val_kf = y_train.iloc[trn_idx], y_train.iloc[val_idx]\n\n    model = LGBMClassifier(**study.best_trial.params)\n   \n    model.fit(X_train_kf, y_train_kf, eval_set = [(X_val_kf, y_val_kf)], verbose = False, early_stopping_rounds = 222)\n    \n    predictions += model.predict_proba(test)[:,1] \/ folds.n_splits ","8d645780":"submission = pd.DataFrame({'id': test.index, 'target': predictions})\nsubmission.to_csv('submission_optuna_lightgbm_kfold.csv', index = False)","d65f30cb":"plt.figure(figsize=(8,4))\nplt.hist(y_pred[np.where(y_test == 0)], bins=100, alpha=0.75, label='neg class')\nplt.hist(y_pred[np.where(y_test == 1)], bins=100, alpha=0.75, label='pos class')\nplt.legend()\nplt.show()","67b60cb1":"# define oversampling strategy\noversample = RandomOverSampler(sampling_strategy='minority')\n# fit and apply the transform\nX_over, y_over = oversample.fit_resample(X_train, y_train)\nprint(Counter(y_over))\n\ny_over.value_counts().plot(kind=\"bar\");","7147b104":"X_train_over, X_test_over, y_train_over, y_test_over = train_test_split(X_over, y_over, train_size=0.60)\n#clf = RandomForestClassifier(n_estimators=200, max_depth=7, n_jobs=-1)\nclf=CatBoostClassifier(**study.best_trial.params)\nclf.fit(X_train_over, y_train_over)\ny_pred = clf.predict_proba(X_test)[:, 1] # This grabs the positive class prediction\nscore = roc_auc_score(y_test, y_pred)\nprint(f'{score:0.5f}') # 0.87323 shows we're doing better than a dummy model\nsubmission['target'] = clf.predict_proba(test)[:, 1]\nsubmission.to_csv('catboost_optuna_oversampling.csv')","2046a2bd":"# define oversampling strategy\nundersample = RandomUnderSampler(sampling_strategy='majority')\n# fit and apply the transform\nX_under, y_under = undersample.fit_resample(X_train, y_train)\nprint(Counter(y_under))\n\ny_under.value_counts().plot(kind=\"bar\");","f5e661f7":"X_train_under, X_test_under, y_train_under, y_test_under = train_test_split(X_under, y_under, train_size=0.60)\n#clf = RandomForestClassifier(n_estimators=200, max_depth=7, n_jobs=-1)\nclf=CatBoostClassifier(**study.best_trial.params)\n\nclf.fit(X_train_under, y_train_under)\ny_pred = clf.predict_proba(X_test)[:, 1] # This grabs the positive class prediction\nscore = roc_auc_score(y_test, y_pred)\nprint(f'{score:0.5f}') # 0.87323 shows we're doing better than a dummy model\nsubmission['target'] = clf.predict_proba(test)[:, 1]\nsubmission.to_csv('catboost_optuna_undersampling.csv')","1d3fb630":"The dataset is clearly imbalanced. We will have to deal with a classification on an imbalanced dataset.\nThere are two ways to deal with imbalanced data : \n* over-sampling : increase the number of instances in the minority class\n* under-sampling : decrease the number of instances in the majority class","99245c50":"## Model comparison","38cfa9b5":"## Over sampling","424d6e51":"# Baseline with 'Simple Random Forest'","2ddbd950":"## What are the default CatBoost hyperparams ?","84ab904e":"# [Tabular Playground Series - Mar 2021 competition.](http:\/\/https:\/\/www.kaggle.com\/c\/tabular-playground-series-mar-2021)\n","e3937c42":"## Target distribution\n","96ecbcdd":"## EDA","3f234461":"## SMOTE : TODO\nSee : https:\/\/medium.com\/swlh\/using-synthetic-data-for-imbalanced-classes-in-a-classification-model-83dfd3ab453c\n","237a73a6":"### Catboost & optuna","b9577eaf":"### LGBM & optuna","cc66470c":"## Hyperparameters optimization\nLet's try to optimize model hyperparameters to improve the score. We will use optuna.","35947d68":"## Pull out the target, and make a validation split","6bf2b97c":"## Import libraries & read data","38ca8283":"## Categorical values","efe2e013":"# Under sampling"}}