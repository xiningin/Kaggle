{"cell_type":{"dc7daddd":"code","a40dea43":"code","ff74297d":"code","39cf6ff1":"code","b44ab234":"code","f8116b70":"code","4d868036":"code","62a3da2c":"code","15ce364f":"code","c3aad3e1":"code","632dacf7":"code","b442c6a3":"code","c95f6d14":"code","96efbc03":"code","bb78a618":"code","c534013d":"code","562953fd":"code","ee2e369a":"code","f919af9a":"code","69b25725":"markdown","89948c23":"markdown","afbe231f":"markdown","5dc47637":"markdown"},"source":{"dc7daddd":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n%matplotlib inline","a40dea43":"df  = pd.read_csv(\"..\/input\/iris\/Iris.csv\")\ndf.head()","ff74297d":"df = df.drop(\"Id\", axis = 1)\ndf.head()","39cf6ff1":"df.info()","b44ab234":"df.describe()","f8116b70":"df[\"Species\"].value_counts()","4d868036":"# Correlation between attributes\ndf.corr()","62a3da2c":"fig, axes = plt.subplots(2, 2, figsize=(10,5), dpi = 100) #To create a Group of graphs\nfig.suptitle(\"Distribution of (sepal length, sepal width, petal length, petal width) per Species\")\n\n# For Sepal Length of the Species\nsns.kdeplot(ax = axes[0,0], data = df, x = 'SepalLengthCm', hue = 'Species', shade = True, alpha=0.5)#alpha is for contrast\naxes[0,0].get_legend().remove()\n\n# For Sepal Width of the Species\nsns.kdeplot(ax = axes[0,1], data = df, x = 'SepalWidthCm', hue = 'Species', shade = True, alpha=0.5)\naxes[0,1].get_legend().remove()\n\n# For Petal Length of the Species\nsns.kdeplot(ax = axes[1,0], data = df, x = 'PetalLengthCm', hue = 'Species', shade = True, alpha=0.5)\naxes[1,0].get_legend().remove()\n\n# For Petal Width of the Species\nsns.kdeplot(ax = axes[1,1], data = df, x = 'PetalWidthCm', hue = 'Species', shade = True, alpha=0.5)\n\nplt.tight_layout() # For better alignment","15ce364f":"# A Graph to show petal length vs petal width\nplt.figure(figsize=(7,3), dpi = 100)\nsns.scatterplot(data = df, x = 'PetalLengthCm', y = 'PetalWidthCm', hue = 'Species')\nplt.title(\"Species clusters based on Petal length and width\")","c3aad3e1":"# A Graph to show Sepal length vs Sepal width\nplt.figure(figsize=(7,3), dpi = 100)\nsns.scatterplot(data = df, x = 'SepalLengthCm', y = 'SepalWidthCm', hue = 'Species')\nplt.title(\"Species clusters based on Sepal length and width\")","632dacf7":"# Correlation Map\nplt.figure(figsize=(8,4), dpi=100)\nsns.heatmap(df.corr(), annot=True, cmap = 'YlGnBu', vmin = -1, vmax = 1)\nplt.title(\" Correlation Map between attributes\")","b442c6a3":"x = df.drop('Species', axis = 1)\ny = df[\"Species\"]","c95f6d14":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 101)","96efbc03":"from sklearn import svm\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn import metrics # for checking accuracy","bb78a618":"model = svm.SVC() #select the algorithm\nmodel.fit(x_train,y_train) # we train the algorithm with the training data and the training output\nprediction=model.predict(x_test) #now we pass the testing data to the trained algorithm\nprint('The accuracy of the SVM is:',metrics.accuracy_score(prediction,y_test))","c534013d":"model = DecisionTreeClassifier() #select the algorithm\nmodel.fit(x_train, y_train) # we train the algorithm with the training data and the training output\nprediction=model.predict(x_test) #now we pass the testing data to the trained algorithm\nprint('The accuracy of the Decision Tree Classifier is:',metrics.accuracy_score(prediction,y_test))","562953fd":"metrics.confusion_matrix(y_test, prediction)","ee2e369a":"metrics.plot_confusion_matrix(model, x_test, y_test)","f919af9a":"print(metrics.classification_report(y_test, prediction))","69b25725":"# Visualizations","89948c23":"# Trying Models for Prediction","afbe231f":"# Looking at the Data","5dc47637":"**From this graph we can see that it will be easier to classify the species based on the Petal attributes than the Sepal attributes.**"}}