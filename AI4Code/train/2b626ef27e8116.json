{"cell_type":{"48f0dd82":"code","b7e62f2c":"code","c4544e48":"code","e55865e9":"code","f93aee23":"code","ce983085":"code","42dd0582":"code","8031a7ca":"code","36d9f747":"code","8d030f75":"code","fd6f1514":"code","d202e3a7":"code","14cdc7f5":"code","59fae2ba":"code","9ed553a2":"code","d6e82d8f":"code","d1678fa1":"code","a0ab5a30":"code","4f8473fb":"code","bd88af31":"code","6c80fba1":"code","87963720":"code","7a6d5950":"code","b0eccf8c":"code","4ab6b829":"code","e5375eca":"code","0096037e":"code","7368f9f0":"code","7c3120ad":"code","1b43c263":"code","e6b18c23":"code","4bc682b6":"code","f9424bdc":"code","90986251":"code","fab7796c":"code","bcf3c0f6":"code","50b9f33e":"code","2863ab6a":"code","0c2871bc":"code","53cc5838":"code","9db45b3d":"code","a04343be":"code","a4d30152":"code","0ebedeb7":"code","0c02dfc5":"code","93d4dc2f":"code","548026e3":"code","f9e1cd4e":"code","389f51c7":"code","cf52acff":"code","fb186bcf":"code","45e9eca2":"code","e909ec65":"code","e12c7601":"code","abe3e989":"code","74ad7e8d":"code","4e579ad9":"code","14e27440":"code","797fc76a":"code","4ddf8890":"code","e570ad1d":"code","68df6fd7":"code","52cf218e":"code","9681ed5f":"code","37dc6217":"code","8e66d683":"code","08ceac7c":"code","874605a6":"code","0d8ff259":"code","fe5b2ad6":"code","afa705e5":"code","057e247c":"code","848a494d":"code","de1384e2":"code","0bc8684b":"code","ff14c31e":"code","4e47ac66":"code","014c9fef":"code","1f375b1c":"code","e5788ff8":"code","5c6dc21e":"code","dbf6c88a":"code","0c9d3237":"code","861976b8":"code","d57e1159":"code","c1f67c11":"code","36ec4929":"code","7b27c779":"code","163840c9":"code","478dbb0b":"code","d79b97f5":"code","74462d25":"code","3e89c029":"code","bae9bfc3":"code","22acca2e":"code","bfea28d9":"code","079b21af":"code","942180d4":"code","185a7512":"code","22b2d9f2":"code","be2c1fbb":"code","5a268919":"code","8fc91bf7":"code","6a070b62":"code","f8351355":"code","f6675da0":"code","843e7176":"code","62b37c03":"code","1067f95a":"code","237adff7":"code","987528d3":"code","73b25fa5":"code","a3b66c84":"code","06679728":"code","888d29fc":"code","a61b17fe":"code","7e34ea0c":"code","580c1968":"code","c31baccd":"code","f097fb97":"code","9868d647":"code","211c257b":"code","dcc12b16":"code","1d9fcf70":"code","415030a4":"code","75227006":"code","2e819154":"code","0698ec0d":"code","13708930":"code","51078c49":"code","7723258a":"code","fd861289":"code","60abf853":"code","7976dcfb":"code","0b95f0fd":"code","ce948874":"markdown","7559b54c":"markdown","b5c6c5b7":"markdown","284005a2":"markdown","189522fa":"markdown"},"source":{"48f0dd82":"#Import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","b7e62f2c":"colnames = [\"Name\",\"Country\",\"Operator\",\"OperatorCountry\",\"Users\",\"Purpose\",\"PurposeDetail\",\"OrbitClass\",\"OrbitType\",\n           \"OrbitLong\",\"Perigree\",\"Apogee\",\"Eccentricity\",\"Inclination\",\"Period\",\"LaunchMass\",\"DryMass\",\"Power\",\n            \"LaunchDate\",\"ExpLifetime\",\"Contractor\",\"ContractorCountry\",\"LaunchSite\",\"LaunchVehicle\",\"COSPAR\",\"NORAD\"]\nsat = pd.read_csv(\"..\/input\/database.csv\",names = colnames,header=0)","c4544e48":"#Remove records with too many NaN values\ndroprow = [796]\nsat = sat.drop(droprow)\nsat = sat.reset_index(drop=True)","e55865e9":"sat.head()","f93aee23":"sat.shape","ce983085":"sat.dtypes","42dd0582":"sat.Name.describe()","8031a7ca":"name_counts = sat['Name'].value_counts()","36d9f747":"name_counts[name_counts == 2]","8d030f75":"sat.Country.describe()","fd6f1514":"sat.Country.value_counts()","d202e3a7":"fig, ax = plt.subplots(figsize=(14,6))\nsns.countplot(sat['Country'], order = sat.Country.value_counts().iloc[:20].index)\nplt.xticks(rotation=80)\nplt.title(\"Top 20 countries sending out satellites\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Country\")\nplt.ylabel(\"Number of satellites\")","14cdc7f5":"sat.Operator.describe()","59fae2ba":"fig, ax = plt.subplots(figsize=(14,6))\nsns.countplot(sat['Operator'], order = sat.Operator.value_counts().iloc[:20].index)\nplt.xticks(rotation=80)\nplt.title(\"Top 20 operators managing satellites\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Operator\")\nplt.ylabel(\"Number of satellites\")","9ed553a2":"sat.OperatorCountry.describe()","d6e82d8f":"fig, ax = plt.subplots(figsize=(14,6))\nsns.countplot(sat['OperatorCountry'], order = sat.OperatorCountry.value_counts().iloc[:20].index)\nplt.xticks(rotation=80)\nplt.title(\"Top 20 countries of operators managing satellites\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Country of operator\")\nplt.ylabel(\"Number of satellites\")","d1678fa1":"sat.Users.describe()","a0ab5a30":"#Clean up 'Users' data\nfor i in sat.index:\n    if sat.loc[i,'Users'] == 'Commercial\/Government':\n        sat.loc[i,'Users'] = 'Government\/Commercial'\n    if sat.loc[i,'Users'] == 'Military\/Government':\n        sat.loc[i,'Users'] = 'Government\/Military'\n    if sat.loc[i,'Users'] == 'Commerical':\n        sat.loc[i,'Users'] = 'Commercial'\n    if sat.loc[i,'Users'] == 'Civil\/Government':\n        sat.loc[i,'Users'] = 'Government\/Civil'\n    if sat.loc[i,'Users'] == 'Military ':\n        sat.loc[i,'Users'] = 'Military'","4f8473fb":"fig, ax = plt.subplots(figsize=(14,6))\nsns.countplot(sat['Users'], order = sat.Users.value_counts().index)\nplt.xticks(rotation=80)\nplt.title(\"Users of satellites\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"User\")\nplt.ylabel(\"Number of satellites\")","bd88af31":"#Create Boolean variables for Users\nusers = ['Commercial','Government','Military','Civil']\n\nfor i in users:\n    sat[i] = 0","6c80fba1":"for i in sat.index:\n    if sat.loc[i,'Users'] == 'Commercial':\n        sat.loc[i,'Commercial'] = 1\n    if sat.loc[i,'Users'] == 'Government':\n        sat.loc[i,'Government'] = 1\n    if sat.loc[i,'Users'] == 'Military':\n        sat.loc[i,'Military'] = 1\n    if sat.loc[i,'Users'] == 'Government\/Commercial':\n        sat.loc[i,'Government'] = 1\n        sat.loc[i,'Commercial'] = 1\n    if sat.loc[i,'Users'] == 'Civil':\n        sat.loc[i,'Civil'] = 1\n    if sat.loc[i,'Users'] == 'Military\/Commercial':\n        sat.loc[i,'Military'] = 1\n        sat.loc[i,'Commercial'] = 1\n    if sat.loc[i,'Users'] == 'Government\/Military':\n        sat.loc[i,'Government'] = 1\n        sat.loc[i,'Military'] = 1\n    if sat.loc[i,'Users'] == 'Government\/Civil':\n        sat.loc[i,'Government'] = 1\n        sat.loc[i,'Civil'] = 1\n    if sat.loc[i,'Users'] == 'Military\/Civil':\n        sat.loc[i,'Military'] = 1\n        sat.loc[i,'Civil'] = 1\n    if sat.loc[i,'Users'] == 'Commercial\/Gov\/Mil':\n        sat.loc[i,'Commercial'] = 1\n        sat.loc[i,'Government'] = 1\n        sat.loc[i,'Military'] = 1","87963720":"user_counts = {}\nfor i in users:\n    user_counts[i] = sat[i].sum()","7a6d5950":"fig, ax = plt.subplots(figsize=(14,6))\nplt.bar(user_counts.keys(),user_counts.values())\nplt.title(\"Users of satellites\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"User\")\nplt.ylabel(\"Number of satellites\")","b0eccf8c":"sat.Purpose.describe()","4ab6b829":"fig, ax = plt.subplots(figsize=(14,6))\nsns.countplot(sat['Purpose'], order = sat.Purpose.value_counts().iloc[:8].index)\nplt.xticks(rotation=80)\nplt.title(\"Purposes of satellites\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Purpose\")\nplt.ylabel(\"Number of satellites\")","e5375eca":"purposes = ['Communications','Earth Observation\/Science','Tech Development','Navigation','Space Science']\n\nfor i in purposes:\n    sat[i] = 0","0096037e":"for i in sat.index:\n    if sat.loc[i,'Purpose'] == 'Communications':\n        sat.loc[i,'Communications'] = 1\n    if sat.loc[i,'Purpose'] == 'Earth Observation':\n        sat.loc[i,'Earth Observation\/Science'] = 1\n    if sat.loc[i,'Purpose'] == 'Technology Development':\n        sat.loc[i,'Tech Development'] = 1\n    if sat.loc[i,'Purpose'] == 'Navigation\/Global Positioning':\n        sat.loc[i,'Navigation'] = 1\n    if sat.loc[i,'Purpose'] == 'Space Science':\n        sat.loc[i,'Space Science'] = 1\n    if sat.loc[i,'Purpose'] == 'Communications\/Technology Development':\n        sat.loc[i,'Communications'] = 1\n    if sat.loc[i,'Purpose'] == 'Naviation\/Regional Positioning':\n        sat.loc[i,'Navigation'] = 1","7368f9f0":"purpose_counts = {}\nfor i in purposes:\n    purpose_counts[i] = sat[i].sum()","7c3120ad":"fig, ax = plt.subplots(figsize=(14,6))\nplt.bar(purpose_counts.keys(),purpose_counts.values())\nplt.title(\"Purpose of satellites\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Purpose\")\nplt.ylabel(\"Number of satellites\")","1b43c263":"sat.PurposeDetail.describe()","e6b18c23":"fig, ax = plt.subplots(figsize=(14,6))\nsns.countplot(sat['PurposeDetail'], order = sat.PurposeDetail.value_counts().index)\nplt.xticks(rotation=80)\nplt.title(\"Detailed purpose of satellites\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Purpose\")\nplt.ylabel(\"Number of satellites\")","4bc682b6":"sat.OrbitClass.describe()","f9424bdc":"sat[sat['OrbitClass'] == 'LEO ']","90986251":"sat['OrbitClass'].loc[1327] = 'LEO'","fab7796c":"sat.OrbitClass.describe()","bcf3c0f6":"fig, ax = plt.subplots(figsize=(14,6))\nsns.countplot(sat['OrbitClass'], order = sat.OrbitClass.value_counts().index)\nplt.xticks(rotation=80)\nplt.title(\"Orbit class of satellites\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Orbit class\")\nplt.ylabel(\"Number of satellites\")","50b9f33e":"sat.OrbitType.describe()","2863ab6a":"sat[sat['OrbitType'].isnull()]","0c2871bc":"fig, ax = plt.subplots(figsize=(14,6))\nsns.countplot(sat['OrbitType'], order = sat.OrbitType.value_counts().index)\nplt.xticks(rotation=80)\nplt.title(\"Orbit type of satellites\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Orbit type\")\nplt.ylabel(\"Number of satellites\")","53cc5838":"sat.OrbitLong.describe()","9db45b3d":"sat[sat['OrbitLong'].isnull()]","a04343be":"fig, ax = plt.subplots(figsize=(8,8))\nplt.boxplot(sat[sat['OrbitLong'].notnull()].OrbitLong)\nplt.title(\"Boxplot of satellite orbit longitude\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.ylabel(\"Orbit Longitude\")\n\n#The boxplot reveals that the large majority of satellites have an Orbit Longitude of 0 degrees in the dataset.\n#This is likely because a 0 is used to mark the Orbit Longitude for satellites that are not geosynchroneous.","a4d30152":"fig, ax = plt.subplots(figsize=(12,6))\nplt.hist(sat['OrbitLong'].dropna(), bins = 8)\nplt.title(\"Histogram of satellite orbit longitude\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Orbit Longitude\")","0ebedeb7":"sat.Perigree.describe()","0c02dfc5":"fig, ax = plt.subplots(figsize=(8,8))\nplt.boxplot(sat[sat['Perigree'].notnull()].Perigree)\nplt.title(\"Boxplot of satellite perigree\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.ylabel(\"Perigree\")","93d4dc2f":"fig, ax = plt.subplots(figsize=(12,6))\nplt.hist(sat['Perigree'].dropna(), bins = 8)\nplt.title(\"Histogram of satellite perigree\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Perigree\")","548026e3":"sat.Apogee.describe()","f9e1cd4e":"fig, ax = plt.subplots(figsize=(8,8))\nplt.boxplot(sat[sat['Apogee'].notnull()].Apogee)\nplt.title(\"Boxplot of satellite apogee\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.ylabel(\"Apogee\")","389f51c7":"fig, ax = plt.subplots(figsize=(12,6))\nplt.hist(sat['Apogee'].dropna(), bins = 8)\nplt.title(\"Histogram of satellite apogee\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Apogee\")","cf52acff":"sat.Eccentricity.describe()","fb186bcf":"fig, ax = plt.subplots(figsize=(8,8))\nplt.boxplot(sat[sat['Eccentricity'].notnull()].Eccentricity)\nplt.title(\"Boxplot of satellite eccentricity\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.ylabel(\"Eccentricity\")","45e9eca2":"fig, ax = plt.subplots(figsize=(12,6))\nplt.hist(sat['Eccentricity'].dropna(), bins = 8)\nplt.title(\"Histogram of satellite eccentricity\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Eccentricity\")","e909ec65":"sat.Inclination.describe()","e12c7601":"fig, ax = plt.subplots(figsize=(8,8))\nplt.boxplot(sat[sat['Inclination'].notnull()].Inclination)\nplt.title(\"Boxplot of satellite inclination\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.ylabel(\"Inclination\")","abe3e989":"fig, ax = plt.subplots(figsize=(12,6))\nplt.hist(sat['Inclination'].dropna(), bins = 8)\nplt.title(\"Histogram of satellite inclination\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Inclination\")","74ad7e8d":"sat.Period.describe()","4e579ad9":"#Replace non-numeric values\nfor i in sat.index:\n    if sat.loc[i,'Period'] == '8 days':\n        sat.loc[i,'Period'] = 8*60*24\n\nsat.Period = pd.to_numeric(sat.Period)","14e27440":"sat.Period.describe()","797fc76a":"fig, ax = plt.subplots(figsize=(8,8))\nplt.boxplot(sat[sat['Period'].notnull()].Period)\nplt.title(\"Boxplot of satellite period\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.ylabel(\"Period\")","4ddf8890":"fig, ax = plt.subplots(figsize=(12,6))\nplt.hist(sat['Period'].dropna(), bins = 8)\nplt.title(\"Histogram of satellite period\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Period\")","e570ad1d":"sat.LaunchMass.describe()","68df6fd7":"#Replace non-numeric values\nfor i in sat.index:\n    if sat.loc[i,'LaunchMass'] == '5,000+':\n        sat.loc[i,'LaunchMass'] = 5000\n        \nsat.LaunchMass = pd.to_numeric(sat.LaunchMass)","52cf218e":"sat.LaunchMass.describe()","9681ed5f":"sat[sat['LaunchMass'].isnull()]","37dc6217":"fig, ax = plt.subplots(figsize=(8,8))\nplt.boxplot(sat[sat['LaunchMass'].notnull()].LaunchMass)\nplt.title(\"Boxplot of satellite launch mass\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.ylabel(\"Launch Mass\")","8e66d683":"fig, ax = plt.subplots(figsize=(12,6))\nplt.hist(sat['LaunchMass'].dropna(), bins = 8)\nplt.title(\"Histogram of satellite launch mass\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Launch Mass\")","08ceac7c":"sat.DryMass.describe()","874605a6":"#Replace non-numeric values\nfor i in sat.index:\n    if sat.loc[i,'DryMass'] == \"2,316 (BOL)\":\n        sat.loc[i,'DryMass'] = 2316\n    if sat.loc[i,'DryMass'] == \"3,010 (BOL)\":\n        sat.loc[i,'DryMass'] = 3010\n    if sat.loc[i,'DryMass'] == \"2,500 (BOL)\":\n        sat.loc[i,'DryMass'] = 2500\n    if sat.loc[i,'DryMass'] == \"1,050 (BOL)\":\n        sat.loc[i,'DryMass'] = 1050\n    if sat.loc[i,'DryMass'] == \"1,500-1,900\":\n        sat.loc[i,'DryMass'] = 1700\n    if sat.loc[i,'DryMass'] == \"2,510 (BOL)\":\n        sat.loc[i,'DryMass'] = 2510\n    if sat.loc[i,'DryMass'] == \"2,389 (BOL)\":\n        sat.loc[i,'DryMass'] = 2389\n    if sat.loc[i,'DryMass'] == \" \":\n        sat.loc[i,'DryMass'] = np.nan\n    if sat.loc[i,'DryMass'] == \"1,700 (BOL)\":\n        sat.loc[i,'DryMass'] = 1700\n        \nsat.DryMass = pd.to_numeric(sat.DryMass)","0d8ff259":"sat.DryMass.describe()","fe5b2ad6":"fig, ax = plt.subplots(figsize=(8,8))\nplt.boxplot(sat[sat['DryMass'].notnull()].DryMass)\nplt.title(\"Boxplot of satellite dry mass\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.ylabel(\"Dry Mass\")","afa705e5":"fig, ax = plt.subplots(figsize=(12,6))\nplt.hist(sat['DryMass'].dropna(), bins = 8)\nplt.title(\"Histogram of satellite dry mass\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Dry Mass\")","057e247c":"sat.Power.describe()","848a494d":"#Replace non-numeric values\nfor i in sat.index:\n    if isinstance(sat.loc[i,'Power'], str):\n        sat.loc[i,'Power'] = sat.loc[i,'Power'].strip(\" (EOL)\")\n        sat.loc[i,'Power'] = sat.loc[i,'Power'].strip(\" (B\")\n        sat.loc[i,'Power'] = sat.loc[i,'Power'].replace(\",\",\"\")\n    if sat.loc[i,'Power'] == \"500-700\":\n        sat.loc[i,'Power'] = 600\n\nsat.Power = pd.to_numeric(sat.Power)","de1384e2":"sat.Power.describe()","0bc8684b":"fig, ax = plt.subplots(figsize=(8,8))\nplt.boxplot(sat[sat['Power'].notnull()].Power)\nplt.title(\"Boxplot of satellite power\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.ylabel(\"Power\")","ff14c31e":"fig, ax = plt.subplots(figsize=(12,6))\nplt.hist(sat['Power'].dropna(), bins = 8)\nplt.title(\"Histogram of satellite power\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Power\")","4e47ac66":"sat.LaunchDate.describe()","014c9fef":"sat.LaunchDate = pd.to_datetime(sat.LaunchDate)","1f375b1c":"sat.LaunchDate.describe()","e5788ff8":"sat[sat['LaunchDate'].isnull()]","5c6dc21e":"sat['LaunchYear'] = sat['LaunchDate'].dt.year","dbf6c88a":"sat.LaunchYear.describe()","0c9d3237":"sat.dtypes","861976b8":"fig, ax = plt.subplots(figsize=(14,6))\nsat[sat['LaunchYear'].notnull()].LaunchYear.groupby(sat['LaunchYear']).count().plot()\nplt.xticks(np.arange(1974,2017,step=2))\nplt.title(\"Time line of satellite launches\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.ylabel(\"Number of launches\")\nplt.xlabel(\"Year\")","d57e1159":"sat.ExpLifetime.describe()","c1f67c11":"#Clean up ExpLifetime data\nfor i in sat.index:\n    if isinstance(sat.loc[i,'ExpLifetime'], str):\n        sat.loc[i,'ExpLifetime'] = sat.loc[i,'ExpLifetime'].strip(\" yr.\")\n        sat.loc[i,'ExpLifetime'] = sat.loc[i,'ExpLifetime'].strip(\"yrs.\")\n        sat.loc[i,'ExpLifetime'] = sat.loc[i,'ExpLifetime'].strip(\" trs,\")\n        sat.loc[i,'ExpLifetime'] = sat.loc[i,'ExpLifetime'].strip(\" hrs.\")\n        if \"-\" in sat.loc[i,'ExpLifetime']:\n            sat.loc[i,'ExpLifetime'] = (float(sat.loc[i,'ExpLifetime'].split(\"-\")[0]) + \n                                        float(sat.loc[i,'ExpLifetime'].split(\"-\")[1])) \/ 2\n            \nsat.ExpLifetime = pd.to_numeric(sat.ExpLifetime)","36ec4929":"fig, ax = plt.subplots(figsize=(14,6))\nsat[sat['ExpLifetime'].notnull()].ExpLifetime.groupby(sat['ExpLifetime']).count().plot(kind=\"bar\")\nplt.title(\"Expected lifetime of satellites\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.ylabel(\"Number of satellites\")\nplt.xlabel(\"Expected lifetime (in years)\")","7b27c779":"fig, ax = plt.subplots(figsize=(12,6))\nplt.hist(sat['ExpLifetime'].dropna(), bins = 8)\nplt.title(\"Histogram of satellite expected lifetime\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Expected Lifetime\")","163840c9":"sat.Contractor.describe()","478dbb0b":"fig, ax = plt.subplots(figsize=(14,6))\nsns.countplot(sat['Contractor'], order = sat.Contractor.value_counts().iloc[:20].index)\nplt.xticks(rotation=80)\nplt.title(\"Top 20 contractors launching satellites\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Contractor\")\nplt.ylabel(\"Number of satellites\")","d79b97f5":"sat.ContractorCountry.describe()","74462d25":"fig, ax = plt.subplots(figsize=(14,6))\nsns.countplot(sat['ContractorCountry'], order = sat.ContractorCountry.value_counts().iloc[:20].index)\nplt.xticks(rotation=80)\nplt.title(\"Top 20 countries of contractors launching satellites\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Country of contractor\")\nplt.ylabel(\"Number of satellites\")","3e89c029":"sat.LaunchSite.describe()","bae9bfc3":"fig, ax = plt.subplots(figsize=(14,6))\nsns.countplot(sat['LaunchSite'], order = sat.LaunchSite.value_counts().index)\nplt.xticks(rotation=80)\nplt.title(\"Satellites launch sites\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Launch Site\")\nplt.ylabel(\"Number of satellites\")","22acca2e":"sat.LaunchVehicle.describe()","bfea28d9":"fig, ax = plt.subplots(figsize=(14,6))\nsns.countplot(sat['LaunchVehicle'], order = sat.LaunchVehicle.value_counts().iloc[:20].index)\nplt.xticks(rotation=80)\nplt.title(\"Top 20 launch vehicles for satellites\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Launch Vehicle\")\nplt.ylabel(\"Number of satellites\")","079b21af":"sat.COSPAR.describe()","942180d4":"sat.NORAD.describe()","185a7512":"fig, ax = plt.subplots(figsize=(7,7))\nsns.heatmap(sat.corr(), cmap = 'Spectral', center = 0)\nplt.title(\"Heatmap of correlations\", fontdict = {'fontsize':20}, pad = 30.0)","22b2d9f2":"fig, ax = plt.subplots(figsize=(8,6))\nsns.scatterplot(sat.OrbitLong, sat.ExpLifetime)\nplt.title(\"Scatterplot of Expected lifetime against Orbit Longitude\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Orbit Longitude\")\nplt.ylabel(\"Expected lifetime\")","be2c1fbb":"fig, ax = plt.subplots(figsize=(8,6))\nsns.scatterplot(sat.Perigree, sat.ExpLifetime)\nplt.title(\"Scatterplot of Expected lifetime against Perigree\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Perigree\")\nplt.ylabel(\"Expected lifetime\")","5a268919":"fig, ax = plt.subplots(figsize=(8,6))\nsns.scatterplot(sat.Apogee, sat.ExpLifetime)\nplt.title(\"Scatterplot of Expected lifetime against Apogee\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Apogee\")\nplt.ylabel(\"Expected lifetime\")","8fc91bf7":"fig, ax = plt.subplots(figsize=(8,6))\nsns.scatterplot(sat.Eccentricity, sat.ExpLifetime)\nplt.title(\"Scatterplot of Expected lifetime against Eccentricity\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Eccentricity\")\nplt.ylabel(\"Expected lifetime\")","6a070b62":"fig, ax = plt.subplots(figsize=(8,6))\nsns.scatterplot(sat.Period, sat.ExpLifetime)\nplt.title(\"Scatterplot of Expected lifetime against Period\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Period\")\nplt.ylabel(\"Expected lifetime\")","f8351355":"fig, ax = plt.subplots(figsize=(8,6))\nsns.scatterplot(sat.LaunchMass, sat.ExpLifetime)\nplt.title(\"Scatterplot of Expected lifetime against LaunchMass\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"LaunchMass\")\nplt.ylabel(\"Expected lifetime\")","f6675da0":"fig, ax = plt.subplots(figsize=(8,6))\nsns.scatterplot(sat.DryMass, sat.ExpLifetime)\nplt.title(\"Scatterplot of Expected lifetime against DryMass\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"DryMass\")\nplt.ylabel(\"Expected lifetime\")","843e7176":"fig, ax = plt.subplots(figsize=(8,6))\nsns.scatterplot(sat.Power, sat.ExpLifetime)\nplt.title(\"Scatterplot of Expected lifetime against Power\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Power\")\nplt.ylabel(\"Expected lifetime\")","62b37c03":"fig, ax = plt.subplots(figsize=(12,7))\ntopCountries = sat.Country.value_counts().head(10).index.tolist()\nsns.boxplot(x=sat[sat['Country'].isin(topCountries)].Country, y=sat.ExpLifetime, order = topCountries, showfliers=False)\nplt.xticks(rotation=80)\nplt.title(\"Boxplots of expected lifetime for sattelites from top 10 countries\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Country\")\nplt.ylabel(\"Expected lifetime\")","1067f95a":"fig, ax = plt.subplots(figsize=(12,7))\ntopOperators = sat[sat['ExpLifetime'].notnull()].Operator.value_counts().head(5).index.tolist()\nsns.boxplot(x=sat[((sat['Operator'].isin(topOperators)) & (sat['ExpLifetime'].notnull()))].Operator,\n            y=sat.ExpLifetime, order = topOperators, showfliers=False)\nplt.xticks(rotation=80)\nplt.title(\"Boxplots of expected lifetime for sattelites from top 5 operators\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Operator\")\nplt.ylabel(\"Expected lifetime\")","237adff7":"fig, ax = plt.subplots(figsize=(12,7))\ntopOperatorCountries = sat[sat['ExpLifetime'].notnull()].OperatorCountry.value_counts().head(5).index.tolist()\nsns.boxplot(x=sat[((sat['OperatorCountry'].isin(topOperatorCountries)) & (sat['ExpLifetime'].notnull()))].OperatorCountry,\n            y=sat.ExpLifetime, order = topOperatorCountries, showfliers=False)\nplt.xticks(rotation=80)\nplt.title(\"Boxplots of expected lifetime for sattelites from top 5 operator countries\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Operator Country\")\nplt.ylabel(\"Expected lifetime\")","987528d3":"fig, ax = plt.subplots(figsize=(12,7))\nsns.boxplot(x=sat.Users, y=sat.ExpLifetime, showfliers=False)\nplt.xticks(rotation=80)\nplt.title(\"Boxplots of expected lifetime for sattelites from different users\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Users\")\nplt.ylabel(\"Expected lifetime\")","73b25fa5":"fig, ax = plt.subplots(figsize=(7,7))\nsns.boxplot(x=sat.Commercial, y=sat.ExpLifetime, showfliers=False)\nplt.title(\"Boxplots of expected lifetime for commercial vs non-commercial satellites\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xticks(np.arange(2), (\"Non-Commercial\",\"Commercial\"))\nplt.xlabel(\"Commercial vs non-commercial\")\nplt.ylabel(\"Expected lifetime\")","a3b66c84":"fig, ax = plt.subplots(figsize=(7,7))\nsns.boxplot(x=sat.Government, y=sat.ExpLifetime, showfliers=False)\nplt.title(\"Boxplots of expected lifetime for government vs non-government satellites\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xticks(np.arange(2), (\"Non-Government\",\"Government\"))\nplt.xlabel(\"Government vs non-government\")\nplt.ylabel(\"Expected lifetime\")","06679728":"fig, ax = plt.subplots(figsize=(7,7))\nsns.boxplot(x=sat.Military, y=sat.ExpLifetime, showfliers=False)\nplt.title(\"Boxplots of expected lifetime for military vs non-military satellites\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xticks(np.arange(2), (\"Non-Military\",\"Military\"))\nplt.xlabel(\"Military vs non-military\")\nplt.ylabel(\"Expected lifetime\")","888d29fc":"fig, ax = plt.subplots(figsize=(7,7))\nsns.boxplot(x=sat.Civil, y=sat.ExpLifetime, showfliers=False)\nplt.title(\"Boxplots of expected lifetime for civil vs non-civil satellites\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xticks(np.arange(2), (\"Non-civil\",\"Civil\"))\nplt.xlabel(\"Civil vs non-civil\")\nplt.ylabel(\"Expected lifetime\")","a61b17fe":"fig, ax = plt.subplots(figsize=(12,7))\ntopPurpose = sat[sat['ExpLifetime'].notnull()].Purpose.value_counts().head(8).index.tolist()\nsns.boxplot(x=sat[((sat['Purpose'].isin(topPurpose)) & (sat['ExpLifetime'].notnull()))].Purpose,\n            y=sat.ExpLifetime, order = topPurpose, showfliers=False)\nplt.xticks(rotation=80)\nplt.title(\"Boxplots of expected lifetime for sattelites from top 8 purposes\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Purposes\")\nplt.ylabel(\"Expected lifetime\")","7e34ea0c":"fig, ax = plt.subplots(figsize=(12,7))\nsns.boxplot(x=sat.OrbitClass, y=sat.ExpLifetime, showfliers=False)\nplt.xticks(rotation=80)\nplt.title(\"Boxplots of expected lifetime for sattelites from different orbit classes\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Orbit Class\")\nplt.ylabel(\"Expected lifetime\")","580c1968":"fig, ax = plt.subplots(figsize=(12,7))\nsns.boxplot(x=sat.OrbitType, y=sat.ExpLifetime, showfliers=False)\nplt.xticks(rotation=80)\nplt.title(\"Boxplots of expected lifetime for sattelites from different orbit types\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Orbit Type\")\nplt.ylabel(\"Expected lifetime\")","c31baccd":"fig, ax = plt.subplots(figsize=(14,6))\nsat[sat['LaunchDate'].notnull()].ExpLifetime.groupby(sat['LaunchDate'].dt.year).mean().plot()\nplt.xticks(np.arange(1974,2017,step=2))\nplt.title(\"Average expected lifetime per launch year\", fontdict = {'fontsize':20}, pad = 30.0)\nplt.ylabel(\"Average expected lifetime\")\nplt.xlabel(\"Year\")","f097fb97":"fig, ax = plt.subplots(figsize=(12,7))\ntopContractors = sat[sat['ExpLifetime'].notnull()].Contractor.value_counts().head(8).index.tolist()\nsns.boxplot(x=sat[((sat['Contractor'].isin(topContractors)) & (sat['ExpLifetime'].notnull()))].Contractor,\n            y=sat.ExpLifetime, showfliers=False)\nplt.xticks(rotation=80)\nplt.title(\"Boxplots of expected lifetime for sattelites from different contractors\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Contractor\")\nplt.ylabel(\"Expected lifetime\")","9868d647":"fig, ax = plt.subplots(figsize=(12,7))\ntopContractorCountries = sat[sat['ExpLifetime'].notnull()].ContractorCountry.value_counts().head(8).index.tolist()\nsns.boxplot(x=sat[((sat['ContractorCountry'].isin(topContractorCountries)) & (sat['ExpLifetime'].notnull()))].ContractorCountry,\n            y=sat.ExpLifetime, showfliers=False)\nplt.xticks(rotation=80)\nplt.title(\"Boxplots of expected lifetime for sattelites from different contractor countries\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Contractor country\")\nplt.ylabel(\"Expected lifetime\")","211c257b":"fig, ax = plt.subplots(figsize=(12,7))\ntopLaunchSites = sat[sat['ExpLifetime'].notnull()].LaunchSite.value_counts().head(8).index.tolist()\nsns.boxplot(x=sat[sat['LaunchSite'].isin(topLaunchSites)].LaunchSite, y=sat.ExpLifetime, showfliers=False)\nplt.xticks(rotation=80)\nplt.title(\"Boxplots of expected lifetime for sattelites from different contractor countries\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xlabel(\"Contractor country\")\nplt.ylabel(\"Expected lifetime\")","dcc12b16":"fig, ax = plt.subplots(figsize=(7,7))\nsns.boxplot(x=sat.Communications, y=sat.ExpLifetime, showfliers=False)\nplt.title(\"Boxplots of expected lifetime for Communications purpose vs non-communication satellites\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xticks(np.arange(2), (\"Non-communications\",\"Communications\"))\nplt.xlabel(\"Communications vs non-communications\")\nplt.ylabel(\"Expected lifetime\")","1d9fcf70":"fig, ax = plt.subplots(figsize=(7,7))\nsns.boxplot(x=sat[\"Earth Observation\/Science\"], y=sat.ExpLifetime, showfliers=False)\nplt.title(\"Boxplots of expected lifetime for Earth Observation\/Science purpose vs non-earth observation\/science satellites\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xticks(np.arange(2), (\"Non-Earth Observation\/Science\",\"Earth Observation\/Science\"))\nplt.xlabel(\"Earth Observation\/Science vs non-earth observation\/science\")\nplt.ylabel(\"Expected lifetime\")","415030a4":"fig, ax = plt.subplots(figsize=(7,7))\nsns.boxplot(x=sat[\"Tech Development\"], y=sat.ExpLifetime, showfliers=False)\nplt.title(\"Boxplots of expected lifetime for Tech Development purpose vs non-tech development satellites\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xticks(np.arange(2), (\"Non-Tech Development\",\"Tech Development\"))\nplt.xlabel(\"Tech Development vs non-Tech Development\")\nplt.ylabel(\"Expected lifetime\")","75227006":"fig, ax = plt.subplots(figsize=(7,7))\nsns.boxplot(x=sat.Navigation, y=sat.ExpLifetime, showfliers=False)\nplt.title(\"Boxplots of expected lifetime for Navigation purpose vs non-navigation satellites\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xticks(np.arange(2), (\"Non-Navigation\",\"Navigation\"))\nplt.xlabel(\"Navigation vs non-Navigation\")\nplt.ylabel(\"Expected lifetime\")","2e819154":"fig, ax = plt.subplots(figsize=(7,7))\nsns.boxplot(x=sat[\"Space Science\"], y=sat.ExpLifetime, showfliers=False)\nplt.title(\"Boxplots of expected lifetime for Space Science purpose vs non-Space Science satellites\",\n          fontdict = {'fontsize':20}, pad = 30.0)\nplt.xticks(np.arange(2), (\"Non-Space Science\",\"Space Science\"))\nplt.xlabel(\"Space Science vs non-Space Science\")\nplt.ylabel(\"Expected lifetime\")","0698ec0d":"from sklearn.linear_model import LinearRegression","13708930":"features = ['Perigree','Inclination','LaunchMass','Commercial','Government','Military','Civil','Communications',\n            'Earth Observation\/Science','Tech Development','Navigation','Space Science']\n\nfeat = sat[features]\ntarget = sat['ExpLifetime']","51078c49":"nan_rows = np.where(np.asanyarray(np.isnan(feat)))[0].tolist()\nfeat = feat.drop(nan_rows).reset_index(drop=True)\ntarget = target.drop(nan_rows).reset_index(drop=True)","7723258a":"nan_y_rows = np.where(np.asanyarray(np.isnan(target)))[0].tolist()\nfeat = feat.drop(nan_y_rows).reset_index(drop=True)\ntarget = target.drop(nan_y_rows).reset_index(drop=True)","fd861289":"X_train, X_test, y_train, y_test = train_test_split(feat,target,test_size = 0.33)","60abf853":"lr = LinearRegression()\nlr.fit(X_train,y_train)\nlr.score(X_train,y_train)","7976dcfb":"lr.score(X_test,y_test)","0b95f0fd":"lr.coef_","ce948874":"# Univariate data analysis\n\nNext we investigate the different variables in our dataset on their own. The goal of this exercise is to identify any variables with a significant number of missing values, and to identify variables that are heavily skewed.","7559b54c":"# Active satellites in orbit around Earth\nThis analysis describes a database of all active satellites in orbit around Earth in 2016.\n\n![](https:\/\/images.unsplash.com\/photo-1526666923127-b2970f64b422?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1052&q=80)\n\nIn the first steps, we'll import some critical libraries for the analysis, and then import the database.\nWe drop rows that contain too many missing values, and we perform a high level inspection of the database.","b5c6c5b7":"# Predictive analytics: Predicting expected lifetime\n\nIn the final part of the analysis we build a model to predict the expected lifetime of a satellite, using a linear regression model.\nThe variables selected as independent variables (features) for the model are:\n- Perigree\n- Inclination\n- Launch Mass\n- Dummy variable for the use of the satellite\n- Dummy variable for the purpose of the satellite","284005a2":"One record is dropped from the database, because it contains too many missing values.","189522fa":"# Bivariate data analysis\n## Predicting expected lifetime of satellites\n\nIn this section we investigate the relationship between various variables and the 'Expected Lifetime' variable. We try to establish which variables seem to have a strong relationship with the expected lifetime of a satellite. The goal is to identify the variables that will be usable in our eventual model."}}