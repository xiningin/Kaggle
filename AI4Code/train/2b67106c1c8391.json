{"cell_type":{"e1ee56d6":"code","b7b2074c":"code","bbcc717e":"code","0ffeed5b":"code","b3e09782":"code","9f24c340":"code","11eb7c85":"code","e6b80551":"code","6fc1e36c":"code","e60664b1":"code","bc395bcd":"code","856792c7":"code","ad356e5b":"code","bbedb7b2":"code","38bf2a32":"code","5504d357":"code","29eaee39":"code","23a8677d":"code","05fffd9a":"code","b87a737a":"code","eaf099ac":"code","061defa1":"code","7ecf0929":"code","f27aea11":"code","cc335348":"code","c04b8c92":"markdown","0cc4b387":"markdown","003e93dc":"markdown","c1b38c28":"markdown","d88de210":"markdown","1f6a9784":"markdown","6fc6615e":"markdown"},"source":{"e1ee56d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b7b2074c":"# path\ntrain_path = '..\/input\/train.csv'\ntest_path = '..\/input\/test.csv'","bbcc717e":"# load data\ntrain_data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')","0ffeed5b":"train_data.head()","b3e09782":"train_shape = train_data.shape\ntrain_shape","9f24c340":"test_shape = test_data.shape\ntest_shape","11eb7c85":"X_train = train_data.drop('label', axis=1)\ny_train = train_data['label']\nX_finaltest = test_data","e6b80551":"# show example image\nsome_digit = np.array(X_train.iloc[0])\nsome_digit_image = some_digit.reshape(28, 28)\n\nplt.imshow(some_digit_image, cmap = matplotlib.cm.binary,\n          interpolation = 'nearest')\nplt.axis('off')\nplt.show()","6fc1e36c":"# check that label\ny_train.iloc[0]","e60664b1":"# reshape input : 28*28 = 784 (2D)\nX_train = np.array(X_train).reshape(train_shape[0], 784).astype('float32')\nX_test = np.array(X_finaltest).reshape(test_shape[0], 784).astype('float32')","bc395bcd":"X_train.shape","856792c7":"# normalize input\n# max pixel size is 255\nX_train \/= 255\nX_test \/= 255","ad356e5b":"# convert class vectors to binary class matrices\n# https:\/\/keras.io\/utils\/\nlabel_train = np_utils.to_categorical(label_train, 10)\nlabel_test = np_utils.to_categorical(label_test, 10)","bbedb7b2":"# Keras module\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.core import Activation\nfrom keras.layers.core import Flatten, Dropout\nfrom keras.optimizers import Adam\nfrom keras.callbacks import TensorBoard","38bf2a32":"input_shape = train_1.shape","5504d357":"model = Sequential()\nmodel.add(Conv2D(20, kernel_size=5, padding='same', input_shape=input_shape))\nmodel.add(BatchNormalization(axis=1)\n# model.add(Dense(120, input_shape = (784, ), activation='relu'))\n# model.add(Dropout(0.5))\n# model.add(Dense(120, activation='relu'))\n# model.add(Dropout(0.5))\n# model.add(Dense(10, activation='softmax'))\n# model.summary()","29eaee39":"model.compile(optimizer='adam', loss='categorical_crossentropy', \n              metrics=['accuracy'])","23a8677d":"model.fit(train_1, label_train, batch_size=20, epochs=15,\n         validation_data=(train_1, label_train), verbose=2)","05fffd9a":"# evaluating the model\nscore = model.evaluate(test_1, label_test, verbose=0)\nprint(\"Accuracy: \", score[1])","b87a737a":"reversed_X_test = X_test * 255\ndisplay(reversed_X_test)\ndisplay(X_test.shape)","eaf099ac":"# try this model to test.csv\nresult_label = model.predict_classes(reversed_X_test,batch_size=12, verbose=1)","061defa1":"display(result_label)\ndisplay(result_label.shape)","7ecf0929":"type(result_label)","f27aea11":"# make a dataframe for submission data\nsub_data = {'ImageID': pd.Series(test_data.index.values + 1),\n        'Label': pd.Series(result_label)}\n\nsub_df = pd.DataFrame(data=sub_data)","cc335348":"sub_df.to_csv(\"second_mnist.csv\",index=False)","c04b8c92":"# Model","0cc4b387":"# submission data","003e93dc":"## Note\n1. We choose the model for image data. Convolutional Neural Networks (CNN) is the model.  What kind of CNN will be working well? ","c1b38c28":"## Data","d88de210":"# LeNet\n- Try with batch normalization","1f6a9784":"# Supervised learning\nThis task is supervised learning. Training data is labeled.  \n\n### Third try\nThis is my third try. I recently leaned how the neural networks are build and each layer's function for a test. This is an experiment for how those knowledge works.","6fc6615e":"# from sklearn.model_selection import train_test_split\ntrain_1, test_1, label_train, label_test = train_test_split(\n    X_train, y_train, test_size=0.2, random_state=42)"}}