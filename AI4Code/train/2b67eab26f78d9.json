{"cell_type":{"6ab37027":"code","040ed8cb":"code","75022e60":"code","ae511d90":"code","de86559d":"code","3e3c890c":"code","6d2ae45c":"code","03f3eae5":"code","f1a77cf0":"code","4d7fda5e":"code","7bf62e9b":"code","0bb77bfc":"code","8a7229eb":"code","ba77e081":"code","1eb965ed":"code","59ba9a41":"code","67472890":"code","2eb6635d":"code","ac7af550":"code","e9df90c4":"code","4fa0c1a1":"code","01a44356":"code","9ceedf28":"code","fbe91c5f":"code","0dc7f9d2":"code","33b891a4":"code","be3b8b91":"code","974cfc35":"code","67878767":"code","c7baa694":"code","82d2ef32":"code","7fcdb52a":"code","86163ec0":"code","1bc6fb06":"code","d61b2e83":"code","59bb0659":"code","ec0eea02":"code","44dfe9ff":"code","f981a61d":"code","3c94baa3":"code","b207314e":"code","4e8d1166":"code","2829ba6b":"code","b911fe68":"code","bc965c16":"code","75548711":"code","8b62eab8":"code","6f120bd3":"code","d6483b53":"code","bd341982":"code","e5cc988f":"code","aa40c09b":"code","6abfb3eb":"code","7a60f862":"code","05dba1ff":"code","485cc797":"code","7c09fde3":"code","f0b6b2d4":"code","093a4d32":"code","d96c544b":"code","a71e8d64":"code","91100c2a":"code","a9d7d6e1":"code","38907ec4":"code","19ef076c":"code","349b61d7":"code","3c956fae":"code","591cc826":"code","35e2b453":"code","df3ba77e":"code","86e003ec":"code","7a744764":"code","26ff8d16":"code","4f3025f2":"code","54c0a381":"code","bdf94896":"code","4d7e1ff2":"code","926e652e":"code","010c0437":"code","0b551bca":"code","a06bdfc4":"code","fc68d33d":"code","10f267a6":"code","d2193309":"code","be7750d3":"code","266a2240":"code","5d9dc6d3":"code","2cc43795":"markdown","559c05d9":"markdown","34a4c871":"markdown","9074beb3":"markdown","ae5d99cc":"markdown","c66606fc":"markdown","e5b490f2":"markdown","3fc8ed96":"markdown","15d5c6d9":"markdown","dae03c0c":"markdown","26082925":"markdown","9fcd1249":"markdown","ab8a6b33":"markdown","acf7a325":"markdown","45add488":"markdown","54c45c35":"markdown","e1e00d7c":"markdown","56376939":"markdown","f42db11a":"markdown","6b5499cc":"markdown","7f3d3732":"markdown","cb97ac73":"markdown","c5bb75db":"markdown","0d5f6772":"markdown","d1a2cba7":"markdown","5e913e5e":"markdown","ce18ce7f":"markdown","db81cf35":"markdown","f3e7fecb":"markdown","f67aede4":"markdown","f76fc78f":"markdown","5eff3c1b":"markdown","10dee9e1":"markdown","200425d0":"markdown","453bbf48":"markdown","61adc95b":"markdown","e3e32d89":"markdown","bd1c8c62":"markdown","cf194a52":"markdown","8f804cc0":"markdown","528eaa25":"markdown","8010e682":"markdown","190c219f":"markdown","1c8fbc72":"markdown","b17c4478":"markdown","997cda6c":"markdown","0ba5e81a":"markdown","e94c2a3a":"markdown"},"source":{"6ab37027":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","040ed8cb":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","75022e60":"train_df.columns","ae511d90":"train_df.head()","de86559d":"train_df.describe()","3e3c890c":"train_df.info()","6d2ae45c":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n    ","03f3eae5":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)\n    ","f1a77cf0":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","4d7fda5e":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable],bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","7bf62e9b":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","0bb77bfc":"# Pclass vs Survived\n# Yolcular\u0131n Pclass'lar\u0131na g\u00f6re hayatta kalma olas\u0131l\u0131klar\u0131\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)\n","8a7229eb":"# Sex vs Survived\n# Yolcular\u0131n Cinsiyet'lerine g\u00f6re hayatta kalma olas\u0131l\u0131klar\u0131\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","ba77e081":"# SibSp vs Survived\n# Yolcular\u0131n Karde\u015f-E\u015f say\u0131'lar\u0131na g\u00f6re hayatta kalma olas\u0131l\u0131klar\u0131\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","1eb965ed":"# Parch vs Survived\n# Yolcular\u0131n Akraba-\u00c7ocuk say\u0131'lar\u0131na g\u00f6re hayatta kalma olas\u0131l\u0131klar\u0131\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","59ba9a41":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier Step\n        outlier_step = IQR * 1.5\n        # Detect Outlier and Their Indeces \n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # Store Indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers\n    \n    ","67472890":"train_df.loc[detect_outliers(train_df, [\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","2eb6635d":"# Drop Outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis=0).reset_index(drop = True)","ac7af550":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df],axis=0).reset_index(drop = True)","e9df90c4":"train_df.head()","4fa0c1a1":"train_df.columns[train_df.isnull().any()]","01a44356":"train_df.isnull().sum()","9ceedf28":"train_df[train_df[\"Embarked\"].isnull()]","fbe91c5f":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","0dc7f9d2":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","33b891a4":"train_df[train_df[\"Fare\"].isnull()]","be3b8b91":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","974cfc35":"f,ax = plt.subplots(figsize=(10, 10))\nlist1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\",ax=ax)\nplt.show()","67878767":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()\n","c7baa694":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","82d2ef32":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","7fcdb52a":"g = sns.FacetGrid(train_df, col= \"Survived\")\ng.map(sns.distplot,\"Age\", bins = 25)\nplt.show()","86163ec0":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size=3)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","1bc6fb06":"g = sns.FacetGrid(train_df, row =\"Embarked\", size = 2.5)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","d61b2e83":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.5)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","59bb0659":"train_df[train_df[\"Age\"].isnull()]","ec0eea02":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","44dfe9ff":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind=\"box\" )\nplt.show()","f981a61d":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind=\"box\" )\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind=\"box\" )\nplt.show()","3c94baa3":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","b207314e":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","4e8d1166":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","2829ba6b":"train_df[train_df[\"Age\"].isnull()]","b911fe68":"age_pred","bc965c16":"train_df[\"Name\"].head(10)","75548711":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","8b62eab8":"train_df[\"Title\"].head(10)","6f120bd3":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","d6483b53":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Dona\",\"Capt\",\"Col\",\"Rev\",\"Don\",\"Dr\",\"Major\",\"Sir\",\"Jonkheer\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","bd341982":"sns.countplot(x=\"Title\", data = train_df)\nplt.show()","e5cc988f":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","aa40c09b":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","6abfb3eb":"train_df.head()","7a60f862":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","05dba1ff":"train_df.head()","485cc797":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] +1","7c09fde3":"train_df.head()","f0b6b2d4":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","093a4d32":"train_df[\"family_size\"] = [1 if i<5 else 0 for i in train_df[\"Fsize\"]]","d96c544b":"train_df.head(10)","a71e8d64":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","91100c2a":"g = sns.factorplot( x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","a9d7d6e1":"train_df = pd.get_dummies(train_df, columns = [\"family_size\"])\ntrain_df.head()","38907ec4":"train_df[\"Embarked\"].head()","19ef076c":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","349b61d7":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","3c956fae":"train_df[\"Ticket\"].head(10)","591cc826":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\n\ntrain_df[\"Ticket\"] = tickets","35e2b453":"train_df[\"Ticket\"].head(20)","df3ba77e":"train_df.head(10)","86e003ec":"train_df = pd.get_dummies(train_df, columns = [\"Ticket\"], prefix= \"T\")\ntrain_df.head(10)","7a744764":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","26ff8d16":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Pclass\"])\ntrain_df.head()","4f3025f2":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Sex\"])\ntrain_df.head()","54c0a381":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace= True)","bdf94896":"train_df.columns","4d7e1ff2":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","926e652e":"train_df_len","010c0437":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"], axis = 1, inplace = True)","0b551bca":"test.head()","a06bdfc4":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\", len(X_train))\nprint(\"X_test\", len(X_test))\nprint(\"y_train\", len(y_train))\nprint(\"y_test\", len(y_test))\nprint(\"test\", len(test))","fc68d33d":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2)\nacc_log_test = round(logreg.score(X_test, y_test)*100,2)\n\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","10f267a6":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]\n","d2193309":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","be7750d3":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")\nplt.show()\n","266a2240":"votingC = VotingClassifier(estimators = [(\"dt\", best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                          voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","5d9dc6d3":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived], axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","2cc43795":"* Pclass is important feature for model training","559c05d9":"* float64(2) : Fare and Age\n* int64(5) : Pclass, Sibsp,Parch, PassengerId and Survived\n* object(5) : Cabin, Embarked, Ticked, Name and Sex","34a4c871":"<a id= '16' ><\/a>\n## Age -- Survived","9074beb3":"<a id= '5' ><\/a>\n## Numerical Variable Analysis \n(Say\u0131sal De\u011ferlerin Analizi)","ae5d99cc":"[UP](#0)","c66606fc":"## Sex\n<a id= '27' ><\/a>","e5b490f2":"## Family Size\n<a id= '23' ><\/a>","3fc8ed96":"<a id= '15' ><\/a>\n## Pclass -- Survived","15d5c6d9":"* Age is not correlated with Sex but it is correlated with Parch , SibSp and Pclass\n* Ya\u015f, Cinsiyet ile ili\u015fkili de\u011fildir ancak Parch, SibSp ve Pclass ile ili\u015fkilidir","dae03c0c":"<a id= '2' ><\/a> \n# Veriable Description\n(DE\u011e\u0130\u015eKEN TANIMLAMA)\n\n 1. PassengerId : Unique id number to each passenger => (E\u015fsiz Kimlik Numaras\u0131)\n 1. Survived : Passenger survive(1) or died(2) => (Hayatta Kalma)\n 1. Pclass : Passenger class => (Yolcu S\u0131n\u0131f\u0131)\n 1. Name : Name of passenger \n 1. Sex : Gender of passenger => (Cinsiyet)\n 1. Age : Age of passenger\n 1. SibSp : Number of siblings\/spouses => (Karde\u015f - E\u015f say\u0131s\u0131)\n 1. Parch : Number of parent\/children => (Akraba - \u00c7ocuk say\u0131s\u0131)\n 1. Ticket : Ticket number => (Bilet Numaras\u0131)\n 1. Fare : Amount of money spent on ticket => (\u00dccret)\n 1. Cabin : Cabin category => (Cabin Kategorisi)\n 1. Embarked : Port where passenger embarked ( C: Cherbourg , Q: Queenstown , S: Southampten ) => (Binilen Liman)","26082925":"<a id= '20' ><\/a>\n## Fill Missing: Age Feature","9fcd1249":"## Simple Logistic Regression\n<a id= '31' ><\/a>","ab8a6b33":"<a id= '7' ><\/a>\n# Outlier Detection\n(Outlier : Ayk\u0131r\u0131 de\u011fer, bir veri setindeki g\u00f6zlemlerin geri kalan\u0131ndan b\u00fcy\u00fck \u00f6l\u00e7\u00fcde farkl\u0131 olan herhangi bir veri noktas\u0131d\u0131r)","acf7a325":"## Embarked\n<a id= '24' ><\/a>","45add488":"## Train -- Test Split\n<a id= '30' ><\/a>","54c45c35":"* Passengers who pay higher fare have better survival. Fare can be used as categorical for training .","e1e00d7c":"## Ticket\n<a id= '25' ><\/a>","56376939":"<a id= '21' ><\/a>\n# Feature Engineering\n(\u00d6zellik M\u00fchendisli\u011fi)","f42db11a":"<a id= '19' ><\/a>\n## Embarked -- Sex -- Fare -- Survived","6b5499cc":"<a id= '11' ><\/a>\n# Visualization","7f3d3732":"<a id= '0' ><\/a>\n# INTRODUCTION\n\n The sinking of Titanic is one of the most notorios shipwreck in the history . \n In 1912, during her voyage, the Titanic sank after hitting an iceberg, killing 1502 of the 2225 passengers and crew.\n \n Titanic'in bat\u0131\u015f\u0131, tarihin en k\u00f6t\u00fc \u015f\u00f6hretli gemi enkazlar\u0131ndan biridir.\n 1912'de, yolculu\u011fu s\u0131ras\u0131nda Titanik bir buzda\u011f\u0131na \u00e7arpt\u0131ktan sonra batt\u0131 ve 2225 yolcu ve m\u00fcrettebattan 1502'sini \u00f6ld\u00fcrd\u00fc.\n \n <font color='orange'>\n CONTENT :<br\/><br\/>\n    \n1. [Load and Check Data](#1) \n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSb -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n5. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n6. [Modeling](#29)\n    * [Train -- Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)\n    ","cb97ac73":"## Drop Passenger ID and Cabin\n<a id= '28' ><\/a>","c5bb75db":"<a id= '22' ><\/a>\n## Name -- Title","0d5f6772":"<a id= '1' ><\/a>\n# Load and Check Data","d1a2cba7":"<a id= '3' ><\/a>\n# Univariate Variable Analysis\n(Tek De\u011fi\u015fkenli De\u011fi\u015fken Analizi)\n\n* Categorical Variable : Survived, Sex, Pclass, Embarked, Cabin, Name, Ticked, SibSp and Parch\n* Numerical Variable : Fare, Age and PassengerId","5e913e5e":"* Small families have more chances to survive than large families.\n* K\u00fc\u00e7\u00fck ailelerin hayatta kalma \u015fans\u0131 b\u00fcy\u00fck ailelere g\u00f6re daha fazlad\u0131r","ce18ce7f":"<a id= '10' ><\/a>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","db81cf35":"* Fare features seems to to have corelation with survived feature(0.26)\n* (\u00d6RN: \u00dccret \u00f6zelliklerinin hayatta kalma ile ili\u015fkisi var gibi g\u00f6r\u00fcn\u00fcyor (0.26))","f3e7fecb":"<a id= '13' ><\/a>\n## SibSp -- Survived","f67aede4":"<a id= '4' ><\/a>\n## Categorical Variable Analysis\n(Kategorik De\u011fi\u015fken Analizi)","f76fc78f":"<a id= '32' ><\/a>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\nWe will compare 5 ml classifier and evaulate mean accuracy of each of themby stratified cross valiation.\n(5 \u00e7e\u015fit s\u0131n\u0131fland\u0131r\u0131c\u0131y\u0131 kar\u015f\u0131la\u015ft\u0131raca\u011f\u0131z ve her birinin ortalama do\u011frulu\u011funu \u00e7apraz de\u011ferleme ile de\u011ferlendirece\u011fiz)\n\n* Decision Tree \n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","5eff3c1b":"<a id= '34' ><\/a>\n## Prediction and Submission","10dee9e1":"<a id= '18' ><\/a>\n## Embarked -- Sex -- Pclass -- Survived","200425d0":"<a id= '12' ><\/a>\n## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived\n(SibSp -- Parch -- Age -- Fare -- Survived Aras\u0131 \u0130li\u015fkiler)","453bbf48":"<a id= '17' ><\/a>\n## Pclass -- Survived -- Age","61adc95b":"* Sex is not informative for Age prediction, age distribution seems to be same  \n* Cinsiyet, ya\u015f tahmini i\u00e7in bilgilendirici de\u011fil","e3e32d89":"# Modeling\n<a id= '29' ><\/a>","bd1c8c62":"<a id= '8' ><\/a>\n# Missing Value\n(Kay\u0131p De\u011ferler)\n* Find Missing Value\n* Fill Missing Value","cf194a52":"## Pclass\n<a id= '26' ><\/a>","8f804cc0":"<a id= '33' ><\/a>\n# Ensemble Modeling","528eaa25":"<a id= '6' ><\/a>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","8010e682":"* 1st class passengers are older than 2nd class, and 2nd is older than 3rd class.\n* 1. s\u0131n\u0131f yolcular 2. s\u0131n\u0131ftan, 2. s\u0131n\u0131f yolcular 3. s\u0131n\u0131ftan b\u00fcy\u00fckt\u00fcr","190c219f":"<a id= '14' ><\/a>\n## Parch -- Survived","1c8fbc72":"* Having a lot of SibSp have less chance to survive.\n* If sibsp == 0 or 1 or 2, passenger has more chance to survive.","b17c4478":"* Small families have more chance to survive\n* There is a std in survival of passenger with Parch = 3","997cda6c":"<a id= '9' ><\/a>\n## Find Missing Value","0ba5e81a":"* Female passengers have much better survival rate than males\n* Males have better survival rate in Pclass = 3 in Embarked = C\n* Embarked and Sex will be used in training","e94c2a3a":"* age <= 10 has  a high survival rate,\n* oldest passengers (80) surved,\n* large number of 20 years old did not survived,\n* most passengers are in 15-35 age range,\n* use age feature in training,\n* use age distribution for missing value of age."}}