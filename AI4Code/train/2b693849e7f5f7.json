{"cell_type":{"7b10a292":"code","710b804c":"code","3196f79b":"code","5ffc1763":"code","613fa391":"code","8b25b4fa":"code","796ac52b":"code","70d2f33d":"code","347dc386":"code","819bd968":"code","d991771e":"code","51d30dc9":"code","2171ed7e":"code","7be17d60":"code","61fe0ab1":"code","16b165c1":"code","f3e00911":"code","fd8b7a81":"code","d09fdff1":"code","5c7bde29":"code","a94ddc41":"code","9c482f36":"code","ddb8e0f2":"code","2df26bde":"code","a4bfe504":"code","88278635":"code","3a67892e":"code","ffbb400c":"code","638a188b":"code","04980aa6":"code","487c83d2":"code","7d1ccb3a":"code","e9708fa9":"code","4638c0ee":"code","a626f919":"code","2ccaaa2e":"code","1f8c51a4":"code","bf4e60e4":"code","c6a41b8d":"code","9c1e1418":"code","f35abdc7":"code","bba6ab80":"code","e875c9e6":"code","dc5ceef7":"code","bf898fc7":"code","279911d2":"code","7cc5eaae":"code","92f4eea9":"code","5d4cfb9a":"code","b874df62":"code","aedb7705":"code","960c40f7":"code","82217d2f":"code","5e781d4e":"code","d4de648a":"code","ccb62d3b":"code","53e70893":"code","d5aef033":"code","a557ee11":"code","2a6fe226":"code","c2a74f7e":"code","9b07c912":"code","0d8419fa":"code","3dc6e395":"code","764b6e55":"code","0a4934b1":"markdown","4a601bc7":"markdown","8e231660":"markdown","4bc6d5a4":"markdown","24882eef":"markdown","1719ee2f":"markdown","d6ee725e":"markdown","bc81982b":"markdown","39aff7b1":"markdown","29b7138f":"markdown","58110ce5":"markdown","2e36cca0":"markdown","2320509f":"markdown","e565f8df":"markdown","a65a86a6":"markdown","e77774a9":"markdown","1a974f36":"markdown","d3d8a4f4":"markdown","a0146fed":"markdown","77a0ef33":"markdown","0f66195e":"markdown","a9e29b84":"markdown","e5a937c9":"markdown","49d4c16a":"markdown","4a1fdc89":"markdown","30bc53d9":"markdown","c44c02d1":"markdown","38f09887":"markdown","bf81b809":"markdown","6dd5a400":"markdown"},"source":{"7b10a292":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","710b804c":"df = pd.read_csv('\/kaggle\/input\/hotel-booking-demand\/hotel_bookings.csv')\nprint(f'Dataframe shape: {df.shape}')\ndf.head()","3196f79b":"df.isna().sum()","5ffc1763":"df = df.drop(columns=['country', 'agent', 'company', 'meal', 'required_car_parking_spaces', 'arrival_date_week_number', 'arrival_date_day_of_month', 'total_of_special_requests'])\ndf['children'] = df['children'].fillna(0)","613fa391":"df.head()","8b25b4fa":"df.dtypes","796ac52b":"df['children'] = df['children'].astype('int64')","70d2f33d":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# print(plt.style.available)\nplt.style.use('ggplot')","347dc386":"df['hotel'].value_counts(normalize=True).plot.bar();","819bd968":"plt.figure(figsize = (20,10))\nsns.barplot(x = 'arrival_date_month', y = 'is_canceled', hue = 'hotel', data = df);","d991771e":"# lead_time\nfig, ax = plt.subplots(1, 2, figsize=(17, 7))\ndf['lead_time'].plot(kind='hist', bins=25, ax = ax.flat[0], legend='lead_time');\nsns.violinplot(x='is_canceled', y='lead_time', data=df, ax=ax.flat[1]);","51d30dc9":"(sns.FacetGrid(df, hue = 'is_canceled',\n             height = 6,\n              xlim=(0, 600))\n    .map(sns.kdeplot, 'lead_time', shade = True)\n    .add_legend());","2171ed7e":"# Compare number of bookings and number of cancellations\nfig, ax = plt.subplots(1, 2, figsize=(17, 5))\nbkng_cancel_year = pd.concat([\n    df.groupby('arrival_date_year').sum()['is_canceled'].sort_values(ascending=False),\n    df['arrival_date_year'].value_counts()\n], axis=1).rename(columns={'is_canceled':'num_cancellations', 'arrival_date_year': 'num_bookings'})\nbkng_cancel_year.plot.bar(ax=ax.flat[0]);\n\n\nbkng_cancel_month = pd.concat([\n    df.groupby('arrival_date_month').sum()['is_canceled'].sort_values(ascending=False),\n    df['arrival_date_month'].value_counts()\n], axis=1).rename(columns={'is_canceled':'num_cancellations', 'arrival_date_month': 'num_bookings'})\nbkng_cancel_month.plot.bar(ax=ax.flat[1]);","7be17d60":"# Visualizing duration of stay\ndf['stays_in_total_nights'] = df['stays_in_week_nights'] + df['stays_in_weekend_nights']\nfig, ax = plt.subplots(1, 2, figsize=(17, 7))\ndf[df['stays_in_total_nights'] < 25]['stays_in_total_nights'].plot.hist(bins=25, ax=ax.flat[0]);\nax.flat[0].set_xlabel(\"Duration of stay in nights\");\nsns.violinplot(x='is_canceled', y='stays_in_total_nights', data=df[df['stays_in_total_nights'] < 25], ax=ax.flat[1]);","61fe0ab1":"(sns.FacetGrid(df, hue = 'is_canceled',\n             height = 6,\n              xlim=(0, 25))\n    .map(sns.kdeplot, 'stays_in_total_nights', shade = True)\n    .add_legend());","16b165c1":"# df['adults'].value_counts(normalize=True).plot.bar();\nplt.figure(figsize=(10, 7))\nsns.countplot(x='adults', hue='hotel', data=df);","f3e00911":"df[df['adults'] > 10]","fd8b7a81":"# Interesting cases. Could be considered as outliers?\ndf[(df['babies'] > 3) | (df['children'] > 5)]","d09fdff1":"fig, ax = plt.subplots(1, 2, figsize=(20, 7))\ndf['market_segment'].value_counts().plot(kind='pie', ax=ax.flat[0]);\n\n# Compare number of cancellations for each market segment\ncancellations_per_market_segment = pd.concat([\n    df.groupby('market_segment').sum()['is_canceled'].sort_values(ascending=False),\n    df['market_segment'].value_counts()\n], axis=1).rename(columns={'is_canceled':'num_cancellations', 'market_segment': 'num_bookings'})\ncancellations_per_market_segment.plot.bar(ax=ax.flat[1]);","5c7bde29":"plt.figure(figsize=(15, 10))\nsns.countplot(hue='reservation_status', x='market_segment', data=df);","a94ddc41":"plt.figure(figsize = (15,10))\nsns.boxplot(x = 'market_segment', y = 'stays_in_total_nights', data = df, hue = 'hotel');","9c482f36":"fig, ax = plt.subplots(1, 2, figsize = (30, 10))\nsns.violinplot(x = 'market_segment', y = 'stays_in_week_nights', data = df, hue = 'hotel', ax=ax.flat[0]);\nsns.violinplot(x = 'market_segment', y = 'stays_in_weekend_nights', data = df, hue = 'hotel', ax=ax.flat[1]);","ddb8e0f2":"fig, ax = plt.subplots(1, 2, figsize=(20, 7))\ndf['distribution_channel'].value_counts().plot(kind='pie', ax=ax.flat[0]);\n\n# Compare number of cancellations for each market segment\ncancellations_per_distribution_channel = pd.concat([\n    df.groupby('distribution_channel').sum()['is_canceled'].sort_values(ascending=False),\n    df['distribution_channel'].value_counts()\n], axis=1).rename(columns={'is_canceled':'num_cancellations', 'distribution_channel': 'num_bookings'})\ncancellations_per_distribution_channel.plot.bar(ax=ax.flat[1]);","2df26bde":"plt.figure(figsize=(15, 10))\nsns.boxplot(x='distribution_channel', y='stays_in_total_nights', hue='is_canceled', data=df);","a4bfe504":"(df['is_repeated_guest'].value_counts(normalize=True) * 100).rename(index={0: 'No', 1: 'Yes'}).plot(kind='bar', xlabel='Repeated Guest', figsize=(9, 6));","88278635":"fig, ax = plt.subplots(1, 3, figsize=(30, 7))\nsns.stripplot(x='is_canceled', y='previous_cancellations', data=df, hue='reservation_status', ax=ax.flat[0]);\nsns.stripplot(x='is_canceled', y='previous_bookings_not_canceled', data=df, ax=ax.flat[1]);\nsns.scatterplot(x='previous_cancellations', y='previous_bookings_not_canceled', data=df, hue='is_canceled', ax=ax.flat[2]);","3a67892e":"plt.figure(figsize=(10, 7))\nax = sns.countplot(x='is_canceled', hue='is_repeated_guest', data=df);\nax.set_ylabel('num_cancellations');","ffbb400c":"room_type_stats = pd.concat([df['reserved_room_type'].value_counts().rename('num_reserved_rooms'),\n                             df['assigned_room_type'].value_counts().rename('num_assigned_rooms'),\n                             df.groupby('reserved_room_type').sum()['is_canceled'].rename('reserved_rooms_cancelled'), \n                             df.groupby('assigned_room_type').sum()['is_canceled'].rename('assigned_rooms_cancelled')], axis=1)\nroom_type_stats","638a188b":"fig, ax = plt.subplots(2, 2, figsize=(20, 9))\nroom_type_stats[['num_reserved_rooms', 'reserved_rooms_cancelled']].plot(kind='bar', ax=ax.flat[0]);\nroom_type_stats[['num_assigned_rooms', 'assigned_rooms_cancelled']].plot(kind='bar', ax=ax.flat[1]);\nroom_type_stats[['num_reserved_rooms', 'num_assigned_rooms']].plot(kind='bar', ax=ax.flat[2]);\nroom_type_stats[['reserved_rooms_cancelled', 'assigned_rooms_cancelled']].plot(kind='bar', ax=ax.flat[3]);","04980aa6":"sns.stripplot(x='is_canceled', y='booking_changes', data=df);","487c83d2":"deposit_type_cancellations_stats = pd.concat([df.groupby('deposit_type').sum()['is_canceled'].sort_values(ascending=False),\n                                               df['deposit_type'].value_counts(),\n                                               df.groupby('deposit_type').sum()['is_canceled'].sort_values(ascending=False) \/ df['deposit_type'].value_counts() * 100],\n                                              axis=1).rename(columns={'is_canceled': 'num_cancellations', 'deposit_type': 'total_num_bookings', 0: 'percent_cancellations'})\nfig, ax = plt.subplots(1, 2, figsize=(17, 6))\ndeposit_type_cancellations_stats.drop(columns='percent_cancellations').plot(kind='bar', ax=ax.flat[0]);\nsns.barplot(x=deposit_type_cancellations_stats.index, y='percent_cancellations', data=deposit_type_cancellations_stats, ax=ax.flat[1]);","7d1ccb3a":"sns.stripplot(x='is_canceled', y='days_in_waiting_list', data=df);","e9708fa9":"customer_type_cancellations_stats = pd.concat([df.groupby('customer_type').sum()['is_canceled'].sort_values(ascending=False),\n                                               df['customer_type'].value_counts(),\n                                               df.groupby('customer_type').sum()['is_canceled'].sort_values(ascending=False) \/ df['customer_type'].value_counts() * 100],\n                                              axis=1).rename(columns={'is_canceled': 'num_cancellations', 'customer_type': 'total_num_bookings', 0: 'percent_cancellations'})\nfig, ax = plt.subplots(1, 2, figsize=(17, 6))\ncustomer_type_cancellations_stats.drop(columns='percent_cancellations').plot(kind='bar', ax=ax.flat[0]);\nsns.barplot(x=customer_type_cancellations_stats.index, y='percent_cancellations', data=customer_type_cancellations_stats, ax=ax.flat[1]);","4638c0ee":"sns.stripplot(x='is_canceled', y='adr', data=df);","a626f919":"# Drop outlier and replot\ndf = df[df['adr'] < 1000]\nsns.stripplot(x='is_canceled', y='adr', data=df);","2ccaaa2e":"(sns.FacetGrid(df, hue = 'is_canceled',\n             height = 6,\n              xlim=(0, 25))\n    .map(sns.kdeplot, 'adr', shade = True)\n    .add_legend());","1f8c51a4":"df['reservation_status'].value_counts(normalize=True).plot.bar(figsize=(8, 5));","bf4e60e4":"sns.countplot(x='reservation_status', hue='is_repeated_guest', data=df);","c6a41b8d":"df = pd.read_csv('\/kaggle\/input\/hotel-booking-demand\/hotel_bookings.csv')\nprint(f'Dataframe shape: {df.shape}')\ndf.head()","9c1e1418":"df = df.drop(columns=['country', 'agent', 'company', 'meal', \n                      'arrival_date_week_number', 'arrival_date_day_of_month', 'reservation_status_date'])\ndf['children'] = df['children'].fillna(0)\ndf['children'] = df['children'].astype('int64')","f35abdc7":"# Creation of New Features\ndf['stays_in_total_nights'] = df['stays_in_week_nights'] + df['stays_in_weekend_nights']\ndf['total_guests'] = df['adults'] + df['children'] + df['babies']\n\ndf = df.drop(columns=['adults', 'children', 'babies'])\n\n# Check if room type was changed\ndf['room_type_changed'] = (df['reserved_room_type'] != df['assigned_room_type']).astype('int')","bba6ab80":"df.dtypes","e875c9e6":"# Drop Outliers\ndf = df[df['adr'] < 1000]","dc5ceef7":"from sklearn import preprocessing","bf898fc7":"df_copy = df.copy()","279911d2":"features_to_label_encode = ['arrival_date_year', 'arrival_date_month', 'market_segment', 'distribution_channel', 'reserved_room_type', 'assigned_room_type',\n                           'deposit_type', 'customer_type', 'reservation_status']\nle = preprocessing.LabelEncoder()\n\nfor feature in features_to_label_encode:\n    df_copy[feature] = le.fit_transform(df[feature])","7cc5eaae":"plt.figure(figsize=(10, 7))\nax = (df_copy.corr()['is_canceled']\n            .filter(items=[x for x in df.columns if x != 'is_canceled'], axis=0)\n            .sort_values().plot.bar());\nax.set_title('Correlation with is_canceled');","92f4eea9":"# Drop certain columns\n# Drop reservation status because it is basically directly correlated with the target column\ndf = df.drop(columns=['reserved_room_type', 'assigned_room_type', 'reservation_status'])","5d4cfb9a":"nominal_features = ['arrival_date_month', 'arrival_date_year', 'market_segment', \n                   'distribution_channel', 'hotel', 'deposit_type', 'customer_type']\n\ndf = pd.get_dummies(df, columns=nominal_features)","b874df62":"df['lead_time'] = pd.qcut(df['lead_time'], 3, labels=['less_than_a_month', 'more_than_a_month', 'more_than_4_months'])\ndf = pd.get_dummies(df, columns=['lead_time'])","aedb7705":"df['total_guests'].value_counts()","960c40f7":"# A reservation with no customers seems rather odd, we will remove those rows\ndf = df[df['total_guests'] > 0]","82217d2f":"def bin_num_guests(data):\n    \n    if data['total_guests'] < 3:\n        return 'small'\n    elif 3 <= data['total_guests'] <= 6:\n        return 'medium'\n    else:\n        return 'large'\n\n\ndf['guest_group_size'] = df.apply(bin_num_guests, axis=1)\ndf['is_single'] = df['total_guests']\ndf['is_single'] = (df['is_single'] == 1).astype(int)\ndf = pd.get_dummies(df, columns=['guest_group_size'])","5e781d4e":"# convert weekend only as a feature\n# convert week only to a feature\n# bin the duration of stay feature\ndf['weekend_only'] = ((df['stays_in_week_nights'] == 0) & (df['stays_in_weekend_nights'] > 0)).astype('int')\ndf['week_only'] = ((df['stays_in_week_nights'] > 0) & (df['stays_in_weekend_nights'] == 0)).astype('int')","d4de648a":"sns.jointplot(x='stays_in_week_nights', y='stays_in_weekend_nights', data=df[df['stays_in_total_nights'] < 6], kind='hex', color=\"#4CB391\");","ccb62d3b":"def categorize_duration_of_stay(data):\n    \n    if data['stays_in_total_nights'] < 6:\n        if data['stays_in_weekend_nights'] > 0 and data['stays_in_week_nights'] > 0:\n            return 'long_weekend'\n        elif data['stays_in_weekend_nights'] > 0 and data['stays_in_week_nights'] == 0:\n            return 'weekend_visit'\n        elif data['stays_in_weekend_nights'] == 0 and data['stays_in_week_nights'] > 0:\n            return 'weekday_visit'\n    elif 6 <= data['stays_in_total_nights'] <= 7:\n        return \"week_long_visit\"\n    else:\n        return 'long_visit'","53e70893":"df['type_of_visit'] = df.apply(categorize_duration_of_stay, axis=1)\ndf[['type_of_visit', 'stays_in_week_nights', 'stays_in_weekend_nights']].head()","d5aef033":"# turns out there are bookings with duration of stay being zero, that does not help, so we will drop these rows.\ndf = df[df['stays_in_total_nights'] > 0]","a557ee11":"df = pd.get_dummies(df, columns=['type_of_visit'], prefix='')","2a6fe226":"for col in df.columns:\n    if col[0] == '_':\n        df = df.rename(columns={col: col[1:]})","c2a74f7e":"from sklearn import model_selection as ms\nfrom sklearn import metrics\n\n# Algorithms to consider\nfrom sklearn import tree, linear_model, ensemble, neural_network\nimport xgboost","9b07c912":"X = df.drop(columns=['is_canceled'])\ny = df['is_canceled']\n\nX_train, X_test, y_train, y_test = ms.train_test_split(X, y, test_size=0.3, shuffle=True, random_state=42)","0d8419fa":"def fit_and_evaluate(model, X_train, y_train, X_test, y_test):\n    \n    fit_model = model.fit(X_train, y_train)\n    y_predicted = fit_model.predict(X_test)\n    \n    accuracy_score = metrics.accuracy_score(y_test, y_predicted)\n    \n    print(f\"Evaluation of trained {type(model).__name__} model\")\n    print(f\"Accuracy score: {accuracy_score}\")\n    print(f\"Confusion Matrix: {metrics.confusion_matrix(y_test, y_predicted)}\")\n    \n    return fit_model, accuracy_score\n\ndef plot_roc_curve(X_test, y_test, models):\n    \n    fig, ax = plt.subplots(1, 1, figsize=(10, 7))\n    \n    for model in models:\n        metrics.plot_roc_curve(model, X_test, y_test, ax = ax)","3dc6e395":"training_results = []\n\n# SVC was excluded in this because it took too long to train\n\nmodels = [linear_model.LogisticRegression(solver='liblinear'), tree.DecisionTreeClassifier(max_depth = 10), \n          ensemble.RandomForestClassifier(), neural_network.MLPClassifier(solver='adam'), xgboost.XGBClassifier()]\n\n\nfor model in models:\n    trained_model, acc_score = fit_and_evaluate(model, X_train, y_train, X_test, y_test)\n    training_results.append((trained_model, acc_score))","764b6e55":"# result[0] has the trained model\nplot_roc_curve(X_test, y_test, [result[0] for result in training_results])","0a4934b1":"### Past Record of Cancellations, Bookings","4a601bc7":"A detailed analysis can be performed in order to understand the characteristics of each of the room types, possibly using clustering of some kind and\/or observing the correlation of the room types with other features. Following are some observations\n- Room A has the most bookings, and therefore will also have the most number of cancellations, regardless of whether it was reserved or assigned\n- Room A is reserved the most. \n- For Room A, num_reserved_rooms > num_assigned_rooms. We notice on the other hand that for the other room types, num_assigned_rooms > num_reserved_rooms.","8e231660":"# ML Modeling","4bc6d5a4":"Majority of the stays at the hotel are less than a week (roughly). We see a peak at roughly 7 nights, and another peak at around 2 nights. The peak around 2-3 nights is likely for those that only book a stay for the weekend.\nAlso only looking at cases below 25 nights, because the portion of bookings that are larger than 25 are significantly small","24882eef":"## Preprocess Features to Evaluate Correlation","1719ee2f":"# EDA","d6ee725e":"### Training and Evaluation of a few ML Models","bc81982b":"### Customer Type\nGroups had the lowest percentage of cancellations","39aff7b1":"### Duration of Stay","29b7138f":"### Preprocessing Categorical Features","58110ce5":"### Room Type Characteristics","2e36cca0":"### ADR vs is_canceled\n\nNo significant correlation. ","2320509f":"### Distribution Channel","e565f8df":"### Preprocessing Continuous Features","a65a86a6":"### Setup train and test data","e77774a9":"### Hotel Type","1a974f36":"## ML Models","d3d8a4f4":"### Deposit Type\nClose to 100% of those that had a non-refundable booking cancelled their booking. Big difference in contrast to the bookings that either had 'No Deposit' or had 'Refundable' bookings","a0146fed":"## Data Preprocessing","77a0ef33":"### Booking Changes","0f66195e":"### Wrapper methods","a9e29b84":"## Variable Types\n\n### Categorical Variables\n- arrival_date_month (nominal)\n- arrival_date_year (nominal)\n- market_segment (nominal)\n- distribution_channel (nominal)\n- reserved_room_type (would be ordinal but because we dont know anything about the room, it's nominal)\n- hotel (nominal)\n- assigned_room_type (would be ordinal but because we dont know anything about the room, it's nominal)\n- deposit_type (nominal)\n- customer_type (nominal)\n- is_repeated_guest (binary)\n- is_canceled (binary)\n\n### Numerical Variables\n- lead_time (discrete)\n- adults, children, babies (discrete)\n- stays_in_weekend_nights, stays_in_week_nights, stays_in_total_nights (discrete)\n- previous_cancellations (discrete)\n- previous_bookings_not_canceled (discrete)\n- booking_changes (discrete)\n- days_in_waiting_list (discrete)\n- adr (continuous)\n- total_of_special_requests (discrete)","e5a937c9":"### Reservation Status\nThose that were marked as no-show also have 'is_canceled = 1', but we see that a little less than 40% of the people canceled their bookings","49d4c16a":"Although there are more Offline TA\/TO bookings than Group Bookings, the number of cancellations for Groups is higher. ","4a1fdc89":"### Days in the Waiting List\n\nNo definitive correlation here","30bc53d9":"### Market Segment","c44c02d1":"### Number of Bookings vs Number of Cancellations","38f09887":"### Lead Time","bf81b809":"### Adults, Children, Babies","6dd5a400":"# Basic Data Preparation"}}