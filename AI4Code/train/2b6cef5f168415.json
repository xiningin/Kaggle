{"cell_type":{"40cd3472":"code","85ed8da5":"code","10b86227":"code","0bad9c64":"code","252952ff":"code","28a9793a":"code","fa87c698":"code","12e3993d":"code","a97d0ec8":"code","a78d3f9e":"code","8937ce6c":"code","d00de1b3":"code","683a32cb":"code","bcddcd5e":"code","2d5a3dd0":"code","9200ee77":"code","687c6421":"code","e5a27341":"code","a9d5c9ff":"code","2d1ee333":"code","8c0bd414":"code","07ab713c":"code","77204da9":"code","b4f2795f":"code","5085fcb2":"code","8f5497d0":"code","189a3e87":"code","47604197":"code","359fa6d4":"code","c140031c":"code","10d9bb92":"code","17cc4ea3":"code","8e615285":"code","7914b525":"code","0303b832":"code","cb339283":"code","c9779bae":"code","3de03f03":"code","63b53059":"code","e8f49f84":"code","8e483e3a":"code","b06420a0":"code","ee528d1f":"code","565dcd01":"code","644e426b":"code","5fe21044":"code","b8b8f637":"code","fea875af":"code","aae32922":"code","a7f831c5":"code","2af92197":"code","d0453833":"code","7e1728d0":"code","2fdc9600":"code","e7eeb9c6":"code","61bada63":"code","f60b6b7d":"code","faf4b524":"code","f895c325":"code","7a236679":"code","1316a365":"code","25609338":"code","0d83e698":"code","057ddc4e":"code","7785aa62":"code","ce58efc5":"code","2e6965da":"code","896c6eb9":"code","d89bb49a":"code","060227ad":"code","17a3d0b0":"code","e24a951e":"code","c7198019":"code","bf7bfd24":"code","1bff89f9":"code","7a7b8e97":"code","2b1b898b":"code","3a24ee63":"code","f8bf9c4d":"code","458f7e46":"code","fc55028f":"code","fc7bbe2a":"code","6c4a6047":"code","da96702a":"code","36053683":"code","4522f61c":"code","f5a1fd19":"code","29a69116":"code","6f9c1606":"code","d1ae5ca5":"code","3986686f":"code","dac90d54":"code","98ddbee5":"code","d6f4d57a":"code","3e34e1da":"markdown","1ec394b8":"markdown","d9ea5289":"markdown","cdaa6266":"markdown","10a1b8ed":"markdown","efa6d907":"markdown","c21b35df":"markdown","6b5e1449":"markdown","42e1c82e":"markdown","bc721cea":"markdown","922a3a4d":"markdown","e66cfc96":"markdown","c8fdb2e0":"markdown","85b990de":"markdown","c333e577":"markdown","7ee10b69":"markdown","a38d3e5a":"markdown","8cb40650":"markdown","b6d08c09":"markdown","29f546c5":"markdown","6c2e77b0":"markdown","af864079":"markdown","9e1804fb":"markdown","06c17040":"markdown","2b70c7c3":"markdown","f104b460":"markdown","202c44ad":"markdown","8ad48741":"markdown","b3839824":"markdown","1c317f33":"markdown","aa3a8311":"markdown","ec82e25f":"markdown","a5b09ffa":"markdown","359cb80d":"markdown","e800e8a2":"markdown","b5c32b67":"markdown","083fffac":"markdown","049913fb":"markdown","12772fe7":"markdown","9c0667ad":"markdown","60c81af0":"markdown","de060d0d":"markdown","507d382e":"markdown","a7317452":"markdown","23419b3f":"markdown","e0fbed52":"markdown"},"source":{"40cd3472":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","85ed8da5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n%matplotlib inline\n\nfrom scipy import stats\n\nfrom sklearn.linear_model import LinearRegression,Lasso,ElasticNet,Ridge\nfrom sklearn.model_selection import train_test_split,RandomizedSearchCV\nfrom sklearn.ensemble import GradientBoostingRegressor,VotingRegressor\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","10b86227":"train = pd.read_csv(r'\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv(r'\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","0bad9c64":"train.head()","252952ff":"test.head()","28a9793a":"train.info()","fa87c698":"test.info()","12e3993d":"train.describe()","a97d0ec8":"test.describe()","a78d3f9e":"train.isnull().any().describe()","8937ce6c":"test.isnull().any().describe()","d00de1b3":"print(train.shape)\nprint(test.shape)","683a32cb":"Y = train['SalePrice']\ntrain = train.drop('SalePrice',axis=1)\ndata = pd.concat([train,test],axis=0)\ndata = data.reset_index(drop=True)\ndata.shape","bcddcd5e":"print(\"Number of duplicate values in train set : \",train.duplicated().sum())\nprint(\"Number of duplicate values in test set : \",test.duplicated().sum())","2d5a3dd0":"data_null = (data.isnull().sum() \/ len(data)) * 100\nprint(data_null)\ndata_null = data_null.drop(data_null[data_null == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :data_null})\nms = (missing_data.head(30)).style.background_gradient(low=0,high=1,axis=0,cmap='Oranges')\nms","9200ee77":"data['MSZoning'].unique()","687c6421":"data['MSZoning'] = data['MSZoning'].fillna(data['MSZoning'].mode()[0])","e5a27341":"data['LotFrontage'].unique()","a9d5c9ff":"data['LotFrontage'].median()","2d1ee333":"data['LotFrontage'] = data['LotFrontage'].fillna(68)","8c0bd414":"data['Alley'].unique()","07ab713c":"data[\"Alley\"] = data[\"Alley\"].fillna(\"NA\")","77204da9":"data['Utilities'].unique()","b4f2795f":"data['Utilities'].isnull().sum()","5085fcb2":"data['Utilities'] = data['Utilities'].fillna('AllPub')","8f5497d0":"print(data['Exterior1st'].unique())\nprint(data['Exterior2nd'].unique())","189a3e87":"data['Exterior1st'] = data['Exterior1st'].fillna(data['Exterior1st'].mode()[0])\ndata['Exterior2nd'] = data['Exterior2nd'].fillna(data['Exterior2nd'].mode()[0])","47604197":"print(data['MasVnrType'].unique())\nprint(data['MasVnrArea'].unique())","359fa6d4":"data[\"MasVnrType\"] = data[\"MasVnrType\"].fillna(\"NA\")\ndata[\"MasVnrArea\"] = data[\"MasVnrArea\"].fillna(0)","c140031c":"print(data['BsmtQual'].unique())\nprint(data['BsmtCond'].unique())\nprint(data['BsmtExposure'].unique())\nprint(data['BsmtFinType1'].unique())\nprint(data['BsmtFinType2'].unique())","10d9bb92":"data['BsmtQual'] = data['BsmtQual'].fillna('NA')\ndata['BsmtCond'] = data['BsmtCond'].fillna('NA')\ndata['BsmtFinType1'] = data['BsmtFinType1'].fillna('NA')\ndata['BsmtExposure'] = data['BsmtExposure'].fillna('NA')\ndata['BsmtFinType2'] = data['BsmtFinType2'].fillna('NA')","17cc4ea3":"data['BsmtFinSF1'] = data['BsmtFinSF1'].fillna(0)\ndata['BsmtFinSF2'] = data['BsmtFinSF2'].fillna(0)\ndata['BsmtUnfSF'] = data['BsmtUnfSF'].fillna(0)\ndata['TotalBsmtSF'] = data['TotalBsmtSF'].fillna(0)\ndata['BsmtFullBath'] = data['BsmtFullBath'].fillna(0)\ndata['BsmtHalfBath'] = data['BsmtHalfBath'].fillna(0)","8e615285":"data['KitchenQual'].unique()","7914b525":"data['KitchenQual'] = data['KitchenQual'].fillna(data['KitchenQual'].mode()[0])","0303b832":"data['Electrical'].unique()","cb339283":"data['Electrical'] = data['Electrical'].fillna(data['Electrical'].mode()[0])","c9779bae":"data['Functional'].unique()","3de03f03":"data['Functional'] = data['Functional'].fillna(data['Functional'].mode()[0])","63b53059":"data['GarageYrBlt'] = data['GarageYrBlt'].fillna(0)\ndata['GarageArea'] = data['GarageArea'].fillna(0)\ndata['GarageCars'] = data['GarageCars'].fillna(0)","e8f49f84":"data['GarageType'] = data['GarageType'].fillna('NA')\ndata['GarageFinish'] = data['GarageFinish'].fillna('NA')\ndata['GarageQual'] = data['GarageQual'].fillna('NA')\ndata['GarageCond'] = data['GarageCond'].fillna('NA')","8e483e3a":"data['FireplaceQu'].unique()","b06420a0":"data[\"FireplaceQu\"] = data[\"FireplaceQu\"].fillna('NA')","ee528d1f":"data['Fence'].unique()","565dcd01":"data[\"Fence\"] = data[\"Fence\"].fillna('NA')","644e426b":"data['MiscFeature'].unique()","5fe21044":"data[\"MiscFeature\"] = data[\"MiscFeature\"].fillna(\"NA\")","b8b8f637":"data['PoolQC'].unique()","fea875af":"data[\"PoolQC\"] = data[\"PoolQC\"].fillna(\"NA\")","aae32922":"data['SaleType'].unique()","a7f831c5":"data['SaleType'] = data['SaleType'].fillna(data['SaleType'].mode()[0])","2af92197":"data['MSSubClass'].unique()","d0453833":"data['MSSubClass'] = data['MSSubClass'].fillna(\"NA\")","7e1728d0":"data_null = (data.isnull().sum() \/ len(data)) * 100\nprint(data_null)","2fdc9600":"train = data[:train.shape[0]]\ntest = data[train.shape[0]:]\ntrain['SalePrice'] = Y","e7eeb9c6":"print(train.columns.values)\nprint(train.shape)\nprint(test.shape)","61bada63":"fig = px.scatter(train,x='LotArea',y='SalePrice',color='SalePrice',size='SalePrice')\nfig.show()","f60b6b7d":"train = train[train['LotArea']<100000]\nprint(train.shape)","faf4b524":"fig = px.scatter(train,x='LotFrontage',y='SalePrice',color='SalePrice',size='SalePrice')\nfig.show()","f895c325":"train = train.drop(train[(train['LotFrontage']>300) & (train['SalePrice']<300000)].index)","7a236679":"fig = px.scatter(train,x='GrLivArea',y='SalePrice',size='SalePrice',color='SalePrice')\nfig.show()","1316a365":"train = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)","25609338":"fig  = px.scatter(train,x='LandSlope',y='SalePrice',size='SalePrice',color='SalePrice')\nfig.show()","0d83e698":"train = train.drop(train[(train['LandSlope']=='Gtl') & (train['SalePrice']>700000)].index)\ntrain = train.drop(train[(train['LandSlope']=='Mod') & (train['SalePrice']>500000)].index)\ntrain = train.drop(train[(train['LandSlope']=='Sev') & (train['SalePrice']>200000)].index)","057ddc4e":"train.shape","7785aa62":"fig = px.scatter(train,x='Heating',y='SalePrice',size='SalePrice',color='SalePrice')\nfig.show()","ce58efc5":"fig = px.scatter(train,x='MSSubClass',y='SalePrice',size='SalePrice',color='SalePrice')\nfig.show()","2e6965da":"fig = px.scatter(train,x='MasVnrArea',y='SalePrice',size='SalePrice',color='SalePrice')\nfig.show()","896c6eb9":"train = train.drop(train[(train['MasVnrArea']>1200)].index)","d89bb49a":"plt.figure(figsize=(20,12))\nplt.subplot(2,2,1)\nsns.distplot(train['SalePrice'],color='green',bins=10)\nplt.grid()\nplt.title(\"Sale Price Values distribution\")\n\nsp = np.asarray(train['SalePrice'].values)\nsaleprice_transformed = stats.boxcox(sp)[0]\n\nplt.subplot(2,2,2)\nsns.distplot(saleprice_transformed,color='red',bins=10)\nplt.grid()\nplt.title(\"Box-Cox transformed Sale Price Values\")\n\nplt.show()","060227ad":"skewed_features = pd.DataFrame(train.skew().sort_values(ascending=False))\nskewed_features = skewed_features.style.background_gradient(low=0,high=1,cmap='Purples',axis=0)\nskewed_features","17a3d0b0":"plt.figure(figsize=(25,20))\nsns.heatmap(train.corr(),cmap='Oranges',fmt=\".3f\",annot=True)\nplt.show()","e24a951e":"print(train.shape)\nprint(test.shape)","c7198019":"Y = train['SalePrice']\ntrain = train.drop('SalePrice',axis=1)\ndata = pd.concat([train,test],axis=0)\ndata_ohe = pd.get_dummies(data)\ntrain_ohe = data_ohe[:train.shape[0]]\ntest_ohe = data_ohe[train.shape[0]:]","bf7bfd24":"print(train_ohe.shape)\nprint(test_ohe.shape)\nprint(Y.shape)","1bff89f9":"X_train,X_test,Y_train,Y_test = train_test_split(train_ohe,Y,test_size=0.2)","7a7b8e97":"print(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","2b1b898b":"X_train.isnull().sum()","3a24ee63":"rbscaler = RobustScaler()\nX_train = rbscaler.fit_transform(X_train)\nX_test = rbscaler.fit_transform(X_test)\ntest_ohe = rbscaler.fit_transform(test_ohe)","f8bf9c4d":"lr = LinearRegression()\nlr.fit(X_train,Y_train)\ntrain_pred = lr.predict(X_train)\npred = lr.predict(X_test)\nprint(\"Mean Squared Error on test data : \",mean_squared_error(Y_test,pred))\nprint(\"Mean Squared Error on train data : \",mean_squared_error(Y_train,train_pred))\nrmse= np.sqrt(mean_squared_error(Y_test,pred))\nrmse_train = np.sqrt(mean_squared_error(Y_train,train_pred))\nprint(\"Test rmse :\",rmse)\nprint(\"Train rmse :\",rmse_train)","458f7e46":"# params = {\n#     'alpha':[0.0001,0.001,0.01,0.1,0.2,0.3,0.311,0.4,1,10,100],\n# }\n# lasso = Lasso(normalize=True)\n\n# clf = RandomizedSearchCV(lasso,params,n_jobs=-1,verbose=0,cv=10,scoring='neg_mean_squared_error')\n# clf.fit(X_train,Y_train)\n\n# print(\"Best parameters  :\",clf.best_params_)","fc55028f":"ls = Lasso(alpha=10,normalize=True)\nls.fit(X_train,Y_train)\ntrain_pred = ls.predict(X_train)\ntest_pred = ls.predict(X_test)\nprint(\"Root Mean Square Error for train data is : \",np.sqrt(mean_squared_error(Y_train, train_pred)))\nprint(\"Root Mean Square Error test data is  : \",np.sqrt(mean_squared_error(Y_test, test_pred)))","fc7bbe2a":"# params = {\n#     'alpha':[0.0001,0.001,0.01,0.1,0.2,0.3,0.311,0.4,1,10,100],\n# }\n# ridge = Ridge(normalize=True)\n\n# clf = RandomizedSearchCV(ridge,params,n_jobs=-1,verbose=0,cv=10,scoring='neg_mean_squared_error')\n# clf.fit(X_train,Y_train)\n\n# print(\"Best parameters  :\",clf.best_params_)","6c4a6047":"ridge = Ridge(alpha=0.1,normalize=True)\nridge.fit(X_train,Y_train)\ntrain_pred = ridge.predict(X_train)\ntest_pred = ridge.predict(X_test)\nprint(\"Root Mean Square Error for train data is : \",np.sqrt(mean_squared_error(Y_train, train_pred)))\nprint(\"Root Mean Square Error test data is  : \",np.sqrt(mean_squared_error(Y_test, test_pred)))","da96702a":"# params = {\n#     'alpha':[0.0001,0.001,0.01,0.1,0.2,0.3,0.311,0.4,1,10,100],\n#     'l1_ratio':[0.001,0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,2,3,4,5,10]\n# }\n# es = ElasticNet(normalize=True)\n\n# clf = RandomizedSearchCV(es,params,n_jobs=-1,verbose=0,cv=10,scoring='neg_mean_squared_error')\n# clf.fit(X_train,Y_train)\n\n# print(\"Best parameters  :\",clf.best_params_)","36053683":"es = ElasticNet(alpha=0.001,l1_ratio=0.2)\nes.fit(X_train,Y_train)\ntrain_pred = es.predict(X_train)\ntest_pred = es.predict(X_test)\nprint(\"Root Mean Square Error for train data is : \",np.sqrt(mean_squared_error(Y_train, train_pred)))\nprint(\"Root Mean Square Error test data is  : \",np.sqrt(mean_squared_error(Y_test, test_pred)))","4522f61c":"# xg_reg = xgb.XGBRegressor()\n# xgparam_grid= {'learning_rate' : [0.01],'n_estimators':[2000, 3460, 4000],\n#                                     'max_depth':[3], 'min_child_weight':[3,5],\n#                                     'colsample_bytree':[0.5,0.7],\n#                                     'reg_alpha':[0.0001,0.001,0.01,0.1,10,100],\n#                                    'reg_lambda':[1,0.01,0.8,0.001,0.0001]}\n\n# xg_grid=RandomizedSearchCV(xg_reg,xgparam_grid, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)\n# xg_grid.fit(X_train,Y_train)\n# print(xg_grid.best_estimator_)\n# print(xg_grid.best_score_)","f5a1fd19":"xg = xgb.XGBRegressor(learning_rate=0.01,n_estimators=3460,\n                                     max_depth=3, min_child_weight=0,\n                                     gamma=0, subsample=0.7,\n                                     colsample_bytree=0.7,\n                                     objective='reg:linear', nthread=-1,\n                                     scale_pos_weight=1, seed=27,\n                                     reg_alpha=0.00006)\nxg = xg.fit(X_train,Y_train)\ntrain_pred = xg.predict(X_train)\npred = xg.predict(X_test)\nprint(\"Root Mean Square Error on train data is :\",np.sqrt(mean_squared_error(Y_train, train_pred)))\nprint(\"Root Mean Square Error on test data is :\",np.sqrt(mean_squared_error(Y_test, pred)))","29a69116":"# params = {\n#     'learning_rate':[0.001,0.01,0.002,0.003,0.004,0.1,1,10],'n_estimators':[5,10,15,25,30,35,20,40,50,70,90,100,200,400,500,1000,1500,2000,5000],\n#     'max_depth':[2,5,10,12,15,17,19,20,22,25,27,30,32,35,37,39,40,41,43,45,47,49,50,60,70,80,90,100,150,200],\n#     'num_leaves' : [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]\n# }\n# lg = lgb.LGBMRegressor()\n# lg=RandomizedSearchCV(lg,params, cv=10, scoring='neg_mean_squared_error', n_jobs=-1)\n# lg.fit(X_train,Y_train)\n# print(lg.best_estimator_)\n# print(lg.best_score_)","6f9c1606":"lg = lgb.LGBMRegressor(objective='regression', \n                                       num_leaves=4,\n                                       learning_rate=0.01, \n                                       n_estimators=5000,\n                                       max_bin=200, \n                                       bagging_fraction=0.75,\n                                       bagging_freq=5, \n                                       bagging_seed=7,\n                                       feature_fraction=0.2,\n                                       feature_fraction_seed=7,\n                                       verbose=-1)\nlg = lg.fit(X_train,Y_train)\ntrain_pred = lg.predict(X_train)\npred = lg.predict(X_test)\nprint(\"Root Mean Square Error on train data is :\",np.sqrt(mean_squared_error(Y_train, train_pred)))\nprint(\"Root Mean Square Error on test data is :\",np.sqrt(mean_squared_error(Y_test, pred)))","d1ae5ca5":"gbdt = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05, max_depth=4, max_features='sqrt', min_samples_leaf=15, min_samples_split=10, loss='huber', random_state =42)\ngbdt = gbdt.fit(X_train,Y_train)\ntrain_pred = gbdt.predict(X_train)\npred = gbdt.predict(X_test)\nprint(\"Root Mean Square Error on train data is :\",np.sqrt(mean_squared_error(Y_train, train_pred)))\nprint(\"Root Mean Square Error on test data is :\",np.sqrt(mean_squared_error(Y_test, pred)))","3986686f":"vc = VotingRegressor([('LGBM',lg),('XGB',xg),('ElasticNet',es)])\nvc = vc.fit(X_train,Y_train)\ntrain_pred = vc.predict(X_train)\npred = vc.predict(X_test)\nprint(\"Root Mean Square Error on train data is :\",np.sqrt(mean_squared_error(Y_train, train_pred)))\nprint(\"Root Mean Square Error on test data is :\",np.sqrt(mean_squared_error(Y_test, pred)))","dac90d54":"test = test.reset_index(drop=True)\ntest['Id']","98ddbee5":"submit = pd.DataFrame(test['Id'],columns=['Id'])\npredictions = vc.predict(test_ohe)\nsubmit['SalePrice'] = predictions\nlen(submit)","d6f4d57a":"submit.to_csv(\"submission.csv\",index=False)\nprint(\"File Saved...\")","3e34e1da":"**<h1 style=\"color:cyan\">FireplaceQu :**","1ec394b8":"<p style=\"color:magenta\">All the missing values which were numerical are filled with 0's and the values which were categorical are filled with 'NA' both of these mean that the feature does not exist for that type of datapoint.No datapoint has been removed from the data.","d9ea5289":"<p style=\"color:magenta\">No outliers.","cdaa6266":"**<h1 style=\"color:cyan\">BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2 : **","10a1b8ed":"<h1 style=\"color:red\">Predictions :","efa6d907":"<h1 style=\"color:cyan\">Ridge Regression :","c21b35df":"**<h1 style=\"color:cyan\">MasVnrType and MasVnrArea:**","6b5e1449":"<p style=\"color:magenta\">These features are basement related features which have categorical values so i am going to replace the missing or null values with 'NA' which means thate there is no basement present in the houses. ","42e1c82e":"**<h1 style=\"color:cyan\">Exterior1st and Exterior2nd:**","bc721cea":"<h1 style=\"color:cyan\">Scaling the data :","922a3a4d":"<h1 style=\"color:cyan\">Voting Classifier :","e66cfc96":"<p style=\"color:magenta\">These features have numerical values unlike the above Bsmt features which had categorical values i will replace the values with '0' which indicate that there is no basement present in the houses.","c8fdb2e0":"**<h1 style=\"color:cyan\">SaleType :**","85b990de":"**<h1 style=\"color:cyan\">Alley :**","c333e577":"**<h1 style=\"color:cyan\">MSZoning :**","7ee10b69":"<h1 style=\"color:cyan\">Linear Regression :","a38d3e5a":"**<h1 style=\"color:cyan\">GarageType, GarageFinish, GarageQual and GarageCond :**","8cb40650":"# **<h1 style='color:red'> Variable Information :**","b6d08c09":"<h1 style=\"color:cyan\">Light GBM :","29f546c5":"# **<h1 style=\"color:red\">Outliers :**","6c2e77b0":"**<h1 style=\"color:cyan\">BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath :**","af864079":"# **<h1 style='color:red'>Loading the dataset :**","9e1804fb":"**<h1 style=\"color:cyan\">Electrical :**","06c17040":"**<h1 style=\"color:cyan\">PoolQC :**","2b70c7c3":"**<p style=\"color:magenta\">There is no missing data in the dataset left.**","f104b460":"**<h1 style=\"color:cyan\">GarageYrBlt, GarageArea and GarageCars :**","202c44ad":"**<h1 style=\"color:cyan\">Lot Frontage :**","8ad48741":"**<h1 style=\"color:cyan\">MSSubClass :**","b3839824":"# **<h1 style='color:red'>Duplicate Values :**","1c317f33":"* SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\n* MSSubClass: The building class\n* MSZoning: The general zoning classification\n* LotFrontage: Linear feet of street connected to property\n* LotArea: Lot size in square feet\n* Street: Type of road access\n* Alley: Type of alley access\n* LotShape: General shape of property\n* LandContour: Flatness of the property\n* Utilities: Type of utilities available\n* LotConfig: Lot configuration\n* LandSlope: Slope of property\n* Neighborhood: Physical locations within Ames city limits\n* Condition1: Proximity to main road or railroad\n* Condition2: Proximity to main road or railroad (if a second is present)\n* BldgType: Type of dwelling\n* HouseStyle: Style of dwelling\n* OverallQual: Overall material and finish quality\n* OverallCond: Overall condition rating\n* YearBuilt: Original construction date\n* YearRemodAdd: Remodel date\n* RoofStyle: Type of roof\n* RoofMatl: Roof material\n* Exterior1st: Exterior covering on house\n* Exterior2nd: Exterior covering on house (if more than one material)\n* MasVnrType: Masonry veneer type\n* MasVnrArea: Masonry veneer area in square feet\n* ExterQual: Exterior material quality\n* ExterCond: Present condition of the material on the exterior\n* Foundation: Type of foundation\n* BsmtQual: Height of the basement\n* BsmtCond: General condition of the basement\n* BsmtExposure: Walkout or garden level basement walls\n* BsmtFinType1: Quality of basement finished area\n* BsmtFinSF1: Type 1 finished square feet\n* BsmtFinType2: Quality of second finished area (if present)\n* BsmtFinSF2: Type 2 finished square feet\n* BsmtUnfSF: Unfinished square feet of basement area\n* TotalBsmtSF: Total square feet of basement area\n* Heating: Type of heating\n* HeatingQC: Heating quality and condition\n* CentralAir: Central air conditioning\n* Electrical: Electrical system\n* 1stFlrSF: First Floor square feet\n* 2ndFlrSF: Second floor square feet\n* LowQualFinSF: Low quality finished square feet (all floors)\n* GrLivArea: Above grade (ground) living area square feet\n* BsmtFullBath: Basement full bathrooms\n* BsmtHalfBath: Basement half bathrooms\n* FullBath: Full bathrooms above grade\n* HalfBath: Half baths above grade\n* Bedroom: Number of bedrooms above basement level\n* Kitchen: Number of kitchens\n* KitchenQual: Kitchen quality\n* TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n* Functional: Home functionality rating\n* Fireplaces: Number of fireplaces\n* FireplaceQu: Fireplace quality\n* GarageType: Garage location\n* GarageYrBlt: Year garage was built\n* GarageFinish: Interior finish of the garage\n* GarageCars: Size of garage in car capacity\n* GarageArea: Size of garage in square feet\n* GarageQual: Garage quality\n* GarageCond: Garage condition\n* PavedDrive: Paved driveway\n* WoodDeckSF: Wood deck area in square feet\n* OpenPorchSF: Open porch area in square feet\n* EnclosedPorch: Enclosed porch area in square feet\n* 3SsnPorch: Three season porch area in square feet\n* ScreenPorch: Screen porch area in square feet\n* PoolArea: Pool area in square feet\n* PoolQC: Pool quality\n* Fence: Fence quality\n* MiscFeature: Miscellaneous feature not covered in other categories\n* MiscVal: Money Value of miscellaneous feature\n* MoSold: Month Sold\n* YrSold: Year Sold\n* SaleType: Type of sale\n* SaleCondition: Condition of sale","aa3a8311":"# <h1 style='color:red'>Importing libraries :","ec82e25f":"<h1 style=\"color:cyan\">Gradient Boosting Decision Tree :","a5b09ffa":"<h1 style=\"color:yellowgreen\">Hey Folks, In case you like my little effort here please do <span style=\"color:green\">UPVOTE<\/span> the kernel. Have an awesome day :) ","359cb80d":"**<h1 style=\"color:cyan\">KitchenQual :**","e800e8a2":"# **<h1 style=\"color:red\">Data Modeling :**","b5c32b67":"# **<h1 style=\"color:red\">Null Values :**","083fffac":"<h1 style=\"color:cyan\">Elastic Net Regrsssion :","049913fb":"# **<h1 style=\"color:red\">Models :**","12772fe7":"<h1 style=\"color:cyan\">XGBoost :","9c0667ad":"**<h1 style=\"color:cyan\">MiscFeature  :**","60c81af0":"**<h1 style=\"color:cyan\">After removing all null values from the dataset :**","de060d0d":"**<h1 style=\"color:cyan\">Utilities :**","507d382e":"**<h1 style=\"color:cyan\">Fence  :**","a7317452":" **<h1 style=\"color:cyan\">Functional :**","23419b3f":"<h1 style=\"color:cyan\">Lasso Regression :","e0fbed52":"**<h1 style=\"color:cyan\">Tatrget Variable :**"}}