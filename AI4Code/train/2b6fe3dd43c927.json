{"cell_type":{"62ee1949":"code","c6a255df":"code","7493a709":"code","f40039a8":"code","56902a27":"code","ba4d039b":"code","9d7ce2aa":"code","706eefbe":"code","78479c56":"code","d705d954":"code","ad13ed94":"code","3f9d6d3f":"code","c724fc88":"code","b69e0554":"code","02334b91":"code","599c0fa7":"code","7bcbb1a2":"code","c840a35a":"code","7b9786e6":"code","41468c96":"code","c7009d4e":"code","a33d40c0":"code","e27eb22d":"code","ae34fc8d":"code","3f33394c":"code","1f51a383":"code","63592102":"code","80eb06de":"code","035cde54":"code","d660f4de":"code","0bbc6b58":"code","e69edbfb":"code","82564715":"code","11675b5d":"code","6d805103":"code","2c0e18b3":"code","1f6027f0":"code","2949f447":"code","c8f918e9":"code","916433d4":"code","bc5875e0":"code","513b9e22":"code","9142bc08":"code","64a2fd9a":"code","2a97848b":"code","c9a2454f":"code","f040683a":"code","f9cd9ba8":"code","f089f9cb":"code","13f27ca3":"code","2b537d29":"code","e062ec02":"code","84a0b17f":"code","4ab9bc1c":"code","0ffb7647":"code","6cea8c69":"code","1e088918":"code","f44fa9b1":"code","61f31c28":"code","4efea43f":"code","723da725":"code","4402629c":"code","fc07c7ac":"code","e020b36e":"code","31697c6e":"code","a5c7c8b9":"markdown","3761d622":"markdown","6329836c":"markdown","cbd90db0":"markdown","79458a8c":"markdown","fcd81dbc":"markdown","1dcb03b1":"markdown","e0e32fa8":"markdown"},"source":{"62ee1949":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom subprocess import check_output             # utf-8 e uygun olup olmadigini arastirmak icin bunu aratiyoruz\nprint(check_output([\"ls\",\"..\/input\"]).decode(\"utf8\"))\n        \n        \n# Any results you write to the current directory are saved as output.","c6a255df":"data1 = pd.read_csv('\/kaggle\/input\/asteroid-impacts\/impacts.csv')\ndata2 = pd.read_csv('\/kaggle\/input\/asteroid-impacts\/orbits.csv')\ndata1.info()\ndata2.info()\n             ","7493a709":"data = pd.concat([data1, data2], axis=1, sort=False)\ndata.columns = ['Object_Name', 'Period_Start', 'Period_End', 'Possible_Impacts',\n       'Cumulative_Impact_Probability', 'Asteroid_Velocity',\n       'Asteroid_Magnitude', 'Asteroid_Diameter(km)',\n       'Cumulative_Palermo_Scale', 'Maximum_Palermo_Scale',\n       'Maximum_Torino_Scale', 'Object_Name', 'Object_Classification',\n       'Epoch(TDB)', 'Orbit_Axis(AU)', 'Orbit_Eccentricity',\n       'Orbit_Inclination(deg)', 'Perihelion_Argument(deg)',\n       'Node_Longitude(deg)', 'Mean_Anomoly(deg)',\n       'Perihelion_Distance(AU)', 'Aphelion_Distance(AU)',\n       'Orbital_Period(yr)', 'Minimum_Orbit_Intersection_Distance(AU)',\n       'Orbital_Reference', 'Asteroid_Magnitude']\ndata.columns\n# print(data)","f40039a8":"data1.columns = ['Object_Name', 'Period_Start', 'Period_End', 'Possible_Impacts',\n       'Cumulative_Impact_Probability', 'Asteroid_Velocity',\n       'Asteroid_Magnitude', 'Asteroid_Diameter(km)',\n       'Cumulative_Palermo_Scale', 'Maximum_Palermo_Scale',\n       'Maximum_Torino_Scale']\ndata1.head()","56902a27":"data1.info()","ba4d039b":"data1.Period_End.value_counts()","9d7ce2aa":"data1.Object_Name.head(50).unique()","706eefbe":"object_list = list(data1['Object_Name'].head(50).unique())\n# print(object_list)\n\nPeriod_Start_ratio = []\nfor i in object_list:\n    x = data1[data1['Object_Name']==i]\n    Period_Start_rate = sum(x.Period_Start)\/len(x)\n    Period_Start_ratio.append(Period_Start_rate)\ndata3 = pd.DataFrame({'object_list': object_list,'Period_Start_ratio':Period_Start_ratio})\n\n\n# Duzenlenen datayi yeniden index lememiz gerekiyor ki duzenli gorunsun!!! Bunun icin:\n\nnew_index = (data3['Period_Start_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data3.reindex(new_index)\n","78479c56":"# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['object_list'], y=sorted_data['Period_Start_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('Object Names')\nplt.ylabel('Period Start')\nplt.title('Period Start for Object')","d705d954":"data2.columns = ['Object_Name', 'Object_Classification',\n       'Epoch(TDB)', 'Orbit_Axis(AU)', 'Orbit_Eccentricity',\n       'Orbit_Inclination(deg)', 'Perihelion_Argument(deg)',\n       'Node_Longitude(deg)', 'Mean_Anomoly(deg)',\n       'Perihelion_Distance(AU)', 'Aphelion_Distance(AU)',\n       'Orbital_Period(yr)', 'Minimum_Orbit_Intersection_Distance(AU)',\n       'Orbital_Reference', 'Asteroid_Magnitude']\n\ndata2.head()","ad13ed94":"data2.info()","3f9d6d3f":"data2.Object_Name.value_counts()","c724fc88":"name_count = Counter(data2.Object_Name)\n# print(name_count)\nmost_common_names = name_count.most_common(15)  \nx,y = zip(*most_common_names)\nx,y = list(x),list(y)\n# print(most_common_names)","b69e0554":"# PLOT unu cizelim\n\nplt.figure(figsize=(30,15))\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Object Names')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Object Name')\nprint(most_common_names)","02334b91":"data2.head()","599c0fa7":"Period_End_ratio = []\nfor i in object_list:\n    x = data1[data1['Object_Name']==i]\n    Period_End_rate = sum(x.Period_End)\/len(x)\n    Period_End_ratio.append(Period_End_rate)\ndata4 = pd.DataFrame({'object_list': object_list,'Period_End_ratio': Period_End_ratio})\n\n\n# Duzenlenen datayi yeniden index lememiz gerekiyor ki duzenli gorunsun!!! Bunun icin:\n\nnew_index = (data4['Period_End_ratio'].sort_values(ascending=False)).index.values\nsorted_data2 = data4.reindex(new_index)","7bcbb1a2":"# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['object_list'], y=sorted_data2['Period_End_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('Object Names')\nplt.ylabel('Period End')\nplt.title('Period End for Object')","c840a35a":"data1.head()","7b9786e6":"# print(object_list)\n\nCumulative_Impact_Probability = []\nAsteroid_Velocity = []\nAsteroid_Magnitude = []\n# Asteroid_Diameter = []\nPossible_Impacts = []\nfor i in object_list:\n    x = data1[data1['Object_Name']==i]\n    Cumulative_Impact_Probability.append(sum(x.Cumulative_Impact_Probability)\/len(x))\n    Asteroid_Velocity.append(sum(x.Asteroid_Velocity) \/ len(x))\n    Asteroid_Magnitude.append(sum(x.Asteroid_Magnitude) \/ len(x))\n#     Asteroid_Diameter.append(sum(x.Asteroid_Diameter) \/ len(x))\n    Possible_Impacts.append(sum(x.Possible_Impacts) \/ len(x))","41468c96":"# visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=Cumulative_Impact_Probability,y=object_list,color='green',alpha = 0.5,label='Cumulative_Impact_Probability' )\nsns.barplot(x=Asteroid_Velocity,y=object_list,color='blue',alpha = 0.7,label='Asteroid_Velocity')\nsns.barplot(x=Asteroid_Magnitude,y=object_list,color='cyan',alpha = 0.6,label='Asteroid_Magnitude')\nsns.barplot(x=Possible_Impacts,y=object_list,color='yellow',alpha = 0.6,label='Possible_Impacts')\n# sns.barplot(x=share_hispanic,y=object_list,color='red',alpha = 0.6,label='Hispanic')\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Asteroids', ylabel='Asteroids',title = \"Percentage of Asteroid Names \")","c7009d4e":"data3.head()","a33d40c0":"sorted_data['Period_Start_ratio'] = sorted_data['Period_Start_ratio']\/max( sorted_data['Period_Start_ratio'])\nsorted_data2['Period_End_ratio'] = sorted_data2['Period_End_ratio']\/max( sorted_data2['Period_End_ratio'])\ndata4 = pd.concat([sorted_data,sorted_data2['Period_End_ratio']],axis=1)\ndata4.sort_values('Period_Start_ratio',inplace=True)","e27eb22d":"data4.head()","ae34fc8d":"# visualize\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='object_list',y='Period_Start_ratio',data=data4,color='lime',alpha=0.8)\nsns.pointplot(x='object_list',y='Period_End_ratio',data=data4,color='red',alpha=0.8)\nplt.text(40,0.6,'Period_End ratio',color='red',fontsize = 17,style = 'italic')   # burdaki degerler yazilarin konumlari istedigimiz gibi degistirebiliriz\nplt.text(40,0.55,'Period_Start ratio',color='lime',fontsize = 18,style = 'italic')\nplt.xlabel('Object Names',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('Period_Start ratio  VS  Period_End ratio',fontsize = 20,color='blue')\nplt.grid()","3f33394c":"data4.head()","1f51a383":"g = sns.jointplot(data4.Period_Start_ratio, data4.Period_End_ratio, kind=\"kde\", size=7)\nplt.savefig('graph.png')                          # bu bize sekilleri kaydetmemizi saglar\nplt.show()","63592102":"# you can change parameters of joint plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\n\ng = sns.jointplot(\"Period_Start_ratio\", \"Period_End_ratio\", data=data4,size=5, ratio=3, color=\"r\")","80eb06de":"data2.Object_Name.head(15)","035cde54":"data2.Object_Name.value_counts()","d660f4de":"data2.Object_Name.dropna(inplace = True)\nlabels = data2.Object_Name.value_counts().index\ncolors = ['grey','blue','red','yellow','green','brown']\nexplode = [0,0,0,0,0,0]\nsizes = data2.Object_Name.value_counts().values","0bbc6b58":"# visual\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=None, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Asteroids According to Names',color = 'blue',fontsize = 15)","e69edbfb":"data4.head()","82564715":"sns.lmplot(x=\"Period_Start_ratio\", y=\"Period_End_ratio\", data=data4)\nplt.show()","11675b5d":"sns.kdeplot(data4.Period_Start_ratio, data4.Period_End_ratio, shade=True, cut=3)      # burada 'cut' sekil arasi genisligi verir\nplt.show()","6d805103":"pal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=data4, palette=pal, inner=\"points\")\nplt.show()","2c0e18b3":"data4.corr()","1f6027f0":"f,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(data4.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","2949f447":"data4.head()","c8f918e9":"# pair plot\nsns.pairplot(data4)\nplt.show()","916433d4":"data2.head()","bc5875e0":"sns.countplot(data2.Object_Classification)\n#sns.countplot(kill.manner_of_death)                 # istersek bunuda ayri ayri cizdirebiliriz\nplt.title(\"Amor Asteroid\",color = 'blue',fontsize=15)","513b9e22":"\nObject_Classification = data2.Object_Classification.value_counts()\n#print(Object_Classification)\n\nplt.figure(figsize=(10,7))\nsns.barplot(x=Object_Classification[:7].index,y=Object_Classification[:7].values)\nplt.ylabel('Number of Objects')\nplt.xlabel('Object Names')\nplt.title('Object Names and numbers',color = 'blue',fontsize=15)","9142bc08":"data.corr()","64a2fd9a":"f,ax = plt.subplots(figsize=(10,10))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt='.1f', ax=ax)\nplt.show()         ","2a97848b":"# carpisma yili ilk carpisicaklara gore sirala ve en bastaki 10 unu goster\n\ndata.sort_values('Period_End').head(10)","c9a2454f":"data.Period_Start.plot(kind= 'line', color= 'b', label= 'Period_Start', linewidth= 2, alpha= 0.5, grid= True, linestyle= '-')\ndata.Period_End.plot(color= 'y', label= 'Period_End', linewidth= 2, alpha= 0.5, grid= True, linestyle= '-.')\nplt.legend(loc= 'upper right')          #legend= puts label into plot\nplt.xlabel('x axis')                    #label= name of label\nplt.ylabel('y axis')                    #label= name of label\nplt.title('Line Plot')                  #title= title of plot\nplt.show()","f040683a":"# Korelasyon matrix\n\nf = plt.figure(figsize=(19, 15))\nplt.matshow(data.corr(), fignum=f.number)\nplt.xticks(range(data.shape[1]), data.columns, fontsize=14, rotation=90)\nplt.yticks(range(data.shape[1]), data.columns, fontsize=14)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14)\nplt.title('Correlation Matrix', fontsize=19);","f9cd9ba8":"data.plot(kind = 'scatter', x = 'Period_Start', y= 'Period_End', alpha = 0.5, color = 'red')\nplt.xlabel('Period_Start')\nplt.ylabel('Period_End')\nplt.title('Object_Name & Period_End Scatter Plot')\nplt.show()","f089f9cb":"data.Period_End.plot(kind = 'hist',bins = 70, figsize = (12,12))\nplt.show()","13f27ca3":"data.Period_End.plot(kind = 'hist',bins = 50)\nplt.clf()","2b537d29":"series = data['Period_Start']                           \nprint(type(series))     \ndata_frame = data[['Period_End']]  \nprint(type(data_frame))","e062ec02":"x = data['Period_End'] < 2030                      # Defans de\u011feri 200'den b\u00fcy\u00fck olan verileri x de\u011fi\u015fkenine at\u0131yoruz.\nprint(x)                                       # bu sekilde true false olanlarin hepsini gosterir\ndata[x]                                        # sinirlama yapilan hangi pokemonlar ve ozelliklerini verir","84a0b17f":"data[np.logical_and(data['Period_Start'] > 2010, data['Period_End'] < 2030 )] ","4ab9bc1c":"data[(data['Period_Start'] > 2010) & (data['Period_End'] < 2030 )]","0ffb7647":"# lets return pokemon csv and make one more list comprehension example\n# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\nthreshold = sum(data.Period_End)\/len(data.Period_End)\ndata[\"close_level\"] = [\"far away\" if i > threshold else \"close\" for i in data.Period_End]\ndata.loc[:10,[\"close_level\",\"Period_End\"]]","6cea8c69":"data.info()\n\n# ciktidan anlasilacagi uzere bos data mevcut degildir. Bos data mevcut olsaydi pokemonda yaptigimiz gibi filtrelememiz gerekirdi","1e088918":"data.describe()","f44fa9b1":"# Bos datamiz olmadigi icin burasi yukardakinin aynisini verir\n\ndata.dropna(inplace = True)  \ndata.describe()","61f31c28":"# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata.boxplot(column='Period_End',by = 'Asteroid_Diameter(km)')\n\n# burada cok fazla asteroid old icin yakindan bakmak gerekir ama asagida yakin zamanli carpisacak olanlari secildi orada daha net anlasilabilir","4efea43f":"\n\ndata_new = data.head(10)    # I only take 5 rows into new data\ndata_new\n\ndata_new.boxplot(column='Period_End',by = 'Asteroid_Diameter(km)')","723da725":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'Asteroid_Velocity', value_vars= ['Period_Start','Period_End'])\nmelted\n\n","4402629c":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'Asteroid_Velocity', columns = 'variable',values='value')","fc07c7ac":"# Firstly lets create 2 data frame\ndata1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","e020b36e":"data3 = data['Asteroid_Velocity'].head()\ndata1 = data['Period_Start'].head()\ndata2= data['Period_End'].head()\nconc_data_col = pd.concat([data3,data1,data2],axis =1) # axis = 0 : adds dataframes in row\nconc_data_col","31697c6e":"data.dtypes","a5c7c8b9":"# Count Plot","3761d622":"# Heatmap","6329836c":"# Lm Plot cizim","cbd90db0":"# Violin Plot cizimi","79458a8c":"# Kde Plot cizimi","fcd81dbc":"# Pair Plot","1dcb03b1":" # Pie Chart (Pasta dilimi)","e0e32fa8":"Iki sortedlanmis datayi DataFrame yaptik bundan sonra gorsellestirelim."}}