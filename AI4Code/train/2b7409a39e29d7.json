{"cell_type":{"24c609c4":"code","769c2b4c":"code","b3d2cf1a":"code","afa7d1fd":"code","78f16ad2":"code","e5f11504":"code","af0b3207":"code","a224c83b":"code","557030ec":"code","712a5f01":"code","c7b58b09":"code","4b558477":"code","cb7af860":"code","fec1e8f4":"code","54081a09":"code","bb84030e":"code","e23cdf1f":"code","6c425721":"markdown","071edccd":"markdown","907f2c43":"markdown","260456b6":"markdown","3d7e7110":"markdown","f749de73":"markdown","d57250fb":"markdown","86cdaaa7":"markdown","cbfe4b24":"markdown","d4c25648":"markdown","fc21f7dd":"markdown"},"source":{"24c609c4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os","769c2b4c":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ndataset=pd.read_csv('\/kaggle\/input\/social-network-ads\/Social_Network_Ads.csv')\ndataset.head(5)","b3d2cf1a":"dataset=dataset.iloc[:,2:]","afa7d1fd":"x=dataset.iloc[:,:-1].values\ny=dataset.iloc[:,-1].values","78f16ad2":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0 )","e5f11504":"x_train[3]\n","af0b3207":"x_test[3]","a224c83b":"y_train[3]","557030ec":"y_test[3]","712a5f01":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nx_train=sc.fit_transform(x_train)\nx_test=sc.transform(x_test)","c7b58b09":"from sklearn.naive_bayes import GaussianNB\nclassifier=GaussianNB()\nclassifier.fit(x_train,y_train)","4b558477":"classifier.predict(sc.transform([[19, 19000]]))","cb7af860":"y_pred = classifier.predict(x_test)\nnp.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1)\n","fec1e8f4":"from sklearn.metrics import confusion_matrix, accuracy_score\nconfusion_matrix(y_test, y_pred)","54081a09":"accuracy_score(y_test, y_pred)","bb84030e":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(x_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Naive Bayes (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","e23cdf1f":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(x_test), y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Naive Bayes (Test set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","6c425721":"# Naive Bayes","071edccd":"## Training the Naive Bayes model on the Training set","907f2c43":"## Feature Scaling","260456b6":"## Importing the libraries","3d7e7110":"## Predicting the Test set results","f749de73":"## Visualising the Test set results","d57250fb":"## Importing the dataset","86cdaaa7":"## Making the Confusion Matrix","cbfe4b24":"## Visualising the Training set results","d4c25648":"## Predicting a new result","fc21f7dd":"## Splitting the dataset into the Training set and Test set"}}