{"cell_type":{"5a32272f":"code","0ca2266e":"code","e1556fad":"code","b25b75d5":"code","60b5914d":"code","af29708e":"code","8b9ba115":"code","e9ce4955":"code","130a6ac6":"code","1773557f":"code","a9c49733":"code","2e53316b":"code","953c2069":"code","d5676257":"code","60ea87d5":"code","2d82dcc2":"code","77a0a519":"code","e731a2e2":"code","fc721a49":"code","20dd37f8":"code","9f240d0e":"code","047cdcc6":"code","ca6be5d0":"code","84912f0e":"code","43809761":"code","fc6f3864":"code","41d9682c":"code","123a3b34":"code","ec81259b":"code","ac8e3587":"code","11147d6a":"code","0e55f111":"markdown","7f2b3006":"markdown","3a0ec8b2":"markdown","d3dbb677":"markdown","933fe8f1":"markdown"},"source":{"5a32272f":"import pandas as pd\nimport numpy as np\nimport os\nimport shutil\nimport glob\nimport matplotlib.pyplot as plt\n!pip install openpyxl","0ca2266e":"covid_imgs = pd.read_excel(\"..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/COVID.metadata.xlsx\")\ncovid_imgs.head(2)","e1556fad":"opacity_images = pd.read_excel(\"..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Lung_Opacity.metadata.xlsx\")\nopacity_images.head(2)","b25b75d5":"pneumonia_images = pd.read_excel(\"..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Viral Pneumonia.metadata.xlsx\")\npneumonia_images.head(2)","60b5914d":"normal_images = pd.read_excel(\"..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Normal.metadata.xlsx\")\nnormal_images.head(2)","af29708e":"ROOT_DIR = \"..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\"\nimgs = ['COVID','Lung_Opacity','Normal','Viral Pneumonia']\n\nNEW_DIR = \"\/kaggle\/working\/augmented\/\"\n#..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/COVID","8b9ba115":"if not os.path.exists(NEW_DIR):\n  os.mkdir(NEW_DIR)\n\n  for i in imgs:\n    org_dir = os.path.join(ROOT_DIR, i+\"\/\")\n    \n    for imgfile in glob.iglob(os.path.join(org_dir, \"*.png\")):\n      shutil.copy(imgfile, NEW_DIR)\n      \nelse:\n  print(\"Already Exist\")","e9ce4955":"# lets visualise the number of images in each category\ncounter = {'COVID':0,'Lung_Opacity':0,'Normal':0,'Viral Pneumonia':0}\n\nfor image in imgs:\n  for count in glob.iglob(NEW_DIR+image+\"*\"):\n    counter[image] += 1\n\n# the number of images i have in each class\ncounter","130a6ac6":"plt.figure(figsize=(10,5))\nplt.bar(x = counter.keys(), height= counter.values())\nplt.show()","1773557f":"if not os.path.exists(NEW_DIR+\"train_test_split\/\"):\n\n  os.makedirs(NEW_DIR+\"train_test_split\/\")\n\n  os.makedirs(NEW_DIR+\"train_test_split\/train\/Normal\")\n  os.makedirs(NEW_DIR+\"train_test_split\/train\/Covid\")\n\n  os.makedirs(NEW_DIR+\"train_test_split\/test\/Normal\")\n  os.makedirs(NEW_DIR+\"train_test_split\/test\/Covid\")\n\n  os.makedirs(NEW_DIR+\"train_test_split\/validation\/Normal\")\n  os.makedirs(NEW_DIR+\"train_test_split\/validation\/Covid\")\n\n\n  # Train Data\n  for i in np.random.choice(replace= False , size= 3000 , a = glob.glob(NEW_DIR+imgs[0]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/train\/Covid\" )\n    os.remove(i)\n\n  for i in np.random.choice(replace= False , size= 3900 , a = glob.glob(NEW_DIR+imgs[2]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/train\/Normal\" )\n    os.remove(i)\n\n  for i in np.random.choice(replace= False , size= 900 , a = glob.glob(NEW_DIR+imgs[3]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/train\/Covid\" )\n    os.remove(i)\n\n  # Validation Data\n  for i in np.random.choice(replace= False , size= 308 , a = glob.glob(NEW_DIR+imgs[0]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/validation\/Covid\" )\n    os.remove(i)\n\n  for i in np.random.choice(replace= False , size= 500 , a = glob.glob(NEW_DIR+imgs[2]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/validation\/Normal\" )\n    os.remove(i)\n\n  for i in np.random.choice(replace= False , size= 200 , a = glob.glob(NEW_DIR+imgs[3]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/validation\/Covid\" )\n    os.remove(i)\n\n  # Test Data\n  for i in np.random.choice(replace= False , size= 300 , a = glob.glob(NEW_DIR+imgs[0]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/test\/Covid\" )\n    os.remove(i)\n\n  for i in np.random.choice(replace= False , size= 300 , a = glob.glob(NEW_DIR+imgs[2]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/test\/Normal\" )\n    os.remove(i)\n\n  for i in np.random.choice(replace= False , size= 200 , a = glob.glob(NEW_DIR+imgs[3]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/test\/Covid\" )\n    os.remove(i)","a9c49733":"train_path  = \"\/kaggle\/working\/augmented\/train_test_split\/train\"\nvalid_path  = \"\/kaggle\/working\/augmented\/train_test_split\/validation\"\ntest_path   = \"\/kaggle\/working\/augmented\/train_test_split\/test\"","2e53316b":"# Make imports\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.resnet50 import preprocess_input, ResNet50\nfrom keras.models import Model\nfrom keras.layers import Dense, MaxPool2D, Conv2D\nimport keras","953c2069":"train_data_gen = ImageDataGenerator(preprocessing_function=preprocess_input,\n                                    zoom_range=0.2,\n                                    horizontal_flip=True,\n                                    shear_range=0.2)\ntrain = train_data_gen.flow_from_directory(directory=train_path, target_size=(224,224))","d5676257":"validattion_data_gen = ImageDataGenerator(preprocessing_function=preprocess_input)\n\nvalid = validattion_data_gen.flow_from_directory(directory=valid_path, target_size=(224,224))","60ea87d5":"test_data_gen = ImageDataGenerator(preprocessing_function=preprocess_input)\n\ntest = test_data_gen.flow_from_directory(directory=test_path, target_size=(224,224), shuffle=False)","2d82dcc2":"# Covid +ve X-Ray is represented by 0 and Normal is represented by 1\n\nclass_type = {0:'Covid',  1 : 'Normal'}","77a0a519":"t_img, label = train.next()","e731a2e2":"# function when called will plot the images\n\ndef plotImages(img_arr, label):\n  \"\"\"\n  input  :- images array \n  output :- plots the images \n  \"\"\"\n  for im,l in zip(img_arr, label):\n    plt.figure(figsize=(5,5))\n    plt.imshow(im, cmap = 'gray')\n    plt.title(im.shape)\n    plt.axis = False\n    plt.show()","fc721a49":"# function call to plot the images\n\nplotImages(t_img, label)","20dd37f8":"import tensorflow as tf\nimport tensorflow\nfrom tensorflow import keras\nfrom keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.layers import Flatten, Dense, MaxPool2D, Dropout","9f240d0e":"res  = ResNet50( input_shape=(224,224,3), include_top=False)","047cdcc6":"# We won't train all parameters again\nfor layer in res.layers:\n  layer.trainable = False","ca6be5d0":"x = Flatten()(res.output)\nout = Dense(units=2, activation='sigmoid', name='predictions')(x)\n\n\n# Creating our model\nmodel = Model(inputs=res.input, outputs=out)","84912f0e":"model.summary()","43809761":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","fc6f3864":"ACCURACY_THRESHOLD = 0.95\nclass myCallback(tf.keras.callbacks.Callback): \n    def on_epoch_end(self, epoch, logs={}): \n        if(logs.get('accuracy') > ACCURACY_THRESHOLD):   \n          print(\"\\nReached %2.2f%% accuracy, so stopping training!!\" %(ACCURACY_THRESHOLD*100))   \n          self.model.stop_training = True\n\nes  = myCallback()","41d9682c":"hist = model.fit(train, steps_per_epoch=10, epochs=30, validation_data=valid, validation_steps=16, callbacks=[es])","123a3b34":"model.save(\"covid-resnet50\")","ec81259b":"# checking out the accuracy of our model \n\nacc = model.evaluate_generator(generator= test)[1] \n\nprint(f\"The accuracy of your model is = {acc * 100} %\")","ac8e3587":"\nfrom keras.preprocessing import image\n\ndef get_img_array(img_path):\n  \"\"\"\n  Input : Takes in image path as input \n  Output : Gives out Pre-Processed image\n  \"\"\"\n  path = img_path\n  img = image.load_img(path, target_size=(224,224,3))\n  img = image.img_to_array(img)\n  img = np.expand_dims(img , axis= 0 )\n  \n  return img","11147d6a":"\n# path for that new image. ( you can take it either from google or any other scource)\n\npath = \"..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/COVID\/COVID-1003.png\"     # you can add any image path\n\n#predictions: path:- provide any image from google or provide image from all image folder\nimg = get_img_array(path)\n\nres = class_type[np.argmax(model.predict(img))]\nprint(f\"The given X-Ray image is of type = {res}\")\nprint()\nprint(f\"The chances of image being Covid is : {model.predict(img)[0][0]*100} percent\")\nprint()\nprint(f\"The chances of image being Normal is : {model.predict(img)[0][1]*100} percent\")\n\n\n# to display the image  \nplt.imshow(img[0]\/255, cmap = \"gray\")\nplt.title(\"input image\")\nplt.show()","0e55f111":"# Visualize the data","7f2b3006":"# Working with Images","3a0ec8b2":"# Detecting Covid Status","d3dbb677":"# Resnet50 as the pretrained base","933fe8f1":"# Working on the files"}}