{"cell_type":{"446c52f2":"code","491cec5c":"code","ef543d53":"code","4e4a9bcc":"code","b0b8ecb8":"code","1320c7a5":"code","21db7fe0":"code","9107e8f1":"code","8d405e2b":"code","bd7f8d10":"code","4be84364":"code","b32d9909":"code","294e8b61":"code","d7cfeb51":"code","e8b25271":"code","5da511a5":"code","f26c7b64":"markdown","3c10d087":"markdown","0075c398":"markdown","147e6d62":"markdown","124dee67":"markdown","0d5d7885":"markdown"},"source":{"446c52f2":"import numpy as np\nimport os,math,random\nimport pandas as pd \nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pydicom as pyd\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nfrom skimage import exposure\n\nimport warnings\nwarnings.filterwarnings('ignore')","491cec5c":"def read_xray(path, voi_lut = True, fix_monochrome = True,equalize_hist=True):\n    dicom = pyd.read_file(path)\n    \n    # VOI LUT (if available by DICOM device) is used to transform raw DICOM data to \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n               \n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n    \n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    \n    if equalize_hist:\n        data=exposure.equalize_hist(data)\n        \n    return data","ef543d53":"def show_sample_images(df,directory,n,cmap='gray'):\n    plt.subplots(math.floor(n\/2),2,figsize=(16,math.floor(n\/2)*8))\n    \n    dfs=df.sample(n)\n    \n    sample_ids=dfs['image_id']\n    sample_class=list(dfs['class_name'])\n    for i,image_id in enumerate(sample_ids):\n        ax=plt.subplot(math.floor(n\/2),2,i+1)\n        image=read_xray(os.path.join(directory,f'{image_id}.dicom'))\n        ax.imshow(image,cmap=cmap)\n        plt.title(f'{sample_class[i]}')\n        \n        #bounding boxes:\n        w=dfs.iloc[i]['x_max']-dfs.iloc[i]['x_min']\n        h=dfs.iloc[i]['y_max']-dfs.iloc[i]['y_min']\n        x_min,y_min=dfs.iloc[i]['x_min'],dfs.iloc[i]['y_min']\n        \n        p=mpl.patches.Rectangle((x_min,y_min),w,h,ec='r',lw=1,fc='none')\n        ax.add_patch(p)\n         \n    plt.tight_layout()\n    plt.axis('off')\n    plt.show()  ","4e4a9bcc":"cwd='.\/'\ntrain_dir='..\/input\/vinbigdata-chest-xray-abnormalities-detection\/train'\ntest_dir='..\/input\/vinbigdata-chest-xray-abnormalities-detection\/test'\n\ntrain=pd.read_csv('..\/input\/vinbigdata-chest-xray-abnormalities-detection\/train.csv')\nsample_sub=pd.read_csv('..\/input\/vinbigdata-chest-xray-abnormalities-detection\/sample_submission.csv')\ntrain.head()","b0b8ecb8":"show_sample_images(df=train,directory=train_dir,n=40,cmap='gray')","1320c7a5":"fig,ax=plt.subplots(figsize=(16,8))\nsns.countplot(train['class_name'])\nplt.setp(ax.get_xticklabels(),rotation=90)\nplt.title('Class Balance')","21db7fe0":"print('T\u1ed5ng s\u1ed1 h\u00ecnh trong trainset: {} '.format(len(train)))\nprint('S\u1ed1 h\u00ecnh \u1ea3nh \u0111\u1ecdc nh\u1ea5t: {} '.format(train['image_id'].nunique()))","9107e8f1":"print('S\u1ed1 l\u01b0\u1ee3ng ch\u00fa th\u00edch trung b\u00ecnh tr\u00ean m\u1ed7i h\u00ecnh \u1ea3nh: {} '.format(math.ceil(67900\/15000)))","8d405e2b":"def plot_image(img_id,train_dir,df):\n    fig,ax=plt.subplots(figsize=(10,10))\n    img=read_xray(os.path.join(train_dir,f'{img_id}.dicom'))\n    plt.imshow(img,cmap='gray')\n\n    #annotations:\n    \n    dfs=df[df['image_id']==img_id]\n    \n    #all annotations for the image\n    for i in range(len(dfs)):\n        \n         #bounding boxes:\n        #width and height\n        w=dfs.iloc[i]['x_max']-dfs.iloc[i]['x_min']\n        h=dfs.iloc[i]['y_max']-dfs.iloc[i]['y_min']\n        \n        #min,max\n        x_min,y_min=dfs.iloc[i]['x_min'],dfs.iloc[i]['y_min']\n        x_max,y_max=dfs.iloc[i]['x_max'],dfs.iloc[i]['y_max']\n        \n        p=mpl.patches.Rectangle((x_min,y_min),w,h,ec='r',lw=1,fc='none')\n        ax.add_patch(p)\n        ax.annotate('{}'.format(dfs.iloc[i]['class_name']), xy=(x_min+50,y_max+50),\n                    color='blue',horizontalalignment='right')\n    \n    \n    plt.axis('off')\n    plt.show()\n    \nplot_image('9a5094b2563a1ef3ff50dc5c7ff71345',train_dir,train) ","bd7f8d10":"def random_id(df):\n    img_id=random.choice(df['image_id'])\n    return img_id\n\nplot_image(random_id(train),train_dir,train)   ","4be84364":"plot_image(random_id(train),train_dir,train)   ","b32d9909":"plot_image(random_id(train),train_dir,train)   ","294e8b61":"plot_image(random_id(train),train_dir,train)   ","d7cfeb51":"plot_image(random_id(train),train_dir,train)   ","e8b25271":"plot_image(random_id(train),train_dir,train)   ","5da511a5":"plot_image(random_id(train),train_dir,train)  ","f26c7b64":"# **\u0110\u01b0\u1eddng d\u1eabn DATA**","3c10d087":"**Ng\u1eabu nhi\u00ean m\u1ed9t s\u1ed1 v\u00ed d\u1ee5**","0075c398":"**V\u1ebd h\u00ecnh \u1ea3nh v\u1edbi t\u1ea5t c\u1ea3 ch\u00fa th\u00edch**","147e6d62":"# **S\u1ed1 h\u00ecnh trong Trainset**","124dee67":"#    **Th\u00eam th\u01b0 vi\u1ec7n**","0d5d7885":"# **\u0110\u1ecdc XRAY**"}}