{"cell_type":{"f065dd89":"code","fa134684":"code","aa8a114d":"code","d554c28f":"code","6c292bf4":"code","bbf4cc58":"code","6b696cb9":"code","d3c2b6b6":"code","324a8c64":"code","f1d57b99":"code","ad33a169":"code","e777fbbe":"code","0eaa152f":"code","1d14a491":"code","0bec4509":"code","7eb7abb2":"code","d312b2ce":"code","bafc8331":"code","868a92c0":"code","19ddc152":"code","b3016701":"code","7e99bf2a":"code","3ed344c9":"markdown","f0a05a3d":"markdown","34777673":"markdown","106fbefc":"markdown","0aa74697":"markdown"},"source":{"f065dd89":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas import DataFrame as df\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa134684":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntraining_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\n","aa8a114d":"test_data.info()\ntraining_data.info()\ntraining_data.head()","d554c28f":"#fill fare missing value from test\ntest_data['Fare'] = test_data['Fare'].fillna(test_data['Fare'].mean())\n\n\n#fill Embarked missing value from Training data\ntraining_data['Embarked'] =  training_data['Embarked'].fillna('S')","6c292bf4":"\n# #Find Avarage age of female and male in Training data\n# averageAge_female =  training_data['Age'].loc[training_data['Sex'] == 'female'].mean()\n# averageAge_male =  training_data['Age'].loc[training_data['Sex'] == 'male'].mean()\n\n# # Fill nall values\n# training_data['Age'].loc[training_data['Sex'] == 'male'] = training_data['Age'].loc[training_data['Sex'] == 'male'].fillna(averageAge_male)\n# training_data['Age'].loc[training_data['Sex'] == 'female'] = training_data['Age'].loc[training_data['Sex'] == 'female'].fillna(averageAge_female)\n\n# #Find Avarage age of female and male in Test data\n# averageAge_female_test =  test_data['Age'].loc[test_data['Sex'] == 'female'].mean()\n# averageAge_male_test =  test_data['Age'].loc[test_data['Sex'] == 'male'].mean()\n\n# # Fill nall values\n# test_data['Age'].loc[test_data['Sex'] == 'male'] = test_data['Age'].loc[test_data['Sex'] == 'male'].fillna(averageAge_male_test)\n# test_data['Age'].loc[test_data['Sex'] == 'female'] = test_data['Age'].loc[test_data['Sex'] == 'female'].fillna(averageAge_female_test)\n\n# training_data.info()\n# test_data.info()\n\ndf_all = pd.concat([training_data, test_data] , sort=True).reset_index(drop=True)\nage_by_pclass_sex = df_all.groupby(['Sex', 'Pclass']).median()['Age']\n\nfor pclass in range(1, 4):\n    for sex in ['female', 'male']:\n        print('Median age of Pclass {} {}s: {}'.format(pclass, sex, age_by_pclass_sex[sex][pclass]))\nprint('Median age of all passengers: {}'.format(df_all['Age'].median()))\n\n# Filling the missing values in Age with the medians of Sex and Pclass groups\ntest_data['Age'] = test_data.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))\ntraining_data['Age'] = training_data.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))","bbf4cc58":"training_data[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","6b696cb9":"training_data[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived')","d3c2b6b6":"training_data[['Parch', 'Survived']].groupby(['Parch'],as_index=False).mean().sort_values(by='Survived')","324a8c64":"training_data[['Pclass', 'Survived']].groupby('Pclass', as_index=False).mean().sort_values(by = 'Survived')\n","f1d57b99":"training_data[['Embarked', 'Survived']].groupby('Embarked', as_index= False).mean().sort_values(by='Survived')","ad33a169":"training_data[['Embarked', 'Fare']].groupby('Embarked').mean().sort_values(by = 'Embarked')\n","e777fbbe":"training_data[['Embarked', 'Pclass']].groupby('Embarked', as_index = False).mean().sort_values(by = 'Embarked')","0eaa152f":"#changing Sex to 1 and 0 \ntraining_data['Sex'] = training_data['Sex'].map( {'female': 0, 'male': 1})\ntest_data['Sex'] = test_data['Sex'].map({'female' : 0, 'male': 1})\n\n#changing Embarked \ntraining_data['Embarked'] = training_data['Embarked'].map({'S' : 0 , 'C' : 1, 'Q' : 2})\ntest_data['Embarked'] = test_data['Embarked'].map({'S' : 0 , 'C' : 1, 'Q' : 2})\n\n\n#New Feature creating- Family Size\ntraining_data['FamilySize'] = training_data['SibSp'] + training_data['Parch'] + 1\ntest_data['FamilySize'] = test_data['SibSp'] + test_data['Parch'] + 1\n\n\n# normlize the Fare value by max value \nmaxtrain = training_data['Fare'].max()\ntraining_data['Fare'] = training_data['Fare']\/ (maxtrain)\n\nmaxtest = test_data['Fare'].max()\ntest_data['Fare'] = test_data['Fare']\/ (maxtest)\ntraining_data.head(20)\n\n\n# New Feature creating -Is Alone\ntraining_data['isAlone']= [1 if i<2 else 0 for i in training_data.FamilySize]\ntest_data['IsAlone'] = [1 if i<2 else 0 for i in test_data.FamilySize]","1d14a491":"training_data['Title'] = training_data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntest_data['Title'] = test_data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n\n\ntraining_data['Title'] = training_data['Title'].replace(['Dr','Capt', 'Col', 'Countess', 'Don', 'Jonkheer', 'Lady',\n'Major','Sir'], 'Rare')\ntest_data['Title']= test_data['Title'].replace(['Dr','Capt', 'Col', 'Countess','Don','Jonkheer','Lady',\n'Major','Sir'], 'Rare')\n\ntraining_data['Title'] = training_data['Title'].replace('Rev', 'Mr')\ntraining_data['Title'] = training_data['Title'].replace('Mme', 'Mrs')\ntraining_data['Title'] = training_data['Title'].replace(['Mlle','Ms'], 'Miss')\n\n\ntest_data['Title'] = test_data['Title'].replace('Rev', 'Mr')\ntest_data['Title'] = test_data['Title'].replace('Mme', 'Mrs')\ntest_data['Title'] = test_data['Title'].replace(['Mlle','Ms'], 'Miss')\n\n\ntraining_data[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()\ntitlemap = {'Master': 1 ,'Mr' : 2 , 'Mrs' : 3, 'Miss' : 4, 'Rare': 5}\n\n\ntraining_data['Title'] = training_data['Title'].map(titlemap)\ntest_data['Title'] = test_data['Title'].map(titlemap)\ntraining_data.head()\n\n","0bec4509":"dropcolumn= ['Cabin','Ticket', 'Name','Parch', 'SibSp', 'FamilySize']\ntraining_data = training_data.drop(dropcolumn, axis=1)\ntest_data = test_data.drop(dropcolumn, axis=1)\n\ntraining_data.head()","7eb7abb2":"\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14,12))\nplt.title('Correlation of Features', y=1.05, size=15)\nsns.heatmap(training_data.astype(float).corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)","d312b2ce":"test_data['Title'] = test_data['Title'].fillna(5)","bafc8331":"train = training_data.drop(['Survived','PassengerId'],  axis = 1)\nlable = training_data['Survived']\n\nx_train, x_val, y_train, y_val = train_test_split(train, lable, test_size = 0.2, random_state = 0)","868a92c0":"from sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier(200 ,max_depth = 10)\nrandomforest.fit(x_train, y_train)\ny_pred = randomforest.predict(x_val)\nacc_randomforest = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_randomforest)\n\nx_train.head()","19ddc152":"from sklearn.naive_bayes import GaussianNB\n\ngaussian = GaussianNB()\ngaussian.fit(x_train, y_train)\ny_pred = gaussian.predict(x_val)\nacc_gaussian = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_gaussian)","b3016701":"models = pd.DataFrame({\n    'Model': ['Random Forest', 'Naive Bayes'],\n    'Score': [acc_randomforest, acc_gaussian]})\nmodels.sort_values(by='Score', ascending=False)","7e99bf2a":"#set id as PassengerId and predict survival \nid = test_data['PassengerId']\npredictions = randomforest.predict(test_data.drop('PassengerId', axis=1))\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : id, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)","3ed344c9":"# **Fill in the missing data**\nTest data:\n* fare- missing only one value so we will just fill with the mean value \n* Embarked - only 3 values missing- fill in with the most commen option 'S'\n\nAge - we find the mean value of female and male in test and in training, and we fill in the missing values.\n","f0a05a3d":"Now we need to fill in the missing values, lets see what we are missing","34777673":"# Features Engineering\n* we will change sex into o and 1.\n* Same goes to changing Embarked\n* Inspierd by other solutions we will creat a new feature called familyS wich will indicate the family size of every passenger.\n* We will extract the title from the name.  ","106fbefc":"The model","0aa74697":"# **Feeling the Data:**\n\n* We can See That the 'Cabin' label has many empty values in the test and training data, that's why we would drop this column.\n\n* We will also drop 'PassengerId' as there is no useful information there.\n\n* I would like to understand the correlation of different labels to the survival label. I assume that labels like 'age', 'sex' might have a high correlation, maybe also 'Embarked' could correlate to survival, we would check.\n\n* Alphanumeric data: 'Ticket', 'Sex'.\n* Numeric data: 'Survived', 'Pclass' , 'SibSp', 'Parch', 'Age', 'Fare'.\n* Alfabetical data: 'Name', 'Embarked'"}}