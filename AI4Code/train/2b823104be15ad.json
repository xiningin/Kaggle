{"cell_type":{"058aaf63":"code","44b0cce9":"code","52445703":"code","3fbd9589":"code","efb38c3f":"code","0dca4085":"code","6eccc250":"code","39e85754":"code","967e9760":"code","fc4fda47":"code","b9a467de":"code","c888a7cd":"code","a9562099":"code","4ad4b1a6":"code","221ead50":"code","363ac724":"code","908295f9":"code","d4f0d9df":"code","033b133b":"code","da763e55":"code","5ebeccc7":"code","d03bb06a":"code","47c0009d":"code","c5d462ae":"code","73919f8d":"code","a11b8672":"code","da234995":"code","e772ae0f":"code","90470bda":"code","b51ac6f1":"code","27faa328":"code","9100d4c9":"code","d8d320a9":"code","9586e47e":"code","3bd24def":"code","ce93616a":"code","7300d14e":"code","52e5be61":"code","1c9ed8dc":"code","25f4a7c5":"markdown","657b484c":"markdown","56b84e8a":"markdown","c866ad7c":"markdown","8b68202e":"markdown","5fabc158":"markdown","ea918b6e":"markdown","ab39305d":"markdown","124ffba3":"markdown","2dc76318":"markdown","8473de61":"markdown","5dbf8acd":"markdown","e02c625a":"markdown","9f18439e":"markdown"},"source":{"058aaf63":"# for some basic operations\nimport numpy as np\nimport pandas as pd\n\n# for visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# for providing path\nimport os\nprint(os.listdir('..\/input\/'))","44b0cce9":"# reading the data\ndata = pd.read_csv('..\/input\/StudentsPerformance.csv')\n\n# getting the shape of the data\nprint(data.shape)\n","52445703":"# looking at the head of the data\n\ndata.head()","3fbd9589":"# describing the dataset\n\ndata.describe()","efb38c3f":"# checking if the dataset contains any null values\n\ndata.isnull().sum().sum()","0dca4085":"# visualising the number of male and female in the dataset\n\nplt.rcParams['figure.figsize'] = (15, 9)\nplt.style.use('_classic_test')\nsns.countplot(data['gender'], palette = 'bone')\nplt.title('Comparison of Males and Females', fontweight = 400)\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.show()","6eccc250":"# visualizing the different groups in the dataset\n\nplt.rcParams['figure.figsize'] = (15, 9)\nplt.style.use('ggplot')\n\nsns.countplot(data['race\/ethnicity'], palette = 'pink')\nplt.title('Comparison of various groups', fontweight = 30, fontsize = 20)\nplt.xlabel('Groups')\nplt.ylabel('count')\nplt.show()","39e85754":"# visualizing the differnt parental education levels\n\nplt.rcParams['figure.figsize'] = (15, 9)\nplt.style.use('fivethirtyeight')\n\nsns.countplot(data['parental level of education'], palette = 'Blues')\nplt.title('Comparison of Parental Education', fontweight = 30, fontsize = 20)\nplt.xlabel('Degree')\nplt.ylabel('count')\nplt.show()","967e9760":"# visualizing different types of lunch \n\nplt.rcParams['figure.figsize'] = (15, 9)\nplt.style.use('seaborn-talk')\n\nsns.countplot(data['lunch'], palette = 'PuBu')\nplt.title('Comparison of different types of lunch', fontweight = 30, fontsize = 20)\nplt.xlabel('types of lunch')\nplt.ylabel('count')\nplt.show()","fc4fda47":"# visualizing maths score\n\nplt.rcParams['figure.figsize'] = (15, 9)\nplt.style.use('tableau-colorblind10')\n\nsns.countplot(data['math score'], palette = 'BuPu')\nplt.title('Comparison of math scores', fontweight = 30, fontsize = 20)\nplt.xlabel('score')\nplt.ylabel('count')\nplt.xticks(rotation = 90)\nplt.show()","b9a467de":"## visualizing reading score\n\nplt.rcParams['figure.figsize'] = (15, 9)\nplt.style.use('tableau-colorblind10')\n\nsns.countplot(data['reading score'], palette = 'RdPu')\nplt.title('Comparison of Reading scores', fontweight = 30, fontsize = 20)\nplt.xlabel('score')\nplt.ylabel('count')\nplt.xticks(rotation = 90)\nplt.show()","c888a7cd":"# visualizing writing score\n\nplt.rcParams['figure.figsize'] = (15, 9)\nplt.style.use('tableau-colorblind10')\n\nsns.countplot(data['writing score'], palette = 'prism')\nplt.title('Comparison of Writing scores', fontweight = 30, fontsize = 20)\nplt.xlabel('score')\nplt.ylabel('count')\nplt.xticks(rotation = 90)\nplt.show()","a9562099":"# gender vs race\/etnicity \n\nplt.rcParams['figure.figsize'] = (15, 9)\nx = pd.crosstab(data['gender'], data['race\/ethnicity'])\nx.div(x.sum(1).astype(float), axis = 0).plot(kind = 'bar', stacked = False)\nplt.title('Gender vs Race', fontweight = 30, fontsize = 20)\nplt.show()","4ad4b1a6":"# comparison of race\/ethnicity and parental level of education\n\nplt.rcParams['figure.figsize'] = (15, 9)\nx = pd.crosstab(data['race\/ethnicity'], data['parental level of education'])\nx.div(x.sum(1).astype(float), axis = 0).plot(kind = 'bar', stacked = 'True')\nplt.title('Race vs Parental Education', fontweight = 30, fontsize = 20)\nplt.show()","221ead50":"# comparison of parental degree and test course\n\nplt.rcParams['figure.figsize'] = (15, 9)\nsns.countplot(x = 'parental level of education', data = data, hue = 'test preparation course', palette = 'dark')\nplt.title('Parental Education vs Test Preparation Course', fontweight = 30, fontsize = 20)\nplt.show()","363ac724":"# comparison of race\/ethnicity and test preparation course\n\nsns.countplot(x = 'race\/ethnicity', data = data,  hue = 'test preparation course', palette = 'bright')\nplt.title('Race vs Test Preparion', fontweight = 30, fontsize = 20)\nplt.show()","908295f9":"# feature engineering on the data to visualize and solve the dataset more accurately\n\n# setting a passing mark for the students to pass on the three subjects individually\npassmarks = 40\n\n# creating a new column pass_math, this column will tell us whether the students are pass or fail\ndata['pass_math'] = np.where(data['math score']< passmarks, 'Fail', 'Pass')\ndata['pass_math'].value_counts().plot.pie(colors = ['lightblue', 'lightgreen'])\n\nplt.title('Pass\/Fail in Maths', fontweight = 30, fontsize = 20)\nplt.xlabel('status')\nplt.ylabel('count')\nplt.show()","d4f0d9df":"# creating a new column pass_reading, this column will tell us whether the students are pass or fail\n\ndata['pass_reading'] = np.where(data['reading score']< passmarks, 'Fail', 'Pass')\ndata['pass_reading'].value_counts(dropna = False).plot.pie(colors = ['pink', 'yellow'])\n\nplt.title('Pass\/Fail in Reading', fontweight = 30, fontsize = 20)\nplt.xlabel('status')\nplt.ylabel('count')\nplt.show()","033b133b":"# creating a new column pass_writing, this column will tell us whether the students are pass or fail\n\ndata['pass_writing'] = np.where(data['writing score']< passmarks, 'Fail', 'Pass')\ndata['pass_writing'].value_counts(dropna = False).plot.pie(colors = ['orange', 'gray'])\n\nplt.title('Pass\/Fail in Writing', fontweight = 30, fontsize = 20)\nplt.xlabel('status')\nplt.ylabel('count')\nplt.show()","da763e55":"# computing the total score for each student\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndata['total_score'] = data['math score'] + data['reading score'] + data['writing score']\n\nsns.distplot(data['total_score'], color = 'magenta')\n\nplt.title('comparison of total score of all the students', fontweight = 30, fontsize = 20)\nplt.xlabel('total score scored by the students')\nplt.ylabel('count')\nplt.show()","5ebeccc7":"\n# computing percentage for each of the students\n# importing math library to use ceil\nfrom math import * \nimport warnings\nwarnings.filterwarnings('ignore')\n\ndata['percentage'] = data['total_score']\/3\n\nfor i in range(0, 1000):\n    data['percentage'][i] = ceil(data['percentage'][i])\n\nplt.rcParams['figure.figsize'] = (15, 9)\nsns.distplot(data['percentage'], color = 'orange')\n\nplt.title('Comparison of percentage scored by all the students', fontweight = 30, fontsize = 20)\nplt.xlabel('Percentage scored')\nplt.ylabel('Count')\nplt.show()","d03bb06a":"# checking which student is fail overall\n\ndata['status'] = data.apply(lambda x : 'Fail' if x['pass_math'] == 'Fail' or \n                           x['pass_reading'] == 'Fail' or x['pass_writing'] == 'Fail'\n                           else 'pass', axis = 1)\n\ndata['status'].value_counts(dropna = False).plot.pie(colors = ['grey', 'crimson'])\nplt.title('overall results', fontweight = 30, fontsize = 20)\nplt.xlabel('status')\nplt.ylabel('count')\nplt.show()","47c0009d":"# Assigning grades to the grades according to the following criteria :\n# 0  - 40 marks : grade E\n# 41 - 60 marks : grade D\n# 60 - 70 marks : grade C\n# 70 - 80 marks : grade B\n# 80 - 90 marks : grade A\n# 90 - 100 marks : grade O\n\ndef getgrade(percentage, status):\n  if status == 'Fail':\n    return 'E'\n  if(percentage >= 90):\n    return 'O'\n  if(percentage >= 80):\n    return 'A'\n  if(percentage >= 70):\n    return 'B'\n  if(percentage >= 60):\n    return 'C'\n  if(percentage >= 40):\n    return 'D'\n  else :\n    return 'E'\n\ndata['grades'] = data.apply(lambda x: getgrade(x['percentage'], x['status']), axis = 1 )\n\ndata['grades'].value_counts()","c5d462ae":"# plotting a pie chart for the distribution of various grades amongst the students\n\nlabels = ['Grade 0', 'Grade A', 'Grade B', 'Grade C', 'Grade D', 'Grade E']\nsizes = [58, 156, 260, 252, 223, 51]\ncolors = ['yellow', 'gold', 'lightskyblue', 'lightcoral', 'pink', 'cyan']\nexplode = (0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001)\n\npatches, texts = plt.pie(sizes, colors=colors, shadow=True, startangle=90)\nplt.legend(patches, labels)\nplt.title('Distribution of Grades among Students', fontweight = 30, fontsize = 20)\nplt.axis('equal')\nplt.tight_layout()\nplt.show()","73919f8d":"# comparison parent's degree and their corresponding grades\n\nplt.rcParams['figure.figsize'] = (15, 9)\n\nx = pd.crosstab(data['parental level of education'], data['grades'])\ncolor = plt.cm.copper(np.linspace(0, 1, 8))\nx.div(x.sum(1).astype(float), axis = 0).plot(kind = 'bar', stacked = True, color = color)\nplt.title(\"Parental Education vs Student's Grades\", fontweight = 30, fontsize = 20)\nplt.show()","a11b8672":"# for better visualization we will plot it again using seaborn\n\nsns.countplot(x = data['parental level of education'], data = data, hue = data['grades'], palette = 'pastel')\nplt.title('Parental Education vs Grades of Students', fontsize = 20, fontweight = 30)\nplt.show()","da234995":"# comparing the distribution of grades among males and females\n\nsns.countplot(x = data['grades'], data = data, hue = data['gender'], palette = 'cubehelix')\n#sns.palplot(sns.dark_palette('purple'))\nplt.title('Grades vs Gender', fontweight = 30, fontsize = 20)\nplt.show()","e772ae0f":"from sklearn.preprocessing import LabelEncoder\n\n# creating an encoder\nle = LabelEncoder()\n\n# label encoding for test preparation course\ndata['test preparation course'] = le.fit_transform(data['test preparation course'])\n\n# label encoding for lunch\ndata['lunch'] = le.fit_transform(data['lunch'])\n\n# label encoding for race\/ethnicity\n# we have to map values to each of the categories\ndata['race\/ethnicity'] = data['race\/ethnicity'].replace('group A', 1)\ndata['race\/ethnicity'] = data['race\/ethnicity'].replace('group B', 2)\ndata['race\/ethnicity'] = data['race\/ethnicity'].replace('group C', 3)\ndata['race\/ethnicity'] = data['race\/ethnicity'].replace('group D', 4)\ndata['race\/ethnicity'] = data['race\/ethnicity'].replace('group E', 5)\n\n# label encoding for parental level of education\ndata['parental level of education'] = le.fit_transform(data['parental level of education'])\n\n#label encoding for gender\ndata['gender'] = le.fit_transform(data['gender'])\n\n# label encoding for pass_math\ndata['pass_math'] = le.fit_transform(data['pass_math'])\n\n# label encoding for pass_reading\ndata['pass_reading'] = le.fit_transform(data['pass_reading'])\n\n# label encoding for pass_writing\ndata['pass_writing'] = le.fit_transform(data['pass_writing'])\n\n# label encoding for status\ndata['status'] = le.fit_transform(data['status'])\n","90470bda":"# splitting the dependent and independent variables\n\nx = data.iloc[:,:14]\ny = data.iloc[:,14]\n\nprint(x.shape)\nprint(y.shape)","b51ac6f1":"# splitting the dataset into training and test sets\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 45)\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","27faa328":"# importing the MinMaxScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\n# creating a scaler\nmm = MinMaxScaler()\n\n# feeding the independent variable into the scaler\nx_train = mm.fit_transform(x_train)\nx_test = mm.transform(x_test)\n","9100d4c9":"# applying principal components analysis\n\nfrom sklearn.decomposition import PCA\n\n# creating a principal component analysis model\n#pca = PCA(n_components = None)\n\n# feeding the independent variables to the PCA model\n#x_train = pca.fit_transform(x_train)\n#x_test = pca.transform(x_test)\n\n# visualising the principal components that will explain the highest share of variance\n#explained_variance = pca.explained_variance_ratio_\n#print(explained_variance)\n\n# creating a principal component analysis model\n#pca = PCA(n_components = 2)\n\n# feeding the independent variables to the PCA model\n#x_train = pca.fit_transform(x_train)\n#x_test = pca.transform(x_test)","d8d320a9":"from sklearn.ensemble import RandomForestClassifier\n\n# creating a model\nmodel = RandomForestClassifier()\n\n# feeding the training data to the model\nmodel.fit(x_train, y_train)\n\n# predicting the x-test results\ny_pred = model.predict(x_test)\n\n# calculating the accuracies\nprint(\"Training Accuracy :\", model.score(x_train, y_train))\nprint(\"Testing Accuracy :\", model.score(x_test, y_test))","9586e47e":"# printing the confusion matrix\n\nfrom sklearn.metrics import confusion_matrix\n\n# creating a confusion matrix\ncm = confusion_matrix(y_test, y_pred)\n\n# printing the confusion matrix\nplt.rcParams['figure.figsize'] = (8, 8)\nsns.heatmap(cm, annot = True, cmap = 'Reds')\nplt.title('Confusion Matrix for Random Forest', fontweight = 30, fontsize = 20)\nplt.show()","3bd24def":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nmodel = LinearDiscriminantAnalysis()\n\n# feeding the training data to the model\nmodel.fit(x_train, y_train)\n\n# predicting the x-test results\ny_pred = model.predict(x_test)\n\n# calculating the accuracies\nprint(\"Training Accuracy :\", model.score(x_train, y_train))\nprint(\"Testing Accuracy :\", model.score(x_test, y_test))","ce93616a":"from sklearn.naive_bayes import GaussianNB\nmodel = GaussianNB()\n\n# feeding the training data to the model\nmodel.fit(x_train, y_train)\n\n# predicting the x-test results\ny_pred = model.predict(x_test)\n\n# calculating the accuracies\nprint(\"Training Accuracy :\", model.score(x_train, y_train))\nprint(\"Testing Accuracy :\", model.score(x_test, y_test))","7300d14e":"from sklearn.linear_model import LogisticRegression\nmodel =LogisticRegression(multi_class='multinomial', solver='newton-cg').fit(x_train, y_train)\n# feeding the training data to the model\nmodel.fit(x_train, y_train)\n\n# predicting the x-test results\ny_pred = model.predict(x_test)\n\n# calculating the accuracies\nprint(\"Training Accuracy :\", model.score(x_train, y_train))\nprint(\"Testing Accuracy :\", model.score(x_test, y_test))","52e5be61":"from sklearn.neighbors import KNeighborsClassifier\nmodel = KNeighborsClassifier()\n\n# feeding the training data to the model\nmodel.fit(x_train, y_train)\n\n# predicting the x-test results\ny_pred = model.predict(x_test)\n\n# calculating the accuracies\nprint(\"Training Accuracy :\", model.score(x_train, y_train))\nprint(\"Testing Accuracy :\", model.score(x_test, y_test))","1c9ed8dc":"from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier().fit(x_train, y_train)\n\n# feeding the training data to the model\nmodel.fit(x_train, y_train)\n\n# predicting the x-test results\ny_pred = model.predict(x_test)\n\n# calculating the accuracies\nprint(\"Training Accuracy :\", model.score(x_train, y_train))\nprint(\"Testing Accuracy :\", model.score(x_test, y_test))","25f4a7c5":"**K-Nearest Neighbor**","657b484c":"## Modelling","56b84e8a":"<img src=\"https:\/\/i.ytimg.com\/vi\/OVb2iUxcYyM\/maxresdefault.jpg\" width=\"800px\">","c866ad7c":"**Random Forest**","8b68202e":"<img src=\"https:\/\/previews.123rf.com\/images\/dizanna\/dizanna1603\/dizanna160301774\/54253312-thank-you-word-cloud-all-languages.jpg\" width=\"800px\">","5fabc158":"**Reading the Data set**","ea918b6e":"**Linear Discriminant Analysis(LDA)**","ab39305d":"##  Data Visualizations","124ffba3":" ****Student Performance Analysis and Visualizations****","2dc76318":"### Thanks for reading this kernel, please upvote if you like.","8473de61":"## Label Encoding","5dbf8acd":"**Multinomial Logistic Regression**","e02c625a":"**Gaussian Naive Bayes**","9f18439e":"## Data Preparation"}}