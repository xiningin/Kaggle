{"cell_type":{"d0c82b1f":"code","4c72573b":"code","ca05181b":"code","32c5da70":"code","bc4b6ada":"code","8c0c5c40":"code","4b68a687":"code","f33fd1d1":"code","36e090ec":"code","9a966365":"code","ef90d5b9":"code","58cffbaf":"code","a0af56a5":"code","c8c834f6":"code","caaf8327":"code","68a8e689":"code","cdba1b43":"code","03ed5d67":"code","b555c09e":"code","ef3860ee":"code","9c81c066":"code","a9957212":"code","b41b81cf":"code","92e68102":"code","71130c7d":"code","c14b25c3":"code","41b21db3":"markdown","3a5f4f88":"markdown","d92aebd7":"markdown","0005bf12":"markdown","6bf0c0e9":"markdown","eb4e7a34":"markdown","0664a031":"markdown","93311566":"markdown","68eb4eab":"markdown","4f76be15":"markdown","a72e389f":"markdown","6175735f":"markdown"},"source":{"d0c82b1f":"import numpy as np\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import Imputer\nimport matplotlib.pyplot as plt\nimport random\nimport matplotlib.ticker as ticker","4c72573b":"font = {'family': 'Times New Roman',\n        'weight': 'normal',\n        'size': 12,\n        }\nfont2 = {'family': 'Times New Roman',\n        'weight': 'normal',\n        'size': 7,\n         }","ca05181b":"#city : wuhan\nwuhan_targets = np.array([192.875,192.485,193.72,207.6488889,223.98])\nwuhan_targets_list = [154.1833333,153.4433333,161.8533333,np.nan,np.nan,192.875,192.485,193.72,207.6488889,223.98]\nwuhan_datas = np.array([np.array([x]) for x in range(len(wuhan_targets))])\n\nregr = SVR(kernel='linear')\nregr.fit(wuhan_datas.reshape(-1,1), wuhan_targets.reshape(-1,1))\nwuhan_targets_list[4] = regr.predict(np.array(-1).reshape(-1,1))\nwuhan_targets_list = np.array(wuhan_targets_list)\n\nimp = Imputer(missing_values='NaN', strategy='mean', axis=0, verbose=0)\nimp.fit(wuhan_targets_list.reshape(-1,1))\nwuhan_targets_list = imp.transform(wuhan_targets_list.reshape(-1,1))\nprint(wuhan_targets_list)\nprint(\"\")\n\n#city : hangzhou\nhangzhou_targets = np.array([217.9033333,233.5833333,262.59,255.0616667,272.4383333,293.625,302.010275])\nhangzhou_targets_list = [217.9033333,233.5833333,262.59,255.0616667,272.4383333,293.625,302.010275,np.nan,np.nan,325.2066667]\nhangzhou_datas = np.array([np.array([x]) for x in range(len(hangzhou_targets))])\n\nregr = SVR(kernel='linear')\nregr.fit(hangzhou_datas.reshape(-1,1), hangzhou_targets.reshape(-1,1))\nhangzhou_targets_list[7] = regr.predict(np.array(7).reshape(-1,1))\n\nhangzhou_targets_list = np.array(hangzhou_targets_list)\nimp = Imputer(missing_values='NaN', strategy='mean', axis=0, verbose=0)\nimp.fit(hangzhou_targets_list.reshape(-1,1))\nhangzhou_targets_list = imp.transform(hangzhou_targets_list.reshape(-1,1))\n\nregr = SVR(kernel='linear')\nhangzhou_datas = np.array([np.array([x]) for x in range(len(hangzhou_targets_list))])\nregr.fit(hangzhou_datas.reshape(-1,1), hangzhou_targets_list.reshape(-1,1))\nhangzhou_targets_list[8] = regr.predict(np.array(8).reshape(-1,1))\nprint(hangzhou_targets_list)\nprint(\"\")\n\n#city : nannin\nnannin_targets = np.array([114.25,119.38855,124.8666667,126.1333333,133.32])\nnannin_targets_list = [83.7,np.nan,np.nan,np.nan,np.nan,114.25,119.38855,124.8666667,126.1333333,133.32]\nnannin_datas = np.array([np.array([x]) for x in range(len(nannin_targets))])\nregr = SVR(kernel='linear')\nregr.fit(nannin_datas.reshape(-1,1), nannin_targets.reshape(-1,1))\nnannin_targets_list[4] = regr.predict(np.array(-1).reshape(-1,1))[0]\n\nnannin_targets = np.array(nannin_targets_list[4:])\nregr = SVR(kernel='linear')\nnannin_datas = np.array([np.array([x]) for x in range(len(nannin_targets))])\nregr.fit(nannin_datas.reshape(-1,1), nannin_targets.reshape(-1,1))\nnannin_targets_list[3] = regr.predict(np.array(-1).reshape(-1,1))[0]\nnannin_targets_list[2] = regr.predict(np.array(-1).reshape(-1,1))[0]\nnannin_targets_list[1] = regr.predict(np.array(-1).reshape(-1,1))[0]\n\nnannin_targets = np.array(nannin_targets_list)\nregr = SVR(kernel='linear')\nnannin_datas = np.array([np.array([x]) for x in range(len(nannin_targets))])\nregr.fit(nannin_datas.reshape(-1,1), nannin_targets.reshape(-1,1))\nnannin_targets_list[1] = regr.predict(np.array(1).reshape(-1,1))[0]\nnannin_targets_list[2] = regr.predict(np.array(2).reshape(-1,1))[0]\nnannin_targets_list[3] = regr.predict(np.array(3).reshape(-1,1))[0]\nnannin_targets_list[4] = regr.predict(np.array(4).reshape(-1,1))[0]\nprint(nannin_targets_list)\nprint(\"\")\n\n#jinan\njinan_targets = np.array([74.16666667, 116.875,124.2316, 140.36])\njinan_targets_list = [74.16666667,np.nan,np.nan,np.nan,np.nan,116.875,124.2316,np.nan,np.nan,140.36]\n\njinan_datas = np.array([np.array([0]),np.array([5]),np.array([6]),np.array([9])])\n\nregr = SVR(kernel='linear')\nregr.fit(jinan_datas.reshape(-1,1), jinan_targets.reshape(-1,1))\njinan_targets_list[7] = regr.predict(np.array(7).reshape(-1,1))[0]\njinan_targets_list[8] = regr.predict(np.array(8).reshape(-1,1))[0]\njinan_targets_list[4] = regr.predict(np.array(4).reshape(-1,1))[0]\njinan_targets_list[3] = regr.predict(np.array(3).reshape(-1,1))[0]\njinan_targets_list[2] = regr.predict(np.array(2).reshape(-1,1))[0]\njinan_targets_list[1] = regr.predict(np.array(1).reshape(-1,1))[0]\nprint(jinan_targets_list)\nprint(\"\")","32c5da70":"wti_datas=np.array([\n    np.array(x) for x in range(12)\n])\nwti_targets=[\n    97092*np.array([92.3,92.3,101.9,100.2,98.6,99.7,105.5,102.7,100.8,99.1,105.7,105.0]),\n    97092*np.array([105.9,106.0,112.3,106.8,110.4,113.3,118.5,117.9,114.4,113.6,121.7,118.4]),\n    97092*np.array([97.3,94.4,99.1,96.6,102.8,99.8,107.8,104.1,104.2,99.1,106.8,101.2])\n]","bc4b6ada":"airport_targets=np.array([\n    1e4*np.array([395.3429167,401.29,423.1210417,428.97625,456.6175,464.5625,487.7926875,444.4372917,528.2870139,515.3816667]),\n    1e4*np.array([112.2366667,125.5316417,129.5511889,132.9101806,139.3486167,144.875,149.5837083,156.0058333,161.3981019,166.9733333]),\n    1e4*np.array([173.2633333,108.4266667,128.655,161.9183333,151.415,187.25,190.120375,231.7966667,190.7788889,240.0366667])\n])\nairport_datas=np.array([\n    np.array(x) for x in range(len(airport_targets[0]))\n])","8c0c5c40":"tier_a  = np.array([64.586667,66.213333,67.593333,69.23,70.696667,71.593333,72,72.106667,72.84])\ntier_b = np.array([63.86,66.265,68.135,69.615,69.44,69.10945,68.85,71.875,70.05])\nuniversity_targets = [1e4*tier_a, 1e4*tier_b]\n\nuniversity_datas = np.array([\n    np.array(x-2015) for x in range(len(university_targets[0]))\n])","4b68a687":"def load_data_regression(X,y,idx):\n    datas = X\n    targets = y\n    dataset = dict(data=datas,target=targets,feature_names=['time(season)'])\n    return train_test_split(datas,targets,test_size=0.3,random_state=0)","f33fd1d1":"md = []\nregr_list = []\nscore_list = []\nline_list = []\nfor i in range(len(wti_targets)):\n    md.append(load_data_regression(wti_datas,wti_targets[i],i))\n    regr = SVR(kernel='linear',C=100000)\n    regr.fit(md[i][0].reshape(-1,1),md[i][2])\n    score_list.append(regr.score(md[i][1].reshape(-1,1),md[i][3]))\n    regr_list.append(regr)\n    line_list.append([-regr.coef_[0][0],1,-regr.intercept_[0]])#-kx+y-b=0","36e090ec":"md = []\nscore_list = []\nfor i in range(len(airport_targets)):\n    md.append(load_data_regression(airport_datas,airport_targets[i],i))\n    regr = SVR(kernel='linear',C=100000)\n    regr.fit(md[i][0].reshape(-1,1),md[i][2])\n    score_list.append(regr.score(md[i][1].reshape(-1,1),md[i][3]))\n    regr_list.append(regr)\n    line_list.append([-regr.coef_[0][0],1,-regr.intercept_[0]])#-kx+y-b=0","9a966365":"md = []\nfor i in range(len(university_targets)):\n    md.append(load_data_regression(university_datas,university_targets[i],1))\n    regr=SVR(kernel='linear',C=100000)\n    regr.fit(md[i][0].reshape(-1,1),md[i][2])\n    score_list.append(regr.score(md[i][1].reshape(-1,1),md[i][3]))\n    regr_list.append(regr)\n    line_list.append([-regr.coef_[0][0],1,-regr.intercept_[0]])#-kx+y-b=0","ef90d5b9":"import math\n\"\"\"\nline_length = |Ax0+By0+C|\/(sqrt(A^2+B^2))\n\"\"\"\ndef lineLength(line, point):\n    return float(abs(line[0]*point[0]+line[1]*point[1]+line[2]))\/float(math.sqrt(line[0]**2+line[1]**2))","58cffbaf":"length_list = []\nfor target in range(len(wti_targets)):\n    targets = wti_targets[target]\n    length_list.append([])\n    for i in range(len(targets)):\n        ll = lineLength(line_list[target],[targets[i],i])\n        length_list[target].append(ll)\n\nllst=[]\nfor t in range(len(airport_targets)):\n    ts = airport_targets[t]\n    llst.append([])\n    for i in range(len(ts)):\n        ll = lineLength(line_list[t],[ts[i],i])\n        llst[t].append(ll)\n\nfor i in llst:\n    length_list.append(i)\n    \nlllst=[]\nfor t in range(len(university_targets)):\n    ts = university_targets[t]\n    lllst.append([])\n    for i in range(len(ts)):\n        ll = lineLength(line_list[t],[ts[i],i])\n        lllst[t].append(ll)\n\nfor i in lllst:\n    length_list.append(i)\n    \nlength_regr_list=[]\nfor i in range(len(length_list)):\n    length_datas = load_data_regression(\n        np.array([np.array(x) for x in range(len(length_list[i]))]),\n        np.array(length_list[i]),0\n    )\n    regr=SVR(kernel='linear',C=100000)\n    regr.fit(length_datas[0].reshape(-1,1),length_datas[2])\n    score_list.append(regr.score(length_datas[1].reshape(-1,1),length_datas[3]))\n    length_regr_list.append(regr)\n    line_list.append([-regr.coef_[0][0],1,-regr.intercept_[0]])#-kx+y-b=0","a0af56a5":"def predict_future_population(tier,year,fluctuate=True,k=0.05,ltype=0):\n    y=None\n    f=None\n    if ltype==0:\n        y = (1\/4)*(\n            regr_list[tier+ltype*3].predict(np.array(year*4).reshape(-1,1))+\n            regr_list[tier+ltype*3].predict(np.array(year*4+1).reshape(-1,1))+\n            regr_list[tier+ltype*3].predict(np.array(year*4+2).reshape(-1,1))+\n            regr_list[tier+ltype*3].predict(np.array(year*4+3).reshape(-1,1))\n        )\n        f = [\n            length_regr_list[tier+ltype*3].predict(np.array(year*4).reshape(-1,1)),\n            length_regr_list[tier+ltype*3].predict(np.array(year*4+1).reshape(-1,1)),\n            length_regr_list[tier+ltype*3].predict(np.array(year*4+2).reshape(-1,1)),\n            length_regr_list[tier+ltype*3].predict(np.array(year*4+3).reshape(-1,1))\n        ]\n        f = k*((random.randint(-1,1)*f[0][0]+random.randint(-1,1)*f[1][0]+random.randint(-1,1)*f[2][0]+random.randint(-1,1)*f[3][0])\/4)\n    elif ltype==1:\n        year_type = year%4\n        if year_type==0:\n            y = (1\/3)*(regr_list[tier+ltype*3].predict(np.array(year).reshape(-1,1))+\n            regr_list[tier+ltype*3].predict(np.array(year+1).reshape(-1,1))+\n            regr_list[tier+ltype*3].predict(np.array(year+2).reshape(-1,1))\n            )\n            f = [\n                length_regr_list[tier+ltype*3].predict(np.array(year).reshape(-1,1)),\n                length_regr_list[tier+ltype*3].predict(np.array(year+1).reshape(-1,1)),\n                length_regr_list[tier+ltype*3].predict(np.array(year+2).reshape(-1,1))\n            ]\n            f = k*((random.randint(-1,1)*f[0][0]+random.randint(-1,1)*f[1][0]+random.randint(-1,1)*f[2][0])\/3)\n        else:\n            y = (1\/2)*(regr_list[tier+ltype*3].predict(np.array(year+3+(year_type-1)*2).reshape(-1,1))+\n            regr_list[tier+ltype*3].predict(np.array(year+4+(year_type-1)*2).reshape(-1,1))+\n            regr_list[tier+ltype*3].predict(np.array(year+5+(year_type-1)*2).reshape(-1,1))\n            )\n            f = [\n                length_regr_list[tier+ltype*3].predict(np.array(year+3+(year_type-1)*2).reshape(-1,1)),\n                length_regr_list[tier+ltype*3].predict(np.array(year+4+(year_type-1)*2).reshape(-1,1)),\n                length_regr_list[tier+ltype*3].predict(np.array(year+5+(year_type-1)*2).reshape(-1,1))\n            ]\n            f = k*((random.randint(-1,1)*f[0][0]+random.randint(-1,1)*f[1][0])\/2)\n    elif ltype == 2:\n        y = regr_list[tier+ltype*3].predict(np.array(year)).reshape(-1,1)\n        f = k*random.randint(-1,1)*length_regr_list[tier+ltype*3].predict(np.array(year).reshape(-1,1))\n    if fluctuate==False:\n        return y[0]\n    return (y+f)[0]","c8c834f6":"def calculate_ppv_coefficience(tier,present_year=2017,year_interval=1,use_fluctuation=True,alpha=0.3,max_weight=0.7,k=0.05,ltype=0,base=2016):\n    beta = max_weight-alpha\n    present_year -= base\n    initial_year = present_year-year_interval\n    present_value = 0\n    present_value = predict_future_population(tier,np.array([present_year]).reshape(-1,1),k=k,fluctuate=use_fluctuation,ltype=ltype)\n    pre_value = 0\n    future_value = 0\n    for i in range(year_interval):\n        pre_value += predict_future_population(tier,np.array([initial_year+i]).reshape(-1,1),k=k,fluctuate=use_fluctuation,ltype=ltype)\n    for j in range(year_interval):\n        future_value += predict_future_population(tier,np.array([present_year+i]).reshape(-1,1),k=k,fluctuate=use_fluctuation,ltype=ltype)\n    return 12*math.floor(alpha*pre_value+beta*(future_value-present_value))","caaf8327":"#ppv_wti_coefficience_list\n#ppv_apt_coefficience_list\n#ppv_uvs_coefficience_list\n#calculate_ppv_coefficience(0,present_year=2015+j,k=0.05,ltype=2,base=2015)\nlw = np.array([0.1208,0.3985,0.2656])#wti, apt, uvs\n#city weight\ncw_tiers = 100000000*np.array([\n    np.array([0.406805958,0.51920274,0.547647207,0.524186331]),\n    np.array([0.431399537,0.289674546,0.25792568,0.293343555]),\n    np.array([0.161794505,0.191122713,0.194427114,0.182470115])\n])\ncw_tier_1 = cw_tiers[0]\ncw_tier_2 = cw_tiers[1]\ncw_tier_3 = cw_tiers[2]\nt_datas = np.array([0, 1, 2, 3])","68a8e689":"import numpy as np\n\n\n\n\n\nclass pso(object):\n    def __init__(self,fitness_fun, population_size, max_steps):\n        self.w = 0.6  # \u60ef\u6027\u6743\u91cd\n        self.c1 = self.c2 = 2\n        self.population_size = population_size  # \u7c92\u5b50\u7fa4\u6570\u91cf\n        self.dim = 2 # \u641c\u7d22\u7a7a\u95f4\u7684\u7ef4\u5ea6\n        self.max_steps = max_steps  # \u8fed\u4ee3\u6b21\u6570\n        self.x_bound = [0.00000000001, 1000000]  # \u89e3\u7a7a\u95f4\u8303\u56f4\n        self.x = np.random.uniform(self.x_bound[0], self.x_bound[1],\n                                   (self.population_size, self.dim))  # \u521d\u59cb\u5316\u7c92\u5b50\u7fa4\u4f4d\u7f6e\n        self.v = np.random.rand(self.population_size, self.dim)  # \u521d\u59cb\u5316\u7c92\u5b50\u7fa4\u901f\u5ea6\n        self.fitness_fun=fitness_fun\n        fitness = self.fitness_fun(self.x)\n        self.p = self.x  # \u4e2a\u4f53\u7684\u6700\u4f73\u4f4d\u7f6e\n        self.pg = self.x[np.argmin(fitness)]  # \u5168\u5c40\u6700\u4f73\u4f4d\u7f6e\n        self.individual_best_fitness = fitness  # \u4e2a\u4f53\u7684\u6700\u4f18\u9002\u5e94\u5ea6\n        self.global_best_fitness = np.min(fitness)  # \u5168\u5c40\u6700\u4f73\u9002\u5e94\u5ea6\n        self.save_optimal_p=[]\n\n\n    def evolve(self):\n\n\n\n        for step in range(self.max_steps):\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            # \u66f4\u65b0\u901f\u5ea6\u548c\u6743\u91cd\n            self.v = self.w * self.v + self.c1 * r1 * (self.p - self.x) + self.c2 * r2 * (self.pg - self.x)\n            self.x = self.v + self.x\n\n            self.x = np.where(self.x < self.x_bound[0], self.x_bound[0], self.x)\n            self.x = np.where(self.x > self.x_bound[1], self.x_bound[1], self.x)\n\n\n            fitness = self.fitness_fun(self.x)\n\n\n            # \u9700\u8981\u66f4\u65b0\u7684\u4e2a\u4f53\n            update_id = np.greater(self.individual_best_fitness, fitness).flatten()\n            # print(update_id)\n\n            self.p[update_id] = self.x[update_id]\n\n            self.individual_best_fitness[update_id] = fitness[update_id]\n            self.save_optimal_p.append(self.x[np.argmin(fitness)])\n            # \u65b0\u4e00\u4ee3\u51fa\u73b0\u4e86\u66f4\u5c0f\u7684fitness\uff0c\u6240\u4ee5\u66f4\u65b0\u5168\u5c40\u6700\u4f18fitness\u548c\u4f4d\u7f6e\n            if np.min(fitness) < self.global_best_fitness:\n                self.pg = self.x[np.argmin(fitness)]\n                self.global_best_fitness = np.min(fitness)\n\n        return np.array(self.save_optimal_p)","cdba1b43":"import numpy as np\nfrom sklearn.svm import SVR\n\ncw_tiers = 100000000*np.array([\n    np.array([0.406805958,0.51920274,0.547647207,0.524186331]),\n    np.array([0.431399537,0.289674546,0.25792568,0.293343555]),\n    np.array([0.161794505,0.191122713,0.194427114,0.182470115])\n])\n\nt_datas = np.array([0, 1, 2, 3])\n\ndef evaluate_score(regr, tier):\n    loss = 0\n    temporary = 0\n    for i in range(4):\n        temporary = regr.predict(np.array([i]).reshape(-1, 1))[0] - cw_tiers[tier][i]\n    loss += temporary ** 2\n    return loss\n\ndef calculate_fitness0(x):\n    m,n = x.shape[0], x.shape[1]\n    tier = 0\n    spring_fitness = np.zeros((m,1))\n    for i in range(m):\n        C, gamma = x[i,0], x[i,1]\n        if C <= 0:C=0.001\n        if gamma<=0:gamma=0.001\n        regr_cw = SVR(kernel='rbf', C=C, gamma = gamma)\n        regr_cw.fit(t_datas.reshape(-1,1),cw_tiers[tier])\n        spring_fitness[i]= evaluate_score(regr_cw, tier)\n    return spring_fitness\ndef calculate_fitness1(x):\n    m,n = x.shape[0], x.shape[1]\n    tier = 1\n    spring_fitness = np.zeros((m,1))\n    for i in range(m):\n        C, gamma = x[i,0], x[i,1]\n        if C <= 0:C=0.001\n        if gamma<=0:gamma=0.001\n        regr_cw = SVR(kernel='rbf', C=C, gamma = gamma)\n        regr_cw.fit(t_datas.reshape(-1,1),cw_tiers[tier])\n        spring_fitness[i]= evaluate_score(regr_cw, tier)\n    return spring_fitness\ndef calculate_fitness2(x):\n    m,n = x.shape[0], x.shape[1]\n    tier = 2\n    spring_fitness = np.zeros((m,1))\n    for i in range(m):\n        C, gamma = x[i,0], x[i,1]\n        if C <= 0:C=0.001\n        if gamma<=0:gamma=0.001\n        regr_cw = SVR(kernel='rbf', C=C, gamma = gamma)\n        regr_cw.fit(t_datas.reshape(-1,1),cw_tiers[tier])\n        spring_fitness[i]= evaluate_score(regr_cw, tier)\n    return spring_fitness\nPSO_Instance0 = pso(calculate_fitness0, 200, 300)\nq_best0 = PSO_Instance0.evolve()\nprint(q_best0)\nprint()\n\nPSO_Instance1 = pso(calculate_fitness1, 200, 300)\nq_best1 = PSO_Instance0.evolve()\nprint(q_best1)\nprint()\n\nPSO_Instance2 = pso(calculate_fitness2, 200, 300)\nq_best2 = PSO_Instance2.evolve()\nprint(q_best2)","03ed5d67":"c_tier0 = np.mean(np.array([q_best0[x][0] for x in range(len(q_best0))]))\ngamma_tier0 = np.mean(np.array([q_best0[x][1] for x in range(len(q_best0))]))\nc_tier1 = np.mean(np.array([q_best1[x][0] for x in range(len(q_best1))]))\ngamma_tier1 = np.mean(np.array([q_best1[x][1] for x in range(len(q_best1))]))\nc_tier2 = np.mean(np.array([q_best2[x][0] for x in range(len(q_best2))]))\ngamma_tier2 = np.mean(np.array([q_best2[x][1] for x in range(len(q_best2))]))\nprint(c_tier0,gamma_tier0,c_tier1,gamma_tier1,c_tier2,gamma_tier2)","b555c09e":"#pso_process(100000,10,50,0,99999,9,1000,1)\nregr_cw_tier_1 = SVR(kernel='rbf', C=c_tier0, gamma=gamma_tier0)\n#pso_process(100000,10,50,1,99999,9,1000,1)\nregr_cw_tier_2 = SVR(kernel='rbf', C=c_tier1, gamma=gamma_tier1)\n#pso_process(100000,10,50,2,99999,9,1000,1)\nregr_cw_tier_3 = SVR(kernel='rbf', C=c_tier2, gamma=gamma_tier2)\nregr_cw_tier_1.fit(t_datas.reshape(-1,1),cw_tier_1)\nregr_cw_tier_2.fit(t_datas.reshape(-1,1),cw_tier_2)\nregr_cw_tier_3.fit(t_datas.reshape(-1,1),cw_tier_3)\n\ndef evaluate_score(regr,tier):\n    loss = 0\n    for i in range(4):\n        temporary = regr.predict(np.array([i]).reshape(-1,1))[0]-cw_tiers[tier][i]\n        loss += temporary**2\n    return loss\n\nfig = plt.figure(figsize=(10,3))\nax = fig.add_subplot(111)\n\nax.plot(np.array([x for x in range(0,30)]).reshape(-1,1),np.array([regr_cw_tier_1.predict(np.array([y]).reshape(-1,1))\/100000000 for y in range(0,30)]),color='darkorange')\n\nax.plot(np.array([x for x in range(0,30)]).reshape(-1,1),np.array([regr_cw_tier_2.predict(np.array([y]).reshape(-1,1))\/100000000 for y in range(0,30)]),color='mediumseagreen')\n\nax.plot(np.array([x for x in range(0,30)]).reshape(-1,1),np.array([regr_cw_tier_3.predict(np.array([y]).reshape(-1,1))\/100000000 for y in range(0,30)]),color='#2761b3')\n\nax.legend(prop=font2,loc='best')\nax.set_title('The Predicted City Weight for Different Tiers of Cities through Time',font)\nax.set_xlabel('year',font)\nax.set_ylabel('cw',font)\nax.xaxis.set_major_locator(ticker.MultipleLocator(5))\nax.tick_params(labelsize=10)\nlabel1 = ax.get_xticklabels() + ax.get_yticklabels()\nplt.show()","ef3860ee":"cw_tier_1_list = []\ncw_tier_2_list = []\ncw_tier_3_list = []\n\nfor i in range(2015,2045+1):\n    cw_tier_1_list.append(regr_cw_tier_1.predict(np.array(i-2015).reshape(-1,1)))\n    cw_tier_2_list.append(regr_cw_tier_2.predict(np.array(i-2015).reshape(-1,1)))\n    cw_tier_3_list.append(regr_cw_tier_3.predict(np.array(i-2015).reshape(-1,1)))\n\nprint(\"City weight prediction from year 2015 to 2045\")\nprint(\"tier 1:\")\nprint(np.array(cw_tier_1_list))\nprint()\nprint(\"tier 2:\")\nprint(np.array(cw_tier_2_list))\nprint()\nprint(\"tier 3:\")\nprint(np.array(cw_tier_3_list))\nprint()","9c81c066":"def ppv(year,k_val,coef):\n    ppv_wti_tier0 = calculate_ppv_coefficience(0,present_year=year, k=k_val, ltype=0, base=2015)\n    ppv_wti_tier1 = calculate_ppv_coefficience(1,present_year=year, k=k_val, ltype=0, base=2015)\n    ppv_wti_tier2 = calculate_ppv_coefficience(2,present_year=year, k=k_val, ltype=0, base=2015)\n    ppv_apt_tier0 = calculate_ppv_coefficience(0,present_year=year, k=k_val, ltype=1, base=2015)\n    ppv_apt_tier1 = calculate_ppv_coefficience(1,present_year=year, k=k_val, ltype=1, base=2015)\n    ppv_apt_tier2 = calculate_ppv_coefficience(2,present_year=year, k=k_val, ltype=1, base=2015)\n    ppv_uvs_tier0 = calculate_ppv_coefficience(0,present_year=year, k=k_val, ltype=2, base=2015)\n    ppv_uvs_tier1 = calculate_ppv_coefficience(1,present_year=year, k=k_val, ltype=2, base=2015)\n    ppv_wti = lw[0]*regr_cw_tier_1.predict(np.array([year-2015]).reshape(-1,1))*ppv_wti_tier0 + lw[0]*regr_cw_tier_2.predict(np.array([year-2015]).reshape(-1,1))*ppv_wti_tier1 +lw[0]*regr_cw_tier_3.predict(np.array([year-2015]).reshape(-1,1))*ppv_wti_tier2\n    ppv_apt = lw[1]*regr_cw_tier_1.predict(np.array([year-2015]).reshape(-1,1))*ppv_apt_tier0 + lw[1]*regr_cw_tier_2.predict(np.array([year-2015]).reshape(-1,1))*ppv_apt_tier1 + lw[1]*regr_cw_tier_3.predict(np.array([year-2015]).reshape(-1,1))*ppv_apt_tier2\n    ppv_uvs = lw[2]*regr_cw_tier_1.predict(np.array([year-2015]).reshape(-1,1))*ppv_uvs_tier0 + lw[2]*regr_cw_tier_2.predict(np.array([year-2015]).reshape(-1,1))*ppv_uvs_tier1\n    ppv_raw_val = ppv_wti+ppv_apt+ppv_uvs\n    ppv_avr_val = coef*(ppv_raw_val)\/3\n    ppv_wti -= ppv_avr_val\n    ppv_apt -= ppv_avr_val\n    ppv_uvs -= ppv_avr_val\n    ppv_val = ppv_wti+ppv_apt+ppv_uvs\n    return [ppv_val,[ppv_wti,ppv_apt,ppv_uvs],[[ppv_wti_tier0,ppv_wti_tier1,ppv_wti_tier2],[ppv_apt_tier0,ppv_apt_tier1,ppv_apt_tier2],[ppv_uvs_tier0,ppv_uvs_tier1]]]\n\nppv_pack = [ppv(x, 0, 0.9) for x in range(2015,2045+1)]\n\nppv_list_wti = [ppv_pack[x-2015][1][0] for x in range(2015,(2045+1))]\nppv_list_apt = [ppv_pack[x-2015][1][1] for x in range(2015,(2045+1))]\nppv_list_uvs = [ppv_pack[x-2015][1][2] for x in range(2015,(2045+1))]\n\nppv_coefficience_wti_tier1 = [ppv_pack[x-2015][2][0][0]  for x in range(2015,(2045+1))]\nppv_coefficience_wti_tier2 = [ppv_pack[x-2015][2][0][1]  for x in range(2015,(2045+1))]\nppv_coefficience_wti_tier3 = [ppv_pack[x-2015][2][0][2]  for x in range(2015,(2045+1))]\nppv_coefficience_apt_tier1 = [ppv_pack[x-2015][2][1][0]  for x in range(2015,(2045+1))]\nppv_coefficience_apt_tier2 = [ppv_pack[x-2015][2][1][1]  for x in range(2015,(2045+1))]\nppv_coefficience_apt_tier3 = [ppv_pack[x-2015][2][1][2]  for x in range(2015,(2045+1))]\nppv_coefficience_uvs_tier1 = [ppv_pack[x-2015][2][2][0]  for x in range(2015,(2045+1))]\nppv_coefficience_uvs_tier2 = [ppv_pack[x-2015][2][2][1]  for x in range(2015,(2045+1))]\n\nppv_list = [ppv_pack[x-2015][0] for x in range(2015,(2045+1))]\nfig = plt.figure(figsize=(15,3))\nax = fig.add_subplot(141)\nax.plot([x for x in range(len(ppv_list))],ppv_list,'s-',color='#ff0000')\nax = fig.add_subplot(142)\nax.plot([x for x in range(len(ppv_list_wti))],ppv_list_wti,'s-',color='darkorange')\nax = fig.add_subplot(143)\nax.plot([x for x in range(len(ppv_list_apt))],ppv_list_apt,'s-',color='mediumseagreen')\nax = fig.add_subplot(144)\nax.plot([x for x in range(len(ppv_list_uvs))],ppv_list_uvs,'s-',color='#2716a3')\n\nplt.show()","a9957212":"fig = plt.figure(figsize=(12,3))\nax = fig.add_subplot(131)\nax.plot([x for x in range(2015,2045+1)],ppv_coefficience_wti_tier1,color='darkorange')\nax.plot([x for x in range(2015,2045+1)],ppv_coefficience_wti_tier2,color='mediumseagreen')\nax.plot([x for x in range(2015,2045+1)],ppv_coefficience_wti_tier3,color='#2716a3')\nax = fig.add_subplot(132)\nax.plot([x for x in range(2015,2045+1)],ppv_coefficience_apt_tier1,color='darkorange')\nax.plot([x for x in range(2015,2045+1)],ppv_coefficience_apt_tier2,color='mediumseagreen')\nax.plot([x for x in range(2015,2045+1)],ppv_coefficience_apt_tier3,color='#2716a3')\nax = fig.add_subplot(133)\nax.plot([x for x in range(2015,2045+1)],ppv_coefficience_uvs_tier1,color='darkorange')\nax.plot([x for x in range(2015,2045+1)],ppv_coefficience_uvs_tier2,color='mediumseagreen')\nplt.show()\nprint(\"PPV coefficience datas:\\n\")\nprint(\"Shopping Mall Datas:\")\nprint(\"\\tPPV_coefficience_wti_tier1:\")\nprint(\"\\t\",ppv_coefficience_wti_tier1)\nprint(\"\\tPPV_coefficience_wti_tier2:\")\nprint(\"\\t\",ppv_coefficience_wti_tier2)\nprint(\"\\tPPV_coefficience_wti_tier3:\")\nprint(\"\\t\",ppv_coefficience_wti_tier3)\nprint(\"\\nAirport Datas:\")\nprint(\"\\tPPV_coefficience_apt_tier1:\")\nprint(\"\\t\",ppv_coefficience_apt_tier1)\nprint(\"\\tPPV_coefficience_apt_tier2:\")\nprint(\"\\t\",ppv_coefficience_apt_tier2)\nprint(\"\\tPPV_coefficience_apt_tier3:\")\nprint(\"\\t\",ppv_coefficience_apt_tier3)\nprint(\"\\nUniversity Datas:\")\nprint(\"\\tPPV_coefficience_uvs_tier1:\")\nprint(\"\\t\",ppv_coefficience_uvs_tier1)\nprint(\"\\tPPV_coefficience_uvs_tier2:\")\nprint(\"\\t\",ppv_coefficience_uvs_tier2)\n","b41b81cf":"print(\"ppv_list = \", ppv_list)\nprint(\"ppv_list_wti = \", ppv_list_wti)\nprint(\"ppv_list_apt = \", ppv_list_apt)\nprint(\"ppv_list_uvs = \", ppv_list_uvs)","92e68102":"def sigmoid(x, kd=5*1e14, sc=100, bias=0):\n    return sc\/(1+np.exp(-x\/kd))+bias","71130c7d":"sgm_ppv_wti = sigmoid(np.array(ppv_list_wti))\nsgm_ppv_apt = sigmoid(np.array(ppv_list_apt))\nsgm_ppv_uvs = sigmoid(np.array(ppv_list_uvs))\nfig = plt.figure(figsize=(10,3))\nax = fig.add_subplot(111)\nax.plot(np.array([x for x in range(2015,2045+1)]),sgm_ppv_wti,color='darkorange')\nax.plot(np.array([x for x in range(2015,2045+1)]),sgm_ppv_apt,color='mediumseagreen')\nax.plot(np.array([x for x in range(2015,2045+1)]),sgm_ppv_uvs,color='#2716a3')\n\nplt.show()","c14b25c3":"print(\"after sigmoid PPVs:->\\n\")\nprint(\"a) Shopping Mall:\")\nprint(sgm_ppv_wti)\nprint()\nprint(\"b) Airport:\")\nprint(sgm_ppv_apt)\nprint()\nprint(\"c) University:\")\nprint(sgm_ppv_uvs)","41b21db3":"Shopping Mall Data","3a5f4f88":"Airport Mall Data","d92aebd7":"One of the coefficience of the **PPV** model, which is the **POPULATION** coefficience","0005bf12":"sigmoid process begins","6bf0c0e9":"Extrapolation for Airports","eb4e7a34":"Split Training and Test Datas","0664a031":"Import Libs","93311566":"General Prediction Function ( which combines the raw regression and the fluctuation [ with random ] )","68eb4eab":"Mall Regression Model First Part","4f76be15":"University Data","a72e389f":"Airport Regression Model First Part","6175735f":"Raw Absolute Fluctuation Regression Model Set up"}}