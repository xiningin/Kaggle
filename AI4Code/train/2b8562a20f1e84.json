{"cell_type":{"9785a7b3":"code","0caec63f":"code","6b083640":"code","5a0d6291":"code","978da553":"code","145d06ad":"code","aac022b2":"code","e2e22ec8":"code","146fcc94":"code","bfdfcf88":"code","dcccf0dc":"code","ee2b3f85":"code","454ec829":"markdown","1d61c629":"markdown","d825a328":"markdown","2eb60eb6":"markdown","13194cd9":"markdown","69d04ff0":"markdown","27590be3":"markdown","7367b6ed":"markdown","b44b0856":"markdown"},"source":{"9785a7b3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport random\nimport sys\nimport gc\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport cv2\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.preprocessing import LabelBinarizer\nimport PIL\nfrom PIL import Image\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\nfrom sklearn.metrics import roc_curve\nfrom sklearn.neighbors import KNeighborsClassifier\nimport matplotlib.patheffects as PathEffects\n\nfrom keras.layers import Input, Conv2D, Lambda, Dense, Flatten,MaxPooling2D, concatenate\nfrom keras.models import Model, Sequential\nfrom keras.regularizers import l2\nfrom keras import backend as K\nfrom keras.optimizers import SGD,Adam\nfrom keras.losses import binary_crossentropy\nimport keras\nfrom keras import layers\nfrom keras import metrics\nfrom keras.models import load_model\nfrom keras.layers import Dense, Flatten, Conv2D, Dropout, MaxPooling2D, GlobalAveragePooling2D, Dropout\nfrom keras import optimizers\nfrom keras import models\nfrom keras.models import Sequential\nfrom keras import preprocessing\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\nfrom keras.applications import VGG16\nfrom keras.utils import plot_model\nfrom sklearn.manifold import TSNE\nfrom itertools import permutations","0caec63f":"img_size = 224\nbatch_size = 32\nepochs = 100\ntrain_size = 0.7\nval_size = 0.2\ntest_size = 0.1\nseed = 4321\nchannels = 3\nlearning_rate = 0.0001","6b083640":"d = '..\/input\/tobacco3482-jpg\/Tobacco3482-jpg\/'\nPATH = '..\/'\n\nclasses = (os.listdir(d))\n\npaths = [os.path.join(d, o) for o in os.listdir(d) \n                    if os.path.isdir(os.path.join(d,o))]\n\nnbEntries = []\n\nfor i in range(len(classes)):\n    nbEntries.append(len(os.listdir(paths[i])))\n\n#################################################\n    \nprint(classes)\nprint(nbEntries)\n\ndf = pd.DataFrame({'classes':classes, 'entries':nbEntries})\nax = df.sort_values(by='entries', ascending=True).plot.bar(x='classes', y='entries', color='cornflowerblue',legend=False, figsize=(12,8))\nax.set_title('Tobacco3482 classes Distribution')\nax.set_ylabel(\"# entries\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), xy=(p.get_x(), p.get_height()-30))","5a0d6291":"total_set = []\ntotal_labels = []\n\n\nfor root, dirs, files in os.walk(d):\n    for file in files:\n        if file.endswith(\".jpg\"):\n            path = os.path.join(root, file)\n            total_set.append(path)\n            total_labels.append(root.split(os.path.sep)[-1])\n            \n\n# Return image class based on list entry (path)         \ndef getClass(img):\n    return img.split(os.path.sep)[-2]\n\n\nprint(total_set[0])\nprint('GetClass : ', getClass(total_set[0]))\nprint('Label : ', total_labels[0])","978da553":"random.Random(seed).shuffle(total_set)\n\nfor ima in total_set[0:3] :\n    print(ima)\n    img = mpimg.imread(ima)\n    plt.figure(figsize=(7,7))\n    imgplot = plt.imshow(img, cmap=\"gray\")\n    plt.show()\n","145d06ad":"# Get data and separate it in sets\ntotal_len = len(total_set)\nindex = 0\n\ntrain_set = []\ntrain_label = []\n\nval_set = []\nval_label = []\n\ntest_set = []\ntest_label = []\n\n\nfor i in total_set[0: int(total_len*train_size)] :\n    train_set.append(i)\n    train_label.append(getClass(i))\n    \nindex = int(total_len*train_size)+1\n    \nfor i in total_set[index: int(index + total_len*val_size)] :\n    val_set.append(i)\n    val_label.append(getClass(i))\n    \nindex = int(index + total_len*val_size)+1 \n\nfor i in total_set[index: total_len] :\n    test_set.append(i)\n    test_label.append(getClass(i))\n\nprint(val_set[200])\nprint(val_label[200])\n","aac022b2":"#################################################\n# TRAIN SET\ninstances = [0] * len(classes)\nfor index, val in enumerate(classes) :\n    for e in train_set :\n        if(val == getClass(e)) :\n            instances[index] += 1\n\n            \ndf = pd.DataFrame({'classes':classes, 'entries':instances})\nax = df.sort_values(by='entries', ascending=True).plot.bar(x='classes', y='entries', color='cornflowerblue',legend=False, figsize=(12,8))\nax.set_title('Tobacco3482 TRAIN SET Distribution')\nax.set_ylabel(\"# entries\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), xy=(p.get_x(), p.get_height()-20))\n\n#################################################\n# VAL SET\ninstances = [0] * len(classes)\nfor index, val in enumerate(classes) :\n    for e in val_set :\n        if(val == getClass(e)) :\n            instances[index] += 1\n\n            \ndf = pd.DataFrame({'classes':classes, 'entries':instances})\nax = df.sort_values(by='entries', ascending=True).plot.bar(x='classes', y='entries', color='cornflowerblue',legend=False, figsize=(12,8))\nax.set_title('Tobacco3482 VAL SET Distribution')\nax.set_ylabel(\"# entries\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), xy=(p.get_x(), p.get_height()-3))\n    \n#################################################\n# TEST SET\ninstances = [0] * len(classes)\nfor index, val in enumerate(classes) :\n    for e in test_set :\n        if(val == getClass(e)) :\n            instances[index] += 1\n\n            \ndf = pd.DataFrame({'classes':classes, 'entries':instances})\nax = df.sort_values(by='entries', ascending=True).plot.bar(x='classes', y='entries', color='cornflowerblue',legend=False, figsize=(12,8))\nax.set_title('Tobacco3482 TEST SET Distribution')\nax.set_ylabel(\"# entries\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), xy=(p.get_x(), p.get_height()-8))","e2e22ec8":"def process_images(img_set) : \n    processed_img = []\n\n    for i in range(len(img_set)) :\n        processed_img.append(cv2.resize(cv2.imread(img_set[i], cv2.IMREAD_COLOR), (img_size, img_size)))\n    \n    return processed_img\n    \ndata_train = process_images(train_set)\ndata_test = process_images(test_set)\ndata_val = process_images(val_set)","146fcc94":"lb = LabelBinarizer()\nlb.fit(list(classes))\n\nx_train = np.array(data_train)\ny_train =lb.transform(np.array(train_label))\n\nx_test = np.array(data_test)\ny_test = lb.transform(np.array(test_label))\n\nx_val = np.array(data_val)\ny_val = lb.transform(np.array(val_label))\n\nprint(\"train shape : \", x_train.shape)\nprint(y_train.shape)\nprint(\"test shape : \", x_test.shape)\nprint(y_test.shape)\nprint(\"valdiation shape : \", x_val.shape)\nprint(y_val.shape)\n\n\nfor i in range(3) :\n    plt.figure(figsize=(6,6))\n    imgplot = plt.imshow(x_train[i])\n\nprint(train_label[0])\nprint(y_train[0])\n# find class with binarizer\nprint(lb.classes_)","bfdfcf88":"# Define our own plot function\ndef scatter(x, labels, subtitle=None):\n    # We choose a color palette with seaborn.\n    palette = np.array(sns.color_palette(\"hls\", 10))\n\n    # We create a scatter plot.\n    f = plt.figure(figsize=(8, 8))\n    ax = plt.subplot(aspect='equal')\n    sc = ax.scatter(x[:,0], x[:,1], lw=0, s=40,\n                    c=palette[labels.astype(np.int)])\n    plt.xlim(-25, 25)\n    plt.ylim(-25, 25)\n    ax.axis('off')\n    ax.axis('tight')\n\n    # We add the labels for each digit.\n    txts = []\n    for i in range(10):\n        # Position of each label.\n        xtext, ytext = np.median(x[labels == i, :], axis=0)\n        txt = ax.text(xtext, ytext, str(i), fontsize=24)\n        txt.set_path_effects([\n            PathEffects.Stroke(linewidth=5, foreground=\"w\"),\n            PathEffects.Normal()])\n        txts.append(txt)\n        \n    if subtitle != None:\n        plt.suptitle(subtitle)\n        \n    plt.savefig(subtitle)","dcccf0dc":"x_train_flat = x_train.reshape(-1,784)\nx_test_flat = x_test.reshape(-1,784)\n\nprint(x_train_flat.shape)\nprint(x_test_flat.shape)\n","ee2b3f85":"tsne = TSNE()\ntrain_tsne_embeds = tsne.fit_transform(x_train_flat[:20])\nscatter(train_tsne_embeds, y_train[:20], \"Samples from Training Data\")\n\neval_tsne_embeds = tsne.fit_transform(x_test_flat[:20])\nscatter(eval_tsne_embeds, y_test[:20], \"Samples from Validation Data\")","454ec829":"# Preprocess data (resize, transform to Numpy array and binarize)\n\n[https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.LabelBinarizer.html](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.LabelBinarizer.html)","1d61c629":"# Triplet LOSS","d825a328":"# Get all images","2eb60eb6":"# Visualize classes distribution (bar chart)","13194cd9":"# Global variables","69d04ff0":"# Plot data ","27590be3":"# Sorting data in usable sets\n![](https:\/\/cdn-images-1.medium.com\/max\/800\/1*HpvpA9pBJXKxaPCl5tKnLg.jpeg)","7367b6ed":"# Get classes and entries per classes","b44b0856":"# Imports"}}