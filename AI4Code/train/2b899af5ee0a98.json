{"cell_type":{"5d67bf41":"code","80b8cb2a":"code","ff06c057":"code","6e287f8c":"code","9ec342a0":"code","f0550657":"code","4e42fcf1":"code","cab75609":"code","5ce73372":"code","9691c316":"code","b062dea6":"code","d221f0dd":"code","2a09c078":"code","a6b2f396":"code","a14d1d13":"code","0671cda8":"code","7c61b5d3":"code","9edfe259":"code","50474b24":"code","71de03e3":"code","3bce3f99":"code","cd34b4fd":"code","ef3b1323":"code","22e68743":"code","4479f097":"code","2661408f":"code","f2c158c2":"code","ef7d2764":"code","5c58da61":"code","1c9ed582":"code","adf43eb1":"code","3aba69a1":"code","cde5e4d0":"code","aac21952":"code","6ac3be19":"code","a1768285":"code","1012375d":"code","44ab9d95":"code","54242a85":"code","664957fa":"code","3b8a3325":"code","bef5a793":"code","effd988b":"code","a88934cf":"code","007f79d9":"code","7d514e96":"code","493ecba7":"code","40fde45b":"code","03f1a13b":"code","f516ceb3":"code","d7557d36":"code","d07de702":"code","9e6376a9":"code","3e6b23e8":"code","7e3262ac":"code","35b582ee":"code","69e5c2f6":"code","37c382d6":"code","f04141f3":"markdown","5cdac3b6":"markdown","f85dac29":"markdown","e0eddeda":"markdown","c22940a9":"markdown","a2f8d769":"markdown","5df7c201":"markdown","51153c99":"markdown","5f657cba":"markdown","aa71a4cc":"markdown","551faec7":"markdown","e9e03fdc":"markdown","754727a3":"markdown","66eb8d62":"markdown","1738249c":"markdown"},"source":{"5d67bf41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n#Importing library for visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n#Importing all the required model for model comparision\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.neural_network import MLPClassifier\n\nfrom sklearn.svm import SVC\n\n#Importing library for splitting model into train and test and for data transformation\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import confusion_matrix,accuracy_score,roc_auc_score\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","80b8cb2a":"#Filter the unwanted warning\nimport warnings\nwarnings.simplefilter(\"ignore\")","ff06c057":"path = '\/kaggle\/input\/predicting-blood-analysis\/blood-train.csv'\npath1 = '\/kaggle\/input\/predicting-blood-analysis\/blood-test.csv'\nblood = path + 'blood-train.csv'\nblood1 = path1 + 'blood-test.csv'","6e287f8c":"train = pd.read_csv(path)\ntest = pd.read_csv(path1)","9ec342a0":"train.head()","f0550657":"#Printing the train and test size\nprint(\"Train Shape : \",train.shape)\nprint(\"Test Shape : \",test.shape)","4e42fcf1":"#Printing first five rows of data\ntrain.head()","cab75609":"#Counting the number of people who donated and not donated\ntrain[\"Made Donation in March 2007\"].value_counts()","5ce73372":"#Storing dependent variable in Y\nY=train.iloc[:,-1]\nY.head()","9691c316":"#Printing last 5 rows\ntrain.tail()","b062dea6":"#Removing Unnamed: 0 columns\nold_train=train\ntrain=train.iloc[:,1:5]\ntest=test.iloc[:,1:5]","d221f0dd":"#Printing firsr  rows\ntrain.head()","2a09c078":"#Merging both train and test data\ndf=pd.merge(train,test)","a6b2f396":"df.head()","a14d1d13":"#Setting the independent variable and dependent variable\nX=df.iloc[:,:]\nX.head()","0671cda8":"# Statistics of the data\ntrain.describe()","7c61b5d3":"#Boxplot for Months since Last Donation\nplt.figure(figsize=(20,10)) \nsns.boxplot(y=\"Months since Last Donation\",data=old_train)","9edfe259":"#Correlation between all variables [Checking how different variable are related]\ncorrmat=X.corr()\nf, ax = plt.subplots(figsize =(9, 8)) \nsns.heatmap(corrmat, ax = ax, cmap =\"YlGnBu\", linewidths = 0.1,fmt = \".2f\",annot=True) ","50474b24":"#Printing all unique value for Month Since Last donation\ntrain[\"Months since Last Donation\"].unique()","71de03e3":"#Creating new variable for calculating how many times a person have donated\nX[\"Donating for\"] = (X[\"Months since First Donation\"] - X[\"Months since Last Donation\"])","3bce3f99":"#Seeing first five rows of the DataFrame\nX.head()","cd34b4fd":"#Correlation between all variables\ncorrmat=X.corr()\nf, ax = plt.subplots(figsize =(9, 8)) \nsns.heatmap(corrmat, ax = ax, cmap =\"YlGnBu\", linewidths = 0.1,fmt = \".2f\",annot=True) ","ef3b1323":"#Dropping the unnecessary column\nX.drop([ 'Total Volume Donated (c.c.)'], axis=1, inplace=True)","22e68743":"X.head()","4479f097":"#Shape of independent variable\nX.shape","2661408f":"#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nscale=StandardScaler()\n\n#Fitting and transforming data\nX=scale.fit_transform(X)","f2c158c2":"train=X[:576]","ef7d2764":"train.shape","5c58da61":"test=X[576:]","1c9ed582":"Y=Y[:576]","adf43eb1":"Y.shape","3aba69a1":"#Splitting into train and test set\nxtrain,xtest,ytrain,ytest=train_test_split(train,Y,test_size=0.2,random_state=0)","cde5e4d0":"#Building the model\nlogreg = LogisticRegression(random_state=7)\n#Fitting the model\nlogreg.fit(xtrain,ytrain)","aac21952":"#Predicting on the test data\npred=logreg.predict(xtest)","6ac3be19":"accuracy_score(pred,ytest)","a1768285":"#Printing the roc_auc_score\nroc_auc_score(pred,ytest)","1012375d":"### SVC classifier\nSVMC = SVC(probability=True)\n#Fitting the model\nSVMC.fit(train,Y)","44ab9d95":"#Predicting on the test data\npred=SVMC.predict(xtest)","54242a85":"accuracy_score(pred, ytest)","664957fa":"#Printing the confusion matrix\nconfusion_matrix(pred,ytest)","3b8a3325":"#Printing the roc auc score\nroc_auc_score(pred,ytest)","bef5a793":"#Buildin the model\nRFC = RandomForestClassifier()\n#Fitting the model\nRFC.fit(xtrain,ytrain)","effd988b":"#Predicting the test data result\npred=RFC.predict(xtest)","a88934cf":"#Printing the confusion matrix\nconfusion_matrix(pred,ytest)","007f79d9":"accuracy_score(pred, ytest)","7d514e96":"#Printingthe roc auc score\nroc_auc_score(pred,ytest)","493ecba7":"#Building the model\nmodel=DecisionTreeClassifier(max_leaf_nodes=4,max_features=3,max_depth=15)","40fde45b":"#Fitting the model\nmodel.fit(xtrain,ytrain)","03f1a13b":"#Predicting the test data\npred=model.predict(xtest)","f516ceb3":"accuracy_score(pred, ytest)","d7557d36":"#printing the confusion matrix\nconfusion_matrix(pred,ytest)","d07de702":"#Printing accuracy score\naccuracy_score(pred,ytest)","9e6376a9":"#Printing roc auc score\nroc_auc_score(pred,ytest)","3e6b23e8":"#Building the Model\nclf_neural = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(25,),random_state=1)\nclf_neural.fit(train, Y)","7e3262ac":"#Predicting from the fitted model on test data\nprint('Predicting...\\nIn Test Data')\npredicted = clf_neural.predict(xtest)","35b582ee":"#printing confusion matrix\nconfusion_matrix(predicted,ytest)","69e5c2f6":"#Printing roc auc score\nroc_auc_score(pred,ytest)","37c382d6":"accuracy_score(pred, ytest)","f04141f3":"**Model Building**","5cdac3b6":"**Feature Transformation**","f85dac29":"**Data Exploration**","e0eddeda":"**Logistic regression**","c22940a9":"**MLP Classifier**","a2f8d769":"Since Total Volume Donated (c.c.) have the very high correlation with other variables so we are dropping the variable.","5df7c201":"**Random Forest**","51153c99":"**Reading the Data**","5f657cba":"**Feature Engineering**\n\nVolume donated is also a good feature to know wether the donor will donate or not.","aa71a4cc":"**Decision Tree**","551faec7":"**About the Project:**\n\nOne of the interesting aspects about blood is that it is not a typical commodity. First, there is the perishable nature of blood. Grocery stores face the dilemma of perishable products such as milk, which can be challenging to predict accurately so as to not lose sales due to expiration. Blood has a shelf life of approximately 42 days according to the American Red Cross (Darwiche, Feuilloy et al. 2010). However, what makes this problem more challenging than milk is the stochastic behavior of blood supply to the system as compared to the more deterministic nature of milk supply. Whole blood is often split into platelets, red blood cells, and plasma, each having their own storage requirements and shelf life. For example, platelets must be stored around 22 degrees Celsius, while red blood cells 4 degree Celsius, and plasma at -25 degrees Celsius. Moreover, platelets can often be stored for at most 5 days, red blood cells up to 42 days, and plasma up to a calendar year.\n\nAmazingly, only around 5% of the eligible donor population actually donate (Linden, Gregorio et al. 1988, Katsaliaki 2008). This low percentage highlights the risk humans are faced with today as blood and blood products are forecasted to increase year-on-year. This is likely why so many researchers continue to try to understand the social and behavioral drivers for why people donate to begin with. The primary way to satisfy demand is to have regularly occurring donations from healthy volunteers.","e9e03fdc":"**Aim Of Project:**\n\nTo build a model which can identify who is likely to donate blood again.\n\nModels implemented:\n\nLogistic Regression\n\nSuport Vector Machine\n\nRandom Forest\n\nDecision Tree\n\nMLP Classifier","754727a3":"**Support Vector Machine**","66eb8d62":"We see from the above boxplot that the maximum people have donated blood in nearby 10 months.","1738249c":"**StepsTo Follow**\n\n\n- Create the object\n- Do the necessary hyperparameter tuning\n- Fit the model\n- Predict the test set\n- Compute roc_auc_score\n- Repeat above step for all model\n- Compare roc_auc_Score of all model and choose the best model"}}