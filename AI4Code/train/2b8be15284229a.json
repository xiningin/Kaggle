{"cell_type":{"8931ad8d":"code","59c3c1e5":"code","723b9d34":"code","0d9bd9cd":"code","e435ecec":"code","9d6e72ea":"code","66f996a4":"code","54b6077f":"code","f67dd5ff":"code","d6c74dcd":"code","0d42070e":"code","7e4f1e8e":"code","598a34d7":"code","181ce675":"code","74bb1f79":"code","a226787a":"code","0ac39ce3":"code","832e33b9":"markdown","d410968b":"markdown","0ca912cd":"markdown","3f155971":"markdown","2959762f":"markdown"},"source":{"8931ad8d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59c3c1e5":"import numpy as np\nimport pandas as pd \nimport os\ndata=pd.DataFrame()\ndf=pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ndata['text']=df[:200]['text'].astype('str')\n\nsample=''\nfor x in range(10):\n    sample+=' '+data['text'][x]\n\ndata","723b9d34":"from nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem import LancasterStemmer\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport matplotlib.pyplot as plt\nimport string","0d9bd9cd":"sentences=sent_tokenize(sample)\nfoo=pd.DataFrame()\nstop_words = set(stopwords.words(\"english\"))\npunc = string.punctuation\nno_sw=[]\nfor sentence in sentences: \n    no_sw+=list(set(word_tokenize(sentence)) - stop_words -set(punc) )\nno_sw\nfoo['Tokens']=no_sw\nporter = PorterStemmer()\nlancaster=LancasterStemmer()\n\nps=[]\nlc=[]\nfor token in no_sw:\n    ps.append(porter.stem(token))\n    lc.append(lancaster.stem(token))\nfoo['Porter']=ps\nfoo['Lancaster']=lc\nfoo.head()","e435ecec":"no_puncts=[]\nfor x in data[:]['text']:\n    no_puncts.append(x.translate(str.maketrans('', '', punc)))\n    \ndata[\"no_punc\"] = pd.DataFrame(no_puncts)\ndata.head()","9d6e72ea":"no_stops=[]\nfor x in data[:]['no_punc']:\n    no_stops.append(' '.join([word for word in str(x).split() if word not in stop_words]))\n    \ndata['no_punc_stops'] = pd.DataFrame(no_stops)\ndata","66f996a4":"por=[]\nlan=[]\nfor x in data[:]['no_punc_stops']:\n    por.append(' '.join([porter.stem(word) for word in str(x).split() ]))\n    lan.append(' '.join([lancaster.stem(word) for word in str(x).split()]))\n    \ndata['porter'] = pd.DataFrame(por)\ndata['lancaster'] = pd.DataFrame(lan)\ndata","54b6077f":"wordcloud_por = WordCloud(background_color=\"white\").generate(\" \".join(foo['Porter']))\nplt.figure(figsize = (15,15))\nplt.imshow(wordcloud_por, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","f67dd5ff":"wordcloud_lem = WordCloud(background_color=\"white\").generate(\" \".join(foo['Lancaster']))\nplt.figure(figsize = (10,10))\nplt.imshow(wordcloud_lem, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","d6c74dcd":"wordcloud_tok = WordCloud(background_color=\"white\").generate(\" \".join(foo['Tokens']))\nplt.figure(figsize = (10,10))\nplt.imshow(wordcloud_pot, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","0d42070e":"from collections import Counter\n\nd = {}\nfor i in foo['Tokens']:\n    if i not in d:\n        d[i]=1\n    else:\n        d[i]+=1\n\nword_counter = Counter(d)\nfor word, count in word_counter.most_common(10):\n    print(word, \": \", count)\n    \nlst = word_counter.most_common(10)\ndf = pd.DataFrame(lst, columns = ['Word', 'Count'])\ndf.plot.bar(x='Word',y='Count')","7e4f1e8e":"d = {}\nfor i in foo['Porter']:\n    if i not in d:\n        d[i]=1\n    else:\n        d[i]+=1\n\nword_counter = Counter(d)\nfor word, count in word_counter.most_common(10):\n    print(word, \": \", count)\n    \nlst = word_counter.most_common(10)\ndf = pd.DataFrame(lst, columns = ['Word', 'Count'])\ndf.plot.bar(x='Word',y='Count')","598a34d7":"d = {}\nfor i in foo['Lancaster']:\n    if i not in d:\n        d[i]=1\n    else:\n        d[i]+=1\n\nword_counter = Counter(d)\nfor word, count in word_counter.most_common(10):\n    print(word, \": \", count)\n    \nlst = word_counter.most_common(10)\ndf = pd.DataFrame(lst, columns = ['Word', 'Count'])\ndf.plot.bar(x='Word',y='Count')","181ce675":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom PIL import Image\nfrom wordcloud import WordCloud, ImageColorGenerator\nbackground_image = np.array(Image.open('..\/input\/picture\/new6.jpg'))\nplt.imshow(background_image)","74bb1f79":"text2 = open('..\/input\/textfile\/Lecture03.txt', 'r').read()","a226787a":"# Creating word_cloud with text as argument in .generate() method\nword_cloud2 = WordCloud(background_color = 'white',mask = background_image, \n               width = 2048, height = 1080).generate(text2)\n\n# font color matching the masked image\nimg_colors = ImageColorGenerator(background_image)\nword_cloud2.recolor(color_func = img_colors)\n\n#saving the image\nword_cloud2.to_file('photo.png')","0ac39ce3":"plt.imshow(word_cloud2, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","832e33b9":"**Practical 2**\n\n**Name: Shail Harshil Shah**\n\n\n**Roll no: 19bce232**","d410968b":"**Word cloud visualization**","0ca912cd":"**Punctuation removal**","3f155971":"**Stop word removal**","2959762f":"**Stemming**"}}