{"cell_type":{"5ebdd3a5":"code","6481ebd2":"code","e5cf94b9":"code","01fe68f0":"code","2ede0364":"code","e8eed485":"code","589b59ff":"code","d6c87533":"code","ea8c66ba":"code","d0a81a30":"code","5132fa43":"code","7708ecb5":"code","3e97f096":"code","a33f9698":"code","3a4a8dbc":"code","121b2cd0":"code","62f27500":"code","01ed2f9c":"code","697d6a5d":"code","8c060b12":"code","74b7c04c":"code","37837d75":"code","7c37b066":"code","fe05d544":"code","be2cafaf":"code","e831f342":"code","f3d82356":"code","ddf9fae2":"code","5608bbf2":"code","2fe6d961":"code","8f14b430":"code","a1b8e198":"code","8306adbb":"code","acedfa0a":"code","0f489534":"code","0df1e369":"code","f6285bac":"code","d9a1ea04":"code","dd0d95ed":"markdown","296689af":"markdown","c3a76523":"markdown","a586138e":"markdown","69d85901":"markdown","eef41718":"markdown","99089f8e":"markdown","122215da":"markdown","565c13ba":"markdown","2650f9dc":"markdown","34f66da1":"markdown","ea65e087":"markdown","3f05e1a8":"markdown","4674bfd8":"markdown","7c015bba":"markdown","c165e5ae":"markdown","3cf8f07d":"markdown","3e75d769":"markdown","6fa99355":"markdown","8390e4fa":"markdown","1b5182db":"markdown","0c1df6b5":"markdown","9cf57866":"markdown","e34dc3e1":"markdown","801a846a":"markdown","143c4bc0":"markdown","97d44fcd":"markdown","8e7afeb9":"markdown","9f8923bb":"markdown","64c60915":"markdown","d2bec641":"markdown","9470f084":"markdown","4c1a9042":"markdown","f510d8e9":"markdown","9b4df1da":"markdown","5d154e0a":"markdown"},"source":{"5ebdd3a5":"%config InlineBackend.figure_format = 'svg'\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nimport numpy as np\nimport pandas as pd    \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pylab import *\n\nfrom sklearn.preprocessing import Normalizer, RobustScaler, MaxAbsScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nfrom sklearn import tree\nfrom tabulate import tabulate\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom pandas.plotting import scatter_matrix","6481ebd2":"salary_table = pd.read_csv(\"..\/input\/salary\/NBA_season1718_salary.csv\",encoding = 'utf-8') \nseasons = pd.read_csv(\"..\/input\/nba-players-stats\/Seasons_Stats.csv\",encoding = 'utf-8')  ","e5cf94b9":"salary_table = salary_table[['Player','season17_18']]\nsalary_table.rename(columns={'season17_18':'salary17_18'},inplace = True) #variable rename\nsalary_table['salary17_18'] = salary_table['salary17_18']\/1000000 #transform salary to 'million'\n\nseasons = seasons[seasons['Year']>=2017] \nstats17 = seasons[['Year','Player','Pos','Age','G','PER',\n                   'MP','PTS','AST','TRB','TOV','BLK','STL']]\n\nstats17.drop_duplicates(subset=['Player'], keep='first',inplace=True) #drop duplicate data\n\nc = ['MPG','PPG','APG','RPG','TOPG','BPG','SPG']\nw = ['MP','PTS','AST','TRB','TOV','BLK','STL'] \n\nfor i,s in zip(c,w):\n    stats17[i] = stats17[s] \/ stats17['G']\n\nstats17.drop(w,axis=1,inplace=True)\n#stats17.drop(['G'],axis=1,inplace=True)\nstats17.loc[stats17['Pos'] == 'PF-C','Pos'] = 'PF'\nstats_salary = pd.merge(stats17, salary_table) \n","01fe68f0":"stats_salary.columns","2ede0364":"stats_salary.drop_duplicates(subset=['Player'],keep='first',inplace=True)\nstats_salary.sort_values(by='PPG',ascending=False,inplace = True)\nstats_salary[['Player','PPG']].head(10)","e8eed485":"stats_salary.sort_values(by='PER',ascending = False,inplace = True)\nstats_salary[['Player','PER']].head(10)","589b59ff":"stats_salary.sort_values(by='Age',ascending = False,inplace = True)\nstats_salary[['Player','Age']].head(10)","d6c87533":"stats_salary.sort_values(by='TOPG',ascending=False,inplace = True)\nstats_salary[['Player','TOPG']].head(10)","ea8c66ba":"sns.set_style(\"white\")","d0a81a30":"heat_salary= stats_salary[['salary17_18','Pos','MPG','PPG','APG','RPG','TOPG',\n                           'BPG','SPG','Age','PER']]\ndfData = heat_salary.corr() \nsns.heatmap(dfData)","5132fa43":"sns.lmplot(x=\"Age\", y=\"PPG\",hue=\"Pos\",col=\"Pos\",col_wrap=3, \n           data=stats_salary,lowess=True).set(\n    xlabel='Position', \n    ylabel='Average Points Per Game')","7708ecb5":"sns.boxplot(x=\"Pos\", y=\"TOPG\", data=stats_salary).set(\n    xlabel='Position', \n    ylabel='Average Turnovers Per Game')","3e97f096":"sns.violinplot(x=\"Pos\", y=\"BPG\", data=stats_salary).set(\n    xlabel='Position', \n    ylabel='Average Blocks Per Game')","a33f9698":"#from mpl_toolkits.mplot3d import Axes3D\n#sns.pairplot(heat_salary)","3a4a8dbc":"#scatter_matrix(heat_salary)\nscatter_matrix(heat_salary, alpha=0.2, figsize=(10,10), diagonal='kde')","121b2cd0":"salary_table['salary17_18'].describe()","62f27500":"plt.hist(stats_salary['salary17_18'],density=True,bins=50)\nplt.xlabel('2017-2018 Salary(million)')\nplt.ylabel('Density')\nplt.show()","01ed2f9c":"# to convert categorical feature to dummy. make new dummies into name_value.\n# it will automatic delete a value group as reference, which default to be biggest group.\ndef convert_dummy(df, feature,rank=0): \n    pos = pd.get_dummies(df[feature], prefix=feature)\n    mode = df[feature].value_counts().index[rank]\n    biggest = feature + '_' + str(mode)\n    pos.drop([biggest],axis=1,inplace=True)\n    df.drop([feature],axis=1,inplace=True)\n    df=df.join(pos)\n    return df","697d6a5d":"stats_salary = convert_dummy(stats_salary,'Pos')","8c060b12":"#from sklearn.externals.six import StringIO\n#import pydotplus\n#import graphviz\n#from IPython.display import Image  \n#import os \n\nstats_salary = stats_salary.dropna()\nY = stats_salary['salary17_18']\nX = stats_salary.drop(['salary17_18','Year', 'Player'],axis=1)","74b7c04c":"X.columns","37837d75":"# Now let us rescale our data\ntransformer = MaxAbsScaler().fit(X) # Scale each feature by its maximum absolute value.\nnewX = transformer.transform(X)\nnewX = pd.DataFrame(newX,columns = X.columns)","7c37b066":"X.head()","fe05d544":"newX.head() # transformed data","be2cafaf":"newX.describe()","e831f342":"#transformer = MinMaxScaler().fit(heat)\n#newX = transformer.transform(heat)\n#newX = pd.DataFrame(newX)\n#scatter_matrix(newX, alpha=0.2, figsize=(10,10), diagonal='kde')\n#newX.head()\n#X.head()","f3d82356":"#transformer = RobustScaler().fit(heat)\n#newX = transformer.transform(heat)\n#newX = pd.DataFrame(newX)\n#scatter_matrix(newX, alpha=0.2, figsize=(10,10), diagonal='kde')\n#sns.pairplot(pd.DataFrame(newX))\n#newX","ddf9fae2":"#from sklearn.preprocessing import StandardScaler\n#transformer = StandardScaler().fit(heat)\n#newX2 = transformer.transform(heat)\n#newX2 = pd.DataFrame(newX2)\n#scatter_matrix(newX2, alpha=0.2, figsize=(10,10), diagonal='kde')\n#newX2","5608bbf2":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.3) \nx_train_NEW, x_test_NEW, y_train_NEW, y_test_NEW = train_test_split(newX, Y, test_size = 0.3) ","2fe6d961":"# Define a function to evaluation regression algorithms, model is fitted algorithms \n# predict is for if display comparison of prediction and true value of test data.\ndef RegEvaluation(model, ytest, xtest, nameindex, yname,totaldt, predict=True):\n    ypred = model.predict(xtest)\n    xtest['Pred_Y'] = model.predict(xtest)\n    dt = pd.merge(totaldt,xtest,how = 'right')\n    xtest.drop(['Pred_Y'],axis=1,inplace=True)\n    dt = dt[[nameindex, yname,'Pred_Y']]\n    dt.sort_values(by = yname, ascending = False,inplace=True)\n    rmse = np.sqrt(mean_squared_error(ytest, ypred))\n    r2 = r2_score(ytest, ypred)\n    print('RMSE is', rmse)\n    print('R sequared is', r2)\n    if predict:\n        return dt.head(20)","8f14b430":"\nclf = tree.DecisionTreeRegressor(max_depth=4, criterion=\"mse\") \ndtree = clf.fit(x_train, y_train)\n\nRegEvaluation(dtree, y_test, x_test, 'Player', 'salary17_18',stats_salary)","a1b8e198":"dtree = clf.fit(x_train_NEW, y_train_NEW)\nRegEvaluation(dtree, y_test_NEW, x_test_NEW, \n              'Player', 'salary17_18',stats_salary,predict=False)","8306adbb":"sns.set_style(\"whitegrid\")","acedfa0a":"values = sorted(zip(x_train.columns, clf.feature_importances_), key=lambda x: x[1] * -1)\nimp = pd.DataFrame(values,columns = [\"Name\", \"Score\"])\nimp.sort_values(by = 'Score',inplace = True)\nsns.scatterplot(x='Score',y='Name',linewidth=0,\n                data=imp,s = 30, color='red').set(\n    xlabel='Importance', \n    ylabel='Variables')","0f489534":"stats_salary = stats_salary.dropna()\n\nreg = AdaBoostRegressor(DecisionTreeRegressor(max_depth=5),\n                          n_estimators=500)\nadaboost = reg.fit(x_train, y_train)\n\nRegEvaluation(adaboost, y_test, x_test, 'Player', 'salary17_18',stats_salary)","0df1e369":"ada = reg.fit(x_train_NEW, y_train_NEW)\nRegEvaluation(ada, y_test_NEW, x_test_NEW, \n              'Player', 'salary17_18',stats_salary,predict=False)","f6285bac":"values = sorted(zip(x_train.columns, reg.feature_importances_), key = lambda x: x[1] * -1)\nimp = pd.DataFrame(values,columns = [\"Name\", \"Score\"])\nimp.sort_values(by = 'Score',inplace = True)\nsns.scatterplot(x='Score',y='Name',linewidth=0,\n                data=imp,s = 30, color='red').set(\n    xlabel='Importance', \n    ylabel='Variables')","d9a1ea04":"#?pd.DataFrame.sort_values","dd0d95ed":"+ Comparison of real and predicted values (Test data)","296689af":"## Average Points Per Game Ranking","c3a76523":"## CART","a586138e":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Data-Wrangling\" data-toc-modified-id=\"Data-Wrangling-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Data Wrangling<\/a><\/span><\/li><li><span><a href=\"#Descriptive-Statistics-&amp;--Data-Visualization\" data-toc-modified-id=\"Descriptive-Statistics-&amp;--Data-Visualization-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Descriptive Statistics &amp;  Data Visualization<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Average-Points-Per-Game-Ranking\" data-toc-modified-id=\"Average-Points-Per-Game-Ranking-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;<\/span>Average Points Per Game Ranking<\/a><\/span><\/li><li><span><a href=\"#Player-Efficiency-Rating-Ranking\" data-toc-modified-id=\"Player-Efficiency-Rating-Ranking-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;<\/span>Player Efficiency Rating Ranking<\/a><\/span><\/li><li><span><a href=\"#High-Age-Players-Ranking\" data-toc-modified-id=\"High-Age-Players-Ranking-2.3\"><span class=\"toc-item-num\">2.3&nbsp;&nbsp;<\/span>High Age Players Ranking<\/a><\/span><\/li><li><span><a href=\"#Turnover-Ranking\" data-toc-modified-id=\"Turnover-Ranking-2.4\"><span class=\"toc-item-num\">2.4&nbsp;&nbsp;<\/span>Turnover Ranking<\/a><\/span><\/li><li><span><a href=\"#Correlation-Plot\" data-toc-modified-id=\"Correlation-Plot-2.5\"><span class=\"toc-item-num\">2.5&nbsp;&nbsp;<\/span>Correlation Plot<\/a><\/span><\/li><li><span><a href=\"#Correlation-between-Points-per-game-and-age\" data-toc-modified-id=\"Correlation-between-Points-per-game-and-age-2.6\"><span class=\"toc-item-num\">2.6&nbsp;&nbsp;<\/span>Correlation between Points per game and age<\/a><\/span><\/li><li><span><a href=\"#Which-position-is-the-most-prone-to-turnovers?\" data-toc-modified-id=\"Which-position-is-the-most-prone-to-turnovers?-2.7\"><span class=\"toc-item-num\">2.7&nbsp;&nbsp;<\/span>Which position is the most prone to turnovers?<\/a><\/span><\/li><li><span><a href=\"#Who-has-the-most-blocks?\" data-toc-modified-id=\"Who-has-the-most-blocks?-2.8\"><span class=\"toc-item-num\">2.8&nbsp;&nbsp;<\/span>Who has the most blocks?<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Preprocessing\" data-toc-modified-id=\"Preprocessing-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Preprocessing<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Dependent-Variable\" data-toc-modified-id=\"Dependent-Variable-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;<\/span>Dependent Variable<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Algorithms\" data-toc-modified-id=\"Algorithms-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Algorithms<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#CART\" data-toc-modified-id=\"CART-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;<\/span>CART<\/a><\/span><\/li><li><span><a href=\"#AdaBoost\" data-toc-modified-id=\"AdaBoost-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;<\/span>AdaBoost<\/a><\/span><\/li><\/ul><\/li><\/ul><\/div>","69d85901":"The most important feature deciding players' salary is minutes per game. When play time longer than 31 minuates,which is standard for starting players, the expectation of salary is 18 millions dollars. When the time is less than 31.4 minuates, the average salary is just 5.18 millions dollars. For those who have more playing time, next important features are PER and Age. Players are more efficient and more aged tend to have higher salary. Using Standardized features, $RMSE$ decreases and $R^2$ imporves. Data preprocessing is really important for predicting.","eef41718":"#  Preprocessing","99089f8e":"+ display some of test data prediction results","122215da":"## Turnover Ranking\n+ In the turnover list per game, James Harden ranked first, this should be related to the ball, and will be verified later.","565c13ba":"+ The results of the AdaBoost algorithm show that the average playing time and efficiency rate have the most important impact on salary, while the average score is only ranked third. This is quite different from the decision tree results.","2650f9dc":"## AdaBoost","34f66da1":"Answer\uff1aPoint Guards","ea65e087":"+ Unsurprisingly, the average score has the greatest impact on salary levels. The second factor is age. Average turnover and steals have no effect on salary.","3f05e1a8":"## Correlation Plot","4674bfd8":"+ Age and multiple data indicators are weakly correlated.\n+ Average turnovers per game and playing time have strong correlation, and it might explain why James Harden has some many turnovers averagely.\n+ Because of position, there is almost no correlation between averaging blocks and assists per game.","7c015bba":"## Which position is the most prone to turnovers?","c165e5ae":"## High Age Players Ranking","3cf8f07d":"## Who has the most blocks? \nno doubt","3e75d769":"> [How does AdaBoost Classifer predict?](https:\/\/machinelearningmastery.com\/boosting-and-adaboost-for-machine-learning\/): Adaboost iteratively generates K weak classifiers. The final model is the addition of K weak classifiers. Of course, each base classifier is multiplied by its own weight. For the two-class problem (-1,1), each weak classifier will calculate a prediction result of -1 or 1. These prediction results are multiplied by the weighting coefficients of the respective weak classifiers and added. If the final result is greater than 0, it is predicted to be positive (1); otherwise, it is predicted to be negative (-1). ","6fa99355":"For point guards, age and average scores are inverse U-shaped.","8390e4fa":"Most variables are skew, thus we should rescale them.","1b5182db":"+ Variable Importance","0c1df6b5":"+ [Data from Kaggle](https:\/\/www.kaggle.com\/koki25ando\/nba-salary-prediction-using-multiple-regression\/comments)","9cf57866":"+ Variable Explaining\n\n\nVariable | meaning\n------------- | -------------\nPos | Position\nMPG | Average Minutes played Per Game\nPPG | Average Points Per Game\nAPG | Average Assists Per Game\nRPG | Average Rebounds Per Game\nTOPG | Average Turnovers Per Game\nBPG | Average Blocks Per Game\nSPG | Average Steals Per Game\nPER | Player Efficiency Rating\nG | Games Attended\nAGE | Age\nsalary17_18 | 2017-2018 Salary(million)","e34dc3e1":"## Correlation between Points per game and age","801a846a":"<font size=5 >NBA Players Salary Prediction<\/font>","143c4bc0":"![](https:\/\/images.complex.com\/complex\/image\/upload\/c_fill,dpr_auto,f_auto,fl_lossy,g_face,q_auto,w_1280\/jordan-rodman-pippen_fmecu8.jpg)","97d44fcd":"The new transformed features has been standardize, for example, age.","8e7afeb9":"<font size=4 >Python Application Using AdaBoost Algorithm<\/font>","9f8923bb":"Author\uff1a[Xiao Song](https:\/\/xsong.ltd\/) ","64c60915":"# Algorithms","d2bec641":"## Dependent Variable","9470f084":"![hqdefault.jpg](attachment:hqdefault.jpg)","4c1a9042":"# Descriptive Statistics &  Data Visualization","f510d8e9":"## Player Efficiency Rating Ranking","9b4df1da":"# Data Wrangling","5d154e0a":"Apperantly\uff0cAdaBoost has a higher prediction accuracy. Using Standardized features, $R^2$ has imporved."}}