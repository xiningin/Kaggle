{"cell_type":{"f7c224e5":"code","50abed44":"code","2bd2c9d6":"code","33c6b163":"code","528dc3b1":"code","c8c73173":"code","f1b652c6":"code","f886dc8d":"code","eaf61eb3":"code","a4fdc188":"code","c4fb7a2b":"code","e81b43a0":"code","617d6564":"code","da8979f7":"code","98e92cce":"code","db9e2af1":"code","d97a0929":"code","c8ab6710":"code","ac48e25e":"code","e1d55c97":"code","df345c91":"code","9b57068f":"code","e802b368":"code","94a55cef":"code","468ebd98":"code","73c54082":"code","5c19cb6e":"code","dc2ba24c":"code","4fab881e":"code","eb58ffa9":"code","242a18ff":"code","7a602143":"code","ac56dd3a":"code","5c5d8a9a":"code","dd64e154":"code","085371a5":"code","3cbb254f":"code","c05f22d6":"code","58b01d80":"code","57c2e8f5":"code","2afd2d89":"code","1c86a6e5":"code","735c3bfb":"code","7a6916e5":"code","438194f0":"code","6cab0ff8":"code","b089c525":"code","c5e66cf0":"code","cfdafc97":"code","b15ccebc":"code","803b7618":"code","fbc68764":"markdown","d1e756f3":"markdown","63f0f4a0":"markdown","d194dd63":"markdown","b503f425":"markdown","f67edc32":"markdown","354ccacb":"markdown","9239da7e":"markdown","05c45cf5":"markdown","eb0b56c7":"markdown","9c4ab02b":"markdown","2092ca7c":"markdown","e1646a35":"markdown","305ac930":"markdown","5e71801a":"markdown","36bb4003":"markdown","11a7bb7e":"markdown","726bafe0":"markdown"},"source":{"f7c224e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n#essential libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\nfrom urllib.request import urlopen\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport plotly.express as ex\nimport plotly.graph_objs as gp\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nimport folium\n\n#Colour codes\nconf = '#393e46' \ndeth = '#ff2e63'  \ncure = '#21bf73'\nacti = '#fe9801'\n\n#Extra Libraries\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n#To remove the warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","50abed44":"df_india = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv',parse_dates=['Date'], dayfirst=True)\ndf_coordinates = pd.read_csv('\/kaggle\/input\/coronavirus-cases-in-india\/Indian Coordinates.csv')\ndf_India_perday = pd.read_excel('\/kaggle\/input\/coronavirus-cases-in-india\/per_day_cases.xlsx',sheet_name='India', parse_dates=['Date'])\ndf_Italy_perday = pd.read_excel('\/kaggle\/input\/coronavirus-cases-in-india\/per_day_cases.xlsx',sheet_name='Italy', parse_dates=['Date'])\ndf_Korea_perday = pd.read_excel('\/kaggle\/input\/coronavirus-cases-in-india\/per_day_cases.xlsx',sheet_name='Korea', parse_dates=['Date'])","2bd2c9d6":"df_india.head()","33c6b163":"df_coordinates.dropna(axis = 1, inplace = True)\ndf_coordinates.head()","528dc3b1":"df_coordinates.rename(columns = {'Name of State \/ UT':'State\/UnionTerritory'}, inplace = True)\ndf_coordinates.head()","c8c73173":"df_india.shape","f1b652c6":"df_india.isnull().sum()","f886dc8d":"df_india.dropna(axis = 0, inplace = True)","eaf61eb3":"df_india.isnull().sum()","a4fdc188":"df_india[\"State\/UnionTerritory\"].replace({'Chattisgarh': 'Chhattisgarh ',\n                                          'Chhattisgarh' :'Chhattisgarh ',\n                                          'Puducherry' : 'Pondicherry',\n                                          'Himachal Pradesh' : 'Himachal Pradesh ',\n                                          'Madhya Pradesh' : 'Madhya Pradesh ',\n                                          'Bihar':'Bihar ',\n                                          'Himachal Pradesh':'Himachal Pradesh ',\n                                          'Manipur':'Manipur ',\n                                          'West Bengal':'West Bengal ',\n                                          'Goa' : 'Goa '}, inplace=True)","c4fb7a2b":"df_india = pd.merge(df_india, df_coordinates, how='left', on='State\/UnionTerritory')","e81b43a0":"df_india.isnull().sum()\n","617d6564":"df_india[['Latitude','Longitude']] = df_india[['Latitude','Longitude']].fillna(0)\ndf_india.isnull().sum()","da8979f7":"df_india = df_india.drop('Sno', axis = 1) \ndf_india.head()","98e92cce":"df_india.shape","db9e2af1":"df_india.to_csv('Processed_data.csv')","d97a0929":"#Rearranging the columns\ndf_india = df_india[['Date', 'State\/UnionTerritory', 'Latitude', 'Longitude','ConfirmedIndianNational','ConfirmedForeignNational','Cured','Deaths']]","c8ab6710":"Total_cases = ['ConfirmedIndianNational','ConfirmedForeignNational','Cured','Deaths','Active']\n\n#Active = Confirmed - Deaths - Cured\ndf_india['Active'] = (df_india['ConfirmedIndianNational'] + df_india['ConfirmedForeignNational']) - df_india['Deaths'] - df_india['Cured']","ac48e25e":"df_india.head()","e1d55c97":"#Fill Null Values with Zeros\ndf_india[Total_cases] = df_india[Total_cases].fillna(0)","df345c91":"# cases in Maharashtra\nmaha = df_india[df_india['State\/UnionTerritory'].str.contains('Maharashtra')]\nmaha.head()","9b57068f":"# cases in Kerala\nkerala = df_india[df_india['State\/UnionTerritory'].str.contains('Kerala')]\nkerala.head()","e802b368":"df_india_latest = df_india.groupby('Date')['ConfirmedIndianNational','ConfirmedForeignNational','Deaths', 'Cured', 'Active'].sum().reset_index()\ndf_india_latest.style.background_gradient(cmap='Reds')","94a55cef":"Indian_National = df_india['ConfirmedIndianNational'].sum()\nForeigners = df_india['ConfirmedForeignNational'].sum()\ndct ={\"Indian\": Indian_National,\"Foriengners\":Foreigners}\ncolors=['orange','blue']\nplt.figure(figsize = (10,10))\nplt.pie(dct.values(),labels=dct.keys(),colors=colors,shadow=True,explode=(0.1, 0.1), autopct='%1.2f%%')\nplt.axis('equal')\nplt.show()","468ebd98":"slate = df_india_latest[df_india_latest['Date']==max(df_india_latest['Date'])].reset_index(drop=True)\nslate.style.background_gradient(cmap='copper')","73c54082":"plot = slate.melt(id_vars=\"Date\", value_vars=['Active','Cured','Deaths'])\nplot","5c19cb6e":"matt = ex.treemap(plot, path=['variable'], values=\"value\", height=500, width=800,\n                color_discrete_sequence=[acti,cure,deth])\nmatt.show() ","dc2ba24c":"india_latest = df_india[df_india['Date']==max(df_india['Date'])].reset_index()\nindia_latest_groupby = india_latest.groupby('State\/UnionTerritory')['ConfirmedIndianNational','ConfirmedForeignNational','Cured','Deaths','Active'].sum().reset_index()\nindia_latest_groupby.style.background_gradient(cmap='OrRd')","4fab881e":"#confirmed cases\nstate_confirmed = india_latest_groupby.sort_values(by='ConfirmedIndianNational', ascending=False)\nstate_confirmed = state_confirmed.reset_index(drop=True)\nstate_confirmed.style.background_gradient(cmap='OrRd')","eb58ffa9":"states_with_death = state_confirmed[state_confirmed['Deaths']>0][['State\/UnionTerritory','Deaths']]\nstates_with_death.sort_values('Deaths',ascending=False).reset_index(drop=True).style.background_gradient(cmap='OrRd')","242a18ff":"no_recovery = state_confirmed[state_confirmed['ConfirmedIndianNational']+ state_confirmed['ConfirmedForeignNational'] == \n                              state_confirmed['Deaths']+ state_confirmed['Cured']]\nno_recovery = no_recovery[['State\/UnionTerritory','ConfirmedIndianNational','ConfirmedForeignNational','Deaths','Cured']]\nno_recovery = no_recovery.sort_values('ConfirmedIndianNational', ascending=False)\nno_recovery['Cured'].count()","7a602143":"#India\nIndia = folium.Map(location=[20.5937,78.9629], tiles='cartodbpositron', min_zoom=4, max_zoom=10, zoom_start=4)\nfor i in range(0, len(df_india)):\n    folium.Circle(\n        location=[df_india.iloc[i]['Latitude'],df_india.iloc[i]['Longitude']],\n                  color='crimson',\n                  tooltip = '<li><bold>State\/UnionTerritory : '+str(df_india.iloc[i]['State\/UnionTerritory'])+\n                            '<li><bold>ConfirmedIndianNational : '+str(df_india.iloc[i]['ConfirmedIndianNational'])+\n                            '<li><bold>ConfirmedForeignNational : '+str(df_india.iloc[i]['ConfirmedForeignNational'])+\n                            '<li><bold>Deaths : '+str(df_india.iloc[i]['Deaths'])+\n                            '<li><bold>Cured : '+str(df_india.iloc[i]['Cured']),\n                  radius=int(df_india.iloc[i]['ConfirmedIndianNational'])**1.1).add_to(India)\nIndia\n\n#The output is not 100% correct as there was some issue with the cordinates.","ac56dd3a":"graph = df_india.groupby('Date')['Cured', 'Deaths', 'Active'].sum().reset_index()\ngraph = graph.melt(id_vars='Date', value_vars=['Cured', 'Deaths', 'Active'],\n         var_name='Case', value_name='Count')\ngraph.head()\n\nfig=ex.area(graph, x='Date', y='Count', color='Case',\n           title = 'Cases over time', color_discrete_sequence=[cure, deth, acti])\nfig.show()","5c5d8a9a":"Cure_over_Death = df_india.groupby('Date').sum().reset_index()\n\nCure_over_Death['No. of Deaths to 100 Confirmed Cases'] = round(Cure_over_Death['Deaths']\/(Cure_over_Death['ConfirmedIndianNational']+Cure_over_Death['ConfirmedForeignNational']),3)*100\nCure_over_Death['No. of Recovered to 100 Confirmed Cases'] = round(Cure_over_Death['Cured']\/(Cure_over_Death['ConfirmedIndianNational']+Cure_over_Death['ConfirmedForeignNational']),3)*100\n\nCure_over_Death = Cure_over_Death.melt(id_vars ='Date',\n                          value_vars=['No. of Deaths to 100 Confirmed Cases','No. of Recovered to 100 Confirmed Cases'],\n                          var_name='Ratio',\n                          value_name='Value')\n\nfig = ex.line(Cure_over_Death, x='Date', y='Value', color='Ratio', log_y=True,\n             title='Cure_over_Death', color_discrete_sequence=[deth,cure])\n\nfig.show()","dd64e154":"df_india_data = df_india.drop(['Latitude', 'Longitude'], axis=1)\ndf_india_data['TotalConfirmed'] = df_india_data['ConfirmedIndianNational'] + df_india_data['ConfirmedForeignNational']\ndf_india_data = df_india_data[['Date', 'State\/UnionTerritory','TotalConfirmed','ConfirmedIndianNational','ConfirmedForeignNational','Cured','Deaths','Active']]\ndf_india_data.head()","085371a5":"\nspread = df_india_data[df_india_data['TotalConfirmed']!=0].groupby('Date')['State\/UnionTerritory'].unique().apply(len)\nspread = pd.DataFrame(spread).reset_index()\n\nspread_graph = ex.line(spread, x='Date', y='State\/UnionTerritory', text='State\/UnionTerritory',\n              title='Number of State\/UnionTerritory to which COVID-19 spread over the time',\n              color_discrete_sequence=[conf,deth, cure])\nspread_graph.update_traces(textposition='top center')\nspread_graph.show()","3cbb254f":"Spread = df_india_data.groupby(['Date', 'State\/UnionTerritory'])['TotalConfirmed'].sum().reset_index().sort_values('TotalConfirmed', ascending=False)\n\nex.line(Spread, x=\"Date\", y=\"TotalConfirmed\", color='State\/UnionTerritory', title='Spread over time', height=600)","c05f22d6":"latest_date = india_latest_groupby\nlatest_date['TotalConfirmed'] = latest_date['ConfirmedIndianNational'] + latest_date['ConfirmedForeignNational']\nlatest_date = latest_date[['State\/UnionTerritory','TotalConfirmed','ConfirmedIndianNational','ConfirmedForeignNational','Cured','Deaths','Active']]\nlatest_date.head()","58b01d80":"Confirmed_bar = ex.bar(latest_date.sort_values('TotalConfirmed', ascending=False).head(30).sort_values('TotalConfirmed', ascending=True), \n             x=\"TotalConfirmed\", y=\"State\/UnionTerritory\", title='Confirmed Cases', text='TotalConfirmed', orientation='h', \n             width=900, height=700, range_x = [0, max(latest_date['TotalConfirmed'])+15])\nConfirmed_bar.update_traces(marker_color='#46cdcf', opacity=0.8, textposition='outside')\nConfirmed_bar.show()","57c2e8f5":"Death_rate_bar = ex.bar(latest_date.sort_values('Deaths', ascending=False).head(30).sort_values('Deaths', ascending=True), \n             x=\"Deaths\", y=\"State\/UnionTerritory\", title='Death in each state', text='Deaths', orientation='h', \n             width=800, height=700, range_x = [0, max(latest_date['Deaths'])+0.5])\nDeath_rate_bar.update_traces(marker_color='#46cdcf', opacity=0.8, textposition='outside')\nDeath_rate_bar.show()","2afd2d89":"cure_bar = ex.bar(latest_date.sort_values('Cured', ascending=False).head(30).sort_values('Cured', ascending=True), \n             x=\"Cured\", y=\"State\/UnionTerritory\", title='Cured cases', text='Cured', orientation='h', \n             width=800, height=700, range_x = [0, max(latest_date['Cured'])+4])\ncure_bar.update_traces(marker_color='#46cdcf', opacity=0.8, textposition='outside')\ncure_bar.show()","1c86a6e5":"Active_cases = ex.bar(latest_date.sort_values('Active', ascending=False).head(30).sort_values('Active', ascending=True), \n             x=\"Active\", y=\"State\/UnionTerritory\", title='Active cases', text='Active', orientation='h', \n             width=800, height=700, range_x = [0, max(latest_date['Active'])+10])\nActive_cases.update_traces(marker_color='#46cdcf', opacity=0.8, textposition='outside')\nActive_cases.show()","735c3bfb":"latest_date['Death Rate'] = round((latest_date['Deaths']\/latest_date['TotalConfirmed'])*20,2)\nTop_50 = latest_date[latest_date['TotalConfirmed']>20]\nTop_50 = Top_50.sort_values('Death Rate', ascending=False)\n\nPlot = ex.bar(Top_50.sort_values('Death Rate', ascending=False).head(20).sort_values('Death Rate', ascending=True), \n             x=\"Death Rate\", y=\"State\/UnionTerritory\", text='Death Rate', orientation='h', \n             width=500, height=500, range_x = [0, 2], title='No. of Deaths Per 20 Confirmed Case')\nPlot.update_traces(marker_color='#00a8cc', opacity=0.6, textposition='outside')\nPlot.show()","7a6916e5":"#Date vs Confirmed\nDate_vs_confirmed = df_india_data.groupby(['State\/UnionTerritory', 'Date'])['TotalConfirmed', 'Deaths', 'Cured'].sum()\nDate_vs_confirmed = Date_vs_confirmed.reset_index()\n\nDate_vs_confirmed_fig = ex.bar(Date_vs_confirmed, x=\"Date\", y=\"TotalConfirmed\", color='State\/UnionTerritory', orientation='v', height=600,\n                        title='Date vs Confirmed', color_discrete_sequence = ex.colors.cyclical.mygbm)\nDate_vs_confirmed_fig.show()","438194f0":"#Date vs Cured\nDate_vs_cured = df_india_data.groupby(['State\/UnionTerritory', 'Date'])['TotalConfirmed', 'Deaths', 'Cured'].sum()\nDate_vs_cured = Date_vs_cured.reset_index()\n\nDate_vs_cured_fig = ex.bar(Date_vs_cured, x=\"Date\", y=\"Cured\", color='State\/UnionTerritory', orientation='v', height=600,\n                        title='Date vs Cured', color_discrete_sequence = ex.colors.cyclical.mygbm)\nDate_vs_cured_fig.show()","6cab0ff8":"#Date vs Active\nDate_vs_Deaths = df_india_data.groupby(['State\/UnionTerritory', 'Date'])['TotalConfirmed', 'Deaths', 'Cured'].sum()\nDate_vs_Deaths = Date_vs_Deaths.reset_index()\n\nDate_vs_Deaths_fig = ex.bar(Date_vs_Deaths, x=\"Date\", y=\"Deaths\", color='State\/UnionTerritory', orientation='v', height=600,\n                        title='Date vs Active', color_discrete_sequence = ex.colors.cyclical.mygbm)\nDate_vs_Deaths_fig.show()","b089c525":"new_cases = df_india_data.groupby(['State\/UnionTerritory', 'Date', ])['TotalConfirmed', 'Deaths', 'Cured']\nnew_cases = new_cases.sum().diff().reset_index()\n\nmat = new_cases['State\/UnionTerritory'] != new_cases['State\/UnionTerritory'].shift(1)\n\nnew_cases.loc[mat, 'TotalConfirmed'] = np.nan\nnew_cases.loc[mat, 'Deaths'] = np.nan\nnew_cases.loc[mat, 'Cured'] = np.nan\n\nNew_cases_plot = ex.bar(new_cases, x=\"Date\", y=\"TotalConfirmed\", color='State\/UnionTerritory',title='New cases')\nNew_cases_plot.show()","c5e66cf0":"# Deaths vs Confirmed\nDeath_vs_Conf = latest_date.sort_values('Deaths', ascending=False).iloc[:15, :]\n\nDeath_vs_Conf_plot = ex.scatter(Death_vs_Conf, \n                 x='TotalConfirmed', y='Deaths', color='State\/UnionTerritory',\n                 text='State\/UnionTerritory', log_x=True, log_y=True, title='Deaths vs Confirmed')\nDeath_vs_Conf_plot.update_traces(textposition='top center')\nDeath_vs_Conf_plot.show()","cfdafc97":"#Cured vs Confirmed\nCured_vs_Conf = latest_date.sort_values('Cured', ascending=False).iloc[:15, :]\n\nCured_vs_Conf_plot = ex.scatter(Death_vs_Conf, \n                 x='TotalConfirmed', y='Cured', color='State\/UnionTerritory',\n                 text='State\/UnionTerritory', log_x=True, log_y=True, title='Cured vs Confirmed')\nCured_vs_Conf_plot.update_traces(textposition='top center')\nCured_vs_Conf_plot.show()","b15ccebc":"\"\"\"\ndf_India_perday\ndf_Italy_perday\ndf_Korea_perday\n\"\"\"\n\nComparison = make_subplots(\n    rows=2, cols=2,\n    specs=[[{}, {}],\n           [{\"colspan\": 2}, None]],\n    subplot_titles=(\"S.Korea\",\"Italy\", \"India\"))\n\nComparison.add_trace(gp.Bar(x=df_Korea_perday['Date'], y=df_Korea_perday['Total Cases'],\n                    marker= dict(color=df_Korea_perday['Total Cases'], coloraxis=\"coloraxis\")),\n              1, 1)\n\nComparison.add_trace(gp.Bar(x=df_Italy_perday['Date'], y=df_Italy_perday['Total Cases'],\n                    marker= dict(color=df_Italy_perday['Total Cases'], coloraxis=\"coloraxis\")),\n              1, 2)\n\nComparison.add_trace(gp.Bar(x=df_india_data['Date'], y=df_india_data['TotalConfirmed'],\n                    marker= dict(color=df_india_data['TotalConfirmed'], coloraxis=\"coloraxis\")),\n              2, 1)\n\nComparison.update_layout(coloraxis=dict(colorscale='RdBu'), showlegend=False,title_text=\"Total Confirmed cases(Cumulative)\")\n\nComparison.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nComparison.show()","803b7618":"India = df_india_data['TotalConfirmed'].sum()\nItaly = df_Italy_perday['Total Cases'].sum()\nSouth_Korea = df_Korea_perday['Total Cases'].sum()\ndict ={\"India\": India,\"Italy\":Italy, 'South Korea':South_Korea}\ncolors=['red','blue', 'yellow']\nplt.figure(figsize = (10,10))\nplt.pie(dict.values(),labels=dict.keys(),colors=colors,shadow=True,explode=(0.1, 0.1, 0.1), autopct='%1.2f%%')\nplt.axis('equal')\nplt.show()","fbc68764":"# Cure_over_Death","d1e756f3":"# GroupBy Tables","63f0f4a0":"# Data Preprocessing","d194dd63":"# Objective\n\n    1.The objective of the notebook is do explore the covid-19 situation in India and analyse the rate of spread in comparison to other      countries like Italy and Korea.\n    \n    2.As India is in the 2nd stage of the Pandemic, so this 2 weeks are very crucial to contain the virus and therefore my aim from this project is to understand the spread of of Covid-19 in India\n    \n    3.The Visualization gives insights and pattern of the Pandemic. ","b503f425":"# Comparison with Italy, South Korea","f67edc32":"# TreeMap","354ccacb":"# Graph and plots over time","9239da7e":"# Corona Virus\n\n    1.Coronaviruses are zoonotic viruses (means transmitted between animals and people).\n    2.Symptoms include from fever, cough, respiratory symptoms, and breathing difficulties.\n    3.In severe cases, it can cause pneumonia, severe acute respiratory syndrome (SARS), kidney failure and even death.\n    4.Coronaviruses are also asymptomatic, means a person can be a carrier for the infection but experiences no symptoms","05c45cf5":"# Death per 20 cases","eb0b56c7":"# States with no cured cases","9c4ab02b":"# State data","2092ca7c":"# COVID-19 India(Corona Virus Disease 2019)\n    1.Caused by a SARS-COV-2 corona virus.\n    2.First identified in Wuhan, Hubei, China. Earliest reported symptoms reported in November 2019.\n    3.First cases were linked to contact with the Huanan Seafood Wholesale Market, which sold live animals.\n    4.On 30 January the WHO declared the outbreak to be a Public Health Emergency of International Concern","e1646a35":"# Geographical representaion","305ac930":"# States with Death cases","5e71801a":"# New +ve cases by day","36bb4003":"# How covid spread in India over time","11a7bb7e":"# Scatter Plot","726bafe0":"# Date vs Confirmed,Cured,Death"}}