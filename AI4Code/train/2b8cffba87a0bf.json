{"cell_type":{"f4aeb0ce":"code","957c6251":"code","971ca87a":"markdown"},"source":{"f4aeb0ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport tifffile\nimport rasterio\nfrom rasterio.windows import Window","957c6251":"tiff_filename = \"\/kaggle\/input\/hubmap-kidney-segmentation\/test\/b2dc8411c.tiff\"\n\nimread_image = tifffile.imread( tiff_filename )\nprint( \"imread_image.shape\", imread_image.shape )  # (14844, 31262, 3)\nprint( \"imread_image.dtype\", imread_image.dtype )\n\nwindow_row0 = 7000\nwindow_col0 = 15000\nwindow_row1 = 7005\nwindow_col1 = 15008\n\nimread_window_0 = imread_image[ window_row0 : window_row1,\n                                window_col0 : window_col1,\n                                0 ]\nimread_window_1 = imread_image[ window_row0 : window_row1,\n                                window_col0 : window_col1,\n                                1 ]\nimread_window_2 = imread_image[ window_row0 : window_row1,\n                                window_col0 : window_col1,\n                                2 ]\n\nprint( \"imread_window_0:\\n\", imread_window_0 )\nprint( \"imread_window_1:\\n\", imread_window_1 )\nprint( \"imread_window_2:\\n\", imread_window_2 )\n\ndel imread_image\n\nwith rasterio.open( tiff_filename ) as image_dataset:\n    rasterio_image = image_dataset.read( [ 1, 2, 3 ], \n                                        window = Window.from_slices( ( window_row0, window_row1 ),\n                                                                     ( window_col0, window_col1 ) ) )\n    rasterio_image = np.moveaxis( rasterio_image, 0, -1 )\n    print( \"rasterio_image.shape\", rasterio_image.shape )\n    print( \"rasterio_image.dtype\", rasterio_image.dtype )\n    rasterio_window_0 = rasterio_image[ :, :, 0 ]\n    rasterio_window_1 = rasterio_image[ :, :, 1 ]\n    rasterio_window_2 = rasterio_image[ :, :, 2 ]\n    \n    del rasterio_image\n\n    print( \"rasterio_window_0:\\n\", rasterio_window_0 )\n    print( \"rasterio_window_1:\\n\", rasterio_window_1 )\n    print( \"rasterio_window_2:\\n\", rasterio_window_2 )\n    \n    assert np.all( imread_window_0 == rasterio_window_0 )\n    assert np.all( imread_window_1 == rasterio_window_1 )\n    assert np.all( imread_window_2 == rasterio_window_2 )\n\n","971ca87a":"# Purpose\nThe purpose of this notebook is to investigate the relationship between the order of the three image channels when reading using ```tiff.imread``` vs. ```image.read(window)```.  These are the two methods for reading image data\nused in the \"Tile Overlapping Window\" and \"Tilewise Predict...\" notebooks.\n\nIt appears in the last cell in this notebook that the two methods are equivalent."}}