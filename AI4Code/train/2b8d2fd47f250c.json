{"cell_type":{"d977db63":"code","cfa60019":"code","e4fa0b23":"code","4709bb97":"code","e18d4aa0":"code","f5a59789":"code","6a1ef531":"code","d9db928e":"code","d4944ed1":"code","dceab997":"code","c472ba01":"code","5089046d":"code","1313b77e":"code","1a706530":"code","2ee02ebd":"code","1b19dc43":"code","f55c3ad7":"code","d3524f6e":"code","e81cbe55":"code","207d92b0":"code","b8bb9ecb":"code","94d84baf":"code","ff4a6e74":"code","203ced71":"code","eefb1f31":"code","c0f172b5":"code","f4a4bc4f":"code","2485c979":"code","edce55ec":"code","61fef2d4":"code","a1fade3a":"code","cfdfcdd5":"code","ae0b4242":"code","b77a10c9":"code","2db772cb":"code","68124d2a":"code","e19b9557":"code","4fabd656":"code","e068ed69":"code","edba1202":"code","787386aa":"code","09e81908":"code","34edbfc7":"code","df6dfad7":"code","b45d2933":"code","38556945":"code","c31eda9e":"code","52fcb673":"code","4f836422":"code","70c965aa":"code","5825cf49":"code","a3940423":"code","ae5d17b3":"code","29da5cd9":"code","cb619bc2":"code","691ee2b2":"code","1d1675a6":"code","43e10154":"code","61dc7f58":"code","7a422483":"code","51297199":"code","0d05b35d":"code","8873ca4b":"code","731a4f1c":"code","2c09a05e":"code","e3f5f64e":"code","d7a96994":"code","bfeb8f95":"code","f7e36190":"code","fa67941e":"markdown","7c3ee743":"markdown","1a6ec298":"markdown","7b3a656c":"markdown","6ce9c3c3":"markdown","9a3545d5":"markdown","0155def1":"markdown","d8b687c6":"markdown","8d4b76cf":"markdown","40450c8a":"markdown","5178814f":"markdown","399896fe":"markdown","47ad6843":"markdown","665e13e9":"markdown","cb57f93d":"markdown","3f97d2bf":"markdown","7af8dca3":"markdown","0ce07ce2":"markdown","8e190d9c":"markdown","1f54595a":"markdown","72178dae":"markdown","431cd6d2":"markdown","8e498174":"markdown","e226d453":"markdown","0bdcc8b5":"markdown","86833a8c":"markdown","d020c235":"markdown","43913af9":"markdown","5aaba359":"markdown","b54a62f9":"markdown","3a917b94":"markdown","570696e5":"markdown","5717e34e":"markdown","206f8455":"markdown","adb2b35e":"markdown","1245e459":"markdown","672f20e6":"markdown","a88c0113":"markdown","be9057eb":"markdown","82a29ea6":"markdown","cff96f65":"markdown","8ae2ed1e":"markdown"},"source":{"d977db63":"#Importing required libraries\nimport pandas as pd\nimport numpy as np\nfrom timeit import default_timer as timer\nimport matplotlib.pyplot as plt\nimport requests\nimport os\n# import tweepy\nimport re\nimport seaborn as sns\n%matplotlib inline","cfa60019":"#Reading the csv file of tweets\narchive_df = pd.read_csv('..\/input\/wrangle\/twitter_archive_enhanced.csv')","e4fa0b23":"archive_df.head()","4709bb97":"# Getting image prediction file from the udacity url \n# url = 'https:\/\/d17h27t6h515a5.cloudfront.net\/topher\/2017\/August\/599fd2ad_image-predictions\/image-predictions.tsv'<br>\n# response = requests.get(url)<br>\n\n# with open(os.path.join('image_predictions.tsv'),mode='wb') as file:\n#     file.write(response.content)","e18d4aa0":"#Reading the csv file downloaded\nimg_prediction_df = pd.read_csv('..\/input\/wrangle\/image_predictions.tsv',sep='\\t')","f5a59789":"img_prediction_df.head()","6a1ef531":"# Creating an API object that will be used to gather Twitter data, ids removed for privacy reasons.\n# CONSUMER_KEY = \"\"\n# CONSUMER_SECRET = \"\"\n# OAUTH_TOKEN = \"\"\n# OAUTH_TOKEN_SECRET = \"\"\n\n\n\n# auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\n# auth.set_access_token(OAUTH_TOKEN, OAUTH_TOKEN_SECRET)\n# api = tweepy.API(auth,parser=tweepy.parsers.JSONParser())\n\n# #List of all the tweet ids in the archive dataframe<br>\n# tweet_ids = archive_df['tweet_id'].values","d9db928e":"# # Accessing the data from the api ids.\n\n# tweet_data=[]  #Store data\n# success_ids = [] # Store ID of successful tweets\n# failure_ids = [] # Store ID of failed tweets\n\n# #Time required to collect all the data\n# start = timer()\n\n# # Getting tweet JSON data via tweet ID from the API created using Tweepy \n# for tweet in tweet_ids:\n#     try:\n#         data = api.get_status(tweet,tweet_mode='extended',wait_on_rate_limit = True,wait_on_rate_limit_notify = True)\n#         tweet_data.append(data)\n#         success_ids.append(tweet)<\/br>\n        \n#         except:\n#         print(tweet)\n#         failure_ids.append(tweet)\n        \n\n# end = timer()\n# time_taken = end-start\n\n# print(\"Time Taken : {}s\".format(time_taken))","d4944ed1":"# #Storing the json data in txt file\n# import json\n# with open('tweet_json.txt', mode = 'w') as file:\n#     json.dump(tweet_data, file)","dceab997":"# #Reading the json file in a dataframe\n# counts_df = pd.read_json('tweet_json.txt')\n# counts_df['tweet_id'] = success_ids","c472ba01":"# #Checking for the required columns\n# counts_df.columns","5089046d":"# #Updating the dataframe with required columns\n# counts_df = counts_df[['tweet_id','retweet_count','favorite_count']]\n# counts_df","1313b77e":"# #Save the dataframe for future reference \n# counts_df.to_csv('retweet_count.csv',index=False)","1a706530":"counts_df = pd.read_csv('..\/input\/wrangle\/retweet_count.csv')","2ee02ebd":"archive_df","1b19dc43":"archive_df.tweet_id.duplicated().sum()","f55c3ad7":"archive_df.info()","d3524f6e":"archive_df.in_reply_to_status_id.value_counts()","e81cbe55":"archive_df.in_reply_to_user_id.value_counts()","207d92b0":"archive_df.retweeted_status_id.value_counts()","b8bb9ecb":"archive_df.retweeted_status_user_id.value_counts()","94d84baf":"archive_df.retweeted_status_timestamp.value_counts()","ff4a6e74":"archive_df.rating_numerator.value_counts()","203ced71":"archive_df.rating_denominator.value_counts()","eefb1f31":"archive_df.source.value_counts()","c0f172b5":"archive_df.name.value_counts()","f4a4bc4f":"img_prediction_df.sample(5)","2485c979":"img_prediction_df.tweet_id.duplicated().sum()","edce55ec":"img_prediction_df.shape","61fef2d4":"img_prediction_df.info()","a1fade3a":"img_prediction_df.jpg_url.duplicated().sum()","cfdfcdd5":"img_prediction_df.p1.value_counts()","ae0b4242":"counts_df.sample(5)","b77a10c9":"counts_df.info()","2db772cb":"counts_df.tweet_id.duplicated().sum()","68124d2a":"counts_df.describe()","e19b9557":"#Creating a new dataframe\nmerged_df = archive_df.merge(img_prediction_df,left_on='tweet_id',right_on='tweet_id',how='inner')\nmerged_df = merged_df.merge(counts_df,left_on='tweet_id',right_on='tweet_id',how='inner')","4fabd656":"merged_df.info()","e068ed69":"#Creating a single coumn for dog_stage\nmerged_df['dog_stage'] = merged_df['text'].str.extract('(doggo|floofer|pupper|puppo)')\n\n\nmerged_df.drop(['doggo','floofer','pupper','puppo'],axis=1,inplace=True)","edba1202":"merged_df.info()","787386aa":"#Remove the retweets and keeping only the original tweets\nmerged_df = merged_df[np.isnan(merged_df.retweeted_status_id)]","09e81908":"merged_df.sample(5)","34edbfc7":"#Empty columns\nempty_cols = [col for col in merged_df.columns if merged_df[col].isnull().all()]\nempty_cols","df6dfad7":"#Dropping those empty columns\nmerged_df.drop(['retweeted_status_id','retweeted_status_user_id','retweeted_status_timestamp'],axis=1,inplace=True)\n\n#Dropping unwanted column\nmerged_df.drop(['in_reply_to_status_id','in_reply_to_user_id','img_num'],axis=1,inplace=True)","b45d2933":"list(merged_df)","38556945":"#Slicing the timezone from timestamp and then converting it to datetime\nmerged_df['timestamp'] = merged_df.timestamp.str.slice(start=0, stop=-6)\nmerged_df['timestamp'] = pd.to_datetime(merged_df.timestamp, format= \"%Y-%m-%d %H:%M:%S\")","c31eda9e":"merged_df.info()","52fcb673":"merged_df.source.value_counts()","4f836422":"#Split the column and then reassign\nno_need , merged_df['source'] = merged_df.source.str.split('\">',1).str\n\n#Slice the tag at the end\nmerged_df['source'] = merged_df['source'].str.slice(0,-4)","70c965aa":"merged_df.source.value_counts()","5825cf49":"#tweet_id to string\nmerged_df['tweet_id'] = merged_df['tweet_id'].astype(str)","a3940423":"merged_df.info()","ae5d17b3":"# Find all names that start with a lowercase letter\nlower_name = []\nfor data in merged_df['name']:\n    if data[0].islower() and data not in lower_name:\n        lower_name.append(data)\n        \nlower_name","29da5cd9":"# Replace names starting with a lowercase letter with a NaN\nmerged_df['name'].replace(lower_name, \n                        np.nan,\n                       inplace = True)\n\n# Replace None with a NaN\nmerged_df['name'].replace('None', \n                        np.nan,\n                       inplace = True)","cb619bc2":"merged_df.name.value_counts()","691ee2b2":"merged_df.rating_numerator.value_counts()","1d1675a6":"# Find text, index, and rating for tweets that contain a decimal in the numerator \nratings_of_decimals_text = []\nratings_of_decimals_index = []\nratings_of_decimals = []\n\nfor i, text in merged_df['text'].iteritems():\n    if bool(re.search('\\d+\\.\\d+\\\/\\d+', text)):\n        ratings_of_decimals_text.append(text)\n        ratings_of_decimals_index.append(i)\n        ratings_of_decimals.append(re.search('\\d+\\.\\d+', text).group())\n\n        \nratings_of_decimals_text","43e10154":"#Put those ratings in that index\nmerged_df.loc[ratings_of_decimals_index[0],'rating_numerator'] = float(ratings_of_decimals[0])\nmerged_df.loc[ratings_of_decimals_index[1],'rating_numerator'] = float(ratings_of_decimals[1])\nmerged_df.loc[ratings_of_decimals_index[2],'rating_numerator'] = float(ratings_of_decimals[2])\nmerged_df.loc[ratings_of_decimals_index[3],'rating_numerator'] = float(ratings_of_decimals[3])","61dc7f58":"# Convert all the values to float\nmerged_df.rating_numerator = merged_df.rating_numerator.astype(float)\nmerged_df.rating_denominator = merged_df.rating_denominator.astype(float)\nmerged_df.info()","7a422483":"#Creating ratio to understand and analyze better\nmerged_df['ratio'] = merged_df['rating_numerator'] \/ merged_df['rating_denominator']","51297199":"merged_df['ratio']","0d05b35d":"merged_df.jpg_url.duplicated().sum()","8873ca4b":"pd.set_option('display.max_columns', None)\nmerged_df.sample(5)","731a4f1c":"merged_df.to_csv('twitter_archive_master.csv',encoding = 'utf-8',index=False)","2c09a05e":"sns.set()\nsns.lmplot(x='favorite_count',y='retweet_count',data=merged_df)\nplt.title('Favorite Count vs Retweet Count')\nplt.xlabel('Retweet Count')\nplt.ylabel('Favorite Count')\nplt.savefig('retweet_vs_favorite.png');","e3f5f64e":"top_10_names = merged_df.name.value_counts()[0:10].sort_values(ascending=True)\ntop_10_names.plot.barh()\nplt.savefig('top_names.png');","d7a96994":"plt.figure(figsize=(12,6))\nmerged_df.plot(x='retweet_count', y='ratio', kind='scatter')\nplt.ylim(-0.1,2)\nplt.xlabel('Retweet Counts')\nplt.ylabel('Ratings')\nplt.title('Retweet Counts by Ratings Scatter Plot')\nplt.savefig('ratio_retweet.png')","bfeb8f95":"merged_df.groupby('timestamp')['ratio'].mean().plot(kind='line')\nplt.ylim(0, 2)\nplt.title('Ratings over Time')\nplt.xlabel('Time')\nplt.ylabel('Rating Ratio')\nplt.savefig('ratio_with_time');","f7e36190":"merged_df.sample(5)","fa67941e":"### Store the Dataframe","7c3ee743":"#### Test:","1a6ec298":"**2. Top 10 Most common names**","7b3a656c":"### Quality Issue #2 & #3\n\n#### Define: \nRemove the empty columns of the retweets and also drop the unwanted columns.\n#### Code:","6ce9c3c3":"### Tidiness Issue #2\n\n#### Define: \nThe dog_stage has multiple columns rather make them one. \n#### Code:","9a3545d5":"**Image Predictions tsv file**","0155def1":"<a id='assess'><\/a>\n## Assess\n\n#### Archive dataframe","d8b687c6":"**Archive csv file**","8d4b76cf":"#### Test:","40450c8a":"**1.Relation between Favorite count and retweet count**","5178814f":"The dataset that I will be wrangling (and analyzing and visualizing) is the tweet archive of Twitter user @dog_rates, also known as WeRateDogs. WeRateDogs is a Twitter account that rates people's dogs with a humorous comment about the dog.\n##### The Data\n* **Enhanced Twitter Archive:** The WeRateDogs Twitter archive contains basic tweet data for all 5000+ of their tweets, but not everything. One column the archive does contain though: each tweet's text, which I used to extract rating, dog name, and dog \"stage\" (i.e. doggo, floofer, pupper, and puppo). Download Link: [twitter_archive_enhanced.csv](https:\/\/d17h27t6h515a5.cloudfront.net\/topher\/2017\/August\/59a4e958_twitter-archive-enhanced\/twitter-archive-enhanced.csv)\n<br><br>\n* **Image Predictions File:** The tweet image predictions, i.e., what breed of dog (or other object, animal, etc.) is present in each tweet according to a neural network. This file (image_predictions.tsv) is hosted on Udacity's servers and should be downloaded programmatically using the Requests library using this [link](https:\/\/d17h27t6h515a5.cloudfront.net\/topher\/2017\/August\/599fd2ad_image-predictions\/image-predictions.tsv)\n<br><br>\n* **Additional Data via the Twitter API:** Query Twitter's API to gather this valuable data, retweet count and favorite count are two of the notable column omissions. Fortunately, this additional data can be gathered by anyone from Twitter's API.\n\n","399896fe":"#### Test:","47ad6843":"**Tweet Data using tweepy API**","665e13e9":"### Quality Issue #1\n\n#### Define: \nThere are few retweets that won't be necessary for analysis, find them using retweet status id column\n#### Code:","cb57f93d":"## Table of Contents\n- [Introduction](#intro)\n- [Gather Data](#gather) \n- [Assess](#assess)\n- [Assess Observations](#observe)\n- [Cleaning](#clean)\n- [Visualization](#visualize)\n\n<a id='intro'><\/a>\n## Introduction","3f97d2bf":"<a id='visualize'><\/a>\n## Visualization","7af8dca3":"#### Tweeter Count Dataframe","0ce07ce2":"#### Test:","8e190d9c":"**4. Ratings over Time**","1f54595a":"#### Image Prediction Dataframe","72178dae":"#### Test:","431cd6d2":"<a id='clean'><\/a>\n## Cleaning","8e498174":"### Quality Issue #11\n\n#### Define: \njpg_url column has duplicated values.\n#### Code:\nThose duplicated values got removed while merging the dataframe.\n#### Test:","e226d453":"### Quality Issue #5\n\n#### Define: \nRemove the HTML tag from source column and keep the required content\n#### Code:","0bdcc8b5":"<a id='gather'><\/a>\n\n## Gather Data","86833a8c":"### Quality Issue #7 & #8\n\n#### Define: \nThere are some unusual names and None instead of NaN, correct those.\n#### Code:","d020c235":"**3. Retweet count by rating ratio**","43913af9":"### Quality Issue #10\n\n#### Define: \nAs the ratings are very unusual, create a new column 'ratio' of ratings for better understanding and analysis.\n#### Code:","5aaba359":"### Quality Issue #4\n\n#### Define: \nChange the datatype of timestamp column\n#### Code:","b54a62f9":"#### Test:","3a917b94":"Found that the most important columns to be retweet count and favorite count","570696e5":"### Cleaned Table","5717e34e":"# Data Wrangling Project (WeRateDogs)\n\n#### Divyansh Shah - June 2020","206f8455":"#### Test:","adb2b35e":"### Quality Issue #6\n\n#### Define: \nChange the datatype of tweet id from int to string.\n#### Code:","1245e459":"These two columns share a very strong positive correlation.","672f20e6":"### Tidiness Issue #1\n\n#### Define: \nMerge all the dataframes together on the basis of tweet id \n#### Code:\n","a88c0113":"<a id='observe'><\/a>\n## Assess Observations: \n### Quality Issues:\n#### Archive Dataframe:\n* Most rows of a few columns are empty\n* Some tweets are retweets we only want original tweets\n* Timestamp and retweet timestamp different datatype.\n* Source has html tags along with it.\n* Tweet ID is int type.\n* Numerator and Denominator have some very unsusual values.\n* Names of certain dogs are very different, some don't have names.\n\n#### Image Dataframe \n* Less rows than archive dataframe\n* Tweet id is int\n* Duplicated URL\n\n#### Tweet count Dataframe\n* Tweet ID is int\n* Less number of rows than archive dataframe\n\n### Tidiness Issues:\n* Dog Stage divided into 4 columns in archive dataset \n* Merge the datasets togeher as one.\n\n<br>***Few of these issues will be cleaned together.***","be9057eb":"### Quality Issue #9\n\n#### Define: \nThe rating numerator has some decimal values that where not read, find and put those values\n#### Code:","82a29ea6":"#### Test:","cff96f65":"#### Test:","8ae2ed1e":"#### Test:"}}