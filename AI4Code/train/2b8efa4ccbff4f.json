{"cell_type":{"5d060cf5":"code","7f75953f":"code","9f8175f7":"code","5283fcb7":"code","df2096b8":"code","6b7494b4":"code","f6f9c5e7":"code","f4e1d89d":"code","4f894c37":"code","97c06cd2":"code","659fcb49":"code","52e23e8b":"code","0572faa2":"code","7e7a068f":"code","57c04602":"code","01b44e2f":"code","83c3a4c4":"code","62dd62e4":"code","82d15a45":"code","b0fe5d5f":"code","3e744376":"code","e89cca99":"code","d167bf7e":"markdown","9980d21a":"markdown","51ccd487":"markdown","cab6d45e":"markdown","f1bcc47a":"markdown","6028fe61":"markdown","b23c4f00":"markdown","b4be9863":"markdown"},"source":{"5d060cf5":"import math\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf","7f75953f":"IMAGE_SIZE = [224, 224]\nBATCH_SIZE = 64\n\ndef decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32)\n    image = tf.reshape(image, [*IMAGE_SIZE, 3])\n    image = tf.keras.applications.xception.preprocess_input(image)\n    return image\n\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=tf.data.AUTOTUNE) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=tf.data.AUTOTUNE)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset","9f8175f7":"def data_augment(image, label):\n    # Thanks to the dataset.prefetch(AUTO)\n    # statement in the next function (below), this happens essentially\n    # for free on TPU. Data pipeline code is executed on the \"CPU\"\n    # part of the TPU while the TPU itself is computing gradients.\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    image = tf.image.random_saturation(image, 0, 2)\n    image = tf.image.random_brightness(image, 0.2)\n    return image, label   \n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=tf.data.AUTOTUNE)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(tf.data.AUTOTUNE) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(tf.data.AUTOTUNE)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(tf.data.AUTOTUNE)\n    return dataset\n\ndef count_data_items(filenames):\n    import re\n    # the number of data items is written in the name of the .tfrec\n    # files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)","5283fcb7":"GCS_PATH = '..\/input\/tpu-getting-started\/tfrecords-jpeg-224x224'\n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec') \n\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nprint('Dataset: {} training images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))","df2096b8":"ds_train = get_training_dataset()\nds_valid = get_validation_dataset()\nds_test = get_test_dataset()\n\nprint(\"Training:\", ds_train)\nprint (\"Validation:\", ds_valid)\nprint(\"Test:\", ds_test)","6b7494b4":"CLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']                                                                                                                                               # 100 - 102","f6f9c5e7":"len(CLASSES)","f4e1d89d":"for x, y in ds_train.take(1):\n    print(y)","4f894c37":"base_model = tf.keras.applications.xception.Xception(weights='imagenet', include_top=False)\navg = tf.keras.layers.GlobalAveragePooling2D()(base_model.output)\noutput = tf.keras.layers.Dense(len(CLASSES), activation='softmax')(avg)\nmodel = tf.keras.Model(inputs=base_model.input, outputs=output)","97c06cd2":"for layer in base_model.layers:\n    layer.trainable = False","659fcb49":"model.summary()","52e23e8b":"initial_lr = 0.1\noptimizer = tf.keras.optimizers.Nadam(lr=initial_lr)\nmodel.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])","0572faa2":"initial_epochs = 10\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nmodel.fit(ds_train, validation_data=ds_valid, epochs=initial_epochs, steps_per_epoch=STEPS_PER_EPOCH)","7e7a068f":"for layer in base_model.layers[-6:]:\n    layer.trainable = True","57c04602":"lr = 0.01\noptimizer = tf.keras.optimizers.Nadam(lr=lr)\nmodel.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])","01b44e2f":"epochs = 200\nmodel.fit(ds_train, validation_data=ds_valid, epochs=epochs, steps_per_epoch=STEPS_PER_EPOCH, callbacks=[\n    tf.keras.callbacks.EarlyStopping(patience=30, restore_best_weights=True),\n    tf.keras.callbacks.ReduceLROnPlateau(factor=0.2, patience=4)\n])","83c3a4c4":"for layer in base_model.layers[-16:]:\n    layer.trainable = True","62dd62e4":"lr = 0.01\noptimizer = tf.keras.optimizers.Nadam(lr=lr)\nmodel.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])","82d15a45":"epochs = 200\nmodel.fit(ds_train, validation_data=ds_valid, epochs=epochs, steps_per_epoch=STEPS_PER_EPOCH, callbacks=[\n    tf.keras.callbacks.EarlyStopping(patience=30, restore_best_weights=True),\n    tf.keras.callbacks.ReduceLROnPlateau(factor=0.2, patience=4)\n])","b0fe5d5f":"predictions = model.predict(ds_test)\npredictions.shape","3e744376":"ids = list(ds_test.unbatch().map(lambda data, _id: _id).as_numpy_iterator())\nids = list(map(lambda x: x.decode(), ids))","e89cca99":"submission = pd.DataFrame({'id': ids, 'label': tf.argmax(predictions, axis=1)})\nsubmission = submission.astype({'id': 'string'})\nsubmission.to_csv('submission.csv', index=False)\nsubmission","d167bf7e":"**Stack train and validation data and retrain more layers**","9980d21a":"# Load Datasets","51ccd487":"# Prepare Model","cab6d45e":"**Train model by unfreezing the last 6 layers of xception**\n\nWe lower the learing rate by a lot because again we want to only make small adjustments on xception weights. After unfreezing we have to recompile model","f1bcc47a":"# Make Predictions","6028fe61":"**Freeze base model layers**","b23c4f00":"We use the xception as the base model and add a to new layers","b4be9863":"**Train model with freezed layers**\n\nWe do this in order to not disturb the weights of xception when trying to fit the new layers on the new dataset"}}