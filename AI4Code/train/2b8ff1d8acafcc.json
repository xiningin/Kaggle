{"cell_type":{"cf61fcf9":"code","effa9c64":"code","da62ce6e":"code","86d41d12":"code","81d28634":"code","b48a862b":"code","34a5aaf2":"code","1ab4f2e3":"code","9bef749c":"code","d3a5ca52":"code","bc6dbe1b":"code","6b7b4120":"code","14cc8d24":"code","58fba614":"code","6a147b9e":"code","9cbc83a8":"code","e475f4fb":"code","2ea46e97":"code","0b264781":"code","6b80f225":"code","98a074f4":"code","b4f86123":"code","399e09e8":"code","c45029b8":"code","bc5edab3":"code","701c4d83":"code","e0792516":"code","2283be0d":"code","afee3c49":"code","b3a0ac78":"code","7891239f":"code","66cc2ef8":"markdown","afeab0c5":"markdown","adf0f384":"markdown","e52853ee":"markdown","14464caa":"markdown","84f362c5":"markdown","35247c75":"markdown","2b04089e":"markdown","f1b9d920":"markdown","b4c790b5":"markdown","dbf884e1":"markdown","59ba6452":"markdown","8551ee15":"markdown","07d31ef8":"markdown","583146cb":"markdown","42a58945":"markdown","dd409d8d":"markdown","664b5968":"markdown","5c61ea3e":"markdown","a9fe1971":"markdown","84ca05e9":"markdown","fa94db1e":"markdown","9ee81ee1":"markdown","bf56bb51":"markdown","72996e63":"markdown","9d8641e7":"markdown"},"source":{"cf61fcf9":"import numpy as np\nimport pandas as pd","effa9c64":"import matplotlib.pyplot as plt\nimport seaborn as sns","da62ce6e":"df = pd.read_csv(\"..\/input\/911.csv\")","86d41d12":"df.info()","81d28634":"df.head()","b48a862b":"df['zip'].value_counts().head()","34a5aaf2":"df['twp'].value_counts().head()","1ab4f2e3":"df[\"title\"].nunique()","9bef749c":"df[\"Reason\"]=df[\"title\"].apply(lambda x: x.split(\":\")[0])","d3a5ca52":"df.head()","bc6dbe1b":"df['Reason'].value_counts()","6b7b4120":"sns.countplot(x='Reason',data=df)","14cc8d24":"type(df['timeStamp'][0])","58fba614":"df['timeStamp']=pd.to_datetime(df['timeStamp'])","6a147b9e":"df['Hour']=df['timeStamp'].apply(lambda x: x.hour)","9cbc83a8":"df['Month']=df['timeStamp'].apply(lambda x: x.month)","e475f4fb":"df['Day of Week']=df['timeStamp'].apply(lambda x: x.dayofweek)","2ea46e97":"df['Year']=df['timeStamp'].apply(lambda x: x.year)","0b264781":"df.tail()","6b80f225":" dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","98a074f4":"df['Day of Week']=df['Day of Week'].map(dmap)","b4f86123":"df['Day of Week'].head()","399e09e8":"sns.countplot(x='Day of Week',hue='Reason', data=df)","c45029b8":"sns.countplot(x='Month',hue='Reason', data=df[df['Year']==2017])","bc5edab3":"sns.countplot(x='Year',hue='Reason', data=df)","701c4d83":"dayHour = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()","e0792516":"plt.figure(figsize=(12,6))\nsns.heatmap(dayHour,cmap='viridis')","2283be0d":"sns.clustermap(dayHour, cmap='viridis')","afee3c49":"dayMonth = df.groupby(by=['Day of Week','Month']).count()['Reason'].unstack()\ndayMonth.head()","b3a0ac78":"plt.figure(figsize=(12,6))\nsns.heatmap(dayMonth,cmap='viridis')","7891239f":"sns.clustermap(dayMonth,cmap='viridis')","66cc2ef8":"** Now repeat these same plots and operations, for a DataFrame that shows the Month as the column. **","afeab0c5":"** Now create a HeatMap using this new DataFrame. **","adf0f384":"** In the titles column there are \"Reasons\/Departments\" specified before the title code. These are EMS, Fire, and Traffic. Use .apply() with a custom lambda expression to create a new column called \"Reason\" that contains this string value.** \n\n**For example, if the title column value is EMS: BACK PAINS\/INJURY , the Reason column value would be EMS. **","e52853ee":"___\n** Now let us begin to focus on time information. What is the data type of the objects in the timeStamp column? **","14464caa":"# 911 Calls Capstone Project","84f362c5":"** Now use seaborn to create a countplot of 911 calls by Reason. **","35247c75":"\n** You can now grab specific attributes from a Datetime object by calling them. For example:**\n\n    time = df['timeStamp'].iloc[0]\n    time.hour\n\n**You can use Jupyter's tab method to explore the various attributes you can call. Now that the timestamp column are actually DateTime objects, use .apply() to create 3 new columns called Hour, Month, and Day of Week. You will create these columns based off of the timeStamp column, reference the solutions if you get stuck on this step.**","2b04089e":"** Notice how the Day of Week is an integer 0-6. Use the .map() with this dictionary to map the actual string names to the day of the week: *\n\n    dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","f1b9d920":" The 911 call data contains the following fields:\n\n* lat : String variable, Latitude\n* lng: String variable, Longitude\n* desc: String variable, Description of the Emergency Call\n* zip: String variable, Zipcode\n* title: String variable, Title\n* timeStamp: String variable, YYYY-MM-DD HH:MM:SS\n* twp: String variable, Township\n* addr: String variable, Address\n* e: String variable, Dummy variable (always 1)\n","b4c790b5":"## Basic Questions","dbf884e1":"** Take a look at the 'title' column, how many unique title codes are there? **","59ba6452":"____\n** Import numpy and pandas **","8551ee15":"** What are the top 5 townships (twp) for 911 calls? **","07d31ef8":"**Now do the same for Month:**","583146cb":"** You should have seen that these timestamps are still strings. Use [pd.to_datetime](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.to_datetime.html) to convert the column from strings to DateTime objects. **\n","42a58945":"** What is the most common Reason for a 911 call based off of this new column? **","dd409d8d":"** Check the info() of the df **","664b5968":"____\n** Now let's move on to creating  heatmaps with seaborn and our data. We'll first need to restructure the dataframe so that the columns become the Hours and the Index becomes the Day of the Week. There are lots of ways to do this, but I would recommend trying to combine groupby with an [unstack](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.unstack.html) method. Reference the solutions if you get stuck on this!**","5c61ea3e":"## Data and Setup","a9fe1971":"** What are the top 5 zipcodes for 911 calls? **","84ca05e9":"** Check the head of df **","fa94db1e":"** Now create a clustermap using this DataFrame. **","9ee81ee1":"## Creating new features","bf56bb51":"** Now use seaborn to create a countplot of the Day of Week column with the hue based off of the Reason column. **","72996e63":"** Import visualization libraries and set %matplotlib inline. **","9d8641e7":"** Read in the csv file as a dataframe called df **"}}