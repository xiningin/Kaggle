{"cell_type":{"c064946b":"code","545ad8da":"code","4463303f":"code","819c0c0d":"code","3b0a8af2":"code","824c6c8d":"code","8c196e13":"code","96bd26ca":"code","64a0d5b9":"code","3de6adfe":"code","a71881b5":"code","2cc14718":"code","540037ee":"code","dc577ea1":"code","b0049dde":"code","21bc0463":"code","92993327":"code","4b04df8d":"markdown","3895ba62":"markdown","33c1a25f":"markdown","ce918cf0":"markdown","0f0e41e7":"markdown","426334cb":"markdown","b91232d8":"markdown","4e46856c":"markdown","b36caa33":"markdown","059a4a0a":"markdown","78e8ba92":"markdown","2d2b5f15":"markdown","d0acd94c":"markdown","1714c783":"markdown"},"source":{"c064946b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.options.display.max_columns = 50\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom  datetime import datetime, timedelta\n\nimport os\nimport gc\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","545ad8da":"# \u30c7\u30fc\u30bf\u306e\u53d6\u5f97, DataFrame\u5316\npath = \"..\/input\/m5-forecasting-accuracy\"\n\nsales = pd.read_csv(os.path.join(path, \"sales_train_evaluation.csv\"))\ncalendar = pd.read_csv(os.path.join(path, \"calendar.csv\"))\nprices = pd.read_csv(os.path.join(path, \"sell_prices.csv\"))\nsample_submission = pd.read_csv(os.path.join(path, \"sample_submission.csv\"))\n\n# \u56de\u5e30\u3059\u308b\u65e5\u4ed8\u306e\u8ffd\u52a0\nfor d in range(1942,1970):\n    col = 'd_' + str(d)\n    sales[col] = 0\n    sales[col] = sales[col].astype(np.int16)\n","4463303f":"# \u30e1\u30e2\u30ea\u6d88\u8cbb\u3092\u6291\u3048\u308b\u305f\u3081\u306b, \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3000(kaggle notebook\u4e0a\u3067\u30c7\u30fc\u30bf\u3092\u6574\u7406\u3059\u308b\u969b\u306bRAM\u3092\u6d88\u8cbb\u5c3d\u304f\u3057\u3066\u3057\u307e\u3046)\n# \u6700\u5c0f\u5024, \u6700\u5927\u5024\u304c\u53ce\u307e\u308b\u30c7\u30fc\u30bf\u578b\u306b\u5909\u66f4\u3059\u308b\ndef downcast(df):\n    cols = df.dtypes.index.tolist() \n    types = df.dtypes.values.tolist()\n    for i,t in enumerate(types):\n        if 'int' in str(t):\n            if df[cols[i]].min() > np.iinfo(np.int8).min and df[cols[i]].max() < np.iinfo(np.int8).max:\n                df[cols[i]] = df[cols[i]].astype(np.int8)\n            elif df[cols[i]].min() > np.iinfo(np.int16).min and df[cols[i]].max() < np.iinfo(np.int16).max:\n                df[cols[i]] = df[cols[i]].astype(np.int16)\n            elif df[cols[i]].min() > np.iinfo(np.int32).min and df[cols[i]].max() < np.iinfo(np.int32).max:\n                df[cols[i]] = df[cols[i]].astype(np.int32)\n            else:\n                df[cols[i]] = df[cols[i]].astype(np.int64)\n        elif 'float' in str(t):\n            if df[cols[i]].min() > np.finfo(np.float16).min and df[cols[i]].max() < np.finfo(np.float16).max:\n                df[cols[i]] = df[cols[i]].astype(np.float16)\n            elif df[cols[i]].min() > np.finfo(np.float32).min and df[cols[i]].max() < np.finfo(np.float32).max:\n                df[cols[i]] = df[cols[i]].astype(np.float32)\n            else:\n                df[cols[i]] = df[cols[i]].astype(np.float64)\n        elif t == np.object:\n            if cols[i] == 'date':\n                df[cols[i]] = pd.to_datetime(df[cols[i]], format='%Y-%m-%d')\n            else:\n                df[cols[i]] = df[cols[i]].astype('category')\n    return df  \n\nsales = downcast(sales)\nprices = downcast(prices)\ncalendar = downcast(calendar)\n\n# \u30c7\u30fc\u30bf\u6574\u7406 melt\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066sales\u306ecolumn'd_\u3007'\u3092'd'column\u306b\u307e\u3068\u3081, calender.csv\u3068'd' column\u3067merge\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\ndf = pd.melt(sales, id_vars=['id', 'item_id', 'dept_id', 'cat_id', 'store_id', 'state_id'], var_name='d', value_name='sold').dropna()\ndf = pd.merge(df, calendar, on='d', how='left')\ndf = pd.merge(df, prices, on=['store_id','item_id','wm_yr_wk'], how='left') \ndisplay(df.head())\nprint(df.info())","819c0c0d":"# \u7279\u5b9a\u306e\u5546\u54c1\u306b\u304a\u3044\u3066, price\u3068sold\u306e\u95a2\u4fc2\u6027\u3092\u7c21\u5358\u306b\u78ba\u8a8d sold\u3068price\u306e\u76f8\u95a2\u4fc2\u6570\u3082\u8a08\u7b97\nitemID =['HOBBIES_1_001','HOBBIES_1_010','HOBBIES_2_001','HOBBIES_2_100',\n        'HOUSEHOLD_1_001','HOUSEHOLD_1_010','HOUSEHOLD_2_001','HOUSEHOLD_2_100',\n        'FOODS_1_001','FOODS_1_010','FOODS_2_001','FOODS_2_100']\nprint('\u8d64 : sold \/ \u9752 : price')\nprint('CA_1')\nr,c=0,0\nfig, ax = plt.subplots(3,4,figsize=(18, 12))\nfor i in range(0,12):\n    df_store = df[df['store_id']=='CA_1']\n    item_df = df_store[df_store['item_id']==itemID[i]]\n    print('{} sold\/price\u76f8\u95a2\u4fc2\u6570:'.format(itemID[i]),item_df['sold'].corr(item_df['sell_price']))\n    ax2 = ax[r][c].twinx() \n    ax[r][c].plot(item_df['date'],item_df['sell_price'],color='b',alpha=0.5)\n    ax2.plot(item_df['date'],item_df['sold'],color='r',alpha=0.5)\n    ax[r][c].set_title(itemID[i])\n    c+=1\n    if c ==4:\n        c=0\n        r+=1\n#plt.savefig('CA_1_price.png')\nplt.show()\n\nprint('\\nCA_2')\nr,c=0,0\nfig, ax = plt.subplots(3,4,figsize=(18, 12))\nfor i in range(0,12):\n    df_store = df[df['store_id']=='CA_2']\n    item_df = df_store[df_store['item_id']==itemID[i]]\n    print('{} sold\/price\u76f8\u95a2\u4fc2\u6570:'.format(itemID[i]),item_df['sold'].corr(item_df['sell_price']))\n    ax2 = ax[r][c].twinx() \n    ax[r][c].plot(item_df['date'],item_df['sell_price'],color='b',alpha=0.5)\n    ax2.plot(item_df['date'],item_df['sold'],color='r',alpha=0.5)\n    ax[r][c].set_title(itemID[i])\n    c+=1\n    if c ==4:\n        c=0\n        r+=1\n#plt.savefig('CA_2_price.png')\nplt.show()\n\nprint('\\nCA_3')\nr,c=0,0\nfig, ax = plt.subplots(3,4,figsize=(18, 12))\nfor i in range(0,12):\n    df_store = df[df['store_id']=='CA_3']\n    item_df = df_store[df_store['item_id']==itemID[i]]\n    print('{} sold\/price\u76f8\u95a2\u4fc2\u6570:'.format(itemID[i]),item_df['sold'].corr(item_df['sell_price']))\n    ax2 = ax[r][c].twinx() \n    ax[r][c].plot(item_df['date'],item_df['sell_price'],color='b',alpha=0.5)\n    ax2.plot(item_df['date'],item_df['sold'],color='r',alpha=0.5)\n    ax[r][c].set_title(itemID[i])\n    c+=1\n    if c ==4:\n        c=0\n        r+=1\n#plt.savefig('CA_3_price.png')\nplt.show()\n\nprint('\\nTX_1')\nr,c=0,0\nfig, ax = plt.subplots(3,4,figsize=(18, 12))\nfor i in range(0,12):\n    df_store = df[df['store_id']=='TX_1']\n    item_df = df_store[df_store['item_id']==itemID[i]]\n    print('{} sold\/price\u76f8\u95a2\u4fc2\u6570:'.format(itemID[i]),item_df['sold'].corr(item_df['sell_price']))\n    ax2 = ax[r][c].twinx() \n    ax[r][c].plot(item_df['date'],item_df['sell_price'],color='b',alpha=0.5)\n    ax2.plot(item_df['date'],item_df['sold'],color='r',alpha=0.5)\n    ax[r][c].set_title(itemID[i])\n    c+=1\n    if c ==4:\n        c=0\n        r+=1\n#plt.savefig('TX_1_price.png')\nplt.show()\n\nprint('\\nWI_1')\nr,c=0,0\nfig, ax = plt.subplots(3,4,figsize=(18, 12))\nfor i in range(0,12):\n    df_store = df[df['store_id']=='WI_1']\n    item_df = df_store[df_store['item_id']==itemID[i]]\n    print('{} sold\/price\u76f8\u95a2\u4fc2\u6570:'.format(itemID[i]),item_df['sold'].corr(item_df['sell_price']))\n    ax2 = ax[r][c].twinx() \n    ax[r][c].plot(item_df['date'],item_df['sell_price'],color='b',alpha=0.5)\n    ax2.plot(item_df['date'],item_df['sold'],color='r',alpha=0.5)\n    ax[r][c].set_title(itemID[i])\n    c+=1\n    if c ==4:\n        c=0\n        r+=1\n#plt.savefig('WI_1_price.png')\nplt.show()","3b0a8af2":"# \u4f8b\u3068\u3057\u3066\u4e00\u3064\u306e\u5546\u54c1\u306esold\u306e\u63a8\u79fb\u3092\u78ba\u8a8d\u3059\u308b\ndf_1 = df[df['item_id']=='HOBBIES_1_001']\nplt.plot(df_1['date'],df_1['sold'])\nplt.title('HOBBIES_1_001')\nplt.xlabel('date')\nplt.ylabel('sold')\n#plt.savefig('HOBBIES_1_001_sold_.png')\nplt.show()","824c6c8d":"# sold\u306e\u5206\u5e03\u3092\u78ba\u8a8d\u3059\u308b\nstate_id_lst = df['state_id'].unique()\nstore_id_lst = df['store_id'].unique()\ncategory = df['cat_id'].unique()\n\nfig, ax = plt.subplots(2,5,figsize=(20, 9))\nr,c=0,0\nfor store_id in store_id_lst:\n    df_store = df[df['store_id']==store_id]\n    sns.boxplot(x='cat_id',y='sold',data=df_store,ax=ax[r][c])\n    ax[r][c].set_title(store_id)\n    c +=1\n    if c==5:\n        r+=1\n        c=0\n#plt.savefig('Dist_sold.png')\nplt.show()","8c196e13":"\n# \u5404\u5dde\u306b\u304a\u3051\u308b\u5168\u3066\u306e\u5546\u54c1\u306e\u8ca9\u58f2\u6570(\u7dcf\u548c)\u306e\u63a8\u79fb\u3092\u53ef\u8996\u5316\nfig, ax = plt.subplots(1,3,figsize=(20, 4))\nfor i,state_id in enumerate(state_id_lst):\n    df_state = df[df['state_id']==state_id]\n    sold=df_state.groupby('date').sum()['sold']\n    sold_rol = sold.rolling('30D',center=True).mean()\n    ax[i].plot(sold,c='b') # \u751f\u30c7\u30fc\u30bf\u306e\u63a8\u79fb\uff1a\u9752\n    ax[i].plot(sold_rol,c='r') # \u79fb\u52d5\u5e73\u5747\uff1a\u8d64\n    ax[i].set_ylim(0,26000)\n    ax[i].set_title(state_id)\n#plt.savefig('Each_state_all_goods_sold.png')\nplt.show()\n# \u5404\u5dde\u306b\u304a\u3051\u308b\u5168\u3066\u306e\u5546\u54c1\u306e\u8ca9\u58f2\u6570(\u7dcf\u548c) \u9031,\u6708,\u5e74\u306b\u3064\u3044\u3066\u53ef\u8996\u5316\nfig, ax = plt.subplots(1,3,figsize=(20, 4))\nfor i,state_id in enumerate(state_id_lst):\n    df_state = df[df['state_id']==state_id]\n    df_state=df_state.groupby('date').sum()\n    sns.boxplot(x='wday',y='sold',data=df_state,ax=ax[i])\n    ax[i].set_title(state_id)\n    ax[i].set_xticklabels(['Saturday', 'Sunday','Monday', 'Tuesday', 'Wendthday', 'Thursday', 'Fryday'])\n#plt.savefig('Each_state_all_goods_sold_box_week.png')\nplt.show()\nfig, ax = plt.subplots(1,3,figsize=(20, 4))\nfor i,state_id in enumerate(state_id_lst):\n    df_state = df[df['state_id']==state_id]\n    df_state=df_state.groupby('date').sum()\n    sns.boxplot(x='month',y='sold',data=df_state,ax=ax[i])\n    ax[i].set_title(state_id)\n    ax[i].set_xticklabels(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\n#plt.savefig('Each_state_all_goods_sold_box_month.png')\nplt.show()\nfig, ax = plt.subplots(1,3,figsize=(20, 4))\nfor i,state_id in enumerate(state_id_lst):\n    df_state = df[df['state_id']==state_id]\n    df_state=df_state.groupby('date').sum()\n    sns.boxplot(x='year',y='sold',data=df_state,ax=ax[i])\n    ax[i].set_title(state_id)\n    ax[i].set_xticklabels(['2011', '2012','2013', '2014', '2015', '2016'])\n#plt.savefig('Each_state_all_goods_sold_box_year.png')\nplt.show()\n\n\n# \u5404\u304a\u5e97\u306b\u304a\u3051\u308b\u5168\u3066\u306e\u5546\u54c1\u306e\u8ca9\u58f2\u6570(\u7dcf\u548c)\u306e\u63a8\u79fb\u3092\u53ef\u8996\u5316\nr,c=0,0\nfig, ax = plt.subplots(2,5,figsize=(30, 8))\nfor store_id in store_id_lst:\n    df_store = df[df['store_id']==store_id]\n    sold=df_store.groupby('date').sum()['sold']\n    sold_rol = sold.rolling('30D',center=True).mean()\n    ax[r][c].plot(sold,c='b') # \u751f\u30c7\u30fc\u30bf\u306e\u63a8\u79fb\uff1a\u9752\n    ax[r][c].plot(sold_rol,c='r') # \u79fb\u52d5\u5e73\u5747\uff1a\u8d64\n    ax[r][c].set_ylim(0,9000)\n    ax[r][c].set_title(store_id)\n    c+=1\n    if c ==5:\n        c=0\n        r+=1\n#plt.savefig('Each_state_each_goods_sold_year.png')\nplt.show()\n        \n# \u5168\u3066\u306e\u304a\u5e97\u306b\u304a\u3051\u308b\u5168\u3066\u306e\u5546\u54c1\u306e\u8ca9\u58f2\u6570\u306e\u63a8\u79fb\u3092\u53ef\u8996\u5316\nsold=df.groupby('date').sum()['sold']\nsold_rol = sold.rolling('30D',center=True).mean()\nplt.plot(sold,c='b') # \u751f\u30c7\u30fc\u30bf\u306e\u63a8\u79fb\uff1a\u9752\nplt.plot(sold_rol,c='r') # \u79fb\u52d5\u5e73\u5747\uff1a\u8d64\nplt.title('all aggregate units sales')\n#plt.savefig('all_aggregate_units_sales.png')\nplt.show()","96bd26ca":"\n# \u5404\u304a\u5e97\u306b\u304a\u3051\u308b\u30ab\u30c6\u30b4\u30ea\u6bce\u306e\u5546\u54c1\u306e\u8ca9\u58f2\u6570(\u7dcf\u548c)\u306e\u63a8\u79fb\u3092\u53ef\u8996\u5316\n#\u3000\u7bb1\u3072\u3052\u56f3\u306b\u3088\u308a\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u3092\u53ef\u8996\u5316\nr,c=0,0\nfor state_id in state_id_lst:\n    fig, ax = plt.subplots(3,4,figsize=(25, 15))\n    df_state = df[df['state_id']==state_id]\n    for i,cat_id in enumerate(category):\n        df_state_cat = df_state[df_state['cat_id']==cat_id]\n        df_sc=df_state_cat.groupby('date').sum()\n        sold_rol = df_sc['sold'].rolling('30D',center=True).mean()\n        ax[i][0].plot(df_sc['sold'],c='b') # \u751f\u30c7\u30fc\u30bf\u306e\u63a8\u79fb\uff1a\u9752\n        ax[i][0].plot(sold_rol,c='r') # \u79fb\u52d5\u5e73\u5747\uff1a\u8d64\n        ax[i][0].set_title(state_id+'_'+cat_id)\n        sns.boxplot(x='wday', y='sold', data=df_sc,ax=ax[i][1])\n        ax[i][1].set_title(state_id+'_'+cat_id+' week')\n        ax[i][1].set_xticklabels(['Saturday', 'Sunday','Monday', 'Tuesday', 'Wendthday', 'Thursday', 'Fryday'])\n        sns.boxplot(x='month', y='sold', data=df_sc,ax=ax[i][2])\n        ax[i][2].set_title(state_id+'_'+cat_id+' month')\n        ax[i][2].set_xticklabels(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\n        sns.boxplot(x='year', y='sold', data=df_sc,ax=ax[i][3])\n        ax[i][3].set_title(state_id+'_'+cat_id+' year')\n        ax[i][3].set_xticklabels(['2011', '2012','2013', '2014', '2015', '2016'])\n    #plt.savefig('{}_sold_box.png'.format(state_id))\n    plt.show()\n    \n","64a0d5b9":"# SNAP\u306e\u6709\u7121\u306b\u3088\u308b, FOOD\u306e\u8ca9\u58f2\u6570\u306e\u5909\u5316\u3092\u78ba\u8a8d\n\n# \u5404\u5dde\u306b\u304a\u3051\u308b\u5168\u3066\u306e\u5546\u54c1\u306e\u8ca9\u58f2\u6570(\u7dcf\u548c)\u306e\u63a8\u79fb\u3092\u53ef\u8996\u5316\nfig, ax = plt.subplots(1,3,figsize=(20, 4))\nfor i,state_id in enumerate(state_id_lst):\n    df_state = df[df['state_id']==state_id]\n    df_state = df_state[df_state['cat_id']=='FOODS']\n    sold=df_state.groupby('date').sum()['sold']\n    sold_rol = sold.rolling('30D',center=True).mean()\n    ax[i].plot(sold,c='c') # \u751f\u30c7\u30fc\u30bf\u306e\u63a8\u79fb\uff1a\u30b7\u30a2\u30f3\n    ax[i].plot(sold_rol,c='m') # \u79fb\u52d5\u5e73\u5747\uff1a\u30de\u30bc\u30f3\u30bf\n    \n    df_state_snap = df_state[df_state['snap_{}'.format(state_id)]==1]\n    df_ss=df_state_snap.groupby('date').sum()['sold']\n    ss_sold_rol = df_ss.rolling('30D',center=True).mean()\n    ax[i].plot(df_ss,c='b') # SNAP \u751f\u30c7\u30fc\u30bf\u306e\u63a8\u79fb\uff1a\u9752\n    ax[i].plot(ss_sold_rol,c='r') # SNAP \u79fb\u52d5\u5e73\u5747\uff1a\u8d64\n    ax[i].set_ylim(0,16000)\n    ax[i].set_title(state_id)\n#plt.savefig('Each_state_SNAP_year.png')\nplt.show()\n\n\n# \u5404\u304a\u5e97\u306b\u304a\u3051\u308b\u5168\u3066\u306e\u5546\u54c1\u306e\u8ca9\u58f2\u6570(\u7dcf\u548c)\u306e\u63a8\u79fb\u3092\u53ef\u8996\u5316\nr,c=0,0\nfig, ax = plt.subplots(2,5,figsize=(30, 8))\nfor store_id in store_id_lst:\n    df_store = df[df['store_id']==store_id]\n    df_state = df_state[df_state['cat_id']=='FOODS']\n    sold=df_store.groupby('date').sum()['sold']\n    sold_rol = sold.rolling('30D',center=True).mean()\n    ax[r][c].plot(sold,c='c') # \u751f\u30c7\u30fc\u30bf\u306e\u63a8\u79fb\uff1a\u30b7\u30a2\u30f3\n    ax[r][c].plot(sold_rol,c='m') # \u79fb\u52d5\u5e73\u5747\uff1a\u30de\u30bc\u30f3\u30bf\n    \n    df_store_snap = df_store[df_store['snap_{}'.format(store_id[:2])]==1]\n    df_ss=df_store_snap.groupby('date').sum()['sold']\n    ss_sold_rol = df_ss.rolling('30D',center=True).mean()\n    ax[r][c].plot(df_ss,c='b') # SNAP \u751f\u30c7\u30fc\u30bf\u306e\u63a8\u79fb\uff1a\u9752\n    ax[r][c].plot(ss_sold_rol,c='r') # SNAP \u79fb\u52d5\u5e73\u5747\uff1a\u8d64\n    ax[r][c].set_ylim(0,9000)\n    ax[r][c].set_title(store_id)\n    c+=1\n    if c ==5:\n        c=0\n        r+=1\n#plt.savefig('Each_store_SNAP_year.png')\nplt.show()\n        \n","3de6adfe":"fig, ax = plt.subplots(3,3,figsize=(20, 12))\nfor i,state_id in enumerate(state_id_lst):\n    df_state = df[df['state_id']==state_id]\n    df_state = df_state[df_state['cat_id']=='FOODS']\n    df_state_snap = df_state[df_state['snap_{}'.format(state_id)]==1]\n    df_ss=df_state_snap.groupby('date').sum()\n\n    sns.boxplot(x='wday', y='sold', data=df_ss,ax=ax[i][0])\n    ax[i][0].set_title(state_id+'_'+'FOODS'+' week')\n    ax[i][0].set_xticklabels(['Saturday', 'Sunday','Monday', 'Tuesday', 'Wendthday', 'Thursday', 'Fryday'])\n    sns.boxplot(x='month', y='sold', data=df_ss,ax=ax[i][1])\n    ax[i][1].set_title(state_id+'_'+'FOODS'+' month')\n    ax[i][1].set_xticklabels(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\n    sns.boxplot(x='year', y='sold', data=df_ss,ax=ax[i][2])\n    ax[i][2].set_title(state_id+'_'+'FOODS'+' year')\n    ax[i][2].set_xticklabels(['2011', '2012','2013', '2014', '2015', '2016'])\n#plt.savefig('Each_store_goods_SNAP_year.png')\nplt.show()","a71881b5":"d_id = dict(zip(df.id.cat.codes, df.id))\nd_store_id = dict(zip(df.store_id.cat.codes, df.store_id))\n\n# \u610f\u5473\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u9664\u53bb\ndf.drop([\"date\", \"wm_yr_wk\", \"weekday\"],axis=1,inplace=True)\n\n# d(\u521d\u65e5\u304b\u3089\u4f55\u65e5\u76ee\u3067\u3042\u308b\u304b\u3092\u8868\u3059column)\u3092int\u578b\u306b\u3059\u308b\ndf.d = df['d'].apply(lambda x: x.split('_')[1]).astype(np.int16)\n","2cc14718":"\n# \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\ncols = df.dtypes.index.tolist()\ntypes = df.dtypes.values.tolist()\nfor i,type in enumerate(types):\n    if type.name == 'category':\n        df[cols[i]] = df[cols[i]].cat.codes\n        \n\n# lag\u7279\u5fb4\u306e\u8ffd\u52a0\n# \u4e88\u6e2c\u3059\u308b\u6700\u5927\u304c28\u65e5\u5f8c\u3067\u3042\u308b\u305f\u3081, 28\u65e5\u524d\u306b\u5bfe\u3057\u3066lag\u3092\u8a08\u7b97\u3059\u308b\n# 1,2,3\u65e5\u524d, 1,2,4\u9031\u9593\u524d, \u7d042\u6708\u524d\u306esold\u3092\u8ffd\u52a0\nlags = [1,2,3,7,14,28,56]\nfor lag in lags:\n    df['sold_lag_'+str(lag)] = df.groupby(['id', 'item_id', 'dept_id', 'cat_id', 'store_id', 'state_id'],as_index=False)['sold'].shift(lag+28).astype(np.float16)\n    \n# \u30e9\u30b0\u306b\u304a\u3051\u308b\u79fb\u52d5\u5e73\u5747\u306e\u8ffd\u52a0\nsold_lag_cols = ['sold_lag_7','sold_lag_28']\nfor win in [7,28] :\n    for lag,lag_col in zip([7,28], sold_lag_cols):\n        df['rmean_{}_{}'.format(lag,win)] = df.groupby(['id', 'item_id', 'dept_id', 'cat_id', 'store_id', 'state_id'])['sold_lag_'+str(lag)].transform(lambda x: x.rolling(window=win).mean()).astype(np.float16)\n\n# Target Encoding \n# sold \u306b\u5bfe\u3057\u3066 Orderd Target Encoding\ncols = ['state_id','store_id','cat_id','dept_id']\nnew_cols = ['state_id_ots','store_id_ots','cat_id_ots','dept_id_ots']\ndf_new = pd.DataFrame()\nimport category_encoders as ce\nte = ce.CatBoostEncoder(random_state=42)\nfor c,nc in zip(cols,new_cols):\n    df[nc] = te.fit_transform(df[c],df['sold'])\ndf = downcast(df)        \n\n# \u30e9\u30b0\u306e\u5c0e\u5165\u306b\u3088\u308bNan\u306e\u9664\u53bb\ndf = df[df['d']>=57]\ndf.tail()","540037ee":"df.info()","dc577ea1":"# \u4e88\u6e2c\u306b\u5229\u7528\u3059\u308b\u4f5c\u6210\u3057\u305f\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\ndf.to_pickle('data.pkl')\ndel df\ngc.collect();","b0049dde":"# \u8a13\u7df4, \u691c\u8a3c\u7528\u306e\u30c7\u30fc\u30bf\u306e\u5206\u5272, \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\ndata = pd.read_pickle('data.pkl')\nvalid = data[(data['d']>=1914) & (data['d']<1942)][['id','d','sold']]\ntest = data[data['d']>=1942][['id','d','sold']]\neval_preds = test['sold']\nvalid_preds = valid['sold']","21bc0463":"from lightgbm import LGBMRegressor\nimport joblib\nimport optuna\nimport sklearn.datasets\n\n# optuna, lightgbm\u306b\u7528\u3044\u308bseed\u5024\nseed=42\n\ndef objectives(trial):\n    # optuna\u3067\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30b5\u30fc\u30c1\u7bc4\u56f2\u306e\u8a2d\u5b9a\n    params = {\n            'learning_rate' : trial.suggest_float('learning_rate',0.05,0.1),\n            'num_leaves': trial.suggest_int('num_leaves', 63, 255),\n            'max_depth' : trial.suggest_int('max_depth', 4,8),\n            'min_child_samples': trial.suggest_int('min_child_samples', 10, 100)\n            }\n\n    # LightGBM\u3067\u5b66\u7fd2+\u4e88\u6e2c\n    model = LGBMRegressor(random_state=seed,**params)# \u8ffd\u52a0\u90e8\u5206\n    model.fit(X_train, y_train,eval_set=[(X_train,y_train),(X_valid,y_valid)],eval_metric='tweedie',early_stopping_rounds=20,verbose=False)\n\n    # \u691c\u8a3c\u30c7\u30fc\u30bf\u3092\u7528\u3044\u305f\u8a55\u4fa1\n    score = model.score(X_valid, y_valid)\n    \n    return score\n\n#store \u3054\u3068\u306b\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057, \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c\u3059\u308b\nstores = sales.store_id.cat.codes.unique().tolist()\nfor store in stores:\n    df = data[data['store_id']==store]\n    \n    #\u8a13\u7df4, \u691c\u8a3c\u7528, (\u30c6\u30b9\u30c8)\u3000\u306b\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3000\n    X_train, y_train = df[df['d']<1914].drop('sold',axis=1), df[df['d']<1914]['sold']\n    X_valid, y_valid = df[(df['d']>=1914) & (df['d']<1942)].drop('sold',axis=1), df[(df['d']>=1914) & (df['d']<1942)]['sold']\n    X_test = df[df['d']>=1942].drop('sold',axis=1)\n    \n    print('*****Prediction for Store: {}*****'.format(d_store_id[store]))\n    \n    # optuna\u306b\u3088\u308b\u6700\u9069\u5316\u547c\u3073\u51fa\u3057\n    opt = optuna.create_study(direction='maximize',sampler=optuna.samplers.TPESampler(seed=seed))\n    opt.optimize(objectives, n_trials=10)\n\n    # \u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\u53d6\u5f97\n    trial = opt.best_trial\n    params_best = dict(trial.params.items())\n    params_best['random_seed'] = 0\n\n    # \u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u5b66\u7fd2\/\u4e88\u6e2c    \n    model = LGBMRegressor(n_estimators=1000,random_state=seed,**params_best)\n    \n    model.fit(X_train, y_train, eval_set=[(X_train,y_train),(X_valid,y_valid)],\n             eval_metric='tweedie', verbose=20, early_stopping_rounds=50)\n    valid_preds[X_valid.index] = model.predict(X_valid)\n    eval_preds[X_test.index] = model.predict(X_test)\n    filename = 'model'+str(d_store_id[store])+'.pkl'\n    # model\u306e\u4fdd\u5b58\n    joblib.dump(model, filename)\n    del model, X_train, y_train, X_valid, y_valid\n    gc.collect()","92993327":"# \u8a13\u7df4\u306e\u969b\u306evalidation\u306e\u4e88\u6e2c\u7d50\u679c\u3092\u7372\u5f97\nvalid['sold'] = valid_preds\nvalidation = valid[['id','d','sold']]\nvalidation = pd.pivot(validation, index='id', columns='d', values='sold').reset_index()\nvalidation.columns=['id'] + ['F' + str(i + 1) for i in range(28)]\nvalidation.id = validation.id.map(d_id).str.replace('evaluation','validation')\n\n# test\u306e\u4e88\u6e2c\u7d50\u679c\u3092\u7372\u5f97\ntest['sold'] = eval_preds\nevaluation = test[['id','d','sold']]\nevaluation = pd.pivot(evaluation, index='id', columns='d', values='sold').reset_index()\nevaluation.columns=['id'] + ['F' + str(i + 1) for i in range(28)]\n#\u3000\u30ab\u30c6\u30b4\u30ea\u30fcID\u3092\u305d\u308c\u305e\u308c\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306b\u30ea\u30de\u30c3\u30d7\nevaluation.id = evaluation.id.map(d_id)\n\n#\u3000submission\u306e\u4f5c\u6210 \nsubmit = pd.concat([validation,evaluation]).reset_index(drop=True)\nsubmit.to_csv('submission.csv',index=False)","4b04df8d":"# Modeling and Forecast","3895ba62":"### sold\u306b\u3064\u3044\u3066","33c1a25f":"# M5 Forecasting Accuracy","ce918cf0":"\n\u30fbprice\u306e\u5909\u52d5\u306f\u5c11\u306a\u304f, \u5229\u7528\u3059\u308b\u671f\u9593\u5185\u306b\u304a\u3044\u3066\u5468\u671f\u6027\u306f\u78ba\u8a8d\u3067\u304d\u306a\u3044  \n\u30fb\u76f8\u95a2\u4fc2\u6570\u306fsold\u3068price\u306e\u5909\u52d5\u9593\u9694\u304c\u7570\u306a\u308b\u305f\u3081\u53c2\u8003\u306b\u3057\u3065\u3089\u3044\u304c, \u56f3\u3092\u78ba\u8a8d\u3059\u308b\u9650\u308a\u3067\u306f\u5546\u54c1\u306e\u4fa1\u683c\u5909\u52d5\u3068, \u8ca9\u58f2\u500b\u6570\u306b\u76f8\u95a2\u306f\u306a\u3044","0f0e41e7":"* \u591a\u304f\u306e\u5546\u54c1\u306esold\u306f0\u3067\u3042\u308a, \u304a\u305d\u3089\u304f\u5546\u54c1\u306b\u3088\u3063\u3066\u591a\u6570\u58f2\u308c\u308b\u3053\u3068\u304c\u60f3\u5b9a\u3055\u308c\u308b\n* \u6700\u5927\u8ca9\u58f2\u6570\u306b\u304a\u3044\u3066FOODS\u304c\u6700\u3082\u591a\u304f, HOUSEHOLD, HOBBIES\u306f\u305d\u308c\u3068\u6bd4\u8f03\u3057\u3066\u5c11\u306a\u3044\u50be\u5411\u304c\u3042\u308b","426334cb":"* \u304a\u5e97\u3054\u3068\u306bSNAP\u306e\u6709\u7121\u3067\u82e5\u5e72\u306e\u5546\u54c1\u306e\u8ca9\u58f2\u6570\u304c\u4e0a\u6607\u304c\u78ba\u8a8d\u3067\u304d\u308b  \n * WI_2, WI_3\u304c\u9855\u8457\n* SNAP\u3092\u7121\u8996\u3057\u305f\u969b\u306e\u7bb1\u3072\u3052\u56f3\u3068\u6bd4\u8f03\u3057\u3066, SNAP\u304c\u3042\u308b\u5834\u5408, \u6708\u3054\u3068\u306e\u8ca9\u58f2\u6570\u306e\u5909\u52d5\u304c\u82e5\u5e72\u5927\u304d\u304f\u306a\u3063\u305f\u306b\u306a\u3063\u305f\u5370\u8c61","b91232d8":"### sold \u306b\u3064\u3044\u3066 \u53ef\u8996\u5316\u7d50\u679c\u304b\u3089\u306e\u8003\u5bdf\n* \u5168\u4f53, \u5dde, \u304a\u5e97, \u5546\u54c1\u306e\u30ab\u30c6\u30b4\u30ea\u6bce\u306b\u304a\u3044\u3066\u5546\u54c1\u8ca9\u58f2\u6570\u306f\u5168\u3066\u53f3\u80a9\u4e0a\u304c\u308a\n * \u5e74\u3005\u5897\u52a0\u304c\u78ba\u8a8d\u3055\u308c\u308b\n * (\u79fb\u52d5\u5e73\u5747\u306e\u63a8\u79fb\u3088\u308a, \u5e74\u5358\u4f4d\u306e\u5468\u671f\u6027\u304c\u3042\u308b\u306e\u3067\u306f\u306a\u3044\u304b\uff1f)\n* \u5dde\u3054\u3068\u306b\u8ca9\u58f2\u500b\u6570\u306e\u63a8\u79fb\u304c\u7570\u306a\u308b\n* \u5dde\u304c\u540c\u4e00\u3067\u3042\u3063\u3066\u3082\u304a\u5e97\u306b\u3088\u3063\u3066\u7dcf\u8ca9\u58f2\u500b\u6570\u306e\u63a8\u79fb\u306e\u69d8\u5b50\u304c\u7570\u306a\u308b\n* \u5dde, \u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u306b\u304a\u3044\u3066\u66dc\u65e5\u6bce\u306b\u8ca9\u58f2\u500b\u6570\u304c\u7570\u306a\u308b\n * \u571f\u66dc\u65e5\u66dc\u304c\u9ad8\u304f\u3001\u6c34\u66dc\u65e5\u307e\u3067\u6e1b\u5c11\u3057\u3001\u6728\u66dc\u65e5\u304b\u3089\u5897\u52a0\u306b\u8ee2\u3058\u308b\u50be\u5411(\u9031\u306e\u306a\u304b\u3067\u306e\u5468\u671f\u6027)\n * \u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u306b\u304a\u3044\u3066, HOBBISE\u3067\u306f\u571f\u66dc\uff1e\u65e5\u66dc, HOUSEHOLD, FOODS\u3067\u306f\u65e5\u66dc\uff1e\u571f\u66dc\u3068\u306a\u3063\u305f\n \n\u3057\u305f\u304c\u3063\u3066\u3001\u66dc\u65e5\u3001\u5e74\u306e\u60c5\u5831\u306f\u56de\u5e30\u306b\u7279\u306b\u6709\u52b9\u3067\u3042\u308b\u3068\u8003\u3048\u308b","4e46856c":"### SNAP\u306e\u6709\u7121\u306b\u3064\u3044\u3066\nSNAP : \u4f4e\u6240\u5f97\u306e\u5bb6\u65cf\u3084\u500b\u4eba\u306b\u3001\u98df\u54c1\u3092\u8cfc\u5165\u3059\u308b\u305f\u3081\u306e\u96fb\u5b50\u7d66\u4ed8\u632f\u66ff\u306e\u30c7\u30d3\u30c3\u30c8\u30ab\u30fc\u30c9\u3092\u63d0\u4f9b\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u3002\u591a\u304f\u306e\u5dde\u3067\u306f\u3001\u6708\u306e10\u65e5\u9593\u306b\u6e21\u3063\u3066\u91d1\u92ad\u7684\u306a\u7d66\u4ed8\u304c\u4eba\u3005\u306b\u5206\u914d\u3055\u308c\u3001\u305d\u308c\u305e\u308c\u306e\u65e5\u306b1\/10\u306e\u4eba\u3005\u304c\u30ab\u30fc\u30c9\u3067\u7d66\u4ed8\u3092\u53d7\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u21d2\u3000\u98df\u54c1\u5546\u54c1\u306b\u304a\u3044\u3066\u8ca9\u58f2\u6570\u304c\u5897\u6e1b\u3059\u308b\u53ef\u80fd\u6027","b36caa33":"### sell-price\u306b\u3064\u3044\u3066","059a4a0a":"Number of Index : 59181090 (= 30980(\u5546\u54c1\u306e\u6570) * 1941(\u65e5\u6570))  ","78e8ba92":"## \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0","2d2b5f15":"\u53c2\u8003 :    \nhttps:\/\/www.kaggle.com\/headsortails\/back-to-predict-the-future-interactive-m5-eda   \nhttps:\/\/www.kaggle.com\/anshuls235\/time-series-forecasting-eda-fe-modelling","d0acd94c":"EDA\u3067\u5f97\u3089\u308c\u305f\u60c5\u5831\u304b\u3089\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0(\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306b\u5165\u529b\u3059\u308b\u7279\u5fb4\u91cf\u306e\u9078\u629e, \u751f\u6210)\u3092\u884c\u3046\u3002 EDA\u3088\u308a, \u6b21\u306e\u7279\u5fb4\u91cf\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u6709\u52b9\u3067\u3042\u308b\u3053\u3068\u304c\u8003\u3048\u3089\u308c\u308b\n* \u4e00\u9031\u9593, \u4e00\u6708\u306e\u30e9\u30b0\n* \u79fb\u52d5\u5e73\u5747  \n\n\u3057\u305f\u304c\u3063\u3066, \u4eca\u56de\u306f\u5b58\u5728\u3059\u308b\u30c7\u30fc\u30bf\u306e\u6700\u95771\u6708\u5148\u307e\u3067\u4e88\u6e2c\u3059\u308b\u305f\u3081, 1\u6708\u524d\u306e\u8ca9\u58f2\u6570\u3068\u305d\u308c\u3092\u57fa\u6e96\u3068\u3057\u3066, 1\u65e5\u524d, 2\u65e5\u524d, 1\u9031\u9593\u524d\u3068\u3044\u3063\u305f\u30e9\u30b0\u30c7\u30fc\u30bf\u3092\u7528\u3044\u308b\u3002\n\u307e\u305f, \u5168\u4f53\u7684\u306a\u30c8\u30ec\u30f3\u30c9\u3068\u3057\u3066\u5546\u54c1\u8ca9\u58f2\u6570\u304c\u540c\u69d8\u306a\u63a8\u79fb\u3092\u3057\u3066\u3044\u308b\u3053\u3068\u304b\u3089, \u5468\u671f\u7684\u306a\u63a8\u79fb\u304c\u78ba\u8a8d\u3055\u308c\u308b\u30e9\u30b0\u3068, \u305d\u308c\u305e\u308c\u306e\u79fb\u52d5\u5e73\u5747\u304c\u6709\u52b9\u3068\u306a\u308b\u3053\u3068\u304c\u8003\u3048\u3089\u308c\u308b\u3002  \n\u307e\u305f, \u30c7\u30fc\u30bf\u306e\u968e\u5c64(CA, CA_1, CA_1_HOBBIES\u306e\u3088\u3046\u306a)\u3054\u3068\u306b\u30c8\u30ec\u30f3\u30c9\u304c\u5b58\u5728\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081, TargetEncoding\u3092\u884c\u3046(Ordered Target Statistics)","1714c783":"# EDA  "}}