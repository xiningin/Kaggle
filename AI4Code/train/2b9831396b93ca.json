{"cell_type":{"a26f0786":"code","e819b071":"code","d549a79f":"code","d0112498":"code","442d6151":"code","bed66f65":"code","d09ceed4":"code","ae62e609":"code","e3b91efc":"code","713d35c2":"code","1f74b924":"code","573234e3":"code","2bba5a07":"code","65ebed91":"code","ab88b545":"code","6492b548":"code","a21197d2":"code","2f451cf0":"code","f6b22974":"code","473aefd5":"code","546c1603":"code","a25ca324":"code","70d5aeeb":"code","44e02723":"code","d234b70b":"code","43a7ee95":"code","f7a84770":"code","4200e9ec":"code","4f6ea7b9":"code","3fcce13f":"code","3b754d11":"code","98ca1fd1":"markdown","fc052ed2":"markdown","744ad082":"markdown","98734e8c":"markdown","8ed9d68b":"markdown","a8cc21a8":"markdown","c5b15391":"markdown","e1c0b112":"markdown","13f01ade":"markdown","de67d920":"markdown"},"source":{"a26f0786":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e819b071":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\n%matplotlib inline\nimport os\nimport numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\n\nimport xgboost as xgb\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nimport xgboost\nfrom sklearn.preprocessing import LabelEncoder\nlabelEncoder = LabelEncoder()\nimport datetime as dt\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.model_selection import cross_val_score","d549a79f":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","d0112498":"train_data.isna().sum() # chicking for nan values","442d6151":"\ntrain_data['Age'].fillna(train_data['Age'].median(), inplace=True)\ntrain_data['Fare'].fillna(train_data['Fare'].median(), inplace=True)\n\n","bed66f65":"train_data.isna().sum() #problem solved","d09ceed4":"train_data[train_data.duplicated()] # no duplicated found","ae62e609":"train_data.info()","e3b91efc":"train_data.describe().T\n","713d35c2":"train_data[train_data['Age']<1] # lets drop them","1f74b924":"train_data=train_data[train_data['Age']>=1]","573234e3":"train_data.describe().T","2bba5a07":"train_data[\"Pclass\"].value_counts().plot(kind='barh');\n","65ebed91":"train_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()","ab88b545":"train_data[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean()","6492b548":"train_data[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean()","a21197d2":"sns.histplot(x='Age',hue='Survived',data=train_data)","2f451cf0":"sns.countplot(x='Pclass',hue='Survived',data=train_data)","f6b22974":"corr_matrix=train_data.corr()\ncorr_matrix['Survived'].sort_values(ascending=False).plot(kind='barh',figsize=(15,8));\nplt.grid()\nplt.show()","473aefd5":"mask=np.triu(np.ones_like(corr_matrix,dtype=bool))\nfig,ax=plt.subplots(figsize=(11,9))\ncmap=sns.diverging_palette(230,20,as_cmap=True)\nsns.heatmap(corr_matrix,mask=mask,cmap=cmap,vmax=.3,center=0,\n           square=True,linewidths=.5,cbar_kws={'shrink':.5});","546c1603":"train_data.info()","a25ca324":"Numeric_data=train_data[['Age','Fare']]\nscaler=StandardScaler()\nscaler.fit(Numeric_data)\nNum_Training_data=pd.DataFrame(scaler.transform(Numeric_data),index=Numeric_data.index,columns=Numeric_data.columns)\nNum_Training_data.isna().sum()","70d5aeeb":"train_data.columns","44e02723":"Cat_data=train_data[['Survived','Pclass','SibSp','Parch', 'Embarked']]\nCat_data=Cat_data.dropna()\ncat_incoder1=OneHotEncoder()\ncat_1hot=cat_incoder1.fit_transform(Cat_data[['Pclass']]).toarray()\nPclass=pd.DataFrame(cat_1hot,columns=cat_incoder1.categories_,index=Cat_data.index)\n\n\ncat_incoder2=OrdinalEncoder()\nSibSp_day_1hot=cat_incoder2.fit_transform(Cat_data[['SibSp']])\nSibSp=pd.DataFrame(SibSp_day_1hot,columns=['SibSp'],index=Cat_data.index)\n\n\ncat_incoder3=OneHotEncoder()\nEmbarked_1hot=cat_incoder3.fit_transform(Cat_data[['Embarked']]).toarray()\nEmbarked=pd.DataFrame(Embarked_1hot,columns=cat_incoder3.categories_,index=Cat_data.index)\nEmbarked\n\ncat_incoder4=OrdinalEncoder()\nParch_1hot=cat_incoder4.fit_transform(Cat_data[['Parch']])\nParch=pd.DataFrame(Parch_1hot,columns=['Parch'],index=Cat_data.index)\n\nordinal_encoder=OrdinalEncoder()\nOrd_Encoded=ordinal_encoder.fit_transform(Cat_data[['Survived']])\nSurvived=pd.DataFrame(Ord_Encoded,columns=['Survived'],index=Cat_data.index)\nCat_Training_data=pd.concat([Pclass,SibSp,Embarked,Parch,Survived],axis=1)\nCat_Training_data.isna().sum()","d234b70b":"Training_data=pd.concat([Cat_Training_data,Num_Training_data],axis=1)\nTraining_data=Training_data.dropna()\nTraining_data.columns","43a7ee95":"X_train, X_test, y_train, y_test= train_test_split(Training_data.drop(columns=[ 'Survived']),Training_data['Survived'], test_size =.2,shuffle=True, random_state=42)","f7a84770":"\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(max_depth=5, n_estimators=500, random_state=1)\n\nmodel.fit(X_train, y_train)\ny_pred=model.predict(X_test)","4200e9ec":"from sklearn.metrics import classification_report ,confusion_matrix\nprint(\"classification report:\\n\\n\",classification_report(y_test, y_pred)) \n\nconf_mat = confusion_matrix(y_test, y_pred)\nfig, ax = plt.subplots(figsize=(12,12))\nsns.heatmap(conf_mat, annot=True,xticklabels=list(Training_data['Survived'].unique()),yticklabels=list(Training_data['Survived'].unique()))\nplt.title(\"RandomForestClassifier \")\nplt.ylabel('Actual')\nplt.xlabel('Predicted')\nplt.show()","4f6ea7b9":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\ntest_data['Age'].fillna(test_data['Age'].median(), inplace=True)\ntest_data['Fare'].fillna(test_data['Fare'].median(), inplace=True)\n\n\nNumeric_data=test_data[['Age','Fare']]\nscaler=StandardScaler()\nscaler.fit(Numeric_data)\nNum_test_data=pd.DataFrame(scaler.transform(Numeric_data),index=Numeric_data.index,columns=Numeric_data.columns)\nNum_test_data","3fcce13f":"Cat_data=test_data[['Pclass','SibSp','Parch', 'Embarked']]\nCat_data=Cat_data.dropna()\ncat_incoder1=OneHotEncoder()\ncat_1hot=cat_incoder1.fit_transform(Cat_data[['Pclass']]).toarray()\nPclass=pd.DataFrame(cat_1hot,columns=cat_incoder1.categories_,index=Cat_data.index)\n\n\ncat_incoder2=OrdinalEncoder()\nSibSp_day_1hot=cat_incoder2.fit_transform(Cat_data[['SibSp']])\nSibSp=pd.DataFrame(SibSp_day_1hot,columns=['SibSp'],index=Cat_data.index)\n\n\ncat_incoder3=OneHotEncoder()\nEmbarked_1hot=cat_incoder3.fit_transform(Cat_data[['Embarked']]).toarray()\nEmbarked=pd.DataFrame(Embarked_1hot,columns=cat_incoder3.categories_,index=Cat_data.index)\nEmbarked\n\ncat_incoder4=OrdinalEncoder()\nParch_1hot=cat_incoder4.fit_transform(Cat_data[['Parch']])\nParch=pd.DataFrame(Parch_1hot,columns=['Parch'],index=Cat_data.index)\n\n\nCat_test_data=pd.concat([Pclass,SibSp,Embarked,Parch],axis=1)\nCat_test_data=pd.concat([Cat_test_data,Num_test_data],axis=1)\nCat_test_data","3b754d11":"predictions = model.predict(Cat_test_data)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","98ca1fd1":"we noticed outliers in age that is the minmum age is 0.42 and it does not make sence","fc052ed2":"# Prepare the Data\nFeature Engineering <br>\nEncoding Categorical Varibles <br>\nScaling<br>\nHandling Numerical Attributes<br>","744ad082":"## Handling Numerical Attributes","98734e8c":"# Clean the Data\n","8ed9d68b":"# importing libraries\n","a8cc21a8":"### The sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).","c5b15391":"## Test data","e1c0b112":"# Explore the Data\n","13f01ade":"## Handling Text & Categorical Attributes","de67d920":"# Get the Data\n"}}