{"cell_type":{"4431339f":"code","83301554":"code","72ba38cd":"code","890756ae":"code","e85830d7":"code","de0397cc":"code","ef9c6ffc":"code","beab5dcb":"code","dc4262de":"code","502a52bb":"markdown","f92b34e7":"markdown","4a18c107":"markdown"},"source":{"4431339f":"!pip install pycocotools\n!pip install 'git+https:\/\/github.com\/facebookresearch\/detectron2.git'","83301554":"import matplotlib.pyplot as plt\nimport cv2\nimport json\nfrom pathlib import Path\nfrom pycocotools import _mask\nfrom pycocotools.coco import COCO\nfrom detectron2.data import MetadataCatalog, DatasetCatalog\nfrom detectron2.data.datasets import register_coco_instances\nfrom detectron2.utils.visualizer import Visualizer, ColorMode","72ba38cd":"# Load LiveCell shsy5y data\nlive_cell_imgs_dir = Path('..\/input\/sartorius-cell-instance-segmentation\/LIVECell_dataset_2021\/images\/livecell_train_val_images\/SHSY5Y')\n\nregister_coco_instances('sartorius_live_cell_train',{}, '..\/input\/sartorius-live-cell-shsy5y-coco\/annotations_train.json', live_cell_imgs_dir)\nregister_coco_instances('sartorius_live_cell_val',{},'..\/input\/sartorius-live-cell-shsy5y-coco\/annotations_val.json', live_cell_imgs_dir)\n\nlive_cell_train_meta = MetadataCatalog.get('sartorius_live_cell_train')\nlive_cell_train_ds = DatasetCatalog.get('sartorius_live_cell_train')\n\nlive_cell_val_meta = MetadataCatalog.get('sartorius_live_cell_val')\nlive_cell_val_ds = DatasetCatalog.get('sartorius_live_cell_val')","890756ae":"# Display a sample file to check the LiveCell shsy5y train data is loaded correctly\ntrain_sample = live_cell_train_ds[0]\nimg = cv2.imread(train_sample['file_name'])\n\nvisualizer = Visualizer(img[:, :, ::-1], metadata=live_cell_train_meta)\nout = visualizer.draw_dataset_dict(train_sample)\n\n_,ax = plt.subplots(1, 2, figsize=(30, 30))\nax[0].imshow(img)\nax[1].imshow(out.get_image()[:, :, ::-1])","e85830d7":"# Display a sample file to check the LiveCell shsy5y val data is loaded correctly\nval_sample = live_cell_val_ds[0]\nimg = cv2.imread(val_sample['file_name'])\n\nvisualizer = Visualizer(img[:, :, ::-1], metadata=live_cell_val_meta)\nout = visualizer.draw_dataset_dict(val_sample)\n\n_,ax = plt.subplots(1, 2, figsize=(30, 30))\nax[0].imshow(img)\nax[1].imshow(out.get_image()[:, :, ::-1])","de0397cc":"# Read LiveCell shsy5y train and val data \nwith open('..\/input\/sartorius-cell-instance-segmentation\/LIVECell_dataset_2021\/annotations\/LIVECell_single_cells\/shsy5y\/livecell_shsy5y_train.json') as f:\n  data_train = json.loads(f.read())\n\nwith open('..\/input\/sartorius-cell-instance-segmentation\/LIVECell_dataset_2021\/annotations\/LIVECell_single_cells\/shsy5y\/livecell_shsy5y_val.json') as f:\n  data_val = json.loads(f.read())","ef9c6ffc":"# Add categories\ncategories = [{'name':'shsy5y', 'id':1}, {'name':'astro', 'id':2}, {'name':'cort', 'id':3}]\n\ndata_train['categories'] = categories\ndata_val['categories'] = categories","beab5dcb":"# Format to COCO RLE format\ntrain_annotations = []\nfor key in data_train['annotations'].keys():\n  rle = _mask.frPoly(data_train['annotations'][key]['segmentation'],520,704)\n  data_train['annotations'][key]['segmentation'] = {'size': rle[0]['size'], 'counts':rle[0]['counts'].decode('utf-8')}\n  train_annotations.append(data_train['annotations'][key])\ndata_train['annotations'] = train_annotations\n\nval_annotations = []\nfor key in data_val['annotations'].keys():\n  rle = _mask.frPoly(data_val['annotations'][key]['segmentation'],520,704)\n  data_val['annotations'][key]['segmentation'] = {'size': rle[0]['size'], 'counts': rle[0]['counts'].decode('utf-8')}\n  val_annotations.append(data_val['annotations'][key])\ndata_val['annotations'] = val_annotations","dc4262de":"# Save formatted data to JSON\nwith open('annotations_train.json', 'w', encoding='utf-8') as f:\n  json.dump(data_train, f, ensure_ascii=True, indent=4)\n\nwith open('annotations_val.json', 'w', encoding='utf-8') as f:\n  json.dump(data_val, f, ensure_ascii=True, indent=4)","502a52bb":"## How it was reformatted to load without error","f92b34e7":"# LiveCell shsy5y COCO Dataset\nI've created a [COCO dataset](https:\/\/www.kaggle.com\/monikabozhinova\/sartorius-live-cell-shsy5y-coco) from the provided LiveCell shsy5y data that can be easily explored with pycocotools and loaded into detectron2.","4a18c107":"## Load LiveCell shsy5y COCO train and val datasets"}}