{"cell_type":{"b9614a84":"code","41e665df":"code","98fecc01":"code","d09bc197":"code","ca801717":"code","6def676e":"code","d1d430e6":"code","1e63c29c":"code","e959acc3":"code","c4f5ee9c":"code","b69b5a72":"code","0e5f7dd3":"code","7b3290f2":"code","80f6659c":"code","69638423":"code","b444df67":"code","a01d94a3":"code","b313e8c1":"code","73e505a4":"code","3793d146":"code","a5dda280":"code","7646d884":"code","371874c0":"code","e9fdad67":"code","3c328a53":"code","768279c8":"code","50b34876":"code","58c84ec3":"code","be9f0a04":"code","ade4faf1":"code","b3be20e4":"code","9bfe5666":"code","c17abb16":"code","aa12be38":"code","4176e9bc":"code","e9b02692":"code","d63ac055":"code","73161fee":"markdown"},"source":{"b9614a84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","41e665df":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","98fecc01":"oct_data_ = pd.read_csv('\/kaggle\/input\/ecommerce-events-history-in-cosmetics-shop\/2019-Oct.csv')\n","d09bc197":"oct_data_.info(null_counts=True)\n","ca801717":"oct_data_['event_time'] = pd.to_datetime(oct_data_['event_time'],infer_datetime_format=True)\noct_data_.info(null_counts=True)","6def676e":"oct_data_.head(5)\noct_data_.shape","d1d430e6":"oct_data_.loc[oct_data_['brand'].isnull(),'brand']='Non Brand'","1e63c29c":"oct_data_[oct_data_['price']<0]","e959acc3":"oct_data_.head(10)","c4f5ee9c":"#Lets see a pie chart of event_type\n\nsizes_ = oct_data_.groupby(['event_type']).size().reset_index(name='Count')\nprint(sizes_)\n\nlabels_ = sizes_['event_type'].to_list()\nprint(labels_)\n\ncounter_ = sizes_['Count'].to_list()\nprint(counter_)\ntotal = sum([int(v) for v in counter_])\nprint(total)\nperchange = [(v\/total)*100 for v in counter_]\nprint(perchange)\nfig, ax1 = plt.subplots()\nax1.pie(perchange,labels=labels_,autopct='%1.1f%%',shadow=True, startangle=90)\nax1.axis('equal')\nplt.show()","b69b5a72":"customer_data = oct_data_[['user_id','event_type','price']]","0e5f7dd3":"price_df_ = customer_data[['user_id','price']]\nprice_df_= price_df_.groupby(['user_id'])['price'].sum().reset_index()\nprice_df_= price_df_.sort_values(by=['price'],ascending=False)\nprice_df_ = price_df_.rename(columns={'price':'spent'})\nprint(price_df_.shape)","7b3290f2":"print(price_df_['user_id'].describe())\nprint(price_df_['spent'].describe())\n","80f6659c":"price_lst_ = price_df_['spent'].to_list()\nplt.hist(x= price_lst_,bins=100,log=True, color='red')\nplt.xlabel('Spent amount')\nplt.ylabel('Customer Count')\nplt.title('Customer Spending in October')\nplt.show()","69638423":"sell_df_ = oct_data_[['event_time','event_type']]\nsell_df_.shape","b444df67":"sell_df_ = sell_df_[sell_df_['event_type']=='purchase']\nsell_df_.shape","a01d94a3":"sell_df_['event_time'] = sell_df_['event_time'].dt.weekday","b313e8c1":"sell_df_ = sell_df_.groupby(['event_time']).size().reset_index(name='Count')","73e505a4":"\ndays = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun']\nday_id = sell_df_['event_time'].to_list()\nsold_count = sell_df_['Count'].to_list()\n\nprint(days)\nprint(day_id)\nprint(sold_count)\n\nsun_sold = sold_count[6]\ndays = ['Sun']+days[:-1]\nsold_count=[sun_sold]+sold_count[:-1]\n\n","3793d146":"plt.bar(day_id,sold_count)\nplt.xlabel('Day of Week')\nplt.ylabel('Total Sell count')\nplt.title('Total sell in each weekday in October')\nplt.xticks(day_id,days)\nplt.show()","a5dda280":"customer_info_ = oct_data_[['user_id','event_type']]\nunq = list(customer_info_['user_id'].unique())\nprint('unique_customer ',len(unq))\n","7646d884":"view_df = customer_info_[customer_info_['event_type']=='view']\nview_df = view_df.groupby(['user_id']).size().reset_index(name='count')\nview_dict={x:y for x,y in zip(view_df['user_id'].to_list(),view_df['count'].to_list())}\n\nlen(view_dict)\n","371874c0":"cart_df = oct_data_[oct_data_['event_type']=='cart']\ncart_df = cart_df.groupby(['user_id']).size().reset_index(name='count')\ncart_dict={x:y for x,y in zip(cart_df['user_id'].to_list(),cart_df['count'].to_list())}\nlen(cart_dict)\n","e9fdad67":"purchase_df = customer_info_[customer_info_['event_type']=='purchase']\npurchase_df = purchase_df.groupby(['user_id']).size().reset_index(name='count')\npurchase_dict={x:y for x,y in zip(purchase_df['user_id'].to_list(),purchase_df['count'].to_list())}\n\nlen(purchase_dict)\n","3c328a53":"v = []\nc = []\np = []\n\nn_v = []\nn_c = []\nn_p = []\n\ni = 0 \nj = 0\nfor id_ in unq:\n    if purchase_dict.get(id_,0)>0:\n        i+=1\n        v.append(view_dict.get(id_,0))\n        c.append(cart_dict.get(id_,0))\n        p.append(purchase_dict.get(id_,0))\n    else:\n        j+=1\n        n_v.append(view_dict.get(id_,0))\n        n_c.append(cart_dict.get(id_,0))\n        n_p.append(purchase_dict.get(id_,0))\n\nprint(i,' users at least purchased once')\nprint(j, ' users never did any purchase')","768279c8":"fig, ax1 = plt.subplots()\nax1.scatter(v,p,c='g',marker='.')\nax1.scatter(n_v,n_p,c='r',marker='x')\nax1.set_xlabel('view')\nax1.set_ylabel('purchase')\nplt.title('view purchase graph')\nplt.show()","50b34876":"fig, ax1 = plt.subplots()\nax1.scatter(c,p,c='g',marker='.')\nax1.scatter(n_c,n_p,c='r',marker='x')\nax1.set_xlabel('cart')\nax1.set_ylabel('purchase')\nplt.title('cart purchase graph')\nplt.show()","58c84ec3":"fig, ax1 = plt.subplots()\nax1.scatter(v,c,c='g',marker='.')\nax1.scatter(n_v,n_c,c='r',marker='x')\nax1.set_xlabel('view')\nax1.set_ylabel('cart')\nplt.title('view cart graph')\nplt.show()","be9f0a04":"time_series_df = oct_data_[['event_time','event_type']]\ntime_series_df['event_time'] = time_series_df['event_time'].dt.date","ade4faf1":"sell_by_day = time_series_df.groupby('event_time').size().reset_index(name='Count')\nplt.figure(figsize=(40,20))\nplt.xticks(rotation=30,fontsize=20)\nplt.yticks(fontsize=20)\nf = sns.barplot(data=sell_by_day,x='event_time',y='Count')\n\n","b3be20e4":"sell_by_hour=pd.DataFrame()\nsell_by_hour['date' ]= oct_data_['event_time'].dt.date\nsell_by_hour['hour'] = oct_data_['event_time'].dt.hour\nsell_by_hour['action'] = oct_data_['event_type']\nsell_by_hour= sell_by_hour.groupby('hour').size().reset_index(name='count')","9bfe5666":"plt.figure(figsize=(40,20))\nplt.xticks(rotation=30,fontsize=20)\nplt.yticks(fontsize=20)\n\nsns.lineplot(data=sell_by_hour,x='hour',y='count')\nplt.title('Sell over time',fontsize=30)\nplt.xlabel('Hour',fontsize=30)\nplt.ylabel('Sell Cout', fontsize=30)\n\n","c17abb16":"def top_guns(n , dict_, dict_1 ):\n    '''\n    returns a list of tuples of top n number of evnts in dict and dict1 for same user.priority is max number in dict\n    '''\n    lst = list()\n    for k in dict_.keys():\n        tuple_ = (dict_.get(k,0),k)\n        lst.append(tuple_)\n    lst.sort()\n    lst.reverse()\n    \n    lst1 = []\n    for i in range(n):\n        tuple_= lst[i]\n        tuple1_=tuple((tuple_[0],dict_1.get(tuple_[1],0)))\n        #print(tuple1_)\n        lst1.append(tuple1_)\n    \n    return lst1","aa12be38":"top_purchase = pd.DataFrame()\nlt = top_guns(10000,purchase_dict,cart_dict)\ntop_purchase = pd.DataFrame(data=lt,columns=['purchase','cart'])\ntmp = pd.DataFrame(data=top_guns(10000,purchase_dict,view_dict),columns=['purchase','view'])\ntop_purchase['view'] = tmp['view']\n","4176e9bc":"top_purchase.head(10000)","e9b02692":"top_purchase['scoring'] = top_purchase['purchase']*300+top_purchase['cart']*5+top_purchase['view']\ntop_purchase.head(5)","d63ac055":"fig, ax = plt.subplots(figsize=(20,10))\nsns.scatterplot(ax=ax,data=top_purchase,x='scoring',y='purchase')\nplt.xlabel('User score',fontsize=20)\nplt.ylabel('Purchase count',fontsize=20)\n","73161fee":"<h3>the negetive prices are on the items that were puchased, so it seems like that negetive price represents the item return<\/h3>"}}