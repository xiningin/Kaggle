{"cell_type":{"b443bd16":"code","6e3ec2c9":"code","20fa278c":"code","f2f059f8":"code","0355ee05":"code","b4a1aa14":"code","def6d342":"code","86f96599":"code","3d03fa90":"code","ee50c438":"code","6d0211ab":"code","7d4c1820":"code","7d7d6574":"code","bea246ed":"code","063a6fb8":"code","b453ca98":"code","5225b21c":"code","718a4342":"code","fd29ec5e":"code","f640143d":"code","b90c80ac":"code","77e4adcd":"code","59d740dc":"code","223569cb":"markdown","9056561a":"markdown","26e5fafb":"markdown","570eb04e":"markdown","0db5c05f":"markdown","fd5f8f67":"markdown","4ef61c3b":"markdown","d8981362":"markdown","81348c45":"markdown"},"source":{"b443bd16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6e3ec2c9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","20fa278c":"df=pd.read_csv(\"\/kaggle\/input\/social-network-ads1\/Social_Network_Ads.csv\")\ndf.head()","f2f059f8":"df.info()","0355ee05":"df.describe()","b4a1aa14":"df.isnull().sum()","def6d342":"X=df.iloc[:,:-1].values\ny=df.iloc[:,-1].values","86f96599":"print(X)","3d03fa90":"print(y)","ee50c438":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","6d0211ab":"print(X_train)","7d4c1820":"print(y_train)","7d7d6574":"print(X_test)","bea246ed":"print(y_test)","063a6fb8":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","b453ca98":"print(X_train)","5225b21c":"print(X_test)","718a4342":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","fd29ec5e":"print(classifier.predict(sc.transform([[30,87000]])))","f640143d":"y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","b90c80ac":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","77e4adcd":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Decision Tree Classification (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","59d740dc":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_test), y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Decision Tree Classification (Test set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","223569cb":"**PREDICTING A NEW RESULT**","9056561a":"**PREDICTING TEST SET RESULT**","26e5fafb":"**IMPORTING DATASAET**","570eb04e":"**VISUALISING THE TRAINING SET RESULTS**","0db5c05f":"**IMPORTING LIBRARIES**","fd5f8f67":"**CONFUSION MATRIX**","4ef61c3b":"**APPLYING FEATURE SCALING**","d8981362":"**APPLYING DECISION TREE CLASSIFIER MODEL ON THE DATASET**","81348c45":"**VISUALISING THE TEST RESULTS**"}}