{"cell_type":{"34376b0f":"code","a9b48b63":"code","79db29a2":"code","37ea48d6":"code","ccaf7598":"code","baa2157a":"code","163cd36f":"code","d59ebde9":"code","b454b71f":"code","4c9ae031":"code","08581f88":"code","5385e2a7":"code","b1aa2842":"code","9b590aaf":"markdown","ad2412b4":"markdown","0cf73a42":"markdown","069177e9":"markdown","45882967":"markdown","7bd5a16c":"markdown","05f4241c":"markdown","0ad1bab3":"markdown","3f7fa39a":"markdown","25f66636":"markdown","275f932a":"markdown","9315539d":"markdown"},"source":{"34376b0f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.rcParams['figure.figsize'] = (16, 8)\nplt.style.use('fivethirtyeight')","a9b48b63":"df = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndf.head()","79db29a2":"\"\"\"\nLook at the price variable. Does it have a long tail?\n\"\"\"\nfig, axes = plt.subplots(1, 2)\n      \naxes[0].hist(df['price'], density= True, bins = 50)\naxes[0].set_title(\"Normal scale Price\")\n\naxes[1].hist(np.log1p(df['price']), density= True, bins = 50)\naxes[1].set_title(\"Logarithmic scale Price\");","37ea48d6":"features  = ['latitude',\n'longitude',\n'price',\n'minimum_nights',\n'number_of_reviews',\n'reviews_per_month',\n'calculated_host_listings_count',\n'availability_365']\n\n\"\"\"Checking description of this project's data set\"\"\"\ndf[features].describe()","ccaf7598":"missing_vals = df[features].isnull().sum()\nmissing_vals.to_frame().reset_index().rename({'index': 'Variables', 0: 'Missing Values'}, axis = 1).sort_values(by = 'Missing Values', ascending = False).head(2).style.background_gradient('Reds')","baa2157a":"print(\"Median for variable 'minimum_nights': %s\" %(np.median(df[features]['minimum_nights'])))","163cd36f":"def train_test_split(df,test_split = 0.2, val_split = 0.2, random_seed = 42):\n    \"\"\"Shuffling\"\"\"\n    n = len(df)                                                         # Total number of IDs to be generated\n    idx = np.arange(n)                                                  # Generating IDs\n    np.random.seed = random_seed                                        # Setting random Seed to 42\n    np.random.shuffle(idx)                                              # Initial Dataset Ids Shuffled\n\n    \"\"\"Split your data in train\/val\/test sets, with 60%\/20%\/20% distribution.\"\"\"\n    n = len(df)\n    n_val = int(n * val_split)                                           # Number of validation values\n    n_test = int(n * test_split)                                         # Number of Test Set values\n    n_train = n - n_val - n_test                                         # Number of Train set Values\n\n    df_train = df.iloc[idx[:n_train]]                                    # Creating Train set    \n    df_val = df.iloc[idx[n_train:n_train + n_val]]                       # Creating Validation Set\n    df_test = df.iloc[idx[n_train+n_val:]]                               # Creating Test Set\n\n    \"\"\"Dropping indexes now\"\"\"\n    df_train = df_train.reset_index(drop = True)\n    df_val = df_val.reset_index(drop = True)\n    df_test = df_test.reset_index(drop = True)\n\n    \"\"\"Apply the log transformation to the price variable using the np.log1p() function.\"\"\"\n    y_train = np.log1p(df_train['price'].values)\n    y_val = np.log1p(df_val['price'].values)\n    y_test = np.log1p(df_test['price'].values)\n\n    \"\"\"Make sure that the target value ('price') is not in your dataframe.\"\"\"\n    del df_train['price']\n    del df_val['price']\n    del df_test['price']\n    \n    return df_train, df_val, df_test, y_train, y_val, y_test\n\ndf_train, df_val, df_test, y_train, y_val, y_test= train_test_split(df[features])","d59ebde9":"\"\"\"Imputing Missing values with 0\"\"\"\ndef train_X_imputing_0(df):\n    df = df.fillna(0)\n    X = df.values\n    return X\n\n\"\"\"Imputing Missing values with Mean\"\"\"\ndef train_X_imputing_mean(df):\n    df = df.fillna(0)\n    X = df.values\n    return X","b454b71f":"\"\"\"Creating a function for Training Linear Regression Model\"\"\"\ndef train_linear_regression_reg(X,y,r = 0.01):\n    \"\"\"\n    Including a biased term\n    \"\"\"\n    ones = np.ones(X.shape[0])\n    X = np.column_stack([ones, X])\n    \n    \"\"\"\n    Gram Matrix\n    \"\"\"\n    XTX = X.T.dot(X)\n    \n    \"\"\"Regularization\"\"\"\n    XTX = XTX + r * np.eye(XTX.shape[0])\n    \n    \n    \"\"\"inverse of Gram Matrix\"\"\"\n    XTX_inv = np.linalg.inv(XTX)\n    w_full = XTX_inv.dot(X.T).dot(y)\n    \n    return w_full[0], w_full[1:] \n\ndef rmse(y, y_pred):\n    error = y - y_pred\n    squared = error ** 2\n    mean_squared = squared.mean()\n    return np.sqrt(mean_squared)","4c9ae031":"\"\"\"Model and Prediction with missing value imputation using 0\"\"\"\nX_train = train_X_imputing_0(df_train)\n\nw0,w = train_linear_regression_reg(X_train,y_train,r = 0)\n\n# Predicting on Validation set\ny_pred_train = w0 + X_train.dot(w)\n\n# Predicting on Validation set\nX_val = train_X_imputing_0(df_val)\ny_pred_val = w0 + X_val.dot(w)\n\n# rmse\nprint(\"RMSE_train with missing value imputation using 0: %s\" %rmse(y_train, y_pred_train).round(2))\nprint(\"RMSE_valid with missing value imputation using 0: %s\" %rmse(y_val, y_pred_val).round(2))\n\n\n\"\"\"Model and Prediction with missing value imputation using mean\"\"\"\nX_train = train_X_imputing_mean(df_train)\n\nw0,w = train_linear_regression_reg(X_train,y_train, r = 0)\n# Predicting on Training set\ny_pred_train = w0 + X_train.dot(w)\n\n# Predicting on Validation set\nX_val = train_X_imputing_mean(df_val)\ny_pred_val = w0 + X_val.dot(w)\n\n# rmse\nprint(\"RMSE_train with missing value imputation using mean: %s\" %rmse(y_train, y_pred_train).round(2))\nprint(\"RMSE_valid with missing value imputation using mean: %s\" %rmse(y_val, y_pred_val).round(2))","08581f88":"for r in [0, 0.000001, 0.0001, 0.001, 0.01, 0.1, 1, 5, 10]:\n    w0,w = train_linear_regression_reg(X_train,y_train,r)\n    \n    \n    # Predicting on Validation set\n    X_val = train_X_imputing_0(df_val)\n    y_pred = w0 + X_val.dot(w)\n    score =  (rmse(y_val, y_pred))\n    # rmse\n    print(\"r: %s, w0: %s, score: %s\" %(r, w0, score))\n    ","5385e2a7":"score = []\nfor s in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:\n    df_train, df_val, df_test, y_train, y_val, y_test= train_test_split(df[features], random_seed = s)\n    \n    \"\"\"Model and Prediction with missing value imputation using 0\"\"\"\n    X_train = train_X_imputing_0(df_train)\n\n    w0,w = train_linear_regression_reg(X_train,y_train,r=0)\n\n    # Predicting on Validation set\n    X_val = train_X_imputing_0(df_val)\n    y_pred = w0 + X_val.dot(w)\n    \n#     RMSE Scores\n    score.append(rmse(y_val, y_pred).round(2))\n    print(\"seed: %s, w0: %s, score: %s\" %(s, w0, score[s]))\nprint(\"Standard Deviation of Scores: %s\" %np.std(score).round(3))","b1aa2842":"\ndf_train, df_val, df_test, y_train, y_val, y_test= train_test_split(df[features], random_seed = 9)\n\n\n\"\"\"Combining Train and Validation set\"\"\"\ndf_train_full = pd.concat([df_train, df_val])\ndf_train_full = df_train_full.reset_index(drop = True)\n\n\n\n\"\"\"Model and Prediction with missing value imputation using 0\"\"\"\nX_train_full = train_X_imputing_0(df_train_full)\ny_full_train = np.concatenate([y_train, y_val])\n\n\nw0,w = train_linear_regression_reg(X_train_full,y_full_train, r = 0.001)\n\n# Predicting on Validation set\nX_test = train_X_imputing_0(df_test)\ny_pred = w0 + X_test.dot(w)\n\n#     RMSE Scores\nscore =rmse(y_test, y_pred)\nprint(\"seed: %s, w0: %s, score: %s\" %(s, w0, score))","9b590aaf":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">Question 5:\n    <ul> \n<li>We used seed 42 for splitting the data. Let's find out how selecting the seed influences our score.<\/li>\n<li>Try different seed values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].<\/li>\n<li>For each seed, do the train\/validation\/test split with 60%\/20%\/20% distribution.<\/li>\n<li>Fill the missing values with 0 and train a model without regularization.<\/li>\n<li>For each seed, evaluate the model on the validation dataset and collect the RMSE scores.<\/li>\n<li>What's the standard deviation of all the scores? To compute the standard deviation, use np.std.<\/li>\n<li>Round the result to 3 decimal digits (round(std, 3))<\/li><\/ul>\n\n<ul>Note: Standard deviation shows how different the values are. If it's low, then all values are approximately the same. If it's high, the values are different. If standard deviation of scores is low, then our model is stable.<\/ul>\n<\/div>","ad2412b4":"<div style=\"background:#2b6684;color:white; font-family:'Goudy Old Style';padding:0.5em;border-radius:0.2em;font-size:30px;color:white\"><u>This Week Questions<\/u>\n    \n<p style=\"font-family:cursive;font-size:15px;color:  yellow\"><u>Question 1:<\/u><\/p>\n<ul style=\"font-family:cursive;font-size:15px;color:  white\">\n<li>Find a feature with missing values. How many missing values does it have?<\/li>\n<\/ul>   \n\n<p style=\"font-family:cursive;font-size:15px;color:  yellow\"><u>Question 2:<\/u><\/p>\n<ul style=\"font-family:cursive;font-size:15px;color:  white\">\n<li>What's the median (50% percentile) for variable 'minimum_nights'?<\/li>\n<\/ul>    \n    \n\n<p style=\"font-family:cursive;font-size:15px;color:  yellow\"><u>Question 3:<\/u><\/p>\n<ul style=\"font-family:cursive;font-size:15px;color:  white\">\n<li>We need to deal with missing values for the column from Q1.<\/li>\n<li>We have two options: fill it with 0 or with the mean of this variable.<\/li>\n<li>Try both options. For each, train a linear regression model without regularization using the code from the lessons.<\/li>\n<li>For computing the mean, use the training only!<\/li>\n<li>Use the validation dataset to evaluate the models and compare the RMSE of each option.<\/li>\n<li>Round the RMSE scores to 2 decimal digits using round(score, 2)<\/li>\n<li>Which option gives better RMSE?<\/li>\n<\/ul> \n    \n<p style=\"font-family:cursive;font-size:15px;color:  yellow\"><u>Question 4:<\/u><\/p>\n<ul style=\"font-family:cursive;font-size:15px;color:  white\">\n<li>Now let's train a regularized linear regression.<\/li>\n<li>For this question, fill the NAs with 0.<\/li>\n<li>Try different values of r from this list: [0, 0.000001, 0.0001, 0.001, 0.01, 0.1, 1, 5, 10].<\/li>\n<li>Use RMSE to evaluate the model on the validation dataset.<\/li>\n<li>Round the RMSE scores to 2 decimal digits.<\/li>\n<li>Which r gives the best RMSE?<\/li>\n<\/ul>    \n    \n    \n<p style=\"font-family:cursive;font-size:15px;color:  yellow\"><u>Question 5:<\/u><\/p>\n<ul style=\"font-family:cursive;font-size:15px;color:  white\">\n<li>We used seed 42 for splitting the data. Let's find out how selecting the seed influences our score.<\/li>\n<li>Try different seed values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].<\/li>\n<li>For each seed, do the train\/validation\/test split with 60%\/20%\/20% distribution.<\/li>\n<li>Fill the missing values with 0 and train a model without regularization.<\/li>\n<li>For each seed, evaluate the model on the validation dataset and collect the RMSE scores.<\/li>\n<li>What's the standard deviation of all the scores? To compute the standard deviation, use np.std.<\/li>\n<li>Round the result to 3 decimal digits (round(std, 3)).<\/li>\n<\/ul>     \n    \n<ul style=\"font-family:cursive;font-size:15px;color:  white\">Note: Standard deviation shows how different the values are. If it's low, then all values are approximately the same. If it's high, the values are different. If standard deviation of scores is low, then our model is stable.<\/ul>    \n\n<p style=\"font-family:cursive;font-size:15px;color:  yellow\"><u>Question 6:<\/u><\/p>\n<ul style=\"font-family:cursive;font-size:15px;color:  white\">\n<li>Split the dataset like previously, use seed 9.<\/li>\n<li>Combine train and validation datasets.<\/li>\n<li>Fill the missing values with 0 and train a model with r=0.001.<\/li>\n<li>What's the RMSE on the test dataset?<\/li>\n<\/ul>\n\n<\/div>\n","0cf73a42":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">Importing Libraries<\/div>","069177e9":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">Features used for this Project<\/div>","45882967":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">Look at the price variable. Does it have a long tail?<\/div>","7bd5a16c":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">Loading and Reading Data <\/div>","05f4241c":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">Question 4:\n    <ul> \n<li>Now let's train a regularized linear regression.<\/li>\n<li>For this question, fill the NAs with 0.<\/li>\n<li>Try different values of r from this list: [0, 0.000001, 0.0001, 0.001, 0.01, 0.1, 1, 5, 10].<\/li>\n<li>Use RMSE to evaluate the model on the validation dataset.<\/li>\n<li>Round the RMSE scores to 2 decimal digits.<\/li>\n<li> Which r gives the best RMSE?<\/li><\/ul>\n<\/div>\n","0ad1bab3":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">Split the data\n    <ul>\n<li>Shuffle the initial dataset, use seed 42.<\/li>\n<li>Split your data in train\/val\/test sets, with 60%\/20%\/20% distribution.<\/li>\n<li>Make sure that the target value ('price') is not in your dataframe.<\/li>\n        <li>Apply the log transformation to the price variable using the np.log1p() function.<\/li><\/ul>\n<\/div>\n","3f7fa39a":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">Q2. What's the median (50% percentile) for variable 'minimum_nights'?<\/div>","25f66636":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">Q1. Find a feature with missing values. How many missing values does it have?<\/div>","275f932a":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">Question 3:\n    <ul>\n\n<li>We need to deal with missing values for the column from Q1.<\/li>\n<li>We have two options: fill it with 0 or with the mean of this variable.<\/li>\n<li>Try both options. For each, train a linear regression model without regularization using the code from the lesssons.<\/li>\n<li>For computing the mean, use the training only!<\/li>\n<li>Use the validation dataset to evaluate the models and compare the RMSE of each option.<\/li>\n<li>Round the RMSE scores to 2 decimal digits using round(score, 2)<\/li>\n<li> Which option gives better RMSE?<\/li><\/ul>\n<\/div>\n","9315539d":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">Question 6:\n    <ul> \n<li>Split the dataset like previously, use seed 9.<\/li>\n<li>Combine train and validation datasets.<\/li>\n<li>Train a model with r=0.001.<\/li>\n<li>What's the RMSE on the test dataset?<\/li><\/ul>\n<\/div>\n"}}