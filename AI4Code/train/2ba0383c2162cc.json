{"cell_type":{"c335d541":"code","44f908fa":"code","9e286b1d":"code","4aa92a37":"code","2bcc9be5":"code","d0590af7":"code","a16d0b82":"code","ed6b53a7":"code","32d684a3":"code","7bc31332":"code","47c5118b":"code","7eb2f444":"code","9f74a83a":"code","195a6f53":"code","9136574e":"code","5fffee17":"code","c23c7e95":"code","747da99e":"code","4ea3c589":"code","b34d6550":"code","55f0da95":"code","843a127e":"code","3250cbb2":"code","02309ba1":"code","5f228001":"code","fcba5797":"code","dd942ab4":"code","35e953ce":"code","d43ffabf":"code","a66a050f":"code","25b3d06c":"code","210711c3":"code","57b24fa6":"code","88bd231b":"code","145bcd38":"code","88adff44":"markdown","19fc8fe7":"markdown","68fed8a8":"markdown","bed6bff6":"markdown","37bf3d5f":"markdown","cbeb6bc7":"markdown","1f9b3f50":"markdown","c5859e36":"markdown","220b5b8e":"markdown","22c192ba":"markdown","d2228164":"markdown","1227a353":"markdown","b009d025":"markdown","5e17c1a9":"markdown","e948e6e1":"markdown","b93a7089":"markdown","5d8e3deb":"markdown","3f12799d":"markdown","a3df394a":"markdown","fc0871eb":"markdown","c1464a58":"markdown","5820c4a5":"markdown","32400b1c":"markdown","180a81c4":"markdown","0aaf81b2":"markdown","1b25cf56":"markdown","8e645901":"markdown","b4f75b5d":"markdown","4a898ef6":"markdown","1ee04476":"markdown","bac7a64f":"markdown","b756dab1":"markdown","117c24aa":"markdown","b5f46bc7":"markdown","51c2cbc8":"markdown","8520e60a":"markdown","7e19ff49":"markdown","ddc7734e":"markdown","a20a439f":"markdown","59152bd2":"markdown","4be2e3b3":"markdown","6a2d208f":"markdown"},"source":{"c335d541":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","44f908fa":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Load the data\ndata = pd.read_csv('..\/input\/melbourne-housing-snapshot\/melb_data.csv')","9e286b1d":"# Select target\ny = data.Price\n\n# To keep things simple, we'll use only numerical predictors\nmelb_predictors = data.drop(['Price'], axis=1)\nX = melb_predictors.select_dtypes(exclude=['object'])\n\n# Divide data into training and validation subsets\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state=0)","4aa92a37":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n# Function for comparing different approaches\ndef score_dataset(X_train, X_valid, y_train, y_valid):\n    model = RandomForestRegressor(n_estimators=10, random_state=0)\n    model.fit(X_train, y_train)\n    preds = model.predict(X_valid)\n    return mean_absolute_error(y_valid, preds)","2bcc9be5":"cols_with_missing = [col for col in X_train.columns\n                     if X_train[col].isnull().any()]\n\n# Drop columns in training and validation data\nreduced_X_train = X_train.drop(cols_with_missing, axis=1)\nreduced_X_valid = X_valid.drop(cols_with_missing, axis=1)\n\nprint(\"MAE from Approach 1 (Drop columns with missing values):\")\nprint(score_dataset(reduced_X_train, reduced_X_valid, y_train, y_valid))","d0590af7":"from sklearn.impute import SimpleImputer\n\n# Imputation\nmy_imputer = SimpleImputer(strategy='mean')\nimputed_X_train = pd.DataFrame(my_imputer.fit_transform(X_train))\nimputed_X_valid = pd.DataFrame(my_imputer.transform(X_valid))\n\n# Imputation removed column names; put them back\nimputed_X_train.columns = X_train.columns\nimputed_X_valid.columns = X_valid.columns\n\nprint(\"MAE from Approach 2 (Imputation):\")\nprint(score_dataset(imputed_X_train, imputed_X_valid, y_train, y_valid))","a16d0b82":"# Make copy to avoid changing original data (when imputing)\nX_train_plus = X_train.copy()\nX_valid_plus = X_valid.copy()\n\n# Make new columns indicating what will be imputed\nfor col in cols_with_missing:\n    X_train_plus[col + '_was_missing'] = X_train_plus[col].isnull()\n    X_valid_plus[col + '_was_missing'] = X_valid_plus[col].isnull()\n\n# Imputation\nmy_imputer = SimpleImputer(strategy='mean')\nimputed_X_train_plus = pd.DataFrame(my_imputer.fit_transform(X_train_plus))\nimputed_X_valid_plus = pd.DataFrame(my_imputer.transform(X_valid_plus))\n\n# Imputation removed column names; put them back\nimputed_X_train_plus.columns = X_train_plus.columns\nimputed_X_valid_plus.columns = X_valid_plus.columns\n\nprint(\"MAE from Approach 3 (An Extension to Imputation):\")\nprint(score_dataset(imputed_X_train_plus, imputed_X_valid_plus, y_train, y_valid))","ed6b53a7":"missing_val_percent_by_column = X_train.isnull().sum() \/ X_train.shape[0]\nprint (missing_val_percent_by_column[missing_val_percent_by_column > 0])","32d684a3":"# Shape of training data (num_rows, num_columns)\nprint(X_train.shape)\n\n# Number of missing values in each column of training data\nmissing_val_count_by_column = (X_train.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","7bc31332":"# Separate target from predictors\ny = data.Price\nX = data.drop(['Price'], axis=1)\n\n# Divide data into training and validation subsets\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# Drop columns with missing values (simplest approach)\ncols_with_missing = [col for col in X_train_full.columns if X_train_full[col].isnull().any()] \nX_train_full.drop(cols_with_missing, axis=1, inplace=True)\nX_valid_full.drop(cols_with_missing, axis=1, inplace=True)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\nlow_cardinality_cols = [cname for cname in X_train_full.columns if X_train_full[cname].nunique() < 10 and \n                        X_train_full[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if X_train_full[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\nmy_cols = low_cardinality_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()","47c5118b":"X_train.head()","7eb2f444":"# Get list of categorical variables\ns = (X_train.dtypes == 'object')\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","9f74a83a":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n# Function for comparing different approaches\ndef score_dataset(X_train, X_valid, y_train, y_valid):\n    model = RandomForestRegressor(n_estimators=100, random_state=0)\n    model.fit(X_train, y_train)\n    preds = model.predict(X_valid)\n    return mean_absolute_error(y_valid, preds)","195a6f53":"drop_X_train = X_train.select_dtypes(exclude=['object'])\ndrop_X_valid = X_valid.select_dtypes(exclude=['object'])\n\nprint(\"MAE from Approach 1 (Drop categorical variables):\")\nprint(score_dataset(drop_X_train, drop_X_valid, y_train, y_valid))","9136574e":"from sklearn.preprocessing import LabelEncoder\n\n# Make copy to avoid changing original data \nlabel_X_train = X_train.copy()\nlabel_X_valid = X_valid.copy()\n\n# Apply label encoder to each column with categorical data\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    label_X_train[col] = label_encoder.fit_transform(X_train[col])\n    label_X_valid[col] = label_encoder.transform(X_valid[col])\n\nprint(\"MAE from Approach 2 (Label Encoding):\") \nprint(score_dataset(label_X_train, label_X_valid, y_train, y_valid))","5fffee17":"from sklearn.preprocessing import OneHotEncoder\n\n# Apply one-hot encoder to each column with categorical data\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(X_train[object_cols]))\nOH_cols_valid = pd.DataFrame(OH_encoder.transform(X_valid[object_cols]))\n\n# One-hot encoding removed index; put it back\nOH_cols_train.index = X_train.index\nOH_cols_valid.index = X_valid.index\n\n# Remove categorical columns (will replace with one-hot encoding)\nnum_X_train = X_train.drop(object_cols, axis=1)\nnum_X_valid = X_valid.drop(object_cols, axis=1)\n\n# Add one-hot encoded columns to numerical features\nOH_X_train = pd.concat([num_X_train, OH_cols_train], axis=1)\nOH_X_valid = pd.concat([num_X_valid, OH_cols_valid], axis=1)\n\nprint(\"MAE from Approach 3 (One-Hot Encoding):\") \nprint(score_dataset(OH_X_train, OH_X_valid, y_train, y_valid))","c23c7e95":"# Separate target from predictors\ny = data.Price\nX = data.drop(['Price'], axis=1)\n\n# Divide data into training and validation subsets\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if X_train_full[cname].nunique() < 10 and \n                        X_train_full[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if X_train_full[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()","747da99e":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","4ea3c589":"from sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(n_estimators=100, random_state=0)","b34d6550":"from sklearn.metrics import mean_absolute_error\n\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model)\n                             ])\n\n# Preprocessing of training data, fit model \nmy_pipeline.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = my_pipeline.predict(X_valid)\n\n# Evaluate the model\nscore = mean_absolute_error(y_valid, preds)\nprint('MAE:', score)","55f0da95":"# Select subset of predictors\ncols_to_use = ['Rooms', 'Distance', 'Landsize', 'BuildingArea', 'YearBuilt']\nX = data[cols_to_use]\n\n# Select target\ny = data.Price","843a127e":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\n\nmy_pipeline = Pipeline(steps=[('preprocessor', SimpleImputer()),\n                              ('model', RandomForestRegressor(n_estimators=50,\n                                                              random_state=0))\n                             ])","3250cbb2":"from sklearn.model_selection import cross_val_score\n\n# Multiply by -1 since sklearn calculates *negative* MAE\nscores = -1 * cross_val_score(my_pipeline, X, y,\n                              cv=5,\n                              scoring='neg_mean_absolute_error')\n\nprint(\"MAE scores:\\n\", scores)","02309ba1":"print(\"Average MAE score (across experiments):\")\nprint(scores.mean())","5f228001":"# Select subset of predictors\ncols_to_use = ['Rooms', 'Distance', 'Landsize', 'BuildingArea', 'YearBuilt']\nX = data[cols_to_use]\n\n# Select target\ny = data.Price\n\n# Separate data into training and validation sets\nX_train, X_valid, y_train, y_valid = train_test_split(X, y)","fcba5797":"from xgboost import XGBRegressor\n\nmy_model = XGBRegressor()\nmy_model.fit(X_train, y_train)","dd942ab4":"from sklearn.metrics import mean_absolute_error\n\npredictions = my_model.predict(X_valid)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(predictions, y_valid)))","35e953ce":"my_model = XGBRegressor(n_estimators=500)\nmy_model.fit(X_train, y_train)","d43ffabf":"my_model = XGBRegressor(n_estimators=500)\nmy_model.fit(X_train, y_train, \n             early_stopping_rounds=5, \n             eval_set=[(X_valid, y_valid)],\n             verbose=False)","a66a050f":"my_model = XGBRegressor(n_estimators=1000, learning_rate=0.05)\nmy_model.fit(X_train, y_train, \n             early_stopping_rounds=5, \n             eval_set=[(X_valid, y_valid)], \n             verbose=False)","25b3d06c":"my_model = XGBRegressor(n_estimators=1000, learning_rate=0.05, n_jobs=4)\nmy_model.fit(X_train, y_train, \n             early_stopping_rounds=5, \n             eval_set=[(X_valid, y_valid)], \n             verbose=False)","210711c3":"import pandas as pd\n\n# Read the data\ndata = pd.read_csv('..\/input\/aercreditcard\/AER_credit_card_data.csv', \n                   true_values = ['yes'], false_values = ['no'])\n\n# Select target\ny = data.card\n\n# Select predictors\nX = data.drop(['card'], axis=1)\n\nprint(\"Number of rows in the dataset:\", X.shape[0])\nX.head()","57b24fa6":"from sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\n\n# Since there is no preprocessing, we don't need a pipeline (used anyway as best practice!)\nmy_pipeline = make_pipeline(RandomForestClassifier(n_estimators=100))\ncv_scores = cross_val_score(my_pipeline, X, y, \n                            cv=5,\n                            scoring='accuracy')\n\nprint(\"Cross-validation accuracy: %f\" % cv_scores.mean())","88bd231b":"expenditures_cardholders = X.expenditure[y]\nexpenditures_noncardholders = X.expenditure[~y]\n\nprint('Fraction of those who did not receive a card and had no expenditures: %.2f' \\\n      %((expenditures_noncardholders == 0).mean()))\nprint('Fraction of those who received a card and had no expenditures: %.2f' \\\n      %(( expenditures_cardholders == 0).mean()))","145bcd38":"# Drop leaky predictors from dataset\npotential_leaks = ['expenditure', 'share', 'active', 'majorcards']\nX2 = X.drop(potential_leaks, axis=1)\n\n# Evaluate the model with leaky predictors removed\ncv_scores = cross_val_score(my_pipeline, X2, y, \n                            cv=5,\n                            scoring='accuracy')\n\nprint(\"Cross-val accuracy: %f\" % cv_scores.mean())","88adff44":"**So, why did imputation perform better than dropping the columns?**\n* The training data has 10864 rows and 12 columns, where three columns contain missing data. For each column, **less than half** of the entries are missing. Thus, dropping the columns removes a lot of useful information, and so it makes sense that imputation would perform better.","19fc8fe7":"We obtain the cross-validation scores with the `cross_val_score()` function from scikit-learn. We set the number of folds with the `cv` parameter.\n\nThe `scoring` parameter chooses a measure of model quality to report: in this case, we chose negative mean absolute error (MAE). The docs for scikit-learn show a [list of options](https:\/\/scikit-learn.org\/stable\/modules\/model_evaluation.html).\n\nIt is a little surprising that we specify negative MAE. Scikit-learn has a convention where all metrics are defined so a high number is better. Using negatives here allows them to be consistent with that convention.","68fed8a8":"# XGBoost","bed6bff6":"**Train-Test Contamination**\n\nA different type of leak occurs when you aren't careful to distinguish training data from validation data.\n\nRecall that validation is meant to be a measure of how the model does on data that it hasn't considered before. You can corrupt this process in subtle ways if the validation data affects the preprocessing behavior. This is sometimes called **train-test contamination**.\n\nFor example, imagine you run preprocessing (like fitting an imputer for missing values) before calling `train_test_split()`. The end result? Your model may get good validation scores, giving you great confidence in it, but perform poorly when you deploy it to make decisions.\n\nAfter all, you incorporated data from the validation or test data into how you make predictions, so the may do well on that particular data even if it can't generalize to new data. This problem becomes even more subtle (and more dangerous) when you do more complex feature engineering.\n\nIf your validation is based on a simple train-test split, exclude the validation data from any type of *fitting*, including the fitting of preprocessing steps. This is easier if you use scikit-learn pipelines. When using cross-validation, it's even more critical that you do your preprocessing inside the pipeline!","37bf3d5f":"**Score from Approach 1 (Drop Columns with Missing Values)**\n* Since we are working with both training and validation sets, we are careful to drop the same columns in both DataFrames.","cbeb6bc7":"**Score from Approach 2 (Imputation)**\n* Next, we use `SimpleImputer` to replace missing values with the mean value along each column.\n\n\n* Although it's simple, filling in the mean value generally performs quite well (but this varies by dataset). While statisticians have experimented with more complex ways to determine imputed values (such as **regression imputation**, for instance), the complex strategies typically give no additional benefit once you plug the results into sophisticated machine learning models.","1f9b3f50":"2. `early_stopping_rounds`:\n\n`early_stopping_rounds` offers a way to automatically find the ideal value for `n_estimators`. Early stopping causes the model to stop iterating when the validation score stops improving, even if we aren't at the hard stop for `n_estimators`. It's smart to set a high value for `n_estimators` and then use `early_stopping_rounds` to find the optimal time to stop iterating.\n\nSince random chance sometimes causes a single round where validation scores don't improve, you need to specify a number for how many rounds of straight deterioration to allow before stopping. Setting `early_stopping_rounds=5` is a reasonable choice. In this case, we stop after 5 straight rounds of deteriorating validation scores.\n\nWhen using `early_stopping_rounds`, you also need to set aside some data for calculating the validation scores - this is done by setting the `eval_set` parameter.\n\nWe can modify the example above to include early stopping:","c5859e36":"# Missing Values","220b5b8e":"With experience, you'll find that it's very rare to find models that are accurate 98% of the time. It happens, but it's uncommon enough that we should inspect the data more closely for target leakage.\n\nHere is a summary of the data, which you can also find under the data tab:\n\n* **`card`**: 1 if credit card application accepted, 0 if not\n* `reports`: Number of major derogatory reports\n* `age`: Age n years plus twelfths of a year\n* `income`: Yearly income (divided by 10,000)\n* `share`: Ratio of monthly credit card expenditure to yearly income\n* `expenditure`: Average monthly credit card expenditure\n* `owner`: 1 if owns home, 0 if rents\n* `selfempl`: 1 if self-employed, 0 if not\n* `dependents`: 1 + number of dependents\n* `months`: Months living at current address\n* `majorcards`: Number of major credit cards held\n* `active`: Number of active credit accounts\n\nA few variables look suspicious. For example, does `expenditure` mean expenditure on this card or on cards used before appying?\n\nAt this point, basic data comparisons can be very helpful:","22c192ba":"You will get an error if you try to plug these variables into most machine learning models in Python without preprocessing them first. In this tutorial, we'll compare three approaches that you can use to prepare your categorical data.\n\n**1. Drop Categorical Variables**\n\n* The easiest approach to dealing with categorical variables is to simply remove them from the dataset. This approach will only work well if the columns did not contain useful information.\n\n**2. Label Encoding**\n\n* Label encoding assigns each unique value to a different integer.\n\n![image](https:\/\/i.imgur.com\/tEogUAr.png)\n\n* Not all categorical variables have a clear ordering in the values, but we refer to those that do as **ordinal variables**. For tree-based models (like decision trees and random forests), you can expect label encoding to work well with **ordinal variables**.\n\n**3. One-Hot Encoding**\n\n* One-hot encoding creates new columns indicating the presence (or absence) of each possible value in the original data. To understand this, we'll work through an example.\n\n![image](https:\/\/i.imgur.com\/TW5m0aJ.png)\n\n* In contrast to label encoding, one-hot encoding does not assume an ordering of the categories. Thus, you can expect this approach to work particularly well if there is no clear ordering in the categorical data (e.g., \"Red\" is neither more nor less than \"Yellow\"). We refer to categorical variables without an intrinsic ranking as **nominal variables**.\n\n\n* One-hot encoding generally does not perform well if the categorical variable takes on a large number of values (i.e., you generally won't use it for variables taking more than **15** different values).","d2228164":"[XGBoost](https:\/\/xgboost.readthedocs.io\/en\/latest\/) is a the leading software library for working with standard tabular data (the type of data you store in Pandas DataFrames, as opposed to more exotic types of data like images and videos). With careful parameter tuning, you can train highly accurate models.","1227a353":"**Data leakage** (or **leakage**) happens when your training data contains information about the target, but similar data will not be available when the model is used for prediction. This leads to high performance on the training set (and possibly even the validation data), but the model will perform poorly in production.\n\nIn other words, leakage causes a model to look accurate until you start making decisions with the model, and then the model becomes very inaccurate.\n\nThere are two main types of leakage: **target leakage** and **train-test contamination**.","b009d025":"**Step 2: Define the Model**\n\nNext, we define a random forest model with the familiar `RandomForestRegressor` class.","5e17c1a9":"As shown above, everyone who did not receive a card had no expenditures, while only 2% of those who received a card had no expenditures. It's not surprising that our model appeared to have a high accuracy. But this also seems to be a case of target leakage, where expenditures probably means expenditures on the card they applied for.\n\nSince `share` is partially determined by `expenditure`, it should be excluded too. The variables `active` and `majorcards` are a little less clear, but from the description, they sound concerning. In most situations, it's better to be safe than sorry if you can't track down the people who created the data to find out more.\n\nWe would run a model without target leakage as follows:","e948e6e1":"If you later want to fit a model with all of your data, set `n_estimators` to whatever value you found to be optimal when run with early stopping.","b93a7089":"**Score from Approach 1 (Drop Categorical Variables)**\n* We drop the `object` columns with the `select_dtypes()` method.","5d8e3deb":"**Score from Approach 2 (Label Encoding)**\n* Scikit-learn has a LabelEncoder class that can be used to get label encodings. We loop over the categorical variables and apply the label encoder separately to each column.","3f12799d":"# Categorical Variables","a3df394a":"**Which approach is best?**\n\n* In this case, dropping the categorical columns (**Approach 1**) performed worst, since it had the highest MAE score. As for the other two approaches, since the returned MAE scores are so close in value, there doesn't appear to be any meaningful benefit to one over the other.\n\n\n* In general, one-hot encoding (**Approach 3**) will typically perform best, and dropping the categorical columns (**Approach 1**) typically performs worst, but it varies on a case-by-case basis.","fc0871eb":"**We construct the full pipeline in three steps.**\n\nStep 1: Define Preprocessing Steps\nSimilar to how a pipeline bundles together preprocessing and modeling steps, we use the `ColumnTransformer` class to bundle together different preprocessing steps. The code below:\n\n* imputes missing values in **numerical** data, and\n* imputes missing values and applies a one-hot encoding to **categorical** data.","c1464a58":"In the code cell above, for each column, we randomly assign each unique value to a different integer. This is a common approach that is simpler than providing custom labels; however, we can expect an additional boost in performance if we provide better-informed labels for all **ordinal variables**.","5820c4a5":"4. `n_jobs`:\n\nOn larger datasets where runtime is a consideration, you can use parallelism to build your models faster. It's common to set the parameter `n_jobs` equal to the number of cores on your machine. On smaller datasets, this won't help.\n\nThe resulting model won't be any better, so micro-optimizing for fitting time is typically nothing but a distraction. But, it's useful in large datasets where you would otherwise spend a long time waiting during the `fit` command.\n\nHere's the modified example:","32400b1c":"**Target leakage**\n\n**Target leakage** occurs when your predictors include data that will not be available at the time you make predictions. It is important to think about target leakage in terms of the timing or chronological order that data becomes available, not merely whether a feature helps make good predictions.\n\nTo prevent this type of data leakage, any variable updated (or created) after the target value is realized should be excluded.\n\n![image](https:\/\/i.imgur.com\/y7hfTYe.png)","180a81c4":"Most machine learning libraries (including scikit-learn) give an error if you try to build a model using data with missing values. So you'll need to choose one of the strategies below.\n\n**1. A Simple Option: Drop Rows or Columns with Missing Values**\n\n* Warning: the model loses access to a lot of (potentially useful!) information with this approach.\n\n**2. A Better Option: Imputation**\n\n* Imputation fills in the missing values with some number. For instance, we can fill in the mean value along each column.\n\n**3. An Extension To Imputation**\n\n* Imputation is the standard approach, and it usually works well. However, imputed values may be systematically above or below their actual values (which weren't collected in the dataset). Or rows with missing values may be unique in some other way. In that case, your model would make better predictions by considering which values were originally missing.\n\n![image](https:\/\/i.imgur.com\/UWOyg4a.png)\n\n* In this approach, we impute the missing values, as before. And, additionally, for each column with missing entries in the original dataset, we add a new column that shows the location of the imputed entries.\n\n* In some cases, this will meaningfully improve results. In other cases, it doesn't help at all.","0aaf81b2":"* As we can see, **Approach 3** performed slightly worse than **Approach 2**.","1b25cf56":"**Example**\n\nIn this example, you will learn one way to detect and remove target leakage.\n\nWe will use a dataset about credit card applications and skip the basic data set-up code. The end result is that information about each credit card application is stored in a DataFrame `X`. We'll use it to predict which applications were accepted in a Series `y`.","8e645901":"**Conclusion**\n\nData leakage can be multi-million dollar mistake in many data science applications. Careful separation of training and validation data can prevent train-test contamination, and pipelines can help implement this separation. Likewise, a combination of caution, common sense, and data exploration can help identify target leakage.","b4f75b5d":"3. `learning_rate`:\n\nInstead of getting predictions by simply adding up the predictions from each component model, we can multiply the predictions from each model by a small number (known as the **learning rate**) before adding them in.\n\nThis means each tree we add to the ensemble helps us less. So, we can set a higher value for `n_estimators` without overfitting. If we use early stopping, the appropriate number of trees will be determined automatically.\n\nIn general, a small learning rate and large number of estimators will yield more accurate XGBoost models, though it will also take the model longer to train since it does more iterations through the cycle. As default, XGBoost sets `learning_rate=0.1`.\n\nModifying the example above to change the learning rate yields the following code:","4a898ef6":"* We see that **Approach 2** has lower MAE than **Approach 1**, so **Approach 2** performed better on this dataset.","1ee04476":"**Score from Approach 3 (One-Hot Encoding)**\n\nWe use the OneHotEncoder class from scikit-learn to get one-hot encodings. There are a number of parameters that can be used to customize its behavior.\n\n* We set `handle_unknown='ignore'` to avoid errors when the validation data contains classes that aren't represented in the training data, and\n* setting `sparse=False` ensures that the encoded columns are returned as a numpy array (instead of a sparse matrix).\n\nTo use the encoder, we supply only the categorical columns that we want to be one-hot encoded. For instance, to encode the training data, we supply `X_train[object_cols]`. (`object_cols` in the code cell below is a list of the column names with categorical data, and so `X_train[object_cols]` contains all of the categorical data in the training set.)","bac7a64f":"**When should you use cross-validation?**\n\nCross-validation gives a more accurate measure of model quality, which is especially important if you are making a lot of modeling decisions. However, it can take longer to run, because it estimates multiple models (one for each fold).\n\nSo, given these tradeoffs, when should you use each approach?\n\n* For small datasets, where extra computational burden isn't a big deal, you should run cross-validation.\n* For larger datasets, a single validation set is sufficient. Your code will run faster, and you may have enough data that there's little need to re-use some of it for holdout.\n\nThere's no simple threshold for what constitutes a large vs. small dataset. But if your model takes a couple minutes or less to run, it's probably worth switching to cross-validation.\n\nAlternatively, you can run cross-validation and see if the scores for each experiment seem close. If each experiment yields the same results, a single validation set is probably sufficient.","b756dab1":"**Parameter Tuning**\n\nXGBoost has a few parameters that can dramatically affect accuracy and training speed. The first parameters you should understand are:\n\n1. `n_estimators`:\n\n`n_estimators` specifies how many times to go through the modeling cycle described above. It is equal to the number of models that we include in the ensemble.\n\n* Too *low* a value causes *underfitting*, which leads to inaccurate predictions on both training data and test data.\n* Too *high* a value causes *overfitting*, which causes accurate predictions on training data, but inaccurate predictions on test data (*which is what we care about*).\n\nTypical values range from 100-1000, though this depends a lot on the `learning_rate` parameter discussed below.\n\nHere is the code to set the number of models in the ensemble:","117c24aa":"**Score from Approach 3 (An Extension to Imputation)**\n* Next, we impute the missing values, while also keeping track of which values were imputed.","b5f46bc7":"# Data Leakage","51c2cbc8":"* We define a function `score_dataset()` to compare different approaches to dealing with missing values. This function reports the **mean absolute error (MAE)** from a random forest model.","8520e60a":"This accuracy is quite a bit lower, which might be disappointing. However, we can expect it to be right about 80% of the time when used on new applications, whereas the leaky model would likely do much worse than that (in spite of its higher apparent score in cross-validation).","7e19ff49":"In this example, you'll work with the XGBoost library. **XGBoost** stands for **extreme gradient boosting**, which is an implementation of gradient boosting with several additional features focused on performance and speed. (Scikit-learn has another version of gradient boosting, but XGBoost has some technical advantages.)\n\nIn the next code cell, we import the scikit-learn API for XGBoost (`xgboost.XGBRegressor`). This allows us to build and fit a model just as we would in scikit-learn. As you'll see in the output, the XGBRegressor class has many tunable parameters.","ddc7734e":"We typically want a single measure of model quality to compare alternative models. So we take the average across experiments.","a20a439f":"**Step 3: Create and Evaluate the Pipeline**\n\nFinally, we use the `Pipeline` class to define a pipeline that bundles the preprocessing and modeling steps. There are a few important things to notice:\n\n* With the pipeline, we preprocess the training data and fit the model in a single line of code. (In contrast, without a pipeline, we have to do imputation, one-hot encoding, and model training in separate steps. This becomes especially messy if we have to deal with both numerical and categorical variables!)\n* With the pipeline, we supply the unprocessed features in `X_valid` to the `predict()` command, and the pipeline automatically preprocesses the features before generating predictions. (However, without a pipeline, we have to remember to preprocess the validation data before making predictions.)","59152bd2":"# Pipelines","4be2e3b3":"# Cross-Validation","6a2d208f":"Since this is a small dataset, we will use cross-validation to ensure accurate measures of model quality."}}