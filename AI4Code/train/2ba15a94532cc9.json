{"cell_type":{"0d53eb65":"code","60185211":"code","f09ff202":"code","c34a7968":"code","eba21d56":"code","bc07e126":"code","7bbbda23":"code","5462ca69":"code","05428743":"code","d3e99385":"code","b4aaa161":"code","4cc01fc7":"code","29494f16":"code","2187f857":"code","ca82655e":"code","ef731da7":"code","a60b6824":"code","702bd49a":"code","9c0ab74b":"code","d4ffbbe7":"code","64609f7b":"code","fe20f148":"code","bd5d8c9c":"markdown","181a8c35":"markdown","7d8ff24b":"markdown"},"source":{"0d53eb65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","60185211":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Flatten, Dense, MaxPool2D, Conv2D, Dropout, BatchNormalization\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint\n\nfrom keras.utils.np_utils import to_categorical\nimport tensorflow as tf","f09ff202":"train =pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest =pd.read_csv('..\/input\/digit-recognizer\/test.csv')","c34a7968":"\nprint(train.columns)\nprint('shape of train data is ', train.shape)","eba21d56":"train.sample(5)","bc07e126":"y_train = train['label']\nX_train = train.drop('label', axis=1)","7bbbda23":"train.isnull().sum()","5462ca69":"#normalization\nX_train = X_train \/ 255.0\ntest = test \/ 255.0\n\n#reshape\nX_train = X_train.values.reshape(-1, 28,28,1)\ntest = test.values.reshape(-1, 28,28,1)\n\n#label encoding\nfrom keras.utils.np_utils import to_categorical\ny_train = to_categorical(y_train, num_classes=10)","05428743":"X_train, X_test, y_train, y_test = train_test_split(X_train, y_train)\nprint(\"X_train shape: \", X_train.shape,\"\\nX_test shape: \", X_test.shape,\n      \"\\ny_train shape: \", y_train.shape,\"\\ny_test shape: \", y_test.shape)","d3e99385":"for i in range(1,5):\n    p = plt.imshow(X_train[i])\n    plt.title(f'Label: {y_train[i]}')\n    plt.show()\n","b4aaa161":"# hyperparameters\nIMG_SIZE = 28\nbatch_size= 86\nAUTOTUNE = tf.data.experimental.AUTOTUNE\nnum_classes = 10","4cc01fc7":"from keras.models import Sequential, load_model\nfrom keras.layers import Flatten, Dense, MaxPool2D, Conv2D, Dropout, BatchNormalization\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom tensorflow.keras import layers","29494f16":"def create_model(train_ds, val_ds, epochs):\n    # training the model\n    model = tf.keras.Sequential([\n        layers.Conv2D(32, (3, 3), activation = 'relu', padding = 'same', input_shape=(28,28,1)),\n        layers.Conv2D(32, (3, 3), activation = 'relu', padding = 'same'),\n        layers.BatchNormalization(),\n        layers.MaxPooling2D(2, 2),\n        layers.Dropout(0.2),\n        layers.Conv2D(64, (3, 3), activation = 'relu', padding = 'same'),\n        layers.Conv2D(64, (3, 3), activation = 'relu', padding = 'same'),\n        layers.BatchNormalization(),\n        layers.MaxPooling2D(2, 2),\n        layers.Dropout(0.2),\n        layers.Conv2D(128, (3, 3), activation = 'relu', padding = 'same'),\n        layers.Conv2D(128, (3, 3), activation = 'relu', padding = 'same'),\n        layers.BatchNormalization(),\n        layers.MaxPooling2D(2, 2),\n        layers.Dropout(0.2),\n        layers.Flatten(),\n        layers.Dense(512, activation = 'relu'),\n        layers.BatchNormalization(),\n        layers.Dropout(0.2),\n        layers.Dense(256, activation = 'relu'),\n        layers.BatchNormalization(),\n        layers.Dropout(0.35),\n    \n        layers.Dense(10, activation = 'softmax')\n        \n    ])\n    model.compile(optimizer='adam',\n                loss=tf.keras.losses.CategoricalCrossentropy(),\n                metrics=['accuracy'])\n    \n    print(model.summary())\n    \n    return model","2187f857":"cnn_model = create_model(X_train, y_train, 100)","ca82655e":"\noptimizer = RMSprop(lr = 0.001, rho = 0.9, epsilon=1e-08, decay =0.0)\ncnn_model.compile(optimizer = optimizer, loss = 'categorical_crossentropy', metrics = ['accuracy'])","ef731da7":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_loss', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","a60b6824":"#Data Augmentation\ndatagen = ImageDataGenerator(\n    featurewise_center=False, samplewise_center=False,\n    featurewise_std_normalization=False, samplewise_std_normalization=False,\n    zca_whitening=False, zca_epsilon=1e-06, rotation_range=0, width_shift_range=0.0,\n    height_shift_range=0.0, brightness_range=None, shear_range=0.0, zoom_range=0.0,\n    channel_shift_range=0.0, fill_mode='nearest', cval=0.0,\n    horizontal_flip=False, vertical_flip=False, rescale=None,\n    preprocessing_function=None, data_format=None, validation_split=0.0, dtype=None\n)\n\n\ndatagen.fit(X_train)","702bd49a":"# Fit the model\nhistory = cnn_model.fit(datagen.flow(X_train,y_train, batch_size=batch_size),\n                              epochs = 28, validation_data = (X_test,y_test),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","9c0ab74b":"prediction = cnn_model.predict(X_test).argmax(axis=1)\n","d4ffbbe7":"score = cnn_model.evaluate(X_test, y_test, verbose = 0)\nprint(\"Test Accuracy: \",score[1]) ","64609f7b":"result = cnn_model.predict(test)\n\nresult = np.argmax(result, axis=1)\n\nresult = pd.Series(result, name='Label')\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),result],axis = 1)\n\nsubmission.to_csv(\"submission.csv\",index=False)","fe20f148":"x =pd.read_csv(\"submission.csv\")\nx.head()","bd5d8c9c":"**MODEL**","181a8c35":"Split the data","7d8ff24b":"EDA and preprocessing"}}