{"cell_type":{"1aaab041":"code","29e359ea":"code","62f562a4":"code","d2cff6c0":"code","6d43421c":"code","a3ccb77e":"code","ff0bb3ff":"code","9566bd4d":"code","8f6ce1c1":"code","30171959":"code","d6b6d583":"code","032761cc":"code","470d3132":"code","c70253dd":"code","f3498775":"code","4e8b8c60":"code","fd2076e7":"code","0b3e4af2":"code","6f2bc990":"code","ebb608ac":"code","5b003fb3":"code","2e552398":"code","3cad05bc":"code","c996f0f0":"code","e12f2352":"markdown","96a5d95b":"markdown","6c858d63":"markdown","4cb906fa":"markdown"},"source":{"1aaab041":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","29e359ea":"import matplotlib.pyplot as plt\nplt.style.use('seaborn')\nfrom scipy.stats import norm, skew\nimport seaborn as sns","62f562a4":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\ntrain.head()\n#Tahmin i\u015flemi i\u00e7in gerekli olmad\u0131\u011f\u0131ndan, 'Id' s\u00fctununu kald\u0131r\u0131l\u0131r.\ntest_id = test['Id']\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\",axis = 1, inplace = True)","d2cff6c0":"print(\"Train set size:\", train.shape)\nprint(\"Test set size:\", test.shape)\ntrain['SalePrice'].describe()","6d43421c":"plt.figure(figsize=(10, 10))\nsns.distplot(train['SalePrice'], color='g', bins=100, hist_kws={'alpha': 0.5});","a3ccb77e":"corrmat = train.corr()\nf, ax = plt.subplots(figsize=(20, 9))\nsns.heatmap(corrmat, vmax=.8, annot=True);","ff0bb3ff":"most_corr_features = corrmat.index[abs(corrmat[\"SalePrice\"])>0.5]\nplt.figure(figsize=(10,10))\ng = sns.heatmap(train[most_corr_features].corr(),annot=True,cmap=\"Blues\")\nprint(most_corr_features)","9566bd4d":"# Yukar\u0131daki grafi\u011fi yorumlad\u0131\u011f\u0131m\u0131zda, SalePrice(Evin Sat\u0131\u015f Fiyat\u0131) ile en ili\u015fkili \u00f6zelli\u011fin OverallQual oldu\u011fu g\u00f6r\u00fclmektedir.\n#Belirlenen e\u015fik korelasyon de\u011ferini a\u015fan \u00f6zellikler, \ncorrelated_cols = ['OverallQual','YearBuilt','YearRemodAdd','TotalBsmtSF','1stFlrSF','GrLivArea','FullBath','TotRmsAbvGrd','GarageCars']\n","8f6ce1c1":"#Yukar\u0131daki \u00c7\u0131kt\u0131lara g\u00f6re outlier(ayr\u0131k) veriler tespit edilir ve bu veriler kald\u0131r\u0131l\u0131r.\n# GrlivArea >5000 \n# 1stFlrSF > 4000\n# TotalBsmtSF >6000\n#Belirlenen bu \u00f6zelliklere g\u00f6re, bu alanlarda yer alan ayr\u0131k veriler tespit edilir.\ndata = pd.concat([train['SalePrice'], train[correlated_cols]], axis=1)\nfor lst in correlated_cols:\n    sns.pairplot(data, y_vars=['SalePrice'], x_vars=lst)\noutliers = {\"TotalBsmtSF\": 6000,\"1stFlrSF\": 4000, \"GrLivArea\": 5000}\n#Olusan grafi\u011fe g\u00f6re outlier(ayr\u0131k) veriler temizlenir.\ntrain = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)\ntrain = train.drop(train[(train['1stFlrSF']>4000) & (train['SalePrice']<200000)].index)\ntrain = train.drop(train[(train['TotalBsmtSF']>6000) & (train['SalePrice']<200000)].index)\n\n\ntest = test.drop(test[(test['GrLivArea']>4000)].index)\ntest = test.drop(test[(test['1stFlrSF']>4000)].index)\ntest = test.drop(test[(test['TotalBsmtSF']>6000)].index)\n\n\n\n#data = pd.concat([train['SalePrice'], train[correlated_cols]], axis=1)\n#for lst in correlated_cols:\n    #sns.pairplot(data, y_vars=['SalePrice'], x_vars=lst)","30171959":"categorical_features = train.select_dtypes(include=['object']).columns\ncategorical_features\nnumerical_features = train.select_dtypes(exclude = [\"object\"]).columns\nnumerical_features = numerical_features.drop(\"SalePrice\")\ntrain_num = train[numerical_features]\ntrain_cat = train[categorical_features]","d6b6d583":"total = train_num.isnull().sum().sort_values(ascending=False)# train verisetinde yer alan eksik veri say\u0131s\u0131n\u0131 g\u00f6sterir.\nmissing_data = pd.concat([total], axis=1, keys=['Total'])\nmissing_data.head() # hangi \u00f6zellikte ka\u00e7 veri eksik oldu\u011funu g\u00f6sterir","032761cc":"train_num = train_num.fillna(train_num.median())\ntotal = train_num.isnull().sum().sort_values(ascending=False)# train verisetinde yer alan eksik veri say\u0131s\u0131n\u0131 g\u00f6sterir.\nmissing_data = pd.concat([total], axis=1, keys=['Total'])\nmissing_data.head() # hangi \u00f6zellikte ka\u00e7 veri eksik oldu\u011funu g\u00f6sterir","470d3132":"train.SalePrice = np.log1p(train.SalePrice )\ny = train.SalePrice","c70253dd":"from scipy.stats import skew \nskewness = train_num.apply(lambda x: skew(x))\nskewness.sort_values(ascending=False)","f3498775":"train_cat = pd.get_dummies(train_cat)\ntrain_cat.shape\ntrain_cat.head()\nstr(train_cat.isnull().values.sum())","4e8b8c60":"train = pd.concat([train_cat,train_num],axis=1)\nprint(train.shape)","fd2076e7":"from sklearn.model_selection import train_test_split, cross_val_score\nX_train,X_test,y_train,y_test = train_test_split(train,y,test_size = 0.3,random_state= 0)\nprint(X_train.shape,X_test.shape,y_train.shape,y_test.shape)","0b3e4af2":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\ntrain= scaler.fit_transform(train)\nn_col=train.shape[1]","6f2bc990":"from sklearn.decomposition import PCA\npca=PCA(n_components=n_col)\ntrain_components=pca.fit(train)\ntest_components=pca.fit(X_test)\npca.components_","ebb608ac":"pca.get_covariance()","5b003fb3":"from sklearn import preprocessing\nfrom sklearn import utils\nfrom sklearn.ensemble import RandomForestRegressor\n\nlab_enc = preprocessing.LabelEncoder() # bunu a\u00e7\u0131kla\nY = lab_enc.fit_transform(y)\nprint(Y.shape)\nrf = RandomForestRegressor(max_depth=10, random_state=0, n_estimators=100)\nrf.fit(train,Y)\n#print(rf.feature_importances_)","2e552398":"from sklearn.svm import SVR\nfrom sklearn.metrics import r2_score\nregressor=SVR(kernel='rbf',gamma='auto')\n\nregressor.fit(X_train,y_train)\ntest_pre = regressor.predict(X_test)\ntrain_pre = regressor.predict(X_train)\n\nplt.scatter(train_pre, train_pre - y_train, c = \"blue\",  label = \"Training data\")\nplt.scatter(test_pre,test_pre - y_test, c = \"black\",  label = \"Validation data\")\nplt.title(\"SVR regression\")\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Residuals\")\nplt.legend(loc = \"upper left\")\nplt.hlines(y = 0, xmin = 10.5, xmax = 13.5, color = \"red\")\nplt.show()","3cad05bc":"from sklearn.metrics import make_scorer\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression, RidgeCV, LassoCV, ElasticNetCV\nlr = LinearRegression()\nlr.fit(X_train,y_train)\ntest_pre = lr.predict(X_test)\ntrain_pre = lr.predict(X_train)\n\nprint(r2_score(y_test,test_pre))\n\nplt.scatter(train_pre, train_pre - y_train, c = \"blue\",  label = \"Training data\")\nplt.scatter(test_pre,test_pre - y_test, c = \"black\",  label = \"Validation data\")\nplt.title(\"Linear regression\")\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Residuals\")\nplt.legend(loc = \"upper left\")\nplt.hlines(y = 0, xmin = 10.5, xmax = 13.5, color = \"red\")\nplt.show()","c996f0f0":"predictx=lr.predict(test)\nprint(predictx.shape)\nmy_submission = pd.DataFrame({'Id': test_id, 'SalePrice': predictx})\nmy_submission.to_csv('submission.csv', index=False)","e12f2352":"Ev fiyatlar\u0131 ile en ili\u015fkili \u00f6zelliklere bak\u0131l\u0131r bu y\u00fczden e\u015fik de\u011feri 0.5 olarak belirlenmi\u015f ve yukar\u0131daki korelasyon matrisinden de hareketle korelasyon de\u011feri 0.5'in \u00fczerinde olan \u00f6zellikler dikkate al\u0131n\u0131r.","96a5d95b":"Support Vector Machine(SVM) S\u0131n\u0131flay\u0131c\u0131lar\u0131n bir \u00e7e\u015fit regresyon uygulamas\u0131 olan SVR kullan\u0131larak model e\u011fitilmi\u015ftir. Problem lineer bir problem olmad\u0131\u011f\u0131 i\u00e7in rbf kernel'\u0131 tercih edilmi\u015ftir.","6c858d63":"PCA(Temel Bile\u015fen Analizi) 'n\u0131n amac\u0131, verilerin \u00e7e\u015fitlili\u011fini korurken, birbirleriyle korelasyonlu de\u011fi\u015fkenler i\u00e7eren verilerin boyutsall\u0131\u011f\u0131n\u0131 en aza indirmektir. \u00c7ok fazla yay\u0131lmayan daha d\u00fc\u015f\u00fck varyansa sahip olan de\u011fi\u015fkenler daha d\u00fc\u015f\u00fck bir boyuta yans\u0131t\u0131lacakt\u0131r.","4cb906fa":"Train verisetinin korelasyon matrisi olu\u015fturulur. Verilerin birbiri ile il\u015fkisini g\u00f6rebilmek i\u00e7in."}}