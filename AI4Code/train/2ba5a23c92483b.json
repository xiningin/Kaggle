{"cell_type":{"30fe5c7e":"code","9623d812":"code","213c12a8":"code","4db839fa":"code","ef0267f9":"code","e1bec2ff":"code","b2b1d963":"code","17615d40":"code","9ad37afa":"code","b4e848b8":"code","ff20762c":"code","f16582b3":"code","074eacdc":"code","7853f696":"code","1928de47":"code","0850e70a":"code","6c84432f":"code","925fe3a2":"code","bc5e4bc6":"code","60708d65":"code","b93ee5e8":"code","279b4299":"code","823c0968":"code","f3535be0":"code","58477cfd":"code","595b7303":"code","bde5bbd8":"code","c0cbd072":"code","8d28fa65":"code","ea6c5e29":"code","ee5dfb1d":"code","7bef431c":"code","278ce852":"code","8864236a":"code","e00b4423":"code","daa1908b":"code","5260dd59":"code","007cecb5":"code","9bd825e9":"code","7378d9b8":"code","cc99ca31":"code","fb065204":"code","9a5f0d77":"code","36e47fa6":"code","3fa4a4e7":"code","03e14d88":"code","9a6abb47":"code","d5bb0ffe":"code","490ddf5a":"code","7da43d27":"code","533896ec":"code","30114c56":"code","c5b5b071":"code","6dadb958":"code","19f78256":"code","a406862b":"code","360852b3":"code","b26fef0c":"code","a8702e34":"code","6030680b":"code","7a96a895":"code","212b2399":"code","3867167a":"code","0730b6a0":"code","f1dfd816":"code","0d40e81f":"code","e269c3d5":"code","79d073c9":"markdown","e31acaea":"markdown","0c4973b3":"markdown","e744cbdb":"markdown","3e456a09":"markdown"},"source":{"30fe5c7e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9623d812":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler","213c12a8":"def label_encoder(c):\n    lc = LabelEncoder()\n    return lc.fit_transform(c)","4db839fa":"train = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')","ef0267f9":"train.head()","e1bec2ff":"train.info()","b2b1d963":"test.info()","17615d40":"print(train.shape)\nprint(test.shape)","9ad37afa":"df_Big=train.append(test,sort=False)\ndf_Big.head()","b4e848b8":"df_Big.shape","ff20762c":"df_Big.isnull().sum()","f16582b3":"df_Big=df_Big.drop(['Cabin'],axis=1)\ndf_Big=df_Big.drop(['PassengerId'],axis=1)","074eacdc":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.countplot(x='Sex',hue='Survived',data=train)","7853f696":"plt.hist(x=df_Big.Age, bins=10)\nplt.grid(axis='y', alpha=0.75)\nplt.xlabel('Age')\nplt.ylabel('Frequency')","1928de47":"sns.countplot(x='Parch',hue='Survived',data=train)\n\n#Passengers with 0 ,4,5,6 Parch are less likely to survive than 1,2,3","0850e70a":"df_Big.head()","6c84432f":"df_Big['Age'].fillna((df_Big['Age'].mean()),inplace=True)\ndf_Big['Fare'].fillna((df_Big['Fare'].mean()),inplace=True)","925fe3a2":"df_Big.isnull().sum()","bc5e4bc6":"sns.countplot(x='Embarked',hue='Survived',data=df_Big)","60708d65":"df_Big['Embarked'].fillna(\"S\",inplace=True)","b93ee5e8":"df_Big['Ticket'] = df_Big['Ticket'].str.replace('[^a-zA-Z]', '').str[:1]\ndf_Big['Ticket'] = df_Big['Ticket'].str.strip()","279b4299":"df_Big['Ticket'] = df_Big['Ticket'].fillna('ZZ')","823c0968":"df_Big.loc[df_Big['Ticket']=='', 'Ticket']='ZZ'","f3535be0":"df_Big.loc[df_Big['Ticket']=='L', 'Ticket']='ZZ'\n\ndf_Big.groupby(by=['Ticket'])['Survived'].mean()","58477cfd":"df_Big['Ticket'].value_counts()","595b7303":"df_Big.head()","bde5bbd8":"df_Big.isnull().sum()","c0cbd072":"from sklearn.preprocessing import LabelEncoder\nencoder=LabelEncoder()","8d28fa65":"df_Big[\"Sex\"]=encoder.fit_transform(df_Big['Sex'])\ndf_Big[\"Embarked\"]=encoder.fit_transform(df_Big['Embarked'])\ndf_Big[\"Ticket\"]=encoder.fit_transform(df_Big['Ticket'])","ea6c5e29":"df_Big.head()","ee5dfb1d":"df_Big['FirstName'] = df_Big['Name'].apply(lambda x:x.split(', ')[0])\ndf_Big['SecondName'] = df_Big['Name'].str.split(', ', 1, expand=True)[1]","7bef431c":"le = LabelEncoder()\nle1 = LabelEncoder()\ndf_Big['FirstName'] = le.fit_transform(df_Big['FirstName'])\ndf_Big['SecondName'] = le1.fit_transform(df_Big['SecondName'])","278ce852":"df_Big.head()","8864236a":"df_Big=df_Big.drop(['Name'],axis=1)","e00b4423":"# introducing a new feature : the size of families (including the passenger)\ndf_Big['FamilySize'] = df_Big['Parch'] + df_Big['SibSp'] + 1","daa1908b":"# introducing other features based on the family size\ndf_Big['Singleton'] = df_Big['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ndf_Big['SmallFamily'] = df_Big['FamilySize'].map(lambda s: 1 if 2 <= s <= 4 else 0)\ndf_Big['LargeFamily'] = df_Big['FamilySize'].map(lambda s: 1 if 5 <= s else 0)","5260dd59":"df_Big.head()","007cecb5":"df_Big=df_Big.drop(['FamilySize'],axis=1)","9bd825e9":"df_Big.isnull().sum()","7378d9b8":"plt.figure(figsize=(15,10))\nsns.heatmap(data=df_Big.corr())","cc99ca31":"df_Big=df_Big.drop(['Singleton'],axis=1)","fb065204":"plt.figure(figsize=(15,10))\nsns.heatmap(data=df_Big.corr())","9a5f0d77":"print(train.shape)\nprint(test.shape)","36e47fa6":"df_train=df_Big[0:100000]\ndf_test=df_Big[100000:]","3fa4a4e7":"X=df_train.drop(['Survived'],axis=1)\ny=df_train.Survived","03e14d88":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X, y, test_size=0.18,random_state=33)","9a6abb47":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_regression\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_selection import mutual_info_regression","d5bb0ffe":"# feature selection\nf_selector = SelectKBest(score_func=f_regression, k='all')\n# learn relationship from training data\nf_selector.fit(X_train, y_train)","490ddf5a":"# transform train input data\nX_train_fs = f_selector.transform(X_train)\n# transform test input data\nX_test_fs = f_selector.transform(X_test)","7da43d27":"# Plot the scores for the features\nplt.bar([i for i in range(len(f_selector.scores_))], f_selector.scores_)\nplt.xlabel(\"feature index\")\nplt.ylabel(\"F-value (transformed from the correlation values)\")\nplt.show()","533896ec":"f_selector.scores_","30114c56":"score = f_selector.scores_\nBest_Features = pd.DataFrame({'Feature_Score': score})\nBest_Features.head(5)","c5b5b071":"Names = df_train.columns\nNames","6dadb958":"Column_Name = pd.DataFrame({'Column_Name': Names})\nMerged = pd.concat([Column_Name, Best_Features], axis=1)\nMerged.sort_values(['Feature_Score'], ascending=False).head(20)","19f78256":"from sklearn.metrics import classification_report, roc_auc_score, make_scorer, accuracy_score, roc_curve\nimport optuna\nfrom math import sqrt\nimport lightgbm as lgb","a406862b":"lgb_train = lgb.Dataset(X_train, y_train)\nlgb_valid = lgb.Dataset(X_test, y_test, reference=lgb_train)","360852b3":"def objective(trial):    \n    params = {\n        'reg_alpha' : trial.suggest_loguniform('reg_alpha' , 1e-5 , 12),\n        'reg_lambda' : trial.suggest_loguniform('reg_lambda' , 1e-5 , 12),\n        'num_leaves' : trial.suggest_int('num_leaves' , 11 , 900),\n        'learning_rate' : trial.suggest_uniform('learning_rate' , 0.0000001 , 0.2),\n        'max_depth' : trial.suggest_int('max_depth' , 5 , 400),\n        'n_estimators' : trial.suggest_int('n_estimators' , 1 , 9999),\n        'min_child_samples' : trial.suggest_int('min_child_samples' , 1 , 110),\n        'min_child_weight' : trial.suggest_loguniform('min_child_weight' , 1e-5 , 1),\n        'subsample' : trial.suggest_uniform('subsample' , 1e-5 , 1.0),\n        'colsample_bytree' : trial.suggest_loguniform('colsample_bytree' , 1e-5 , 1),\n        'random_state' : trial.suggest_categorical('random_state' , [2,22,222,2222]),\n        'metric' : 'accuracy',\n        'device_type' : 'cpu',\n    }\n    \n    model = lgb.LGBMClassifier(**params)\n    model.fit(X_train , y_train , eval_set = [(X_test , y_test)] ,eval_metric='logloss', early_stopping_rounds = 1000 , \\\n             verbose = False)\n    preds = model.predict(X_test)\n    acc = accuracy_score(y_test , preds)\n    return acc","b26fef0c":"study = optuna.create_study(direction = 'maximize')\nstudy.optimize(objective, n_trials = 10)","a8702e34":"# print('numbers of the finished trials:' , len(study.trials))\n# print('the best params:' , study.best_trial.params)\n# print('the best value:' , study.best_value)","6030680b":"import lightgbm as lgb\nclf = lgb.LGBMClassifier(num_leaves=39, learning_rate=0.05, max_depth=28, n_estimators= 20000,\nmin_child_weight=0.0023505426039016975, min_child_samples=71, reg_alpha=13.0124692806962, reg_lambda=17.429087848443793)\nclf.fit(X_train, y_train)","7a96a895":"# df_test = df_test.drop(\"Survived\")","212b2399":"pred = clf.predict(X_test)\n\nprint(accuracy_score(y_test, pred))","3867167a":"df_test.head()","0730b6a0":"df_test=df_test.drop(['Survived'],axis=1)","f1dfd816":"prediction = clf.predict(df_test)\nprediction","0d40e81f":"test_new = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\ntest_new.head()","e269c3d5":"# output = pd.DataFrame({'PassengerId': test_new['PassengerId'], 'Survived': prediction})\n# output.to_csv('TabularSeriesStarterSubmission_Apr1.csv', index=False)","79d073c9":"### A Quick Information about the features:\n\n#### pclass - Passenger Ticket class : Class 1, 2 and 3.\n\n#### Name - Name of the passenger\n\n#### sex - Sex of the Passenger\n\n#### Age - Age in years of the Passenger\n\n#### sibsp - Number of siblings \/ spouses aboard the Titanic\n\n#### Parch - Number of parents \/ children aboard the Titanic\n\n#### Ticket - Ticket number\n\n#### Fare - Passenger fare\n\n#### Cabin - Cabin number\n\n#### Embarked - Port of Embarkation shows the port from which the passenger boarded the titanic\n#### where the ports are    C - Cherbourg, Q - Queenstown, & S - Southampton","e31acaea":"### Feature Engineering!","0c4973b3":"#### Here we can see in future tuning these parameters, whether to keep these least important features or not!","e744cbdb":"### Data Preprocessing & EDA!","3e456a09":"Well, after executing optuna, I have used the best parameters in Model initialized below!"}}