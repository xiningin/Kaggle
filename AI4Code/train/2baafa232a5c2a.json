{"cell_type":{"f2a638ef":"code","f6ca7823":"code","67f6667d":"code","6debff01":"code","e7c9e85a":"code","89cea8b0":"code","36c1afd8":"code","77670c72":"code","d27c226f":"code","a379d1dd":"code","32802553":"code","17c8979f":"code","de39e35f":"code","dd4ebcba":"code","c4cbb863":"code","4d91a75d":"code","603131d1":"code","0cb66c04":"code","454adc26":"code","314a3d48":"code","ed438385":"code","b8d71092":"code","79832f87":"code","4b6f56d4":"code","b3393785":"code","35a7d65a":"code","2b8b46a2":"code","d4bc982b":"code","62cb5688":"code","3099ce95":"code","d6332933":"code","b73283b0":"code","22aef34f":"code","6e1e301a":"code","385ffe12":"code","b1320f7a":"code","172de425":"code","378dcf63":"code","6a8efbb4":"code","64e7ea83":"code","bb1e4b17":"code","19534054":"markdown","a87df223":"markdown","96246ef4":"markdown"},"source":{"f2a638ef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f6ca7823":"df = pd.read_excel('\/kaggle\/input\/covid19\/dataset.xlsx')","67f6667d":"df","6debff01":"df.shape","e7c9e85a":"df['SARS-Cov-2 exam result'].value_counts().plot(kind='bar')","89cea8b0":"df['Patient addmited to regular ward (1=yes, 0=no)'].value_counts().plot(kind='bar')","36c1afd8":"df['Patient addmited to semi-intensive unit (1=yes, 0=no)'].value_counts().plot(kind='bar')","77670c72":"df['Patient addmited to intensive care unit (1=yes, 0=no)'].value_counts().plot(kind='bar')","d27c226f":"df['SARS-Cov-2 exam result'] = df['SARS-Cov-2 exam result'].map(lambda r: 1 if r == 'positive' else 0 )","a379d1dd":"df = df.rename(columns={'SARS-Cov-2 exam result': 'has_covid', 'Patient addmited to regular ward (1=yes, 0=no)': 'hospital',\n                   'Patient addmited to semi-intensive unit (1=yes, 0=no)': 'semi_icu',\n                   'Patient addmited to intensive care unit (1=yes, 0=no)': 'icu'})","32802553":"(df['has_covid'].astype(int) & df['hospital'].astype(int)).sum() \/ (df['has_covid'].sum())","17c8979f":"(df['has_covid'].astype(int) & df['semi_icu'].astype(int)).sum() \/ df['has_covid'].sum()","de39e35f":"(df['has_covid'].astype(int) & df['icu'].astype(int)).sum() \/ df['has_covid'].sum()","dd4ebcba":"labels_features_corr = labels_features_corr.sort_values('SARS-Cov-2 exam result', ascending=False)","c4cbb863":"df['Patient age quantile'].value_counts()","4d91a75d":"corr = df.corr()","603131d1":"corr[['has_covid', 'hospital', 'semi_icu', 'icu']].sort_values('has_covid', ascending=False)","0cb66c04":"labels = df['has_covid']","454adc26":"features = df.iloc[:, 6:]","314a3d48":"features.head()","ed438385":"all_nas = []\nfor f in features.columns:\n    if features[f].isna().all():\n        all_nas += [f]","b8d71092":"features = features.drop(columns=all_nas)","79832f87":"features.shape","4b6f56d4":"all_na_rows = features.isna().sum(axis=1) == features.shape[1]","b3393785":"features = features[~all_na_rows]","35a7d65a":"labels = labels[~all_na_rows]","2b8b46a2":"labels.value_counts()","d4bc982b":"features['Respiratory Syncytial Virus'].isna().sum()","62cb5688":"pd.get_dummies(features['Respiratory Syncytial Virus'].fillna('not_examined'))","3099ce95":"features.iloc[:, 74].value_counts()","d6332933":"ignore = {'Urine - Leukocytes'}","b73283b0":"train_features = []\ncolumns = set(features.columns)\ncolumns = columns - ignore\nfor i, f in enumerate(columns):\n    if features[f].dropna().nunique() == 1:\n        pass\n    elif features[f].dropna().nunique() <= 15:\n        train_features += [pd.get_dummies(features[f].fillna('not_examined'))]\n    else:\n        train_features += [features[f].fillna(features[f].mean())]\ntrain_features = pd.concat(train_features, axis=1)","22aef34f":"train_features","6e1e301a":"from sklearn.model_selection import cross_validate\nfrom sklearn import svm","385ffe12":"model = svm.LinearSVC()","b1320f7a":"X, y = train_features.values, labels.values","172de425":"X.shape, y.shape","378dcf63":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=0)","6a8efbb4":"from sklearn.model_selection import cross_val_score\nclf = svm.LinearSVC(C=1)\nscores = cross_validate(clf, X, y, cv=5, scoring=['balanced_accuracy', 'precision', 'recall', 'f1'])","64e7ea83":"scores","bb1e4b17":"{f'avg_{k}': np.array(scores[k]).mean(),  for k in scores}","19534054":"# Task: predicting if pacient has covid-19","a87df223":"# Distribui\u00e7\u00e3o dos labels","96246ef4":"### Dropping all NaN columns"}}