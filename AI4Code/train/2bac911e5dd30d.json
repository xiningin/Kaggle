{"cell_type":{"0250c322":"code","8d3b2031":"code","8ad6ac52":"code","cf038012":"code","be787f28":"code","ca661e51":"code","d57281d9":"code","d5e79553":"code","dbc87d6d":"code","fe816d14":"code","100a9c4c":"code","e07686c7":"code","ae022385":"code","213830a5":"code","e098df71":"code","1cb56e25":"code","90148226":"code","5e411069":"code","7bbe8ea5":"code","fe75fedb":"code","6a89cd11":"code","fbb91a0e":"code","df91a2dc":"code","27e4aeae":"code","1e97a44b":"code","530f5d5d":"code","cc630dc7":"code","9af7cbeb":"code","041baed6":"code","35936405":"markdown","29c1872c":"markdown"},"source":{"0250c322":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","8d3b2031":"housing_df = pd.read_csv('..\/input\/kaggle\/train.csv')\nhousing_df.info()\n#\u5171\u670910\u4e2a\u5c5e\u6027\uff0c\u603b\u6570\u636e\u91cf\u4e3a16512 \n#\u9664total_bedrooms\u6709\u7f3a\u5931\u5916\u5176\u4ed6\u90fd\u662f\u5b8c\u6574\u7684 \n#ocean_proximity\u662fobject\u578b\uff0c\u5176\u4ed6\u90fd\u662ffloat64","8ad6ac52":"#ocean_proximity\u5404\u4e2a\u53d6\u503c\u7684\u5206\u5e03\nhousing_df['ocean_proximity'].value_counts()","cf038012":"#\u5404\u5c5e\u6027\u9664\u53bbid\u7684\u63cf\u8ff0\u6027\u7edf\u8ba1\nhousing_df.drop(['id'],axis=1,inplace=True)\nhousing_df.info()\nhousing_df.describe()","be787f28":"#\u5404\u5c5e\u6027\u7684\u6570\u503c\u5206\u5e03\nhousing_df.hist(bins=50, figsize=(20,15))","ca661e51":"#\u5404\u6837\u672c\u70b9\u7684\u4f4d\u7f6e\u5206\u5e03\uff0c\u989c\u8272\u8d8a\u6df1\u6837\u672c\u70b9\u6570\u91cf\u8d8a\u591a\n#\u53ef\u4ee5\u770b\u51fa\u5927\u81f4\u662f\u52a0\u5dde\u7684\u5f62\u72b6,\u4f46\u53d6\u503c\u6709\u660e\u663e\u7684\u51e0\u4e2a\u805a\u96c6\nhousing_df.plot(kind=\"scatter\",x=\"longitude\",y=\"latitude\",alpha=0.1)\nplt.show()","d57281d9":"#\u623f\u4ef7\u5728\u5730\u7406\u5206\u5e03\u4e0a\u7684\u53ef\u89c6\u5316\u6570\u636e \u989c\u8272\u8d8b\u8fd1\u84dd\u8272\u4ee3\u8868\u4ef7\u683c\u4f4e \u8d8b\u8fd1\u7ea2\u8272\u4ee3\u8868\u4ef7\u683c\u9ad8\n#\u5706\u5708\u534a\u5f84\u4ee3\u8868\u8be5\u5730\u533apopulation\u7684\u5927\u5c0f\n#\u53ef\u4ee5\u731c\u6d4b\u623f\u4ef7\u4e0e\u79bb\u6d77\u7684\u8ddd\u79bb\u6709\u5bc6\u5207\u5173\u7cfb\uff08\u5bf9\u7167\u52a0\u5dde\u5730\u56fe\uff09\nhousing_df.plot(kind=\"scatter\",x=\"longitude\",y=\"latitude\",alpha=0.4,\n             s=housing_df[\"population\"]\/100,label=\"population\",\n             c=\"median_house_value\",cmap=plt.get_cmap(\"jet\"),colorbar=True,sharex=False)\nplt.legend()\nplt.show()","d5e79553":"#\u4f7f\u7528pearson\u76f8\u5173\u67e5\u770b\u76f8\u5173\u6027\u77e9\u9635\ncorr = housing_df.corr(method='pearson')\ncorr","dbc87d6d":"#\u70ed\u529b\u56fe \u53ef\u4ee5\u66f4\u76f4\u89c2\u5730\u770b\u51fa\u5404\u5c5e\u6027\u4e4b\u95f4\u7684\u76f8\u5173\u6027\nimport seaborn as sns\nk = 10 \ncorrmat = housing_df.corr()\ncols = corrmat.nlargest(k, 'median_house_value')['median_house_value'].index\ncm = np.corrcoef(housing_df[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values,cmap='YlGnBu')\nplt.show()","fe816d14":"# \u53ea\u67e5\u770b\u5404\u5c5e\u6027\u4e0e\u623f\u4ef7\u7684\u76f8\u5173\u7cfb\u6570\n#\u53ef\u4ee5\u770b\u51fa\u623f\u4ef7\u4e0eincome\u5b58\u5728\u6bd4\u8f83\u5f3a\u7684\u6b63\u76f8\u5173\ncorr['median_house_value'].sort_values(ascending=False)","100a9c4c":"#\u7ec4\u5408\u5b57\u6bb5\ntmp_df = housing_df.copy()\ntmp_df['population_per_household'] = tmp_df['population'] \/ tmp_df['households']\ntmp_df['rooms_per_household'] = tmp_df['total_rooms'] \/ tmp_df['households']\ntmp_df['bedrooms_per_room'] = tmp_df['total_bedrooms'] \/ tmp_df['total_rooms']\ntmp_df.head(10)","e07686c7":"#\u67e5\u770b\u7ec4\u5408\u5b57\u6bb5\u540e\u7684\u76f8\u5173\u7cfb\u6570 \n#bedrooms_per_room\u6709\u76f8\u5bf9\u5927\u7684\u8d1f\u76f8\u5173 \n#population_per_household\u6709\u76f8\u5bf9\u975e\u5e38\u5c0f\u7684\u8d1f\u76f8\u5173\ncorr = tmp_df.corr(method='pearson')\ncorr['median_house_value'].sort_values(ascending=False)","ae022385":"#\u4f7f\u7528imputer\u5904\u7406\u7f3a\u5931\u503c\u793a\u4f8b\nfrom sklearn.impute import SimpleImputer\ntmp_df = housing_df.copy()\nimputer = SimpleImputer(strategy='median')\ntmp_df['total_bedrooms'] = imputer.fit_transform(tmp_df[['total_bedrooms']])\ntmp_df.info()","213830a5":"#\u5904\u7406\u6587\u672c\u4fe1\u606f\u8fdb\u884c\u7f16\u7801\nfrom sklearn.preprocessing import LabelBinarizer\nencode = LabelBinarizer()\nencode.fit_transform(housing_df['ocean_proximity'])","e098df71":"#\u6570\u636e\u8f6c\u5316\u6d41\u6c34\u7ebf\n#\u8f6c\u5316\u4e3anumpy\u6570\u7ec4\u5e76\u8f93\u51fa\nfrom sklearn.base import BaseEstimator, TransformerMixin\nclass DataFrameSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, attribute_names):\n        self.attribute_names=attribute_names\n    def fit(self, x, y=None):\n        return self\n    def transform(self, x):\n        return x[self.attribute_names].values","1cb56e25":"def get_columns_index(df, columns):\n    return [list(df.columns).index(column) for column in list(columns)]","90148226":"#\u8865\u5145\u7ec4\u5408\u5b57\u6bb5\u51fd\u6570\ndef add_extra_features(x, rooms_ix, bedrooms_ix, population_ix, household_ix):    \n    population_per_household = x[:, population_ix] \/ x[:, household_ix]\n    rooms_per_household = x[:, rooms_ix] \/ x[:, household_ix]\n    bedrooms_per_room = x[:, bedrooms_ix] \/ x[:, rooms_ix]\n    return np.c_[x, population_per_household, rooms_per_household, bedrooms_per_room]","5e411069":"# \u8f6c\u5316\u6d41\u6c34\u7ebf  \u4f7f\u7528pipeline\u5f62\u6210\u673a\u5668\u5b66\u4e60\u5de5\u4f5c\u6d41 \nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import FeatureUnion\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\n\n# \u6570\u503c\u7c7b\u578b\u6d41\u6c34\u7ebf\nnum_attribute_names = ['longitude', 'latitude', 'housing_median_age', 'total_rooms', 'total_bedrooms', 'population',\n              'households', 'median_income']\nrooms_ix, bedrooms_ix, population_ix, household_ix = get_columns_index(housing_df, ['total_rooms', 'total_bedrooms', 'population', 'households'])\nnum_pipline = Pipeline([\n    ('selector', DataFrameSelector(num_attribute_names)),#numpy\u6570\u7ec4\n    ('imputer', SimpleImputer(strategy='median')),# \u7f3a\u5931\u503c\u5904\u7406\n    ('attribs_adder', FunctionTransformer(add_extra_features, kw_args={'rooms_ix':rooms_ix, 'bedrooms_ix':bedrooms_ix, \n                                                                       'population_ix':population_ix, 'household_ix':household_ix})),\n    ('std_scaler', StandardScaler())#\u7ec4\u5408\u5b57\u6bb5\n])\n\n# \u6587\u672c\u7c7b\u578b\u6d41\u6c34\u7ebf\ntext_pipline = Pipeline([\n    ('selector', DataFrameSelector(['ocean_proximity'])),\n    ('text_encoder', OneHotEncoder(sparse=False)),\n])\n\n# \u5408\u5e76\nunion_pipplines = FeatureUnion(transformer_list=[\n    ('num_pipline', num_pipline),\n    ('text_pipline', text_pipline),\n])\n#\u7ed3\u679c\nhousing_prepares = union_pipplines.fit_transform(housing_df)\nprint('shape: ', housing_prepares.shape)\nprint('data head 5: \\n', housing_prepares[0:5, :])","7bbe8ea5":"#\u5c06\u6570\u636e\u96c6\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nfrom sklearn.model_selection import train_test_split\nhousing_label = housing_df['median_house_value'].values\nx_train, x_test, y_train, y_test = train_test_split(housing_prepares, housing_label)","fe75fedb":"#\u7ebf\u6027\u56de\u5f52\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\nestimator = LinearRegression()\nestimator.fit(x_train, y_train)\n\nestimator = GridSearchCV(estimator, param_grid={}, cv=None)\nestimator.fit(x_train, y_train)\n\ny_test_predict = estimator.predict(x_test)\nprint('R-square:',r2_score(y_test,y_test_predict))\nprint(u'\u4f30\u8ba1\u5668: \\n', estimator.best_estimator_)\nprint(u'\u4ea4\u53c9\u9a8c\u8bc1\u7ed3\u679c: \\n', estimator.cv_results_)","6a89cd11":"#\u51b3\u7b56\u6811\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\nestimator = DecisionTreeRegressor()\nestimator.fit(x_train, y_train)\n\nestimator = GridSearchCV(estimator, param_grid={}, cv=None)\nestimator.fit(x_train, y_train)\n\ny_test_predict = estimator.predict(x_test)\n\nprint('R-square:',r2_score(y_test,y_test_predict))\nprint(u'\u4f30\u8ba1\u5668: \\n', estimator.best_estimator_)\nprint(u'\u4ea4\u53c9\u9a8c\u8bc1\u7ed3\u679c: \\n', estimator.cv_results_)","fbb91a0e":"#\u968f\u673a\u68ee\u6797 \u76f8\u5bf9\u597d\u4e00\u70b9 \u91c7\u7528\u968f\u673a\u68ee\u6797\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\n\nestimator = RandomForestRegressor()\nestimator.fit(x_train, y_train)\n\nparam_grid=[{'n_estimators':[3,10,30],'max_features':[2,4,6,8]},\n            {'bootstrap':[False],'n_estimators':[3,10],'max_features':[2,3,4]},]\nestimator = GridSearchCV(estimator, param_grid, cv=None)\nestimator.fit(x_train, y_train)\n\ny_test_predict = estimator.predict(x_test)\n\nprint('R-square:',r2_score(y_test,y_test_predict))\nprint(u'\u4f30\u8ba1\u5668: \\n', estimator.best_estimator_)\nprint(u'\u4ea4\u53c9\u9a8c\u8bc1\u7ed3\u679c: \\n', estimator.cv_results_)","df91a2dc":"test_df = pd.read_csv('..\/input\/kaggle\/test.csv')\ntest_df.drop(['id'],axis=1,inplace=True)\ntest_df.info()","27e4aeae":"#\u6d41\u6c34\u7ebf\u5904\u7406\u6570\u636e\n_num_attribute_names = ['longitude', 'latitude', 'housing_median_age', 'total_rooms', 'total_bedrooms', 'population',\n              'households', 'median_income']\n_rooms_ix, _bedrooms_ix, _population_ix, _household_ix = get_columns_index(test_df, ['total_rooms', 'total_bedrooms', 'population', 'households'])\n_num_pipline = Pipeline([\n    ('selector', DataFrameSelector(_num_attribute_names)),\n    ('imputer', SimpleImputer(strategy='median')),\n    ('attribs_adder', FunctionTransformer(add_extra_features, kw_args={'rooms_ix':_rooms_ix, 'bedrooms_ix':_bedrooms_ix, \n                                                                       'population_ix':_population_ix, 'household_ix':_household_ix})),\n    ('std_scaler', StandardScaler())\n])\n\n\n_text_pipline = Pipeline([\n    ('selector', DataFrameSelector(['ocean_proximity'])),\n    ('text_encoder', OneHotEncoder(sparse=False)),\n])\n\n\n_union_pipplines = FeatureUnion(transformer_list=[\n    ('num_pipline', _num_pipline),\n    ('text_pipline', _text_pipline),\n])\n","1e97a44b":"_housing_prepares = _union_pipplines.fit_transform(test_df)\n\n#\u968f\u673a\u68ee\u6797\u9884\u6d4b\nestimator = RandomForestRegressor()\nestimator.fit(housing_prepares, housing_label)","530f5d5d":"param_grid=[{'n_estimators':[3,10,30],'max_features':[2,4,6,8]},\n            {'bootstrap':[False],'n_estimators':[3,10],'max_features':[2,3,4]},]\n\nestimator = GridSearchCV(estimator, param_grid, cv=None)\nestimator.fit(housing_prepares, housing_label)","cc630dc7":"#\u6a21\u578b\u76f8\u5173\u5185\u5bb9\nprint(\"\u6a21\u578b\u7684\u6700\u4f18\u53c2\u6570\uff1a\\n\",estimator.best_params_)\nprint(\"\u6700\u4f18\u6a21\u578b\u5206\u6570\uff1a\\n\",estimator.best_score_)\nprint(\"\u6700\u4f18\u6a21\u578b\u5bf9\u8c61\uff1a\\n\",estimator.best_estimator_)\n#\u8f93\u51fa\u7f51\u683c\u641c\u7d22\u6bcf\u7ec4\u8d85\u53c2\u6570\u7684cv\u6570\u636e\nfor p, s in zip(estimator.cv_results_['params'],estimator.cv_results_['mean_test_score']):\n    print(p, s)","9af7cbeb":"#\u9884\u6d4b\n_y_test_predict = estimator.predict(_housing_prepares)","041baed6":"#\u5199\u6587\u4ef6\ndata = pd.DataFrame(_y_test_predict)\ndata.to_csv('result.csv')","35936405":"# \u603b\u7ed3\u53cd\u601d\n\u672c\u6b21\u7684\u5927\u4f5c\u4e1a\u662f\u4e00\u4e2a\u76f8\u5bf9\u6bd4\u8f83\u5b8c\u6574\u7684\u6570\u636e\u5206\u6790\u4e0e\u9884\u6d4b\u8fc7\u7a0b\uff0c\u5bf9\u4e8e\u6211\u4e2a\u4eba\u7684\u7efc\u5408\u80fd\u529b\u63d0\u5347\u6709\u5f88\u5927\u7684\u5e2e\u52a9\uff0c\u540c\u65f6\u4e5f\u8ba9\u6211\u53d1\u73b0\u4e86\u81ea\u5df1\u7684\u5f88\u591a\u4e0d\u8db3\u4e4b\u5904\u3002\n\u672c\u6b21\u4f5c\u4e1a\u6211\u7684\u603b\u4f53\u6d41\u7a0b\u662f\uff1a\n\u6570\u636e\u57fa\u672c\u4fe1\u606f-\u6570\u636e\u63cf\u8ff0\u6027\u7edf\u8ba1-\u6570\u636e\u53ef\u89c6\u5316-\u6570\u636e\u9884\u5904\u7406-\u7ebf\u6027\u56de\u5f52\/\u51b3\u7b56\u6811\/\u968f\u673a\u68ee\u6797\u6a21\u578b\u8bad\u7ec3\u4e0e\u6d4b\u8bd5-\u9009\u62e9\u968f\u673a\u68ee\u6797\u6a21\u578b-\u6700\u7ec8\u901a\u8fc7train\u6570\u636e\u96c6\u7684\u8bad\u7ec3\u5bf9test\u6570\u636e\u96c6\u8fdb\u884c\u9884\u5904\u7406+\u9884\u6d4b\n\u603b\u4f53\u4e0a\u6b65\u9aa4\u6bd4\u8f83\u5b8c\u6574\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u4e5f\u6bd4\u8f83\u5408\u7406\u3002\u5728\u6570\u636e\u7684\u53ef\u89c6\u5316\u65b9\u9762\uff0c\u6211\u5f15\u5165\u4e86\u591a\u79cd\u4e0d\u540c\u7684\u53ef\u89c6\u5316\u5f62\u5f0f\uff0c\u4f7f\u5bf9\u6570\u636e\u7684\u63cf\u8ff0\u66f4\u52a0\u76f4\u89c2\uff1b\u5728\u6570\u636e\u5904\u7406\u65b9\u9762\uff0c\u5f15\u5165\u4e86\u7ec4\u5408\u5b57\u6bb5\uff1b\u5728\u6a21\u578b\u9009\u62e9\u65b9\u9762\uff0c\u901a\u8fc7\u5bf9\u51e0\u4e2a\u6a21\u578b\u7684\u6bd4\u8f83\uff0c\u6700\u7ec8\u9009\u62e9\u4f7f\u7528\u968f\u673a\u68ee\u6797\u6a21\u578b\uff1b\u6b64\u5916\uff0c\u8fd8\u4f7f\u7528\u4e86GridSearch\u5bf9\u6a21\u578b\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u4f18\u5316\u3002\n\u4f46\u6211\u4e5f\u5b58\u5728\u5f88\u591a\u7684\u95ee\u9898\uff0c\u9996\u5148\uff0c\u5728\u6570\u636e\u63cf\u8ff0\u6027\u7edf\u8ba1\u4e0e\u53ef\u89c6\u5316\u65b9\u9762\u53d1\u73b0\u7684\u4e00\u4e9b\u89c4\u5f8b\uff0c\u5728\u9884\u6d4b\u4e2d\u5e76\u6ca1\u6709\u5f97\u5230\u5f88\u597d\u7684\u91cd\u89c6\uff1b\u5176\u6b21\uff0c\u5bf9\u4e8e\u6a21\u578b\u7684\u539f\u7406\u4e0e\u4ee3\u7801\u4e4b\u95f4\u7684\u5173\u7cfb\u5e76\u4e0d\u5341\u5206\u719f\u6089\uff0c\u4f7f\u5728\u6a21\u578b\u7684\u9009\u62e9\u4e0e\u8c03\u6574\u65b9\u9762\u4e0d\u592a\u5b8c\u5584\uff1b\u6b64\u5916\uff0c\u5173\u4e8e\u6a21\u578b\u89e3\u91ca\uff0c\u4f7f\u7528GridSearch\u4f18\u5316\u53c2\u6570\u540e\uff0c\u4e00\u76f4\u627e\u4e0d\u5230\u65b9\u6cd5\u80fd\u591f\u83b7\u5f97\u6a21\u578b\u7684\u5177\u4f53\u53c2\u6570\uff0c\u53ea\u80fd\u83b7\u5f97\u6a21\u578b\u7684\u4e00\u90e8\u5206\u5185\u5bb9\uff08\u5df2\u7ecf\u5199\u5728\u7a0b\u5e8f\u7684\u6ce8\u91ca\u91cc\u4e86\uff09\uff0c\u4e5f\u662f\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u95ee\u9898\u3002\u7a76\u5176\u6839\u6e90\uff0c\u8fd8\u662f\u5bf9\u4e8e\u76f8\u5173\u7406\u8bba\u4e0e\u6280\u672f\u4e0d\u591f\u4e86\u89e3\uff0c\u638c\u63e1\u7a0b\u5ea6\u9700\u8981\u8fdb\u4e00\u6b65\u52a0\u5f3a\uff0c\u5728\u6a21\u578b\u7684\u5efa\u7acb\u3001\u9009\u62e9\u3001\u4f18\u5316\u65b9\u9762\uff0c\u6211\u8fd8\u9700\u8981\u5927\u91cf\u7684\u8fdb\u4e00\u6b65\u5b66\u4e60\uff0c\u63d0\u9ad8\u81ea\u5df1\u5c06\u7406\u8bba\u77e5\u8bc6\u4e0e\u5e94\u7528\u7ed3\u5408\u8d77\u6765\u7684\u80fd\u529b\u4ee5\u53ca\u5199\u4ee3\u7801\u7684\u80fd\u529b\u3002","29c1872c":"# \u6b63\u5f0f\u8fdb\u884c\u623f\u4ef7\u9884\u6d4b\u90e8\u5206"}}