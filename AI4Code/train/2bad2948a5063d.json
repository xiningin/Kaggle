{"cell_type":{"1c97d3fc":"code","d2e593da":"code","1b1cc531":"code","d4446fa9":"code","fb05c50b":"code","2ccc57e8":"code","f9b073a7":"code","56bd1dfa":"code","ae922df2":"code","69d43b92":"code","a991aa95":"code","d3aa8b45":"code","0dfd7b5b":"code","0a490790":"code","25bef14c":"markdown","9bd636fd":"markdown","be8de84f":"markdown","f62c4ff0":"markdown","6d038aa2":"markdown","a5fac344":"markdown","2a778e5f":"markdown","5ecae44c":"markdown","d5199c61":"markdown","26662e85":"markdown","576fe271":"markdown","b5e99a73":"markdown","917d36f4":"markdown","c41ea24d":"markdown","c4fda52a":"markdown","567b5022":"markdown","35750b9c":"markdown"},"source":{"1c97d3fc":"%pip install -q -U scikit-learn\n\nimport random\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom multiprocessing import cpu_count\nfrom matplotlib import pyplot as plt\n\nfrom sklearn import (\n    metrics,\n    model_selection,\n    linear_model,\n    pipeline,\n    preprocessing,\n    base\n)","d2e593da":"np.random.seed(42)\nrandom.seed(42)\nn_jobs = cpu_count()\n\nsns.set(\n    style='whitegrid',\n    context='notebook',\n    rc={'figure.frameon': False, 'legend.frameon': False, 'figure.figsize': (12, 8)}\n)\n\ndata_root = '\/kaggle\/input\/tabular-playground-series-nov-2021'\n\ndf = pd.read_csv(f'{data_root}\/train.csv', dtype=np.float32).astype({'id': np.int32}).sample(frac=1) # shuffle\ndf_test = pd.read_csv(f'{data_root}\/test.csv', dtype=np.float32).astype({'id': np.int32})\nX_test = df_test.drop(columns=['id']).to_numpy()\n\nids, X, y = df['id'].to_numpy(), df.drop(columns=['id', 'target']).to_numpy(), df.target.to_numpy()\n\nfolds_idx = list(model_selection.StratifiedKFold(n_splits=5).split(X, y))\nval_order = np.concatenate([val_idx for _, val_idx in folds_idx], axis=0)\ny_true = y[val_order]","1b1cc531":"def predict(model, X):\n    \"\"\"We'd prefer using predict_proba, but can fall back to decision_function or predict if need be.\"\"\"\n\n    try:\n        return model.predict_proba(X)[:, 1]\n    except (AttributeError, ValueError) as e:\n        # It doesn't have it, or it is SGD with loss='hinge', which has, but doesn't support it\n        if hasattr(model, 'decision_function'):\n            return model.decision_function(X)\n        else:\n            return model.predict(X)\n        \n\ndef score_model(model: base.BaseEstimator, n_jobs=n_jobs):\n    \"\"\"\n    Returns (auc, oof_predictions, test_predictions)\n    \n    auc is for oof_predictions, but it should not be *too* far off from test_predictions\n    \n    \"\"\"\n    report = model_selection.cross_validate(\n        model, X, y, \n        cv=folds_idx, # we always use the same folds\n        scoring='roc_auc',\n        return_estimator=True, # this gives us the trained estimators in the report\n        n_jobs=n_jobs,\n    )\n    oof, test = [], []\n    \n    for est, (_, val_idx) in zip(report['estimator'], folds_idx):\n        oof.append(predict(est, X[val_idx]))\n        test.append(predict(est, X_test))\n        \n    oof = np.concatenate(oof, axis=0)\n    test = np.c_[test].mean(axis=0)\n    return metrics.roc_auc_score(y_true, oof), oof, test","d4446fa9":"rdg = pipeline.make_pipeline(\n    preprocessing.RobustScaler(),\n    linear_model.RidgeClassifierCV()\n)\n\n%time rdg_auc, rdg_oof, rdg_preds = score_model(rdg)\nrdg_auc","fb05c50b":"sgd = pipeline.make_pipeline(\n    preprocessing.RobustScaler(), \n    linear_model.SGDClassifier(loss='hinge', learning_rate='adaptive', penalty='l2', alpha=1e-3, eta0=0.025)\n)\n\n%time sgd_auc, sgd_oof, sgd_preds = score_model(sgd)\nsgd_auc","2ccc57e8":"from sklearn import discriminant_analysis\n\nlda = pipeline.make_pipeline(\n    preprocessing.StandardScaler(), \n    discriminant_analysis.LinearDiscriminantAnalysis(),\n)\n\n%time lda_auc, lda_oof, lda_preds = score_model(lda)\nlda_auc","f9b073a7":"lreg = pipeline.make_pipeline(preprocessing.RobustScaler(), linear_model.LogisticRegression(C=0.0015, penalty='l2'))\n%time lreg_auc, lreg_oof, lreg_preds = score_model(lreg)\nlreg_auc","56bd1dfa":"from sklearn import naive_bayes\n\nnb = pipeline.make_pipeline(\n        preprocessing.MinMaxScaler(feature_range=(0, 1)),\n        naive_bayes.MultinomialNB()\n)\n\n%time nb_auc, nb_oof, nb_preds = score_model(nb)\nnb_auc","ae922df2":"from sklearn import neural_network\n\nmlp = pipeline.make_pipeline(\n    preprocessing.StandardScaler(),\n    neural_network.MLPClassifier(hidden_layer_sizes=(100, 50, 10), batch_size=256, early_stopping=True)\n)\n%time mlp_auc, mlp_oof, mlp_preds = score_model(mlp)\n\nmlp_auc","69d43b92":"scaler = preprocessing.MinMaxScaler()\noof_preds = np.c_[[sgd_oof, lda_oof, lreg_oof, mlp_oof, rdg_oof]].swapaxes(0, 1)\noof_blend = np.mean(scaler.fit_transform(oof_preds), axis=1)\nmetrics.roc_auc_score(y_true, oof_blend)","a991aa95":"X_blend = np.c_[[sgd_oof, lda_oof, lreg_oof, mlp_oof, nb_oof, rdg_oof]].swapaxes(0, 1)\n\nblend = pipeline.Pipeline([\n    ('scaler', preprocessing.StandardScaler()),\n    ('predict', linear_model.LinearRegression())\n])\n\nparam_grid = {\n    'scaler': [preprocessing.RobustScaler(), preprocessing.StandardScaler(), preprocessing.MinMaxScaler()],\n    'predict': [\n        linear_model.RidgeClassifier(), linear_model.LogisticRegression(), \n        linear_model.BayesianRidge(), linear_model.LinearRegression()\n    ]\n}\n\ngrid_search = model_selection.GridSearchCV(blend, param_grid, n_jobs=-1, refit=True, scoring='roc_auc', cv=folds_idx)\n%time grid_search.fit(X_blend, y)\npd.DataFrame(grid_search.cv_results_)[['param_predict', 'param_scaler', 'mean_test_score']]","d3aa8b45":"grid_search.best_score_","0dfd7b5b":"from sklearn import ensemble\n\nstack = ensemble.StackingClassifier(\n    estimators=[('sgd', sgd), ('lda', lda), ('lreg', lreg), ('mlp', mlp), ('rdg', rdg), ('nb', nb)], \n    final_estimator=pipeline.make_pipeline(preprocessing.StandardScaler(), linear_model.LogisticRegression())\n)\n%time stack_auc, stack_oof, stack_preds = score_model(stack)\nstack_auc","0a490790":"df_test[['id']].assign(\n    target=stack_preds\n).to_csv('\/kaggle\/working\/simple_stacker.csv', index=False)","25bef14c":"Or, since I also kept our estimators around, we could use the sklearn stacking ensemble, but this will retrain everything, so it'll take more time than the rest of the notebook up until this point:","9bd636fd":"Making a rig to check CV score\n==\n\nThis is something you could just use `sklearn.model_selection.cross_val_score()` for. But this way of doing it is useful if you plan to do something with the estimators that are trained -- for example, store their test predictions and out of fold predictions (which I do, just not in this notebook).","be8de84f":"Simple models that do OK\n==\n\nTo my great joy, I quickly discovered that this time around, I won't be tuning boosters for weeks. :-)\n\nI found a number of other promising approaches that are quick to train, and don't have as many hyper parameters to tune -- which should free up time to work on feature engineering instead. In this notebook, I've set up simple demos of how that works using cross validation, but I'm not storing any output here. I've submitted a few of these models, and they do worse on the public LB than on these CVs, but they should still mostly be around AUC `.745`, and there's even one model achieving AUC `.747` here.\n\nThere's no EDA in this notebook, only things that are plug-and-play -- I had spent some time looking at features before I started testing these models, and got reasonable results with no feature engineering. It looks like the input data is probably generated based on some TfIdf-vectors, so I went looking for models that people would normally combine with that. Towards the end, I did some simple blending experiments.\n\nLet's get the rig out of the way first, here's my usual suspect imports, and also a scikit-learn upgrade to match what I have on my own machine:","f62c4ff0":"This is the first set of parameters I attempted here, there's no reason to believe we couldn't do better if we tried some tuning, or maybe a different NN architecture than MLP.\n\nEnsembling \/ blending\n==\n\nSince we left all the out of fold predictions and test predictions in memory, we can easily start experimenting with ensembling in some way at this point. We have a reasonably diverse selection of models here, we know that the folds have been repeatedly happening in the same order, so it's easy to combine them to check what our best combination might be.\n\nWe'd do that by combining the out of fold predictions we kept, then score that against `y_true`. Here's a simple example of averaging everything except Naive Bayes:","6d038aa2":"I tried several other approaches for SVM, but had issues getting them to work due to the number of samples we have.\n\nThese parameters weren't chosen at random, I did some hyper parameter search here for about 1 hour, based on a hunch that SGD would be great on this dataset. SGD is reasonably fast to experiment with.","a5fac344":"We could also try to grid search over some simple estimators:","2a778e5f":"Setting up folds\n==\n\nI reuse the same folds across all of the models here, in order to be able to compare results.\n\nI also set some variables I'll want to use later for checking metrics -- `y_true` is the out of fold order for my folds, I will check my model performance by calling `metrics.roc_auc_score(y_true, y_score)`.\n\nI'm using 5 folds here, somewhat arbitrarily chosen. ","5ecae44c":"`.725` is probably not good enough that we could include it in blending, even. It's possible that we could tune it, or get better if we tried some feature engineering?\n\nEither way, it's blazing fast, so if we were to experiment with it, we should be able to do it rapidly.","d5199c61":"Logistic Regression\n==\n\nThis one isn't too bad here either:","26662e85":"\nMLP\n==\n\nThis one, I would normally implement with torch or tensorflow and run it on the GPU, but for the sake of just showing that it works pretty well here, I've left the scikit-learn implementation running, since this isn't a particularly expensive NN to evaluate:","576fe271":"Linear Discriminant Analysis\n==\n\nDoesn't get much simpler to tune than this one:","b5e99a73":"Naive Bayes\n==\n\nThis would've been the classic for working with email (spam detection), but unfortunately it doesn't quite get there. Maybe with some tuning, it could?","917d36f4":"I believe this is also a classic for NLP tasks with TfIdf vectors. I've used it for feature transformations in the past, but for this data set it works out to be a reasonably good classifier on its own, no tuning required.","c41ea24d":"RidgeClassifier\n--\n\nRidge Regression is supposed to work well when features are highly correlated, which should be the case for TfIdf vectors, eg. multiple terms occuring together.","c4fda52a":"That's a pretty good score for a model that's so fast to fit.\n\nSGD\n==\n\nNow we can check hinge-loss SGD, which is similar to a linear SVM. SVM were state-of-the-art for natural language processing at some point, and the synthetic data is generated based on an email dataset, so it's perhaps not surprising that it works well here.","567b5022":"I did a very quick hyper parameter search here, and got better scores using `RobustScaler` than `StandardScaler`.\n\nWith the very similar scores so far, it seems likely that these linear models are all finding the same solution.","35750b9c":"I'm sending in the submission from that stack, just to associate a score with this notebook.\n\nDone\n==\n\nNote that this highly overestimates our LB score due to a target leak, since we're using our out of fold data to do things like early-stopping and choosing the best models, we can't also reuse the folds to estimate blend score. One way to get around that would be to split off some data from train before doing the folds, then use that data to measure the blends. It shouldn't be too hard to make that adaption.\n\nSo, where to go from here? One option is to train many models (possibly some of these), using a setup much like this, then find the best way of blending, or stacking them. Eventually, I think that's probably the direction I will be heading. There are also lots of NN architectures that could be worth a shot here, and there's almost certainly a way to tune a booster so that it could compete with these models we found. But for now, I think I'd like to try doing some work on our features. :-)"}}