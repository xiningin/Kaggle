{"cell_type":{"58d380c3":"code","e611cc25":"code","e71df284":"code","c98f01a2":"code","6af4f63f":"code","7d66d9d2":"code","d13eb208":"code","d6136bdd":"code","724d21c8":"markdown","fbe1f454":"markdown","02c2d390":"markdown","176d950a":"markdown","5ebc7406":"markdown","1f237109":"markdown","e5d5f07c":"markdown","b244165f":"markdown"},"source":{"58d380c3":"from kaggle_environments import evaluate, make, utils\nimport numpy\nimport traceback\nfrom copy import copy, deepcopy\n\nenv = make(\"connectx\", debug=True)\n# env.render()","e611cc25":"def rules_agent_verbose(observation, configuration):\n    return rules_agent(observation, configuration, verbose=True)\n\ndef rules_agent(observation, configuration, verbose=False):\n    try:\n        from functools import lru_cache\n        from itertools import product\n        from typing import Union, List, Tuple, FrozenSet, Set\n        from collections import defaultdict\n        import numpy as np\n        import random\n        import traceback\n\n\n        board = np.array(observation.board).reshape(configuration.rows, configuration.columns)\n        hero_mark   = observation.mark\n        villan_mark = 1 if hero_mark == 2 else 2\n\n        # (1,0)  -> (-1,0)  = down -> up\n        # (0,1)  -> (0,-1)  = left -> right\n        # (1,1)  -> (-1,-1) = down+left -> up+right\n        # (-1,1) -> (1,-1)  = up+left   -> down+right\n        all_directions  = frozenset(\n            frozenset([ (x,y), (-x,-y) ])\n            for x,y in product([-1,0,1],[-1,0,1])\n            if not (x == y == 0)\n        )\n        playable_row = [ np.count_nonzero( board[:,col] == 0 ) - 1 for col in range(configuration.columns)      ]\n        played_cols  = [ col for col in range(configuration.columns) if np.count_nonzero( board[:,col] ) != 0   ]\n        empty_cols   = [ col for col in range(configuration.columns) if np.count_nonzero( board[:,col] ) == 0   ]\n        valid_cols   = { col for col in range(configuration.columns) if board[0,col] == 0 }  # rows are counted from sky = 0\n        valid_cells  = { (playable_row[col],col) for col in range(configuration.columns) if playable_row[col] != -1 }\n        middle_column  = configuration.columns\/\/2\n        is_board_empty = np.count_nonzero(observation.board) == 0\n\n        def get_cell_value(cell: Union[Tuple[int,int], None]) -> Union[int,None]:\n            if cell is None: return None\n            return board[cell[0],cell[1]]\n\n        # @lru_cache()\n        def is_valid_move(col: Union[int,Tuple[int,int]]):\n            if isinstance(col, tuple): col = col[1]\n            if col is None: return False\n            return col in valid_cols\n\n        def get_playable_row(col: int) -> Union[int,None]:\n            row = np.count_nonzero( board[:,col] == 0 ) - 1\n            return row if row >= 0 else None\n\n        def get_cells_by_intersection_score( mark: int, only_playable=True ):\n            scores = defaultdict(int)\n            lines  = get_lines(mark)\n            for line in lines:\n                for cell in line:\n                    if only_playable and not is_valid_move(cell): continue\n                    scores[cell] += get_line_length(line)\n            output = sorted([ (score, cell) for score, cell in zip(scores.values(), scores.keys()) ])\n            return output\n\n        # @lru_cache()\n        def get_lines_by_length(mark: int) -> List[Tuple[int,List[Tuple[int,int]]]]:\n            lines  = get_lines(mark)\n            output = [ (get_line_length(line), line) for line in lines ]\n            output = sorted(output, reverse=True)\n            return output\n\n        def get_line_length(line: List[Tuple[int,int]]) -> int:\n            values = [ board[cell[0],cell[1]] for cell in line ]\n            length = np.count_nonzero(values)\n            return length\n\n        # @lru_cache()\n        def get_lines(mark: int) -> List[List[Tuple[int,int]]]:\n            output = set()\n            for coords in product(range(configuration.rows), range(configuration.columns)):\n                if get_cell_value(coords) == 0: continue\n                for directions in all_directions:\n                    line = get_line(coords, directions, mark=mark)\n                    if len(line) < configuration.inarow: continue\n                    output.add(line)\n            return list(output)\n\n        # @lru_cache()\n        def get_line(coords: Tuple[int,int], directions: FrozenSet[Tuple[int,int]], mark: int) -> Tuple[Tuple[int,int]]:\n            line  = [ coords ]\n            for direction in directions:\n                count = 0\n                cell  = coords\n                value = board[cell[0],cell[1]]\n                if value != mark: return tuple()\n\n                while count <= configuration.inarow:\n                    cell  = next_cell(cell, direction)\n                    if cell is None:        break;                                   # Lines terminate at the edge of the board\n\n                    value = board[cell[0],cell[1]]\n                    if   value == 0:        count += 1; line.append(cell); continue  # Lines count to inarow in empty space\n                    elif value == mark:     count  = 0; line.append(cell); continue  # Lines extend inarow beyond the last disk of same color\n                    elif value != mark:     break                                    # lines terminates at opposite token\n\n            line = tuple(sorted(line))\n            return line\n\n\n        # @lru_cache()\n        def get_line_edges(line: List[Tuple[int,int]], mark: int) -> List[Tuple[int,int]]:\n            values = [ board[cell[0],cell[1]] for cell in line ]\n            if mark not in values: return []\n            edges  = []\n            last_value = None\n            last_cell  = None\n            for cell, value in zip(line,values):\n                if   value == mark and last_value == 0:    edges.append(last_cell)\n                elif value == 0    and last_value == mark: edges.append(cell)\n                last_value = value\n                last_cell  = cell\n\n            return sorted(set(edges))\n\n        # @lru_cache()\n        def get_line_zero_groups(line: List[Tuple[int,int]]) -> List[List[Tuple[int,int]]]:\n            values = [ board[cell[0],cell[1]] for cell in line ]\n            output = []\n            buffer = []\n            last   = None\n            for cell, value in zip(line,values):\n                if   value == 0:  buffer.append(cell);   continue\n                elif len(buffer): output.append(buffer); buffer = [];\n            if len(buffer):       output.append(buffer); buffer = [];\n            return output\n\n        # @lru_cache()\n        def get_line_zero_groups_lengths(line: List[Tuple[int,int]]) -> List[int]:\n            output = list(map(len, get_line_zero_groups(line)))\n            return output\n\n        # @lru_cache()\n        def get_line_middle(line: List[Tuple[int,int]], mark: int) -> List[Tuple[int,int]]:\n            values = [ board[cell[0], cell[1]] for cell in line ]\n            middle  = []\n            buffer  = []\n            last    = None\n            middle_started = False\n            for index, cell in enumerate(line):\n                value = board[cell[0],cell[1]]\n                if value == 0 and last is mark:      middle_started = True   # exclude left hand zeros\n                if value == 0 and middle_started:    buffer.append(cell)\n                if value == mark and middle_started: middle += buffer; buffer = []; middle_started = False\n                if index == len(line)-1:             buffer = []; break      # exclude right hand zeros\n            return sorted(middle)\n\n        # @lru_cache()\n        def get_playable_line_edges(line: List[Tuple[int,int]], mark: int) -> FrozenSet[Tuple[int,int]]:\n            edges  = [ cell for cell in get_line_edges(line, mark) ]\n            output = [ cell for cell in edges if is_valid_move(cell) ]\n            return output\n\n        # @lru_cache()\n        def get_playable_line_middle(line: List[Tuple[int,int]], mark: int) -> FrozenSet[Tuple[int,int]]:\n            output = [ cell for cell in get_line_middle(line, mark) if is_valid_move(cell) ]\n            return output\n\n        # @lru_cache()\n        def next_cell(coords: Tuple[int,int], direction: Tuple[int,int]) -> Tuple[int,int]:\n            if coords is None or direction is None:                 return None\n\n            output = ( coords[0] + direction[0], coords[1] + direction[1] )\n            if output[0] < 0 or output[0] >= configuration.rows:    return None\n            if output[1] < 0 or output[1] >= configuration.columns: return None\n            return output\n\n\n        ### Strategies ###\n\n\n        # best opening strategy is to play in the middle\n        def strategy_empty_board():\n            if is_board_empty:\n                return middle_column\n\n        # best response strategy is also to play ontop of the middle\n        def strategy_middle_column():\n            if len(played_cols) == 1 and played_cols[0] == middle_column:\n                return middle_column\n            # return middle_column  # always play the middle column if possible\n\n        # if we have a winning move, then play it quick!\n        def strategy_connect_four():\n            for mark in [hero_mark, villan_mark]:  # win game before blocking villan\n                lines_by_length = get_lines_by_length(mark)\n                for length, line in lines_by_length:\n                    if length == configuration.inarow - 1:  # is one move away from winning\n                        values = [ board[cell[0],cell[1]] for cell in line ]\n                        middle = get_line_middle(line, mark)\n                        if len(middle):\n                            for cell in middle:\n                                if is_valid_move(cell):\n                                    if verbose: print('strategy_connect_four() =', cell, '|', f'mark={hero_mark}v{mark}', values, line, 'middle', get_line_middle(line, mark))\n                                    return cell\n                        else:\n                            edges = get_line_edges(line, mark)\n                            for cell in edges:\n                                if is_valid_move(cell):\n                                    if verbose: print('strategy_connect_four() =', cell, '|', f'mark={hero_mark}v{mark}', values, line, 'middle', get_line_middle(line, mark))\n                                    return cell\n                    else:\n                        break  # get_lines_by_length(mark) is sorted(), so we can short circuit\n\n        # Can we setup a double attack (2x edge_size >= 2)?\n        def strategy_double_attack(distance=2):\n            for mark in [hero_mark, villan_mark]:\n                for length, line in get_lines_by_length(mark):\n                    if length >= configuration.inarow - distance:  # line of length 4-2=2\n                        values = [ board[cell[0],cell[1]] for cell in line ]\n                        playable_edges = set(get_playable_line_edges(line, mark))\n                        if not len(playable_edges): continue  # we need a only_playable move\n\n                        zero_groups = get_line_zero_groups(line)\n                        if sum(map(len,zero_groups)) < distance: continue  # we need this many cells to complete the line\n                        for zero_group in zero_groups:\n                            if not len(zero_groups) >= 2: continue          # we need two empty spaces for double attack to work in this direction\n                            valid_moves = set(zero_group).intersection(playable_edges)\n                            for valid_move in valid_moves:\n                                if verbose: print(f'strategy_double_attack({distance}) = {valid_move} | ', f'mark={hero_mark}v{mark}', values, line)\n                                return valid_move\n\n        # Can we prepare for a double attack (2x edge_size >= 2)?\n        def strategy_prepare_double_attack():\n            return strategy_double_attack(distance=3)\n\n        def strategy_intersection_score():\n            for mark in [hero_mark, villan_mark]:\n                intersections = get_cells_by_intersection_score(mark, only_playable=True)\n                for score, cell in intersections:\n                    if not is_valid_move(cell): continue\n                    if verbose: print(f'strategy_intersection_score() = {cell} | ', f'mark={hero_mark}v{mark}', intersections)\n                    return cell\n\n        def strategy_longest_line():\n            mark = hero_mark\n            for length, line in get_lines_by_length(mark):\n                edges = get_playable_line_edges(line, mark)\n                for cell in edges:\n                    if not is_valid_move(cell): continue\n                    if verbose: print(f'strategy_intersection_score() = {cell} | ', f'mark={hero_mark}v{mark}', f'length={length}', line)\n                    return cell\n\n        def strategy_random_choice():\n            return random.choice(list(valid_cols))\n\n\n        strategies = [\n            strategy_empty_board,\n            strategy_middle_column,\n            strategy_connect_four,\n            strategy_double_attack,\n            strategy_prepare_double_attack,\n            strategy_intersection_score,\n            strategy_longest_line,\n            strategy_random_choice,\n        ]\n        for strategy in strategies:\n            move = strategy()\n            if is_valid_move(move):\n                if verbose: print(move, strategy.__name__, 'accepted')\n                return move[1] if isinstance(move, tuple) else move\n        return None\n    except Exception as exception:\n        print(type(exception), exception, exception.__traceback__)\n        traceback.print_exc()\n        raise exception\n","e71df284":"from IPython.core.display import HTML\nif __name__ == '__main__':\n    my_agent = rules_agent\n    from kaggle_environments import evaluate, make, utils\n\n    env = make(\"connectx\", configuration={\n        # \"episodeSteps\": 0,\n        \"agentTimeout\": 360,\n        \"actTimeout\":   360,\n        \"runTimeout\":   360,\n        \"rows\":    6,\n        \"columns\": 7,\n        \"inarow\":  4,\n        \"agentExec\": \"LOCAL\",\n        \"debug\": True\n    })\n\n    for villan_agent in [my_agent, 'random', 'negamax']:\n        villan_agent_name = villan_agent if isinstance(villan_agent, str) else villan_agent.__name__\n        display(HTML(f'<h1>{villan_agent_name}<\/h1>'))\n        env.reset()\n        env.run([my_agent, villan_agent])\n        env.render(mode=\"ipython\", width=500, height=450)\n","c98f01a2":"# Play as first position against random agent.\ntrainer = env.train([None, \"negamax\"])\n\nobservation = trainer.reset()\n\nwhile not env.done:\n    my_action = rules_agent(observation, env.configuration, verbose=True)\n    print(\"My Action\", my_action)\n    observation, reward, done, info = trainer.step(my_action)\n    env.render(mode=\"human\", width=500, height=450, header=False, controls=False)\n# print('Final Board Position')\n# env.render()","6af4f63f":"def mean_reward(rewards):\n    score = sum(r[0] for r in rewards)\n    total = float(len(rewards)) \n    return f'{score}\/{total}'\n\n# Run multiple episodes to estimate its performance.\nprint(\"My Agent vs Random Agent:\",  mean_reward(evaluate(\"connectx\", [my_agent, \"random\"],  num_episodes=10)))\nprint(\"My Agent vs Negamax Agent:\", mean_reward(evaluate(\"connectx\", [my_agent, \"negamax\"], num_episodes=10)))","7d66d9d2":"# \"None\" represents which agent you'll manually play as (first or second player).\nenv.play([None, \"negamax\"], width=500, height=450)","d13eb208":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(my_agent, \"submission.py\")","d6136bdd":"import sys\nout        = sys.stdout\nsubmission = utils.read_file(\"\/kaggle\/working\/submission.py\")\nagent      = utils.get_last_callable(submission)\nsys.stdout = out\n\nenv = make(\"connectx\", debug=True)\nenv.run([agent, agent])\nfor i, state in enumerate(env.state): print(state)\nprint(\"\\nSuccess!\" if env.state[0].status == env.state[1].status == \"DONE\" else \"Failed...\")","724d21c8":"# Create an Agent\n\nTo create the submission, an agent function should be fully encapsulated (no external dependencies).  \n\nWhen your agent is being evaluated against others, it will not have access to the Kaggle docker image.  Only the following can be imported: Python Standard Library Modules, gym, numpy, scipy, pytorch (1.3.1, cpu only), and more may be added later.\n\n","fbe1f454":"# Evaluate your Agent","02c2d390":"# Write Submission File\n\n","176d950a":"# Create ConnectX Environment","5ebc7406":"# Test Your Agent","1f237109":"# Debug\/Train your Agent","e5d5f07c":"# Validate Submission\nPlay your submission against itself.  This is the first episode the competition will run to weed out erroneous agents.\n\nWhy validate? This roughly verifies that your submission is fully encapsulated and can be run remotely.","b244165f":"# Play your Agent\nClick on any column to place a checker there (\"manually select action\")."}}