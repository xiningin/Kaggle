{"cell_type":{"4520a2d1":"code","a8eb7935":"code","9a9aa78e":"code","916243c5":"code","584ac0c2":"code","9723858d":"code","702b3f06":"code","a360dbb5":"code","8531d942":"code","c5d03a62":"code","3dab55bd":"code","d0d01180":"code","b74c5871":"code","7fb40042":"code","f62a5007":"code","fd7ddd34":"code","9d5f404e":"code","81dca0ae":"code","833180c3":"markdown","0e288ddc":"markdown","7b7b822b":"markdown","feb382a9":"markdown","2ae5a295":"markdown","307d641f":"markdown","5d507645":"markdown","fb516fd3":"markdown","7b5a5932":"markdown","9a9afaf3":"markdown","60244d6f":"markdown"},"source":{"4520a2d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8eb7935":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.simplefilter(\"ignore\")","9a9aa78e":"waterpotability = pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")\n\n# Check the data load\nwaterpotability.head()","916243c5":"# Check the data structure\nwaterpotability.info()","584ac0c2":"# Check for missing value\nwaterpotability.isna().sum()","9723858d":"# Explore the target variable\nsns.countplot(waterpotability['Potability'])\nwaterpotability['Potability'].value_counts()","702b3f06":"# We will revist the correlation heatmap\nplt.figure(figsize=(12, 8))\nsns.heatmap(waterpotability.corr(), annot=True)","a360dbb5":"# Let us check the distribution of the attributes\n\nfig = plt.figure(figsize=(22, 11))\nfig.subplots_adjust(hspace=0.4, wspace=0.4)\nax = fig.add_subplot(3, 3, 1)\nsns.distplot(waterpotability['ph'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 2)\nsns.distplot(waterpotability['Hardness'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 3)\nsns.distplot(waterpotability['Solids'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 4)\nsns.distplot(waterpotability['Chloramines'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 5)\nsns.distplot(waterpotability['Sulfate'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 6)\nsns.distplot(waterpotability['Conductivity'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 7)\nsns.distplot(waterpotability['Organic_carbon'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 8)\nsns.distplot(waterpotability['Trihalomethanes'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 9)\nsns.distplot(waterpotability['Turbidity'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nplt.show()","8531d942":"# View the mean by the response variable\n\nwaterpotability.groupby('Potability').mean()","c5d03a62":"# View the stdDev by the response variable\nwaterpotability.groupby('Potability').std()","3dab55bd":"# Check the pair plots\nsns.pairplot(data=waterpotability, hue='Potability')","d0d01180":"waterpotability['ph'] = waterpotability['ph'].fillna(waterpotability.groupby('Potability')['ph'].transform('mean'))\nwaterpotability['Sulfate'] = waterpotability['Sulfate'].fillna(waterpotability.groupby('Potability')['Sulfate'].transform('mean'))\nwaterpotability['Trihalomethanes'] = waterpotability['Trihalomethanes'].fillna(waterpotability.groupby('Potability')['Trihalomethanes'].transform('mean'))\nwaterpotability.isna().sum()","b74c5871":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfeatures = waterpotability.drop(labels=['Potability'], axis=1)\ntarget = waterpotability['Potability']\n\nfeatures_train, features_test, target_train, target_test = train_test_split(features, \n                                                                            target, \n                                                                            test_size=0.3, random_state=101,\n                                                                           stratify = target)","7fb40042":"sc = StandardScaler()\nfeatures_train = sc.fit_transform(features_train)\nfeatures_test = sc.transform(features_test)","f62a5007":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix, classification_report, f1_score, accuracy_score","fd7ddd34":"param_grid = {'n_estimators': [100, 200, 300], 'max_features': ['auto', 'sqrt'], 'bootstrap': [True, False], 'criterion':['entropy', 'gini']}\nrfcgrid = GridSearchCV(RandomForestClassifier(random_state=101), param_grid, verbose=100, cv=10, n_jobs=-2)\nrfcgrid.fit(features_train, target_train)","9d5f404e":"# Best params of Random Forest\nrfcgrid.best_params_","81dca0ae":"rfcpredictions = rfcgrid.predict(features_test)\n\nprint(\"Confusion Matrix - Random Forest Using Entropy Index\")\nprint(confusion_matrix(target_test,rfcpredictions))\nprint(\"\\n\")\nprint(\"Accuracy Score - Random Forest\")\nprint(accuracy_score(target_test, rfcpredictions))\nprint(\"\\n\")\nprint(\"Classification Report - Random Forest\")\nprint(classification_report(target_test,rfcpredictions))\nprint(\"\\n\")\nprint(\"F1 Score - Random Forest\")\nprint(f1_score(target_test, rfcpredictions))","833180c3":"## Library Imports","0e288ddc":"## Load the dataset and validate the data load","7b7b822b":"The correlation between the attributes are fairly low and this suggests the attributes are independent","feb382a9":"## Train Test Split and Scaling of Data","2ae5a295":"All the distributions are fairly normal and distributed around the mean","307d641f":"There are missing values in ph, sulfate and Trihalomethanes","5d507645":"The mean and standard deviations are also fairly close to each other against the response variable","fb516fd3":"### Random Forest Classifier","7b5a5932":"## Exploratory Data Analysis","9a9afaf3":"## Model Building","60244d6f":"## Impute Missing Values\nThe approach is to substitue mean of the bmi by the target variable - Potability"}}