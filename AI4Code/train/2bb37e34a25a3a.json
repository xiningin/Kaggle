{"cell_type":{"43756462":"code","3f6226bb":"code","6ebf1d65":"code","15d092a7":"code","7a3b9d88":"code","d91a6511":"code","68062b7e":"code","b62d5f7c":"code","1d43c4ae":"code","1286c2eb":"code","599e9a01":"code","1f5411e3":"code","41ad72aa":"code","7ebcef90":"code","d3ac6adf":"code","349f3778":"code","032e9f84":"code","47da4bfc":"code","22c3faad":"code","091cd031":"code","f4e602a0":"code","edeb7ba7":"code","6710272c":"markdown"},"source":{"43756462":"# importing libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","3f6226bb":"data = pd.read_csv('..\/input\/diabetes-data\/pima-data.csv')","6ebf1d65":"data.shape","15d092a7":"data.info()","7a3b9d88":"data.head()","d91a6511":"# Histogram\ncolumns = list(data)[0:-1]\ndata[columns].hist(stacked = False, bins = 100, figsize = (15, 30), layout = (14,2))","68062b7e":"sns.barplot(x= data.bmi.value_counts().index, y = data.bmi.value_counts().values)\nplt.xlabel('BMI')\nplt.ylabel(\" COUNT\")\nplt.show()","b62d5f7c":"sns.barplot(x= data.num_preg.value_counts().index, y = data.num_preg.value_counts().values)\nplt.xlabel('num_preg')\nplt.ylabel(\" COUNT\")\nplt.show()","1d43c4ae":"sns.countplot(data.diabetes)\nplt.xlabel('diabetes')\nplt.ylabel('Count')\nplt.show()","1286c2eb":"# correalation matrix\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize= (15,15))\ng = sns.heatmap(data[top_corr_features].corr(), annot= True, cmap = 'RdYlGn')","599e9a01":"#changing boolean to number\n\ndiabetes_map = {True: 1, False: 0}\ndata['diabetes']= data['diabetes'].map(diabetes_map)","1f5411e3":"data.head()","41ad72aa":"data.info()","7ebcef90":"n_true= len(data.loc[data['diabetes']== True])\nn_false= len(data.loc[data['diabetes']== False])\n\nprint('Number of True Cases: {0}({1:2.2f}%)'.format(n_true, (n_true\/(n_true+n_false))*100))\nprint('Number of False Cases: {0}({1:2.2f}%)'.format(n_false, (n_false\/(n_true+n_false))*100))","d3ac6adf":"#Start Building the models\nfrom sklearn.model_selection import train_test_split","349f3778":"#spliting train and test data\nx= data.drop(['diabetes'], axis= 1)\ny= data.diabetes.values\n\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state= 0)","032e9f84":"from sklearn.impute import SimpleImputer\n\nfill_values = SimpleImputer(missing_values=0, strategy = 'mean')\n\nX_train = fill_values.fit_transform(X_train)\nX_test = fill_values.fit_transform(X_test)","47da4bfc":"# support vector\n\nfrom sklearn.svm import SVC\nsvm = SVC(random_state= 1)\nsvm.fit(X_train, y_train)\nprint(\"SVC accuracy: {: .2f}%\".format(svm.score(X_test, y_test)*100))","22c3faad":"# Naive Bayes\n\nfrom sklearn.naive_bayes import GaussianNB\nnb= GaussianNB()\nnb.fit(X_train, y_train)\nprint(\"NB accuracy: {: .2f}%\".format(nb.score(X_test, y_test)*100))","091cd031":"#KNN model\n\nfrom sklearn.neighbors import KNeighborsClassifier\nknn= KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\nprint(\"KNN accuracy: {: .2f}%\".format(knn.score(X_test, y_test)*100))","f4e602a0":"# Random Forest \n\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 1000, random_state = 1)\nrf.fit(X_train, y_train)\nprint(\"Random Forest accuracy: {: .2f}%\".format(rf.score(X_test, y_test)*100))","edeb7ba7":"# XG boost\n\nimport xgboost\nxg = xgboost.XGBClassifier()\nxg.fit(X_train, y_train)\nprint(\" XG boost: {: .2f}%\".format(xg.score(X_test, y_test)*100))","6710272c":"# Predict the diabetes based on diagnostic measures\n\n#### About DATA:\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\n\n\nThe datasets consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.\n\n\nColumns\n> 1.Pregnancies = Number of times pregnant\n\n> 2.Glucose = Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n\n> 3.BloodPressure = Diastolic blood pressure (mm Hg)\n\n> 4.SkinThickness = Triceps skin fold thickness (mm)\n\n> 5.Insulin = 2-Hour serum insulin (mu U\/ml)\n\n> 6.BMI = Body mass index (weight in kg\/(height in m)^2)\n\n> 7.DiabetesPedigreeFunction = Diabetes pedigree function\n\n> 8.Age = Age (years)\n\n> 9.Outcome = Class variable (0 or 1) 268 of 768 are 1, the others are 0"}}