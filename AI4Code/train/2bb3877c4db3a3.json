{"cell_type":{"9c680739":"code","8a6d8d69":"code","8ba42b9d":"code","0d80d0c8":"code","8c50c90f":"code","52944efc":"code","a0d63491":"code","dd3448a3":"code","ed5ab546":"code","8f590348":"code","9e7e3b2e":"code","cfe348c6":"code","f7b4a364":"code","87142e79":"code","4520331c":"code","dfae969a":"code","0553a3c5":"code","4fe1b7f1":"code","2dd20176":"code","da605ca6":"code","11f18c56":"code","923e47ef":"code","dcd2c758":"code","d18db900":"code","b727e124":"code","8d68e4f7":"code","f0a094e9":"code","f56b8b65":"code","5b1a9648":"code","4844170f":"code","98e447f0":"code","80074ad8":"code","b0caf71c":"code","5512c7aa":"code","bab2657c":"code","47a883c0":"code","741512e4":"code","6b5aa254":"code","7840cd95":"code","f8aa6333":"code","66c02d48":"code","305d7bbc":"code","82165cbc":"code","92f21480":"code","1ca846f8":"code","830fae11":"code","5c2ec2c4":"code","4ffffb8b":"code","68e97331":"code","7942e45f":"code","3b14aa93":"code","4290089b":"code","8d320723":"code","3392aa95":"code","cbd6eb72":"code","cc67d31f":"code","7213bf42":"code","3824b523":"code","bb967cfc":"code","8594ec06":"code","cc6fd00e":"code","4b317dfd":"code","ace8e27d":"code","0b9ecf12":"code","d1f756c3":"code","4bc57cac":"code","c0d22fa5":"code","5c74992d":"code","85dd2edb":"code","b7806e58":"code","24e316b0":"code","55e04df1":"code","0dbc12a4":"code","627bb25d":"markdown","1c27a735":"markdown","367d25c8":"markdown","a60295c9":"markdown","a873f538":"markdown","a18aa242":"markdown","c290f9e6":"markdown","2d5213af":"markdown","b99bb9d9":"markdown","7663d3c2":"markdown","8dc785e9":"markdown","d0fb6d23":"markdown","28987afd":"markdown","7a166d59":"markdown","13e96514":"markdown","9041cb4c":"markdown","59aa5bb6":"markdown","48b53b84":"markdown","31218b5c":"markdown","66f63adf":"markdown","72bd0492":"markdown","66254484":"markdown","ba3b21b1":"markdown","56a55267":"markdown","01da3ca5":"markdown","3999deda":"markdown","2dfffbd8":"markdown","79faa759":"markdown","d1f3ddeb":"markdown","73e7ead5":"markdown","dc55ca1e":"markdown","3597b25d":"markdown","de231e04":"markdown","45e328da":"markdown","a319bda7":"markdown","036870e3":"markdown","b4130cab":"markdown","e16631d7":"markdown"},"source":{"9c680739":"import numpy as np\nimport pandas as pd\n\nseries = pd.Series(['aardvark', 'artichoke', np.nan, 'avocado'])\n\nseries","8a6d8d69":"series.isnull()","8ba42b9d":"series[0] = None\n\nseries","0d80d0c8":"series.isnull()","8c50c90f":"series = pd.Series([1, np.nan, 3.5, np.nan, 7])\n\nseries","52944efc":"series[series.notnull()]","a0d63491":"series.dropna()","dd3448a3":"datafram = pd.DataFrame([[1., 6.5, 3.],\n                         [1., np.nan, np.nan],\n                         [np.nan, np.nan, np.nan],\n                         [np.nan, 6.5, 3.]])\ndatafram","ed5ab546":"datafram.dropna()","8f590348":"datafram.dropna(how='all')","9e7e3b2e":"datafram[3] = None\ndatafram[4] = 5\n\ndatafram","cfe348c6":"datafram.dropna(axis=1)","f7b4a364":"datafram.dropna(how='all', axis=1)","87142e79":"datafram","4520331c":"datafram.fillna(0.)","dfae969a":"datafram","0553a3c5":"datafram.fillna({\n    0: np.mean(datafram[0]),\n    1: np.mean(datafram[1]),\n    2: np.mean(datafram[2]),\n    3: -1\n})","4fe1b7f1":"datafram","2dd20176":"datafram.fillna(datafram.mean(), inplace=True)\n\ndatafram","da605ca6":"datafram = pd.DataFrame([[1., 6.5, 3., np.nan, 5],\n                         [1., np.nan, np.nan, np.nan, 5],\n                         [np.nan, np.nan, np.nan, np.nan, 5],\n                         [np.nan, 6.5, 3., np.nan, 5]])\ndatafram","11f18c56":"datafram.fillna(method='ffill')","923e47ef":"datafram.fillna(method='ffill', limit=1)","dcd2c758":"datafram","d18db900":"datafram.fillna(datafram.mean()*2)","b727e124":"datafram = pd.DataFrame({'k1': ['one', 'two'] * 3 + ['two'],\n                         'k2': [1, 1, 2, 3, 3, 4, 4]})\n\ndatafram","8d68e4f7":"datafram.duplicated()","f0a094e9":"datafram.drop_duplicates()","f56b8b65":"datafram['k3'] = np.arange(7)\n\ndatafram","5b1a9648":"datafram.duplicated()","4844170f":"datafram.duplicated(['k1', 'k2'])","98e447f0":"datafram.duplicated(['k1'])","80074ad8":"datafram.drop_duplicates(['k1'])","b0caf71c":"datafram = pd.DataFrame({'food': ['bacon', 'pulled pork', 'bacon',\n                                         'Pastrami', 'corned beef', 'Bacon',\n                                         'pastrami', 'honey ham', 'nova lox'],\n                                'ounces': [4, 3, 12, 6, 7.5, 8, 3, 5, 6]})\n\ndatafram","5512c7aa":"meat_to_animal = {\n'bacon': 'pig',\n'pulled pork': 'pig',\n'pastrami': 'cow',\n'corned beef': 'cow',\n'honey ham': 'pig',\n'nova lox': 'salmon'\n}","bab2657c":"datafram['food'] = datafram['food'].str.lower()\n\ndatafram","47a883c0":"datafram['animal'] = datafram['food'].map(meat_to_animal)\n\ndatafram","741512e4":"series = pd.Series([1., -999., 2., -999., -1000., 3.])\n\nseries","6b5aa254":"series.replace(-999, np.nan)","7840cd95":"series","f8aa6333":"series.replace([-999, -1000], np.nan)","66c02d48":"series","305d7bbc":"series.replace([-999, -1000], [9, 10])","82165cbc":"datafram = pd.DataFrame(np.arange(12).reshape((3, 4)),\n                        index=['Ohio', 'Colorado', 'New York'],\n                        columns=['one', 'two', 'three', 'four'])\ndatafram","92f21480":"datafram.index = datafram.index.map(lambda row: row.upper())\n\ndatafram","1ca846f8":"datafram.rename(index=str.title, columns=str.upper)","830fae11":"datafram","5c2ec2c4":"datafram.rename(index={'OHIO': 'uOttawa'},\n                columns={'one': 'ONE'})","4ffffb8b":"datafram","68e97331":"datafram.rename(index={'OHIO': 'uOttawa'},\n                columns={'one': 'ONE'}, inplace=True)\n\ndatafram","7942e45f":"ages = [15,16,17,18,20,22,25,24,29,30,33,35,40,44,50]\n\nages","3b14aa93":"bins = [14,19,29,40,100]\n\ngroups = pd.cut(ages, bins)\n\ngroups.categories","4290089b":"groups.codes","8d320723":"for i in range(len(ages)):\n    print(\"age: \"+str(ages[i])+\" belong to: \"+str(groups[i]))\n    print(\"=\"*50)","3392aa95":"print(pd.value_counts(groups))\n\nprint(\"=\"*50)\n\nprint(pd.value_counts(groups.codes))","cbd6eb72":"groups.categories","cc67d31f":"groups = pd.cut(ages, bins, right=False)\n\ngroups.categories","7213bf42":"group_names = ['Youth', 'YoungAdult', 'MiddleAged', 'Senior']\n\ngroups = pd.cut(ages, bins, right=False, labels=group_names)\n\ngroups.categories","3824b523":"ages","bb967cfc":"groups = pd.cut(ages, 2)\n\ngroups.categories","8594ec06":"groups.codes","cc6fd00e":"groups = pd.cut(ages, 2, precision=1)\n\ngroups.categories","4b317dfd":"groups.codes","ace8e27d":"pd.value_counts(groups)","0b9ecf12":"groups = pd.qcut(ages, 2, precision=1)\n\ngroups.categories","d1f756c3":"groups.codes","4bc57cac":"pd.value_counts(groups)","c0d22fa5":"groups = pd.qcut(ages, [0, 0.5, 1.])\n\ngroups.categories","5c74992d":"pd.value_counts(groups)","85dd2edb":"datafram = pd.DataFrame({'key': ['b', 'b', 'a', 'c', 'a', 'b'],\n                         'data1': range(6)})\n\ndatafram","b7806e58":"pd.get_dummies(datafram['key'])","24e316b0":"pd.get_dummies(datafram)","55e04df1":"dummies = pd.get_dummies(datafram['key'], prefix='dummy')\n\ndummies","0dbc12a4":"datafram_with_dummy = datafram[['data1']].join(dummies)\n\ndatafram_with_dummy","627bb25d":"<hr \/>\n\nSimilar to cut you can pass your own quantiles. (numbers between 0 and 1, inclusive)","1c27a735":"<hr \/>\n\nIf you want to create a transformed version of a dataset without modifying the original, a useful method is\n`rename`.","367d25c8":"<hr \/>\n\nThere is work ongoing in the pandas project to improve the internal details of how missing data is handled, but\nthe user API functions, like `pandas.isnull`, abstract away many of the annoying details.\n\n## 1.1 Filtering Out Missing Data\n\nThere are a few ways to filter out missing data. While you always have the option to do it by hand using\npandas.isnull and boolean indexing,<br>The `dropna` can be helpful. On a Series, it returns the Series with only the non-null data and index values.","a60295c9":"<hr \/>\n\n## 1.2 Filling In Missing Data\n\nRather than filtering out missing data (and potentially discarding other data along with it), you may want to fill in the \u201choles\u201d in any number of ways. For most purposes, the `fillna` method is the workhorse function to use.\nCalling fillna with a constant replaces missing values with that value.","a873f538":"<hr \/>\n\n## 2.4 Renaming Axis Indexes\n\nLike values in a Series, axis labels can be similarly transformed by a function or mapping of some form to\nproduce new, differently labeled objects. You can also modify the axes in-place without creating a new data\nstructure.\n\nHere\u2019s a simple example.","a18aa242":"<hr \/>\n\nYou can also pass your own bin names by passing a list or array to the **labels** option.","c290f9e6":"<hr \/>\n\nCalling fillna with a dict, you can use a different fill value for each column.","2d5213af":"<hr \/>\n\nSuppose you wanted to add a column indicating the type of animal that each food came from. Let\u2019s write down\na mapping of each distinct meat type to the kind of animal.","b99bb9d9":"<hr \/>\n\nIf you pass an integer number of bins to cut instead of explicit bin edges, it will compute equal length bins\nbased on the minimum and maximum values in the data. Consider the case of some uniformly distributed data\nchopped into fourths.","7663d3c2":"<hr \/>\n\n## 2.5 Discretization and Binning\n\nContinuous data is often discretized or otherwise separated into \u201cbins\u201d for analysis. Suppose you have data\nabout a group of people in a study, and you want to group them into discrete age buckets.","8dc785e9":"<hr \/>\n\nRelatedly, drop_duplicates returns a DataFrame where the duplicated array is False.","d0fb6d23":"# Gentle Introduction To Pandas - Part 2\n\n<hr \/>\n\n![data cleaning](https:\/\/assets-global.website-files.com\/5def931741c660234d9a1d42\/5e73a3e84d799433c0f75320_data-cleaning.jpg)\n\n<a href='https:\/\/www.duedil.com\/blogs\/data-cleansing-best-practices'>image source<\/a>\n\n# Pandas: Data Cleaning and Preparation\n\nDuring the course of doing data analysis and modeling, a significant amount of time is spent on data\n<br>preparation: **loading**, **cleaning**, **transforming**, and **rearranging**. Such tasks are often reported to take up 80% or more of an analyst\u2019s time. Sometimes the way that data is stored in files or databases is not in the right format for a particular task.Fortunately, pandas, along with the built-in Python language features, provides you with a high-level, flexible, and fast set of tools to enable you to manipulate data into the right form.\n\nIn this notebook I discuss tools for missing data, duplicate data, string manipulation, and some other analytical\ndata transformations.\n\n# 1. Handling Missing Data\n\nMissing data occurs commonly in many data analysis applications. One of the goals of pandas is to make\nworking with missing data as painless as possible. For example, all of the descriptive statistics on pandas\nobjects exclude missing data by default.\n\nThe way that missing data is represented in pandas objects is somewhat imperfect, but it is functional for a lot\nof users. For numeric data, pandas uses the floating-point value NaN (Not a Number) to represent missing\ndata. We call this a sentinel value that can be easily detected.","28987afd":"<hr \/>\n\nIf you want to replace multiple values at once, you instead pass a list and then the substitute value.","7a166d59":"<hr \/>\n\nTo use a different replacement for each value, pass a list of substitutes.","13e96514":"<hr \/>\n\nUsing map is a convenient way to perform element-wise transformations and other data cleaning\u2013related\noperations.\n\n## 2.3 Replacing Values\n\nFilling in missing data with the fillna method is a special case of more general value replacement. As you\u2019ve\nalready seen, `map` can be used to modify a subset of values in an object but **replace** provides a simpler and\nmore flexible way to do so. Let\u2019s consider this Series.","9041cb4c":"<hr \/>\n\nA closely related function, `qcut`, bins the data based on sample quantiles. Depending on the distribution of the\ndata, using cut will not usually result in each bin having the same number of data points. Since qcut uses\nsample quantiles instead, by definition you will obtain roughly equal-size bins","59aa5bb6":"<hr \/>\n\nWith DataFrame objects, things are a bit more complex. You may want to drop rows or columns that are all NA\nor only those containing any NAs. dropna by default drops any **row** containing a missing value.","48b53b84":"<hr \/>\n\nNotably, rename can be used in conjunction with a dict-like object providing new values for a subset of the axis\nlabels.","31218b5c":"<hr \/>\n\nWith fillna you can do lots of other things with a little creativity. For example, you might pass the mean or\nmedian value of a Series.","66f63adf":"<hr \/>\n\n## 2.6 Computing Indicator\/Dummy Variables\n\nAnother type of transformation for statistical modeling or machine learning applications is converting a\ncategorical variable into a \u201cdummy\u201d or \u201cindicator\u201d matrix. If a column in a DataFrame has **k distinct values**, you would derive a matrix or DataFrame with k columns\ncontaining **all 1s and 0s**.\n\npandas has a get_dummies function for doing this, though devising one yourself is not difficult. Let\u2019s return to an earlier example DataFrame.","72bd0492":"<hr \/>\n\nThe **precision=1** option limits the decimal precision to 1 digits.","66254484":"<hr \/>\n\n## 2.2 Transforming Data Using a Function or Mapping\n\nFor many datasets, you may wish to perform some transformation based on the values in an array, Series, or\ncolumn in a DataFrame. Consider the following hypothetical data collected about various kinds of meat.","ba3b21b1":"<hr \/>\n\n**Let\u2019s divide these into bins of:**\n\n1. 15 to 19\n2. 20 to 29\n3. 30 to 40\n4. more tahn 40\n\nTo do so, you have to use `cut`, a function in pandas.","56a55267":"<hr \/>\n\n`fillna` returns a new object, but you can modify the existing object in-place","01da3ca5":"<hr \/>\n\nThe `map` method on a Series accepts a **function** or **dict-like object containing a mapping**, but here we have a\nsmall problem in that some of the meats are capitalized and others are not. Thus, we need to convert each\nvalue to lowercase using the `str.lower` Series method.","3999deda":"<hr \/>\n\nAS we see in above cell that parenthesis means that the side is open, while the square\nbracket means it is closed (inclusive).<br>You can change which side is closed by passing **right=False**.","2dfffbd8":"<hr \/>\n\nThe DataFrame method duplicated returns a boolean Series indicating whether each row is a duplicate (has\nbeen observed in a previous row) or not.","79faa759":"<hr \/>\n\nIn pandas, we\u2019ve adopted a convention used in the R programming language by referring to missing data as\nNA, which stands for not available. In statistics applications, NA data may either be data that does not exist or\nthat exists but was not observed (through problems with data collection, for example). When cleaning up data\nfor analysis, it is often important to do analysis on the missing data itself to identify data collection problems or potential biases in the data caused by missing data.\n\nThe built-in Python None value is also treated as NA in object arrays.","d1f3ddeb":"<hr \/>\n\n# 2. Data Transformation\n\nSo far in this notebook we\u2019ve been concerned with rearranging data. Filtering, cleaning, and other\ntransformations are another class of important operations.\n\n## 2.1 Removing Duplicates\n\nDuplicate rows may be found in a DataFrame for any number of reasons.","73e7ead5":"<hr \/>\n\nIn some cases, you may want to add a prefix to the columns in the indicator DataFrame, which can then be\nmerged with the other data. `get_dummies` has a **prefix** argument for doing this.","dc55ca1e":"<hr \/>\n\nPassing `how='all'` will only drop rows that are **all** NA.","3597b25d":"<hr \/>\n\nThe -999 values might be sentinel values for missing data. To replace these with NA values that pandas\nunderstands,<br>We can use replace, producing a new Series (unless you pass inplace=True).","de231e04":"<hr \/>\n\nBoth of these methods by default consider **all** of the columns; alternatively, you can specify any subset of them to detect duplicates. Suppose we had an additional column of values and wanted to filter duplicates only based on the **k1** column.","45e328da":"<hr \/>\n\n**Note**\n\n`rename` saves you from the chore of copying the DataFrame manually and assigning to its index and columns\nattributes. Should you wish to modify a dataset in-place, pass **inplace=True**","a319bda7":"## Please If you find this Notebook useful, Upvote it to help others see it \ud83d\ude42","036870e3":"<hr \/>\n\nTo drop columns in the same way, pass `axis=1`.","b4130cab":"<hr \/>\n\nLike a Series, the axis indexes have a `map` method.","e16631d7":"<hr \/>\n\nThe same interpolation methods available for reindexing can be used with fillna."}}