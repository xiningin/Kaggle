{"cell_type":{"79f0979c":"code","d6fad68e":"code","9c053aac":"code","b1161d4d":"code","cce03d43":"code","0b21c506":"code","78cd081b":"code","ab455029":"code","4c738349":"code","6c56409f":"code","35792a88":"code","e5be03db":"code","0c458e65":"code","b120c4b9":"code","b7ae1c2b":"code","a1b94520":"code","2f1a783c":"code","cf979656":"code","eb3bd7a4":"code","0c89b94a":"code","22376837":"code","936b3d93":"code","be82ef49":"code","cfd32b1c":"code","d89d4eb4":"markdown","3dd3bae9":"markdown","6b9bf1da":"markdown","9dd24c53":"markdown","c53c5162":"markdown","f6376e9d":"markdown","2cf1d55a":"markdown","6b4712a6":"markdown","b6169f51":"markdown"},"source":{"79f0979c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#Basic libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport random \nimport matplotlib.pyplot as plt\nsns.set(color_codes=True)\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Removes the limit for the number of displayed columns\npd.set_option(\"display.max_columns\", None)\n# Sets the limit for the number of displayed rows\npd.set_option(\"display.max_rows\", 200)\n\n# Library to split data\nfrom sklearn.model_selection import train_test_split\n\n# To build model for prediction\nfrom sklearn.linear_model import LogisticRegression\n\n# To get diferent metric scores\nfrom sklearn.metrics import (\n    f1_score,\n    accuracy_score,\n    recall_score,\n    precision_score,\n    confusion_matrix,\n    roc_auc_score,\n    plot_confusion_matrix,\n    precision_recall_curve,\n    roc_curve,\n    make_scorer,\n    classification_report\n)\n\n# Libraries to build decision tree classifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\n\n# To tune different models\nfrom sklearn.model_selection import GridSearchCV\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d6fad68e":"df=pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf.head()","9c053aac":"#checking the file layout\ndf.info()","b1161d4d":"#shape of the file\n\ndf.shape","cce03d43":"#any nulls in file\ndf.isnull().sum()","0b21c506":"#any dups in file\ndf.duplicated().sum()","78cd081b":"# file statistics\ndf.describe().T","ab455029":"#unique value count in file\ndf.nunique()","4c738349":"#checking to see if any of the columns have negatives\n(df<0).sum()","6c56409f":"#For Univariate analysis, let's write a function to combine boxplot and histplot in same space one below other \n#so that we could visualize outliers & distributions\n\ndef hist_box_plot(feature, figsize=(10, 6), bins=None):\n    \"\"\"Boxplot and histogram combined. Input is Numerical feature\n    feature: 1-d feature array\n    figsize: size of fig (default (9,8))\n    bins: number of bins (default None \/ auto)\n    \"\"\"\n    f2, (ax_box2, ax_hist2) = plt.subplots(\n                                            nrows=2,  # Number of rows of the subplot grid= 2\n                                            sharex=True,  # x-axis will be shared among all subplots\n                                            gridspec_kw={\"height_ratios\": (0.25, 0.75)},\n                                            figsize=figsize,\n                                          )  # creating the 2 subplots\n    #f2.suptitle('Univariate Analysis of {}'.format(col),fontsize=14,fontweight='bold')\n    # For boxplot. Marker indicates mean value of column.  \n    sns.boxplot(feature, ax=ax_box2, showmeans=True, color=\"orange\")  \n    \n    # For histogram\n    sns.distplot(feature, kde=True, ax=ax_hist2, bins=bins, color='indigo')\n    \n    ax_hist2.axvline(feature.mean(), color=\"green\", linestyle=\"--\", label='Mean')  # Add mean to the histogram\n    ax_hist2.axvline(feature.median(), color=\"red\", linestyle=\"-\", label='Median')  # Add median to the histogram\n    \n    plt.legend() #display legend","35792a88":"# Pie chart\ndef pie_plot(data, z):\n    \"\"\"\n    This function will plot pie chart and displays legend, adds % on each pie\n    \"\"\"\n    plt.figure(figsize=(6,5))\n    pie_data=data[z].value_counts()        #get the unique value counts of the variable which is to be plot\n    colors=['skyblue','lightpink','gold','blue','lavender']  #define the colors you want\n    if z=='Education':\n        explode = (0, 0.1, 0)      #to allow wedges to standout. Education has three unique values\n    else:\n        explode = (0, 0.1)        # rest of other boolean variables have only 2 values 0 & 1\n    labl_text=data[z].unique()    #set the labels\n    plt.title(z, fontweight='bold',fontsize=15) #Chart title\n    plt.pie(pie_data, \n            labels=labl_text, \n            explode=explode,      #set the predefined explode parameter\n            autopct='%1.2f%%',    # display % on each pie\n            shadow=True,          # shadow to appear for each widge\n            frame=True,           # visible frame for pie chart\n            colors=colors,\n            wedgeprops={'linewidth': 1.5, 'edgecolor': 'white'},  #setting up wedge properties\n            textprops={'size': 'x-large'}          #textsize in pie\n            ) \n    plt.tight_layout()\n    plt.legend()\n    plt.show()\n","e5be03db":"df.columns","0c458e65":"hist_box_plot(df['Pregnancies'])\nhist_box_plot(df['Glucose'])\nhist_box_plot(df['BloodPressure'])\nhist_box_plot(df['SkinThickness'])\nhist_box_plot(df['Insulin'])\nhist_box_plot(df['BMI'])\nhist_box_plot(df['DiabetesPedigreeFunction'])\nhist_box_plot(df['Age'])\npie_plot(df, 'Outcome')","b120c4b9":"sns.pairplot((df), hue='Outcome',palette='rocket_r')\nplt.show()","b7ae1c2b":"#Check the correlation of numeric variables and generate heatmap\nplt.figure(figsize = (10,6))\n#create your own palette to show positive values in blue and negative values in red\ncmap=sns.diverging_palette(10, 255, as_cmap=True)\n#plot heatmap\nsns.heatmap(df.corr(), annot=True, cmap=cmap, vmin=-1, vmax=1)\nplt.title('Heatmap', fontweight='bold')         #Chart title\n\n#Correlation matrix\ndf.corr()","a1b94520":"#converting Outcome to categorical variable\ndf['Outcome']=df['Outcome'].astype('category')\n\ndf.info()","2f1a783c":"plt.figure(figsize=(15,6))\nsns.countplot(x='Age',data=df,palette='rocket',hue='Outcome',dodge=False).set(title='Age vs Outcome')  \nplt.show()","cf979656":"plt.figure(figsize=(15,6))\nsns.countplot(x='Pregnancies',data=df,palette='rocket',hue='Outcome',dodge=False).set(title='Pregnancies vs Outcome')  \nplt.show()","eb3bd7a4":"plt.figure(figsize=(15,6))\nsns.countplot(x='Glucose',data=df,palette='rocket',hue='Outcome',dodge=False).set(title='Glucose vs Outcome')  \nplt.show()","0c89b94a":"plt.figure(figsize=(15,6))\nsns.countplot(x='BloodPressure',data=df,palette='rocket',hue='Outcome',dodge=False).set(title='BloodPressure vs Outcome')  \nplt.show()","22376837":"plt.figure(figsize=(15,6))\nsns.countplot(x='SkinThickness',data=df,palette='rocket',hue='Outcome',dodge=False).set(title='SkinThickness vs Outcome')  \nplt.show()\n","936b3d93":"plt.figure(figsize=(15,6))\nsns.countplot(x='Insulin',data=df,palette='rocket',hue='Outcome',dodge=False).set(title='Insulin vs Outcome')  \nplt.show()\n","be82ef49":"plt.figure(figsize=(15,6))\nsns.countplot(x='DiabetesPedigreeFunction',data=df,palette='rocket',hue='Outcome',dodge=False).set(title='DiabetesPedigreeFunction vs Outcome')  \nplt.show()\n","cfd32b1c":"plt.figure(figsize=(15,6))\nsns.countplot(x='BMI',data=df,palette='rocket',hue='Outcome',dodge=False).set(title='BMI vs Outcome')  \nplt.show()\n","d89d4eb4":"#### Pairplot","3dd3bae9":"#### Heatmap and correlation","6b9bf1da":"* All the various parameters - Pregancies, Glucose, Bloodpressure,SkinThickness, Insulin, BMI, DiabetesPedigreeFunction has integer values and data looks like valid. Some of the columns are skewed\n* Patients age range from 21 thru' 80. Most of them are of 29 yrs","9dd24c53":"# **************************\n# EDA\n# ***********************\n\n### Univariate Analysis","c53c5162":"### Bivariate Analysis","f6376e9d":"No dups in the file","2cf1d55a":"none of the columns have negative values","6b4712a6":"dataset has 768 records and 9 columns","b6169f51":"No Nulls in the file"}}