{"cell_type":{"fb1b2714":"code","221d2aca":"code","77e5a535":"code","be7cd30f":"code","0ed3e432":"code","27b81979":"code","7382184c":"code","21677e65":"code","79acdc2f":"code","d4b0ccd8":"code","47061729":"code","0d6cf8f9":"code","5ef1eb4c":"code","348d767a":"code","99fd3cd1":"code","ef3348cc":"code","4b361c05":"code","17a404f4":"code","eb288b1a":"code","28bda5bb":"code","c9f0e61e":"code","e3613e4d":"code","52909523":"code","357a296a":"code","ddcc8ce8":"code","ca956248":"code","343570e3":"markdown","22d4c9c6":"markdown","98947462":"markdown","d94058e8":"markdown","27476a8a":"markdown","f38d5b2d":"markdown","c02292b3":"markdown"},"source":{"fb1b2714":"import os\nimport gc\nimport glob\nimport joblib\nimport numpy.matlib\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom sklearn.cluster import KMeans\nfrom joblib import Parallel, delayed\nfrom IPython.core.display import display\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import QuantileTransformer\n\nimport lightgbm as lgb\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras import backend as K\nfrom keras.backend import sigmoid\nfrom keras.layers import Activation\nfrom keras.utils.generic_utils import get_custom_objects\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingRegressor\n\nnp.random.seed(42)\ntf.random.set_seed(42)","221d2aca":"def calc_wap1(df):\n    wap = (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1']) \/ (df['bid_size1'] + df['ask_size1'])\n    return wap\n\n\ndef calc_wap2(df):\n    wap = (df['bid_price2'] * df['ask_size2'] + df['ask_price2'] * df['bid_size2']) \/ (df['bid_size2'] + df['ask_size2'])\n    return wap\n\n\ndef calc_wap3(df):\n    wap = (df['bid_price1'] * df['bid_size1'] + df['ask_price1'] * df['ask_size1']) \/ (df['bid_size1'] + df['ask_size1'])\n    return wap\n\n\ndef calc_wap4(df):\n    wap = (df['bid_price2'] * df['bid_size2'] + df['ask_price2'] * df['ask_size2']) \/ (df['bid_size2'] + df['ask_size2'])\n    return wap\n\n\ndef calc_depth(df):\n    depth = df['bid_price1'] * df['bid_size1'] + df['ask_price1'] * df['ask_size1'] + df['bid_price2'] * df[\n               'bid_size2'] + df['ask_price2'] * df['ask_size2']\n    return depth\n\n\ndef calc_dispersion(df):\n    bspread = df['bid_price1'] - df['bid_price2']\n    aspread = df['ask_price2'] - df['ask_price1']\n    bmid = (df['bid_price1'] + df['ask_price1'])\/2  - df['bid_price1']\n    bmid2 = (df['bid_price1'] + df['ask_price1'])\/2  - df['bid_price2']\n    amid = df['ask_price1'] - (df['bid_price1'] + df['ask_price1'])\/2\n    amid2 = df['ask_price2'] - (df['bid_price1'] + df['ask_price1'])\/2\n    bdisp = (df['bid_size1']*bmid + df['bid_size2']*bspread)\/(df['bid_size1']+df['bid_size2'])\n    bdisp2 = (df['bid_size1']*bmid + df['bid_size2']*bmid2)\/(df['bid_size1']+df['bid_size2'])\n    adisp = (df['ask_size1']*amid + df['ask_size2']*aspread)\/(df['ask_size1']+df['ask_size2'])      \n    adisp2 = (df['ask_size1']*amid + df['ask_size2']*amid2)\/(df['ask_size1']+df['ask_size2'])\n    return (bdisp + adisp)\/2\n\n\ndef calc_slope(df):\n    v0 = (df['bid_size1']+df['ask_size1'])\/2\n    p0 = (df['bid_price1']+df['ask_price1'])\/2\n    slope_bid = ((df['bid_size1']\/v0)-1)\/abs((df['bid_price1']\/p0)-1)+(\n                (df['bid_size2']\/df['bid_size1'])-1)\/abs((df['bid_price2']\/df['bid_price1'])-1)\n    slope_ask = ((df['ask_size1']\/v0)-1)\/abs((df['ask_price1']\/p0)-1)+(\n                (df['ask_size2']\/df['ask_size1'])-1)\/abs((df['ask_price2']\/df['ask_price1'])-1)\n    return (slope_bid+slope_ask)\/2\n\n\ndef log_return(series):\n    return np.log(series).diff()\n\n\ndef realized_volatility(series):\n    return np.sqrt(np.sum(series**2))\n\n\ndef historical_volatility(series):\n    return np.sqrt(np.sum(series**2)\/len(series))\n\n\ndef count_unique(series):\n    return len(np.unique(series))\n\n    \ndef tendency(price, vol):    \n    df_diff = np.diff(price)\n    val = (df_diff\/price[1:])*100\n    power = np.sum(val*vol[1:])\n    return(power)\n    \n    \ndef read_train_test():\n    train = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\n    test = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/test.csv')\n    train['row_id'] = train['stock_id'].astype(str) + '-' + train['time_id'].astype(str)\n    test['row_id'] = test['stock_id'].astype(str) + '-' + test['time_id'].astype(str)\n    print(f\"train: {train.shape} \\ntest: {test.shape}\")\n    return train, test\n\n\ndef rmspe(y_true, y_pred):\n    return np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true)))\n\n\ndef feval_rmspe(y_pred, lgb_train):\n    y_true = lgb_train.get_label()\n    return 'RMSPE', rmspe(y_true, y_pred), False\n\n\ndef root_mean_squared_per_error(y_true, y_pred):\n    return K.sqrt(K.mean(K.square( (y_true - y_pred)\/ y_true )))","77e5a535":"def book_preprocessor(file_path):\n    df = pd.read_parquet(file_path)\n\n    df['wap1'] = calc_wap1(df)\n    df['wap2'] = calc_wap2(df)\n    df['wap3'] = calc_wap3(df)\n    df['wap4'] = calc_wap4(df)\n    \n    df['depth'] = calc_depth(df)\n    df['slope'] = calc_slope(df)\n    df['dispersion'] = calc_dispersion(df)\n    \n    df['log_return1'] = df.groupby(['time_id'])['wap1'].apply(log_return)\n    df['log_return2'] = df.groupby(['time_id'])['wap2'].apply(log_return)\n    df['log_return3'] = df.groupby(['time_id'])['wap3'].apply(log_return)\n    df['log_return4'] = df.groupby(['time_id'])['wap4'].apply(log_return)\n    \n    wap1_mean = df['wap1'].mean()\n    df['waph1'] = df['wap1'].apply(lambda x: x - wap1_mean)\n    \n    df['wap_balance'] = abs(df['wap1'] - df['wap2'])\n    df['price_spread'] = (df['ask_price1'] - df['bid_price1']) \/ ((df['ask_price1'] + df['bid_price1']) \/ 2)\n    df['price_spread2'] = (df['ask_price2'] - df['bid_price2']) \/ ((df['ask_price2'] + df['bid_price2']) \/ 2)\n    df['bid_spread'] = df['bid_price1'] - df['bid_price2']\n    df['ask_spread'] = df['ask_price1'] - df['ask_price2']\n    df[\"bid_ask_spread\"] = abs(df['bid_spread'] - df['ask_spread'])\n    df['total_volume'] = (df['ask_size1'] + df['ask_size2']) + (df['bid_size1'] + df['bid_size2'])\n    df['volume_imbalance'] = abs((df['ask_size1'] + df['ask_size2']) - (df['bid_size1'] + df['bid_size2']))\n    \n    create_feature_dict = {\n        'wap1': [np.sum, np.std],\n        'wap2': [np.sum, np.std],\n        'wap3': [np.sum, np.std],\n        'wap4': [np.sum, np.std],\n        'log_return1': [realized_volatility, historical_volatility],\n        'log_return2': [realized_volatility],\n        'log_return3': [realized_volatility],\n        'log_return4': [realized_volatility],\n        'waph1': [historical_volatility], \n        'wap_balance': [np.sum, np.max],\n        'price_spread':[np.sum, np.max],\n        'price_spread2':[np.sum, np.max],\n        'bid_spread':[np.sum, np.max],\n        'ask_spread':[np.sum, np.max],\n        'total_volume':[np.sum, np.max],\n        'volume_imbalance':[np.sum, np.max],\n        \"bid_ask_spread\":[np.sum, np.max],\n        'depth':[np.sum, np.max],\n        'slope':[np.sum, np.max],\n        'dispersion':[np.sum, np.max]\n    }\n    \n    create_feature_dict_time = {\n        'log_return1': [realized_volatility],\n        'log_return2': [realized_volatility],\n        'log_return3': [realized_volatility],\n        'log_return4': [realized_volatility],\n        'waph1': [historical_volatility]\n    }\n    \n    def get_stats_window(fe_dict,seconds_in_bucket, add_suffix = False):\n        df_feature = df[df['seconds_in_bucket'] >= seconds_in_bucket].groupby(['time_id']).agg(fe_dict).reset_index()\n        df_feature.columns = ['_'.join(col) for col in df_feature.columns]\n        if add_suffix:\n            df_feature = df_feature.add_suffix('_' + str(seconds_in_bucket))\n        return df_feature\n    \n    \n    df_feature = get_stats_window(create_feature_dict,seconds_in_bucket = 0, add_suffix = False)\n    df_feature_500 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 500, add_suffix = True)\n    df_feature_400 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 400, add_suffix = True)\n    df_feature_300 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 300, add_suffix = True)\n    df_feature_200 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 200, add_suffix = True)\n    df_feature_100 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 100, add_suffix = True)\n\n    df_feature = df_feature.merge(df_feature_500, how = 'left', left_on = 'time_id_', right_on = 'time_id__500')\n    df_feature = df_feature.merge(df_feature_400, how = 'left', left_on = 'time_id_', right_on = 'time_id__400')\n    df_feature = df_feature.merge(df_feature_300, how = 'left', left_on = 'time_id_', right_on = 'time_id__300')\n    df_feature = df_feature.merge(df_feature_200, how = 'left', left_on = 'time_id_', right_on = 'time_id__200')\n    df_feature = df_feature.merge(df_feature_100, how = 'left', left_on = 'time_id_', right_on = 'time_id__100')\n    \n    df_feature.drop(['time_id__500','time_id__400', 'time_id__300', 'time_id__200','time_id__100'], axis = 1, inplace = True)\n    \n    stock_id = file_path.split('=')[1]\n    df_feature['row_id'] = df_feature['time_id_'].apply(lambda x: f'{stock_id}-{x}')\n    df_feature.drop(['time_id_'], axis = 1, inplace = True)\n    return df_feature","be7cd30f":"def trade_preprocessor(file_path):\n    df = pd.read_parquet(file_path)\n    df['log_return'] = df.groupby('time_id')['price'].apply(log_return)\n    df['amount'] = df['price'] * df['size']\n    \n    price_mean = df['price'].mean()\n    df['price1'] = df['price'].apply(lambda x: x - price_mean)\n\n    create_feature_dict = {\n        'log_return':[realized_volatility, historical_volatility],\n        'price1': [historical_volatility], \n        'seconds_in_bucket':[count_unique],\n        'size':[np.sum, np.max, np.min],\n        'order_count':[np.sum,np.max],\n        'amount':[np.sum,np.max,np.min],\n    }\n    \n    create_feature_dict_time = {\n        'log_return':[realized_volatility],\n        'price1': [historical_volatility], \n        'seconds_in_bucket':[count_unique],\n        'size':[np.sum],\n        'order_count':[np.sum],\n    }\n    \n    def get_stats_window(fe_dict,seconds_in_bucket, add_suffix = False):\n        df_feature = df[df['seconds_in_bucket'] >= seconds_in_bucket].groupby(['time_id']).agg(fe_dict).reset_index()\n        df_feature.columns = ['_'.join(col) for col in df_feature.columns]\n        if add_suffix:\n            df_feature = df_feature.add_suffix('_' + str(seconds_in_bucket))\n        return df_feature\n    \n    \n    df_feature = get_stats_window(create_feature_dict,seconds_in_bucket = 0, add_suffix = False)\n    df_feature_500 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 500, add_suffix = True)\n    df_feature_400 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 400, add_suffix = True)\n    df_feature_300 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 300, add_suffix = True)\n    df_feature_200 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 200, add_suffix = True)\n    df_feature_100 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 100, add_suffix = True)\n    \n    lis = []\n    for n_time_id in df['time_id'].unique():\n        df_id = df[df['time_id'] == n_time_id]        \n        tendencyV = tendency(df_id['price'].values, df_id['size'].values)      \n        f_max = np.sum(df_id['price'].values > np.mean(df_id['price'].values))\n        f_min = np.sum(df_id['price'].values < np.mean(df_id['price'].values))\n        df_max =  np.sum(np.diff(df_id['price'].values) > 0)\n        df_min =  np.sum(np.diff(df_id['price'].values) < 0)\n        \n        abs_diff = np.median(np.abs( df_id['price'].values - np.mean(df_id['price'].values)))        \n        energy = np.mean(df_id['price'].values**2)\n        iqr_p = np.percentile(df_id['price'].values,75) - np.percentile(df_id['price'].values,25)\n        \n        abs_diff_v = np.median(np.abs( df_id['size'].values - np.mean(df_id['size'].values)))        \n        energy_v = np.sum(df_id['size'].values**2)\n        iqr_p_v = np.percentile(df_id['size'].values,75) - np.percentile(df_id['size'].values,25)\n        \n        lis.append({\n            'time_id':n_time_id,\n            'tendency':tendencyV,\n            'f_max':f_max,\n            'f_min':f_min,\n            'df_max':df_max,\n            'df_min':df_min,\n            'abs_diff':abs_diff,\n            'energy':energy,\n            'iqr_p':iqr_p,\n            'abs_diff_v':abs_diff_v,\n            'energy_v':energy_v,\n            'iqr_p_v':iqr_p_v\n        })\n    \n    df_lr = pd.DataFrame(lis)\n    df_feature = df_feature.merge(df_lr, how = 'left', left_on = 'time_id_', right_on = 'time_id')\n    \n    df_feature = df_feature.merge(df_feature_500, how = 'left', left_on = 'time_id_', right_on = 'time_id__500')\n    df_feature = df_feature.merge(df_feature_400, how = 'left', left_on = 'time_id_', right_on = 'time_id__400')\n    df_feature = df_feature.merge(df_feature_300, how = 'left', left_on = 'time_id_', right_on = 'time_id__300')\n    df_feature = df_feature.merge(df_feature_200, how = 'left', left_on = 'time_id_', right_on = 'time_id__200')\n    df_feature = df_feature.merge(df_feature_100, how = 'left', left_on = 'time_id_', right_on = 'time_id__100')\n    \n    df_feature.drop(['time_id__500','time_id__400', 'time_id__300', 'time_id__200','time_id','time_id__100'], axis = 1, inplace = True)\n    \n    df_feature = df_feature.add_prefix('trade_')\n    stock_id = file_path.split('=')[1]\n    df_feature['row_id'] = df_feature['trade_time_id_'].apply(lambda x:f'{stock_id}-{x}')\n    df_feature.drop(['trade_time_id_'], axis = 1, inplace = True)\n    return df_feature","0ed3e432":"def get_time_stock(df):\n    vol_cols = [\n        'log_return1_realized_volatility', 'log_return2_realized_volatility', 'log_return1_realized_volatility_500', 'log_return2_realized_volatility_500', \n        'log_return1_realized_volatility_400', 'log_return2_realized_volatility_400', 'log_return1_realized_volatility_300', 'log_return2_realized_volatility_300', \n        'log_return1_realized_volatility_200', 'log_return2_realized_volatility_200', 'trade_log_return_realized_volatility', 'trade_log_return_realized_volatility_500', \n        'trade_log_return_realized_volatility_400', 'trade_log_return_realized_volatility_300', 'trade_log_return_realized_volatility_200'\n    ]\n\n    df_stock_id = df.groupby(['stock_id'])[vol_cols].agg(['mean', 'std', 'max', 'min', ]).reset_index()\n    df_stock_id.columns = ['_'.join(col) for col in df_stock_id.columns]\n    df_stock_id = df_stock_id.add_suffix('_' + 'stock')\n\n    df_time_id = df.groupby(['time_id'])[vol_cols].agg(['mean', 'std', 'max', 'min', ]).reset_index()\n    df_time_id.columns = ['_'.join(col) for col in df_time_id.columns]\n    df_time_id = df_time_id.add_suffix('_' + 'time')\n    \n    df = df.merge(df_stock_id, how = 'left', left_on = ['stock_id'], right_on = ['stock_id__stock'])\n    df = df.merge(df_time_id, how = 'left', left_on = ['time_id'], right_on = ['time_id__time'])\n    df.drop(['stock_id__stock', 'time_id__time'], axis = 1, inplace = True)\n    return df\n    \n\ndef preprocessor(list_stock_ids, is_train = True):\n    data_dir = '..\/input\/optiver-realized-volatility-prediction\/'\n    \n    def for_joblib(stock_id):\n        \n        if is_train:\n            file_path_book = data_dir + \"book_train.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_train.parquet\/stock_id=\" + str(stock_id)\n        \n        else:\n            file_path_book = data_dir + \"book_test.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_test.parquet\/stock_id=\" + str(stock_id)\n    \n        df_tmp = pd.merge(book_preprocessor(file_path_book), trade_preprocessor(file_path_trade), on = 'row_id', how = 'left')\n        return df_tmp\n    \n    \n    df = Parallel(n_jobs = -1, verbose = 1)(delayed(for_joblib)(stock_id) for stock_id in list_stock_ids)\n    df = pd.concat(df, ignore_index = True)\n    return df","27b81979":"train, test = read_train_test()","7382184c":"# Process train data\ntrain_stock_ids = train['stock_id'].unique()\ntrain_ = preprocessor(train_stock_ids, is_train = True)\ntrain = train.merge(train_, on = ['row_id'], how = 'left')\nprint(f\"train: {train.shape}\")","21677e65":"# Process test data\ntest_stock_ids = test['stock_id'].unique()\ntest_ = preprocessor(test_stock_ids, is_train = False)\ntest = test.merge(test_, on = ['row_id'], how = 'left')\nprint(f\"test: {test.shape}\")","79acdc2f":"# Create group features\ntrain = get_time_stock(train)\ntest = get_time_stock(test)\nprint(f\"train: {train.shape} \\ntest: {test.shape}\")","d4b0ccd8":"# Tau features\ntrain['size_tau'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique'] )\ntrain['size_tau_400'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique_400'] )\ntrain['size_tau_300'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique_300'] )\ntrain['size_tau_200'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique_200'] )\ntrain['size_tau2'] = np.sqrt( 1\/ train['trade_order_count_sum'] )\ntrain['size_tau2_400'] = np.sqrt( 0.33\/ train['trade_order_count_sum'] )\ntrain['size_tau2_300'] = np.sqrt( 0.5\/ train['trade_order_count_sum'] )\ntrain['size_tau2_200'] = np.sqrt( 0.66\/ train['trade_order_count_sum'] )\ntrain['size_tau2_d'] = train['size_tau2_400'] - train['size_tau2']\n\ntest['size_tau'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique'] )\ntest['size_tau_400'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_400'] )\ntest['size_tau_300'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_300'] )\ntest['size_tau_200'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_200'] )\ntest['size_tau2'] = np.sqrt( 1\/ test['trade_order_count_sum'] )\ntest['size_tau2_400'] = np.sqrt( 0.33\/ test['trade_order_count_sum'] )\ntest['size_tau2_300'] = np.sqrt( 0.5\/ test['trade_order_count_sum'] )\ntest['size_tau2_200'] = np.sqrt( 0.66\/ test['trade_order_count_sum'] )\ntest['size_tau2_d'] = test['size_tau2_400'] - test['size_tau2']\n\nprint(f\"train: {train.shape} \\ntest: {test.shape}\")","47061729":"colNames = [col for col in list(train.columns) if col not in {\"stock_id\", \"time_id\", \"target\", \"row_id\"}]\nlen(colNames)","0d6cf8f9":"# Generate aggregate features\ntrain_p = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntrain_p = train_p.pivot(index='time_id', columns='stock_id', values='target')\n\ncorr = train_p.corr()\nids = corr.index\n\nkmeans = KMeans(n_clusters=7, random_state=0).fit(corr.values)\n\nl = []\nfor n in range(7):\n    l.append ( [ (x-1) for x in ( (ids+1)*(kmeans.labels_ == n)) if x > 0] )\n\nmat = []\nmatTest = []\n\nn = 0\nfor ind in l:\n    newDf = train.loc[train['stock_id'].isin(ind) ]\n    newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n    newDf.loc[:,'stock_id'] = str(n)+'c1'\n    mat.append ( newDf )\n    \n    newDf = test.loc[test['stock_id'].isin(ind) ]    \n    newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n    newDf.loc[:,'stock_id'] = str(n)+'c1'\n    matTest.append ( newDf )\n    \n    n+=1\n    \nmat1 = pd.concat(mat).reset_index()\nmat1.drop(columns=['target'],inplace=True)\nmat2 = pd.concat(matTest).reset_index()\n\nmat2 = pd.concat([mat2,mat1.loc[mat1.time_id==5]])\nmat1 = mat1.pivot(index='time_id', columns='stock_id')\nmat1.columns = [\"_\".join(x) for x in mat1.columns.ravel()]\nmat1.reset_index(inplace=True)\n\nmat2 = mat2.pivot(index='time_id', columns='stock_id')\nmat2.columns = [\"_\".join(x) for x in mat2.columns.ravel()]\nmat2.reset_index(inplace=True)","5ef1eb4c":"nnn = [\n    'time_id',\n    'log_return1_realized_volatility_0c1',\n    'log_return1_realized_volatility_1c1',     \n    'log_return1_realized_volatility_3c1',\n    'log_return1_realized_volatility_4c1',     \n    'log_return1_realized_volatility_6c1',\n    'total_volume_sum_0c1',\n    'total_volume_sum_1c1', \n    'total_volume_sum_3c1',\n    'total_volume_sum_4c1', \n    'total_volume_sum_6c1',\n    'trade_size_sum_0c1',\n    'trade_size_sum_1c1', \n    'trade_size_sum_3c1',\n    'trade_size_sum_4c1', \n    'trade_size_sum_6c1',\n    'trade_order_count_sum_0c1',\n    'trade_order_count_sum_1c1',\n    'trade_order_count_sum_3c1',\n    'trade_order_count_sum_4c1',\n    'trade_order_count_sum_6c1',      \n    'price_spread_sum_0c1',\n    'price_spread_sum_1c1',\n    'price_spread_sum_3c1',\n    'price_spread_sum_4c1',\n    'price_spread_sum_6c1',   \n    'bid_spread_sum_0c1',\n    'bid_spread_sum_1c1',\n    'bid_spread_sum_3c1',\n    'bid_spread_sum_4c1',\n    'bid_spread_sum_6c1',       \n    'ask_spread_sum_0c1',\n    'ask_spread_sum_1c1',\n    'ask_spread_sum_3c1',\n    'ask_spread_sum_4c1',\n    'ask_spread_sum_6c1',   \n    'volume_imbalance_sum_0c1',\n    'volume_imbalance_sum_1c1',\n    'volume_imbalance_sum_3c1',\n    'volume_imbalance_sum_4c1',\n    'volume_imbalance_sum_6c1',       \n    'bid_ask_spread_sum_0c1',\n    'bid_ask_spread_sum_1c1',\n    'bid_ask_spread_sum_3c1',\n    'bid_ask_spread_sum_4c1',\n    'bid_ask_spread_sum_6c1',\n    'size_tau2_0c1',\n    'size_tau2_1c1',\n    'size_tau2_3c1',\n    'size_tau2_4c1',\n    'size_tau2_6c1'\n]\n\ntrain = pd.merge(train, mat1[nnn], how='left', on='time_id')\ntest = pd.merge(test, mat2[nnn], how='left', on='time_id')\nprint(f\"train: {train.shape} \\ntest: {test.shape}\")\n\ndel mat1,mat2\ngc.collect()","348d767a":"def train_and_evaluate_gbr(train, test):\n    features = [col for col in train.columns if col not in {\"time_id\", \"target\", \"row_id\"}]\n    \n    y = train['target']\n    oof_predictions = np.zeros(train.shape[0])\n    test_predictions = np.zeros(test.shape[0])\n    \n    kfold = KFold(n_splits = 5, random_state = 2021, shuffle = True)\n    \n    for fold, (trn_ind, val_ind) in enumerate(kfold.split(train)):\n        x_train, x_val = train.iloc[trn_ind], train.iloc[val_ind]\n        y_train, y_val = y.iloc[trn_ind], y.iloc[val_ind]\n        \n        weights = 1 \/ np.square(y_train)\n        \n        model = HistGradientBoostingRegressor(\n            #max_depth=8,\n            learning_rate=0.09,\n            max_iter=1500,\n            max_leaf_nodes=112, \n            min_samples_leaf=500, \n            early_stopping=True,\n            n_iter_no_change=100,\n            random_state=2021\n        )\n        \n        model.fit(x_train[features], y_train, sample_weight=weights)\n        \n        y_pred = model.predict(x_val[features])\n        oof_predictions[val_ind] = y_pred\n        test_predictions += model.predict(test[features]) \/ 5\n        \n        joblib.dump(model, f'.\/gbr_model_{fold + 1}C.txt')\n        \n        rmspe_score = rmspe(y_val, y_pred)\n        print(f'Fold: {fold + 1} - OOF RMSPE: {rmspe_score}')\n        \n    rmspe_score = rmspe(y, oof_predictions)\n    print(f'\\nAll folds - OOF RMSPE: {rmspe_score}')\n    \n    return test_predictions","99fd3cd1":"predictions_gbr = train_and_evaluate_gbr(train, test)","ef3348cc":"def train_and_evaluate_lgb(train, test, params):\n    features = [col for col in train.columns if col not in {\"time_id\", \"target\", \"row_id\"}]\n    \n    y = train['target']\n    oof_predictions = np.zeros(train.shape[0])\n    test_predictions = np.zeros(test.shape[0])\n    \n    kfold = KFold(n_splits = 5, random_state = 2021, shuffle = True)\n    \n    for fold, (trn_ind, val_ind) in enumerate(kfold.split(train)):\n        x_train, x_val = train.iloc[trn_ind], train.iloc[val_ind]\n        y_train, y_val = y.iloc[trn_ind], y.iloc[val_ind]\n        \n        train_weights = 1 \/ np.square(y_train)\n        val_weights = 1 \/ np.square(y_val)\n        \n        train_dataset = lgb.Dataset(x_train[features], y_train, weight = train_weights)\n        val_dataset = lgb.Dataset(x_val[features], y_val, weight = val_weights)\n        \n        model = lgb.train(params = params,\n                          num_boost_round = 1300,\n                          train_set = train_dataset, \n                          valid_sets = [train_dataset, val_dataset], \n                          verbose_eval = 200,\n                          early_stopping_rounds = 50,\n                          feval = feval_rmspe)\n        \n        y_pred = model.predict(x_val[features], num_iteration=model.best_iteration)\n        oof_predictions[val_ind] = y_pred\n        test_predictions += model.predict(test[features], num_iteration=model.best_iteration) \/ 5\n        \n        model.save_model(f'.\/lgb_model_{fold + 1}C.txt', num_iteration=model.best_iteration)\n        \n        rmspe_score = rmspe(y_val, y_pred)\n        print(f'\\nFold: {fold + 1} - OOF RMSPE: {rmspe_score}\\n')\n        \n    rmspe_score = rmspe(y, oof_predictions)\n    print(f'\\nAll folds - OOF RMSPE: {rmspe_score}')\n    \n    return test_predictions","4b361c05":"seed = 2021\n\nparams = {\n    'objective': 'rmse',\n    'boosting_type': 'gbdt',\n    #'max_depth': -1,\n    'max_leaves': 112,\n    'max_bin': 100,\n    'min_data_in_leaf': 500,\n    'learning_rate': 0.05,\n    'subsample': 0.72,\n    'subsample_freq': 4,\n    'feature_fraction': 0.35,\n    'lambda_l1': 0.5,\n    'lambda_l2': 1.0,\n    'categorical_column': [0],\n    'seed': seed,\n    'feature_fraction_seed': seed,\n    'bagging_seed': seed,\n    'drop_seed': seed,\n    'data_random_seed': seed,\n    'n_jobs': -1,\n    'verbose': -1\n}\n\npredictions_lgb = train_and_evaluate_lgb(train, test, params)","17a404f4":"# Generate kfolds based on the knn++ algorithm\nout_train = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\nout_train = out_train.pivot(index='time_id', columns='stock_id', values='target')\nout_train = out_train.fillna(out_train.mean())\n\nnfolds = 5\nindex = []\ntotDist = []\nvalues = []\n\nscaler = MinMaxScaler(feature_range=(-1, 1))\nmat = out_train.values\nmat = scaler.fit_transform(mat)\n\nnind = int(mat.shape[0]\/nfolds)\n\nmat = np.c_[mat, np.arange(mat.shape[0])]\nlineNumber = np.random.choice(np.array(mat.shape[0]), size=nfolds, replace=False)\nlineNumber = np.sort(lineNumber)[::-1]\n\nfor n in tqdm(range(nfolds)):\n    totDist.append(np.zeros(mat.shape[0]-nfolds))\n\nfor n in tqdm(range(nfolds)):\n    values.append([lineNumber[n]])    \n\ns=[]\nfor n in tqdm(range(nfolds)):\n    s.append(mat[lineNumber[n],:])    \n    mat = np.delete(mat, obj=lineNumber[n], axis=0)\n\nfor n in tqdm(range(nind-1)):    \n    luck = np.random.uniform(0,1,nfolds)\n    \n    for cycle in range(nfolds):\n        s[cycle] = np.matlib.repmat(s[cycle], mat.shape[0], 1)\n        sumDist = np.sum( (mat[:,:-1] - s[cycle][:,:-1])**2 , axis=1)   \n        totDist[cycle] += sumDist        \n        \n        f = totDist[cycle]\/np.sum(totDist[cycle])\n        j = 0\n        kn = 0\n        \n        for val in f:\n            j += val        \n            if (j > luck[cycle]):\n                break\n            kn +=1\n        \n        lineNumber[cycle] = kn\n        \n        for n_iter in range(nfolds):    \n            totDist[n_iter] = np.delete(totDist[n_iter],obj=lineNumber[cycle], axis=0)\n            j= 0\n        \n        s[cycle] = mat[lineNumber[cycle],:]\n        values[cycle].append(int(mat[lineNumber[cycle],-1]))\n        mat = np.delete(mat, obj=lineNumber[cycle], axis=0)\n\nfor n_mod in tqdm(range(nfolds)):\n    values[n_mod] = out_train.index[values[n_mod]]","eb288b1a":"train.replace([np.inf, -np.inf], np.nan,inplace=True)\ntest.replace([np.inf, -np.inf], np.nan,inplace=True)\n\nqt_train = []\ntrain_nn=train[colNames].copy()\ntest_nn=test[colNames].copy()\n\nfor col in tqdm(colNames):\n    qt = QuantileTransformer(random_state=21,\n                             n_quantiles=2000, \n                             output_distribution='normal')\n    \n    train_nn[col] = qt.fit_transform(train_nn[[col]])\n    test_nn[col] = qt.transform(test_nn[[col]])    \n    qt_train.append(qt)","28bda5bb":"train_nn[['stock_id','time_id','target']] = train[['stock_id','time_id','target']]\ntest_nn[['stock_id','time_id']] = test[['stock_id','time_id']]\nprint(f\"train_nn: {train_nn.shape} \\ntest_nn: {test_nn.shape}\")","c9f0e61e":"# Generate aggregate features\ntrain_p = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntrain_p = train_p.pivot(index='time_id', columns='stock_id', values='target')\n\ncorr = train_p.corr()\nids = corr.index\n\nkmeans = KMeans(n_clusters=7, random_state=0).fit(corr.values)\n\nl = []\nfor n in range(7):\n    l.append ( [ (x-1) for x in ( (ids+1)*(kmeans.labels_ == n)) if x > 0] )\n    \nmat = []\nmatTest = []\n\nn = 0\nfor ind in l:\n    newDf = train_nn.loc[train_nn['stock_id'].isin(ind) ]\n    newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n    newDf.loc[:,'stock_id'] = str(n)+'c1'\n    mat.append ( newDf )\n    \n    newDf = test_nn.loc[test_nn['stock_id'].isin(ind) ]    \n    newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n    newDf.loc[:,'stock_id'] = str(n)+'c1'\n    matTest.append ( newDf )\n    \n    n+=1\n    \nmat1 = pd.concat(mat).reset_index()\nmat1.drop(columns=['target'], inplace=True)\n\nmat2 = pd.concat(matTest).reset_index()\nmat2 = pd.concat([mat2, mat1.loc[mat1.time_id==5]])\n\nmat1 = mat1.pivot(index='time_id', columns='stock_id')\nmat1.columns = [\"_\".join(x) for x in mat1.columns.ravel()]\nmat1.reset_index(inplace=True)\n\nmat2 = mat2.pivot(index='time_id', columns='stock_id')\nmat2.columns = [\"_\".join(x) for x in mat2.columns.ravel()]\nmat2.reset_index(inplace=True)","e3613e4d":"nnn = [\n    'time_id',\n    'log_return1_realized_volatility_0c1',\n    'log_return1_realized_volatility_1c1',     \n    'log_return1_realized_volatility_3c1',\n    'log_return1_realized_volatility_4c1',     \n    'log_return1_realized_volatility_6c1',\n    'total_volume_sum_0c1',\n    'total_volume_sum_1c1', \n    'total_volume_sum_3c1',\n    'total_volume_sum_4c1', \n    'total_volume_sum_6c1',\n    'trade_size_sum_0c1',\n    'trade_size_sum_1c1', \n    'trade_size_sum_3c1',\n    'trade_size_sum_4c1', \n    'trade_size_sum_6c1',\n    'trade_order_count_sum_0c1',\n    'trade_order_count_sum_1c1',\n    'trade_order_count_sum_3c1',\n    'trade_order_count_sum_4c1',\n    'trade_order_count_sum_6c1',      \n    'price_spread_sum_0c1',\n    'price_spread_sum_1c1',\n    'price_spread_sum_3c1',\n    'price_spread_sum_4c1',\n    'price_spread_sum_6c1',   \n    'bid_spread_sum_0c1',\n    'bid_spread_sum_1c1',\n    'bid_spread_sum_3c1',\n    'bid_spread_sum_4c1',\n    'bid_spread_sum_6c1',       \n    'ask_spread_sum_0c1',\n    'ask_spread_sum_1c1',\n    'ask_spread_sum_3c1',\n    'ask_spread_sum_4c1',\n    'ask_spread_sum_6c1',   \n    'volume_imbalance_sum_0c1',\n    'volume_imbalance_sum_1c1',\n    'volume_imbalance_sum_3c1',\n    'volume_imbalance_sum_4c1',\n    'volume_imbalance_sum_6c1',       \n    'bid_ask_spread_sum_0c1',\n    'bid_ask_spread_sum_1c1',\n    'bid_ask_spread_sum_3c1',\n    'bid_ask_spread_sum_4c1',\n    'bid_ask_spread_sum_6c1',\n    'size_tau2_0c1',\n    'size_tau2_1c1',\n    'size_tau2_3c1',\n    'size_tau2_4c1',\n    'size_tau2_6c1'\n] \n\ntrain_nn = pd.merge(train_nn, mat1[nnn], how='left', on='time_id')\ntest_nn = pd.merge(test_nn, mat2[nnn], how='left', on='time_id')\nprint(f\"train_nn: {train_nn.shape} \\ntest_nn: {test_nn.shape}\")\n\ndel mat1,mat2\ndel train,test\ngc.collect()","52909523":"def swish(x, beta = 1):\n    return (x * sigmoid(beta * x))\n\n\ndef base_model(n_feats):\n    stock_id_input = keras.Input(shape=(1,), name='stock_id')\n    num_input = keras.Input(shape=(n_feats,), name='num_data')\n\n    num_out = keras.layers.Dense(160, activation='swish')(num_input)\n    \n    stock_embedded = keras.layers.Embedding(max(cat_data)+1, \n                                            stock_embedding_size, \n                                            input_length=1, \n                                            name='stock_embedding')(stock_id_input)\n    \n    stock_flattened = keras.layers.Flatten()(stock_embedded)\n    out = keras.layers.Concatenate()([stock_flattened, num_out])\n    \n    for n_hidden in hidden_units:\n        out = keras.layers.Dense(n_hidden, activation='swish')(out)\n\n    out = keras.layers.Dense(1, activation='linear', name='prediction')(out)\n    \n    model = keras.Model(\n        inputs = [stock_id_input, num_input],\n        outputs = out,\n    )\n    \n    return model","357a296a":"get_custom_objects().update({'swish': Activation(swish)})\n\nhidden_units = (128, 64, 32)\nstock_embedding_size = 32\n\ncat_data = train_nn['stock_id']\n\ntarget_name='target'\npred_name = 'pred_NN'\n\nes = tf.keras.callbacks.EarlyStopping(\n    monitor='val_loss', patience=20, verbose=0,\n    mode='min', restore_best_weights=True)\n\nplateau = tf.keras.callbacks.ReduceLROnPlateau(\n    monitor='val_loss', factor=0.2, patience=7, \n    verbose=0, mode='min')","ddcc8ce8":"n_folds = 5\nkf = KFold(n_splits=n_folds, shuffle=True, random_state=2020)\ncounter = 1\n\nfeatures_to_consider = list(train_nn)\nfeatures_to_consider.remove('time_id')\nfeatures_to_consider.remove('target')\n\ntry:\n    features_to_consider.remove('pred_NN')\nexcept:\n    pass\n\ntrain_nn[features_to_consider] = train_nn[features_to_consider].fillna(train_nn[features_to_consider].mean())\ntest_nn[features_to_consider] = test_nn[features_to_consider].fillna(train_nn[features_to_consider].mean())\n\ntrain_nn[pred_name] = 0\ntest_nn[target_name] = 0\ntest_predictions_nn = np.zeros(test_nn.shape[0])\noof_predictions_nn = pd.DataFrame(np.zeros((train_nn.shape[0], 1)), columns=['target'])\n\nfor n_count in range(n_folds):\n    indexes = np.arange(nfolds).astype(int)    \n    indexes = np.delete(indexes,obj=n_count, axis=0) \n    indexes = np.r_[values[indexes[0]],values[indexes[1]],values[indexes[2]],values[indexes[3]]]\n    \n    X_train = train_nn.loc[train_nn.time_id.isin(indexes), features_to_consider]\n    y_train = train_nn.loc[train_nn.time_id.isin(indexes), target_name]\n    X_test = train_nn.loc[train_nn.time_id.isin(values[n_count]), features_to_consider]\n    y_test = train_nn.loc[train_nn.time_id.isin(values[n_count]), target_name]\n    \n    try:\n        features_to_consider.remove('stock_id')\n    except:\n        pass\n    \n    scaler = MinMaxScaler(feature_range=(-1, 1))\n    num_data = X_train[features_to_consider]\n    num_data = scaler.fit_transform(num_data.values)    \n    \n    cat_data = X_train['stock_id']    \n    target =  y_train\n    \n    num_data_test = X_test[features_to_consider]\n    num_data_test = scaler.transform(num_data_test.values)\n    cat_data_test = X_test['stock_id']\n    \n    model = base_model(num_data.shape[1])\n    model.compile(\n        keras.optimizers.Adam(learning_rate=0.005),\n        loss=root_mean_squared_per_error\n    )\n    \n    chkpoint = tf.keras.callbacks.ModelCheckpoint(\n        f'.\/dnn_model_{counter}C.h5', \n        monitor='val_loss', verbose=0, \n        save_best_only=True, mode='min')\n\n    model.fit([cat_data, num_data], \n              target,               \n              batch_size=2048,\n              epochs=1000,\n              validation_data=([cat_data_test, num_data_test], y_test),\n              callbacks=[es, plateau, chkpoint],\n              validation_batch_size=len(y_test),\n              shuffle=True,\n              verbose=0)\n\n    preds = model.predict([cat_data_test, num_data_test]).reshape(1,-1)[0]\n    oof_predictions_nn.loc[train_nn.time_id.isin(values[n_count]), target_name] = preds\n    \n    score = round(rmspe(y_true = y_test, y_pred = preds), 5)\n    print(f'Fold: {counter} - OOF RMSPE: {score}')\n    \n    tt = scaler.transform(test_nn[features_to_consider].values)\n    test_predictions_nn += model.predict([test_nn['stock_id'], tt]).reshape(1,-1)[0].clip(0,1e10) \/ n_folds\n       \n    counter += 1\n    features_to_consider.append('stock_id')\n    \nrmspe_score = rmspe(train_nn['target'].values.ravel(), oof_predictions_nn.values.ravel())\nprint(f'\\nAll folds - OOF RMSPE: {rmspe_score}')","ca956248":"test_nn[\"row_id\"] = test_nn[\"stock_id\"].astype(str) + \"-\" + test_nn[\"time_id\"].astype(str) \ntest_nn[target_name] = (test_predictions_nn * 0.55) + (predictions_lgb * 0.3) + (predictions_gbr * 0.15)\n\ndisplay(test_nn[['row_id', target_name]].head())\ntest_nn[['row_id', target_name]].to_csv('submission.csv', index = False)","343570e3":"## HistGradientBoostingRegressor","22d4c9c6":"## LGBM","98947462":"## Prepare data for model training","d94058e8":"## Create submission file","27476a8a":"## Helper Functions","f38d5b2d":"## Keras DNN","c02292b3":"## Import libraries"}}