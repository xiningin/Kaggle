{"cell_type":{"e59651b8":"code","b94eaced":"code","abcd2233":"code","8d6b2740":"code","2135b4b0":"code","7ce7d469":"code","d4215bf8":"code","fe733487":"code","a6cf59d3":"code","4d44fd07":"code","67949756":"code","1a35b9ea":"code","b43ce20a":"code","69f1665e":"code","996a41f9":"markdown","06171026":"markdown","7db25eb9":"markdown","613a6a26":"markdown","cdd50f05":"markdown","dc2abae1":"markdown","11c24f64":"markdown","7138ffec":"markdown","eff41bc9":"markdown","91336dfa":"markdown"},"source":{"e59651b8":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\nimport seaborn as sns\nfrom matplotlib import rcParams\n\n%matplotlib inline \n%pylab inline ","b94eaced":"df = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')\ndf.head()","abcd2233":"df.isnull().any()","8d6b2740":"df.dtypes","2135b4b0":"df.describe()","7ce7d469":"fig = plt.figure(figsize=(12, 6))\nsqft = fig.add_subplot(121)\ncost = fig.add_subplot(122)\n\nsqft.hist(df.sqft_living, bins=80)\nsqft.set_xlabel('Ft^2')\nsqft.set_title(\"Histogram of House Square Footage\")\n\ncost.hist(df.price, bins=80)\ncost.set_xlabel('Price ($)')\ncost.set_title(\"Histogram of Housing Prices\")\n\nplt.show()","d4215bf8":"import statsmodels.api as sm\nfrom statsmodels.formula.api import ols","fe733487":"m = ols('price ~ sqft_living',df).fit()\nprint (m.summary())","a6cf59d3":"m = ols('price ~ sqft_living + bedrooms + grade + condition',df).fit()\nprint (m.summary())","4d44fd07":"sns.jointplot(x=\"sqft_living\", y=\"price\", data=df, kind = 'reg',fit_reg= True, size = 7)\nplt.show()","67949756":"import pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nimport sklearn\nfrom sklearn import cluster\n\n%matplotlib inline\n\nfaithful = pd.read_csv('..\/input\/faithful\/faithful.csv')\nfaithful.head()","1a35b9ea":"faithful.columns = ['eruptions', 'waiting']\n\nplt.scatter(faithful.eruptions, faithful.waiting)\nplt.title('Old Faithful Data Scatterplot')\nplt.xlabel('Length of eruption (minutes)')\nplt.ylabel('Time between eruptions (minutes)')","b43ce20a":"faith = np.array(faithful)\n\nk = 2\nkmeans = cluster.KMeans(n_clusters=k)\nkmeans.fit(faith)\n\nlabels = kmeans.labels_\ncentroids = kmeans.cluster_centers_","69f1665e":"for i in range(k):\n    # select only data observations with cluster label == i\n    ds = faith[np.where(labels==i)]\n    # plot the data observations\n    plt.plot(ds[:,0],ds[:,1],'o', markersize=7)\n    # plot the centroids\n    lines = plt.plot(centroids[i,0],centroids[i,1],'kx')\n    # make the centroid x's bigger\n    plt.setp(lines,ms=15.0)\n    plt.setp(lines,mew=4.0)\nplt.show()","996a41f9":"OLS means Ordinary Least Squares. \nWhen you code to produce a linear regression summary with OLS with only two variables this will be the formula that you use:\n\n\n```\nReg = ols(\u2018Dependent variable ~ independent variable(s), dataframe).fit()\n\nprint(Reg.summary()) **bold text**\n```\n\n","06171026":"# Multivariate linear regression","7db25eb9":"Checking out the data types for each of our variables","613a6a26":"Let's print two histograms to observe the distribution of housing prices and square footage using **matplotlib (plt)**","cdd50f05":"# **Exploratory analysis and regression results**","dc2abae1":"Checking to see if any of our data has null values. If there were any, we\u2019d drop or filter the null values out.","11c24f64":"# Linear Regression","7138ffec":"# Clustering Model in Python","eff41bc9":"**Step One: Exploratory Data Analysis**","91336dfa":"**Step two: Building the cluster model**"}}