{"cell_type":{"182ac202":"code","512ef6df":"code","2bdc8b4d":"code","e824b890":"code","669ef0b8":"code","ac57d154":"code","bb8089e3":"code","5a5741d4":"code","56448415":"code","7d7929fd":"code","de6ef297":"code","b79d00d3":"code","171d5776":"code","72808624":"markdown","3b7739ca":"markdown","761613f6":"markdown","d216ac1c":"markdown","da1a9376":"markdown","4809e144":"markdown","a43a40dd":"markdown","815e195c":"markdown","dec6aaab":"markdown","d939e4b7":"markdown","1f5d9db3":"markdown","0f5f2a4d":"markdown"},"source":{"182ac202":"import pandas as pd\nimport numpy as np\nimport datetime\nimport requests\nimport warnings\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport matplotlib.dates as mdates\nimport seaborn as sns\nimport squarify\nimport plotly.offline as py\nimport plotly_express as px\n\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\n\nfrom IPython.display import Image\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\n#age_details = pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\nindia_covid_19 = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\n#hospital_beds = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\n#individual_details = pd.read_csv('..\/input\/covid19-in-india\/IndividualDetails.csv')\n#ICMR_details = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingDetails.csv')\n#ICMR_labs = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingLabs.csv')\nstate_testing = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\n#population = pd.read_csv('..\/input\/covid19-in-india\/population_india_census2011.csv')\n\nworld_population = pd.read_csv('..\/input\/population-by-country-2020\/population_by_country_2020.csv')\nconfirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecovered_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/04-04-2020.csv')\n\nindia_covid_19['Date'] = pd.to_datetime(india_covid_19['Date'],dayfirst = True)\nstate_testing['Date'] = pd.to_datetime(state_testing['Date'])\n","512ef6df":"world_confirmed = confirmed_df[confirmed_df.columns[-1:]].sum()\nworld_recovered = recovered_df[recovered_df.columns[-1:]].sum()\nworld_deaths = deaths_df[deaths_df.columns[-1:]].sum()\nworld_active = world_confirmed - (world_recovered - world_deaths)\n\nlabels = ['Active','Recovered','Deceased']\nsizes = [world_active,world_recovered,world_deaths]\ncolor= ['#66b3ff','green','red']\nexplode = []\n\nfor i in labels:\n    explode.append(0.05)\n    \nplt.figure(figsize= (15,10))\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=9, explode =explode,colors = color)\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\n\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\nplt.title('World COVID-19 Cases',fontsize = 20)\nplt.axis('equal')  \nplt.tight_layout()\n","2bdc8b4d":"hotspots = ['China','Germany','Iran','Italy','Spain','US','Korea, South','France','Turkey','United Kingdom','India']\ndates = list(confirmed_df.columns[4:])\ndates = list(pd.to_datetime(dates))\ndates_india = dates[8:]\n\ndf1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndf2 = deaths_df.groupby('Country\/Region').sum().reset_index()\ndf3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\nglobal_confirmed = {}\nglobal_deaths = {}\nglobal_recovered = {}\nglobal_active= {}\n\nfor country in hotspots:\n    k =df1[df1['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_confirmed[country] = k.values.tolist()[0]\n\n    k =df2[df2['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_deaths[country] = k.values.tolist()[0]\n\n    k =df3[df3['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_recovered[country] = k.values.tolist()[0]\n    \nfor country in hotspots:\n    k = list(map(int.__sub__, global_confirmed[country], global_deaths[country]))\n    global_active[country] = list(map(int.__sub__, k, global_recovered[country]))\n    \nfig = plt.figure(figsize= (15,15))\nplt.suptitle('Active, Recovered, Deaths in Hotspot Countries and India as of May 15',fontsize = 20,y=1.0)\n#plt.legend()\nk=0\nfor i in range(1,12):\n    ax = fig.add_subplot(6,2,i)\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\n    ax.bar(dates_india,global_active[hotspots[k]],color = 'green',alpha = 0.6,label = 'Active');\n    ax.bar(dates_india,global_recovered[hotspots[k]],color='grey',label = 'Recovered');\n    ax.bar(dates_india,global_deaths[hotspots[k]],color='red',label = 'Death');   \n    plt.title(hotspots[k])\n    handles, labels = ax.get_legend_handles_labels()\n    fig.legend(handles, labels, loc='upper left')\n    k=k+1\n\nplt.tight_layout(pad=3.0)","e824b890":"hotspots = ['China','Germany','Iran','Italy','Spain','United States','South Korea','France','Turkey','United Kingdom','India']\ncountry_death_rate = pd.DataFrame(columns = ['country','day1','day2','day3'])\nworld_population['Population (2020)'] = world_population['Population (2020)']\/1000000\n\nd1=[]\nd2 =[]\nd3 = []\nfor country in hotspots:\n    p = float(world_population[world_population['Country (or dependency)'] == country ]['Population (2020)'])\n    if country == 'United States':\n        k = global_deaths['US'][-3:]\n    elif country == 'South Korea':\n        k = global_deaths['Korea, South'][-3:]\n    else:\n        k = global_deaths[country][-3:]\n    d1.append(round(k[0]\/p,2))\n    d2.append(round(k[1]\/p,2))\n    d3.append(round(k[2]\/p,2))\n\ncountry_death_rate['country'] = hotspots\ncountry_death_rate['day1'] = d1\ncountry_death_rate['day2'] = d2\ncountry_death_rate['day3'] = d3    \n\nplt.figure(figsize= (10,10))\nplt.hlines(y=country_death_rate['country'], xmin=country_death_rate['day1'], xmax=country_death_rate['day3'], color='grey', alpha=0.4);\nplt.scatter(country_death_rate['day1'], country_death_rate['country'], color='skyblue', label='13th May');\nplt.scatter(country_death_rate['day2'], country_death_rate['country'], color='green', label='14th May');\nplt.scatter(country_death_rate['day3'], country_death_rate['country'], color='red', label='15th May');\nplt.legend();\nplt.title(\"Death Rate per Million in Hotspot Countries\",fontsize=20);\nplt.xlabel('Death Rate per Million');\n","669ef0b8":"dates = list(confirmed_df.columns[4:])\ndates = list(pd.to_datetime(dates))\ndates_india = dates[8:]","ac57d154":"df1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndf2 = deaths_df.groupby('Country\/Region').sum().reset_index()\ndf3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\nk = df1[df1['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_confirmed = k.values.tolist()[0] \n\nk = df2[df2['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_deaths = k.values.tolist()[0] \n\nk = df3[df3['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_recovered = k.values.tolist()[0] \n\nplt.figure(figsize= (15,10))\nplt.xticks(rotation = 90 ,fontsize = 11)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Total Confirmed, Active, Death in India\" , fontsize = 20)\n\nax1 = plt.plot_date(y= india_confirmed,x= dates_india,label = 'Confirmed',linestyle ='-',color = 'b')\nax2 = plt.plot_date(y= india_recovered,x= dates_india,label = 'Recovered',linestyle ='-',color = 'g')\nax3 = plt.plot_date(y= india_deaths,x= dates_india,label = 'Death',linestyle ='-',color = 'r')\nplt.legend();","bb8089e3":"countries = ['China','US', 'Italy', 'Spain', 'France','India']\n\nglobal_confirmed = []\nglobal_recovered = []\nglobal_deaths = []\nglobal_active = []\n\nfor country in countries:\n    k =df1[df1['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_confirmed.append(k.values.tolist()[0]) \n\n    k =df2[df2['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_deaths.append(k.values.tolist()[0]) \n\n    k =df3[df3['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_deaths.append(k.values.tolist()[0])  \n\nplt.figure(figsize= (15,10))\nplt.xticks(rotation = 90 ,fontsize = 11)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Comparison with other Countries\" , fontsize = 20)\n\nfor i in range(len(countries)):\n    plt.plot_date(y= global_confirmed[i],x= dates_india,label = countries[i],linestyle ='-')\nplt.legend();","5a5741d4":"state_cases = india_covid_19.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\n\n#state_cases = state_cases.astype({'Deaths': 'int'})\nstate_cases['Active'] = state_cases['Confirmed'] - (state_cases['Deaths']+state_cases['Cured'])\nstate_cases[\"Death Rate (per 100)\"] = np.round(100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"],2)\nstate_cases[\"Cure Rate (per 100)\"] = np.round(100*state_cases[\"Cured\"]\/state_cases[\"Confirmed\"],2)\nstate_cases.sort_values('Confirmed', ascending= False).fillna(0).style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Cured\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Death Rate (per 100)\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Cure Rate (per 100)\"])","56448415":"df1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndf2 = deaths_df.groupby('Country\/Region').sum().reset_index()\ndf3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\nk =df1[df1['Country\/Region']=='India'].loc[:,'2\/4\/20':]\nindia_confirmed = k.values.tolist()[0] \n\ngrowth_diff = []\n\nfor i in range(1,len(india_confirmed)):\n    growth_diff.append(india_confirmed[i] \/ india_confirmed[i-1])\n\ngrowth_factor = sum(growth_diff)\/len(growth_diff)\nprint('Average growth factor',growth_factor)","7d7929fd":"prediction_dates = []\n\nstart_date = dates_india[len(dates_india) - 1]\nfor i in range(15):\n    date = start_date + datetime.timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date\nprevious_day_cases = global_confirmed[5][len(dates_india) - 1]\npredicted_cases = []\n\nfor i in range(15):\n    predicted_value = previous_day_cases *  growth_factor\n    predicted_cases.append(predicted_value)\n    previous_day_cases = predicted_value\n\nplt.figure(figsize= (15,10))\nplt.xticks(rotation = 90 ,fontsize = 11)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Predicted Values for the next 15 Days\" , fontsize = 20)\nax1 = plt.plot_date(y= predicted_cases,x= prediction_dates,linestyle ='-',color = 'c')","de6ef297":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/train.csv')\ntest = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/test.csv')\ntrain['Date'] = pd.to_datetime(train['Date'])\ntest['Date'] = pd.to_datetime(test['Date'])","b79d00d3":"k = df1[df1['Country\/Region']=='India'].loc[:,'1\/22\/20':]\nindia_confirmed = k.values.tolist()[0] \ndata = pd.DataFrame(columns = ['ds','y'])\ndata['ds'] = dates\ndata['y'] = india_confirmed\n\nprop=Prophet()\nprop.fit(data)\nfuture=prop.make_future_dataframe(periods=30)\nprop_forecast=prop.predict(future)\nforecast = prop_forecast[['ds','yhat']].tail(30)\n\nfig = plot_plotly(prop, prop_forecast)\nfig = prop.plot(prop_forecast,xlabel='Date',ylabel='Confirmed Cases')","171d5776":"arima = ARIMA(data['y'], order=(5, 1, 0))\narima = arima.fit(trend='c', full_output=True, disp=True)\nforecast = arima.forecast(steps= 30)\npred = list(forecast[0])\n\nstart_date = data['ds'].max()\nprediction_dates = []\nfor i in range(30):\n    date = start_date + datetime.timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date\nplt.figure(figsize= (15,10))\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Predicted Values for the next 15 Days\" , fontsize = 20)\n\nplt.plot_date(y= pred,x= prediction_dates,linestyle ='dashed',color = '#ff9999',label = 'Predicted');\nplt.plot_date(y=data['y'],x=data['ds'],linestyle = '-',color = 'blue',label = 'Actual');\nplt.legend();","72808624":"We could see that the graph is increasing exponentialy if the average growth factor doesn't decrease. It is important that the growth factor is reduced to flatten the curve.","3b7739ca":"# India Updates <a id=\"1\"><\/a>","761613f6":"# 1. World Updates  <a id=\"32\"><\/a>\n","d216ac1c":"# Prediction <a id=\"7\"><\/a>","da1a9376":"#### Prediction for the next 15 days","4809e144":"![](https:\/\/github.com\/nitishabharathi\/analysis-images\/blob\/master\/covid%20timeline.png?raw=true)","a43a40dd":"## Statewise Insights <a id=\"5\"><\/a>","815e195c":"### Big Increases: Rajasthan, TN, Gujarat, WB, UP, Punjab, Maharashtra","dec6aaab":"## Prediction using growth factor <a id=\"9\"><\/a>\n#### Assuming the same growth factor continues for the next 15 days","d939e4b7":"## Prediction using ARIMA <a id=\"11\"><\/a>","1f5d9db3":"### The Spike in India <a id=\"3\"><\/a>","0f5f2a4d":"## Prediction using Prophet Model <a id=\"10\"><\/a>"}}