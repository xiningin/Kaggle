{"cell_type":{"a63c685c":"code","94b37b70":"code","f04d6c2f":"code","a06e2d87":"code","bf3ed89c":"code","c986a832":"code","82eb6f10":"code","6be7ae3f":"code","c4dba4a0":"code","cb169f66":"code","54ae26f3":"code","7b86abd9":"code","670566ad":"code","046ffac8":"code","32830e83":"code","9f8af60f":"code","51a87c87":"code","1f04f1d6":"code","c1dcf24e":"markdown","5bbdb87e":"markdown","2d28db0e":"markdown"},"source":{"a63c685c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","94b37b70":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","f04d6c2f":"from sklearn.datasets import load_boston","a06e2d87":"df = load_boston()\ndf.keys()","bf3ed89c":"dataset = pd.DataFrame(df.data)\ndataset.head()","c986a832":"dataset.columns = df.feature_names","82eb6f10":"dataset.head()","6be7ae3f":"df.target.shape","c4dba4a0":"dataset['Price'] = df.target","cb169f66":"dataset.head()","54ae26f3":"X = dataset.iloc[:,:-1] ## Independent Features\ny = dataset.iloc[:,-1] ## Dependent Features\nprint('-'*40)\nprint(\"X\")\nprint('-'*40)\nprint(X)\nprint('-'*40)\nprint(\"Y\")\nprint('-'*40)\nprint(y)","7b86abd9":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\nlin_regressor = LinearRegression()\nmse = cross_val_score(lin_regressor, X, y, scoring='neg_mean_squared_error',cv=5)\nmean_mse = np.mean(mse)\nprint(mse)\nprint(mean_mse)","670566ad":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\nridge = Ridge()\nparameters = {'alpha':[1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20,30,35,40,45,50,55,100]}\nridge_regressor = GridSearchCV(ridge, parameters, scoring='neg_mean_squared_error',cv=5)\nridge_regressor.fit(X,y)\nprint(ridge_regressor.best_params_)\nprint(ridge_regressor.best_score_)","046ffac8":"from sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\nlasso = Lasso()\nparameters = {'alpha':[1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20,30,35,40,45,50,55,100]}\nlasso_regressor = GridSearchCV(lasso, parameters, scoring='neg_mean_squared_error',cv=5)\nlasso_regressor.fit(X,y)\nprint(lasso_regressor.best_params_)\nprint(lasso_regressor.best_score_)","32830e83":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=0)","9f8af60f":"prediction_lasso=lasso_regressor.predict(X_test)\nprediction_ridge = ridge_regressor.predict(X_test)","51a87c87":"import seaborn as sns\nsns.distplot(y_test-prediction_lasso)","1f04f1d6":"import seaborn as sns\nsns.distplot(y_test-prediction_ridge)","c1dcf24e":"## Linear Regression","5bbdb87e":"## Ridge Regression","2d28db0e":"## Lasso Regression"}}