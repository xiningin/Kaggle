{"cell_type":{"18758a5c":"code","68d390b4":"code","e99de1fa":"code","7219abce":"code","0582f1c8":"code","a141f583":"code","097a1563":"code","a37ba2a3":"code","f1f3593e":"code","c23b6b3f":"code","207a263e":"code","a5e4019c":"code","c38b6483":"code","79f2900f":"code","1bc6ce83":"code","74546e5d":"code","275e039b":"code","cf737b97":"code","04c9dfa3":"code","94269d54":"code","74ab75f6":"code","b651eae6":"code","2759e87e":"code","3b160600":"code","f217cc0f":"code","c9e86931":"code","d6a18829":"code","8c0f1088":"code","a8cb6d71":"markdown","fc33084d":"markdown","25218e0b":"markdown","b54339d2":"markdown","6a486107":"markdown","b534ef00":"markdown","2a71eb68":"markdown","450dff0f":"markdown","ec3e8f25":"markdown","2a04f0f7":"markdown","90cea8ee":"markdown","ea451089":"markdown","a10116ff":"markdown","47183046":"markdown","e1219fb7":"markdown","cd81bfb2":"markdown","b0668a5e":"markdown","0aeb8273":"markdown","61c7848d":"markdown","25e78845":"markdown"},"source":{"18758a5c":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport re\nimport json\nfrom collections import Counter\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom functools import partial\nfrom kaggle_datasets import KaggleDatasets\nprint(\"Tensorflow version \" + tf.__version__)","68d390b4":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print(\"Device:\", tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint(\"Number of replicas:\", strategy.num_replicas_in_sync)","e99de1fa":"path = '\/kaggle\/input\/tpu-getting-started\/'\nos.listdir(path)","7219abce":"os.listdir(path+'tfrecords-jpeg-192x192\/')","0582f1c8":"path_gcs = KaggleDatasets().get_gcs_path('tpu-getting-started')\nprint(path_gcs) ","a141f583":"AUTOTUNE = tf.data.experimental.AUTOTUNE\nBATCH_SIZE = 16*strategy.num_replicas_in_sync\nPIXEL = 512\nIMAGE_SIZE = [PIXEL, PIXEL]","097a1563":"samp_subm = pd.read_csv(path+'sample_submission.csv')","a37ba2a3":"samp_subm.head()","f1f3593e":"train_filenames = tf.io.gfile.glob(path_gcs+'\/tfrecords-jpeg-'+str(PIXEL)+'x'+str(PIXEL)+'\/train\/*.tfrec')\nval_filenames = tf.io.gfile.glob(path_gcs+'\/tfrecords-jpeg-'+str(PIXEL)+'x'+str(PIXEL)+'\/val\/*.tfrec')\ntest_filenames = tf.io.gfile.glob(path_gcs+'\/tfrecords-jpeg-'+str(PIXEL)+'x'+str(PIXEL)+'\/test\/*.tfrec')","c23b6b3f":"def number_of_files(filenames):\n    \"\"\" Evaluate the number on files \"\"\"\n    \n    num = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(num)\n\n\ndef decode_image(image):\n    image = tf.image.decode_jpeg(image, channels=3)\n    image = tf.image.resize(image, [*IMAGE_SIZE])\n    image = tf.cast(image, tf.float32)\/255.\n    image = tf.reshape(image, [*IMAGE_SIZE, 3])\n    return image\n\n\ndef read_tfrecord(example, labeled):\n    tfrecord_format = {\n        \"image\": tf.io.FixedLenFeature([], tf.string),\n        \"class\": tf.io.FixedLenFeature([], tf.int64)\n    } if labeled else {\n        \"image\": tf.io.FixedLenFeature([], tf.string),\n        \"id\": tf.io.FixedLenFeature([], tf.string)\n    }\n    example = tf.io.parse_single_example(example, tfrecord_format)\n    image = decode_image(example['image'])\n    if labeled:\n        label = tf.cast(example['class'], tf.int32)\n        return image, label\n    idnum = example['id']\n    return image, idnum\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False  # disable order, increase speed\n    dataset = tf.data.TFRecordDataset(\n        filenames\n    )  # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(\n        ignore_order\n    )  # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(\n        partial(read_tfrecord, labeled=labeled), num_parallel_calls=AUTOTUNE\n    )\n    # returns a dataset of (image, label) pairs if labeled=True or just images if labeled=False\n    return dataset\n\n\ndef get_train_dataset(filenames, labeled=True, ordered=False):\n    dataset = load_dataset(filenames, labeled=labeled, ordered=ordered)\n    dataset = dataset.repeat()\n    dataset = dataset.shuffle(2020)\n    dataset = dataset.prefetch(buffer_size=AUTOTUNE)\n    dataset = dataset.batch(BATCH_SIZE)\n    return dataset\n\ndef get_val_dataset(filenames, labeled=True, ordered=False):\n    dataset = load_dataset(filenames, labeled=labeled, ordered=ordered)\n    dataset = dataset.prefetch(buffer_size=AUTOTUNE)\n    dataset = dataset.batch(BATCH_SIZE)\n    return dataset\n\ndef get_test_dataset(filenames, labeled=False, ordered=True):\n    dataset = load_dataset(filenames, labeled=labeled, ordered=ordered)\n    dataset = dataset.prefetch(buffer_size=AUTOTUNE)\n    dataset = dataset.batch(BATCH_SIZE)\n    return dataset\n\ndef show_batch(image_batch, label_batch):\n    \"\"\" Plot 25 images of a batch \"\"\"\n    \n    plt.figure(figsize=(20, 20))\n    for n in range(25):\n        ax = plt.subplot(5, 5, n + 1)\n        plt.imshow(image_batch[n])\n        plt.title(str(label_batch[n].numpy()))\n        plt.axis(\"off\")","207a263e":"print('Number samples of submission file:', len(samp_subm))","a5e4019c":"print('Number of train tfrec files:', len(train_filenames))\nprint('Number of val tfrec files:', len(val_filenames))\nprint('Number of test tfrec files:', len(test_filenames))","c38b6483":"print('Number Files train:', number_of_files(train_filenames))\nprint('Number Files train:', number_of_files(val_filenames))\nprint('Number Files test:', number_of_files(test_filenames))","79f2900f":"raw_dataset = tf.data.TFRecordDataset(train_filenames)\nfor raw_record in raw_dataset.take(1):\n    example = tf.train.Example()\n    example.ParseFromString(raw_record.numpy())\n    #print(example.features)","1bc6ce83":"train_dataset = get_train_dataset(train_filenames)\nval_dataset = get_val_dataset(val_filenames)\ntest_dataset = get_test_dataset(test_filenames)","74546e5d":"print(train_dataset)\nprint(val_dataset)\nprint(test_dataset)","275e039b":"image_batch, label_batch = next(iter(train_dataset))\nshow_batch(image_batch, label_batch)","cf737b97":"for image, idnum in test_dataset.take(1):\n    print(image.numpy().shape, idnum.numpy().shape)\n    print(idnum.numpy().astype('U')[0:10])","04c9dfa3":"learning_rate = 1e-4","94269d54":"def make_model():\n    base_model = tf.keras.applications.ResNet50(weights = 'imagenet', \n                                                include_top = False,\n                                                input_shape = [*IMAGE_SIZE, 3])\n    base_model.trainable = True\n    model = tf.keras.Sequential([\n            base_model,\n            tf.keras.layers.GlobalAveragePooling2D(),\n            tf.keras.layers.Dense(104, activation='softmax',dtype='float32')])\n    model.compile(\n        optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate),\n                                           loss=\"sparse_categorical_crossentropy\",\n                                           metrics=['sparse_categorical_accuracy']\n    )\n    return model","74ab75f6":"with strategy.scope():\n    model = make_model()\n\nmodel.summary()","b651eae6":"history = model.fit(train_dataset,\n                    epochs=10,\n                    validation_data = val_dataset,\n                    steps_per_epoch = number_of_files(train_filenames)\/\/BATCH_SIZE)","2759e87e":"fig, axs = plt.subplots(1, 2, figsize=(20, 6))\nfig.subplots_adjust(hspace = .2, wspace=.2)\naxs = axs.ravel()\nloss = history.history['loss']\nloss_val = history.history['val_loss']\nepochs = range(1, len(loss)+1)\naxs[0].plot(epochs, loss, 'bo', label='loss_train')\naxs[0].plot(epochs, loss_val, 'ro', label='loss_val')\naxs[0].set_title('Value of the loss function')\naxs[0].set_xlabel('epochs')\naxs[0].set_ylabel('value of the loss function')\naxs[0].legend()\naxs[0].grid()\nacc = history.history['sparse_categorical_accuracy']\nacc_val = history.history['val_sparse_categorical_accuracy']\naxs[1].plot(epochs, acc, 'bo', label='accuracy_train')\naxs[1].plot(epochs, acc_val, 'ro', label='accuracy_val')\naxs[1].set_title('Accuracy')\naxs[1].set_xlabel('Epochs')\naxs[1].set_ylabel('Value of accuracy')\naxs[1].legend()\naxs[1].grid()\nplt.show()","3b160600":"def to_float32(image, idnum):\n    return tf.cast(image, tf.float32), idnum\n\ntest_dataset = test_dataset.map(to_float32)\ntest_images = test_dataset.map(lambda image, idnum: image)","f217cc0f":"pred_propa = model.predict(test_images, verbose=1)\npreds = np.argmax(pred_propa, axis=-1)","c9e86931":"output = pd.DataFrame(columns=['id', 'label'])\ncounter = 0\nlenght = BATCH_SIZE\nfor image, idnum in test_dataset:\n    ids = idnum.numpy().astype('U')\n    labels = preds[counter*lenght:counter*lenght+len(ids)]\n    temp = pd.DataFrame({'id': ids, 'label': preds[0:len(ids)]})\n    output = pd.concat([output, temp])\n    lenght = len(ids)\n    counter += 1\n    \noutput.index=output['id']\noutput = output.loc[samp_subm['id']]\noutput.index=range(len(output))","d6a18829":"fig, ax = plt.subplots(1, 1, figsize=(16, 4))\nx = output['label'].value_counts().keys()\ny = output['label'].value_counts().values\nax.bar(x, y)\nplt.title('Distribution of prediction labels')\nplt.grid()\nplt.show()","8c0f1088":"output.to_csv('submission.csv', index=False)","a8cb6d71":"# Intro\nWelcome to the [Petals to the Metal - Flower Classification on TPU](https:\/\/www.kaggle.com\/c\/tpu-getting-started).\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/21154\/logos\/header.png)\n\nThe goal of this notebook is to give a short tutorial for the usage of TFRecords. We don't focus on optimization of the prediction model.\n\nFor a more general tutorial we recommend [this notebook](https:\/\/www.kaggle.com\/drcapa\/tutorial-tfrecords-create-and-read).\n\n<span style=\"color: royalblue;\">Please vote the notebook up if it helps you. Thank you. <\/span>","fc33084d":"# Analyse Predictions","25218e0b":"We use the sparse_categorical_accuracy metric. So we have not to encode the 104 target labels.","b54339d2":"# Analyse Training","6a486107":"Create the GCS path:","b534ef00":"# Functions","2a71eb68":"# Parameter","450dff0f":"# Load Data","ec3e8f25":"# Libraries","2a04f0f7":"# Overview","90cea8ee":"# Motivation\nTFRecord files (.tfrec) are based on a binary format for storing sequences of values. The TFRecord format was developed by TensorFlow. The motivation of the development is to use Tensor Processing Units (TPUs) to accelerate the applications of machine learning applications.\n\nTo use the advantages of TPU you have to switch on your notebook:\n1. Klick on the notebook seetings (right upper corner of the notebook).\n2. Klick on \"Accelerator\".\n3. Choose TPU v3-8.\n![](https:\/\/i.ibb.co\/mHFPHpN\/setting.png)","ea451089":"# Get Data","a10116ff":"# Write Output","47183046":"# Model\n[Keras Applications](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/applications)","e1219fb7":"# Path","cd81bfb2":"# Set Up","b0668a5e":"There are 4 folders with each 3 subfolders train, val and test:","0aeb8273":"# Show Data","61c7848d":"# Predict Test Data","25e78845":"First we have to extract the features keys. To see the feature keys we have to execute the following code.\n\nThere are the 3 feature keys class, id and image for this dataset:\n![](https:\/\/i.ibb.co\/C6gDn4h\/features-flowers.png)"}}