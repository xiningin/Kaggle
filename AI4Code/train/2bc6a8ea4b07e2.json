{"cell_type":{"1ad16107":"code","4782a310":"code","08985a6e":"code","0a18d64f":"code","b8174b5c":"code","050de8b4":"code","5dd895d4":"code","11ad43b7":"code","f755ef85":"code","23ab11f4":"code","4a89a891":"code","4ae5e4d3":"code","2a724c61":"code","1287fae2":"code","6032c99a":"code","24f1d080":"code","ac54f0bd":"code","2b895c8f":"code","fb6b5e9d":"code","5fb8b28d":"code","07f92502":"markdown","4d3be13d":"markdown","50a03b70":"markdown","f4626968":"markdown","d1933588":"markdown","6168f873":"markdown","d6ae19f8":"markdown","75452b4f":"markdown"},"source":{"1ad16107":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nplt.style.use('ggplot')\nfrom sklearn import neighbors, linear_model\nfrom sklearn.model_selection import train_test_split\nfrom skimage.feature import greycomatrix, greycoprops\nimport cv2\nfrom tqdm import tqdm_notebook as tqdm\nimport seaborn as sns\nfrom sklearn.decomposition import PCA","4782a310":"import warnings\nwarnings.filterwarnings('ignore')","08985a6e":"%matplotlib inline","0a18d64f":"from matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 10,8","b8174b5c":"img_width = 64\nimg_height = 64\ntrain_root_folder = 'fibrosis_patches_png\/train\/'\ntest_root_folder = 'fibrosis_patches_png\/test\/'","050de8b4":"df_files = pd.read_csv('train.csv')\ndf_files = df_files.sample(frac=1.0, random_state=42)\ndf_files.head()","5dd895d4":"df_files['class'].hist(bins=3);","11ad43b7":"X = np.zeros((df_files.shape[0],img_width, img_height), dtype=np.uint8)\nfor idx,file in tqdm(enumerate(df_files['filename'])):\n    X[idx] = cv2.imread(train_root_folder+file,0)","f755ef85":"for i in range(9):\n    plt.subplot(3,3,i+1)\n    idx = np.random.randint(df_files.shape[0])\n    plt.imshow(X[idx], cmap='bone')\n    plt.title('Class:' + str(df_files.iloc[idx,1]))\n    plt.grid('off')\n    plt.axis('off')\nplt.subplots_adjust(hspace=0.15, wspace=0.01)","23ab11f4":"y = df_files['class']\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=42)","4a89a891":"def calc_GLCM_features(X):\n    GLCM_features = np.zeros((X.shape[0], 4), dtype=np.float32)\n    for i in tqdm(range(X.shape[0])):\n        img = X[i]\n        glcm = greycomatrix(img, [2], [0], 256, symmetric=True, normed=True)\n        GLCM_features[i] = np.array([greycoprops(glcm, 'dissimilarity')[0, 0],\n                           greycoprops(glcm, 'correlation')[0, 0],\n                           greycoprops(glcm, 'homogeneity')[0, 0],\n                           greycoprops(glcm, 'contrast')[0, 0]])\n    return GLCM_features","4ae5e4d3":"GLCM_train = calc_GLCM_features(X_train)\nGLCM_val = calc_GLCM_features(X_val)","2a724c61":"titles = ['dissimilarity', 'correlation' , 'homogeneity', 'contrast']\nfor i in range(4):\n    plt.subplot(2,2,i+1)\n    sns.kdeplot(GLCM_train[y_train==1, i], label='pathology');\n    sns.kdeplot(GLCM_train[y_train==0, i], label='norm');\n    plt.title(titles[i]);","1287fae2":"pca = PCA(n_components=2)\nGLCM_pca = pca.fit_transform(GLCM_train)\nplt.plot(GLCM_pca[y_train==1],'bo', label='pathology');\nplt.plot(GLCM_pca[y_train==0],'rx', label='norm');","6032c99a":"knn = neighbors.KNeighborsClassifier()\nlogistic = linear_model.LogisticRegression()\nprint('KNN score: %f' % knn.fit(GLCM_train, y_train).score(GLCM_val, y_val))\nprint('LogisticRegression score: %f'\n      % logistic.fit(GLCM_train, y_train).score(GLCM_val, y_val))","24f1d080":"GLCM_X = calc_GLCM_features(X)\nlogistic.fit(GLCM_X, y)","ac54f0bd":"df_test = pd.read_csv('test.csv')\nX_test = np.zeros((df_test.shape[0],img_width, img_height), dtype=np.uint8)\nfor idx,file in tqdm(enumerate(df_test['filename'])):\n    X_test[idx] = cv2.imread(test_root_folder+file,0)\nGLCM_test = calc_GLCM_features(X_test)","2b895c8f":"predictions = logistic.predict(GLCM_test)\ndf_pred = pd.DataFrame(predictions, columns=['predictions'])\ndf_pred = pd.concat((df_test, df_pred), axis=1)","fb6b5e9d":"df_files.head()","5fb8b28d":"df_pred.to_csv('sample_submission.csv', header=True, index=None)","07f92502":"Now it is time to read the test file and to make predictions.","4d3be13d":"Let's take a look if extracted features are distinguishable. In some way yes, they are.","50a03b70":"## This is not interactive kernel. Download it and check it on the downloaded data.","f4626968":"Not really. But it is a baseline, so let's build a linear classifier:)","d1933588":"Let's plot the PCA projection to check if they are linearly separable.","6168f873":"The dataset more or less balanced. Let's load it.","d6ae19f8":"So the score is fine for the baseline model. Let's fit the logistic regression on the whole train set.","75452b4f":"As it can be noticed patches are visually inseparable. Let's split the dataset and extract some features from the both parts."}}