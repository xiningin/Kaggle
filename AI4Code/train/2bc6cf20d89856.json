{"cell_type":{"0e62616c":"code","0fe35c46":"code","c9c7dbcb":"code","0bc44be1":"code","f9010128":"code","7edb0183":"code","32c462d2":"code","cd476a86":"code","788e2013":"code","72192645":"code","baa886d4":"code","25f67655":"code","d1c64c2a":"code","bf3ca30a":"code","04eb75d8":"code","7a4307f9":"code","e83029da":"code","a0b7f382":"code","a5337b25":"code","eb8f59ae":"code","e7b4931d":"code","d8cb4212":"code","06143e41":"code","1fa23c04":"code","8618fbfa":"code","cebf53e9":"code","e7beb71b":"code","28405b24":"code","72a0ae0a":"code","897340b6":"code","617756a9":"code","9a0af3ab":"code","1f085843":"code","91b2de98":"code","916ab5b6":"code","e88664f6":"code","e7592808":"code","df17535d":"code","e3df0466":"code","973d463c":"code","fa2946a0":"code","bdb97220":"code","5964a89c":"code","33a02d75":"code","634f8909":"code","c0b4310d":"code","f28f006f":"code","0cbd0656":"code","0e894f70":"code","b23d2749":"code","e43ddcc7":"code","609e9cd0":"code","c3440af9":"code","a5198e46":"code","609b1430":"code","6f7589cd":"code","109fd8e3":"code","379f7bd9":"code","e0fe33ed":"code","660c6a73":"code","55a7d6d5":"code","16ee8779":"code","6cdcde6d":"code","ea9fa55f":"code","5fb5d96d":"code","1ebad8d3":"code","5cd2e7fb":"code","01a948b0":"code","975540de":"code","7696076b":"code","244af1e3":"code","5f94afbb":"code","01840c7f":"code","04c3a232":"code","7af9993d":"markdown","4971afd6":"markdown","dccf377b":"markdown","540909ea":"markdown","aead78f0":"markdown","b6525757":"markdown","76906933":"markdown","fe3039b7":"markdown","738c0bca":"markdown","38a3e2e7":"markdown"},"source":{"0e62616c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0fe35c46":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport seaborn as sb\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c9c7dbcb":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head()","0bc44be1":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.head()","f9010128":"print('Train data size',train_data.shape)\nprint('Test data size',test_data.shape)","7edb0183":"train_data.info()","32c462d2":"train_data.isnull().sum()","cd476a86":"train_data.describe()","788e2013":"train_data['Pclass'].value_counts()","72192645":"train_data['Survived'].value_counts()","baa886d4":"Counter(train_data['Sex'])","25f67655":"train_data['SibSp'].value_counts()","d1c64c2a":"train_data['Parch'].value_counts()","bf3ca30a":"train_data['Embarked'].value_counts()","04eb75d8":"#train_data = df\n#df.head()\ndf = pd.DataFrame(train_data)\ndf.head()","7a4307f9":"rcParams['figure.figsize'] = 10,5\nsb.barplot(x = df['Survived'].value_counts().index, y = df['Survived'].value_counts().values)\nplt.title('Survival counts')\nplt.xlabel('Survived')\nplt.ylabel('No of passengers')\nplt.show()","e83029da":"rcParams['figure.figsize'] = 10,5\nsb.barplot(x = df['Pclass'].value_counts().index, y = df['Pclass'].value_counts().values)\nplt.title('Types of passenger class')\nplt.xlabel('Class')\nplt.ylabel('No of passengers')\nplt.show()","a0b7f382":"rcParams['figure.figsize'] = 10,5\nsb.barplot(x = df['Sex'].value_counts().index, y = df['Sex'].value_counts().values)\nplt.title('Male and Female counts')\nplt.xlabel('Counts')\nplt.ylabel('No of passengers')\nplt.show()","a5337b25":"gender = pd.crosstab(df['Survived'],df['Sex'])\ngender","eb8f59ae":"gender.plot(kind=\"bar\",title='No of passengers survived')\nplt.show()","e7b4931d":"rcParams['figure.figsize'] = 10,5\nsb.barplot(x = df['Embarked'].value_counts().index, y = df['Embarked'].value_counts().values)\nplt.title('port')\nplt.xlabel('count')\nplt.ylabel('No of passengers')\nplt.show()","d8cb4212":"rcParams['figure.figsize'] = 10,5\nsb.barplot(x = df['SibSp'].value_counts().index, y = df['SibSp'].value_counts().values)\nplt.title('Number of siblings\/spouses aboard')\nplt.xlabel('count')\nplt.ylabel('No of passengers')\nplt.show()","06143e41":"rcParams['figure.figsize'] = 10,5\nsb.barplot(x = df['Parch'].value_counts().index, y = df['Parch'].value_counts().values)\nplt.title('Number of parents\/childrens aboard')\nplt.xlabel('count')\nplt.ylabel('No of passengers')\nplt.show()","1fa23c04":"rcParams['figure.figsize'] = 10,5\nsb.countplot(x = 'Survived',hue = 'Pclass',data = df)\nplt.show()","8618fbfa":"rcParams['figure.figsize'] = 10,5\nsb.countplot(x = 'Survived', hue = 'Embarked', data = df)\nplt.show()","cebf53e9":"rcParams['figure.figsize'] = 10,5\nsb.countplot(x = 'Survived', hue = 'SibSp', data = df)\nplt.show()","e7beb71b":"rcParams['figure.figsize'] = 10,5\nsb.countplot(x = 'Survived', hue = 'Parch', data = df)\nplt.show()","28405b24":"rcParams['figure.figsize'] = 10,5\n#plt.hist(df['Age'],bins =15,alpha = 0.9)\nax = df['Age'].hist(bins = 15,alpha = 0.9, color = 'green')\nax.set(xlabel = 'Age',ylabel = 'Count',title = 'Visualization of Ages')\nplt.show()","72a0ae0a":"rcParams['figure.figsize'] = 10,10\nsb.heatmap(df.corr(),annot = True,square = True,linewidths = 2,linecolor = 'black')","897340b6":"delete = ['Ticket','Cabin','Name','Fare','Embarked']","617756a9":"train = train_data.drop(delete,axis = 1)","9a0af3ab":"train.head()","1f085843":"test = test_data.drop(delete,axis =1)","91b2de98":"test.head()","916ab5b6":"from sklearn.preprocessing import LabelEncoder\nenc = LabelEncoder()","e88664f6":"train['Sex'] = enc.fit_transform(train['Sex'])","e7592808":"train.head(2)","df17535d":"test['Sex'] = enc.fit_transform(test['Sex'])","e3df0466":"test.head(2)","973d463c":"train.dtypes","fa2946a0":"train.isnull().sum()","bdb97220":"train.fillna(train['Age'].median(),inplace = True)","5964a89c":"train.isnull().sum()","33a02d75":"test.fillna(train['Age'].median(),inplace = True)","634f8909":"test.isnull().sum()","c0b4310d":"test.set_index(['PassengerId'],inplace = True)","f28f006f":"test.head(2)","0cbd0656":"train.set_index(['PassengerId'],inplace = True)","0e894f70":"train.head()","b23d2749":"X = train[['Pclass','Sex','Age','SibSp','Parch']]\ny = train.Survived","e43ddcc7":"X.head(2)","609e9cd0":"y.head(2)","c3440af9":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB,MultinomialNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom xgboost import XGBClassifier","a5198e46":"from sklearn import model_selection\nfrom sklearn.model_selection import train_test_split,cross_val_score,validation_curve,KFold","609b1430":"X_train,X_test,y_train,y_test = train_test_split(X,y,random_state = 10,test_size=0.25)","6f7589cd":"models = []\nmodels.append(('LG', LogisticRegression()))\nmodels.append(('SVC', SVC()))\nmodels.append(('DTC', DecisionTreeClassifier()))\nmodels.append(('RFC', RandomForestClassifier()))\nmodels.append(('KNC', KNeighborsClassifier()))\nmodels.append(('MLP', MLPClassifier()))\nmodels.append(('XGB-TREE', XGBClassifier(booster='gbtree')))\nmodels.append(('XGB-DART', XGBClassifier(booster='dart')))\nmodels.append(('GNB', GaussianNB()))","109fd8e3":"seed = 10\nresults = []\nnames = []\noutput = []\nscore = 'accuracy'\nfor name,model in models:\n    kfold = model_selection.KFold(n_splits = 5,random_state = seed)\n    result = model_selection.cross_val_score(model,np.array(X_train),np.array(y_train),cv=kfold,scoring=score)\n    results.append(result)\n    names.append(name)\n    values = name,result.mean()\n    output.append(values)\nprint(output)","379f7bd9":"rcParams['figure.figsize'] = 10,5\nfig = plt.figure()\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","e0fe33ed":"from xgboost import XGBClassifier\nmodel = XGBClassifier()\nmodel.fit(X_train,y_train)","660c6a73":"y_predict = model.predict(X_test)","55a7d6d5":"from sklearn.metrics import accuracy_score,classification_report,roc_auc_score,roc_curve","16ee8779":"accuracy_score(y_test,y_predict).round(4)*100","6cdcde6d":"pd.crosstab(y_test,y_predict)","ea9fa55f":"print(classification_report(y_test,y_predict))","5fb5d96d":"auc = roc_auc_score(y_test,y_predict)\nprint('XGB AUC : %.2f'%auc)","1ebad8d3":"rf_fpr,rf_tpr,_ = roc_curve(y_test,y_predict)\nplt.plot(rf_fpr,rf_tpr,marker='_',label = 'XGB')\nplt.xlabel('FPR')\nplt.ylabel('TPR')\nplt.legend()\nplt.show()","5cd2e7fb":"test_predict = model.predict(test)","01a948b0":"test_predict = pd.Series(test_predict)","975540de":"test.reset_index(inplace = True)","7696076b":"predict = test['PassengerId']","244af1e3":"predict = pd.concat([predict,test_predict], axis=1)","5f94afbb":"predict.rename(columns={0: \"Survived\"},inplace=True)","01840c7f":"predict.to_csv(\"submission.csv\",index=False)","04c3a232":"sb.countplot(predict.Survived)","7af9993d":"* 0 --> Not Survived\n* 1 --> Survived","4971afd6":"# **Exploratory Data Analysis**","dccf377b":"# Modelling","540909ea":"# Data Preparation","aead78f0":"1. Here we can see survival rate for female is more than male.\n2. And not survived counts are mostly men.","b6525757":"# **Knowing about the each variables**","76906933":"# **Importing Necessary Packages**","fe3039b7":"* I am gonna use XGB because its performs well.","738c0bca":"* Here we can see class 1 & 2 are slightly different having less no of counts has not survived.\n* but class 3 had more counts in not survived.","38a3e2e7":"* Among total no of passengers male counts are larger than the female. "}}