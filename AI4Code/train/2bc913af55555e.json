{"cell_type":{"ca8224be":"code","32cb3f60":"code","b3dd173f":"code","56aede6e":"code","4c659aa2":"code","1ddb8d72":"code","ce4b9054":"code","08e2202c":"code","f3797ade":"code","cabd1da9":"code","602a2d72":"code","9e4ed547":"code","3df11398":"code","08346e82":"code","c2b5eda5":"code","c524c258":"code","2f955b12":"code","38ad3802":"markdown","72e5c462":"markdown","b2f9c304":"markdown","95b0dda6":"markdown","3efe1115":"markdown","395e6ff8":"markdown","f5622cfc":"markdown","2f865fdc":"markdown","290c9167":"markdown"},"source":{"ca8224be":"import numpy as np\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-deep')\nimport matplotlib.cm as mplcm\nimport matplotlib.colors as colors\nfrom matplotlib.widgets import Cursor \nfrom matplotlib.ticker import FormatStrFormatter\n\nimport pandas as pd \nimport scipy.stats as spstats\nimport gc\n\nimport tensorflow as tf\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n%matplotlib inline\n","32cb3f60":"crop_df = pd.read_csv(\"..\/input\/apy.csv\", encoding=\"utf-8\")\ncols = [\"State_Name\", \"District_Name\", \"Crop_Year\", \"Season\", \"Crop\", \"Area\", \"Production\"]","b3dd173f":"seasons = crop_df[\"Season\"].unique()\nseasons\n","56aede6e":"states = crop_df[\"State_Name\"].unique()\nstates","4c659aa2":"crops = crop_df[\"Crop\"].unique()\nyears = np.sort(crop_df[\"Crop_Year\"].unique())\n\nprint(\"Number of Crops : \", len(crops), \", Number of Seasons : \",len(seasons), \", Number of States : \", len(states), \", Number of Years : \", len(years))","1ddb8d72":"crop_df.head()","ce4b9054":"state_df = crop_df\n\n# Initialize\nstates_df = pd.DataFrame({\"State\":[state for state in states]}).set_index(\"State\")\npd.set_option('display.float_format', lambda x: '%.3f' % x)\n\nfor year in years:\n    states_df[year] = [0 for state in states]\n\n# Fill out\nfor state in states:\n    for year in years:\n        state_df = crop_df\n        state_df = state_df[state_df.State_Name.str.contains(state) == True]\n        state_df = state_df[state_df.Crop_Year.isin([year]) == True]\n        s = state_df[\"Production\"].sum()\n        states_df.loc[state,year] = s \nstates_df = states_df.T","08e2202c":"# plot Bar Chart given the states\n\ndef plotBar(states):\n    fig = plt.figure(figsize=(13,15))\n    ax = fig.add_subplot(111)\n\n    average = []\n    stddevs = []\n\n    for state in states:\n        stddevs.append(np.std(np.asarray(states_df[state])))\n        average.append(np.mean(states_df[state]))\n\n    xAvg = [i for i in range(0,101) if i%2 == 0 or i == 0][:len(states)]\n\n    cursor = Cursor(ax, useblit=True, color='red', linewidth=0.5)\n    ax.set_title(\"Average Production acheived Standard Deviation\", fontsize=15)\n    ax.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))\n    ax.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))\n    \n    plt.xlabel(\"State\")\n    plt.ylabel(\"Production\")\n    plt.xticks(xAvg, states,fontsize=12, rotation=90)\n    plt.bar(xAvg, average, yerr=stddevs)\n\n\n    plt.show()\n","f3797ade":"# Plot Timeseries for each of the states based on the Production\ndef plotTimeseries(states,window):\n\n\n    fig = plt.figure(figsize=(13,10))\n    ax = fig.add_subplot(111)\n\n    def movingaverage (values, win):\n        weights = np.repeat(1.0, win)\/win\n        sma = np.convolve(values, weights, 'valid')\n        return sma\n\n    NUM_COLORS = len(states)\n\n    cm = plt.get_cmap('gist_rainbow')\n    cNorm  = colors.Normalize(vmin=0, vmax=NUM_COLORS-1)\n    scalarMap = mplcm.ScalarMappable(norm=cNorm, cmap=cm)\n\n    ax.set_color_cycle([scalarMap.to_rgba(i) for i in range(NUM_COLORS)])\n    ax.set_title(\"Yearly Production of each of the states\", fontsize=15)\n\n    for state in states:\n        ma = movingaverage(states_df[state],window)\n        ax.plot(years[len(years)-len(ma):],ma,label=state)\n        ax.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))\n\n    plt.legend(loc='upper left')\n    plt.show()","cabd1da9":"# Plot Timeseries for each of the states based on the Production\n\ndef plotBoxplot(states):    \n    fig = plt.figure(figsize=(13,10))\n    ax = fig.add_subplot(111)\n    \n    state_df = states_df[[state for state in states]]\n\n    ax.boxplot(state_df.T)\n    ax.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))    \n    ax.set_xticklabels(states, rotation=90)\n    \n    plt.legend(loc='upper left')\n    plt.show()","602a2d72":"plotTimeseries(states,3)","9e4ed547":" plotBar(states)","3df11398":"statesN = [state for state in states if state not in [\"Kerala\", \"Andhra Pradesh\", \"Tamil Nadu\"]]","08346e82":"plotTimeseries(statesN,3)","c2b5eda5":"plotBar(statesN)","c524c258":"plotBoxplot(states)","2f955b12":"plotBoxplot(statesN)","38ad3802":"## Plot 2.1 :-\n#### Bar Graph comparing the Average Production and Standard Deviation of each state over time","72e5c462":"> We can see from the data that Kerala, Andhra Pradesh and Tamil Nadu have the highest average amongst them all. \n\n> As we compare the other states with them in terms of the average we aren't able to make out much of them.\nEven in the timeseries plot it isn't possible for us to decipher much in terms of the dynamicity of this data.\n\n> Let's take them out of the picture and lets see what we get.\n","b2f9c304":"#### Removing Outliers","95b0dda6":"## Data Preprocessing and Function Definitions","3efe1115":"## Plot 2.2  (Removing the Outliers from before) :-\n#### Bar Graph comparing the Average Production and Standard Deviation of each state over time","395e6ff8":"## Plot 3 :-\n#### Boxplots to understand the speard of data a little better","f5622cfc":"## Plot 1.1 :-\n#### TimeSeries representing the crop production of eact state over time","2f865fdc":"## Plot 1.2 (Removing the Outliers from before) :-\n#### TimeSeries representing the crop production of eact state over time","290c9167":"#### Removing Outliers"}}