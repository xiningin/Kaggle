{"cell_type":{"b311bb07":"code","2c9c9ae6":"code","3708e7ad":"code","d97e1746":"code","32bd929b":"code","83ce55a0":"code","560843ce":"code","69bfa830":"code","669f5ef8":"code","5c283da4":"code","bc382487":"code","9c2ea742":"code","a52dec30":"code","d3fc53db":"code","3364c2ae":"code","a9929485":"code","7c4960f4":"code","53a472d1":"code","05297600":"code","510877d8":"code","1cded805":"code","701548df":"code","2a8dadd5":"code","51d1762b":"code","14b95132":"code","eeae412b":"code","14c03af4":"code","90e023e0":"code","3e9413be":"code","1f8d4ee6":"code","5c826ee2":"code","497ebc1b":"code","ee451291":"code","0de71a50":"markdown","9b9a605c":"markdown","1c826230":"markdown","d16a4740":"markdown","06802a09":"markdown","9f59a4f3":"markdown","f6044498":"markdown","fe1e5c44":"markdown"},"source":{"b311bb07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c9c9ae6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nimport category_encoders as ce\nfrom catboost import CatBoostClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn import model_selection\nimport lightgbm as lgbm\nimport xgboost as xgb\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import StackingClassifier, VotingClassifier\nimport optuna\nimport tqdm\nimport warnings\nimport sklearn.exceptions\nwarnings.filterwarnings('ignore', category=DeprecationWarning)\nwarnings.filterwarnings('ignore', category=FutureWarning)\nwarnings.filterwarnings('ignore', category=RuntimeWarning)\nwarnings.filterwarnings('ignore', category=UserWarning)\nwarnings.filterwarnings(\"ignore\", category=sklearn.exceptions.UndefinedMetricWarning)","3708e7ad":"train_df = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/train.csv')\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/test.csv')","d97e1746":"train_df","32bd929b":"test_df","83ce55a0":"fig, ax = plt.subplots(figsize=(10, 6))\nsns.countplot(x='target', data=train_df)\nax.set_title('Target Distribution')","560843ce":"skewValue = train_df.skew(axis=0)","69bfa830":"for item in skewValue:\n    print(item)","669f5ef8":"train_df.drop(columns=['id']).describe().T.style.bar(subset=['mean'], color='#606ff2')\\\n                            .background_gradient(subset=['std'], cmap='BrBG')\\\n                            .background_gradient(subset=['min'], cmap='BrBG')\\\n                            .background_gradient(subset=['50%'], cmap='BrBG')\n","5c283da4":"le = LabelEncoder()\ntrain_df['target'] = le.fit_transform(train_df['target'])\ntrain_df.columns\n\n\ncols = list(train_df.columns)\ncols.remove(\"target\")\ncols.remove(\"id\")","bc382487":"train_df.columns","9c2ea742":"scaler = StandardScaler()\ntrain_df[cols] = scaler.fit_transform(train_df[cols])\ntest_df[cols] = scaler.transform(test_df[cols])","a52dec30":"X=train_df.drop(['target','id'],axis=1)\nY=train_df['target']","d3fc53db":"def objective(trial,data=X,target=Y):\n    \n    X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.25,random_state=50)\n    params = {'iterations':trial.suggest_int(\"iterations\", 4000, 16000),\n              'od_wait':trial.suggest_int('od_wait', 500, 3200),\n             'loss_function':'MultiClass',\n              'task_type':\"GPU\",\n              'eval_metric':'MultiClass',\n              'leaf_estimation_method':'Newton',\n              'bootstrap_type': 'Bernoulli',\n              'learning_rate' : trial.suggest_uniform('learning_rate',0.01,0.5),\n              'reg_lambda': trial.suggest_uniform('reg_lambda',1e-5,100),\n              'subsample': trial.suggest_uniform('subsample',0,1),\n              'random_strength': trial.suggest_uniform('random_strength',10,30),\n              'depth': trial.suggest_int('depth',1,6),\n              'min_data_in_leaf': trial.suggest_int('min_data_in_leaf',1,30),\n              'leaf_estimation_iterations': trial.suggest_int('leaf_estimation_iterations',1,8),\n               }\n    model = CatBoostClassifier(**params)  \n    model.fit(X_train,y_train,eval_set=[(X_test,y_test)],early_stopping_rounds=100,verbose=False)\n        \n    y_preds = model.predict_proba(X_test)\n\n\n    log_loss_multi = log_loss(y_test, y_preds)\n    \n    return log_loss_multi\n","3364c2ae":"OPTUNA_OPTIMIZATION = True\n\nstudy = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=25)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial: score {}, params {}'.format(study.best_trial.value, study.best_trial.params))","a9929485":"if OPTUNA_OPTIMIZATION:\n    display(optuna.visualization.plot_optimization_history(study))\n    display(optuna.visualization.plot_slice(study))","7c4960f4":"cat_params = study.best_trial.params\ncat_params['loss_function'] = 'MultiClass'\ncat_params['eval_metric'] = 'MultiClass'\ncat_params['bootstrap_type']= 'Bernoulli'\ncat_params['leaf_estimation_method'] = 'Newton'\ncat_params['random_state'] = 42\ncat_params['task_type']='GPU'\ntest_preds=None\n\nkf = StratifiedKFold(n_splits = 10 , shuffle = True , random_state = 50)\nfor fold, (tr_index , val_index) in enumerate(kf.split(X.values , Y.values)):\n    \n    print(\"-\" * 50)\n    print(f\"Fold {fold + 1}\")\n    \n    x_train,x_val = X.values[tr_index] , X.values[val_index]\n    y_train,y_val = Y.values[tr_index] , Y.values[val_index]\n        \n    eval_set = [(x_val, y_val)]\n    \n    model =CatBoostClassifier(**cat_params)\n    model.fit(x_train, y_train, eval_set = eval_set, verbose = False)\n    \n    train_preds = model.predict(x_train)    \n    val_preds = model.predict_proba(x_val)\n    \n    print(log_loss(y_val, val_preds))\n    \n    if test_preds is None:\n        test_preds = model.predict_proba(test_df[cols].values)\n    else:\n        test_preds += model.predict_proba(test_df[cols].values)\n\nprint(\"-\" * 50)\ntest_preds \/= 10\n","53a472d1":"submission1 = pd.read_csv(\"..\/input\/tabular-playground-series-jun-2021\/sample_submission.csv\")\nsubmission1['Class_1']=test_preds[:,0]\nsubmission1['Class_2']=test_preds[:,1]\nsubmission1['Class_3']=test_preds[:,2]\nsubmission1['Class_4']=test_preds[:,3]\nsubmission1['Class_5']=test_preds[:,4]\nsubmission1['Class_6']=test_preds[:,5]\nsubmission1['Class_7']=test_preds[:,6]\nsubmission1['Class_8']=test_preds[:,7]\nsubmission1['Class_9']=test_preds[:,8]\nsubmission1.head()","05297600":"submission1.to_csv(\"sub_1.csv\",index=False)","510877d8":"from xgboost import XGBClassifier\nimport xgboost\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score, roc_auc_score, make_scorer","1cded805":"\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.25,random_state=50)\n\nxgb_clf = XGBClassifier(learning_rate = 0.1, n_estimators = 200,use_label_encoder = False, verbose= None, objective = 'multi:softmax', eval_metric = 'mlogloss',eval_set = [X_test, y_test])\n\nxgb_clf.fit(X_train, y_train)","701548df":"y_pred_xgb_pr = xgb_clf.predict_proba(X_test)\n\ny_pred_xgb = xgb_clf.predict(X_test)","2a8dadd5":"acc_scr_xgb = accuracy_score(y_test, y_pred_xgb)\nacc_scr_xgb","51d1762b":"auc_score_xgb = roc_auc_score(y_test, y_pred_xgb_pr, multi_class = 'ovr')\nauc_score_xgb","14b95132":"clf_xgb = classification_report(y_test, y_pred_xgb)\nprint(clf_xgb)","eeae412b":"cfm_xgb = confusion_matrix(y_test, y_pred_xgb)","14c03af4":"plt.figure(figsize = (8, 6))\nsns.heatmap(cfm_xgb, annot = True)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")","90e023e0":"feat_importances = xgb_clf.feature_importances_","3e9413be":"feat_list = X_train.columns","1f8d4ee6":"plt.figure(figsize = (15,15))\nplt.barh(list(feat_list), feat_importances)\nplt.yticks(list(range(0,77)))\nplt.xlabel(\"Feature score\")\nplt.ylabel(\"Feature list\")","5c826ee2":"import shap","497ebc1b":"explainer = shap.TreeExplainer(xgb_clf)\n\nshap_values = explainer.shap_values(X_test)","ee451291":"shap.summary_plot(shap_values, X_test)","0de71a50":"Performing Stratified KFold Cross Validation:","9b9a605c":"Model Explainability with SHAP library:","1c826230":"Data Transformation: ","d16a4740":"Trying out XGB Classifier:","06802a09":"Scaling","9f59a4f3":"Generating the submission file:","f6044498":"skewness > 0 : more weight in the left tail of the distribution. skewness < 0 : more weight in the right tail of the distribution.","fe1e5c44":"Applying Optuna:"}}