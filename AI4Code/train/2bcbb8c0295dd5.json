{"cell_type":{"48fbe399":"code","29d4cdef":"code","019ff143":"code","70ab9680":"code","a7934baf":"code","0254d224":"code","78e12799":"code","3ebf8226":"code","f738e7a8":"code","5bfc0ff6":"code","a276c507":"code","3ca8f01f":"code","fb049511":"code","8659f4d0":"code","03c3b664":"code","1fdb2e15":"code","3e82866b":"markdown","a5e799d8":"markdown","8f260001":"markdown","1e64015c":"markdown","e9af25eb":"markdown","66b32ce4":"markdown","03641ef4":"markdown","e3a5a193":"markdown","5e2f20d7":"markdown","f08214ed":"markdown"},"source":{"48fbe399":"import pandas as pd\nimport numpy as np\nimport random\n\nimport os\nimport glob\n\nimport cv2\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(10,6)})\nsns.set(font_scale=1.3)\nplt.style.use('fivethirtyeight')\n\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.models import Sequential\nfrom keras.layers import SeparableConv2D, BatchNormalization, Dropout, BatchNormalization, MaxPooling2D, Conv2D, Flatten, Dense\nfrom keras.callbacks import ReduceLROnPlateau, LearningRateScheduler, EarlyStopping\nfrom keras.preprocessing.image import ImageDataGenerator\n\nimport warnings\nwarnings.filterwarnings('ignore')","29d4cdef":"train_path = glob.glob('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/*\/*')\ntest_path = glob.glob('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/*\/*')\nval_path = glob.glob('..\/input\/chest-xray-pneumonia\/chest_xray\/val\/*\/*')","019ff143":"train, test = train_test_split(train_path, test_size=.2, shuffle=True)\n\nprint('Images for training:', len(train))\nprint('Images for validation:', len(test))","70ab9680":"normal = len([x for x in train_path if 'NORMAL' in x])\npneumonia = len([x for x in train_path if 'PNEUMONIA' in x])","a7934baf":"img_size = 180\ndef inp_process(file):\n    data = []\n    for f in file:\n        try:\n            part = f.split('\/')\n            assert part[-2] in ['NORMAL','PNEUMONIA']\n            label = 1 if part[-2] == 'PNEUMONIA' else 0\n            img = cv2.imread(f, cv2.IMREAD_GRAYSCALE)\n            r_siz = cv2.resize(img, (img_size, img_size))\n        except Exception as e:\n            raise Exception(e)\n        data.append([r_siz, label])\n    return np.array(data)","0254d224":"train = inp_process(train_path)\ntest = inp_process(test_path)\nval = inp_process(val_path)","78e12799":"x_train = []\ny_train = []\n\nx_val = []\ny_val = []\n\nx_test = []\ny_test = []\n\nfor feature, label in train:\n    x_train.append(feature)\n    y_train.append(label)\n\nfor feature, label in val:\n    x_val.append(feature)\n    y_val.append(label)\n\nfor feature, label in test:\n    x_test.append(feature)\n    y_test.append(label)","3ebf8226":"x_train = np.array(x_train) \/ 255.\nx_val = np.array(x_val) \/ 255.\nx_test = np.array(x_test) \/ 255.","f738e7a8":"x_train = x_train.reshape(-1, img_size, img_size, 1)\ny_train = np.array(y_train)\n\nx_test = x_test.reshape(-1, img_size, img_size, 1)\ny_test = np.array(y_test)\n\nx_val = x_val.reshape(-1, img_size, img_size, 1)\ny_val = np.array(y_val)","5bfc0ff6":"model = Sequential()\nmodel.add(Conv2D(16, 3, activation='relu', padding='same',input_shape = (img_size,img_size,1)))\nmodel.add(Conv2D(16, 3, activation='relu', padding='same'))\nmodel.add(MaxPooling2D())\n\nmodel.add(SeparableConv2D(32, 3, activation='relu', padding='same'))\nmodel.add(SeparableConv2D(32, 3, activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\n\nmodel.add(SeparableConv2D(64, 3, activation='relu', padding='same'))\nmodel.add(SeparableConv2D(64, 3, activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\n\nmodel.add(SeparableConv2D(128, 3, activation='relu', padding='same'))\nmodel.add(SeparableConv2D(128, 3, activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\n\nmodel.add(Dropout(.2))\n\nmodel.add(SeparableConv2D(256, 3, activation='relu', padding='same'))\nmodel.add(SeparableConv2D(256, 3, activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\n\nmodel.add(Dropout(.2))\nmodel.add(Flatten())\n\nmodel.add(Dense(256, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(.7))\n\nmodel.add(Dense(128, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(.5))\n\nmodel.add(Dense(64, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(.3))\n\nmodel.add(Dense(1, activation='sigmoid'))","a276c507":"weight_normal = len(x_train) \/ (2*normal)\nweight_pneumonia = len(x_train) \/ (2*normal)\n\nclass_weight = {0:weight_normal, 1:weight_pneumonia}","3ca8f01f":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","fb049511":"epochs = 30\nbatch_size = 100\n\nstop = EarlyStopping(monitor='val_loss', patience=15, mode='min', verbose=1, restore_best_weights=True)\nredutor = ReduceLROnPlateau(monitor='val_accuracy', patience=3, verbose=1, factor=0.5, min_lr=0.00001)","8659f4d0":"aug = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,\n        rotation_range=3,  # Gira a imagem em 3 graus\n        zoom_range = 0.1, # Da um zoom na imagem de forma aleat\u00f3ria\n        width_shift_range=0.1,  # Move a imagem de forma aleat\u00f3ria horizontalmente\n        height_shift_range=0.1)  # Move a imagem de forma aleat\u00f3ria verticalmente\naug.fit(x_train)","03c3b664":"history = model.fit(aug.flow(x_train, y_train, batch_size=batch_size),epochs=epochs, validation_data=(x_test, y_test), class_weight=class_weight,\n                            callbacks = [stop, redutor])","1fdb2e15":"fig, axes = plt.subplots(1, 2, figsize=(15,5))\naxes[0].plot(history.history['accuracy'])\naxes[0].plot(history.history['val_accuracy'])\naxes[0].set_xlabel('Epochs')\naxes[0].set_ylabel('Acur\u00e1cia')\naxes[0].legend(['Acur\u00e1cia em Treino','Acur\u00e1cia em Teste'])\naxes[0].grid(True)\n\naxes[1].plot(history.history['loss'])\naxes[1].plot(history.history['val_loss'])\naxes[1].set_xlabel('Epochs')\naxes[1].set_ylabel('Erro')\naxes[1].legend(['Erro em Treino','Erro em Teste'])\naxes[1].grid(True)","3e82866b":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Pneumonia<\/p>","a5e799d8":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Train Model<\/p>","8f260001":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Result<\/p>","1e64015c":"# <p style=\"background-color:#ced5de; font-family:newtimeroman; font-size:120%; text-align:center; padding-top:8px; padding-bottom:8px;\">Placing the images in the same format<\/p>","e9af25eb":"# <p style=\"background-color:#ced5de; font-family:newtimeroman; font-size:120%; text-align:center; padding-top:8px; padding-bottom:8px;\">Normalization<\/p>","66b32ce4":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Preprocessing<\/p>","03641ef4":"# <p style=\"background-color:#ced5de; font-family:newtimeroman; font-size:120%; text-align:center; padding-top:8px; padding-bottom:8px;\">Preparing the images<\/p>","e3a5a193":"Weight","5e2f20d7":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Input<\/p>","f08214ed":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Processing<\/p>"}}