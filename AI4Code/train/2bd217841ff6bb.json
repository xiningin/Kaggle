{"cell_type":{"8056eb2c":"code","86c83b23":"code","ab0773f2":"code","d121a36a":"code","fadfa690":"code","6f7c9243":"code","5554b3c6":"code","a8d1fc5d":"code","4d971339":"code","e1247642":"code","a734d4b3":"code","70a9fb27":"code","d07ef79e":"markdown","319d1143":"markdown","27ef9a55":"markdown","65bfb32f":"markdown","55f38eaa":"markdown","63792f14":"markdown","e6b97f66":"markdown","e4554db7":"markdown","c07d136f":"markdown"},"source":{"8056eb2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86c83b23":"df = pd.read_csv(\"\/kaggle\/input\/company-bankruptcy-prediction\/data.csv\")\ndf.describe()","ab0773f2":"print('Total number of records is {}'.format(df.shape[0]))\nprint('Total number of features is {}'.format(df.shape[1] - 1))","d121a36a":"target = df.to_numpy()[:, 0]\ndata = df.to_numpy()[:, 1:]\n\nprint('Shape of target {}'.format(target.shape))\nprint('Shape of data {}'.format(data.shape))\n\nprint('We have data spanning 95 features')\nprint('We have target response as Yes or No, 0 or 1')","fadfa690":"from sklearn import preprocessing\nscaler = preprocessing.StandardScaler().fit(data)\nX = scaler.transform(data)","6f7c9243":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\npca.fit(X)\nX_pca = pca.transform(X)\nX_pca.shape","5554b3c6":"import matplotlib.pyplot as plt\nimport matplotlib\n\nfont = {'family' : 'normal',\n        'size'   : 22}\n\nmatplotlib.rc('font', **font)\n\ntxt = \"We can clearly see distinction in two classes, but obviously data for stable companies are relatively small\"\n\nplt.figure(figsize=(15,15)).text(.5, .05, txt, ha='center')\nscatter = plt.scatter(X_pca[:, 0], X_pca[:, 1], c=target)\nplt.legend(handles=scatter.legend_elements()[0], labels=['Bankrupt', 'Stable'])\nplt.xlabel(\"First principal component\")\nplt.ylabel(\"Second principal component\")\n","a8d1fc5d":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, target, random_state=42)\n\nprint('Number of Training data {}'.format(y_train.shape[0]))\nprint('Number of Testing data {}'.format(y_test.shape[0]))","4d971339":"from sklearn.svm import LinearSVC\nfrom sklearn.metrics import accuracy_score\n\n\nlsvc_c_002 = LinearSVC(dual=False, C=0.02).fit(X_train, y_train)\ny_pred_c_002 = lsvc_c_002.predict(X_test)\nacc_for_test = accuracy_score(y_test, y_pred_c_002)\ny_pred_train_c_002 = lsvc_c_002.predict(X_train)\nacc_for_train = accuracy_score(y_train, y_pred_train_c_002)\n\nprint('Accuracy for test data is {}'.format(acc_for_test))\nprint('Accuracy for training data is {}'.format(acc_for_train))","e1247642":"from sklearn.ensemble import GradientBoostingClassifier\n\n\ngbrt = GradientBoostingClassifier(random_state=0, learning_rate = 0.06).fit(X_train, y_train)\n","a734d4b3":"y_pred_test_gbrt = gbrt.predict(X_test)\nacc_for_test_gbrt = accuracy_score(y_test, y_pred_test_gbrt)\ny_pred_train_gbrt = gbrt.predict(X_train)\nacc_for_train_gbrt = accuracy_score(y_train, y_pred_train_gbrt)\n\nprint('Accuracy for test data is {}'.format(acc_for_test_gbrt))\nprint('Accuracy for training data is {}'.format(acc_for_train_gbrt))\n\nprint('I have included regularization by decreasing learning rate to 0.06 for optimal accuracy in the test data and reduction in training data.')","70a9fb27":"\n\ndf_copy = df\nfeature_cols = df_copy.drop(['Bankrupt?'], axis = 1).columns\n\nfeature_importance = gbrt.feature_importances_\nsorted_idx = np.argsort(feature_importance)\npos = np.arange(sorted_idx.shape[0]) + .5\ntxt = \"Note that some of the attributes doesn't play any part in companies financial stability. And very few has a major role like Total Assets and Nwet Income \"\nplt.figure(figsize=(30,50)).text(.5, .05, txt, ha='center')\nplt.barh(pos, feature_importance[sorted_idx],0.8,  align='center')\nplt.yticks(pos, np.array(feature_cols)[sorted_idx])\nplt.title('Feature Importance')","d07ef79e":"## Training Linear SVC\n\nI have increased regularization so that the model does not overfit. I do not want my training data to be 100% accurate when predicted by my model.","319d1143":"## Standardisation\n\nSVC requires data to be standardized for better predictions.","27ef9a55":"# Linear Support Vector Classifier","65bfb32f":"# **Table Description**","55f38eaa":"# Change Pandas Data frame to NumPy","63792f14":"## Training using Gradient boosting Classifier","e6b97f66":"## Splitting data for training and testing","e4554db7":"## Principle Component Analysis\n\nFirst we need to identify if there are any distinction between bankrupt and finacially statble companies. We can achieve this using reducing dimensionalities to two and scattering the plots. ","c07d136f":"### Feature importance for GB Classifier"}}