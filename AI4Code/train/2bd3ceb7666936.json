{"cell_type":{"7a5a0286":"code","8214524e":"code","cb694bde":"code","cc5a50d4":"code","b33772b3":"code","7244d541":"code","46d66e2d":"code","50bb8459":"code","8b597b5a":"code","0511798a":"code","ee306d4c":"code","7a0db73c":"code","7a13be43":"code","20deffe6":"code","fcecf15e":"code","915c8f9d":"code","2851bd5b":"code","83991a5d":"code","9b650445":"code","4132a7bf":"code","1a70f436":"code","f173878d":"code","59741553":"code","d654a22d":"code","2f86f046":"code","b5a59f95":"code","fc9e0065":"code","0f0e4c44":"code","d0d2de0a":"code","44dafa33":"code","ff5175f6":"code","1e89fe31":"code","69af0c45":"code","19d2c4ce":"code","716d6572":"code","1b02b1b9":"code","e0cbc032":"code","8f504141":"code","09520421":"code","0e77f11d":"code","9ea1b4e4":"code","a64a07fb":"code","7182f9ba":"code","190fc6f8":"code","3e364c4e":"code","5f92c3ae":"code","64502cd1":"code","5434ceb0":"code","e97395bd":"code","2f07341c":"code","0643b9d5":"code","9ceb0a84":"code","4265e9bc":"code","29ace88e":"code","9f25e4e2":"code","c415ac28":"code","7c91ebf9":"code","56bb194f":"code","8d5a05b6":"code","775a079c":"code","d9c63940":"code","45a84857":"code","7a7dd55b":"code","f85cb323":"code","00ae14e9":"code","aed5b642":"code","36582255":"code","fb67913e":"code","b7b3f687":"code","b4418df1":"code","819d83d5":"code","8ce748a9":"code","d74dccc3":"code","08fb4dfc":"code","01dacd0b":"code","89c02214":"code","069ec461":"code","6d269d55":"code","0b5edf1a":"code","10c38b17":"code","f5d19125":"code","16da8aa3":"code","46dff587":"code","9136b5bc":"code","805fa2aa":"code","67143a2d":"code","eb824238":"code","e34d8487":"code","c585dcc3":"code","6f174fd6":"code","af805c46":"code","cd9d8132":"code","04a471bf":"code","f89de055":"code","7eb38a53":"code","7cf4ad96":"code","45a19e8f":"code","1386b0cc":"code","6a4fab78":"code","c84415a1":"code","f9ed4401":"markdown","2c64cc40":"markdown","05f7970e":"markdown","357d2b5e":"markdown","c5921e81":"markdown","132afa63":"markdown","0cad3253":"markdown","2379ea33":"markdown","eb1ee4d1":"markdown","20dca300":"markdown","0ea3958e":"markdown","f4cfaaa5":"markdown","818a8041":"markdown","f016b773":"markdown","b4803ba3":"markdown","c1788a8f":"markdown","9a71e17d":"markdown","c19c3344":"markdown","48860ea4":"markdown","ce960662":"markdown","c0e95de7":"markdown","55d53b04":"markdown","7fa8fb87":"markdown","ebf69e76":"markdown","dd8d6914":"markdown","565adad1":"markdown","6c0dda71":"markdown","a0532c7f":"markdown","5a35f373":"markdown","2aedaec1":"markdown","c35d66ec":"markdown","bc42173d":"markdown","c2e6785d":"markdown","8377b3e6":"markdown","8c1a2eb5":"markdown","4aaeafd6":"markdown","1000cb33":"markdown","bc5309d5":"markdown","fbef80dd":"markdown","2c0ae852":"markdown","bfd6c490":"markdown","81db6fd5":"markdown","a9b99009":"markdown","00fed474":"markdown","3c061fc8":"markdown","8c6ee89c":"markdown","3e335d2d":"markdown","9a530b3b":"markdown","fb498651":"markdown","42bf5f52":"markdown","edb0b663":"markdown","dd8c5462":"markdown","0c91d14f":"markdown"},"source":{"7a5a0286":"import numpy as np  # useful for many scientific computing in Python\nimport pandas as pd # primary data structure library\n! pip install openpyxl","8214524e":"df_can = pd.read_excel('..\/input\/immigration-to-canada-ibm-dataset\/Canada.xlsx',\n                       sheet_name='Canada by Citizenship',\n                       skiprows=range(20),\n                       skipfooter=2\n                      )\n\nprint('Data read into a dataframe!')","cb694bde":"df_can.head()","cc5a50d4":"# print the dimensions of the dataframe\nprint(df_can.shape)","b33772b3":"df_can.drop(['AREA', 'REG', 'DEV', 'Type', 'Coverage'], axis=1, inplace=True)\n\n# let's view the first five elements and see how the dataframe was changed\ndf_can.head()","7244d541":"df_can.rename(columns={'OdName':'Country', 'AreaName':'Continent','RegName':'Region'}, inplace=True)\n\n# let's view the first five elements and see how the dataframe was changed\ndf_can.head()","46d66e2d":"# let's examine the types of the column labels\nall(isinstance(column, str) for column in df_can.columns)","50bb8459":"df_can.columns = list(map(str, df_can.columns))\n\n# let's check the column labels types now\nall(isinstance(column, str) for column in df_can.columns)","8b597b5a":"df_can.set_index('Country', inplace=True)\n\n# let's view the first five elements and see how the dataframe was changed\ndf_can.head()","0511798a":"import warnings\nwarnings.filterwarnings('ignore')\ndf_can['Total'] = df_can.sum(axis=1)\n\n# let's view the first five elements and see how the dataframe was changed\ndf_can.head()","ee306d4c":"print ('data dimensions:', df_can.shape)","7a0db73c":"# finally, let's create a list of years from 1980 - 2013\n# this will come in handy when we start plotting the data\nyears = list(map(str, range(1980, 2014)))\n\nyears","7a13be43":"# use the inline backend to generate the plots within the browser\n%matplotlib inline \n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nmpl.style.use('ggplot') # optional: for ggplot-like style\n\n# check for latest version of Matplotlib\nprint ('Matplotlib version: ', mpl.__version__) # >= 2.0.0","20deffe6":"df_can.sort_values(['Total'], ascending=False, axis=0, inplace=True)\n\n# get the top 5 entries\ndf_top5 = df_can.head()\n\n# transpose the dataframe\ndf_top5 = df_top5[years].transpose() \n\ndf_top5.head()","fcecf15e":"df_top5.index = df_top5.index.map(int) # let's change the index values of df_top5 to type integer for plotting\ndf_top5.plot(kind='area', \n             stacked=False,\n             figsize=(20, 10), # pass a tuple (x, y) size\n             )\n\nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()","915c8f9d":"df_top5.plot(kind='area', \n             alpha=0.25, # 0-1, default value a= 0.5\n             stacked=False,\n             figsize=(20, 10),\n            )\n\nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()","2851bd5b":"# option 2: preferred option with more flexibility\nax = df_top5.plot(kind='area', alpha=0.35, figsize=(20, 10))\n\nax.set_title('Immigration Trend of Top 5 Countries')\nax.set_ylabel('Number of Immigrants')\nax.set_xlabel('Years')","83991a5d":"### type your answer here\ndf_last5=df_can.tail(5)\ndf_last5=df_last5[years].transpose()\ndf_last5.index=df_last5.index.map(int)\n\ndf_last5.plot(kind='area', alpha=0.45, figsize=(20,10))\nplt.title('Immigration Trend of 5 Countries with Least Contribution to Immigration')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()","9b650445":"### type your answer here\ndf_least5=df_can.tail(5)\ndf_least5=df_least5[years].transpose()\n\ndf_least5.index =  df_least5.index.map(int)\n\nag = df_least5.plot(kind='area',alpha=0.55,stacked=False,figsize=(20,10))\nag.set_title('Immigration Trend of 5 Countries with Least Contribution to Immigration')\nag.set_xlabel('Years')\nag.set_ylabel('Immigration Count')\n\n","4132a7bf":"# let's quickly view the 2013 data\ndf_can['2013'].head()","1a70f436":"# np.histogram returns 2 values\ncount, bin_edges = np.histogram(df_can['2013'])\n\nprint(count) # frequency count\nprint(bin_edges) # bin ranges, default = 10 bins","f173878d":"df_can['2013'].plot(kind='hist', figsize=(8, 5))\n\nplt.title('Histogram of Immigration from 195 Countries in 2013') # add a title to the histogram\nplt.ylabel('Number of Countries') # add y-label\nplt.xlabel('Number of Immigrants') # add x-label\n\nplt.show()","59741553":"# 'bin_edges' is a list of bin intervals\ncount, bin_edges = np.histogram(df_can['2013'])\n\ndf_can['2013'].plot(kind='hist', figsize=(8, 5), xticks=bin_edges)\n\nplt.title('Histogram of Immigration from 195 countries in 2013') # add a title to the histogram\nplt.ylabel('Number of Countries') # add y-label\nplt.xlabel('Number of Immigrants') # add x-label\n\nplt.show()","d654a22d":"# let's quickly view the dataset \ndf_can.loc[['Denmark', 'Norway', 'Sweden'], years]","2f86f046":"# transpose dataframe\ndf_t = df_can.loc[['Denmark', 'Norway', 'Sweden'], years].transpose()\ndf_t.head()","b5a59f95":"# generate histogram\ndf_t.plot(kind='hist', figsize=(10, 6))\n\nplt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","fc9e0065":"# let's get the x-tick values\ncount, bin_edges = np.histogram(df_t, 15)\n\n# un-stacked histogram\ndf_t.plot(kind ='hist', \n          figsize=(10, 6),\n          bins=15,\n          alpha=0.6,\n          xticks=bin_edges,\n          color=['coral', 'darkslateblue', 'mediumseagreen']\n         )\n\nplt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","0f0e4c44":"count, bin_edges = np.histogram(df_t, 15)\nxmin = bin_edges[0] - 10   #  first bin value is 31.0, adding buffer of 10 for aesthetic purposes \nxmax = bin_edges[-1] + 10  #  last bin value is 308.0, adding buffer of 10 for aesthetic purposes\n\n# stacked Histogram\ndf_t.plot(kind='hist',\n          figsize=(10, 6), \n          bins=15,\n          xticks=bin_edges,\n          color=['coral', 'darkslateblue', 'mediumseagreen'],\n          stacked=True,\n          xlim=(xmin, xmax)\n         )\n\nplt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants') \n\nplt.show()","d0d2de0a":"### type your answer here\ndf_gab = df_can.loc[['Greece','Albania','Bulgaria'],years].transpose()\n\ncount, bin_edges = np.histogram(df_gab,15)\n\ndf_gab.plot(kind='hist',\n           stacked=False,\n           figsize=(20, 10),\n           bins=15,\n           alpha=0.35,\n           xticks=bin_edges)\n\nplt.title('Histogram of Immigration from Greece, Albania, and Bulgaria from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()\n","44dafa33":"# step 1: get the data\ndf_iceland = df_can.loc['Iceland', years]\ndf_iceland.head()","ff5175f6":"# step 2: plot data\ndf_iceland.plot(kind='bar', figsize=(10, 6))\n\nplt.xlabel('Year') # add to x-label to the plot\nplt.ylabel('Number of immigrants') # add y-label to the plot\nplt.title('Icelandic immigrants to Canada from 1980 to 2013') # add title to the plot\n\nplt.show()","1e89fe31":"df_iceland.plot(kind='bar', figsize=(10, 6), rot=90) # rotate the bars by 90 degrees\n\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\nplt.title('Icelandic Immigrants to Canada from 1980 to 2013')\n\n# Annotate arrow\nplt.annotate('',                      # s: str. Will leave it blank for no text\n             xy=(32, 70),             # place head of the arrow at point (year 2012 , pop 70)\n             xytext=(28, 20),         # place base of the arrow at point (year 2008 , pop 20)\n             xycoords='data',         # will use the coordinate system of the object being annotated \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)\n            )\n\nplt.show()","69af0c45":"df_iceland.plot(kind='bar', figsize=(10, 6), rot=90) \n\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\nplt.title('Icelandic Immigrants to Canada from 1980 to 2013')\n\n# Annotate arrow\nplt.annotate('',                      # s: str. will leave it blank for no text\n             xy=(32, 70),             # place head of the arrow at point (year 2012 , pop 70)\n             xytext=(28, 20),         # place base of the arrow at point (year 2008 , pop 20)\n             xycoords='data',         # will use the coordinate system of the object being annotated \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)\n            )\n\n# Annotate Text\nplt.annotate('2008 - 2011 Financial Crisis', # text to display\n             xy=(28, 30),                    # start the text at at point (year 2008 , pop 30)\n             rotation=72.5,                  # based on trial and error to match the arrow\n             va='bottom',                    # want the text to be vertically 'bottom' aligned\n             ha='left',                      # want the text to be horizontally 'left' algned.\n            )\n\nplt.show()","19d2c4ce":"### type your answer here\ndf_can.sort_values(by='Total', ascending=True, inplace=True)\ndf_top15 = df_can['Total'].tail(15)\ndf_top15","716d6572":"### type your answer here\ndf_top15.plot(kind='barh', figsize=(12, 12), color='steelblue')\nplt.xlabel('Number of Immigrants')\nplt.title('Top 15 Countries Contributing to the Immigration to Canada between 1980 - 2013')\n\n # annotate value labels to each country\nfor index, value in enumerate(df_top15): \n    label = format(int(value), ',') # format int with commas\n    \n    # place text at the end of bar (subtracting 47000 from x, and 0.1 from y to make it fit within the bar)\n    plt.annotate(label, xy=(value - 47000, index - 0.10), color='white')\n\nplt.show()\n\n","1b02b1b9":"haiti = df_can.loc['Haiti', years] # passing in years 1980 - 2013 to exclude the 'total' column\nhaiti.head()","e0cbc032":"haiti.plot()","8f504141":"haiti.index = haiti.index.map(int) # let's change the index values of Haiti to type integer for plotting\nhaiti.plot(kind='line')\n\nplt.title('Immigration from Haiti')\nplt.ylabel('Number of immigrants')\nplt.xlabel('Years')\n\nplt.show() # need this line to show the updates made to the figure","09520421":"haiti.plot(kind='line')\n\nplt.title('Immigration from Haiti')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\n# annotate the 2010 Earthquake. \n# syntax: plt.text(x, y, label)\nplt.text(2000, 6000, '2010 Earthquake') # see note below\n\nplt.show() ","0e77f11d":"### type your answer here\ndf_1 = df_can.loc[['India','China'],years]\ndf_1.head()","9ea1b4e4":"df_1 = df_1.transpose()\ndf_1.head()","a64a07fb":"### type your answer here\ndf_1.index=df_1.index.map(int)\ndf_1.plot(kind='line')\n\nplt.title(' China and India through the years')\nplt.xlabel('Years')\nplt.ylabel('Country')\nplt.show()\n","7182f9ba":"### type your answer here\ndf_2=df_can.sort_values(by='Total', ascending=False).head(5)\ndf_2=df_2[years].transpose()\ndf_2.index=df_2.index.map(int)\ndf_2.plot(kind='line')\nplt.title('Immigration trends of top 5 countries')\nplt.xlabel('years')\nplt.ylabel('countries')\nplt.show()\n","190fc6f8":"# let's create a new dataframe for these three countries \ndf_dsn = df_can.loc[['Denmark', 'Norway', 'Sweden'], :]\n\n# let's take a look at our dataframe\ndf_dsn","3e364c4e":"# compute the proportion of each category with respect to the total\ntotal_values = sum(df_dsn['Total'])\ncategory_proportions = [(float(value) \/ total_values) for value in df_dsn['Total']]\n\n# print out proportions\nfor i, proportion in enumerate(category_proportions):\n    print (df_dsn.index.values[i] + ': ' + str(proportion))","5f92c3ae":"width = 40 # width of chart\nheight = 10 # height of chart\n\ntotal_num_tiles = width * height # total number of tiles\n\nprint ('Total number of tiles is ', total_num_tiles)","64502cd1":"# compute the number of tiles for each catagory\ntiles_per_category = [round(proportion * total_num_tiles) for proportion in category_proportions]\n\n# print out number of tiles per category\nfor i, tiles in enumerate(tiles_per_category):\n    print (df_dsn.index.values[i] + ': ' + str(tiles))","5434ceb0":"# initialize the waffle chart as an empty matrix\nwaffle_chart = np.zeros((height, width))\n\n# define indices to loop through waffle chart\ncategory_index = 0\ntile_index = 0\n\n# populate the waffle chart\nfor col in range(width):\n    for row in range(height):\n        tile_index += 1\n\n        # if the number of tiles populated for the current category is equal to its corresponding allocated tiles...\n        if tile_index > sum(tiles_per_category[0:category_index]):\n            # ...proceed to the next category\n            category_index += 1       \n            \n        # set the class value to an integer, which increases with class\n        waffle_chart[row, col] = category_index\n        \nprint ('Waffle chart populated!')","e97395bd":"waffle_chart","2f07341c":"# instantiate a new figure object\nfig = plt.figure()\n\n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()","0643b9d5":"# instantiate a new figure object\nfig = plt.figure()\n\n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()\n\n# get the axis\nax = plt.gca()\n\n# set minor ticks\nax.set_xticks(np.arange(-.5, (width), 1), minor=True)\nax.set_yticks(np.arange(-.5, (height), 1), minor=True)\n    \n# add gridlines based on minor ticks\nax.grid(which='minor', color='w', linestyle='-', linewidth=2)\n\nplt.xticks([])\nplt.yticks([])","9ceb0a84":"# instantiate a new figure object\nfig = plt.figure()\nimport matplotlib.patches as mpatches \n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()\n\n# get the axis\nax = plt.gca()\n\n# set minor ticks\nax.set_xticks(np.arange(-.5, (width), 1), minor=True)\nax.set_yticks(np.arange(-.5, (height), 1), minor=True)\n    \n# add gridlines based on minor ticks\nax.grid(which='minor', color='w', linestyle='-', linewidth=2)\n\nplt.xticks([])\nplt.yticks([])\n\n# compute cumulative sum of individual categories to match color schemes between chart and legend\nvalues_cumsum = np.cumsum(df_dsn['Total'])\ntotal_values = values_cumsum[len(values_cumsum) - 1]\n\n# create legend\nlegend_handles = []\nfor i, category in enumerate(df_dsn.index.values):\n    label_str = category + ' (' + str(df_dsn['Total'][i]) + ')'\n    color_val = colormap(float(values_cumsum[i])\/total_values)\n    legend_handles.append(mpatches.Patch(color=color_val, label=label_str))\n\n# add legend to chart\nplt.legend(handles=legend_handles,\n           loc='lower center', \n           ncol=len(df_dsn.index.values),\n           bbox_to_anchor=(0., -0.2, 0.95, .1)\n          )","4265e9bc":"def create_waffle_chart(categories, values, height, width, colormap, value_sign=''):\n\n    # compute the proportion of each category with respect to the total\n    total_values = sum(values)\n    category_proportions = [(float(value) \/ total_values) for value in values]\n\n    # compute the total number of tiles\n    total_num_tiles = width * height # total number of tiles\n    print ('Total number of tiles is', total_num_tiles)\n    \n    # compute the number of tiles for each catagory\n    tiles_per_category = [round(proportion * total_num_tiles) for proportion in category_proportions]\n\n    # print out number of tiles per category\n    for i, tiles in enumerate(tiles_per_category):\n        print (df_dsn.index.values[i] + ': ' + str(tiles))\n    \n    # initialize the waffle chart as an empty matrix\n    waffle_chart = np.zeros((height, width))\n\n    # define indices to loop through waffle chart\n    category_index = 0\n    tile_index = 0\n\n    # populate the waffle chart\n    for col in range(width):\n        for row in range(height):\n            tile_index += 1\n\n            # if the number of tiles populated for the current category \n            # is equal to its corresponding allocated tiles...\n            if tile_index > sum(tiles_per_category[0:category_index]):\n                # ...proceed to the next category\n                category_index += 1       \n            \n            # set the class value to an integer, which increases with class\n            waffle_chart[row, col] = category_index\n    \n    # instantiate a new figure object\n    fig = plt.figure()\n\n    # use matshow to display the waffle chart\n    colormap = plt.cm.coolwarm\n    plt.matshow(waffle_chart, cmap=colormap)\n    plt.colorbar()\n\n    # get the axis\n    ax = plt.gca()\n\n    # set minor ticks\n    ax.set_xticks(np.arange(-.5, (width), 1), minor=True)\n    ax.set_yticks(np.arange(-.5, (height), 1), minor=True)\n    \n    # add dridlines based on minor ticks\n    ax.grid(which='minor', color='w', linestyle='-', linewidth=2)\n\n    plt.xticks([])\n    plt.yticks([])\n\n    # compute cumulative sum of individual categories to match color schemes between chart and legend\n    values_cumsum = np.cumsum(values)\n    total_values = values_cumsum[len(values_cumsum) - 1]\n\n    # create legend\n    legend_handles = []\n    for i, category in enumerate(categories):\n        if value_sign == '%':\n            label_str = category + ' (' + str(values[i]) + value_sign + ')'\n        else:\n            label_str = category + ' (' + value_sign + str(values[i]) + ')'\n            \n        color_val = colormap(float(values_cumsum[i])\/total_values)\n        legend_handles.append(mpatches.Patch(color=color_val, label=label_str))\n\n    # add legend to chart\n    plt.legend(\n        handles=legend_handles,\n        loc='lower center', \n        ncol=len(categories),\n        bbox_to_anchor=(0., -0.2, 0.95, .1)\n    )","29ace88e":"width = 40 # width of chart\nheight = 10 # height of chart\n\ncategories = df_dsn.index.values # categories\nvalues = df_dsn['Total'] # correponding values of categories\n\ncolormap = plt.cm.coolwarm # color map class","9f25e4e2":"create_waffle_chart(categories, values, height, width, colormap)","c415ac28":"total_immigration = df_can['Total'].sum()\ntotal_immigration","7c91ebf9":"import seaborn as sns\n\nprint('Seaborn installed and imported!')","56bb194f":"# we can use the sum() method to get the total population per year\ndf_tot = pd.DataFrame(df_can[years].sum(axis=0))\n\n# change the years to type float (useful for regression later on)\ndf_tot.index = map(float, df_tot.index)\n\n# reset the index to put in back in as a column in the df_tot dataframe\ndf_tot.reset_index(inplace=True)\n\n# rename columns\ndf_tot.columns = ['year', 'total']\n\n# view the final dataframe\ndf_tot.head()","8d5a05b6":"import seaborn as sns\nax = sns.regplot(x='year', y='total', data=df_tot)","775a079c":"import seaborn as sns\nax = sns.regplot(x='year', y='total', data=df_tot, color='green')","d9c63940":"import seaborn as sns\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+')","45a84857":"plt.figure(figsize=(15, 10))\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+')","7a7dd55b":"plt.figure(figsize=(15, 10))\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\n\nax.set(xlabel='Year', ylabel='Total Immigration') # add x- and y-labels\nax.set_title('Total Immigration to Canada from 1980 - 2013') # add title","f85cb323":"plt.figure(figsize=(15, 10))\n\nsns.set(font_scale=1.5)\n\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigration to Canada from 1980 - 2013')","00ae14e9":"plt.figure(figsize=(15, 10))\n\nsns.set(font_scale=1.5)\nsns.set_style('ticks') # change background to white background\n\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigration to Canada from 1980 - 2013')","aed5b642":"plt.figure(figsize=(15, 10))\n\nsns.set(font_scale=1.5)\nsns.set_style('whitegrid')\n\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigration to Canada from 1980 - 2013')","36582255":"# group countries by continents and apply sum() function \ndf_continents = df_can.groupby('Continent', axis=0).sum()\n\n# note: the output of the groupby method is a `groupby' object. \n# we can not use it further until we apply a function (eg .sum())\nprint(type(df_can.groupby('Continent', axis=0)))\n\ndf_continents.head()","fb67913e":"# autopct create %, start angle represent starting point\ndf_continents['Total'].plot(kind='pie',\n                            figsize=(5, 6),\n                            autopct='%1.1f%%', # add in percentages\n                            startangle=90,     # start angle 90\u00b0 (Africa)\n                            shadow=True,       # add shadow      \n                            )\n\nplt.title('Immigration to Canada by Continent [1980 - 2013]')\nplt.axis('equal') # Sets the pie chart to look like a circle.\n\nplt.show()","b7b3f687":"colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']\nexplode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.\n\ndf_continents['Total'].plot(kind='pie',\n                            figsize=(15, 6),\n                            autopct='%1.1f%%', \n                            startangle=90,    \n                            shadow=True,       \n                            labels=None,         # turn off labels on pie chart\n                            pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct \n                            colors=colors_list,  # add custom colors\n                            explode=explode_list # 'explode' lowest 3 continents\n                            )\n\n# scale the title up by 12% to match pctdistance\nplt.title('Immigration to Canada by Continent [1980 - 2013]', y=1.12) \n\nplt.axis('equal') \n\n# add legend\nplt.legend(labels=df_continents.index, loc='upper left') \n\nplt.show()","b4418df1":"### type your answer here\ndf_continents['2013'].plot(kind='pie',\n                           figsize=(15, 6),\n                           startangle=90,\n                           autopct='%1.1f%%',\n                           pctdistance=1.12,\n                           labels=None,\n                           shadow=True,\n                           explode=[0.1, 0, 0, 0, 0.1, 0.2])\nplt.title('Immigration to Canada by Continent in 2013', y=1.12) \nplt.axis('equal') \nplt.legend(labels=df_continents.index, loc='upper left') \nplt.show()","819d83d5":"# to get a dataframe, place extra square brackets around 'Japan'.\ndf_japan = df_can.loc[['Japan'], years].transpose()\ndf_japan.head()","8ce748a9":"df_japan.plot(kind='box', figsize=(8, 6))\n\nplt.title('Box plot of Japanese Immigrants from 1980 - 2013')\nplt.ylabel('Number of Immigrants')\n\nplt.show()","d74dccc3":"df_japan.describe()","08fb4dfc":"### type your answer here\ndf_CI = df_can.loc[['China','India'],years].transpose()\ndf_CI","01dacd0b":"df_CI.describe()\n","89c02214":"### type your answer here\ndf_CI.plot(kind='box',\n          figsize=(12,6))\nplt.title('Box plots of Immigrants from China and India (1980 - 2013)')\nplt.xlabel('Number of Immigrants')\nplt.show()","069ec461":"# horizontal box plots\ndf_CI.plot(kind='box', figsize=(10, 7), color='blue', vert=False)\n\nplt.title('Box plots of Immigrants from China and India (1980 - 2013)')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","6d269d55":"fig = plt.figure() # create figure\n\nax0 = fig.add_subplot(1, 2, 1) # add subplot 1 (1 row, 2 columns, first plot)\nax1 = fig.add_subplot(1, 2, 2) # add subplot 2 (1 row, 2 columns, second plot). See tip below**\n\n# Subplot 1: Box plot\ndf_CI.plot(kind='box', color='blue', vert=False, figsize=(20, 6), ax=ax0) # add to subplot 1\nax0.set_title('Box Plots of Immigrants from China and India (1980 - 2013)')\nax0.set_xlabel('Number of Immigrants')\nax0.set_ylabel('Countries')\n\n# Subplot 2: Line plot\ndf_CI.plot(kind='line', figsize=(20, 6), ax=ax1) # add to subplot 2\nax1.set_title ('Line Plots of Immigrants from China and India (1980 - 2013)')\nax1.set_ylabel('Number of Immigrants')\nax1.set_xlabel('Years')\n\nplt.show()","0b5edf1a":"### type your answer here\ndf_top15=df_can.sort_values(['Total'], ascending=False,axis=0).head(15)\ndf_top15","10c38b17":"### type your answer here\nyears_80=list(map(str,range(1980,1990)))\nyears_90=list(map(str,range(1990,2000)))\nyears_2000=list(map(str,range(2000,2010)))\n\ndf_80=df_can.loc[:,years_80].sum(axis=1)\ndf_90=df_can.loc[:,years_90].sum(axis=1)\ndf_2000=df_can.loc[:,years_2000].sum(axis=1)\n\nnew_df=pd.DataFrame({'1980s': df_80, '1990s': df_90, '2000s': df_2000})\nnew_df","f5d19125":"### type your answer here\nnew_df.describe()","16da8aa3":"### type your answer here\nnew_df.plot(kind='box', figsize=(10,6))\n\nplt.xlabel('Decades')\nplt.ylabel('Immigration Numbers')\nplt.title('Immigration number through the decades 1980s to 2000s')\nplt.show()","46dff587":"new_df[new_df['2000s']> 209611.5]","9136b5bc":"# we can use the sum() method to get the total population per year\ndf_tot = pd.DataFrame(df_can[years].sum(axis=0))\n\n# change the years to type int (useful for regression later on)\ndf_tot.index = map(int, df_tot.index)\n\n# reset the index to put in back in as a column in the df_tot dataframe\ndf_tot.reset_index(inplace = True)\n\n# rename columns\ndf_tot.columns = ['year', 'total']\n\n# view the final dataframe\ndf_tot.head()","805fa2aa":"df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')\n\nplt.title('Total Immigration to Canada from 1980 - 2013')\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\n\nplt.show()","67143a2d":"x = df_tot['year']      # year on x-axis\ny = df_tot['total']     # total on y-axis\nfit = np.polyfit(x, y, deg=1)\n\nfit","eb824238":"df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')\n\nplt.title('Total Immigration to Canada from 1980 - 2013')\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\n\n# plot line of best fit\nplt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years\nplt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))\n\nplt.show()\n\n# print out the line of best fit\n'No. Immigrants = {0:.0f} * Year + {1:.0f}'.format(fit[0], fit[1]) ","e34d8487":"df_countries=df_can.loc[['Denmark','Norway','Sweden'],years].transpose()\ndf_total=pd.DataFrame(df_countries.sum(axis=1))\ndf_total.reset_index(inplace=True)\ndf_total.columns = ['year', 'total']\ndf_total","c585dcc3":"import warnings\nwarnings.filterwarnings('ignore')\n### type your answer here\ndf_total['year'] = df_total['year'].astype(int);\ndf_total.plot(kind='scatter',x='year',y='total');\n\nplt.title('Immigration from Denmark, Norway, and Sweden to Canada from 1980 - 2013');\nplt.xlabel('Year');\nplt.ylabel('Number of Immigrants');\nplt.show();","6f174fd6":"df_can_t = df_can[years].transpose() # transposed dataframe\n\n# cast the Years (the index) to type int\ndf_can_t.index = map(int, df_can_t.index)\n\n# let's label the index. This will automatically be the column name when we reset the index\ndf_can_t.index.name = 'Year'\n\n# reset index to bring the Year in as a column\ndf_can_t.reset_index(inplace=True)\n\n# view the changes\ndf_can_t.head()","af805c46":"# normalize Brazil data\nnorm_brazil = (df_can_t['Brazil'] - df_can_t['Brazil'].min()) \/ (df_can_t['Brazil'].max() - df_can_t['Brazil'].min())\n\n# normalize Argentina data\nnorm_argentina = (df_can_t['Argentina'] - df_can_t['Argentina'].min()) \/ (df_can_t['Argentina'].max() - df_can_t['Argentina'].min())","cd9d8132":"# Brazil\nax0 = df_can_t.plot(kind='scatter',\n                    x='Year',\n                    y='Brazil',\n                    figsize=(14, 8),\n                    alpha=0.5,                  # transparency\n                    color='green',\n                    s=norm_brazil * 2000 + 10,  # pass in weights \n                    xlim=(1975, 2015)\n                   )\n\n# Argentina\nax1 = df_can_t.plot(kind='scatter',\n                    x='Year',\n                    y='Argentina',\n                    alpha=0.5,\n                    color=\"blue\",\n                    s=norm_argentina * 2000 + 10,\n                    ax = ax0\n                   )\n\nax0.set_ylabel('Number of Immigrants')\nax0.set_title('Immigration from Brazil and Argentina from 1980 - 2013')\nax0.legend(['Brazil', 'Argentina'], loc='upper left', fontsize='x-large')","04a471bf":"### type your answer here\n\nXChina = df_can_t['China']\nnorm_China = (( XChina - XChina.min())\/ (XChina.max() - XChina.min()))\n\nXIndia = df_can_t['India']\nnorm_India = ((XIndia - XIndia.min()) \/ (XIndia.max() - XIndia.min()))","f89de055":"### type your answer here\n# China\nax0 = df_can_t.plot(kind='scatter',\n                    x='Year',\n                    y='China',\n                    figsize=(14, 8),\n                    alpha=0.5,                  # transparency\n                    color='green',\n                    s=norm_China * 2000 + 10,  # pass in weights \n                    xlim=(1975, 2013)\n                   )\n\n# India\nax1 = df_can_t.plot(kind='scatter',\n                    x='Year',\n                    y='India',\n                    alpha=0.5,\n                    color=\"blue\",\n                    s=norm_India * 2000 + 10,\n                    ax = ax0\n                   )\n\nax0.set_ylabel('Number of Immigrants')\nax0.set_title('Immigration from China and India from 1980 - 2013')\nax0.legend(['China', 'India'], loc='upper left', fontsize='x-large')","7eb38a53":"df_can = pd.read_excel('..\/input\/immigration-to-canada-ibm-dataset\/Canada.xlsx',\n                     sheet_name='Canada by Citizenship',\n                     skiprows=range(20),\n                     skipfooter=2)\n\nprint('Data downloaded and read into a dataframe!')","7cf4ad96":"# clean up the dataset to remove unnecessary columns (eg. REG) \ndf_can.drop(['AREA','REG','DEV','Type','Coverage'], axis=1, inplace=True)\n\n# let's rename the columns so that they make sense\ndf_can.rename(columns={'OdName':'Country', 'AreaName':'Continent','RegName':'Region'}, inplace=True)\n\n# for sake of consistency, let's also make all column labels of type string\ndf_can.columns = list(map(str, df_can.columns))\n\n# add total column\ndf_can['Total'] = df_can.sum(axis=1)\n\n# years that we will be using in this lesson - useful for plotting later on\nyears = list(map(str, range(1980, 2014)))\nprint ('data dimensions:', df_can.shape)","45a19e8f":"# download countries geojson file\n! wget --quiet https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DV0101EN\/labs\/Data_Files\/world_countries.json -O world_countries.json\n    \nprint('GeoJSON file downloaded!')","1386b0cc":"import folium\nworld_geo = r'world_countries.json' # geojson file\n\n# create a plain world map\nworld_map = folium.Map(location=[0, 0], zoom_start=2, tiles='OpenStreetMap')","6a4fab78":"# generate choropleth map using the total immigration from 1980 to 2013\nworld_map.choropleth(\n    geo_data=world_geo,\n    data=df_can,\n    columns=['Country', 'Total'],\n    key_on='feature.properties.name',\n    fill_color='YlOrRd', \n    fill_opacity=0.7, \n    line_opacity=0.2,\n    legend_name='Immigration'\n)\n\n# display map\nworld_map","c84415a1":"world_geo = r'world_countries.json'\n\n# create a numpy array of length 6 and has linear spacing from the minium total immigration to the maximum total immigration\nthreshold_scale = np.linspace(df_can['Total'].min(),\n                              df_can['Total'].max(),\n                              6, dtype=int)\nthreshold_scale = threshold_scale.tolist() # change the numpy array to a list\nthreshold_scale[-1] = threshold_scale[-1] + 1 # make sure that the last value of the list is greater than the maximum immigration\n\n# let Folium determine the scale.\nworld_map = folium.Map(location=[0, 0], zoom_start=2, tiles='OpenStreetMap')\nworld_map.choropleth(\n    geo_data=world_geo,\n    data=df_can,\n    columns=['Country', 'Total'],\n    key_on='feature.properties.name',\n    threshold_scale=threshold_scale,\n    fill_color='YlOrRd', \n    fill_opacity=0.7, \n    line_opacity=0.2,\n    legend_name='Immigration to Canada',\n    reset=True\n)\nworld_map","f9ed4401":"We can immediately make a few key observations from the plot above:\n1. The minimum number of immigrants is around 200 (min), maximum number is around 1300 (max), and  median number of immigrants is around 900 (median).\n2. 25% of the years for period 1980 - 2013 had an annual immigrant count of ~500 or fewer (First quartile).\n2. 75% of the years for period 1980 - 2013 had an annual immigrant count of ~1100 or fewer (Third quartile).\n\nWe can view the actual numbers by calling the `describe()` method on the dataframe.","2c64cc40":"We can easily graph this distribution by passing `kind=hist` to `plot()`.","05f7970e":"# Bubble Plots <a id=\"12\"><\/a>\n\nA `bubble plot` is a variation of the `scatter plot` that displays three dimensions of data (x, y, z). The datapoints are replaced with bubbles, and the size of the bubble is determined by the third variable 'z', also known as the weight. In `maplotlib`, we can pass in an array or scalar to the keyword `s` to `plot()`, that contains the weight of each point.\n\n**Let's start by analyzing the effect of Argentina's great depression**.\n\nArgentina suffered a great depression from 1998 - 2002, which caused widespread unemployment, riots, the fall of the government, and a default on the country's foreign debt. In terms of income, over 50% of Argentines were poor, and seven out of ten Argentine children were poor at the depth of the crisis in 2002. \n\nLet's analyze the effect of this crisis, and compare Argentina's immigration to that of it's neighbour Brazil. Let's do that using a `bubble plot` of immigration from Brazil and Argentina for the years 1980 - 2013. We will set the weights for the bubble as the *normalized* value of the population for each year.","357d2b5e":"Let's take a look at the first five items in our dataset.","c5921e81":"Let's find out how many entries there are in our dataset.","132afa63":"Using the equation of line of best fit, we can estimate the number of immigrants in 2015:\n```python\nNo. Immigrants = 5567 * Year - 10926195\nNo. Immigrants = 5567 * 2015 - 10926195\nNo. Immigrants = 291,310\n```\nWhen compared to the actuals from Citizenship and Immigration Canada's (CIC) [2016 Annual Report](http:\/\/www.cic.gc.ca\/english\/resources\/publications\/annual-report-2016\/index.asp), we see that Canada accepted 271,845 immigrants in 2015. Our estimated value of 291,310 is within 7% of the actual number, which is pretty good considering our original data came from United Nations (and might differ slightly from CIC data).\n\nAs a side note, we can observe that immigration took a dip around 1993 - 1997. Further analysis into the topic revealed that in 1993 Canada introcuded Bill C-86 which introduced revisions to the refugee determination system, mostly restrictive. Further amendments to the Immigration Regulations cancelled the sponsorship required for \"assisted relatives\" and reduced the points awarded to them, making it more difficult for family members (other than nuclear family) to immigrate to Canada. These restrictive measures had a direct impact on the immigration numbers for the next several years.","0cad3253":"**Horizontal Bar Plot**\n\nSometimes it is more practical to represent the data horizontally, especially if you need more room for labelling the bars. In horizontal bar graphs, the y-axis is used for labelling, and the length of bars on the x-axis corresponds to the magnitude of the variable being measured. As you will see, there is more room on the y-axis to  label categetorical variables.\n\n\n**Question:** Using the scripting layter and the `df_can` dataset, create a *horizontal* bar plot showing the *total* number of immigrants to Canada from the top 15 countries, for the period 1980 - 2013. Label each country with the total immigrant count.","2379ea33":"### Two types of plotting\n\nAs we discussed in the video lectures, there are two styles\/options of ploting with `matplotlib`. Plotting using the Artist layer and plotting using the scripting layer.\n\n**Option 1: Scripting layer (procedural method) - using matplotlib.pyplot as 'plt' **\n\nYou can use `plt` i.e. `matplotlib.pyplot` and add more elements by calling different methods procedurally; for example, `plt.title(...)` to add title or `plt.xlabel(...)` to add label to the x-axis.\n```python\n    # Option 1: This is what we have been using so far\n    df_top5.plot(kind='area', alpha=0.35, figsize=(20, 10)) \n    plt.title('Immigration trend of top 5 countries')\n    plt.ylabel('Number of immigrants')\n    plt.xlabel('Years')\n```","eb1ee4d1":"Note how the box plot differs from the summary table created. The box plot scans the data and identifies the outliers. In order to be an outlier, the data value must be:<br>\n* larger than Q3 by at least 1.5 times the interquartile range (IQR), or,\n* smaller than Q1 by at least 1.5 times the IQR.\n\nLet's look at decade 2000s as an example: <br>\n* Q1 (25%) = 36,101.5 <br>\n* Q3 (75%) = 105,505.5 <br>\n* IQR = Q3 - Q1 = 69,404 <br>\n\nUsing the definition of outlier, any value that is greater than Q3 by 1.5 times IQR will be flagged as outlier.\n\nOutlier > 105,505.5 + (1.5 * 69,404) <br>\nOutlier > 209,611.5","20dca300":"Notice how the column names now make much more sense, even to an outsider.","0ea3958e":"**Vertical bar plot**\n\nIn vertical bar graphs, the x-axis is used for labelling, and the length of bars on the y-axis corresponds to the magnitude of the variable being measured. Vertical bar graphs are particuarly useful in analyzing time series data. One disadvantage is that they lack space for text labelling at the foot of each bar. \n\n**Let's start off by analyzing the effect of Iceland's Financial Crisis:**\n\nThe 2008 - 2011 Icelandic Financial Crisis was a major economic and political event in Iceland. Relative to the size of its economy, Iceland's systemic banking collapse was the largest experienced by any country in economic history. The crisis led to a severe economic depression in 2008 - 2011 and significant political unrest.\n\n**Question:** Let's compare the number of Icelandic immigrants (country = 'Iceland') to Canada from year 1980 to 2013. ","f4cfaaa5":"The bar plot above shows the total number of immigrants broken down by each year. We can clearly see the impact of the financial crisis; the number of immigrants to Canada started increasing rapidly after 2008. \n\nLet's annotate this on the plot using the `annotate` method of the **scripting layer** or the **pyplot interface**. We will pass in the following parameters:\n- `s`: str, the text of annotation.\n- `xy`: Tuple specifying the (x,y) point to annotate (in this case, end point of arrow).\n- `xytext`: Tuple specifying the (x,y) point to place the text (in this case, start point of arrow).\n- `xycoords`: The coordinate system that xy is given in - 'data' uses the coordinate system of the object being annotated (default).\n- `arrowprops`: Takes a dictionary of properties to draw the arrow:\n    - `arrowstyle`: Specifies the arrow style, `'->'` is standard arrow.\n    - `connectionstyle`: Specifies the connection type. `arc3` is a straight line.\n    - `color`: Specifes color of arror.\n    - `lw`: Specifies the line width.\n\nI encourage you to read the Matplotlib documentation for more details on annotations: \nhttp:\/\/matplotlib.org\/api\/pyplot_api.html#matplotlib.pyplot.annotate.","818a8041":"Before we proceed with creating the histogram plot, let's first examine the data split into intervals. To do this, we will us **Numpy**'s `histrogram` method to get the bin ranges and frequency counts as follows:","f016b773":"**Question**: Use the scripting layer to display the immigration distribution for Greece, Albania, and Bulgaria for years 1980 - 2013? Use an overlapping plot with 15 bins and a transparency value of 0.35.","b4803ba3":"#### 1. Clean up the dataset to remove columns that are not informative to us for visualization (eg. Type, AREA, REG).","c1788a8f":"# Bar Charts (Dataframe) <a id=\"10\"><\/a>\n\nA bar plot is a way of representing data where the *length* of the bars represents the magnitude\/size of the feature\/variable. Bar graphs usually represent numerical and categorical variables grouped in intervals. \n\nTo create a bar plot, we can pass one of two arguments via `kind` parameter in `plot()`:\n\n* `kind=bar` creates a *vertical* bar plot\n* `kind=barh` creates a *horizontal* bar plot","9a71e17d":"Area plots are stacked by default. And to produce a stacked area plot, each column must be either all positive or all negative values (any NaN values will defaulted to 0). To produce an unstacked plot, pass `stacked=False`. ","c19c3344":"The size of the bubble corresponds to the magnitude of immigrating population for that year, compared to the 1980 - 2013 data. The larger the bubble, the more immigrants in that year.\n\nFrom the plot above, we can see a corresponding increase in immigration from Argentina during the 1998 - 2002 great depression. We can also observe a similar spike around 1985 to 1993. In fact, Argentina had suffered a great depression from 1974 - 1990, just before the onset of 1998 - 2002 great depression. \n\nOn a similar note, Brazil suffered the *Samba Effect* where the Brazilian real (currency) dropped nearly 35% in 1999. There was a fear of a South American financial crisis as many South American countries were heavily dependent on industrial exports from Brazil. The Brazilian government subsequently adopted an austerity program, and the economy slowly recovered over the years, culminating in a surge in 2010. The immigration data reflect these events.","48860ea4":"Notice how the country names now serve as indices.","ce960662":"Import `Matplotlib` and **Numpy**.","c0e95de7":"If we do no want the plots to overlap each other, we can stack them using the `stacked` paramemter. Let's also adjust the min and max x-axis labels to remove the extra gap on the edges of the plot. We can pass a tuple (min,max) using the `xlim` paramater, as show below.","55d53b04":"In the last module, we created a line plot that visualized the top 5 countries that contribued the most immigrants to Canada from 1980 to 2013. With a little modification to the code, we can visualize this plot as a cumulative plot, also knows as a **Stacked Line Plot** or **Area plot**.","7fa8fb87":"**Question**: Use the scripting layer to create a stacked area plot of the 5 countries that contributed the least to immigration to Canada **from** 1980 to 2013. Use a transparency value of 0.45.","ebf69e76":"In lab *Pie Charts, Box Plots, Scatter Plots, and Bubble Plots*, we learned how to create a scatter plot and then fit a regression line. It took ~20 lines of code to create the scatter plot along with the regression fit. In this final section, we will explore *seaborn* and see how efficient it is to create regression lines and fits using this library!","dd8d6914":"#### 3. For consistency, ensure that all column labels of type string.","565adad1":"Step 1: Get the data pertaining to the top 15 countries.","6c0dda71":"So now our dataframe has 38 columns instead of 37 columns that we had before.","a0532c7f":"Let's make a few modifications to improve the impact and aesthetics of the previous plot:\n* increase the bin size to 15 by passing in `bins` parameter\n* set transparency to 60% by passing in `alpha` paramemter\n* label the x-axis by passing in `x-label` paramater\n* change the colors of the plots by passing in `color` parameter","5a35f373":"# Area Plots<a id=\"6\"><\/a>","2aedaec1":"# CANADA IMMIGRATION DATA VISUALIZATION ANALYSIS","c35d66ec":"We can also plot multiple histograms on the same plot. For example, let's try to answer the following questions using a histogram.\n\n**Question**: What is the immigration distribution for Denmark, Norway, and Sweden for years 1980 - 2013?","bc42173d":"The above visual is not very clear, the numbers and text overlap in some instances. Let's make a few modifications to improve the visuals:\n\n* Remove the text labels on the pie chart by passing in `legend` and add it as a seperate legend using `plt.legend()`.\n* Push out the percentages to sit just outside the pie chart by passing in `pctdistance` parameter.\n* Pass in a custom set of colors for continents by passing in `colors` parameter.\n* **Explode** the pie chart to emphasize the lowest three continents (Africa, North America, and Latin America and Carribbean) by pasing in `explode` parameter.\n","c2e6785d":"# Box Plots <a id=\"8\"><\/a>\n\nA `box plot` is a way of statistically representing the *distribution* of the data through five main dimensions: \n\n- **Minimun:** Smallest number in the dataset.\n- **First quartile:** Middle number between the `minimum` and the `median`.\n- **Second quartile (Median):** Middle number of the (sorted) dataset.\n- **Third quartile:** Middle number between `median` and `maximum`.\n- **Maximum:** Highest number in the dataset.","8377b3e6":"# Pie Charts <a id=\"6\"><\/a>\n\nA `pie chart` is a circualr graphic that displays numeric proportions by dividing a circle (or pie) into proportional slices. You are most likely already familiar with pie charts as it is widely used in business and media. We can create pie charts in Matplotlib by passing in the `kind=pie` keyword.\n\nLet's use a pie chart to explore the proportion (percentage) of new immigrants grouped by continents for the entire time period from 1980 to 2013. ","8c1a2eb5":"**Option 2: Artist layer (Object oriented method) - using an `Axes` instance from Matplotlib (preferred) **\n\nYou can use an `Axes` instance of your current plot and store it in a variable (eg. `ax`). You can add more elements by calling methods with a little change in syntax (by adding \"*set_*\" to the previous methods). For example, use `ax.set_title()` instead of `plt.title()` to add title,  or `ax.set_xlabel()` instead of `plt.xlabel()` to add label to the x-axis. \n\nThis option sometimes is more transparent and flexible to use for advanced plots (in particular when having multiple plots, as you will see later). \n\nIn this course, we will stick to the **scripting layer**, except for some advanced visualizations where we will need to use the **artist layer** to manipulate advanced aspects of the plots.","4aaeafd6":"**Question:** What is the frequency distribution of the number (population) of new immigrants from the various countries to Canada in 2013?","1000cb33":"By default, the `histrogram` method breaks up the dataset into 10 bins. The figure below summarizes the bin ranges and the frequency distribution of immigration in 2013. We can see that in 2013:\n* 178 countries contributed between 0 to 3412.9 immigrants \n* 11 countries contributed between 3412.9 to 6825.8 immigrants\n* 1 country contributed between 6285.8 to 10238.7 immigrants, and so on..\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DV0101EN\/labs\/Images\/Mod2Fig1-Histogram.JPG\" align=\"center\" width=800>","bc5309d5":"#### 2. Rename some of the columns so that they make sense.","fbef80dd":"In the above plot, the x-axis represents the population range of immigrants in intervals of 3412.9. The y-axis represents the number of countries that contributed to the aforementioned population. \n\nNotice that the x-axis labels do not match with the bin size. This can be fixed by passing in a `xticks` keyword that contains the list of the bin sizes, as follows:","2c0ae852":"Let's also annotate a text to go over the arrow.  We will pass in the following additional parameters:\n- `rotation`: rotation angle of text in degrees (counter clockwise)\n- `va`: vertical alignment of text [\u2018center\u2019 | \u2018top\u2019 | \u2018bottom\u2019 | \u2018baseline\u2019]\n- `ha`: horizontal alignment of text [\u2018center\u2019 | \u2018right\u2019 | \u2018left\u2019]","bfd6c490":"**Question**: Use the artist layer to create an unstacked area plot of the 5 countries that contributed the least to immigration to Canada **from** 1980 to 2013. Use a transparency value of 0.55.","81db6fd5":"Clean up data. We will make some modifications to the original dataset to make it easier to create our visualizations. Refer to `Introduction to Matplotlib and Line Plots` lab for the rational and detailed description of the changes.","a9b99009":"Now the dataframe has an extra column that presents the total number of immigrants from each country in the dataset from 1980 - 2013. So if we print the dimension of the data, we get:","00fed474":"Notice how the columns Type, Coverage, AREA, REG, and DEV got removed from the dataframe.","3c061fc8":"Step 2: Plot data:\n   1. Use `kind='barh'` to generate a bar chart with horizontal bars.\n   2. Make sure to choose a good size for the plot and to label your axes and to give the plot a title.\n   3. Loop through the countries and annotate the immigrant population using the anotate function of the scripting interface.","8c6ee89c":"#### 5. Add total column.","3e335d2d":"Notice how the above line of code returned *False* when we tested if all the column labels are of type **string**. So let's change them all to **string** type.","9a530b3b":"# Scatter Plots <a id=\"10\"><\/a>\n\nA `scatter plot` (2D) is a useful method of comparing variables against each other. `Scatter` plots look similar to `line plots` in that they both map independent and dependent variables on a 2D graph. While the datapoints are connected together by a line in a line plot, they are not connected in a scatter plot. The data in a scatter plot is considered to express a trend. With further analysis using tools like regression, we can mathematically calculate this relationship and use it to predict trends outside the dataset.\n\nLet's start by exploring the following:\n\nUsing a `scatter plot`, let's visualize the trend of total immigrantion to Canada (all countries combined) for the years 1980 - 2013.","fb498651":"The unstacked plot has a default transparency (alpha value) at 0.5. We can modify this value by passing in the `alpha` parameter.","42bf5f52":"#### 4. Set the country name as index - useful for quickly looking up countries using .loc method.","edb0b663":"# Visualizing Data using Matplotlib<a id=\"4\"><\/a>","dd8c5462":"# Histograms<a id=\"8\"><\/a>\n\nA histogram is a way of representing the *frequency* distribution of numeric dataset. The way it works is it partitions the x-axis into *bins*, assigns each data point in our dataset to a bin, and then counts the number of data points that have been assigned to each bin. So the y-axis is the frequency or the number of data points in each bin. Note that we can change the bin size and usually one needs to tweak it so that the distribution is displayed nicely.","0c91d14f":"# Regression Plots <a id=\"10\"><\/a>\n\n\n> Seaborn is a Python visualization library based on matplotlib. It provides a high-level interface for drawing attractive statistical graphics. You can learn more about *seaborn* by following this [link](https:\/\/seaborn.pydata.org\/) and more about *seaborn* regression plots by following this [link](http:\/\/seaborn.pydata.org\/generated\/seaborn.regplot.html)."}}