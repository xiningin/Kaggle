{"cell_type":{"ae7d0bb6":"code","ffa7fe38":"code","221e7dc4":"code","535dbef4":"code","21066e3c":"code","b7af18ea":"code","b926d19c":"code","41e65828":"code","d94ba686":"code","43f82f1e":"code","fe16df93":"code","cce84983":"markdown","89ba2939":"markdown","c97d6e09":"markdown","fa919eeb":"markdown","0fb000ff":"markdown","5c277f3e":"markdown","272ecb9a":"markdown","9e9131b3":"markdown","665b8d5a":"markdown","54a57ba8":"markdown","864ac898":"markdown","263444f3":"markdown","22106c52":"markdown","b6919d28":"markdown","d4073e02":"markdown"},"source":{"ae7d0bb6":"import numpy as np\n\nimport os\nimport json\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib.animation import ArtistAnimation\nfrom matplotlib import colors\n\nfrom IPython.display import Image, display\n\nfrom scipy.ndimage import convolve\n\nfrom tqdm.notebook import tqdm \n\nglobal cmap\nglobal norm\n\ncmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)","ffa7fe38":"def plot_task(task):\n    trainInput = taskTrain[task][0]['input']\n    trainOutput = taskTrain[task][0]['output']\n    \n    testInput = taskTest[task][0]['input']\n    testOutput = taskTest[task][0]['output']\n    \n    fig, axs = plt.subplots(1,4, figsize=(12,6))\n    \n    plt.setp(axs, xticks = [], yticks =[], xticklabels=[], yticklabels=[] )\n    \n    plt.suptitle(taskFileNames[task])\n    \n    axs[0].imshow(trainInput,cmap=cmap,norm=norm)\n    axs[1].imshow(trainOutput,cmap=cmap,norm=norm)\n    axs[2].imshow(testInput,cmap=cmap,norm=norm)\n    axs[3].imshow(testOutput,cmap=cmap,norm=norm)\n    \n    axs[0].set_title('Train Input 0')\n    axs[1].set_title('Train Output 0')\n    axs[2].set_title('Test Input 0')\n    axs[3].set_title('Test Output 0')\n    \n    plt.show()\n\n# load in task files\nevalPath = '\/kaggle\/input\/abstraction-and-reasoning-challenge\/training\/'\ntaskTrain = list(np.zeros(len(os.listdir(evalPath))))\ntaskFileNames = list(np.zeros(len(os.listdir(evalPath))))\ntaskTest = list(np.zeros(len(os.listdir(evalPath))))\n\nfor i,file in enumerate(os.listdir(evalPath)):\n    with open(evalPath + file, 'r') as f:\n        task = json.load(f)\n        taskFileNames[i] = file\n        taskTrain[i] = []\n        taskTest[i] = []\n        \n        for t in task['train']:\n                 taskTrain[i].append(t)\n        for t in task['test']:\n                taskTest[i].append(t)\n        \n# plot 5 random tasks as examples\nfor i in np.random.randint(0,len(taskTrain),5):\n    plot_task(i)","221e7dc4":"n = 100\nm = 200\n\n# create grid and set center cell in first row to alive as initial condition\ngrid = np.zeros((n,m))\ngrid[0,len(grid[0])\/\/2] = 1\n\n# rule 30 kernerls\nrules = [[1,0,0],[0,1,1],[0,1,0],[0,0,1]]\n\nfig, ax = plt.subplots(1,1, figsize = (12,6))\nplt.setp(ax, xticklabels = [], xticks = [], yticklabels = [], yticks = [])\n\nimages = []\n\nfor i in range(len(grid)-1):\n    for rule in rules:\n        \n        # apply each rule as a convolution and \n        convRule = convolve(grid[i], rule, mode = 'constant')\n        conv = convolve(grid[i], [1,1,1], mode = 'constant')\n        \n        # compare only non-zero values\n        conv[conv == 0] = -1\n        \n        # rule is true where conv == convRule\n        grid[i+1][np.equal(conv,convRule)] = 1\n        \n        \n    images.append([plt.imshow(grid, cmap = 'gray')])\n\nplt.close()","535dbef4":"# save movie to file\nani = ArtistAnimation(fig, images)\nani.save('Rule30.gif', writer='imagemagick', fps = 8 )","21066e3c":"n = 200\nm = 200\ngrid = np.random.randint(0,2,(n,m))\n\n# kernel to get neighbours, excluding cell being 'looked at'\nk = [[1,1,1],\n     [1,0,1],\n     [1,1,1]]\n\nfig, ax = plt.subplots(1,1, figsize = (12,6))\nplt.setp(ax, xticklabels = [], xticks = [], yticklabels = [], yticks = [])\nimages = []\nsteps = 100\n\nfor step in range(steps):\n\n    # apply convolution to find neighbour count\n    conv = convolve(grid, k, mode = 'constant')\n\n    newGrid = np.zeros((n,m))\n\n    # apply GOL rules\n    newGrid[conv == 3] = 1\n    newGrid[np.logical_and((grid == 1), (conv == 2))] = 1\n\n    grid = newGrid\n\n    images.append([plt.imshow(grid, cmap = 'gray')])\n   \nplt.close()","b7af18ea":"# save movie to file\nani = ArtistAnimation(fig, images)\nani.save('GOL.gif', writer='imagemagick', fps = 8 )","b926d19c":"def create_rules(dna):\n    \n    dna = dna.reshape(len(dna)\/\/13,13)\n    \n    # randomize order of gene rule application\n    np.random.shuffle(dna)\n    \n    def rules(grid,output):\n        \n        for gene in dna:\n            \n            # binary 3x3 kernel indicating state of neighbours\n            kernel = np.array([gene[:3],gene[3:6],gene[6:9]])\n            \n            # colours involved and threshold\n            ruleColour = gene[9]\n            oldColour = gene[10]\n            newColour = gene[11]\n            threshold = gene[12]\n            \n            # get binary grid indicating whether cell is ruleColour or not\n            gridRuleColour = (grid == ruleColour).astype(int)\n            \n            c = convolve(gridRuleColour, kernel, mode='constant')\n            \n            \n            # get boolean matrix of cells that satify rule condition\n            rule = np.logical_and(c > threshold, grid == oldColour)\n            \n            output[rule] = newColour\n            \n        return output\n    return rules ","41e65828":"import ga_utils as ga\nimport arc_utils as arc","d94ba686":"def solve_task(task, taskTrain, taskTest, sameShape, nGenes,gens,steps,mutationRate):\n\n    # count number of training examples and tests\n    nExamples = len(taskTrain[task])\n    nTests = len(taskTest[task])\n    \n    # empty list to be filled with best rules for each step\n    bestSteps = [0]*steps\n    \n    for step in range(steps):\n        \n        best = 0\n        bestCount = 0\n        \n        fitness = np.zeros((popSize,nExamples + 1))\n        fitMean = np.zeros(gens)\n        fitMax = np.zeros(gens)\n        \n\n        population = ga.create_population(popSize,nGenes)\n        \n        for g in tqdm(range(gens)):\n            \n            for i in range(len(population)):\n                # create rules from each dna in the population\n                rules = create_rules(population[i])\n\n                # update grid for each training input example and calculate average fitness\n                for j in range(nExamples):\n                    \n                    taskInput = np.array(taskTrain[task][j]['input'])\n                    taskOutput = np.array(taskTrain[task][j]['output'])\n\n                    \n                    if not sameShape:\n                        # \"scale\" matrix size to match output, n and m are scaling factors\n                        n = taskOutput.shape[0]\/\/taskInput.shape[0]\n                        m = taskOutput.shape[0]\/\/taskInput.shape[0]\n                        taskInput = np.kron(taskInput,np.ones((n,m)))\n  \n                    \n                    grid = taskInput\n                                       \n                    if step is not 0:\n                        # update input with best rules for each steps\n                        for s in range(step):\n                            grid = arc.update_grid(grid,bestSteps[s])\n\n                    grid = arc.update_grid(grid,rules)\n                    \n    \n                    # calculate fitness after update steps\n                    \n                    fitness[i,j] = arc.calc_fitness(grid,taskInput,taskOutput)\n                \n\n                fitness[i,-1] = fitness[i,:-1].mean()\n\n                # if we find the optimal solution (fitness score of 1)\n                if (fitness[i,-1] >= best):\n                    \n                    best = fitness[i,-1]\n                    bestSteps[step] = rules\n                    \n                    if best == 1:\n                        \n                        # find three optimal solutions before terminating\n                        bestCount = bestCount + 1\n                        \n                        if bestCount == 1000:\n                            fitMean[g] = fitness[:i+1,-1].mean()\n                            fitMax[g] = 1\n\n                            print('Optimal Solution Found for Task: ' + str(task))\n                            arc.plot_evolve(taskFileNames[task],fitMean,fitMax)\n                            arc.plot_solve(task, taskTrain, taskTest, sameShape, bestSteps, step + 1)\n                            break\n                        \n\n            else:\n                # if no break in inner loop\n                \n                if g is not (gens - 1):\n                    sel = ga.selection(population,fitness[:,-1])\n                    population = ga.reproduce(population,sel,geneLength,mutationRate)\n                fitMean[g] = fitness[:,-1].mean()\n                fitMax[g] = fitness[:,-1].max() \n                continue\n            break\n            \n        # after the best rules for each step has been found\n        # append function to bestSteps\n        \n\n        \n        # kill off and replace bottom portion of population\n        #population[len(population)\/\/10:] = create_population(len(population)\/\/10*9,nGenes)\n        \n        \n        else:\n            bestIndex = np.where(fitness[:,-1] == fitness[:,-1].max())[0][0]\n            bestSteps[step] = create_rules(population[bestIndex])\n            # if no break in inner loop\n            arc.plot_evolve(taskFileNames[task], fitMean,fitMax)\n            arc.plot_solve(task, taskTrain, taskTest, sameShape, bestSteps, step + 1)\n            continue\n        break\n            \n    # return best rules for each step\n    return bestSteps","43f82f1e":"solutions = []\n\n#blue and grey squares, blue and blue corner square, blue and red lines, blue and grey tetris\ntasks = ['b60334d2.json','3aa6fb7a.json','a699fb00.json','3618c87e.json']\n\nfor i in range(len(tasks)):\n    tasks[i] = np.where(np.array(taskFileNames) == tasks[i])[0][0]\n    \nfor task in tasks:\n    sameShape, sameColours = arc.check_task(task, taskTrain)\n    \n    popSize = 5000\n    nGenes = 20\n    gens = 30\n    steps = 1\n    geneLength = 12\n    mutationRate = 1 \n\n    try:\n        print('Solving task: ' + taskFileNames[task])\n        bestSteps = solve_task(task, taskTrain, taskTest, sameShape, nGenes, gens, steps, mutationRate)\n        solutions.append([task, bestSteps])\n    except:\n        solutions.append([task,'Failed'])","fe16df93":"#task = ['db3e9e38.json'] #orange and blue triangle\ntask = ['a65b410d.json'] #b\/r\/g stairs\ntask = np.where(np.array(taskFileNames) == task)[0][0]\n    \nsameShape, sameColours = arc.check_task(task, taskTrain)\n    \npopSize = 5000\nnGenes = 30\ngens = 30\nsteps = 5\ngeneLength = 12\nmutationRate = 2 \n\n\nprint('Solving task: ' + taskFileNames[task])\nbestSteps = solve_task(task, taskTrain, taskTest, sameShape, nGenes, gens, steps, mutationRate)\nsolutions.append([task, bestSteps])","cce84983":"Using the same logic in applying rules to the grid of Conway's Game of Life, we can create an array of more specific rulesets that can evolve to transform the input grid into the output grid. ","89ba2939":"## 2D\n\n[Conway's Game of Life](https:\/\/en.wikipedia.org\/wiki\/Conway%27s_Game_of_Life)","c97d6e09":"# Evolving Cellular Automata to Solve ARC Tasks","fa919eeb":"![](https:\/\/imgur.com\/7ESLxd3.gif)","0fb000ff":"\"ARC can be seen as a general artificial intelligence benchmark, as a program synthesis benchmark, or as a psychometric intelligence test. It is targeted at both humans and artificially intelligent systems that aim at emulating a human-like form of general fluid intelligence.\"\n\nFor those unfamiliar with ARC tasks:\n\n[The Abstraction and Reasoning Corpus (ARC) - GitHub](https:\/\/github.com\/fchollet\/ARC)","5c277f3e":"# Cellular Automata","272ecb9a":"# Solving Tasks","9e9131b3":"# Genetic Algorithm","665b8d5a":"Background:\n[A cellular automaton consists of a regular grid of cells, each in one of a finite number of states, such as on and off.](https:\/\/en.wikipedia.org\/wiki\/Cellular_automaton)\n\nProject inspired by:\n[Cellular Automata as a Language for Reasoning](https:\/\/www.kaggle.com\/arsenynerinovsky\/cellular-automata-as-a-language-for-reasoning)","54a57ba8":"### How about tasks that require multiple steps??","864ac898":"![](https:\/\/i.imgur.com\/OySRZHU.gif)","263444f3":"## DNA \n\nEach member of the population will be a sequence of encoded rules (genes) to be applied to the task input.\n\n## Gene Rule Encoding\n\nkernel: 3x3 kernel to indicate relative neighbours of interest\ncolour rule applies to: the colour of the neighbours we are looking for when we convolve\nold colour: rule only applies to cells that were this colour\nthreshold: the minimum number of neighbours required to apply the rule\n\n| index | 0-8    | 9                      | 10         | 11         |12          |\n|-------|--------|------------------------|------------|------------|------------|\n|       | kernel | colour rule applies to | old colour | new colour |threshold   |\n\n","22106c52":"# Abstract Reasoning Corpus (ARC) Tasks","b6919d28":"## 1D\n\n[Rule 30](https:\/\/en.wikipedia.org\/wiki\/Rule_30)","d4073e02":"We will optimize this sequence of rules (DNA) using a genetic algorithm.\n\nPseudocode for the solve_tasks():\n\ninitialize population  \n&nbsp;&nbsp;&nbsp;&nbsp; for generation in nGenerations:  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for member in population:  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Calculate Fitness   \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-weighted average of correctly estimated cells  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mating Selection   \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -tournament selection  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Reproduction  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -single point crossover  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -random mutations to DNA  \n\n(repeat for each step if required)"}}