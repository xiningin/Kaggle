{"cell_type":{"81c6ff2b":"code","943e9355":"code","75820350":"code","aa01ac28":"code","cc7728b5":"code","bd315b74":"code","9526037d":"code","6033539b":"code","1cd5cf68":"code","fb371a12":"code","297dce7f":"code","20283bfb":"code","fa06155d":"code","dbd33d53":"code","0fe6c3c4":"code","e28e1757":"code","e9c4e2e6":"code","bbfc2636":"markdown","8cfb37e8":"markdown","07a3ae9e":"markdown","ab564c59":"markdown","5b7e383a":"markdown","5a4e0d08":"markdown","5de2cf9f":"markdown","b133e436":"markdown","46df2eaf":"markdown","097b2f93":"markdown"},"source":{"81c6ff2b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","943e9355":"train = pd.read_csv(\"..\/input\/train.csv\")\n#train # 1+28x28 \u5217","75820350":"test = pd.read_csv(\"..\/input\/test.csv\")\n#test # 28x28 \u5217","aa01ac28":"from keras.models import Sequential\nfrom keras.utils import np_utils, plot_model\nfrom keras.layers import Dense, Activation, Dropout, LSTM\nfrom keras.initializers import glorot_uniform, orthogonal, TruncatedNormal\nfrom keras.callbacks import EarlyStopping\nfrom keras.layers.recurrent import GRU, SimpleRNN\n\nfrom keras.optimizers import SGD\nfrom keras.datasets import mnist\nfrom keras.utils import np_utils\n\nimport math #\u6570\u5024\u8a08\u7b97\nimport itertools #\u9806\u5217\u30fb\u7d44\u307f\u5408\u308f\u305b\nimport time\n\nimport matplotlib.pyplot as plt #\u30b0\u30e9\u30d5\nimport os\n\nfrom sklearn.model_selection import train_test_split","cc7728b5":"# \u5206\u985e\u6570\uff080\u304b\u30899\u306e10\uff09\nnum_classes = 10\n# \u753b\u50cf\u306e\u9ad8\u3055\u3068\u5e45\nimg_height, img_width = 28, 28\n\ndef create_model():\n    model = Sequential() # \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u88fd\n    \n    # \u7573\u307f\u8fbc\u307f\u5c64\n    # Conv2D()\n    model = add(Conv2D(32, (3, 3), padding='same', activation='relu', input_shape=(img_height, img_width, 3)))\n    # \u7573\u307f\u8fbc\u307f\u5c64\n    model.add(Conv2D(32, (3, 3), padding='same', activation='relu'))\n    # \u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\uff08\u60c5\u5831\u91cf\u306e\u524a\u6e1b\uff09\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    \n    model.add(Dropout(0.25)) # \u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\n    \n    # \u7573\u307f\u8fbc\u307f\u5c64\n    model.add(Conv2D(64, (3, 3), padding='same', activation='relu'))\n    # \u7573\u307f\u8fbc\u307f\u5c64\n    model.add(Conv2D(64, (3, 3), padding='same', activation='relu'))\n    # \u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\uff08\u60c5\u5831\u91cf\u306e\u524a\u6e1b\uff09\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    \n    model.add(Flatten()) # \u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306b\u5165\u529b\u3059\u308b\u306b\u3042\u305f\u3063\u30664\u6b21\u5143\u914d\u5217\u30921\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\n    model.add(Dense(512, activation='relu')) # \u5168\u7d50\u5408\u5c64\n    model.add(Dropout(0.5)) # \u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\n    model.add(Dense(num_classes)) # \u5168\u7d50\u5408\u5c64\n    model.add(Activation('softmax')) # \u6d3b\u6027\u5316\u5c64\n    \n    return model","bd315b74":"np.random.seed(1671) # \u4e71\u6570\nNB_EPOCH = 200 # \u30a8\u30dd\u30c3\u30af\u6570\nBATCH_SIZE = 128 # \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\nVERBOSE = 1 # keras\u306e\u30ed\u30b0\u306e\u8a73\u7d30\u3055\uff080\u306f\u975e\u8868\u793a\u30011\u306a\u3089\u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u3092\u8868\u793a\u30012\u3067\u5168\u3066\u8868\u793a\uff09\nNB_CLASSES = 10 # \u5206\u985e\u6570\uff1f\nOPTIMIZER = SGD() # \u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\nN_HIDDEN = 128 # \u96a0\u308c\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u6570\nVALIDATION_SPLIT = 0.2 # \u4f55\u5272\u3092\u691c\u8a3c\u30c7\u30fc\u30bf\u3068\u3057\u3066\u5206\u5272\u3059\u308b\u304b","9526037d":"# \u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\ndf_train = pd.read_csv('..\/input\/train.csv')\ndf_X_train = df_train.drop('label', axis=1) # \u30e9\u30d9\u30eb\u5217\u3092\u524a\u9664\ndf_y_train = df_train['label'] # \u30e9\u30d9\u30eb\u5217\u3092\u62bd\u51fa\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\ndf_X_test = pd.read_csv('..\/input\/test.csv')","6033539b":"print('df_X_train', df_X_train.shape)\nprint('df_X_train', type(df_X_train))\nprint('\\ndf_y_train', df_y_train.shape)\nprint('df_y_train', type(df_y_train))\nprint('\\ndf_X_test', df_X_test.shape)\nprint('df_X_test', type(df_X_test))\n\nX_train = df_X_train.values\ny_train = df_y_train.values\nX_test = df_X_test.values\n\nprint('\\n\u2193pandas\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u304b\u3089numpy\u914d\u5217\u306b\u5909\u63db\u2193\\n')\nprint('X_train', X_train.shape)\nprint('X_train', type(X_train))\nprint('\\ny_train', y_train.shape)\nprint('y_train', type(y_train))\nprint('\\nX_test', X_test.shape)\nprint('X_test', type(X_test))","1cd5cf68":"X_train = X_train.astype('float32')\nX_test = X_test.astype('float32')","fb371a12":"X_train \/= 255\nX_test \/= 255\n\n#print(X_train.shape[0], 'train samples')\n#print(X_test.shape[0], 'test samples')\n\n# \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u5909\u63db\n#Y_train = np_utils.to_categorical(y_train, NB_CLASSES)\n#Y_test = np_utils.to_categorical(y_test, NB_CLASSES)","297dce7f":"Y_train = np_utils.to_categorical(y_train, NB_CLASSES)\n\nprint(y_train)\nprint('\\n\u2193\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u751f\u6210\u2193\\n')\nprint(Y_train)","20283bfb":"RESHAPED = 784\n\n# \u30e2\u30c7\u30eb\u751f\u6210\nmodel = Sequential()\nmodel.add(Dense(NB_CLASSES, input_shape=(RESHAPED,))) # \u5168\u7d50\u5408\u5c64\nmodel.add(Activation('softmax')) # \u6d3b\u6027\u5316\u95a2\u6570\nmodel.summary() # \u30e2\u30c7\u30eb\u306e\u8981\u7d04\u3092\u51fa\u529b","fa06155d":"\"\"\"\ndef make_tensorboard(set_dir_name=''):\n    tictoc = strftime(\"%a_%d_%b_%Y_%H_%M_%S\", gmtime())\n    directory_name = tictoc\n    log_dir = set_dir_name + '_' + directory_name\n    os.mkdir(log_dir)\n    tensorboard = TensorBoard(log_dir=log_dir)\n    return tensorboard\n\ncallbacks = [make_tensorboard(set_dir_name='keras_MNIST_V1')]\n\"\"\"","dbd33d53":"# \u30e2\u30c7\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\nmodel.compile(loss='categorical_crossentropy', optimizer=OPTIMIZER, metrics=['accuracy'])\n\nmodel.fit(X_train, Y_train, \n          batch_size=BATCH_SIZE,\n          epochs=NB_EPOCH,\n          verbose=VERBOSE,\n          validation_split=VALIDATION_SPLIT)","0fe6c3c4":"answer = model.predict(X_test, verbose=VERBOSE)","e28e1757":"df_answer = pd.DataFrame(answer) # pandas\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u5909\u63db\n#df_answer.max(axis=1)\ndf_answer = df_answer.idxmax(axis=1) # \u6700\u5927\u5024\u306e\u5217\u540d\u3092\u53d6\u5f97\ndf_answer.index = df_answer.index + 1 # \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30921\u304b\u3089\u632f\u308a\u306a\u304a\u3059\ndf_answer.index.names = ['ImageId'] # \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u540d\u3092\u5909\u66f4\n#print(type(df_answer))\ndf_answer.name = 'Label' # \u5217\u540d\u3092\u5909\u66f4\n#print(df_answer)\ndf_answer.to_csv('answer.csv', header=True, index=True)\n\ndf_answer = pd.read_csv('answer.csv')\nprint(df_answer)","e9c4e2e6":"score = model.evaluate(X_test, Y_test, verbose=VERBOSE)\nprint('Test score:', score[0])\nprint('Test accuracy:', score[1])","bbfc2636":"## \u30e2\u30c7\u30eb\u306e\u751f\u6210","8cfb37e8":"## pandas\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u304b\u3089numpy\u884c\u5217\u306b\u5909\u63db","07a3ae9e":"## \u30e2\u30c7\u30eb\u306e\u69cb\u7bc9","ab564c59":"## \u6b63\u898f\u5316","5b7e383a":"## \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a","5a4e0d08":"## \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","5de2cf9f":"## numpy\u884c\u5217\u306e\u5404\u8981\u7d20\u3092float\u578b\u306b\u5909\u63db","b133e436":"## \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u751f\u6210","46df2eaf":"## TensorBoard\u306e\u6e96\u5099\uff1f","097b2f93":"## csv\u304b\u3089\u30c7\u30fc\u30bf\u3092pandas\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080"}}