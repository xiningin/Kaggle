{"cell_type":{"fb10505b":"code","7b115a09":"code","5f9de749":"code","1b4eb0eb":"code","d4df1faf":"code","fcb9fb75":"code","36270356":"code","9431fd43":"code","8150bf34":"code","5e62f564":"code","dabce699":"code","becd98d0":"code","85fd64dd":"code","6a95fec8":"code","daf36c35":"code","d46a4891":"code","84969cf6":"code","d089d251":"markdown","4f52962a":"markdown","259bfc0a":"markdown"},"source":{"fb10505b":"!pip install tensorflow_datasets","7b115a09":"import warnings; warnings.filterwarnings('ignore')\nimport numpy as np,pandas as pd,pylab as pl\nimport h5py,os,tensorflow as tf\nfrom tensorflow import image as timage\nimport tensorflow_datasets as tfds\nimport tensorflow_hub as th","5f9de749":"def resize_display(x_train,y_train,\n                   x_test,y_test,pixels):\n    x_train=np.array(timage.resize(x_train,[pixels,pixels]))\n    x_test=np.array(timage.resize(x_test,[pixels,pixels]))\n    N=len(y_train); shuffle_ids=np.arange(N)\n    np.random.RandomState(12).shuffle(shuffle_ids)\n    x_train,y_train=x_train[shuffle_ids],y_train[shuffle_ids]\n    N=len(y_test); shuffle_ids=np.arange(N)\n    np.random.RandomState(23).shuffle(shuffle_ids)\n    x_test,y_test=x_test[shuffle_ids],y_test[shuffle_ids]\n    n=int(len(x_test)\/2)\n    x_valid,y_valid=x_test[:n],y_test[:n]\n    x_test,y_test=x_test[n:],y_test[n:]\n    df=pd.DataFrame([[x_train.shape,x_valid.shape,x_test.shape],\n                     [x_train.dtype,x_valid.dtype,x_test.dtype],\n                     [y_train.shape,y_valid.shape,y_test.shape],\n                     [y_train.dtype,y_valid.dtype,y_test.dtype]],\n                    columns=['train','valid','test'],\n                    index=['image shape','image type',\n                           'label shape','label type'])\n    display(df)    \n    return [[x_train,x_valid,x_test],\n            [y_train,y_valid,y_test]]","1b4eb0eb":"splits=['train[:80%]','train[80%:]']\ntfds.disable_progress_bar()\n(raw_train,raw_test),metadata=\\\ntfds.load('cats_vs_dogs:4.0.0',split=splits,\n          with_info=True,as_supervised=True)","d4df1faf":"s=128; ntest=4652\nntrain=23262-ntest\nx_test=np.zeros((ntest,s,s,3),dtype='float32')\ny_test=np.zeros((ntest,1),dtype='int32')\nx_train=np.zeros((ntrain,s,s,3),dtype='float32')\ny_train=np.zeros((ntrain,1),dtype='int32')\ni=0\nfor f,t in raw_test.take(ntest):\n    f=timage.resize(f,[s,s])\n    x_test[i,:]=f.numpy()\/255\n    y_test[i,:]=t; i+=1\ni=0\nfor f,t in raw_train.take(ntrain):\n    f=timage.resize(f,[s,s])\n    x_train[i,:]=f.numpy()\/255\n    y_train[i,:]=t; i+=1\nfig=pl.figure(figsize=(10,4))   \nfor i in range(5):    \n    ax=fig.add_subplot(1,5,i+1,\\\n    xticks=[],yticks=[],title=y_train[i])\n    ax.imshow((x_train[i]));","fcb9fb75":"pd.DataFrame([[x_train.shape,x_test.shape],\n              [x_train.dtype,x_test.dtype],\n              [y_train.shape,y_test.shape],\n              [y_train.dtype,y_test.dtype]],               \n             columns=['train','test'])","36270356":"with h5py.File('CatDogImages.h5','w') as f:\n    f.create_dataset('train_images',data=x_train)\n    f.create_dataset('train_labels',data=y_train)\n    f.create_dataset('test_images',data=x_test)\n    f.create_dataset('test_labels',data=y_test)\nos.stat('CatDogImages.h5')","9431fd43":"[[x_train,x_valid,x_test],\n [y_train,y_valid,y_test]]=\\\nresize_display(x_train,y_train,x_test,y_test,96)","8150bf34":"del raw_train,raw_test","5e62f564":"fpath='..\/input\/image-classification-for-biospecies\/'\nf=h5py.File(fpath+'DogBreedImages.h5','r')\nkeys=list(f.keys()); print(keys)\nx_test2=np.array(f[keys[0]]); y_test2=np.array(f[keys[1]])\nx_train2=np.array(f[keys[2]]); y_train2=np.array(f[keys[3]])\nfig=pl.figure(figsize=(10,4))   \nfor i in range(5):    \n    ax=fig.add_subplot(1,5,i+1,\\\n    xticks=[],yticks=[],title=y_train2[i])\n    ax.imshow((x_train2[i]));","dabce699":"[[x_train2,x_valid2,x_test2],\n [y_train2,y_valid2,y_test2]]=\\\nresize_display(x_train2,y_train2,x_test2,y_test2,96)","becd98d0":"def premodel(pix,den,mh,lbl,activ,loss):\n    model=tf.keras.Sequential([\n        tf.keras.layers.Input((pix,pix,3),\n                              name='input'),\n        th.KerasLayer(mh,trainable=True),\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(den,activation='relu'),\n        tf.keras.layers.Dropout(rate=.5),\n        tf.keras.layers.Dense(lbl,activation=activ)])\n    model.compile(optimizer='adam',\n                  metrics=['accuracy'],loss=loss)\n    display(model.summary())\n    return model\ndef cb(fw):\n    early_stopping=tf.keras.callbacks\\\n    .EarlyStopping(monitor='val_loss',patience=20,verbose=2)\n    checkpointer=tf.keras.callbacks\\\n    .ModelCheckpoint(filepath=fw,save_best_only=True,verbose=2)\n    lr_reduction=tf.keras.callbacks\\\n    .ReduceLROnPlateau(monitor='val_loss',verbose=2,\n                       patience=5,factor=.8)\n    return [checkpointer,early_stopping,lr_reduction]","85fd64dd":"[handle_base,pixels]=[\"mobilenet_v2_075_96\",96]\nmhandle=\"https:\/\/tfhub.dev\/google\/imagenet\/{}\/feature_vector\/4\"\\\n.format(handle_base)\nfw='weights.best.hdf5'","6a95fec8":"model=premodel(pixels,2048,mhandle,1,\n               'sigmoid','binary_crossentropy')\nhistory=model.fit(x=x_train,y=y_train,batch_size=128,\n                  epochs=5,callbacks=cb(fw),\n                  validation_data=(x_valid,y_valid))","daf36c35":"model.load_weights(fw)\nmodel.evaluate(x_test,y_test)","d46a4891":"model=premodel(pixels,4096,mhandle,120,\n               'softmax','sparse_categorical_crossentropy')\nhistory=model.fit(x=x_train2,y=y_train2,batch_size=128,\n                  epochs=5,callbacks=cb(fw),\n                  validation_data=(x_valid2,y_valid2))","84969cf6":"model.load_weights(fw)\nmodel.evaluate(x_test2,y_test2)","d089d251":"## NN Examples","4f52962a":"## Code Modules & Functions","259bfc0a":"## Data"}}