{"cell_type":{"48af9f0a":"code","e690c18f":"code","b5850db1":"code","3812821e":"code","f33de54f":"code","af9ad5f6":"code","53aae9cd":"code","afe9e47a":"code","5c78c431":"code","5196b952":"code","2a607386":"code","c26ff49e":"code","cc97856a":"code","ec06f4a7":"code","bd63da60":"code","008c1f5a":"code","a0164ada":"code","b7e6bf64":"code","46d8ee8b":"code","0aab9392":"code","323984ca":"code","bc937e38":"code","16c4168c":"code","4c534c86":"code","4e8889f3":"code","59fe9673":"code","cc6cf4e0":"code","ddf405d2":"code","ed31c441":"code","77a61c89":"code","f2a53ba2":"code","05b5b1a1":"code","8510bdec":"code","86b44272":"code","ad79da25":"code","1dbe39e3":"code","97437295":"code","33fe17c1":"code","bbf9aaa0":"code","e41131e7":"code","11406fcc":"code","bf28a135":"code","6e848aad":"code","3ceb20d0":"code","ebe829d5":"code","4ba3c0c9":"code","2b0e4f60":"code","ab4862ea":"code","fd0ac99c":"code","772ebbe6":"code","f6576564":"code","a8e76e4e":"markdown","24345f36":"markdown","cd56bd51":"markdown","6cbbd767":"markdown","c3471c80":"markdown","9497431a":"markdown","027026fd":"markdown","12204743":"markdown","d2801d29":"markdown","dd47b2b2":"markdown","72ffca9f":"markdown","7534bf8b":"markdown","1894e9e4":"markdown","a223cb0e":"markdown","dfd8b5b2":"markdown","2905db33":"markdown","da5c4655":"markdown","79e826b5":"markdown","0ab0e775":"markdown","2850cf43":"markdown","bf6d3d9b":"markdown","5cf7357b":"markdown","98f8dd8f":"markdown","9ec163fe":"markdown","5ebdd8d6":"markdown","102667a5":"markdown","f2c415ed":"markdown","13db2ca1":"markdown","d7597cce":"markdown","589cefed":"markdown","cfe50a0a":"markdown"},"source":{"48af9f0a":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e690c18f":"!mkdir cookbook","b5850db1":"!cp \/kaggle\/input\/cookbook\/recsys.py cookbook\/recsys.py\n!cp \/kaggle\/input\/cookbook\/generic_preprocessing.py cookbook\/generic_preprocessing.py","3812821e":"import numpy as np \nimport pandas as pd \n\n# \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0442\u0438\u043b\u0438\u0442\u043e\u043a \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\nfrom cookbook.recsys import * \nfrom cookbook.generic_preprocessing import * \n\nimport scipy\nimport random\nimport scipy.sparse as sp\nfrom itertools import cycle, islice\nfrom implicit.nearest_neighbours import BM25Recommender, TFIDFRecommender\nfrom datetime import date\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (20,10)","f33de54f":"def seed_everything(seed = 42):\n    random.seed(seed)\n    np.random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n","af9ad5f6":"seed_everything(1000)","53aae9cd":"\nBOOK_CNT = 4000\n\n# \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\nDATA_DIR = \"\/kaggle\/input\/mts-ml-summer-school\/\"\n\nSUB_DIR = \"\/kaggle\/input\/cookbook\/\"","afe9e47a":"items = pd.read_csv(os.path.join(DATA_DIR, \"items.csv\"))\nusers = pd.read_csv(os.path.join(DATA_DIR, \"users.csv\"))\ninteractions = pd.read_csv(os.path.join(DATA_DIR, \"interactions.csv\"))\n\n# \u0422\u043e\u043f \u0437\u0430 30 \u0434\u043d\u0435\u0439. \u041d\u0443\u0436\u0435\u043d \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441\u0430\u0431\u043c\u0438\u0442\u0430\nsub = pd.read_csv(os.path.join(SUB_DIR, \"submission_pop_30.csv\"))\n","5c78c431":"full_set = pd.merge( \n    pd.merge(interactions, items, how='left', left_on=\"item_id\", right_on=\"id\"),\n    users, how=\"left\", left_on=\"user_id\", right_on=\"user_id\").drop([\"id\"], axis=1)","5196b952":"full_set.age.fillna(\"unknown_age\", inplace=True)\nfull_set.sex.fillna(\"unknown_sex\", inplace=True)","2a607386":"full_set['age'] = full_set.age.apply(lambda x: x.split(\"_\")[0])","c26ff49e":"def get_info_last(x, word):\n    try: \n        x = x.replace('\\n', '').replace('\\t', '').replace('  ', ' ').replace('\/', ',').lower()\n        return x.split(',')[-1].strip().rstrip()\n    except Exception as e:\n        return word","cc97856a":"full_set['one_author'] = full_set.authors.apply(lambda x: get_info_last(x, '\u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d'))\n","ec06f4a7":"full_set.start_date = pd.to_datetime(full_set.start_date)\nfull_set['init_date'] = \"2017-12-31\"\nfull_set.init_date = pd.to_datetime(full_set.init_date)","bd63da60":"full_set['diff'] = full_set.start_date -  full_set.init_date\n\nfull_set['weight'] = full_set['diff'].apply(lambda x: 1.2578890000000001e-46*pow(x.days,17.08534) )","008c1f5a":"x = np.array(range(730))\ny = 1.2578890000000001e-46*(x**17.08534)\n\nplt.plot(x,y,label='y = 1.257889e-46*x^17.08534')\nplt.title('\u0412\u0435\u0441 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0434\u043d\u044f')\nplt.grid()\nplt.legend()\nplt.show()\n","a0164ada":"users_ids = sub.Id.tolist()","b7e6bf64":"full_set[full_set.start_date  > \"2019-10-30\"].groupby('item_id')['progress'].count().reset_index().sort_values(by='progress', ascending=False)[:BOOK_CNT]","46d8ee8b":"# \u0412\u043e\u0437\u044c\u043c\u0451\u043c \u043f\u0435\u0440\u0432\u044b\u0435 BOOK_CNT \u043a\u043d\u0438\u0433 \u043f\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u043c\u043e\u0441\u0442\u0438\n\nitems_list = full_set[full_set.start_date  > \"2019-10-30\"].groupby('item_id')['progress'].count().reset_index().sort_values(by='progress', ascending=False)['item_id'][:BOOK_CNT]","0aab9392":"# \u0414\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0445\n\ninteractions_existing = full_set[full_set.item_id.isin(items_list)]","323984ca":"_temp = full_set[full_set.start_date >= \"2019-12-01\"]","bc937e38":"def get_items_info(sex_type, book_list):\n    \n    print(\"_\"*100)\n    print(sex_type) \n    for i in book_list:\n        print(items[items.id ==i]['title'].values[0])\n\n        \ndef get_items_info_by_sex_and_age(sex, age):\n    _temp[(_temp.sex==1.0) & (_temp.age==\"18\") ].groupby(['item_id'])['user_id'].count().reset_index().sort_values(by=['user_id'], ascending=[False]).head(10)['item_id'].tolist()","16c4168c":"print(get_items_info(\"Unknown sex:\", [276903, 168963, 187325, 352049, 79499, 267817, 33801, 283713, 93751, 50718]))  \nprint(get_items_info('Male sex', [283713, 184549, 276903, 357309, 55466, 385281, 143175, 168963, 352049, 287060]))  \nprint(get_items_info('Female sex', [283713, 184549, 143175, 168963, 80003, 357309, 56877, 55466, 276903, 385281]))  ","4c534c86":"def get_books_by_stats(desc, sex=1.0, age=\"18\"):\n    \n    \n    top_items = _temp[(_temp.sex==sex) & (_temp.age==age) ].groupby(['item_id'])['user_id'].count().reset_index().sort_values(by=['user_id'], ascending=[False]).head(10)['item_id'].tolist()\n    return get_items_info(desc, top_items) \n","4e8889f3":"print(get_books_by_stats(\"Women 18\", sex=1.0, age=\"18\"))","59fe9673":"print(get_books_by_stats(\"Women 65\", sex=1.0, age=\"65\"))","cc6cf4e0":"print(get_books_by_stats(\"Men 18\", sex=1.0, age=\"18\"))","ddf405d2":"print(get_books_by_stats(\"Men 65\", sex=1.0, age=\"65\"))","ed31c441":"conditions = { (0.0, \"18\"):[80003, 283713, 287060, 184549, 267817, 385281, 56877, 262464, 168963, 131612],\n              (1.0, \"18\"):[184549, 276903, 80003, 385281, 55466, 283713, 112869, 168963, 364570, 264133],\n              (0.0, \"25\"):[80003, 56877, 262464, 184549, 357309, 168963, 276903, 385281, 143175, 287060],\n              (1.0, \"25\"):[385281, 283713, 276903, 357309, 187325, 229030, 287060, 184549, 168963, 112869],\n              (0.0, \"35\"):[283713, 184549, 357309, 80003, 56877, 168963, 302067, 242176, 385281, 344047],\n              (1.0, \"35\"):[184549, 357309, 283713, 385281, 276903, 112869, 287060, 5408, 143175, 168963],\n              (0.0, \"45\"):[283713, 184549, 143175, 321351, 168963, 55466, 357309, 323949, 190198, 112869],\n              (1.0, \"45\"):[283713, 184549, 357309, 276903, 55466, 168963, 50718, 143175, 246948, 242176],\n              (0.0, \"55\"):[283713, 143175, 168963, 55466, 184549, 160349, 357309, 323949, 190198, 51423],\n              (1.0, \"55\"):[283713, 184549, 352049, 55466, 143175, 276903, 58480, 51581, 112869, 40953],\n              (0.0, \"65\"):[283713, 143175, 184549, 55466, 374648, 160349, 168963, 267817, 178529, 352049],\n              (1.0, \"65\"):[283713, 55466, 51423, 143526, 276903, 126630, 184549, 232758, 143175, 49054],\n              \n              (1.0):[283713, 184549, 276903, 357309, 55466, 385281, 143175, 168963, 352049, 287060],\n              (0.0):[283713, 184549, 143175, 168963, 80003, 357309, 56877, 55466, 276903, 385281],\n              ('unknown_sex'):[276903, 168963, 187325, 352049, 79499, 267817, 33801, 283713, 93751, 50718]\n            }","77a61c89":"users_inv_mapping = dict(enumerate(interactions_existing['user_id'].unique()))\nusers_mapping = {v: k for k, v in users_inv_mapping.items()}\nprint(len(users_mapping))\n\n\nitems_inv_mapping = dict(enumerate(interactions_existing['item_id'].unique()))\nitems_mapping = {v: k for k, v in items_inv_mapping.items()}\nprint(len(items_mapping))","f2a53ba2":"def get_coo_matrix(df, \n                   user_col='user_id', \n                   item_col='item_id', \n                   weight_col=None, \n                   users_mapping=users_mapping, \n                   items_mapping=items_mapping):\n    if weight_col is None:\n        weights = np.ones(len(df), dtype=np.float32)\n    else:\n        weights = df[weight_col].astype(np.float32)\n\n    interaction_matrix = sp.coo_matrix((\n        weights, \n        (\n            df[user_col].map(users_mapping.get), \n            df[item_col].map(items_mapping.get)\n        )\n    ))\n    return interaction_matrix","05b5b1a1":"train = get_coo_matrix(interactions_existing, weight_col='weight').tocsr()","8510bdec":"b25_model = BM25Recommender(K=10, K1=2.0, B=0.75)#TFIDFRecommender(K=10)\nb25_model.fit(train.T)","86b44272":"top_N = 10\nuser_id = sub['Id'].iloc[2]\nrow_id = users_mapping[user_id]\nprint(f'\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f {user_id}, \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438 - {row_id}')\n","ad79da25":"def generate_implicit_recs_mapper(model, train_matrix, N, user_mapping, item_inv_mapping):\n    def _recs_mapper(user):\n        user_id = user_mapping[user]\n        recs = model.recommend(user_id, \n                               train_matrix, \n                               N=N, \n                               filter_already_liked_items=True)\n        return [item_inv_mapping[item] for item, _ in recs]\n    return _recs_mapper\n","1dbe39e3":"mapper = generate_implicit_recs_mapper(b25_model, train, top_N, users_mapping, items_inv_mapping)","97437295":"%time\nrecs = pd.DataFrame({\n    'user_id': interactions_existing['user_id'].unique()\n})\nrecs['item_id'] = recs['user_id'].map(mapper)\nrecs.head()\n","33fe17c1":"recs[recs.user_id.isin(sub.Id) ].shape[0]","bbf9aaa0":"missing_ids = sub[~sub.Id.isin(recs[recs.user_id.isin(sub.Id)]['user_id'])]['Id'].tolist()","e41131e7":"len(missing_ids)","11406fcc":"recs_metric = recs.explode('item_id')\nrecs_metric['rank'] = recs_metric.groupby('user_id').cumcount() + 1\nrecs_metric.head(top_N + 2)","bf28a135":"def compute_metrics(df_true, df_pred, top_N):\n    result = {}\n    test_recs = df_true.set_index(['user_id', 'item_id']).join(df_pred.set_index(['user_id', 'item_id']))\n    test_recs = test_recs.sort_values(by=['user_id', 'rank'])\n\n    test_recs['users_item_count'] = test_recs.groupby(level='user_id')['rank'].transform(np.size)\n    test_recs['reciprocal_rank'] = (1 \/ test_recs['rank']).fillna(0)\n    test_recs['cumulative_rank'] = test_recs.groupby(level='user_id').cumcount() + 1\n    test_recs['cumulative_rank'] = test_recs['cumulative_rank'] \/ test_recs['rank']\n    \n    users_count = test_recs.index.get_level_values('user_id').nunique()\n    for k in range(1, top_N + 1):\n        hit_k = f'hit@{k}'\n        test_recs[hit_k] = test_recs['rank'] <= k\n        result[f'Precision@{k}'] = (test_recs[hit_k] \/ k).sum() \/ users_count\n        result[f'Recall@{k}'] = (test_recs[hit_k] \/ test_recs['users_item_count']).sum() \/ users_count\n\n    result[f'MAP@{top_N}'] = (test_recs[\"cumulative_rank\"] \/ test_recs[\"users_item_count\"]).sum() \/ users_count\n    \n    #print(result)\n    result[f'MRR'] = test_recs.groupby(level='user_id')['reciprocal_rank'].max().mean()\n    return pd.Series(result)","6e848aad":"print(compute_metrics(interactions_existing, recs_metric, top_N))","3ceb20d0":"res = recs[recs.user_id.isin(sub.Id)]\nrecs_dict =  {i[0]:i[1] for  i in res[['user_id', \t'item_id']].values}\n","ebe829d5":"\nclass Restoring:\n    \"\"\"Restore missing values. Just filling by common according user's features\"\"\"\n    def __init__(self):\n        self.users = users\n        self.users.age.fillna(\"unknown_age\", inplace=True)\n        self.users.sex.fillna(\"unknown_sex\", inplace=True)\n        self.users['age'] = users.age.apply(lambda x: x.split(\"_\")[0])\n        self.conditions = conditions\n        self.missing_ids = missing_ids\n        self.conditions_cnt = {}\n\n    def get_users_sex(self, user_id):\n        if len(self.users[self.users.user_id == user_id]) > 0:\n            return self.users[self.users.user_id == user_id]['sex'].values[0]\n        else:\n            return None\n    \n    def get_users_age(self, user_id):\n        if len(self.users[self.users.user_id == user_id]) > 0:\n            return self.users[self.users.user_id == user_id]['age'].values[0]\n        else:\n            return None\n    \n    def restore_values(self, x):\n\n        key = None\n        sex = self.get_users_sex(x['Id'])\n        age = self.get_users_age(x['Id'])  \n\n        ## \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u044e\u0447 \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n        if age in [None, 'age'] or sex in [None, 'unknown_sex']:\n            if sex in [None, 'unknown_sex']:\n                key = ('unknown_sex')\n            else:\n                key = (sex)\n\n        else:\n            key = (sex, age)  \n        \n        ## \u0415\u0441\u043b\u0438 \u043d\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0435\n        if x['Id'] in self.missing_ids:\n\n            if key in self.conditions_cnt.keys():\n                self.conditions_cnt[key] +=1\n            else:\n                self.conditions_cnt[key] = 1\n            \n            return ' '.join([str(i) for i in self.conditions[key]])\n        else:\n            ##  \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0435\u0433\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u0443\n            if x['Id'] in recs_dict.keys():\n                return ' '.join([str(i) for i in recs_dict[x['Id']]])\n            else:\n            ## \u0418\u043b\u0438 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0432\u0441\u0451 \u043a\u0430\u043a \u0435\u0441\u0442\u044c\n                return x['Predicted']\n    \n    def clear_dict(self):\n        self.conditions_cnt = {}\n        ","4ba3c0c9":"rest = Restoring()","2b0e4f60":"sub2 = sub.copy()","ab4862ea":"sub2['Predicted'] = sub2.apply(lambda x: rest.restore_values(x), axis=1)","fd0ac99c":"sub2.to_csv(\"submission.csv\", index=None)","772ebbe6":"sub2","f6576564":"rest.conditions_cnt","a8e76e4e":"\u0412\u043e\u043e\u0431\u0449\u0435, \u044f \u0447\u0435\u0441\u0442\u043d\u043e \u0434\u043e\u043b\u0433\u043e \u043f\u044b\u0442\u0430\u043b\u0441\u044f \u0441\u0432\u0430\u0440\u0438\u0442\u044c  LightFM, \u043d\u043e \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a. ","24345f36":"\u0415\u0441\u043b\u0438 \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u0440\u0430\u0442\u043a\u043e, \u0442\u043e \u0432\u0441\u0451 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e. \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043d\u0430 \u0442\u0435\u0445 \u044e\u0437\u0435\u0440\u0430\u0445, \u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u044b \u0447\u0442\u043e-\u0442\u043e \u0437\u043d\u0430\u0435\u043c, \u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c ~~\u0434\u0430\u0434\u0438\u043c \u043f\u0438\u0446\u0446\u0443, \u0432\u0435\u0434\u044c \u0435\u0451 \u0432\u0441\u0435 \u043b\u044e\u0431\u044f\u0442~~ \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u043c \u0447\u0442\u043e-\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0435. \u0417\u0432\u0443\u0447\u0438\u0442 \u043a\u0430\u043a \u043f\u043b\u0430\u043d, \u0441\u043a\u0430\u0436\u0438 \u0436\u0435, \u0414\u0436\u0435\u0444\u0444\u0440\u0438...","cd56bd51":"![Screen](https:\/\/i.postimg.cc\/7ZG9V6wj\/photo-2021-05-16-22-54-03.jpg)","6cbbd767":"\u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043c\u043e\u043c\u0435\u043d\u0442, \u043b\u044e\u0434\u044f\u043c \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e \u0434\u0432\u0438\u0433\u0430\u0442\u044c\u0441\u044f \u0432\u043f\u0435\u0440\u0451\u0434, ~~\u0434\u043e\u043c\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0432\u043b\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c, \u0443\u043d\u0438\u0436\u0430\u0442\u044c~~ \u0443\u0431\u0435\u0436\u0434\u0430\u0442\u044c \u0438 \u0432\u043e\u0437\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c. \u042f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043f\u0440\u0438\u0447\u0438\u043d\u043e\u0439 \u044d\u0442\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0433\u043e, \u0438\u043b\u0438 \u043f\u043e\u0442\u0435\u0440\u044f \u0436\u0435\u043b\u0430\u043d\u0438\u044f, \u0432\u043e\u043f\u0440\u043e\u0441 \u0434\u0438\u0441\u043a\u0443\u0441\u0441\u0438\u043e\u043d\u043d\u044b\u0439.\n\n\u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e \u0432 \u0422\u041e\u041f\u0435 \u043e\u0447\u0435\u043d\u044c \u0447\u0430\u0441\u0442\u043e \u043f\u043e\u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u0438 \u0441\u0432\u043e\u0435\u0433\u043e \u0440\u043e\u0434\u0430 \u043a\u043d\u0438\u0436\u043d\u043e\u0433\u043e \"\u0430\u0440\u0442-\u0445\u0430\u0443\u0441\u0430\", \u0432\u0440\u043e\u0434\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u0431\u0440\u0430\u0442\u044c\u0435\u0432 \u0421\u0442\u0440\u0443\u0433\u0430\u0446\u043a\u0438\u0445 \"\u041f\u0438\u043a\u043d\u0438\u043a \u043d\u0430 \u043e\u0431\u043e\u0447\u0438\u043d\u0435\" \u0438 \"\u041f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u0443\u0431\u0431\u043e\u0442\u0443\". \u042d\u0442\u043e \u0442\u0435, \u043a\u0442\u043e \u043f\u0438\u0441\u0430\u043b\u0438 \u043e \u0441\u0442\u0430\u043b\u043a\u0435\u0440\u0430\u0445 \u0434\u043e \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u044d\u0442\u043e \u0441\u0442\u0430\u043b\u043e \u043c\u0435\u0439\u043d\u0441\u0442\u0440\u0438\u043c\u043e\u043c, \u0434\u043e \u0440\u0435\u0431\u044f\u0442 \u0438\u0437 GSC Game World, \u0434\u0430 \u0438 \u0434\u043e \u0441\u0430\u043c\u043e\u0439 \u0430\u0432\u0430\u0440\u0438\u0438 \u043d\u0430 \u0427\u0410\u042d\u0421. **Press F to pay respect.** ~~\u0422\u043e \u0447\u0442\u043e \u0432\u043e\u0434\u043a\u0430 \u0441\u043f\u0430\u0441\u0430\u0435\u0442 \u043e\u0442 \u0440\u0430\u0434\u0438\u0430\u0446\u0438\u0438, \u043e\u043d\u0438 \u0442\u0430\u043c \u043d\u0435 \u043f\u0438\u0441\u0430\u043b\u0438.~~ \n\n","c3471c80":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0437\u0430\u0438\u043c\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u044b \u043e\u0442\u0441\u044e\u0434\u0430   [BM25](https:\/\/ru.wikipedia.org\/wiki\/Okapi_BM25)","9497431a":" \u0412 - \u0412\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c. \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0441\u0438\u0434\u044b, \u0447\u0442\u043e\u0431\u044b \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u0441\u0435\u0432\u0434\u043e\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0413\u0421\u0427.","027026fd":"\u0418 \u043f\u043e \u043c\u0443\u0436\u0447\u0438\u043d\u0430\u043c","12204743":"\u0418\u0442\u0430\u043a, \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043a \u043a\u043e\u043d\u0446\u0443 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435. \u0412\u0441\u0435\u0433\u0434\u0430 \u043b\u044e\u0431\u0438\u043b \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u0437\u0430 \u043b\u0438\u0434\u0435\u0440\u0431\u043e\u0440\u0434\u0430\u043c\u0438 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 24 \u0447\u0430\u0441\u0430. \u041e\u043d\u0438, \u043f\u043e \u0441\u0443\u0442\u0438, \"\u0432\u0441\u043a\u0438\u043f\u0430\u044e\u0442\" \u0438 \u0432 \u0435\u0433\u043e \u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0435, \u0430 \u0438\u043d\u043e\u0433\u0434\u0430 \u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u044f\u0442 \u0431\u0443\u0440\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438. \u0410 \u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u0432 \u0441\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u044f\u0445, \u0438\u043b\u0438 \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043f\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c \u0442\u043e \u0431\u044b\u0432\u0430\u0435\u0442 \u0435\u0449\u0451 \u0438 \u0441\u0438\u043b\u044c\u043d\u044b\u0439 \u0448\u0430\u0444\u043b. \u0421\u0442\u0440\u0430\u0448\u043d\u043e, \u043d\u043e \u0431\u0435\u0441\u0446\u0435\u043d\u043d\u043e. \n\n\u0412\u043f\u0440\u043e\u0447\u0435\u043c, \u0441\u0435\u0439\u0447\u0430\u0441 \u043d\u0435 \u043e\u0431 \u044d\u0442\u043e\u043c. \u042d\u0442\u043e\u0442 \u043a\u0435\u0440\u043d\u0435\u043b \u043f\u0438\u0448\u0435\u0442\u0441\u044f \u0437\u0430 \u0441\u0443\u0442\u043a\u0438 \u0434\u043e \u043d\u0430\u0434\u0432\u0438\u0433\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439, \u0430 \u043f\u043e\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u043f\u0438\u0448\u0443 \u0441\u0432\u043e\u0451 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u044e \u0432\u0441\u0435\u043c \u0443\u0434\u0430\u0447\u0438. ","d2801d29":"\u041d\u0430 \u044d\u0442\u043e\u043c \u0441 \u0442\u0435\u043c, \u0447\u0435\u043c \u0431\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u0440\u043e\u0434\u0435 \u0431\u044b \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043b\u0438\u0441\u044c. ","dd47b2b2":"\u041f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0430 (\u0434\u043b\u044f \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e\u0441\u0442\u0438)","72ffca9f":"![Lebowski](https:\/\/i.postimg.cc\/cHGZVC6K\/That-s-a-great-plan-Walter-That-s-fuckin-ingenious-if-I-understand-it-correctly-It-s-a-Swiss-fu.png)","7534bf8b":"## Part IV. BM25Recommender + Prediction","1894e9e4":"\u0412\u043e\u043e\u0431\u0449\u0435, \u043d\u0430\u0447\u043d\u0451\u043c \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435 \u0441 \u043a\u043e\u043d\u0446\u0430, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0441 \u0442\u043e\u0433\u043e, \u0447\u0435\u043c \u0431\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0441\u0430\u0431\u043c\u0438\u0442\u0435. \u0422\u0443\u0442 \u0432\u0441\u0451 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0438 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e. \u0412\u0441\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043d\u044b\u0435 ID \u043f\u0440\u0435\u0434\u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u043d\u044b \u0437\u0430 \u043c\u0435\u0441\u044f\u0446 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0433\u0440\u0443\u043f\u043f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0437\u0430\u0445\u043b\u044f\u043c\u043b\u044f\u0442\u044c \u043a\u043e\u0434 \u0437\u0434\u0435\u0441\u044c. ","a223cb0e":"C\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u044d\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u043e\u0434\u0431\u043e\u0440\u043e\u043a \u0432 \u0441\u0430\u043c\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438, \u0447\u0442\u043e \u0442\u043e\u0436\u0435 \u043a \u0441\u043b\u043e\u0432\u0443, \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u0434\u043b\u044f \u043c\u0430\u043d\u0435\u0432\u0440\u043e\u0432 \u0438 \u0438\u0437\u044b\u0441\u043a\u0430\u043d\u0438\u0439 \u0432 \u044d\u0442\u043e\u043c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438. ","dfd8b5b2":"## Part VI. Epilogue","2905db33":"\u041a\u043d\u0438\u0433 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e(\u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u043a\u043d\u0438\u0433 \u043c\u043d\u043e\u0433\u043e \u043d\u0435 \u0431\u044b\u0432\u0430\u0435\u0442). \u041d\u043e \u0442\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u0432\u043e\u0437\u044c\u043c\u0451\u043c \u0442\u043e\u043f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445","da5c4655":"## Part 0: Prologue","79e826b5":"\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439","0ab0e775":"\u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043d\u0430\u0447\u043d\u0451\u043c. ","2850cf43":"by MEMPHIS","bf6d3d9b":"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0443\u0436\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","5cf7357b":"## Part III. Simple and curious EDA (The second part solution)","98f8dd8f":"\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0443\u0436\u043d\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0438 \u0432\u043e\u0442 \u044d\u0442\u043e \u0432\u0441\u0451. \u0417\u0434\u0435\u0441\u044c \u0441\u0442\u043e\u0438\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0434\u043d\u0443 \u0440\u0435\u043c\u0430\u0440\u043a\u0443. \u0414\u0430\u043b\u0435\u0435 \u043f\u043e\u0439\u0434\u0451\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u043e, \u0447\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u0437\u0430\u0448\u043b\u043e. \u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043d\u043e \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0438 \u0435\u0449\u0451 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0430\u0436\u0435 \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u043e. ","9ec163fe":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432 \u0441\u0440\u0435\u0437\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u043e \u0436\u0435\u043d\u0449\u0438\u043d\u0430\u043c.","5ebdd8d6":"\u0412\u0440\u043e\u0434\u0435 \u0432\u0441\u0451. \u0417\u0434\u0435\u0441\u044c \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u0432\u0430\u0436\u043d\u043e\u0435, \u043d\u043e ~~\u0432\u0430\u0436\u043d\u044b\u0439 \u0438 \u0432\u044b\u0447\u0443\u0440\u043d\u044b\u0439~~ \u044d\u043f\u0438\u043b\u043e\u0433 \u044f \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0442\u044c \u043d\u0435 \u0441\u043c\u043e\u0433. \u041d\u0443 \u0440\u0430\u0437\u0432\u0435 \u0447\u0442\u043e \u0441\u043e\u0432\u0435\u0442 \u043b\u044e\u0431\u0438\u0442\u044c \u0442\u043e, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0448\u044c \u0438 \u0447\u0438\u0442\u0430\u0442\u044c \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u043a\u043d\u0438\u0433\u0438. \u0412\u0441\u0435\u043c *peace*. ","102667a5":"\u0418\u0434\u0435\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u044b\u0448\u0435 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c. \u0412\u043e\u0437\u044c\u043c\u0451\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u043a 31 \u0434\u0435\u043a\u0430\u0431\u0440\u044f 2017 \u0433\u043e\u0434\u0430 \u0438 \u0432\u0437\u0432\u0435\u0441\u0438\u043c \u043d\u0435\u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446 \u0431\u0443\u0434\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u044b\u0439 \u0438 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0440\u0430\u0441\u0442\u0443\u0449\u0438\u0439 \u0432\u0435\u0441, \u0447\u0435\u043c \u0437\u0430 \u043f\u0435\u0440\u0438\u043e\u0434 \u0434\u043e \u0434\u0435\u043a\u0430\u0431\u0440\u044f, \u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u043d\u0435\u0434\u0435\u043b\u044e \u0438 \u0442\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0435\u0435. \n\n\u0427\u0435\u043c \u0431\u043b\u0438\u0436\u0435 \u043a 31 \u0434\u0435\u043a\u0430\u0431\u0440\u044f \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435, \u0442\u0435\u043c \u0432\u0430\u0436\u043d\u0435\u0435 \u0434\u043b\u044f \u043d\u0430\u0441 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0435\u0433\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e. ","f2c415ed":"## Part V. Blend it all","13db2ca1":"## Part I. Preparation ","d7597cce":"\u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043c\u043e\u0440\u0430\u043b\u044c. \u041d\u0430\u0432\u0435\u0440\u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u043f\u043e \u043f\u043e\u043b\u0443 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443. \u0410 \u043f\u043e\u0447\u0435\u043c\u0443 \u0431\u044b \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0438 \u043d\u0435\u0442.","589cefed":"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043c\u0435\u043d","cfe50a0a":"## Part II. Preprocessing\n"}}