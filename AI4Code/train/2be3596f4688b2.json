{"cell_type":{"3cef84d0":"code","44aa7ed8":"code","67d6fd51":"code","9e684ad6":"code","b03f915e":"code","06b33df0":"code","580f8990":"code","350d4ad9":"code","f4391ee5":"code","172c400d":"code","505332b9":"code","bcb419de":"code","cb12c223":"code","ffc692f9":"code","b5943eab":"code","7e04ec88":"markdown","f1fa47a7":"markdown","1a304712":"markdown","bb6c4abd":"markdown","909512bf":"markdown","8ebc80ac":"markdown","5d179cac":"markdown","2f46761e":"markdown"},"source":{"3cef84d0":"import pandas as pd\nimport numpy as np\n\nfrom collections import Counter\n\nfrom sklearn.model_selection import train_test_split,GridSearchCV\n\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.ensemble import StackingClassifier\n\nseed=42","44aa7ed8":"df = pd.read_csv('..\/input\/parkinsons-disease-data-set\/parkinsons.data')\ndf.head()","67d6fd51":"df.shape","9e684ad6":"df.info()","b03f915e":"print(Counter(df['status']))","06b33df0":"df.isnull().sum()","580f8990":"X = df.drop(['name','status'],axis=1)\ny = df['status']","350d4ad9":"x_train, x_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=seed)","f4391ee5":"parameters = {'penalty': ['l1', 'l2'], \n              'C': [0.1, 0.4, 0.8, 1, 2, 5,10,20,30]}    \n\ngrid_search=GridSearchCV(estimator=LogisticRegression() ,param_grid=parameters,cv=10,n_jobs=-1,verbose=2)\ngrid_search.fit(x_train,y_train)\n\nlog_reg = grid_search.best_estimator_\n\ngrid_search.best_params_","172c400d":"y_pred=log_reg.predict(x_test)\n\nprint(\"\\n\",confusion_matrix(y_test,y_pred))\nlog_reg_acc = accuracy_score(y_test,y_pred)\n\nprint(\"\\nAccuracy Score {}\".format(log_reg_acc))\nprint(\"Classification report: \\n{}\".format(classification_report(y_test,y_pred)))","505332b9":"from sklearn.svm import LinearSVC\n\nsvc = LinearSVC()\n\nparameters = {\n      'penalty':['l1', 'l2'],\n      'max_iter': [10,20,50,100,1000], \n      'C': [0.1, 0.4, 0.8, 1, 2, 5,10,20,30],          \n              }\n\ngrid_search=GridSearchCV(estimator=svc ,param_grid=parameters,cv=10,n_jobs=-1,verbose=2)\ngrid_search.fit(x_train,y_train)\n\nsvc = grid_search.best_estimator_\n\ngrid_search.best_params_","bcb419de":"y_pred=svc.predict(x_test)\n\nprint(\"\\n\",confusion_matrix(y_test,y_pred))\nsvc_acc = accuracy_score(y_test,y_pred)\nprint(\"\\nAccuracy Score {}\".format(svc_acc))\nprint(\"Classification report: \\n{}\".format(classification_report(y_test,y_pred)))","cb12c223":"xgb = XGBClassifier()\n\nparameters = {'min_child_weight' : np.arange(0,20),\n              'max_depth': [2, 4, 5, 7, 9, 10]}\n\ngrid_search=GridSearchCV(estimator=xgb ,param_grid=parameters,cv=10,n_jobs=-1,verbose=2)\ngrid_search.fit(x_train,y_train)\n\nxgb = grid_search.best_estimator_\n\ngrid_search.best_params_","ffc692f9":"y_pred=xgb.predict(x_test)\n\nprint(\"\\n\",confusion_matrix(y_test,y_pred))\nxgb_acc = accuracy_score(y_test,y_pred)\nprint(\"\\nAccuracy Score {}\".format(xgb_acc))\nprint(\"Classification report: \\n{}\".format(classification_report(y_test,y_pred)))","b5943eab":"estimators = [ ('xgb', xgb ), \n              ('svc',svc ),\n              ('log_Reg', log_reg)]\n\n\nstack =StackingClassifier(estimators=estimators ,final_estimator= svc)\n\nstack.fit(x_train,y_train)\nstack_predicted = stack.predict(x_test)\n\nstack_conf_matrix = confusion_matrix(y_test, stack_predicted)\nstack_acc_score = accuracy_score(y_test, stack_predicted)\n\nprint(\"confussion matrix\")\nprint(stack_conf_matrix)\nprint(\"\\n\")\nprint(\"Accuracy of Stacking Classifier:\",stack_acc_score*100,'\\n')\nprint(classification_report(y_test,stack_predicted))","7e04ec88":"# Support Vector Classifier","f1fa47a7":"# Models\n\nHere I have used:\n* Logistic Regression\n* Support Vector Classifier\n* Extreme Gradient Boosting\n\nAnd, used GridSearchCV to hyperparameter tune all of them.\n\nThen used StackingClassifier to Stack all of them into an Ensemble.\n","1a304712":"# Exploring the Data","bb6c4abd":"<h1> 94% Accuracy in Predicting Parkinson's Disease through Ensemble Method \n    \n(Stacking Classifier) <\/h1>","909512bf":"# Extreme Gradient Boosting","8ebc80ac":"# Logistic Regression","5d179cac":"# Data preprocessing","2f46761e":"# Stacking Ensemble Classifier"}}