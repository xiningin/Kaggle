{"cell_type":{"f3865ca9":"code","7e38be50":"code","ba652b40":"code","4e3d17d5":"code","f1392a8d":"code","cfd0b567":"code","4bd3933c":"code","0d51b44d":"code","564c1d9f":"code","b44b1716":"code","9290110a":"code","a71ab06d":"code","ea04d066":"code","f2f7cc6a":"code","f1c065e9":"code","e146e2ad":"code","abd28b87":"code","7e9ddec3":"code","1a0a8208":"code","f2b40c54":"code","51d9f03f":"code","21ead258":"code","059fe759":"code","e2fa4da4":"code","10c20208":"code","b45467b5":"code","7314f8b4":"code","e6284ee7":"code","42bac6b1":"code","e8fec7bd":"code","20acf5d5":"code","0a7abd24":"code","61ccd525":"code","da88dc2f":"code","475ee332":"code","c997dd73":"code","1340dbdc":"code","025cd26c":"code","c9d6f733":"code","ae5f17ba":"code","cbe655c3":"code","0fac953a":"markdown","6247fed6":"markdown","26a6aa33":"markdown","1d2b97b1":"markdown","7cdfc763":"markdown","8d48102b":"markdown","7bfa2a49":"markdown","3bc34a30":"markdown","467ddca4":"markdown","0fa59042":"markdown","487291dd":"markdown","4c204d0c":"markdown","bd49e4b2":"markdown","a943a5a5":"markdown","1bdb5ddd":"markdown","b707d5f3":"markdown","f463f150":"markdown","8f3ea9a1":"markdown"},"source":{"f3865ca9":"my_hash = 45\nimport warnings\nwarnings.filterwarnings('ignore')","7e38be50":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt","ba652b40":"adult = pd.read_csv('\/kaggle\/input\/adult-pmr3508\/train_data.csv',na_values='?')\nadult.info()","4e3d17d5":"adult.duplicated().sum()","f1392a8d":"adult.drop(\n    labels = [\n        'fnlwgt',\n        'education',\n        'marital.status',\n        'native.country'\n    ],\n    axis = True,\n    inplace = True\n)","cfd0b567":"train_target = adult.pop('income')\nx_train = adult","4bd3933c":"x_train.head()","0d51b44d":"from sklearn.pipeline import Pipeline","564c1d9f":"from sklearn.impute import KNNImputer\nfrom sklearn.preprocessing import StandardScaler","b44b1716":"pipeline_numerical = Pipeline(\n    steps = [\n        ('imputer', KNNImputer(n_neighbors = 30)),\n        ('scaler', StandardScaler())\n    ]\n)","9290110a":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder","a71ab06d":"pipeline_categorical = Pipeline(\n    steps = [\n        ('imputer', SimpleImputer(strategy = 'most_frequent')),\n        ('onehot', OneHotEncoder())\n    ]\n)","ea04d066":"from sklearn.compose import ColumnTransformer","f2f7cc6a":"train_data = ColumnTransformer(\n    transformers = [\n        ('numerical', pipeline_numerical, x_train.select_dtypes(include = 'int64').columns.values),\n        ('categorical', pipeline_categorical, x_train.select_dtypes(include = 'object').columns.values)\n    ]\n).fit_transform(x_train)","f1c065e9":"from sklearn.model_selection import RandomizedSearchCV","e146e2ad":"from sklearn.linear_model import LogisticRegression","abd28b87":"params = {\n    'C': np.arange(0.1,1.1,0.1)\n}\n\nlogistic_regression = LogisticRegression(\n    solver = 'liblinear',\n    random_state = my_hash\n)","7e9ddec3":"%%time\nresult_logistic_regression = RandomizedSearchCV(\n    logistic_regression,\n    params,\n    scoring = 'accuracy'\n).fit(train_data, train_target)","1a0a8208":"result_logistic_regression.best_params_","f2b40c54":"result_logistic_regression.best_score_","51d9f03f":"from sklearn.ensemble import RandomForestClassifier","21ead258":"params = {\n  'n_estimators': np.arange(150,200,5), \n  'max_depth': np.arange(10,21)\n  }\n\nrandom_forest = RandomForestClassifier(\n    random_state = my_hash\n)","059fe759":"%%time\nresult_random_forest = RandomizedSearchCV(\n    random_forest,\n    params,\n    scoring = 'accuracy'\n).fit(train_data, train_target)","e2fa4da4":"result_random_forest.best_params_","10c20208":"result_random_forest.best_score_","b45467b5":"from sklearn.neural_network import MLPClassifier\nfrom scipy.stats import loguniform","7314f8b4":"params = {\n    'hidden_layer_sizes': 2**np.arange(1,11),\n    'alpha': loguniform(1e-6,1e-1),\n    'learning_rate': ['constant', 'adaptive'],\n    'activation': ['identity','logistic','tanh','relu']\n}","e6284ee7":"%%time\nneural_network = MLPClassifier(\n    random_state = my_hash,\n    early_stopping = True\n)\nresult_neural_network = RandomizedSearchCV(\n    neural_network, \n    params, \n    scoring = 'accuracy'\n).fit(train_data, train_target)","42bac6b1":"result_neural_network.best_params_","e8fec7bd":"result_neural_network.best_score_","20acf5d5":"from xgboost import XGBClassifier","0a7abd24":"%%time\nparams = {\n  'n_estimators': np.arange(10,51,5),\n  'max_depth': np.arange(1,11)\n  }\nxg_boost = XGBClassifier(\n    random_state = my_hash\n)\nresult_xg_boost = RandomizedSearchCV(\n    xg_boost,\n    params,\n    scoring = 'accuracy'\n).fit(train_data, train_target)","61ccd525":"result_xg_boost.best_params_","da88dc2f":"result_xg_boost.best_score_","475ee332":"import tabulate","c997dd73":"pd.DataFrame(\n    np.array([\n        ['Regress\u00e3o Log\u00edstica', result_logistic_regression.best_score_, result_logistic_regression.best_params_],\n        ['Floresta Aleat\u00f3ria', result_random_forest.best_score_, result_random_forest.best_params_],\n        ['Rede Neural', result_neural_network.best_score_, result_neural_network.best_params_],\n        ['XGBoost', result_xg_boost.best_score_, result_xg_boost.best_params_]\n    ]),\n    columns = ['Classificador', 'Acur\u00e1cia', 'Par\u00e2metros']\n).sort_values(\n    by = 'Acur\u00e1cia',\n    ascending = False\n).reset_index(drop=True)","1340dbdc":"test = pd.read_csv('\/kaggle\/input\/adult-pmr3508\/test_data.csv', na_values='?')\ntest.info()","025cd26c":"X_test = ColumnTransformer(\n    transformers = [\n        ('numerical', pipeline_numerical, x_train.select_dtypes(include = 'int64').columns.values),\n        ('categorical', pipeline_categorical, x_train.select_dtypes(include = 'object').columns.values)\n    ]\n).fit_transform(test.drop(\n    labels = [\n        'fnlwgt',\n        'education',\n        'marital.status',\n        'native.country'\n    ],\n    axis = True\n    )\n)\nY_test = result_xg_boost.predict(X_test)","c9d6f733":"data = np.array([test.Id,Y_test]).T\ndata","ae5f17ba":"submit = pd.DataFrame(\n    data = data,\n    columns = ['id','income']\n)\nsubmit","cbe655c3":"submit.to_csv('submit.csv', index = False)","0fac953a":"### 3.2. Floresta Aleat\u00f3ria","6247fed6":"### 3.1. Regress\u00e3o Log\u00edstica","26a6aa33":"#### 2.4.1. *Features* num\u00e9ricas","1d2b97b1":"#### 2.4.3. Transforma\u00e7\u00e3o das colunas","7cdfc763":"### 2.2. Remo\u00e7\u00e3o de colunas indesej\u00e1veis","8d48102b":"## 2. Pr\u00e9-processamento","7bfa2a49":"### 3.4 XGBoost","3bc34a30":"### 3.3 Rede Neural","467ddca4":"## 1. Leitura da base de dados","0fa59042":"# PMR3508 - Aprendizado de M\u00e1quina e Reconhecimento de Padr\u00f5es (2021)\n## Compara\u00e7\u00e3o de classificadores para prever renda para a base *adult*\n### Vitor Thomaz da Cruz - n\u00baUSP 10336383","487291dd":"### 2.4. Cria\u00e7\u00e3o de sequ\u00eancias de tratamento para *features* num\u00e9ricas e categ\u00f3ricas","4c204d0c":"## 4. Compara\u00e7\u00e3o","bd49e4b2":"## 5. Predi\u00e7\u00e3o","a943a5a5":"### 2.1. Remo\u00e7\u00e3o de linhas duplicadas","1bdb5ddd":"# Obrigado!","b707d5f3":"#### 2.4.2. *Features* categ\u00f3ricas","f463f150":"### 2.3. Separa\u00e7\u00e3o da base de treino","8f3ea9a1":"## 3. Classifica\u00e7\u00e3o"}}