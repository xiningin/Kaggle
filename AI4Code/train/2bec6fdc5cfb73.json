{"cell_type":{"bf1720b9":"code","efff2c4c":"code","d8311b4d":"code","0e45d4f9":"code","dd73ec0c":"code","d648a17d":"code","55ba1ff1":"code","bdc509ea":"code","09d7fffc":"code","8bad25a1":"code","edb1e5e9":"code","cbf46abd":"code","724b8a1e":"code","c5c2599f":"code","2c2f516c":"code","29a7813c":"code","12528597":"code","10fd7b1a":"code","e3d2b727":"code","18025b3f":"code","bde33d9c":"code","7180598f":"code","501deb59":"code","e36a31f4":"code","4f34b5a9":"code","dbb691f4":"code","baa9aa69":"code","83af168a":"code","e1dbec4b":"code","46f4ca22":"code","6ecfc774":"code","a7c399db":"code","16049b8f":"code","5a6c13af":"code","a2514171":"code","ab39f1d3":"code","d89abc8b":"code","b83adeaf":"code","b090ba21":"code","7ff82d67":"code","89905963":"code","b80054a4":"code","c36e720f":"code","8799c17d":"code","138408e3":"code","d7eff791":"code","8e9632b2":"code","fb000feb":"code","03abde5b":"code","a90aa602":"code","1c76132f":"code","3c2bda35":"code","5113fadd":"code","18c60eea":"code","35720a53":"code","9bc80bb6":"code","17825a72":"code","b1fa9ff8":"code","4bf874ab":"code","d695a56b":"code","c1cd225e":"code","706eaee9":"code","8fd0643b":"code","66e1803c":"code","885c2ecb":"code","481dd276":"code","d8c53bae":"code","3f025653":"code","ff6ce724":"code","439ea0e7":"markdown","71b0a158":"markdown","02bba245":"markdown","56d39bad":"markdown","0a077b35":"markdown","d909f6b3":"markdown","81284542":"markdown","e1aa392a":"markdown","90749fba":"markdown","e68a2a8b":"markdown","54fcabc3":"markdown","109ea670":"markdown","7ca4e4e9":"markdown","c3ead2d9":"markdown","38c07e67":"markdown","35eb89f5":"markdown","4ba41c8f":"markdown","25435be2":"markdown","c6a1c9fe":"markdown","a548915a":"markdown","b6c529ee":"markdown","482305d3":"markdown","095b2a0b":"markdown","285f8dcc":"markdown","d67b0392":"markdown","5ffe3f9c":"markdown","be5c7b5a":"markdown","49d2cf3b":"markdown","bf6d6d57":"markdown","9a667431":"markdown","e4b48891":"markdown","c4b4b15b":"markdown","44a189ea":"markdown","28c83c8c":"markdown","9c1afbd3":"markdown","a2095773":"markdown","9df9bea9":"markdown","d596a8ac":"markdown","527af19f":"markdown","8c17ab9e":"markdown","b80f58e7":"markdown","fe0f9037":"markdown","bf97cd0c":"markdown","dce73cdf":"markdown","a8b1b3a1":"markdown","294b5e72":"markdown","4dbb4eba":"markdown","7e949361":"markdown","f629bacc":"markdown","844183d2":"markdown","1f36c12d":"markdown","68092b52":"markdown","c6192e15":"markdown","daef2ed5":"markdown","cf78d4fd":"markdown","e830a49b":"markdown","f3ac730f":"markdown","f8bc0a7a":"markdown","419f9267":"markdown","0365baf2":"markdown","00b7f8f4":"markdown","73b8ec9f":"markdown","01747fe0":"markdown","e7efa613":"markdown","81ffce20":"markdown","a8b572c5":"markdown"},"source":{"bf1720b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","efff2c4c":"# Import All Necessary Libraries\nimport os\nimport xgboost\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nwarnings.filterwarnings(\"ignore\")","d8311b4d":"Train_data = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nTest_data = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","0e45d4f9":"Train_data.head(10)","dd73ec0c":"Test_data.head(10)","d648a17d":"Id = Test_data.iloc[:,0]\nId = pd.DataFrame(Id)","55ba1ff1":"print(\"Training_dataset Shape = \",Train_data.shape)\nprint(\"Test_dataset Shape = \",Test_data.shape)","bdc509ea":"# Train_dataset Description\nTrain_data.describe()","09d7fffc":"# Test_dataset Description\nTest_data.describe()","8bad25a1":"# Train_dataset Information\nTrain_data.info()","edb1e5e9":"# Test_dataset Information\nTest_data.info()","cbf46abd":"Train_data.columns","724b8a1e":"Test_data.columns","c5c2599f":"Train_data.drop(\"Id\", axis = 1, inplace = True)\nTest_data.drop(\"Id\", axis = 1, inplace = True)","2c2f516c":"for id1,j in enumerate(Train_data.columns):\n    for id2,i in enumerate(Train_data.isnull().sum()):\n        if id1 == id2:\n            print(j,i)","29a7813c":"for id1,j in enumerate(Test_data.columns):\n    for id2,i in enumerate(Test_data.isnull().sum()):\n        if id1 == id2:\n            print(j,i)","12528597":"Train_data[\"LotFrontage\"].fillna(Train_data[\"LotFrontage\"].mean(),inplace = True)\nTrain_data[\"Alley\"].fillna(\"mis\",inplace = True)\nTrain_data[\"MasVnrType\"].fillna(Train_data[\"MasVnrType\"].mode()[0],inplace = True)\nTrain_data[\"MasVnrArea\"].fillna(Train_data[\"MasVnrArea\"].mean(),inplace = True)\nTrain_data[\"BsmtQual\"].fillna(Train_data[\"BsmtQual\"].mode()[0],inplace = True)\nTrain_data[\"BsmtCond\"].fillna(Train_data[\"BsmtCond\"].mode()[0],inplace = True)\nTrain_data[\"BsmtExposure\"].fillna(Train_data[\"BsmtExposure\"].mode()[0],inplace = True)\nTrain_data[\"BsmtFinType1\"].fillna(Train_data[\"BsmtFinType1\"].mode()[0],inplace = True)\nTrain_data[\"BsmtFinType2\"].fillna(Train_data[\"BsmtFinType2\"].mode()[0],inplace = True)\nTrain_data[\"Electrical\"].fillna(Train_data[\"Electrical\"].mode()[0],inplace = True)\nTrain_data[\"FireplaceQu\"].fillna(\"mis\",inplace = True)\nTrain_data[\"GarageType\"].fillna(Train_data[\"GarageType\"].mode()[0],inplace = True)\nTrain_data[\"GarageYrBlt\"].fillna(round(Train_data['GarageYrBlt'].mean()),inplace = True)\nTrain_data[\"GarageFinish\"].fillna(Train_data[\"GarageFinish\"].mode()[0],inplace = True)\nTrain_data[\"GarageQual\"].fillna(Train_data[\"GarageQual\"].mode()[0],inplace = True)\nTrain_data[\"GarageCond\"].fillna(Train_data[\"GarageCond\"].mode()[0],inplace = True)\nTrain_data[\"PoolQC\"].fillna(\"mis\",inplace = True)\nTrain_data[\"Fence\"].fillna(\"mis\",inplace = True)\nTrain_data[\"MiscFeature\"].fillna(\"mis\",inplace = True)","10fd7b1a":"Test_data[\"MSZoning\"].fillna(Test_data[\"MSZoning\"].mode()[0],inplace = True)\nTest_data[\"LotFrontage\"].fillna(Test_data[\"LotFrontage\"].mean(),inplace  = True)\nTest_data[\"Alley\"].fillna(\"mis\",inplace  = True)\nTest_data[\"Utilities\"].fillna(Test_data[\"Utilities\"].mode()[0],inplace = True)\nTest_data[\"Exterior1st\"].fillna(Test_data[\"Exterior1st\"].mode()[0],inplace = True)\nTest_data[\"Exterior2nd\"].fillna(Test_data[\"Exterior2nd\"].mode()[0],inplace = True)\nTest_data[\"MasVnrType\"].fillna(Test_data[\"MasVnrType\"].mode()[0],inplace = True)\nTest_data[\"MasVnrArea\"].fillna(Test_data[\"MasVnrArea\"].mean(),inplace = True)\nTest_data[\"BsmtQual\"].fillna(Test_data[\"BsmtQual\"].mode()[0],inplace = True)\nTest_data[\"BsmtCond\"].fillna(Test_data[\"BsmtCond\"].mode()[0],inplace = True)\nTest_data[\"BsmtExposure\"].fillna(Test_data[\"BsmtExposure\"].mode()[0],inplace = True)\nTest_data[\"BsmtFinType1\"].fillna(Test_data[\"BsmtFinType1\"].mode()[0],inplace = True)\nTest_data[\"BsmtFinSF1\"].fillna(Test_data[\"BsmtFinSF1\"].mode()[0],inplace = True)\nTest_data[\"BsmtFinType2\"].fillna(Test_data[\"BsmtFinType2\"].mode()[0],inplace = True)\nTest_data[\"BsmtFinSF2\"].fillna(Test_data[\"BsmtFinSF2\"].mode()[0],inplace = True)\nTest_data[\"BsmtUnfSF\"].fillna(Test_data['BsmtUnfSF'].mode()[0],inplace = True)\nTest_data[\"TotalBsmtSF\"].fillna(Test_data['TotalBsmtSF'].mode()[0],inplace = True)\nTest_data[\"BsmtFullBath\"].fillna(Test_data['BsmtFullBath'].mode()[0],inplace = True)\nTest_data['BsmtHalfBath'].fillna(Test_data['BsmtHalfBath'].mode()[0],inplace = True)\nTest_data['Functional'].fillna(Test_data['Functional'].mode()[0],inplace = True)\nTest_data['KitchenQual'].fillna(Test_data['KitchenQual'].mode()[0],inplace = True)\nTest_data['Functional'].fillna(Test_data['Functional'].mode()[0],inplace = True)\nTest_data['FireplaceQu'].fillna(\"mis\",inplace = True)\nTest_data['GarageType'].fillna(Test_data['GarageType'].mode()[0],inplace = True)\nTest_data['GarageYrBlt'].fillna(round(Test_data['GarageYrBlt'].mean()),inplace = True)\nTest_data['GarageFinish'].fillna(Test_data['GarageFinish'].mode()[0],inplace = True)\nTest_data['GarageCars'].fillna(Test_data['GarageCars'].mode()[0],inplace = True)\nTest_data['GarageArea'].fillna(Test_data['GarageArea'].mean(),inplace = True)\nTest_data['GarageQual'].fillna(Test_data['GarageQual'].mode()[0],inplace = True)\nTest_data['GarageCond'].fillna(Test_data['GarageCond'].mode()[0],inplace = True)\nTest_data['PoolQC'].fillna(\"mis\",inplace = True)\nTest_data['Fence'].fillna(\"mis\",inplace = True)\nTest_data['MiscFeature'].fillna(\"mis\",inplace = True)\nTest_data['SaleType'].fillna(Test_data['SaleType'].mode()[0],inplace = True)","e3d2b727":"for id1,j in enumerate(Train_data.columns):\n    for id2,i in enumerate(Train_data.isnull().sum()):\n        if id1 == id2:\n            print(j,i)","18025b3f":"for id1,j in enumerate(Test_data.columns):\n    for id2,i in enumerate(Test_data.isnull().sum()):\n        if id1 == id2:\n            print(j,i)","bde33d9c":"print(Train_data[\"MSZoning\"].unique())\nprint(Test_data[\"MSZoning\"].unique())\n\nle1 = LabelEncoder()\nMSZoning = le1.fit_transform(Train_data[\"MSZoning\"])\nTrain_data[\"MSZoning\"] = pd.Series(MSZoning)\nprint(le1.classes_)\n\nMSZoning = le1.fit_transform(Test_data[\"MSZoning\"])\nTest_data[\"MSZoning\"] = pd.Series(MSZoning)","7180598f":"print(Train_data[\"Street\"].unique())\nprint(Test_data[\"Street\"].unique())\n\nle2 = LabelEncoder()\nStreet = le2.fit_transform(Train_data[\"Street\"])\nTrain_data[\"Street\"] = pd.Series(Street)\n\nStreet = le2.fit_transform(Test_data[\"Street\"])\nTest_data[\"Street\"] = pd.Series(Street)","501deb59":"print(Train_data[\"Alley\"].unique())\nprint(Test_data[\"Alley\"].unique())\n\nle3 = LabelEncoder()\nAlley = le3.fit_transform(Train_data[\"Alley\"])\nTrain_data[\"Alley\"] = pd.Series(Alley)\n\nAlley = le3.fit_transform(Test_data[\"Alley\"])\nTest_data[\"Alley\"] = pd.Series(Alley)","e36a31f4":"print(Train_data[\"LotShape\"].unique())\nprint(Test_data[\"LotShape\"].unique())\n\nle4 = LabelEncoder()\nLotShape = le4.fit_transform(Train_data[\"LotShape\"])\nTrain_data[\"LotShape\"] = pd.Series(LotShape)\n\nLotShape = le4.fit_transform(Test_data[\"LotShape\"])\nTest_data[\"LotShape\"] = pd.Series(LotShape)","4f34b5a9":"print(Train_data[\"LandContour\"].unique())\nprint(Test_data[\"LandContour\"].unique())\n\nle5 = LabelEncoder()\nLandContour = le5.fit_transform(Train_data[\"LandContour\"])\nTrain_data[\"LandContour\"] = pd.Series(LandContour)\n\nLandContour = le5.fit_transform(Test_data[\"LandContour\"])\nTest_data[\"LandContour\"] = pd.Series(LandContour)","dbb691f4":"print(Train_data[\"Utilities\"].unique())\nprint(Test_data[\"Utilities\"].unique())\n\nle6 = LabelEncoder()\nUtilities = le6.fit_transform(Train_data[\"Utilities\"])\nTrain_data[\"Utilities\"] = pd.Series(Utilities)\n\nUtilities = le6.fit_transform(Test_data[\"Utilities\"])\nTest_data[\"Utilities\"] = pd.Series(Utilities)","baa9aa69":"print(Train_data[\"LotConfig\"].unique())\nprint(Test_data[\"LotConfig\"].unique())\n\nle7 = LabelEncoder()\nLotConfig = le7.fit_transform(Train_data[\"LotConfig\"])\nTrain_data[\"LotConfig\"] = pd.Series(LotConfig)\n\nLotConfig = le7.fit_transform(Test_data[\"LotConfig\"])\nTest_data[\"LotConfig\"] = pd.Series(LotConfig)","83af168a":"print(Train_data[\"LandSlope\"].unique())\nprint(Test_data[\"LandSlope\"].unique())\n\nle8 = LabelEncoder()\nLandSlope = le8.fit_transform(Train_data[\"LandSlope\"])\nTrain_data[\"LandSlope\"] = pd.Series(LandSlope)\n\nLandSlope = le8.fit_transform(Test_data[\"LandSlope\"])\nTest_data[\"LandSlope\"] = pd.Series(LandSlope)","e1dbec4b":"print(Train_data[\"Neighborhood\"].unique())\nprint(Test_data[\"Neighborhood\"].unique())\n\nle9 = LabelEncoder()\nNeighborhood = le9.fit_transform(Train_data[\"Neighborhood\"])\nTrain_data[\"Neighborhood\"] = pd.Series(Neighborhood)\n\nNeighborhood = le9.fit_transform(Test_data[\"Neighborhood\"])\nTest_data[\"Neighborhood\"] = pd.Series(Neighborhood)\n","46f4ca22":"print(Train_data[\"Condition1\"].unique())\nprint(Test_data[\"Condition1\"].unique())\n\nle10 = LabelEncoder()\nCondition1 = le10.fit_transform(Train_data[\"Condition1\"])\nTrain_data[\"Condition1\"] = pd.Series(Condition1)\n\nCondition1 = le10.fit_transform(Test_data[\"Condition1\"])\nTest_data[\"Condition1\"] = pd.Series(Condition1)","6ecfc774":"print(Train_data[\"Condition2\"].unique())\nprint(Test_data[\"Condition2\"].unique())\n\nle11 = LabelEncoder()\nCondition2 = le11.fit_transform(Train_data[\"Condition2\"])\nTrain_data[\"Condition2\"] = pd.Series(Condition1)\n\nCondition2 = le11.fit_transform(Test_data[\"Condition2\"])\nTest_data[\"Condition2\"] = pd.Series(Condition2)","a7c399db":"print(Train_data[\"BldgType\"].unique())\nprint(Test_data[\"BldgType\"].unique())\n\nle12 = LabelEncoder()\nBldgType = le12.fit_transform(Train_data[\"BldgType\"])\nTrain_data[\"BldgType\"] = pd.Series(BldgType)\n\nBldgType = le12.fit_transform(Test_data[\"BldgType\"])\nTest_data[\"BldgType\"] = pd.Series(BldgType)","16049b8f":"print(Train_data[\"HouseStyle\"].unique())\nprint(Test_data[\"HouseStyle\"].unique())\n\nle13 = LabelEncoder()\nHouseStyle = le13.fit_transform(Train_data[\"HouseStyle\"])\nTrain_data[\"HouseStyle\"] = pd.Series(HouseStyle)\n\nHouseStyle = le13.fit_transform(Test_data[\"HouseStyle\"])\nTest_data[\"HouseStyle\"] = pd.Series(HouseStyle)","5a6c13af":"print(Train_data[\"RoofStyle\"].unique())\nprint(Test_data[\"RoofStyle\"].unique())\n\nle14 = LabelEncoder()\nRoofStyle = le14.fit_transform(Train_data[\"RoofStyle\"])\nTrain_data[\"RoofStyle\"] = pd.Series(RoofStyle)\n\nRoofStyle = le14.fit_transform(Test_data[\"RoofStyle\"])\nTest_data[\"RoofStyle\"] = pd.Series(RoofStyle)","a2514171":"print(Train_data[\"RoofMatl\"].unique())\nprint(Test_data[\"RoofMatl\"].unique())\n\nle15 = LabelEncoder()\nRoofMatl = le15.fit_transform(Train_data[\"RoofMatl\"])\nTrain_data[\"RoofMatl\"] = pd.Series(RoofMatl)\n\nRoofMatl = le15.fit_transform(Test_data[\"RoofMatl\"])\nTest_data[\"RoofMatl\"] = pd.Series(RoofMatl)","ab39f1d3":"print(Train_data[\"Exterior1st\"].unique())\nprint(Test_data[\"Exterior1st\"].unique())\n\nle16 = LabelEncoder()\nExterior1st = le16.fit_transform(Train_data[\"Exterior1st\"])\nTrain_data[\"Exterior1st\"] = pd.Series(Exterior1st)\n\nExterior1st = le16.fit_transform(Test_data[\"Exterior1st\"])\nTest_data[\"Exterior1st\"] = pd.Series(Exterior1st)","d89abc8b":"print(Train_data[\"Exterior2nd\"].unique())\nprint(Test_data[\"Exterior2nd\"].unique())\n\nle17 = LabelEncoder()\nExterior2nd = le17.fit_transform(Train_data[\"Exterior2nd\"])\nTrain_data[\"Exterior2nd\"] = pd.Series(Exterior2nd)\n\nExterior2nd = le17.fit_transform(Test_data[\"Exterior2nd\"])\nTest_data[\"Exterior2nd\"] = pd.Series(Exterior2nd)","b83adeaf":"print(Train_data[\"MasVnrType\"].unique())\nprint(Test_data[\"MasVnrType\"].unique())\n\nle18 = LabelEncoder()\nMasVnrType = le18.fit_transform(Train_data[\"MasVnrType\"])\nTrain_data[\"MasVnrType\"] = pd.Series(MasVnrType)\n\nMasVnrType = le18.fit_transform(Test_data[\"MasVnrType\"])\nTest_data[\"MasVnrType\"] = pd.Series(MasVnrType)","b090ba21":"print(Train_data[\"ExterQual\"].unique())\nprint(Test_data[\"ExterQual\"].unique())\n\nle19 = LabelEncoder()\nExterQual = le19.fit_transform(Train_data[\"ExterQual\"])\nTrain_data[\"ExterQual\"] = pd.Series(ExterQual)\n\nExterQual = le19.fit_transform(Test_data[\"ExterQual\"])\nTest_data[\"ExterQual\"] = pd.Series(ExterQual)","7ff82d67":"print(Train_data[\"ExterCond\"].unique())\nprint(Test_data[\"ExterCond\"].unique())\n\nle20 = LabelEncoder()\nExterCond = le20.fit_transform(Train_data[\"ExterCond\"])\nTrain_data[\"ExterCond\"] = pd.Series(ExterCond)\n\nExterCond = le20.fit_transform(Test_data[\"ExterCond\"])\nTest_data[\"ExterCond\"] = pd.Series(ExterCond)","89905963":"print(Train_data[\"Foundation\"].unique())\nprint(Test_data[\"Foundation\"].unique())\n\nle21 = LabelEncoder()\nFoundation = le21.fit_transform(Train_data[\"Foundation\"])\nTrain_data[\"Foundation\"] = pd.Series(Foundation)\n\nFoundation = le21.fit_transform(Test_data[\"Foundation\"])\nTest_data[\"Foundation\"] = pd.Series(Foundation)","b80054a4":"print(Train_data[\"BsmtQual\"].unique())\nprint(Test_data[\"BsmtQual\"].unique())\n\nle22 = LabelEncoder()\nBsmtQual = le22.fit_transform(Train_data[\"BsmtQual\"])\nTrain_data[\"BsmtQual\"] = pd.Series(BsmtQual)\n\nBsmtQual = le22.fit_transform(Test_data[\"BsmtQual\"])\nTest_data[\"BsmtQual\"] = pd.Series(BsmtQual)","c36e720f":"print(Train_data[\"BsmtCond\"].unique())\nprint(Test_data[\"BsmtCond\"].unique())\n\nle23 = LabelEncoder()\nBsmtCond = le23.fit_transform(Train_data[\"BsmtCond\"])\nTrain_data[\"BsmtCond\"] = pd.Series(BsmtCond)\n\nBsmtCond = le23.fit_transform(Test_data[\"BsmtCond\"])\nTest_data[\"BsmtCond\"] = pd.Series(BsmtCond)","8799c17d":"print(Train_data[\"BsmtExposure\"].unique())\nprint(Test_data[\"BsmtExposure\"].unique())\n\nle24 = LabelEncoder()\nBsmtExposure = le24.fit_transform(Train_data[\"BsmtExposure\"])\nTrain_data[\"BsmtExposure\"] = pd.Series(BsmtExposure)\n\nBsmtExposure = le24.fit_transform(Test_data[\"BsmtExposure\"])\nTest_data[\"BsmtExposure\"] = pd.Series(BsmtExposure)","138408e3":"print(Train_data[\"BsmtFinType1\"].unique())\nprint(Test_data[\"BsmtFinType1\"].unique())\n\nle25 = LabelEncoder()\nBsmtFinType1 = le25.fit_transform(Train_data[\"BsmtFinType1\"])\nTrain_data[\"BsmtFinType1\"] = pd.Series(BsmtFinType1)\n\nBsmtFinType1 = le25.fit_transform(Test_data[\"BsmtFinType1\"])\nTest_data[\"BsmtFinType1\"] = pd.Series(BsmtFinType1)","d7eff791":"print(Train_data[\"BsmtFinType2\"].unique())\nprint(Test_data[\"BsmtFinType2\"].unique())\n\nle26 = LabelEncoder()\nBsmtFinType2 = le26.fit_transform(Train_data[\"BsmtFinType2\"])\nTrain_data[\"BsmtFinType2\"] = pd.Series(BsmtFinType2)\n\nBsmtFinType2 = le26.fit_transform(Test_data[\"BsmtFinType2\"])\nTest_data[\"BsmtFinType2\"] = pd.Series(BsmtFinType2)","8e9632b2":"print(Train_data[\"Heating\"].unique())\nprint(Test_data[\"Heating\"].unique())\n\nle27 = LabelEncoder()\nHeating = le27.fit_transform(Train_data[\"Heating\"])\nTrain_data[\"Heating\"] = pd.Series(Heating)\n\nHeating = le27.fit_transform(Test_data[\"Heating\"])\nTest_data[\"Heating\"] = pd.Series(Heating)","fb000feb":"print(Train_data[\"HeatingQC\"].unique())\nprint(Test_data[\"HeatingQC\"].unique())\n\nle28 = LabelEncoder()\nHeatingQC = le28.fit_transform(Train_data[\"HeatingQC\"])\nTrain_data[\"HeatingQC\"] = pd.Series(HeatingQC)\n\nHeatingQC = le28.fit_transform(Test_data[\"HeatingQC\"])\nTest_data[\"HeatingQC\"] = pd.Series(HeatingQC)","03abde5b":"print(Train_data[\"CentralAir\"].unique())\nprint(Test_data[\"CentralAir\"].unique())\n\nle29 = LabelEncoder()\nCentralAir = le29.fit_transform(Train_data[\"CentralAir\"])\nTrain_data[\"CentralAir\"] = pd.Series(CentralAir)\n\nCentralAir = le29.fit_transform(Test_data[\"CentralAir\"])\nTest_data[\"CentralAir\"] = pd.Series(CentralAir)","a90aa602":"print(Train_data[\"Electrical\"].unique())\nprint(Test_data[\"Electrical\"].unique())\n\nle30 = LabelEncoder()\nElectrical = le30.fit_transform(Train_data[\"Electrical\"])\nTrain_data[\"Electrical\"] = pd.Series(Electrical)\n\nElectrical = le30.fit_transform(Test_data[\"Electrical\"])\nTest_data[\"Electrical\"] = pd.Series(Electrical)","1c76132f":"print(Train_data[\"KitchenQual\"].unique())\nprint(Test_data[\"KitchenQual\"].unique())\n\nle31 = LabelEncoder()\nKitchenQual = le31.fit_transform(Train_data[\"KitchenQual\"])\nTrain_data[\"KitchenQual\"] = pd.Series(KitchenQual)\n\nKitchenQual = le31.fit_transform(Test_data[\"KitchenQual\"])\nTest_data[\"KitchenQual\"] = pd.Series(KitchenQual)","3c2bda35":"print(Train_data[\"Functional\"].unique())\nprint(Test_data[\"Functional\"].unique())\n\nle32 = LabelEncoder()\nFunctional = le32.fit_transform(Train_data[\"Functional\"])\nTrain_data[\"Functional\"] = pd.Series(Functional)\n\nFunctional = le32.fit_transform(Test_data[\"Functional\"])\nTest_data[\"Functional\"] = pd.Series(Functional)","5113fadd":"print(Train_data[\"FireplaceQu\"].unique())\nprint(Test_data[\"FireplaceQu\"].unique())\n\nle33 = LabelEncoder()\nFireplaceQu = le33.fit_transform(Train_data[\"FireplaceQu\"])\nTrain_data[\"FireplaceQu\"] = pd.Series(FireplaceQu)\n\nFireplaceQu = le33.fit_transform(Test_data[\"FireplaceQu\"])\nTest_data[\"FireplaceQu\"] = pd.Series(FireplaceQu)","18c60eea":"print(Train_data[\"GarageType\"].unique())\nprint(Test_data[\"GarageType\"].unique())\n\nle34 = LabelEncoder()\nGarageType = le34.fit_transform(Train_data[\"GarageType\"])\nTrain_data[\"GarageType\"] = pd.Series(GarageType)\n\nGarageType = le34.fit_transform(Test_data[\"GarageType\"])\nTest_data[\"GarageType\"] = pd.Series(GarageType)","35720a53":"print(Train_data[\"GarageFinish\"].unique())\nprint(Test_data[\"GarageFinish\"].unique())\n\nle35 = LabelEncoder()\nGarageFinish = le35.fit_transform(Train_data[\"GarageFinish\"])\nTrain_data[\"GarageFinish\"] = pd.Series(GarageFinish)\n\nGarageFinish = le35.fit_transform(Test_data[\"GarageFinish\"])\nTest_data[\"GarageFinish\"] = pd.Series(GarageFinish)","9bc80bb6":"print(Train_data[\"GarageQual\"].unique())\nprint(Test_data[\"GarageQual\"].unique())\n\nle36 = LabelEncoder()\nGarageQual = le36.fit_transform(Train_data[\"GarageQual\"])\nTrain_data[\"GarageQual\"] = pd.Series(GarageFinish)\n\nGarageQual = le36.fit_transform(Test_data[\"GarageQual\"])\nTest_data[\"GarageQual\"] = pd.Series(GarageQual)","17825a72":"print(Train_data[\"GarageCond\"].unique())\nprint(Test_data[\"GarageCond\"].unique())\n\nle37 = LabelEncoder()\nGarageCond = le37.fit_transform(Train_data[\"GarageCond\"])\nTrain_data[\"GarageCond\"] = pd.Series(GarageCond)\n\nGarageCond = le37.fit_transform(Test_data[\"GarageCond\"])\nTest_data[\"GarageCond\"] = pd.Series(GarageCond)","b1fa9ff8":"print(Train_data[\"PavedDrive\"].unique())\nprint(Test_data[\"PavedDrive\"].unique())\n\nle38 = LabelEncoder()\nPavedDrive = le38.fit_transform(Train_data[\"PavedDrive\"])\nTrain_data[\"PavedDrive\"] = pd.Series(PavedDrive)\n\nPavedDrive = le38.fit_transform(Test_data[\"PavedDrive\"])\nTest_data[\"PavedDrive\"] = pd.Series(PavedDrive)","4bf874ab":"print(Train_data[\"PoolQC\"].unique())\nprint(Test_data[\"PoolQC\"].unique())\n\nle39 = LabelEncoder()\nPoolQC = le39.fit_transform(Train_data[\"PoolQC\"])\nTrain_data[\"PoolQC\"] = pd.Series(PoolQC)\n\nPoolQC = le39.fit_transform(Test_data[\"PoolQC\"])\nTest_data[\"PoolQC\"] = pd.Series(PoolQC)","d695a56b":"print(Train_data[\"Fence\"].unique())\nprint(Test_data[\"Fence\"].unique())\n\nle40 = LabelEncoder()\nFence = le40.fit_transform(Train_data[\"Fence\"])\nTrain_data[\"Fence\"] = pd.Series(Fence)\n\nFence = le40.fit_transform(Test_data[\"Fence\"])\nTest_data[\"Fence\"] = pd.Series(Fence)","c1cd225e":"print(Train_data[\"MiscFeature\"].unique())\nprint(Test_data[\"MiscFeature\"].unique())\n\nle41 = LabelEncoder()\nMiscFeature = le41.fit_transform(Train_data[\"MiscFeature\"])\nTrain_data[\"MiscFeature\"] = pd.Series(MiscFeature)\n\nMiscFeature = le41.fit_transform(Test_data[\"MiscFeature\"])\nTest_data[\"MiscFeature\"] = pd.Series(MiscFeature)","706eaee9":"print(Train_data[\"SaleType\"].unique())\nprint(Test_data[\"SaleType\"].unique())\n\nle42 = LabelEncoder()\nSaleType = le42.fit_transform(Train_data[\"SaleType\"])\nTrain_data[\"SaleType\"] = pd.Series(SaleType)\n\nSaleType = le42.fit_transform(Test_data[\"SaleType\"])\nTest_data[\"SaleType\"] = pd.Series(SaleType)","8fd0643b":"print(Train_data[\"SaleCondition\"].unique())\nprint(Test_data[\"SaleCondition\"].unique())\n\nle43 = LabelEncoder()\nSaleCondition = le43.fit_transform(Train_data[\"SaleCondition\"])\nTrain_data[\"SaleCondition\"] = pd.Series(SaleCondition)\n\nSaleCondition = le43.fit_transform(Test_data[\"SaleCondition\"])\nTest_data[\"SaleCondition\"] = pd.Series(SaleCondition)","66e1803c":"Train_data[\"Condition2\"].fillna(Train_data[\"Condition2\"].mode()[0],inplace = True)\nTrain_data[\"GarageQual\"].fillna(Train_data[\"GarageQual\"].mode()[0],inplace = True)","885c2ecb":"X = Train_data.iloc[:,:-1]\ny = Train_data.iloc[:,-1]","481dd276":"reg = LinearRegression()\nreg.fit(X,y)\nprint(\"Linear Regressor\",reg.score(X,y))\nY_pred = reg.predict(Test_data)\npred = pd.DataFrame(Y_pred)\ndataset = pd.concat([Id,pred],axis = 1)\ndataset.columns=[\"id\",\"SalePrice\"]\ndataset.to_csv(\"sample_submission.csv\",index = False)","d8c53bae":"regressor = RandomForestRegressor()\nregressor.fit(X,y)\nY_pred2 = regressor.predict(Test_data)\n#pred2 = pd.DataFrame(Y_pred2)\n#dataset = pd.concat([Id,pred2],axis = 1)\n#dataset.columns=[\"id\",\"SalePrice\"]\n#dataset.to_csv(\"sample_submission.csv\",index = False)","3f025653":"reg3 = GradientBoostingRegressor()\nreg3.fit(X,y)\nY_pred3 = reg3.predict(Test_data)\n#pred3 = pd.DataFrame(Y_pred3)\n#dataset = pd.concat([Id,pred3],axis = 1)\n#dataset.columns=[\"id\",\"SalePrice\"]\n#dataset.to_csv(\"sample_submission.csv\",index = False)","ff6ce724":"classifier = xgboost.XGBRegressor()\nclassifier.fit(X,y)\nY_pred4 = classifier.predict(Test_data)\n#pred4 = pd.DataFrame(Y_pred4)\n#dataset = pd.concat([Id,pred4],axis = 1)\n#dataset.columns=[\"id\",\"SalePrice\"]\n#dataset.to_csv(\"sample_submission.csv\",index = False)","439ea0e7":"# ***Utilities Columns***","71b0a158":"***Linear Regression Model***","02bba245":"# ***Exploratory Data Analysis***","56d39bad":"# ***LotShape***","0a077b35":"# ***HouseStyle Column***","d909f6b3":"# ***Replace NaN Values with Mean, Mode And With \"mis\" string***","81284542":"# ***SaleCondition Column***","e1aa392a":"# ***KitchenQual Column***","90749fba":"# ***LandContour Column***","e68a2a8b":"# ***BsmtFinType1 Column***","54fcabc3":"***GradientBoostingRegressor***","109ea670":"# ***Foundation Column***","7ca4e4e9":"***xgboost***","c3ead2d9":"# ***LandSlope Column***","38c07e67":"***Random Forest Regressor***","35eb89f5":"# ***Columns Of Test Dataset***","4ba41c8f":"# ***Fence Column***","25435be2":"# ***PavedDrive Column***","c6a1c9fe":"# ***BsmtFinType2 Column***","a548915a":"# ***BsmtQual Column***","b6c529ee":"# ***PoolQC Column***","482305d3":"# ***Neighborhood Column***","095b2a0b":"# ***GarageFinish Column***","285f8dcc":"# ***Street Column***","d67b0392":"# ***Select Data For Independent And Dependent Columns***","5ffe3f9c":"# ***Condition2 Column***","be5c7b5a":"# ***Checking Both Dataset Shape, Description, information, Column_Names, ETC:-***","49d2cf3b":"# ***ExterCond Column***","bf6d6d57":"# ***CentralAir Column***","9a667431":"# ***GarageCond Column***","e4b48891":"# **House Prices - Advanced Regression Techniques**","c4b4b15b":"# ***LotConfig Columns***","44a189ea":"# ***Fetching Id From Test_dataset for Submission***","28c83c8c":"# ***Checking Categorical Unique Values for Training Model from Preventing Data Imbalancing Happen And Use Label Encoding for Convert Catorical Value to Numerical***","9c1afbd3":"# ***BldgType Column***","a2095773":"# ***Still Missing Values is there So Need to Handle it***","9df9bea9":"# ***Condition1 Column***","d596a8ac":"# ***HeatingQC Column***","527af19f":"***Here I Taken Mean Round-Off Value for the Numerical Column.\n     And, Taken Mode for the Categorical Column for Most Frequent Item for less than 100 Records\n     Also Taken \"mis\" String for More Than 100 Records so the other features Should Not be Dropped***","8c17ab9e":"# ***MasVnrType Column***","b80f58e7":"**Finding the missing value**","fe0f9037":"# ***Reading Training_Dataset & Test_Dataset***","bf97cd0c":"# ***ExterQual Column***","dce73cdf":"# ***From Here We Can Look For Target Column Which Is SalePrice***","a8b1b3a1":"# ***GarageType Column***","294b5e72":"# ***RoofStyle Column***","4dbb4eba":"# ***Exterior2nd Column***","7e949361":"# ***Building Models***","f629bacc":"# **Drop \"Id\" Column from Dataset**","844183d2":"# ***Electrical Column***","1f36c12d":"# ***MiscFeature Column***","68092b52":"# ***For Training Dataset***","c6192e15":"# ***GarageQual Column***","daef2ed5":"# ***Heating Column***","cf78d4fd":"# ***BsmtExposure Column***","e830a49b":"# ***Alley Column***","f3ac730f":"# ***Functional Column***","f8bc0a7a":"# ***RoofMatl Column***","419f9267":"# ***Columns Of Training Dataset***","0365baf2":"# ***SaleType Column***","00b7f8f4":"# ***For Test Dataset***","73b8ec9f":"# ***BsmtCond Column***","01747fe0":"# ***Display Training & Test Dataset first 10 Records***","e7efa613":"# ***MSZoning Column***","81ffce20":"# ***FireplaceQu Column***","a8b572c5":"# ***Exterior1st Column***"}}