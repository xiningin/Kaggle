{"cell_type":{"35955192":"code","6a0ffdd9":"code","a1f09c25":"code","48fa9d18":"code","313613c2":"code","50552b0f":"code","27913e31":"code","8a145cf5":"code","37ecd0d3":"code","7c2e8566":"code","f4cf44d5":"code","61365eef":"code","0076e3a9":"code","1c32d3b3":"markdown","a5335739":"markdown"},"source":{"35955192":"import os\nimport gc\nimport sys\nimport cv2\nimport math\nimport time\nimport tqdm\nimport random\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.svm import SVR\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold,StratifiedKFold\n\nimport torch\nimport torchvision\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom torch.optim import Adam, lr_scheduler\nfrom torch.utils.data import Dataset, DataLoader\n\nfrom transformers import (AutoModel, AutoTokenizer, \n                          AutoModelForSequenceClassification)\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\n\nfrom colorama import Fore, Back, Style\ny_ = Fore.YELLOW\nr_ = Fore.RED\ng_ = Fore.GREEN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA\nc_ = Fore.CYAN\nsr_ = Style.RESET_ALL","6a0ffdd9":"train_data = pd.read_csv('..\/input\/commonlitreadabilityprize\/train.csv')\ntest_data = pd.read_csv('..\/input\/commonlitreadabilityprize\/test.csv')\nsample = pd.read_csv('..\/input\/commonlitreadabilityprize\/sample_submission.csv')\n\n#\u5bfe\u6570\u5206\u3060\u3051num_bins\u306b\u5206\u5272\n#\u30d3\u30cb\u30f3\u30b0\u51e6\u7406,\u30c7\u30fc\u30bf\u3092bin\u6570\u3067\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b\nnum_bins = int(np.floor(1 + np.log2(len(train_data))))\ntrain_data.loc[:,'bins'] = pd.cut(train_data['target'],bins=num_bins,labels=False)\n\ntarget = train_data['target'].to_numpy()\nbins = train_data.bins.to_numpy()\n\n#\u5e73\u5747\u4e8c\u6761\u8aa4\u5dee\ndef rmse_score(y_true,y_pred):\n    return np.sqrt(mean_squared_error(y_true,y_pred))","a1f09c25":"config = {\n    'batch_size':128,\n    'max_len':256,\n    'nfolds':10,\n    'seed':42,\n}\n\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONASSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True\n\nseed_everything(seed=config['seed'])","48fa9d18":"class CLRPDataset(Dataset):\n    def __init__(self,df,tokenizer):\n        self.excerpt = df['excerpt'].to_numpy()\n        self.tokenizer = tokenizer\n    \n    def __getitem__(self,idx):\n        encode = self.tokenizer(self.excerpt[idx],return_tensors='pt',\n                                max_length=config['max_len'],\n                                padding='max_length',truncation=True)\n        return encode\n    \n    def __len__(self):\n        return len(self.excerpt)","313613c2":"class AttentionHead(nn.Module):\n    def __init__(self, in_features, hidden_dim, num_targets):\n        super().__init__()\n        self.in_features = in_features\n        self.middle_features = hidden_dim\n\n        self.W = nn.Linear(in_features, hidden_dim)\n        self.V = nn.Linear(hidden_dim, 1)\n        self.out_features = hidden_dim\n\n    def forward(self, features):\n        att = torch.tanh(self.W(features))\n\n        score = self.V(att)\n\n        attention_weights = torch.softmax(score, dim=1)\n\n        context_vector = attention_weights * features\n        context_vector = torch.sum(context_vector, dim=1)\n\n        return context_vector","50552b0f":"class Model(nn.Module):\n    def __init__(self):\n        super(Model,self).__init__()\n        self.roberta = AutoModel.from_pretrained('..\/input\/clrp-pytorch-roberta-pretrain-roberta-large\/clrp_roberta_large\/')    \n        #changed attentionHead Dimension from 768 to 1024 by changing model from roberta-base to roberta-large\n        self.head = AttentionHead(1024,1024,1)\n        self.dropout = nn.Dropout(0.1)\n        self.linear = nn.Linear(self.head.out_features,1)\n\n    def forward(self,**xb):\n        x = self.roberta(**xb)[0]\n        x = self.head(x)\n        return x","27913e31":"#\u3053\u3053\u304c\u65b0\u898f\ndef get_embeddings(df,path,plot_losses=True, verbose=True):\n    #cuda\u4f7f\u3048\u305f\u3089\u4f7f\u3046\u69cb\u6587\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    print(f\"{device} is used\")\n            \n    model = Model()\n    model.load_state_dict(torch.load(path))\n    model.to(device)\n    model.eval()\n    \n    tokenizer = AutoTokenizer.from_pretrained('..\/input\/clrp-pytorch-roberta-pretrain-roberta-large\/clrp_roberta_large\/')\n    \n    ds = CLRPDataset(df,tokenizer)\n    dl = DataLoader(ds,\n                  batch_size = config[\"batch_size\"],\n                  shuffle=False,\n                  num_workers = 4,\n                  pin_memory=True,\n                  drop_last=False\n                 )\n        \n    #\u4ee5\u4e0b\u3067predictions\u3092\u62bd\u51fa\u3059\u308b\u305f\u3081\u306b\u4f7f\u3063\u305f\u69cb\u6587\u3092\u4f7f\u3063\u3066embeddings\u3092return\u3057\u3066\u3044\u308b.\n    #SVM\u306e\u624b\u6cd5\u3068\u306f\u3001embeddings\u306e\u610f\u5473\u306f\uff1f\n    embeddings = list()\n    with torch.no_grad():\n        for i, inputs in tqdm(enumerate(dl)):\n            inputs = {key:val.reshape(val.shape[0],-1).to(device) for key,val in inputs.items()}\n            outputs = model(**inputs)\n            outputs = outputs.detach().cpu().numpy()\n            embeddings.extend(outputs)\n    return np.array(embeddings)","8a145cf5":"#train\/test\u3067embeddings\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\ntrain_embeddings1 =  get_embeddings(train_data,'..\/input\/clrp-pytorch-roberta-finetune-roberta-large\/model0\/model0.bin')\ntest_embeddings1 = get_embeddings(test_data,'..\/input\/clrp-pytorch-roberta-finetune-roberta-large\/model0\/model0.bin')\n\ntrain_embeddings2 =  get_embeddings(train_data,'..\/input\/clrp-pytorch-roberta-finetune-roberta-large\/model1\/model1.bin')\ntest_embeddings2 = get_embeddings(test_data,'..\/input\/clrp-pytorch-roberta-finetune-roberta-large\/model1\/model1.bin')\n\ntrain_embeddings3 =  get_embeddings(train_data,'..\/input\/clrp-pytorch-roberta-finetune-roberta-large\/model2\/model2.bin')\ntest_embeddings3 = get_embeddings(test_data,'..\/input\/clrp-pytorch-roberta-finetune-roberta-large\/model2\/model2.bin')\n\ntrain_embeddings4 =  get_embeddings(train_data,'..\/input\/clrp-pytorch-roberta-finetune-roberta-large\/model3\/model3.bin')\ntest_embeddings4 = get_embeddings(test_data,'..\/input\/clrp-pytorch-roberta-finetune-roberta-large\/model3\/model3.bin')\n\ntrain_embeddings5 =  get_embeddings(train_data,'..\/input\/clrp-pytorch-roberta-finetune-roberta-large\/model4\/model4.bin')\ntest_embeddings5 = get_embeddings(test_data,'..\/input\/clrp-pytorch-roberta-finetune-roberta-large\/model4\/model4.bin')","37ecd0d3":"#SVM\u3092\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u51e6\u7406\u3057\u3066\u3044\u308b\ndef get_preds_svm(X,y,X_test,bins=bins,nfolds=10,C=10,kernel='rbf'):\n    scores = list()\n    preds = np.zeros((X_test.shape[0]))\n    \n    kfold = StratifiedKFold(n_splits=config['nfolds'],shuffle=True,random_state=config['seed'])\n    for k, (train_idx,valid_idx) in enumerate(kfold.split(X,bins)):\n        model = SVR(C=C,kernel=kernel,gamma='auto')\n        X_train,y_train = X[train_idx], y[train_idx]\n        X_valid,y_valid = X[valid_idx], y[valid_idx]\n        \n        model.fit(X_train,y_train)\n        prediction = model.predict(X_valid)\n        score = rmse_score(prediction,y_valid)\n        print(f'Fold {k} , rmse score: {score}')\n        scores.append(score)\n        preds += model.predict(X_test)\n        \n    print(\"mean rmse\",np.mean(scores))\n    return np.array(preds)\/nfolds","7c2e8566":"svm_preds1 = get_preds_svm(train_embeddings1,target,test_embeddings1)\nsvm_preds2 = get_preds_svm(train_embeddings2,target,test_embeddings2)\nsvm_preds3 = get_preds_svm(train_embeddings3,target,test_embeddings3)\nsvm_preds4 = get_preds_svm(train_embeddings4,target,test_embeddings4)\nsvm_preds5 = get_preds_svm(train_embeddings5,target,test_embeddings5)","f4cf44d5":"svm_preds = (svm_preds1 + svm_preds2 + svm_preds3 + svm_preds4 + svm_preds5)\/5","61365eef":"sample.target = svm_preds\nsample.to_csv('submission.csv',index=False)","0076e3a9":"sample","1c32d3b3":"This notebook uses below given notebooks to make predictions.\n\n1. Pretrain Roberta Model: https:\/\/www.kaggle.com\/maunish\/clrp-pytorch-roberta-pretrain\n2. Finetune Roberta Model: https:\/\/www.kaggle.com\/maunish\/clrp-pytorch-roberta-finetune\n3. Inference Notebook: https:\/\/www.kaggle.com\/maunish\/clrp-pytorch-roberta-inference\n4. Roberta + SVM: this notebook","a5335739":"## svm"}}