{"cell_type":{"fd6c8c64":"code","a8a5aae7":"code","4ebbe39d":"code","defa07a2":"code","c675f7e4":"code","cc596865":"code","6bc87451":"code","e8733f8f":"code","4adcde41":"code","8a0cdd4b":"code","46b8e244":"code","1582a081":"code","e3983477":"code","363dc41c":"code","c6a4398a":"code","d0582ad7":"code","413ea1d1":"code","4d1e8612":"code","975ad9ae":"code","9c4649fd":"code","1fe8a050":"code","d906c625":"code","35345012":"code","d89f28df":"code","8e37387e":"code","f51e838c":"code","688d7be3":"code","384e0304":"code","60e3354f":"code","06ff3c3a":"code","8b2b63ca":"code","d4761fd7":"code","a8cf016b":"code","aec3c618":"code","0d4d244d":"code","3c8f77ff":"code","95a7d341":"code","923cb2ed":"code","52e24b53":"code","a7388a0e":"code","ae394241":"code","a0f9f226":"code","6903d213":"code","0a686db5":"code","5eb482f3":"code","efecd84d":"code","77bafa55":"code","fc66fd7b":"code","bf46779e":"code","2174ca31":"code","ed9f5567":"code","5c32bef0":"code","41f3b096":"code","076f5bd8":"code","acfc8d3b":"code","3e103fd2":"code","887aac77":"code","69721dad":"code","8837aa4e":"code","e20fd584":"code","f59edc5c":"code","7ccb4178":"code","e94de011":"code","2000b83c":"code","cdfa280f":"code","7333f8c1":"code","0987cdab":"code","9c4b5ea5":"code","2cd4f221":"code","fa892d52":"code","3231fe07":"code","cbf5c61d":"code","e0957cd6":"code","c157e285":"code","c4fbf4e2":"code","69e901ee":"code","3dc492fa":"code","c295bff6":"code","90ef2d99":"code","513588e4":"code","86e468ec":"code","50caf14c":"code","4a8acc31":"code","d341f5f0":"code","c4fc9b1c":"code","fdcee21b":"code","858d1b70":"code","470af056":"code","38dbf501":"code","397babf8":"code","50fccc5a":"markdown","0edc1b44":"markdown","dfed58ff":"markdown","f9dfbb08":"markdown","8b57dfbc":"markdown","94574688":"markdown","74015803":"markdown","b3b154d3":"markdown","08bfa90c":"markdown","2f036fc8":"markdown","02935b7b":"markdown","27ce6710":"markdown","8cc25b27":"markdown","23c73c06":"markdown","75ab4221":"markdown","27395f44":"markdown","1dcba61b":"markdown","75e58ae8":"markdown","e8dc782c":"markdown","88e52a51":"markdown","6f197d87":"markdown","b2b7d8a3":"markdown","112c916d":"markdown","d71df0d0":"markdown","a8ebdedf":"markdown","7c58f32a":"markdown"},"source":{"fd6c8c64":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nfrom sklearn import metrics\nfrom sklearn.preprocessing import LabelEncoder\nfrom imblearn.over_sampling import RandomOverSampler\n \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score,precision_score, recall_score,f1_score\nfrom sklearn.metrics import roc_auc_score, roc_curve\n","a8a5aae7":"train_df =pd.read_csv(\"\/kaggle\/input\/jobathon-analytics-vidhya\/train.csv\")","4ebbe39d":"test_df = pd.read_csv(\"\/kaggle\/input\/jobathon-analytics-vidhya\/test.csv\")","defa07a2":"train_df.head()","c675f7e4":"test_df.head()","cc596865":"print(\"Train Dataset_size :\" ,train_df.shape)\nprint(\"Test Dataset_size  :\",test_df.shape)","6bc87451":"train_df.isnull().sum()","e8733f8f":"test_df.isnull().sum()","4adcde41":"train_df.info()","8a0cdd4b":"test_df.info()","46b8e244":"# verify percitage of null values\n\ntrain_miss = train_df.isnull().sum() \/ len(train_df) * 100\ntrain_miss = train_miss[train_miss > 0]\ntrain_miss.sort_values(inplace=True)\ntrain_miss","1582a081":"sns.heatmap(train_df.isnull())","e3983477":"train_miss.plot(kind = 'bar')","363dc41c":"# verify percitage of null values\n\ntest_miss = test_df.isnull().sum() \/ len(test_df) * 100\ntest_miss = test_miss[test_miss > 0]\ntest_miss.sort_values(inplace=True)\ntest_miss","c6a4398a":"sns.heatmap(test_df.isnull())","d0582ad7":"test_miss.plot(kind = \"bar\")","413ea1d1":"summary = train_df.describe()\nsummary = summary.transpose()\nsummary","4d1e8612":"summary_test = test_df.describe()\nsummary_test = summary_test.transpose()\nsummary_test","975ad9ae":"train_df['Response'].value_counts()","9c4649fd":"sns.countplot(train_df['Response'])","1fe8a050":"labelEncoder= LabelEncoder()\ntrain_df['City_Code'] = labelEncoder.fit_transform(train_df['City_Code'])\ntest_df['City_Code'] = labelEncoder.fit_transform(test_df['City_Code'])","d906c625":"train_df['Holding_Policy_Duration'].value_counts()","35345012":"sns.countplot('Holding_Policy_Duration', data = train_df, hue = 'Response')","d89f28df":"train_df['Holding_Policy_Duration'].replace(to_replace='\\+', value='', regex=True, inplace=True)\ntrain_df['Holding_Policy_Duration'] = pd.to_numeric(train_df['Holding_Policy_Duration'], errors='coerce')\ntest_df['Holding_Policy_Duration'].replace(to_replace='\\+', value='', regex=True, inplace=True)\ntest_df['Holding_Policy_Duration'] = pd.to_numeric(test_df['Holding_Policy_Duration'], errors='coerce')","8e37387e":"train_df['Accomodation_Type'].value_counts()","f51e838c":"sns.countplot('Accomodation_Type', data = train_df, hue = 'Response')","688d7be3":"train_df['Accomodation_Type'].replace(to_replace='Rented', value='0', regex=True, inplace=True)\ntrain_df['Accomodation_Type'].replace(to_replace='Owned', value='1', regex=True, inplace=True)\ntest_df['Accomodation_Type'].replace(to_replace='Rented', value='0', regex=True, inplace=True)\ntest_df['Accomodation_Type'].replace(to_replace='Owned', value='1', regex=True, inplace=True)","384e0304":"train_df['Reco_Insurance_Type'].value_counts()","60e3354f":"sns.countplot('Reco_Insurance_Type', data = train_df, hue = 'Response')","06ff3c3a":"train_df['Reco_Insurance_Type'].replace(to_replace='Individual', value='0', regex=True, inplace=True)\ntrain_df['Reco_Insurance_Type'].replace(to_replace='Joint', value='1', regex=True, inplace=True)\ntest_df['Reco_Insurance_Type'].replace(to_replace='Individual', value='0', regex=True, inplace=True)\ntest_df['Reco_Insurance_Type'].replace(to_replace='Joint', value='1', regex=True, inplace=True)","8b2b63ca":"train_df['Is_Spouse'].value_counts()","d4761fd7":"sns.countplot('Is_Spouse', data = train_df, hue = 'Response')","a8cf016b":"train_df['Is_Spouse'].replace(to_replace='Yes', value='0', regex=True, inplace=True)\ntrain_df['Is_Spouse'].replace(to_replace='No', value='1', regex=True, inplace=True)\ntest_df['Is_Spouse'].replace(to_replace='Yes', value='0', regex=True, inplace=True)\ntest_df['Is_Spouse'].replace(to_replace='No', value='1', regex=True, inplace=True)","aec3c618":"train_df['Health Indicator'].value_counts()","0d4d244d":"test_df['Health Indicator'].value_counts()","3c8f77ff":"train_df['Health Indicator'].replace(to_replace='X1', value='0', regex=True, inplace=True)\ntrain_df['Health Indicator'].replace(to_replace='X2', value='1', regex=True, inplace=True)\ntrain_df['Health Indicator'].replace(to_replace='X3', value='2', regex=True, inplace=True)\ntrain_df['Health Indicator'].replace(to_replace='X4', value='3', regex=True, inplace=True)\ntrain_df['Health Indicator'].replace(to_replace='X5', value='4', regex=True, inplace=True)\ntrain_df['Health Indicator'].replace(to_replace='X6', value='5', regex=True, inplace=True)\ntrain_df['Health Indicator'].replace(to_replace='X7', value='6', regex=True, inplace=True)\ntrain_df['Health Indicator'].replace(to_replace='X8', value='7', regex=True, inplace=True)\ntrain_df['Health Indicator'].replace(to_replace='X9', value='8', regex=True, inplace=True)","95a7d341":"test_df['Health Indicator'].replace(to_replace='X1', value='0', regex=True, inplace=True)\ntest_df['Health Indicator'].replace(to_replace='X2', value='1', regex=True, inplace=True)\ntest_df['Health Indicator'].replace(to_replace='X3', value='2', regex=True, inplace=True)\ntest_df['Health Indicator'].replace(to_replace='X4', value='3', regex=True, inplace=True)\ntest_df['Health Indicator'].replace(to_replace='X5', value='4', regex=True, inplace=True)\ntest_df['Health Indicator'].replace(to_replace='X6', value='5', regex=True, inplace=True)\ntest_df['Health Indicator'].replace(to_replace='X7', value='6', regex=True, inplace=True)\ntest_df['Health Indicator'].replace(to_replace='X8', value='7', regex=True, inplace=True)\ntest_df['Health Indicator'].replace(to_replace='X9', value='8', regex=True, inplace=True)","923cb2ed":"train_df['Holding_Policy_Type'].value_counts()","52e24b53":"test_df['Holding_Policy_Type'].value_counts()","a7388a0e":"sns.countplot('Holding_Policy_Type', data = train_df, hue = 'Response')","ae394241":"plt.hist(train_df['Upper_Age'], bins = 20)\n","a0f9f226":"plt.hist(test_df['Upper_Age'], bins = 20)","6903d213":"train_df[\"Mean_Age\"] = (train_df.Upper_Age + train_df.Lower_Age)\/2","0a686db5":"plt.hist(train_df['Lower_Age'], bins = 20)","5eb482f3":"plt.hist(test_df['Lower_Age'], bins = 20)","efecd84d":"test_df[\"Mean_Age\"] = (test_df.Upper_Age + test_df.Lower_Age)\/2","77bafa55":"cols = ['Holding_Policy_Duration','Holding_Policy_Type','Health Indicator']\nfor col in cols:\n    print('Imputation with Median: %s' % (col))\n    train_df[col].fillna(train_df[col].median(), inplace=True)\n    test_df[col].fillna(train_df[col].median(), inplace=True)\n    #X[col].fillna(0, inplace=True)\n    #x[col].fillna(0, inplace=True","fc66fd7b":"train_df.isnull().sum()","bf46779e":"test_df.isnull().sum()","2174ca31":"train_df = train_df.drop(['Upper_Age','Lower_Age'], axis = 1)\ntest_df = test_df.drop(['Upper_Age','Lower_Age'], axis = 1)","ed9f5567":"train_df.columns","5c32bef0":"train_df.shape","41f3b096":"test_df.columns","076f5bd8":"test_df.shape","acfc8d3b":"train_df.head()","3e103fd2":"test_df.head()","887aac77":"X = train_df.drop('Response', axis = 1)\nY = train_df.Response","69721dad":"randomsample=  RandomOverSampler()\nx_new,y_new=randomsample.fit_resample(X,Y)","8837aa4e":"sc_data= StandardScaler().fit_transform(x_new.values)","e20fd584":"X_train, X_test, y_train, y_test = train_test_split(np.array(sc_data), np.array(y_new), test_size=0.30)\neval_set=[(X_test, y_test)]","f59edc5c":"X_train.shape","7ccb4178":"y_test.shape","e94de011":"XG_model = XGBClassifier(objective=\"binary:logistic\", learning_rate=0.05, seed=9616, \n                                       max_depth=20, gamma=10, n_estimators=500)","2000b83c":"xg_model = XG_model.fit(X_train, y_train, early_stopping_rounds=50, eval_metric=\"auc\", eval_set=eval_set, verbose=True)\nxg_model","cdfa280f":"print('Train accuracy',xg_model.score(X_train, y_train))\nprint('Test accuracy',xg_model.score(X_test, y_test))","7333f8c1":"xg_pred = xg_model.predict(X_test)","0987cdab":"xg_cm = confusion_matrix(y_test, xg_pred)\nprint(xg_cm)","9c4b5ea5":"xg_classification_report = classification_report(y_test, xg_pred)\nprint(xg_classification_report)","2cd4f221":"xg_pred = pd.DataFrame( { 'actual':  y_train,   'predicted': XG_model.predict( X_train ) } )\nxg_pred","fa892d52":"xg_cm1 = metrics.confusion_matrix( xg_pred.actual,  xg_pred.predicted)\nxg_cm1","3231fe07":"xg_clf = classification_report(xg_pred.actual,  xg_pred.predicted)\nprint(xg_clf)","cbf5c61d":"print(\"accuracy_score is  :\", accuracy_score(xg_pred.actual,  xg_pred.predicted))\nprint(\"precision score is :\",precision_score(xg_pred.actual,  xg_pred.predicted))\nprint(\"recall is          :\",recall_score(xg_pred.actual,  xg_pred.predicted))\nprint(\"F1_score is        :\",f1_score(xg_pred.actual,   xg_pred.predicted))","e0957cd6":"\n\nprint(\"ROC_AUC Score :\", roc_auc_score(xg_pred.actual,  xg_pred.predicted))\n\nfpr,tpr,thresholds=roc_curve(xg_pred.actual,  xg_pred.predicted)\nplt.figure(figsize=(9,6))\nplt.plot(fpr,tpr,color='blue',label='ROC')\nplt.plot([0,1],[0,1],color='green',linestyle='--')\nplt.title('ROC Curve of  XG Boost Model')\nplt.xlabel('FalsePositiveRate')\nplt.ylabel('TruePositiveRate')\nplt.grid()\nplt.legend()\nplt.show","c157e285":"xg_test_pred = pd.DataFrame( { 'actual':  y_test, 'predicted': XG_model.predict( X_test ) } )\nxg_test_pred","c4fbf4e2":"xg_cm1 = metrics.confusion_matrix( xg_test_pred.actual,   xg_test_pred.predicted)\nprint(xg_cm1)","69e901ee":"print(\"accuracy_score is  :\", accuracy_score(xg_test_pred.actual,  xg_test_pred.predicted))\nprint(\"precision score is :\",precision_score(xg_test_pred.actual,  xg_test_pred.predicted))\nprint(\"recall is          :\",recall_score(xg_test_pred.actual,    xg_test_pred.predicted))\nprint(\"F1_score is        :\",f1_score(xg_test_pred.actual,  xg_test_pred.predicted))","3dc492fa":"\n\nprint(\"ROC_AUC Score :\", roc_auc_score(xg_test_pred.actual,  xg_test_pred.predicted))\n\nfpr,tpr,thresholds=roc_curve(xg_test_pred.actual,  xg_test_pred.predicted)\nplt.figure(figsize=(9,6))\nplt.plot(fpr,tpr,color='blue',label='ROC')\nplt.plot([0,1],[0,1],color='green',linestyle='--')\nplt.title('ROC Curve of  XG Boost Model')\nplt.xlabel('FalsePositiveRate')\nplt.ylabel('TruePositiveRate')\nplt.grid()\nplt.legend()\nplt.show","c295bff6":"rf_clf = RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n                       max_depth=None, max_features='auto', max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=10,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)\nrf_model = rf_clf.fit(X_train, y_train)","90ef2d99":"print('Train accuracy :',rf_model.score(X_train, y_train))\nprint('Test accuracy  :',rf_model.score(X_test, y_test))","513588e4":"ran_forest_pred = rf_model.predict(X_test)\nprint(ran_forest_pred)","86e468ec":"ran_forest_cm = confusion_matrix(y_test, ran_forest_pred)\nprint(ran_forest_cm)","50caf14c":"random_forest_classification_report = classification_report(y_test, ran_forest_pred)\nprint(random_forest_classification_report)","4a8acc31":"print(\"accuracy_score is  :\", accuracy_score(y_test, ran_forest_pred))\nprint(\"precision score is :\",precision_score(y_test, ran_forest_pred))\nprint(\"recall is          :\",recall_score(y_test, ran_forest_pred))\nprint(\"F1_score is        :\",f1_score(y_test, ran_forest_pred))","d341f5f0":"\n\nprint(\"ROC_AUC Score :\",roc_auc_score(y_test, ran_forest_pred))\n\nfpr,tpr,thresholds=roc_curve(y_test, ran_forest_pred)\nplt.figure(figsize=(9,6))\nplt.plot(fpr,tpr,color='blue',label='ROC')\nplt.plot([0,1],[0,1],color='green',linestyle='--')\nplt.title('ROC Curve of  Random Forest Model')\nplt.xlabel('FalsePositiveRate')\nplt.ylabel('TruePositiveRate')\nplt.grid()\nplt.legend()\nplt.show","c4fc9b1c":"error_rate = []\n\nfor i in range(1,20):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    y_pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(y_pred_i != y_test))","fdcee21b":"plt.figure(figsize=(10,5))\nplt.plot(range(1,20),error_rate,color='blue',ls='--',marker='.',markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","858d1b70":"knn_model = KNeighborsClassifier(n_neighbors = 5, p=2)\nknn_model.fit(X_train,y_train)","470af056":"print('Train accuracy :',knn_model.score(X_train, y_train))\nprint('Test accuracy  :',knn_model.score(X_test, y_test))","38dbf501":"knn_pred = knn.predict(X_test)","397babf8":"print(\"Confusion_Matrix :\")\nprint(confusion_matrix(y_test,knn_pred))\nprint(\"Classifisction_report :\")\nprint('\\n')\nprint(classification_report(y_test,knn_pred))","50fccc5a":"### Lower_Age","0edc1b44":"### KNN Model Accuracy score","dfed58ff":"## Is_Spouse","f9dfbb08":"# Health Insurance Lead Prediction","8b57dfbc":"## Reco_Insurance_Type","94574688":"## EDA","74015803":"## Model Accuracy Score","b3b154d3":"### Import Train dataset and Test dataset","08bfa90c":"###  Model Accuracy score","2f036fc8":"### Spliting  X, Y, Train data and Test data ","02935b7b":"### Holding_Policy_Type","27ce6710":"## Holding_Policy_Duration","8cc25b27":"###  XG Boost Train accuracy","23c73c06":"## XG Boost Model","75ab4221":"### Data Cleaning","27395f44":"### Import Required Libraries","1dcba61b":"## Response","75e58ae8":"###  Upper_Age","e8dc782c":"###  Label Encoder","88e52a51":"### Handling Null Values ","6f197d87":"## KNN Model","b2b7d8a3":"## Health Indicator","112c916d":"### Summary of the train data","d71df0d0":"## Accomodation_Type","a8ebdedf":"## Random Forest Model","7c58f32a":"### XG Boost Test accuracy"}}