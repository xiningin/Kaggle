{"cell_type":{"be11ca87":"code","4886da81":"code","a16dee8f":"code","a6895417":"code","db1b279d":"code","9f7e8473":"code","8874a2bf":"code","114b1b06":"code","326f50da":"code","a8410d8f":"code","56f28fab":"code","057ff152":"code","546319c7":"code","e69eb692":"code","c3a06475":"code","69d75ec7":"code","36081ecb":"code","bb615251":"code","08198f54":"code","640e3ae3":"code","ac56d867":"code","0e3d378d":"code","d795a7f1":"code","aded30b6":"code","09a31c3d":"code","75152880":"code","3409e827":"code","17067680":"code","38a4860a":"code","469e1897":"code","0703c9f7":"code","1ae4d3dd":"code","ac618d4f":"code","578bbc63":"code","c9e30302":"code","7b57f5a7":"code","2d796dc8":"code","94d1ce07":"code","4e4ca88b":"code","6259f12a":"code","289b8ff3":"markdown","d0c93736":"markdown","c9da7c69":"markdown"},"source":{"be11ca87":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns;\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4886da81":"file = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntrain = file[:]\nfile_for_plot = file[:]\ntest_file = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\",index_col=0)\nfile.head()\n# for x in file.columns:\n#     print(file[x].head())\nfile.columns","a16dee8f":"from scipy.stats import skew\nfrom sklearn.model_selection import cross_val_score, train_test_split\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression, RidgeCV, LassoCV, ElasticNetCV\nfrom sklearn.metrics import mean_squared_error, make_scorer\nfrom scipy.stats import skew\nfrom IPython.display import display\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef feature_engineer(train,Train):\n    # Drop Id column\n#     train.drop(\"Id\", axis = 1, inplace = True)\n#     train = train.loc[train.columns!='Id']\n\n    # Looking for outliers, as indicated in https:\/\/ww2.amstat.org\/publications\/jse\/v19n3\/decock.pdf\n    train = train[train.GrLivArea < 4000]\n    if(Train==False):\n        # Log transform the target for official scoring\n        train.SalePrice = np.log1p(train.SalePrice)\n        y = train.SalePrice\n\n\n\n    # Handle missing values for features where median\/mean or most common value doesn't make sense\n\n    # Alley : data description says NA means \"no alley access\"\n    train.loc[:, \"Alley\"] = train.loc[:, \"Alley\"].fillna(\"None\")\n    # BedroomAbvGr : NA most likely means 0\n    train.loc[:, \"BedroomAbvGr\"] = train.loc[:, \"BedroomAbvGr\"].fillna(0)\n    # BsmtQual etc : data description says NA for basement features is \"no basement\"\n    train.loc[:, \"BsmtQual\"] = train.loc[:, \"BsmtQual\"].fillna(\"No\")\n    train.loc[:, \"BsmtCond\"] = train.loc[:, \"BsmtCond\"].fillna(\"No\")\n    train.loc[:, \"BsmtExposure\"] = train.loc[:, \"BsmtExposure\"].fillna(\"No\")\n    train.loc[:, \"BsmtFinType1\"] = train.loc[:, \"BsmtFinType1\"].fillna(\"No\")\n    train.loc[:, \"BsmtFinType2\"] = train.loc[:, \"BsmtFinType2\"].fillna(\"No\")\n    train.loc[:, \"BsmtFullBath\"] = train.loc[:, \"BsmtFullBath\"].fillna(0)\n    train.loc[:, \"BsmtHalfBath\"] = train.loc[:, \"BsmtHalfBath\"].fillna(0)\n    train.loc[:, \"BsmtUnfSF\"] = train.loc[:, \"BsmtUnfSF\"].fillna(0)\n    # CentralAir : NA most likely means No\n    train.loc[:, \"CentralAir\"] = train.loc[:, \"CentralAir\"].fillna(\"N\")\n    # Condition : NA most likely means Normal\n    train.loc[:, \"Condition1\"] = train.loc[:, \"Condition1\"].fillna(\"Norm\")\n    train.loc[:, \"Condition2\"] = train.loc[:, \"Condition2\"].fillna(\"Norm\")\n    # EnclosedPorch : NA most likely means no enclosed porch\n    train.loc[:, \"EnclosedPorch\"] = train.loc[:, \"EnclosedPorch\"].fillna(0)\n    # External stuff : NA most likely means average\n    train.loc[:, \"ExterCond\"] = train.loc[:, \"ExterCond\"].fillna(\"TA\")\n    train.loc[:, \"ExterQual\"] = train.loc[:, \"ExterQual\"].fillna(\"TA\")\n    # Fence : data description says NA means \"no fence\"\n    train.loc[:, \"Fence\"] = train.loc[:, \"Fence\"].fillna(\"No\")\n    # FireplaceQu : data description says NA means \"no fireplace\"\n    train.loc[:, \"FireplaceQu\"] = train.loc[:, \"FireplaceQu\"].fillna(\"No\")\n    train.loc[:, \"Fireplaces\"] = train.loc[:, \"Fireplaces\"].fillna(0)\n    # Functional : data description says NA means typical\n    train.loc[:, \"Functional\"] = train.loc[:, \"Functional\"].fillna(\"Typ\")\n    # GarageType etc : data description says NA for garage features is \"no garage\"\n    train.loc[:, \"GarageType\"] = train.loc[:, \"GarageType\"].fillna(\"No\")\n    train.loc[:, \"GarageFinish\"] = train.loc[:, \"GarageFinish\"].fillna(\"No\")\n    train.loc[:, \"GarageQual\"] = train.loc[:, \"GarageQual\"].fillna(\"No\")\n    train.loc[:, \"GarageCond\"] = train.loc[:, \"GarageCond\"].fillna(\"No\")\n    train.loc[:, \"GarageArea\"] = train.loc[:, \"GarageArea\"].fillna(0)\n    train.loc[:, \"GarageCars\"] = train.loc[:, \"GarageCars\"].fillna(0)\n    # HalfBath : NA most likely means no half baths above grade\n    train.loc[:, \"HalfBath\"] = train.loc[:, \"HalfBath\"].fillna(0)\n    # HeatingQC : NA most likely means typical\n    train.loc[:, \"HeatingQC\"] = train.loc[:, \"HeatingQC\"].fillna(\"TA\")\n    # KitchenAbvGr : NA most likely means 0\n    train.loc[:, \"KitchenAbvGr\"] = train.loc[:, \"KitchenAbvGr\"].fillna(0)\n    # KitchenQual : NA most likely means typical\n    train.loc[:, \"KitchenQual\"] = train.loc[:, \"KitchenQual\"].fillna(\"TA\")\n    # LotFrontage : NA most likely means no lot frontage\n    train.loc[:, \"LotFrontage\"] = train.loc[:, \"LotFrontage\"].fillna(0)\n    # LotShape : NA most likely means regular\n    train.loc[:, \"LotShape\"] = train.loc[:, \"LotShape\"].fillna(\"Reg\")\n    # MasVnrType : NA most likely means no veneer\n    train.loc[:, \"MasVnrType\"] = train.loc[:, \"MasVnrType\"].fillna(\"None\")\n    train.loc[:, \"MasVnrArea\"] = train.loc[:, \"MasVnrArea\"].fillna(0)\n    # MiscFeature : data description says NA means \"no misc feature\"\n    train.loc[:, \"MiscFeature\"] = train.loc[:, \"MiscFeature\"].fillna(\"No\")\n    train.loc[:, \"MiscVal\"] = train.loc[:, \"MiscVal\"].fillna(0)\n    # OpenPorchSF : NA most likely means no open porch\n    train.loc[:, \"OpenPorchSF\"] = train.loc[:, \"OpenPorchSF\"].fillna(0)\n    # PavedDrive : NA most likely means not paved\n    train.loc[:, \"PavedDrive\"] = train.loc[:, \"PavedDrive\"].fillna(\"N\")\n    # PoolQC : data description says NA means \"no pool\"\n    train.loc[:, \"PoolQC\"] = train.loc[:, \"PoolQC\"].fillna(\"No\")\n    train.loc[:, \"PoolArea\"] = train.loc[:, \"PoolArea\"].fillna(0)\n    # SaleCondition : NA most likely means normal sale\n    train.loc[:, \"SaleCondition\"] = train.loc[:, \"SaleCondition\"].fillna(\"Normal\")\n    # ScreenPorch : NA most likely means no screen porch\n    train.loc[:, \"ScreenPorch\"] = train.loc[:, \"ScreenPorch\"].fillna(0)\n    # TotRmsAbvGrd : NA most likely means 0\n    train.loc[:, \"TotRmsAbvGrd\"] = train.loc[:, \"TotRmsAbvGrd\"].fillna(0)\n    # Utilities : NA most likely means all public utilities\n    train.loc[:, \"Utilities\"] = train.loc[:, \"Utilities\"].fillna(\"AllPub\")\n    # WoodDeckSF : NA most likely means no wood deck\n    train.loc[:, \"WoodDeckSF\"] = train.loc[:, \"WoodDeckSF\"].fillna(0)\n\n\n    # Some numerical features are actually really categories\n    train = train.replace({\"MSSubClass\" : {20 : \"SC20\", 30 : \"SC30\", 40 : \"SC40\", 45 : \"SC45\", \n                                           50 : \"SC50\", 60 : \"SC60\", 70 : \"SC70\", 75 : \"SC75\", \n                                           80 : \"SC80\", 85 : \"SC85\", 90 : \"SC90\", 120 : \"SC120\", \n                                           150 : \"SC150\", 160 : \"SC160\", 180 : \"SC180\", 190 : \"SC190\"},\n                           \"MoSold\" : {1 : \"Jan\", 2 : \"Feb\", 3 : \"Mar\", 4 : \"Apr\", 5 : \"May\", 6 : \"Jun\",\n                                       7 : \"Jul\", 8 : \"Aug\", 9 : \"Sep\", 10 : \"Oct\", 11 : \"Nov\", 12 : \"Dec\"}\n                          })\n\n\n    # Encode some categorical features as ordered numbers when there is information in the order\n    train = train.replace({\"Alley\" : {\"Grvl\" : 1, \"Pave\" : 2},\n                           \"BsmtCond\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                           \"BsmtExposure\" : {\"No\" : 0, \"Mn\" : 1, \"Av\": 2, \"Gd\" : 3},\n                           \"BsmtFinType1\" : {\"No\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \"BLQ\" : 4, \n                                             \"ALQ\" : 5, \"GLQ\" : 6},\n                           \"BsmtFinType2\" : {\"No\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \"BLQ\" : 4, \n                                             \"ALQ\" : 5, \"GLQ\" : 6},\n                           \"BsmtQual\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\" : 4, \"Ex\" : 5},\n                           \"ExterCond\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\": 4, \"Ex\" : 5},\n                           \"ExterQual\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\": 4, \"Ex\" : 5},\n                           \"FireplaceQu\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                           \"Functional\" : {\"Sal\" : 1, \"Sev\" : 2, \"Maj2\" : 3, \"Maj1\" : 4, \"Mod\": 5, \n                                           \"Min2\" : 6, \"Min1\" : 7, \"Typ\" : 8},\n                           \"GarageCond\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                           \"GarageQual\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                           \"HeatingQC\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                           \"KitchenQual\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                           \"LandSlope\" : {\"Sev\" : 1, \"Mod\" : 2, \"Gtl\" : 3},\n                           \"LotShape\" : {\"IR3\" : 1, \"IR2\" : 2, \"IR1\" : 3, \"Reg\" : 4},\n                           \"PavedDrive\" : {\"N\" : 0, \"P\" : 1, \"Y\" : 2},\n                           \"PoolQC\" : {\"No\" : 0, \"Fa\" : 1, \"TA\" : 2, \"Gd\" : 3, \"Ex\" : 4},\n                           \"Street\" : {\"Grvl\" : 1, \"Pave\" : 2},\n                           \"Utilities\" : {\"ELO\" : 1, \"NoSeWa\" : 2, \"NoSewr\" : 3, \"AllPub\" : 4}}\n                         )\n    \n    return train\n\n    \"\"\"\n    # Create new features\n    # 1* Simplifications of existing features\n    train[\"SimplOverallQual\"] = train.OverallQual.replace({1 : 1, 2 : 1, 3 : 1, # bad\n                                                           4 : 2, 5 : 2, 6 : 2, # average\n                                                           7 : 3, 8 : 3, 9 : 3, 10 : 3 # good\n                                                          })\n    train[\"SimplOverallCond\"] = train.OverallCond.replace({1 : 1, 2 : 1, 3 : 1, # bad\n                                                           4 : 2, 5 : 2, 6 : 2, # average\n                                                           7 : 3, 8 : 3, 9 : 3, 10 : 3 # good\n                                                          })\n    train[\"SimplPoolQC\"] = train.PoolQC.replace({1 : 1, 2 : 1, # average\n                                                 3 : 2, 4 : 2 # good\n                                                })\n    train[\"SimplGarageCond\"] = train.GarageCond.replace({1 : 1, # bad\n                                                         2 : 1, 3 : 1, # average\n                                                         4 : 2, 5 : 2 # good\n                                                        })\n    train[\"SimplGarageQual\"] = train.GarageQual.replace({1 : 1, # bad\n                                                         2 : 1, 3 : 1, # average\n                                                         4 : 2, 5 : 2 # good\n                                                        })\n    train[\"SimplFireplaceQu\"] = train.FireplaceQu.replace({1 : 1, # bad\n                                                           2 : 1, 3 : 1, # average\n                                                           4 : 2, 5 : 2 # good\n                                                          })\n    train[\"SimplFireplaceQu\"] = train.FireplaceQu.replace({1 : 1, # bad\n                                                           2 : 1, 3 : 1, # average\n                                                           4 : 2, 5 : 2 # good\n                                                          })\n    train[\"SimplFunctional\"] = train.Functional.replace({1 : 1, 2 : 1, # bad\n                                                         3 : 2, 4 : 2, # major\n                                                         5 : 3, 6 : 3, 7 : 3, # minor\n                                                         8 : 4 # typical\n                                                        })\n    train[\"SimplKitchenQual\"] = train.KitchenQual.replace({1 : 1, # bad\n                                                           2 : 1, 3 : 1, # average\n                                                           4 : 2, 5 : 2 # good\n                                                          })\n    train[\"SimplHeatingQC\"] = train.HeatingQC.replace({1 : 1, # bad\n                                                       2 : 1, 3 : 1, # average\n                                                       4 : 2, 5 : 2 # good\n                                                      })\n    train[\"SimplBsmtFinType1\"] = train.BsmtFinType1.replace({1 : 1, # unfinished\n                                                             2 : 1, 3 : 1, # rec room\n                                                             4 : 2, 5 : 2, 6 : 2 # living quarters\n                                                            })\n    train[\"SimplBsmtFinType2\"] = train.BsmtFinType2.replace({1 : 1, # unfinished\n                                                             2 : 1, 3 : 1, # rec room\n                                                             4 : 2, 5 : 2, 6 : 2 # living quarters\n                                                            })\n    train[\"SimplBsmtCond\"] = train.BsmtCond.replace({1 : 1, # bad\n                                                     2 : 1, 3 : 1, # average\n                                                     4 : 2, 5 : 2 # good\n                                                    })\n    train[\"SimplBsmtQual\"] = train.BsmtQual.replace({1 : 1, # bad\n                                                     2 : 1, 3 : 1, # average\n                                                     4 : 2, 5 : 2 # good\n                                                    })\n    train[\"SimplExterCond\"] = train.ExterCond.replace({1 : 1, # bad\n                                                       2 : 1, 3 : 1, # average\n                                                       4 : 2, 5 : 2 # good\n                                                      })\n    train[\"SimplExterQual\"] = train.ExterQual.replace({1 : 1, # bad\n                                                       2 : 1, 3 : 1, # average\n                                                       4 : 2, 5 : 2 # good\n                                                      })\n\n    # 2* Combinations of existing features\n    # Overall quality of the house\n    train[\"OverallGrade\"] = train[\"OverallQual\"] * train[\"OverallCond\"]\n    # Overall quality of the garage\n    train[\"GarageGrade\"] = train[\"GarageQual\"] * train[\"GarageCond\"]\n    # Overall quality of the exterior\n    train[\"ExterGrade\"] = train[\"ExterQual\"] * train[\"ExterCond\"]\n    # Overall kitchen score\n    train[\"KitchenScore\"] = train[\"KitchenAbvGr\"] * train[\"KitchenQual\"]\n    # Overall fireplace score\n    train[\"FireplaceScore\"] = train[\"Fireplaces\"] * train[\"FireplaceQu\"]\n    # Overall garage score\n    train[\"GarageScore\"] = train[\"GarageArea\"] * train[\"GarageQual\"]\n    # Overall pool score\n    train[\"PoolScore\"] = train[\"PoolArea\"] * train[\"PoolQC\"]\n    # Simplified overall quality of the house\n    train[\"SimplOverallGrade\"] = train[\"SimplOverallQual\"] * train[\"SimplOverallCond\"]\n    # Simplified overall quality of the exterior\n    train[\"SimplExterGrade\"] = train[\"SimplExterQual\"] * train[\"SimplExterCond\"]\n    # Simplified overall pool score\n    train[\"SimplPoolScore\"] = train[\"PoolArea\"] * train[\"SimplPoolQC\"]\n    # Simplified overall garage score\n    train[\"SimplGarageScore\"] = train[\"GarageArea\"] * train[\"SimplGarageQual\"]\n    # Simplified overall fireplace score\n    train[\"SimplFireplaceScore\"] = train[\"Fireplaces\"] * train[\"SimplFireplaceQu\"]\n    # Simplified overall kitchen score\n    train[\"SimplKitchenScore\"] = train[\"KitchenAbvGr\"] * train[\"SimplKitchenQual\"]\n    # Total number of bathrooms\n    train[\"TotalBath\"] = train[\"BsmtFullBath\"] + (0.5 * train[\"BsmtHalfBath\"]) + \\\n    train[\"FullBath\"] + (0.5 * train[\"HalfBath\"])\n    # Total SF for house (incl. basement)\n    train[\"AllSF\"] = train[\"GrLivArea\"] + train[\"TotalBsmtSF\"]\n    # Total SF for 1st + 2nd floors\n    train[\"AllFlrsSF\"] = train[\"1stFlrSF\"] + train[\"2ndFlrSF\"]\n    # Total SF for porch\n    train[\"AllPorchSF\"] = train[\"OpenPorchSF\"] + train[\"EnclosedPorch\"] + \\\n    train[\"3SsnPorch\"] + train[\"ScreenPorch\"]\n    # Has masonry veneer or not\n    train[\"HasMasVnr\"] = train.MasVnrType.replace({\"BrkCmn\" : 1, \"BrkFace\" : 1, \"CBlock\" : 1, \n                                                   \"Stone\" : 1, \"None\" : 0})\n    # House completed before sale or not\n    train[\"BoughtOffPlan\"] = train.SaleCondition.replace({\"Abnorml\" : 0, \"Alloca\" : 0, \"AdjLand\" : 0, \n                                                          \"Family\" : 0, \"Normal\" : 0, \"Partial\" : 1})\n\n\n    # Create new features\n    # 3* Polynomials on the top 10 existing features\n    train[\"OverallQual-s2\"] = train[\"OverallQual\"] ** 2\n    train[\"OverallQual-s3\"] = train[\"OverallQual\"] ** 3\n    train[\"OverallQual-Sq\"] = np.sqrt(train[\"OverallQual\"])\n    train[\"AllSF-2\"] = train[\"AllSF\"] ** 2\n    train[\"AllSF-3\"] = train[\"AllSF\"] ** 3\n    train[\"AllSF-Sq\"] = np.sqrt(train[\"AllSF\"])\n    train[\"AllFlrsSF-2\"] = train[\"AllFlrsSF\"] ** 2\n    train[\"AllFlrsSF-3\"] = train[\"AllFlrsSF\"] ** 3\n    train[\"AllFlrsSF-Sq\"] = np.sqrt(train[\"AllFlrsSF\"])\n    train[\"GrLivArea-2\"] = train[\"GrLivArea\"] ** 2\n    train[\"GrLivArea-3\"] = train[\"GrLivArea\"] ** 3\n    train[\"GrLivArea-Sq\"] = np.sqrt(train[\"GrLivArea\"])\n    train[\"SimplOverallQual-s2\"] = train[\"SimplOverallQual\"] ** 2\n    train[\"SimplOverallQual-s3\"] = train[\"SimplOverallQual\"] ** 3\n    train[\"SimplOverallQual-Sq\"] = np.sqrt(train[\"SimplOverallQual\"])\n    train[\"ExterQual-2\"] = train[\"ExterQual\"] ** 2\n    train[\"ExterQual-3\"] = train[\"ExterQual\"] ** 3\n    train[\"ExterQual-Sq\"] = np.sqrt(train[\"ExterQual\"])\n    train[\"GarageCars-2\"] = train[\"GarageCars\"] ** 2\n    train[\"GarageCars-3\"] = train[\"GarageCars\"] ** 3\n    train[\"GarageCars-Sq\"] = np.sqrt(train[\"GarageCars\"])\n    train[\"TotalBath-2\"] = train[\"TotalBath\"] ** 2\n    train[\"TotalBath-3\"] = train[\"TotalBath\"] ** 3\n    train[\"TotalBath-Sq\"] = np.sqrt(train[\"TotalBath\"])\n    train[\"KitchenQual-2\"] = train[\"KitchenQual\"] ** 2\n    train[\"KitchenQual-3\"] = train[\"KitchenQual\"] ** 3\n    train[\"KitchenQual-Sq\"] = np.sqrt(train[\"KitchenQual\"])\n    train[\"GarageScore-2\"] = train[\"GarageScore\"] ** 2\n    train[\"GarageScore-3\"] = train[\"GarageScore\"] ** 3\n    train[\"GarageScore-Sq\"] = np.sqrt(train[\"GarageScore\"])\n\n\n    # Differentiate numerical features (minus the target) and categorical features\n    categorical_features = train.select_dtypes(include = [\"object\"]).columns\n    numerical_features = train.select_dtypes(exclude = [\"object\"]).columns\n    numerical_features = numerical_features.drop(\"SalePrice\")\n    print(\"Numerical features : \" + str(len(numerical_features)))\n    print(\"Categorical features : \" + str(len(categorical_features)))\n    train_num = train[numerical_features]\n    train_cat = train[categorical_features]\n\n    train_num = train_num.fillna(train_num.median())\n\n    skewness = train_num.apply(lambda x: skew(x))\n    skewness = skewness[abs(skewness) > 0.5]\n    print(str(skewness.shape[0]) + \" skewed numerical features to log transform\")\n    skewed_features = skewness.index\n    train_num[skewed_features] = np.log1p(train_num[skewed_features])\n\n    train_cat = pd.get_dummies(train_cat)\n\n    train = pd.concat([train_num, train_cat], axis = 1)\n    # print(\"New number of feat------------------------------ures : \" + str(train.shape))\n\n    # Partition the dataset in train + validation sets\n#     X_train, X_test, y_train, y_test = train_test_split(train, y, test_size = 0.3, random_state = 0)\n\n    # Standardize numerical features\n    stdSc = StandardScaler()\n    train.loc[:, numerical_features] = stdSc.fit_transform(train.loc[:, numerical_features])\n    \n    \"\"\"\n    \n\n# X_test.loc[:, numerical_features] = stdSc.transform(X_test.loc[:, numerical_features])\n\n# Define error measure for official scoring : RMSE\n# scorer = make_scorer(mean_squared_error, greater_is_better = False)\n\n# def rmse_cv_train(model):\n#     rmse= np.sqrt(-cross_val_score(model, X_train, y_train, scoring = scorer, cv = 10))\n#     return(rmse)\n\n# def rmse_cv_test(model):\n#     rmse= np.sqrt(-cross_val_score(model, X_test, y_test, scoring = scorer, cv = 10))\n#     return(rmse)","a6895417":"train.columns\n","db1b279d":"sns.boxplot(x=\"Utilities\", y=\"SalePrice\", data=file)","9f7e8473":"sns.boxplot(x=\"LotConfig\", y=\"SalePrice\", data=file)","8874a2bf":"sns.boxplot(x=\"LandSlope\", y=\"SalePrice\", data=file)","114b1b06":"sns.boxplot(x=\"Neighborhood\", y=\"SalePrice\", data=file)","326f50da":"sns.boxplot(x=\"Condition1\", y=\"SalePrice\", data=file)","a8410d8f":"sns.boxplot(x=\"LandContour\", y=\"SalePrice\", data=file)","56f28fab":"sns.boxplot(x=\"LotShape\", y=\"SalePrice\", data=file)","057ff152":"sns.boxplot(x=\"Alley\", y=\"SalePrice\", data=file)","546319c7":"sns.boxplot(x=\"Street\", y=\"SalePrice\", data=file)","e69eb692":"sns.boxplot(x=\"MSZoning\", y=\"SalePrice\", data=file)","c3a06475":"\nsns.boxplot(x=\"MSSubClass\", y=\"SalePrice\", data=file)","69d75ec7":"X = \"MSSubClass\"\n\n\ng = sns.catplot(\n    data=file, kind=\"bar\",\n    x=X, y=\"SalePrice\",\n    \n   ci=\"sd\", palette=\"dark\", alpha=.6, height=6\n)","36081ecb":"sns.boxplot(x=\"YrSold\", y=\"SalePrice\", data=file)","bb615251":"X = \"YrSold\"\n\n\ng = sns.catplot(\n    data=file, kind=\"bar\",\n    x=X, y=\"SalePrice\",\n    \n   ci=\"sd\", palette=\"dark\", alpha=.6, height=6\n)","08198f54":"sns.regplot(x = \"YrSold\", y = \"SalePrice\", data = file) ","640e3ae3":"sns.regplot(x = \"GarageArea\", y = \"SalePrice\", data = file) ","ac56d867":"sns.regplot(x = \"GrLivArea\", y = \"SalePrice\", data = file) ","0e3d378d":"sns.regplot(x = \"YearRemodAdd\", y = \"SalePrice\", data = file) GrLivArea","d795a7f1":"sns.regplot(x = \"YearBuilt\", y = \"SalePrice\", data = file)","aded30b6":"sns.regplot(x = \"OverallCond\", y = \"SalePrice\", data = file)","09a31c3d":"sns.regplot(x = \"OverallQual\", y = \"SalePrice\", data = file)","75152880":"sns.regplot(x = \"YrSold\", y = \"SalePrice\", data = file)","3409e827":"sns.regplot(x = \"PoolArea\", y = \"SalePrice\", data = file)","17067680":"sns.regplot(x = \"LotArea\", y = \"SalePrice\", data = file)","38a4860a":"sns.regplot(x = \"LotFrontage\", y = \"SalePrice\", data = file)","469e1897":"sns.pairplot(file[['MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street', 'SalePrice']])","0703c9f7":" #sns.set_theme(color_codes=True)\n# tips = sns.load_dataset(\"tips\")\nax = sns.regplot(x=\"MSSubClass\", y=\"SalePrice\", data=file)","1ae4d3dd":"test_file = feature_engineer(test_file,True)","ac618d4f":"from sklearn.ensemble import RandomForestRegressor\n\nregr = RandomForestRegressor(max_depth=16,max_leaf_nodes=90,  random_state=0).fit(X_train,y_train)\nregr.score(X_test,y_test)","578bbc63":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import Normalizer\n\ndef Encode(column):\n    column.fillna('nnn',inplace=True)\n    le = LabelEncoder()\n    le.fit(column)\n    \n    return le.transform(column)\n\ndef normalize(column):\n#     column.fillna(9999,inplace=True)\n    transformer = Normalizer().fit([column])\n    \n    return transformer.transform([column]).reshape(-1,)\nfile.columns","c9e30302":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import Normalizer\n\nle = LabelEncoder()\n\nFile_encod_1 = file.loc[:,file.columns != 'Id']\n\n\nFile_encod_1.fillna('nnnn',inplace=True)\n\nto_skip = ['MSSubClass','LotFrontage','LotArea','PoolArea','MiscVal','MoSold','YrSold','SalePrice','OverallQual',\n           'OverallCond','YearBuilt','MasVnrArea',\n          'BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea',\n           'BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr',\n          'KitchenAbvGr','TotRmsAbvGrd','Fireplaces','GarageYrBlt','GarageCars','GarageArea','WoodDeckSF',\n           'OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea',\n          'MiscVal','MoSold','YrSold','SalePrice','YearRemodAdd']\n\nfor x in File_encod_1.columns:\n    if(x in to_skip):\n        File_encod_1[x].replace('nnnn',0,inplace=True)\n        File_encod_1[x].replace('Grvl',0,inplace=True)\n        transformer = Normalizer().fit([File_encod_1[x]])\n        File_encod_1[x] = transformer.transform([File_encod_1[x]]).reshape(-1,)\n    else:\n        le.fit(File_encod_1[x])\n        File_encod_1[x] = le.transform(File_encod_1[x])\n\nFile_encod_1.replace('nnnn',0,inplace=True)\n# print(File_encod_1.head())\nfile_for_plot = File_encod_1[:]\nlister = ['LotFrontage','LotArea','OverallQual','YearBuilt','YearRemodAdd','MasVnrArea','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','1stFlrSF',\n         '2ndFlrSF','LowQualFinSF','GrLivArea','GarageArea','WoodDeckSF','OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea','SalePrice',\n          'GarageCars','MiscFeature','Fence','PavedDrive','GarageFinish','GarageYrBlt','GarageType','FireplaceQu','Fireplaces','Functional','Electrical',\n            'CentralAir','Foundation','HouseStyle','Neighborhood','Alley','MSZoning','MSSubClass']\n\nmoya_lister = ['SalePrice',SalePrice\nOverallQual     \nGarageCars      \nGarageArea      \n1stFlrSF        \nTotRmsAbvGrd    \nMasVnrArea      \nFireplaces      \n2ndFlrSF        \nLotArea         \nCentralAir      \nElectrical      \nRoofStyle       \nNeighborhood    \nLotFrontage     \nHouseStyle      \nBedroomAbvGr    \nRoofMatl        \nExterCond,'Exterior2nd','Exterior1st','PoolArea' ]\n\nFile_encod_1 = File_encod_1[moya_lister]\n\nX_f_1 = File_encod_1.loc[:,File_encod_1.columns != 'SalePrice']\ny_f_1 = File_encod_1['SalePrice']\n\nprint(X_f_1.head())\n\n# ###########    test ########\n\ntest_file_encod_1 = test_file.loc[:,test_file.columns != 'Id']\nID = test_file['Id']\n\ntest_file_encod_1.fillna('nnnn',inplace=True)\n\nto_skip = ['MSSubClass','LotFrontage','LotArea','PoolArea','MiscVal','MoSold','YrSold','SalePrice','OverallQual','OverallCond','YearBuilt','MasVnrArea',\n          'BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea','BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr',\n          'KitchenAbvGr','TotRmsAbvGrd','Fireplaces','GarageYrBlt','GarageCars','GarageArea','WoodDeckSF','OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea',\n          'MiscVal','MoSold','YrSold','YearRemodAdd']\n\nfor x in test_file_encod_1.columns:\n    if(x in to_skip):\n        test_file_encod_1[x].replace('nnnn',0,inplace=True)\n        test_file_encod_1[x].replace('Grvl',0,inplace=True)\n        transformer = Normalizer().fit([test_file_encod_1[x]])\n        test_file_encod_1[x] = transformer.transform([test_file_encod_1[x]]).reshape(-1,)\n    else:\n        le.fit(test_file_encod_1[x])\n        test_file_encod_1[x] = le.transform(test_file_encod_1[x])\n\ntest_file_encod_1.replace('nnnn',0,inplace=True)\n\n\n\n","7b57f5a7":"corr = File_encod_1.corr()\ncorr.sort_values([\"SalePrice\"], ascending = False, inplace = True)\nprint(corr.SalePrice)\n","2d796dc8":"import seaborn as sns\nimport matplotlib.pyplot as plt\n     \nfile_for_plot.fillna(0,inplace=True)    \n# sns.set(style = 'whitegrid')  \n# sns.scatterplot(x =\"MSSubClass\",y =\"BsmtFinSF2\",data = test_file_encod_1) \n# file_for_plot.columns\nfor a in file_for_plot.columns:\n#     print(a)\n    sns.regplot(x = 'SalePrice',y = a,data = file_for_plot, color=\"g\")\n    plt.show()\n    \n","94d1ce07":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_f_1, y_f_1, test_size=0.33, random_state=42)\n\nX=X_f_1\ny=y_f_1\n\nX_train.head()","4e4ca88b":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_log_error\n\n# regr = RandomForestRegressor(max_depth=25,max_leaf_nodes=140, random_state=0).fit(X_train,y_train)\n# regr.score(X_test,y_test)\nfrom sklearn.model_selection import GridSearchCV\nestimator = RandomForestRegressor()\nparam_grid = { \n            \"n_estimators\"      : [10,20,30,50,70,100],\n            \"max_features\"      : [\"auto\", \"sqrt\", \"log2\"],\n            \"min_samples_split\" : [2,4,8,16,32],\n            \"bootstrap\": [True, False],\n            \"max_depth\": [10,25,35,50,75,100],\n            \"max_leaf_nodes\":[5,10,15,25,35,70,100,150]\n            }\n# grid = GridSearchCV(estimator, param_grid, n_jobs=-1, cv=5)\n\n# grid.fit(X_train, y_train)\n# grid.score(X_test,y_test)\n\n# pred = regr.predict(X_test)\n\n# RMSLE = np.sqrt( mean_squared_log_error(y_test, pred))\n# RMSLE","6259f12a":"regr = RandomForestRegressor(max_depth=16,max_leaf_nodes=90, random_state=0).fit(X_f_1,y_f_1)\npred = regr.predict(test_file_encod_1)\nimport csv\n\nwith open('innovators.csv', 'w', newline='') as file:\n\twriter = csv.writer(file)\n\tzipped_lists=zip(ID,pred)\n\twriter.writerow(('Id','SalePrice'))\n\tfor row in zipped_lists:\n\t\twriter.writerow(row)\n\n\nprint(\"done\")","289b8ff3":"# Data Analysis","d0c93736":"# **ENCODING**","c9da7c69":"**Label Encoding**"}}