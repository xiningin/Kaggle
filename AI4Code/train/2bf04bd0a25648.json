{"cell_type":{"9cdedfa1":"code","c7055602":"code","52b8a950":"code","9b904b17":"code","40712e78":"code","d52c2fe4":"code","ec1db9eb":"code","72c315c6":"code","6bebb178":"code","e3a0d448":"code","668e3722":"code","099f8d70":"code","7ae460bb":"code","df354c84":"markdown","df8bcb2c":"markdown","cccf389e":"markdown","300b9b00":"markdown"},"source":{"9cdedfa1":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import OneHotEncoder\ntrain_df = pd.read_csv(\"\/kaggle\/input\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/test.csv\")","c7055602":"train_df[\"Survived_cat\"] = train_df[\"Survived\"].astype('category')\ntrain_df.describe(include=\"all\")","52b8a950":"prediction = pd.DataFrame()\nprediction['PassengerId'] = test_df['PassengerId'].copy()\nprediction['Survived'] = 0\nprediction.to_csv(\"submission.csv\", index=False, sep=\",\", header=True)","9b904b17":"from sklearn.utils import shuffle\nfrom sklearn import preprocessing\nfrom sklearn.utils import shuffle\n\ndef dataset(dataframe):\n    try:\n        Y = dataframe['Survived'].copy()\n    except:\n        Y = None\n    X = dataframe[['Pclass_1', 'Pclass_2', 'Pclass_3', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked_C', 'Embarked_Q', 'Embarked_S']].copy()\n    X['Age'] = X['Age'].fillna(value=29.7)\n    X = X.fillna(method='ffill')\n    return X,Y\n\ntrain_df = pd.read_csv(\"\/kaggle\/input\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/test.csv\")\n\ntrain_df_it1 = pd.get_dummies(train_df.copy(), columns=[\"Pclass\", \"Embarked\"])\ntest_df_it1 = pd.get_dummies(test_df.copy(), columns=[\"Pclass\", \"Embarked\"])\ntrain_df = shuffle(train_df_it1).reset_index(drop=True)\ntrain_X, train_Y = dataset(train_df_it1[0:600])\nval_X  , val_Y   = dataset(train_df_it1[600:])\ntest_X, _ = dataset(test_df_it1)\n\nnormalizer = preprocessing.StandardScaler().fit(train_X.append(val_X).append(test_X) )\ntrain_X = normalizer.transform(train_X)\nval_X = normalizer.transform(val_X)\ntest_X = normalizer.transform(test_X)","40712e78":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nclf = LogisticRegression(random_state=2, solver='lbfgs', max_iter=300, C=0.1).fit(train_X, train_Y)\nval_pred = clf.predict(val_X) \naccuracy_score(val_Y, val_pred)","d52c2fe4":"final_train_X, final_train_Y = dataset(train_df)\nclf = LogisticRegression(random_state=1, solver='lbfgs', max_iter=1000, C=0.01).fit(final_train_X, final_train_Y)\npred = clf.predict(test_X)\nprediction = pd.DataFrame()\nprediction['PassengerId'] = test_df['PassengerId'].copy()\nprediction['Survived'] = pred\nprediction.to_csv(\"submission.csv\", index=False, sep=\",\", header=True)","ec1db9eb":"from sklearn.utils import shuffle\nfrom sklearn import preprocessing\nfrom sklearn.utils import shuffle\n\ndef fill_data(X):\n    X['Age'] = X['Age'].fillna(value=29.7)\n    X = X.fillna(method='ffill')\n    return X\n\ndef dataset(dataframe, enc):\n    try:\n        Y = dataframe['Survived'].copy()\n    except:\n        Y = None\n    \n    X = dataframe[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']].copy()\n    for col in ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']:\n        X[col] = enc[col].transform(X[col].copy())\n    \n    return X,Y\n\ntrain_df = pd.read_csv(\"\/kaggle\/input\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/test.csv\")\n\ntrain_df_it2 = fill_data(train_df)\ntest_df_it2 = fill_data(test_df)\n\nfull_df = train_df_it2.append(test_df_it2)\n\nenc = dict()\nfor col in ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']: \n    enc_col = preprocessing.LabelEncoder()\n    enc_col.fit(full_df[col].copy())\n    enc[col] = enc_col\n\ntrain_df_it2 = shuffle(train_df_it2).reset_index(drop=True)\n\ntrain_X, train_Y = dataset(train_df_it2[0:600], enc)\nval_X  , val_Y   = dataset(train_df_it2[600:], enc)\ntest_X, _ = dataset(test_df_it2, enc)","72c315c6":"normalizer = preprocessing.StandardScaler().fit(train_X.append(val_X).append(test_X) )\ntrain_X = normalizer.transform(train_X)\nval_X = normalizer.transform(val_X)\ntest_X = normalizer.transform(test_X)","6bebb178":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\nclf = DecisionTreeClassifier()\nclf = clf.fit(train_X, train_Y)\nval_pred = clf.predict(val_X)\naccuracy_score(val_Y, val_pred)","e3a0d448":"pred = clf.predict(test_X)\nprediction = pd.DataFrame()\nprediction['PassengerId'] = test_df['PassengerId'].copy()\nprediction['Survived'] = pred\nprediction.to_csv(\"submission.csv\", index=False, sep=\",\", header=True)","668e3722":"from catboost import Pool, cv\n\ndef load_dataset(path):\n    df = pd.read_csv(path)\n    X = df[ ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked'] ].copy()\n#     X['Age'] = X['Age'].fillna(29.7)\n    X['Embarked'] = X['Embarked'].fillna('X')\n    try:\n        Y = df['Survived'].copy()\n    except:\n        Y =None\n    return X, Y\n\nX, Y = load_dataset(\"\/kaggle\/input\/train.csv\")\ntest_X, _ = load_dataset(\"\/kaggle\/input\/test.csv\")\n\ncv_dataset = Pool(data=X,\n                  label=Y,\n                  cat_features=['Sex', 'Embarked', 'Pclass']\n                  )\ndef objective(params):\n    import random\n\n    scores = cv(cv_dataset,\n                params,\n                seed=0,\n                partition_random_seed=random.randint(1,10000),\n                plot=False,\n                fold_count=3)\n    s = -scores['test-Accuracy-mean'].max()\n    return s\n\n\nfrom hyperopt import hp\nfrom hyperopt import fmin, tpe, space_eval\n\nparams = {\"iterations\": 50,\n        \"learning_rate\": hp.loguniform(\"learning_rate\", -4, 0),\n        \"depth\": hp.quniform(\"depth\", 1, 5, 1),\n        \"loss_function\": \"Logloss\",\n        \"verbose\": False,\n        'random_seed': 2,\n        \"eval_metric\": 'Accuracy'}\n\nbest = fmin(fn=objective,\n    space= params,\n    algo=tpe.suggest,\n    return_argmin=False,\n    max_evals=100)\n\nbest","099f8d70":"from catboost import CatBoostClassifier\nbest['iterations'] = 50\nclf = CatBoostClassifier(**best)\nclf.fit(cv_dataset)\ndf = pd.read_csv(\"\/kaggle\/input\/test.csv\")\ntest_X, _ = load_dataset(\"\/kaggle\/input\/test.csv\")\ntest_pool = Pool(data=test_X, cat_features=['Sex', 'Embarked', 'Pclass'])\n\npr = pd.DataFrame()\npr['PassengerId'] = df['PassengerId'].copy()\npr['Survived']  =  clf.predict(test_pool)\npr['Survived']  =   pr['Survived'].astype(\"int\")\npr.to_csv(\"submission.csv\", index=False, sep=\",\", header=True)","7ae460bb":"clf.get_feature_importance(prettified=True)","df354c84":"## Iteration 1: Logistic regression","df8bcb2c":"## Iteration 0: Constant prediction\n\nA very simple model which returns a constant prediction. From the bellow statistics, we pick `Survived=0`.\n","cccf389e":"## Iteration 2: Decision tree","300b9b00":"## Iteration 3: Gradient boosting"}}