{"cell_type":{"062f5a04":"code","2c05415e":"code","8252568b":"code","7527c945":"code","79764d9e":"code","3650a560":"code","737222ea":"code","10d31182":"code","78022067":"code","27f44065":"code","2ac96750":"code","c1eb95be":"code","96f63e5d":"code","27d85e53":"code","80af5081":"code","b808d655":"code","55a2e0d6":"code","e5568b12":"code","af4d5798":"code","abe85399":"code","162b972f":"code","98b8bb8f":"code","09feed8f":"code","9e23a0d9":"code","493c65bf":"code","69b96110":"code","c16ecaba":"code","be2f7410":"code","93a3fabd":"code","7923903e":"code","7155e68e":"code","bb9e3309":"code","ea0672e1":"code","3deacd35":"code","2e73840b":"code","54b87a93":"code","aa1828c2":"code","80b49ff4":"code","aa248578":"code","47449f22":"code","4ebc6eb9":"code","fe5d113d":"code","00b4c557":"code","627f926e":"code","73265b61":"code","1b76d141":"code","c82fbf3b":"code","95880afe":"code","c987e766":"code","0e4c76b9":"code","ec63482b":"code","1ccec00c":"code","66229949":"markdown","01f55799":"markdown","c52165a5":"markdown","7a2683a5":"markdown","07f20906":"markdown","d90f4981":"markdown","5d823f7c":"markdown","6c3b664f":"markdown","4a7882bc":"markdown","765b5653":"markdown","4bc059d5":"markdown","15c71195":"markdown","7a4d95f0":"markdown","f15d8e68":"markdown","957cf6ba":"markdown","7ca13b80":"markdown","f9210784":"markdown","26a2d6ce":"markdown","f91c678e":"markdown","2b6b7d7d":"markdown","07014118":"markdown","14fc1ad6":"markdown","af839dbd":"markdown","8136f674":"markdown","72ddb312":"markdown","0434a925":"markdown","bc62a145":"markdown","5a153e87":"markdown","57ec8806":"markdown","4a955fdc":"markdown","c9e77eba":"markdown","6b39e3fa":"markdown","7c6f2784":"markdown","232b9143":"markdown","5b2d7a7e":"markdown","aa50720d":"markdown","93a2c674":"markdown","1d3fc64a":"markdown","cf93345e":"markdown","18d027e7":"markdown","ea7d62e0":"markdown"},"source":{"062f5a04":"pip install pyspellchecker","2c05415e":"import pandas as pd\nfrom spellchecker import SpellChecker\nimport regex as re","8252568b":"import warnings\nwarnings.filterwarnings(\"ignore\")","7527c945":"train = pd.read_csv('..\/input\/contradictory-my-dear-watson\/train.csv')\ntest = pd.read_csv('..\/input\/contradictory-my-dear-watson\/test.csv')","79764d9e":"train","3650a560":"eng = train.loc[train.language == 'English']","737222ea":"spell = SpellChecker()  # loads default word frequency list\nspell.word_frequency.load_text_file('..\/input\/english-words\/words_alpha.txt')\nspell.word_frequency.load_words([''])","10d31182":"eng['premise_misspelled'] = eng.premise.apply(lambda sentence: tuple(spell.unknown(re.split('[!\\:;,.\\-\\% \\b\\s()\\\"\/$0-9]',re.sub('[\\'\\[\\]]', '', sentence)))))","78022067":"misspelled_df = eng.loc[eng.premise_misspelled != ()]\nlist(misspelled_df.premise_misspelled)","27f44065":"pd.set_option('display.max_colwidth', -1) #This allows us to see the full sentences of the dataframes","2ac96750":"err1 = misspelled_df.loc[eng.premise.str.contains('\\?\\?', case = False)] #Let the double question mark errors be err1\nerr2 = misspelled_df.loc[eng.premise.str.contains(\"\\xad\", case = False)] #and those containing \\xad be err2\nprint(len(err1), len(err2))","c1eb95be":"reduced_1 = pd.concat([misspelled_df, err1, err1]).drop_duplicates(keep=False)\nreduced_2 = pd.concat([reduced_1, err2, err2]).drop_duplicates(keep=False)","96f63e5d":"list(reduced_2.premise_misspelled)","27d85e53":"err1","80af5081":"correction = err1.premise.apply(lambda sentence: re.sub('\\?\\?', 'e', sentence))\ncorrect_rhone = correction.apply(lambda sentence: re.sub('Rhene', 'Rhone', sentence))\ncorrect_ataturk = correct_rhone.apply(lambda sentence: re.sub('Ataterk', 'Ataturk', sentence))\ncorrect_madrileno = correct_ataturk.apply(lambda sentence: re.sub('Madrileeo', 'Madrileno', sentence))\ncorrect_alacahoyuk = correct_madrileno.apply(lambda sentence: re.sub('Alacaheyek', 'Alacahoyuk', sentence))\ncorrect_alcudia = correct_alacahoyuk.apply(lambda sentence: re.sub('Alcedia', 'Alcudia', sentence))\ncorrection1 = correct_alcudia","b808d655":"for i in correction1.index:\n    eng.loc[eng.index == i, 'premise'] = correction1.loc[correction1.index == i]","55a2e0d6":"err2 = eng.loc[eng.premise.str.contains(\"\\?\\xad\", case = False)]\nerr2","e5568b12":"correction2 = err2.premise.apply(lambda sentence: re.sub('\\?\\xad', '', sentence))\nfor i in correction2.index:\n    eng.loc[eng.index == i, 'premise'] = correction2.loc[correction2.index == i]","af4d5798":"eng['hypothesis_misspelled'] = eng.hypothesis.apply(lambda sentence: tuple(spell.unknown(re.split('[\\?!\\:;,.\\-\\% \\b\\s()\\\"\/$0-9]',re.sub('[\\'\\[\\]]', '', sentence)))))\nmisspelled_hyp_df = eng.loc[eng.hypothesis_misspelled != ()]\nlist(misspelled_hyp_df.hypothesis_misspelled) #contains the 'misspelled' words","abe85399":"eng.loc[eng.hypothesis.str.contains('Ile de R', case = False)]","162b972f":"eng.loc[eng.hypothesis == 'Ile de R is no longer part of the attraction.', 'hypothesis'] = 'Ile de Re is no longer part of the attraction.'\neng.loc[eng.hypothesis == 'Ile de R.', 'hypothesis'] = 'Ile de Re.'","98b8bb8f":"square_brackets = eng.loc[eng.premise.str.contains('[\\[\\]]', case = False)]\nfor i in square_brackets.index:\n     eng.loc[eng.index == i, 'premise'] = re.sub('[\\[\\]]', '', str(eng.loc[eng.index == i].premise.values[0]))\nampersands = eng.loc[eng.premise.str.contains('\\&amp', case = False)]\nfor i in ampersands.index:\n    eng.loc[eng.index == i, 'premise'] = re.sub('\\&amp', ' and ', str(eng.loc[eng.index == i].premise.values[0]))","09feed8f":"eng.drop(columns=['premise_misspelled', 'hypothesis_misspelled'])\nfor i in eng.index:\n    train.loc[train.index == i] = eng.loc[eng.index == i]","9e23a0d9":"eng_test = test.loc[test.language == 'English']","493c65bf":"err1 = eng_test.loc[eng_test.premise.str.contains('\\?\\?', case = False)]\ncorrection = err1.premise.apply(lambda sentence: re.sub('\\?\\?', 'e', sentence))\ncorrect_alacahoyuk = correction.apply(lambda sentence: re.sub('Alacaheyek', 'Alacahoyuk', sentence))\ncorrect_madrileno = correct_alacahoyuk.apply(lambda sentence: re.sub('Madrileeo', 'Madrileno', sentence))\ncorrect_alcudia = correct_madrileno.apply(lambda sentence: re.sub('Alcedia', 'Alcudia', sentence))\ncorrect_ataturk = correct_alcudia.apply(lambda sentence: re.sub('Ataterk', 'Ataturk', sentence))\nfor i in correct_ataturk.index:\n    eng_test.loc[eng_test.index == i, 'premise'] = correct_ataturk.loc[correct_ataturk.index == i]","69b96110":"err2 = eng_test.loc[eng_test.premise.str.contains('\\?\\xad', case = False)]\ncorrection = err2.premise.apply(lambda sentence: re.sub('\\?\\xad', '', sentence))\nfor i in correction.index:\n    eng_test.loc[eng_test.index == i, 'premise'] = correction.loc[correction.index == i]","c16ecaba":"square_brackets = eng_test.loc[eng_test.premise.str.contains('[\\[\\]]', case = False)]\nfor i in square_brackets.index:\n     eng_test.loc[eng_test.index == i, 'premise'] = re.sub('[\\[\\]]', '', str(eng_test.loc[eng_test.index == i].premise.values[0]))","be2f7410":"ampersands = eng_test.loc[eng_test.premise.str.contains('\\&amp', case = False)]\nfor i in ampersands.index:\n    eng_test.loc[eng_test.index == i, 'premise'] = re.sub('\\&amp', ' and ', str(eng_test.loc[eng_test.index == i].premise.values[0]))","93a3fabd":"for i in eng_test.index:\n    test.loc[test.index == i] = eng_test.loc[eng_test.index == i]","7923903e":"train.to_csv('train_cleaned.csv',index=False)\ntest.to_csv('test_cleaned.csv',index=False)","7155e68e":"!pip install git+https:\/\/github.com\/ssut\/py-googletrans.git","bb9e3309":"from googletrans import Translator\nfrom dask import bag, diagnostics\nimport numpy as np","ea0672e1":"def translate(words, dest):\n    dest_choices = ['zh-cn',\n                    'ar',\n                    'fr',\n                    'sw',\n                    'ur',\n                    'vi',\n                    'ru',\n                    'hi',\n                    'el',\n                    'th',\n                    'es',\n                    'de',\n                    'tr',\n                    'bg'\n                    ]\n    if not dest:\n        dest = np.random.choice(dest_choices)\n        \n    translator = Translator()\n    decoded = translator.translate(words, dest=dest).text\n    return decoded\n\n\n#TODO: use a dask dataframe instead of all this\ndef trans_parallel(df, dest):\n    premise_bag = bag.from_sequence(df.premise.tolist()).map(translate, dest)\n    hypo_bag =  bag.from_sequence(df.hypothesis.tolist()).map(translate, dest)\n    with diagnostics.ProgressBar():\n        premises = premise_bag.compute()\n        hypos = hypo_bag.compute()\n    df[['premise', 'hypothesis']] = list(zip(premises, hypos))\n    return df\n\n    \neng_trans = train.loc[train.lang_abv == \"en\"].copy() \\\n           .pipe(trans_parallel, dest=None)\n\nnon_eng_trans =  train.loc[train.lang_abv != \"en\"].copy() \\\n                .pipe(trans_parallel, dest='en')\n\n#These two lines are not in JohnM's notebook and are here to update the language and lang_abv column for the new dataframes\neng_trans[['lang_abv', 'language']] = [['mx', 'Mixed']]*len(eng)\nnon_eng_trans[['lang_abv', 'language']] = [['en', 'English']]*len(non_eng_trans)\n\ntrain = train.append([eng_trans, non_eng_trans])\ntrain.reset_index\ntrain.shape","3deacd35":"!pip install git+https:\/\/github.com\/makcedward\/nlpaug","2e73840b":"import nlpaug.augmenter.word as naw\nimport nlpaug.flow as nafc\nfrom nlpaug.util import Action","54b87a93":"text = train.premise.values[0]\nmodel = 'distilbert-base-uncased'\nins_aug = naw.ContextualWordEmbsAug(\n    model_path=model, action=\"insert\")\nprint(\"Original:\")\nprint(text)\nprint(\"Augmented Text:\")\nfor i in range(10):\n    augmented_text = ins_aug.augment(text)\n    print(augmented_text)","aa1828c2":"syn_aug = naw.SynonymAug(aug_src='wordnet')\naugmented_text = syn_aug.augment(text)\nprint(\"Original:\")\nprint(text)\nprint(\"Augmented Text:\")\nfor i in range(10):\n    augmented_text = syn_aug.augment(text)\n    print(augmented_text)","80b49ff4":"\ndef insert_augment(words, model):\n    ins_aug = naw.ContextualWordEmbsAug(\n        model_path=model, action=\"insert\")    \n    augmented_text = ins_aug.augment(words)\n    return augmented_text\n\ndef ins_aug_parallel(df, model):\n    premise_bag = bag.from_sequence(df.premise.tolist()).map(insert_augment, model)\n    hypo_bag =  bag.from_sequence(df.hypothesis.tolist()).map(insert_augment, model)\n    with diagnostics.ProgressBar():\n        premises = premise_bag.compute()\n        hypos = hypo_bag.compute()\n    df[['premise', 'hypothesis']] = list(zip(premises, hypos))\n    return df\n\neng_ins_aug = train.loc[train.lang_abv == \"en\"].copy() \\\n           .pipe(ins_aug_parallel, model='distilbert-base-uncased')\n\ntrain = train.append([eng_ins_aug])\n\ntrain.to_csv('train_cleaned_ins.csv',index=False)\n\n","aa248578":"\ndef synonym_augment(words):\n    syn_aug = naw.SynonymAug(\n        aug_src = 'wordnet')    \n    augmented_text = syn_aug.augment(words)\n    return augmented_text\n\ndef syn_aug_parallel(df):\n    premise_bag = bag.from_sequence(df.premise.tolist()).map(synonym_augment)\n    hypo_bag =  bag.from_sequence(df.hypothesis.tolist()).map(synonym_augment)\n    with diagnostics.ProgressBar():\n        premises = premise_bag.compute()\n        hypos = hypo_bag.compute()\n    df[['premise', 'hypothesis']] = list(zip(premises, hypos))\n    return df\n\neng_syn_aug = train.loc[train.lang_abv == \"en\"].copy() \\\n           .pipe(syn_aug_parallel)\n\ntrain = train.append([eng_syn_aug])\n\ntrain.to_csv('train_cleaned_ins_syn.csv',index=False)\n","47449f22":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom kaggle_datasets import KaggleDatasets\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport transformers\nfrom transformers import TFAutoModel, AutoTokenizer\nfrom sklearn.model_selection import StratifiedKFold\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os","4ebc6eb9":"# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","fe5d113d":"MODEL = 'jplu\/tf-xlm-roberta-large'\nEPOCHS = 8\nMAX_LEN = 96\n\n# Our batch size will depend on number of replicas\nBATCH_SIZE= 16 * strategy.num_replicas_in_sync\nAUTO = tf.data.experimental.AUTOTUNE","00b4c557":"#Load the tokenizer\ntokenizer = AutoTokenizer.from_pretrained(MODEL)","627f926e":"def quick_encode(df,maxlen=100):\n    \n    values = df[['premise','hypothesis']].values.tolist()\n    tokens=tokenizer.batch_encode_plus(values,max_length=maxlen,pad_to_max_length=True)\n    \n    return np.array(tokens['input_ids'])\n\nx_train = quick_encode(train)\nx_test = quick_encode(test)\ny_train = train.label.values","73265b61":"def create_dist_dataset(X, y,val,batch_size= BATCH_SIZE):\n    \n    \n    dataset = tf.data.Dataset.from_tensor_slices((X,y)).shuffle(len(X))\n          \n    if not val:\n        dataset = dataset.repeat().batch(batch_size).prefetch(AUTO)\n    else:\n        dataset = dataset.batch(batch_size).prefetch(AUTO)\n\n    \n    \n    return dataset\n\n\n\ntest_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((x_test))\n    .batch(BATCH_SIZE)\n)","1b76d141":"def build_model(transformer,max_len):\n    \n    input_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_ids\")\n    sequence_output = transformer(input_ids)[0]\n    cls_token = sequence_output[:, 0, :]\n    out = Dense(3, activation='softmax')(cls_token)\n\n    # It's time to build and compile the model\n    model = Model(inputs=input_ids, outputs=out)\n    model.compile(\n        Adam(lr=1e-5), \n        loss='sparse_categorical_crossentropy', \n        metrics=['accuracy']\n    )\n    \n    return model","c82fbf3b":"n_steps = len(x_train) \/\/ batch_size\n\ntrain_history = model.fit(\n    train_dataset,\n    steps_per_epoch=n_steps,\n    validation_data=valid_dataset,\n    epochs=n_epochs\n)","95880afe":"pred_test=np.zeros((test.shape[0],3))\nskf = StratifiedKFold(n_splits=5,shuffle=True,random_state=777)\nval_score=[]\nhistory=[]\n\n\nfor fold,(train_ind,valid_ind) in enumerate(skf.split(x_train,y_train)):\n    \n    if fold < 4:\n    \n        print(\"fold\",fold+1)\n        \n       \n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        \n        train_data = create_dist_dataset(x_train[train_ind],y_train[train_ind],val=False)\n        valid_data = create_dist_dataset(x_train[valid_ind],y_train[valid_ind],val=True)\n    \n        Checkpoint=tf.keras.callbacks.ModelCheckpoint(f\"roberta_base.h5\", monitor='val_loss', verbose=0, save_best_only=True,\n        save_weights_only=True, mode='min')\n        \n        with strategy.scope():\n            transformer_layer = TFAutoModel.from_pretrained(MODEL)\n            model = build_model(transformer_layer, max_len=MAX_LEN)\n            \n        \n\n        n_steps = len(train_ind)\/\/BATCH_SIZE\n        print(\"training model {} \".format(fold+1))\n\n        train_history = model.fit(\n        train_data,\n        steps_per_epoch=n_steps,\n        validation_data=valid_data,\n        epochs=EPOCHS,callbacks=[Checkpoint],verbose=0)\n        \n        print(\"Loading model...\")\n        model.load_weights(f\"roberta_base.h5\")\n        \n        \n\n        print(\"fold {} validation acc {}\".format(fold+1,np.mean(train_history.history['val_accuracy'])))\n        print(\"fold {} validation acc {}\".format(fold+1,np.mean(train_history.history['val_loss'])))\n        \n        history.append(train_history)\n\n        val_score.append(np.mean(train_history.history['val_accuracy']))\n        \n        print('predict on test....')\n        preds=model.predict(test_dataset,verbose=1)\n\n        pred_test+=preds\/4","c987e766":"plt.figure(figsize=(15,10))\n\nfor i,hist in enumerate(history):\n\n    plt.subplot(2,2,i+1)\n    plt.plot(np.arange(EPOCHS),hist.history['accuracy'],label='train accu')\n    plt.plot(np.arange(EPOCHS),hist.history['val_accuracy'],label='validation acc')\n    plt.gca().title.set_text(f'Fold {i+1} accuracy curve')\n    plt.legend()","0e4c76b9":"plt.figure(figsize=(15,10))\n\nfor i,hist in enumerate(history):\n\n    plt.subplot(2,2,i+1)\n    plt.plot(np.arange(EPOCHS),hist.history['loss'],label='train loss')\n    plt.plot(np.arange(EPOCHS),hist.history['val_loss'],label='validation loss')\n    plt.gca().title.set_text(f'Fold {i+1} loss curve')\n    plt.legend()","ec63482b":"submission = pd.read_csv('\/kaggle\/input\/contradictory-my-dear-watson\/sample_submission.csv')\nsubmission['prediction'] = np.argmax(pred_test,axis=1)\nsubmission.head()","1ccec00c":"submission.to_csv('submission.csv',index=False)","66229949":"Now we'll load the spellchecker. The default list is incomplete so we'll load a dictionary from a separate text file from https:\/\/github.com\/dwyl\/english-words","01f55799":"Synonym substitution is less likely to negate the meaning: negation is more likely with the contextual insertion as there the completion will sound logical, but the negative of the statement could be a completely logical completion. Here, we are more likely to get nonsense though, as the synonym is blindly selected and doesn't take into account different usage of the same word.\n\nThe most striking example I found was when 'he' was substituted for 'atomic number 2', having interpreted 'he' as helium! \n\nHowever, we'll press on. After all, machine learning is more of an art than a science!","c52165a5":"There's a number of different things we can do - insert or substitute words based on contextual embeddings, replace by synonyms, etc. However we have to be careful not to change the meaning of the sentence too much. Substitution based on contextual embeddings *could* give a sentence with a similar meaning, but could also change the meaning completely, especially if the word being substituted is integral to the meaning of the sentence. \n\nThe two types of augmentation that are likely to not change the meaning too much are synonym substitution and contextual insertion. Let's take a look at it in action.","7a2683a5":"The english text contains some errors. We'll see how they came about, and try to correct them.","07f20906":"**Translation augmentation**\n\nOne way we can augment the data is by translating the premise-hypothesis pairs into a different language, following JohnM's notebook.","d90f4981":"# Train using TPU","5d823f7c":"Set up TPUs:","6c3b664f":"**Synonym Augmentation**\n\nWe could also make new samples by swapping out words for synonyms, where synonymous words have been learned by some selected language model. We'll use the nlpaug library to do this.","4a7882bc":"After searching for mistakes of the kind we fixed in the 'premise', it looks like we don't get any errors of the form we corrected earlier. There is a small correction worth making for the hypotheses though: 'Ile de Re' is recorded as 'Ile de R' in the hypotheses where the isle is mentioned.","765b5653":"# Evaluation","4bc059d5":"Here we'll just be working with the english entries. We could also do this for the non-english entries after translating.","15c71195":"Replacing the ?? with an 'e' fixes most of these, there are just 9 corrections left: rhone (occurring three times), ataturk (occurring twice), madrileno (occurring twice), alacahoyuk and alcudia. We also see why these mistakes appeared - all of these should be accented. Most of these are the French '\u00e9', but we also should have 'Rh\u00f4ne', 'Atat\u00fcrk', 'Madrile\u00f1o', 'Alacah\u00f6y\u00fck' and 'Alc\u00fadia'. ","7a4d95f0":"How about the hypotheses?","f15d8e68":"Define variables:","957cf6ba":"# Data cleanup","7ca13b80":"First we need to download and import the necessary libraries, and the datasets.","f9210784":"# Data Augmentation","26a2d6ce":"Convert to tf.data.Dataset","f91c678e":"Looking through, we see that the marked mistakes are mostly either an actual word followed by a question mark, proper nouns, acronyms or words joined together. Most of these we are fine to leave as is. Only the words joined together might be worth correcting, but after tokenisation we hope that the meaning is mostly captured there. \n\nRegarding spelling errors, I've only spotted one so far: in index 10307, we have 'Behind the cathedral, croseover the Rue de la Republique to the 15th-century Eglise Saint-Maclou, the richest example of Flam\u00adboy\u00adant Gothic in the country.', where 'croseover' should be 'cross over', but that's not to say there aren't more errors.\n\nSo only the mistakes identified should change the meaning.\nFrom here, we just need to correct mistakes of the first kind:","2b6b7d7d":"It looks as though most of these have the same meaning, but a couple have an opposite meaning, and some might not make sense. Additionally the tokens can be split introducing a text error. ","07014118":"Train the model","14fc1ad6":"Skip loading datasets as we already have the ones we want.\n\nSo next we encode the training data:","af839dbd":"Insertion\n\nThere's a large number of models that nlpaug can use for contextual insertion: BERT, DistilBERT, RoBERTa and XLNet and within these models you may choose cased or uncased, the size of the model, etc.","8136f674":"And now for corrections of the second kind","72ddb312":"# Prediction","0434a925":"**Cleaning the test set**","bc62a145":"By looking through the list, we see one source of misspellings is when we have a double question mark, which we will see comes from accented characters. Another source is a '?\\xad' (which specifies a soft hyphen).","5a153e87":"Cool, so that's english. I wonder what the other languages are like regarding the two main errors identified?\nIt turns out that after checking the other languages, we don't get the same kinds of mistakes.\nLet's save our cleaned dataframes.","57ec8806":"Finally, we drop the misspelled columns and update the training frame with the cleaned data.","4a955fdc":"We'll follow Shahules' kernel.","c9e77eba":"And then we update the dataframe","6b39e3fa":"Again, some typos can be spotted, like 'availalbe' at id 11997 and 'asssess'. We'll hope that whatever encoding is being used will not get too tripped up by these. Also by taking len gives 636 mistakes, much shorter than premise.","7c6f2784":"One last thing we can do is remove brackets where they occur, noting that the meaning doesn't change if they are taken out, and remove the &amp from the premise and replace with the word 'and'.","232b9143":"Synonym","5b2d7a7e":"Import libraries:","aa50720d":"We want to check for misspelled words, but first we split on punctuation to get just the words back. We also remove things like numbers and dollar signs as things like $10 will be flagged as misspelled. Additionally, we remove the square brackets and apostrophes as this makes processing the words into the spellchecker easier.","93a2c674":"Following Shahules' kernel","1d3fc64a":"# K-fold validation","cf93345e":"There are not too many of these, and we can fix them individually. Let's see what is left after removing these guys.","18d027e7":"We can look through misspellings once the common errors are removed.","ea7d62e0":"It looks like somehow one of the double question marks was missed, in index 7534, 'Cham??bord'! Fortunately, it seems that we can simply remove the question marks, as with all the other question marks. (The only iffy one is 'Arab?', in index 1449, which should be Punta Arab\u00ed, but it looks like the mistake has been carried over into the test, so we won't bother.)"}}