{"cell_type":{"c0b55faa":"code","c129f31f":"code","bc42a11a":"code","fe7b194b":"code","1f96be39":"code","653d0825":"code","373e50fb":"markdown"},"source":{"c0b55faa":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.tree import DecisionTreeClassifier\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c129f31f":"train_raw = pd.read_csv('..\/input\/urbanchanllange\/train.csv')\ntest_raw = pd.read_csv('..\/input\/urbanchanllange\/test.csv')\n\ntrain = train_raw.loc[:,train_raw.columns != 'Id']\nX_train = train.loc[:,train.columns != 'CLASS']\nY_train = train[\"CLASS\"]\n\nX_test = test_raw.loc[:,test_raw.columns != 'Id']\nX_id = test_raw[\"Id\"]\nprint(train.head())","bc42a11a":"def sortnumber(data):\n    df = data.copy()\n    temp = df[['C1', 'C2', 'C3', 'C4', 'C5']]\n    temp.values.sort()\n    df[['N1', 'N2', 'N3', 'N4', 'N5']] = temp\n    df = df[['N1', 'N2', 'N3', 'N4', 'N5', 'S1', 'S2', 'S3', 'S4', 'S5']]\n    return df\n\ndef diff_suit_count(df):\n    temp = df[['S1', 'S2', 'S3', 'S4', 'S5']]\n    df['DS'] = temp.apply(lambda i: len(np.unique(i)) , axis=1)\n    # unique \ud568\uc218\ub294 \uc11c\ub85c \ub2e4\ub978 \uc22b\uc790\ub97c \ub9ac\uc2a4\ud2b8\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4. \ub78c\ub2e4\uc2dd\uc744 \ud589\uc5d0 \uc801\uc6a9\ud558\uc600\uc73c\ubbc0\ub85c \ud55c \uce74\ub4dc \ud328\uc5d0\uc11c \uc11c\ub85c \ub2e4\ub978 \ubb34\ub2ac\uac00 \uba87 \uac1c\uc778\uc9c0 \uc54c\uc544\ub0c5\ub2c8\ub2e4.\n\ndef sub(df):\n    df['sub54'] = df['N5'] - df['N4']\n    df['sub43'] = df['N4'] - df['N3']\n    df['sub32'] = df['N3'] - df['N2']\n    df['sub21'] = df['N2'] - df['N1']","fe7b194b":"X_train_pre = sortnumber(X_train)\ndiff_suit_count(X_train_pre)\nsub(X_train_pre)\n\nX_test_pre = sortnumber(X_test)\ndiff_suit_count(X_test_pre)\nsub(X_test_pre)\n\nprint(X_train_pre.head())\nprint(X_test_pre.head())","1f96be39":"model = DecisionTreeClassifier(random_state=3, criterion='gini')\nmodel.fit(X_train_pre, Y_train)\n\n# \uc5b4\ub5a4 \uc77c\uc815\ud55c \uaddc\uce59\uc744 \uc815\uc758\ud558\uae30 \uc26c\uc6b4 \ub370\uc774\ud130\uc774\uae30 \ub54c\ubb38\uc5d0 \uacb0\uc815\ud2b8\ub9ac \ubd84\ub958\uae30\uac00 \uad49\uc7a5\ud788 \ud6a8\uc728\uc801\uc73c\ub85c \uc791\ub3d9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","653d0825":"y_pred = model.predict(X_test_pre)\n\npred = y_pred.flatten()\npred_list=list(pred)\nresult = X_id.to_frame()\nresult = result.assign(CLASS=pred_list)\n\nresult.to_csv(\"result2.csv\", index=False)\nprint(result)","373e50fb":"### \ub370\uc774\ud130 \uc804\ucc98\ub9ac : \ud6a8\uc728\uc801\uc73c\ub85c \uce74\ub4dc\ud328\ub97c \uc608\uce21\ud558\uae30 \uc704\ud574 \ubd84\ub958\uc5d0 \uc9c1\uc811\uc801\uc73c\ub85c \uc4f0\uc774\ub294 \ud2b9\uc9d5\uc744 \uc804\ucc98\ub9ac\ub97c \ud1b5\ud574 \ud45c\ud604\ud569\ub2c8\ub2e4  \n* 1. Sort number  \n\uce74\ub4dc\uc758 \uc22b\uc790\ub97c \uc758\ubbf8\ud558\ub294 Cn \uc5f4\uc744 \uac01\uac01 \uc0b4\ud3b4\ubcf4\uba74, \uce74\ub4dc \ubc88\ud638\uc758 \uc21c\uc11c\uc640\ub294 \uc0c1\uad00\uc5c6\uc774\n\ubb34\uc791\uc704\ub85c \ub098\uc5f4\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uce74\ub4dc\ud328\ub97c \uc608\uce21\ud558\ub294 \uac83\uc740 \uce74\ub4dc\uc758 \uc21c\uc11c\uc640 \uc5f0\uad00\uc774 \uc788\uae30 \ub54c\ubb38\uc5d0,\n\uc774 \uc0c1\ud0dc\ub85c \ud559\uc2b5 \ud558\ub294 \uac83\uc740 \ube44\ud6a8\uc728\uc801\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c sortnumber \ud568\uc218\ub97c \ud1b5\ud574, \n\uce74\ub4dc\uc758 \ubc88\ud638\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub9ac\ud55c \uac83\uc744 \uc0c8\ub85c\uc6b4 feature\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n* 2. diff_suit_count  \nflush \ub4f1\uc758 \uaddc\uce59\uc740 \ubaa8\uc591\uc758 \uc77c\uce58\ub97c \ud655\uc778\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uadf8\ub300\ub85c \ud559\uc2b5 \uc2dc\ud0a4\uba74 \ud2b9\uc815 \uc5f0\uc0b0\uc73c\ub85c \uce74\ub4dc \ubaa8\uc591\ub4e4\uc758 \uc77c\uce58\ub97c \ud655\uc778\ud574\uc57c \ud558\ub294\ub370, \uc774\ub294 \ub290\ub9ac\uace0 \ubd80\uc815\ud655\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \uce74\ub4dc\ub4e4\uc774 \uac01\uac01 \uc5b4\ub290 \uc815\ub3c4\ub85c \ubaa8\uc591\uc774 \uc77c\uce58\ud558\ub294 \uc9c0\ub97c \uc0b4\ud3b4\ubcf4\uc544\uc57c \ud569\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 \uc11c\ub85c \ub2e4\ub978 \ubaa8\uc591\uc774 \uba87 \uac1c\ub098 \uc788\ub294\uc9c0\ub97c \ud2b9\uc9d5\uc73c\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574, \ubd84\ub958\uae30\uc5d0\uac8c \uce74\ub4dc\ub4e4\uc758 \ubaa8\uc591\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uba3c\uc800 \uc54c\ub824\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\n* 3. sub  \n\uc2e4\uc81c \ud328\ub97c \uacb0\uc815\ud558\ub294 \uac83\uc740, \uce74\ub4dc\uc758 \uc808\ub300 \uac12\uc774 \uc544\ub2c8\ub77c \uce74\ub4dc\ub4e4\uc758 \uc5f0\uc18d\uc131\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc815\ub82c\uc774 \uc644\ub8cc\ub41c \ub370\uc774\ud130\uc5d0\uc11c \uc21c\uc11c\ub300\ub85c \ube7c \uc900 \uac83\uc744 \ud2b9\uc9d5\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc2e4\uc9c8\uc801\uc73c\ub85c \uac00\uc7a5 \ud6a8\uc728\uc801\uc778 \uce74\ub4dc \uc608\uce21\uc744 \uac00\ub2a5\ud558\uac8c \ud569\ub2c8\ub2e4. \uc989 1\ubc88 \ud56d\ubaa9\uc758 \uc804\ucc98\ub9ac\ub294 \uc774\ub97c \uc704\ud55c \uc0ac\uc804 \uc791\uc5c5\uc774\ub77c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}}