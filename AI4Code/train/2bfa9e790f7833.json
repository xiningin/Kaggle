{"cell_type":{"366b58a0":"code","b1933756":"code","260c40c6":"code","d2c2bb49":"code","7a07b213":"code","04a81b30":"code","db194ef9":"code","24874efe":"code","01b053f0":"code","c348de3a":"code","14f2da61":"code","ce97b1cb":"code","e3570d9a":"code","21c12db3":"code","6fa302c3":"code","52a9888d":"code","90483478":"code","7ece3bbe":"code","e79850f9":"code","36a00112":"code","70239fd2":"code","b38422f5":"code","41c5d573":"code","1ff772fd":"code","5cc6757b":"code","01c183ad":"code","132d319d":"code","ac4ee96c":"code","fcbd6f2a":"code","0a038f89":"code","6d841cf2":"code","49e299f1":"code","65a0b92a":"code","1fd83ba8":"code","fadd3143":"code","1369cf55":"code","230f7306":"code","15af0a92":"code","261371b8":"code","f8ef3443":"code","e0d04149":"code","074e3d8f":"code","1a96bad9":"code","81506b6f":"code","9ec20993":"code","9332a453":"code","6522057b":"code","74694ee6":"code","cbe6834d":"code","844b8843":"code","0d9c0a29":"markdown","9d0be58b":"markdown","5b5f637f":"markdown","3c49cf3f":"markdown","9e882cfd":"markdown","bb1d99c2":"markdown","8bc4bb28":"markdown","8fa38780":"markdown","a70b7140":"markdown","ad289614":"markdown","3482084b":"markdown","8132096c":"markdown","4dc4036b":"markdown","d85c39e2":"markdown","3baf9ab1":"markdown","0cbdc351":"markdown","f4a75b1b":"markdown","830188e1":"markdown","370c01ed":"markdown","e83acf7d":"markdown","ba3ad325":"markdown","778138ea":"markdown","5ab31b30":"markdown","f6fbce86":"markdown","7a1f58f5":"markdown","b2d6fc3f":"markdown","7d6cd311":"markdown","1409c73d":"markdown","04716eab":"markdown","a93f537b":"markdown","4307a274":"markdown","e65a0441":"markdown","7384b4b9":"markdown","23cd5ec3":"markdown","111d88c0":"markdown","4e6ff040":"markdown","337bf625":"markdown","e6e54774":"markdown","a6e3f659":"markdown","5170ae14":"markdown","02da8ef8":"markdown","bc85b220":"markdown","b81e569a":"markdown","ce075469":"markdown","5d6c6301":"markdown","d7a1a4a1":"markdown","315162ab":"markdown","4f9f9bfd":"markdown","47956c9c":"markdown","15311547":"markdown","26e9811f":"markdown"},"source":{"366b58a0":"!pip install -U imbalanced-learn\n!pip install pytorch_tabular[all]\n!pip install pycaret[full]==2.3.2\n!pip install lofo-importance\n#!pip install optuna","b1933756":"!pip install pandas --upgrade","260c40c6":"!pip install xlrd","d2c2bb49":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\n# veri manip\u00fclasyonu\nimport pandas as pd\nimport numpy as np\n\n# modelleme\nimport pycaret.classification as pyc\nfrom sklearn.metrics import f1_score, fbeta_score, roc_auc_score, auc\nfrom pycaret.utils import check_metric\nimport xgboost as xgb\nimport lightgbm as lgb\nimport catboost as catb\nimport pytorch_tabular as pt\n\n# g\u00f6rselle\u015ftirme\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n# ek paketler\nimport lofo as lf\nfrom tqdm import tqdm\n\n# k\u00fct\u00fcphane ayarlar\u0131\n# pandas ayarlar\u0131\npd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_colwidth\", None)\n\n# matplotlib ayarlar\u0131\nfont = {'family' : 'normal',\n        'size'   : 13}\nplt.rc('font', **font)\nparams = {'axes.labelsize': 16,\n          'axes.titlesize': 16,\n         \"figure.figsize\" : [16,9]}\nplt.rcParams.update(params)","7a07b213":"def sales_rec_feat(x):\n    \n    if x > 2500:\n        return \"higher_recency\"\n    elif (1300 < x) & (x <= 2500):\n        return \"high_recency\"\n    elif (500 < x) & (x <= 1300):\n        return \"medium_receny\"\n    elif (110 < x) & (x <= 500):\n        return \"low_recency\"\n    else:\n        return \"lowest_recency\"\n\n\ndef salesfile_count_feat_arrange(x):\n    \n    if x > 5:\n        return 5\n    else:\n        return x\n\ndef service_vc_feat_arrange(x):\n    \n    if x > 3:\n        return 3\n    else:\n        return x\n\n\ndef rec_feat_arrange(x):\n\n    if x < 0:\n        return 0\n    else:\n        return x\n\n\ndef rec_feat(x):\n    \n    if x > 2300:\n        return \"higher_recency\"\n    elif (1200 < x) & (x <= 2300):\n        return \"high_recency\"\n    elif (380 < x) & (x <= 1200):\n        return \"medium_receny\"\n    elif (50 < x) & (x <= 380):\n        return \"low_recency\"\n    else:\n        return \"lowest_recency\"\n\ndef maintenance_rec_feat_arrange(x):\n    \n    if x < 0:\n        return 0\n    else:\n        return x\n\n\ndef maintenance_rec_feat(x):\n    \n    if x > 2300:\n        return \"higher_recency\"\n    elif (1500 < x) & (x <= 2300):\n        return \"high_recency\"\n    elif (600 < x) & (x <= 1500):\n        return \"medium_receny\"\n    elif (150 < x) & (x <= 600):\n        return \"low_recency\"\n    else:\n        return \"lowest_recency\"\n\n\ndef service_rec_feat_arrange(x):\n    \n    if x < 0:\n        return 0\n    else:\n        return x\n\ndef service_rec_feat(x):\n    \n    if x > 2600:\n        return \"higher_recency\"\n    elif (1600 < x) & (x <= 2600):\n        return \"high_recency\"\n    elif (600 < x) & (x <= 1600):\n        return \"medium_receny\"\n    elif (150 < x) & (x <= 600):\n        return \"low_recency\"\n    else:\n        return \"lowest_recency\"\n\ndef first_hand_vehicle_age_feat(x):\n    \n    if x > 9:\n        return \"old\"\n    elif (3 < x) & (x <=9):\n        return \"middle\"\n    else:\n        return \"brand_new\"","04a81b30":"def create_new_features(data):\n\n    data[\"SERVICE_VEHICLE_COUNT\"]     = data[\"SERVICE_VEHICLE_COUNT\"].apply(service_vc_feat_arrange)\n    data[\"SALESFILE_COUNT\"]           = data[\"SALESFILE_COUNT\"].apply(salesfile_count_feat_arrange)\n    data[\"SALES_RECENY\"]              = data[\"SALES_RECENY\"].apply(sales_rec_feat)\n\n    data[\"RECENCY\"]     = data[\"RECENCY\"].apply(rec_feat_arrange)\n    data[\"RECENCY_CAT\"] = data[\"RECENCY\"].apply(rec_feat)\n    data = data.drop([\"RECENCY\"], axis=1)\n\n    data[\"MAINTENANCE_RECENCY\"] = data[\"MAINTENANCE_RECENCY\"].apply(service_rec_feat_arrange)\n    data[\"MAINTENANCE_RECENCY_CAT\"] = data[\"MAINTENANCE_RECENCY\"].apply(service_rec_feat)\n    data = data.drop([\"MAINTENANCE_RECENCY\"], axis=1)\n\n    data[\"SERVICE_RECENCY\"] = data[\"SERVICE_RECENCY\"].apply(service_rec_feat_arrange)\n    data[\"SERVICE_RECENCY_CAT\"] = data[\"SERVICE_RECENCY\"].apply(service_rec_feat)\n    \n    data = data.drop([\"SERVICE_RECENCY\"], axis=1)\n    data[\"FIRST_HAND_VEHICLE_AGE_CAT\"] = data[\"FIRST_HAND_VEHICLE_AGE\"].apply(first_hand_vehicle_age_feat)\n    \n    data = data.drop([\"FIRST_HAND_VEHICLE_AGE\"], axis=1)\n\n    return data","db194ef9":"clean_train_df = pd.read_csv(\"..\/input\/train-test\/clean_train_df.csv\")\nclean_test_df  = pd.read_csv(\"..\/input\/train-test\/clean_test_df.csv\")","24874efe":"clean_train_df.head()","01b053f0":"clean_test_df.head()","c348de3a":"clean_train_df.info()","14f2da61":"clean_test_df.info()","ce97b1cb":"print(\"etiket da\u011f\u0131l\u0131mlar\u0131: \\n\")\nprint(f\"{clean_train_df.y.value_counts(normalize=True)}\")","e3570d9a":"mts = pd.read_csv(\"..\/input\/external-data\/il_bazinda_aylik_mtv.csv\")\npopulation = pd.read_excel(\"..\/input\/external-data\/population.xls\")\n\nmts.columns = [\"FK_ADDRESS_COMMUNICATION_CITY\", \"CITY_WEHICLE_COUNT\", \"YEAR\", \"MONTH\"]\nmts['MONTH'] = mts['MONTH'].astype(int)\nmtsx = mts[(mts[\"MONTH\"] >= 3) & (mts[\"MONTH\"] <= 5) & (mts[\"YEAR\"] == 2021)]\nmtsx = mtsx.groupby(\"FK_ADDRESS_COMMUNICATION_CITY\").agg({\"CITY_WEHICLE_COUNT\":\"sum\"}).reset_index()\n\nmtsx_pop = mtsx.merge(\n    population,\n    left_on = \"FK_ADDRESS_COMMUNICATION_CITY\",\n    right_on = \"CITY\"\n)\n\nmtsx_pop[\"WEHICLE_BY_POPULATION\"] = mtsx_pop.CITY_WEHICLE_COUNT \/ mtsx_pop.POPULATION\n\nclean_train_df = clean_train_df.merge(\n    mtsx_pop[[\"FK_ADDRESS_COMMUNICATION_CITY\", \"WEHICLE_BY_POPULATION\"]],\n    on = \"FK_ADDRESS_COMMUNICATION_CITY\",\n    how = \"left\"\n)","21c12db3":"mtsx = mts[(mts[\"MONTH\"] >= 3) & (mts[\"MONTH\"] <= 5) & (mts[\"YEAR\"] == 2021)]\n\nmtsx = mts[(mts[\"MONTH\"] > 5) & (mts[\"YEAR\"] == 2021)]\nmtsx = mtsx.groupby(\"FK_ADDRESS_COMMUNICATION_CITY\").agg({\"CITY_WEHICLE_COUNT\":\"sum\"}).reset_index()\nmtsx_pop = mtsx.merge(\n    population,\n    left_on = \"FK_ADDRESS_COMMUNICATION_CITY\",\n    right_on = \"CITY\"\n)\nmtsx_pop[\"WEHICLE_BY_POPULATION\"] = mtsx_pop.CITY_WEHICLE_COUNT \/ mtsx_pop.POPULATION\n\nclean_test_df = clean_test_df.merge(\n    mtsx_pop[[\"FK_ADDRESS_COMMUNICATION_CITY\", \"WEHICLE_BY_POPULATION\"]],\n    on = \"FK_ADDRESS_COMMUNICATION_CITY\",\n    how = \"left\"\n)","6fa302c3":"px.box(data_frame=clean_train_df, x=\"y\", y=\"SALES_RECENY\", template=\"plotly_dark\", color=\"y\", title=\"SALES_RECENCY vs y\")","52a9888d":"px.box(data_frame=clean_train_df, x=\"y\", y=\"RECENCY\", template=\"plotly_dark\", color=\"y\", title=\"RECENCY vs y\")","90483478":"px.box(data_frame=clean_train_df, x=\"y\", y=\"MAINTENANCE_RECENCY\", template=\"plotly_dark\", color=\"y\", title=\"MAINTENANCE_RECENCY vs y\")","7ece3bbe":"px.box(data_frame=clean_train_df, x=\"y\", y=\"SERVICE_RECENCY\", template=\"plotly_dark\", color=\"y\", title=\"SERVICE_RECENCY vs y\")","e79850f9":"px.box(data_frame=clean_train_df, x=\"y\", y=\"SERVICE_VEHICLE_COUNT\", template=\"plotly_dark\", color=\"y\", title=\"SERVICE_VEHICLE_COUNT vs y\")","36a00112":"px.box(data_frame=clean_train_df, x=\"y\", y=\"SALESFILE_COUNT\", template=\"plotly_dark\", color=\"y\", title=\"SALESFILE_COUNT vs y\")","70239fd2":"px.box(data_frame=clean_train_df, x=\"y\", y=\"FIRST_HAND_VEHICLE_AGE\", template=\"plotly_dark\", color=\"y\", title=\"FIRST_HAND_VEHICLE_AGE vs y\")","b38422f5":"clean_train_df = create_new_features(clean_train_df)\nclean_test_df  = create_new_features(clean_test_df)","41c5d573":"pd.crosstab(clean_train_df['RECENCY_CAT'], clean_train_df['y'], dropna=False).plot.bar(stacked=True)","1ff772fd":"pd.crosstab(clean_train_df['OCCUPATION'], clean_train_df['y'], dropna=False).plot.bar(stacked=True)","5cc6757b":"df = clean_train_df.copy()\n\nlabelss=[\"0\",\"1\",\"2\",\"3+\"]\nz=[\"SALES_RECENY\", 'RECENCY_CAT','MAINTENANCE_RECENCY_CAT','SERVICE_RECENCY_CAT']\n\nfor i in z:\n    dc=df.copy()\n    a=dc[[\"y\",str(i)]].value_counts()\n    \n    a=pd.DataFrame(a).reset_index()\n    a.columns = ['y',str(i),'Count']\n    a=a[a[\"y\"]==1]\n\n\n    b=dc[[str(i)]].value_counts()\n    b=pd.DataFrame(b).reset_index()\n    b.columns = [str(i),'Count']\n    b=b.sort_values(by=str(i),ascending=True)\n    c=dc[\"y\"].groupby(dc[str(i)]).count().to_frame()\n    c=c.reset_index()\n\n    ab=pd.merge(a, c, how='inner', on=[str(i)])\n    ab['Percentage']=ab[\"Count\"]\/ab[\"y_y\"]\n    ab=ab.sort_values(by=str(i),ascending=True)\n    \n    fig, ax = plt.subplots() # Create the figure and axes object\n    ax2 = ax.twinx()\n    ax.bar(b[str(i)], b['Count']) \n    # Plot the second x and y axes. By secondary_y = True a second y-axis is requested:\n    ax2.plot(ab[str(i)],ab['Percentage'], color = 'r',marker='o')\n    ax.set_xlabel(str(i),fontsize=18)\n    ax.set_ylabel('Count',fontsize=18)\n    ax2.set_ylabel('Percentage',fontsize=18)\n    plt.setp(ax.get_xticklabels(), rotation=30, horizontalalignment='right')","01c183ad":"target = \"y\"\nignored_columns = ['BASE_CUSTOMER_ID', 'CUT_OF_DATE', 'MONTH']\ncategorical_columns = ['GENDER', 'FK_ADDRESS_COMMUNICATION_CITY', 'OCCUPATION', 'MARITAL_STATUS', \n                       \"LAST_GEAR_BOX_TYPE\", \"LAST_MOTOR_GAS_TYPE\", \"LAST_STATUS\",\n                       \"MAINTENANCE_RECENCY_CAT\", \"SERVICE_RECENCY_CAT\", \"FIRST_HAND_VEHICLE_AGE_CAT\",\n                       \"SERVICE_VEHICLE_COUNT\", \"SALESFILE_COUNT\", \"SALES_RECENY\", \"RECENCY_CAT\"]\n\nnumerical_columns = []\n\nfor col in clean_train_df.columns.tolist():\n    if col not in ignored_columns + [target] + categorical_columns:\n        numerical_columns.append(col)","132d319d":"from sklearn.model_selection import train_test_split\nfrom yellowbrick.model_selection import FeatureImportances\n\n# verinin rassal olarak yeniden kar\u0131lmas\u0131\nclean_train_df = clean_train_df.sample(frac=1)\n\n# e\u011fitim ve ge\u00e7erlilik olarak b\u00f6l\u00fcnmesi\ntr_df, val_df = train_test_split(clean_train_df, test_size=0.2, shuffle=True)\n\n# veri \u00e7er\u00e7evelerinin boyutlar\u0131\nprint(\"e\u011fitim verisi boyutu: \\n\")\nprint(tr_df.shape)\nprint(\"ge\u00e7erlilik verisi boyutu: \\n\")\nprint(val_df.shape)\n\n# etiketlerin da\u011f\u0131l\u0131mlar\u0131\nprint(\"e\u011fitim verisinde etiketlerin da\u011f\u0131l\u0131m\u0131: \\n\")\nprint(tr_df.y.value_counts(normalize=True))\nprint(\"ge\u00e7erlilik verisinde etiketlerin da\u011f\u0131l\u0131m\u0131: \\n\")\nprint(val_df.y.value_counts(normalize=True))","ac4ee96c":"prep1 = pyc.setup(\n    data = tr_df,\n    target = target,\n    test_data = val_df,\n    ignore_features = ignored_columns,\n    categorical_features = categorical_columns,\n    numeric_features = numerical_columns,\n    silent = True,\n    verbose = False\n)","fcbd6f2a":"X_train  = pyc.get_config(\"X_train\")\ny_train  = pyc.get_config(\"y_train\")\nX_val = pyc.get_config(\"X_test\")\ny_val = pyc.get_config(\"y_test\")","0a038f89":"clean_test_df = clean_test_df.rename(columns={\"Expected\":\"y\"})\nclean_test_df[\"y\"] = 0\n\nprep2 = pyc.setup(\n    data = tr_df,\n    target = target,\n    test_data = clean_test_df,\n    ignore_features = ignored_columns,\n    categorical_features = categorical_columns,\n    numeric_features = numerical_columns,\n    silent = True,\n    verbose = False\n)","6d841cf2":"X_test = pyc.get_config(\"X_test\")\ny_test = pyc.get_config(\"y_test\")","49e299f1":"from imblearn.under_sampling import RandomUnderSampler\nfrom collections import Counter\n\n# undersampling i\u015flemi\nrus = RandomUnderSampler(sampling_strategy=0.33)\nX_train_under, y_train_under = rus.fit_resample(X_train, y_train)\n\n# i\u015flem sonras\u0131 veri da\u011f\u0131l\u0131m\u0131\nprint(sorted(Counter(y_train_under).items()))","65a0b92a":"#GPU_ENABLED = True\n#\n#def train_model_for_study(X_train, y_train, X_val, y_val, model):\n#\n#    model.fit(\n#        X_train, \n#        y_train,\n#        early_stopping_rounds=100,\n#        eval_set=[(X_val, y_val)], \n#        verbose=False\n#    )\n#\n#    yhat = model.predict(X_val)\n#    yhat_prob = model.predict_proba(X_val)\n#\n#    return metrics.roc_auc_score(y_val, yhat_prob[:, 1])\n#\n#def objective_xgb(trial):\n#    \n#    param = {\n#                \"n_estimators\" : trial.suggest_int('n_estimators', 0, 1000),\n#                'max_depth':trial.suggest_int('max_depth', 2, 25),\n#                'reg_alpha':trial.suggest_int('reg_alpha', 0, 5),\n#                'reg_lambda':trial.suggest_int('reg_lambda', 0, 5),\n#                'min_child_weight':trial.suggest_int('min_child_weight', 0, 5),\n#                'gamma':trial.suggest_int('gamma', 0, 5),\n#                'learning_rate':trial.suggest_loguniform('learning_rate',0.005,0.5),\n#                'colsample_bytree':trial.suggest_discrete_uniform('colsample_bytree',0.1,1,0.01),\n#                'nthread' : -1\n#            }\n#\n#    if GPU_ENABLED:\n#        param[\"tree_method\"] = \"gpu_hist\"\n#        param[\"predictor\"] = \"gpu_predictor\"\n#        \n#    model = xgb.XGBClassifier(\n#      objective='binary:logistic',\n#      random_state=42,\n#      **param\n#    )\n#    \n#    return train_model_for_study(X_train_under, y_train_under, X_val, y_val, model)\n\n#study_xgb = optuna.create_study(direction=\"maximize\")\n#study_xgb.optimize(objective_xgb, n_trials=100)","1fd83ba8":"best_params_xgb = {'colsample_bytree': 0.89,\n                   'gamma': 1,\n                   'learning_rate': 0.029398576813970897,\n                   'max_depth': 4,\n                   'min_child_weight': 1,\n                   'n_estimators': 486,\n                   'reg_alpha': 0,\n                   'reg_lambda': 2}","fadd3143":"model_xgb = xgb.XGBClassifier(objective=\"binary:logistic\",\n                      random_state=42,\n                      tree_method = \"gpu_hist\",\n                      predictor=\"gpu_predictor\",\n                      **best_params_xgb\n                      )","1369cf55":"model_xgb.fit(X_train_under, y_train_under, eval_set=[(X_val, y_val)], early_stopping_rounds=50)","230f7306":"viz = FeatureImportances(model_xgb, topn=10);\nviz.fit(X_train_under, y_train_under);","15af0a92":"#def objective_lgb(trial):\n#  \n#    param = {\n#        'metric': 'AUC',\n#        'boosting_type': 'gbdt', # trial.suggest_categorical('boosting', ['gbdt', 'goss', \"dart\"]),\n#        'learning_rate': trial.suggest_loguniform('learning_rate',0.05, 1.0),\n#        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 10.0),\n#        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-8, 10.0),\n#        'num_leaves': trial.suggest_int('num_leaves', 7, 4095),\n#        'max_depth': trial.suggest_int('max_depth', 2, 63),\n#        'feature_fraction': trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n#        #'scale_pos_weight': trial.suggest_int('scale_pos_weight', 1, 5000),\n#        'bagging_fraction': trial.suggest_uniform('bagging_fraction', 0.4, 1.0),\n#        'pos_bagging_fraction': trial.suggest_uniform('pos_bagging_fraction', 0.4, 1.0),\n#        #'subsample': trial.suggest_uniform('subsample', 0.4, 1.0),\n#        #'colsample_bytree': trial.suggest_uniform('colsample_bytree', 0.4, 1.0),\n#        #'bagging_freq': trial.suggest_int('bagging_freq', 1, 7),\n#        'min_child_samples': trial.suggest_int('min_child_samples', 5, 100),\n#        'min_child_weight': trial.suggest_int('min_child_weight', 0.01, 155)\n#    }\n#\n#    if GPU_ENABLED:\n#        param[\"device\"] = \"gpu\"\n#        param['gpu_platform_id'] = 0\n#        param['gpu_device_id']   = 0\n#  \n#        \n#    model = lgb.LGBMClassifier(\n#      random_state=42,\n#      **param\n#    )\n#    \n#    return train_model_for_study(X_train_under, y_train_under, X_val, y_val, model)\n\n#study_lgb = optuna.create_study(direction=\"maximize\")\n#study_lgb.optimize(objective_lgb, n_trials=50)","261371b8":"best_params_lgb = {'bagging_fraction': 0.5257348706984191,\n                   'feature_fraction': 0.8922941702104955,\n                   'lambda_l1': 3.025744503657221e-06,\n                   'lambda_l2': 0.19821187917239577,\n                   'learning_rate': 0.060610450450568336,\n                   'max_depth': 47,\n                   'min_child_samples': 96,\n                   'min_child_weight': 34,\n                   'num_leaves': 2278,\n                   'pos_bagging_fraction': 0.8728030144957656}","f8ef3443":"model_lgb = lgb.LGBMClassifier(objective=\"binary\",\n                           metric = 'AUC',\n                      random_state=42,\n                      device = \"gpu\",\n                      gpu_platform_id = 0,\n                      gpu_device_id   = 0,\n                      **best_params_lgb\n                      )","e0d04149":"model_lgb.fit(X_train_under, y_train_under, eval_set=[(X_val, y_val)], early_stopping_rounds=50)","074e3d8f":"#def objective_cat(trial):\n#    \n#    param = {\n#        'iterations' : trial.suggest_int('iterations', 50, 300),                         \n#        'depth' : trial.suggest_int('depth', 4, 10),                                       \n#        'learning_rate' : trial.suggest_loguniform('learning_rate', 0.01, 0.3),               \n#        'random_strength' :trial.suggest_int('random_strength', 0, 100),                       \n#        'bagging_temperature' :trial.suggest_loguniform('bagging_temperature', 0.01, 100.00),\n#        'learning_rate' :trial.suggest_loguniform('learning_rate', 1e-3, 1.0),\n#        'subsample': trial.suggest_uniform('subsample',0,1),\n#        'min_data_in_leaf': trial.suggest_int('min_data_in_leaf',1,30),\n#        'leaf_estimation_iterations': trial.suggest_int('leaf_estimation_iterations',1,15),\n#        'od_type': trial.suggest_categorical('od_type', ['IncToDec', 'Iter']),\n#        'bootstrap_type': trial.suggest_categorical('bootstrap_type', ['Poisson'])\n#     }\n#    \n#    if GPU_ENABLED:\n#        param[\"task_type\"] = \"GPU\"\n#        \n#    model = catb.CatBoostClassifier(\n#        loss_function = \"Logloss\",\n#        eval_metric = \"AUC\",\n#        random_seed = 42,\n#        **param\n#  )\n#    \n#    return train_model_for_study(X_train_under, y_train_under, X_val, y_val, model)\n\n#study_cat = optuna.create_study(direction=\"maximize\")\n#study_cat.optimize(objective_cat, n_trials=100)","1a96bad9":"best_params_cat = {'bagging_temperature': 0.6953254566907331,\n                   'bootstrap_type': 'Poisson',\n                   'depth': 5,\n                   'iterations': 168,\n                   'leaf_estimation_iterations': 10,\n                   'learning_rate': 0.18785065756740046,\n                   'min_data_in_leaf': 30,\n                   'od_type': 'Iter',\n                   'random_strength': 0,\n                   'subsample': 0.772483044556735}","81506b6f":"model_cat = catb.CatBoostClassifier(\n      loss_function = \"Logloss\",\n      eval_metric = \"AUC\",\n      random_seed = 42,\n      task_type = \"GPU\",\n      **best_params_cat\n  )","9ec20993":"model_cat.fit(X_train_under, y_train_under, eval_set=[(X_val, y_val)], early_stopping_rounds=50)","9332a453":"# xgboost\npredictions_test_xgb = model_xgb.predict_proba(X_test)\nsubmission_xgb = clean_test_df[[\"BASE_CUSTOMER_ID\"]].rename(columns={\"BASE_CUSTOMER_ID\":\"Id\"})\nsubmission_xgb[\"Expected\"] = predictions_test_xgb[:,1]\n\n# lightgbm\npredictions_test_lgb = model_lgb.predict_proba(X_test)\nsubmission_lgb = clean_test_df[[\"BASE_CUSTOMER_ID\"]].rename(columns={\"BASE_CUSTOMER_ID\":\"Id\"})\nsubmission_lgb[\"Expected\"] = predictions_test_lgb[:,1]\n\n# catboost\npredictions_test_cat = model_cat.predict_proba(X_test)\nsubmission_cat = clean_test_df[[\"BASE_CUSTOMER_ID\"]].rename(columns={\"BASE_CUSTOMER_ID\":\"Id\"})\nsubmission_cat[\"Expected\"] = predictions_test_cat[:,1]","6522057b":"blended_submission = clean_test_df[[\"BASE_CUSTOMER_ID\"]].rename(columns={\"BASE_CUSTOMER_ID\":\"Id\"})\n\nxgb_pred = pd.DataFrame()\nxgb_pred[\"Expected\"] = predictions_test_xgb[:,1]\nlgb_pred = pd.DataFrame()\nlgb_pred[\"Expected\"] = predictions_test_lgb[:,1]\ncat_pred = pd.DataFrame()\ncat_pred[\"Expected\"] = predictions_test_cat[:,1]\n\nblended_submission[\"Expected\"] = (lgb_pred[\"Expected\"] * 0.5 + xgb_pred[\"Expected\"] * 0.4 + cat_pred[\"Expected\"] * 0.1)","74694ee6":"blended_submission.head()","cbe6834d":"sub1 = pd.read_csv(\"..\/input\/blended\/last_submission1.csv\")\nsub2 = pd.read_csv(\"..\/input\/blended\/sub2.csv\")\nsub3 = pd.read_csv(\"..\/input\/blended\/sub3.csv\")\n\nblended_submission = clean_test_df[[\"BASE_CUSTOMER_ID\"]].rename(columns={\"BASE_CUSTOMER_ID\":\"Id\"})\n\nblended_submission[\"Expected\"] = (sub1[\"Expected\"] * 0.5 + sub3[\"Expected\"] * 0.3 + sub2[\"Expected\"] * 0.2)\n\nblended_submission.head()","844b8843":"blended_submission.to_csv(\"last_submission2.csv\", index=False)","0d9c0a29":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h1 style=\"font-family:verdana;color:#FF7722;\">\n        1.3 Yard\u0131mc\u0131 Fonksiyonlar <i><\/i>\n    <\/h1>\n<\/div>","9d0be58b":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h1 style=\"font-family:verdana;color:#FF7722;\">\n        1.5 E\u011fitim Verisi i\u00e7in Etiketlerin Olu\u015fturulmas\u0131 <i><\/i>\n    <\/h1>\n<\/div>","5b5f637f":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h1 style=\"font-family:verdana;color:#FF7722;\">\n        1.6 D\u0131\u015f Verilerin Eklenmesi <i><\/i>\n    <\/h1>\n<\/div>","3c49cf3f":"E\u011fitim ve ge\u00e7erlilik verilerinin haz\u0131rlanmas\u0131:","9e882cfd":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h1 style=\"font-family:verdana;color:#FF7722;\">\n        1.2 \u0130htiya\u00e7 Duyulan K\u00fct\u00fcphanelerin \u0130\u00e7eri Al\u0131nmas\u0131 <i><\/i>\n    <\/h1>\n<\/div>","bb1d99c2":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h1 style=\"font-family:verdana;color:#FF7722;\">\n        3.2. Modelleme i\u00e7in Veri Haz\u0131rl\u0131\u011f\u0131<i><\/i>\n    <\/h1>\n<\/div>","8bc4bb28":"Modelleme yakla\u015f\u0131m\u0131m\u0131z\u0131, denemelerimizden yola \u00e7\u0131karak `boosting` y\u00f6ntemler \u00fczerinde yo\u011funla\u015ft\u0131rd\u0131k. Algoritma hiperparamtrelerini `optuna` k\u00fct\u00fcphanesi ile optimize ettik. ","8fa38780":"* Sta\u0131\u015f dosyas\u0131 a\u00e7t\u0131ran m\u00fc\u015fterilerin yak\u0131nl\u0131klar\u0131n\u0131n daha d\u00fc\u015f\u00fck oldu\u011funu g\u00f6zlemliyoruz.","a70b7140":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h2 style=\"font-family:verdana;color:#4863A0;\">\n        3.3.1 xgboost + optuna<i><\/i>\n    <\/h2>\n<\/div>","ad289614":"Modelleme \u00f6ncesi veri haz\u0131rl\u0131\u011f\u0131 s\u00fcrecini h\u0131zland\u0131rmak ad\u0131na `pycaret`'tan `setup` mod\u00fcl\u00fcn\u00fc kullanaca\u011f\u0131z. Modelleme i\u00e7in de, veri haz\u0131rl\u0131\u011f\u0131 i\u00e7in de, canl\u0131ya alma i\u00e7in de i\u015fleri olduk\u00e7a kolayla\u015ft\u0131r\u0131yor. Tabi eksik y\u00f6nleri, ihtiyaca g\u00f6re kullan\u0131c\u0131lar taraf\u0131ndan tamamlanabilir.","3482084b":"<h1 id=\"basics\" style=\"font-family:verdana;color:#3F000F;\"> \n    <center>2. Ke\u015fifsel Veri Analizi ve Baz\u0131 \u0130\u00e7g\u00f6r\u00fcler\n        <a class=\"anchor-link\"><\/a>\n    <\/center>\n<\/h1>","8132096c":"Test verisinin haz\u0131rlanmas\u0131:","4dc4036b":"Model tahminlerinin harmanlanmas\u0131:","d85c39e2":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h1 style=\"font-family:verdana;color:#FF7722;\">\n        3.3 Tahminsel Modeller: xgboost + optuna, lightgbm + optuna, catboost + optuna<i><\/i>\n    <\/h1>\n<\/div>","3baf9ab1":"Test verisi, tahmin edilmesi istenen 166.943 adet tekil m\u00fc\u015fteri baz\u0131nda olu\u015fturulmu\u015ftur.","0cbdc351":"Veri \u00e7er\u00e7evelerinin \u00f6nizlenmesi:","f4a75b1b":"OCCUPATION ve y de\u011fi\u015fkeni:","830188e1":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h2 style=\"font-family:verdana;color:#4863A0;\">\n        3.3.3 catboost + optuna<i><\/i>\n    <\/h2>\n<\/div>","370c01ed":"E\u011fitim verisi i\u00e7in etiketler, e\u011fitim d\u00f6nemi olan 2021-05-31 tarihinden geriye do\u011fru 3 ay giderek, 2021-03-01 tarihi, kesme tarihi (cut of date) olarak al\u0131nm\u0131\u015f; bu d\u00f6nemde sat\u0131\u015f kayd\u0131 olu\u015fturan m\u00fc\u015fteriler 1 olarak etiketlenmi\u015f, kalan m\u00fc\u015fteriler ise 0 olarak etiketlenmi\u015ftir. \u0130\u015f problemi ve ger\u00e7ek d\u00fcnya ba\u011flam\u0131nda d\u00fc\u015f\u00fcn\u00fcld\u00fc\u011f\u00fcnde yakla\u015f\u0131k y\u00fczde 2.8 lik sat\u0131\u015f kayd\u0131 olan m\u00fc\u015fteri davran\u0131\u015f\u0131 modelleme konusunu olu\u015fturmu\u015ftur. G\u00fcncel T\u00dc\u0130K verilerine g\u00f6re de, son bir y\u0131lda yakla\u015f\u0131k 1 milyon ara\u00e7 sat\u0131\u015f\u0131 ger\u00e7ekle\u015fmi\u015ftir. Bu, toplam n\u00fcfusun yakla\u015f\u0131k y\u00fczde 1.2'sine tekab\u00fcl etmektedir. ","e83acf7d":"E\u011fitim verisi, ge\u00e7mi\u015fte kay\u0131tl\u0131 196.553 adet tekil m\u00fc\u015fteri baz\u0131nda olu\u015fturulmu\u015ftur.","ba3ad325":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h1 style=\"font-family:verdana;color:#FF7722;\">\n        2.1 SALES_RECENY, RECENCY, MAINTENANCE_RECENCY, SERVICE_RECENCY ve y<i><\/i>\n    <\/h1>\n<\/div>","778138ea":"Son a\u015famada olu\u015fturdu\u011fumuz submission dosyas\u0131n\u0131 da yine \u00fc\u00e7 farkl\u0131 deneyde olu\u015fturdu\u011fumuz harmanlanm\u0131\u015f tahminlerin tekrar harmanlanmas\u0131 yoluyla olu\u015fturdu\u011fumuzu belirtmi\u015ftik. Son submission dosyas\u0131n\u0131n haz\u0131rlanmas\u0131 ve yazd\u0131r\u0131lmas\u0131:","5ab31b30":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h1 style=\"font-family:verdana;color:#FF7722;\">\n        3.1. De\u011fi\u015fkenlerin Gruplanmas\u0131<i><\/i>\n    <\/h1>\n<\/div>","f6fbce86":"\u0130\u015f probleminin \u00e7\u00f6z\u00fcm\u00fc i\u00e7in, il baz\u0131nda ki\u015fi ba\u015f\u0131na d\u00fc\u015fen ara\u00e7 say\u0131s\u0131 e\u011fitim ve test verilerine eklenmi\u015ftir:","7a1f58f5":"Modelleme \u00f6ncesi de\u011fi\u015fkenleri kategorik, n\u00fcmerik, hedef ve modele girmeyecek de\u011fi\u015fkenler olarak grupluyoruz:","b2d6fc3f":"Algoritma tahminlerinin tek ba\u015f\u0131na yeterli olmad\u0131\u011f\u0131 durumlarda, tek tek algoritmalar\u0131n tahminlerini uygun oranlarda harmanlay\u0131p (blend) birle\u015ftirmek, \u00f6zellikle Kaggle gibi yar\u0131\u015fma ortamlar\u0131nda (ve elbette ger\u00e7ek hayat problemlerinde de) tahmin skorunu y\u00fckseltmek i\u00e7in kabul edilebilir yakla\u015f\u0131mlardan bir tanesidir. Buradaki i\u015f problemini \u00e7\u00f6zmek ve tahmin skorunu y\u00fckseltmek i\u00e7in \u00f6ncelikle modellerimizin tahminlerini harmanl\u0131yoruz.\n\nSon a\u015famada olu\u015fturdu\u011fumuz submission dosyas\u0131n\u0131 da yine \u00fc\u00e7 farkl\u0131 deneyde olu\u015fturdu\u011fumuz harmanlanm\u0131\u015f tahminlerin tekrar harmanlanmas\u0131 yoluyla olu\u015fturuyoruz. Bunu a\u015fa\u011f\u0131ya ekledik.","7d6cd311":"<h1 id=\"basics\" style=\"font-family:verdana;color:#3F000F;\"> \n    <center>3. Modelleme Yakla\u015f\u0131m\u0131\n        <a class=\"anchor-link\"><\/a>\n    <\/center>\n<\/h1>","1409c73d":"<h1 style=\"font-family:verdana;\"> <center>Do\u011fu\u015f Datathon \u00c7\u00f6z\u00fcmleri (kybele)<\/center> <\/h1>","04716eab":"Yukar\u0131daki izlemlerden hareketle, ilgili de\u011fi\u015fkenler d\u00fczenlenip modelleme i\u00e7in kategorik de\u011fi\u015fkenlere d\u00f6n\u00fc\u015ft\u00fcr\u00fclm\u00fc\u015ft\u00fcr:","a93f537b":"RECENCY_CAT ve y de\u011fi\u015fkeni:","4307a274":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h1 style=\"font-family:verdana;color:#FF7722;\">\n        1.4 Veriseti <i><\/i>\n    <\/h1>\n<\/div>","e65a0441":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h1 style=\"font-family:verdana;color:#FF7722;\">\n        3.5 Son Tahmin Dosyas\u0131n\u0131n Olu\u015fturulmas\u0131: Harmanlanm\u0131\u015f Tahminlerin Harmanlanmas\u0131<i><\/i>\n    <\/h1>\n<\/div>","7384b4b9":"*  **BASE_CUSTOMER_ID** : tekil m\u00fc\u015fteri numaras\u0131   \n*  **CUT_OF_DATE**      : kesme tarihi                           \n*  **y**                : sat\u0131\u015f kayd\u0131n\u0131 g\u00f6steren 1-0 etiketleri                                     \n*  **MONTH**            : kesme tarihi ay\u0131                                 \n*  **GENDER**           : m\u00fc\u015fteri cinsiyeti (customer_data'dan en \u00e7ok beyan edilen olarak al\u0131nm\u0131\u015ft\u0131r)                                \n*  **BIRTH_DATE**       : m\u00fc\u015fteri do\u011fum y\u0131l\u0131 (customer_data'dan en \u00e7ok beyan edilen olarak al\u0131nm\u0131\u015ft\u0131r)                            \n*  **FK_ADDRESS_COMMUNICATION_CITY** : m\u00fc\u015fteri al\u0131\u015fveri\u015f \u015fehri (customer_data'dan en \u00e7ok beyan edilen olarak al\u0131nm\u0131\u015ft\u0131r)         \n*  **OCCUPATION**       : m\u00fc\u015fterinin mesle\u011fi (customer_data'dan en \u00e7ok beyan edilen olarak al\u0131nm\u0131\u015ft\u0131r). NACE s\u0131n\u0131fland\u0131rmas\u0131na g\u00f6re \u00fcst meslek gruplar\u0131 olarak s\u0131n\u0131fland\u0131r\u0131lm\u0131\u015ft\u0131r.                            \n*  **MARITAL_STATUS**   : m\u00fc\u015fterinin medeni durumu (customer_data'dan en \u00e7ok beyan edilen olarak al\u0131nm\u0131\u015ft\u0131r)                        \n*  **MAINTENANCE_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin bak\u0131ma geli\u015f say\u0131s\u0131                     \n*  **MAINTENANCE_TOTAL_AMOUNT_TL** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin bak\u0131m i\u00e7in harcad\u0131\u011f\u0131 toplam tutar (TL).           \n*  **MAINTENANCE_MAX_TOTAL_AMOUNT_TL** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin bak\u0131m i\u00e7in harcad\u0131\u011f\u0131 maksimum tutar (TL).       \n*  **MAINTENANCE_MIN_TOTAL_AMOUNT_TL** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin bak\u0131m i\u00e7in harcad\u0131\u011f\u0131 minimum tutar (TL).       \n*  **MAINTENANCE_MEAN_TOTAL_AMOUNT_TL**: kesme tarihi \u00f6ncesi m\u00fc\u015fterinin bak\u0131m i\u00e7in harcad\u0131\u011f\u0131 ortalama tutar (TL).      \n*  **SERVICE_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin servise geli\u015f say\u0131s\u0131.                         \n*  **SERVICE_TOTAL_AMOUNT_TL** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin servis i\u00e7in harcad\u0131\u011f\u0131 toplam tutar (TL)                \n*  **SERVICE_MAX_TOTAL_AMOUNT_TL** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin servis i\u00e7in harcad\u0131\u011f\u0131 maksimum tutar (TL)          \n*  **SERVICE_MIN_TOTAL_AMOUNT_TL** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin servis i\u00e7in harcad\u0131\u011f\u0131 minimum tutar (TL)           \n*  **SERVICE_MEAN_TOTAL_AMOUNT_TL**: kesme tarihi \u00f6ncesi m\u00fc\u015fterinin servis i\u00e7in harcad\u0131\u011f\u0131 ortalama tutar (TL)          \n*  **MAINTENANCE_RECENCY** : kesme tarihine g\u00f6re m\u00fc\u015fterinin bak\u0131m yak\u0131nl\u0131\u011f\u0131                   \n*  **SERVICE_RECENCY**     : kesme tarihine g\u00f6re m\u00fc\u015fterinin servis yak\u0131nl\u0131\u011f\u0131                      \n*  **RECENCY**             : kesme tarihine g\u00f6re m\u00fc\u015fterinin bak\u0131m\/servis genel yak\u0131nl\u0131\u011f\u0131                               \n*  **SERVICE_VEHICLE_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin servise geldi\u011fi ara\u00e7 say\u0131s\u0131                 \n*  **MEAN_DAY_DIFF_MAINTENANCE** : m\u00fc\u015fterinin bak\u0131m i\u00e7in geldi\u011fi tarihler aras\u0131ndaki ortalama s\u00fcre             \n*  **SALESFILE_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin toplam a\u00e7t\u0131rd\u0131\u011f\u0131 dosya say\u0131s\u0131                       \n*  **LAST_STATUS** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin son dosya stat\u00fcs\u00fc                            \n*  **STATUS_100_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin 100 stat\u00fcl\u00fc dosya say\u0131s\u0131                      \n*  **STATUS_101_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin 101 stat\u00fcl\u00fc dosya say\u0131s\u0131                      \n*  **STATUS_102_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin 102 stat\u00fcl\u00fc dosya say\u0131s\u0131                      \n*  **STATUS_105_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin 103 stat\u00fcl\u00fc dosya say\u0131s\u0131                      \n*  **STATUS_106_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin 106 stat\u00fcl\u00fc dosya say\u0131s\u0131                      \n*  **STATUS_109_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin 109 stat\u00fcl\u00fc dosya say\u0131s\u0131                      \n*  **REQ_BRAND_CODE_K_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin K markal\u0131 ara\u00e7 dosya say\u0131s\u0131                \n*  **REQ_BRAND_CODE_T_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin T markal\u0131 ara\u00e7 dosya say\u0131s\u0131               \n*  **REQ_BRAND_CODE_X_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin X markal\u0131 ara\u00e7 dosya say\u0131s\u0131               \n*  **REQ_BRAND_CODE_Y_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin Y markal\u0131 ara\u00e7 dosya say\u0131s\u0131               \n*  **REQ_BRAND_CODE_Z_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin Z markal\u0131 ara\u00e7 dosya say\u0131s\u0131               \n*  **REQ_TOPMODEL_CODE_COUNT** : kesme tarihi \u00f6ncesi m\u00fc\u015fterinin topmodel say\u0131s\u0131              \n*  **SALES_RECENY** : kesme tarihine g\u00f6re m\u00fc\u015fterinin yak\u0131nl\u0131\u011f\u0131                          \n*  **LAST_GEAR_BOX_TYPE** : m\u00fc\u015fterinin son arac\u0131n\u0131n vites tipi                   \n*  **LAST_MOTOR_GAS_TYPE** : m\u00fc\u015fterinin son arac\u0131n\u0131n motor yak\u0131t tipi                   \n*  **GEAR_BOX_TYPE_AUTOMATIC_COUNT** : kesme tarihinden \u00f6nce m\u00fc\u015fterinin otomatik vites tipli ara\u00e7 say\u0131s\u0131         \n*  **GEAR_BOX_TYPE_MANUAL_COUNT** : kesme tarihinden \u00f6nce m\u00fc\u015fterinin manuel vites tipli ara\u00e7 say\u0131s\u0131            \n*  **GEAR_BOX_TYPE_MECHANIC_COUNT** : kesme tarihinden \u00f6nce m\u00fc\u015fterinin mekanik vites tipli ara\u00e7 say\u0131s\u0131          \n*  **GEAR_BOX_TYPE_STRAIGHT_COUNT** : kesme tarihinden \u00f6nce m\u00fc\u015fterinin d\u00fcz vites tipli ara\u00e7 say\u0131s\u0131          \n*  **GEAR_BOX_TYPE_UNKNOWN_COUNT** : kesme tarihinden \u00f6nce m\u00fc\u015fterinin bilinmeyen vites tipli ara\u00e7 say\u0131s\u0131           \n*  **GEAR_BOX_TYPE_VT_COUNT**: kesme tarihinden \u00f6nce m\u00fc\u015fterinin de\u011fi\u015fken vites (variable transmission) tipli ara\u00e7 say\u0131s\u0131                \n*  **MOTOR_GAS_TYPE_DIESEL_COUNT** : kesme tarihinden \u00f6nce m\u00fc\u015fterinin dizel ara\u00e7 say\u0131s\u0131           \n*  **MOTOR_GAS_TYPE_DIESEL_HYBRID_COUNT**: kesme tarihinden \u00f6nce m\u00fc\u015fterinin dizel-hibrit ara\u00e7 say\u0131s\u0131    \n*  **MOTOR_GAS_TYPE_GASOLINE_COUNT** : kesme tarihinden \u00f6nce m\u00fc\u015fterinin benzinli ara\u00e7 say\u0131s\u0131        \n*  **MOTOR_GAS_TYPE_GASOLINE_HYBRID_COUNT** kesme tarihinden \u00f6nce m\u00fc\u015fterinin benzin-hibrit ara\u00e7 say\u0131s\u0131 \n*  **MOTOR_GAS_TYPE_UNKNOWN_COUNT** : kesme tarihinden \u00f6nce m\u00fc\u015fterinin yak\u0131t tipi bilinmeyen ara\u00e7 say\u0131s\u0131         \n*  **VEHICLE_AGE**: m\u00fc\u015fterinin ili\u015fkili oldu\u011fu son arac\u0131n ya\u015f\u0131 (y\u0131l)                          \n*  **SIFIR_F**:                              \n*  **SIFIR_RECENCY**: kesme tarihine g\u00f6re m\u00fc\u015fterinin sahip oldu\u011fu s\u0131f\u0131r arac\u0131n\u0131n yak\u0131nl\u0131\u011f\u0131 (g\u00fcn)                        \n*  **SIFIR_MONTH**: m\u00fc\u015fterinin s\u0131f\u0131r arac\u0131n\u0131 ald\u0131\u011f\u0131 ay                          \n*  **FIRST_HAND_VEHICLE_AGE**: m\u00fc\u015fterinin s\u0131f\u0131r arac\u0131n\u0131n ya\u015f\u0131               \n*  **ACTIVE_VEHICLE_COUNT**: m\u00fc\u015fterinin aktif ara\u00e7 say\u0131s\u0131                 \n*  **ACTIVE_LICENCEE_COUNT**: m\u00fc\u015fterinin aktif lisans say\u0131s\u0131                \n*  **frequency** : m\u00fc\u015fterinin yapt\u0131\u011f\u0131 tekrar sat\u0131n alma say\u0131s\u0131n\u0131 temsil eder                            \n*  **recency** :   m\u00fc\u015fterinin en son al\u0131\u015fveri\u015flerini yapt\u0131\u011f\u0131 ya\u015f\u0131 temsil eder                            \n*  **T** : bir m\u00fc\u015fterinin ilk sat\u0131n al\u0131m\u0131 ile incelenen d\u00f6nemin sonu aras\u0131ndaki s\u00fcre                                    \n*  **PREDICTED_PURCHASES**: belli bir d\u00f6nemde tahmin edilen i\u015flem say\u0131s\u0131d\u0131r                  \n*  **CLV**: m\u00fc\u015fteri ya\u015fam boyu de\u011feridir (customer lifetime value)                                  ","23cd5ec3":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h1 style=\"font-family:verdana;color:#FF7722;\">\n        1.1 \u0130htiya\u00e7 Duyulan K\u00fct\u00fcphanelerin Y\u00fcklenmesi <i><\/i>\n    <\/h1>\n<\/div>","111d88c0":"![dogus_img.jpg](attachment:a181e96a-c824-4d60-8317-97170f882259.jpg)","4e6ff040":"De\u011fi\u015fkenlerin \u00f6nemi:","337bf625":"\u0130\u00e7g\u00f6r\u00fcler:\n\n* \u0130lgili d\u00f6nem i\u00e7inde kay\u0131t a\u00e7t\u0131ran m\u00fc\u015fterilerin, genel olarak yak\u0131nl\u0131klar\u0131n\u0131n daha az oldu\u011fu g\u00f6zlemlenmi\u015ftir.","e6e54774":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h2 style=\"font-family:verdana;color:#4863A0;\">\n        3.3.2 lightgbm + optuna<i><\/i>\n    <\/h2>\n<\/div>","a6e3f659":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h1 style=\"font-family:verdana;color:#FF7722;\">\n        3.4 Tahminlerin Harmanlanmas\u0131 (blending)<i><\/i>\n    <\/h1>\n<\/div>","5170ae14":"\u0130\u00e7g\u00f6r\u00fcler:\n\n* Son d\u00f6nemde sat\u0131\u015f kayd\u0131 a\u00e7t\u0131rm\u0131\u015f m\u00fc\u015fterilerin sat\u0131\u015f dosyas\u0131 say\u0131s\u0131n\u0131n daha y\u00fcksek oldu\u011fu g\u00f6zlemlenmi\u015ftir.\n* Son d\u00f6nemde sat\u0131\u015f kayd\u0131 a\u00e7t\u0131rm\u0131\u015f m\u00fc\u015fterilerin birinci el ara\u00e7 ya\u015f\u0131n\u0131n daha d\u00fc\u015f\u00fck oldu\u011fu g\u00f6zlemlenmi\u015ftir.","02da8ef8":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h1 style=\"font-family:verdana;color:#FF7722;\">\n        2.2 SERVICE_VEHICLE_COUNT, SALESFILE_COUNT, FIRST_HAND_VEHICLE_AGE_CAT ve y<i><\/i>\n    <\/h1>\n<\/div>","bc85b220":"<h1 id=\"basics\" style=\"font-family:verdana;color:#3F000F;\"> \n    <center>Eme\u011fi Ge\u00e7en Herkese Te\u015fekk\u00fcrler :)\n        <a class=\"anchor-link\"><\/a>\n    <\/center>\n<\/h1>\n<h3 id=\"basics\" style=\"font-family:verdana;color:#3F000F;\"> \n    <center>Merve, Murat, Ufuk, Celal, Tun\u00e7\n        <a class=\"anchor-link\"><\/a>\n    <\/center>\n<\/h3>","b81e569a":"Model tahmin \u00e7er\u00e7evelerinin olu\u015fturulmas\u0131:","ce075469":"Do\u011fu\u015f Otomotiv taraf\u0131ndan payla\u015f\u0131lan t\u00fcm tablolar kullan\u0131larak, i\u015f problemi g\u00f6z \u00f6n\u00fcne al\u0131narak etiketler olu\u015fturulmu\u015f, i\u015f problemini \u00e7\u00f6zebilecek de\u011fi\u015fkenler e\u011fitim ve test verileri i\u00e7in haz\u0131rlanm\u0131\u015ft\u0131r.","5d6c6301":"<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:verdana; line-height: 1.7em;\">\n     &nbsp; <strong>\u0130\u015f Problemi:<\/strong> 5 farkl\u0131 marka i\u00e7in aktif ruhsat sahipli\u011fi olan mu\u0308\u015fterilerin \u00f6nu\u0308mu\u0308zdeki 3 ay i\u00e7inde sat\u0131\u015f dosyas\u0131 a\u00e7t\u0131rma olas\u0131l\u0131\u011f\u0131n\u0131n tahmin edilmesi beklenir. Ba\u015far\u0131 metri\u011fi AUC score olacakt\u0131r. Tahmin edilmesi istenen d\u00f6nem 2021 Haziran Temmuz A\u011fustos aylar\u0131 olacakt\u0131r. Tahminlerin tekil mu\u0308\u015fteri baz\u0131nda yap\u0131lmas\u0131 gerekmektedir (BASE_CUSTOMER_ID baz\u0131nda).\n<\/div>","d7a1a4a1":"<div style=\"font-family:verdana; word-spacing:1.5px;\">\n    <h1 style=\"font-family:verdana;color:#FF7722;\">\n        1.6 De\u011fi\u015fken Tan\u0131mlar\u0131 <i><\/i>\n    <\/h1>\n<\/div>","315162ab":"Veri \u00e7er\u00e7eveleriyle ilgili bilgilerin \u00f6nizlenmesi:","4f9f9bfd":"* Sat\u0131\u015f dosyas\u0131 a\u00e7t\u0131ran m\u00fc\u015fterilerin \u00f6zellikle esnaf meslek grubunda daha fazla oldu\u011funu g\u00f6zlemliyoruz.","47956c9c":"Verideki 1-0 da\u011f\u0131l\u0131m\u0131na bakt\u0131\u011f\u0131m\u0131zda, ciddi bir bi\u00e7imde dengesiz bir veri ile kar\u015f\u0131la\u015ft\u0131\u011f\u0131m\u0131z\u0131 g\u00f6rebiliyoruz. Bu, yeterli g\u00f6zlem noktas\u0131 olmad\u0131\u011f\u0131nda, algoritmalar\u0131m\u0131z\u0131n istedi\u011fimiz \u00f6l\u00e7\u00fcde \u00f6\u011frenememesine neden olacak bir durumdur. Literat\u00fcrde bu soruna olan yakla\u015f\u0131mlarda biri `oversampling`, bir di\u011feri de `undersampling` ile g\u00f6zlem noktalar\u0131n\u0131n yeniden \u00f6rnekleyerek yeni bir veri \u00e7er\u00e7evesi olu\u015fturmakt\u0131r. Bizim denemelerimizde `oversmapling` yakla\u015f\u0131m\u0131n\u0131n a\u015f\u0131r\u0131 \u00f6\u011frenmeye neden oldu\u011funu g\u00f6zlemlemi\u015ftik. Dolay\u0131s\u0131yla sorunu `undersampling` ile \u00e7\u00f6z\u00fcmledik:","15311547":"E\u011fitim ve test veri \u00e7er\u00e7evelerinde, m\u00fc\u015fteri davran\u0131\u015f\u0131n\u0131 etkileyebilecek unsurlar, i\u015f problemi kapsam\u0131nda a\u015fa\u011f\u0131daki gibi olu\u015fturulmu\u015ftur:","26e9811f":"<h1 id=\"basics\" style=\"font-family:verdana;color:#3F000F;\"> \n    <center>1. Gerekli K\u00fct\u00fcphaneler ve Veriseti\n        <a class=\"anchor-link\"><\/a>\n    <\/center>\n<\/h1>"}}