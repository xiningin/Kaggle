{"cell_type":{"0cb84dae":"code","d0b7dd95":"code","f38003b6":"code","78a02414":"code","3ebbb614":"code","30ef5805":"code","b2b2ded5":"code","24d3dc6f":"code","469b0517":"code","9a248251":"code","0fef1d78":"code","a586f6e6":"code","9db2523c":"code","99d7e100":"code","4ce555ee":"code","48dccd17":"code","142aa0a7":"code","5d237b32":"code","46828ed8":"code","bc59d0a2":"code","9f7e641a":"code","fabd978f":"code","25cae023":"code","76d50846":"code","d605433c":"code","bd827f1b":"code","482bdd23":"code","e46fd697":"code","56bf9455":"code","fa97093d":"code","2a532b00":"code","4ed9aa79":"code","693471de":"code","1cc8b97d":"code","b21fee98":"code","7fb47e61":"code","32df3502":"code","e965bbb1":"code","521a0a4e":"code","32a9f1e7":"code","64e32bda":"code","c7742221":"code","e9fe1c98":"code","4ebaa4d8":"code","8082c7bd":"code","b8c3e2d0":"code","8448f45c":"code","4a5c65bb":"code","987983f1":"code","c01e0a74":"code","897dce5c":"markdown","91d2ac40":"markdown","da23a7bc":"markdown","741c9d4d":"markdown","8608cd7e":"markdown","43727dd2":"markdown","965f1c91":"markdown","60ec0150":"markdown","0069504a":"markdown","749efd9d":"markdown","79684c5d":"markdown"},"source":{"0cb84dae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport seaborn as sns\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d0b7dd95":"train_data=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntarget=['SalePrice']\nX_train_data=train_data.drop(['SalePrice'],axis=1)\ntest_data=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","f38003b6":"testID=test_data[\"Id\"]","78a02414":"data=pd.concat([X_train_data, test_data], axis=0)","3ebbb614":"nan_cols = [i for i in data.columns if data[i].isnull().any()]\ndata[nan_cols].isnull().sum()","30ef5805":"fig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] =16.0\nfig_size[1] = 10.0\ndata[nan_cols].isnull().sum().plot(kind='bar')\nplt.plot(data[nan_cols].isnull().sum())\nplt.show()","b2b2ded5":"data=data.drop(['Id'],axis=1)","24d3dc6f":"null_numerical_cols = [nan_cols for nan_cols in data[nan_cols] if \n                data[nan_cols].dtype in ['int64', 'float64']]","469b0517":"categorical_cols_null = [nan_cols for nan_cols in data[nan_cols] if\n                    data[nan_cols].dtype == \"object\"]","9a248251":"columns=data.columns","0fef1d78":"numerical_cols = [columns for columns in data[columns] if \n                data[columns].dtype in ['int64', 'float64']]","a586f6e6":"categorical_cols = [columns for columns in data[columns] if\n                    data[columns].nunique() < 26 and \n                    data[columns].dtype == \"object\"]","9db2523c":"var_with_meaning=['BsmtQual','BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'GarageCond', 'GarageQual', 'GarageFinish', 'GarageType', 'FireplaceQu', 'Fence', 'MiscFeature', 'PoolQC']\ndata['BsmtQual'].fillna(\"No Basement\",inplace=True)\ndata['BsmtCond'].fillna(\"No Basement\",inplace=True)\ndata['BsmtExposure'].fillna(\"No Basement\",inplace=True)\ndata['BsmtFinType1'].fillna(\"No Basement\",inplace=True)\ndata['BsmtFinType2'].fillna(\"No Basement\",inplace=True)\ndata['GarageCond'].fillna(\"No Garage\",inplace=True)\ndata['GarageQual'].fillna(\"No Garage\",inplace=True)\ndata['GarageFinish'].fillna(\"No Garage\",inplace=True)\ndata['GarageType'].fillna(\"No Garage\",inplace=True)\ndata['FireplaceQu'].fillna(\"No Fireplace\",inplace=True)\ndata['Fence'].fillna(\"No Fence\",inplace=True)\ndata['MiscFeature'].fillna(\"No Misc\",inplace=True)\ndata['PoolQC'].fillna(\"No Pool\",inplace=True)\ndata['Alley'].fillna(\"No Alley\",inplace=True)\n\n","99d7e100":"nan_cols = [i for i in data.columns if data[i].isnull().any()]\ndata[nan_cols].isnull().sum()","4ce555ee":"Y_data=train_data['SalePrice']\nX_data=data","48dccd17":"Y_data=pd.DataFrame(Y_data)\nY_data","142aa0a7":"columns_new=X_data.columns","5d237b32":"numerical_cols_new=[columns_new for columns_new in X_data[columns_new] if \n                X_data[columns_new].dtype in ['int64', 'float64']]","46828ed8":"from sklearn.impute import SimpleImputer\nnumerical_transformer = SimpleImputer(strategy='mean')\nX_data_new=X_data[numerical_cols_new]\nX_data[numerical_cols_new]=numerical_transformer.fit_transform(X_data[numerical_cols_new])","bc59d0a2":"X_data['MasVnrType'].fillna('None',inplace=True)\nX_data['Electrical'].fillna('SBrkr',inplace=True)","9f7e641a":"from sklearn.impute import SimpleImputer\nimputer=SimpleImputer(strategy='most_frequent')\nX_data[nan_cols]=imputer.fit_transform(X_data[nan_cols])","fabd978f":"categorical_cols = [cname for cname in X_data.columns if\n                    X_data[cname].nunique() < 26 and \n                    X_data[cname].dtype == \"object\"]","25cae023":"from sklearn.preprocessing import LabelEncoder\ncategorical_cols = [cname for cname in X_data.columns if\n                    X_data[cname].nunique() < 26 and \n                    X_data[cname].dtype == \"object\"]\nX_data_encoded = X_data[categorical_cols]\nlabel_encoder=LabelEncoder()\nfor i, col in enumerate(X_data[categorical_cols].columns):\n    X_data_encoded[col]=label_encoder.fit_transform(X_data_encoded[col])\n######inverse_transform()  for reverseing the transformation  ########","76d50846":"cols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\nX_data_encoded_ordinal=X_data\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(X_data[c].values)) \n    X_data_encoded_ordinal[c]= lbl.transform(list(X_data[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(X_data.shape))","d605433c":"numerical_cols=[columns_new for columns_new in X_data[columns_new] if \n                X_data[columns_new].dtype in ['int64', 'float64']]\n\nX_data_num=X_data[numerical_cols]","bd827f1b":"X_preprocess_data3=X_data_encoded_ordinal","482bdd23":"from scipy.stats import norm, skew #for some statistics\n# Check the skew of all numerical features\nskewed_feats = X_preprocess_data3[numerical_cols].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","e46fd697":"skewness.plot()","56bf9455":"#Transformed Data\n\nskewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    X_preprocess_data3[feat] = boxcox1p(X_preprocess_data3[feat], lam)","fa97093d":"X_dummy=pd.concat([X_preprocess_data3.iloc[0:1460,:][numerical_cols],Y_data],axis=1)\ncorrelation=X_dummy.corr()['SalePrice']\ncorr_colums=correlation.sort_values(ascending=False)[:20]\ncorr_colums=pd.DataFrame(corr_colums)\ncorr_colums","2a532b00":"from sklearn import svm\nfrom sklearn.datasets import make_classification\nfrom sklearn.feature_selection import SelectKBest, f_regression, f_classif\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\n\nXX_data=X_preprocess_data3.iloc[0:1460,:]\nlabel_encoder=LabelEncoder()\nfor i, col in enumerate(X_preprocess_data3.iloc[0:1460,:].columns):\n    XX_data[col]=label_encoder.fit_transform(X_preprocess_data3.iloc[0:1460,:][col])\n    \n","4ed9aa79":"sel2=f_classif(XX_data,Y_data)\np_values2=pd.Series(sel2[1])\np_values2.index=XX_data.columns\np_values2.sort_values(ascending=True, inplace=True)","693471de":"sel=f_regression(XX_data,Y_data)\np_values=pd.Series(sel[1])\np_values.index=XX_data.columns\np_values.sort_values(ascending=True, inplace=True)","1cc8b97d":"p_values2.plot.bar(figsize=(16,5))","b21fee98":"p_values.plot.bar(figsize=(16,5))","7fb47e61":"p_values2=p_values2[p_values2<0.05]","32df3502":"p_values=p_values[p_values<0.05]","e965bbb1":"X_preprocess_data5=X_preprocess_data3[p_values2.index]","521a0a4e":"X_preprocess_data4=X_preprocess_data3[p_values.index]","32a9f1e7":"variables=['']","64e32bda":"X_preprocess_data32= pd.get_dummies(X_preprocess_data3)\nprint(X_preprocess_data32.shape)","c7742221":"X_Train=X_preprocess_data32.iloc[0:1460,:]","e9fe1c98":"X_test=X_preprocess_data32.iloc[1460:2919,:]","4ebaa4d8":"plt.subplots(figsize=(12,9))\nsns.distplot(Y_data['SalePrice'], fit=stats.norm)\n\n# Get the fitted parameters used by the function\n\n(mu, sigma) = stats.norm.fit(Y_data['SalePrice'])\n\n# plot with the distribution\n\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')\nplt.ylabel('Frequency')\n\n#Probablity plot\n\nfig = plt.figure()\nstats.probplot(Y_data['SalePrice'], plot=plt)\nplt.show()","8082c7bd":"#we use log function which is in numpy\nY_data['SalePrice'] = np.log1p(Y_data['SalePrice'])\n\n#Check again for more normal distribution\n\nplt.subplots(figsize=(12,9))\nsns.distplot(Y_data['SalePrice'], fit=stats.norm)\n\n# Get the fitted parameters used by the function\n\n(mu, sigma) = stats.norm.fit(Y_data['SalePrice'])\n\n# plot with the distribution\n\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')\nplt.ylabel('Frequency')\n\n#Probablity plot\nfig = plt.figure()\nstats.probplot(Y_data['SalePrice'], plot=plt)\nplt.show()","b8c3e2d0":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom vecstack import stacking","8448f45c":"models = [\n    xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =0, nthread = -1),\n    RandomForestRegressor(n_estimators=1000),\n    GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5),\n    lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11),\n    make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\n    \n]","4a5c65bb":"S_train, S_test = stacking(models,                   \n                           X_Train, Y_data, X_test,   \n                           regression=True, \n                           mode='oof_pred_bag', \n       \n                           needs_proba=False,\n         \n                           save_dir=None, \n            \n                           metric=mean_squared_error, \n    \n                           n_folds=4, \n                 \n                           stratified=True,\n            \n                           shuffle=True,  \n            \n                           random_state=0,    \n         \n                           verbose=2)","987983f1":"model = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =0, nthread = -1)\n    \nmodel = model.fit(S_train, Y_data)\ny_pred = np.expm1(model.predict(S_test))\n","c01e0a74":"sub = pd.DataFrame()\nsub['Id'] = testID\nsub['SalePrice'] = y_pred\nsub.to_csv('submission.csv',index=False)","897dce5c":"# Label Encoding all Categorical Data","91d2ac40":"# Continous Data","da23a7bc":"# Transformation of Features #","741c9d4d":"# Feature Selection","8608cd7e":"# Categorical Data","43727dd2":"EDA Finish.....","965f1c91":"# Best Result is with X_preprocess_data3 till Now ","60ec0150":"# Ordinal Data preprocessed","0069504a":"# Label Encoding only Ordinal Data \n","749efd9d":"1. **Alley- No Alley\n\n1. BsmtQual- NO Basement\n\n1. BsmtCond- No Basement\n1. BsmtExposure- No Basement\n1. BsmtFinType1 -No Basement\n1. BsmtFinType2- No Basement\n1. GarageCond- No Garbage\n1. GarageQual- No Garbage\n1. GarbageFinish- No Garbage\n1. GarbageType- No Garbage\n1. FireplaceQu- NO Fireplace\n1. Fence\n1. MiscFeature \n1. PoolQC**","79684c5d":"1. Electrical\n1. MasVnrType\n1. MasVnrArea\n1. GarageYrBlt\n1. LotFrontage"}}