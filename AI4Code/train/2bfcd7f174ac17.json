{"cell_type":{"efcaf24e":"code","8f2b9b10":"code","0769059f":"code","39c7768b":"code","b3e67ded":"code","38f53d4d":"code","0bf1c0ff":"code","39bd7ccb":"code","36db326f":"code","29cad4d1":"code","c6e2adf7":"code","e28110ed":"markdown","d2c64b42":"markdown","6157cedc":"markdown","e7e4bbb4":"markdown","388b7828":"markdown","d75d1707":"markdown","09b2e45b":"markdown","fcf2d025":"markdown","5508d124":"markdown","b4bbf575":"markdown","8d30c234":"markdown"},"source":{"efcaf24e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model","8f2b9b10":"data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')","0769059f":"data = data.drop(['Province\/State','Lat','Long'],axis=1)\ndata = data.groupby('Country\/Region').sum()\ndata=data.sort_values('3\/14\/20',ascending=False)\ndata=data.iloc[:20,:]","39c7768b":"def alpha(x):\n    x= list(x)\n    lr = linear_model.LinearRegression()\n    def log_(x):\n        if x==0: return 0\n        else : return np.log10(x)\n    lr.fit(np.arange(len(x)).reshape(-1,1),list(map(log_,x)))\n    return lr.coef_[0]","b3e67ded":"lr = linear_model.LinearRegression()\nlr.fit(np.arange(len(data.iloc[0,:])).reshape(-1,1),list(map(np.log10,data.iloc[:20,:].drop('China').sum())))\nf, ax = plt.subplots(2,2, figsize=(12,10))\nax[0,0].plot(list(data.sum()))\nax[0,0].set_xticklabels(list(data.columns[[0,0,10,20,30,40,50]]))\nax[0,1].plot(list(map(np.log10,data.iloc[:20,:].sum())))\nax[0,1].set_xticklabels(list(data.columns[[0,0,10,20,30,40,50]]))\nax[0,1].set_yticklabels(['0','10','10^2','10^3','10^4','10^5'])\nax[1,0].plot(list(data.drop('China').sum()))\nax[1,0].set_xticklabels(list(data.columns[[0,0,10,20,30,40,50]]))\nax[1,1].plot(list(map(np.log10,data.iloc[:20,:].drop('China').sum())))\nax[1,1].plot(lr.predict(np.arange(len(data.iloc[0,:])).reshape(-1,1)), alpha = 0.5)\nax[1,1].set_xticklabels(list(data.columns[[0,0,10,20,30,40,50]]))\nax[1,1].set_yticklabels(['0','10','10^2','10^3','10^4','10^5'])\nax[0,0].set_title('World Confirmed')\nax[0,1].set_title('World Confirmed - logscale')\nax[1,0].set_title('World Confirmed (except china)')\nax[1,1].set_title('World Confirmed (except china) - logscale')\nax[1,1].text(23,2,'alpha={}'.format(alpha(list(data.drop('China').sum()))))","38f53d4d":"alpha(data.drop('China').sum())","0bf1c0ff":"plt.figure()\nfor i in range(0,5):\n    plt.plot(list(data.iloc[i,:]), label=data.index[i])\nplt.legend()\nplt.title('top5_confirmed')\nplt.xlabel('date')\nplt.ylabel('confirmed')\nplt.xticks([0,10,20,30,40,50], list(data.columns[[0,10,20,30,40,50]]))","39bd7ccb":"f, ax = plt.subplots(2,2, figsize=(15,10))\nax[0,0].plot(list(data.loc['China']), label=data.index[0])\nax[0,0].legend()\nax[0,0].set_xticklabels(list(data.columns[[0,0,10,20,30,40,50]]))\nax[0,0].set_title('China Confirmed')\nfor i in range(1,8):\n    ax[0,1].plot(list(data.iloc[i,:]), label=data.index[i])\nax[0,1].legend()\nax[0,1].set_xticklabels(list(data.columns[[0,0,10,20,30,40,50]]))\nax[0,1].set_title('Top2-8 Confirmed')\nfor i in range(8,14):\n    ax[1,0].plot(list(data.iloc[i,:]), label=data.index[i])\nax[1,0].legend()\nax[1,0].set_xticklabels(list(data.columns[[0,0,10,20,30,40,50]]))\nax[1,0].set_title('Top9-14 Confirmed')\nfor i in range(14,20):\n    ax[1,1].plot(list(data.iloc[i,:]), label=data.index[i])\nax[1,1].set_xticklabels(list(data.columns[[0,0,10,20,30,40,50]]))\nax[1,1].legend()\nax[1,1].set_title('Top14-20 Confirmed')","36db326f":"f, ax = plt.subplots(2,2, figsize=(15,10))\nax[0,0].plot(list(map(lambda x: np.log10(x),data.loc['China'])), label=data.index[0])\nax[0,0].legend()\nax[0,0].set_xlim(-1,55)\nax[0,0].set_ylim(-0.5,5)\nfor i in range(1,8):\n    ax[0,1].plot(list(map(lambda x: np.log10(x),data.iloc[i,:])), label=data.index[i])\nax[0,1].legend()\nax[0,1].set_xlim(-1,55)\nax[0,1].set_ylim(-0.5,5)\nax[0,1].axvline(x=29,linewidth=0.5, color='red')\nfor i in range(8,14):\n    ax[1,0].plot(list(map(lambda x: np.log10(x),data.iloc[i,:])), label=data.index[i])\nax[1,0].legend()\nax[1,0].set_xlim(-1,55)\nax[1,0].set_ylim(-0.5,5)\nax[1,0].axvline(x=35,linewidth=0.5, color='red')\nfor i in range(14,20):\n    ax[1,1].plot(list(map(lambda x: np.log10(x),data.iloc[i,:])), label=data.index[i])\nax[1,1].legend()\nax[1,1].set_xlim(-1,55)\nax[1,1].set_ylim(-0.5,5)\nax[1,1].axvline(x=38,linewidth=0.5, color='red')\nfor i in [0,1]:\n    for j in [0,1]:\n        ax[i,j].set_xticklabels(list(data.columns[[0,0,10,20,30,40,50]]))\n        ax[i,j].set_yticklabels(['0','0','10','10^2','10^3','10^4','10^5'])\nax[0,0].set_title('China Confirmed - logscale')\nax[0,1].set_title('Top2-8 Confirmed - logscale')\nax[1,0].set_title('Top9-14 Confirmed - logscale')\nax[1,1].set_title('Top14-20 Confirmed - logscale')\nax[0,1].text(30,4,'pendemic start')\nax[0,1].text(31,3.7,'Jan.20')\nax[1,0].text(36,4,'pendemic start')\nax[1,0].text(37,3.7,'Jan.26')\nax[1,1].text(39,4,'pendemic start')\nax[1,1].text(40,3.7,'Jan.28')","29cad4d1":"top2_8 = data.iloc[1:8,29:]\ntop9_14 = data.iloc[8:14,35:].fillna(0)\ntop15_20 = data.iloc[14:20,38:].fillna(0)\ntop2_8['alpha'] = [alpha(top2_8.iloc[i,:]) for i in range(len(top2_8))]\ntop2_8['class'] = np.zeros(len(top2_8))\ntop9_14['alpha'] = [alpha(top9_14.iloc[i,:]) for i in range(len(top9_14))]\ntop9_14['class'] =np.zeros(len(top9_14))+1\ntop15_20['alpha'] = [alpha(top15_20.iloc[i,:]) for i in range(len(top15_20))]\ntop15_20['class'] =np.zeros(len(top9_14))+2\ndf = pd.concat([top2_8,top9_14,top15_20])\ndf['order']= np.arange(2,21)\ndf = df.sort_values('alpha')\ndef color_order(x):\n    return 1-x\/23","c6e2adf7":"fig =plt.figure(figsize=(15,5))\nfor i in range(len(df)):\n    plt.bar(x=df.index[i] , height=df.alpha[i], alpha= color_order(df['order'][i]), color='red')\nplt.axhline(y=alpha(data.drop('China').sum()), linewidth=0.8, color='green')\nplt.xticks(rotation=40)\nplt.title('Top 20 alpha value after pendemic')\nplt.text(0.5, 0.19, 'World alpha')","e28110ed":"world confirmed by time","d2c64b42":"alpha calculated after pendemic point ","6157cedc":"data groupby country name for Top 20 confirmed number","e7e4bbb4":"1. dI(t)\/dt  =(Np-R)I(t)\n2. log\u2061(I(t))=(Np-R)t+C\n3. I(t)=e^((Np-R)t+C)","388b7828":"top 5 confirmed","d75d1707":"# Simple model (idea from SIR infection model)\n* Infected people = I(t)\n* Resist rate (recovered + isolated + death rate) = R\n* Infected rate = p\n* Contact rate (The number of contacted people per infected) = N","09b2e45b":"alpha function","fcf2d025":"alpha of world (from 1\/22\/20 to 3\/14\/20)","5508d124":"* alpha(\u03b1)=Np-R\n* alpha is gradient of log\u2061(I(t))\n* With common logarithm \n* alpha(\u03b1')=log_(10)e*(Np-R)","b4bbf575":"# log scale confirmed","8d30c234":"# Top 20 Confirmed country data  with logscale model\n"}}