{"cell_type":{"28561f48":"code","4a7f9470":"code","b428aa31":"code","a653c8b0":"code","ef5f9331":"code","1651519c":"code","ffb5f38b":"code","5d2d16ca":"code","71bd5480":"code","c8b83786":"code","daddeb08":"code","0124da63":"code","be4f76a5":"code","d2639ae1":"code","7cc737c6":"code","12a7fc7d":"code","8b67cef1":"code","ac112465":"code","d943ebdd":"code","54a14625":"code","e518ed06":"code","e9d548ae":"code","a5376f53":"code","68e02fd6":"code","e9c337b1":"code","862b39dd":"code","c1be1ee2":"code","4921ae16":"code","ee1443de":"code","719c33e9":"code","5f568700":"code","cb9b24e5":"code","8178cb95":"code","6ba9cbd8":"code","4e4dbbdd":"code","1f339bd3":"code","3049256a":"code","87c141a1":"code","c8da4db9":"code","0cfa1ecd":"code","aa102e6e":"code","91773504":"code","f3bd1497":"code","7de5db0c":"code","1c3f1850":"code","ec1ac9ea":"code","88784efd":"code","f4519188":"code","49665be8":"code","ae633136":"code","7bbbb5ff":"code","c9beb3f6":"code","3242049d":"code","bf56971a":"code","c9e48055":"code","856e61e6":"code","bcbcbfa0":"code","05a8ec93":"code","efd2a14c":"code","e1e05327":"code","83ebe037":"code","14539660":"code","3b51e1ba":"code","a30b4a42":"markdown","6c509b83":"markdown","018b3d1a":"markdown","1c72c87c":"markdown","beb96966":"markdown","0d3fe9c6":"markdown","9d72ae9c":"markdown","b22a815c":"markdown","4b83ff55":"markdown"},"source":{"28561f48":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","4a7f9470":"df_train = pd.read_csv('..\/input\/titanic-solution-for-beginners-guide\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic-solution-for-beginners-guide\/test.csv')","b428aa31":"df_train.head()","a653c8b0":"df_test.head()","ef5f9331":"df_train.info()\nprint('_'*45)\ndf_test.info()","1651519c":"print('Train Null Percentage: \\n',(df_train.isnull().sum()\/len(df_train)).round(3).sort_values(ascending=False))\nprint('-'*20)\nprint('Test Null Percentage: \\n',(df_test.isnull().sum()\/len(df_test)).round(3).sort_values(ascending=False))","ffb5f38b":"df_train.describe().round(2)","5d2d16ca":"df_test.describe().round(2)","71bd5480":"sns.distplot(df_train.Fare)","c8b83786":"sns.boxplot(df_train.Fare)","daddeb08":"IQR = df_train.Fare.quantile(.75) - df_train.Fare.quantile(.25)\nlower_bound = df_train.Fare.quantile(.25) - (IQR * 1.5)\nupper_bound = df_train.Fare.quantile(.75) + (IQR * 1.5)\nprint(lower_bound) , print(upper_bound), print(df_train.Fare.mean())","0124da63":"df_train.loc[df_train['Fare']>=66,'Fare']=66","be4f76a5":"sns.distplot(df_train.Fare)","d2639ae1":"sns.boxplot(df_train.Fare)","7cc737c6":"df_train['age'] = df_train.groupby(['Sex','Pclass'],as_index=False)['Age'].transform('mean').round()","12a7fc7d":"df_train.age","8b67cef1":"df_train.Age.fillna(df_train['age'],inplace=True)","ac112465":"sns.distplot(df_train['Age'])","d943ebdd":"sns.boxplot(df_train.Age)","54a14625":"IQR = df_train.Age.quantile(.75) - df_train.Age.quantile(.25)\nlower_bound = df_train.Age.quantile(.25) - (IQR * 1.5)\nupper_bound = df_train.Age.quantile(.75) + (IQR * 1.5)\nprint(lower_bound) , print(upper_bound), print(df_train.Age.mean())","e518ed06":"df_train.loc[df_train['Age']>=57,'Age']=57","e9d548ae":"sns.distplot(df_train['Age'])","a5376f53":"sns.boxplot(df_train.Age)","68e02fd6":"df_train.groupby(['SibSp'],as_index=False)['Survived'].mean().sort_values(by='Survived',ascending=False)","e9c337b1":"df_train.groupby(['Pclass'],as_index=False)['Survived'].mean()","862b39dd":"df_train.groupby(['Sex'],as_index=False)['Survived'].mean()","c1be1ee2":"df_train.groupby(['Sex','Parch'],as_index=False)['Survived'].mean()","4921ae16":"df_train.groupby(['age'],as_index=False)['Survived'].mean().sort_values(by='Survived',ascending=False)","ee1443de":"grid = sns.FacetGrid(df_train,col='Survived')\ngrid.map(plt.hist,'Age')","719c33e9":"grid = sns.FacetGrid(df_train, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend()","5f568700":"g = sns.FacetGrid(df_train,row='Embarked',col='Survived')\ng.map(sns.barplot,'Sex','Fare',ci=None)","cb9b24e5":"concat = [df_train,df_test]\nprint('Before ', df_train.shape, df_test.shape, concat[0].shape, concat[1].shape)\ndf_train.drop(['age','Ticket', 'Cabin','PassengerId'],axis=1,inplace=True)\ndf_test.drop(['Ticket', 'Cabin','PassengerId'],axis=1, inplace=True)\nprint('After ',df_train.shape, df_test.shape, concat[0].shape, concat[1].shape)","8178cb95":"for i in concat:\n    i['Title'] = i.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\npd.crosstab(df_train['Title'],df_train['Sex'])    ","6ba9cbd8":"for i in concat:\n    i['Title'] = i['Title'].replace(['Capt','Col','Countess','Don','Dr','Jonkheer','Lady','Major','Mlle',\n                                    'Mme','Ms','Rev','Sir'],'Rare')\ndf_train.groupby(['Title'],as_index=False)['Survived'].mean().sort_values(by='Survived',ascending=False)","4e4dbbdd":"categ = {'Mrs':1,'Mr':2,'Miss':3,'Master':4,'Rare':5}\nfor i in concat:\n    i['Title'] = i['Title'].map(categ)\ndf_train","1f339bd3":"df_train.drop('Name',axis=1,inplace=True)","3049256a":"for i in concat:\n    i['Sex'] = i['Sex'].replace({'male':0,'female':1})\ndf_train.head()","87c141a1":"for i in concat:\n    i['FamilySize'] = i['SibSp'] + i['Parch'] + 1\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)","c8da4db9":"for i in concat:\n    i['Alone'] = 0\n    i.loc[i['FamilySize'] == 1, 'Alone']=1\ndf_train.groupby(['Alone'],as_index=False)['Survived'].mean()","0cfa1ecd":"df_train = df_train.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ndf_test = df_test.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\nconcat = [df_train, df_test]","aa102e6e":"df_train.head()","91773504":"df_train.Embarked.value_counts()","f3bd1497":"for i in concat:\n    i['Embarked'] = i['Embarked'].fillna('S')\ndf_train.groupby(['Embarked'],as_index=False)['Survived'].mean()","7de5db0c":"for i in concat:\n    i['Embarked'] = i['Embarked'].replace({'S':1,'C':2,'Q':3})\ndf_train.head()","1c3f1850":"df_test.isna().sum()","ec1ac9ea":"df_test['age'] = df_test.groupby(['Sex','Pclass'],as_index=False)['Age'].transform('mean').round()","88784efd":"df_test.Age.fillna(df_test['age'],inplace=True)","f4519188":"df_test.drop(['Name','age'],axis=1,inplace=True)","49665be8":"df_test","ae633136":"df_test.Fare.fillna(df_test['Fare'].mean(),inplace=True)","7bbbb5ff":"df_test.Title.fillna(df_test['Title'].mean(),inplace=True)","c9beb3f6":"X_train = df_train.drop(\"Survived\", axis=1)\nY_train = df_train[\"Survived\"]\nX_test  = df_test\nX_train.shape, Y_train.shape, X_test.shape","3242049d":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","bf56971a":"from sklearn.svm import SVC\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","c9e48055":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","856e61e6":"from sklearn.naive_bayes import GaussianNB\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","bcbcbfa0":"from sklearn.linear_model import SGDClassifier\nsgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd","05a8ec93":"from sklearn.tree import DecisionTreeClassifier\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","efd2a14c":"from sklearn.ensemble import RandomForestClassifier\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","e1e05327":"from sklearn.svm import LinearSVC\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc","83ebe037":"from sklearn.linear_model import Perceptron\nperceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron\n","14539660":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_linear_svc, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","3b51e1ba":"random_forest.predict(df_test)","a30b4a42":"## Handling Outlier","6c509b83":"## Handle Test Data","018b3d1a":"## EDA","1c72c87c":"## Read Data","beb96966":"## Handling Age Outlier","0d3fe9c6":"# Data Preprocessing ","9d72ae9c":"## Precentage Of Null Values","b22a815c":"# Build Model","4b83ff55":"## Fill Null Age Values By Grouping Sex and Pclass "}}