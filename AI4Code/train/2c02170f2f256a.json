{"cell_type":{"f43c711a":"code","ddc08fb3":"code","fd5a7023":"code","4a4ed423":"code","cc931753":"code","1c19d832":"code","1890b4ac":"code","4fb15869":"code","1873dcef":"code","004d334b":"code","230166dd":"code","00968269":"code","bd638f81":"code","4acac835":"code","bf823091":"code","cca2ad51":"code","3834026c":"code","25b2acea":"code","8f42a3d1":"code","6408424e":"code","b8ab0079":"code","8708ab85":"code","46d5ceb2":"code","80b52214":"code","c678d00f":"code","9815b5f3":"markdown","0f88c1fd":"markdown","878793a7":"markdown","c66270f7":"markdown","4c2cdd9d":"markdown","84cbe7ed":"markdown","2e388e20":"markdown","59e912ef":"markdown","62b7142b":"markdown","c847254b":"markdown","40d94bdf":"markdown","68298ffe":"markdown","9567e951":"markdown","ee123f35":"markdown","2e7e6e88":"markdown","c2ea63f5":"markdown","8ac2bfd2":"markdown","bac7f11c":"markdown","8655a612":"markdown","8dbcf32c":"markdown","eab099a5":"markdown","63ada0cd":"markdown"},"source":{"f43c711a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pylab as plt\nimport seaborn as sns\nimport warnings\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ddc08fb3":"warnings.simplefilter('ignore')\n\n%matplotlib inline\n%reload_ext autoreload\n%autoreload 2\n\nsns.set_style('white')\nsns.set_context('paper', font_scale=1.5)\n\nplt.style.use('fivethirtyeight')\n\npd.set_option('display.width', 100)\npd.set_option('display.max_rows', 25)\npd.set_option('display.max_columns', 25)","fd5a7023":"white_wine = pd.read_csv('..\/input\/wine-quality\/winequality-white.csv')","4a4ed423":"white_wine # let's go to check overall data","cc931753":"wine_data = pd.read_csv('..\/input\/wine-quality\/winequality-white.csv', sep=';') # hopefully works","1c19d832":"wine_data # okay, let's check again","1890b4ac":"wine_data.describe(include='all') # let's check the statistics measure","4fb15869":"wine_data.isna().mean()","1873dcef":"wine_data.dtypes.to_frame() # let's check the type of the data","004d334b":"wine_data.quality.value_counts() # checking labels","230166dd":"wine_data.quality = wine_data.quality.replace([3, 4, 5], 0)\nwine_data.quality = wine_data.quality.replace([6, 7, 8, 9], 1)","00968269":"wine_data.quality.value_counts() # Let's check it ","bd638f81":"\"\"\"let's make a correlation and construct the heatmap visualization to better understand it.\"\"\"\n\nwine_data_correlation = wine_data.corr() # correlation\n\nplt.figure(figsize=(18, 10)) # figuring the size\n\nsns.heatmap(\n    wine_data_correlation, # data\n    annot=True, # annotation\n    cmap='summer' # I'll use summer cmap, coz, i like summer\n);","4acac835":"wine_data_correlation['quality'].sort_values(ascending=False) # let's sort it","bf823091":"\"\"\"Okay, let's try to make a cluster map\"\"\"\n\nsns.clustermap(\n    wine_data, # data\n    cmap='summer', # again, summer, coz i like it\n    standard_scale=1 # scale\n)\n\nplt.show();","cca2ad51":"\"\"\"Let's make a histogram\"\"\"\n\nwine_data.hist(\n    figsize=(18, 10), # figuring the size\n    color='blue' # color\n);","3834026c":"from sklearn.model_selection import train_test_split\n\nX = wine_data.drop(columns=['quality']) # features\ny = wine_data['quality'] # labels\n\n# split into train and test data\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\n\n# let's check the shape\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","25b2acea":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.pipeline import Pipeline\n\npipe = Pipeline([\n    ('scaler', MinMaxScaler()),\n    ('transformer', QuantileTransformer(\n        random_state=42)\n    ),\n    ('model', RandomForestClassifier(\n        n_estimators=1000,\n        random_state=42,\n        criterion='entropy'\n    ))\n])\n\npipe.fit(X_train, y_train)","8f42a3d1":"from sklearn import metrics\n\npred_train = pipe.predict(X_train)\npred_test = pipe.predict(X_test)","6408424e":"train_accuracy = metrics.accuracy_score(y_train, pred_train)\nprint(f\"Accuracy Score: {train_accuracy}\")\n\ntrain_precision = metrics.precision_score(y_train, pred_train)\nprint(f\"Precision Score: {train_precision}\")\n\ntrain_recall = metrics.recall_score(y_train, pred_train)\nprint(f\"Recall Score: {train_recall}\")","b8ab0079":"test_accuracy = metrics.accuracy_score(y_test, pred_test)\nprint(f\"Accuracy Score: {test_accuracy}\")\n\ntest_precision = metrics.precision_score(y_test, pred_test)\nprint(f\"Precision Score: {test_precision}\")\n\ntest_recall = metrics.recall_score(y_test, pred_test)\nprint(f\"Recall Score: {test_recall}\")","8708ab85":"train_output = pd.DataFrame({\n    'Train Actual Price': y_train,\n    'Train Predicted Price ': pred_train})\n\ntrain_output.to_csv('Train Prediction.csv', index=False)","46d5ceb2":"train_prediction_output = pd.read_csv('.\/Train Prediction.csv')\ntrain_prediction_output.head(10)","80b52214":"test_output = pd.DataFrame({\n    'Test Actual Price': y_test,\n    'Test Predicted Price ': pred_test})\n\ntest_output.to_csv('Test Prediction.csv', index=False)","c678d00f":"test_prediction_output = pd.read_csv('.\/Test Prediction.csv')\ntest_prediction_output.head(10)","9815b5f3":"# **That's it! thanks for watching! hope you guys like it! don't forget to give me feedback and upvote if you like it!**","0f88c1fd":"Great, I forgot to separate the data with `semicolon`, okay, let me fixed it XD","878793a7":"Okay, i think enough for the EDA, let's move on to Dividing and Splitting our data, but if you want to see more, you can check this Notebook by [Brenda Panda](https:\/\/www.kaggle.com\/brendan45774\/wine-quality-regression-prediction#Correlations).","c66270f7":"Wow, you see that? that's so amazing, looks like our model working fine!","4c2cdd9d":"`alcohol`, `pH`, `sulpates`, have a better correlation with `quality`","84cbe7ed":"# **EDA**\n\nIn statistics, exploratory data analysis is an approach of analyzing data sets to summarize their main characteristics, often using statistical graphics and other data visualization methods.","2e388e20":"# **Data Preprocessing**\n\nLet's check the data, if we're lucky, we won't get a missing value in the data.","59e912ef":"# **Import Libraries**","62b7142b":"okay great!","c847254b":"# **Train & Modeling**\n\nI'm using `RandomForestClassifier` for this. and `Pipelines` are a simple way to keep your data preprocessing and modeling code organized. Specifically, a pipeline bundles preprocessing and modeling steps so you can use the whole bundle as if it were a single step.","40d94bdf":"Looks like our model is good.","68298ffe":"Okay, this is awesome! the data doesn't have missing value, and all looks great! let's move on.","9567e951":"Great, it's work! okay, let's move on.","ee123f35":"## **Let's see the output of our prediction**","2e7e6e88":"# **Load Dataset**\n\nI'll use the White wine dataset, since this dataset is bigger than the Red one, idk, I've never drank wine or know what ingredients are in wine, if you have, can you tell me, which Wine have a better taste?","c2ea63f5":"**Quality columns data is not properly distributed and so we will convert it into 0, and 1**\n\n* **0 Bad White Wine** = 3, 4, 5\n* **1 Good White Wine** = 6, 7, 8, 9","8ac2bfd2":"# **Setup Library**","bac7f11c":"Okay, if we see visualization above, `sulphates - pH is better`.","8655a612":"# **Model Evaluation**\n\nOkay, let's evaluate our model","8dbcf32c":"# **Divide & Split Data**\n\nLet's divide and split the data before we train and modeling it.","eab099a5":"## **Here's my another notebook that i made:**\n\n**Data Analysis and Visualization:**\n\n- [Amazon Top Selling Book](https:\/\/www.kaggle.com\/knightbearr\/amazon-book-eda-top-5-knightbearr)\n- [Apple Stock Price Analysis](https:\/\/www.kaggle.com\/knightbearr\/apple-stock-price-analysis-knightbearr)\n- [World Covid Vaccination](https:\/\/www.kaggle.com\/knightbearr\/data-visualization-world-vaccination-knightbearr)\n- [Netflix Time Series Visualization](https:\/\/www.kaggle.com\/knightbearr\/netflix-visualization-time-series-knightbearr)\n- [Taiwan Weight Stock Analysist](https:\/\/www.kaggle.com\/knightbearr\/taiwan-weight-stock-index-analysis-knightbearr)\n\n**Regression and Classification:**\n\n- [Suplement Sales Price Prediction](https:\/\/www.kaggle.com\/knightbearr\/suplement-sales-prediction-easy-way-knightbearr)\n- [Pizza Price Prediction](https:\/\/www.kaggle.com\/knightbearr\/pizza-price-prediction-xgb-knightbearr)\n- [S&P 500 Companies](https:\/\/www.kaggle.com\/knightbearr\/pricesales-eda-rfr-knightbearr)\n- [Credit Card Fraud Detection](https:\/\/www.kaggle.com\/knightbearr\/credit-card-fraud-detection-knightbearr)\n- [Car Price V3](https:\/\/www.kaggle.com\/knightbearr\/car-price-v3-xgbregressor-knightbearr)\n- [House Price Iran](https:\/\/www.kaggle.com\/knightbearr\/house-price-iran-knightbearr)\n- [Loan Prediction](https:\/\/www.kaggle.com\/knightbearr\/loan-prediction-eda-knightbearr)\n\n**Deep Learning:**\n\n- [Rock Paper Scissors](https:\/\/www.kaggle.com\/knightbearr\/rock-paper-scissors-knightbearr)\n\n**Some Python Code:**\n\n- [Python Cheat Sheet](https:\/\/www.kaggle.com\/knightbearr\/python-cheat-sheet-knightbearr)\n- [22 Python Progam](https:\/\/www.kaggle.com\/knightbearr\/22-simple-python-program-knightbearr)","63ada0cd":"Amazing! It's rarely can find data that does not have a missing value, great job [Brenda Panda](https:\/\/www.kaggle.com\/brendan45774)!"}}