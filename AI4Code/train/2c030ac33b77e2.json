{"cell_type":{"0bb156c3":"code","99e6d0bc":"code","f2437189":"code","b238846f":"code","f1c32a65":"code","c1a81016":"code","92654f6d":"code","90ffd586":"code","4dbb5cc0":"code","27d774a7":"code","9b0eb8b9":"code","d4bf66d4":"code","d1012d8b":"code","30c7ac22":"code","22a8a487":"code","ef457902":"markdown","8201377e":"markdown","e98563e9":"markdown","2de5cc9e":"markdown"},"source":{"0bb156c3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.rcParams['figure.figsize'] = 16,9\nfrom tqdm import tqdm","99e6d0bc":"import os","f2437189":"def fast_csv_sampler(path, n, chunk_size=32):\n    fsize = os.path.getsize(path)\n    names = pd.read_csv(path, nrows=0).columns\n\n    with open(path, 'r') as f:\n        while True:\n            dfs = []\n\n            for i in range(n \/\/ chunk_size):\n                f.seek(np.random.randint(0, fsize))\n                f.readline()\n                dfs.append(pd.read_csv(f, nrows=chunk_size, names=names))\n\n            df = pd.concat(dfs, ignore_index=True)\n            df['pickup_datetime'] = df['pickup_datetime'].apply(pd.Timestamp).dt.tz_convert(None)\n\n            yield df","b238846f":"def prep_data(df, shuffle=False):\n    X_cat = np.vstack([\n        df['pickup_datetime'].dt.hour, # 0-23\n        df['pickup_datetime'].dt.weekday + 24, # 24-30\n        df['pickup_datetime'].dt.dayofyear + 30, # 31-396,\n        df['pickup_datetime'].dt.weekofyear + 396, # 397-449,\n        df['pickup_datetime'].dt.year - 2009 + 450, # 450-456\n        df['passenger_count'] + 456 # 457-463\n    ]).T\n    \n    X_deg = df[['pickup_latitude', 'pickup_longitude', 'dropoff_latitude', 'dropoff_longitude']].values\n    X_deg \/= 180\n    \n    X_num = np.vstack([\n        ((df['pickup_datetime'] - pd.Timestamp('2009-01-01')) \/ (pd.Timestamp('2015-07-01') - pd.Timestamp('2009-01-01'))).values\n    ]).T\n    \n    if 'fare_amount' in df.columns:\n        y = df['fare_amount'].values\n    \n    if shuffle:\n        rnd_ind = np.random.permutation(len(df))\n        X_deg = X_deg[rnd_ind]\n        X_cat = X_cat[rnd_ind]\n        X_num = X_num[rnd_ind]\n        \n        if 'fare_amount' in df.columns:\n            y = y[rnd_ind]\n        \n    if 'fare_amount' in df.columns: \n        return [X_deg, X_cat, X_num], y\n\n    return [X_deg, X_cat, X_num]","f1c32a65":"def prep_data_gen(df_gen, shuffle=False):\n    for df in df_gen:\n        df.dropna(inplace=True)\n        \n        is_weird = (df['fare_amount'] < 0)\n        is_weird |= ~df['pickup_latitude'].between(40, 42)\n        is_weird |= ~df['pickup_longitude'].between(-75, -72)\n        is_weird |= ~df['dropoff_latitude'].between(40, 42)\n        is_weird |= ~df['dropoff_longitude'].between(-75, -72)\n        is_weird |= (df['passenger_count'] == 0)\n        \n        df = df[~is_weird]\n        \n        yield prep_data(df, shuffle=shuffle)","c1a81016":"import keras.layers as lyr\nimport keras.activations as act\nfrom keras.models import Model\nimport keras.backend as K\nimport tensorflow as tf\nfrom keras.callbacks import EarlyStopping","92654f6d":"def K_haversine_bearing(x):\n    R = 6371\n    \n    x_rad = x * np.pi\n    \n    lat1, lng1, lat2, lng2 = x_rad[:,0], x_rad[:,1], x_rad[:,2], x_rad[:,3]\n    \n    dlat = lat2 - lat1\n    dlng = lng2 - lng1\n    \n    a = K.sin(dlat\/2) * K.sin(dlat\/2) + K.cos(lat1) * K.cos(lat2) * K.sin(dlng\/2) * K.sin(dlng\/2);\n    c = 2 * tf.atan2(K.sqrt(a), K.sqrt(1-a))\n    \n    d = K.log((R * c) + 1)\n    \n    x = K.sin(dlng) * K.cos(lat2)\n    y = (K.cos(lat1) * K.sin(lat2)) - (K.sin(lat1) * K.cos(lat2) * K.cos(dlng))\n    b = tf.atan2(x, y) \/ np.pi\n    \n    return K.concatenate([K.reshape(d, (-1, 1)), K.reshape(b, (-1, 1))])","90ffd586":"lyr_latlng_input = lyr.Input((4,))\nlyr_haversine_bearing = lyr.Lambda(K_haversine_bearing, name='haversine')(lyr_latlng_input)\n\nlyr_cat_input = lyr.Input((6,))\nlyr_cat_embeddings = lyr.Embedding(464, 8)(lyr_cat_input)\nlyr_cat_flatten = lyr.Flatten()(lyr_cat_embeddings)\n\nlyr_num_input = lyr.Input((1,))\n\nlyr_concat = lyr.concatenate([lyr_latlng_input, lyr_haversine_bearing, lyr_cat_flatten, lyr_num_input])\n\nlyr_dense1 = lyr.Dense(512, activation=act.selu)(lyr_concat)\nlyr_dense2 = lyr.Dense(128, activation=act.selu)(lyr_dense1)\nlyr_dense3 = lyr.Dense(32, activation=act.selu)(lyr_dense2)\nlyr_out = lyr.Dense(1, activation=act.selu)(lyr_dense3)\n\nmodel = Model([lyr_latlng_input, lyr_cat_input, lyr_num_input], lyr_out)\nmodel.summary()","4dbb5cc0":"for i in range(8):\n    model.compile(loss='mse', optimizer='nadam')\n    model.fit_generator(prep_data_gen(fast_csv_sampler('..\/input\/train.csv', 512, chunk_size=16)), steps_per_epoch=128, epochs=16, \n                        workers=2, use_multiprocessing=True)","27d774a7":"df_test = pd.read_csv('..\/input\/test.csv', parse_dates=['pickup_datetime'])\ndf_test.info()","9b0eb8b9":"y_test = np.clip(model.predict(prep_data(df_test), batch_size=512, verbose=1), 0, None)","d4bf66d4":"sns.distplot(np.log1p(y_test))","d1012d8b":"df_sub = pd.DataFrame({\n    'key': df_test['key'].values,\n    'fare_amount': y_test[:,0]\n}).set_index('key')","30c7ac22":"df_sub.head()","22a8a487":"df_sub.to_csv('submission.csv')","ef457902":"# Create Submission","8201377e":"# Keras","e98563e9":"# Read Data","2de5cc9e":"> # Prep Data Generator"}}