{"cell_type":{"4cc7f7a6":"code","d1be5a68":"code","97cb1457":"code","a469a28d":"code","24acefc0":"code","9258262e":"code","7c89c23c":"code","17c9409e":"code","eb56abfa":"code","d63c21f6":"code","c024116f":"code","ec8d241b":"code","0cfcf656":"code","dbb4729e":"code","b202fb7e":"code","e466e54d":"code","835d0d17":"code","459efd79":"code","ba7b884c":"code","0063e1ae":"code","1c9cb3d9":"code","9deb6af6":"code","52f81ddb":"code","78e387ef":"code","207fb14d":"code","b313ae2f":"code","09afceef":"code","427fd9b9":"code","f6765768":"code","1bcaa97d":"code","2f00c2a1":"code","1e7d5a68":"code","5687f9f2":"code","3662e5f4":"code","dae48bf6":"code","61325c4f":"code","a601e160":"code","729e93b7":"code","351ad292":"code","ab2abb0f":"code","75d1ad2e":"code","54d858da":"code","6955b45f":"code","ecdd580a":"code","fe7e8dea":"code","db05364c":"code","94aeea89":"code","cc0d0605":"code","1040c4c6":"code","c0a99f64":"code","4464a95d":"code","f96b4091":"code","ed8559b2":"code","3831ab92":"code","31d573ad":"code","bc8dff1e":"code","9e25d916":"code","5dee239f":"code","4b328c32":"markdown","797401b8":"markdown","205bd89a":"markdown","753bfea8":"markdown","b3a88a56":"markdown","b2fb479b":"markdown","b28fa9f2":"markdown","a516dbbb":"markdown","5c722e64":"markdown","ba9fba80":"markdown","242ff48d":"markdown","144fa83a":"markdown","46e75d16":"markdown","eb86e96b":"markdown"},"source":{"4cc7f7a6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# preprocessing\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, StratifiedKFold\nimport pandas_profiling as pp\n\n# models\nfrom sklearn.linear_model import LinearRegression, SGDRegressor, RidgeCV\nfrom sklearn.svm import SVR, LinearSVR\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, ExtraTreesRegressor \nfrom sklearn.ensemble import BaggingRegressor, AdaBoostRegressor, VotingRegressor \nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nimport sklearn.model_selection\nfrom sklearn.model_selection import cross_val_predict as cvp\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\n\n# model tuning\nfrom hyperopt import STATUS_OK, Trials, fmin, hp, tpe, space_eval\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d1be5a68":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","97cb1457":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","a469a28d":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","24acefc0":"valid_part = 0.3","9258262e":"train0 = pd.read_csv('\/kaggle\/input\/ammonium-prediction-in-river-water\/train.csv')","7c89c23c":"train0.head(10)","17c9409e":"train0.info()","eb56abfa":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# test.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/ammonium-prediction-in-river-water\/test.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'test.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","d63c21f6":"df1.head()","c024116f":"plotPerColumnDistribution(df1, 10, 5)","ec8d241b":"plotCorrelationMatrix(df1, 8)","0cfcf656":"plotScatterMatrix(df1, 20, 10)","dbb4729e":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# train.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/ammonium-prediction-in-river-water\/train.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'train.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","b202fb7e":"df2.head(5)","e466e54d":"plotPerColumnDistribution(df2, 10, 5)","835d0d17":"plotCorrelationMatrix(df2, 8)","459efd79":"plotScatterMatrix(df2, 20, 10)","ba7b884c":"pp.ProfileReport(train0)","0063e1ae":"train0 = train0.drop(['Id','3','4','5','6','7'], axis = 1)\ntrain0 = train0.dropna()\ntrain0.info()","1c9cb3d9":"train0.head(3)","9deb6af6":"target_name = 'target'","52f81ddb":"# For boosting model\ntrain0b = train0\ntrain_target0b = train0b[target_name]\ntrain0b = train0b.drop([target_name], axis=1)\n# Synthesis valid as test for selection models\ntrainb, testb, targetb, target_testb = train_test_split(train0b, train_target0b, test_size=valid_part, random_state=0)","78e387ef":"train_target0 = train0[target_name]\ntrain0 = train0.drop([target_name], axis=1)","207fb14d":"#For models from Sklearn\nscaler = StandardScaler()\ntrain0 = pd.DataFrame(scaler.fit_transform(train0), columns = train0.columns)","b313ae2f":"train0.head(3)","09afceef":"len(train0)","427fd9b9":"# Synthesis valid as test for selection models\ntrain, test, target, target_test = train_test_split(train0, train_target0, test_size=valid_part, random_state=0)","f6765768":"train.head(3)","1bcaa97d":"test.head(3)","2f00c2a1":"train.info()","1e7d5a68":"test.info()","5687f9f2":"acc_train_r2 = []\nacc_test_r2 = []\nacc_train_d = []\nacc_test_d = []\nacc_train_rmse = []\nacc_test_rmse = []","3662e5f4":"def acc_d(y_meas, y_pred):\n    # Relative error between predicted y_pred and measured y_meas values\n    return mean_absolute_error(y_meas, y_pred)*len(y_meas)\/sum(abs(y_meas))\n\ndef acc_rmse(y_meas, y_pred):\n    # RMSE between predicted y_pred and measured y_meas values\n    return (mean_squared_error(y_meas, y_pred))**0.5","dae48bf6":"def acc_boosting_model(num,model,train,test,num_iteration=0):\n    # Calculation of accuracy of boosting model by different metrics\n    \n    global acc_train_r2, acc_test_r2, acc_train_d, acc_test_d, acc_train_rmse, acc_test_rmse\n    \n    if num_iteration > 0:\n        ytrain = model.predict(train, num_iteration = num_iteration)  \n        ytest = model.predict(test, num_iteration = num_iteration)\n    else:\n        ytrain = model.predict(train)  \n        ytest = model.predict(test)\n\n    print('target = ', targetb[:5].values)\n    print('ytrain = ', ytrain[:5])\n\n    acc_train_r2_num = round(r2_score(targetb, ytrain) * 100, 2)\n    print('acc(r2_score) for train =', acc_train_r2_num)   \n    acc_train_r2.insert(num, acc_train_r2_num)\n\n    acc_train_d_num = round(acc_d(targetb, ytrain) * 100, 2)\n    print('acc(relative error) for train =', acc_train_d_num)   \n    acc_train_d.insert(num, acc_train_d_num)\n\n    acc_train_rmse_num = round(acc_rmse(targetb, ytrain) * 100, 2)\n    print('acc(rmse) for train =', acc_train_rmse_num)   \n    acc_train_rmse.insert(num, acc_train_rmse_num)\n\n    print('target_test =', target_testb[:5].values)\n    print('ytest =', ytest[:5])\n    \n    acc_test_r2_num = round(r2_score(target_testb, ytest) * 100, 2)\n    print('acc(r2_score) for test =', acc_test_r2_num)\n    acc_test_r2.insert(num, acc_test_r2_num)\n    \n    acc_test_d_num = round(acc_d(target_testb, ytest) * 100, 2)\n    print('acc(relative error) for test =', acc_test_d_num)\n    acc_test_d.insert(num, acc_test_d_num)\n    \n    acc_test_rmse_num = round(acc_rmse(target_testb, ytest) * 100, 2)\n    print('acc(rmse) for test =', acc_test_rmse_num)\n    acc_test_rmse.insert(num, acc_test_rmse_num)","61325c4f":"def acc_model(num,model,train,test):\n    # Calculation of accuracy of model \u0430\u043a\u0449\u044c Sklearn by different metrics   \n  \n    global acc_train_r2, acc_test_r2, acc_train_d, acc_test_d, acc_train_rmse, acc_test_rmse\n    \n    ytrain = model.predict(train)  \n    ytest = model.predict(test)\n\n    print('target = ', target[:5].values)\n    print('ytrain = ', ytrain[:5])\n\n    acc_train_r2_num = round(r2_score(target, ytrain) * 100, 2)\n    print('acc(r2_score) for train =', acc_train_r2_num)   \n    acc_train_r2.insert(num, acc_train_r2_num)\n\n    acc_train_d_num = round(acc_d(target, ytrain) * 100, 2)\n    print('acc(relative error) for train =', acc_train_d_num)   \n    acc_train_d.insert(num, acc_train_d_num)\n\n    acc_train_rmse_num = round(acc_rmse(target, ytrain) * 100, 2)\n    print('acc(rmse) for train =', acc_train_rmse_num)   \n    acc_train_rmse.insert(num, acc_train_rmse_num)\n\n    print('target_test =', target_test[:5].values)\n    print('ytest =', ytest[:5])\n    \n    acc_test_r2_num = round(r2_score(target_test, ytest) * 100, 2)\n    print('acc(r2_score) for test =', acc_test_r2_num)\n    acc_test_r2.insert(num, acc_test_r2_num)\n    \n    acc_test_d_num = round(acc_d(target_test, ytest) * 100, 2)\n    print('acc(relative error) for test =', acc_test_d_num)\n    acc_test_d.insert(num, acc_test_d_num)\n    \n    acc_test_rmse_num = round(acc_rmse(target_test, ytest) * 100, 2)\n    print('acc(rmse) for test =', acc_test_rmse_num)\n    acc_test_rmse.insert(num, acc_test_rmse_num)","a601e160":"random_forest = GridSearchCV(estimator=RandomForestRegressor(), param_grid={'n_estimators': [100, 1000]}, cv=5)\nrandom_forest.fit(train, target)\nprint(random_forest.best_params_)\nacc_model(2,random_forest,train,test)","729e93b7":"xgb_clf = xgb.XGBRegressor({'objective': 'reg:squarederror'}) \nparameters = {'n_estimators': [60, 70, 80, 90, 95, 100, 105, 110, 120, 130, 140], \n              'learning_rate': [0.005, 0.01, 0.05, 0.075, 0.1],\n              'max_depth': [3, 5, 7, 9],\n              'reg_lambda': [0.1, 0.3, 0.5]}\nxgb_reg = GridSearchCV(estimator=xgb_clf, param_grid=parameters, cv=5, n_jobs=-1).fit(trainb, targetb)\nprint(\"Best score: %0.3f\" % xgb_reg.best_score_)\nprint(\"Best parameters set:\", xgb_reg.best_params_)\nacc_boosting_model(7,xgb_reg,trainb,testb)","351ad292":"#%% split training set to validation set\nXtrain, Xval, Ztrain, Zval = train_test_split(trainb, targetb, test_size=0.2, random_state=0)\ntrain_set = lgb.Dataset(Xtrain, Ztrain, silent=False)\nvalid_set = lgb.Dataset(Xval, Zval, silent=False)","ab2abb0f":"params = {\n        'boosting_type':'gbdt',\n        'objective': 'regression',\n        'num_leaves': 31,\n        'learning_rate': 0.01,\n        'max_depth': -1,\n        'subsample': 0.8,\n        'bagging_fraction' : 1,\n        'max_bin' : 5000 ,\n        'bagging_freq': 20,\n        'colsample_bytree': 0.6,\n        'metric': 'rmse',\n        'min_split_gain': 0.5,\n        'min_child_weight': 1,\n        'min_child_samples': 10,\n        'scale_pos_weight':1,\n        'zero_as_missing': False,\n        'seed':0,        \n    }\nmodelL = lgb.train(params, train_set = train_set, num_boost_round=10000,\n                   early_stopping_rounds=2000,verbose_eval=500, valid_sets=valid_set)","75d1ad2e":"acc_boosting_model(8,modelL,trainb,testb,modelL.best_iteration)","54d858da":"fig =  plt.figure(figsize = (5,5))\naxes = fig.add_subplot(111)\nlgb.plot_importance(modelL,ax = axes,height = 0.5)\nplt.show();\nplt.close()","6955b45f":"# Extra Trees Regressor\n\netr = ExtraTreesRegressor()\netr.fit(train, target)\nacc_model(12,etr,train,test)","ecdd580a":"# AdaBoost Regression\n\nAda_Boost = AdaBoostRegressor()\nAda_Boost.fit(train, target)\nacc_model(13,Ada_Boost,train,test)","fe7e8dea":"models = pd.DataFrame({\n    'Model': ['Random Forest','ExtraTreesRegressor', \n              'AdaBoostRegressor','XGB', 'LGBM' ],\n    \n    'r2_train': acc_train_r2,\n    'r2_test': acc_test_r2,\n    'd_train': acc_train_d,\n    'd_test': acc_test_d,\n    'rmse_train': acc_train_rmse,\n    'rmse_test': acc_test_rmse\n                     })","db05364c":"pd.options.display.float_format = '{:,.2f}'.format","94aeea89":"print('Prediction accuracy for models by R2 criterion - r2_test')\nmodels.sort_values(by=['r2_test', 'r2_train'], ascending=False)","cc0d0605":"print('Prediction accuracy for models by relative error - d_test')\nmodels.sort_values(by=['d_test', 'd_train'], ascending=True)","1040c4c6":"print('Prediction accuracy for models by RMSE - rmse_test')\nmodels.sort_values(by=['rmse_test', 'rmse_train'], ascending=True)","c0a99f64":"# Plot\nplt.figure(figsize=[25,6])\nxx = models['Model']\nplt.tick_params(labelsize=14)\nplt.plot(xx, models['r2_train'], label = 'r2_train')\nplt.plot(xx, models['r2_test'], label = 'r2_test')\nplt.legend()\nplt.title('R2-criterion for 3 popular models for train and test datasets')\nplt.xlabel('Models')\nplt.ylabel('R2-criterion, %')\nplt.xticks(xx, rotation='vertical')\nplt.savefig('graph.png')\nplt.show()","4464a95d":"# Plot\nplt.figure(figsize=[25,6])\nxx = models['Model']\nplt.tick_params(labelsize=14)\nplt.plot(xx, models['d_train'], label = 'd_train')\nplt.plot(xx, models['d_test'], label = 'd_test')\nplt.legend()\nplt.title('Relative errors for 3 popular models for train and test datasets')\nplt.xlabel('Models')\nplt.ylabel('Relative error, %')\nplt.xticks(xx, rotation='vertical')\nplt.savefig('graph.png')\nplt.show()","f96b4091":"# Plot\nplt.figure(figsize=[25,6])\nxx = models['Model']\nplt.tick_params(labelsize=14)\nplt.plot(xx, models['rmse_train'], label = 'rmse_train')\nplt.plot(xx, models['rmse_test'], label = 'rmse_test')\nplt.legend()\nplt.title('RMSE for 3 popular models for train and test datasets')\nplt.xlabel('Models')\nplt.ylabel('RMSE, %')\nplt.xticks(xx, rotation='vertical')\nplt.savefig('graph.png')\nplt.show()","ed8559b2":"testn = pd.read_csv('\/kaggle\/input\/ammonium-prediction-in-river-water\/test.csv')\ntestn.info()","3831ab92":"testn = testn.drop(['Id','3','4','5','6','7'], axis = 1)\ntestn.head(3)","31d573ad":"#For models from Sklearn\ntestn = pd.DataFrame(scaler.transform(testn), columns = testn.columns)","bc8dff1e":"random_forest.fit(train0, train_target0)\nrandom_forest.predict(testn)[:3]","9e25d916":"etr.fit(train0, train_target0)\netr.predict(testn)[:3]","5dee239f":"Ada_Boost.fit(train0, train_target0)\nAda_Boost.predict(testn)[:3]","4b328c32":"## Starter code <a class=\"anchor\" id=\"2\"><\/a>","797401b8":" ###  ExtraTreesRegressor <a class=\"anchor\" id=\"5.13\"><\/a>\n\n","205bd89a":"###  LGBM <a class=\"anchor\" id=\"5.7\"><\/a>","753bfea8":"  ## Import libraries <a class=\"anchor\" id=\"2\"><\/a>","b3a88a56":"##  Models comparison <a class=\"anchor\" id=\"6\"><\/a>\n\n","b2fb479b":"###  XGB <a class=\"anchor\" id=\"5.7\"><\/a>\n","b28fa9f2":" ## Ammonim prediction in river water for best 5 regression models + Starter code <a class=\"anchor\" id=\"4\"><\/a>","a516dbbb":"Thanks for helping in this work to [Vitalii Mokin](https:\/\/www.kaggle.com\/vbmokin)\nand his kernels:\n* [BOD prediction in river - 15 regression models](https:\/\/www.kaggle.com\/vbmokin\/bod-prediction-in-river-15-regression-models)\n* [Code starter: Ammonium prediction in river](https:\/\/www.kaggle.com\/vbmokin\/code-starter-ammonium-prediction-in-river)","5c722e64":"##  Preparing to modeling <a class=\"anchor\" id=\"4\"><\/a>\n\n","ba9fba80":"##  Download datasets <a class=\"anchor\" id=\"2\"><\/a>\n\n","242ff48d":"##  EDA <a class=\"anchor\" id=\"3\"><\/a>\n\n","144fa83a":"###  Random Forest <a class=\"anchor\" id=\"5.7\"><\/a>\n\n","46e75d16":" ###  AdaBoost Regressor <a class=\"anchor\" id=\"5.13\"><\/a>\n\n\n","eb86e96b":" ##  Prediction <a class=\"anchor\" id=\"7\"><\/a>\n\n"}}