{"cell_type":{"452d625b":"code","d23acfce":"code","a03e4c51":"code","5e171b1d":"code","b891213c":"code","6e3c51a6":"code","16794341":"code","bf3c4435":"code","134f9db1":"code","a5847bb4":"code","52a13209":"code","ab6d625e":"code","45148068":"code","d3e9c69f":"code","6ff7204d":"code","c186394a":"code","20a508c0":"code","4e091159":"code","f489949d":"code","898951ff":"code","52cbdff2":"code","cf3e8226":"code","706240cf":"code","0de24749":"code","984d3f26":"code","824c0277":"code","50f433f6":"code","a7cb8acb":"code","4addd8a1":"code","c837ed24":"code","3b28d44e":"code","f8d20a69":"code","6f820cb3":"code","a4aaddf0":"code","dfe5f8b5":"code","d4fcf11e":"code","63efd1b2":"code","1549c846":"code","22223067":"code","abf1d3d4":"code","c1433a39":"code","151fdd5c":"code","af5990ca":"code","934375cf":"code","1fb789c5":"code","7713641b":"code","196ed8bc":"code","d7c49645":"code","27412f8f":"code","8a9b649d":"code","40cc56c2":"code","221632b0":"code","c9424fe9":"code","1e8295e1":"code","63cc6775":"code","7c2626a0":"code","e6905c15":"code","1f44d846":"code","7e3832bc":"code","acf7a196":"code","70ce0b43":"code","d0f772af":"code","b6a3895f":"code","798370f5":"code","49270c69":"markdown","150897e2":"markdown","96ce420a":"markdown","7a88b7ff":"markdown","30b40903":"markdown","9b108f0c":"markdown","6b67f570":"markdown","abc5f139":"markdown","8578a303":"markdown","df9f86be":"markdown","914517ea":"markdown","5f0e7b0c":"markdown","e42297c4":"markdown","71833ea1":"markdown","8a5653e0":"markdown","0523dd6e":"markdown","0a8d9b2b":"markdown","c58ae2d0":"markdown","e8c93977":"markdown","187e32c4":"markdown","2613a93f":"markdown","7ad0013a":"markdown","610b01ce":"markdown","981312a5":"markdown","274ac517":"markdown","96e40b13":"markdown"},"source":{"452d625b":"import pickle                         \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport sklearn\n","d23acfce":"# We are dropping the first column, So we start it from 1 2 3 4. Because it was not important to us. \n\n\ndf=pd.read_csv(\"..\/input\/advertising-dataset\/advertising.csv\")","a03e4c51":"df","5e171b1d":"df.head()  #viewing the first five rows of the Data.","b891213c":"df.tail()   #Viewing the Last 5 rows of the Data. ","6e3c51a6":"df.shape  #Shapes and Dimensions of the Data. ","16794341":"df.info()  # Datatype of the Columns. ","bf3c4435":"df.isnull().sum()","134f9db1":"pd.set_option('precision', 2)         # 2 values after precision. \ndf.describe()                 # Statistical Summary of the Data.   ","a5847bb4":"df.describe().T        # Transpose of the Describe function.   ","52a13209":"(df == 0).sum(axis=0)","ab6d625e":"df.Sales.value_counts()","45148068":"import matplotlib.pyplot as plt\ncorrmat = df.corr()                        #pariwise correlation of all the columns \ntop_corr_features = corrmat.index                     #  Index(['TV', 'Radio', 'Newspaper', 'Sales'], dtype='object')\nplt.figure(figsize = (10,10))\n\n#heatmap of the data\n\ng = sns.heatmap(df[top_corr_features].corr(),annot = True, cmap=\"RdYlGn\") # annot present values in the blocks. cmap = colormap ","d3e9c69f":"pd.set_option('precision', 2)         # 2 values after precision. \n\ndf.corr()   #Correlation between Variables.","6ff7204d":"pd.set_option('precision', 2)         # 2 values after precision. \n\ndf.corr().T","c186394a":"# Pair plot of correlation\n\nimport seaborn as sns\nsns.pairplot(df)","20a508c0":"import warnings\nwarnings.filterwarnings(\"ignore\")","4e091159":"sns.regplot(df.TV, df.Sales, order=1, ci=None, scatter_kws={'color':'g', 's':9})   # 's':9 denote the size of dots. \nplt.xlim(-10,310)                                                                 \nplt.ylim(0,30)                                                                # y axis values are start from 0 \n#plt.ylim(bottom=0)\nplt.show() ","f489949d":"sns.regplot(df.Radio, df.Sales, order=1, ci=None, scatter_kws={'color':'g', 's':9})    \nplt.xlim(-2,55)\nplt.ylim(bottom=0)   \n#plt.ylim(0,30)      \nplt.show() ","898951ff":"sns.regplot(df.Newspaper, df.Sales, order=1, ci=None, scatter_kws={'color':'g', 's':9}) \nplt.xlim(-10,115)  \n#plt.ylim(0,30)      \nplt.ylim(bottom=0)\nplt.show() ","52cbdff2":"from sklearn.preprocessing import scale                # we can also use StandardScalar. \nX = scale(df.TV, with_mean=True, with_std=False).reshape(-1,1)\ny = df.Sales     ","cf3e8226":"X","706240cf":"df.describe().T        # Transpose of the Describe function.   ","0de24749":"X[0:5]      #printing first five rows. ","984d3f26":"X.mean()   #very near to zero. ","824c0277":"X.std()        # we give false value. So it is same as it is. ","50f433f6":"import sklearn\nimport sklearn.linear_model as skl_lm\nfrom sklearn.linear_model import LinearRegression\n\nregr = skl_lm.LinearRegression()\nregr.fit(X,y)\nLinearRegression()\n\nregr.intercept_ ","a7cb8acb":"regr.coef_","4addd8a1":"min_rss = np.sum((regr.intercept_+regr.coef_*X - y.values.reshape(-1,1))**2)","c837ed24":"min_rss","3b28d44e":"from sklearn.metrics import mean_squared_error, r2_score\nSales_pred = regr.predict(X)                       # Value of Target variable when we predict it with the Independent variable. \nr2_score(y, Sales_pred) ","f8d20a69":"mean_squared_error(y, Sales_pred)                        # Know about the error between actual and predicted. ","6f820cb3":"regr = skl_lm.LinearRegression()\nX = df.TV.values.reshape(-1,1)\ny = df.Sales\nregr.fit(X,y)\nregr.score(X,y)","a4aaddf0":"regr.intercept_","dfe5f8b5":"regr.coef_","d4fcf11e":"min_rss = np.sum((regr.intercept_+regr.coef_*X - y.values.reshape(-1,1))**2)","63efd1b2":"min_rss","1549c846":"mse = min_rss\/len(y)                                   #  min_rss \/ degree of freedom   \nmse                                     #value should be 0 to infinite but not negative. ","22223067":"\nfrom sklearn.metrics import mean_squared_error, r2_score\nSales_pred = regr.predict(X)                       # Value of Target variable when we predict it with the Independent variable. \nr2_score(y, Sales_pred) \n","abf1d3d4":"mean_squared_error(y, Sales_pred)                        # Know about the error between actual and predicted. ","c1433a39":"#  OLS = ordinary least square method. \n\n\n\n\nimport statsmodels.api as sm\nX2 = sm.add_constant(X)\nest = sm.OLS(y,X2) \nest2=est.fit()\nest2.summary()","151fdd5c":"import statsmodels.formula.api as smf\nest = smf.ols('Sales ~ TV', df).fit()\nest.summary()   # est.summary().tables[0\/1\/2]   \n","af5990ca":"# Regression RSS and MSE\nest.params                         \n","934375cf":"# RSS\n((df.Sales - (est.params[0] + est.params[1] * df.TV))** 2).sum()          # **2 means squaring. \n","1fb789c5":"# MSE\n((df.Sales - (est.params[0] + est.params[1]*df.TV))** 2).sum()\/len(df.Sales)\n","7713641b":"# Linear Regression Sales and Radio\n\nest = smf.ols('Sales ~ Radio', df).fit()\n\n","196ed8bc":"print(est.summary().tables[1])\n","d7c49645":"# Linear Regression Sales and Newspaper\n\nest = smf.ols('Sales ~ Newspaper', df).fit()\nprint(est.summary().tables[1])\n","27412f8f":"est = smf.ols('Sales ~ TV + Radio + Newspaper', df).fit()\nest.summary()","8a9b649d":"from sklearn.model_selection import train_test_split\n\nX = df.drop(['Sales'],axis=1)\ny = df['Sales']\nX_train, X_test, y_train, y_test = train_test_split(X , y, test_size=0.5, random_state=0)\n","40cc56c2":"import sklearn.linear_model as skl_lm\nregr = skl_lm.LinearRegression()\nregr.fit(X_train,y_train)\n\nround( (regr.score(X_test,y_test)*100) , 2   )","221632b0":"\nround( (regr.score(X_train,y_train)*100) , 2   ) ","c9424fe9":"regr.score(X_train,y_train)","1e8295e1":"regr.score(X_test,y_test)","63cc6775":"y_pred = regr.predict(X_test)\ny_pred","7c2626a0":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","e6905c15":"regr.predict([[20,334.34,34.3443]])","1f44d846":"regr.predict([[20,30,230]])","7e3832bc":"\nplt.figure(figsize=(3,3) ) \nplt.scatter(y_test, y_pred) \nplt.xlabel('Actual')\nplt.ylabel('Predicted')\nplt.show()\n","acf7a196":"df1 = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred, 'Difference': y_test-y_pred})\ndf1.head(10)\n","70ce0b43":"df.describe()","d0f772af":"df.describe().T","b6a3895f":"import joblib\njoblib.dump(regr, \"marketing_model.pkl\")    ","798370f5":"import pandas_profiling as pp\nprofile = pp.ProfileReport(df)\nprofile.to_file(\"output.html\")\n","49270c69":"# R-Sq using Sklearn\n","150897e2":"# Data Normalization\n","96ce420a":"# Relationship between Sales and Newspaper\n","7a88b7ff":"So, There is only one value which is zero. So, we do not required to handle it. So, Data Cleansing is not required. ","30b40903":"# We can see that the min value of Radio is zero. We need to confirm how many zero values existing in the dataset.\n\n","9b108f0c":"Quantify the extent to which model fits the data or measure of lack of fit using 4 Methods\n\nMultiple R   <br>\n R Statistics<br>\nAdjusted  Statistics<br>\nResidual Standard Error<br>","6b67f570":"# Analysis of Zero Values in Predictors\n","abc5f139":"We have 121 Unique values. So our response variable is continuous. ","8578a303":"# Residual Sum of Squares","df9f86be":"The value of Beta_1  is less than 0.05 then we can say there is a relationship. If we spend 1000 dollers in Newspaper then we got 202.5+9.3116 in Sales. ","914517ea":"# Relationship - Predictor and Response\n","5f0e7b0c":"# Response Variable Analysis","e42297c4":"# Relationship between Sales and TV\n","71833ea1":"# Linear Regression for Scaled Data using Sklearn","8a5653e0":"# MSE using SKLearn\n\n","0523dd6e":"# MSE\n","0a8d9b2b":"# Regression Summary using Statsmodel","c58ae2d0":"We need the Scaling the Data because the values of the TV are more greater than the Radio and Newspaper.  ","e8c93977":"# Datatype \n","187e32c4":"# Relationship between Sales and Radio\n","2613a93f":"# Checking Null Values","7ad0013a":"# Linaer Regression for Unscaled Data using Sklearn","610b01ce":"# Scaling the TV Data.\n","981312a5":"# Multiple Linear Regression\n","274ac517":"# Multiple Linear Regression","96e40b13":"# Observations\n\nOur observations are as follows\n\nNaN values do not present in the data set. Because of the Non-Null Count and number of rows in the dataset match.\n\nThere are 3 Input Variables and 1 Output Variable (Sales)\n\nThe data type of all the input variables is float64. The data type of out variable (Sales) is float64.\n\nShows that all the input as well as output variables are continuous (quantitative) data types.\n\nNone of the columns contain the Null Values"}}