{"cell_type":{"2923c836":"code","f70d8643":"code","4443890f":"code","1e9b23f8":"code","39d83f18":"code","ae734aee":"code","f0ec1ad7":"code","375cbe4c":"code","fa817f4d":"code","dd00e133":"code","2b657f2b":"code","45a491d1":"code","6deeaa9e":"code","dabba797":"code","3b99b18d":"code","4f9eb4bf":"code","d2acb658":"code","24a02e08":"code","244ba82a":"code","3b31faea":"code","a6979179":"code","a28572d7":"code","e6c6ae28":"code","ecc25f0c":"code","bb1dbc43":"code","e7c711d1":"code","0771a509":"markdown","d8ea84e0":"markdown","ed6bad88":"markdown","f151164d":"markdown","d46274ca":"markdown","783666cf":"markdown","695d01f7":"markdown","aca55762":"markdown","b0927214":"markdown","c1281053":"markdown","ff2722aa":"markdown","bcace876":"markdown","9343e709":"markdown","7b3d24e4":"markdown","56343237":"markdown","c8e28b1b":"markdown","4a4b5588":"markdown","6abc105b":"markdown","e7f50248":"markdown"},"source":{"2923c836":"import numpy as np\nimport pandas as pd\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\n\nimport warnings\nwarnings.filterwarnings('ignore')","f70d8643":"df=pd.read_excel('\/kaggle\/input\/superstore\/US Superstore data.xls')\ndf.head()","4443890f":"print(\"This dataset has {} rows and {} columns\".format(df.shape[0],df.shape[1]))","1e9b23f8":"df.isnull().sum()","39d83f18":"df.info()","ae734aee":"df[['Sales','Profit','Discount']].describe()","f0ec1ad7":"# from datetime import datetime\n# start = datetime(2015,10,11)\n# end = datetime(2016,10,11)\n# df[(df['Order Date']>start) &(df['Order Date']<end)].shape\n# df.drop('Row ID',inplace=True,axis=1)\ndf[['Order ID','Ship Mode','Customer Name','Order Date','Product Name']].head(10).style\\\n        .background_gradient(cmap='RdPu',subset=['Order Date'])","375cbe4c":"fig = px.sunburst(df,path=['Country','Category','Sub-Category'],\n                 values='Sales',color='Category',\n                 hover_data =['Sales','Quantity','Profit'])\nfig.update_layout(height=1000,title_text='Product Categories & Sub-Categories')\nfig.show()","fa817f4d":"temp = df[['State','City','Sales']].groupby(['State','City'])['Sales'].sum().reset_index()\nfig = px.treemap(temp,path=['State','City'], values='Sales')\nfig.update_layout(height=1000,title='City-wise Sales',)\n                 #color_discrete_sequence = px.colors.qualitative.Plotly)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","dd00e133":"d = []\nfor i in df[\"Product Name\"].unique():\n    d.append([i,round(df[df['Product Name'] == i]['Sales'].sum(),2)])\ntemp = pd.DataFrame(d,columns=['Product Name','Sales'])\n# temp.reset_index(inplace=True)\n# del temp['index']\ntemp.sort_values('Sales',ascending=False).head().fillna(0).style\\\n        .background_gradient(cmap='Greens',subset=['Sales'])","2b657f2b":"df['Cost'] = df['Sales'] - df['Profit']\ndf['Profit%'] = df['Profit']\/df['Cost']*100\ndf[['Product Name','Profit%']].sort_values('Profit%',ascending=False).head().fillna(0).style\\\n        .background_gradient(cmap='Greens',subset=['Profit%'])","45a491d1":"d = []\nfor i in df['Sub-Category'].unique():\n    sales = round(df[df['Sub-Category']==i]['Sales'].sum(),2)\n    profit = round(df[df['Sub-Category']==i]['Profit'].sum(),2)\n    d.append([i,sales,profit])\ntemp = pd.DataFrame(d,columns=['Sub-Category','Sales','Profit'])\ntemp = temp.sort_values('Sales',ascending=True)\n\nfig = go.Figure(data=[go.Bar(name='Sales',x=temp['Sales'],y=temp['Sub-Category'],orientation='h',marker_color = 'green'),\n                      go.Bar(name='Profit',x=temp['Profit'],y=temp['Sub-Category'],orientation='h',marker_color = 'navy')])\nfig.update_layout(template='simple_white',title='Sales & Profit of each Sub-Category',height=700) #barmode='stack'\nfig.show()","6deeaa9e":"# df[(df['Region']=='South') & (df['Sub-Category']=='Binders')]\nfig = go.Figure(data=[go.Bar(name=region,x=df['Sub-Category'],y=df[df['Region']==region]['Sales'],marker_color=color) for region,color in zip(df.Region.unique(),['red','navy','green','brown'])])\nfig.update_layout(barmode='group',template='simple_white',title='Region-wise Sub-Category products Sales')\nfig.show()","dabba797":"temp = df['Segment'].unique()\nfig = go.Figure(data=go.Bar(x=temp,y=[df[df['Segment']==i]['Sales'].sum() for i in temp]))\nfig.update_traces(marker_color='rgb(171,241,255)', marker_line_color='rgb(12,0,335)',\n                  marker_line_width=2, opacity=0.6)\nfig.update_layout(template='simple_white',title='Sales of each Segment')\nfig.show()","3b99b18d":"temp = df.sort_values('Profit',ascending=False)[['Sales','Profit','Customer Name']].head(10)\nfig = go.Figure(data=[go.Bar(name='Profit',x=temp['Profit'],y=temp['Customer Name'],orientation='h',marker_color='navy'),\n                      go.Bar(name='Sales',x=temp['Sales'],y=temp['Customer Name'],orientation='h',marker_color='green')])\nfig.update_layout(template='simple_white',title='Sales & Profit of 10 Best Customers',barmode='stack',\n                 yaxis_categoryorder = 'total ascending')\nfig.show()","4f9eb4bf":"df['Customer Name'].value_counts().nlargest(10)","d2acb658":"df['Lead Time'] = (df['Ship Date'] - df['Order Date']).dt.days\ndf['Week'] = df['Order Date'].dt.week\ndf['Year'] = df['Order Date'].dt.year\ndf['Month'] = df['Order Date'].dt.month","24a02e08":"week14 = df[df['Year']==2014][['Week','Sales']].groupby(['Week']).sum()\nweek15 = df[df['Year']==2015][['Week','Sales']].groupby(['Week']).sum()\nweek16 = df[df['Year']==2016][['Week','Sales']].groupby(['Week']).sum()\nweek17 = df[df['Year']==2017][['Week','Sales']].groupby(['Week']).sum()\nmonth14 = df[df['Year']==2014][['Month','Sales']].groupby(['Month']).sum()\nmonth15 = df[df['Year']==2015][['Month','Sales']].groupby(['Month']).sum()\nmonth16 = df[df['Year']==2016][['Month','Sales']].groupby(['Month']).sum()\nmonth17 = df[df['Year']==2017][['Month','Sales']].groupby(['Month']).sum()\nweek14.rename(columns={'Sales':'Sales14'},inplace=True)\nweek15.rename(columns={'Sales':'Sales15'},inplace=True)\nweek16.rename(columns={'Sales':'Sales16'},inplace=True)\nweek17.rename(columns={'Sales':'Sales17'},inplace=True)\nmonth14.rename(columns={'Sales':'Sales14'},inplace=True)\nmonth15.rename(columns={'Sales':'Sales15'},inplace=True)\nmonth16.rename(columns={'Sales':'Sales16'},inplace=True)\nmonth17.rename(columns={'Sales':'Sales17'},inplace=True)\nweek = week14.join(week15,on='Week').join(week16,on='Week').join(week17,on='Week')\nmonth = month14.join(month15,on='Month').join(month16,on='Month').join(month17,on='Month')\nmonth.head()","244ba82a":"fig = make_subplots(rows=4, cols=1,shared_xaxes=True)\nfig.add_trace(go.Scatter(x=week.index, y=week['Sales14'],mode='lines+markers',\n                         name='2014',marker_color='blue'), row=1, col=1)\nfig.add_trace(go.Scatter(x=week.index, y=week['Sales15'],mode='lines+markers',\n                         name='2015',marker_color='green'), row=2, col=1)\nfig.add_trace(go.Scatter(x=week.index, y=week['Sales16'],mode='lines+markers',\n                         name='2016',marker_color='red'), row=3, col=1)\nfig.add_trace(go.Scatter(x=week.index, y=week['Sales17'],mode='lines+markers',\n                         name='2017',marker_color='navy'), row=4, col=1)\nfig.update_layout(template='simple_white',height = 1000,\n                   title='Sales per Week')\nfig.show()","3b31faea":"fig = make_subplots(rows=4, cols=1,shared_xaxes=True)\nfig.add_trace(go.Scatter(x=month.index, y=month['Sales14'],mode='lines+markers',\n                         name='2014',marker_color='blue'), row=1, col=1)\nfig.add_trace(go.Scatter(x=month.index, y=month['Sales15'],mode='lines+markers',\n                         name='2015',marker_color='green'), row=2, col=1)\nfig.add_trace(go.Scatter(x=month.index, y=month['Sales16'],mode='lines+markers',\n                         name='2016',marker_color='red'), row=3, col=1)\nfig.add_trace(go.Scatter(x=month.index, y=month['Sales17'],mode='lines+markers',\n                         name='2017',marker_color='navy'), row=4, col=1)\nfig.update_layout(template='simple_white',height = 1000,\n                   title='Sales per month')\nfig.show()","a6979179":"df[['City','Profit','Profit%']].sort_values('Profit',ascending=False).head(10).style\\\n    .background_gradient(cmap='Greens',subset=['Profit'])\\\n    .background_gradient(cmap='RdPu',subset=['Profit%'])","a28572d7":"df[['State','Profit','Profit%']].sort_values('Profit',ascending=False).head(10).style\\\n    .background_gradient(cmap='Greens',subset=['Profit'])\\\n    .background_gradient(cmap=\"RdPu\",subset=['Profit%'])","e6c6ae28":"df.groupby(['State'])['Sales'].nunique().sort_values(ascending=False)","ecc25f0c":"from geopy.geocoders import Nominatim\nfrom geopy.extra.rate_limiter import RateLimiter\ngeolocator = Nominatim(user_agent=\"my-dashboard\")\ngeocode = RateLimiter(geolocator.geocode, min_delay_seconds=1)\n \nl = [] \nfor address in df.City.unique():\n    location = geocode(address)\n    l.append([address,location.latitude,location.longitude])\ndf_city = pd.DataFrame(l,columns=['City','Latitude','Longitude'])\ndf_city.head()","bb1dbc43":"geography = pd.merge(df,df_city,on='City',how='left')[['Profit','Sales','City','Latitude','Longitude']]\ngeography.head()","e7c711d1":"fig = px.scatter_mapbox(\n        geography,\n        title='map',\n        lat=\"Latitude\",\n        lon=\"Longitude\",\n        color=\"Sales\",\n        size=\"Sales\",\n        size_max=80,\n        hover_name=\"Profit\",\n        hover_data=[\"City\", \"Profit\", \"Sales\"],\n#         color_continuous_scale='Profit',\n    )\n\nfig.layout.update(\n        margin={\"r\": 0, \"t\": 0, \"l\": 0, \"b\": 0},\n        height=700,\n        # width=700,\n        coloraxis_showscale=True,\n        mapbox_style='stamen-toner',\n        mapbox=dict(center=dict(lat=39.7837304, lon=-100.4458825), zoom=3),\n    )\n\nfig.data[0].update(\n        hovertemplate=\"Sales: \u20b9%{customdata[2]} <br>Profit: \u20b9%{customdata[1]}<br>City: %{customdata[0]}\"\n    )\nfig.show()","0771a509":"### Where your customers are?","d8ea84e0":"# Analyze the Geography","ed6bad88":"$Profit = SP - CP$\n\n$CP = SP - Profit$\n\n$Profit Percentage = Profit\/CP * 100$\n* Remember it should be per unit of quantity basis but in above expression, whole expression becomes per unit basis","f151164d":"Frequent Purchase Customer","d46274ca":"* Check out my web app - https:\/\/busidashboard.herokuapp.com\/. \n* Reference - https:\/\/github.com\/yesdeepakmittal\/Business_Dashboard","783666cf":"# Analyse the Products at Sub-Category level","695d01f7":"Segmentation","aca55762":"Above graphs indicates\n* Share of each category & sub-category in Sales\n* Which sub-category belongs to which category\n* Share of sub-category for each category(click on any category to get detailed view of each sub-category)","b0927214":"Most Profitable transaction cities","c1281053":"# Analyze the Customers","ff2722aa":"Most Profitable transaction States","bcace876":"Above graph indicates-\n* Which city and state has how much sales\n* Size of a tile indicates corresponding sales","9343e709":"Best Customers","7b3d24e4":"#### Region-wise Product Sales","56343237":"Transaction counts in different states","c8e28b1b":"It is observed that there are many records on same Order ID which is of same customer who has chosen the same ship mode on same date.","4a4b5588":"# Analyze the Orders & Sales","6abc105b":"EDA","e7f50248":"### Top 5 products"}}