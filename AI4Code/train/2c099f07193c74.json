{"cell_type":{"f73556d6":"code","4cbd29be":"code","03f1afeb":"code","9deb4a16":"code","6c54197a":"code","64a02fb8":"code","4e865186":"code","03260a0f":"code","6bdeeb06":"code","548c20fd":"code","967d66ae":"code","7f9130d2":"code","6f870b63":"code","99e9d982":"code","c181036d":"code","6f9e3906":"code","7b09dba3":"code","4bfb3946":"code","e2fea3fa":"code","1d3fd055":"code","1fc9d491":"code","d87c94a5":"markdown","385249c2":"markdown","d20b9d12":"markdown","18947380":"markdown","ddadbbed":"markdown","ad899119":"markdown","f47b5c5d":"markdown","4719b6b5":"markdown","3acea593":"markdown","6fb549e3":"markdown","afa56bf5":"markdown","8a33d505":"markdown","f2c0d8b0":"markdown","2224ad92":"markdown"},"source":{"f73556d6":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","4cbd29be":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","03f1afeb":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","9deb4a16":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","6c54197a":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","64a02fb8":"nRowsRead = None # specify 'None' if want to read whole file\n\ndf = pd.read_csv('\/kaggle\/input\/turkish_movie_sentiment_dataset.csv', delimiter=',', nrows = nRowsRead)\ndf.dataframeName = 'turkish_movie_sentiment_dataset.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","4e865186":"df.head(5)","03260a0f":"plotPerColumnDistribution(df, 10, 5)","6bdeeb06":"import gensim, logging\nimport re\nlogging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)\n \nintab    = '\u00c7\u011eI\u0130\u00d6\u015e\u00dc'\nouttab   = '\u00e7\u011f\u0131i\u00f6\u015f\u00fc'\ntr_lower = str.maketrans(intab, outtab)\n\n# Lower all character and remove number and punctiations\ndf[\"comment\"] = df[\"comment\"].apply(lambda x : x.translate(tr_lower).lower())\ndf[\"comment\"] = df[\"comment\"].apply(lambda x : re.sub(r\"[^a-z\u00e7\u011f\u0131\u00f6\u015f\u00fc]\", ' ', x))\ndf[\"comment\"] = df[\"comment\"].apply(lambda x : re.sub(r\"\\s+\", ' ', x))\n\n\n# For word2vec training we need list of list format\n# sentences = [['first', 'sentence'], ['second', 'sentence']]\nsentences = df[\"comment\"].apply(lambda x : x.split())","548c20fd":"# train word2vec on the sentences\nmodel = gensim.models.Word2Vec(sentences, min_count=3,  window=5, workers=4, size=300)","967d66ae":"model.wv.most_similar(\"iyi\")","7f9130d2":"model.wv.most_similar(\"k\u00f6t\u00fc\")","6f870b63":"import numpy as np\ndf[\"point\"] = df[\"point\"].astype(str).str.replace(\",\", \".\")\ndf[\"point\"] = df[\"point\"].astype(float)\ndf[\"label\"] = np.where(df[\"point\"] > 2.5, 1, 0)\ndf.head()","99e9d982":"def get_mean_vector(word2vec_model, words):\n    # remove out-of-vocabulary words\n    words = [word for word in words if word in word2vec_model.wv]\n    if len(words) >= 1:\n        return np.mean(word2vec_model[words], axis=0)\n    else:\n        return np.zeros((1, word2vec_model.vector_size))","c181036d":"vectors = []\nfor sentence in sentences:\n    vec = get_mean_vector(model, sentence)\n    vectors.append(vec)","6f9e3906":"from sklearn.model_selection import train_test_split\n\nvectors = np.array(vectors)\nX = np.vstack(vectors)\ny = df[\"label\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.25, random_state=42)","7b09dba3":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators=100, max_depth=2, random_state=0)\nrf.fit(X_train, y_train)","4bfb3946":"train_predictions = rf.predict(X_train)\ntest_predictions = rf.predict(X_test)\nvalid_predictions = rf.predict(X_valid)","e2fea3fa":"from sklearn.metrics import precision_recall_fscore_support\nfrom sklearn.metrics import accuracy_score\n\nprint(\"accuracy: \" + str(accuracy_score(y_train, train_predictions)))\nprecision_recall_fscore_support(y_train, train_predictions)","1d3fd055":"print(\"accuracy: \" + str(accuracy_score(y_test, test_predictions)))\nprecision_recall_fscore_support(y_test, test_predictions)","1fc9d491":"print(\"accuracy: \" + str(accuracy_score(y_valid, valid_predictions)))\nprecision_recall_fscore_support(y_valid, valid_predictions)","d87c94a5":"There is 1 csv file in the current version of the dataset:\n","385249c2":"## Conclusion\nWe've done a simple text cleanup to get started. Then we train the word2vec model for getting meaning of the word. We obtained properties for a simple model by averaging word vectors.\n\nOur model not overfit. But our model did not understand bad reviews very well.\nI will do more explanation notebook part2.\n\nSee u soon","d20b9d12":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","18947380":"## Introduction","ddadbbed":"## Exploratory Analysis","ad899119":"Distribution graphs (histogram\/bar graph) of sampled columns:","f47b5c5d":"Let's take a quick look at what the data looks like:","4719b6b5":"# Mean Vectors","3acea593":"### Let's check 1st file: \/kaggle\/input\/turkish_movie_sentiment_dataset.csv","6fb549e3":"# Clean Text","afa56bf5":"# Train Word Embeddings\nhttps:\/\/www.linkedin.com\/pulse\/word2vec-fasttext-glove-mustafa-keskin\/","8a33d505":"# Get Predictions","f2c0d8b0":"# Train Simple Model","2224ad92":"Now you're ready to read in the data and use the plotting functions to visualize the data."}}