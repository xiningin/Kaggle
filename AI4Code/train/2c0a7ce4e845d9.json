{"cell_type":{"93c5ceba":"code","9679ea94":"code","d2cf3136":"code","be8d722c":"code","1f95510d":"code","fdf64536":"code","43a9fcd6":"code","0b5565a1":"code","a91d68c7":"code","5c4324b4":"code","ad537fc6":"code","922f3d25":"code","3a9f39af":"code","d3249fc1":"code","3a9e4c3b":"code","3abc3cd9":"markdown","8201c8ed":"markdown","3e80905f":"markdown","7ccda8b1":"markdown","35fcedb8":"markdown","a3146569":"markdown"},"source":{"93c5ceba":"# Code you have previously used to load data\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom learntools.core import *\n\n# Path of the file to read. We changed the directory structure to simplify submitting to a competition\niowa_file_path = '..\/input\/train.csv'\nhome_data = pd.read_csv(iowa_file_path)\n\n# path to file you will use for predictions\ntest_data_path = '..\/input\/test.csv'\ntest_data = pd.read_csv(test_data_path)\n\ny = home_data.SalePrice\nX = home_data.iloc[:,:-1]","9679ea94":"home_data.head(5)","d2cf3136":"X.head(5)","be8d722c":"# Low cardinality columns\nlow_cardinality_cols = [col for col in home_data.columns\n    if home_data[col].dtype == 'object' and home_data[col].nunique() < 10]\nprint(low_cardinality_cols)","1f95510d":"ohe_train = pd.get_dummies(X)","fdf64536":"from sklearn.impute import SimpleImputer\ndef impute_df(X):\n    my_imputer = SimpleImputer()\n    imputed_X = pd.DataFrame(my_imputer.fit_transform(X))\n    imputed_X.columns = X.columns\n    return imputed_X","43a9fcd6":"# Impute data\nimputed_ohe_train = impute_df(ohe_train)","0b5565a1":"# Train-test split for validaiton\nX_train, X_test, y_train, y_test = train_test_split(imputed_ohe_train, y, test_size=1\/5, random_state=0)","a91d68c7":"# Helper function to get MAE\ndef get_mae(model, X_train, X_test, y_train, y_test):\n    model = model\n    model.fit(X_train, y_train)\n    preds = model.predict(X_test)\n    mae = mean_absolute_error(y_test, preds)\n    return(mae)","5c4324b4":"rf = RandomForestRegressor(max_leaf_nodes=50, n_estimators=100)\nrf_mae = get_mae(rf, X_train, X_test, y_train, y_test)\nprint(\"MAE one hot encoded: {:.0f}\".format(rf_mae))","ad537fc6":"# Test xgb with different n_estimators\nxgb = XGBRegressor(n_estimators=250, learning_rate=0.05)\nxgb_mae = get_mae(xgb,X_train, X_test, y_train, y_test)\nxgb.fit(X_train, y_train, early_stopping_rounds=5, eval_set=[(X_test, y_test)], verbose=False)\npreds = xgb.predict(X_test)\nxgb_mae = mean_absolute_error(y_test, preds)\nprint(\"XGB MAE: {:.0f}\".format(xgb_mae))","922f3d25":"# Apply OHE to test data\ntest_data_with_features = test_data\nohe_test = pd.get_dummies(test_data_with_features)\n\n# Impute nan values in test data \nimputed_ohe_test = impute_df(ohe_test)\n\nfinal_train, final_test = imputed_ohe_train.align(imputed_ohe_test, join='left', axis=1)\n\n#drop nan columns returned by aligning\ncols_with_missing1 = final_test.columns[final_test.isna().any()].tolist()\nfinal_test.drop(cols_with_missing1, axis=1, inplace=True)\nfinal_train.drop(cols_with_missing1, axis=1, inplace=True)","3a9f39af":"X_train, X_test, y_train, y_test = train_test_split(final_train, y, test_size=1\/5, random_state=0)","d3249fc1":"# To improve accuracy, create a new Random Forest model which you will train on all training data\nrf_model_on_full_data = RandomForestRegressor(50, random_state=1)\n\n# fit rf_model_on_full_data on all data from the training data\nrf_model_on_full_data.fit(imputed_ohe_train, y)\n\nrf_model_on_full_data = XGBRegressor(n_estimators=250, learning_rate=0.05)\nrf_model_on_full_data.fit(X_train, y_train, early_stopping_rounds=5, eval_set=[(X_test, y_test)], verbose=False)","3a9e4c3b":"# make predictions which we will submit. \ntest_preds = rf_model_on_full_data.predict(final_test)\n\n# The lines below shows how to save predictions in format used for competition scoring\n# Just uncomment them.\n\noutput = pd.DataFrame({'Id': test_data.Id,\n                       'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)","3abc3cd9":"## One hot encoded data with XGB","8201c8ed":"## One hot encoded data with RF","3e80905f":"# Prepare test data","7ccda8b1":"# Make Predictions\nRead the file of \"test\" data. And apply your model to make predictions","35fcedb8":"# Testing model","a3146569":"# Creating a Model For the Competition\n\nBuild a Random Forest model and train it on all of **X** and **y**.  "}}