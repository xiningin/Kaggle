{"cell_type":{"54906e35":"code","417d4d01":"code","a807f834":"code","facff25d":"code","251dd89c":"code","e7665a2c":"code","971071ec":"code","60255cca":"code","1529afcd":"code","e20ca511":"code","87c8f094":"code","86d873c0":"code","4cd8922f":"code","085f635c":"markdown","4ba9286a":"markdown","27b8ac1c":"markdown","a6820a1b":"markdown"},"source":{"54906e35":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","417d4d01":"pd.options.display.max_columns = None\npd.set_option('display.float_format', lambda x: '%.6f' % x)\nfrom matplotlib import pyplot as plt\nplt.style.use('ggplot')\nfrom sklearn.cluster import KMeans\nimport seaborn as sns\nimport colorlover as cl\nimport plotly as py\nimport plotly.graph_objs as go\npy.offline.init_notebook_mode(connected = True)","a807f834":"df=pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\ndf.head(10)","facff25d":"df=df.rename(columns={'Gender':'gender','Age':'age','Annual Income (K$)':'annual_income','Spending Score (1-100)': 'spending_score'})","251dd89c":"df['gender'].replace(['Female','Male'],[0,1],inplace=True)\ndf.head()","e7665a2c":"pd.isnull(df).any()","971071ec":"df.dtypes","60255cca":"dfsp = pd.concat([df.mean().to_frame(), df.std().to_frame()], axis=1).transpose()\ndfsp.index = ['mean', 'std']\n#new dataframe with scaled values\ndf_scaled = pd.DataFrame()\nfor c in df.columns:\n    if(c=='gender'): df_scaled[c] = df[c]\n    else: df_scaled[c] = (df[c] - dfsp.loc['mean', c]) \/ dfsp.loc['std', c]\ndf_scaled.head()","1529afcd":"#the two \"intuitive\" clusters\ndff = df_scaled.loc[df_scaled.gender==0].iloc[:, 1:] #no need of gender column anymore\ndfm = df_scaled.loc[df_scaled.gender==1].iloc[:, 1:]","e20ca511":"def number_of_clusters(df):\n\n    wcss = []\n    for i in range(1,20):\n        km=KMeans(n_clusters=i, random_state=0)\n        km.fit(df)\n        wcss.append(km.inertia_)\n\n    df_elbow = pd.DataFrame(wcss)\n    df_elbow = df_elbow.reset_index()\n    df_elbow.columns= ['n_clusters', 'within_cluster_sum_of_square']\n    \n    return df_elbow\n\ndfm_elbow = number_of_clusters(dfm)\ndff_elbow = number_of_clusters(dff)\n\nfig, ax = plt.subplots(1, 2, figsize=(17,5))\n\nsns.lineplot(data=dff_elbow, x='n_clusters', y='within_cluster_sum_of_square', ax=ax[0])\nsns.scatterplot(data=dff_elbow[5:6], x='n_clusters', y='within_cluster_sum_of_square', color='black', ax=ax[0])\nax[0].set(xticks=dff_elbow.index)\nax[0].set_title('Female')\n\nsns.lineplot(data=dfm_elbow, x='n_clusters', y='within_cluster_sum_of_square', ax=ax[1])\nsns.scatterplot(data=dfm_elbow[5:6], x='n_clusters', y='within_cluster_sum_of_square', color='black', ax=ax[1])\nax[1].set(xticks=dfm_elbow.index)\nax[1].set_title('Male');","87c8f094":"def k_means(n_clusters, df, gender):\n\n    kmf = KMeans(n_clusters=n_clusters, random_state=0) #defining the algorithm\n    kmf.fit_predict(df) #fitting and predicting\n    centroids = kmf.cluster_centers_ #extracting the clusters' centroids\n    cdf = pd.DataFrame(centroids, columns=df.columns) #stocking in dataframe\n    cdf['gender'] = gender\n    return cdf\n\ndf1 = k_means(5, dff, 'female')\ndf2 = k_means(5, dfm, 'male')\ndfc_scaled = pd.concat([df1, df2])\ndfc_scaled.head()","86d873c0":"dfc = pd.DataFrame()\nfor c in dfc_scaled.columns:\n    if(c=='gender'): dfc[c] = dfc_scaled[c]\n    else: \n        dfc[c] = (dfc_scaled[c] * dfsp.loc['std', c] + dfsp.loc['mean', c])\n        dfc[c] = dfc[c].astype(int)\n        \ndfc.head()","4cd8922f":"def plot(dfs, names, colors, title):\n\n    data_to_plot = []\n    for i, df in enumerate(dfs):\n  x = df['spending_score']\n        y = df['annual_income']\n        z = df['age']\n        data = go.Scatter3d(x=x , y=y , z=z , mode='markers', name=names[i], marker = colors[i])\n        data_to_plot.append(data)\nlayout = go.Layout(margin=dict(l=0,r=0,b=0,t=40),\n        title= title, scene = dict(xaxis = dict(title  = x.name,), \n        yaxis = dict(title  = y.name), zaxis = dict(title = z.name)))\n figure = go.Figure(data=data_to_plot, layout=layout)\n    py.offline.iplot(fig)\ndfcf = dfc[dfc.gender=='female']\ndfcm = dfc[dfc.gender=='male']\npurple = dict(color=cl.scales['9']['seq']['RdPu'][3:8])\nblue = dict(color=cl.scales['9']['seq']['Blues'][3:8])\n","085f635c":"Scaling data helps to form cluster with more accuracy. Though except gender, all variable are scale lets do the scaling to cope gender with other variables.","4ba9286a":"We have changed the column name to avoid the silly mistakes. As gender column has two sub categories, lets replace the Female and Male by 0,1. The conversion is done as other variables are int and gender is in obj format.\nConverting all variables in single format provide ease to the analysis","27b8ac1c":"We can see that there are four variables here. Gender has two sub-categories i.e Male and Female.","a6820a1b":"As we can see that for both Female and Male; n=5 for cluster seems to be appropiate"}}