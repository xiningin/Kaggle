{"cell_type":{"bc21ee35":"code","19502723":"code","64c01992":"code","ad5e26d8":"code","421877f7":"code","5f27dac0":"code","19196692":"code","0c6545df":"code","e6106d6c":"code","1dbbac2f":"code","b035ddd0":"code","a19ae56e":"code","75f3cf05":"code","45588212":"code","e41ba276":"code","88ab57ff":"code","abddd409":"code","7b28851f":"code","4c527df5":"code","762ff417":"code","cc2c8a2d":"code","a393538a":"code","a64658c0":"code","b78e50d7":"code","0569d4fd":"code","c6a458b9":"code","2fe0b92e":"code","f92000ab":"code","23b1a1d3":"code","acee61c2":"code","dc7df449":"code","8eb73bde":"code","0aae59fa":"code","7929fb5f":"code","b29d134a":"code","e505cb16":"code","2330d9d1":"code","6b47d51c":"markdown","514899da":"markdown","0eb8e396":"markdown","320a0b1c":"markdown","0a1d12b2":"markdown","d0965ecf":"markdown","c860868f":"markdown","8aca0feb":"markdown","3dd4919e":"markdown","808b8eff":"markdown","3cb4b3ec":"markdown","50cfb355":"markdown","32649e9e":"markdown","dabf136c":"markdown","6fd3ad0e":"markdown","fb5288fd":"markdown","bc8847b6":"markdown","bbaa078b":"markdown","f0c4197b":"markdown","5d7fbbcd":"markdown","842d16b3":"markdown","ef1c7b03":"markdown","219fa9f8":"markdown","e17fb3dc":"markdown","8e5e5197":"markdown","7cb44d7b":"markdown","f3420ab0":"markdown","6e8ff261":"markdown","ec19185e":"markdown","5b7256ef":"markdown","fb4a09a9":"markdown","7bc581a0":"markdown","eee5a4f1":"markdown","0d11903b":"markdown","465805e4":"markdown"},"source":{"bc21ee35":"# Setup\n\n# common:\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport plotly.express as px\nimport folium\n\n# for ML:\nfrom sklearn.model_selection import train_test_split, KFold, cross_validate, cross_val_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nimport eli5 # Feature importance evaluation\n\n\n\n# set some display options:\nsns.set(style=\"whitegrid\")\npd.set_option(\"display.max_columns\", 36)\n\n# load data:\nfile_path = \"..\/input\/hotel-booking-demand\/hotel_bookings.csv\"\nfull_data = pd.read_csv(file_path)","19502723":"# A bit of data inspection and cleanup, I did most of the inspectin seperately\nfull_data.head()","64c01992":"# check for missing values\nfull_data.isnull().sum()","ad5e26d8":"# Replace missing values:\n# agent: If no agency is given, booking was most likely made without one.\n# company: If none given, it was most likely private.\n# rest schould be self-explanatory.\nnan_replacements = {\"children:\": 0.0,\"country\": \"Unknown\", \"agent\": 0, \"company\": 0}\nfull_data_cln = full_data.fillna(nan_replacements)\n\n# \"meal\" contains values \"Undefined\", which is equal to SC.\nfull_data_cln[\"meal\"].replace(\"Undefined\", \"SC\", inplace=True)\n\n# Some rows contain entreis with 0 adults, 0 children and 0 babies. \n# I'm dropping these entries with no guests.\nzero_guests = list(full_data_cln.loc[full_data_cln[\"adults\"]\n                   + full_data_cln[\"children\"]\n                   + full_data_cln[\"babies\"]==0].index)\nfull_data_cln.drop(full_data_cln.index[zero_guests], inplace=True)","421877f7":"# How much data is left?\nfull_data_cln.shape","5f27dac0":"# After cleaning, separate Resort and City hotel\n# To know the acutal visitor numbers, only bookings that were not canceled are included. \nrh = full_data_cln.loc[(full_data_cln[\"hotel\"] == \"Resort Hotel\") & (full_data_cln[\"is_canceled\"] == 0)]\nch = full_data_cln.loc[(full_data_cln[\"hotel\"] == \"City Hotel\") & (full_data_cln[\"is_canceled\"] == 0)]","19196692":"# get number of acutal guests by country\ncountry_data = pd.DataFrame(full_data_cln.loc[full_data_cln[\"is_canceled\"] == 0][\"country\"].value_counts())\n#country_data.index.name = \"country\"\ncountry_data.rename(columns={\"country\": \"Number of Guests\"}, inplace=True)\ntotal_guests = country_data[\"Number of Guests\"].sum()\ncountry_data[\"Guests in %\"] = round(country_data[\"Number of Guests\"] \/ total_guests * 100, 2)\ncountry_data[\"country\"] = country_data.index\n#country_data.loc[country_data[\"Guests in %\"] < 2, \"country\"] = \"Other\"\n\n# pie plot\nfig = px.pie(country_data,\n             values=\"Number of Guests\",\n             names=\"country\",\n             title=\"Home country of guests\",\n             template=\"seaborn\")\nfig.update_traces(textposition=\"inside\", textinfo=\"value+percent+label\")\nfig.show()","0c6545df":"# show on map\nguest_map = px.choropleth(country_data,\n                    locations=country_data.index,\n                    color=country_data[\"Guests in %\"], \n                    hover_name=country_data.index, \n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    title=\"Home country of guests\")\nguest_map.show()","e6106d6c":"# Counting adults and children as paying guests only, not babies.\nrh[\"adr_pp\"] = rh[\"adr\"] \/ (rh[\"adults\"] + rh[\"children\"])\nch[\"adr_pp\"] = ch[\"adr\"] \/ (ch[\"adults\"] + ch[\"children\"])","1dbbac2f":"print(\"\"\"From all non-cnceled bookings, across all room types and meals, the average prices are:\nResort hotel: {:.2f} \u20ac per night and person.\nCity hotel: {:.2f} \u20ac per night and person.\"\"\"\n      .format(rh[\"adr_pp\"].mean(), ch[\"adr_pp\"].mean()))","b035ddd0":"# normalize price per night (adr):\nfull_data_cln[\"adr_pp\"] = full_data_cln[\"adr\"] \/ (full_data_cln[\"adults\"] + full_data_cln[\"children\"])\nfull_data_guests = full_data_cln.loc[full_data_cln[\"is_canceled\"] == 0] # only actual gusts\nroom_prices = full_data_guests[[\"hotel\", \"reserved_room_type\", \"adr_pp\"]].sort_values(\"reserved_room_type\")\n\n# boxplot:\nplt.figure(figsize=(12, 8))\nsns.boxplot(x=\"reserved_room_type\",\n            y=\"adr_pp\",\n            hue=\"hotel\",\n            data=room_prices, \n            hue_order=[\"City Hotel\", \"Resort Hotel\"],\n            fliersize=0)\nplt.title(\"Price of room types per night and person\", fontsize=16)\nplt.xlabel(\"Room type\", fontsize=16)\nplt.ylabel(\"Price [EUR]\", fontsize=16)\nplt.legend(loc=\"upper right\")\nplt.ylim(0, 160)\nplt.show()","a19ae56e":"# grab data:\nroom_prices_mothly = full_data_guests[[\"hotel\", \"arrival_date_month\", \"adr_pp\"]].sort_values(\"arrival_date_month\")\n\n# order by month:\nordered_months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n          \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\nroom_prices_mothly[\"arrival_date_month\"] = pd.Categorical(room_prices_mothly[\"arrival_date_month\"], categories=ordered_months, ordered=True)\n\n# barplot with standard deviation:\nplt.figure(figsize=(12, 8))\nsns.lineplot(x = \"arrival_date_month\", y=\"adr_pp\", hue=\"hotel\", data=room_prices_mothly, \n            hue_order = [\"City Hotel\", \"Resort Hotel\"], ci=\"sd\", size=\"hotel\", sizes=(2.5, 2.5))\nplt.title(\"Room price per night and person over the year\", fontsize=16)\nplt.xlabel(\"Month\", fontsize=16)\nplt.xticks(rotation=45)\nplt.ylabel(\"Price [EUR]\", fontsize=16)\nplt.show()","75f3cf05":"# Create a DateFrame with the relevant data:\nresort_guests_monthly = rh.groupby(\"arrival_date_month\")[\"hotel\"].count()\ncity_guests_monthly = ch.groupby(\"arrival_date_month\")[\"hotel\"].count()\n\nresort_guest_data = pd.DataFrame({\"month\": list(resort_guests_monthly.index),\n                    \"hotel\": \"Resort hotel\", \n                    \"guests\": list(resort_guests_monthly.values)})\n\ncity_guest_data = pd.DataFrame({\"month\": list(city_guests_monthly.index),\n                    \"hotel\": \"City hotel\", \n                    \"guests\": list(city_guests_monthly.values)})\nfull_guest_data = pd.concat([resort_guest_data,city_guest_data], ignore_index=True)\n\n# order by month:\nordered_months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n          \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\nfull_guest_data[\"month\"] = pd.Categorical(full_guest_data[\"month\"], categories=ordered_months, ordered=True)\n\n# Dataset contains July and August date from 3 years, the other month from 2 years. Normalize data:\nfull_guest_data.loc[(full_guest_data[\"month\"] == \"July\") | (full_guest_data[\"month\"] == \"August\"),\n                    \"guests\"] \/= 3\nfull_guest_data.loc[~((full_guest_data[\"month\"] == \"July\") | (full_guest_data[\"month\"] == \"August\")),\n                    \"guests\"] \/= 2\n\n#show figure:\nplt.figure(figsize=(12, 8))\nsns.lineplot(x = \"month\", y=\"guests\", hue=\"hotel\", data=full_guest_data, \n             hue_order = [\"City hotel\", \"Resort hotel\"], size=\"hotel\", sizes=(2.5, 2.5))\nplt.title(\"Average number of hotel guests per month\", fontsize=16)\nplt.xlabel(\"Month\", fontsize=16)\nplt.xticks(rotation=45)\nplt.ylabel(\"Number of guests\", fontsize=16)\nplt.show()","45588212":"# Create a DateFrame with the relevant data:\nrh[\"total_nights\"] = rh[\"stays_in_weekend_nights\"] + rh[\"stays_in_week_nights\"]\nch[\"total_nights\"] = ch[\"stays_in_weekend_nights\"] + ch[\"stays_in_week_nights\"]\n\nnum_nights_res = list(rh[\"total_nights\"].value_counts().index)\nnum_bookings_res = list(rh[\"total_nights\"].value_counts())\nrel_bookings_res = rh[\"total_nights\"].value_counts() \/ sum(num_bookings_res) * 100 # convert to percent\n\nnum_nights_cty = list(ch[\"total_nights\"].value_counts().index)\nnum_bookings_cty = list(ch[\"total_nights\"].value_counts())\nrel_bookings_cty = ch[\"total_nights\"].value_counts() \/ sum(num_bookings_cty) * 100 # convert to percent\n\nres_nights = pd.DataFrame({\"hotel\": \"Resort hotel\",\n                           \"num_nights\": num_nights_res,\n                           \"rel_num_bookings\": rel_bookings_res})\n\ncty_nights = pd.DataFrame({\"hotel\": \"City hotel\",\n                           \"num_nights\": num_nights_cty,\n                           \"rel_num_bookings\": rel_bookings_cty})\n\nnights_data = pd.concat([res_nights, cty_nights], ignore_index=True)","e41ba276":"#show figure:\nplt.figure(figsize=(16, 8))\nsns.barplot(x = \"num_nights\", y = \"rel_num_bookings\", hue=\"hotel\", data=nights_data,\n            hue_order = [\"City hotel\", \"Resort hotel\"])\nplt.title(\"Length of stay\", fontsize=16)\nplt.xlabel(\"Number of nights\", fontsize=16)\nplt.ylabel(\"Guests [%]\", fontsize=16)\nplt.legend(loc=\"upper right\")\nplt.xlim(0,22)\nplt.show()","88ab57ff":"avg_nights_res = sum(list((res_nights[\"num_nights\"] * (res_nights[\"rel_num_bookings\"]\/100)).values))\navg_nights_cty = sum(list((cty_nights[\"num_nights\"] * (cty_nights[\"rel_num_bookings\"]\/100)).values))\nprint(f\"On average, guests of the City hotel stay {avg_nights_cty:.2f} nights, and {cty_nights['num_nights'].max()} at maximum.\")\nprint(f\"On average, guests of the Resort hotel stay {avg_nights_res:.2f} nights, and {res_nights['num_nights'].max()} at maximum.\")","abddd409":"# total bookings per market segment (incl. canceled)\nsegments=full_data_cln[\"market_segment\"].value_counts()\n\n# pie plot\nfig = px.pie(segments,\n             values=segments.values,\n             names=segments.index,\n             title=\"Bookings per market segment\",\n             template=\"seaborn\")\nfig.update_traces(rotation=-90, textinfo=\"percent+label\")\nfig.show()","7b28851f":"# price per night (ADR) and person based on booking and room.\n# show figure:\nplt.figure(figsize=(12, 8))\nsns.barplot(x=\"market_segment\",\n            y=\"adr_pp\",\n            hue=\"reserved_room_type\",\n            data=full_data_cln,\n            ci=\"sd\",\n            errwidth=1,\n            capsize=0.1)\nplt.title(\"ADR by market segment and room type\", fontsize=16)\nplt.xlabel(\"Market segment\", fontsize=16)\nplt.xticks(rotation=45)\nplt.ylabel(\"ADR per person [EUR]\", fontsize=16)\nplt.legend(loc=\"upper left\")\nplt.show()","4c527df5":"# Summarize Relevant data:\nAirline_data = full_data_cln.loc[full_data_cln[\"market_segment\"]== \"Aviation\"][[\"is_canceled\",\n                                                                                \"adults\",\n                                                                                \"lead_time\",\n                                                                                \"adr_pp\",]].describe()\n\nNon_Airline_data = full_data_cln.loc[full_data_cln[\"market_segment\"]!= \"Aviation\"][[\"is_canceled\",\n                                                                                    \"adults\",\n                                                                                    \"lead_time\",\n                                                                                    \"adr_pp\",]].describe()","762ff417":"Airline_data","cc2c8a2d":"Non_Airline_data","a393538a":"# absolute cancelations:\ntotal_cancelations = full_data_cln[\"is_canceled\"].sum()\nrh_cancelations = full_data_cln.loc[full_data_cln[\"hotel\"] == \"Resort Hotel\"][\"is_canceled\"].sum()\nch_cancelations = full_data_cln.loc[full_data_cln[\"hotel\"] == \"City Hotel\"][\"is_canceled\"].sum()\n\n# as percent:\nrel_cancel = total_cancelations \/ full_data_cln.shape[0] * 100\nrh_rel_cancel = rh_cancelations \/ full_data_cln.loc[full_data_cln[\"hotel\"] == \"Resort Hotel\"].shape[0] * 100\nch_rel_cancel = ch_cancelations \/ full_data_cln.loc[full_data_cln[\"hotel\"] == \"City Hotel\"].shape[0] * 100\n\nprint(f\"Total bookings canceled: {total_cancelations:,} ({rel_cancel:.0f} %)\")\nprint(f\"Resort hotel bookings canceled: {rh_cancelations:,} ({rh_rel_cancel:.0f} %)\")\nprint(f\"City hotel bookings canceled: {ch_cancelations:,} ({ch_rel_cancel:.0f} %)\")","a64658c0":"# Create a DateFrame with the relevant data:\nres_book_per_month = full_data_cln.loc[(full_data_cln[\"hotel\"] == \"Resort Hotel\")].groupby(\"arrival_date_month\")[\"hotel\"].count()\nres_cancel_per_month = full_data_cln.loc[(full_data_cln[\"hotel\"] == \"Resort Hotel\")].groupby(\"arrival_date_month\")[\"is_canceled\"].sum()\n\ncty_book_per_month = full_data_cln.loc[(full_data_cln[\"hotel\"] == \"City Hotel\")].groupby(\"arrival_date_month\")[\"hotel\"].count()\ncty_cancel_per_month = full_data_cln.loc[(full_data_cln[\"hotel\"] == \"City Hotel\")].groupby(\"arrival_date_month\")[\"is_canceled\"].sum()\n\nres_cancel_data = pd.DataFrame({\"Hotel\": \"Resort Hotel\",\n                                \"Month\": list(res_book_per_month.index),\n                                \"Bookings\": list(res_book_per_month.values),\n                                \"Cancelations\": list(res_cancel_per_month.values)})\ncty_cancel_data = pd.DataFrame({\"Hotel\": \"City Hotel\",\n                                \"Month\": list(cty_book_per_month.index),\n                                \"Bookings\": list(cty_book_per_month.values),\n                                \"Cancelations\": list(cty_cancel_per_month.values)})\n\nfull_cancel_data = pd.concat([res_cancel_data, cty_cancel_data], ignore_index=True)\nfull_cancel_data[\"cancel_percent\"] = full_cancel_data[\"Cancelations\"] \/ full_cancel_data[\"Bookings\"] * 100\n\n# order by month:\nordered_months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n          \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\nfull_cancel_data[\"Month\"] = pd.Categorical(full_cancel_data[\"Month\"], categories=ordered_months, ordered=True)\n\n# show figure:\nplt.figure(figsize=(12, 8))\nsns.barplot(x = \"Month\", y = \"cancel_percent\" , hue=\"Hotel\",\n            hue_order = [\"City Hotel\", \"Resort Hotel\"], data=full_cancel_data)\nplt.title(\"Cancelations per month\", fontsize=16)\nplt.xlabel(\"Month\", fontsize=16)\nplt.xticks(rotation=45)\nplt.ylabel(\"Cancelations [%]\", fontsize=16)\nplt.legend(loc=\"upper right\")\nplt.show()","b78e50d7":"cancel_corr = full_data.corr()[\"is_canceled\"]\ncancel_corr.abs().sort_values(ascending=False)[1:]","0569d4fd":"full_data.groupby(\"is_canceled\")[\"reservation_status\"].value_counts()","c6a458b9":"# manually choose columns to include\n# some columns are excluded to make the model more general and to prevent leakage\n# (arrival_date_year, assigned_room_type, booking_changes, reservation_status, country,\n# days_in_waiting_list)\n# including the country would increase accuracy, but it may also make the model less general\n\nnum_features = [\"lead_time\",\"arrival_date_week_number\",\"arrival_date_day_of_month\",\n                \"stays_in_weekend_nights\",\"stays_in_week_nights\",\"adults\",\"children\",\n                \"babies\",\"is_repeated_guest\", \"previous_cancellations\",\n                \"previous_bookings_not_canceled\",\"agent\",\"company\",\n                \"required_car_parking_spaces\", \"total_of_special_requests\", \"adr\"]\n\ncat_features = [\"hotel\",\"arrival_date_month\",\"meal\",\"market_segment\",\n                \"distribution_channel\",\"reserved_room_type\",\"deposit_type\",\"customer_type\"]\n\n# Separate features and predicted value\nfeatures = num_features + cat_features\nX = full_data.drop([\"is_canceled\"], axis=1)[features]\ny = full_data[\"is_canceled\"]\n\n# preprocess numerical feats:\n# for most num cols, except the dates, 0 is the most logical choice as fill value\n# and here no dates are missing.\nnum_transformer = SimpleImputer(strategy=\"constant\")\n\n# Preprocessing for categorical features:\ncat_transformer = Pipeline(steps=[\n    (\"imputer\", SimpleImputer(strategy=\"constant\", fill_value=\"Unknown\")),\n    (\"onehot\", OneHotEncoder(handle_unknown='ignore'))])\n\n# Bundle preprocessing for numerical and categorical features:\npreprocessor = ColumnTransformer(transformers=[(\"num\", num_transformer, num_features),\n                                               (\"cat\", cat_transformer, cat_features)])","2fe0b92e":"# define models to test:\nbase_models = [(\"DT_model\", DecisionTreeClassifier(random_state=42)),\n               (\"RF_model\", RandomForestClassifier(random_state=42,n_jobs=-1)),\n               (\"LR_model\", LogisticRegression(random_state=42,n_jobs=-1)),\n               (\"XGB_model\", XGBClassifier(random_state=42, n_jobs=-1))]\n\n# split data into 'kfolds' parts for cross validation,\n# use shuffle to ensure random distribution of data:\nkfolds = 4 # 4 = 75% train, 25% validation\nsplit = KFold(n_splits=kfolds, shuffle=True, random_state=42)\n\n# Preprocessing, fitting, making predictions and scoring for every model:\nfor name, model in base_models:\n    # pack preprocessing of data and the model in a pipeline:\n    model_steps = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model)])\n    \n    # get cross validation score for each model:\n    cv_results = cross_val_score(model_steps, \n                                 X, y, \n                                 cv=split,\n                                 scoring=\"accuracy\",\n                                 n_jobs=-1)\n    # output:\n    min_score = round(min(cv_results), 4)\n    max_score = round(max(cv_results), 4)\n    mean_score = round(np.mean(cv_results), 4)\n    std_dev = round(np.std(cv_results), 4)\n    print(f\"{name} cross validation accuarcy score: {mean_score} +\/- {std_dev} (std) min: {min_score}, max: {max_score}\")\n    \n    #pipeline.fit(X_train, y_train)\n    #preds = pipeline.predict(X_valid)\n    #score = accuracy_score(y_valid, preds)\n    #print(f\"{name} accuracy_score: {round(score, 4)}\")\n    ","f92000ab":"# Enhanced RF model with the best parameters I found:\nrf_model_enh = RandomForestClassifier(n_estimators=160,\n                               max_features=0.4,\n                               min_samples_split=2,\n                               n_jobs=-1,\n                               random_state=0)\n\nsplit = KFold(n_splits=kfolds, shuffle=True, random_state=42)\nmodel_pipe = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', rf_model_enh)])\ncv_results = cross_val_score(model_pipe, \n                                 X, y, \n                                 cv=split,\n                                 scoring=\"accuracy\",\n                                 n_jobs=-1)\n# output:\nmin_score = round(min(cv_results), 4)\nmax_score = round(max(cv_results), 4)\nmean_score = round(np.mean(cv_results), 4)\nstd_dev = round(np.std(cv_results), 4)\nprint(f\"Enhanced RF model cross validation accuarcy score: {mean_score} +\/- {std_dev} (std) min: {min_score}, max: {max_score}\")","23b1a1d3":"# fit model(pipeline) so values can be accessed:\nmodel_pipe.fit(X,y)\n\n# Names of all (encoded) features are needed.\n# Get names of columns from One Hot Encoding:\nonehot_columns = list(model_pipe.named_steps['preprocessor'].\n                      named_transformers_['cat'].\n                      named_steps['onehot'].\n                      get_feature_names(input_features=cat_features))\n\n# Add num_features for full list.\n# Order must be as in definition of X, where num_features are first: \nfeat_imp_list = num_features + onehot_columns\n\n# show 10 most important features, provide names of features:\nfeat_imp_df = eli5.formatters.as_dataframe.explain_weights_df(\n    model_pipe.named_steps['model'],\n    feature_names=feat_imp_list)\nfeat_imp_df.head(10)","acee61c2":"# group data for lead_time:\nlead_cancel_data = full_data_cln.groupby(\"lead_time\")[\"is_canceled\"].describe()\n# use only lead_times wih more than 10 bookings for graph:\nlead_cancel_data_10 = lead_cancel_data.loc[lead_cancel_data[\"count\"] >= 10]\n\n#show figure:\nplt.figure(figsize=(12, 8))\nsns.regplot(x=lead_cancel_data_10.index, y=lead_cancel_data_10[\"mean\"].values * 100)\nplt.title(\"Effect of lead time on cancelation\", fontsize=16)\nplt.xlabel(\"Lead time\", fontsize=16)\nplt.ylabel(\"Cancelations [%]\", fontsize=16)\n# plt.xlim(0,365)\nplt.show()","dc7df449":"# group data for deposit_type:\ndeposit_cancel_data = full_data_cln.groupby(\"deposit_type\")[\"is_canceled\"].describe()\n\n#show figure:\nplt.figure(figsize=(12, 8))\nsns.barplot(x=deposit_cancel_data.index, y=deposit_cancel_data[\"mean\"] * 100)\nplt.title(\"Effect of deposit_type on cancelation\", fontsize=16)\nplt.xlabel(\"Deposit type\", fontsize=16)\nplt.ylabel(\"Cancelations [%]\", fontsize=16)\nplt.show()","8eb73bde":"deposit_mean_data = full_data_cln.groupby(\"deposit_type\").mean()\ndeposit_mean_data","0aae59fa":"# group data for adr:\nadr_cancel_data = full_data_cln.groupby(\"adr\")[\"is_canceled\"].describe()\n#show figure:\nplt.figure(figsize=(12, 8))\nsns.regplot(x=adr_cancel_data.index, y=adr_cancel_data[\"mean\"].values * 100)\nplt.title(\"Effect of ADR on cancelation\", fontsize=16)\nplt.xlabel(\"ADR\", fontsize=16)\nplt.ylabel(\"Cancelations [%]\", fontsize=16)\nplt.xlim(0,400)\nplt.ylim(0,100)\nplt.show()","7929fb5f":"cat_features_non_dep = [\"hotel\",\"arrival_date_month\",\"meal\",\"market_segment\",\n                \"distribution_channel\",\"reserved_room_type\",\"customer_type\"]\n\nfeatures_non_dep = num_features + cat_features_non_dep\nX_non_dep = full_data.drop([\"is_canceled\"], axis=1)[features_non_dep]\n\n\n# Bundle preprocessing for numerical and categorical features:\npreprocessor_non_dep = ColumnTransformer(transformers=[(\"num\", num_transformer, num_features),\n                                               (\"cat\", cat_transformer, cat_features_non_dep)])\n\n# Define dataset:\nX_non_dep = full_data.drop([\"is_canceled\"], axis=1)[features_non_dep]\n# Define model\nrf_model_non_dep = RandomForestClassifier(random_state=42) # basic model for this purpose\n\nkfolds=4\nsplit = KFold(n_splits=kfolds, shuffle=True, random_state=42)\nmodel_pipe = Pipeline(steps=[('preprocessor', preprocessor_non_dep),\n                              ('model', rf_model_non_dep)])\ncv_results = cross_val_score(model_pipe, \n                                 X_non_dep, y, \n                                 cv=split,\n                                 scoring=\"accuracy\",\n                                 n_jobs=-1)\n# output:\nmin_score = round(min(cv_results), 4)\nmax_score = round(max(cv_results), 4)\nmean_score = round(np.mean(cv_results), 4)\nstd_dev = round(np.std(cv_results), 4)\nprint(f\"RF model without deposit_type feature cross validation accuarcy score: {mean_score} +\/- {std_dev} (std) min: {min_score}, max: {max_score}\")","b29d134a":"# feat importance of original model:\nfeat_imp_df.head(10)","e505cb16":"# Check feature importance of new model:\n# fit model(pipeline) so values can be accessed:\nmodel_pipe.fit(X_non_dep,y)\n\n# Names of all (encoded) features are needed.\n# Get names of columns from One Hot Encoding:\nonehot_columns = list(model_pipe.named_steps['preprocessor'].\n                      named_transformers_['cat'].\n                      named_steps['onehot'].\n                      get_feature_names(input_features=cat_features_non_dep))\n\n# Add num_features for full list.\n# Order must be as in definition of X, where num_features are first: \nfeat_imp_list = num_features + onehot_columns\n\n# show 10 most important features, provide names of features:\nfeat_imp_df_non_dep = eli5.formatters.as_dataframe.explain_weights_df(\n    model_pipe.named_steps['model'],\n    feature_names=feat_imp_list)","2330d9d1":"# feat importance of new model:\nfeat_imp_df_non_dep.head(10)","6b47d51c":"# 3. Evaluate Feature importance","514899da":"### Which are the most busy month?","0eb8e396":"As Susmit Vengurlekar already pointed out in the Discussion section of the dataset, the deposit_type 'Non Refund' and the 'is_canceled' column are correlated in a counter-intuitive way.  \nOver 99 % of people who paid the entire amount upfront canceled. This raises the question if there is something wrong with the data (or the description).  \nWhat else stands out for Non Refund deposits?  \nHere is a table of all mean values of the data, grouped by deposit type:","320a0b1c":"Bookings made a few days before the arrival date are rarely canceled, whereas bookings made over one year in advance are canceled very often. ","0a1d12b2":"### Bookings by market segment","d0965ecf":"### How long do people stay at the hotels?","c860868f":"For the city hotel there is a clear preference for 1-4 nights.  \nFor the resort hotel, 1-4 nights are also often booked, but 7 nights also stand out as being very popular. ","8aca0feb":"### Which month have the highest number of cancelations?","3dd4919e":"Which numerical features are most important? ","808b8eff":"Setup, data inspection and cleanup are hidden for easier reading. Click the Code\/Output buttons if you are curious.","3cb4b3ec":"# Hotel booking\n\n## Content:\n### 1. EDA\n\nThe dataset contains data from two different hotels. One Resort hotel and one City hotel.\n\nFrom the publication (https:\/\/www.sciencedirect.com\/science\/article\/pii\/S2352340918315191) we know that both hotels are located in Portugal (southern Europe) (\"H1 at the resort region of Algarve and H2 at the city of Lisbon\"). The distance between these two locations is ca. 280 km by car and both locations border on the north atlantic.  \n\nThe data contains \"bookings due to arrive between the 1st of July of 2015 and the 31st of August 2017\".  \nNote: For most questions I will only use bookings that were not canceled, to get acutal guest numbers. As you will see, this is quite a big difference.\n\nTopics covered and questions to answer from the data:\n- Where do the guests come from?\n- How much do guests pay for a room per night?\n- How does the price per night vary over the year?\n- Which are the most busy month?\n- How long do people stay at the hotels?\n- Bookings by market segment\n- How many bookings were canceled?\n- Which month have the highest number of cancelations?\n\nDo you have more questions? Tell me in the comments and I will see if I can answer them. :)\n\n\n### 2. Predicting cancelations\nIt would be nice for the hotels to have a model to predict if a guest will actually come.  \nThis can help a hotel to plan things like personel and food requirements.  \nMaybe some hotels also use such a model to offer more rooms than they have to make more money... who knows...\n\n### 3. Evaluate Feature importance\nWhich features are most important to predict cancelations?  ","50cfb355":"### Where do the guests come from?","32649e9e":"### How many bookings were canceled?","dabf136c":"### RF model without deposit type:","6fd3ad0e":"## 1. EDA","fb5288fd":"### Comments, questions, suggestions?  Let me know!  \n### If you like the notebook or learned something please upvote! :)  ","bc8847b6":"### Looking at the three most important features:  \n- lead_time  \n- deposit_type  \n- adr","bbaa078b":"For the City hotel the relative number of cancelations is around 40 % throughout the year.  \nFor the Resort hotel it is highest in the summer and lowest during the winter. ","f0c4197b":"### Comparing different base models:","5d7fbbcd":"People from all over the world are staying in these two hotels. Most guests are from Portugal and other countries in Europe. ","842d16b3":"### Deposit type:","ef1c7b03":"This figure shows the average price per room, depending on its type and the standard deviation.  \nNote that due to data anonymization rooms with the same type letter may not necessarily be the same across hotels.","219fa9f8":"### How much do guests pay for a room per night?  \nBoth hotels have different room types and different meal arrangements. Seasonal factors are also important. So the prices vary a lot.   \nSince no currency information is given, but Portugal is part of the European Monetary Union, I assume that all prices are in EUR. ","e17fb3dc":"From this list it is apparent that lead_time, total_of_special_requests, required_car_parking_spaces, booking_changes and previous_cancellations are the 5 most important numerical features.  \nHowever, to predict wheater or not a booking will be canceled, the number of booking changes is a possible source of leakage, because this information can change over time.  \nI will also not include days_in_waiting_list and arrival_date_year.  \n  \nThe most important feature to exclude is the \"reservation_status\":","8e5e5197":"This clearly shows that the prices in the Resort hotel are much higher during the summer (no surprise here).   \nThe price of the city hotel varies less and is most expensive during spring and autumn. ","7cb44d7b":"## 2. Predict cancelations  ","f3420ab0":"The new accuracy score of 0.8653 is almost identical to the one obtained with the deposit_type included (0.8664),  \nwhich placed significant wheight on this feature.  \nThe new model compensated this by placing increased weight on lead_time, adr, total_of_special_requests and others. ","6e8ff261":"### lead_time:","ec19185e":"On average, groups get the best prices and Airlines pay approximately twice as much.  \n  \nWhat are possible resons for the high prices paid by Airlines?","5b7256ef":"### How does the price per night vary over the year?  \nTo keep it simple, I'm using the average price per night and person, regardless of the room type and meal.  ","fb4a09a9":"The City hotel has more guests during spring and autumn, when the prices are also highest.   \nIn July and August there are less visitors, although prices are lower.  \n\nGuest numbers for the Resort hotel go down slighty from June to September, which is also when the prices are highest.  \nBoth hotels have the fewest guests during the winter.","7bc581a0":"Comparing the mean values for Non refund to No Deposit shows the following:\n- Non Refund deposits are characterized by > 2x longer lead_time   \n- is_repeated_guest is ~ 1\/10th  \n- previous_cancellations is 10x higher \n- previous_bookings_not_canceled is 1\/15th  \n- required_car_parking_spaces is almost zero  \n- special requests are very rare \n  \nBased on these findings it seems that especially people who have not previosly visited one of the hotels book, pay and cancel repeatedly... this is strange!\n  \nTo adress this issue, I will make a model without this feature below.","eee5a4f1":"### ADR:","0d11903b":"The RandomForst model performs best.  \nI also did some hyperparameter optimization, but the accuracy increase is minimal:  ","465805e4":"- Lead time for bookings from Aviation is very short: Mean 4 days vs. 104 days for other bookings.\n- Airlines NEED a place for their crews to stay.\n- Airline personel usually gets one room per person - more total rooms required compared to families."}}