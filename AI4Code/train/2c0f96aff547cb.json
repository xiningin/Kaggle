{"cell_type":{"acba36f2":"code","8d860882":"code","fea4b1c3":"code","443063ac":"code","5d78e998":"code","266e0d19":"code","73b0ea2e":"code","2d2eccbe":"code","2ed38004":"code","29cbb6b6":"code","a6faf60c":"code","348c2bb6":"code","fdfb746a":"code","d23c6357":"code","a5447e9a":"code","96c18bda":"code","d88097fa":"code","d037a573":"code","ce5ea33f":"code","8c171ab5":"code","f1d74c26":"code","ee0208cc":"code","9684d982":"code","66093c65":"code","4d27de79":"code","127b49c0":"code","776c2f42":"code","46a6162b":"code","e2eca245":"code","287a0dbe":"code","7f29db26":"code","1066d05b":"code","ae90535c":"code","bc1d7223":"code","3d4b203d":"code","bf99bfd5":"code","bd11c241":"code","684d9290":"code","089ef652":"code","e83942d5":"code","4adaaa3c":"code","52933622":"markdown","32d1463d":"markdown","ffaa56d6":"markdown","66bda2a7":"markdown","afbd2cb8":"markdown","ca83ffba":"markdown","9d728c26":"markdown","33da5704":"markdown","3043f0d8":"markdown","e3140a4a":"markdown"},"source":{"acba36f2":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","8d860882":"print(os.listdir('..\/input'))","fea4b1c3":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","443063ac":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","5d78e998":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","266e0d19":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# innercity.csv has 21613 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('..\/input\/innercity.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'innercity.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","73b0ea2e":"df1.head(5)","2d2eccbe":"df1.head()","2ed38004":"df1.info()","29cbb6b6":"df1.describe()\n","a6faf60c":"df1.isna().sum()","348c2bb6":"df1.columns","fdfb746a":"df1.describe().T","d23c6357":"df1.duplicated().sum()","a5447e9a":"df1.describe(include='all').T","96c18bda":"#Missing values-\n\npd.isnull(df1).any()","d88097fa":"df1[\"sold_year\"] = df1[\"dayhours\"].apply(lambda x:x.split('T')[0][:4])","d037a573":"df1.boxplot()","ce5ea33f":"plt.figure(figsize=(18, 8))\nsns.boxplot(data=df1)","8c171ab5":"plotPerColumnDistribution(df1, 10, 5)","f1d74c26":"plotCorrelationMatrix(df1, 8)","ee0208cc":"sns.heatmap(df1.corr(method=\"pearson\"))","9684d982":"sns.heatmap(df1.corr(method=\"spearman\"))","66093c65":"sns.heatmap(df1.corr(method=\"kendall\"))","4d27de79":"plotScatterMatrix(df1, 20, 10)","127b49c0":"df1.price.hist(bins=100)","776c2f42":"df1.skew(axis = 0, skipna = True)","46a6162b":"df1['price'].skew()","e2eca245":"plt.figure(figsize=(10, 5))\nsns.heatmap(df1.isnull())","287a0dbe":"#sns.pairplot(df1)","7f29db26":"df1 = df1.drop(columns = 'cid')","1066d05b":"df1 = df1.drop(columns = 'dayhours')","ae90535c":"df1","bc1d7223":"X = df1.drop(\"price\", axis=1)\nY = df1[\"price\"]\nprint(X.shape)\nprint(Y.shape)","3d4b203d":"#standard sclaer-\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nscaler = MinMaxScaler().fit(X)\nscaled_X = scaler.transform(X)","bf99bfd5":"df1","bd11c241":"from sklearn.model_selection import train_test_split\n\nseed = 42\ntest_size = 0.30\n\nX_train, X_test, Y_train, Y_test = train_test_split(scaled_X, Y, test_size = test_size, random_state = seed)\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","684d9290":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom xgboost import XGBRegressor\n\n\n# Add silent=True to avoid printing out updates with each cycle\n#my_model.fit(train_X, train_y, verbose=False)\n\n\n# user variables to tune\nfolds   = 10\n#metric  = \"neg_mean_squared_error\"\nmetric  = \"neg_mean_absolute_error\"\n\n# hold different regression models in a single dictionary\nmodels = {}\nmodels[\"Linear\"]        = LinearRegression()\nmodels[\"Lasso\"]         = Lasso()\nmodels['Ridge']         = Ridge()\nmodels[\"ElasticNet\"]    = ElasticNet()\nmodels[\"KNN\"]           = KNeighborsRegressor()\nmodels[\"DecisionTree\"]  = DecisionTreeRegressor()\n#models[\"SVR\"]           = SVR()\nmodels[\"AdaBoost\"]      = AdaBoostRegressor()\nmodels[\"GradientBoost\"] = GradientBoostingRegressor()\nmodels[\"RandomForest\"]  = RandomForestRegressor()\nmodels[\"XGBoost\"]       = XGBRegressor()\n\n\n# 10-fold cross validation for each model\nmodel_results = []\nmodel_names   = []\nfor model_name in models:\n\tmodel   = models[model_name]\n\tk_fold  = KFold(n_splits=folds, random_state=seed)\n\tresults = cross_val_score(model, X_train, Y_train, cv=k_fold, scoring=metric)\n\t\n\tmodel_results.append(results)\n\tmodel_names.append(model_name)\n\tprint(\"{}: {}, {}\".format(model_name, round(results.mean(), 3), round(results.std(), 3)))\n\n# box-whisker plot to compare regression models\nfigure = plt.figure()\nfigure.suptitle('Regression models comparison')\naxis = figure.add_subplot(111)\nplt.boxplot(model_results)\naxis.set_xticklabels(model_names, rotation = 45, ha=\"right\")\naxis.set_ylabel(\"Mean Squared Error (MSE)\")\nplt.margins(0.05, 0.1)\n","089ef652":"# create and fit the best regression model\nbest_model = GradientBoostingRegressor(random_state=seed)\nbest_model.fit(X_train, Y_train)\n\n# make predictions using the model\npredictions = best_model.predict(X_test)\nprint(\"[INFO] MSE : {}\".format(round(mean_squared_error(Y_test, predictions), 3)))\n\n#MAPE\n\n","e83942d5":"model = GradientBoostingRegressor()\nmodel.fit(X_train,Y_train)\n\n##print(\"Intercept : \", model.intercept_)\n##print(\"Slope : \", model.coef_)\n\n#Predicting TEST & TRAIN DATA\ntrain_predict = model.predict(X_train)\ntest_predict = model.predict(X_test)\n\nprint(\"MAPE - Mean Absolute Percentage Error\")\nY_train, train_predict = np.array(Y_train), np.array(train_predict)\nprint(np.mean(np.abs((Y_train - train_predict) \/ Y_train)) * 100)\nprint(\"Mape - Train:\" , np.mean(np.abs((Y_train,train_predict))))\nprint(\"Mape - Test:\" ,np.mean(np.abs((Y_test,test_predict))))","4adaaa3c":"model = GradientBoostingRegressor()\nmodel.fit(X_test,Y_test)\n\n##print(\"Intercept : \", model.intercept_)\n##print(\"Slope : \", model.coef_)\n\n#Predicting TEST & TRAIN DATA\ntrain_predict = model.predict(X_train)\ntest_predict = model.predict(X_test)\n\nprint(\"MAPE - Mean Absolute Percentage Error\")\nY_train, train_predict = np.array(Y_train), np.array(train_predict)\nprint(np.mean(np.abs((Y_train - train_predict) \/ Y_train)) * 100)\nprint(\"Mape - Train:\" , np.mean(np.abs((Y_train,train_predict))))\nprint(\"Mape - Test:\" ,np.mean(np.abs((Y_test,test_predict))))","52933622":"### Let's check 1st file: ..\/input\/innercity.csv","32d1463d":"## Introduction\nGreetings from the Kaggle bot! This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring. If you're inspired to dig deeper, click the blue \"Fork Notebook\" button at the top of this kernel to begin editing.","ffaa56d6":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. (Hey, I'm just a simple kerneling bot, not a Kaggle Competitions Grandmaster!)","66bda2a7":"There is 1 csv file in the current version of the dataset:\n","afbd2cb8":"Now you're ready to read in the data and use the plotting functions to visualize the data.","ca83ffba":"Let's take a quick look at what the data looks like:","9d728c26":"Scatter and density plots:","33da5704":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","3043f0d8":"Correlation matrix:","e3140a4a":"Distribution graphs (histogram\/bar graph) of sampled columns:"}}