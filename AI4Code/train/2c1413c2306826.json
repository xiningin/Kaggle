{"cell_type":{"95ca6d61":"code","31fc24f1":"code","e7c6943c":"code","4a52f039":"code","80e7c916":"code","414afeff":"code","7d9d2099":"code","03ef5193":"code","89b0d7a3":"markdown","42b18b7c":"markdown","3861bfcb":"markdown","ee63107b":"markdown","0e543ae0":"markdown","599f155b":"markdown","208495ee":"markdown"},"source":{"95ca6d61":"# Familiar imports\nimport numpy as np\nimport pandas as pd\n\n# For ordinal encoding categorical variables, splitting data\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\n\n# For training random forest model\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error","31fc24f1":"# Load the training data\ntrain = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\", index_col=0)\ntest = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\", index_col=0)\n\n# Preview the data\ntrain.head()","e7c6943c":"#Visualize the target\ntrain.target.hist()","4a52f039":"# Separate target from features\ny = train['target']\nfeatures = train.drop(['target'], axis=1)\n\n# Preview features\nfeatures.head()","80e7c916":"# List of categorical columns\nobject_cols = [col for col in features.columns if 'cat' in col]\n\n# ordinal-encode categorical columns\nX = features.copy()\nX_test = test.copy()\nordinal_encoder = OrdinalEncoder()\nX[object_cols] = ordinal_encoder.fit_transform(features[object_cols])\nX_test[object_cols] = ordinal_encoder.transform(test[object_cols])\n\n# Preview the ordinal-encoded features\nX.head()","414afeff":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=0)","7d9d2099":"# Define the model \nmodel = RandomForestRegressor(random_state=1)\n\n# Train the model (will take about 10 minutes to run)\nmodel.fit(X_train, y_train)\npreds_valid = model.predict(X_valid)\nprint(mean_squared_error(y_valid, preds_valid, squared=False))","03ef5193":"# Use the model to generate predictions\npredictions = model.predict(X_test)\n\n# Save the predictions to a CSV file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'target': predictions})\noutput.to_csv('submission.csv', index=False)","89b0d7a3":"# Step 4: Train a model\n\nNow that the data is prepared, the next step is to train a model.  \n\nIn the code cell below, we fit a random forest model to the data.","42b18b7c":"Next, we break off a validation set from the training data.","3861bfcb":"# Step 3: Prepare the data\n\nNext, we'll need to handle the categorical columns (`cat0`, `cat1`, ... `cat9`).  \n\nIn this notebook, we'll use ordinal encoding and save our encoded features as new variables `X` and `X_test`.","ee63107b":"# Step 1: Import helpful libraries\n\nImport the libraries needed.  ","0e543ae0":"# Step 2: Load the data\n\nNext, we'll load the training and test data.  \n\nWe set `index_col=0` in the code cell below to use the `id` column to index the DataFrame.  (*If you're not sure how this works, try temporarily removing `index_col=0` and see how it changes the result.*)","599f155b":"The next code cell separates the target (which we assign to `y`) from the training features (which we assign to `features`).","208495ee":"In the code cell above, we set `squared=False` to get the root mean squared error (RMSE) on the validation data.\n\n# Step 5: Predictions"}}