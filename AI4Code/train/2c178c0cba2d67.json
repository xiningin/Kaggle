{"cell_type":{"0c951c04":"code","ea0d7bbb":"code","3329e0ad":"code","49bc2249":"code","c1912ead":"code","a15c5606":"code","e6e19ece":"code","975eaf9c":"code","31283b95":"code","0fb62ab3":"code","7275557c":"code","d8d47e0f":"code","446ff108":"code","6e7dd278":"code","408f4f85":"code","41c54c7d":"code","5e08b473":"code","25c33fe9":"code","4596fa83":"code","73632196":"code","9b6e6415":"code","1e30ae0e":"code","23182efa":"code","bf32a879":"code","64fd8e29":"code","d0568eeb":"code","73f003ce":"code","db251fd4":"code","6f03e1e6":"code","741a47d8":"code","12a43199":"code","9935bbd6":"code","f99c4025":"code","aa154f01":"code","4da30823":"code","4c16b581":"code","c164e21b":"code","52e6143c":"code","d080601e":"markdown","18de4ba3":"markdown","eba0a8ad":"markdown","c8c4aa89":"markdown","89c2a448":"markdown","9158f6bd":"markdown","045fde49":"markdown","ddcd09d7":"markdown","c0e0a6ba":"markdown","6160d0d1":"markdown","991e233f":"markdown"},"source":{"0c951c04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea0d7bbb":"import pandas as pd\ndf = pd.read_csv(\"..\/input\/student-performance\/datasets_74977_169835_StudentsPerformance.csv\")\ndf","3329e0ad":"df.head()","49bc2249":"# show the analysis of numerical values.\ndf.describe()","c1912ead":"df.columns","a15c5606":"df.isnull().values.any()","e6e19ece":"df.isnull().sum()","975eaf9c":"#show count Gender\ndf['gender'].value_counts()","31283b95":"plt.figure(figsize=(7,7))\nsns.barplot(x=df['gender'].value_counts().index,y=df['gender'].value_counts().values)\nplt.title('genders other rate')\nplt.ylabel('Rates')\nplt.legend(loc=0)\nplt.show()","0fb62ab3":"plt.figure(figsize=(7,7))\nsns.barplot(x=df['race\/ethnicity'].value_counts().index,\n              y=df['race\/ethnicity'].value_counts().values)\nplt.xlabel('race\/ethnicity')\nplt.ylabel('Frequency')\nplt.title('Show of Race\/Ethnicity Bar Plot')\nplt.show()","7275557c":"plt.figure(figsize=(14,7))\nsns.barplot(x=df['parental level of education'].value_counts().index,\n              y=df['parental level of education'].value_counts().values)\nplt.xlabel('parental level of education')\nplt.ylabel('Frequency')\nplt.title('Show of parental level of education Bar Plot')\nplt.show()","d8d47e0f":"import matplotlib.pyplot as plt \nimport seaborn as sns  \nplt.figure(figsize=(14,6))\n\nplt.subplot(1,3,1)\nsns.barplot(x = 'gender', y = 'reading score', data = df)\n\nplt.subplot(1,3,2)\nsns.barplot(x = 'gender', y = 'writing score', data = df)\n\nplt.subplot(1,3,3)\nsns.barplot(x = 'gender', y = 'math score', data = df)\n\nplt.tight_layout()","446ff108":"sns.lmplot(x='reading score',y='math score',hue='gender',data=df)\nplt.xlabel('reading score')  \nplt.ylabel('math score')\nplt.title('Math Score vs Reading Score')\nplt.show()","6e7dd278":"sns.lmplot(x='writing score',y='math score',hue='gender',data=df)\nplt.xlabel('writing score')  \nplt.ylabel('math score')\nplt.title('Math Score vs Writing Score')\nplt.show()","408f4f85":"sns.pairplot(df, diag_kind=\"kde\", markers=\"+\",\n                  plot_kws=dict(s=50, edgecolor=\"b\", linewidth=1),\n                  diag_kws=dict(shade=True))\nplt.show()","41c54c7d":"sns.pairplot(df,kind='reg')\nplt.show()","5e08b473":"plt.figure(figsize=(16,6))\n\nplt.subplot(1,3,1)\nsns.barplot(x = 'race\/ethnicity', y = 'reading score', data = df)\nplt.xticks(rotation = 90)\n\nplt.subplot(1,3,2)\nsns.barplot(x = 'race\/ethnicity', y = 'writing score', data = df)\nplt.xticks(rotation = 90)\n\nplt.subplot(1,3,3)\nsns.barplot(x = 'race\/ethnicity', y = 'math score', data = df)\nplt.xticks(rotation = 90)\n\nplt.tight_layout()","25c33fe9":"plt.figure(figsize=(10,7))\nsns.barplot(x = \"parental level of education\", y = \"writing score\", hue = \"gender\", data = df)\nplt.xticks(rotation=45)\nplt.show()","4596fa83":"plt.figure(figsize=(10,7))\nsns.barplot(x = \"parental level of education\", y = \"reading score\", hue = \"gender\", data = df)\nplt.xticks(rotation=45)\nplt.show()","73632196":"plt.figure(figsize=(10,7))\nsns.barplot(x = \"parental level of education\", y = \"math score\", hue = \"gender\", data = df)\nplt.xticks(rotation=45)\nplt.show()","9b6e6415":"plt.figure(figsize=(14,8))\nsns.catplot(y=\"gender\", x=\"math score\",\n                 hue=\"parental level of education\",\n                 data=df, kind=\"bar\")\nplt.title('for Parental Level Of Education Gender & Math_Score')\nplt.show()","1e30ae0e":"plt.figure(figsize=(16,6))\n\nplt.subplot(1,3,1)\nsns.barplot(x = 'test preparation course', y = 'reading score', hue = 'gender', data = df)\n\nplt.subplot(1,3,2)\nsns.barplot(x = 'test preparation course', y = 'writing score',hue = 'gender', data = df)\n\nplt.subplot(1,3,3)\nsns.barplot(x = 'test preparation course', y = 'math score',hue = 'gender', data = df)\n\nplt.tight_layout()","23182efa":"plt.figure(figsize=(16,6))\n\nplt.subplot(1,3,1)\nsns.barplot(x = 'lunch', y = 'reading score', data = df)\n\nplt.subplot(1,3,2)\nsns.barplot(x = 'lunch', y = 'writing score', data = df)\n\nplt.subplot(1,3,3)\nsns.barplot(x = 'lunch', y = 'math score', data = df)\n\n\nplt.tight_layout()","bf32a879":"# Function to assign grades\n\ndef get_grade(marks):\n    if marks >= 91:\n        return 'O'\n    elif marks >= 82 and marks < 91:\n        return 'A+'\n    elif marks >=73 and marks < 82:\n        return 'A'\n    elif marks >=64 and marks < 73:\n        return 'B+'\n    elif marks >= 55 and marks < 64:\n        return 'B'\n    elif marks >=46 and marks < 55:\n        return 'C'\n    elif marks >= 35 and marks < 46:\n        return 'P'\n    elif marks < 35:\n        return 'F'","64fd8e29":"df['reading_grade'] = df['reading score'].apply(get_grade)\ndf['writing_grade'] = df['writing score'].apply(get_grade)\ndf['math_grade'] = df['math score'].apply(get_grade)","d0568eeb":"sns.set_style('whitegrid')\nplt.figure(figsize=(16,6))\nplt.subplot(1,3,1)\nsns.countplot(x ='math_grade', data = df,order = ['O','A+','A','B+','B','C','P','F'],palette='magma')\nplt.title('Grade Count in Math')\n\n\nplt.subplot(1,3,2)\nsns.countplot(x ='reading_grade', data = df,order = ['O','A+','A','B+','B','C','P','F'],palette='magma')\nplt.title('Grade Count in Reading')\n\nplt.subplot(1,3,3)\nsns.countplot(x ='writing_grade', data = df,order = ['O','A+','A','B+','B','C','P','F'],palette='magma')\nplt.title('Grade Count in Writing')\n\nplt.tight_layout()","73f003ce":"#Number of students having maximum grade in Reading\nprint('No. of students having maximum grade in reading: ', len(df[df['reading_grade'] == 'O']))\n","db251fd4":"#Number of students having maximum grade in Writing\nprint('No. of students having maximum grade in writing: ', len(df[df['writing_grade'] == 'O']))\n","6f03e1e6":"#Number of students having maximum grade in all three categories\nperfect_writing = df['writing_grade'] == 'O'\nperfect_reading = df['reading_grade'] == 'O'\nperfect_math = df['math_grade'] == 'O'\n\nperfect_grade = df[(perfect_math) & (perfect_reading) & (perfect_writing)]\nprint('Number of students having maximum grade(O) in all three subjects: ',len(perfect_grade))\n","741a47d8":"#Number of students having minimum grade in all three categories\nminimum_math = df['math_grade'] == 'F'\nminimum_reading = df['reading_grade'] == 'F'\nminimum_writing = df['writing_grade'] == 'F'\n\n\n\nminimum_grade = df[(minimum_math) & (minimum_reading) & (minimum_writing)]\nprint('Number of students having minimum grade(F) in all three subjects: ',len(minimum_grade))\n","12a43199":"#Classifying Students as Passed or Failed\n# A student is classified failed if he\/she has failed in any one of three subjects otherwise he\/she is classified as passed\n#Failed Students\nfailed_students = df[(minimum_math) | (minimum_reading)|(minimum_writing)]\nfailed = len(failed_students)\nprint('Total Number of students who failed are: {}' .format(len(failed_students)))","9935bbd6":"#Passed Students\npassed_students = len(df) - len(failed_students)\nprint('Total Number of students who passed are: {}' .format(passed_students))","f99c4025":"f, ax = plt.subplots(figsize=(14, 8))\nsns.scatterplot(x=\"reading score\", y=\"writing score\",\n                hue=\"lunch\", size=\"gender\",data=df)\nplt.show()","aa154f01":"f, ax = plt.subplots(figsize=(14, 8))\nsns.scatterplot(x=\"reading score\", y=\"writing score\",\n                hue=\"parental level of education\", size=\"gender\",data=df)\nplt.show()","4da30823":"f, ax = plt.subplots(figsize=(14, 8))\nsns.scatterplot(x=\"reading score\", y=\"writing score\",\n                hue=\"test preparation course\", size=\"gender\",data=df)\nplt.show()","4c16b581":"(df[['race\/ethnicity','math score', 'reading score', 'writing score']].corr())\nax = sns.heatmap(df.corr(),cmap=\"Blues\",annot=True,annot_kws={\"size\": 7.5},linewidths=.5)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\");","c164e21b":"sns.swarmplot(x=df['lunch'],y=df['reading score'])\nplt.show()","52e6143c":"\nsns.swarmplot(x=df['test preparation course'],y=df['math score'],hue=df['gender'])\nplt.show()","d080601e":"# 97% Passed Students , 2.9% Faild Students","18de4ba3":".Students who availed standard lunch have scored higher in all the three categories compared to students who have taken free\/ reduced lunch","eba0a8ad":"# columns in dataset","c8c4aa89":". People from group E have higher score in all three categories, where as people from group A have the lowest score in all three categories","89c2a448":".O (Outstanding): Student who scores 91 marks or higher in a subject\n.A+ (Excellent): Student who scores 82 marks or higher in a subject\n.A (Very Good): Student who scores 73 marks or higher in a subject\n.B+ (Good): Student who scores 64 marks or higher in a subject\n.B (Above Average): Student who scores 55 marks or higher in a subject\n.C (Average): Student who scores 46 marks or higher in a subject\n.P (Pass): Student who scores 35 marks or higher in a subject\n.F (Fail): Student who scores less than 35 marks in a subject","9158f6bd":". Students who have completed the Test Prepration Course have scores higher in all three categories than those who haven't taken the course","045fde49":".Student's whose parents have a Master's degree have scored higher compared to others whereas Student's whose parent's went to high school have obtained low marks compared to others","ddcd09d7":".Most of the students have got a B+ in Maths and Reading Section whereas in Writing Section almost equal number of students have got A and B+ grade.\n.The number of candidates who just got a qualifying grade(P) and passed is the highest in maths.","c0e0a6ba":".Males have higher math score than Females, whereas Females have higher scores in reading and writing than Males","6160d0d1":"# check gender column","991e233f":"# Read CSV file"}}