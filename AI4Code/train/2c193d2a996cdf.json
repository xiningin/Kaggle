{"cell_type":{"bb109602":"code","6cb475ea":"code","78481fc2":"code","861673fe":"code","022a2d51":"code","5644596c":"code","d6e8af62":"code","deac1d6a":"code","884d26e3":"code","1520b5ef":"code","e1129fc4":"code","88f25e4b":"code","40cc05b9":"code","c1e72e16":"code","10a5a9c9":"code","b65b798d":"code","b19062ab":"code","a0bef940":"code","eabce529":"code","20f02faa":"code","54e4f563":"code","9b2f11fe":"code","7993a0b0":"code","c9815dc8":"code","e52d73f4":"markdown","1101cb7b":"markdown","9485c7d8":"markdown","621a41a1":"markdown","3558d100":"markdown","c0247ac2":"markdown","90e415f1":"markdown","d385f6e9":"markdown","85d614ad":"markdown","72d52a01":"markdown","e80c4aa6":"markdown","f71c1c14":"markdown","7f5a98e9":"markdown","6f270ef6":"markdown","73709f94":"markdown","26d1811d":"markdown"},"source":{"bb109602":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nfrom PIL import Image\n\nfrom wordcloud import WordCloud\nimport random\n","6cb475ea":"movies = pd.read_csv(\"..\/input\/tv-series-and-movies-on-netflix\/movies_on_netflix.csv\")\ntv_series = pd.read_csv(\"..\/input\/tv-series-and-movies-on-netflix\/tv_series_on_netflix.csv\")\n\nmovies.head()","78481fc2":"from datetime import datetime\n\ntl_dates = [\n\"1997\\nFounded\",\n\"1998\\nMail Service\",\n\"2003\\nGoes Public\",\n\"2007\\nStreaming service\",\n\"2016\\nGoes Global\",\n\"2021\\nNetflix & Chill\"\n]\n\ntl_x = [1, 2, 4, 5.3, 8,9]\n\ntl_sub_x = [1.5,3,5,6.5,7]\n\ntl_sub_times = [\n\"1998\",\"2000\",\"2006\",\"2010\",\"2012\"\n]\n\ntl_text = [\n\"Netflix.com launched\",\n\"Starts\\nPersonal\\nRecommendations\",\"Billionth DVD Delivery\",\"Canadian\\nLaunch\",\"UK Launch\"]\n\nwith plt.xkcd():\n    fig, ax = plt.subplots(figsize=(15, 4), constrained_layout=True)\n    ax.set_ylim(-2, 1.75)\n    ax.set_xlim(0, 10)\n\n    # Timeline : line\n    ax.axhline(0, xmin=0.1, xmax=0.9, c='deeppink', zorder=1)\n\n    # Timeline : Date Points\n    ax.scatter(tl_x, np.zeros(len(tl_x)), s=120, c='palevioletred', zorder=2)\n    ax.scatter(tl_x, np.zeros(len(tl_x)), s=30, c='darkmagenta', zorder=3)\n    # Timeline : Time Points\n    ax.scatter(tl_sub_x, np.zeros(len(tl_sub_x)), s=50, c='darkmagenta',zorder=4)\n\n    # Date Text\n    for x, date in zip(tl_x, tl_dates):\n        ax.text(x, -0.55, date, ha='center',\n                fontfamily='serif', fontweight='bold',\n                color='royalblue',fontsize=12)\n\n    # Stemplot : vertical line\n    levels = np.zeros(len(tl_sub_x))\n    levels[::2] = 0.3\n    levels[1::2] = -0.3\n    markerline, stemline, baseline = ax.stem(tl_sub_x, levels, use_line_collection=True)\n    plt.setp(baseline, zorder=0)\n    plt.setp(markerline, marker=',', color='darkmagenta')\n    plt.setp(stemline, color='darkmagenta')\n\n    # Text\n    for idx, x, time, txt in zip(range(1, len(tl_sub_x)+1), tl_sub_x, tl_sub_times, tl_text):\n        ax.text(x, 1.3*(idx%2)-0.5, time, ha='center',\n                fontfamily='serif', fontweight='bold',\n                color='royalblue', fontsize=11)\n\n        ax.text(x, 1.3*(idx%2)-0.6, txt, va='top', ha='center',\n            fontfamily='serif',color='royalblue')\n\n    # Spine\n    for spine in [\"left\", \"top\", \"right\", \"bottom\"]:\n        ax.spines[spine].set_visible(False)\n\n    # Ticks\n    ax.set_xticks([])\n    ax.set_yticks([])\n\n    # Title\n    ax.set_title(\"Netflix through the years\", fontweight=\"bold\", fontfamily='serif', fontsize=16, color='royalblue')\n    ax.text(2.4,1.57,\"From DVD rentals to a global audience of over 150m people - is it time for Netflix to Chill?\", fontfamily='serif', fontsize=12, color='mediumblue')\n\n    plt.show()","861673fe":"len(movies), len(tv_series)","022a2d51":"frames = [movies, tv_series]\n  \ndf = pd.concat(frames)","5644596c":"len(df)","d6e8af62":"col = \"type\"\ngrouped = df[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\nwith plt.xkcd():\n    explode = (0, 0.1)  # only \"explode\" the 2nd slice (i.e. 'TV Show')\n    fig1, ax1 = plt.subplots(figsize=(5, 5), dpi=100)\n    ax1.pie(grouped[\"count\"], explode=explode, labels=grouped[\"type\"], autopct='%1.1f%%',\n        shadow=True, startangle=90)\n    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n    plt.show()","deac1d6a":"from collections import Counter\ncol = \"country\"\n\ncategories = \", \".join(df[col].fillna(\"\")).split(\", \")\ncounter_list = Counter(categories).most_common(25)\ncounter_list = [_ for _ in counter_list if _[0] != \"\"]\nlabels = [_[0] for _ in counter_list]\nvalues = [_[1] for _ in counter_list]\n\nwith plt.xkcd():\n    fig, ax = plt.subplots(figsize=(10, 10), dpi=100)\n    y_pos = np.arange(len(labels))\n    ax.barh(y_pos, values, align='center')\n    ax.set_yticks(y_pos)\n    ax.set_yticklabels(labels)\n    ax.invert_yaxis()  # labels read top-to-bottom\n    ax.set_xlabel('Content')\n    ax.set_title('Countries with most content')\n\nplt.show()","884d26e3":"from collections import Counter\nfrom matplotlib.pyplot import figure\nimport math\n\ncolours = [\"orangered\", \"mediumseagreen\", \"darkturquoise\", \"mediumpurple\", \"deeppink\", \"indianred\"]\ncountries_list = [\"United States\", \"India\", \"United Kingdom\", \"Japan\", \"France\", \"Canada\"]\ncol = \"director\"\n\nwith plt.xkcd():\n    figure(num=None, figsize=(20, 8))\n    x=1\n    for country in countries_list:\n        country_df = df[df[\"country\"]==country]\n        categories = \", \".join(country_df[col].fillna(\"\")).split(\", \")\n        counter_list = Counter(categories).most_common(6)\n        counter_list = [_ for _ in counter_list if _[0] != \"\"]\n        labels = [_[0] for _ in counter_list][::-1]\n        values = [_[1] for _ in counter_list][::-1]\n        if max(values)<10:\n            values_int = range(0, math.ceil(max(values))+1)\n        else:\n            values_int = range(0, math.ceil(max(values))+1, 2)\n        plt.subplot(2, 3, x)\n        plt.barh(labels,values, color = colours[x-1])\n        plt.xticks(values_int)\n        plt.title(country)\n        x+=1\n    plt.suptitle('Popular Directors with the most content')\nplt.tight_layout()\nplt.show()","1520b5ef":"col = \"cast\"\n\nwith plt.xkcd():\n    figure(num=None, figsize=(20, 8))\n    x=1\n    for country in countries_list:\n        df[\"from_country\"] = df['country'].fillna(\"\").apply(lambda x : 1 if country.lower() in x.lower() else 0)\n        small = df[df[\"from_country\"] == 1]\n        cast = \", \".join(small['cast'].fillna(\"\")).split(\", \")\n        tags = Counter(cast).most_common(11)\n        tags = [_ for _ in tags if \"\" != _[0]]\n        labels, values = [_[0]+\"  \" for _ in tags][::-1], [_[1] for _ in tags][::-1]\n        if max(values)<10:\n            values_int = range(0, math.ceil(max(values))+1)\n        elif max(values)>=10 and max(values)<=20:\n            values_int = range(0, math.ceil(max(values))+1, 2)\n        else:\n            values_int = range(0, math.ceil(max(values))+1, 5)\n        plt.subplot(2, 3, x)\n        plt.barh(labels,values, color = colours[x-1])\n        plt.xticks(values_int)\n        plt.title(country)\n        x+=1\n    plt.suptitle('Popular Actors with the most content')\n    plt.tight_layout()\n    \n    plt.savefig(\"anupam.png\")\n    plt.show()","e1129fc4":"small = movies.sort_values(\"release_year\", ascending = True)\nsmall = small[small['duration'] != \"0\"].reset_index()\nsmall[['title', \"release_year\"]][:15]","88f25e4b":"small = tv_series.sort_values(\"release_year\", ascending = True)\nsmall = small[small['season_count'] != \"0\"].reset_index()\nsmall = small[['title', \"release_year\"]][:15]\nsmall\n","40cc05b9":"df[\"year_diff\"] = df[\"year_added\"]-df[\"release_year\"]\nmovies[\"year_diff\"] = movies[\"year_added\"]-movies[\"release_year\"]\ntv_series[\"year_diff\"] = tv_series[\"year_added\"]- tv_series[\"release_year\"]\n","c1e72e16":"col = \"year_diff\"\nonly_movies = movies\nonly_shows = tv_series\n\ngrouped1 = only_movies[col].value_counts().reset_index()\ngrouped1 = grouped1.rename(columns = {col : \"count\", \"index\" : col})\ngrouped1 = grouped1.dropna()\ngrouped1 = grouped1.head(20)\ngrouped2 = only_shows[col].value_counts().reset_index()\ngrouped2 = grouped2.rename(columns = {col : \"count\", \"index\" : col})\ngrouped2 = grouped2.dropna()\ngrouped2 = grouped2.head(20)\n\nwith plt.xkcd():\n    figure(num=None, figsize=(8, 5))\n    plt.scatter(grouped1[col], grouped1[\"count\"], color = \"hotpink\")\n    plt.scatter(grouped2[col], grouped2[\"count\"], color = '#88c999')\n    values_int = range(0, math.ceil(max(grouped1[col]))+1, 2)\n    plt.xticks(values_int)\n    plt.xlabel(\"Difference between the year when the content has been\\n added on Netflix and the realease year\")\n    plt.ylabel(\"Number of Movies\/TV Shows\")\n    plt.legend([\"Movies\", \"TV Shows\"])\n    plt.tight_layout()\n    plt.show()","10a5a9c9":"print(df['rating'].unique())","b65b798d":"ratings_list = ['TV-MA', 'R', 'PG-13', 'TV-14', 'TV-PG', 'TV-G', 'TV-Y', 'TV-Y7', 'PG', 'G', 'NC-17', 'TV-Y7-FV']\nratings_group_list = ['Little Kids', 'Older Kids', 'Teens', 'Mature']\nratings_dict={\n'TV-G': 'Little Kids',\n'TV-Y': 'Little Kids',\n'G': 'Little Kids',\n'TV-PG': 'Older Kids',\n'TV-Y7': 'Older Kids',\n'PG': 'Older Kids',\n'TV-Y7-FV': 'Older Kids',\n'PG-13': 'Teens',\n'TV-14': 'Teens',\n'TV-MA': 'Mature',\n'R': 'Mature',\n'NC-17': 'Mature'\n}\nfor rating_val, rating_group in ratings_dict.items():\n    df.loc[df.rating == rating_val, \"rating\"] = rating_group","b19062ab":"df['rating_val']=1\nr = 'Little Kids'\ngrouped = df[df['rating']==r]\nyear_df = grouped.groupby(['year_added']).sum()\nyear_df.reset_index(level=0, inplace=True)\nlen(year_df['rating_val']), len(year_df['year_added']), r, year_df","a0bef940":"\nlabels=['kinda\\nless', 'not so\\nbad', 'holyshit\\nthat\\'s too\\nmany']\nx=0\nwith plt.xkcd():\n    for r in ratings_group_list:\n        grouped = df[df['rating']==r]\n        year_df = grouped.groupby(['year_added']).sum()\n        year_df.reset_index(level=0, inplace=True)\n        plt.plot(year_df['year_added'], year_df['rating_val'], color=colours[x], marker='o')\n        values_int = range(2008, math.ceil(max(year_df['year_added']))+1, 2)\n        plt.yticks([200, 600, 1000], labels)\n        plt.xticks(values_int)\n        plt.title('Count of shows and movies that Netflix\\n has been producing for different audiences', fontsize=12)\n        plt.xlabel('Year', fontsize=14)\n        plt.ylabel('Content Count', fontsize=14)\n        x+=1\n    plt.legend(ratings_group_list)\n    plt.tight_layout()\n    plt.show()","eabce529":"col = \"listed_in\"\ncolours = [\"violet\", \"cornflowerblue\", \"darkseagreen\", \"mediumvioletred\", \"blue\", \"mediumseagreen\", \"darkmagenta\", \"darkslateblue\", \"seagreen\"]\ncountries_list = [\"United States\", \"India\", \"United Kingdom\", \"Japan\", \"France\", \"Canada\", \"Spain\", \"South Korea\", \"Germany\"]\n\nwith plt.xkcd():\n    figure(num=None, figsize=(20, 8))\n    x=1\n    for country in countries_list:\n        df[\"from_country\"] = df['country'].fillna(\"\").apply(lambda x : 1 if country.lower() in x.lower() else 0)\n        small = df[df[\"from_country\"] == 1]\n        genre = \", \".join(small['listed_in'].fillna(\"\")).split(\", \")\n        tags = Counter(genre).most_common(3)\n        tags = [_ for _ in tags if \"\" != _[0]]\n        labels, values = [_[0]+\"  \" for _ in tags][::-1], [_[1] for _ in tags][::-1]\n        if max(values)>200:\n            values_int = range(0, math.ceil(max(values)), 100)\n        elif max(values)>100 and max(values)<=200:\n            values_int = range(0, math.ceil(max(values))+50, 50)\n        else:\n            values_int = range(0, math.ceil(max(values))+25, 25)\n        plt.subplot(3, 3, x)\n        plt.barh(labels,values, color = colours[x-1])\n        plt.xticks(values_int)\n        plt.title(country)\n        x+=1\n    plt.suptitle('Top Genres')\n    plt.tight_layout()\n    plt.show()","20f02faa":"!wget \"https:\/\/peritract.github.io\/assets\/images\/heart_mask.jpg\" -O \"logo.jpg\"","54e4f563":"cmap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", ['#221f1f', '#b20710'])\ntext = str(list(df['title'])).replace(',', '').replace('[', '').replace(\"'\", '').replace(']', '').replace('.', '')\nmask = np.array(Image.open('.\/logo.jpg'))\nwordcloud = WordCloud(background_color = 'white', width = 500, height = 200,colormap=cmap, max_words = 150, mask = mask).generate(text)\n\nplt.figure( figsize=(5,5))\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","9b2f11fe":"david = df[df[\"director\"] == \"David Dhawan\"][\"title\"]\ndavid","7993a0b0":"cmap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", ['#221f1f', '#b20710'])\ntext = str(list(david)).replace(',', '').replace('[', '').replace(\"'\", '').replace(']', '').replace('.', '')\nmask = np.array(Image.open('.\/logo.jpg'))\nwordcloud = WordCloud(background_color = 'white', width = 500, height = 200,colormap=cmap, max_words = 150, mask = mask).generate(text)\n\nplt.figure( figsize=(5,5))\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","c9815dc8":"all_names =[]\nfor x in [str(x).split(\",\") for x in df[\"cast\"]]:\n        all_names += x\nall_names","e52d73f4":"# WHAT KIND OF CONTENT IS NETFLIX LOOKING AT","1101cb7b":"we will generate word cloud","9485c7d8":"based on code from https:\/\/www.dataquest.io\/blog\/comical-data-visualization-in-python-using-matplotlib\/ by https:\/\/twitter.com\/paridhitweets","621a41a1":"# HOW FAST DO WE GET THE CONTENT","3558d100":"# TOP GENRES COUNTRYWISE","c0247ac2":"you can!","90e415f1":"# WORDCLOUD FOR TITLE","d385f6e9":"we need to get a logo first.","85d614ad":"# COUNTRIES WITH MOST CONTENT","72d52a01":"# POPULAR DIRECTORS WITH MOST CONTENT","e80c4aa6":"# Looking at\n\n![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAbAAAAB1CAMAAAAYwkSrAAAAkFBMVEX\/\/\/\/YHybWAADWAAzYGiHWABD76uvwtrjXFB3dRUr++frcPULtqqv20tPsn6HhZGfokZP0zM3XDBfoiYvZISnaKTDWAAj98vLkcnXfTVLiZmryxcXdUVT65OX87u\/xubv42tvleXzbNTvup6ngXF\/aLzXqlpnzwcPgV1vmgoT43d7qlJfdQkfiZWjibG\/lfYFPbGTNAAAMMUlEQVR4nO2d\/0O6PBDHBUGJ1BQVK8NITcv61P\/\/3z0CKrB7Dw7wsW\/3\/jFuHOwVc7ttt5ahyB60sCaqZburmrjXlmpUIm+cKX7rVCwNnuOq6hMY7U5aumcrF50bTW1oRN138gYdnzyAvdLcLKD1Ya1b5E9XmuICjKFSYK0P8pLWu+ZmQ488rDknwAxzh4sLMIbKgW3pJ2b24b1ci9zMenYpsFwdZiTAGCoH5j4TE+8W3qsLWs9NiwIzHPwsAoyhcmCooWu7vHsZXoCAmSP4LAKMIQawwKSP0AO36tMPzPnXQsC8J\/gsAowhBrDWHf1pugO3egJdjuhTom9gTWfoWQQYQxxg4LepHRKrGX0R6zq6AF7B3KJnEWAMcYDNDNrteCVWA\/VRDMOPW07wCs4HehYBxhAHWOuTNnYO6XbQzqQ1iVs+9A4mahMFGEMsYP02eQj\/UbEZ0a7J4TOE74B6LQKMIRawFq0m0u1Y07rwg\/gKegfYaxFgDPGArejvkx3kLALaaloPySX4EkrxWAKMIR6wGWjvhjkLFEY8dAXhS6CQvQBjiAcMRYCX2W6HOwVhxMM1+BKoTRRgDDGBzeknZs4z1x\/p9SiMGAu\/hRkSJwKMISYwUFE5T6AeneON8FsoTWqkesBss1jZEeM9vQzin9Qo26elNdYueQLzC4C13sBv1OJ0dUc\/sHRsTC7FsibERy1g9qpfrGzvZkeuhg\/qDb3XkFgtMvcgNTbZljxBP\/PjcTFgAZg6SfsNujBiLITLQCH7WsB8PDfH1o3aSmpXMBxEgS2KC+R0MWAt8p+473Ycry1AGPF0UQeMhuzrAcNTNWw1B6arMajLAXukn9iprlY0EpIJZQBYkayJGt0SYAyx3bvg1\/n4jaAuRxosBLCSqlajWwKMIb77Mf2d8hIq+jBiLMAqeVQ1ZC\/AGOK7D7XtHnnn\/VuHaUHAKpGnhOwFGEMV3FPTpGcBOpDOQ6YcYpXwUEL2AoyhCu6Jr0O4oiCMGAugSqSGpwQYQxXcu\/inCiyDy69jA6gOMvO+BBhDVdzTSFy0mqYojBgLoYJ1I8AYquIe9Ab9LhhRG17uHoDUQcoqewHGUBX3KAK8BqsWlf46QnWs7TBrKMAYquR+Q7sd3pp+YEodAlCn0rmQvQBjqJJ7sA6AroDLhhFj0TKp6XPWUIAxVM39C2cCUB1eFdnmQvYCjKFq7rf0B4vKVoK6Rba5kL0AY6iie9AmEgafSpli6wxdAcZQRfcgAkxqOVTKFFtnYiICjKGK7nc0bqg+wItaptg8MwQQYAxVdU+3HqkVSCq52N5JJ9gFGENV3ffoJIvyAKRIsb2f9ikFGENV3c9KfsTA6rXiApkm9IcC+6aLcI66LSZm0uKF9tkSPxSYsepqBHaCXx5Yv3AohnbqFdnnKmiiPgtrXWI3CILdYSnhKNH8sdvrwU2eVGcAZreh\/DbYBHd5YGjFTSp\/TgsUmEdK9tVGqrfy1\/H2stu2bbd9P1lp6\/tt21zzKuAMwLT6HsDA1tiT0srPqOy1TgO3s66td+55FfD7gXUK4okwC1XZa536KecF9o9XAb8fGNpreZSJEq6UvdZp45J8YQzVAAaSTx1EwoixSt\/rGLIXYAzVGQZqO\/Zgz1eLAezIWYAxVAeYLgJsPUDz8hczE0MBxlAdYGAZR6y2ulg+ETVUyfjJmEmAMVQrMoYnnul2lES0Ll+VT\/RQuQKMoVrAQPIpA4YRY1HDwb1SS1bsVIAxVAvYjASRIoEwYixi6G3UzWbJMhABxlC9yQKwRVbvmVh6b67aJsZxJAHGUD1gKAKMwoixiOW+7VTbxPjrFGAM1QMGxs7WNe5yYGDqr2Ac0xJgDNUD9gC6iR7IHhWLWg5JNsx4RakAY6gWMJCOb\/+ibxprYhl1J\/+pbWL4c4FZOn0bYKjPYVhTjTWxjICp\/cTob7WBocrymBVxBmBTnb4LsAWeEdMkN8fAXOUjjUL2NScwLWP6vLx+v3rI6Y4muYU6w5oOmHFaoy8BNsTAHHz8AAZGdgea\/Zqpi7qdxWLm6no8pfrtq6Yi6aL1qM1u6YCpy\/S91x+7COe7A+vqlibCRL46YDM1w6LjCjCGarjX9mstsko7FrFLgo7qejl\/+6waCrBzuB\/pl9f7cChGzBJgc+U+1s21aijAzuEe5L3Jk1ClM1PvY01VQwF2Bve62cvEOypBrA7A4GguJwF2Bvfq5GNOcChGrA7AQBYJRQKsuftZwTJSTTyIWB2AuXBWLSsB1tx90brfvSywk4MYHX\/qCj\/WSAKssfuy4CsaihGjIzBwQpxyNwHW1H1ZGgG00o0YHYG5y5I2UYA1dl+6YxYc+UtsTr3\/sjZRgDV1H5Z27MCRv9TmCKx4r5kAa+6+ZPtl\/ACkEDFJx9fyhf2\/wDqMvCp0LQ4xSYGBZKZZCbCG7jUTYfkHIEMxYpICK2liBVgz9+DMKSBLvQGxSIGVjBIEWDP3eIU2qWV1KEYsMjHi4jZRgDVzDz4wC\/zpSilGLDLAwsJGVoA1co+Ctc8DkANdGYoRg+wsTOHYWYA1cg8mwrynFjiUWxmK0VIZYJuiNlGANXG\/A63X\/mOi0QrLyC9hIqWywMBRcakEWBP3II4UHe0AajybA7FVAqwwT8ufAMZcoVzZPcoKFp\/YQe+gPAMplgNWNF\/zF4BZy9fxcDPodbfz\/m4XBJ1F8RJLtntQsUn67B7t7JccNJADVtQm1gbmBmF\/NN8+9gabV3KPvM6w8rcRMMOKUy8leZd827Emy\/e7l4\/P4WqPcBQG6lpPNjAwPdyOXw2cp9jOJcQhl\/NrdcDJEqf7MM\/AdN3ZLOhvu6s9n\/u7pXNIOBWlnPLMkiXbX\/2FEUUbAxwnSp\/lRwzVZFBc9+BExeP0Ml1Mk89cT8rlgRW0iRxg1sv6ajmJzgbe47E9z1GGhmD6IKdvB0x5PfWAcq57kDjgmMIcLFTMZVihBXPAgmbADEtFpDj7m8BC8IGdBsg0ApI9UbEMWOtdW99nPykd6JcC+6B9xPQUPtqo5VJ2kJIKsJX2HQRYXWAd0JVLT+FbgGOqMkMxclEBhm6eSIDVBQaC6tlN6GpOgHy2QlJUXdGtPdFFgNUE5oIzjLLvBZIK+OltyDUVGDi3O5EAqwkMJavPnukLjsHM5CalRRVg2hynAqwmMNCPyx1LBBLyZbao07LqJhddmyjA6gGboy5HbtILbGkx+8eL5BIBpjtuQoDVAwaS\/KpH4tDbpOlkSWECbKZLwCjA6gBDO8LM\/AwKWO5hnbJUkMJ035+mTRRgtYB9gj79UpkDmNF+pH\/MT0pKU2Ca5T3fEtgyDiunMtvfDBiIxoOXolRPU6m0DgkwzRE8lwC29uPZjVRmCbDRXFWVHCEr03GcKCDPfPwawAagR9AmzwjSTx0TXtI6pFuh6dA7dnMBYIPxcLjZDFar3kGrsLhAM42ebu\/XD1fLqeGl544k0wyQYw1gdIyl9OkT0Zo8foa0OAWGZm8aADvOKJltr10C7CvlLoKwP98+dnurt9fbm7vr56lhebYfzRR5EULH8ioDeyzt0yeiIdzjIc0cYAtY75WA7SHFs36maRvLu\/XH53jQHfV3Qe2kRl+iWSeaLN\/2Bm\/jz9uP9cO1euZPKTAwaHbQwUGga36YvecAw8kkSoAlU7MxI9P0lg+3482gt+13FrOfBalIJInWMj67KZ6otRAwtF1B7dMn+iBVfhiKsYDB80EQMCf5kEzfs6bLq5eP\/Xe0He2qJFT72QpH+yZ0MH6KGlDD2zee+QU0AAM5uv4gujDYShLTsYC5aOwMgL1fv3w8RY1duOv8HUpYbmcXblfDXDUEfnGcPluc\/rwkJ86ygJF0fNHcv0lXPNXPs\/c3NL+\/9qLVR9nFLfDMqb3eSLcjCWDxgKXb3eM2zzet5ctt+P+92S\/WLBw9bp7Wd0urbdqeY8Mzp\/YKwFAsyhbGAzabHPp4zvX6dbja7jryLTWU2wlGq\/H9JNQZ0BWGXpS4mQesNV6\/rrrznWC6nOjoNx6KMYGJLi7Xod2OkQpsP3Yyv3Hw4W9pMDX346MstiiIdQLl2aY3WV7djxvuXxCdUeHj283SsE\/YnFnLsLy2aU7vbse9\/q7KMfCiS2kRboe3V5bp295+KLX8t+n2f1G06NdqFmxXg4\/7\/wDgZiMK5fjHrgAAAABJRU5ErkJggg==)\n                                **METADATA**\n                                \n                 ","f71c1c14":"# OLDEST MOVIES AND TV SHOWS","7f5a98e9":"Analysing this data has a very nice application for examples lets say your new year resolution is -\n# LOOKING AT ALL MOVIES FROM DIRECTOR DAVID DHAWAN","6f270ef6":"# LOOKING AT ALL ACTORS THROUGH THE YEARS\n\n","73709f94":"# NETFLIX THROUGH THE YEARS","26d1811d":"# LOOKING AT MOVIES AND TV SHOWS"}}