{"cell_type":{"98cf79cb":"code","7bf2d050":"code","7492bc90":"code","977847c7":"code","b6ad94da":"code","eaeccbff":"code","54096487":"code","65dd116f":"code","4bb2acfb":"code","922739b5":"code","70da782a":"code","9d1274de":"markdown","d54d4be1":"markdown"},"source":{"98cf79cb":"import pandas as pd\nimport numpy as np\nimport os\nimport sklearn as sp\nimport scipy.stats as stats \nimport scipy as sp\nimport seaborn as sb\nimport matplotlib as plt   \nfrom matplotlib import pyplot as plt\nimport math\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import linear_model\nfrom sklearn import preprocessing\nfrom sklearn import metrics\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom statsmodels.stats.multicomp import pairwise_tukeyhsd\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import ols\nfrom sklearn.ensemble import RandomForestClassifier","7bf2d050":"#load and prepare Titanic Data\ntitanic_train=pd.read_csv(\"..\/input\/c\/titanic\/train.csv\") #read the train data\ntitanic_test=pd.read_csv('..\/input\/c\/titanic\/test.csv') #read the test data","7492bc90":"for a_column in titanic_train.columns:\n#     titanic_train[a_column].to_list()\n    print(a_column) #printing each column to explore the general view of the all factors \n","977847c7":"#########___Step A: Explore shape of the DF and data types\ntitanic_train.info()\ntitanic_train.describe()\ntitanic_train.head(20)\n\n# titanic_test['name'].to_list()\nteenagers=titanic_train[titanic_train['Age']<=20]#filtering one of the factor such as age of the passangers\nteenagers.shape#shape is explored to go further in terms of feature engeenering \n# titanic_train['Body']!='NaN'\ntitanic_train['Pclass'].unique()#to get the types\/unique data of the class factor.\ntitanic_train['Pclass'].dtype #in order to know weather it is intiger data or string one.","b6ad94da":"###############################################################################_______value counts and distribution of factors\n#creating a list for each column of the df as deviding them into quantitative(continious and descreate data) and qualitative(nominal and ordinal data)\nfloat_factors=titanic_train[['Age', 'Parch','Fare']]\nint_factors=titanic_train[['Pclass', 'SibSp',]]\nnominal_factors=titanic_train[['Name','Sex', 'Survived']]\nordinal_factors=titanic_train[['Ticket','Cabin','Embarked']]\n\n\nfor i in float_factors:\n    plt.hist(float_factors)\n    plt.title(i)\n    plt.show()\n\n# for i in int_factors:\n#     plt.hist(float_factors)\n#     plt.title(i)\n#     plt.show()\n\n# for i in nominal_factors:\n#     plt.hist(float_factors)\n#     plt.title(i)\n#     plt.show()","eaeccbff":"############################################################################################_______correlation betwee metrics\n##check the correlation of quantitavite data(continious and desireate)\nprint(int_factors.corr())\nsb.heatmap(int_factors.corr())\nprint(float_factors.corr())\nsb.heatmap(float_factors.corr())\n\n##compare survival rate across specific factors\npd.pivot_table(titanic_train, index='Survived',values=['Age', 'Parch','Fare'])\n##compare survival rate on each categorical factors\npd.pivot_table(titanic_train, index='Survived',columns='Pclass', values='Ticket', aggfunc='count')\npd.pivot_table(titanic_train, index='Survived',columns='Sex', values=['Ticket'], aggfunc='count')\npd.pivot_table(titanic_train, index='Survived',columns='Embarked', values=['Ticket'], aggfunc='count')","54096487":"####___Substep 2: explore  passanger's class factor\nfirstClass=[]\nmidClass=[]\nthirdClass=[]\n\nfor i in titanic_train['Pclass']:\n    if i==1:\n        firstClass.append(i)\n    if i==2:\n        midClass.append(i)\n    if i==3:\n        thirdClass.append(i)\n\nprint('The quantity of first-class passengers: ', pd.DataFrame(firstClass).shape[0])\nprint('The quantity of mid-class passengers: ', pd.DataFrame(midClass).shape[0])\nprint('The quantity of third-class passengers: ', pd.DataFrame(thirdClass).shape[0])\n\n\n\n\ntitanic_train.head(5)\n####___Substep 2: explore  passanger's class factor\ninfant=[]\nchild=[]\nteenage=[]\nadult=[]\nold=[]\n\nfor i in titanic_train['Age']:\n    if (i<=2) & (i>=0):\n        infant.append(i)\n    elif (i>=3) & (i<=7):\n        child.append(i)\n    elif (i>=7) & (i<=20):\n        teenage.append(i)\n    elif (i>=20) & (i<=60):\n        adult.append(i)\n    else:\n        old.append(i)\n        \nprint('The quantity of infant passengers: ', pd.DataFrame(infant).shape[0])\nprint('The quantity of child passengers: ', pd.DataFrame(child).shape[0])\nprint('The quantity of teenage passengers: ', pd.DataFrame(teenage).shape[0])\nprint('The quantity of adult passengers: ', pd.DataFrame(adult).shape[0])\nprint('The quantity of old passengers: ', pd.DataFrame(old).shape[0])","65dd116f":" ########################################################################_______Impute each of the factor of train set for NA values\n\n\nnew_age_var=np.where(titanic_train['Age'].isnull(),#missing value is check wether it is null\n                    28,                            #replasing the missed value \n                    titanic_train['Age'])          #value is checked weether it is false\n\ntitanic_train['Age']=new_age_var\n\nnew_fare_var=np.where(titanic_train['Fare'].isnull(),#missing value is check wether it is null\n                     50,                             #replasing the missed value  \n                     titanic_train['Fare'])          #value is checked weether it is false\n\ntitanic_train['Fare']=new_fare_var\n\nnew_pclass_var=np.where(titanic_train['Pclass'].isnull(),#missing value is check wether it is null\n                     3,                                 #replasing the missed value  \n                     titanic_train['Pclass'])          #value is checked weether it is false\n\ntitanic_train['Pclass']= new_pclass_var\n\nnew_cabin_var=np.where(titanic_train['Cabin'].isnull(),#missing value is check wether it is null\n                     'B',                             #replasing the missed value  \n                     titanic_train['Cabin'])          #value is checked weether it is false\n\ntitanic_train['Cabin']= new_cabin_var\n\nnew_sex_var=np.where(titanic_train['Sex'].isnull(),#missing value is check wether it is null\n                     'male',                         #replasing the missed value  \n                     titanic_train['Sex'])          #value is checked weether it is false\n\ntitanic_train['Sex']= new_sex_var\n\nnew_survived_var=np.where(titanic_train['Survived'].isnull(),#missing value is check wether it is null\n                     1,                                 #replasing the missed value  \n                     titanic_train['Survived'])         #value is checked weether it is false\n\ntitanic_train['Survived']= new_survived_var\n\n\n#Impute median age of test set for NA values\nnew_age_var_test=np.where(titanic_test['Age'].isnull(),#missing value is check wether it is null\n                    28,                            #replasing the missed value  \n                    titanic_test['Age'])          #value is checked weether it is false\n\ntitanic_test['Age']=new_age_var_test\n\nnew_fare_var_test=np.where(titanic_test['Fare'].isnull(),#missing value is check wether it is null\n                     50,                             #replasing the missed value  \n                     titanic_test['Fare'])          #value is checked weether it is false\n\ntitanic_test['Fare']=new_fare_var_test\n\nnew_pclass_var_test=np.where(titanic_test['Pclass'].isnull(),#missing value is check wether it is null\n                     3,                             #replasing the missed value  \n                     titanic_test['Pclass'])          #value is checked weether it is false\n\ntitanic_test['Pclass']= new_pclass_var_test\n\nnew_cabin_var_test=np.where(titanic_test['Cabin'].isnull(),#missing value is check wether it is null\n                     'B',                             #replasing the missed value  \n                     titanic_test['Cabin'])          #value is checked weether it is false\n\ntitanic_test['Cabin']= new_cabin_var_test\n\nnew_sex_var_test=np.where(titanic_test['Sex'].isnull(),#missing value is check wether it is null\n                     'male',                             #replasing the missed value  \n                     titanic_test['Sex'])          #value is checked weether it is false\n\ntitanic_test['Sex']= new_sex_var_test\n\nchar_cabin=titanic_train['Cabin'].astype(str) # cabin is converted to string\nnew_cabin=np.array([cabin[0] for cabin in new_cabin_var])#the first letter is taken\ntitanic_train['Cabin']=pd.Categorical(new_cabin_var)# new cabin var is saved ","4bb2acfb":"#Initializing label encoder\nlabel_encoder=preprocessing.LabelEncoder()\n\n# transform sex variable to numeric\nencoded_sex=label_encoder.fit_transform(titanic_train['Sex'])\nencoded_class=label_encoder.fit_transform(titanic_train['Pclass'])\nencoded_cabin=label_encoder.fit_transform(titanic_train['Cabin'])\n# titanic_train.columns","922739b5":"###########################################################__ Decision Tree\n###########################################################\n# X_test = X_test.fillna(X_train.mean())\n###########################################################\n\n#initializing the model\ndecisionTree_model=tree.DecisionTreeClassifier()\n#training the model\ndecisionTree_model.fit(X=pd.DataFrame(encoded_sex), y=titanic_train['Survived'])\n\n# import graphviz\n# # save visual tree data\n# visual_tree=tree.export_graphiz(decisionTree_model, out_file=None)\n# visual_tree_graph=graphiz.Source(visual_tree)\n# visual_tree_graph\n\n#get survival rate probability according to sex group\nprediction_probability=decisionTree_model.predict_proba(X=pd.DataFrame(encoded_sex))\n\n#get survival probability according to each sex group (such as male and female)\nfemale_group=prediction_probability[titanic_train['Sex']=='female'][0][1]\nmale_group=prediction_probability[titanic_train['Sex']=='male'][0][1]\nprint('female survial prob:  ', female_group) \nprint('male survial prob:  ', male_group)   \n\n# #making data frame for predictors including sex group and pcalss and transforming it \n# predictorDF_toFit=pd.DataFrame([encoded_sex, titanic_train['Pclass']]).T\n\n# #Training the model\n# decisionTree_model.fit(X=predictorDF_toFit, y=titanic_train['Survived'])\n\n# ## save visual tree data\n# # visual_tree=tree.export_graphiz(decisionTree_model, out_file=None)\n# # visual_tree_graph=graphiz.Source(visual_tree)\n# # visual_tree_graph\n\n# #get survival probability according to sex group and pcalss\n# prediction_probability=decisionTree_model.predict_proba(X=predictorDF_toFit)\n\n# #learning correlation between sex factor and passangers' class factor AS creating a cross table of predictions by sex and class \n# pd.crosstab(prediction_probability[:,0], columns=[titanic_train['Pclass'], titanic_train['Sex']])\n\n# #making data frame for predictors including sex group, pcalss and fare as transforming it\n# predictorDF_toFit=pd.DataFrame([encoded_sex,titanic_train['Pclass'],titanic_train['Age'], titanic_train['Fare']]).T\n\n\n# #initialize model with maximium tree depth set to 8\n# decisionTree_model=tree.DecisionTreeClassifier(max_depth=8)\n# #training the model with survived fator\n# decisionTree_model.fit(X=predictorDF_toFit, y=titanic_train['Survived']) \n\n# # visualize the tree with graphis and save it  \n# visual_tree=tree.export_graphviz(decisionTree_model, out_file=None)\n# visual_tree_graph=graphviz.Source(visual_tree)\n# visual_tree_graph","70da782a":" #Create submission for kaggle\ndetails_toSubmit=pd.DataFrame({female_group, male_group}) \n\n# #Save submission to CSV\ndetails_toSubmit.to_csv('myTitanicML.csv', index=False)  ","9d1274de":"Titanic_DecisionTree | In this project as taking gender factor into consideration survival rate is analyzed. We would be glad receiving any feedback related to this project  of us, and you may welcome if there is further questions related to this project. Happy Kaggling)))","d54d4be1":"Titanic_DecisionTree | In this project as taking gender factor into consideration survival rate is analyzed. We would be glad receiving any feedback related to this project  of us, and you may welcome if there is further questions related to this project. Happy Kaggling)))\n"}}