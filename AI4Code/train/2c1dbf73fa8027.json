{"cell_type":{"f09c8153":"code","7d594561":"code","f097ec82":"code","aacb1160":"code","a5d5a9b0":"code","08efd5e6":"code","8c44eb2f":"code","a83284e1":"code","0472fb57":"code","06182d19":"code","8983e1e2":"code","9aa5f5e5":"code","27e64819":"code","85cc46df":"code","3c27e2bc":"code","8a5bceb2":"code","c5530862":"code","6c8e4051":"code","e6e6fedd":"code","6c51a4bc":"code","dd2966e0":"code","ab16ca94":"code","a7d3984b":"code","3037c4f0":"code","fef426d7":"code","480894d9":"code","35b47059":"markdown","6d0edb84":"markdown","326e2fa2":"markdown","1f58ab6d":"markdown","fd4a0d0d":"markdown","37d57973":"markdown","8cc5f86d":"markdown","1dacc55a":"markdown","c30f8872":"markdown","e9cfe5cd":"markdown","f30aeca6":"markdown","306004cf":"markdown","befccb07":"markdown","c68a5e05":"markdown","f864e0d4":"markdown","d0c855b6":"markdown","66df6df2":"markdown","8065a0f3":"markdown","6683d29b":"markdown"},"source":{"f09c8153":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7d594561":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.style.use('ggplot')\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics","f097ec82":"df = pd.read_csv('\/kaggle\/input\/stock-index-prediction-both-labels-and-features\/SP500.csv')\ndf.head(10)","aacb1160":"df.info()","a5d5a9b0":"import missingno as msno\nmsno.matrix(df)","08efd5e6":"plt.figure(figsize=(12,8))\nsns.heatmap(df.describe()[1:].transpose(),\n            annot=True,linecolor=\"w\",\n            linewidth=2,cmap=sns.color_palette(\"Set2\"))\nplt.title(\"Data summary\")\nplt.show()","8c44eb2f":"\ncor_mat= df[:].corr()\nmask = np.array(cor_mat)\nmask[np.tril_indices_from(mask)] = False\nfig=plt.gcf()\nfig.set_size_inches(30,12)\nsns.heatmap(data=cor_mat,mask=mask,square=True,annot=True,cbar=True)","a83284e1":"corr=df.corr()\ncorr.sort_values(by=[\"LABEL\"],ascending=False).iloc[0].sort_values(ascending=False)","0472fb57":"explode = (0.1,0)  \nfig1, ax1 = plt.subplots(figsize=(12,7))\nax1.pie(df['LABEL'].value_counts(), explode=explode,labels=['Down','Up'], autopct='%1.1f%%',\n        shadow=True)\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal')  \nplt.tight_layout()\nplt.legend()\nplt.show()","06182d19":"plt.figure(figsize=(10,9))\nsns.scatterplot(x='InterestRate',y='ExchangeRate',data=df,palette='Set1', hue = 'LABEL');","8983e1e2":"df = df.drop('Date',axis=1)\ndf.head()","9aa5f5e5":"X = df.drop('LABEL',axis=1)\ny = df['LABEL']","27e64819":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 0)","85cc46df":"from xgboost import XGBClassifier\nclassifier = XGBClassifier()\nclassifier.fit(X_train, y_train)","3c27e2bc":"#prediction the test set result\ny_pred = classifier.predict(X_test)","8a5bceb2":"\ncm = confusion_matrix(y_test,y_pred)\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cm), annot=True, cmap=\"RdGy\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","c5530862":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","6c8e4051":"from sklearn import metrics\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","e6e6fedd":"#fitting random forest classification into training set\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=10, criterion='entropy',random_state=0)\nrf.fit(X_train, y_train)","6c51a4bc":"#prediction the test set result\ny_pred = rf.predict(X_test)","dd2966e0":"cm = confusion_matrix(y_test,y_pred)\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cm), annot=True, cmap=\"RdGy\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","ab16ca94":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","a7d3984b":"from sklearn.svm import SVC\nsvc_model = SVC()\nsvc_model.fit(X_train,y_train)","3037c4f0":"pred = svc_model.predict(X_test)","fef426d7":"\nfrom sklearn.metrics import classification_report,confusion_matrix\ncm = confusion_matrix(y_test,pred)\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cm), annot=True, cmap=\"BuPu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","480894d9":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","35b47059":"**Let\u2019s create some simple plots to check out the data!**","6d0edb84":"Create a classification report for the model.","326e2fa2":"**Corelation Matrix**\n","1f58ab6d":"**Splitting the data into training set and test set**","fd4a0d0d":"**Importing the dataset**","37d57973":"**Fitting XGBoost to the training set**","8cc5f86d":"**Let's see the correlation for label column in our dataset**","1dacc55a":"**Importing the libraries**","c30f8872":"**Data Summary**","e9cfe5cd":"**Predictions and Evaluations**","f30aeca6":"Now predict values for the testing data.","306004cf":"Now predict values for the testing data.","befccb07":"**Let's visiualising the missing values**","c68a5e05":"**Percentage of up and down in the dataset!**","f864e0d4":"**Training Random Forest**","d0c855b6":"**Making Confusion Matrix**","66df6df2":"**EDA**","8065a0f3":"**Training Support Vector Machine**","6683d29b":"**Interest Rate Vs. Exchange Rate**"}}