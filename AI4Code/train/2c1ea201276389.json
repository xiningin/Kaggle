{"cell_type":{"413d0b8a":"code","2fe4662b":"code","61bce990":"code","ff349d8f":"code","8abdbdba":"code","180fa0bd":"code","6116f2b8":"code","8d2fb460":"code","21bd893c":"code","f90a3299":"code","e4753575":"code","32fb4cb2":"code","20c00cd5":"code","b40145d5":"code","0a6cd95f":"markdown","4fbad010":"markdown","609bf113":"markdown","5154056e":"markdown","4d3a1ea6":"markdown","8ab44787":"markdown","61e8ac7d":"markdown"},"source":{"413d0b8a":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nimport seaborn as sns\nfrom sklearn.model_selection import StratifiedKFold,GroupKFold\nfrom collections import Counter, defaultdict\nimport random\n\nfrom collections import Counter, defaultdict\n","2fe4662b":"df = pd.read_pickle('..\/input\/ump-train-picklefile\/train.pkl')","61bce990":"sns.displot(df['target'])","ff349d8f":"def stratified_group_k_fold(X, y, groups, k, seed=None):\n    labels_num = np.max(y) + 1\n    y_counts_per_group = defaultdict(lambda: np.zeros(labels_num))\n    y_distr = Counter()\n    for label, g in zip(y, groups):\n        y_counts_per_group[g][label] += 1\n        y_distr[label] += 1\n\n    y_counts_per_fold = defaultdict(lambda: np.zeros(labels_num))\n    groups_per_fold = defaultdict(set)\n\n    def eval_y_counts_per_fold(y_counts, fold):\n        y_counts_per_fold[fold] += y_counts\n        std_per_label = []\n        for label in range(labels_num):\n            label_std = np.std([y_counts_per_fold[i][label] \/ y_distr[label] for i in range(k)])\n            std_per_label.append(label_std)\n        y_counts_per_fold[fold] -= y_counts\n        return np.mean(std_per_label)\n    \n    groups_and_y_counts = list(y_counts_per_group.items())\n    random.Random(seed).shuffle(groups_and_y_counts)\n\n    for g, y_counts in sorted(groups_and_y_counts, key=lambda x: -np.std(x[1])):\n        best_fold = None\n        min_eval = None\n        for i in range(k):\n            fold_eval = eval_y_counts_per_fold(y_counts, i)\n            if min_eval is None or fold_eval < min_eval:\n                min_eval = fold_eval\n                best_fold = i\n        y_counts_per_fold[best_fold] += y_counts\n        groups_per_fold[best_fold].add(g)\n\n    all_groups = set(groups)\n    for i in range(k):\n        train_groups = all_groups - groups_per_fold[i]\n        test_groups = groups_per_fold[i]\n\n        train_indices = [i for i, g in enumerate(groups) if g in train_groups]\n        test_indices = [i for i, g in enumerate(groups) if g in test_groups]\n\n        yield train_indices, test_indices","8abdbdba":"num_bins = 12\ndf[\"bins\"] = pd.cut(df[\"target\"], bins=num_bins, labels=False)\n","180fa0bd":"df['bins'].value_counts()","6116f2b8":"X = df.drop(['target'],axis=1)\n\ny = df['bins'].values\ngroups = np.array(df.time_id.values)  ## Grouping column\n","8d2fb460":"df['fold'] = 0\nfor fold_ind, (dev_ind, val_ind) in enumerate(stratified_group_k_fold(X, y, groups, k=5)):\n    df.loc[val_ind,'fold'] = fold_ind\n    print(f'validation fold {fold_ind} split finished')\ndf.drop(['bins'],axis=1).to_parquet('df_gs_5folds.parquet',index=False)","21bd893c":"df['fold'] = 0\nfor fold_ind, (dev_ind, val_ind) in enumerate(stratified_group_k_fold(X, y, groups, k=10)):\n    df.loc[val_ind,'fold'] = fold_ind\n    print(f'validation fold {fold_ind} split finished')\ndf.drop(['bins'],axis=1).to_parquet('df_gs_10folds.parquet',index=False)","f90a3299":"df.fold.value_counts()","e4753575":"df['fold'] = 0\ngk = GroupKFold(n_splits=5)\nfor fold_ind, (dev_ind, val_ind) in enumerate(gk.split(X, y, groups)):\n    df.loc[val_ind,'fold'] = fold_ind\n    print(f'validation fold {fold_ind} split finished')\ndf.drop(['bins'],axis=1).to_parquet('df_g_5folds.parquet',index=False)","32fb4cb2":"df['fold'] = 0\ngk = GroupKFold(n_splits=10)\nfor fold_ind, (dev_ind, val_ind) in enumerate(gk.split(X, y, groups)):\n    df.loc[val_ind,'fold'] = fold_ind\n    print(f'validation fold {fold_ind} split finished')\ndf.drop(['bins'],axis=1).to_parquet('df_g_10folds.parquet',index=False)","20c00cd5":"df.fold.value_counts()","b40145d5":"df.head()","0a6cd95f":"**Five fold Group + stratified split**","4fbad010":"**5 fold split with GroupKfold**","609bf113":"**Ten fold Group + stratified split**","5154056e":"**10 folds split with GroupKfold**","4d3a1ea6":"**I have saved all folds in parquet files, Use pd.read_parquet() for much faster loading.**","8ab44787":"**Thanks to @columbia2131 for sharing pickle file for faster loading of data. In this notebook, I will be using GroupKfold as well Group + Stratified Kfold to split the training data. I am open to feedbacks**","61e8ac7d":"*Creating Bins for the regression target variable.*"}}