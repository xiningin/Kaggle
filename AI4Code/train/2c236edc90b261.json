{"cell_type":{"13d8ed07":"code","caeaa11c":"code","af4aaf99":"code","630bfc3d":"code","5ec504fa":"code","a9ea7db8":"code","9f9d2a71":"code","c44052f3":"code","bcc74672":"code","2783f6cb":"code","79016434":"code","fe781156":"code","04c3d4c8":"code","2ce2e663":"code","e2d9221a":"code","4cabfd05":"code","ca0e5c5c":"code","bbf7d8a8":"code","d20a2bb4":"code","63812248":"code","3405b479":"code","35cef44b":"code","5e9b3ee9":"code","1f06d597":"code","549d8236":"code","04d9d888":"code","a7a7b95a":"code","63ede20b":"code","6fcc16ac":"code","b1ce3e3a":"code","ceafe5fb":"code","7bb3e8d1":"code","09440523":"code","99bc3ea7":"code","512819bd":"code","39a88669":"code","7452903e":"code","4f4a345d":"code","04a2d59c":"code","0369afa3":"code","7aab8548":"code","4a97250e":"code","539028e9":"markdown","8e575a50":"markdown","97cd0f6f":"markdown","990312b4":"markdown","b933c122":"markdown","7d150d7a":"markdown","0430a195":"markdown","f2071e89":"markdown","2559b6fb":"markdown","19e511dc":"markdown","c180eba7":"markdown","faac081f":"markdown","79fd4267":"markdown","51d2df79":"markdown","8128ad3f":"markdown","9c6507d0":"markdown","8826d827":"markdown","449f641f":"markdown","9fb54015":"markdown","23d00e02":"markdown","62eb88a6":"markdown"},"source":{"13d8ed07":"import numpy as np\nimport math\nimport scipy as sp\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline\n##\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n##\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\n##\nimport optuna\n##\nimport lightgbm as lgb\n##\nimport gc","caeaa11c":"df_train = pd.read_csv('..\/input\/homework-for-students4plus\/train.csv', index_col=0, parse_dates=['issue_d'])\ndf_test  = pd.read_csv('..\/input\/homework-for-students4plus\/test.csv' , index_col=0, parse_dates=['issue_d'])","af4aaf99":"df_train.head()","630bfc3d":"y_train = df_train.loan_condition\nX_train = df_train.drop(['loan_condition'], axis=1)\n\nX_test = df_test","5ec504fa":"X_train['loan_amnt'] = X_train['loan_amnt'].apply(np.log1p)\nX_test['loan_amnt'] = X_test['loan_amnt'].apply(np.log1p)","a9ea7db8":"X_train['earliest_cr_line_day'] = pd.to_datetime(X_train['earliest_cr_line'], format='%b-%Y')\nX_test['earliest_cr_line_day']  = pd.to_datetime(X_test['earliest_cr_line'] , format='%b-%Y')","9f9d2a71":"X_train[\"date_from_earliest_cr_line\"] = (X_train[\"issue_d\"] - X_train[\"earliest_cr_line_day\"]).dt.days\nX_test[\"date_from_earliest_cr_line\"]  = (X_test[\"issue_d\"] - X_test[\"earliest_cr_line_day\"]).dt.days\n## \u6b20\u640d\nX_train[\"date_from_earliest_cr_line\"] = X_train[\"date_from_earliest_cr_line\"].fillna(X_train[\"date_from_earliest_cr_line\"].median())\nX_test[\"date_from_earliest_cr_line\"]  = X_test[\"date_from_earliest_cr_line\"].fillna( X_train[\"date_from_earliest_cr_line\"].median())\n## \u578b\u5909\u63db\nX_train[\"date_from_earliest_cr_line\"] = X_train[\"date_from_earliest_cr_line\"].astype(\"int\")\nX_test[\"date_from_earliest_cr_line\"]  = X_test[\"date_from_earliest_cr_line\"].astype(\"int\")\nX_train.drop(['earliest_cr_line_day'],axis=1,inplace=True)\nX_test.drop( ['earliest_cr_line_day'],axis=1,inplace=True)\nX_train.dtypes","c44052f3":"X_train[\"sub_grade_num\"] = [int(i[1]) for i in X_train[\"sub_grade\"]]\nX_test[\"sub_grade_num\"]  = [int(i[1]) for i in X_test[\"sub_grade\"]]","bcc74672":"X_train['month'] = X_train[\"issue_d\"].dt.month\nX_test['month']  = X_test[\"issue_d\"].dt.month\nX_train['month'] = X_train['month'].astype(\"str\")\nX_test['month']  = X_test['month'].astype(\"str\")\nX_train.dtypes","2783f6cb":"X_train[\"zip_code\"] = [ i[0:3] for i in X_train[\"zip_code\"]]\nX_test[\"zip_code\"]  = [ i[0:3] for i in X_test[\"zip_code\"]]","79016434":"df_zip = pd.read_csv(\"..\/input\/homework-for-students4plus\/free-zipcode-database.csv\")\ndf_zip[\"Zipcode\"] = [str(i).zfill(5)[0:3] for i in df_zip[\"Zipcode\"]]\ndf_zip.head()","fe781156":"zip_list = list(df_zip[\"Zipcode\"].unique())\nzip_list","04c3d4c8":"del df_zip\ngc.collect()","2ce2e663":"X_train[\"zip_code_null\"] = X_train[\"zip_code\"].where(X_train[\"zip_code\"].isin(zip_list) , \"zip_null\")\nX_test[\"zip_code_null\"]  = X_test[\"zip_code\"].where(X_test[\"zip_code\"].isin(zip_list) , \"zip_null\")","e2d9221a":"## \u6642\u523b\ndate_col = ['issue_d']\n## \u8a00\u8a9e\nlang_col = ['emp_title','title']\n## \u30ab\u30c6\u30b4\u30ea\ncats_col = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats_col.append(col)\ncats_col = list(set(cats_col) - set(lang_col))\n## \u6570\u5024\nnum_col = list(X_train.columns)\nnum_col = list(set(num_col) - set(date_col))\nnum_col = list(set(num_col) - set(lang_col))\nnum_col = list(set(num_col) - set(cats_col))\n## \u78ba\u8a8d\nprint(\"date_col : \" + str(len(date_col)))\nprint(\"lang_col : \" + str(len(lang_col)))\nprint(\"cats_col : \" + str(len(cats_col)))\nprint(\"num_col  : \" + str(len(num_col)))\nprint(\"total    : \" + str(len(X_train.columns)))","4cabfd05":"## \u6642\u523b\nX_train_date = X_train[date_col].copy()\nX_test_date  = X_test[date_col].copy()\n## \u8a00\u8a9e\nX_train_lang = X_train[lang_col].copy()\nX_test_lang  = X_test[lang_col].copy()\n## \u30ab\u30c6\u30b4\u30ea\nX_train_cats = X_train[cats_col].copy()\nX_test_cats  = X_test[cats_col].copy()\n## \u6570\u5024\nX_train_num = X_train[num_col].copy()\nX_test_num  = X_test[num_col].copy()","ca0e5c5c":"X_train_num.fillna(X_train_num.median(),axis=0, inplace=True)\nX_test_num.fillna(X_train_num.median() ,axis=0, inplace=True)","bbf7d8a8":"X_train_cats.head()","d20a2bb4":"cats_col","63812248":"target = 'loan_condition'\nX_temp = pd.concat([X_train_cats, y_train], axis=1)\n\nfor col in cats_col:\n    print(col)\n    # X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n    summary = X_temp.groupby([col])[target].mean()\n    X_test_cats[col] = X_test_cats[col].map(summary) \n\n\n    # X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n    skf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n    enc_train = pd.Series(np.zeros(len(X_train)), index=X_train.index)\n\n    for i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n        X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n        X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n        summary = X_train_.groupby([col])[target].mean()\n        enc_train.iloc[val_ix] = X_val[col].map(summary)\n        \n    X_train_cats[col]  = enc_train","3405b479":"# \u78ba\u8a8d\nX_train_cats.head()","35cef44b":"# \u78ba\u8a8d\nX_test_cats.head()","5e9b3ee9":"# \u6b20\u640d\u51e6\u7406\nX_train_cats.fillna(X_train_cats.median(),axis=0, inplace=True)\nX_test_cats.fillna(X_train_cats.median() ,axis=0, inplace=True)","1f06d597":"tfidf = TfidfVectorizer(max_features=1000, analyzer='word', ngram_range=(1, 2))\n\ntrain = []\ntest  = []\nfor col in lang_col:\n    train.append(tfidf.fit_transform(X_train_lang[col].fillna('#')))\n    test.append(tfidf.transform(X_test_lang[col].fillna('#')))","549d8236":"X_train = pd.concat([X_train_date,X_train_cats, X_train_num], axis=1)\nX_test  = pd.concat([X_test_cats , X_test_num], axis=1)\ndf_concat = pd.concat([X_train,y_train],axis=1)","04d9d888":"train_index_date = df_concat.set_index(\"issue_d\")[:\"2015-06-01\"].reset_index().index\nval_index_date   = df_concat.set_index(\"issue_d\")[\"2015-07-01\":].reset_index().index","a7a7b95a":"X_inner_train = df_concat.drop([\"issue_d\",\"loan_condition\"],axis=1)\ny_inner_train = df_concat[\"loan_condition\"]","63ede20b":"for i,col in enumerate(lang_col):\n    X_inner_train = sp.sparse.hstack([X_inner_train, train[i]])\n    X_test = sp.sparse.hstack([X_test, test[i]])\n# \u884c\u65b9\u5411\u306e\u30b9\u30e9\u30a4\u30b9\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u5909\u63db\u3059\u308b\nX_inner_train = X_inner_train.tocsr()\nX_test = X_test.tocsr()","6fcc16ac":"del X_train_date, X_test_date, X_train_lang, X_test_lang, X_train_cats, X_test_cats, X_train_num, X_test_num\ngc.collect()","b1ce3e3a":"def objectives(trial):\n    ## \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7a7a\u9593\u3092\u9069\u5f53\u306b\u8a2d\u5b9a\n    params = {\n        'random_seed'      : 71,\n        'num_leaves'       : trial.suggest_int('num_leaves', 2, 256),\n        'min_child_samples': int(trial.suggest_loguniform('min_child_samples', 100, 10000)),\n        'min_child_weight' : trial.suggest_loguniform('min_child_weight', 0.1, 2000),\n        'subsample'        : trial.suggest_uniform('subsample', 0.8, 1),\n        'colsample_bytree' : trial.suggest_uniform('colsample_bytree', 0.5, 1),\n        'learning_rate'    : trial.suggest_loguniform('learning_rate', 0.025, 0.5),\n        'min_data_in_leaf' : int(trial.suggest_loguniform('min_data_in_leaf', 1, 1000)),\n    }\n    \n    ## \n    scores = []\n    skf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n    \n    for i, (train_ix, test_ix) in enumerate(skf.split(X_inner_train, y_inner_train)):\n        X_train_, y_train_ = X_inner_train[train_ix,:], y_inner_train.values[train_ix]\n        X_val, y_val = X_inner_train[test_ix,:], y_inner_train.values[test_ix]\n        # LightGBM\u3067\u5b66\u7fd2\n        model = lgb.LGBMRegressor(**params)\n        model.fit(X_train_, y_train_,\n                  eval_set=(X_val,y_val),\n                  early_stopping_rounds=20,\n                  eval_metric='auc',\n                  verbose=False)\n\n        # \u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u306e\u30b9\u30b3\u30a2\n        y_inner_pred = model.predict(X_val)\n        score = roc_auc_score(y_val,y_inner_pred)\n        scores.append(score)\n    \n    return np.mean(scores)","ceafe5fb":"%%time\n# optuna\u306b\u3088\u308b\u6700\u9069\u5316\u547c\u3073\u51fa\u3057\nopt = optuna.create_study(direction='maximize',sampler=optuna.samplers.RandomSampler(seed=71))\nopt.optimize(objectives, n_trials=100)","7bb3e8d1":"# \u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\u53d6\u5f97\ntrial = opt.best_trial\nparams_best = dict(trial.params.items())\nparams_best['random_seed'] = 71\nparams_best[\"num_leaves\"] = int(params_best[\"num_leaves\"])\nparams_best[\"min_data_in_leaf\"] = int(params_best[\"min_data_in_leaf\"])","09440523":"params_best2 = dict(trial.params.items())\nparams_best2['random_seed'] = 123\nparams_best2[\"num_leaves\"] = int(params_best[\"num_leaves\"])\nparams_best2[\"min_data_in_leaf\"] = int(params_best[\"min_data_in_leaf\"])","99bc3ea7":"list_params_best_skf = [params_best,params_best2]","512819bd":"def objectives(trial):\n    ## \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7a7a\u9593\u3092\u9069\u5f53\u306b\u8a2d\u5b9a\n    params = {\n        'random_seed'      : 71,\n        'num_leaves'       : trial.suggest_int('num_leaves', 2, 256),\n        'min_child_samples': int(trial.suggest_loguniform('min_child_samples', 100, 10000)),\n        'min_child_weight' : trial.suggest_loguniform('min_child_weight', 0.1, 2000),\n        'subsample'        : trial.suggest_uniform('subsample', 0.8, 1),\n        'colsample_bytree' : trial.suggest_uniform('colsample_bytree', 0.5, 1),\n        'learning_rate'    : trial.suggest_loguniform('learning_rate', 0.025, 0.5),\n        'min_data_in_leaf' : int(trial.suggest_loguniform('min_data_in_leaf', 1, 1000)),\n    }\n    \n    \n    X_train_, y_train_ = X_inner_train[train_index_date,:], y_inner_train.values[train_index_date]\n    X_val, y_val = X_inner_train[val_index_date,:], y_inner_train.values[val_index_date]\n    # LightGBM\u3067\u5b66\u7fd2\n    model = lgb.LGBMRegressor(**params)\n    model.fit(X_train_, y_train_,\n              eval_set=(X_val,y_val),\n              early_stopping_rounds=20,\n              eval_metric='auc',\n              verbose=False)\n\n    # \u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u306e\u30b9\u30b3\u30a2\n    y_inner_pred = model.predict(X_val)\n    score = roc_auc_score(y_val,y_inner_pred)\n    \n    return score","39a88669":"%%time\n# optuna\u306b\u3088\u308b\u6700\u9069\u5316\u547c\u3073\u51fa\u3057\nopt = optuna.create_study(direction='maximize',sampler=optuna.samplers.RandomSampler(seed=71))\nopt.optimize(objectives, n_trials=100)","7452903e":"seed_i = [71,123,51,17,91]\nlist_params_best_tss = []\nfor i in range(5):\n    trial = opt.best_trial\n    params_best = dict(trial.params.items())\n    params_best['random_seed'] = seed_i[i]\n    params_best[\"num_leaves\"] = int(params_best[\"num_leaves\"])\n    params_best[\"min_data_in_leaf\"] = int(params_best[\"min_data_in_leaf\"])\n    \n    list_params_best_tss.append(params_best)","4f4a345d":"submission = pd.read_csv('..\/input\/homework-for-students4plus\/sample_submission.csv', index_col=0)","04a2d59c":"y_pred_test = np.zeros(len(submission))\nfor i, (train_ix, test_ix) in enumerate(skf.split(X_inner_train, y_inner_train)):\n    print(i)\n\n    X_train_, y_train_ = X_inner_train[train_ix,:], y_inner_train.values[train_ix]\n    X_val, y_val = X_inner_train[test_ix,:], y_inner_train.values[test_ix]\n    \n    ## seed\n    for j in list_params_best_skf:\n        params_best = j\n        # LightGBM\u3067\u5b66\u7fd2\n        model = lgb.LGBMRegressor(**params_best)\n        model.fit(X_train_, y_train_,\n                  eval_set=(X_val,y_val),\n                  early_stopping_rounds=20,\n                  eval_metric='auc',\n                  verbose=False)\n\n        # \u6700\u7d42\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\n        y_inner_pred = model.predict(X_test)\n        y_pred_test += y_inner_pred    ","0369afa3":"X_train_, y_train_ = X_inner_train[train_index_date,:], y_inner_train.values[train_index_date]\nX_val, y_val = X_inner_train[val_index_date,:], y_inner_train.values[val_index_date]\n\nfor index,j in enumerate(list_params_best_tss):\n    print(index)\n    params_best = j\n    # LightGBM\u3067\u5b66\u7fd2\n    model = lgb.LGBMRegressor(**params_best)\n    model.fit(X_train_, y_train_,\n              eval_set=(X_val,y_val),\n              early_stopping_rounds=20,\n              eval_metric='auc',\n              verbose=False)\n    # \u6700\u7d42\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\n    y_inner_pred = model.predict(X_test)\n    y_pred_test += y_inner_pred    ","7aab8548":"y_pred = y_pred_test \/ 20\ny_pred","4a97250e":"submission = pd.read_csv('..\/input\/homework-for-students4plus\/sample_submission.csv', index_col=0)\n\nsubmission.loan_condition = y_pred\nsubmission.to_csv('submission.csv')","539028e9":"## \u6539\u3081\u3066\u5b66\u7fd2","8e575a50":"## optuna\u3067\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","97cd0f6f":"### TSS\u306b\u3088\u308b\u65b9\u6cd5","990312b4":"## zip_code\u306e\u6b20\u640d\u51e6\u7406","b933c122":"## \u30c6\u30ad\u30b9\u30c8\u5408\u4f53","7d150d7a":"* \u3068\u308a\u3042\u3048\u305aTarget Encode\u3057\u3066\u304a\u304f\n* \u3053\u3053\u306f\u6642\u7cfb\u5217\u306b\u5206\u3051\u306a\u304f\u3066\u3044\u3044\u306e\uff1f\u3068\u3044\u3046\u30bb\u30eb\u30d5\u30c4\u30c3\u30b3\u30df\u3057\u3066\u304a\u304f","0430a195":"## \u30bf\u30a4\u30d7\u3054\u3068\u306e\u5217\u540d","f2071e89":"## \u30c6\u30ad\u30b9\u30c8","2559b6fb":"## issue_d\u304b\u3089\u6708\u3092\u62bd\u51fa","19e511dc":"## \u6570\u5024","c180eba7":"## \u30ab\u30c6\u30b4\u30ea","faac081f":"## \u63d0\u51fa\u7528\u306e\u4e88\u6e2c","79fd4267":"## \u30ed\u30b0\u5909\u63db","51d2df79":"# \u5185\u90e8\u691c\u8a3c\u5b66\u7fd2","8128ad3f":"## issue_d\u3068earliest_cr_line\u306e\u5f15\u304d\u7b97","9c6507d0":"# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","8826d827":"# \u30c7\u30fc\u30bf\u5206\u5272","449f641f":"## \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570","9fb54015":"## subgrade","23d00e02":"\u9069\u5f53\u306b\u6b20\u640d\u51e6\u7406","62eb88a6":"### SKF\u306b\u3088\u308b\u65b9\u6cd5"}}