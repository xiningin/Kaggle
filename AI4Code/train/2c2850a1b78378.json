{"cell_type":{"49181236":"code","61454283":"code","abaf050a":"code","047e713c":"code","eedafecc":"code","7b7ba8fc":"code","bb9ca669":"code","11e9440d":"code","a5ec8264":"code","e0d073d8":"code","663e3bb7":"code","d3aaf52b":"code","b0918245":"code","72e1a9dd":"code","5b3cec4e":"code","65b0f946":"code","fb161aec":"code","927869c8":"code","cde8a83d":"code","8ab9b119":"code","5d80090a":"code","7222148b":"code","8e728284":"markdown","b8d926fe":"markdown","d707f053":"markdown","d1fdc559":"markdown","09654bea":"markdown","a30c249e":"markdown"},"source":{"49181236":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as snb\n%matplotlib inline\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report","61454283":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","abaf050a":"#\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0432\u0441\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 Embarked \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u043c\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438. \nembarked = df.groupby('Embarked').count()['PassengerId']\n\nembarked_max = embarked[embarked == embarked.max()].index[0]\ndf.loc[df['Embarked'].isnull(), 'Embarked'] = embarked_max\n\nembarked = test_df.groupby('Embarked').count()['PassengerId']\nembarked_max = embarked[embarked == embarked.max()].index[0]\ntest_df.loc[test_df['Embarked'].isnull(), 'Embarked'] = embarked_max","047e713c":"#\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0432\u0441\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 Age \u0441\u0440\u0435\u0434\u043d\u0438\u043c.\navg = np.mean(df['Age'])\ntest_avg = np.mean(test_df['Age'])\n\ndf['Age'] = df['Age'].fillna(avg)\ntest_df['Age'] = test_df['Age'].fillna(test_avg)","eedafecc":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u0444\u0438\u0447\u0438\n\ndf['name_len_5'] = df.Name.str.len()\/\/5\ntest_df['name_len_5'] = test_df.Name.str.len()\/\/5\n\n\ndf['name_len_10'] = df.Name.str.len()\/\/10\ntest_df['name_len_10'] = test_df.Name.str.len()\/\/10\ndf","7b7ba8fc":"def gen_status(x):\n    if 'Ms' in x:\n        return 1\n    elif 'Miss' in x:\n        return 2\n    elif 'Sir' in x or 'Dr' in x or 'Don' in x or 'Capt' in x or 'Rev' in x or 'Dona' in x:\n        return 3\n    else: return 0\n#\n\ndf['Status'] = df.Name.apply(gen_status)\ntest_df['Status'] = test_df.Name.apply(gen_status)\ndf\n# c(\"Capt\",\"Don\",\"Major\",\"Col\",\"Rev\",\"Dr\",\"Sir\",\"Mr\",\"Jonkheer\")] <- \"man\"\n# c(\"Dona\",\"the Countess\",\"Mme\",\"Mlle\",\"Ms\",\"Miss\",\"Lady\",\"Mrs\")] <- \"woman\"\n# c(\"Master\")] <- \"boy\"","bb9ca669":"df['Name'].head(10)\n","11e9440d":"#\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0432\u0441\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 Fare \u0441\u0440\u0435\u0434\u043d\u0438\u043c.\ntest_avg = np.mean(test_df['Fare'])\ntest_df['Fare'] = test_df['Fare'].fillna(test_avg)","a5ec8264":"#\u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044f.\nle = LabelEncoder()\nle.fit(df['Sex'])\ndf['Sex label'] = le.transform(df['Sex'])\n\nle.fit(test_df['Sex'])\ntest_df['Sex label'] = le.transform(test_df['Sex'])\n\n\nle.fit(df['Embarked'])\ndf['Embarked label'] = le.transform(df['Embarked'])\n\nle.fit(test_df['Embarked'])\ntest_df['Embarked label'] = le.transform(test_df['Embarked'])","e0d073d8":"#\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0444\u0438\u0447\u0438.\n#['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\nx_tr = df[['Pclass', 'Sex label', 'Age', 'SibSp', 'Parch', 'Fare','Status', 'name_len_10']]# 'name_len_5','name_len_10', 'Status']]  # \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0449\u0435 'Embarked label'\ny_tr = df['Survived']\n\n\nx_t = test_df[['Pclass', 'Sex label', 'Age', 'SibSp', 'Parch', 'Fare','Status','name_len_10']]#,'name_len_5','name_len_10', 'Status']] # \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0449\u0435 'Embarked label'\n\n\n#\u041d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0444\u0438\u0447\u0438, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u0442\u043d\u044b\u043c.\nx_tr = (x_tr - np.mean(x_tr))\/np.std(x_tr)\nx_t = (x_t  - np.mean(x_t))\/np.std(x_t)","663e3bb7":"# model = LogisticRegression()\n# model.fit(x_tr, y_tr)\n# predictions = model.predict(x_t)\n# print(predictions)\n\n\n\n# import xgboost as xgb\n# from xgboost import XGBClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nparameters = {\n    \"C\":np.logspace(-3,0,100),\n    \"penalty\":[\"l2\"],\n    'solver': ['liblinear','newton-cg', 'lbfgs','sag','saga']\n#    'gamma': [0.001, 0.0001],\n}\n\n\nmodel = LogisticRegression()\n#\u0413\u043e\u0442\u043e\u0432\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u0441\u0435\u0442\u043a\u0435 \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u044c\u044e\nmodel = GridSearchCV(\n    estimator=model,\n    param_grid=parameters,\n    scoring = 'accuracy',\n    n_jobs = -1,#\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432\n    cv = 5,#\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u043e\u043b\u0434\u043e\u0432\n    verbose=True\n)\n\n#\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u043a\u0435. \u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0435\u0440\u0435\u043c 10.\nmodel.fit(x_tr, y_tr) \n#\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c.\npredictions = model.predict(x_t) ","d3aaf52b":"print(model.best_score_)\nprint(model.best_params_)","b0918245":"# from sklearn.ensemble import RandomForestClassifier\n# from sklearn.model_selection import GridSearchCV\n\n# #grid = {'depth': [4, 6, 8, 10],'learning_rate' : [0.01, 0.05, 0.1], 'iterations'    : [30, 50, 100]}\n# grid = {'max_depth': [4, 5, 6], 'n_estimators': range(10, 35)}\n# #model_1 = CatBoostRegressor()\n# model_1 = RandomForestClassifier(random_state=42)\n# model = GridSearchCV(model_1,grid, cv=5, n_jobs = -1)\n# model.fit(x_tr, y_tr)\n# predictions = model.predict(x_t)\n# predictions","72e1a9dd":"print(model.best_score_)\nprint(model.best_params_)","5b3cec4e":"# print(model.best_score_)\n# print(model.best_params_)","65b0f946":"pr = pd.DataFrame(test_df['PassengerId'])\npr['Survived'] = pd.DataFrame(predictions)\npr.to_csv('submission.csv', index = False)","fb161aec":"#\u041d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0444\u0438\u0447\u0438, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u0442\u043d\u044b\u043c.\n# x_tr = (x_tr - np.mean(x_tr))\/np.std(x_tr)\n# x_t = (x_t  - np.mean(x_t))\/np.std(x_t)\n\n#\u0421\u043d\u043e\u0432\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0441 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0441\u044f \u0441\u043a\u043e\u0440\n\n# model = LogisticRegression()\n# model.fit(x_tr, y_tr)\n# predictions = model.predict(x_t)\n# print(predictions)\n\n# pr = pd.DataFrame(test_df['PassengerId'])\n# pr['Survived'] = pd.DataFrame(predictions)\n# pr.to_csv('submission.csv', index = False)","927869c8":"# import xgboost as xgb\n# from xgboost import XGBClassifier\n#from sklearn.model_selection import GridSearchCV\n\n# #\u0411\u0435\u0440\u0435\u043c \u0441\u0435\u0442\u043a\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432.\n\n\n\n\n# parameters = {\n#     \"C\":np.logspace(-3,3,7),\n#     \"penalty\":[\"l1\",\"l2\"],\n# }\n\n# model = LogisticRegression()\n# #\u0413\u043e\u0442\u043e\u0432\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u0441\u0435\u0442\u043a\u0435 \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u044c\u044e\n# model = GridSearchCV(\n#     estimator=model,\n#     param_grid=parameters,\n#     scoring = 'accuracy',\n#     n_jobs = -1,#\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432\n#     cv = 10,#\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u043e\u043b\u0434\u043e\u0432\n#     verbose=True\n# )\n\n# #\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u043a\u0435. \u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0435\u0440\u0435\u043c 10.\n# #model.fit(x_tr, y_tr) \n# #\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c.\n# #predictions = model.predict(x_t) ","cde8a83d":"# import xgboost as xgb\n# from xgboost import XGBClassifier\n# from sklearn.model_selection import GridSearchCV\n\n# #\u0411\u0435\u0440\u0435\u043c \u0441\u0435\u0442\u043a\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432.\n# parameters = {\n#     'max_depth': range (2, 5, 1),#\u0433\u043b\u0443\u0431\u0438\u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432\n#     'n_estimators': range(100, 600, 10),#\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432\n#     'learning_rate': [0.01, 0.05],#\u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n#     'colsample_bytree': [.9, 1]#\u0440\u0430\u0437\u043c\u0435\u0440 \u0433\u0440\u0443\u043f\u043f\n# }\n\n# gbm = XGBClassifier( )\n# #\u0413\u043e\u0442\u043e\u0432\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u0441\u0435\u0442\u043a\u0435 \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u044c\u044e\n# model = GridSearchCV(\n#     estimator=gbm,\n#     param_grid=parameters,\n#     scoring = 'accuracy',\n#     n_jobs = -1,#\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432\n#     cv = 10,#\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u043e\u043b\u0434\u043e\u0432\n#     verbose=True\n# )\n\n# #\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u043a\u0435. \u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0435\u0440\u0435\u043c 10.\n# #model.fit(x_tr, y_tr) \n# #\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c.\n# #predictions = model.predict(x_t) ","8ab9b119":"# print(\"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: \", model.best_params_)\n# print(\"\u041b\u0443\u0447\u0448\u0430\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c: \", model.best_score_)","5d80090a":"# predictions = model.predict(x_t)\n# pr = pd.DataFrame(test_df['PassengerId'])\n# pr['Survived'] = pd.DataFrame(predictions)","7222148b":"# pr.to_csv('submission.csv', index = False)","8e728284":"# **\u0433\u0443\u0433\u043b\u0438\u0442\u0435 gridsearchcv. \u041d\u0438\u0436\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0441\u043b\u043e\u043c\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440**","b8d926fe":"# **\u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c!**","d707f053":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0434\u0440\u0443\u0433\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c! ","d1fdc559":"# \u041e\u0442\u043d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u0447\u0442\u043e \u043e\u043d\u0438 \u0431\u044b\u043b\u0438 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 -1 \u0434\u043e 1","09654bea":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438","a30c249e":"\u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441!"}}