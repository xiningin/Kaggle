{"cell_type":{"3d53b803":"code","2283a4f0":"code","d393c192":"code","26e6d3ba":"code","14eb7f87":"code","2b77c41d":"code","785b1b31":"code","ee3fe922":"code","e48dd741":"code","ff32b88a":"code","3c3de164":"code","ff12172f":"code","f5aad1a9":"code","bfa58b94":"code","8138c51c":"code","6854b693":"code","0b2c8cc0":"code","8b957b48":"code","cf092378":"code","b8521075":"code","73a03b09":"code","71fd6ede":"code","3d446088":"code","9807c8c9":"code","cbab8a87":"code","144d95e1":"code","55e3f3b8":"code","59d31c5a":"code","2fe6105b":"code","27996d50":"code","6ded4241":"code","3b4e5d53":"code","09cfcd10":"code","ba02354a":"code","43e4408c":"code","5362312c":"code","d7fa1a28":"code","c13bba1d":"code","ccd73a2c":"code","cbb2086a":"code","84b6c98f":"code","190555e1":"code","40839ca4":"code","83747187":"markdown","2c0aba95":"markdown","5deed59c":"markdown","6eddc11e":"markdown","4b727cda":"markdown","b8c4eec3":"markdown","6f0859d4":"markdown","ac559ff5":"markdown","c2a6adb3":"markdown","35faa01e":"markdown","b3eff0ce":"markdown","8addaf05":"markdown","6567cb36":"markdown","46f091b1":"markdown","b037c8e2":"markdown","d77c8509":"markdown"},"source":{"3d53b803":"# Convention for import to get shortened namespace\nimport numpy as np","2283a4f0":"# Create a simple array from a list of integers\na = np.array([1, 2, 3])\na","d393c192":"# See how many dimensions the array has\na.ndim","26e6d3ba":"# Print out the shape attribute\na.shape","14eb7f87":"# Print out the data type attribute\na.dtype","2b77c41d":"# This time use a nested list of floats\na = np.array([[1., 2., 3., 4., 5.]])\na","785b1b31":"# See how many dimensions the array has\na.ndim","ee3fe922":"# Print out the shape attribute\na.shape","e48dd741":"# Print out the data type attribute\na.dtype","ff32b88a":"a = np.arange(5)\nprint(a)","3c3de164":"a = np.arange(3, 11)\nprint(a)","ff12172f":"a = np.arange(1, 10, 2)\nprint(a)","f5aad1a9":"b = np.linspace(5, 15, 5)\nprint(b)","bfa58b94":"b = np.linspace(2.5, 10.25, 11)\nprint(b)","8138c51c":"a = range(5, 10)\nb = [3 + i * 1.5\/4 for i in range(5)]\nb","6854b693":"a = []\nfor i in range(5):\n    a.append(i)\na\n    ","0b2c8cc0":"result = []\nfor x, y in zip(a, b):\n    result.append(x + y)\nprint(result)","8b957b48":"a = np.arange(5, 10)\nb = np.linspace(3, 4.5, 5)","cf092378":"a + b","b8521075":"a * b","73a03b09":"a = np.array([1,2,3,4,5])\na=a*2\nprint(a)\n","71fd6ede":"np.pi","3d446088":"np.e","9807c8c9":"# This makes working with radians effortless!\nt = np.arange(0, 2 * np.pi + np.pi \/ 4, np.pi \/ 4)\nt","cbab8a87":"# Calculate the sine function\nsin_t = np.sin(t)\nprint(sin_t)","144d95e1":"# Round to three decimal places\nprint(np.round(sin_t, 3))","55e3f3b8":"# Calculate the cosine function\ncos_t = np.cos(t)\nprint(cos_t)","59d31c5a":"# Convert radians to degrees\ndegrees = np.rad2deg(t)\nprint(degrees)","2fe6105b":"# Integrate the sine function with the trapezoidal rule\nsine_integral = np.trapz(sin_t, t)\nprint(np.round(sine_integral, 3))","27996d50":"# Sum the values of the cosine\ncos_sum = np.sum(cos_t)\nprint(cos_sum)","6ded4241":"# Calculate the cumulative sum of the cosine\ncos_csum = np.cumsum(cos_t)\nprint(cos_csum)","3b4e5d53":"# Convention for import to get shortened namespace\nimport numpy as np","09cfcd10":"# Create an array for testing\na = np.arange(12).reshape(3, 4)","ba02354a":"a","43e4408c":"a[1, 2]","5362312c":"a[2]","d7fa1a28":"a[0, -1]","c13bba1d":"# Get the 2nd and 3rd rows\na[1:3]","ccd73a2c":"# All rows and 3rd column\na[:, 2]","cbb2086a":"# ... can be used to replace one or more full slices\na[..., 2]","84b6c98f":"# Slice every other row\na[::2]","190555e1":"a","40839ca4":"a*3","83747187":"## Perform basic calculations with Python\n\n### Basic math\n\nIn core Python, that is *without* NumPy, creating sequences of values and adding them together requires writing a lot of manual loops, just like one would do in C\/C++:","2c0aba95":"## Create an array of 'data'\n\nThe NumPy array represents a *contiguous* block of memory, holding entries of a given type (and hence fixed size). The entries are laid out in memory according to the shape, or list of dimension sizes.","5deed59c":"Negative indices are also allowed, which permit indexing relative to the end of the array.","6eddc11e":"### Array math functions\n\nNumPy also has math functions that can operate on arrays. Similar to the math operations, these greatly simplify and speed up these operations. Be sure to checkout the [listing](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/routines.math.html) of mathematical functions in the NumPy documentation.","4b727cda":"### Constants\n\nNumPy proves us access to some useful constants as well - remember you should never be typing these in manually! Other libraries such as SciPy and MetPy have their own set of constants that are more domain specific.","b8c4eec3":"NumPy is the fundamental package for scientific computing with Python. It contains among other things:\n- a powerful N-dimensional array object\n- sophisticated (broadcasting) functions\n- useful linear algebra, Fourier transform, and random number capabilities\n\nThe NumPy array object is the common interface for working with typed arrays of data across a wide-variety of scientific Python packages. NumPy also features a C-API, which enables interfacing existing Fortran\/C\/C++ libraries with Python and NumPy.","6f0859d4":"Indexing in Python is 0-based, so the command below looks for the 2nd item along the first dimension (row) and the 3rd along the second dimension (column).\n\n![](array_index.png)","ac559ff5":"## Resources\n\nThe goal of this tutorial is to provide an overview of the use of the NumPy library. It tries to hit all of the important parts, but it is by no means comprehensive. For more information, try looking at the:\n- [Tentative NumPy Tutorial](http:\/\/wiki.scipy.org\/Tentative_NumPy_Tutorial)\n- [NumPy User Guide](http:\/\/docs.scipy.org\/doc\/numpy\/user\/)\n- [Introduction to NumPy from SAM](http:\/\/www.sam.math.ethz.ch\/~raoulb\/teaching\/PythonTutorial\/intro_numpy.html)","c2a6adb3":"Slicing syntax is written as `start:stop[:step]`, where all numbers are optional.\n- defaults: \n  - start = 0\n  - stop = len(dim)\n  - step = 1\n- The second colon is also optional if no step is used.\n\nIt should be noted that end represents one past the last item; one can also think of it as a half open interval: `[start, end)`","35faa01e":"## Index and slice arrays\n\nIndexing is how we pull individual data items out of an array. Slicing extends this process to pulling out a regular set of the items.","b3eff0ce":"### arange","8addaf05":"Can also just index on one dimension","6567cb36":"### linspace","46f091b1":"That is very verbose and not very intuitive. Using NumPy this becomes:","b037c8e2":"The four major mathematical operations operate in the same way. They perform an element-by-element calculation of the two arrays. The two must be the same shape though!","d77c8509":"NumPy also provides helper functions for generating arrays of data to save you typing for regularly spaced data. \n\n* `arange(start, stop, interval)` creates a range of values in the interval `[start,stop)` with `step` spacing.\n* `linspace(start, stop, num)` creates a range of `num` evenly spaced values over the range `[start,stop]`."}}