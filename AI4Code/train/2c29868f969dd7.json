{"cell_type":{"3f8c7082":"code","8509ad97":"code","1ba416f2":"code","0ad21e8d":"code","d5d3cf1a":"code","55114f3d":"code","ce2b111e":"code","28a12118":"code","f99fe576":"code","0c261654":"code","b06ac004":"code","bb8b2cea":"code","d6978411":"code","3e76e653":"code","16254a18":"code","ecc2a450":"code","ca4962d1":"code","8323150e":"code","faa5c36a":"code","fde4067a":"code","45d85845":"code","137ddea9":"code","b6c3087e":"code","b63d3889":"markdown","31ed91eb":"markdown","b4f1c17f":"markdown","a1705f6d":"markdown","f305fd6f":"markdown"},"source":{"3f8c7082":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8509ad97":"df = pd.read_csv('\/kaggle\/input\/updated-netflix-stock-price-all-time\/netflix.csv')","1ba416f2":"df.head()","0ad21e8d":"df.tail()","d5d3cf1a":"df.shape","55114f3d":"df.isna().sum() # Seems like there's no empty rows","ce2b111e":"df.describe()","28a12118":"df = df.drop(columns=['Adj Close'])","f99fe576":"df","0c261654":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mpl_dates","b06ac004":"fig, ax = plt.subplots(figsize=(20,8))\nax.plot(df['Date'], df['Close'], color='Red')\nax.xaxis.set_major_locator(plt.MaxNLocator(15))\nax.set_xlabel('Date', fontsize='11')\nax.set_ylabel('Price in USD', fontsize='11')\nplt.title('Netflix Stock Prices')\nplt.grid()\nplt.show()","bb8b2cea":"fig, ax = plt.subplots(figsize=(20,8))\nax.bar(df['Date'], df['Volume'])\nax.xaxis.set_major_locator(plt.MaxNLocator(15))\nax.set_xlabel('Date', fontsize='11')\nax.set_ylabel('Volumes', fontsize='11')\nplt.title('Volume Trends', fontsize='20')\nplt.grid()\nplt.show()","d6978411":"df['Market Cap'] = df['Open']*df['Volume']","3e76e653":"fig, ax = plt.subplots(figsize=(20,8))\nax.plot(df['Date'], df['Market Cap'], color='orange')\nax.xaxis.set_major_locator(plt.MaxNLocator(15))\nax.set_xlabel('Date', fontsize='11')\nax.set_ylabel('Market Cap', fontsize='11')\nplt.title('Market Cap')\nplt.grid()\nplt.show()","16254a18":"df.iloc[df['Market Cap'].argmax()]","ecc2a450":"ohlc = df[(df['Date'] > '2018-04-13')]\nohlc = ohlc.loc[:, ['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Market Cap']]\nohlc['Date'] = pd.to_datetime(ohlc['Date'], format='%Y-%m-%d')\n\nfig, ax = plt.subplots(figsize=(20,8))\nax.plot(ohlc['Date'], ohlc['Market Cap'], color='orange')\nax.xaxis.set_major_locator(plt.MaxNLocator(5))\nax.set_xlabel('Date', fontsize='11')\nax.set_ylabel('Market Cap', fontsize='11')\nplt.grid()\nplt.title('Market Cap (After 13 April, 2018)', fontsize='20')\nplt.show()","ca4962d1":"df['vol'] = (df['Close']\/df['Close'].shift(1)) - 1","8323150e":"fig, ax = plt.subplots(figsize=(20,8))\nax.plot(df['Date'], df['vol'], color='purple')\nax.xaxis.set_major_locator(plt.MaxNLocator(15))\nplt.title('Volatility')\nplt.grid()\nplt.show()","faa5c36a":"df['vol'].hist(bins=100, color='purple');","fde4067a":"df['Cumulative Return'] = (1 + df['vol']).cumprod()","45d85845":"fig, ax = plt.subplots(figsize=(20,8))\nax.plot(df['Date'], df['Cumulative Return'], color='green')\nax.xaxis.set_major_locator(plt.MaxNLocator(15))\nax.set_xlabel('Date', fontsize='11')\nax.set_ylabel('Cumulative Return', fontsize='11')\nplt.title('Cumulative Return')\nplt.grid()\nplt.show()","137ddea9":"ohlc = df[(df['Date'] > '2018-04-13')]\nohlc = ohlc.loc[:, ['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Market Cap', 'Cumulative Return']]\nohlc['Date'] = pd.to_datetime(ohlc['Date'], format='%Y-%m-%d')\n\nfig, ax = plt.subplots(figsize=(20,8))\nax.plot(ohlc['Date'], ohlc['Cumulative Return'], color='green')\nax.xaxis.set_major_locator(plt.MaxNLocator(5))\nax.set_xlabel('Date', fontsize='11')\nax.set_ylabel('Cumulative Return', fontsize='11')\nplt.grid()\nplt.title('Cumulative Return (After 04 April, 2018)', fontsize='20')\nplt.show()","b6c3087e":"df.iloc[df['Cumulative Return'].argmax()]","b63d3889":"# Volatility\n\nIn order to know the volatility of the stock, we find the daily percentage change in the closing price of the stock.","31ed91eb":"# Data Preparation & Cleaning\nHere we have done the following tasks:\n- Checked if there's any empty fields or not\n- Dropped the Adj Close column as we don't need this for our analysis","b4f1c17f":"# Data Analysis & Visualization\nHere we'll do the following things:","a1705f6d":"# Cumulative Return\n\nA cumulative return on an investment is the aggregate amount that the investment has gained or lost over time, independent of the amount of time involved.","f305fd6f":"# Market Capitalization\n\nMarket capitalization refers to the total dollar market value of a company's outstanding shares of stock. Commonly referred to as \"market cap,\" it is calculated by multiplying the total number of a company's outstanding shares by the current market price of one share."}}