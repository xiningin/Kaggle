{"cell_type":{"bfcf4004":"code","184543d7":"code","a7d01d6f":"code","daa7bc32":"code","82af0d54":"code","51091659":"code","668b6ec0":"code","a7618fae":"code","9340aa17":"code","4be48813":"code","7dae6698":"code","1eb40d94":"code","ec1cf80d":"code","8a4d8a2b":"code","a57b0558":"code","c7cb4f29":"code","544be0aa":"code","c1d9ca92":"code","cbbedae8":"code","ac5139dc":"code","3bffff15":"code","71285957":"code","f49aed98":"markdown","4c26ade3":"markdown","19f3ed1f":"markdown","56e9b82f":"markdown","74048a90":"markdown","a4bb1e70":"markdown","fc197153":"markdown","4f79260d":"markdown","e13f7cbf":"markdown","e88fa54e":"markdown","237d16ae":"markdown"},"source":{"bfcf4004":"import pandas as pd\nimport numpy as np\nimport sqlite3 as sql\nimport shutil\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdt\nimport datetime as dtm","184543d7":"shutil.copyfile(r\"..\/input\/sf-bay-area-bike-share\/database.sqlite\", r\".\/database.sqlite\" )\nconnection = sql.connect(r\".\/database.sqlite\")\ntables = pd.read_sql_query(\"select name from sqlite_master where type = 'table'\", connection)\ntables.style.set_caption(\"Database Table Names\")","a7d01d6f":"station_info = pd.read_sql_query(\"pragma table_info(station)\", connection)\nstatus_info = pd.read_sql_query(\"pragma table_info(status)\", connection)\ntrip_info = pd.read_sql_query(\"pragma table_info(trip)\", connection)\nweather_info = pd.read_sql_query(\"pragma table_info(weather)\", connection)","daa7bc32":"station_info.style.set_caption(\"Station Variables\")","82af0d54":"status_info.style.set_caption(\"Status Variables\")","51091659":"trip_info.style.set_caption(\"Trip Variables\")\n#zip code data is entered by the user and is unreliable. Will need to be removed. ","668b6ec0":"weather_info.style.set_caption(\"Weather Variables\")\n#zip code data is reliable","a7618fae":"connection.execute(\"CREATE TABLE city_zip (zip_code integer, city text)\")","9340aa17":"connection.execute(\"\"\"INSERT INTO city_zip (zip_code, city) \n                                  VALUES (94107, 'San Francisco'), (94063, 'Redwood City'), \n                                         (94301, 'Palo Alto'), (94041, 'Mountain View'), \n                                         (95113, 'San Jose')\"\"\")\n\ncity_zip = pd.read_sql_query(\"SELECT * FROM city_zip\", connection)\ncity_zip","4be48813":"sizes = [{\"station\" : connection.execute(\"select count() FROM station\").fetchone()[0]},\n         {\"status\" : connection.execute(\"select count() from status\").fetchone()[0]},\n         {\"trip\" : connection.execute(\"select count() from trip\").fetchone()[0]},\n         {\"weather\" : connection.execute(\"select count() from weather\").fetchone()[0]}]\nprint(sizes)","7dae6698":"#writing sqlite queries will take up a lot of space for the tables with many variables. \n#The Following function will make things more concise. \ndef Desc_Query(table, *arg):\n    average_chunk = \"\"\n    min_chunk = \"\"\n    max_chunk = \"\"\n    for x in arg:\n        average_chunk = average_chunk + \", \" + \"avg(\" + x + \") as \" + x \n        min_chunk = min_chunk + \", \" + \"min(\" + x + \") as \" + x\n        max_chunk = max_chunk + \", \" + \"max(\" + x + \") as \" + x\n    average_chunk = average_chunk[2:]\n    min_chunk = min_chunk[2:]\n    max_chunk = max_chunk[2:]\n    \n    query = (\"select 'average', \" + average_chunk + \" from \" + table + \n             \" where \" + \" <> '' AND \".join(arg) + \" <> '' union \" + \n             \n             \"select 'min', \" + min_chunk + \" from \" + table + \n             \" where \" + \" <> '' AND \".join(arg) + \" <> '' union \" + \n             \n             \"select 'max', \" + max_chunk + \" from \" + table + \n             \" where \" + \" <> '' AND \".join(arg) + \" <> ''\")\n    \n    return(query)\n\n\nstation_summary = pd.read_sql_query(Desc_Query(\"station\", \n                                               \"dock_count\"), connection)\nstatus_summary = pd.read_sql_query(Desc_Query(\"status\", \n                                              \"bikes_available\", \n                                              \"docks_available\"), connection)\ntrip_summary = pd.read_sql_query(Desc_Query(\"trip\", \n                                            \"duration\"), connection) \n\n#T character removal prior to summarizing\nconnection.execute(\"\"\" UPDATE weather \n                            SET precipitation_inches = 0 \n                            WHERE precipitation_inches = 'T'\"\"\")\n\nweather_summary = pd.read_sql_query(Desc_Query(\"weather\", \n                                               \"mean_temperature_f\", \n                                               \"mean_dew_point_f\", \n                                               \"mean_humidity\",\n                                              \"mean_sea_level_pressure_inches\", \n                                               \"mean_visibility_miles\",\n                                              \"mean_wind_speed_mph\", \n                                               \"precipitation_inches\", \n                                               \"cloud_cover\"), connection)","1eb40d94":"station_summary.rename(columns = {\"'average'\" : \"Stat\"}).style.set_caption(\"Station Variable Summary\")","ec1cf80d":"status_summary.rename(columns = {\"'average'\" : \"Stat\"}).style.set_caption(\"Status Variable Summary\")","8a4d8a2b":"trip_summary.rename(columns = {\"'average'\" : \"Stat\"}).style.set_caption(\"Trip Variable Summary\")\n#duration is the time of the trip in seconds","a57b0558":"weather_summary.rename(columns = {\"'average'\" : \"Stat\"}).style.set_caption(\"Weather Variable Summary\")\n#cloud_cover between 0:8. 0 - clear skies","c7cb4f29":"#because dates are stored in text format, we will use the function substr() and length() to extract the year from each date.\n\nWet_Cities_Query =  \"\"\" SELECT  substr(date, length(date) - 3) as 'Year', \n                                weather.zip_code, city, \n                                sum(precipitation_inches) as 'Precipitation'  \n                        FROM weather \n                        LEFT JOIN city_zip \n                                ON weather.zip_code = city_zip.zip_code \n                        WHERE substr(date, length(date) - 3) = '2014'\n                        GROUP BY substr(date, length(date) - 3), weather.zip_code\"\"\" \n\nWet_Cities = pd.read_sql_query(Wet_Cities_Query, connection)\nWet_Cities.style.set_caption(\"Precipitation by City Over Time\")","544be0aa":"Wet_Cities","c1d9ca92":"plt.style.use('fivethirtyeight')\n\nplt.bar(Wet_Cities.city, Wet_Cities.Precipitation)\n\nplt.title(\"Total Precipitation by city in 2014\")\nplt.ylabel(\"Total Precipitation in 2014 (in)\")\nplt.xticks(rotation = 'vertical')","cbbedae8":"#methods for extracting months and days from dates formatted as \"mm\/dd\/yyyy\" through SQLite appear convoluted under initial examination.\n#Date Transformations will need to be done via Python scripting, the pandas to_datetime method should work. \nWet_Trips_Query = \"\"\" SELECT  trip.start_station_id, \n                              trip.id as 'trip_id',\n                              trip.start_date, \n                              trip.duration, station.city, \n                              city_zip.zip_code\n                      FROM trip\n                      LEFT JOIN station\n                          ON trip.start_station_id = station.id \n                      LEFT JOIN city_zip\n                          ON station.city = city_zip.city\"\"\"\n\n\n\nWet_Trips = pd.read_sql_query(Wet_Trips_Query, connection)\nWet_Trips[['date', 'time']] = Wet_Trips['start_date'].str.split(' ', expand = True)\nWet_Trips.drop(columns = ['start_date'], inplace = True)\n\nRain = pd.read_sql_query(\"\"\"SELECT date, precipitation_inches \n                            FROM weather\"\"\", connection) ","ac5139dc":"#filtering trip data by 2014\nWet_Trips['date'] = pd.to_datetime(Wet_Trips['date'], format = '%m\/%d\/%Y')\nWet_Trips['year'] = pd.DatetimeIndex(Wet_Trips['date']).year\nWet_Trips['month'] = pd.DatetimeIndex(Wet_Trips['date']).month\n\nWet_Trips_2014 = Wet_Trips[Wet_Trips['year'] == 2014]\n\n#filtering Rain data by 2014\nRain['date'] = pd.to_datetime(Rain['date'], format = '%m\/%d\/%Y')\nRain['year'] = pd.DatetimeIndex(Rain['date']).year\nRain['month'] = pd.DatetimeIndex(Rain['date']).month\n\nRain_2014 = Rain[Rain['year'] == 2014]","3bffff15":"Wet_Trips_2014_month = Wet_Trips_2014.groupby(['month']).duration.median()\n\nRain_2014_month = Rain_2014.groupby(['month']).precipitation_inches.sum()","71285957":"ax = plt.subplot()\n\nplt.style.use('fivethirtyeight')\n\nax.plot(Rain_2014.month.unique(), Wet_Trips_2014_month, color = 'tab:red')\nax.set_xlabel('Month of the Year')\nax.set_ylabel('Median Trip Duration (s)', color = 'tab:red')\nax.tick_params(axis = 'y', labelcolor = 'tab:red')\n\n\nax2 = ax.twinx()\n\nax2.set_ylabel('Total Monthly Precipitation (in)', color = 'tab:blue')\nax2.bar(Rain_2014.month.unique(), Rain_2014_month, color = 'tab:blue', alpha = 0.5)\nax2.tick_params(axis = 'y', labelcolor = 'tab:blue')\n\nplt.title('Precipitation vs. Trip Duration by Month')","f49aed98":"### Rainy Trips\n\nLooks like certain cities got more rain than others. \nLets see if we can compare precipitation to trip duration.\n\nLike above, we will filter for the year 2014\n","4c26ade3":"Lets connect to and take a look at the tables within the database.\n\nWe will save a copy of the database in the working directory to give us writing privileges ","19f3ed1f":"Lets delineate the variables in each table. ","56e9b82f":"This EDA will allow me to practice working with both SQL and Python code. This should help me take a step or two out of my R comfort zone. Further down I get into how rain can affect Bike trips in the California Bay Area","74048a90":"The following code is based on the dual y axis tutorial from the [Matplotlib website](https:\/\/matplotlib.org\/gallery\/api\/two_scales.html)","a4bb1e70":"## Exploratory Data Analysis\n\nI predict that there is a proportional relationship between the duration of a trip and the precipitation on the date when the cyclist began their trip.\n\n### Wet Cities\n\nLets look at the total precipitation across all of the cities. We will filter the data to focus on the year 2014, as this is the only table wherein each day of the year has data. ","fc197153":"Now that we have a good overview of the variables from the tables, lets take a look at the  number of records in each table.","4f79260d":"## Connecting to the SQLite Database","e13f7cbf":"### Descriptive Statistics\n\nLets summarize some of the numeric data from the tables using the SQLite aggregate functions avg(), max(), and min(). We will remove all records with empty values from the tables. \n\nBefore we create a summary for the weather table, we need to update the precipitation data. There is a 'T' assigned to dates where there is still precipitation, but only a trace amount (less than 0.01), so, for the purposes of this study, any amount less than 0.01 will be considered to be 0.","e88fa54e":"We need to add a table to this database linking Zip_Codes to their associated cities","237d16ae":"# Rainy Day Bay Area Bike EDA\n\n![image.png](attachment:image.png)\n\n[image source](https:\/\/humancyclist.wordpress.com\/2016\/03\/13\/what-i-think-about-when-im-cycling\/)"}}