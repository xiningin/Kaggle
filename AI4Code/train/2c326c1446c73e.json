{"cell_type":{"2cf3a846":"code","c4fad28b":"code","377ed5ec":"code","9c74c48f":"code","fea92986":"code","369a517a":"code","9100b634":"code","b18f06eb":"code","3ff9f54e":"code","5069bbbb":"code","f35406a3":"code","904ed483":"code","4d3970be":"code","975a1b54":"code","7acfd88f":"code","9bbde3d0":"code","cf111c8c":"code","80db32e0":"code","1d1a3df6":"code","0054b564":"code","68af3a57":"code","b9564bd3":"code","3cb04b3e":"code","36f84551":"code","640a5deb":"code","7064f401":"code","232cbbb4":"code","ae0c6f24":"code","da464ee7":"code","146aa4f2":"code","20cfe390":"code","2606b78e":"code","9783d1b0":"code","a55e1025":"code","a0871b08":"code","b6582194":"code","034115f0":"code","88f3a620":"code","a738317c":"code","ed1045d4":"code","675c7a76":"code","c0be5cd2":"code","eee2e8cf":"code","5da7f2c5":"code","a9fc12be":"code","98d55711":"code","01bfa8a8":"code","7757b075":"code","0ab03aae":"code","8d79374e":"code","4eefad87":"code","ea63a04b":"code","1cdf6bd5":"code","1ce6fecd":"code","0714da56":"code","f7b22128":"code","cf632bf0":"code","dd9935b5":"code","545ddbe2":"code","f0a8abda":"code","39f314e3":"code","23c621b3":"code","8a86f0f4":"code","76588131":"code","be87f688":"code","e864b7b9":"code","788d72cf":"code","78701085":"code","00350974":"code","95889c10":"code","77c068b8":"code","48a8988d":"code","ccb32a41":"code","a4a2aa4a":"code","81622a5e":"code","85917405":"code","42cd16ee":"code","223c8639":"code","77787168":"code","3030d30c":"code","15d2d593":"code","9c563d8a":"code","2199081b":"code","bce9fd88":"code","58a82944":"code","984001ae":"code","c0476d39":"code","afd3033c":"code","d91af4bd":"code","3572f7f2":"code","a3f1721b":"code","90ea9dc0":"code","c07e3f5a":"code","ac2c23ce":"code","76111aed":"code","da040cdc":"code","092409ea":"code","9facb7cd":"code","fea91507":"code","1ce693fd":"code","807cdf8c":"code","e8d31162":"code","0cb49ba2":"code","8a34657c":"code","05c19b86":"code","8be0dd89":"code","3606d458":"code","81991f74":"code","f6f0e74a":"code","bfed3798":"code","0c31fe65":"code","bdd0cd69":"code","da89d902":"code","bc7dfade":"code","c35fc5f8":"markdown","f9b9611d":"markdown","981e5636":"markdown","ed6fa17e":"markdown","e873591d":"markdown","2fea6a8a":"markdown","d2317482":"markdown","3fcba958":"markdown","7555ff94":"markdown","a445f585":"markdown","b986340f":"markdown","24e79a67":"markdown","2d31b1e7":"markdown"},"source":{"2cf3a846":"#Let's import the Necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()","c4fad28b":"# Example\n# Converts to log1p(count)\n# Print original count back using expm1\nprint('Test log and exp')\ntest_count = 100\nprint('original value', test_count)\nx = np.log1p(test_count) # log (x+1)\nprint('log1p', x)\nprint('expm1', np.expm1(x)) # exp(x) - 1","377ed5ec":"columns = ['count', 'season', 'holiday', 'workingday', 'weather', 'temp',\n       'atemp', 'humidity', 'windspeed', 'year', 'month', 'day', 'dayofweek','hour']","9c74c48f":"#loading the datasets\ndf = pd.read_csv('..\/input\/bike-sharing-demand\/train.csv', parse_dates=['datetime'],index_col=0)\ndf_test = pd.read_csv('..\/input\/bike-sharing-demand\/test.csv', parse_dates=['datetime'],index_col=0)","fea92986":"# We need to convert datetime to numeric for training.\n# Let's extract key features into separate numeric columns\ndef add_features(df):\n    df['year'] = df.index.year\n    df['month'] = df.index.month\n    df['day'] = df.index.day\n    df['dayofweek'] = df.index.dayofweek\n    df['hour'] = df.index.hour","369a517a":"add_features(df)\nadd_features(df_test)","9100b634":"plt.plot(df['2011']['count'],label='2011')\nplt.plot(df['2012']['count'],label='2012')\nplt.xticks(fontsize=14, rotation=45)\nplt.xlabel('Date')\nplt.ylabel('Rental Count')\nplt.title('2011 and 2012 Rentals (Year to Year)')\nplt.legend()\nplt.show()","b18f06eb":"plt.plot(df['2011']['count'].map(np.log1p),label='2011')\nplt.plot(df['2012']['count'].map(np.log1p),label='2012')\nplt.xticks(fontsize=14, rotation=45)\nplt.xlabel('Date')\nplt.ylabel('Log(Rental Count)')\nplt.title('2011 and 2012 Rentals (Year to Year)')\nplt.legend()\nplt.show()","3ff9f54e":"plt.boxplot([df['count']], labels=['count'])\nplt.title('Box Plot - Count')\nplt.ylabel('Target')\nplt.grid(True)","5069bbbb":"# Let's see how the data distribution changes with log1p\n# Evenly distributed\nplt.boxplot([df['count'].map(np.log1p)], labels=['log1p(count)'])\nplt.title('Box Plot - log1p(Count)')\nplt.ylabel('Target')\nplt.grid(True)","f35406a3":"df[\"count\"] = df[\"count\"].map(np.log1p)","904ed483":"df.head()","4d3970be":"df_test.head()","975a1b54":"df.dtypes","7acfd88f":"# Save all data\ndf.to_csv('bike_all.csv',index=True,index_label='datetime',columns=columns)","9bbde3d0":"# Training = 70% of the data\n# Validation = 30% of the data\n# Randomize the datset\nnp.random.seed(5)\nl = list(df.index)\nnp.random.shuffle(l)\ndf = df.loc[l]","cf111c8c":"rows = df.shape[0]\ntrain = int(.7 * rows)\ntest = rows-train","80db32e0":"rows, train, test","1d1a3df6":"columns","0054b564":"# Write Training Set\ndf.iloc[:train].to_csv('bike_train.csv'\n                          ,index=False,header=False\n                          ,columns=columns)","68af3a57":"# Write Validation Set\ndf.iloc[train:].to_csv('bike_validation.csv'\n                          ,index=False,header=False\n                          ,columns=columns)","b9564bd3":"# Test Data has only input features\ndf_test.to_csv('bike_test.csv',index=True,index_label='datetime')","3cb04b3e":"print(','.join(columns))","36f84551":"# Write Column List\nwith open('bike_train_column_list.txt','w') as f:\n    f.write(','.join(columns))","640a5deb":"import sys\nimport numpy as np\n# Set random seed\nnp.random.seed(0)\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\n# NN\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, MinMaxScaler, KBinsDiscretizer\n# Column Transformer\nfrom sklearn.compose import ColumnTransformer","7064f401":"column_list_file = 'bike_train_column_list.txt'\ntrain_file = 'bike_train.csv'\nvalidation_file = 'bike_validation.csv'\ntest_file = 'bike_test.csv'","232cbbb4":"# One Hot Encode all Categorical Features\n# Let's define all the categorical features\ncategorical_features = ['season','holiday','workingday','weather','year','month','dayofweek','hour']\n\n# Standardize Features\nstandardize_features = ['temp', 'atemp', 'humidity', 'windspeed']","ae0c6f24":"columns = ''\nwith open(column_list_file,'r') as f:\n    columns = f.read().split(',')","da464ee7":"columns","146aa4f2":"# Specify the column names as the file does not have column header\ndf_train = pd.read_csv(train_file,names=columns)\ndf_validation = pd.read_csv(validation_file,names=columns)","20cfe390":"df_train.head()","2606b78e":"df_validation.head()","9783d1b0":"X_train = df_train.iloc[:,1:] # Features: 1st column onwards \ny_train = df_train.iloc[:,0].ravel() # Target: 0th column\n\nX_validation = df_validation.iloc[:,1:]\ny_validation = df_validation.iloc[:,0].ravel()","a55e1025":"df_train.head()","a0871b08":"# Features to one-hot encode\ncategorical_features+['day']","b6582194":"# Features to standardize\nstandardize_features","034115f0":"colTransformer = ColumnTransformer([('onehot',\n                                     OneHotEncoder(categories='auto',sparse=False),\n                                     categorical_features),\n                                    ('onehotday',\n                                     OneHotEncoder(categories=[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]],\n                                                   sparse=False),\n                                     ['day']),\n                                    ('standardize',\n                                    StandardScaler(),standardize_features)\n                                   ],\n                                   remainder=\"passthrough\")","88f3a620":"colTransformer.fit(X_train)","a738317c":"X_train_encoded = colTransformer.transform(X_train)\nX_validation_encoded = colTransformer.transform(X_validation)","ed1045d4":"print('Training Data',X_train.shape, 'OneHot Encoded',X_train_encoded.shape)\nprint('Val Data',X_validation.shape, 'OneHot Encoded',X_validation_encoded.shape)","675c7a76":"X_train_encoded[:1]","c0be5cd2":"X_validation_encoded[:1]","eee2e8cf":"nn_regressor = MLPRegressor(random_state=5, \n                            hidden_layer_sizes=[100],\n                            activation='relu',\n                            max_iter=100)","5da7f2c5":"nn_regressor","a9fc12be":"%%time\nnn_regressor.fit(X_train_encoded,y_train)","98d55711":"# Compare actual vs predicted performance with dataset not seen by the model before\ndf = pd.read_csv(validation_file,names=columns)","01bfa8a8":"df.head()","7757b075":"result = nn_regressor.predict(X_validation_encoded)","0ab03aae":"result[:5]","8d79374e":"df['count_predicted'] = result","4eefad87":"df.head()","ea63a04b":"df['count_predicted'].describe()","1cdf6bd5":"# Convert log(count) to count\ndf['count'] = df['count'].map(np.expm1)\ndf['count_predicted'] = df['count_predicted'].map(np.expm1)","1ce6fecd":"# Actual Vs Predicted\nplt.plot(df['count'], label='Actual')\nplt.plot(df['count_predicted'],label='Predicted')\nplt.xlabel('Sample')\nplt.ylabel('Count')\nplt.xlim([100,150])\nplt.title('Validation Dataset - Predicted Vs. Actual')\nplt.legend()\nplt.show()","0714da56":"# Over prediction and Under Prediction needs to be balanced\n# Training Data Residuals\nresiduals = (df['count'] - df['count_predicted'])\n\nplt.hist(residuals)\nplt.grid(True)\nplt.xlabel('Actual - Predicted')\nplt.ylabel('Count')\nplt.title('Residuals Distribution')\nplt.axvline(color='r')\nplt.show()","f7b22128":"value_counts = (residuals > 0).value_counts(sort=False)\nprint(' Under Estimation: {0:.2f}'.format(value_counts[True]\/len(residuals)))\nprint(' Over  Estimation: {0:.2f}'.format(value_counts[False]\/len(residuals)))","cf632bf0":"import sklearn.metrics as metrics\nprint(\"RMSE: {0:.2f}\".format(metrics.mean_squared_error(df['count'],\n                                                    df['count_predicted'])**.5))","dd9935b5":"# Metric Use By Kaggle\ndef compute_rmsle(y_true, y_pred):\n    if type(y_true) != np.ndarray:\n        y_true = np.array(y_true)\n        \n    if type(y_pred) != np.ndarray:\n        y_pred = np.array(y_pred)\n     \n    return(np.average((np.log1p(y_pred) - np.log1p(y_true))**2)**.5)","545ddbe2":"print(\"RMSLE: {0:.2f}\".format(compute_rmsle(df['count'],df['count_predicted'])))","f0a8abda":"# Optional Test Data\n# Prepare Data for Submission to Kaggle\ndf_test = pd.read_csv(test_file,parse_dates=['datetime'])","39f314e3":"X_test =  df_test.iloc[:,1:] # Exclude datetime for prediction","23c621b3":"X_test.head()","8a86f0f4":"# Transform data first with column transformer\nresult = nn_regressor.predict(colTransformer.transform(X_test))","76588131":"# Convert result to actual count\ndf_test[\"count\"] = np.expm1(result)","be87f688":"df_test.head()","e864b7b9":"df_test[df_test[\"count\"] < 0]","788d72cf":"df_test[['datetime','count']].to_csv('My_New_Insight_Predicted_Count.csv',index=False)","78701085":"# https:\/\/keras.io\/\n# https:\/\/github.com\/keras-team\/keras\/issues\/2743\nimport sys\nimport numpy as np\n# Set random seed\nnp.random.seed(0)\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\n# Column Transformer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, MinMaxScaler, KBinsDiscretizer\n\n# Keras Library\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation","00350974":"column_list_file = 'bike_train_column_list.txt'\ntrain_file = 'bike_train.csv'\nvalidation_file = 'bike_validation.csv'\ntest_file = 'bike_test.csv'","95889c10":"# One Hot Encode all Categorical Features\n# Let's define all the categorical features\ncategorical_features = ['season','holiday','workingday','weather','year','month','dayofweek','hour']\n\n# Separated day\ncategorical_day = ['day']\n\n# Standardize Features\nstandardize_features = ['temp', 'atemp', 'humidity', 'windspeed']","77c068b8":"columns = ''\nwith open(column_list_file,'r') as f:\n    columns = f.read().split(',')","48a8988d":"# Specify the column names as the file does not have column header\ndf_train = pd.read_csv(train_file,names=columns)\ndf_validation = pd.read_csv(validation_file,names=columns)","ccb32a41":"df_train.head()","a4a2aa4a":"df_validation.head()","81622a5e":"X_train = df_train.iloc[:,1:] # Features: 1st column onwards \ny_train = df_train.iloc[:,0].ravel() # Target: 0th column\n\nX_validation = df_validation.iloc[:,1:]\ny_validation = df_validation.iloc[:,0].ravel()","85917405":"colTransformer = ColumnTransformer([('onehot',\n                                     OneHotEncoder(categories='auto',sparse=False),\n                                     categorical_features),\n                                    ('onehotday',\n                                     OneHotEncoder(categories=[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]],\n                                                   sparse=False),\n                                     ['day']),\n                                    ('standardize',\n                                    StandardScaler(),standardize_features)\n                                   ],\n                                   remainder=\"passthrough\")","42cd16ee":"colTransformer.fit(X_train)","223c8639":"X_train_encoded = colTransformer.transform(X_train)\nX_validation_encoded = colTransformer.transform(X_validation)","77787168":"print('Training Data',X_train.shape, 'OneHot Encoded',X_train_encoded.shape)\nprint('Val Data',X_validation.shape, 'OneHot Encoded',X_validation_encoded.shape)","3030d30c":"X_train_encoded[:1]","15d2d593":"X_validation_encoded[:1]","9c563d8a":"# Dimension of input data\n# We need to specify number of features when configuring the first hidden layer\nX_train_encoded.shape","2199081b":"model = Sequential()\n# 1 hidden layer with 100 neurons with relu activation\n# output layer - regression, so no activation\nmodel.add(Dense(100, input_dim=X_train_encoded.shape[1],activation='relu'))\nmodel.add(Dense(1,activation=None))","bce9fd88":"# Need to compile the model, specify the optimizer and loss function to use\n# For a mean squared error regression problem\nmodel.compile(optimizer='adam',\n              loss='mse')","58a82944":"from keras.callbacks import EarlyStopping","984001ae":"# We can optionally configure early stopping to prevent overfitting - stop when validation loss does not improve\nearly_stopping = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=2)","c0476d39":"history = model.fit(X_train_encoded, y_train, epochs=20, batch_size=32, \n          validation_data=(X_validation_encoded,y_validation),callbacks=[early_stopping])","afd3033c":"plt.scatter(x=history.epoch,y=history.history['loss'],label='Training Error')\nplt.scatter(x=history.epoch,y=history.history['val_loss'],label='Validation Error')\nplt.grid(True)\nplt.xlabel('Iteration')\nplt.ylabel('Loss')\nplt.title('Training Vs Validation Error')\nplt.legend()\nplt.show()","d91af4bd":"# Compare actual vs predicted performance with dataset not seen by the model before\ndf = pd.read_csv(validation_file,names=columns)","3572f7f2":"df.head()","a3f1721b":"result = model.predict(X_validation_encoded)","90ea9dc0":"result[:5]","c07e3f5a":"df.head()","ac2c23ce":"df['count_predicted'] = result","76111aed":"df.head()","da040cdc":"df['count_predicted'].describe()","092409ea":"df['count'] = df['count'].map(np.expm1)\ndf['count_predicted'] = df['count_predicted'].map(np.expm1)","9facb7cd":"# Actual Vs Predicted\nplt.plot(df['count'], label='Actual')\nplt.plot(df['count_predicted'],label='Predicted')\nplt.xlabel('Sample')\nplt.ylabel('Count')\nplt.xlim([100,150])\nplt.title('Validation Dataset - Predicted Vs. Actual')\nplt.legend()\nplt.show()","fea91507":"# Over prediction and Under Prediction needs to be balanced\n# Training Data Residuals\nresiduals = (df['count'] - df['count_predicted'])\n\nplt.hist(residuals)\nplt.grid(True)\nplt.xlabel('Actual - Predicted')\nplt.ylabel('Count')\nplt.title('Residuals Distribution')\nplt.axvline(color='r')\nplt.show()","1ce693fd":"value_counts = (residuals > 0).value_counts(sort=False)\nprint(' Under Estimation: {0:.2f}'.format(value_counts[True]\/len(residuals)))\nprint(' Over  Estimation: {0:.2f}'.format(value_counts[False]\/len(residuals)))","807cdf8c":"import sklearn.metrics as metrics\nprint(\"RMSE: {0:.2f}\".format(metrics.mean_squared_error(df['count'],\n                                                    df['count_predicted'])**.5))","e8d31162":"# Metric Use By Kaggle\ndef compute_rmsle(y_true, y_pred):\n    if type(y_true) != np.ndarray:\n        y_true = np.array(y_true)\n        \n    if type(y_pred) != np.ndarray:\n        y_pred = np.array(y_pred)\n     \n    return(np.average((np.log1p(y_pred) - np.log1p(y_true))**2)**.5)","0cb49ba2":"print(\"RMSLE: {0:.2f}\".format(compute_rmsle(df['count'],df['count_predicted'])))","8a34657c":"# Optional Test Data\n# Prepare Data for Submission to Kaggle\ndf_test = pd.read_csv(test_file,parse_dates=['datetime'])","05c19b86":"X_test =  df_test.iloc[:,1:] # Exclude datetime for prediction","8be0dd89":"# Transform data first with column transformer\nresult = model.predict(colTransformer.transform(X_test))","3606d458":"result[:5]","81991f74":"# Convert result to actual count\ndf_test[\"count\"] = np.expm1(result)","f6f0e74a":"df_test.head()","bfed3798":"def adjust_count(x):\n    if x < 0:\n        return 0\n    else:\n        return x","0c31fe65":"df_test[df_test[\"count\"] < 0]","bdd0cd69":"df_test['count'] = df_test['count'].map(adjust_count)","da89d902":"df_test[df_test[\"count\"] < 0]","bc7dfade":"df_test[['datetime','count']].to_csv('Mew_Insight_Keras_Predicted_Count.csv',index=False)","c35fc5f8":"# One Hot Encoding","f9b9611d":"* Data Visualization","981e5636":"# NEW Insight\n# Regression using TensorFlow\nBuild the Neural Network using Keras - Easy and Portable across different implementations\nhttps:\/\/keras.io\/\n\n\n\n\n# Objective:\n\n* Train a bike rental prediction model\n* NN requires one hot encoding of categorical data\n* NN also requires features to be on similar scale\n* Perform one-hot encoding of all categorical features: ['season', 'holiday', 'workingday', 'weather', 'year', 'month', 'day', 'dayofweek', 'hour']\n* Verify model performance","ed6fa17e":"# Train a neural network regressor","e873591d":"# Welcome to my Tutorial Notebook\n* I am supper excited to share with you guys the results of new insights for the data preparation and building two models such as:\n*  Regression using SKLearn's Neural Network (NN)\n* Train unisng Keras API with Tensorflow as Backend\n\n# Kaggle Bike Sharing Demand Dataset\nModified 'count' to log1p(count) for training\n\nLog can be used when target represents a count (that is non-negative values)\n\nModel now predicts as log1p(count). We need to convert it back to actual count using expm1(predicted_target)\n\n\n\nInput Features: ['season', 'holiday', 'workingday', 'weather', 'temp', 'atemp', 'humidity', 'windspeed', 'year', 'month', 'day', 'dayofweek','hour']\nTarget Feature: [log1p('count')]\n\nObjective: We are provided hourly rental data spanning two years. For this competition, the training set is comprised of the first 19 days of each month, while the test set is the 20th to the end of the month. You must predict the total count of bikes rented during each hour covered by the test set, using only information available prior to the rental period (Ref: Kaggle.com)","2fea6a8a":"# In this Notebook, we will go through some steps and different insights such as:\n# Contains\n# Regression using SKLearn's Neural Network (NN)\n* Data Underestanding\n* Data Visualization\n* Data Preparation:\n 1. One Hot Encode all the Categorical Features\n 2. Standardize or Normalize all the Numeric Features\n* Train using SKLearn's MLPRegressor (Multi-Layer Perceptron)\/Regression using SKLearn's Neural Network (NN)\n* Prediction\n* Evaluating the Results\n* Submission\n# New Insight for Modeling\n# Train unisng Keras API with Tensorflow as Backend\n* Data Underestanding\n* Data Visualization\n* Data Preparation:\n 1. One Hot Encode all the Categorical Features\n 2. Standardize or Normalize all the Numeric Features\n* Train unisng Keras API with Tensorflow as Backend\n* Prediction\n* Evaluating the Results\n* Submission\n\n","d2317482":"# Regression using SKLearn's Neural Network (NN)\n* One-Hot Encode categorical features, Standardize numeric features\n* Objective:\n\n* Train a bike rental prediction model\n* NN requires one hot encoding of categorical data\n* NN also requires features to be on similar scale\n* Perform one-hot encoding of all categorical features: ['season', 'holiday', 'workingday', 'weather', 'year', 'month', 'day', 'dayofweek', 'hour']\n* Verify model performance","3fcba958":"# Submission","7555ff94":"# Build Model using Keras\nReference: https:\/\/keras.io\/getting-started\/sequential-model-guide\/","a445f585":"* One creative idea to avoid from overfitting is using the Early Sopping Method","b986340f":"# Training and Validation Set\n* Target Variable as first column followed by input features\n* Training, Validation files do not have a column header","24e79a67":"# Submission","2d31b1e7":"# Column Transformer\/New Idea \n* Chain all data transformations\n* Easy and straight forward"}}