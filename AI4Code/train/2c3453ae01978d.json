{"cell_type":{"0ac1b389":"code","b04a322a":"code","6e2833f4":"code","8b684fd8":"code","c603755f":"code","a1a05a4f":"code","8368ee5f":"code","4f88dc15":"code","61e72e42":"code","a3ee7ea9":"code","c8656321":"code","d61d4f1e":"code","9bb6991d":"code","aa681f63":"code","c93639da":"code","cb48b963":"code","bc7c4c74":"code","028019ee":"code","0c45160e":"code","34ba31b4":"code","cc9031be":"code","c1f006f4":"code","24089bd1":"code","972f4423":"code","ca8e8cf7":"code","abbbdfef":"code","42c1b2fe":"code","4aab7480":"code","b7dd7de4":"code","58d175fd":"code","96a98cb7":"code","55b5fc0c":"code","82f12348":"code","249689d5":"markdown","759857fd":"markdown","3a2392d9":"markdown"},"source":{"0ac1b389":"import pandas as pd\npd.set_option(\"max_rows\", 200)\n\nimport numpy as np\n\nnp.random.seed(123)\n\nimport catboost as cb\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import metrics\n\nimport re \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b04a322a":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndf_train.head()","6e2833f4":"df_train.info()","8b684fd8":"df_test.info()","c603755f":"df = pd.concat([df_train, df_test], ignore_index=True)","a1a05a4f":"TRAIN_IDX = df[~df['Survived'].isnull()].index\nTEST_IDX = df[df['Survived'].isnull()].index","8368ee5f":"df.isnull().sum()","4f88dc15":"df.groupby(\"Pclass\")[['Age']].mean()","61e72e42":"def fill_missing_values(df):\n    df = df.copy()\n    df['Age'] = df.groupby(\"Pclass\")['Age'].transform(lambda x: x.fillna(x.mean())).round()\n    df['Embarked'].fillna(df['Embarked'].mode(), inplace=True) \n    df['Fare'].fillna(df['Fare'].mean(), inplace=True)\n    return df\n\ndf = fill_missing_values(df)","a3ee7ea9":"def fix_types(df):\n    df = df.copy()\n    df['Embarked'] = df['Embarked'].astype(str)\n    df['Pclass'] = df['Pclass'].astype(int)\n    df['SibSp'] = df['SibSp'].astype(int)\n    df['Parch'] = df['Parch'].astype(int)\n    df['Age'] = df['Age'].astype(int)\n    return df\n\ndf = fix_types(df)","c8656321":"CAT_FEATURES = ['Embarked', 'Pclass', 'Sex', 'SibSp', 'Parch']\nNUM_FEATURES = ['Fare', 'Age']","d61d4f1e":"X = df.loc[TRAIN_IDX, CAT_FEATURES + NUM_FEATURES].copy()\ny = df.loc[TRAIN_IDX, 'Survived'].copy()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)","9bb6991d":"clf = cb.CatBoostClassifier(custom_metric='Accuracy', use_best_model=True)\n\nclf.fit(\n    X_train, \n    y=y_train, \n    cat_features=CAT_FEATURES,\n    eval_set=[(X_test, y_test)], \n    verbose=False,\n    plot=True, \n    early_stopping_rounds=20,\n)","aa681f63":"clf.get_feature_importance(prettified=True)","c93639da":"def cross_validation(df, cat_features, num_features, params=None):\n    if params is None:\n        params = {\n            'iterations': 90,\n            'loss_function': 'Logloss',\n            'verbose': False,\n            'depth': 6,\n            'eval_metric': 'Accuracy',\n        }\n    \n    df = df.copy()\n    \n    X = df.loc[TRAIN_IDX, cat_features + num_features]\n    y = df.loc[TRAIN_IDX, 'Survived']\n    \n    pool = cb.Pool(X, label=y, cat_features=cat_features)\n    scores = cb.cv(pool, params=params, fold_count=5, seed=42, stratified=True)\n    \n    acc_mean = scores.iloc[-1]['test-Accuracy-mean']\n    std_mean = scores.iloc[-1]['test-Accuracy-std']\n    \n    return acc_mean, std_mean","cb48b963":"BASELINE_ACC, BASELINE_STD = cross_validation(df, CAT_FEATURES, NUM_FEATURES)\nprint('Baseline Accuracy:', BASELINE_ACC, '+-', BASELINE_STD)","bc7c4c74":"def beat_baseline(df, cat_features, num_features):\n    global BASELINE_ACC\n    global BASELINE_STD\n    \n    acc, std = cross_validation(df, cat_features, num_features)\n    \n    print('New Accuracy:', acc, '+-', std)\n    print('Diff:', acc - BASELINE_ACC)\n    \n    if acc > BASELINE_ACC:\n        # update baseline\n        BASELINE_ACC = acc\n        BASELINE_STD = std\n        print('IMPROVE')","028019ee":"df['Title'] = df['Name'].str.extract(r\"([A-Z][a-z]+\\.)\")\ndf['Title'].head()","0c45160e":"def survived_perc(df, col):\n    dff = df.loc[TRAIN_IDX].copy()\n    dff = pd.crosstab(dff[col], dff['Survived'], margins=True)\n    dff['Survived(%)'] = dff[1] \/ dff['All']\n    dff = dff.drop(\"All\").sort_values(by='Survived(%)', ascending=False)\n    return dff","34ba31b4":"titles = survived_perc(df, 'Title')\ntitles","cc9031be":"Mrs = {v: 'Mrs.' for v in ['Sir.', 'Countess.', 'Ms.', 'Mme.', 'Lady.', 'Mlle.', 'Mrs.', 'Dona.']}\nMr = {v: 'Mr.' for v in ['Jonkheer.', 'Don.', 'Rev.', 'Capt.']}\nMaster = {v: 'Master.' for v in ['Master.', 'Col.', 'Major.', 'Dr.']}\n\nremap = {**Mr, **Mrs, **Master}\n\ndf['Title:Remap'] = df['Title'].map(lambda x: remap.get(x, x))\ndf['Title:Remap'].value_counts()","c1f006f4":"beat_baseline(df, ['Embarked', 'Pclass', 'Sex', 'Title:Remap', 'SibSp', 'Parch'], ['Fare', 'Age'])","24089bd1":"df['Ticket:Number'] = df['Ticket'].str.extract(r\"(\\d{3,})\").fillna(0).astype(int)","972f4423":"beat_baseline(df, ['Embarked', 'Pclass', 'Sex', 'Title:Remap', 'Ticket:Number', 'SibSp', 'Parch'], ['Fare', 'Age'])","ca8e8cf7":"CAT_FEATURES = ['Embarked', 'Pclass', 'Sex', 'Title:Remap', 'Ticket:Number', 'SibSp', 'Parch']\nNUM_FEATURES = ['Fare', 'Age']","abbbdfef":"X = df.loc[TRAIN_IDX, CAT_FEATURES + NUM_FEATURES]\ny = df.loc[TRAIN_IDX, 'Survived']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)","42c1b2fe":"params = {\n            'iterations': 1000,\n            'loss_function': 'Logloss',\n            'verbose': False,\n            'depth': 6,\n            'custom_metric': ['Accuracy'],\n        }","4aab7480":"clf = cb.CatBoostClassifier(**params, use_best_model=True)\n\nclf.fit(\n    X_train, \n    y=y_train, \n    cat_features=CAT_FEATURES,\n    eval_set=[(X_test, y_test)], \n    verbose=False,\n    plot=True, \n    early_stopping_rounds=20,\n)\n\ny_pred = clf.predict(X_test)\n\nacc = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy on test set split:', acc)\nprint('Best iteration:', clf.best_iteration_)","b7dd7de4":"params['iterations'] = 75\n\ncross_validation(df, CAT_FEATURES, NUM_FEATURES, params=params)","58d175fd":"clf = cb.CatBoostClassifier(**params)\n\nclf.fit(\n    X, \n    y=y, \n    cat_features=CAT_FEATURES,\n    verbose=False,\n)","96a98cb7":"submission = df.loc[TEST_IDX]","55b5fc0c":"submission['Survived'] = clf.predict(submission[CAT_FEATURES + NUM_FEATURES])\nsubmission['Survived'] = submission['Survived'].astype(int)","82f12348":"submission[['PassengerId', 'Survived']].to_csv('submission.csv', index=False)","249689d5":"## Baseline","759857fd":"## Submission","3a2392d9":"## Adding Features"}}