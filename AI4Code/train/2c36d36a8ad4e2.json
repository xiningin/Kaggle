{"cell_type":{"b923b83d":"code","d4b359f4":"code","dfa7ed26":"code","5a883bc4":"code","4fc053b0":"code","4277886c":"code","b5c0506c":"code","77792251":"code","aa8cf896":"code","857fc495":"code","b8e8b06a":"code","b7ece3d9":"code","a0d26f09":"code","64dcd499":"code","9a602c23":"code","8757ee69":"code","1dbd30a2":"code","4db1abaa":"code","db7bc9fa":"code","5859930e":"code","1452b921":"code","dd51dde7":"code","963292d6":"code","e3db38fb":"code","ec7de70d":"code","8145f2f9":"code","b4512006":"code","7ea048ea":"markdown"},"source":{"b923b83d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d4b359f4":"# \u8bfb\u53d6\u6570\u636e\nimport numpy as np\nimport pandas as pd\nimport os\n\ndata  = pd.read_csv('\/kaggle\/input\/bnu-esl-2020\/train.csv')\ntest  = pd.read_csv('\/kaggle\/input\/bnu-esl-2020\/test.csv')","dfa7ed26":"# \u7edf\u4e00\u4e00\u4e0b\u540d\u79f0\ndata.columns = data.columns.str.replace('Unnamed: 0', 'Id')\ntest.columns = test.columns.str.replace('id', 'Id')","5a883bc4":"# \u770b\u4e00\u770b\u6570\u636e\u957f\u4ec0\u4e48\u6837\ndata.head()","4fc053b0":"# \u770b\u4e00\u770b\u6570\u636e\u957f\u4ec0\u4e48\u6837\ndata.shape","4277886c":"# \u770b\u4e00\u770b\u6570\u636e\u957f\u4ec0\u4e48\u6837\ndata.shape","b5c0506c":"# \u770b\u4e00\u770b\u6570\u636e\u957f\u4ec0\u4e48\u6837\ndata.info()","77792251":"# \u89c2\u5bdf\u53d1\u73b0total_bedrooms\u5b58\u5728\u7f3a\u5931\u503c\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize = (16,6))\nsns.heatmap(data.isnull(),cmap = 'viridis')\n\nplt.figure(figsize = (16,6))\nsns.heatmap(test.isnull(),cmap = 'viridis')","aa8cf896":"# \u53bb\u9664ID\u8fd9\u4e00\u5217\ndata.drop(['Id'], axis = 1,inplace = True)\ndata.shape\nId = test.Id\ntest.drop(['Id'], axis = 1,inplace = True)\ntest.shape","857fc495":"# \u5f97\u5230\u81ea\u53d8\u91cf\u4e0e\u56e0\u53d8\u91cf\uff0c\u4f9b\u4ee5\u540e\u5904\u7406\nX = data.drop(['median_house_value'],axis = 1)\ny = data.median_house_value","b8e8b06a":"# \u7531\u4e8eocean_proximity\u662f\u6587\u672c\u4fe1\u606f\uff0c\u56e0\u6b64\u628aocean_proximity\u8f6c\u6362\u4e3a\u865a\u62df\u53d8\u91cf\nX.ocean_proximity.value_counts()\nX.ocean_proximity.replace({'<1H OCEAN':1.0,'INLAND':2.0,'ISLAND':3.0,'NEAR BAY':4.0,'NEAR OCEAN':5.0},inplace = True)","b7ece3d9":"# total_bedrooms\u6709\u7f3a\u5931\u503c\uff0c\u7528\u5e73\u5747\u6570\u586b\u5145\ndata_inf=X.total_bedrooms.describe()\nX.total_bedrooms = X.total_bedrooms.fillna(data_inf['mean'])","a0d26f09":"# \u518d\u6b21\u770b\u770b\u6570\u636e\u7684\u6837\u5b50\uff0c\u90fd\u662f\u6570\u503c\u53d8\u91cf\u4e86\nX.info()","64dcd499":"# \u6570\u636e\u53ef\u89c6\u5316\uff0c\u53ef\u4ee5\u53d1\u73b0\u7ecf\u7eac\u5ea6\u8fd8\u662f\u6709\u7528\u7684\nhousing = data.copy()\nhousing.plot(kind='scatter',x='longitude',y='latitude',alpha=0.4,\n             s=housing['population'] \/ 100,label='population',c=\"median_house_value\",\n            cmap=plt.get_cmap(\"jet\"),colorbar=True)\nplt.legend()\nplt.show()","9a602c23":"# \u770b\u4e00\u770b\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\uff0c\u6709\u4e00\u4e9b\u53d8\u91cf\u5b58\u5728\u9ad8\u76f8\u5173\uff0c\u5e94\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\ncorr = X.corr()\nplt.figure(figsize=(16, 16))\nsns.heatmap(corr, cmap='viridis')","8757ee69":"# \u56e0\u6b64\uff0c\u6211\u4eec\u521b\u5efa\u65b0\u7279\u5f81\u3002roomes_per_household\u3001bedrooms_per_rooms\u3001population_per_household\u76f8\u6bd4\u539f\u6570\u636e\u66f4\u6709\u610f\u4e49\uff0c\u66f4\u6709\u89e3\u91ca\u6027\nX[\"roomes_per_household\"]=X[\"total_rooms\"]\/X[\"households\"]\nX[\"bedrooms_per_rooms\"]=X[\"total_bedrooms\"]\/X[\"total_rooms\"]\nX[\"population_per_household\"]=X[\"population\"]\/X[\"households\"]","1dbd30a2":"# \u770b\u4e00\u770b\u65b0\u53d8\u91cf\u4e0e\u8001\u53d8\u91cf\u7684\u76f8\u5173\uff0c\u53d1\u73b0\u53d8\u4f4e\u4e86\uff0c\u8fd9\u662f\u597d\u4e8b\ncorr = X.corr()\nplt.figure(figsize=(16, 16))\nsns.heatmap(corr, cmap='viridis')","4db1abaa":"# \u628a\u4e00\u4e9b\u76f8\u5173\u8f83\u9ad8\u7684\u53d8\u91cf\u5254\u9664\nX.drop(['total_rooms'], axis = 1,inplace = True)\nX.drop(['total_bedrooms'], axis = 1,inplace = True)\nX.drop(['households'], axis = 1,inplace = True)","db7bc9fa":"# \u8fdb\u884c\u7279\u5f81\u7f29\u653e\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX = sc_X.fit_transform(X)","5859930e":"# \u51c6\u5907\u5de5\u4f5c\u5b8c\u6210\uff0c\u63a5\u4e0b\u6765\u8fdb\u5165\u6a21\u578b\u90e8\u5206\uff0c\u91c7\u7528 Gradient Boosting\nfrom sklearn import ensemble\nfrom sklearn import datasets\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import mean_squared_error","1452b921":"# \u9009\u53d690%\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0c10%\u4f5c\u4e3a\u9a8c\u8bc1\u96c6\noffset = int(X.shape[0] * 0.9)\nX_train, y_train = X[:offset], y[:offset]\nX_test, y_test = X[offset:], y[offset:]","dd51dde7":"# \u8fdb\u884c\u6a21\u578b\u62df\u5408\uff0c\u5176\u4e2d\u8d85\u53c2\u6570\u662f\u901a\u8fc7\u7f51\u683c\u641c\u7d22\u6765\u786e\u5b9a\u7684\uff0c\u5b9e\u9645\u8fdb\u884c\u7f51\u683c\u641c\u7d22\u65f6\u9700\u8981\u5220\u9664\u540e\u9762\u7684\u4e00\u4e9b\u5206\u6790\uff08\u60f3\u8bd5\u8bd5\u53ef\u4ee5\u628a\u540e\u9762\u90fd\u5220\u4e86\uff09\uff0c\u4e0d\u7136\u4f1a\u62a5\u9519\nparams = {'n_estimators': 1000, 'max_depth': 6, 'min_samples_split': 2,\n          'learning_rate': 0.1, 'loss': 'ls'}\nclf = ensemble.GradientBoostingRegressor(**params)\n\nclf.fit(X_train, y_train)\nmse = mean_squared_error(y_test, clf.predict(X_test))\nrmse = np.sqrt(mse)\nprint(\"RMSE: %.4f\" % rmse)\n\n#\u7f51\u683c\u641c\u7d22\u90e8\u5206\n#from sklearn import ensemble\n#from sklearn import datasets\n#from sklearn.utils import shuffle\n#from sklearn.metrics import mean_squared_error\n#from sklearn.model_selection import GridSearchCV\n\n#offset = int(X.shape[0] * 0.9)\n#X_train, y_train = X[:offset], y[:offset]\n#X_test, y_test = X[offset:], y[offset:]\n\n# Fit regression model\n#param_grid = {\n#        'n_estimators': [1000],\n#        'max_depth': [4,6,8,10],\n#        'learning_rate': [0.01,0.1],\n#       'subsample': [1]\n#    }\n\n#gbr = ensemble.GradientBoostingRegressor(random_state=0)\n#clf = GridSearchCV(estimator=gbr, param_grid=param_grid, n_jobs=1, cv=10)\n#clf.fit(X_train, y_train)\n#mse = mean_squared_error(y_test, clf.predict(X_test))\n#rmse = np.sqrt(mse)\n#print(\"RMSE: %.4f\" % rmse)\n\n#print('Gradient boosted tree regression...')\n#print('Best Params:')\n#print(clf.best_params_)\n#print('Best CV Score:')\n#print(-clf.best_score_)","963292d6":"# \u753b\u968f\u7740boosting\u7684\u6b21\u6570\uff0c\u6a21\u578b\u7684\u8bad\u7ec3\u8bef\u5dee\u548c\u6d4b\u8bd5\u8bef\u5dee\u7684\u53d8\u5316\u56fe\ntest_score = np.zeros((params['n_estimators'],), dtype=np.float64)\n\nfor i, y_pred in enumerate(clf.staged_predict(X_test)):\n    test_score[i] = clf.loss_(y_test, y_pred)\n\nplt.figure(figsize=(12, 6))\nplt.subplot(1, 2, 1)\nplt.title('Deviance')\nplt.plot(np.arange(params['n_estimators']) + 1, clf.train_score_, 'b-',\n         label='Training Set Deviance')\nplt.plot(np.arange(params['n_estimators']) + 1, test_score, 'r-',\n         label='Test Set Deviance')\nplt.legend(loc='upper right')\nplt.xlabel('Boosting Iterations')\nplt.ylabel('Deviance')","e3db38fb":"# \u770b\u770b\u7279\u5f81\u7684\u91cd\u8981\u6027\nfeature_importance = clf.feature_importances_\nfeature_importance = 100.0 * (feature_importance \/ feature_importance.max())\nsorted_idx = np.argsort(feature_importance)\npos = np.arange(sorted_idx.shape[0]) + .5\nplt.subplot(1, 2, 2)\nplt.barh(pos, feature_importance[sorted_idx], align='center')\nfeature_names = np.array(['longitude','latitude','housing_median_age','population','median_income','ocean_proximity','roomes_per_household','bedrooms_per_rooms','population_per_household'])\nplt.yticks(pos, feature_names[sorted_idx])\nplt.xlabel('Relative Importance')\nplt.title('Variable Importance')\nplt.show()","ec7de70d":"# \u63a5\u4e0b\u6765\u505a\u51fa\u9884\u6d4b\uff0c\u9996\u5148\u4e5f\u8981\u4e0e\u8bad\u7ec3\u4e00\u81f4\uff0c\u6574\u7406\u539f\u6570\u636e\n# \u628aocean_proximity\u8f6c\u6362\u4e3a\u865a\u62df\u53d8\u91cf\ntest.ocean_proximity.value_counts()\ntest.ocean_proximity.replace({'<1H OCEAN':1.0,'INLAND':2.0,'ISLAND':3.0,'NEAR BAY':4.0,'NEAR OCEAN':5.0},inplace = True)\n\n# total_bedrooms\u6709\u7f3a\u5931\u503c\uff0c\u7528\u5e73\u5747\u6570\u586b\u5145\ntest_inf=test.total_bedrooms.describe()\ntest.total_bedrooms = test.total_bedrooms.fillna(test_inf['mean'])\n\n# \u521b\u5efa\u65b0\u7279\u5f81\uff0c\u53bb\u9664\u67d0\u4e9b\u7279\u5f81\ntest[\"roomes_per_household\"]=test[\"total_rooms\"]\/test[\"households\"]\ntest[\"bedrooms_per_rooms\"]=test[\"total_bedrooms\"]\/test[\"total_rooms\"]\ntest[\"population_per_household\"]=test[\"population\"]\/test[\"households\"]\n\ntest.drop(['total_rooms'], axis = 1,inplace = True)\ntest.drop(['total_bedrooms'], axis = 1,inplace = True)\ntest.drop(['households'], axis = 1,inplace = True)\n\n# \u7279\u5f81\u7f29\u653e\nfrom sklearn.preprocessing import StandardScaler\nsc_test = StandardScaler()\ntest = sc_test.fit_transform(test)","8145f2f9":"# \u83b7\u5f97\u9884\u6d4b\u503c\ntest_pred = clf.predict(test)","b4512006":"# \u4fdd\u5b58\u7ed3\u679c\noutput = pd.read_csv('\/kaggle\/input\/bnu-esl-2020\/test.csv')\noutput.insert(1,'predicted',test_pred)\noutput.drop(['longitude'], axis = 1,inplace = True)\noutput.drop(['latitude'], axis = 1,inplace = True)\noutput.drop(['housing_median_age'], axis = 1,inplace = True)\noutput.drop(['total_rooms'], axis = 1,inplace = True)\noutput.drop(['total_bedrooms'], axis = 1,inplace = True)\noutput.drop(['population'], axis = 1,inplace = True)\noutput.drop(['households'], axis = 1,inplace = True)\noutput.drop(['median_income'], axis = 1,inplace = True)\noutput.drop(['ocean_proximity'], axis = 1,inplace = True)\noutput.to_csv(\"predict.csv\",index=False)","7ea048ea":"\u6d41\u7a0b\u4e0e\u6a21\u578b\u89e3\u91ca\uff1a\n1.\u5148\u8bfb\u53d6\u6570\u636e\uff0c\u89c2\u5bdf\u6570\u636e\u5f62\u5f0f\u3001\u7f3a\u5931\u503c\u60c5\u51b5\u7b49\u3002\u901a\u8fc7\u865a\u62df\u53d8\u91cf\u4e0e\u5e73\u5747\u6570\u586b\u5145\u7f3a\u5931\u503c\u5c06\u6240\u6709\u53d8\u91cf\u90fd\u8f6c\u5316\u4e3a\u6570\u503c\u53d8\u91cf\u3002\n2.\u89c2\u5bdf\u7279\u5f81\u4e4b\u95f4\u7684\u76f8\u5173\uff0c\u8fdb\u884c\u4e00\u4e9b\u7279\u5f81\u7684\u7ec4\u5408\u53ca\u5220\u53bb\u4e00\u4e9b\u76f8\u5173\u5f88\u9ad8\u7684\u7279\u5f81\u3002\n3.\u8fdb\u884c\u7279\u5f81\u7f29\u653e\uff0c\u628a\u7279\u5f81\u90fd\u8f6c\u5316\u4e3a\u6b63\u6001\u5206\u5e03\u3002\n4.\u5212\u5206\u8bad\u7ec3\u96c6\u4e0e\u9a8c\u8bc1\u96c6\u3002\n5.\u6a21\u578b\u91c7\u7528\u7684\u662fGradient Boosting Regression\u7b97\u6cd5\uff0c\u601d\u8def\u662f\u4f7f\u7528\u8bb8\u591a\u5f31\u5b66\u4e60\u5668\u7684\u7ec4\u5408\u6765\u7ec4\u5efa\u4e00\u4e2a\u5f3a\u5b66\u4e60\u5668\u3002\u8ba9\u5b66\u4e60\u5668\u53d8\u5f97\u66f4\u597d\u7684\u8fc7\u7a0b\u5c31\u662f\u5728\u8fed\u4ee3\u65f6\u9009\u62e9\u635f\u5931\u51fd\u6570\u68af\u5ea6\u4e0b\u964d\u7684\u65b9\u5411\u3002\n\u5177\u4f53\u7684\u6a21\u578b\u5b9e\u73b0\u4f9d\u8d56\u4e8e\u9009\u53d6\u7684\u8d85\u53c2\u6570\uff0c\u5982\u5f31\u5b66\u4e60\u5668\u7684\u4e2a\u6570\u3001\u5b66\u4e60\u7387\u3001\u6bcf\u4e00\u4e2a\u5b66\u4e60\u5668\u7684\u6700\u5927\u6df1\u5ea6\u7b49\uff0c\u8fd9\u4e9b\u53c2\u6570\u901a\u8fc7\u7f51\u683c\u641c\u7d22\uff0c\u9009\u62e9\u6548\u679c\u6700\u597d\u7684\u3002\u5728\u8c03\u8bd5\u6a21\u578b\u671f\u95f4\uff0c\u4e5f\u9700\u8981\u89c2\u5bdf\u8bad\u7ec3\u96c6\u4e0e\u9a8c\u8bc1\u96c6\u7684\u8bef\u5dee\u968f\u8fed\u4ee3\u6b21\u6570\u7684\u53d8\u5316\u3002\n6.\u6a21\u578b\u5b8c\u6210\u540e\uff0c\u89c2\u5bdf\u7279\u5f81\u7684\u91cd\u8981\u6027\uff0c\u4ee5\u53ca\u6700\u7ec8\u5b8c\u6210\u5bf9\u6d4b\u8bd5\u96c6\u7684\u9884\u6d4b\u3002\n\n\u603b\u7ed3\u548c\u53cd\u601d\uff1a\n1.\u201c\u5343\u91cc\u4e4b\u884c\uff0c\u59cb\u4e8e\u8db3\u4e0b\u201d\u3002\u8bfe\u4e0a\u88ab\u4e00\u5806\u5927\u725b\u7684\u7b97\u6cd5\u641e\u5f97\u5fc3\u70e6\u610f\u4e71\uff0c\u6bcf\u6b21\u542c\u8bfe\u90fd\u5f97\u611f\u53f9\u81ea\u5df1\u667a\u5546\u4e0d\u591f\u3002\u800c\u5927\u4f5c\u4e1a\u6b63\u662f\u4e00\u4e2a\u5b9e\u8df5\u7684\u8fc7\u7a0b\uff0c\u80fd\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u5730\u7406\u89e3\u6a21\u578b\u3001\u5e94\u7528\u6a21\u578b\u3002\n\n2.\u8981\u4ee5\u95ee\u9898\u4e3a\u4e2d\u5fc3\uff0c\u800c\u4e0d\u662f\u65b9\u6cd5\u4e3a\u4e2d\u5fc3\uff08\u81f3\u5c11\u5bf9\u4e8e\u641e\u4e0d\u61c2\u7eaf\u7406\u8bba\u7684\u6570\u636e\u79d1\u5b66\u6e23\u6e23\uff09\uff0c\u6709\u4e00\u4e2a\u6d3b\u751f\u751f\u7684\u4f8b\u5b50\u771f\u662f\u592a\u53cb\u597d\u4e86\u3002\u6b64\u5916\uff0c\u53ef\u4ee5\u770b\u5230\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u786e\u5b9e\u5927\u6709\u53ef\u4e3a\u3002\n\n3.\u201c\u6570\u636e\u51b3\u5b9a\u4e86\u673a\u5668\u5b66\u4e60\u7684\u4e0a\u9650\uff0c\u800c\u7b97\u6cd5\u53ea\u662f\u5c3d\u53ef\u80fd\u903c\u8fd1\u8fd9\u4e2a\u4e0a\u9650\u201d\uff0c\u4eb2\u8eab\u4f53\u9a8c\u8fc7\u624d\u77e5\u771f\u662f\u5982\u6b64\u3002\u521a\u5f00\u59cb\u6211\u628a\u91cd\u5fc3\u90fd\u653e\u5728\u8c03\u8bd5\u6a21\u578b\u4e0a\uff0c\u5374\u600e\u4e48\u8c03\u90fd\u6548\u679c\u5e73\u5e73\u3002\u6700\u540e\u7ed3\u5408\u4e86\u524d\u8f88\u7684\u8bb8\u591a\u7ecf\u9a8c\uff0c\u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\uff0c\u624d\u53d1\u73b0\u7279\u5f81\u5de5\u7a0b\u7684\u91cd\u8981\u6027\u3002\u5728\u7eb7\u7e41\u590d\u6742\u7684\u4e16\u754c\u4e2d\uff0c\u6709\u771f\u6b63\u7684\u89c4\u5f8b\uff0c\u4e5f\u6709\u968f\u673a\u7684\u6270\u52a8\uff0c\u4ece\u65e0\u5e8f\u4e2d\u53d1\u73b0\u6709\u5e8f\u771f\u7684\u662f\u95e8\u5b66\u95ee\u3002\u540c\u65f6\uff0c\u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\u4e5f\u662f\u5f88\u91cd\u8981\u7684\uff0c\u81f3\u5c11\u8c03\u53c2\u53ea\u9700\u8981\u5fae\u8c03\u4e86\u3002\n\n\u5f53\u7136\u8fd8\u8981\u53cd\u601d\u53cd\u601d\u81ea\u5df1\u7684\u4e0d\u8db3\u5566\uff0c\u6bd4\u5982\u62d6\u62d6\u62c9\u62c9\u5f88\u665a\u624d\u5f00\u59cb\u505a\u5927\u4f5c\u4e1a\uff0c\u4ee5\u81f3\u4e8e\u5f88\u591a\u6a21\u578b\u90fd\u6ca1\u6709\u5c1d\u8bd5\u3002\u751a\u81f3\u8fde\u8fd9\u4e2a\u6a21\u578b\u90fd\u8fdc\u8fdc\u7b97\u4e0d\u4e0a\u5b8c\u7f8e\u3002\u5f88\u591a\u7279\u5f81\u4e5f\u6ca1\u6709\u53bb\u7ec6\u7ec6\u5730\u770b\uff0c\u53ea\u662f\u4ee5\u76f8\u5173\u6027\u4f5c\u4e3a\u7c97\u6d45\u7684\u6307\u6807\u6765\u8fdb\u884c\u7279\u5f81\u7684\u5904\u7406\u548c\u9009\u62e9\u3002\n\u4ee5\u53ca\u6211\u771f\u7684\u5bf9\u7406\u8bba\u4e00\u77e5\u534a\u89e3\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5fc5\u5b9a\u4e5f\u8fd8\u5b58\u5728\u6211\u76ee\u524d\u60f3\u4e0d\u5230\u7684\u4e0d\u59a5\u4e0e\u9519\u8bef\u4e4b\u5904\u3002\u53ea\u80fd\u52b3\u70e6\u8001\u5e08\u6279\u9605\u6211\u8fd9\u4e2a\u201c\u56db\u9762\u6f0f\u98ce\u201d\u7684\u6a21\u578b\u5566\uff0c\u5728\u8fd9\u91cc\u611f\u8c22\u8001\u5e08\u4e00\u4e2a\u5b66\u671f\u7684\u6559\u5b66\u4e0e\u4ed8\u51fa~"}}