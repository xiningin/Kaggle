{"cell_type":{"5da13dd0":"code","f8fbb7e8":"code","ab1b6db5":"code","d6a83367":"code","132d34dc":"code","ce4b16c0":"code","782fbeb1":"code","8a9e0266":"code","6b7bfd42":"code","9b9a1e76":"code","50c542e9":"code","b753c4bc":"code","2437cd1a":"code","3faed452":"code","690df6a4":"code","3c142601":"code","70b10e98":"code","183969c7":"code","95d2b602":"code","9c92fdb6":"code","0636d1ca":"code","a65db22e":"code","84e25603":"code","c06d22f0":"code","92829d44":"code","7206ed43":"code","9a1930ea":"code","b9290df9":"code","28403496":"code","cdd907e5":"code","deb1165b":"code","33c35250":"code","7da9c679":"code","506e4ac5":"code","7c9a3501":"code","07e63d2a":"code","8ca14342":"code","14e83f60":"code","e8eab074":"code","0b23ab69":"code","f5f653b5":"code","906aa6c3":"code","a4e4b354":"code","e5eaa907":"code","bb8f133b":"code","e5931599":"code","b610e7ca":"code","4e7f7e37":"code","75f9e9f7":"code","7566ed8f":"code","afeda568":"code","2fc9f774":"code","7de7c4da":"code","88046343":"code","ad354508":"code","ee34630f":"code","72198809":"code","b46bfa42":"code","3bcd6de5":"code","11f51563":"code","b156084f":"code","939c0353":"code","166acd47":"code","dd6b6513":"code","e33a9288":"code","98718209":"code","15d5c091":"code","bedc1733":"code","aa715caa":"code","41f6afd7":"code","00ebcc0d":"code","5688d592":"code","21972810":"code","3f13131c":"code","13760131":"code","67186ced":"code","e75b9c9c":"code","b633f5ed":"code","bdb71c70":"code","7f3d1e31":"code","a5794ab9":"code","27bb4b9b":"code","336b0c7f":"code","bc4275bf":"code","9161d280":"code","829ebee3":"code","27108436":"code","4c02a11e":"code","59e58998":"code","c550fef4":"code","e855fb55":"code","525e7949":"code","14f00a98":"code","b7f940bb":"code","21e12fc7":"code","6ce7c42c":"code","4f1ae1ca":"code","05a98148":"code","cad7ddf0":"code","b2d9a8b9":"code","d4c9a91a":"code","c282c567":"code","3ce33378":"code","00c6b10b":"code","219ea495":"code","8c51578e":"code","d487d68d":"code","d4019f72":"code","f9e006bf":"code","9e734367":"code","d8be7223":"code","a01ed2c1":"code","db4137e1":"code","5597db48":"code","636768a4":"markdown","1ec229f8":"markdown","116df877":"markdown","97b44714":"markdown","ad3fe89f":"markdown","9aca1dce":"markdown","94be168d":"markdown","5fcef774":"markdown","ca60bd30":"markdown","13e58b2e":"markdown","e838b380":"markdown","57d59db5":"markdown","0df0d65d":"markdown","e5c89013":"markdown","5dc28ca9":"markdown","138f9d2c":"markdown","b1a59db9":"markdown","c3196637":"markdown","4c863fb4":"markdown","db81152d":"markdown","ce7d84cc":"markdown","e2fd6b43":"markdown","ac20107a":"markdown","9887e3f1":"markdown","1e9cc178":"markdown","3d471653":"markdown","e599f6a3":"markdown","fa677494":"markdown","b5ffed14":"markdown","c63d436e":"markdown","41d50882":"markdown","947b13b5":"markdown","f8791398":"markdown","359ee1f7":"markdown","e3de4727":"markdown","298a9173":"markdown","201c9538":"markdown","0c19f5d9":"markdown","e2a12713":"markdown","23c19555":"markdown","0be031d6":"markdown","cceac8a0":"markdown","bf83a33f":"markdown","837e4bbd":"markdown","bd81e892":"markdown","07f32e5d":"markdown","6b2660c0":"markdown","43a780fb":"markdown","5697e012":"markdown","d9132a08":"markdown","4d097092":"markdown","ea3e0ee3":"markdown","42dfc0a4":"markdown","2facc03c":"markdown","db0f0623":"markdown","74070d90":"markdown","d1ad4ec6":"markdown","b4785afc":"markdown","bd1d2496":"markdown","c3a0caef":"markdown","0b0bb14d":"markdown","0d99a305":"markdown","74011f3c":"markdown","a29f0d27":"markdown","82835887":"markdown","9fc44473":"markdown","c3ec83c4":"markdown","1156b356":"markdown","fdc87ee6":"markdown","99bfd378":"markdown","bdb870f8":"markdown","63c89993":"markdown","655358d7":"markdown","647f07bb":"markdown"},"source":{"5da13dd0":"pip install dnspython","f8fbb7e8":"import pandas as pd\nimport json\nimport pymongo\nfrom pymongo import MongoClient\n\nimport pprint\nimport urllib.parse","ab1b6db5":"import matplotlib.pyplot as plt\nimport numpy as np","d6a83367":"client = MongoClient(\"mongodb+srv:\/\/geuser:melq.5491@bdegi.3pkrh.gcp.mongodb.net\/gre_EMD?retryWrites=true&w=majority\")\ndb = client.test\n","132d34dc":"db = client['gre_EMD'] ","ce4b16c0":"collection = db['gre10_depl']","782fbeb1":"db.list_collection_names()","8a9e0266":"\ndb = client['gre_EMD']\ncollection = db['gre10_depl']\n\n\n","6b7bfd42":"view = collection.find_one()","9b9a1e76":"view","50c542e9":"collection.count_documents({})","b753c4bc":"db.list_collection_names()","2437cd1a":"collection1 = db['gre10_depl']\nd=collection1.find()\ndeplacement = pd.DataFrame(d)\ndeplacement.head()","3faed452":"collection2 = db['gre10_mng']\nm=collection2.find()\nmenage = pd.DataFrame(m)\nmenage.head()","690df6a4":"collection3 = db['gre10_traj']\nt=collection3.find()\ntraject = pd.DataFrame(t)\ntraject.head()","3c142601":"collection4 = db['gre10_pers']\np=collection.find()\npersons = pd.DataFrame(p)\npersons.head()","70b10e98":"deplacement.shape","183969c7":"deplacement.head()","95d2b602":"deplacement.columns","9c92fdb6":"deplacement.info()","0636d1ca":"col = ['NO_DEPL' ,'nbmodemec','NO_PERS','motifor','duree']\ndata_dep=deplacement[col]\ndata_dep.head()","a65db22e":"data_dep['duree'] = pd.to_numeric(data_dep['duree'])\ndata_dep['nbmodemec'] = pd.to_numeric(data_dep['nbmodemec'])\ndata_dep['motifor'] = pd.to_numeric(data_dep['motifor'])\ndata_dep['NO_DEPL'] = pd.to_numeric(data_dep['NO_DEPL'])\ndata_dep['NO_PERS'] = pd.to_numeric(data_dep['NO_PERS'])\n\n","84e25603":"print (\"The maximum displacement duration is \" , data_dep[\"duree\"].astype(int).max()) \nprint (\"The minimum displacement duration is \" , data_dep[\"duree\"].astype(int).min()) \nprint (\"The average of the displacement duration is \" , data_dep[\"duree\"].astype(int).mean()) \nprint (\"The standard deviation of the displacement duration is \",  np.std(data_dep[\"duree\"].astype(int)) )\nprint (\"The variation of the displacement duration is \",  np.var(data_dep[\"duree\"].astype(int)) )\n","c06d22f0":"data_dep[\"duree\"].hist(histtype='stepfilled', bins=20)","92829d44":"print (\"The maximum number of trips in a displacement is \" , data_dep[\"NO_DEPL\"].astype(int).max()) \nprint (\"The minimum number of trips in a displacement is \" , data_dep[\"NO_DEPL\"].astype(int).min()) \nprint (\"The average number of trips is \" , data_dep[\"NO_DEPL\"].astype(int).mean()) ","7206ed43":"DEPL = data_dep.groupby(\"NO_DEPL\").size().to_frame('size')\nDEPL.sort_values(by=\"size\", ascending=False, inplace =True)\nDEPL","9a1930ea":"import seaborn as sns\nsns.barplot(x=DEPL.index, y=DEPL['size'])\nplt.title(\"Frequency of displacement using n trips\")\nplt.ylabel(\"frequency\")\nplt.xlabel(\"Number of trips\")","b9290df9":"print (\"The maximum number of persons in a displacement is \" , data_dep[\"NO_PERS\"].astype(int).max()) \nprint (\"The minimum number of persons in a displacement is \" , data_dep[\"NO_PERS\"].astype(int).min()) \nprint (\"The average number of persons is \" , data_dep[\"NO_PERS\"].astype(int).mean()) \nprint (\"The median number of persons is \" , data_dep[\"NO_PERS\"].astype(int).median()) ","28403496":"PERS=data_dep.groupby(\"NO_PERS\").size().to_frame(\"count\")\nPERS","cdd907e5":"sns.barplot(x=PERS.index, y=PERS[\"count\"])\nplt.title(\"The number of displacement taken by n persons\")","deb1165b":"pers=len(data_dep)\npers1= len(data_dep[data_dep[\"NO_PERS\"]==1])\npers2=len(data_dep[data_dep[\"NO_PERS\"]==2])\nprint (\"the rate of displacement acheived individually is \", 100*pers1\/pers, \"%.\")\nprint (\"the rate of displacement acheived by pairs is \", 100*pers2\/pers, \"%.\")\nprint (\"the rate of displacement acheived by more than two persons is \", 100*(pers-pers1-pers2)\/pers, \"%.\")\n","33c35250":"print (\"The maximum number of mechanized mode of transport used in a displacement is \" , data_dep[\"nbmodemec\"].astype(int).max()) \nprint (\"The minimum number of mechanized mode of transport used in a displacement is \" , data_dep[\"nbmodemec\"].astype(int).min()) \nprint (\"The average number of mechanized mode of transport used in a displacement is \" , data_dep[\"nbmodemec\"].astype(int).mean()) \nprint (\"The median number of mechanized mode of transport used in a displacement is \" , data_dep[\"nbmodemec\"].astype(int).median()) \n","7da9c679":"nbmodemec = data_dep.groupby(\"nbmodemec\").size().to_frame('size')\nnbmodemec.sort_values(by=\"size\", ascending=False, inplace =True)\nnbmodemec","506e4ac5":"sns.barplot(x=nbmodemec.index, y=nbmodemec['size'])\nplt.title(\"Frequency of displacement using n mechanized mode of transport\")\nplt.ylabel(\"frequency\")\nplt.xlabel(\"Number of mechanized mode of transport\")","7c9a3501":"data_dep[\"nbmodemec\"].value_counts().plot(kind=\"pie\")","07e63d2a":"nb0 =data_dep[data_dep[\"nbmodemec\"]==0]\nnb1 =data_dep[data_dep[\"nbmodemec\"]==1]\nnb2 =data_dep[data_dep[\"nbmodemec\"]==2]\nnb3 =data_dep[data_dep[\"nbmodemec\"]==3]\nnb4 =data_dep[data_dep[\"nbmodemec\"]==4]\n\nprint ('The rate of displacement using 0 mechaniezd mode of transport = ', len(nb0)\/float(len(data_dep))*100, '% .' )\nprint ('The rate of displacement using 1 mechaniezd mode of transport = ', len(nb1)\/float(len(data_dep))*100, '% .' )\nprint ('The rate of displacement using 2 mechaniezd mode of transport = ', len(nb2)\/float(len(data_dep))*100, '% .' )\nprint ('The rate of displacement using 3 mechaniezd mode of transport = ', len(nb3)\/float(len(data_dep))*100, '% .' )\nprint ('The rate of displacement using 4 mechaniezd mode of transport = ', len(nb4)\/float(len(data_dep))*100, '% .' )","8ca14342":"import seaborn as sb\nsb.pairplot(data_dep)","14e83f60":"data_dep.corr(method='spearman')\n","e8eab074":"data_dep.corr(method='spearman').style.format(\"{:.2}\").background_gradient(cmap=plt.get_cmap('coolwarm'))","0b23ab69":"group_motif=data_dep[[\"motifor\", \"duree\"]].groupby(\"motifor\").mean()\n","f5f653b5":"group_motif.sort_values(by='duree', ascending = False,  inplace=True)\ngroup_motif\n","906aa6c3":"size_motif = data_dep.groupby(\"motifor\").size().to_frame('size')\nsize_motif.sort_values(by=\"size\", ascending=False, inplace =True)\nsize_motif\n","a4e4b354":"\ngroup_nodpl=data_dep[[\"nbmodemec\", \"duree\"]].groupby(\"nbmodemec\").mean()\ngroup_nodpl.sort_values(by='duree', ascending = False,  inplace=True)\ngroup_nodpl","e5eaa907":"data_dep[\"duree\"].median()","bb8f133b":"\ndata_dep['long_duree'] = 'medium'\ndata_dep.loc[data_dep['duree'] <=15, 'long_duree'] = 'short'\ndata_dep.loc[data_dep['duree'] > 40, 'long_duree'] = 'long'\n","e5931599":"print(data_dep[\"long_duree\"].value_counts())\n\ndata_dep[\"long_duree\"].value_counts().plot(kind=\"pie\")","b610e7ca":"data_dep['type_dep'] = 'individual'\ndata_dep.loc[data_dep['NO_PERS']==2, 'type_dep'] = 'pair'\ndata_dep.loc[data_dep['NO_PERS'] > 2, 'type_dep'] = 'group'\nprint(data_dep[\"type_dep\"].value_counts())\ndata_dep[\"type_dep\"].value_counts().plot(kind=\"pie\")","4e7f7e37":"table=pd.crosstab(data_dep[\"type_dep\"], data_dep[\"long_duree\"], margins=True, normalize=True)\ntable","75f9e9f7":"menage.head()","7566ed8f":"menage.columns","afeda568":"menage.describe()","2fc9f774":"data_mena = menage[[\"TYPE_HAB\",\"GENRE1\",\"ENERGIE1\",\"GENRE2\",\"ENERGIE2\",\"jourdepl\",\"NB_velo\" ]]\ndata_mena.shape","7de7c4da":"data_mena = data_mena[data_mena[\"GENRE1\"]!=\"NA\"]\ndata_mena = data_mena[data_mena[\"GENRE2\"]!=\"NA\"]\ndata_mena = data_mena[data_mena[\"ENERGIE1\"]!=\"NA\"]\ndata_mena = data_mena[data_mena[\"ENERGIE2\"]!=\"NA\"]\ndata_mena.shape","88046343":"data_mena['GENRE1'] = pd.to_numeric(data_mena['GENRE1'])\ndata_mena['ENERGIE1'] = pd.to_numeric(data_mena['ENERGIE1'])\ndata_mena['GENRE2'] = pd.to_numeric(data_mena['GENRE2'])\ndata_mena['ENERGIE2'] = pd.to_numeric(data_mena['ENERGIE2'])\ndata_mena['NB_velo'] = pd.to_numeric(data_mena['NB_velo'])\ndata_mena['jourdepl'] = pd.to_numeric(data_mena['jourdepl'])\n","ad354508":"data_mena.NB_velo=pd.to_numeric(data_mena.NB_velo)\nprint(\"the minimum number of bikes in the household set is\", data_mena[\"NB_velo\"].min())\nprint(\"the maximum number of bikes in the household set is\", data_mena[\"NB_velo\"].max())\nprint(\"the average number of bikes in the household set is\", data_mena[\"NB_velo\"].mean())\nprint(\"the median number of bikes in the household set is\", data_mena[\"NB_velo\"].median())","ee34630f":"data_mena[\"NB_velo\"].value_counts().plot(kind='pie')","72198809":"nb_velo = data_mena.groupby(\"NB_velo\").size().to_frame(\"count\")\nsns.barplot(x=nb_velo.index, y=nb_velo[\"count\"])","b46bfa42":"data_mena.GENRE1.value_counts()","3bcd6de5":"data_mena.GENRE1.value_counts().plot(kind=\"pie\")","11f51563":"G=len(data_mena)\nG1=len(data_mena[data_mena.GENRE1==1])\nG2=len(data_mena[data_mena.GENRE1==2])\nG3=len(data_mena[data_mena.GENRE1==3])\nprint(\"the rate of first cars with kind 1: \", 100*G1\/G, \"%\")\nprint(\"the rate of first cars with kind 2: \", 100*G2\/G, \"%\")\nprint(\"the rate of first cars with kind 3: \", 100*G3\/G, \"%\")","b156084f":"car1=data_mena[data_mena[\"GENRE1\"]==1]\ncar1.ENERGIE1.value_counts()","939c0353":"c1=car1.groupby(\"ENERGIE1\").size().to_frame(\"count\")\nc1.sort_values(by=\"count\", ascending=False, inplace=True)\nsns.barplot(x=c1.index, y=c1[\"count\"])\nplt.title(\"number of cars type 1 using ENERGIE type i\")","166acd47":"c=len(car1)\nc1=len(car1[car1.ENERGIE1==1])\nc2=len(car1[car1.ENERGIE1==2])\nc3=len(car1[car1.ENERGIE1==3])\n\nprint(\"the rate of first cars with kind 1 that use fuel 1: \", 100*c1\/c, \"%\")\nprint(\"the rate of first cars with kind 1 that use fuel 2 : \", 100*c2\/c, \"%\")\nprint(\"the rate of first cars with kind 1 that use fuel 3 : \", 100*c3\/c, \"%\")\n\n","dd6b6513":"c2=car1.groupby(\"GENRE2\").size().to_frame(\"count\")\nc2.sort_values(by=\"count\", ascending=False, inplace=True)\nsns.barplot(x=c2.index, y=c2[\"count\"])\nplt.title(\"number of second cars kind i knowing that first car was kind 1\")","e33a9288":"c=len(car1)\na=len(car1[car1.GENRE2==1])\n\nprint(\"Konowing that the first car was kind 1 , the rate of second car kind 1 : \" , 100*a\/c, \"%\")\n","98718209":"import timeit\nstart_time = timeit.default_timer()\n# Creates a client for the primary sandbox from cluster host cluster0-nlbcx.mongodb.net\nclient = MongoClient(\"mongodb:\/\/adminUser:xpass@cluster0-shard-00-00-nlbcx.mongodb.net:27017\/?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin\")\n\ndb = client.test \ndb = client['stackoverflow-dump-view']\ncollection = db['viewModel-view']\n\nview = collection.find_one() # json file, can be browsed as a dictionary\n\n#print (view['releaseViewList'][0].keys())\nviewRel0=view['releaseViewList'][0]\nviewRel1=view['releaseViewList'][1]\nviewRel2=view['releaseViewList'][2]","15d5c091":"viewRel0","bedc1733":"viewRel1","aa715caa":"viewRel2","41f6afd7":"minValue0=viewRel0['attributeDescList'][0]['minValue'];print(minValue0)\nmaxValue0=viewRel0['attributeDescList'][0]['maxValue'];print(maxValue0)\nmean0=viewRel0['attributeDescList'][0]['mean'];print(mean0)\nmedian0=viewRel0['attributeDescList'][0]['median'];print(median0)\nnullValue0=viewRel0['attributeDescList'][0]['nullValue'];print(nullValue0)\nname0=viewRel0['attributeDescList'][0]['name'];print(name0)\ncount0=viewRel0['attributeDescList'][0]['count'];print(count0)","00ebcc0d":"nullsRel0=[]\nfor i in viewRel0['attributeDescList']:\n    nullsRel0.append(sum(i['nullValue']))\n\nnullsRel1=[]\nfor i in viewRel1['attributeDescList']:\n    nullsRel1.append(sum(i['nullValue']))\n\nnullsRel2=[]\nfor i in viewRel2['attributeDescList']:\n    nullsRel2.append(sum(i['nullValue']))\n\nprint(nullsRel0)\nprint(nullsRel1)","5688d592":"import matplotlib.pyplot as plt \n\n# line 1 points \nx = ['Votes','Posts','Comments','Badges','Users']\ny1 = nullsRel0\n# plotting the line 1 points \nplt.plot(x, y1, label = \"Jan01-18\")\n\n# line 2 points \ny2 = nullsRel1\n# plotting the line 1 points \nplt.plot(x, y2, label = \"Jan02-18\")\n\n# line 3 points \ny3 = nullsRel2\n# plotting the line 1 points \nplt.plot(x, y3, label = \"Jan03-18\")\n\n# naming the x axis \nplt.xlabel('dataset') \n# naming the y axis \nplt.ylabel('null values') \n# giving a title to my graph \nplt.title('Number of null values per release') \n\n# show a legend on the plot \nplt.legend() \n\n# function to show the plot \nplt.show() ","21972810":"countRel0=[]\nfor i in viewRel0['attributeDescList']:\n    countRel0.append(i['count'])\n\ncountRel1=[]\nfor i in viewRel1['attributeDescList']:\n    countRel1.append(i['count'])\n\ncountRel2=[]\nfor i in viewRel2['attributeDescList']:\n    countRel2.append(i['count'])","3f13131c":"import matplotlib.pyplot as plt \n\n# line 1 points \nx = ['Votes','Posts','Comments','Badges','Users']\ny1 = countRel0\n# plotting the line 1 points \nplt.plot(x, y1, label = \"Jan01-18\")\n\n# line 2 points \ny2 = countRel1\n# plotting the line 1 points \nplt.plot(x, y2, label = \"Jan02-18\")\n\n# line 3 points \ny3 = countRel2\n# plotting the line 1 points \nplt.plot(x, y3, label = \"Jan03-18\")\n\n# naming the x axis \nplt.xlabel('dataset') \n# naming the y axis \nplt.ylabel('count') \n# giving a title to my graph \nplt.title('Count of items per release') \n\n# show a legend on the plot \nplt.legend() \n\n# function to show the plot \nplt.show() ","13760131":"elapsed = timeit.default_timer() - start_time","67186ced":"print (\"execution time: \" + str(elapsed) + \" s\")","e75b9c9c":"import ipywidgets as widgets\nimport threading\nimport time\n#------------------------------------------------------------------ Q1 --------------------------------------------------------------------#\nbtn1=widgets.ToggleButton(value=False,description='Activate',disabled=False,button_style='info',tooltip='',icon='',visibility = 'visible')\n#timeLbl1=widgets.Text(value='0',description='',disabled=True)\nq1 = widgets.RadioButtons(options=['January 1rst 2018', 'January 2nd 2018', 'January 3rd 2018'],value=None,description='Release:',disabled=True)\n#------------------------------------------------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------ Q2 --------------------------------------------------------------------#\nbtn2=widgets.ToggleButton(value=False,description='Activate',disabled=False,button_style='info',tooltip='',icon='',visibility = 'visible')\n#timeLbl2=widgets.Text(value='0',description='',disabled=True)\nq2 = widgets.RadioButtons(options=['January 1rst 2018', 'January 2nd 2018', 'January 3rd 2018'],value=None,description='Release:',disabled=True)\n#------------------------------------------------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------ Q3 --------------------------------------------------------------------#\nbtn3=widgets.ToggleButton(value=False,description='Activate',disabled=False,button_style='info',tooltip='',icon='',visibility = 'visible')\n#timeLbl3=widgets.Text(value='0',description='',disabled=True)\nq3 = widgets.RadioButtons(options=['January 1rst 2018', 'January 2nd 2018', 'January 3rd 2018'],value=None,description='Release:',disabled=True)\n#------------------------------------------------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------ Q4 --------------------------------------------------------------------#\nbtn4=widgets.ToggleButton(value=False,description='Activate',disabled=False,button_style='info',tooltip='',icon='',visibility = 'visible')\n#timeLbl4=widgets.Text(value='0',description='',disabled=True)\nq4 = widgets.Dropdown(options=['Id','PostTypeId','AcceptedAnswerId','ParentId','CreationDate','DeletionDate','Score','ViewCount','Body','OwnerUserId','OwnerDisplayName','LastEditorUserId','LastEditorDisplayName','LastEditDate','LastActivityDate','Title','Tags','AnswerCount','CommentCount','FavoriteCount','ClosedDate','CommunityOwnedDate'],\n    value=None,description='Attribute:',disabled=True,)\n#------------------------------------------------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------ Q5 --------------------------------------------------------------------#\nbtn5=widgets.ToggleButton(value=False,description='Activate',disabled=False,button_style='info',tooltip='',icon='',visibility = 'visible')\n#timeLbl5=widgets.Text(value='0',description='',disabled=True)\ndrop_options = [['--','Id','UserId','Name','Date','Class','TagBased'],\n                ['--','Id','PostId','Score','Text','CreationDate','UserDisplayName','UserId'],\n               ['--','Id','PostTypeId','AcceptedAnswerId','ParentId','CreationDate','DeletionDate','Score','ViewCount','Body','OwnerUserId','OwnerDisplayName','LastEditorUserId','LastEditorDisplayName','LastEditDate','LastActivityDate','Title','Tags','AnswerCount','CommentCount','FavoriteCount','ClosedDate','CommunityOwnedDate'],\n               ['--','Id','Reputation','CreationDate','DisplayName','LastAccessDate','WebsiteUrl','Location','AboutMe','Views','UpVotes','DownVotes','ProfileImageUrl','EmailHash','AccountId'],\n               ['--','Id','PostId','VoteTypeId','UserId','CreationDate','BountyAmount']]\nchildren = [widgets.Dropdown(options=name,description='',value=None) for name in drop_options]\ntab = widgets.Tab()\ntab.children = children\nitems=['Badges', 'Comments', 'Posts', 'Users', 'Votes']\nfor i in range(len(items)):\n    tab.set_title(i, items[i])\nq5=tab\n#------------------------------------------------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------ Q6 --------------------------------------------------------------------#\nbtn6=widgets.ToggleButton(value=False,description='Activate',disabled=False,button_style='info',tooltip='',icon='',visibility = 'visible')\n#timeLbl6=widgets.Text(value='0',description='',disabled=True)\nq6= widgets.RadioButtons(options=['Yes', 'No'],value=None,description='',disabled=False)\n#------------------------------------------------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------ Q7 --------------------------------------------------------------------#\nbtn7=widgets.ToggleButton(value=False,description='Activate',disabled=False,button_style='info',tooltip='',icon='',visibility = 'visible')\n#timeLbl7=widgets.Text(value='0',description='',disabled=True)\nchildren2 = [widgets.Dropdown(options=name,value=None) for name in drop_options]\ntab2 = widgets.Tab()\ntab2.children = children2\nfor i in range(len(items)):\n    tab2.set_title(i, items[i])\nq7=tab2\n#------------------------------------------------------------------------------------------------------------------------------------------#\n\n#------------------------------------------------------- Effort questions -----------------------------------------------------------------#\neffortW = []\nfor e in range(7):\n    effortW.append(widgets.ToggleButtons(options=['Low', 'Regular', 'High'],description='Select Effort:',disabled=False,value=None))  \n\ntimeLblW = []\nfor t in range(7):\n    timeLblW.append(widgets.Text(value='0',description='',disabled=True))  \n    \n# Timer function    \n# btn - receive a button object\n# lbl - receive a label object\n#    we use lbl.value to get timer value\n# q - receive a multiple option object\n#    we use q.value to get answered value\ndef timer(btn,lbl,q):        \n\n    cnt =int(lbl.value)   \n    on=btn.value \n    desc=q.description\n\n    if desc!='Submitted':\n        if on==True:      \n            threading.Timer(1, timer, [btn,lbl,q]).start()\n            cnt = cnt+1                        \n            lbl.value = str(cnt)\n            btn.description='Submit answer'\n            q.disabled=False\n\n        elif on==False:\n            threading.Timer(1, timer, [btn,lbl,q]).start()\n            btn.description='Activate'\n            q.disabled=True\n\n        else:\n            None\n\n    if cnt!=0 and btn.description=='Activate':\n        threading.Timer(1, timer, [btn,lbl,q]).start()\n        q.description='Submitted'\n        btn.visibility='hidden'\n        btn.description='--'\n        btn.disbled=True  \n\ndef timerTab(btn,lbl,q):        \n\n    cnt=int(lbl.value)   \n    on=btn.value \n    desc=q.children[0].description\n\n    if desc!='Submitted':\n        if on==True:      \n            threading.Timer(1, timerTab, [btn,lbl,q]).start()\n            cnt = cnt+1                        \n            lbl.value = str(cnt)\n            btn.description='Submit answer'\n            for i in range(len(q.children)):\n                q.children[i].disabled=False\n\n        elif on==False:\n            threading.Timer(1, timerTab, [btn,lbl,q]).start()\n            btn.description='Activate'\n            for i in range(len(q.children)):\n                q.children[i].disabled=True\n\n        else:\n            None\n\n    if cnt!=0 and btn.description=='Activate':\n        threading.Timer(1, timerTab, [btn,lbl,q]).start()\n        for i in range(len(q.children)):\n            q.children[i].description='Submitted'\n        btn.visibility='hidden'\n        btn.description='--'\n        btn.disbled=True                        ","b633f5ed":"timeLblW[0]","bdb71c70":"btn1","7f3d1e31":"q1","a5794ab9":"timer(btn1,timeLblW[0],q1)","27bb4b9b":"effortW[0]","336b0c7f":"timeLblW[1]","bc4275bf":"btn2","9161d280":"q2","829ebee3":"timer(btn2,timeLblW[1],q2)","27108436":"effortW[1]","4c02a11e":"timeLblW[2]","59e58998":"btn3","c550fef4":"q3","e855fb55":"timer(btn3,timeLblW[2],q3)","525e7949":"effortW[2]","14f00a98":"timeLblW[3]","b7f940bb":"btn4","21e12fc7":"q4","6ce7c42c":"timer(btn4,timeLblW[3],q4)","4f1ae1ca":"effortW[3]","05a98148":"timeLblW[4]","cad7ddf0":"btn5","b2d9a8b9":"q5","d4c9a91a":"timerTab(btn5,timeLblW[4],q5)","c282c567":"effortW[4]","3ce33378":"timeLblW[5]","00c6b10b":"btn6","219ea495":"q6","8c51578e":"timer(btn6,timeLblW[5],q6)","d487d68d":"effortW[5]","d4019f72":"timeLblW[6]","f9e006bf":"btn7","9e734367":"timerTab(btn7,timeLblW[6],q7)","d8be7223":"q7","a01ed2c1":"effortW[6]","db4137e1":"# collect user effort \nuserEffortL = []\nfor e in effortW:\n    userEffortL.append(e.value) \n        \n# collect time from answers\nqtimeL=[]\nfor t in timeLblW:\n    qtimeL.append(int(t.value))\n\n# tuple for answers\nqans1=q1.options[2]\nqans2=q2.options[0]\nqans3=q3.options[1]\nqans4=q4.options[3]\nqans5=[q5.children[0].options[3],q5.children[1].options[0],q5.children[2].options[5],q5.children[3].options[5],q5.children[4].options[0]]\nqans6=q6.options[0]\nqans7=[q7.children[0].options[3],q7.children[1].options[0],q7.children[2].options[5],q7.children[3].options[5],q7.children[4].options[0]]\nqans = [qans1,qans2,qans3,qans4,qans5,qans6,qans7]\n\nscoreL = [0.0]*7\n\nif q1.value == qans1: scoreL[0]=1 \nif q2.value == qans2: scoreL[1]=1 \nif q3.value == qans3: scoreL[2]=1 \nif q4.value == qans4: scoreL[3]=1 \n\nif qans5[0] == q5.children[0].value: scoreL[4]=scoreL[4] + 0.2\nif qans5[1] == q5.children[1].value: scoreL[4]=scoreL[4] + 0.2\nif qans5[2] == q5.children[2].value: scoreL[4]=scoreL[4] + 0.2\nif qans5[3] == q5.children[3].value: scoreL[4]=scoreL[4] + 0.2\nif qans5[4] == q5.children[4].value: scoreL[4]=scoreL[4] + 0.2\n\nif q6.value ==qans6: scoreL[5]=1\n\nif qans7[0] == q7.children[0].value: scoreL[6]=scoreL[6] + 0.2\nif qans7[1] == q7.children[1].value: scoreL[6]=scoreL[6] + 0.2\nif qans7[2] == q7.children[2].value: scoreL[6]=scoreL[6] + 0.2\nif qans7[3] == q7.children[3].value: scoreL[6]=scoreL[6] + 0.2\nif qans7[4] == q7.children[4].value: scoreL[6]=scoreL[6] + 0.2\n        \n# calculated effort\ncalcEffortL = []\nmaxcEffort = 100\nfor i in range(0,len(scoreL)):\n    if scoreL[i] == 0: \n        calcEffortL.append(maxcEffort)\n    else:\n        if int(qtimeL[i]) > 300: qtimeL[i] = 300 # 5 min limit\n        tmp=int(qtimeL[i])\/scoreL[i]\n        calcEffortL.append((tmp*100)\/1800)            ","5597db48":"import csv\n# qid | time | score | user_effort | calculated_effort | execution_time (cpu)\nheader=['qid', 'score', 'time', 'user_effort', 'calculated_effort', 'execution_time'] \nqid=list(range(1,8))\nelapsedL = [elapsed]*7\n\nrows = zip(qid,scoreL,qtimeL,userEffortL,calcEffortL,elapsedL)\n\nwith open(\"..\/results\/match2.csv\", mode=\"w\") as f:\n    #writer = csv.writer(f, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n    writer = csv.writer(f, delimiter=',')\n    writer.writerow(header)\n    for row in rows:\n        writer.writerow(row)","636768a4":"We are interested in this part by the analysis of some variables that we judge relevant and meaningful. \n","1ec229f8":"# *Variable \"NO_DEPL\" *","116df877":"We do the same thing with the variable nbmodemec which characterises the number of mechanized mode of transport in each displacement. ","97b44714":"Looking at the graphics, we conclude that there are no linear relationships between these variables\n","ad3fe89f":"We change the type of variables to numeric in order to apply some statistic tools .","9aca1dce":"We are interested now by studying the relation between the variable duree and the variable NB_PERS . to do that, we construct two categorical variables.\nWe assume that short_displacement duration take less than 10 minutes, the long one take more than 40 minutes and the between them the medium_displacement duration .\n\nduree < 10 => short duration \n\n10 < duree < 40 => medium duration \n\nduree > 40 => long duration \n\nwe assume also, that a group of persons is composed by greater or equal to 3 persons.\n\nNO_PERS = 1  =>  individual displacement\n\nNO_PERS = 2 => pair displacement \n\nNO_PERS > 2 => group displacement \n","94be168d":"# *Variable \"NO_PERS\" *","5fcef774":"we notice that the duration increases with the increase in the number of mechanized mode of transport. \nThis result is expected since the displacements that use more means of transport are long trips and take more time. ","ca60bd30":"I am very pleased with your project and the effort you invested in preparing it.\n- The code I providded was an example one, so the very last part of the realeases did not have to be included in your project. Taking the time to delete that piece of code would have been useful for the quality of your report and the clarity of the experiment.\n\n-  I appreciated that at the very end of the experiment provide a wrap up explanation to describe the architecture. It could completed with more thorough about  conclusions. For example, to which extent the research question was answered, following which reasoning line and those aspects of the question that remain open and for which reasons.\n\n- I would just be more explicit in the following aspects in order to have a fully clear experiment\n1. Exhibit from the beginning the research question or hypothesis that guides the experiment\n2. Be more explicite commenting the purpose of the phases of the experiment, clarifying which tasks are preparing the data and those that are really analysing it. It is also important to give full interpretations of the results explaining what they represent and also to which extent they are conclusive and contribute to build an answer to the research question\n","13e58b2e":"We remark that the two variables motifor (purpose of displacement) and NO_DEPL (number of persons ) are positively correlated. On the other hand, we have a postive correlation between the variable duree (duration of the displacement) and nbmodemec ( the number of the mechanical means used in the displacement), it means that the duration of the displacement increases with the increase of the number of the mechanical means of transport.","e838b380":"# *Variable \"duree\" *","57d59db5":"# *Variable \"nbmodemec\" *","0df0d65d":"Above, we retrieved the variables names ","e5c89013":"We notice here, according to our assumption, that 66.5 % of displacements take short duration, 24,6 % take medium duration and only 8.7 % are long_duration displacement.  \nWe notice also, usually according to our assumption (groups are composed by more than two persons) that 46.8 % of displacement have been acheived individually ; 33.2 % have been acheived by pairs and 19.8 % have been acheived by groups. \nFor the displacement that have been acheived by groups, the majority (13.5 % \/ 19.88 % ) have short duration (less than 10 minutes ). \nFor the long_duration displacement, the half (0.043 \/ 0.087) have been made indivudally. ","5dc28ca9":"*  *Correlation between variables *","138f9d2c":"* Here, we regroup the duration by the purpose of the displacement.","b1a59db9":"### Q7.1 Effort to answer the question","c3196637":"The four variables GENRE1, GENRE2, ENERGIE1 and ENERGIE2 contain missing values. So we drop all lines that contains missing values. ","4c863fb4":"All variables have object type. ","db81152d":"### Q3.1 Effort to answer the question","ce7d84cc":"## Get Match Results","e2fd6b43":"## Q7. Choose the attributes that can be used as sharging keys to fragment the release using a hash based and an interval based strategy","ac20107a":"## Q5. Which is\/are the attribute(s) that can be used to identify the most trendy topic addressed in the release?","9887e3f1":"# Relations between variables ","1e9cc178":"First, we construct a new data frame that contains only 5 variables (NO_DEPL,nbmodmec, NO_PERS, motifor, duree )","3d471653":"### Second Release View","e599f6a3":"# Description of some variables \n\n\njourdepl: Day of the move\n\nTYPE_HAB: Type of residence of the household\n\nGENREi: Type of car for the i th car of the household\n\nENERGIEi: Fuel type of the i th car in the household\n\nNB_velo: Number of bikes in the household\n\n\n\n\n\n","fa677494":"The most frequent kind of the first cars is 1 . The Households in Grenoble are used to by kind 1 as their first car. ","b5ffed14":"We want to know now what type of fuel does the kind1-car use. ","c63d436e":"We focus our study on just some meaningful variables. So we construct a new data frame. ","41d50882":"# Tasks","947b13b5":"The deplacement data set contains 63336 displacement and 21 columns (variables). ","f8791398":"### Third Release View","359ee1f7":"### Q2.1 Effort to answer the question","e3de4727":"### Q5.1 Effort to answer the question","298a9173":"### Execution time","201c9538":"The majority of first cars kind 1 use either fuel kind 3 (67%) or fuel kind 1 (29 %) ","0c19f5d9":"### Number of Items per release","e2a12713":"We are interseted also by sorting the purposes (motifor) by their frequences.","23c19555":"We sort the purpose of displacement (motifor) by the duration (duree) in a descending order to see what are the puproses that take the high duration.","0be031d6":"# 2. menage data set","cceac8a0":"### First Release View","bf83a33f":"We can conclude that mostly people are used to move individually or by pairs. ","837e4bbd":"Echarrafi Khadija, Belhedi Mohamed Kamel, and Kaddouri Soufiane\n","bd81e892":"## Releases","07f32e5d":"# *Variable \"GENREl\" *","6b2660c0":"We look on this part for relations (dependance and correlation between variables) ","43a780fb":"### Q4.1 Effort to answer the question","5697e012":"* contingency table","d9132a08":"## Q1. Which is the release with best quality? (less missing, nulls and default values)","4d097092":"The displacements with small number of trips are more frequent than displacements with large number of trips. People generally move between few number of places.  ","ea3e0ee3":"There is a large range (max-min) in the duration variable since the dataset describes different types of displacement. The duration average of displacement is 18 minutes. This average is not very meaningful because the standard deviation and the variance is very high (std =23 min ; var=555).","42dfc0a4":"![image.png](attachment:image.png)","2facc03c":"We notice here that the purpose 1 whose the duration of trip equal to 18 minutes is the most frequent purpose. it may represent the work purpose. \nThe purpose 81 which has the longest trip is not very frquent (just 95 times in this data set)  ","db0f0623":"In general, people don't use more than one mechanized mode of transport. They use either one ( car, public transport, motobike, ...) or they don't use any mechanized mode (bike, on feet).","74070d90":"## Q6 Will missing, null, and default values bias observation of trends?","d1ad4ec6":"This histogram confirms the above mentioned remarks concerning the significant variation of the variable duration (duree). ","b4785afc":"# Some variables description \n\n\nNO_PERS: Number of the persons in the displacement\n\nNO_DEPL: Number of the trips in the displacement\n\nmotifor: Purpose at the origin\n\nheuredep: Start time (hour)\n\nmindep: Start minute\n\nheurearr : arrival time (hour)\n\nnbmodemec: Number of mechanized mode of transport used in the trip\n\nminarr : arrival minute\n\nzoneorig: Number of the area origin of the displacement\n\nzoneres: Number of the area of residence\n\n\n","bd1d2496":"#               Retreiving the 4 collections as dataframes","c3a0caef":"### Q1.1 Effort to answer the question","0b0bb14d":"The most frequent number of bikes in our data set is 2 bikes, followed by 0 bike. ","0d99a305":"The maximum number of persons in a same displacement is 8 persons and the minimum is 1. looking at the mean (1.84) and the median (2), we can say that in average people travel in pairs. ","74011f3c":"## Q4. Which attribute from _Posts_ item can be used to compute answers' popularity and author's reputation (started answered and authors)","a29f0d27":"We want to know now if the first car is kind 1 , what is the kind of the second car  ","82835887":"We can notice that a displacement can be acheived using at minium 1 trip and 22 trips at maximum. The average number of trips in our data set is 3.26 trips.","9fc44473":"### Q6.1 Effort to answer the question","c3ec83c4":"### Number of Null Values per release","1156b356":" We notice that the purposes take different durations on average. the purpose 81 take 2 hours and 40 minutes as the most long displacement in terms of time. The less_duration purpose is the 21 which takes on average 7.63 minutes. ","fdc87ee6":"## Q2. Which release has the most number of records?","99bfd378":"## Q3. Which is the release where _UpVote_ attribute from _Users_ item is more spread?","bdb870f8":"# Exploring Views","63c89993":"# 1.  Deplacement data set","655358d7":"# *Variable \"NB_velo\" *","647f07bb":"The number of bikes in the household varies between 0 and 10. but in term of average and median we can say that there is two bikes in each household. "}}