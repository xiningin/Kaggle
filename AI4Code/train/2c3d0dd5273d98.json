{"cell_type":{"0b84e312":"code","9d7a1985":"code","ea7ef7e6":"code","676f524a":"code","023f78ec":"code","193e0ff6":"code","af356509":"code","46ea2252":"code","b93efae4":"code","53707533":"code","b3a50b43":"code","2f4ddd15":"code","094702f1":"code","b30d7f45":"code","2f457b58":"code","a0c108b4":"code","10204cf0":"code","098ad695":"code","38858a9d":"code","d8fc4370":"code","28aba2e8":"code","7e3d4229":"code","2a51f944":"code","34419b85":"code","d12ae592":"code","61cc0f99":"code","c8db4952":"code","7b541c29":"code","454673de":"code","efe83b0d":"code","77da7937":"code","90184f0d":"code","405bea77":"code","c8abe007":"code","df32fe37":"code","47a90c68":"code","a141213f":"code","c484f9d6":"code","4d1cc36b":"code","322ac76e":"code","b0fc5654":"code","9a93f81a":"code","fe30309c":"code","3121849a":"code","54b46212":"code","564d72f5":"code","03680708":"code","343f9665":"code","e0253095":"code","3de6e2f1":"code","6d3db81e":"code","7bcde7e4":"code","5e7432b4":"code","39323042":"code","491c349a":"code","5e707384":"code","f9f2993f":"code","0393e80e":"code","9c19b1ac":"code","4e8f6410":"code","013035b7":"code","74b4828f":"code","205d9901":"code","9f5825ac":"markdown","6d6f8c14":"markdown","3a0d582f":"markdown","cab92f46":"markdown","dffb7973":"markdown","439e63e0":"markdown","a0ba1a45":"markdown","0df02888":"markdown","d542d57a":"markdown","fd32c2a6":"markdown","3735aac1":"markdown","50093411":"markdown","6b7d9ecf":"markdown","62e8e68c":"markdown","447852df":"markdown","fa87283f":"markdown","ef6bb47d":"markdown","82d2b207":"markdown","2bc99d21":"markdown","1bb06cc9":"markdown","85d65720":"markdown","54eefafe":"markdown","a18eadce":"markdown","fd9bd695":"markdown","a339f50f":"markdown","e73dc44e":"markdown","40334b0c":"markdown","e0a9aa0a":"markdown"},"source":{"0b84e312":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n#Visualization\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap \n#Libraries for ML\nfrom sklearn.preprocessing import StandardScaler #Standardizasyon i\u00e7in\nfrom sklearn.model_selection import train_test_split, GridSearchCV #GridSearchCV: KNN ile ilgili en iyi parametreleri belirlemek\nfrom sklearn.metrics import accuracy_score ,confusion_matrix #Sonu\u00e7 de\u011ferlendirme\nfrom sklearn.neighbors import KNeighborsClassifier,LocalOutlierFactor #Trainin algoritmas\u0131 ve NCA ve Outlier de\u011ferler i\u00e7in\nfrom sklearn.decomposition import PCA #PCA i\u00e7in\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport itertools\nplt.style.use('fivethirtyeight')\nimport seaborn as sns\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9d7a1985":"#read data\ndata = pd.read_csv(\"..\/input\/diabetes.csv\")\ndata.head()","ea7ef7e6":"#Split Data as M&B\np = data[data.Outcome == 1]\nn = data[data.Outcome == 0]","676f524a":"sns.countplot(x='Outcome',data=data)\nplt.title(\"Count 0 & 1\")\nplt.show()","023f78ec":"print('Data Shape',data.shape)\nprint(data.info()) \ndescribe = data.describe()\ndescribe.T","193e0ff6":"corr_data = data.corr() \nsns.clustermap(corr_data,annot= True,fmt = '.2f')\nplt.title('Correlation Between Features')\nplt.show();","af356509":"#Box p. \u00f6ncesi bir melted i\u015flemi gerekitor.\ndata_melted = pd.melt(data,id_vars='Outcome',\n                      var_name='Features',\n                      value_name='Value')\n\nplt.figure()\nsns.boxplot(x='Features',y='Value',hue='Outcome',data=data_melted) #Featureslar target'a g\u00f6re ayr\u0131ld\u0131.\nplt.xticks(rotation=75) #Feature isimleri 90 derece dik g\u00f6r\u00fclecek.\nplt.show()\n","46ea2252":"#General Analysis\n\ndata1 = data[data[\"Outcome\"]==1]\ncolumns = data.columns[:8]\nplt.subplots(figsize=(18,18))\nlength =len(columns)\nfor i,j in itertools.zip_longest(columns,range(length)):\n    plt.subplot((length\/2),3,j+1)\n    plt.subplots_adjust(wspace=0.2,hspace=0.5)\n    plt.ylabel(\"Count\")\n    data1[i].hist(bins=20,edgecolor='black')\n    plt.title(i)\nplt.show()","b93efae4":"#General Analysis\n\ndata1 = data[data[\"Outcome\"]==0]\ncolumns = data.columns[:8]\nplt.subplots(figsize=(18,18))\nlength =len(columns)\nfor i,j in itertools.zip_longest(columns,range(length)):\n    plt.subplot((length\/2),3,j+1)\n    plt.subplots_adjust(wspace=0.2,hspace=0.5)\n    plt.ylabel(\"Count\")\n    data1[i].hist(bins=20,edgecolor='black')\n    plt.title(i)\nplt.show()","53707533":"\n\nplt.scatter(p.Pregnancies,p.Glucose,color = \"brown\",label=\"Diabet Positive\",alpha=0.4)\nplt.scatter(n.Pregnancies,n.Glucose,color = \"Orange\",label=\"Diabet Negative\",alpha=0.2)\nplt.xlabel(\"Pregnancies\")\nplt.ylabel(\"Glucose\")\nplt.legend()\nplt.show()\n\n#We appear that it is clear segregation.","b3a50b43":"#Visualization, Scatter Plot\n\nplt.scatter(p.Age,p.Pregnancies,color = \"lime\",label=\"Diabet Positive\",alpha=0.4)\nplt.scatter(n.Age,n.Pregnancies,color = \"black\",label=\"Diabet Negative\",alpha=0.2)\nplt.xlabel(\"Age\")\nplt.ylabel(\"Pregnancies\")\nplt.legend()\nplt.show()\n\n#We appear that it is clear segregation.","2f4ddd15":"#Visualization, Scatter Plot\n\nplt.scatter(p.Glucose,p.Insulin,color = \"lime\",label=\"Diabet Positive\",alpha=0.4)\nplt.scatter(n.Glucose,n.Insulin,color = \"black\",label=\"Diabet Negative\",alpha=0.1)\nplt.xlabel(\"Glucose\")\nplt.ylabel(\"Insulin\")\nplt.legend()\nplt.show()\n\n#We appear that it is clear segregation.","094702f1":"x = data.drop(['Outcome'],axis=1) \ny = data.Outcome\ncolumns = x.columns.tolist() # Featurelar\u0131n isimlerini bir listede toplad\u0131k.\n\nclf = LocalOutlierFactor() #KNN de\u011feri gerekiyor. Tan\u0131ml\u0131 de\u011feri 20 ve bizde 20 kullanaca\u011f\u0131z. O nedenle bir\u015fey yazmayaca\u011f\u0131z.\ny_pred = clf.fit_predict(x) #LOF uygulay\u0131o negetif outlier f. al\u0131yoruz.\n\nx_score = clf.negative_outlier_factor_\noutlier_score = pd.DataFrame()\noutlier_score['score'] = x_score\n\nthreshold_outliers = -1.5\nfiltre = outlier_score['score'] < threshold_outliers\noutlier_index = outlier_score[filtre].index.tolist() #outlier de\u011ferlerine threshold uygulanm\u0131\u015f olanlar\u0131 bir listeye att\u0131k\n\nplt.figure()\nplt.scatter(x.iloc[outlier_index,0], x.iloc[outlier_index,1],color = 'blue',s=50,label='outliers')\nplt.scatter(x.iloc[:,0]\n            ,x.iloc[:,1],color='k',s=3,label='data_point') #s : boyut\n\nradius = (x_score.max() - x_score ) \/ (x_score.max() - x_score.min() ) #De\u011ferleri normalize ederek bias\u0131 \u00f6nledik\noutlier_score['radius '] = radius\n\nplt.scatter(x.iloc[:,0], x.iloc[:,1], s=1000*radius, edgecolors='r',facecolor='none',label='Outlier skores')\nplt.legend()\nplt.show();","b30d7f45":"x = x.drop(outlier_index) #outliers remove\ny = y.drop(outlier_index).values #outliers remove","2f457b58":"test_size = 0.2\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=test_size,random_state=42)","a0c108b4":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train) #scaler isimli bir de\u011fi\u015fkene Standartscaler metodunu atay\u0131p sonra bu de\u011fi\u015fken arac\u0131l\u0131\u011f\u0131yla xtraindeki verileri standardize ettik\n\nx_test = scaler.transform(x_test)\n\nx_train_df = pd.DataFrame(x_train,columns=columns)\nx_train_df_describe = x_train_df.describe()\nx_train_df['target'] = y_train","10204cf0":"data_melted = pd.melt(x_train_df,id_vars='target',\n                      var_name='Features',\n                      value_name='Value')\n\nplt.figure()\nsns.boxplot(x='Features',y='Value',hue='target',data=data_melted) #Featureslar target'a g\u00f6re ayr\u0131ld\u0131.\nplt.xticks(rotation=75) #Feature isimleri 90 derece dik g\u00f6r\u00fclecek.\nplt.show()","098ad695":"from sklearn.linear_model import LogisticRegression\nLR = LogisticRegression()","38858a9d":"#K-fold CV\nfrom sklearn.model_selection import cross_val_score\naccuraccies = cross_val_score(estimator = LR, X= x_train, y=y_train, cv=10)\nprint(\"Average Accuracies: \",np.mean(accuraccies))\nprint(\"Standart Deviation Accuracies: \",np.std(accuraccies))","d8fc4370":"LR.fit(x_train,y_train)\nprint(\"Test Accuracy {}\".format(LR.score(x_test,y_test))) \n\nLRscore = LR.score(x_test,y_test)","28aba2e8":"#Confusion Matrix\n\nyprediciton1= LR.predict(x_test)\nytrue = y_test\n\nfrom sklearn.metrics import confusion_matrix\nCM = confusion_matrix(ytrue,yprediciton1)\n\n#CM visualization\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nf, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(CM,annot = True, linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"Prediction(Ypred)\")\nplt.ylabel(\"Ytrue\")\nplt.show()","7e3d4229":"knn = KNeighborsClassifier(n_neighbors=2)\nknn.fit(x_train, y_train) #Calculation (In the supervise learning this section = training)\ny_predict = knn.predict(x_test) #Test Section\ncm = confusion_matrix(y_test, y_predict) #Plooting\nacc = accuracy_score(y_test, y_predict) #Accuracy Score\nscore = knn.score(x_test, y_test) #acc ile buras\u0131n\u0131n sonucu ayn\u0131 \u00e7\u0131kacak. Do\u011frulama ama\u00e7l\u0131 yap\u0131l\u0131yor.\n\nprint(\"Score:\",score)\nprint(\"CM:\",cm)\nprint(\"Basic KNN Acc:\",acc)","2a51f944":"def KNN_best_parameters(x_train,x_test,y_train,y_test):\n    \n    k_range = list(range(1,51)) #En uygun k de\u011feri buluma\n    weight_options = ['uniform','distance'] #En uygun weighti buluma\n    #manhattan_distance = 1\n    #euclidean_distance = 2\n    distance_options = [1,2] #En uygun distance type buluma\n    print()\n    param_grid = dict(n_neighbors=k_range,weights=weight_options,p=distance_options) #Aranacak parametreleri bir s\u00f6zl\u00fckte toplad\u0131k.\n\n    knn =KNeighborsClassifier() #Parametrelerin denenece\u011fi knn olu\u015fturuldu.\n    grid = GridSearchCV(knn,param_grid,cv=10,scoring='accuracy') #Parametrelerin aranmas\u0131 i\u00e7in method\n    grid.fit(x_train, y_train) #fitting ile best parm. elde edildi\n    \n    print('Best training score: {} with parametres: {}'.format(grid.best_score_,grid.best_params_))\n    print()\n    \n    knn = KNeighborsClassifier(**grid.best_params_) #Test setinde deneme i\u015flemi i\u00e7in\n    knn.fit(x_train, y_train)\n    \n    y_predict_test = knn.predict(x_test)\n    y_predict_train = knn.predict(x_train)\n\n    cm_test = confusion_matrix(y_test,y_predict_test)\n    cm_train = confusion_matrix(y_train,y_predict_train)\n\n    acc_test = accuracy_score(y_test,y_predict_test)  \n    acc_train = accuracy_score(y_train,y_predict_train)\n\n    print('Test Score: {}, Train Score: {}'.format(acc_test,acc_train))\n    print()\n    print('CM Test:',cm_test)\n    print('CM Train:',cm_train)\n    \n    return grid","34419b85":"grid = KNN_best_parameters(x_train,x_test,y_train,y_test)","d12ae592":"KNNscore = grid.best_score_","61cc0f99":"#%% PCA\n\nscale = StandardScaler()\nx_scaled = scaler.fit_transform(x) #x verisi b\u00f6l\u00fcnmeden tam bir \u015fekilde PCA i\u00e7in scale edildi. \n\npca = PCA(n_components=2) #2 componentli bir PCA olu\u015fturduk.\npca.fit(x_scaled)\nx_reduce_pca = pca.transform(x_scaled) #2feature'a yani boyuta d\u00fc\u015f\u00fcr\u00fclm\u00fc\u015f x \npca_data =pd.DataFrame(x_reduce_pca,columns=['p1','p2']) #reduce datadan incelemek i\u00e7in bir dataframe olu\u015fturuldu\npca_data['target'] = y #buna target eklendi. G\u00f6rselle\u015ftirmek i\u00e7in gerekli.\n\nsns.scatterplot(x='p1',y='p2',hue='target',data=pca_data) # targeta g\u00f6re renklendirilmi\u015f grafik\nplt.title('PCA: P1 Vs P2')","c8db4952":"x_train_pca, x_test_pca, y_train_pca, y_test_pca = train_test_split(x_reduce_pca,y,test_size=test_size,random_state=42)\n\ngrid_pca = KNN_best_parameters(x_train_pca, x_test_pca, y_train_pca, y_test_pca)\n#en iyi parametreleri elde etti\u011fimiz metodu PCA i\u00e7in \u00e7al\u0131\u015ft\u0131r\u0131yorum.","7b541c29":"cmap_light = ListedColormap(['orange',  'cornflowerblue'])\ncmap_bold = ListedColormap(['darkorange', 'darkblue'])\n\nh = .05 # step size in the mesh\nX = x_reduce_pca\nx_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\ny_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h),\n                     np.arange(y_min, y_max, h))\n\nZ = grid_pca.predict(np.c_[xx.ravel(), yy.ravel()])\n\n# Put the result into a color plot\nZ = Z.reshape(xx.shape)\nplt.figure()\nplt.pcolormesh(xx, yy, Z, cmap=cmap_light)\n\n# Plot also the training points\nplt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold,\n            edgecolor='k', s=20)\nplt.xlim(xx.min(), xx.max())\nplt.ylim(yy.min(), yy.max())\nplt.title(\"%i-Class classification (k = %i, weights = '%s')\"\n          % (len(np.unique(y)),grid_pca.best_estimator_.n_neighbors, grid_pca.best_estimator_.weights))","454673de":"#Confusion Matrix\n\nyprediciton2= knn.predict(x_test)\nytrue = y_test\n\nfrom sklearn.metrics import confusion_matrix\nCM = confusion_matrix(ytrue,yprediciton2)\n\n#CM visualization\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nf, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(CM,annot = True, linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"Prediction(Ypred)\")\nplt.ylabel(\"Ytrue\")\nplt.show()","efe83b0d":"#SVM with Sklearn\n\nfrom sklearn.svm import SVC\n\nSVM = SVC(random_state=42)","77da7937":"#K-fold CV\nfrom sklearn.model_selection import cross_val_score\naccuraccies = cross_val_score(estimator = SVM, X= x_train, y=y_train, cv=5)\nprint(\"Average Accuracies: \",np.mean(accuraccies))\nprint(\"Standart Deviation Accuracies: \",np.std(accuraccies))","90184f0d":"SVM.fit(x_train,y_train)  #learning \n#SVM Test \nprint (\"SVM Accuracy:\", SVM.score(x_test,y_test))\n\nSVMscore = SVM.score(x_test,y_test)","405bea77":"#Confusion Matrix\n\nyprediciton3= SVM.predict(x_test)\nytrue = y_test\n\nfrom sklearn.metrics import confusion_matrix\nCM = confusion_matrix(ytrue,yprediciton3)\n\n#CM visualization\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nf, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(CM,annot = True, linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"Prediction(Ypred)\")\nplt.ylabel(\"Ytrue\")\nplt.show()","c8abe007":"#Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\nNB = GaussianNB()","df32fe37":"#K-fold CV\nfrom sklearn.model_selection import cross_val_score\naccuraccies = cross_val_score(estimator = NB, X= x_train, y=y_train, cv=35)\nprint(\"Average Accuracies: \",np.mean(accuraccies))\nprint(\"Standart Deviation Accuracies: \",np.std(accuraccies))","47a90c68":"NB.fit(x_train,y_train) #learning\n#prediction\nprint(\"Accuracy of NB Score: \", NB.score(x_test,y_test))\n\nNBscore= NB.score(x_test,y_test)","a141213f":"#Confusion Matrix\n\nyprediciton4= NB.predict(x_test)\nytrue = y_test\n\nfrom sklearn.metrics import confusion_matrix\nCM = confusion_matrix(ytrue,yprediciton4)\n\n#CM visualization\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nf, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(CM,annot = True, linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"Prediction(Ypred)\")\nplt.ylabel(\"Ytrue\")\nplt.show()","c484f9d6":"#Decision Tree Algorithm\n\nfrom sklearn.tree import DecisionTreeClassifier\nDTC = DecisionTreeClassifier()","4d1cc36b":"#K-fold CV\nfrom sklearn.model_selection import cross_val_score\naccuraccies = cross_val_score(estimator = DTC, X= x_train, y=y_train, cv=55)\nprint(\"Average Accuracies: \",np.mean(accuraccies))\nprint(\"Standart Deviation Accuracies: \",np.std(accuraccies))","322ac76e":"DTC.fit(x_train,y_train) #learning\n#prediciton\nprint(\"Decision Tree Score: \",DTC.score(x_test,y_test))\nDTCscore = DTC.score(x_test,y_test)","b0fc5654":"#Confusion Matrix\n\nyprediciton5= DTC.predict(x_test)\nytrue = y_test\n\nfrom sklearn.metrics import confusion_matrix\nCM = confusion_matrix(ytrue,yprediciton5)\n\n#CM visualization\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nf, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(CM,annot = True, linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"Prediction(Ypred)\")\nplt.ylabel(\"Ytrue\")\nplt.show()","9a93f81a":"#Decision Tree Algorithm\n\nfrom sklearn.tree import DecisionTreeClassifier\nDTC = DecisionTreeClassifier()\nDTC.fit(x_train,y_train) #learning\n#prediciton\nprint(\"Decision Tree Score: \",DTC.score(x_test,y_test))\n","fe30309c":"#Random Forest\n\nfrom sklearn.ensemble import RandomForestClassifier\nRFC= RandomForestClassifier(n_estimators = 82, random_state=42) #n_estimator = DT","3121849a":"#K-fold CV\nfrom sklearn.model_selection import cross_val_score\naccuraccies = cross_val_score(estimator = RFC, X= x_train, y=y_train, cv=10)\nprint(\"Average Accuracies: \",np.mean(accuraccies))\nprint(\"Standart Deviation Accuracies: \",np.std(accuraccies))","54b46212":"RFC.fit(x_train,y_train) # learning\nprint(\"Random Forest Score: \",RFC.score(x_test,y_test))\nRFCscore=RFC.score(x_test,y_test)","564d72f5":"#Find Optimum K value\nscores = []\nfor each in range(80,100):\n    RFfind = RandomForestClassifier(n_estimators = each)\n    RFfind.fit(x_train,y_train)\n    scores.append(RFfind.score(x_test,y_test))\n    \nplt.figure(1, figsize=(10, 5))\nplt.plot(range(80,100),scores,color=\"black\",linewidth=2)\nplt.title(\"Optimum N Estimator Value\")\nplt.xlabel(\"N Estimators\")\nplt.ylabel(\"Score(Accuracy)\")\nplt.grid(True)\nplt.show()","03680708":"#Confusion Matrix\n\nyprediciton6= RFC.predict(x_test)\nytrue = y_test\n\nfrom sklearn.metrics import confusion_matrix\nCM = confusion_matrix(ytrue,yprediciton6)\n\n#CM visualization\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nf, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(CM,annot = True, linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"Prediction(Ypred)\")\nplt.ylabel(\"Ytrue\")\nplt.show()","343f9665":"#Import Library\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom keras.models import Sequential \nfrom keras.layers import Dense","e0253095":"def buildclassifier():\n    classifier = Sequential() #initialize NN\n    classifier.add(Dense(units = 24, kernel_initializer = 'uniform',activation = 'relu', input_dim =x_train.shape[1]))\n    classifier.add(Dense(units = 24, kernel_initializer = 'uniform',activation = 'relu'))\n    classifier.add(Dense(units = 24, kernel_initializer = 'uniform',activation = 'relu'))\n    classifier.add(Dense(units = 24, kernel_initializer = 'uniform',activation = 'relu'))\n    classifier.add(Dense(units = 24, kernel_initializer = 'uniform',activation = 'relu'))\n    classifier.add(Dense(units = 24, kernel_initializer = 'uniform',activation = 'relu'))\n    classifier.add(Dense(units = 1, kernel_initializer = 'uniform',activation = 'sigmoid'))\n    classifier.compile(optimizer = 'adam',loss = 'binary_crossentropy',metrics = ['accuracy'])\n    return classifier","3de6e2f1":"classifier = KerasClassifier(build_fn = buildclassifier, epochs = 500)\naccuracies = cross_val_score(estimator = classifier, X = x_train, y= y_train, cv = 5)\nmean = accuracies.mean()\nvariance = accuracies.std()\nprint(\"Accuracy mean: \"+ str(mean))\nprint(\"Accuracy variance: \"+ str(variance))","6d3db81e":"ANNmean = accuracies.mean()","7bcde7e4":"from sklearn.ensemble import GradientBoostingClassifier\ngbm_model = GradientBoostingClassifier().fit(x_train, y_train)\n\ny_pred = gbm_model.predict(x_test)\ntestscore_gbm=accuracy_score(y_test, y_pred)\naccuracy_score(y_test, y_pred)","5e7432b4":"### Model Tuning\n\ngbm_params = {\"learning_rate\" : [0.001, 0.01],\n             \"n_estimators\": [100,500],\n             \"max_depth\": [3,10],\n             \"min_samples_split\": [2,10]}\n\ngbm = GradientBoostingClassifier()\n\ngbm_cv = GridSearchCV(gbm, gbm_params, cv = 10, n_jobs = -1, verbose = 2)\ngbm_cv.fit(x_train, y_train)\n\nprint(\"The Best Parameters: \" + str(gbm_cv.best_params_))","39323042":"gbm = GradientBoostingClassifier(learning_rate = 0.01, \n                                 max_depth = 3,\n                                min_samples_split = 2,\n                                n_estimators = 100)\n\ngbm_tuned =  gbm.fit(x_train,y_train)\ny_pred = gbm_tuned.predict(x_test)\ncrosscore_gbm=accuracy_score(y_test, y_pred)\naccuracy_score(y_test, y_pred)","491c349a":"gbmscore = gbm.score(x_test,y_test)","5e707384":"#F1-Score For Logistic Regression\nfrom sklearn.metrics import f1_score\nLRf1 = f1_score(ytrue, yprediciton1, average='weighted') \nLRf1","f9f2993f":"#K-NN\nKNNf1= f1_score(ytrue, yprediciton2, average='weighted') \nKNNf1","0393e80e":"#SVM\nSVMf1=f1_score(ytrue, yprediciton3, average='weighted') \nSVMf1","9c19b1ac":"#naive bayes\nNBf1 = f1_score(ytrue, yprediciton4, average='weighted') \nNBf1","4e8f6410":"#Decision Tree\nDTf1=f1_score(ytrue, yprediciton5, average='weighted') \nDTf1","013035b7":"#RandomForest\nRFf1=f1_score(ytrue, yprediciton6, average='weighted') \nRFf1","74b4828f":"\nscores=[LRscore,KNNscore,SVMscore,NBscore,DTCscore,RFCscore,mean,gbmscore]\nAlgorthmsName=[\"Logistic Regression\",\"K-NN\",\"SVM\",\"Naive Bayes\",\"Decision Tree\", \"Random Forest\",\"Artificial Neural Network\",\"Gradient Boosting Machine\"]\n\n#create traces\n\ntrace1 = go.Scatter(\n    x = AlgorthmsName,\n    y= scores,\n    name='Algortms Name',\n    marker =dict(color='rgba(0,255,0,0.5)',\n               line =dict(color='rgb(0,0,0)',width=2)),\n                text=AlgorthmsName\n)\ndata = [trace1]\n\nlayout = go.Layout(barmode = \"group\",\n                  xaxis= dict(title= 'ML Algorithms',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Prediction Scores',ticklen= 5,zeroline= False))\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","205d9901":"scoresf1=[LRf1,KNNf1,SVMf1,NBf1,DTf1,RFf1]\n#create traces\n\ntrace1 = go.Scatter(\n    x = AlgorthmsName,\n    y= scoresf1,\n    name='Algortms Name',\n    marker =dict(color='rgba(225,126,0,0.5)',\n               line =dict(color='rgb(0,0,0)',width=2)),\n                text=AlgorthmsName\n)\ndata = [trace1]\n\nlayout = go.Layout(barmode = \"group\", \n                  xaxis= dict(title= 'ML Algorithms',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Prediction Scores(F1)',ticklen= 5,zeroline= False))\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","9f5825ac":"<a id =\"11\"><\/a><br>\n# Machine Learning Models","6d6f8c14":"# Scatter Plot For Comparasion of ML Algorithms Prediciton Scores (F1)","3a0d582f":"### Drop Outliers","cab92f46":"## Introduction \n* Diabetes is a chronic (long-lasting) health condition that affects how your body turns food into energy. \n* Most of the food you eat is broken down into sugar (also called glucose) and released into your bloodstream.\n\n### Goals\n* I am classified diabetic patients by using several ML models.\n\n#### Machine Learning Models\n\n* Logistic Regression\n* KNN\n* SVM\n* Navie Bayesian\n* Decision Tree\n* Random Forest \n* Artificial Neural Networks\n\n\n### Dataset Informations\n* **Name:** [Pima Indians Diabetes Database](https:\/\/www.kaggle.com\/uciml\/pima-indians-diabetes-database)\n* **Feautres:** 9 clinical features for prediction \n","dffb7973":"<a id =\"3\"><\/a><br>\n# Exploratory Data Analysis","439e63e0":"<a id =\"16\"><\/a><br>\n## Decision Tree\n<img src=\"https:\/\/emerj.com\/wp-content\/uploads\/2018\/04\/3049155-poster-p-1-machine-learning-is-just-a-big-game-of-plinko.gif\" width=\"500px\">\n","a0ba1a45":"<a id =\"19\"><\/a><br>\n## Gradient Boosting Machine (GBM)","0df02888":"<a id =\"10\"><\/a><br>\n## Box Plot Visualization after the Standardization","d542d57a":"<a id =\"2\"><\/a><br>\n### Basic Visualization","fd32c2a6":"<a id =\"8\"><\/a><br>\n## Outlier Detection","3735aac1":"<a id =\"17\"><\/a><br>\n# Random Forest","50093411":"<a id =\"22\"><\/a><br>\n# Result Visialization","6b7d9ecf":"<a id =\"6\"><\/a><br>\n## Analysis of Non-Diabetic Cases","62e8e68c":"<a id =\"14\"><\/a><br>\n## Support Vector Machine (SVM)","447852df":"<a id =\"21\"><\/a><br>\n## F1 Score Calculation","fa87283f":"<a id =\"18\"><\/a><br>\n# Artificial Neural Network (ANN)","ef6bb47d":"<a id =\"7\"><\/a><br>\n## Visualization of Features","82d2b207":"## Libraries","2bc99d21":"<a id =\"4\"><\/a><br>\n## Feautre Visualization with Box plot [Before Standardization]","1bb06cc9":"<a id =\"9\"><\/a><br>\n# Train Tespt Split & Standardization Processing","85d65720":"# Conclusion\n\n1. Thank you for investigation my kernel.\n2. I was comparison ML Classification Algorithms with the Pima Indians Diabetes Database.\n3. I found the best result with Random Forest and SVM.\n4. I expect your opinion and criticism.\n\n# If you like this kernel, Please Upvote :) Thanks\n\n<img src=\"https:\/\/media1.giphy.com\/media\/l0ExvuzJGJNZJZ47S\/giphy.gif?cid=790b76115cc05331372f4d64593e8962\" width=\"500px\">\n\n","54eefafe":"<a id =\"13\"><\/a><br>\n## K-nearest neighbors (KNN) & PCA Analysis","a18eadce":"<a id =\"5\"><\/a><br>\n## Analysis of Diabetic Cases","fd9bd695":"<a id =\"15\"><\/a><br>\n# Naive Bayes (NB)","a339f50f":"<a id =\"12\"><\/a><br>\n## Logistic Regression (LR)","e73dc44e":"\n## Content\n\n1. [Read and Examination Dataset](#1)\n    * [Basic Visualization](#2)\n2. [Exploratory Data Analysis](#3)\n    * [Feautre Visualization with Box plot [Before Standardization]](#4)\n    * [Analysis of Diabetic Cases](#5)\n    * [Analysis of Non-Diabetic Cases](#6)\n    * [Visualization of Features](#7)\n    * [Outlier Detection](#8)\n3. [Train Test Split & Standardization Processing](#9)\n    * [Box Plot Visualization after the Standardization](#10)\n4. [Machine Learning Models](#11)\n    * [Logistic Regression (LR)](#12)\n    * [K-nearest neighbors (KNN) & PCA Analysis](#13)\n    * [Support Vector Machine (SVM)](#14)\n    * [Naive Bayesian (NB)](#15)\n    * [Decision Tree](#16)\n    * [Random Forest (RF)](#17)\n    * [Artificial Neural Networks (ANN)](#18)\n    * [Gradient Boosting Machines (GBM)](#19)\n5. [Evaluation of Results](#20)\n    * [F1 Score Calculation](#21)\n    * [Results Visualization](#22)\n","40334b0c":"<a id =\"1\"><\/a><br>\n# Read and Examination Dataset","e0a9aa0a":"<a id =\"20\"><\/a><br>\n# Evaluation of Results"}}