{"cell_type":{"681065bd":"code","ae7f2bd6":"code","e60b8f14":"code","57164e2d":"code","053040c8":"code","0654e948":"code","1675ee1d":"code","ecbe69e2":"code","d7ff53f0":"code","130bd007":"code","16a64c42":"code","5b7c78d8":"code","82bc8059":"code","2bf98296":"code","52fd0fec":"code","4758b56c":"code","16837b2e":"code","37db3910":"markdown","9d9fe2b5":"markdown","1d8b1076":"markdown","93b03413":"markdown","432bd1d1":"markdown","8afd1a41":"markdown","86c86074":"markdown","1d3375ec":"markdown","a1f2334f":"markdown"},"source":{"681065bd":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier","ae7f2bd6":"data = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')","e60b8f14":"data.head()","57164e2d":"#Get Target data \ny = data['target']\n\n#Load X Variables into a Pandas Dataframe with columns \nX = data.drop(['target'], axis = 1)","053040c8":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=101)","0654e948":"# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 10, stop = 80, num = 10)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [2,4]\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]","1675ee1d":"# Create the param grid\nparam_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\nprint(param_grid)","ecbe69e2":"rf_Model = RandomForestClassifier()","d7ff53f0":"from sklearn.model_selection import GridSearchCV\nrf_Grid = GridSearchCV(estimator = rf_Model, param_grid = param_grid, cv = 10, verbose=2, n_jobs = 4)","130bd007":"rf_Grid.fit(X_train, y_train)","16a64c42":"rf_Grid.best_params_","5b7c78d8":"from sklearn.model_selection import RandomizedSearchCV\nrf_RandomGrid = RandomizedSearchCV(estimator = rf_Model, param_distributions = param_grid, cv = 10, verbose=2, n_jobs = 4)","82bc8059":"rf_RandomGrid.fit(X_train, y_train)","2bf98296":"rf_Grid.best_params_","52fd0fec":"rf_RandomGrid.best_params_","4758b56c":"print (f'Train Accuracy - : {rf_Grid.score(X_train,y_train):.3f}')\nprint (f'Test Accuracy - : {rf_Grid.score(X_test,y_test):.3f}')","16837b2e":"print (f'Train Accuracy - : {rf_RandomGrid.score(X_train,y_train):.3f}')\nprint (f'Test Accuracy - : {rf_RandomGrid.score(X_test,y_test):.3f}')","37db3910":"# Build Random Forest Model with hyperparameters","9d9fe2b5":"# Divide Data into Train and test","1d8b1076":"## With GridSearchCV","93b03413":"## With RandomizedSearchCV","432bd1d1":"# END","8afd1a41":"# Load Dataset ","86c86074":"# Load Libraries","1d3375ec":"# Check Accuracy","a1f2334f":"# Check Data for any missing values"}}