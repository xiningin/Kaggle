{"cell_type":{"2ba03cfd":"code","e70ad36b":"code","5854b328":"code","dd0c65b5":"code","660017b1":"code","ccc388be":"code","1b482388":"code","6f160645":"code","ad72bfa2":"code","93d5fc97":"code","85d3ef22":"code","9d1a3938":"code","220ac93b":"code","d3446e5a":"code","a452a866":"code","455f9499":"code","2712b762":"code","5dca3d64":"code","208870b8":"code","12759baf":"code","167def3f":"code","b28f1adc":"code","1ea1210f":"code","fcfedda4":"code","7d9d3a08":"markdown","c41bdb66":"markdown","87cd4aec":"markdown","418380bd":"markdown","fed591f6":"markdown","aa790444":"markdown","45e07a4a":"markdown","05899985":"markdown","74308944":"markdown","ff942d8c":"markdown","36388dee":"markdown","8e1be3bb":"markdown"},"source":{"2ba03cfd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e70ad36b":"df = pd.read_csv(\"..\/input\/kc_house_data.csv\")\ndf.head()","5854b328":"df.shape","dd0c65b5":"df.isnull().sum()","660017b1":"unique_df = pd.DataFrame(columns = [\"features\", \"unique_count\"])\nfor col in df.columns:\n    unique_df = unique_df.append({\"features\": col, \"unique_count\" : len(df[col].unique())}, ignore_index = True)\nunique_df","ccc388be":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(16, 12))\ncorr = df.corr()\nsns.heatmap(corr, annot = True,fmt='.2f',\n    cmap=sns.diverging_palette(20, 220, n=200),square=True)","1b482388":"print(pd.Series(df[\"bathrooms\"]).value_counts())\nprint(pd.Series(df[\"floors\"]).value_counts())\nprint(pd.Series(df[\"waterfront\"]).value_counts())\nprint(pd.Series(df[\"view\"]).value_counts())\nprint(pd.Series(df[\"grade\"]).value_counts())","6f160645":"from sklearn import preprocessing\nx = df[[\"grade\"]].values\n\nmin_max_scaler = preprocessing.MinMaxScaler()\n\nx_scaled = min_max_scaler.fit_transform(x)\n\n# Run the normalizer on the dataframe\ndf_normalized = pd.DataFrame(x_scaled)\ndf[\"grade\"] = df_normalized","ad72bfa2":"df[\"any_view\"] = df[\"view\"].apply(lambda x : 1 if x > 0 else 0)\ndf[\"no_of_views\"] = df[\"view\"]\ndf.drop([\"view\"], axis = 1, inplace = True)","93d5fc97":"df.drop(df[df[\"bedrooms\"] > 10].index, inplace = True)\ndf.drop(df[df[\"bedrooms\"] == 0].index, inplace = True)","85d3ef22":"#df[\"bathrooms\"] = np.array(df[\"bathrooms\"])\ndf[\"bathrooms\"] = np.around(df[\"bathrooms\"])\ndf[\"bathrooms\"] = df[\"bathrooms\"].astype(int)\n\ndf[\"floors\"] = np.around(df[\"floors\"])\ndf[\"floors\"] = df[\"floors\"].astype(int)\npd.Series(df[\"floors\"]).value_counts()","9d1a3938":"df[\"basement\"] = df[\"sqft_basement\"].apply(lambda x : 1 if x > 0 else 0)","220ac93b":"\ndf[\"date\"] = pd.to_datetime(df[\"date\"])\ndf[\"yr_sold\"] = df[\"date\"].dt.year\n\ndf[\"age_house\"] = df[\"yr_sold\"] - df[\"yr_built\"]","d3446e5a":"df[\"any_renovation\"] = df[\"yr_renovated\"].apply(lambda x : 1 if x > 0 else 0)","a452a866":"df[\"sqft_living_change\"] = (df[\"sqft_living15\"] - df[\"sqft_living\"])\ndf[\"sqft_living_change\"] = df[\"sqft_living_change\"].apply(lambda x : 0 if x == 0 else 1)\n#df[\"sqft_living_change\"]","455f9499":"df[\"sqft_living_inc\"] = (df[\"sqft_living15\"] - df[\"sqft_living\"])\ndf[\"sqft_living_inc\"] = df[\"sqft_living_inc\"].apply(lambda x : 0 if x < 0 else x)\ndf[\"sqft_living_inc\"]","2712b762":"df[\"sqft_living_dec\"] = (df[\"sqft_living\"] - df[\"sqft_living15\"])\ndf[\"sqft_living_dec\"] = df[\"sqft_living_dec\"].apply(lambda x : 0 if x < 0 else x)\ndf[\"sqft_living_dec\"]","5dca3d64":"df.head()","208870b8":"df[\"renovation_after_sold\"] = (df[\"yr_sold\"] - df[\"yr_renovated\"]).apply(lambda x : 1 if x <= 0 else 0)\n#df[df[\"renovation_after_sold\"] == 1]","12759baf":"col_scatterplot = unique_df[unique_df[\"unique_count\"] > 70][\"features\"]\ncol_boxplot = unique_df[unique_df[\"unique_count\"] <= 70][\"features\"]\n\nimport matplotlib.pyplot as plt\nfor col in col_scatterplot:\n    if col != \"date\":\n        if col != \"price\": \n            plt.scatter(df[col], df[\"price\"])\n            plt.xlabel(col)\n            plt.ylabel(\"Price\")\n            plt.show()\n\nimport seaborn as sns\nfor col in col_boxplot:\n    if col != \"price\":\n        sns.boxplot(df[col], df[\"price\"])\n        plt.show()","167def3f":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(16, 12))\ncorr = df.corr()\nsns.heatmap(corr, annot = True,fmt='.2f',\n    cmap=sns.diverging_palette(20, 220, n=200),square=True)","b28f1adc":"x = df[[\"basement\",\"yr_renovated\",\"bathrooms\", \"bedrooms\", \"sqft_living\",\"sqft_basement\", \"any_view\", \"no_of_views\", \"grade\", \"sqft_above\", \"sqft_living15\", \"floors\", \"waterfront\",\"lat\", \"sqft_living_dec\", \"any_renovation\"]]\ny = df[\"price\"]","1ea1210f":"from sklearn.model_selection import train_test_split as split_data\nfrom sklearn.linear_model import LinearRegression\n\nx_train, x_test, y_train, y_test = split_data(x, y, random_state = 0)\nreg = LinearRegression()\nreg.fit(x_train, y_train)\npredicted = reg.predict(x_test)\nfrom sklearn import metrics\nr_square = metrics.r2_score(y_test, predicted)\nprint(r_square)","fcfedda4":"from sklearn.ensemble import GradientBoostingRegressor\nregressor = GradientBoostingRegressor(n_estimators=500,max_depth=4,min_samples_split=2,learning_rate=0.05,loss='ls')\nregressor.fit(x_train, y_train)\nGBM_predicted_Values=regressor.predict(x_test)\nprint('Gradient Boosting Regression R-squared', round(regressor.score(x_test, y_test), 3))\n    ","7d9d3a08":"**MARKDOWNS ARE ABOVE THE RESPECTIVE CODE**\n* Read the file using : pd.read_csv(\" \"). And print first 5 rows.","c41bdb66":"* Creating a new feature as \"basement\" which indicates the presence of a basement.","87cd4aec":"* Firstly, convert the \"date\" feature in date-time format. Then extract the years to make a new feature as \"yr_sold\" in our dataframe.\n* Make a new feature as \"age_house\" which shows the age of the house.","418380bd":"* Adding a feature as \"any_renovation\" which indicates that is there any renovation happened.","fed591f6":"* Make scatter plots for the features having unique values more than 70 against \"price\" feature. \n* Make Boxplots for the features having unique values less than 70 against \"price\" feature.","aa790444":"* Adding a feature as \"sqft_living_change\" which indicates whether there is a change in sqft living in 2015.","45e07a4a":"* Create a dataframe in which \"features\" is a column where all features of the dataset are present. \n* Another column \"unique_count\" shows respective unique values of the features.","05899985":"* Cleaning the values of \"bathrooms\" and \"floors\" features","74308944":"* Cleaning \"view\" feature : 1 if has been viewed else 0","ff942d8c":"* Normalising the \"grade\" feature.","36388dee":"## Let's make a basic ML model and check the accuracy.","8e1be3bb":"* Droping rows with no of bedrooms more than 10 and equal to 0."}}