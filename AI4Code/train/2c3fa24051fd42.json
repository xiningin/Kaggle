{"cell_type":{"aa9968bc":"code","b4861fb0":"code","724706f3":"code","c2680d38":"markdown","6b8fab14":"markdown","f7333c72":"markdown"},"source":{"aa9968bc":"import janestreet\nimport pandas as pd\nfrom datetime import datetime\nfrom pytz import timezone\nprint('HEY', datetime.now(timezone('Canada\/Pacific')).isoformat(timespec='minutes'))","b4861fb0":"env = janestreet.make_env()\niter_test = env.iter_test()\ntest = pd.DataFrame()\nfor (test_df, sample_prediction_df) in iter_test:\n    test = pd.concat([test, test_df])\n    sample_prediction_df.action = 0 \n    env.predict(sample_prediction_df)\ntest.to_csv('test.csv', index=False)\ntest","724706f3":"print('BYE', datetime.now(timezone('Canada\/Pacific')).isoformat(timespec='minutes') )","c2680d38":"# Problem\nThis competition puts us through this painful one-trade-at-a-time loop:\n\n**for (test_df, sample_prediction_df) in iter_test:**","6b8fab14":"# Solution\n* **test.csv** is here for your downloading comfort;\n* the code is also here for your forking comfort.\n\nThis is a stripped-down, minimalist code to save the test dataset for repeated use without having to\n\n* Add data > janestreet\n* import janestreet\n* env = janestreet.make_env()\n* iter_test = env.iter_test()\n* for (test_df, sample_prediction_df) in iter_test:\n\nuntil we are really, really ready to submit.","f7333c72":"# Cheers, Kaggle and Kagglers!\nfor democratising learning and skills"}}