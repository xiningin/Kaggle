{"cell_type":{"8efe18f9":"code","4d95dc90":"code","adfecb9b":"code","5c029f7b":"code","ccc39563":"code","0df8fe05":"code","b4cfab72":"code","1cd1693e":"code","86d777dc":"code","bf46a0f0":"code","81e6fd1c":"code","873c4ef7":"code","90568523":"code","8e81dded":"code","7691c42e":"code","ff132e6f":"code","31209721":"code","3951888b":"code","450145f4":"code","3dd102f7":"code","18df376d":"code","d2ebc770":"code","70ca5ced":"markdown","e53ac7bb":"markdown","6a08bafb":"markdown","592c7c85":"markdown","474d7e48":"markdown","57cfe2ce":"markdown","c0bd889a":"markdown","7b713bea":"markdown","a06369e3":"markdown","1f0e2515":"markdown","669ade5b":"markdown","0045a4d3":"markdown","dba58ba9":"markdown","b06afd1b":"markdown","a9260c3e":"markdown"},"source":{"8efe18f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d95dc90":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import f1_score, jaccard_score\nfrom sklearn.metrics import classification_report, confusion_matrix, plot_confusion_matrix\n\n'''\nFor further versions, it would be interesting to implement a Neural Network.\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader, TensorDataset\nimport torchvision.transforms as transforms\n'''","adfecb9b":"stars_df = pd.read_csv('..\/input\/star-categorization-giants-and-dwarfs\/Star3642_balanced.csv')\nstars_df","5c029f7b":"stars_df.describe()","ccc39563":"stars_df.dtypes","0df8fe05":"null, nan = stars_df.isnull().sum() , stars_df.isna().sum()\nprint(null)\nprint(nan)","b4cfab72":"stars_df['SpType'].unique","1cd1693e":"threshold = stars_df['e_Plx'].mean() + 0.5\n\nstars_dff = stars_df[ stars_df['e_Plx'] < threshold ]","86d777dc":"stars_dff","bf46a0f0":"fig, axes = plt.subplots(2, 2, figsize=(20,12))\n\nsns.scatterplot(data = stars_dff, x = 'Vmag', y= 'B-V', ax = axes[0][0], hue = 'TargetClass')\naxes[0,0].set_xlabel('Apparent Magnitude')\n\nsns.scatterplot(data = stars_dff, x = 'Amag',  y= 'B-V', ax = axes[0][1], hue = 'TargetClass')\naxes[0,1].set_xlabel('Absolute Magnitude')\n\n\nsns.scatterplot(data = stars_dff, x = 'Vmag', y = 'Plx', ax = axes[1][0], hue='TargetClass')\naxes[1,0].set_xlabel('Apparent Magnitude')\n\n\nsns.scatterplot(data = stars_dff, x = 'Amag', y = 'Plx', ax = axes[1][1], hue = 'TargetClass')\naxes[1,1].set_xlabel('Absolute Magnitude')\n\n","81e6fd1c":"fig, axes = plt.subplots(1,2, figsize=(20,6))\n\nsns.kdeplot(data = stars_dff['Amag'].loc[stars_dff['TargetClass']==0], shade=True, ax = axes[0],label='Dwarf')\nsns.kdeplot(data = stars_dff['Amag'].loc[stars_dff['TargetClass']==1], shade=True, ax = axes[0],label='Giant')\naxes[0].legend()\n\naxes[0].set_xlabel('Absolute Magnitude', size=14)\nsns.kdeplot(data = stars_dff['Vmag'].loc[stars_dff['TargetClass']==0], shade=True, ax = axes[1],label='Dwarf')\nsns.kdeplot(data = stars_dff['Vmag'].loc[stars_dff['TargetClass']==1], shade=True, ax = axes[1],label='Giant')\naxes[1].legend()\n\naxes[1].set_xlabel('Apparent Magnitude', size=14)","873c4ef7":"#Let's calculate the squared value of the apparent and absolute magnitudes. The same for the B-V column.\n\nstars_df_eng = stars_dff.copy()\n\nstars_df_eng['Amag_SQ'] = stars_df_eng['Amag']**2\nstars_df_eng['Vmag_SQ'] = stars_df_eng['Vmag']**2\nstars_df_eng['B-V_SQ'] = stars_df_eng['B-V']**2","90568523":"#Now let's try adding different values to each other\n\nstars_df_eng['Sum_AV'] = stars_df_eng['Amag'] + stars_df_eng['Vmag']\nstars_df_eng['Sub_AV'] = stars_df_eng['Amag'] + stars_df_eng['Vmag']","8e81dded":"stars_numeric = stars_df_eng.drop('SpType', inplace=False, axis='columns')\nstars_numeric.head()","7691c42e":"#Standarization of the dataset\nfor i in stars_numeric.columns.tolist():\n    stars_numeric[i] = stars_numeric[i] \/ stars_numeric[i].max()\nstars_numeric.head()\nstars_numeric['TargetClass'] = stars_numeric['TargetClass'].astype('int64')","ff132e6f":"#We will use a 20% of the data for the test dataset.\nX = stars_numeric.drop('TargetClass', axis=1, inplace=False)\nY = stars_numeric['TargetClass']\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.20, random_state=1)","31209721":"n_neigh = 15\nK_best = 0\nScore_best = 0\n\nfor i in range(1,n_neigh):\n    KNN = KNeighborsClassifier(n_neighbors=i)\n    KNN.fit(X_train,Y_train)\n    Y_pred = KNN.predict(X_test)\n    if KNN.score(X_test,Y_test) > Score_best:\n        Score_best = KNN.score(X_test,Y_test)\n        K_best = i\nprint(\"The best number of neighbors is {} with a test accuracy of {}%\"\"\".format(K_best, (Score_best*100)))\n","3951888b":"matrix = confusion_matrix(Y_test, Y_pred, labels=[0,1])\nplot_confusion_matrix(KNN, X_test, Y_test,labels=[0,1],cmap='Blues')","450145f4":"solvers = ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']\nbest_solver = ''\nbest_score_LR = 0\nfor i in solvers:\n    LogReg = LogisticRegression(solver=i)\n    LogReg.fit(X_train, Y_train)\n    Y_pred_LR = LogReg.predict(X_test)\n    score = LogReg.score(X_test,Y_test)\n    \n    if score > best_score_LR:\n        best_score_LR = score\n        best_solver = i\nprint('The best solver for the Logistic Regression is {}, with a {}% of accuracy in the test set.'.format(best_solver, best_score_LR*100))\n","3dd102f7":"matrix_LR = confusion_matrix(Y_test, Y_pred_LR, labels=[0,1])\nplot_confusion_matrix(LogReg, X_test, Y_test ,labels=[0,1],cmap='Blues')","18df376d":"kernels = ['rbf', 'poly', 'sigmoid','linear']\nbest_score_SVC = 0\nkernel_best = ''\nfor i in kernels:\n    SupVec = SVC(kernel=i, gamma='auto', random_state=1)\n    SupVec.fit(X_train,Y_train)\n    Y_pred_SV = SupVec.predict(X_test)\n    if SupVec.score(X_test, Y_test) > best_score_SVC:\n        best_score_SVC = SupVec.score(X_test, Y_test)\n        kernel_best = i\n    \nprint('The SVC performs better using a {} kernel, obtaining a {}% of accuracy'.format(kernel_best, best_score_SVC*100))\n#print(\"The (test) accuracy is approximately {}%\".format(round(SupVec.score(X_test,Y_test)*100)))","d2ebc770":"matrix_SV = confusion_matrix(Y_test, Y_pred_SV, labels=[0,1])\nplot_confusion_matrix(SupVec, X_test, Y_test,labels=[0,1],cmap='Blues')","70ca5ced":"First of all let's import the dataset and let's check the type of data, the missing values and also we are going to take a look at the different categorical variables.","e53ac7bb":"# 3 - Visualization","6a08bafb":"# 6.3 - Support Vector Classification","592c7c85":"# 5 - Splitting the dataset","474d7e48":"## 4.2 - Working with features","57cfe2ce":"# 0 - Importing Libraries","c0bd889a":"# 6.1 - KNN Model","7b713bea":"# 6 - Models Development","a06369e3":"If we examine the dataset, we can see that the scatter plots shows an interesting division of the space. Just a small number of stars would be misclasified if we drawed a simple curve in order to separate the two kind of stars. The idea is to expand our features by, for example, calculating the squared value of some columns and also performing some calculations between two columns in order to obtain a third one.","1f0e2515":"# 2 - Removing rows that have too much error.","669ade5b":"# 1 - Importing & analyzing the dataset","0045a4d3":"## 4.1 - Why feature engineering?","dba58ba9":"# 4 - Feature Engineering","b06afd1b":"Let's plot some features so we can get more insights about the dataset.","a9260c3e":"# 6.2 - Logistic Regression"}}