{"cell_type":{"6ad487e9":"code","52b7d211":"code","7654b00d":"code","eecfa1d9":"code","237b05b7":"code","9327885a":"code","0535f50d":"code","d6454897":"code","a83ac7a6":"code","136d347a":"code","ce4bd399":"code","83c7c618":"code","e00117fa":"code","2070358b":"code","ce36ace1":"code","6f8dade8":"code","d189b4ac":"code","6f4cbe04":"code","855731c9":"code","a09078e0":"code","7799e19d":"code","53f269f3":"code","913acb87":"code","9ed72805":"code","bc6495a0":"code","70d14eb4":"code","24d0579d":"code","9f46491c":"code","07e6ab72":"markdown","d3f1712e":"markdown","0eb48187":"markdown","753cc41a":"markdown","88b78c7b":"markdown","0f465cf1":"markdown","a4f1fd10":"markdown","40da217a":"markdown","32583f1a":"markdown","a7988824":"markdown","22428be0":"markdown","901cead3":"markdown","31cf14a5":"markdown","e9a0d634":"markdown","d6c4635b":"markdown","3c5a28c1":"markdown","851d09da":"markdown","7b2963bd":"markdown"},"source":{"6ad487e9":"!pip install pandas_ta","52b7d211":"import numpy as np\nimport pandas as pd\n\nfrom tqdm import tqdm, tqdm_notebook\nimport pathlib\n\nimport pandas_ta as ta\n\nimport lightgbm as lgb\nfrom catboost import CatBoostRegressor, Pool\n\nfrom hyperopt import fmin, tpe, hp, STATUS_OK, Trials, space_eval\n\nfrom sklearn.model_selection import KFold\n\n%pylab inline\nplt.style.use(\"bmh\")","7654b00d":"# \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0432 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435\n\ndef mean_absolute_percentage_error(y_true, y_pred): \n    \"\"\"\n    Use of this metric is not recommended; for illustration only. \n    See other regression metrics on sklearn docs:\n      http:\/\/scikit-learn.org\/stable\/modules\/classes.html#regression-metrics\n    Use like any other metric\n    >>> y_true = [3, -0.5, 2, 7]; y_pred = [2.5, -0.3, 2, 8]\n    >>> mean_absolute_percentage_error(y_true, y_pred)\n    Out[]: 24.791666666666668\n    \"\"\"\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\n\ndef plot_res(train_predict, test_predict, y_train, y_test): \n    print(f\"TRAIN mape: {mean_absolute_percentage_error(y_train, train_predict):0.2f}%\")\n    print(f\"TEST mape: {mean_absolute_percentage_error(y_test, test_predict):0.2f}%\")\n    \n    plot(test_predict, label=\"Predict\")\n    plot(y_test, label=\"Rael price\")\n    plt.legend(loc=0);\n    \n\ndef cat_model(y_train, X_train, X_test, y_test):\n    model = CatBoostRegressor(#learning_rate=0.01,\n                              iterations=5000,\n                              #depth=12,\n                             objective='MAPE',\n                             od_type = \"Iter\",\n                             od_wait = 500,\n                             random_seed = RANDOM_SEED,)\n    model.fit(X_train, y_train,\n             eval_set=(X_test, y_test),\n             verbose=False,\n             use_best_model=True,\n             plot=False)\n    \n    return(model)","eecfa1d9":"RANDOM_SEED = 42\nnp.random.seed(RANDOM_SEED)  \nPYTHONHASHSEED = 0","237b05b7":"!pip freeze > requirements.txt","9327885a":"VERSION = 134.1\nN_SPLITS = 5\nDATA_DIR = pathlib.Path('\/kaggle\/input\/sibur-2019-v1\/')\n\nTARGET = \"pet\"\nSUB_PCT_PAR = 'SUM_5_paraxylene_and_glycol_plas' # \u043f\u0430\u0440\u0430 \u0441\u0445\u043e\u0436\u0430\u044f \u0441 \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c, \u0434\u0430\u043b\u0435\u0435 \u043f\u043e\u044f\u0441\u043d\u044e \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435","0535f50d":"train_target = pd.read_csv(DATA_DIR.joinpath(\"pet_target_train.csv\"), index_col=\"date\", parse_dates=[\"date\"])\ntest_target = pd.read_csv(DATA_DIR.joinpath(\"pet_test_timestamps.csv\"), index_col=\"date\", parse_dates=[\"date\"])\ndaily = pd.read_csv(DATA_DIR.joinpath(\"pet_daily.csv\"), index_col=\"date\", parse_dates=[\"date\"])\nweekly = pd.read_csv(DATA_DIR.joinpath(\"pet_weekly.csv\"), index_col=\"date\", parse_dates=[\"date\"])\nrubber_daily = pd.read_csv(DATA_DIR.joinpath(\"rubber_daily.csv\"), index_col=\"date\", parse_dates=[\"date\"])","d6454897":"daily.sample(5)","a83ac7a6":"# from https:\/\/www.finam.ru\/profile\/kurs-rublya\/eur-from-cb\/export\/\n\nuer_rub_daily = pd.read_csv(DATA_DIR.joinpath(\"EURCB_040101_191106.csv\"), index_col=\"<DATE>\", parse_dates=[\"<DATE>\"])\nusd_rub_daily = pd.read_csv(DATA_DIR.joinpath(\"USDCB_040101_191106.csv\"), index_col=\"<DATE>\", parse_dates=[\"<DATE>\"])\nrub_daily = pd.DataFrame(index=daily.index)\nrub_daily['usdrub'] = usd_rub_daily['<CLOSE>']\nrub_daily['eurrub'] = uer_rub_daily['<CLOSE>']\nrub_daily = rub_daily.ffill().fillna(0)","136d347a":"rub_daily.sample(5)","ce4bd399":"rubber_daily_D = rubber_daily[[\n                                'brent_close',\n                                'rubber_close',\n                                #'USDCNY_close',\n                                'USDTHB_open',\n                                'USDIDR_open',\n                                #'USDVND_open',\n                                ]].resample(\"D\").ffill()\n\nwfts = weekly[[\n                'paraxylene_CHN_USD', \n                'paraxylene_RT_USD', \n                'paraxylene_SEA_USD',\n                #'pta_NEA_USD', \n                'ethylene_glycol_EU_EUR', \n                'ethylene_glycol_CHN_USD'\n                ]].resample(\"D\").ffill()\n\ndf = wfts.join(rubber_daily_D).ffill().fillna(0) # day date\ndf = df.join(rub_daily)","83c7c618":"# From Baseline\ndf_tmp = df[df.index.day==9]\ndf_tmp[\"prediction_date\"] = (df_tmp.index\n                                   + pd.TimedeltaIndex(df_tmp.index.days_in_month-8, unit=\"D\"))\ndf = train_target.join(df_tmp.set_index(\"prediction_date\"), how=\"outer\")[\"2004\":]\ndf.index.name = \"date\"\ndf = df.ffill().fillna(0)\n#df.head(5)","e00117fa":"df['SUM_5_paraxylene_and_glycol_plas'] = (df[['paraxylene_CHN_USD', \n                                                'paraxylene_RT_USD', \n                                                'paraxylene_SEA_USD',\n                                                'ethylene_glycol_EU_EUR', \n                                                'ethylene_glycol_CHN_USD',\n                                                ]].sum(axis=1)\/5)+170\n\ndf['SUM_v1'] = (df[[#'paraxylene_CHN_USD', \n                    'paraxylene_RT_USD', \n                    'paraxylene_SEA_USD',\n                    'ethylene_glycol_EU_EUR', \n                    'ethylene_glycol_CHN_USD',\n                    ]].sum(axis=1)\/4)\n\ndf['SUM_v2'] = (df[['paraxylene_CHN_USD', \n                    #'paraxylene_RT_USD', \n                    'paraxylene_SEA_USD',\n                    'ethylene_glycol_EU_EUR', \n                    'ethylene_glycol_CHN_USD',\n                    ]].sum(axis=1)\/4)\n\ndf['SUM_v4'] = (df[['paraxylene_CHN_USD', \n                    'paraxylene_RT_USD', \n                    'paraxylene_SEA_USD',\n                    #'ethylene_glycol_EU_EUR', \n                    'ethylene_glycol_CHN_USD',\n                    ]].sum(axis=1)\/4)\n\ndf['SUM_v6'] = (df[['paraxylene_CHN_USD', \n                    'paraxylene_RT_USD', \n                    'paraxylene_SEA_USD',\n                    #'ethylene_glycol_EU_EUR', \n                    'ethylene_glycol_CHN_USD',\n                   'rubber_close'\n                    ]].sum(axis=1)\/5)\n\ndf['SUM_v7'] = (df[['paraxylene_CHN_USD', \n                    'paraxylene_RT_USD', \n                    'paraxylene_SEA_USD',\n                    #'ethylene_glycol_EU_EUR', \n                    'ethylene_glycol_CHN_USD',\n                    'rubber_close',\n                    'brent_close'\n                    ]].sum(axis=1)\/6)\n\ndf['SUM_v9'] = (df[['paraxylene_CHN_USD', \n                            'paraxylene_RT_USD', \n                            'paraxylene_SEA_USD',\n                            'ethylene_glycol_EU_EUR', \n                            'ethylene_glycol_CHN_USD',\n                         'rubber_close',\n                          'brent_close'\n                            ]].sum(axis=1)\/7)\n\ndf['SUM_v10'] = (df[['paraxylene_CHN_USD', \n                            'paraxylene_RT_USD', \n                            'paraxylene_SEA_USD',\n                            #'ethylene_glycol_EU_EUR', \n                            'ethylene_glycol_CHN_USD',\n                         #'rubber_close',\n                          'brent_close'\n                            ]].sum(axis=1)\/5)\n\ndf['SUM_v11'] = (df[['paraxylene_CHN_USD', \n                        'paraxylene_RT_USD', \n                        'paraxylene_SEA_USD',\n                        'ethylene_glycol_EU_EUR', \n                        'ethylene_glycol_CHN_USD',\n                        'rubber_close'\n                        #'brent_close'\n                        ]].sum(axis=1)\/6)","2070358b":"ta_columns = df.columns[1:]\nta_columns","ce36ace1":"df_pct = df.pct_change(periods=1)","6f8dade8":"# PCT \nfor colum_name in ta_columns:\n    for period in [2,3,4,6,12,24,36]:\n        df_pct[colum_name+'_PCT_'+str(period)] = df[colum_name].pct_change(periods=period)","d189b4ac":"df_pct['SUM_pct_v1'] = (df_pct[['paraxylene_CHN_USD', \n                            'paraxylene_RT_USD', \n                            'paraxylene_SEA_USD',\n                            'ethylene_glycol_EU_EUR', \n                            'ethylene_glycol_CHN_USD',\n                            ]].sum(axis=1)\/5)\n\ndf_pct['SUM_pct_v2'] = (df_pct[['paraxylene_CHN_USD', \n                            'paraxylene_RT_USD', \n                            'paraxylene_SEA_USD',\n                            'ethylene_glycol_EU_EUR', \n                            'ethylene_glycol_CHN_USD',\n                            'rubber_close',\n                            'brent_close'\n                            ]].sum(axis=1)\/7)\n\ndf_pct['SUM_pct_v3'] = (df_pct[['paraxylene_CHN_USD', \n                            'paraxylene_RT_USD', \n                            'paraxylene_SEA_USD',\n                            #'ethylene_glycol_EU_EUR', \n                            'ethylene_glycol_CHN_USD',\n                            ]].sum(axis=1)\/4)\n\ndf_pct['SUM_pct_v4'] = (df_pct[['paraxylene_CHN_USD', \n                                'paraxylene_RT_USD', \n                                'paraxylene_SEA_USD',\n                                #'ethylene_glycol_EU_EUR', \n                                'ethylene_glycol_CHN_USD',\n                                #'rubber_close',\n                                'brent_close'\n                                ]].sum(axis=1)\/5)","6f4cbe04":"# TA\nfor colum_name in ta_columns:\n    for period in [1,2,3,4,6,12,24,36]:\n        df_pct[colum_name+'_RSI_'+str(period)] = ta.rsi(df[colum_name], length=period)\n        df_pct[colum_name+'_MOM_'+str(period)] = ta.mom(df[colum_name], length=period)\n        df_pct[colum_name+'_RSI_pct_'+str(period)] = ta.rsi(df_pct[colum_name], length=period)\n        df_pct[colum_name+'_MOM_pct_'+str(period)] = ta.mom(df_pct[colum_name], length=period)\n        #df_pct[colum_name+'_LINREG_pct_'+str(period)] = ta.linreg(df_pct[colum_name], length=period)","855731c9":"# # STD MAX MIN\nfor colum_name in ta_columns:\n    for period in [3,4,6,12,24,36]:\n        df_pct[colum_name+'_STD_'+str(period)] = df_pct[colum_name].rolling(period).std()\n        #df_pct[colum_name+'_MEDIAN_'+str(period)] = df_pct[colum_name].rolling(period).median()\n        #df_pct[colum_name+'_MAX_'+str(period)] = df_pct[colum_name].rolling(period).max()\n        #df_pct[colum_name+'_MAX_'+str(period)] = df_pct[colum_name].rolling(period).min()","a09078e0":"df_pct = df_pct.replace([np.inf, -np.inf], np.nan)\ndf_pct = df_pct.ffill().fillna(0)\ndf_pct.info()","7799e19d":"plt.rcParams[\"figure.figsize\"] = (12,4)\ndf['2005':'2015']['pet'].plot()\nlegend()","53f269f3":"df['2005':'2015']['pet'].copy().pct_change(periods=1).ffill().plot()\nlegend()","913acb87":"df['2005':'2015']['pet'].copy().pct_change(periods=1).ffill().plot()\ndf['2005':'2015'][SUB_PCT_PAR].copy().pct_change(periods=1).shift(-1).ffill().plot()\nlegend()","9ed72805":"df['2005':'2015']['pet'].plot()\ndf['2005':'2015'][SUB_PCT_PAR].copy().shift(-1).ffill().plot()\nlegend()","bc6495a0":"# \u041f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0435 \u0442\u0430\u0440\u0433\u0435\u0442\u044b \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\ndf['target_pet_pct'] = (df['pet'].copy()).pct_change(periods=1).ffill().fillna(0)\ndf['target_par_pct'] = (((df[SUB_PCT_PAR].copy()).pct_change(periods=1)).shift(-1)).ffill().fillna(0)","70d14eb4":"submissions = pd.DataFrame(0,columns=[\"sub_0\"], index=df[\"2016\":].copy().index)\nsub_pct_par = df[\"2016\":][SUB_PCT_PAR].copy().values  # \u043f\u0430\u0440\u0430 \u0434\u043b\u044f inverse transform pct \u0432 submissions\nX_sub = df_pct[\"2016\":].copy().drop([TARGET,], axis=1) # submissions df\ni=0\n\nfor target_f in tqdm_notebook(['target_pet_pct','target_par_pct',]):\n    # Target\n    df_pct['pet'] = df[target_f].copy()  # \u043d\u0430\u0437\u043d\u0430\u0447\u0430\u0435\u043c \u0442\u0430\u0440\u0433\u0435\u0442\n    # Data\n    train = df_pct[\"2005\":\"2015\"].copy() \n    y = train[TARGET].values\n    X = train.drop([TARGET,], axis=1)\n    \n    # \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u043e \u043c\u0430\u043b\u043e, \u0430 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e ->\n    # \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 KFold \u0438 \u0437\u0430\u0431\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430 cv \u0432 Time series :)\n    splits = list(KFold(n_splits=N_SPLITS, shuffle=False, random_state=RANDOM_SEED).split(X, y))\n\n    for idx, (train_idx, test_idx) in tqdm_notebook(enumerate(splits), total=N_SPLITS, leave=False):\n        # use the indexes to extract the folds in the train and validation data\n        X_train, y_train, X_test, y_test = X.iloc[train_idx], y[train_idx], X.iloc[test_idx], y[test_idx]\n        # model for this fold\n        model = cat_model(y_train, X_train, X_test, y_test,)\n        # submissions\n        sub_predict = model.predict(X_sub)\n        # inverse transform pct\n        sub_predict_price = ((sub_predict*sub_pct_par) + sub_pct_par)\n        submissions[f'sub_{i}'] = sub_predict_price\n        i+=1","24d0579d":"plt.rcParams[\"figure.figsize\"] = (15,10)\nsubmissions.plot()","9f46491c":"submissions['blend'] = (submissions.sum(axis=1))\/len(submissions.columns)\n\nblend_preds = pd.DataFrame(submissions['blend'].values, columns=[\"pet\"], index=X_sub.index)\nblend_preds.loc[test_target.index].to_csv(f\"pet_blend_cat_v{VERSION}.csv\")","07e6ab72":"\u0421 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043b\u0438\u0441\u044c, \u0434\u0430\u0432\u0430\u0439 \u0442\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0437\u043c\u0435\u0440\u0435\u043c\u0441\u044f \u0447\u0442\u043e-\u0436\u0435 \u043c\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c) \u041d\u0430\u0447\u043d\u0435\u043c \u0441\u0442\u043e\u0433\u043e \u0447\u0442\u043e \u043c\u044b:\n### \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043d\u0435 \u0441\u0430\u043c\u0443 \u0446\u0435\u043d\u0443 \u0430 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u043e\u0442 \u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u0446\u0435\u043d\u044b.    \n\n\u0422\u043e \u0435\u0441\u0442\u044c \u043c\u044b \u0432\u043e\u0442 \u044d\u0442\u043e:\n\n","d3f1712e":"## FIT","0eb48187":"### From Baseline\n\u043f\u0440\u0438\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u0437\u044f\u0442\u043e \u0438\u0437 Baseline","753cc41a":"# DATA","88b78c7b":"## CUSTOM\n\u0442\u043e \u0447\u0442\u043e \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u043b \u0441\u0430\u043c","0f465cf1":"# ML","a4f1fd10":"# Features","40da217a":"# SETUP","32583f1a":"## \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0438\u0434\u0435\u0438\n\n* \u041c\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043d\u0435 \u0441\u0430\u043c\u0443 \u0446\u0435\u043d\u0443, \u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u0446\u0435\u043d\u044b\n* \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0442\u0430\u0440\u0433\u0435\u0442 \u043d\u0435 \u0434\u0430\u043d \u0432 \u0442\u0435\u0441\u0442\u0435 (\u0441 2016 \u0433\u043e\u0434\u0430), \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0441\u0445\u043e\u0448\u0438\u0439 \u0440\u044f\u0434 \u0438 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0442\u0430\u0440\u0433\u0435\u0442\u0430 \u043f\u043e \u043d\u0435\u043c\u0443","a7988824":"# Import","22428be0":"![](https:\/\/sibur.ai-community.com\/files\/uploads\/f010c0b80417654dd0bb18981dd36088.png)","901cead3":"# TARGET","31cf14a5":"\u041e\u0442 \u043d\u0435\u0433\u043e \u0442\u043e \u043c\u044b \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b \u0437\u0430 \u043f\u0440\u043e\u0448\u043b\u044b\u0439 \u043c\u0435\u0441\u044f\u0446.\n\u0414\u0430, \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u0442\u0430\u043a \u0442\u043e\u0447\u043d\u043e, \u043d\u043e \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0446\u0435\u043d\u0443.\n\n> \u041a\u0441\u0442\u0430\u0442\u0438 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 (\u0433\u0434\u0435 \u0446\u0435\u043d\u0430 \u0437\u0430 \u043f\u0440\u043e\u0448\u043b\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430) \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0442\u043e\u0447\u043d\u0435\u0435. ","e9a0d634":"\u041f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0432 \u0432\u043e\u0442 \u044d\u0442\u043e:","d6c4635b":"## Indicators","3c5a28c1":"\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0430\u0440\u0433\u0435\u0442: \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c\u0443. \n\u041e\u0431\u0443\u0447\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u0434\u0432\u0443\u043c \u0442\u0430\u0440\u0433\u0435\u0442\u0430\u043c, \u043c\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u044f \u043d\u0430\u0448\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044f\u043c.","851d09da":"\u0414\u0430\u043d\u043d\u044b\u0439 \u0432\u0438\u0434 \u043f\u0440\u0438\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0449\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u0438 \u043d\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043a \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0446\u0435\u043d\u0435. \u041d\u043e \u0443 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0435\u0441\u0442\u044c \u043e\u0434\u0438\u043d \u043c\u0438\u043d\u0443\u0441, **\u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0437\u043d\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u0446\u0435\u043d\u044b, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e**. \u0410 \u0432 \u0442\u0435\u0441\u0442\u0435 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u0440\u044f\u0434 \u0442\u0430\u0440\u0433\u0435\u0442\u0430 \u043d\u0435 \u0434\u0430\u043d.    \n> \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435, \u0442\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0437\u043d\u0430\u0435\u0448\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b \u0437\u0430 \u043f\u0440\u043e\u0448\u043b\u044b\u0439 \u043c\u0435\u0441\u044f\u0446. \u041d\u043e \u044f \u043f\u0440\u0435\u043a\u0440\u0430\u0441\u043d\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u044e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u043e\u0447\u0435\u043c\u0443 \u043e\u043d\u0438 \u043d\u0435 \u0434\u0430\u043b\u0438 \u0434\u0430\u043d\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0432 \u0442\u0435\u0441\u0442\u0435.\u00a0  \n\n\u041f\u043e \u044d\u0442\u043e\u043c\u0443, \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0431\u0440\u0430\u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u044f **\u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043b \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \"\u0445\u043e\u0434\u0438\u0442\" \u043e\u0447\u0435\u043d\u044c \u0431\u043b\u0438\u0437\u043a\u043e \u0441  \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c**.\n","7b2963bd":"## DF to pct_change\n\u0412\u0410\u0416\u041d\u042b\u0419 \u041c\u041e\u041c\u0415\u041d\u0422!   \n##### \u041f\u0440\u0438\u043e\u0431\u0437\u0430\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043e\u0442 \u043f\u0440\u043e\u0448\u043b\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\n\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u043c \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435, \u0430 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 - \u043d\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043a \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e   \n\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0439 \u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.pct_change.html"}}