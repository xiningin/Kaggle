{"cell_type":{"0f3286fd":"code","3dcd2e4c":"code","417076c3":"code","3e8a3e74":"code","9023d343":"code","fb1bdac7":"code","7c28355a":"code","b4a947f1":"code","01e401ec":"code","25789180":"code","f05134ea":"code","fae8ddd0":"code","a37f9a21":"code","71995eab":"code","af18a13b":"code","df9f53be":"code","744bc118":"code","a4846a8d":"code","8a11c0bc":"code","0dc106ae":"code","111206b9":"code","7df86cce":"code","43ea07e5":"code","9bea37e9":"code","51fb4981":"code","24600496":"code","04dad136":"code","dcbb620a":"code","b0c3a921":"code","e543f15e":"code","86709e5b":"code","fc7c17cc":"code","779f4bbe":"code","eb4a6c8b":"code","e2c488db":"code","674b63d2":"code","d57f15f7":"code","10440b7c":"code","00d9aeb9":"code","956b460d":"markdown","fb20af4e":"markdown","55c893dc":"markdown","5d94fa46":"markdown","afab231c":"markdown","09825f52":"markdown","6d32053f":"markdown","532e22c0":"markdown","a2b590b6":"markdown","50153601":"markdown","db895ab0":"markdown","37dd7626":"markdown","9b19d96b":"markdown","216cd149":"markdown","2223cc00":"markdown","3756736a":"markdown","5ffe0092":"markdown","aca689be":"markdown","958a7424":"markdown","2098832c":"markdown","b7e09094":"markdown","13be375e":"markdown","fff9cb41":"markdown","2aced978":"markdown","3c6bb967":"markdown","be508324":"markdown","f92cb4ee":"markdown","d17e3cac":"markdown","ba8e9a07":"markdown","ea49e52d":"markdown","4198645c":"markdown","afaa7942":"markdown","25c558f6":"markdown","e83696ff":"markdown","cd42a1a3":"markdown"},"source":{"0f3286fd":"var1 = 10 # integer = int\nay = \"temmuz\"\nvar3 = 10.3 # double (float)\n\ns = \"bugun gunlerden pazartesi\"\nvariable_type = type(s)   # str = string\nprint(variable_type)","3dcd2e4c":"\ndef benim_ilk_func(a,b):   \n    \"\"\"\n    bu benim ilk denemem\n    parametre: \n    return: \n    \"\"\"\n    output = (((a+b)*50)\/100.0)*a\/b\n    return output\n\nprint(benim_ilk_func(20,50))","417076c3":"# %% \n# default f: cemberin cevre uzunlugu = 2*pi*r\ndef cember_cevresi_hesapla(r,pi=3.14):\n    \"\"\"\n    cember cevresi hesapla\n    input(parametre): r,pi\n    output = cemberin cevresi\n    \"\"\"\n    output = 2*pi*r\n    return output\n\n# flexible\ndef hesapla(boy,kilo,*args):\n    print(args)\n    output = (boy+kilo)*args[0]\n    return output\n\nprint(cember_cevresi_hesapla(5))\nprint(hesapla(5,5,10,20,30,40))","3e8a3e74":"\ndef hesapla(x):\n    return x*x\nprint(hesapla(3))\n\nsonuc2 = lambda x: x*x\nprint(sonuc2(3))","9023d343":"\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())","fb1bdac7":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","7c28355a":"liste = [1,2,3,4,5,6]\nprint(type(liste))\n\nliste_str = [\"ptesi\",\"sali\",\"cars\"]\nprint(type(liste_str))\n\nprint(liste[1])\nprint(liste[-1])\nprint(liste[0:3])\n\nliste.append(7)\nprint(liste)\nliste.remove(7)\nprint(liste)\nliste.reverse()\nprint(liste)\n\nliste2 = [1,5,4,3,6,7,2]\nliste2.sort()\nprint(liste2)\n\nstring_int_liste = [1,2,3,\"aa\",\"bb\"]","b4a947f1":"\nt = (1,2,3,3,4,5,6)\n\nprint(t.count(5))\nprint(t.index(3))","01e401ec":"\ndef deneme():\n    dictionary = {\"ali\":32,\"veli\":45,\"ayse\":13}\n    # ali ,veli ,ayse = keys\n# 32,45,13 = values\n    return dictionary\n\ndic = deneme()\nprint(dic)\n\ndictionary = {'spain' : 'madrid','usa' : 'vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())\ndictionary['spain'] = \"barcelona\"    # update existing entry\nprint(dictionary)\ndictionary['france'] = \"paris\"       # Add new entry\nprint(dictionary)\ndel dictionary['spain']              # remove entry with key 'spain'\nprint(dictionary)\nprint('france' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)","25789180":"# if else statement\n\nvar1 = 10\nvar2 = 20\n\nif(var1 > var2):\n    print(\"var1 buyuktur var2\")\nelif(var1 == var2):\n    print(\"var and var2 esitler\")\nelse:\n    print(\"var1 kucuktur var2\")\n\n\nliste = [1,2,3,4,5]\n\nvalue = 3\nif value in liste:\n    print(\"evet {} degeri listenin icinde\".format(value))\nelse:\n    print(\"hayir\")\n\ndictionary = {\"ali\":32,\"veli\":45,\"ayse\":13}\nkeys = dictionary.keys()\n\nif \"veli\" in keys:\n    print(\"evet\")\nelse:\n    print(\"hayir\")","f05134ea":"# for loop\nfor each in range(1,3):\n    print(each)\n    \nfor each in \"ank ist\":\n    print(each)\n    \nfor each in \"ank ist\".split(): \n    print(each)\n    \nliste = [1,4,5,6,8,3,3,4,67]\n \nprint(sum(liste))  \n\ncount = 0\nfor each in liste:\n    count = count + each\n    print(count)\n\n# while loop\ni = 0\nwhile(i <4):\n    print(i)\n    i = i + 1","fae8ddd0":"class Calisan:\n    zam_orani = 1.8\n    counter = 0\n    def __init__(self,isim,soyisim,maas): # constructor\n        self.isim = isim\n        self.soyisim = soyisim\n        self.maas = maas\n        self.email = isim+soyisim+\"@asd.com\"\n        Calisan.counter = Calisan.counter + 1\n    \n    def giveNameSurname(self):\n        return self.isim +\" \" +self.soyisim\n        \n    def zam_yap(self):\n        self.maas = self.maas + self.maas*self.zam_orani\n# class variable\ncalisan1 = Calisan(\"ali\", \"veli\",100) \nprint(\"giveNameSurname: \",calisan1.giveNameSurname())\nprint(\"maas: \",calisan1.maas)\ncalisan1.zam_yap()\nprint(\"yeni maas: \",calisan1.maas)\n\n#  class example\ncalisan2 = Calisan(\"ayse\", \"hatice\",200) \ncalisan3 = Calisan(\"ayse\", \"yelda\",600) \nliste  = [calisan1,calisan2,calisan3]\n\nmaxi_maas = -1\nindex = -1\nfor each in liste:\n    if(each.maas>maxi_maas):\n        maxi_maas = each.maas\n        index = each\n        \nprint(maxi_maas)\nprint(index.giveNameSurname())","a37f9a21":"# importing\nimport numpy as np\n# numpy basics\narray = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])  # 1*15 vector\nprint(array.shape)\na = array.reshape(-1,1)\nprint(\"shape: \",a.shape)\nprint(\"dimension: \", a.ndim)\nprint(\"data type: \",a.dtype.name)\nprint(\"size: \",a.size)\nprint(\"type: \",type(a))\n\narray1 = np.array([[1,2,3,4],[5,6,7,8],[9,8,7,5]])\nprint(array1)\nzeros = np.zeros((3,4))\nzeros[0,0] = 5\nprint(zeros)\n\nprint(np.ones((3,4)))\nprint(np.empty((2,3)))\n\na = np.arange(10,50,5) # 10 dan 50 ye 5er 5 er art\u0131r\nprint(a)\na = np.linspace(10,50,5) #10 50 ye 5 tane yerle\u015ftir\nprint(a)","71995eab":"\na = np.array([1,2,3])\nb = np.array([4,5,6])\n\nprint(a+b)\nprint(a-b)\nprint(a**2)\n\na = np.array([[1,2,3],[4,5,6]])\nb = np.array([[1,2,3],[4,5,6]])\n# element wise prodcut\nprint(a*b)\n# matrix prodcut\nprint(a.dot(b.T))\n\na = np.random.random((2,2)) # 2 2 l\u0131k 0-1 aras\u0131nda say\u0131 uretiyor\nprint(a.sum())\nprint(a.max())\nprint(a.min())\nprint(a.sum(axis=0)) # sutunlar\u0131 topla\nprint(a.sum(axis=1)) # sat\u0131rlar\u0131 topla\nprint(np.sqrt(a))\nprint(np.square(a)) # a**2\nprint(np.add(a,a))","af18a13b":"\nimport numpy as np\narray = np.array([1,2,3,4,5,6,7])   #  vector dimension = 1\nprint(array[0])\nprint(array[0:4])\n\nreverse_array = array[::-1]\nprint(reverse_array)\n\narray1 = np.array([[1,2,3,4,5],[6,7,8,9,10]])\nprint(array1[1,1]) # 1 sat\u0131r 1 sutun 7 \nprint(array1[:,1]) # tum sat\u0131r 1 sutun 2,7 \nprint(array1[1,1:4]) # 1 sat\u0131r 1-4 sutun 7-8-9\nprint(array1[-1,:]) #son sat\u0131r\u0131n tum sutunlar\u0131\nprint(array1[:,-1]) # tum sat\u0131rlar\u0131n son sutunu 5,10","df9f53be":"\narray = np.array([[1,2,3],[4,5,6],[7,8,9]])\n\n# flatten\narray1 = array.ravel() # duz hale get\u0131r\u0131ld\u0131\nprint(array1)\narray2 = array1.reshape(3,3) # matr\u0131se cev\u0131r\nprint(array2)\n\n# %% stacking arrays\narray1 = np.array([[1,2],[3,4]])\narray2 = np.array([[-1,-2],[-3,-4]])\n\n# veritical\n#array([[1, 2],\n#       [3, 4]])\n#array([[-1, -2],\n#       [-3, -4]])\narray3 = np.vstack((array1,array2))\nprint(array3)\n# horizontal\n#array([[1, 2],[-1, -2],\n#       [3, 4]],[-3, -4]]\narray4 = np.hstack((array1,array2))\nprint(array4)","744bc118":"\nliste = [1,2,3,4]   # list\narray = np.array(liste) #np.array\nliste2 = list(array) # list\n\na = np.array([1,2,3])\nb = a\nb[0] = 5\nprint(b[0])\nprint(a[0]) # a da deg\u0131st\u0131\n\nd =  np.array([1,2,3])\ne = d.copy()\nd[0] = 5\nprint(d[0])\nprint(e[0]) # e da deg\u0131smedi","a4846a8d":"import pandas as pd\n\ndictionary = {\"NAME\":[\"ali\",\"veli\",\"kenan\",\"hilal\",\"ayse\",\"evren\",\"isim1\",\"isim2\",\"isim3\"],\n              \"AGE\":[15,16,17,33,45,66,70,70,70],\n              \"MAAS\": [100,150,240,350,110,220,300,300,300]} \n\ndataFrame1 = pd.DataFrame(dictionary)\n\nprint(dataFrame1.head()) # ilk 5 k\u0131s\u0131m, i\u00e7erindeki g\u00f6rmek i\u00e7in\nprint(dataFrame1.tail()) # sondaki 5 tane","8a11c0bc":"# pandas basic method\nprint(dataFrame1.columns)\nprint(\"------\")\nprint(dataFrame1.info())\nprint(\"------\")\nprint(dataFrame1.dtypes)\nprint(\"------\")\nprint(dataFrame1.describe())  # numeric feature = columns (age,maas)","0dc106ae":"\nprint(dataFrame1[\"AGE\"])\nprint(dataFrame1.AGE)\n\ndictionary = {\"NAME\":[\"ali\",\"veli\",\"kenan\",],\n              \"AGE\":[15,16,17,],\n              \"MAAS\": [100,150,240]} \n\ndataFrame1 = pd.DataFrame(dictionary)\ndataFrame1[\"yeni_feature\"] = [-1,-2,-3]\nprint(\"---1---\")\nprint(dataFrame1.loc[:, \"AGE\"])\nprint(\"---2---\")\nprint(dataFrame1.loc[:1, \"AGE\"])\nprint(\"---3---\")\nprint(dataFrame1.loc[:1, \"AGE\":\"NAME\"])\nprint(\"---4---\")\nprint(dataFrame1.loc[:1, [\"AGE\",\"NAME\"]])\nprint(\"---5---\")\nprint(dataFrame1.loc[::-1,:]) #ters yazd\u0131\nprint(\"---6---\")\nprint(dataFrame1.loc[:,:\"NAME\"])\nprint(\"---7---\")\nprint(dataFrame1.loc[:,\"NAME\"])\nprint(\"---8---\")\nprint(dataFrame1.iloc[:,2]) #i integer location name yer\u0131ne sutun \u0131ndex\u0131 verd\u0131k","111206b9":"\ndictionary = {\"NAME\":[\"ali\",\"veli\",\"kenan\",\"hilal\",\"ayse\",\"evren\"],\n              \"AGE\":[15,16,17,33,45,66],\n              \"MAAS\": [100,150,240,350,110,220]} \ndataFrame1 = pd.DataFrame(dictionary)\nfiltre1 = dataFrame1.MAAS > 200\nprint(filtre1)\nfiltrelenmis_data = dataFrame1[filtre1]\nprint(filtrelenmis_data)\nfiltre2 = dataFrame1.AGE <20\ndataFrame1[filtre1 & filtre2]\nprint(dataFrame1[dataFrame1.AGE > 60])","7df86cce":"\nimport numpy as np\ndataFrame1 = pd.DataFrame(dictionary)\nortalama_maas = dataFrame1.MAAS.mean()\n# ortalama_maas_np = np.mean(dataFrame1.MAAS)\ndataFrame1[\"maas_seviyesi\"] = [\"dusuk\" if ortalama_maas > each else \"yuksek\" for each in dataFrame1.MAAS]\nprint(dataFrame1)\nprint(dataFrame1.columns)\ndataFrame1.columns = [ each.lower() for each in dataFrame1.columns] \nprint(dataFrame1.columns)\ndataFrame1.columns = [each.split()[0]+\"_\"+each.split()[1] if(len(each.split())>1) else each for each in dataFrame1.columns]\nprint(dataFrame1) # bosluklu sutun ad\u0131 varsa _ ekled\u0131 ama b\u0131z\u0131m ver\u0131ler zaten bosluksuz","43ea07e5":"\ndataFrame1[\"yeni_feature\"] = [-1,-2,-3,-4,-5,-6]\ndataFrame1.drop([\"yeni_feature\"],axis=1,inplace = True)\n# dataFrame1 = dataFrame1.drop([\"yeni_feature\"],axis=1)\ndata1 = dataFrame1.head()\nprint(data1)\ndata2 = dataFrame1.tail()\nprint(data2)\n# vertical\ndata_concat = pd.concat([data1,data2],axis=0) #dusey b\u0131rlest\u0131rd\u0131 yan\u0131 ust uste\nprint(data_concat)\n# horizontal\nmaas = dataFrame1.maas\nage = dataFrame1.age\ndata_h_concat = pd.concat([maas,age],axis=1) #yatay b\u0131rlest\u0131rd\u0131 yan\u0131 yanyana\nprint(data_h_concat)","9bea37e9":"\ndef multiply(age):\n    return age*2\ndataFrame1[\"apply_metodu\"] = dataFrame1.age.apply(multiply)\ndataFrame1[\"list_comp\"] = [ each*2 for each in dataFrame1.age]\nprint(dataFrame1)","51fb4981":"\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","24600496":"\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)\nprint(\"-----\")\nun_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","04dad136":"\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)\n# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","dcbb620a":"import pandas as pd\ndata = pd.read_csv(\"..\/input\/Iris.csv\")\nprint(data.columns)","b0c3a921":"print(data.Species.unique())","e543f15e":"data.info()","86709e5b":"data.describe()","fc7c17cc":"df1 = data.drop([\"Id\"],axis=1)\ndf1.corr()","779f4bbe":"setosa = data[data.Species == \"Iris-setosa\"]\nversicolor = data[data.Species == \"Iris-versicolor\"]\nprint(setosa.describe())\nprint(versicolor.describe())","eb4a6c8b":"import matplotlib.pyplot as plt\n\nsetosa = data[data.Species == \"Iris-setosa\"]\nversicolor = data[data.Species == \"Iris-versicolor\"]\nvirginica = data[data.Species == \"Iris-virginica\"]\n\nplt.plot(setosa.Id,setosa.PetalLengthCm,color=\"red\",label= \"setosa\")\nplt.plot(versicolor.Id,versicolor.PetalLengthCm,color=\"green\",label= \"versicolor\")\nplt.plot(virginica.Id,virginica.PetalLengthCm,color=\"blue\",label= \"virginica\")\nplt.legend()\nplt.xlabel(\"Id\")\nplt.ylabel(\"PetalLengthCm\")\nplt.show()\n\n# clf() = cleans it up again you can start a fresh\n#plt.clf()","e2c488db":"\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.SepalLengthCm.plot(kind = 'line', color = 'g',label = 'SepalLengthCm',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.PetalLengthCm.plot(color = 'r',label = 'PetalLengthCm',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","674b63d2":"\nsetosa = data[data.Species == \"Iris-setosa\"]\nversicolor = data[data.Species == \"Iris-versicolor\"]\nvirginica = data[data.Species == \"Iris-virginica\"]\n\nplt.scatter(setosa.PetalLengthCm,setosa.PetalWidthCm,color=\"red\",label=\"setosa\")\nplt.scatter(versicolor.PetalLengthCm,versicolor.PetalWidthCm,color=\"green\",label=\"versicolor\")\nplt.scatter(virginica.PetalLengthCm,virginica.PetalWidthCm,color=\"blue\",label=\"virginica\")\nplt.legend()\nplt.xlabel(\"PetalLengthCm\")\nplt.ylabel(\"PetalWidthCm\")\nplt.title(\"scatter plot\")\nplt.show()","d57f15f7":"\nplt.hist(setosa.PetalLengthCm,bins= 10)\nplt.xlabel(\"PetalLengthCm values\")\nplt.ylabel(\"frekans\")\nplt.title(\"hist\")\nplt.show()","10440b7c":"\nimport numpy as np\n\nx = np.array([1,2,3,4,5,6,7])\na = [\"turkey\",\"usa\",\"a\",\"b\",\"v\",\"d\",\"s\"]\ny = x*2+5\n\nplt.bar(a,y)\nplt.title(\"bar plot\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.show()","00d9aeb9":"\ndf1 = data.drop([\"Id\"],axis=1)\ndf1.plot(grid=True,alpha= 0.9,subplots = True)\nplt.show()\n\nsetosa = data[data.Species == \"Iris-setosa\"]\nversicolor = data[data.Species == \"Iris-versicolor\"]\nvirginica = data[data.Species == \"Iris-virginica\"]\n\nplt.subplot(2,1,1)\nplt.plot(setosa.Id,setosa.PetalLengthCm,color=\"red\",label= \"setosa\")\nplt.ylabel(\"setosa -PetalLengthCm\")\nplt.subplot(2,1,2)\nplt.plot(versicolor.Id,versicolor.PetalLengthCm,color=\"green\",label= \"versicolor\")\nplt.ylabel(\"versicolor -PetalLengthCm\")\nplt.show()\n","956b460d":"\n<a class=\"anchor\" id=\"10.\"><\/a> \n## dictionary","fb20af4e":"\n<a class=\"anchor\" id=\"18.\"><\/a> \n## shape manipulation","55c893dc":"\n<a class=\"anchor\" id=\"17.\"><\/a> \n## indexing and slicing","5d94fa46":"\n<a class=\"anchor\" id=\"5.\"><\/a> \n## lambda function","afab231c":"\n<a class=\"anchor\" id=\"9.\"><\/a> \n## tuple","09825f52":"\n<a class=\"anchor\" id=\"14.\"><\/a> \n## class","6d32053f":"\n<a class=\"anchor\" id=\"27.\"><\/a> \n## zip example","532e22c0":"\n<a class=\"anchor\" id=\"31.\"><\/a> \n## scatter plot","a2b590b6":"\n      \n<a class=\"anchor\" id=\"16.\"><\/a> \n## basic operations","50153601":"      \n<a class=\"anchor\" id=\"19.\"><\/a> \n## convert and copy","db895ab0":"\n     \n<a class=\"anchor\" id=\"30.\"><\/a> \n## line Plot example","37dd7626":"\n<a class=\"anchor\" id=\"24.\"><\/a> \n## drop and concatenating","9b19d96b":"\n     \n<a class=\"anchor\" id=\"28.\"><\/a> \n## example of list comprehension","216cd149":"\n    \n<a class=\"anchor\" id=\"4.\"><\/a> \n## default ve flexible functions","2223cc00":"\n<a class=\"anchor\" id=\"20.\"><\/a> \n# 4.Pandas","3756736a":"\n<a class=\"anchor\" id=\"13.\"><\/a> \n# 2.Object Oriented Programming","5ffe0092":"\n<a class=\"anchor\" id=\"11.\"><\/a> \n## conditionals","aca689be":"\n<a class=\"anchor\" id=\"23.\"><\/a> \n## list comprehension","958a7424":"\n<a class=\"anchor\" id=\"21.\"><\/a> \n## indexing and slicing","2098832c":"\n<a class=\"anchor\" id=\"12.\"><\/a> \n## loops","b7e09094":"<a class=\"anchor\" id=\"2.\"><\/a> \n## variable ","13be375e":"\n<a class=\"anchor\" id=\"3.\"><\/a> \n## user defined functions ","fff9cb41":"\n<a class=\"anchor\" id=\"33.\"><\/a> \n## bar plot","2aced978":"<a class=\"anchor\" id=\"6.\"><\/a> \n## nested function","3c6bb967":"      \n<a class=\"anchor\" id=\"26.\"><\/a> \n## iteration example","be508324":"\n<a class=\"anchor\" id=\"8.\"><\/a> \n## list","f92cb4ee":"\nIt is the kernel that I have tried and compiled from the courses of [DATAI Team](https:\/\/www.udemy.com\/user\/datai-team\/) (Language of the courses is Turkish: [Python: S\u0131f\u0131rdan Uzmanl\u0131\u011fa Programlama (1)](https:\/\/www.udemy.com\/python-sfrdan-uzmanlga-programlama-1\/)), which is [Grandmaster on Kaggle](https:\/\/www.kaggle.com\/kanncaa1) and has more than 15 courses on Udemy.\n\n\n# **Content**\n\n \n1. [Python Basics](#1.)\n   * [variable](#2.)\n   * [user defined functions](#3.)\n   * [default ve flexible functions](#4.)\n   * [lambda function](#5.)\n   * [nested function](#6.)\n   * [anonymous function](#7.)\n   * [list](#8.)\n   * [tuple](#9.)\n   * [dictionary](#10.)\n   * [conditionals](#11.)\n   * [loops](#12.)\n1. [Object Oriented Programming](#13.)\n    * [class](#14.)\n1. [Numpy](#15.)\n    * [basic operations](#16.)\n    * [indexing and slicing](#17.)\n    * [shape manipulation](#18.)\n    * [convert and copy](#19.)\n1. [Pandas](#20.)\n    * [indexing and slicing](#21.)\n    * [filtering](#22.)\n    * [list comprehension](#23.)\n    * [drop and concatenating](#24.)\n    * [transforming data](#25.)\n    * [iteration example](#26.)\n    * [zip example](#27.)\n    * [example of list comprehension](#28.)\n1. [Visualization with Matplotlib](#29.)\n    * [line Plot example](#30.)\n    * [scatter plot](#31.)\n    * [histogram](#32.)\n    * [bar plot](#33.)\n    * [subplots](#34.)\n    \n\n","d17e3cac":"\n<a class=\"anchor\" id=\"29.\"><\/a> \n# 5.Visualization with Matplotlib","ba8e9a07":"\n<a class=\"anchor\" id=\"7.\"><\/a> \n## anonymous function","ea49e52d":"    \n<a class=\"anchor\" id=\"34.\"><\/a> \n## subplots","4198645c":"\n<a class=\"anchor\" id=\"25.\"><\/a> \n## transforming data","afaa7942":"      \n<a class=\"anchor\" id=\"22.\"><\/a> \n## filtering","25c558f6":"\n      \n<a class=\"anchor\" id=\"32.\"><\/a> \n## histogram","e83696ff":"\n<a class=\"anchor\" id=\"15.\"><\/a> \n# 3.Numpy","cd42a1a3":"\n<a class=\"anchor\" id=\"1.\"><\/a> \n# 1.Python Basics"}}