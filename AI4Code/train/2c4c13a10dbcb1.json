{"cell_type":{"10294203":"code","cd791615":"code","7562f9c7":"code","d7b497d5":"code","531af77d":"code","155b12de":"code","6ea9ebb3":"code","2994730c":"code","927f1b28":"code","ba465b68":"code","6686b41a":"code","2b518b2b":"code","d44abac0":"code","9500aa37":"code","2138d13f":"code","710d8036":"code","052ca7c5":"code","4700703f":"code","e26af155":"code","49cdeefa":"code","90026427":"code","dc79b014":"code","d1e3ca2c":"code","38218827":"code","d184ae7b":"code","65547acf":"code","7bf69ba6":"code","57b5de2d":"code","14da00c1":"code","f4697bf1":"code","545aeebb":"code","114aa689":"code","90095f5f":"code","7934a820":"code","4e9931fd":"code","4253f674":"markdown","4281738c":"markdown","b20f90bd":"markdown","ed49b81d":"markdown","3c701e37":"markdown","1a2ebafd":"markdown","02426a32":"markdown","30ea6628":"markdown","9e47385e":"markdown","df5926d3":"markdown","f16d14e8":"markdown","e66c3292":"markdown","d2dcf76a":"markdown","99218733":"markdown","b96eddc4":"markdown","a044ab36":"markdown","da78d074":"markdown","fb7d4fb8":"markdown","dd1c8d48":"markdown","ee4ae39b":"markdown","450a7bbd":"markdown","547d1e15":"markdown","41dc368f":"markdown","64608122":"markdown","128be2f5":"markdown","e169f8a9":"markdown","1fcbf672":"markdown","90999c81":"markdown","3142ac5c":"markdown","41dd4a93":"markdown","94d76f84":"markdown","3b428707":"markdown","c4dd22cf":"markdown","09735a9c":"markdown","43841712":"markdown","cce346d8":"markdown","7a567e31":"markdown","27e27823":"markdown","bb084c3b":"markdown","536ef301":"markdown","25b290d2":"markdown","1a3fc388":"markdown"},"source":{"10294203":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom tensorflow.python import keras\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, Conv2D, Dropout, MaxPooling2D\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.utils import plot_model\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline \nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)","cd791615":"IMG_ROWS = 28\nIMG_COLS = 28\nNUM_CLASSES = 10\nTEST_SIZE = 0.2\nRANDOM_STATE = 2018\n#Model\nNO_EPOCHS = 50\nBATCH_SIZE = 128\n\nIS_LOCAL = False\n\nimport os\n\nif(IS_LOCAL):\n    PATH=\"..\/input\/fashionmnist\/\"\nelse:\n    PATH=\"..\/input\/\"\nprint(os.listdir(PATH))","7562f9c7":"train_file = PATH+\"fashion-mnist_train.csv\"\ntest_file  = PATH+\"fashion-mnist_test.csv\"\n\ntrain_data = pd.read_csv(train_file)\ntest_data = pd.read_csv(test_file)","d7b497d5":"print(\"Fashion MNIST train -  rows:\",train_data.shape[0],\" columns:\", train_data.shape[1])\nprint(\"Fashion MNIST test -  rows:\",test_data.shape[0],\" columns:\", test_data.shape[1])","531af77d":"# Create a dictionary for each type of label \nlabels = {0 : \"T-shirt\/top\", 1: \"Trouser\", 2: \"Pullover\", 3: \"Dress\", 4: \"Coat\",\n          5: \"Sandal\", 6: \"Shirt\", 7: \"Sneaker\", 8: \"Bag\", 9: \"Ankle Boot\"}\n\ndef get_classes_distribution(data):\n    # Get the count for each label\n    label_counts = data[\"label\"].value_counts()\n\n    # Get total number of samples\n    total_samples = len(data)\n\n\n    # Count the number of items in each class\n    for i in range(len(label_counts)):\n        label = labels[label_counts.index[i]]\n        count = label_counts.values[i]\n        percent = (count \/ total_samples) * 100\n        print(\"{:<20s}:   {} or {}%\".format(label, count, percent))\n\nget_classes_distribution(train_data)","155b12de":"def plot_label_per_class(data):\n    f, ax = plt.subplots(1,1, figsize=(12,4))\n    g = sns.countplot(data.label, order = data[\"label\"].value_counts().index)\n    g.set_title(\"Number of labels for each class\")\n\n    for p, label in zip(g.patches, data[\"label\"].value_counts().index):\n        g.annotate(labels[label], (p.get_x(), p.get_height()+0.1))\n    plt.show()  \n    \nplot_label_per_class(train_data)","6ea9ebb3":"get_classes_distribution(test_data)","2994730c":"plot_label_per_class(test_data)","927f1b28":"def sample_images_data(data):\n    # An empty list to collect some samples\n    sample_images = []\n    sample_labels = []\n\n    # Iterate over the keys of the labels dictionary defined in the above cell\n    for k in labels.keys():\n        # Get four samples for each category\n        samples = data[data[\"label\"] == k].head(4)\n        # Append the samples to the samples list\n        for j, s in enumerate(samples.values):\n            # First column contain labels, hence index should start from 1\n            img = np.array(samples.iloc[j, 1:]).reshape(IMG_ROWS,IMG_COLS)\n            sample_images.append(img)\n            sample_labels.append(samples.iloc[j, 0])\n\n    print(\"Total number of sample images to plot: \", len(sample_images))\n    return sample_images, sample_labels\n\ntrain_sample_images, train_sample_labels = sample_images_data(train_data)","ba465b68":"def plot_sample_images(data_sample_images,data_sample_labels,cmap=\"Blues\"):\n    # Plot the sample images now\n    f, ax = plt.subplots(5,8, figsize=(16,10))\n\n    for i, img in enumerate(data_sample_images):\n        ax[i\/\/8, i%8].imshow(img, cmap=cmap)\n        ax[i\/\/8, i%8].axis('off')\n        ax[i\/\/8, i%8].set_title(labels[data_sample_labels[i]])\n    plt.show()    \n    \nplot_sample_images(train_sample_images,train_sample_labels, \"Greens\")","6686b41a":"test_sample_images, test_sample_labels = sample_images_data(test_data)\nplot_sample_images(test_sample_images,test_sample_labels)","2b518b2b":"# data preprocessing\ndef data_preprocessing(raw):\n    out_y = keras.utils.to_categorical(raw.label, NUM_CLASSES)\n    num_images = raw.shape[0]\n    x_as_array = raw.values[:,1:]\n    x_shaped_array = x_as_array.reshape(num_images, IMG_ROWS, IMG_COLS, 1)\n    out_x = x_shaped_array \/ 255\n    return out_x, out_y","d44abac0":"# prepare the data\nX, y = data_preprocessing(train_data)\nX_test, y_test = data_preprocessing(test_data)","9500aa37":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=TEST_SIZE, random_state=RANDOM_STATE)","2138d13f":"print(\"Fashion MNIST train -  rows:\",X_train.shape[0],\" columns:\", X_train.shape[1:4])\nprint(\"Fashion MNIST valid -  rows:\",X_val.shape[0],\" columns:\", X_val.shape[1:4])\nprint(\"Fashion MNIST test -  rows:\",X_test.shape[0],\" columns:\", X_test.shape[1:4])","710d8036":"def plot_count_per_class(yd):\n    ydf = pd.DataFrame(yd)\n    f, ax = plt.subplots(1,1, figsize=(12,4))\n    g = sns.countplot(ydf[0], order = np.arange(0,10))\n    g.set_title(\"Number of items for each class\")\n    g.set_xlabel(\"Category\")\n    \n    for p, label in zip(g.patches, np.arange(0,10)):\n        g.annotate(labels[label], (p.get_x(), p.get_height()+0.1))\n        \n    plt.show()  \n\ndef get_count_per_class(yd):\n    ydf = pd.DataFrame(yd)\n    # Get the count for each label\n    label_counts = ydf[0].value_counts()\n\n    # Get total number of samples\n    total_samples = len(yd)\n\n\n    # Count the number of items in each class\n    for i in range(len(label_counts)):\n        label = labels[label_counts.index[i]]\n        count = label_counts.values[i]\n        percent = (count \/ total_samples) * 100\n        print(\"{:<20s}:   {} or {}%\".format(label, count, percent))\n    \nplot_count_per_class(np.argmax(y_train,axis=1))\nget_count_per_class(np.argmax(y_train,axis=1))","052ca7c5":"plot_count_per_class(np.argmax(y_val,axis=1))\nget_count_per_class(np.argmax(y_val,axis=1))","4700703f":"# Model\nmodel = Sequential()\n# Add convolution 2D\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 kernel_initializer='he_normal',\n                 input_shape=(IMG_ROWS, IMG_COLS, 1)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(64, \n                 kernel_size=(3, 3), \n                 activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(NUM_CLASSES, activation='softmax'))\n\n\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer='adam',\n              metrics=['accuracy'])","e26af155":"model.summary()","49cdeefa":"plot_model(model, to_file='model.png')\nSVG(model_to_dot(model).create(prog='dot', format='svg'))","90026427":"train_model = model.fit(X_train, y_train,\n                  batch_size=BATCH_SIZE,\n                  epochs=NO_EPOCHS,\n                  verbose=1,\n                  validation_data=(X_val, y_val))","dc79b014":"score = model.evaluate(X_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","d1e3ca2c":"def create_trace(x,y,ylabel,color):\n        trace = go.Scatter(\n            x = x,y = y,\n            name=ylabel,\n            marker=dict(color=color),\n            mode = \"markers+lines\",\n            text=x\n        )\n        return trace\n    \ndef plot_accuracy_and_loss(train_model):\n    hist = train_model.history\n    acc = hist['acc']\n    val_acc = hist['val_acc']\n    loss = hist['loss']\n    val_loss = hist['val_loss']\n    epochs = list(range(1,len(acc)+1))\n    \n    trace_ta = create_trace(epochs,acc,\"Training accuracy\", \"Green\")\n    trace_va = create_trace(epochs,val_acc,\"Validation accuracy\", \"Red\")\n    trace_tl = create_trace(epochs,loss,\"Training loss\", \"Blue\")\n    trace_vl = create_trace(epochs,val_loss,\"Validation loss\", \"Magenta\")\n   \n    fig = tools.make_subplots(rows=1,cols=2, subplot_titles=('Training and validation accuracy',\n                                                             'Training and validation loss'))\n    fig.append_trace(trace_ta,1,1)\n    fig.append_trace(trace_va,1,1)\n    fig.append_trace(trace_tl,1,2)\n    fig.append_trace(trace_vl,1,2)\n    fig['layout']['xaxis'].update(title = 'Epoch')\n    fig['layout']['xaxis2'].update(title = 'Epoch')\n    fig['layout']['yaxis'].update(title = 'Accuracy', range=[0,1])\n    fig['layout']['yaxis2'].update(title = 'Loss', range=[0,1])\n\n    \n    iplot(fig, filename='accuracy-loss')\n\nplot_accuracy_and_loss(train_model)","38218827":"# Model\nmodel = Sequential()\n# Add convolution 2D\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 kernel_initializer='he_normal',\n                 input_shape=(IMG_ROWS, IMG_COLS, 1)))\nmodel.add(MaxPooling2D((2, 2)))\n# Add dropouts to the model\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, \n                 kernel_size=(3, 3), \n                 activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n# Add dropouts to the model\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\n# Add dropouts to the model\nmodel.add(Dropout(0.4))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\n# Add dropouts to the model\nmodel.add(Dropout(0.3))\nmodel.add(Dense(NUM_CLASSES, activation='softmax'))\n\n\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer='adam',\n              metrics=['accuracy'])","d184ae7b":"model.summary()","65547acf":"plot_model(model, to_file='model.png')\nSVG(model_to_dot(model).create(prog='dot', format='svg'))","7bf69ba6":"train_model = model.fit(X_train, y_train,\n                  batch_size=BATCH_SIZE,\n                  epochs=NO_EPOCHS,\n                  verbose=1,\n                  validation_data=(X_val, y_val))","57b5de2d":"plot_accuracy_and_loss(train_model)","14da00c1":"score = model.evaluate(X_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","f4697bf1":"#get the predictions for the test data\npredicted_classes = model.predict_classes(X_test)\n#get the indices to be plotted\ny_true = test_data.iloc[:, 0]","545aeebb":"p = predicted_classes[:10000]\ny = y_true[:10000]\ncorrect = np.nonzero(p==y)[0]\nincorrect = np.nonzero(p!=y)[0]","114aa689":"print(\"Correct predicted classes:\",correct.shape[0])\nprint(\"Incorrect predicted classes:\",incorrect.shape[0])","90095f5f":"target_names = [\"Class {} ({}) :\".format(i,labels[i]) for i in range(NUM_CLASSES)]\nprint(classification_report(y_true, predicted_classes, target_names=target_names))","7934a820":"def plot_images(data_index,cmap=\"Blues\"):\n    # Plot the sample images now\n    f, ax = plt.subplots(4,4, figsize=(15,15))\n\n    for i, indx in enumerate(data_index[:16]):\n        ax[i\/\/4, i%4].imshow(X_test[indx].reshape(IMG_ROWS,IMG_COLS), cmap=cmap)\n        ax[i\/\/4, i%4].axis('off')\n        ax[i\/\/4, i%4].set_title(\"True:{}  Pred:{}\".format(labels[y_true[indx]],labels[predicted_classes[indx]]))\n    plt.show()    \n    \nplot_images(correct, \"Greens\")","4e9931fd":"plot_images(incorrect, \"Reds\")","4253f674":"Let's also plot the model.","4281738c":"# <a id=\"1\">Introduction<\/a>  \n\n\n## Dataset\n\nFashion-MNIST is a dataset of Zalando's article images\u2014consisting of a training set of 60,000 examples and a test set of 10,000 examples. Each example is a 28x28 grayscale image, associated with a label from 10 classes. Zalando intends Fashion-MNIST to serve as a direct drop-in replacement for the original MNIST dataset for benchmarking machine learning algorithms. It shares the same image size and structure of training and testing splits.\n\n\n## Content\n\nEach image is 28 pixels in height and 28 pixels in width, for a total of 784 pixels in total.   \n\nEach pixel has a single pixel-value associated with it, indicating the lightness or darkness of that pixel, with higher numbers meaning darker. This pixel-value is an integer between 0 and 255.   \n\nThe training and test data sets have 785 columns.   \n\nThe first column consists of the class labels (see above), and represents the article of clothing. \n\nThe rest of 784 columns (1-785) contain the pixel-values of the associated image.","b20f90bd":"# <a id=\"5\">Model<\/a>\n\nWe start with preparing the model.","ed49b81d":"Let's check the class inbalance for the rsulted training set.","3c701e37":"![](http:\/\/)The dimmension of the original  train,  test set are as following:","1a2ebafd":"## <a id=\"53\">Validation accuracy and loss<\/a>\n\nLet's plot the train and validation accuracy and loss, from the train history.","02426a32":"Both the train and validation set are unbalanced with respect of distribution of classes. ","30ea6628":"## <a id=\"57\">Prediction accuracy with the new model<\/a>\n\nLet's re-evaluate the prediction accuracy with the new model.","9e47385e":"Let's now plot the images.   \nThe labels are shown above each image.","df5926d3":"The validation accuracy does not improve after few epochs and the validation loss is increasing after few epochs. This confirms our assumption that the model is overfitted. We will try to improve the model by adding Dropout layers.","f16d14e8":"# <a id=\"2\">Load packages<\/a>","e66c3292":"## Parameters","d2dcf76a":"And now let's run the new model.","99218733":"Let's also plot the model","b96eddc4":"### Run the model\n\nWe run the model with the training set. We are also using the validation set (a subset from the orginal training set) for validation.","a044ab36":"# <a id=\"7\">Conclusions<\/a>\n\nWith a complex sequential model with multiple convolution layers and 50 epochs for the training, we obtained an accuracy ~0.91 for test prediction.\nAfter investigating the validation accuracy and loss, we understood that the model is overfitting.   \nWe retrained the model with Dropout layers to the model to reduce overfitting.  \nWe confirmed the model improvement and with the same number of epochs for the training we obtained with the new model an accuracy of ~0.93 for test prediction. Only few classes are not correctly classified all the time, especially Class 6 (Shirt) and Class 2 (Pullover).","da78d074":"# <a id=\"8\">References<\/a>\n\n[1] Fashion MNIST, An MNIST-like dataset of 70,000 28x28 labeled fashion images, https:\/\/www.kaggle.com\/zalando-research\/fashionmnist  \n[2] DanB, CollinMoris, Deep Learning From Scratch, https:\/\/www.kaggle.com\/dansbecker\/deep-learning-from-scratch  \n[3] DanB, Dropout and Strides for Larger Models, https:\/\/www.kaggle.com\/dansbecker\/dropout-and-strides-for-larger-models  \n[4] BGO, CNN with Keras, https:\/\/www.kaggle.com\/bugraokcu\/cnn-with-keras    \n[5] NAIN, EagerFMINST, https:\/\/www.kaggle.com\/aakashnain\/eagerfmnist  \n[6] Why Dropounts prevent overfitting in Deep Neural Networks, https:\/\/medium.com\/@vivek.yadav\/why-dropouts-prevent-overfitting-in-deep-neural-networks-937e2543a701  \n[7] Dropout: A Simple Way to Prevent Neural Networks from Overfitting, https:\/\/www.cs.toronto.edu\/~hinton\/absps\/JMLRdropout.pdf  ","fb7d4fb8":"## <a id=\"62\">Incorrectly classified images<\/a>\n\nLet's see also few images incorrectly classified.","dd1c8d48":"### Test set images class distribution","ee4ae39b":"## <a id=\"56\">Re-train the model<\/a>\n\nLet's inspect first the model.","450a7bbd":"## <a id=\"41\">Class distribution<\/a>\n\nLet's see how many number of images are in each class. We start with the train set.\n\n### Train set images class distribution","547d1e15":"### Inspect the model\n\nLet's check the model we initialized.","41dc368f":"# <a id=\"3\">Read the data<\/a>\n\nThere are 10 different classes of images, as following: \n\n* **0**: **T-shirt\/top**;   \n* **1**: **Trouser**;   \n* **2**: **Pullover**;   \n* **3**: **Dress**;\n* **4**: **Coat**;\n* **5**: **Sandal**;\n* **6**: **Shirt**;\n* **7**: **Sneaker**;\n* **8**: **Bag**;\n* **9**: **Ankle boot**.\n\nImage dimmensions are **28**x**28**.   \n\nThe train set and test set are given in two separate datasets.\n","64608122":"Also in the test set the 10 classes are equaly distributed (10% each).  \n\nLets' also plot the class distribution.","128be2f5":"The dimmension of the processed train, validation and test set are as following:","e169f8a9":"We process both the train_data and the test_data","1fcbf672":"## <a id=\"55\">Add Dropout layers to the model<\/a>\n\nWe add several Dropout layers to the model, to help avoiding overfitting.    \nDropout is helping avoid overfitting in several ways, as explained in <a href='#8'>[6]<\/a> and <a href='#8'>[7]<\/a>.  \n","90999c81":"After adding the Dropout layers, the validation accuracy and validation loss are much better. Let's check now the prediction for the test set.\n\n\n## <a id=\"58\">Prediction accuracy with the new model<\/a>\n\nLet's re-evaluate the test prediction accuracy with the new model.","3142ac5c":"## Split train in train and validation set\n\nWe further split the train set in train and validation set. The validation set will be 20% from the original train set, therefore the split will be train\/validation of 0.8\/0.2.","41dd4a93":"Also the test accuracy improved. The test accuracy is now approximately 0.93.","94d76f84":"# <a id=\"6\">Visualize classified images<\/a>\n\n## <a id=\"61\">Correctly classified images<\/a>\n\n\nWe visualize few images correctly classified.","3b428707":"Test accuracy is  around  0.91.\n\nWe evaluated the model accuracy based on the predicted values for the test set.  Let's check the validation value during training.\n\n","c4dd22cf":" <h1><center><font size=\"6\">CNN with Tensorflow|Keras for Fashion MNIST<\/font><\/center><\/h1>\n\n\n<center><img src=\"https:\/\/research.zalando.com\/project\/fashion_mnist\/fashion_mnist\/img\/fashion-mnist-sprite.png\" width=\"600\"><\/img><\/center>\n\n\n# <a id='0'>Content<\/a>\n\n- <a href='#1'>Introduction<\/a>  \n- <a href='#2'>Load packages<\/a>  \n- <a href='#3'>Read the data<\/a>  \n- <a href='#4'>Data exploration<\/a>\n    - <a href='#41'>Class distribution<\/a>\n    - <a href='#42'>Images samples<\/a>\n- <a href='#5'>Model<\/a>  \n    - <a href='#51'>Prepare the model<\/a>  \n    - <a href='#52'>Train the model<\/a>  \n    - <a href='#53'>Test prediction accuracy<\/a>   \n    - <a href='#54'>Validation accuracy and loss<\/a>   \n    - <a href='#55'>Add Dropout layers to the model<\/a>  \n    - <a href='#56'>Re-train the model<\/a>   \n    - <a href='#57'>Check validation accuracy and loss with the new model<\/a>    \n    - <a href='#58'>Prediction accuracy with the new model <\/a>   \n- <a href='#6'>Visualize the classified images<\/a>  \n    - <a href='#61'>Correctly classified images<\/a>   \n    - <a href='#62'>Incorrectly classified images<\/a>   \n- <a href='#7'>Conclusions<\/a>\n- <a href='#8'>References<\/a>","09735a9c":"# <a id=\"4\">Data exploration<\/a>","43841712":"## <a id=\"51\">Prepare the model<\/a>\n\n## Data preprocessing\n\nFirst we will do a data preprocessing to prepare for the model.\n\nWe reshape the columns  from (784) to (28,28,1). We also save label (target) feature as a separate vector.","cce346d8":"\nThe best accuracy is obtained for Class 1, Class 5, Class 8, Class 9  and Class 7. Worst accuracy is for Class 6.   \n\nThe recall is highest for Class 8, Class 5 and smallest for Class 6 and Class 4.    \n\nf1-score is highest for Class 1, Class 5 and Class 8 and smallest for Class 6 followed by Class 4 and Class 2.  \n\nLet's also inspect some of the images. We created two subsets of the predicted images set, correctly and incorrectly classified.","7a567e31":"### Test set images\n\nLet's plot now a selection of the test set images.  \nLabels are as well added (they are known).  ","27e27823":"## <a id=\"52\">Train the model<\/a>\n\n### Build the model   \n\n\n\nWe will use a **Sequential** model.\n* The **Sequential** model is a linear stack of layers. It can be first initialized and then we add layers using **add** method or we can add all layers at init stage. The layers added are as follows:\n\n* **Conv2D** is a 2D Convolutional layer (i.e. spatial convolution over images). The parameters used are:\n * filters - the number of filters (Kernels) used with this layer; here filters = 32;\n * kernel_size - the dimmension of the Kernel: (3 x 3);\n * activation - is the activation function used, in this case `relu`;\n * kernel_initializer - the function used for initializing the kernel;\n * input_shape - is the shape of the image presented to the CNN: in our case is 28 x 28\n The input and output of the **Conv2D** is a 4D tensor.\n \n* **MaxPooling2D** is a Max pooling operation for spatial data. Parameters used here are:\n * *pool_size*, in this case (2,2), representing the factors by which to downscale in both directions;\n \n * **Conv2D** with the following parameters:\n * filters: 64;\n * kernel_size : (3 x 3);\n * activation : `relu`;\n \n* **MaxPooling2D** with parameter:\n * *pool_size* : (2,2);\n\n* **Conv2D** with the following parameters:\n * filters: 128;\n * kernel_size : (3 x 3);\n * activation : `relu`;\n \n* **Flatten**. This layer Flattens the input. Does not affect the batch size. It is used without parameters;\n\n* **Dense**. This layer is a regular fully-connected NN layer. It is used without parameters;\n * units - this is a positive integer, with the meaning: dimensionality of the output space; in this case is: 128;\n * activation - activation function : `relu`;\n \n* **Dense**. This is the final layer (fully connected). It is used with the parameters:\n * units: the number of classes (in our case 10);\n * activation : `softmax`; for this final layer it is used `softmax` activation (standard for multiclass classification)\n \n\nThen we compile the model, specifying as well the following parameters:\n* *loss*;\n* *optimizer*;\n* *metrics*. \n","bb084c3b":"## <a id=\"42\">Sample images<\/a>\n\n### Train set images\n\nLet's plot some samples for the images.   \nWe add labels to the train set images, with the corresponding fashion item category.  ","536ef301":"The classes are equaly distributed in the train set (10% each). Let's check the same for the test set.    \nLet's also plot the class distribution.\n\n","25b290d2":"## <a id=\"53\">Test prediction accuracy<\/a>\n\nWe calculate the test loss and accuracy.","1a3fc388":"And, as well, for the validation set."}}