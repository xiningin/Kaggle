{"cell_type":{"8badc429":"code","ad7ff734":"code","5552ebf3":"code","517bbb8c":"code","d4d6809e":"code","a6d5b3ef":"code","5d07e19b":"code","07ff22e0":"code","06f5c452":"code","8c8caedb":"code","27a4626a":"code","4f4681b0":"code","98610584":"code","7e04b2bc":"code","458d64b1":"code","a85338a2":"code","b9fb5ceb":"code","ece7bfa1":"code","778b36df":"code","f47fe604":"code","43906fec":"code","fcc2490f":"code","206075d7":"code","ae249e1b":"code","ff7fd18d":"code","c6e14f28":"code","adce2dfb":"code","61edca80":"code","1abe3a05":"code","58418afa":"code","1241a6ed":"code","2ac1fe70":"code","a8703dda":"code","3a2eae65":"code","080b9de8":"code","6e09e3e2":"code","66ffd20a":"code","e61db2ab":"code","107e94a1":"code","2a043ec4":"code","9dd8a051":"code","2cdeea82":"code","c88c0ad9":"code","e0a18411":"code","ec21759a":"code","8c130978":"code","c0674ad0":"code","8a6958c5":"code","2804ff91":"code","e4d01c98":"code","d32ea330":"code","ab5ed5d9":"markdown","e84f1a1d":"markdown","0376c576":"markdown","15c3221d":"markdown","344f9574":"markdown","528130eb":"markdown","fa3ab198":"markdown","7d1d914d":"markdown","04a99336":"markdown","eddc5bb7":"markdown","b36ffb67":"markdown","c4fe2617":"markdown","0168540b":"markdown","5855423b":"markdown","17d53357":"markdown","0f360156":"markdown","ead759be":"markdown","b8cb8803":"markdown","b779b562":"markdown","7023c8c5":"markdown","8d8dcbee":"markdown","3b05a7ab":"markdown","98fa7281":"markdown","16bece41":"markdown","3d1a8f59":"markdown","8e3a800e":"markdown","99e20b93":"markdown","6b7e7234":"markdown","9ac02198":"markdown","a754bf69":"markdown","4d3e0443":"markdown","b4a4e832":"markdown","aadc3ff2":"markdown","89047b5a":"markdown","35b47e35":"markdown","5d0331e2":"markdown"},"source":{"8badc429":"# import des biblioth\u00e8ques utilis\u00e9es\nimport pandas as pd\nimport numpy as np\nfrom ast import literal_eval \nimport matplotlib.pyplot as plt\nfrom IPython.core.display import HTML\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as st\nimport re\nimport seaborn as sns","ad7ff734":"data_2015 = pd.read_csv(\"\/kaggle\/input\/sea-building-energy-benchmarking\/2015-building-energy-benchmarking.csv\")\ndisplay(data_2015)\ndata_2016 = pd.read_csv(\"\/kaggle\/input\/sea-building-energy-benchmarking\/2016-building-energy-benchmarking.csv\")\ndisplay(data_2016)","5552ebf3":"columns_2015 = data_2015.columns.to_list()\ncolumns_2016 = data_2016.columns.to_list()\n\n# fonction servant \u00e0 afficher le nom d'une variable\ndef var_name(var,all_var=locals()):\n    return [var_name for var_name in all_var if all_var[var_name] is var][0]\n\n# fonction servant \u00e0 contr\u00f4ler l'unicit\u00e9 des valeurs d'une liste de liste\ndef check_unicity(lists):\n    for _list in lists:\n        if(len(_list) == len(set(_list))):\n            print('{}: les {} valeurs sont uniques.'.format(var_name(_list),len(_list)))\n        else:\n            print(var_name(_list),': les valeurs ne sont pas uniques!!!' )\n\ncheck_unicity([columns_2015, columns_2016])   \n    \ndef list_intersection(list1, list2):\n    return [x for x in list1 if x in list2]\n\ndef list_substract(list1,list2):\n    return [x for x in list1 if x not in list2]\n\ndef compare_list(list1,list2): \n    elements_shared = list_intersection(list1,list2)\n    print(\"len elements shared = \", len(elements_shared))\n    elements_unshared_1 = list_substract(list1,elements_shared)\n    print(\"len elements unshared list 1 = \", len(elements_unshared_1))\n    elements_unshared_2 = list_substract(list2,elements_shared)\n    print(\"len elements unshared list 2 = \", len(elements_unshared_2))\n    print('Elements unshared list 1: ', elements_unshared_1)\n    print('Elements unshared list 2: ', elements_unshared_2)\n    print('Elements shared: ', elements_shared)\n    return { 'shared': elements_shared, 'unshared_list_1': elements_unshared_1, 'unshared_list_2': elements_unshared_2}\n    \ncompare_list(columns_2015, columns_2016)","517bbb8c":"print(data_2015['Location'][2])\nprint(data_2015[['Location', 'Zip Codes']])","d4d6809e":"#import ast\ndata_2015_rebuild =  data_2015.copy()\nprint(data_2015_rebuild.shape)\ndata_2015_rebuild = pd.concat([data_2015_rebuild.drop(['Location'], axis=1),data_2015_rebuild['Location'].map(literal_eval).apply(pd.Series)],axis=1)\ndata_2015_rebuild = pd.concat([data_2015_rebuild.drop(['human_address'], axis=1), data_2015_rebuild['human_address'].map(literal_eval).apply(pd.Series)], axis=1)\nprint(data_2015_rebuild.shape)\n                               \ndata_2015_rebuild = data_2015_rebuild.rename(columns={\"latitude\": \"Latitude\",\"longitude\": \"Longitude\",\"address\": \"Address\",\"city\": \"City\",\"state\": \"State\", \"zip\": \"ZipCode\"})","a6d5b3ef":"columns_2015_rebuild = data_2015_rebuild.columns.to_list()\ncolumns_comparison = compare_list(columns_2015_rebuild, columns_2016)\ndisplay(data_2015_rebuild[columns_comparison['unshared_list_1']])\ndisplay(data_2016[columns_comparison['unshared_list_2']])","5d07e19b":"# print(data_2015_rebuild[['ZipCode', 'Zip Codes']])\n# print(data_2016[['ZipCode']])\n# print(data_2015_rebuild.sort_values(by=['Comment'])['Comment'])\n# print(data_2015_rebuild['Comment'].count())\n# print(data_2016.sort_values(by=['Comments'])['Comments'])\n# print(data_2016['Comments'].count())\n# print(data_2015_rebuild[data_2015_rebuild['OtherFuelUse(kBtu)']>0]['OtherFuelUse(kBtu)'])\n# print(data_2015_rebuild[data_2015_rebuild['OtherFuelUse(kBtu)']>0]['OtherFuelUse(kBtu)'].count())\n# print(data_2015_rebuild.sort_values(by=['2010 Census Tracts'])['2010 Census Tracts'])\n# print(data_2015_rebuild['2010 Census Tracts'].count())\n# print(data_2015_rebuild['2010 Census Tracts'].unique())\n# print(data_2015_rebuild.sort_values(by=['Seattle Police Department Micro Community Policing Plan Areas'])['Seattle Police Department Micro Community Policing Plan Areas'])\n# print(data_2015_rebuild['Seattle Police Department Micro Community Policing Plan Areas'].count())\n# print(data_2015_rebuild['Seattle Police Department Micro Community Policing Plan Areas'].unique())\n# print(data_2015_rebuild.sort_values(by=['City Council Districts'])['City Council Districts'])\n# print(data_2015_rebuild['City Council Districts'].count())\n# print(data_2015_rebuild['City Council Districts'].unique())\n","07ff22e0":"to_drop = ['OtherFuelUse(kBtu)','Comment','2010 Census Tracts','Seattle Police Department Micro Community Policing Plan Areas','City Council Districts', 'SPD Beats', 'Zip Codes']\ndata_2015_rebuild = data_2015_rebuild.drop(to_drop, axis=1)\ndata_2015_rebuild = data_2015_rebuild.rename(columns={\"Comment\": \"Comments\",'GHGEmissions(MetricTonsCO2e)': 'TotalGHGEmissions', 'GHGEmissionsIntensity(kgCO2e\/ft2)': 'GHGEmissionsIntensity'})\ndata_2016_rebuild = data_2016.drop(['Comments'], axis=1)","06f5c452":"# on v\u00e9rifie maintenant l'homog\u00e9n\u00e9it\u00e9 des colonnes\ncolumns_2015_rebuild = data_2015_rebuild.columns.to_list()\ncolumns_2016_rebuild = data_2016_rebuild.columns.to_list()\ncolumns_comparison = compare_list(columns_2015_rebuild, columns_2016_rebuild)","8c8caedb":"data_all = pd.concat([data_2015_rebuild,data_2016_rebuild])\nprint(data_all.shape)\ndata_all.to_csv('data_rebuild.csv', index=False)","27a4626a":"data_all = pd.read_csv('data_rebuild.csv')\n# display(data_all.shape)\ndisplay(data_all)","4f4681b0":"# on check le pourcentage de remplissage des colonnes\ncolumns_nan_info ={}\nfor column in data_all.keys():\n    nan_count = data_all[column].isnull().sum()\n    columns_nan_info[column] = nan_count \/ data_all.shape[0] * 100\n\ndf_columns_nan_info = pd.DataFrame(data=np.array(list(columns_nan_info.items())),columns=['column','nan %'])\ndf_columns_nan_info['nan %'] = pd.to_numeric(df_columns_nan_info['nan %'])\ndf_columns_nan_info = df_columns_nan_info.sort_values(by=['nan %'])\n\nprint(df_columns_nan_info.shape)\n\nwith pd.option_context('display.max_rows', None, 'display.max_columns', None):  \n    print(df_columns_nan_info)","98610584":"data_cleaned = data_all[data_all['Outlier'].isnull()] \ndata_cleaned  = data_cleaned.drop(['Outlier', 'YearsENERGYSTARCertified'], axis=1)\ndisplay(data_cleaned.shape)","7e04b2bc":"lines_nan_info=[]\nfor index,row in data_cleaned.iterrows(): \n    lines_nan_info.append( (1- row.isna().sum().sum()\/data_cleaned.shape[1])*100)\ndf_lines_nan_info = pd.DataFrame(np.array(lines_nan_info),columns=['nan %'])\nprint(df_lines_nan_info.sort_values(by=['nan %']))","458d64b1":"df_lines_nan_info['nan %'].hist(bins=20)\nplt.show()\n\n# calcul du pourcentage de donn\u00e9es qu'on garde en filtrant les lignes par un certains pourcentage de valeurs nan\ndf_filtered_lines_nan_score =df_lines_nan_info[df_lines_nan_info['nan %']>88]\nprint(df_filtered_lines_nan_score.shape)\nprint(100*df_filtered_lines_nan_score.shape[0]\/data_cleaned.shape[0])\ndf_filtered_lines_nan_score['nan %'].hist(bins=20)\nplt.show()","a85338a2":"filled_rate = 88\/100\nfiltered_rows=[]\ndata_filtered = data_cleaned[data_cleaned.count(axis='columns')\/data_cleaned.shape[1]>filled_rate].reset_index(drop=True)\nprint(data_filtered.shape)\ndisplay(data_filtered)","b9fb5ceb":"# contr\u00f4le suppl\u00e9mentaire des valeurs d\u00e9lirantes\nquantitative_columns = ['PropertyGFATotal', 'SourceEUI(kBtu\/sf)', 'SiteEnergyUse(kBtu)', 'SiteEUI(kBtu\/sf)', 'TotalGHGEmissions', 'GHGEmissionsIntensity']\nfor column in quantitative_columns:\n    incoherent_values = data_filtered[data_filtered[column] <=0]\n    if(incoherent_values.shape[0]>0):\n        print(column)\n        display(incoherent_values)\n        data_filtered.drop(incoherent_values.index,inplace=True)","ece7bfa1":"building_types = sorted(data_filtered['BuildingType'].unique())\nprimary_property_types = sorted(data_filtered['PrimaryPropertyType'].unique())\ndisplay(building_types)\ndisplay(len(building_types))\ndisplay(primary_property_types)\ndisplay(len(primary_property_types))","778b36df":"data_filtered['PrimaryPropertyType'] = [re.compile(r'[\\n\\r\\t]').sub(\"\", item) for index, item in data_filtered.PrimaryPropertyType.iteritems()]\ndata_filtered['PrimaryPropertyType'] = [re.compile(r' \/ ').sub(\"\/\", item) for index, item in data_filtered.PrimaryPropertyType.iteritems()]","f47fe604":"building_types = sorted(data_filtered['BuildingType'].unique())\nprimary_property_types = sorted(data_filtered['PrimaryPropertyType'].unique())\ndisplay(building_types)\ndisplay(len(building_types))\ndisplay(primary_property_types)\ndisplay(len(primary_property_types))","43906fec":"building_types_and_usages = {}\nfor building_type in building_types:\n    temp = data_filtered[data_filtered['BuildingType']==building_type]['PrimaryPropertyType'].unique()\n    building_types_and_usages[building_type]=temp.tolist()\n\ndisplay(HTML('<br \/>'))\n\ni=0\nfor group,subgroups in building_types_and_usages.items():\n    text = \"<strong>\" + group + \": <\/strong>\"\n    for subgroup in subgroups:\n        text += subgroup + \", \"\n        i = i +1\n    display(HTML(text+'<br \/>'))\n    \ndisplay(HTML('<br \/>'))\n\nprint('Il y a {} groupe\/sous-cat\u00e9gories et {} cat\u00e9gories uniques'.format(i,len(primary_property_types))) ","fcc2490f":"data_anomalies = data_filtered[~data_filtered['BuildingType'].str.contains(\"Multifamily\") & data_filtered['PrimaryPropertyType'].str.contains(\"Multifamily\")]\ndisplay(data_anomalies)","206075d7":"data_filtered = data_filtered[~data_filtered['BuildingType'].str.contains(\"Multifamily\") & ~data_filtered['PrimaryPropertyType'].str.contains(\"Multifamily\")]\ndisplay(data_filtered.shape)","ae249e1b":"# on check le pourcentage de remplissage des colonnes\ncolumns_nan_info ={}\nfor column in data_filtered.keys():\n    nan_count = data_filtered[column].isnull().sum()\n    columns_nan_info[column] = nan_count \/ data_filtered.shape[0] * 100\n\ndf_columns_nan_info = pd.DataFrame(data=np.array(list(columns_nan_info.items())),columns=['column','nan %'])\ndf_columns_nan_info['nan %'] = pd.to_numeric(df_columns_nan_info['nan %'])\ndf_columns_nan_info = df_columns_nan_info.sort_values(by=['nan %'])\n\nprint(df_columns_nan_info.shape)\n\nwith pd.option_context('display.max_rows', None, 'display.max_columns', None):  \n    print(df_columns_nan_info)","ff7fd18d":"data_filtered.dropna(subset = ['SiteEnergyUseWN(kBtu)', 'SiteEUIWN(kBtu\/sf)', 'SiteEUI(kBtu\/sf)', 'NumberofFloors', 'ZipCode'], inplace=True)\nprint(data_filtered.shape)","c6e14f28":"# on check le pourcentage de remplissage des colonnes\ncolumns_nan_info ={}\nfor column in data_filtered.keys():\n    nan_count = data_filtered[column].isnull().sum()\n    columns_nan_info[column] = nan_count \/ data_filtered.shape[0] * 100\n\ndf_columns_nan_info = pd.DataFrame(data=np.array(list(columns_nan_info.items())),columns=['column','nan %'])\ndf_columns_nan_info['nan %'] = pd.to_numeric(df_columns_nan_info['nan %'])\ndf_columns_nan_info = df_columns_nan_info.sort_values(by=['nan %'])\n\nprint(df_columns_nan_info.shape)\n\nwith pd.option_context('display.max_rows', None, 'display.max_columns', None):  \n    print(df_columns_nan_info)","adce2dfb":"plt.plot(data_filtered['Electricity(kWh)'],data_filtered['Electricity(kBtu)'],'o')\nplt.xlabel('Electricity(kWh)')\nplt.ylabel('Electricity(kBtu)')\nplt.show()\ncovariance = np.cov(data_filtered['Electricity(kWh)'],data_filtered['Electricity(kBtu)'],ddof=0)[1,0]\ncoeff_corr = st.pearsonr(data_filtered['Electricity(kWh)'],data_filtered['Electricity(kBtu)'])[0]\nprint('covariance: {}'.format(covariance))\nprint('coeff_corr: {}'.format(coeff_corr)) \n\nplt.plot(data_filtered['NaturalGas(kBtu)'],data_filtered['NaturalGas(therms)'],'o')\nplt.xlabel('NaturalGas(kBtu)')\nplt.ylabel('NaturalGas(therms)')\nplt.show()\ncovariance = np.cov(data_filtered['NaturalGas(kBtu)'],data_filtered['NaturalGas(therms)'],ddof=0)[1,0]\ncoeff_corr = st.pearsonr(data_filtered['NaturalGas(kBtu)'],data_filtered['NaturalGas(therms)'])[0]\nprint('covariance: {}'.format(covariance))\nprint('coeff_corr: {}'.format(coeff_corr)) \n","61edca80":"data_filtered.drop(['Electricity(kWh)', 'NaturalGas(therms)'], axis=1, inplace=True)\nprint(data_filtered.shape)\ndata_filtered.to_csv('data_filtered.csv', index=False)","1abe3a05":"data_filtered.drop(['SiteEUIWN(kBtu\/sf)', 'SourceEUIWN(kBtu\/sf)', 'SiteEnergyUseWN(kBtu)'], axis=1, inplace=True)","58418afa":"neighborhoods = (data_filtered['Neighborhood'].unique())\ndistrict_codes = data_filtered['CouncilDistrictCode'].unique()\ndisplay(sorted(neighborhoods))\ndisplay(len(neighborhoods))\ndisplay(sorted(district_codes))\ndisplay(len(district_codes))\n","1241a6ed":"data_filtered['Neighborhood'] = data_filtered['Neighborhood'].apply(lambda x : x.upper())\nneighborhoods = (data_filtered['Neighborhood'].unique())\ndisplay(sorted(neighborhoods))\ndisplay(len(neighborhoods))","2ac1fe70":"print(data_filtered.shape)\ndata_filtered.drop(data_filtered[(data_filtered['CouncilDistrictCode']==3) & (data_filtered['Neighborhood']=='DOWNTOWN')].index , inplace=True)\nprint(data_filtered.shape)\n\ndisplay(sorted(neighborhoods))\ndisplay(len(neighborhoods))\ndisplay(district_codes)\ndisplay(len(district_codes))\n\nzones_infos = {}\nfor district_code in district_codes:\n    temp = data_filtered[data_filtered['CouncilDistrictCode']==district_code]['Neighborhood'].unique()\n    zones_infos[district_code]=temp.tolist()\n\ndisplay(HTML('<br \/>'))\n\ni=0\nfor group,subgroups in zones_infos.items():\n    text = \"<strong>\" + str(group) + \": <\/strong>\"\n    for subgroup in subgroups:\n        text += str(subgroup) + \", \"\n        i = i +1\n    display(HTML(text+'<br \/>'))\n    \ndisplay(HTML('<br \/>'))\n\nprint('Il y a {} groupe\/sous-cat\u00e9gories et {} cat\u00e9gories uniques'.format(i,len(neighborhoods))) ","a8703dda":"test1 = data_filtered[(data_filtered['CouncilDistrictCode']==7) & (data_filtered['Neighborhood']=='DOWNTOWN')]\ndisplay(test1)\ntest2 = data_filtered[(data_filtered['CouncilDistrictCode']==2) & (data_filtered['Neighborhood']=='DOWNTOWN')]\ndisplay(test2)\n","3a2eae65":"data_filtered.reset_index()\ndata_filtered.to_csv('data_filtered.csv', index=False)","080b9de8":"data_filtered['BuildingAge'] = data_filtered['DataYear'] - data_filtered['YearBuilt']\nprint(data_filtered[['BuildingAge','DataYear','YearBuilt']])","6e09e3e2":"data_filtered.drop(['YearBuilt'], axis=1, inplace=True)","66ffd20a":"data_filtered.info()","e61db2ab":"print(data_filtered[data_filtered.TaxParcelIdentificationNumber.str.isnumeric()].shape)\nprint(data_filtered.shape)","107e94a1":"data_filtered = data_filtered[data_filtered.TaxParcelIdentificationNumber.str.isnumeric()]\nprint(data_filtered.shape)","2a043ec4":"print(data_filtered.dtypes)\ndata_filtered.TaxParcelIdentificationNumber = data_filtered.TaxParcelIdentificationNumber.astype(int)\nprint(data_filtered.dtypes)","9dd8a051":"qualitative_columns = ['BuildingType', 'LargestPropertyUseType', 'PrimaryPropertyType', 'NumberofFloors','BuildingAge', 'Neighborhood', 'CouncilDistrictCode']\n\nfor column in qualitative_columns:\n    fig = plt.figure(figsize=(36,18))\n    data_filtered[column].value_counts().sort_index(axis=0).plot(kind='bar')\n    plt.title(column)\n    plt.show()","2cdeea82":"quantitative_columns = ['PropertyGFATotal', 'SourceEUI(kBtu\/sf)', 'SiteEnergyUse(kBtu)', 'SteamUse(kBtu)', 'Electricity(kBtu)', 'SiteEUI(kBtu\/sf)', 'TotalGHGEmissions', 'GHGEmissionsIntensity', 'NaturalGas(kBtu)', 'ENERGYSTARScore']\nfor column in quantitative_columns:\n    n_bins = 20\n    fig = plt.figure(figsize=(18,9))\n    plt.hist(data_filtered[column],n_bins)\n    plt.title(column)\n    plt.show()","c88c0ad9":"corr_methods=  ['pearson','kendall', 'spearman']\n\n'''\npearson : standard correlation coefficient\nkendall : Kendall Tau correlation coefficient\nspearman :  Spearman rank correlation\n'''\n\nfor corr_method in corr_methods:\n    corr = data_filtered.corr(method=corr_method)\n    mask = np.zeros_like(corr)\n    mask[np.triu_indices_from(mask)] = True\n    fig, ax = plt.subplots(figsize=(20,20))\n    ax = sns.heatmap(corr, annot=True, mask=mask, center=0, cmap=\"coolwarm\")\n    plt.title('Heatmap des corr\u00e9lations, method={}'.format(corr_method))\n    plt.show()\n    ","e0a18411":"corr = data_filtered.corr()\ncorr_columns = corr.columns[((corr < 1) & (corr > 0.8)).any(axis=0)]\ndisplay(corr_columns)","ec21759a":"sns.pairplot(data_filtered[corr_columns], height = 3)","8c130978":"data = data_filtered.drop(['SecondLargestPropertyUseTypeGFA', 'SecondLargestPropertyUseType', 'ThirdLargestPropertyUseTypeGFA', 'ThirdLargestPropertyUseType'], axis = 1)\nprint(data_filtered.shape)\nprint(data.shape)\ndata = data.dropna()\nprint(data.shape)","c0674ad0":"    corr = data.corr(method=corr_method)\n    mask = np.zeros_like(corr)\n    mask[np.triu_indices_from(mask)] = True\n    fig, ax = plt.subplots(figsize=(20,20))\n    ax = sns.heatmap(corr, annot=True, mask=mask, center=0, cmap=\"coolwarm\")\n    plt.title('Heatmap des corr\u00e9lations, method= pearson')\n    plt.show()","8a6958c5":"corr = data.corr()\ncorr_columns = corr.columns[((corr < 1) & (corr > 0.8)).any(axis=0)]\ndisplay(corr_columns)\nsns.pairplot(data[corr_columns], height = 3)","2804ff91":"data_hard_refined =  data.drop(['PropertyGFABuilding(s)', 'LargestPropertyUseTypeGFA', 'SourceEUI(kBtu\/sf)', 'Electricity(kBtu)','SiteEUI(kBtu\/sf)','NaturalGas(kBtu)','GHGEmissionsIntensity'], axis = 1)\ncorr = data_hard_refined.corr(method=corr_method)\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nfig, ax = plt.subplots(figsize=(20,20))\nax = sns.heatmap(corr, annot=True, mask=mask, center=0, cmap=\"coolwarm\")\nplt.title('Heatmap des corr\u00e9lations, method= pearson')\nplt.show()","e4d01c98":"data_hard_refined.to_csv('data_hard_refined.csv', index=False)","d32ea330":"data_hard_refined.head()","ab5ed5d9":"# <a id=\"clean-data\">Nettoyage des donn\u00e9es<a\/> \n    \n##  <a id=\"columns-filling\">Remplissage des colonnes<a\/>   ","e84f1a1d":"On peut constater plusieurs faits;\n* les types de batiments sont in\u00e9galement repr\u00e9sent\u00e9s, on a surtout des batiments de types non r\u00e9sidentiels qui sont essentiellement des bureaux\n* certains quartiers sont tr\u00e8s peu repr\u00e9sent\u00e9s (probablement les quartiers r\u00e9sidentiels avec les donn\u00e9es qu'on a supprim\u00e9 de l'analyse) mais cette in\u00e9galit\u00e9 est peu visible au niveau des districts \n* on a peu de construction b\u00e2tie entre 1930 et 1947 ce qui est expliqu\u00e9 par la crise de 29 et la 2nde guerre mondiale.\n* on a peu de construction r\u00e9centes (ce qui semble normal les terrains ne sont plus \u00e0 batir)\n* plus les constructions sont \u00e9lev\u00e9es, moins elles sont nombreuses","0376c576":"Le TaxParcelIdentificationNumber  devrait \u00eatre de type num\u00e9rique, pas une cha\u00eene de caract\u00e8re.","15c3221d":"Nous allons pouvoir passer \u00e0 la mod\u00e9lisation. Pour cela nous utiliserons les fichiers data_filtered.csv et data_hard_refined.csv","344f9574":"Nous n'avons plus de donn\u00e9es fortement corr\u00e9l\u00e9es, except\u00e9es celles que nous voulons pr\u00e9dire. Nous pouvons maintenant exporter nos donn\u00e9es. ","528130eb":"##  <a id=\"dwelling-filter\">Filtre des habitations<a\/>  \nL'\u00e9nonc\u00e9 de l'exercice restreint l'analyse aux  b\u00e2timents non destin\u00e9s \u00e0 l\u2019habitation. Nous allons donc filtrer les habitations. Commen\u00e7ons par analyser les types de batiments ainsi que leur usage principal.","fa3ab198":"# Sommaire\n\n1. [Chargement des donn\u00e9es](#loading)\n2. [Homog\u00e9n\u00e9isation des fichiers](#normalization)  \n    2.1. [Analyse des colonnes](#columns-analyze)  \n    2.2. [Normalisation des colonnes](#columns-normalization)  \n    2.3. [Fusion des fichiers](#merge-files)  \n3. [Nettoyage des donn\u00e9es](#clean-data)  \n    3.1. [Remplissage des colonnes](#columns-filling)  \n    3.2. [Filtrage des lignes](#lines-filter)  \n    3.3. [Filtrage des habitations](#dwelling-filter)  \n    3.4. [V\u00e9rifications et tri suppl\u00e9mentaire](#final-filter)\n4. [Analyses](#analyse)  \n    4.1. [Univari\u00e9es](#univariate)  \n    4.2. [Mulitvari\u00e9es](#multivariate)  \n5. [Conclusion](#conclusion)  ","7d1d914d":"C'est bien le cas donc nous pouvons supprimer la colonne en kWh qui est redondante et ainsi rester en unit\u00e9 anglaise, uniform\u00e9ment avec le reste des colonnes. Nous garderons aussi cette unit\u00e9 pour le gaz. Nous enregistrerons ensuite notre jeu de don\u00e9nes filtr\u00e9es.","04a99336":"Les types d'usages des b\u00e2timents ne sont donc pas sous-cat\u00e9gories uniqes des types de b\u00e2timents. De plus on retrouve un usage de type **\"Low-Rise Multifamily\"** dans le type **\"NonResidential\"**, analysons en d\u00e9tail ce type d'anomalie.","eddc5bb7":"##  <a id=\"final-filter\">V\u00e9rifications et tri suppl\u00e9mentaire<a\/>  \n* suppression de colonnes\n* supression des donn\u00e9es redondantes\n* contr\u00f4le et suppression des anomlaies","b36ffb67":"<div style=\"width:100%;text-align: center;\">\n    <img src=\"https:\/\/user.oc-static.com\/upload\/2019\/02\/24\/15510245026714_Seattle_logo_landscape_blue-black.png\" \/>\n<\/div>\n\n# Introduction\n\nVous travaillez pour la ville de Seattle. Pour atteindre son objectif de ville neutre en \u00e9missions de carbone en 2050, votre \u00e9quipe s\u2019int\u00e9resse de pr\u00e8s aux \u00e9missions des b\u00e2timents non destin\u00e9s \u00e0 l\u2019habitation.\n\nDes relev\u00e9s minutieux ont \u00e9t\u00e9 effectu\u00e9s par vos agents en 2015 et en 2016. Cependant, ces relev\u00e9s sont co\u00fbteux \u00e0 obtenir, et \u00e0 partir de ceux d\u00e9j\u00e0 r\u00e9alis\u00e9s, vous voulez tenter de pr\u00e9dire les \u00e9missions de CO2 et la consommation totale d\u2019\u00e9nergie de b\u00e2timents pour lesquels elles n\u2019ont pas encore \u00e9t\u00e9 mesur\u00e9es.\n\nVotre pr\u00e9diction se basera sur les donn\u00e9es d\u00e9claratives du permis d'exploitation commerciale (taille et usage des b\u00e2timents, mention de travaux r\u00e9cents, date de construction..)\n\nVous cherchez \u00e9galement \u00e0 \u00e9valuer l\u2019int\u00e9r\u00eat de l\u2019\"ENERGY STAR Score\" pour la pr\u00e9diction d\u2019\u00e9missions, qui est fastidieux \u00e0 calculer avec l\u2019approche utilis\u00e9e actuellement par votre \u00e9quipe.","c4fe2617":"Il y a des doublons avec des sauts de lignes et des espaces, on va les supprimer:","0168540b":"Analyse des quartiers, districts et codes postaux:","5855423b":"Au vue du nombre de valuer observ\u00e9e, le quartier downton semble appartenir au district 7 ce qui est bien coh\u00e9rent avec les information officielles donn\u00e9es par la ville de seattle (https:\/\/www.seattle.gov\/neighborhoods\/neighborhoods-and-districts). En regardant sur une map le quartier et le district pour 2 adresses de la liste erronn\u00e9e je me suis aper\u00e7u que les 2 valeurs \u00e9taient fausses je pourrais supprimer les lignes en erreur.\n\nN\u00e9anmoins pour les autres quartiers, certains n'existe m\u00eame pas, Duwamish est un chef indien? Finalement je d\u00e9cide de stopper ici mon analyse sur les quartiers qui devient trop complexe.\n\n","17d53357":"Mettons les quariers en majuscule.","0f360156":"L'\u00e9mission de gaz \u00e0 effet de serre est li\u00e9e de fa\u00e7on directe \u00e0 la consommation d'\u00e9nergie, les donn\u00e9es normalis\u00e9e en fonction des conditions climatiques ne nous int\u00e9resserons donc pas dans l'analyse. Nous pouvons donc supprime\u00e9s les colonnes avec le suffixe WN.","ead759be":"# <a id=\"analyse\">Analyses<a\/> \n    \n##  <a id=\"univariate\">Univari\u00e9es<a\/>   \n","b8cb8803":"**Vocabulaire m\u00e9tier:**\n\nMaintenant que nous avons d\u00e9grossis et affienr le jeu de donn\u00e9es, d\u00e9taillons un peu les acronymes utilis\u00e9s dans les colonnes:\n\n* **GHG:** greenhouse gas emissions, correspond aux \u00e9missions des gazs \u00e0 effets de serre.\n* **OSE:** Seattle Office of Sustainability and Environment.\n* **EUI:** Energy Use Intensity.\n* **kBtu:** kilo-British thermal unit, 1 kWh = 3.412 kBtu.\n* **sf:** square feet, 1m\u00b2 = 10,7639sf.\n* **WN:** weather-normalized, normalis\u00e9 vis \u00e0 vis des conditions climatiques.\n* **GFA:** Gross floor area, Surface de plancher brute - La surface de plancher couverte (par un toit, m\u00eame sans mur) totale contenue dans le b\u00e2timent.\n* **therm:** mesure \u00e9nerg\u00e9tique 1thm =100000Btu.\n\nFort de ces informations nous sommes en droit de nous demander si les valeurs don\u00e9es pour l'\u00e9lectricit\u00e9:  Electricity(kWh), Electricity(kBtu) ne sont pas les m\u00eames \u00e0 l'untit\u00e9 pr\u00e8s. Idem pour NaturalGas(kBtu) et NaturalGas(therms) V\u00e9rifions le.\n","b779b562":"On peut commencer par supprimer les lignes r\u00e9pertori\u00e9es comme des outliers avant de supprimer la colonne. On peut aussi supprimer la colonne YearsENERGYSTARCertified qui est tr\u00e8s peu remplie et qui ne parait pas d'une grande utilit\u00e9. Pour les usages secondaires et tertiaires des batiments les codes non renseign\u00e9es doivent correspondre \u00e0 aucun usage, on conservera donc ces donn\u00e9es qui pourraient fortement influer les analyses sur la consommation \u00e9nerg\u00e9tique.","7023c8c5":"##  <a id=\"multivariate\">Mulitvari\u00e9es<a\/>   \n","8d8dcbee":"On peut constater plusieurs faits:\n\n* il y a beaucoup de b\u00e2timents avec une faible surface de plancher brut (comme le nombre d'\u00e9tage) mais \u00e0 eux tous il repr\u00e9sente la plupart de la surface de plancher.  \n* beaucoup de batiment consomment peu d'\u00e9nergie mais qu'\u00e0 eux tous ce sont eux qui consomment le plus \n* il y a peu de batiments qui consomment une tr\u00e8s grande quantit\u00e9 d'\u00e9nergie et \u00e0 eux tous ils consomment finalement assez peu.\n* ce constat est assez similaire avec l'\u00e9mission de gazs \u00e0 effet de serre.  \n\nCela laisse \u00e0 pr\u00e9sager que:\n* la consommation \u00e9nerg\u00e9tique pourrait \u00eatre corr\u00e9l\u00e9 \u00e0 l'\u00e9mission de gazs \u00e0 effet de serre.\n* la consommation \u00e9nerg\u00e9tique et donc les \u00e9missions de gazs \u00e0 effet de serre pourraient \u00eatre corr\u00e9l\u00e9s au nombre d'\u00e9tage des buildings.\n\n\n","3b05a7ab":"<p>pour les autres colonnes:<\/p>\n    <p style=\"margin-left: 40px;\">2015:<\/p>\n    <ul style=\"margin-left: 40px;\">\n      <li>OtherFuelUse(kBtu): peu de donn\u00e9es (17) dans la colonne  =&gt; on la supprime<\/li>\n      <li>GHGEmissions(MetricTonsCO2e): correspond \u00e0 la colonne TotalGHGEmissions du fichier 2016  =&gt; on renomme la colonne<\/li> \n      <li>GHGEmissionsIntensity(kgCO2e\/ft2): correspond \u00e0 la colonne GHGEmissionsIntensity du fichier 2016  =&gt; on renomme la colonne<\/li>\n      <li>Comment: colonne quasi vide, correspond \u00e0 la colonne Comments du fichier 2016 mais inutile pour l'analyse  =&gt; on la supprime<\/li>\n      <li>2010 Census Tracts: peu de don\u00e9nes (17) dans la colonne  =&gt; on la supprime <\/li>\n      <li>Seattle Police Department Micro Community Policing Plan Areas: colonne int\u00e9ressantes qui pourraient \u00eatre plus pr\u00e9cise que le quartier pour le remplissage de nan par une moyenne pond\u00e9r\u00e9e sur la cat\u00e9gorie (expemple: secteur industriel) mais pas pr\u00e9sente dans le fichier 2016, on la supprime mais on pourrait extrapoler les valeurs par l'adresse ou le num\u00e9ro de building pour le fichier 2016<\/li>\n      <li>City Council Districts: peu de donn\u00e9es (17) dans la colonne  =&gt; on la supprime<\/li>\n      <li>SPD Beats: idem que le Seattle Police Department Micro Community Policing Plan Areas en moins pr\u00e9cis, on supprime <\/li>\n      <li> Zip Codes: cette colonne contient des valeurs qui ne sont pas coh\u00e9rentes =&gt; suppression<\/li>\n    <\/ul>\n    <p style=\"margin-left: 40px;\">2016: <\/p>\n    <ul style=\"margin-left: 40px;\">\n      <li>Comments: colonne vide, correspond \u00e0 la colonne Comment du fichier 2015 inutile pour l'analyse  =&gt; on la supprime <\/li>\n      <li>TotalGHGEmissions : correspond \u00e0 la colonne TotalGHGEmissions du fichier 2015 qu'on va renommer<\/li>\n      <li>GHGEmissionsIntensity: correspond \u00e0 la colonne GHGEmissionsIntensity du fichier 2015 qu'on va renommer<\/li>\n    <\/ul>","98fa7281":"En gardant les lignes remplies \u00e0 au moins 88%, on conserverait un plus de 97% des donn\u00e9es totales et ce serait les donn\u00e9es les plus qualitatives, je vais donc faire ce choix.","16bece41":"##  <a id=\"merge-files\">Fusion des fichiers<a\/>","3d1a8f59":"Les colonnes des deux fichiers sont maintenant bien homog\u00e8nes, nous allons pouvoir fusionner les fichiers.","8e3a800e":"Pour l'analyse li\u00e9e \u00e0 l'\u00e9nergie star score et la consommation \u00e9nerg\u00e9tique, l'\u00e2ge des batiments me parait plus pertinente que l'ann\u00e9e de construction ajoutons une colonne avec cette variable et supprimons l'anciennne.","99e20b93":"A part pour les colonnes ENERGYSTARScore, SecondLargestPropertyUseType, SecondLargestPropertyUseTypeGFA, ThirdLargestPropertyUseTypeGFA toutes les donn\u00e9es sont maintenant compl\u00e8tes.","6b7e7234":"# <a id=\"loading\">Chargement des donn\u00e9es<a\/> ","9ac02198":"##  <a id=\"columns-normalization\">Normalisation des colonnes<a\/>   \n\nOn se basera sur la norme du fichier le plus r\u00e9cent. \nOn va devoir:\n    \n   - transformer la \"location\" du fichier 2015 en diff\u00e9rentes colonnes appropri\u00e9es (Latitude, Longitude, Address, City, State, ZipCode, )\n   - analyse des colonnes partag\u00e9es et exclusives entre les fichiers puis normalisation et suppression\n   - fusion des fichies","a754bf69":"## <a id=\"conclusion\">Conclusion<a\/> \n\nAfin de faire de pouvoir \u00e9valuer la puissance des mod\u00e8les que nous testerons, je souhaite conserver deux jeu de donn\u00e9es. Un jeu de donn\u00e9es tr\u00e8s raffin\u00e9es (suppression des colonnes corr\u00e9l\u00e9es, des donn\u00e9es secondaires et des manquants sur le energy score) et un jeu de donn\u00e9es au raffinage limit\u00e9.","4d3e0443":"# <a id=\"normalization\">Homog\u00e9n\u00e9isation des fichiers<a\/> \n    \n##  <a id=\"columns-analyze\">Analyse des colonnes<a\/>   ","b4a4e832":"4 lignes semblent poser probl\u00e8me, supprimons les.","aadc3ff2":"Vu le nombre de lignes concern\u00e9es il s'agit bien d'anomalies dont on ne tiendra pas compte. Pour supprimer les lignes concernant les usages r\u00e9sidentielles nous supprimerons donc les lignes contenant le terme **\"Multifamily\"** dans le type de b\u00e2timent ou dans son type d'usage.","89047b5a":"Les codes postaux sont ind\u00e9pendants. Les quartiers devraient \u00e9tre attribu\u00e9s par district selon le site officiel de la ville de seattle:  \nhttps:\/\/www.seattle.gov\/neighborhoods\/neighborhoods-and-districts  mais ce n'est pas du tout le cas dans nos donn\u00e9es actuelles, ont peut se demander s'il y a eu un remaniement des quartier depuis ou pas ou si les odnn\u00e9es sont incoh\u00e9rentes\n\nLes anomalies sont DOWTOWN (7 et 3), EAST(7, 2, 3), NORTHWEST (5, 6),  NORTHEAST(4, 3, 5) , GREATER DUWAMISH (1, 2, 3), LAKE UNION (3, 4, 6, 7), SOUTHEAST (2 et 3), NORTH (5 et 4)\n\nTraitons le cas de downtown:\n\n","35b47e35":"##  <a id=\"lines-filter\">Filtrage des lignes<a\/>  \n","5d0331e2":"On perdra tr\u00e8s peu de donn\u00e9es en supprimant les lignes contenant des valeurs inconnues pour les colonnes SiteEnergyUseWN(kBtu), SiteEUIWN(kBtu\/sf), SiteEUI(kBtu\/sf), NumberofFloors, ZipCode donc faisons le."}}