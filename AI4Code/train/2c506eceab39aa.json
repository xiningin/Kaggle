{"cell_type":{"b847071e":"code","c75e5420":"code","519cd4a4":"code","590ba32f":"code","4f59c159":"code","ffd3952d":"code","5bf4d645":"code","2c806fcd":"code","f88cb01c":"code","75bf62d2":"code","d2f82fe4":"code","ef087ad1":"code","99c98b79":"code","a9521ccb":"markdown","b363e89c":"markdown","27053604":"markdown","00b58bc3":"markdown"},"source":{"b847071e":"import enum\nimport pandas as pd\nfrom pandas.core.algorithms import mode\nfrom sklearn import model_selection\n\nif __name__ == \"__main__\":\n\n    df = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/train.csv\")\n\n    # We create a new column called kfold and fill it with -1\n    df[\"kfold\"] = -1\n\n    # randomizing the rows of the data\n    df = df.sample(frac=1).reset_index(drop=True)\n\n    # Fetch targets || Required in Stratified KFold\n    y = df.target.values\n\n    # init the kfold class from model selection module\n    kf = model_selection.StratifiedKFold(n_splits=5) # k = 5\n\n    for fold, (trn_, val_) in enumerate(kf.split(X=df, y=y)):\n\n        df.loc[val_, 'kfold'] = fold\n\n    # save the new csv with kfold column\n    df.to_csv(\"train_kfolds\", index=False)","c75e5420":"# Using logistic Regression\n\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.metrics import roc_auc_score, accuracy_score, log_loss\nfrom sklearn.linear_model import LogisticRegression\n\ndef run(fold):\n\n    # read the training dataset with kfolds\n    df = pd.read_csv(\".\/train_kfolds\")\n\n    features = [\n        f for f in df.columns if f not in[\"id\", \"target\", \"kfold\"]\n    ]\n\n    class_map = {}\n    for i in range(1,5):\n        class_map[f\"Class_{i}\"] = i\n\n    df[\"target\"] = df[\"target\"].map(class_map)\n\n    # Split into train and valid according to the fold\n    train = df[df[\"kfold\"] != fold].reset_index(drop=True)\n    valid = df[df[\"kfold\"] == fold].reset_index(drop=True)\n\n    X_train = train[features]\n    y_train = train[\"target\"].values\n\n    X_valid = valid[features]\n    y_valid = valid[\"target\"].values\n\n    # Logistic Regression Model\n    lr = LogisticRegression(multi_class='ovr')\n    lr.fit(X_train, y_train)\n\n    # Getting the probabilities\n    pred_probs = lr.predict_proba(X_valid)\n\n    # Getting the labels\n    predictions = lr.predict(X_valid)\n\n    # Auc roc\n    auc = roc_auc_score(y_valid, pred_probs, multi_class='ovr')\n\n    # Accuracy\n    acc_sc = accuracy_score(y_valid, predictions)\n\n    # log loss\n    ll = log_loss(y_valid, pred_probs)\n\n    print(f\" AUC Score : {auc} || Accuracy : {acc_sc} || log_loss = {ll}\")\n\n\nif __name__ == \"__main__\":\n\n    for f in range(5):\n        run(f)","519cd4a4":"df = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/train.csv\")\nfeatures = [\n        f for f in df.columns if f not in[\"id\", \"target\"]\n]\nX_train = df[features]\ny_train = df[\"target\"].values","590ba32f":"lr = LogisticRegression(multi_class='ovr')\nlr.fit(X_train, y_train)","4f59c159":"test = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/test.csv\")\nX_test = test[features]","ffd3952d":"# prediciting probabilities\npred_probs = lr.predict_proba(X_test)","5bf4d645":"pred_probs.shape","2c806fcd":"# Submission time !!\nsub = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/sample_submission.csv\")","f88cb01c":"sub.head()","75bf62d2":"sub_cols = [\n    col for col in sub.columns if col != \"id\"\n]","d2f82fe4":"sub[sub_cols] = pred_probs","ef087ad1":"sub.head()","99c98b79":"sub.to_csv(\"Log_res.csv\", index=False)","a9521ccb":"## Cross Validation","b363e89c":"# Fitting on the Whole Data","27053604":"## Testing and Submission","00b58bc3":"## Creating folds for validation"}}