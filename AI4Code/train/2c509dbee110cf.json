{"cell_type":{"b1751143":"code","aad8b9d0":"code","1eb74c2a":"code","39a60d08":"code","b2b48e1a":"code","01b6bb08":"code","1ddacf58":"code","c3ae862b":"code","25631192":"code","7dc98e89":"code","18fcc249":"code","d59e2463":"code","67de0df3":"code","eaa3634e":"code","540e9f76":"code","b9a6fffa":"code","59b066ce":"code","3b9db39a":"code","afb481b5":"code","057bf5af":"code","0885a04e":"markdown","800d013d":"markdown","14b9cb89":"markdown","6541692d":"markdown"},"source":{"b1751143":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aad8b9d0":"# Reading files from directory\nimport os\nimport pickle\n \n# Data manipulation & analysis\nimport pandas as pd\npd.set_option('display.max_columns',100)\npd.set_option('display.max_rows', 500)\nimport datetime as dt\n \nimport numpy as np\nimport scipy\n\n# Visualisation\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n \n # \u5b9f\u884c\u306b\u95a2\u4fc2\u306a\u3044\u8b66\u544a\u3092\u7121\u8996\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom tqdm import tqdm\nimport gc\nimport json\nimport math\n\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.metrics import accuracy_score,roc_auc_score,log_loss\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\n\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nimport category_encoders as ce\nimport plotly.express as px\n\nfrom lightgbm import LGBMClassifier\nimport lightgbm\n","1eb74c2a":"#\u5b9f\u884c\u74b0\u5883\u304c\u3069\u3053\u306e\u968e\u5c64\u306b\u3042\u308b\u304b\u3001\u30d1\u30b9\u3092\u691c\u7d22\nimport os\nprint(os.getcwd())","39a60d08":"train = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/sample_submission.csv\")","b2b48e1a":"train.drop(['id'],axis=1).describe().T.style.bar(subset=['mean'],color=px.colors.qualitative.G10[1]).background_gradient(subset=['std'],cmap='Blues').background_gradient(subset=['50%'],cmap='BuGn')","01b6bb08":"test.drop(['id'],axis=1).describe().T.style.bar(subset=['mean'],color=px.colors.qualitative.G10[1]).background_gradient(subset=['std'],cmap='Blues').background_gradient(subset=['50%'],cmap='BuGn')","1ddacf58":"display(train.info())\ndisplay(test.info())","c3ae862b":"train.columns","25631192":"#--------------------------------\n#\u6570\u5024\u306e\u7279\u5fb4\u91cf\u3000\u203b\u4e0a\u7d1a\u8005\u306f\u3001\u7279\u5fb4\u91cf\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u3066\u3044\u308b\u3002\n#------------------------------\nfeatures_num = ['feature_0', 'feature_1', 'feature_2', 'feature_3', 'feature_4',\n       'feature_5', 'feature_6', 'feature_7', 'feature_8', 'feature_9',\n       'feature_10', 'feature_11', 'feature_12', 'feature_13', 'feature_14',\n       'feature_15', 'feature_16', 'feature_17', 'feature_18', 'feature_19',\n       'feature_20', 'feature_21', 'feature_22', 'feature_23', 'feature_24',\n       'feature_25', 'feature_26', 'feature_27', 'feature_28', 'feature_29',\n       'feature_30', 'feature_31', 'feature_32', 'feature_33', 'feature_34',\n       'feature_35', 'feature_36', 'feature_37', 'feature_38', 'feature_39',\n       'feature_40', 'feature_41', 'feature_42', 'feature_43', 'feature_44',\n       'feature_45', 'feature_46', 'feature_47', 'feature_48', 'feature_49', ]\nfeatures_cat = ['target'] ","7dc98e89":"# Categorical features distribution \n\n# Params\nn_col = 1\nn_row = round(len(features_num) )\nsize = (n_col * 10, n_row * 4.5)\n\n#Create figure\nplt.subplots(n_row,n_col,figsize=size)\n\n# enumerate\u95a2\u6570\u3000for - loop \u30b3\u30fc\u30c9\u306e\u4ee3\u7528 \nfor  i ,feature  in enumerate(features_num , 1):\n    plt.subplot(n_row, n_col , i)\n    sns.countplot(x = feature, hue = 'target', data = train)\n    plt.xlabel(feature, fontsize=9); plt.legend()\nplt.show()\n","18fcc249":"##--------------------------------------------\n#\u30ab\u30c6\u30b4\u30eafeature  \u3000\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\n#---------------------------------------------\nfor feature in features_cat :\n    le = LabelEncoder()\n    le.fit(train[feature])\n    train[feature] = le.transform(train[feature])","d59e2463":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u7279\u5fb4\u91cf\u3068\u76ee\u7684\u5909\u6570\u306b\u5206\u3051\u308b  \u6b63\u89e3\u30e9\u3079\u30eb\u3092\u8a18\u5165\ntrain_x = train.drop(['target'], axis=1)\ntrain_y = train['target']","67de0df3":"# \u5909\u6570Id\u3092\u9664\u5916\u3059\u308b\ntrain_x = train_x.drop(['id'], axis=1)\ntest_x = test.drop(['id'], axis=1)","eaa3634e":"test_x","540e9f76":"## Trial \u95a2\u6570\u3067\u6700\u9069\u5316\u3092\u63a2\u7d22\n##\u8a08\u7b97\u91cf\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u3001Hold-out\u6cd5\u30672:8\u306b\u5206\u5272\n##\u30d1\u30e9\u30e1\u30fc\u30bf\u63a2\u7d22\u306f\u91cd\u8981\u30d1\u30e9\u30e1\u30fc\u30bf\u3092suggest_int(\u6574\u6570\u3067\u5168\u90e8\u63a2\u7d22) , \u305d\u306e\u4ed6\u3092suggest_categorical\uff08\u30ea\u30b9\u30c8\u5185\u3092\u9078\u629e\uff09\n\ndef objective(trial,data=train_x,target=train_y):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=71)\n    params = {\n        'reg_alpha' : trial.suggest_loguniform('reg_alpha' , 1e-2 , 1000),\n        'reg_lambda' : trial.suggest_loguniform('reg_lambda' , 1e-2 , 1000),\n        #'num_leaves' : trial.suggest_int('num_leaves' , 11 , 900),\n        'num_leaves' : trial.suggest_int('num_leaves' , 109 , 109),         #FIX\n        #'learning_rate' : trial.suggest_float('learning_rate' , 0.0005 , 0.2),\n        'learning_rate' : trial.suggest_float('learning_rate' , 0.2 , 0.2), #FIX\n        #'max_depth' : trial.suggest_int('max_depth' , 3 , 100),\n        'max_depth' : trial.suggest_int('max_depth' , 3 , 3),                #FIX\n        'n_estimators' : trial.suggest_int('n_estimators' , 1 ,100000),\n        'min_child_samples' : trial.suggest_int('min_child_samples' , 1 , 100),\n        'min_child_weight' : trial.suggest_loguniform('min_child_weight' , 1e-5 , 1),\n        'subsample' : trial.suggest_float('subsample' , 0.01 , 1.0),\n        #'colsample_bytree' : trial.suggest_float('colsample_bytree' , 0.01 , 1),\n        'colsample_bytree' : trial.suggest_float('colsample_bytree' , 0.1 , 0.1),#FIX\n    }\n    model = LGBMClassifier(**params)  \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],eval_metric='multi_logloss',early_stopping_rounds=100,verbose=False)\n        \n    preds_opt = model.predict_proba(test_x)\n \n\n    log_loss_multi = log_loss(test_y, preds_opt)\n    return log_loss_multi","b9a6fffa":"import optuna\nfrom sklearn.model_selection import train_test_split\n\nfrom lightgbm import LGBMClassifier\nOPTUNA_OPTIMIZATION = True\n\nstudy = optuna.create_study(direction='minimize') # or maximize \/ \"minimize\"\nstudy.optimize(objective, n_trials=35)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","59b066ce":"if OPTUNA_OPTIMIZATION:\n    display(optuna.visualization.plot_optimization_history(study))\n    display(optuna.visualization.plot_slice(study))","3b9db39a":"##############################\n#######     LGBMClassifier by tunner\n################################\n\ntrain_oof_lgbm_0 = np.zeros((len(train_x), 4))\ntemp_test = np.zeros((len(test_x), 4))\n\n\nlgbm_params = study.best_trial.params\n\n#{'task': 'train',\n#        'objective': 'multiclass', # \u76ee\u7684 : \u591a\u30af\u30e9\u30b9\u5206\u985e \n#        'num_class': 4, # \u30af\u30e9\u30b9\u6570 : 4\n#        'metric': 'multi_logloss', # \u8a55\u4fa1\u6307\u6a19  \n#        # \u4ed6\u306b\u306f'multi_logloss'\u306a\u3069 }\n\n\nNUM_FOLDS = 10\nkf =  StratifiedKFold(n_splits=NUM_FOLDS, shuffle=True, random_state=137)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(train_x, train_y))):\n        print(f'Fold {f+1}')\n        train_df = train_x.iloc[train_ind].reset_index(drop=True)\n        val_df = train_x.iloc[val_ind].reset_index(drop=True)\n        train_target = train_y.iloc[train_ind].reset_index(drop=True)\n        val_target = train_y.iloc[val_ind].reset_index(drop=True)\n\n        model = LGBMClassifier(**lgbm_params)\n        model =  model.fit(train_df, train_target,eval_set=[(val_df,val_target)],early_stopping_rounds=100,verbose=False)\n        \n        temp_oof = model.predict_proba(val_df)\n        print(log_loss(val_target, temp_oof))\n        train_oof_lgbm_0[val_ind] = temp_oof\n\n        temp_test += model.predict_proba(test_x)\n        test_preds_lgbm_0 = temp_test\/NUM_FOLDS\n\n        \nprint('All_logloss',log_loss(train_y, train_oof_lgbm_0))\nnp.save('train_oof_lgbm_0', train_oof_lgbm_0 ) #for validation\nnp.save('test_preds_lgbm_0',test_preds_lgbm_0 ) #for submission\n","afb481b5":"# importance\u3092\u8868\u793a\u3059\u308b\nimport shap\nexplainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(test_x)\nshap.summary_plot(shap_values, train_x)","057bf5af":"##### \u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210 \u30d8\u30c3\u30c0\u30fc\u7121\u8a2d\u306e\u8a2d\u5b9a\nsubmission = pd.DataFrame( test_preds_lgbm_0)\nsubmission.columns = ['Class_1', 'Class_2', 'Class_3', 'Class_4']\nsubmission['id'] = test['id']\nsubmission = submission[['id', 'Class_1', 'Class_2', 'Class_3', 'Class_4']]\n\nsubmission.to_csv(\"submission_lgbm_0.csv\", index=False)\ndisplay(submission.head(), submission.tail())","0885a04e":"![\u30ad\u30e3\u30d7\u30c1\u30e32.PNG](attachment:769cbada-c23f-4fc0-b785-a3e25f7e7b78.PNG)","800d013d":"\u6700\u9069\u5316\u3092\uff11\u56de\u76ee\u2192\uff12\u56de\u76ee\u21923\u56de\u3068\u56de\u3057\u3066\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u63a2\u7d22\u3092\u56fa\u5b9a\u3057\u3066\u884c\u304d\u307e\u3059\nOptimaized  1st \u21922nd , Parameter study is decided FIX some items.","14b9cb89":"The first step in kaggle is to get better results in an easy way.\n\nKaggle\u306e\u7b2c\u4e00\u6b69\u306f\u697d\u306f\u65b9\u6cd5\u3067\u3088\u308a\u826f\u3044\u7d50\u679c\u3092\u3048\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\n\nLightGBM+ optuna\u3000is a very good tool for first trail.\n\nLightGBM+ optuna \u306f\u521d\u3081\u306e\u624b\u306b\u306f\u3068\u3066\u3082\u826f\u3044\u30c4\u30fc\u30eb\u306e\u4e00\u3064\u3067\u3059\u3002\n\nI recommend that you use this Easy-Way study for your next\u3000deep exploration.\n\n\u3053\u306e\u65b9\u6cd5\u3092\u4f7f\u3063\u3066\u6b21\u306e\u6df1\u3044\u63a2\u7d22\u3092\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\nOptimaized  1st \u21922nd \u21923rd , Each parameter study is decided FIX some items.\n\n\u6700\u9069\u5316\u3092\uff11\u56de\u76ee\u2192\uff12\u56de\u76ee\u21923\u56de\u3068\u56de\u3057\u3066\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u63a2\u7d22\u3092\u56fa\u5b9a\u3057\u3066\u884c\u304d\u307e\u3059\n\nDon't forget to vote !!","6541692d":"![\u30ad\u30e3\u30d7\u30c1\u30e3.PNG](attachment:e353b04c-7106-4907-8b55-3fbc2cb24f07.PNG)"}}