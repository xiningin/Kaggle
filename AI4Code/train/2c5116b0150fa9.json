{"cell_type":{"a2fe0b7b":"code","038280b1":"code","9b75c45c":"code","a5b3c335":"markdown"},"source":{"a2fe0b7b":"from qa_functions import *","038280b1":"import numpy as np \nimport pandas as pd\n\n# keep only docsuments with covid -cov-2 and cov2\ndef search_focus(df):\n    dfa = df[df['abstract'].str.contains('covid')]\n    dfb = df[df['abstract'].str.contains('-cov-2')]\n    dfc = df[df['abstract'].str.contains('cov2')]\n    frames=[dfa,dfb,dfc]\n    df = pd.concat(frames)\n    df=df.drop_duplicates(subset='title', keep=\"first\")\n    return df\n\n# load the meta data from the CSV file using 3 columns (abstract, title, authors),\ndf=pd.read_csv('\/kaggle\/input\/CORD-19-research-challenge\/metadata.csv', usecols=['title','abstract','authors','doi','publish_time'])\nprint (df.shape)\n#drop duplicate abstracts\ndf = df.drop_duplicates(subset='title', keep=\"first\")\n#drop NANs \ndf=df.dropna()\n# convert abstracts to lowercase\ndf[\"abstract\"] = df[\"abstract\"].str.lower()\n\n# search focus keeps abstracts with the anchor words covid,-cov-2,hcov2\ndf=search_focus(df)\n\n#show 5 lines of the new dataframe\ndf.head()","9b75c45c":"###################### MAIN PROGRAM ###########################\nquestions = [\n'Which patient populations have highest risk of death from COVID-19?',\n'What is the average age of death cases?'\n]\n\nfor question in questions:\n\n    # remove punctuation, stop words and stem words from NL question\n    search_words=remove_stopwords(question,stopwords)\n\n     # get best sentences\n    df_table=get_sentences(df,search_words)\n    \n    # sort df by sentence rank scores\n    \n    df_table=df_table.sort_values(by=['sent_score'], ascending=False)\n    df_table=df_table.drop(['sent_score'], axis=1)\n    \n    #limit number of results\n    df_answers=df_table.head(3)\n    \n    df_table=df_table.head(5)\n    \n    text=''\n    \n    for index, row in df_answers.iterrows():\n        text=text+' '+row['excerpt']\n    \n    display(HTML('<h3>'+question+'<\/h3>'))\n    \n    display(HTML('<h4> Answer: '+answer_question(question,text)+'<\/h4>'))\n    \n    df_table=df_table.drop(['excerpt'], axis=1)\n    \n    #convert df to html\n    df_table=HTML(df_table.to_html(escape=False,index=False))\n    \n    # show the HTML table with responses\n    display(df_table)","a5b3c335":"This notebook is based on the scientific publications and the answers come form a BERT - https:\/\/huggingface.co\/implementation.\n\nShout out to @davidmezzetti for telling me about this package.\n\nThe answers are wholly generated by the system from the publicatons cited.\n\nMore to come...\n"}}