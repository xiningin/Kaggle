{"cell_type":{"8b0cfb90":"code","b4fa9a2b":"code","96420b25":"code","252def35":"code","fc1edfed":"code","051f086e":"code","bfabe900":"code","21faeb46":"code","3b8d9134":"code","8536d247":"code","aedbc36a":"code","71a6c17c":"code","3f4021f1":"code","f5fab232":"code","4ea083cb":"code","cd850d6a":"code","04f12772":"code","94a2f80c":"markdown","975faf25":"markdown","6d3ee1f6":"markdown","2dcaef35":"markdown","a7db70fc":"markdown","7e0a7eb8":"markdown","276d63a4":"markdown","850093a1":"markdown","035520bc":"markdown","20a1652a":"markdown","1c740b40":"markdown","52365827":"markdown","37713473":"markdown","705a9315":"markdown","558311ac":"markdown","5999b79f":"markdown"},"source":{"8b0cfb90":"import cv2                                         # working with, mainly resizing, images\nimport numpy as np                                 # dealing with arrays\nimport os                                          # dealing with directories\nfrom random import shuffle                         # mixing up or currently ordered data that might lead our network astray in training.\nfrom keras.models import Sequential                # creating sequential model of CNN\nfrom keras.layers import Convolution2D             # creating convolution layer\nfrom keras.layers import MaxPooling2D              # creating maxpool layer\nfrom keras.layers import Flatten                   # creating input vector for dense layer\nfrom keras.layers import Dense                     # create dense layer or fully connected layer\nfrom keras.layers import Dropout                   # use to avoid overfitting by droping some parameters\nfrom keras.preprocessing import image              # generate image\nimport matplotlib.pyplot as plt                    # use for visualization\nimport warnings#\nwarnings.filterwarnings('ignore')\nimport os\nprint(os.listdir(\"..\/input\"))\n","b4fa9a2b":"TRAIN_DIR = '..\/input\/training_set\/training_set'\nTEST_DIR = '..\/input\/test_set\/test_set'\nIMG_SIZE = 64,64","96420b25":"image_names = []\ndata_labels = []\ndata_images = []","252def35":"def  create_data(DIR):\n     for folder in os.listdir(TRAIN_DIR):\n        for file in os.listdir(os.path.join(TRAIN_DIR,folder)):\n            if file.endswith(\"jpg\"):\n                image_names.append(os.path.join(TRAIN_DIR,folder,file))\n                data_labels.append(folder)\n                img = cv2.imread(os.path.join(TRAIN_DIR,folder,file))\n                im = cv2.resize(img,IMG_SIZE)\n                data_images.append(im)\n            else:\n                continue","fc1edfed":"#calling functions to create data\ncreate_data(TRAIN_DIR)\ncreate_data(TEST_DIR)","051f086e":"data = np.array(data_images)","bfabe900":"len(data_images)","21faeb46":"data.shape","3b8d9134":"from sklearn.preprocessing import LabelEncoder\nfrom keras.utils import np_utils\n\nle = LabelEncoder()\nlabel = le.fit_transform(data_labels)\n","8536d247":"from sklearn.model_selection import train_test_split\n\nX_train,X_val,y_train,y_val=train_test_split(data,label,test_size=0.20,random_state=42)\n\nprint(\"X_train shape\",X_train.shape)\nprint(\"X_test shape\",X_val.shape)\nprint(\"y_train shape\",y_train.shape)\nprint(\"y_test shape\",y_val.shape)","aedbc36a":"classifier=Sequential()\nclassifier.add(Convolution2D(32, 3, 3, input_shape = (64, 64, 3), activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size=(2,2)))\nclassifier.add(Dropout(0.5))\nclassifier.add(Flatten())\nclassifier.add(Dense(output_dim= 128, activation='relu'))\nclassifier.add(Dense(output_dim= 1, activation='sigmoid'))\nclassifier.compile(optimizer= 'adam', loss= 'binary_crossentropy', metrics= ['accuracy'])\nclassifier.summary()","71a6c17c":"from keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen=ImageDataGenerator(\n    rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\ntrain_datagen.fit(X_train)","3f4021f1":"batch_size = 32\nsteps_per_epoch=len(X_train)\nvalidation_steps=len(y_val)\n\nhistory=classifier.fit_generator(\n    train_datagen.flow(X_train,y_train, batch_size=batch_size),\n    steps_per_epoch = steps_per_epoch,\n    epochs = 4,\n    verbose = 2,\n    validation_data = (X_val,y_val),\n    validation_steps = validation_steps)","f5fab232":"classifier.save_weights('model.h5')","4ea083cb":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\npred = classifier.predict_classes(X_val)\ncm = confusion_matrix(y_val,pred)\n\nf,ax = plt.subplots(figsize=(4, 4))\nsns.heatmap(cm, annot=True, linewidths=0.01,cmap=\"Purples\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","cd850d6a":"accuracy=(cm[0][0]+cm[1][1])\/len(y_val)\nprint(accuracy)","04f12772":"import numpy as np\nfrom keras.preprocessing import image\n\n\ntest_image=image.load_img('..\/input\/test_set\/test_set\/dogs\/dog.4042.jpg',target_size=(64,64))\ntest_image=image.img_to_array(test_image)\ntest_image=np.expand_dims(test_image,axis=0)\nresult=classifier.predict_classes(test_image)\n\nif result[0][0] >=0.5:\n    prediction='dog'\nelse:\n    prediction='cat'\nprint(prediction)","94a2f80c":"### Basics of CNN\n\n* **CNN**-A convolutional neural network (CNN) is a type of artificial neural network used in image recognition and processing that is specifically designed to process pixel data.\n\n* **Convolution Layer**-The aim of convolution operation is to reduce the size of an image, by using feature detectors that keep only the specific patterns within the image. Stride is the number of pixels with which we slide the detector. If it is one, we are moving it one pixel each time and recording the value (adding up all the multiplied values). Many feature detectors are used, and the algorithm finds out what is the optimal way to filter images. 3 x 3 feature detector is commonly used, but other sizes can be used.\n\n* **Max pooling Layer**-A pooling layer is another building block of a CNN. Its function is to progressively reduce the spatial size of the representation to reduce the amount of parameters and computation in the network. Pooling layer operates on each feature map independently.\n\n* **Droput**- It is use to avoid overfitting by droping some random parameters form layer.\n\n* **Dense**- Dense (fully connected) layers, which perform classification on the features extracted by the convolutional layers and downsampled by the pooling layers. In a dense layer, every node in the layer is connected to every node in the preceding layer.\n\n\n\n**Architecture**\n* Creating a convolution network of alternate convolution and max pooling network.\n* Using dropout to avoid overfitting.\n* Two dense layer of 128 and 1 neuron.","975faf25":"ImageDataGenerator use for generating batches of tensor image data with real-time data augmentation. The data will be looped over (in batches).\n\n","6d3ee1f6":"Defining training and testing directory.\nDefining Image Size.","2dcaef35":"## Creating CNN model","a7db70fc":"# Convolution Neural Network in Keras\nThis kernel is created form scratch and will show how to build CNN.\n","7e0a7eb8":"## Future Work \n* Improving Architecture\n* Increasing Data Size\n* Using hyper-parameter\n* Using Pretrained model such VGG","276d63a4":"### Content\n* Data Preprocessing\n* Data Spliting\n* Building CNN classifier\n* Training Classiifer\n* Visualization\n* Future Work\n","850093a1":"#### you found this notebook helpful or you just liked it , some upvotes would be very much appreciated - That will keep me motivated :)\n","035520bc":"## Data Spliting","20a1652a":"Converting string label into 0\/1 using LabelEncoder","1c740b40":"## Accuracy and Prediction","52365827":"Creating list to store image name,labels,matrix(pixel value)","37713473":"## Training Classifier","705a9315":"### Importing Required Module","558311ac":"Defining Funtion for creating data which takes data from both test and training test.","5999b79f":"## Visualization"}}