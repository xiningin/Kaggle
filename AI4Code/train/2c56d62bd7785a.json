{"cell_type":{"f540731a":"code","51c918db":"code","9b7c1772":"code","99d51879":"code","0da9633c":"code","ab5723c1":"code","bcfa8b12":"code","d56d9ab9":"code","f9561467":"code","500a7e0e":"code","7eaaad60":"code","c327cdbc":"code","3aee17f1":"code","5ca579a1":"code","bc268380":"code","92dd6596":"code","5341aa88":"code","5663f4c9":"code","02c93897":"code","292448fd":"code","fb7ede4a":"code","21f738a5":"markdown","98d364b7":"markdown","4538af2f":"markdown","54784b13":"markdown"},"source":{"f540731a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","51c918db":"dataframe=pd.read_csv('..\/input\/Admission_Predict.csv')\ndataframe.head()\n","9b7c1772":"dataframe.columns","99d51879":"#building frames from dictionary\nteam_players=[\"quaresma\",\"karius\",\"babel\",\"oguzhan\",\"tolgay\"]\n#column name(feature name)=values   --- created as a list\nplayers_ages=[\"34\",\"29\",\"33\",\"28\",\"26\"]\n#column name(feature name)=values   --- created  as a list\nlist_label=[\"team_players\",\"players_ages\"]\n#feature names also created in a list(list_label) as a list\nlist_column=[team_players,players_ages]\n#columns created  as a list\nzipped=list(zip(list_label,list_column)) # key point(list(zip))  zip returns tuble we evaluate to list\n#zip functions used zipping the lists!!\ndata_dictionary=dict(zipped)\n#for making dataframes first we create dictionary\n#then we use pd.DataFrame method making dataframe;\ndataframe_player=pd.DataFrame(data_dictionary)\ndataframe_player","0da9633c":"#adding new columns and assigning different values different entire column\n\ndataframe_player[\"Nationality\"]=[\"Portugal\",\"Holland\",\"Germany\",\"Turkey\",\"Turkey\"]\ndataframe_player","ab5723c1":"#Broadcasting= Creating new column and assigning same value to entire column\ndataframe_player[\"Season_Injuries\"]=False\ndataframe_player[\"Injuries\"]=False\n\ndataframe_player","bcfa8b12":"#Plotting All Data\n\ndataframe1=dataframe.loc[:,['SOP','LOR ']]\ndataframe1.plot()\n# it might be confusing\n","d56d9ab9":"# same data subplot\ndataframe1.plot(subplots=True)\nplt.show()\n","f9561467":"#scatter plot\ndataframe1.plot(kind=\"scatter\",x='SOP',y='LOR ')\nplt.show()","500a7e0e":"#Histogram plot masures frequance\n\ndataframe.plot(kind='hist',y='CGPA')\n#additional features   dataframe.plot(kind='hist',y='CGPA',bins=25,range=(0,250),normed=True)\n                                                        # bins= figure thikness,range= x label scale,normed=(ylabel) frequance normalized(True or False)\n","7eaaad60":"fig, axes =plt.subplots(nrows=2,ncols=1)  # this code line represant, output plots line in a rows and columns\ndataframe.plot(kind='hist',y='CGPA',bins=25,range=(0,15),normed=True,ax=axes[0]) # in place 0th row\ndataframe.plot(kind='hist',y='CGPA',bins=25,range=(0,15),normed=True,ax=axes[1],cumulative=True) # in place 1th row\nplt.savefig('graph.png')\nplt.show()","c327cdbc":"date_time_list=[\"2017-01-01\",\"2017-12-31\"] # this is string type of date time\nprint(type(date_time_list[1])) #date_time_list's [1] value is str,\n#to convert datetime object;\ndatetime_object=pd.to_datetime(date_time_list)\nprint(type(datetime_object)) # type = pandas date time index","3aee17f1":"dataframe_player=dataframe_player.drop(\"Injuries\",axis=1)\ndataframe_player","5ca579a1":"date_list_season=[\"2018-01-01\",\"2018-02-01\",\"2018-04-01\",\"2018-06-01\",\"2018-12-01\"] # craating time series list\ndate_time_season_object=pd.to_datetime(date_list_season) # converting pandas datetime object\ndataframe_player[\"Season\"]=date_time_season_object  # labeling with Season\ndataframe_player","bc268380":"dataframe_player=dataframe_player.set_index(\"Season\")  # set as a index of the dataframe_player\ndataframe_player","92dd6596":"print(dataframe_player.loc[\"2018-01-01\"])  # slicing\nprint(dataframe_player.loc[\"2018-01-01\":\"2018-06-01\"]) # slicing","5341aa88":"dataframe_player[\"players_ages\"]=dataframe_player[\"players_ages\"].astype(\"int\")","5663f4c9":"#For example\n#dataframe_player.resample(\"Y\").mean()  # for each Year mean speratly calculated. same \"A\" is the same key word for year\ndataframe_player.resample(\"M\").mean()   # for each Mounth's mean speratly calculated.\n#dataframe_player[\"players_ages\"].resample(\"M\").mean() #  gives just players_ages resample\n# in output data, there are some NaN value , even if in the main data hasn't that spesicif Mounth.\n# 'M' key word gives first mount.\n\n# last tip: out last time index is 2018-12-01 but M resample output gives 2018-12-31, 31 is the last day of the 12th mounth.","02c93897":"#dataframe_player.resample(\"D\").mean() # this line give days but the days which has no day is going to be NaN and the whole year!! :)","292448fd":"dataframe_player.resample(\"M\").first().interpolate(\"linear\")\n #interpolate by the first value to last. fillling with between two values rates and directions. for example between karius and babel age is increasing interpolate,but between babel and oguzhan\n    # decreasing so on..","fb7ede4a":"dataframe_player.resample(\"M\").mean().interpolate(\"linear\") # interpolating with mean","21f738a5":"RESAMPLING PANDAS TIME SERIES\n\n* Resampling pandas has uniq statistical methods for different time intervals\n    * needs string to specify frequancy like \"M\"= month or \"A\"= year\n* Resampling create new data from main data and filtering date times series with your prefer time intervals.","98d364b7":"BUILDING DATA FRAMES FROM SCRATCH\n\n1) We can build data frames from csv as did i above\n\n2) We can also build from dictionaries;\nzip() fonctions returns tuble from dictionary, tubles has iterable values contains\n\n3) Adding new column\n\n4) Broadcasting\n","4538af2f":"INDEXING AND RESAPMLING PANDAS WITH TIME SERIES\n\n* datetime=object (new data type)\n* parse_dates(boolean) method: convert to date time strings to Transform dat to ISO8601(yyyy-mm-dd hh:mm:ss) format\n","54784b13":"VISUAL EXPLORATORY DATA ANALYSIS\n\n1. Plot\n2. Subplot\n3. Histogram:\n\nFeatures\n*     bins:\n*     range(tuble)\n*     normed(boolean): normalized or not\n*     cumulative(boolean): compute cumulative distrubution"}}