{"cell_type":{"394f4bed":"code","d2bfc337":"code","20f9d9b1":"code","fb633a9d":"code","d2a8dd61":"code","d53d8d23":"code","d1934119":"code","331a16ee":"code","4e9e4ba2":"code","9bc6cee9":"code","5ab7f8b3":"code","c54636c0":"code","c9ce9e63":"code","80d20a71":"code","8c5250bf":"code","e2be0076":"code","0f53761e":"code","7781bb7f":"code","09ee7fac":"code","9512a1be":"code","7064a090":"code","97215b8d":"code","7d420821":"code","d9b22ef5":"code","16ae586c":"code","530373c7":"code","45fedcb7":"code","0dda0b4a":"code","9b2d967e":"code","6c929c8d":"code","8e694e9c":"code","bc42021b":"code","5f2a5e0b":"code","1db551cd":"code","3d4557b1":"code","74c2a084":"code","dd7aa821":"code","af3fbad8":"code","5e3cf3f2":"code","558d7187":"code","855a29c0":"code","2bc33b2d":"code","58fa4b74":"code","1cf7f163":"code","acc17abb":"code","69d4fe08":"code","3d3beea1":"code","17b79f00":"code","7cc5b93c":"code","99616af3":"markdown","7435a07a":"markdown","06f6c818":"markdown","cd76826f":"markdown","2d82f99b":"markdown","bbeb29ab":"markdown","0091219a":"markdown","786639a5":"markdown","e6d6677a":"markdown","d22d5030":"markdown","3a7ecade":"markdown","77412809":"markdown","8d75a048":"markdown","a46fcbcf":"markdown","bf933261":"markdown","02c10484":"markdown","f09f3b7a":"markdown","0b930fe3":"markdown","61a06f0f":"markdown","34efacbf":"markdown","a1f02ade":"markdown","3606a5ff":"markdown","41cf35f5":"markdown"},"source":{"394f4bed":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom statsmodels.tsa.seasonal import STL\nimport statsmodels.tsa.api as smt","d2bfc337":"train = pd.read_csv('..\/input\/bri-data-hackathon-cr-optimization\/train.csv', index_col=[0], parse_dates=[0])","20f9d9b1":"train.head()","fb633a9d":"info = pd.read_csv('..\/input\/bri-data-hackathon-cr-optimization\/data_description.csv')\npd.set_option('display.max_colwidth', -1)\ninfo","d2a8dd61":"train.shape","d53d8d23":"# remove constant variable\ntrain.drop(['cr_ketetapan_total_bkn_sum'], axis=1, inplace=True)","d1934119":"# plot time series and the corresponding distribution\ndef plot_all(df):\n    cols = df.columns\n    fig, ax = plt.subplots(len(cols), 2, figsize=(18,len(cols)*3), gridspec_kw={'width_ratios': [1, 3]})\n    colors = sns.color_palette()\n    colors += colors\n    ylims = [1.8e-9, 1.8e-9, 1.2e-11, 1.4e-11, 1.75e-12, 7e-12, 2.3e-10, 1.3e-11, 1.3e-11, 1.1e-13, 6.5e-10]\n    for i, (col, ylim) in enumerate(zip(cols, ylims)):\n        sns.distplot(df[col], ax=ax[i,0], color=colors[i])\n        ax[i,1].plot(df.index, df[col], color=colors[i])\n        ax[i,1].set_title(col)\n        ax[i,1].grid()\n        ax[i,0].set_ylim(0,ylim)\n    plt.tight_layout()","331a16ee":"plot_all(train)","4e9e4ba2":"def check(target):\n    tmp1 = train[f'cash_in_{target}'] + train[f'cash_out_{target}'] + train[f'kas_{target}'].shift(1)\n    tmp2 = train[f'cash_in_{target}'] + train[f'cash_out_{target}']\n\n    fig, ax = plt.subplots(1, 2, figsize=(18,3))\n    ax[0].plot(tmp1, label='tmp1')\n    ax[0].plot(train[f'kas_{target}'], label=f'kas_{target}')\n    ax[0].legend()\n    ax[1].plot(tmp2, label='tmp2')\n    ax[1].legend();","9bc6cee9":"check('kantor')","5ab7f8b3":"check('echannel')","c54636c0":"corr = train.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","c9ce9e63":"start = train.index[0]\nend = train.index[-1]\nll = pd.date_range(start, end).tolist()\nmissing = [(i,j) for i,j in enumerate(ll) if j not in train.index]\nmissing","80d20a71":"# impute missing dates with middle values\nfor d in missing:\n    # get middle value between 2 data\n    tmp = (train.iloc[d[0]] + train.iloc[d[0]-1]) \/ 2\n    # give timestamp for the index\n    tmp.name = d[1]\n    # append new data into the dataframe\n    train = train.append(tmp)\ntrain.sort_index(inplace=True)","8c5250bf":"def replace_outliers(df, cols, std_thres):\n    new_df = df.copy()\n    for col in cols:\n        global_std = new_df[col].std()\n        global_med = new_df[col].median()\n        # thresholds\n        thres_up = global_med + std_thres*global_std\n        thres_dw = global_med - std_thres*global_std\n        # get middle values (y(t-1) + y(t+1)) \/ 2\n        new_df['mid'] = (new_df[col].shift(-1) + new_df[col].shift(1)) \/ 2\n        new_df['mid'][0] = new_df['mid'][1]\n        new_df['mid'][-1] = new_df['mid'][-2]\n        # replace outliers with middle values\n        new_df[col] = np.where(new_df[col] > thres_up, new_df['mid'], new_df[col])\n        new_df[col] = np.where(new_df[col] < thres_dw, new_df['mid'], new_df[col])\n    return new_df.drop(['mid'], axis=1)","e2be0076":"cols = ['giro', 'deposito', 'kewajiban_lain', 'tabungan']\nnew_train = replace_outliers(train, cols, std_thres=8)","0f53761e":"plot_all(new_train)","7781bb7f":"def decompose(df, col):\n    stl = STL(df[col])\n    result = stl.fit()\n    fig, ax = plt.subplots(2, 2, figsize=(18,6))\n    colors = sns.color_palette('deep')\n    ax[0,0].plot(df[col], label='Original Series', color=colors[0])\n    ax[0,0].plot(result.trend + result.seasonal, label='trend + seasonality', color='red')\n    ax[0,0].legend()\n    ax[0,1].plot(result.trend, color=colors[2]); ax[0,1].set_title('Trend')\n    ax[1,0].plot(result.seasonal, color=colors[4]); ax[1,0].set_title('Seasonality')\n    mu, std = np.mean(result.resid), np.std(result.resid)\n    up, dw = mu + 3*std, mu - 3*std\n    ax[1,1].plot(result.resid, color=colors[1]); ax[1,1].set_title('Residual')\n    ax[1,1].fill_between(train.index, dw, up, color='g', alpha=0.1)\n    for i in range(2): \n        for j in range(2): \n            ax[i,j].grid()\n    plt.tight_layout()","09ee7fac":"decompose(new_train, 'cash_in_echannel')","9512a1be":"decompose(new_train, 'cash_out_echannel')","7064a090":"decompose(new_train, 'cash_in_kantor')","97215b8d":"decompose(new_train, 'cash_out_kantor')","7d420821":"decompose(new_train, 'giro')","d9b22ef5":"decompose(new_train, 'deposito')","16ae586c":"decompose(new_train, 'kewajiban_lain')","530373c7":"decompose(new_train, 'tabungan')","45fedcb7":"decompose(new_train, 'rata_dpk_mingguan')","0dda0b4a":"decompose(new_train, 'kas_kantor')","9b2d967e":"decompose(new_train, 'kas_echannel')","6c929c8d":"cols = new_train.columns\nsize = len(cols)\nrows = int(np.ceil(size\/2))\n\nfig, ax = plt.subplots(rows, 2, figsize=(18,3*rows))\nylims = [1.9e-9, 1.9e-9, .8e-11, 1e-11, 3e-12, 2.5e-11, 4e-10, 3e-11, 4e-11, 1e-12, 9.4e-10]\n\nk = 0\nfor i in range(rows):\n    for j in range(2):\n        if k==size:\n            break\n        col = cols[k]\n        for l, t in enumerate(['2019', '2020']):\n            filter_ = (new_train.index >= f'{t}-08-01') & (new_train.index < f'{t}-10-01')\n            y = new_train[filter_][col]\n            sns.distplot(y, label=f'Aug-Sep {t}', ax=ax[i,j])\n        ax[i,j].legend()\n        ax[i,j].set_ylim(0,ylims[k])\n\n        k += 1\n    \nplt.tight_layout();","8e694e9c":"fig, ax = plt.subplots(rows, 2, figsize=(18,3*rows))\nylims = [1.9e-9, 1.9e-9, .8e-11, 1e-11, 3e-12, 1e-11, 3e-10, 2e-11, 3e-11, 3e-13, 8e-10]\npalette = sns.color_palette()\ncolors = palette[2], palette[6]\n\nk = 0\nfor i in range(rows):\n    for j in range(2):\n        if k==size:\n            break\n        col = cols[k]\n        y1 = new_train[new_train.index < '2020-04-01'][col]\n        y2 = new_train[new_train.index >= '2020-04-01'][col]\n        for l, (n, y) in enumerate(zip(['before', 'after'],[y1, y2])):\n            sns.distplot(y, label=f'{n} 2020-04-01', ax=ax[i,j], color=colors[l])        \n        ax[i,j].legend()\n        ax[i,j].set_ylim(0,ylims[k])\n        k += 1\nplt.tight_layout();","bc42021b":"new_train['day_of_week'] = new_train.index.dayofweek\ndays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\nddays = {k:v for k,v in zip(range(7),days)}\nnew_train['day_of_week'] = new_train['day_of_week'].map(ddays)","5f2a5e0b":"new_train['day_of_week'].tail()","1db551cd":"cols = new_train.columns[:11]\nsize = len(cols)\nrows = int(np.ceil(size\/2))\n\nfig, ax = plt.subplots(rows, 2, figsize=(18,3*rows))\n\nk = 0\nfor i in range(rows):\n    for j in range(2):\n        if k==size:\n            break\n        col = cols[k]\n        x = new_train['day_of_week']\n        y = new_train[col]\n        sns.boxplot(x, y, ax=ax[i,j], order=days)\n        ax[i,j].set_xlabel('')\n        ax[i,j].set_ylabel('')\n        ax[i,j].set_title(col)\n        k += 1\nplt.tight_layout();","3d4557b1":"# average by day of week (cashflow kantor)\n# tmp = new_train.groupby('day_of_week').mean()\n# fig, ax = plt.subplots(1, 2, figsize=(12,3))\n# for i, f in enumerate(['in', 'out']):\n#     x = tmp.index\n#     y = tmp[f'cash_{f}_kantor']\n#     sns.barplot(x, y, order=days, ax=ax[i])","74c2a084":"new_train['month'] = new_train.index.month_name()\nnew_train['month'] = new_train['month'].apply(lambda x: x[:3])","dd7aa821":"cols = new_train.columns[:11]\nsize = len(cols)\nrows = int(np.ceil(size\/2))\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nfig, ax = plt.subplots(rows, 2, figsize=(18,3*rows))\n\nk = 0\nfor i in range(rows):\n    for j in range(2):\n        if k==size:\n            break\n        col = cols[k]\n        x = new_train['month']\n        y = new_train[col]\n        sns.boxplot(x, y, ax=ax[i,j], order=months)\n        ax[i,j].set_xlabel('')\n        ax[i,j].set_ylabel('')\n        ax[i,j].set_title(col)\n        k += 1\nplt.tight_layout();","af3fbad8":"def test_stationarity(y, cf_lags=40):\n    # Augmented Dickey-Fuller test:\n    dftest = smt.adfuller(y)\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic', 'p-value', '#Lags Used', 'Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print(dfoutput)\n    # uselful plots\n    fig, ax = plt.subplots(3, 2, figsize=(18,10))\n    colors = sns.color_palette()\n    ax[0,0].plot(y, color=colors[2])\n    ax[0,0].set_title('Time Series')\n    ax[0,1].hist(y, 40, color=colors[1], alpha=0.75)\n    ax[0,1].set_title('Histogram')\n    smt.graphics.plot_acf(y, lags=cf_lags, ax=ax[1,0], color=colors[9])\n    ax[1,0].set_title('Autocorrelation Function')\n    smt.graphics.plot_pacf(y, lags=cf_lags, ax=ax[1,1], color=colors[3])\n    ax[1,1].set_title('Partial Autocorrelation Function')\n    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    M_std = y.groupby(y.index.month).std()\n    sns.barplot(months, M_std, ax=ax[2,0], color=colors[4])\n    ax[2,0].set_title('Monthly Standard Deviation')\n    M_avg = y.groupby(y.index.month).mean()\n    sns.barplot(months, M_avg, ax=ax[2,1], color=colors[6])\n    ax[2,1].set_title('Monthly Mean Value')\n    plt.tight_layout()","5e3cf3f2":"# remove trend\ny = new_train['cash_in_echannel'].diff(1).dropna()\n# get series with invariant std\nM_std = y.groupby(y.index.month).std()\ny = y \/ y.index.map(lambda x: M_std.loc[x.month])\n# get series with zero mean\nM_mu = y.groupby(y.index.month).mean()\ny = y - y.index.map(lambda x: M_mu.loc[x.month])\n# test\ntest_stationarity(y)","558d7187":"# remove trend\ny = new_train['cash_out_echannel'].diff(1).dropna()\n# get series with invariant std\nM_std = y.groupby(y.index.month).std()\ny = y \/ y.index.map(lambda x: M_std.loc[x.month])\n# get series with zero mean\nM_mu = y.groupby(y.index.month).mean()\ny = y - y.index.map(lambda x: M_mu.loc[x.month])\n# test\ntest_stationarity(y)","855a29c0":"# remove trend\ny = new_train['cash_in_kantor'].diff(1).dropna()\n# get series with invariant std\nM_std = y.groupby(y.index.month).std()\ny = y \/ y.index.map(lambda x: M_std.loc[x.month])\n# get series with zero mean\nM_mu = y.groupby(y.index.month).mean()\ny = y - y.index.map(lambda x: M_mu.loc[x.month])\n# test\ntest_stationarity(y)","2bc33b2d":"# remove trend\ny = new_train['cash_out_kantor'].diff(1).dropna()\n# get series with invariant std\nM_std = y.groupby(y.index.month).std()\ny = y \/ y.index.map(lambda x: M_std.loc[x.month])\n# get series with zero mean\nM_mu = y.groupby(y.index.month).mean()\ny = y - y.index.map(lambda x: M_mu.loc[x.month])\n# test\ntest_stationarity(y)","58fa4b74":"# remove trend\ny = new_train['giro'].diff(1).dropna()\n# get series with invariant std\nM_std = y.groupby(y.index.month).std()\ny = y \/ y.index.map(lambda x: M_std.loc[x.month])\n# get series with zero mean\nM_mu = y.groupby(y.index.month).mean()\ny = y - y.index.map(lambda x: M_mu.loc[x.month])\n# test\ntest_stationarity(y)","1cf7f163":"# remove trend\ny = new_train['deposito'].diff(1).dropna()\n# get series with invariant std\nM_std = y.groupby(y.index.month).std()\ny = y \/ y.index.map(lambda x: M_std.loc[x.month])\n# get series with zero mean\nM_mu = y.groupby(y.index.month).mean()\ny = y - y.index.map(lambda x: M_mu.loc[x.month])\n# test\ntest_stationarity(y)","acc17abb":"# remove trend\ny = new_train['kewajiban_lain'].diff(1).dropna()\n# get series with invariant std\nM_std = y.groupby(y.index.month).std()\ny = y \/ y.index.map(lambda x: M_std.loc[x.month])\n# get series with zero mean\nM_mu = y.groupby(y.index.month).mean()\ny = y - y.index.map(lambda x: M_mu.loc[x.month])\n# test\ntest_stationarity(y)","69d4fe08":"# remove trend\ny = new_train['tabungan'].diff(1).diff(1).dropna()\n# get series with invariant std\nM_std = y.groupby(y.index.month).std()\ny = y \/ y.index.map(lambda x: M_std.loc[x.month])\n# get series with zero mean\nM_mu = y.groupby(y.index.month).mean()\ny = y - y.index.map(lambda x: M_mu.loc[x.month])\n# test\ntest_stationarity(y)","3d3beea1":"# remove trend\ny = new_train['rata_dpk_mingguan'].diff(1).dropna()\n# get series with invariant std\nM_std = y.groupby(y.index.month).std()\ny = y \/ y.index.map(lambda x: M_std.loc[x.month])\n# get series with zero mean\nM_mu = y.groupby(y.index.month).mean()\ny = y - y.index.map(lambda x: M_mu.loc[x.month])\n# test\ntest_stationarity(y)","17b79f00":"# remove trend\ny = new_train['kas_kantor'].diff(1).diff(1).dropna()\n# get series with invariant std\nM_std = y.groupby(y.index.month).std()\ny = y \/ y.index.map(lambda x: M_std.loc[x.month])\n# get series with zero mean\nM_mu = y.groupby(y.index.month).mean()\ny = y - y.index.map(lambda x: M_mu.loc[x.month])\n# test\ntest_stationarity(y)","7cc5b93c":"# remove trend\ny = new_train['kas_echannel'].diff(1).dropna()\n# get series with invariant std\nM_std = y.groupby(y.index.month).std()\ny = y \/ y.index.map(lambda x: M_std.loc[x.month])\n# get series with zero mean\nM_mu = y.groupby(y.index.month).mean()\ny = y - y.index.map(lambda x: M_mu.loc[x.month])\n# test\ntest_stationarity(y)","99616af3":"# Stationarity Check","7435a07a":"### <p style='color:blue'> cash_out_kantor <\/p>","06f6c818":"### <p style='color:blue'> cash_out_echannel <\/p>","cd76826f":"# Missing Dates","2d82f99b":"### <p style='color:blue'> cash_in_kantor <\/p>","bbeb29ab":"# 2019 vs 2020 (Aug-Sept)","0091219a":"### <p style='color:blue'> giro <\/p>","786639a5":"# Correlations","e6d6677a":"# Yearly Seasonality","d22d5030":"### <p style='color:blue'> deposito <\/p>","3a7ecade":"### <p style='color:blue'> kas_kantor <\/p>","77412809":"### <p style='color:blue'> tabungan <\/p>","8d75a048":"# Targets Check","a46fcbcf":"# Weekly Seasonality","bf933261":"### <p style='color:blue'> kewajiban_lain <\/p>","02c10484":"### <p style='color:blue'> rata_dpk_mingguan <\/p>","f09f3b7a":"# Before & After 2020-04-01","0b930fe3":"# Outliers","61a06f0f":"# Show Raw Data","34efacbf":"# Decomposition","a1f02ade":"### <p style='color:blue'> kas_echannel <\/p>","3606a5ff":"### <p style='color:blue'> cash_in_echannel <\/p>","41cf35f5":"# Load Data"}}