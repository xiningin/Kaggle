{"cell_type":{"49babf21":"code","54c82906":"code","c9db49f8":"code","ef165ffc":"code","07f50283":"code","74f17798":"code","e425b1ff":"code","ce202b1f":"code","886a66cc":"code","1211f0c8":"code","e9582e34":"code","f975f972":"code","edff793c":"code","d1b108fc":"code","4f29e13f":"code","124e83e7":"code","c691b419":"code","86f82189":"code","354bf456":"code","c2806dc2":"code","3a30ee36":"code","6f1666a9":"code","58602936":"code","285c5017":"code","0747ea5e":"code","7bbe9a43":"code","1909dcce":"code","c82f4f68":"code","1453635e":"code","6e40476c":"code","0a2c41c2":"code","2a194b08":"code","def4edb4":"code","46503246":"code","4e3a9664":"code","b8671974":"code","d2d1779c":"code","9004b5de":"code","9c2b43ad":"code","a5eaeaa1":"code","0e6989f2":"code","f2b3e141":"code","3d50211d":"code","aa0f2667":"code","4b4d026b":"code","e2d229cf":"code","4f7c1481":"code","ddbac093":"code","c582bdb2":"code","d2ef7d17":"code","46100c57":"code","32cca664":"code","619e0674":"code","d909e218":"code","fdba5a9b":"code","f340a189":"code","8a77f848":"code","5c0612c6":"code","38e3441d":"code","6e4af3ec":"code","b5c00a12":"code","407533d4":"code","229d930e":"code","9af34a18":"code","4d32b23f":"code","11e4e38f":"code","5d24c03a":"code","1b4226e5":"code","a02ab62d":"code","0de09e4d":"code","e2214c5a":"code","53451cb5":"code","71691244":"code","81e106a7":"code","65d0fbc2":"code","faced1e3":"code","4e157c39":"code","6f45d342":"code","37ffbf0e":"code","f6c631a0":"code","ab11fc07":"code","e30cf30e":"code","ceccdf31":"markdown","1e6c09ec":"markdown","32a3858c":"markdown","9536c5b3":"markdown","c2ef15e3":"markdown"},"source":{"49babf21":"from sklearn.preprocessing import StandardScaler\nfrom sklearn import preprocessing\nfrom sklearn import metrics \nfrom scipy.spatial.distance import cdist \nfrom sklearn.decomposition import PCA\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","54c82906":"pd.set_option('display.max_columns', 999)","c9db49f8":"import pandas as pd\nfrom kmodes.kmodes import KModes\nUCI_Credit_Card = pd.read_csv(\"..\/input\/default-of-credit-card-clients-dataset\/UCI_Credit_Card.csv\")","ef165ffc":"UCI_Credit_Card.head()","07f50283":"UCI_Credit_Card.describe()","74f17798":"UCI_Credit_Card.info()","e425b1ff":"fig, axes = plt.subplots(nrows = 2, figsize = (20,20))\ng = sns.distplot(UCI_Credit_Card['LIMIT_BAL'], ax = axes[0])\ng.axes.set_xlim = (0,1000000)\ng = sns.boxplot(UCI_Credit_Card['LIMIT_BAL'], ax = axes[1])\ng.axes.set_xlim = (0,1000000)","ce202b1f":"UCI_Credit_Card['LIM_CREDITO'] = np.where((UCI_Credit_Card['LIMIT_BAL'] < UCI_Credit_Card['LIMIT_BAL'].quantile(0.25)),1,\n                                     np.where((UCI_Credit_Card['LIMIT_BAL'] >= UCI_Credit_Card['LIMIT_BAL'].quantile(0.25)) & (UCI_Credit_Card['LIMIT_BAL'] < UCI_Credit_Card['LIMIT_BAL'].quantile(0.50)),2,\n                                      np.where((UCI_Credit_Card['LIMIT_BAL'] >= UCI_Credit_Card['LIMIT_BAL'].quantile(0.50)) & (UCI_Credit_Card['LIMIT_BAL'] < UCI_Credit_Card['LIMIT_BAL'].quantile(0.75)),3,\n                                      np.where((UCI_Credit_Card['LIMIT_BAL'] >= UCI_Credit_Card['LIMIT_BAL'].quantile(0.75)) & (UCI_Credit_Card['LIMIT_BAL'] < UCI_Credit_Card['LIMIT_BAL'].quantile(0.95)),4,\n                                      5))))","886a66cc":"sns.countplot(UCI_Credit_Card['LIM_CREDITO'])","1211f0c8":"sns.countplot(UCI_Credit_Card['SEX'])","e9582e34":"sns.countplot(UCI_Credit_Card['EDUCATION'])","f975f972":"sns.countplot(UCI_Credit_Card['MARRIAGE'])","edff793c":"fig, axes = plt.subplots(nrows = 2, figsize = (20,20))\ng = sns.distplot(UCI_Credit_Card['AGE'], ax = axes[0])\ng.axes.set_xlim = (0,90)\ng = sns.boxplot(UCI_Credit_Card['AGE'], ax = axes[1])\ng.axes.set_xlim = (0,90)\nplt.show()\n\nUCI_Credit_Card['AGE'].describe()","d1b108fc":"UCI_Credit_Card['EDAD'] = np.where(UCI_Credit_Card['AGE'] <= UCI_Credit_Card['AGE'].quantile(0.25), 1,\n                                   np.where((UCI_Credit_Card['AGE'] > UCI_Credit_Card['AGE'].quantile(0.25)) & (UCI_Credit_Card['AGE'] <= UCI_Credit_Card['AGE'].quantile(0.50)), 2,\n                                            np.where((UCI_Credit_Card['AGE'] > UCI_Credit_Card['AGE'].quantile(0.50)) & (UCI_Credit_Card['AGE'] <= UCI_Credit_Card['AGE'].quantile(0.75)), 3,\n                                                     np.where((UCI_Credit_Card['AGE'] > UCI_Credit_Card['AGE'].quantile(0.75)) & (UCI_Credit_Card['AGE'] <= UCI_Credit_Card['AGE'].quantile(0.95)), 4, 5                                                     \n                                                     )\n                                            )\n                                   )\n                                  )","4f29e13f":"sns.countplot(UCI_Credit_Card['EDAD'])","124e83e7":"sns.countplot(UCI_Credit_Card['PAY_0'])\nplt.show()\nUCI_Credit_Card['PAY_0'].describe()","c691b419":"UCI_Credit_Card['PAT_0'] = np.where(UCI_Credit_Card['PAY_0'] < 0.0, 1, \n                                     np.where(UCI_Credit_Card['PAY_0'] == 0.0, 2,\n                                              np.where(UCI_Credit_Card['PAY_0'] > 0.0, 3,4\n                                              )\n                                             )\n                                     )","86f82189":"UCI_Credit_Card.head(10)","354bf456":"sns.countplot(UCI_Credit_Card['PAT_0'])\nplt.show()\nUCI_Credit_Card['PAT_0'].describe()\nUCI_Credit_Card['PAT_0'].value_counts()","c2806dc2":"sns.countplot(UCI_Credit_Card['PAY_2'])\nplt.show()\nUCI_Credit_Card['PAY_2'].describe()","3a30ee36":"UCI_Credit_Card['PAT_2'] = np.where(UCI_Credit_Card['PAY_2'] < 0.0, 1, \n                                     np.where(UCI_Credit_Card['PAY_2'] == 0.0, 2,\n                                              np.where(UCI_Credit_Card['PAY_2'] > 0.0, 3,4\n                                              )\n                                             )\n                                     )","6f1666a9":"sns.countplot(UCI_Credit_Card['PAY_3'])\nplt.show()\nUCI_Credit_Card['PAY_3'].describe()","58602936":"UCI_Credit_Card['PAT_3'] = np.where(UCI_Credit_Card['PAY_3'] < 0.0, 1, \n                                     np.where(UCI_Credit_Card['PAY_3'] == 0.0, 2,\n                                              np.where(UCI_Credit_Card['PAY_3'] > 0.0, 3,4\n                                              )\n                                             )\n                                     )","285c5017":"sns.countplot(UCI_Credit_Card['PAT_3'])","0747ea5e":"sns.countplot(UCI_Credit_Card['PAY_4'])\nplt.show()\nUCI_Credit_Card['PAY_4'].describe()","7bbe9a43":"UCI_Credit_Card['PAT_4'] = np.where(UCI_Credit_Card['PAY_4'] < 0.0, 1, \n                                     np.where(UCI_Credit_Card['PAY_4'] == 0.0, 2,\n                                              np.where(UCI_Credit_Card['PAY_4'] > 0.0, 3,4\n                                              )\n                                             )\n                                     )","1909dcce":"sns.countplot(UCI_Credit_Card['PAY_5'])\nplt.show()\nUCI_Credit_Card['PAY_5'].describe()","c82f4f68":"UCI_Credit_Card['PAT_5'] = np.where(UCI_Credit_Card['PAY_5'] < 0.0, 1, \n                                     np.where(UCI_Credit_Card['PAY_5'] == 0.0, 2,\n                                              np.where(UCI_Credit_Card['PAY_5'] > 0.0, 3,4\n                                              )\n                                             )\n                                     )","1453635e":"sns.countplot(UCI_Credit_Card['PAY_6'])\nplt.show()\nUCI_Credit_Card['PAY_6'].describe()","6e40476c":"UCI_Credit_Card['PAT_6'] = np.where(UCI_Credit_Card['PAY_6'] < 0.0, 1, \n                                     np.where(UCI_Credit_Card['PAY_6'] == 0.0, 2,\n                                              np.where(UCI_Credit_Card['PAY_6'] > 0.0, 3,4\n                                              )\n                                             )\n                                     )","0a2c41c2":"UCI_Credit_Card.describe()","2a194b08":"fig, axes = plt.subplots(nrows = 2, figsize = (10,10))\ng = sns.distplot(UCI_Credit_Card['BILL_AMT1'], ax = axes[0])\ng.axes.set_xlim = (0,1000000)\ng = sns.boxplot(UCI_Credit_Card['BILL_AMT1'], ax = axes[1])\ng.axes.set_xlim = (0,1000000)\nplt.show()\nUCI_Credit_Card['BILL_AMT1'].describe()","def4edb4":"UCI_Credit_Card['B_AMT1'] = np.where((UCI_Credit_Card['BILL_AMT1'] < UCI_Credit_Card['BILL_AMT1'].quantile(0.25)),1,\n                                     np.where((UCI_Credit_Card['BILL_AMT1'] >= UCI_Credit_Card['BILL_AMT1'].quantile(0.25)) & (UCI_Credit_Card['BILL_AMT1'] < UCI_Credit_Card['BILL_AMT1'].quantile(0.50)),2,\n                                      np.where((UCI_Credit_Card['BILL_AMT1'] >= UCI_Credit_Card['BILL_AMT1'].quantile(0.50)) & (UCI_Credit_Card['BILL_AMT1'] < UCI_Credit_Card['BILL_AMT1'].quantile(0.75)),3,\n                                      np.where((UCI_Credit_Card['BILL_AMT1'] >= UCI_Credit_Card['BILL_AMT1'].quantile(0.75)) & (UCI_Credit_Card['BILL_AMT1'] < UCI_Credit_Card['BILL_AMT1'].quantile(0.95)),4,\n                                      5))))\n\n#UCI_Credit_Card[['BILL_AMT1','B_AMT1']].head(10)\nUCI_Credit_Card.head(10)","46503246":"UCI_Credit_Card.describe()","4e3a9664":"sns.countplot(UCI_Credit_Card['B_AMT1'])","b8671974":"fig, axes = plt.subplots(nrows = 2, figsize = (10,10))\ng = sns.distplot(UCI_Credit_Card['BILL_AMT2'], ax = axes[0])\ng.axes.set_xlim = (0,1000000)\ng = sns.boxplot(UCI_Credit_Card['BILL_AMT2'], ax = axes[1])\ng.axes.set_xlim = (0,1000000)\nplt.show()\nUCI_Credit_Card['BILL_AMT2'].describe()","d2d1779c":"UCI_Credit_Card['B_AMT2'] = np.where((UCI_Credit_Card['BILL_AMT2'] < UCI_Credit_Card['BILL_AMT2'].quantile(0.25)),1,\n                                     np.where((UCI_Credit_Card['BILL_AMT2'] >= UCI_Credit_Card['BILL_AMT2'].quantile(0.25)) & (UCI_Credit_Card['BILL_AMT2'] < UCI_Credit_Card['BILL_AMT2'].quantile(0.50)),2,\n                                      np.where((UCI_Credit_Card['BILL_AMT2'] >= UCI_Credit_Card['BILL_AMT2'].quantile(0.50)) & (UCI_Credit_Card['BILL_AMT2'] < UCI_Credit_Card['BILL_AMT2'].quantile(0.75)),3,\n                                      np.where((UCI_Credit_Card['BILL_AMT2'] >= UCI_Credit_Card['BILL_AMT2'].quantile(0.75)) & (UCI_Credit_Card['BILL_AMT2'] < UCI_Credit_Card['BILL_AMT2'].quantile(0.95)),4,\n                                      5))))\n\nUCI_Credit_Card.head(10)","9004b5de":"fig, axes = plt.subplots(nrows = 2, figsize = (10,10))\ng = sns.distplot(UCI_Credit_Card['BILL_AMT3'], ax = axes[0])\ng.axes.set_xlim = (0,1000000)\ng = sns.boxplot(UCI_Credit_Card['BILL_AMT3'], ax = axes[1])\ng.axes.set_xlim = (0,1000000)\nplt.show()\nUCI_Credit_Card['BILL_AMT3'].describe()","9c2b43ad":"UCI_Credit_Card['B_AMT3'] = np.where((UCI_Credit_Card['BILL_AMT3'] < UCI_Credit_Card['BILL_AMT3'].quantile(0.25)),1,\n                                     np.where((UCI_Credit_Card['BILL_AMT3'] >= UCI_Credit_Card['BILL_AMT3'].quantile(0.25)) & (UCI_Credit_Card['BILL_AMT3'] < UCI_Credit_Card['BILL_AMT3'].quantile(0.50)),2,\n                                      np.where((UCI_Credit_Card['BILL_AMT3'] >= UCI_Credit_Card['BILL_AMT3'].quantile(0.50)) & (UCI_Credit_Card['BILL_AMT3'] < UCI_Credit_Card['BILL_AMT3'].quantile(0.75)),3,\n                                      np.where((UCI_Credit_Card['BILL_AMT3'] >= UCI_Credit_Card['BILL_AMT3'].quantile(0.75)) & (UCI_Credit_Card['BILL_AMT3'] < UCI_Credit_Card['BILL_AMT3'].quantile(0.95)),4,\n                                      5))))\n\n#UCI_Credit_Card[['BILL_AMT1','B_AMT1']].head(10)\nUCI_Credit_Card.head(10)","a5eaeaa1":"fig, axes = plt.subplots(nrows = 2, figsize = (10,10))\ng = sns.distplot(UCI_Credit_Card['BILL_AMT4'], ax = axes[0])\ng.axes.set_xlim = (0,1000000)\ng = sns.boxplot(UCI_Credit_Card['BILL_AMT4'], ax = axes[1])\ng.axes.set_xlim = (0,1000000)\nplt.show()\nUCI_Credit_Card['BILL_AMT4'].describe()","0e6989f2":"UCI_Credit_Card['B_AMT4'] = np.where((UCI_Credit_Card['BILL_AMT4'] < UCI_Credit_Card['BILL_AMT4'].quantile(0.25)),1,\n                                     np.where((UCI_Credit_Card['BILL_AMT4'] >= UCI_Credit_Card['BILL_AMT4'].quantile(0.25)) & (UCI_Credit_Card['BILL_AMT4'] < UCI_Credit_Card['BILL_AMT4'].quantile(0.50)),2,\n                                      np.where((UCI_Credit_Card['BILL_AMT4'] >= UCI_Credit_Card['BILL_AMT4'].quantile(0.50)) & (UCI_Credit_Card['BILL_AMT4'] < UCI_Credit_Card['BILL_AMT4'].quantile(0.75)),3,\n                                      np.where((UCI_Credit_Card['BILL_AMT4'] >= UCI_Credit_Card['BILL_AMT4'].quantile(0.75)) & (UCI_Credit_Card['BILL_AMT4'] < UCI_Credit_Card['BILL_AMT4'].quantile(0.95)),4,\n                                      5))))\n\n#UCI_Credit_Card[['BILL_AMT1','B_AMT1']].head(10)\nUCI_Credit_Card.head(10)","f2b3e141":"fig, axes = plt.subplots(nrows = 2, figsize = (10,10))\ng = sns.distplot(UCI_Credit_Card['BILL_AMT5'], ax = axes[0])\ng.axes.set_xlim = (0,1000000)\ng = sns.boxplot(UCI_Credit_Card['BILL_AMT5'], ax = axes[1])\ng.axes.set_xlim = (0,1000000)\nplt.show()\nUCI_Credit_Card['BILL_AMT5'].describe()","3d50211d":"UCI_Credit_Card['B_AMT5'] = np.where((UCI_Credit_Card['BILL_AMT5'] < UCI_Credit_Card['BILL_AMT5'].quantile(0.25)),1,\n                                     np.where((UCI_Credit_Card['BILL_AMT5'] >= UCI_Credit_Card['BILL_AMT5'].quantile(0.25)) & (UCI_Credit_Card['BILL_AMT5'] < UCI_Credit_Card['BILL_AMT5'].quantile(0.50)),2,\n                                      np.where((UCI_Credit_Card['BILL_AMT5'] >= UCI_Credit_Card['BILL_AMT5'].quantile(0.50)) & (UCI_Credit_Card['BILL_AMT5'] < UCI_Credit_Card['BILL_AMT5'].quantile(0.75)),3,\n                                      np.where((UCI_Credit_Card['BILL_AMT5'] >= UCI_Credit_Card['BILL_AMT5'].quantile(0.75)) & (UCI_Credit_Card['BILL_AMT5'] < UCI_Credit_Card['BILL_AMT5'].quantile(0.95)),4,\n                                      5))))\n\n#UCI_Credit_Card[['BILL_AMT1','B_AMT1']].head(10)\nUCI_Credit_Card.head(10)","aa0f2667":"fig, axes = plt.subplots(nrows = 2, figsize = (10,10))\ng = sns.distplot(UCI_Credit_Card['BILL_AMT6'], ax = axes[0])\ng.axes.set_xlim = (0,1000000)\ng = sns.boxplot(UCI_Credit_Card['BILL_AMT6'], ax = axes[1])\ng.axes.set_xlim = (0,1000000)\nplt.show()\nUCI_Credit_Card['BILL_AMT6'].describe()","4b4d026b":"UCI_Credit_Card['B_AMT6'] = np.where((UCI_Credit_Card['BILL_AMT6'] < UCI_Credit_Card['BILL_AMT6'].quantile(0.25)),1,\n                                     np.where((UCI_Credit_Card['BILL_AMT6'] >= UCI_Credit_Card['BILL_AMT6'].quantile(0.25)) & (UCI_Credit_Card['BILL_AMT6'] < UCI_Credit_Card['BILL_AMT6'].quantile(0.50)),2,\n                                      np.where((UCI_Credit_Card['BILL_AMT6'] >= UCI_Credit_Card['BILL_AMT6'].quantile(0.50)) & (UCI_Credit_Card['BILL_AMT6'] < UCI_Credit_Card['BILL_AMT6'].quantile(0.75)),3,\n                                      np.where((UCI_Credit_Card['BILL_AMT6'] >= UCI_Credit_Card['BILL_AMT6'].quantile(0.75)) & (UCI_Credit_Card['BILL_AMT6'] < UCI_Credit_Card['BILL_AMT6'].quantile(0.95)),4,\n                                      5))))\n\n#UCI_Credit_Card[['BILL_AMT1','B_AMT1']].head(10)\nUCI_Credit_Card.head(10)","e2d229cf":"fig, axes = plt.subplots(nrows = 2, figsize = (10,10))\ng = sns.distplot(UCI_Credit_Card['PAY_AMT1'], ax = axes[0])\ng.axes.set_xlim = (0,1000000)\ng = sns.boxplot(UCI_Credit_Card['PAY_AMT1'], ax = axes[1])\ng.axes.set_xlim = (0,1000000)\nplt.show()\nUCI_Credit_Card['PAY_AMT1'].describe()","4f7c1481":"UCI_Credit_Card['P_AMT1'] = np.where(UCI_Credit_Card['PAY_AMT1'] <= UCI_Credit_Card['PAY_AMT1'].quantile(0.25),1,\n                                     np.where((UCI_Credit_Card['PAY_AMT1'] > UCI_Credit_Card['PAY_AMT1'].quantile(0.25)) & (UCI_Credit_Card['PAY_AMT1'] <= UCI_Credit_Card['PAY_AMT1'].quantile(0.50)),2,\n                                              np.where((UCI_Credit_Card['PAY_AMT1'] > UCI_Credit_Card['PAY_AMT1'].quantile(0.50)) & (UCI_Credit_Card['PAY_AMT1'] <= UCI_Credit_Card['PAY_AMT1'].quantile(0.75)),3,\n                                                                np.where((UCI_Credit_Card['PAY_AMT1'] > UCI_Credit_Card['PAY_AMT1'].quantile(0.75)) & (UCI_Credit_Card['PAY_AMT1'] <= UCI_Credit_Card['PAY_AMT1'].quantile(0.95)),4,\n                                                                         5))))","ddbac093":"UCI_Credit_Card[['PAY_AMT1','P_AMT1']].head(10)","c582bdb2":"fig, axes = plt.subplots(nrows = 2, figsize = (10,10))\ng = sns.distplot(UCI_Credit_Card['PAY_AMT2'], ax = axes[0])\ng.axes.set_xlim = (0,1000000)\ng = sns.boxplot(UCI_Credit_Card['PAY_AMT2'], ax = axes[1])\ng.axes.set_xlim = (0,1000000)\nplt.show()\nUCI_Credit_Card['PAY_AMT2'].describe()","d2ef7d17":"UCI_Credit_Card['P_AMT2'] = np.where(UCI_Credit_Card['PAY_AMT2'] <= UCI_Credit_Card['PAY_AMT2'].quantile(0.25),1,\n                                     np.where((UCI_Credit_Card['PAY_AMT2'] > UCI_Credit_Card['PAY_AMT2'].quantile(0.25)) & (UCI_Credit_Card['PAY_AMT2'] <= UCI_Credit_Card['PAY_AMT2'].quantile(0.50)),2,\n                                              np.where((UCI_Credit_Card['PAY_AMT2'] > UCI_Credit_Card['PAY_AMT2'].quantile(0.50)) & (UCI_Credit_Card['PAY_AMT2'] <= UCI_Credit_Card['PAY_AMT2'].quantile(0.75)),3,\n                                                                np.where((UCI_Credit_Card['PAY_AMT2'] > UCI_Credit_Card['PAY_AMT2'].quantile(0.75)) & (UCI_Credit_Card['PAY_AMT2'] <= UCI_Credit_Card['PAY_AMT2'].quantile(0.95)),4,\n                                                                         5))))","46100c57":"fig, axes = plt.subplots(nrows = 2, figsize = (10,10))\ng = sns.distplot(UCI_Credit_Card['PAY_AMT3'], ax = axes[0])\ng.axes.set_xlim = (0,1000000)\ng = sns.boxplot(UCI_Credit_Card['PAY_AMT3'], ax = axes[1])\ng.axes.set_xlim = (0,1000000)\nplt.show()\nUCI_Credit_Card['PAY_AMT3'].describe()","32cca664":"UCI_Credit_Card['P_AMT3'] = np.where(UCI_Credit_Card['PAY_AMT3'] <= UCI_Credit_Card['PAY_AMT3'].quantile(0.25),1,\n                                     np.where((UCI_Credit_Card['PAY_AMT3'] > UCI_Credit_Card['PAY_AMT3'].quantile(0.25)) & (UCI_Credit_Card['PAY_AMT3'] <= UCI_Credit_Card['PAY_AMT1'].quantile(0.50)),2,\n                                              np.where((UCI_Credit_Card['PAY_AMT3'] > UCI_Credit_Card['PAY_AMT3'].quantile(0.50)) & (UCI_Credit_Card['PAY_AMT1'] <= UCI_Credit_Card['PAY_AMT1'].quantile(0.75)),3,\n                                                                np.where((UCI_Credit_Card['PAY_AMT3'] > UCI_Credit_Card['PAY_AMT3'].quantile(0.75)) & (UCI_Credit_Card['PAY_AMT1'] <= UCI_Credit_Card['PAY_AMT1'].quantile(0.95)),4,\n                                                                         5))))","619e0674":"fig, axes = plt.subplots(nrows = 2, figsize = (10,10))\ng = sns.distplot(UCI_Credit_Card['PAY_AMT4'], ax = axes[0])\ng.axes.set_xlim = (0,1000000)\ng = sns.boxplot(UCI_Credit_Card['PAY_AMT4'], ax = axes[1])\ng.axes.set_xlim = (0,1000000)\nplt.show()\nUCI_Credit_Card['PAY_AMT4'].describe()","d909e218":"UCI_Credit_Card['P_AMT4'] = np.where(UCI_Credit_Card['PAY_AMT4'] <= UCI_Credit_Card['PAY_AMT4'].quantile(0.25),1,\n                                     np.where((UCI_Credit_Card['PAY_AMT4'] > UCI_Credit_Card['PAY_AMT4'].quantile(0.25)) & (UCI_Credit_Card['PAY_AMT4'] <= UCI_Credit_Card['PAY_AMT4'].quantile(0.50)),2,\n                                              np.where((UCI_Credit_Card['PAY_AMT4'] > UCI_Credit_Card['PAY_AMT4'].quantile(0.50)) & (UCI_Credit_Card['PAY_AMT4'] <= UCI_Credit_Card['PAY_AMT4'].quantile(0.75)),3,\n                                                                np.where((UCI_Credit_Card['PAY_AMT4'] > UCI_Credit_Card['PAY_AMT4'].quantile(0.75)) & (UCI_Credit_Card['PAY_AMT4'] <= UCI_Credit_Card['PAY_AMT4'].quantile(0.95)),4,\n                                                                         5))))","fdba5a9b":"fig, axes = plt.subplots(nrows = 2, figsize = (10,10))\ng = sns.distplot(UCI_Credit_Card['PAY_AMT5'], ax = axes[0])\ng.axes.set_xlim = (0,1000000)\ng = sns.boxplot(UCI_Credit_Card['PAY_AMT5'], ax = axes[1])\ng.axes.set_xlim = (0,1000000)\nplt.show()\nUCI_Credit_Card['PAY_AMT5'].describe()","f340a189":"UCI_Credit_Card['P_AMT5'] = np.where(UCI_Credit_Card['PAY_AMT5'] <= UCI_Credit_Card['PAY_AMT5'].quantile(0.25),1,\n                                     np.where((UCI_Credit_Card['PAY_AMT5'] > UCI_Credit_Card['PAY_AMT5'].quantile(0.25)) & (UCI_Credit_Card['PAY_AMT5'] <= UCI_Credit_Card['PAY_AMT5'].quantile(0.50)),2,\n                                              np.where((UCI_Credit_Card['PAY_AMT5'] > UCI_Credit_Card['PAY_AMT5'].quantile(0.50)) & (UCI_Credit_Card['PAY_AMT5'] <= UCI_Credit_Card['PAY_AMT5'].quantile(0.75)),3,\n                                                                np.where((UCI_Credit_Card['PAY_AMT5'] > UCI_Credit_Card['PAY_AMT5'].quantile(0.75)) & (UCI_Credit_Card['PAY_AMT5'] <= UCI_Credit_Card['PAY_AMT5'].quantile(0.95)),4,\n                                                                         5))))","8a77f848":"fig, axes = plt.subplots(nrows = 2, figsize = (10,10))\ng = sns.distplot(UCI_Credit_Card['PAY_AMT6'], ax = axes[0])\ng.axes.set_xlim = (0,1000000)\ng = sns.boxplot(UCI_Credit_Card['PAY_AMT6'], ax = axes[1])\ng.axes.set_xlim = (0,1000000)\nplt.show()\nUCI_Credit_Card['PAY_AMT6'].describe()","5c0612c6":"UCI_Credit_Card['P_AMT6'] = np.where(UCI_Credit_Card['PAY_AMT6'] <= UCI_Credit_Card['PAY_AMT6'].quantile(0.25),1,\n                                     np.where((UCI_Credit_Card['PAY_AMT6'] > UCI_Credit_Card['PAY_AMT6'].quantile(0.25)) & (UCI_Credit_Card['PAY_AMT6'] <= UCI_Credit_Card['PAY_AMT6'].quantile(0.50)),2,\n                                              np.where((UCI_Credit_Card['PAY_AMT6'] > UCI_Credit_Card['PAY_AMT6'].quantile(0.50)) & (UCI_Credit_Card['PAY_AMT6'] <= UCI_Credit_Card['PAY_AMT6'].quantile(0.75)),3,\n                                                                np.where((UCI_Credit_Card['PAY_AMT6'] > UCI_Credit_Card['PAY_AMT6'].quantile(0.75)) & (UCI_Credit_Card['PAY_AMT6'] <= UCI_Credit_Card['PAY_AMT6'].quantile(0.95)),4,\n                                                                         5))))","38e3441d":"UCI_Credit_Card.info()","6e4af3ec":"#pd.get_dummies(df_test, columns=['PAY_0'])","b5c00a12":"df_test = UCI_Credit_Card.filter([\n    'PAT_0',\n    'PAT_2',\n    'PAT_3',\n    'PAT_4',\n    'PAT_5',\n    'PAT_6',\n    'B_AMT1',\n    'B_AMT2',\n    'B_AMT3',\n    'B_AMT4',\n    'B_AMT5',\n    'B_AMT6',\n    'P_AMT1',\n    'P_AMT2',\n    'P_AMT3',\n    'P_AMT4',\n    'P_AMT5',\n    'P_AMT6'])","407533d4":"df_test_dummies = pd.get_dummies(df_test,\ncolumns = ['PAT_0',\n    'PAT_2',\n    'PAT_3',\n    'PAT_4',\n    'PAT_5',\n    'PAT_6',\n    'B_AMT1',\n    'B_AMT2',\n    'B_AMT3',\n    'B_AMT4',\n    'B_AMT5',\n    'B_AMT6',\n    'P_AMT1',\n    'P_AMT2',\n    'P_AMT3',\n    'P_AMT4',\n    'P_AMT5',\n    'P_AMT6'])","229d930e":" df_test_dummies.info()","9af34a18":"cost = []\nfor num_clusters in list(range(1,4)):\n    kmode = KModes(n_clusters=num_clusters, init = \"Cao\", n_init = 1, verbose=1)\n    kmode.fit_predict(df_test_dummies)\n    cost.append(kmode.cost_)","4d32b23f":"y = np.array([i for i in range(1,4,1)])\nplt.plot(y,cost)","11e4e38f":"km = KModes(n_clusters = 2, init = \"Cao\", n_init = 1, verbose=1)\nfitClusters = km.fit_predict(df_test_dummies)","5d24c03a":"df_test_fin = UCI_Credit_Card.reset_index()\nclustersDf = pd.DataFrame(fitClusters)\nclustersDf.columns = ['cluster']\ncombinedDf = pd.concat([df_test_fin, clustersDf], axis = 1).reset_index()\ncombinedDf = combinedDf.drop(['index', 'level_0'], axis = 1)","1b4226e5":"combinedDf.head()","a02ab62d":"combinedDf.info()","0de09e4d":"sns.countplot(combinedDf['cluster'])","e2214c5a":"plt.subplots(figsize = (20,10))\nsns.countplot(x = combinedDf['EDUCATION'], order = combinedDf['EDUCATION'].value_counts().index,hue=combinedDf['cluster'])\nplt.show()","53451cb5":"plt.subplots(figsize = (10,5))\nsns.countplot(x = combinedDf['MARRIAGE'], order = combinedDf['MARRIAGE'].value_counts().index,hue=combinedDf['cluster'])\nplt.show()","71691244":"dissimilarity = combinedDf[['ID','PAY_0','PAY_6','cluster']]","81e106a7":"dissimilarity_c1 = dissimilarity[dissimilarity['cluster'] == 0]","65d0fbc2":"pd.crosstab(dissimilarity_c1['PAY_0'],\n            dissimilarity_c1['PAY_6'],\n            margins = True\n)","faced1e3":"dissimilarity_c2 = dissimilarity[dissimilarity['cluster'] == 1]","4e157c39":"pd.crosstab(dissimilarity_c2['PAY_0'],\n            dissimilarity_c2['PAY_6'],\n            margins = True\n)","6f45d342":"dissimilarity_c3 = dissimilarity[dissimilarity['cluster'] == 2]","37ffbf0e":"pd.crosstab(dissimilarity_c3['PAY_0'],\n            dissimilarity_c3['PAY_6'],\n            margins = True\n)","f6c631a0":"dissimilarity_c4 = dissimilarity[dissimilarity['cluster'] == 3]","ab11fc07":"pd.crosstab(dissimilarity_c4['PAY_0'],\n            dissimilarity_c4['PAY_6'],\n            margins = True\n)","e30cf30e":"transicion_c1 = pd.crosstab(dissimilarity['PAY_0'],\n            dissimilarity['PAY_6'],\n            margins = True\n)","ceccdf31":"### Import\nImport all the libraries for start to work, since EDA until modeling creation. Additional, we import the CSV (UCI Credit Card).","1e6c09ec":"# Dataset Information\n----\nThis dataset contains information on default payments, demographic factors, credit data, history of payment, and bill statements of credit card clients in Taiwan from April 2005 to September 2005.\n\nContent\nThere are 25 variables:\n\n* **ID**: ID of each client\n* **LIMIT_BAL**: Amount of given credit in NT dollars (includes individual and family\/supplementary credit\n* **SEX**: Gender (1=male, 2=female)\n* **EDUCATION**: (1=graduate school, 2=university, 3=high school, 4=others, 5=unknown, 6=unknown)\n* **MARRIAGE**: Marital status (1=married, 2=single, 3=others)\n* **AGE**: Age in years\n* **PAY_0**: Repayment status in September, 2005 (-1=pay duly, 1=payment delay for one month, 2=payment delay for two months, ... 8=payment delay for eight months, 9=payment delay for nine months and above)\n* **PAY_2**: Repayment status in August, 2005 (scale same as above)\n* **PAY_3**: Repayment status in July, 2005 (scale same as above)\n* **PAY_4**: Repayment status in June, 2005 (scale same as above)\n* **PAY_5**: Repayment status in May, 2005 (scale same as above)\n* **PAY_6**: Repayment status in April, 2005 (scale same as above)\n* **BILL_AMT1**: Amount of bill statement in September, 2005 (NT dollar)\n* **BILL_AMT2**: Amount of bill statement in August, 2005 (NT dollar)\n* **BILL_AMT3**: Amount of bill statement in July, 2005 (NT dollar)\n* **BILL_AMT4**: Amount of bill statement in June, 2005 (NT dollar)\n* **BILL_AMT5**: Amount of bill statement in May, 2005 (NT dollar)\n* **BILL_AMT6**: Amount of bill statement in April, 2005 (NT dollar)\n* **PAY_AMT1**: Amount of previous payment in September, 2005 (NT dollar)\n* **PAY_AMT2**: Amount of previous payment in August, 2005 (NT dollar)\n* **PAY_AMT3**: Amount of previous payment in July, 2005 (NT dollar)\n* **PAY_AMT4**: Amount of previous payment in June, 2005 (NT dollar)\n* **PAY_AMT5**: Amount of previous payment in May, 2005 (NT dollar)\n* **PAY_AMT6**: Amount of previous payment in April, 2005 (NT dollar)\n* **default.payment.next.month**: Default payment (1=yes, 0=no)\n\n### Inspiration\nSome ideas for exploration:\n\n1. How does the probability of default payment vary by categories of different demographic variables?\n2. Which variables are the strongest predictors of default payment?\n\n### Acknowledgements\nAny publications based on this dataset should acknowledge the following:\n\nLichman, M. (2013). UCI Machine Learning Repository [http:\/\/archive.ics.uci.edu\/ml]. Irvine, CA: University of California, School of Information and Computer Science.\n\nThe original dataset can be found here at the UCI Machine Learning Repository.","32a3858c":"km = KModes(n_clusters=4, init='Huang', n_init=1, verbose=1)\nclusters = km.fit_predict(df_test_dummies)\nkmodes = km.cluster_centroids_\nshape = kmodes.shape\nfor i in range(shape[0]):\n    if sum(kmodes[i,:]) == 0:\n        print(\"\\ncluster \" + str(i) + \": \")\n        print(\"no-skills cluster\")\n    else:\n        print(\"\\ncluster \" + str(i) + \": \")\n        cent = kmodes[i,:]\n        for j in df_test_dummies.columns[np.nonzero(cent)]:\n            print(j)","9536c5b3":"Parameters\n    -----------\n    n_clusters : int, optional, default: 8\n        The number of clusters to form as well as the number of\n        centroids to generate.\n    max_iter : int, default: 300\n        Maximum number of iterations of the k-modes algorithm for a\n        single run.\n    cat_dissim : func, default: matching_dissim\n        Dissimilarity function used by the algorithm for categorical variables.\n        Defaults to the matching dissimilarity function.\n    init : {'Huang', 'Cao', 'random' or an ndarray}, default: 'Cao'\n        Method for initialization:\n        'Huang': Method in Huang [1997, 1998]\n        'Cao': Method in Cao et al. [2009]\n        'random': choose 'n_clusters' observations (rows) at random from\n        data for the initial centroids.\n        If an ndarray is passed, it should be of shape (n_clusters, n_features)\n        and gives the initial centroids.\n    n_init : int, default: 10\n        Number of time the k-modes algorithm will be run with different\n        centroid seeds. The final results will be the best output of\n        n_init consecutive runs in terms of cost.\n    verbose : int, optional\n        Verbosity mode.","c2ef15e3":"We set options to display all the columns from the dataset."}}