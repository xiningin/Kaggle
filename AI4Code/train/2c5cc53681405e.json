{"cell_type":{"3d0d7d9f":"code","426ac08d":"code","c8552704":"code","159e10af":"code","8d567329":"code","c4309c95":"code","9b2dcd5b":"code","b4f9f23c":"code","d60946e4":"code","17a26525":"code","867919e1":"code","e848cc6f":"code","52c1ca0a":"code","ec6189b6":"code","f99eac6a":"code","4110380b":"code","3433e74f":"code","aa158c22":"code","2dafc1d1":"code","631899f5":"code","ebbf2555":"code","9ca5df1a":"code","52ee7df4":"code","7c4d6db1":"code","6688f926":"markdown","f01e2514":"markdown","b4a846de":"markdown","8b6fc338":"markdown","cc10562e":"markdown","49b80dd8":"markdown","c88e9f39":"markdown","5f1e4c0f":"markdown","e3a91a7e":"markdown","395a8112":"markdown","8bfe979d":"markdown","de2d9a23":"markdown","e284af91":"markdown","e3fb754b":"markdown","56d9995e":"markdown","94756646":"markdown","b71c7c0f":"markdown","c7eead7f":"markdown","cd66fd08":"markdown","1c89cc24":"markdown","9bcceec5":"markdown","caf1cd72":"markdown","2960390a":"markdown","c47c0228":"markdown","897470e7":"markdown"},"source":{"3d0d7d9f":"import numpy as np","426ac08d":"array=np.empty(0)\nprint(array)","c8552704":"array_pre=np.array([2,3,4])\nprint(array_pre)","159e10af":"array_one=np.ones( (3,4), dtype=np.int16 )  \nprint(array_one)","8d567329":"array_arange=np.arange( 0, 2, 0.3 )  \nprint(array_arange)","c4309c95":"array_random=np.random.rand(2,3)\nprint(array_random)","9b2dcd5b":"slice_array = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\nslice_array_1 = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nslice_array[7]=62\nslice_array_1[0,3]=16\nprint(slice_array)\nprint(slice_array_1)\nprint(slice_array[1:7])\nprint(slice_array[2:])\nprint(slice_array[:12])\nprint(slice_array[-3:-1])\nprint(slice_array[1:8:3])\nprint(slice_array_1[1, 1:4])","b4f9f23c":"a=np.random.random((15))\nprint(a)\nA=a.reshape(3,5)\nprint(A)\na.shape = (3, 5)\nprint(a)","d60946e4":"print(\"1-dimension Array\")\nfor x in slice_array:\n     print(x)\nprint(\"2-dimension Array\")\nfor x in slice_array_1:\n    for y in x:\n        print(y)","17a26525":"from numpy import genfromtxt\nmy_data = genfromtxt('..\/input\/patient-temperature-and-pulse-rate\/ffffinal.csv', delimiter=',')\nprint(my_data)","867919e1":"import time\n\nstart_time = time.time()\n\nnum_multiplies = 5000000\ndata = range(num_multiplies)\nnumber = 1\n\nfor i in data:\n    number *= 1.0000001\n\nend_time = time.time()\n\nprint(number)\nprint(\"Run time = {}\".format(end_time - start_time))","e848cc6f":"import time\nimport numpy as np\n\nstart_time = time.time()\n\ndata = np.ones(shape=(1000, 1000), dtype=\"float\")\n\nfor i in range(5):\n    data *= 1.0000001\n\nend_time = time.time()\n\nprint(\"Run time = {}\".format(end_time - start_time))","52c1ca0a":"import pandas as pd\n","ec6189b6":"data = {\n  \"calories\": [420, 380, 390],\n  \"duration\": [50, 40, 45]\n}\n\n#load data into a DataFrame object:\ndf = pd.DataFrame(data)\n\nprint(df) ","f99eac6a":"df = pd.read_csv('..\/input\/patient-temperature-and-pulse-rate\/ffffinal.csv')\nprint(df)","4110380b":"df1 = df.iloc[:,0:2]\nprint(df1)","3433e74f":"df1.to_csv('file.csv')\ndf2 = pd.read_csv('file.csv')\nprint(df2)","aa158c22":"\ndf3 = pd.DataFrame({\"A\":[12, 4, 5, 44, 1],\n                   \"B\":[5, 2, 54, 3, 2],\n                   \"C\":[20, 16, 7, 3, 8],\n                   \"D\":[14, 3, 17, 2, 6]})\ndf3.mask(df3 > 15, -45)","2dafc1d1":"import matplotlib.pyplot as plt","631899f5":"ypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, linestyle = 'dotted')\nplt.show()","ebbf2555":"y = pd.Series([1, 2, 3, 4, 3, 5, 4])\nx = pd.Series([1, 2, 3, 4, 5, 6, 7])\ncorrelation = y.corr(x)\nplt.scatter(x, y)\n  \n# This will fit the best line into the graph\nplt.plot(np.unique(x), np.poly1d(np.polyfit(x, y, 1))\n         (np.unique(x)), color='red')","9ca5df1a":"x = np.random.normal(170, 10, 250)\n\nplt.hist(x)\nplt.show() ","52ee7df4":"np.random.seed(2)\n\n## generate a random data set\nx, y = np.random.randn(2, 30)\ny *= 100\nz = 11*x + 3.4*y - 4 + np.random.randn(30) ##the model\n\nfig, ax = plt.subplots()\nscat = ax.scatter(x, y, c=z, s=200, marker='o')\nfig.colorbar(scat)\n\nplt.show()","7c4d6db1":"y = np.array([35, 25, 25, 15])\n\nplt.pie(y)\nplt.show() ","6688f926":"Shape manipulation","f01e2514":"Histogram","b4a846de":"Blank array","8b6fc338":"**Thank You**","cc10562e":"Reading File","49b80dd8":"# Matplotlib","c88e9f39":"# Numpy","5f1e4c0f":"Importing Pandas","e3a91a7e":"Exporting data","395a8112":"Looping over arrays","8bfe979d":"Create Dataframe","de2d9a23":"Slicing","e284af91":"Use pandas for masking data and reading if in Boolean format","e3fb754b":"# Pandas","56d9995e":"with pattern specific data","94756646":"Correlation chart","b71c7c0f":" Plot Pi Chart","c7eead7f":"Use numpy vs list for matrix multiplication of 1000 X 1000 array","cd66fd08":"Read csv","1c89cc24":"with predefined data","9bcceec5":"Simple line chart","caf1cd72":"Plotting of Multivariate data","2960390a":"Import Numpy","c47c0228":"Importing matplotlib","897470e7":"Slicing"}}