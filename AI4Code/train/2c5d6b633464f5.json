{"cell_type":{"4fb298d2":"code","dac77cb0":"code","e99fa031":"code","4e275b47":"code","71e8002d":"code","e39286c8":"code","3b805dfc":"code","638c9cb5":"code","e9a4f557":"code","e8d2cbed":"code","43f11449":"code","7990fa5f":"code","655e9381":"code","1e5876d1":"code","2be08e6c":"code","ca46502f":"code","b0e826c2":"code","f77dfad4":"code","72ef18d1":"code","83df4138":"code","b8e3ad54":"code","c92dd634":"code","9a8dae6f":"code","1e38b167":"code","d460f143":"code","224bb0bb":"code","99dc441f":"code","842479c9":"code","10a07793":"code","c56e957f":"code","79a760b0":"code","84cd6c40":"code","2a5942d0":"code","de5787f1":"code","75429e2d":"code","1e957a10":"code","220c9508":"markdown"},"source":{"4fb298d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dac77cb0":"df = pd.read_csv('..\/input\/apple-stock-prices-20152020\/AAPL.csv')","e99fa031":"df.head()","4e275b47":"df.shape","71e8002d":"df.isnull().sum()","e39286c8":"df1 = df.reset_index()['close']","3b805dfc":"df1\n","638c9cb5":"import seaborn as sns \nimport matplotlib.pyplot as plt\nplt.plot(df1)","e9a4f557":"### LSTM are sensitive to the scale of the data. so we apply MinMax scaler\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0,1))\ndf1 = scaler.fit_transform(np.array(df1).reshape(-1,1))","e8d2cbed":"df1.shape","43f11449":"##splitting dataset into train and test split\ntrain_size = int(len(df1)*0.65)\ntrain_data,test_data = df1[0:train_size,:],df1[train_size:len(df1),:1]","7990fa5f":"train_size","655e9381":"#Data Preprocessing\n# convert an array of values into a dataset matrix\n\ndef create_ds(dataset,time_steps):   #Time Steps is how many previous records considered to predict the current record\n    data_x,data_y = [],[]\n    for i in range(len(dataset)-time_steps-1):\n        a = dataset[i:(i+time_steps),0]\n        data_x.append(a)\n        b = dataset[i+time_steps,0]\n        data_y.append(b)\n    return np.array(data_x),np.array(data_y)\n    \n    ","1e5876d1":"time_step = 100\nX_train, y_train = create_ds(train_data, time_step)\nX_test, ytest = create_ds(test_data, time_step)","2be08e6c":"print(X_train.shape), print(y_train.shape)","ca46502f":"print(X_test.shape), print(ytest.shape)","b0e826c2":"#Before feeding into lstm we must convert dataset into 3d \n# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)","f77dfad4":"#Model Creation \nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM","72ef18d1":"model=Sequential()\nmodel.add(LSTM(50,return_sequences=True,input_shape=(100,1)))\nmodel.add(LSTM(50,return_sequences=True))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\n\nmodel.compile(loss='mean_squared_error',optimizer='adam')","83df4138":"model.summary()\n","b8e3ad54":"model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=100,batch_size=64,verbose=1)","c92dd634":"train_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)","9a8dae6f":"# We have scaled it, so we need to reverse scale it to find the o\/p\ntrain_predict=scaler.inverse_transform(train_predict)\ntest_predict=scaler.inverse_transform(test_predict)","1e38b167":"#rmse\nimport math\nfrom sklearn.metrics import mean_squared_error\nmath.sqrt(mean_squared_error(y_train,train_predict))","d460f143":"math.sqrt(mean_squared_error(ytest,test_predict))","224bb0bb":"plt.plot(scaler.inverse_transform(df1))\nlook_back=100\ntrainPredictPlot = np.empty_like(df1)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\nplt.plot(trainPredictPlot)\ntestPredictPlot = np.empty_like(df1)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict\nplt.plot(testPredictPlot)","99dc441f":"#predicting future 30 days\n#For predicting next day after last test data, we need to take previous 100 values(timestep)\nx_input=test_data[341:].reshape(1,-1)\nx_input.shape","842479c9":"x_input","10a07793":"temp_input=list(x_input)\ntemp_input=temp_input[0].tolist()","c56e957f":"temp_input","79a760b0":"from numpy import array\n\nlst_output=[]\nn_steps=100\ni=0\nwhile(i<30):\n    \n    if(len(temp_input)>100):\n        #print(temp_input)\n        x_input=np.array(temp_input[1:])\n        print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        #print(x_input)\n        yhat = model.predict(x_input, verbose=0)\n        print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        #print(temp_input)\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    else:\n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        print(yhat[0])\n        temp_input.extend(yhat[0].tolist())\n        print(len(temp_input))\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    ","84cd6c40":"day_new=np.arange(1,101)\nday_pred=np.arange(101,131)","2a5942d0":"plt.plot(day_new,scaler.inverse_transform(df1[1158:]))\nplt.plot(day_pred,scaler.inverse_transform(lst_output))","de5787f1":"df3=df1.tolist()\ndf3.extend(lst_output)\nplt.plot(df3[1200:])","75429e2d":"df3=scaler.inverse_transform(df3).tolist()","1e957a10":"plt.plot(df3)","220c9508":"We are performing the prediction\/forecasting on 'close' column \n"}}