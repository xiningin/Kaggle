{"cell_type":{"631a019d":"code","a9db1808":"code","98b8e2c7":"code","591349b5":"code","e1433cbc":"code","ea0d3a85":"code","0965bf13":"code","28f55fae":"code","9dbb682b":"code","c8f5ecda":"code","3defd464":"code","64452a58":"code","3d62990f":"code","cdc32f3f":"markdown","673882f9":"markdown","c9189bec":"markdown","a9dc558f":"markdown","e3b2bff9":"markdown","ae0d1811":"markdown","5c58a22b":"markdown","6d618303":"markdown","08560ca8":"markdown"},"source":{"631a019d":"import os\nimport numpy as np\nfrom scipy.fftpack import fft\nfrom scipy.io import wavfile\nfrom scipy import signal\nfrom glob import glob\nimport re\nimport pandas as pd\nimport gc\nfrom scipy.io import wavfile\n\nfrom keras import optimizers, losses, activations, models\nfrom keras.layers import Convolution2D, Dense, Input, Flatten, Dropout, MaxPooling2D, BatchNormalization\nfrom sklearn.model_selection import train_test_split\nimport keras","a9db1808":"L = 16000\nlegal_labels = 'yes no up down left right on off stop go silence unknown'.split()\n\n#src folders\nroot_path = r'..'\nout_path = r'.'\nmodel_path = r'.'\ntrain_data_path = os.path.join(root_path, 'input', 'train', 'audio')\ntest_data_path = os.path.join(root_path, 'input', 'test', 'audio')","98b8e2c7":"def log_specgram(audio, sample_rate, window_size=20,\n                 step_size=10, eps=1e-10):\n    nperseg = int(round(window_size * sample_rate \/ 1e3))\n    noverlap = int(round(step_size * sample_rate \/ 1e3))\n    freqs, times, spec = signal.spectrogram(audio,\n                                    fs=sample_rate,\n                                    window='hann',\n                                    nperseg=nperseg,\n                                    noverlap=noverlap,\n                                    detrend=False)\n    return freqs, times, np.log(spec.T.astype(np.float32) + eps)","591349b5":"def list_wavs_fname(dirpath, ext='wav'):\n    print(dirpath)\n    fpaths = glob(os.path.join(dirpath, r'*\/*' + ext))\n    pat = r'.+\/(\\w+)\/\\w+\\.' + ext + '$'\n    labels = []\n    for fpath in fpaths:\n        r = re.match(pat, fpath)\n        if r:\n            labels.append(r.group(1))\n    pat = r'.+\/(\\w+\\.' + ext + ')$'\n    fnames = []\n    for fpath in fpaths:\n        r = re.match(pat, fpath)\n        if r:\n            fnames.append(r.group(1))\n    return labels, fnames","e1433cbc":"def pad_audio(samples):\n    if len(samples) >= L: return samples\n    else: return np.pad(samples, pad_width=(L - len(samples), 0), mode='constant', constant_values=(0, 0))\n\ndef chop_audio(samples, L=16000, num=20):\n    for i in range(num):\n        beg = np.random.randint(0, len(samples) - L)\n        yield samples[beg: beg + L]\n\ndef label_transform(labels):\n    nlabels = []\n    for label in labels:\n        if label == '_background_noise_':\n            nlabels.append('silence')\n        elif label not in legal_labels:\n            nlabels.append('unknown')\n        else:\n            nlabels.append(label)\n    return pd.get_dummies(pd.Series(nlabels))","ea0d3a85":"labels, fnames = list_wavs_fname(train_data_path)\n\nnew_sample_rate = 16000\ny_train = []\nx_train = []\n\nfor label, fname in zip(labels, fnames):\n    sample_rate, samples = wavfile.read(os.path.join(train_data_path, label, fname))\n    samples = pad_audio(samples)\n    if len(samples) > 16000:\n        n_samples = chop_audio(samples)\n    else: n_samples = [samples]\n    for samples in n_samples:\n        resampled = signal.resample(samples, int(new_sample_rate \/ sample_rate * samples.shape[0]))\n        _, _, specgram = log_specgram(resampled, sample_rate=new_sample_rate)\n        y_train.append(label)\n        x_train.append(specgram)\nx_train = np.array(x_train)\n# x_train = x_train.reshape(tuple(list(x_train.shape) + [1]))\ny_train = label_transform(y_train)\nlabel_index = y_train.columns.values\ny_train = y_train.values\ny_train = np.array(y_train)\ndel labels, fnames\ngc.collect()","0965bf13":"from tensorflow.keras import backend as K\nfrom tensorflow.keras.layers import Dense, SimpleRNN, LSTM, Bidirectional, TimeDistributed, Conv1D, ZeroPadding1D, GRU\nfrom tensorflow.keras.layers import Lambda, Input, Dropout, Masking, BatchNormalization, Activation\nfrom tensorflow.keras.models import Model\n\ndef cnn_lstm(input_dim, output_dim, dropout=0.2, n_layers=1):\n\n#     # Input data type\n    dtype = 'float32'\n\n    # ---- Network model ----\n    input_data = Input(name='the_input', shape=input_dim, dtype=dtype)\n\n    # 1 x 1D convolutional layers with strides 4\n    x = Conv1D(filters=256, kernel_size=10, strides=4, name='conv_1')(input_data)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n    x = Dropout(dropout, name='dropout_1')(x)\n        \n    x = LSTM(128, activation='relu', return_sequences=True,\n             dropout=dropout, name='lstm_1')(x)\n    x = LSTM(128, activation='relu', return_sequences=False,\n             dropout=dropout, name='lstm_2')(x)\n\n#     # 1 fully connected layer DNN ReLu with default 20% dropout\n    x = Dense(units=64, activation='relu', name='fc')(x)\n    x = Dropout(dropout, name='dropout_2')(x)\n\n    # Output layer with softmax\n    y_pred = Dense(units=output_dim, activation='softmax', name='softmax')(x)\n\n    network_model = Model(inputs=input_data, outputs=y_pred)\n    \n    return network_model\n\ninput_dim = (99, 161)\nclasses = len(legal_labels)\nK.clear_session()\nmodel = cnn_lstm(input_dim, classes)\nmodel.summary()","28f55fae":"from tensorflow.keras.optimizers import Adam, SGD\nfrom tensorflow.keras.callbacks import TensorBoard\n\nsgd = SGD(lr=0.00001, clipnorm=1.0)\nadam = Adam(lr=1e-4, clipnorm=1.0)\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=adam,\n              metrics=['accuracy'])\nhistory = model.fit(x_train, y_train,\n                    batch_size=128, epochs=10,\n#                     validation_data=(X_val, Y_val),\n                    callbacks=[TensorBoard(log_dir='logs',\n                                           histogram_freq=1,\n                                           update_freq='epoch')])","9dbb682b":"model.save(os.path.join(model_path, 'rnn.model'))","c8f5ecda":"import os\nprint(os.getcwd())\nprint(os.listdir())","3defd464":"from tensorflow.keras.models import load_model\n\nmodel = load_model('rnn.model')","64452a58":"def test_data_generator(batch=16):\n    fpaths = glob(os.path.join(test_data_path, '*wav'))\n    i = 0\n    for path in fpaths:\n        if i == 0:\n            imgs = []\n            fnames = []\n        i += 1\n        rate, samples = wavfile.read(path)\n        samples = pad_audio(samples)\n        resampled = signal.resample(samples, int(new_sample_rate \/ rate * samples.shape[0]))\n        _, _, specgram = log_specgram(resampled, sample_rate=new_sample_rate)\n        imgs.append(specgram)\n        fnames.append(path.split('\\\\')[-1])\n        if i == batch:\n            i = 0\n            imgs = np.array(imgs)\n            imgs = imgs.reshape(tuple(list(imgs.shape) + [1]))\n            yield fnames, imgs\n    if i < batch:\n        imgs = np.array(imgs)\n        imgs = imgs.reshape(tuple(list(imgs.shape) + [1]))\n        yield fnames, imgs\n    raise StopIteration()","3d62990f":"# exit() #delete this\ndel x_train, y_train\ngc.collect()\n\nindex = []\nresults = []\nfor fnames, imgs in test_data_generator(batch=32):\n    predicts = model.predict(imgs)\n    predicts = np.argmax(predicts, axis=1)\n    predicts = [label_index[p] for p in predicts]\n    index.extend(fnames)\n    results.extend(predicts)\n\ndf = pd.DataFrame(columns=['fname', 'label'])\ndf['fname'] = index\ndf['label'] = results\ndf.to_csv(os.path.join(out_path, 'sub.csv'), index=False)","cdc32f3f":"RNN declared below.\nThe specgram created will be of shape (99, 161), but in order to fit into Conv2D layer, we need to reshape it.","673882f9":"Here is the log_specgram function.","c9189bec":"Next, we use functions declared above to generate x_train and y_train.\nlabel_index is the index used by pandas to create dummy values, we need to save it for later use.","a9dc558f":"__pad_audio__ will pad audios that are less than 16000(1 second) with 0s to make them all have the same length.\n\n__chop_audio__ will chop audios that are larger than 16000(eg. wav files in background noises folder) to 16000 in length. In addition, it will create several chunks out of one large wav files given the parameter 'num'.\n\n__label_transform__ transform labels into dummies values. It's used in combination with softmax to predict the label.","e3b2bff9":"The original sample rate is 16000, and we will keep it the same.","ae0d1811":"We use the trained model to predict the test data's labels.\nHowever, since Kaggle doesn't provide test data, the following sections won't be executed here.","5c58a22b":"Following is the utility function to grab all wav files inside train data folder.","6d618303":"Test data is way too large to fit in RAM, we need to process them one by one.\nGenerator test_data_generator will create batches of test wav files to feed into CNN.","08560ca8":"## Preface\nThis notebooks aims to build a CNN + LSTM model.\n\nIt uses specgrams of wav files(rate 16000) as inputs.\n\n\n## File Structure\nThis script assumes data are stored in following strcuture:\n\nspeech\n\n\u251c\u2500\u2500 test            \n\n\u2502   \u2514\u2500\u2500 audio #test wavfiles\n\n\u251c\u2500\u2500 train           \n\n\u2502   \u251c\u2500\u2500 audio #train wavfiles\n\n\u2514\u2500\u2500 model #store models\n\n\u2502\n\n\u2514\u2500\u2500 out #store sub.csv\n\n## Improve This Script\nHere are some ways to improve it's performance.\n1. Use audio data augmentation techniques.\n2. Create more 'silence' wav files using chop_audio.\n3. Build deeper CNN or  RNN.\n4. Train for longer epochs\n\n## After Words\nAfter the submission the score I'm getting is 0.74, feedback is welcome.\n\nFeel free to share your ideas in the comment sections."}}