{"cell_type":{"93c64e57":"code","89b2b9c5":"code","1a19a323":"code","83a012be":"code","5f5dc2b3":"code","58654152":"code","265fcf72":"code","2577b8e5":"code","ae2a1d2c":"code","b51a10da":"code","eafe3331":"code","767177cc":"code","9b186959":"code","13ce1ba8":"code","ac2abf2a":"code","2fbdc0b2":"code","4c90a731":"code","57ada8ce":"code","a7b08f1d":"code","4301dfc3":"code","71898116":"code","b696cd3e":"code","9b5f3d07":"code","322f0a56":"code","81986587":"code","5ba4a37f":"code","22470125":"code","acc324f4":"code","be030df6":"code","d860548f":"code","70f14038":"code","ca75766a":"code","afd9afc6":"code","0f9d2524":"code","cc5d3fd2":"code","c1df363a":"code","2dc7869a":"code","0e6d22af":"code","a4a6aad2":"code","bb6823eb":"code","4d0e7039":"code","8ef18cf5":"code","2822b152":"code","cdf5d5b7":"code","1ab49304":"code","5f4926f1":"code","ff40f5f7":"code","4777fff2":"code","31ab2d32":"code","2363cb9f":"code","c9cdafbb":"code","f530eca1":"code","9792e29e":"code","60547196":"code","3726a011":"code","d5e39eac":"code","26ec6da6":"code","32f7b5cf":"code","5203047b":"code","ee0bc81d":"code","6669f0e4":"code","78a69470":"code","15b0b1e5":"code","8f084266":"code","b94e1ee3":"code","e97f8a61":"code","3a175c66":"code","cc7df44e":"code","beb8e87f":"code","219f620e":"code","d0b5bd3d":"markdown","d3e407e5":"markdown","4af47ee8":"markdown","7da495a6":"markdown","3b49e056":"markdown","bdf3564b":"markdown","7f3c0269":"markdown","aec5c30e":"markdown","784aad11":"markdown","8641fd8b":"markdown","0b00f7a7":"markdown","aab07a99":"markdown","fe42e998":"markdown","2eb6fbdc":"markdown","c6cb5d8e":"markdown","d53422ad":"markdown","7848fd9e":"markdown","0a5f2197":"markdown","fe945990":"markdown","d4dd658e":"markdown","41babeed":"markdown","b4f5b245":"markdown","be4c299e":"markdown","7bcce84a":"markdown","59cca7bd":"markdown","f01c32f1":"markdown","86433664":"markdown","3d005a1b":"markdown","7ea59824":"markdown"},"source":{"93c64e57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# seaborn library\nimport seaborn as sns\n\n# plotly library\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# matplotlib library\nimport matplotlib.pyplot as plt\n\n%matplotlib notebook\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","89b2b9c5":"data = pd.read_csv('..\/input\/2017.csv')","1a19a323":"data.info()","83a012be":"data.head(10)","5f5dc2b3":"data.columns","58654152":"data_70 = data.iloc[:70,:] # first 20 rows of our data","265fcf72":"# visualization\n\nplt.figure(figsize= (15,10))\nsns.barplot(x = data_70['Happiness.Rank'], y = data_70['Freedom'], palette = sns.cubehelix_palette(70))\nplt.xticks(rotation = 90) # slope of the words in the x axis \nplt.xlabel('Happiness Rank')\nplt.ylabel('Freedom')\nplt.title('Happiness Rank vs Freedom')\nplt.show()","2577b8e5":"data.columns","ae2a1d2c":"# visualization\nf, ax1 = plt.subplots(figsize=(15,10))\nsns.pointplot(x='Happiness.Rank', y='Economy..GDP.per.Capita.', data=data_70, color='black', alpha=0.8)\nsns.pointplot(x='Happiness.Rank', y='Freedom', data=data_70, color='red', alpha=1)\nplt.text(50,1.65, 'Economy..GDP.per.Capita.', color='black', fontsize=16, style='italic')\nplt.text(50,1.77, 'Freedom', color='red',fontsize=16, style='italic')\nplt.xlabel('Happines Rank', fontsize=15, color='blue')\nplt.ylabel('Values', fontsize=15, color='blue')\nplt.title('Economy..GDP.per.Capita. vs Freedom', fontsize=20, color='blue')\nplt.grid()","b51a10da":"# visualization\nf, ax1 = plt.subplots(figsize=(15,10))\nsns.pointplot(x='Happiness.Rank', y='Economy..GDP.per.Capita.', data=data_70, color='black', alpha=0.8)\nsns.pointplot(x='Happiness.Rank', y='Health..Life.Expectancy.', data=data_70, color='red', alpha=1)\nplt.text(50,1.65, 'Economy..GDP.per.Capita.', color='black', fontsize=16, style='italic')\nplt.text(50,1.74, 'Health..Life.Expectancy.', color='red',fontsize=16, style='italic')\nplt.xlabel('Happines Rank', fontsize=15, color='blue')\nplt.ylabel('Values', fontsize=15, color='blue')\nplt.title('Economy..GDP.per.Capita. vs Health..Life.Expectancy.', fontsize=20, color='blue')\nplt.grid()","eafe3331":"data.columns","767177cc":"#%%\n# joint plot: economy vs health\n# kde: kernel density estimation\n# pearsonr: if it 1 we have positive correlation, if -1 negative correlation, if zero no correlation  \n\nsns.jointplot(data['Economy..GDP.per.Capita.'], data['Health..Life.Expectancy.'], kind='kde', height=8)\nplt.savefig('jointplot.png')\nplt.show()","9b186959":"# we can select different kinds of joint plot\n# kind= 'kde', 'scatter', 'reg', 'resit', 'hex' \n# ratio: ratio of the size of the scatter plot to the histogram plot\nsns.jointplot(data['Economy..GDP.per.Capita.'], data['Health..Life.Expectancy.'], kind='scatter', size=8, ratio=3, color='r')\nplt.show()","13ce1ba8":"data.columns","ac2abf2a":"data['Economy..GDP.per.Capita.'].iloc[0:10]","2fbdc0b2":"econ = []\nfor i in range(1,7): \n     econ.append(sum (data['Economy..GDP.per.Capita.'].iloc[((i-1)*10):(i*10)]))\necon","4c90a731":"# PIE CHART\n# Country Economies\n\n# create economy list\necon = []\nfor i in range(1,7): \n     econ.append(sum (data['Economy..GDP.per.Capita.'].iloc[((i-1)*10):(i*10)]))\n\n# create index\nindex = np.arange(1,7)\n\n# things to be used in pie plot\nlabels = index\nsizes = econ\ncolors = ['grey', 'blue', 'red', 'yellow', 'green', 'brown'] # colors of pie chart\nexplode = [0,0,0,0,0,0]\n \n# visualization\nplt.figure(figsize=(7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%') # autopct: decimal (after comma put 1 number)\nplt.title('Economy Level', color='blue', fontsize=15)\nplt.text(1.7,1,'1: Sum of the economy ratios of first 10 countries', fontsize=14)\nplt.text(1.7,0.8,'2: Sum of the economy ratios of second 10 countries', fontsize=14)\nplt.text(1.7,0.6,'3: Sum of the economy ratios of third 10 countries', fontsize=14)\nplt.text(1.7,0.4,'4: Sum of the economy ratios of fourth 10 countries', fontsize=14)\nplt.text(1.7,0.2,'5: Sum of the economy ratios of fifth 10 countries', fontsize=14)\nplt.text(1.7,0.0,'6: Sum of the economy ratios of sixth 10 countries', fontsize=14)\nplt.show()","57ada8ce":"data.columns","a7b08f1d":"# lmplot: shows the result of linear regression within each data set\nsns.lmplot(x='Happiness.Score', y='Economy..GDP.per.Capita.', data=data)\nplt.show()","4301dfc3":"data.columns","71898116":"# kde plot: (kde=kernel density estimation)\nplt.subplots(figsize=(15,10))\nsns.kdeplot(data['Happiness.Score'], data['Economy..GDP.per.Capita.'], shade=True, cut=3)\nplt.xlabel('Happiness', color='purple', fontsize=14)\nplt.ylabel('Economy Level', color='purple', fontsize=14)\nplt.show()","b696cd3e":"data.columns","9b5f3d07":"data1 = data.iloc[:,6] # Trust..Government.Corruption.\ndata2 = data.iloc[:,5] # Economy..GDP.per.Capita.\nnewdata = pd.concat([data1,data2],axis=1) # create new data\nnewdata","322f0a56":"# violin plot\n# shows EACH distribution with both violins and points\n# use cubehelix to get a custom sequencial palette: google it as seaborn palette \n# it adjusts color of the plots\n# violinplot: At the points where the plot is fat, it means we have more points\nplt.subplots(figsize=(15,10))\npal = sns.cubehelix_palette(2, rot=-5, dark=3)\nsns.violinplot(data=newdata, palette=pal, inner='points') # data uses only numbers but not strings\nplt.show()","81986587":"data.columns","5ba4a37f":"#correlation map\n# Visualization of Economy..GDP.per.Capita., Family and Health..Life.Expectancy. \nf,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(data.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.2f',ax=ax)\nplt.show()","22470125":"data.info()","acc324f4":"data['Happines_level'] = ['HapLev 1' if x<=52 else 'HapLev 2' if x<104 else 'HapLev 3' for x in data['Happiness.Rank']]","be030df6":"data['Economy_level'] = ['EconLev 1' if eco>1.31 else 'EconLev 2' if eco>0.99 else 'EconLev 3' \n                         for eco in data['Economy..GDP.per.Capita.']]","d860548f":"data.head()","70f14038":"# Plot the orbital period with horizontal boxes\nsns.boxplot(x=\"Happines_level\", y=\"Trust..Government.Corruption.\", hue='Economy_level', data=data, palette=\"PRGn\")\nplt.show()","ca75766a":"sns.swarmplot(x=\"Happines_level\", y=\"Trust..Government.Corruption.\",hue=\"Economy_level\", data=data)\nplt.show()","afd9afc6":"data.columns","0f9d2524":"datam = data.iloc[:, [5,6,7]]","cc5d3fd2":"datam.head()","c1df363a":"# pair plot\nsns.pairplot(datam)\nplt.show()","2dc7869a":"data.Economy_level.value_counts()","0e6d22af":"sns.countplot(data.Economy_level)\n# sns.countplot(data.Happines_level)\nplt.title(\"Economy Level\",color = 'blue',fontsize=15)","a4a6aad2":"data = pd.read_csv('..\/input\/2017.csv')","bb6823eb":"data.head()","4d0e7039":"data.info()","8ef18cf5":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = data['Happiness.Rank'],\n                    y = data['Economy..GDP.per.Capita.'],\n                    mode = \"lines\",\n                    name = \"Economy GDP per Capita\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= data.Country)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = data['Happiness.Rank'],\n                    y = data['Health..Life.Expectancy.'],\n                    mode = \"lines+markers\",\n                    name = \"Health Life Expectancy.\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= data.Country)\ndata = [trace1, trace2]\nlayout = dict(title = 'Economy and Health Life Expectancy vs Country Ranks',\n              xaxis= dict(title= 'Happiness Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\nplt.savefig('line.png')\nplt.show()","2822b152":"data = pd.read_csv('..\/input\/2017.csv')","cdf5d5b7":"data.head()","1ab49304":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = data['Happiness.Rank'],\n                    y = data['Economy..GDP.per.Capita.'],\n                    mode = \"markers\",\n                    name = \"Economy\",\n                    marker = dict(color = 'rgba(0, 128, 255, 0.8)'),\n                    text= data['Country'])\n# creating trace2\ntrace2 =go.Scatter(\n                    x = data['Happiness.Rank'],\n                    y = data['Trust..Government.Corruption.'],\n                    mode = \"markers\",\n                    name = \"Trust-Goverment\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= data['Country'])\n\ndata = [trace1, trace2]\nlayout = dict(title = 'Economy and Trust-Goverment vs Happiness Rank',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Values',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","5f4926f1":"data = pd.read_csv('..\/input\/2017.csv')","ff40f5f7":"data.head()","4777fff2":"# prepare data frames\ndata_3 = data.iloc[:3,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = data_3.Country,\n                y = data_3['Generosity'],\n                name = \"Generosity\",\n                marker = dict(color = 'rgba(200, 0, 0, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_3['Happiness.Rank'])\n# create trace2 \ntrace2 = go.Bar(\n                x = data_3.Country,\n                y = data['Family'],\n                name = \"Family\",\n                marker = dict(color = 'rgba(150, 50, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_3['Happiness.Rank'])\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","31ab2d32":"data = pd.read_csv('..\/input\/2017.csv')","2363cb9f":"# prepare data frames\ndata_3 = data.iloc[:3,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = data_3.Country,\n                y = data_3['Generosity'],\n                name = \"Generosity\",\n                marker = dict(color = 'rgba(200, 0, 0, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_3['Happiness.Rank'])\n# create trace2 \ntrace2 = go.Bar(\n                x = data_3.Country,\n                y = data['Family'],\n                name = \"Family\",\n                marker = dict(color = 'rgba(150, 50, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_3['Happiness.Rank'])\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"relative\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","c9cdafbb":"data = pd.read_csv('..\/input\/2017.csv')","f530eca1":"data.head()","9792e29e":"data_7 = data.iloc[:7,:]\ndata_7","60547196":"pie1 = data_7['Economy..GDP.per.Capita.']\nlabels = data_7['Country']\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Economy rates of some Countries\",\n      \"hoverinfo\":\"label+percent\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Economy rates of first 7 Countries\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Economy Level\",\n                \"x\": 0.17,\n                \"y\": 1.1\n            },\n        ]\n    }\n}\niplot(fig)","3726a011":"data = pd.read_csv('..\/input\/2017.csv')","d5e39eac":"data.head()","26ec6da6":"# data preparation\ndata_20 = data.iloc[:20,:]\necon_size  = data_20['Economy..GDP.per.Capita.']*30\nfamily_color = data_20['Family']\ndata = [\n    {\n        'y': data_20['Freedom'],\n        'x': data_20['Happiness.Rank'],\n        'mode': 'markers',\n        'marker': {\n            'color': family_color,\n            'size': econ_size,\n            'showscale': True\n        },\n        \"text\" :  data_20.Country    \n    }\n]\nlayout = dict(title='Freedom vs Happiness Rank: Size=Economy, Color=Family',\n              xaxis=dict(title='Happiness Rank'),\n              yaxis=dict(title='Freedom'))\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","32f7b5cf":"data = pd.read_csv('..\/input\/2017.csv')","5203047b":"data.columns","ee0bc81d":"data.head()","6669f0e4":"# prepare data\nx1 = data['Economy..GDP.per.Capita.']\nx2 = data['Family']\n\ntrace1 = go.Histogram(\n    x=x1,\n    opacity=0.75,\n    name = \"Economy\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=x2,\n    opacity=0.75,\n    name = \"Family\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title='Economy and Family',\n                   xaxis=dict(title='Economy and Family Rates'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","78a69470":"data = pd.read_csv('..\/input\/2017.csv')","15b0b1e5":"data.columns","8f084266":"trace0 = go.Box(\n    y=data['Economy..GDP.per.Capita.'],\n    name = 'Economy',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=data['Trust..Government.Corruption.'],\n    name = 'Trust to Governmetn',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","b94e1ee3":"data = pd.read_csv('..\/input\/2017.csv')\ndata.columns","e97f8a61":"# import figure factory\nimport plotly.figure_factory as ff\n\ndata_matrix = data.loc[:,[\"Health..Life.Expectancy.\",\"Freedom\", \"Happiness.Rank\", 'Economy..GDP.per.Capita.']]\ndata_matrix[\"index\"] = np.arange(1,len(data_matrix)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data_matrix, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","3a175c66":"data = pd.read_csv('..\/input\/2017.csv')\ndata.columns","cc7df44e":"# first line plot\nx=data['Happiness.Rank']\ntrace1 = go.Scatter(\n    x=x,\n    y=data['Economy..GDP.per.Capita.'],\n    name = \"Economy\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=x,\n    y=data['Trust..Government.Corruption.'],\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Trust Government\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Economy and Trust Government vs Happiness Rank'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","beb8e87f":"data = pd.read_csv('..\/input\/2017.csv')\ndata.columns","219f620e":"x=data['Happiness.Rank']\ntrace1 = go.Scatter(\n    x=x,\n    y=data['Economy..GDP.per.Capita.'],\n    name = \"economy\"\n)\ntrace2 = go.Scatter(\n    x=x,\n    y=data['Family'],\n    xaxis='x2',\n    yaxis='y2',\n    name = \"family\"\n)\ntrace3 = go.Scatter(\n    x=x,\n    y=data['Health..Life.Expectancy.'],\n    xaxis='x3',\n    yaxis='y3',\n    name = 'health'\n)\ntrace4 = go.Scatter(\n    x=x,\n    y=data['Freedom'],\n    xaxis='x4',\n    yaxis='y4',\n    name = \"freedom\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'economy-health-family-freedom vs happiness rank'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","d0b5bd3d":"<a id=\"20\"><\/a>\n**2.7) Scatter Matrix Plot**","d3e407e5":"<a id=\"18\"><\/a>\n**2.5) Histogram**","4af47ee8":"**CONTENTS**\n\n**1. SEABORN**\n\n* [Bar Plot](#1)\n* [Point Plot](#2)\n* [Joint Plot](#3)\n* [Pie Chart](#4)\n* [Lm Plot](#5)\n* [Kde Plot](#6)\n* [Violin Plot](#7)\n* [Heatmap](#8)\n* [Box Plot](#9)\n* [Swarm Plot](#10)\n* [Pair Plot](#11)\n* [Count Plot](#12)\n\n**2. PLOTLY**\n\n1. [Line Charts](#13)\n1. [Scatter Charts](#14)\n1. [Bar Charts](#15)\n1. [Pie Charts](#16)\n1. [Bubble Charts](#17)\n1. [Histogram](#18)\n1. [Box Plot](#19)\n1. [Scatter Plot Matrix](#20)\n1. [Inset Plots](#21)\n1. [Multiple Subplots](#22)","7da495a6":"<a id=\"19\"><\/a>\n**2.6) Box Plot**","3b49e056":"<a id=\"22\"><\/a>\n**2.9 Multiple Subplots**","bdf3564b":"<a id=\"14\"><\/a>\n**2.2) Scatter**","7f3c0269":"<a id=\"15\"><\/a>\n**2.3) Bar Chart #1**","aec5c30e":"**1.2) POINT PLOT # 2**","784aad11":"<a id=\"16\"><\/a>\n**2.3) Pie Chart**","8641fd8b":"<a id=\"17\"><\/a>\n**2.4) Bubble Chart**","0b00f7a7":"<a id=\"2\"><\/a>\n**1.2)  POINT PLOT # 1**","aab07a99":"<a id=\"8\"><\/a>\n**1.9) Heatmap**","fe42e998":"**1.4) JOINT PLOT (SCATTER)**","2eb6fbdc":"<a id=\"11\"><\/a>\n**1.12) Pair Plot**","c6cb5d8e":"<a id=\"7\"><\/a>\n**1.8) VIOLIN PLOT**","d53422ad":"<a id=\"13\"><\/a>\n**2.1) Line Chart**","7848fd9e":"**2.2 Bar Chart #2**","0a5f2197":"<a id=\"6\"><\/a>\n**1.7) KDE PLOT**","fe945990":"<a id=\"5\"><\/a>\n**1.6) LM PLOT**","d4dd658e":"<a id=\"12\"><\/a>\n**1.13) Count Plot**","41babeed":"<a id=\"4\"><\/a>\n**1.5) PIE PLOT**","b4f5b245":"# 1. SEABORN","be4c299e":"<a id=\"1\"><\/a>\n**1.1) BAR PLOT**","7bcce84a":"**2. PLOTLY**","59cca7bd":"<a id=\"21\"><\/a>\n**2.8) Inset Plots**","f01c32f1":"# CONCLUSION\n* if you find it helpful, tank you for upvotes\n* for a better one you can read kernels of DATAI TEAM","86433664":"<a id=\"10\"><\/a>\n**1.11) Swarm Plot**","3d005a1b":"<a id=\"9\"><\/a>\n**1.10) Box Plot**","7ea59824":"<a id=\"3\"><\/a>\n**1.3) JOINT PLOT (KDE)**"}}