{"cell_type":{"d7e5ce4f":"code","ed7958fe":"code","162d122e":"code","fb6b8d96":"code","1da09dc8":"code","c8582edd":"code","a86929b1":"code","2dda1777":"code","fffb4c58":"code","c8058eb3":"code","8d992148":"code","00ade77e":"code","7245c545":"code","6f5f59b5":"code","937df3af":"code","f825bc95":"code","dc3e6c89":"code","b95be911":"code","da9767b3":"code","4c06a3cf":"code","aa45ff90":"code","2803a442":"code","45803869":"code","749d1979":"code","0acd2f91":"code","d876bacd":"markdown","6e202925":"markdown","210ac925":"markdown","5b15fa55":"markdown","725625bf":"markdown","aca1c043":"markdown"},"source":{"d7e5ce4f":"#import library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC, NuSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom xgboost import XGBClassifier\nimport xgboost\nfrom sklearn import metrics","ed7958fe":"lol = pd.read_csv('..\/input\/league-of-legends-worlds-2021-playin-group-stats\/League of Legends 2021 World Championship Play-In Groups Statistics - Raw Data.csv')","162d122e":"lol.shape","fb6b8d96":"lol.head()","1da09dc8":"lol.describe()","c8582edd":"lol.info()","a86929b1":"#heatmap correlation\nplt.figure(figsize = (15,9))\nsns.heatmap(lol.corr(), annot = True, cmap = 'Blues')\nplt.title(\"Pearson Correlation\")\nplt.show()","2dda1777":"#transform data to categorical variable\ndf = pd.DataFrame(lol)\ndf['Team'] = df['Team'].astype('category')\ndf['Player'] = df['Player'].astype('category')\ndf['Position'] = df['Position'].astype('category')\ndf['Champion'] = df['Champion'].astype('category')\ndf['Opponent'] = df['Opponent'].astype('category')\ndf['Result'] = df['Result'].astype('category')\nprint(df.dtypes)","fffb4c58":"#handling categorical data\ndf['Team'] = df['Team'].cat.codes\ndf['Player'] = df['Player'].cat.codes\ndf['Position'] = df['Position'].cat.codes\ndf['Champion'] = df['Champion'].cat.codes\ndf['Opponent'] = df['Opponent'].cat.codes\ndf['Result'] = df['Result'].cat.codes\ndf.head()","c8058eb3":"#split data\nX = df.drop('Result', axis = 1)\ny = df['Result']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","8d992148":"#prepare models\nclassifiers = [\n    KNeighborsClassifier(n_neighbors = 5),\n    SVC(kernel = 'linear', gamma = 'auto', C = 5, probability = True),\n    NuSVC(probability = True),\n    DecisionTreeClassifier(max_depth = 3),\n    RandomForestClassifier(random_state = 1, max_features = 'sqrt', n_jobs = 1, verbose = 1),\n    XGBClassifier(),\n    AdaBoostClassifier(),\n    GradientBoostingClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis()]","00ade77e":"#report models\nlog_cols=[\"Classifier\", \"Accuracy\", \"Log Loss\"]\nlog = pd.DataFrame(columns=log_cols)\n\nfor clf in classifiers:\n    clf.fit(X_train, y_train)\n    name = clf.__class__.__name__\n    print(\"=\"*30)\n    print(name)\n    print('****Results****')\n    \n    train_predictions = clf.predict(X_test)\n    acc = accuracy_score(y_test, train_predictions)\n    print(\"Accuracy: {:.4%}\".format(acc))\n    \n    train_predictions = clf.predict_proba(X_test)\n    ll = log_loss(y_test, train_predictions)\n    print(\"Log Loss: {}\".format(ll))\n    print(\"\\n\")\n    \n    log_entry = pd.DataFrame([[name, acc*100, ll]], columns=log_cols)\n    log = log.append(log_entry)\n    \nprint(\"=\"*30)","7245c545":"#visualize accuracy models\nplt.figure(figsize = (10,6))\nsns.set_color_codes(\"muted\")\nsns.barplot(x='Accuracy', y = 'Classifier', data = log, color = \"springgreen\")\nplt.xlabel('Accuracy %')\nplt.title('Accuracy of Classification Model')\nplt.show()\nsns.set_color_codes(\"muted\")\nplt.show()","6f5f59b5":"#visualize log loss models\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'Log Loss', y = 'Classifier', data = log, color = \"orangered\")\nplt.xlabel('Log Loss')\nplt.title('Log Loss of Classification Model')\nplt.show()","937df3af":"#build model\nrf = RandomForestClassifier(random_state = 1, max_features = 'sqrt', n_jobs = 1, verbose = 1)\n%time rf.fit(X_train, y_train)","f825bc95":"#prediction\ny_pred = rf.predict(X_test)\nprint(y_pred)","dc3e6c89":"#confusion matrix\nmatrix = metrics.confusion_matrix(y_test, y_pred)\nprint(matrix)\n\nplt.figure(figsize = (10,6))\nsns.heatmap(matrix, annot = True, fmt = \".0f\", cmap = 'RdYlBu')\nplt.title(\"Prediction\")\nplt.show()","b95be911":"#classification report\nreport = metrics.classification_report(y_test, y_pred)\nprint(report)","da9767b3":"#defining of feature\nfeature = pd.Series(rf.feature_importances_, index = X_train.columns).sort_values(ascending = False)\nprint(feature)","4c06a3cf":"#visualize feature\nplt.figure(figsize = (10,6))\nsns.barplot(x = feature, y = feature.index)\nplt.title(\"Feature Importance\")\nplt.xlabel('Score')\nplt.ylabel('Features')\nplt.show()","aa45ff90":"#group team & result\nteam_result = lol.groupby(['Team', 'Result']).size().reset_index(name = 'Count')\nprint(team_result)","2803a442":"#visualize team ~ result\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'Team', y = 'Count', hue = 'Result', data = team_result, palette = 'Set1')\nplt.title(\"Team ~ Result\")\nplt.legend(bbox_to_anchor = (1.1,1), borderaxespad = 0)\nplt.show()","45803869":"#group opponent & result\nop_result = lol.groupby(['Opponent', 'Result']).size().reset_index(name = 'Count')\nprint(op_result)","749d1979":"#visualize team ~ result\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'Opponent', y = 'Count', hue = 'Result', data = op_result)\nplt.title(\"Opponent ~ Result\")\nplt.legend(bbox_to_anchor = (1.1,1), borderaxespad = 0)\nplt.show()","0acd2f91":"plt.figure(figsize = (10,6))\nresult = [np.count_nonzero(lol['Result'] == 'L'),\n         np.count_nonzero(lol['Result'] == 'W')]\nactivities = ['Loss', 'Win']\nplt.pie(result, labels = activities, startangle = 50, autopct = '%.1f%%', shadow = True)\nplt.title(\"Result\")\nplt.show()","d876bacd":"## Visualization","6e202925":"## Data Extraction","210ac925":"## Check Feature Importance","5b15fa55":"### Random Forest Model is the best score result","725625bf":"## Classification Model","aca1c043":"# League of Legends Worlds Prediction"}}