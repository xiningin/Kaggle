{"cell_type":{"4d3d3141":"code","927fbcd1":"code","f6704a70":"code","1fa4a51b":"code","cf94b75b":"code","cb2709ce":"code","ee298b97":"code","7c10386e":"code","493cecb9":"code","6c1bc42c":"code","3c7f2d82":"code","582183e6":"code","6f8cf109":"code","34e9df80":"code","83e730b1":"code","863f8c22":"code","d758e3c3":"code","c63b9e9a":"code","2164f164":"markdown","e3bfb2af":"markdown","d663c7d0":"markdown","6acd9a1c":"markdown","be9b4fc7":"markdown","3a41e0bc":"markdown","82f4ded6":"markdown","05798b54":"markdown"},"source":{"4d3d3141":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","927fbcd1":"#@title Map : Daily Spread of Coronavirus\nimport pandas as pd\nimport plotly.express as px\nimport numpy as np\ndf=pd.read_csv(\"..\/input\/covid19\/owid-covid-data (16).csv\")\ndf1=df[df[\"location\"].isin([\"India\",\"Italy\",\"Australia\",\n                            \"Canada\",\"United States\"])]\nfig = px.choropleth(df, \n                    locations=\"location\", \n                    locationmode = \"country names\",\n                    color=\"new_cases\", \n                    hover_name=\"location\", \n                    animation_frame=\"date\"\n                   )\n\nfig.update_layout(\n    title_text = 'Daily Spread of Coronavirus',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nfig.show()","f6704a70":"#@title Graph : stringency_index\n\n\nfig = px.line(df1, x=\"date\", y=\"stringency_index\", color='location',\n              title='stringency_index')\nfig.show()","1fa4a51b":"fig = px.line(df1, x=\"date\", y=\"new_cases_per_million\", color='location',\n              title='No of cases per million')\nfig.show()","cf94b75b":"fig = px.line(df1, x=\"date\", y=\"new_cases\", color='location',\n              title='New Cases')\nfig.show()","cb2709ce":"#@title Grath : Death_rate\ndf1['death_rate']=(df1['total_deaths']\/df1['total_cases'])*100\n","ee298b97":"fig = px.line(df1, x=\"date\", y=\"death_rate\", color='location',\n              title='Death Rate')\nfig.show()","7c10386e":"#@title Pie Chart : Percentage of total cases\nfig = px.pie(df1, values = 'new_cases',names='location', height=600,\n             title = 'Percentage of total cases')\nfig.update_traces(textposition='inside', textinfo='percent+label')\n\nfig.update_layout(\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n\nfig.show()","493cecb9":"#@title Graph : Daily New_Cases of covid19 in India\n\ny=df[df[\"location\"].isin([\"India\"])][['new_cases','date']]\n\ntrain=y[:(len(y['new_cases'])-10)]\nvalid=y[(len(y['new_cases'])-10):]\n\nfig = px.line(y, x=\"date\", y=\"new_cases\",\n              title='New_Cases of covid19 in India')\nfig.show()","6c1bc42c":"#@title Forecasting new cases in india for next 10 days using Arima Model\nfrom statsmodels.tsa.arima_model import ARIMA\n\nmodel = ARIMA(train['new_cases'],order=(8,1,1))\n#model.fit(train['new_cases'])\nmodel_fit=model.fit()\n\n\n\n#forecast1 = model_fit.predict(start=(len(y['new_cases'])-10),end=len(y['new_cases'])-1)\nforecast1 = np.round_(model_fit.forecast(steps =10)[0])\nprint(forecast1)","3c7f2d82":"forecast = pd.DataFrame()\nforecast['date']=valid['date']\nforecast['new_cases']=(list(forecast1))\n\nforecast2 = pd.DataFrame()\nforecast2['date']=valid['date']\nforecast2['new_cases(actual)']=valid['new_cases']\nforecast2['new_cases(forecasted)']=(list(forecast1))\nforecast2","582183e6":"import matplotlib.pyplot as plt\nplt.plot(valid['date'],valid['new_cases'])\nplt.plot(forecast['date'],forecast['new_cases'],color='red')","6f8cf109":"#@title Display Forecased and Actual Value using line plot\nimport plotly.graph_objs as go\nimport matplotlib. pyplot as plt\n#plot the predictions for validation set\n\n\ntrain['Line']=np.repeat(\"Data\", len(train['new_cases']))\n\nforecast['Line']=np.repeat(\"Forecasted\", len(forecast['new_cases']))\n\nvalid['Line']=np.repeat(\"Actual\", len(valid['new_cases']))\n\n\n\ndf3=valid.append(forecast, ignore_index=True)\n","34e9df80":"fig = px.line(df3, x=\"date\", y=\"new_cases\", color='Line',\n              title='forecasted new cases of covid19')\n\nfig1 = go.Figure(fig.add_traces(\n                 data=px.line(train, x='date', y='new_cases')._data,))\n\nfig1.show()","83e730b1":"#@title Accuracy & Error\n#calculate rmse\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error\n\n\nac=[]\nfor i in range(1,len(valid)):\n  ac.append(min(forecast['new_cases'].iloc[i],valid['new_cases'].iloc[i])\/max(forecast['new_cases'].iloc[i],valid['new_cases'].iloc[i]))\n\nprint(\"Min-Max accuracy of model is : \",np.mean(ac)*100)\n\nrms = sqrt(mean_squared_error(valid['new_cases'],forecast['new_cases']))\nprint(\"Error: \",rms)","863f8c22":"#@title Forecasting for next 15 days\n\n\n\n\nmodel = ARIMA(y['new_cases'],order=(8,2,2))\nmodel_fit=model.fit()\nforecast1 = np.round_(model_fit.forecast(steps =15)[0])\n\nforecast = pd.DataFrame()\n","d758e3c3":"#forecast=pd.DataFrame()\ndate=pd.date_range(start=y['date'].iloc[-1], periods=16, freq='D')\nforecast['date']=date[1:]\nforecast['new_cases']=list(forecast1)\nforecast","c63b9e9a":"#@title Forecased and Actual Value using line plot\n\ny['Line']=np.repeat(\"Actual\", len(y['new_cases']))\nforecast['Line']=np.repeat(\"Forecasted\", 15)\n\ndf3=y.append(forecast, ignore_index=True)\n\nfig = px.line(df3, x=\"date\", y=\"new_cases\", color='Line',\n              title='forecasted new cases of covid19')\n\nfig1 = go.Figure(fig.add_traces(\n                 data=px.line(train, x='date', y='new_cases')._data,))\n\nfig1.show()","2164f164":"To check the preciseness of the model it is fitted over the complete data except last 10 observations and later predicted remaining 10 observations and compared with actual observations.\nSo by using this we can study Accuracy of prediction and error.","e3bfb2af":"# **COMPARITIVE STUDY BETWEEN COUNTRIES HANDLING COVID-19**","d663c7d0":"Forecasting the new cases by using the model for next 15 days.","6acd9a1c":"Visualizing the forecasted values by using line plot.","be9b4fc7":"FORECASTING NUMBER OF NEW CASES PER DAY FOR INDIA","3a41e0bc":"Arima model has been used for forecasting purpose because output data is time oriented data. Also there is absence of linear trend in the response variable and regressor,so we try to fit our model using arima (autoregressive integrated moving average) instead linear regression model.","82f4ded6":"Displaying line plot along with actual and forecsted observation.","05798b54":"As we can see from the above values that the accuracy of model is 95%. Hence there can be approximately 5% of variation in forecasted values. Therefore, this model can be used for the further prediction purpose."}}