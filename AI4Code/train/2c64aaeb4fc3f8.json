{"cell_type":{"d58fed1f":"code","1aef4804":"code","e04c8bef":"code","011596b0":"code","29a7fa19":"code","487799cd":"code","7c9793d7":"markdown","6f56c07e":"markdown","ab4e46fe":"markdown","13e8a4d5":"markdown"},"source":{"d58fed1f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom keras.utils import to_categorical\nimport matplotlib.pyplot as plt\n\nimport keras\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.advanced_activations import LeakyReLU\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1aef4804":"X = np.load(\"..\/input\/sign-language-digits-dataset\/Sign-language-digits-dataset\/X.npy\")\ny = np.load(\"..\/input\/sign-language-digits-dataset\/Sign-language-digits-dataset\/Y.npy\")","e04c8bef":"X = np.reshape(X,(-1,64,64,1))\n# Split 2062 samples into 1717 and 345\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.167, random_state = 1)\n# Split 1649 samples into 1373 and 344\nX_train, X_dev, y_train, y_dev = train_test_split(X_train, y_train, test_size = 0.2, random_state = 1)","011596b0":"print('Training data shape : ', X_train.shape, y_train.shape)\nprint('Dev data shape : ', X_dev.shape, y_dev.shape)\nprint('Test data shape : ', X_test.shape, y_test.shape)\n\n# print(y_dev.sum(axis=0))\n# print(y_test.sum(axis=0))","29a7fa19":"batch_size = 64\nepochs = 100\nnum_classes = 10\n\ndr = Sequential()\ndr.add(Conv2D(6, kernel_size=(3,3),activation='linear',input_shape=(64,64,1),padding='same'))\ndr.add(BatchNormalization(axis=-1))\ndr.add(LeakyReLU(alpha=0.1))\ndr.add(MaxPooling2D((2,2),padding='same'))\ndr.add(Dropout(0.2))\ndr.add(Conv2D(16, (3,3), activation='linear',padding='same'))\ndr.add(BatchNormalization(axis=-1))\ndr.add(LeakyReLU(alpha=0.1))\ndr.add(MaxPooling2D(pool_size=(2,2),padding='same'))\ndr.add(Dropout(0.2))\ndr.add(Conv2D(64, (3,3), activation='linear',padding='same'))\ndr.add(BatchNormalization(axis=-1))\ndr.add(LeakyReLU(alpha=0.1))                  \ndr.add(MaxPooling2D(pool_size=(2,2),padding='same'))\ndr.add(Dropout(0.3))\ndr.add(Flatten())\ndr.add(Dense(60, activation='linear'))\ndr.add(BatchNormalization(axis=-1))\ndr.add(LeakyReLU(alpha=0.1))         \ndr.add(Dropout(0.2))         \ndr.add(Dense(25, activation='linear'))\ndr.add(BatchNormalization(axis=-1))\ndr.add(LeakyReLU(alpha=0.1))         \ndr.add(Dropout(0.2)) \ndr.add(Dense(num_classes, activation='softmax'))\n\ndr.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(),metrics=['accuracy'])\n\ndr.summary()\n\ntraining = dr.fit(X_train, y_train, batch_size=batch_size,epochs=epochs,verbose=1,validation_data=(X_dev, y_dev))\n\ndr.save(\"Conv2D_Signs.h5py\")\n\ntest_eval = dr.evaluate(X_dev, y_dev, verbose=0)\nprint(test_eval)\n\naccuracy = training.history['accuracy']\nval_accuracy = training.history['val_accuracy']\nloss = training.history['loss']\nval_loss = training.history['val_loss']\nepochs = range(len(accuracy))\nplt.plot(epochs, accuracy, 'bo', label='Training accuracy')\nplt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()\n\nfrom IPython.display import FileLink\nFileLink(r\"Conv2D_Signs.h5py\")","487799cd":"print(\"Training dataset evaluation\")\ntest_eval = dr.evaluate(X_train, y_train, verbose=0)\nprint(test_eval)\n\nprint(\"Dev dataset evaluation\")\ntest_eval = dr.evaluate(X_dev, y_dev, verbose=0)\nprint(test_eval)\n\nprint(\"Test dataset evaluation\")\ntest_eval = dr.evaluate(X_test, y_test, verbose=0)\nprint(test_eval)","7c9793d7":"Approximately 206 samples for each class","6f56c07e":"Check the accuracy on our datasets","ab4e46fe":"Approximately 27-40 samples for each class in dev and test dataset","13e8a4d5":"Load the data"}}