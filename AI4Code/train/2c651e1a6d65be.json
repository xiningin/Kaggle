{"cell_type":{"5ae90ca3":"code","b3331faa":"code","14608001":"code","4a69f1b0":"code","e6ecb794":"code","e96f4325":"code","e6acdfd1":"code","9251bc09":"code","5d447c87":"code","a8023365":"code","446c313e":"code","b3403cab":"code","1de900c5":"code","8bf5bc1a":"code","b12973ac":"code","c0c6ac07":"code","aacdf52a":"code","5b56fd19":"code","dbd2dcc8":"code","1d554d12":"code","0456d1ee":"code","f45ab1a7":"code","bff5a70b":"markdown","8b822efc":"markdown","95bc3a39":"markdown","7e2de70c":"markdown","17b44822":"markdown"},"source":{"5ae90ca3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom sklearn import model_selection, preprocessing, metrics\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport shap\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom sklearn import preprocessing\nimport xgboost as xgb\nimport gc\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Any results you write to the current directory are saved as output.","b3331faa":"train = pd.read_csv('..\/input\/nfl-eda-on-train-test-fe-correlation-anova\/train.csv')\ntest = pd.read_csv('..\/input\/nfl-eda-on-train-test-fe-correlation-anova\/test.csv')","14608001":"train.shape\n","4a69f1b0":"train.head()","e6ecb794":"train.dtypes","e96f4325":"object_columns = train.select_dtypes(include='object').columns","e6acdfd1":"test.shape\n","9251bc09":"features = test.columns\n","5d447c87":"train = train[features]\n","a8023365":"train['target'] = 0\ntest['target'] = 1","446c313e":"train_test = pd.concat([train, test], axis =0)\n\ntarget = train_test['target'].values\ndel train, test\ngc.collect()","b3403cab":"# Label Encoding\nfor f in object_columns:\n    lbl = preprocessing.LabelEncoder()\n    lbl.fit(list(train_test[f].values) )\n    train_test[f] = lbl.transform(list(train_test[f].values))","1de900c5":"train, test = model_selection.train_test_split(train_test, test_size=0.33, random_state=42, shuffle=True)\ndel train_test\ngc.collect()","8bf5bc1a":"train_y = train['target'].values\ntest_y = test['target'].values\ndel train['target'], test['target']\ngc.collect()","b12973ac":"train = lgb.Dataset(train, label=train_y)\ntest = lgb.Dataset(test, label=test_y)","c0c6ac07":"param = {'num_leaves': 50,\n         'min_data_in_leaf': 30, \n         'objective':'binary',\n         'max_depth': 5,\n         'learning_rate': 0.2,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 44,\n         \"metric\": 'auc',\n         \"verbosity\": -1}","aacdf52a":"num_round = 50\nclf = lgb.train(param, train, num_round, valid_sets = [train, test], verbose_eval=50, early_stopping_rounds = 50)","5b56fd19":"feature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(),features)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).head(20))\nplt.title('LightGBM Features')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')","dbd2dcc8":"del train, test, clf\ngc.collect()\n\ntrain = pd.read_csv('..\/input\/nfl-eda-on-train-test-fe-correlation-anova\/train.csv')\n\ntest = pd.read_csv('..\/input\/nfl-eda-on-train-test-fe-correlation-anova\/test.csv')\n\ndel train['Season']\ndel train['DefensePersonnel']\ndel test['Season']\ndel test['DefensePersonnel']\n\nobject_columns = train.select_dtypes(include='object').columns\n\nfeatures = test.columns\ntrain = train[features]\ntest = test[features]\n\ntrain['target'] = 0\ntest['target'] = 1\n\ntrain_test = pd.concat([train, test], axis =0)\n\ndel train, test\n\ntarget = train_test['target'].values\n\n# Label Encoding\nfor f in object_columns:\n    lbl = preprocessing.LabelEncoder()\n    lbl.fit(list(train_test[f].values) )\n    train_test[f] = lbl.transform(list(train_test[f].values))\n    \ntrain, test = model_selection.train_test_split(train_test, test_size=0.33, random_state=42, shuffle=True)\n\ntrain_y = train['target'].values\ntest_y = test['target'].values\ndel train['target'], test['target']\ngc.collect()\n\ntrain = lgb.Dataset(train, label=train_y)\ntest = lgb.Dataset(test, label=test_y)\n\nclf = lgb.train(param, train, num_round, valid_sets = [train, test], verbose_eval=50, early_stopping_rounds = 50)","1d554d12":"feature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(),features)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).head(20))\nplt.title('LightGBM Features')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')\n","0456d1ee":"del train, test, clf\ngc.collect()\n\ntrain = pd.read_csv('..\/input\/nfl-eda-on-train-test-fe-correlation-anova\/train.csv')\n\ntest = pd.read_csv('..\/input\/nfl-eda-on-train-test-fe-correlation-anova\/test.csv')\n\ndel train['Season']\ndel train['DefensePersonnel']\ndel train['Temperature']\ndel train['Humidity']\ndel test['Season']\ndel test['DefensePersonnel']\ndel test['Temperature']\ndel test['Humidity']\n\nobject_columns = train.select_dtypes(include='object').columns\n\nfeatures = test.columns\ntrain = train[features]\ntest = test[features]\n\ntrain['target'] = 0\ntest['target'] = 1\n\ntrain_test = pd.concat([train, test], axis =0)\n\ndel train, test\n\ntarget = train_test['target'].values\n\n# Label Encoding\nfor f in object_columns:\n    lbl = preprocessing.LabelEncoder()\n    lbl.fit(list(train_test[f].values) )\n    train_test[f] = lbl.transform(list(train_test[f].values))\n    \ntrain, test = model_selection.train_test_split(train_test, test_size=0.33, random_state=42, shuffle=True)\n\ntrain_y = train['target'].values\ntest_y = test['target'].values\ndel train['target'], test['target']\ngc.collect()\n\ntrain = lgb.Dataset(train, label=train_y)\ntest = lgb.Dataset(test, label=test_y)\n\nclf = lgb.train(param, train, num_round, valid_sets = [train, test], verbose_eval=50, early_stopping_rounds = 50)","f45ab1a7":"feature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(),features)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).head(20))\nplt.title('LightGBM Features')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')\n","bff5a70b":"So temperature and humidity are the top two factors. In the light of the previous finding this is not surprising at all: both are very good proxies for the season. Let's remove those two features as well adn see what happens.","8b822efc":"In this notebook we'll try to use adversarial validation in order to see how similar\/different the train and test sets are. Since this is not a \"regular\" Kaggle competition, a bit of ingenuity was needed to get test data into the form that would allow for this to be done. Furthermore, using a few extra engineered features is alwasy a good ide. For both of those purposes we will use [Tomonori Masui](https:\/\/www.kaggle.com\/tnmasui)'s [excellent kernel](https:\/\/www.kaggle.com\/tnmasui\/nfl-eda-on-train-test-fe-correlation-anova).","95bc3a39":"Well, folks, doesn't get any better than the AUC of 1.0! Let's see which ones are the most responsibel columns.","7e2de70c":"OK, AUC of 0.999261 is not too shabby eaither. Let's see what's going on here.","17b44822":"Guess season and Defense Personnel change significantly between train and test. let's remove them and see what happens."}}