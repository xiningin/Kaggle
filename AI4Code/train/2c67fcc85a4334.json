{"cell_type":{"eddc31b4":"code","948494ec":"code","ddd91c2b":"code","0af78db3":"code","fcd6341b":"code","643262f0":"code","bf66cb29":"code","853e360c":"code","06dec369":"code","2b3d807e":"code","a2fddac2":"code","f34a6b0d":"code","8cd80020":"code","542bb514":"code","b19755d6":"code","5ed03489":"code","663ebfa7":"code","7437c6ba":"code","c89294eb":"code","f29013e0":"code","95861a3f":"code","996a2861":"code","f5719e67":"code","61e34ecd":"code","361fb732":"code","4f8db1fe":"code","9b81d09c":"code","14c6ae47":"code","c11ee365":"code","a764c730":"code","f47e9136":"code","27d421e8":"code","af926fed":"code","8d2fad05":"code","c2c7f6ea":"code","e3e562ab":"code","869a2631":"code","59d68c56":"code","674fad63":"code","7f1ac7f6":"markdown","f7407af1":"markdown","6e7bde19":"markdown","445f46f1":"markdown","8ba4c8f0":"markdown","325a5c0d":"markdown","4fab8a1a":"markdown","f53d8ac3":"markdown","768e27d2":"markdown","b9f27e4f":"markdown","4ca7600b":"markdown","47ea93e9":"markdown"},"source":{"eddc31b4":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n","948494ec":"\ncountry= pd.read_csv('..\/input\/who_suicide_statistics.csv')","ddd91c2b":"country.head(10)","0af78db3":"country.shape","fcd6341b":"country.info()","643262f0":"# drop NaNs\ncountry.dropna(axis=0,inplace =True)\n","bf66cb29":"country.shape","853e360c":"# finding duplicates\nDub = country.duplicated()\nnp.unique(Dub)","06dec369":"# Labeling by using LabelEncoder\nfrom sklearn import preprocessing\n\nle1 = preprocessing.LabelEncoder()\nle2 = preprocessing.LabelEncoder()\nle3 = preprocessing.LabelEncoder()\nle_sex=le1.fit(country.sex)\nle_age=le2.fit(country.age)\nle_country=le3.fit(country.country)\n\ncountry.sex = le_sex.transform(country.sex) # female:0 , male:1\ncountry.age = le_age.transform(country.age) # 15-24: 0, 25-34:1, 35-54:2 , 5-14:3, 55-74:4, 75+:5\ncountry.country=le_country.transform(country.country)\ncountry.head()","2b3d807e":"country.describe()","a2fddac2":"fig, ax = plt.subplots(figsize=(15,12))\nax = sns.heatmap(country.corr(), annot=True, vmin=-1, vmax=1, cmap=\"YlGnBu\")","f34a6b0d":"#splitting the data to feature vector and target \ny=country['suicides_no']\n\nX=country[['country','age','sex','population']]\n","8cd80020":"from itertools import chain\n\ndef draw_map(m, scale=0.2):\n    # draw a shaded-relief image\n    m.shadedrelief(scale=scale)\n    \n    # lats and longs are returned as a dictionary\n    lats = m.drawparallels(np.linspace(-90, 90, 13))\n    lons = m.drawmeridians(np.linspace(-180, 180, 13))\n\n    # keys contain the plt.Line2D instances\n    lat_lines = chain(*(tup[1][0] for tup in lats.items()))\n    lon_lines = chain(*(tup[1][0] for tup in lons.items()))\n    all_lines = chain(lat_lines, lon_lines)\n    \n    # Map (long, lat) to (x, y) for plotting: FRANCE\n    x, y = m(2.34, 48.8)\n    plt.plot(x, y, 'or', markersize=France_freq*0.0001, alpha=0.5)\n    \n    x, y = m(9, 47.8)\n    plt.text(x, y, 'France', fontsize=16);\n    \n    x, y = m(9, 44.8)\n    plt.text(x, y, France_freq, fontsize=16);\n    \n    \n    # Map (long, lat) to (x, y) for plotting: SPAIN\n    x, y = m(-3.7, 40.4)\n    plt.plot(x, y, 'ob', markersize=spain_freq*0.0001, alpha=0.5)\n    \n    x, y = m(-0.9, 40.4)\n    plt.text(x, y, 'Spain', fontsize=16);\n    \n    \n    x, y = m(-0.9, 37.4)\n    plt.text(x, y, spain_freq, fontsize=16);\n    \n    \n    # Map (long, lat) to (x, y) for plotting: GERMANY\n    x, y = m(13.4, 53.5)\n    plt.plot(x, y, 'og', markersize=germany_freq*0.0001, alpha=0.5)\n    \n    x, y = m(16.4, 53.5)\n    plt.text(x, y, 'Germany', fontsize=16);\n    \n    x, y = m(17.4, 50.5)\n    plt.text(x, y, germany_freq, fontsize=16);\n    \n    \n    # Map (long, lat) to (x, y) for plotting: UAE\n    x, y = m(53.8, 23.4)\n    plt.plot(x, y, 'og', markersize=uae_freq*0.01, alpha=0.5)\n    \n    x, y = m(54.4, 24.5)\n    plt.text(x, y, 'United Arab Emirates', fontsize=16);\n    \n    x, y = m(56.4, 26.5)\n    plt.text(x, y, uae_freq, fontsize=16);\n    \n    \n    # Map (long, lat) to (x, y) for plotting: Egypt\n    x, y = m(30.7957, 26.50)\n    plt.plot(x, y, 'or', markersize=uae_freq*0.01, alpha=0.5)\n    \n    x, y = m(30.4, 27.5)\n    plt.text(x, y, 'Arab Republic of Egypt ', fontsize=16);\n    \n    x, y = m(30.4, 29.5)\n    plt.text(x, y, uae_freq, fontsize=16);\n    \n    \n    \n    \n    \n    \n    # cycle through these lines and set the desired style\n    for line in all_lines:\n        line.set(linestyle='-', alpha=0.3, color='w')","542bb514":"# printing the encoded countries (each country is given a code)\n\negypt=le_country.transform(['Egypt'])\nfrance=le_country.transform(['France'])\nspain=le_country.transform(['Spain'])\ngermany=le_country.transform(['Germany'])\nsweden=le_country.transform(['Sweden'])\nuae=le_country.transform(['United Arab Emirates'])\nuk=le_country.transform(['United Kingdom'])\nusa=le_country.transform(['United States of America'])\nitems=[]\nfor i, item in enumerate(le3.classes_):\n    items.append(item)\n    print(item, '=>', i)","b19755d6":"# total  number of suicidess in some country in all ages from 1985 to 2015\nFrance_freq = country[country['country'] == france[0]]['suicides_no'].sum()\nspain_freq = country[country['country'] == spain[0]]['suicides_no'].sum()\ngermany_freq = country[country['country'] == germany[0]]['suicides_no'].sum()\negypt_freq = country[country['country'] == egypt[0]]['suicides_no'].sum()\nuk_freq = country[country['country'] == uk[0]]['suicides_no'].sum()\nusa_freq = country[country['country'] == usa[0]]['suicides_no'].sum()\nuae_freq = country[country['country'] == uae[0]]['suicides_no'].sum()\nsweden_freq = country[country['country'] == sweden[0]]['suicides_no'].sum()\n\n","5ed03489":"# draw basemap containing some countries with the total number of suicides in all ages from 1985 :2015\nfrom mpl_toolkits.basemap import Basemap\n\nfig = plt.figure(figsize=(24, 12))\nm = Basemap(projection='lcc', resolution=None,\n            lon_0=0, lat_0=50, lat_1=45, lat_2=55,\n            width=1.6E7, height=1.2E7)\ndraw_map(m)\n","663ebfa7":"# getting the total number of suicides in each country\n\nsuicides_each_country=country.groupby(['country']).sum()\ncountry_df = pd.DataFrame(suicides_each_country['suicides_no'])\ncountry_df.index = (np.arange(118))\ncountry_df.columns = ['Sum of suicides_no']\n\ncountry_df","7437c6ba":"n = np.arange(118)\nplt.bar(n, country_df['Sum of suicides_no'] , 2)\n\nplt.ylabel('Suicides')\nplt.xlabel('country label')\nplt.xticks(n, country_df.index)\nplt.title('Suicides based on age groups')\nplt.yticks([1000,10000,50000,100000,500000,1000000,1500000],\n           ['1k','10k','50k','100k','500k','1M','1.5M'])\nplt.rcParams['figure.figsize']=(30,1)\nplt.autoscale(enable=True, axis='x', tight=True)\nplt.show()","c89294eb":"# from graph the hieghest country in suicides number from 1985:2015 is russia federation \ncountry.max()\nle_country.inverse_transform([88])","f29013e0":"bins = [3, 0, 1, 2, 4, 5]\nn = len(bins)\nagedata = [country[country['age']==bins[i]]['suicides_no'].values.sum() for i in range(n)]\n\nAge_df = pd.DataFrame(agedata)\nAge_df.index = ('5-14 years','15-24 years','25-34 years','35-54 years','55-74 years','75+ years')\nAge_df.columns = ['Sum of suicides_no']\nAge_df","95861a3f":"n = np.arange(6)\nplt.bar(n, Age_df['Sum of suicides_no'] , 0.5)\n\nplt.ylabel('Suicides')\nplt.xlabel('Year groups')\nplt.xticks(n, Age_df.index)\nplt.title('Suicides based on age groups')\nplt.yticks([500000,1000000,1500000,2000000,2500000,3000000],\n           ['0.5M','1M','1.5M','2M','2.5M','3M'])\nplt.autoscale(enable=True, axis='x', tight=True)\nplt.show()","996a2861":"bins = [3, 0, 1, 2, 4, 5]\nn = len(bins)\nFemale = country[country['sex']==0]\nfemaledata = [Female[Female['age']==bins[i]]['suicides_no'].values.sum() for i in range(n)]\n\nMale = country[country['sex']==1]\nmaledata = [Male[Male['age']==bins[i]]['suicides_no'].values.sum() for i in range(n)]","f5719e67":"Female_df = pd.DataFrame(femaledata)\nFemale_df.index = ('5-14 years','15-24 years','25-34 years','35-54 years','55-74 years','75+ years')\nFemale_df.columns = ['Sum of female suicides_no']\n\nMale_df = pd.DataFrame(maledata)\nMale_df.index = Female_df.index\nMale_df.columns = ['Sum of male suicides_no']\n\nSex_concat = pd.concat([Male_df, Female_df], axis = 1)\nSex_concat","61e34ecd":"fig, ax = plt.subplots()\nn = np.arange(6)\nbar_width = 0.35\nopacity = 0.8\nrects1 = plt.bar(n, Female_df['Sum of female suicides_no'], bar_width,\n                 alpha=opacity,\n                 color='red',\n                 label='Female')\n \nrects2 = plt.bar(n + bar_width, Male_df['Sum of male suicides_no'], bar_width,\n                 alpha=opacity,\n                 color='blue',\n                 label='Male')\n\nax.set_ylabel('Suicides')\nax.set_title('Suicides based on gender and age')\nax.set_xticks(n)\nax.set_xticklabels(Sex_concat.index)\nplt.yticks([500000,1000000,1500000,2000000,2500000],\n              ['0.5M','1M','1.5M','2M','2.5M'])\nplt.autoscale(enable=True, axis='x', tight=True)\nax.legend()\nplt.show()","361fb732":"#spliting data into training and testing set 70% train 30% testing\n\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=434)","4f8db1fe":"# bench mark model \nfrom sklearn.linear_model import LinearRegression\nreg=LinearRegression()\nreg.fit(x_train,y_train)","9b81d09c":"testing =[]\ntraining=[]","14c6ae47":"from sklearn.metrics import r2_score\ny_pred_testing=reg.predict(x_test)\ny_pred2=reg.predict(x_train)\ntesting.append(r2_score(y_test, y_pred_testing))\ntraining.append(r2_score(y_train, y_pred2))\nprint(\"Training score\",r2_score(y_train, y_pred2))\nprint(\"Testing score\",r2_score(y_test, y_pred_testing))\n","c11ee365":"from sklearn.tree import DecisionTreeRegressor\nr=DecisionTreeRegressor()\nr.fit(x_train,y_train)","a764c730":"y_pred_testing=r.predict(x_test)\ny_pred2=r.predict(x_train)\ntesting.append(r2_score(y_test, y_pred_testing))\ntraining.append(r2_score(y_train, y_pred2))\nprint(\"Training score\",r2_score(y_train, y_pred2))\nprint(\"Testing score\",r2_score(y_test, y_pred_testing))","f47e9136":"from sklearn.ensemble import BaggingRegressor\nbagging=BaggingRegressor()\nbagging.fit(x_train,y_train)\n","27d421e8":"y_pred_testing=bagging.predict(x_test)\ny_pred2=bagging.predict(x_train)\ntesting.append(r2_score(y_test, y_pred_testing))\ntraining.append(r2_score(y_train, y_pred2))\nprint(\"Training score\",r2_score(y_train, y_pred2))\nprint(\"Testing score\",r2_score(y_test, y_pred_testing))","af926fed":"from sklearn.ensemble import RandomForestRegressor\nrandomforest=RandomForestRegressor()\nrandomforest.fit(x_train,y_train)","8d2fad05":"y_pred_testing=randomforest.predict(x_test)\ny_pred2=randomforest.predict(x_train)\ntesting.append(r2_score(y_test, y_pred_testing))\ntraining.append(r2_score(y_train, y_pred2))\nprint(\"Training score\",r2_score(y_train, y_pred2))\nprint(\"Testing score\",r2_score(y_test, y_pred_testing))","c2c7f6ea":"from sklearn.ensemble import GradientBoostingRegressor\ngradient=GradientBoostingRegressor()\ngradient.fit(x_train,y_train)\n","e3e562ab":"y_pred_testing=gradient.predict(x_test)\ny_pred2=gradient.predict(x_train)\ntesting.append(r2_score(y_test, y_pred_testing))\ntraining.append(r2_score(y_train, y_pred2))\nprint(\"Training score\",r2_score(y_train, y_pred2))\nprint(\"Testing score\",r2_score(y_test, y_pred_testing))","869a2631":"from sklearn.ensemble import ExtraTreesRegressor\nextra=ExtraTreesRegressor()\nextra.fit(x_train,y_train)\n","59d68c56":"y_pred_testing=extra.predict(x_test)\ny_pred2=extra.predict(x_train)\ntesting.append(r2_score(y_test, y_pred_testing))\ntraining.append(r2_score(y_train, y_pred2))\nprint(\"Training score\",r2_score(y_train, y_pred2))\nprint(\"Testing score\",r2_score(y_test, y_pred_testing))","674fad63":"    max_depth = np.arange(6)\n\nplt.figure(figsize=(7, 5))\n\n    plt.title('different models performance on training and testing using r2score evaluation metrics')\n    plt.plot(max_depth, training, 'o-', color = 'r', label = 'Training Score')\n    plt.plot(max_depth, testing, 'o-', color = 'g', label = 'testing Score')\n    \n    \n    # Visual aesthetics\n    plt.legend(loc = 'lower right')\n    plt.xlabel('models number from model  0 to 6 ')\n    plt.ylabel('Score')\n    plt.ylim([-0.05,1.05])\n    plt.show()","7f1ac7f6":"# definition \n","f7407af1":"### **PREDICTING SUICIDES NUMBER PROJECT   ** \n\n**CONTENT**\n\n\n1.   definition\n2.   preprocessing\n3.   analysis\n4.   implementation \n5.   results\n\n","6e7bde19":"# conclusion \n","445f46f1":"**SUICIDES BASED ON AGE GROUPS:**","8ba4c8f0":"**SUICIDES BASED ON GENDER AND AGE:**","325a5c0d":"## PREPROCESSING","4fab8a1a":"**SUICIDES BASED ON COUNTRIES :**","f53d8ac3":"# implementation","768e27d2":"# Analysis\n","b9f27e4f":"# draw world map for each country with suicide number ","4ca7600b":"**the best regressoin model for this problem is by using random forest regressor (ensemble method)**\n\n**Training score 0.9898624584628091**\n\n**Testing score 0.9456533109871985**\n","47ea93e9":"# Results"}}