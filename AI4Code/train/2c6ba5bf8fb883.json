{"cell_type":{"3086b78b":"code","1a73cabe":"code","2b9afc13":"code","4e63c150":"code","7020398c":"code","c11cae36":"code","673ad3c4":"code","41fbeba8":"code","d16b166c":"code","7faef293":"code","8449a978":"code","7ed6840e":"code","8fc5733c":"code","0a5b7aed":"code","669c6c2e":"code","8b81f9db":"code","ad1a2800":"code","5ec74e8d":"code","1cf17010":"code","8630cbad":"code","20320059":"code","b6f30bb6":"code","00873fbd":"code","4e618de6":"code","852a4498":"code","4b1b4f8f":"code","c221b305":"code","20a6bf7c":"code","c86c19c1":"code","dacc42f1":"code","dac93297":"code","d24a88b2":"code","ff18bf67":"code","8412e24c":"code","21d98656":"code","d960c916":"code","451a7f5c":"code","602bfb8d":"code","b52ceb20":"code","3aa61e79":"code","b2e2c3d4":"code","2d7102a8":"code","6fc4715c":"code","f09b1598":"code","0af3247b":"code","be31ffe9":"code","3921f578":"code","38e75da1":"code","8d06f5d7":"code","12c01f2b":"code","97851de8":"code","81a51aa3":"code","58787221":"code","e7a99170":"code","4bad7459":"code","4dc0fa75":"code","89702ea2":"code","28499b95":"code","2da32a8e":"code","b6d07a7d":"code","9d337c28":"code","ca558f2f":"code","906b46cc":"code","4ab3e538":"code","9fe3ddca":"code","c97d9b11":"code","9953f5d2":"code","5e26fedd":"code","3085c378":"code","a6c8ea8c":"code","7c1140f9":"code","51fa4ffb":"code","0decabdf":"code","2d624659":"code","9156c5e6":"code","ea14dd8c":"code","5c8f3d78":"code","968e00d5":"code","9676f596":"code","b405afc5":"code","9f1cd2a4":"code","f5e4287b":"code","6afe4b2a":"code","bb686fdf":"code","3f293ab7":"code","4bed0c04":"code","99068400":"code","1de3b346":"code","37baf169":"code","7d2066fb":"code","91e305e9":"code","364642d7":"code","3b8ddf7f":"code","7e1b2cc0":"code","a6c5c105":"code","bdd5bfd0":"code","7b9cc940":"code","c11bb24f":"code","c4408f48":"code","02c55bab":"code","82be6ce2":"code","42abfda4":"code","474a7f69":"code","e6379681":"code","6e28d5df":"code","c79d9267":"code","f705b369":"code","91c1622b":"code","7a43b532":"code","77e7713c":"code","ed6ac4b2":"code","f319f2b4":"code","8341e495":"code","63c6e308":"code","b0c86bda":"code","42a6cfc0":"code","bd97a0a8":"code","1df6735b":"code","eed54fc4":"code","71a18707":"code","82242594":"code","e4c3b15d":"code","66797246":"code","ec9e5ed3":"code","fcbc50b5":"code","4270631b":"code","ca1a2edc":"code","90ffb693":"code","7db8b597":"code","b343df21":"code","57a0f069":"code","b188ff46":"code","6ebb2965":"code","846efa93":"code","70567c6b":"code","8f6c8c45":"code","27444ebc":"code","ba48a118":"code","bc981f94":"code","876b4c28":"code","4628ed7b":"code","8c9680c5":"code","09ce75dc":"code","fcde3887":"code","87b8e331":"code","3bb1ced1":"code","b207f452":"code","7df172a6":"code","caefb488":"code","d6e15148":"code","1db4c293":"code","cd93eeda":"code","b29aff57":"code","6a4eecfb":"code","df0eb69e":"code","7aa462c1":"code","93b33a0b":"code","9769e963":"code","7d355b33":"code","e23e496f":"code","05aef635":"code","3449df61":"code","76b9f91e":"code","3a650e3a":"code","6adee178":"code","b509ef56":"code","6b02c7b2":"code","4d66b1cc":"code","495cac61":"code","0e7bf410":"code","9094ac62":"code","08f579ae":"code","461beb6e":"code","c748968a":"code","ba64ae32":"code","61e1836e":"code","ac601214":"code","dc6b86d7":"code","a14c5933":"code","cb3db7b7":"code","1215b4f9":"code","463c39d8":"code","aa9a4719":"code","2b24d81e":"code","96725a22":"code","8997a51d":"code","92085f8d":"code","ec921a68":"code","e876f511":"code","08f08883":"code","fc1a17d0":"code","723d1a29":"code","07ea5f87":"code","0469a0a3":"code","619a580c":"code","487837f9":"code","9f052497":"code","6d3cc8bf":"code","87276959":"code","1bce1e9b":"code","60a0d7fa":"code","283fc288":"code","9e0a88f5":"code","551c6fe0":"code","0c039d78":"code","df114499":"code","3e51de77":"code","3d04638f":"code","13885156":"code","7fbcca44":"code","9944ba2b":"code","61423a81":"code","bebace65":"code","af6a48a1":"code","b183cf7b":"code","0ed8cacd":"code","fc13c5ce":"code","eee61394":"code","be623ba8":"code","94b5f27e":"code","bfa2253f":"code","a881a6bb":"code","074a077d":"code","0a7ea8d1":"code","9dd4fc40":"code","f5042744":"code","21ad1a5d":"code","dd8bdf13":"code","cf9b8f92":"code","073d12d0":"code","2616721d":"code","87236c2a":"code","37ae0c0e":"code","e7f9da96":"code","c1f0b880":"code","6f2c710c":"code","48b0223d":"code","cab712cf":"code","9130bc4a":"code","5e92b523":"code","e4538acc":"code","b7b8fdd0":"code","1386fc29":"code","8b602817":"code","14fc1240":"code","68e14c54":"code","4e23583b":"code","cc6db4a7":"code","01d91c5f":"code","a707a48e":"code","23d5c6c5":"code","1a8411df":"code","baa5774e":"code","8fc13d9c":"code","650ee0e6":"code","1c8d5d3b":"code","ab703f1c":"code","12d9e5c7":"code","b2d13c02":"code","43670a74":"code","2bddc789":"code","2d684ba9":"code","c23f8dc2":"code","1cf34699":"code","2384cfe3":"code","f6d0ecb0":"code","56d20005":"code","b7673c3f":"code","dca7410b":"code","79647bcd":"code","d740f913":"code","4fd9539d":"code","d3024378":"code","3ee3d8e2":"code","44d0e918":"code","b21019d2":"code","df20c998":"code","c2c544e2":"code","048824d0":"code","4ac0face":"code","e0d03374":"code","a33593a0":"code","e9244bf8":"code","6dab7e05":"code","f47ce261":"code","c0c188ac":"code","7be3d531":"code","c23af0df":"code","675b3a3a":"code","e7ac48f2":"code","dccacf65":"code","3002aee1":"code","def6c49a":"code","394414f4":"code","fba5a3f4":"code","3d739d29":"code","22dcf0da":"code","461e560e":"code","3f337182":"code","ec69ea0c":"code","b441a56d":"code","87397354":"code","369ab994":"code","6c549201":"code","bd6ece21":"code","c7e73018":"code","aa1682b0":"code","d93d4eab":"code","6d1f8f4e":"code","1cb02e46":"code","4bd386fe":"code","1c3463bb":"code","a389c912":"code","587cb2a4":"code","cbf14672":"code","d00b8e87":"markdown","0528ef69":"markdown","d090ea68":"markdown","f9e698c7":"markdown","e84675d6":"markdown","4a115e4a":"markdown","d5e4645a":"markdown","665eec8f":"markdown","8722e079":"markdown","15f868db":"markdown","f37c3afd":"markdown","8d766627":"markdown","b185bb85":"markdown","fee776ba":"markdown","b8fcf6f5":"markdown","80d145a3":"markdown","e197a16e":"markdown","94024242":"markdown","68995691":"markdown","d3c6f73b":"markdown","c08c7b8a":"markdown","fc1cc1ef":"markdown","1439cc8b":"markdown","1eb118d8":"markdown","aa098c91":"markdown","36b731c0":"markdown","d26bee17":"markdown","cf5c38e3":"markdown","dec76e38":"markdown","2ebe30d7":"markdown","5f2206ea":"markdown","abfca4a9":"markdown","c41f8b1b":"markdown","b14edad3":"markdown","a7b65d4b":"markdown","51a6b2b9":"markdown","b097d5a5":"markdown","50956ae1":"markdown","93dc921e":"markdown","d532f0f8":"markdown","15e7aacf":"markdown","20275e47":"markdown","3025dfaf":"markdown","3daef239":"markdown","db585db5":"markdown","8747d7c3":"markdown","760eb3ef":"markdown","4d74020a":"markdown","ef26a371":"markdown","22c4fbfa":"markdown","2b25c269":"markdown","e4ec583c":"markdown","2d18a0fd":"markdown","edf3c349":"markdown","07ad13a7":"markdown","4b6b2581":"markdown","7d80094b":"markdown","cb5092b6":"markdown","08c6996c":"markdown","c1e56e07":"markdown","587f56e5":"markdown","b60845ab":"markdown","ebdc7d86":"markdown","33236db5":"markdown","59687bb6":"markdown","a48f24fa":"markdown","b702a9c7":"markdown","2e6be54c":"markdown","c1ec9523":"markdown","d889806a":"markdown","e56b5be8":"markdown","f7d16f1c":"markdown","a3cccfe3":"markdown","9ede1ddf":"markdown","7d246a2b":"markdown","cdb55b19":"markdown","cd8c60d6":"markdown","5b0385a9":"markdown","8b8d97dd":"markdown","3456fccd":"markdown","a75abe8a":"markdown","8927a5cb":"markdown","42099c4d":"markdown","3caf3fb5":"markdown","853d6f15":"markdown","055eccde":"markdown","4a665699":"markdown","8e2ed2f2":"markdown","fec1d571":"markdown","ff90635c":"markdown","7f66f14b":"markdown"},"source":{"3086b78b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1a73cabe":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom scipy import stats\nfrom scipy.stats import norm,skew\nfrom subprocess import check_output\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score, KFold, GridSearchCV\nimport warnings\nwarnings.filterwarnings('ignore')\n","2b9afc13":"df=pd.read_csv('..\/input\/..\/input\/credit-default\/SouthGermanCredit.csv',sep=' ')\ndf.head()","4e63c150":"df.size","7020398c":"df.shape","c11cae36":"df.info()","673ad3c4":"columns =['status','duration','credit_history','purpose','amount','savings','employment_duration','installment_rate','personal_status_sex','other_debtors','present_residence','property','age','other_installment_plans','housing',\n          'number_credits','job','people_liable','telephone','foreign_worker','credit_risk']","41fbeba8":"df.columns=columns\ndf.head()","d16b166c":"df.info()","7faef293":"status = {1:'no checking account', 2:'less than 0 DM', 3:'0 to 200 DM', 4:'200 DM or more'}\ndf['status'] = df['status'].map(status)\n\ncredit_history = {0 : 'delay in paying off in the past',       \n 1 : 'critical account\/other credits elsewhere',   \n 2 : 'no credits taken\/all credits paid back duly',\n 3 : 'existing credits paid back duly till now',\n 4 : 'all credits at this bank paid back duly'}\ndf['credit_history'] = df['credit_history'].map(credit_history)\n\npurpose = {0 : 'others', 1 : 'car (new)', 2 : 'car (used)',3 : 'furniture\/equipment', 4 : 'radio\/television', \n           5 : 'domestic appliances', 6 : 'repairs', 7 : 'education', 8 : 'vacation', 9 : 'retraining', 10 : 'business'}\ndf['purpose'] = df['purpose'].map(purpose)\n\nsavings = {1:'unknown\/no savings account', 2 :'less than 100 DM', 3:'100 to 500 DM', 4 :'500 to 1000 DM', 5:'1000 DM or more'}\ndf['savings'] = df['savings'].map(savings)\n\nemployment_duration = {1 : 'unemployed',2 : 'less than 1 year', 3 : '1 to 4 yrs', 4 : '4 to 7 yrs', 5 : '7 yrs or more'}\ndf['employment_duration'] = df['employment_duration'].map(employment_duration)\n\ninstallment_rate = {1 : '35 or more', 2 : '25 to 35', 3 : '20 to 25', 4 : 'less than 20'}\ndf['installment_rate'] = df['installment_rate'].map(installment_rate)\n\npersonal_status_sex = {1 : 'male : divorced\/separated', 2 : 'female : non-single or male : single', 3 : 'male : married\/widowed', 4 : 'female : single'}\ndf['personal_status_sex'] = df['personal_status_sex'].map(personal_status_sex)\n\nother_debtors = {1 : 'none', 2 : 'co-applicant', 3 : 'guarantor'}\ndf['other_debtors'] = df['other_debtors'].map(other_debtors)\n\npresent_residence = {1 : 'less than 1 year', 2 : '1 to 4 yrs', 3 : '4 to 7 yrs', 4 : '7 yrs or more'}\ndf['present_residence'] = df['present_residence'].map(present_residence)\n\nproperty = {1 : 'unknown\/no property', 2 : 'car or other',3 : 'building soc. savings agr.\/life insurance', 4 : 'real estate'}\ndf['property'] = df['property'].map(property)\n\nother_installment_options = {1 : 'bank',2 : 'stores',3 : 'none'}\ndf['other_installment_plans'] = df['other_installment_plans'].map(other_installment_options)\n\nhousing = {1:'for free', 2:'rent', 3:'own'} \ndf['housing'] = df['housing'].map(housing)\n\njob={1 : 'unemployed\/unskilled - non-resident',2 : 'unskilled-resident',3 : 'skilled employee\/official',4 : 'manager\/self-employed\/highly qualified employee'}\ndf['job'] = df['job'].map(job)\n\nnumber_credits = {1 : '1',2 : '2-3', 3 : '4-5',4 : '6 or more'}\ndf['number_credits'] = df['number_credits'].map(number_credits)\n\npeople_liable = {1 : '3 or more', 2 : '0 to 2'}\ndf['people_liable'] = df['people_liable'].map(people_liable)\n\ntelephone = {1 : 'no',2 : 'yes (under customer name)'}\ndf['telephone'] = df['telephone'].map(telephone)\n\nforeign_worker = {1 : 'yes', 2 : 'no'}\ndf['foreign_worker'] = df['foreign_worker'].map(foreign_worker)","8449a978":"df.head()","7ed6840e":"df['credit_risk'] = df['credit_risk'].replace({0:1,1:0})","8fc5733c":"creditrisk = {0:'good',1:'bad'}\ndf['credit_risk'] = df['credit_risk'].map(creditrisk)","0a5b7aed":"df.isnull().sum()","669c6c2e":"cols= [\"#C2C4E2\",\"#EED4E5\"]\nsns.countplot(df['credit_risk'],palette= cols)\nplt.show()","8b81f9db":"numerical_columns = ['duration','amount','age']","ad1a2800":"df[numerical_columns].describe()","5ec74e8d":"for i in numerical_columns:\n    sns.boxplot(df[i],palette=cols)\n    print(\"skewness of \",i,\":\",df[i].skew())\n    plt.show()","1cf17010":"for i in numerical_columns:\n    sns.distplot(df[i],color=\"#C2C4E2\")\n    print(\"skewness of \",i,\":\",df[i].skew())\n    plt.show() ","8630cbad":"categorical_columns = ['status','credit_history','purpose','savings','employment_duration','installment_rate','personal_status_sex','other_debtors','present_residence','property','other_installment_plans','housing','number_credits','job','people_liable','telephone','foreign_worker']","20320059":"fig_dims = (8,5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='status',data=df, order=df['status'].value_counts().index)\nplt.show()","b6f30bb6":"fig_dims = (10, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='purpose', order=df['purpose'].value_counts().index, data=df)\nplt.show()","00873fbd":"fig_dims = (8, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='savings', order=df['savings'].value_counts().index,data=df)\nplt.show()","4e618de6":"# employment_duration\nfig_dims = (7, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='employment_duration', order=df['employment_duration'].value_counts().index,data=df)\nplt.show()","852a4498":"# installment_rate\nfig_dims = (7, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='installment_rate', order=df['installment_rate'].value_counts().index, data=df)\nplt.show()","4b1b4f8f":"# personal_status_sex\nfig_dims = (12, 4)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='personal_status_sex', order=df['personal_status_sex'].value_counts().index, data=df)\nplt.show()","c221b305":"# present_residence\nfig_dims = (10, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='present_residence', order=df['present_residence'].value_counts().index, data=df)\nplt.show()","20a6bf7c":"# property\nfig_dims = (12,5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='property', order=df['property'].value_counts().index, data=df)\nplt.show()","c86c19c1":"# other_installment_plans\nfig_dims = (7,5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='other_installment_plans', order=df['other_installment_plans'].value_counts().index, data=df)\nplt.show()","dacc42f1":"# number_credits\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='number_credits', order=df['number_credits'].value_counts().index, data=df)\nplt.show()","dac93297":"# job\nfig_dims = (18, 8)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='job', order=df['job'].value_counts().index, data=df)\nplt.show()","d24a88b2":"# people_liable\nfig_dims = (6, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='people_liable', order=df['people_liable'].value_counts().index, data=df)\nplt.show()","ff18bf67":"# telephone\nfig_dims = (6, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='telephone', order=df['telephone'].value_counts().index, data=df)\nplt.show()","8412e24c":"# foreign_worker\nfig_dims = (6, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='foreign_worker', order=df['foreign_worker'].value_counts().index, data=df)\nplt.show()","21d98656":"sns.heatmap(df[numerical_columns].corr(),annot=True)\nplt.show()","d960c916":"from statsmodels.stats.outliers_influence import variance_inflation_factor as vif\n\nvf = [vif(df[numerical_columns].values, i ) for i in range(df[numerical_columns].shape[1])]\npd.DataFrame(vf, index=numerical_columns, columns= [\"vif\"])","451a7f5c":"sns.scatterplot('age','amount',data=df,hue='credit_risk')\nplt.show()","602bfb8d":"sns.stripplot('duration','age',data=df,hue='credit_risk',jitter=True)\nplt.show()","b52ceb20":"sns.swarmplot('duration','amount',data=df,hue='credit_risk')\nplt.show()","3aa61e79":"sns.distplot(df[df['credit_risk']=='good']['amount'])\nsns.distplot(df[df['credit_risk']=='bad']['amount'])\nplt.legend(['Good','Bad'])\nplt.show()","b2e2c3d4":"sns.distplot(df[df['credit_risk']=='good']['age'])\nsns.distplot(df[df['credit_risk']=='bad']['age'])\nplt.legend(['Good','Bad'])\nplt.show()","2d7102a8":"sns.distplot(df[df['credit_risk']=='good']['duration'])\nsns.distplot(df[df['credit_risk']=='bad']['duration'])\nplt.legend(['Good','Bad'])\nplt.show()","6fc4715c":"sns.boxplot(x='credit_risk',y='amount',data=df)\nplt.show()","f09b1598":"categorical_columns = ['status','credit_history','purpose','savings','employment_duration','installment_rate','personal_status_sex','other_debtors','present_residence','property','other_installment_plans','housing','number_credits','job','people_liable','telephone','foreign_worker','credit_risk']","0af3247b":"fig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='status',data=df, order=df['status'].value_counts().index, hue='credit_risk')\nplt.show()","be31ffe9":"df[df['credit_risk'] == 'bad']['status'].value_counts().values[:2].sum()\/300 * 100","3921f578":"# credit_history\nfig_dims = (20, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='credit_history', order=df['credit_history'].value_counts().index, data=df, hue='credit_risk')\nplt.show()","38e75da1":"df[df['credit_risk'] == 'bad']['credit_history'].value_counts().values[0]\/300 * 100","8d06f5d7":"# purpose\nfig_dims = (17, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='purpose', order=df['purpose'].value_counts().index, data=df, hue='credit_risk')\nplt.show()","12c01f2b":"df[df['credit_risk'] == 'bad']['purpose'].value_counts().values[:3].sum()\/ 300 * 100","97851de8":"# savings\nfig_dims = (15, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='savings', order=df['savings'].value_counts().index,data=df, hue='credit_risk')\nplt.show()","81a51aa3":"df[df['credit_risk'] == 'bad']['savings'].value_counts().values[0]\/ 300 * 100","58787221":"# employment_duration\nfig_dims = (10, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='employment_duration', order=df['employment_duration'].value_counts().index,data=df, hue='credit_risk')\nplt.show()","e7a99170":"df[df['credit_risk'] == 'bad']['employment_duration'].value_counts().values[:2].sum()\/ 300 * 100","4bad7459":"# installment_rate\nfig_dims = (8, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='installment_rate', order=df['installment_rate'].value_counts().index, data=df, hue='credit_risk')\nplt.show()","4dc0fa75":"df[df['credit_risk'] == 'bad']['installment_rate'].value_counts().values[0]\/300 * 100","89702ea2":"# personal_status_sex\nfig_dims = (15, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='personal_status_sex', order=df['personal_status_sex'].value_counts().index, data=df, hue='credit_risk')\nplt.show()","28499b95":"df[df['credit_risk'] == 'bad']['personal_status_sex'].value_counts().values[0] \/ 300 * 100","2da32a8e":"# other_debtors\nfig_dims = (15, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='other_debtors', order=df['other_debtors'].value_counts().index, data=df, hue='credit_risk')\nplt.show()","b6d07a7d":"df[df['credit_risk'] == 'bad']['other_debtors'].value_counts().values[0] \/ 300 * 100","9d337c28":"# present_residence\nfig_dims = (10, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='present_residence', order=df['present_residence'].value_counts().index, data=df, hue='credit_risk')\nplt.show()","ca558f2f":"df[df['credit_risk'] == 'bad']['present_residence'].value_counts().values[:2].sum() \/ 300 * 100","906b46cc":"# property\nfig_dims = (15, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='property', order=df['property'].value_counts().index, data=df, hue='credit_risk')\nplt.show()","4ab3e538":"print(df[df['credit_risk'] == 'bad']['property'].value_counts().values[0] \/300 * 100)\nprint(df[df['credit_risk'] == 'bad']['property'].value_counts().values[1] \/300 * 100)","9fe3ddca":"# other_installment_plans\nfig_dims = (8,5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='other_installment_plans', order=df['other_installment_plans'].value_counts().index, data=df, hue='credit_risk')\nplt.show()","c97d9b11":"df[df['credit_risk'] == 'bad']['other_installment_plans'].value_counts().values[0] \/ 300 * 100","9953f5d2":"# housing\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='housing', order=df['housing'].value_counts().index, data=df, hue='credit_risk')\nplt.show()","5e26fedd":"df[df['credit_risk'] == 'bad']['number_credits'].value_counts().values[0] \/ 300 * 100","3085c378":"# job\nfig_dims = (18, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='job', order=df['job'].value_counts().index, data=df, hue='credit_risk')\nplt.show()","a6c8ea8c":"df[df['credit_risk'] == 'bad']['job'].value_counts().values[0] \/ 300 * 100","7c1140f9":"# people_liable\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='people_liable', order=df['people_liable'].value_counts().index, data=df, hue='credit_risk')\nplt.show()","51fa4ffb":"df[df['credit_risk'] == 'bad']['people_liable'].value_counts().values[0] \/300 * 100","0decabdf":"# telephone\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='telephone', order=df['telephone'].value_counts().index, data=df, hue='credit_risk')\nplt.show()\n","2d624659":"df[df['credit_risk'] == 'bad']['telephone'].value_counts()","9156c5e6":"# foreign_worker\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='foreign_worker', order=df['foreign_worker'].value_counts().index, data=df, hue='credit_risk')\nplt.show()","ea14dd8c":"df[df['credit_risk'] == 'bad']['foreign_worker'].value_counts()","5c8f3d78":"df[df['credit_risk'] == 'bad']['foreign_worker'].value_counts()","968e00d5":"df['number_credits'].value_counts()","9676f596":"df['number_credits'] = df['number_credits'].apply(lambda x: '4 or more' if x=='4-5' or x=='6 or more' else x)","b405afc5":"df['number_credits'].value_counts()","9f1cd2a4":"#Purpose\ndf['purpose'].value_counts()","f5e4287b":"df['purpose'] = df['purpose'].replace({'domestic appliances':'domestic appliances or radio\/television',\n                                      'radio\/television':'domestic appliances or radio\/television',\n                                      'business':'business or vacation',\n                                      'vacation':'business or vacation',\n                                      'retraining':'retraining or repairs',\n                                      'repairs':'retraining or repairs',\n                                      'car (new)':'car (new) or car (used)',\n                                      'car (used)':'car (new) or car (used)'})","6afe4b2a":"df['purpose'].value_counts()","bb686fdf":"# Savings\ndf['savings'].value_counts()","3f293ab7":"df['savings'] = df['savings'].apply(lambda x: '100 to 1000 DM' if x=='100 to 500 DM' or x=='500 to 1000 DM' else x)","4bed0c04":"df['savings'].value_counts()","99068400":"# Job\ndf['job'].value_counts()","1de3b346":"df['job'] = df['job'].apply(lambda x: 'unskilled-resident or unemployed\/unskilled non-resident' if x=='unskilled-resident' or x=='unemployed\/unskilled - non-resident' else x)","37baf169":"df['job'].value_counts()","7d2066fb":"status = {'no checking account':1, 'less than 0 DM':2, '0 to 200 DM':3, '200 DM or more':4}\ndf['status'] = df['status'].map(status)\n\nsavings = {'unknown\/no savings account':1, 'less than 100 DM':2, '100 to 1000 DM':3, '1000 DM or more':4}\ndf['savings'] = df['savings'].map(savings)\n\nemployment_duration = {'unemployed':1 ,'less than 1 year':2, '1 to 4 yrs':3, '4 to 7 yrs':4, '7 yrs or more':5}\ndf['employment_duration'] = df['employment_duration'].map(employment_duration)\n\ninstallment_rate = {'less than 20':1, '20 to 25':2, '25 to 35':3, '35 or more':4}\ndf['installment_rate'] = df['installment_rate'].map(installment_rate)\n\npresent_residence = {'less than 1 year':1, '1 to 4 yrs':2, '4 to 7 yrs':3, '7 yrs or more':4}\ndf['present_residence'] = df['present_residence'].map(present_residence)\n\nnumber_credits = {'1':1, '2-3':2, '4 or more':3}\ndf['number_credits'] = df['number_credits'].map(number_credits)\n\npeople_liable = {'0 to 2':1, '3 or more':2}\ndf['people_liable'] = df['people_liable'].map(people_liable)","91e305e9":"df.info()","364642d7":"#sns.pairplot(df,hue='credit_risk')","3b8ddf7f":"from sklearn.preprocessing import PowerTransformer","7e1b2cc0":"df_continuous = df[numerical_columns]\ndf_continuous.head()","a6c5c105":"pt = PowerTransformer(method='box-cox')\npower_transformed_array = pt.fit_transform(df_continuous)","bdd5bfd0":"ptdf_cont = pd.DataFrame(data = power_transformed_array, columns = df_continuous.columns)\nptdf_cont.head()","7b9cc940":"#Now, let's see the boxplots and distriubution plots of numerical feaatures after PowerTransformation\nfor i in ptdf_cont.columns:\n    sns.boxplot(ptdf_cont[i],palette=cols)\n    print(\"skewness of \",i,\":\",ptdf_cont[i].skew())\n    plt.show()","c11bb24f":"for i in ptdf_cont.columns:\n    sns.distplot(ptdf_cont[i])\n    print(\"skewness of \",i,\":\",ptdf_cont[i].skew())\n    plt.show() ","c4408f48":"ptdf = df.copy()\n\nfor col in ptdf_cont.columns:\n    ptdf[col] = ptdf_cont[col]","02c55bab":"sns.heatmap(ptdf[numerical_columns].corr(),annot=True)\nplt.show()","82be6ce2":"from statsmodels.stats.outliers_influence import variance_inflation_factor as vif\n\nvf = [vif(ptdf[numerical_columns].values, i ) for i in range(ptdf[numerical_columns].shape[1])]\npd.DataFrame(vf, index=numerical_columns, columns= [\"vif\"])","42abfda4":"#Applying Chi-Square Contingency Test on categorical features to check their significance\nfrom scipy.stats import chi2_contingency, ttest_ind","474a7f69":"def contingency_table(feature):\n    p = pd.crosstab(df['credit_risk'],df[feature])\n    return(p)","e6379681":"feature = []\npval = []\nchi2_result = []\n\nfor i in categorical_columns[:-1]:\n    feature.append(i)\n    result = chi2_contingency(contingency_table(i))\n    pval.append(round(float(result[1]),6))\n    \n    if float(result[1]) < 0.05:\n        chi2_result.append(\"Significant\")\n    else:\n        chi2_result.append(\"Insignificant\")","6e28d5df":"chisquare = pd.DataFrame(data={'PValue':pval,'Result':chi2_result},index=feature)\nchisquare","c79d9267":"def t_test(mydf,columns):    \n    feature = []\n    pval = []\n    ttest_result = []\n    \n    for i in columns:\n        feature.append(i)\n        result = ttest_ind(mydf[mydf[\"credit_risk\"]==\"good\"][i], mydf[mydf[\"credit_risk\"]==\"bad\"][i])\n        pval.append(round(float(result[1]),6))\n        \n        if float(result[1]) < 0.05:\n            ttest_result.append(\"Significant\")\n        else:\n            ttest_result.append(\"Insignificant\")\n    \n    return(pd.DataFrame(index=feature,data={'PValue':pval,'Result':ttest_result}))","f705b369":"#Now, applying T-Test on Power Transformed data\npt_ttest = t_test(ptdf, numerical_columns)\npt_ttest","91c1622b":"# Now, let's first apply one hot encoding on Power Transformed DataFrame\nptdf.shape","7a43b532":"ptdf = ptdf.drop(columns = chisquare[chisquare['Result'] == 'Insignificant'].index, axis=1)","77e7713c":"ptdf.shape","ed6ac4b2":"ptdf.info()","f319f2b4":"pt_ohe_df = pd.get_dummies(ptdf, columns = ptdf.drop('credit_risk',axis=1).select_dtypes(include='object').columns, drop_first=True)\npt_ohe_df.head()","8341e495":"pt_ohe_df.info()","63c6e308":"pt_ohe_df.head()","b0c86bda":"pt_ohe_df.shape","42a6cfc0":"from scipy import stats\nfrom scipy.stats import norm,skew\nfrom subprocess import check_output\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score, KFold, GridSearchCV\nimport warnings\nwarnings.filterwarnings('ignore')","bd97a0a8":"pt_ohe_df.shape","1df6735b":"X = pt_ohe_df.drop('credit_risk',axis=1)\ny = pt_ohe_df['credit_risk'].map({'good':0,'bad':1})","eed54fc4":"print(\"Before OverSampling, counts of label '1': {}\".format(sum(y == 1))) \nprint(\"Before OverSampling, counts of label '0': {} \\n\".format(sum(y == 0)))","71a18707":"from imblearn.over_sampling import SMOTE \nsm = SMOTE(random_state = 2) \nX, y = sm.fit_resample(X, y.ravel())","82242594":"print('After OverSampling, the shape of X_train: {}'.format(X.shape)) \nprint('After OverSampling, the shape of y_train: {} \\n'.format(y.shape)) \n  \nprint(\"After OverSampling, counts of label '1': {}\".format(sum(y == 1))) \nprint(\"After OverSampling, counts of label '0': {}\".format(sum(y == 0))) ","e4c3b15d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)","66797246":"print(X_train.shape, y_train.shape, X_test.shape, y_test.shape)","ec9e5ed3":"model_smote = []\nbe_smote = []\nve_smote = []\nprecision0_smote = []\nrecall0_smote = []\nprecision1_smote = []\nrecall1_smote = []\nauc_smote = []","fcbc50b5":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score, KFold\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, plot_roc_curve\nfrom sklearn.feature_selection import RFE","4270631b":"scores=[]\n\nfor n in range(0,28):\n    lr = LogisticRegression(max_iter=1000,random_state=0)\n    rfe = RFE(lr, n_features_to_select = n+1)\n    rfe.fit(X_train, y_train)\n    \n    score = rfe.score(X_test,y_test)\n    scores.append(score)","ca1a2edc":"num_of_features = np.linspace(1,28,28)\nplt.plot(num_of_features, scores)\nplt.show()","90ffb693":"feature_scores = pd.DataFrame(scores,columns=['score'])\nmax(scores), np.argmax(scores)","7db8b597":"feature_scores","b343df21":"# So, number of features which should be selected is 19\nrfe = RFE(lr , n_features_to_select = 19)\nrfe.fit(X,y)","57a0f069":"rfe_features = pd.DataFrame (rfe.ranking_, index = X.columns, columns=[\"selection\"]) \nrfe_features","b188ff46":"features_selected_lr = rfe_features[rfe_features[\"selection\"] == 1].index.copy(deep=True)\nfeatures_selected_lr","6ebb2965":"X[features_selected_lr].head()","846efa93":"X[features_selected_lr].shape","70567c6b":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_lr], y, test_size=0.3, random_state=42, stratify=y)","8f6c8c45":"lr = LogisticRegression(max_iter=1000,random_state=0)\nlr.fit(X_train, y_train)","27444ebc":"y_test_predicted = lr.predict(X_test)\ny_train_predicted = lr.predict(X_train)","ba48a118":"accuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","bc981f94":"kf= KFold(shuffle=True, n_splits=5, random_state=0)\nscore = cross_val_score(lr, X[features_selected_lr], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof=1))","876b4c28":"cm = confusion_matrix(y_test, y_test_predicted)\nprint(cm)","4628ed7b":"print(classification_report(y_test,y_test_predicted))","8c9680c5":"plot_roc_curve(lr, X_test, y_test)\nplt.show()","09ce75dc":"model_smote.append(\"Logistic Regression\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(78)\nrecall0_smote.append(79)\nprecision1_smote.append(78)\nrecall1_smote.append(78)\nauc_smote.append(86)","fcde3887":"from sklearn.naive_bayes import GaussianNB\nfrom mlxtend.feature_selection import SequentialFeatureSelector as SFS","87b8e331":"nb = GaussianNB()\nsfs1 = SFS(nb, k_features=28, scoring='roc_auc' ,cv=kf, verbose=0) \nsfs1 = sfs1.fit(X,y)","3bb1ced1":"sfs_result = pd.DataFrame(sfs1.subsets_).T\nsfs_result","b207f452":"plt.plot(sfs_result['avg_score'])\nplt.show()","7df172a6":"np.max(sfs_result['avg_score']), np.argmax(sfs_result['avg_score'])","caefb488":"sfs2 = SFS(nb, k_features=16, scoring ='roc_auc' ,cv = kf, verbose=0) \nsfs2 = sfs2.fit(X,y)","d6e15148":"features_selected_nb_sfs = sfs2.k_feature_names_\nprint(features_selected_nb_sfs)","1db4c293":"mm = MinMaxScaler()\nX_scaled = mm.fit_transform(X)\nX_scaled = pd.DataFrame(X_scaled,columns = X.columns)\nX_scaled.head()","cd93eeda":"X_train, X_test, y_train, y_test = train_test_split(X_scaled[list(features_selected_nb_sfs)], y, test_size=0.3, random_state=42, stratify=y)","b29aff57":"nb = GaussianNB()\nscore = cross_val_score(nb, X_scaled[list(features_selected_nb_sfs)], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof=1))","6a4eecfb":"nb.fit(X_train,y_train)","df0eb69e":"y_train_predicted = nb.predict(X_train)\ny_test_predicted = nb.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","7aa462c1":"print(confusion_matrix(y_test, y_test_predicted))","93b33a0b":"print(classification_report(y_test, y_test_predicted))","9769e963":"plot_roc_curve(nb, X_test, y_test)","7d355b33":"model_smote.append(\"Naive Bayes\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(81)\nrecall0_smote.append(55)\nprecision1_smote.append(66)\nrecall1_smote.append(87)\nauc_smote.append(82)","e23e496f":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nsfs1 = SFS(knn, k_features=28, scoring='roc_auc' ,cv=kf, verbose=0) \nsfs1 = sfs1.fit(X,y)","05aef635":"sfs_result = pd.DataFrame(sfs1.subsets_).T\nsfs_result","3449df61":"plt.plot(sfs_result['avg_score'])\nplt.show()","76b9f91e":"np.max(sfs_result['avg_score']), np.argmax(sfs_result['avg_score'])","3a650e3a":"sfs2 = SFS(knn, k_features=16, scoring ='roc_auc' ,cv = kf, verbose=0) \nsfs2 = sfs2.fit(X,y)","6adee178":"features_selected_knn_sfs = sfs2.k_feature_names_\nprint(features_selected_knn_sfs)","b509ef56":"X_scaled = mm.fit_transform(X)\nX_scaled = pd.DataFrame(X_scaled,columns = X.columns)\nX_scaled.head()","6b02c7b2":"X_train, X_test, y_train, y_test = train_test_split(X_scaled[list(features_selected_knn_sfs)], y, test_size=0.3, random_state=0, stratify=y)","4d66b1cc":"knn = KNeighborsClassifier()\nparam = {'n_neighbors':np.arange(1,100), 'weights':['uniform','distance']}\nGS = GridSearchCV(knn, param, cv=kf, scoring='roc_auc')\nGS.fit(X_scaled[list(features_selected_knn_sfs)], y)","495cac61":"GS.best_params_","0e7bf410":"knn = KNeighborsClassifier(n_neighbors=11, weights='distance')\nscore = cross_val_score(knn, X_scaled[list(features_selected_knn_sfs)], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof=1))","9094ac62":"knn.fit(X_train, y_train)","08f579ae":"y_train_predicted = knn.predict(X_train)\ny_test_predicted = knn.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","461beb6e":"print(confusion_matrix(y_test, y_test_predicted))","c748968a":"print(classification_report(y_test, y_test_predicted))","ba64ae32":"plot_roc_curve(knn, X_test, y_test)","61e1836e":"model_smote.append(\"K-Nearest Neighbors\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(87)\nrecall0_smote.append(69)\nprecision1_smote.append(74)\nrecall1_smote.append(90)\nauc_smote.append(86)","ac601214":"from sklearn.tree import DecisionTreeClassifier","dc6b86d7":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0, stratify=y)\nscores=[]\n\nfor n in range(0,28):\n    dt = DecisionTreeClassifier(random_state=0)\n    rfe = RFE(dt, n_features_to_select = n+1)\n    rfe.fit(X_train, y_train)\n    \n    score = rfe.score(X_test,y_test)\n    scores.append(score)","a14c5933":"num_of_features = np.linspace(1,28,28)\nplt.plot(num_of_features, scores)\nplt.show()","cb3db7b7":"feature_scores = pd.DataFrame(scores,columns=['score'])\nnp.max(scores), np.argmax(scores)","1215b4f9":"feature_scores","463c39d8":"rfe = RFE(dt, n_features_to_select = 11)\nrfe.fit(X,y)","aa9a4719":"rfe_features = pd.DataFrame(rfe.ranking_, index = X.columns, columns=[\"selection\"]) \nrfe_features","2b24d81e":"features_selected_dt = rfe_features[rfe_features[\"selection\"] == 1].index.copy(deep=True)\nfeatures_selected_dt","96725a22":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_dt], y, test_size=0.3, random_state=42, stratify=y)","8997a51d":"param = {'max_depth':np.arange(1,15), 'criterion':['entropy','gini']}\nGS = GridSearchCV(dt, param, cv=kf, scoring='roc_auc')\nGS.fit(X[features_selected_dt],y)\nGS.best_params_","92085f8d":"dt = DecisionTreeClassifier(max_depth=5,criterion='entropy')\nscore = cross_val_score(dt, X[features_selected_dt], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof=1))","ec921a68":"dt.fit(X_train, y_train)","e876f511":"y_train_predicted = dt.predict(X_train)\ny_test_predicted = dt.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","08f08883":"print(confusion_matrix(y_test, y_test_predicted))","fc1a17d0":"print(classification_report(y_test, y_test_predicted))\n","723d1a29":"plot_roc_curve(dt, X_test, y_test)\nplt.show()","07ea5f87":"model_smote.append(\"Decision Tree\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(78)\nrecall0_smote.append(62)\nprecision1_smote.append(69)\nrecall1_smote.append(83)\nauc_smote.append(76)","0469a0a3":"from sklearn.ensemble import RandomForestClassifier","619a580c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)\nscores=[]\n\nfor n in range(0,28):\n    RF = RandomForestClassifier(random_state=0)\n    rfe = RFE(RF, n_features_to_select = n+1)\n    rfe.fit(X_train, y_train)\n    score = rfe.score(X_test,y_test)\n    scores.append(score)","487837f9":"num_of_features = np.linspace(1,28,28)\nplt.plot(num_of_features, scores)\nplt.show()","9f052497":"feature_scores = pd.DataFrame(scores,columns=['score'])\nnp.max(scores), np.argmax(scores)","6d3cc8bf":"feature_scores","87276959":"rfe = RFE(RF, n_features_to_select = 24)\nrfe.fit(X,y)","1bce1e9b":"rfe_features = pd.DataFrame(rfe.ranking_, index = X.columns, columns=[\"selection\"]) \nrfe_features","60a0d7fa":"features_selected_rf = rfe_features[rfe_features[\"selection\"] == 1].index.copy(deep=True)\nfeatures_selected_rf","283fc288":"X[features_selected_rf]","9e0a88f5":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_rf], y, test_size=0.3, random_state=42, stratify=y)","551c6fe0":"RF_be = []\nRF_ve = []\n\nfor n in np.arange(1,100):\n    RF = RandomForestClassifier(n_estimators=n,criterion='entropy',random_state=0)\n    score = cross_val_score(RF, X[features_selected_rf], y, cv=kf, scoring='roc_auc')\n    RF_be.append(np.mean(1-score))\n    RF_ve.append(np.std(score,ddof=1))","0c039d78":"plt.plot(np.arange(len(RF_ve)), RF_ve)","df114499":"np.min(RF_ve), np.argmin(RF_ve)","3e51de77":"RF_be = []\nRF_ve = []\n\nfor n in np.arange(1,100):\n    RF = RandomForestClassifier(n_estimators=n,criterion='gini',random_state=0)\n    score = cross_val_score(RF, X[features_selected_rf], y, cv=kf, scoring='roc_auc')\n    RF_be.append(np.mean(1-score))\n    RF_ve.append(np.std(score,ddof=1))","3d04638f":"plt.plot(np.arange(len(RF_ve)), RF_ve)","13885156":"RF = RandomForestClassifier(n_estimators=15,criterion='gini')\nscore = cross_val_score(RF, X[features_selected_rf], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof=1))\n","7fbcca44":"RF.fit(X_train, y_train)","9944ba2b":"y_train_predicted = RF.predict(X_train)\ny_test_predicted = RF.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","61423a81":"print(confusion_matrix(y_test, y_test_predicted))","bebace65":"print(classification_report(y_test,y_test_predicted))","af6a48a1":"plot_roc_curve(RF, X_test, y_test)","b183cf7b":"model_smote.append(\"Random Forest\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(80)\nrecall0_smote.append(80)\nprecision1_smote.append(80)\nrecall1_smote.append(80)\nauc_smote.append(88)","0ed8cacd":"from sklearn.ensemble import BaggingClassifier, AdaBoostClassifier","fc13c5ce":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_lr], y, test_size=0.3, random_state=42, stratify=y)","eee61394":"LR_bagged_be = []\nLR_bagged_ve = []\n\nfor n in np.arange(1,100):\n    LR_bag = BaggingClassifier(base_estimator=lr, n_estimators=n, random_state=0)\n    score = cross_val_score(LR_bag, X[features_selected_lr], y, cv=kf, scoring='roc_auc')\n    LR_bagged_be.append(np.mean(1-score))\n    LR_bagged_ve.append(np.std(score,ddof=1))","be623ba8":"plt.plot(np.arange(len(LR_bagged_ve)), LR_bagged_ve)","94b5f27e":"np.min(LR_bagged_ve), np.argmin(LR_bagged_ve)","bfa2253f":"lr_bag = BaggingClassifier(base_estimator = lr, n_estimators=1, random_state=0)\nscore = cross_val_score(lr_bag, X[features_selected_lr], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof=1))","a881a6bb":"lr_bag.fit(X_train, y_train)","074a077d":"y_train_predicted = lr_bag.predict(X_train)\ny_test_predicted = lr_bag.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","0a7ea8d1":"print(confusion_matrix(y_test, y_test_predicted))","9dd4fc40":"print(classification_report(y_test,y_test_predicted))","f5042744":"plot_roc_curve(lr_bag, X_test, y_test)","21ad1a5d":"model_smote.append(\"Bagged Logistic Regression\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(77)\nrecall0_smote.append(78)\nprecision1_smote.append(78)\nrecall1_smote.append(76)\nauc_smote.append(84)","dd8bdf13":"NB_bagged_be = []\nNB_bagged_ve = []\nnb = GaussianNB()\n\nfor n in np.arange(1,100):\n    NB_bag = BaggingClassifier(base_estimator=nb, n_estimators=n, random_state=0)\n    score = cross_val_score(NB_bag, X_scaled[list(features_selected_nb_sfs)], y, cv=kf,scoring='roc_auc')\n    NB_bagged_be.append(np.mean(1-score))\n    NB_bagged_ve.append(np.std(score,ddof = 1))","cf9b8f92":"plt.plot(np.arange(len(NB_bagged_be)),NB_bagged_ve)","073d12d0":"min(NB_bagged_ve),np.argmin(NB_bagged_ve)","2616721d":"NB_bag = BaggingClassifier(base_estimator=nb, n_estimators = 90, random_state=0)\nscore = cross_val_score(NB_bag, X_scaled[list(features_selected_nb_sfs)], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof =1))","87236c2a":"X_train, X_test, y_train, y_test = train_test_split(X_scaled[list(features_selected_nb_sfs)], y, test_size=0.3, random_state=42, stratify=y)","37ae0c0e":"NB_bag.fit(X_train,y_train)","e7f9da96":"y_train_predicted = NB_bag.predict(X_train)\ny_test_predicted = NB_bag.predict(X_test)","c1f0b880":"accuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","6f2c710c":"print(confusion_matrix(y_test, y_test_predicted))","48b0223d":"print(classification_report(y_test,y_test_predicted))","cab712cf":"plot_roc_curve(NB_bag, X_test, y_test)","9130bc4a":"model_smote.append(\"Bagged Naive Bayes\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(83)\nrecall0_smote.append(55)\nprecision1_smote.append(66)\nrecall1_smote.append(89)\nauc_smote.append(82)","5e92b523":"KNN_bagged_be = []\nKNN_bagged_ve = []\nknn= KNeighborsClassifier(n_neighbors=11,weights=\"distance\")\n\nfor n in np.arange(1,100):\n    KNN_bag = BaggingClassifier(base_estimator=knn, n_estimators = n, random_state = 0)\n    score = cross_val_score(KNN_bag, X_scaled[list(features_selected_knn_sfs)], y, cv=kf, scoring=\"roc_auc\")\n    KNN_bagged_be.append(np.mean(1-score))\n    KNN_bagged_ve.append(np.std(score,ddof = 1))","e4538acc":"plt.plot(np.arange(len(KNN_bagged_ve)),KNN_bagged_ve)","b7b8fdd0":"np.min(KNN_bagged_ve),np.argmin(KNN_bagged_ve)","1386fc29":"KNN_bag = BaggingClassifier(base_estimator=knn, n_estimators=52, random_state = 0)\nscore = cross_val_score(KNN_bag, X_scaled[list(features_selected_knn_sfs)], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof =1))","8b602817":"X_train, X_test, y_train, y_test = train_test_split(X_scaled[list(features_selected_knn_sfs)], y, test_size=0.3, random_state=42, stratify=y)","14fc1240":"KNN_bag.fit(X_train,y_train)","68e14c54":"y_train_predicted = KNN_bag.predict(X_train)\ny_test_predicted = KNN_bag.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","4e23583b":"print(confusion_matrix(y_test, y_test_predicted))","cc6db4a7":"print(classification_report(y_test,y_test_predicted))","01d91c5f":"plot_roc_curve(KNN_bag, X_test, y_test)","a707a48e":"from sklearn.ensemble import GradientBoostingClassifier","23d5c6c5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)\nscores=[]\n\nfor n in range(0,28):\n    GB = GradientBoostingClassifier(random_state=0)\n    rfe = RFE(GB, n_features_to_select = n+1)\n    rfe.fit(X_train, y_train)\n    score = rfe.score(X_test,y_test)\n    scores.append(score)","1a8411df":"num_of_features = np.linspace(1,28,28)\nplt.plot(num_of_features, scores)\nplt.show()","baa5774e":"feature_scores = pd.DataFrame(scores,columns=['score'])\nnp.max(scores), np.argmax(scores)","8fc13d9c":"feature_scores","650ee0e6":"rfe = RFE(GB, n_features_to_select = 15)\nrfe.fit(X,y)","1c8d5d3b":"rfe_features = pd.DataFrame(rfe.ranking_, index = X.columns, columns=[\"selection\"]) \nrfe_features","ab703f1c":"features_selected_gb = rfe_features[rfe_features[\"selection\"] == 1].index.copy(deep=True)\nfeatures_selected_gb","12d9e5c7":"X[features_selected_gb].head()","b2d13c02":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_gb], y, test_size=0.3, random_state=42, stratify=y)","43670a74":"GB = GradientBoostingClassifier(random_state=0)\nparam = {'n_estimators':np.arange(1,100)}\nGS = GridSearchCV(GB, param, cv=kf, scoring='roc_auc')\nGS.fit(X[features_selected_gb], y)\nGS.best_params_","2bddc789":"GBoost = GradientBoostingClassifier(n_estimators=96,random_state=0)\nscore = cross_val_score(GBoost, X[features_selected_gb], y, cv=kf, scoring = \"roc_auc\")\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof =1))","2d684ba9":"GBoost.fit(X_train,y_train)","c23f8dc2":"y_train_predicted = GBoost.predict(X_train)\ny_test_predicted = GBoost.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","1cf34699":"print(confusion_matrix(y_test, y_test_predicted))","2384cfe3":"print(classification_report(y_test,y_test_predicted))","f6d0ecb0":"plot_roc_curve(GBoost, X_test, y_test)","56d20005":"model_smote.append(\"Gradient Boosting\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(80)\nrecall0_smote.append(77)\nprecision1_smote.append(78)\nrecall1_smote.append(80)\nauc_smote.append(87)","b7673c3f":"from sklearn.ensemble import VotingClassifier","dca7410b":"AB_RF = AdaBoostClassifier(base_estimator=RF,n_estimators=15, random_state=0)\nGBoost = GradientBoostingClassifier(n_estimators=96,random_state=0)","79647bcd":"stacked_gb_boosted_rf = VotingClassifier(estimators = [('Boosted RF',AB_RF),('GBoost',GBoost)],voting='soft')\nscore = cross_val_score(stacked_gb_boosted_rf, X, y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof =1))","d740f913":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)","4fd9539d":"stacked_gb_boosted_rf.fit(X_train, y_train)","d3024378":"y_train_predicted = stacked_gb_boosted_rf.predict(X_train)\ny_test_predicted = stacked_gb_boosted_rf.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","3ee3d8e2":"print(confusion_matrix(y_test, y_test_predicted))","44d0e918":"print(classification_report(y_test,y_test_predicted))","b21019d2":"plot_roc_curve(stacked_gb_boosted_rf, X_test, y_test)","df20c998":"model_smote.append(\"Stacked GB + Boosted RF\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(81)\nrecall0_smote.append(79)\nprecision1_smote.append(79)\nrecall1_smote.append(81)\nauc_smote.append(89)","c2c544e2":"pd.DataFrame({\"Bias error\":be_smote,\"Variance Error\":ve_smote,'AUC':[x\/100 for x in auc_smote],\n              'Precision : Good Risk':[x\/100 for x in precision0_smote],'Recall : Good Risk':[x\/100 for x in recall0_smote],\n              'Precision : Bad Risk':[x\/100 for x in precision1_smote],'Recall : Bad Risk':[x\/100 for x in recall1_smote]}\n             ,index = model_smote)","048824d0":"from sklearn.metrics import roc_auc_score, recall_score, precision_score, roc_curve, auc","4ac0face":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_rf], y, test_size=0.3, random_state=42, stratify=y)","e0d03374":"RF = RandomForestClassifier(n_estimators=15,criterion='gini')\nAB_RF = AdaBoostClassifier(base_estimator = RF, n_estimators = 52,random_state=0)\nscore = cross_val_score(AB_RF, X[features_selected_rf], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof =1))","a33593a0":"AB_RF.fit(X_train,y_train)\n\ny_train_predicted = AB_RF.predict(X_train)\ny_test_predicted = AB_RF.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","e9244bf8":"print(confusion_matrix(y_test, y_test_predicted))","6dab7e05":"print(classification_report(y_test,y_test_predicted))","f47ce261":"y_pred_prob = AB_RF.predict_proba(X_test)[:,1]","c0c188ac":"fpr,tpr,thresholds = roc_curve(y_test, y_pred_prob)","7be3d531":"len(thresholds)","c23af0df":"auc(fpr,tpr)\nrecall=[]\nprecision=[]\n\nfor i in thresholds:\n    pred1 = np.where(y_pred_prob > i, 1, 0)\n    recall.append(recall_score(y_test,pred1))\n    precision.append(precision_score(y_test,pred1))","675b3a3a":"plt.plot(thresholds,precision)\nplt.plot(thresholds,recall)\nplt.legend(['precision','recall'])\nplt.axvline(x=0.51,color='r')","e7ac48f2":"recall=[]\nprecision=[]\nli=np.arange(0.51,1,0.0001)\n\nfor i in li:\n    pred1=np.where(y_pred_prob < i, 0, 1)\n    recall.append(recall_score(y_test,pred1))\n    precision.append(precision_score(y_test,pred1))","dccacf65":"plt.plot(li,recall)\nplt.plot(li,precision)\nplt.xlabel('Threshold')\nplt.legend(['recall','precision'])","3002aee1":"print(classification_report(y_test,np.where(AB_RF.predict_proba(X_test)[:,1] < 0.51,0,1)))","def6c49a":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_gb], y, test_size=0.3, random_state=42, stratify=y)","394414f4":"GBoost = GradientBoostingClassifier(n_estimators=96,random_state=0)\nscore = cross_val_score(GBoost, X[features_selected_gb], y, cv=kf, scoring = \"roc_auc\")\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof =1))","fba5a3f4":"GBoost.fit(X_train,y_train)","3d739d29":"y_train_predicted = GBoost.predict(X_train)\ny_test_predicted = GBoost.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","22dcf0da":"print(confusion_matrix(y_test, y_test_predicted))","461e560e":"print(classification_report(y_test,y_test_predicted))","3f337182":"y_pred_prob = GBoost.predict_proba(X_test)[:,1]","ec69ea0c":"fpr,tpr,thresholds = roc_curve(y_test, y_pred_prob)\nlen(thresholds)","b441a56d":"auc(fpr,tpr)\nrecall=[]\nprecision=[]\n\nfor i in thresholds:\n    pred1 = np.where(y_pred_prob > i, 1, 0)\n    recall.append(recall_score(y_test,pred1))\n    precision.append(precision_score(y_test,pred1))","87397354":"plt.plot(thresholds,precision)\nplt.plot(thresholds,recall)\nplt.legend(['precision','recall'])\nplt.axvline(x=0.52,color='r')","369ab994":"recall=[]\nprecision=[]\nli=np.arange(0.52,1,0.0001)\n\nfor i in li:\n    pred1=np.where(y_pred_prob < i, 0, 1)\n    recall.append(recall_score(y_test,pred1))\n    precision.append(precision_score(y_test,pred1))","6c549201":"plt.plot(li,recall)\nplt.plot(li,precision)\nplt.xlabel('Threshold')\nplt.legend(['recall','precision'])","bd6ece21":"print(classification_report(y_test,np.where(GBoost.predict_proba(X_test)[:,1] < 0.52,0,1)))","c7e73018":"pd.DataFrame({\"Bias error\":be_smote,\"Variance Error\":ve_smote,'AUC':[x\/100 for x in auc_smote],\n              'Precision : Good Risk':[x\/100 for x in precision0_smote],'Recall : Good Risk':[x\/100 for x in recall0_smote],\n              'Precision : Bad Risk':[x\/100 for x in precision1_smote],'Recall : Bad Risk':[x\/100 for x in recall1_smote]}\n             ,index = model_smote)","aa1682b0":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dense, BatchNormalization, Dropout, LSTM\nfrom keras.models import Sequential\nfrom tensorflow.keras.optimizers import SGD\nfrom keras import callbacks\nfrom sklearn.metrics import precision_score, recall_score, confusion_matrix, classification_report, accuracy_score, f1_score","d93d4eab":"X_train, X_test, y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=7)","6d1f8f4e":"early_stopping = callbacks.EarlyStopping(\n    min_delta=0.001, # minimium amount of change to count as an improvement\n    patience=20, # how many epochs to wait before stopping\n    restore_best_weights=True)\n\nmodel = Sequential()\n\n# layers\nmodel.add(Dense(units = 18, kernel_initializer = 'uniform', activation = 'relu', input_dim = 28))\nmodel.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(units = 4, kernel_initializer = 'uniform', activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n\n# Compiling the ANN\nmodel.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\n# Train the ANN\nhistory = model.fit(X_train, y_train, batch_size = 32, epochs = 500,callbacks=[early_stopping], validation_split=0.2)","1cb02e46":"val_accuracy = np.mean(history.history['val_accuracy'])\nprint(\"\\n%s: %.2f%%\" % ('val_accuracy', val_accuracy*100))","4bd386fe":"history_df = pd.DataFrame(history.history)\n\nplt.plot(history_df.loc[:, ['loss']], \"#6daa9f\", label='Training loss')\nplt.plot(history_df.loc[:, ['val_loss']],\"#774571\", label='Validation loss')\nplt.title('Training and Validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(loc=\"best\")\n\nplt.show()","1c3463bb":"history_df = pd.DataFrame(history.history)\n\nplt.plot(history_df.loc[:, ['accuracy']], \"#6daa9f\", label='Training accuracy')\nplt.plot(history_df.loc[:, ['val_accuracy']], \"#774571\", label='Validation accuracy')\n\nplt.title('Training and Validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()","a389c912":"# Predicting the test set results\ny_pred = model.predict(X_test)\ny_pred = (y_pred > 0.5)\nnp.set_printoptions()","587cb2a4":"# confusion matrix\ncmap1 = sns.diverging_palette(275,150,  s=40, l=65, n=6)\nplt.subplots(figsize=(12,8))\ncf_matrix = confusion_matrix(y_test, y_pred)\nsns.heatmap(cf_matrix\/np.sum(cf_matrix), cmap = cmap1, annot = True, annot_kws = {'size':15})","cbf14672":"print(classification_report(y_test, y_pred))","d00b8e87":"* So, number of features which should be selected is 11","0528ef69":"* Power Transformer","d090ea68":"* Stacked GB + Boosted RF does the best job in Credit Risk analysis of the model.","f9e698c7":"* Bagged Naive Bayes","e84675d6":"Inferences:\n1. 84.5% records have 0 to 2 people liable i.e., people who are financially dependent on debtor.\n2. 15.5% of records have 3 or more people liable i.e., people who are financially dependent on debtor.","4a115e4a":"Inferences:\n* 80% of the bad credit risks happened in case of people having no checking account or having negative balance","d5e4645a":"Inferences:\n1. 63.3% of records have had only 1 loan at this bank.\n2. 33.3% of records have had 2 to 3 loans at this bank.\n3. 2.8% of records have had 4 to 5 loans at this bank.\n4. Only 0.6% of records have had 6 or more loans at this bank.","665eec8f":"Inferences:\n1. 33.2% of credits are given to people who have building society, savings or life insurance as their most valued property.\n2. 28.2% of credits are given to people who either don't have any property or it's unknown. This is critical as it can lead to bad credit risks.\n3. 23.2 % of credits are granted to people whose most valued property is car or any other thing.\n4. 15.4 % of credits are granted to people whose most valued property is real estate.","8722e079":"# SMOTE","15f868db":"Inferences:\n* 70% of bad credit risk cases have purpose as car (used or new) or some other reasons.","f37c3afd":"* Adjusting Threshold","8d766627":"Inferences:\n* 56.3% of bad credit risk cases happened in case of people who have paid back all previous credits duly or who haven't taken credits from this bank. It's kind of strange.","b185bb85":"Inference:\n1. Most of the bad credit risks have duration of at least 12 months and go upto 60 months.\n2. Most of these bad credit risks is between 20 to 60 years of age.","fee776ba":"Inferences:\n* 53% of bad credit risk cases happened for people having installment rate less than 20% of their net income. It means people who have even lesser installment rate are turning out be a bad credit risk. It's because their net income may be very low that's why they can't repay the loans.","b8fcf6f5":"* Gradient Boosting","80d145a3":"Inferences:\n1. 34% of credits are taken by people having 1 to 4 years of employment duration.\n2. 25.3% of credits are taken by people having employment duration greater than 7 years.\n3. 17.4% of credits are taken by people between 4 to 7 years of employment duration.\n4. 17.2% are taken by people with less than 1 year of employment duration.\n5. Only 6.2% of credits are granted to records who were unemployed.","e197a16e":"* There are no NULL values in the dataset.","94024242":"# Statistical Significance","68995691":"Inferences:\n* 90.67% of bad credit risk cases happened in case of people who have no other debtor. It means they were the single borrower of the credit.","d3c6f73b":"Inference:\n* Most of the bad credit risks lie in the age of 20 to 60 years.\n* The amount for these bad credit risks lie in the range of 0 to 12500 DM.","c08c7b8a":"Inferences:\n* 66.67% of bad credit risk cases have taken only 1 credit from this bank.","fc1cc1ef":"Inference:\n1. Duration for most of the good and bad credit risks lie in the range of around 9 to 50 months.\n2. Overlapping is less, so it seems like mean age for good credit risk records and bad credit risk differs significantly.","1439cc8b":"Inferences:\n* 98.67% of bad credit risk cases happened with people who aren't foreign workers.","1eb118d8":"Inferences:\n1. 59.6% of records have a landline telephone registered on debtor's name.\n2. 40.4% of records don't have any a landline telephone registered on debtor's name.","aa098c91":"* Clubbing together of categories having very low percentage of values in different categorical columns.","36b731c0":"* Precision = TruePositives \/ (TruePositives + FalsePositives)\n\n* Recall = TruePositives \/ (TruePositives + FalseNegatives)","d26bee17":"# Categorical Analysis","cf5c38e3":"* Importing the data","dec76e38":"* Let's check the box plots of the numerical features for good and bad credit risks","2ebe30d7":"****[[](http:\/\/)](http:\/\/)****Inferences:\n* 72.3% of bad credit risk cases have no savings account or it's unkwown. So, savings account seems to be a crucial feature.","5f2206ea":"# BIVARIENT ANALYSIS","abfca4a9":"Inferences:\n73.6% of bad credit risk cases happen for people who are living in their present residence for either 1 to 4 years or greater than 7 years. It doesn't indicate anything clearly.","c41f8b1b":"Inferences:\n1. Most of the bad credit risks have duration of at least 12 months and go upto 60 months.\n2. As the duration for bad credit risks increases, the amount also increases.","b14edad3":"Inferences:\n1. 81.4% of records have no other installment plans.\n2. 13.9% of records have other installment plans going on from banks other than the credit-giving bank.\n3. 4.7% of records have other installment plans from stores.","a7b65d4b":"* The numerical variables have some amount of outliers.","51a6b2b9":"1. Chi-Square Test","b097d5a5":"* Mapping the credit risk records from 0 and 1 to good and bad respectively.","50956ae1":"Inferences:\n* 98.67% of bad credit risk cases happened with people who aren't foreign workers.","93dc921e":"Replacing the title with the meaningful title.","d532f0f8":"Inference:\n1. Amount for most of the good and bad credit risk records lie between 0 to 5000 DM.\n2. Overlapping is quite large, but the peak of good credit risk records is higher than the bad ones, so it seems like the mean amount for good credit risk records is greater than that of bad credit risk records.","15e7aacf":"Inferences:\n* 48.6% of bad credit risk cases happened in case of males who are either married or widowed.","20275e47":"Inferences:\n* 84.6% of total bad credit risk cases have 0 to 2 people dependent on the debtor.","3025dfaf":"1. Inferences:\n34% of bad credit risk cases have their most valued property as bulding society \/ savings or life insurance.\n23.6% of of bad credit risk cases have their most valued property as car or something else.","3daef239":"* Converting the columns having ordinal values to numerical codes.","db585db5":"Random Forest","8747d7c3":"Inferences:\n* 58% of bad credit risk cases happened for people having employment duration either less than 1 year or 1 to 4 years. It means most of these are younger people who are in their early career stage.","760eb3ef":"Inference:\n1. Age for most of the good and bad credit risks lie in the range of 20 to 60 years.\n2. Overlapping is large, so it looks like mean age for good credit risk records and bad credit risk records is almost equal.","4d74020a":"Inferences:\n1. 53% of records have either paid back all credits duly or haven't taken any credits.\n2. 29.3% of records have paid all credits at this bank duly.\n3. 8.8% of records have paid back exisiting credits duly till now.\n4. 4.9% of records have critical accounts\/other credits elsewhere.\n5. Only 4% of records had delay in paying off the credit in the past.","ef26a371":"Gradient Boosting","22c4fbfa":"# ****Conclution****","2b25c269":"1. 41.6% of people have installment rate less than 20% of their disposable (net) income.\n2. 23.1% of people have installment rate between 25 to 35% of their disposable income.\n3. 15.7% of people have installment rate between 20 to 25% of their disposable income.\n4. 13.6% of records have installment rate greater than 35% of their disposable income. It means high loans are taken by only 13.6% of the people.","e4ec583c":"* So, number of features to be selected = 16","2d18a0fd":"* Stacked Models","edf3c349":"Inferences:\n1. 63% of credits are given to debtors who are skilled employees or officials.\n2. 20% of credits are granted to debtors who are unskilled - resident. It can be potentially risky.\n3. 14.8% of credits are given to debtors who are managers or self employed or highly qualified employees.\n4. Only 2.2% of credits are given to debtors who are unemployed\/unskilled and non-resident.","07ad13a7":"* 70% of the total records are at good credit risk and only 30% of the data are at bad risk.\n* The data is inbalanced.","4b6b2581":"Inferences:\n1. 54.8% of credits are taken by males who are either married or widowed.\n2. 31% of credits are taken by females who are married or males who are single.\n3. 9.2% of credits are taken by females who are single.\n4. 5% of credits are taken by males who are divorced\/separated.","7d80094b":"# Outlier Treatment","cb5092b6":"Inferences:\n1. Furniture\/Equipment accounts for 28% of purpose for which credits are taken.\n2. Others account for 23.4% of purpose for credits are taken.\n3. Car (Used) and Car (New) accounts for 18.1% and 10.3% respectively.\n4. The purpose for each of the remaining categories is less than 10%.","08c6996c":"2. T-Test of Independence","c1e56e07":"# Modelling","587f56e5":"* Stacked GB + Boosted RF","b60845ab":"*  Naive Bayes","ebdc7d86":"So, number of features to be selected = 16","33236db5":"* Decision Tree","59687bb6":"# One Hot Encoding","a48f24fa":"Inferences:\n* Around 75% of bad credit risk cases happened in case of people who didn't have any other installment plans going on except this bank. It's also kind of strange.","b702a9c7":"Inferences:\n1. More than 60% of records have either no savings accounts or it's unknown.\n2. 18.3% of records have balance greater than 1000 DM in savings account.\n3. 10.3% of people have less than 100 DM balance in savings account.\n4. Only 6.3% of people have balance between 100 to 500 DM and 4.8% people have balance between 500 to 1000 DM","2e6be54c":"* Numerical Analysis","c1ec9523":"Inferences:\n62.33% of bad credit risk records don't have landline telephone registered on debtor's name while 37.67% records have landline telephone registered on debtor's name. It doesn't indicate anything clearly.","d889806a":"Inferences:\n1. 96.3% of credits are taken by people who aren't foreign workers.\n2. Only 3.7% of credits are taken by foreign workers.","e56b5be8":"* Random Forest","f7d16f1c":"Inferences:\n1. High positive correlation between duration and amount.\n2. Low positive correlation between amount and age.\n3. Low negative correlation between duration and age.","a3cccfe3":"# Logistic Regression","9ede1ddf":"# EXPLORATORY ANALYSIS","7d246a2b":"* Bivarient analysis for categorical columns.","cdb55b19":"* So, number of features which should be selected is 24.","cd8c60d6":"* Age,Duration as well as amount is highly right skewed.","5b0385a9":"* So, number of features which should be selected is 15","8b8d97dd":"* Bivarient variable for numerical variable.","3456fccd":"* Bagged KNN","a75abe8a":"This Dataset conists of 1000 rows and 21 columns.","8927a5cb":"Inferences:\n1. 41.3% of credits were granted to people who were living at their present residence for more than 7 years.\n2. 30.8% of credits were granted to people who were living at their present residence between 1 to 4 years.\n3. 14.9% of credits were granted to people who were living at their present residence between 4 to 7 years.\n4. 13% of credits were granted to people who were living at their present residence for less than 1 year.","42099c4d":"* K-Nearest Neighbors","3caf3fb5":"Inferences:\n1. Median for bad credit risk records is almost same as the median for good credit risk records.\n2. IQR for bad credit risk records is greater than IQR of good credit risk records.","853d6f15":"# LIBRARY","055eccde":"* Replacing the good credit risk records with 0 and bad credit risk records with 1.","4a665699":"* Now, let's see how the data is scattered among different numerical columns with respect to credict risk.","8e2ed2f2":"# Univariate Analysis","fec1d571":"Inferences:\n* 62% of bad credit risk cases happened with people who are skilled employees or officials. It's kind of strange that these people turned out to be defaulters.","ff90635c":"* Bagged Logistic Regression","7f66f14b":"# ANN"}}