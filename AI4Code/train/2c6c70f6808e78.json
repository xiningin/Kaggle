{"cell_type":{"5a07fd5d":"code","8cbf052b":"code","53913b25":"code","2a385123":"code","025b23fb":"code","d4f2c109":"code","948d0988":"code","745163ae":"code","20c754b5":"code","4446aedc":"code","d861dfc5":"code","cbaa57a5":"code","448f0be0":"code","78f82223":"code","85d40e8d":"code","c77d7b7c":"code","94da9f33":"code","e3ce8bdc":"code","b648c8bb":"code","49efe5a4":"code","6d14b8a5":"code","18dfb8ea":"code","b6c7a0a3":"code","525596b0":"code","167acc62":"code","cf7d8ac4":"code","89bea83c":"code","8a7bffca":"code","18d93a15":"code","c619cb8d":"code","99c89562":"code","9dd3d9dc":"code","4a92d72c":"code","213e08a9":"code","5663595c":"code","63c610dd":"code","b5ed51e1":"code","3329e2d3":"code","6305a88d":"code","2a1f1dba":"code","7efb672a":"code","055ca655":"code","a3cd18ce":"markdown","92e37955":"markdown","5c8052db":"markdown","15dde92f":"markdown","6c692ce1":"markdown","e7d585c7":"markdown","7358fc3c":"markdown","faba7488":"markdown","c62961da":"markdown","ecad1cb4":"markdown","fa8b3405":"markdown","d6080695":"markdown","c3f6c662":"markdown","4e60d332":"markdown","446d6773":"markdown","4acf20dc":"markdown","3aee0ad4":"markdown","8f11b247":"markdown","df70f8e3":"markdown","1f3926ab":"markdown","e981e357":"markdown","3b66e9a6":"markdown","373fd47f":"markdown","6904de05":"markdown"},"source":{"5a07fd5d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8cbf052b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\nfrom wordcloud import WordCloud\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier\nfrom sklearn.model_selection import KFold,train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import f1_score\nfrom sklearn.feature_selection import RFE\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom statistics import mode","53913b25":"Pokemon=pd.read_csv(\"\/kaggle\/input\/pokemon\/Pokemon.csv\")","2a385123":"Pokemon.columns","025b23fb":"Pokemon.shape","d4f2c109":"Pokemon.head()","948d0988":"D=pd.DataFrame({\"Dtype\":Pokemon.dtypes,\"Null\":Pokemon.isnull().sum(),\"Percentage NUlls\":Pokemon.isnull().sum()\/len(Pokemon)*100,\"Uniques\":Pokemon.nunique()})\nD","745163ae":"Pokemon=Pokemon.drop(\"#\",axis=1)","20c754b5":"Pokemon['Type 1'].value_counts(normalize=True)","4446aedc":"Pokemon['Type 1'].value_counts().plot(kind=\"bar\",color=\"green\")","d861dfc5":"Pokemon['Type 2'].value_counts(normalize=True)","cbaa57a5":"Pokemon['Type 2'].value_counts().plot(kind=\"bar\",color=\"green\")","448f0be0":"sns.distplot(Pokemon['Attack'])","78f82223":"sns.distplot(Pokemon['Defense'])","85d40e8d":"Pokemon['Generation'].value_counts().plot(kind=\"bar\")","c77d7b7c":"Pokemon['Legendary'].value_counts(normalize=True)","94da9f33":"Pokemon['Legendary'].value_counts()","e3ce8bdc":"Pokemon['Legendary'].value_counts().plot(kind=\"bar\")","b648c8bb":"Pokemon[Pokemon['Legendary']==True][\"Name\"].head()","49efe5a4":"w=WordCloud()\nlegend=\" \"\nfor i in Pokemon[Pokemon['Legendary']==True][\"Name\"]:\n  legend=legend+\" \"+i\nplt.figure(figsize=(15,7))\nplt.grid(False)\nplt.imshow(w.generate(legend),interpolation='bilinear',)","6d14b8a5":"plt.figure(figsize=(15,7))\nsns.distplot(Pokemon['HP'])","18dfb8ea":"Pokemon['HP'].describe()","b6c7a0a3":"sns.catplot(x=\"Legendary\",y=\"Type 1\",data=Pokemon,kind=\"bar\",legend=True)","525596b0":"Ct=pd.crosstab(Pokemon['Type 1'],Pokemon['Legendary'])\nCt.div(Ct.sum(1),axis=0).plot.bar(stacked=True)","167acc62":"corr=Pokemon.corr()\ncorr=corr.where(np.triu(np.ones(corr.shape),k=1).astype(np.bool))\nplt.figure(figsize=(15,8))\nsns.heatmap(corr,annot=True,cmap=\"YlGnBu\")","cf7d8ac4":"def fill_type2(x):\n  return Pokemon[Pokemon[\"Type 1\"]==x[\"Type 1\"]][\"Type 2\"].mode()[0]","89bea83c":"Pokemon['Type 2']=Pokemon.apply(lambda x:fill_type2 if pd.isnull(x[\"Type 2\"]) else x[\"Type 2\"],axis=1)","8a7bffca":"new_pokemon=pd.get_dummies(Pokemon.drop(\"Legendary\",axis=1))","18d93a15":"Maxmin=MinMaxScaler()","c619cb8d":"Pokemon_scaled=Maxmin.fit_transform(new_pokemon)","99c89562":"new_pokemon_scaled=pd.DataFrame(Pokemon_scaled,columns=new_pokemon.columns)","9dd3d9dc":"x=new_pokemon_scaled\ny=Pokemon['Legendary'].replace({True:1,False:0})","4a92d72c":"x_train,x_test,y_train,y_test=train_test_split(x,y,stratify=y,train_size=0.9,shuffle=True,random_state=92)","213e08a9":"x_train.shape,x_test.shape,y_train.shape,y_test.shape","5663595c":"def model_build(model,x_train,y_train,x_test,y_test):\n   k=KFold(shuffle=True,random_state=94,n_splits=4)\n   a=1\n   for i,j  in k.split(x_train,y_train):\n               x_trainn,x_val=  x_train.iloc[i],x_train.iloc[j]\n               y_trainn,y_val=  y_train.iloc[i],y_train.iloc[j]\n\n               model.fit(x_trainn,y_trainn)\n               train_scores=model.predict(x_trainn)\n               test_scores=model.predict(x_val)\n               val_scores=model.predict(x_test)\n               print(\"{}.Train f1 score is {} and test f1_score is {} validation score {}\".format(a,f1_score(train_scores,y_trainn),f1_score(y_val,test_scores),f1_score(y_test,val_scores)))\n           \n\n               a=a+1\n   test=model.predict(x_test)\n   trains=model.predict(x_train)\n   return model,test,trains","63c610dd":"X=RandomForestClassifier(max_features=0.5,random_state=88,n_estimators=500,max_depth=100)\nX,test_predictions,train_predictions=model_build(X,x_train,y_train,x_test,y_test)","b5ed51e1":"L=KNeighborsClassifier(n_neighbors=1)\nL,l_test_score,l_train_scores=model_build(L,x_train,y_train,x_test,y_test)","3329e2d3":"A=AdaBoostClassifier(n_estimators=400,learning_rate=0.7)\nA,a_test_score,a_train_scores=model_build(A,x_train,y_train,x_test,y_test)","6305a88d":"accuracy=pd.DataFrame({\"test\":[f1_score(a_test_score,y_test),f1_score(test_predictions,y_test),f1_score(l_test_score,y_test)],\"train\":[f1_score(a_train_scores,y_train),f1_score(train_predictions,y_train),f1_score(l_train_scores,y_train)]},index=[\"Ada\",\"random\",\"Neighbors\"])\naccuracy.plot(kind=\"bar\")","2a1f1dba":"x=new_pokemon_scaled[ranks['columns'][:500]]\ny=Pokemon['Legendary'].replace({True:1,False:0})","7efb672a":"final=[]\nfor i in range(len(l_test_score)):\n      final.append(mode([test_predictions[i],l_test_score[i],a_test_score[i]]))","055ca655":"f1_score(final,y_test)","a3cd18ce":"Most pokemons have attack between 70 and 100,and they are normally Distributed","92e37955":"As our target is not equally distributed we cannot use accuracy,we are going to use another metric called as f1 score","5c8052db":"Mean Health of all pokemons is 69,  most of the pokemons have health between 65 to 80","15dde92f":"Most of the Legendary TYpe Pokemons have first Type Flying\n\n\n","6c692ce1":"the \"#\" doesnt tell us anything","e7d585c7":"Final F1 Score after after ensembling 3 models is 90 percent, so we can predict if our pokemon is legendary with 90 percent confidence ","7358fc3c":"There are only 65 Legendary Pokemons amoung 800 Pokemons","faba7488":"*The Above image cointains all the pokemons*","c62961da":"Most of the pokemons are generation 1 Pokemons\nGeneration 6 are the least","ecad1cb4":"# UNIVARIATE ANALYSIS","fa8b3405":"Only 8 % of the Pokemons are LEGENDARY, remaining are normal Pokemons","d6080695":"# BIVARIATE ANALYSIS","c3f6c662":"\n\n*  14 percent of pokemon having 1st type water , it is the most common  type 1 of Pokemon\n*   Flying Type pokemons are the rarest pokemon first Type\nfor a pokemon\n\n","4e60d332":"![alt text](https:\/\/images.squarespace-cdn.com\/content\/v1\/51d3a8f6e4b085686832d41d\/1379381612026-4Q7SD886Q6JDDMPBGKA6\/ke17ZwdGBToddI8pDm48kF6me4WIKcQyiJGDHKOTMXZZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZamWLI2zvYWH8K3-s_4yszcp2ryTI0HqTOaaUohrI8PIEYrKsYlfql8PAsl_09JHAxJlGpVb3NHgTRYRkIuvMzQ\/Pok%C3%87mon+Gotta+Catch+%27Em+All_Logo_EN_800px_150dpi.png)","446d6773":"![alt text](https:\/\/i.pinimg.com\/originals\/72\/a3\/a2\/72a3a255b546145656e651ffd981045f.jpg)","4acf20dc":"To avoid over fitting we are using Kfold to make our model perfectly fit our data","3aee0ad4":"By this heat Map we can find the continious variables which really effect our categorical variable LEGENDARY","8f11b247":"# Classify if the pokemon is legendary or not","df70f8e3":"![alt text](https:\/\/i.pinimg.com\/originals\/ef\/04\/cc\/ef04cc59edfd2cbdfb52999c79018b34.jpg)","1f3926ab":"#  Model Building ","e981e357":"Adaboost is the best of them all","3b66e9a6":"After getting the new features x,y ,now we must go to train_test_split and run again","373fd47f":"\n\n*  23 % of pokemon having 2nd type as Flying , it is the most common  type 1 of Pokemon\n*  Bug Type pokemons are the rarest pokemon 2nd Type\nfor a pokemon\n\n\n*   Suprisingly Flying type which is the rarest 1st type but is the most common 2nd Type \n\n\n\n ","6904de05":"After Flying type Dragon Type are legendary\n"}}