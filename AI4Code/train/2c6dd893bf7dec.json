{"cell_type":{"3e9d36aa":"code","2db51b69":"code","2247a49a":"code","d740e125":"code","7df1d18e":"code","772ccd2e":"code","1d7aeceb":"code","1384e7e3":"code","2af8102a":"code","fd02e27e":"code","008963dc":"code","33bc924b":"code","c27d3501":"markdown","bfc78966":"markdown","b3a21420":"markdown","47fa8601":"markdown","6f52e343":"markdown","7b224a92":"markdown","19aa2995":"markdown","23630bfc":"markdown","e3336036":"markdown","8af57c21":"markdown","8a0df369":"markdown"},"source":{"3e9d36aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2db51b69":"x=2 # this is a global scope\ndef func():\n    x=5 #this is a local scope-this is doesn't mean anything for global x.\n    return x\nprint(x) #global\nprint(func()) #local","2247a49a":"x=5\ndef func():\n    global x    #x--->x=5\n    x=x+5\n    return x\n\nprint(func())","d740e125":"#Built in scope are functions defined by python.\n# How can we learn what is built in scope\nimport builtins\ndir(builtins)","7df1d18e":"def square():\n    \"\"\"\"return square of value\"\"\"\n    def add():\n        \"\"\"\" add two local variable\"\"\"\n        x=3\n        y=4\n        z=x+y\n        return z\n    return add()**2\nprint(square())","772ccd2e":"#let's look at with one example \ndef func(a,b=4): #b is a default argument thats mean, if you doesn't define b function will accept b = 4.\n    return a+b\nprint(func(3))","1d7aeceb":"#we will use '*args' key word for flexible arguments\n#thats mean I don't know how many variables I'm going to put in, but process what I put in.\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,3,2,7)\n\n# **kwars key word for dictionary types\ndef func(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key,value in kwargs.items():\n        print(key ,':', value)\nfunc(country='turkey',capital='ankara')\n","1384e7e3":"square=lambda x:x**2   # where x is name of argument\n\n#that's mean:\n\ndef square2(x):\n    return x**2\n\nprint(square(2))\nprint(square2(2))","2af8102a":"list1=[1,2,3,4,5]\nlist2=[6,7,8,9,10]\nz=zip(list1,list2)\nprint(z)\nz_list=list(z)\nprint(z_list)","fd02e27e":"un_zip=zip(*z_list)\nunlist1,unlist2=list(un_zip) # unzip returns tuple\nprint(unlist1)\nprint(unlist2)\nprint(type(unlist1))","008963dc":"#example 1\nnum1=[1,2,3]\nnum2=[i+1 for i in num1] \nprint(num2)\n","33bc924b":"#example 2\nnum1=[1,2,3,4,5]\nnum2=[i+2 if i%2==0 else i**2 if i%3==0 else i+1 for i in num1]\nprint(num2)\n\n# [if i%3==0 else i+1] this part mean elif\n","c27d3501":"***Defalut:***","bfc78966":"# DEFAULT and FLEXIBLE ARGUMENTS\n","b3a21420":"*Unzip*","47fa8601":"* [i + 1 for i in num1 ]: list of comprehension\n* i +1: list comprehension syntax\n* for i in num1: for loop syntax\n* i: iterator\n* num1: iterable object","6f52e343":"***Flexible:***","7b224a92":"# Lambda Function\n\nFaster way of writing function","19aa2995":"# **SCOPE**\n\n1. global:defined main body in script\n2. local:defined in a function\n3. built in scope:names in predefined built in scope module such as print,len","23630bfc":"*Zips:*","e3336036":"# Nested Functions\n1. function inside function.","8af57c21":"# LIST COMPREHENSION\n1. One of the most important topic of this kernel\n2. We use list comprehension for data analysis often.\n3. Ex: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is unnecessarily long. We can make it one line code that is list comprehension.\n\n","8a0df369":"if you want use global x you can use 'global' key word."}}