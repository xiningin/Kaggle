{"cell_type":{"924927c5":"code","8f35c103":"code","27cf81d1":"code","a6146056":"code","a9468245":"code","7aa370d5":"code","69d15c4d":"code","0a4992aa":"code","15fddd16":"code","5c99d20f":"code","374fe2b9":"code","eef644b3":"code","d3b4a9df":"code","1311f63c":"code","1ddc27ab":"code","90eccbb2":"code","5184a68e":"code","692b5905":"code","21407455":"code","8818aadc":"code","c62015b6":"code","b405657f":"code","5ee55953":"code","a5f60009":"code","9a3982da":"code","53ebe746":"code","57102cda":"code","9561e42e":"code","a91d618f":"code","f4e4d7d7":"code","8b10f644":"code","1a627f23":"code","ca1f179a":"code","68361dba":"code","51815699":"code","6d1481b9":"code","5a89e87b":"code","12dac65a":"code","decfdce5":"code","553a0756":"code","13bb0c48":"code","8dc3a06c":"code","5a96aa09":"code","37498821":"code","081e2957":"code","0c1e0d9d":"code","a37df7be":"code","cecf9466":"code","df9f7a46":"code","6fc91d72":"code","a428c947":"code","d3834b06":"code","779c1fd6":"markdown","9bdb0318":"markdown","c8627d27":"markdown","9f0fb011":"markdown","1be16675":"markdown","55d01e63":"markdown","74cf6b59":"markdown","c721e917":"markdown","9087a04c":"markdown","e06ee2b8":"markdown","5bd7b327":"markdown","f4186119":"markdown","a8f3e74d":"markdown","bee5b5ed":"markdown","5ddf1ee3":"markdown","faccdee6":"markdown","79636f77":"markdown","635b46ca":"markdown","a101f07a":"markdown","6270373d":"markdown","ed76cdb1":"markdown","f6d1d3c5":"markdown","3cd3ad51":"markdown","13d51f3e":"markdown","d03c08ec":"markdown","381af470":"markdown","748354bf":"markdown","b7386053":"markdown","0b3d5ee1":"markdown","69bcd359":"markdown","38e2c35a":"markdown","60c63fc2":"markdown","05e796b4":"markdown","10e9f04b":"markdown","958b5373":"markdown","80d83640":"markdown","14676a44":"markdown","ee88226b":"markdown"},"source":{"924927c5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os","8f35c103":"os.listdir(\"..\/input\/osic-pulmonary-fibrosis-progression\")","27cf81d1":"train = pd.read_csv(\"..\/input\/osic-pulmonary-fibrosis-progression\/train.csv\")\ntest = pd.read_csv(\"..\/input\/osic-pulmonary-fibrosis-progression\/test.csv\")","a6146056":"train.head()","a9468245":"test.head()","7aa370d5":"submission = pd.read_csv(\"..\/input\/osic-pulmonary-fibrosis-progression\/sample_submission.csv\")","69d15c4d":"submission.head()","0a4992aa":"print(f\"Train info {train.shape}\")\nprint(f\"test info {test.shape}\")\nprint(f\"submission info {submission.shape}\")","15fddd16":"import pydicom\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5c99d20f":"print(f\"Total Patient Id {train['Patient'].count()}\")\nprint(f\"NUmber of Unique Id {train['Patient'].value_counts().shape[0]}\")","374fe2b9":"train[\"SmokingStatus\"].value_counts().plot(kind=\"bar\")","eef644b3":"img = \"..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00009637202177434476278\/100.dcm\"\nds = pydicom.dcmread(img)\nplt.figure(figsize = (5,5))\nplt.imshow(ds.pixel_array, cmap=plt.cm.bone)","d3b4a9df":"import random\n\n\ndef get_random(smokes):\n    smoke_pat = train[train[\"SmokingStatus\"]==smokes] \n    patientz = [i for i in smoke_pat[\"Patient\"]] # patient id list\n    r_st = random.choice(patientz) # random choice\n    print(r_st)\n    image_dir = f\"..\/input\/osic-pulmonary-fibrosis-progression\/train\/{r_st}\" # image directory\n    image_list = os.listdir(image_dir) # list of images\n    c = []\n    for t in image_list:\n        first, exts = os.path.splitext(t) # split text\n        first = int(first) # int\n        c.append(first) # append\n    d = [num for num in range(1, 31)] # num from 1 to 30\n    gh = []\n    for x in c:\n        if x in d:\n            gh.append(x) # if number is in list then append\n    fig = plt.figure(figsize=(10, 10)) # figure\n    columns = 5\n    row = 6\n    for ab in gh:\n        files = image_dir + \"\/\" + str(ab) + \".dcm\" # file directory\n        ds = pydicom.dcmread(files) # read dcm file\n        fig.add_subplot(row, columns, ab) # add plot\n        plt.imshow(ds.pixel_array, cmap=plt.cm.bone) # show images\n    plt.suptitle(smokes) # title","1311f63c":"get_random(\"Ex-smoker\")","1ddc27ab":"get_random(\"Never smoked\")","90eccbb2":"get_random(\"Currently smokes\")","5184a68e":"submission[\"Patient\"] = submission[\"Patient_Week\"].apply(lambda x:x.split(\"_\")[0])\nsubmission[\"Weeks\"] = submission[\"Patient_Week\"].apply(lambda x:x.split(\"_\")[1])\n\nsubmission =  submission[['Patient','Weeks', 'Confidence','Patient_Week']]\nsubmission = submission.merge(test.drop('Weeks', axis=1), on=\"Patient\")","692b5905":"submission.tail()","21407455":"submission.shape","8818aadc":"submission[\"Patient\"].unique()","c62015b6":"train[\"Dataset\"] = \"train\"\ntest[\"Dataset\"] = \"test\"\nsubmission[\"Dataset\"] = \"submission\"","b405657f":"dataset = train.append([test, submission])\ndataset = dataset.reset_index()\ndataset = dataset.drop(columns=['index'])","5ee55953":"dataset.head()","a5f60009":"dataset[\"Weeks\"] = dataset[\"Weeks\"].astype(\"int64\")","9a3982da":"dataset.info()","53ebe746":"dataset[\"First_week\"] = dataset[\"Weeks\"]\ndataset.loc[dataset.Dataset=='submission','First_week'] = np.nan\ndataset[\"First_week\"] = dataset.groupby('Patient')['First_week'].transform('min')","57102cda":"dataset.head()","9561e42e":"dataset = dataset.merge(dataset[dataset[\"Weeks\"] == dataset[\"First_week\"]][[\"Patient\", \"FVC\"]].rename({\"FVC\": \"First_FVC\"}, axis=1).groupby(\"Patient\").first().reset_index(), on=\"Patient\", how=\"left\")","a91d618f":"dataset[\"Week_diff\"] = dataset[\"Weeks\"] - dataset[\"First_week\"]\n# dataset[\"FVC_diff\"] = dataset[\"FVC\"] - dataset[\"First_FVC\"]\n\ndataset = pd.concat([dataset,pd.get_dummies(dataset.Sex),pd.get_dummies(dataset.SmokingStatus)], axis=1)\n\ndataset = dataset.drop(columns=['Sex', 'SmokingStatus'])","f4e4d7d7":"dataset.head()","8b10f644":"dataset.info()","1a627f23":"train = dataset[dataset[\"Dataset\"]==\"train\"]\ntest = dataset[dataset[\"Dataset\"]==\"test\"]\nsubmission = dataset[dataset[\"Dataset\"]==\"submission\"]","ca1f179a":"from sklearn.preprocessing import StandardScaler\n\ncol = ['Weeks', 'Percent', 'Age', 'First_week', 'First_FVC', 'Week_diff',\n       'Female', 'Male', 'Currently smokes', 'Ex-smoker', 'Never smoked']\n\ntrain_data = train[col]","68361dba":"train_data.isnull().any()","51815699":"plt.subplots(figsize=(14,10))\ng = train.corr()\nsns.heatmap(g, annot=True, fmt='.2', cmap=\"Dark2_r\")","6d1481b9":"g[\"FVC\"].sort_values(ascending=False)","5a89e87b":"stdscale = StandardScaler()\ntrain_data[col] = stdscale.fit_transform(train_data[col])","12dac65a":"train_data[col]","decfdce5":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor","553a0756":"model_params = {\n    \"svr\": {\n        \"model\": SVR(gamma=\"auto\"),\n        \"params\": {\n            \"C\": [1, 5, 10, 15, 20],\n            \"kernel\":['linear', 'poly', 'rbf', 'sigmoid']\n        }\n    },\n    \"RandomForest\": {\n        \"model\": RandomForestRegressor(),\n        \"params\": {\n            \"n_estimators\":[100, 200],\n        }\n    },\n    \"LR\": {\n        \"model\": LinearRegression(),\n        \"params\": {\n            \n        }\n    },\n    \"Decision Tree\": {\n        \"model\": DecisionTreeRegressor(),\n        \"params\": {\n            \"splitter\": [\"best\", \"random\"],\n            \"criterion\": [\"mse\", \"mae\"],\n            \"max_depth\": [5, 10, 15],\n        }\n    }\n}","13bb0c48":"from sklearn.model_selection import GridSearchCV\nscores = []\nfor model_name, param in model_params.items():\n    clf = GridSearchCV(param[\"model\"], param[\"params\"], cv=10, return_train_score=False)\n    clf.fit(train_data[col], train[\"FVC\"])\n    scores.append({\n        \"model\": model_name,\n        \"best_score\": clf.best_score_,\n        \"best_params\": clf.best_params_,\n    })\n\ndf = pd.DataFrame(scores, columns=[\"model\", \"best_score\", \"best_params\"])\ndf","8dc3a06c":"model = LinearRegression()\n\nmodel.fit(train_data[col], train[\"FVC\"])","5a96aa09":"pred = model.predict(train_data)\npred","37498821":"from sklearn.metrics import mean_squared_error, mean_absolute_error\n\nmse = mean_squared_error(train[\"FVC\"], pred, squared=False)\n\nprint(mse)\n\nmae = mean_absolute_error(train[\"FVC\"], pred)\nprint(mae)","081e2957":"a = list(train[\"FVC\"])\nb = list(pred)\n\nsns.set_style('whitegrid')\nf, ax = plt.subplots(figsize=(15, 5))\nplt.plot(b[:10], c='green', label= 'predictions')\nplt.plot(a[:10], c='red', label= 'actual')\nplt.legend()","0c1e0d9d":"submission[col].isnull().any()","a37df7be":"sub_data = submission[col]\nsub_data = stdscale.fit_transform(sub_data[col])","cecf9466":"pred_2 = model.predict(sub_data)","df9f7a46":"a = list(submission[\"FVC\"])\nb = list(pred_2)\n\nsns.set_style('whitegrid')\nf, ax = plt.subplots(figsize=(15, 5))\nplt.plot(b, c='green', label= 'predictions')\nplt.plot(a, c='red', label= 'actual')\nplt.legend()","6fc91d72":"submission[\"FVC_1\"] = pred_2\n\nconfidence_dict={}\nfor id in submission['Patient'].unique():\n    real=float(test[test['Patient']==id]['FVC'])\n    predicted=float(submission[(submission['Patient']==id) & (submission['Weeks'].astype(int)==int(test[test['Patient']==id]['Weeks']))]['FVC_1'])\n    confidence_dict[id]=abs(real-predicted)\n    \n    \nconfidence=[]\nfor i in range(len(submission)):\n    confidence.append(confidence_dict[submission.iloc[i,0]])\nsubmission['Confidence']=confidence","a428c947":"new = submission[[\"Patient_Week\", \"FVC_1\", \"Confidence\"]]\nnew.rename(columns={\"FVC_1\":\"FVC\"}, inplace=True)","d3834b06":"new.to_csv(\"submission.csv\", index=False)","779c1fd6":"# Hyperparameter tunning","9bdb0318":"# predict data","c8627d27":"# import necessary dependencies","9f0fb011":"# make new column First_week and take min number","1be16675":"# confidence","55d01e63":"# list from directory","74cf6b59":"# patient column unique id value_counts","c721e917":"# Correlation check","9087a04c":"# prediction","e06ee2b8":"# GridSearch","5bd7b327":"# import necessary packages","f4186119":"# best score given by Linear Regression","a8f3e74d":"# take a random id and images","bee5b5ed":"# split dataset","5ddf1ee3":"# new column","faccdee6":"# take a look","79636f77":"# correlation between label(\"FVC\") and others","635b46ca":"# mean squared error and mean absolute error","a101f07a":"# submission data split and merge with test data","6270373d":"# convert object to int64","ed76cdb1":"# dataset information","f6d1d3c5":"# plot of actual and prediction","3cd3ad51":"# submission data patient unique id","13d51f3e":"# Normalize","d03c08ec":"# read train, test, submission csv","381af470":"# visualize","748354bf":"# shape of submission","b7386053":"# Merge test and submission with train","0b3d5ee1":"# smoking status bar plot","69bcd359":"# take a look of .dcm extension","38e2c35a":"# Normalize data by StandardScalar","60c63fc2":"# create csv","05e796b4":"# check the week difference","10e9f04b":"# random ex-smoker patient","958b5373":"# import visualization packages","80d83640":"# shape of train, test and submission","14676a44":"# check null","ee88226b":"# Normalization"}}