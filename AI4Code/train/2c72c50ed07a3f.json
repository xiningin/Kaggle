{"cell_type":{"ef23ce29":"code","d8cf455c":"code","c0cd051d":"code","f071b69b":"code","6ce26a09":"code","dce3c3c2":"code","9df0d039":"code","6af4af43":"code","d3300246":"code","9b16e837":"code","89438f1d":"code","de64dfd1":"code","d519dde5":"code","c0ede087":"code","2e1acf69":"code","82a815da":"code","2dc349d5":"code","acc5a617":"code","156649ea":"code","b92ae913":"code","ab3afeee":"code","ece917c2":"code","7ce7591a":"code","3ab063cc":"code","935dbde8":"code","f68e3e29":"code","18a9ec0a":"code","305bd071":"code","fd700f64":"markdown","faa11338":"markdown","ae2efbbd":"markdown","f303c63f":"markdown","47bb6948":"markdown","7fd577c9":"markdown","78241217":"markdown","21c03e9c":"markdown","f4a358df":"markdown","3eaf7657":"markdown"},"source":{"ef23ce29":"import os, glob, pandas as pd","d8cf455c":"# Paths\n\ninput_dir = os.path.abspath('\/kaggle\/input\/')\narticles_dir = input_dir + '\/cord19csv\/'","c0cd051d":"%%time\n\nli_df = []\n\nfor jt in ['pdf','pmc']:\n    path = f'{articles_dir}\/{jt}*.csv'\n    files = glob.glob(path)\n    \n    for file in files:\n        if jt == \"pdf\":            \n            df_pdf = pd.read_csv(file, index_col=None, header=0)\n            li_df.append(df_pdf)\n        else:\n            df_pmc = pd.read_csv(file, index_col=None, header=0)        \n            li_df.append(df_pmc)\n\n# Combine all papers dataframes in one\ndf = pd.concat(li_df, axis=0, ignore_index=True, sort=False)","f071b69b":"df.shape","6ce26a09":"df.head()","dce3c3c2":"# Drop duplicated documents by paper_id\ndf.drop_duplicates(subset=\"paper_id\", keep='first', inplace=True)","9df0d039":"# Drop duplicated documents by text\ndf.drop_duplicates(subset=\"doc_text\", keep='first', inplace=True)\ndf.shape","6af4af43":"# Create the lists of key terms\n\nterms_group_id = \"genetics\"\n\nterms1 = [\n    \"Real-time tracking of whole genomes\",\n    \"Real-time tracking\",\n    \"Whole genomes\",\n    \"Mechanism for coordinating\",\n    \"Dissemination of information\",\n    \"Mechanism for coordinating\",\n    \"Inform of diagnostics\",\n    \"Therapeutics\",\n    \"Track variations of the virus over time\",\n    \"Track variations over time\",\n    \"Track variations\",\n    \"Track variations\"\n]\n\nterms2 = [\n    \"Sample sets\",\n    \"Access to geographic sample sets\",\n    \"Geographic sample sets\",\n    \"Geographic distribution\",\n    \"Genomic differences\",\n    \"Strain in circulation\",\n    \"Multi-lateral agreements\",\n    \"Nagoya protocol\"\n]\n\nterms3 = [\n    \"Livestock could be infected\",\n    \"Livestock infected\",\n    \"Livestock\",\n    \"Field surveillance\",\n    \"Genetic sequencing\",\n    \"Receptor binding\",\n    \"Reservoir\",\n    \"Farmers infected\",\n    \"Farmers origin\",\n    \"Farmers\",\n    \"Farmers\",\n    \"Surveillance of mixed wildlife\",\n    \"Experimental infections\"\n]\n\nterms4 = [\n    \"Animal host(s)\",\n    \"Spill-over to humans\",\n    \"Spill-over\"\n]\n\nterms5 = [\"Spillover\"]\n\nterms6 = [\n    \"Sustainable\",\n    \"Management measures\"\n]\n\nterms = terms1 + terms2 + terms3 + terms4 + terms5 + terms6","d3300246":"import spacy\n\n# Perform NLP operations on GPU, if available.\nspacy.prefer_gpu()\n\n# Load Spacy english model\nnlp = spacy.load('en', disable=['parser', 'ner', 'textcat'])\nnlp.max_length = 5000000","9b16e837":"# Create matcher and patterns\n\nfrom spacy.matcher import PhraseMatcher\n\n# Create a Matcher to case insensitive text matching\nmatcher = PhraseMatcher(nlp.vocab, attr='LEMMA')    \n\n# Create patterns from terms\npatterns = [nlp(d) for d in terms]\nmatcher.add(terms_group_id, None, *patterns)","89438f1d":"# Defines the matcher\n\ndef cord_19_matcher(sample_pct):   \n    # variables to test: test_limt is the total of docs to test; \n    # 0 = test off\n    \n    test_limit = 0\n    counter = 0\n\n    docs = df.sample(frac = sample_pct\/100) if sample_pct < 100 else df\n    tdocs = str(len(docs))\n\n    print(f\"{tdocs} documents to proccess...\")\n        \n    # Maximun allowed length of string text document\n    max_tlen = 100000\n\n    # initialize array and total found variables\n    findings_arr = []\n\n    # loop all articles to match terms\n    for idx, row in docs.iterrows():\n        try:\n            paper_id = row['paper_id']\n            doc_text = row[\"doc_text\"]            \n            \n            doc = nlp(doc_text)\n\n            # get the matches\n            matches = matcher(doc)\n\n            # process all matches found in text\n            if matches:\n                for m in matches:\n                    m_id, start, end = m[0],m[1],m[2]\n                    term_group = nlp.vocab.strings[m_id]\n                    term = doc[start:end].text\n\n                    # put finding into json object\n                    finding = {\n                        \"paper_id\": paper_id,\n                        \"term_group\": term_group,\n                        \"term\": term\n                    }\n\n                    # append finding to findings array\n                    findings_arr.append(finding)                \n\n            counter += 1\n            if counter % 100 == 0:\n                print(f\"{counter} documents proccessed\")\n\n            # breake loop if test control present\n            if test_limit > 0:            \n                if counter == test_limit:\n                    print(test_limit, \"sample count reached\")\n                    break\n\n        except BaseException as e:\n            print(\"Oops!  Error occurred in document loop.\")\n            print(str(e))\n            print(\"Continuing...\")\n            continue\n    \n    return findings_arr","de64dfd1":"%%time\n\n# Set sample parameter = % of papers to proccess\nsample_pct = 100\n#sample_pct = 1.2\n#sample_pct = 10\n\nfindings_arr = cord_19_matcher(sample_pct)\n\ntfound = len(findings_arr)\nprint(tfound, \"matches found\\n\")","d519dde5":"# Put findings array into a dataframe\n\nfindings = pd.DataFrame(findings_arr)\n\n# exclude the following terms originally taken in account\n#exc = ['term1','term2','term3']\n#findings.where(~findings.term.isin(exc), inplace = True)","c0ede087":"findings.info()","2e1acf69":"findings.head()","82a815da":"# Capitalize each term in findings\nfindings[\"term\"] = findings[\"term\"].str.capitalize()","2dc349d5":"findings['count'] = ''\ncnt = findings.groupby('term').count()[['count']]\ncnt_s = cnt.sort_values(by='count', ascending=False).copy()","acc5a617":"# Show the bar chart\n\nax = cnt_s.plot(kind='barh', figsize=(12,14), \n                legend=False, color=\"coral\", \n                fontsize=16)\nax.set_alpha(0.8)\nax.set_title(\"What do we know about virus genetics, origin, and evolution?\",fontsize=18)\nax.set_xlabel(\"Term Appearances\", fontsize=16);\nax.set_ylabel(\"Terms\", fontsize=14);\nax.set_xticks([0,100,200,300,400,500,600,700,800,900,1000])\n\n# Create a list to collect the plt.patches data\ntotals = []\n\n# Fill totals list\nfor i in ax.patches:\n    totals.append(i.get_width())\n\ntotal = sum(totals)\n\n# Set bar labels using the list\nfor i in ax.patches:\n    c = i.get_width()\n    cnt = f'{c:,} '\n    pct = str(round((c\/total)*100, 2)) + '%'\n    pct_f = \"(\" + pct + \")\"\n    ax.text(c+.3, i.get_y()+.4, cnt + pct_f, \n            fontsize=14, color='dimgrey')\n\n# Invert graph \nax.invert_yaxis()","156649ea":"from wordcloud import WordCloud, ImageColorGenerator\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fill the list of words to show\nterm_values = \"\"\nfor term in findings['term']:\n    term_val = str(term).title()\n    term_val = term_val.replace(' ','_')\n    term_val = term_val.replace('-','_')\n    term_values += term_val + ' '\n\n# Generates the wordcloud object\nwordcloud = WordCloud(background_color=\"white\",\n                      collocations=False).generate(term_values)\n\n# Display the generated image\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.figure(figsize=((10,8)))\nplt.show()","b92ae913":"findings_sta = findings.groupby([\"term\", \"paper_id\"]).size().reset_index(name=\"count\")\nfindings_sta = findings_sta.sort_values(by=['term','count'], ascending=False)","ab3afeee":"# Helper\n\ndef get_doc_text(paper_id):\n    doc = df.loc[df[\"paper_id\"]==paper_id].iloc[0]\n    return doc[\"doc_text\"]","ece917c2":"answers = []\n\nfor term in terms:    \n    term = term.capitalize()\n    try:\n        f = findings_sta[findings_sta[\"term\"]==term]\n        f = f.sort_values(\"count\",ascending=False)\n        for fc in f.iterrows():           \n            paper_id = fc[1][\"paper_id\"]                        \n            doc_text = get_doc_text(paper_id)\n            \n            answer = {\n                \"aspect\": terms_group_id,\n                \"factor\": term,\n                \"paper_id\": paper_id,\n                \"doc_text\": str(doc_text)\n            }\n\n            answers.append(answer)\n            \n            break\n        \n    except BaseException as e:\n        print(str(e))\n        continue\n\nlen(answers)","7ce7591a":"import ipywidgets as widgets\nfrom ipywidgets import Layout, Button, Box, FloatText, Textarea, Dropdown, Label, IntSlider","3ab063cc":"item_layout = Layout(\n    display='flex',\n    flex_flow='row',\n    justify_content='space-between',\n    width= '100%',\n    height= '200px'\n)","935dbde8":"# Helpers\n\ndef get_text_area(text):\n    ta = widgets.Textarea(\n        value=str(text),\n        placeholder='',\n        description='',\n        layout=item_layout,\n        disabled=True\n    )\n    return ta\n\nimport json\n\ndef get_answer_text(factor):\n    try:\n        factor = factor.capitalize()\n        ans = next(x for x in answers if x[\"factor\"] == factor)\n        ans = json.dumps(ans[\"doc_text\"]).strip(\"'\").strip('\"')\n        ans = ans.replace('\\\\n', '\\n\\n')\n        return ans\n    except BaseException:\n        return \"\"\n    \ndef get_question_answer(t_params):\n    full_text = ''\n    for t_param in t_params:\n        try:\n            doc_text = get_answer_text(t_param)\n            if not doc_text in full_text:\n                if len(full_text) > 0:\n                    full_text += \"\\n\\n\"                \n                full_text += doc_text\n        except BaseException:\n            continue\n    \n    return full_text","f68e3e29":"td1 = \"Real-time tracking of whole genomes and a mechanism for coordinating the rapid dissemination of that information to inform the development of diagnostics and therapeutics and to track variations of the virus over time.\"\ntext = get_question_answer(terms1)\nta1 = get_text_area(text)\n\ntd2 = \"Access to geographic and temporal diverse sample sets to understand geographic distribution and genomic differences, and determine whether there is more than one strain in circulation. Multi-lateral agreements such as the Nagoya Protocol could be leveraged.\"\ntext = get_question_answer(terms2)\nta2 = get_text_area(text)\n\ntd3 = \"Evidence that livestock could be infected (e.g., field surveillance, genetic sequencing, receptor binding) and serve as a reservoir after the epidemic appears to be over. Evidence of whether farmers are infected, and whether farmers could have played a role in the origin. Surveillance of mixed wildlife- livestock farms for SARS-CoV-2 and other coronaviruses in Southeast Asia. Experimental infections to test host range for this pathogen.\"\ntext = get_question_answer(terms3)\nta3 = get_text_area(text)\n\ntd4 = \"Animal host(s) and any evidence of continued spill-over to humans\"\ntext = get_question_answer(terms4)\nta4 = get_text_area(text)\n\ntd5 = \"Socioeconomic and behavioral risk factors for this spill-over\"\ntext = get_question_answer(terms5)\nta5 = get_text_area(text)\n\ntd6 = \"Sustainable risk reduction strategies\"\ntext = get_question_answer(terms6)\nta6 = get_text_area(text)","18a9ec0a":"ac1_tas = [ta1,ta2,ta3,ta4,ta5,ta6]\nac1 = widgets.Accordion(children=ac1_tas)\nac1.set_title(0, td1)\nac1.set_title(1, td2)\nac1.set_title(2, td3)\nac1.set_title(3, td4)\nac1.set_title(4, td5)\nac1.set_title(5, td6)","305bd071":"ac1","fd700f64":"Run the matcher","faa11338":"# **INTRODUCTION**\n\nThis work is to help the medical community answer the posted question in Kaggle: [What do we know about virus genetics, origin, and evolution?](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge\/tasks) The resulting model enables to understand and keep up with the large amount of literature contained in the provided dataset, specifically:\n\n1. Real-time tracking of whole genomes and a mechanism for coordinating the rapid dissemination of that information to inform the development of diagnostics and therapeutics and to track variations of the virus over time.\n2. Access to geographic and temporal diverse sample sets to understand geographic distribution and genomic differences, and determine whether there is more than one strain in circulation. Multi-lateral agreements such as the Nagoya Protocol could be leveraged.\n3. Evidence that livestock could be infected (e.g., field surveillance, genetic sequencing, receptor binding) and serve as a reservoir after the epidemic appears to be over.\n4. Evidence of whether farmers are infected, and whether farmers could have played a role in the origin.\n5. Surveillance of mixed wildlife- livestock farms for SARS-CoV-2 and other coronaviruses in Southeast Asia.\n6. Experimental infections to test host range for this pathogen.\n7. Animal host(s) and any evidence of continued spill-over to humans\n8. Socioeconomic and behavioral risk factors for this spill-over\n9. Sustainable risk reduction strategies\n\nAt the end of this notebook, the question asked is answered by means of each of the aspects listed above. In each case, the original content of the article that most represents the processed aspect is shown.\n\nTo accomplish the goal, the selected approach was to perform text mining on input data, by applying the latest advances in natural language processing (NLP). This was realized by the following steps:\n\n    1. Obtain input data and pre-process it to facilitate analysis.\n    2. Extract the key terms from the task description.\n    3. Match key terms with text contents.\n    4. Group and quantify the findings.\n    5. Show the documents that answer the task questions.\n        \nThe advantage of using NLP to abord this problem is that it is based on language-specific models, saving time and resources for text analysis.\n\nThe key terms was extracted from the task description in the step 2, resulting in a set of rule-based patterns.\n\nThe matching of key terms (step 3) was applied through topic  classification with Spacy library. This work through large sets of the unstructured data to match the patterns obtained in step 2. It is a very fast and scalable process that preferably uses the GPU resource.\n\nThis approach presents the limitation of synonymy, where multiple words and phrases have the same or similar meaning. To counter this, great care was taken in selecting keywords to make up the vocabulary of terms (e.g. COVID-19, SARS-CoV-2, 2019-nCov, SARS Coronavirus 2, or 2019 Novel Coronavirus).\n\nIn other hand, since the [original input data](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge) it is stored in JSON single files, whose structure is likely too complex to directly perform the analysis, this notebook uses the pre-processed data from the dataset [CORD-19-CSV](https:\/\/www.kaggle.com\/huascarmendez1\/cord19csv), also of same authorship of this.\n\nThe preprocessing of the data further consisted of filtering the documents that specifically talk about the covid-19 disease and its other names, as well as that they dealt with related risk factors, among other general data review, counting and cleaning activities.\n\nFinally, as it is clear that the results presented here are not final, it is recommended to assume them as a starting point for a complete understanding of each of the aspects that it tries to address.","ae2efbbd":"## Get what the literature reports on the task topic","f303c63f":"Pre-process input data","47bb6948":"## Load Data","7fd577c9":"## Pattern Matching\nObjective: classify all articles according to key terms.","78241217":"Quantify documents by key terms","21c03e9c":"Group findings by key term and sort by key term and count. The first document in each group will be part of the response to the task question.","f4a358df":"Display a bar graph and a word cloud with the totals of findings  by key term.","3eaf7657":" # What is known about virus genetics, origin, and evolution?\n             \n \nThe answer to this question is distributed in each of the aspects listed at the beginning of this notebook."}}