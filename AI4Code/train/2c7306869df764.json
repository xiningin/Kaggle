{"cell_type":{"1e72f83b":"code","d7a36e66":"code","f2fc75aa":"code","5c76b0ce":"code","30c11fb6":"code","753bcd85":"code","61681d2f":"code","15146669":"code","fb72109c":"code","d49f5ed5":"code","da2c4724":"code","bb5d82d6":"code","13d82306":"code","97455a2a":"code","91f38e97":"code","3874b2dd":"code","27a8b8f4":"code","158ab389":"code","e1687b92":"code","c3ea4b8d":"code","f945631f":"code","0adb18d8":"code","7db1881e":"code","9b40c766":"markdown","08a02b2f":"markdown","4c92fe4e":"markdown","6b6a0ece":"markdown","e56b0dc2":"markdown","ce314b2c":"markdown","6b81afce":"markdown","09ac1ded":"markdown","1347d71e":"markdown","728dfd7f":"markdown","5564c489":"markdown","967143f6":"markdown","42cbb029":"markdown","a5265d64":"markdown","d9b4b3a6":"markdown","1bead54a":"markdown"},"source":{"1e72f83b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7a36e66":"# importing required modules \nfrom zipfile import ZipFile \n  \n# specifying the zip file name \nfile_name = \"\/kaggle\/input\/data-science-bowl-2018\/stage1_train.zip\"\n  \n# opening the zip file in READ mode \nwith ZipFile(file_name, 'r') as zip: \n    # printing all the contents of the zip file \n    #zip.printdir() \n  \n    # extracting all the files \n    print('Extracting all the files now...') \n    zip.extractall('dataset') \n    print('Done!')","f2fc75aa":"# importing required libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport sys\nimport cv2\nimport tensorflow as tf\nimport keras\nfrom keras.layers import Conv2D \nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Conv2DTranspose\nfrom keras.layers import Dropout\nfrom keras.layers import Input\nfrom keras.layers import Concatenate\nfrom keras.models import Model\n","5c76b0ce":"#seeding\nseed = 2019\nnp.random.seed = seed\ntf.seed = seed","30c11fb6":"#data generator\nclass DataGen(keras.utils.Sequence):\n    def __init__(self,ids,path,batch_size,image_size):\n        self.ids = ids\n        self.path = path\n        self.batch_size = batch_size\n        self.image_size = image_size\n        self.on_epoch_end()\n        \n    def __load__(self,id_name):\n        #path\n        image_path = os.path.join(self.path,id_name,\"images\",id_name) + '.png'\n        mask_path = os.path.join(self.path,id_name,\"masks\/\")\n        all_masks = os.listdir(mask_path)\n        \n        #reading_images\n        try:\n            image = cv2.imread(image_path,1)\n            image = cv2.resize(image,(self.image_size,self.image_size))\n        except Exception as e:\n            print(str(e))\n        \n        mask = np.zeros((self.image_size,self.image_size,1))\n        #reading masks\n        for name in all_masks:\n            try:\n                _mask_path = mask_path +name\n                _mask_image = cv2.imread(_mask_path,-1)\n                _mask_image = cv2.resize(_mask_image,(self.image_size,self.image_size))\n                _mask_image = np.expand_dims(_mask_image,axis = -1)\n                mask = np.maximum(mask,_mask_image)\n            except Exception as e:\n                print(str(e))\n        \n        #normalising\n        image = image\/255.\n        mask = mask\/255.\n        return image,mask\n    \n    def __getitem__(self,index):\n        if (index+1)*self.batch_size > len(self.ids):\n            self.batch_size = len(self.ids) - index*self.batch_size\n            \n        files_batch = self.ids[index*self.batch_size : (index+1)*self.batch_size]\n        \n        image = []\n        mask = []\n        \n        for id_name in files_batch:\n            _img , _mask = self.__load__(id_name)\n            image.append(_img)\n            mask.append(_mask)\n            \n        image = np.array(image)\n        mask = np.array(mask)\n        \n        return image,mask\n    \n    def on_epoch_end(self):\n        pass\n    \n    def __len__(self):\n        return int(np.ceil(len(self.ids)\/float(self.batch_size)))","753bcd85":"\nimage_size = 128\nbatch_size = 8\nepochs = 10\ntrain_path = \"dataset\"\ntrain_ids = next(os.walk(train_path))[1]\nval_data_size = 10\nvalid_ids = train_ids[:val_data_size]\ntrain_ids = train_ids[val_data_size:]","61681d2f":"# initialize datagenerator\ngen = DataGen(train_ids,train_path,batch_size = batch_size ,image_size = image_size)\nx,y = gen.__getitem__(0)\nprint(x.shape,y.shape)","15146669":"# visualize dataset\nr = np.random.randint(0,len(x)-1)\nfig = plt.figure()\nfig.subplots_adjust(hspace =0.4 ,wspace =0.4)\nax = fig.add_subplot(1,2,1)\nax.title.set_text('image')\nax.imshow(x[r])\nax = fig.add_subplot(1,2,2)\nax.title.set_text('mask')\nax.imshow(np.reshape(y[r],(image_size , image_size)),cmap = 'gray')\n","fb72109c":"# different convolution blocks\n# 2d standard_unit for downsampling in all models\ndef standard_unit(x, filters, kernel_size=(3, 3), padding=\"same\", strides=1):\n    c = Conv2D(filters, kernel_size, padding=padding, strides=strides, activation=\"relu\")(x)\n    c = Conv2D(filters, kernel_size, padding=padding, strides=strides, activation=\"relu\")(c)\n    p = MaxPooling2D((2,2))(c)\n    return c,p\n\n# upsampling_unit combinataion of deconvolution and skip layer\ndef upsampling_unit(x, skip,filters, kernel_size=(3, 3), padding=\"same\", strides=1):\n    us = Conv2DTranspose(filters ,(2,2),strides=(2, 2), padding='same')(x)\n    concat = Concatenate()([us,skip])\n    c,_ = standard_unit(concat,filters)\n    return c\n\n# bottleneck function for unet\ndef bottleneck(x, filters, kernel_size=(3, 3), padding=\"same\", strides=1):\n    c = Conv2D(filters, kernel_size, padding=padding, strides=strides, activation=\"relu\")(x)\n    c = Conv2D(filters, kernel_size, padding=padding, strides=strides, activation=\"relu\")(c)\n    return c\n\n","d49f5ed5":"\"\"\"\nstandard u-net \n\"\"\"\n\n# define model for unet segmentation\ndef UNet(image_row,image_col):\n    f = [16, 32, 64, 128, 256]\n    inputs = Input((image_row,image_col, 3))\n    \n    p0 = inputs\n    c1, p1 = standard_unit(p0, f[0]) #128 -> 64\n    c2, p2 = standard_unit(p1, f[1]) #64 -> 32\n    c3, p3 = standard_unit(p2, f[2]) #32 -> 16\n    c4, p4 = standard_unit(p3, f[3]) #16->8\n    \n    bn = bottleneck(p4, f[4])\n    \n    u1 = upsampling_unit(bn, c4, f[3]) #8 -> 16\n    u2 = upsampling_unit(u1, c3, f[2]) #16 -> 32\n    u3 = upsampling_unit(u2, c2, f[1]) #32 -> 64\n    u4 = upsampling_unit(u3, c1, f[0]) #64 -> 128\n    \n    outputs = Conv2D(1, (1, 1), padding=\"same\", activation=\"sigmoid\")(u4)\n    model = Model(inputs, outputs)\n    return model\n\n\n","da2c4724":"\"\"\"\nwide unet \n\"\"\"\n\n# define wide u-net model\ndef W_UNet(image_row,image_col):\n    #f = [16,32,64,128,256]\n    f = [35,70,140,280,560]\n    img_input = Input((image_row , image_col ,3))\n    \n    c11,p1 = standard_unit(img_input,f[0])\n    c21,p2 = standard_unit(p1,f[1])\n    c31,p3 = standard_unit(p2,f[2])\n    c41,p4 = standard_unit(p3,f[3])\n    c51,_ = standard_unit(p4 ,f[4])\n    \n    c42 = upsampling_unit(c51,c41,f[3])\n    c33 = upsampling_unit(c42,c31,f[2])\n    c24 = upsampling_unit(c33,c21,f[1])\n    c15 = upsampling_unit(c24,c11,f[0])\n    \n    outputs = Conv2D(1,(1,1),activation='sigmoid',padding = 'same',strides =1)(c15)\n    \n    model = Model(img_input,outputs)\n    return model\n","bb5d82d6":"\"\"\"\nnested u-net or standard unet++\n\"\"\"\n\n# define unet++ model\ndef Nested_Net(image_row,image_col):\n    f = [16, 32, 64, 128, 256]\n    img_input = Input((image_row,image_col, 3))\n\n    # first downsampling layer\n    c11,p1 = standard_unit(img_input,f[0])\n    c21,p2 = standard_unit(p1 , f[1])\n    c31,p3 = standard_unit(p2,f[2])\n    c41,p4 = standard_unit(p3,f[3])\n    c51,_ = standard_unit(p4 ,f[4])\n    \n    u12 = Conv2DTranspose(f[0], (2, 2), strides=(2, 2), padding='same')(c21)\n    concat = Concatenate()([u12, c11])\n    c12,_ = standard_unit(concat, f[0])\n\n    u22 = Conv2DTranspose(f[1], (2, 2), strides=(2, 2), padding='same')(c31)\n    concat = Concatenate()([u22, c21])\n    c22,_ = standard_unit(concat, f[1])\n\n    u32 = Conv2DTranspose(f[2], (2, 2), strides=(2, 2), padding='same')(c41)\n    concat = Concatenate()([u32, c31])\n    c32,_ = standard_unit(concat, f[2])\n\n    u42 = Conv2DTranspose(f[3], (2, 2), strides=(2, 2), padding='same')(c51)\n    concat = Concatenate()([u42, c41])\n    c42,_ = standard_unit(concat, f[3])\n    \n    u13 = Conv2DTranspose(f[0], (2, 2), strides=(2, 2), padding='same')(c22)\n    concat = Concatenate()([u13, c11,c12])\n    c13,_ = standard_unit(concat, f[0])\n\n    u23 = Conv2DTranspose(f[1], (2, 2), strides=(2, 2), padding='same')(c32)\n    concat = Concatenate()([u23, c21,c22])\n    c23,_ = standard_unit(concat, f[1])\n\n    u33 = Conv2DTranspose(f[2], (2, 2), strides=(2, 2), padding='same')(c42)\n    concat = Concatenate()([u33, c31,c32])\n    c33,_ = standard_unit(concat, f[2])\n    \n    u14 = Conv2DTranspose(f[0], (2, 2), strides=(2, 2), padding='same')(c23)\n    concat = Concatenate()([u14, c11,c12,c13])\n    c14,_ = standard_unit(concat, f[0])\n\n    u24 = Conv2DTranspose(f[1], (2, 2), strides=(2, 2), padding='same')(c33)\n    concat = Concatenate()([u24, c21,c22,c23])\n    c24,_ = standard_unit(concat, f[1])\n    \n    u15 = Conv2DTranspose(f[0], (2, 2), strides=(2, 2), padding='same')(c24)\n    concat = Concatenate()([u15, c11,c12,c13,c14])\n    c15,_ = standard_unit(concat, f[0])\n    \n    nestnet_output1 = Conv2D(1,(1,1) ,activation= 'sigmoid',padding ='same' ,strides =1)(c12)\n    nestnet_output2 = Conv2D(1,(1,1) ,activation= 'sigmoid',padding ='same' ,strides =1)(c13)\n    nestnet_output3 = Conv2D(1,(1,1) ,activation= 'sigmoid',padding ='same' ,strides =1)(c14)\n    nestnet_output4 = Conv2D(1,(1,1) ,activation= 'sigmoid',padding ='same' ,strides =1)(c15)\n    \n    model = Model(input = img_input ,output = nestnet_output4)\n    return model\n\n\n","13d82306":"train_gen = DataGen(train_ids,train_path,batch_size=batch_size, image_size=image_size)\nvalid_gen = DataGen(valid_ids,train_path,batch_size=batch_size, image_size=image_size)\n\ntrain_steps = len(train_ids)\/\/batch_size\nvalid_steps = len(valid_ids)\/\/batch_size\n\n","97455a2a":"model_unet = UNet(128,128)\nmodel_unet.compile(optimizer='adam' ,loss = 'binary_crossentropy',metrics = ['accuracy'])\nmodel_unet.summary()","91f38e97":"# fit to unet\nmodel_unet.fit_generator(train_gen,\n                  validation_data = valid_gen,\n                  steps_per_epoch = train_steps,\n                  validation_steps= valid_steps,\n                  epochs = epochs)","3874b2dd":"model_w_unet = W_UNet(128,128)\nmodel_w_unet.compile(optimizer='adam' ,loss = 'binary_crossentropy',metrics = ['accuracy'])\nmodel_w_unet.summary()","27a8b8f4":"# fit to wide-unet\nmodel_w_unet.fit_generator(train_gen,\n                  validation_data = valid_gen,\n                  steps_per_epoch = train_steps,\n                  validation_steps= valid_steps,\n                  epochs = epochs)","158ab389":"model_nested_net = Nested_Net(128,128)\nmodel_nested_net.compile(optimizer='adam' ,loss = 'binary_crossentropy',metrics = ['accuracy'])\nmodel_nested_net.summary()","e1687b92":"# fit to nested-net\nmodel_nested_net.fit_generator(train_gen,\n                  validation_data = valid_gen,\n                  steps_per_epoch = train_steps,\n                  validation_steps= valid_steps,\n                  epochs = epochs)","c3ea4b8d":"# testing the model\n#model.save_weights('UNet++w.h5')\n\nx,y = valid_gen.__getitem__(1)\nresult_unet  = model_unet.predict(x)\nresult_unet = result_unet >0.5\n","f945631f":"# testing the model\n#model.save_weights('UNet++w.h5')\n\nx,y = valid_gen.__getitem__(1)\nresult_w_unet  = model_w_unet.predict(x)\nresult_w_unet = result_w_unet >0.5\n","0adb18d8":"# testing the model\n#model.save_weights('UNet++w.h5')\n\nx,y = valid_gen.__getitem__(1)\nresult_nested_net  = model_nested_net.predict(x)\nresult_nested_net = result_nested_net >0.5\n","7db1881e":"# visualizing output\n\nfig = plt.figure()\nfig.subplots_adjust(hspace =1 ,wspace =1)\nax1 = fig.add_subplot(2,3,1)\nax1.title.set_text('image')\nax1.imshow(x[1])\n\nax2 = fig.add_subplot(2,3,2)\nax2.title.set_text('mask')\nax2.imshow(np.reshape(y[1]*255,(image_size , image_size)),cmap = 'gray')\n\nax3 = fig.add_subplot(2, 3, 4)\nax3.title.set_text('U-Net')\nax3.imshow(np.reshape(result_unet[1]*255, (image_size, image_size)), cmap=\"gray\")\n\nax4 = fig.add_subplot(2, 3,5)\nax4.title.set_text('U-Net')\nax4.imshow(np.reshape(result_w_unet[1]*255, (image_size, image_size)), cmap=\"gray\")\n\nax5 = fig.add_subplot(2, 3, 6)\nax5.title.set_text('Nested-Net')\nax5.imshow(np.reshape(result_nested_net[1]*255, (image_size, image_size)), cmap=\"gray\")","9b40c766":"# standard unet++ or nested net","08a02b2f":"# Visualing image and mask from dataset","4c92fe4e":"# **Different convolution blocks\n**","6b6a0ece":"**Network architecture for standard unet**\n![u-net-architecture.png](attachment:u-net-architecture.png)","e56b0dc2":"**Architecture of standard unet++\n![fig_unet++.png](attachment:fig_unet++.png)","ce314b2c":"# Visualing Output","6b81afce":"# Compiling and training of wide-unet","09ac1ded":"# Compiling and training u-net\n","1347d71e":"# load training and test generators","728dfd7f":"# Testing model for different networks","5564c489":"# Importing data-science-bowl 2018 dataset","967143f6":"# Specify Hyperparameters for networks","42cbb029":"# Standard U-Net","a5265d64":"# Importing required modules or libraries","d9b4b3a6":"# standard W-Unet","1bead54a":"# Compiling and fit to nested_net or unet++"}}