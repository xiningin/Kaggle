{"cell_type":{"ee0ca750":"code","4e635b06":"code","6ded2186":"code","6a46f975":"code","136ab953":"code","e715f4ac":"code","09908e5b":"code","18fa0505":"code","5d39a4af":"code","348cf599":"code","26713e55":"code","76209a6c":"code","4054a0ec":"code","518e547c":"code","ed08a8e9":"code","027054ef":"code","a6e48903":"code","23c07fc3":"code","ee7c3f07":"code","ed3b6ec2":"code","07de933d":"markdown","646a857e":"markdown"},"source":{"ee0ca750":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4e635b06":"FILEPATH = '\/kaggle\/input\/amazon-alexa-reviews\/amazon_alexa.tsv'","6ded2186":"!pip install emoji","6a46f975":"df = pd.read_csv(FILEPATH, delimiter = '\\t')","136ab953":"df.sample(2)","e715f4ac":"import emoji\n\nunique_emojis = set()\n\ndef get_emojis(string):\n    \n    emojis = []\n\n    my_str = str(string)\n    for each in my_str:\n        if each in emoji.UNICODE_EMOJI:\n            emojis.append(each)\n            unique_emojis.add(each)\n            \n    return emojis\n\ndef get_emojis_count(string):\n    \n    emojis = get_emojis(string)\n    \n    return len(emojis)","09908e5b":"# Show first 5 items of verified_reviews\nfor v in df['verified_reviews'].head(10):\n    print(v)","18fa0505":"df['emojis'] = df['verified_reviews'].apply(extract_emojis)\ndf['emojis_count'] = df['verified_reviews'].apply(get_emojis_count)","5d39a4af":"df.sample(3)","348cf599":"df_emojis = df[df['emojis_count'] > 0]","26713e55":"df_emojis.sample(5)","76209a6c":"len(unique_emojis)","4054a0ec":"for item in unique_emojis:\n    print(item, emoji.demojize(item))","518e547c":"!pip install emojis","ed08a8e9":"import emojis\n\ndf['emojis'] = df['verified_reviews'].apply(lambda x: emojis.get(x))\ndf['emojis_count'] = df['verified_reviews'].apply(lambda x: emojis.count(x))","027054ef":"df.sample(2)","a6e48903":"df['emojis'][0]","23c07fc3":"df_emojis = df[df['emojis_count'] > 0]","ee7c3f07":"df_emojis.sample(2)","ed3b6ec2":"emojis.db.get_emoji_by_alias('taco')","07de933d":"Sources:\n\n* https:\/\/www.webfx.com\/tools\/emoji-cheat-sheet\/\n* https:\/\/pypi.org\/project\/emojis\/\n* https:\/\/pypi.org\/project\/emoji\/","646a857e":"Let's try another Emoji library"}}