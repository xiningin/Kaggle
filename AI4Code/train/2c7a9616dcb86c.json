{"cell_type":{"a47b9ca0":"code","6eac1c10":"code","0dee9826":"code","bb818399":"code","9f9743d4":"code","e5023b4c":"code","8db09e32":"code","e0003519":"code","490a9d00":"code","adb08cb1":"markdown","8cd70078":"markdown","fd1e87ec":"markdown","7b92e2a8":"markdown","671cdc69":"markdown","05a4fc21":"markdown","15359d85":"markdown","ef8cd194":"markdown"},"source":{"a47b9ca0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # Data visualization\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6eac1c10":"df_death=pd.read_csv('..\/input\/coronavirus-4th-mar-2020-johns-hopkins-university\/COVID-19-Death (10th March2020).csv')\ndf_rec=pd.read_csv('..\/input\/coronavirus-4th-mar-2020-johns-hopkins-university\/COVID-19-Recovered (10th March2020).csv')\ndf_conf=pd.read_csv('..\/input\/coronavirus-4th-mar-2020-johns-hopkins-university\/COVID-19-Confirmed (10th March2020).csv')\nprint(\"death_shape:\", df_death.shape)\nprint(\"rec_shape:\", df_rec.shape)\nprint(\"conf_shape:\", df_conf.shape)\n\ndf_death.head()","0dee9826":"def stats_calculator(df_conf,df_death,df_rec):\n    \"\"\"\n    Docstring:\n    Calculate the number of Total Deaths, Confirmed Cases, Recoveries each day\n    Takes in confirmed, death and recovered dataframes as argument\n    Return a dataframe\n    \"\"\"\n    #Extract dates\n    date=df_death.keys()[4:]\n    \n    #Initialize Stats\n    total_death_date=[]\n    total_rec_date=[]\n    total_conf_date=[]\n    mortality_rate=[]\n    \n    #Append Stats\n    for i in date:\n        total_death_date.append(df_death[i].sum())\n        total_rec_date.append(df_rec[i].sum())\n        total_conf_date.append(df_conf[i].sum())\n        mortality_rate.append(df_death[i].sum()*100\/(df_death[i].sum()+df_conf[i].sum()))\n\n    #Make stats into a dataframe\n    df_temp=pd.DataFrame(data=date, columns=[\"date\"])\n    df_temp[\"death\"]=total_death_date\n    df_temp[\"rec\"]=total_rec_date\n    df_temp[\"conf\"]=total_conf_date\n    df_temp[\"mort_rate\"]=mortality_rate\n    \n    #Return dataframe\n    return(df_temp)","bb818399":"def stats_plotter(df_temp):\n    \"\"\"\n    Docstring: \n    Input dataframe object\n    Plots Total Confirmed Cases, Recovered Cases, Total Deaths Vs Date \n    \"\"\"\n    \n    #Print Latest Stats\n    print(\"Total Confirmed Cases :\",df_temp.conf.iloc[-1])\n    print(\"Total Recovered Patients :\",df_temp.rec.iloc[-1])\n    print(\"Total Deaths :\",df_temp.death.iloc[-1])\n    \n    #Plot Stats\n    plt.figure(figsize=(12,8))\n    plt.title(\"COVID-19 Time Series\")\n    plt.plot(df_temp.date,df_temp.death, label=\"Death\")\n    plt.plot(df_temp.date,df_temp.conf, label=\"Confirmed Cases\")\n    plt.plot(df_temp.date,df_temp.rec, label=\"Recovered\")\n    plt.xticks(rotation=90)\n    plt.legend()\n    plt.grid()\n    plt.show()\n    \n    #Plot Mortality Rate\n    print(\"Mortality Rate: \"+ str(round(df_temp.mort_rate.iloc[-1],2))+\"%\")\n    plt.figure(figsize=(12,5))\n    plt.title(\"COVID-19 Mortality Rate (in %) Vs Time\")\n    plt.plot(df_temp.date,df_temp.mort_rate, label=\"Mortality Rate\")\n    plt.xticks(rotation=90)\n    plt.legend()\n    plt.grid()\n    plt.show()","9f9743d4":"def only_country(country_name):\n    \"\"\"\n    Input- Country Name\n    Output- Data of that country\n    \"\"\"\n    df_death_ctry=df_death[df_death[\"Country\/Region\"]==country_name]\n    df_rec_ctry=df_rec[df_rec[\"Country\/Region\"]==country_name]\n    df_conf_ctry=df_conf[df_conf[\"Country\/Region\"]==country_name]\n\n    return(stats_calculator(df_conf_ctry,df_death_ctry,df_rec_ctry))\n\ndef except_country(country_name):\n    \"\"\"\n    Input- Country Name\n    Output- Data outside that country\n    \"\"\"\n    df_death_ctry=df_death[df_death[\"Country\/Region\"]!=country_name]\n    df_rec_ctry=df_rec[df_rec[\"Country\/Region\"]!=country_name]\n    df_conf_ctry=df_conf[df_conf[\"Country\/Region\"]!=country_name]\n\n    return(stats_calculator(df_conf_ctry,df_death_ctry,df_rec_ctry))","e5023b4c":"df_total=stats_calculator(df_conf,df_death,df_rec)\nstats_plotter(df_total)","8db09e32":"stats_plotter(only_country(\"Iran\"))","e0003519":"stats_plotter(except_country(\"Mainland China\"))","490a9d00":"df_chn=only_country(\"Mainland China\")  #dataframe within China\ndf_oc=except_country(\"Mainland China\") #dataframe outside China\n\nplt.figure(figsize=(12,8))\nplt.title(\"COVID-19 Spred: China Vs Rest of the World\", fontsize=18)\nplt.plot(df_total.date,df_total.conf,'k--', label=\"Global\")\nplt.plot(df_total.date,df_chn.conf, label=\"Inside China\")\nplt.plot(df_total.date,df_oc.conf, label=\"Outside China\")\nplt.legend()\nplt.xticks(rotation=90)\nplt.show()","adb08cb1":"**Data Visualization Specific Country**\n\nVisualization for Iran Specific Data","8cd70078":"**Data visualization Outside Specific Country**\n\nVisualization of COVID-19 outside China","fd1e87ec":"**Function for plotting**","7b92e2a8":"**COVID-19 Spread: China Vs Rest of the World**","671cdc69":"Thanks for going through my code please provide your suggestions.\n\nUpwote if you liked it","05a4fc21":"**COVID-19 Global Time-Series Visualization** ","15359d85":"**Function for calculating Stats**","ef8cd194":"**Function for extracting data pertaining to\/ except a specific Country**"}}