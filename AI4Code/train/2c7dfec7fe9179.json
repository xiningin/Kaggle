{"cell_type":{"030d5880":"code","9c13e41e":"code","fb85deaf":"code","beb48551":"code","8887fd08":"code","7ecd4c4c":"code","6b680c59":"code","31595a6b":"code","cab020db":"code","30d07514":"code","9b9845d9":"code","96bd880d":"code","3155ffd0":"code","225a037b":"code","02366f7d":"code","960c3a9a":"code","37d32fb7":"code","c99a471e":"code","7918ebe1":"markdown","c5005e26":"markdown","224c5fee":"markdown","4dd04091":"markdown","18ff56f4":"markdown","daf974c5":"markdown","9a9fc816":"markdown","a933b514":"markdown"},"source":{"030d5880":"!pip install dataprep","9c13e41e":"import dataprep\nfrom dataprep import eda\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.impute import SimpleImputer\nfrom sklearn import preprocessing\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fb85deaf":"# Get the train data\ntrainFile = \"..\/input\/titanic\/train.csv\"\ntrainDataset = pd.read_csv(trainFile)\nprint(trainDataset.shape)\n# Get the test data\ntestFile = \"..\/input\/titanic\/test.csv\"\ntestDataset = pd.read_csv(testFile)\nprint(testDataset.shape)","beb48551":"eda.create_report(trainDataset, title=\"titanic report\")","8887fd08":"trainDataset.describe()","7ecd4c4c":"trainDataset.info()","6b680c59":"train_y=trainDataset['Survived']\ndel trainDataset['Survived']\n\ndel testDataset['Name']\ndel trainDataset['Name']\n\ndel testDataset['Ticket']\ndel trainDataset['Ticket']","31595a6b":"data = [trainDataset,testDataset]\nfor dataset in data:\n    dataset['relatives'] = dataset['SibSp'] + dataset['Parch']\n    dataset.loc[dataset['relatives'] > 0, 'travelled_alone'] = 0\n    dataset.loc[dataset['relatives'] == 0, 'travelled_alone'] = 1\ntrainDataset","cab020db":"data=pd.concat([trainDataset,testDataset])\ndata","30d07514":"label_encoder = preprocessing.LabelEncoder()\nlabel_encoder.fit(data['Sex'])\ntestDataset['Sex']=label_encoder.transform(testDataset['Sex'])\ntrainDataset['Sex']=label_encoder.transform(trainDataset['Sex'])\n\nlabel_encoder.fit(data['Embarked'].astype(str))\ntestDataset['Embarked']=label_encoder.transform(testDataset['Embarked'].astype(str))\ntrainDataset['Embarked']=label_encoder.transform(trainDataset['Embarked'].astype(str))\n\nlabel_encoder.fit(data['Cabin'].astype(str))\ntestDataset['Cabin']=label_encoder.transform(testDataset['Cabin'].astype(str))\ntrainDataset['Cabin']=label_encoder.transform(trainDataset['Cabin'].astype(str))","9b9845d9":"data=pd.concat([trainDataset,testDataset])\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nimputer.fit(data)\ndata_test=imputer.transform(testDataset)\ndata_train=imputer.transform(trainDataset)","96bd880d":"data=np.concatenate((trainDataset,testDataset))\ndata","3155ffd0":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import roc_auc_score, accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","225a037b":"sc = StandardScaler() \ndata = sc.fit_transform(data)\ndata_test = sc.transform(data_test)\ndata_train = sc.transform(data_train)","02366f7d":"parameters = {'min_samples_leaf': [ 4,5, 6,7],'max_depth': [7,8,9,10],'max_features': [5,6, 7,8]}\nrfc = RandomForestClassifier(n_estimators=200, random_state=42)\ngcv = GridSearchCV(rfc, parameters,n_jobs=None, cv=5, verbose=3,scoring='roc_auc', return_train_score=True)\ngcv.fit(data_train, train_y)\ngcv.score(data_train, train_y)","960c3a9a":"model=gcv.best_estimator_\nmodel","37d32fb7":"test_y = pd.DataFrame(model.predict(data_test),columns = ['Survived'])\nfinal_df = pd.concat([testDataset['PassengerId'],test_y],axis=1)","c99a471e":"# Saving the final dataframe as a .csv file.\nfinal_df.to_csv('submission.csv', index = False)","7918ebe1":"# **Best submission**","c5005e26":"# Libraries","224c5fee":"# Data preparation","4dd04091":"# Load datasets","18ff56f4":"# Predict","daf974c5":"# **Analys**","9a9fc816":"![image.png](attachment:874bf8ad-c837-4e6a-880a-7c578b15790c.png)","a933b514":"# Train"}}