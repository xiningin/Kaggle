{"cell_type":{"cb8fa95d":"code","6f1aa798":"code","61bdf2be":"code","f38e083b":"code","78e7d1e8":"code","333e1832":"code","568e9d1e":"code","d9735489":"code","8f6110ef":"code","6ee744ad":"code","908a0307":"code","f25aaa45":"code","e8e1ab2f":"code","51ce0c62":"code","b5daed89":"code","c8433189":"code","6abeb1ed":"code","0b860415":"code","cf7f536b":"code","53b0cf05":"code","e1d75ade":"code","076864b0":"code","6c22784c":"code","a9a819fd":"code","bfee8982":"code","0c2ccf91":"code","9e79e673":"code","63d22ab1":"code","c5d5f286":"code","ca9b2443":"code","510ae527":"code","0a10cc1c":"code","702ccd03":"code","12511249":"code","6222cb3a":"code","7df8035e":"code","1883fb52":"code","ec475492":"code","faafa5c3":"code","9be8fc9a":"code","c85f3473":"code","473e9210":"code","4023ec1b":"code","838bf950":"code","7bbb1cfe":"code","578279ec":"code","6189362e":"code","af6164a8":"markdown"},"source":{"cb8fa95d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","6f1aa798":"dataset = pd.DataFrame(pd.read_csv('..\/input\/compressive-strength-of-concrete\/compresive_strength_concrete.csv'))","61bdf2be":"dataset.head()","f38e083b":"dataset.info()","78e7d1e8":"dataset.describe()","333e1832":"dataset.isna().sum()","568e9d1e":"dataset.isnull().sum()","d9735489":"dataset[dataset.duplicated() == True]","8f6110ef":"dataset.columns","6ee744ad":"dataset.rename(columns={\"Cement (component 1)(kg in a m^3 mixture)\":'Cement',\n                               \"Blast Furnace Slag (component 2)(kg in a m^3 mixture)\":'Blast_Furnace_Slag',\n                               \"Fly Ash (component 3)(kg in a m^3 mixture)\":'Fly_Ash', \"Water  (component 4)(kg in a m^3 mixture)\": 'Water',\n                               \"Superplasticizer (component 5)(kg in a m^3 mixture)\":'Superplasticizer',\n                                \"Coarse Aggregate  (component 6)(kg in a m^3 mixture)\":'Coarse-Aggregate',\n                               \"Fine Aggregate (component 7)(kg in a m^3 mixture)\": 'Fine_Aggregate',\n                                \"Age (day)\": \"Age_day\",\n                        \"Concrete_target \": 'Concrete_target'\n                                \n                               }, inplace=True )\n                         \n                   ","908a0307":"dataset.head()","f25aaa45":"blast_mean = np.mean(dataset.Blast_Furnace_Slag)\nfly_mean = np.mean(dataset.Fly_Ash)\nsuperplastic_mean = np.mean(dataset.Superplasticizer)","e8e1ab2f":"dataset.Blast_Furnace_Slag=dataset.Blast_Furnace_Slag.mask(dataset.Blast_Furnace_Slag==0).fillna(blast_mean)","51ce0c62":"dataset.Fly_Ash=dataset.Fly_Ash.mask(dataset.Fly_Ash==0).fillna(fly_mean)","b5daed89":"dataset.Superplasticizer=dataset.Superplasticizer.mask(dataset.Superplasticizer==0).fillna(superplastic_mean)","c8433189":"dataset","6abeb1ed":"y = dataset['Concrete compressive strength(MPa, megapascals) ']","0b860415":"x = dataset.drop(columns='Concrete compressive strength(MPa, megapascals) ')","cf7f536b":"x","53b0cf05":"# Split dataset for training and testing\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.3, random_state=42)","e1d75ade":"X_train","076864b0":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.2)","6c22784c":"X_train.shape","a9a819fd":"X_val.shape","bfee8982":"X_test.shape","0c2ccf91":"# Data Normalization\nmean = X_train.mean(axis=0)\nstd = X_train.std(axis=0)\n\nX_train -= mean\nX_train \/= std\n\nX_test -= mean\nX_test \/= std\n\n\nX_val -= mean\nX_val \/= std","9e79e673":"X_train.head()","63d22ab1":"# Let's go\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras import layers\n","c5d5f286":"network = Sequential()","ca9b2443":"network.add(layers.Dense(6, activation='relu', input_shape=(X_train.shape[1],)))\nnetwork.add(layers.Dense(4, activation='relu'))\nnetwork.add(layers.Dense(1))","510ae527":"network.compile(optimizer='adam', loss='mse', metrics='mae')","0a10cc1c":"history = network.fit(X_train, Y_train, batch_size=30, verbose=0, epochs=200, validation_data=(X_val, Y_val))","702ccd03":"train_loss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, 201)","12511249":"print('Training Loss: ' + str(train_loss[-1]))\nprint('*'*20)\nprint('Validation Loss' + str(val_loss[-1]))\n","6222cb3a":"plt.plot(epochs, train_loss, label='Training Loss')\nplt.plot(epochs, val_loss, label='Val loss')\nplt.title('Train and Val Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","7df8035e":"mae_train = history.history['mae']\nmae_val= history.history['val_mae']","1883fb52":"print('Training Loss: ' + str(mae_train[-1]))\nprint('*'*20)\nprint('Validation Loss' + str(mae_val[-1]))\n","ec475492":"plt.plot(epochs, mae_train, label='Training MAE')\nplt.plot(epochs, mae_val, label='Val MAE')\nplt.title('Train and Val MAE')\nplt.xlabel('Epochs')\nplt.ylabel('MAE')\nplt.legend()\nplt.show()","faafa5c3":"prediction = network.predict(X_test)","9be8fc9a":"network.evaluate(X_test, Y_test)","c85f3473":"prediction.shape","473e9210":"prediction=prediction.reshape(309)","4023ec1b":"output = pd.DataFrame({'Actual': Y_test})","838bf950":"output['prediction'] = prediction","7bbb1cfe":"output.reset_index(inplace=True)","578279ec":"output['Absolute Error'] = np.abs(output['prediction'] - output['Actual'])","6189362e":"output","af6164a8":"<center> <h2> Thanks \u2764 <\/h2>"}}