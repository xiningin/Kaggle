{"cell_type":{"bd04da2c":"code","16de0ec9":"code","504f21fa":"code","d979d04d":"code","74b4bb97":"code","e795b25e":"code","7448b6b3":"code","d0f874f9":"code","c7845d83":"code","d330936f":"code","ee10a1f3":"code","4898e8e8":"code","746cab5d":"code","98c85d53":"code","3cd24aea":"code","17126678":"code","56df40cd":"code","ce360a37":"code","c5be193a":"code","35175d05":"code","4ae26d80":"code","c5c87c81":"code","02d22618":"code","2ee572cb":"code","cab1dba7":"markdown","d5088a80":"markdown","b3dc63ef":"markdown","bf445995":"markdown","abab8948":"markdown","d4a67267":"markdown","a628157f":"markdown","2acff12d":"markdown","584efd1d":"markdown","427fbb63":"markdown","bb9a7320":"markdown","c8b91b2c":"markdown","273f2672":"markdown","2eb115c0":"markdown","1484b761":"markdown","f578925a":"markdown"},"source":{"bd04da2c":"# \u30c7\u30fc\u30bf\u64cd\u4f5c\u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nimport pandas as pd\n\n# \u30c7\u30fc\u30bf\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","16de0ec9":"# \u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u3001\u7279\u5fb4\u91cf\u3001\u30c7\u30fc\u30bf\u578b\u306a\u3069\u3092\u78ba\u8a8d\n# object\u578b\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u3001category\u578b\u306b\u5f8c\u3005\u5909\u63db\u3059\u308b\ntrain.info()","504f21fa":"# \u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u3001\u7279\u5fb4\u91cf\u3001\u30c7\u30fc\u30bf\u578b\u306a\u3069\u3092\u78ba\u8a8d\n# object\u578b\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u3001category\u578b\u306b\u5f8c\u3005\u5909\u63db\u3059\u308b\ntest.info()","d979d04d":"# \u5b66\u7fd2\u7528\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\ntrain.head(10)","74b4bb97":"# \u30c6\u30b9\u30c8\u7528\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\ntest.head(10)","e795b25e":"null_info_df = pd.DataFrame(train.isnull().sum().sort_values(ascending=False)).head(20).rename(columns={0:'null_count'})\nnull_info_df['null_percent(%)'] = null_info_df['null_count']\/len(train) * 100\nnull_info_df","7448b6b3":"# flag_is_null = train.isnull().any()\n# train[(flag_is_null==True).index].isnull().sum()\n# flag_is_null","d0f874f9":"# \u7d71\u8a08\u91cf\u306e\u78ba\u8a8d\uff08\u30c7\u30fc\u30bf\u6570\u3001\u5e73\u5747\u5024\u3001\u6a19\u6e96\u504f\u5dee\u3001\u6700\u5c0f\u30fb\u6700\u5927\u5024\u300125\/50\/75%\u306e\u5206\u4f4d\u70b9\uff09\ntrain['SalePrice'].describe()","c7845d83":"# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u78ba\u8a8d\uff08seaborn\uff1a\u30b0\u30e9\u30d5\u63cf\u753b\u30e9\u30a4\u30d6\u30e9\u30ea\uff09\nimport seaborn as sns\nsns.distplot(train['SalePrice'])","d330936f":"print(\"Skewness: %f\" % train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % train['SalePrice'].kurt())","ee10a1f3":"# \u63cf\u753b\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nimport matplotlib.pyplot as plt\n\n# \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u4f5c\u6210\ncorrmat = train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True)","4898e8e8":"import numpy as np\n\nk = 10 # \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u306e\u7279\u5fb4\u5909\u6570\u306e\u6570\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index # \ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","746cab5d":"# \u30e6\u30cb\u30fc\u30af\u5024\u306eID\u3092\u524a\u9664\n# \u63d0\u51fa\u306e\u969b\u306b\u4f7f\u3046\u306e\u3067\u3001\u5225\u306e\u5024\u3068\u3057\u3066\u4fdd\u7ba1\u3057\u3066\u304a\u304f\ntest_id = test['Id']\ntrain = train.drop(columns='Id')\ntest = test.drop(columns='Id')\ntrain.head()","98c85d53":"train = train.drop(columns='GarageArea')\ntrain = train.drop(columns='TotRmsAbvGrd')\ntest = test.drop(columns='GarageArea')\ntest = test.drop(columns='TotRmsAbvGrd')","3cd24aea":"# import numpy as np\n# train['SalePrice'] = np.log(train['SalePrice'])\n# sns.distplot(train['SalePrice'])\n# print(\"Skewness: %f\" % train['SalePrice'].skew())\n# print(\"Kurtosis: %f\" % train['SalePrice'].kurt())","17126678":"# object\u578b\u3092category\u578b\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\ndef categorize(x):\n    object_columns = x.select_dtypes(include='object').columns\n    x[object_columns] = x[object_columns].astype('category')\n    \n    print(f'complited data categorization')\n    \n\n# object\u578b\u3092category\u578b\u306b\u5909\u63db\ncategorize(train)\ncategorize(test)","56df40cd":"# \u30c7\u30fc\u30bf\u3092\u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u306b\u5206\u3051\u308b\ntrain_x = train.drop(columns='SalePrice')\ntrain_y = train['SalePrice']\n\n# \u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u7528(tr_x, tr_y)\u3068\u8a55\u4fa1\u7528(val_x, val_y)\u306b\u5206\u3051\u308b\nfrom sklearn.model_selection import train_test_split\ntr_x, val_x = train_test_split(train_x, test_size=0.3)\ntr_y, val_y = train_test_split(train_y, test_size=0.3)","ce360a37":"# \u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\nrandom_seed = 12345\nparams = {\n    # \u4e88\u6e2c\u624b\u6cd5\u3068\u3057\u3066\u56de\u5e30\u3092\u9078\u629e\n    'objective': 'regression',\n    # loss\u306flogloss\n    'metric': 'rmse',\n    # \u5b66\u7fd2\u7387\uff08\u30c7\u30d5\u30a9\u30eb\u30c80.1\uff09\n    'learning_rate': 0.05,\n    # \u6728\u306e\u6df1\u3055\u3001-1\u3060\u3068\u5236\u9650\u7121\u3057\uff08\u30c7\u30d5\u30a9\u30eb\u30c8-1\uff09\n    'max_depth': -1,\n    # \u4e71\u6570\u3092\u56fa\u5b9a\n    'random_seed': random_seed,\n    # \u5b66\u7fd2\u3059\u308b\u56de\u6570\uff08\u30c7\u30d5\u30a9\u30eb\u30c8100\uff09\n    'num_boost_round': 1000,\n    # \u7cbe\u5ea6\u304c\u4e0a\u304c\u3089\u306a\u304f\u306a\u3063\u305f\u3089\u5b66\u7fd2\u3092\u6253\u3061\u5207\u308b\n    'early_stopping_rounds': 50,\n    # \u5b66\u7fd2\u9014\u4e2d\u3092\u8868\u793a\u3059\u308b\u9593\u9694\n    'verbose_eval': 10\n}","c5be193a":"# \u6a5f\u68b0\u5b66\u7fd2\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nimport lightgbm as lgb\n\n# \u30c7\u30fc\u30bf\u3092\u30e2\u30c7\u30eb\u306b\u30bb\u30c3\u30c8\ntrain_data = lgb.Dataset(tr_x, label=tr_y)\nval_data = lgb.Dataset(val_x, label=val_y, reference=train_data)\n\n# train\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\ngbm_reg = lgb.train(params, train_data, valid_sets=val_data)","35175d05":"# \u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\nval_pred = gbm_reg.predict(val_x, num_iteration=gbm_reg.best_iteration)\n\n# \u6bd4\u8f03\u306e\u305f\u3081\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\ntr_pred = gbm_reg.predict(tr_x, num_iteration=gbm_reg.best_iteration)\n\n# RMSE\u3092\u8a08\u7b97\nimport numpy as np\nfrom sklearn.metrics import mean_squared_error\n\ndef calc_rmse(x, y):\n    mse = mean_squared_error(x, y)\n    rmse = np.sqrt(mse)\n    \n    return rmse\n\n# train\u30c7\u30fc\u30bf\u3068validation\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\nprint (f'Training RMSE:{calc_rmse(tr_y, tr_pred)}',f'Validation RMSE:{calc_rmse(val_y, val_pred)}')","4ae26d80":"# from sklearn.model_selection import KFold\n# import lightgbm as lgb\n\n# scores_rmse=[]\n\n# # \u5b66\u7fd2\u30c7\u30fc\u30bf\u30924\u3064\u306b\u5206\u5272\u3057\u3001\u3046\u30611\u3064\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3068\u3059\u308b\u3053\u3068\u3092\u3001\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3092\u5909\u3048\u3066\u7e70\u308a\u8fd4\u3059\n# kf = KFold(n_splits=4, shuffle=True, random_state=random_seed)\n# for tr_idx, val_idx in kf.split(train_x):\n    \n#     # \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\n#     tr_x, val_x = train_x.iloc[tr_idx], train_x.iloc[val_idx]\n#     tr_y, val_y = train_y.iloc[tr_idx], train_y.iloc[val_idx]\n\n#     # \u30c7\u30fc\u30bf\u3092\u30e2\u30c7\u30eb\u306b\u30bb\u30c3\u30c8\n#     train_data = lgb.Dataset(tr_x, label=tr_y)\n#     eval_data = lgb.Dataset(val_x, label=val_y, reference=train_data)\n   \n#     # \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3092\u884c\u3046\n#     gbm_reg = lgb.train(params, \n#                         train_data, \n#                         valid_sets=eval_data\n#                        )\n    \n#     # \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\u5024\u3092\u6c42\u3081\u308b\n#     validation_pred = gbm_reg.predict(val_x, num_iteration=gbm_reg.best_iteration)\n\n#     # \u5404fold\u3067\u306e\u8a55\u4fa1\u6307\u6a19\u306e\u5024\u3092\u4fdd\u5b58\n#     scores_rmse.append(validation_pred)\n\n# # \u5404fold\u306e\u30b9\u30b3\u30a2\u306e\u5e73\u5747\u3092\u51fa\u529b\u3059\u308b\n# rmse_mean = np.mean(scores_rmse)\n# print(f'rmse_mean: {rmse_mean:.4f}')","c5c87c81":"# # train\u30c7\u30fc\u30bf\u3068validation\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\n# print (f'Training Score:{gbm_reg.predict(tr_x)}',f'Validation Score:{gbm_reg.predict(val_x)}')","02d22618":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\ntest_pred = gbm_reg.predict(test)\nprint(f'Test Score:{gbm_reg.predict(test)}')","2ee572cb":"# \u63d0\u51fa\u7528\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\nsubmission = pd.DataFrame({\n    'Id': test_id,\n    'SalePrice': test_pred\n})\n\n# \u63d0\u51fa\u7528csv\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\nsubmission.to_csv('submission.csv', index=False)","cab1dba7":"## \u4e88\u6e2c\u3068\u63d0\u51fa","d5088a80":"### \u6b20\u640d\u5024\u306e\u78ba\u8a8d","b3dc63ef":"## \u30e2\u30c7\u30eb\u8a55\u4fa1\u306e\u6e96\u5099\uff08\u4ea4\u5dee\u691c\u8a3c\u6cd5ver\uff09","bf445995":"\u591a\u3059\u304e\u3066\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u9ad8\u3044\u76f8\u95a2\u3092\u793a\u3059\u4e0a\u4f4d10\u3053\u306e\u5909\u6570\u306b\u7d5e\u308b\u3002","abab8948":"\u5c71\uff08\u30d4\u30fc\u30af\uff09\u304c\u5de6\u306b\u305a\u308c\u3066\u3044\u308b\uff08\u53f3\u5074\u306e\u88fe\u304c\u9577\u3044\u5206\u5e03\u306b\u306a\u3063\u3066\u3044\u308b\uff09\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\n\u6b63\u898f\u5206\u5e03\u304b\u3089\u5bfe\u8c61\u306e\u5206\u5e03\u304c\u3069\u308c\u3060\u3051\u305a\u308c\u3066\u3044\u308b\u304b\u3092\u6570\u5024\u7684\u306b\u628a\u63e1\u3059\u308b\u305f\u3081\u306e\u6307\u6a19\u306f\u4e8c\u3064\n- \u6b6a\u5ea6\uff08Skewness\uff09\uff1a\u5de6\u53f3\u5bfe\u79f0\u306e\u5206\u5e03\u3092\u57fa\u6e96\u306b\u3001\u5206\u5e03\u304c\u3069\u308c\u3060\u3051\u5de6\u53f3\u306b\u305a\u308c\u3066\u3044\u308b\u304b\u3092\u8868\u3059\n    - \u30de\u30a4\u30ca\u30b9\u3060\u3068\u30d4\u30fc\u30af\u306f\u53f3\u5074\u3001\u30d7\u30e9\u30b9\u3060\u3068\u5de6\u5074\n- \u5c16\u5ea6\uff08Kurtosis\uff09\uff1a\u3069\u308c\u3060\u3051\u5c16\u3063\u3066\u3044\u308b\u304b\uff08\u6a19\u6e96\u504f\u5dee\u304c\u5c0f\u3055\u3044\u304b\u3001\u5206\u5e03\u304c\u4e00\u7b87\u6240\u306b\u56fa\u307e\u3063\u3066\u3044\u308b\u304b\uff09\n    - \u5024\u304c\u5927\u304d\u3044\u307b\u3069\u5c16\u3063\u3066\u3044\u308b","d4a67267":"## \u63a2\u7d22\u7684\u30c7\u30fc\u30bf\u5206\u6790\u30fb\u524d\u51e6\u7406\n- \u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u628a\u63e1\u3057\u3001\u30e2\u30c7\u30eb\u3067\u6271\u3048\u308b\u3088\u3046\u306a\u5909\u63db\u3068\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306e\u51e6\u7406\u3092\u884c\u3046\n- \u30e2\u30c7\u30eb\u8a55\u4fa1\u3067\u7cbe\u5ea6\u304c\u4f4e\u3051\u308c\u3070\u3053\u3053\u3078\u623b\u3063\u3066\u524d\u51e6\u7406\u3092\u884c\u3046\n\n### \u3088\u304f\u884c\u3046\u78ba\u8a8d\u65b9\u6cd5\n- \u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u306e\u8868\u793a\n- \u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u306e\u78ba\u8a8d\n- \u7279\u5fb4\u91cf\u306e\u30c7\u30fc\u30bf\u578b\u3092\u78ba\u8a8d\n- \u76ee\u7684\u5909\u6570\u306e\u5206\u5e03\u3092\u78ba\u8a8d\n- \u6b20\u640d\u5024\u6570\u306e\u78ba\u8a8d\n- \u57fa\u672c\u7d71\u8a08\u91cf\u306e\u78ba\u8a8d\n- \uff08\u76ee\u7684\u5909\u6570\u3068\u306e\uff09\u76f8\u95a2\u95a2\u4fc2\u306e\u78ba\u8a8d\n    - \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3001\u6563\u5e03\u56f3\u3001\u7bb1\u3072\u3052\u56f3\n\n### \u3088\u304f\u884c\u3046\u524d\u51e6\u7406\n- \u6b20\u640d\u5024\u306e\u51e6\u7406\n    - \u5e73\u5747\u5024\u3067\u88dc\u5b8c\u3001\u524a\u9664\u3001etc...\n- \u76f8\u95a2\u95a2\u4fc2\u306e\u78ba\u8a8d\u3068\u591a\u91cd\u7dda\u578b\u6027\u306e\u524a\u9664\n- \u30e6\u30cb\u30fc\u30af\u5024\u306e\u524a\u9664\n- object\u578b\u306e\u7279\u5fb4\u91cf\u3092category\u578b\u3078\u5909\u63db\n- \u6570\u5024\u578b\u306e\u7279\u5fb4\u91cf\u3092category\u578b\u3078\u5909\u63db\n- \u6570\u5024\u578b\u7279\u5fb4\u91cf\u306e\u30b9\u30b1\u30fc\u30eb\n    - \u6a19\u6e96\u5316\u3001\u6b63\u898f\u5316\n- category\u578b\u7279\u5fb4\u91cf\u306e encoding\n- \u7279\u5fb4\u91cf\u306e\u4f5c\u6210","a628157f":"\u76ee\u7684\u5909\u6570\u306e\u5206\u5e03\u3092\u6b63\u898f\u5206\u5e03\u306b\uff08\u30d4\u30fc\u30af\u304c\u4e2d\u592e\u306b\u6765\u308b\u3088\u3046\u306b\uff09\u4fee\u6b63\u3059\u308b","2acff12d":"### \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u304b\u3089\u5206\u304b\u308b\u3053\u3068\n- \u76ee\u7684\u5909\u6570\u3068\u76f8\u95a2\u95a2\u4fc2\u304c\u5f37\u3044\u6b21\u306e\u7279\u5fb4\u91cf\u306f\u3001\u305d\u308c\u3089\u540c\u58eb\u3067\u3082\u76f8\u95a2\u95a2\u4fc2\u304c\u5f37\u3044\n    - 'GarageCars', 'GarageArea'\n        - \u3069\u3061\u3089\u3082\u307b\u307c\u540c\u3058\u610f\u5473\u3067\u3042\u308a\u3001\u3053\u306e\u3088\u3046\u306a\u76f8\u95a2\u306e\u5f37\u3044\u7279\u5fb4\u91cf\u30fb\u8aac\u660e\u5909\u6570\u304c\u5b58\u5728\u3059\u308b\u3068\u904e\u5b66\u7fd2\u306e\u539f\u56e0\u3068\u306a\u308b\u305f\u3081\u3001\u3088\u308a'SalePrice'\u3068\u76f8\u95a2\u306e\u5f37\u3044'GarageCars'\u3092\u6b8b\u3057\u3001'GarageArea' \u3092\u524a\u9664\u3059\u308b\uff08\u591a\u91cd\u7dda\u578b\u6027\u306e\u524a\u9664\uff09\u3002\n    - 'TotalBsmtSF'\u3068'GrLibArea'\u3082\u540c\u69d8","584efd1d":"## \u30e2\u30c7\u30eb\u8a55\u4fa1","427fbb63":"## \u30e2\u30c7\u30eb\u8a55\u4fa1\u306e\u6e96\u5099\uff08hold-out\u6cd5ver\uff09","bb9a7320":"### \u76ee\u7684\u5909\u6570\u3092\u898b\u3066\u3044\u304f","c8b91b2c":"### \u76f8\u95a2\u95a2\u4fc2\u306e\u8abf\u67fb","273f2672":"### \u524d\u51e6\u7406","2eb115c0":"### \u30e2\u30c7\u30eb\u8a55\u4fa1","1484b761":"### object\u578b\u3092category\u578b\u3078\u5909\u63db","f578925a":"### \u30e2\u30c7\u30eb\u4f5c\u6210\uff08\u5b66\u7fd2\uff09"}}