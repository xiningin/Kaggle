{"cell_type":{"993cd530":"code","24576268":"code","cbb50e9e":"code","39572c85":"code","2a22ac95":"code","9bfd8bdf":"code","25d8e38c":"code","5c136d21":"code","5ea0f5a9":"code","b77afa79":"code","addb9267":"code","825b5ae8":"code","ee802cb1":"code","d3f65910":"code","bd073289":"code","01ad12ae":"code","f2080fca":"code","e240a4b1":"code","dd9cbed0":"code","a2c99b1a":"code","ccea7100":"code","7cefa827":"code","671b2017":"code","6db8ed11":"code","dd84a0af":"code","7815e6e0":"code","3a77675e":"code","db56804a":"markdown","1940124e":"markdown","f5b325e3":"markdown","d11ddd84":"markdown","5e656d11":"markdown","3272a2cb":"markdown","c75aace7":"markdown","f26f7781":"markdown","bbc4eff0":"markdown","0513f24c":"markdown","8727f887":"markdown","f7c6813e":"markdown","1e6d3fd1":"markdown","62dc5a16":"markdown","31e10cdd":"markdown","e6858fc5":"markdown","592fd606":"markdown","9ec98af6":"markdown","db25fb9d":"markdown","dcc3d77f":"markdown","d46cf083":"markdown","ab9b2c9d":"markdown","394b0780":"markdown","31293425":"markdown"},"source":{"993cd530":"from matplotlib import pyplot as plt\nimport matplotlib.animation as animation\nimport random\nimport numpy as np\nimport time\nfrom tkinter import *\nfrom pylab import *\nfrom drawnow import drawnow\nimport random\nimport tkinter as tk\nimport PySimpleGUI as sg\nimport os\nimport pyautogui\nimport sys\nfrom PIL import ImageGrab\n%matplotlib inline","24576268":"\ndef GetInputs():\n    \n    sg.theme('Topanga')      # Add some color to the window\n\n    layout = [\n    \n        [sg.Text('Please Enter Data for Covid 19 Simulation', size=(30,2), justification='center', font=(\"Helvetica\", 30), auto_size_text = True, relief=sg.RELIEF_RIDGE)],\n        [sg.Text()],\n        [sg.Text('Population Sample size', size=(30, 1)), sg.Slider(range=(1, 1000), orientation='h', size=(35, 20), default_value=500)],   \n        [sg.Text('No. of Infected people', size=(30, 1)), sg.InputText(15)],\n        [sg.Text()],\n        [sg.Text('% Elderly people', size=(30, 1)), sg.Slider(range=(1, 100), orientation='h', size=(35, 20), default_value=20)],   \n        [sg.Text('% of Elderly in Home Care', size=(30, 1)), sg.Slider(range=(1, 100), orientation='h', size=(35, 20), default_value=5)],   \n        [sg.Frame(layout=[      \n        [sg.Checkbox('Testing + Quarantine?', default=True, size=(20,1)),  sg.Checkbox('PPE on?', default=True, size=(20,1)), sg.Checkbox('Social Distancing on?', default=True, size=(20,1)), sg.Checkbox('Live Daily Output??', default = True, size=(20,1))],      \n        [sg.Radio('Start with Random model     ', \"RADIO1\", default=True, size=(30,1)), sg.Radio('Reproduce Results', \"RADIO1\")]], title='Options',title_color='red', relief=sg.RELIEF_SUNKEN, tooltip='Use these to set flags')],      \n        [sg.Text('Probability of Young to reco from Hos.', size=(30, 1)), sg.Slider(range=(1, 100), orientation='h', size=(35, 20), default_value=90)],   \n        [sg.Text('Probability of Old  to reco from Hos.', size=(30, 1)), sg.Slider(range=(1, 100), orientation='h', size=(35, 20), default_value=80)],\n        [sg.Text('Prob.  of patient death in ICU (%)', size=(30, 1)), sg.InputText(1)],   \n        [sg.Text('Reference Case Study, Insert Title:', size=(30, 1)), sg.InputText('Case 001')],\n        [sg.Checkbox('Save a Screenshot of Inputs?', default=False, size=(30,1))],      \n        [sg.Button('Submit'), sg.Button('Cancel')]\n        ]\n    \n    windowmain = sg.Window('Covid-19 data entry window', layout, location =(710,0))\n    event, values = windowmain.read()\n    \n    if event == 'Cancel': os._exit(0)\n    valuesmain = values\n    \n    if valuesmain[4] == False and valuesmain[5] == False and valuesmain[6] == False: windowmain.close()\n    \n    # Testing Option is on\n    if valuesmain[4] == True:\n        sg.ChangeLookAndFeel('GreenTan')      \n    \n        layout = [\n            [sg.Text('TESTING & QUARANTINE OPTION')],     \n            [sg.Text('% of Population to be tested', size=(30, 1)), sg.Slider(range=(1, 100), orientation='h', size=(35, 20), default_value=10)],   \n            [sg.Text('Day Testing to START after 1st infection', size=(30, 1)), sg.InputText(1)],  \n            [sg.Text('Day Testing to END after 1st infection', size=(30, 1)), sg.InputText(200)],  \n            [sg.Button('Submit'), sg.Button('Cancel')]\n        ]\n        windowtest = sg.Window('Testing & Quarantine Window', layout, default_element_size=(40, 1), location =(0,0),grab_anywhere=False)      \n        event, values = windowtest.read()  \n        \n        if event == 'Cancel': os._exit(0)\n        valuestest = values\n\n      # Personal Protection Equipmemt Option is on\n    if valuesmain[5] == True:\n        sg.ChangeLookAndFeel('GreenTan')      \n    \n        layout = [\n            [sg.Text('PERSONAL PROTECTION EQUIPMEMT OPTION')],     \n            [sg.Text('% of Population wearing PPE', size=(30, 1)), sg.Slider(range=(1, 100), orientation='h', size=(35, 20), default_value=10)],   \n            [sg.Text('Day PPE to START after 1st infection', size=(30, 1)), sg.InputText(1)],  \n            [sg.Text('Day PPE to END after 1st infection', size=(30, 1)), sg.InputText(200)],  \n            [sg.Text('% Protection from PPE', size=(30, 1)), sg.Slider(range=(1, 100), orientation='h', size=(35, 20), default_value=90)],   \n\n            [sg.Button('Submit'), sg.Button('Cancel')]\n        ]\n        windowppe = sg.Window('Personal Protection Equipmemt Window', layout, default_element_size=(40, 1), location =(0,220),grab_anywhere=False)      \n        event, values = windowppe.read()   \n        \n        if event == 'Cancel': os._exit(0)\n        valuesppe = values\n    \n# Social Distancing Option is on\n    if valuesmain[6] == True:\n        sg.ChangeLookAndFeel('GreenTan')      \n    \n        layout = [\n            [sg.Text('SOCIAL DISTANCING OPTION')],     \n            [sg.Text('% of Population practising SD', size=(30, 1)), sg.Slider(range=(1, 100), orientation='h', size=(35, 20), default_value=10)],   \n            [sg.Text('Day SD to START after 1st infection', size=(30, 1)), sg.InputText(1)],  \n            [sg.Text('Day SD to END after 1st infection', size=(30, 1)), sg.InputText(200)],  \n            [sg.Text('% Protection from SD', size=(30, 1)), sg.Slider(range=(1, 100), orientation='h', size=(35, 20), default_value=90)],   \n    \n            [sg.Button('Submit'), sg.Button('Cancel')]\n        ]\n        windowsd = sg.Window('Social Distancing Window', layout, default_element_size=(40, 1), location =(0,480),grab_anywhere=False)      \n        event, values = windowsd.read()   \n        \n        if event == 'Cancel': os._exit(0)\n        valuessd = values\n\n# Read in File name for Screenshot saving\n    if valuesmain[14] == True:\n\n        if len(sys.argv) == 1:\n            event, values = sg.Window('ScreenShot of Inputs',\n                            [[sg.Text('Document to save Input')],\n                            [sg.In(), sg.FileBrowse()],\n                            [sg.Open(), sg.Cancel()]]).read(close=True)\n            fname = values[0]\n        else:\n            fname = sys.argv[1]\n\n        if not fname:\n            sg.popup(\"Cancel\", \"No filename supplied\")\n            raise SystemExit(\"Cancelling: no filename supplied\")\n        else:\n            sg.popup('The filename you chose was', fname)\n\n        image = ImageGrab.grab(bbox=(0,0,1460,770))\n        image.save(fname)\n        event = \"Submit\"\n        \n    if valuesmain[4] == True: windowtest.close()\n    if valuesmain[5] == True: windowppe.close()\n    if valuesmain[6] == True: windowsd.close()\n#    if valuesmain[13] == True: windowsshot.close()\n    windowmain.close()\n\n    # Population Sample size\n    npeople = int(valuesmain[0])\n    # Number of people initially infected (on day zero)\n    initialinfect = int(valuesmain[1])\n    ninfected = initialinfect\n    \n    # % of old people in Population Sample\n    percentold = valuesmain[2]\n    # % of old people in Care Home\n    percentcarehome = valuesmain[3]\n    \n    #testing on\/off\n    testing = valuesmain[4]\n    #PPE on\/off\n    ppe= valuesmain[5]\n    #Social Distance on\/off\n    socdis= valuesmain[6]\n    #Live daily Result on\/off\n    livedaily = valuesmain[7]\n    \n    #Start with random distribution on\/off\n    if valuesmain[8]== True: FREEZE = False\n    if valuesmain[8] == False: FREEZE = True\n    \n    #Probability of Young to recover from Quarantine\/Hospital\n    percentyreco = valuesmain[10]\n    # Probability (%) of old to Recover from Hospital\n    percentoreco = valuesmain[11]\n    #probability of patient death in ICU\n    percentdicu = float(valuesmain[12])\n#    print(\"valuesmain   = \", valuesmain)\n    reference = valuesmain[13]\n\n    # % Covid Testing of Population Sample\n    if testing == True:\n        percentcovtest = valuestest[0]\n        daystarttest = int(valuestest[1])\n        dayendtest = int(valuestest[2])\n    else:\n        percentcovtest = 0\n        daystarttest = 0\n        dayendtest = 0\n\n    \n    # % wearing PPE\n    if ppe == True:\n        percentppe = valuesppe[0]\n        daystartppe = int(valuesppe[1])\n        dayendppe = int(valuesppe[2])\n        # % Efficiency of PPE\n        percenteppe= valuesppe[3]\n    else:\n        percentppe = 0\n        daystartppe = 0\n        dayendppe = 0\n        # % Efficiency of PPE\n        percenteppe= 0\n\n    \n    # % of Population Practising Social Distancing\n    if socdis == True:\n        percentsd = valuessd[0]\n        daystartsd = int(valuessd[1])\n        dayendsd = int(valuessd[2])\n    else:\n        percentsd = 0\n        daystartsd = 0\n        dayendsd = 0\n\n    \n    if npeople < 101:\n        WIDTH = 1000\n        HEIGHT =800\n        peoplesizex = 20\n        peoplesizey = 20\n        peoplespeedx = 10\n        peoplespeedy = 10\n        contactdist = peoplesizex * 1.25\n    else:\n        WIDTH = 1700\n        HEIGHT = 850\n        peoplesizex = 10\n        peoplesizey = 10\n        peoplespeedx = 10\n        peoplespeedy = 10\n        contactdist = peoplesizex * 1.25\n    \n        \n        \n    nold = int((percentold\/100) * npeople)\n    ncarehome = int((percentcarehome\/100) * nold)\n    #Note new Definition of pep!!!!!!!!!!!!!!!!!!!!!!!!\n    nppe = int((percentppe\/100) * npeople)\n    npsd = int((percentsd\/100) * npeople)\n    \n    #Probability\/Efficiency  of ppe\n    probppe = percenteppe\/100.0\n    #Probability\/Efficiency  of Social Distance\n    probsd = percentsd\/100.0\n    #Probability\/Efficiency  of Cov testing\n    probcovt = percentcovtest\/100.0\n    \n    #Probability of Young Recover\n    probyreco = percentyreco\/100.0\n    #Probability\/ of Old recover\n    proboreco= percentoreco\/100.0\n    #Probability of patient death in ICU\n    probdicu = percentdicu\/100.0\n \n#Set startrun to True or false\n    startrun = False\n    if event == 'Submit':\n        startrun = True\n\n    covidlogicinput = []\n    covidlogicinput.insert(0, testing)\n    covidlogicinput.insert(1, ppe)\n    covidlogicinput.insert(2, socdis)\n    covidlogicinput.insert(3, livedaily)\n    covidlogicinput.insert(4, FREEZE)\n    covidlogicinput.insert(5, startrun)\n    covidlogicinput.insert(6,reference)\n\n    \n    covidpeopleinput = []\n    covidpeopleinput.insert(0, npeople)\n    covidpeopleinput.insert(1, ninfected)\n    covidpeopleinput.insert(2, nold)\n    covidpeopleinput.insert(3, ncarehome)\n\n    covidpeopleinput.insert(4, nppe)\n    covidpeopleinput.insert(5, probppe)\n    covidpeopleinput.insert(6, npsd)\n    covidpeopleinput.insert(7, probsd)\n    covidpeopleinput.insert(8, probcovt)\n    covidpeopleinput.insert(9, probyreco)\n    covidpeopleinput.insert(10, proboreco)\n    covidpeopleinput.insert(11, probdicu)\n\n    \n    coviddimension = []\n    coviddimension.insert(0, WIDTH)\n    coviddimension.insert(1, HEIGHT)\n    coviddimension.insert(2, peoplesizex)\n    coviddimension.insert(3, peoplesizey)\n    coviddimension.insert(4, peoplespeedx)\n    coviddimension.insert(5, peoplespeedy)\n    coviddimension.insert(6, contactdist)\n    coviddimension.insert(7, startrun)\n    \n    coviddays = []\n    coviddays.insert(0,daystarttest)\n    coviddays.insert(1,dayendtest)\n    coviddays.insert(2,daystartppe)\n    coviddays.insert(3,dayendppe)\n    coviddays.insert(4,daystartsd)\n    coviddays.insert(5,dayendsd)\n\n    return covidpeopleinput, coviddimension, coviddays, covidlogicinput\n\n","cbb50e9e":"#Get Inputs\ncovidpeopleinput, coviddimension, coviddays, covidlogicinput = GetInputs()","39572c85":"livedaily = covidlogicinput[3]\n\nFREEZE= covidlogicinput[4]\nif FREEZE== True:\n    random.seed(301)\n    np.random.seed(301)\n    \nWIDTH = coviddimension[0]\nHEIGHT = coviddimension[1]\n\nnpeople = covidpeopleinput[0]\n\ninitialinfect = covidpeopleinput[1]\nninfected = initialinfect\n\nnold = covidpeopleinput[2]\nncarehome = covidpeopleinput[3]\nnpep = covidpeopleinput[4]\nnpsd = covidpeopleinput[6]\n\npeoplesizex = coviddimension[2]\npeoplesizey = coviddimension[3]\npeoplespeedx = coviddimension[4]\npeoplespeedy = coviddimension[5]\ncontactdist = coviddimension[6]\n\nQWIDTH = int(WIDTH \/ 4)\nQHEIGHT = int(HEIGHT \/ 3)\nXBUF = 20\nYBUF= 20\n\n#Set for Countour Plot\nngridx = 5\nngridy = 5\n\nQEXBUF = WIDTH - QWIDTH -XBUF\nQILXBUF = QEXBUF + 2*XBUF\nQIRXBUF = WIDTH - XBUF\nQEYBUF = QHEIGHT + YBUF\nQIBYBUF = QEYBUF - 2*YBUF\nQITYBUF = YBUF\n\nICUWIDTH = QWIDTH\nICUHEIGHT = QHEIGHT\n\n\nICUEXBUF = WIDTH - ICUWIDTH -XBUF\nICUILXBUF = ICUEXBUF + 2*XBUF\nICUIRXBUF = WIDTH - XBUF\nICUEYBUF = HEIGHT - ICUHEIGHT-YBUF\nICUITYBUF = ICUEYBUF + 2*YBUF\nICUIBYBUF = HEIGHT - YBUF","2a22ac95":"tk = Tk()\ncanvas = Canvas(tk, width=WIDTH, height=HEIGHT, bg=\"black\")\ntk.title(\"Covid Propagation Simulation\")\ncanvas.create_rectangle((WIDTH-QWIDTH), 0, WIDTH, QHEIGHT, fill =\"yellow\")\nlbl=Label(tk, text=\"14 Days Quarantine\/Hospital\", fg='blue', font=(\"Helvetica\", 10))\n\nlbl.place(x=(WIDTH-QWIDTH+XBUF), y=5)\nlbl2=Label(tk, text=\"ICU (White=Young; Black=Old; Brown=Care Home;Purple=Deceased\", fg='blue', font=(\"Helvetica\", 8))\nlbl2.place(x=(WIDTH-ICUWIDTH+5), y=ICUITYBUF-10)\nlbl3=Label(tk, text=\"Green = Non-Infected; Red = Infected; Yellow = Recovered\", fg='blue', font=(\"Helvetica\", 10))\nlbl3.place(x=XBUF, y=HEIGHT-20)\n\n\ncanvas.create_rectangle((WIDTH-ICUWIDTH), (HEIGHT-ICUHEIGHT), WIDTH, HEIGHT, fill =\"red\")\n\ncanvas.pack()\n","9bfd8bdf":"def daylabel(jday):\n    textday = 'Day ' + str(jday)\n    lbl=Label(tk, text=textday, fg='black', font=(\"Helvetica\", 20))\n    lbl.place(x=5, y=5)","25d8e38c":"class Person:\n    def __init__(self, colour, xsize, ysize, xspeed, yspeed):\n        \n        self.xstart = random.randrange(0, WIDTH-xsize)\n        self.ystart = random.randrange(0, HEIGHT-ysize)\n        self.xend   = self.xstart + xsize\n        self.yend   = self.ystart + ysize\n        \n        if self.xend >= QEXBUF and self.ystart <= QEYBUF:\n            self.xend = 2.0 * QEXBUF - self.xend\n            self.xstart = self.xend - xsize\n            \n        if self.xend >= ICUEXBUF and self.ystart >= ICUEYBUF:\n            self.xend = 2.0 * ICUEXBUF - self.xend\n            self.xstart = self.xend - xsize\n            \n        self.colour = colour\n        self.xspeed = random.randrange(-xspeed, xspeed)\n        self.yspeed = random.randrange(-yspeed, yspeed)\n                          \n        self.shape = canvas.create_oval(self.xstart, self.ystart, self.xend, self.yend, fill=self.colour)\n        self.xcentre = (self.xend + self.xstart)\/2\n        self.ycentre = (self.yend + self.ystart)\/2\n    \n    def move(self):\n        canvas.move(self.shape, self.xspeed, self.yspeed)\n        self.newpos = canvas.coords(self.shape)\n        self.xcentre = (self.newpos[0] + self.newpos[2])\/2\n        self.ycentre = (self.newpos[1] + self.newpos[3])\/2\n        \n        if self.colour == \"green\" or self.colour ==\"red\" or self.colour ==\"yellow\":\n         \n            if self.newpos[3] >= HEIGHT or self.newpos[1] <=0:\n                self.yspeed = -self.yspeed\n            if self.newpos[2] >= WIDTH or self.newpos[0] <=0:\n                self.xspeed = - self.xspeed\n            \n            if self.newpos[2] >= QEXBUF and self.newpos[1] <=QEYBUF:\n                self.yspeed = -self.yspeed\n                self.xspeed = - self.xspeed\n            \n            if self.newpos[2] >= ICUEXBUF and self.newpos[3] >=ICUEYBUF:\n                self.yspeed = -self.yspeed\n                self.xspeed = - self.xspeed\n            \n        if self.colour == \"blue\":\n            if self.newpos[3] >= QIBYBUF or self.newpos[1] <= QITYBUF:\n                self.yspeed = -self.yspeed\n            if self.newpos[2] >= QIRXBUF or self.newpos[0] <= QILXBUF:\n                self.xspeed = -self.xspeed\n                \n        if self.colour == \"white\" or self.colour == \"black\":\n            if self.newpos[3] >= ICUIBYBUF or self.newpos[1] <= ICUITYBUF:\n                self.yspeed = -self.yspeed\n            if self.newpos[2] >= ICUIRXBUF or self.newpos[0] <= ICUILXBUF:\n                self.xspeed = -self.xspeed\n\n         \n    def changecolour(self, newcol):\n        self.colour = newcol\n        canvas.itemconfig(self.shape, fill= newcol) # change color\n        \n    def movequa(self, newpos):\n        qx = random.randrange((WIDTH - QWIDTH+XBUF), WIDTH-XBUF)\n        qy = random.randrange(XBUF, QHEIGHT-XBUF)\n        qxspeed = qx - newpos[0]\n        qyspeed = qy - newpos[1]\n        canvas.move(self.shape, qxspeed, qyspeed)\n        \n    def moveicu(self, newpos):\n        qx = random.randrange((WIDTH - ICUWIDTH+XBUF), WIDTH-XBUF)\n        qy = random.randrange((HEIGHT-ICUHEIGHT)+XBUF, HEIGHT-XBUF)\n        qxspeed = qx - newpos[0]\n        qyspeed = qy - newpos[1]\n        canvas.move(self.shape, qxspeed, qyspeed)\n        \n    def movebac(self, newpos):\n        qx = random.randrange(XBUF, (WIDTH - QWIDTH-XBUF))\n        qy = random.randrange(XBUF, HEIGHT-XBUF)\n        qxspeed = qx - newpos[0]\n        qyspeed = qy - newpos[1]\n        canvas.move(self.shape, qxspeed, qyspeed)","5c136d21":"def peopleage(people, npeople, nold, ncarehome):\n    oldlist = random.sample(range(0, (npeople-1)), nold)\n    for j in range(npeople):\n        people[j].age = 'young'\n        \n    for i in range(nold):\n        j = oldlist[i]\n        if i < ncarehome:\n            people[j].age = 'carehome'\n            people[j].xspeed = 0\n            people[j].yspeed = 0\n        else:\n            people[j].age = 'old'\n","5ea0f5a9":"def peoplepep(people, npeople, npep):\n    peplist = random.sample(range(0, (npeople-1)), npep)\n    for j in range(npeople):\n        people[j].pep = 'nopep'\n        \n    for i in range(npep):\n        j = peplist[i]\n        people[j].pep = 'pep'\n","b77afa79":"def peoplesd(people, npeople, npsd):\n#    if FREEZE== True:\n#        random.seed(30)\n#        np.random.seed(30)\n\n    sdlist = random.sample(range(0, (npeople-1)), npsd)\n    for j in range(npeople):\n        people[j].sd = 'nosd'\n        \n    for i in range(npsd):\n        j = sdlist[i]\n        people[j].sd= 'sd'\n        ","addb9267":"def raninfect(people, npeople, initialinfect):\n    inflist = random.sample(range(0, (npeople-1)), initialinfect)\n    for i in range(initialinfect):\n        j = inflist[i]\n        people[j].changecolour(\"red\")","825b5ae8":"def prob_test(jday,testing, daystarttest, dayendtest, probtest):\n    \n    if testing == True:\n        if jday >= daystarttest and jday <= dayendtest:\n            prob = probtest\n            pm1 = 1 - prob\n        else:\n            prob = 0.0\n            pm1 = 1 - prob\n    else:\n        prob = 0.0\n        pm1 = 1 - prob\n    return prob, pm1\n","ee802cb1":"def prob_ppe(jday, daystartppe, dayendppe, probppe):\n    \n    if jday >= daystartppe and jday <= dayendppe:\n        prob = probppe\n        pm1 = 1 - prob\n    else:\n        prob = 0.95\n        pm1 = 1 - prob\n    return prob, pm1","d3f65910":"def prob_sd(jday, daystartsd, dayendsd, probsd):\n    \n    if jday >= daystartsd and jday <= dayendsd:\n        prob = probsd\n        pm1 = 1 - prob\n    else:\n        prob = 0.95\n        pm1 = 1 - prob\n    return prob, pm1","bd073289":"def prob_ppesd(jday,daystartppe, dayendppe, probppe, daystartsd, dayendsd, probsd):\n    \n    if jday < daystartppe and jday < daystartsd:\n        probppesd = 0.95\n        pm1 = 1 - probppesd\n        \n    elif jday < daystartppe and jday >= daystartsd:\n        probppesd = probsd\n        pm1 = 1 - probppesd\n\n    elif jday >= daystartppe and jday < daystartsd:\n        probppesd = probppe\n        pm1 = 1 - probppesd\n\n    elif jday > dayendppe and jday <= dayendsd:\n        probppesd = probsd\n        pm1 = 1 - probppesd\n\n    elif jday > dayendppe and jday > dayendsd:\n        probppesd = 0.95\n        pm1 = 1 - probppesd\n\n    elif jday > dayendppe and jday > dayendsd:\n        probppesd = probppe\n        pm1 = 1 - probppesd\n        \n    else:\n        probppesd = probppe * probsd\n        pm1 = 1 - probppesd\n    return probppesd, pm1\n        ","01ad12ae":"def gridspace(WIDTH,HEIGHT, XBUF,YBUF, ngridx, ngridy):\n    xlist = np.linspace(0, WIDTH, ngridx)\n    ylist = np.linspace(0, HEIGHT,ngridy)\n\n    xgrid, ygrid = np.meshgrid(xlist, ylist)\n    return xgrid, ygrid","f2080fca":"def contourplot(xgrid, ygrid, ngridx, ngridy, people, npeople, jday):\n    dx = xgrid[0,1] - xgrid[0,0]\n    dy = ygrid[1,0] - ygrid[0,0]\n    dx2 = dx\/2\n    dy2 = dy\/2\n#    ztemp= (300,ngridx,ngridy)\n    ztemp= (ngridx,ngridy)\n\n    z = np.zeros((ztemp), dtype = int)\n\n    for i in range(ngridy):\n        for j in range(ngridx):\n            nred = 0\n            xmin = xgrid[i,j]-dx2\n            ymin = ygrid[i,j]-dy2\n            xmax = xmin + dx\n            ymax = ymin + dy\n            \n            \n            for k in range (npeople):\n#                print(\"going thru people\", i,j)\n                if people[k].colour == \"red\":\n#                    print(\"found red\")\n                    if people[k].xcentre >= xmin and people[k].xcentre <= xmax:\n#                        print(\"between xmin and xmax *************************************\")\n                        if people[k].ycentre >= ymin and people[k].ycentre <= ymax:\n#                            print(\"between ymin and ymax $$$$$$$$$$$$$$$$$\")\n                            nred += 1\n                            print(i,j,nred)\n\n                            z[i,j] = nred\n\n    \n    ygridrev = -ygrid              \n    us = np.linspace(0, 12, 10, endpoint = True)\n#    plt.contourf(xgrid,ygrid,z[jday][:][:], us, cmap =\"seismic\")\n    plt.contourf(xgrid, ygridrev, z, us, cmap =\"seismic\")\n\n    plt.colorbar()\n    plt.xlabel(\"X - Distance\", fontsize = 10)\n    plt.ylabel(\"Y - Distance\", fontsize = 10)\n    plt.title(\" Contour Plot\")\n    plt.show()\n    \n    return z\n","e240a4b1":"def convergence(jday, y5, people, npeople, nold, ncarehome, ninfected, nqua, nrec, nicu):\n    startrun = True\n    jdaym14 = jday - 14\n    sum1 = 0\n    redcount = 0\n    nicuyoung = 0\n    nrecyoung = 0\n    nquayoung = 0\n    nquaold = 0\n    ngreenyoung = 0\n    ngreenold = 0\n    ngreencareh= 0\n    nicubrown = 0\n    ndeath = 0\n    \n    for i in range(jdaym14, jday-1):\n        sum1 = sum1 + y5[i]\n    \n    if sum1 == 0:\n        for i in range(npeople):\n            if people[i].colour == \"red\":\n                redcount += 1\n            if people[i].colour == \"white\":\n                nicuyoung += 1\n            if people[i].colour == \"yellow\" and people[i].age == \"young\":\n                nrecyoung += 1\n            if people[i].colour == \"blue\" and people[i].age == \"young\":\n                nquayoung += 1\n            if people[i].colour == \"blue\" and people[i].age == \"old\":\n                nquaold += 1\n            if people[i].colour == \"green\" and people[i].age ==\"young\":\n                ngreenyoung += 1\n            if people[i].colour == \"green\" and people[i].age ==\"old\":\n                ngreenold += 1\n            if people[i].colour == \"green\" and people[i].age ==\"carehome\":\n                ngreencareh += 1\n            if people[i].colour == \"brown\":\n                nicubrown += 1\n            if people[i].colour == \"purple\":\n                ndeath += 1\n                \n\n                \n        \n        if redcount == 0:\n            startrun = False\n            nicuold = nicu - nicuyoung - nicubrown\n            nrecold = nrec - nrecyoung\n    \n            #print(\"****CONVERGENCE***\")\n            #print(\"jday =\", jday, \"npeople =\", npeople, \"nold =\", nold, \"nyoung =\", (npeople-nold))\n            #print(\"ninfected = \", ninfected, \"nqua = \", nqua, \"nquaold =\", nquaold, \"nquayoung=\", nquayoung)\n            #print(\"nrec = \", nrec, \"nrecold =\", nrecold, \"nrecyoung =\", nrecyoung)\n            #print(\"nicu = \", nicu, \"nicuold = \", nicuold, \"nicucarehome = \", nicubrown, \"nicuyoung = \", nicuyoung)     \n            #print(\"ngreenold = \", ngreenold, \" ngreenyoung = \", ngreenyoung)\n            \n            nyoung = npeople - nold\n            convergence_results= {\"******DAYS TO CONVERGE*******\" : jday, \n                    \"      \":\" \",            \n                   \"People sample Size\" : npeople, \n                   \"Number of Elderly\" : nold,\n                   \"Number of young\": nyoung,\n                   \"Number in Elderly in Care Home\" : ncarehome,\n                   \"****\":\"    \",  \n                   \"Total Number of Infected\" : ninfected,\n                   \"Total Number of Non-Infected Young People\": ngreenyoung,\n                   \"Total Number of Non-Infected Elderly People\": ngreenold,\n                   \"Total Number of Non-Infected Care Home patients\": ngreencareh,\n                   \"*****\":\"     \",  \n                   \"Cummulative Number of people admitted to Qua\/Hospital\": nqua,\n                   \"     Number of Elderly in Qua\/Hospital on convergence day\": nquaold,\n                   \"     Number of Young in Qua\/Hospital on convergence day\": nquayoung,\n                   \"******\":\"      \",  \n                    \"Cummulative Number who Recovered\": nrec,\n                    \"    Number of Young who recovered\": nrecyoung,\n                    \"    Number of Elderly who recovered\": nrecold,\n                    \"*******\":\"       \",  \n                    \"Cummulative Number in ICU patients on convergence day\": nicu,\n                    \"    Number of Young in ICU\": nicuyoung,\n                    \"    Number of elderly in ICU\": nicuold,\n                    \"    Number of Care Home patient in ICU\": nicubrown,  \n                    \"********\":\"       \", \n                    \"Total Number of Deaths\": ndeath}\n\n\n            print(\"AT CONVERGENCE:\")\n            for c in convergence_results:\n                format_string = c + \": {\" + c + \"}\" \n                print(format_string.format(**convergence_results))\n            \n    return startrun  ","dd9cbed0":"def Icu_deceased(jday, x1, dailydeath):\n    cumdeath = list()\n    totaldeath = 0\n    for i in range(jday):\n        totaldeath = totaldeath + dailydeath[i]\n        cumdeath.append(totaldeath)\n        \n    texttitle = 'Estimated Daily Death  --- Total Death = ' + str (totaldeath)\n\n# Create a figure of size 8x6 inches, 80 dots per inch\n    plt.figure(figsize=(8, 6), dpi=80)\n\n# Create a new subplot from a grid of 1x1\n#    plt.subplot(1, 1, 1)\n\n    plt.plot(x1, dailydeath, color=\"yellow\", linewidth=2.0, linestyle=\"-\")\n    plt.scatter(x1, dailydeath)\n    plt.plot(x1, cumdeath, color=\"red\", linewidth=2.0, linestyle=\"-\")\n    plt.scatter(x1, cumdeath)\n    ax = plt.gca()\n    ax.set_facecolor('black')\n    plt.grid()\n    plt.title(texttitle, fontsize = 20)\n    plt.xlabel('Days after first infection', fontsize = 20)\n    plt.ylabel('Number of Cases', fontsize = 20)\n\n    plt.show()\n    \n        \n    return totaldeath","a2c99b1a":"def RZeroplot(initialinfect, newinfectday, jday):\n    suminfect = initialinfect\n    rzero = list()\n    for i in range(jday):\n        rzero[i] = newinfectday(i)\/suminfect\n        suminfect = suminfect + newinfectday(i)\n    return rzero","ccea7100":"def Plot_results(x1,y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11, reference):\n    \n    fig, axs = plt.subplots(5, 2, figsize=(18,20))\n    fig.suptitle(reference, fontsize = 25)\n    plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace = None, hspace=0.8)\n    axs[0, 0].plot(x1, y1)\n    axs[0, 0].scatter(x1,y1)\n    axs[0, 0].set_title('Cummulative Infected', fontsize=18)\n    axs[0, 0].set_facecolor('black') \n    axs[0, 0].set(xlabel=' ', ylabel='No of cases')\n\n#    plt.grid(True)\n#    axs.grid(linestyle='-', linewidth='0.5', color='white')\n    axs[1, 0].plot(x1, y2, 'tab:orange')\n    axs[1, 0].scatter(x1,y2)\n    axs[1, 0].set_title('Cummulative Quarantine Cases', fontsize=18)\n    axs[1, 0].set_facecolor('black') \n    axs[1, 0].set(xlabel=' ', ylabel='No of cases')\n\n\n\n    axs[3, 0].plot(x1, y3, 'tab:green')\n    axs[3, 0].scatter(x1,y3)\n    axs[3, 0].set_title('Cummulative ICU Cases', fontsize=18)\n    axs[3, 0].set_facecolor('black') \n    axs[3, 0].set(xlabel=' ', ylabel='No of cases')\n\n\n    axs[2, 0].plot(x1, y4, 'tab:red')\n    axs[2, 0].scatter(x1,y4)\n    axs[2, 0].set_title('Cummulative Recovered Cases', fontsize=18)\n    axs[2, 0].set_facecolor('black') \n    axs[2, 0].set(xlabel=' ', ylabel='No of cases')\n\n\n    axs[4, 0].plot(x1, y5, 'tab:red')\n    axs[4, 0].scatter(x1,y5)\n    axs[4, 0].set_title('Daily Infected Cases', fontsize=18)\n    axs[4, 0].set_facecolor('yellow') \n    axs[4, 0].set(xlabel=' ', ylabel='No of cases')\n\n    \n    axs[0, 1].plot(x1, (y6), 'tab:red')\n    axs[0, 1].scatter(x1,y6)\n    axs[0, 1].set_title('Daily Effective RZero ', fontsize=18)\n    axs[0, 1].set_facecolor('yellow') \n    axs[0, 1].set(xlabel=' ', ylabel='Eff. RZero')\n\n\n    axs[1, 1].plot(x1, y7, 'tab:red')\n    axs[1, 1].scatter(x1,y7)\n    axs[1, 1].set_title('Daily Quarantine Admitted Cases', fontsize=18)\n    axs[1, 1].set_facecolor('yellow') \n    axs[1, 1].set(xlabel=' ', ylabel='No of cases')\n\n\n    axs[2, 1].plot(x1, y8, 'tab:red')\n    axs[2, 1].scatter(x1,y8)\n    axs[2, 1].set_title('Daily ICU admitted Cases ', fontsize=18)\n    axs[2, 1].set_facecolor('yellow') \n    axs[2, 1].set(xlabel=' ', ylabel='No of cases')\n\n\n    axs[3, 1].plot(x1, y9, 'tab:red')\n    axs[3, 1].scatter(x1,y9)\n    axs[3, 1].set_title('Daily Recovered Cases', fontsize = 18)\n    axs[3, 1].set_facecolor('yellow') \n    axs[3, 1].set(xlabel=' ', ylabel='No of cases')\n\n    \n#    axs[4, 0].set(xlabel='Days after first Infection', ylabel='No of cases')\n    axs[4, 0].set_xlabel(\"Days after first infection\", fontname=\"Arial\", fontsize=18)\n    axs[4, 0].set_ylabel(\"No. of cases\", fontname=\"Arial\", fontsize=18)\n    \n    axs[4, 1].plot(x1, y10, 'tab:red')\n    axs[4, 1].scatter(x1,y10)\n    axs[4, 1].plot(x1, y11, 'tab:blue')\n    axs[4, 1].scatter(x1,y11)\n\n    axs[4, 1].set_title('Daily Quarantine & ICU Occupancy', fontsize=18)\n    axs[4, 1].set_facecolor('yellow') \n \n#    axs[4, 1].set(xlabel='Days after first Infection',ylabel='No of cases')\n    axs[4, 1].set_xlabel(\"Days after first infection\", fontname=\"Arial\", fontsize=18)\n    axs[4, 1].set_ylabel(\"No. of cases\", fontname=\"Arial\", fontsize=18)\n\n    for ax in axs.flat:\n#       ax.label_outer()\n       ax.grid(linestyle='-', linewidth='1.0', color='green')\n\n    plt.show()\n","7cefa827":"def make_fig():\n    \n#    markers = [\".\" , \",\" , \"o\" , \"v\" , \"^\" , \"<\", \">\"]\n    #fig = plt.figure(figsize=(15,10))\n    p0 = plt.scatter(x1, y1, marker =\",\", s=120, zorder = 1, c='r')  # I think you meant this\n    p1 = plt.scatter(x2, y2, marker =\",\",s=120, zorder = 2, c='blue')\n    p2 = plt.scatter(x3, y3, marker =\"v\",s=80, zorder = 3, c='y')\n    p3 = plt.scatter(x4, y4, marker =\"<\",s=80, zorder = 4, c='black')\n    p4 = plt.scatter(x5, y5, marker =\">\",s=80, zorder = 5, c='brown')\n    p5 = plt.scatter(x5, y6, marker =\"o\",s=80, zorder = 6, c='purple')\n\n    plt.legend((p0, p1, p2, p3, p4, p5),\n           ('Cum Infected', 'Cum Quarantine', 'Cum Recover', 'Cum ICU', 'Daily Infect', 'RZERO * 10'),\n           scatterpoints=1,\n           loc='best',\n           ncol=3,\n           fontsize=20)\n    \n    plt.grid(linestyle = 'dotted')\n    plt.title(' Cummulative Infection & Recovery rate', fontsize = 20)\n    plt.xlabel('Days since infection', fontsize = 20)\n    plt.ylabel('Cummulative No. of Cases', fontsize = 20)\n    #plt.show()","671b2017":"if livedaily == True:\n    plt.ion()  # enable interactivity\n    %matplotlib auto\n    fig = plt.figure(figsize=(15,10))\n    #plt.show()\n#fig = plt.figure(figsize=(5,5))  # make a figure","6db8ed11":"x1 = list()\ny1 = list()\nx2 = list()\ny2 = list()\nx3 = list()\ny3 = list()\nx4 = list()\ny4 = list()\nx5 = list()\ny5 = list()\ny6 = list()\ny7 = list()\ny8 = list()\ny9 = list()\ny10 = list()\ny11 = list()\ndailydeath = list()\n#yrzero[0] = 0\n\npeople= []\n\nfor i in range(npeople):\n    people.append(Person(\"green\", peoplesizex, peoplesizey, peoplespeedx, peoplespeedy))\n    \npeopleage(people, npeople, nold, ncarehome)    \npeoplepep(people, npeople, npep)\npeoplesd(people, npeople, npsd)\nraninfect(people, npeople, initialinfect)\nxgrid, ygrid = gridspace(WIDTH,HEIGHT, XBUF,YBUF, ngridx, ngridy)\n   \n\npinfected = [ninfected]\nstepperson =[1]\n#############################################################################\ntesting = covidlogicinput[0]   # To be read from GUI values\nif testing == True:\n    daystarttest = coviddays[0]\n    dayendtest = coviddays[1]\n    #probability of Detecting all Infected people through TESTING\n    probtest = covidpeopleinput[8]\nelse:\n    daystarttest = 0\n    dayendtest = 0\n    probtest = 0.0\n\n#The below apply when contact distance is less that size*1.25\nppe = covidlogicinput[1]     # To be read from GUI values\nif ppe == True:\n    daystartppe = coviddays[2]\n    dayendppe = coviddays[3]\n    probppe = covidpeopleinput[5]   #Probability of someone wearing PPE (Face Mask) be infected\nelse:\n    daystartppe = 0\n    dayendppe = 0\n    probppe = 0.95\n\nsocdis = covidlogicinput[2]       # To be read from GUI values\nif socdis == True:\n    daystartsd = coviddays[4]\n    dayendsd = coviddays[5]\n    #Probability of someone practising Social Distance be infected\n    probsd = covidpeopleinput[7]\n\nelse:\n    daystartsd = 0\n    dayendsd = 0\n    probsd = 0.95\n\n#Probability of Young to Recover\nprobyreco = covidpeopleinput[9]\nprobyreco1 = 1 - probyreco\nproboreco = covidpeopleinput[10]\nproboreco1 = 1 - proboreco\n#Probability of death of ICU patient\nprobdicu = covidpeopleinput[11]\nprobdicu1 = 1 - probdicu\n    \n#Probability of infected carehome resident be sent to ICU when infected\nprobcarehome = 0.995\nprobchome1 = 1 - probcarehome\n\n# Probability of getting infected if No PPE and No sd \nnppensd = 0.95\nnppensd1 = 1 - nppensd\n\n#############################################################################\n\n\n\njday = 0\nnqua= 0\nquaday = 0\nnicu = 0\nicuday = 0\nnrec = 0\nrecday = 0\nnquacapa = 0\nnicucapa = 0\nrzero = 1.0 * 10.0\ninfectday = initialinfect\nstartrun = covidlogicinput[5]\nreference = covidlogicinput[6]\n\nwhile startrun:\n    x1.append(jday)\n    y1.append(ninfected)\n    x2.append(jday)\n    y2.append(nqua)\n    x3.append(jday)\n    y3.append(nicu)\n    x4.append(jday)\n    y4.append(nrec)\n    x5.append(jday)\n    y5.append(infectday)\n    y6.append(rzero)\n    \n    y7.append(quaday)\n    y8.append(icuday)\n    y9.append(recday)\n    \n    infectday = 0\n    quaday = 0\n    icuday = 0\n    recday = 0\n    \n    \n    for j in range(npeople):\n        \n        people[j].move()\n        newpos = people[j].newpos\n        if people[j].colour == \"red\":\n            prob, pm1 = prob_test(jday, testing, daystarttest, dayendtest, probtest)\n            if np.random.choice(2,1, p=[prob, pm1]) == 0:\n                people[j].changecolour(\"blue\")\n                people[j].firstquaday = jday\n                people[j].movequa(newpos)\n            \n                nqua += 1\n                quaday += 1\n#                y2[jday] = nqua\n            \n        if people[j].colour == \"red\" and people[j].age == \"carehome\" and np.random.choice(2,1, p=[probcarehome, probchome1]) == 0:\n            people[j].changecolour(\"brown\")\n            people[j].moveicu(newpos)\n            nicu += 1\n            icuday += 1\n               \n        for i in range(npeople):\n   \n            d = np.sqrt((people[i].xcentre - people[j].xcentre) **2 + (people[i].ycentre - people[j].ycentre)**2)\n            \n            if d < contactdist:\n                 if people[j].colour == \"red\" and people[i].colour == \"green\":\n                     if people[i].pep == \"pep\" and people[i].sd == \"sd\":\n                         prob, pm1 = prob_ppesd(jday,daystartppe, dayendppe, probppe, daystartsd, dayendsd, probsd)\n                         if np.random.choice(2,1, p=[prob, pm1]) == 0:\n                             people[i].changecolour(\"red\")\n                             ninfected += 1\n                             infectday += 1\n                         \n                     if people[i].pep ==\"pep\" and people[i].sd == \"nosd\":\n                         prob, pm1 = prob_ppe(jday, daystartppe, dayendppe, probppe)\n                         if np.random.choice(2,1, p=[prob, pm1]) == 0:\n                             people[i].changecolour(\"red\")\n                             ninfected += 1\n                             infectday += 1\n                    \n                     if people[i].pep == \"nopep\" and people[i].sd == \"sd\":\n                         prob, pm1 = prob_sd(jday, daystartsd, dayendsd, probsd)\n                         if np.random.choice(2,1, p=[prob, pm1]) == 0:\n                             people[i].changecolour(\"red\")\n                             ninfected += 1\n                             infectday += 1\n                         \n                     if people[i].pep == \"nopep\" and people[i].sd == \"nosd\" and np.random.choice(2,1, p=[nppensd, nppensd1]) == 0:\n                         people[i].changecolour(\"red\")\n                         ninfected += 1\n                         infectday += 1\n\n\n                    \n                 if people[j].colour == \"green\" and people[i].colour == \"red\":\n                     if people[j].pep == \"pep\" and people[j].sd ==\"sd\":\n                         prob, pm1 = prob_ppesd(jday,daystartppe, dayendppe, probppe, daystartsd, dayendsd, probsd)\n                         if np.random.choice(2,1, p=[prob, pm1]) == 0:\n                             people[j].changecolour(\"red\")\n                             ninfected += 1\n                             infectday += 1\n                         \n                     if people[j].pep == \"pep\" and people[j].sd ==\"nosd\":\n                         prob, pm1 = prob_ppe(jday, daystartppe, dayendppe, probppe)\n                         if np.random.choice(2,1, p=[prob, pm1]) == 0:\n                             people[j].changecolour(\"red\")\n                             ninfected += 1\n                             infectday += 1\n    \n                         \n                     if people[j].pep == \"nopep\" and people[j].sd == \"sd\":\n                         prob, pm1 = prob_sd(jday, daystartsd, dayendsd, probsd)\n                         if np.random.choice(2,1, p=[prob, pm1]) == 0:\n                             people[j].changecolour(\"red\")\n                             ninfected += 1\n                             infectday += 1\n                         \n                     if people[j].pep == \"nopep\" and people[j].sd ==\"nosd\" and np.random.choice(2,1, p=[nppensd, nppensd1]) == 0:\n                         people[j].changecolour(\"red\")\n                         ninfected += 1\n                         infectday += 1\n\n\n#            y5[jday] = infectday\n# Calculation of Effective Rzero\n            \n            if jday == 0:\n                rzero = 1.0 * 10.0\n#                rzero =  10.0 * ninfected\/y1[jday-1]\n            if (y1[jday-1]-y2[jday-1]) == 0:\n                rzero = 0.0\n            else:   \n                rzero = 10.0 *((y1[jday]-y2[jday])\/(y1[jday-1]-y2[jday-1]))\n         \n    tk.update()\n    time.sleep(0.1)\n\n    stepperson += [jday]\n    pinfected += [ninfected]          \n              \n    for k in range (npeople):\n        if people[k].colour == \"blue\" and (jday - people[k].firstquaday) >= 14:\n            if people[k].age == 'old':\n                if np.random.choice(2,1, p=[proboreco1, proboreco]) == 0:\n                    people[k].changecolour(\"black\")\n                    people[k].moveicu(people[k].newpos)\n                    nicu +=1\n                    icuday +=1\n                else:\n                    people[k].changecolour(\"yellow\")\n                    people[k].movebac(people[k].newpos)\n                    nrec += 1\n                    recday +=1\n    \n            if people[k].age == 'young':\n                if np.random.choice(2,1, p=[probyreco1, probyreco]) == 0:\n                    people[k].changecolour(\"white\")\n                    people[k].moveicu(people[k].newpos)\n                    nicu += 1\n                    icuday += 1\n                else:\n                    people[k].changecolour(\"yellow\")\n                    people[k].movebac(people[k].newpos)\n                    nrec += 1\n                    recday += 1\n                    \n    nquacapa = 0\n    nicucapa = 0\n    death = 0\n    for k in range (npeople):\n        if people[k].colour == \"blue\":\n            nquacapa += 1\n            \n        if people[k].colour == \"white\" or people[k].colour == \"black\" or people[k].colour == \"brown\":\n            nicucapa +=1\n            prob = np.random.choice(2,1, p=[probdicu, probdicu1])\n            if prob == 0:\n                death += 1\n                people[k].changecolour(\"purple\")\n                people[k].xspeed = 0\n                people[k].yspeed = 0\n                    \n    dailydeath.append(death)\n    nicucapa = nicucapa - death           \n    y10.append(nquacapa)\n    y11.append(nicucapa)\n            \n    if livedaily == True: drawnow(make_fig)\n#    drawnow(make_fig2)\n    \n            \n#    z = contourplot(xgrid, ygrid, ngridx, ngridy, people, npeople, jday)\n#    print(z)\n    daylabel(jday)\n    jday +=1\n    if jday > 15:\n        startrun = convergence(jday, y5, people, npeople, nold, ncarehome, ninfected, nqua, nrec, nicu)\n\nfor i in range(jday):\n    y6[i] = y6[i]\/10\n    \n   \n","dd84a0af":"#%matplotlib inline\nPlot_results(x1,y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,reference)\n","7815e6e0":"#%matplotlib inline\ntotaldeath = Icu_deceased(jday, x1, dailydeath)\n","3a77675e":"tk.mainloop()    ","db56804a":"### Setting up the canvas for the display","1940124e":"### Defining people initially infected","f5b325e3":"### Example of Live Plot\n### See Readme file\n","d11ddd84":"### Test for Convergence and Partial Output (see Introduction)","5e656d11":"### Typical Output:\n\n### See readme file","3272a2cb":"### Example of Animated Display\n### See Readme file\n\n\n\n\n\n","c75aace7":"## End of code","f26f7781":"### Plotting of final results","bbc4eff0":"### Typical GUI (See Readme file)\n#### Default Values to be adjusted according to case study\n\n\nThe desired options can be selected and relevant data will be prompted for. The 'Start with random model, is the default to use random numbers through the code. If the 'reproduce model' is toggled, then the random numbers can be 'seeded' and the results reproduced.\nIf a sample less than 100 is specified, then a smaller graphical area will be used, with 'bigger' shapes.\n","0513f24c":"### Defining people practising Social Distancing (SD)","8727f887":"## Typical Output after convergence\n\n### See readme file","f7c6813e":"### toggles 'Live plot'","1e6d3fd1":"### Not used in this version (See Effective Rzero)","62dc5a16":"### Below  function is used for the Interactive 'Live' Plot\n","31e10cdd":"# This code simulates the propagation of Covid-19 through a graphical     representation of a sample population with random motion.\n\n# Please read User Guide at    https:\/\/github.com\/asuddhoo-arj\/Covid-19-Simulation\/blob\/master\/README.md\n\n## Disclaimer:\n### The model used in the code incorporates a number of key assumptions and probabilities which are to be carefully noted. While the purpose of the code is for illustration only, its output should not be used unless specific assistance is sought from experts in the field of epistemology. Any part of the code may be used provided reference is made to the present code.\n\n## The Model:\n\n### Given a random sample of people comprising young people, elderly and those in Care Home, the code uses random motion to simulate the progagation of the disease given an initial number of infected persons. Through close contact, the desease is spread throughout the sample. Detection of infected people can be evoked and those detected sent to Quarantine\/Hospital where they have to spend 14 days. Depending on the extent of detection, some infected people will remain in the sample. From hospital, those infected can either recover and go back to the main sample, or be sent to an Intensive Care Unit (ICU), where some may pass away. \n### In addition to testing, the model includes two other features:\n### First, the effect on the propagation, of a specified proportion of the sample wearing Personal Protection Equipmemt (PPE), such as face mask; and\n### Second, the effect of a specified proportion of the sample practising Social Distancing.\n### In each case, the period during which these measures can be specified. In this way easing of a lockdown can be modelled.\n### With these features, the efficiency of various measures can be illustrated.\n\n## Input:\n### The detailed required inputs are illustrated further below through a built-in GUI. Essentially, the sample size, the composision of the sample in terms of yound and old people, including those residing in Care Homes, the number of people initially infected, the extent of testing available, and the effectiveness of PPE and Social Distancing.\n\n## 'Live' Output:\n### The main output is an Animated Graphical Illustration of the random motion of then sample population which also dispalys the propagation of the disease to those who are not infected. The graphical display includes a main area for the randomised motion and also two other designated areas for the Quarantin\/Hospital, and ICU respectively. The model persons change colour depending on their status of health.\n### A 'live' plot shows the daily rate of infection as well as data pertaining to those who are moved to quarantine and the ICU.\n\n## Convergence:\n### Convergence is achieved when there are no new infection for 14 consecutive days and there are no infected persons in the sample. If these conditions are not met, the code should be terminated manually.\n\n## Final Output:\n### In the final output, graphical data over the specified number of days regarding the following can be obtained:\n###       (i) The cummulative number of infected persons\n###       (ii) The cummulative number of persons admitted to Hospital\n###       (iii) The cummulative number of people admitted to ICU\n###       (iv) The cummulative number of people who recovered\n###       (v) The daily number of infected cases\n###       (vi) The daily Effective R(zero) (see later)\n###       (vii)  the daily number of people who recovered \n###       (viii) The daily number of people admitted to Hospital and ICU\n\n###               and; The daily number of deceased and Total death.\n\n\n\n\n\n\n","e6858fc5":"### Evaluating the cummulative daily deceased and  total deaths.","592fd606":"### Function to create the GUI (based on PySimpleGUI)","9ec98af6":"### Defining the Class for the attributes and movement of each person","db25fb9d":"### The next cell deals with some geometric parameters of the graphic dispaly and the 'people' size","dcc3d77f":"### Defining people wearing Personal Protection equipment (PPE)","d46cf083":"### Parameters for a contour Plot ( Not used in this version)","ab9b2c9d":"### Setting probabilities for Testing, PPE and Social Distancing including combination of last two","394b0780":"### Setting Age of people","31293425":"### Initialising main parameters and start running 'day zero'"}}