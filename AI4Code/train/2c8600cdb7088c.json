{"cell_type":{"97528ba1":"code","46de5d22":"code","db0d4699":"code","b25bcd77":"code","bddd6efb":"code","c6c549db":"code","ee4bce0d":"code","438c0699":"code","612ade1d":"code","b21de851":"code","b6ce29e3":"code","f1fd5c27":"markdown","ce617b6e":"markdown","bdc9e791":"markdown","9d408384":"markdown","21ea02c5":"markdown","a0bdd0b3":"markdown","8e9436ac":"markdown","4b670f7c":"markdown","09e0fe6a":"markdown","1fc607fb":"markdown"},"source":{"97528ba1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46de5d22":"import seaborn as sns\nimport plotly.figure_factory as ff\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport matplotlib.pyplot as plt","db0d4699":"df=pd.read_csv('..\/input\/amazon-top-rated-smartphones-accessories-2021\/Amazon Top Rated Smartphones  Accessories 2021   - amazon_top_rated_smartphones.csv')","b25bcd77":"df.head()","bddd6efb":"df.isnull().sum()","c6c549db":"sns.heatmap(df.isnull())","ee4bce0d":"df.describe()","438c0699":"names = df['Smartphone']\nnames=names.str.lower()\nnames.head()\nfrom collections import Counter\nlis = []\nfor i in names:\n    for j in i.split():\n        lis.append(j)\n# Calculating frequency of all words\nfreq = Counter(lis)\n     \nmost_occur = freq.most_common(100)\nprint(most_occur)","612ade1d":"top_companies=['apple','samsung','nillkin','redmi','vivo','oppo','mi','realme','lava','oneplus']\nno_of_models=[]\nfor i in top_companies:\n    no_of_models.append(freq[i])\n\n\nfig = plt.figure(figsize = (15, 5))\nplt.bar(top_companies, no_of_models)\nplt.xlabel(\"Companies\")\nplt.ylabel(\"No. of models\")\nplt.title(\"Number of models of top companies\")\nplt.show()","b21de851":"r_apple=0\nn_apple=0\nr_samsung=0\nn_samsung=0\nr_nillkin=0\nn_nillkin=0\nr_redmi=0\nn_redmi=0\nr_vivo=0\nn_vivo=0\nr_oppo=0\nn_oppo=0\nr_mi=0\nn_mi=0\nr_realme=0\nn_realme=0\nr_lava=0\nn_lava=0\nr_oneplus=0\nn_oneplus=0\nc=0\nfor i in names:\n    for j in i.split():\n        #if float(df['Rating'][c][0:3])<4.2:\n           # print(i)\n        if(j=='apple'):\n            r_apple = r_apple +float(df['Rating'][c][0:3])\n            n_apple=n_apple+1\n            break\n        if(j=='samsung'):\n            r_samsung = r_samsung +float(df['Rating'][c][0:3])\n            n_samsung=n_samsung+1\n            break\n        if(j=='nillkin'):\n            r_nillkin = r_nillkin +float(df['Rating'][c][0:3])\n            n_nillkin=n_nillkin+1\n            break\n        if(j=='redmi'):\n            r_redmi = r_redmi +float(df['Rating'][c][0:3])\n            n_redmi=n_redmi+1\n            break\n        if(j=='vivo'):\n            r_vivo = r_vivo +float(df['Rating'][c][0:3])\n            n_vivo=n_vivo+1\n            break\n        if(j=='oppo'):\n            r_oppo = r_oppo +float(df['Rating'][c][0:3])\n            n_oppo=n_oppo+1\n            break\n        if(j=='mi'):\n            r_mi = r_mi +float(df['Rating'][c][0:3])\n            n_mi=n_mi+1\n            break\n        if(j=='realme'):\n            r_realme = r_realme +float(df['Rating'][c][0:3])\n            n_realme=n_realme+1\n            break\n        if(j=='lava'):\n            r_lava = r_lava +float(df['Rating'][c][0:3])\n            n_lava=n_lava+1\n            break\n        if(j=='oneplus'):\n            r_oneplus = r_oneplus +float(df['Rating'][c][0:3])\n            n_oneplus=n_oneplus+1\n            break\n        \n    c=c+1\navgr=[]\navgr_apple =r_apple\/n_apple\navgr.append(avgr_apple)\navgr_samsung = r_samsung\/n_samsung\navgr.append(avgr_samsung)\navgr_nillkin = r_nillkin\/n_nillkin\navgr.append(avgr_nillkin)\navgr_redmi = r_redmi\/n_redmi\navgr.append(avgr_redmi)\navgr_vivo = r_vivo\/n_vivo\navgr.append(avgr_vivo)\navgr_oppo = r_oppo\/n_oppo\navgr.append(avgr_oppo)\navgr_mi = r_mi\/n_mi\navgr.append(avgr_mi)\navgr_realme = r_realme\/n_realme\navgr.append(avgr_realme)\navgr_lava = r_lava\/n_lava\navgr.append(avgr_lava)\navgr_oneplus = r_oneplus\/n_oneplus\navgr.append(avgr_oneplus)\nfig = plt.figure(figsize = (15, 5))\nplt.bar(top_companies, avgr)\nplt.xlabel(\"Companies\")\nplt.ylabel(\"Average Ratings\")\nplt.title(\"Average rating of top companies\")\nplt.show()\n\n","b6ce29e3":"n_1=0\nn_2=0\nn_3=0\nn_4=0\nn_5=0\nn_6=0\nn_7=0\nn_8=0\nn_9=0\nn_10=0\nr_1=0\nr_2=0\nr_3=0\nr_4=0\nr_5=0\nr_6=0\nr_7=0\nr_8=0\nr_9=0\nr_10=0\nfor i in range(0,1368):\n    if df['Offer price'][i] is not 'nan':\n        df['Offer price'][i]=str(df['Offer price'][i]).replace(',','')\n        df['Offer price'][i]=str(df['Offer price'][i]).replace('\u20b9','')\n        df['Offer price'][i]=float(df['Offer price'][i])\n        if 0<df['Offer price'][i] and df['Offer price'][i]<10000:\n            n_1=n_1+1\n            r_1=r_1+float(df['Rating'][i][0:3])\n        if 10000<df['Offer price'][i] and df['Offer price'][i]<20000:\n            n_2=n_2+1\n            r_2=r_2+float(df['Rating'][i][0:3])\n        if 20000<df['Offer price'][i] and df['Offer price'][i]<30000:\n            n_3=n_3+1\n            r_3=r_3+float(df['Rating'][i][0:3])\n        if 30000<df['Offer price'][i] and df['Offer price'][i]<40000:\n            n_4=n_4+1\n            r_4=r_4+float(df['Rating'][i][0:3])\n        if 40000<df['Offer price'][i] and df['Offer price'][i]<50000:\n            n_5=n_5+1\n            r_5=r_5+float(df['Rating'][i][0:3])\n        if 50000<df['Offer price'][i] and df['Offer price'][i]<60000:\n            n_6=n_6+1\n            r_6=r_6+float(df['Rating'][i][0:3])\n        if 60000<df['Offer price'][i] and df['Offer price'][i]<70000:\n            n_7=n_7+1\n            r_7=r_7+float(df['Rating'][i][0:3])\n        if 70000<df['Offer price'][i] and df['Offer price'][i]<80000:\n            n_8=n_8+1\n            r_8=r_8+float(df['Rating'][i][0:3])\n        if 80000<df['Offer price'][i] and df['Offer price'][i]<90000:\n            n_9=n_9+1\n            r_9=r_9+float(df['Rating'][i][0:3])\n        if 90000<df['Offer price'][i] and df['Offer price'][i]<100000:\n            n_10=n_10+1\n            r_10=r_10+float(df['Rating'][i][0:3])\n                \nl=[r_1\/n_1,r_2\/n_2,r_3\/n_3,r_4\/n_4,r_5\/n_5,r_6\/n_6,r_7\/n_7,r_8\/n_8,r_9\/n_9,r_10\/n_10]\nfig = plt.figure(figsize = (15, 5))\nplt.bar(['0-10000','10000-20000','20000-30000','30000-40000','40000-50000','50000-60000','60000-70000','70000-80000','80000-90000','90000-100000'],l)\nplt.xlabel(\"Range of Prices in rupees\")\nplt.ylabel('Average rating for the range')\nplt.title(\"Averagee rating according to price range\")\nplt.show()\n","f1fd5c27":"# FINDING TOP 10 COMAPNIES ACCORDING TO NUMBER OF MODELS","ce617b6e":"# CALCULATING AVERAGE RATING PER MODEL OF EACH COMAPANY","bdc9e791":"**HERE IT IS CLEAR THAT PRICE RANGE 90,000-1,00,000 HAS HIGHEST AVERAGE RATING AND PRICE RANGE 10,000-20,000 IS HAVING LOWEST**","9d408384":"**CHECKING FOR NULL VALUES**","21ea02c5":"**FROM ABOVE LIST OF MOST OCCUCRING WORDS WE CAN GET ROUGH IDEA OF THE BRANDS THAT ARE IN THE TOP 10:**\n*  apple\n* samsung\n* nillkin\n* redmi\n* vivo\n* oppo\n* mi\n* realme\n* lava\n* oneplus","a0bdd0b3":"**ANOTHER THING TO NOTE HERE IS AS PRICE IS INCREASED AVERAGE RATING IS SLIGHTLY INCREASING**","8e9436ac":"**HERE WE CAN SEE THAT AVERAGE RATING PER MODEL IS HIGHEST FOR NILLKIN AND IT IS LOWEST FOR SAMSUNG**","4b670f7c":"**COMMENT FOR ANY SUGGESTION AND\nUPVOTE IF YOU LIKE IT!**","09e0fe6a":"**IMPORTING DATASET**","1fc607fb":"# FINDING PRICE RANGE HAVING HIGHEST NUMBER OF GOOD RATING"}}