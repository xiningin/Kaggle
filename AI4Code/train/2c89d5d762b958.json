{"cell_type":{"ddc11090":"code","ce16f8fc":"code","b9200e7e":"code","d0dde295":"code","2e7398d9":"code","7e732c02":"code","1ae84096":"code","72826360":"code","70944b76":"code","39902c2b":"code","ad9c6a36":"code","bc0bd156":"code","4aacb0d8":"code","d1813b7e":"code","b2765009":"code","25ce291a":"code","86afdd6b":"code","85b777c3":"code","5576f2ff":"code","5bd17022":"code","859177aa":"code","144627dd":"code","498606b0":"code","379f0ec0":"code","59768410":"code","d424241a":"code","97186f06":"code","e162188c":"code","6fb03ad7":"code","7840a054":"code","dc3d0d8d":"code","4fb5320c":"markdown","2a9c5fb6":"markdown","1a7c616d":"markdown","c6b4db88":"markdown","16258ccd":"markdown","a159ef46":"markdown","e49a6b72":"markdown"},"source":{"ddc11090":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm_notebook as tqdm\nfrom sklearn.externals import joblib\nimport seaborn as sns","ce16f8fc":"X = pd.read_csv('..\/input\/application_train.csv', nrows=None)\nX.head()","b9200e7e":"X['CODE_GENDER'].unique()","d0dde295":"X.loc[X['DAYS_EMPLOYED'] > 0]['DAYS_EMPLOYED'].unique()","2e7398d9":"sum(X['ORGANIZATION_TYPE'] == 'XNA')","7e732c02":"X['CODE_GENDER'].value_counts()","1ae84096":"X['CODE_GENDER'].replace('XNA',np.nan, inplace=True)\nX['CODE_GENDER'].value_counts()","72826360":"X['annuity_income_percentage'] = X['AMT_ANNUITY'] \/ X['AMT_INCOME_TOTAL']\nX['car_to_birth_ratio'] = X['OWN_CAR_AGE'] \/ X['DAYS_BIRTH']\nX['car_to_employ_ratio'] = X['OWN_CAR_AGE'] \/ X['DAYS_EMPLOYED']\nX['children_ratio'] = X['CNT_CHILDREN'] \/ X['CNT_FAM_MEMBERS']\nX['credit_to_annuity_ratio'] = X['AMT_CREDIT'] \/ X['AMT_ANNUITY']\nX['credit_to_goods_ratio'] = X['AMT_CREDIT'] \/ X['AMT_GOODS_PRICE']\nX['credit_to_income_ratio'] = X['AMT_CREDIT'] \/ X['AMT_INCOME_TOTAL']\nX['days_employed_percentage'] = X['DAYS_EMPLOYED'] \/ X['DAYS_BIRTH']\nX['income_credit_percentage'] = X['AMT_INCOME_TOTAL'] \/ X['AMT_CREDIT']\nX['income_per_child'] = X['AMT_INCOME_TOTAL'] \/ (1 + X['CNT_CHILDREN'])\nX['income_per_person'] = X['AMT_INCOME_TOTAL'] \/ X['CNT_FAM_MEMBERS']\nX['payment_rate'] = X['AMT_ANNUITY'] \/ X['AMT_CREDIT']\nX['phone_to_birth_ratio'] = X['DAYS_LAST_PHONE_CHANGE'] \/ X['DAYS_BIRTH']\nX['phone_to_employ_ratio'] = X['DAYS_LAST_PHONE_CHANGE'] \/ X['DAYS_EMPLOYED']","70944b76":"# External sources\nX['external_sources_weighted'] = X.EXT_SOURCE_1 * 2 + X.EXT_SOURCE_2 * 3 + X.EXT_SOURCE_3 * 4\nfor function_name in ['min', 'max', 'sum', 'mean', 'nanmedian']:\n    X['external_sources_{}'.format(function_name)] = eval('np.{}'.format(function_name))(\n        X[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']], axis=1)","39902c2b":"engineered_numerical_columns = ['annuity_income_percentage',\n                                'car_to_birth_ratio',\n                                'car_to_employ_ratio',\n                                'children_ratio',\n                                'credit_to_annuity_ratio',\n                                'credit_to_goods_ratio',\n                                'credit_to_income_ratio',\n                                'days_employed_percentage',\n                                'income_credit_percentage',\n                                'income_per_child',\n                                'income_per_person',\n                                'payment_rate',\n                                'phone_to_birth_ratio',\n                                'phone_to_employ_ratio',\n                                'external_sources_weighted',\n                                'external_sources_min',\n                                'external_sources_max',\n                                'external_sources_sum',\n                                'external_sources_mean',\n                                'external_sources_nanmedian']","ad9c6a36":"X_eng = X[engineered_numerical_columns + ['TARGET']]\nX_eng_corr = abs(X_eng.corr())","bc0bd156":"X_eng_corr.sort_values('TARGET', ascending=False)['TARGET']","4aacb0d8":"sns.heatmap(X_eng_corr, \n            xticklabels=X_eng_corr.columns,\n            yticklabels=X_eng_corr.columns)","d1813b7e":"AGGREGATION_RECIPIES = [\n    (['CODE_GENDER', 'NAME_EDUCATION_TYPE'], [('AMT_ANNUITY', 'max'),\n                                              ('AMT_CREDIT', 'max'),\n                                              ('EXT_SOURCE_1', 'mean'),\n                                              ('EXT_SOURCE_2', 'mean'),\n                                              ('OWN_CAR_AGE', 'max'),\n                                              ('OWN_CAR_AGE', 'sum')]),\n    (['CODE_GENDER', 'ORGANIZATION_TYPE'], [('AMT_ANNUITY', 'mean'),\n                                            ('AMT_INCOME_TOTAL', 'mean'),\n                                            ('DAYS_REGISTRATION', 'mean'),\n                                            ('EXT_SOURCE_1', 'mean')]),\n    (['CODE_GENDER', 'REG_CITY_NOT_WORK_CITY'], [('AMT_ANNUITY', 'mean'),\n                                                 ('CNT_CHILDREN', 'mean'),\n                                                 ('DAYS_ID_PUBLISH', 'mean')]),\n    (['CODE_GENDER', 'NAME_EDUCATION_TYPE', 'OCCUPATION_TYPE', 'REG_CITY_NOT_WORK_CITY'], [('EXT_SOURCE_1', 'mean'),\n                                                                                           ('EXT_SOURCE_2', 'mean')]),\n    (['NAME_EDUCATION_TYPE', 'OCCUPATION_TYPE'], [('AMT_CREDIT', 'mean'),\n                                                  ('AMT_REQ_CREDIT_BUREAU_YEAR', 'mean'),\n                                                  ('APARTMENTS_AVG', 'mean'),\n                                                  ('BASEMENTAREA_AVG', 'mean'),\n                                                  ('EXT_SOURCE_1', 'mean'),\n                                                  ('EXT_SOURCE_2', 'mean'),\n                                                  ('EXT_SOURCE_3', 'mean'),\n                                                  ('NONLIVINGAREA_AVG', 'mean'),\n                                                  ('OWN_CAR_AGE', 'mean'),\n                                                  ('YEARS_BUILD_AVG', 'mean')]),\n    (['NAME_EDUCATION_TYPE', 'OCCUPATION_TYPE', 'REG_CITY_NOT_WORK_CITY'], [('ELEVATORS_AVG', 'mean'),\n                                                                            ('EXT_SOURCE_1', 'mean')]),\n    (['OCCUPATION_TYPE'], [('AMT_ANNUITY', 'mean'),\n                           ('CNT_CHILDREN', 'mean'),\n                           ('CNT_FAM_MEMBERS', 'mean'),\n                           ('DAYS_BIRTH', 'mean'),\n                           ('DAYS_EMPLOYED', 'mean'),\n                           ('DAYS_ID_PUBLISH', 'mean'),\n                           ('DAYS_REGISTRATION', 'mean'),\n                           ('EXT_SOURCE_1', 'mean'),\n                           ('EXT_SOURCE_2', 'mean'),\n                           ('EXT_SOURCE_3', 'mean')]),\n]","b2765009":"groupby_aggregate_names = []\nfor groupby_cols, specs in tqdm(AGGREGATION_RECIPIES):\n    group_object = X.groupby(groupby_cols)\n    for select, agg in tqdm(specs):\n        groupby_aggregate_name = '{}_{}_{}'.format('_'.join(groupby_cols), agg, select)\n        X = X.merge(group_object[select]\n                              .agg(agg)\n                              .reset_index()\n                              .rename(index=str,\n                                      columns={select: groupby_aggregate_name})\n                              [groupby_cols + [groupby_aggregate_name]],\n                              on=groupby_cols,\n                              how='left')\n        groupby_aggregate_names.append(groupby_aggregate_name)","25ce291a":"X_agg = X[groupby_aggregate_names + ['TARGET']]\nX_agg_corr = abs(X_agg.corr())","86afdd6b":"X_agg_corr.sort_values('TARGET', ascending=False)['TARGET']","85b777c3":"sns.heatmap(X_agg_corr, \n            xticklabels=X_agg_corr.columns,\n            yticklabels=X_agg_corr.columns)","5576f2ff":"diff_feature_names = []\nfor groupby_cols, specs in tqdm(AGGREGATION_RECIPIES):\n    for select, agg in tqdm(specs):\n        if agg in ['mean','median','max','min']:\n            groupby_aggregate_name = '{}_{}_{}'.format('_'.join(groupby_cols), agg, select)\n            diff_name = '{}_diff'.format(groupby_aggregate_name)\n            abs_diff_name = '{}_abs_diff'.format(groupby_aggregate_name)\n\n            X[diff_name] = X[select] - X[groupby_aggregate_name] \n            X[abs_diff_name] = np.abs(X[select] - X[groupby_aggregate_name]) \n\n            diff_feature_names.append(diff_name)\n            diff_feature_names.append(abs_diff_name)","5bd17022":"X_diff = X[diff_feature_names + ['TARGET']]\nX_diff_corr = abs(X_diff.corr())\nX_diff_corr.sort_values('TARGET', ascending=False)['TARGET']","859177aa":"X['DAYS_EMPLOYED'].replace(365243,np.nan, inplace=True)","144627dd":"X_clean = X[~pd.isnull(X['DAYS_EMPLOYED'])]","498606b0":"sns.distplot(X_clean['DAYS_EMPLOYED'])","379f0ec0":"X['DAYS_EMPLOYED'].describe()","59768410":"X['long_employment'] = (X['DAYS_EMPLOYED'] > -2000).astype(int)\nfeature_names = ['long_employment']","d424241a":"X_employment = X[feature_names +['DAYS_EMPLOYED'] + ['TARGET']]\nX_employment_corr = abs(X_employment.corr())\nX_employment_corr.sort_values('TARGET', ascending=False)['TARGET']","97186f06":"sns.heatmap(X_employment_corr, \n            xticklabels=X_employment_corr.columns,\n            yticklabels=X_employment_corr.columns)","e162188c":"sns.distplot(X['DAYS_BIRTH'])","6fb03ad7":"X['retirement_age'] = (X['DAYS_BIRTH'] > -14000).astype(int)\nfeature_names = ['DAYS_BIRTH','retirement_age']","7840a054":"X_age = X[feature_names + ['TARGET']]\nX_age_corr = abs(X_age.corr())\nX_age_corr.sort_values('TARGET', ascending=False)['TARGET']","dc3d0d8d":"sns.heatmap(X_age_corr, \n            xticklabels=X_age_corr.columns,\n            yticklabels=X_age_corr.columns)","4fb5320c":"[Martin Kotek (Competition Host): \"Value 365243 denotes infinity in DAYS variables in the datasets, therefore you can consider them NA values. Also XNA\/XAP denote NA values.\"](https:\/\/www.kaggle.com\/c\/home-credit-default-risk\/discussion\/57247)","2a9c5fb6":"### Aggregation features","1a7c616d":"* age binns","c6b4db88":"## Solution 4 \n### Hand crafted features\n* diff features","16258ccd":"# Preprocessing\n## Solution 3","a159ef46":"# Feature Engineering\n## Solution 3\n### Hand crafted features","e49a6b72":"* unemployed"}}