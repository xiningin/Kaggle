{"cell_type":{"ec57b639":"code","d72d356a":"code","1504e364":"code","5b6e5307":"code","c18b59bc":"code","548a05c9":"code","9b5c77b7":"code","a0ccd73c":"code","8622b982":"code","19a21a99":"code","92b32587":"code","38076437":"code","42368033":"code","8887d720":"code","d8fd9194":"code","93f43d2d":"code","d359b124":"code","41c79f6b":"code","16ed49b0":"code","adf46928":"code","fc4ebe65":"code","30d63565":"code","8488bef2":"code","eca1ecfb":"code","8f0fa6f1":"code","9f673992":"code","c8289454":"code","7b827c7d":"code","0b4b0ab4":"code","da1bad6f":"code","8cedc6ba":"code","b7bdcd49":"code","09981029":"code","6503276d":"code","3bfe2173":"code","1676d0e7":"code","dec6d30a":"code","2a809520":"code","4e15a9f5":"code","ac600983":"code","81f9733e":"code","c1c963e8":"code","28c1ca19":"code","eb7118aa":"code","5ebf1347":"code","e999e7e0":"code","164c87eb":"code","2002ba54":"code","7b281bb2":"code","327f3693":"code","a89d82b1":"code","cf442284":"code","1ef53e23":"code","c22b4c4c":"code","70b6802b":"code","a6e7865f":"code","896101ca":"code","ea23201f":"code","14cfbed9":"code","2803e239":"code","117628e6":"code","999089d2":"code","0a62566e":"code","0234fdef":"code","d0ff5e12":"code","b8c906dd":"code","eb57cde8":"code","6eb337fc":"code","41e8b036":"code","a736dfbd":"code","3dcff364":"code","1844cb45":"code","469dab18":"code","aff995f4":"code","b13c818f":"code","90fd0e64":"code","95885016":"code","212fad22":"code","79897ce6":"code","fd9f999d":"code","1cca7f34":"code","de6a1014":"code","7ebb1753":"code","76c336a4":"code","48bb9386":"code","9a8c1465":"code","5d7b1ae1":"code","6c52b4fb":"code","8366bfcf":"code","dd476d7c":"code","080b0784":"code","4501d900":"code","427a3ee3":"code","e43e94fc":"code","bf175e27":"code","bd03a362":"code","aab8537f":"code","5f924f1b":"code","b38b72a3":"code","1f84de40":"code","75f57c4a":"code","1efa6460":"code","a125c36b":"code","798a95ba":"code","630bd274":"code","8311684b":"code","883e3376":"code","37aed8d8":"markdown","c1d0d2ec":"markdown","5b71b5b0":"markdown","a798744d":"markdown","5e13e0de":"markdown","caf23272":"markdown","b06d4b13":"markdown","7ba823b8":"markdown","935b1fac":"markdown","0f8a11ee":"markdown","2a632016":"markdown","6a21e097":"markdown","5f26ff60":"markdown","7e509c78":"markdown","f3f2e194":"markdown","041786d3":"markdown","8a711ad1":"markdown","fd4b9798":"markdown","8d8d01ed":"markdown","3571c45f":"markdown","694a1749":"markdown"},"source":{"ec57b639":"%matplotlib inline\n!pip install pyforest\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\nfrom pyforest import *\n\nimport warnings\nwarnings.filterwarnings('ignore')","d72d356a":"from sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score \nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor, BaggingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import VotingRegressor\nfrom scipy import stats\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.cluster import KMeans\nfrom sklearn.utils import resample","1504e364":"df = pd.read_csv('..\/input\/concrete-data\/Concrete_Data.csv')","5b6e5307":"df.head()","c18b59bc":"df.shape","548a05c9":"df = df.rename(columns={\"Cement (component 1)(kg in a m^3 mixture)\":\"cement\",\n                        \"Blast Furnace Slag (component 2)(kg in a m^3 mixture)\":\"slag\",\n                        \"Fly Ash (component 3)(kg in a m^3 mixture)\":\"ash\",\n                        \"Water  (component 4)(kg in a m^3 mixture)\":\"water\",\n                        \"Superplasticizer (component 5)(kg in a m^3 mixture)\":\"superplastic\",\n                        \"Coarse Aggregate  (component 6)(kg in a m^3 mixture)\":\"coarseagg\",\n                        \"Fine Aggregate (component 7)(kg in a m^3 mixture)\":\"fineagg\",\n                        \"Age (day)\":\"age\",\n                        \"Concrete compressive strength(MPa, megapascals) \":\"strength\"})","9b5c77b7":"df.head()","a0ccd73c":"df.info()","8622b982":"df.isnull().sum()","19a21a99":"df.describe()","92b32587":"from scipy import stats\n\n# Cement\nQ1 = df['cement'].quantile(q=0.25)\nQ3 = df['cement'].quantile(q=0.75)\nprint('1st quantile: ' , Q1 )\nprint('3rd quantile: ' , Q3 )\nprint('Interquantile range (IQR): ' , stats.iqr(df['cement']))","38076437":"L_outlier = Q1-1.5*(Q3-Q1)\nU_outlier = Q3+1.5*(Q3-Q1)\nprint('Lower outlier limit in cement: ', L_outlier)\nprint('Upper outlier limit in cement: ', U_outlier)","42368033":"print('Number of outlier in cement Upper: ',df[df['cement']>586.4375]['cement'].count())\nprint('Number of outlier in cement Lower: ',df[df['cement']<-44.0625]['cement'].count())","8887d720":"sns.boxplot(x='cement',data=df);","d8fd9194":"# Ash\nsns.distplot(df['ash']).set_title('Ash');","93f43d2d":"# Water\nW_Q1 = df['water'].quantile(q=0.25)\nW_Q3 = df['water'].quantile(q=0.75)\nprint('1st quantile: ' , W_Q1 )\nprint('3rd quantile: ' , W_Q3 )\nprint('Interquantile range (IQR): ' , stats.iqr(df['water']))","d359b124":"WL_outlier = W_Q1-1.5*(W_Q3-W_Q1)\nWU_outlier = W_Q3+1.5*(W_Q3-W_Q1)\nprint('Lower outlier limit in cement: ', WL_outlier)\nprint('Upper outlier limit in cement: ', WU_outlier)","41c79f6b":"print('Number of outlier in cement Upper: ',df[df['water']>232.65]['water'].count())\nprint('Number of outlier in cement Lower: ',df[df['water']<124.25]['water'].count())","16ed49b0":"sns.boxplot(x='water',data=df);","adf46928":"sns.distplot(df['water']).set_title('water');","fc4ebe65":"# Slag\nS_Q1 = df['slag'].quantile(q=0.25)\nS_Q3 = df['slag'].quantile(q=0.75)","30d63565":"LS_outliers = S_Q1-1.5*(S_Q3-S_Q1)\nUS_outliers = S_Q3+1.5*(S_Q3-S_Q1)\nprint('Lower outlier in slag', LS_outliers)\nprint('Upper outlier in slag', US_outliers)","8488bef2":"print('Number of outlier in cement Upper: ',df[df['slag']>357.375]['slag'].count())\nprint('Number of outlier in cement Lower: ',df[df['slag']<-214.425]['slag'].count())","eca1ecfb":"sns.boxplot(x='slag',data=df); ","8f0fa6f1":"# Age \nA_Q1 = df['age'].quantile(q=0.25)\nA_Q3 = df['age'].quantile(q=0.75)","9f673992":"LA_outliers = A_Q1-1.5*(A_Q3-A_Q1)\nUA_outliers = A_Q3+1.5*(A_Q3-A_Q1)\nprint('Lower outlier in age', LA_outliers)\nprint('Upper outlier in age', UA_outliers)","c8289454":"print('Number of outlier in age Upper: ',df[df['age']>129.5]['age'].count())\nprint('Number of outlier in age Lower: ',df[df['age']<-66.5]['age'].count())","7b827c7d":"sns.boxplot(x='age',data=df)","0b4b0ab4":"# Ash \nAs_Q1 = df['ash'].quantile(q=0.25)\nAs_Q3 = df['ash'].quantile(q=0.75)","da1bad6f":"LAs_outliers = As_Q1-1.5*(As_Q3-As_Q1)\nUAs_outliers = As_Q3+1.5*(As_Q3-As_Q1)\nprint('Lower outlier in ash', LAs_outliers)\nprint('Upper outlier in ash', UAs_outliers)","8cedc6ba":"print('Number of outlier in ash Upper: ',df[df['ash']>295.75]['ash'].count())\nprint('Number of outlier in ash Lower: ',df[df['ash']<-177.45]['ash'].count())","b7bdcd49":"sns.boxplot(x='ash',data=df);","09981029":"fig, ax2 = plt.subplots(3,3, figsize=(12,12))\nsns.distplot(df['cement'], ax=ax2[0][0])\nsns.distplot(df['slag'], ax=ax2[0][1])\nsns.distplot(df['ash'], ax=ax2[0][2])\nsns.distplot(df['water'], ax=ax2[1][0])\nsns.distplot(df['superplastic'], ax=ax2[1][1])\nsns.distplot(df['coarseagg'], ax=ax2[1][2])\nsns.distplot(df['fineagg'], ax=ax2[2][0])\nsns.distplot(df['age'], ax=ax2[2][1])\nsns.distplot(df['strength'], ax=ax2[2][2]);","6503276d":"sns.pairplot(df)","3bfe2173":"plt.figure(figsize=(10,10))\nsns.heatmap(df.corr(),square=True,annot=True,cmap='viridis');","1676d0e7":"df.boxplot(figsize=(10,10))","dec6d30a":"print('outlier in cement: ',df[((df.cement-df.cement.mean())\/df.cement.std()).abs()>3]['cement'].count())\nprint('outlier in slag : ',df[((df.slag-df.slag.mean())\/df.slag.std()).abs()>3]['slag'].count())\nprint('outlier in ash : ',df[((df.ash-df.ash.mean())\/df.ash.std()).abs()>3]['ash'].count())\nprint('outlier in water: ',df[((df.water-df.water.mean())\/df.water.std()).abs()>3]['water'].count())\nprint('outlier in superplastic: ',df[((df.superplastic-df.superplastic.mean())\/df.superplastic.std()).abs()>3]['superplastic'].count())\nprint('outlier in  coarseagg: ',df[((df.coarseagg-df.coarseagg.mean())\/df.coarseagg.std()).abs()>3]['coarseagg'].count())\nprint('outlier in fineagg: ',df[((df.fineagg-df.fineagg.mean())\/df.fineagg.std()).abs()>3]['fineagg'].count())\nprint('outlier in age: ',df[((df.age-df.age.mean())\/df.age.std()).abs()>3]['age'].count())","2a809520":"for cols in df.columns[:-1]:\n    Q1 = df[cols].quantile(0.25)\n    Q3 = df[cols].quantile(0.75)\n    iqr = Q3-Q1\n    \n    low = Q1-1.5*iqr\n    high = Q3+1.5*iqr\n    df.loc[(df[cols]<low) | (df[cols]>high), cols] = df[cols].median()","4e15a9f5":"df.boxplot(figsize=(10,10))","ac600983":"df.head()","81f9733e":"X = df.drop('strength',axis=1)\ny = df['strength']","c1c963e8":"from scipy.stats import zscore\n\nXscaled = X.apply(zscore)\nXscaled_df = pd.DataFrame(Xscaled,columns=df.columns)","28c1ca19":"X_train,X_test,y_train,y_test = train_test_split(Xscaled,y, test_size=0.3,random_state=1)","eb7118aa":"r_model = RandomForestRegressor()\nr_model.fit(X_train,y_train)","5ebf1347":"y_pred = r_model.predict(X_test)","e999e7e0":"r_model.score(X_train,y_train)","164c87eb":"r_model.score(X_test,y_test)","2002ba54":"acc_r = metrics.r2_score(y_test,y_pred)\nacc_r","7b281bb2":"metrics.mean_squared_error(y_test,y_pred)","327f3693":"result_1 = pd.DataFrame({'Algorithm':['Random Forest'],'accuracy':acc_r},index={'1'})\nresults = result_1[['Algorithm','accuracy']]                         \nresults                         ","a89d82b1":"k=20\n\nkfold = KFold(n_splits=k,random_state=70)\nK_results = cross_val_score(r_model,X,y,cv=kfold)\naccuracy = np.mean(abs(K_results))\naccuracy","cf442284":"K_results","1ef53e23":"random_re = pd.DataFrame({'Algorithm':['Random Forest K_fold'],'accuracy':accuracy},index={'2'})\nresults = pd.concat([results,random_re])\nresults = results[['Algorithm','accuracy']]\nresults","c22b4c4c":"g_model = GradientBoostingRegressor()\ng_model.fit(X_train,y_train)","70b6802b":"gy_pred = g_model.predict(X_test)","a6e7865f":"g_model.score(X_train,y_train)","896101ca":"acc_g = metrics.r2_score(y_test,gy_pred)\nacc_g","ea23201f":"g_model.score(X_test,y_test)","14cfbed9":"metrics.mean_squared_error(y_test,gy_pred)","2803e239":"gradient_re = pd.DataFrame({'Algorithm':['GradientBoostingRegressor'],'accuracy':acc_g},index={'3'})\nresults = pd.concat([results,gradient_re])\nresults = results[['Algorithm','accuracy']]\nresults","117628e6":"k=20\n\nkfold = KFold(n_splits=k,random_state=70)\nG_results = cross_val_score(g_model,X,y,cv=kfold)\ng_accuracy = np.mean(abs(G_results))\ng_accuracy","999089d2":"gradient_k = pd.DataFrame({'Algorithm':['GradientBoostingRegressor KFold'],'accuracy':g_accuracy},index={'4'})\nresults = pd.concat([results,gradient_k])\nresults = results[['Algorithm','accuracy']]\nresults","0a62566e":"ada_model = AdaBoostRegressor()\nada_model.fit(X_train,y_train)","0234fdef":"aday_pred = g_model.predict(X_test)","d0ff5e12":"ada_model.score(X_train,y_train)","b8c906dd":"acc_ada = metrics.r2_score(y_test,aday_pred)\nacc_ada","eb57cde8":"ada_model.score(X_test,y_test)","6eb337fc":"metrics.mean_squared_error(y_test,aday_pred)","41e8b036":"ada_re = pd.DataFrame({'Algorithm':['AdaBoostRegressor'],'accuracy':acc_ada},index={'5'})\nresults = pd.concat([results,ada_re])\nresults = results[['Algorithm','accuracy']]\nresults","a736dfbd":"k=20\n\nkfold = KFold(n_splits=k,random_state=70)\nada_results = cross_val_score(ada_model,X,y,cv=kfold)\nada_accuracy = np.mean(abs(ada_results))\nada_accuracy","3dcff364":"ada_k = pd.DataFrame({'Algorithm':['Ada BoostingRegressor KFold'],'accuracy':ada_accuracy},index={'6'})\nresults = pd.concat([results,ada_k])\nresults = results[['Algorithm','accuracy']]\nresults","1844cb45":"diff_k=[]\nfor i in range(1,45):\n    knn = KNeighborsRegressor(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i=knn.predict(X_test)\n    diff_k.append(np.mean(pred_i!=y_test))","469dab18":"plt.figure(figsize=(10,5))\nplt.plot(range(1,45),diff_k,color='blue',linestyle='dashed',marker='o',markerfacecolor='red',markersize=8)","aff995f4":"k_model = KNeighborsRegressor(n_neighbors=3)\nk_model.fit(X_train,y_train)","b13c818f":"ky_pred = k_model.predict(X_test)","90fd0e64":"k_model.score(X_train,y_train)","95885016":"acc_k = metrics.r2_score(y_test,ky_pred)\nacc_k","212fad22":"k_model.score(X_test,y_test)","79897ce6":"metrics.mean_squared_error(y_test,ky_pred)","fd9f999d":"k_re = pd.DataFrame({'Algorithm':['KNeighborsRegressor'],'accuracy':acc_k},index={'7'})\nresults = pd.concat([results,k_re])\nresults = results[['Algorithm','accuracy']]\nresults","1cca7f34":"k=20\n\nkfold = KFold(n_splits=k,random_state=70)\nknn_results = cross_val_score(k_model,X,y,cv=kfold)\nknn_accuracy = np.mean(abs(knn_results))\nknn_accuracy","de6a1014":"knn_k = pd.DataFrame({'Algorithm':['KNN KFold'],'accuracy':knn_accuracy},index={'8'})\nresults = pd.concat([results,knn_k])\nresults = results[['Algorithm','accuracy']]\nresults","7ebb1753":"b_model = BaggingRegressor()\nb_model.fit(X_train,y_train)","76c336a4":"by_pred = b_model.predict(X_test)","48bb9386":"b_model.score(X_train,y_train)","9a8c1465":"acc_b = metrics.r2_score(y_test,by_pred)\nacc_b","5d7b1ae1":"b_model.score(X_test,y_test)","6c52b4fb":"metrics.mean_squared_error(y_test,by_pred)","8366bfcf":"b_re = pd.DataFrame({'Algorithm':['BaggingRegressor'],'accuracy':acc_b},index={'9'})\nresults = pd.concat([results,b_re])\nresults = results[['Algorithm','accuracy']]\nresults","dd476d7c":"k=20\n\nkfold = KFold(n_splits=k,random_state=70)\nb_results = cross_val_score(b_model,X,y,cv=kfold)\nb_accuracy = np.mean(abs(b_results))\nb_accuracy","080b0784":"b_k = pd.DataFrame({'Algorithm':['BaggingRegressor Fold'],'accuracy':b_accuracy},index={'10'})\nresults = pd.concat([results,b_k])\nresults = results[['Algorithm','accuracy']]\nresults","4501d900":"s_model = SVR(kernel='linear')\ns_model.fit(X_train,y_train)","427a3ee3":"sy_pred = s_model.predict(X_test)","e43e94fc":"s_model.score(X_train,y_train)","bf175e27":"acc_s = metrics.r2_score(y_test,sy_pred)\nacc_s","bd03a362":"s_model.score(X_test,y_test)","aab8537f":"metrics.mean_squared_error(y_test,sy_pred)","5f924f1b":"s_re = pd.DataFrame({'Algorithm':['SVRegressor'],'accuracy':acc_s},index={'11'})\nresults = pd.concat([results,s_re])\nresults = results[['Algorithm','accuracy']]\nresults","b38b72a3":"k=20\n\nkfold = KFold(n_splits=k,random_state=70)\ns_results = cross_val_score(s_model,X,y,cv=kfold)\ns_accuracy = np.mean(abs(s_results))\ns_accuracy","1f84de40":"s_k = pd.DataFrame({'Algorithm':['SVR Fold'],'accuracy':s_accuracy},index={'12'})\nresults = pd.concat([results,s_k])\nresults = results[['Algorithm','accuracy']]\nresults","75f57c4a":"import xgboost as xgb\nfrom xgboost.sklearn import XGBRegressor\nxgr = XGBRegressor()\n\nxgr.fit(X_train,y_train);","1efa6460":"xy_pred = xgr.predict(X_test)","a125c36b":"xgr.score(X_train,y_train)","798a95ba":"acc_x = metrics.r2_score(y_test,xy_pred)\nacc_x","630bd274":"xgr.score(X_test,y_test)","8311684b":"metrics.mean_squared_error(y_test,xy_pred)","883e3376":"x_re = pd.DataFrame({'Algorithm':['XGB Regressor'],'accuracy':acc_x},index={'13'})\nresults = pd.concat([results,x_re])\nresults = results[['Algorithm','accuracy']]\nresults","37aed8d8":"## Loading dataset from UCI","c1d0d2ec":"## Exploratry Data Analysis","5b71b5b0":"## Buildning Different Models","a798744d":"### 8) KNN Regression KFold Validation","5e13e0de":"### 10) Bagging Regressor KFold Validation","caf23272":"# Concrete Compressive Testing","b06d4b13":"### 6) Ada Boosting Regressor KFold cross validation","7ba823b8":"Here, XGBoost Regressor gives maximum 90% Accuracy.","935b1fac":"### 12) Support Vector Regressor KFold Validation","0f8a11ee":"## Import Necessary Library","2a632016":"### 13) XGBoost Regressor","6a21e097":"### 2) Random Forest Regressor KFold cross validation","5f26ff60":"### 1) Random Forest Regressor","7e509c78":"### 7) KNN Regression","f3f2e194":"The Compressive Strength of Concrete determines the quality of Concrete. This is generally determined by a standard crushing test on a concrete cylinder. This requires engineers to build small concrete cylinders with different combinations of raw materials and test these cylinders for strength variations with a change in each raw material. The recommended wait time for testing the cylinder is 28 days to ensure correct results. This consumes a lot of time and requires a lot of labour to prepare different prototypes and test them. Also, this method is prone to human error and one small mistake can cause the wait time to drastically increase.\n\nOne way of reducing the wait time and reducing the number of combinations to try is to make use of digital simulations, where we can provide information to the computer about what we know and the computer tries different combinations to predict the compressive strength. This way we can reduce the number of combinations we can try physically and reduce the amount of time for experimentation. But, to design such software we have to know the relations between all the raw materials and how one material affects the strength. It is possible to derive mathematical equations and run simulations based on these equations, but we cannot expect the relations to be same in real-world. Also, these tests have been performed for many numbers of times now and we have enough real-world data that can be used for predictive modelling.","041786d3":"### 9) Bagging Regressor","8a711ad1":"### 3) Gradient Boosting Regressor","fd4b9798":"### 5) Ada Boosting Regressor","8d8d01ed":"### 4) Gradient Boosting Regressor KFold cross validation","3571c45f":"### 11) Support Vector Regressor","694a1749":"## Feature Engineering & Model Building"}}