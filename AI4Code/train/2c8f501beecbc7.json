{"cell_type":{"136c54b1":"code","5b2d9378":"code","d92b3bef":"code","ed9ceed9":"code","4d65aaba":"code","5955fd94":"code","1caae7e3":"code","de8e276c":"code","dd3ecf07":"code","49a89c92":"code","6e06e965":"code","461f57ec":"markdown","eacfd24e":"markdown","6709c59a":"markdown","688a38e1":"markdown","e47d3756":"markdown","27e8727e":"markdown","609f3d27":"markdown","731a201b":"markdown","347d116d":"markdown","623c00c9":"markdown","144e9836":"markdown","e5eb732b":"markdown","9fee590f":"markdown","cbe7439a":"markdown"},"source":{"136c54b1":"import numpy as np\nimport requests\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.patches as mpatches\n\n\nfrom statistics import mean, median\nfrom matplotlib import pyplot as plt\nfrom IPython.display import display, Markdown","5b2d9378":"class WarzoneStats:\n    def __init__(self, user, platform=\"battle\"):\n        self.base_url = \"https:\/\/app.sbmmwarzone.com\/\"\n        self.uname = self.extract_name(user)\n        if platform == \"battle\":\n            user = user.replace('#', '%23')\n        self.matches_url = f\"{self.base_url}player\/match?username={user}&platform={platform}\"\n        self.match_stats_url = f\"{self.base_url}?matchId=\"\n        self.session = requests.Session()\n        self.user_recent_stats = self.session.get(self.matches_url).json()\n        self.num_boosters = 0\n\n    @staticmethod\n    def extract_name(name, platform=\"battle\"):\n        if platform == \"battle\":\n            return name.split('#')[0]\n\n    def get_user_match_stats(self):\n        return {\n            param: [\n                match[param.lower()]\n                for match in self.user_recent_stats\n            ][::-1]\n            for param in [\"Id\", \"Kills\", \"Damage\"]\n        }\n\n    def get_match_ids(self):\n        return [\n            match[\"id\"]\n            for match in self.user_recent_stats\n        ][::-1]\n\n    def get_match_stats(self, match_id):\n        def compile_stats(player):\n            name = player[\"playerMatchStat\"][\"player\"][\"username\"]\n            stats = {\n                \"KD\": player[\"playerMatchStat\"][\"playerStats\"][\"kdRatio\"],\n                \"Lifetime KD\": player[\"playerStat\"][\"lifetime\"][\"mode\"][\"br\"][\"properties\"][\"kdRatio\"]\n            }\n            return (name, stats)\n        \n        url = f\"{self.match_stats_url}{match_id}\"\n        try:\n            match_stats = self.session.get(url).json()\n            stats_list = [\n                compile_stats(player)\n                for player in match_stats[\"data\"][\"players\"]\n            ]\n        except:\n            return None\n        data = dict(stats_list)\n        KDs = sorted([\n            stats[1][\"KD\"]\n            for stats in stats_list\n        ])\n        user_KD = [\n            stats[1][\"KD\"]\n            for stats in stats_list\n            if stats[0] == self.uname\n        ][0]\n        top_player = [\n            stats[0]\n            for stats in stats_list\n            if stats[1][\"KD\"] == max(KDs)\n        ][0]\n        KD_mean = mean(KDs)\n        KD_median = median(KDs)\n        return {\n            \"id\": match_id,\n            \"data\": data,\n            \"KDs\": KDs,\n            \"Your_KD\": user_KD,\n            \"Mean_KD\": KD_mean,\n            \"Median_KD\": KD_median,\n            \"Top_KD\": max(KDs),\n            \"Top_KD_Username\": top_player\n        }\n\n    def get_raw_stats(self, match_id):\n        url = f\"{self.match_stats_url}{match_id}\"\n        try:\n            match_stats = self.session.get(url).json()\n            players = match_stats[\"data\"][\"players\"]\n            raw_stats = [\n                {\n                    **player[\"playerMatchStat\"][\"playerStats\"],\n                    \"username\": player[\"playerMatchStat\"][\"player\"][\"username\"]\n                }\n                for player in players\n            ]\n            sorted_stats = sorted(raw_stats, key=lambda x: x[\"kdRatio\"], reverse=True)\n            return sorted_stats\n        except:\n            return None","d92b3bef":"warstats = WarzoneStats(\"Hyperclaw79#1758\")\nuser_match_stats = warstats.get_user_match_stats()\nkill_dmg_df = pd.DataFrame(data=user_match_stats, index=user_match_stats[\"Id\"], columns=[\"Kills\", \"Damage\"])\nkill_dmg_df.rename_axis(\"Lobby_ID\", inplace=True, axis='columns')\nkill_dmg_df","ed9ceed9":"sns.set_style(\"white\")\nparams = {\n    'axes.labelsize': 20,\n    'legend.fontsize': 14,\n    'xtick.labelsize': 20,\n    'ytick.labelsize': 20\n}\nplt.rcParams.update(params)\nfig, ax = plt.subplots(figsize=(15, 5))\n\nax.set_xlabel('Matches')\nax2 = ax.twinx()\nax.set_ylabel('Kills')\nax2.set_ylabel('Damage')\n\nkill_patch = mpatches.Patch(color='orangered', label='Kills')\ndmg_patch = mpatches.Patch(color='deepskyblue', label='Damage')\n\nkillplot = sns.barplot(\n    data=kill_dmg_df.reset_index(),\n    y=\"Kills\",\n    x=kill_dmg_df.reset_index().index.map(lambda x: x+1),\n    ci=None,\n    ax=ax,\n    color='orangered',\n    saturation=1\n)\ndmgplot = sns.lineplot(\n    x=kill_dmg_df.reset_index().index,\n    y=\"Damage\",\n    data=kill_dmg_df.reset_index(),\n    ax=ax2,\n    color=\"deepskyblue\",\n    linewidth=5\n)\nplt.legend(handles=[kill_patch, dmg_patch])\nplt.show()","4d65aaba":"def highlight(x):\n    if float(x[\"Boost Likelyhood\"].rstrip(' %')) > 50.0:\n        warstats.num_boosters += 1\n        return ['background-color: rgba(255, 0, 0, 0.7); color:white'] * len(x)\n    return [''] * len(x)\n\nmatch_ids = warstats.get_match_ids()\nstats = {\n    match_id: warstats.get_match_stats(match_id)\n    for match_id in match_ids\n    if warstats.get_match_stats(match_id)\n}\nmatch_df = pd.DataFrame(\n    data=stats.values(),\n    columns=[\n        \"Your_KD\", \"Mean_KD\", \"Median_KD\",\n        \"Top_KD\", \"Top_KD_Username\"\n    ]\n)\n# Difference in Mean KD and Median KD wrt the Mean KD can be considered as the likelihood for boosting\n# as the mean is shifting up drastically due to less than half the total player count.\nmatch_df[\"Boost Likelyhood\"] = round(\n    (\n        match_df[\"Mean_KD\"] - match_df[\"Median_KD\"]\n    ) \/ (\n        match_df[\"Mean_KD\"]\n    ) * 100\n)\nmatch_df[\"Boost Likelyhood\"] = match_df[\"Boost Likelyhood\"].apply(lambda x: f\"{x} %\")\ndisplay(match_df.style.apply(highlight, axis=1).hide_index())\nif warstats.num_boosters > 0:\n    display(Markdown('### \u26a0\ufe0f Clear Proof of <u style=\"color:red;\">Reverse Boosting<\/u> \/ <u style=\"color:orange;\">Aimbotting<\/u> here'))","5955fd94":"fig, ax = plt.subplots(figsize=(15, 5))\nax.set_xlabel('Matches')\nax.set_xticks(range(len(match_df)))\nax.set_ylabel('KDs')\n\nplot = sns.lineplot(\n    data=match_df.reset_index()[[\"Your_KD\", \"Mean_KD\", \"Median_KD\"]],\n    linewidth=3,\n    dashes=False,\n    palette=\"bright\"\n)\nplt.axhline(y=1.0, color='r', linestyle='--')\nplt.show()","1caae7e3":"latest_match_id = match_ids[-1]\nlatest_stats = warstats.get_raw_stats(latest_match_id)\nlatest_stats = pd.DataFrame(latest_stats)\nstats1 = latest_stats[[\"kills\", \"kdRatio\", \"headshots\", \"assists\", \"deaths\"]]\nstats1.index = latest_stats[\"username\"]\n\nstats2 = latest_stats[[\"damageDone\", \"score\"]]\nstats2.index = latest_stats[\"username\"]\n\nlatest_stats[[\n    \"username\", \"rank\", \"kdRatio\",\n    \"kills\", \"headshots\", \"damageDone\",\n    \"assists\", \"deaths\", \"score\", \"scorePerMinute\"\n]].head(20)","de8e276c":"params = {\n    'axes.labelsize': 18,\n    'legend.fontsize': 14,\n    'xtick.labelsize': 18,\n    'ytick.labelsize': 18\n}\nplt.rcParams.update(params)\nfig, ax = plt.subplots(figsize=(10, 5))\nsns.heatmap(stats1.corr())\nplt.show()","dd3ecf07":"for plot in [\n    \"boxenplot\", \"pointplot\",\n    \"stripplot\", \"violinplot\"\n]:\n    fig, ax = plt.subplots(1, 2, figsize=(15, 5))\n    fig.suptitle(plot.title(), fontsize=20)\n    func = getattr(sns, plot)\n    func(data=stats1, ax=ax[0])\n    func(data=stats2, ax=ax[1])\n    plt.subplots_adjust(wspace=0.5)\n    plt.setp(ax[0].get_xticklabels(), rotation=45)\n    plt.setp(ax[1].get_xticklabels(), rotation=45)\n    plt.show()","49a89c92":"def melt(*dfs):\n    molten = []\n    for df in dfs:\n        molten.append(\n            df.reset_index().melt(\n                id_vars=[\"username\"],\n                value_vars=df.columns\n            )\n        )\n    return molten\n\nstats1_top = stats1.head(5)\nstats2_top = stats2.head(5)\n\nfig, ax = plt.subplots(2, 1, figsize=(20, 15))\n\nstats1_melt, stats2_melt = melt(stats1_top, stats2_top)\n\nsns.pointplot(data=stats1_melt, x=\"username\", y=\"value\", hue=\"variable\", ax=ax[0])\nsns.pointplot(data=stats2_melt, x=\"username\", y=\"value\", hue=\"variable\", ax=ax[1])\n\nplt.subplots_adjust(hspace=0.5)\nax[0].legend(bbox_to_anchor=(1, 1))\nax[1].legend(bbox_to_anchor=(1, 1))\nplt.show()","6e06e965":"stats = pd.concat((stats1_top, stats2_top), axis=1)\nnormalised_stats = stats \/ stats.sum()\n\nangles = np.linspace(0, 2*np.pi, len(stats.columns), endpoint=False)\nangles = np.concatenate((angles, [angles[0]]))\n\nstat_vals = normalised_stats.values\nstat_vals = np.concatenate(\n    (\n        stat_vals,\n        np.array(stat_vals[:,0]).reshape((-1,1))\n    ),\n    axis=1\n)\n\nfig= plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, polar=True)\n\nax.plot(np.vstack([angles] * len(stats)).T, stat_vals.T, 'o-', linewidth=2)\nax.set_thetagrids(angles * 180\/np.pi, stats.columns)\nax.fill(np.vstack([angles] * len(stats)).T, stat_vals.T, alpha=0.25)\nax.legend(stats.index, bbox_to_anchor=(1, 1))\nplt.show()","461f57ec":"## Radar plot for the Top Player Stats","eacfd24e":"> **Interesting observations here**:\n>    - Kills and Deaths are correlated. Can characterize a player's playstyle.\n>    - Assists and Deaths are correlated as well. Often players get killed by the ones they damaged for an Assist\n>    - Assists and Kills are related. Could signify the importance of teamplay.\n>    - Headshots and Kills are obviously highly correlated.","6709c59a":"## WarzoneStats Class which interacts with SBMMWarzone API","688a38e1":"# <u> Analyzing Recent Warzone Matches <\/u>\n* I will be using the `SBMMWarzone`'s internal API to get stats of the recent matches.\n* The goal here is to check the <kbd style=\"font-size:18px\">KD Trends<\/kbd> and try to spot <b style=\"color:red;\">Reverse Boosters<\/b>.\n<img\n    src=\"https:\/\/static-cdn.jtvnw.net\/jtv_user_pictures\/52752b4b-b56e-4888-b241-9a05e9c8c450-profile_image-150x150.png\"\n    style=\"margin-right:50px;margin-top:-100px;width:100px;\"\n\/>","e47d3756":"## Visualization of Counts and Distributions","27e8727e":"## Kills and Damage in the recent matches","609f3d27":"## What do you think? Pros or Cheaters?\n* Drop a comment down below if you have a different observation.\n* Please feel free to upvote this notebook if you enjoyed this analysis.","731a201b":"## Plotting the KD Graph","347d116d":"## Visualization for Kills and Damages in recent matches","623c00c9":"## Is there correlation between the parameters?","144e9836":"## Importing the Required Dependencies","e5eb732b":"---\n\n# Analysis of the Latest Match","9fee590f":"## User and Avergae KDs in the Recent Matches","cbe7439a":"## Comparision between the top 5 players (based on KD)"}}