{"cell_type":{"1bded81a":"code","9dbb5bf4":"code","f8611315":"code","05f5a2ea":"code","1ee97cb4":"code","318ebca6":"code","2719848c":"code","7c7fac53":"code","e72db4ea":"code","a62af726":"code","b761b0b4":"code","5bdbcb5d":"code","2d7406d2":"code","089fa23f":"code","2d39adc0":"code","4925d6d6":"code","16fd83e8":"code","93cba996":"code","6fea0a34":"code","1b85254d":"code","dff88f87":"code","4ad2913a":"code","d8d15887":"code","26fd8680":"code","a9143694":"markdown","d68d810e":"markdown","ca83c90a":"markdown","b6fe94ac":"markdown","69c70bf4":"markdown"},"source":{"1bded81a":"#Libraries\n%matplotlib inline\nimport math\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\nfrom sklearn.linear_model import Lasso, Ridge\nfrom sklearn.linear_model import LogisticRegressionCV, LogisticRegression\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import r2_score\nfrom sklearn.neighbors import KNeighborsRegressor, KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import OneHotEncoder\nimport tensorflow as tf\nfrom sklearn.impute import SimpleImputer, KNNImputer\n\nfrom sklearn.neighbors import KNeighborsClassifier\n#from prettytable import PrettyTable\nimport seaborn as sns\n\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")","9dbb5bf4":"#plots\nfifa_20 = pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/players_20.csv\")","f8611315":"fig, ax = plt.subplots(1,3,figsize=(18,6))\n\nsns.distplot(ax=ax[0], a=fifa_20.age, kde=False)\nsns.distplot(ax=ax[1], a=fifa_20.height_cm, kde=False)\nsns.distplot(ax=ax[2], a=fifa_20.weight_kg, kde=False)\n\nax[0].set_title(\"Age Distribution FIFA 2020\")\nax[1].set_title(\"Height(cm) Distribution FIFA 2020\")\nax[2].set_title(\"Weight(kg) Distribution FIFA 2020\")\n\nfor i in range(3):\n    ax[i].set_ylabel(\"frequency\")","05f5a2ea":"fig, ax = plt.subplots(1,2,figsize=(18,6))\n\nsns.regplot(y=\"height_cm\", x=\"weight_kg\", data=fifa_20,ax=ax[0], color=\"g\")\nsns.regplot(y='value_eur', x='wage_eur', data=fifa_20,ax=ax[1], color=\"g\")\n\nax[0].set_title(\"Height and Weight Comparison for various players\")\nax[1].set_title(\"Value and Wage Comparison for various players\")","1ee97cb4":"fifa_20[\"bmi\"] = fifa_20.weight_kg\/(fifa_20.height_cm\/100)**2\nrule = (fifa_20[\"bmi\"]<18.5, (18.5<=fifa_20[\"bmi\"])& (fifa_20[\"bmi\"]<25), (25<=fifa_20[\"bmi\"]) & (fifa_20[\"bmi\"]<30), 30<=fifa_20[\"bmi\"])\nfifa_20.bmi[rule[0]] = \"underweight\"\nfifa_20.bmi[rule[1]] = \"normal\"\nfifa_20.bmi[rule[2]] = \"overweight\"\nfifa_20.bmi[rule[3]] = \"obese\"\n\nfig, ax = plt.subplots(2,2,figsize=(18,18))\nax = ax.ravel()\n\nsns.barplot(data=fifa_20, y=\"preferred_foot\", x=\"wage_eur\", ax=ax[0])\nsns.barplot(data=fifa_20, y=\"work_rate\", x=\"wage_eur\", ax=ax[1])\nsns.barplot(data=fifa_20, y=\"body_type\", x=\"wage_eur\", ax=ax[2])\nsns.barplot(data=fifa_20, y='bmi', x=\"wage_eur\", ax=ax[3])\n\nax[0].set_title(\"Wage by Preferred Foot\")\nax[1].set_title(\"Wage by Work rate\")\nax[2].set_title(\"Wage by Body type\")\nax[3].set_title(\"Wage by BMI category\")\n\nfig.tight_layout()","318ebca6":"fig, ax = plt.subplots(2,3,figsize=(18,12))\nax = ax.ravel()\n\nsns.scatterplot(y=\"overall\", x=\"potential\", data=fifa_20, color=\"y\", ax=ax[0])\nsns.scatterplot(y='overall', x='physic', data=fifa_20, color=\"g\", ax=ax[1])\nsns.scatterplot(y=\"overall\", x=\"shooting\", data=fifa_20, color=\"b\", ax=ax[2])\nsns.scatterplot(y='overall', x='passing', data=fifa_20, color=\"r\", ax=ax[3])\nsns.scatterplot(y=\"overall\", x=\"dribbling\", data=fifa_20, color=\"black\", ax=ax[4])\nsns.scatterplot(y='overall', x='defending', data=fifa_20, color=\"brown\", ax=ax[5])\n\n\nax[0].set_title(\"Potential vs Overall\")\nax[1].set_title(\"Physic vs Overall\")\nax[2].set_title(\"Shooting vs Overall\")\nax[3].set_title(\"Passing vs Overall\")\nax[4].set_title(\"Dribbling vs Overall\")\nax[5].set_title(\"Defending vs Overall\")\n\nfig.suptitle(\"Relation with Overall\", size=20)","2719848c":"plt.figure(figsize=(8,8))\nsns.distplot( a=fifa_20.overall, kde=False, color=\"orange\")\nplt.title(\"Distribution of Overall\")\nplt.ylabel(\"frequency\")","7c7fac53":"#Loading data\/content\/sample_data\/mnist_test.csv\nfifa_19 = pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/players_19.csv\")\nfifa_20 = pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/players_20.csv\")\n\nX_train_full = fifa_19.drop('overall', axis=1)\nX_test_full = fifa_20.drop('overall', axis=1)\ny_train = fifa_19.overall\ny_test = fifa_20.overall\n\nX_train_full.set_index(\"sofifa_id\", inplace=True)\nX_test_full.set_index(\"sofifa_id\", inplace=True)\ny_train.index = X_train_full.index\ny_test.index = X_test_full.index","e72db4ea":"def try_eval(x):\n    \"\"\"Converts to float64 else returns as it is\"\"\"\n    try:\n        return eval(x)\n    except:\n        return x\n\ndef print_full(x):\n    \"\"\"Used to print complete Series\"\"\"\n    pd.set_option('display.max_rows', len(x))\n    print(x)\n    pd.reset_option('display.max_rows')\n    \ndef preprocess(x_train, x_test):\n    \"\"\"Preprocessing step for Part A\"\"\"\n    train = x_train.copy()\n    test = x_test.copy()\n    \n    #Decided after looking at train data\n    replace_median = ['release_clause_eur', 'team_jersey_number', 'contract_valid_until', 'pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic', 'ls', 'st', 'rs', 'lw', 'lf', 'cf',\n       'rf', 'rw', 'lam', 'cam', 'ram', 'lm', 'lcm', 'cm', 'rcm', 'rm', 'lwb',\n       'ldm', 'cdm', 'rdm', 'rwb', 'lb', 'lcb', 'cb', 'rcb', 'rb','attacking_crossing',\n       'attacking_finishing', 'attacking_heading_accuracy',\n       'attacking_short_passing', 'attacking_volleys', 'skill_dribbling',\n       'skill_curve', 'skill_fk_accuracy', 'skill_long_passing',\n       'skill_ball_control', 'movement_acceleration', 'movement_sprint_speed',\n       'movement_agility', 'movement_reactions', 'movement_balance',\n       'power_shot_power', 'power_jumping', 'power_stamina', 'power_strength',\n       'power_long_shots', 'mentality_aggression', 'mentality_interceptions',\n       'mentality_positioning', 'mentality_vision', 'mentality_penalties',\n       'mentality_composure', 'defending_marking', 'defending_standing_tackle',\n       'defending_sliding_tackle', 'goalkeeping_diving',\n       'goalkeeping_handling', 'goalkeeping_kicking',\n       'goalkeeping_positioning', 'goalkeeping_reflexes']\n    \n    #Dropping Columns with many missing values or repetitive info\n    drop = ['player_url','short_name','long_name','potential','real_face','player_tags', 'loaned_from', 'club', \"gk_diving\", 'gk_handling', 'gk_kicking', 'gk_reflexes', 'gk_speed', 'gk_positioning', 'player_traits', 'nation_position', 'nation_jersey_number', 'dob', 'joined']\n    train.drop(drop, axis=1, inplace=True)\n    test.drop(drop, axis=1, inplace=True)\n    \n    #Imputing median values to selected columns\n    for col in replace_median:\n        #Convert to float \n        if train[col].dtype not in [\"float64\", \"int64\"]:\n            train[col] = pd.Series(map(try_eval, train[col]))\n            test[col] = pd.Series(map(try_eval, test[col]))    \n        imputer = SimpleImputer(strategy=\"median\")\n        train[col] = imputer.fit_transform(train[[col]])\n        test[col] = imputer.transform(test[[col]])\n            \n    #categorical data\n    \n    #Changing player to hold only one position\n    lst = []\n    for i in x_train.player_positions.astype(str):\n        lst.append(i.split(\",\")[0])\n    train.player_positions = lst\n    lst = []\n    for i in x_test.player_positions.astype(str):\n        lst.append(i.split(\",\")[0])\n    test.player_positions = lst\n    \n    #Listing all categorical cols\n    categorical_cols = [col for col in train.columns if train[col].dtype not in [\"float64\", \"int64\"]]  \n\n    #Imputing most_frequent values to categorical data\n    imputer = SimpleImputer(strategy=\"most_frequent\")\n    train_cat = imputer.fit_transform(train[categorical_cols])\n    test_cat = imputer.transform(test[categorical_cols])\n    \n    #OneHotEncoding categorical columns\n    ohe = OneHotEncoder(handle_unknown='ignore', sparse=False)\n    train.drop(categorical_cols, axis=1, inplace=True)\n    train_cat = pd.DataFrame(ohe.fit_transform(train_cat))\n    train_cat.index = x_train.index\n    train = train.join(train_cat)\n\n    test_cat = pd.DataFrame(ohe.transform(test_cat))\n    test_cat.index = x_test.index\n    test.drop(categorical_cols, axis=1, inplace=True)\n    test = test.join(test_cat)\n\n\n    return train, test\n\nX_train, X_test = preprocess(X_train_full, X_test_full)","a62af726":"reg = Ridge(alpha=1e2)\nreg.fit(X_train, y_train)\n\nfifa_20_pred =pd.Series(reg.predict(X_test))\nprint(\"Test  MSE: %.3f\" %(mean_squared_error(fifa_20_pred, y_test)))\nprint(\"Train MSE: %.3f\" %(mean_squared_error(reg.predict(X_train), y_train)))","b761b0b4":"fifa_20_pred.index = y_test.index\nbest_player = (X_test_full.loc[fifa_20_pred[fifa_20_pred==fifa_20_pred.max()].index[0]].short_name)\nprint(\"A\/c to model best player is\", best_player)","5bdbcb5d":"club_set = [\"FC Barcelona\",\"FC Bayern M\u00fcnchen\",\"Real Madrid\" ,\"Paris Saint-Germain\",\"Juventus\",\"Manchester City\",\"Liverpool\"]\nclub_set_idx = list(map(lambda x: x in club_set, X_test_full.club))\nclub_data = [X_test_full[club_set_idx].club.values, fifa_20_pred[club_set_idx].values]\n\nplt.figure(figsize=(10,10))\nsns.swarmplot(x=club_data[0], y=club_data[1])\nplt.xlabel(\"Clubs\", fontsize=15)\nplt.ylabel(\"Predicted Overall 2020\", fontsize=15)\nplt.title(\"Overall Rating for players in test clubs\", fontsize=20)","2d7406d2":"#Loading data\nX_train_full = fifa_19.drop('player_positions', axis=1)\nX_test_full = fifa_20.drop('player_positions', axis=1)\ny_train_full = fifa_19[\"player_positions\"]\ny_test_full= fifa_20[\"player_positions\"]\n\nX_train_full.set_index(\"sofifa_id\", inplace=True)\nX_test_full.set_index(\"sofifa_id\", inplace=True)\ny_train_full.index = X_train_full.index\ny_test_full.index = X_test_full.index","089fa23f":"def preprocess_B(x_train, x_test, y_train, y_test):\n    \"\"\"Preprocessing step for Part A\"\"\"\n    train = x_train.copy()\n    test = x_test.copy()\n    \n    #Decided after looking at train data\n    replace_median = ['release_clause_eur', 'team_jersey_number', 'contract_valid_until', 'pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic', 'ls', 'st', 'rs', 'lw', 'lf', 'cf',\n       'rf', 'rw', 'lam', 'cam', 'ram', 'lm', 'lcm', 'cm', 'rcm', 'rm', 'lwb',\n       'ldm', 'cdm', 'rdm', 'rwb', 'lb', 'lcb', 'cb', 'rcb', 'rb','attacking_crossing',\n       'attacking_finishing', 'attacking_heading_accuracy',\n       'attacking_short_passing', 'attacking_volleys', 'skill_dribbling',\n       'skill_curve', 'skill_fk_accuracy', 'skill_long_passing',\n       'skill_ball_control', 'movement_acceleration', 'movement_sprint_speed',\n       'movement_agility', 'movement_reactions', 'movement_balance',\n       'power_shot_power', 'power_jumping', 'power_stamina', 'power_strength',\n       'power_long_shots', 'mentality_aggression', 'mentality_interceptions',\n       'mentality_positioning', 'mentality_vision', 'mentality_penalties',\n       'mentality_composure', 'defending_marking', 'defending_standing_tackle',\n       'defending_sliding_tackle', 'goalkeeping_diving',\n       'goalkeeping_handling', 'goalkeeping_kicking',\n       'goalkeeping_positioning', 'goalkeeping_reflexes']\n    \n    #Dropping Columns with many missing values or repetitive info\n    drop = ['value_eur','wage_eur', 'player_url','short_name','long_name','potential','real_face','player_tags', 'loaned_from', 'club', \"gk_diving\", 'gk_handling', 'gk_kicking', 'gk_reflexes', 'gk_speed', 'gk_positioning', 'player_traits', 'nation_position', 'nation_jersey_number', 'dob', 'joined']\n    train.drop(drop, axis=1, inplace=True)\n    test.drop(drop, axis=1, inplace=True)\n    \n    #Imputing median values to selected columns\n    for col in replace_median:\n        #Convert to float \n        if train[col].dtype not in [\"float64\", \"int64\"]:\n            train[col] = pd.Series(map(try_eval, train[col]))\n            test[col] = pd.Series(map(try_eval, test[col]))    \n        imputer = SimpleImputer(strategy=\"median\")\n        train[col] = imputer.fit_transform(train[[col]])\n        test[col] = imputer.transform(test[[col]])\n            \n    #categorical data\n    #Listing all categorical cols\n    categorical_cols = [col for col in train.columns if train[col].dtype not in [\"float64\", \"int64\"]]  \n\n    #Imputing most_frequent values to categorical data\n    imputer = SimpleImputer(strategy=\"most_frequent\")\n    train_cat = imputer.fit_transform(train[categorical_cols])\n    test_cat = imputer.transform(test[categorical_cols])\n    \n    #OneHotEncoding categorical columns\n    ohe = OneHotEncoder(handle_unknown='ignore', sparse=False)\n    train.drop(categorical_cols, axis=1, inplace=True)\n    train_cat = pd.DataFrame(ohe.fit_transform(train_cat))\n    train_cat.index = x_train.index\n    train = train.join(train_cat)\n\n    test_cat = pd.DataFrame(ohe.transform(test_cat))\n    test_cat.index = x_test.index\n    test.drop(categorical_cols, axis=1, inplace=True)\n    test = test.join(test_cat)\n\n    #Preprocessing y values\n    #Changing player to hold only one position (hardcoding first position that appears)\n    lst1 = []\n    for i in y_train.astype(str):\n        lst1.append(i.split(\", \")[0])\n    y_train = np.array(lst1)\n\n    #Scaler\n    scaler = MinMaxScaler()\n    train = scaler.fit_transform(train)\n    test = scaler.transform(test)\n    \n    return train, y_train, test, y_test\n\n\ndef return_accuracy(y_true, y_pred):\n    \"\"\"\n    Returns accuracy score,\n    When y_pred has more than one correct answer\n\n    example:\n    y_true = [\"A, B, C\",\n              \"X, Y, Z\"]\n    y_pred = [\"C\",\n              \"D\"]\n    return_accuracy(y_true, y_pred) = .5\n    \"\"\"\n    assert len(y_true)==len(y_pred)\n    bools = list(map(lambda x: x[0] in x[1].split(\", \"), zip(y_pred, y_true)))\n    return np.array(bools).sum()\/len(y_true)\n\nX_train, y_train, X_test, y_test = preprocess_B(X_train_full, X_test_full, y_train_full, y_test_full)","2d39adc0":"plt.figure(figsize=(7,7))\nplt.hist(y_train, color=\"skyblue\")\nplt.title(\"Player Position Distribution\")\nplt.xlabel(\"Player Position\")\nplt.ylabel(\"Frequency\")\n","4925d6d6":"#Logistic Regression\nlog_reg = LogisticRegressionCV(n_jobs=-1)\nlog_reg.fit(X_train, y_train)\ny_test_pred_lr = log_reg.predict(X_test)\ny_train_pred_lr = log_reg.predict(X_train)\n\n#return_accuracy --> Returns accuracy score, When y_pred has more than one correct answer\ntest_accuracy_lr = return_accuracy(y_test, y_test_pred_lr)\ntrain_accuracy_lr = return_accuracy(y_train, y_train_pred_lr)\n\nprint(\"Model: Logistic Regression\")\nprint(f\"Train Accuracy {train_accuracy_lr*100:.2f} %\")\nprint(f\"Test  Accuracy {test_accuracy_lr*100:.2f} %\")","16fd83e8":"club_set = ['FC Barcelona',\n'FC Bayern M\u00fcnchen',\n'Real Madrid',\n'Paris Saint-Germain',\n'Juventus',\n'Atl\u00e9tico Madrid',\n'Manchester City',\n'Liverpool',\n'Manchester United']\n\nclub_set_idx = list(map(lambda x: x in club_set, X_test_full.club))\nclub_data = [X_test_full[club_set_idx].club.values, y_test_pred_lr[club_set_idx]]\n\nplt.figure(figsize=(10,10))\nenc = LabelEncoder()\nsns.swarmplot(y=club_data[0], x=enc.fit_transform(club_data[1]))\nplt.xticks(list(range(13)), labels=enc.classes_)\nplt.xlabel(\"Player Positions\", fontsize=15)\nplt.ylabel(\"Clubs\", fontsize=15)\nplt.title(\"Predicted Player Position, by Clubs\", fontsize=20)","93cba996":"data = {\"fifa_15\": pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/players_15.csv\"),\n        \"fifa_16\": pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/players_16.csv\"),\n        \"fifa_17\": pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/players_17.csv\"),\n        \"fifa_18\": pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/players_18.csv\"),\n        \"fifa_19\": pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/players_19.csv\"),\n        \"fifa_20\": pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/players_20.csv\")}\n\n#Adding new column Year\nfor key in data:\n    data[key][\"year\"] = 2000 + eval(key.split(\"_\")[-1])\n    \nmerged_data = pd.DataFrame().append([data[year] for year in data])\ngrouped_data = merged_data.groupby([\"club\", \"sofifa_id\"])","6fea0a34":"def preprocess_C(data):\n    df = data.copy()\n    \n    #Decided after looking at train data\n    cols = ['release_clause_eur', 'team_jersey_number', 'contract_valid_until', 'pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic', 'ls', 'st', 'rs', 'lw', 'lf', 'cf',\n       'rf', 'rw', 'lam', 'cam', 'ram', 'lm', 'lcm', 'cm', 'rcm', 'rm', 'lwb',\n       'ldm', 'cdm', 'rdm', 'rwb', 'lb', 'lcb', 'cb', 'rcb', 'rb','attacking_crossing',\n       'attacking_finishing', 'attacking_heading_accuracy',\n       'attacking_short_passing', 'attacking_volleys', 'skill_dribbling',\n       'skill_curve', 'skill_fk_accuracy', 'skill_long_passing',\n       'skill_ball_control', 'movement_acceleration', 'movement_sprint_speed',\n       'movement_agility', 'movement_reactions', 'movement_balance',\n       'power_shot_power', 'power_jumping', 'power_stamina', 'power_strength',\n       'power_long_shots', 'mentality_aggression', 'mentality_interceptions',\n       'mentality_positioning', 'mentality_vision', 'mentality_penalties',\n       'mentality_composure', 'defending_marking', 'defending_standing_tackle',\n       'defending_sliding_tackle', 'goalkeeping_diving',\n       'goalkeeping_handling', 'goalkeeping_kicking',\n       'goalkeeping_positioning', 'goalkeeping_reflexes']\n    \n    #Dropping Columns with many missing values or repetitive info\n    drop = ['value_eur','wage_eur', 'player_url','potential','real_face','player_tags', 'loaned_from']\n    data.drop(drop, axis=1, inplace=True)\n    \n    for col in cols:\n        #Convert to float \n        if data[col].dtype not in [\"float64\", \"int64\"]:\n            data[col] = pd.Series(map(try_eval, data[col])) \n            \n    return data\n\nmerged_data = preprocess_C(merged_data)","1b85254d":"#Grouping data so that it makes easier to track how a player improved over the years when he was in a particular club\n#Dropping players who haven't completed a year in club\n\ngrouped_data = (merged_data.groupby([\"club\", \"sofifa_id\"]).filter(lambda x : x.shape[0]>1)).groupby([\"club\", \"sofifa_id\"])\n\n#Every subframe of group data contains a player's history in that club\ngrouped_data.get_group((\"Real Madrid\", 20801))","dff88f87":"#Looking at Ronaldo's pace when he was in Real Madrid\nd = grouped_data.get_group((\"Real Madrid\", 20801))\nsns.lineplot(x=d.year, y=d['pace'])\nplt.xticks(d.year)\nplt.title(\"Ronaldo's pace over the years when he was in Real Madrid\")","4ad2913a":"skills = ['overall', 'pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic', 'attacking_crossing', \n          'attacking_finishing', 'attacking_heading_accuracy', 'attacking_short_passing', 'attacking_volleys', \n          'skill_dribbling', 'skill_curve', 'skill_fk_accuracy', 'skill_long_passing', 'skill_ball_control', \n          'movement_acceleration', 'movement_sprint_speed', 'movement_agility', 'movement_reactions', \n          'movement_balance', 'power_shot_power', 'power_jumping', 'power_stamina', 'power_strength', \n          'power_long_shots', 'mentality_aggression', 'mentality_interceptions', 'mentality_positioning', \n          'mentality_vision', 'mentality_penalties', 'mentality_composure', 'defending_marking', 'defending_standing_tackle',\n          'defending_sliding_tackle', 'goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking', 'goalkeeping_positioning',\n          'goalkeeping_reflexes']\n\ngroups, ids = zip(*grouped_data.groups)\nplayer_by_club = {grp : [] for grp in set(groups)}\nfor i in range(len(ids)):\n    player_by_club[groups[i]].append(ids[i])","d8d15887":"#Over all clubs\nclub_performance = pd.DataFrame(columns=skills)\nfor club in player_by_club:\n    \n    player_performance = pd.DataFrame(columns=skills)\n    #Over all players\n    for player in player_by_club[club]:\n        subframe = grouped_data.get_group((club, player))[skills]\n        \n        #Over all years\n        #Differece in skill stats over years\n        for i in range(subframe.shape[0]-1):\n            if (i):\n                #cum_sum is difference is skills over years summed\n                cum_sum+=subframe.iloc[i+1]-subframe.iloc[i]\n            else:\n                cum_sum=subframe.iloc[i+1]-subframe.iloc[i]\n                \n        #average increase or decrease in skill points over years\n        cum_sum \/= (subframe.shape[0]-1)\n        player_performance.loc[player] = cum_sum\n    \n    #Storing Median increase\/decrease in skill points as per club\n    club_performance.loc[club] = player_performance.median()\n    \nclub_performance.head()","26fd8680":"#Rank the clubs according to best increase in criterion of a player\n\ndef ranking(criterion, top=3):\n    assert criterion in club_performance.columns, \"criterion must be in \" + str(list(club_performance.columns))\n\n    print(f\"\\\"Club with Best Staff\\\"\\nRanking (A\/c to player improvement in {criterion})\\n\")\n    club_performance.sort_values([criterion], ascending=False, inplace=True)\n    for i, club in enumerate(club_performance.index):\n        if (i==top):\n            break\n        print(f\"{i+1}. {club}\")\n    print(\"\\n================================================================================================\\n\")\n        \nranking(\"defending\")\nranking(\"dribbling\")\nranking(\"physic\")\nranking(\"overall\")","a9143694":"<div style=\"color:black;background-color:#F6E6E2\"-\">\n    \n# **Part A - Rank the Players**\n\nWho is the best player in the world according to your analysis?\n\nUse data from FIFA 19. Predict the Overall (OVR ) skill Statistic for players in the FIFA 20 Edition. Train on all players from FIFA 19\n\nGraphically represent the Overall data for the players in test set (see below)\n\n\n\n**Instructions :**\n\nSofifa Id, URL, Name, Potential, Real face, URL variables cannot be used during the prediction or learning. \n\nIn case of a change in playing position, alter FIFA 20 position to match FIFA 19 Position \n\nThe final score will be assigned using MSE. \n\nTest Set: Players from the following Clubs \n<ul>\n    \n  - FC Barcelona\n    \n  - FC Bayern M\u00fcnchen\n\n  - Real Madrid \n\n  - Paris Saint-Germain\n\n  - Juventus\n\n  - Manchester City\n\n  - Liverpool FC \n<\/ul>","d68d810e":"### AI1 Final Project\n### Presentation Video Link \nhttps:\/\/youtu.be\/_BAE4QOimEM\n#### Slides Link\nhttps:\/\/docs.google.com\/presentation\/d\/1Dn54ITBFWThLSpat5FPGjGGL-5uNmVfwNixXSXPPUtM\/edit?usp=sharing","ca83c90a":"<div style=\"color:black;background-color:#F6E6E2\"-\">\n\n# **Part C - Which Club has the Best Staff**  \n\nThe best staff always help their players grow, can you identify that using historical data?\n\nStudy player data from Division 1 European League* players from the last 5 Years. Analyze changes in player stats and value. Rank the clubs according to best increase in statistics of a player\n\nGraphically represent the scores for the test set\n\n**Details :**\n\nSofifa Id, URL, Wage, Salary, Name, Real face, URL variables cannot be used during the prediction or learning. \n\nAssign a score to all clubs out of 100, and represent it in an appropriate visualization. With 100 being the highest \n\nFor the test set, your model will be scored using MSE against the average of all models of the class. (Score = MSE( Your Values , Average of all models values))\n\nThe test set is as follows for this problem statement (Division 1 European League):\n\nLeagues to be considered\n\n  - Premier League - English Premier League\n\n  - Bundesliga German 1. Bundesliga\n\n  - Ligue 1 French Ligue 1\n\n  - La Liga Spain Primera Division\n\n  - Serie A Italian Serie A","b6fe94ac":"### Thank You","69c70bf4":"<div style=\"color:black;background-color:#F6E6E2\"-\">\n\n# **Part B - Classify player position**  \n\nCan a professional defender become a forward?\n\nTrain on data from FIFA 19. Predict the player_position variable using other skill statistics for players in the FIFA 20 Edition. Train on all players from FIFA 19\n\nGraphically represent the predicted player_position for the players in Test Set \n\n**Details :** \n\nSofifa Id, URL, Wage, Salary, Name, Real face, URL variables cannot be used during the prediction or learning. *\n\nThe final score will be assigned using Classification accuracy\n\nTest Set: Players from the following Clubs \n<ul>\n                                                   \n- FC Barcelona\n\n- FC Bayern M\u00fcnchen\n\n- Real Madrid \n\n- Paris Saint-Germain\n\n- Juventus\n\n- Atl\u00e9tico Madrid\n\n- Manchester City\n\n- Liverpool \n\n- Manchester United\n<\/ul>"}}