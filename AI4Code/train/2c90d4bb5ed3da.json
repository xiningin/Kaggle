{"cell_type":{"b47719b9":"code","21aa82d9":"code","8e48baaa":"code","2a6ca5f3":"code","b563425b":"code","d5d9a566":"code","83defb3a":"code","8b3e3f16":"markdown","2e69a465":"markdown","da2375b8":"markdown","ff4e6824":"markdown","41a7a66e":"markdown","b5da9983":"markdown","b4ed18e5":"markdown"},"source":{"b47719b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","21aa82d9":"import pandas as pd\nimport numpy as np\n\nCOLUMNS = [\n    \"age\", \"workclass\", \"fnlwgt\", \"education\", \"education_num\", \"marital_status\", \n    \"occupation\", \"relationship\", \"race\", \"gender\", \"capital_gain\", \"capital_loss\", \n    \"hours_per_week\", \"native_country\", \"income_bracket\"\n]\ntrain_data = pd.read_csv('\/kaggle\/input\/adult-incomes-in-the-united-states\/adult.data', names=COLUMNS)","8e48baaa":"train_data.head()","2a6ca5f3":"from sklearn.preprocessing import StandardScaler, PolynomialFeatures, LabelEncoder\nfrom tensorflow.keras.layers import Input, Embedding, Dense, Flatten, Dropout, SpatialDropout1D, Activation, concatenate\nfrom tensorflow.keras.optimizers import Adam, SGD\nfrom tensorflow.keras.layers import ReLU, PReLU, LeakyReLU, ELU\nfrom tensorflow.keras.layers import BatchNormalization\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.utils import plot_model\n\n\nCOLUMNS = [\n    \"age\", \"workclass\", \"fnlwgt\", \"education\", \"education_num\", \"marital_status\", \n    \"occupation\", \"relationship\", \"race\", \"gender\", \"capital_gain\", \"capital_loss\", \n    \"hours_per_week\", \"native_country\", \"income_bracket\"\n]\n\nLABEL_COLUMN = \"label\"\n\nCATEGORICAL_COLUMNS = [\"workclass\", \"education\", \"marital_status\", \"occupation\", \"relationship\", \"race\", \"gender\", \"native_country\"]\n\nCONTINUOUS_COLUMNS = [\"age\", \"education_num\", \"capital_gain\", \"capital_loss\", \"hours_per_week\"]\n\n\ndef preprocessing():\n    # load data\n    train_data = pd.read_csv('\/kaggle\/input\/adult-incomes-in-the-united-states\/adult.data', names=COLUMNS)\n    \n    # drop null\n    train_data.dropna(how='any', axis=0)\n    test_data = pd.read_csv('\/kaggle\/input\/adult-incomes-in-the-united-states\/adult.test', skiprows=1, names=COLUMNS)\n    test_data.dropna(how='any', axis=0)\n    \n    # label to 0\/1\n    all_data = pd.concat([train_data, test_data]) #concat to all_data\n    all_data[LABEL_COLUMN] = all_data['income_bracket'].apply(lambda x: \">50K\" in x).astype(int)\n    all_data.pop('income_bracket')\n    \n    # label:y\n    y = all_data[LABEL_COLUMN].values\n    \n    # data:x\n    all_data.pop(LABEL_COLUMN)\n    \n    # CATEGORICAL feature encoding: string to int\n    for c in CATEGORICAL_COLUMNS:\n        le = LabelEncoder()\n        all_data[c] = le.fit_transform(all_data[c])\n        \n    # extract x_train, y_train, x_test, y_test\n    train_size = len(train_data)\n    x_train = all_data.iloc[:train_size]\n    y_train = y[:train_size]\n    x_test = all_data.iloc[train_size:]\n    y_test = y[train_size:]\n    # CATEGORICAL features\n    x_train_categ = np.array(x_train[CATEGORICAL_COLUMNS])\n    x_test_categ = np.array(x_test[CATEGORICAL_COLUMNS])\n    # CONTINUOUS features\n    x_train_conti = np.array(x_train[CONTINUOUS_COLUMNS], dtype='float64')\n    x_test_conti = np.array(x_test[CONTINUOUS_COLUMNS], dtype='float64')\n    # CONTINUOUS features scaling\n    scaler = StandardScaler()\n    x_train_conti = scaler.fit_transform(x_train_conti)\n    x_test_conti = scaler.transform(x_test_conti)\n    return [x_train, y_train, x_test, y_test, x_train_categ, x_test_categ, x_train_conti, x_test_conti, all_data]\n\n\n","b563425b":"class Wide_and_Deep:\n    def __init__(self, mode='wide and deep'):\n        self.mode = mode\n        x_train, y_train, x_test, y_test, x_train_categ, x_test_categ, x_train_conti, x_test_conti, all_data = preprocessing()\n        self.x_train = x_train\n        self.y_train = y_train\n        self.x_test = x_test\n        self.y_test = y_test\n        self.x_train_categ = x_train_categ\n        self.x_test_categ = x_test_categ\n        self.x_train_conti = x_train_conti\n        self.x_test_conti = x_test_conti\n        self.all_data = all_data\n        self.poly = PolynomialFeatures(degree=2, interaction_only=True)\n        self.x_train_categ_poly = self.poly.fit_transform(x_train_categ)\n        self.x_test_categ_poly = self.poly.transform(x_test_categ)\n        self.categ_inputs = None\n        self.conti_input = None\n        self.deep_component_outlayer = None\n        self.logistic_input = None\n        self.model = None\n\n    def deep_component(self): #deep structure\n        \n        categ_inputs = []\n        categ_embeds = []\n        \n        # embedding of CATEGORICAL_COLUMNS\n        for i in range(len(CATEGORICAL_COLUMNS)):\n            input_i = Input(shape=(1,), dtype='int32')\n            dim = len(np.unique(self.all_data[CATEGORICAL_COLUMNS[i]]))\n            embed_dim = int(np.ceil(dim ** 0.25))\n            embed_i = Embedding(dim, embed_dim, input_length=1)(input_i)\n            flatten_i = Flatten()(embed_i)\n            categ_inputs.append(input_i)\n            categ_embeds.append(flatten_i)\n        print(categ_inputs)\n        print(categ_embeds)    \n        \n        # CONTINUOUS_COLUMNS features\n        conti_input = Input(shape=(len(CONTINUOUS_COLUMNS),))\n        print(conti_input)\n        conti_dense = Dense(256, use_bias=False)(conti_input)\n        \n        # concat CATEGORICAL_COLUMNS's embedding and CONTINUOUS_COLUMNS features\n        concat_embeds = concatenate([conti_dense]+categ_embeds)\n        \n        #  BN of relu\n        concat_embeds = Activation('relu')(concat_embeds)\n        bn_concat = BatchNormalization()(concat_embeds)\n        # layers structure\n        fc1 = Dense(512, use_bias=False)(bn_concat)\n        ac1 = ReLU()(fc1)\n        bn1 = BatchNormalization()(ac1)\n        fc2 = Dense(256, use_bias=False)(bn1)\n        ac2 = ReLU()(fc2)\n        bn2 = BatchNormalization()(ac2)\n        fc3 = Dense(128)(bn2)\n        ac3 = ReLU()(fc3)\n\n        self.categ_inputs = categ_inputs\n        self.conti_input = conti_input\n        self.deep_component_outlayer = ac3\n\n    def wide_component(self):\n        \n        dim = self.x_train_categ_poly.shape[1]\n        self.logistic_input = Input(shape=(dim,))\n\n    def create_model(self):\n        self.deep_component()\n        self.wide_component()\n        if self.mode == 'wide and deep':\n            out_layer = concatenate([self.deep_component_outlayer, self.logistic_input])\n            print(out_layer)\n            inputs = [self.conti_input] + self.categ_inputs + [self.logistic_input]\n        elif self.mode =='deep':\n            out_layer = self.deep_component_outlayer\n            inputs = [self.conti_input] + self.categ_inputs\n        else:\n            print('wrong mode')\n            return\n\n        output = Dense(1, activation='sigmoid')(out_layer)\n        self.model = Model(inputs=inputs, outputs=output)\n\n    # training\n    def train_model(self, epochs=5, optimizer='adam', batch_size=128):\n        # different senarios\n        \n        # no model\n        if not self.model:\n            print('You have to create model first')\n            return\n        \n        # wide&deep\n        if self.mode == 'wide and deep':\n            input_data = [self.x_train_conti] +\\\n                         [self.x_train_categ[:, i] for i in range(self.x_train_categ.shape[1])] +\\\n                         [self.x_train_categ_poly]\n        # deep only\n        elif self.mode == 'deep':\n            input_data = [self.x_train_conti] +\\\n                         [self.x_train_categ[:, i] for i in range(self.x_train_categ.shape[1])]\n        else:\n            print('wrong mode')\n            return\n        \n        self.model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n        self.model.fit(input_data, self.y_train, epochs=epochs, batch_size=batch_size)\n\n    # eva\n    def evaluate_model(self):\n        if not self.model:\n            print('You have to create model first')\n            return\n\n        if self.mode == 'wide and deep':\n            input_data = [self.x_test_conti] +\\\n                         [self.x_test_categ[:, i] for i in range(self.x_test_categ.shape[1])] +\\\n                         [self.x_test_categ_poly]\n        elif self.mode == 'deep':\n            input_data = [self.x_test_conti] +\\\n                         [self.x_test_categ[:, i] for i in range(self.x_test_categ.shape[1])]\n        else:\n            print('wrong mode')\n            return\n\n        loss, acc = self.model.evaluate(input_data, self.y_test)\n        print(f'test_loss: {loss} - test_acc: {acc}')\n\n    def save_model(self, filename='wide_and_deep.h5'):\n        self.model.save(filename)\n\n\n","d5d9a566":"wide_deep_net = Wide_and_Deep()\nwide_deep_net.create_model()\nwide_deep_net.train_model()\nwide_deep_net.evaluate_model()","83defb3a":"wide_deep_net = Wide_and_Deep(mode='deep')\nwide_deep_net.create_model()\nwide_deep_net.train_model()\nwide_deep_net.evaluate_model()","8b3e3f16":"## Wide&Deep Class","2e69a465":"It appears deep only model has a better performance in this case.","da2375b8":"# Data files\nWe use **adult.data** as training data and **adult.test** as testing data. <br \/>","ff4e6824":"## Data Preprocessing","41a7a66e":"# Introduction\n**US adult income prediction.**\n\nGoal is to predict 'income_bracket'. ","b5da9983":"Deep only","b4ed18e5":"Wide&Deep"}}