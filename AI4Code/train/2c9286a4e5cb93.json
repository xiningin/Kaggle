{"cell_type":{"a99e9957":"code","7b18d305":"code","2711c6b6":"code","ddba79b9":"code","517b6125":"code","8fded07b":"code","6ee851cb":"code","5caed0f8":"code","73f3af0d":"code","4fc022cd":"code","33bd4372":"code","47532831":"code","bd2a33e0":"code","49ed28ad":"markdown","80a0df11":"markdown","9f474384":"markdown","e88fc01c":"markdown","662244d7":"markdown","f34477a5":"markdown","cec1c2c9":"markdown","61b139ee":"markdown"},"source":{"a99e9957":"from sklearn.metrics import accuracy_score\nfrom keras.preprocessing import image\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import Dense\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nimport pandas as pd\nimport json\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.image import ImageDataGenerator","7b18d305":"# Load the data\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","2711c6b6":"y_train = train['label']\n\n# drop label column\nX_train = train.drop(['label'],axis=1)\n\ndel train","ddba79b9":"# Normalize the data\nX_train = X_train\/255.0\ntest = test\/255.0","517b6125":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","8fded07b":"# split the data\nX_train,X_val,y_train,y_val = train_test_split(X_train,y_train,test_size=0.1,random_state=42)","6ee851cb":"# set the CNN model\nclassifier = Sequential()\n\nclassifier.add(Conv2D(6,(5,5), input_shape = (28,28,1),activation='relu'))\nclassifier.add(MaxPooling2D(pool_size=(2,2)))\n\nclassifier.add(Conv2D(16,(5,5),activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size=(2,2)))\n\nclassifier.add(Flatten())\nclassifier.add(Dense(units=120,activation='relu'))\n\nclassifier.add(Dense(units=84,activation='relu'))\n\nclassifier.add(Dense(units=10,activation='softmax'))\n\nclassifier.compile(optimizer = 'adam', loss='sparse_categorical_crossentropy', metrics = ['accuracy'])","5caed0f8":"# data augmentation\ndatagen = ImageDataGenerator(rotation_range=10,\n                             width_shift_range=0.1,\n                             zoom_range=0.1,\n                             height_shift_range=0.1)\ndatagen.fit(X_train)","73f3af0d":"# fit the model\nhistory = classifier.fit(datagen.flow(X_train,y_train,batch_size=128),\n                         epochs=100,\n                         steps_per_epoch = X_train.shape[0]\/\/128, \n                         validation_data=(X_val,y_val),\n                         verbose=2)","4fc022cd":"model_json = classifier.to_json()\nwith open(\".\/model_in_json.json\",\"w\") as json_file:\n    json.dump(model_json, json_file)\n    \n#  save model\nclassifier.save_weights(\".\/model.h5\")","33bd4372":"# Drawing plots\nimport matplotlib.pyplot as plt\n\nepochs = [i for i in range(1, len(history.history['loss'])+1)]\n\nplt.plot(epochs, history.history['loss'], color='blue', label=\"training_loss\")\nplt.plot(epochs, history.history['val_loss'], color='red', label=\"validation_loss\")\nplt.legend(loc='best')\nplt.title('training')\nplt.xlabel('epoch')\nplt.savefig(\".\/loss.jpg\", bbox_inches='tight')","47532831":"plt.plot(epochs, history.history['accuracy'], color='blue', label=\"training_accuracy\")\nplt.plot(epochs, history.history['val_accuracy'], color='red',label=\"validation_accuracy\")\nplt.legend(loc='best')\nplt.title('validation')\nplt.xlabel('epoch')\nplt.savefig(\".\/acc.jpg\", bbox_inches='tight')","bd2a33e0":"# submission\npred = classifier.predict(test)\n\ny_pred = []\nfor i in pred:\n    y_pred.append(i.tolist().index(i.max()))\n    \ndict = {'ImageId':[],'Label':[]}\n\nfor id, label in zip(range(1,pred.shape[0]+1),y_pred):\n    dict.setdefault('ImageId',[]).append(id)\n    dict.setdefault('Label',[]).append(label)\n\nsubmission = pd.DataFrame(dict)\nsubmission.to_csv(\"Submission.csv\",index=False)","49ed28ad":"## Define The Model ","80a0df11":"## Normalization ","9f474384":"## Data Augmentation ","e88fc01c":"## Split train and validation set ","662244d7":"## Load Data","f34477a5":"## Reshape","cec1c2c9":"# CNN","61b139ee":"# Data preparation"}}