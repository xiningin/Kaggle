{"cell_type":{"ae85ab87":"code","a1032bef":"code","9a262cb7":"code","5fce2ebb":"code","64860c1a":"code","6708c646":"code","eb7e8cc5":"code","3de6ca0b":"code","9857d0f3":"code","50104dc2":"code","df6b9c8a":"code","5943e704":"code","98e6ea4d":"code","3b406f12":"code","2d909cb0":"code","8e28bb4f":"code","7be569df":"code","1d796c63":"code","53928a47":"code","b423834e":"code","92ffb2d6":"code","e722206f":"code","fb3e9a44":"code","f91e63f1":"code","840fbc08":"code","3cfa3224":"code","6729006a":"markdown"},"source":{"ae85ab87":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","a1032bef":"train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n\nsamsub = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","9a262cb7":"train.head()","5fce2ebb":"test.head()","64860c1a":"samsub.head()","6708c646":"train.info()","eb7e8cc5":"test['MSZoning'] = test['MSZoning'].fillna(test['MSZoning'].mode()[0])","3de6ca0b":"test.info()","9857d0f3":"train.drop(['Alley'], axis =1, inplace = True)\ntest.drop(['Alley'], axis = 1, inplace = True)","50104dc2":"train['LotFrontage'] = train['LotFrontage'].fillna(train['LotFrontage'].mean())\ntrain['MasVnrType'] = train['MasVnrType'].fillna(train['MasVnrType'].mode()[0])\ntrain['MasVnrArea'] = train['MasVnrArea'].fillna(train['MasVnrArea'].mean())\ntrain['BsmtQual'] = train['BsmtQual'].fillna(train['BsmtQual'].mode()[0])\ntrain['BsmtCond'] = train['BsmtCond'].fillna(train['BsmtCond'].mode()[0])\ntrain['BsmtExposure'] = train['BsmtExposure'].fillna(train['BsmtExposure'].mode()[0])\ntrain['BsmtFinType1'] = train['BsmtFinType1'].fillna(train['BsmtFinType1'].mode()[0])\ntrain['BsmtFinType2'] = train['BsmtFinType2'].fillna(train['BsmtFinType2'].mode()[0])\ntrain['Electrical'] = train['Electrical'].fillna(train['Electrical'].mode()[0])\ntrain['FireplaceQu'] = train['FireplaceQu'].fillna(train['FireplaceQu'].mode()[0])\ntrain['GarageType'] = train['GarageType'].fillna(train['GarageType'].mode()[0])\ntrain['GarageYrBlt'] = train['GarageYrBlt'].fillna(train['GarageYrBlt'].mean())\ntrain['GarageFinish'] = train['GarageFinish'].fillna(train['GarageFinish'].mode()[0])\ntrain['GarageQual'] = train['GarageQual'].fillna(train['GarageQual'].mode()[0])\ntrain['GarageCond'] = train['GarageCond'].fillna(train['GarageCond'].mode()[0])","df6b9c8a":"train.drop(['PoolQC'], axis =1, inplace = True)\ntrain.drop(['Fence'], axis =1, inplace = True)\ntrain.drop(['MiscFeature'], axis =1, inplace = True)","5943e704":"test['Utilities']= test['Utilities'].fillna(test['Utilities'].mode()[0])\ntest['LotFrontage'] = test['LotFrontage'].fillna(test['LotFrontage'].mean())\ntest['Exterior1st'] = test['Exterior1st'].fillna(test['Exterior1st'].mode()[0])\ntest['Exterior2nd'] = test['Exterior2nd'].fillna(test['Exterior2nd'].mode()[0])\ntest['MasVnrType'] = test['MasVnrType'].fillna(test['MasVnrType'].mode()[0])\ntest['MasVnrArea'] = test['MasVnrArea'].fillna(test['MasVnrArea'].mean())\ntest['BsmtQual'] = test['BsmtQual'].fillna(test['BsmtQual'].mode()[0])\ntest['BsmtCond'] = test['BsmtCond'].fillna(test['BsmtCond'].mode()[0])\ntest['BsmtExposure'] = test['BsmtExposure'].fillna(test['BsmtExposure'].mode()[0])\ntest['BsmtFinType1'] = test['BsmtFinType1'].fillna(test['BsmtFinType1'].mode()[0])\ntest['BsmtFinType2'] = test['BsmtFinType2'].fillna(test['BsmtFinType2'].mode()[0])\ntest['BsmtFinSF1'] = test['BsmtFinSF1'].fillna(test['BsmtFinSF1'].mean())\ntest['BsmtFinSF2'] = test['BsmtFinSF2'].fillna(test['BsmtFinSF2'].mean())\ntest['BsmtUnfSF'] = test['BsmtUnfSF'].fillna(test['BsmtUnfSF'].mean())\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].fillna(test['TotalBsmtSF'].mean())\ntest['BsmtFullBath'] = test['BsmtFullBath'].fillna(test['BsmtFullBath'].mean())\ntest['BsmtHalfBath'] = test['BsmtHalfBath'].fillna(test['BsmtHalfBath'].mean())\ntest['KitchenQual'] = test['KitchenQual'].fillna(test['KitchenQual'].mode()[0])\ntest['Functional'] = test['Functional'].fillna(test['Functional'].mode()[0])\ntest['FireplaceQu'] = test['FireplaceQu'].fillna(test['FireplaceQu'].mode()[0])\ntest['GarageType'] = test['GarageType'].fillna(test['GarageType'].mode()[0])\ntest['GarageYrBlt'] = test['GarageYrBlt'].fillna(test['GarageYrBlt'].mean())\ntest['GarageFinish'] = test['GarageFinish'].fillna(test['GarageFinish'].mode()[0])\ntest['GarageCars'] = test['GarageCars'].fillna(test['GarageCars'].mean())\ntest['GarageArea'] = test['GarageArea'].fillna(test['GarageArea'].mean())\ntest['GarageQual'] = test['GarageQual'].fillna(test['GarageQual'].mode()[0])\ntest['GarageCond'] =test['GarageCond'].fillna(test['GarageCond'].mode()[0])\ntest['SaleType'] =test['SaleType'].fillna(test['SaleType'].mode()[0])","98e6ea4d":"test.drop(['PoolQC'], axis =1, inplace = True)\ntest.drop(['Fence'], axis =1, inplace = True)\ntest.drop(['MiscFeature'], axis =1, inplace = True)","3b406f12":"df_train = train.copy()\ndf_test = test.copy()","2d909cb0":"df= pd.concat([train,test], axis=0)","8e28bb4f":"columns=['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood',\n         'Condition2','BldgType','Condition1','HouseStyle','SaleType', 'SaleCondition','ExterCond', \n         'ExterQual','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n         'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','Heating','HeatingQC', 'CentralAir',\n         'Electrical','KitchenQual','Functional', 'FireplaceQu','GarageType','GarageFinish','GarageQual',\n         'GarageCond','PavedDrive']","7be569df":"def com(mcols):\n    main = df\n    i=0\n    \n    for f in mcols:\n        df1= pd.get_dummies(df[f],drop_first= True)\n        df.drop([f], axis=1, inplace= True)\n        if i==0:\n            main= df1.copy()\n        else:\n            main = pd.concat([main,df1],axis=1)\n        i= i+1\n    \n    main = pd.concat([df,main],axis=1)\n    \n    return main","1d796c63":"df= com(columns)","53928a47":"df = df.loc[:,~df.columns.duplicated()]","b423834e":"df_train.shape","92ffb2d6":"df_train= df.iloc[:1460, :]\ndf_test= df.iloc[1460:, :]","e722206f":"df_test.drop(['SalePrice'], axis=1, inplace= True)","fb3e9a44":"x_train = df_train.drop(['SalePrice'], axis=1)\ny_train = df_train['SalePrice']","f91e63f1":"import xgboost \nclassifier = xgboost.XGBRFRegressor()\nclassifier.fit(x_train,y_train)","840fbc08":"y_pred = classifier.predict(df_test)","3cfa3224":"pred = pd.DataFrame(y_pred)\n\nresult = pd.concat([samsub['Id'],pred],axis=1)\n\nresult.columns = ['ID', 'SalePrice']\n\nresult.to_csv('pred_sub.csv', index= False)","6729006a":"columns=['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood',\n         'Condition2','BldgType','Condition1','HouseStyle','SaleType',\n        'SaleCondition','ExterCond',\n         'ExterQual','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n        'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','Heating','HeatingQC',\n         'CentralAir',\n         'Electrical','KitchenQual','Functional',\n         'FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive']"}}