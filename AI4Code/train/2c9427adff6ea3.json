{"cell_type":{"64fd212f":"code","7d74cc0d":"code","1e2d075b":"code","4642e181":"code","0d8a1f00":"code","4838026b":"code","f4171c97":"code","6a319bdd":"code","be4ef87d":"code","56a59927":"code","1e96c43e":"code","77438f46":"code","11cad719":"code","7f9c28b8":"code","c5e77077":"code","8e6fe98e":"code","2ebe3c3e":"code","44d37417":"code","dd7cdcbe":"code","a477d64d":"code","fef63176":"code","89fcdce6":"code","6c6c918d":"code","e9e6295a":"code","998fab8b":"code","4156eb62":"code","037ccd5b":"code","f1c61c31":"code","f92d180f":"code","c591fd6f":"code","09c4a193":"code","d04c2064":"code","1b6668ce":"code","ab9a4190":"code","e570b315":"code","2a3254fd":"code","1fcadd67":"code","61dc82ea":"code","39b44df7":"markdown","cbb87b65":"markdown","f666b09d":"markdown","b738888d":"markdown","475f7203":"markdown","a9f7cdcd":"markdown","af8d523c":"markdown","e050a51d":"markdown","39049b69":"markdown","5cdcfe6e":"markdown","23963b9e":"markdown","a6fba0ad":"markdown","68df0ec3":"markdown","e5d2b9c4":"markdown","3fabae9a":"markdown"},"source":{"64fd212f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7d74cc0d":"df = pd.read_csv('\/kaggle\/input\/spam-filter\/emails.csv')","1e2d075b":"df.head()","4642e181":"df.spam.value_counts()","0d8a1f00":"sns.countplot(x='spam',data=df)","4838026b":"df.info()","f4171c97":"df.isna().sum()","6a319bdd":"df.isnull().sum()","be4ef87d":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(df.text,df.spam,test_size=0.2,random_state=42)","56a59927":"print(X_train.shape)\nprint(y_train.shape)","1e96c43e":"print(X_test.shape)\nprint(y_test.shape)","77438f46":"from sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer()\nvectorizer.fit_transform(X_train)\nprint(f\"the total vocabulary size in the train data is {len(vectorizer.vocabulary_)}\")","11cad719":"vectorizer.vocabulary_\n#vocabulary:index","7f9c28b8":"vectorizer.get_feature_names()","c5e77077":"X_train_ct = vectorizer.transform(X_train)","8e6fe98e":"X_train_ct.shape","2ebe3c3e":"X_train_ct[0]","44d37417":"print(X_train_ct[0])","dd7cdcbe":"X_train[0]","a477d64d":"X_test_ct =  vectorizer.transform(X_test)","fef63176":"print(X_test_ct[0].shape)","89fcdce6":"print(X_test_ct[0])","6c6c918d":"from sklearn.neighbors import KNeighborsClassifier\nknn_classifier = KNeighborsClassifier()\nknn_classifier.fit(X_train_ct,y_train)","e9e6295a":"y_pred = knn_classifier.predict(X_test_ct)","998fab8b":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)","4156eb62":"from sklearn.svm import SVC\nsvc = SVC()\nsvc.fit(X_train_ct,y_train)\ny_pred = svc.predict(X_test_ct)\naccuracy_score(y_test,y_pred)","037ccd5b":"from sklearn.naive_bayes import MultinomialNB\nnb= MultinomialNB()\nnb.fit(X_train_ct,y_train)\ny_pred = nb.predict(X_test_ct)\naccuracy_score(y_test,y_pred)","f1c61c31":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer()\nvectorizer.fit(X_train)\nX_train_ct  = vectorizer.transform(X_train)\nX_test_ct = vectorizer.transform(X_test)","f92d180f":"knn_classifier = KNeighborsClassifier()\nknn_classifier.fit(X_train_ct,y_train)\ny_pred = knn_classifier.predict(X_test_ct)\naccuracy_score(y_test,y_pred)","c591fd6f":"svc = SVC()\nsvc.fit(X_train_ct,y_train)\ny_pred = svc.predict(X_test_ct)\naccuracy_score(y_test,y_pred)","09c4a193":"nb= MultinomialNB()\nnb.fit(X_train_ct,y_train)\ny_pred = nb.predict(X_test_ct)\naccuracy_score(y_test,y_pred)","d04c2064":"vectorizer = TfidfVectorizer(ngram_range=(1,2))\nvectorizer.fit(X_train)\nX_train_ct = vectorizer.transform(X_train)\nX_test_ct = vectorizer.transform(X_test)","1b6668ce":"knn_classifier = KNeighborsClassifier()\nknn_classifier.fit(X_train_ct,y_train)\ny_pred = knn_classifier.predict(X_test_ct)\naccuracy_score(y_test,y_pred)","ab9a4190":"svc = SVC()\nsvc.fit(X_train_ct,y_train)\ny_pred = svc.predict(X_test_ct)\naccuracy_score(y_test,y_pred)","e570b315":"nb= MultinomialNB()\nnb.fit(X_train_ct,y_train)\ny_pred = nb.predict(X_test_ct)\naccuracy_score(y_test,y_pred)","2a3254fd":"import tensorflow as tf\ntf.keras.backend.clear_session","1fcadd67":"model = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(100,activation='relu',input_shape=(len(vectorizer.vocabulary_),)))\nmodel.add(tf.keras.layers.Dense(50,activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.4))          \nmodel.add(tf.keras.layers.Dense(1,activation='sigmoid'))\nmodel.compile(optimizer='adam',loss='binary_crossentropy', metrics=['acc'])          ","61dc82ea":"model.fit(X_train_ct.todense(),y_train,validation_data=(X_test_ct.todense(),y_test),epochs=3,batch_size=32)","39b44df7":"# EDA","cbb87b65":"# Naive Bayes","f666b09d":"# SVC","b738888d":"# Ham or Spam classification\nThe data set has two columns one is the subject of the mail and the other is the label called spam, which specifies if the given document is ham or spam. The value 1 indicates it's a spam and vice versa.\n\nThis is typically a classification problem and since it has only labels either 0 or 1 it falls under the binary classification","475f7203":"# Tokenization & Vectorization","a9f7cdcd":"# TF-IDF Vectorizer","af8d523c":"# TF-IDF with n-gram","e050a51d":"# KNN","39049b69":"# SVC","5cdcfe6e":"# Naive Bayes","23963b9e":"# KNN","a6fba0ad":"# Knn classifier","68df0ec3":"# Naive Bayes","e5d2b9c4":"# train & test data split","3fabae9a":"# SVC "}}