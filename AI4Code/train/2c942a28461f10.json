{"cell_type":{"d9f757a2":"code","a8aadbf4":"code","50a4c3ef":"code","55933e0e":"code","521fce34":"code","55d0e5fc":"code","1638265e":"code","e519c4d9":"code","a226835f":"code","224d1751":"code","2abc99ad":"code","eee288d6":"markdown","d3ab7ef2":"markdown","2f2f7a3b":"markdown","bf216613":"markdown","b79bb0b6":"markdown","df22c41a":"markdown","90675610":"markdown","dc94ef28":"markdown","9bd12ee4":"markdown","fc39003e":"markdown"},"source":{"d9f757a2":"import sys\nimport subprocess\n\nREPO_LOCATION = 'https:\/\/github.com\/felipessalvatore\/vol4life'\nREPO_NAME = 'vol4life'\nREPO_BRANCH = 'master'\n\n# Clone the repository\nprint('cloning the repository')\nsubprocess.call(['git', 'clone', '-b', REPO_BRANCH, REPO_LOCATION])\n\n# Setting env variables\nsys.path.append(REPO_NAME)\n","a8aadbf4":"import pandas as pd\nimport numpy as np\nfrom IPython.display import display, HTML\nfrom vol4life.vol4life.stats import test_normality_skewness\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom glob import glob\n\npath_ibov =  glob('\/kaggle\/input\/ibovespa-stocks\/b3*.csv')[0]\npath_selic = glob('\/kaggle\/input\/ibovespa-stocks\/selic.csv')[0]","50a4c3ef":"def plot_2_returns_skew(return_1, return_2):\n    mean1 = return_1.mean()\n    median1 = return_1.median()\n    skew1 = return_1.skew()\n    kurtosis1 = return_1.kurtosis()\n    mean2 = return_2.mean()\n    median2 = return_2.median()\n    skew2 = return_2.skew()\n    kurtosis2 = return_2.kurtosis()\n    \n\n    fig, ax = plt.subplots(1,2,figsize = (20,5))\n    sns.distplot(return_1, hist=True, kde=True, \n                 bins=int(180\/5), color = \"Green\", \n                 kde_kws={'linewidth': 1.5}, ax=ax[0])\n    ax[0].axvline(mean1,0, 140, ls=\"--\", color=\"k\", label=\"mean = {:.5f}\".format(mean1));\n    ax[0].axvline(median1,0, 140, ls=\":\", color=\"k\", label=\"median = {:.5f}\".format(median1));\n    \n    msg = \"{} (skewness = {:.3f} | kurtosis = {:.3f})\".format(return_1.name, skew1, kurtosis1)\n    ax[0].set_title(msg)\n    ax[0].legend(loc=\"best\");\n\n    sns.distplot(return_2, hist=True, kde=True, \n                 bins=int(180\/5), color = \"Green\", \n                 kde_kws={'linewidth': 1.5}, ax=ax[1])\n    ax[1].axvline(mean2,0, 140, ls=\"--\", color=\"k\", label=\"mean = {:.5f}\".format(mean2));\n    ax[1].axvline(median2,0, 140, ls=\":\", color=\"k\", label=\"median = {:.5f}\".format(median2));\n    \n    msg = \"{} (skewness = {:.3f} | kurtosis = {:.3f})\".format(return_2.name, skew2, kurtosis2)    \n    ax[1].set_title(msg)\n    ax[1].legend(loc=\"best\");","55933e0e":"initial_date = \"2017-01-01\"\ntoday = date.today()\nfinal_date = today.strftime(\"%Y-%m-%d\")\n\ndf = pd.read_csv(path_ibov)\ndf.loc[:, \"datetime\"] =  pd.to_datetime(df.datetime)\n\nibov = [\"ABEV3\", \"AZUL4\", \"B3SA3\", \"BBAS3\", \"BBDC3\", \"BBDC4\", \"BBSE3\", \"BPAC11\", \"BRAP4\",\n        \"BRDT3\", \"BRFS3\", \"BRKM5\", \"BRML3\", \"BTOW3\", \"CCRO3\", \"CIEL3\", \"CMIG4\", \"COGN3\", \"CRFB3\",\n        \"CSAN3\", \"CSNA3\", \"CVCB3\", \"CYRE3\", \"ECOR3\", \"EGIE3\", \"ELET3\", \"ELET6\", \"EMBR3\", \"ENBR3\",\n        \"EQTL3\", \"FLRY3\", \"GGBR4\", \"GNDI3\", \"GOAU4\", \"GOLL4\", \"HAPV3\", \"HGTX3\", \"HYPE3\", \"IGTA3\",\n        \"IRBR3\", \"ITSA4\", \"ITUB4\", \"JBSS3\", \"KLBN11\", \"LAME4\", \"LREN3\", \"MRFG3\",\n        \"MRVE3\", \"MULT3\", \"NTCO3\", \"PCAR4\", \"PETR3\", \"PETR4\", \"QUAL3\", \"RADL3\",\n        \"RAIL3\", \"RENT3\", \"SANB11\", \"SBSP3\", \"SMLS3\", \"SULA11\", \"SUZB3\", \"TAEE11\",\n        \"TIMP3\", \"TOTS3\", \"UGPA3\", \"USIM5\", \"VALE3\", \"VIVT4\", \"VVAR3\", \"WEGE3\", \"YDUQ3\"]\n\n# sem \"MGLU3\", muito estranho\n\ndf_sort = df.set_index([\"ticker\", \"datetime\"]).sort_index()\n\ntss = []\nfor ticker in ibov:  \n    ts = df_sort.xs(ticker).close\n    ts.name = ticker\n    tss.append(ts)\n\nibov_prices = pd.concat(tss,1).interpolate(\"linear\", limit_direction=\"both\")[initial_date:final_date]\nibov_returns = ibov_prices.pct_change().dropna() \n\n# subset of tickers\ntickers = [\"ITSA4\", \"BPAN4\", \"VVAR3\"]\ntss = []\nfor ticker in tickers:  \n    ts = df_sort.xs(ticker).close\n    ts.name = ticker\n    tss.append(ts)\n\nprices = pd.concat(tss,1).interpolate(\"linear\", limit_direction=\"both\")[initial_date:final_date]\nreturns = prices.pct_change().dropna()\ndel df_sort, df\n\n\n# display\ndisplay(HTML(\"<h3>Price dataset<\/h3>\"))\ndisplay(HTML(\"<br><b>head<b>\"))\ndisplay(HTML(prices.head(2).to_html()))\ndisplay(HTML(\"<br><b>tail<b>\"))\ndisplay(HTML(prices.tail(2).to_html()))\ndisplay(HTML(\"<br><b>shape = {}<b>\".format(prices.shape)))","521fce34":"p1 = [1,0,0]\nreturn1 = prices.dot(p1).pct_change().dropna()\nreturn1.name = \"itsa4_returns\"\n\np2 = [0,1,0]\nreturn2 = prices.dot(p2).pct_change().dropna()\nreturn2.name = \"bpan4_returns\"\n\np3 = [0,0,1]\nreturn3 = prices.dot(p3).pct_change().dropna()\nreturn3.name = \"vvar3_returns\"\n\np4 = [0.33,0.33,0.33]\nreturn4 = prices.dot(p4).pct_change().dropna()\nreturn4.name = \"combined_returns\"","55d0e5fc":"n1 = pd.Series(np.random.normal(0,1,550))\nn2 = pd.Series(np.random.normal(-3,1,550))\n\n\nfig, ax = plt.subplots(figsize = (12,6))\nrhos = [0.25,0.75]\nmarkers = [\"darkred\", \"darkblue\"]\nfor rho, m in zip(rhos,markers):\n\n    new = pd.concat([n1.sample(frac=1-rho), n2.sample(frac=rho)])\n    skew = new.skew()\n    if skew > 0:\n        msg =  \"skewed to the right\"\n    elif -0.5 <= skew <= 0.5:\n        msg =  \"symmetric\"\n    else:\n        msg =  \"skewed to the left\"\n    \n    sns.distplot(new, hist=False, kde=True, \n                 bins=int(180\/5), color = m, \n                 label =\"{}\\n\".format(msg) + r\"$\\rho$ = {:.2f} | skew = {:.2f}\".format(rho, skew),\n                 kde_kws={'linewidth': 4}, ax=ax)\n    ax.axvline(new.mean(),0, 140, ls=\"--\", color=m, label=\"mean = {:.3f}\".format(rho, new.mean()));\n    ax.axvline(new.median(),0, 140, ls=\":\", color=m, label=\"median = {:.3f}\".format(rho, new.median()));\n    \nax.legend(loc=\"best\");\n\nrhos = np.linspace(0,1,500)\nskews = []\nfor rho in rhos:\n    new = pd.concat([n1.sample(frac=1-rho), n2.sample(frac=rho)])\n    skews.append(new.skew())\n\nskews = pd.Series(skews, index=rhos)  \nskews.name = \"Skewness\"\nskews.index.name = r\"$\\rho$\"\n\nfig, ax = plt.subplots(figsize =(12,6))\nskews.plot(ax=ax);\nax.axhline(0,0, 140, ls=\"--\", color=\"k\");\nax.legend(loc=\"best\");","1638265e":"size = prices.shape[0]\ntime = prices.index\n\nn1 = pd.Series(np.random.normal(0.0115,1,size))\nn2 = pd.Series(np.random.normal(-0.0015,1,size))\n\n\nrho = 0.25\nmost_positive = pd.concat([n1.sample(frac=1-rho), n2.sample(frac=rho)]).sample(frac=1,replace=False)\nmost_positive.index = time\nmost_positive.name = \"most positive\"\n\nrho = 0.75\nmost_negative = pd.concat([n1.sample(frac=1-rho), n2.sample(frac=rho)]).sample(frac=1,replace=False)\nmost_negative.index = time\nmost_negative.name = \"most negative\"\n\n\ndf = pd.concat([most_negative, most_positive],1)\nfig, ax = plt.subplots(figsize =(12,6))\ndf.cumsum().plot(ax=ax);\nax.axhline(0,0, 140, ls=\"--\", color=\"k\");\n\nplot_2_returns_skew(most_positive, most_negative)","e519c4d9":"df = pd.concat([return1, return2, return3, return4],1)\nfig, ax = plt.subplots(figsize =(12,6))\ndf.cumsum()[[return1.name, return2.name]].plot(ax=ax);\nax.axhline(0,0, 140, ls=\"--\", color=\"k\");\n\nplot_2_returns_skew(return1, return2)\n\ndf.columns = [c.split(\"_\")[0] for c in df.columns]\nrolling = df.rolling(100).skew()[[\"itsa4\", \"bpan4\"]]\nfig, ax = plt.subplots(figsize=(15,5))\nrolling.plot(ax=ax);\nax.axhline(0,0, 140, ls=\"--\", color=\"k\");\nax.legend(loc=\"best\");\nax.set_title(\"Rolling Skewness (sample size = 100)\");\n\nibov_skew = ibov_returns.skew()\nsubset_skew = df[[\"itsa4\", \"bpan4\"]].skew()\n\nfig, ax = plt.subplots(figsize=(6,6))\nsns.boxplot(ibov_skew,orient=\"v\",ax=ax)\nsns.swarmplot(subset_skew,orient=\"v\", color=\"k\",ax=ax, size=15.0, label =\"itsa4 and bpan4\");\nax.legend(loc=\"best\");\nax.set_title(\"Subset Skewness compared with ibov\");","a226835f":"noise = pd.Series(np.random.normal(0,1,500))\nnoise.name = \"noise\"\n\nall_ts = [noise, return1, return2, return3, return4]\n\nfor ts in all_ts:\n    display(HTML(test_normality_skewness(ts).to_html()))","224d1751":"n1 = pd.Series(np.random.normal(0,1,550))\nn2 = pd.Series(np.random.normal(0,5,550))\n\n\nfig, ax = plt.subplots(figsize = (12,6))\nrhos = [0.25,0.5,0.75]\nmarkers = [\"darkred\", \"darkgreen\", \"darkblue\"]\nfor rho, m in zip(rhos,markers):\n\n    new = pd.concat([n1.sample(frac=1-rho), n2.sample(frac=rho)])\n    sns.distplot(new, hist=False, kde=True, \n                 bins=int(180\/5), color = m, \n                 label =r\"$\\rho$ = {:.2f} | kurtosis = {:.2f}\".format(rho, new.kurtosis()),\n                 kde_kws={'linewidth': 4, \"alpha\": 0.8}, ax=ax)\n    \nax.legend(loc=\"best\");\n\nrhos = np.linspace(0,1,500)\nkurtosis = []\nfor rho in rhos:\n    new = pd.concat([n1.sample(frac=1-rho), n2.sample(frac=rho)])\n    kurtosis.append(new.kurtosis())\n\nkurtosis = pd.Series(kurtosis, index=rhos)  \nkurtosis.name = \"Kurtosis\"\nkurtosis.index.name = r\"$\\rho$\"\n\nfig, ax = plt.subplots(figsize =(12,6))\nkurtosis.plot(ax=ax);\nax.axhline(0,0, 140, ls=\"--\", color=\"k\");\nax.legend(loc=\"best\");","2abc99ad":"### Cleaning\nprint('removing the repository')\nsubprocess.call(['rm', '-rf', REPO_NAME])","eee288d6":"# Skewness and Kurtosis\n\n### Adding Vol4life repo","d3ab7ef2":"### All Imports and data paths","2f2f7a3b":"## Skewness\n\n### Example using a combination of two normal distributions","bf216613":"### Loading market data and selecting a subset of tickers","b79bb0b6":"## Kurtosis\n### Example","df22c41a":"### Plot functions","90675610":"### Return Skewness: Artificial Example","dc94ef28":"## Defining four portfolios' returns","9bd12ee4":"Let $\\{x_1 ,\\dots , x_T \\}$ be a random sample of $X$ with $T$ observations. Under the normality assumption, the sample skewness is distributed asymptotically as normal with zero mean and variances $6\/T$. Given an asset return series $\\{r_1 ,\\dots , r_T\\}$, to test the skewness of the returns, we consider the null hypothesis $H_0 : S(r) = 0$ versus the alternative hypothesis $H_a : S(r) \\not= 0$. The t-ratio statistic of the sample is\n\n\\begin{equation}\nt = \\frac{\\hat{S}(r)}{\\sqrt{6\/T}}\n\\end{equation}\n\nwhere $\\hat{S}(r)$ is the sample skewness. The decision rule is as follows. Reject the null hypothesis at the $\\alpha$ significance\nlevel, if $|t| > Z_{\\alpha\/2}$ , where $Z_{\\alpha\/2}$ is the upper $100(\\alpha\/2)$th quantile of the standard normal distribution.\n","fc39003e":"### Return Skewness: Historical Data"}}