{"cell_type":{"6b2de4fd":"code","9ed9a9fc":"code","113c187c":"code","89afe0e0":"code","f109fdb1":"code","9e805a07":"code","3f5e28a6":"code","fc4fd947":"code","c2f039cf":"code","24d3d318":"code","26957775":"code","f8e0713a":"code","e74eb42b":"code","8a472da4":"code","e2b11bb6":"code","6a21bac2":"code","7627c288":"code","b42364b6":"code","a8eadd98":"code","36eab79f":"code","c17a3fa8":"code","127a980c":"code","8ee76c9a":"code","084480ce":"code","9825e3aa":"code","2fc6a29c":"code","66387444":"code","84707da3":"code","e936c390":"code","63c86060":"code","a2d3c136":"code","f57d898d":"code","f53e5c96":"code","ad053c1a":"code","983a9bb7":"code","679be43e":"code","76b683f9":"code","151e4e35":"code","a38e93c8":"code","573954b4":"code","51b34164":"code","7ee88688":"code","bd1d8c24":"code","1f39913a":"code","c850cb7a":"code","5ff1f5d1":"code","05d42ee7":"code","fdba310c":"code","b318bff2":"code","e3fe95e7":"code","d767f767":"code","d5f45348":"code","4c4c07ac":"code","11ed4e88":"markdown","1ff13b62":"markdown","de4796c2":"markdown","6599c065":"markdown","9dc80218":"markdown","d656f2a0":"markdown","49009eda":"markdown","af36679d":"markdown","56db738e":"markdown","6a078d72":"markdown","6cd6c631":"markdown","b7c491fa":"markdown","4e670da9":"markdown","e609dc9b":"markdown","8390ce36":"markdown","bbd2ea1b":"markdown","c189d6a2":"markdown","aa994d42":"markdown","749861e8":"markdown","b22ddff4":"markdown","e8987fbc":"markdown","20d3233e":"markdown","917c3d30":"markdown","85fec838":"markdown","c738ca02":"markdown","42d4996d":"markdown","ba5b8387":"markdown","28bc4b85":"markdown","53053896":"markdown","86f01b29":"markdown","795bdd41":"markdown","2b37fcbc":"markdown","81fbbef3":"markdown","b35d43d4":"markdown","c5412185":"markdown","71927c80":"markdown","d4ce2a7b":"markdown","c249439d":"markdown","873fcd45":"markdown","c5b3bd21":"markdown","6875e2c5":"markdown","d052ce46":"markdown","ef17b0bc":"markdown","c28a1bbe":"markdown","87ee81a1":"markdown","3549f2a1":"markdown","dc82d813":"markdown","07235094":"markdown","04218ab6":"markdown","e0edb9b0":"markdown","e6f6815e":"markdown","f438589b":"markdown","5caf8f11":"markdown","bf40c562":"markdown","abca47f2":"markdown","aacacc6c":"markdown","cbf39e5f":"markdown","399e7b83":"markdown","0f9fb8ba":"markdown","a279139a":"markdown","1c56615a":"markdown"},"source":{"6b2de4fd":"# Before we start, we need to import the necessary libraries.\nimport numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt","9ed9a9fc":"# Dummy Dataset\ndata = np.array([3,1,4,1,5,9,2,6,5])","113c187c":"plt.plot(data)  # plot data\nplt.show()  # show data","89afe0e0":"# Dummy Dataset\nx = np.array([1,2,3])\ny = np.array([1,4,9])","f109fdb1":"plt.plot(x, y)  # (x axis, y axis)\nplt.show()","9e805a07":"x = np.array([1,2,3])\ny = np.array([1,4,9])\n\nplt.title(\"test\") # Graph Title\nplt.xlabel(\"x\") # X axis label\nplt.ylabel(\"y\") # Y axis label\n\nplt.plot(x, y)\nplt.show()","3f5e28a6":"x = np.array([1,2,3])\ny = np.array([1,4,9])\n\n# Fontsize\nplt.title(\"test\", fontsize = 20)\nplt.xlabel(\"x\", fontsize = 20)\nplt.ylabel(\"y\", fontsize = 20)\n\nplt.plot(x, y)\nplt.show()","fc4fd947":"x = np.array([1,2,3])\ny = np.array([1,4,9])\n\nplt.title(\"test\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.plot(x, y)\n\n# Legend\nplt.legend([\"Blue Team\"])\nplt.show()","c2f039cf":"x = np.array([1,2,3])\ny = np.array([1,4,9])\n\nplt.title(\"test\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.plot(x, y)\n\n# legend(loc)\nplt.legend([\"Blue Team\"], loc=1)\nplt.show()","24d3d318":"x = np.array([1,2,3])\ny = np.array([1,4,9])\n\nplt.title(\"test\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\n\n# color\u3001linewidth\u3001linestyle\nplt.plot(x, y, color='red', linewidth=2, \n         linestyle='--')\n\nplt.legend([\"Blue Team\"], loc=1)\nplt.show()","26957775":"x = np.linspace(-1, 1, 50)\n\ny1 = x + 1\ny2 = -x*0.5\n\nplt.plot(x, y1)\nplt.plot(x, y2)\n\n# Be careful of the legend order\nplt.legend([\"y = x + 1\", \"y = -0.5x\"])\nplt.show()","f8e0713a":"# Change the Scales of X axis\nx = np.linspace(-5, 5, 50)  \n\n# The scale of Y axis will be changed correspondingly\ny1 = x + 1\ny2 = -x*0.5\n\nplt.plot(x, y1)\nplt.plot(x, y2)\nplt.legend([\"y = x + 1\", \"y = -0.5x\"])\nplt.show()","e74eb42b":"x = np.linspace(-5, 5, 50)\ny1 = x + 1\ny2 = -x*0.5\nplt.plot(x, y1)\nplt.plot(x, y2)\n\nplt.xlim((2,3))  # limit X axis \nplt.ylim((4,8)) # limit Y axis\nplt.legend([\"y = x + 1\", \"y = -0.5x\"])\nplt.show()","8a472da4":"# Start you answer here","e2b11bb6":"x = np.linspace(-1, 1, 50)\ny = 2*x + 1\n\nplt.plot(x, y)\nplt.legend([\"y = 2x + 1\"])\nplt.show()","6a21bac2":"# Start you answer here","7627c288":"x = np.linspace(-1, 1, 50)\ny = x**2\n\nplt.plot(x, y)\nplt.legend([\"y = x^2\"])\nplt.show()","b42364b6":"# Start you answer here","a8eadd98":"x = np.arange(0, 10, 0.01)\ny = np.sin(x)\n\nplt.plot(x, y)\nplt.show()","36eab79f":"# use this package for \"e\"\nimport math\ne = math.e\n\n# Start you answer here","c17a3fa8":"x = np.arange(-10, 10, 0.1)\ny = 1 \/ (1 + e**-x)\n\nplt.plot(x, y)\nplt.show()","127a980c":"# Dummy Dataset\nScore = np.array([20, 35, 30, 35, 27])\n\nplt.bar([0,1,2,3,4], Score)\nplt.show()","8ee76c9a":"height = np.array([10, 45, 30, 15, 50])\n\nplt.bar(x=[0,1,2,3,4], height=height, \n        color=\"green\", width=0.5)\nplt.show()","084480ce":"height1 = np.array([10, 45, 30, 15, 50])\nheight2 = np.array([35, 15, 20, 15, 20])\n\nplt.bar(x=[0,1,2,3,4], height=height1, color=\"green\", width=0.5)\n\n# set bottom = height1, means start plotting height2 base on height1.\nplt.bar(x=[0,1,2,3,4], height=height2, bottom=height1, color=\"orange\", width=0.5) \n\nplt.legend(['height1','height2'])\nplt.show()","9825e3aa":"price = np.array([10, 45, 30, 15, 50])\n\n# error bar needs standard deviation data for each bar.\nstd = np.array([2, 5, 8, 3, 1])\n\n# yerr\nplt.bar(x=[0,1,2,3,4], height=price, yerr = std,\n        color=\"green\", width=0.5)\n\nplt.show()","2fc6a29c":"price = np.array([10, 45, 30, 15, 50])\nstd = np.array([2, 5, 8, 3, 1])\n\nplt.xlabel(\"Stock\")\nplt.ylabel(\"Price\")\nplt.title(\"Stock Price\")\nplt.bar(x=[0,1,2,3,4], height=price, yerr = std,\n        color=\"green\", width=0.5)\n\nplt.show()","66387444":"price = np.array([10, 45, 30, 15, 50])\nstd = np.array([2, 5, 8, 3, 1])\n\n# Instead of [0,1,2,3,4], put the categories you need for each bar.\nx_axis = [\"APPLE\", \"AMAZON\", \"YAHOO\", \"GOOGLE\", \"FACEBOOK\"]\n\nplt.xlabel(\"Stock\")\nplt.ylabel(\"Price\")\nplt.title(\"Stock Price\")\nplt.bar(x=x_axis, height=price, yerr = std,\n        color=\"green\", width=0.5)\n\nplt.show()","84707da3":"price = np.array([10, 45, 30, 15, 50])\nstd = np.array([2, 5, 8, 3, 1])\nx_axis = [\"APPLE\", \"AMAZON\", \"YAHOO\", \"GOOGLE\", \"FACEBOOK\"]\n\nplt.xlabel(\"Stock\")\nplt.ylabel(\"Price\")\nplt.title(\"Stock Price\")\nplt.bar(x=x_axis, height=price, yerr = std,\n        color=\"green\", width=0.5)\n\nplt.grid(True)\nplt.show()","e936c390":"price = np.array([10, 45, 30, 15, 50])\nstd = np.array([2, 5, 8, 3, 1])\nx_axis = [\"APPLE\", \"AMAZON\", \"YAHOO\", \"GOOGLE\", \"FACEBOOK\"]\n\nplt.xlabel(\"Stock\")\nplt.ylabel(\"Price\")\nplt.title(\"Stock Price\")\nplt.bar(x=x_axis, height=price, color=\"green\", width=0.5)\n\n# add annotations\nfor x, y in zip(x_axis, price):\n    plt.text(x, y, y, ha='center', va='bottom')\n\nplt.grid(True)\nplt.show()","63c86060":"bitcoin = pd.read_csv(\"\/kaggle\/input\/Bitcoin.csv\")\nbitcoin.head()","a2d3c136":"# Start you answer here","f57d898d":"# set graph size\nfig=plt.figure(figsize=(12,8))\n\nplt.grid(True)\nplt.plot(bitcoin.Date, bitcoin.Price)\nplt.xticks(rotation=30)\n\nfor x, y in zip(bitcoin.Date, bitcoin.Price):\n    plt.text(x, y, y, ha='center', va='bottom')","f53e5c96":"# Start you answer here","ad053c1a":"fig=plt.figure(figsize=(15,8))\n\nplt.xticks(rotation=30)\nplt.grid(True)\nplt.bar(bitcoin.Date, bitcoin.Price)\n\nfor x, y in zip(bitcoin.Date, bitcoin.Price):\n    plt.text(x, y, y, ha='center', va='bottom')","983a9bb7":"# import dataset that will be used.\nworld = pd.read_csv(\"\/kaggle\/input\/world2015.csv\")\nworld.head()","679be43e":"fig=plt.figure(figsize=(15,8))\n\nplt.scatter(world.GDP_per_capita, world.Life_expectancy)","76b683f9":"fig=plt.figure(figsize=(15,8))\n\n# calculate the size based on population for each country\nsize = world.Population \/ 1e6 # 1e6 = 1,000,000\n\nplt.scatter(world.GDP_per_capita, world.Life_expectancy, s=size, alpha = 0.5)\n\nplt.show()","151e4e35":"fig=plt.figure(figsize=(15,8))\n\n# first create map dictionary\nmap_dict = {      \n    'Asia':'red',\n    'Europe':'green',\n    'Africa':'blue',\n    'North America':'yellow',\n    'South America':'yellow',\n    'Oceania':'black'\n}\n\n# Then, use 'map'function to change the color by continent.\ncolors = world.Continent.map(map_dict)\n\nsize = world.Population \/ 1e6\nplt.scatter(world.GDP_per_capita, world.Life_expectancy, c=colors, s=size, alpha = 0.5)\nplt.show()","a38e93c8":"# Start you answer here","573954b4":"fig=plt.figure(figsize=(15,8))\n\nmap_dict = {      \n    'Asia':'red',\n    'Europe':'green',\n    'Africa':'blue',\n    'North America':'yellow',\n    'South America':'yellow',\n    'Oceania':'black'\n}\ncolors = world.Continent.map(map_dict)\nfig=plt.figure(figsize=(15,8))\nsize = world.Population \/ 1e6\n\nplt.xlabel(\"GDP_per_capita\", size = 20)\nplt.ylabel(\"Population(Billion)\", size = 20)\nplt.title(\"Population & GDP_per_capita\", size = 20)\n\nplt.scatter(world.GDP_per_capita, world.Population, c=colors, s=size, alpha = 0.5)\nplt.grid(True)\nplt.show()","51b34164":"# Dummy Dataset\nlabels=['Python','Java','C++','Ruby']\nvalues=[20,30,40,10]\n\ncolors=['yellow','green','red','blue']\n\nplt.pie(values, labels=labels, colors=colors)\nplt.title(\"Pie Chart\")\nplt.show()","7ee88688":"labels=['Python','Java','C++','Ruby']\nvalues=[20,30,40,10]\ncolors=['yellow','green','red','blue']\n\n# figsize(horizontal size, vertial size)\n# but for pie chart, both horizontal and vertial size will be the min(h-size, v-size).\nfig=plt.figure(figsize=(5,5))\n\n# Try the following code.\n# fig=plt.figure(figsize=(5,50))\n\nplt.pie(values, labels=labels, colors=colors)\nplt.title(\"Pie Chart\")\nplt.show()","bd1d8c24":"labels=['Python','Java','C++','Ruby']\nvalues=[20,30,40,10]\ncolors=['yellow','green','red','blue']\n\nfig=plt.figure(figsize=(5,5))\n\n# shadow\nplt.pie(values, labels=labels, colors=colors, shadow = True)\nplt.title(\"Pie Chart\")\nplt.show()","1f39913a":"labels=['Python','Java','C++','Ruby']\nvalues=[20,30,40,10]\ncolors=['yellow','green','red','blue']\n\n# This will separate parts away from the center of the graph.\nexplode = [0.2, 0, 0, 0]\n\nfig=plt.figure(figsize=(5,5))\nplt.pie(values, labels=labels, colors=colors, \n        shadow = True, explode = explode)\nplt.title(\"Pie Chart\")\nplt.show()","c850cb7a":"labels=['Python','Java','C++','Ruby']\nvalues=[200,300,400,100] # new value list\ncolors=['yellow','green','red','blue']\nexplode = [0.2, 0, 0, 0]\n\nfig=plt.figure(figsize=(5,5))\n\n# autopct will show the percentage of each parts on the graph.\nplt.pie(values, labels=labels, colors=colors, \n        shadow = True, explode = explode, autopct='%0.1f%%')\nplt.title(\"Pie Chart\")\nplt.show()","5ff1f5d1":"labels=['Python','Java','C++','Ruby']\nvalues=[20,30,40,10]\ncolors=['yellow','green','red','blue']\nexplode = [0.2, 0, 0, 0]\n\nfig=plt.figure(figsize=(5,5))\n\n# pctdistance\uff1achange the location of numbers added by autopct.\nplt.pie(values, labels=labels, colors=colors, \n        shadow = True, explode = explode, \n        autopct='%0.1f%%', pctdistance=0.3)\nplt.title(\"Pie Chart\")\nplt.show()","05d42ee7":"labels=['Python','Java','C++','Ruby']\nvalues=[20,30,40,10]\ncolors=['yellow','green','red','blue']\nexplode = [0.2, 0, 0, 0]\n\nfig=plt.figure(figsize=(5,5))\n\n# radius: change the size of pie.\nplt.pie(values, labels=labels, colors=colors, \n        shadow = True, explode = explode, \n        autopct='%0.1f%%', pctdistance=0.3,\n       radius = 1.5)\n\nplt.title(\"Pie Chart\")\nplt.show()","fdba310c":"labels=['Python','Java','C++','Ruby']\nvalues=[20,30,40,10]\ncolors=['yellow','green','red','blue']\nexplode = [0.2, 0, 0, 0]\n\nfig=plt.figure(figsize=(5,5))\n\n# wedgeprops = {\"linewidth\":  , \"width\":  , \"edgecolor\":  }\nplt.pie(values, labels=labels, colors=colors, \n        shadow = True, explode = explode, \n        autopct='%0.1f%%', pctdistance=0.8,\n       radius = 1, wedgeprops={\"linewidth\": 3, \"width\": 0.4, \"edgecolor\": \"white\"})\nplt.title(\"Pie Chart\")\nplt.show()","b318bff2":"# startangle\nlabels=['Python','Java','C++','Ruby']\nvalues=[20,30,40,10]\ncolors=['yellow','green','red','blue']\nexplode = [0.2, 0, 0, 0]\n\nfig=plt.figure(figsize=(5,5))\n\n# startangle\nplt.pie(values, labels=labels, colors=colors, \n        shadow = True, explode = explode, \n        autopct='%0.1f%%', pctdistance=0.8,\n       radius = 1, wedgeprops={\"linewidth\": 3, \"width\": 0.4, \"edgecolor\": \"white\"},\n       startangle = 180)\n\nplt.title(\"Pie Chart\")\nplt.show()","e3fe95e7":"labels=['Python','Java','C++','Ruby']\nvalues=[20,30,40,10]\ncolors=['yellow','green','red','blue']\nexplode = [0.2, 0, 0, 0]\n\nfig=plt.figure(figsize=(5,5))\n\n# textprops\nplt.pie(values, labels=labels, colors=colors, \n        shadow = True, explode = explode, \n        autopct='%0.1f%%', pctdistance=0.8,\n       radius = 1, wedgeprops={\"linewidth\": 3, \"width\": 0.4, \"edgecolor\": \"white\"},\n       startangle = 180, textprops = {\"color\": \"purple\", \"weight\": \"bold\"})\n\nplt.title(\"Pie Chart\")\nplt.show()","d767f767":"# pei chart 1\nlabels=['Python','Java','C++','Ruby']\nvalues=[20,30,40,10]\ncolors=['yellow','green','red','blue']\nexplode = [0.2, 0, 0, 0]\n\n# pie chart 2\nlabels2=[\"Amater\", \"Pro\",\n       \"Amater\", \"Pro\",\n       \"Amater\", \"Pro\",\n       \"Amater\", \"Pro\"]\nvalues2 = [10,10,20,10,15,25,3,7]\ncolors2 = [\"greenyellow\", \"khaki\",\n          \"limegreen\", \"olive\",\n          \"darkorange\", \"salmon\",\n          \"skyblue\", \"violet\"]\nexplode2 = [0.2, 0.2, 0, 0, 0, 0, 0, 0]","d5f45348":"# Start you answer here","4c4c07ac":"fig=plt.figure(figsize=(8,8))\n\n# pie 1\nplt.pie(values, labels=labels, colors=colors, \n        shadow = False, explode = explode, \n        autopct='%0.1f%%', pctdistance=1.3,\n        radius = 1, wedgeprops={\"linewidth\": 3, \"width\": 0.4, \"edgecolor\": \"white\"},\n        textprops = {\"fontsize\": 13, \"color\": \"purple\", \"weight\": \"bold\"})\n\n# pie 2\nplt.pie(values2, labels=labels2, colors=colors2, \n        shadow = False, explode = explode2, \n        autopct='%0.1f%%', pctdistance=0.7,\n        radius = 0.7, wedgeprops={\"linewidth\": 3, \"width\": 0.4, \"edgecolor\": \"white\"},\n        textprops = {\"fontsize\": 13, \"color\": \"white\", \"weight\": \"bold\"})\n\nplt.title(\"Most Popular Programming Language\", size=20)\nplt.show()","11ed4e88":"# Conclusion\n\nThank you very nuch for your votes and comments.\n\nIf you have any questions or suggests, please feel free to message me.","1ff13b62":"<a id=\"2.3\"><\/a> <br>\n\n## 2.3 Stack Bar Chart\n\n- When create stack bar chart, the only parameter you need to set is `bottom`. Which means the start point for the next bar.\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","de4796c2":"<a id=\"3.1\"><\/a> <br>\n\n## 3.1 General Plot\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","6599c065":"<a id=\"1.8\"><\/a> <br>\n\n## 1.8 Multiple Charts on One Graph\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","9dc80218":"**Sample Answer**","d656f2a0":"<a id=\"2.7\"><\/a> <br>\n\n## 2.7 Grid\n\n- `grid` can help you compare the height of each bar. **BE CAREFUL**, grid could also increase the 'messy' level of the graph. If one graph contains too much information, it will be considered as inefficient, especially when you show it to your clients.\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","49009eda":"<a id=\"3\"><\/a> <br>\n\n# 3. Scatter Chart\n\n-  If you are not familiar with scatter charts, here are some [examples](https:\/\/matplotlib.org\/3.1.1\/gallery\/index.html) that you could have a look at before going to the coding part.\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","af36679d":"<a id=\"4.7\"><\/a> <br>\n\n## 4.7 Radius\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","56db738e":"<a id=\"1.3\"><\/a> <br>\n## 1.3 Labels & Title\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","6a078d72":"<a id=\"3.2\"><\/a> <br>\n\n## 3.2 Size & Alpha\n\n- `Size`: let's use the population as the size for each bubble.\n- `Alpha`: set the transpancy level for bubbles.\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","6cd6c631":"<a id=\"2.6\"><\/a> <br>\n\n## 2.6 Categorical Scales\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","b7c491fa":"We can see from the graph that `population` and `GDP_per_capita` doesn't show strong correlation with each others.","4e670da9":"<a id=\"2.4\"><\/a> <br>\n\n## 2.4 Error Bar\n\n- Error Bars often represent one standard deviation of uncertainty. For more details, please check [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Error_bar)\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","e609dc9b":"In this tutorial, instead of just give you the basic concepts, I will introduce more business examples as well as exercises.\nFor more Matplotlib tutorials, please kindly find the link below.\n\n- [Matplotlib Tutorial with Exercises - 1](https:\/\/www.kaggle.com\/leonlxy\/matplotlib-tutorial-with-exercises-1)","8390ce36":"<a id=\"4\"><\/a> <br>\n\n# 4. Pie Chart\n\n-  If you are not familiar with pie charts, here are some [examples](https:\/\/matplotlib.org\/3.1.1\/gallery\/index.html) that you could have a look at before going to the coding part.\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","bbd2ea1b":"Other than this, `legend` has another 2 different ways to use this method. Please check [official documentation](https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.legend.html). ","c189d6a2":"<a id=\"4.2\"><\/a> <br>\n\n## 4.2 Figsize\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","aa994d42":"<a id=\"E.F\"><\/a> <br>\n\n### F. Bar Chart\n\n- Please plot the price movement for each date by using `Bar Chart`.\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","749861e8":"<a id=\"4.5\"><\/a> <br>\n\n## 4.5 Autopct\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)<a id=\"4.1\"><\/a> <br>","b22ddff4":"<a id=\"3.4\"><\/a> <br>\n\n## 3.4 Exercises - Population & GDP per Capita\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","e8987fbc":"<a id=\"4.4\"><\/a> <br>\n\n## 4.4 Explode\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","20d3233e":"**Sample Answer**","917c3d30":"<a id=\"1.10\"><\/a> <br>\n\n## 1.10 Specify Scales of Axes - 2\n\n- Another method is by limiting the showing stage of Chart.\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","85fec838":"**Sample Answer**","c738ca02":"<a id=\"4.8\"><\/a> <br>\n\n## 4.8 Wedgeprops\n\n- Dict of arguments passed to the wedge objects making the pie. For more details, please check the [official documentation](https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.axes.Axes.pie.html).\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","42d4996d":"<a id=\"E.B\"><\/a> <br>\n\n### B. $y = x^2$\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","ba5b8387":"<a id=\"1.11\"><\/a> <br>\n\n## 1.11 Exercises - Mathematical Graphs\n\n- For the next 4 exercises, try to plot the mathematical functions with matplotlib.\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","28bc4b85":"<a id=\"E.D\"><\/a> <br>\n\n### D. $y = \\frac{1}{1 + e^(-x)}$ ([Wiki: Sigmoid Function](https:\/\/en.wikipedia.org\/wiki\/Sigmoid_function))\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","53053896":"<a id=\"E.E\"><\/a> <br>\n\n### E. Line Chart\n\n- Please plot the price movement for each date by using `Line Chart`.\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","86f01b29":"<a id=\"4.1\"><\/a> <br>\n\n## 4.1 General Plot\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","795bdd41":"<a id=\"2.9\"><\/a> <br>\n\n## 2.9 Exercises - Bitcoin Price\n\n- For the following 2 exercise, we will use adjusted bitcoin price dataset which contains `Date` and `Price` for that day. Let's have a look at our dataset.\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","2b37fcbc":"<a id=\"1.4\"><\/a> <br>\n## 1.4 Fontsize\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","81fbbef3":"<a id=\"1.5\"><\/a> <br>\n## 1.5 Legend\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","b35d43d4":"**Sample Answer**","c5412185":"<a id=\"2.1\"><\/a> <br>\n\n## 2.1 General Plot\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","71927c80":"<a id=\"1.7\"><\/a> <br>\n## 1.7 Line Color & Width & Style\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","d4ce2a7b":"<a id=\"1.1\"><\/a> <br>\n## 1.1 One Axis Chart\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","c249439d":"<a id=\"E.A\"><\/a> <br>\n\n### A. $y = 2x + 1$\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","873fcd45":"<a id=\"3.3\"><\/a> <br>\n\n## 3.3 Color Map\n\n- We will create a new dict for mapping Continent into Color.\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","c5b3bd21":"<a id=\"4.6\"><\/a> <br>\n\n## 4.6 Pctdistance\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","6875e2c5":"<a id=\"Top\"><\/a> <br>\n\n# Contents\n\n1. [Line Chart](#1)\n    - 1.1 [One Axis Chart](#1.1)\n    - 1.2 [Two Axes Chart](#1.2)\n    - 1.3 [Labels & Title](#1.3)\n    - 1.4 [Fontsize](#1.4)\n    - 1.5 [Legend](#1.5)\n    - 1.6 [Legend Locations](#1.6)\n    - 1.7 [Line Color & Width & Style](#1.7)\n    - 1.8 [Multiple Charts on One Graph](#1.8)\n    - 1.9 [Specify Scales of Axes - 1](#1.9)\n    - 1.10 [Specify Scales of Axes - 2](#1.10)\n    - 1.11 [Exercises - Mathematical Graphs](#1.11)\n        - A. [$y = 2x + 1$](#E.A)\n        - B. [$y = x^2$](#E.B)\n        - C. [$y = sin(x)$](#E.C)\n        - D. [$y = \\frac{1}{1 + e^(-x)}$](#E.D) ([Wiki: Sigmoid Function](https:\/\/en.wikipedia.org\/wiki\/Sigmoid_function))\n2. [Bar Chart](#2)\n    - 2.1 [General Plot](#2.1)\n    - 2.2 [Bar Color & Width](#2.2)\n    - 2.3 [Stack Bar Chart](#2.3)\n    - 2.4 [Error Bar](#2.4)\n    - 2.5 [Labels & Title](#2.5)\n    - 2.6 [Categorical Scales](#2.6)\n    - 2.7 [Grid](#2.7)\n    - 2.8 [Annotations](#2.8)\n    - 2.9 [Exercises - Bitcoin Price](#2.9)\n        - E. [Line Chart](#E.E)\n        - F. [Bar Chart](#E.F)\n3. [Scatter Chart](#3)\n    - 3.1 [General Plot](#3.1)\n    - 3.2 [Size & Alpha](#3.2)\n    - 3.3 [Color Map](#3.3)\n    - 3.4 [Exercises - Population & GDP per Capita](#3.4)\n        - G. [Scatter Chart](#E.G)\n4. [Pie Chart](#4)\n    - 4.1 [General Plot](#4.1)\n    - 4.2 [Figsize](#4.2)\n    - 4.3 [Shadow](#4.3)\n    - 4.4 [Explode](#4.4)\n    - 4.5 [Autopct](#4.5)\n    - 4.6 [Pctdistance](#4.6)\n    - 4.7 [Radius](#4.7)\n    - 4.8 [Wedgeprops](#4.8)\n    - 4.9 [Startangle](#4.9)\n    - 4.10 [Textprops](#4.10)\n    - 4.11 [Exercises - Concentric Graphs (A little bit difficult)](#4.11)\n        - H. [Pie Chart](#E.H)","d052ce46":"<a id=\"1.6\"><\/a> <br>\n\n## 1.6 Legend Locations\n\n`matplotlib.pyplot.legend(loc)` default: `best`. For more details, please check the [official documentation](https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.legend.html).\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","ef17b0bc":"**Sample Answer**","c28a1bbe":"<a id=\"4.3\"><\/a> <br>\n\n## 4.3 Shadow\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","87ee81a1":"<a id=\"2.8\"><\/a> <br>\n\n## 2.8 Annotations\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","3549f2a1":"<a id=\"2.2\"><\/a> <br>\n\n## 2.2 Bar Color & Width\n\n- `width` usually set within `range [0:1]`. But you could set number that bigger than `1`. Take this as an exercise and see what's the difference.\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","dc82d813":"<a id=\"2\"><\/a> <br>\n\n# 2. Bar Chart\n\n- From this session, we will start learning bar chart with matplotlib. If you are not familiar with bar charts, here are some [examples](https:\/\/matplotlib.org\/3.1.1\/gallery\/index.html) that you could have a look at before going to the coding part.\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","07235094":"<a id=\"E.H\"><\/a> <br>\n\n### H. Pie Chart\n\n- Please create a concentric graphs by using the data below. (You can change the value, color, size, etc. all by yourself.)\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","04218ab6":"The graph is not showing here because within range `(X axis [2:3], Y axis [4:8])`, there is no line in this area.","e0edb9b0":"**Sample Answer**","e6f6815e":"<a id=\"1.2\"><\/a> <br>\n## 1.2 Two Axes Chart\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","f438589b":"This dataset contains `Life_expectancy`, `GDP_per_capita` and `Population` for each country.","5caf8f11":"<a id=\"4.11\"><\/a> <br>\n\n## 4.11 Exercises - Concentric Graphs (A little bit difficult)\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","bf40c562":"<a id=\"1.9\"><\/a> <br>\n\n## 1.9 Specify Scales of Axes - 1\n\n- First method is by Change the Scales of axes.\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","abca47f2":"<a id=\"2.5\"><\/a> <br>\n\n## 2.5 Labels & Title\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","aacacc6c":"<a id=\"E.G\"><\/a> <br>\n\n### G. Scatter Chart\n\n- Please show the relation between `Population` with `GDP_per_capita` by using `Scatter Chart`.\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","cbf39e5f":"<a id=\"1\"><\/a> <br>\n\n# 1. Line Charts\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","399e7b83":"<a id=\"4.9\"><\/a> <br>\n\n## 4.9 Startangle\n\n- `Startangle` will start the pie chart by angle degrees counterclockwise from the x-axis.\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","0f9fb8ba":"<a id=\"E.C\"><\/a> <br>\n\n### C. $y = sin(x)$\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","a279139a":"<a id=\"4.10\"><\/a> <br>\n\n## 4.10 Textprops\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","1c56615a":"**Sample Answer**"}}