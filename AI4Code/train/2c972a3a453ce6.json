{"cell_type":{"df400fd9":"code","fd4f6d83":"code","fee69e1c":"code","9625c781":"code","2b89aac3":"code","6827759f":"code","c2766d78":"code","d33fb116":"code","6eeb7d90":"code","956a90b7":"code","f6c14146":"code","2c2a56ea":"code","0228e412":"code","24c97e0a":"code","3fca973a":"code","6590027b":"code","c6d53bd1":"code","89cedd8a":"code","3aac06cd":"code","2f744001":"code","24121407":"code","f943a7b4":"code","65fc6bdd":"code","357e53e4":"code","e2ecc2ca":"code","763e6bcb":"code","bedea28b":"code","094a20cd":"code","f3e515cd":"code","87d8a10c":"code","bdfb44b6":"code","7dbad9db":"code","cda7c33f":"code","8e4a4fb2":"code","fd5d6bf2":"code","7eca3cc0":"code","f50315ea":"code","1d772f81":"code","a2ee5ef4":"code","679fa731":"code","a2700121":"code","ce0508d7":"code","183e5d18":"code","fab8c820":"code","b882a422":"code","c11ae606":"code","bd95c63d":"code","748cd794":"code","2d7667de":"code","21d76623":"code","b9da1670":"code","d70f8a11":"code","002e1caf":"code","8c552a54":"code","4d0507e5":"code","7a2738a3":"code","014403b8":"code","701a816f":"code","1dc85bf8":"code","70bf7771":"code","f76d80e9":"code","c7ab25e3":"code","4d399cdf":"code","2bddb262":"code","6e08bf69":"code","a5256729":"code","8acba19e":"code","7da1dcb7":"code","bbd4584f":"code","943afa04":"code","c9ff0b15":"code","58a872fb":"code","b6ec0fe0":"code","60c4927d":"code","376bbcd0":"code","6ae412f6":"code","2d08f360":"code","b0742d21":"code","ca05cf14":"code","47685d7b":"code","14f5c4a1":"code","ec6aa332":"code","269b22b0":"code","e891650a":"code","e59bc62e":"code","9ffcc16c":"code","93bbaaf6":"code","63411ba1":"code","8ebd4d3d":"code","9725a9f8":"code","a1cc21ab":"code","7c12de38":"code","b8deadba":"code","a66e134c":"code","2d7f01a5":"code","7d9bb4e0":"code","8401769a":"code","db8dbd23":"code","e4072c28":"code","19f0b5ac":"code","fc3ae9b3":"code","c92fcae8":"code","2c806eb7":"code","3dee55ca":"code","b9d2571c":"code","7be1a94b":"code","dc7e42e3":"code","c38bf101":"code","309355e9":"code","630baa79":"code","9eef673a":"code","0ef1dd94":"code","138270cd":"code","bcc165f9":"code","8143f978":"code","e52da4be":"code","9ccebbc6":"code","b3efab92":"code","02d22153":"markdown","0f2dc3ec":"markdown","22080d15":"markdown","858a9829":"markdown","611fd77c":"markdown","930b51c5":"markdown","31b90848":"markdown","b5bfd15b":"markdown","17edd0f6":"markdown","92259804":"markdown","a8cb4838":"markdown","25e3a5f1":"markdown","2de284ce":"markdown","27d4f230":"markdown","58a8098f":"markdown","bc8aa6f6":"markdown","3ea3bc9b":"markdown"},"source":{"df400fd9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd4f6d83":"#Importing all the required libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split","fee69e1c":"#Loading the train and test dataset\ntrain_data = pd.read_csv('..\/input\/machine-learning-24-hrs-hackathon\/train_SJC.csv')\ntest_data = pd.read_csv('..\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv')","9625c781":"# Size of the dataset \nprint (\"Train data shape:\", train_data.shape)\nprint (\"Test data shape:\", test_data.shape)","2b89aac3":"train_data1=train_data.rename(columns={\"Unnamed: 0\":\"ClaimNumber\",\"Unnamed: 1\":\"DateTimeOfAccident\",\"Unnamed: 3\":\"Age\",\"Unnamed: 4\":\"Gender\",\"Unnamed: 5\":\"MaritalStatus\",\"Unnamed: 6\":\"DependentChildren\",\"Unnamed: 8\":\"WeeklyWages\",\"Unnamed: 9\":\"PartTimeFullTime\",\"Unnamed: 10\":\"HoursWorkedPerWeek\",\"Unnamed: 12\":\"ClaimDescription\",\"Unnamed: 13\":\"InitialIncurredCalimsCost\",\"Unnamed: 14\":'UltimateIncurredClaimCost'},inplace=False)","6827759f":"#Viewing the first 6 rows of the train data\ntrain_data1.head(6)","c2766d78":"#Viewing the first 6 rows of the test data\ntest_data.head(6)","d33fb116":"#Information of test and train data\ntest_data.info()\ntrain_data1.info()","6eeb7d90":"# Describing train data (more info on train data)\ntrain_data1.describe()","956a90b7":"#Describing test data\ntest_data.describe()","f6c14146":"#Checking the missing value in train dataset- showing columnwise missing values\ntrain_data1.isnull().sum()","2c2a56ea":"#Checking the missing value in test dataset- showing columnwise missing values\ntest_data.isnull().sum()","0228e412":"train_data1['DateReported'].value_counts() ","24c97e0a":"#Value counts for marital status\ntrain_data1['MaritalStatus'].value_counts() ","3fca973a":"train_data1['WeeklyWages'].value_counts() ","6590027b":"train_data1['HoursWorkedPerWeek'].value_counts() ","c6d53bd1":"train_data1['DependentsOther'].value_counts()              ","89cedd8a":"train_data1['DaysWorkedPerWeek'].value_counts() ","3aac06cd":"test_data['MaritalStatus'].value_counts() ","2f744001":"train_data1['DateReported']=train_data1['DateReported'].fillna(train_data1['DateReported'].mode()[0])\ntrain_data1['MaritalStatus']=train_data1['MaritalStatus'].fillna(train_data1['MaritalStatus'].mode()[0])\ntrain_data1['WeeklyWages']=train_data1['WeeklyWages'].fillna(train_data1['WeeklyWages'].mode()[0])\ntrain_data1['HoursWorkedPerWeek']=train_data1['HoursWorkedPerWeek'].fillna(train_data1['HoursWorkedPerWeek'].mode()[0])\ntrain_data1['DependentsOther']=train_data1['DependentsOther'].fillna(train_data1['DependentsOther'].mode()[0])\ntrain_data1['DateReported']=train_data1['DateReported'].fillna(train_data1['DateReported'].mode()[0])\ntrain_data1['DaysWorkedPerWeek']=train_data1['DaysWorkedPerWeek'].fillna(train_data1['DaysWorkedPerWeek'].mode()[0])","24121407":"# Again checking the missing values-after replacing them with mode, there are no missing values\ntrain_data1.isnull().sum()","f943a7b4":"test_data['MaritalStatus']=test_data['MaritalStatus'].fillna(test_data['MaritalStatus'].mode()[0])","65fc6bdd":"# Again checking the missing values-after replacing them with mode, there are no missing values\ntest_data.isnull().sum()","357e53e4":"#Showing the monthwise report of DateReported column\n(pd.to_datetime(train_data1['DateReported']).dt.month).value_counts() ","e2ecc2ca":"# Plotting the bar graph of the monthwise report of DateReported column           \n(pd.to_datetime(train_data1['DateReported']).dt.month).value_counts().plot.bar()","763e6bcb":"#Showing the monthwise report of DaysWorkedPerWeek column\n(pd.to_datetime(train_data1['DaysWorkedPerWeek']).dt.month).value_counts()","bedea28b":"# Plotting the bar graph of the monthwise report of DaysWorkedPerWeek column     \n(pd.to_datetime(train_data1['DaysWorkedPerWeek']).dt.month).value_counts().plot.bar()","094a20cd":"#Displaying the value counts for martial status\ntrain_data1['MaritalStatus'].value_counts().plot.bar()","f3e515cd":"test_data['Age'].value_counts()","87d8a10c":"test_data['Age'].value_counts().plot.bar()","bdfb44b6":"test_data['Gender'].value_counts()","7dbad9db":"test_data['Gender'].value_counts().plot.bar()","cda7c33f":"#Showing all the columns\ntrain_data1.columns","8e4a4fb2":"#displaying numerical data\nnum_train_data=train_data1.select_dtypes(include=[float,int])","fd5d6bf2":"#displaying categorical data\ncat_train_data=train_data1.select_dtypes(exclude=[float,int])","7eca3cc0":"num_train_data.head()","f50315ea":"cat_train_data.head()","1d772f81":"train_data1.apply(pd.Series.nunique)","a2ee5ef4":"#Showing all the columns\ntest_data.columns","679fa731":"#displaying numerical data\nnum_test_data=test_data.select_dtypes(include=[float,int])","a2700121":"#displaying categorical data\ncat_test_data=test_data.select_dtypes(exclude=[float,int])","ce0508d7":"num_test_data.head()","183e5d18":"cat_test_data.head()","fab8c820":"train_data2=train_data1.drop(train_data1.index[0])\ntrain_data2.head()","b882a422":"train_data2.plot.box(figsize=(20,12))","c11ae606":"train_data2['UltimateIncurredClaimCost']=train_data2['UltimateIncurredClaimCost'].astype(np.float64)\nlog_UltimateIncurredClaimCost=np.log(train_data2['UltimateIncurredClaimCost'])","bd95c63d":"sns.set_theme(style=\"darkgrid\")\nplt.figure(figsize = (10, 10))\nsns.boxplot(x = 'Gender', y = log_UltimateIncurredClaimCost,  data =train_data2)","748cd794":"sns.set_theme(style=\"darkgrid\")\nplt.figure(figsize = (10, 10))\nsns.boxplot(x = 'MaritalStatus', y = log_UltimateIncurredClaimCost,  data =train_data2)","2d7667de":"plt.figure(figsize=(15,10))\nsns.barplot(x='Age',y='UltimateIncurredClaimCost',data=train_data2)\nplt.xticks(rotation=90)\nplt.show()","21d76623":"plt.figure(figsize=(12,10))\nsns.barplot(x='DependentChildren',y='UltimateIncurredClaimCost',data=train_data2)\nplt.show()","b9da1670":"plt.figure(figsize=(15,10))\nsns.barplot(x='Age',y='UltimateIncurredClaimCost',data=train_data2)\nplt.xticks(rotation=90)\nplt.show()","d70f8a11":"# Displaying histogram for martial status\ntrain_data2['MaritalStatus'].hist()","002e1caf":"# Displaying histogram for age\ntrain_data2['Age'].hist()","8c552a54":"# Displaying histogram for gender\ntrain_data2['Gender'].hist()","4d0507e5":"#Visualizing the martial status of the train dataset\nsns.countplot(data=train_data2,x='MaritalStatus')","7a2738a3":"#Visualizing the age structure of the train dataset\nsns.countplot(data=train_data2,x='Age')","014403b8":"#Visualizing the number of males,females in gender column\nsns.countplot(data=train_data2,x='Gender',palette='hls')","701a816f":"pd.cut(train_data2['DaysWorkedPerWeek'],bins=5)","1dc85bf8":"#Displaying DaysWorkedPerWeek across different categories of gender\nsns.catplot(data=train_data2,x='DaysWorkedPerWeek',col='Gender',kind='violin')","70bf7771":"#Displaying DaysWorkedPerWeek across different categories of martial status\nsns.catplot(data=train_data2,x='DaysWorkedPerWeek',col='MaritalStatus',kind='violin')","f76d80e9":"corr=train_data2.corr()\nsns.heatmap(corr,cmap=\"Blues\")\nplt.title('Heat Map')","c7ab25e3":"train_data2.columns","4d399cdf":"test_data.columns","2bddb262":"train_data2['InitialIncurredCalimsCost'] = pd.to_numeric(train_data2['InitialIncurredCalimsCost'], errors='coerce')\n","6e08bf69":"train_data2['InitialIncurredCalimsCost'].min()","a5256729":"(train_data2['InitialIncurredCalimsCost'] - train_data2['InitialIncurredCalimsCost'].min())\/(train_data2['InitialIncurredCalimsCost'].max()-train_data2['InitialIncurredCalimsCost'].min())","8acba19e":"train_data2['WeeklyWages'] = pd.to_numeric(train_data2['WeeklyWages'], errors='coerce')","7da1dcb7":"train_data2['WeeklyWages'].min()","bbd4584f":"(train_data2['WeeklyWages'] - train_data2['WeeklyWages'].min())\/(train_data2['WeeklyWages'].max()-train_data2['WeeklyWages'].min())","943afa04":"import sklearn.preprocessing as pre","c9ff0b15":"le=pre.LabelEncoder()","58a872fb":"le.fit(train_data2['Gender'])","b6ec0fe0":"le.transform(train_data2['Gender'])","60c4927d":"le.fit(train_data2['Gender'])","376bbcd0":"le.transform(train_data2['Gender'])","6ae412f6":"list_data=['Age', 'Gender','MaritalStatus', 'DependentChildren', 'DependentsOther', 'WeeklyWages','PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek','ClaimDescription', 'InitialIncurredCalimsCost','UltimateIncurredClaimCost']","2d08f360":"for x in list_data:\n  train_data2[x]=le.fit_transform(train_data2[x])","b0742d21":"data_ML=train_data2[list_data]\ndata_test=data_ML.copy","ca05cf14":"data_test=pre.minmax_scale(data_ML.values)","47685d7b":"train_data2.head()","14f5c4a1":"df_train=train_data2.drop(['ClaimNumber', 'DateTimeOfAccident', 'DateReported'], axis = 1)","ec6aa332":"df_train.head()","269b22b0":"df_train.columns","e891650a":"df_train.shape","e59bc62e":"#Splitting the train into X (Independent variable) and Y (Dependent Variable) beacuse here UltimateIncurredClaimCost is a dependent variable.\nX = df_train.drop('UltimateIncurredClaimCost', axis=1)\ny = df_train['UltimateIncurredClaimCost']","9ffcc16c":"from sklearn.model_selection import train_test_split","93bbaaf6":"#Splitting the train data into 70% as training data and 30% as testing data to check the accuracy of the model\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=100)","63411ba1":"# summarize\nprint('Train', X_train.shape, y_train.shape)\nprint('Test', X_test.shape, y_test.shape)","8ebd4d3d":"from sklearn.datasets import make_regression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_regression\nfrom matplotlib import pyplot","9725a9f8":"# feature selection\ndef select_features(X_train, y_train, X_test):\n    fs = SelectKBest(score_func=f_regression, k='all')\n# learn relationship from training data\n    fs.fit(X_train, y_train)\n# transform train input data\n    X_train_fs = fs.transform(X_train)\n# transform test input data\n    X_test_fs = fs.transform(X_test)\n    return X_train_fs, X_test_fs, fs","a1cc21ab":"# load the dataset\nX, y = make_regression(n_samples=3000, n_features=15, n_informative=10, noise=0.1, random_state=1)\n# split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=1)\n# feature selection\nX_train_fs, X_test_fs, fs = select_features(X_train, y_train, X_test)\n# what are scores for the features\nfor i in range(len(fs.scores_)):\n    print('Feature %d: %f' % (i, fs.scores_[i]))\n# plot the scores\n    plt.bar([i for i in range(len(fs.scores_))], fs.scores_)\n    plt.show()\n","7c12de38":"# evaluation of a model using all input features\nfrom sklearn.datasets import make_regression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error\n# load the dataset\nX, y = make_regression(n_samples=3000, n_features=15, n_informative=10, noise=0.1, random_state=1)\n# split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=1)\n# fit the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n# evaluate the model\nyhat = model.predict(X_test)\n# evaluate predictions\nmae = mean_absolute_error(y_test, yhat)\nprint('MAE: %.3f' % mae)\n","b8deadba":"#Obtaining regression coefficient\nnew_model = LinearRegression().fit(X, y.reshape((-1, 1)))\nprint('intercept:', new_model.intercept_)\nprint('slope:', new_model.coef_)","a66e134c":"from sklearn.datasets import make_regression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_regression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error","2d7f01a5":"#loading dataset\nX, y = make_regression(n_samples=3000, n_features=15, n_informative=10, noise=0.1, random_state=1)\n# split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=1)\n# feature selection\nX_train_fs, X_test_fs, fs = select_features(X_train, y_train, X_test)\n# fit the model\nmodel = LinearRegression()\nmodel.fit(X_train_fs, y_train)\n# evaluate the model\nyhat = model.predict(X_test_fs)\nprint(\"Residuals:\")","7d9bb4e0":"rmse=np.sqrt(mae)\nprint(\"Root Mean Squared Error\")\nprint(rmse)","8401769a":"test_data.columns","db8dbd23":"import datetime as dt\ntest_data['DateTimeOfAccident']=pd.to_datetime(test_data['DateTimeOfAccident'],format=\"%Y-%m-%dT%H:%M:%S\")\ntest_data[\"yearofAccident\"] =test_data[\"DateTimeOfAccident\"].dt.year\ntest_data[\"dayofweekAccident\"] = test_data[\"DateTimeOfAccident\"].dt.weekday\ntest_data['monthOfAccident'] =test_data['DateTimeOfAccident'].dt.month","e4072c28":"test_data['DateReported']=pd.to_datetime(test_data['DateReported'],format=\"%Y-%m-%dT%H:%M:%S\")\ntest_data[\"yearofReported\"] =test_data[\"DateReported\"].dt.year\ntest_data[\"dayofweekReported\"] = test_data[\"DateReported\"].dt.weekday\ntest_data['monthOfReported'] =test_data['DateReported'].dt.month","19f0b5ac":"#difference between accident month and reported month\n\ntest_data['Difference_month_accident_and_reported']=(test_data['yearofReported']-test_data['yearofAccident'])*12+(test_data['monthOfReported']-test_data['monthOfAccident'])","fc3ae9b3":"test_data.columns","c92fcae8":"test_data['WeeklyWages']=test_data['WeeklyWages'].astype(np.float64)\ntest_data['WeeklyWages']=test_data['WeeklyWages'].astype(np.int64)","2c806eb7":"# importing label encoder\nfrom sklearn.preprocessing import LabelEncoder\n\n# creating a label encoder\nle = LabelEncoder()\n\n# label encoding for Gender\n# 0 for females, 1 for males\ntest_data['Gender'] = le.fit_transform(test_data['Gender'])\n\n# label encoding for MaritalStatus\n# 0 for Married  1 for Single ,2 for unknown.\ntest_data['MaritalStatus'] = le.fit_transform(test_data['MaritalStatus'])\n\n# lebel encoding for PartTimeFullTime\n# 0 for FullTime and 1 for partTime                                      \ntest_data['PartTimeFullTime']=le.fit_transform(test_data['PartTimeFullTime'])  ","3dee55ca":"x1=test_data['Age']\nx2=test_data['Gender']\nx3=test_data['MaritalStatus']\nx4=test_data['DependentChildren']\nx5=test_data['WeeklyWages']\nx6=test_data['PartTimeFullTime']\nx7=test_data['InitialIncurredCalimsCost']\nx8=test_data['Difference_month_accident_and_reported']","b9d2571c":"UltimateIncurredClaimCost=0.16*x1+0.50*x2+0.046*x3+0.02*x4+0.04*x5+0.03*x6+0.13*x7+0.04*x8","7be1a94b":"UltimateIncurredClaimCost","dc7e42e3":"UltimateIncurredClaimCost.mean()","c38bf101":"df=pd.read_csv('..\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv')\ndf.head()","309355e9":"df.shape","630baa79":"df['UltimateIncurredClaimCost']=UltimateIncurredClaimCost","9eef673a":"df.head()","0ef1dd94":"df.isnull().sum()","138270cd":"df['UltimateIncurredClaimCost']=df['UltimateIncurredClaimCost'].fillna(2761)","bcc165f9":"df.isnull().sum()","8143f978":"df.shape","e52da4be":"df.to_csv('submission.csv',index=False)","9ccebbc6":"df1=pd.read_csv('submission.csv')\ndf1.head()","b3efab92":"csv = pd.read_csv('..\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv')\ncsv['UltimateIncurredClaimCost']=df['UltimateIncurredClaimCost']\ncsv.to_csv(\"sample_submission.csv\",index=False)","02d22153":"# Histograms - showing the distribution ","0f2dc3ec":"# **EDA**","22080d15":"*This shows that on an average incurred claims cost female are the higer amount than male*","858a9829":"# **Data Loading**","611fd77c":"# I have used Linear Regression with Stochastic Gradient Descent.\n# The depenedent vaiable, that is been predicted here is UltimateIncurredClaimCost and the rest of the variables are independent variables. The Mean Absolute Error received from the model is 0.082 and the Root mean squared error is 0.28","930b51c5":"# **Filling missing values of train dataset with mode**","31b90848":"# **Data Pre processing**","b5bfd15b":"# **Descriptive Statistics**","17edd0f6":"# outlier analysis","92259804":"# **Filling missing values of train dataset with mode**","a8cb4838":"# Violin plots- Showing comparison of a variable across different categories","25e3a5f1":"***checking the value counts for missing values in each column- for test data***","2de284ce":"**Transforming columns and value counts**","27d4f230":"# Bar Plots","58a8098f":"# Data Normalisation","bc8aa6f6":"# Countplots- for counting each category of categorical variables","3ea3bc9b":"***checking the value counts for missing values in each column- for train data***"}}