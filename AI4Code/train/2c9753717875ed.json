{"cell_type":{"b22b5678":"code","4fe44edc":"code","f7eae668":"code","88650fb2":"code","0390f130":"code","6a4bd760":"code","9e5fce6f":"code","2e12dbab":"code","b9e16077":"code","d193b02b":"code","12caf7d8":"code","977c4a7d":"code","aeeaab5a":"code","f4671405":"code","362ba686":"code","1fed6fd4":"code","2764ff35":"code","44618087":"code","ee21ab57":"code","a70db931":"code","4f6d3ed9":"code","66edc30d":"code","0727dffd":"code","98270525":"code","2917438f":"code","b77b90c3":"code","71eed0ab":"code","3c96db9f":"code","5052698f":"code","714b31ee":"code","40310e33":"code","d51c4f95":"code","aa012733":"code","16221ad9":"code","f8771e27":"code","88ca236a":"code","3ead6ca4":"code","a7d3a430":"code","504f6b57":"code","75fc2dde":"code","3a05c722":"code","6585236e":"code","3aec98e5":"code","04c07934":"code","f710849d":"code","1e628fc9":"code","4a7ad222":"code","2340a907":"code","9baebe2e":"code","9803f16d":"code","86acdd9e":"code","1201402d":"code","82c659f8":"code","ec95d46b":"code","1dbf4a39":"code","e03c24dc":"code","fc69bcee":"code","9f500999":"code","f96f377f":"code","c5bac4e9":"code","718b5056":"code","2ff7d6eb":"code","0a644824":"code","bff9cb06":"code","6cac9252":"code","df688b67":"code","6701b8ff":"code","9e18b4cb":"code","b92bd99f":"code","c2d7a2b0":"code","fb3fb4b3":"code","74e378c3":"code","ac05c99c":"code","e59bf0c9":"code","f9945016":"code","66ce3cb4":"code","0b1fcac5":"code","faafa34b":"code","5877b386":"code","1ca8c597":"code","f09dec9c":"code","758c9e18":"code","31dd574f":"code","f92c6b4a":"code","ae0b9adb":"code","2c6b86cb":"code","9427f51e":"code","7b6d9a8a":"code","3b195d92":"code","06831924":"code","5b91d821":"code","0f62e2f9":"code","3157a732":"code","73a2bd73":"code","4d699d15":"code","1a80b53b":"code","c407599b":"code","8815f26a":"code","66c5f8ea":"code","ed5f5fda":"code","3c7bbd7d":"code","ca1342dc":"code","fe1e9f4e":"code","077fa894":"code","54e2986e":"code","23c4bfe9":"code","bdc0ddb0":"code","a1a2617f":"code","0bea0bf4":"code","44582d66":"code","d0c80813":"code","640c231c":"code","c5d5b0f2":"code","2ef8b772":"code","6e31a50d":"code","3d901b1a":"code","8ff314f5":"code","0e83d5cf":"markdown","fa166cb1":"markdown","da5e6129":"markdown","03ca6d45":"markdown","db8dec76":"markdown","895d4ef1":"markdown","51579def":"markdown","aa789258":"markdown","4d70e3cd":"markdown","086cb665":"markdown","4fb4572e":"markdown","ef63da7c":"markdown","08841290":"markdown","f851efce":"markdown","6c12a54b":"markdown","a9ae5088":"markdown","a9ea0705":"markdown","a7869443":"markdown","7d8fa279":"markdown","cb0c29ca":"markdown","61e8d763":"markdown","396b9cd5":"markdown","5f1db452":"markdown","715537a6":"markdown","64f1c6fd":"markdown","b7a94d7f":"markdown","163ffded":"markdown","37fc2cad":"markdown","be72f951":"markdown","47395b33":"markdown","6099b6e6":"markdown","e8b3a32e":"markdown","7e2068d1":"markdown","db351ec6":"markdown","d2195da7":"markdown","7a4ff69d":"markdown","4d4c37cf":"markdown","f97c1a96":"markdown","c1addf75":"markdown","2aaf8521":"markdown","36bcb3cf":"markdown","03926fa7":"markdown","899cc2ec":"markdown","8b9d8940":"markdown","dc438817":"markdown","f1fb5953":"markdown","f2f835a4":"markdown","b7266de4":"markdown","d4066805":"markdown","e1852da4":"markdown","cc055e37":"markdown","5bfa7f2b":"markdown","ea1217e4":"markdown","ad43a4a3":"markdown","3e5eecc9":"markdown","044566c6":"markdown","3859dc4a":"markdown","4b0f2123":"markdown","bb63bbdc":"markdown","f7bfae72":"markdown","771008a8":"markdown","a6fe4b9d":"markdown","b0b8922a":"markdown","b17237da":"markdown","482666fe":"markdown","73109da4":"markdown","edd54af7":"markdown","9291f698":"markdown","1ad2f25b":"markdown","abf448ab":"markdown","60fef786":"markdown","03e6d533":"markdown","7f2d10b3":"markdown","e4fe6f38":"markdown","54e4fbb9":"markdown","4774ded9":"markdown","0e5a1396":"markdown","974a03db":"markdown","3f341ff0":"markdown","a37081d3":"markdown","dc605b2a":"markdown","fc014dd7":"markdown","ff811e98":"markdown","95ad9e40":"markdown","03591fc1":"markdown","b012a24b":"markdown","a09c0b9d":"markdown","d9409dc2":"markdown","0c815823":"markdown","75e7e81b":"markdown","97f4305a":"markdown","0b87fa8a":"markdown","66244141":"markdown","5af1bbe2":"markdown","8f668a9b":"markdown","cc91eb2c":"markdown","83726358":"markdown","bcd978a0":"markdown","26f92c0f":"markdown","1c1d64aa":"markdown","7d5ad8e4":"markdown","3a5dbe12":"markdown","6985764a":"markdown","be752f09":"markdown","5ba0f3b1":"markdown","9c690e41":"markdown","dd24472e":"markdown","ddec01f4":"markdown","071587d2":"markdown","a6535dcf":"markdown","9212643a":"markdown","5e7768e5":"markdown","c7f15eaa":"markdown"},"source":{"b22b5678":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\npd.options.display.max_colwidth = 150\npd.options.display.float_format = '{:.3f}'.format\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","4fe44edc":"df = pd.read_csv('..\/input\/kickstarter-projects\/ks-projects-201801.csv')\ndf.set_index(\"ID\", inplace=True)","f7eae668":"df.sample(3)","88650fb2":"df.shape","0390f130":"df.state.value_counts()","6a4bd760":"df.isna().sum().sum()","9e5fce6f":"df.dropna(axis=0, inplace=True)","2e12dbab":"df = df[df.state.isin(['failed', 'canceled', 'successful'])]\ndf['state'] = [int(i == 'successful') for i in df.state]\ndf = df.rename(columns={'state' : 'succeses'})","b9e16077":"df.shape[0]","d193b02b":"pie_data = df.succeses.value_counts()\nplt.pie(pie_data,\n        autopct='%1.1f%%',\n        labels = ['failed or canceled', 'successful'],\n       colors=['#ff9999','#99ff99']);","12caf7d8":"print((df.succeses == 1).sum())","977c4a7d":"tmp_df = df[df['backers'] > 0]\n\ntmp_df['avg_check'] = tmp_df.usd_pledged_real \/ tmp_df.backers\n\ntmp_df.sort_values(by='avg_check', ascending=False).head(3)","aeeaab5a":"tmp_df[tmp_df.avg_check == tmp_df.avg_check.max()][['name', 'avg_check']]","f4671405":"df.groupby('main_category', as_index=False)['succeses'].mean()\\\n                    .sort_values(by='succeses', ascending=False)\\\n                    .rename(columns = {'succeses' : 'success_rate'})","362ba686":"df_goals_by_category = df.groupby('category', as_index=False) \\\n                    .agg({'goal' : 'mean', 'succeses' : 'count'})\\\n                    .sort_values(by='goal', ascending=False)\\\n                    .rename(columns = {'goal' : 'mean_goal', 'succeses' : 'times_met'})","1fed6fd4":"df_goals_by_category.head()","2764ff35":"df.groupby('category', as_index=False).agg({'usd_pledged_real' : 'sum'}) \\\n                .rename(columns={'usd_pledged_real' : 'total_pledge'}) \\\n                .sort_values(by='total_pledge', ascending=False).head()","44618087":"numeric_columns = [i for i in df.columns if df[i].dtype != object]\nobject_columns = [i for i in df.columns if df[i].dtype == object]\n\nnumeric_columns.remove('succeses')","ee21ab57":"len(object_columns)","a70db931":"df['plenged2goal'] = df['usd_pledged_real'] \/ df['goal']","4f6d3ed9":"q25, q75 = df['plenged2goal'].quantile(.25), df['plenged2goal'].quantile(.75)\n\niqr = q75 - q25\n\ndf_outliers = df[(df['plenged2goal'] < (q25 - 1.5 * iqr)) | (df['plenged2goal'] > (q75 + 1.5 * iqr))]","66edc30d":"tmp_df = df.copy()\ndf_wo_outliers = tmp_df.append(df_outliers).drop_duplicates(keep=False)","0727dffd":"print('Number of outliers:\\n', df_outliers.shape[0])","98270525":"df_failed = df_wo_outliers[df_wo_outliers['succeses'] == 0]\ndf_sucess = df_wo_outliers[df_wo_outliers['succeses'] == 1]","2917438f":"plt.figure(figsize=(8, 6), dpi=100)\nsns.distplot(np.log(df_wo_outliers[df_wo_outliers.succeses == 1]['plenged2goal'] + 1),\n             bins=20,\n             label='Success',\n             color='g')\nsns.distplot(np.log(df_wo_outliers[df_wo_outliers.succeses == 0]['plenged2goal'] + 1),\n             bins=20,\n             label='Fail',\n             color='r')\nplt.xlabel('log(plenden2goal)')\nplt.title('Data w\/o outliers', fontsize=14)\nplt.legend();","b77b90c3":"df_wo_outliers[df_wo_outliers.succeses == 1]['plenged2goal']\\\n                                            .value_counts()\\\n                                            .sort_values(ascending=False).\\\n                                            head(1)","71eed0ab":"df_wo_outliers[df_wo_outliers.succeses == 0]['plenged2goal']\\\n                                            .value_counts()\\\n                                            .sort_values(ascending=False)\\\n                                            .head(1)","3c96db9f":"print(round(df_wo_outliers.corrwith(df_wo_outliers.succeses).plenged2goal, 3))","5052698f":"plt.figure(figsize = (16, 8))\nfor i in range(1, 7):\n    plt.subplot(2, 3, i, )\n    sns.distplot(np.log(df_sucess[numeric_columns[i- 1]] + 1),\n                 label='Succeses', hist=False,\n                 kde_kws={'shade': True, 'color' : 'g'})\n    sns.distplot(np.log(df_failed[numeric_columns[i- 1]] + 1),\n                 label='Fail', hist=False,\n                 kde_kws={'shade': True, 'color' : 'r'})\n    plt.legend()\n    ","714b31ee":"df['launched'] = pd.to_datetime(df['launched'])\n\n\ndf['year'] = df.launched.dt.year","40310e33":"df.head(2)","d51c4f95":"print('Number of projects launched in 2012:\\n', df[df['year'] == 2012].shape[0])","aa012733":"df['deadline'] = pd.to_datetime(df['deadline'])\n\ndf['duration_days'] = df['deadline'] - df['launched']\n\ndf['duration_days'] = df['duration_days'].dt.days","16221ad9":"df.head(2)","f8771e27":"df.duration_days.median()","88ca236a":"df.country.value_counts()[-4:]","3ead6ca4":"df = df[df['country'] != 'N,0\"']","a7d3a430":"df['country'].value_counts()[:10].plot(kind='barh', \n                                  figsize=(12,6),\n                                  title='Top 10 countries',\n                                  color=['r', 'b', 'g', 'y'],\n                                  alpha=.4);","504f6b57":"def get_region(country):\n    '''\n    This function takes coiuntry code in ISO 3166_2 format and returns its region.\n\n    Example:\n    get_region('US')\n    >>> America\n    get_region('JP')\n    >>> Asia\n    '''    \n    region_by_country = {'America': ['US', 'CA', 'MX'],\n    'Europe' : ['GB', 'DE', 'FR', 'NL', 'IT', 'ES', 'SE', 'DK', 'IE', 'CH', 'NO', 'BE', 'AT', 'LU'],\n    'Asia' :['HK', 'SG'],\n    'Oceania' : ['AU', 'NZ', 'JP']} \n    \n    for region, country_list in region_by_country.items():\n        if country in country_list:\n            return region","75fc2dde":"df['region'] = df['country'].apply(get_region)","3a05c722":"df.groupby('region', as_index=False)['succeses'].mean()\\\n                    .sort_values(by='succeses', ascending=False)\\\n                    .rename(columns = {'succeses' : 'success_rate'})","6585236e":"df.groupby('region')['succeses'].mean().plot(kind='barh',\n                                  figsize=(12,6),\n                                  title='Sucess rate by region',\n                                  color=['r', 'b', 'g', 'y'],\n                                             alpha=.4);","3aec98e5":"df_xgb = df.copy()","04c07934":"df_gp = df.groupby(['main_category', 'category'], as_index=False)['goal'].count()\n\ndf_gp = df_gp.reset_index() \\\n        .sort_values(['main_category','goal'], ascending=False)\\\n        .drop('index', axis=1) \\\n        .rename(columns = {'goal' : 'number_of_projects'})","f710849d":"df_gp.head(4)","1e628fc9":"main_categories_list = list(set(df_gp.main_category.values))\n\nother_sub_categories = [] #list to contain sub categories not in top3\nfor main_category in main_categories_list:\n    other_sub_categories += list(df_gp[df_gp['main_category'] == main_category]['category'][3:])\n\ndf['category'] = df['category'].replace(other_sub_categories,'other')","4a7ad222":"df[df.main_category == 'Design']\\\n                .groupby('category', as_index=False)['goal']\\\n                .count()\\\n                .sort_values(by='goal', ascending=False)\\\n                .rename(columns={'goal': 'number_of_project'})","2340a907":"df['name_length'] = df['name'].str.len()\n\ndf['name_length'].max()","9baebe2e":"leakage_columns = ['pledged', 'backers', 'usd pledged', 'usd_pledged_real', 'plenged2goal']\n\ndf = df.drop(leakage_columns, axis=1)","9803f16d":"print(leakage_columns)","86acdd9e":"df = df.drop(['name', 'deadline', 'launched', 'country', 'usd_goal_real'], axis=1)","1201402d":"df.head(3)","82c659f8":"categorical_features = ['category', 'main_category', 'currency', 'region']","ec95d46b":"dummies = pd.get_dummies(df[categorical_features], drop_first=True) #drop one column for every dummy category\ndf = pd.concat([df, dummies], axis=1).drop(categorical_features, axis=1)","1dbf4a39":"df.head(3)","e03c24dc":"print(f'Columns after preprocessing:\\n {df.shape[1]}')","fc69bcee":"df.shape","9f500999":"from sklearn.model_selection import train_test_split\n\nX = df.drop('succeses', axis=1)\ny = df.succeses\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","f96f377f":"print(f'Successful projects:\\nTrain: {y_train.sum()} \\nTest:  {y_test.sum()}')","c5bac4e9":"print(f'Success rate:\\nTrain: {y_train.mean():.3f}\\nTest : {y_test.mean():.3f}')","718b5056":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nnumerical_colums = ['goal', 'year', 'duration_days', 'name_length']\n\nX_train[numerical_colums] = scaler.fit_transform(X_train[numerical_colums])\n\nX_test[numerical_colums]= scaler.transform(X_test[numerical_colums])","2ff7d6eb":"print(round(X_train.goal.max(), 3))","0a644824":"from sklearn.feature_selection import SelectKBest, f_classif\n\nselector = SelectKBest(f_classif, k=2)\nX_anova = selector.fit_transform(X_train, y_train)\n\nanova_feature_importance = pd.DataFrame({'Feature' : X_train.columns,'Score' : selector.scores_})\\\n                                        .sort_values(by='Score', ascending=False)","bff9cb06":"anova_feature_importance.head(2)","6cac9252":"%%time\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\n\nlogreg_grid_search = GridSearchCV(estimator=LogisticRegression(penalty='l2', max_iter=100),\n                         param_grid={'C' : np.logspace(-2, 4, 7)},\n                         n_jobs=-1)\n\nlogreg_grid_search.fit(X_train, y_train)\n\nclf_logreg = logreg_grid_search.best_estimator_","df688b67":"print(clf_logreg)","6701b8ff":"y_pred_logreg = clf_logreg.predict(X_test)\ny_pred_proba_logred = clf_logreg.predict_proba(X_test)[:,1]","9e18b4cb":"print(f'Accuracy:\\n{round(accuracy_score(y_test, y_pred_logreg), 3)}')","b92bd99f":"df_logreg_coeff = pd.DataFrame({'Feature' : X_train.columns,\n                   'Coefficient' : abs(clf_logreg.coef_[0])}).sort_values(by='Coefficient', ascending=False)","c2d7a2b0":"df_logreg_coeff.head()","fb3fb4b3":"from sklearn.metrics import roc_auc_score, roc_curve\n\nlogreg_fpr, logreg_tpr, _ = roc_curve(y_test, y_pred_proba_logred, pos_label=1)\n\nroc_auc_score = round(roc_auc_score(y_test, y_pred_proba_logred), 3)","74e378c3":"plt.figure(figsize=(7, 7), dpi=100)\nplt.title('Logistic Regression ROC curve', fontsize=14)\nplt.plot(logreg_fpr, logreg_tpr, label=f'ROC AUC score: {roc_auc_score}')\nplt.plot([0, 1], [0, 1], color='r', linestyle='--')\nplt.legend(fontsize =12)\n\nplt.xticks(np.arange(0, 1, step=0.1))\nplt.yticks(np.arange(0, 1, step=0.1))\nplt.xlabel('False Positive Rate', fontsize=12)\nplt.ylabel('True Positive Rate', fontsize=12)\nplt.grid(alpha=.5)\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.show()","ac05c99c":"from sklearn.metrics import plot_confusion_matrix\n\nplot_confusion_matrix(clf_logreg, X_test, y_test);","e59bf0c9":"print(roc_auc_score)","f9945016":"from sklearn.ensemble import RandomForestClassifier\n\nrf_clf = RandomForestClassifier(random_state=42)","66ce3cb4":"%%time\n# rf_grid_search = GridSearchCV(\n#     estimator = rf_clf,\n#     param_grid={'max_depth' : [i for i in range(2, 16)],'n_estimators' : [10, 20, 50, 100, 200]},\n#     n_jobs=-1,\n#     verbose=3)\n\n# rf_grid_search.fit(X_train, y_train)\n# rf_clf = rf_grid_search.best_estimator_","0b1fcac5":"rf_clf = RandomForestClassifier(max_depth=15, n_estimators=50, random_state=42)","faafa34b":"rf_clf.fit(X_train, y_train)\ny_pred_rf = rf_clf.predict(X_test)","5877b386":"plot_confusion_matrix(rf_clf, X_test, y_test);","1ca8c597":"print(round(accuracy_score(y_test, y_pred_rf), 3))","f09dec9c":"from sklearn.metrics import precision_recall_curve\n\ny_pred_proba_rf = rf_clf.predict_proba(X_test)[:,1]\n\nprecision, recall, _ = precision_recall_curve(y_test, y_pred_proba_rf)","758c9e18":"plt.figure(figsize=(6, 6), dpi=100)\nplt.title('Precision-Recall curve', fontsize=14)\nplt.plot(recall, precision, color='r')\nplt.vlines(0.5, 0, 1, ls='--')\n\nplt.xlabel('Recall', fontsize=12)\nplt.ylabel('Precision', fontsize=12)\n\nplt.xticks(np.arange(0, 1, step=0.1))\nplt.yticks(np.arange(0, 1, step=0.1))\nplt.ylim([0.0, 1.0])\nplt.xlim([0.0, 1.0])\nplt.grid(alpha=.4)","31dd574f":"df_precision_recal = pd.DataFrame({'precision' : precision, 'recall' : recall})\n\ndf_precision_recal[(df_precision_recal.recall >= 0.5) & (df_precision_recal.recall < 0.5001)]","f92c6b4a":"rf_feature_importance = pd.DataFrame({'Importance': rf_clf.feature_importances_}, index=X_train.columns)\\\n.sort_values(by='Importance', ascending=False)","ae0b9adb":"rf_feature_importance[:6].plot(kind='barh',\n                                  figsize=(10,6),\n                                  title='Features Importance',\n                                color=['b'],\n                                alpha=.4);","2c6b86cb":"rf_feature_importance.head()","9427f51e":"from xgboost import XGBClassifier","7b6d9a8a":"clf_xgb = XGBClassifier(learning_rate=0.3, n_estimators=100)","3b195d92":"%%time\nclf_xgb.fit(X_train, y_train)","06831924":"y_pred_xgb = clf_xgb.predict(X_test)","5b91d821":"accuracy_score(y_test, y_pred_xgb)","0f62e2f9":"df_xgb = df_xgb[df_xgb.year != 1970]","3157a732":"df_xgb.shape","73a2bd73":"df_new = df_xgb.copy()\ndf_new.drop(leakage_columns, axis=1, inplace=True)","4d699d15":"gp_mean_success_goal = df_new[df_new.succeses == 1]\\\n                .groupby('category')['usd_goal_real']\\\n                .mean()\n\ngp_median_success_goal = df_new[df_new.succeses == 1]\\\n                .groupby('category')['usd_goal_real']\\\n                .median()","1a80b53b":"df_new['mean_cat_success_goal'] = df_new['category'].map(gp_mean_success_goal)\n\ndf_new['median_cat_success_goal'] = df_new['category'].map(gp_median_success_goal)","c407599b":"df_new['goal2mean'] = df_new['usd_goal_real'] \/ df_new['mean_cat_success_goal']\n\ndf_new['goal2median'] = df_new['usd_goal_real'] \/ df_new['median_cat_success_goal']","8815f26a":"df_new['weekday'] = df_new.launched.dt.weekday\ndf_new['month'] = df_new.launched.dt.month","66c5f8ea":"df_new['num_words'] = df_new.name.apply(lambda string: len(string.split()))","ed5f5fda":"df_new.drop(['name', 'deadline', 'goal', 'launched', 'country'], axis=1, inplace=True)","3c7bbd7d":"categorical_features_new = ['category', 'main_category','currency', 'region']","ca1342dc":"dummy_new = pd.get_dummies(df_new[categorical_features_new], drop_first=True)","fe1e9f4e":"df_new = pd.concat([df_new, dummy_new], axis=1)\\\n        .drop(categorical_features_new, axis=1)","077fa894":"df_new.shape","54e2986e":"X_new = df_new.drop('succeses', axis=1)\ny_new = df_new.succeses","23c4bfe9":"X_train_new, X_test_new, y_train_new, y_test_new = train_test_split(X_new, y_new, test_size=0.2, random_state=42)","bdc0ddb0":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nnumerical_features_new = ['usd_goal_real',\n                          'year',\n                          'duration_days',\n                          'mean_cat_success_goal',\n                          'median_cat_success_goal',\n                          'goal2mean',\n                          'goal2median',\n                          'weekday',\n                          'month',\n                          'num_words']\n\nX_train_new[numerical_features_new] = scaler.fit_transform(X_train_new[numerical_features_new])\n\nX_test_new[numerical_features_new]= scaler.transform(X_test_new[numerical_features_new])","a1a2617f":"from xgboost import XGBClassifier","0bea0bf4":"clf_xgb =  XGBClassifier()\n\nparams = {'n_estimators' :  [10, 20, 30, 40],\n          'tree_method': ['gpu_hist'],\n          'max_depth': [6, 8, 10, 12],\n          'alpha': [0.1],\n          'gamma': [0.3],\n          'subsample': [0.6],\n          'scale_pos_weight': [1],\n          'learning_rate': [0.02, 0.05, 0.1, 0.2],\n          'objective':['binary:logistic'],\n          'n_gpus': [1]}","44582d66":"xgb_grid_search = GridSearchCV(estimator=clf_xgb,\n                               param_grid=params,\n                               n_jobs=-1,\n                               verbose=10)","d0c80813":"xgb_grid_search.fit(X_train_new, y_train_new)\n\nxgb_grid_search.best_estimator_.score(X_test_new, y_test_new)","640c231c":"print(xgb_grid_search.best_estimator_)","c5d5b0f2":"y_pred_xgb = xgb_grid_search.best_estimator_.predict(X_test_new)","2ef8b772":"from wordcloud import WordCloud","6e31a50d":"def show_wordcloud(data):\n    wordcloud = WordCloud(\n        background_color='white',\n        max_words=100,\n        max_font_size=40, \n        scale=3\n    ).generate(str(data))\n\n    fig = plt.figure(1, figsize=(12, 12))\n    plt.axis('off')\n    plt.imshow(wordcloud)\n    plt.show()","3d901b1a":"show_wordcloud(df_xgb[df_new.succeses == 0].name)","8ff314f5":"show_wordcloud(df_xgb[df_new.succeses == 1].name)","0e83d5cf":"----","fa166cb1":"#### Rename projects with `(canceled)` in name","da5e6129":"### Goals\n- Make exploratory data analysis\n- Apply feature engineering and feature selection\n- Try to solve classification task and use classification performance metrics\n- Get the taste of gradient boosting approach\n","03ca6d45":"### Peack for success ","db8dec76":"------","895d4ef1":"----","51579def":"<div id='q1.9'> <h3> <a href=#Contents>Q1.9<\/a> <\/h3><\/div>\n\nVisualize the feature for success and fail cases. What can you say about received distributions? (use bins=10 or 20). Type letter as your answer\n- A. Distributions intersect significantly, hard to say for sure that the ratio matters.\n- B. Distributions have almost no intersection, the bigger ratio, the bigger success.\n- C. Distributions have almost no intersection, the less ratio, the less success.\n- D. Distributions have almost no intersection, the less ratio, the bigger success.","aa789258":"<div id='q2.5'> <h3> <a href=#Contents>Q2.5<\/a> <\/h3><\/div>\n\nWhat is the most frequent subcategory for design?","4d70e3cd":"<div id='q4.1'> <h3> <a href=#Contents>Q4.1 Estimate feature importance by Anova<\/a> <\/h3><\/div>\n\n\nWhat is the two most important features by anova with f classifier?","086cb665":"<div id='q4.8'> <h3> <a href=#Contents>Q4.8 Build precision-recall curve. What is the precision for recall 0.5?<\/a> <\/h3><\/div>","4fb4572e":"### Q5.1 Generate two (or more) meaningfull features","ef63da7c":"#### Import basic libraries","08841290":"### Answer:","f851efce":"<div id='q3.2'> <h3> <a href=#Contents>Q3.2 Deal with the categorical features.<\/a> <\/h3><\/div>\n\n\nLets drop some more columns for now (`name`, `deadline`, `launched`, `country`, `usd_goal_real`). Note: you can re-use these columns in the Q5 section. \nPreprocess the rest of categorical columns. How many columns do you have now?","6c12a54b":"### Answer:","a9ae5088":"<div id='q4.5'> <h3> <a href=#Contents>Q4.5 Build roc curve and calculate roc-auc score.<\/a> <\/h3><\/div>","a9ea0705":"---","a7869443":"### Answer:","7d8fa279":"-----","cb0c29ca":"---","61e8d763":"#### 5.1.1. Mean & Median goal for category\n\nCreating a new features which shows `mean` & `median` of the `usd_goal_real` for successful projects inside the category.","396b9cd5":"<div id='q2.6'> <h3> <a href=#Contents>Q2.6<\/a> <\/h3><\/div>\n\nCreate the column `name_length` with length of the name.\nWhat is the biggets length?","5f1db452":"### Answer:","715537a6":"<div id='q4.6'> <h3> <a href=#Contents>Q4.6 Optimal depth and number of trees for RF model.<\/a> <\/h3><\/div>","64f1c6fd":"<div id='q1.2'> <h3> <a href=#Contents>Q1.2<\/a> <\/h3><\/div>\n\nLet us simplify the task a little bit: we are aiming to predict either project fails or not.\nThus 'success' projects will be encoded as 1, with state `['failed', 'canceled']` as 0 and we remove the rows with any other state.\n\nHow many '1' values are in resulting dataset (in state column)?","b7a94d7f":"---","163ffded":"### Answer:","37fc2cad":"-----","be72f951":"<div id=\"Section 2\"><h1><a href=#Contents>Section 2. Feature generation<\/a><\/h1><\/div>\n\nLets' generate some more feature that could be useful","47395b33":"Replacing not top3 sub catgories in `df` with `other`","6099b6e6":"-----","e8b3a32e":"### Answer:\nBy definition leakage columns contains information highly correlated with the target variable, and make the predictive model more accurate than it should be. Since we trying to guess does the project succeeds or not information about pledged money and the number of backers should not be available for the model training.\n","7e2068d1":"<div id='q1.6'> <h3> <a href=#Contents>Q1.6<\/a> <\/h3><\/div>\n\nWhat is the category with biggest total pledge? Use 'usd_pledged_real' to judge.","db351ec6":"<div id='q2.4'> <h3> <a href=#Contents>Q2.4<\/a> <\/h3><\/div>\n\nMake column `region` out of column `country` (america, europe, asia, oceania(including australiza\/nz))\nWhere is the region with the worst conversion rate (percentage of successful projects)","d2195da7":"<div id=\"Section 3\"><\/div> <h1><a href=#Contents>Section 3. Preprocessing<\/a> <\/h1>","7a4ff69d":"---","4d4c37cf":"---","f97c1a96":"<div id='q3.3'> <h3><a href=#Contents>Q3.3 Split the dataset<\/a> <\/h3><\/div>\n\nSeparate the target column (state) without stratification and with random state 42 and test size 0.2. How many of successful projects in train set?","c1addf75":"<div id='q1.11'> <h3> <a href=#Contents>Q1.11<\/a> <\/h3><\/div>\n\nCompute Pearson correlation coefficiton between the pledge2real and target variable. (Round up to second digit after point)","2aaf8521":"<div id='q1.8'> <h3> <a href=#Contents>Q1.8<\/a> <\/h3><\/div>\n\nLet's do a bit of feature engineering. Let's create column `pledge2goal` which define as ratio of `usd_pledged_real` to `goal`. How many outliers are there?\n\n(We use a simple rule: an object is an outlier if it does not belong to [q25 - 1.5iqr, q75 + 1.5 iqr] interval, where qxx -- xx quantile, and iqr is inter-quantile range.)","36bcb3cf":"#### 5.1.2 Median \/ goal and Mean \/ goal ratio\n\nThis ratio suppose to show how close the goal stated for the particular project to the mean and median goal of the successful projects from this category","03926fa7":"### Build a random forest model\nUse random state `42`, maximum depth from `2` to `15`, and number of estimators in `[10, 20, 50, 100, 200]`\n\n**Note**:\n\nHyperparameter tuning takes almost 40 min. So, I just specified best parameters manualy.\nOne can uncomment the cell below to run full procedure","899cc2ec":"### Answer:","8b9d8940":"---","dc438817":"----","f1fb5953":"<div id=\"Section 1\"><h1><a href=#Contents>Section 1. Dataset acquaintance<\/a><\/h1><\/div>\n\n","f2f835a4":"---","b7266de4":"#### Train & Test split","d4066805":"<div id='q4.9'> <h3> <a href=#Contents>Q4.9 What is the two most important features by random forest?<\/a> <\/h3><\/div>","e1852da4":"#### Drop some features which looks less important","cc055e37":"### Answer:\nBiggest lengh:\n`96`","5bfa7f2b":"<div id='q4.7'> <h3> <a href=#Contents>Q4.7  Accuracy of RF model.<\/a> <\/h3><\/div>","ea1217e4":"### Answer:","ad43a4a3":"------","3e5eecc9":"<div id='q3.4'> <h3> <a href=#Contents>Q3.4 Scale the numeric columns with standard scaler<\/a> <\/h3><\/div>\n\nWhat is max number in goal field after scaling?","044566c6":"#### 5.1.4 Number of words in project name","3859dc4a":"### Answer","4b0f2123":"<div id='q2.2'> <h3> <a href=#Contents>Q2.2<\/a> <\/h3><\/div>\n\nMake a column 'duration_days' with number of full days from launch to deadline.\nWhat is median value for this column?","bb63bbdc":"-----","f7bfae72":"### Dataset\nFor the task we'll use kickstarter dataset. Kickstarter is the crowdfounding platform, where people can announce their project with financial goals and other can support the projects by paying the money (\"pledging\"). The goal will be to predict if the project will be successfull, i.e. would it achieve the funding goal. Let's take a brief look to the dataset.","771008a8":"#### 5.1.3 Month & weekday of the project launch\n\nCreating `weekday` & `month` features","a6fe4b9d":"### Answer:\nRegion with the lowest sucesses rate - `Oceania`","b0b8922a":"<div id='q1.10'> <h3> <a href=#Contents>Q1.10<\/a> <\/h3><\/div>\n\nContinue with plot from Q1.9. Where are the peaks located? We expect two numbers here as the answer","b17237da":"### Peack for fail","482666fe":"<div id='q4.4'> <h3> <a href=#Contents>Q4.4 Most important features by logistic regression<\/a> <\/h3><\/div>","73109da4":"### Answer:","edd54af7":"### Q5.0 Additional data cleaning","9291f698":"<div id='q1.5'> <h3> <a href=#Contents>Q1.5<\/a> <\/h3><\/div>\n\nDefine the category with highest goal per project. How many projects belong to it?  (note: we use category here, not main_category)","1ad2f25b":"<div id='q1.3'> <h3><a href=#Contents>Q1.3<\/a><\/h3><\/div>\n\n\nWhats is a name of a project with highest average pay check? Use column `usd_pledged_real` to judge.","abf448ab":"### Answer:","60fef786":"<div id='q5.2'> <h3> <a href=#Contents>Q5.2 Train an xgboost, that's beat random forest<\/a> <\/h3><\/div>","03e6d533":"Here we will create dummies for categorical features and drop one of them to prevent linear dependance","7f2d10b3":"----","e4fe6f38":"---","54e4fbb9":"### Answer:","4774ded9":"<div id='q1.7'> <h3> <a href=#Contents>Q1.7<\/a> <\/h3><\/div>\n\n\nAs one can notice, there are both numerical and object-type data in our dataframe. \nWe suggest you to split them to perform EDA separately. \n\nSplit columns to 'numeric' (by data type) and object-type. How many 'object-type' features are there?","0e5a1396":"---","974a03db":"<div id=\"Section 5\"><a href=#Contents><h1>Section 5. Build the stronger model<\/h1><\/a><\/div>","3f341ff0":"### Answer:","a37081d3":"<div id='q2.1'> <h3> <a href=#Contents>Q2.1<\/a> <\/h3><\/div>\n\nCreate a year column that would hold the year. How many projects were in year 2012?","dc605b2a":"### Answer:","fc014dd7":"\n------","ff811e98":"### Answer:\n* B. Distributions have almost no intersection, the bigger ratio, the bigger success.\n* C. Distributions have almost no intersection, the less ratio, the less success.","95ad9e40":"-----","03591fc1":"### Answer:\nMost popular subcategory for `Design` is `Product Design`","b012a24b":"<div id='q3.1'> <h3> <a href=#Contents>Q3.1 Drop the leaking columns<\/a> <\/h3><\/div>\n\nBased on what we have already seen, can you assume what features are leakeges? What is the columns? Drop them\n","a09c0b9d":"------","d9409dc2":"<div id='q1.4'> <h3> <a href=#Contents>Q1.4<\/a> <\/h3><\/div>\n\nWhat is the most successful main category (in terms of success percentage)?","0c815823":"---","75e7e81b":"### Answer:","97f4305a":"------","0b87fa8a":"### Answer:","66244141":"-----","5af1bbe2":"___","8f668a9b":"<div id='q4.2'> <h3> <a href=#Contents>Q4.2 Estimate optimal C for l2 regularization<\/a> <\/h3><\/div>\n\nBuild a model with logistic regression\n\nUse l2 penalty and search for optimal `C` in `np.logspace(-2, 4, 7)`.","cc91eb2c":"---","83726358":"### Answer:","bcd978a0":"----","26f92c0f":"####  5.0.1 Remove data with wrong launch date (01.01.1970)\n\nThere are some projects that have a missing value for the launched date (this date set to UNIX-time == 0). Lets drop them.","1c1d64aa":" ---","7d5ad8e4":"<div id='q1.12'> <h3> <a href=#Contents>Q1.12<\/a> <\/h3><\/div>\n\nVisualize dependancy of numerical data with success. What can you say about it?","3a5dbe12":"<div id='q2.3'> <h3> <a href=#Contents>Q2.3<\/a> <\/h3><\/div>\n\nDelete mistaken value from column `country`. What is the value?","6985764a":"<div id='q1.1'><h3> <a href=#Contents>Q1.1<\/a> <\/h3><\/div> \n\n How many NaN values are there in the dataset?","be752f09":"-----","5ba0f3b1":"---","9c690e41":"### Answer:","dd24472e":"### Answer:","ddec01f4":"<div id='q4.3'> <h3> <a href=#Contents>Q4.3 What is the accuracy for this params?<\/a> <\/h3><\/div>","071587d2":"<div id=\"Contents\"><\/div><h1>Contents<\/h1>\n\n1. <a href='#Section 1'>Dataset acquaintance<\/a>\n\n    <a href='#q1.1'>Q1.1<\/a>\n    <a href='#q1.2'>Q1.2<\/a>\n      <a href='#q1.3'>Q1.3<\/a>\n      <a href='#q1.4'>Q1.4<\/a>\n      <a href='#q1.5'>Q1.5<\/a>\n      <a href='#q1.6'>Q1.6<\/a>\n      <a href='#q1.7'>Q1.7<\/a>\n      <a href='#q1.8'>Q1.8<\/a>\n      <a href='#q1.9'>Q1.9<\/a>\n      <a href='#q1.10'>Q1.10<\/a>\n      <a href='#q1.11'>Q1.11<\/a>\n      <a href='#q1.12'>Q1.12<\/a>\n\n\n2. <a href='#Section 2'>Feature Generation<\/a>\n\n      <a href='#q2.1'>Q2.1<\/a>\n      <a href='#q2.2'>Q2.2<\/a>\n      <a href='#q2.3'>Q2.3<\/a>\n      <a href='#q2.4'>Q2.4<\/a>\n      <a href='#q2.5'>Q2.5<\/a>\n      <a href='#q2.6'>Q2.6<\/a>\n      \n      \n3. <a href='#Section 3'>Preprocessing<\/a>\n    <ul>\n    <li><a href='#q3.1'>Q3.1 Drop the leaking columns<\/a><\/li>\n      <li><a href='#q3.2'>Q3.2 Deal with the categorical features<\/a><\/li>\n      <li><a href='#q3.3'>Q3.3 Split the dataset<\/a><\/li>\n      <li><a href='#q3.4'>Q3.4 Scale the numeric columns with standard scaler<\/a><\/li>\n    <\/ul>\n    \n    \n4. <a href='#Section 4'>Feature selection<\/a>  \n    <ul>\n      <li><a href='#q4.1'>Q4.1 Estimate feature importance by Anova<\/a><\/li>\n      <li><a href='#q4.2'>Q4.2 Estimate optimal C for l2 regularization<\/a><\/li>\n      <li><a href='#q4.3'>Q4.3 Calculate accuracy for this params<\/a><\/li>\n      <li><a href='#q4.4'>Q4.4 Most important features by logistic regression<\/a><\/li>\n      <li><a href='#q4.5'>Q4.5 Building ROC curve and calculate ROC-AUC score.<\/a><\/li>\n      <li><a href='#q4.6'>Q4.6 Optimal depth and number of trees for RF model<\/a><\/li>\n      <li><a href='#q4.7'>Q4.7 Accuracy of RF model<\/a><\/li>\n      <li><a href='#q4.8'>Q4.8 Build precision-recall curve<\/a><\/li>\n      <li><a href='#q4.9'>Q4.9 Most important features by RF<\/a><\/li>\n    <\/ul>\n    \n    \n5. <a href='#Section 5'>Build the stronger model<\/a>      ","a6535dcf":"---","9212643a":"#### Dealing with categorical features","5e7768e5":"<div id=\"Section 4\"><\/div><a href=#Contents><h1>Section 4. Feature selection<a href=#Contents><\/h1>\n","c7f15eaa":"### Answer:\n`N,0\"` - mistaken value from `country` column"}}