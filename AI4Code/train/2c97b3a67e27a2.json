{"cell_type":{"ead16167":"code","2168ab96":"code","d0c7d788":"code","2df4b3ee":"code","41a1d97b":"code","2a8d0369":"code","de655a34":"code","5a92ee36":"code","05fd26d4":"code","349a5183":"code","4f6a20ca":"code","b5605ddd":"code","90cf0984":"code","f567438b":"code","a4a34a9c":"code","21a1c37d":"code","77a147ee":"code","ea33d8fc":"code","0c89a6a9":"code","62fa2a88":"code","02a3d8fc":"code","e0ac3fe0":"markdown","c4f447bc":"markdown","bbd745a1":"markdown","a3180102":"markdown","10bc2a92":"markdown","f4ff29a9":"markdown","276c40e4":"markdown","8065a7d2":"markdown","b28550ab":"markdown","9cebf5c8":"markdown","1c5c856b":"markdown","f72d026b":"markdown","73e03f87":"markdown","c64769ca":"markdown","ccc0f740":"markdown","1a61f213":"markdown","11e15441":"markdown","6eaff284":"markdown","598d743e":"markdown","db5c3db7":"markdown","7a37c97c":"markdown"},"source":{"ead16167":"#core libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \n\n#for those pesky warnings.\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n#Some visualization libraries.\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go","2168ab96":"# Reading data files and Making Dataframes\npath = '\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv'\ndat = pd.read_csv(path)\ndfGoogle = pd.DataFrame(dat) #Unprocessed Google Dataframe\npath1 = \"\/kaggle\/input\/app-store-apple-data-set-10k-apps\/AppleStore.csv\"\ndat1 = pd.read_csv(path1)\ndfApple = pd.DataFrame(dat1) #Unprocessed Apple Dataframe","d0c7d788":"dfGoogle.head()","2df4b3ee":"dfApple.head()","41a1d97b":"# Dropping Columns\ndfGoogle = dfGoogle.drop(columns = [\"Current Ver\", \"Android Ver\", 'Last Updated',\"Size\", \"Genres\", \"Installs\"])\ndfApple = dfApple.drop(columns = [\"size_bytes\",\"currency\", \"id\", \"vpp_lic\", \"ver\", \"Unnamed: 0\",\"lang.num\", \"user_rating_ver\",\"rating_count_ver\", \"sup_devices.num\",\"ipadSc_urls.num\"])\n\n#Renaming Columns\ndfApple = dfApple.rename(columns = {\"rating_count_tot\": \"Reviews\", \"user_rating\" : \"Rating\", \"cont_rating\" : \"Content Rating\",\n                          \"prime_genre\" : \"Category\", \"price\" : \"Price\", \"size_bytes\" : \"Size\", \"track_name\" : \"App\"})\n","2a8d0369":"#One Hot Encoding Type\ndfApple.loc[(dfApple['Price'] >= 0), 'Type'] = \"1\"\ndfApple.loc[(dfApple['Price'] == 0), 'Type'] = \"0\"\ndfGoogle.loc[(dfGoogle['Type'] == \"Free\"), 'Type'] = \"0\"\ndfGoogle.loc[(dfGoogle['Type'] == \"Paid\"), 'Type'] = \"1\"","de655a34":"# Cleaning Functions\n# For APPLE\ndef cleanContent(x):                                 #Unifying Content Rating Column for Apple \n    if x == \"4+\":\n        return \"Everyone\"\n    elif x == \"9+\":\n        return \"Everyone 10+\"\n    elif x == \"12+\":\n        return 'Teen'\n    elif x == \"17+\":\n        return 'Mature 17+'\n\ndef cleanCategoryApp(x):                             #Reference and Book apps fall into the same category.\n    if x == \"Reference\" or x == \"Book\":\n        return \"Books & Reference\"\n    elif x == \"Music\":\n        return \"Utilities\"\n    else:\n        return x\n\n#For GOOGLE\ndef cleanCategory(x):                                # Recategorizing Google Apps\n    if x == \"BOOKS_AND_REFERENCE\":\n        return \"Books & Reference\"\n    elif x == \"BUSINESS\":\n        return \"Business\"\n    elif x in [\"ENTERTAINMENT\", \"Comics\", \"EVENTS\"]:\n        return \"Entertainment\"\n    elif x ==\"FOOD_AND_DRINK\":\n        return \"Food & Drink\"\n    elif x in [\"EDUCATION\", \"PARENTING\"]:\n        return \"Education\"\n    elif x in [\"SOCIAL\", \"COMMUNICATION\"]:\n        return \"Social Networking\"\n    elif x == \"PRODUCTIVITY\":\n        return \"Productivity\"\n    elif x == \"WEATHER\":\n        return \"Weather\"\n    elif x == \"MAPS_AND_NAVIGATION\":\n        return \"Navigation\"\n    elif x == \"GAME\":\n        return \"Games\"\n    elif x in [\"HEALTH_AND_FITNESS\", \"BEAUTY\"]:\n        return 'Health & Fitness'\n    elif x in ['LIFESTYLE',\"DATING\",\"FAMILY\",\"AUTO_AND_VEHICLES\",\"HOUSE_AND_HOME\"]:\n        return \"Lifestyle\"\n    elif x == \"MEDICAL\":\n        return \"Medical\"\n    elif x == \"SHOPPING\":\n        return \"Shopping\"\n    elif x == \"PHOTOGRAPHY\" or x == \"VIDEO_PLAYERS\":\n        return \"Photo & Video\"\n    elif x == \"NEWS_AND_MAGAZINES\":\n        return \"News\"\n    elif x == \"FINANCE\":\n        return \"Finance\"\n    elif x == \"TRAVEL_AND_LOCAL\":\n        return \"Travel\"\n    elif x == \"SPORTS\":\n        return \"Sports\"\n    elif x in [\"TOOLS\", \"ART_AND_DESIGN\",'PERSONALIZATION', 'LIBRARIES_AND_DEMO']:\n        return \"Utilities\"\n    else:\n        pass\n    \n\n                                \ndef cleanPrice(x):                                 #Cleaning prices for Google playstore\n    if x == \"0\":\n        return \"0\"\n    elif '$' in x:\n        x = x[1:]\n    elif x == \"Everyone\":\n        return \"0\"\n    return x\n\n\ndef cleanReviews(x):                              #Cleaning review column for Google Playstore\n    if \"M\" in x:\n        x = x.replace(\".0M\", \"000000\")\n        return x\n    else:\n        return x","5a92ee36":"# Applying Cleaning Functions to Google Dataframe\ndfGoogle[\"Price\"] = dfGoogle[\"Price\"].replace([x for x in dfGoogle[\"Price\"]], [cleanPrice(x) for x in dfGoogle[\"Price\"]])\ndfGoogle[\"Price\"] = dfGoogle[\"Price\"].astype(float)\ndfGoogle[\"Category\"] = dfGoogle[\"Category\"].replace([x for x in dfGoogle[\"Category\"]], [cleanCategory(x) for x in dfGoogle[\"Category\"]])\ndfGoogle[\"Reviews\"] = dfGoogle[\"Reviews\"].replace([x for x in dfGoogle[\"Reviews\"]], [cleanReviews(x) for x in dfGoogle[\"Reviews\"]])\ndfGoogle[\"Reviews\"] = dfGoogle[\"Reviews\"].astype(int)\n\n#Applying Cleaning Functions to Apple Dataframe\ndfApple[\"Content Rating\"] = dfApple[\"Content Rating\"].replace([x for x in dfApple[\"Content Rating\"]], [cleanContent(x) for x in dfApple[\"Content Rating\"]])\ndfApple[\"Category\"] = dfApple[\"Category\"].replace([x for x in dfApple[\"Category\"]], [cleanCategoryApp(x) for x in dfApple[\"Category\"]])\n\n# Adding Rating Class Column\ndfGoogle.loc[(dfGoogle['Rating'] >= 0) & (dfGoogle['Rating'] < 1), 'Rating Class'] = \"0-0.99\"\ndfGoogle.loc[(dfGoogle['Rating'] >= 1) & (dfGoogle['Rating'] < 2), 'Rating Class'] = \"1-1.99\"\ndfGoogle.loc[(dfGoogle['Rating'] >= 2) & (dfGoogle['Rating'] < 3), 'Rating Class'] = \"2-2.99\"\ndfGoogle.loc[(dfGoogle['Rating'] >= 3) & (dfGoogle['Rating'] < 4), 'Rating Class'] = \"3-3.99\"\ndfGoogle.loc[(dfGoogle['Rating'] >= 4) & (dfGoogle['Rating'] < 5), 'Rating Class'] = \"4-4.99\"\ndfGoogle.loc[dfGoogle['Rating'] == 5, 'Rating Class'] = \"5\"\n\n# Adding Rating Class Column\ndfApple.loc[(dfApple['Rating'] >= 0) & (dfApple['Rating'] < 1), 'Rating Class'] = \"0-0.99\"\ndfApple.loc[(dfApple['Rating'] >= 1) & (dfApple['Rating'] < 2), 'Rating Class'] = \"1-1.99\"\ndfApple.loc[(dfApple['Rating'] >= 2) & (dfApple['Rating'] < 3), 'Rating Class'] = \"2-2.99\"\ndfApple.loc[(dfApple['Rating'] >= 3) & (dfApple['Rating'] < 4), 'Rating Class'] = \"3-3.99\"\ndfApple.loc[(dfApple['Rating'] >= 4) & (dfApple['Rating'] < 5), 'Rating Class'] = \"4-4.99\"\ndfApple.loc[dfApple['Rating'] == 5, 'Rating Class'] = \"5\"\n\n\ndfGoogle.dropna(inplace =True) #we don't like null values.\ndfApple.dropna(inplace =True) #we don't like null values.","05fd26d4":"# Creating Variables. \n#############\ngoogleFree = dfGoogle[dfGoogle[\"Type\"] == \"0\"]                         # Free vs Paid \nappleFree = dfApple[dfApple[\"Type\"] == \"0\"]\ngooglePaid = dfGoogle[dfGoogle[\"Type\"] == \"1\"]\napplePaid = dfApple[dfApple[\"Type\"] == \"1\"]\n\n#############\ndfCatGoogle = dfGoogle.groupby(\"Category\").mean()                     # Categories \ndfCatGoogle[\"Count\"] = dfGoogle[\"Category\"].value_counts()\ndfCatGoogle = dfCatGoogle.sort_values(\"Count\", ascending = False)\ndfCatApple = dfApple.groupby(\"Category\").mean()                          \ndfCatApple[\"Count\"] = dfApple[\"Category\"].value_counts()\ndfCatApple = dfCatApple.sort_values(\"Count\", ascending = False)\n\n#############\ndfRateGoogle = dfGoogle.groupby(\"Content Rating\").mean()              # Content Ratings\ndfRateGoogle[\"Count\"] = dfGoogle[\"Content Rating\"].value_counts()\ndfRateGoogle = dfRateGoogle.sort_values(\"Count\", ascending = False)\ndfRateApple = dfApple.groupby(\"Content Rating\").mean()\ndfRateApple[\"Count\"] = dfApple[\"Content Rating\"].value_counts()\ndfRateApple = dfRateApple.sort_values(\"Count\", ascending = False)\n\n############ Variables for Free vs Paid Apps ##############\nlabel1 = [\"Free\", \"Paid\"]                                            # Creating Variables.\nlabel2 = [\"Free\", \"Paid\"]\nval1 = [len(googleFree), len(googlePaid)]\nval2 = [len(appleFree), len(applePaid)]\n\n############ Variables for Categories #####################\nlabel3 = [x for x in dfCatGoogle.index]\nlabel4 = [x for x in dfCatApple.index]\nval3 = [x for x in dfCatGoogle[\"Count\"]]\nval4 = [x for x in dfCatApple[\"Count\"]]\n\n########### Variables for Content Rating ##################\nlabel5 = [x for x in dfRateGoogle.index]\nlabel6 = [x for x in dfRateApple.index]\nval5 = [x for x in dfRateGoogle[\"Count\"]]\nval6 = [x for x in dfRateApple[\"Count\"]]","349a5183":"#pie charts\n\n#### Configuring Subplot Grid ##################################\nfig = make_subplots(\n    rows=9, cols=4,\n    specs=[[{'rowspan': 3, 'colspan' : 2, 'type':'domain'},{}, {'rowspan': 3, 'colspan' : 2, 'type':'domain'}, {}],\n           [{'type':'domain'},{'type':'domain'}, {'type':'domain'}, {'type':'domain'}],\n           [{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}],\n           [{'rowspan': 3, 'colspan' : 2, 'type':'domain'}, {'type':'domain'}, {'rowspan': 3, 'colspan' : 2, 'type':'domain'}, {'type':'domain'}],\n           [{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}],\n          [{'type':'domain'},{'type':'domain'},{'type':'domain'}, {'type':'domain'}],\n          [{'rowspan': 3, 'colspan' : 2, 'type':'domain'},{'type':'domain'},{'rowspan': 3, 'colspan' : 2, 'type':'domain'}, {'type':'domain'}],\n          [{'type':'domain'},{'type':'domain'},{'type':'domain'}, {'type':'domain'}],\n          [{'type':'domain'},{'type':'domain'},{'type':'domain'}, {'type':'domain'}]],\n    print_grid=False)\n\n\n\n############# Adding Subplots ##################################\nfig.add_trace(go.Pie(labels=label1, values=val1,textinfo='label+percent', insidetextorientation='radial', name=\"Google Paid vs Free\"),\n              row = 1, col = 1) \nfig.add_trace(go.Pie(labels=label2, values=val2, textinfo='label+percent', insidetextorientation='radial',name=\"Apple Paid vs Free\"),\n              row = 1, col = 3)\nfig.add_trace(go.Pie(labels=label3, values=val3,textinfo='label+percent', insidetextorientation='radial', name=\"Category Count (Google)\"),\n              4, 1)\nfig.add_trace(go.Pie(labels=label4, values=val4, textinfo='label+percent', insidetextorientation='radial',name=\"Category Count (Apple)\"),\n              4, 3)\nfig.add_trace(go.Pie(labels=label5, values=val5,textinfo='label+percent', insidetextorientation='radial', name=\"Content Rating (Google)\"),\n              7, 1)\nfig.add_trace(go.Pie(labels=label6, values=val6, textinfo='label+percent', insidetextorientation='radial',name=\"Content Rating (Apple)\"),\n              7, 3)\n\n\n############## Configuration for Piecharts #####################\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_traces(hole=.25, hoverinfo=\"label+percent+name\")\nfig.update_layout(height=1000, width=1000,showlegend=False, title_text=\"A Simple Comparison\",\n                 annotations=[dict(text='Google', x=0.02, y=1, font_size=20, showarrow=False),\n                 dict(text='Apple', x=0.98, y=1, font_size=20, showarrow=False),\n                  dict(text='Type', x=0.495, y=0.88, font_size=20, showarrow=False),\n                    dict(text='Category', x=0.495, y=0.5, font_size=20, showarrow=False),\n                             dict(text='Content Rating', x=0.495, y=0.15, font_size=20, showarrow=False)],\n                 font=dict(\n        family=\"Fira Code, monospace\", #I like this font.\n        size=12,\n        color=\"RebeccaPurple\"          \n    ))\nfig.show()","4f6a20ca":"\n# Google Variables.\nx1 = [x for x in dfCatGoogle.index]\ny1 = [x for x in dfCatGoogle[\"Count\"]]\n\n# Apple Variables.\nx2 = [x for x in dfCatApple.index]\ny2 = [x for x in dfCatApple[\"Count\"]]\n\n\n# Making the Scatterplots\nfig1 = px.scatter(dfGoogle, x=\"Reviews\", y=\"Rating\",color = \"Category\",log_x = True)\nfig2 = px.scatter(dfApple, x = \"Reviews\", y = \"Rating\", color = \"Category\", log_x = True)\nfig1.update_layout(title = \"Google Playstore Apps Ratings for Different Categories\",\nfont=dict(\n        family=\"Fira Code, monospace\",\n        size=12,\n        color=\"RebeccaPurple\"\n    ))\nfig2.update_layout(title = \"Apple App Store Ratings for Different Categories\",\nfont=dict(\n        family=\"Fira Code, monospace\",\n        size=12,\n        color=\"RebeccaPurple\"\n    ))\nfig1.show()\nfig2.show()","b5605ddd":"# Content Ratings Across Categories.\nratingsGoogle = dfGoogle[\"Content Rating\"].unique() # List of all unique content ratings.\nratingsApple = dfApple[\"Content Rating\"].unique()\nratingsGoogle = ratingsGoogle[0:len(ratingsGoogle)-1]\ncats = [\"Games\", \"Lifestyle\", \"Education\", \"Social Networking\", \"Entertainment\", \"Utilities\", \"Productivity\"] #Some top categories.\n\n# Lists for Categories\n\n#Google\ngameCountG = []\nlifCountG = []\neduCountG = []\nsocCountG = []\nentCountG = []\nutCountG = []\nproCountG = []\n\n#Apple\ngameCountA = []\nlifCountA = []\neduCountA = []\nsocCountA = []\nentCountA = []\nutCountA = []\nproCountA = []\n\nfor x in ratingsGoogle:      # Looping over Content Ratings.\n    for y in cats:              # Looping over Categories.\n        if y == \"Games\":\n            game = len(dfGoogle[(dfGoogle['Content Rating'] == x) & (dfGoogle[\"Category\"] == y)])    # Queries for Content Rating and Category \n            gameCountG.append(game)\n        elif y == \"Lifestyle\":\n            fam = len(dfGoogle[(dfGoogle['Content Rating'] == x) & (dfGoogle[\"Category\"] == y)])\n            lifCountG.append(fam)\n        elif y ==\"Education\":\n            edu = len(dfGoogle[(dfGoogle['Content Rating'] == x) & (dfGoogle[\"Category\"] == y)])\n            eduCountG.append(edu)\n        elif y ==\"Social Networking\":\n            dat = len(dfGoogle[(dfGoogle['Content Rating'] == x) & (dfGoogle[\"Category\"] == y)])\n            socCountG.append(dat)\n        elif y == \"Entertainment\":\n            ent = len(dfGoogle[(dfGoogle['Content Rating'] == x) & (dfGoogle[\"Category\"] == y)])\n            entCountG.append(ent)\n        elif y == \"Utilities\":\n            soc = len(dfGoogle[(dfGoogle['Content Rating'] == x) & (dfGoogle[\"Category\"] == y)])\n            utCountG.append(soc)\n        elif y == \"Productivity\":\n            lif = len(dfGoogle[(dfGoogle['Content Rating'] == x) & (dfGoogle[\"Category\"] == y)])\n            proCountG.append(lif)\n\nfor x in ratingsApple:          # Same loops for Apple Apps.\n    for y in cats: \n        if y == \"Games\":\n            game = len(dfApple[(dfApple['Content Rating'] == x) & (dfApple[\"Category\"] == y)])\n            gameCountA.append(game)\n        elif y == \"Lifestyle\":\n            fam = len(dfApple[(dfApple['Content Rating'] == x) & (dfApple[\"Category\"] == y)])\n            lifCountA.append(fam)\n        elif y ==\"Education\":\n            edu = len(dfApple[(dfApple['Content Rating'] == x) & (dfApple[\"Category\"] == y)])\n            eduCountA.append(edu)\n        elif y ==\"Social Networking\":\n            dat = len(dfApple[(dfApple['Content Rating'] == x) & (dfApple[\"Category\"] == y)])\n            socCountA.append(dat)\n        elif y == \"Entertainment\":\n            ent = len(dfApple[(dfApple['Content Rating'] == x) & (dfApple[\"Category\"] == y)])\n            entCountA.append(ent)\n        elif y == \"Utilities\":\n            soc = len(dfApple[(dfApple['Content Rating'] == x) & (dfApple[\"Category\"] == y)])\n            utCountA.append(soc)\n        elif y == \"Productivity\":\n            lif = len(dfApple[(dfApple['Content Rating'] == x) & (dfApple[\"Category\"] == y)])\n            proCountA.append(lif)\n            \n# Returns Percentage Share of each item.\ndef getPer(l):\n    sumList = sum(l)\n    percList = []\n    for x in l:\n        perc = (x\/sumList) * 100\n        percList.append(perc)\n    return percList\n\n\n# List of Lists 3D \n# List Structure [Category1[ContentRating1, ContentRating2, ...], Category2[..,....], ...]\nx_dataG = [gameCountG,\n          lifCountG,\n          eduCountG,\n          socCountG,\n          entCountG,\n          utCountG,\n          proCountG]\n\nx_dataA = [gameCountA,\n          lifCountA,\n          eduCountA,\n          socCountA,\n          entCountA,\n          utCountA,\n          proCountA]\n\n# Lists store percentages.\nx_data_percG = []\nx_data_percA = []\nfor data in x_dataG:\n    x_data_percG.append(getPer(data))\n\nfor data in x_dataA:\n    x_data_percA.append(getPer(data))\n\n#Colors\ncolors = ['rgb(48, 43, 84)', 'rgb(71, 60, 139)',\n          'rgb(106, 90, 205)', 'rgb(131, 111, 255)',\n          'rgba(132, 112, 255, 1)', 'rgba(132, 112, 255, 0.3)']","90cf0984":"#Two figures. Google and Apple Bar Charts.\nfig3 = go.Figure()\nfig4 = go.Figure()\n##################################################################\nfor x in range(4):          #Looping over 4 Content Ratings. Google.\n    fig3.add_trace(go.Bar(\n    y=cats,\n    x =[x_data_percG[0][x],      # Each Category\n       x_data_percG[1][x],\n          x_data_percG[2][x],\n          x_data_percG[3][x],\n          x_data_percG[4][x],\n          x_data_percG[5][x],\n          x_data_percG[6][x]],\n    name=ratingsGoogle[x],\n    orientation='h',\n    marker=dict(\n        color=colors[x],\n        line=dict(color=colors[x], width=3)\n    )\n))\n################################################################\nfor x in range(4):        #Looping over 4 Content Ratings. Apple.\n    fig4.add_trace(go.Bar(\n    y=cats,\n    x =[x_data_percA[0][x],      # Each Category\n       x_data_percA[1][x],\n          x_data_percA[2][x],\n          x_data_percA[3][x],\n          x_data_percA[4][x],\n          x_data_percA[5][x],\n          x_data_percA[6][x]],\n    name=ratingsApple[x],\n    orientation='h',\n    marker=dict(\n        color=colors[x],\n        line=dict(color=colors[x], width=3)\n    )\n))\n    \n################# Figure Configuration ##########################    \nfig3.update_layout(barmode='stack',title_text='Google Playstore Content Ratings Share Across Categories', \n                xaxis_title=\"%\",\n                yaxis_title=\"Categories\",\n    font=dict(\n        family=\"Fira Code, monospace\",\n        size=12,\n        color=\"RebeccaPurple\"\n    ))\nfig4.update_layout(barmode='stack',title_text='Apple Appstore Content Ratings Share Across Categories', \n                xaxis_title=\"%\",\n                yaxis_title=\"Categories\",\n    font=dict(\n        family=\"Fira Code, monospace\",\n        size=12,\n        color=\"RebeccaPurple\"\n    ))\nfig3.show()\nfig4.show()","f567438b":"# Following same structure as before.\n# Google\ngameCountG = []\nlifCountG = []\neduCountG = []\nsocCountG = []\nentCountG = []\nutCountG = []\nproCountG = []\n\n# Apple\ngameCountA = []\nlifCountA = []\neduCountA = []\nsocCountA = []\nentCountA = []\nutCountA = []\nproCountA = []\nfreePaid = [\"0\", \"1\"]         # Two Types only.\nfor x in freePaid:            # Google Loop\n    for y in cats: \n        if y == \"Games\":\n            game = len(dfGoogle[(dfGoogle['Type'] == x) & (dfGoogle[\"Category\"] == y)])\n            gameCountG.append(game)\n        elif y == \"Lifestyle\":\n            fam = len(dfGoogle[(dfGoogle['Type'] == x) & (dfGoogle[\"Category\"] == y)])\n            lifCountG.append(fam)\n        elif y ==\"Education\":\n            edu = len(dfGoogle[(dfGoogle['Type'] == x) & (dfGoogle[\"Category\"] == y)])\n            eduCountG.append(edu)\n        elif y ==\"Social Networking\":\n            dat = len(dfGoogle[(dfGoogle['Type'] == x) & (dfGoogle[\"Category\"] == y)])\n            socCountG.append(dat)\n        elif y == \"Entertainment\":\n            ent = len(dfGoogle[(dfGoogle['Type'] == x) & (dfGoogle[\"Category\"] == y)])\n            entCountG.append(ent)\n        elif y == \"Utilities\":\n            soc = len(dfGoogle[(dfGoogle['Type'] == x) & (dfGoogle[\"Category\"] == y)])\n            utCountG.append(soc)\n        elif y == \"Productivity\":\n            lif = len(dfGoogle[(dfGoogle['Type'] == x) & (dfGoogle[\"Category\"] == y)])\n            proCountG.append(lif)\n\nfor x in freePaid:          # Apple Loop\n    for y in cats: \n        if y == \"Games\":\n            game = len(dfApple[(dfApple['Type'] == x) & (dfApple[\"Category\"] == y)])\n            gameCountA.append(game)\n        elif y == \"Lifestyle\":\n            fam = len(dfApple[(dfApple['Type'] == x) & (dfApple[\"Category\"] == y)])\n            lifCountA.append(fam)\n        elif y ==\"Education\":\n            edu = len(dfApple[(dfApple['Type'] == x) & (dfApple[\"Category\"] == y)])\n            eduCountA.append(edu)\n        elif y ==\"Social Networking\":\n            dat = len(dfApple[(dfApple['Type'] == x) & (dfApple[\"Category\"] == y)])\n            socCountA.append(dat)\n        elif y == \"Entertainment\":\n            ent = len(dfApple[(dfApple['Type'] == x) & (dfApple[\"Category\"] == y)])\n            entCountA.append(ent)\n        elif y == \"Utilities\":\n            soc = len(dfApple[(dfApple['Type'] == x) & (dfApple[\"Category\"] == y)])\n            utCountA.append(soc)\n        elif y == \"Productivity\":\n            lif = len(dfApple[(dfApple['Type'] == x) & (dfApple[\"Category\"] == y)])\n            proCountA.append(lif)\n            \ndef getPer(l):\n    sumList = sum(l)\n    percList = []\n    for x in l:\n        perc = (x\/sumList) * 100\n        percList.append(perc)\n    return percList\n\nx_dataG = [gameCountG,\n          lifCountG,\n          eduCountG,\n          socCountG,\n          entCountG,\n          utCountG,\n          proCountG]\n\nx_dataA = [gameCountA,\n          lifCountA,\n          eduCountA,\n          socCountA,\n          entCountA,\n          utCountA,\n          proCountA]\n\nx_data_percG = []\nx_data_percA = []\nfor data in x_dataG:\n    x_data_percG.append(getPer(data))\n\nfor data in x_dataA:\n    x_data_percA.append(getPer(data))\n    \ncolors = ['rgb(37, 206, 209)', 'rgb(255, 138, 91)']","a4a34a9c":"# Visualization Block.\ncat1 = [\"Free\", \"Paid\"]\nfig5 = go.Figure()\nfig6 = go.Figure()\nfor x in range(2):   # Looping over \"Free\" and \"Paid\"\n    fig5.add_trace(go.Bar(\n    y=cats,\n    x =[x_data_percG[0][x],          #Bars for each category.\n       x_data_percG[1][x],\n          x_data_percG[2][x],\n          x_data_percG[3][x],\n          x_data_percG[4][x],\n          x_data_percG[5][x],\n          x_data_percG[6][x]],\n    name=cat1[x],\n    orientation='h',\n    marker=dict(\n        color=colors[x],\n        line=dict(color=colors[x], width=3)\n    )\n))\nfor x in range(2):\n    fig6.add_trace(go.Bar(\n    y=cats,\n    x =[x_data_percA[0][x],\n       x_data_percA[1][x],\n          x_data_percA[2][x],\n          x_data_percA[3][x],\n          x_data_percA[4][x],\n          x_data_percA[5][x],\n          x_data_percA[6][x]],\n    name=cat1[x],\n    orientation='h',\n    marker=dict(\n        color=colors[x],\n        line=dict(color=colors[x], width=3)\n    )\n))\nfig5.update_layout(barmode='stack',title_text='Google Playstore Free vs Paid Apps', \n                xaxis_title=\"%\",\n                yaxis_title=\"Categories\",\n    font=dict(\n        family=\"Fira Code, monospace\",\n        size=12,\n        color=\"RebeccaPurple\"\n    ))\nfig6.update_layout(barmode='stack',title_text='Apple Appstore Free vs Paid Apps', \n                xaxis_title=\"%\",\n                yaxis_title=\"Categories\",\n    font=dict(\n        family=\"Fira Code, monospace\",\n        size=12,\n        color=\"RebeccaPurple\"\n    ))\nfig5.show()\nfig6.show()","21a1c37d":"#Cats Paid vs Free\nrats = dfApple['Rating Class'].unique() # sorry for the variable name\n\n# Google\ngameRateG = []\nlifRateG = []\neduRateG = []\nsocRateG = []\nentRateG = []\nutRateG = []\nproRateG = []\n\n# Apple\ngameRateA = []\nlifRateA = []\neduRateA = []\nsocRateA = []\nentRateA = []\nutRateA = []\nproRateA = []\nfor x in rats:                 # Looping over Rating Classes.\n    for y in cats:             # Google Loop\n        if y == \"Games\":\n            game = len(dfGoogle[(dfGoogle['Rating Class'] == x) & (dfGoogle[\"Category\"] == y)])\n            gameRateG.append(game)\n        elif y == \"Lifestyle\":\n            fam = len(dfGoogle[(dfGoogle['Rating Class'] == x) & (dfGoogle[\"Category\"] == y)])\n            lifRateG.append(fam)\n        elif y ==\"Education\":\n            edu = len(dfGoogle[(dfGoogle['Rating Class'] == x) & (dfGoogle[\"Category\"] == y)])\n            eduRateG.append(edu)\n        elif y ==\"Social Networking\":\n            dat = len(dfGoogle[(dfGoogle['Rating Class'] == x) & (dfGoogle[\"Category\"] == y)])\n            socRateG.append(dat)\n        elif y == \"Entertainment\":\n            ent = len(dfGoogle[(dfGoogle['Rating Class'] == x) & (dfGoogle[\"Category\"] == y)])\n            entRateG.append(ent)\n        elif y == \"Utilities\":\n            soc = len(dfGoogle[(dfGoogle['Rating Class'] == x) & (dfGoogle[\"Category\"] == y)])\n            utRateG.append(soc)\n        elif y == \"Productivity\":\n            lif = len(dfGoogle[(dfGoogle['Rating Class'] == x) & (dfGoogle[\"Category\"] == y)])\n            proRateG.append(lif)\n\n            \nfor x in rats:                # Apple Loop\n    for y in cats: \n        if y == \"Games\":\n            game = len(dfApple[(dfApple['Rating Class'] == x) & (dfApple[\"Category\"] == y)])\n            gameRateA.append(game)\n        elif y == \"Lifestyle\":\n            fam = len(dfApple[(dfApple['Rating Class'] == x) & (dfApple[\"Category\"] == y)])\n            lifRateA.append(fam)\n        elif y ==\"Education\":\n            edu = len(dfApple[(dfApple['Rating Class'] == x) & (dfApple[\"Category\"] == y)])\n            eduRateA.append(edu)\n        elif y ==\"Social Networking\":\n            dat = len(dfApple[(dfApple['Rating Class'] == x) & (dfApple[\"Category\"] == y)])\n            socRateA.append(dat)\n        elif y == \"Entertainment\":\n            ent = len(dfApple[(dfApple['Rating Class'] == x) & (dfApple[\"Category\"] == y)])\n            entRateA.append(ent)\n        elif y == \"Utilities\":\n            soc = len(dfApple[(dfApple['Rating Class'] == x) & (dfApple[\"Category\"] == y)])\n            utRateA.append(soc)\n        elif y == \"Productivity\":\n            lif = len(dfApple[(dfApple['Rating Class'] == x) & (dfApple[\"Category\"] == y)])\n            proRateA.append(lif)\n            \n# transforming into percentages.           \ndef getPer(l):\n    sumList = sum(l)\n    percList = []\n    for x in l:\n        perc = (x\/sumList) * 100\n        percList.append(perc)\n    return percList\n\nx_data_rate_G = [gameRateG,\n          lifRateG,\n          eduRateG,\n          socRateG,\n          entRateG,\n          utRateG,\n          proRateG]\n\nx_data_rate_A = [gameRateA,\n          lifRateA,\n          eduRateA,\n          socRateA,\n          entRateA,\n          utRateA,\n          proRateA]\n\nx_data_rate_perc_G = []\nx_data_rate_perc_A = []\nfor data in x_data_rate_G:\n    x_data_rate_perc_G.append(getPer(data))\n\nfor data in x_data_rate_A:\n    x_data_rate_perc_A.append(getPer(data))\n    \ncolors = ['rgb(94, 8, 28)', 'rgb(150, 13, 45)', 'rgb(0, 0, 0)', 'rgb(237, 49, 93)', 'rgb(244, 124, 152)', 'rgb(249, 180, 196)']","77a147ee":"# Google and Apple figures.\nfig7 = go.Figure()\nfig8 = go.Figure()\nfor x in range(6):\n    fig7.add_trace(go.Bar(\n    y=cats,\n    x =[x_data_rate_perc_G[0][x],\n       x_data_rate_perc_G[1][x],\n          x_data_rate_perc_G[2][x],\n          x_data_rate_perc_G[3][x],\n          x_data_rate_perc_G[4][x],\n          x_data_rate_perc_G[5][x],\n          x_data_rate_perc_G[6][x]],\n    name=rats[x],\n    orientation='h',\n    marker=dict(\n        color=colors[x],\n        line=dict(color=colors[x], width=3)\n    )\n))\nfor x in range(6):          # Looping over 6 Rating Classes.\n    fig8.add_trace(go.Bar(\n    y=cats,\n    x =[x_data_rate_perc_A[0][x],\n       x_data_rate_perc_A[1][x],\n          x_data_rate_perc_A[2][x],\n          x_data_rate_perc_A[3][x],\n          x_data_rate_perc_A[4][x],\n          x_data_rate_perc_A[5][x],\n          x_data_rate_perc_A[6][x]],\n    name=rats[x],\n    orientation='h',\n    marker=dict(\n        color=colors[x],\n        line=dict(color=colors[x], width=3)\n    )\n))\nfig7.update_layout(barmode='stack',title_text='Google Playstore Category Ratings', \n                xaxis_title=\"%\",\n                yaxis_title=\"Categories\",\n    font=dict(\n        family=\"Fira Code, monospace\",\n        size=12,\n        color=\"RebeccaPurple\"\n    ))\nfig8.update_layout(barmode='stack',title_text='Apple Appstore Category Ratings', \n                xaxis_title=\"%\",\n                yaxis_title=\"Categories\",\n    font=dict(\n        family=\"Fira Code, monospace\",\n        size=12,\n        color=\"RebeccaPurple\"\n    ))\nfig7.show()\nfig8.show()","ea33d8fc":"# Categorising Paid apps.\ndfApplepaid = dfApple[dfApple[\"Type\"] == \"1\"]\ndfGooglepaid = dfGoogle[dfGoogle[\"Type\"] == \"1\"]\ndfCatApplePaid = dfApplepaid.groupby(\"Category\").mean()\ndfCatGooglePaid = dfGooglepaid.groupby(\"Category\").mean()\ndfCatApplePaid = dfCatApplePaid.drop(\"Catalogs\", axis = 0) # Catalogs was an anomaly. No app count in this one.\n\n# New dataframe combining both dataframes.\ndfNew = pd.DataFrame({\n    \"Category\" : [x for x in dfCatApplePaid.index],\n    \"Apple Prices\" : [x for x in dfCatApplePaid[\"Price\"]],\n    \"Google Prices\" : [x for x in dfCatGooglePaid['Price']],\n    \"Apple Ratings\" : [x for x in dfCatApplePaid['Rating']],\n    \"Google Ratings\" : [x for x in dfCatGooglePaid[\"Rating\"]]\n}, index = [x for x in range(len(dfCatApplePaid))])\ndfNew","0c89a6a9":"fig1 = go.Figure()\nfig1 = px.scatter(dfNew, x = \"Google Prices\", y = \"Apple Prices\", color = \"Category\", log_x = True)\nfig1.update_layout(title = \"Prices across Categories\",\nfont=dict(\n        family=\"Fira Code, monospace\",\n        size=12,\n        color=\"RebeccaPurple\"\n    ))\nfig1.show()","62fa2a88":"dfNew = dfNew.drop(4, axis = 0) # Removing Finance Category\nfig1 = go.Figure()\nfig1 = px.scatter(dfNew, x = \"Google Prices\", y = \"Apple Prices\", color = \"Category\", log_x = True)\nfig1.update_layout(title = \"Prices Across Categories\",\nfont=dict(\n        family=\"Fira Code, monospace\",\n        size=12,\n        color=\"RebeccaPurple\"\n    ))\nfig1.show()","02a3d8fc":"# Scatterplot for Ratings\nfig1 = go.Figure()\nfig1 = px.scatter(dfNew, x = \"Google Ratings\", y = \"Apple Ratings\", color = \"Category\", log_x = True)\nfig1.update_layout(title = \"Scatterplot for Different Ratings\",\nfont=dict(\n        family=\"Fira Code, monospace\",\n        size=12,\n        color=\"RebeccaPurple\"\n    ))\nfig1.show()","e0ac3fe0":"# Ratings across Top Categories","c4f447bc":"# Let the comparison begin!\n\n\nOur dataframes have similar columns and data-types. They are ripe for comparison. Every visualization will have two stages.\n\n**Stage 1**: Creating the Variables.\n\n**Stage 2**: Creating the Visualizations.","bbd745a1":"## Analysis \n### More Reviews = Better Ratings\nThe general trend shows that more reviews lead to better ratings across both stores. This is simply because if an app is good, it gets popular, gets good reviews and the average rating goes up. It all feeds into each other. A lot of apps in the Apple Store seem to suffer because they are getting lesser reviews. ","a3180102":"## Analysis\n### Google Playstore vs Apple Appstore\nMore apps on the playstore seem to be rated as 'Everyone'. This different to the Apple Store. General trends across categories share a similar trend. Social Networking and Entertainments have the lowest share of \"Everyone\" content ratings. Producitivity and Education have a higher share of \"Everyone\" ratings. ","10bc2a92":"# Let's do a price comparison!","f4ff29a9":"We have an outlier. Apparently an App in 'Finances' is over 200$. Let's remove it and reanalyze. ","276c40e4":"## Content Ratings for Top Categories","8065a7d2":"# That's all folks.\nThis is my first notebook on Kaggle. I'll be happy to receive feedback! What improvements can I make in this notebook? ","b28550ab":"#                 Google Playstore vs Apple Appstore (Datacleaning and EDA)","9cebf5c8":"## Paid and Free Apps across Top Categories","1c5c856b":"# Cleaning the Dataset","f72d026b":"## Columns are same, now what?\nSince all the columns are same, we need to make sure that their **data types are also same** in our cleaning process. This will allow us to have meaningful comparison. We can't compare string values to integer values!!","73e03f87":"## Analysis\nApple Apps have lower ratings on average. Productivity apps share a similar average rating. Social Networking and Navigation apps received lowest ratings across both stores. ","c64769ca":"# At First Glance.\n\nThese two datasets are vastly different with some similarities. In my cleaning process, I will try to make sure both dataframes have similar columns. \nFor the cleaning process, I'll only keep columns that are common in both dataframes. My goal is to have these columns for both dataframes:\n\n1. App  \n2. Category\n3. Rating\n4. Rating Class\n5. Reviews\n6. Price\n7. Content Rating\n\n","ccc0f740":"## Analysis\n### Free vs Paid\nApple Appstore definitely has a huge contrast to that of Google's. Is there a difference in how Apps generate revenue in both app stores? \nNaturally, Premium Apps have lesser in-app purchases and advertisements. This could mean Apple Apps generate most of their revenue from a one-time premium purchase rather than following ads and in-app purchase model from Google App store. Again, this is just my opinion.\n### Category\nOver 56.4% of Apps are Games in the Apple Store? That is a crazy difference. Perhaps, the dataset could have been biased towards games or maybe that is really the case. 56% makes me a bit skeptical but it what it is.\n### Content Rating\nBoth stores follow a similar trend. Apple might be stricter on ratings.\n","1a61f213":"## Analysis\nThe disparity is quite visible here. Google Playstore is dominated by free apps. Their least free % of apps are in the 'Utilities' category and that's still higher than Apple's highest which is \"Social Networking\". \nThe \"Education\" category for Apple Store is vastly different to that of Google Playstore. More 80% \"Social Networking\" Apps are free however. Social Networking apps need a strong user base to survive. A paid model really hurts their consumer base so it makes sense for most of them to be free. \n\n#### One Caveat Though\nBack to my previous explanation, Google Playstore apps could simply be following a different model for revenue. In-app purchases, microtransactions and advertisements are bound to be more prevalent in a free app. ","11e15441":"# Ratings across Categories","6eaff284":"## Examining Ratings and Reviews across Categories.","598d743e":"# Average Prices Across Categories","db5c3db7":"## Analysis\nRatings do suffer when there are lower reviews. Reviews are lower when Apps are behind a paywall. Hence this visualization shouldn't be surprising at this point. Apple Apps have lower ratings across the board. They do have a higher percentage of perfect \"5\"s moreso than Google Apps. \nGoogle Apps have an overwhelming majority of 4+ ratings apps. This can be due to a higher number of overall reviews. Lifestyle apps have tanked reviews across both stores. ","7a37c97c":"### Analysis\n\nApple has generally higher priced apps than Google. 'Medical' apps are most expensive while 'News' apps are cheapest across both stores. 'Lifestyle' seems to be an outlier here as well. "}}