{"cell_type":{"959d6aac":"code","4d616a4c":"code","5f054019":"code","822116ce":"code","92dfe559":"code","13dab5a4":"code","b194dfdf":"code","55a40a2a":"code","8c1599e2":"code","ded3891c":"code","122c27d9":"code","f3df1afa":"code","ce2afd66":"code","09434974":"code","dc1fda7d":"code","dcf28200":"code","bbfc61bc":"code","6bf6d39c":"code","358e63a2":"code","97f48878":"code","7deaf960":"code","e751149f":"code","2658bf64":"code","651565e0":"code","c65668a5":"code","e76a7c49":"code","26ca00c6":"code","bfd083b7":"code","7882ae93":"code","e6f3b0cf":"code","5ee3467b":"code","d69223aa":"code","61a82e8d":"code","ff698c06":"code","88be4a12":"markdown","ee49647e":"markdown","f098c0b8":"markdown","b8ca840b":"markdown","ec5d4b0c":"markdown","9f85b44e":"markdown","bcb0393b":"markdown","0acd652a":"markdown","19104850":"markdown","f622b1c1":"markdown","deed42d2":"markdown","7870fa45":"markdown","7f5bf809":"markdown","a457d79a":"markdown","aa309109":"markdown","0600a287":"markdown","5c14b2f3":"markdown","e2896067":"markdown","bdb867f6":"markdown","e9472905":"markdown","b73736e8":"markdown","1b70e171":"markdown","b537fc92":"markdown","455ced1c":"markdown","e53ebe96":"markdown","0775b274":"markdown"},"source":{"959d6aac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d616a4c":"# Importing libs\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans, AffinityPropagation\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport plotly as py\nimport plotly.graph_objs as go\nimport os\npy.offline.init_notebook_mode(connected = True)\n#print(os.listdir(\"..\/input\"))\nimport datetime as dt\nimport missingno as msno\nplt.rcParams['figure.dpi'] = 140","5f054019":"df = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\n\ndf.head(3)","822116ce":"# Missing data\n\nfor i in df.columns:\n    null_rate = df[i].isna().sum() \/ len(df) * 100 \n    if null_rate > 0 :\n        print(\"{} null rate: {}%\".format(i,round(null_rate,2)))","92dfe559":"# Replacments\n\ndf['country'] = df['country'].fillna(df['country'].mode()[0])\n\n\ndf['cast'].replace(np.nan, 'No Data',inplace  = True)\ndf['director'].replace(np.nan, 'No Data',inplace  = True)\n\n# Drops\n\ndf.dropna(inplace=True)\n\n# Drop Duplicates\n\ndf.drop_duplicates(inplace= True)","13dab5a4":"df.isnull().sum()","b194dfdf":"df.info()","55a40a2a":"df[\"date_added\"] = pd.to_datetime(df['date_added'])\n\ndf['month_added']=df['date_added'].dt.month\ndf['month_name_added']=df['date_added'].dt.month_name()\ndf['year_added'] = df['date_added'].dt.year\n\ndf.head(3)","8c1599e2":"# Palette\nsns.palplot(['#221f1f', '#b20710', '#e50914','#f5f5f1'])\n\nplt.title(\"Netflix brand palette \",loc='left',fontfamily='serif',fontsize=15,y=1.2)\nplt.show()","ded3891c":"# Timeline code from Subin An's awesome notebook\n# https:\/\/www.kaggle.com\/subinium\/awesome-visualization-with-titanic-dataset\n\n\nfrom datetime import datetime\n\n## these go on the numbers below\ntl_dates = [\n    \"1997\\nFounded\",\n    \"1998\\nMail Service\",\n    \"2003\\nGoes Public\",\n    \"2007\\nStreaming service\",\n    \"2016\\nGoes Global\",\n    \"2021\\nNetflix & Chill\"\n]\n\ntl_x = [1, 2, 4, 5.3, 8,9]\n\n## these go on the numbers\ntl_sub_x = [1.5,3,5,6.5,7]\n\n\ntl_sub_times = [\n    \"1998\",\"2000\",\"2006\",\"2010\",\"2012\"\n]\n\ntl_text = [\n    \"Netflix.com launched\",\n    \"Starts\\nPersonal\\nRecommendations\",\"Billionth DVD Delivery\",\"Canadian\\nLaunch\",\"UK Launch\\n(my birthplace)\"]\n\n\n\n# Set figure & Axes\nfig, ax = plt.subplots(figsize=(15, 4), constrained_layout=True)\nax.set_ylim(-2, 1.75)\nax.set_xlim(0, 10)\n\n\n# Timeline : line\nax.axhline(0, xmin=0.1, xmax=0.9, c='#4a4a4a', zorder=1)\n\n\n# Timeline : Date Points\nax.scatter(tl_x, np.zeros(len(tl_x)), s=120, c='#4a4a4a', zorder=2)\nax.scatter(tl_x, np.zeros(len(tl_x)), s=30, c='#fafafa', zorder=3)\n# Timeline : Time Points\nax.scatter(tl_sub_x, np.zeros(len(tl_sub_x)), s=50, c='#4a4a4a',zorder=4)\n\n# Date Text\nfor x, date in zip(tl_x, tl_dates):\n    ax.text(x, -0.55, date, ha='center', \n            fontfamily='serif', fontweight='bold',\n            color='#4a4a4a',fontsize=12)\n    \n\n# Stemplot : vertical line\nlevels = np.zeros(len(tl_sub_x))    \nlevels[::2] = 0.3\nlevels[1::2] = -0.3\nmarkerline, stemline, baseline = ax.stem(tl_sub_x, levels, use_line_collection=True)    \nplt.setp(baseline, zorder=0)\nplt.setp(markerline, marker=',', color='#4a4a4a')\nplt.setp(stemline, color='#4a4a4a')\n\n# Text\nfor idx, x, time, txt in zip(range(1, len(tl_sub_x)+1), tl_sub_x, tl_sub_times, tl_text):\n    ax.text(x, 1.3*(idx%2)-0.5, time, ha='center', \n            fontfamily='serif', fontweight='bold',\n            color='#4a4a4a' if idx!=len(tl_sub_x) else '#b20710', fontsize=11)\n    \n    ax.text(x, 1.3*(idx%2)-0.6, txt, va='top', ha='center', \n        fontfamily='serif',color='#4a4a4a' if idx!=len(tl_sub_x) else '#b20710')\n\n\n\n# Spine\nfor spine in [\"left\", \"top\", \"right\", \"bottom\"]:\n    ax.spines[spine].set_visible(False)\n\n# Ticks    \nax.set_xticks([]) \nax.set_yticks([]) \n\n# Title\nax.set_title(\"Netflix through the years\", fontweight=\"bold\", fontfamily='serif', fontsize=16, color='#4a4a4a')\nax.text(2.4,1.57,\"From DVD rentals to a global audience of over 150m people - is it time for Netflix to Chill?\", fontfamily='serif', fontsize=12, color='#4a4a4a')\n\nplt.show()","122c27d9":"# For viz: Ratio of Movies & TV shows\n\nx=df.groupby(['type'])['type'].count()\ny=len(df)\nr=((x\/y)).round(2)\n\nmf_ratio = pd.DataFrame(r).T\n","f3df1afa":"fig, ax = plt.subplots(1,1,figsize=(6.5, 2.5))\n\nax.barh(mf_ratio.index, mf_ratio['Movie'], \n        color='#b20710', alpha=0.9, label='Male')\nax.barh(mf_ratio.index, mf_ratio['TV Show'], left=mf_ratio['Movie'], \n        color='#221f1f', alpha=0.9, label='Female')\n\nax.set_xlim(0, 1)\nax.set_xticks([])\nax.set_yticks([])\n#ax.set_yticklabels(mf_ratio.index, fontfamily='serif', fontsize=11)\n\n\n# movie percentage\nfor i in mf_ratio.index:\n    ax.annotate(f\"{int(mf_ratio['Movie'][i]*100)}%\", \n                   xy=(mf_ratio['Movie'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='serif',\n                   color='white')\n\n    ax.annotate(\"Movie\", \n                   xy=(mf_ratio['Movie'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=15, fontweight='light', fontfamily='serif',\n                   color='white')\n    \n    \nfor i in mf_ratio.index:\n    ax.annotate(f\"{int(mf_ratio['TV Show'][i]*100)}%\", \n                   xy=(mf_ratio['Movie'][i]+mf_ratio['TV Show'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='serif',\n                   color='white')\n    ax.annotate(\"TV Show\", \n                   xy=(mf_ratio['Movie'][i]+mf_ratio['TV Show'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=15, fontweight='light', fontfamily='serif',\n                   color='white')\n\n\n\n\n\n\n# Title & Subtitle\nfig.text(0.125,1.03,'Movie & TV Show distribution', fontfamily='serif',fontsize=15, fontweight='bold')\nfig.text(0.125,0.92,'We see vastly more movies than TV shows on Netflix.',fontfamily='serif',fontsize=12)  \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \n\n\n#ax.legend(loc='lower center', ncol=3, bbox_to_anchor=(0.5, -0.06))\n\n# Removing legend due to labelled plot\nax.legend().set_visible(False)\nplt.show()","ce2afd66":"# Quick feature engineering\n\n# Helper column for various plots\ndf['count'] = 1\n\n# Many productions have several countries listed - this will skew our results , we'll grab the first one mentioned\n\n# Lets retrieve just the first country\ndf['first_country'] = df['country'].apply(lambda x: x.split(\",\")[0])\ndf['first_country'].head()\n\n# Rating ages from this notebook: https:\/\/www.kaggle.com\/andreshg\/eda-beginner-to-expert-plotly (thank you!)\n\nratings_ages = {\n    'TV-PG': 'Older Kids',\n    'TV-MA': 'Adults',\n    'TV-Y7-FV': 'Older Kids',\n    'TV-Y7': 'Older Kids',\n    'TV-14': 'Teens',\n    'R': 'Adults',\n    'TV-Y': 'Kids',\n    'NR': 'Adults',\n    'PG-13': 'Teens',\n    'TV-G': 'Kids',\n    'PG': 'Older Kids',\n    'G': 'Kids',\n    'UR': 'Adults',\n    'NC-17': 'Adults'\n}\n\ndf['target_ages'] = df['rating'].replace(ratings_ages)\ndf['target_ages'].unique()\n\n# Genre\n\ndf['genre'] = df['listed_in'].apply(lambda x :  x.replace(' ,',',').replace(', ',',').split(',')) \n\n# Reducing name length\n\ndf['first_country'].replace('United States', 'USA', inplace=True)\ndf['first_country'].replace('United Kingdom', 'UK',inplace=True)\ndf['first_country'].replace('South Korea', 'S. Korea',inplace=True)","09434974":"\n\ndata = df.groupby('first_country')['count'].sum().sort_values(ascending=False)[:10]\n\n# Plot\n\ncolor_map = ['#f5f5f1' for _ in range(10)]\ncolor_map[0] = color_map[1] = color_map[2] =  '#b20710' # color highlight\n\nfig, ax = plt.subplots(1,1, figsize=(12, 6))\nax.bar(data.index, data, width=0.5, \n       edgecolor='darkgray',\n       linewidth=0.6,color=color_map)\n\n#annotations\nfor i in data.index:\n    ax.annotate(f\"{data[i]}\", \n                   xy=(i, data[i] + 150), #i like to change this to roughly 5% of the highest cat\n                   va = 'center', ha='center',fontweight='light', fontfamily='serif')\n\n\n\n# Remove border from plot\n\nfor s in ['top', 'left', 'right']:\n    ax.spines[s].set_visible(False)\n    \n# Tick labels\n\nax.set_xticklabels(data.index, fontfamily='serif', rotation=0)\n\n# Title and sub-title\n\nfig.text(0.09, 1, 'Top 10 countries on Netflix', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.09, 0.95, 'The three most frequent countries have been highlighted.', fontsize=12, fontweight='light', fontfamily='serif')\n\nfig.text(1.1, 1.01, 'Insight', fontsize=15, fontweight='bold', fontfamily='serif')\n\nfig.text(1.1, 0.67, '''\nThe most prolific producers of\ncontent for Netflix are, primarily,\nthe USA, with India and the UK\na significant distance behind.\n\nIt makes sense that the USA produces \nthe most content as, afterall, \nNetflix is a US company.\n'''\n         , fontsize=12, fontweight='light', fontfamily='serif')\n\nax.grid(axis='y', linestyle='-', alpha=0.4)   \n\ngrid_y_ticks = np.arange(0, 4000, 500) # y ticks, min, max, then step\nax.set_yticks(grid_y_ticks)\nax.set_axisbelow(True)\n\n#Axis labels\n\n#plt.xlabel(\"Country\", fontsize=12, fontweight='light', fontfamily='serif',loc='left',y=-1.5)\n#plt.ylabel(\"Count\", fontsize=12, fontweight='light', fontfamily='serif')\n #plt.legend(loc='upper right')\n    \n# thicken the bottom line if you want to\nplt.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .7)\n\nax.tick_params(axis='both', which='major', labelsize=12)\n\n\nimport matplotlib.lines as lines\nl1 = lines.Line2D([1, 1], [0, 1], transform=fig.transFigure, figure=fig,color='black',lw=0.2)\nfig.lines.extend([l1])\n\nax.tick_params(axis=u'both', which=u'both',length=0)\n\nplt.show()\n","dc1fda7d":"country_order = df['first_country'].value_counts()[:11].index\ndata_q2q3 = df[['type', 'first_country']].groupby('first_country')['type'].value_counts().unstack().loc[country_order]\ndata_q2q3['sum'] = data_q2q3.sum(axis=1)\ndata_q2q3_ratio = (data_q2q3.T \/ data_q2q3['sum']).T[['Movie', 'TV Show']].sort_values(by='Movie',ascending=False)[::-1]\n\n\n\n\n###\nfig, ax = plt.subplots(1,1,figsize=(15, 8),)\n\nax.barh(data_q2q3_ratio.index, data_q2q3_ratio['Movie'], \n        color='#b20710', alpha=0.8, label='Movie')\nax.barh(data_q2q3_ratio.index, data_q2q3_ratio['TV Show'], left=data_q2q3_ratio['Movie'], \n        color='#221f1f', alpha=0.8, label='TV Show')\n\n\nax.set_xlim(0, 1)\nax.set_xticks([])\nax.set_yticklabels(data_q2q3_ratio.index, fontfamily='serif', fontsize=11)\n\n# male percentage\nfor i in data_q2q3_ratio.index:\n    ax.annotate(f\"{data_q2q3_ratio['Movie'][i]*100:.3}%\", \n                   xy=(data_q2q3_ratio['Movie'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=12, fontweight='light', fontfamily='serif',\n                   color='white')\n\nfor i in data_q2q3_ratio.index:\n    ax.annotate(f\"{data_q2q3_ratio['TV Show'][i]*100:.3}%\", \n                   xy=(data_q2q3_ratio['Movie'][i]+data_q2q3_ratio['TV Show'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=12, fontweight='light', fontfamily='serif',\n                   color='white')\n    \n\nfig.text(0.13, 0.93, 'Top 10 countries Movie & TV Show split', fontsize=15, fontweight='bold', fontfamily='serif')   \nfig.text(0.131, 0.89, 'Percent Stacked Bar Chart', fontsize=12,fontfamily='serif')   \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \n#ax.legend(loc='lower center', ncol=3, bbox_to_anchor=(0.5, -0.06))\n\nfig.text(0.75,0.9,\"Movie\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#b20710')\nfig.text(0.81,0.9,\"|\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='black')\nfig.text(0.82,0.9,\"TV Show\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#221f1f')\n\n\nfig.text(1.1, 0.93, 'Insight', fontsize=15, fontweight='bold', fontfamily='serif')\n\nfig.text(1.1, 0.44, '''\nInterestingly, Netflix in India\nis made up nearly entirely of Movies. \n\nBollywood is big business, and perhaps\nthe main focus of this industry is Movies\nand not TV Shows.\n\nSouth Korean Netflix on the other hand is \nalmost entirely TV Shows.\n\nThe underlying resons for the difference \nin content must be due to market research\nconducted by Netflix.\n'''\n         , fontsize=12, fontweight='light', fontfamily='serif')\n\n\n\nimport matplotlib.lines as lines\nl1 = lines.Line2D([1, 1], [0, 1], transform=fig.transFigure, figure=fig,color='black',lw=0.2)\nfig.lines.extend([l1])\n\n\n\n\nax.tick_params(axis='both', which='major', labelsize=12)\nax.tick_params(axis=u'both', which=u'both',length=0)\n\nplt.show()","dcf28200":"order = pd.DataFrame(df.groupby('rating')['count'].sum().sort_values(ascending=False).reset_index())\nrating_order = list(order['rating'])","bbfc61bc":"mf = df.groupby('type')['rating'].value_counts().unstack().sort_index().fillna(0).astype(int)[rating_order]\n\nmovie = mf.loc['Movie']\ntv = - mf.loc['TV Show']\n\n\nfig, ax = plt.subplots(1,1, figsize=(12, 6))\nax.bar(movie.index, movie, width=0.5, color='#b20710', alpha=0.8, label='Movie')\nax.bar(tv.index, tv, width=0.5, color='#221f1f', alpha=0.8, label='TV Show')\n#ax.set_ylim(-35, 50)\n\n# Annotations\nfor i in tv.index:\n    ax.annotate(f\"{-tv[i]}\", \n                   xy=(i, tv[i] - 60),\n                   va = 'center', ha='center',fontweight='light', fontfamily='serif',\n                   color='#4a4a4a')   \n\nfor i in movie.index:\n    ax.annotate(f\"{movie[i]}\", \n                   xy=(i, movie[i] + 60),\n                   va = 'center', ha='center',fontweight='light', fontfamily='serif',\n                   color='#4a4a4a')\n    \n \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n\nax.set_xticklabels(mf.columns, fontfamily='serif')\nax.set_yticks([])    \n\nax.legend().set_visible(False)\nfig.text(0.16, 1, 'Rating distribution by Film & TV Show', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.16, 0.89, \n'''We observe that some ratings are only applicable to Movies. \nThe most common for both Movies & TV Shows are TV-MA and TV-14.\n'''\n\n, fontsize=12, fontweight='light', fontfamily='serif')\n\n\nfig.text(0.755,0.924,\"Movie\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#b20710')\nfig.text(0.815,0.924,\"|\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='black')\nfig.text(0.825,0.924,\"TV Show\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#221f1f')\n\nplt.show()","6bf6d39c":"\n\nfig, ax = plt.subplots(1, 1, figsize=(12, 6))\ncolor = [\"#b20710\", \"#221f1f\"]\n\nfor i, mtv in enumerate(df['type'].value_counts().index):\n    mtv_rel = df[df['type']==mtv]['year_added'].value_counts().sort_index()\n    ax.plot(mtv_rel.index, mtv_rel, color=color[i], label=mtv)\n    ax.fill_between(mtv_rel.index, 0, mtv_rel, color=color[i], alpha=0.9)\n    \nax.yaxis.tick_right()\n    \nax.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .7)\n\n#ax.set_ylim(0, 50)\n#ax.legend(loc='upper left')\nfor s in ['top', 'right','bottom','left']:\n    ax.spines[s].set_visible(False)\n\nax.grid(False)\n\nax.set_xlim(2008,2020)\nplt.xticks(np.arange(2008, 2021, 1))\n\nfig.text(0.13, 0.85, 'Movies & TV Shows added over time', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.13, 0.59, \n'''We see a slow start for Netflix over several years. \nThings begin to pick up in 2015 and then there is a \nrapid increase from 2016.\n\nIt looks like content additions have slowed down in 2020, \nlikely due to the COVID-19 pandemic.\n'''\n\n, fontsize=12, fontweight='light', fontfamily='serif')\n\n\nfig.text(0.13,0.2,\"Movie\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#b20710')\nfig.text(0.19,0.2,\"|\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='black')\nfig.text(0.2,0.2,\"TV Show\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#221f1f')\n\nax.tick_params(axis=u'both', which=u'both',length=0)\n\nplt.show()","358e63a2":"data_sub = df.groupby('type')['year_added'].value_counts().unstack().fillna(0).loc[['TV Show','Movie']].cumsum(axis=0).T\n\nfig, ax = plt.subplots(1, 1, figsize=(12, 6))\ncolor = [\"#b20710\", \"#221f1f\"]\n\nfor i, mtv in enumerate(df['type'].value_counts().index):\n    mtv_rel = data_sub[mtv]\n    ax.fill_between(mtv_rel.index, 0, mtv_rel, color=color[i], label=mtv,alpha=0.9)\n    \n\n    \nax.yaxis.tick_right()\n    \nax.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .7)\n\n#ax.set_ylim(0, 50)\n#ax.legend(loc='upper left')\nfor s in ['top', 'right','bottom','left']:\n    ax.spines[s].set_visible(False)\n\nax.grid(False)\n\nax.set_xlim(2008,2020)\nplt.xticks(np.arange(2008, 2021, 1))\n\nfig.text(0.13, 0.85, 'Movies & TV Shows added over time [Cumulative Total]', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.13, 0.58, \n'''Netflix peak global content amount was in 2019.\n\nIt appears that Netflix has focused more attention\non increasing Movie content that TV Shows. \nMovies have increased much more dramatically\nthan TV shows.\n'''\n\n, fontsize=12, fontweight='light', fontfamily='serif')\n\n\n\nfig.text(0.13,0.2,\"Movie\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#b20710')\nfig.text(0.19,0.2,\"|\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='black')\nfig.text(0.2,0.2,\"TV Show\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#221f1f')\n\nax.tick_params(axis=u'both', which=u'both',length=0)\n\n\nplt.show()","97f48878":"month_order = ['January',\n 'February',\n 'March',\n 'April',\n 'May',\n 'June',\n 'July',\n 'August',\n 'September',\n 'October',\n 'November',\n 'December']\n\ndf['month_name_added'] = pd.Categorical(df['month_name_added'], categories=month_order, ordered=True)","7deaf960":"\n\ndata_sub = df.groupby('type')['month_name_added'].value_counts().unstack().fillna(0).loc[['TV Show','Movie']].cumsum(axis=0).T\n\nfig, ax = plt.subplots(1, 1, figsize=(12, 6))\ncolor = [\"#b20710\", \"#221f1f\"]\n\nfor i, mtv in enumerate(df['type'].value_counts().index):\n    mtv_rel = data_sub[mtv]\n    ax.fill_between(mtv_rel.index, 0, mtv_rel, color=color[i], label=mtv,alpha=0.9)\n    \n\n    \nax.yaxis.tick_right()\n    \nax.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .4)\n\n#ax.set_ylim(0, 50)\n#ax.legend(loc='upper left')\nfor s in ['top', 'right','bottom','left']:\n    ax.spines[s].set_visible(False)\n\nax.grid(False)\nax.set_xticklabels(data_sub.index, fontfamily='serif', rotation=0)\nax.margins(x=0) # remove white spaces next to margins\n\n#ax.set_xlim(2008,2020)\n#plt.xticks(np.arange(2008, 2021, 1))\n\nfig.text(0.13, 0.95, 'Content added by month [Cumulative Total]', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.13, 0.905, \n\"The end & beginnings of each year seem to be Netflix's preference for adding content.\"\n\n, fontsize=12, fontweight='light', fontfamily='serif')\n\n\n\nfig.text(0.13,0.855,\"Movie\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#b20710')\nfig.text(0.19,0.855,\"|\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='black')\nfig.text(0.2,0.855,\"TV Show\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#221f1f')\n\n\nax.tick_params(axis=u'both', which=u'both',length=0)\n\nplt.show()","e751149f":"data_sub2 = data_sub\n\ndata_sub2['Value'] = data_sub2['Movie'] + data_sub2['TV Show']\ndata_sub2 = data_sub2.reset_index()\n\ndf_polar = data_sub2.sort_values(by='month_name_added',ascending=False)\n\n\ncolor_map = ['#221f1f' for _ in range(12)]\ncolor_map[0] = color_map[11] =  '#b20710' # color highlight\n\n\n# initialize the figure\nplt.figure(figsize=(8,8))\nax = plt.subplot(111, polar=True)\nplt.axis('off')\n\n# Constants = parameters controling the plot layout:\nupperLimit = 30\nlowerLimit = 1\nlabelPadding = 30\n\n# Compute max and min in the dataset\nmax = df_polar['Value'].max()\n\n# Let's compute heights: they are a conversion of each item value in those new coordinates\n# In our example, 0 in the dataset will be converted to the lowerLimit (10)\n# The maximum will be converted to the upperLimit (100)\nslope = (max - lowerLimit) \/ max\nheights = slope * df_polar.Value + lowerLimit\n\n# Compute the width of each bar. In total we have 2*Pi = 360\u00b0\nwidth = 2*np.pi \/ len(df_polar.index)\n\n# Compute the angle each bar is centered on:\nindexes = list(range(1, len(df_polar.index)+1))\nangles = [element * width for element in indexes]\nangles\n\n# Draw bars\nbars = ax.bar(\n    x=angles, \n    height=heights, \n    width=width, \n    bottom=lowerLimit,\n    linewidth=2, \n    edgecolor=\"white\",\n    color=color_map,alpha=0.8\n)\n\n# Add labels\nfor bar, angle, height, label in zip(bars,angles, heights, df_polar[\"month_name_added\"]):\n\n    # Labels are rotated. Rotation must be specified in degrees :(\n    rotation = np.rad2deg(angle)\n\n    # Flip some labels upside down\n    alignment = \"\"\n    if angle >= np.pi\/2 and angle < 3*np.pi\/2:\n        alignment = \"right\"\n        rotation = rotation + 180\n    else: \n        alignment = \"left\"\n\n    # Finally add the labels\n    ax.text(\n        x=angle, \n        y=lowerLimit + bar.get_height() + labelPadding, \n        s=label, \n        ha=alignment, fontsize=10,fontfamily='serif',\n        va='center', \n        rotation=rotation, \n        rotation_mode=\"anchor\") ","2658bf64":"# Genres\nfrom sklearn.preprocessing import MultiLabelBinarizer \n\nimport matplotlib.colors\n\n\n# Custom colour map based on Netflix palette\ncmap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", ['#221f1f', '#b20710','#f5f5f1'])\n\n\n\ndef genre_heatmap(df, title):\n    df['genre'] = df['listed_in'].apply(lambda x :  x.replace(' ,',',').replace(', ',',').split(',')) \n    Types = []\n    for i in df['genre']: Types += i\n    Types = set(Types)\n    print(\"There are {} types in the Netflix {} Dataset\".format(len(Types),title))    \n    test = df['genre']\n    mlb = MultiLabelBinarizer()\n    res = pd.DataFrame(mlb.fit_transform(test), columns=mlb.classes_, index=test.index)\n    corr = res.corr()\n    mask = np.zeros_like(corr, dtype=np.bool)\n    mask[np.triu_indices_from(mask)] = True\n    fig, ax = plt.subplots(figsize=(10, 7))\n    fig.text(.54,.88,'Genre correlation', fontfamily='serif',fontweight='bold',fontsize=15)\n    fig.text(.75,.665,\n            '''\n             It is interesting that Independant Movies\n             tend to be Dramas. \n             \n             Another observation is that \n             Internatinal Movies are rarely\n             in the Children's genre.\n             ''', fontfamily='serif',fontsize=12,ha='right')\n    pl = sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, vmin=-.3, center=0, square=True, linewidths=2.5)\n    \n    plt.show()","651565e0":"df_tv = df[df[\"type\"] == \"TV Show\"]\ndf_movies = df[df[\"type\"] == \"Movie\"]\n\n\ngenre_heatmap(df_movies, 'Movie')\nplt.show()","c65668a5":"\n\ndata = df.groupby('first_country')[['first_country','count']].sum().sort_values(by='count',ascending=False).reset_index()[:10]\ndata = data['first_country']\n\n\ndf_heatmap = df.loc[df['first_country'].isin(data)]","e76a7c49":"df_heatmap = pd.crosstab(df_heatmap['first_country'],df_heatmap['target_ages'],normalize = \"index\").T\n\n","26ca00c6":"fig, ax = plt.subplots(1, 1, figsize=(12, 12))\n\ncountry_order2 = ['USA', 'India', 'UK', 'Canada', 'Japan', 'France', 'S. Korea', 'Spain',\n       'Mexico', 'Turkey']\n\nage_order = ['Kids','Older Kids','Teens','Adults']\n\nsns.heatmap(df_heatmap.loc[age_order,country_order2],cmap=cmap,square=True, linewidth=2.5,cbar=False,\n            annot=True,fmt='1.0%',vmax=.6,vmin=0.05,ax=ax,annot_kws={\"fontsize\":12})\n\nax.spines['top'].set_visible(True)\n\n\nfig.text(.99, .725, 'Target ages proportion of total content by country', fontweight='bold', fontfamily='serif', fontsize=15,ha='right')   \nfig.text(0.99, 0.7, 'Here we see interesting differences between countries. Most shows in India are targeted to teens, for instance.',ha='right', fontsize=12,fontfamily='serif') \n\nax.set_yticklabels(ax.get_yticklabels(), fontfamily='serif', rotation = 0, fontsize=11)\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif', rotation=90, fontsize=11)\n\nax.set_ylabel('')    \nax.set_xlabel('')\nax.tick_params(axis=u'both', which=u'both',length=0)\nplt.tight_layout()\nplt.show()","bfd083b7":"# Data\n\ndf_movies\ndf_tv\n\n### Relevant groupings\n\ndata = df_movies.groupby('first_country')[['first_country','count']].sum().sort_values(by='count',ascending=False).reset_index()[:10]\ndata = data['first_country']\ndf_loli = df_movies.loc[df_movies['first_country'].isin(data)]\n\nloli = df_loli.groupby('first_country')['release_year','year_added'].mean().round()\n\n\n# Reorder it following the values of the first value\nordered_df = loli.sort_values(by='release_year')\n\nordered_df_rev = loli.sort_values(by='release_year',ascending=False)\n\nmy_range=range(1,len(loli.index)+1)\n\n\nfig, ax = plt.subplots(1, 1, figsize=(7, 5))\n\nfig.text(0.13, 0.9, 'How old are the movies? [Average]', fontsize=15, fontweight='bold', fontfamily='serif')\nplt.hlines(y=my_range, xmin=ordered_df['release_year'], xmax=ordered_df['year_added'], color='grey', alpha=0.4)\nplt.scatter(ordered_df['release_year'], my_range, color='#221f1f',s=100, alpha=0.9, label='Average release date')\nplt.scatter(ordered_df['year_added'], my_range, color='#b20710',s=100, alpha=0.9 , label='Average added date')\n#plt.legend()\n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \n\n# Removes the tick marks but keeps the labels\nax.tick_params(axis=u'both', which=u'both',length=0)\n# Move Y axis to the right side\nax.yaxis.tick_right()\n\nplt.yticks(my_range, ordered_df.index)\nplt.yticks(fontname = \"serif\",fontsize=12)\n\n# Custome legend\nfig.text(0.19,0.175,\"Released\", fontweight=\"bold\", fontfamily='serif', fontsize=12, color='#221f1f')\nfig.text(0.76,0.175,\"Added\", fontweight=\"bold\", fontfamily='serif', fontsize=12, color='#b20710')\n\n\nfig.text(0.13, 0.46, \n'''The average gap between when \ncontent is released, and when it\nis then added on Netflix varies\nby country. \n\nIn Spain, Netflix appears to be \ndominated by newer movies \nwhereas Egypt & India have\nan older average movie.\n'''\n\n, fontsize=12, fontweight='light', fontfamily='serif')\n\n\n#plt.xlabel('Year')\n#plt.ylabel('Country')\nplt.show()","7882ae93":"data = df_tv.groupby('first_country')[['first_country','count']].sum().sort_values(by='count',ascending=False).reset_index()[:10]\ndata = data['first_country']\ndf_loli = df_tv.loc[df_tv['first_country'].isin(data)]\n\nloli = df_loli.groupby('first_country')['release_year','year_added'].mean().round()\n\n\n# Reorder it following the values of the first value:\nordered_df = loli.sort_values(by='release_year')\n\nordered_df_rev = loli.sort_values(by='release_year',ascending=False)\n\nmy_range=range(1,len(loli.index)+1)\n\n\nfig, ax = plt.subplots(1, 1, figsize=(7, 5))\n\nfig.text(0.13, 0.9, 'How old are the TV shows? [Average]', fontsize=15, fontweight='bold', fontfamily='serif')\nplt.hlines(y=my_range, xmin=ordered_df['release_year'], xmax=ordered_df['year_added'], color='grey', alpha=0.4)\nplt.scatter(ordered_df['release_year'], my_range, color='#221f1f',s=100, alpha=0.9, label='Average release date')\nplt.scatter(ordered_df['year_added'], my_range, color='#b20710',s=100, alpha=0.9 , label='Average added date')\n#plt.legend()\n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \nax.yaxis.tick_right()\nplt.yticks(my_range, ordered_df.index)\nplt.yticks(fontname = \"serif\",fontsize=12)\n\n\nfig.text(0.19,0.175,\"Released\", fontweight=\"bold\", fontfamily='serif', fontsize=12, color='#221f1f')\n\nfig.text(0.47,0.175,\"Added\", fontweight=\"bold\", fontfamily='serif', fontsize=12, color='#b20710')\n\n\nfig.text(0.13, 0.42, \n'''The gap for TV shows seems\nmore regular than for movies.\n\nThis is likely due to subsequent\nseries being released\nyear-on-year.\n\nSpain seems to have\nthe newest content\noverall.\n'''\n\n, fontsize=12, fontweight='light', fontfamily='serif')\n\n\nax.tick_params(axis=u'both', which=u'both',length=0)\n#plt.xlabel('Value of the variables')\n#plt.ylabel('Group')\nplt.show()","e6f3b0cf":"\nus_ind = df[(df['first_country'] == 'USA') | (df['first_country'] == 'India' )]\n\ndata_sub = df.groupby('first_country')['year_added'].value_counts().unstack().fillna(0).loc[['USA','India']].cumsum(axis=0).T\n","5ee3467b":"fig, ax = plt.subplots(1, 1, figsize=(12, 6))\ncolor = ['#221f1f', '#b20710','#f5f5f1']\n\nfor i, hs in enumerate(us_ind['first_country'].value_counts().index):\n    hs_built = us_ind[us_ind['first_country']==hs]['year_added'].value_counts().sort_index()\n    ax.plot(hs_built.index, hs_built, color=color[i], label=hs)\n    #ax.fill_between(hs_built.index, 0, hs_built, color=color[i], alpha=0.4)\n    ax.fill_between(hs_built.index, 0, hs_built, color=color[i], label=hs)\n    \n\nax.set_ylim(0, 1000)\n#ax.legend(loc='upper left')\nfor s in ['top', 'right']:\n    ax.spines[s].set_visible(False)\n\nax.yaxis.tick_right()\n    \nax.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .4)\n\n#ax.set_ylim(0, 50)\n#ax.legend(loc='upper left')\nfor s in ['top', 'right','bottom','left']:\n    ax.spines[s].set_visible(False)\n\nax.grid(False)\nax.set_xticklabels(data_sub.index, fontfamily='serif', rotation=0)\nax.margins(x=0) # remove white spaces next to margins\n\nax.set_xlim(2008,2020)\nplt.xticks(np.arange(2008, 2021, 1))\n\nfig.text(0.13, 0.85, 'USA vs. India: When was content added?', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.13, 0.58, \n'''\nWe know from our work above that Netflix is dominated by the USA & India.\nIt would also be reasonable to assume that, since Netflix is an American\ncompnany, Netflix increased content first in the USA, before \nother nations. \n\nThat is exactly what we see here; a slow and then rapid\nincrease in content for the USA, followed by Netflix \nbeing launched to the Indian market in 2016.'''\n\n, fontsize=12, fontweight='light', fontfamily='serif')\n\n\n\nfig.text(0.13,0.15,\"India\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#b20710')\nfig.text(0.188,0.15,\"|\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='black')\nfig.text(0.198,0.15,\"USA\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#221f1f')\n\n\nax.tick_params(axis=u'both', which=u'both',length=0)\n\n\nplt.show()","d69223aa":"us_ind = df[(df['first_country'] == 'USA') | (df['first_country'] == 'India' )]\n\ndata_sub = df.groupby('first_country')['year_added'].value_counts().unstack().fillna(0).loc[['USA','India']].cumsum(axis=0).T\ndata_sub.insert(0, \"base\", np.zeros(len(data_sub)))\n\ndata_sub = data_sub.add(-us_ind['year_added'].value_counts()\/2, axis=0)\n","61a82e8d":"fig, ax = plt.subplots(1, 1, figsize=(14, 6))\ncolor = ['#b20710','#221f1f'][::-1]\nhs_list = data_sub.columns\nhs_built = data_sub[hs]\n\nfor i, hs in enumerate(hs_list):\n    if i == 0 : continue\n    ax.fill_between(hs_built.index, data_sub.iloc[:,i-1], data_sub.iloc[:,i], color=color[i-1])\n    \nfor s in ['top', 'right', 'bottom', 'left']:\n    ax.spines[s].set_visible(False)\nax.set_axisbelow(True)\nax.set_yticks([])\n#ax.legend(loc='upper left')\nax.grid(False)\n\nfig.text(0.16, 0.76, 'USA vs. India: Stream graph of new content added', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.16, 0.575, \n'''\nSeeing the data displayed like this helps \nus to realise just how much content is added in the USA.\nRemember, India has the second largest amount of\ncontent yet is dwarfed by the USA.'''\n\n, fontsize=12, fontweight='light', fontfamily='serif')\n\nfig.text(0.16,0.41,\"India\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#b20710')\nfig.text(0.208,0.41,\"|\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='black')\nfig.text(0.218,0.41,\"USA\", fontweight=\"bold\", fontfamily='serif', fontsize=15, color='#221f1f')\n\n\nax.tick_params(axis=u'y', which=u'both',length=0)\n\nplt.show()","ff698c06":"from wordcloud import WordCloud\nimport random\nfrom PIL import Image\nimport matplotlib\n\n# Custom colour map based on Netflix palette\ncmap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", ['#221f1f', '#b20710'])\n\ntext = str(list(df['title'])).replace(',', '').replace('[', '').replace(\"'\", '').replace(']', '').replace('.', '')\n\nmask = np.array(Image.open('..\/input\/netflix-icon-new\/f6974e017d3f6196c4cbe284ee3eaf4e.png'))\n\nwordcloud = WordCloud(background_color = 'white', width = 500,  height = 200,colormap=cmap, max_words = 150, mask = mask).generate(text)\n\nplt.figure( figsize=(5,5))\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","88be4a12":"\n# Thanks for reading!\n\n# I hope you enjoyed my visuals \n\n# Please consider upvoting if you did\n\n# Have a great day\n\n\nView more of my work:\n\n**Exploratory Data Visualization - Student Performance**\n\nhttps:\/\/www.kaggle.com\/joshuaswords\/data-visualisation-student-results\n\n**Visuals & Modelling**\n\nhttps:\/\/www.kaggle.com\/joshuaswords\/awesome-hr-data-visualization-prediction\n\n**Visuals & Customer Segmentation**\n\nhttps:\/\/www.kaggle.com\/joshuaswords\/data-visualization-clustering-mall-data\n\n**March 2021 Tabular Playground Series**\n\nhttps:\/\/www.kaggle.com\/joshuaswords\/tps-eda-model-march-2020\n\n","ee49647e":"# Data Visualization\n\nThe purpose of this notebook is to practice data visualization, and hopefully communicate some best-practices along the way.\n\n\n# Please upvote if you find this useful\n\nSome sources I'd reccomend for data visualization principles are:\n\n- Storytelling with data, C. Knaflic\n\n- The visual display of quantitative information, E. Tufte\n\n- Better data visualizations, J. Schwabish\n\n\nI have other notebooks that also incoroprate some nice visuals:\n\n**UK COVID-19 Vaccination Data Visualization**\n\nhttps:\/\/www.kaggle.com\/joshuaswords\/uk-covid-19-vaccination-progress-data-vis\n\n\n**Exploratory Data Visualization - Student Performance**\n\nhttps:\/\/www.kaggle.com\/joshuaswords\/data-visualisation-student-results\n\n**HR Data Set - Visuals & Predictions**\n\nhttps:\/\/www.kaggle.com\/joshuaswords\/awesome-hr-data-visualization-prediction\n\n\n**Visuals & Customer Segmentation**\n\nhttps:\/\/www.kaggle.com\/joshuaswords\/data-visualization-clustering-mall-data\n\n\nAs well as learning from other Kagglers who enjoy data viz.\n\nWith that said, let's go...","f098c0b8":"# Missing values dealt with, but the date isn't quite right yet...","b8ca840b":"# Okay, let's visualize\n\n# Where possible, I'll use the Netflix brand colours\n\nhttps:\/\/brand.netflix.com\/en\/assets\/brand-symbol\/\n\n\nUsing a consistent color palette is a great way to give your work credibility. It looks professional, and keeps the reader engaged. \n\nIt's an easy-to-implement tip that really helps.","ec5d4b0c":"What about TV shows...","9f85b44e":"# Dealing with the missing data\n\n- This is always scenario dependant, but in this case, I will:\n    - replace blank countries with the mode (most common) country\n    - I want to keep director as it could be interesting to look at a certain director's films\n    - I want to keep cast as it could be interesting to look at a certain cast's films\n    ","bcb0393b":"Very interesting results. \n\nIt is also interesting to note similarities between culturally similar countries - the US & UK are closey aligned with their Netflix target ages, yet vastly different to say, India or Japan!","0acd652a":"# By Country\n\nSo we now know there are much more movies than TV shows on Netflix (which surprises me!).\n\nWhat about if we look at content by country? \n\nI would imagine that the USA will have the most content. I wonder how my country, the UK, will compare?","19104850":"# USA & India\n\nAs the two largest content countries, it might be fun to compare the two","f622b1c1":"Yes, December & January are definitely the best months for new content. Maybe Netflix knows that people have a lot of time off from work over this period and that it is a good time to reel people in?\n\nFebruary is the worst - why might this be? Ideas welcomed!","deed42d2":"# Netflix through the years","7870fa45":"# Content - Let's explore\n\nNow we've seen how Netflix came to dominate our TV screens, let's have a look at the content they offer...","7f5bf809":"# We can view the same plot, but as a cumulative total...","a457d79a":"As we saw in the timeline at the start of this analysis, Netflix went global in 2016 - and it is extremely noticeable in this plot.\n\nThe increase is Movie content is remarkable.","aa309109":"Netflix started as DVD rentals, and now they have an audience of over 150m people - this is their story...\n\nTimeline code from Subin An's awesome notebook\nhttps:\/\/www.kaggle.com\/subinium\/awesome-visualization-with-titanic-dataset","0600a287":"# What about a more interesting way to view how content is added across the year?\n\nSometimes visualizations should be eye-catching & attention grabbing - I think this visual acheives that, even if it isn't the most precise.\n\nBy highlighting certain months, the reader's eye is drawn exactly where we want it. ","5c14b2f3":"# Month-by-Month\n\nWe've seen how content has increased over the years, but are there certain months that, on average, tend to enjoy more content being added?\n\nI'll show this in a couple of ways - a cumulative year view, and also as a radial plot...","e2896067":"# Lastly, we can view a wordcloud to get an overview of Netflix titles\n\n\nIt is interesting to note that many films share the same key words in their titles.\n\n\n\nCredit to Dmitry Uarov for figuring this visual out. His notebook is here:\n\nhttps:\/\/www.kaggle.com\/dmitryuarov\/netflix-eda-with-plotly\n\n","bdb867f6":"So the USA dominates. But is there a plot that can convey this in another way?","e9472905":"# Let's have a quick look at the lag between when content is released and when it is added on Netflix\n\nSpain looks to have a lot of new content. Great for them!","b73736e8":"# Movie Genres\n\nLet's now explore movie genres a little...","1b70e171":"As I've noted in the insights on the plot, it is really interesting to see how the split of TV Shows and Movies varies by country.\n\nSouth Korea is dominated by TV Shows - why is this? I am a huge fan of South Korean cinema so I know they have a great movie selection.\n\nEqually, India is dominated by Movies. I think this might be due to Bollywood - comment below if you have any other ideas!\n\n# Ratings\n\nLet's briefly check out how ratings are distributed","b537fc92":"# Target Ages\n\nDoes Netflix uniformly target certain demographics? Or does this vary by country?\n\n","455ced1c":"- 5 columns have missing values, with Director missing 1\/3 of the time","e53ebe96":"# How has content been added over the years?","0775b274":"As predicted, the USA dominates. \n\nThe UK is a top contender too, but still some way behind India.\n\nHow does content by country vary? "}}