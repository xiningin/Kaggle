{"cell_type":{"9bd9fa7e":"code","1940a442":"code","8664aa25":"code","8b887a03":"code","37379029":"code","7afae818":"code","39fee0a4":"code","2730b573":"code","78959273":"code","ef784e04":"code","9e96e66b":"code","4da495f7":"code","a0d97342":"code","f517193a":"code","d4521cad":"code","4182583b":"code","02d9fed7":"code","e1f424a6":"code","731d4bfc":"markdown","812216b8":"markdown","f3d57442":"markdown","f3afe6ac":"markdown","f77c33a3":"markdown","87475f65":"markdown","451ff5dc":"markdown","fc4220f0":"markdown","7efeae7b":"markdown","3c1217b9":"markdown","dbaf3012":"markdown","70a66507":"markdown","f656f3d3":"markdown","3c215545":"markdown","5bc17d84":"markdown","e82445a7":"markdown","fdbabfba":"markdown"},"source":{"9bd9fa7e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport itertools\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1940a442":"NUM_SYMBOLS = 7","8664aa25":"# from https:\/\/www.kaggle.com\/ilialar\/santa-2021-baseline-and-optimization-ideas\npermutations = [''.join(x) for x in itertools.permutations([str(i+1) for i in range(NUM_SYMBOLS)], NUM_SYMBOLS)]\nlen(permutations)","8b887a03":"data = pd.DataFrame(permutations, columns=['perm']).sort_values(by='perm').reset_index(drop=True)","37379029":"data['roll_grp'] = data.perm.apply(lambda x: x[x.find('1'):]+x[:x.find('1')])\ndata['roll_val'] = data.perm+data.perm.str[:-1]\n\ndata","7afae818":"overlaps = [(i+1) for i in range(0, NUM_SYMBOLS-2)]\noverlaps.reverse()\noverlaps","39fee0a4":"def gen_code(av_data = data.copy(), gen_code_grp = True):\n   \n    code = ''\n    num_found=0\n\n    while av_data.shape[0]>0:\n        for idx, row in av_data.iterrows():\n            found=False\n\n            if code == '':\n                code = row.roll_val\n                found=True\n                num_found +=1\n                data.loc[data.roll_grp==row.roll_grp, 'code_grp']=0\n                av_data = av_data[av_data.roll_grp!=row.roll_grp]\n                break\n            else:\n                for ov in overlaps:\n                    for _, row2 in av_data.iterrows():\n                        if code[-ov:] == row2.roll_val[:ov]:\n                            v_last_ov = ov\n                            code += row2.roll_val[ov:]\n                            found=True\n                            break\n                    if found:\n                        break\n                if found:\n                    num_found +=1\n                    \n                    # put processed permutation in one of three groups\n                    if gen_code_grp:\n                        if num_found <= data.roll_grp.drop_duplicates().shape[0]\/\/3:\n                            data.loc[data.roll_grp==row2.roll_grp, 'code_grp']=0\n                        elif num_found <= data.roll_grp.drop_duplicates().shape[0]\/\/3*2:\n                            data.loc[data.roll_grp==row2.roll_grp, 'code_grp']=1\n                        else:\n                            data.loc[data.roll_grp==row2.roll_grp, 'code_grp']=2\n\n                    av_data = av_data[av_data.roll_grp!=row2.roll_grp]\n                    break\n\n    print(f'The generated string containing all permutations has {len(code)} characters.\\n')\n\n    return code","2730b573":"%%time\n\ncode = gen_code(av_data = data.copy(), gen_code_grp = True)\n","78959273":"lc = len(code)\n\nfin_queues = [None]*3\n\nfin_queues[0] = code[:(lc\/\/3+6)]\nfin_queues[1] = code[(lc\/\/3):-(lc\/\/3-6)]\nfin_queues[2] = code[-(lc\/\/3+6):]\n\nmax_len = 0\nfor it, q in enumerate(fin_queues):\n    max_len = max(max_len, len(q))\n    print(f'String {it} contains {len(q)} characters')\n\nprint(f'\\nThe longest String contains {max_len} characters')","ef784e04":"%%time\nfin_queues = [None]*3\nfor it in range(3):\n    fin_queues[it] = gen_code(av_data = data[data.code_grp==it].copy(), gen_code_grp = False)\n    \nmax_len = 0\nfor it, q in enumerate(fin_queues):\n    max_len = max(max_len, len(q))\n    print(f'String {it} contains {len(q)} characters')\n\nprint(f'\\nThe longest String contains {max_len} characters')","9e96e66b":"i=0\nfor p in permutations:\n    if (p in fin_queues[0])|(p in fin_queues[1])|(p in fin_queues[2]):\n        pass \n    else:\n        print(p)\n        i+=1\nassert(i == 0)","4da495f7":"perm_santa_couple = [''.join(x) for x in itertools.permutations([str(i+1) for i in range(NUM_SYMBOLS)], 2)]\n\nfor ps in perm_santa_couple:\n    log = f'Santas: {ps}\\n'\n    \n    avg = 0\n    mn = 9999\n    for qn, q in enumerate(fin_queues):\n        avg += q.count(ps)\/3\n        mn = min(mn, q.count(ps))\n        log += f'counts in Q({qn}):{q.count(ps)}\\n'\n    log+=f'avg: {avg:.2f}, min: {mn}\\n'\n    \n    if (mn >= 50)&(avg>=50):\n        print(log)\n        ","a0d97342":"santa_couple_code = '45'\n\ndef fill_q(fin_queues):\n    santa_couple_add = 0\n    for q_id in range(3):\n        print(f'queue({q_id})#')\n        print(f'length before santa couple added: {len(fin_queues[q_id])}')\n        for perm in data[data.perm.str.startswith(santa_couple_code)].perm.values:\n            if perm not in fin_queues[q_id]:\n                fin_queues[q_id] = fin_queues[q_id]+perm\n                santa_couple_add +=1\n        print(f'length after: {len(fin_queues[q_id])}\\n')\n    \n    print(f'SantasCoder to add: {santa_couple_add}\\n')\n    print(f'* {len(fin_queues[0]),len(fin_queues[1]),len(fin_queues[2])}\\n')\n    return fin_queues","f517193a":"fin_queues_ext = fill_q(fin_queues)","d4521cad":"replace_dict = {\n    \"4\": '\ud83c\udf85', \n    \"5\": '\ud83e\udd36', \n    \"3\": '\ud83e\udd8c', \n    \"1\": '\ud83e\udddd', \n    \"2\": '\ud83c\udf84', \n    \"6\": '\ud83c\udf81', \n    \"7\": '\ud83c\udf80', \n}\n\nans = fin_queues_ext.copy()\nfor i in range(3):\n    for k,v in replace_dict.items():\n        ans[i] = ans[i].replace(k, v)","4182583b":"ans[0][:20]","02d9fed7":"sub = pd.DataFrame()\nsub['schedule'] = [ans[i] for i in range(3)]\n\nsub","e1f424a6":"sub.to_csv('submission.csv', index = False)","731d4bfc":"# Approximating the Superpermutation length\n\nIf we just contat the roll_val, we get a length of 9360:\n\n`len(roll_val) * count(distinct roll_grp) = (2*NUM_SYMBOLS-1)*(NUM_SYMBOLS-1)! = 13 * 720 = 9360`\n\n\nWe can reduce the length by the overlappings by 3447. Overlappings:\n\n```python\nredc = 0\nfor ov in overlaps:\n  redc += ov * ov! * grp_compration_rate #, with grp_compration_rate = ov\n\n=> 5*5!*5 + 4*4!*4 + 3*3!*3 + 2*2!*2 + 1*1!*1 = 3447\n```\n\nSo I expect a Supperpermutation length of 9360 - 3447 = 5913.\n\n> Note: till now I could not figure out where I left the remaining 7 that'd lead to the best known solution of 5609. It's likely that the score doesn't improve further with my approach, because the `roll_vall` always ties 7 permutations together (see comment section below).","812216b8":"Build all permutations:","f3d57442":"Next I build a rolling value for each permutation. That already implicitly includes 7 permutations in one String with length 13.\nHere is an example:\n\n```java\n1234567\n.2345671\n..3456712\n...4567123\n....5671234\n.....6712345\n......7123456\n=============\n1234567123456\n```\n\nEach of these permutations gets assigned to the same group (`roll_grp`). In the example: 1234567.","f3afe6ac":"# Split and extend Superpermutation for competition\nFor the competition the supermermutation needs to be split in three parts.\nWe chop the code in three pieces with overlapping ends and beginnings, so we do not loose permutations on the split points.","f77c33a3":"# About\n\nI tried to rebuild the shortest superpermutation (for n=7) on my own and build the submission on top of it. Maybe there is a chance to tweak the solution later on while building the superpermutation. \n\nSofare the shortest known solution for the superpermutiatio is [5906](https:\/\/www.kaggle.com\/ilialar\/santa-2021-baseline-and-optimization-ideas).\n\n## References:\n- Some helpful info: https:\/\/www.kaggle.com\/ilialar\/santa-2021-baseline-and-optimization-ideas","87475f65":"It is likely that the overlapping characters produce some overhead.\n\nWhile calculating the suppermermutation we assigned each permutation to one of three groups (`data.code_grp`).\nLet's try to calculate for each group an independent superpermutation.","451ff5dc":"Let's define the number of symbols for the superpermutation (in this competition n=7):","fc4220f0":"# Data preperation","7efeae7b":"# Generating the Superpermutation\n\nCalculate the short superpermutation:","3c1217b9":"Assert no permutation is missing:","dbaf3012":"We gopt rid of the overlapping characters and reduced the longest string from 1977 to **1973** characters.","70a66507":"We end up with the longest string having **2533** characters.","f656f3d3":"Find best Santa couple (couples that are equaly distributed among the three strings):","3c215545":"# Submission","5bc17d84":"I pick 45 as Santa couple and add all missing Santa couple permutation at the end of the Strings.","e82445a7":"Now I combine different `roll_val` with the most possible overlapping.\nThe possible overlap-sizes are 5,4,3,2 and 1.\n\nExample:\n\n```java\n12345671 23456\n         23456 17234561\n=======================\n12345671 23456 17234561\n```\n","fdbabfba":"I put the permutation in a DataFrame. (There is a lot of opportunity to speed up the calculations further on, but that's not on my focus today. Putting data in a table makes it easy to examine them.)"}}