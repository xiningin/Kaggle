{"cell_type":{"b5673124":"code","e67ed562":"code","4b902be4":"code","66a17378":"code","35e276d9":"code","e3eef1ac":"code","10aece16":"code","31809dc9":"code","3b44c705":"code","170b3ef9":"code","8a0c93db":"code","0d9e0b2a":"code","4987b9f2":"code","80b8669f":"code","af128ade":"code","57c55dc6":"code","69700f79":"code","73eb511b":"code","d1be57b3":"code","6424de33":"code","58b69eb0":"code","324c2d8f":"code","0611645e":"code","d424fc95":"code","cf556814":"code","e30589f4":"code","ea55c32e":"code","258a65e5":"code","17530977":"markdown","15fb54f7":"markdown","527efb97":"markdown","d5bc9eba":"markdown","3af014a2":"markdown"},"source":{"b5673124":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e67ed562":"iris_data = pd.read_csv('..\/input\/iris\/Iris.csv')","4b902be4":"iris_data.head()","66a17378":"iris_data.shape","35e276d9":"import seaborn as sns\n%matplotlib inline","e3eef1ac":"iris_data['Species'].value_counts()","10aece16":"iris_data.isnull().sum()","31809dc9":"ax = sns.boxplot(x = 'Species', y = 'PetalWidthCm',data = iris_data)","3b44c705":"ax = sns.boxplot(x = 'Species', y = 'PetalLengthCm',data = iris_data)","170b3ef9":"iris_data.drop(\"Id\", axis=1).boxplot(by=\"Species\", figsize=(12, 6))","8a0c93db":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n","0d9e0b2a":"iris_data.columns","4987b9f2":"features = ['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']","80b8669f":"X = iris_data[features]","af128ade":"X.head()","57c55dc6":"y = iris_data['Species']","69700f79":"y","73eb511b":"X_trian,X_test,y_train,y_test = train_test_split(X,y, test_size = 0.33,shuffle = True)","d1be57b3":"classification = DecisionTreeClassifier()\nclassification.fit(X_trian,y_train)","6424de33":"prediction = classification.predict(X_test)","58b69eb0":"prediction[:10]","324c2d8f":"y_test[:10]","0611645e":"accuracy_score(y_true = y_test, y_pred = prediction)*100","d424fc95":"classification1 = KNeighborsClassifier()\nclassification1.fit(X_trian,y_train)","cf556814":"prediction1 = classification1.predict(X_test)","e30589f4":"prediction1","ea55c32e":"y_test","258a65e5":"accuracy_score(y_true = y_test, y_pred = prediction1)*100","17530977":"**Applying Model**","15fb54f7":"**applying knn**","527efb97":"**applying decision tree classifier**","d5bc9eba":"Import Dataset","3af014a2":"**Exploring Data**"}}