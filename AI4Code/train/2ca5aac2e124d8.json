{"cell_type":{"41997e82":"code","7266d707":"code","df3c3451":"code","97e9772a":"code","fba228ce":"code","5227b09f":"code","1161db89":"code","74e4f786":"code","d7927093":"code","5c2717bd":"code","595c1686":"code","ad894d09":"code","b88fb00d":"code","ff6e9844":"code","0b1761cd":"markdown","0436f518":"markdown","96c03068":"markdown","d9d668bd":"markdown","f024cd2b":"markdown"},"source":{"41997e82":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","7266d707":"import pandas as pd","df3c3451":"X_train.head()","97e9772a":"y_train.head()","fba228ce":"X_train.info()","5227b09f":"# Select only numeric variables\nX_train = X_train.select_dtypes(exclude = 'object')\nX_test = X_test.select_dtypes(exclude = 'object')","1161db89":"# Check the missing values\n\nX_train.isnull().sum()\/len(X_train)","74e4f786":"X_test.isnull().sum()\/len(X_test)","d7927093":"# Remove the columns having missing values\n\nX_train = X_train.drop(columns = ['LotFrontage', 'MasVnrArea', 'GarageYrBlt', 'GarageYrBlt'])\nX_test = X_test.drop(columns = ['LotFrontage', 'MasVnrArea', 'GarageYrBlt', 'GarageYrBlt'])\nprint(X_train.shape, X_test.shape)","5c2717bd":"from sklearn.model_selection import train_test_split\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train['SalePrice'], test_size = 0.2,shuffle = True,random_state = 2021)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","595c1686":"from sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\nfrom sklearn.metrics import mean_squared_error\n\nmodel_RF = RandomForestRegressor()\nmodel_RF.fit(X_tr, y_tr)\npred_RF= model_RF.predict(X_val)\n\nprint(\"RMSE of Random Forest model: \", round(np.sqrt(mean_squared_error(y_val, pred_RF)),2))","ad894d09":"model_XGB = XGBRegressor()\nmodel_XGB.fit(X_tr, y_tr)\npred_XGB= model_XGB.predict(X_val)\n\nprint(\"RMSE of XGBoost model: \", round(np.sqrt(mean_squared_error(y_val, pred_XGB)),2))","b88fb00d":"final_model = XGBRegressor()\nfinal_model.fit(X_train, y_train['SalePrice'])\nprediction = final_model.predict(X_test)\n\nprint(\"RMSE of final model: \", round(np.sqrt(mean_squared_error(y_test['SalePrice'], prediction)),2))","ff6e9844":"submission = pd.DataFrame({\n    'Id' : y_test['Id'],\n    'SalePrice' : prediction\n})\n\nsubmission.to_csv('ID.csv', index= False)","0b1761cd":"# Predict & to CSV","0436f518":"# Data Load & Simple EDA","96c03068":"## Model","d9d668bd":"# \uacb0\uacfc \uccb4\uc810","f024cd2b":"# Preprocessing"}}