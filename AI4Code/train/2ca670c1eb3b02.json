{"cell_type":{"c9cc25d5":"code","b83df772":"code","8b5f90ff":"code","c19765af":"code","450b0ff9":"code","1fda3650":"code","d07d4976":"code","4dc8eb78":"code","8651b369":"code","5d0702cc":"code","f02209cf":"code","9ee45e3f":"code","7bbbb9fa":"code","d7175e7f":"code","f68db092":"code","288b5880":"code","553c8301":"code","d9988a5d":"code","9aec3ca1":"code","270addaf":"code","461bc570":"code","8144625c":"code","db166254":"code","8558921e":"code","9945a80b":"code","ef4ab9f3":"code","75102ba9":"code","4f9907b6":"code","3b2adb9f":"code","11ba3152":"code","0675c4ed":"code","5355de19":"code","c5bee272":"code","3b83ebba":"code","4f0b590b":"code","34bca963":"code","84b5aea9":"code","3dbd0d41":"code","0eeb26ba":"code","2f724e50":"code","2877acac":"code","ad6c5054":"code","0ce53cc2":"code","4bd8ccfa":"code","cf1d909d":"code","da7d8645":"code","bd13e002":"code","421eb287":"code","bc675d3a":"code","ad29488a":"code","63b04fc0":"code","032822b0":"code","a359f477":"code","14583e83":"code","1fc29b33":"code","0f6e8ca8":"code","9729695e":"code","17ccc581":"code","c61e20c8":"code","9a76a78e":"code","7122107c":"code","adebe9f3":"code","d470e187":"code","cb98b216":"code","85316e13":"code","25d9b549":"code","4365be17":"code","53b99a9a":"code","c7d8e9b8":"code","2eba0fca":"code","762fcb5e":"code","166bb394":"code","3e46c520":"code","722e8329":"code","821a7877":"code","5e7bba30":"code","e7349820":"code","e27466f5":"code","8afc5609":"markdown","3f025c94":"markdown","b7ab5e36":"markdown","5b650f62":"markdown","52af9cb2":"markdown","a06cc871":"markdown","31f13ade":"markdown","47a22f24":"markdown","6fa20bc9":"markdown","d424e4a1":"markdown","078a4ec4":"markdown","2560e4d8":"markdown","19032e13":"markdown","e61157ac":"markdown","34fbb672":"markdown","1a69a6b8":"markdown","73932995":"markdown","744f845e":"markdown","694cce24":"markdown","f57bfad1":"markdown","e04f240f":"markdown","59597d2e":"markdown","25fd648d":"markdown","8c9d3c0a":"markdown","56a533a7":"markdown","7209ed01":"markdown","f1d668e3":"markdown","40e0079d":"markdown","7513ad66":"markdown","397c5d9a":"markdown","74bcc23c":"markdown","d57073d3":"markdown","d708200d":"markdown","1e0461a1":"markdown","58a02acf":"markdown","d2dcb61d":"markdown","23fc1451":"markdown","d9de0d8a":"markdown","0c9538d0":"markdown","d9c6d417":"markdown","9e94ac88":"markdown","b0f0740d":"markdown","5c0915cf":"markdown","9027c95f":"markdown","5687b948":"markdown","01ea4805":"markdown","4cb9f610":"markdown","4adafb6a":"markdown","7775f250":"markdown"},"source":{"c9cc25d5":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","b83df772":"IN_CLOUD  = True\nINPUT_DIR = '..\/input' if IN_CLOUD else '.\/data'","8b5f90ff":"train_df = pd.read_csv(f'{INPUT_DIR}\/train.csv')","c19765af":"# Overview of the Dataset\n\nprint(train_df.dtypes)\ntrain_df.sample(8)\n","450b0ff9":"# Check Missing Values\n\nprint(f'Count of Missing Values for each Column (out of {len(train_df)}): ')\nprint(train_df.isnull().sum())\n","1fda3650":"train_df.drop('Cabin', axis=1, inplace=True)","d07d4976":"train_df['Embarked'].value_counts()","4dc8eb78":"\ntrain_df.Embarked.fillna('S', inplace=True)\nassert not train_df.Embarked.isnull().any()\n","8651b369":"missing_age_rows = train_df[train_df['Age'].isnull()].copy() # Save for later processing\nmissing_age_rows.sample(3)","5d0702cc":"train_df.Age.fillna(train_df['Age'].mean(), inplace=True)\nassert not train_df.Age.isnull().any()","f02209cf":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","9ee45e3f":"COLOR_SURVIVED='#57e8fc'\nCOLOR_DEAD='#fc5e57'","7bbbb9fa":"# Survival Ratio\n\nlabels = ['Dead', 'Survived']\nval_counts = train_df.Survived.value_counts()\n#print(vals)\nsizes = [val_counts[0], val_counts[1]]\ncolors = [COLOR_DEAD, COLOR_SURVIVED ]\n#print(sizes)\n\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, shadow=True, startangle=90, explode=(0.1,0), autopct='%1.1f%%', colors=colors)\nax.axis('equal')\nplt.title('Overall Survival Ratio')\nplt.show()\n","d7175e7f":"def encode_sex(sex_col):\n    return sex_col.map({'female': 0, 'male': 1}).astype('int')","f68db092":"train_df.Sex = encode_sex(train_df.Sex)\nprint(train_df.Sex.dtype)\ntrain_df.Sex.unique()","288b5880":"COLOR_MALE   = '#6699ff'\nCOLOR_FEMALE = '#ff66ff'","553c8301":"val_counts = train_df.Sex.value_counts()\nsizes  = [val_counts[0], val_counts[1]]\nlabels = ['Female', 'Male']\ncolors = [COLOR_FEMALE, COLOR_MALE]\n\nprint(val_counts, labels)\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, shadow=True, startangle=90, explode=(0.1, 0), autopct='%1.1f%%', colors= colors)\nax.axis('equal')\nplt.title('Count of Passengers by Sex')\nplt.show()","d9988a5d":"ct = pd.crosstab(train_df.Sex, train_df.Survived)\n\nind = np.arange(2)\nsurvived_vals = [ct.loc[1][1], ct.loc[0][1]]\ndead_vals = [ct.loc[1][0], ct.loc[0][0]]\nprint(ct)\n\nwidth=0.3\n\nplt.bar(ind, survived_vals, width, label='Survived', color=COLOR_SURVIVED)\nplt.bar(ind+width, dead_vals, width, label='Dead', color=COLOR_DEAD)\n\nplt.xticks(ind+width\/2, ('Men', 'Women'))\nplt.yticks(np.arange(0, 600, 50))\nplt.legend( loc='upper right')\nplt.show()\n\n#ax.bar(ct)","9aec3ca1":"def construct_age_cat_col(age_col):\n    age_cat_col = pd.Series([-1] * len(age_col))\n    for i, val in age_col.iteritems():\n        if val < 14:                 # Kids\n            age_cat_col[i] = 0\n        elif val >= 14 and val < 22: # Teens\n            age_cat_col[i] = 1\n        elif val >= 22 and val < 35: # Adults\n            age_cat_col[i] = 2\n        elif val >= 35 and val < 50: # Big Adults\n            age_cat_col[i] = 3\n        elif val >= 50:              # Seniors\n            age_cat_col[i] = 4\n        else:\n            raise ValueError('Preprocessing Age: Age Value unsupported ! ', val)\n    return age_cat_col","270addaf":"print('Information about the ages of the passengers:')\n#print(train_df.Age.describe())\n\ntrain_df['AgeCat'] = construct_age_cat_col(train_df.Age)\n\ntrain_df.sample(5)","461bc570":"labels = ['Kids', 'Teens', 'Adults', 'Big Adults', 'Seniors']\n\nct = pd.crosstab(train_df.AgeCat, train_df.Survived, margins=True)\ncats = list(ct.index.values)\ncats.remove('All') # Remove the 'All' row which contains the total (the Margin that we added in crosstab)\ncats.sort()\nprint(cats)\n","8144625c":"sizes = list(ct.loc[cats, 'All'])\nprint(sizes)\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, shadow=True, startangle=90, autopct='%1.1f%%')\nax.axis('equal')\nplt.title('Count of Passengers by Age Category')\nplt.show()","db166254":"ind = np.arange(5)\nwidth = 0.25\n\nsurvivants_values = list(ct.loc[cats, 1])\ndeads_values = list(ct.loc[cats, 0])\n\n\nplt.bar(ind,  survivants_values, width, label='Survived', color=COLOR_SURVIVED)\nplt.bar(ind+width, deads_values, width, label='Dead', color=COLOR_DEAD)\n\nplt.xticks(ind+width\/2, ('Kids', 'Teens', 'Adults', 'Big Adults','Seniors'))\nplt.yticks(np.arange(0, 300, 25))\nplt.legend(loc='upper right')\nplt.show()","8558921e":"ct = pd.crosstab(train_df.Pclass, train_df.Survived, margins=True)\ncats = list(ct.index.values)\ncats.remove('All') # Remove the 'All' row which contains the total (the Margin that we added in crosstab)\ncats.sort()\nprint(cats)\n","9945a80b":"sizes = list(ct.loc[cats, 'All'])\nprint(sizes)\nlabels = ['Class 1', 'Class 2', 'Class 3']\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, shadow=True, startangle=90, autopct='%1.1f%%')\nax.axis('equal')\nplt.title('Count of Passengers by Class')\nplt.show()","ef4ab9f3":"\nsurvivants_values = list(ct.loc[cats, 1])\ndeads_values = list(ct.loc[cats, 0])\n\nind = np.arange(3)\nwidth = 0.2\nplt.bar(ind, survivants_values, width, label='Survived', color=COLOR_SURVIVED)\nplt.bar(ind+width, deads_values, width, label='Dead', color=COLOR_DEAD)\n\nplt.xticks(ind+width\/2, ('1', '2', '3') )\nplt.yticks(np.arange(0, 500, 50))\nplt.legend(loc='upper right')\nplt.show()","75102ba9":"ct = pd.crosstab(train_df.Embarked, train_df.Survived, margins=True)\ncats = list(ct.index.values)\ncats.remove('All') # Remove the 'All' row which contains the total (the Margin that we added in crosstab)\nprint(cats)\n","4f9907b6":"sizes = list(ct.loc[cats, 'All'])\nlabels=cats\nprint(sizes)\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, shadow=True, startangle=90, autopct='%1.1f%%')\nax.axis('equal')\nplt.title('Count of passengers by Embarked')\nplt.show()","3b2adb9f":"\nsurvivants_values = list(ct.loc[cats, 1])\ndeads_values = list(ct.loc[cats, 0])\n\nind = np.arange(len(cats))\nwidth = 0.2\nplt.bar(ind, survivants_values, width, label='Survived', color=COLOR_SURVIVED)\nplt.bar(ind+width, deads_values, width, label='Dead', color=COLOR_DEAD)\n\nplt.xticks(ind+width\/2, (cats) )\nplt.yticks(np.arange(0, 500, 50))\nplt.legend(loc='upper right')\nplt.show()","11ba3152":"def construct_nbr_relatives_col(sibsp_col, parch_col):\n    return sibsp_col+parch_col","0675c4ed":"train_df['NbrRelatives'] = construct_nbr_relatives_col(train_df['SibSp'], train_df['Parch'])\ntrain_df.sample(3)","5355de19":"ct = pd.crosstab(train_df.NbrRelatives, train_df.Survived)\n\ncats = list(ct.index.values)\nprint(cats)\n\nsurvivants_vals = ct.loc[:, 1]\ndeads_vals = ct.loc[:, 0]","c5bee272":"ind = np.arange(len(cats))\nwidth = 0.2\nplt.bar(ind, survivants_vals, width, label='Survived' , color=COLOR_SURVIVED)\nplt.bar(ind+width, deads_vals, width, label='Dead', color=COLOR_DEAD)\nplt.xticks(ind+width\/2, cats)\nplt.legend(loc='upper right')\nplt.show()","3b83ebba":"train_df.drop(['SibSp', 'Parch'], axis=1, inplace=True)","4f0b590b":"def construct_is_alone_col(nbr_relatives_col):\n    return nbr_relatives_col.apply(lambda x: True if x == 0 else False)","34bca963":"train_df['IsAlone'] = construct_is_alone_col(train_df.NbrRelatives)\ntrain_df.sample(3)","84b5aea9":"ct = pd.crosstab(train_df.IsAlone, train_df.Survived)\ncats = ['Alone' if x is True else 'Not Alone' for x in list(ct.index.values)]\n\nsurvivants_values = list(ct.loc[:, 1])\ndeads_values = list(ct.loc[:, 0])\n\nind = np.arange(len(cats))\nwidth = 0.3\nplt.bar(ind, survivants_values, width, label='Survived', color=COLOR_SURVIVED)\nplt.bar(ind+width, deads_values, width, label='Dead', color=COLOR_DEAD)\n\nplt.xticks(ind+width\/2, (cats) )\nplt.yticks(np.arange(0, 500, 50))\nplt.legend(loc='upper right')\nplt.show()","3dbd0d41":"train_df['Title'] = train_df['Name'].str.extract(r'([A-Za-z]*)\\.', expand=False)\nprint('Counts of different Titles:')\ntrain_df['Title'].value_counts()","0eeb26ba":"rare_titles = ['Jonkheer', 'Don', 'Sir', 'Countess', 'Capt', 'Jonkheer', 'Dona', 'Major', 'Dr', 'Rev', 'Col', 'Lady']\ntrain_df['Title'].replace(rare_titles, 'Rare', inplace=True)\ntrain_df[train_df['Title'] == 'Rare'].sample(3)","2f724e50":"train_df['Title'].replace(['Ms', 'Mme', 'Mlle', 'Mrs'], 'Miss', inplace=True)","2877acac":"def construct_title_col(name_col):\n    title_col = name_col.str.extract(r'([A-Za-z]*)\\.', expand=False)\n    rare_titles = ['Jonkheer', 'Don', 'Sir', 'Countess', 'Capt', 'Jonkheer', 'Dona', 'Major', 'Dr', 'Rev', 'Col', 'Lady']\n    title_col.replace(rare_titles, 'Rare', inplace=True)\n    title_col.replace(['Ms', 'Mme', 'Mlle', 'Mrs'], 'Miss', inplace=True)\n    return title_col","ad6c5054":"# Check if working by droping the Column and creating it again using the function\ntrain_df.drop('Title', axis=1, inplace=True)\ntrain_df['Title'] = construct_title_col(train_df['Name'])\ntrain_df.sample(5)","0ce53cc2":"train_df[train_df['Title']=='Master'].sample(5)","4bd8ccfa":"train_df.loc[ (train_df['Title']=='Master') & (train_df['PassengerId'].isin(missing_age_rows['PassengerId'])) , 'Age'] = np.NaN\nmean_age_masters = train_df.loc[ (train_df['Title']=='Master') ].Age.mean()\nprint('Mean of Master passengers\\'s ages :' , mean_age_masters)\nprint('Number of Master passengers who will be affected by the change: ', train_df[train_df['Title'] == 'Master']['Age'].isnull().sum())","cf1d909d":"train_df.loc[ (train_df['Title']=='Master') & (train_df['PassengerId'].isin(missing_age_rows['PassengerId'])) , 'Age'] = mean_age_masters\ntrain_df.loc[ (train_df['Title']=='Master') & (train_df['PassengerId'].isin(missing_age_rows['PassengerId']))]","da7d8645":"# Check\ntrain_df[train_df['Title'] == 'Master']['Age'].max()","bd13e002":"ct = pd.crosstab(train_df.Title, train_df.Survived)\ncats = list(ct.index.values)\nprint(cats)\n#ct","421eb287":"\nsurvivants_vals = ct.loc[cats, 1]\ndeads_vals = ct.loc[cats, 0]\n\nind = np.arange(len(cats))\nwidth = 0.25\nplt.bar(ind, survivants_vals, width, label='Survived', color=COLOR_SURVIVED)\nplt.bar(ind+width, deads_vals, width, label='Dead', color=COLOR_DEAD)\n\nplt.xticks(ind+width\/2, cats)\nplt.legend(loc='upper right')\nplt.show()","bc675d3a":"train_df.drop('Name', axis=1, inplace=True)","ad29488a":"test_df = pd.read_csv(f'{INPUT_DIR}\/test.csv')\ntest_df.sample(5)","63b04fc0":"print(f'Checking for Missing values in Test Dataset (out of {len(test_df)}): ')\ntest_df.isnull().sum()","032822b0":"test_df['Title'] = construct_title_col(test_df['Name'])\ntest_df.sample(3)","a359f477":"test_df['NbrRelatives'] = construct_nbr_relatives_col(test_df['SibSp'], test_df['Parch'])\ntest_df.sample(3)","14583e83":"test_df['IsAlone'] = construct_is_alone_col(test_df['NbrRelatives'])\ntest_df.sample(3)","1fc29b33":"print('Nbr of Missing Age Values for passengers with Master Title', test_df[test_df['Title'] == 'Master'].Age.isnull().sum())","0f6e8ca8":"mean_ages_masters = test_df[test_df['Title'] == 'Master'].Age.mean()\nprint(mean_ages_masters)\ntest_df.loc[ (test_df['Title'] == 'Master') & (test_df['Age'].isnull()), 'Age'] = mean_ages_masters\n\nassert not test_df[test_df['Title'] == 'Master'].Age.isnull().any()","9729695e":"print('Nbr of Missing Age Values for passengers except Master Title', test_df[test_df['Title'] != 'Master'].Age.isnull().sum())","17ccc581":"mean_ages_all = test_df.Age.mean()\nprint(mean_ages_all)\ntest_df['Age'] = test_df.Age.fillna( mean_ages_all )\n\nassert not test_df.Age.isnull().any()","c61e20c8":"test_df.loc[test_df.Fare.isnull(), :]","9a76a78e":"similar_passengers = test_df.loc[(test_df.Pclass == 3) & (test_df.IsAlone == True) & (test_df.Embarked == 'S'), :]\nsimilar_passengers.sample(3)","7122107c":"assert test_df.Fare.isnull().any()\nsimilar_passengers_mean_fare = similar_passengers.Fare.mean()\nprint('Mean Fare of Similar Passengers: ', similar_passengers_mean_fare)\ntest_df.Fare.fillna(similar_passengers_mean_fare, inplace=True)\nassert not test_df.Fare.isnull().any()\n# Check the Passenger\ntest_df.loc[test_df.PassengerId == 1044,:]","adebe9f3":"test_df['AgeCat'] = construct_age_cat_col(test_df['Age'])\ntest_df.sample(3)","d470e187":"def encode_embarked(embarked_col):\n    #return embarked_col.map({'S': 2, 'Q': 1, 'C': 0}).astype('int')\n    return pd.get_dummies(data=embarked_col, columns=['Embarked'], prefix='Embarked')","cb98b216":"one_hot_embarked_cols = encode_embarked(train_df['Embarked'])\ntrain_df = pd.concat([train_df, one_hot_embarked_cols], axis=1)\ntrain_df.sample(3)","85316e13":"one_hot_embarked_cols = encode_embarked(test_df['Embarked'])\ntest_df = pd.concat([test_df, one_hot_embarked_cols], axis=1)\ntest_df.sample(3)","25d9b549":"train_df.drop('Embarked', axis=1, inplace=True)\ntest_df.drop('Embarked', axis=1, inplace=True)","4365be17":"def encode_title(title_col):\n    #return title_col.map({ 'Mr': 0, 'Miss': 1, 'Master': 2, 'Rare': 3 }).astype('int')\n    return pd.get_dummies(data=title_col, prefix='Title')","53b99a9a":"one_hot_title_cols = encode_title(train_df['Title'])\ntrain_df = pd.concat([train_df, one_hot_title_cols], axis=1)","c7d8e9b8":"one_hot_title_cols = encode_title(test_df['Title'])\ntest_df = pd.concat([test_df, one_hot_title_cols], axis=1)","2eba0fca":"train_df.sample(3)","762fcb5e":"test_df.sample(3)","166bb394":"train_df.drop('Title', axis=1, inplace=True)\ntest_df.drop('Title', axis=1, inplace=True)","3e46c520":"test_df.Sex = encode_sex(test_df.Sex)\ntest_df.sample(3)","722e8329":"train_df.drop(['PassengerId', 'Ticket'], axis=1, inplace=True)\ntest_df.drop(['Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)","821a7877":"print('Check columns of both datasets:')\ntrain_df.columns, test_df.columns","5e7bba30":"OUTPUT = True\nOUTPUT_DIR = '.' if IN_CLOUD else INPUT_DIR\nif OUTPUT:\n    train_df.to_csv(f'{OUTPUT_DIR}\/train_clean.csv', index=False)\n    test_df.to_csv(f'{OUTPUT_DIR}\/test_clean.csv', index=False)\n    print('Done Outputing to CSV')\n","e7349820":"train_df.sample(5)","e27466f5":"test_df.sample(5)","8afc5609":"### Handle Missing Values in 'Age' Column of Test Dataset:","3f025c94":"### Encoding The \"Title\" Feature","b7ab5e36":"#### Print types of the columns and get an overview of the Dataset by print few random rows: ","5b650f62":"- Drop the **'SibSp'** and **'Parch'** Columns","52af9cb2":"### The \"Title\" Feature: \n\n<span style=\"color:red; font-weight: bold\">#Feature Engineering #Data_Visualization<\/span>","a06cc871":"##### We notice that having 891 rows, we have:\n    - 687 missing values in the 'Cabin' column, which is about 77%\n    - 177 missing values in the 'Age' column\n    - 2 missing values in the 'Embarked' column\n","31f13ade":"## Preprocess the Test Data:\n\n- Now that we got a good overview of the Training Data, we proceed to the final preprocessings on both Training and Test Data","47a22f24":"### Overall Survival Ratio\n<span style=\"color:red; font-weight: bold\">#Data Visualisation<\/span>","6fa20bc9":"- We make it into a function to use it later with Test Data:","d424e4a1":"# Titanic (1\/2): Exploration and Preprocessing","078a4ec4":"#### Create the IsAlone Feature:","2560e4d8":"#### Visualization of Survival counts by IsAlone  :","19032e13":"- Since we only have 2 missing values in 'Embarked', we can fill them with the most occured value.","e61157ac":"- Gather the Female titles which aren't useful for prediction into one Title (Miss)","34fbb672":"#### Replace Age of Master Passengers who had missing values :\n\n- We notice below, that all passengers with title **'Master'** have age less than 12 (except for those that we edited earlier  which have the Age == 29~ which is the mean of all ages)\n\n( I just show 5 random rows here for better visualization )","1a69a6b8":"- We will use the Mean Fare of those passengers to fill the missing Fare value :","73932995":"- We will drop the 'Cabin' column because it has too many missing values","744f845e":"### Check for Missing Values in columns:","694cce24":"### One-Hot Encoding of the \"Embarked\" Feature:","f57bfad1":"- We will then replace the previously missing age values for the 'Master' passengers with the mean of (only) the 'Master' passengers ages, which is a better estimation than the previous value of mean of all passengers ages","e04f240f":"#### Some Last Column Drops and Checks :","59597d2e":"- The missing values in Cabin are not a problem, we will drop the column anyway\n- Regarding missing values in'Age' Column, we will impute them as we imputed them in Train Dataset:\n    - Replace all NaN values of passengers with Title Master with Mean of Ages of passengers that have 'Master' Title\n    - The Others replace them with the mean of all passengers\n- We also have one missing value in 'Fare' Column: we will replace it with the mean Fare of passengers which have the same Pclass, same Number of Relatives to get a better approximation","25fd648d":"### Encoding of the \"Sex\" Feature:","8c9d3c0a":"## Some quick Visualizations & Processings on Features","56a533a7":"### The \"Embarked\" Feature: \n<span style=\"color:red; font-weight: bold\">#Data_Visualisation<\/span>","7209ed01":"#### We can see that :\n    - It's a passenger in the Pclass 3\n    - It's a passenger with 0 Number of Relatives\n    - It's a passenger who embarked from 'S' (Southhampthon)\n- We will then check the passengers who meet this ( or most of ) these criterions: ( there are 92 rows, I just show 3 random ones for better visualization )","f1d668e3":"- We use the columns ***'SibSp'*** (number of Siblings and Spouses) and ***'Parch'*** (number of Parents and Children) to engineer a new Feature called ***'NbrRelatives'*** which is the total number of relatives for the passenger on board.","40e0079d":"### Construct AgeCat Column of Test Dataset:","7513ad66":"- Now we can drop the \"Name\" Columns:","397c5d9a":"#### We create a new Feature 'AgeCat' to assign each passenger an Age Category:\n    - less than 14 years old => 0 (Kids)\n    - 14 ~ 22 years old      => 1 (Teens)\n    - 22 ~ 35 years old      => 2 (Adults)\n    - 35 ~ 50 years old      => 3 (Bid Adults)\n    - more than 50 years old => 4 (Seniors)","74bcc23c":"#### Proportion of each Age Category","d57073d3":"- We can now drop the Embarked Column :","d708200d":"## Import Dataset","1e0461a1":"- We will deal with the Age column later, but for now let's fill the missing values with **the mean of all ages**.\n  \n  ( ***We will also save the rows that have missing age values to process them later again*** )","58a02acf":"#### Visualization of Survival Counts by Title:","d2dcb61d":"- This is a Kernel (my first one on Kaggle) to explore and pre-process (cleaning, visualizing and feature engineering) the Titanic Dataset\n- The output will be used in my next Kernel to model, predict and score on the Test Dataset and submit my results.","23fc1451":"#### We will convert the values in 'Sex' column to integers because it's more practical and fast","d9de0d8a":"- We can see that many Titles don't occur very much, so we can collect them under a new Title called ***'Rare'***","0c9538d0":"### Construct Title, NbrRelatives, IsAlone Columns for Test Dataset:","d9c6d417":"### The \"Passenger Class\" Feature:\n<span style=\"color:red; font-weight: bold\">#Data Visualisation<\/span>","9e94ac88":"- We continue by identifying the passengers who are alone (who don't have relatives on board) using a new Feature **'IsAlone'**","b0f0740d":"### The \"IsAlone\" Feature ?\n<span style=\"color:red; font-weight: bold\">#Feature Engineering #Data_Visualisation<\/span>","5c0915cf":"#### Survivants by Age Category","9027c95f":"### The \"Age Category\" Feature:\n<span style=\"color:red; font-weight: bold\">#Feature Engineering #Data Visualisation<\/span>","5687b948":"#### Create and Explore the Title Feature: \n\n- In the **'Name'** Column, we notice that there is a pattern. We can extract the **Title** of each passenger into its own feature. It can be useful because it gives us some information about the socio-economic class of the passenger","01ea4805":"#### Check the Row concerned :","4cb9f610":"### The \"Sex\" Feature:\n<span style=\"color:red; font-weight: bold\">#Feature Encoding  #Data Visualisation<\/span>","4adafb6a":"### The \"Number of Relatives\" Feature:\n<span style=\"color:red; font-weight: bold\">#Feature Engineering #Data_Visualisation<\/span>","7775f250":"### Handle the Missing Value in \"Fare\" column of Test Dataset:"}}