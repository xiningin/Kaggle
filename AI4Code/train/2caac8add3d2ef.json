{"cell_type":{"718827c0":"code","b2af2a7a":"code","381f6ca1":"code","ea74aae8":"code","883c41aa":"code","29ef4bc2":"code","08271622":"code","ba1e6d3e":"code","b74c8c31":"code","487e42d5":"code","4facd2c4":"code","0d702dd8":"code","03eb40bb":"code","78f6c0cc":"code","d0928161":"code","7900fc36":"code","52ce111c":"code","85f28360":"code","6093029f":"code","3663332f":"code","8c55829d":"code","9e4e15a1":"code","5122f1f0":"code","482cb0d3":"code","0b0b12f8":"code","279e154e":"code","279435c5":"code","8f94c961":"code","8df784cf":"code","a566e292":"code","fa7ec4c4":"code","602a2b14":"code","374abede":"code","42b73e33":"code","50f2f7ab":"code","6ae555f1":"code","10056b7b":"code","102fa705":"code","be76b263":"code","0d3ca4b0":"code","722d70ec":"code","cd9b7953":"code","78c46485":"markdown","69dcc807":"markdown","31a967b7":"markdown","0556e1cb":"markdown","472b5259":"markdown","691ff803":"markdown","cfd84d02":"markdown","3fdc3a4b":"markdown","123b4802":"markdown","b80b3115":"markdown","8b5fa656":"markdown","204bbeba":"markdown","93871210":"markdown","dbe049ac":"markdown","b4e89610":"markdown"},"source":{"718827c0":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport math\nimport numpy as np\n%matplotlib inline","b2af2a7a":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","381f6ca1":"train.shape","ea74aae8":"test.shape","883c41aa":"train.head()","29ef4bc2":"test.head()","08271622":"train.columns","ba1e6d3e":"train.SalePrice.describe()","b74c8c31":"sns.distplot(train.SalePrice)","487e42d5":"numeric_columns = ['LotArea' , 'YearBuilt', 'GrLivArea', 'MiscVal', 'GarageArea']","4facd2c4":"y = train.SalePrice\nfor col in numeric_columns:\n    x=train[col]\n    sns.scatterplot(x,y)\n    plt.title(col)\n    plt.show()","0d702dd8":"train.corr().SalePrice.sort_values(ascending=False)","03eb40bb":"categoric_columns = ['Neighborhood','BldgType','OverallQual','TotRmsAbvGrd']\n\n\ny = train.SalePrice\nfor col in categoric_columns:\n    x=train[col]\n    sns.boxplot(x,y)\n    plt.title(col)\n    plt.show()","78f6c0cc":"corrmat = train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True)","d0928161":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1)\nfig, hm = plt.subplots(figsize=(10,8))\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","7900fc36":"ntrain = train.shape[0]\nntest = test.shape[0]\ny = train.SalePrice.values\n\nfull_df = pd.concat((train,test)).reset_index(drop=True)\nfull_df.drop(['SalePrice'], axis=1, inplace=True)\n\n\nmissing_values = full_df.isnull().sum().sort_values(ascending=False)\n\nmissing_pct = missing_values.loc[missing_values.values > 0]\/len(full_df)\nmissing_pct","52ce111c":"print(missing_pct.loc[missing_pct.values > 0.8].index)","85f28360":"missing_pct.index","6093029f":"drop_cols = ['PoolQC', 'MiscFeature', 'Alley', 'Fence']\n\nfull_df.drop(drop_cols, axis=1, inplace=True)","3663332f":"none_cols = ['FireplaceQu', 'GarageCond', 'GarageQual', 'GarageFinish', 'GarageType','BsmtCond', 'BsmtExposure', \n             'BsmtQual', 'BsmtFinType2', 'BsmtFinType1', 'MasVnrType', 'Exterior1st',\n             'Exterior2nd']\n\nfor col in none_cols:\n    full_df[col] = full_df[col].fillna('None')","8c55829d":"missing_values = full_df.isnull().sum().sort_values(ascending=False)\n\nmissing_pct = missing_values.loc[missing_values.values > 0]\/len(full_df)\nmissing_pct.index","9e4e15a1":"zero_cols = ['MasVnrArea', 'BsmtHalfBath','BsmtFullBath','GarageCars','TotalBsmtSF', \n             'GarageArea', 'BsmtUnfSF','BsmtFinSF2', 'BsmtFinSF1','LotFrontage']\n\nfor col in zero_cols:\n    full_df[col] = full_df[col].fillna(0)\n    ","5122f1f0":"mode_cols = ['MSZoning', 'Functional', 'Utilities', 'SaleType',\n             'KitchenQual', 'Electrical']\n\nfor col in mode_cols:\n    mode = full_df[col].mode()\n    full_df[col] = full_df[col].fillna(mode[0])","482cb0d3":"id_na = list(full_df.loc[full_df['GarageYrBlt'].isna()].Id.values)\n\nfor row in id_na:\n    full_df.loc[row-1,'GarageYrBlt'] = full_df.loc[row-1,'YearBuilt']","0b0b12f8":"missing_values = full_df.isnull().sum().sort_values(ascending=False)\n\nmissing_pct = missing_values.loc[missing_values.values > 0]\/len(full_df)\nmissing_pct","279e154e":"full_df['TotalBath'] = full_df['BsmtFullBath'] + full_df['BsmtHalfBath'] + full_df['FullBath'] + full_df['HalfBath']\nfull_df['TotalArea'] = full_df['TotalBsmtSF'] + full_df['1stFlrSF'] + full_df['2ndFlrSF']\nfull_df['YrBltAndRemod']=full_df['YearBuilt']+full_df['YearRemodAdd']","279435c5":"full_df['MSSubClass'] = full_df['MSSubClass'].apply(str)\n\nfull_df['MoSold'] = full_df['MoSold'].astype(str)","8f94c961":"full_df.columns","8df784cf":"drop_cols = ['LotFrontage','BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2', \n             'PoolArea', 'GarageCars','LandSlope', 'MoSold', 'TotalBsmtSF', 'MiscVal',\n             'HouseStyle', 'RoofMatl','Condition2'\n            ]\n\nfull_df.drop(drop_cols, axis=1, inplace=True)","a566e292":"full_df = pd.get_dummies(full_df,drop_first=True)","fa7ec4c4":"df_train = full_df[:ntrain]\ndf_test = full_df[ntrain:]\n\ntest_id = test['Id']\ndf_train.set_index('Id',inplace=True)\ndf_test.set_index('Id',inplace=True)","602a2b14":"df_train = pd.get_dummies(df_train,drop_first=True)\ndf_test = pd.get_dummies(df_test,drop_first=True)","374abede":"print(df_train.shape)\nprint(df_test.shape)","42b73e33":"from sklearn.pipeline import Pipeline\nfrom xgboost import XGBRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_log_error\nfrom math import log\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline","50f2f7ab":"random_state=42\n\nx_train, x_val, y_train,y_val = train_test_split(df_train, y, random_state=42)","6ae555f1":"estimator = XGBRegressor(objective='reg:squarederror')\n\nparams = {\n        'max_depth':range(3,7,2),\n        'min_child_weight':range(1,5,2)\n         }\n\n    \ndef tuning(estimator, params):\n    grid = GridSearchCV(estimator, param_grid = params, scoring='neg_mean_squared_log_error')\n    grid.fit(x_train,y_train)\n    print(grid.best_params_)\n    print(-grid.best_score_)\ntuning(estimator,params)","10056b7b":"estimator = XGBRegressor(objective='reg:squarederror',max_depth = 3, min_child_weight = 1)\n\nparams = {\n        'gamma':[i\/10.0 for i in range(0,5)]\n         }\n\ntuning(estimator, params)","102fa705":"estimator = XGBRegressor(objective='reg:squarederror',max_depth = 3, min_child_weight = 1,\n                         gamma = 0)\n\nparams = {\n        'learning_rate' : [0.01,0.03,0.1,0.3]\n         }\n\ntuning(estimator, params)","be76b263":"estimator = XGBRegressor(objective='reg:squarederror',max_depth =3, min_child_weight = 1)\n\nestimator.fit(x_train,y_train, \n             eval_set=[(x_val, y_val)], verbose=False)\n\ny_pred = estimator.predict(x_val)\n\nprint(mean_squared_log_error(y_pred,y_val))\n\nfeat_imp = pd.Series(estimator.feature_importances_)","0d3ca4b0":"feat = pd.concat([feat_imp,pd.DataFrame(df_train.columns)],axis=1)\nfeat.columns = ['Importance','Columns']\nfeat = feat.sort_values(by = 'Importance',ascending=False)\n","722d70ec":"feat.head(25)","cd9b7953":"feat.tail(60)","78c46485":"FEATURE ENGINEERING","69dcc807":"Analyze relationship with numeric values","31a967b7":"The features missing more than 80% of the data will be deleted, as they do not add much value to the prediction.\nAs for the other ones, the missing values will be filled with either the mode, for categorical features, or the mean. ","0556e1cb":"Most of the houses are between 100.000 and 300.000 dollars and is heavily right skewed.","472b5259":"After an analysis of feature importance, some numeric features were chosen for a exploratory analysis:","691ff803":"* I could not get past the top 38%. If anyone has any correction or suggestion to make, feel welcome! ","cfd84d02":"Both OverallQual and TotRmsAbvGrd have a strong correlation with Sale Price, although the same cannot be said to BldgType and Neighborhood ","3fdc3a4b":"Fill the missing Data","123b4802":"ANALYZE VARIABLES DISTRIBUTION","b80b3115":"Analysing the graphs, LotArea doesn't seem to be as relevant as thought and there are a few outliers that will be treated.\nThe same can be said about MiscVal.\n\nAs for GrLivArea and GarageArea, there is a strong positive correlation between it and Sale Price.\n\nAt last, we also perceive a slight correlation between Yearbuilt and SalePrice, especially on more recents years (>2000).","8b5fa656":"With that matrix, we can notice some features are so correlated that might give the same information, for example: TotalBsmtSF\/1stFlrSf, GarageCars\/GarageArea, GarageYrBlt\/YearBuilt and TotRmsAbvGrd\/GrLivArea.","204bbeba":"MODEL","93871210":"Analyze relationship with categoric values","dbe049ac":"Now, let's analyze the features with the strongest correlation with SalePrice","b4e89610":"The reamining missing features will be either filled with 'None', '0' or the column's mode."}}