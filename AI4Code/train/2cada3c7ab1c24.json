{"cell_type":{"b905af7e":"code","b2c28be7":"code","6c656fbe":"code","99181f36":"code","b084cd90":"code","0860d055":"code","ba427559":"code","7cc1501d":"code","88836d15":"code","9ecfb1e2":"code","1f5108de":"code","59957556":"code","80cdc695":"code","b0f4aa23":"code","0784047d":"code","6955102e":"code","e102c60e":"code","02884581":"code","27ec0098":"code","59e8c0c0":"code","85587e54":"code","650a34ab":"code","b1459181":"code","5c685df4":"code","3d747c6a":"code","e473ab56":"code","2a5e0baf":"code","4a3b73cd":"code","9b96d5a9":"code","b1adc333":"code","ae4b9605":"code","cfb5b713":"code","297b4667":"code","ab0835e2":"code","c78f5174":"code","289148fd":"code","65fe7805":"code","9a9a15bd":"code","75eb6a33":"code","e6b0806b":"code","d8d767d5":"code","656f9f71":"code","cc94abc3":"code","47ff28c4":"code","ff6ff8f8":"code","68945d65":"code","f87b8857":"code","b71dd618":"code","309df05d":"code","2736ce48":"code","a5d79f5d":"code","4f11eae6":"code","778bb618":"code","f28deed8":"code","020309da":"code","3ea14fdc":"code","d04d7d2d":"code","122700f0":"code","ea95e5ec":"code","8af270ac":"code","d4fe1dde":"code","097a5a95":"code","389e276e":"code","408e9fe1":"code","81072e12":"code","c6e4ee65":"code","cefb317c":"code","feeee97f":"code","566c14c3":"code","f00aa1e8":"code","5a0a024a":"code","20ced0fb":"code","8f588b35":"code","85d7d9f7":"code","151ccf5d":"code","a65fd824":"code","a53a7e8d":"code","1f99d32e":"code","bca7fc57":"code","f6bbc8f1":"code","04722fc3":"markdown","09c808d8":"markdown","d20ed7f7":"markdown","6f7903d0":"markdown","303ac9e8":"markdown","f1965e22":"markdown","6b174b42":"markdown","c84f3c63":"markdown","a786678d":"markdown","7a30d7bc":"markdown","cffdedc9":"markdown","6fed3762":"markdown","684aaba1":"markdown","4117ca38":"markdown","7dd25e69":"markdown","34663b47":"markdown","c7a31743":"markdown","daa69622":"markdown","da943af4":"markdown","ece2e3ed":"markdown","66418d9c":"markdown","f025219a":"markdown","46a56310":"markdown","ca75bda0":"markdown","edc1e18c":"markdown","8885905d":"markdown","e8489952":"markdown","282dbaf7":"markdown","267a3fe3":"markdown","565c90e6":"markdown","e0b95e00":"markdown","2682dd0e":"markdown","6b8e62f0":"markdown","c5dea465":"markdown","e4c853ab":"markdown","52843f09":"markdown","6ba5b61b":"markdown","d652bc26":"markdown","17267332":"markdown","bb0a2eb8":"markdown","2687b408":"markdown","85349677":"markdown","bd60f67d":"markdown","40c5478f":"markdown","b33d72e3":"markdown","c934493a":"markdown","f056e758":"markdown","c2b34269":"markdown","4c1947c2":"markdown","e490557d":"markdown","8bdc5520":"markdown","cb8c002b":"markdown","281e0867":"markdown","010df1d7":"markdown","dff2e1f5":"markdown","135af1d8":"markdown","ca24eeff":"markdown","aa41d465":"markdown","2891bec9":"markdown","998de5f0":"markdown","12625443":"markdown","3274d578":"markdown","ff0bffc9":"markdown","9a4aa428":"markdown","bc35cb8d":"markdown","750d3f75":"markdown","a6969ea8":"markdown","bcbd2464":"markdown","b6c233d0":"markdown","023658dd":"markdown","4ef363c5":"markdown","ad752257":"markdown","6f17876d":"markdown","5a937a45":"markdown","743963f9":"markdown","f116bf6b":"markdown","7543c585":"markdown","5a185b91":"markdown","a28887e2":"markdown"},"source":{"b905af7e":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","b2c28be7":"# do this to make Pandas show all the columns of a DataFrame, otherwise it just shows a summary\npd.set_option('display.max_columns', None) ","6c656fbe":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')\n\ntrain_id = df_train['Id']\ntest_id = df_test['Id']\n\ntrain_idhogar = df_train['idhogar']\ntest_idhogar = df_train['idhogar']\n\ndf_train.drop(columns=['Id'], inplace=True)\ndf_test.drop(columns=['Id'], inplace=True)\n\nprint(\"Shape of train data: \", df_train.shape)\nprint(\"Shape of test data: \", df_test.shape)\n\nntrain = df_train.shape[0]\nntest = df_test.shape[0]\n\nall_data = pd.concat((df_train, df_test)).reset_index(drop=True)","99181f36":"print(\"A glimpse at the columns of training data:\")\ndf_train.head()","b084cd90":"print(\"The feature that we need to predict: \", set(df_train.columns) - set(df_test.columns))","0860d055":"df_train['Target'].describe()","ba427559":"def barplot_with_anotate(feature_list, y_values, plotting_space=plt, annotate_vals=None):\n    x_pos = np.arange(len(feature_list))\n    plotting_space.bar(x_pos, y_values);\n    plotting_space.xticks(x_pos, feature_list, rotation=270);\n    if annotate_vals == None:\n        annotate_vals = y_values\n    for i in range(len(feature_list)):\n        plotting_space.text(x=x_pos[i]-0.3, y=y_values[i]+1.0, s=annotate_vals[i]);","7cc1501d":"df_train_heads = df_train.loc[df_train['parentesco1'] == 1]\npoverty_label_sizes = list(df_train_heads.groupby('Target').size())\n\nbarplot_with_anotate(['extreme', 'moderate', 'vulnerable', 'non-vulnerable'], poverty_label_sizes,\n                     annotate_vals = [str(round((count\/df_train_heads.shape[0])*100, 2))+'%' \n                                      for count in poverty_label_sizes]);\nplt.rcParams[\"figure.figsize\"] = [6, 6];\nplt.xlabel('Poverty Label');\nplt.ylabel('No. of people');","88836d15":"def plot_dwelling_property(property_df):\n    _, axarr = plt.subplots(nrows=2, ncols=2, sharex='col', sharey='row', figsize=(16, 16))\n\n    target_idx = 0\n    for row in range(2):\n        for col in range(2):\n            percentage_list = [round((count\/poverty_label_sizes[target_idx])*100, 2)\n                                 for count in list(property_df.iloc[target_idx, :])]\n            x_pos = list(range(len(property_df.columns)))\n            \n            axarr[row, col].bar(x_pos, \n                                percentage_list, \n                                color='y')\n            \n            axarr[row, col].set_title('For individuals in Poverty group=' + str(target_idx+1))\n            \n            xtick_labels = list(property_df.columns)\n            xtick_labels.insert(0, '') # insert a blank coz `set_xticklabels()` skips the 1st element ##why??\n            axarr[row, col].set_xticklabels(xtick_labels, rotation=300)\n            \n            axarr[row, col].set_ylim(bottom=0, top=100)\n            #axarr[row, col].set_xlim(left=0, right=len(property_df.columns))\n            \n            for i in range(len(property_df.columns)):\n                axarr[row, col].annotate(xy=(x_pos[i]-0.3, percentage_list[i]+1.0), s=percentage_list[i]);\n            \n            axarr[0, 0].set_ylabel(\"Percentage of the total in this poverty group\");\n            axarr[1, 0].set_ylabel(\"Percentage of the total in this poverty group\");\n            axarr[1, 0].set_xlabel(\"Types\");\n            axarr[1, 1].set_xlabel(\"Types\");\n\n            axarr[row, col].autoscale(enable=True, axis='x')\n            target_idx+=1","9ecfb1e2":"outside_wall_material_df = df_train_heads.groupby('Target').sum()[['paredblolad', 'paredzocalo', 'paredpreb', 'pareddes', 'paredmad', \n                                  'paredzinc', 'paredfibras', 'paredother']]\noutside_wall_material_df","1f5108de":"plot_dwelling_property(outside_wall_material_df)","59957556":"floor_material_df = df_train_heads.groupby('Target').sum()[['pisomoscer', 'pisocemento', 'pisoother',\n                                                      'pisonatur', 'pisonotiene', 'pisomadera']]\nfloor_material_df","80cdc695":"plot_dwelling_property(floor_material_df)","b0f4aa23":"toilet_df = df_train_heads.groupby('Target').sum()[['sanitario1', 'sanitario2', 'sanitario3', 'sanitario5',\n                                              'sanitario6']]\ntoilet_df","0784047d":"plot_dwelling_property(toilet_df)","6955102e":"rubbish_disposal_df = df_train_heads.groupby('Target').sum()[['elimbasu1', 'elimbasu2', 'elimbasu3',\n                                                        'elimbasu4', 'elimbasu5', 'elimbasu6']]\nrubbish_disposal_df","e102c60e":"plot_dwelling_property(rubbish_disposal_df)","02884581":"roof_material_df = df_train_heads.groupby('Target').sum()[['techozinc', 'techoentrepiso', 'techocane', 'techootro']]\nroof_material_df","27ec0098":"plot_dwelling_property(roof_material_df)","59e8c0c0":"water_provision_df = df_train_heads.groupby('Target').sum()[['abastaguadentro', 'abastaguafuera', 'abastaguano']]\nwater_provision_df","85587e54":"plot_dwelling_property(water_provision_df)","650a34ab":"electricity_df = df_train_heads.groupby('Target').sum()[['public', 'planpri', 'noelec', 'coopele']]\nelectricity_df","b1459181":"plot_dwelling_property(electricity_df)","5c685df4":"cooking_energy_df = df_train_heads.groupby('Target').sum()[['energcocinar1', 'energcocinar2', 'energcocinar3',\n                                                      'energcocinar4']]\ncooking_energy_df","3d747c6a":"plot_dwelling_property(cooking_energy_df)","e473ab56":"avg_household_size_df = df_train_heads.groupby('Target').mean()['hhsize']\navg_household_size_df","2a5e0baf":"df_train.groupby('Target').mean().head()","4a3b73cd":"urban_rural_df = df_train_heads.groupby('Target').sum()[['area1', 'area2']]\nurban_rural_df['UrbanPercentage'] = urban_rural_df['area1'] * round((100\/sum(urban_rural_df['area1'])), 6)\nurban_rural_df['RuralPercentage'] = urban_rural_df['area2'] * round((100\/sum(urban_rural_df['area2'])), 6)\nurban_rural_df","9b96d5a9":"region_df = df_train_heads.groupby('Target').sum()[['lugar1', 'lugar2', 'lugar3', 'lugar4', 'lugar5', 'lugar6']]\nregion_df","b1adc333":"plot_dwelling_property(region_df)","ae4b9605":"region_df.T","cfb5b713":"round(((all_data.shape[0] - sum(all_data['v2a1'].value_counts())) \/ all_data.shape[0] ) * 100, 2)","297b4667":"sns.boxplot(x='Target', y='escolari', data=all_data.loc[:ntrain]);","ab0835e2":"all_data.drop(columns=['sanitario1', 'sanitario6',\n                       'elimbasu4', 'elimbasu5', 'elimbasu6',\n                       'techozinc', 'techoentrepiso', 'techocane', 'techootro',\n                       'abastaguadentro', 'abastaguafuera', 'abastaguano',\n                       'public', 'planpri', 'noelec', 'coopele'], inplace=True)","c78f5174":"num_features = all_data._get_numeric_data().columns\nnum_features_length = len(num_features)\n\ncateg_features = pd.Index(list(set(all_data.columns) - set(num_features)))\ncateg_features_length = len(categ_features)\n\nprint(\"Number of numerical features: \", num_features_length)\nprint(\"Number of categorical features: \", categ_features_length)\n\nlabels = ['numeric', 'categorical']\ncolors = ['y', 'r']\nplt.figure(figsize=(8, 8))\nplt.pie([num_features_length, categ_features_length], \n        labels=labels, \n        autopct='%1.1f%%', \n        shadow=True, \n        colors=colors);","289148fd":"all_data[categ_features].head()","65fe7805":"_, axarr = plt.subplots(nrows=1, ncols=3, sharey='row', figsize=(12, 6))\n\nfor idx, feature in enumerate(['dependency', 'edjefe', 'edjefa']):\n    sns.countplot(x=feature, data=all_data[all_data[feature].isin(['yes', 'no'])], ax=axarr[idx])","9a9a15bd":"yes_no_map = {'no': 0, 'yes': 1}\n    \nall_data['dependency'] = all_data['dependency'].replace(yes_no_map).astype(np.float32)\nall_data['edjefe'] = all_data['edjefe'].replace(yes_no_map).astype(np.float32)\nall_data['edjefa'] = all_data['edjefa'].replace(yes_no_map).astype(np.float32)","75eb6a33":"num_binary_features = []\n\nfor feature in all_data.columns:\n    if sorted(df_train[feature].unique()) in [[0, 1], [0], [1]]:\n        num_binary_features.append(feature)\n        \nprint(\"Total number of binary-numerical features: \", len(num_binary_features))\nprint(\"Binary-numerical features: \")\nnum_binary_features","e6b0806b":"num_non_binary_features = [feature for feature in all_data.columns if feature not in num_binary_features]\n\nprint(\"Total number of non-binary-numerical features: \", len(num_non_binary_features))\nprint(\"Non-binary numerical features: \")\n\nnum_non_binary_features_dict = {feature: len(all_data[feature].unique()) for feature in num_non_binary_features}\n\nnum_non_binary_features_sorted = sorted(num_non_binary_features_dict, \n                                        key=lambda feature: num_non_binary_features_dict[feature], \n                                        reverse=True)\n\nnum_non_binary_features_len_sorted = [num_non_binary_features_dict[feature] for feature in num_non_binary_features_sorted]\n\nplt.figure(figsize=(16, 16))\nbarplot_with_anotate(num_non_binary_features_sorted, num_non_binary_features_len_sorted);\nplt.ylabel(\"No. of unique values\");\nplt.xlabel(\"Non-binary numerical features\");","d8d767d5":"all_data[num_binary_features].describe()","656f9f71":"num_conti_features = pd.Index(['v2a1', 'meaneduc', 'dependency', 'SQBmeaned', 'SQBdependency'])\nall_data[num_conti_features].describe()","cc94abc3":"num_discrete_features = pd.Index([feature for feature in num_non_binary_features if feature not in num_conti_features])\nall_data[num_discrete_features].describe()","47ff28c4":"def missing_features(data, column_set):\n    incomplete_features = {feature: data.shape[0]-sum(data[feature].value_counts())\n                                   for feature in column_set\n                                   if not sum(data[feature].value_counts()) == data.shape[0]}\n    incomplete_features_sorted = sorted(incomplete_features, key=lambda feature: incomplete_features[feature], reverse=True)\n    incompleteness = [round((incomplete_features[feature]\/data.shape[0])*100, 2) for feature in incomplete_features_sorted]\n    plt.figure(figsize=(12, 6))\n    barplot_with_anotate(incomplete_features_sorted, incompleteness)\n    plt.ylabel(\"Percentage (%) of values that are missing\")\n    #plt.rcParams[\"figure.figsize\"] = [12, 6]\n    \n    for feature, percentage in zip(incomplete_features_sorted, incompleteness):\n        print(\"Feature:\", feature)\n        print(\"No. of NaNs:\", incomplete_features[feature], \"(\", percentage, \")\")","ff6ff8f8":"missing_features(all_data, all_data.columns)","68945d65":"# entries which have both v2a1 as NaN and tipovivi3 as 0\nall_data[['v2a1', 'tipovivi3']][all_data['tipovivi3'] == 0][all_data['v2a1'].isnull()].shape","f87b8857":"# handling v2a1\nall_data.loc[:, 'v2a1'].fillna(0, inplace=True)","b71dd618":"# entries which have v18q as 0 and v18q1 as NaN\nall_data[['v18q1', 'v18q']][all_data['v18q'] == 0][all_data['v18q1'].isnull()].shape","309df05d":"# handling v18q1\nall_data.loc[:, 'v18q1'].fillna(0, inplace=True)","2736ce48":"# handling meaneduc and SQBmeaned\nall_data.loc[:, 'meaneduc'].fillna(all_data['meaneduc'].mean(), inplace=True)\nall_data.loc[:, 'SQBmeaned'].fillna(all_data['SQBmeaned'].mean(), inplace=True)","a5d79f5d":"all_data.drop(columns=['rez_esc'], inplace=True)","4f11eae6":"all_data['WallQual'] = all_data['epared1'] + 2*all_data['epared2'] + 3*all_data['epared3']\n\nall_data['RoofQual'] = all_data['etecho1'] + 2*all_data['etecho2'] + 3*all_data['etecho3']\n\nall_data['FloorQual'] = all_data['eviv1'] + 2*all_data['eviv2'] + 3*all_data['eviv3']\n\nall_data['EducationLevel'] = all_data['instlevel1'] + 2*all_data['instlevel2'] + 3*all_data['instlevel3'] + \\\n    4*all_data['instlevel4'] + 5*all_data['instlevel5'] + 6*all_data['instlevel6'] + 7*all_data['instlevel7'] + \\\n    8*all_data['instlevel8'] + 9*all_data['instlevel9']","778bb618":"all_data.drop(columns=['epared1', 'epared2', 'epared3',\n                       'etecho1', 'etecho2', 'etecho3',\n                       'eviv1', 'eviv2', 'eviv3',\n                       'instlevel1', 'instlevel2', 'instlevel3', 'instlevel4', 'instlevel5',\n                       'instlevel6', 'instlevel7', 'instlevel8', 'instlevel9'], inplace=True)","f28deed8":"redundant_features = ['r4t1', 'r4t2', 'r4t3', 'tamhog', 'tamviv', 'hhsize', 'r4t3', 'v18q', 'mobilephone']\nall_data.drop(columns=redundant_features, inplace=True)","020309da":"all_data['RentPerRoom'] = all_data['v2a1'] \/ all_data['rooms']\n\nall_data['AdultsPerRoom'] = all_data['hogar_adul'] \/ all_data['rooms']\n\nall_data['AdultsPerBedroom'] = all_data['hogar_adul'] \/ all_data['bedrooms']","3ea14fdc":"# individual level boolean features\nind_bool = ['dis', 'male', 'female', 'estadocivil1', 'estadocivil2', 'estadocivil3', \n            'estadocivil4', 'estadocivil5', 'estadocivil6', 'estadocivil7', \n            'parentesco1', 'parentesco2',  'parentesco3', 'parentesco4', 'parentesco5', \n            'parentesco6', 'parentesco7', 'parentesco8',  'parentesco9', 'parentesco10', \n            'parentesco11', 'parentesco12', 'EducationLevel']\n\n# individual level ordered features\nind_ordered = ['escolari', 'age']","d04d7d2d":"f = lambda x: x.std(ddof=0)\nf.__name__ = 'std_0'\nind_agg = all_data.groupby('idhogar')[ind_ordered + ind_bool].agg(['mean', 'max', 'min', 'sum', f])\n\nnew_cols = []\nfor col in ind_agg.columns.levels[0]:\n    for stat in ind_agg.columns.levels[1]:\n        new_cols.append(f'{col}-{stat}')\n\nind_agg.columns = new_cols\nind_agg.head()","122700f0":"print(\"Original number of features:\", all_data.shape[1])\n\nall_data = all_data.merge(ind_agg, on = 'idhogar', how = 'left')\n\nprint(\"Number of features after merging transformed individual level features\", all_data.shape[1])\n\nall_data.drop(columns=ind_bool+ind_ordered, inplace=True)\n\nprint(\"Number of features after dropping the individual level features\", all_data.shape[1])","ea95e5ec":"from sklearn.metrics import f1_score, make_scorer\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold","8af270ac":"# drop the idhogar column\nall_data.drop(columns=['idhogar'], inplace=True)","d4fe1dde":"df_train = all_data[:ntrain][:]\ndf_test = all_data[ntrain:][:]\ndf_test = df_test.drop('Target', axis=1)","097a5a95":"print(df_train.shape)\nprint(df_test.shape)","389e276e":"X_train= df_train.drop('Target', axis= 1)\nY_train= df_train['Target']\n\nX_test= df_test","408e9fe1":"validation_scores = {}","81072e12":"scorer = make_scorer(f1_score, greater_is_better=True, average = 'macro')","c6e4ee65":"skf = StratifiedKFold(n_splits=5)","cefb317c":"lightgbm = lgb.LGBMClassifier(class_weight='balanced', boosting_type='dart',\n                         drop_rate=0.9, min_data_in_leaf=100, \n                         max_bin=255,\n                         n_estimators=500,\n                         bagging_fraction=0.01,\n                         min_sum_hessian_in_leaf=1,\n                         importance_type='gain',\n                         learning_rate=0.1, \n                         max_depth=-1, \n                         num_leaves=31)\n\n#validation_scores['LightGBM'] = cross_val_score(lightgbm, X_train, Y_train, cv=3, scoring=scorer).mean()\n#print(validation_scores['LightGBM'])","feeee97f":"predicts_lgb = []\nfor train_index, test_index in skf.split(X_train, Y_train):\n    X_t, X_v = X_train.iloc[train_index], X_train.iloc[test_index]\n    y_t, y_v = Y_train.iloc[train_index], Y_train.iloc[test_index]\n    \n    lightgbm.fit(X_t, y_t, eval_set=[(X_v, y_v)], early_stopping_rounds=50)\n    predicts_lgb.append(lightgbm.predict(X_test))","566c14c3":"lightgbm_pred = np.array(predicts_lgb).mean(axis=0).round().astype(int)\n\nsubmission_lgb = pd.DataFrame({'Id': test_id,\n                           'Target': lightgbm_pred})\nsubmission_lgb.to_csv('submissionLGB.csv', index=False)","f00aa1e8":"xgboost = xgb.XGBClassifier()\n\n#validation_scores['XGBoost'] = cross_val_score(xgboost, X_train, Y_train, cv=3, scoring=scorer).mean()\n#print(validation_scores['XGBoost']);","5a0a024a":"predicts_xgb = []\nfor train_index, test_index in skf.split(X_train, Y_train):\n    X_t, X_v = X_train.iloc[train_index], X_train.iloc[test_index]\n    y_t, y_v = Y_train.iloc[train_index], Y_train.iloc[test_index]\n    \n    xgboost.fit(X_t, y_t, eval_set=[(X_v, y_v)], early_stopping_rounds=50)\n    predicts_xgb.append(xgboost.predict(X_test))","20ced0fb":"xgboost_pred = np.array(predicts_xgb).mean(axis=0).round().astype(int)\n\nsubmission_xgb = pd.DataFrame({'Id': test_id,\n                           'Target': xgboost_pred})\nsubmission_xgb.to_csv('submissionXGB.csv', index=False)","8f588b35":"'''models_with_scores = pd.DataFrame({\n    'Model': list(validation_scores.keys()),\n    'Validation Score': list(validation_scores.values())})\n\nmodels_with_scores.sort_values(by='Validation Score', ascending=False)'''","85d7d9f7":"submission_model_lgb_old = lgb.LGBMClassifier(class_weight='balanced', boosting_type='dart',\n                         drop_rate=0.9, min_data_in_leaf=100, \n                         max_bin=255,\n                         n_estimators=500,\n                         bagging_fraction=0.01,\n                         min_sum_hessian_in_leaf=1,\n                         importance_type='gain',\n                         learning_rate=0.1, \n                         max_depth=-1, \n                         num_leaves=31)","151ccf5d":"submission_model_lgb_old.fit(X_train, Y_train);","a65fd824":"final_pred_lgb_old = submission_model_lgb_old.predict(X_test)\nfinal_pred_lgb_old = final_pred_lgb_old.astype(int)","a53a7e8d":"submission_lgb_old = pd.DataFrame({'Id': test_id,\n                           'Target': final_pred_lgb_old})\nsubmission_lgb_old.to_csv('submissionLGBold.csv', index=False)","1f99d32e":"'''submission_model_xgboost = lgb.LGBMClassifier()\nsubmission_model_xgboost.fit(X_train, Y_train);\nfinal_pred_xgb = submission_model_xgboost.predict(X_test)\nfinal_pred_xgb = final_pred_xgb.astype(int)'''","bca7fc57":"'''submission_xgb = pd.DataFrame({'Id': test_id,\n                           'Target': final_pred_xgb})\nsubmission_xgb.to_csv('submissionXGB.csv', index=False)'''","f6bbc8f1":"'''final_pred_stacked = ((final_pred_lgb + final_pred_xgb) \/ 2).astype(int)\nsubmission_stacked = pd.DataFrame({'Id': test_id,\n                           'Target': final_pred_stacked})\nsubmission_stacked.to_csv('submissionStacked.csv', index=False)'''","04722fc3":"```\ntechozinc, =1 if predominant material on the roof is metal foil or zink\ntechoentrepiso, \"=1 if predominant material on the roof is fiber cement,  mezzanine \"\ntechocane, =1 if predominant material on the roof is natural fibers\ntechootro, =1 if predominant material on the roof is other\n```","09c808d8":"A look at [this discussion](https:\/\/www.kaggle.com\/c\/costa-rican-household-poverty-prediction\/discussion\/61403#359554) showed that there is a glitch with `dependency`, `edjefe` and `edjefa`. In all of these cases,, 'yes' implies 1 and 'no' implies 0. So, let's fix that..","d20ed7f7":"### Region:","6f7903d0":"### Electricity:","303ac9e8":"### XGBoost:","f1965e22":"### Binary features:","6b174b42":"Out of these 39 features, the following are continuous in nature:\n* v2al\n* meaneduc\n* SQBmeaned\n* dependency\n* SQBdependency\n\n\nAll the other features are discrete in nature.","c84f3c63":"```\npisomoscer, \"=1 if predominant material on the floor is mosaic,  ceramic,  terrazo\"\npisocemento, =1 if predominant material on the floor is cement\npisoother, =1 if predominant material on the floor is other\npisonatur, =1 if predominant material on the floor is  natural material\npisonotiene, =1 if no floor at the household\npisomadera, =1 if predominant material on the floor is wood\n```","a786678d":"So, we can see that **_a majority (>65%) of the households fall within the `Non-vulnerable` category_**. This means that we are dealing with an imbalanced classification problem.\n\nNow, let's try to understand what it means to live under such conditions.","7a30d7bc":"* This distrubution is pretty much the same throughout all the groups. A huge majority (> 95%) of the individuals live in homes with metal foil or zinc roof. \n\n**_We may conclude that these features are not representative of the poverty levels._**","cffdedc9":"#### `rez_esc` :-","6fed3762":"## Home Life for various poverty groups:","684aaba1":"* Here, we see that gas and electricity are the major sources of energy in the kitchens for all the people.\n* For the poverty group 4 (non-vulnerable), electricity is slightly more popular than gas whereas in the other groups, gas is the more popular choice.\n* As we move from group 1 (extreme) to group 4 (non-vulnerable), the popularity of electricity increases and that of gas decreases. ","4117ca38":"* We see that a majority (69.24%) of the households under poverty group 4 (non-vulnerable) have brick wall on the outside. \n* As we go from there to group 1 (extreme), the percentage of houses having brick wall decreases. Cement wall and wood walls become increasingly more common.\n* The top 3 most common types of wall material across all the groups are (in descending order of popularity) - \n  `brick` > `prefabricated or cement` > `wood`","7dd25e69":"We see that `v18q1` is `NaN` only for those entries which have `v18q` == 0. Thus, `v18q1` is missing only when the house does not have a tablet. \n\nHence, we should fill the missing values of `v18q1` with 0.","34663b47":"### Toilet:","c7a31743":"* A large majority of the households have a toilet connected to a septic tank (73% - 81%).\n* A toilet connected to sewer or cess pool becomes more common as we move to group 4. It is probably a better, more expensive type of installation. ","daa69622":"### LightGBM:","da943af4":"### Roof material of the house:","ece2e3ed":"#### `meaneduc` and `SQBmeaned` :-","66418d9c":"* `Central` region has the maximum population\n* A major portion (65%) of the poverty group 4 (non-vulnerable) people live in `Central` region","f025219a":"## 1. Missing values imputation:","46a56310":"* Again, this distribution is also pretty much the same across all the poverty groups. ~88% of the people in all the groups get electricity from `CNFL,  ICE,  ESPH\/JASEC` and ~11% get it from cooperative.\n\n**_We may conclude that these features are not representative of the poverty levels._**","ca75bda0":"## Summary","edc1e18c":"# Exploratory Data Analysis","8885905d":"* We see that a majority of households belonging to poverty group 3 (vulnerable) and group 4 (non-vulnerable) have `mossaic, ceramic, tazzo` floors (62.82% and 79.38% respectively)\n* This floor type becomes less common as we move across from group 4 to group 1 and other types (especially the cemented floors) become more common.\n* The top 3 most common types of floors across all the groups are (in descending order of popularity) -   \n  `mossaic, ceramic, tazzo` > `cemented` > `wooden`","e8489952":"## 2. Convert dummy to ordinal:\n\nThese features have order in their meaning:\n```\nepared1, =1 if walls are bad\nepared2, =1 if walls are regular\nepared3, =1 if walls are good\netecho1, =1 if roof are bad\netecho2, =1 if roof are regular\netecho3, =1 if roof are good\neviv1, =1 if floor are bad\neviv2, =1 if floor are regular\neviv3, =1 if floor are good\ninstlevel1, =1 no level of education\ninstlevel2, =1 incomplete primary\ninstlevel3, =1 complete primary\ninstlevel4, =1 incomplete academic secondary level\ninstlevel5, =1 complete academic secondary level\ninstlevel6, =1 incomplete technical secondary level\ninstlevel7, =1 complete technical secondary level\ninstlevel8, =1 undergraduate and higher education\ninstlevel9, =1 postgraduate higher education\n```\nWe should use them as ordinal features.","282dbaf7":"```\nlugar1, =1 region Central\nlugar2, =1 region Chorotega\nlugar3, =1 region Pac\u00c3\u0192\u00c2\u00adfico central\nlugar4, =1 region Brunca\nlugar5, =1 region Huetar Atl\u00c3\u0192\u00c2\u00a1ntica\nlugar6, =1 region Huetar Norte\n```","267a3fe3":"```\nparedblolad, =1 if predominant material on the outside wall is block or brick\nparedzocalo, \"=1 if predominant material on the outside wall is socket (wood,  zinc or absbesto\"\nparedpreb, =1 if predominant material on the outside wall is prefabricated or cement\npareddes, =1 if predominant material on the outside wall is waste material\nparedmad, =1 if predominant material on the outside wall is wood\nparedzinc, =1 if predominant material on the outside wall is zink\nparedfibras, =1 if predominant material on the outside wall is natural fibers\nparedother, =1 if predominant material on the outside wall is other\n```","565c90e6":"We see that all those entries where `v2a1` is Nan also have `tipovivi3` as 0, which implies that all those houses are not rented. \n\nHence, we should fill the missing values of `v2a1` with 0.","e0b95e00":"### Non-binary features:","2682dd0e":"# Preprocessing","6b8e62f0":"```\npublic, \"=1 electricity from CNFL,  ICE,  ESPH\/JASEC\"\nplanpri, =1 electricity from private plant\nnoelec, =1 no electricity in the dwelling\ncoopele, =1 electricity from cooperative\n```","c5dea465":"### escolari:","e4c853ab":"### LightGBM:","52843f09":"### Numerical features that are binary:","6ba5b61b":"## Education -","d652bc26":"### Monthly rent - ","17267332":"### XGBoost:","bb0a2eb8":"A large percentage of `v2a1` (the monthly rent column) is empty. We will analyse this after we impute the missing values in the next section.","2687b408":"Okay, so education affects the poverty label to some extent. Or, maybe poverty label affects one's ability to get education.","85349677":"### Water provision:","bd60f67d":"### Rubbish disposal:","40c5478f":"Let's see a description of `Target`: ","b33d72e3":"```\nsanitario1, =1 no toilet in the dwelling\nsanitario2, =1 toilet connected to sewer or cesspool\nsanitario3, =1 toilet connected to  septic tank\nsanitario5, =1 toilet connected to black hole or letrine\nsanitario6, =1 toilet connected to other system\n```","c934493a":"### Outside wall material of the house:","f056e758":"## Submission Models","c2b34269":"These are the core data fields as described in the [data description](https:\/\/www.kaggle.com\/c\/costa-rican-household-poverty-prediction\/data):\n\n* Id - a unique identifier for each row.\n* Target - the target is an ordinal variable indicating groups of income levels. \n    1 = extreme poverty \n    2 = moderate poverty \n    3 = vulnerable households \n    4 = non vulnerable households\n* idhogar - this is a unique identifier for each household. This can be used to create household-wide features, etc. All rows in a given household will have a matching value for this identifier.\n* parentesco1 - indicates if this person is the head of the household.\n","4c1947c2":"#### `v2a1` :-","e490557d":"### LightGBM + XGBoost stacked:","8bdc5520":"The following pattern is seen in both urban and rural areas:\n\n* __~ 58-68%__ of the houses are in Target 4 (__non-vulnerable__)\n* __~ 10-15%__ of the houses are in Target 2 (__moderate__)\n* __~ 13-18%__ of the houses are in Target 3 (__vulnerable__)\n* __~ 6-10%__ of the houses are in Target 1 (__extreme__)","cb8c002b":"I am going to try 2 gradient boosting machines - LightGBM and XGBoost.","281e0867":"1. Hand-engineered features:\n\n    * Monthly rent per room - `v2a1\/rooms`\n    * Monthly rent per adult - `v2a1\/hogar_adul`\n    * No. of adults per room - `hogar_adul\/rooms`\n    * No. of adults per bedroom - `hogar_adul\/bedrooms`\n    \n2. Average of individual-level features per household\n\n3. Minimum of individual-level features per household\n\n4. Maximum of individual-level features per household\n\n5. Sum of individual-level features per household\n\n6. Standard deviation of individual-level features per household\n\n\nI have taken help from [this excellent analysis](https:\/\/www.kaggle.com\/willkoehrsen\/start-here-a-complete-walkthrough) done by Will Koehrsen.","010df1d7":"# Modelling","dff2e1f5":"### Conclusion:-\n\nThese features do not convey any useful information about the `Target` variable:\n* 'sanitario1', 'sanitario6'\n* 'elimbasu4', 'elimbasu5', 'elimbasu6'\n* 'techozinc', 'techoentrepiso', 'techocane', 'techootro'\n* 'abastaguadentro', 'abastaguafuera', 'abastaguano'\n* 'public', 'planpri', 'noelec', 'coopele'\n\nRemoving them increased my F1-score by 1.5%.","135af1d8":"### Household size:","ca24eeff":"## 3. Remove redundant features:\n\nI have used [this kernel](https:\/\/www.kaggle.com\/kuriyaman1002\/reduce-features-140-84-keeping-f1-score) to identify some of these features -\n\n* The following can be generated from linear combination of r4h* and r4m*:\n    ```\n    r4t1, persons younger than 12 years of age\n    r4t2, persons 12 years of age and older\n    r4t3, Total persons in the household\n    ```\n\n* The following mean the same as `hogar_total`:\n    ```\n    tamhog, size of the household\n    tamviv, number of persons living in the household\n    hhsize, household size\n    r4t3, Total persons in the household\n    ```\n\n\n* `v18q` can be generated by v18q1\n* `mobilephone` can be generated by qmobilephone","aa41d465":"### Floor material of the house:","2891bec9":"* A large majority of the households in all the poverty groups dispose their rubbish using tanker trucks.\n* Rubbish disposal by burning is the 2nd most popular way and its popularity increases as we move from group 4 (non-vulnerable) to group 1 (extreme). This may be as a result of lack of environmental awareness or a lack of resources in the less fortunate hopes.","998de5f0":"We need to make predictions on a household level whereas we have been given the data at an individual level. \n\nThat is why during all our analysis we will focus only on those columns which have `parentesco1 == 1`. These are columns for the heads of households and each household has only one head. ","12625443":"```\nenergcocinar1, =1 no main source of energy used for cooking (no kitchen)\nenergcocinar2, =1 main source of energy used for cooking electricity\nenergcocinar3, =1 main source of energy used for cooking gas\nenergcocinar4, =1 main source of energy used for cooking wood charcoal\n```","3274d578":"## Numerical or Categorical?","ff0bffc9":"### Non-binary discrete features:","9a4aa428":"### Non-binary continuous features:","bc35cb8d":"## 4. Create new household-wide features:","750d3f75":"Its no surprise that `idhogar` is categorical but according to the [data description provided with the challenge](https:\/\/www.kaggle.com\/c\/costa-rican-household-poverty-prediction\/data), the other 3 features should take numerical values. Instead they contain lots of 'yes' and 'no' values as well. ","a6969ea8":"```\nelimbasu1, =1 if rubbish disposal mainly by tanker truck\nelimbasu2, =1 if rubbish disposal mainly by botan hollow or buried\nelimbasu3, =1 if rubbish disposal mainly by burning\nelimbasu4, =1 if rubbish disposal mainly by throwing in an unoccupied space\nelimbasu5, \"=1 if rubbish disposal mainly by throwing in river,  creek or sea\"\nelimbasu6, =1 if rubbish disposal mainly other\n```","bcbd2464":"```\nabastaguadentro, =1 if water provision inside the dwelling\nabastaguafuera, =1 if water provision outside the dwelling\nabastaguano, =1 if no water provision\n```","b6c233d0":"* Again, this distribution is also pretty much the same across all the groups. Almost all (~95%) of the people in all the groups enjoy water provision inside their dwellings.\n\n**_We may conclude that these features are not representative of the poverty levels._**","023658dd":"### Main source of energy in cooking:","4ef363c5":"### Urban or rural:","ad752257":"Let's try to understand the demographics of the urban and the rural population","6f17876d":"Drop it.","5a937a45":"Now, all the features are numeric.","743963f9":"* [This discussion](https:\/\/www.kaggle.com\/c\/costa-rican-household-poverty-prediction\/discussion\/61403#360609) shows how missing values of `v2a1` and `v18q1` should be handled.\n\n* `rez_esc` (Years behind in school): NaN implies that the person does not remember. Considering that along with the large percentage of NaN values, we are better off dropping that column.\n\n\n* `meaneduc` and `SQBmeaned`: With the average of the columns.","f116bf6b":"#### `v18q1` :-","7543c585":"```\narea1, =1 zona urbana\narea2, =1 zona rural\n```","5a185b91":"## Comparing the various scores:","a28887e2":"Let's have a look at the categorical features:"}}