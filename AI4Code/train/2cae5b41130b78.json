{"cell_type":{"a55c0564":"code","95500785":"code","ea70b885":"code","234a8daf":"code","991980be":"code","d0fc45b2":"code","1482fdcd":"code","955819dc":"code","c0cf4e98":"code","bfe7ea26":"code","bb78942d":"code","96f8ad90":"code","cc364b3b":"code","5347be78":"code","8495d9e8":"code","a5f4a724":"code","05527677":"code","959ceae0":"markdown","86be001a":"markdown"},"source":{"a55c0564":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","95500785":"train_df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","ea70b885":"# A lot area is the total area of a property, including the yard up to the boundaries (property line), while the floor area is the area inside the building that is occupiable, up to and including the exterior walls.\narea_train_df = train_df.iloc[:,4:5].values\narea_test_df = test_df.iloc[:,4:5].values","234a8daf":"price_train_df = train_df.iloc[:,80:].values","991980be":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(area_train_df, price_train_df)","d0fc45b2":"# Visualising the Training set results\nplt.scatter(area_train_df, price_train_df, color = 'red')\nplt.plot(area_train_df, regressor.predict(area_train_df), color = 'blue')\nplt.title('Price vs Area (Training set)')\nplt.xlabel('Area')\nplt.ylabel('Price')\nplt.show()","1482fdcd":"regressor.predict(area_test_df)","955819dc":"from sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 4)\narea_poly = poly_reg.fit_transform(area_train_df)\npoly_reg.fit(area_poly, price_train_df)\nlin_reg = LinearRegression()\nlin_reg.fit(area_poly, price_train_df)","c0cf4e98":"plt.scatter(area_train_df, price_train_df, color = 'red')\nplt.plot(area_train_df, lin_reg.predict(poly_reg.fit_transform(area_train_df)), color = 'blue')\nplt.title('Price vs Area (Training set)')\nplt.xlabel('Area')\nplt.ylabel('Price')\nplt.show()","bfe7ea26":"lin_reg.predict(poly_reg.fit_transform(area_test_df))","bb78942d":"def pre_process_data(df):\n    na_columns = [column for column in df.columns if df[column].isnull().values.any()]\n    \n    # LotFrontage: Linear feet of street connected to property\n    df['LotFrontage'] = df['LotFrontage'].fillna(value = df['LotFrontage'].mean())\n    # MasVnrArea: Masonry veneer area in square feet\n    df['MasVnrArea'] = df['MasVnrArea'].fillna(value = df['MasVnrArea'].mean())\n    \n    # GarageYrBlt: Year garage was built\n    df['GarageYrBlt'] = df['GarageYrBlt'].fillna(value = 0.0)\n    \n    # Alley: Type of alley access to property\n    df['Alley'] = df['Alley'].fillna(value = 'NA')\n    # MasVnrType: Masonry veneer type\n    df['MasVnrType'] = df['MasVnrType'].fillna(value = 'NA')\n    # BsmtQual: Evaluates the height of the basement\n    df['BsmtQual'] = df['BsmtQual'].fillna(value = 'NA')\n    # BsmtCond: Evaluates the general condition of the basement\n    df['BsmtCond'] = df['BsmtCond'].fillna(value = 'NA')\n    # BsmtExposure: Refers to walkout or garden level walls\n    df['BsmtExposure'] = df['BsmtExposure'].fillna(value = 'NA')\n    # BsmtFinType1: Rating of basement finished area\n    df['BsmtFinType1'] = df['BsmtFinType1'].fillna(value = 'NA')\n    # BsmtFinType2: Rating of basement finished area\n    df['BsmtFinType2'] = df['BsmtFinType2'].fillna(value = 'NA')\n    # Electrical: Electrical system\n    df['Electrical'] = df['Electrical'].fillna(value = 'NA')\n    # FireplaceQu: Fireplace quality\n    df['FireplaceQu'] = df['FireplaceQu'].fillna(value = 'NA')\n    # GarageType: Garage location\n    df['GarageType'] = df['GarageType'].fillna(value = 'NA')\n    # GarageFinish: Interior finish of the garage\n    df['GarageFinish'] = df['GarageFinish'].fillna(value = 'NA')\n    # GarageQual: Garage quality\n    df['GarageQual'] = df['GarageQual'].fillna(value = 'NA')\n    # GarageCond: Garage condition\n    df['GarageCond'] = df['GarageCond'].fillna(value = 'NA')\n    # PoolQC: Pool quality\n    df['PoolQC'] = df['PoolQC'].fillna(value = 'NA')\n    # Fence: Fence quality\n    df['Fence'] = df['Fence'].fillna(value = 'NA')\n    # MiscFeature: Miscellaneous feature not covered in other categories\n    df['MiscFeature'] = df['MiscFeature'].fillna(value = 'NA')\n    \n    # BsmtFinSF1: Type 1 finished square feet\n    df['BsmtFinSF1'] = df['BsmtFinSF1'].fillna(value = df['BsmtFinSF1'].mean())\n    # BsmtFinSF2: Type 2 finished square feet\n    df['BsmtFinSF2'] = df['BsmtFinSF2'].fillna(value = df['BsmtFinSF2'].mean())\n    # BsmtUnfSF: Unfinished square feet of basement area\n    df['BsmtUnfSF'] = df['BsmtUnfSF'].fillna(value = df['BsmtUnfSF'].mean())\n    # TotalBsmtSF: Total square feet of basement area\n    df['TotalBsmtSF'] = df['TotalBsmtSF'].fillna(value = df['TotalBsmtSF'].mean())\n    # GarageArea: Size of garage in square feet\n    df['GarageArea'] = df['GarageArea'].fillna(value = df['GarageArea'].mean())\n    \n    # BsmtFullBath: Basement full bathrooms\n    df['BsmtFullBath'] = df['BsmtFullBath'].fillna(value = 'NA')\n    # BsmtHalfBath: Basement half bathrooms\n    df['BsmtHalfBath'] = df['BsmtHalfBath'].fillna(value = 'NA')\n    # GarageCars: Size of garage in car capacity\n    df['GarageCars'] = df['GarageCars'].fillna(value = 'NA')\n    \n    return df","96f8ad90":"train_df = pre_process_data(train_df)","cc364b3b":"cat_cols = [column for column in train_df.columns if train_df[column].dtype == 'object']\nfrom sklearn import preprocessing \nlabel_encoder = preprocessing.LabelEncoder()\nfor column in cat_cols:\n    train_df[column] = label_encoder.fit_transform(train_df[column].astype(str))","5347be78":"area_train_df = train_df.iloc[:,:80].values","8495d9e8":"from sklearn.linear_model import LinearRegression\nmulti_regressor = LinearRegression()\nmulti_regressor.fit(area_train_df, price_train_df)","a5f4a724":"test_df = pre_process_data(test_df)\ncat_cols = [column for column in test_df.columns if test_df[column].dtype == 'object']\nfor column in cat_cols:\n    test_df[column] = label_encoder.fit_transform(test_df[column].astype(str))","05527677":"multi_regressor.predict(test_df)","959ceae0":"### Simple Linear Regression","86be001a":"polynomial regression"}}