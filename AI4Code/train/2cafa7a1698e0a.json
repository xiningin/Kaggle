{"cell_type":{"6dcee324":"code","e8b435f6":"code","68b2b86c":"code","49cc003a":"code","a6931195":"code","c3d272c3":"code","7d8abe84":"code","16f38fa9":"code","d191633e":"code","2334e7ad":"code","b576318c":"code","c188575d":"code","66e7efcb":"code","a227bf14":"code","db6c7226":"code","7408cb2c":"code","1caf01db":"code","7a89e5f3":"code","476121e0":"code","8ac7dcca":"code","0bca886e":"code","c3c4f05d":"code","6ab38a11":"code","17d6c926":"code","8daed8ec":"code","a5bf7433":"code","8abfd670":"code","1f951bf1":"code","cf1ab544":"code","77c11a42":"code","b9060879":"code","3a38408c":"code","0fc6fcd7":"code","26417271":"code","7482cc57":"code","df9d67e3":"code","e2f5248a":"code","2c55cad2":"code","0c5dceeb":"code","96b559b1":"code","4a4623e6":"code","138b5a21":"code","49421889":"code","ef9ca38c":"code","55521d25":"code","8ea8b11c":"code","ecf720e2":"code","f4fd1e6d":"code","b538d4c3":"code","1c56fcae":"code","7259a80c":"code","1f760901":"code","87e8ccb8":"code","79960059":"code","9405e7d8":"code","e218cdf0":"code","6a5b3ea7":"code","20128e5d":"code","8eecdcaa":"code","54cc2161":"code","b042ed94":"code","a307ca3d":"code","441e0428":"code","fbbaac9e":"code","28be8d9f":"code","dd09187b":"code","e40873f2":"code","12079541":"code","bfa28727":"code","37a86c1f":"code","aa258e57":"code","8c617332":"code","84fc8b32":"code","aed9012f":"code","38d237c5":"code","35ac66d0":"code","ee724db5":"code","1e0112d8":"code","8271fd1f":"code","36e85bde":"code","b454d6fc":"code","c137a1ff":"markdown","70e12ae7":"markdown","25ce7064":"markdown","0516d3a6":"markdown","888ff032":"markdown","32c62863":"markdown","27ba29e7":"markdown","65ac6117":"markdown","2b66ca9f":"markdown","7827e838":"markdown","f6611542":"markdown","b3f37f20":"markdown","01b6ebdc":"markdown","84cc1afe":"markdown","de0c3a1e":"markdown","4572a605":"markdown","b999d07f":"markdown","938d3268":"markdown","0f0293b1":"markdown","801ff405":"markdown","b01253d5":"markdown","fe0802d9":"markdown","0d89e949":"markdown","e08b5fcb":"markdown","06303a6c":"markdown","9cb8a0cc":"markdown","59647448":"markdown","3ea1abd0":"markdown","e97adbd5":"markdown"},"source":{"6dcee324":"# Once you've installed NumPy you can import it as a library:\nimport numpy as np","e8b435f6":"my_list = [1,2,3]\nmy_list","68b2b86c":"np.array(my_list)","49cc003a":"my_matrix = [[1,2,3],[4,5,6],[7,8,9]]\nmy_matrix","a6931195":"np.array(my_matrix)","c3d272c3":"np.arange(0,10)","7d8abe84":"np.arange(0,11,2)","16f38fa9":"np.zeros(3)","d191633e":"np.zeros((5,5))","2334e7ad":"np.ones(3)","b576318c":"np.ones((3,3))","c188575d":"np.linspace(0,10,3)","66e7efcb":"np.linspace(0,10,50)","a227bf14":"np.eye(4)","db6c7226":"np.random.rand(2)","7408cb2c":"np.random.rand(5,5)","1caf01db":"np.random.randn(2)","7a89e5f3":"np.random.randn(5,5)","476121e0":"np.random.randint(1,100)","8ac7dcca":"np.random.randint(1,100,10)","0bca886e":"arr = np.arange(25)\nranarr = np.random.randint(0,50,10)","c3c4f05d":"arr","6ab38a11":"ranarr","17d6c926":"arr.reshape(5,5)","8daed8ec":"ranarr","a5bf7433":"ranarr.max()","8abfd670":"ranarr.argmax()","1f951bf1":"ranarr.min()","cf1ab544":"ranarr.argmin()","77c11a42":"# Vector\narr.shape","b9060879":"# Notice the two sets of brackets\narr.reshape(1,25)","3a38408c":"arr.reshape(1,25).shape","0fc6fcd7":"arr.reshape(25,1)","26417271":"arr.reshape(25,1).shape","7482cc57":"arr.dtype","df9d67e3":"import numpy as np","e2f5248a":"#Creating sample array\narr = np.arange(0,11)","2c55cad2":"#Show\narr","0c5dceeb":"#Get a value at an index\narr[8]","96b559b1":"#Get values in a range\narr[1:5]","4a4623e6":"#Get values in a range\narr[0:5]","138b5a21":"#Setting a value with index range (Broadcasting)\narr[0:5]=100\n\n#Show\narr","49421889":"# Reset array, we'll see why I had to reset in  a moment\narr = np.arange(0,11)\n\n#Show\narr","ef9ca38c":"#Important notes on Slices\nslice_of_arr = arr[0:6]\n\n#Show slice\nslice_of_arr","55521d25":"#Change Slice\nslice_of_arr[:]=99\n\n#Show Slice again\nslice_of_arr","8ea8b11c":"#Now note the changes also occur in our original array!","ecf720e2":"arr","f4fd1e6d":"#Data is not copied, it's a view of the original array! This avoids memory problems!","b538d4c3":"#To get a copy, need to be explicit\narr_copy = arr.copy()\n\narr_copy","1c56fcae":"arr_2d = np.array(([5,10,15],[20,25,30],[35,40,45]))\n\n#Show\narr_2d","7259a80c":"#Indexing row\narr_2d[1]\n","1f760901":"# Format is arr_2d[row][col] or arr_2d[row,col]\n\n# Getting individual element value\narr_2d[1][0]","87e8ccb8":"# Getting individual element value\narr_2d[1,0]","79960059":"# 2D array slicing\n\n#Shape (2,2) from top right corner\narr_2d[:2,1:]","9405e7d8":"#Shape bottom row\narr_2d[2]","e218cdf0":"#Shape bottom row\narr_2d[2,:]","6a5b3ea7":"#Set up matrix\narr2d = np.zeros((10,10))","20128e5d":"#Length of array\narr_length = arr2d.shape[1]","8eecdcaa":"#Set up array\n\nfor i in range(arr_length):\n    arr2d[i] = i\n    \narr2d","54cc2161":"#Fancy indexing allows the following","b042ed94":"arr2d[[2,4,6,8]]","a307ca3d":"#Allows in any order\narr2d[[6,4,2,7]]","441e0428":"arr = np.arange(1,11)\narr","fbbaac9e":"arr > 4","28be8d9f":"bool_arr = arr>4","dd09187b":"bool_arr","e40873f2":"arr[bool_arr]","12079541":"arr[arr>2]","bfa28727":"x = 2\narr[arr>x]","37a86c1f":"import numpy as np\narr = np.arange(0,10)","aa258e57":"arr + arr","8c617332":"arr * arr","84fc8b32":"arr - arr","aed9012f":"# Warning on division by zero, but not an error!\n# Just replaced with nan\narr\/arr","38d237c5":"# Also warning, but not an error instead infinity\n1\/arr","35ac66d0":"arr**3","ee724db5":"#Taking Square Roots\nnp.sqrt(arr)","1e0112d8":"#Calcualting exponential (e^)\nnp.exp(arr)","8271fd1f":"np.max(arr) #same as arr.max()","36e85bde":"np.sin(arr)","b454d6fc":"np.log(arr)","c137a1ff":"If there are any recommendations\/changes you would like to see in this notebook, please leave a comment. Any feedback\/constructive criticism would be genuinely appreciated.\n\nThis notebook is always a work in progress. So, please stay tuned for more to come.\n\nIf you like this notebook or find this notebook helpful, Please feel free to **UPVOTE** and\/or leave a comment.","70e12ae7":"### eye\n\nCreates an identity matrix","25ce7064":"NumPy (or Numpy) is a Linear Algebra Library for Python, the reason it is so important for Data Science with Python is that almost all of the libraries in the PyData Ecosystem rely on NumPy as one of their main building blocks.\n\nNumpy is also incredibly fast, as it has bindings to C libraries. For more info on why you would want to use Arrays instead of lists, check out this great [StackOverflow post](http:\/\/stackoverflow.com\/questions\/993984\/why-numpy-instead-of-python-lists).","0516d3a6":"### arange\n\nReturn evenly spaced values within a given interval.","888ff032":"### Random \n\nNumpy also has lots of ways to create random number arrays:\n\n### rand\nCreate an array of the given shape and populate it with\nrandom samples from a uniform distribution\nover ``[0, 1]``.","32c62863":"Numpy has many built-in functions and capabilities. We won't cover them all but instead we will focus on some of the most important aspects of Numpy: vectors,arrays,matrices, and number generation. Let's start by discussing arrays.\n\n### Numpy Arrays\n\nNumPy arrays are the main way we will use Numpy throughout the course. Numpy arrays essentially come in two flavors: vectors and matrices. Vectors are strictly 1-d arrays and matrices are 2-d (but you should note a matrix can still have only one row or one column).\n\nLet's begin our introduction by exploring how to create NumPy arrays.\n\n# Creating NumPy Arrays\n\n### From a Python List\n\nWe can create an array by directly converting a list or list of lists:","27ba29e7":"### zeros and ones\n\nGenerate arrays of zeros or ones","65ac6117":"### max,min,argmax,argmin\n\nThese are useful methods for finding max or min values. Or to find their index locations using argmin or argmax","2b66ca9f":"# Fancy Indexing\n\nFancy indexing allows you to select entire rows or columns out of order,to show this, let's quickly build out a numpy array:","7827e838":"### randint\nReturn random integers from `low` (inclusive) to `high` (exclusive).","f6611542":"# Shape\n\nShape is an attribute that arrays have (not a method):","b3f37f20":"# Using Numpy","01b6ebdc":"# Numpy Indexing and Selection\nIn this lecture we will discuss how to select elements or groups of elements from an array.","84cc1afe":" # Thanks !!\nThat's all we need to know for now!","de0c3a1e":"# Selection\n\nLet's briefly go over how to use brackets for selection based off of comparison operators.","4572a605":"### linspace\nReturn evenly spaced numbers over a specified interval.","b999d07f":"# About Numpy","938d3268":"# Array Attributes and Methods\n\nLet's discuss some useful attributes and methods or an array:","0f0293b1":"## Arithmetic\nYou can easily perform array with array arithmetic, or scalar with array arithmetic. Let's see some examples:","801ff405":"# Indexing a 2D array (matrices)\n\nThe general format is **arr_2d[row][col]** or **arr_2d[row,col]**. I recommend usually using the comma notation for clarity.","b01253d5":"# Bracket Indexing and Selection\nThe simplest way to pick one or some elements of an array looks very similar to python lists:","fe0802d9":"## Universal Array Functions\n\nNumpy comes with many [universal array functions](http:\/\/docs.scipy.org\/doc\/numpy\/reference\/ufuncs.html), which are essentially just mathematical operations you can use to perform the operation across the array. Let's show some common ones:","0d89e949":"# Introduction","e08b5fcb":"# NumPy Operations","06303a6c":"# Reshape\nReturns an array containing the same data with a new shape.","9cb8a0cc":"### dtype\n\nYou can also grab the data type of the object in the array:","59647448":"# Broadcasting\n\nNumpy arrays differ from a normal Python list because of their ability to broadcast:","3ea1abd0":"# Built-in Methods\n\nThere are lots of built-in ways to generate Arrays","e97adbd5":"### randn\n\nReturn a sample (or samples) from the \"standard normal\" distribution. Unlike rand which is uniform:"}}