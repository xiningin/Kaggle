{"cell_type":{"7ad5b2bc":"code","d07bc2bf":"code","c73c0ef0":"code","7d8a7b64":"code","1ce15726":"code","7877c685":"code","ccde0939":"code","0100f6df":"code","2fc92c93":"code","16afd47f":"code","4bf116c5":"code","e206eaa6":"code","f4648a9e":"code","cbb08f64":"code","2c6157d6":"code","7258171b":"code","f7ee099c":"code","300ff5f4":"code","e3232a26":"code","06e9a88e":"code","82c32b3b":"code","9bb1c453":"markdown","49f026d1":"markdown","bccf2e29":"markdown","ae78b947":"markdown","4f56de6b":"markdown","a021d7a1":"markdown","a6837cad":"markdown","8ab2cd0f":"markdown","ef833148":"markdown","b521275d":"markdown"},"source":{"7ad5b2bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d07bc2bf":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport ipywidgets as wid\n!pip install -q ipywidgets\n!jupyter nbextension enable --py --sys-prefix widgetsnbextension","c73c0ef0":"df=pd.read_csv('\/kaggle\/input\/apple-product-price-list-from-26-countries-2022\/apple product price list from 26 countries.csv')\ndf.drop('scraped_date',axis=1,inplace=True)\ndf.sample(7)                      # 448 rows \u00d7 8 columns","7d8a7b64":"import requests\n\nurl = 'https:\/\/www.iban.com\/country-codes'\n\nheader = {\n  \"User-Agent\": \"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/50.0.2661.75 Safari\/537.36\",\n  \"X-Requested-With\": \"XMLHttpRequest\"\n}\n\nr = requests.get(url, headers=header)\ndf1 = pd.read_html(r.text)\ncode=df1[0]","1ce15726":"code_dict=code[['Alpha-2 code','Alpha-3 code']].set_index('Alpha-2 code').to_dict()['Alpha-3 code']","7877c685":"print(code_dict)","ccde0939":"def conversion(x):\n    return code_dict[x.upper()]\ndf['code3']=df.country_code.apply(conversion)","0100f6df":"conv={ \n    'AUS':.72,\n    'RUS':.013,\n    'PHL':.020,\n    'IND':.013,\n    'CZE':.046,\n    'SWE':.11,\n    'AUT':1.13,\n    'DEU':1.13,\n    'DNK':.15,\n    'ESP':1.13,\n    'FIN':1.13,\n    'FRA':1.13,\n    'HUN':.0031,\n    'IRL':1.13,\n    'ITA':1.13,\n    'LUX':1.13,\n    'MEX':.049,\n    'NLD':1.13,\n    'NOR':.11,\n    'POL':.25,\n    'PRT':1.13,\n    'THA':.030,\n    'TUR':.074,\n    'USA':1,\n    'BRA':.18,                                                       \n    'CAN':.79                                                       \n}  ","2fc92c93":"df.loc[df['code3'] == 'DNK', ['price']]=df[df['code3'] == 'DNK'].price.str.replace('kr.','').values\ndf.loc[df['code3'].isin(['DNK','LUX','ESP','ITA','DEU','NLD','AUT','BRA']), ['price']]=df[df['code3'].isin(['DNK','LUX','ESP','ITA','DEU','NLD','AUT','BRA'])].price.str.replace('.','+')\\\n.str.replace(',','\/').str.replace('\/','.').str.replace('+',',')","16afd47f":"import re\ndef price_cleaning(x):\n    if 'or' in x:\n        x=x.split('or')[0]\n    return re.sub('[^0-9.]','',x).replace(' ','')\ndf['cleanPrice']=df.price.apply(price_cleaning)","4bf116c5":"df.drop(df[df.cleanPrice==''].index,inplace=True)","e206eaa6":"df.loc[df['code3'].isin(['DNK','LUX','ESP','ITA','DEU','NLD','AUT','BRA'])].sample(10).drop('model',axis=1)","f4648a9e":"df['cleanPrice']=df.cleanPrice.astype('float32')\ndf['exRateto$']=df.code3.map(conv)","cbb08f64":"df['Price$']=df['cleanPrice']*df['exRateto$']","2c6157d6":"pidDict=df[df.code3=='IND'][['model','pid']].set_index('pid').to_dict()['model']\npidDict","7258171b":"df.sample(7)","f7ee099c":"def usa_viz(pidcode=6):\n    fig = px.bar(df[df.pid==pidcode],x='country', y='Price$',hover_data=['Price$', 'model'],title=pidDict[pidcode],\n                text='Price$')\n    fig.update_traces(texttemplate='%{text:.4s}', textposition='outside')\n    fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')  \n    fig.show()","300ff5f4":"radio_buttons=wid.RadioButtons(options=df.pid.unique(),value=6)\nus=wid.interact(usa_viz,year=radio_buttons)","e3232a26":"def worldViz(pidcode=8):\n    fig = px.choropleth(df[df.pid==pidcode],color=\"Price$\",\n                               locations=\"code3\",title=pidDict[pidcode],hover_data=['country'])\n    fig.show()","06e9a88e":"radio_buttons=wid.RadioButtons(options=df.pid.unique(),value=8)\nus=wid.interact(worldViz,year=radio_buttons)","82c32b3b":"plt.figure(figsize=(15,5))\nsns.barplot(data=df[df.code3.isin(['IND','USA','AUS'])],x='model',y='Price$',hue='code3')\nplt.xticks(rotation=90)\nplt.title('Price Comparison of USA,IND and AUS (in USD)')\nplt.show()","9bb1c453":"## comparing USA, AUS and IND","49f026d1":"Final price after conversion to US Dollar","bccf2e29":"Exchange rate with respective to US dollar","ae78b947":"Adding countries Alpha code 3 for map plotting","4f56de6b":"Removing anything other than numbers and .(period) and removing any spaces present. Spliting prices which contains \"or\" (like in example \"From  1299\ud835\udc5c\ud835\udc5f 108.25\/mo. per month for 12 mo.\" ).","a021d7a1":"replacing 'kr.' to '' in Denmark.","a6837cad":"'DNK','LUX','ESP','ITA','DEU','NLD','AUT','BRA' in these countries .(period) is regarded as ,(comma) and vice-a-versa","8ab2cd0f":"## Bargraph and world map of Products with repect to countries.","ef833148":"Converting string price to float and\nMapping Alpha code 3 to exchange prices","b521275d":"creating dictionary for 'pid' to 'product name'"}}