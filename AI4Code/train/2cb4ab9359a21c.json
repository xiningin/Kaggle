{"cell_type":{"5416df53":"code","18d37572":"code","3a2204a0":"code","f7683bcc":"code","8da56e4b":"code","82ee6037":"code","0ee6210a":"code","268b363f":"code","9213e509":"code","4f201570":"code","72b7155c":"code","d4f94174":"code","bd523696":"code","b31c1beb":"markdown","8aa81da7":"markdown","955def73":"markdown","0d665624":"markdown","2d291e23":"markdown","2750463c":"markdown","aa9d3afb":"markdown","6b0861a7":"markdown","ffbca124":"markdown","700d4839":"markdown"},"source":{"5416df53":"import os\nimport re\nimport nltk\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.feature_extraction.text import CountVectorizer\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","18d37572":"dataset = pd.read_csv('\/kaggle\/input\/restaurant-reviews\/Restaurant_Reviews.tsv', delimiter = '\\t', quoting = 3)","3a2204a0":"dataset.head()","f7683bcc":"dataset.tail()","8da56e4b":"dataset.describe()","82ee6037":"dataset.corr()","0ee6210a":"nltk.download('stopwords')\ncorpus = []\nfor i in range(0, 1000):\n    review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i])\n    review = review.lower()\n    review = review.split()\n    ps = PorterStemmer()\n    all_stopwords = stopwords.words('english')\n    all_stopwords.remove('not')\n    review = [ps.stem(word) for word in review if not word in set(all_stopwords)]\n    review = ' '.join(review)\n    corpus.append(review)\nprint(corpus)","268b363f":"cv = CountVectorizer(max_features = 1500)\nX = cv.fit_transform(corpus).toarray()\ny = dataset.iloc[:, -1].values","9213e509":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)","4f201570":"classifier = GaussianNB()\nclassifier.fit(X_train, y_train)","72b7155c":"y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","d4f94174":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","bd523696":"accuracy_score(y_test, y_pred)","b31c1beb":"## Creating the Bag of Words model\nThe bag-of-words model is a way of representing text data when modeling text with machine learning algorithms.\nThe bag-of-words model is simple to understand and implement and has seen great success in problems such as language modeling and document classification.\n \nA bag-of-words model, or BoW for short, is a way of extracting features from text for use in modeling, such as with machine learning algorithms.\n\nThe approach is very simple and flexible, and can be used in a myriad of ways for extracting features from documents.\n\nA bag-of-words is a representation of text that describes the occurrence of words within a document. It involves two things:\n\nA vocabulary of known words.\nA measure of the presence of known words.\nIt is called a \u201cbag\u201d of words, because any information about the order or structure of words in the document is discarded. The model is only concerned with whether known words occur in the document, not where in the document.\n\nFor more study on this topic, you can move on with the [blog of Machine Learning Mastery](https:\/\/machinelearningmastery.com\/gentle-introduction-bag-words-model\/) which is very detailed on BoW","8aa81da7":"## Predicting the Test set results\nOnce you choose and fit a final machine learning model in scikit-learn, you can use it to make predictions on new data instances.\nThere is some confusion amongst beginners about how exactly to do this. I often see questions such as:\nHow do I make predictions with my model in scikit-learn?\nYou can get your detailed answer in the [Blog of machine learning mastery](https:\/\/machinelearningmastery.com\/make-predictions-scikit-learn\/)","955def73":"## **Making the Confusion Matrix**\n\nA confusion matrix is a technique for summarizing the performance of a classification algorithm. Classification accuracy alone can be misleading if you have an unequal number of observations in each class or if you have more than two classes in your dataset. Calculating a confusion matrix can give you a better idea of what your classification model is getting right and what types of errors it is making.\n\nFor More on the Confusion Matrix, you can go on with the [`Machine Learning Mastery Blog on Confusion matrix`](https:\/\/machinelearningmastery.com\/confusion-matrix-machine-learning\/)","0d665624":"## **Reading the Dataset by converting it into a readable Dataframe using Pandas**\n\npandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.\nFor the source file of pandas you can go on the [`Github link`](https:\/\/github.com\/pandas-dev\/pandas)","2d291e23":"## **Importing All Essential Libraries**\n* A (software) library is a collection of files (called modules) that contains functions for use by other programs.\n* May also contain data values (e.g., numerical constants) and other things.\n* Library\u2019s contents are supposed to be related, but there\u2019s no way to enforce that.\n* The Python standard library is an extensive suite of modules that comes with Python itself.\n* Many additional libraries are available from PyPI (the Python Package Index).","2750463c":"### **If you really like the work, then please Upvote it and do comment for improvement and changes.**\n\n![](https:\/\/media.tenor.com\/images\/c02ea29884a9df7a08ac86a8572fdbcf\/tenor.gif)\n\n#                          THANK YOU !","aa9d3afb":"## **Working on Data Visualizations task**","6b0861a7":"## Training the Naive Bayes model on the Training set\n\nNaive Bayes classifiers are a collection of classification algorithms based on Bayes\u2019 Theorem. It is not a single algorithm but a family of algorithms where all of them share a common principle, i.e. every pair of features being classified is independent of each other.\nFor more reading, you can go on with the blog of [`Naive Bayes from geek for Geeks`](https:\/\/www.geeksforgeeks.org\/naive-bayes-classifiers\/#:~:text=Naive%20Bayes%20classifiers%20are%20a,is%20independent%20of%20each%20other.)\n\n![The Normal Distribution of Mean and Standard Deviation](https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/naive-bayes-classification-1.png)\n\n![The Probability Distribution of Naive bayes Classifier using Bayes Theorem of Probability](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAATwAAACgCAMAAACmCCC4AAABg1BMVEX\/\/\/8AsFD\/\/wAAAAD7+\/v4+Pjw8PAAs1HGxsbx8fHq6urBwcHl5eWmpqYAtFHk5OSysrLb29vS0tK7u7uamprV1dWQkJDe3t6goKB+fn6qqqqBgYGKioqWlpaxsbF3d3dYWFj\/8PD\/rKxtbW1kZGRBQUEtLS1PT0\/\/9\/f\/a2v\/7u7\/YWFycnL\/t7f\/3d1JSUn\/x8f\/1dX\/iIhVVVX\/c3P\/l5f\/qKg4ODggICApKSn\/VVUApUD\/2tr\/wMDv7wD\/zc0SEhKcnAAAmTj\/fX26ugD\/j4\/\/np7\/T0+hoQDf3wDV1d+PjwD\/goL\/XFzExAAAchwAZxMAgyfIyNO3t8IAVSHV1QB1dSwzaEW7uwAAbiBoeGwXYTMAYyk8WEUNTydJdVdZdGEAWRQAfycoVzguZkFHZ1EAVROGhkiEhHF8fAD\/RER+fltxcVuJiWWjo7COjoGHhzVxg3YwUzxif2t9fUrl9uwyuGYApzCt3r15eROCzptjxYaDg1Bra0D\/LS1sbDFvbxm0PqKNAAAa7klEQVR4nO1dCUPbSJZ+iQ50WvctWQLJB8bYnDGEEAgk5O5AJ+lO0leSvrtn0sfM7M7O7mzvT9+ST8kXxsEBGn9OsK0qlcvPr6pevasApphiiimmmGKKKaaYYoopppjikkB59dnnX+n0WXfjIoL+Yi8T49A+655cPBBfZmauxMgc8WfdlwuHV5krTWQOhfGbIexXX7323qOBiwjhSZt4VzLW2M2In2+hkb\/1xDnFrp1\/8FtXOsT7fOxWjho\/wczWq9Ps3HmH3mG8KzNPiPEaMdrsO7Nnnm7\/zjX0KwnOezkm8V4lhv6b0+3fuYadHLafjdcGftgh3swedbodPM8gX860v\/iWmyrCNUoaqQ3jbaeNK1uXSeBxtlrfPPOGTFwnrTdHe28\/1\/Hjm0gT7zJNevBFk3qZJ2ziqvxdJjMzM5PZ+poceGcL+GGHeDN77LH1\/0zwn8Qy2t4zOXGNedOaxjJfH9\/C68SCcTgCq\/6ZYOivv3olpi4l1s8t79gG5LdtUaVr3ryMIJ90BuIoorO71xKSv5h85847lL2k6DzCjlU9rGtmji7VBmMAkpu2mSNthDs4\/avPvvlNPr7inx9ikvPeGmfdnYsF7oRz3hRJfJFYbXvWT0YYcw88MooLC7MT\/ogJQmpvVzPP0pQinM+fvH357aRF4bkJtz9RKIexdn4mk3mWnvEaOw+0robv+QGlYuO5glfa1zqvlpbfs\/nJAB9xB2B8+2Rva+9lOW1UM1ocObPlj9+H+bV5+Kn5eq3yuH39cbtvpfEbnxzeff\/w1sMfHoxUl1GybLc98tv2XDhzNL7uaR4eL68sLS1vH6xV9kvzs2trN9YrB5XFazuwvL5eOb6BswD3yc2rMW6Pu4fSjhKr8Oux+7E2f7C8Xpy\/s3T9YOVRaW29sr24cG3h4MbiIsxWKkW4NoewPXbzEwH549Umbo5pqFFTFo+xVQALRaiswKMF\/O7c9n5lfvHO\/vLB47mfABHsvThP6NU\/su0nQaJo9ESPOWB+uNrGRx+P1YJ7GhaPeJEAuAtzc1DaKVaKFViuII5Dz\/Mt+WQZX17cOXm7Ru8OZ7fxtIEECLnAiBJLiz11RoFwu0O8qz+P1YSe5LxxLR4NbBe3e0S5xeZzaaG4vHSiYSvnN9iwZvJ2vkpjPkj5DdHKUfkNI1etkdU8uZELKT4QonCD9eVaIOT1E3b33c0E8W6N9c2VvcSc9+k4LYyGR0U4ONENskuHEaHwGIRUAXFZGaoW48qSU4OC5OaoGmCUGQgFymb8yMrLhZPyn5eg3dXbTJ8a5FNVfTqMqvjniZ3H5PTtxfXl4snWC3l31S7Qohn6eSaHiIcFaihQuaqc9zeoQo3F\/CqlFoyclGdDs+zLTv6EXVKPIR7u3EO8ef\/hMOWn3Wa9UTTMHw6yTwIJBAEcYgEkFUQk0DiQ6C+JA0PjNIMK4yoMTqP3cbWT4en9BPEe9hQTf7SW4r8MacQ5qvsFzWSenSu\/FDK9ztKjaNFOBOJhgni9kt6\/22U3h4mB2Wd7W5mtJ68umzvfuw7rPeyxiT193qHsvaFcRZmq3W\/G\/PDoEtn47umaaX0PPF3S\/cOPpMMtt9bbW71iXkIIvHr1eJvPuUB6e031iL+y0nwhpLUbSle90TZc3q2YfM8\/6bO5\/TFJvL+O1NpZgMv5kg8+WfOtiAy9MuE4ZA6t+6EuemjbFIoCbzG5shPRkWdJFM+rrCohupZ1RGnF5BHFQ0X3aFN2LdjU0Z2Wznky71Ge4ZrD90zku1\/+qvfdXSQnxKvf96kwqjpmshAUgnfAIXlSMSgHXNs1NSTwSiL4Mhp9qsiYIZc1WFl2wJfYQDQZVwBK1mM2ZW1E30jHXdp0eVNl0P1Ao1Gmy3aZdDll7AH3a5J4PyRLaEWPNrEGchY\/mv\/KpCBkSdPmc6TJZTUqssuMy9KIInhk22jY0kqYzUacLSmUHNmIeC6iomIiznOgjPiStYAIbdKCVUXyFHQpZlZb0l021BSTdcadyt0E7W6+a1823A1sN\/IUWWJoQaN4p4phQfec8SGBoweS3Yj4BZLZAElv9dWArA8Nsl4YF4FPxJUZ9C8eNUS9FpL9JFNSIX5DxzcS9TuJ+KZYEhy3U8K9DvF+bI1QewMLxO6FWdYxLDz\/FrVBPZQn4QPntQWZ208bV0wMs\/v\/GFqIrQ4bvrL+22\/quZKiJw33RVPKawxaFtsdMjxJHwsHcTn5xVHdu\/s9FPX9wXW9QkMW70xTfSYspmuRS1fBe+S79xBfP\/751ovbD3+ocwxRwHq9FDlZ6xCMqWL9VRPcd43Ijpmt38fqxvI1mLvWt6Rc12Rm0f+G375kg9DqJduW1gym8R5B7aJWWhHl9oxs9320bIQgNH4rGQt62uE\/e3J0dPiq8\/MrWF8T2tdtzctWeZxOVFZm1w\/6qJMVt4oWflB5cFxdQk9+WQQmcCQPdJDyQoQWXh2Rx\/Fpy2JqCmtSPAOs44MKrmxZqgOBywqeSUQKEJbFVVlgXIoyFcpxUGHoUh6YnmGr7yeUqViPvgn\/Yq\/u7Zg57AxmcnO3d4trd1w1Zp70n7WLswA3il0XKy3daOkR3DnoY\/MOwWeyuiS6Uhb0cjZSJCELnA2+hzgQiXEOWKbpc6BIJkmbDuJLB20js4ZiuEhI0bKcySBpz8qGAlpueY7wEKEZi+FsXxF4Wq\/fLwRZ1RxP19yChfVqJV613G8zTxKFEdazLCQ8HQf59s3feQx3uy9WVpovbuwUK\/3sGKFRY3hhF0nIPqvrgiCpJiJeJKvMBholAeGCr7Bo5LC2Ytuyw0WchTjPFhQjlFZZyWZUsiA5pmQwZrxBF1kk5HFC2efKCmeiu3Ma2nn4JGPo76OTCbFedVdCh5zS5DlYN3Ml9KVXMv1dzubh+vIKrF2fW1hbml8vzs8XH88fwGOAlUd3BneLoAS0PGhIBpEkDigJZDS7EQYV8ySa\/xgBlcS7DKBA1oDUSJlhCGAIkqBlgSQYgsMFVJnS8PjraTKg351gCZpiUCF641PoD8MS0vv4ejlYH3XTt4logaNk6zrWtUS9SRLvb30\/YW1+cXl9dm2tdB3url8\/WFtbugvX0QMqiOUqseHx2kms3szpbHpOQ\/4z+\/AdEC+Tg1FNFvlYemn5NEm8\/ibOuumx9Hi9eBceHRzcWDuY\/QkNY8R5c3OLfW84V2DeqerH\/dcUuc98l\/azvZJJr\/iFauptwsI2yDU+Zqu7O\/v7c7P1daJUQldK7TmvtATr\/RaM8wH6h9hY8fzhuz5lRO86W7\/8cvAygGOp93QnHmiYnWN5dmkpdaHSGqlLK1A5me3sA4Jrqe7u9wkRDVb73\/TpkAgpKb1oiM0QyCuZw7F2wLMrUDpnvhYdfNJWANzv4T2q32IRg0+stj0hal2GvOxhJoMEwq1n4y35O3PFnXOhO+yDpO37Yfc2ov+gjfF729vxqHfLi2VTbxn3m8M3X72noH4u8X1Scfc0XcZjA2+jv9xquDu+VXsLxcH3\/alA3EqqjH9JFw7Y6teBO4d7W3tvv+4rDmGXIzUGcW8w8bLDGYigsuKAJeCYO\/8swFOWnrTQURvf\/QS7HPErPydo9zxlSOOw48NDB8F\/Xwfvi4GPP+oQ75NUiVcYv1XtcoxbsNqyyq208bt20lmfMDoKKeyS5Bbwm24pD9PWb6KfRqANijfZtFRIfXv49u2bV036RZcl0Pbp3++9uP3Q6ZrhqCEjz352tLW1d5gkUOxsVtcsN8Sb7EndBS8uaKGXy9RgYHV\/ryEgb\/3eZj53r61Zrg9Y45JMegNQbvEV\/tT7RU1Oh17HH7QVyd1J4nMl8yy+QHcrRU8Fle1zq19JI9fcXjx9GJu\/P\/q+Tb6GkmlrK6mhcxIqqr36Zncykt5SfyPkuUNzvdRbosy91nrSiPv+xz\/+I2GV+CypL66rtjZGNzqVKjhsw9LsYmzn6cNapbb9pzK7MN6X+dBosM7Tjhj4sDkQG6ku\/vOf\/7zSCV1+k9Qs1y0VudEFnfmDu6X54nxp56ciwOPe8mKbYsXlbgvlOUXDivhfiQ1I09PsbzHxZv71jzqhmom2nvXYyILR93bzxbs7s2hAlu7iADGh5q8frC0sLSwUFxYqC\/OPYyPH+v7a6X69yaI+4z9I7D9aLvNOg3j\/PZPQhL5KquXrZItGJ97a\/jbA4iLsx5aKhZjTHlXW4M6dtWvzK4sLcB3WZqGyvAylucXFxblzGgWZRt3ykwoTetFYMxqJQv71r6Q9jE1olg\/rAmO1x7dloL\/bQjwWdw5gpUW86yulheLi\/kplYX35OtyFBRyWti+AIa2D+oLxLqlz+ai54HbG6MyTlo20nYVgZq+hmsmntcnyq89fvvy0vza5Po8VHzeerwPcWLizjirOFmNHDPSnNN+sOLsIO4sXYtbbiKWQVKTLveaKwbbSHc3stfcYxO9b9dGc2WvqU7CUmdE5qmep2fpysA3oRuMpDohfToc4llqGNDSY508WwXdWCGL9Op3Ulf7aKqqbdNBe7Chpb4s1y1tH37VGa8qE5rT3H9+9l+wcE2\/p+GpnD73uEGZ1aJcwrgmvDt8eHX6b1pwQism3rzDJ7ZnciQh\/j4BwxHlzszdOzHh0\/6l2EhugBx8\/aM5L4mb9ozuySjoGzZCGRkyl1AqJtfgDJwRCwqbS+kHF5hdD8wkhQ8LzI56dhViqZWT5PUx87368\/fyjWz\/UfxWu4XTSSkTwfFj8Xi\/chCo5GVk6qdBSUtRYWfN0GmjLNFwHIkemVM6mrUBTTEqxBDCBJ3hWlfMyKAW66sqc58XhPqoNjq7Jpq4yVGR6MF4H6X\/fTGr2WvpM89d7t2\/9z9Nhd\/ZiM7E7o4d4tpwaHPTlWcdjQSXBB0WzQGdN0E2a1aqiwyN+cMDDdYWPIzAYFSxwXTsiQDd4XVNAplzwOUXFWXm83NqdQMe6Tjlst0KTJ3XOJZNKFXqIZ8upQfVUTzIZGpQsq0s+7YDLsbauKJYW0gyiKCJexLqcqIQk0LHjqGtqaArhdgmHsSiWRcQTRDRp18bSgScF4n\/DcG3oceBTutBvenQupw+aIxmQWDRnURywHBggMCz6Sxk0oTAcHnt9GxrHUfWkFzJtxGXxRCfH7pEaQQpgEAxOQTTsU4gHD\/rzUTJi6nbMesfYIczXn332ekAm383Uda\/jZpZ5M+msXYNAjqipGJIW68HPt158dOvnPsF6TFKkq0dMOcGQz9CebdXF3mf9\/DCNtIMQ\/qyz\/7jAqX\/fNfOBvOi1z6R0AFdjCZnpdc9uQztsO471oV7QFTQgvWnEYmT2xoomGAY5\/plGiS5iRmP5ZDU6pdB91yZQrzsZc7ub8yAcPP47+9vMlz2FXI8Onvv2aCuztffm1PmOQ9tlcaTwYn4YhYV2od2WQykiZROjE74V93pMPsn45IYOgOvxbW9\/RCK6Yq9HZ7zah+ia6uriKc93nqvYIRCblKc7oOtolQh9kjWzKpr1dSBcRTNNdEktg69nRcZWWRAUllIk3UUyCoTgKSqVdf14O0VaPgOEr4qCjaQXlXRZxagqNrSdwFIKph55S08UNn0HnM0B3X41LEBgoEvkKYP0IOTYOHRAB53yTQU0llMC0ZKpnGwCbkmkHWkUpYkCkkNEJiciDnVUz8t6rgYsqpTVeN0keBKtuzZJeJAV0D\/KE20b9w2ejkM52pPSX5OzWk\/4Nt7Zid1uLSiDfMWSwkfmq67CPmFqk0GkWQJi+5DTkVDnCgzIrCA6SBTZYDASSCN0DEQ8VrOFQPazTMiggeSarinbEhoDu8IuHmiuSpjoRpUyeRZkT7G5gM1KHitEPGmhrUj7w1Lh272pVITWwL3dnhCpAW4Dnw4hXjRJe3cxqc6jqTjSEWiJAQ44CgeCRu8pJO9BzDBoLZEZgkbXcMRpJEFQaESQNElDPTAFiXdxbAtTD4aUQYpvkeIIFolG9JdpBkeNdlw3\/ydJvF+hB7R\/7\/7Vmy\/+SAgyTn9JOTVsf0sVZSc5aIv7Y2QzgxGzffSB1vkuqfRRv\/SrTD999y7t7pPv6w+fCJ\/qiq6QJ+viM04quNPBg4Q0MmrKPALrK5r93hFVUvnfhcE+4AOxuL4E87BfmV+Huhq+ibnljsHsTiuKZf3s8tY6neV2ZA0TifVTMzCtEOTMs6RMJ2BjeEfNl+4uXSutIMKV6gagUgWWi9vFg527sLwEO+ixvL0IeKl0xuaLvzSpd\/Pfo2v9OKyfrMzUg98zR18kBUk5TTuSG8m3dG3ubhG25+BaHDFVt54tHyzMrV3beXxj\/9rBQuV\/b9y5cQdKBweIjotnaQDyYs+T+w9PxB\/0bq2fdEs5r187qQkumxqz5jcv3778ZgSxZX6pWLfb1j0tYqP3o4XST3PXDnaub8+VHi0urC\/ciIm3\/2gb8OKZch+OloShGQX7IRjJbSdKrhX071uNg29+P3bxXY8Jgsiz3rTbwvJ12N5f3L6xAiv7pdL+7FrMlxcXPFY+juAUlk+SqZ1aYNS0hE0nlZh4iz2k2m8uGEtr891FFwBcdXhgirCa3lckIkW3TlPxjl8Is20PFAzjB60yUoCF6dGZsPmc6iEQQ+LmzzeUXSzsM\/eR\/AZW7tJBJSy1I57dMiIuhLNFf2g+hgW81BZAcI51NrB8b5ak5KlBVy7Z2WdDIHs5DMN2a4UoV08EF\/Zk5opB7SUPjrskMRmjgdSULM\/bIjVQOZs8MzLzcvwwrMuJ5Kl7r8+6M2eJB08\/PrGWyegcfDNeaoE\/BXD94Uf3n9\/74aTp78QnzfTTT84ysePZgmz6+Vy9dUJnFZC\/jg1mR19fjsjbvvijrcPqiokcAZrpmaeeWPwCodt\/ZYoTIBmG8eLErHe50ceLYIpRkfZfmRLvROCmnPce6PVfmWJk6InV9o+z7syFw\/+1aXdvyngnBdcSVu6ddIcxRXyA7a3nN+\/f\/vuU78YC8fHTpyc+22qKKaaYYmQowIhtE6nSpUzcWYLKhYg5PRsYmxDJbX9OJkob9mZXivuL5\/OA8A8FaZiLVw5WtXZ8GxmlDQjFldn9SftHks3VVe+1uO7W\/8Znd7rUJqUPDQ0JqjyzaopZ29kUgRyQjm+j+ZytBhB2B8TQ1fiYSxPArEaAQZ4JdknUbq85js41XzA+I\/M0EFY5rmR2OWnNLcKEMj2QpmWQvgqeWc4zqgumSwlymeJ0EWTewnmHdHTIuxRn8XTNkSiuxlH5gGeoQZns84BlDQtWSTAiwG3Dl4BwHUrlNV8iHJ5QLQNRggFJFGnwZF3ZAMVSRZdxTRAt2lZNyBGg5S0Ai\/NVng4gPiwAIkQXyvcUndM9UHxSVNW4Yr2ZJvBCtcNzmiiKkz5iTKgZhcDwxQ1W8digLG4KOrtLbLABAbzOm3khpFxxk8QYE+PyTN6jcpTqUqxXGGRb2wzqIcs1YDYYoAu6xYHo1YwNwOyc69bYnIzKHRkMiiJArW4aBdgw+YhynYK4qfqRnCcQvevBUe7qJgGyC3x8klBMvJrt+YpZDsRdMwypHF2WQIib8VQEu34UFyjxay9OSkIQ8Uhfrh+tPjd3bQIpm7kaFQRUxCqYaIk5T8ujYYsJG5QLYDu6vQGh4iu7Eqa7mLAr5zyqRnk6D7sDg6w2Gp3M46QZDyzDd0Gp8XQBMFN1y64cMgFiJQ3s1QIHiL\/xGmxGUKC90JV3TSUgckTUtNpZsdeB5kPWaBIvFxGhwAe6jJnZiAyY0IBs3Ew\/UIiGk\/ZaEKoqSXsKeCx4dFYlbJA5TTcY9Lm2b4INhCqCqEqMatOix8hclpNJD\/yBtsWmU1oo0agKLsoeCbxVYxWQPAo3eVoh0PV8c9aUEVl28bwXsASYJlCeoOAitEKQqNiTiKhB3UkhJl5erVKoOROnPAO1g++2PpQBQ2u5HREEpIZrsTgbH7FxSvRKgRkchM0O+eH849wetURwmhxY6epE0sM3q\/lBylRJprvkNO710JMVpBYzsiWdGBioLWdfOhcHdncqFddu7MwdbC+twBT9gdbntpjnMrqRXOTnlmGndFC6UDm9PiSYPMO1MjHhkSLpybRMdxZhHZYPLqZ36RRTTDHFEEhax0+6y2Na06bulsOhWm2hR+wS4\/VwEmm4LhKO3WJ14oyJ7jMS+pwec4po9szr1aoE9b9kGJ8bHlHDcxt5vkz6ikKJbk0DMki2oiXu1Fu7ABdt1VpMElFthQjnxOdhIz5SfBtyEDHVuFInHk5ROlo7q81TRn3jo7ka2p50nZHKTsDxjZBFGkQ5Pmw9IGQWZFZmyCxDUjIIca4qJU6nlmc5QtTonELLTI3RVl2K6JMbvYFNGhPZMN6fGgHgLCGSINMch5quyQ76JFIiDUYCOT6ikkHT0AaNUaaMGyRFQY1VISsZDHqQ+Tg4C\/1cZa3KlmPVSoS+fZWIw+RZIktnxWq8i2HRg0J3obY6mgqzHUsocNwkzVjCrh35dpXFFLPMFkJ2I6tTG+wGlZeAj\/xs3nbUiN1VMEHFmN1sNdaqeKFp2sGgTuXNfMzENZzOyUBXLctAW2P0CWUxJ+thNscGZuRRdaWdrqON8IZaMClTXLWjiK1SfFXJZ\/VQDYhVEnAlzgalYyRQLohx9DkiHmBCucDnFbEgF3g\/kjApYCKgXZ0FjUcwmfp9ZJwUEacQINa78Q2cso5KWKWrVdxV2E3FVAqqXANd2YVNVkdbfF5RNyEQTHsTMN7dFWqwqVI1SkWjaXPAwXKIGI0pOw8kH+s1Y10h5AtszqRqsl4DSy5EcTaHmHhBpNfreyyRj7KBKudYHoPAqFlBDgrNxdG3EUtROvBkk3h6Xt41XTFbyOrkKltzagoXofkhsuMT43G8NS3GL3DVNOv5XvEmTpd2wOUDTSo4xKpOFww\/YCw0buyqaKCu2IWIKIOx6qMNuaIFIeOvylnJ0kSpAOHAiL7mKd4Bw+ixBiAbn5rueOAHhmXY6JMgy8e\/TDtjHaovmhCJEEacIytU1QOXNTuqFTNmcSEC1WgSj8GAXVVlyiH8VYEooAc7ofR8x0IYfHCPPSTTe+44oUlJhjCv9rrVO4n5m6hCT2R0V7+aCvcCqkb1RPCHrSnEUuRCrfk6X0uMUbkKSgihe9mllWFQFDTftd6kkkZUY9EldKcxXYOhq+C05jUqKXGRuyBVAR8vueUlAUlCe\/in5gGaJmgaP6sUiFNMcSL8P7ETt4VCi+OyAAAAAElFTkSuQmCC)","ffbca124":"## **Splitting the dataset into the Training set and Test set**\n\nThe train-test split procedure is used to estimate the performance of machine learning algorithms when they are used to make predictions on data not used to train the model. It is a fast and easy procedure to perform, the results of which allow you to compare the performance of machine learning algorithms for your predictive modeling problem. Although simple to use and interpret, there are times when the procedure should not be used, such as when you have a small dataset and situations where additional configuration is required, such as when it is used for classification and the dataset is not balanced.\n\nFor more study on this method, you can go on the following [`Blog of Machine learning Mastery`](https:\/\/machinelearningmastery.com\/train-test-split-for-evaluating-machine-learning-algorithms\/)","700d4839":"## Cleaning the texts\nYou cannot go straight from raw text to fitting a machine learning or deep learning model.\nYou must clean your text first, which means splitting it into words and handling punctuation and case.\nIn fact, there is a whole suite of text preparation methods that you may need to use, and the choice of methods really depends on your natural language processing task.\n\nAfter actually getting a hold of your text data, the first step in cleaning up text data is to have a strong idea about what you\u2019re trying to achieve, and in that context review your text to see what exactly might help.\n\nTake a moment to look at the text. What do you notice?\n\nHere\u2019s what I see:\n\n- It\u2019s plain text so there is no markup to parse (yay!).\n- The translation of the original German uses UK English (e.g. \u201ctravelling\u201c).\n- The lines are artificially wrapped with new lines at about 70 characters (meh).\n- There are no obvious typos or spelling mistakes.\n- There\u2019s punctuation like commas, apostrophes, quotes, question marks, and more.\n- There\u2019s hyphenated descriptions like \u201carmour-like\u201d.\n- There\u2019s a lot of use of the em dash (\u201c-\u201c) to continue sentences (maybe replace with commas?).\n- There are names (e.g. \u201cMr. Samsa\u201c)\n- There does not appear to be numbers that require handling (e.g. 1999)\n- There are section markers (e.g. \u201cII\u201d and \u201cIII\u201d), and we have removed the first \u201cI\u201d.\n\nFor more study on the topic, you can go on with the following [Blog post](https:\/\/machinelearningmastery.com\/clean-text-machine-learning-python\/)"}}