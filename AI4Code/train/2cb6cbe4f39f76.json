{"cell_type":{"90544c3f":"code","a2949dd0":"code","c6e091b7":"code","09f57eb2":"code","dcd1c1ab":"code","c5e7c18a":"code","162b6b43":"code","02e54f9c":"code","6284f573":"code","45bda5ba":"code","c42d7254":"code","e2df029e":"code","fb7f4bf8":"code","bf9bb97d":"code","06b42ef0":"code","ccc397e9":"code","2a3c91ca":"code","7b6fde04":"code","1d6665f0":"code","dd353cfe":"code","5bab0696":"code","dbdb2205":"code","82ad226e":"code","1e55c26e":"code","5c9efc96":"code","916bd04c":"code","d250a0f6":"code","a007f3d4":"code","f4efd7ca":"code","218166cf":"code","348d08d6":"code","b1519c12":"code","b326952f":"code","de19b50d":"code","12b39e87":"code","4e792c07":"code","d5b11a89":"code","cb3b55c7":"code","a365c812":"code","90259d5d":"code","0180c82e":"code","2a1cd8f9":"code","0c0aabc2":"markdown","cba3650c":"markdown","4fa60d73":"markdown","dcb6a400":"markdown","854abc40":"markdown","feb4fe4f":"markdown","43386c2b":"markdown","16895d64":"markdown","993a0c51":"markdown","cff1276c":"markdown"},"source":{"90544c3f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(\"ignore\")","a2949dd0":"data = pd.read_csv(\"..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")\ndata.head()","c6e091b7":"data.dtypes","09f57eb2":"data.shape","dcd1c1ab":"data.describe()","c5e7c18a":"data.isna().sum()","162b6b43":"data['quality'].value_counts()   ","02e54f9c":"data.duplicated().sum()","6284f573":"# Removing the duplicated data\ndata.drop_duplicates(keep='first', inplace=True)","45bda5ba":"def custom_palette(custom_colors):\n    customPalette = sns.set_palette(sns.color_palette(custom_colors))\n    sns.palplot(sns.color_palette(custom_colors),size=0.8)\n    plt.tick_params(axis='both', labelsize=0, length = 0)","c42d7254":"red = [\"#4f0000\",\"#740000\",\"#980000\",\"#b50000\",\"#d30000\",\"#dc2f02\"]\ncustom_palette(red)","e2df029e":"sns.set_palette(sns.color_palette(red))","fb7f4bf8":"# Having a look at the correlation matrix\n\nfig, ax = plt.subplots(figsize=(10,8))\nsns.heatmap(data.corr(), annot=True, fmt='.1g', cmap=red, cbar=False, linewidths=0.9, linecolor='black');","bf9bb97d":"fig, ax = plt.subplots(figsize=(8,8))\n\nplt.pie(x=data[\"quality\"].value_counts(), \n        colors=[red[0], red[1], red[2],red[3],red[4],red[5]], \n        labels=[\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"], \n        explode=[0.04,0,0.1,0.35,0.4,0.8],\n        shadow = True, \n        )\n\nplt.show()","06b42ef0":"plt.style.use(\"seaborn\")\nplt.figure(figsize=(15,8))\nplt.title(\"quality\", fontsize=20, y=1.02)\nsns.countplot(x = data[\"quality\"], palette=red)\nplt.xticks(fontsize=15)\nplt.show()","ccc397e9":"data.hist(figsize=(17,15), color='crimson', bins=15);","2a3c91ca":"fig, ax =plt.subplots(6,2, figsize=(25,35)) \nplt.style.use(\"seaborn\")\n\n\nsns.histplot(x = data[\"fixed acidity\"], hue = data[\"quality\"], palette=\"viridis\", kde=True, ax=ax[0,0]);\nax[0,0].set_xlabel(\"fixed acidity\",fontsize=15)\n\nsns.histplot(x = data[\"volatile acidity\"], hue = data[\"quality\"], palette=\"viridis\", kde=True, ax=ax[0,1]);\nax[0,1].set_xlabel(\"volatile acidity\",fontsize=15)\n\n\nsns.histplot(x = data[\"citric acid\"], hue = data[\"quality\"], palette=\"dark\", kde=True, ax=ax[1,0]);\nax[1,0].set_xlabel(\"citric acid\",fontsize=15)\n\nsns.histplot(x = data[\"residual sugar\"], hue = data[\"quality\"], palette=\"dark\", kde=True, ax=ax[1,1]);\nax[1,1].set_xlabel(\"residual sugar\",fontsize=15)\n\n\nsns.histplot(x = data[\"chlorides\"], hue = data[\"quality\"], palette=\"flare\", kde=True, ax=ax[2,0]);\nax[2,0].set_xlabel(\"chlorides\",fontsize=15)\n\nsns.histplot(x = data[\"free sulfur dioxide\"], hue = data[\"quality\"], palette=\"flare\", kde=True, ax=ax[2,1]);\nax[2,1].set_xlabel(\"free sulfur dioxide\",fontsize=15)\n\n\nsns.histplot(x = data[\"total sulfur dioxide\"], hue = data[\"quality\"], palette=\"viridis\", kde=True, ax=ax[3,0]);\nax[3,0].set_xlabel(\"total sulfur dioxide\",fontsize=15)\n\nsns.histplot(x = data[\"density\"], hue = data[\"quality\"], palette=\"viridis\", kde=True, ax=ax[3,1]);\nax[3,1].set_xlabel(\"density\",fontsize=15);\n\n\nsns.histplot(x = data[\"pH\"], hue = data[\"quality\"], palette=red, kde=True, ax=ax[4,0]);\nax[4,0].set_xlabel(\"pH\",fontsize=15)\n\nsns.histplot(x = data[\"sulphates\"], hue = data[\"quality\"], palette=red, kde=True, ax=ax[4,1]);\nax[4,1].set_xlabel(\"sulphates\",fontsize=15);\n\n\nsns.histplot(x = data[\"alcohol\"], hue = data[\"quality\"], palette=\"flare\", kde=True, ax=ax[5,0]);\nax[5,0].set_xlabel(\"alcohol\",fontsize=15);","7b6fde04":"# X data\nX = data.drop(\"quality\", axis=1)\nX.head()","1d6665f0":"# y data\ny = data[\"quality\"]\ny.head()","dd353cfe":"# Adding randomized samples to the data\n\nfrom imblearn.over_sampling import RandomOverSampler\n\nover_samp =  RandomOverSampler(random_state=0)\nX_train_res, y_train_res = over_samp.fit_resample(X, y)\nX_train_res.shape, y_train_res.shape","5bab0696":"plt.style.use(\"seaborn\")\nplt.figure(figsize=(10,6))\nplt.title(\"No. of samples after balancing\", fontsize=20, y=1.02)\nsns.countplot(x = y_train_res, palette=red)\nplt.show()","dbdb2205":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_train_res, y_train_res, test_size = 0.2, random_state = 42)","82ad226e":"len(X_train), len(X_test)","1e55c26e":"# Scaling the data \n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","5c9efc96":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)","916bd04c":"LinearRegressionScore = lr.score(X_test,y_test)\nprint(\"Accuracy obtained by Linear Regression model:\",LinearRegressionScore*100)","d250a0f6":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators = 100)\nrfc.fit(X_train,y_train)","a007f3d4":"RandomForestClassifierScore = rfc.score(X_test, y_test)\nprint(\"Accuracy obtained by Random Forest Classifier model:\",RandomForestClassifierScore*100)","f4efd7ca":"from sklearn import metrics\ny_pred_rfc = rfc.predict(X_test)\nprint(metrics.classification_report(y_test, y_pred_rfc))","218166cf":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(4)\nknn.fit(X_train,y_train)","348d08d6":"KNeighborsClassifierScore = knn.score(X_test, y_test)\nprint(\"Accuracy obtained by K Neighbors Classifier model:\",KNeighborsClassifierScore*100)","b1519c12":"y_pred_knn = knn.predict(X_test)\nprint(metrics.classification_report(y_test, y_pred_knn))","b326952f":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train, y_train)","de19b50d":"DecisionTreeClassifierScore = dtc.score(X_test,y_test)\nprint(\"Accuracy obtained by Decision Tree Classifier model:\",DecisionTreeClassifierScore*100)","12b39e87":"y_pred_dtc = dtc.predict(X_test)\nprint(metrics.classification_report(y_test, y_pred_dtc))","4e792c07":"from sklearn.ensemble import GradientBoostingClassifier\ngb = GradientBoostingClassifier()\ngb.fit(X_train, y_train)","d5b11a89":"GradientBoostingClassifierScore = gb.score(X_test,y_test)\nprint(\"Accuracy obtained by Gradient Boosting Classifier model:\",GradientBoostingClassifierScore*100)","cb3b55c7":"y_pred_gb = gb.predict(X_test)\nprint(metrics.classification_report(y_test, y_pred_gb))","a365c812":"from xgboost import XGBClassifier\nxg = XGBClassifier()\nxg.fit(X_train, y_train)","90259d5d":"XGBClassifierScore = xg.score(X_test,y_test)\nprint(\"Accuracy obtained by XGB Classifier model:\",XGBClassifierScore*100)","0180c82e":"y_pred_xg = xg.predict(X_test)\nprint(metrics.classification_report(y_test, y_pred_xg))","2a1cd8f9":"plt.style.use(\"seaborn\")\n\nx = [\"Linear Regression\", \n     \"Decision Tree Classifier\", \n     \"Random Forest Classifier\", \n     \"K Neighbors Classifier\",  \n     \"Gradient Boosting Classifier\",\n     \"XGB Classifier\"]\n\ny = [LinearRegressionScore, \n     DecisionTreeClassifierScore, \n     RandomForestClassifierScore, \n     KNeighborsClassifierScore,  \n     GradientBoostingClassifierScore, \n     XGBClassifierScore]\n\nfig, ax = plt.subplots(figsize=(15,8))\nsns.barplot(x=x,y=y, palette=red);\nplt.ylabel(\"Model Accuracy\")\nplt.xticks(rotation=40, fontsize=15)\nplt.title(\"Model Comparison - Model Accuracy\", fontsize=20, fontname=\"Helvetica\", y=1.03);","0c0aabc2":"# <span style=\"color:firebrick;\"> Importing Libraries <\/span>","cba3650c":"# <span style=\"color:firebrick;\"> Gradient Boosting Classifier <\/span>","4fa60d73":"# <span style=\"color:firebrick;\"> Linear Regression <\/span>","dcb6a400":"# <span style=\"color:firebrick;\"> Splitting the data into training and test datasets <\/span>\nHere, we are trying to predict the quality of the wine using the given data. Hence, the quality will be the y label and rest of the data will be the X or the input data.","854abc40":"# <span style=\"color:firebrick;\"> K Neighbors Classifier <\/span>","feb4fe4f":"# <span style=\"color:firebrick;\"> XGB Classifier <\/span>","43386c2b":"# <span style=\"color:firebrick;\"> Random Forest Classifier <\/span>","16895d64":"# <span style=\"color:firebrick;\"> Loading up the data <\/span>","993a0c51":"# <p style=\"background-color:#980000;font-family:inter;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Red Wine Quality Classification<\/p>","cff1276c":"# <span style=\"color:firebrick;\"> Decision Tree Classifier <\/span>"}}