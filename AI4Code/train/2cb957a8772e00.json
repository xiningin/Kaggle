{"cell_type":{"26232cc3":"code","cc6607c2":"code","e9c5ff79":"code","05877c88":"code","5463d6ad":"code","245ae4d1":"code","cd20c21b":"code","0a3fff42":"code","d25b8de9":"code","c1942d0b":"code","61ef2243":"code","a3455311":"code","2962d25d":"code","69fd65cc":"code","a9dcd7b9":"code","ea405a0b":"code","8b2a8738":"code","402ccc75":"code","6cdcc270":"code","04ac901d":"code","f69ad9a4":"code","fcdec670":"code","7fc113eb":"code","9a761e40":"code","b16d705b":"code","ec8c6a5e":"code","d1fac418":"code","968124fc":"code","09c0181c":"markdown","0bedf7fe":"markdown","88e90b52":"markdown","67b7152c":"markdown","df67f181":"markdown","59702e5a":"markdown","377303df":"markdown","61f2e6ec":"markdown","e0d5f0f1":"markdown","7ccea3c6":"markdown","f57d6ba4":"markdown","e330c5f9":"markdown","6e48a898":"markdown","a09ed418":"markdown","ba4281b2":"markdown","9bdef517":"markdown","2a29ebed":"markdown","bd22fc8c":"markdown","c4b493c0":"markdown","57cc9c9c":"markdown","4d9ca911":"markdown","22de26ca":"markdown","403e2884":"markdown"},"source":{"26232cc3":"#Import python libraries\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport re\nfrom collections import defaultdict","cc6607c2":"# List the files in the directory\nimport os\nprint(os.listdir(\"..\/input\/\"))","e9c5ff79":"#Import the US based dataset\ndata_us = pd.read_csv(\"..\/input\/data-scientist-job-market-in-the-us\/alldata.csv\")\n#Import the UK based dataset\ndata_uk = pd.read_csv(\"..\/input\/50000-job-board-record-from-reed-uk\/reed_uk.csv\")","05877c88":"#Select only the position and the associated description for the US based dataset\nselect_data_us = data_us[[\"position\",\"description\"]]\nselect_data_uk = data_uk[[\"job_title\",\"job_description\"]]\n# rename UK columns\nselect_data_uk = select_data_uk.rename(index=str, columns={\"job_title\": \"position\", \"job_description\": \"description\"})","5463d6ad":"# Concatenate resulting dataframes\nselect_dat = pd.concat([select_data_us,select_data_uk],axis=0)\n# Convert to strings\nselect_dat = select_dat.applymap(str)\n# Replace certain strings\nselect_dat[\"description\"] = select_dat[\"description\"].replace(to_replace='Apply', value=\"\",regex=True)\nselect_dat[\"description\"] = select_dat[\"description\"].replace(to_replace='apply', value=\"\",regex=True)\nselect_dat[\"description\"] = select_dat[\"description\"].replace(to_replace='now', value=\"\",regex=True)\nselect_dat[\"description\"] = select_dat[\"description\"].replace(to_replace='apply now', value=\"\",regex=True)\nselect_dat[\"description\"] = select_dat[\"description\"].replace(to_replace='Apply Now', value=\"\",regex=True)\nselect_dat[\"description\"] = select_dat[\"description\"].replace(to_replace='Job Description', value=\"\",regex=True)\nselect_dat[\"description\"] = select_dat[\"description\"].replace(to_replace='job description', value=\"\",regex=True)\nselect_dat[\"description\"] = select_dat[\"description\"].replace(to_replace='changes everything', value=\"\",regex=True)\nselect_dat[\"description\"] = select_dat[\"description\"].replace(to_replace='everything', value=\"\",regex=True)\nselect_dat[\"description\"] = select_dat[\"description\"].replace(to_replace='data scientist', value=\"Data Scientist\",regex=True)","245ae4d1":"#View the resulting concatenated dataframe\nselect_dat.head()","cd20c21b":"#Check the resulting shape of the dataframe\nselect_dat.shape","0a3fff42":"#Select Data Analyst postings from the listings\nAnalyst = select_dat[select_dat['position'].str.contains(\"Data Analyst\")] \n#View the slice\nAnalyst.head()","d25b8de9":"#Select Data Scientist postings from the listings\nScientist = select_dat[select_dat['position'].str.contains(\"Data Scientist\")] \n#View the slice\nScientist.head()","c1942d0b":"#Select Machine learning postings from the listings\nML = select_dat[select_dat['position'].str.contains(\"Machine Learning\")] \n#View the slice\nML.head()","61ef2243":"#Select Big Data postings from the listings\nBD = select_dat[select_dat['position'].str.contains(\"Big Data\")] \n#View the slice\nBD.head()","a3455311":"#Code for wordcloud (adapted for removal of stop words)\n\n#Code adpted from : https:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-notebook-qiqc\n\n#import the wordcloud package\nfrom wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\n\n#Define the word cloud function with a max of 200 words\ndef plot_wordcloud(text, mask=None, max_words=200, max_font_size=100, figure_size=(10,10), \n                   title = None, title_size=20, image_color=False):\n    stopwords = set(STOPWORDS)\n    #define additional stop words that are not contained in the dictionary\n    more_stopwords = {'one', 'br', 'Po', 'th', 'sayi', 'fo', 'Unknown'}\n    stopwords = stopwords.union(more_stopwords)\n    #Generate the word cloud\n    wordcloud = WordCloud(background_color='black',\n                    stopwords = stopwords,\n                    max_words = max_words,\n                    max_font_size = max_font_size, \n                    random_state = 42,\n                    width=800, \n                    height=400,\n                    mask = mask)\n    wordcloud.generate(str(text))\n    #set the plot parameters\n    plt.figure(figsize=figure_size)\n    if image_color:\n        image_colors = ImageColorGenerator(mask);\n        plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation=\"bilinear\");\n        plt.title(title, fontdict={'size': title_size,  \n                                  'verticalalignment': 'bottom'})\n    else:\n        plt.imshow(wordcloud);\n        plt.title(title, fontdict={'size': title_size, 'color': 'black', \n                                  'verticalalignment': 'bottom'})\n    plt.axis('off');\n    plt.tight_layout()  \n    \n#ngram function\ndef ngram_extractor(text, n_gram):\n    token = [token for token in text.lower().split(\" \") if token != \"\" if token not in STOPWORDS]\n    ngrams = zip(*[token[i:] for i in range(n_gram)])\n    return [\" \".join(ngram) for ngram in ngrams]\n\n# Function to generate a dataframe with n_gram and top max_row frequencies\ndef generate_ngrams(df, n_gram, max_row):\n    temp_dict = defaultdict(int)\n    for question in df:\n        for word in ngram_extractor(question, n_gram):\n            temp_dict[word] += 1\n    temp_df = pd.DataFrame(sorted(temp_dict.items(), key=lambda x: x[1])[::-1]).head(max_row)\n    temp_df.columns = [\"word\", \"wordcount\"]\n    return temp_df\n\n#Function to construct side by side comparison plots\ndef comparison_plot(df_1,df_2,col_1,col_2, space):\n    fig, ax = plt.subplots(1, 2, figsize=(20,10))\n    \n    sns.barplot(x=col_2, y=col_1, data=df_1, ax=ax[0], color=\"royalblue\")\n    sns.barplot(x=col_2, y=col_1, data=df_2, ax=ax[1], color=\"royalblue\")\n\n    ax[0].set_xlabel('Word count', size=14)\n    ax[0].set_ylabel('Words', size=14)\n    ax[0].set_title('Top 20 Bi-grams in Descriptions', size=18)\n\n    ax[1].set_xlabel('Word count', size=14)\n    ax[1].set_ylabel('Words', size=14)\n    ax[1].set_title('Top 20 Tri-grams in Descriptions', size=18)\n\n    fig.subplots_adjust(wspace=space)\n    \n    plt.show()","2962d25d":"#Select descriptions from Analyst\nAnalyst_desc = Analyst[\"description\"]\nAnalyst_desc.replace('--', np.nan, inplace=True) \nAnalyst_desc_na = Analyst_desc.dropna()\n#convert list elements to lower case\nAnalyst_desc_na_cleaned = [item.lower() for item in Analyst_desc_na]\n#remove html links from list \nAnalyst_desc_na_cleaned =  [re.sub(r\"http\\S+\", \"\", item) for item in Analyst_desc_na_cleaned]\n#remove special characters left\nAnalyst_desc_na_cleaned = [re.sub(r\"[-()\\\"#\/@;:<>{}`+=~|.!?,]\", \"\", item) for item in Analyst_desc_na_cleaned]\n#convert to dataframe\nAnalyst_desc_na_cleaned = pd.DataFrame(np.array(Analyst_desc_na_cleaned).reshape(-1))\n#Squeeze dataframe to obtain series\nAnalyst_cleaned = Analyst_desc_na_cleaned.squeeze()","69fd65cc":"#run the function on the Data Analyst headlines and Remove NA values for clarity of visualisation\nplot_wordcloud(Analyst_cleaned, title=\"Word Cloud of Data Analyst Descriptions\")","a9dcd7b9":"#Select descriptions from Scientist\nScientist_desc = Scientist[\"description\"]\nScientist_desc.replace('--', np.nan, inplace=True) \nScientist_desc_na = Scientist_desc.dropna()\n#convert list elements to lower case\nScientist_desc_na_cleaned = [item.lower() for item in Scientist_desc_na]\n#remove html links from list \nScientist_desc_na_cleaned =  [re.sub(r\"http\\S+\", \"\", item) for item in Scientist_desc_na_cleaned]\n#remove special characters left\nScientist_desc_na_cleaned = [re.sub(r\"[-()\\\"#\/@;:<>{}`+=~|.!?,]\", \"\", item) for item in Scientist_desc_na_cleaned]\n#convert to dataframe\nScientist_desc_na_cleaned = pd.DataFrame(np.array(Scientist_desc_na_cleaned).reshape(-1))\n#Squeeze dataframe to obtain series\nScientist_cleaned = Scientist_desc_na_cleaned.squeeze()","ea405a0b":"#run the function on the Data Analyst headlines and Remove NA values for clarity of visualisation\nplot_wordcloud(Scientist_cleaned, title=\"Word Cloud of Data Scientist Descriptions\")","8b2a8738":"#Select descriptions from ML\nML_desc = ML[\"description\"]\nML_desc.replace('--', np.nan, inplace=True) \nML_desc_na = ML_desc.dropna()\n#convert list elements to lower case\nML_desc_na_cleaned = [item.lower() for item in ML_desc_na]\n#remove html links from list \nML_desc_na_cleaned =  [re.sub(r\"http\\S+\", \"\", item) for item in ML_desc_na_cleaned]\n#remove special characters left\nML_desc_na_cleaned = [re.sub(r\"[-()\\\"#\/@;:<>{}`+=~|.!?,]\", \"\", item) for item in ML_desc_na_cleaned]\n#convert to dataframe\nML_desc_na_cleaned = pd.DataFrame(np.array(ML_desc_na_cleaned).reshape(-1))\n#Squeeze dataframe to obtain series\nML_cleaned = ML_desc_na_cleaned.squeeze()","402ccc75":"#run the function on the Machine learning headlines and Remove NA values for clarity of visualisation\nplot_wordcloud(ML_cleaned, title=\"Word Cloud of Machine learning positions Descriptions\")","6cdcc270":"#Select descriptions from BD_US\nBD_desc = BD[\"description\"]\nBD_desc.replace('--', np.nan, inplace=True) \nBS_desc_na = BD_desc.dropna()\n#convert list elements to lower case\nBD_desc_na_cleaned = [item.lower() for item in BS_desc_na]\n#remove html links from list \nBD_desc_na_cleaned =  [re.sub(r\"http\\S+\", \"\", item) for item in BD_desc_na_cleaned]\n#remove special characters left\nBD_desc_na_cleaned = [re.sub(r\"[-()\\\"#\/@;:<>{}`+=~|.!?,]\", \"\", item) for item in BD_desc_na_cleaned]\n#convert to dataframe\nBD_desc_na_cleaned = pd.DataFrame(np.array(BD_desc_na_cleaned).reshape(-1))\n#Squeeze dataframe to obtain series\nBD_cleaned = BD_desc_na_cleaned.squeeze()","04ac901d":"#run the function on the Big Data headlines and Remove NA values for clarity of visualisation\nplot_wordcloud(BD_cleaned, title=\"Word Cloud of Big Data positions Descriptions\")","f69ad9a4":"#Generate unigram for data analyst\nAnalyst_1gram = generate_ngrams(Analyst_cleaned, 1, 20)\n#generate barplot for unigram\nplt.figure(figsize=(12,8))\nsns.barplot(Analyst_1gram[\"wordcount\"],Analyst_1gram[\"word\"])\nplt.xlabel(\"Word Count\", fontsize=15)\nplt.ylabel(\"Unigrams\", fontsize=15)\nplt.title(\"Top 20 Unigrams for Data Analyst Descriptions\")\nplt.show()","fcdec670":"#Obtain bi-grams and tri-grams (top 20)\nAnalyst_2gram = generate_ngrams(Analyst_cleaned, 2, 20)\nAnalyst_3gram = generate_ngrams(Analyst_cleaned, 3, 20)\n#compare the bar plots\ncomparison_plot(Analyst_2gram,Analyst_3gram,'word','wordcount', 0.5)","7fc113eb":"#Generate unigram for data analyst\nScientist_1gram = generate_ngrams(Scientist_cleaned, 1, 20)\n#generate barplot for unigram\nplt.figure(figsize=(12,8))\nsns.barplot(Scientist_1gram[\"wordcount\"],Scientist_1gram[\"word\"])\nplt.xlabel(\"Word Count\", fontsize=15)\nplt.ylabel(\"Unigrams\", fontsize=15)\nplt.title(\"Top 20 Unigrams for Data Scientist Descriptions\")\nplt.show()","9a761e40":"#Obtain bi-grams and tri-grams (top 20)\nScientist_2gram = generate_ngrams(Scientist_cleaned, 2, 20)\nScientist_3gram = generate_ngrams(Scientist_cleaned, 3, 20)\n#compare the bar plots\ncomparison_plot(Scientist_2gram,Scientist_3gram,'word','wordcount', 0.5)","b16d705b":"#Generate unigram for ML positions\nScientist_1gram = generate_ngrams(ML_cleaned, 1, 20)\n#generate barplot for unigram\nplt.figure(figsize=(12,8))\nsns.barplot(Scientist_1gram[\"wordcount\"],Scientist_1gram[\"word\"])\nplt.xlabel(\"Word Count\", fontsize=15)\nplt.ylabel(\"Unigrams\", fontsize=15)\nplt.title(\"Top 20 Unigrams for Machine Learning positions descriptions\")\nplt.show()","ec8c6a5e":"#Obtain bi-grams and tri-grams (top 20)\nML_2gram = generate_ngrams(ML_cleaned, 2, 20)\nML_3gram = generate_ngrams(ML_cleaned, 3, 20)\n#compare the bar plots\ncomparison_plot(ML_2gram,ML_3gram,'word','wordcount', 0.5)","d1fac418":"#Generate unigram for ML positions\nBD_1gram = generate_ngrams(BD_cleaned, 1, 20)\n#generate barplot for unigram\nplt.figure(figsize=(12,8))\nsns.barplot(Scientist_1gram[\"wordcount\"],Scientist_1gram[\"word\"])\nplt.xlabel(\"Word Count\", fontsize=15)\nplt.ylabel(\"Unigrams\", fontsize=15)\nplt.title(\"Top 20 Unigrams for Big Data positions descriptions\")\nplt.show()","968124fc":"#Obtain bi-grams and tri-grams (top 20)\nBD_2gram = generate_ngrams(BD_cleaned, 2, 20)\nBD_3gram = generate_ngrams(BD_cleaned, 3, 20)\n#compare the bar plots\ncomparison_plot(BD_2gram,BD_3gram,'word','wordcount', 0.5)","09c0181c":"The above \"Data Analyst\" word cloud indicates that the position has requirements at the graduate level and would be inclined towards doing research using quantitative methods.","0bedf7fe":"The n-gram analysis for the \"data analyst\" position further indicates that the role can be very general, with responsibilities ranging across data science, big data, analytics and machine learning. It might also be inferred from the above that data analysts (based on the sample dataset) typically have a graduate eductation, with their more experienced counterparts considered to be Senior data analysts.  ","88e90b52":"### Data analyst Word Cloud\n<div id=\"dawc\"> \n\n<\/div>\n","67b7152c":"### Big Data Word Cloud\n\n<div id=\"bdwc\"> \n\n<\/div>\n","df67f181":"### Data Scientist Word Cloud \n\n<div id=\"dswc\"> \n\n<\/div>\n","59702e5a":"## N-gram Analysis\n\n<div id=\"Ngr\"> \n\n<\/div>","377303df":"# Introduction \n\nI recently had a chat with a friend of mine about *what defines a Data Scientist*. Given how much the term was thrown around and how much of a buzz word it's become, i thought it would be a good idea to tackle the question by exploring public datasets from Kaggle. \n\nTo this effect, I've used job postings from the US and the UK to understand what are the requirements for a Data Scientist. I will also be exploring what are the differences between similar occupations such as 'Data Analyst', 'Machine Learning Engineer' and 'Big Data Engineer', among others.\n\nAny comments, recommendations and advice on this kernel would be much appreciated!\n\n*Table of contents* \n\n*  [Data Preparation](#Prep)\n*  [Exploratory Analysis](#Exp)\n    * [Word Clouds](#WC) \n        * [Data Analyst Word Cloud](#dawc)\n        * [Data Scientist Word Cloud](#dswc)\n        * [Machine Learning Word Cloud](#mlwc)\n        * [Big Data Word Cloud](#bdwc)\n    * [N-gram analysis](#Ngr)\n        * [Data Analyst N-gram](#dang)\n        * [Data Scientist N-gram](#dsng)\n        * [Machine learning N-gram](#mlng)\n        * [Big Data N-gram](#bdng)\n* [Conclusion](#End)\n\n\n*Credits:*\n\nMost of the code has been readapted from a [previous kernel](https:\/\/www.kaggle.com\/spurryag\/beginner-attempt-at-nlp-workflow).","61f2e6ec":"### Machine Learning Positions N-gram Analysis\n\n<div id=\"mlng\"> \n\n<\/div>\n","e0d5f0f1":"The \"Big Data\" word cloud appears to be an engineering related role, rather than a typical business role. It seems to have element of analysis, in addition to helping architect data structures a firm. ","7ccea3c6":"### Data Scientist N-gram Analysis\n\n<div id=\"dsng\"> \n\n<\/div>\n","f57d6ba4":"The n-gram analysis for the \"Data Scientist\" position further appears to  that the role can is focused on using statistical techniques and machine learning models to analyse large datasets. It can be inferred that, similar to the \"Data Analyst\" position, the \"Data Scientist\" has to use skills across the fields of data mining, big data, analytics and machine learning.","e330c5f9":"The n-gram analysis for the \"Machine Learning\" positions reveal that they are indeed an engineering related role, with a degree in computer science being typically required. Additionally, it is also revealed to be a more specific role than its \"Data Scientist\" counterpart where terms such as deep learning, software development, language processing and artificial intelligence are used. ","6e48a898":"## Word Clouds \n<div id=\"WC\"> \n\n<\/div>","a09ed418":"### Big Data Positions N-gram Analysis\n\n<div id=\"bdng\"> \n\n<\/div>","ba4281b2":"The \"machine learning\" word cloud appears to be a position geared towards engineering and which has an element of seniority to it. As compared to the \"Data Scientist\" role which seems to be another senior role, the coding element appears to be more important for the \"Machine Learning\" job positions, given the \"engineer\" component in the wordcloud. ","9bdef517":"The \"Data scientist\" word cloud shows that this position seems to be more oriented towards business needs, rather than a typical engineering position,  and has very prominent team component (indicated by the word 'collaborate'). It might also be that the Data scientist leads teams (indicated by the word 'leading') and would thus be a senior position, as compared to the \"Data Analyst\" position which does not appear to have a fixed position in  hierarchy (senior or non-senior role).","2a29ebed":"# Data Preparation\n\n<div id=\"Prep\"> \n\n<\/div>\n\nThis step will involve converting the strings in the dataset to the appropriate data type for the analysis and removing certain words for ease.\n","bd22fc8c":"In summary, this analysis indicates that for the below positions, the folllowing appear to be hold:\n\n* Data Analyst positions - Graduate level education for an entry level position (relative to the other positions analysed in this kernel) which requires knowledge of data science, big data, analytics and machine learning. \n\n* Data Scientist positions- Focused towards meeting business needs and leading teams to meet the latter. It is tyically required to use statistical techniques and machine learning models to analyse large datasets. Similar to the \"Data Analyst\" position, the \"Data Scientist\" has to use skills across the fields of data mining, big data, analytics and machine learning.\n\n* Machine Learning positions -  Engineering focused role, with a degree in computer science being typically required. It appears to be more specific role than its \"Data Scientist\" counterpart where terms such as deep learning, software development, language processing and artificial intelligence are used. \n\n* Big Data positions -  Engineering roles which rely on using big data technologies (map reduce) and analytics. They seem to require a computer science related educated and seem to encompass some of the responsibilities of the \"Data Scientists\".\n\nFurther improvements to this kernel could be to:\n\n* Clean the descriptions to particularly outline which responsibilities and qualifications are required for each position. This would help to remove company related descriptions and focus on what actually is required of each position. ","c4b493c0":"### Machine Learning Word Cloud\n\n<div id=\"mlwc\"> \n\n<\/div>\n","57cc9c9c":"# Exploratory Analysis\n\n<div id=\"Exp\"> \n\n<\/div>\n\n\nGiven the NLP nature of the datasets, similar exploration methods will be applied to each dataset to unveil their distinct characteristics. This will include using visualisations such as:\n\n1) Word Clouds\n\nWord clouds can identify trends and patterns that would otherwise be unclear or difficult to see in a tabular format. Frequently used keywords stand out better in a word cloud. Common words that might be overlooked in tabular form are highlighted in larger text making them pop out when displayed in a word cloud.\n\n2) N-Gram (Unigram, Bigram and Trigram)\n\nAn n-gram is a contiguous sequence of n items from a given sample of text or speech. Different definitions of n-grams will allow for the identification of the most prevalent words\/sentences in the training data and thus help distinguish what comprises insincere and sincere questions.\n\nIt should be noted that prior to displaying individual words or sentences, the text will first be tokenized (based on a desired integer) and then put into a dataframe which will be used to construct side by side plots. Tokenization is, generally, an early step in the NLP process, a step which splits longer strings of text into smaller pieces, or tokens. Larger chunks of text can be tokenized into sentences, sentences can be tokenized into words, etc.","4d9ca911":"# Conclusion\n<div id=\"End\"> \n\n<\/div>","22de26ca":"### Data Analyst N-gram analysis\n\n<div id=\"dang\"> \n\n<\/div>\n","403e2884":"The n-gram analysis for the Big Data roles appear to confirm that they are engineering roles which rely on using big data technologies (map reduce) and analytics. They seem to require a computer science related educated and seem to encompass some of the responsibilities of the \"Data Scientists\"."}}