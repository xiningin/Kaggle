{"cell_type":{"e65874cd":"code","0844633d":"code","b5225f60":"code","3ae240cc":"code","77f01661":"code","02ee907f":"code","a9789cfd":"code","410dd1fa":"code","7368df92":"code","99b9e34e":"code","93cd8587":"code","e55320a4":"code","7ba1b69c":"code","5b728caf":"code","8cc7bef4":"code","f2f0e5e6":"code","9741caf6":"markdown","bc489e5e":"markdown"},"source":{"e65874cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0844633d":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dropout, Dense\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.optimizers import Adam\n\n%matplotlib inline\nplt.style.use('ggplot')","b5225f60":"train_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')   #Loads training data\ntest_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')     #Loads testing data","3ae240cc":"#Lets Get our features and labels\n\ny_train = train_df['label']\nX_train = train_df.drop('label', axis=1)","77f01661":"#preprocess our data\n\ndef preprocess_data(data):\n    processed_data = data.values.reshape(-1, 28,28, 1)\n    processed_data = processed_data \/ 255.0\n    \n    return processed_data\n\nX_train = preprocess_data(X_train)\ntest = preprocess_data(test_df)","02ee907f":"#make our labels\ny_train = to_categorical(y_train, num_classes=10)","a9789cfd":"fig = plt.figure(figsize=(10,10))\nax = fig.subplots(5, 5)\n\ncount = 0\nfor i in range(5):\n    for j in range(5):\n        ax[i,j].imshow(X_train[count].reshape(28, 28), cmap='gray')\n        count+=1       ","410dd1fa":"plt.figure(figsize=(8,6))\nsns.countplot(train_df.label.values)\nplt.show()","7368df92":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.3, random_state=42)","99b9e34e":"datagen = ImageDataGenerator(\n    horizontal_flip=False,\n    vertical_flip=False,\n    rotation_range = 20, \n    zoom_range=0.2,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n#     fill_mode='nearset'\n)\n\ndatagen.fit(X_train)","93cd8587":"def create_model():\n    model = tf.keras.models.Sequential()\n    \n    model.add(Conv2D(16, (3,3), strides=1, padding='same', activation='relu', input_shape=(28, 28,1), name='conv1'))\n    model.add(MaxPooling2D((2,2),strides=2, padding='same' ,name='pool1'))\n    \n    model.add(Conv2D(32, (3,3), strides=1, padding='same', activation='relu',name='conv2'))\n    model.add(MaxPooling2D((2,2),strides=2, padding='same' ,name='pool2'))\n    \n    model.add(Conv2D(64, (3,3), strides=1, padding='same', activation='relu',name='conv3'))\n    model.add(MaxPooling2D((2,2),strides=2, padding='same' ,name='pool3'))\n    \n    model.add(Conv2D(128, (3,3), strides=1, padding='same', activation='relu',name='conv4'))\n    model.add(MaxPooling2D((2,2),strides=2, padding='same' ,name='pool4'))\n    \n    model.add(Conv2D(264, (3,3), strides=1, padding='same', activation='relu',name='conv5'))\n    model.add(MaxPooling2D((2,2),strides=2, padding='same' ,name='pool5'))\n    \n    model.add(Flatten())\n    model.add(Dense(1024, name='Dense1', activation='relu'))\n    model.add(Dense(512, name='Dense2', activation='relu'))\n    model.add(Dense(10, name='Dense3', activation='softmax'))\n    \n\n    \n    model.compile(optimizer='adam',\n                 loss='categorical_crossentropy',\n                 metrics=['acc'])\n    return model","e55320a4":"model = create_model()\nmodel.summary()","7ba1b69c":"batch_size=128\nsteps_per_epoch = X_train.shape[0] \/\/ batch_size\nepochs=30\n\nhistory = model.fit(datagen.flow(X_train, y_train, batch_size=batch_size),\n                               validation_data = (X_val, y_val),\n                               epochs=epochs,\n                                steps_per_epoch = steps_per_epoch\n                             )","5b728caf":"epoch = [i for i in range(30)]\nfig = plt.figure(figsize=(20, 8))\n(ax1, ax2) = fig.subplots(1,2)\n\nax1.plot(epoch, history.history['acc'], color='r')\nax1.plot(epoch, history.history['val_acc'], color='b')\nax1.set_title(\"Train and Validation Accuracy\")\nax1.set_xticks(epoch)\nax1.set_xlabel('Epochs')\nax1.set_ylabel('Train and val Accuracy')\nax1.legend()\n\n\nax2.plot(epoch, history.history['loss'], color='r')\nax2.plot(epoch, history.history['val_loss'], color='b')\nax2.set_title(\"Train and Validation loss\")\nax2.set_xticks(epoch)\nax2.set_xlabel('Epochs')\nax2.set_ylabel('Train and val Loss')\nax2.legend()\n\nplt.show()","8cc7bef4":"val_predicted = model.predict_classes(X_val)\n\nnew_y_val_labels =  [] \n[new_y_val_labels.append(np.argmax(i)) for i in y_val ]\n\nconf_matrix = confusion_matrix(new_y_val_labels, val_predicted )\nplt.figure(figsize=(8,6))\nsns.heatmap(conf_matrix, annot=True, fmt='.0f')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show()","f2f0e5e6":"predicts = model.predict(test)\npredicts= np.argmax(predicts,axis = 1)\npredicts = pd.Series(predicts,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),predicts],axis = 1)\nsubmission.to_csv(\"submission.csv\",index=False)","9741caf6":"# Let's take look of some of the images we have.","bc489e5e":"### If you learn something from this notebook Upvote it. Suggestions are Welcome! "}}