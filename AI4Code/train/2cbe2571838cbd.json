{"cell_type":{"0b656f55":"code","be4cadc4":"code","81f1cfe9":"code","33770fc0":"code","94bdf8e9":"markdown"},"source":{"0b656f55":"# setup defaults\n\nimport numpy as np\nimport pandas as pd\npd.options.display.max_columns = 12\n# Disable warnings in Anaconda\nimport warnings\nwarnings.simplefilter('ignore')\n# We will display plots right inside Jupyter Notebook\n%matplotlib inline\nimport matplotlib.pyplot as plt\n# We will use the Seaborn library\nimport seaborn as sns\nsns.set()\n# Graphics in SVG format are more sharp and legible\n%config InlineBackend.figure_format = 'png'\n# Increase the default plot size\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 5, 4","be4cadc4":"def RunNormalization(original_data, name):\n    \n    norm_data = np.array(stats.boxcox(original_data)[0])\n    \n    original_data.sort()\n    norm_data.sort()\n    #print(type(norm_data))\n    df = pd.DataFrame()\n    df['norm'] = norm_data\n    df['orig'] = original_data\n\n    # plot both together to compare\n    fig, ax=plt.subplots(1, 2, sharey=True)\n\n    sns.distplot(original_data, ax=ax[0])\n    ax[0].set_title(\"Original Data (%s)\" % (name))\n    sns.distplot(norm_data, ax=ax[1])\n    ax[1].set_title(\"Normalized data\")\n\n\n    f = plt.figure()\n    plt.scatter(original_data, norm_data)\n    plt.xlabel('original (%s)' % (name))\n    plt.ylabel('normalized')\n\n    sns.jointplot('orig', 'norm',\n                  data=df, kind=\"kde\", color=\"g\");\n    \n    #test for normal distribution\n    k2, p = stats.normaltest(norm_data)\n    alpha = 0.05\n    print(\"p = {:g}\".format(p))\n    if p < alpha:  # null hypothesis: x comes from a normal distribution\n         print(\"NEGATIVE: The null hypothesis can be rejected\")\n    else:\n         print(\"POSITIVE: The null hypothesis cannot be rejected\")","81f1cfe9":"from scipy import stats\nnp.random.seed(42)\nsample_size = 500\n\noriginal_data = np.random.exponential(size = sample_size)\nRunNormalization(original_data, 'EXP')","33770fc0":"original_data = np.random.uniform(size = sample_size, low=10, high=42)\nRunNormalization(original_data, 'Uniform')","94bdf8e9":"## NORMALIZATION BOX-COX Sample"}}