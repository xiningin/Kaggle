{"cell_type":{"fe7ba036":"code","3f9752a1":"code","c6537821":"code","814c34ad":"code","a3a81046":"code","2deabd10":"code","eecd5a1e":"code","e1c45023":"code","d1e955f5":"code","4b0417a9":"markdown","e58734d7":"markdown","5248d1ca":"markdown","c91b31f5":"markdown","79dacc6d":"markdown","52508191":"markdown","0d83a9d9":"markdown","3e9be9f0":"markdown","0d9398e7":"markdown","4296cad4":"markdown"},"source":{"fe7ba036":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f9752a1":"#This will help us keep track of the submissions\nsub_name_list = ['dummy', 'mdabbert']\nscore_list = [] #We can keep the scores here\n\n#Put the submissions in dataframe form and add to a list.\nsub_list = []\ntemp_df = pd.read_csv(\"\/kaggle\/input\/dummy-sub-for-ufc-contest-12\/task-dummy.csv\")\nsub_list.append(temp_df)\n\ntemp_df = pd.read_csv(\"\/kaggle\/input\/submission-for-91920-ufc-contest\/mdabbert-9-19-20-submission.csv\")\nsub_list.append(temp_df)\n","c6537821":"results_df = pd.read_csv(\"\/kaggle\/input\/ultimate-ufc-dataset\/most-recent-event.csv\")\n\n#We only need the fighter names, odds, and winner\n\nresults_df = results_df[['R_fighter', 'B_fighter', 'R_ev', 'B_ev', 'Winner']]\ndisplay(results_df)","814c34ad":"#Returns a specific bet EV based on winning_ev and probability.\ndef get_bet_ev(ev, prob):\n    \n    return(ev*prob - (1-prob)*100)","a3a81046":"#Used to determine the bet of each fight.  We will use probabilities and the ev to \n#determine profitable bets\ndef get_bet(R_prob, B_prob, R_ev, B_ev):\n    red_ev = get_bet_ev(R_ev, R_prob)\n    blue_ev = get_bet_ev(B_ev, B_prob)\n    if red_ev > 0:\n        return('Red')\n    if blue_ev > 0:\n        return('Blue')\n    \n    return 'None'","2deabd10":"def get_profit(winner, bet, R_ev, B_ev):\n    if bet == 'None':\n        return 0\n    if (bet == 'Blue' and winner == 'Blue'):\n        return B_ev\n    if (bet == 'Red' and winner == 'Red'):\n        return R_ev\n    else:\n        return (-100)","eecd5a1e":"#Let's make a helper function to make this easier\n\ndef get_score(sub, results):\n#    display(sub)\n#    display(results)\n    #Let's merge the two dataframes\n    merge_df = pd.merge(sub, results)\n    #display(merge_df)\n    #We can get the proper bet by using a lambda function\n    merge_df['Bet'] = merge_df.apply(lambda x: get_bet(x['R_prob'],x['B_prob'],x['R_ev'],x['B_ev']), axis=1)\n    merge_df['Profit'] = merge_df.apply(lambda x: get_profit(x['Winner'], x['Bet'], x['R_ev'], x['B_ev']), axis=1)\n    display(merge_df)\n    return(sum(merge_df['Profit']))","e1c45023":"z = 0\nscore_list.append(get_score(sub_list[z], results_df))\nprint(f\"{sub_name_list[z]}'s bets saw a total profit of {score_list[z]}\")","d1e955f5":"z = 1\nscore_list.append(get_score(sub_list[z], results_df))\nprint(f\"{sub_name_list[z]}'s bets saw a total profit of {score_list[z]}\")","4b0417a9":"`Red` won 10 of 13 fights.  More `Red` wins is normally a good sign when it comes to model predictions","e58734d7":"Dummy had a bad night.  Losing 445 units on 10 bets.","5248d1ca":"# Submission #1: Dummy Submission\n\nThese are the results of the dummy submission.","c91b31f5":"# Open All Submissions and add to a list","79dacc6d":"# Submission #2: mdabbert's Submission","52508191":"# Iterate the submissions and see how everyone did!","0d83a9d9":"# Submissions\n\nThere are 2 submissions.  \n\n1. The dummy file (gives each fighter a .5 probability of winning. Therefore will bet every underdog with greater than +100 odds.)\n2. mdabbert's (my!) submission. A GaussianNB Classifier using the following features: ['B_Weight_lbs', 'B_Flyweight_rank', 'B_avg_TD_landed', 'B_Light Heavyweight_rank', 'B_Lightweight_rank', 'R_avg_TD_landed', 'R_Middleweight_rank', 'R_Height_cms', 'R_avg_SIG_STR_pct', 'B_age', 'R_longest_win_streak', 'lose_streak_dif', 'R_win_by_Decision_Majority', 'longest_win_streak_dif', 'avg_sub_att_dif', 'sig_str_dif', 'B_avg_SUB_ATT', 'R_win_by_TKO_Doctor_Stoppage', 'B_draw', 'R_win_by_Decision_Split', 'age_dif', 'R_odds']\n\n","3e9be9f0":"mdabbert won 7 bets and lost 5.  He picked two underdogs correctly and ended up 259.47 units on 12 total bets.","0d9398e7":"# Final Results\n\n* `dummy`: -445.00 units\n* `mdabbert`: +259.47 units\n\nmdabbert is the winner!","4296cad4":"# Purpose\n\nI am going to go through the task submissions for [Contest #12: UFC Fight Night Covington vs. Woodley](https:\/\/www.kaggle.com\/mdabbert\/ultimate-ufc-dataset\/tasks?taskId=2124)  and see what set of predictions was the most profitable (if any!)"}}