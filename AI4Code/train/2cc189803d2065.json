{"cell_type":{"f690f23e":"code","710badc1":"code","0d96093c":"code","0bdfdedd":"code","1f7ac32e":"code","3dbe6bdb":"code","856592bd":"code","b5c7de8d":"code","85f4ce43":"code","54dcb68b":"code","823241f6":"code","1d542f14":"code","2ef0dc54":"code","9cf431ee":"code","7568a23a":"code","19c4a3cf":"code","ad1bbe2d":"code","7ac4c8e9":"code","955920b4":"markdown","e84b978f":"markdown","56312802":"markdown","fa664b01":"markdown","9eeaa698":"markdown"},"source":{"f690f23e":"#libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","710badc1":"#importing dataset\ndataset=pd.read_csv('..\/input\/vehicle-dataset-from-cardekho\/car data.csv')\ndf=dataset.copy()\ndf.head()","0d96093c":"#shape of the dataset\ndf.shape","0bdfdedd":"#catgegories in categorial features\nfor feature in ['Fuel_Type', 'Seller_Type', 'Transmission']:\n    print(feature, df[feature].unique())","1f7ac32e":"#missing values\ndf.isnull().sum()","3dbe6bdb":"#converting the 'year' to number of years\nfrom datetime import date\ndf['Year'] = date.today().year - df['Year']","856592bd":"#dropping 'Car_Name'\ndf.drop('Car_Name', axis=1, inplace=True)","b5c7de8d":"#performing one hot encoding on categorical features\ndf=pd.get_dummies(data=df, columns=['Fuel_Type', 'Seller_Type', 'Transmission'], drop_first=True)\ndf.head()","85f4ce43":"#correlation\nplt.figure(figsize=(8,8))\nsns.heatmap(df.corr(), vmax=.8, square=True, cmap='BuPu', annot=True)","54dcb68b":"#outliers\nfor feature in ['Present_Price', 'Kms_Driven']:\n    df.boxplot(column=feature)\n    plt.show()","823241f6":"#handling outliers\n#since the features are not normally distributed I'll use IQR to handle outliers\n\n#Present_Price\nIQR = df.Present_Price.quantile(0.75) - df.Present_Price.quantile(0.25)\nLower_range = df.Present_Price.quantile(0.25) - (1.5*IQR)\nUpper_range = df.Present_Price.quantile(0.75) + (1.5*IQR)\n\ndf['Present_Price'] = np.where(df['Present_Price']>22, 22, df['Present_Price'])\n\n#Kms_Driven\nIQR = df.Kms_Driven.quantile(0.75) - df.Kms_Driven.quantile(0.25)\nLower_range = df.Kms_Driven.quantile(0.25) - (1.5*IQR)\nUpper_range = df.Kms_Driven.quantile(0.75) + (1.5*IQR)\n\ndf['Kms_Driven'] = np.where(df['Kms_Driven']>99417, 99417, df['Kms_Driven'])","1d542f14":"#checking outliers again\nfor feature in ['Present_Price', 'Kms_Driven']:\n    df.boxplot(column=feature)\n    plt.show()","2ef0dc54":"#Q-Q plot to check the distribution\nimport scipy.stats as stat\nimport pylab\n\ndef plot_data(df, feature):\n    plt.figure(figsize=(15,6))\n    plt.subplot(1,3,1)\n    sns.distplot(df[feature])\n    plt.title(feature)\n    plt.subplot(1,3,2)\n    stat.probplot(df[feature], dist='norm', plot=pylab)\n    plt.show()\n    print(df[feature].skew())","9cf431ee":"#plotting distribution\nplot_data(df, 'Kms_Driven')","7568a23a":"#minmaxscaler\nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\n\nfeatures_to_scale=[feature for feature in df.columns if feature not in ['Selling_Price']]\nscaler.fit(df[features_to_scale])\n\ndf = pd.concat([df[['Selling_Price']].reset_index(drop=True),\n                    pd.DataFrame(scaler.transform(df[features_to_scale]), columns=features_to_scale)],\n                    axis=1)","19c4a3cf":"#splitting dataset\nfrom sklearn.model_selection import train_test_split\n\nX=df.drop('Selling_Price', axis=1)\ny=df['Selling_Price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)","ad1bbe2d":"#model\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\n\nreg = RandomForestRegressor()\nreg.fit(X_train, y_train)\n\ny_pred = reg.predict(X_test)","7ac4c8e9":"#score\nfrom sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","955920b4":"***\n## **Feature Engineering**\n***","e84b978f":"***\n## **Feature Transformation**\n***","56312802":"***\n## **Feature Scaling**\n***","fa664b01":"***\n## **Model Creation**\n***","9eeaa698":"***\n## **Data Analysis**\n***"}}