{"cell_type":{"ad54efef":"code","384cf133":"code","2d1fc3c8":"code","af1a91cb":"code","cce3e8f8":"code","5f152a81":"code","86adbf06":"code","4f7776e6":"code","e1fcae6f":"code","65e57ba4":"code","16fc6348":"code","41f3e818":"code","6a9b6620":"code","729fc233":"code","9ddeec2f":"code","9a8b98fc":"code","f15c7c23":"code","8f1445dd":"code","ae112709":"code","9a83f42f":"code","a19a3436":"code","4c25562d":"code","cf112f8a":"code","91ead4e4":"code","9a3c8cc0":"code","ffb38db3":"code","9f8444ca":"code","b63dd182":"code","5f37df59":"code","36e44a92":"code","3a1547ea":"code","e56497fa":"code","80f24e3d":"code","5c42f5f3":"code","7cd55242":"code","cda758d5":"code","698f87c2":"code","3883ed78":"markdown","87ce5a6c":"markdown","a48fcd7a":"markdown","f5dd8b47":"markdown","748dc139":"markdown","c3cbd5c9":"markdown","ab967546":"markdown","c48bccc1":"markdown","11c51774":"markdown","10c590fd":"markdown","a197cfca":"markdown","2a5b399a":"markdown","4b2306ac":"markdown"},"source":{"ad54efef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport datetime\nimport collections\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","384cf133":"#read video_review.csv\ninjury_df = pd.read_csv('..\/input\/video_review.csv')","2d1fc3c8":"#count player activity and primary impact with the occurrence of concussions\ntackling_impact = pd.Series([0,0,0,0],index = ['Helmet-to-helmet', 'Helmet-to-body', 'Helmet-to-ground', 'Unclear'])\ntackled_impact = pd.Series([0,0,0,0],index = ['Helmet-to-helmet', 'Helmet-to-body', 'Helmet-to-ground', 'Unclear'])\nblocking_impact = pd.Series([0,0,0,0],index = ['Helmet-to-helmet', 'Helmet-to-body', 'Helmet-to-ground', 'Unclear'])\nblocked_impact = pd.Series([0,0,0,0],index = ['Helmet-to-helmet', 'Helmet-to-body', 'Helmet-to-ground', 'Unclear'])\n\nfor i in range(len(injury_df.index)):\n    act = injury_df.loc[i, 'Player_Activity_Derived']\n    imp = injury_df.loc[i, 'Primary_Impact_Type']\n    \n    if act == 'Tackling':\n        if imp == 'Helmet-to-body':\n            tackling_impact['Helmet-to-body'] += 1\n        elif imp == 'Helmet-to-helmet':\n            tackling_impact['Helmet-to-helmet'] += 1\n        elif imp == 'Helmet-to-ground':\n            tackling_impact['Helmet-to-ground'] += 1\n        else:\n            tackling_impact['Unclear'] += 1\n    elif act == 'Tackled':\n        if imp == 'Helmet-to-body':\n            tackled_impact['Helmet-to-body'] += 1\n        elif imp == 'Helmet-to-helmet':\n            tackled_impact['Helmet-to-helmet'] += 1\n        elif imp == 'Helmet-to-ground':\n            tackled_impact['Helmet-to-ground'] += 1\n        else:\n            tackled_impact['Unclear'] += 1\n    elif act == 'Blocking':\n        if imp == 'Helmet-to-body':\n            blocking_impact['Helmet-to-body'] +=1\n        elif imp == 'Helmet-to-helmet':\n            blocking_impact['Helmet-to-helmet'] +=1\n        elif imp == 'Helmet-to-ground':\n            blocking_impact['Helmet-to-ground'] +=1\n        else:\n            blocking_impact['Unclear'] +=1\n    elif act == 'Blocked':\n        if imp == 'Helmet-to-body':\n            blocked_impact['Helmet-to-body'] += 1\n        elif imp == 'Helmet-to-helmet':\n            blocked_impact['Helmet-to-helmet'] += 1\n        elif imp == 'Helmet-to-ground':\n            blocked_impact['Helmet-to-ground'] += 1\n        else:\n            blocked_impact['Unclear'] += 1\n\n#create dataframe\nact_impact = pd.DataFrame()\nact_impact['Tackling'] = tackling_impact\nact_impact['Tackled'] = tackled_impact\nact_impact['Blocking'] = blocking_impact\nact_impact['Blocked'] = blocked_impact","af1a91cb":"act_impact","cce3e8f8":"#visualize the dataframe above\nplt.rcParams['font.size'] = 14\nfig, ax = plt.subplots()\nim = ax.imshow(act_impact.values)\n\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Times', rotation=-90, va=\"bottom\")\n\nax.set_xticks(np.arange(4))\nax.set_yticks(np.arange(4))\nax.set_xticklabels(act_impact.columns)\nax.set_yticklabels(act_impact.index)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\nfor i in range(4):\n    for j in range(4):\n        text = ax.text(j, i, act_impact.values[i, j], ha=\"center\", va=\"center\", color=\"w\", fontweight='bold')\n\nax.set_title(\"Activity & Impact\")\nfig.tight_layout()\nplt.show()","5f152a81":"#Use NGS data and get them together\n\n#read NGS in 2016 and 2017\ndata2016_post = pd.read_csv('..\/input\/NGS-2016-post.csv')\ndata2016_pre = pd.read_csv('..\/input\/NGS-2016-pre.csv')\ndata2016_reg1 = pd.read_csv('..\/input\/NGS-2016-reg-wk1-6.csv')\ndata2016_reg2 = pd.read_csv('..\/input\/NGS-2016-reg-wk7-12.csv')\ndata2016_reg3 = pd.read_csv('..\/input\/NGS-2016-reg-wk13-17.csv')\n\ndata2017_post = pd.read_csv('..\/input\/NGS-2017-post.csv')\ndata2017_pre = pd.read_csv('..\/input\/NGS-2017-pre.csv')\ndata2017_reg1 = pd.read_csv('..\/input\/NGS-2017-reg-wk1-6.csv')\ndata2017_reg2 = pd.read_csv('..\/input\/NGS-2017-reg-wk7-12.csv')\ndata2017_reg3 = pd.read_csv('..\/input\/NGS-2017-reg-wk13-17.csv')","86adbf06":"#concat data for each year\ndata2016 = pd.concat([data2016_pre,data2016_reg1,data2016_reg2,data2016_reg3,data2016_post])\ndata2017 = pd.concat([data2017_pre,data2017_reg1,data2017_reg2,data2017_reg3,data2017_post])","4f7776e6":"#read player role\nrole = pd.read_csv('..\/input\/play_player_role_data.csv')\nrole = role.drop('Season_Year', axis = 1)","e1fcae6f":"#add \"player role\" column\ndata2016 = pd.merge(data2016,role,on=['GameKey','PlayID','GSISID'])\ndata2017 = pd.merge(data2017,role,on=['GameKey','PlayID','GSISID'])","65e57ba4":"#extract (GameKey, PlayID) list when punt receive or fair-catch was happened.\npuntPlay16_1 = data2016.query('Role==\"P\"').query('Event==\"punt\"')\npuntPlay16_2 = data2016.query('Role==\"PLS\"').query('Event==\"ball_snap\"')\npuntPlay16_3 = data2016.query('Role==\"PR\"').query('Event==\"punt_received\" or Event == \"fair_catch\"')\ngamePlay16_1 = [(i,j) for i,j in zip(puntPlay16_1.GameKey, puntPlay16_1.PlayID)]\ngamePlay16_2 = [(i,j) for i,j in zip(puntPlay16_2.GameKey, puntPlay16_2.PlayID)]\ngamePlay16_3 = [(i,j) for i,j in zip(puntPlay16_3.GameKey, puntPlay16_3.PlayID)]\ngamePlay16 = list(set(gamePlay16_1) & set(gamePlay16_2) & set(gamePlay16_3))","16fc6348":"puntPlay17_1 = data2017.query('Role==\"P\"').query('Event==\"punt\"')\npuntPlay17_2 = data2017.query('Role==\"PLS\"').query('Event==\"ball_snap\"')\npuntPlay17_3 = data2017.query('Role==\"PR\"').query('Event==\"punt_received\" or Event == \"fair_catch\"')\ngamePlay17_1 = [(i,j) for i,j in zip(puntPlay17_1.GameKey, puntPlay17_1.PlayID)]\ngamePlay17_2 = [(i,j) for i,j in zip(puntPlay17_2.GameKey, puntPlay17_2.PlayID)]\ngamePlay17_3 = [(i,j) for i,j in zip(puntPlay17_3.GameKey, puntPlay17_3.PlayID)]\ngamePlay17 = list(set(gamePlay17_1) & set(gamePlay17_2) & set(gamePlay17_3))","41f3e818":"#create defensive role list \ndefense_id = ['PDR1', 'PDR2', 'PDR3', 'PDL1', 'PDL2', 'PDL3', 'PLR', 'PLM', 'PLL', 'VRo', 'VRi', 'VLi', 'VLo', 'PR', 'PFB', 'VR', 'VL']","6a9b6620":"#A function that includes some features (number of rushing players, number of conrnerbacks, hang time, punt distance, fair-catch)\ndef punt_feature(game_key, play_id, df):\n    \n    #extract a specific play in a specific game\n    df0 = df.query('GameKey == \"%s\"'%game_key).query('PlayID == \"%s\"'%play_id)\n    \n    #extract each event (ball_snap, punt, punt_received, fair_catch, others)\n    df_snap = df0.query('Event == \"ball_snap\"').reset_index().drop('index', axis = 1)\n    df_punt = df0.query('Event == \"punt\"').reset_index().drop('index', axis = 1)\n    df_received = df0.query('Event == \"punt_received\"').reset_index().drop('index', axis = 1)\n    df_faircatch = df0.query('Event == \"fair_catch\"').reset_index().drop('index', axis = 1)\n    df_tackle = df0.query('Event == \"tackle\"').reset_index().drop('index', axis = 1)\n    df_out = df0.query('Event == \"out_of_bounds\"').reset_index().drop('index', axis = 1)\n    df_touchdown = df0.query('Event == \"touchdown\"').reset_index().drop('index', axis = 1)\n    df_submit = df0.query('Event == \"play_submit\"').reset_index().drop('index', axis = 1)\n    \n    #extract x of scrimage line\n    scrimage_x = df_snap.query('Role == \"PLS\"')['x'].values[0]\n    \n    #extract x of punt reterner at receiving\n    if df_received.shape[0] > 0:\n        pr_x = df_received.query('Role == \"PR\"')['x'].values[0]    \n    else:\n        pr_x = df_faircatch.query('Role == \"PR\"')['x'].values[0]\n        \n    #extract x of punt returner at play end\n    if df_tackle.query('Role == \"PR\"').shape[0] > 0:\n        pr_xe = df_tackle.query('Role == \"PR\"')['x'].values[0]\n    elif df_out.query('Role == \"PR\"').shape[0] > 0:\n        pr_xe = df_out.query('Role == \"PR\"')['x'].values[0]\n    elif df_touchdown.query('Role == \"PR\"').shape[0] > 0:\n        pr_xe = df_touchdown.query('Role == \"PR\"')['x'].values[0]\n    elif df_submit.query('Role == \"PR\"').shape[0] > 0:\n        pr_xe = df_submit.query('Role == \"PR\"')['x'].values[0]\n    else:\n        pr_xe = pr_x\n        \n    #calculate hang time\n    punt_time = datetime.datetime.strptime(df_punt.loc[0,'Time'], '%Y-%m-%d %H:%M:%S.%f')\n    if df_received.shape[0] > 0:\n        receive_time = datetime.datetime.strptime(df_received.loc[0,'Time'], '%Y-%m-%d %H:%M:%S.%f')\n        fair_count = 0\n    else:\n        receive_time = datetime.datetime.strptime(df_faircatch.loc[0,'Time'], '%Y-%m-%d %H:%M:%S.%f')\n        fair_count = 1\n    hang_time = (receive_time - punt_time).total_seconds()\n    \n    #calculate punt distance\n    punt_dist = abs(pr_x - scrimage_x)\n    #calculate return distance\n    return_dist = abs(pr_x - pr_xe)\n    \n    #count cornerbacks\n    CB_count = 0\n    for r in df_snap.Role:\n        if r in ['VRo', 'VRi', 'VLi', 'VLo', 'VR', 'VL']:\n            CB_count += 1\n        else:\n            CB_count += 0\n    \n    return [game_key,play_id,punt_dist,return_dist,hang_time,CB_count,fair_count]","729fc233":"#create dataframe that includes some features\npunt_feat16 = pd.DataFrame(index = ['GameKey', 'PlayID', 'PuntDist', 'ReturnDist','HangTime', 'CB', 'fair_catch'])\nfor i in range(len(gamePlay16)):\n    g_id = gamePlay16[i][0]\n    p_id = gamePlay16[i][1]\n    punt_feat16[i] = punt_feature(g_id,p_id,data2016)","9ddeec2f":"punt_feat17 = pd.DataFrame(index = ['GameKey', 'PlayID', 'PuntDist', 'ReturnDist','HangTime', 'CB', 'fair_catch'])\nfor i in range(len(gamePlay17)):\n    g_id = gamePlay17[i][0]\n    p_id = gamePlay17[i][1]\n    punt_feat17[i] = punt_feature(g_id,p_id,data2017)","9a8b98fc":"punt_feat16 = punt_feat16.T\npunt_feat17 = punt_feat17.T\npunt_feat16['Year'] = 2016\npunt_feat17['Year'] = 2017\npunt_feat = pd.concat([punt_feat16, punt_feat17])\npunt_feat.index = range(punt_feat.shape[0])","f15c7c23":"punt_feat.head()","8f1445dd":"#probability of fair-catch by the number of cornerbacks\nfairCatch_CB = pd.DataFrame(index = ['receive', 'fair_catch'])\nfor i in [2,3,4]:\n    fairCatch_CB[i] = [punt_feat.query('CB==\"%s\"'%i).query('fair_catch==0').shape[0], punt_feat.query('CB==\"%s\"'%i).query('fair_catch==1').shape[0]]\n    fairCatch_CB[i] = 100 * fairCatch_CB[i] \/ fairCatch_CB[i].sum()","ae112709":"fairCatch_CB","9a83f42f":"#Number of cornerbacks VS probability of fair-catch\nfairCatch_CB.T.plot.bar(stacked = True)\nplt.xlabel('Number of Cornerbacks')\nplt.ylabel('Probability of fair-catch [%]')\nplt.legend(['Receiving', 'Fair-catch'],loc = (1.01, 0.8))","a19a3436":"fair_ratio = np.array([punt_feat.query('fair_catch==0').shape[0], punt_feat.query('fair_catch==1').shape[0]])\nfair_ratio = fair_ratio \/ fair_ratio.sum()\nprint(100*fair_ratio[1])#probability of fair-catch in all punt play","4c25562d":"concussion_id = [(y,i,j) for y,i,j in zip(injury_df.Season_Year, injury_df.GameKey, injury_df.PlayID)]","cf112f8a":"punt_injury = pd.DataFrame()\nfor y, g, p in concussion_id:\n    df = punt_feat.query('Year==\"%s\"'%y).query('GameKey==\"%s\"'%g).query('PlayID==\"%s\"'%p)\n    punt_injury = pd.concat([punt_injury, df])","91ead4e4":"punt_injury.query('fair_catch==1')","9a3c8cc0":"injury_df.query('GameKey==\"%s\"'%280).query('PlayID==\"%s\"'%2918)\n# When a wing blocked a rusing player","ffb38db3":"injury_df.query('GameKey==\"%s\"'%506).query('PlayID==\"%s\"'%1988)\n# A returner showed fair-catch signal but he caught a one bounced ball and returned. Therefore this play should not be counted as fair-catch.","9f8444ca":"injury_df.query('GameKey==\"%s\"'%607).query('PlayID==\"%s\"'%978)\n# When a wing blocked a rusing player","b63dd182":"#calculate probability of the concussion by number of cornerbacks\ncb_count_all = collections.Counter(punt_feat.CB)\ncb_count_injury = collections.Counter(punt_injury.CB)\ninjuryRate_cb = pd.Series(index = [2, 3, 4])\nfor i in [2,3,4]:\n    injuryRate_cb[i] = 100 *cb_count_injury[i] \/ cb_count_all[i]","5f37df59":"injuryRate_cb","36e44a92":"injuryRate_cb.plot.bar(color = 'C2')\nplt.ylabel('Probability of concussion injury [%]')\nplt.xlabel('Number of cornerbacks')","3a1547ea":"100 * (injury_df.shape[0] - round(punt_feat.shape[0] * injuryRate_cb[2] \/ 100)) \/ injury_df.shape[0]","e56497fa":"# average punt distance (about 47 yards)\npunt_feat.PuntDist.mean()","80f24e3d":"# How punt distance effects fair-catch\nfair_puntDist = pd.Series(index = np.arange(20,65,5))\npuntDist_cb2 = pd.DataFrame(index = ['fair-catch','receive'])\nfor i in np.arange(20,65,5):\n    df = punt_feat[(punt_feat['PuntDist'] >= i) & (punt_feat['PuntDist'] < i + 5)]\n    fair0_count = df.query('CB==2').query('fair_catch==0').shape[0]\n    fair1_count = df.query('CB==2').query('fair_catch==1').shape[0]\n    \n    puntDist_cb2[i] = [fair1_count,fair0_count]\n    \n    if fair0_count == 0 and fair1_count == 0:\n        fair_puntDist[i] = 0\n    else:\n        fair_puntDist[i] = 100 * fair1_count \/ (fair0_count + fair1_count)\n        \nfair_puntDist.index = ['20-25','25-30','30-35','35-40','40-45','45-50','50-55','55-60','60-65']\npuntDist_cb2.columns = ['20-25','25-30','30-35','35-40','40-45','45-50','50-55','55-60','60-65']","5c42f5f3":"puntDist_cb2.T.plot.bar(stacked = True)\nplt.xlabel('Punt distance [yards]')\nplt.ylabel('Number of punt play [-]')\nplt.ylim(0,500)","7cd55242":"fair_puntDist.plot.bar(color = 'C0')\nplt.ylim(0,100)\nplt.xlabel('Punt distance [yards]')\nplt.ylabel('Probability of fair-catch [%]')","cda758d5":"# Return yards when punt distance is less than 50 yards under the conditions, two cornerbacks and no fair-catch\npunt_feat.query('CB==2').query('fair_catch==0').query('PuntDist<50').ReturnDist.mean()","698f87c2":"# Return yards when punt distance is more than 50 yards under the conditions, two cornerbacks and no fair-catch\npunt_feat.query('CB==2').query('fair_catch==0').query('PuntDist>=50').ReturnDist.mean()","3883ed78":"**Rule Change Suggestion**\n\n**1. Install \u201cTargeting rule\u201d like college football only in punt play.**\n\n* The \u201cTargeting rule\u201d we proposed, which is exactly same as that in college football, is applied only in punt play because kicking play has more potential risks of concussion than other normal plays.\n    \n**2. Install \u201cOne gunner on one cornerback rule\u201d.**\n\n* The offensive team (kicking team) must allocate one player outside the top of nurmerals on the playing field, whilst the defensive team (receiving team) must not allocate more than two players outside the top of nurmerals on the playing field.\n    \n**3. Install a new rule \u201cReceiving team can get 5 or 10 yards progress by fair-catch\u201d.**\n\n* Receiving team can get 5 yards progress by fair-catch. Moreover, if the kicked punt distance (from scrimmage line) is longer than 50 yards, more 5 yards progress (total 10 yards) is awarded to receiving team.","87ce5a6c":"Even though we regulate the number of the cornerbacks, we have some problems as follows.\n* This rule brings a disadvantage to the receiving team, because fair-catch will increase.\n* Fair-catch won't happen on the long distance punt. \n\nTo solve these problems, we suggested installing a new rule that the receiving team can get yards progress, which changes by the punt distance, by fair-catch. This new rule can give an advantage to the receiving team when making fair-catch, and accordingly increase fair-catch call. Moreover, with increasing progress yards by the punt distance, the receiving team would choose more fair-catch even on a long distance punt.\n\nWe analysed how the punt distance effects the probability of fair-catch **under two cornerback condition.**","a48fcd7a":"Some features causing concussion event were found as follows.\n* Almost same number of concussions were occurred during both tackling (or tackled) and blocking (or blocked): 19 times in tacking and tackled, 18 times in blocking and blocked.\n* Tacking with helmet-to-body is the worst case (8 times), and blocking with helmet-to-helmet is the second (5 times).\n* With reviewing the punt play video when the concussions were occurred, \n    - The concussed players blocked by an opponent with high speed were often attacked on their head from their blind side.\n    - The concussed tackling players often attacked to an opponent with high speed.\n    - The concussed tacked players were tackled on their head by an opponent with high speed.\n\nWe concluded that **high speed tackling and blocking aiming to the head or legs of an opponent** are the main reason for the occurrence of concussions. \n\nWe could avoid the concussions with helmet-to-helmet collision by installing \"Targeting rule\" like college football did. However, it is not good idea to prohibit to tackle on the legs of a punt returner because this rule change would increase the tackle aiming to the head or upper part of the body and also could increase the occurrence of concussions.\n\nBased on the result of this analysis, we have two idea to decrease the occurrence of concussions.\n\n**1. Intall \"Targeting rule\", which is exactly same as that in college football, only in punt play.**\n\n**2. Decrease punt return play. That is, increasing fair-catch.**","f5dd8b47":"We can see the probability of fair-catch decreases as the punt distance increases. On the punt play when the punt distance is over 50 yards punt, fair-catch was occurred by less than 30 %. Therefore we suggest changing the progress yards on whether the punt distance is over 50 yards or not, as follows.\n* The receiving team can get 5 yards progress by fair-catch on the condition that the punt distance is less than 50 yards.\n* The receiving team can get 10 yards progress by fair-catch on the condition that the punt distance is more than 50 yards.\n\nIn this suggestion, the punt distance means the distance between the scrimage line and the point where a punt returner catches a kicked ball.","748dc139":"**We started with EDA analysis and found what player activity and primary impact tends to cause concussions.**","c3cbd5c9":"**We found that fewer cornerbacks increases fair-catch: 34 % in all punt play, 50 % with two cornerbacks, 17 % with four cornerbacks.**\n\nThen, we analysed the correlation between number of cornerbacks and fair-catch in concussion plays.","ab967546":"**In conclusion, by regulating the number of cornerbacks (maximum 2 CB), a half of punt play would result in fair-catch and the occurrence of concussions in punt play would decrease by 40%.**","c48bccc1":"We're showing the analysis supporting our suggestion.","11c51774":"With regulating the number of cornerbacks, it becomes easier for the gunners to tackle a punt returner in high speed, and accordingly the tackled concussion risk would increase. In addition, a punt returner won't make fair-catch when the punt distance is long like over 50 yards. \n\nTherefore, **installing \"Targeting rule\" should play a significant role** to protect both the tackling gunners and the tackled punt returner.","10c590fd":"**The results showed that few concussions was occurred in fair-catch play (only two play when a wing did blocking a rushing player).**\n\nFinally, we revealed how much probability of the occurrence of concussions changes by number of cornerbacks. ","a197cfca":"For the first idea, we can only say \"Just do it\", but we have to consider how we increase fair-catch with rule cheange for the second idea.\n\n**From here, we analysed what features increase fair-catch in punt play.**","2a5b399a":"**Summary**\n\nSuggestion of rule changes\n\n1. Install \"Targeting rule\" like college football only in punt play.\n\n2. Install \"One gunner on one cornerbacks rule\"\n\n3. Install a new rule \u201cReceiving team can get 5 or 10 yards progress by fair-catch\u201d.\n\nEach rule change will reduce the occurrence of concussions to a certain extent. However, these rule change could interact with each other, therby have an big influence on reducing the occurrence of concussions in total.","4b2306ac":"**The result is that probability of concussion occurrence increases as the number of cornerbacks increases.**"}}