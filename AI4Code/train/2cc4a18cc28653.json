{"cell_type":{"8d0ad9ab":"code","0cee3948":"code","a1adab9e":"code","36168408":"code","e15a4ae8":"code","1fb41733":"code","4cb3c016":"code","ea50cfaf":"code","72afda0e":"code","8f2244b6":"code","198865bb":"code","39aa10e4":"code","f5de8e6f":"code","7c3b13ff":"code","fd704279":"code","f53c211f":"code","b209874c":"code","86ba05fe":"code","edbad949":"code","2864537c":"code","b18fc20e":"code","743cc785":"code","8b3b4452":"code","fafed2e4":"code","4a927870":"code","e23f1477":"code","d56c42cd":"code","a843bd8c":"code","65a961d2":"code","60abe1f4":"code","882185a3":"code","a5f495f6":"code","251d0237":"code","b0139866":"code","59987427":"code","11daf4d8":"code","9248778f":"code","787087a4":"code","2ad764b0":"code","64bee332":"code","ae224fd0":"code","8894d9d3":"code","2d9b1106":"code","5076fdcd":"code","f15b075e":"code","9fe0fb4b":"code","8fc29582":"code","f5542be3":"code","e60934cc":"code","a0d027dd":"code","29ed973e":"code","e9c71eb8":"code","005555ff":"code","f9306dc9":"code","f807988d":"code","97bbfef5":"markdown","f59e6256":"markdown","26b3fa0f":"markdown","11d4e9ee":"markdown","f1b86813":"markdown","1c0dfafc":"markdown","e5275634":"markdown","297280cc":"markdown","f2850a5b":"markdown","5cbcb4a0":"markdown","ff558b64":"markdown","84c982ac":"markdown","fbbff0cf":"markdown","08aa42b4":"markdown","9d9c6ea2":"markdown","7488598e":"markdown","b4fb3077":"markdown","4eb27f39":"markdown","1df3e280":"markdown","6159e23b":"markdown","5e4a5492":"markdown","414458b2":"markdown","bf241364":"markdown","23846211":"markdown","65e2b40e":"markdown","153ad4c1":"markdown","839fa9f8":"markdown"},"source":{"8d0ad9ab":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0cee3948":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')\n","a1adab9e":"train.info()\ntest.info()","36168408":"train.describe()","e15a4ae8":"train.head()","1fb41733":"train.isnull().sum()","4cb3c016":"train.isnull().count()","ea50cfaf":"total=train.isnull().sum()\nmissing_data_perc=(total\/train.isnull().count())*100\nmis_data=round(missing_data_perc.sort_values(ascending=False),1)\nmissing_data=pd.concat([total,mis_data],axis=1,keys=['Total','%'])\nmissing_data","72afda0e":"train.columns.values","8f2244b6":"survived='survived'\nnot_survived='not survived'\nfig,axes=plt.subplots(nrows=1,ncols=2,figsize=(9,4))\nwomen=train[train['Sex']=='female']\nmen=train[train['Sex']=='male']\nax=sns.distplot(women[women['Survived']==1].Age.dropna(),label=survived,ax=axes[0],kde=False)\nax=sns.distplot(women[women['Survived']==0].Age.dropna(),label=not_survived,ax=axes[0],kde=False)\nax.legend()\nax.set_title('Female')\nax=sns.distplot(men[men['Survived']==1].Age.dropna(),label=survived,ax=axes[1],kde=False)\nax=sns.distplot(men[men['Survived']==0].Age.dropna(),label=not_survived,ax=axes[1],kde=False)\nax.legend()\nax.set_title('Male')\n","198865bb":"sns.barplot(x='Pclass',y='Survived',data=train)\nprint('Percentage of Pclass=1 who survived is',train['Survived'][train['Pclass']== 1].value_counts(normalize=True)[1]*100) \nprint('Percentage of Pclass=2 who survived is',train['Survived'][train['Pclass']== 2].value_counts(normalize=True)[1]*100) \nprint('Percentage of Pclass=3 who survived is',train['Survived'][train['Pclass']== 3].value_counts(normalize=True)[1]*100) \n","39aa10e4":"sns.barplot(x='Sex',y='Survived',data=train)\nprint('Percentage of female who survived is',train['Survived'][train['Sex']=='female'].value_counts(normalize=True)[1]*100) \nprint('Percentage of male who survived is',train['Survived'][train['Sex']=='male'].value_counts(normalize=True)[1]*100)                        \n\n","f5de8e6f":"sns.barplot(x='SibSp',y='Survived',data=train)\nprint('Percentage of Sibsp=0 who survived is',train['Survived'][train['SibSp']==0].value_counts(normalize=True)[1]*100) \nprint('Percentage of Sibsp=1 who survived is',train['Survived'][train['SibSp']==1].value_counts(normalize=True)[1]*100) \nprint('Percentage of Sibsp=2 who survived is',train['Survived'][train['SibSp']==2].value_counts(normalize=True)[1]*100) \nprint('Percentage of Sibsp=3 who survived is',train['Survived'][train['SibSp']==3].value_counts(normalize=True)[1]*100) \nprint('Percentage of Sibsp=4 who survived is',train['Survived'][train['SibSp']==4].value_counts(normalize=True)[1]*100) \n","7c3b13ff":"sns.barplot(x='Parch',y='Survived',data=train)\nprint('Percentage of Parch=0 who survived is',train['Survived'][train['Parch']==0].value_counts(normalize=True)[1]*100) \nprint('Percentage of Parch=1 who survived is',train['Survived'][train['Parch']==1].value_counts(normalize=True)[1]*100) \nprint('Percentage of Parch=2 who survived is',train['Survived'][train['Parch']==2].value_counts(normalize=True)[1]*100) \nprint('Percentage of Parch=3 who survived is',train['Survived'][train['Parch']==3].value_counts(normalize=True)[1]*100) \n\n","fd704279":"train['Age']=train['Age'].fillna(-0.5)\ntest['Age']=test['Age'].fillna(-0.5)\nbins=[-1,0,5,12,17,25,35,60,np.inf]\nlabels=['Unknown','Baby','Child','Teenager','Student','Young Adult','Adult','Senior Citizen']\ntrain['Agegroup']=pd.cut(train['Age'],bins,labels=labels)\ntest['Agegroup']=pd.cut(train['Age'],bins,labels=labels)\n\nsns.barplot(x='Agegroup',y='Survived',data=train)","f53c211f":"train['Cabin_b']=train['Cabin'].notnull().astype('int')\ntest['Cabin_b']=test['Cabin'].notnull().astype('int')\n\nprint('Percentage of people of Cabin = 1 who survived is',train['Survived'][train['Cabin_b']==1].value_counts(normalize=True)[1]*100)\nprint('Percentage of people of Cabin = 0 who survived is',train['Survived'][train['Cabin_b']==0].value_counts(normalize=True)[1]*100)\n","b209874c":"sns.barplot(x='Cabin_b',y='Survived',data=train)","86ba05fe":"train.columns\n","edbad949":"test.columns","2864537c":"train=train.drop(['Cabin'],axis=1)\ntest=test.drop(['Cabin'],axis=1)","b18fc20e":"train=train.drop(['Ticket'],axis=1)\ntest=test.drop(['Ticket'],axis=1)","743cc785":"train=train.drop(['Fare'],axis=1)\ntest=test.drop(['Fare'],axis=1)","8b3b4452":"print('No. of people embarked from S :',train[train['Embarked']=='S'].shape[0])\nprint('No. of people embarked from C :',train[train['Embarked']=='C'].shape[0])\nprint('No. of people embarked from Q :',train[train['Embarked']=='Q'].shape[0])","fafed2e4":"train['Embarked']=train['Embarked'].fillna('S')","4a927870":"test['Embarked']=test['Embarked'].fillna('S')","e23f1477":"train.isnull().sum()","d56c42cd":"test.isnull().sum()","a843bd8c":"train.info()","65a961d2":"train=train.drop(['Name'],axis=1)\ntest=test.drop(['Name'],axis=1)","60abe1f4":"train.info()","882185a3":"test.info()","a5f495f6":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()","251d0237":"train['Sex']=le.fit_transform(train['Sex'])\ntrain['Embarked']=le.fit_transform(train['Embarked'])\ntrain['Agegroup']=le.fit_transform(train['Agegroup'].cat.codes)","b0139866":"test['Sex']=le.fit_transform(test['Sex'])\ntest['Embarked']=le.fit_transform(test['Embarked'])\ntest['Agegroup']=le.fit_transform(test['Agegroup'].cat.codes)","59987427":"train.info()","11daf4d8":"test.info()","9248778f":"train.head()","787087a4":"test.head()","2ad764b0":"trainn=train.drop(['Age'],axis=1)\ntestn=test.drop(['Age'],axis=1)","64bee332":"trainn.info()","ae224fd0":"testn.info()","8894d9d3":"X_train=trainn.drop(['PassengerId','Survived'],axis=1)\ny_train=trainn['Survived']\nX_test=testn.drop(['PassengerId'],axis=1)\n\n","2d9b1106":"X_train.shape","5076fdcd":"y_train.shape","f15b075e":"X_test.shape","9fe0fb4b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nLR=LogisticRegression()\nLR.fit(X_train,y_train)\ny_pred=LR.predict(X_test)\nacc_logi=accuracy_score(y_train,LR.predict(X_train))*100\nprint('Accuracy is',acc_logi)\n","8fc29582":"y_pred.shape","f5542be3":"from sklearn.tree import DecisionTreeClassifier\nclf=DecisionTreeClassifier(criterion='entropy',min_samples_split=100)\nclf.fit(X_train,y_train)\ny_pred=clf.predict(X_test)\nacc_dec=accuracy_score(y_train,clf.predict(X_train))*100\nprint('Accuracy is',acc_dec)\n","e60934cc":"from sklearn.ensemble import RandomForestClassifier\nrf=RandomForestClassifier(n_estimators=100)\nrf.fit(X_train,y_train)\ny_pred=rf.predict(X_test)\nacc_ran=accuracy_score(y_train,rf.predict(X_train))*100\nprint('Accuracy is',acc_ran)\n","a0d027dd":"from sklearn.svm import SVC\nsv=SVC()\nsv.fit(X_train,y_train)\ny_pred=sv.predict(X_test)\nacc_svm=accuracy_score(y_train,sv.predict(X_train))*100\nprint('Accuracy is',acc_svm)","29ed973e":"from sklearn.neighbors import KNeighborsClassifier\nknc=KNeighborsClassifier(n_neighbors=4,weights='uniform',algorithm='auto',leaf_size=30)\nknc.fit(X_train,y_train)\ny_pred=knc.predict(X_test)\nacc_knn=accuracy_score(y_train,knc.predict(X_train))*100\nprint('Accuracy is',acc_knn)","e9c71eb8":"from sklearn.naive_bayes import GaussianNB\nnb=GaussianNB()\nnb.fit(X_train,y_train)\ny_pred=nb.predict(X_test)\nacc_nb=accuracy_score(y_train,nb.predict(X_train))*100\nprint('Accuracy is',acc_nb)","005555ff":"accu_score=pd.DataFrame({'Model':['Logistic Regression','Decision Tree','Random Forest','KNN','Support Vector Machine',\n                        'Naive Bayes'],\n                         'Accuracy' :[acc_logi,acc_dec,acc_ran,acc_knn,acc_svm,acc_nb]\n                          })\naccu_score=accu_score.sort_values(by='Accuracy',ascending=False)\nprint('Accuracies are :',accu_score)","f9306dc9":"submission=pd.DataFrame({'PassengerId' :test['PassengerId'],\n                         'Survived' : y_pred    \n})","f807988d":"#submission.to_csv('..\/input\/submission\/submission.csv',index=False)","97bbfef5":"Naive Bayes","f59e6256":"Cabin","26b3fa0f":"Support Vector","11d4e9ee":"KNN","f1b86813":"Pclass and Survived","1c0dfafc":"Getting the data","e5275634":"Sibsp and Survived","297280cc":"Random Forest","f2850a5b":"Ticket","5cbcb4a0":"Babies are high rate of survival.","ff558b64":"This shows that women have high prob of survival.Women between 14-40 of age has highest survival rate and men of age 17-35 have highest survival rate.Infants also have high survival rate.","84c982ac":"Graph between age and sex","fbbff0cf":"Clearly shows that a person belongs to class 1 has higher rate of survival.","08aa42b4":"It shows female have higher survival rate than male.","9d9c6ea2":"Fare","7488598e":"Now we will find what percent of missing data ","b4fb3077":"Here maximum no. of people are from S .So we replace missing place with S.","4eb27f39":"Here what I have done is transforming object & category type of variable into numeric.Category type variable is transformed using cat.codes .","1df3e280":"We can see,there is no missing values.","6159e23b":"Embarked","5e4a5492":"Age","414458b2":"It says less no. of sibling or spouse , more chances of survival.","bf241364":"Cabin","23846211":"Splitting the data","65e2b40e":"Logistic Regression","153ad4c1":"Decision Tree","839fa9f8":"Parch (Parents or children) with less than or equal to 3 has higher suurvival rate."}}