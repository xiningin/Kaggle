{"cell_type":{"42de97c5":"code","064ea48b":"code","20385332":"code","8e5c178d":"code","203ea5a0":"code","946c9cc2":"code","54b6f5e4":"code","fd0cf2a9":"code","573973ca":"code","cf517f99":"code","151a8f2b":"code","58444708":"code","6d29c343":"code","7b3a4cbf":"code","caf5f56d":"code","aa624c5c":"code","b3efb911":"code","44bcf850":"code","831ca638":"code","ed693390":"code","d34124c3":"code","01b2e0c0":"code","9bfd5909":"markdown","afbbe22d":"markdown","e1b51b30":"markdown","0b0b8875":"markdown","a92c6f13":"markdown","8969a741":"markdown","845e83f5":"markdown","7fead364":"markdown","3041d27c":"markdown","deda4cc3":"markdown","9ce3475e":"markdown","03ac59f8":"markdown","f778ac70":"markdown","c84811a8":"markdown","b06a395b":"markdown"},"source":{"42de97c5":"import os, sys, re, time\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pathlib import Path, PosixPath\nfrom IPython.display import HTML, display\n\nCSV_PATH = Path(f'..\/input\/meta-kaggle')\nNA_HTML = '<font color=#c0c0c0>?<\/font>'  # grey '?' means N\/A\nNROWS = 30_000_000 #\u00a0due to KernelVersionOutputFiles.csv","064ea48b":"plt.rc(\"figure\", figsize=(12, 9))\nplt.rc(\"font\", size=14)\n\n\n# Could use DataFrame.style but it would interpret forum message html.\n# (ForumMessages.Message Field)\n# I want to show that field has raw html...\ndef df_to_html(df):\n    nan_str = '__missing_value_na__'\n    html = df.to_html(na_rep=nan_str, notebook=True)\n    # to_html escapes html chars, so do a replacement afterwards\n    html = html.replace(nan_str, NA_HTML)\n    return html\n\n\ndef make_stats(df: pd.DataFrame):\n    stats = df.describe(include='all').T\n    stats['count'] = stats['count'].astype(int)\n    if 'freq' not in stats.columns:\n        stats.insert(1, 'freq', np.nan)\n    if 'top' not in stats.columns:\n        stats.insert(1, 'top', np.nan)\n    if 'unique' not in stats.columns:\n        stats.insert(1, 'unique', np.nan)\n    stats['unique'] = df.nunique()\n    stats.insert(0, 'dtype', df.dtypes)\n    # add 'top' and 'freq' for numerical columns too\n    for c in df.select_dtypes(['number', bool]).columns:\n        vc = df[c].value_counts(dropna=False)\n        # only show if truly most frequent\n        if vc.values[0] > 1:\n            stats.loc[c, 'top'] = vc.index[0]\n            stats.loc[c, 'freq'] = vc.values[0]\n    return stats\n\n\n# Shows stats and a small sample of a DataFrame loaded from CSV.\n# Works on any CSV file, not just Meta Kaggle.\ndef preview(csv: PosixPath):\n    name = csv.with_suffix(\"\").name\n    df = pd.read_csv(csv, nrows=NROWS, low_memory=False, dtype={'Id': 'int32'})\n    stats = make_stats(df)\n    lines = []\n    write = lines.append\n    write(f'<h1 id=\"{name}\">{name}<\/h1>')\n    write(f'<h2>Stats<\/h2>')\n    write(f'<p>Rows: {df.shape[0]}')\n    write(f'<br\/>Columns: {df.shape[1]}')\n    write(f'<br\/>Memory usage: {df.memory_usage().sum()\/(1024**2):,.3f} Mb')\n    write(df_to_html(stats))\n    write(f'<h2>{name} &mdash; Sample<\/h2>')\n    write(df_to_html(df.sample(n=5, random_state=42).T))\n    write(f'<hr\/>')\n    display(HTML('\\n'.join(lines)))","20385332":"def list_all_ids(csv: PosixPath):\n    df = pd.read_csv(csv, nrows=5)\n    name = csv.with_suffix('').name\n    print()\n    for c in df.columns:\n        if 'Id' in c:\n            print(f'{name} : {c}')","8e5c178d":"csvs = sorted(CSV_PATH.glob('*.csv'))","203ea5a0":"!ls -l {CSV_PATH}","946c9cc2":"!wc -l {CSV_PATH}\/*.csv","54b6f5e4":"for csv in csvs:\n    list_all_ids(csv)","fd0cf2a9":"for csv in csvs:\n    preview(csv)","573973ca":"5960127 \/ 6.42404e+06","cf517f99":"1 - 5960127 \/ 6.42404e+06","151a8f2b":"userAchievements = pd.read_csv(CSV_PATH \/ 'UserAchievements.csv')\nuserAchievements.shape","58444708":"userAchievements['TierAchievementDate'] = pd.to_datetime(\n    userAchievements['TierAchievementDate'], format=\"%m\/%d\/%Y\", cache=True)","6d29c343":"userAchievements.tail()","7b3a4cbf":"userAchievements.query(\"CurrentRanking<=100\").groupby(\"AchievementType\").size()","caf5f56d":"userAchievements.query(\"Points==0\").groupby(\"AchievementType\").size()","aa624c5c":"colors = {'Competitions':'r', 'Discussion':'g', 'Scripts':'b'}","b3efb911":"userAchievements['Color'] = userAchievements['AchievementType'].map(colors)","44bcf850":"df = userAchievements#.sample(n=50000).sort_index()\ndf.shape","831ca638":"pargs = dict(c=df.Color, s=1, alpha=0.3);","ed693390":"df.plot.scatter('Id', 'UserId', title='UserIds in UserAchievements', **pargs);","d34124c3":"df.plot.scatter('Id', 'TierAchievementDate', title='TierAchievementDates in UserAchievements', **pargs);","01b2e0c0":"df.plot.scatter('TierAchievementDate', 'UserId', title='TierAchievementDates in UserAchievements', **pargs);","9bfd5909":"When a newer date does appear in the file it is for an older user","afbbe22d":"Literally last TierAchievementDate value in *file* is 2019-10-18","e1b51b30":"# UserAchievements - Users Missing\n\nThe previews above demonstrate another [issue](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle\/discussion\/181048):\n\nThe maximum `UserId` in `UserAchievements.csv` is 3.88282e+06.\n\nIn `Users.csv` there are 5960127 unique Ids and the max Id is 6.42404e+06.\n\nIt suggests ~7% of users have been removed or deleted their accounts?","0b0b8875":"# Anomolies\n\n2020-12-23: Kaggle has fixed the ForumMessageVotes duplicate entries problem! (See [version 3][1])\n\n[1]: https:\/\/www.kaggle.com\/jtrotman\/meta-kaggle-preview-csv-files?scriptVersionId=47238482","a92c6f13":"***Many*** fairly useless rows? If points are zero they could be left out to save storage space...","8969a741":"# File Listing\n\nSee the file sizes and dates.","845e83f5":"Not all the top 100 users are there","7fead364":"# Meta Kaggle - Preview CSV Files\n\nAn index of the CSV files in the [Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle) dataset. I use this as a reference to work out how to match up information from different files.\n\nWith smaller datasets you might want to try [Pandas Profiling](https:\/\/pandas-profiling.github.io\/pandas-profiling\/docs\/master\/index.html) but it would take much more time than this notebook to run on [Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle) dataset. This is a lightweight simpler version.\n\n\n## Notes\n\nAll files have `Id` as the first column. Where `Id` appears in a column name it generally refers to a guessable `Id` column of another file. For example `Id` in `Users.csv` is referred to by these other files (file name : column name):\n\n - DatasetVersions : CreatorUserId\n - DatasetVotes : UserId\n - Datasets : CreatorUserId\n - Datasets : OwnerUserId\n - Datasources : CreatorUserId\n - ForumMessageVotes : FromUserId\n - ForumMessageVotes : ToUserId\n - ForumMessages : PostUserId\n - KernelVersions : AuthorUserId\n - KernelVotes : UserId\n - Kernels : AuthorUserId\n - Submissions : SubmittedUserId\n - TeamMemberships : UserId\n - UserAchievements : UserId\n - UserFollowers : UserId\n - UserFollowers : FollowingUserId\n - UserOrganizations : UserId\n\n*Notebooks* were previously called *Kernels*, and before that *Scripts* so `ScriptId` in *KernelVersions* actually refers to the `Id` in the `Kernels` table.\n\nEssentially: `ScriptId` in *KernelVersions* can be renamed `KernelId`.\n\n## Tips\n\nChange the constants in the first cell and you can adapt this notebook to create an index listing any set of csv files.","3041d27c":"# All CSVs\n\nHere are previews of the tables.","deda4cc3":"Newer dates *are* in there","9ce3475e":"# Line Counts\n\nIncluding header row. Beware some files may have multi-line (quoted) fields. KernelVersionOutputFiles.csv is **huge**!","03ac59f8":"# Further Observations\n\nWhy so many user exclusions? Perhaps one reason: in [version 1][1] the sample shown of the Organizations table has two genuine rows but three rows of hacking attempts and\/or spam that shows why the *Organizations* feature was disabled. *Life, uhh... finds a way*.\n\n[1]: https:\/\/www.kaggle.com\/jtrotman\/meta-kaggle-preview-csv-files?scriptVersionId=42387571","f778ac70":"# Id Scheme\n\nThese are the `Id` columns of each file; first one refers to the entity in the file itself, other `Id`'s are references to other entities (usually in other files):","c84811a8":"It appears that new `UserId`s are added on the end","b06a395b":"So essentially, just users with an ID over 3882819 are missing, apparently all new users since: 2019-10-18"}}