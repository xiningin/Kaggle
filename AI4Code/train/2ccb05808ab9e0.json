{"cell_type":{"786c5f76":"code","a7a18f13":"code","e00c27f6":"code","3ac52fa7":"code","1fd77c87":"code","e06b7931":"code","5ea28e46":"code","96be333f":"code","6768cf60":"code","ddd45c95":"code","256e9e3e":"code","2767074e":"code","f89dd17d":"code","ed410712":"code","91a72f83":"code","ac499535":"code","ded08cb5":"code","4c58aff9":"code","2816855d":"code","c6bd6324":"code","2558e066":"code","854ca012":"code","de96bef1":"code","536ad6b1":"code","22d5c170":"code","11c0532a":"code","0bde0101":"code","bb5b2c66":"code","aef41747":"code","4c8b7f5c":"code","5d70d9ae":"code","ee7a3645":"code","56994eda":"code","0130d25d":"code","b5b8500c":"code","caa5f10e":"code","4cefbf94":"code","dbbd302f":"code","da0e8833":"code","a2dcbaf8":"code","d52907c1":"code","e6febef0":"code","75e36042":"code","9535eb6f":"code","f1b25d9c":"code","6ce1aaa0":"code","3e029b8a":"code","a5dbdd24":"code","2b015c33":"code","9bbf8d40":"code","10271839":"code","2e792cdc":"code","ec902565":"code","87a2ba59":"code","533e56e4":"code","b1618f6f":"code","a8190921":"code","3adb3e6e":"code","a845c329":"code","e3dc0755":"code","7978bd7d":"code","4baf599f":"code","f352b096":"code","e63b7c26":"code","4803f581":"code","cfb7e67d":"code","66ae6275":"code","8c926bdf":"code","9b8fd767":"code","068a16b8":"code","c9e593aa":"code","d54978c9":"code","c70789a3":"code","e683c079":"code","dc7ee5b4":"code","993a2d37":"code","69b39477":"code","efe85ba7":"code","dd42078b":"code","bc2cfa51":"code","98f80db6":"code","95f4df83":"code","e1c935a4":"code","a50cff78":"code","e199525c":"code","971d8411":"code","157a0798":"code","2b04e63a":"code","b7ba8618":"code","2cfb33d6":"code","fb5828a0":"code","8e35884b":"code","2d0102dc":"code","b9ff1648":"code","f91d4a43":"code","1c6fc379":"code","4737fd3e":"code","99a28296":"code","bb6b8512":"code","1d344785":"code","66ac39ec":"code","17fbf5ba":"code","bb76948b":"code","141369e3":"code","95155a70":"code","30a0f279":"code","40afdc72":"code","c01c6545":"code","234c16dc":"code","bc6dd706":"code","d0ddb5db":"code","44a17bca":"code","90e7c4de":"markdown","6572cf5d":"markdown","ebab2b26":"markdown","4da050dd":"markdown","56a42367":"markdown","4bb0a890":"markdown","96fdfade":"markdown","d00c9ad7":"markdown","f3133381":"markdown","f9de117e":"markdown","26db87af":"markdown","e39173f8":"markdown","524cb5dc":"markdown","0622fc8a":"markdown","a7e2a12f":"markdown","38261ca2":"markdown","888d6e0b":"markdown","32ffe5c4":"markdown","c1f75a0c":"markdown","28479d57":"markdown","4a1af292":"markdown","0f4fa128":"markdown","7f617c3e":"markdown","a0c59feb":"markdown","1740bc36":"markdown","91cfa125":"markdown","b0494b6e":"markdown","ba5d1a3d":"markdown","16147e31":"markdown","88cb6158":"markdown","d3c58844":"markdown","7cfab85f":"markdown","7e8a19d2":"markdown","cfc70e70":"markdown","cbabccd7":"markdown","da0603a3":"markdown","aae3e0dd":"markdown","2519361a":"markdown","f98b37e4":"markdown","94bd1de2":"markdown","2bbe84a8":"markdown","66cf763c":"markdown","aaf5336f":"markdown","3f0b600b":"markdown","674c57e5":"markdown","187ecdad":"markdown","f90d9a38":"markdown","7dc8b601":"markdown","e9d82573":"markdown","d159ce19":"markdown","f8f51b39":"markdown","402e0b32":"markdown","5fd09163":"markdown","c08f6271":"markdown","76ab5139":"markdown","41acfa99":"markdown","fe5cdb38":"markdown","a72d58de":"markdown","b444a318":"markdown","44866603":"markdown","14e1edbb":"markdown","af31d9d2":"markdown","ad32fba5":"markdown","70b60a78":"markdown","21b1fc4c":"markdown","6fcf7bd4":"markdown","b6775c36":"markdown","47dc87bc":"markdown","8f621df5":"markdown","cbd43bfc":"markdown","cabfc300":"markdown","f362d004":"markdown","57d0172e":"markdown","9bc1fa72":"markdown"},"source":{"786c5f76":"import pandas as pd #\ud310\ub2e4\uc2a4 \uc784\ud3ec\ud2b8\nimport numpy as np # \ub118\ud30c\uc774 \uc784\ud3ec\ud2b8 \nimport seaborn as sns # \uc2dc\uac01\ud654\ud234 \uc2dc\ubcf8 \uc784\ud3ec\ud2b8 \nimport matplotlib.pyplot as plt # \uc2dc\uac01\ud654 \ub9f7\ud50c\ub78f\ub9bd \uc784\ud3ec\ud2b8\n%matplotlib inline\n%config InlineBackend.figure_format='retina'#\uc2dc\uac01\ud654 \ud654\uc9c8 \uac1c\uc120, \ub808\ud2f0\ub098\nplt.rc('font', family='AppleGothic') # \uc2dc\uac01\ud654 \ud55c\uae00\uae68\uc9d0 \ubc29\uc9c0 \nplt.rcParams['axes.unicode_minus'] = False # \uc2dc\uac01\ud654 \uc22b\uc790 \ub9c8\uc774\ub108\uc2a4 \ud45c\uc2dc \uae68\uc9d0 \ubc29\uc9c0 \nimport warnings\nwarnings.filterwarnings(\"ignore\") # \uc2dc\uac01\ud654\uc2dc \uadf8\ub798\ud504\ub97c \ubcc0\uc218\ud560\ub2f9\ud558\uc9c0 \uc54a\uc73c\uba74 \uc6cc\ub2dd\uba54\uc138\uc9c0\uac00 \ub9ce\uc774 \ub730\ub54c\uac00 \ub9ce\uc740\ub370 (\uadf8\ub8f9\ubc14\uc774\/\ud53c\ubd07 \uc0ac\uc6a9 \ub9ce\uc774 \ud587\uc744\ub584) \ubb34\uc2dc\npd.options.display.float_format = '{:.2f}'.format #suppresses the scientific notation, e \ub85c \uacc4\uc0b0\ub418\ub294 \uac83 \uc2e4\uc218\ud654 ","a7a18f13":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e00c27f6":"import os\nos.listdir(\"..\/input\/2021-immba-coding-workshop\")","3ac52fa7":"df_train = pd.read_csv(\"..\/input\/2021-immba-coding-workshop\/train.csv\")\ndf_train.info()","1fd77c87":"df_test = pd.read_csv(\"..\/input\/2021-immba-coding-workshop\/test.csv\")\ndf_test.info()","e06b7931":"pd.read_csv(\"..\/input\/2021-immba-coding-workshop\/sample_submission.csv\")","5ea28e46":"pd.options.display.max_columns = 30 #\uce7c\ub7fc\uc774 30\uac1c\uae4c\uc9c0 \uc0dd\ub7b5\ub418\uc9c0 \uc54a\ub3c4\ub85d \ndf_train.head()","96be333f":"df_test.head()","6768cf60":"set(df_train.columns) - set(df_test.columns)","ddd45c95":"df_train.describe([0.25, 0.5, 0.75, 0.99]) # describtion \ubcf4\uae30","256e9e3e":"# \uc804\uccb4 \ubcc0\uc218\uc5d0 \ub300\ud55c \ud788\uc2a4\ud1a0\uadf8\ub7a8 \uadf8\ub824 \ube48\ub3c4 \ubcf4\uae30 (\ub9c9\ub300\uc218 \uc81c\ud55c))\n# \uc785\ub825\ubcc0\uc218\ub97c \uba85\ubaa9\ud615\/\uc5f0\uc18d\ud615 \uad6c\ubd84\ud574\ubcf4\uae30\n\ntrain_hist = df_train.hist(figsize = (15,20), bins = 50)\ntrain_hist","2767074e":"# \uc804\uccb4\uceec\ub7fc\uba85 \ub9ac\uc2a4\ud2b8\ud654 \ncol_names = df_train.columns.to_list()\nprint(col_names )","f89dd17d":"# \ubd84\ud3ec\ub97c \ud1b5\ud574 \ubc94\uc8fc\ud615\/\uc5f0\uc18d\ud615 \ubcc0\uc218 \uad6c\ubd84 \n# \ubc94\uc8fc\ud615 \uceec\ub7fc\uba85 \ub530\ub85c \ubb36\uae30 (\uc774\ud6c4 \ucd94\uac00\ub41c 'done_renovation' \uceec\ub7fc\uae4c\uc9c0 \ub123\uc5b4\uc90c)\nlst_col_1 = ['date','bedrooms', 'bathrooms','floors', 'waterfront', \n                   'view', 'condition', 'grade']\nlst_col_2 = ['sqft_living', 'sqft_lot','sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', \n             'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15', 'price']\n\nprint(len(lst_col_1))\nprint(len(lst_col_2))","ed410712":"# \"ID\" \uc0ad\uc81c \ndf_train.drop(\"id\", axis = 1, inplace = True)\ndf_test.drop(\"id\", axis = 1, inplace = True)\n","91a72f83":"# \ud655\uc778 \nprint(df_train.shape)\nprint(df_test.shape)","ac499535":"train_num = df_train[lst_col_2]\nfig,axs = plt.subplots(4,3,figsize = (20,30))\n\nfig.subplots_adjust(hspace = 0.4) # for loop \uc744 \ud1b5\ud574 \ubaa8\ub4e0 \uc785\ub825 \ubcc0\uc218 \ud55c\ubc88\uc5d0 \uc2dc\uac01\ud654 \nfor i,ax in zip (train_num.columns,axs.flatten()) :\n    sns.scatterplot(data = train_num, x = i, y = \"price\", hue = \"price\", palette = \"coolwarm\", ax=ax )\n    \n    plt.xlabel(i, fontsize = 12)\n    plt.ylabel(\"Price\", fontsize = 12)\n    \n    ax.set_title(\"Price\"+ \" - \" + str(i), fontweight = \"bold\", size = 15)","ded08cb5":"# \"sqft_living\" \uc758 \uc774\uc0c1\uce58 \ntrain_num[train_num[\"sqft_living\"] > 12000]","4c58aff9":"# \"sqft_lot\" \uc758 \uc774\uc0c1\uce58 \ntrain_num[train_num[\"sqft_lot\"] > 1500000]","2816855d":"# \"sqft_above\"\uc758 \uc774\uc0c1\uce58 \ntrain_num[train_num[\"sqft_above\"] > 8000]","c6bd6324":"# \"sqft_basement\" \uc758 \uc774\uc0c1\uce58\ntrain_num[train_num[\"sqft_basement\"] > 4000]","2558e066":"# \"sqft_lot15\" \uc758 \uc774\uc0c1\uce58 \ntrain_num[train_num[\"sqft_lot15\"] > 500000]","854ca012":"# \"sqft_living15\"\uc758 \uc774\uc0c1\uce58 \ntrain_num[train_num[\"sqft_living15\"] > 6000]","de96bef1":"# \uc774\uc0c1\uce58 \uc778\ub371\uc2a4 \ub118\ubc84\ub85c \ucc3e\uc544 \ud574\ub2f9 \ud589 \uc0ad\uc81c \nout_iloc = [7252,12777,1719,7252,9254,8092,9714,13464,10373] # \uc778\ub371\uc2a4 \ub118\ubc84 \ud560\ub2f9 \ndf_train = df_train.drop(out_iloc)","536ad6b1":"train_cate = df_train[lst_col_1]\n\ndef cate_boxplot(x,y,**kwargs) : # \ubc15\uc2a4\ud50c\ub78f \ud55c\ubc88\uc5d0 \uadf8\ub9ac\ub294 \uc0ac\uc6a9\uc790 \ud568\uc218 \uc124\uc815\n    sns.boxplot(x=x, y=y)\n    x = plt.xticks(rotation = 0)\n\n\nf = pd.melt(df_train, id_vars = [\"price\"], value_vars = sorted(df_train[lst_col_1]))\ng = sns.FacetGrid(f, col = \"variable\", col_wrap = 2, sharex = False, sharey = False, size = 7)\ng = g.map(cate_boxplot, \"value\",\"price\")","22d5c170":"# \ubaa9\ud45c\ubcc0\uc218 \ubd84\ud3ec \ub530\ub85c \ubcf4\uae30 \nimport scipy.stats as stats\nfrom sklearn.preprocessing import normalize as norm\n\n# \ud3c9\uade0, \ubd84\uc0b0 \uad6c\ud558\uae30 \n(mu, sigma) = (df_train['price'].mean(), df_train['price'].std()**2)\n\n# Distplot \uc2dc\uac01\ud654\nplt.figure(figsize = (10,5))\nsns.distplot(df_train[\"price\"])\n\n# \ubc94\ub840 \ubc0f \ud0c0\uc774\ud2c0 \uc124\uc815 \nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)])\nplt.ylabel('Frequency')\nplt.title('Price distribution')\n\n# Q-Q PLOT\nplt.figure(figsize = (10,5))\nres = stats.probplot(df_train['price'], plot=plt)","11c0532a":"# \ubaa9\ud45c\ubcc0\uc218 describe \ndf_train['price'].describe()","0bde0101":"# \ubaa9\ud45c\ud3b8\uc218\uc758 \uc3e0\ub9bc (\uc65c\ub3c4&\ucca8\ub3c4) \uad6c\ud558\uae30\n\nprint('\\n1.\uc65c\ub3c4(skewness : ', df_train[\"price\"].skew())\nprint('2.\ucca8\ub3c4(kurtosis) : ', df_train[\"price\"].kurtosis())\nprint(\"\\n\")","bb5b2c66":"# \ubaa9\ud45c\ud3b8\uc218\uc758 \uc3e0\ub9bc (\uc65c\ub3c4&\ucca8\ub3c4) \uc644\ud654\ub97c \uc704\ud574 \ub85c\uadf8 \uc4f0\uc6b0\uae30\ndf_train[\"price_log\"] = np.log(df_train[\"price\"]+1)","aef41747":"# \ubaa9\ud45c\ubcc0\uc218 \ubd84\ud3ec \ub530\ub85c \ubcf4\uae30 \nfrom sklearn.preprocessing import normalize as norm\n\n# \ud3c9\uade0, \ubd84\uc0b0 \uad6c\ud558\uae30 \n(mu1, sigma1) = (df_train['price_log'].mean(), df_train['price_log'].std()**2)\n\n# Distplot \uc2dc\uac01\ud654 \nplt.figure(figsize = (10,5))\nsns.distplot(df_train[\"price_log\"])\n\n# \ubc94\ub840 \ubc0f \ud0c0\uc774\ud2c0 \uc124\uc815 \nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu1, sigma1)])\nplt.ylabel('Frequency')\nplt.title('Price distribution')\n\n# Q-Q Plot \nplt.figure(figsize = (10,5))\nres = stats.probplot(df_train['price_log'], plot=plt)","4c8b7f5c":"# \ub85c\uadf8\ud654\ud55c \ubaa9\ud45c\ubcc0\uc218\uc758 \uc65c\ub3c4, \ucca8\ub3c4 \ud655\uc778  \n\nprint('\\n1.\uc65c\ub3c4(skewness : ', df_train[\"price_log\"].skew())\nprint('2.\ucca8\ub3c4(kurtosis) : ', df_train[\"price_log\"].kurtosis())\nprint(\"\\n\")","5d70d9ae":"# train set \uacb0\uce21\uce58\ud655\uc778 \ndf_train.isnull().sum()","ee7a3645":"# test set \uacb0\uce21\uce58 \ud655\uc778 \ndf_test.isnull().sum()","56994eda":"# \uc0c1\uad00\uacc4\uc218 \uad6c\ud558\uae30 \ndf_corr_num = df_train[lst_col_2].corr() # \uc5f0\uc18d\ud615\ub370\uc774\ud0c0 \uc0c1\uad00\uacc4\uc218 \ndf_corr_num = df_corr_num.copy()","0130d25d":"# \ud788\ud2b8\ub9f5 \uadf8\ub9ac\uae30 \nmask = np.array(df_corr_num)\n\nmask[np.tril_indices_from(mask)] = False # \ud544\uc694\ud55c \ubc18\ub9cc \ubcf4\uc5ec\uc8fc\uae30 \n\n# \uc11c\ube0c\ud50c\ub78f \ubc0f \ud788\ud2b8\ub9f5 \nfig, ax = plt.subplots()\nfig.set_size_inches(20,10)\nsns.heatmap(df_corr_num, cmap = sns.diverging_palette(20,220, n =200),\n            mask = mask,square = True, annot = True)","b5b8500c":"# plot \uc704\uc5d0 value \ud45c\uc2dc\ub418\ub3c4\ub85d \ud568\uc218 \ub9cc\ub4e4\uae30\ndef showvalues(ax,m=None):\n    for p in ax.patches:\n        ax.annotate(\"%.1f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\\\n                    ha='center', va='center', fontsize=11, color='k', rotation=0, xytext=(0, 8),\\\n                    textcoords='offset points',fontweight='light',alpha= 1) ","caa5f10e":"# \"price\" \uc640 \ub2e4\ub978 \ubcc0\uc218\uc640\uc758 \uc0c1\uad00\uacc4\uc218 \nax1 =  df_corr_num[\"price\"].sort_values(ascending = False).plot.bar(figsize = (12,7))\nshowvalues(ax1)\nplt.xticks(fontsize = 13)\nplt.show()","4cefbf94":"# \ubaa9\ud45c\ubcc0\uc218 \ub85c\uadf8\ud654 \ntrain_num[\"price_log\"] = np.log(train_num[\"price\"]+1)","dbbd302f":"# \"price_log\" \uc640 \ub2e4\ub978 \ubcc0\uc218\uc640\uc758 \uc0c1\uad00\uacc4\uc218 \ndf_corr_num = train_num.corr()\nax2 = df_corr_num[\"price_log\"].sort_values(ascending = False).plot.bar(figsize = (12,7))\nshowvalues(ax2)\nplt.xticks(fontsize = 13)\nplt.show()","da0e8833":"# \uc0c1\uad00\uacc4\uc218 0.3 \uc774\ud558 \ub9ac\uc2a4\ud2b8 : \ubaa8\ub378 \uc131\ub2a5 \ud5a5\uc0c1\uc744 \uc704\ud574 \uc0c1\uad00\uacc4\uc218 \ub0ae\uc740 \ubcc0\uc218 \ubc84\ub9b4 \uac00\ub2a5\uc131 \uace0\ub824\n\nlow_corr = [\"yr_renovated\", \"sqft_lot\", \"sqft_lot15\", \"yr_built\", \"long\", \"zipcode\"]","a2dcbaf8":"# pairplot \uc2dc\uac01\ud654 (\uc8fc\ud53c\ud130\ub178\ud2b8\ubd81\uc5d0\uc120 \uc798\ubcf4\uc774\ub294\ub370 \uce90\uae00 \ub178\ud2b8\ubd81\uc5d0\uc120 \uc798 \ubcf4\uc774\uc9c0 \uc54a\uc544\uc694 \u315c\u315c)\nsns.pairplot(train_num)","d52907c1":"# \uc0c1\uad00\uacc4\uc218 \uac00\uc7a5 \ub192\uc557\ub358 \ubcc0\uc218\ub85c \ud68c\uae30\uc120 \uadf8\ub824\ubcf4\uae30 \nsns.lmplot(data = df_train, x = \"sqft_living\", y = \"price\", hue = \"view\" )","e6febef0":"# train\/test set \ud569\ud558\uc5ec \uc8fc\uace0, \ubaa9\ud45c\ubcc0\uc218\ub294 y_train \uc6a9\uc73c\ub85c \ub530\ub85c \ubcc0\uc218 \ud560\ub2f9 \ny = df_train[\"price_log\"]\ny = y.copy()\ndf_x = df_train.drop([\"price\", \"price_log\"],axis = 1)\ndf_all = pd.concat([df_x, df_test]).reset_index(drop= True)\n","75e36042":"# \uba38\uc9c0\ud55c \ub370\uc774\ud130 \ud06c\uae30 \ud655\uc778 \ndf_x.shape","9535eb6f":"# \ud14c\uc2a4\ud2b8\uc14b \ub370\uc774\ud130 \ud06c\uae30 \ud655\uc778 \ndf_test.shape","f1b25d9c":"# \uba38\uc9c0\ud55c \ub370\uc774\ud130 \uacb0\uce21\uce58 \ud655\uc778 \ndf_all.isnull().sum()","6ce1aaa0":"df_all.head()","3e029b8a":"# \ub0a0\uc9dc \ub370\uc774\ud130\ub294 \uac70\ub798\ub144\ub3c4\uc640 \uac70\ub798\ub2ec \uceec\ub7fc\uc744 \uc0c8\ub85c \ub9cc\ub4e0\ub2e4 \ndf_all[\"date\"] = df_all[\"date\"].apply(lambda x : x.split(\"T\")[0]).astype(str)\ndf_all[\"yr_sold\"] = pd.to_datetime(df_all[\"date\"]).dt.year.astype(int)\ndf_all[\"month_sold\"] = pd.to_datetime(df_all[\"date\"]).dt.month.astype(int)","a5dbdd24":"# \uc774 \ubd80\ubd84\uc740 \ucd5c\uc885 \uacb0\uce21\uce58 \uc0dd\uc131\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc5b4 \ud655\uc778 \ndf_all[df_all[\"yr_sold\"] <df_all[\"yr_renovated\"]]","2b015c33":"# \uac74\ubb3c\uc758 \uc5f0\uc2dd\uc5d0 \ub300\ud55c \uceec\ub7fc \uc0dd\uc131 : \uba3c\uc800 \"yr_old\" \uceec\ub7fc\uc744 \ubcf5\uc0ac\ud574\uc11c \uceec\ub7fc \uc0dd\uc131 \ndf_all[\"age\"] = df_all[\"yr_sold\"]","9bbf8d40":"# \ub9ac\ubaa8\ub378\ub9c1 \ub144\ub3c4 \uc720\ubb34\uc5d0 \ub530\ub77c \uac74\ubb3c\uc5f0\uc2dd \uceec\ub7fc\uc744 for loop\/if \ubb38\uc73c\ub85c \uc791\uc131\ndf_all[\"age\"] = df_all[\"yr_sold\"]\nfor i in df_all.index.tolist() :\n    if df_all[\"yr_renovated\"].iloc[i] == 0 :\n        df_all[\"age\"].iloc[i] = df_all[\"yr_sold\"].iloc[i] - df_all[\"yr_built\"].iloc[i]\n    else :\n        df_all[\"age\"].iloc[i] = df_all[\"yr_sold\"].iloc[i] - df_all[\"yr_renovated\"].iloc[i]\n        ","10271839":"# \ub9ac\ubaa8\ub378\ub9c1 \uc5ec\ubd80, \uc9c0\ud558\uc2e4 \uc5ec\ubd80 \ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131 \ndf_all[\"bool_renovated\"] = df_all[\"yr_renovated\"].apply(lambda x : 1 if x > 0 else 0)\ndf_all[\"bool_basement\"] = df_all[\"sqft_basement\"].apply(lambda x : 1 if x > 0 else 0)","2e792cdc":"# \ubaa8\ub4e0 \uceec\ub7fc\uba85 \ud655\uc778 \ndf_all.columns","ec902565":"# \ubc94\uc8fc\ud615\/\uc5f0\uc18d\ud615 \uceec\ub7fc \ub098\ub220\uc8fc\uae30 \nfeature_col_1 = ['bedrooms','bathrooms','floors','waterfront','view','condition','grade',\n                'yr_sold', 'month_sold']\nfeature_col_2 = [\"date\",'sqft_living', 'sqft_lot', 'grade', 'sqft_above',\n       'sqft_basement', 'zipcode', 'lat', 'long',\n       'sqft_living15', 'sqft_lot15','age', 'yr_built', 'yr_renovated' ,\n       'bool_renovated', 'bool_basement']","87a2ba59":"# \ubc94\uc8fc\ud615 \uceec\ub7fc \ub370\uc774\ud130\ud0c0\uc785 \ubc14\uafb8\uae30 \nfor i in feature_col_1 :\n    df_all[i] = df_all[i].astype(str)\n","533e56e4":"# \ub370\uc774\ud130 \uc778\ud3ec\ub85c \ud655\uc778 \ndf_all.info()","b1618f6f":"# \uc65c\ub3c4 \uc2ec\ud55c \ubcc0\uc218 (0.5 \uc774\uc0c1) \uc774\ub984 \ucd94\ucd9c \ndf_all_num = df_all.select_dtypes(include = [\"int64\", \"float64\"]).copy()\nskew_features = abs(df_all_num.skew()).sort_values(ascending = False)\nhigh_skew = skew_features[skew_features >0.5]\nskew_index = high_skew.index\nskewness = high_skew.reset_index().rename(columns = {\"index\" : \"feature\", 0 : \"skew_value\"})\nskewness","a8190921":"# \uc65c\ub3c4 \uc2ec\ud55c \ubcc0\uc218\ub9cc Pair plot \uadf8\ub9ac\uae30 \nplt.figure(figsize = (14,7))\nax3 = sns.barplot(data = skewness, x = \"feature\", y = \"skew_value\")\nshowvalues(ax3)\nplt.show()","3adb3e6e":"# \ud55c\ub208\uc5d0 \uc2dc\uac01\ud654 (\uc8fc\ud53c\ud130\ub178\ud2b8\ubd81\uc5d0\uc120 \uc798\ubcf4\uc774\ub294\ub370 \uce90\uae00 \ub178\ud2b8\ubd81\uc5d0\uc120 \uc798 \ubcf4\uc774\uc9c0 \uc54a\uc544\uc694 \u315c\u315c)\nsns.pairplot(df_all[skew_index])","a845c329":"# boxcox \uc0ac\uc6a9\ud558\uc5ec \uc815\uaddc\ud654 \nfrom scipy.stats import skew,boxcox_normmax\nfrom scipy.special import boxcox1p\n\nfor i in skew_index :\n    if i == \"long\" :#\ub9c8\uc774\ub108\uc2a4 \uac12\uc774\uace0, latitude \ub294 \ubcc0\uc218 \ud2b9\uc131\uc0c1 \ud2b9\uc815 \uc22b\uc790\uc5d0 \ubaa8\uc5ec\uc788\ub294 \uac83\uc774 \ub9de\uc544 \ud328\uc2a4 \n        pass\n    else :\n        df_all[i] = boxcox1p(df_all[i], boxcox_normmax(df_all[i] + 1.002))","e3dc0755":"# skewness \uc644\ud654\ub428\uc744 \ud655\uc778\ud558\ub77c \uc218 \uc788\ub2e4. (\uc8fc\ud53c\ud130\ub178\ud2b8\ubd81\uc744 \ud1b5\ud55c \ud655\uc778 \uad8c\uc7a5\ud569\ub2c8\ub2e4)\nsns.pairplot(df_all[skew_index])","7978bd7d":"# \ubaa8\ub4e0 \uceec\ub7fc\uba85 \ubcf4\uae30 \nall_col = df_all.columns.to_list()\nprint(all_col)","4baf599f":"# \ub370\uc774\ud130 \uc3e0\ub9bc \uc2ec\ud55c \uac83 \ucc3e\uae30\nout_col = []\nout_index = []\nout_count = []\nout_ratio = []\n\nfor i in range(0,len(all_col)) :\n    col = all_col[i]\n    index_ = df_all[col].value_counts().index[0]\n    count = df_all[col].value_counts().max()\n    ratio = count\/df_all.shape[0]\n    \n    if ratio > 0.8 :\n        out_col.append(col)\n        out_index.append(index_)\n        out_count.append(count)\n        out_ratio.append(ratio)\n\npd.DataFrame(data = {\"col_name\": out_col, \"value\": out_index, \"count\": out_count, \"ratio\": out_ratio})\n               \n\n               ","f352b096":"# \ud2b9\uc815 \ub370\uc774\ud130\uac00 90% \uc774\uc0c1 \ucc28\uc9c0\ud558\ub294 \uceec\ub7fc\uba85\nout_col","e63b7c26":"# \uc55e\uc11c \uc0c1\uad00\uacc4\uc218 \ub0ae\uc740 \uceec\ub7fc\uba85 \ubd88\ub7ec\uc624\uae30 : \uac19\uc774 \uc0ad\uc81c\ud558\uae30 \uc704\ud574 \nlow_corr","4803f581":"# \ub9ac\uc2a4\ud2b8 \ud569\uce58\uae30 : \uc0ad\uc81c\ud544\uc694\ud55c \uceec\ub7fc\uba85 \ud569\uce58\uae30\nout_col.extend(low_corr)\nout_col","cfb7e67d":"# \ubc94\uc8fc\ud615 \ub370\uc774\ud130\ub294 \uc81c\uc678 : \ubc94\uc8fc\ud615 \ub370\uc774\ud130\ub294 \ucd94\ud6c4 \uc6d0\ud56b\uc778\ucf54\ub529\uc744 \ud1b5\ud574 \uae30\uc911\uce58 \ubd80\uc5ec\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4 \n# \ubc94\uc8fc\ud615 \ub370\uc774\ud130\ub97c \uc81c\uc678\ud55c \uceec\ub7fc\uba85 \ub9ac\uc2a4\ud2b8\nout_col_1 = ['yr_renovated',\n 'bool_renovated',\n 'yr_renovated',\n 'sqft_lot',\n 'sqft_lot15',\n 'yr_built',\n 'long',\n 'zipcode']","66ae6275":"# \ubc94\uc8fc\ud615 \uceec\ub7fc\uc740 \uc81c\uc678\ud558\uace0 \uc5f0\uc18d\ud615 \uceec\ub7fc \uc0ad\uc81c (\ub370\uc774\ud130 \uc3e0\ub9bc\uc740 \uc608\uce21 \uc65c\uace1 \uc704\ud5d8\uc774 \uc788\ub2e4)\ndf_final_1 = df_all.drop(out_col_1, axis = 1)\ndf_final_1 = df_final_1.copy()","8c926bdf":"# \uc5f0\uc18d\ud615 \ub370\uc774\ud130 \uceec\ub7fc\uba85 \uac00\uc838\uc624\uae30\ndf_final_num_col_1 = df_final_1.select_dtypes(include = [\"int64\", \"float64\"]).columns.tolist()","9b8fd767":"# for loop \uc73c\ub85c \ud30c\uc0dd\ubcc0\uc218\uc5d0 \ub85c\uadf8\uac12 \ud560\ub2f9\ud558\uae30\nfor i in range(0,len(df_final_num_col_1)) :\n               df_final_1[df_final_num_col_1[i]+'_log'] = np.log(df_final_1[df_final_num_col_1[i]]+1)","068a16b8":"# \uc774\uc81c \ubd88\ud544\uc694\ud55c \ub0a0\uc9dc \uce7c\ub7fc \uc0ad\uc81c\ndf_final_1 = df_final_1.drop(\"date\", axis = 1)","c9e593aa":"# \ubc94\uc8fc\ud615\/\uc5f0\uc18d\ud615 \ub370\uc774\ud130\ud504\ub808\uc784 \ub098\ub220\uc8fc\uae30 \ndf_final_cate_1 = df_final_1.select_dtypes(exclude = [\"int64\", \"float64\"])\ndf_final_num_1 = df_final_1.select_dtypes(include = [\"int64\", \"float64\"])","d54978c9":"# \ubc94\uc8fc\ud615 \ub370\uc774\ud130 \ub354\ubbf8\ud654 \ndf_final_dummy_1 = pd.get_dummies(df_final_cate_1)\ndf_final_withdummy_1 = pd.concat([df_final_1, df_final_dummy_1], axis = 1 )\ndf_final_1 = df_final_withdummy_1.drop(df_final_cate_1.columns, axis = 1)\ndf_final_1","c70789a3":"# train set \ub098\ub204\uae30 \n\nX = df_final_1[:len(df_x)]\nX ","e683c079":"# test set \ub098\ub204\uae30 \ntest_final = df_final_1[len(df_x):]\ntest_final\n","dc7ee5b4":"# y_train \ub098\ub204\uae30 \nY = y\nY.describe()","993a2d37":"# \uc55e\uc11c \ub098\ub208 \ub370\uc774\ud130 \ud06c\uae30 \ud655\uc778 \nprint(\"Train Shape : \", X.shape)\nprint(\"Test Shape : \", test_final.shape)\nprint(\"Y Shape : \", Y.shape)","69b39477":"# \ud6c8\ub828\uc14b \uacb0\uce21\uce58 \ucc3e\uae30 \npd.options.display.max_columns = 100\nX_na = X.isnull().sum().reset_index()\nX_na[X_na[0] > 0]","efe85ba7":"# \uacb0\uce21\uce58 0 \uc73c\ub85c \ucc44\uc6b0\uae30\nX[\"age_log\"] = X[\"age_log\"].fillna(0)","dd42078b":"# \uc2dc\ud5d8\uc14b \uacb0\uce21\uce58 \ud655\uc778\ntest_na =test_final.isnull().sum().reset_index()\ntest_na[test_na[0] > 0]","bc2cfa51":"# \ud604\uc7ac \uc2dc\uc810(2015\ub144) \uae30\uc900\uc73c\ub85c \uac74\ubb3c\uc5f0\uc2dd\uc740 0 \ub144\uc73c\ub85c \ubcf4\uc544\ub3c4 \ub418\ubbc0\ub85c, fillna(0) \uc73c\ub85c \ucc98\ub9ac \ntest_final[\"age_log\"] = test_final[\"age_log\"].fillna(0)","98f80db6":"# \uacb0\uce21\uce58 \uc788\ub294\uc9c0 \ud655\uc778\nnp.any(np.isnan(test_final))","95f4df83":"# \ubaa8\ub450 \uc720\ud55c\ud55c \uc2e4\uc218 \ud615\ud0dc\uc778\uc9c0 \ud655\uc778 \nnp.all(np.isfinite(test_final))","e1c935a4":"from sklearn.metrics import mean_squared_error\n\ndef rmse_eval(y, y_pred) :\n    return np.sqrt(mean_squared_error(y, y_pred))","a50cff78":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y)","e199525c":"# \ubaa8\ub378 \ubd88\ub7ec\uc624\uae30\nimport sklearn\nfrom sklearn.linear_model import LinearRegression\n\nregressor = LinearRegression()\nregressor\n","971d8411":"# \uc801\ud569\ud558\uae30 \nregressor = regressor.fit(X_train,y_train)\nregressor","157a0798":"# \uc608\uce21\ud558\uae30 \ny_pred = regressor.predict(X_test)\ny_pred","2b04e63a":"# \uc608\uce21\uac12\uacfc \uc2e4\uc81c\uac12 \ube44\uad50 \uc2dc\uac01\ud654 1 \nsns.regplot(x = y_test, y = y_pred)","b7ba8618":"# \uc608\uce21\uac12\uacfc \uc2e4\uc81c\uac12 \ube44\uad50 \uc2dc\uac01\ud654 2\nsns.kdeplot(y_test)\nsns.kdeplot(y_pred)","2cfb33d6":"# RMSE \ud655\uc778 \nrmse_eval( y_test, y_pred)","fb5828a0":"regressor.score(X_train,y_train)","8e35884b":"print(regressor.intercept_)","2d0102dc":"print(regressor.coef_)","b9ff1648":"y_pred_submit_7 = regressor.predict(test_final)","f91d4a43":"y_pred_submit_7","1c6fc379":"submit_7 = pd.read_csv(\"..\/input\/2021-immba-coding-workshop\/sample_submission.csv\")\nsubmit_7","4737fd3e":"np.floor(np.exp(y_pred_submit_7))","99a28296":"submit_7[\"price\"] = np.floor(np.exp(y_pred_submit_7))","bb6b8512":"submit_7.to_csv(\".\/submit_7.csv\", index = False)","1d344785":"pd.read_csv(\".\/submit_7.csv\")","66ac39ec":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y)","17fbf5ba":"from sklearn.preprocessing import StandardScaler,MinMaxScaler,PolynomialFeatures,RobustScaler\n\nscaler = RobustScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.fit_transform(X_test)\ntest_final_scaled = scaler.fit_transform(test_final)\nregressor_scaled = LinearRegression()\nregressor_scaled","bb76948b":"regressor_scaled = regressor_scaled.fit(X_train_scaled, y_train)\nregressor_scaled","141369e3":"y_pred_8 = regressor_scaled.predict(X_test_scaled)\ny_pred_8","95155a70":"# \uc2dc\uac01\ud654 1\nsns.regplot(x = y_test, y = y_pred_8)","30a0f279":"# \uc2dc\uac01\ud654 2\nsns.kdeplot(y_test)\nsns.kdeplot(y_pred_8)","40afdc72":"rmse_eval( y_test, y_pred_8)","c01c6545":"y_pred_submit_8 = regressor_scaled.predict(test_final_scaled)\ny_pred_submit_8","234c16dc":"submit_8 = pd.read_csv(\"..\/input\/2021-immba-coding-workshop\/sample_submission.csv\")\nsubmit_8","bc6dd706":"submit_8[\"price\"] = np.floor(np.exp(y_pred_submit_8))","d0ddb5db":"submit_8.to_csv(\"submit_8.csv\", index = False)","44a17bca":"pd.read_csv(\"submit_8.csv\")","90e7c4de":"#### (5) \ud6c8\ub828 \ud6c4 \uc131\ub2a5 \ud3c9\uac00 : \uc608\uce21\uac12\uc744 \uc2e4\uc81c\uac12 \uc624\ucc28 \uc2dc\uac01\ud654","6572cf5d":"#### (2) Skewness \uc644\ud654\ub97c \uc704\ud574 boxcox \uc0ac\uc6a9\ud55c \uc815\uaddc\ud654 (\ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud55c \uc815\uaddc\ud654)","ebab2b26":"### 1-1. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","4da050dd":"* Regressor Score","56a42367":"#### (2) fillna \uc0ac\uc6a9\ud55c \uacb0\uce21\uce58 \ucc98\ub9ac (\uc2dc\ud5d8\uc14b)","4bb0a890":"#### (3) \ucd5c\uc885 \uacb0\uce21\uce58 \ubc0f \ubb34\ud55c\ub300 \uc0dd\uc131 \uc5ec\ubd80 \ud655\uc778","96fdfade":"#### (3) \ub85c\uadf8\ubcc0\ud658\ud55c \ubaa9\ud45c\ubcc0\uc218 'price_log' \uc5d0 \ub300\ud55c \uc0c1\uad00\uacc4\uc218 \uc2dc\uac01\ud654\ub85c \ud655\uc778","d00c9ad7":"> #### (4) \ubc94\uc8fc\ud615 \ubcc0\uc218 dtype str \uc73c\ub85c \ubcc0\ud658 ","f3133381":"### 2-2. \uc0c1\uad00\uacc4\uc218 \uc2dc\uac01\ud654 ","f9de117e":"#### (2) \ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131 : \uac74\ubb3c\uc5f0\uc2dd \uceec\ub7fc \ub9cc\ub4e4\uae30","26db87af":"### 5-6. \ud6c8\ub828\uc14b\/\uc2dc\ud5d8\uc14b \ub098\ub204\uae30 ","e39173f8":"* \uc55e\uc11c boxcox \ud65c\uc6a9\ud55c \uc815\uaddc\ud654\uc5d0\uc11c \uc74c\uc218\uac12\uc774 \uc0dd\uacbc\uace0, \uc74c\uc218\uac12\uc744 \ub85c\uadf8\ud654\ud558\uc790 \ubcc0\ud658\ub418\uc9c0 \ubabb\ud574 \uacb0\uce21\uce58\uac00 \uc0dd\uc131\ub41c \uac83\uc744 \ud655\uc778\ud588\ub2e4. \n* \uc774\ub294 \uac70\ub798\ub144\ub3c4(2014\ub144)\ubcf4\ub2e4 \ub9ac\ubaa8\ub378\ub9c1 \uc5f0\ub3c4(2015\ub144)\uac00 \ub354 \ucd5c\uadfc\uc774\ub77c \uac74\ubb3c\uc5f0\uc2dd\uc774 \uc74c\uc218\ub85c \uacc4\uc0b0\ub41c \ubb38\uc81c\uc774\ub2e4. \n* \ud604\uc7ac \uc2dc\uc810(2015\ub144) \uae30\uc900\uc73c\ub85c \uac74\ubb3c\uc5f0\uc2dd\uc740 0 \ub144\uc73c\ub85c \ubcf4\uc544\ub3c4 \ub418\ubbc0\ub85c, fillna(0) \uc73c\ub85c \ucc98\ub9ac\ud574\ub3c4 \ubb34\ubc29\ud558\ub2e4 \ud310\ub2e8\ud558\uc600\ub2e4.","524cb5dc":"### 1-4. \uc785\ub825 \ubcc0\uc218 \uc2dc\uac01\ud654","0622fc8a":"#### (2) \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc744 \ud1b5\ud574 \ubc94\uc8fc\ud615, \uc5f0\uc18d\ud615 \ubcc0\uc218 \ub098\ub204\uae30","a7e2a12f":"#### (2) \ubaa8\ud615\uc801\ud569 \ubc0f \uac80\uc99d\uc744 \uc704\ud55c \ud6c8\ub837\uc14b\/\uac80\uc99d\uc14b \ub098\ub204\uae30 ","38261ca2":"#### (1) \ubaa9\ud45c\ubcc0\uc218 'price' \uc5d0 \ub300\ud55c \uc0c1\uad00 \uacc4\uc218 \uc2dc\uac01\ud654 ","888d6e0b":"* Regressor Intercept ","32ffe5c4":"#### (1) SCATTER PLOT : \uc5f0\uc18d\ud615 \ubcc0\uc218 \uc2dc\uac01\ud654 ","c1f75a0c":"#### (2) \ubd88\ud544\uc694\ud55c \uceec\ub7fc \uc0ad\uc81c : \ud2b9\uc815 \ub370\uc774\ud130\ub85c \ud68d\uc77c\ud654\ub41c \uceec\ub7fc \ubc0f \uc0c1\uad00\uacc4\uc218\uac00 \ub0ae\uc740 \uceec\ub7fc\n","28479d57":"## 4. Data Pre-Processing","4a1af292":"#### (1) \ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131 : \ub0a0\uc9dc \uceec\ub7fc \uc804\ucc98\ub9ac \ubc0f \uac70\ub798\ub144\ub3c4\/\uac70\ub798\ub2ec \uceec\ub7fc \uc0dd\uc131","0f4fa128":"### 5-7. \uacb0\uce21\uce58 \ucc98\ub9ac ","7f617c3e":"### 5-5. ONE HOT ENCODING : \ubc94\uc8fc\ud615 \ubcc0\uc218 \ub354\ubbf8\ubcc0\uc218 \ub9cc\ub4e4\uae30 ","a0c59feb":"#### (1) fillna \uc0ac\uc6a9\ud55c \uacb0\uce21\uce58 \ucc98\ub9ac (\ud6c8\ub828\uc14b)","1740bc36":"#### (2) \uc774\uc0c1\uce58 \ud655\uc778 : Scatter Plot \uc744 \ud1b5\ud574 \ub450\ub4dc\ub7ec\uc9c0\ub294 \uc774\uc0c1\uce58 \ud655\uc778 \n","91cfa125":"## \ub370\uc774\ud130 \ubc30\uacbd\nThis dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015.","b0494b6e":"#### (7) \uc2e4\uc81c \ud14c\uc2a4\ud2b8\uc14b \uc801\ud569\ud558\uc5ec \uc608\uce21\ud558\uae30","ba5d1a3d":"#### (7) \uc2e4\uc81c\uac12 \uc608\uce21\ud558\uae30","16147e31":"#### (6) \ubaa8\ub378 \ud6c8\ub828 \uc131\ub2a5 \ud3c9\uac00 : \ud3c9\uac00\uc9c0\ud45c RMSE","88cb6158":"### 2-1. \uc804\uccb4 \uc5f0\uc18d\ud615 \ubcc0\uc218\uc5d0 \ub300\ud55c \ud788\ud2b8\ub9f5 \uadf8\ub9ac\uae30","d3c58844":"* \uc55e\uc11c \uc774\uc0c1\uce58\ub97c \uc81c\uac70 \ud588\uae30 \ub54c\ubb38\uc5d0 \uc774 \ubd80\ubd84\uc774 \ub370\uc774\ud130\ub97c \ubd88\uc548\uc815\ud558\uac8c \ub9cc\ub4e4 \uac00\ub2a5\uc131\uc774 \uc788\uc5b4 \ub370\uc774\ud130\uc2a4\ucf00\uc77c\ub9c1\uc744 \uc9c4\ud589\ud558\uace0 \ubaa8\ud615\uc744 \uc801\ud569\ud574\ubcf4\uc558\ub2e4.\n* \uacb0\ub860\uc801\uc73c\ub85c \uc774 \ubaa8\ud615\uacfc \ub370\uc774\ud130\uc5d0\uc11c\ub294 \ub370\uc774\ud130 \uc2a4\ucf00\uc77c\ub9c1 \ud6c4 \ubaa8\ub378 \uc131\ub2a5\uc774 \uc624\ud788\ub824 \ub5a8\uc5b4\uc9d0\uc744 \ud655\uc778\ud588\ub2e4. \n* \uc544\ub798\ub294 \ucc38\uace0 \uacfc\uc815\uc774\ub2e4.","7cfab85f":"#### (1) \uc65c\ub3c4 \uc2ec\ud55c \ubcc0\uc218 \ucd94\ucd9c\ud558\uc5ec \uc2dc\uac01\ud654","7e8a19d2":"#### (8) Submission","cfc70e70":"#### (4) \uc801\ud569\ud55c \ubaa8\ub378\uc5d0 \ud6c8\ub828\uc14b\uc73c\ub85c \uc608\uce21\ud558\uae30 ","cbabccd7":"### 1-6. \ub370\uc774\ud130 \uacb0\uce21\uce58 \ud655\uc778","da0603a3":"#### (3) \uc774\uc0c1\uce58\uac00 \ud3ec\ud568 \ub41c \ud589 \uc0ad\uc81c","aae3e0dd":"### 6-2. Modeling with Data Scaling","2519361a":"### 1-5. \ubaa9\ud45c\ubcc0\uc218 \uc2dc\uac01\ud654","f98b37e4":"#### (1) \uc804\uccb4 \ub370\uc774\ud130 \ud504\ub808\uc784\uc758 \ud788\uc2a4\ud1a0\uadf8\ub7a8 \uadf8\ub9ac\uae30","94bd1de2":"### 5-1. \ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131 ","2bbe84a8":"* Regressor Coeffient Corelaion","66cf763c":"#### (1) RMSE \uacc4\uc0b0\ud558\ub294 \uc0ac\uc6a9\uc790 \ud568\uc218 \ub9cc\ub4e4\uae30","aaf5336f":"#### (2) \ubaa9\ud45c\ubcc0\uc218 \ub85c\uadf8\ubcc0\ud658 : \uc608\uce21\ub960 \ub192\uc774\uae30 \uc704\ud55c skew \uc904\uc774\uae30","3f0b600b":"* \ubaa8\ub378 \uad6c\ucd95\uc5d0 \uc81c\ud55c\uc744 \ub450\uc5c8\uae30 \ub54c\ubb38\uc5d0 \uc785\ub825\ubcc0\uc218 \uac04\uc758 \uad00\uacc4 \ud655\uc778\uc740 \uc0dd\ub7b5\ud55c\ub2e4.\n* \ubaa8\ub378 \uc131\ub2a5\uc744 \uc704\ud574 \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc740 \ubcc0\uc218\ub294 \uc6b0\uc120 \ubaa8\ub450 \uc0ac\uc6a9\ud55c\ub2e4.\n* \ud2b9\uc815 \uc785\ub825 \ubcc0\uc218\ub4e4 \uac04\uc758 \ub2e4\uc911\uacf5\uc0b0\uc131 \ubc0f \ub370\uc774\ud130\ub204\uc218\uac00 \uc880 \uc6b0\ub824\ub418\ub294 \uc9c0\uc810\uc774 \uc788\uc9c0\ub9cc \uc0dd\ub7b5\ud55c\ub2e4. ","674c57e5":"### 3-1. \uc785\ub825\ubcc0\uc218 skewness \uc2dc\uac01\ud654  ","187ecdad":"> ## 1. [](http:\/\/)\ub370\uc774\ud130 \uc0b4\ud3b4\ubcf4\uae30","f90d9a38":"#### (3) \ud6c8\ub828\uc14b \ubaa8\ud615 \uc801\ud569\ud558\uae30","7dc8b601":"#### (2) \ubaa9\ud45c\ubcc0\uc218 \ub85c\uadf8\ud654 ","e9d82573":"# 2021 IMMBA Coding Workshop : \ubd04\ubc29\ud559 \uce90\uae00\ub300\ud68c","d159ce19":"#### (3) \ubaa9\ud45c\ubcc0\uc218 \uc65c\ub3c4 \ucca8\ub3c4 \uc644\ud654\ub97c \uc704\ud55c \ub85c\uadf8 \ubcc0\ud658 \ubc0f \uacb0\uacfc \ud655\uc778 ","f8f51b39":"### 6-1. Modeling without Data Scaling ","402e0b32":"#### (3) \ud6c8\ub828\uc14b \ubaa8\ud615 \uc801\ud569","5fd09163":"* \ubc94\uc8fc\ud615 \ubcc0\uc218\ub294 \uc22b\uc790\ub85c \ubcf4\uc774\ub294 \ubb38\uc790\ud615 \ub370\uc774\ud130\uc774\ub2e4. \n* \uc721\uc548\uc73c\ub85c \uc22b\uc790\uc774\uc9c0\ub9cc \uc5f0\uc18d\ud615\uc740 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0 \uc5f0\uc18d\ud615 \uc22b\uc790\uc758 \uac12\uc744 \uc758\ubbf8\ub97c \uac00\uc9c0\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \uac01 \ubc94\uc8fc \uc548\uc5d0\uc11c \ub808\ubca8\uc744 \uac00\uc9c4\ub2e4. \n* \uac01 \ubc94\uc8fc\ud615 \ub370\uc774\ud130\ub294 \uadf8 \ub808\ubca8\uc5d0 \ub530\ub77c \uac00\uaca9 \uc0c1\uc2b9 \ub610\ub294 \ud558\ub77d \uc601\ud5a5\uc744 \ubbf8\uce58\ub294 \uac83\uc744 \uc55e\uc11c \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \ud655\uc778\ud558\uc600\ub2e4.\n* \ud574\uc11c \ub354\ubbf8\ubcc0\uc218\ub97c \uc0dd\uc131\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \uc6d0\ud56b\uc778\ucf54\ub529\ud558\uc5ec, \uac01 \ub77c\ubca8\uc758 \ub370\uc774\ud130 \uc591\uc5d0 \ub530\ub978 \uac00\uc911\uce58\ub97c \ubd80\uc5ec\uac00 \uac00\ub2a5\ud558\ub3c4\ub85d \ubcc0\ud658\ud55c\ub2e4.","c08f6271":"### 5-3. \ud2b9\uc815 \ub370\uc774\ud130\uac00 90% \uc774\uc0c1\uc778 \uceec\ub7fc \ud655\uc778\n* \uc5f0\uc18d\ud615 \ub370\uc774\ud130\uc758 \uacbd\uc6b0 \ud2b9\uc815\uac12\uc73c\ub85c \ud68d\uc77c\ud654 \ub418\uc5b4\uc788\uc73c\uba74 \uc608\uce21 \uc131\ub2a5\uc744 \ubc29\ud574\ud560 \uc218 \uc788\ub2e4.","76ab5139":"## 6. Machine Learning : Linear Regression Model","41acfa99":"#### (1) for-loop \uc744 \ud1b5\ud55c \uceec\ub7fc \ud2b9\uc815","fe5cdb38":"#### (4) \uc801\ud569\ud55c \ubaa8\ub378\ub85c \uc608\uce21\uac12 \ud655\uc778","a72d58de":"#### (2) RobustScaler \ub370\uc774\ud130 \uc2a4\ucf00\uc77c\ub9c1 \ud6c4, \ubaa8\ud615 \uc801\ud569 ","b444a318":"#### (3) \ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131 : Boolean Column","44866603":"#### (8) Submission","14e1edbb":"### 1-2. Train\/Test set \uc758 \uce7c\ub7fc\uc744 \ube44\uad50\ud558\uc5ec \ubaa9\ud45c\ubcc0\uc218 \ud30c\uc545 ","af31d9d2":"## 3. Skewness \ud655\uc778 \n* \ud53c\uccd0\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \uc2dc \uc131\ub2a5 \ud5a5\uc0c1\uc744 \uc704\ud55c \uc65c\ub3c4 \uc644\ud654\ub97c \uc704\ud574 \ubbf8\ub9ac \ubcc0\uc218\uc758 \uc65c\ub3c4 \uc0c1\ud0dc\ub97c \ud30c\uc545\ud574\ub454\ub2e4","ad32fba5":"#### (1) \ubaa9\ud45c\ubcc0\uc218 \uc2dc\uac01\ud654 \ubc0f \uc65c\ub3c4, \ucca8\ub3c4 \uad6c\ud558\uae30","70b60a78":"### 1-3. \ud788\uc2a4\ud1a0\uadf8\ub7a8 : \uc804\uccb4  \ubcc0\uc218\uc758 \ube48\ub3c4\uc218 \ud30c\uc545","21b1fc4c":"#### (5) \ubaa8\ub378 \ud6c8\ub828 \uc131\ub2a5 \ud3c9\uac00 : \uc608\uce21\uac12\uacfc \uc2e4\uc81c\uac12\uc758 \uc624\ucc28 \uc2dc\uac01\ud654 ","6fcf7bd4":"### 5-2. \uc785\ub825\ubcc0\uc218 Skewness \uacc4\uc0b0 \ubc0f \uc2dc\uac01\ud654 ","b6775c36":"### 5-4. \uc5f0\uc18d\ud615 \ubcc0\uc218\uc758 \ub85c\uadf8 \ubcc0\ud658","47dc87bc":"####  (4) BOX PLOT : \ubc94\uc8fc\ud615 \ubcc0\uc218 \uc2dc\uac01\ud654","8f621df5":"## 2. \uc0c1\uad00\uc131 \ubd84\uc11d","cbd43bfc":"* \uc5f0\uc18d\ud615 \ubcc0\uc218\uc758 \ub85c\uadf8\uac12\uc744 \ud30c\uc0dd\ubcc0\uc218\ub85c \ub9cc\ub4e4\uc5b4\uc900\ub2e4.","cabfc300":"#### (1) \ud6c8\ub828\uc14b\/\uac80\uc99d\uc14b \ub098\ub204\uae30","f362d004":"#### (6) \ubaa8\ub378 \ud6c8\ub828 \uc131\ub2a5 \ud3c9\uac00 : \ud3c9\uac00\uc9c0\ud45c RMSE","57d0172e":"### 4-1. train\/test data merge ","9bc1fa72":"## 5. Data Processing & Feature Engineering \n* \ubaa8\ub378\ub9c1\uc744 \uace0\ub824\ud55c \uc804\ucc98\ub9ac\uc640 \ud53c\uccd0\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\uc774 \uc8fc\uc694 \uacfc\uc815\uc774\ub2e4.\n* \uc55e\uc11c \ud30c\uc545\ub418\uc5c8\ub358 \ubd80\ubd84 \uc801\uc6a9\ud558\uc5ec \uc804\ucc98\ub9ac\uc5d0 \ud65c\uc6a9\ud558\uae30\ub3c4 \ud558\uace0\n* \ubbf8\uccd0 \ud655\uc778\uc774 \uc548\ub418\uc5c8\ub358 \ubd80\ubd84\ub4e4\ub3c4 \ud3ec\ud568\ud558\uc5ec \ub514\ud14c\uc77c\ud55c \ucc98\ub9ac \ud6c4, \ubaa8\ub378\uc5d0 \uc4f0\uc77c \ucd5c\uc885 \ub370\uc774\ud130 \uc14b\uc744 \uc644\uc131\ud55c\ub2e4."}}