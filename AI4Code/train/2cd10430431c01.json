{"cell_type":{"06ef69ea":"code","8004b279":"code","b62ad3ac":"code","47617f52":"code","b45797fc":"code","09bd25a3":"code","a0b34e40":"code","cfbe4e9c":"code","5e5ab243":"code","a47c26ab":"code","2021e794":"code","571fb42a":"code","396bee9b":"code","93acdee7":"code","2e486336":"code","c76406fd":"code","fb37c938":"code","939a3aa1":"code","cf2d4840":"markdown","e1a46d25":"markdown","f96d3f87":"markdown","b14b09f7":"markdown"},"source":{"06ef69ea":"!pip install timm","8004b279":"# =====================\n# Library\n# =====================\nimport torch\nimport torchvision\nimport torch.nn.functional as F\nimport torch.nn as nn\nimport albumentations\nimport timm\nimport numpy as np\nimport pandas as pd\nfrom torch.utils.data import Dataset, DataLoader, Subset\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport numpy as np","b62ad3ac":"# ==================\n# Constant\n# ==================\nTRAIN_PATH = \"..\/input\/hah-data-science-challenge\/train.csv\"\nTEST_PATH = \"..\/input\/hah-data-science-challenge\/test.csv\"\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","47617f52":"# ==================\n# Function\n# ==================\nclass resnet(nn.Module):\n    def __init__(self, model_name='resnet50d', pretrained=True):\n        super(resnet, self).__init__()\n        self.model = timm.create_model(model_name, pretrained=pretrained)\n        self.model.fc = nn.Identity()\n        \n    def forward(self, x):\n        x = self.model(x)\n        return x\n    \nclass HahDataset(Dataset):\n    def __init__(self, df,transform, train=True):\n        self.df = df\n        self.transform = transform\n        self.train = train\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, index):\n        row = self.df.loc[index]\n        path = row[\"\u30d5\u30a1\u30a4\u30eb\"].split(\".\")[0]\n        if self.train:\n            img = np.load(f\"..\/input\/fe001-make-melspectrogram\/train\/{path}.npy\")\n        else:\n            img = np.load(f\"..\/input\/fe001-make-melspectrogram\/test\/{path}.npy\")\n        img = img.transpose(1,2,0)\n        res = self.transform(image=img)\n        img = res['image']\n        img = img.transpose(2,0,1)\n        return torch.tensor(img).float()\n    \n\ndef cos_sim(v1, v2):\n    return np.dot(v1, v2) \/ (np.linalg.norm(v1) * np.linalg.norm(v2))\n    \n","b45797fc":"train = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)","09bd25a3":"model = resnet()\nmodel = model.to(device)\ntransforms_valid = albumentations.Compose([\n    albumentations.Normalize()\n])","a0b34e40":"# train\ndataset_train = HahDataset(train, transform=transforms_valid, train=True)\nemb = np.zeros([0,2048])\nbatch_size = 16\nnum_workers = 2\ntrain_loader = torch.utils.data.DataLoader(dataset_train, batch_size=batch_size, shuffle = False,  num_workers=num_workers, pin_memory=True)","cfbe4e9c":"bar = tqdm(train_loader)\nembs = []\nmodel.eval()\nwith torch.no_grad():\n    for batch_idx, images in enumerate(bar):\n        images = images.to(device)\n        emb = model(images)\n        embs += [emb]\nembs = torch.cat(embs).cpu().numpy()","5e5ab243":"embs_train = embs[train.Target == 0]\nembs_train_1 = embs[train.Target == 1]","a47c26ab":"cos_list = []\nfor i in tqdm(range(len(embs_train))):\n    cos_list_ = []\n    for t in range(len(embs_train)):\n        cos_list_.append(cos_sim(embs_train[t],embs_train[i]))\n    cos_list.append(sorted(cos_list_)[::-1][1:11])","2021e794":"cos_list2 = []\nfor i in tqdm(range(len(embs_train_1))):\n    cos_list_ = []\n    for t in range(len(embs_train)):\n        cos_list_.append(cos_sim(embs_train[t],embs_train_1[i]))\n    cos_list2.append(sorted(cos_list_)[::-1][:10])","571fb42a":"plt.hist(np.mean(cos_list,axis=1),density=True,alpha=0.5,color=\"blue\",range=(0.7,1),bins=30,label=\"0\")\nplt.hist(np.mean(cos_list2,axis=1),density=True,alpha=0.5,color=\"red\",range=(0.7,1),bins=30,label=\"1\")\nplt.legend()\nplt.show()","396bee9b":"# test\ndataset_test = HahDataset(test, transform=transforms_valid, train=False)\nemb = np.zeros([0,2048])\nbatch_size = 16\nnum_workers = 2\ntest_loader = torch.utils.data.DataLoader(dataset_test, batch_size=batch_size, shuffle = False,  num_workers=num_workers, pin_memory=True)","93acdee7":"bar = tqdm(test_loader)\nembs = []\nmodel.eval()\nwith torch.no_grad():\n    for batch_idx, images in enumerate(bar):\n        images = images.to(device)\n        emb = model(images)\n        embs += [emb]\nembs = torch.cat(embs).cpu().numpy()","2e486336":"cos_list = []\nfor i in tqdm(range(len(embs))):\n    cos_list_ = []\n    for t in range(len(embs_train)):\n        cos_list_.append(cos_sim(embs_train[t],embs[i]))\n    cos_list.append(sorted(cos_list_)[::-1][0:10])","c76406fd":"plt.hist(np.mean(cos_list,axis=1))\nplt.show()","fb37c938":"y_pred = np.mean(cos_list,axis=1)","939a3aa1":"sub = pd.read_csv(\"..\/input\/hah-data-science-challenge\/sample_submission.csv\")\nsub[\"Target\"] = y_pred\nsub.to_csv(\"ex001.csv\",index=False)","cf2d4840":"## melspectrogram\u3092\u753b\u50cf\u5909\u63db\u3057\u3066\u3001train\u3068test\u306e\u985e\u4f3c\u5ea6\u3092\u4f7f\u3063\u305f\u30a2\u30d7\u30ed\u30fc\u30c1\u3067\u3059\u3002\n\uff08\u7cbe\u5ea6\u306f\u4f4e\u3044\u3067\u3059\u304c...\uff09\n### \u753b\u50cf\u5909\u63db\u306f\u4e0b\u8a18notebook\u3092\u898b\u3066\u304f\u3060\u3055\u3044\nhttps:\/\/www.kaggle.com\/takoihiraokazu\/fe001-make-melspectrogram","e1a46d25":"### target==0 \u540c\u58eb\u306ecos\u985e\u4f3c\u5ea6\u3092\u6c42\u3081\u308b\uff08\u81ea\u5206\u4ee5\u5916\u306e\u4e0a\u4f4d10\u4ef6\uff09","f96d3f87":"### target==1\u3000\u3068 target==0 \u306ecos\u985e\u4f3c\u5ea6\u3092\u6c42\u3081\u308b\uff08\u4e0a\u4f4d10\u4ef6\uff09","b14b09f7":"#### \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0"}}