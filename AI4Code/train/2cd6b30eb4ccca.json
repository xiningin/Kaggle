{"cell_type":{"6b132026":"code","8241e3c9":"code","296cc751":"code","e996f9c9":"code","2ef4e972":"code","fa5a3b59":"code","583900d2":"code","a2e3fe18":"code","522a2c2b":"code","102f4299":"code","ec5b04f5":"code","3fd78e1b":"code","3a20b782":"code","5fcb73c5":"code","3085fa69":"code","558386da":"code","54038770":"code","7e207826":"code","f0ab12fc":"code","af53162c":"code","8dff2111":"code","25ca849a":"code","87af2683":"code","be8632e9":"code","7696094d":"markdown","26fd1f3c":"markdown","bc4af8fa":"markdown","42b12b90":"markdown","6f10ddff":"markdown","306bc50b":"markdown","b62359de":"markdown","6534abfe":"markdown","eae66241":"markdown","e5bc4538":"markdown","60b47e44":"markdown"},"source":{"6b132026":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8241e3c9":"train_df=pd.read_csv('\/kaggle\/input\/dry-beans-classification-iti-ai-pro-intake01\/train.csv')\ntrain_df.head()","296cc751":"train_df['y'].value_counts()","e996f9c9":"train_df.info()","2ef4e972":"train_df.describe()","fa5a3b59":"train_df.isna().sum()","583900d2":"train_df.corr()","a2e3fe18":"sns.scatterplot(hue='y',x='MajorAxisLength',y='EquivDiameter',data=train_df)","522a2c2b":"train=train_df.copy()\ntrain.info()","102f4299":"y=train['y']\ntrain = train.drop(['ID','y',],axis=1)\n\nfrom imblearn.over_sampling import RandomOverSampler\nros = RandomOverSampler(random_state=0)\ntrain, y = ros.fit_resample(train, y)\nfrom collections import Counter\nprint(sorted(Counter(y).items()))","ec5b04f5":"train.duplicated().sum()","3fd78e1b":"train = train.apply(np.log)","3a20b782":"# from sklearn.preprocessing import MinMaxScaler\n# scaler = MinMaxScaler()\n# train1=scaler.fit_transform(train)","5fcb73c5":"from sklearn.preprocessing import StandardScaler\nscaler1 = StandardScaler()\ntrain1=scaler1.fit_transform(train)","3085fa69":"from sklearn.model_selection import  cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom imblearn.ensemble import BalancedRandomForestClassifier\nfrom imblearn.under_sampling import NeighbourhoodCleaningRule\nfrom sklearn.svm import NuSVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom imblearn.ensemble import EasyEnsembleClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom imblearn.ensemble import BalancedBaggingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.kernel_approximation import Nystroem\nfrom sklearn.svm import LinearSVC\nfrom sklearn.naive_bayes import MultinomialNB\nfrom imblearn.ensemble import RUSBoostClassifier\nfrom imblearn.over_sampling import ADASYN\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\n#model=LinearSVC(random_state=0,dual=False,tol=1e-5,C=1,max_iter=1000000,class_weight='balanced')\n#model=LogisticRegression(C=1,multi_class='auto',class_weight='balanced',max_iter=1000000,random_state=0)\n#model=SGDClassifier(random_state=0,alpha=.1,class_weight='balanced',max_iter=1000000)\n#model=XGBClassifier(n_estimators=100,max_depth=2,learning_rate=.05,use_label_encoder=False, eval_metric='merror',random_state=0)\nmodel=SVC(C=1,random_state=0,gamma='scale',class_weight='balanced',decision_function_shape='ovo')\n#model=NuSVC(nu=.15,random_state=0,gamma='auto',class_weight='balanced',decision_function_shape='ovo')\n#model=RandomForestClassifier(random_state=0,max_samples=2000,warm_start=False,class_weight='balanced_subsample',n_estimators=100,criterion='gini',min_samples_split=2)\n#model=DecisionTreeClassifier()\n#model=GradientBoostingClassifier(n_estimators=200,max_depth=2,learning_rate=.1,random_state=0)\n#model = NeighbourhoodCleaningRule()\n#model=BalancedRandomForestClassifier(n_estimators=1000,random_state=0)\n#model = RUSBoostClassifier(n_estimators=1000, algorithm='SAMME.R',random_state=0)\n#model2 = AdaBoostClassifier(base_estimator=model1, n_estimators=100)\n#model=VotingClassifier(estimators=[('xgb',model1),('svc',model2),('rf',model3)],voting='hard')\n#model=EasyEnsembleClassifier(random_state=0)\n#model=MultinomialNB()","558386da":"scores=cross_val_score(model,train1,y,scoring='f1_weighted',cv=7)\nprint('cross_val_score: ',scores.mean())","54038770":"from sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import f1_score\n\nx_train, x_val, y_train, y_val=train_test_split(train,y,test_size=.15,stratify=y,)\nmodel_1=SVC(C=1,random_state=0,gamma='scale',class_weight='balanced',decision_function_shape='ovo')\n#model_1=OneVsRestClassifier(model_1)\n\nscaler = StandardScaler()\nx_train=scaler.fit_transform(x_train)\n\n# feature_map_nystroem = Nystroem(gamma=.2,\n#                                  random_state=0,\n                                \n#                                 n_components=6000)\n# x_train = feature_map_nystroem.fit_transform(x_train)\n\nmodel_1.fit(x_train,y_train)\ny_pred_train=model_1.predict(x_train)\nprint(f1_score(y_pred_train,y_train,average='weighted'))\n\nx_val=scaler.transform(x_val)\n#x_val = feature_map_nystroem.transform(x_val)\n\ny_pred_val=model_1.predict(x_val)\nf1_score(y_pred_val,y_val,average='weighted')","7e207826":"test_df=pd.read_csv('\/kaggle\/input\/dry-beans-classification-iti-ai-pro-intake01\/test.csv')\ntest_df.head()","f0ab12fc":"test_df.info()","af53162c":"test=test_df.drop(['ID',],axis=1)\ntest = test.apply(np.log)","8dff2111":"scaler2 = StandardScaler()\ntrain=scaler2.fit_transform(train)\ntest=scaler2.transform(test)","25ca849a":"#model=SVC(C=1.5,random_state=0,gamma='auto',class_weight='balanced',decision_function_shape='ovo')\nmodel.fit(train,y)\ny_pred=model.predict(test)","87af2683":"test_df['y']=y_pred\ny_pred","be8632e9":"test_df[['ID', 'y']].to_csv('\/kaggle\/working\/Submission16.csv', index=False)","7696094d":"# Load Data","26fd1f3c":"## Log Transformation","bc4af8fa":"# Visualization","42b12b90":"# Preprocessing ","6f10ddff":"## Cross Validation","306bc50b":"# EDA","b62359de":"# Build Models","6534abfe":"## Holdout set validation","eae66241":"## Scaling","e5bc4538":"## Over Sampling","60b47e44":"# Test"}}