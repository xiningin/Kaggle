{"cell_type":{"058531ce":"code","37be94ac":"code","e7d62d8b":"code","f5b0fd64":"code","dd9eb48f":"code","4f6fb514":"code","63582366":"code","67da5bb5":"code","cbf2852a":"code","ceb8f419":"code","3ad91761":"code","e7c57195":"code","cddd9df5":"code","3779b244":"code","1f8852b6":"code","6025ade5":"code","37d7801d":"code","ba0b30bb":"code","c942091a":"code","59b694e7":"code","fb3a398b":"code","50eed82c":"code","e9cb5d1d":"code","a00151d8":"code","5b614990":"code","b4229800":"code","d1530649":"code","8bb0b88c":"code","4b885cb9":"code","66c1ac5b":"code","0e0ba3cf":"code","8d93fe23":"code","17ab075a":"code","da3c221b":"code","4aa7704b":"code","6a6e1caf":"markdown","1df855bb":"markdown","e3be06dd":"markdown"},"source":{"058531ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","37be94ac":"train=pd.read_csv('..\/input\/mobile-price-classification\/train.csv')","e7d62d8b":"train.head(2)","f5b0fd64":"train.shape","dd9eb48f":"train.isnull().sum()","4f6fb514":"train.head(1)","63582366":"print(train.price_range.value_counts())\nprint(train.blue.value_counts())\nprint(train.dual_sim.value_counts())\nprint(train.four_g.value_counts())\nprint(train.mobile_wt.value_counts())","67da5bb5":"train.describe().T","cbf2852a":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ceb8f419":"train.hist(figsize=(15,15))","3ad91761":"train.columns","e7c57195":"sns.pointplot(x='price_range',y='clock_speed',data=train)","cddd9df5":"sns.pointplot(y='four_g',x='price_range',data=train)","3779b244":"sns.pointplot(x='price_range',y='int_memory',data=train)","1f8852b6":"sns.barplot(x='three_g',y='price_range',data=train)\n#check three g support or not using barplot\nlabel=['3 g support ','not support']\nvalues=train['three_g'].value_counts().values\nfig,ax1=plt.subplots()\nax1.pie(values,labels=label,shadow=True,startangle=90,autopct='%1.1f%%')","6025ade5":"train.head(1)\nsns.barplot(x='price_range',y='four_g',data=train)\nlabel=['4-g support','not-support']\nvalues=train['four_g'].value_counts().values\nfig,ax1=plt.subplots()\nax1.pie(values,labels=label,shadow=True,startangle=90,autopct='%1.1f%%')","37d7801d":"sns.swarmplot(x='price_range',y='clock_speed',data=train)","ba0b30bb":"sns.boxplot(x='wifi',y='price_range',data=train)","c942091a":"train.head(1)\n#plt.figure(figsize=(10,6))\ntrain['fc'].hist(alpha=0.5,color='blue',label='Front camera')\ntrain['pc'].hist(alpha=0.5,color='green',label='primary camera')\nplt.legend()\nplt.xlabel('megapixel')","59b694e7":"sns.jointplot(x='ram',y='price_range',data=train,kind='kde')","fb3a398b":"train.head(1)\nsns.jointplot(y='n_cores',x='price_range',data=train,kind='kde')","50eed82c":"sns.jointplot(x='talk_time',y='price_range',kind='kde',data=train)","e9cb5d1d":"plt.figure(figsize=(15,15))\nsns.heatmap(train.corr(),cmap='RdYlGn',annot=True)","a00151d8":"train.head(1)\nx=train.drop('price_range',axis=1)\ny=(train['price_range'])","5b614990":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(x,y,random_state=0,test_size=.2)","b4229800":"from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nrfc=RandomForestClassifier(n_estimators=100,criterion='gini',min_samples_split=2,bootstrap=True)\nrfc.fit(X_train,y_train)\nY_pred=rfc.predict(X_test)\nprint('y predicted',Y_pred)\nrfc.score(X_train,y_train)","d1530649":"rfc.score(X_test,y_test)","8bb0b88c":"#gattung more accurating result using boosting clasifier\ngc=GradientBoostingClassifier()\ngc.fit(X_train,y_train)\ngc.fit(X_test,y_test)\ngc.score(X_test,y_test)","4b885cb9":"import xgboost as xgb","66c1ac5b":"xgb_model = xgb.XGBClassifier(objective=\"binary:logistic\", random_state=42)\nxgb_model.fit(X_train, y_train)\nxgb_model.fit(X_test,y_test)\nY_pred=xgb_model.predict(X_test)\nY_pred","0e0ba3cf":"xgb_model.score(X_test,y_test)","8d93fe23":"pd.crosstab(y_test,Y_pred)","17ab075a":"from sklearn.metrics import confusion_matrix,accuracy_score,classification_report\nsns.heatmap(confusion_matrix(y_test,Y_pred),annot=True)","da3c221b":"accuracy_score(y_test,Y_pred,normalize=False)","4aa7704b":"print(classification_report(y_test,Y_pred))","6a6e1caf":"# MOBILE PRICE CLASSIFICATION WITH RANDOM FOREST XG BOOST GRADIANT BOOST ALGORITHM\nA mobile phone, cell phone, cellphone, or hand phone, sometimes shortened to simply mobile, cell or just phone, is a portable telephone that can make and receive calls over a radio frequency link while the user is moving within a telephone service area.\n\nThe first handheld mobile phone was demonstrated by John F. Mitchell and Martin Cooper of Motorola in 1973, using a handset weighing c. 2 kilograms (4.4 lbs).\n\nIn 1979, Nippon Telegraph and Telephone (NTT) launched the world's first cellular network in Japan. In 1983, the DynaTAC 8000x was the first commercially available handheld mobile phone. From 1983 to 2014, worldwide mobile phone subscriptions grew to over seven billion\u2014enough to provide one for every person on Earth.\n\nIn first quarter of 2016, the top smartphone developers worldwide were Samsung, Apple, and Huawei, and smartphone sales represented 78 percent of total mobile phone sales. For feature phones (or \"dumbphones\") as of 2016, the largest were Samsung, Nokia, and Alcatel.\n\nsource:https:\/\/en.wikipedia.org\/wiki\/Mobile_phone\n\nEvolution of Mobile Phone\n\nIn this kernel, I analyzed mobile phone features with price range. Also I build a model using support vector machine algortihm.","1df855bb":"# EDA","e3be06dd":"# #X  and y mark down"}}