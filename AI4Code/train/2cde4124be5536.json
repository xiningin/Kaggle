{"cell_type":{"ece7c8e9":"code","1ba4cb41":"code","3a6e253b":"code","3694e602":"code","529312bc":"code","9ee7ee8f":"code","56b54c72":"code","3713ca5f":"code","527a53fd":"code","b1fb70a9":"markdown","add862f6":"markdown","9fa14369":"markdown","52635b2e":"markdown","b87666ad":"markdown","2507768a":"markdown"},"source":{"ece7c8e9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport math\nimport random\nimport tensorflow as tf\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom keras.utils import np_utils\nfrom keras.callbacks import EarlyStopping\nimport os\nimport cv2\nimport ast\n%matplotlib inline\n","1ba4cb41":"path_dir = \"..\/input\/quickdraw-doodle-recognition\/train_simplified\"\nfile_list = os.listdir(path_dir)\n\nfile_list = [word.replace('.csv', '') for word in file_list]\n\nfile_list","3a6e253b":"path_csv3 = '..\/input\/quickdraw-doodle-recognition\/test_simplified.csv'\n\ndata3 = pd.read_csv(path_csv3)\n\ndata3['listed'] = \"a\"\ndata3['probability'] = 0.0001\ndata3['listed2'] = \"a\"\ndata3['probability2'] = 0.0001\ndata3['listed3'] = \"a\"\ndata3['probability3'] = 0.0001","3694e602":"def draw_matrix(list_raw):\n    A = np.zeros((256, 256))\n    xx = []\n    yy = []\n    for list1 in list_raw:\n        xx = xx + list1[0]\n        yy = yy + list1[1]\n    minx = min(xx)\n    maxx = max(xx)\n    miny = min(yy)\n    maxy = max(yy)\n\n    midx = round(127-(maxx-minx)\/2)\n    midy = round(127-(maxy-miny)\/2)\n    \n    for i in range(len(list_raw)):\n        length1 = len(list_raw[i][0])\n        length2 = len(list_raw[i][1])\n        list_raw[i][0] = [min(list_raw[i][0][j]+midx, 255) for j in range(length1)]\n        list_raw[i][1] = [min(list_raw[i][1][j]+midy, 255) for j in range(length2)]\n        \n    for list1 in list_raw:\n        for i in range(1,len(list1[0])):\n            x2 = list1[0][i]\n            y2 = list1[1][i]\n            x1 = list1[0][i-1]\n            y1 = list1[1][i-1]\n            \n            decide = max(abs(x2-x1), abs(y2-y1))\n            if decide == abs(x2- x1) and decide > 0:\n                slope = (y2-y1)\/(x2-x1)\n                if x1 < x2:\n                    for j in range(x1, x2+1):\n                        x = j\n                        y = y1+slope*(j-x1)\n                        y = round(y)\n                        A[x, y] = 1\n                else:\n                    for j in range(x2, x1+1):\n                        x = j\n                        y = y1+slope*(j-x1)\n                        y = round(y)\n                        A[x, y] = 1\n            elif decide == abs(y2-y1) and decide > 0:\n                slope = (x2-x1)\/(y2-y1)\n                if y1 < y2:\n                    for j in range(y1, y2+1):\n                        y = j\n                        x = x1+slope*(j-y1)\n                        x = round(x)\n                        A[x, y] = 1                   \n                else:\n                    for j in range(y2, y1+1):\n                        y = j\n                        x = x1+slope*(j-y1)\n                        x = round(x)\n                        A[x, y] = 1           \n            elif x1 == x2:\n                if y1 < y2:\n                    for j in range(y1, y2+1):\n                        A[x1, j] = 1\n                else:\n                    for j in range(y2, y1+1):\n                        A[x1, j] = 1\n            elif y1 == y2:\n                if x1 < x2:\n                    for j in range(x1, x2+1):\n                        A[j, y1] = 1\n                else:\n                    for j in range(x2, x1+1):\n                        A[j, y1] = 1\n                        \n    return A\n","529312bc":"data_example = pd.read_csv(path_csv3)\nlist_raw = data_example['drawing'][100]\nlist_raw = ast.literal_eval(list_raw)\nA = draw_matrix(list_raw)\nplt.matshow(A)","9ee7ee8f":"model = Sequential()\nmodel.add(Conv2D(100, kernel_size=(5, 5), strides=(1, 1), padding='same',\n                 activation='relu',\n                 input_shape=(256, 256,1)))\n\nmodel.add(MaxPooling2D(pool_size=(4, 4), strides=(4, 4)))\nmodel.add(Conv2D(64, (4, 4), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(4, 4)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(1000, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(17, activation='softmax'))\nmodel.summary()","56b54c72":"file_list = random.sample(file_list, 340)\n\ntrain_N = 600\ntest_N = 200\n\n\nfor epoch in range(20):\n    A = np.zeros((17*train_N, 256, 256, 1))\n    B = np.zeros((17*test_N, 256, 256, 1))\n    A1 = [i for i in range(17*train_N)]\n    sampling2 = random.sample(A1, 17*train_N)\n    B1 = [i for i in range(17*test_N)]\n    sampling3 = random.sample(B1, 17*test_N)\n\n    y_train = [0 for i in range(17*train_N)]\n    y_test = [0 for i in range(17*test_N)]\n    l_train = 0\n    l_test = 0\n    l = 0\n    \n    file_list2 = file_list[(17*epoch):(17*epoch+17)]\n    for download in file_list2:\n        path_csv = '..\/input\/quickdraw-doodle-recognition\/train_simplified\/'\n        path_csv2 = path_csv + download + '.csv'\n        data = pd.read_csv(path_csv2)\n        select = [i for i in range(len(data['drawing']))]\n        sampling = random.sample(select, train_N+test_N)\n        for i in range(train_N):\n            key = sampling[i]\n            list_raw = data['drawing'][key]\n            list_raw = ast.literal_eval(list_raw)\n            A[sampling2[l_train], :, :, 0] = draw_matrix(list_raw)\n            y_train[sampling2[l_train]] = l\n            l_train += 1\n        \n        \n        for i in range(train_N, test_N):\n            key = sampling[i]\n            list_raw = data['drawing'][key]\n            list_raw = ast.literal_eval(list_raw)\n            B[sampling3[l_test], :, :, 0] = draw_matrix(list_raw)\n            y_test[sampling3[l_test]] = l\n            l_test += 1\n        l += 1\n    y_train = np_utils.to_categorical(y_train, 17)\n    y_test = np_utils.to_categorical(y_test, 17)\n    \n    \n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    batch_size = 50\n    epochs = 5\n    x_train = A\n    x_test = B\n    \n    hist = model.fit(x_train, y_train, validation_data = (x_test, y_test),\n                 batch_size=batch_size,\n                 epochs=epochs,\n                 verbose=1)\n    \n    \n    for testing in range(len(data3)):\n        K = np.zeros((256, 256))\n        list_raw = data3['drawing'][testing]\n        list_raw = ast.literal_eval(list_raw)\n        K = np.zeros((1, 256, 256, 1))\n        K[0, :, :,0] = draw_matrix(list_raw)\n        \n        predicted_result = model.predict(K)\n        key = np.where(predicted_result[0] == max(predicted_result[0]))\n        key2 = list(key[0])[0]\n        name = file_list2[key2]\n        probs = max(predicted_result[0])\n        if probs > data3['probability'][testing]:\n            if data3['probability2'][testing] == 0.0001:\n                data3['listed2'][testing] = name\n                data3['probability2'][testing] = probs\n            elif data3['probability3'][testing] == 0.0001:\n                data3['listed3'][testing] = name\n                data3['probability3'][testing] = probs\n            else:\n                data3['listed'][testing] = name\n                data3['probability'][testing] = probs\n        elif probs >data3['probability2'][testing]:\n            data3['listed2'][testing] = name\n            data3['probability2'][testing] = probs\n        elif probs >data3['probability3'][testing]:\n            data3['listed3'][testing] = name\n            data3['probability3'][testing] = probs","3713ca5f":"data_final = pd.read_csv('..\/input\/quickdraw-doodle-recognition\/sample_submission.csv')\n\nfor i in range(len(data3)):\n    data3['listed'][i] = data3['listed'][i].replace(\" \", \"_\")\n    data3['listed2'][i] = data3['listed2'][i].replace(\" \", \"_\")\n    data3['listed3'][i] = data3['listed3'][i].replace(\" \", \"_\")\n    data_final['word'][i] = data3['listed'][i] + \" \" + data3['listed2'][i] + \" \" + data3['listed3'][i]\n    if i % 1000 == 0:\n        print(i\/\/1000)","527a53fd":"data_final.to_csv('submission_final.csv', index = False)","b1fb70a9":"\uc774\uac8c \uc798 \ub9de\ub294\uc9c0 \uc608\ub97c \ub4e4\uc5b4 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.","add862f6":"CNN \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4\uc90d\ub2c8\ub2e4.","9fa14369":"submission \uc790\ub8cc\ub97c \uac16\uace0 \uc640\uc11c \uc880 \uc218\uc815\ud574\uc90d\ub2c8\ub2e4.","52635b2e":"\ucf54\ub4dc \uc124\uba85\n\n1. \uba3c\uc800 \uc790\ub8cc\ub97c \uac00\uc9c0\uace0 \uc640\uc11c 256*256 matrix \ud615\ud0dc\ub85c \ub9cc\ub4e4\uc5b4\uc11c \uadf8\ub824\uc9c4 \ubd80\ubd84\uc744 1\ub85c \ub193\uace0 \ub098\uba38\uc9c0\ub294 0\uc73c\ub85c \ub193\uc2b5\ub2c8\ub2e4.\n\n2. CNN \ubaa8\ub378\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n\n3. \ubd84\ub958\ud560 \ub0b4\uc6a9\uc774 340\uac1c\ub098 \ub418\uae30 \ub54c\ubb38\uc5d0 \uc774\ub97c \uba87 \uc9d1\ub2e8\uc73c\ub85c \ucabc\uac1c\uc11c \ud559\uc2b5\ud55c \ud6c4 test\uc790\ub8cc\uc5d0\uc11c\ub294 \ud655\ub960\uc774 \uac00\uc7a5 \ub192\uc740 \uac83 3\uac1c\ub97c \ud0dd\ud569\ub2c8\ub2e4.","b87666ad":"\ub2e4\uc74c\uc740 matrix\ub97c \ub9cc\ub4dc\ub294 \ud568\uc218\uc785\ub2c8\ub2e4.","2507768a":"\ud559\uc2b5\ud558\uace0 test \ud55c \ub4a4 \uacb0\uacfc\ub97c \uc81c\ucd9c\ud569\ub2c8\ub2e4."}}