{"cell_type":{"a9133816":"code","2c14e21b":"code","2c840213":"code","59ad44d5":"code","518b8dd0":"code","d5653a25":"code","f3b1b9b1":"code","b97ca9b3":"code","a205a4bf":"code","82c116bb":"code","75d42415":"code","270372dd":"code","6c3eb638":"code","add90bf3":"code","443370ff":"code","36dcd4bc":"code","4447fd54":"code","a869a024":"code","668e0347":"code","5793f43f":"code","22bd8f14":"code","174e24f6":"code","bf716f8f":"code","67244d68":"code","a73e51bc":"code","cf3ed9d5":"code","7e7567ae":"code","f337ca6e":"code","87e2551a":"code","dd6e13f0":"code","9dc5739f":"code","8df5296e":"markdown","c7fc0269":"markdown"},"source":{"a9133816":"!ls ..\/input\/to-csv-outcsv","2c14e21b":"!ls .","2c840213":"!ls ..\/input\/one-year-industrial-component-degradation","59ad44d5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport io\nimport os\n\n#\u30c7\u30fc\u30bf\u4fdd\u5b58\u540d\ncsv_filepath = 'to_csv_out.csv'","518b8dd0":"import datetime\n\n# \u65e5\u6642\u30c7\u30fc\u30bf\u4f5c\u6210 \u95a2\u6570\ndef StrtoDatetime(_filename):\n    filename = _filename\n    #timestamp = _timestamp\n    timestr = \"2018-\" + filename[:5] + \" \" + filename[6:8] + \":\" +  filename[8:10] + \":\" +  filename[10:12]\n    dt1 = pd.to_datetime(timestr)\n    #dt2 = dt1 + datetime.timedelta(seconds=timestamp)\n    return dt1\n","d5653a25":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nli = [];li2 = []\nsize = 0;size2=0\n\nroot_dir=\"..\/input\/one-year-industrial-component-degradation\"\ni=0\n\nfor text_file in os.listdir(root_dir):\n    #print(text_file)\n    text_file_path = os.path.join(root_dir, text_file)\n    if ('.csv' not in text_file_path):\n        print(text_file)\n        continue\n    if ('02-29T' in text_file):\n        print(text_file)\n        text_file=text_file.replace('02-29T', '03-01T')\n        print('>>>'+text_file)\n    if ('02-30T' in text_file):\n        print(text_file)\n        text_file=text_file.replace('02-30T', '03-02T')\n        print(\">>>\"+text_file)\n\n        \n    df = pd.read_csv(text_file_path,engine = \"python\",index_col=None, header=0)\n    #df = pd.read_csv(z.open(text_file),index_col=None, header=0)\n    \n    df['mode'] = text_file_path[-5:-4]\n    df['filename'] = text_file\n    sampleNumber = text_file[-13:-10]\n    df['sampleNumber'] = sampleNumber\n    #df['sampletime'] = float(sampleNumber) * 10 + df['timestamp'] \n    buff=[]\n    for time in df['timestamp']:\n        dt1 = StrtoDatetime(text_file) + datetime.timedelta(seconds = time)\n        buff.append(dt1)\n    df['sampletime'] = pd.Series(buff)\n    #print(type(buff))\n    \n    li.append(df)\n    size += df.size\n    df['filmSP_var'] = df['pSvolFilm::CTRL_Position_controller::Actual_speed'].var(ddof=0)\n\n\n    \nframe = pd.concat(li, axis=0, ignore_index=True)\n#frame2 = pd.concat(li2, axis=0, ignore_index=True)","f3b1b9b1":"frame.info()","b97ca9b3":"frame[\"mode\"]=frame[\"mode\"].astype(str)","a205a4bf":"# \u30e2\u30fc\u30c9\u9078\u629e\nMODE = 1\ndfm = frame.query('mode == ' + str(MODE) )","82c116bb":"dfm.head(3)","75d42415":"file_group = dfm.groupby([\"filename\"])\n#print(file_group.size())\nli3 = []\nli4 = []\nfor name, group in file_group:\n    li3.append(group.iloc[0,11])\n    li4.append(group.iloc[0,13])\n    \n    #print((group.iloc[0,12]))\n#frame3 = pd.concat(li3, axis=0, ignore_index=True)","270372dd":"# \u30b0\u30e9\u30d5\u4f5c\u6210\nplt.figure(figsize=(18,4))\n\nplt.plot(li3,li4)\nplt.title(\"filmsp_var\")\n\nplt.show()\n","6c3eb638":"# CSV\u30d5\u30a1\u30a4\u30eb\u3067\u4fdd\u5b58\nframe.to_csv(csv_filepath)","add90bf3":"# \u30d5\u30a1\u30a4\u30eb\u78ba\u8a8d\n!ls .","443370ff":"!pwd","36dcd4bc":"# import the modules we'll need\nfrom IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\n\n# function that takes in a dataframe and creates a text link to  \n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"data.csv\"):  \n    csv = df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)","4447fd54":"# create a link to download the dataframe\ncreate_download_link(frame,filename=\"to_csv_out.csv\")\n","a869a024":"csv_filepath=\"..\/input\/to-csv-outcsv\/to_csv_out.csv\"","668e0347":"# CSV\u30d5\u30a1\u30a4\u30eb\u30ea\u30fc\u30c9\u3000\u203b\u3053\u306e\u30bb\u30eb\u4ee5\u964d\u3001df_csv \u3092\u4f7f\u7528\u3059\u308b\u306e\u3067\u7834\u58ca\u3057\u306a\u3044\u3053\u3068\u3002\ndf_csv = pd.read_csv(csv_filepath, parse_dates=[0])\ndf_csv['sampletime'] = pd.to_datetime(df_csv['sampletime'])\ndf_csv = df_csv.sort_values('sampletime')","5793f43f":"# \u30c7\u30fc\u30bf\u78ba\u8a8d\nprint(\"rows:\" + str(len(df_csv)))\nprint(\"cals:\" + str(len(df_csv.columns)))\n\ndf_csv.head(2)","22bd8f14":"df_csv.info()","174e24f6":"# \u30c7\u30fc\u30bf\u9078\u629e\ndf = df_csv\n#df = df_csv[('2018-02-28 15:00:00' < df_csv['sampletime']) & (df_csv['sampletime'] < '2018-02-28 15:05:00') ]\n\nCOL = 4  # \u4e0a\u8a18 df_csv.info() \u53c2\u7167\n\n# \u30b0\u30e9\u30d5\u4f5c\u6210\u3000\nplt.figure(figsize=(18,4))\n\n#plt.plot(df['sampletime'], df.iloc[:,COL])\nplt.scatter(df['sampletime'], df.iloc[:,COL],s=10)\nplt.title(df.columns.values[COL], fontsize=18)\n\n\n# \u6642\u523b\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8a2d\u5b9a\nxfmt = mpl.dates.DateFormatter('%Y-%m-%d %H:%M')\n#xfmt = mpl.dates.DateFormatter('%m-%d %H:%M')\nplt.gca().xaxis.set_major_formatter(xfmt)\n\nplt.show()","bf716f8f":"# \u901f\u5ea6\u6bd4\u8f03\u30b0\u30e9\u30d5\u95a2\u6570\ndef SpeedGraph(mode,fileno):\n  data_L = df_csv.query('mode == ' + str(mode) )\n  # \u884c\u9078\u629e\n  SIZE = 2048 # 1\u30d5\u30a1\u30a4\u30eb\u884c\u6570\n  SIZEMAX = int(data_L.size\/data_L.columns.size)\n  FILENO = fileno     \n  \n  ST = SIZE*FILENO\n  SP = ST+SIZE-1\n  dfg = data_L[ST:SP]\n  \n  # \u30b0\u30e9\u30d5\u4f5c\u6210 \u3000\u30d6\u30ec\u30fc\u30c9\u3068\u30d5\u30a3\u30eb\u30e0\u306e\u5b9f\u901f\u5ea6\u6bd4\u8f03\u3000pSpintor::VAX_speed\n  plt.figure(figsize=(15,8))\n  plt.plot(dfg['sampletime'], dfg['pCut::CTRL_Position_controller::Actual_speed'],color='b', label=\"pCut::Actual_speed\")\n  plt.plot(dfg['sampletime'], dfg['pSvolFilm::CTRL_Position_controller::Actual_speed'], color='r', label=\"pSvolFilm::Actual_speed\")\n  plt.plot(dfg['sampletime'], dfg['pSpintor::VAX_speed'], color='g', label=\"pSpintor::VAX_speed\")\n  #plt.plot(dfg['timestamp'], dfg['pSpintor::VAX_speed'])\n  plt.title(os.path.basename(dfg.iloc[1, 11]), fontsize=18)\n  plt.legend(loc=\"lower left\", fontsize=18) # (3)\u51e1\u4f8b\u8868\u793a\n  \n  # \u30ed\u30b1\u30fc\u30bf\u3067\u523b\u307f\u5e45\u3092\u8a2d\u5b9a\u3000\u3000basename = os.path.basename(dfg.iloc[1, 11])\n  xloc = mpl.dates.MinuteLocator(byminute=range(0,60,1))\n  plt.gca().xaxis.set_major_locator(xloc)\n  \n  # \u6642\u523b\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8a2d\u5b9a\n  xfmt = mpl.dates.DateFormatter('%m-%d %H:%M:%S')\n  plt.gca().xaxis.set_major_formatter(xfmt)\n  print(SP)\n  ret=plt.show()","67244d68":"# \u901f\u5ea6\u6bd4\u8f03\u30b0\u30e9\u30d5\u95a2\u6570\ndef SpeedGraph2(mode,fileno,filenum=1):\n  data_L = df_csv.query('mode == ' + str(mode) )\n  # \u884c\u9078\u629e\n  SIZE = 2048 # 1\u30d5\u30a1\u30a4\u30eb\u884c\u6570\n  SIZEMAX = int(data_L.size\/data_L.columns.size)\n  FILENO = fileno     \n  \n  ST = SIZE*FILENO\n  SP = SIZE*FILENO+SIZE*filenum-1\n  dfg = data_L[ST:SP]\n  \n  # \u30b0\u30e9\u30d5\u4f5c\u6210 \u3000\u30d6\u30ec\u30fc\u30c9\u3068\u30d5\u30a3\u30eb\u30e0\u306e\u5b9f\u901f\u5ea6\u6bd4\u8f03\u3000pSpintor::VAX_speed\n  plt.figure(figsize=(10,8))\n  ret=plt.plot(dfg['sampletime'], dfg['pCut::CTRL_Position_controller::Actual_speed'],color='b', label=\"pCut::Actual_speed\")\n  ret=plt.plot(dfg['sampletime'], dfg['pSvolFilm::CTRL_Position_controller::Actual_speed'], color='r', label=\"pSvolFilm::Actual_speed\")\n  ret=plt.plot(dfg['sampletime'], dfg['pSpintor::VAX_speed'], color='g', label=\"pSpintor::VAX_speed\")\n  #plt.plot(dfg['timestamp'], dfg['pSpintor::VAX_speed'])\n  plt.title(os.path.basename(dfg.iloc[1, 11])+\" >>> \"+os.path.basename(dfg.iloc[-1, 11]), fontsize=18)\n  plt.legend(loc=\"lower left\", fontsize=18) # (3)\u51e1\u4f8b\u8868\u793a\n  \n  # \u30ed\u30b1\u30fc\u30bf\u3067\u523b\u307f\u5e45\u3092\u8a2d\u5b9a\u3000\u3000basename = os.path.basename(dfg.iloc[1, 11])\n  #xloc = mpl.dates.MinuteLocator(byminute=range(0,60,1))\n  #plt.gca().xaxis.set_major_locator(xloc)\n  \n  # \u6642\u523b\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8a2d\u5b9a\n  xfmt = mpl.dates.DateFormatter('%m-%d %H:%M')\n  plt.gca().xaxis.set_major_formatter(xfmt)\n  print(SP)\n  ret=plt.show()","a73e51bc":"# \u30e2\u30fc\u30c9\u9078\u629e\nMODE = 1\nnumber_no = 50\nSpeedGraph(fileno=number_no,mode=MODE)","cf3ed9d5":"# \u30e2\u30fc\u30c9\u9078\u629e\nMODE = 1\nnumber_no = 0\nSpeedGraph(fileno=number_no,mode=MODE) # \u6700\u5f8c\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a","7e7567ae":"# \u30e2\u30fc\u30c9\u9078\u629e\nMODE = 1\n\nSpeedGraph2(fileno=0,mode=MODE,filenum=2)","f337ca6e":"#\u76f8\u95a2\u884c\u5217\nimport seaborn\nimport numpy as np\n\n# \u30e2\u30fc\u30c9\u9078\u629e\nMODE = 4\ndfm = df_csv.query('mode == ' + str(MODE) )# \u5217\u9078\u629e\u3000\n\n#plt.figure(figsize=(10,10))\ndf1 = dfm.iloc[:,[5,7,12]]\n#df1 = dfm.iloc[:,[5,12]]\n#df1 = df1[df1['sampleNumber'] < 3]\n\nret = seaborn.pairplot(df1, hue='sampleNumber')\n#ret = seaborn.pairplot(df1, hue='sampleNumber').savefig('seaborn_pairplot_mode001.png')","87e2551a":"from pandas import Series\n\n# \u30e2\u30fc\u30c9\u9078\u629e\nMODE = 1\ndfm = df_csv.query('mode == ' + str(MODE) )# \u5217\u9078\u629e\u3000\n\nfig = plt.figure()\n#ax = fig.add_subplot(1,1,1)\n\nvalues = dfm.iloc[:,[7]]\n\nst = int(values.size \/ 4)\nvalues = values[2048*3:2048*(3+4)]\n# \u68d2\u30b0\u30e9\u30d5\u3092\u63cf\u304f\nvalues.hist(bins=100, alpha=0.3, color='b', density=True)\n# \u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\nvalues.plot(kind='kde', style='r--')\n\nplt.show()\n","dd6e13f0":"from pandas import Series\n\n# \u30e2\u30fc\u30c9\u9078\u629e\nMODE = 1\ndfm = df_csv.query('mode == ' + str(MODE) )# \u5217\u9078\u629e\u3000\ndfm = dfm[('2018-01-2 15:00:00' < df_csv['sampletime']) & (df_csv['sampletime'] < '2018-01-28 15:05:00') ]\n\nCOL = 7\nvalues = dfm.iloc[:,[COL]]\n\n\n# \u68d2\u30b0\u30e9\u30d5\u3092\u63cf\u304f\nvalues.hist(bins=100, alpha=0.3, color='b', density=True)\n# \u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\nvalues.plot(kind='kde', style='r--')\n\nplt.show()\n","9dc5739f":"from pandas import Series\n\n# \u30e2\u30fc\u30c9\u9078\u629e\nMODE = 1\ndfm = df_csv.query('mode == ' + str(MODE) )# \u5217\u9078\u629e\u3000\ndfm = dfm[('2018-12-2 15:00:00' < df_csv['sampletime']) & (df_csv['sampletime'] < '2018-12-28 15:05:00') ]\n\nCOL = 7\nvalues = dfm.iloc[:,[COL]]\n\n\n# \u68d2\u30b0\u30e9\u30d5\u3092\u63cf\u304f\nvalues.hist(bins=100, alpha=0.3, color='b', density=True)\n# \u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\nvalues.plot(kind='kde', style='r--')\n\nplt.show()","8df5296e":"# \u30b0\u30e9\u30d5\u8868\u793a","c7fc0269":"# \u30c7\u30fc\u30bf\u52a0\u5de5\u4fdd\u5b58"}}