{"cell_type":{"8fd3207d":"code","f9210654":"code","c74f49a3":"code","401885d8":"code","54787aee":"code","a496faf7":"code","c3e887db":"code","1b1ec9d7":"code","c2013428":"code","588464f2":"code","f46dd7af":"code","244a764e":"code","4ead2755":"code","c2ddd1ee":"code","c25b1ce1":"code","14936112":"code","c72542d5":"code","daf2b3a8":"code","dc102ac9":"code","6ed02ffb":"code","eda661a7":"markdown","a42b5a9c":"markdown","4cb0b0b3":"markdown","5188e6f1":"markdown","0cb128a4":"markdown","7bc0c3b4":"markdown","5721a1f0":"markdown","e75bef8f":"markdown","08df8dc4":"markdown"},"source":{"8fd3207d":"import numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f9210654":"df_train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","c74f49a3":"df_train.shape,df_test.shape","401885d8":"mean_age = np.round(df_train.Age.mean())\ndf_train.Age.fillna(mean_age, inplace=True)\n\nmode_e = df_train['Embarked'].mode()[0]\ndf_train['Embarked'].fillna(mode_e, inplace=True)\n\ng = {'male':0,'female':1}  # Gender\ne = {'C':0,'Q':1,'S':2}    # Embarked from\n\ndf_train['Sex'] = df_train['Sex'].map(g)    ### Maps the number 0 with 'male' and the number 1 with 'female in the 'Sex' column of the dataframe\ndf_train['Embarked'] = df_train['Embarked'].map(e)","54787aee":"mean_age = np.round(df_test.Age.mean())\ndf_test.Age.fillna(mean_age, inplace=True)\n\nmean_f = df_test['Fare'].mean()\ndf_test['Fare'].fillna(mean_f, inplace=True)\n\ng = {'male':0,'female':1}  # Gender\ne = {'C':0,'Q':1,'S':2}    # Embarked from\n\ndf_test['Sex'] = df_test['Sex'].map(g)    ### Maps the number 0 with 'male' and the number 1 with 'female in the 'Sex' column of the dataframe\ndf_test['Embarked'] = df_test['Embarked'].map(e)","a496faf7":"X_train = df_train.select_dtypes(include='number')  ### Returns a dataframe containing only the numeric data-type columns\ny_train = X_train['Survived']\nX_train = X_train.drop(columns='Survived',axis=1)\n\nX_test = df_test.select_dtypes(include='number')  ### Returns a dataframe containing only the numeric data-type columns","c3e887db":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","1b1ec9d7":"X_train = np.array(X_train)\nX_val = np.array(X_val)\nX_test = np.array(X_test)","c2013428":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_val = scaler.transform(X_val)\nX_test = scaler.transform(X_test)","588464f2":"import tensorflow as tf\n#from tensorflow import keras","f46dd7af":"model = tf.keras.models.Sequential([\ntf.keras.layers.Flatten(input_shape=X_train.shape[1:]),\ntf.keras.layers.Dense(30, activation=\"relu\"),\ntf.keras.layers.Dense(1,activation=\"sigmoid\")\n])","244a764e":"opt = tf.keras.optimizers.SGD(learning_rate=0.001)\nmodel.compile(loss='binary_crossentropy', optimizer=opt, metrics=['mae'])","4ead2755":"H = model.fit(X_train, y_train, epochs=1000, validation_data=(X_val, y_val))","c2ddd1ee":"import matplotlib.pyplot as plt\n\nh = pd.DataFrame(H.history)\nh[['loss','val_loss']].plot(figsize=(8, 5))\nplt.grid(True)\n#plt.gca().set_ylim(0, 1) # set the vertical range to [0-1]\n#plt.title('Learning curves: the mean training loss and accuracy measured over each epoch, and the mean validation loss and accuracy measured at the end of each epoch')\nplt.show()","c25b1ce1":"model.evaluate(X_val,y_val)","14936112":"y_pred = model.predict(X_test)","c72542d5":"submit = {'PassengerId':df_test['PassengerId'], 'Survived':y_pred.squeeze()}\nsubmission = pd.DataFrame(submit)\nsubmission.set_index('PassengerId', inplace=True)","daf2b3a8":"submission.head()","dc102ac9":"#submission.to_csv('\/content\/test_submission_2.csv')","6ed02ffb":"#!kaggle competitions submit -c titanic -f \/content\/test_submission_2.csv -m submission_2","eda661a7":"**`Cleaning the Testing Data`**","a42b5a9c":"**`Cleaning the Training Data`**","4cb0b0b3":"### **Clean the data**","5188e6f1":"### **Splitting training data into Training and Validation sets**","0cb128a4":"### **Create a TensorFlow model and train it using the training data**","7bc0c3b4":"### **Conversion to ndarray for TensorFlow model building**","5721a1f0":"## **Kaggle's way**","e75bef8f":"### **Training data Normalization**","08df8dc4":"### **Separate the input from the labels\/output column**"}}