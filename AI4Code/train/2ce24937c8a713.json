{"cell_type":{"c8b121b5":"code","2b95727b":"code","69bb77f8":"code","3d9582f4":"code","40fe00e7":"code","18dbba5b":"code","276a3878":"code","b36824a7":"code","b5cf4cf7":"code","3dc99beb":"code","179dd06e":"code","53f97a22":"code","2dcb705f":"code","55d5d1aa":"code","610039d1":"code","afb9d97a":"code","2e778bbe":"code","763dd264":"markdown","78e8f6aa":"markdown","a9dfec08":"markdown","dc184e9c":"markdown"},"source":{"c8b121b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b95727b":"import torch\nfrom torch import nn\nfrom torch.utils.data.dataset import Dataset\nfrom torch.utils.data.dataloader import DataLoader\nfrom matplotlib import pyplot as plt","69bb77f8":"train_df = pd.read_csv(\"\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv\")","3d9582f4":"train_df","40fe00e7":"pixel_cols = list(i for i in train_df.columns if \"pixel\" in i)","18dbba5b":"train_df[pixel_cols]","276a3878":"img_array = train_df[pixel_cols].values","b36824a7":"img_array.shape","b5cf4cf7":"plt.imshow(img_array[0].reshape(28,28))","3dc99beb":"label = train_df.label.values","179dd06e":"label","53f97a22":"class FashionDS(Dataset):\n    def __init__(self, img_array, label):\n        self.img_array = img_array\n        self.label = label\n        \n    # you have to write a length function\n    def __len__(self):return self.img_array.__len__()\n    \n    # you have to write a getitem function to control the indexing\n    def __getitem__(self, idx):\n        img = self.img_array[idx].reshape(28,28)\n        label = self.label[idx]\n        return (img.astype(dtype=np.float32)-128)\/128, label","2dcb705f":"train_ds = FashionDS(img_array, label)","55d5d1aa":"train_ds[2]","610039d1":"train_dl = DataLoader(train_ds,batch_size=16,shuffle=True)\nx, y = next(iter(train_dl))","afb9d97a":"x.shape","2e778bbe":"y.shape","763dd264":"The official doc for [creating custom dataset](https:\/\/pytorch.org\/tutorials\/beginner\/basics\/data_tutorial.html#creating-a-custom-dataset-for-your-files)","78e8f6aa":"## Build pytorch dataset","a9dfec08":"Test **indexing**","dc184e9c":"# Creating pytorch custom dataset for fashion MNIST"}}