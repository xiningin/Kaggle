{"cell_type":{"226d6b01":"code","f8693a01":"code","b7013464":"code","a683e8c3":"code","42f33a8f":"code","f0b6300c":"code","43c54b80":"code","f72d1e75":"code","a07f5a4a":"code","20894bb6":"code","f1b7ea60":"code","3afbd8a1":"code","28c9014c":"code","90d24140":"code","1bad323f":"code","41447dba":"code","f6188421":"code","4a8074c3":"code","9c4a0346":"code","04e5db36":"code","7aea4439":"code","f4cece87":"code","8d38d47c":"code","f7a2b403":"code","27fb7bb1":"code","316d3af7":"code","a76ad343":"code","d779ec1e":"code","620995f3":"code","0cd93d01":"code","ecace512":"code","e3c3f2af":"code","b3a056d9":"code","46dea81e":"code","c0db02db":"code","fe87c68f":"code","96deb25e":"code","83ab3140":"code","36cb12b8":"code","b7b1bb09":"code","c2fa5b92":"code","8c846a54":"code","d053ba34":"code","317aa6de":"code","f3f01b91":"code","b595a2d7":"code","40129e18":"code","2fa24b9e":"code","7978657f":"code","85888f6b":"code","971e3885":"code","e910dbdd":"code","18f1d1b1":"code","90cdf508":"code","1dad0442":"code","a24de965":"code","a384afc0":"code","feca687d":"code","e12d84a8":"code","1cf71921":"code","5a4796b9":"code","1033c1f6":"code","d0303ef4":"code","22ddf2a6":"code","b891b988":"code","78ab55c9":"code","89c28b9c":"code","d951deb3":"code","d25e0d47":"code","208cd045":"code","c0d7e2c9":"code","71eaf580":"code","3e0ccafa":"code","91c8d3bd":"code","be4582a8":"code","2cc4cea1":"code","60560270":"code","1b6b7803":"code","f969c840":"code","e47a699a":"code","1821b86f":"code","0f8b02bf":"code","3d430c8c":"code","364b31d4":"code","7134039d":"markdown","bd3a0e51":"markdown","1ca663cf":"markdown","90887b8d":"markdown","3421c698":"markdown","5c9f7fe0":"markdown","e7b493d4":"markdown","1b31c3c8":"markdown","1b75da29":"markdown","b6b10b19":"markdown","7cd10518":"markdown","eae1d399":"markdown","90227490":"markdown","a61844cd":"markdown","abc8c44c":"markdown","d6d56ffb":"markdown","109f759d":"markdown","1281b0ef":"markdown","f8a5793a":"markdown","c0bb55a0":"markdown","88843b02":"markdown","7ca2114b":"markdown","51870dd0":"markdown","1d0cdfed":"markdown","2249e183":"markdown","766251b1":"markdown","00fbdc13":"markdown","08b80680":"markdown","532eaa8b":"markdown","346ad2f0":"markdown","55875fca":"markdown","dbcfb5ae":"markdown","4e834623":"markdown","82da8584":"markdown","2ffaf17c":"markdown","bb6756be":"markdown","a8009b02":"markdown","c7fbd5cd":"markdown","fff7d6d2":"markdown","31815e31":"markdown","7b067327":"markdown","ff9b0a3c":"markdown","ee7fccf4":"markdown","585f25d9":"markdown"},"source":{"226d6b01":"#import Python libraries\nimport pandas as pd #for DataFrames  -- resembles relational DB and SQL\nimport numpy as np #for mathematical operations -- resembles Matlab","f8693a01":"#to import the library which allows to plot and visualize the data in graph form\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport warnings\nwarnings.filterwarnings('ignore')","b7013464":"# to import Scikit-learn which is a linear model (Regrssion and SVM)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics","a683e8c3":"# set the path of the data file\nfilepath = \"..\/input\/costmedical.csv\"\ndf = pd.read_csv(filepath)","42f33a8f":"df.info()","f0b6300c":"type(df)","43c54b80":"# The number of rows and columns in this data frame\ndf.shape","f72d1e75":"# display the first 10 lines of the data\ndf.head(10)","a07f5a4a":"# list of column names\ndf.columns","20894bb6":"#the data type of each column\ndf.dtypes","f1b7ea60":"#dans ce case on va voir les diff\u00e9rents valeurs de type  Object ,\ndf.sex.unique()\n","3afbd8a1":"df.smoker.unique()\n","28c9014c":"df.region.unique()","90d24140":"#on g\u00e9neral unique() se fait sur les attribut de type object, mais aussi on peut le faire pour les autres types d'attributs mais ,elle est unitile\ndf.age.unique()","1bad323f":"df.describe()","41447dba":"df.corr()","f6188421":"df.corr()['charges'].sort_values()","4a8074c3":"#are there zero values in our data?\ndf.isnull().sum()","9c4a0346":"df.duplicated().sum()","04e5db36":"df.duplicated().shape","7aea4439":"df.drop_duplicates(keep='first').shape","f4cece87":"#we will now see the function value_counts () which allows to return the numbers of the unique values of an object\n# We use the value_counts () method to get the distribution of a particular column in the data block.\n# This method actually returns the absolute number of frequencies (default)\ndf.age.value_counts()","8d38d47c":"#to better see the data, we use the plots\nplt.figure(figsize=(12,5))\nplt.title(\"Distribution of age\")\nax = sns.distplot(df[\"age\"])","f7a2b403":"#we can also display the less frequent values\npd.value_counts(df.age).tail(n=4)","27fb7bb1":"# then only show the 10 most frequent values\npd.value_counts(df.age).head(n=10)","316d3af7":"gender_list = [df[df.sex == \"female\"].sex.value_counts().tolist(), df[df.sex == \"male\"].sex.value_counts().tolist()]\ngender_list = [gender_list[0][0], gender_list[1][0]]\ngender_list","a76ad343":"labels = [\"Female\", \"Male\"]\nvalues = gender_list\ntrace = go.Pie(labels=labels, values=values,\n               hoverinfo='label+percent', textinfo='percent', \n               textfont=dict(size=20),\n               )\ndata = [trace]\nlayout = go.Layout(title='Rate of Males & Females')\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","d779ec1e":"df.bmi.value_counts()","620995f3":"plt.figure(figsize=(12,5))\nplt.title(\"Distribution of BMI\")\nax = sns.distplot(df[\"bmi\"])","0cd93d01":"df.children.value_counts()","ecace512":"df.children.value_counts().plot(kind='bar')","e3c3f2af":"df.smoker.value_counts()","b3a056d9":"df.smoker.value_counts().plot(kind='bar')","46dea81e":"df.region.value_counts()","c0db02db":"df.region.value_counts().plot(kind='bar')","fe87c68f":"df.charges.value_counts()","96deb25e":"plt.figure(figsize=(12,5))\nplt.title(\"Distribution of charges\")\nax = sns.distplot(df[\"charges\"],color = 'y')","83ab3140":"# We call the describe () method to get simple statistical summaries of ALL the numeric columns of the DataFrame\ndf.describe()","36cb12b8":"# even here we can get simple statistical summaries for object type columns\ndf.describe(include=['object'])","b7b1bb09":"df.describe(include=['int64'])","c2fa5b92":"#we use the corr method to calculate the linear correlation coefficient of two NUMERIC attributes\ndf.corr()","8c846a54":"# We use the crosstab () method to display the co-occurrence frequency table of two attributes.\npd.crosstab(df.age,df.children)","d053ba34":"pd.crosstab(df.age,df.smoker)","317aa6de":"from sklearn.preprocessing import LabelEncoder\n#sex\nle = LabelEncoder()\nle.fit(df.sex.drop_duplicates()) \ndf.sex = le.transform(df.sex)\n# smoker or not\nle.fit(df.smoker.drop_duplicates()) \ndf.smoker = le.transform(df.smoker)\n#region\nle.fit(df.region.drop_duplicates()) \ndf.region = le.transform(df.region)","f3f01b91":"df.corr()['charges'].sort_values()","b595a2d7":"charges_sorted = df.copy()\nsort_index = (df['charges'].sort_values(ascending=False)).index.values\ncharges_sorted = df.reindex(sort_index)\ncharges_sorted.reset_index(inplace=True)\ncharges_sorted.head()","40129e18":"trace0 = go.Scatter(\n    x = charges_sorted.index,\n    y = charges_sorted[charges_sorted.smoker == 1].charges,\n    name = \"Smokers\",\n    mode='lines',\n    marker=dict(\n        size=12,\n        color = \"red\", #set color equal to a variable\n    )\n)\n\ntrace1 = go.Scatter(\n    x = charges_sorted.index,\n    y = charges_sorted[charges_sorted.smoker == 0].charges,\n    name = \"Non-Smokers\",\n    mode='lines',\n    marker=dict(\n        size=12,\n        color = \"green\", #set color equal to a variable\n    )\n)\n\n\ndata = [trace0,trace1]\nlayout = go.Layout(title = 'Medical Costs of Smoker vs Non-Smokers',\n              xaxis = dict(title = 'Persons'),\n              yaxis = dict(title = 'Medical Costs'),)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","2fa24b9e":"dict_bmi= {'low' : df[df.bmi < 18.5].charges.mean(),\n               'normal' : df[(df.bmi > 18.5) & (df.bmi < 24.9)].charges.mean(),\n               'high' : df[df.bmi > 24.9].charges.mean(),\n             }\ndf_bmi = pd.DataFrame.from_dict(dict_bmi, orient='index')\ndf_bmi.reset_index(inplace=True)\ndf_bmi.columns = ['bmi', 'mean_value']\ndf_bmi","7978657f":"my_color = ['rgb(220,250,39)','rgb(102,189,99)','rgb(115,48,39)']\ntrace=go.Bar(\n            x=df_bmi.bmi,\n            y=df_bmi.mean_value,\n            text=\"Mean Medical Costs\",\n            marker=dict(\n                color=my_color,\n                line=dict(\n                color=my_color,\n                width=1.5),\n            ),\n            opacity=0.7)\n\ndata = [trace]\nlayout = go.Layout(title = 'Body mass index',\n              xaxis = dict(title = 'BMI'),\n              yaxis = dict(title = 'mean charges'))\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","85888f6b":"plt.figure(figsize=(12,5))\nplt.title(\"Distribution de charges pour les patients \u00e0 un BMI= low\")\nax = sns.distplot(df[(df.bmi < 18.5)]\n                  ['charges'], color = 'm')","971e3885":"plt.figure(figsize=(12,5))\nplt.title(\"Distribution of charges for patients with BMI = normal\")\nax = sns.distplot(df[(df.bmi > 18.5) & (df.bmi < 24.9)]['charges'], color = 'b')","e910dbdd":"plt.figure(figsize=(12,5))\nplt.title(\"Distribution of charges for patients with BMI=high\")\nax = sns.distplot(df[df.bmi > 24.9]['charges'], color = 'y')","18f1d1b1":"dict_regions= {'southwest' : df[df.region == 0].charges.mean(),\n              'southeast' : df[df.region == 1].charges.mean(),\n              'northwest' : df[df.region == 2].charges.mean(),\n              'northeast' : df[df.region == 3].charges.mean()\n             }\ndf_regions = pd.DataFrame.from_dict(dict_regions, orient='index')\ndf_regions.reset_index(inplace=True)\ndf_regions.columns = ['regions', 'charges']\n\ndf_regions","90cdf508":"import plotly.graph_objs as go\n\ntrace=go.Bar(\n            x=df_regions.regions,\n            y=df_regions.charges,\n            text=\"Mean Medical Costs\",\n            opacity=0.8)\n\ndata = [trace]\nlayout = go.Layout(title ='Medical Cost Means by Regions',\n              xaxis = dict(title = 'Region'),\n              yaxis = dict(title = 'Medical Cost'))\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","1dad0442":"dict_age= {'youth' : df[(df.age > 18)&(df.age < 30 )].charges.mean(),\n               'adult' : df[(df.age > 30)&(df.age < 50 )].charges.mean(),\n               'elders' : df[(df.age > 50)&(df.age < 70 )].charges.mean(),\n             }\ndf_age = pd.DataFrame.from_dict(dict_age, orient='index')\ndf_age.reset_index(inplace=True)\ndf_age.columns = ['age', 'mean_value']\ndf_age","a24de965":"my_color = ['rgb(150,150,155)','rgb(107,189,99)','rgb(15,148,139)']\ntrace=go.Bar(\n            x=df_age.age,\n            y=df_age.mean_value,\n            text=\"Mean Medical Costs\",\n            marker=dict(\n                color=my_color,\n                line=dict(\n                color=my_color,\n                width=1.5),\n            ),\n            opacity=0.7)\n\ndata = [trace]\nlayout = go.Layout(title = 'age category index',\n              xaxis = dict(title = 'age'),\n              yaxis = dict(title = 'mean charges'))\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","a384afc0":"sns.set_style('ticks')\ncol_list = ['light lavender','denim']\ncol_list_palette = sns.xkcd_palette(col_list)\nsns.set_palette(col_list_palette)\na = sns.FacetGrid(df, col='sex',hue='sex',height =6,aspect= 0.9)                  \na.map(plt.scatter, 'age','charges')\na.set_axis_labels('Age', 'Medical Costs in Dollars')\nplt.suptitle('Medical Costs by Age & Sex', fontsize = 25);plt.tight_layout(rect=[0, 0.03, 1, 0.95])","feca687d":"# Medical Cost by Age and Smoker\/Non-Smoker\ncol_list = [\"shit\",\"pistachio\"]\ncol_list_palette = sns.xkcd_palette(col_list)\nsns.set_palette(col_list_palette)\na = sns.FacetGrid(df, col='smoker',hue= 'smoker',height =6,aspect= 0.9)\na.map(plt.scatter, 'age','charges')\nplt.suptitle('Medical Costs by Age & Smoker', fontsize = 25)\na.set_axis_labels('Age', 'Medical Costs in Dollars')\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])","e12d84a8":"from sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics","1cf71921":"df.head()","5a4796b9":"df.keys()","1033c1f6":"# In this part, we will use the entire data as training and test sets.\n\nx = df.drop(['charges'], axis = 1)\ny = df.charges","d0303ef4":"x_train=x\ny_train=y\nx_test=x\ny_test=y","22ddf2a6":"from sklearn.linear_model import LinearRegression","b891b988":"# create object of LinearRegression class\nmodel1 = LinearRegression()","78ab55c9":"# call learning algorithm with training data\nmodel1.fit(x_train, y_train)","89c28b9c":"# use extracted pattern to make predictions on the test set\nypred1 = model1.predict(x_test)","d951deb3":"type(ypred1)","d25e0d47":"ypred1.shape","208cd045":"# measure accuracy on test test\nrmse1 = np.sqrt(metrics.mean_squared_error(y_test, ypred1))\nmae1 = metrics.mean_absolute_error(y_test, ypred1)","c0d7e2c9":"print(\"Root mean squared error: %.3f\" % rmse1)\nprint('Mean Absolute Error: %.3f' % mae1)","71eaf580":"# Make sure this value is identical to output of previous cell\nypred1[0]","3e0ccafa":"    # read documentation\n?train_test_split","91c8d3bd":"Xtrain, Xtest, ytrain, ytest = train_test_split( x, y, test_size=0.2)","be4582a8":"model2 = LinearRegression()","2cc4cea1":"model2.fit(Xtrain, ytrain)","60560270":"ypred2 = model2.predict(Xtest)","1b6b7803":"# measure accuracy on test test\nrmse2 = np.sqrt(metrics.mean_squared_error(ytest, ypred2))\nmae2 = metrics.mean_absolute_error(ytest, ypred2)","f969c840":"print(\"Root mean squared error: %.3f\" % rmse2)\nprint('Mean Absolute Error: %.3f' % mae2)","e47a699a":"print(rmse1,mae1)\nprint(rmse2,mae2)","1821b86f":"pd.DataFrame( {'model 1 coefficient': model1.coef_, 'model 2 coefficient': model2.coef_})","0f8b02bf":"df = pd.DataFrame({'predicted_price':ypred2, 'true_price':ytest})\ndf.head(10)","3d430c8c":"\n\nx_train1,x_test1,y_train1,y_test1 = train_test_split(x,y, random_state = 0)\nlr = LinearRegression().fit(x_train1,y_train1)\n\ny_train_pred = lr.predict(x_train1)\ny_test_pred = lr.predict(x_test1)\n\nprint(lr.score(x_test1,y_test1))","364b31d4":"df.plot.scatter(x='true_price', y='predicted_price', c= ['#feb3b3', '#c5feb3'],title = 'predicted price vs. true price')\n","7134039d":"very good choose when we have not empty values in the data, let's look at our data to understand something about it. Since we are mainly interested in the amount of the costs","bd3a0e51":"Exploration of a data set dedicated to the treatment costs of different patients for the prediction of these medical costs in relation to their age, bmi, ...","1ca663cf":"### 6. Medical Cost by Age and Smoker\/Non-Smoker\n","90887b8d":"### 4. Medical Costs Means by Age\n","3421c698":"0: female \n1:male","5c9f7fe0":"###### * Note that the most common ages are between 18 and 23.","e7b493d4":"notice that all attributes are numeric","1b31c3c8":"- The attributes are well structured, we do not have attributes nor redundant nor relevant\n- to clearly see the coorelation between the attributes, it must convert the attribute of the object type, since corr () makes it possible to calculate the linear correlation coefficient of two attributes NUMERIC\n- use of librarian lableEncoder","1b75da29":"### * Defining business objectives\n\n","b6b10b19":"1. ![![image.png](attachment:image.jpg )](https:\/\/www.healthhub.sg\/sites\/assets\/Assets\/Programs\/bmi\/image01.gif)","7cd10518":"#### Divide data into training and test subsets\nuse the ``train_test_split`` method to randomly divide the data into 80% training instances and 20% test instances.  The result should be stored in four variables: ``Xtrain``, ``ytrain``, ``Xtest``, ``ytest``\n","eae1d399":"### Experiment 1: linear regression method with same training and test data","90227490":"![![image.png](attachment:image.jpg =20*10)](http:\/\/www.lemondedesados.fr\/wp-content\/uploads\/2016\/10\/stop-620x350.jpg)","a61844cd":"0: smoker \n1: no_smoker","abc8c44c":"###   2. Bmi compared to average medical costs (low-normal-high )\n\n","d6d56ffb":"### Visualize the relationship between attributes\nThis is useful for detecting * irrelevant * and * redundant * attributes.","109f759d":"### Visualize distribution of attribute values\n\n","1281b0ef":"![![image.png](attachment:image.jpg =100*300)](https:\/\/cdn.psychologytoday.com\/sites\/default\/files\/styles\/image-article_inline_full\/public\/field_blog_entry_images\/Longevity%20Cartoon_1.jpg?itok=X89Hn_1J)","f8a5793a":"* => In smoking patients, the cost of treatment increases almost twice compared to non-smokers","c0bb55a0":"pour savoir les valeurs dupliquer,on utilise , la fonction duplicated()","88843b02":"##### - Check the missing value\n","7ca2114b":"### 4.Medical Costs Means by Regions\n","51870dd0":"### Explore the data\n","1d0cdfed":"##### - Check duplicate values\n","2249e183":"END.","766251b1":"![![image.png](attachment:image.jpg =100*300)](https:\/\/www.sare.org\/extension\/htmlmap\/design\/standard\/images\/SARE_USA-292.png)","00fbdc13":"## Pattern Extraction Experiments","08b80680":"* According to the correlation chart, we notice that there is a strong coorelation between the loads and the smoking and non-smoking patients","532eaa8b":"## 1- DATA PREPARATION","346ad2f0":"* In order to build our forecasting model, we will have to opt for using CRISP-DM methodology.\n* Goal is to transform data into knowledge.\n* for any project and any data, and to build a knowledge with these data, we must first go through these 4 steps:\n    1. Get the data\n    2. Prepare the data ( Data exploration, Data cleaning, Data reduction, Data transformation)\n    3. Extract pattern\n    4. Evaluate pattern\n\n\n","55875fca":"### 5.Medical Cost by Age and Sex\n","dbcfb5ae":"##### importing libraries\n\n","4e834623":"##### in this part we will get and understand the data","82da8584":"## Evaluate pattern","2ffaf17c":"**Principle of the DM**\n","bb6756be":"###   1. Medical Costs of Smoker vs Non-Smokers\n","a8009b02":"We want to know how many missing values there are in each attribute (column).\nTo do this, use the functions isna or isnull","c7fbd5cd":"### * Business understanding\n","fff7d6d2":"\n- oops, we have a duplicate value, it must eliminate (data cleansing phase)\n=> the function drop_duplicated () ","31815e31":"###### Today, we will explore a set of data dedicated to the treatment costs of different patients\n###### regression usage, svm","7b067327":"* Rendre les donn\u00e9es plus accessibles et compr\u00e9hensibles pour tous.\n* Provide rapid analyzes for various factors affecting medical costs.\n* use different prediction and classification algorithms\n* calculating and comparing evaluation measures\n\n\n","ff9b0a3c":"This will help us identify bad values and bad attributes ...\n","ee7fccf4":"## 1.Get Data","585f25d9":"\n# Medical Cost\n\n"}}