{"cell_type":{"4694c5c2":"code","19602ce1":"code","443b8ee1":"code","2c8c16bf":"code","25f2e0a6":"code","9b4405ba":"code","c64b155c":"code","00683fc8":"code","18c51564":"code","1233bf48":"code","54f77cd7":"code","80f024bb":"code","576648c2":"code","f153e37d":"code","4fea70ad":"code","9613db66":"code","f0aeef72":"code","a57fa5e8":"code","0a3eb80f":"code","ec81fadf":"code","231fa2af":"markdown","b0780c9c":"markdown","42f132a9":"markdown","878bd98a":"markdown","2a7aa163":"markdown","b9fc223c":"markdown","6dd8e290":"markdown","f8f325d4":"markdown"},"source":{"4694c5c2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sc\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","19602ce1":"df = pd.read_csv('..\/\/input\/hotel-booking-demand\/hotel_bookings.csv')\nprint(df.shape)\ndf.head()","443b8ee1":"df.describe()","2c8c16bf":"# set up aesthetic design\nplt.style.use('seaborn')\nsns.set_style('whitegrid')\n\n# create NA plot for train data\nplt.figure(figsize = (15,3)) # positioning for 1st plot\ndf.isnull().mean().sort_values(ascending = False).plot.bar(color = 'blue')\nplt.axhline(y=0.1, color='r', linestyle='-')\nplt.title('Missing values average per columns in data', fontsize = 20)\nplt.show()","25f2e0a6":"df['country'] = df['country'].fillna('missing')\ndf['company'] = df['company'].fillna('missing')\ndf['agent'] = df['agent'].fillna(df['agent'].mean())\ndf['children'] = df['children'].fillna(0)","9b4405ba":"plt.figure(figsize=(15,15))\nmask = np.zeros_like(df.corr())\nmask[np.triu_indices_from(mask)] = 1\nsns.heatmap(df.corr(), mask = mask, annot = True)\nplt.show()","c64b155c":"categories_columns = list(df.columns[df.dtypes == 'object'])\n#categories_columns.append('agent')\n#categories_columns.append('is_canceled')\n\n\nnumeric_columns = list(set(df.columns) - set(categories_columns))\nprint('categories columns are ',categories_columns)\nprint(' ')\nprint('numeric columns are ', numeric_columns)","00683fc8":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ndf_cat = df.loc[:,categories_columns]\ndf_cat = df_cat.drop(['company'], axis = 1)\ndf_cat.head()","18c51564":"\nfor col in categories_columns:\n    print(col)\n    try:\n        df_cat[col] = le.fit_transform(df_cat[col])\n    except:\n        print('fail at ',col)\n        pass","1233bf48":"df = df.loc[:,numeric_columns]\ndf = pd.concat([df, df_cat], axis = 1)\n\n# remove due to high correlation to cancel\ndf = df.drop(['reservation_status','reservation_status_date'], axis = 1)\ndf.head()","54f77cd7":"import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nX = df.drop(['is_canceled'], axis=1)\nY = df['is_canceled']\n\nX_tr, X_test, y_tr, y_test = train_test_split(X,Y, test_size=0.2)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X_tr, y_tr, test_size=0.2)\n\nlgb_train = lgb.Dataset(X_train, y_train)\nlgb_eval = lgb.Dataset(X_valid, y_valid)","80f024bb":"# specify parameters\nparams = {\n    'boosting_type': 'gbdt',\n    'objective': 'binary',\n    'metric': ['auc','binary_logloss'],\n    'feature_fraction': 1,\n    'bagging_fraction':1,\n    'verbose': -1\n}\n\n# training\nprint('start training')\ngbm = lgb.train(params, lgb_train,\n               num_boost_round = 20,\n               valid_sets = lgb_eval,\n               early_stopping_rounds = 5)","576648c2":"lgb.plot_importance(gbm)","f153e37d":"y_pred = gbm.predict(X_test)\ny_pred[y_pred <= 0.5] = 0\ny_pred[y_pred>0.5] = 1\ny_pred[:10]\naccuracy_score(y_test, y_pred)","4fea70ad":"from sklearn.svm import SVC\n\nsvc = SVC(kernel = 'linear')\nmodel = svc.fit(X_train, y_train)","9613db66":"model.score(X_train,y_train)","f0aeef72":"model.predict(X_test)\n\naccuracy_score(y_test, y_pred)","a57fa5e8":"from sklearn.metrics import confusion_matrix\n\nprint(confusion_matrix(y_test, y_pred))","0a3eb80f":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier()\n\nmodel_rf = rf.fit(X_train, y_train)\ny_pred = model_rf.predict(X_test)\n\nprint('accuracy = ',accuracy_score(y_test, y_pred))","ec81fadf":"features = X_train.columns\nimportances = model_rf.feature_importances_\n\nindices = np.argsort(importances)\n\nplt.figure()\nplt.barh(range(len(indices)), importances[indices], color = 'b',alpha=0.5)\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.title('Feature Importances')\nplt.show()","231fa2af":"Now transform the data","b0780c9c":"Total 32 columns with 119,390 observation.","42f132a9":"### **Feature importance****","878bd98a":"Build statistic model for this dataset.\n\nExplore and transform this data using pandas.\n\nVisualize data using Matplotlib and Seaborn.\n\nBuild predictive model using sklearn, lightgbm, tensorflow from scrash.","2a7aa163":"### **Objective**","b9fc223c":"### **Data overview**","6dd8e290":"## **Naive model**","f8f325d4":"The prevelence of `is_canceled` is 37%. \n\nP(theta | is_canceled) = posterior\n\nP(is_canceled | theta) = likelihood = Bernoulli(theta)\n\nP(theta) = prior\n\nP(is_canceled) = evident = 37%."}}