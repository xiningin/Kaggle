{"cell_type":{"791b78cb":"code","622b5595":"code","d37866f7":"code","039d6a12":"code","e882088c":"code","a68129dd":"code","16e6d47d":"code","f90f0c1a":"code","496e70ea":"code","1f5a4933":"code","6204b446":"code","63c487d6":"code","72ff56c7":"code","d9ae7bf1":"code","288e6509":"code","df4ee160":"code","fd0c8b8f":"code","83f1186f":"code","223a501c":"code","bbcc3ff9":"code","32c36646":"code","abfa41a9":"code","3656fde1":"code","21bba1b2":"code","82e45c42":"code","b6c1c860":"code","a47668d0":"code","c78a678c":"code","87f5b875":"code","179e0215":"code","375bcb5f":"code","80433334":"code","e608dfa3":"code","96a449f2":"code","5b98bad4":"code","b54b1797":"code","660228bc":"code","a228d845":"code","4fa9db35":"code","c4d3d866":"code","00c62c3b":"code","61feb359":"code","08fb38d0":"code","9ec98805":"code","bbe7dcd4":"code","5560c495":"code","aecda50a":"code","9c1a4b73":"code","f730273d":"code","9298ddbb":"code","09609c55":"code","8bb29c69":"code","eb0a0e46":"code","37854e8f":"code","51a4a01a":"code","520cb8bd":"code","6aaf37b0":"code","fb726fd0":"code","9183ce00":"code","92208c11":"code","b6135c87":"code","056de643":"code","b4fbe7ea":"code","9a90dc01":"code","5d2d1f32":"code","261dfb16":"code","0e5186d6":"code","bb79fbeb":"code","b658c08f":"code","9010b207":"code","f3eafa43":"code","28b4e9b8":"markdown","190cfefd":"markdown","e96c8ab2":"markdown","7fa73893":"markdown","6e69b5c1":"markdown","876fac2e":"markdown","4bb862c5":"markdown","c116c701":"markdown","02e70a3e":"markdown","705ab42f":"markdown","eed97002":"markdown","45002c72":"markdown","e156b2ac":"markdown","757e3078":"markdown","bdb27d72":"markdown","72a9c31c":"markdown","16757f48":"markdown","71d67286":"markdown","e5bb35f4":"markdown","acc5867d":"markdown","3e83b42d":"markdown","1b425d14":"markdown","dad38002":"markdown","a66407a7":"markdown","82c7bb61":"markdown","d69490d3":"markdown","54fc1b28":"markdown","7eaec8b2":"markdown","92dace47":"markdown","a6b60e00":"markdown","10b5a1ec":"markdown","ec02bee8":"markdown","8e915202":"markdown","97a549a2":"markdown","408d7be6":"markdown","8cd15636":"markdown","76c80c0b":"markdown","20ad64db":"markdown","5c3db587":"markdown","89ea1200":"markdown","0c8c416a":"markdown","c3506c33":"markdown","121c9ca2":"markdown","b308e76c":"markdown"},"source":{"791b78cb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as matplot\nimport seaborn as sns\n%matplotlib inline","622b5595":"train_data=pd.read_csv(\"..\/input\/univai-hack-data\/Training Data.csv\")\ntest_data=pd.read_csv(\"..\/input\/univai-hack-data\/Test Data.csv\")","d37866f7":"print(\"Shape of train :\", train_data.shape)\nprint(\"Shape of test :\", test_data.shape)","039d6a12":"train_data.head()","e882088c":"train_data.info()","a68129dd":"train_data.isnull().any()","16e6d47d":"test_data.head()","f90f0c1a":"test_data.isnull().any()","496e70ea":"train_data['risk_flag'].value_counts()","1f5a4933":"\n\nrisk = (30996\/252000)*100\nprint(\"Percentage of Employees at risk is {:.2f}%\".format(risk))","6204b446":"\n\nno_risk = (221004\/252000)*100\nprint(\"Percentage of Employees at no risk is {:.2f}%\".format(no_risk))","63c487d6":"\n\nplt.hist(train_data['risk_flag'])\nplt.title('plot to show the gap in Flagged and Non-Flagged Employees')\nplt.xlabel('0 - No Risk and 1- Risk', fontsize = 20)\nplt.ylabel('count',fontsize= 15)\nplt.show()","72ff56c7":"# checking the distribution of age of Employees in the company\n\nsns.distplot(train_data['age'], color = 'green')\nplt.title('Distribution of Age of Employees', fontsize = 30)\nplt.xlabel('Age', fontsize = 20)\nplt.ylabel('count',fontsize=15)\nplt.show()","d9ae7bf1":"boxplot=train_data.boxplot(column=['age'])","288e6509":"train_test_data=[train_data, test_data]\n\nfor dataset in train_test_data: \n\n     dataset.loc[(dataset['age'] >= 20) & (dataset['age']<35), 'age'] = 0 \n\n     dataset.loc[(dataset['age'] >= 35) & (dataset['age'] < 50), 'age'] = 1 \n\n     dataset.loc[(dataset['age'] >= 50) & (dataset['age'] < 65), 'age'] = 2 \n\n     dataset.loc[(dataset['age'] >= 65) , 'age'] = 3 ","df4ee160":"train_data.head()","fd0c8b8f":"def bar_chart(feature):\n    risk = train_data[train_data['risk_flag']==1][feature].value_counts()\n    no_risk = train_data[train_data['risk_flag']==0][feature].value_counts()\n    df = pd.DataFrame([risk,no_risk])\n    df.index = ['risk','no risk']\n    df.plot(kind='bar',stacked=True, figsize=(20,8))","83f1186f":"test_data.head()","223a501c":"bar_chart('age')","bbcc3ff9":"boxplot=train_data.boxplot(column=['experience'])","32c36646":"train_test_data=[train_data, test_data]\n\nfor dataset in train_test_data: \n\n     dataset.loc[(dataset['experience']<5), 'experience'] = 0 \n\n     dataset.loc[(dataset['experience'] >= 5) & (dataset['experience'] < 10), 'experience'] = 1 \n\n     dataset.loc[(dataset['experience'] >= 10) & (dataset['experience'] < 15), 'experience'] = 2 \n\n     dataset.loc[(dataset['experience'] >= 15) , 'experience'] = 3 ","abfa41a9":"train_data.head()","3656fde1":"test_data.head()","21bba1b2":"bar_chart('experience')","82e45c42":"bar_chart('married')","b6c1c860":"train_data['house_ownership'].value_counts()","a47668d0":"bar_chart('house_ownership')","c78a678c":"\n\ntrain_data['married'].value_counts()","87f5b875":"# plotting a pie chart\n\nsize = [226272, 25728]\nlabels = \"single\", \"married\"\ncolors = ['yellow', 'pink']\nexplode = [0, 0.1]\n\nplt.rcParams['figure.figsize'] = (8, 8)\nplt.pie(size, labels = labels, colors = colors, explode = explode, shadow = True, autopct = \"%.2f%%\")\nplt.title('A Pie Chart Representing marital status', fontsize = 30)\nplt.axis('off')\nplt.legend()\nplt.show()\n","179e0215":"\n\ntrain_data['car_ownership'].value_counts()","375bcb5f":"\n\nsize = [226272, 25728]\nlabels = \"no\", \"yes\"\ncolors = ['red', 'blue']\nexplode = [0, 0.1]\n\nplt.rcParams['figure.figsize'] = (8, 8)\nplt.pie(size, labels = labels, colors = colors, explode = explode, shadow = True, autopct = \"%.2f%%\")\nplt.title('A Pie Chart Representing car owner status', fontsize = 30)\nplt.axis('off')\nplt.legend()\nplt.show()","80433334":"\n\ndata = pd.crosstab(train_data['married'], train_data['risk_flag'])\ndata.div(data.sum(1).astype('float'), axis = 0).plot(kind = 'bar', stacked = True, figsize = (7, 5), color = ['pink', 'yellow'])\n\nplt.title('Dependency of Marriage in determining Risk of Employees', fontsize = 30)\nplt.xlabel('married', fontsize = 25)\nplt.legend()\nplt.show()\n","e608dfa3":"\n\ndata = pd.crosstab(train_data['car_ownership'], train_data['risk_flag'])\ndata.div(data.sum(1).astype('float'), axis = 0).plot(kind = 'bar', stacked = True, figsize = (7, 5), color = ['green', 'yellow'])\n\nplt.title('Dependency of Car in determining Risk of Employees', fontsize = 30)\nplt.xlabel('Car Owned', fontsize = 25)\nplt.legend()\nplt.show()","96a449f2":"pip install wordcloud","5b98bad4":"\n\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\n\nstopword = set(STOPWORDS)\n\nwordcloud = WordCloud(background_color = 'black', stopwords = stopword).generate(str(train_data['profession']))\n\nplt.rcParams['figure.figsize'] = (12, 8)\nprint(wordcloud)\nplt.imshow(wordcloud)\nplt.title('Most Popular profession', fontsize = 30)\nplt.axis('off')\nplt.show()","b54b1797":"\n\nplt.rcParams['figure.figsize'] = (20, 10)\nsns.countplot(train_data['state'], color = 'yellow')\nplt.title('Different city in the company', fontsize = 30)\nplt.xticks(rotation = 60)\nplt.xlabel('Region Code', fontsize = 15)\nplt.ylabel('count', fontsize = 15)\nplt.show()","660228bc":"\n\nsns.distplot(train_data['current_job_years'], color = 'green')\nplt.title('Distribution of length of service among the Employees', fontsize = 30)\nplt.xlabel('Length of Service in years', fontsize = 15)\nplt.ylabel('count')\nplt.show()","a228d845":"train_data['house_ownership'].value_counts().sort_values().plot.bar(color = 'violet', figsize = (15, 7))\nplt.title('Distribution of house of the Employees', fontsize = 30)\nplt.xlabel('House', fontsize = 15)\nplt.ylabel('count')\nplt.show()","4fa9db35":"\n\nsns.distplot(train_data['current_house_years'], color = 'green')\nplt.title('Distribution of house years among the Employees', fontsize = 30)\nplt.xlabel('Length of Service in years', fontsize = 15)\nplt.ylabel('count')\nplt.show()","c4d3d866":"boxplot=train_data.boxplot(column=['current_house_years'])","00c62c3b":"train_data['income'].describe()","61feb359":"train_test_data=[train_data, test_data]\n\nfor dataset in train_test_data: \n\n     dataset.loc[(dataset['income']<2612345), 'income'] = 0 \n\n     dataset.loc[(dataset['income'] >= 2612345) & (dataset['income'] < 5212345), 'income'] = 1 \n\n     dataset.loc[(dataset['income'] >= 5212345) & (dataset['income'] < 7512345), 'income'] = 2 \n\n     dataset.loc[(dataset['income'] >= 7512345) , 'income'] = 3 ","08fb38d0":"train_data.head()","9ec98805":"test_data.head()","bbe7dcd4":"bar_chart('income')","5560c495":"# checking dependency of different regions in promotion\n\ndata = pd.crosstab(train_data['state'], train_data['risk_flag'])\ndata.div(data.sum(1).astype('float'), axis = 0).plot(kind = 'bar', stacked = True, figsize = (20, 8), color = ['lightblue', 'purple'])\n\nplt.title('Dependency of state in determining Promotion of Employees', fontsize = 30)\nplt.xlabel('Different state of the Company', fontsize = 20)\nplt.legend()\nplt.show()","aecda50a":"data = pd.crosstab(train_data['current_job_years'], train_data['risk_flag'])\ndata.div(data.sum(1).astype('float'), axis = 0).plot(kind = 'bar', stacked = True, figsize = (20, 8), color = ['lightblue', 'purple'])\n\nplt.title('Dependency of current job years in determining risk of Employees', fontsize = 30)\nplt.xlabel('Different state of the Company', fontsize = 20)\nplt.legend()\nplt.show()","9c1a4b73":"data = pd.crosstab(train_data['current_house_years'], train_data['risk_flag'])\ndata.div(data.sum(1).astype('float'), axis = 0).plot(kind = 'bar', stacked = True, figsize = (20, 8), color = ['lightblue', 'purple'])\n\nplt.title('Dependency of current job years in determining risk of Employees', fontsize = 30)\nplt.xlabel('Different state of the Company', fontsize = 20)\nplt.legend()\nplt.show()","f730273d":"data = pd.crosstab(train_data['profession'], train_data['risk_flag'])\ndata.div(data.sum(1).astype('float'), axis = 0).plot(kind = 'bar', stacked = True, figsize = (20, 8), color = ['orange', 'lightgreen'])\n\nplt.title('Dependency of Departments in determining Promotion of Employees', fontsize = 30)\nplt.xlabel('Different Departments of the Company', fontsize = 20)\nplt.legend()\nplt.show()","9298ddbb":"train_data.drop(columns='city',inplace=True)","09609c55":"train_data.head()","8bb29c69":"test_data.drop(columns='city',inplace=True)","eb0a0e46":"test_data.head()","37854e8f":"\ntrain_data.drop(columns=['Id'],inplace=True)\n\ntrain_data.columns","51a4a01a":"train_data.head()","520cb8bd":"\n\nemp_id = test_data['id']\n\n# removing the employee_id column\n\ntest_data = test_data.drop(['id'], axis = 1)\n\ntest_data.columns","6aaf37b0":"\n\nx_test = test_data\n\nx_test.columns","fb726fd0":"\n\nx_test = pd.get_dummies(x_test)\n\nx_test.columns","9183ce00":"\n\nx = train_data.iloc[:, :-1]\ny = train_data.iloc[:, -1]\n\nprint(\"Shape of x:\", x.shape)\nprint(\"Shape of y:\", y.shape)","92208c11":"\n\nx = pd.get_dummies(x)\n\nx.columns","b6135c87":"pip install imblearn","056de643":"from imblearn.over_sampling import SMOTE\n\nx_sample, y_sample = SMOTE().fit_resample(x, y.values.ravel())\n\nx_sample = pd.DataFrame(x_sample)\ny_sample = pd.DataFrame(y_sample)\n\n# checking the sizes of the sample data\nprint(\"Size of x-sample :\", x_sample.shape)\nprint(\"Size of y-sample :\", y_sample.shape)","b4fbe7ea":"\n\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_valid, y_train, y_valid = train_test_split(x_sample, y_sample, test_size = 0.2, random_state = 0)\n\nprint(\"Shape of x_train: \", x_train.shape)\nprint(\"Shape of x_valid: \", x_valid.shape)\nprint(\"Shape of y_train: \", y_train.shape)\nprint(\"Shape of y_valid: \", y_valid.shape)","9a90dc01":"\n\nfrom sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test  = sc.transform(x_test)\nx_valid = sc.transform(x_valid)","5d2d1f32":"\n\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components = None)\nx_train = pca.fit_transform(x_train)\nx_test = pca.transform(x_test)\nx_valid = pca.transform(x_valid)\n","261dfb16":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import average_precision_score\n\nrfc = RandomForestClassifier()\nrfc.fit(x_train, y_train)\n\nrfc_pred = rfc.predict(x_test)\n\nprint(\"Training Accuracy :\", rfc.score(x_train, y_train))\n\nprint(\"Validation Accuracy :\", rfc.score(x_valid, y_valid))\n","0e5186d6":"from xgboost.sklearn import XGBClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import average_precision_score\n\nxgb = XGBClassifier()\nxgb.fit(x_train, y_train)\n\nxgb_pred = xgb.predict(x_test)\n\nprint(\"Training Accuracy :\", xgb.score(x_train, y_train))\n\nprint(\"Validation Accuracy :\", xgb.score(x_valid, y_valid))\n\n\n","bb79fbeb":"pip install lightgbm","b658c08f":"from lightgbm import LGBMClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import average_precision_score\n\nlgb = LGBMClassifier()\nlgb.fit(x_train, y_train)\n\nlgb_pred = lgb.predict(x_test)\n\nprint(\"Training Accuracy :\", lgb.score(x_train, y_train))\n\nprint(\"Validation Accuracy :\", lgb.score(x_valid, y_valid))\n\n","9010b207":"pip install catboost","f3eafa43":"from catboost import CatBoostClassifier\n\ncbc = CatBoostClassifier(learning_rate = 0.004, early_stopping_rounds = 100)\ncbc.fit(x_train, y_train)\n\ncbc_pred = cbc.predict(x_test)\n\nprint(\"Training Accuracy :\", rfc.score(x_train, y_train))\n\nprint(\"Validation Accuracy :\", rfc.score(x_valid, y_valid))\n\n\n","28b4e9b8":"Plotting pie chart","190cfefd":"**checking dependency of marriage over risk**","e96c8ab2":"**Oversampling of model**","7fa73893":"**checking the distribution of length of service**","6e69b5c1":"# 4) CAT boost","876fac2e":"**Spllitting of training set**","4bb862c5":"**Dividing the age column into different groups:**\n\n**0** denotes young people\n\n**1** denotes middle age employee\n\n**2** denotes more aged employee\n\n**3** denotes elderly employee","c116c701":"-> Feel free to leave any *suggestions* in the comments for the betterment of the notebook.\n\n-> Thank you for your time,**CHEERS**!\ud83c\udf1f","02e70a3e":"**Test Set Creation**","705ab42f":"# **Importing the libraries**","eed97002":"# 1) Random Forest Classifier","45002c72":"**removing the employee_id colum**","e156b2ac":"**Showcasing different states**","757e3078":"# Data Preprocessing","bdb27d72":"**checking dependency of car ownership over risk**","72a9c31c":"**Making a correlation function in form a bar chart**","16757f48":"*The graph shows that there is not much variation with age group with respect to the risk factor as all the age groups have equal distribution of risk of termination in proportion*","71d67286":"# END OF NOTEBOOK \u2764\u2764","e5bb35f4":"applying pca","acc5867d":"**finding the percentage of Employee at no risk**","3e83b42d":"**finding the percentage of employee at risk**","1b425d14":"# 3)Light Gradient Boosting","dad38002":"***Checking for the presence of NULL values*** ","a66407a7":"# **Data Analysis**","82c7bb61":"**One hot encoder for handiling Categorical Data**","d69490d3":"# **Loading the dataset**","54fc1b28":"**splitting x and y into train and validation sets**","7eaec8b2":"# **Employee at Risk!** \ud83d\udccc\n\nHere is my notebook on the classification problem of predicting the employees at risk, working with the dataset \n\nhttps:\/\/www.kaggle.com\/manasdalakoti\/univai-hack-data\n\n","92dace47":"**Hello everyone**,\n\nThis is my take on the binary classification of determining employees who are at a risk of termination or not.\n\nIt is a Binary Classification Problem. The tools used are:\n\n**Pandas** for data manipulation and ingestion\n\n**Numpy** for multidimensional array computing\n\n**Matplotlib** and seaborn for data visualization\n\n**Word Cloud** for geeting the most populare string\n\n**Imblearn** for oversampling of the model\n\n**Scikit** Learn for Data Preprocessing\n\n","a6b60e00":"**Searching for the most popular professions**","10b5a1ec":"*We can see that most of the employees have rented house follwed by owners and then non rented, but it's distribution of risk is eqaully spread out.*","ec02bee8":"**standard scaling**","8e915202":"*The distribution of age is pretty much balanced too*","97a549a2":"**saving the employee_id for further usage**","408d7be6":"# Data Visualization","8cd15636":"**Dividing the experience column into different groups:**\n\n**0** denotes intern\/novice\n\n**1** denotes a mid level experienced employee \n\n**2** denotes seasoned employee\n\n**3** denotes a veteran employee","76c80c0b":"**plotting a scatter plot**","20ad64db":"**Boxplot for determing IQR minimum and maximum**","5c3db587":"*performing statistical analysis of the income column*","89ea1200":"**Dropping city column**","0c8c416a":"**Dividing the income column into different groups:**\n\n**0** denotes intern\/novice\n\n**1** denotes a mid level earner employee \n\n**2** denotes handsome salary owner employee\n\n**3** denotes a veteran employee","c3506c33":" # 2) XG Boost Classifier","121c9ca2":"# For modelling:\n\n**Random Forest** Classifier: \n\n> Accuracy Reached: **95.74%**\n\n**XG Boost** Classifier:\n\n> Accuracy Reached: **93.17%**\n\n**Light Gradient Boosting**:\n\n> Accuracy Reached: **91.10%**\n\n**Cat Boost** classifier:\n\n> Accuracy Reached: **95.74%**","b308e76c":"# Modelling"}}