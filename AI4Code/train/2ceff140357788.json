{"cell_type":{"8e5f2a87":"code","89d2caa7":"code","e2dd3ca6":"code","4b8888fc":"code","36570151":"code","c42a2dea":"code","9fe0421e":"code","d32d1caf":"code","6d1ee418":"code","f190e5a6":"code","27673ee3":"code","c3e0da96":"code","952f0e86":"code","3ffd4c73":"code","2a4e1f33":"code","41ceeca4":"code","98fa42fe":"code","c86e85a6":"code","5aed5649":"code","ecd63fc7":"markdown","0ad244ea":"markdown","b7912654":"markdown","0ede3b80":"markdown","20cee126":"markdown","56ed261e":"markdown","a6ca5686":"markdown","ec47a348":"markdown","af86ce9d":"markdown","90476df7":"markdown","eee1af01":"markdown","2df8d45a":"markdown","3895b52c":"markdown","22e1f3ea":"markdown","22b48bae":"markdown","9e4c6dcd":"markdown","7999d3e8":"markdown","871d4ebc":"markdown"},"source":{"8e5f2a87":"import numpy as np # linear algebra libary\nimport pandas as pd # data processing libary\nimport matplotlib.pyplot as plt # visualization libary\nimport os # So we can see if we already saved a model\n\n# Deep Learning Libary\nfrom keras.models import Sequential, model_from_json\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Dense, Flatten\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import RMSprop\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.utils import to_categorical","89d2caa7":"training_dataset = pd.read_csv('..\/input\/train.csv')\ntesting_dataset = pd.read_csv('..\/input\/test.csv')","e2dd3ca6":"training_dataset.head()","4b8888fc":"X_train = np.array(training_dataset.drop(['label'], axis=1))\ny_train = np.array(training_dataset['label'])\nX_test = np.array(testing_dataset)","36570151":"def visualize_digits(data, n, true_labels, predicted_labels=[]):\n    fig = plt.figure()\n    plt.gray()\n    for i in range(n):\n        ax = plt.subplot(2, n, i+1)\n        plt.imshow(data[i].reshape(28, 28))\n        # disable axis\n        ax.get_xaxis().set_visible(False)\n        ax.get_yaxis().set_visible(False)\n        if len(predicted_labels)!=0:\n            ax.set_title('True: ' + str(true_labels[i]) + ' Predicted: ' + str(np.argmax(predicted_labels[i])))\n        else:\n            ax.set_title('True: ' + str(true_labels[i]))\n    fig.set_size_inches(np.array(fig.get_size_inches()) * n)\n    plt.show()","c42a2dea":"visualize_digits(X_train, 10, y_train)","9fe0421e":"X_train = X_train \/ 255\nX_test = X_test \/ 255","d32d1caf":"X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)\nX_test = X_test.reshape(X_test.shape[0], 28, 28, 1)","6d1ee418":"y_train = to_categorical(y_train, num_classes=10)","f190e5a6":"model = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(5,5), activation='relu', input_shape=(28,28,1)))\nmodel.add(Conv2D(filters=32, kernel_size=(5,5), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.25))\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.25))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(rate=0.5))\nmodel.add(Dense(10, activation='softmax'))","27673ee3":"optimizer = RMSprop(lr=0.001)\nlearning_rate_reduction = ReduceLROnPlateau(monitor='loss', patience=2, verbose=1, factor=0.3, min_lr=0.00001)","c3e0da96":"datagen = ImageDataGenerator(\n    rotation_range=10,\n    zoom_range=0.1,\n    width_shift_range=0.1,\n    height_shift_range=0.1)","952f0e86":"model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])","3ffd4c73":"history = model.fit_generator(datagen.flow(X_train, y_train, batch_size=64), epochs=10,\n                              verbose=2, steps_per_epoch=X_train.shape[0]\/\/64, \n                              callbacks=[learning_rate_reduction])","2a4e1f33":"plt.plot(history.history['loss'])","41ceeca4":"plt.plot(history.history['acc'])","98fa42fe":"scores = model.evaluate(X_train, y_train)\nscores","c86e85a6":"predictions = model.predict(X_train)\n\nvisualize_digits(X_train, 10, training_dataset['label'], predictions)","5aed5649":"predictions = model.predict(X_test)\npredictions = [np.argmax(x) for x in predictions]\nimage_id = range(len(predictions))\nsolution = pd.DataFrame({'ImageId':image_id, 'Label':predictions})\nsolution.head()","ecd63fc7":"<h4>2.5 One hot encode labels<\/h4>","0ad244ea":"<h4>3.5 Train Model<\/h4>","b7912654":"In this Kernal you will learn how to use Keras to create a Convolutional Neural Network for recognizing digit images. First of I will prepare the data, then I will visualize it and build an Convolutional Neural Network to make predictions on unseen data.","0ede3b80":"<h2>4. Evaluate Model<\/h2>","20cee126":"<h2>5. Making Predictions<\/h2>","56ed261e":"<h4>3.4 Compile Model<\/h4>","a6ca5686":"<h4>3.2 Define optimizer, callbacks<\/h4>","ec47a348":"<h2>3. Build Model<\/h2>","af86ce9d":"<h1>A Keras Intro, working through the MNIST dataset<\/h1>\n1. Introduction\n2. Data Preparation  \n    2.1 Loading in Dataset    \n    2.2 Visualize numbers  \n    2.3 Scale data  \n    2.4 Reshape data \n    2.5 One hot encode labels\n3. Build Model  \n    3.1 Build Model structure\n    3.2 Define optimizer, callbacks  \n    3.3 Augment Images  \n    3.4 Compile Model  \n    3.5 Train Model\n4. Evaluate Model\n5. Making Predictions","90476df7":"<h2>2. Data Preparation<\/h2>","eee1af01":"<h2>1. Introduction<\/h2>","2df8d45a":"<h4>2.1 Loading in Dataset<\/h4>","3895b52c":"<h4>3.3 Augment Images<\/h4>","22e1f3ea":"<h4>2.3 Scale data<\/h4>","22b48bae":"<h4>2.4 Reshape data<\/h4>\nWe need to reshape our image data so we can use it in an convolutional layer.","9e4c6dcd":"<h2>Conclusion<\/h2>\nThat's all from this Kernel we got pretty good results but you could surely get better results by training on more epochs and using a bigger network.","7999d3e8":"<h4>3.1 Build Model structure<\/h4>","871d4ebc":"<h4>2.2 Visualize numbers<\/h4>"}}