{"cell_type":{"01983f28":"code","ab765e4d":"code","052565c0":"code","5faa379f":"code","10126b2c":"code","6726bdee":"code","f4828661":"code","31984da0":"code","7067ffd5":"code","525d817c":"code","fb657f93":"code","ab9a1dd8":"code","06967b34":"code","d15818be":"code","1a0a8d6f":"code","a175a2c5":"code","1f9d5e92":"code","954cdbdb":"code","7f73dc1d":"code","15ec6adb":"code","e1781d20":"code","66506e2b":"code","57756cdd":"code","3d1936a4":"code","9e94d6cc":"code","5f2f6dfb":"code","dbc798ed":"code","c96584c4":"code","a1a1400d":"code","fd81135e":"code","f5882175":"code","3f91e5b4":"code","1af375ca":"code","061bddf7":"code","8b3bd504":"code","50c2a0ea":"markdown","5b6cf0fe":"markdown","4573895b":"markdown","0b5a0080":"markdown","4ab04096":"markdown","1452cc07":"markdown","6f946d56":"markdown","2e8136cd":"markdown","d29042b9":"markdown","74eea0e5":"markdown","7c20a47a":"markdown","f9d66ac9":"markdown","627aaaf5":"markdown","a3f16c14":"markdown","36cdf1a9":"markdown","e36bb9b5":"markdown","d4f6283f":"markdown","70087b26":"markdown","3c9c6bea":"markdown","be0731bf":"markdown","3fd01df0":"markdown","f3242b76":"markdown","592eff82":"markdown"},"source":{"01983f28":"import numpy as np\nimport pandas as pd\nimport itertools\nimport scipy.stats as stats\nfrom scipy.stats import shapiro\nimport statsmodels.stats.api as sms\nfrom scipy.special import inv_boxcox\n","ab765e4d":"df = pd.read_csv(\"..\/input\/item-pricing\/pricing.csv\", sep=\";\")","052565c0":"df.head()","5faa379f":"# Transform Categories into new datasets in a dictionary\ndict_of_df={}\nfor i in df[\"category_id\"].unique():\n    dict_of_df[i] = df.groupby([\"category_id\"]).get_group(i)[\"price\"] # Each category with its prices transformed into a list within dictionary\ndef getList(dict):\n    return(dict.keys()) # Function to get each list name \ndflist = getList(dict_of_df)","10126b2c":"dict_of_df","6726bdee":"dflist","f4828661":"for i in dflist:\n    dict_of_df[i] = pd.DataFrame(dict_of_df[i]) # Each category turned into Dataframe","31984da0":"dict_of_df[489756]","7067ffd5":"# Combinations of Categories\ncategory_comb = list(itertools.combinations(dflist, 2))\ncategory_comb = [list(i) for i in category_comb]","525d817c":"category_comb","fb657f93":"# Significance test of price differences between two categories\nsame_price = []\nfor i,y in category_comb:\n    # Normality Test\n    test_statistic_sh_1, pvalue_sh_1 = shapiro(dict_of_df[i][\"price\"])\n    test_statistic_sh_2, pvalue_sh_2 = shapiro(dict_of_df[y][\"price\"])\n    if pvalue_sh_1 >= 0.05 and pvalue_sh_2 >= 0.05 :\n        for i, y in category_comb:\n            # Variance Homogeneity Test of two variable\n            test_statistic_lev, pvalue_lev =stats.levene(dict_of_df[i][\"price\"], dict_of_df[y][\"price\"])\n            if pvalue_lev >= 0.05:\n                # Significance test\n                test_statistic, pvalue = stats.ttest_ind(dict_of_df[i][\"price\"], dict_of_df[y][\"price\"], equal_var=True) # If both assumptions holds this test is applied.\n                if pvalue < 0.05:\n                    print(str((i, y)) + \" pvalue: \", '%.10f' % pvalue, \" Difference between the prices of these two variables are statistically significant\")\n                else:\n                    print(str((i, y)) + \" pvalue: \", '%.10f' % pvalue, \" Difference between the prices of these two variables are statistically not significant\")\n                    same_price.append(i)\n                    same_price.append(y)\n            else:\n                # Significance test\n                test_statistic, pvalue = stats.ttest_ind(dict_of_df[i][\"price\"], dict_of_df[y][\"price\"], equal_var=False) # If variance are not equal but population is normally distributed, this test is applied\n                if pvalue < 0.05:\n                    print(str((i, y)) + \" pvalue: \", '%.10f' % pvalue,\n                          \" Difference between the prices of these two variables are statistically significant\")\n                else:\n                    print(str((i, y)) + \" pvalue: \", '%.10f' % pvalue,\n                          \" Difference between the prices of these two variables are statistically not significant\")\n                    same_price.append(i)\n                    same_price.append(y)\n    else:\n        # Significance test\n        test_statistic_m, pvalue_m = stats.mannwhitneyu(dict_of_df[i][\"price\"], dict_of_df[y][\"price\"]) # If both assumptions are not hold, this test is applied.\n        if pvalue_m<0.05:\n            print(str((i, y)) + \" pvalue: \", '%.10f' % pvalue_m, \" Difference between the prices of these two variables are statistically significant\")\n        else:\n            print(str((i, y)) + \" pvalue: \", '%.10f' % pvalue_m, \" Difference between the prices of these two variables are statistically not significant\")\n            same_price.append(i)\n            same_price.append(y)\nsame_price = set(same_price)   ","ab9a1dd8":"same_price # Categories with same prices","06967b34":"differ_price = dflist - same_price\ndiffer_price # Categories with different prices","d15818be":"df_326584 = df[df[\"category_id\"] == 326584]\ndf_326584.describe().T","1a0a8d6f":"df_489756 = df[df[\"category_id\"] == 489756]\ndf_489756.describe().T","a175a2c5":"df_same = df.loc[(df[\"category_id\"] != 489756) & (df[\"category_id\"] != 326584)] # All categories except 489756 and 326584\ndf_same.describe().T","1f9d5e92":"df_same_2,lmbda_same = stats.boxcox(df_same[\"price\"]) # Boxcox transformation","954cdbdb":"df_same_2","7f73dc1d":"sms.DescrStatsW(df_same_2).tconfint_mean()","15ec6adb":"# inverse transformation to achieve confidence intervals of price\nfloor_price, ceiling_price = inv_boxcox(sms.DescrStatsW(df_same_2).tconfint_mean()[0], lmbda_same), inv_boxcox(sms.DescrStatsW(df_same_2).tconfint_mean()[1], lmbda_same)\n\nprint(floor_price, ceiling_price)","e1781d20":"df_same.median()[1]","66506e2b":"boot_median = [np.median(np.random.choice(df_same[\"price\"], len(df_same))) for i in range(10000)] # Random selection of median in 10000 iteration\nfloor_df_same = np.percentile(boot_median, 2.5) # lower bound of %95 confidence interval\nceiling_df_same = np.percentile(boot_median, 97.5) # upper bound of %95 confidence interval\n\nprint(floor_df_same, ceiling_df_same)","57756cdd":"df_same.median()[1]","3d1936a4":"df_489756_2,lmbda_489756 = stats.boxcox(df_489756[\"price\"]) # Boxcox transformation","9e94d6cc":"sms.DescrStatsW(df_489756_2).tconfint_mean()","5f2f6dfb":"# inverse transformation to achieve confidence intervals of price\n\nfloor_price, ceiling_price = inv_boxcox(sms.DescrStatsW(df_489756_2).tconfint_mean()[0], lmbda_489756), inv_boxcox(sms.DescrStatsW(df_489756_2).tconfint_mean()[1], lmbda_489756)\n\nprint(floor_price, ceiling_price)","dbc798ed":"df_489756.median()[1]","c96584c4":"boot_median = [np.median(np.random.choice(df_489756[\"price\"], len(df_489756))) for i in range(10000)] # Random selection of median in 10000 iteration\nfloor_df_489756 = np.percentile(boot_median, 2.5) # lower bound of %95 confidence interval\nceiling_df_489756 = np.percentile(boot_median, 97.5) # lower bound of %95 confidence interval\n\nprint(floor_df_489756, ceiling_df_489756)","a1a1400d":"df_489756.median()[1]","fd81135e":"df_326584_2,lmbda_326584 = stats.boxcox(df_326584[\"price\"]) # Boxcox transformation","f5882175":"sms.DescrStatsW(df_326584_2).tconfint_mean()","3f91e5b4":"# inverse transformation to achieve confidence intervals of price\n\nfloor_price, ceiling_price = inv_boxcox(sms.DescrStatsW(df_326584_2).tconfint_mean()[0], lmbda_326584), inv_boxcox(sms.DescrStatsW(df_326584_2).tconfint_mean()[1], lmbda_326584)\n\nprint(floor_price, ceiling_price)","1af375ca":"df_326584.median()[1]","061bddf7":"boot_median = [np.median(np.random.choice(df_326584[\"price\"], len(df_326584))) for i in range(10000)] # Random selection of median in 10000 iteration\nfloor_df_326584 = np.percentile(boot_median, 2.5) # lower bound of %95 confidence interval\nceiling_df_326584 = np.percentile(boot_median, 97.5) # upper bound of %95 confidence interval\n\nprint(floor_df_326584, ceiling_df_326584)","8b3bd504":"df_326584.median()[1]","50c2a0ea":"## __Same Prices__","5b6cf0fe":"# Question 1. Does the item's price differ by category? Express it statistically.","4573895b":"* We can set price as median value which is 31.74","0b5a0080":" * We can set price as median value which is 35.63","4ab04096":"# Import Libraries","1452cc07":"    \n* Before running this test, we need to run additional tests to find out whether some assumptions holds. Those are:\n    * __Normal distribution of the population.__\n        * Shapiro Wilks Test\n            * H0: There is no statistically significant difference between sample distribution and theoretical distribution.\n            * H1: There is statistically significant difference between sample distribution and theoretical distribution.\n    * __Variance homogeneity.__\n        * Levene's Test\n            * H0: The population variances are equal\n            * H1: The population variances are not equal","6f946d56":"* We can set price as median value which is 34.39.","2e8136cd":"* It is pretty close to the median. In this case we can say it is plausible.","d29042b9":"* PRICING: What should be the item price?\n \n     * A game company gave gift money to its users for purchasing items in a game.\n     * Users buy various items for their characters using these virtual coins.\n     * The game company did not specify a price for an item and provided users to buy this item at the price they wanted.\n     * For example, for the item named shield, users will buy this shield by paying the amounts they see fit.\n     * For example, a user can pay with 30 units of virtual money given to him, while the other user can pay with 45 units.\n     * Therefore, users can buy this item with the amounts they can afford to pay.\n \n*  Problems to be solved:\n     * 1. Does the item's price differ by category? Express it statistically.\n     * 2. What should the price of the item be depending on the first question?\n     * 3. It is desirable to be \"mobile\" about the price. Create a decision support system for the price strategy","74eea0e5":"# Introduction","7c20a47a":"## __Statistically different prices__","f9d66ac9":"# Import Dataset","627aaaf5":"__Category 489756__","a3f16c14":"__Category 326584__","36cdf1a9":"* We need to run an independent two sampled t-test (AB test) to find out whether if the difference between category prices is statistically significant.\n* This can be expressed as follows:\n    * H0: m1 = m2 The population mean of the first group equals the population mean of the second group\n    * H1: m1!= m2The population mean of the first group does not equal the population mean of the second group,","e36bb9b5":"* We need to convert every category into a column to run several tests for each category.","d4f6283f":" * In order to compare price differences, we need combinations of each category.","70087b26":"## Statistically Different Prices","3c9c6bea":"# 2. What should the price of the item be depending on the first question?","be0731bf":"* Since the data is not normally distributed, we can use boxcox transformation to compute confidence interval (Decision support system)","3fd01df0":"# 3. It is desirable to be \"mobile\" about the price. Create a decision support system for the price strategy","f3242b76":"* Alternatively, we can use bootstrapping to compute confidence interval of price","592eff82":"## Same Prices"}}