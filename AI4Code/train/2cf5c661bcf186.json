{"cell_type":{"9105dd01":"code","9fd761d2":"code","89de8f24":"code","23b71a3e":"code","cf93ed9e":"code","fd110afa":"code","34fbb581":"code","d01ba2fe":"code","f81412d2":"code","cce1ebb3":"code","2547b4e8":"code","d6255e94":"code","fdf32747":"code","5615bca1":"code","5471d5e2":"code","97210a8e":"code","c8e57eea":"code","580383e7":"code","d3d223b8":"code","6f56323b":"code","a636d107":"code","c83cfbe3":"code","e7b611d4":"code","e70d0f0f":"markdown","de1ad94d":"markdown","24648f19":"markdown","fd2f4b4f":"markdown","bbf3bb61":"markdown","7bb9f0d3":"markdown","1e448e00":"markdown"},"source":{"9105dd01":"import torch\nfrom tqdm.notebook import tqdm\n\nfrom transformers import BertTokenizer\n\nfrom torch.utils.data import TensorDataset\n\nimport transformers\nfrom transformers import BertForSequenceClassification\n\nimport numpy as np\nimport pandas as pd\nimport re","9fd761d2":"df = pd.read_csv('..\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv', encoding='latin-1')\ndf.head()","89de8f24":"def extract_hash_tags(s):\n    hashes = re.findall(r\"#(\\w+)\", s)\n    return \" \".join(hashes)\ndf['hashtags'] = df['OriginalTweet'].apply(lambda x : extract_hash_tags(x))","23b71a3e":"def extract_mentions(s):\n    hashes = re.findall(r\"@(\\w+)\", s)\n    return \" \".join(hashes)\ndf['mentions'] = df['OriginalTweet'].apply(lambda x : extract_mentions(x))","cf93ed9e":"from sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder()\ndf['encoded_sentiment'] = encoder.fit_transform(df['Sentiment'])","fd110afa":"df['OriginalTweet'] = df['OriginalTweet'].apply(lambda x: ' '.join(re.sub(\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\\/\\\/\\S+)\",\" \",x).split()))","34fbb581":"from sklearn.model_selection import train_test_split\n\nxtrain, xval, ytrain, yval = train_test_split(df['OriginalTweet'], df['encoded_sentiment'], test_size = 0.2)","d01ba2fe":"tokenizer = transformers.BertTokenizer.from_pretrained('bert-base-uncased',do_lower_case=True)","f81412d2":"encoded_data_train = tokenizer.batch_encode_plus(\n    xtrain, \n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=50, \n    return_tensors='pt'\n)\n\nencoded_data_val = tokenizer.batch_encode_plus(\n    xval, \n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=50, \n    return_tensors='pt'\n)","cce1ebb3":"input_ids_train = encoded_data_train['input_ids']\nattention_masks_train = encoded_data_train['attention_mask']\nlabels_train = torch.tensor(ytrain.values)\n\ninput_ids_val = encoded_data_val['input_ids']\nattention_masks_val = encoded_data_val['attention_mask']\nlabels_val = torch.tensor(yval.values)\n\n\n# Pytorch TensorDataset Instance\ndataset_train = TensorDataset(input_ids_train, attention_masks_train, labels_train)\ndataset_val = TensorDataset(input_ids_val, attention_masks_val, labels_val)","2547b4e8":"# initializing the model\n\nmodel = transformers.BertForSequenceClassification.from_pretrained(\"bert-base-uncased\",\n                                                      num_labels=5,\n                                                      output_attentions=False,\n                                                      output_hidden_states=False)","d6255e94":"from torch.utils.data import DataLoader, RandomSampler, SequentialSampler\n\ndataloader_train = DataLoader(dataset_train, \n                              sampler=RandomSampler(dataset_train), \n                              batch_size=128)\n\ndataloader_validation = DataLoader(dataset_val, \n                                   sampler=SequentialSampler(dataset_val), \n                                   batch_size=128)","fdf32747":"from transformers import AdamW, get_linear_schedule_with_warmup\n\noptimizer = AdamW(model.parameters(),\n                  lr=1e-5, \n                  eps=1e-8)\n                  \nepochs = 5\n\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps=0,\n                                            num_training_steps=len(dataloader_train)*epochs)","5615bca1":"from sklearn.metrics import f1_score\n\ndef f1_score_func(preds, labels):\n    preds_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return f1_score(labels_flat, preds_flat, average='weighted')","5471d5e2":"import random\n\nseed_val = 17\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)\ndevice = torch.device('cuda')","97210a8e":"model.to(device)\n\nfor epoch in tqdm(range(1, epochs+1)):\n    \n    model.train()\n    \n    loss_train_total = 0\n\n    progress_bar = tqdm(dataloader_train, desc='Epoch {:1d}'.format(epoch), leave=False, disable=False)\n    for batch in progress_bar:\n\n        model.zero_grad()\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0].to(device),\n                  'attention_mask': batch[1].to(device),\n                  'labels':         batch[2].to(device),\n                 }       \n\n        outputs = model(**inputs)\n        \n        loss = outputs[0]\n        loss_train_total += loss.item()\n        loss.backward()\n\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        optimizer.step()\n        scheduler.step()\n        \n        progress_bar.set_postfix({'training_loss': '{:.3f}'.format(loss.item()\/len(batch))})\n        \n    tqdm.write(f'\\nEpoch {epoch}')\n    \n    loss_train_avg = loss_train_total\/len(dataloader_train)            \n    tqdm.write(f'Training loss: {loss_train_avg}')","c8e57eea":"def evaluate(dataloader_val):\n\n    model.eval()\n    \n    loss_val_total = 0\n    predictions, true_vals = [], []\n    \n    for batch in dataloader_val:\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0],\n                  'attention_mask': batch[1],\n                  'labels':         batch[2],\n                 }\n\n        with torch.no_grad():        \n            outputs = model(**inputs)\n            \n        loss = outputs[0]\n        logits = outputs[1]\n        loss_val_total += loss.item()\n\n        logits = logits.detach().cpu().numpy()\n        label_ids = inputs['labels'].cpu().numpy()\n        predictions.append(logits)\n        true_vals.append(label_ids)\n    \n    loss_val_avg = loss_val_total\/len(dataloader_val) \n    \n    predictions = np.concatenate(predictions, axis=0)\n    true_vals = np.concatenate(true_vals, axis=0)\n            \n    return loss_val_avg, predictions, true_vals","580383e7":"val_loss, predictions, true_vals = evaluate(dataloader_validation)\nval_f1 = f1_score_func(predictions, true_vals)","d3d223b8":"print('Val Loss = ', val_loss)\nprint('Val F1 = ', val_f1)","6f56323b":"encoded_classes = encoder.classes_\npredicted_category = [encoded_classes[np.argmax(x)] for x in predictions]\ntrue_category = [encoded_classes[x] for x in true_vals]","a636d107":"x = 0\nfor i in range(len(true_category)):\n    if true_category[i] == predicted_category[i]:\n        x += 1\n        \nprint('Accuracy Score = ', x \/ len(true_category))","c83cfbe3":"from sklearn.metrics import confusion_matrix\nconfusion_mat = confusion_matrix(y_true = true_category, y_pred = predicted_category, labels=list(encoded_classes))","e7b611d4":"import matplotlib.pyplot as plt\nimport seaborn as sns\ndf = pd.DataFrame(confusion_mat, index = list(encoded_classes),columns = list(encoded_classes))\nsns.heatmap(df)","e70d0f0f":"## Extracting of mentions and hashtags","de1ad94d":"## Encoding classes [total 5]","24648f19":"## Training","fd2f4b4f":"## Implementing Dataloaders","bbf3bb61":"## Extracting inputs and attention masks out of encoded data","7bb9f0d3":"## Encoding Words to Vectors","1e448e00":"<center><h1>Sentiment Analysis using Transformers by HuggingFace Pytorch<\/h1><\/center>\n<br>\n<center>Sentiment analysis refers to the use of natural language processing, text analysis, computational linguistics, and biometrics to systematically identify, extract, quantify, and study affective states and subjective information.<\/center>\n<br>\n<center><img height=200 width=200 src = https:\/\/pytorch.org\/assets\/images\/huggingface-logo.png><\/center>\n\n<br>\n<center><h4>I will be using the HuggingFace Python package for predicting question tags for this StackOverflow dataset. I'm just a beginner with this so please feel free to comment if I can do something better.<\/h4><\/center>\n\n<br>\n<center><img src = https:\/\/www.codemotion.com\/magazine\/wp-content\/uploads\/2020\/05\/bert-google-896x504.png><\/center>"}}