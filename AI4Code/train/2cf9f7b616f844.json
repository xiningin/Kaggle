{"cell_type":{"ab743ec6":"code","b51ea037":"code","b50cfd59":"code","f42f42fe":"code","d613013d":"code","e305e4cd":"code","7bd07ca2":"code","d770f3a8":"code","d4c4f474":"code","ae51ef21":"code","6c1314a6":"code","36cacf59":"code","513637b2":"code","5f666d9a":"code","c8f88181":"code","0edb2743":"code","495f790d":"markdown","f7946b75":"markdown","d1eca032":"markdown","ef947120":"markdown","38e7beb0":"markdown","25a88748":"markdown"},"source":{"ab743ec6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport spacy\nimport random","b51ea037":"data = pd.read_csv(\"\/kaggle\/input\/amazon-music-reviews\/Musical_instruments_reviews.csv\")\n\ndata.head()","b50cfd59":"data.info()","f42f42fe":"data[\"overall\"].value_counts()","d613013d":"data[\"reviewText\"] = data[\"reviewText\"].fillna(\"\")\ndata[\"review\"] = data[\"reviewText\"] + \". \" + data[\"summary\"]\ndata[\"score\"] = data[\"overall\"].apply(lambda x: 1 if x > 3.5 else 0)\n\ndata = data[[\"review\", \"score\"]]\ndata.head()","e305e4cd":"data[\"score\"].value_counts()","7bd07ca2":"sns.set(style=\"whitegrid\", context=\"notebook\", font_scale=1.5)\nfig, ax = plt.subplots(1, 1, figsize=(12, 10))\n\narr = data[\"review\"].apply(lambda x: len(x.split()))\nsns.histplot(arr, bins=30, ax=ax)\n\nax.set_xlabel(\"words count in a review\")\nax.set_ylabel(\"reviews count\")\nplt.show()","d770f3a8":"df_train, df_test = train_test_split(data, test_size=0.2, random_state=0)","d4c4f474":"spacy.__version__","ae51ef21":"nlp = spacy.load(\"en_core_web_sm\")\ntextcat = nlp.create_pipe( \"textcat\", config={\"exclusive_classes\": True, \"architecture\": \"simple_cnn\"})\nnlp.add_pipe(textcat, last=True)\nnlp.pipe_names","6c1314a6":"textcat.add_label(\"POSITIVE\")\ntextcat.add_label(\"NEGATIVE\")","36cacf59":"train_prep = [(r[\"review\"], {\"cats\" : {\"POSITIVE\" : bool(r[\"score\"]), \"NEGATIVE\" : bool(1 - r[\"score\"])}}) for idx, r in df_train.iterrows()] \ntrain_prep[:3]","513637b2":"random.shuffle(train_prep)\nvalid_prep = train_prep[:int(0.1*len(train_prep))]\ntrain_prep = train_prep[int(0.1*len(train_prep)):]\nprint(f\"train size : {len(train_prep)} | valid size : {len(valid_prep)} | test size : {len(df_test)}\")","5f666d9a":"def evaluate(model, annoted_texts, treshold=0.5):\n    docs = [model(text[0]) for text in annoted_texts]\n    TP = 0.0\n    FP = 0.0\n    FN = 0.0\n    TN = 0.0\n    for i, doc in enumerate(docs):\n        gold = annoted_texts[i][1][\"cats\"][\"POSITIVE\"]\n        try:\n            score = doc.cats[\"POSITIVE\"]\n        except KeyError: continue\n            \n        if score >= treshold and gold >= 0.5:\n            TP += 1.0\n        elif score >= treshold and gold < 0.5:\n            FP += 1.0\n        elif score < treshold and gold < 0.5:\n            TN += 1.0\n        elif score < treshold and gold >= 0.5:\n            FN += 1.0\n            \n    precision = TP \/ (TP + FP + 1e-8)\n    recall = TP \/ (TP + FN + 1e-8)\n    accuracy = (TP + TN) \/ (TP + TN + FP + FN + 1e-8)\n    f1 = 2 * (precision * recall) \/ (precision + recall + 1e-8)\n    return {\"acc\": accuracy, \"prec\": precision, \"rec\": recall, \"f1\": f1}","c8f88181":"n_iter = 10\n\n# Disabling other components, train only classifier\nunaffected_pipes = [pipe for pipe in nlp.pipe_names if pipe != 'textcat']\nbest_score = 0\npatience = 2\nno_improvement = 0\n\nwith nlp.disable_pipes(*unaffected_pipes): \n    optimizer = nlp.begin_training()\n\n    print(\"Training the model...\")\n    print('{:^7}\\t{:^7}\\t{:^7}\\t{:^7}\\t{:^7}'.format('LOSS', 'Acc', 'Pr', 'Rec', 'F1'))\n\n    for i in range(n_iter):\n        random.shuffle(train_prep)\n        \n        losses = {}\n        batches = spacy.util.minibatch(train_prep, size=spacy.util.compounding(4., 64., 1.001))\n        for batch in batches:\n            texts, annotations = zip(*batch)\n            nlp.update(texts, annotations, sgd=optimizer, drop=0.2,\n                       losses=losses)\n            \n        with textcat.model.use_params(optimizer.averages):\n            scores = evaluate(nlp, valid_prep)\n        \n        if scores['acc'] > best_score:\n            best_score = scores['acc']\n            best_textcat = nlp.get_pipe(\"textcat\")\n            no_improvement = 0\n        else: no_improvement += 1\n        \n        print('{0:.3f}\\t{1:.3f}\\t{2:.3f}\\t{3:.3f}\\t{4:.3f}'.format(losses['textcat'], scores['acc'], scores['prec'], scores['rec'], scores['f1']))\n        if no_improvement == patience: break\n            \n    with nlp.use_params(optimizer.averages):\n        nlp.replace_pipe(\"textcat\", best_textcat)","0edb2743":"test_prep = [(r[\"review\"], {\"cats\" : {\"POSITIVE\" : bool(r[\"score\"]), \"NEGATIVE\" : bool(1 - r[\"score\"])}}) for idx, r in df_test.iterrows()]\n\nprint(\"Test summary...\")\nprint('{:^7}\\t{:^7}\\t{:^7}\\t{:^7}'.format('Acc', 'Pr', 'Rec', 'F1'))\nscores = evaluate(nlp, test_prep)\nprint('{0:.3f}\\t{1:.3f}\\t{2:.3f}\\t{3:.3f}'.format(scores['acc'], scores['prec'], scores['rec'], scores['f1']))","495f790d":"<a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n    \n<h2 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:linear-gradient(to right, #1E90FF 0%, #4B0082 100%); border:0; color:#FFF5EE' role=\"tab\" aria-controls=\"home\"><center>Content<\/center><\/h2>\n\n* [Exploration](#1)\n* [SpaCy training and evaluation](#2)","f7946b75":"Text classification with spaCy 2.3.5, available here, is somewhat different than it would be in spaCy 3. Namely, the latter introduces transormer model as a part of the pipeline and nudges the user towards using \"config\" files.","d1eca032":"<a id=\"1\"><\/a>\n<h2 style='background:linear-gradient(to right, #1E90FF 0%, #4B0082 100%); border:0; color:#FFF5EE'><center>Data Exploration<center><h2>","ef947120":"<a id=\"2\"><\/a>\n<h2 style='background:linear-gradient(to right, #1E90FF 0%, #4B0082 100%); border:0; color:#FFF5EE'><center>SpaCy training and evaluation<center><h2>","38e7beb0":"The code below is a modification of the code from this [blog post](https:\/\/www.machinelearningplus.com\/nlp\/custom-text-classification-spacy\/)","25a88748":"Add labels to classifier"}}