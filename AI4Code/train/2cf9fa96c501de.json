{"cell_type":{"a7da26d4":"code","7ac0719f":"code","beb56016":"code","336f9b8f":"code","e77cbdb9":"code","32dc4a42":"code","29e064ee":"code","0fc5464d":"code","aafca23d":"code","665a8658":"code","6656c262":"code","29d39663":"code","69e4aa24":"code","3dd3032f":"code","4f0b0e18":"code","384c0948":"code","8d09094c":"code","041bb783":"code","b072fa12":"code","4cb871c3":"code","c6ad9094":"code","278f1182":"markdown","ed2c75d5":"markdown","2b38a37d":"markdown","02eceda6":"markdown","13cb8374":"markdown","006da5ca":"markdown","80384d34":"markdown","758349aa":"markdown","b68a6ea2":"markdown","1fea0df2":"markdown","76b80fe9":"markdown","34f5c0f9":"markdown","9f7f218f":"markdown","492e2ff1":"markdown"},"source":{"a7da26d4":"import numpy as np \nimport pandas as pd \nimport time\nfrom operator import itemgetter\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.inspection import permutation_importance\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\n\nimport utils_clf_models as classifier\nimport utils_best_search \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(10, 8)})\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7ac0719f":"df = pd.read_csv('\/kaggle\/input\/santander-customer-satisfaction\/train.csv')\ndf['TARGET'].value_counts(normalize=True)","beb56016":"3008\/(3008+73012)","336f9b8f":"print(df.shape)\nprint(df.info())\ndf.head(5)","e77cbdb9":"df.describe()","32dc4a42":"X = df.drop(['TARGET'], axis=1).values\ny = df['TARGET'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=42)","29e064ee":"feature_names = [f'feature {i}' for i in range(X.shape[1])]\nforest = RandomForestClassifier(random_state=0)\nforest.fit(X_train, y_train)","0fc5464d":"start_time = time.time()\nimportances = forest.feature_importances_\nstd = np.std([\n    tree.feature_importances_ for tree in forest.estimators_], axis=0)\ntop_std = sorted(std, reverse=True)[:10]\n\nelapsed_time = time.time() - start_time\n\nprint(f\"Elapsed time to compute the importances: \"\n      f\"{elapsed_time:.3f} seconds\")\n\n\nimp_dict = {feature_names[i]: importances[i] for i in range(len(feature_names))}\nimp_dict = dict(sorted(imp_dict.items(), key=itemgetter(0)))\nforest_importances = pd.Series(list(imp_dict.values())[:10], index=list(imp_dict.keys())[:10])\n\nfig, ax = plt.subplots()\nforest_importances.plot.bar(yerr=top_std, ax=ax)\nax.set_title(\"Feature importances using MDI\")\nax.set_ylabel(\"Mean decrease in impurity\")\nfig.tight_layout()","aafca23d":"nb = classifier.Classifier(X, y, 'guass_nb')\nnb.preprocess_split(size=0.25, state=72)\nnb.fit_predict()\nnb.metrics(printing=True)\nnb.roc_curve()","665a8658":"knn = classifier.Classifier(X, y, 'knn')\nknn.preprocess_split(size=0.25, state=72)\nknn.fit_predict()\nknn.metrics(printing=True)\nknn.roc_curve()","6656c262":"log = classifier.Classifier(X, y, 'log_reg')\nlog.preprocess_split(size=0.25, state=72)\nlog.fit_predict()\nlog.metrics(printing=True)\nlog.roc_curve()","29d39663":"tree = classifier.Classifier(X, y, 'tree')\ntree.preprocess_split(size=0.25, state=72)\ntree.fit_predict()\ntree.metrics(printing=True)\ntree.roc_curve()","69e4aa24":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","3dd3032f":"rf = RandomForestClassifier(n_estimators = 10000, random_state = 42, class_weight='balanced_subsample')\nrf.fit(X_train, y_train)\npred = rf.predict(X_test)\nprint(classification_report(y_test, pred))","4f0b0e18":"bag = BaggingClassifier(random_state=42)\nbag.fit(X_train, y_train)\npred = bag.predict(X_test)\nprint(classification_report(y_test, pred))","384c0948":"sample = pd.read_csv('\/kaggle\/input\/santander-customer-satisfaction\/sample_submission.csv')\nsample","8d09094c":"test_df = pd.read_csv('\/kaggle\/input\/santander-customer-satisfaction\/test.csv')\ntest_df","041bb783":"X_final_test = test_df.values\nfinal_pred = rf.predict(X_final_test)","b072fa12":"frame = {'ID': pd.Series(test_df['ID']), 'TARGET': pd.Series(final_pred)}\nresult = pd.DataFrame(frame)\nresult['TARGET'].value_counts(normalize=True)","4cb871c3":"result.head()","c6ad9094":"result.to_csv('santander_customer_satisfaction_submission.csv', header=True, index=False)","278f1182":"# Feature Importance","ed2c75d5":"## 3- Logistic Regression","2b38a37d":"### What's next? Model Tuning (Best Parameter Search), Ensemble Learning, Model Finalization","02eceda6":"## 2- Bagging (with a tree as base estmiator)","13cb8374":"## 4- Decision Tree","006da5ca":"# Exploring the data","80384d34":"## 2- K-Nearest Neighbors","758349aa":"# Obtain the submission format on the test data","b68a6ea2":"# Single Model Building & Evaluation","1fea0df2":"# Ensemble Learning","76b80fe9":"# Importing the data","34f5c0f9":"## Based on mean decrease in impurity","9f7f218f":"## 1- Random Forest (Given the individual tree performed better than any other model, we will proceed on starting with the random forest)","492e2ff1":"## 1-  Naive Bayes"}}