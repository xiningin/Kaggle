{"cell_type":{"1ad81c63":"code","58f8b68f":"code","51d6f0e2":"code","b08d57c8":"code","ad1bbfd3":"code","295736d2":"code","1b21e55e":"code","0a932681":"code","0d77aa24":"code","40bcf7e8":"code","de0fd8bd":"code","18c07ffe":"code","7d098b0d":"code","b9103cb6":"code","62db9382":"code","cbc0b166":"code","5e09eb02":"code","9e75c825":"code","6119780b":"code","991b70b8":"code","ac1b138f":"code","7b468919":"code","3558e08e":"code","db691ed6":"code","43a38714":"code","afa13c6e":"code","4356da8c":"code","383180fc":"code","ae04c4f9":"code","d723fe15":"code","3d6f0094":"code","4b831990":"code","62fc079f":"code","434680e0":"code","b17a71e1":"code","3ef2ce9e":"code","38d34390":"code","f60e25f4":"code","147f8124":"code","0ff7c55f":"code","fa84467f":"markdown","72fbfd4e":"markdown","1602b685":"markdown","4ee34f15":"markdown","15f52f54":"markdown","8980a4af":"markdown","ccb3d22c":"markdown","b03c6ef8":"markdown","35cea844":"markdown","ad0c8852":"markdown","8bc0c5aa":"markdown","155a1455":"markdown","e311a90c":"markdown","a3870393":"markdown","9ee82374":"markdown","4769c7e5":"markdown","570b67fa":"markdown","f929b27c":"markdown","f00996b4":"markdown","9bd0ea31":"markdown","5558d4a8":"markdown","ec428d07":"markdown","0d77bd28":"markdown","31ea39a9":"markdown","e1441c2f":"markdown","b58dbbd0":"markdown","9efe47a3":"markdown","922a7283":"markdown"},"source":{"1ad81c63":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import pyplot\nimport seaborn as sns\n\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV, cross_val_score\nfrom sklearn.metrics import accuracy_score , classification_report, confusion_matrix, auc, roc_curve, precision_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nfrom xgboost import XGBClassifier","58f8b68f":"# Import Data\n\nhotel_df = pd.read_csv('..\/input\/hotel-booking-demand\/hotel_bookings.csv')","51d6f0e2":"# Show first 5 rows\n\nhotel_df.head(5)","b08d57c8":"# print some information about data\n\nhotel_df.info()","ad1bbfd3":"# print the size of the data\nhotel_df.shape","295736d2":"plt.figure(figsize=(8,6))\nsns.countplot(x='hotel', data = hotel_df, palette='gist_earth')\nplt.title('Hotel Types', weight='bold')\nplt.xlabel('Hotel', fontsize=12)\nplt.ylabel('Count', fontsize=12)","1b21e55e":"plt.figure(figsize=(8,6))\nsns.countplot(x='is_canceled', data= hotel_df, palette='gist_stern')\nplt.title('Canceled Situation', weight='bold')\nplt.xlabel('Count', fontsize=12)\nplt.ylabel('Canceled or Not Canceled', fontsize=12)","0a932681":"plt.figure(figsize=(8,6))\nsns.violinplot(x='arrival_date_year', y ='lead_time', hue=\"is_canceled\", data=hotel_df, palette=\"Set2\", bw=.2,\n               cut=2, linewidth=2, iner= 'box', split = True)\nsns.despine(left=True)\nplt.title('Arrival Year vs Lead Time vs Canceled Situation', weight='bold')\nplt.xlabel('Year', fontsize=12)\nplt.ylabel('Lead Time', fontsize=12)","0d77aa24":"#`arrival_date_month` names converted to the numbers\n\nhotel_df['arrival_date_month'].replace({'January' : '1',\n        'February' : '2',\n        'March' : '3',\n        'April' : '4',\n        'May' : '5',\n        'June' : '6',\n        'July' : '7',\n        'August' : '8',\n        'September' : '9', \n        'October' : '10',\n        'November' : '11',\n        'December' : '12'}, inplace=True)","40bcf7e8":"#`arrival_date_month` exploration \n\nplt.figure(figsize=(10,10))\nsns.countplot(x='arrival_date_month', data = hotel_df,\n              order=pd.value_counts(hotel_df['arrival_date_month']).index, palette='YlOrBr_r')\nplt.title('Arrival Month', weight='bold')\nplt.xlabel('Month', fontsize=12)\nplt.ylabel('Count', fontsize=12)","de0fd8bd":"# Table of `stay_in_weekend` and `stay_in_week_nights` features\n\npd.crosstab(index = hotel_df['stays_in_week_nights'],columns=hotel_df['stays_in_weekend_nights'], margins=True, margins_name = 'Total').iloc[:10]","18c07ffe":"## Creating new feature: `Weekday vs Weekend` \n\npd.options.mode.chained_assignment = None\ndef week_function(feature1, feature2, data_source):\n    data_source['weekend_or_weekday'] = 0\n    for i in range(0, len(data_source)):\n        if feature2.iloc[i] == 0 and feature1.iloc[i] > 0:\n            hotel_df['weekend_or_weekday'].iloc[i] = 'stay_just_weekend'\n        if feature2.iloc[i] > 0 and feature1.iloc[i] == 0:\n            hotel_df['weekend_or_weekday'].iloc[i] = 'stay_just_weekday'\n        if feature2.iloc[i] > 0 and feature1.iloc[i] > 0:\n            hotel_df['weekend_or_weekday'].iloc[i] = 'stay_both_weekday_and_weekend'\n        if feature2.iloc[i] == 0 and feature1.iloc[i] == 0:\n            hotel_df['weekend_or_weekday'].iloc[i] = 'undefined_data'\n\n            \nweek_function(hotel_df['stays_in_weekend_nights'],hotel_df['stays_in_week_nights'], hotel_df)","7d098b0d":"#`arrival_date_month` vs `weekend_or_weekday` graph \n\nhotel_df['arrival_date_month']= hotel_df['arrival_date_month'].astype('int64')\ngroup_data = hotel_df.groupby([ 'arrival_date_month','weekend_or_weekday']).size().unstack(fill_value=0)\n\ngroup_data.sort_values('arrival_date_month', ascending = True).plot(kind='bar',stacked=True, cmap='Set3',figsize=(12,8))\nplt.title('Arrival Month vs Staying Weekend or Weekday', weight='bold')\nplt.xlabel('Arrival Month', fontsize=12)\nplt.xticks(rotation=360)\nplt.ylabel('Count', fontsize=12)","b9103cb6":"# Create new feature:`all_children` with merge children and baby features\n\nhotel_df['all_children'] = hotel_df['children'] + hotel_df['babies']\npd.crosstab(hotel_df['adults'], hotel_df['all_children'], margins=True, margins_name = 'Total')","62db9382":"# Groupby `Meal` and `Hotel` features\n\ngroup_meal_data = hotel_df.groupby(['hotel','meal']).size().unstack(fill_value=0).transform(lambda x: x\/x.sum())\ngroup_meal_data.applymap('{:.2f}'.format)","cbc0b166":"# Create Top 10 Country of Origin graph\n\nplt.figure(figsize=(10,10))\nsns.countplot(x='country', data=hotel_df, \n              order=pd.value_counts(hotel_df['country']).iloc[:10].index, palette=\"brg\")\nplt.title('Top 10 Country of Origin', weight='bold')\nplt.xlabel('Country', fontsize=12)\nplt.ylabel('Count', fontsize=12)","5e09eb02":"# `Arrival Month` vs `ADR` vs `Booking Cancellation Status`\n\nhotel_df['adr'] = hotel_df['adr'].astype(float)\nplt.figure(figsize=(15,10))\nsns.barplot(x='arrival_date_month', y='adr', hue='is_canceled', dodge=True, palette= 'PuBu_r', data=hotel_df)\nplt.title('Arrival Month vs ADR vs Booking Cancellation Status', weight='bold')\nplt.xlabel('Arrival Month', fontsize=12)\nplt.ylabel('ADR', fontsize=12)","9e75c825":"## Display sum of null data\n\nhotel_df.isnull().sum()","6119780b":"# Fill missing data\n\nhotel_df['children'] =  hotel_df['children'].fillna(0)\nhotel_df['all_children'] =  hotel_df['all_children'].fillna(0)\nhotel_df['country'] = hotel_df['country'].fillna(hotel_df['country'].mode().index[0])\nhotel_df['agent']= hotel_df['agent'].fillna('0')\nhotel_df=hotel_df.drop(['company'], axis =1)","991b70b8":"# Change data type\n\nhotel_df['agent']= hotel_df['agent'].astype(int)\n#hotel_df['country']= hotel_df['country'].astype(O)","ac1b138f":"#Using Label Encoder method for categorical features\n\ncols =  [cols for cols in hotel_df.columns if hotel_df[cols].dtype == 'O']\n\nhotel_df.loc[:, cols] = hotel_df.loc[:, cols].astype(str).apply(LabelEncoder().fit_transform)","7b468919":"hotel_df.head()","3558e08e":"#Create new dataframe for categorical data\n\nhotel_data_categorical = hotel_df[['hotel','is_canceled','arrival_date_month','meal',\n                                     'country','market_segment','distribution_channel', \n                                     'is_repeated_guest', 'reserved_room_type',\n                                     'assigned_room_type','deposit_type','agent',\n                                     'customer_type','reservation_status', \n                                     'weekend_or_weekday']]\nhotel_data_categorical.info()","db691ed6":"#Create new dataframe for numerical data\n\nhotel_data_numerical= hotel_df.drop(['hotel','is_canceled', 'arrival_date_month','meal',\n                                       'country','market_segment','distribution_channel', \n                                       'is_repeated_guest', 'reserved_room_type', \n                                       'assigned_room_type','deposit_type','agent', \n                                       'customer_type','reservation_status',\n                                       'weekend_or_weekday'], axis = 1)\nhotel_data_numerical.info()","43a38714":"# Correlation Matrix with Spearman method\n\nplt.figure(figsize=(15,15))\ncorr_categorical=hotel_data_categorical.corr(method='spearman')\nmask_categorical = np.triu(np.ones_like(corr_categorical, dtype=np.bool))\n\nsns.heatmap(corr_categorical, annot=True, fmt=\".2f\", cmap='BrBG', vmin=-1, vmax=1, center= 0,\n            square=True, linewidths=2, cbar_kws={\"shrink\": .5}).set(ylim=(15, 0))\nplt.title(\"Correlation Matrix Spearman Method- Categorical Data \",size=15, weight='bold')","afa13c6e":"# Correlation Matrix with pearson method\n\nplt.figure(figsize=(15,15))\ncorr_numerical=hotel_data_numerical.corr(method='pearson')\nmask_numerical = np.triu(np.ones_like(corr_numerical, dtype=np.bool))\nsns.heatmap(corr_numerical, annot=True, fmt=\".2f\", cmap='RdBu', mask= mask_numerical, vmin=-1, vmax=1, center= 0,\n            square=True, linewidths=2, cbar_kws={\"shrink\": .5}).set(ylim=(17, 0))\nplt.title(\"Correlation Matrix Pearson Method- Numerical Data \",size=15, weight='bold')","4356da8c":"# Finding high correlated features\n\ncorr_mask_categorical = corr_categorical.mask(mask_categorical)\ncorr_values_categorical = [c for c in corr_mask_categorical.columns if any (corr_mask_categorical[c] > 0.90)]\ncorr_mask_numerical = corr_numerical.mask(mask_numerical)\ncorr_values_numerical = [c for c in corr_mask_numerical.columns if any (corr_mask_numerical[c] > 0.90)]\nprint(corr_values_categorical, corr_values_numerical)","383180fc":"# drop the highly correlated features\n\nhotel_df = hotel_df.drop(['reservation_status', 'children', 'reservation_status_date'], axis=1)","ae04c4f9":"# Seperate target variable\n\nhotel_data_tunning = hotel_df\ny = hotel_data_tunning.iloc[:,1]\nx = pd.concat([hotel_data_tunning.iloc[:,0],hotel_data_tunning.iloc[:,2:30]], axis=1)","d723fe15":"# train and test split\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.3, random_state=42)","3d6f0094":"print('X train size: ', x_train.shape)\nprint('y train size: ', y_train.shape)\nprint('X test size: ', x_test.shape)\nprint('y test size: ', y_test.shape)","4b831990":"# Create adaboost classifer object\nlr = LogisticRegression()\n\n# Train Adaboost Classifer\nlr.fit(x_train, y_train)\n\n#Predict the response for test dataset\ny_pred = lr.predict(x_test)","62fc079f":"precision_score_lr =  precision_score(y_test, y_pred)\naccuracy_score_lr = accuracy_score(y_test, y_pred)\nprint('The precision score is : ',round(precision_score_lr * 100,2), '%')\nprint('The accuracy score is : ',round(accuracy_score_lr * 100,2), '%')\nprint ('\\nClassification Report TEST:\\n', classification_report(y_test,y_pred))","434680e0":"# base estimator (optional)\ndt = DecisionTreeClassifier() \n\n# Create adaboost classifer object\nabc = AdaBoostClassifier(n_estimators=250, base_estimator=dt,learning_rate=1.0, random_state=0)\n\n# Train Adaboost Classifer\nabc.fit(x_train, y_train)\n\n#Predict the response for test dataset\ny_pred_lg = abc.predict(x_test)","b17a71e1":"precision_score_ab =  precision_score(y_test, y_pred_lg)\naccuracy_score_ab = accuracy_score(y_test, y_pred_lg)\nprint('The precision score is : ',round(precision_score_ab * 100,2), '%')\nprint('The accuracy score is : ',round(accuracy_score_ab * 100,2), '%')\nprint ('\\nClassification Report TEST:\\n', classification_report(y_test,y_pred_lg))","3ef2ce9e":"# create object\ngbc= GradientBoostingClassifier(learning_rate=0.1,min_samples_leaf=10, min_samples_split=200, max_features='sqrt',random_state=10)\n\n# Train Adaboost Classifer\ngbc.fit(x_train, y_train)\n\n#Predict the response for test dataset\ny_pred_gbc = gbc.predict(x_test)","38d34390":"precision_score_gbc =  precision_score(y_test, y_pred_gbc)\naccuracy_score_gbc = accuracy_score(y_test, y_pred_gbc)\nprint('The precision score  is : ',round(precision_score_gbc * 100,2), '%')\nprint('The accuracy score  is : ',round(accuracy_score_gbc * 100,2), '%')\nprint ('\\nClassification Report TEST:\\n', classification_report(y_test,y_pred_gbc))","f60e25f4":"xgbc = XGBClassifier(max_depth=13,n_estimators=300,learning_rate=0.5)\n    \n# Train Adaboost Classifer\nxgbc.fit(x_train, y_train)\n\n#Predict the response for test dataset\ny_pred_xgbc = xgbc.predict(x_test)","147f8124":"precision_score_xgbc =  precision_score(y_test, y_pred_xgbc)\naccuracy_score_xgbc = accuracy_score(y_test, y_pred_xgbc)\nprint('The precision score  is : ',round(precision_score_xgbc * 100,2), '%')\nprint('The accuracy score is : ',round(accuracy_score_xgbc * 100,2), '%')\nprint ('\\nClassification Report TEST:\\n', classification_report(y_test,y_pred_xgbc))","0ff7c55f":"print('Logistic Regression accuracy score is : ',round(accuracy_score_lr * 100,2), '%')\nprint('AdaBoost accuracy score is : ',round(accuracy_score_ab * 100,2), '%')\nprint('Gradient boosting  accuracy score  is : ',round(accuracy_score_gbc * 100,2), '%')\nprint('XGBoost accuracy score is : ',round(accuracy_score_xgbc * 100,2), '%')","fa84467f":"## Load Library","72fbfd4e":"The most important parameters are base_estimator, n_estimators and learning_rate.","1602b685":"## Seperate target and predictor varaiable","4ee34f15":"## Dealing with Missing Data and Correlation Matrix","15f52f54":"What type of hotels ared booked most of the time","8980a4af":"### Boosting\nBoosting refers to a family of algorithms that are able to convert weak learners to strong learners. The main principle of boosting is to fit a sequence of weak learners (models that are only slightly better than random guessing, such as small decision trees) to weighted versions of the data, where more weight is given to examples that were mis-classified by earlier rounds. The predictions are then combined through a weighted majority vote (classification) or a weighted sum (regression) to produce the final prediction. The principal difference between boosting and the committee methods such as bagging is that base learners are trained in sequence on a weighted version of the data.","ccb3d22c":"## Gradient Boosting classifier","b03c6ef8":"## Cumulate accuracy score of all the models","35cea844":"The above graph is showing the number of bookings for each month. According to that, August is the busiest month and January is the most unoccupied month. It is half as busy as August.","ad0c8852":"Another important features which are related to time are stays_in_week_nights and stays_in_weekend_night features. ","8bc0c5aa":"### Type of Boosting Algorithm\n1. AdaBoost (Adaptive Boosting)\n1. Gradient Tree Boosting\n1. XGBoost\n1. LightGBM\n1. CatBoost","155a1455":"## Train Model","e311a90c":"Checked the number of booking canceled (Target variable)","a3870393":"- company feature's 94% is missing so we will remove it\n- children and all_children features have only 4 missing data so we will replace with 0\n- country feature is missing less than 1%, these data will replace with most frequent value. ","9ee82374":"Shows the relationship of arrival_date_year to lead_time with booking cancellation status.","4769c7e5":"## AdaBost Classifier","570b67fa":"The above table brings an idea about creating a new feature. Which is indicated just_stay_weekend, just_stay_weekday and stay_both_weekday_and_weekday. These 715 values which are not assigned any feature, indicated as undefined_data.","f929b27c":"For canceled booking, means and interquartile ranges are similar in all years. But the shapes of the distributions are quite different from each other. On the other hand distribution of not-canceled booking are almost the same. For all years and every booking situation, the small number of large lead time values are pulling the mean up. It shows that the mean is higher than the median.","f00996b4":"Another feature engineering is made for children and babies features. Since, there is no obvious difference, these features gathered under the one feature which name is all_children.\n","9bd0ea31":"Another exploration is made for the arrival_date_month feature. First month names converted to the numbers. It will help easier analysis.","5558d4a8":"## Exploratory Data Analysis","ec428d07":"### Summary\nEvery year, more than 140 million bookings made on the internet and many hotel bookings made through top-visited travel websites like Booking.com, Expedia.com, Hotels.com, etc. According to Google data, hotels are booked in advance of 12 weeks.\n\nThis dataset contains 31 features about booking information such as Average Daily Rate, Arrival Time, Room Type, Special Request, etc. between 2015 and 2017 years.\n\nIn this kernel, I would like to show some booking information details with exploratory data analysis, some feature engineering, reviewing correlations between features, hyperparameter tunning and visualizing most important features and their interesting distribution properties. As a result of all these analyses, I aim to find best model to predict hotel booking cancellations with tree-based algorithms based on rest of the features found in the dataset. The goal of predictive analysis is to avoid overfitting and find the model that has the highest accuracy.","0d77bd28":"The below graph gives information about the location which bookings made in.","31ea39a9":"## Load Dataset","e1441c2f":"## Train test split","b58dbbd0":"## XGBoost","9efe47a3":"## Logistic Regression","922a7283":"The below table shows frequency details about meal types according to the hotel types. Following the results, 67% of Bed&Breakfast booking made for City Hotel and almost every Full Board bookings made in the Resort Hotel."}}