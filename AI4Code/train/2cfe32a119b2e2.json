{"cell_type":{"a7c1b175":"code","c9cb840f":"code","d90f0c90":"code","0792c35a":"code","42c4fff6":"code","e13b4b26":"code","a37f0151":"code","5d85bac0":"code","ac155062":"code","6b1b30a2":"code","79864f0e":"code","88bad264":"code","6e9f40ba":"code","c0ce708d":"code","6ca8a8b0":"code","5ee7351f":"code","c7b0ec4c":"code","43e5fbb6":"code","ae179a5c":"markdown","8322847d":"markdown","20627ab1":"markdown","8aa77e87":"markdown","f71783e6":"markdown","25cf9c0b":"markdown","e4da57d1":"markdown","921d840c":"markdown","bb2cc703":"markdown","8f73233a":"markdown","34863ab0":"markdown"},"source":{"a7c1b175":"import numpy as np\n#Grafik \u00e7izdirme k\u00fct\u00fcphanesi\nimport matplotlib.pyplot as plt\n\nimport os #Sistem \nimport warnings #uyar\u0131lar\n#print(os.listdir(\"..\/input\/\"))\nwarnings.filterwarnings(\"ignore\")","c9cb840f":"\n# The training data.\nX = np.array([\n    [1, 1],\n    [0, 1],\n    [1, 0],\n    [0, 0]\n])\n\n# The labels for the training data.\ny = np.array([\n    [0],\n    [1],\n    [1],\n    [0]\n])","d90f0c90":"W13 = 0.5\nW14 = 0.9\nW23 = 0.4\nW24 = 1.0\nW35 = -1.2\nW45 = 1.1\nQ3 = 0.8\nQ4 = -0.1\nQ5 = 0.3\nlearning_rate = 0.1","0792c35a":"def sigmoid(x):\n    return 1\/(1 + np.exp(-x)) ","42c4fff6":"z = X[0][0]*W13 + X[0][1]*W23-Q3\nz2 = X[0][0]*W14 + X[0][1]*W24-Q4\n\nY3 = sigmoid(z)\nY4 = sigmoid(z2)","e13b4b26":"z_next = Y3*W35 + Y4*W45 - Q5\n\nY5 = sigmoid(z_next)","a37f0151":"e = y[0]-Y5\nprint(e)","5d85bac0":"G5 = Y5*(1-Y5)*e\nprint(G5)","ac155062":"delta_W35 = learning_rate*Y3*G5\ndelta_W45 = learning_rate*Y4*G5\ndelta_Q5 = learning_rate*Q4*G5\n\nG3 = Y3*(1-Y3)*G5*W35\nG4 = Y4*(1-Y4)*G5*W45","6b1b30a2":"delta_W13 = learning_rate*X[0][0]*G3\ndelta_W23 = learning_rate*X[0][1]*G3\ndelta_Q3 = learning_rate*(-1)*G3\ndelta_W14 = learning_rate*X[0][0]*G4\ndelta_W24 = learning_rate*X[0][1]*G4\ndelta_Q4 = learning_rate*(-1)*G4","79864f0e":"W13 = W13 + delta_W13\nW14 = W14 + delta_W14\nW23 = W23 + delta_W23\nW24 = W24 + delta_W24\nW35 = W35 + delta_W35\nW45 = W45 + delta_W45\nQ5 = Q5 + delta_Q5\nQ4 = Q4 + delta_Q4\nQ3 = Q3 + delta_Q3","88bad264":"print(\"W13\",W13)\nprint(\"W14\",W14)\nprint(\"W23\",W23)\nprint(\"W24\",W24)\nprint(\"W35\",W35)\nprint(\"W45\",W45)\nprint(\"Q5\",Q5)\nprint(\"Q4\",Q4)\nprint(\"Q3\",Q3)","6e9f40ba":"def next_fit(x1,x2,y,pr:str):\n    W13 = 0.5\n    W14 = 0.9\n    W23 = 0.4\n    W24 = 1.0\n    W35 = -1.2\n    W45 = 1.1\n    Q3 = 0.8\n    Q4 = -0.1\n    Q5 = 0.3\n    learning_rate = 0.1\n    \n    e_count = []\n    i_count = []\n    \n    for i in range(500):\n        z = x1*W13 + x2*W23-Q3\n        z2 = x1*W14 + x2*W24-Q4\n        \n        Y3 = sigmoid(z)\n        Y4 = sigmoid(z2)\n        \n        z_next = Y3*W35 + Y4*W45 - Q5\n    \n        Y5 = sigmoid(z_next)\n        \n        e = y-Y5\n        if i%20 == 0:\n            print(\"error\",e)\n        e_count.append(e)\n        i_count.append(i)\n        \n        G5 = Y5*(1-Y5)*e\n        \n        delta_W35 = learning_rate*Y3*G5\n        delta_W45 = learning_rate*Y4*G5\n        delta_Q5 = learning_rate*Q4*G5\n        \n        G3 = Y3*(1-Y3)*G5*W35\n        G4 = Y4*(1-Y4)*G5*W45\n        \n        \n        delta_W13 = learning_rate*x1*G3\n        delta_W23 = learning_rate*x2*G3\n        delta_Q3 = learning_rate*(-1)*G3\n        delta_W14 = learning_rate*x1*G4\n        delta_W24 = learning_rate*x2*G4\n        delta_Q4 = learning_rate*(-1)*G4\n        \n        W13 = W13 + delta_W13\n        W14 = W14 + delta_W14\n        W23 = W23 + delta_W23\n        W24 = W24 + delta_W24\n        W35 = W35 + delta_W35\n        W45 = W45 + delta_W45\n        Q5 = Q5 + delta_Q5\n        Q4 = Q4 + delta_Q4\n        Q3 = Q3 + delta_Q3\n        \n#        print(\"--------------  \",str(pr),\"  --------------\")\n#        print(\"W13\",W13)\n#        print(\"W14\",W14)\n#        print(\"W23\",W23)\n#        print(\"W24\",W24)\n#        print(\"W35\",W35)\n#        print(\"W45\",W45)\n#        print(\"Q5\",Q5)\n#        print(\"Q4\",Q4)\n#        print(\"Q3\",Q3)\n    plt.xlabel(\"iteration\")\n    plt.ylabel(\"error\")\n    plt.scatter(i_count,e_count);\n    \n    return Y5,e\n    \none_input_Y5, one_input_error = next_fit(X[0][0],X[0][1],y[0],\"0\")\n#two_input_Y5, two_input_error = next_fit(X[1][0],X[1][1],y[1],\"1\")\n#three_input_Y5, three_input_error = next_fit(X[2][0],X[2][1],y[2],\"2\")\n#four_input_Y5, four_input_error = next_fit(X[3][0],X[3][1],y[3],\"3\")","c0ce708d":"two_input_Y5, two_input_error = next_fit(X[1][0],X[1][1],y[1],\"1\")","6ca8a8b0":"three_input_Y5, three_input_error = next_fit(X[2][0],X[2][1],y[2],\"2\")","5ee7351f":"four_input_Y5, four_input_error = next_fit(X[3][0],X[3][1],y[3],\"3\")","c7b0ec4c":"print(\"X1 = \",str(X[0][0]),\" X2 = \",str(X[0][1]),\" Y_actual_output = \",str(y[0]),\" Y5 = \",str(one_input_Y5),\" error = \",str(one_input_error))\nprint(\"X1 = \",str(X[1][0]),\" X2 = \",str(X[1][1]),\" Y_actual_output = \",str(y[1]),\" Y5 = \",str(two_input_Y5),\" error = \",str(two_input_error))\nprint(\"X1 = \",str(X[2][0]),\" X2 = \",str(X[2][1]),\" Y_actual_output = \",str(y[2]),\" Y5 = \",str(three_input_Y5),\" error = \",str(three_input_error))\nprint(\"X1 = \",str(X[3][0]),\" X2 = \",str(X[3][1]),\" Y_actual_output = \",str(y[3]),\" Y5 = \",str(four_input_Y5),\" error = \",str(four_input_error))","43e5fbb6":"summ_error = 0\n\nsumm_error = summ_error + one_input_error**2\nsumm_error = summ_error + two_input_error**2\nsumm_error = summ_error + three_input_error**2\nsumm_error = summ_error + four_input_error**2\n\nsumm_error = summ_error \/ 4\nprint(summ_error)","ae179a5c":"**RESULT**","8322847d":"**MSE - mean square error**","20627ab1":"I chose them randomly","8aa77e87":"The reason error can be calculated","f71783e6":"at last we update the weights and bias values","25cf9c0b":"next step is to update the weights\n\nFirst, let's find the error gradient of the 5th neuron","e4da57d1":"the first values we determined and the changes after the 1st iteration\n\nFIRST\n* W13 = 0.5\n* W14 = 0.9\n* W23 = 0.4\n* W24 = 1.0\n* W35 = -1.2\n* W45 = 1.1\n* Q3 = 0.8\n* Q4 = -0.1\n* Q5 = 0.3\n\nCHANGE\n* W13 [0.50381195]\n* W14 [0.89852882]\n* W23 [0.40381195]\n* W24 [0.99852882]\n* W35 [-1.20668733]\n* W45 [1.08878016]\n* Q5 [0.30127383]\n* Q4 [-0.09852882]\n* Q3 [0.79618805]","921d840c":"**x1 = 1\nx2 = 1 \ny = 0 \n500 iteration and error rate**","bb2cc703":"Now let's do weight correction","8f73233a":"first step X -->  1 1 and Y --> 0","34863ab0":"![](https:\/\/i.imgyukle.com\/2019\/12\/23\/RfsiqA.png)"}}