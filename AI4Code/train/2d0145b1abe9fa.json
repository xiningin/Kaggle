{"cell_type":{"54c32f66":"code","89bb0484":"code","7fd0e7e5":"code","10e6fdee":"code","b063d805":"code","309edaf0":"code","c1b529a3":"code","760aa943":"code","19c0e5fc":"code","22cbc869":"code","34218c56":"code","472a6e7a":"code","88e9a1af":"code","cf41fc3c":"code","74b1d5bc":"code","8284976a":"code","761f4bc4":"code","56b975c2":"code","0ccda3cf":"code","86a92af9":"code","93839177":"code","09ee64ee":"code","632b61f1":"code","887d5612":"code","9a3a9c59":"code","570a5eec":"code","05e90a9b":"markdown"},"source":{"54c32f66":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nimport keras\nimport matplotlib.pyplot as plt\nimport cv2\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Convolution2D\nfrom keras.layers import Activation\nfrom keras.layers import MaxPool2D\nfrom keras.layers import Flatten\n\n%matplotlib inline\n","89bb0484":"os.listdir('..\/input\/training_set\/training_set\/cats')[:5]","7fd0e7e5":"#checking out the first image in the cats dataset\nim = cv2.imread(('..\/input\/training_set\/training_set\/cats\/cat.2003.jpg'), cv2.IMREAD_GRAYSCALE)\nplt.imshow(im)","10e6fdee":"#Looping each directory for cats and dogs individually\n    #would be a useful exploration in integrating into dataset later\n\nbase_dir = '..\/input\/training_set\/training_set\/'\ncategories = ['cats', 'dogs']\nfor category in categories:\n    child_path = os.path.join(base_dir, category)\n    for path in os.listdir(child_path):\n        img_array = cv2.imread(os.path.join(child_path,path), cv2.IMREAD_GRAYSCALE)\n        #GRAYSCALE slightly reduces array size of a colored image from say \n        #(_,255,255,3) to (_,255,255,1). Useful in cases where color do not really matter \n        plt.imshow(img_array)\n        plt.show()\n        break  #Let's see if our loop works perfectly before proceeding any further\n    break\n","b063d805":"training_data = [] #creates empty list of training dataset\nbase_dir = '..\/input\/training_set\/training_set\/'\ncategories = ['cats', 'dogs']\nnew_size = 100 #previously 255-max\nfor category in categories:\n    child_path = os.path.join(base_dir, category)\n    label = categories.index(category)\n    for path in os.listdir(child_path):\n        try: #some of the images in this dataset throw errors\n            img_array = cv2.imread(os.path.join(child_path,path), cv2.IMREAD_GRAYSCALE)\n            new_array = cv2.resize(img_array, (new_size,new_size)) \n            training_data.append([new_array,label])\n        except Exception as exc: \n            pass\n\n","309edaf0":"import random\nrandom.shuffle(training_data) #shuffles the training_data for better performance\n","c1b529a3":"for sample in training_data:\n    sample[0] = sample[0]\/255.0 #normalizes the dataset","760aa943":"X = []\ny = []\nfor sample, features in training_data:\n    X.append(sample)\n    y.append(features)","19c0e5fc":"X = np.array(X).reshape(-1,new_size,new_size,1)","22cbc869":"y[:10]","34218c56":"y = np.array(y)\ny = keras.preprocessing.utils.to_categorical(y) #one-hot encodes the labels for seamless integration into CNN","472a6e7a":"y[:5]","88e9a1af":"#preparing the test data inthe same fashion \ntest_data = []\nbase_dir = '..\/input\/test_set\/test_set\/'\ncategories = ['cats', 'dogs']\nnew_size = 100\nfor category in categories:\n    child_path = os.path.join(base_dir, category)\n    label = categories.index(category)\n    for path in os.listdir(child_path):\n        try:\n            img_array = cv2.imread(os.path.join(child_path,path), cv2.IMREAD_GRAYSCALE)\n            new_array = cv2.resize(img_array, (new_size,new_size))\n            test_data.append([new_array,label])\n        except Exception as e:\n            pass","cf41fc3c":"random.shuffle(test_data)\nfor sampl in test_data:\n    sampl[0] = sampl[0]\/255.0\nX_test = []\ny_test = []\nfor sample, features in test_data:\n    X_test.append(sample)\n    y_test.append(features)","74b1d5bc":"X_test = np.array(X_test).reshape(-1,new_size,new_size,1)\ny_test = keras.preprocessing.utils.to_categorical(y_test)","8284976a":"y_test[0]","761f4bc4":"# creating CNN\nmodel = Sequential()\nmodel.add(Convolution2D(32,3,3, input_shape=X.shape[1:], activation='relu')) \nmodel.add(MaxPool2D())\nmodel.add(Flatten())\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))\nmodel.compile(optimizer='adam', loss='binary_crossentropy', \n              metrics=['accuracy'],\n              )","56b975c2":"model.fit(X,y, verbose=1,\n              epochs=10,\n         validation_data=(X_test,y_test))","0ccda3cf":"X.shape[1:]","86a92af9":"# saving and testing our model\nimport pickle","93839177":"pickle.dump(model, open(\"model.pickle\", 'wb'))","09ee64ee":"pickle_model = pickle.load(open(\"model.pickle\", 'rb'))","632b61f1":"predictions = pickle_model.predict([X_test])","887d5612":"predictions = np.argmax(predictions, axis=1)","9a3a9c59":"print(predictions[58])\nplt.imshow(X_test[58].reshape(new_size,new_size))","570a5eec":"print(predictions[95])\nplt.imshow(X_test[95].reshape(new_size,new_size))","05e90a9b":"## Cats and Dog Starter Code (adopting Sentdex approach)\n1.  Useful for beginners\n2.  Learn a crude alternative to creating your image training dataset without using keras flow_from_directory\n"}}