{"cell_type":{"5432f702":"code","af348588":"code","c7f42e27":"code","7fa84624":"code","df2f4de3":"code","fe90dc49":"code","75cc7dd3":"code","061deeb6":"code","24e127e5":"code","6016afe8":"code","f6111004":"code","00ff3c11":"code","18c2c63c":"code","16867b5c":"code","bccebe7c":"code","fef1dc09":"code","b3e6b816":"code","f72a4f45":"code","b4495fe6":"markdown","ce725a57":"markdown","beee0983":"markdown","3beb1751":"markdown","8ac3dcd1":"markdown","c3c87ff5":"markdown"},"source":{"5432f702":"import os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, Dropout\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay","af348588":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c7f42e27":"sample_submission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntrain = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')","7fa84624":"y_train = train.label\nX_train = train.drop(labels='label', axis=1)\nX_test = test","df2f4de3":"X_train, X_test = X_train.values.reshape(42000,28,28,1), X_test.values.reshape(28000,28,28,1)","fe90dc49":"y_train = to_categorical(y_train)","75cc7dd3":"X_train.shape, y_train.shape, X_test.shape","061deeb6":"X_train = X_train\/255\nX_test = X_test\/255","24e127e5":"plt.imshow(X_train[0][:,:,0], cmap='copper')\nplt.colorbar()","6016afe8":"plt.imshow(y_train[:5], cmap='copper')\nplt.colorbar()","f6111004":"input_shape = X_train.shape[1:]\nnum_classes = y_train.shape[1]","00ff3c11":"model = Sequential([\n    Conv2D(128, kernel_size=(3, 3), activation='relu', input_shape=input_shape),\n    Conv2D(256, kernel_size=(3, 3), activation='relu'),\n    Conv2D(512, kernel_size=(3, 3), activation='relu'),\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dense(256, activation='relu'),\n    Dense(128, activation='relu'),\n    Dense(num_classes, activation='softmax'),\n])\n","18c2c63c":"model.compile(loss=tf.keras.losses.categorical_crossentropy,\n              optimizer='adam',\n              metrics=['accuracy'])","16867b5c":"# if os.path.isfile('model.h5'):\n#     model = tf.keras.models.load_model('model.h5')\n#     print('Load model successfully')","bccebe7c":"model.summary()","fef1dc09":"model.fit(X_train, y_train,\n          batch_size=128,\n          epochs=20,\n          validation_split = 0.2)","b3e6b816":"#model.save('model.h5')","f72a4f45":"submission = pd.DataFrame({'ImageId':range(1,len(X_test)+1), 'Label':model.predict(X_test).argmax(axis=1)})\nsubmission.to_csv('submission.csv', index=False)","b4495fe6":"# Load Data","ce725a57":"# Preprocessing","beee0983":"# Imports","3beb1751":"# Preview","8ac3dcd1":"# Prediction","c3c87ff5":"# Model"}}