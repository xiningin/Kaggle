{"cell_type":{"268ded6b":"code","d9f9373f":"code","adbafa59":"code","971a0309":"code","3f6f7add":"code","a62e3095":"code","7cd75c9e":"code","87218a9d":"code","dd691e57":"code","a6a4b9cf":"code","8ae72946":"code","a07f342b":"code","b2e3d61c":"code","82bfb638":"code","2ea92d47":"code","e29fd632":"code","760b8fad":"code","77d8c242":"code","dace2b08":"code","d42281f9":"code","e4a43a26":"code","38504fce":"code","6d4aa366":"code","46f96e32":"code","0d652a31":"code","d623f7ba":"code","12829e8f":"code","aef173fc":"code","ba5bceea":"code","8cb8223f":"code","53df0588":"code","38031ad5":"code","4f23c338":"code","fb4d460b":"code","f09ff0b4":"code","222d45fe":"code","79b8d1e4":"code","cd61a9f7":"code","a45d9a12":"code","11618f5d":"code","f563fcb1":"code","f226ce71":"code","f95c6e5a":"code","bd3fe956":"code","41053107":"code","2a30dd8f":"code","eeb9c84f":"code","92029612":"code","4bdf210b":"code","0d984ed0":"code","6c52621f":"code","7314796a":"code","1a8b4665":"code","fcc50003":"code","21dcc47e":"code","6c901b16":"code","79f93b06":"code","20293085":"code","c7cc1ad7":"code","5b96e669":"code","d8049273":"code","551a61f0":"code","3ab76ef4":"code","d0d9b867":"code","9f7c0aa2":"code","30d95553":"code","5b0d221a":"code","d4e10d4f":"code","bc41ef09":"code","0fe0fe3b":"code","a1c31713":"code","adbf2719":"code","da2c3090":"code","1b9a392a":"code","179d5f65":"code","a8ba1335":"code","ed0254d7":"code","ea911f42":"code","c8d0addb":"code","4c4ac978":"code","c577ad70":"code","2a3a768d":"code","1f32754f":"code","ac54cc97":"code","6e66ae25":"code","fe49e8b2":"code","13066f7b":"code","d53d0252":"code","cb60efd5":"code","8b7adff0":"code","6ad2347a":"code","3e76d289":"code","0a43541a":"code","0794beaa":"code","630d6cd5":"code","8e31bd70":"code","f93f82cc":"code","42479844":"code","15b2cf16":"code","fb529227":"code","717a54f4":"code","395f0be8":"code","2670cf3b":"code","7071e785":"code","3f93832c":"code","bf9d1263":"code","6d14096d":"code","49d26c10":"code","c2bedfe2":"code","38a3c414":"code","bf17f86f":"code","bd6bd842":"code","cb3bddc1":"code","ca5a388d":"code","efadf8e2":"markdown","a6360bd3":"markdown","12d1cdee":"markdown","fcc0bcb3":"markdown","da5f7008":"markdown","b5c17f0a":"markdown","ac927ade":"markdown","a3af1b03":"markdown","bc98ab88":"markdown","53e42d47":"markdown","e06ddc20":"markdown","35230ec0":"markdown","03a27ac5":"markdown","650b05c1":"markdown","602ca76b":"markdown","76ad45e5":"markdown","89f49096":"markdown","7027b74a":"markdown","f6c418e4":"markdown","0a2ad375":"markdown","34587bc7":"markdown","f389d8aa":"markdown","ac1b50be":"markdown","8abe4e4b":"markdown","5efef621":"markdown","27e2523e":"markdown","a0367e1a":"markdown","75b71e4c":"markdown","92e15e66":"markdown","1ec9d7f3":"markdown","c8d62cc9":"markdown","e99454fb":"markdown","23f13c7c":"markdown","3a28fef5":"markdown","671ee07a":"markdown"},"source":{"268ded6b":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 500) #\u5c5e\u6027\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u8a2d\u5b9a\u5024\u3092\u5909\u66f4\npd.set_option('display.max_columns', 100)\n\nfrom itertools import product #\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u69cb\u7bc9\u3059\u308b\u90e8\u54c1\u3092\u5b9f\u88c5\u3057\u305fPython\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\nfrom sklearn.preprocessing import LabelEncoder\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\n\ndef plot_features(booster, figsize):    \n    fig, ax = plt.subplots(1,1,figsize=figsize)\n    return plot_importance(booster=booster, ax=ax)\n\nimport time\nimport sys #Python\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3084\u5b9f\u884c\u74b0\u5883\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u6271\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\nimport gc #\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\uff08Garbage collection\uff09\u3068\u306f\u3001\u5fc5\u8981\u306a\u304f\u306a\u3063\u305f\u30e1\u30e2\u30ea\u9818\u57df\u3092\u81ea\u52d5\u7684\u306b\u958b\u653e\u3059\u308b\u6a5f\u80fd\u3067\u3059\u3002 \n          #Python\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u5b9f\u884c\u306e\u305f\u3081\u306b\u5fc5\u8981\u306a\u30e1\u30e2\u30ea\u3092\u81ea\u52d5\u7684\u306b\u78ba\u4fdd\u3057\u3066\u304f\u308c\u307e\u3059\u304c\u3001GC\u306f\u305d\u306e\u5f8c\u7247\u4ed8\u3051\u3092\u3057\u3066\u304f\u308c\u308b\u6a5f\u80fd\u3060\u3068\u601d\u3063\u3066\u304f\u3060\u3055\u3044\nimport pickle #pickle\u306fPython\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u76f4\u5217\u5316\uff08\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff09\u3084\u975e\u76f4\u5217\u5316\uff08\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff09\u3092\u6271\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n              #\u5e73\u305f\u304f\u8a00\u3046\u3068\u3001Python\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3057\u3001\u547c\u3073\u51fa\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5f62\u306b\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3044\u3046\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\nsys.version_info","d9f9373f":"items = pd.read_csv('..\/input\/items.csv')\nshops = pd.read_csv('..\/input\/shops.csv')\ncats = pd.read_csv('..\/input\/item_categories.csv')\ntrain = pd.read_csv('..\/input\/sales_train.csv')\n# set index to ID to avoid droping it later\ntest  = pd.read_csv('..\/input\/test.csv').set_index('ID')","adbafa59":"items.head()","971a0309":"shops.head()","3f6f7add":"cats.head()","a62e3095":"train.head()\n# item_cnt_day - when someone buys an item, itemcntday = 1, if the item is returned back to the magazine\n# (for example, if it is defective), itemcntday = -1.","7cd75c9e":"test.head()","87218a9d":"len(train)","dd691e57":"plt.figure(figsize=(10,4))\nplt.xlim(-100, 3000) #X \u8ef8\u306e\u307f\u306e\u5236\u9650\u3092\u8a2d\u5b9a\nsns.boxplot(x=train.item_cnt_day)\n\nplt.figure(figsize=(10,4))\nplt.xlim(train.item_price.min(), train.item_price.max()*1.1)\nsns.boxplot(x=train.item_price)","a6a4b9cf":"train = train[train.item_price<100000] #this notation shuld be underestanded\ntrain = train[train.item_cnt_day<1001]","8ae72946":"# once again, make the plot\nplt.figure(figsize=(10,4))\nplt.xlim(-100, 3000) #X \u8ef8\u306e\u307f\u306e\u5236\u9650\u3092\u8a2d\u5b9a\nsns.boxplot(x=train.item_cnt_day)\n\nplt.figure(figsize=(10,4))\nplt.xlim(train.item_price.min(), train.item_price.max()*1.1)\nsns.boxplot(x=train.item_price)\n\n# no outliers can be confirmed!!!","a07f342b":"## Python\u306b\u304a\u3044\u3066True\u306f1\u3001False\u306f0\u3068\u307f\u306a\u3055\u308c\u308b\u305f\u3081\u3001bool\u5024\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066sum()\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3079\u3070\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u6570\u304c\u5f97\u3089\u308c\u308b\u3002()\n(train[\"item_price\"]<0).sum()","b2e3d61c":"median = train[\"item_price\"].median()\ntrain.loc[train.item_price<0, 'item_price'] = median","82bfb638":"# no item with price below zero ban be confirmed!!!\n(train[\"item_price\"]<0).sum()","2ea92d47":"shops.duplicated(subset='shop_name')","e29fd632":"# \u042f\u043a\u0443\u0442\u0441\u043a \u041e\u0440\u0434\u0436\u043e\u043d\u0438\u043a\u0438\u0434\u0437\u0435, 56\ntrain.loc[train.shop_id == 0, 'shop_id'] = 57\ntest.loc[test.shop_id == 0, 'shop_id'] = 57\n# \u042f\u043a\u0443\u0442\u0441\u043a \u0422\u0426 \"\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439\"\ntrain.loc[train.shop_id == 1, 'shop_id'] = 58\ntest.loc[test.shop_id == 1, 'shop_id'] = 58\n# \u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0443\u043b. \u0427\u043a\u0430\u043b\u043e\u0432\u0430 39\u043c\u00b2\ntrain.loc[train.shop_id == 10, 'shop_id'] = 11\ntest.loc[test.shop_id == 10, 'shop_id'] = 11","760b8fad":"# examine the data and do power technique \n\nshops.loc[shops.shop_name == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"', 'shop_name'] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'\nshops['city'] = shops['shop_name'].str.split(' ').map(lambda x: x[0])\nshops.loc[shops.city == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\nshops['city_code'] = LabelEncoder().fit_transform(shops['city'])\nshops = shops[['shop_id','city_code']]\n\ncats['split'] = cats['item_category_name'].str.split('-')\ncats['type'] = cats['split'].map(lambda x: x[0].strip())\ncats['type_code'] = LabelEncoder().fit_transform(cats['type'])\n# if subtype is nan then type\ncats['subtype'] = cats['split'].map(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\ncats['subtype_code'] = LabelEncoder().fit_transform(cats['subtype'])\ncats = cats[['item_category_id','type_code', 'subtype_code']]\n\nitems.drop(['item_name'], axis=1, inplace=True)\n\n## LabelEncoder()\u306f\uff0c\u6587\u5b57\u5217\u3084\u6570\u5024\u3067\u8868\u3055\u308c\u305f\u30e9\u30d9\u30eb\u3092\uff0c0~(\u30e9\u30d9\u30eb\u7a2e\u985e\u6570-1)\u307e\u3067\u306e\u6570\u5024\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u3082\u306e\u3067\u3059\n## fit_transform()\u3092\u4f7f\u3046\u3068\u697d\u3067\u3059\uff0e\u5165\u529b\u304c\u30e9\u30d9\u30eb\u306e\u4e00\u6b21\u5143\u30ea\u30b9\u30c8\uff0c\u51fa\u529b\u304c\u30e9\u30d9\u30ebID\u306e\u4e00\u6b21\u5143\u30ea\u30b9\u30c8\u306b\u306a\u3063\u3066\u3044\u307e\u3059","77d8c242":"shops.head()","dace2b08":"cats.head()","d42281f9":"len(list(set(test.item_id) - set(test.item_id).intersection(set(train.item_id)))), len(list(set(test.item_id))), len(test)\n## \u300cintersection\u300d\u3067\u914d\u5217\u540c\u58eb\u306e\u91cd\u8907\u3092\u96c6\u5408\u3055\u305b\u308b\uff08\u7a4d\u96c6\u5408\uff09","e4a43a26":"train.tail()","38504fce":"matrix = []\ncols = ['date_block_num','shop_id','item_id']\nfor i in range(34):\n    sales = train[train.date_block_num==i]\n    matrix.append(np.array(list(product([i], sales.shop_id.unique(), sales.item_id.unique())), dtype='int16'))\n## list()\u95a2\u6570\uff1astrlist = list('Python')  # 'P'\u3001'y'\u3001't'\u3001'h'\u3001'o'\u3001'n'\u3092\u8981\u7d20\u3068\u3059\u308b\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n# range(34)\u306e\u7406\u7531\u306fdate_block_num\u304c\uff10\u301c\uff13\uff13\u306e\u305f\u3081\n## product\u95a2\u6570\uff1a\u76f4\u7a4d\uff08\u30c7\u30ab\u30eb\u30c8\u7a4d\uff09\u306f\u3001\u8907\u6570\u306e\u96c6\u5408\u304b\u3089\u8981\u7d20\u3092\u4e00\u3064\u305a\u3064\u53d6\u308a\u51fa\u3057\u305f\u7d44\u307f\u5408\u308f\u305b\u306e\u96c6\u5408\u3002\n\nmatrix","6d4aa366":"matrix = pd.DataFrame(np.vstack(matrix), columns=cols) ## 2\u6b21\u5143\u3067\u3044\u3046\u3068\u7e26\u65b9\u5411(vertical)\u306b\u9023\u7d50\u3057\u307e\u3059\nmatrix['date_block_num'] = matrix['date_block_num'].astype(np.int8)\nmatrix['shop_id'] = matrix['shop_id'].astype(np.int8) ## this method shold be understanded\nmatrix['item_id'] = matrix['item_id'].astype(np.int16)\nmatrix.sort_values(cols,inplace=True)","46f96e32":"matrix.tail()","0d652a31":"train['revenue'] = train['item_price'] *  train['item_cnt_day']\n# item_price * amount","d623f7ba":"# add revenue columns\ntrain.head()","12829e8f":"train.dtypes","aef173fc":"group = train.groupby(['date_block_num','shop_id','item_id']).agg({'item_cnt_day': ['sum']})\ngroup.columns = ['item_cnt_month'] ## \u5217\u306e\u53d6\u5f97\u3057\u3066\u5225\u540d\u306b\u3002\u305d\u306e\u6708\u306b\u3007\u3007\u30a2\u30a4\u30c6\u30e0\u304c\u3001\u3042\u308b\u5e97\u3067\u4f55\u500b\u58f2\u308c\u305f\u304b\ngroup.head()\n\n## groupby \u306f\u3001\u540c\u3058\u5024\u3092\u6301\u3064\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u584a\u306b\u5bfe\u3057\u3066\u5171\u901a\u306e\u64cd\u4f5c\u3092\u884c\u3044\u305f\u3044\u6642\u306b\u4f7f\u3046\u3002\n## agg():\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u5024\u3092\u6c42\u3081\u3066\u8868\u3092\u4f5c\u308b\u3088\u3046\u306a\u64cd\u4f5c\u3092 Aggregation \u3068\u547c\u3076\n\n# In date_block_num,shop_id, in each item_id, get sum_data","ba5bceea":"## reset_index()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3001pandas.DataFrame, pandas.Series\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9index\uff08\u884c\u540d\u3001\u884c\u30e9\u30d9\u30eb\uff09\u30920\u59cb\u307e\u308a\u306e\u9023\u756a\uff08\u884c\u756a\u53f7\uff09\u306b\u632f\u308a\u76f4\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\ngroup.reset_index(inplace=True)","8cb8223f":"# check reset_data\ngroup.head()","53df0588":"matrix.head()","38031ad5":"cols","4f23c338":"matrix = pd.merge(matrix, group, on=cols, how='left')\nmatrix['item_cnt_month'] = (matrix['item_cnt_month']\n                                .fillna(0)\n                                .clip(0,20) # NB clip target here\n                                .astype(np.float16))\n\n## clip-method:df.clip(min,max) -> set upper-limit and under-limit\n## if figure is 32, it is transformed to 20!!!","fb4d460b":"matrix.head()","f09ff0b4":"test.head()","222d45fe":"# 34=2015\/11\ntest['date_block_num'] = 34\ntest['date_block_num'] = test['date_block_num'].astype(np.int8)\ntest['shop_id'] = test['shop_id'].astype(np.int8)\ntest['item_id'] = test['item_id'].astype(np.int16)","79b8d1e4":"test.head()","cd61a9f7":"ts = time.time()\nmatrix = pd.concat([matrix, test], ignore_index=True, sort=False, keys=cols)\nmatrix.fillna(0, inplace=True) # 34 month\ntime.time() - ts\n\n## cancat\u3068merge\u306e\u9055\u3044\n## \u524d\u8005\u306f\u7e26\u6a2a\u65b9\u5411\u306b\u9023\u7d50\u3001\u5f8c\u8005\u306f\u6761\u4ef6\u3092\u6307\u5b9a\u3057\u3066\u7d50\u5408\u3059\u308b\u611f\u3058","a45d9a12":"matrix.tail()","11618f5d":"ts = time.time()\nmatrix = pd.merge(matrix, shops, on=['shop_id'], how='left')\nmatrix = pd.merge(matrix, items, on=['item_id'], how='left')\nmatrix = pd.merge(matrix, cats, on=['item_category_id'], how='left')\nmatrix['city_code'] = matrix['city_code'].astype(np.int8)\nmatrix['item_category_id'] = matrix['item_category_id'].astype(np.int8)\nmatrix['type_code'] = matrix['type_code'].astype(np.int8)\nmatrix['subtype_code'] = matrix['subtype_code'].astype(np.int8)\ntime.time() - ts","f563fcb1":"matrix.tail()","f226ce71":"def lag_feature(df, lags, col):\n    tmp = df[['date_block_num','shop_id','item_id',col]] #tmp\u306blag_feature\u306e\u5f15\u6570\u306edf\u306e\u3046\u3061\u6307\u5b9a\u306e\u5217\u3092\u53d6\u5f97\u3059\u308b\n    for i in lags:\n        shifted = tmp.copy() # copy tmp and subsituate \"copy\" for shifted \n        shifted.columns = ['date_block_num','shop_id','item_id', col+'_lag_'+str(i)] #make shifted columns(but col..==nahn)\n        shifted['date_block_num'] += i\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left') #col+'_lag_'+str(i)\u306e\u5217\u3092\u8ffd\u52a0\u3059\u308b\u3002\n    # print(shifted.head())\n    return df","f95c6e5a":"ts = time.time()\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'item_cnt_month')\ntime.time() - ts","bd3fe956":"## matrix.loc[\"item_cnt_month_lag_12\"==1.0].head()","41053107":"matrix.tail()","2a30dd8f":"group.tail()","eeb9c84f":"matrix.tail()","92029612":"group = matrix.groupby(['date_block_num']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_avg_item_cnt' ]\n\n# item_cnt_month\u306f\u3042\u308b\u5e97\u3067\u3001\u3042\u308b\u30a2\u30a4\u30c6\u30e0\u304c\u4f55\u500b\u58f2\u308c\u305f\u304b\n# mean\u3092\u3068\u308b\u3053\u3068\u3067\u58f2\u308c\u305f\u5272\u5408\u304c\u3067\u308b","4bdf210b":"group.head()","0d984ed0":"group.reset_index(inplace=True)","6c52621f":"group.tail()\n# \u5404\u671f\u9593\u30d6\u30ed\u30c3\u30af\u306e\u30a2\u30a4\u30c6\u30e0\u6570\u306b\u5bfe\u3059\u308b\u3001\u58f2\u308c\u305f\u30a2\u30a4\u30c6\u30e0\u306e\u5272\u5408\uff01","7314796a":"matrix = pd.merge(matrix, group, on=['date_block_num'], how='left')\nmatrix['date_avg_item_cnt'] = matrix['date_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_avg_item_cnt')\nmatrix.drop(['date_avg_item_cnt'], axis=1, inplace=True)\n\n# date_avg_item_cnt_lag_1\u306e\u5217\u304c\u5897\u3048\u305f\u3002\n# \u610f\u5473\u5408\u3044\u3068\u3057\u3066\u306f\u3001lag\u3067\uff11\u671f\u9593\uff08block\uff09\u306e\u96c6\u8a08\u304c\u9045\u308c\u308b\u3068\u3044\u3046\u3053\u3068\uff1f\n# shifted['date_block_num'] += i\u3053\u3053\u3067\u30d7\u30e9\u30b9\uff11\u3057\u3066\u3044\u308b\n# 'date_avg_item_cnt'\u306e\u5217\u3092\u4f5c\u3063\u3066\u3001\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u5f8c\u306b\u305d\u308c\u3092\u6d88\u3057\u305f\u306e\u306f\u3001df.columns\u3067col+'_lag_'+str(i)\u3067\u4e0a\u66f8\u304d\u3057\u305f\u304b\u3089","1a8b4665":"matrix.head()","fcc50003":"group = matrix.groupby(['date_block_num', 'item_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_item_avg_item_cnt' ]\n# item_cnt_month\u306f\u3042\u308b\u671f\u9593\u3001\u3042\u308b\u5e97\u3067\u3001\u3042\u308b\u30a2\u30a4\u30c6\u30e0\u304c\u58f2\u308c\u305f\u304b\u5426\u304b\uff08\u58f2\u308c\u305f\u500b\u6570\u30ab\u30a6\u30f3\u30c8\uff09\n# \u4e0b\u8a18\u306e\uff11\u756a\u3046\u3048\u306e\u884c\u306e\u8aac\u660e\uff1a\u671f\u9593\uff10\u306b\u304a\u3044\u3066\u3001\u30a2\u30a4\u30c6\u30e0\u756a\u53f7\uff11\uff19\u306f\u3001\u30b7\u30e7\u30c3\u30d7\u5168\u4f53\u3067\u306f\uff10.\uff10\uff12\uff12\u306e\u5272\u5408\u3067\u3057\u304b\u58f2\u308c\u3066\u3044\u306a\u3044","21dcc47e":"group.head()","6c901b16":"group.reset_index(inplace=True)","79f93b06":"group.head()","20293085":"matrix = pd.merge(matrix, group, on=['date_block_num','item_id'], how='left')\nmatrix['date_item_avg_item_cnt'] = matrix['date_item_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'date_item_avg_item_cnt')\nmatrix.drop(['date_item_avg_item_cnt'], axis=1, inplace=True)\n# date_item_avg_item_cnt_lag_1\u301c\uff11\uff12\u307e\u3067\u5217\u304c\u8ffd\u52a0\u3055\u308c\u305f\n","c7cc1ad7":"matrix.head()","5b96e669":"group = matrix.groupby(['date_block_num', 'shop_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_shop_avg_item_cnt' ]\n\ngroup.head(34)\n# item_cnt_month\u306f\u3042\u308b\u671f\u9593\u3001\u3042\u308b\u5e97\u3067\u3001\u3042\u308b\u30a2\u30a4\u30c6\u30e0\u304c\u58f2\u308c\u305f\u304b\u5426\u304b\uff08\u58f2\u308c\u305f\u500b\u6570\u30ab\u30a6\u30f3\u30c8\uff09\n# \u4e0b\u8a18\u306e\uff11\u756a\u3046\u3048\u306e\u884c\u306e\u8aac\u660e\uff1a\u671f\u9593\uff10\u306b\u304a\u3044\u3066\u3001\u30b7\u30e7\u30c3\u30d7\uff12\u3067\u306f\u3001\u30a2\u30a4\u30c6\u30e0ID\u306e\u7a2e\u985e\u6570\u306b\u5bfe\u3057\u3066\uff10.\uff10\uff12\uff12\u306e\u5272\u5408\u3067\u3057\u304b\u58f2\u308c\u3066\u3044\u306a\u3044\uff08\u540c\u3058\u30a2\u30a4\u30c6\u30e0\u3092\u8907\u6570\u58f2\u3063\u305f\u5834\u5408\u306f\uff11\u3092\u8d85\u3048\u308b\u5834\u5408\u3042\u308a\uff09","d8049273":"group.reset_index(inplace=True)","551a61f0":"group.head()","3ab76ef4":"matrix = pd.merge(matrix, group, on=['date_block_num','shop_id'], how='left')\nmatrix['date_shop_avg_item_cnt'] = matrix['date_shop_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'date_shop_avg_item_cnt')\nmatrix.drop(['date_shop_avg_item_cnt'], axis=1, inplace=True)","d0d9b867":"matrix.head()","9f7c0aa2":"group = matrix.groupby(['date_block_num', 'item_category_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_cat_avg_item_cnt' ]\n\ngroup.head()","30d95553":"group.reset_index(inplace=True)\ngroup.head()","5b0d221a":"matrix = pd.merge(matrix, group, on=['date_block_num','item_category_id'], how='left')\nmatrix['date_cat_avg_item_cnt'] = matrix['date_cat_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_cat_avg_item_cnt')\nmatrix.drop(['date_cat_avg_item_cnt'], axis=1, inplace=True)\nmatrix.head()","d4e10d4f":"group = matrix.groupby(['date_block_num', 'shop_id', 'item_category_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_shop_cat_avg_item_cnt']\n\ngroup.head()","bc41ef09":"group.reset_index(inplace=True)\ngroup.head()","0fe0fe3b":"matrix = pd.merge(matrix, group, on=['date_block_num', 'shop_id', 'item_category_id'], how='left')\nmatrix['date_shop_cat_avg_item_cnt'] = matrix['date_shop_cat_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_shop_cat_avg_item_cnt')\nmatrix.drop(['date_shop_cat_avg_item_cnt'], axis=1, inplace=True)\nmatrix.head()","a1c31713":"group = matrix.groupby(['date_block_num', 'shop_id', 'type_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_shop_type_avg_item_cnt']\ngroup.head()","adbf2719":"group.reset_index(inplace=True)\ngroup.head()","da2c3090":"matrix = pd.merge(matrix, group, on=['date_block_num', 'shop_id', 'type_code'], how='left')\nmatrix['date_shop_type_avg_item_cnt'] = matrix['date_shop_type_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_shop_type_avg_item_cnt')\nmatrix.drop(['date_shop_type_avg_item_cnt'], axis=1, inplace=True)\n\nmatrix.head()","1b9a392a":"ts = time.time()\ngroup = matrix.groupby(['date_block_num', 'shop_id', 'subtype_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_shop_subtype_avg_item_cnt']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'shop_id', 'subtype_code'], how='left')\nmatrix['date_shop_subtype_avg_item_cnt'] = matrix['date_shop_subtype_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_shop_subtype_avg_item_cnt')\nmatrix.drop(['date_shop_subtype_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","179d5f65":"group = matrix.groupby(['date_block_num', 'city_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_city_avg_item_cnt' ]\ngroup.head()\n","a8ba1335":"group.reset_index(inplace=True)\ngroup.head()","ed0254d7":"matrix = pd.merge(matrix, group, on=['date_block_num', 'city_code'], how='left')\nmatrix['date_city_avg_item_cnt'] = matrix['date_city_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_city_avg_item_cnt')\nmatrix.drop(['date_city_avg_item_cnt'], axis=1, inplace=True)\n\nmatrix.head()","ea911f42":"group = matrix.groupby(['date_block_num', 'item_id', 'city_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_item_city_avg_item_cnt' ]\n\ngroup.head()","c8d0addb":"group.reset_index(inplace=True)\ngroup.head()","4c4ac978":"matrix = pd.merge(matrix, group, on=['date_block_num', 'item_id', 'city_code'], how='left')\nmatrix['date_item_city_avg_item_cnt'] = matrix['date_item_city_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_item_city_avg_item_cnt')\nmatrix.drop(['date_item_city_avg_item_cnt'], axis=1, inplace=True)\n\nmatrix.head()","c577ad70":"group = matrix.groupby(['date_block_num', 'type_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_type_avg_item_cnt' ]\n\ngroup.head()","2a3a768d":"group.reset_index(inplace=True)\ngroup.head()","1f32754f":"matrix = pd.merge(matrix, group, on=['date_block_num', 'type_code'], how='left')\nmatrix['date_type_avg_item_cnt'] = matrix['date_type_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_type_avg_item_cnt')\nmatrix.drop(['date_type_avg_item_cnt'], axis=1, inplace=True)\n\nmatrix.head()","ac54cc97":"group = matrix.groupby(['date_block_num', 'subtype_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_subtype_avg_item_cnt' ]\n\ngroup.head()","6e66ae25":"group.reset_index(inplace=True)\ngroup.head()","fe49e8b2":"matrix = pd.merge(matrix, group, on=['date_block_num', 'subtype_code'], how='left')\nmatrix['date_subtype_avg_item_cnt'] = matrix['date_subtype_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_subtype_avg_item_cnt')\nmatrix.drop(['date_subtype_avg_item_cnt'], axis=1, inplace=True)\n\nmatrix.head()","13066f7b":"ts = time.time()\ngroup = train.groupby(['item_id']).agg({'item_price': ['mean']})\ngroup.columns = ['item_avg_item_price']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['item_id'], how='left')\nmatrix['item_avg_item_price'] = matrix['item_avg_item_price'].astype(np.float16)\n\ngroup = train.groupby(['date_block_num','item_id']).agg({'item_price': ['mean']})\ngroup.columns = ['date_item_avg_item_price']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_id'], how='left')\nmatrix['date_item_avg_item_price'] = matrix['date_item_avg_item_price'].astype(np.float16)\n\nlags = [1,2,3,4,5,6]\nmatrix = lag_feature(matrix, lags, 'date_item_avg_item_price')\n\nfor i in lags:\n    matrix['delta_price_lag_'+str(i)] = \\\n        (matrix['date_item_avg_item_price_lag_'+str(i)] - matrix['item_avg_item_price']) \/ matrix['item_avg_item_price']\n\ndef select_trend(row):\n    for i in lags:\n        if row['delta_price_lag_'+str(i)]:\n            return row['delta_price_lag_'+str(i)]\n    return 0\n    \nmatrix['delta_price_lag'] = matrix.apply(select_trend, axis=1)\nmatrix['delta_price_lag'] = matrix['delta_price_lag'].astype(np.float16)\nmatrix['delta_price_lag'].fillna(0, inplace=True)\n\n# https:\/\/stackoverflow.com\/questions\/31828240\/first-non-null-value-per-row-from-a-list-of-pandas-columns\/31828559\n# matrix['price_trend'] = matrix[['delta_price_lag_1','delta_price_lag_2','delta_price_lag_3']].bfill(axis=1).iloc[:, 0]\n# Invalid dtype for backfill_2d [float16]\n\nfetures_to_drop = ['item_avg_item_price', 'date_item_avg_item_price']\nfor i in lags:\n    fetures_to_drop += ['date_item_avg_item_price_lag_'+str(i)]\n    fetures_to_drop += ['delta_price_lag_'+str(i)]\n\nmatrix.drop(fetures_to_drop, axis=1, inplace=True)\n\ntime.time() - ts","d53d0252":"matrix.head()","cb60efd5":"ts = time.time()\ngroup = train.groupby(['date_block_num','shop_id']).agg({'revenue': ['sum']})\ngroup.columns = ['date_shop_revenue']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','shop_id'], how='left')\nmatrix['date_shop_revenue'] = matrix['date_shop_revenue'].astype(np.float32)\n\ngroup = group.groupby(['shop_id']).agg({'date_shop_revenue': ['mean']})\ngroup.columns = ['shop_avg_revenue']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['shop_id'], how='left')\nmatrix['shop_avg_revenue'] = matrix['shop_avg_revenue'].astype(np.float32)\n\nmatrix['delta_revenue'] = (matrix['date_shop_revenue'] - matrix['shop_avg_revenue']) \/ matrix['shop_avg_revenue']\nmatrix['delta_revenue'] = matrix['delta_revenue'].astype(np.float16)\n\nmatrix = lag_feature(matrix, [1], 'delta_revenue')\n\nmatrix.drop(['date_shop_revenue','shop_avg_revenue','delta_revenue'], axis=1, inplace=True)\ntime.time() - ts","8b7adff0":"matrix.tail()","6ad2347a":"matrix['month'] = matrix['date_block_num'] % 12","3e76d289":"matrix.tail()","0a43541a":"days = pd.Series([31,28,31,30,31,30,31,31,30,31,30,31])\nmatrix['days'] = matrix['month'].map(days).astype(np.int8)","0794beaa":"matrix.tail()","630d6cd5":"## iterrows()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u30011\u884c\u305a\u3064\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u540d\uff08\u884c\u540d\uff09\u3068\u305d\u306e\u884c\u306e\u30c7\u30fc\u30bf\uff08pandas.Series\u578b\uff09\u306e\u30bf\u30d7\u30eb(index, Series)\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\nfor idx, row in matrix.iterrows():    \nts = time.time()\ncache = {}\nmatrix['item_shop_last_sale'] = -1\nmatrix['item_shop_last_sale'] = matrix['item_shop_last_sale'].astype(np.int8)\nfor idx, row in matrix.iterrows():    \n    key = str(row.item_id)+' '+str(row.shop_id)\n    if key not in cache:\n        if row.item_cnt_month!=0:\n            cache[key] = row.date_block_num\n    else:\n        last_date_block_num = cache[key]\n        matrix.at[idx, 'item_shop_last_sale'] = row.date_block_num - last_date_block_num\n        cache[key] = row.date_block_num         \ntime.time() - ts\n## if HashTable contains key, then calculate the difference beteween cached value and row.date_block_num.","8e31bd70":"matrix.tail()","f93f82cc":"ts = time.time()\ncache = {}\nmatrix['item_last_sale'] = -1\nmatrix['item_last_sale'] = matrix['item_last_sale'].astype(np.int8)\n\n\n## iterrows()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u30011\u884c\u305a\u3064\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u540d\uff08\u884c\u540d\uff09\u3068\u305d\u306e\u884c\u306e\u30c7\u30fc\u30bf\uff08pandas.Series\u578b\uff09\u306e\u30bf\u30d7\u30eb(index, Series)\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\nfor idx, row in matrix.iterrows():    \n    key = row.item_id\n    if key not in cache:\n        if row.item_cnt_month!=0:\n            cache[key] = row.date_block_num ##\u3000\u8f9e\u66f8\u578b\u306e\u8981\u7d20\u306e\u8ffd\u52a0\n    else:\n        last_date_block_num = cache[key]\n        if row.date_block_num>last_date_block_num:\n            matrix.at[idx, 'item_last_sale'] = row.date_block_num - last_date_block_num\n            ## at\u306f\u884c\u540d\u3068\u5217\u540d\u3067\u4f4d\u7f6e\u3092\u6307\u5b9a\u3059\u308b\u3002loc\u3068\u306e\u9055\u3044\u306f\u3001\u5358\u72ec\u306e\u6307\u5b9a\u304b\u5426\u304b\uff08at\u306f\u5358\u72ec\u306e\u307f\u6307\u5b9a\u3067\u304d\u308b\uff09\n            cache[key] = row.date_block_num         \ntime.time() - ts","42479844":"matrix.tail()","15b2cf16":"ts = time.time()\nmatrix['item_shop_first_sale'] = matrix['date_block_num'] - matrix.groupby(['item_id','shop_id'])['date_block_num'].transform('min')\nmatrix['item_first_sale'] = matrix['date_block_num'] - matrix.groupby('item_id')['date_block_num'].transform('min')\ntime.time() - ts","fb529227":"matrix.head()","717a54f4":"ts = time.time()\nmatrix = matrix[matrix.date_block_num > 11]\ntime.time() - ts","395f0be8":"# \u3081\u3061\u3083\u3061\u3083\u884c\u3092\u6e1b\u3089\u3057\u305f\nmatrix.head()","2670cf3b":"# \u6b20\u640d\u5024\u3092\uff10\u3067\u88dc\u3046\nts = time.time()\ndef fill_na(df):\n    for col in df.columns:\n        if ('_lag_' in col) & (df[col].isnull().any()):\n            if ('item_cnt' in col):\n                df[col].fillna(0, inplace=True)         \n    return df\n\nmatrix = fill_na(matrix)\ntime.time() - ts","7071e785":"matrix.head()","3f93832c":"matrix.columns","bf9d1263":"matrix.info()","6d14096d":"matrix.to_pickle('data.pkl')\ndel matrix\ndel cache\ndel group\ndel items\ndel shops\ndel cats\ndel train\n# leave test for submission\ngc.collect();","49d26c10":"data = pd.read_pickle('data.pkl')","c2bedfe2":"data = data[[\n    'date_block_num',\n    'shop_id',\n    'item_id',\n    'item_cnt_month',\n    'city_code',\n    'item_category_id',\n    'type_code',\n    'subtype_code',\n    'item_cnt_month_lag_1',\n    'item_cnt_month_lag_2',\n    'item_cnt_month_lag_3',\n    'item_cnt_month_lag_6',\n    'item_cnt_month_lag_12',\n    'date_avg_item_cnt_lag_1',\n    'date_item_avg_item_cnt_lag_1',\n    'date_item_avg_item_cnt_lag_2',\n    'date_item_avg_item_cnt_lag_3',\n    'date_item_avg_item_cnt_lag_6',\n    'date_item_avg_item_cnt_lag_12',\n    'date_shop_avg_item_cnt_lag_1',\n    'date_shop_avg_item_cnt_lag_2',\n    'date_shop_avg_item_cnt_lag_3',\n    'date_shop_avg_item_cnt_lag_6',\n    'date_shop_avg_item_cnt_lag_12',\n    'date_cat_avg_item_cnt_lag_1',\n    'date_shop_cat_avg_item_cnt_lag_1',\n    #'date_shop_type_avg_item_cnt_lag_1',\n    #'date_shop_subtype_avg_item_cnt_lag_1',\n    'date_city_avg_item_cnt_lag_1',\n    'date_item_city_avg_item_cnt_lag_1',\n    #'date_type_avg_item_cnt_lag_1',\n    #'date_subtype_avg_item_cnt_lag_1',\n    'delta_price_lag',\n    'month',\n    'days',\n    'item_shop_last_sale',\n    'item_last_sale',\n    'item_shop_first_sale',\n    'item_first_sale',\n]]","38a3c414":"X_train = data[data.date_block_num < 33].drop(['item_cnt_month'], axis=1)\nY_train = data[data.date_block_num < 33]['item_cnt_month']\nX_valid = data[data.date_block_num == 33].drop(['item_cnt_month'], axis=1)\nY_valid = data[data.date_block_num == 33]['item_cnt_month']\nX_test = data[data.date_block_num == 34].drop(['item_cnt_month'], axis=1)","bf17f86f":"del data \ngc.collect();","bd6bd842":"ts = time.time()\n\nmodel = XGBRegressor(\n    max_depth=8,\n    n_estimators=1000, # \u6728\u306e\u6570\uff08\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3067\u7528\u3044\u308b\uff09\n    min_child_weight=300,  # \u6c7a\u5b9a\u6728\u306e\u8449\u306e\u91cd\u307f\u306e\u4e0b\u9650\n    colsample_bytree=0.8,  # \u5404\u6c7a\u5b9a\u6728\u306b\u7f6e\u3044\u3066\u30e9\u30f3\u30c0\u30e0\u306b\u62bd\u51fa\u3055\u308c\u308b\u5217\u306e\u5272\u5408\n    subsample=0.8,  # \u5404\u6c7a\u5b9a\u6728\u306b\u7f6e\u3044\u3066\u30e9\u30f3\u30c0\u30e0\u306b\u62bd\u51fa\u3055\u308c\u308b\u6a19\u672c\u306e\u5272\u5408\n    eta=0.3, # \u5b66\u7fd2\u7387\n    seed=42)\n\nmodel.fit(\n    X_train, \n    Y_train, \n    eval_metric=\"rmse\", \n    eval_set=[(X_train, Y_train), (X_valid, Y_valid)], \n    verbose=True, \n    early_stopping_rounds = 10)\n\ntime.time() - ts","cb3bddc1":"Y_pred = model.predict(X_valid).clip(0, 20)\nY_test = model.predict(X_test).clip(0, 20)\n\nsubmission = pd.DataFrame({\n    \"ID\": test.index, \n    \"item_cnt_month\": Y_test\n})\nsubmission.to_csv('xgb_submission.csv', index=False)\n\n# save predictions for an ensemble\npickle.dump(Y_pred, open('xgb_train.pickle', 'wb'))\npickle.dump(Y_test, open('xgb_test.pickle', 'wb'))","ca5a388d":"plot_features(model, (10,14))","efadf8e2":"## Shops\/Items\/Cats features","a6360bd3":"shop\u306b\u306f\u91cd\u8907\u3057\u305f\u540d\u524d\u304c\u306a\u3044\u306e\u3067\u306f\uff1f\uff1f\n\u3053\u3053\u306e\u5909\u63db\u304c\u5c11\u3057\u4e0d\u660e\u3002\u3002\u3002","12d1cdee":"Several shops are duplicates of each other (according to its name). Fix train and test set.","fcc0bcb3":"downcasting:\u30af\u30e9\u30b9\u30d9\u30fc\u30b9\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\u3001\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u307e\u305f\u306f\u578b\u6539\u826f\u306f\u3001\u57fa\u672c\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3092\u305d\u306e\u6d3e\u751f\u30af\u30e9\u30b9\u306e1\u3064\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u52d5\u4f5c\u3067\u3059\u3002","da5f7008":"This notebook is simpified version of the final project in the [How to Win a Data Science Competition: Learn from Top Kagglers](https:\/\/www.coursera.org\/learn\/competitive-data-science) course. Simplified means without ensembling.\n\n#### Pipline\n* load data\n* heal data and remove outliers\n* work with shops\/items\/cats objects and features\n* create matrix as product of item\/shop pairs within each month in the train set\n* get monthly sales for each item\/shop pair in the train set and merge it to the matrix\n* clip item_cnt_month by (0,20)\n* append test to the matrix, fill 34 month nans with zeros\n* merge shops\/items\/cats to the matrix\n* add target lag features\n* add mean encoded features\n* add price trend features\n* add month\n* add days\n* add months since last sale\/months since first sale features\n* cut first year and drop columns which can not be calculated for the test set\n* select best features\n* set validation strategy 34 test, 33 validation, less than 33 train\n* fit the model, predict and clip targets for the test set","b5c17f0a":"## Outliers","ac927ade":"\u4ee5\u4e0b\u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u306e\u4f5c\u696d\u3092\u7e70\u308a\u8fd4\u3059","a3af1b03":"There are items with strange prices and sales. After detailed exploration I decided to remove items with price > 100000 and sales > 1001 (1000 is ok).","bc98ab88":"## Mean encoded features","53e42d47":"def lag_feature(df, lags, col): \n\n    tmp = df[['date_block_num','shop_id','item_id',col]]\n    \n    for i in lags:\n    \n        shifted = tmp.copy()  \n        \n        shifted.columns = ['date_block_num','shop_id','item_id', col+'_lag_'+str(i)] \n        \n        shifted['date_block_num'] += i\n        \n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left') \n        \n    return df\n    ","e06ddc20":"\u3044\u3064\u3001\u3069\u306e\u5e97\u3067\u3001\u306a\u3093\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u3001\u3069\u306e\u304f\u3089\u3044\u306e\u6570\u91cf\u3067\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3057\u3066\u3044\u304f\u9014\u4e2d","35230ec0":"Producing lags brings a lot of nulls.","03a27ac5":"Validation strategy is 34 month for the test set, 33 month for the validation set and 13-33 months for the train.","650b05c1":"## Shops\/Cats\/Items preprocessing\nObservations:\n* Each shop_name starts with the city name.\n* Each category contains type and subtype in its name.","602ca76b":"# Part 1, perfect features","76ad45e5":"Number of days in a month. There are no leap years.","89f49096":"## Final preparations\nBecause of the using 12 as lag value drop first 12 months. Also drop all the columns with this month calculated values (other words which can not be calcucated for the test set).","7027b74a":"Months since the first sale for each shop\/item pair and for item only.","f6c418e4":"\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u3002\u3002\u3002","0a2ad375":"Months since the last sale for each shop\/item pair and for item only. I use programing approach.\n\n<i>Create HashTable with key equals to {shop_id,item_id} and value equals to date_block_num. Iterate data from the top. Foreach row if {row.shop_id,row.item_id} is not present in the table, then add it to the table and set its value to row.date_block_num. if HashTable contains key, then calculate the difference beteween cached value and row.date_block_num.<\/i>","34587bc7":"\u5b66\u7fd2\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c9\u7b49\u3067\u7279\u5fb4\u91cf\u3092\u52a0\u5de5","f389d8aa":"Price trend for the last six months.","ac1b50be":"\"\"\"\"\nmedian = train[(train.shop_id==32)&(train.item_id==2973)&(train.date_block_num==4)&(train.item_price>0)].item_price.median()\ntrain.loc[train.item_price<0, 'item_price'] = median\n# I cannot understand why shop_id==32...block_num==4\n# where does this figure come? \n\"\"\"\"\n\n\u5143\u3005\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u304c\u3042\u3063\u305f\u304c\u3001\u4e0b\u8a18\u306b\u5909\u66f4\u3057\u3066\u3044\u308b","8abe4e4b":"## Monthly sales\nTest set is a product of some shops and some items within 34 month. There are 5100 items * 42 shops = 214200 pairs. 363 items are new compared to the train. Hence, for the most of the items in the test set target value should be zero. \nIn the other hand train set contains only pairs which were sold or returned in the past. Tha main idea is to calculate monthly sales and <b>extend it with zero sales<\/b> for each unique pair within the month. This way train data will be similar to test data.","5efef621":"**\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d**","27e2523e":"Last month shop revenue trend","a0367e1a":"Aggregate train set by shop\/item pairs to calculate target aggreagates, then <b>clip(0,20)<\/b> target value. This way train target will be similar to the test predictions.\n\n<i>I use floats instead of ints for item_cnt_month to avoid downcasting it after concatination with the test set later. If it would be int16, after concatination with NaN values it becomes int64, but foat16 becomes float16 even with NaNs.<\/i>","75b71e4c":"# Part 2, xgboost","92e15e66":"## Test set\nTo use time tricks append test pairs to the matrix.","1ec9d7f3":"## Traget lags","c8d62cc9":"Select perfect features","e99454fb":"## Special features","23f13c7c":"There is one item with price below zero. Fill it with median.","3a28fef5":"\u4e0a\u8a18\u307e\u3067\u3067\u3072\u305f\u3059\u3089\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3057\u305f\uff01","671ee07a":"## Trend features"}}