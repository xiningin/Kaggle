{"cell_type":{"bf18711b":"code","73cb14c7":"code","17977bc1":"code","f04799b2":"code","400f5268":"code","4166a2c9":"code","bd6e4f50":"code","3a5389dd":"code","eb03eab4":"code","b04a9cd2":"code","7586446d":"code","263c9280":"code","2f92944d":"code","619133ff":"code","14751a05":"code","411636c2":"code","b5e6d400":"code","aee8af2a":"code","236cd796":"code","b6824407":"markdown","ee16c874":"markdown","174580d9":"markdown","9fb8aa66":"markdown","16aab7d5":"markdown","e15de2f8":"markdown","d66cac43":"markdown","f6f173db":"markdown","48e9e345":"markdown","96187079":"markdown","ab408637":"markdown","71964e7d":"markdown","e47ccd3a":"markdown","23aef98e":"markdown","0b8521fb":"markdown","c992f5dd":"markdown","a120c6f2":"markdown","e59231d4":"markdown","df38354f":"markdown","21549e63":"markdown","a26e69eb":"markdown","3f57ebf2":"markdown","c3f66b75":"markdown","dd3284be":"markdown"},"source":{"bf18711b":"!pip install -q quick-ml","73cb14c7":"import tensorflow as tf\nimport quick_ml","17977bc1":"from quick_ml.k_fold_training import train_k_fold_pred","f04799b2":"from kaggle_datasets import KaggleDatasets\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('cats-dogs-192x192-tfrecords-part-wise')\nprint(GCS_DS_PATH)","400f5268":"train_tfrec_path = '\/Train\/*.tfrecords'\nval_tfrec_path = '\/Val\/*.tfrecords'\n#TRAINING_FILENAMES = tf.io.gfile.glob(GCS_DS_PATH + train_tfrec_path) + tf.io.gfile.glob(GCS_DS_PATH + val_tfrec_path)","4166a2c9":"#TRAINING_FILENAMES","bd6e4f50":"import pandas as pd","3a5389dd":"from quick_ml.begin_tpu import get_labeled_tfrecord_format\n\ndictionary_labeled =  \"{'image' : tf.io.FixedLenFeature([], tf.string),'label' : tf.io.FixedLenFeature([], tf.int64)}\"\nIMAGE_SIZE = \"192,192\"\n\nget_labeled_tfrecord_format(dictionary_labeled, IMAGE_SIZE)","eb03eab4":"from quick_ml.begin_tpu import define_tpu_strategy\n\nstrategy, tpu = define_tpu_strategy()","b04a9cd2":"from kaggle_datasets import KaggleDatasets\nGCS_DS_PATH_unlabeled = KaggleDatasets().get_gcs_path('test-tfrecords-cats-dogs-192x192')\nGCS_DS_PATH_unlabeled","7586446d":"test_tfrec_path = '\/test*.tfrecords'","263c9280":"from quick_ml.begin_tpu import get_unlabeled_tfrecord_format\ndictionary_unlabeled = \"{ 'image' : tf.io.FixedLenFeature([], tf.string), 'idnum' : tf.io.FixedLenFeature([], tf.string) }\"\nIMAGE_SIZE = \"192,192\"\nget_unlabeled_tfrecord_format(dictionary_unlabeled, IMAGE_SIZE)","2f92944d":"help(train_k_fold_pred)","619133ff":"k = 5\nn_class = 1\nmodel_name = 'EfficientNetB1'\ntrain_tfrecs_path = train_tfrec_path  # or '\/Train\/*.tfrecords'\ntest_tfrecs_path = test_tfrec_path   #or '\/test*.tfrecords'\nval_tfrecs_path = val_tfrec_path   #or '\/Val\/*.tfrecords'\nGCS_DS_PATH_labeled = GCS_DS_PATH  # defined before\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nEPOCHS = 5\ninput_shape = [192,192,3]\nactivation = 'sigmoid'\noptimizer = 'rmsprop'\nloss = 'binary_crossentropy'\nmetrics = 'accuracy'\n\neffnetb1 = train_k_fold_pred(k, tpu,n_class,  model_name, train_tfrecs_path, val_tfrecs_path, test_tfrecs_path, \n                            GCS_DS_PATH_labeled, GCS_DS_PATH_unlabeled, BATCH_SIZE, EPOCHS, input_shape = input_shape, \n                            activation = activation, optimizer = optimizer, loss = loss, metrics = metrics)","14751a05":"df = effnetb1.train_k_fold()","411636c2":"df","b5e6d400":"df.to_csv(\"training_report.csv\", index = False)","aee8af2a":"effnetb1.obtain_predictions()","236cd796":"preds = pd.read_csv('predictions.csv')\npreds","b6824407":"Please keep the order of imports same as mentioned below. Tensorflow should be imported first. quick_ml should be imported after tensorflow.","ee16c874":"Make the necessary import to perform K-Fold Training & Predictions. Learn more [here](https:\/\/antoreepjana.wixsite.com\/quick-ml\/k-fold-training-predictions)","174580d9":"### GET THE TPU STRATEGY","9fb8aa66":"Once we have our datasets ready and followed the steps correctly, we can proceed forward to K-Fold Model Training. This can be achieved using [train_k_fold_pred utility](https:\/\/antoreepjana.wixsite.com\/quick-ml\/k-fold-training-predictions). <br>\n<br>\nDefine the following parameters to begin K-Fold Model Training -> \n* Number of folds to train for \n* n_class, 1 for binary, n for multi-class, where n shows the possible number of output class\n* model_name, to mention which pretrained model to be used\n* train_tfrecs_path, path of the train tfrecord files relative to the GCS_DS_PATH defined earlier\n* test_tfrecs_path, path of the test tfrecord files relative to the GCS_DS_PATH_unlabeled defined earlier.\n* BATCH_SIZE, as the name suggests. Min -> 16 * strategy.num_replicas_in_sync, optimum -> 32* strategy.num_replicas_in_sync\n* Epochs, num of epochs\n* input_shape, \n* activation function to use\n* optimizer function\n* loss function\n* metrics\n\nOnce the above parameters are defined, call the Class variable train_k_fold_pred() and instantiate an object of the same with any variable. For convinience, effnetb1 is the variable name used to name the instance obtained after the constructor call of the class train_k_fold_pred().","16aab7d5":"Define the Test TFRecords Files as follows: \n* obtain the GCS_DS_PATH and \n* store it in a different variable (different from the one used for labeled\/train tfrecords).\n* get the relative path of the Test TFRecords Files (relative to the directory of Test TFRecords)\n* define the unlabeled TFRecord format using get_unlabeled_tfrecord_format. Learn more [here](https:\/\/antoreepjana.wixsite.com\/quick-ml\/begin-working-w-tpu)","e15de2f8":"In this notebook, we shall see & learn how to perform K-Fold Training using quick_ml. <br>\nThere are various data sampling methods -> <br> 1) Simple K-Fold Training <br>2) Stratified K-Fold Training <br> <br>\nquick_ml supports \"Simple K-Fold\" Training as of now. Plans are to introduce \"Stratified K-Fold Training\" in near future. <br>\nTypically, K-Fold Training using GPUs are computationally expensive and aren't fully supported. For bigger model architectures, hardly 4 folds are supported. However, with quick_ml you can easily train models for folds as high as 20 folds. This has been possible due to extreme optimizations in RAM memory.","d66cac43":"To begin with, you'd need two datasets. One for training the models. Other for obtaining predictions. <br>\n* [Training Dataset (Cats Dogs Part-Wise TFRecords)](https:\/\/www.kaggle.com\/antoreepjana\/cats-dogs-192x192-tfrecords-part-wise)\n* [Testing Dataset (Cats Dogs Dataset TFRecords)](https:\/\/www.kaggle.com\/antoreepjana\/test-tfrecords-cats-dogs-192x192) \nHere I've replaced the usual training dataset which was in a single tfrecords file to multiple fragments. Same for the validation dataset files. <br>\nAnd that's the essence of K-Fold Training. In the model training (k fold training), behind the scenes, quick_ml picks out one of the 10 parts\/folds of the training dataset as validation data.","f6f173db":"## Obtain GCS PATH","48e9e345":"get_labeled_tfrecord_format is used to define the format of the TFRecords dataset to be used for model trianing. Learn more [here](https:\/\/antoreepjana.wixsite.com\/quick-ml\/begin-working-w-tpu)","96187079":"## Obtain predictions","ab408637":"## INITIALIZE OBJECT FOR KFoldTraining","71964e7d":"## Installation","e47ccd3a":"After successful installation and correct imports of the both packages, you should see a message indicating status of Tensorflow import & it's version number.","23aef98e":"Call the train_k_fold() method to begin the K-Fold Model training. Obtain the output of various folds in a DataFrame.","0b8521fb":"### Save the training_report output as a csv file","c992f5dd":"If the GCS_DS_PATH was printed sucessfully, mention the relative path (relative to the GCS_DS_PATH's folder directory) of the tfrec files. ","a120c6f2":"Call the obtain_predictions to obtain predictions on the test dataset. Learn more [here](https:\/\/antoreepjana.wixsite.com\/quick-ml\/k-fold-training-predictions).","e59231d4":"Note:- Please mention the full name of the dataset as an argument in get_gcs_path() rather than leaving it empty. In presence of more than one dataset, it would cause conflict. However, in the presence of single dataset, it's a good practice to mention the full name of the dataset as an argument in the get_gcs_path().","df38354f":"# Official Website -> [quick-ml](http:\/\/antoreepjana.wixsite.com\/quick-ml)","21549e63":"define_tpu_strategy is used to instantiate the TPU strategy (if TPU present) & tpu instance (if TPU present). <br>\nLearn more [here](https:\/\/antoreepjana.wixsite.com\/quick-ml\/begin-working-w-tpu)","a26e69eb":"## Necessary Imports","3f57ebf2":"### PERFORM K-FOLD TRAINING","c3f66b75":"## Adding the Datasets","dd3284be":"### Define the LABELED TFRECORD FORMAT"}}