{"cell_type":{"9fb80f51":"code","87202409":"code","4b6fb7ad":"code","ec357048":"code","979af453":"code","188f4a9b":"code","68e25286":"code","e1a5e7f9":"code","f92ec976":"code","c1356996":"code","48da6845":"code","1c98f94a":"code","a620dc85":"code","1a2e62d9":"code","da279b18":"code","468059bf":"code","88b88ddd":"code","40a02562":"code","9b77025f":"code","791ee7ae":"code","01b1ef89":"markdown","18d733d5":"markdown","69cd7638":"markdown","1da22505":"markdown","7e7e3614":"markdown","a1970667":"markdown","1b2e7686":"markdown","244c35f3":"markdown","ecfa7423":"markdown","cb7b64a9":"markdown","ed49c081":"markdown","4ea359ac":"markdown","234ef114":"markdown"},"source":{"9fb80f51":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87202409":"import pandas as pd\nimport seaborn as sns\nimport numpy as np","4b6fb7ad":"Data = pd.read_csv('\/kaggle\/input\/into-the-future\/train.csv')","ec357048":"Data.info()","979af453":"Data.head()","188f4a9b":"Data.isnull().any()","68e25286":"X = Data['feature_1'].values.reshape(-1,1)\nY = Data['feature_2'].values.reshape(-1,1)","e1a5e7f9":"import matplotlib.pyplot as plt\n\nplt.scatter(X,Y)","f92ec976":"sns.distplot(Data['feature_1'])","c1356996":"sns.distplot(Data['feature_2'])","48da6845":"sns.jointplot(x='feature_1',y='feature_2',data=Data)","1c98f94a":"from sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split","a620dc85":"model = LinearRegression()\nmodel.fit(X,Y)","1a2e62d9":"Test = pd.read_csv('\/kaggle\/input\/into-the-future\/test.csv')\nTest.head()\ntest = Test['feature_1'].values.reshape(-1,1)\ni = Test['id'].values.reshape(-1,1)","da279b18":"pred = model.predict(test)\npred = pd.DataFrame({'id': i.flatten(),'feature_2': pred.flatten()})\npred.to_csv('Sub.csv')","468059bf":"model_s =SVR(kernel='linear')","88b88ddd":"model_s.fit(X,Y)","40a02562":"preds = model_s.predict(test)\npreds = pd.DataFrame({'id': i.flatten(),'feature_2': preds.flatten()})\npreds.to_csv('Sub1.csv')","9b77025f":"print(pred)","791ee7ae":"print(preds)","01b1ef89":"Now using the support vector machine for predicting","18d733d5":"From The above plots we can get to know that we can get the straight line\/best fit line so we can use LinearRegression and others ","69cd7638":"Checking if their any null Values","1da22505":"Loading The Data","7e7e3614":"Getting the test Data to predict the value from the model","a1970667":"For training getting X and Y variable from the Dataset","1b2e7686":"From the info we can know the data info like how many row and columns","244c35f3":"predicting the Value of test and saving into the CSV file","ecfa7423":"Here by using the SVM instead LogisticRegression we can get more accuracy","cb7b64a9":"**Name : Jay Thakkar**\n\n**Email: jaythakkar766@gmail.com**","ed49c081":"Importing the libraries","4ea359ac":"fitting the data in the a model","234ef114":"By implementing the the different type of graphs we can known what kind of data it is and which model to use"}}