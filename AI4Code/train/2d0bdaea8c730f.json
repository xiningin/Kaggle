{"cell_type":{"6cd3aa58":"code","79327ae3":"code","be7e0707":"code","a8a38223":"code","a14ae675":"code","ceaf21d1":"code","66a7fa87":"code","fffc3ba1":"code","72e6089c":"code","6ac32351":"code","c8d54c9b":"code","7f97c932":"code","fff953d6":"code","9b29000e":"code","143b0531":"code","b8536131":"code","218de960":"code","08222f59":"code","09e44338":"code","8c58e4d4":"code","752e8d5b":"code","254e73c0":"code","b08a688d":"code","3af0ffa4":"code","ddc93e8f":"code","a74f7261":"code","c71cbd8d":"code","b066b150":"code","69a63ebb":"code","d1f81f0f":"code","3790a8d7":"code","f4655488":"code","399eeaac":"code","8a928c0a":"code","a3dfa62f":"code","f2faf586":"code","54c3c072":"code","66fbec8c":"code","e653743f":"code","00f5aa69":"code","cff385f1":"code","a8613cec":"code","f3c249d6":"code","79a73236":"code","b2525e67":"code","2c8ea3b0":"code","51e3b124":"code","869590e9":"code","453b9756":"code","a0cab243":"code","accb64f1":"code","44e6cda4":"code","c90f4bea":"code","b5faced6":"code","36d2b2ea":"code","355c2a6d":"code","64465141":"code","583c3964":"code","b15d2e98":"code","974269aa":"code","1e03e414":"code","4de1ccbe":"code","c0e88559":"code","f543bd45":"code","3d63b189":"code","d165b95b":"code","9ebd268a":"code","bf28bf56":"code","1e085d03":"code","b3640d52":"code","7847b815":"code","ba9ae5f6":"markdown"},"source":{"6cd3aa58":"# Importing necessary Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\npd.options.display.max_columns = None\npd.options.display.max_rows = None","79327ae3":"#Importing the datasets\ntrain = pd.read_csv('train.csv')\ntest = pd.read_csv('test.csv')\ntrain.head()","be7e0707":"#Checking the first five columns of data\ntest.head()","a8a38223":"#Checking the shape of both training and test datasets so as to get the no. of rows and columns\nprint(\"Training Set: \", train.shape)\nprint(\"Test Set: \", test.shape)","a14ae675":"#Getting the collinearity between variables\ntrain.corr()","ceaf21d1":"'''First taking a glance at the Target variable 'SalePrice'. We should make sure that it is normally distributed.\nBut, from the Graph , It is right skewed'''\nplt.figure(figsize=(12,8))\nsns.distplot(train['SalePrice'], kde=True, color='red')","66a7fa87":"#This makes the target variable somewhere normally distributed\nplt.figure(figsize=(12,8))\nlog_value = np.log1p(train['SalePrice'])\nsns.distplot(log_value)","fffc3ba1":"#Checking the skewness and kurtosis of target variable\nprint(\"Skewness: \" + str(train['SalePrice'].skew()))\nprint(\"Kurtosis: \" + str(train['SalePrice'].kurt()))","72e6089c":"#Multivariate plot\ncol = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt', 'GarageArea']\nsns.set(style='ticks')\nsns.pairplot(train[col], height=8, kind='reg')","6ac32351":"#Checking highly correalated variables relational plot with the target variable","c8d54c9b":"plt.figure(figsize=(10,6))\nsns.boxplot(x=train['OverallQual'], y=train['SalePrice'], data=train)","7f97c932":"plt.figure(figsize=(10,6))\nsns.scatterplot(x=train['GrLivArea'], y=train['SalePrice'], data=train)","fff953d6":"plt.figure(figsize=(10,6))\nsns.boxplot(x=train['GarageCars'], y=train['SalePrice'], data=train)","9b29000e":"plt.figure(figsize=(10,6))\nsns.scatterplot(x=train['GarageArea'], y=train['SalePrice'], data=train)","143b0531":"plt.figure(figsize=(10,6))\nsns.scatterplot(x=train['TotalBsmtSF'], y=train['SalePrice'], data=train)","b8536131":"plt.figure(figsize=(10,6))\nsns.scatterplot(x=train['1stFlrSF'], y=train['SalePrice'], data=train)","218de960":"plt.figure(figsize=(10,6))\nsns.boxplot(x=train['FullBath'], y=train['SalePrice'], data=train)","08222f59":"plt.figure(figsize=(10,6))\nsns.scatterplot(x=train['YearBuilt'], y=train['SalePrice'], data=train)","09e44338":"plt.figure(figsize=(10,6))\nsns.scatterplot(x=train['YearRemodAdd'], y=train['SalePrice'], data=train)","8c58e4d4":"plt.figure(figsize=(10,6))\nsns.scatterplot(x=train['GarageYrBlt'], y=train['SalePrice'], data=train)","752e8d5b":"plt.figure(figsize=(10,6))\nsns.scatterplot(x=train['GrLivArea'], y=train['SalePrice'], data=train)","254e73c0":"plt.figure(figsize=(10,6))\nsns.boxplot(x=train['TotRmsAbvGrd'], y=train['SalePrice'], data=train)","b08a688d":"#Dropping the columns having more NaNs\ntrain = train.drop(['Alley', 'PoolQC', 'MiscFeature'], axis=1)\ntest = test.drop(['Alley', 'PoolQC', 'MiscVal'], axis=1)","3af0ffa4":"print(\"Training Set: \", train.shape)\nprint(\"Test Set: \", test.shape)","ddc93e8f":"# Checking that what type of data variables we have\ntrain_corr = train.select_dtypes(include=[np.number])\ntrain_corr.shape","a74f7261":"test_corr = test.select_dtypes(include=[np.number])\ntest_corr.shape","c71cbd8d":"train_corr = train.select_dtypes(include=[object])\ntrain_corr.shape","b066b150":"test_corr = test.select_dtypes(include=[object])\ntest_corr.shape","69a63ebb":"#Storing the ID values as we have to use it when we make a submission\nId_values = test.Id","d1f81f0f":"#Deleting unnecessary variables\ndel train['Id']\ndel test['Id']\ndel train['Utilities']\ndel test['Utilities']","3790a8d7":"print(\"Training Set: \", train.shape)\nprint(\"Test Set: \", test.shape)","f4655488":"## Deleting those two values with outliers. \ntrain = train[train.GrLivArea < 4500]\ntrain.reset_index(drop = True, inplace = True)","399eeaac":"## Deleting those two values with outliers. \ntrain = train[train.TotalBsmtSF < 4000]\ntrain.reset_index(drop = True, inplace = True)","8a928c0a":"print(\"Training Set: \", train.shape)\nprint(\"Test Set: \", test.shape)","a3dfa62f":"#Filling up NaNs\ntrain['Fence'] = train['Fence'].fillna('None')\ntrain['FireplaceQu'] = train['FireplaceQu'].fillna('None')\ntest['Fence'] = test['Fence'].fillna('None')\ntest['FireplaceQu'] = test['FireplaceQu'].fillna('None')\n#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\ntrain['LotFrontage'] = train.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))\ntest['LotFrontage'] = test.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))\nfor col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n    train[col] = train[col].fillna('None')\n    test[col] = test[col].fillna('None')\nfor col in ['GarageYrBlt', 'GarageArea', 'GarageCars']:\n    train[col] = train[col].fillna(int(0))\n    test[col] = test[col].fillna(int(0))\nfor col in ('BsmtFinType2', 'BsmtExposure', 'BsmtFinType1', 'BsmtCond', 'BsmtQual'):\n    train[col] = train[col].fillna('None')\n    test[col] = test[col].fillna('None')\ntrain['MasVnrArea'] = train['MasVnrArea'].fillna(int(0))\ntrain['MasVnrType'] = train['MasVnrType'].fillna('None')\ntrain['Electrical'] = train['Electrical'].fillna(train['Electrical']).mode()[0]\ntest['MasVnrArea'] = test['MasVnrArea'].fillna(int(0))\ntest['MasVnrType'] = test['MasVnrType'].fillna('None')\ntest['Electrical'] = test['Electrical'].fillna(train['Electrical']).mode()[0]\n#train = train.drop(['Utilities'], axis=1)\n#test = test.drop(['Utilities'], axis=1)\nfor col in ['MSZoning', 'Exterior1st', 'Exterior2nd', 'KitchenQual', 'Functional', 'MiscFeature']:\n    test[col] = test[col].fillna('None')\ntest['BsmtFinSF1'] = test['BsmtFinSF1'].fillna(train['BsmtFinSF1']).mode()[0]\ntest['BsmtFinSF2'] = test['BsmtFinSF2'].fillna(train['BsmtFinSF2']).mode()[0]\ntest['BsmtUnfSF'] = test['BsmtUnfSF'].fillna(train['BsmtUnfSF']).mode()[0]\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].fillna(train['TotalBsmtSF']).mode()[0]\ntest['BsmtFullBath'] = test['BsmtFullBath'].fillna(train['BsmtFullBath']).mode()[0]\ntest['BsmtHalfBath'] = test['BsmtHalfBath'].fillna(train['BsmtHalfBath']).mode()[0]\ntest['SaleType'] = test['SaleType'].fillna(train['SaleType']).mode()[0]\n","f2faf586":"#Checking th\ntest.isnull().sum()","54c3c072":"train.isnull().sum()","66fbec8c":"cols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold', 'MSZoning', 'LandContour', 'LotConfig', 'Neighborhood',\n        'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n        'Exterior2nd', 'MasVnrType', 'MasVnrArea', 'Foundation', 'GarageType', \n        'SaleType', 'SaleCondition', 'Electrical', 'Heating')","e653743f":"from sklearn.preprocessing import LabelEncoder\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(train[c].values)) \n    train[c] = lbl.transform(list(train[c].values))","00f5aa69":"from sklearn.preprocessing import LabelEncoder\nfor c in cols:\n    lbl = LabelEncoder()\n    lbl.fit(list(test[c].values)) \n    test[c] = lbl.transform(list(test[c].values))","cff385f1":"train.shape","a8613cec":"test.shape","f3c249d6":"test.head()","79a73236":"test.info()","b2525e67":"train.info()","2c8ea3b0":"\n# Store target variable of training data in a safe place\nsale_price = train.SalePrice","51e3b124":"del train['SalePrice']","869590e9":"print(\"Training Set: \", train.shape)\nprint(\"Test Set: \", test.shape)","453b9756":"# Concatenate training and test sets\ndata = pd.concat([train,test], sort=True)","a0cab243":"data.info()","accb64f1":"del data['MiscFeature']\ndel data['MiscVal']","44e6cda4":"data.info()","c90f4bea":"data_train = data.iloc[:1458]\ndata_test = data.iloc[1458:]","b5faced6":"data_train.info()","36d2b2ea":"data_test.info()","355c2a6d":"X = data_train.values\ntest = data_test.values\ny = sale_price.values","64465141":"from sklearn.ensemble import GradientBoostingRegressor\nGBR = GradientBoostingRegressor(n_estimators=100, max_depth=4)","583c3964":"X.shape[0]","b15d2e98":"y.shape[0]","974269aa":"GBR.fit(X, y)","1e03e414":"# Make predictions and store in 'Survived' column of df_test\nY_pred = GBR.predict(test)\nY_pred","4de1ccbe":"Y_pred.shape","c0e88559":"x_value = np.arange(start=1461, stop=2920)\nx_value","f543bd45":"x_value.shape","3d63b189":"dta = pd.DataFrame({'Id':x_value, 'SalePrice':Y_pred})\ndta.head()","d165b95b":"dta.to_csv('submit3csv', index=False)","9ebd268a":"# Import the model we are using\nfrom sklearn.ensemble import RandomForestRegressor\n# Instantiate model with 1000 decision trees\nrf = RandomForestRegressor(n_estimators = 1000, random_state = 42)\n# Train the model on training data\nrf.fit(X, y)","bf28bf56":"predictions = rf.predict(test)","1e085d03":"x_val = np.arange(start=1461, stop=2920)","b3640d52":"dta1 = pd.DataFrame({'Id':x_val, 'SalePrice':predictions})","7847b815":"dta.to_csv('submit4', index=False)","ba9ae5f6":"**VISUALIZATION**"}}