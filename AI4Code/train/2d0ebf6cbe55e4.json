{"cell_type":{"2a640c39":"code","8d276701":"code","0a231a2d":"code","323145cb":"code","16993b6b":"code","87836354":"code","309be905":"code","f0ed56d7":"code","995604f6":"markdown","c432a4f4":"markdown","431f4a96":"markdown","2af7b9db":"markdown","ca3aa6f6":"markdown","80ba8c73":"markdown","b1f84872":"markdown","e94ca338":"markdown","1be447b0":"markdown","c7b0b605":"markdown","f295154a":"markdown","4f8b53b1":"markdown","8301c204":"markdown","a5b51344":"markdown","12ef42ff":"markdown"},"source":{"2a640c39":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d276701":"df = pd.read_csv('\/kaggle\/input\/black-friday\/train.csv')","0a231a2d":"df1= df.groupby(['Gender'])['Purchase'].agg('sum').reset_index(name=\"total_Purchase\")\ndf2= df.groupby(['Gender'])['Purchase'].agg('mean').reset_index(name=\"total_Purchase\")\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(10,10)) #ax1,ax2 refer to your two pies\n# 1,2 denotes 1 row, 2 columns\nax1.pie(df1['total_Purchase'],labels=df1['Gender'],colors =[\"pink\",\"blue\"], explode= (0,0.05),autopct = '%1.1f%%') #plot first pie\nax1.set_title('Percentage of total Purchase across Gender',fontsize = 12)\nax1.legend( ['female', 'male']) #you would need to keep the sequence same\n\nax2.pie(df2['total_Purchase'],labels=df2['Gender'],colors =[\"pink\",\"blue\"], explode= (0,0.05),autopct = '%1.1f%%') #plot first pie\nax2.set_title('Percentage of mean Purchase across Gender',fontsize = 12)\nax2.legend( ['female', 'male'])\n\nfig.show()","323145cb":"df3= df.groupby(['Age'])['Purchase'].agg('sum').reset_index(name=\"total_Purchase\")\nlabels = df3.Age\nmen_means = df3.total_Purchase\nfrom matplotlib.ticker import FuncFormatter\nimport matplotlib.pyplot as plt\ndef millions(x, pos):\n    'The two args are the value and tick position'\n    return '%1.fM' % (x * 1e-6)\n\n\nformatter = FuncFormatter(millions)\n\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, men_means, width, label='Total Purchase',color = '#019f66')\n\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.ticklabel_format(style='sci', axis='x', scilimits=(0,0))\nax.set_ylabel('Total Purchase')\nax.set_title('Total Purchase across different Age group')\nax.set_xticks(x)\nax.yaxis.set_major_formatter(formatter)\n\nax.set_xticklabels(labels)\nax.legend()\n\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n\nautolabel(rects1)\n\nfig.set_size_inches(10.5, 7.5, forward=True)\nfig.tight_layout()\n\nplt.show()","16993b6b":"import plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly import tools\n\n\ndf_2= df.groupby(['Occupation'])['Purchase'].agg('sum').reset_index(name=\"Total Purchase\")\nfig = px.bar(df_2, x=\"Occupation\", y=\"Total Purchase\")\nfig.update_layout( annotations=[\n        dict(\n            x=xpos,\n            y=ypos,\n            xref='x',\n            yref='y',\n            text=str(ypos),\n            \n\n\n            ax=0,\n            ay=-40\n    ) for xpos, ypos in zip(df_2['Occupation'], df_2['Total Purchase'])\n    ],\n    font_size = 7,\n    title={\n        'text': \"Total Purchase across Occupation\",\n        'y':0.97,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n        xaxis_type=\"category\")\n\n\nfig.show()","87836354":"df_3= df.groupby(['City_Category'])['Purchase'].agg('sum').reset_index(name=\"total_Purchase\")\nlabels = df_3.City_Category\nmen_means = df_3.total_Purchase\nfrom matplotlib.ticker import FuncFormatter\nimport matplotlib.pyplot as plt\ndef millions(x, pos):\n    'The two args are the value and tick position'\n    return '%1.fM' % (x * 1e-6)\n\n\nformatter = FuncFormatter(millions)\n\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.6 # the width of the bars\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, men_means, width, label='Total Purchase',color='#d25f2e')\n\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.ticklabel_format(style='sci', axis='x', scilimits=(0,0))\nax.set_xlabel('City')\nax.set_ylabel('Total Purchase')\nax.set_title('Total Purchase across different Cities')\nax.set_xticks(x)\nax.yaxis.set_major_formatter(formatter)\n\nax.set_xticklabels(labels)\n\n\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n\nautolabel(rects1)\n\nfig.set_size_inches(8.5, 6.5, forward=True)\nfig.tight_layout()\n\nplt.show()\n","309be905":"import plotly.graph_objects as go\ndf6= df.groupby(['Marital_Status'])['Purchase'].agg('sum').reset_index(name=\"total_Purchase\")\nfig = go.Figure(data=[go.Pie(labels=df6['Marital_Status'], values=df6['total_Purchase'], hole=.5, textinfo='label + percent',    textposition='inside',)])\nfig.update_layout(\n    title={\n        'text': \"Percentage of total Purchase across Marital_Status\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\n        \n\nfig.show()","f0ed56d7":"for i in range(1,4):\n  df2= df.groupby([f'Product_Category_{i}'])['Purchase'].agg('sum').reset_index(name=\"total_Purchase\")\n  #print(df2.head())\n  df2.plot(x = f\"Product_Category_{i}\", y = \"total_Purchase\", kind = \"bar\",figsize= (12,5))\n  plt.title(f\"Total_Purchase across Product_Category_{i}\")\n  plt.ylabel(\"Total Purchase\")\n  \n  plt.show() \n \n                                                                               ","995604f6":"<a id=\"section-6\"><\/a>\n## **Percentage share of total Purchase across Marital_Status**","c432a4f4":"***Contribution of male gender towards purchase  is almost 3 times as female gender.\nAlso mean purchase value for male is higher than male.***","431f4a96":"**All data is labeled and the algorithms learn to predict the output( amount of \"purchase\")from the input data(other columns in dataset), thats why the given problem is Supervised. As the output variable(\"purchase\") is a real value, this problem is regression problem.**\n**Our target variable is \"Purchase\". We need to find the amount of purchase in the given problem with the help of other columns(factors)**\n\n**This regression problem can be solved with the following algorithms:**\n*  Linear Regression\n*  Decision tree Regression\n*  Random Forest Regression\n\n   ","2af7b9db":"<a id=\"section-5\"><\/a>\n## **Contributions of different Cities to purchase**","ca3aa6f6":"# **Black Friday EDA**\n![](https:\/\/www.wowktv.com\/wp-content\/uploads\/sites\/52\/2019\/11\/black-friday-sales-red-tags.jpg?w=2560&h=1440&crop=1)","80ba8c73":"***From the above graph we can conclude that age group 26-35 contribute the most towards purchase and the age group below 17 contribute minimum.***","b1f84872":"***From the above graph we can conclude that occupation of category 4 purchases the maximum and that of category 8 purchases the minimum.***","e94ca338":"<a id=\"section-4\"><\/a>\n## **Contributions of various occupations to purchase**","1be447b0":"<a id=\"section-1\"><\/a>\n## **Problem Introduction**","c7b0b605":"<a id=\"section-2\"><\/a>\n## **Contribution of Gender to Purchase**","f295154a":"***From the above graph we can conclude that contribution of City category B in purchases is maximum and that of category A is minimum.***","4f8b53b1":"<a id=\"section-7\"><\/a>\n## **Contributions of different products to purchase**","8301c204":"**Table of contents**\n* [Problem Introduction](#section-1)\n* [Contribution of Gender to Purchase](#section-2)\n* [Contributions of various Age-groups to purchase](#section-3)\n* [Contributions of various occupations to purchase](#section-4)\n* [Contributions of different Cities to purchase](#section-5)\n* [Percentage share of total Purchase across Marital_Status](#section-6)\n* [Contributions of different products to purchase](#section-7)\n","a5b51344":"***From the above Donut-chart we can conclude that unmarried people has purchased more than married people.***","12ef42ff":"<a id=\"section-3\"><\/a>\n## **Contributions of various Age-groups to purchase**"}}