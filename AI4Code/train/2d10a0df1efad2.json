{"cell_type":{"0514f6b1":"code","a20a783c":"code","33d241b1":"code","202055dc":"code","8c61c804":"code","60f2cf25":"code","9a2a3410":"code","213e8201":"code","b6e5a808":"code","e64cc409":"code","6e1f3153":"code","b46ac288":"code","7dbdd5d2":"code","81271306":"code","d55b3fd1":"code","089f5dc6":"code","a0738993":"code","990b6c2c":"code","358d9a63":"code","54454fd1":"code","77e0055a":"code","66908bd7":"code","53aad904":"code","36821966":"code","78fa2c0b":"code","68febb39":"code","127c85cd":"code","0b2ad942":"code","1b96f28f":"code","b0237b90":"code","2359e8e2":"code","066c79f2":"code","f1c8b65a":"code","e34dd2a6":"code","2e37e46c":"code","92a85b56":"code","0c9070fd":"code","578ddbb4":"code","b607d9a3":"code","aa685ce2":"code","19e1248f":"markdown","502ba5a5":"markdown","011aa7e9":"markdown","f3c2f544":"markdown","b32ae7f6":"markdown","74626619":"markdown","f7eaf95d":"markdown","3ace2f2e":"markdown","6aa65e2a":"markdown","da97031b":"markdown","2f5372d6":"markdown","3032f333":"markdown","cc63ee16":"markdown","54753fc4":"markdown","985b3d8a":"markdown","45aaaa9f":"markdown","e5bec085":"markdown","bf556855":"markdown","350eadd3":"markdown","965368c9":"markdown","430b0b72":"markdown","00e4adec":"markdown","8ade6914":"markdown","b15d4eb8":"markdown","192950e4":"markdown","b5fb9d5b":"markdown","6b0c05f3":"markdown","4cb13578":"markdown","2b47e20a":"markdown"},"source":{"0514f6b1":"!pip install scikit-learn-intelex -q --progress-bar off","a20a783c":"import pandas as pd\nimport numpy as np\nimport warnings\nimport gc\nfrom IPython.display import HTML\nwarnings.filterwarnings(\"ignore\")\n\nfrom timeit import default_timer as timer\nimport matplotlib.pyplot as plt\n\nrandom_state = 42","33d241b1":"PATH_TRAIN      = '..\/input\/tabular-playground-series-jan-2022\/train.csv'\nPATH_TEST       = '..\/input\/tabular-playground-series-jan-2022\/test.csv'\nPATH_SUBMISSION = '..\/input\/tabular-playground-series-jan-2022\/sample_submission.csv'","202055dc":"train_data = pd.read_csv(PATH_TRAIN)\ntest_data  = pd.read_csv(PATH_TEST)\nsubmission = pd.read_csv(PATH_SUBMISSION)","8c61c804":"train_data[:5]","60f2cf25":"train_data.info()","9a2a3410":"!pip install pycaret --user > \/dev\/null 2>&1","213e8201":"from pycaret.regression import *","b6e5a808":"setup(data = train_data, \n      target = 'num_sold',\n      silent = True,\n      ignore_features = ['row_id'],\n      fold = 2)","e64cc409":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators = 250, random_state = random_state)","6e1f3153":"tDefS = timer()\nrf = create_model(rf, fold = 5)\ntDefE = timer()","b46ac288":"print(\"Total fitting Random Forest time with default Scikit-learn: {} seconds\".format(tDefE - tDefS))","7dbdd5d2":"from sklearnex import patch_sklearn\npatch_sklearn()","81271306":"import logging\n\nlogger = logging.getLogger()\nfh = logging.FileHandler('log.txt')\nfh.setLevel(10)\nlogger.addHandler(fh)","d55b3fd1":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators = 250, random_state = random_state)","089f5dc6":"tOptS = timer()\nrf = create_model(rf, fold = 5)\ntOptE = timer()","a0738993":"print(\"Total fitting Random Forest time with optimized Scikit-learn: {} seconds\".format(tOptE - tOptS))","990b6c2c":"!cat log.txt | grep 'running accelerated version' | sort | uniq","358d9a63":"rf_speedup = round((tDefE - tDefS) \/ (tOptE - tOptS), 2)\nHTML(f'<h2>RandomForest speedup: {rf_speedup}x<\/h2>'\n     f'(from {round((tDefE - tDefS), 2)} to {round((tOptE - tOptS), 2)} seconds)')","54454fd1":"gc.collect()\n!> log.txt","77e0055a":"from sklearnex import unpatch_sklearn\nunpatch_sklearn()","66908bd7":"from sklearn.svm import SVR\nsvr = SVR()","53aad904":"tDefS = timer()\nsvr = create_model(svr, fold = 5)\ntDefE = timer()","36821966":"tDefTS = timer()\nsvr = tune_model(svr, fold = 5)\ntDefTE = timer()","78fa2c0b":"print(\"Total fitting SVR time with default Scikit-learn: {} seconds\".format(tDefE - tDefS))","68febb39":"print(\"Total tuning SVR time with default Scikit-learn: {} seconds\".format(tDefTE - tDefTS))","127c85cd":"from sklearnex import patch_sklearn\npatch_sklearn()","0b2ad942":"from sklearn.svm import SVR\nsvr = SVR()","1b96f28f":"tOptS = timer()\nsvr = create_model(svr, fold = 5)\ntOptE = timer()","b0237b90":"tOptTS = timer()\nsvr = tune_model(svr, fold = 5)\ntOptTE = timer()","2359e8e2":"svr.get_params()","066c79f2":"print(\"Total fitting SVR time with optimized Scikit-learn: {} seconds\".format(tOptE - tOptS))","f1c8b65a":"print(\"Total tuning SVR time with optimized Scikit-learn: {} seconds\".format(tOptTE - tOptTS))","e34dd2a6":"!cat log.txt | grep 'running accelerated version' | sort | uniq","2e37e46c":"svr_fit_speedup = round((tDefE - tDefS) \/ (tOptE - tOptS), 2)\nHTML(f'<h2>SVR fitting speedup: {svr_fit_speedup}x<\/h2>'\n     f'(from {round((tDefE - tDefS), 2)} to {round((tOptE - tOptS), 2)} seconds)')","92a85b56":"svr_tune_speedup = round((tDefTE - tDefTS) \/ (tOptTE - tOptTS), 2)\nHTML(f'<h2>SVR tuning speedup: {svr_tune_speedup}x<\/h2>'\n     f'(from {round((tDefTE - tDefTS), 2)} to {round((tOptTE - tOptTS), 2)} seconds)')","0c9070fd":"cat = create_model('catboost')\nlight = create_model('lightgbm')\nxgboost = create_model('xgboost')\nblender_specific = blend_models(estimator_list = [rf, cat, light, xgboost])\nfinal_model = finalize_model(blender_specific)","578ddbb4":"predict = predict_model(final_model, test_data)\npredict[:5]","b607d9a3":"submission['num_sold'] = predict['Label']","aa685ce2":"submission.to_csv(\"submit.csv\", index = False)","19e1248f":"*Please upvote if you liked it.*","502ba5a5":"### PyCaret Installation","011aa7e9":"AutoML significantly simplifies building of high quality models but sometimes has insufficient performance, especially for big problems. In this notebook, we will show how to accelerate AutoML framework PyCaret using Intel\u00ae Extension for Scikit-learn* which speedups Scikit-learn's algorithms in seamless way with one pip package installation and two lines of code.\n\nThis notebook solves binary classification task, but you can use it as template for many other competitions with few changes depending on task type (multiclass or regression) and your needs.","f3c2f544":"## RandomForest with optimized Scikit-learn","b32ae7f6":"## RandomForest with default Scikit-learn","74626619":"<center><a><img src=\"https:\/\/i.ibb.co\/PWvpT9F\/header.png\" alt=\"header\" border=\"0\" width=800 height=400 class=\"center\"><\/a>","f7eaf95d":"I will show you how to **speed up** your kernel without changing your code using **Intel\u00ae Extension for Scikit-learn**.","3ace2f2e":"Don't forget reimport modules to get effect of patch:","6aa65e2a":"## SVR with optimized Scikit-learn","da97031b":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Conclusion<\/center><\/h1>\n<\/div>","2f5372d6":"### [[predict sales] Stacking with scikit-learn-intelex](https:\/\/www.kaggle.com\/alexeykolobyanin\/predict-sales-stacking-with-scikit-learn-intelex)\n\n### [[TPS-Aug] NuSVR with Intel Extension for Sklearn](https:\/\/www.kaggle.com\/alexeykolobyanin\/tps-aug-nusvr-with-intel-extension-for-sklearn)\n\n### [Using scikit-learn-intelex for What's Cooking](https:\/\/www.kaggle.com\/kppetrov\/using-scikit-learn-intelex-for-what-s-cooking?scriptVersionId=58739642)\n\n### [Fast KNN using \u202fscikit-learn-intelex for MNIST](https:\/\/www.kaggle.com\/kppetrov\/fast-knn-using-scikit-learn-intelex-for-mnist?scriptVersionId=58738635)\n\n### [Fast SVC using scikit-learn-intelex for MNIST](https:\/\/www.kaggle.com\/kppetrov\/fast-svc-using-scikit-learn-intelex-for-mnist?scriptVersionId=58739300)\n\n### [Fast SVC using scikit-learn-intelex for NLP](https:\/\/www.kaggle.com\/kppetrov\/fast-svc-using-scikit-learn-intelex-for-nlp?scriptVersionId=58739339)\n\n### [Fast AutoML with Intel Extension for Scikit-learn](https:\/\/www.kaggle.com\/lordozvlad\/fast-automl-with-intel-extension-for-scikit-learn)\n\n### [[Titanic] AutoML with Intel Extension for Sklearn](https:\/\/www.kaggle.com\/lordozvlad\/titanic-automl-with-intel-extension-for-sklearn)","3032f333":"Setup logging to track accelerated cases:","cc63ee16":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Tabular Playground Series - Jan 2022\n<\/div>","54753fc4":"<center><a><img src=\"https:\/\/cdn.analyticsvidhya.com\/wp-content\/uploads\/2020\/05\/Screenshot-from-2020-05-13-18-30-22.png\" alt=\"header\" border=\"0\" width=300 height=200 class=\"center\"><\/a>","985b3d8a":"**Intel\u00ae Extension for Scikit-learn** gives you opportunities to:\n* Use your Scikit-learn code for training and inference without modification.\n* Get speed up your kernel","45aaaa9f":"### Intel\u00ae Extension for Scikit-learn installation:","e5bec085":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Importing Libraries and Data<\/center><\/h1>\n<\/div>","bf556855":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>SVR<\/center><\/h1>\n<\/div>","350eadd3":"### Import Libraries","965368c9":"### List of algorithms which are accelerated by sklearnex","430b0b72":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>RandomForest<\/center><\/h1>\n<\/div>","00e4adec":"### List of algorithms which are accelerated by sklearnex","8ade6914":"<h1> Fast AutoML and Intel\u00ae Extension for Scikit-learn* - Kaggle Tabular Playground Series - January 2022 <\/h1>","b15d4eb8":"## SVR with default Scikit-learn","192950e4":"### Accelerate Scikit-learn with two lines of code:","b5fb9d5b":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Predicition<\/center><\/h1>\n<\/div>","6b0c05f3":"### Reading Data","4cb13578":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Other notebooks with sklearnex usage<\/center><\/h1>\n<\/div>","2b47e20a":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Blending with boosting<\/center><\/h1>\n<\/div>"}}