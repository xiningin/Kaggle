{"cell_type":{"166cd050":"code","bc2d8d09":"code","29ee422c":"code","7ecada4b":"code","2cedcf87":"code","c3001a50":"code","6bd3aa57":"code","47bd144e":"code","59e4bdcd":"code","54f6adf3":"code","705c444e":"code","57d98469":"code","42c404e7":"code","4e98af96":"code","7c08f404":"code","c3d72dbd":"code","44d2909b":"code","a6316d14":"code","a04d658a":"code","54013e06":"code","566b30e8":"code","8f93b3fb":"code","fe83a8e1":"code","3ac0c812":"code","40c1af25":"code","38ec5399":"code","71d924c0":"code","fadc7e44":"code","6e08ff92":"code","c2bbe954":"code","fd3ad9b8":"code","4445d077":"code","99fe913e":"code","de52c8df":"code","da167a8e":"code","8372346a":"code","4a5ecdda":"code","dd694ae3":"code","ef3c1176":"code","7a7b5b43":"code","6d34497f":"code","32686326":"code","dfc73e28":"code","3ab24e62":"code","be91e1f0":"code","c93de106":"code","7073d952":"code","018a2226":"code","9ab53f44":"code","26435f4d":"code","17a63205":"code","b0b03ead":"code","58794052":"code","6b0d3b66":"code","f9d10ea9":"code","d1a41ad3":"code","d91768e1":"code","478ee115":"code","56fffcd6":"code","62d820e7":"code","a80247d0":"code","e84a42ef":"code","31e9b5ba":"markdown","2f5f7d20":"markdown","5f83bfaf":"markdown","c3bbb57e":"markdown","0a564701":"markdown","c209232f":"markdown","161da950":"markdown","04103f37":"markdown","f9809ce9":"markdown","9206a3b2":"markdown","dc0fb128":"markdown","9d25a28c":"markdown","31070bcf":"markdown","1e553230":"markdown","7110d717":"markdown","e3cf3741":"markdown","8812dced":"markdown","e8eca160":"markdown","b0ae2a6a":"markdown","b22ac52a":"markdown","c318a7b0":"markdown","8accc63b":"markdown","e90ed3c5":"markdown","68a83b0c":"markdown"},"source":{"166cd050":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc2d8d09":"bottle = pd.read_csv('..\/input\/calcofi\/bottle.csv')","29ee422c":"bottle.head()","7ecada4b":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n%matplotlib inline\n\npd.pandas.set_option('display.max_columns',None)\npd.pandas.set_option('display.max_rows', None)","2cedcf87":"# To view all columns\nbottle.head()","c3001a50":"nul = bottle.isnull().sum() \/ len(bottle)\nnul = nul[nul>0]\nnul = nul.sort_values(ascending = False)\nnul","6bd3aa57":"col = nul.tail(31).index.values\ncol","47bd144e":"bottle.shape","59e4bdcd":"bottle = bottle[col]\nbottle.shape","54f6adf3":"categorical = [feature for feature in bottle.columns if bottle[feature].nunique() < 15]","705c444e":"categorical","57d98469":"for value in categorical:\n    print(value)\n    print(bottle.groupby(value)['T_degC'].count())\n    print('--------')","42c404e7":"bottle.drop(['T_degC', 'STheta', 'R_POTEMP', 'R_SALINITY', 'R_PO4', 'PO4q','SiO3qu','NO2q','Chlqua','Chlqua','Phaqua','MeanAq','DarkAq','C14A1q','C14A2q'], axis = 1, inplace = True)\n","4e98af96":"bottle.shape","7c08f404":"nul = bottle.isnull().sum() \/ len(bottle)\nnul = nul[nul>0]\nnul = nul.sort_values(ascending = False)\nnulcol = nul.index.values\nfor value in nulcol:\n    bottle[nulcol] = bottle[nulcol].fillna(bottle[nulcol].mean())","c3d72dbd":"nul = bottle.isnull().sum() \/ len(bottle)\nnul = nul[nul>0]\nnul = nul.sort_values(ascending = False)\nnul","44d2909b":"corr = bottle.corr()\ntop = corr.index[abs(corr['R_TEMP'] > 0.4)]\ntop_corr = bottle[top].corr()\nplt.figure(figsize = (12,6))\nsns.heatmap(top_corr, annot = True)","a6316d14":"# Consider all variables\ncorr = bottle.corr()\nplt.figure(figsize = (20,10))\nsns.heatmap(corr, annot = True)","a04d658a":"pos = corr.index[abs(corr['R_TEMP'] > 0)]\nneg = corr.index[abs(corr['R_TEMP'] < 0)]","54013e06":"pos","566b30e8":"neg","8f93b3fb":"positive = bottle[pos]\npositive.drop('NH3q', axis = 1, inplace = True)\npositive.head()","fe83a8e1":"# All columns where relation with temperature(DV) Is negative in nature\nnegative = bottle[neg]\nnegative.drop(['S_prec', 'T_prec'], axis = 1, inplace = True)\nnegative.drop('P_qual', axis = 1, inplace = True)\nnegative.drop('NO3q', axis = 1, inplace = True)\nnegative.head()","3ac0c812":"negative['R_TEMP'] = bottle['R_TEMP']","40c1af25":"negative.shape, positive.shape","38ec5399":"sns.distplot(positive['R_TEMP'])","71d924c0":"stats.probplot(positive['R_TEMP'], plot = plt)","fadc7e44":"stats.probplot(np.log1p(positive['R_TEMP']), plot = plt)","6e08ff92":"#Considering original values, as Log of values seems way off, because of Outliers","c2bbe954":"# For Pytorch it is always advisable to use MinMaxScaling\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()","fd3ad9b8":"x = positive.drop('R_TEMP', axis = 1)\ny = positive[['R_TEMP']]\nx_new = x.copy()\ny_new = y.copy()","4445d077":"x_new1 = scaler.fit_transform(x_new)\nx_new1 = pd.DataFrame(x_new1, columns = x.columns)","99fe913e":"scale2 = MinMaxScaler()\ny_new = scale2.fit_transform(y)\ny_new","de52c8df":"# Import required Libraries\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F","da167a8e":"class Network(nn.Module):\n    def __init__(self):\n        super(Network, self).__init__()\n        \n        self.linear1 = nn.Linear(in_features = x.shape[1], out_features = 512)\n        self.linear2 = nn.Linear(in_features = 512, out_features = 1024)\n        self.outlayer = nn.Linear(in_features = 1024, out_features = y.shape[1])\n        \n    def forward(self, x):\n        x = x\n        x = self.linear1(x)\n        x = self.linear2(x)\n        x = self.outlayer(x)\n        \n        return x","8372346a":"# initialize above class\nnetwork = Network()","4a5ecdda":"# To convert Data into .Tensor format as required by Pytorch\nxtorch = torch.tensor(x_new1.values, dtype = torch.float)\nytorch = torch.tensor(y_new, dtype = torch.float)","dd694ae3":"xtorch.shape, ytorch.shape","ef3c1176":"loss = nn.MSELoss(reduction='mean')","7a7b5b43":"import torch.optim as optim\noptimizer = optim.Adam(network.parameters(), lr = 1e-5)","6d34497f":"from torch.utils.data import DataLoader, TensorDataset","32686326":"dataset = TensorDataset(xtorch, ytorch)","dfc73e28":"from torch.utils.data import random_split\nval_percent = 0.1\nnum_rows = len(dataset)\nval_size = int(num_rows * val_percent)\ntrain_size = num_rows - val_size\n\ntrain_ds, val_ds = random_split(dataset, [train_size, val_size])","3ab24e62":"train_size, val_size","be91e1f0":"batch_size = 512\n\n\ntrain_loader = DataLoader(train_ds, batch_size, shuffle = True)\nval_loader = DataLoader(val_ds, batch_size)","c93de106":"# To observe how initial weights and bias are initialized, run this code\n#for xb, yb in train_loader:\n#    print(\"inputs:\", xb)\n#   print(\"targets:\", yb)\n#   break","7073d952":"# lets run for only 5 epoch and check result\nfor epoch in range(5):\n    total_loss = 0\n    for batch in train_loader:\n        \n        x, y = batch\n        preds = network(x)\n        criteria = loss(preds.squeeze(), y.squeeze())\n        total_loss = total_loss + criteria.item()\n       \n        \n        if torch.isnan(criteria):\n            break\n            \n        optimizer.zero_grad()\n        criteria.backward()\n        optimizer.step()\n        \n    print(total_loss)","018a2226":"x1 = negative.drop('R_TEMP', axis = 1)\ny1 = negative[['R_TEMP']]\nx_new1 = x1.copy()\ny_new1 = y1.copy()","9ab53f44":"x_new11 = scaler.fit_transform(x_new1)\nx_new11 = pd.DataFrame(x_new11, columns = x_new1.columns)\nscale3 = MinMaxScaler()\ny_new11 = scale3.fit_transform(y_new1)","26435f4d":"x_new11.head()","17a63205":"y_new11","b0b03ead":"xtorch = torch.tensor(x_new11.values, dtype = torch.float)\nytorch = torch.tensor(y_new11, dtype = torch.float)","58794052":"xtorch.shape, ytorch.shape","6b0d3b66":"class Network(nn.Module):\n    def __init__(self):\n        super(Network, self).__init__()\n        \n        self.linear1 = nn.Linear(in_features = x_new1.shape[1], out_features = 512)\n        self.linear2 = nn.Linear(in_features = 512, out_features = 1024)\n        self.outlayer = nn.Linear(in_features = 1024, out_features = y_new1.shape[1])\n        \n    def forward(self, x):\n        x = x\n        x = self.linear1(x)\n        x = self.linear2(x)\n        x = self.outlayer(x)\n        \n        return x","f9d10ea9":"network = Network()","d1a41ad3":"loss = nn.MSELoss(reduction='mean')","d91768e1":"import torch.optim as optim\noptimizer = optim.Adam(network.parameters(), lr = 1e-4)","478ee115":"from torch.utils.data import DataLoader, TensorDataset","56fffcd6":"dataset = TensorDataset(xtorch, ytorch)","62d820e7":"batch_size = 4096\n\n\ntrain_loader = DataLoader(dataset, batch_size, shuffle = True)","a80247d0":"for xb, yb in train_loader:\n    print(\"inputs:\", xb)\n    print(\"targets:\", yb)\n    break","e84a42ef":"for epoch in range(5):\n    total_loss = 0\n    for batch in train_loader:\n        \n        x, y = batch\n        preds = network(x)\n        criteria = loss(preds.squeeze(), y.squeeze())\n        total_loss = total_loss + criteria.item()\n       \n        \n        if torch.isnan(criteria):\n            break\n            \n        optimizer.zero_grad()\n        criteria.backward()\n        optimizer.step()\n        \n    print(total_loss)","31e9b5ba":"From 74, we are now left with 31 Columns\n\nLets find categorical variables in data","2f5f7d20":"Now we dont have any missing values in Data, Hurray !!!\n\n","5f83bfaf":"## If you find this Notebook and Code useful Kindly consider Upvoting and feel free to post any querry.\n\nKeep Enjoying and keep learning. Thanks!!!","c3bbb57e":"# Feature Selection by Correlation Plot","0a564701":"# Data Read and Importing Required Libraries","c209232f":"There are columns with More than 50% Missing values, better to get reed of them\n\nConsidering only columns where missing values is less than 50%","161da950":"# Data Segregation based on Positive & Negative Values of Correlation","04103f37":"Dropping loosely related columns","f9809ce9":"# Output value Analysis","9206a3b2":"Read Null Value in terms of % in every columns","dc0fb128":"There are many categorical variables, where One values has presence more than 99%, hence all these columns wont play any role in deciding Output.\n\nBetter to get reed of them","9d25a28c":"## There can be so much done with respect to hyper parameter tuning.\nParameters to be considered for tuning are\n1. Batch Size\n2. Learning rate\n3. Optimizer","31070bcf":"Identify columns which have negative correlation and Positive correlation. And separate out columns name\n\n","1e553230":"Positive correlated data Analysis","7110d717":"Thanks for your valuable time. Please consider Upvoting, Happy Learning !!","e3cf3741":"# Feature Scaling","8812dced":"Adding output variable in Negative dataframe","e8eca160":"i wont be running on validation set, but I would like to run on Negative dataset first","b0ae2a6a":"# Missing Value Treatment","b22ac52a":"# Missing Values Imputation with Mean, as all are Numeric in nature\u00b6\n","c318a7b0":"As Promised, i am here with more powerful algorithm to try to find best possible way to describe Output, using Pytorch Neural network\nWe will keep things simple, if you have not visited my previous Notebook on same dataset using XGBoost, checkout this link\nhttps:\/\/www.kaggle.com\/yogeshrampariya\/calcofi-regression-analysis-with-xgboost","8accc63b":"Define nn.Module from torch","e90ed3c5":"Whoa!! It seems Dependency of Negatively Correlated Variables output variable Is very high.","68a83b0c":"# Pytorch model Building"}}