{"cell_type":{"d4a1546f":"code","200e4c0f":"code","ac11b43d":"code","81f4f0b5":"code","a2af1c9e":"code","e3d125f7":"code","6e9665e1":"code","ea8c7242":"code","11e09620":"code","f9081fa4":"code","268f50d6":"code","4e8cd574":"code","eb8c150b":"code","f9e5f4fa":"code","58c4bfd2":"code","524cdc4c":"code","0bcef8d2":"code","d7f90022":"code","f3a14475":"code","63fc5839":"code","b8773b3c":"code","a55d1f3b":"code","68dbb419":"code","47cab39e":"code","7b9377df":"code","69a18284":"code","dcdc5a19":"code","89a6643c":"code","f9741268":"code","f55089f2":"code","3332b6e1":"code","11f09884":"code","460679df":"code","91b7e2bc":"code","01b11b05":"code","0bc627c8":"code","1c4c037f":"code","ab2ff4c2":"code","6b7e270e":"code","10aa26b3":"code","f6058e14":"markdown","d2929b2c":"markdown","70ca58b0":"markdown"},"source":{"d4a1546f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","200e4c0f":"#Let's check the dataset\ndf = pd.read_csv('..\/input\/indian_liver_patient.csv')\ndf.head()","ac11b43d":"#Let's checl the descriptive statistics\ndf.describe(include = 'all')","81f4f0b5":"#Let's check the data types\n\ndf.dtypes","a2af1c9e":"#Let's check if any data has null values\ndf.isnull().sum()","e3d125f7":"#Let's check the shape of dataset\ndf.shape","6e9665e1":"df['Albumin_and_Globulin_Ratio'] = df['Albumin_and_Globulin_Ratio'].replace(np.nan, 0)","ea8c7242":"#Checking whether all columns are having the string data types\nall(isinstance(column, str) for column in df.columns)","11e09620":"#Importing Viuualization libraries using matlpotlib and seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f9081fa4":"    #Creating correlation matrix\n    df_corr = df.corr()\n    #Plot figsize\n    plt.subplots(figsize=(10, 10))\n    #Generate Color Map\n    colormap = sns.diverging_palette(220, 10, as_cmap=True)\n    #Generate Heat Map, allow annotations and place floats in map\n    sns.heatmap(df_corr, cmap=colormap, annot=True, fmt=\".2f\")\n    #Apply xticks\n    plt.xticks(range(len(df_corr.columns)), df_corr.columns);\n    #Apply yticks\n    plt.yticks(range(len(df_corr.columns)), df_corr.columns)\n    #show plot\n    plt.show()","268f50d6":"columns = df.columns\ncolumns\n","4e8cd574":"features = list(map(str, df.columns))\nfeatures","eb8c150b":"sns.pairplot(df.select_dtypes(include=[np.number]), dropna=True)","f9e5f4fa":"#Comparison of patients with and without liver diseases\nsns.countplot(data=df, x = 'Dataset', label='Count')\n\nLD, NLD = df['Dataset'].value_counts()\nprint('Number of patients diagnosed with liver disease: ',LD)\nprint('Number of patients not diagnosed with liver disease: ',NLD)","58c4bfd2":"sns.countplot(data=df, x = 'Gender', label='Count')\n\nM, F = df['Gender'].value_counts()\nprint('Number of patients that are male: ',M)\nprint('Number of patients that are female: ',F)","524cdc4c":"sns.factorplot(x=\"Age\", y=\"Gender\", hue=\"Dataset\", data=df);","0bcef8d2":"g = sns.FacetGrid(df, col=\"Dataset\", row=\"Gender\", margin_titles=True)\ng.map(plt.hist, \"Age\", color=\"red\")\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Disease by Gender and Age');","d7f90022":"g = sns.FacetGrid(df, col=\"Gender\", row=\"Dataset\", margin_titles=True)\ng.map(plt.scatter,\"Direct_Bilirubin\", \"Total_Bilirubin\", edgecolor=\"w\")\nplt.subplots_adjust(top=0.9)","f3a14475":"sns.jointplot(\"Total_Bilirubin\", \"Direct_Bilirubin\", data=df, kind=\"reg\")","63fc5839":"g = sns.FacetGrid(df, col=\"Gender\", row=\"Dataset\", margin_titles=True)\ng.map(plt.scatter,\"Aspartate_Aminotransferase\", \"Alamine_Aminotransferase\",  edgecolor=\"w\")\nplt.subplots_adjust(top=0.9)","b8773b3c":"sns.jointplot(\"Aspartate_Aminotransferase\", \"Alamine_Aminotransferase\", data=df, kind=\"reg\")","a55d1f3b":"g = sns.FacetGrid(df, col=\"Gender\", row=\"Dataset\", margin_titles=True)\ng.map(plt.scatter,\"Alkaline_Phosphotase\", \"Alamine_Aminotransferase\",  edgecolor=\"w\")\nplt.subplots_adjust(top=0.9)","68dbb419":"sns.jointplot(\"Alkaline_Phosphotase\", \"Alamine_Aminotransferase\", data=df, kind=\"reg\")","47cab39e":"g = sns.FacetGrid(df, col=\"Gender\", row=\"Dataset\", margin_titles=True)\ng.map(plt.scatter,\"Total_Protiens\", \"Albumin\",  edgecolor=\"w\")\nplt.subplots_adjust(top=0.9)","7b9377df":"sns.jointplot(\"Total_Protiens\", \"Albumin\", data=df, kind=\"reg\")","69a18284":"g = sns.FacetGrid(df, col=\"Gender\", row=\"Dataset\", margin_titles=True)\ng.map(plt.scatter,\"Albumin\", \"Albumin_and_Globulin_Ratio\",  edgecolor=\"w\")\nplt.subplots_adjust(top=0.9)","dcdc5a19":"sns.jointplot(\"Albumin_and_Globulin_Ratio\", \"Albumin\", data=df, kind=\"reg\")","89a6643c":"g = sns.FacetGrid(df, col=\"Gender\", row=\"Dataset\", margin_titles=True)\ng.map(plt.scatter,\"Albumin_and_Globulin_Ratio\", \"Total_Protiens\",  edgecolor=\"w\")\nplt.subplots_adjust(top=0.9)","f9741268":"from sklearn.preprocessing import LabelEncoder\n\nnum = LabelEncoder()\ndf['Gender'] = num.fit_transform(df['Gender'].astype('str'))\ndf.head()","f55089f2":"features = ['Age', 'Gender', 'Total_Bilirubin', 'Direct_Bilirubin', 'Alkaline_Phosphotase', 'Alamine_Aminotransferase','Aspartate_Aminotransferase', 'Total_Protiens', 'Albumin',\n            'Albumin_and_Globulin_Ratio']\nX= df[features]\ny= df['Dataset']","3332b6e1":">>> from sklearn.model_selection import train_test_split\n>>> X_train, X_test, y_train, y_test = train_test_split(X,\ny,\nrandom_state=0)","11f09884":">>> from sklearn.preprocessing import MinMaxScaler\n>>> from sklearn.svm import SVC\n>>> scaler = MinMaxScaler().fit(X_train)\n>>> X_train = scaler.transform(X_train)","460679df":">>> from sklearn.svm import SVC\nfrom sklearn.metrics import classification_report,confusion_matrix\n>>> svc = SVC(kernel='rbf')\n>>> svc.fit(X_train, y_train)\n>>> y_pred = svc.predict(X_test)\nsvc1= svc.score(X_train, y_train)\nsvc2 = svc.score(X_test, y_test)\nprint(svc1, svc2)\nprint('Classification Report: \\n', classification_report(y_test,y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test,y_pred))\nfrom sklearn.model_selection import cross_val_score\nprint(cross_val_score(svc, X_train, y_train, cv=10))","91b7e2bc":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report,confusion_matrix\n\nclf = LogisticRegression(C=100,penalty=\"l1\").fit(X_train, y_train)\nclf_predict = clf.predict(X_test)\nclf1 = clf.score(X_train,y_train)\nclf2 = clf.score(X_test,y_test)\nprint('Logistic Regression Training Score: \\n', clf1)\nprint('Logistic Regression Test Score: \\n', clf2)\nprint('Coefficient: \\n', clf.coef_)\nprint('Intercept: \\n', clf.intercept_)\nprint('Accuracy: \\n', accuracy_score(y_test,clf_predict))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test,clf_predict))\nprint('Classification Report: \\n', classification_report(y_test,clf_predict))\n\nsns.heatmap(confusion_matrix(y_test,clf_predict),annot=True,fmt=\"d\")\n\n","01b11b05":"from sklearn.model_selection import cross_val_score\nprint(cross_val_score(clf, X_train, y_train, cv=10))","0bc627c8":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb = gnb.fit(X_train,y_train)\ngnb_predict = gnb.predict(X_test)\ngnb1= gnb.score(X_train,y_train)\ngnb2= gnb.score(X_test,y_test)\ngnb1,gnb2\nprint('Confusion Matrix: \\n', confusion_matrix(y_test,gnb_predict))\nprint('Classification Report: \\n', classification_report(y_test,gnb_predict))\nprint(cross_val_score(gnb, X_train, y_train, cv=10))","1c4c037f":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier().fit(X_train, y_train)\nprint('Accuracy of Decision Tree classifier on training set: {:.2f}'\n     .format(clf.score(X_train, y_train)))\nprint('Accuracy of Decision Tree classifier on test set: {:.2f}'\n     .format(clf.score(X_test, y_test)))\nprint('Accuracy: \\n', accuracy_score(y_test,clf_predict))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test,clf_predict))\nprint('Classification Report: \\n', classification_report(y_test,clf_predict))\nprint(cross_val_score(clf, X_train, y_train, cv=10))\n","ab2ff4c2":"from sklearn.ensemble import RandomForestClassifier","6b7e270e":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest = random_forest.fit(X_train, y_train)\n#Predict Output\nrf_predicted = random_forest.predict(X_test)\n\nrandom_forest_score = random_forest.score(X_train, y_train)\nrandom_forest_score_test = random_forest.score(X_test, y_test)\nprint('Random Forest train Score: \\n', random_forest_score)\nprint('Random Forest Test Score: \\n', random_forest_score_test)\nprint('Accuracy: \\n', accuracy_score(y_test,rf_predicted))\nprint(confusion_matrix(y_test,rf_predicted))\nprint(classification_report(y_test,rf_predicted))\nfrom sklearn.model_selection import cross_val_score\nprint(cross_val_score(random_forest, X_train, y_train, cv=10))","10aa26b3":"from sklearn.ensemble import GradientBoostingClassifier\n\nclf = GradientBoostingClassifier().fit(X_train, y_train)\nprint('Accuracy of Decision Tree classifier on training set: {:.2f}'\n     .format(clf.score(X_train, y_train)))\nprint('Accuracy of Decision Tree classifier on test set: {:.2f}'\n     .format(clf.score(X_test, y_test)))\nprint('Accuracy: \\n', accuracy_score(y_test,clf_predict))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test,clf_predict))\nprint('Classification Report: \\n', classification_report(y_test,clf_predict))\nprint(cross_val_score(clf, X_train, y_train, cv=10))\n","f6058e14":"> **Data Analysis**","d2929b2c":"**Machine Leaening**","70ca58b0":"**Data Visualization**"}}