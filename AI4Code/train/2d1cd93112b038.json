{"cell_type":{"8487b491":"code","be414f12":"code","5b44c266":"code","653a5e78":"code","d072c2d7":"code","072531bd":"code","cad6d356":"code","4ec88e86":"code","ccbd3b5b":"code","45dc5594":"markdown","f86e1e65":"markdown"},"source":{"8487b491":"# ==========================================================\n# import libraries\n# ==========================================================\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport cv2\nimport pickle\nimport datetime\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras import optimizers\nfrom tensorflow.keras.layers import Input, Lambda, MaxPooling2D, BatchNormalization, Dense, Flatten, Activation, \\\n    Dropout, Convolution2D\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler, EarlyStopping, ReduceLROnPlateau, TensorBoard\nfrom keras.utils import to_categorical\nfrom sklearn.utils import shuffle","be414f12":"# ==========================================================\n# define functions\n# ==========================================================\ndef read_data(dir, data):\n    images1 = []  # the real one\n    images2 = []  # the forged one\n\n    labels = []\n    for j in range(0, len(data)):\n        path = os.path.join(dir, data.iat[j, 0])\n        img1 = cv2.imread(path)\n        img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)\n        img1 = cv2.resize(img1, (100, 100))\n        images1.append([img1])\n\n        path = os.path.join(dir, data.iat[j, 1])\n        img2 = cv2.imread(path)\n        img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)\n        img2 = cv2.resize(img2, (100, 100))\n        images2.append([img2])\n\n        labels.append(np.array(data.iat[j, 2]))\n\n    images1 = np.array(\n        images1).astype(np.float32) \/ 255.0\n    images2 = np.array(images2).astype(np.float32) \/ 255.0\n    labels = np.array(labels).astype(np.float32)\n    return images1, images2, labels\n\n\n#\ndef build_base_network(input_shape):\n    seq = Sequential()\n\n    kernel_size = 3\n\n    seq.add(Convolution2D(64, (kernel_size, kernel_size), input_shape=input_shape))\n    seq.add(Activation('relu'))\n    seq.add(MaxPooling2D(pool_size=(2, 2)))\n\n    seq.add(Convolution2D(32, (kernel_size, kernel_size)))\n    seq.add(Activation('relu'))\n    seq.add(MaxPooling2D(pool_size=(2, 2)))\n\n    # flatten\n    seq.add(Flatten())\n    seq.add(Dense(128, activation='relu'))\n    seq.add(Dense(64, activation='relu'))\n    return seq\n\n\n#\ndef euclidean_distance(vects):\n    x, y = vects\n    return K.sqrt(K.sum(K.square(x - y), axis=1, keepdims=True))\n\n\ndef eucl_dist_output_shape(shapes):\n    shape1, shape2 = shapes\n    return (shape1[0], 1)","5b44c266":"# ==========================================================\n# data reading and preparation\n# ==========================================================\ntrain_dir = '..\/input\/signature-verification-dataset\/sign_data\/train\/'\ntrain_csv = '..\/input\/signature-verification-dataset\/sign_data\/train_data.csv'\ntest_dir = '..\/input\/signature-verification-dataset\/sign_data\/test\/'\ntest_csv = '..\/input\/signature-verification-dataset\/sign_data\/test_data.csv'\n\n#\ndf_train = pd.read_csv(train_csv, header=None)\ndf_train.head()\n\n#\ndf_test = pd.read_csv(test_csv, header=None)\ndf_test.head()\n\n#\ntest_images1, test_images2, test_labels = read_data(dir=test_dir, data=df_test)\ntrain_images1, train_images2, train_labels = read_data(dir=train_dir, data=df_train)\n\n#\n# train_labels = to_categorical(train_labels)\n\n#\ntrain_images1, train_images2, train_labels = shuffle(train_images1, train_images2, train_labels)\ntest_images1, test_images2, test_labels = shuffle(test_images1, test_images2, test_labels)\n\n#\nsize = 100\ntrain_images1 = train_images1.reshape(-1, size, size, 1)\ntrain_images2 = train_images2.reshape(-1, size, size, 1)\ntest_images1 = test_images1.reshape(-1, size, size, 1)\ntest_images2 = test_images2.reshape(-1, size, size, 1)","653a5e78":"print(df_train.iloc[0, :])\nimg_org = df_train.iloc[0, 0]\nimg_frg = df_train.iloc[0, 1]","d072c2d7":"img_original = plt.imread('..\/input\/signature-verification-dataset\/sign_data\/train\/'+img_org)\nimg_forged = plt.imread('..\/input\/signature-verification-dataset\/sign_data\/train\/'+img_frg)\n\nprint('..\/input\/signature-verification-dataset\/sign_data\/train\/'+img_org)\n\nplt.subplots(1, 1, sharex=True, sharey=True)\nplt.imshow(img_original)\n\nplt.subplots(1, 1, sharex=True, sharey=True)\nplt.imshow(img_forged)","072531bd":"#\ninput_dim = (100, 100, 1)\n\n#\nbase_network = build_base_network(input_dim)\n\nimg_a = Input(shape=input_dim)\nimg_b = Input(shape=input_dim)\n\nfeat_vecs_a = base_network(img_a)\nfeat_vecs_b = base_network(img_b)\n\ndistance = Lambda(euclidean_distance, output_shape=eucl_dist_output_shape)([feat_vecs_a, feat_vecs_b])\n\nprediction = Dense(1, activation='sigmoid')(distance)\n\n#\nearlyStopping_callback = EarlyStopping(monitor='val_loss',\n                              min_delta=0,\n                              patience=3,\n                              verbose=1) \n\n# callbacks\nlogdir = os.path.join(\"logs\", datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\"))\ntensorboard_callback = tf.keras.callbacks.TensorBoard(logdir)\n\nmodel_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint('best_model.h5', save_best_only=True, verbose=1)\n\ncallback_early_stop_reduceLROnPlateau = [earlyStopping_callback, tensorboard_callback, model_checkpoint_callback]\n\n#\nmodel = Model([img_a, img_b], prediction)\nmodel.summary()","cad6d356":"#\nplot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","4ec88e86":"#\nmodel.compile(loss=\"binary_crossentropy\", optimizer=optimizers.Adam(lr=0.00008)\n              , metrics=[\"accuracy\"])\n\n#\nhistory = model.fit([train_images1, train_images2], train_labels, validation_split=.30,\n                    batch_size=32, verbose=1, epochs=10, callbacks=callback_early_stop_reduceLROnPlateau)","ccbd3b5b":"# run this in terminal to check the training process with Tensorboard:\n# %tensorboard --logdir logs","45dc5594":"Here is a screenshot of how TensorBoard looks like in our problem:","f86e1e65":"![Capture.PNG](attachment:6d14024a-daab-4c8a-8ae9-846f211ed5e9.PNG)"}}