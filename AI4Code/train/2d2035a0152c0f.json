{"cell_type":{"bd8bd6b4":"code","23dd45fa":"code","6422838b":"code","4fe716c8":"code","8cf690e7":"code","3fb9249e":"code","3f9ea27d":"code","ec4e83b2":"code","6b24fef3":"code","b5858300":"code","0621a643":"markdown","28501af9":"markdown","f7621dc4":"markdown","bc4e5b23":"markdown"},"source":{"bd8bd6b4":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.metrics import mean_absolute_error as MAE\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom itertools import combinations\nimport scipy","23dd45fa":"df = pd.read_csv('..\/input\/boston_data.csv')\nprint(\"objects: %d\\nfeatures: %d\\n\"%(df.shape[0], df.shape[1]-1))","6422838b":"print(df.describe())","4fe716c8":"#y -> target\ny = df.medv\nfeatures = df.drop(['medv'], axis=1)\n\nregr = LinearRegression()\nMAEs = []\n\nfor i in range(1, len(features.columns)+1):\n    print(\"step: \", i)\n    min_MAE = 100\n    best_feature_sequence = []\n    for combination in combinations(features.columns, i):\n        slice_features = features[list(combination)]\n        cvs = -cross_val_score(regr, slice_features, y, cv=10, scoring='neg_mean_absolute_error').mean()\n        if cvs < min_MAE:\n            min_MAE = cvs\n            best_feature_sequence = list(slice_features.columns)\n    print(\"best_feature_sequence: \", best_feature_sequence)\n    print(\"MAE: \", min_MAE, \"\\n\")\n    MAEs.append(min_MAE)\n","8cf690e7":"plt.plot(range(1, 14), MAEs)\n\nfor i in range(len(MAEs)):\n    plt.hlines(MAEs[i], 0, 14, colors='r', linestyle='--', alpha=0.6)","3fb9249e":"features = features[['nox', 'rm', 'dis', 'ptratio', 'black', 'lstat']]\nregr.fit(features, y)","3f9ea27d":"pd.DataFrame({\"feature\": features.columns, \"importance\": regr.coef_})","ec4e83b2":"plt.figure(figsize=(20, 10))\nplt.plot(features['rm'], y, 'o', c='red')\nplt.show()","6b24fef3":"coefs = scipy.polyfit(features.rm, y, deg = 2)\npoly = scipy.poly1d(coefs)\nplt.figure(figsize=(20, 10))\nplt.scatter(features.rm, y, c='red')\nplt.plot(sorted(features.rm), poly(sorted(features.rm)))\nplt.show()","b5858300":"features['rm'] = poly(np.array(features.rm))","0621a643":"lets transform the dependency","28501af9":"after adding 6th feature in a row error reduction becomes almost imperceptible","f7621dc4":"dependence between \"rm\" and target is nonlinear","bc4e5b23":"looking for the best feature combination"}}