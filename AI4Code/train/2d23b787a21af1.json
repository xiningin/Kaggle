{"cell_type":{"5d499e02":"code","fe07a8b1":"code","2ec05585":"code","117f41dc":"code","f7daaebf":"code","60868510":"code","5ec1e92d":"code","9a500247":"code","dae250c5":"code","11ab8f20":"code","b07b3e8e":"code","d32745c4":"code","6867bdf2":"code","61b06fed":"code","4248b6a4":"code","122072f7":"code","a512fa13":"code","2262f99a":"code","a86a7a1a":"code","856ea39c":"code","875140de":"code","ea77dae9":"code","aec6e669":"code","cdd3c135":"code","f47ec280":"code","69f759e4":"code","587e28c3":"code","9aff9b8c":"code","e4eff0ec":"code","c06bed88":"code","bc599aa6":"code","4dc1f97e":"code","0e73a410":"code","b7274c09":"code","83f479d3":"code","26a938b0":"code","fd5fe0cd":"code","064c988d":"code","70edd40a":"code","afc85b70":"code","f9408d5d":"code","44999d51":"code","37910774":"code","0493d2f8":"markdown","1a729a6b":"markdown","7f4dbf43":"markdown","9b1440ee":"markdown","931c05f5":"markdown","3d03f04a":"markdown","f3a0a9a7":"markdown","754517ca":"markdown","c59ef92b":"markdown","e0dab1c8":"markdown","2baf3f39":"markdown","86d20c9a":"markdown","be258ecb":"markdown","99caa909":"markdown","e9cce33b":"markdown","b200a101":"markdown","282ec880":"markdown","f748d2c0":"markdown","80ad9283":"markdown","1499f125":"markdown","8ef73eca":"markdown","17bf9be9":"markdown","8273f35e":"markdown","76ec9c84":"markdown","df334a0e":"markdown"},"source":{"5d499e02":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","fe07a8b1":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2ec05585":"# Local\n# df = pd.read_csv('Social_Network_Ads.csv')\n\n# Kaggle\ndf = pd.read_csv('\/kaggle\/input\/cvdcvd-vd\/Social_Network_Ads.csv')\ndf.head()","117f41dc":"df","f7daaebf":"len(df['User ID'].unique())","60868510":"df = df.drop('User ID', axis=1)","5ec1e92d":"df","9a500247":"plt.figure(figsize=(20,10))\nplt.title('Value count of Labels')\nsns.countplot(data=df, x='Purchased');","dae250c5":"plt.figure(figsize=(20,10))\nplt.title('Value count of gender')\nsns.countplot(data=df, x='Gender');","11ab8f20":"plt.figure(figsize=(20,10))\nplt.title('Value count of gender who Purchase or not')\nsns.countplot(data=df, x='Gender', hue='Purchased');","b07b3e8e":"plt.figure(figsize=(20,10))\nplt.title('Histogram of age')\nsns.histplot(data=df, x='Age', bins=25, kde=True);","d32745c4":"plt.figure(figsize=(20,10))\nplt.title('Histogram of EstimatedSalary')\nsns.histplot(data=df, x='EstimatedSalary', bins=25, kde=True);","6867bdf2":"plt.figure(figsize=(20,10))\nplt.title('Plot of Age vs EstimatedSalary')\nsns.boxplot(data=df, x='Age', y='EstimatedSalary');","61b06fed":"plt.figure(figsize=(20,10))\nplt.title('Plot of Age vs Estimated Salary vs Purchased or not')\nsns.scatterplot(data=df, x='Age', y='EstimatedSalary', hue='Purchased', s=150, alpha=0.5);","4248b6a4":"plt.figure(figsize=(20,20))\nplt.title('Heatmap of Pearson corrlation')\nsns.heatmap(data=(pd.get_dummies(df)).corr(),annot=True);","122072f7":"plt.figure(figsize=(20,20))\nplt.title('Heatmap of Spearman corrlation')\nsns.heatmap(data=(pd.get_dummies(df)).corr('spearman'),annot=True);","a512fa13":"X = df.drop('Purchased', axis=1)\nX = pd.get_dummies(X, drop_first=True)\ny = df['Purchased']","2262f99a":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","a86a7a1a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","856ea39c":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","875140de":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom xgboost import XGBClassifier, XGBRFClassifier\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier","ea77dae9":"from warnings import filterwarnings","aec6e669":"filterwarnings('ignore')","cdd3c135":"def fit_and_score(models, X_train, X_test, y_train, y_test):\n    np.random.seed(42)\n    \n    model_scores = {}\n    \n    for name, model in models.items():\n        model.fit(X_train,y_train)\n        model_scores[name] = model.score(X_test,y_test)\n\n    model_scores = pd.DataFrame(model_scores, index=['Score']).transpose()\n    model_scores = model_scores.sort_values('Score')\n        \n    return model_scores","f47ec280":"models = {'LogisticRegression': LogisticRegression(max_iter=10000),\n          'KNeighborsClassifier': KNeighborsClassifier(),\n          'SVC': SVC(),\n          'DecisionTreeClassifier': DecisionTreeClassifier(),\n          'RandomForestClassifier': RandomForestClassifier(),\n          'AdaBoostClassifier': AdaBoostClassifier(),\n          'GradientBoostingClassifier': GradientBoostingClassifier(),\n          'XGBClassifier': XGBClassifier(),\n          'XGBRFClassifier': XGBRFClassifier(),\n          'LGBMClassifier':LGBMClassifier()}","69f759e4":"baseline_model_scores = fit_and_score(models, X_train, X_test, y_train, y_test)","587e28c3":"baseline_model_scores","9aff9b8c":"plt.figure(figsize=(20,10))\nsns.barplot(data=baseline_model_scores.sort_values('Score').T)\nplt.title('Baseline Model Precision Score')\nplt.xticks(rotation=90);","e4eff0ec":"from sklearn.model_selection import RandomizedSearchCV","c06bed88":"def randomsearch_cv_scores(models, params, X_train, X_test, y_train, y_test):\n    np.random.seed(42)\n    \n    model_rs_scores = {}\n    model_rs_best_param = {}\n    \n    for name, model in models.items():\n        rs_model = RandomizedSearchCV(model,\n                                     param_distributions=params[name],\n                                      scoring='f1',\n                                      cv=5,\n                                     n_iter=20,n_jobs=1,\n                                     verbose=0)        \n        rs_model.fit(X_train,y_train)\n        model_rs_scores[name] = rs_model.score(X_test,y_test)\n        model_rs_best_param[name] = rs_model.best_params_\n        \n    return model_rs_scores, model_rs_best_param","bc599aa6":"models = {'SVC': SVC(),\n         'XGBRFClassifier': XGBRFClassifier()}\n\nparams = {'SVC':{'C' : np.linspace(0.1,0.9, 9),\n                'kernel':['linear', 'ploy', 'rbf', 'sigmoid'],\n                'gamma': np.linspace(0,1,11),\n                },\n          'XGBRFClassifier':{'n_estimators': [2,5,10,20,50,100,200],\n                             'learning_rate':np.linspace(0,1,11),\n                             'gamma': np.linspace(0,1,11)}\n         }","4dc1f97e":"model_rs_scores_1, model_rs_best_param_1 = randomsearch_cv_scores(models, params, X_train, X_test, y_train, y_test)","0e73a410":"model_rs_scores_1","b7274c09":"model_rs_best_param_1","83f479d3":"from sklearn.metrics import classification_report, plot_confusion_matrix, plot_roc_curve\nfrom sklearn.model_selection import cross_val_score","26a938b0":"model = SVC(kernel='rbf',\n            gamma=0.7,\n            C = 0.6)","fd5fe0cd":"model.fit(X_train,y_train)\ny_preds = model.predict(X_test)","064c988d":"print(classification_report(y_test,y_preds))","70edd40a":"plot_confusion_matrix(model,X_test,y_test)","afc85b70":"plot_roc_curve(model,X_test,y_test)","f9408d5d":"def get_cv_score(model, X, y, cv=5):\n    \n    \n    cv_accuracy = cross_val_score(model,X,y,cv=5,\n                         scoring='accuracy')\n    print(f'Cross Validaion accuracy Scores: {cv_accuracy}')\n    print(f'Cross Validation accuracy Mean Score: {cv_accuracy.mean()}')\n    \n    cv_precision = cross_val_score(model,X,y,cv=5,\n                         scoring='precision')\n    print(f'Cross Validaion precision Scores: {cv_precision}')\n    print(f'Cross Validation precision Mean Score: {cv_precision.mean()}')\n    \n    cv_recall = cross_val_score(model,X,y,cv=5,\n                         scoring='recall')\n    print(f'Cross Validaion recall Scores: {cv_recall}')\n    print(f'Cross Validation recall Mean Score: {cv_recall.mean()}')\n    \n    cv_f1 = cross_val_score(model,X,y,cv=5,\n                         scoring='f1')\n    print(f'Cross Validaion f1 Scores: {cv_f1}')\n    print(f'Cross Validation f1 Mean Score: {cv_f1.mean()}')   \n    \n    cv_merics = pd.DataFrame({'Accuracy': cv_accuracy.mean(),\n                         'Precision': cv_precision.mean(),\n                         'Recall': cv_recall.mean(),\n                         'f1': cv_recall.mean()},index=[0])\n    \n    return cv_merics","44999d51":"cv_merics = get_cv_score(model, X_train, y_train, cv=5)","37910774":"cv_merics","0493d2f8":"## Reading the Dataset","1a729a6b":"## ROC Curve","7f4dbf43":"Going to take the following approach:\n\n1. Problem definition\n2. Data\n3. Evaluation\n4. Features\n5. Modelling\n6. Model Evaluation\n7. Experientmetion \/ Improvements","9b1440ee":"## Data Exporation","931c05f5":"### RS model 1","3d03f04a":"## Model Imports","f3a0a9a7":"# 5. Modelling","754517ca":"From the random search CV of 5, we found that the SVC model perfroms the best with a CV F1 mean score of 91.67%\nwe will based the model evalution on the SVC.","c59ef92b":"From the baseline modelling we can see that the top models are:\n1. SVC \t0.933333\n1. XGBRFClassifier \t0.933333\n\nwe can try tuning the hyperparams to check if the model improves","e0dab1c8":"## Classification Report","2baf3f39":"# 6. Model Evalution","86d20c9a":"As we can see the data is in-balanced","be258ecb":"# 4. Features\n\n## inputs \/ features\n    1. User ID - Customer Unique Id\n    2. Gender - Gender of a customer - M\/F\n    3. Age - Age of a customer\n    4. EstimatedSalary - Estimated salary of a customer\n\n## Output \/ label\n    5. Purchased - Whether they purchased or not after Ad click 1\/0","99caa909":"As User ID is based on the customer ID and is unique by customer, we will drop the User ID","e9cce33b":"## Baseline Model Scores","b200a101":"With the SVC model, we are able to get the following:\n\n    Accuracy \t0.903571 \n    Precision \t0.841834\n    Recall \t    0.895789\n    f1          0.895789\n\t \t \t","282ec880":"## Random Search CV","f748d2c0":"## Confustion Matrix","80ad9283":"# 2. Data\n\nData from: https:\/\/www.kaggle.com\/jahnveenarang\/cvdcvd-vd","1499f125":"## Standard Imports","8ef73eca":"As the data is in-balance we will use the F1 scores for the scoring ","17bf9be9":"# 1. Problem Definition\n\nHow we can use various python based Machine Learning Model and the given parameters to predict if the customer purchased or not?","8273f35e":"# Ad Click Prediction Classification","76ec9c84":"# 3. Evaluation\n\nAs this is a classification problem, we will use the classification metics for evauluting the model","df334a0e":"## Evalution using cross-validation"}}