{"cell_type":{"e4177999":"code","dca6d634":"code","2eb8182a":"code","28299137":"code","9604154b":"code","ab909acf":"code","94918133":"code","b191558a":"code","a0f6e5ba":"code","72706b61":"code","9b5a3c82":"code","205055a2":"code","910f8cd4":"code","0c261fe5":"code","29970afb":"code","05f238f9":"code","e16e859d":"code","4990f5c3":"code","97e51d55":"code","cd4666fc":"markdown","a384de68":"markdown","f14d4bde":"markdown","844515b5":"markdown","17b6fd47":"markdown","0ea331f3":"markdown","1ab0cbf6":"markdown","93a6c9f1":"markdown","d9d6c4c4":"markdown","c3391416":"markdown","7d9a7dd0":"markdown","293cf42a":"markdown","44f065d2":"markdown","a95a78a9":"markdown","36bb7458":"markdown"},"source":{"e4177999":"import os\nimport warnings\nimport pathlib\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm_notebook as tqdm\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, KFold\nfrom sklearn.metrics import roc_auc_score, mean_squared_error, roc_curve\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\n\n\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 500)\nsns.set(font=\"IPAexGothic\", style=\"darkgrid\")\nwarnings.simplefilter('ignore')","dca6d634":"train = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/sample_submission.csv\")","2eb8182a":"#data set \nprint(\"train set\")\nprint(\"shape : \", train.shape)\nn_train = len(train)\ndisplay(train.head())\nprint(\"test set\")\nprint(\"shape : \", test.shape)\nn_test = len(test)\ndisplay(test.head())\n\nnunique_train = train.nunique().to_frame()\nnunique_train.columns = [\"train_set\"]\nnunique_test = test.nunique().to_frame()\nnunique_test.columns = [\"test_set\"]\n\nprint(\"The number of unique values\")\ndisplay(pd.merge(nunique_train, nunique_test, right_index=True, left_index=True))","28299137":"print(\"=====The Number of missing data\")\nprint(\"train set\")\ndisplay(train.isnull().sum(axis=0).to_frame())\n\nprint(\"test set\")\ndisplay(test.isnull().sum(axis=0).to_frame())","9604154b":"#Check duplicates\nif n_train != len(train[[\"breath_id\", \"time_step\"]].drop_duplicates()):\n    print(\"breath_id and time_step of train set are not unique.\")\nif n_test != len(test[[\"breath_id\", \"time_step\"]].drop_duplicates()):\n    print(\"breath_id and time_step of test_set are not unique.\")\n    \n#The number of time_step of each breath_id\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))\ntrain.groupby(\"breath_id\")[\"time_step\"].count().hist(ax=ax1)\nax1.set_title(\"Train set\")\nax1.set_xlabel(\"Number of time_step\")\nax1.set_ylabel(\"Counts\")\n\ntest.groupby(\"breath_id\")[\"time_step\"].count().hist(ax=ax2)\nax2.set_title(\"Test set\")\nax2.set_xlabel(\"Number of time_step\")\nax2.set_ylabel(\"Counts\")\n\nplt.show()\nplt.close()","ab909acf":"train.groupby([\"breath_id\"])[\"time_step\"].agg([\"min\", \"mean\", \"max\"]).describe()","94918133":"train.groupby([\"u_out\"])[\"time_step\"].agg([\"min\", \"mean\", \"max\"])","b191558a":"(train.groupby(\"breath_id\")[[\"R\", \"C\"]].nunique() >= 2).sum()","a0f6e5ba":"from itertools import product\ndef show_heatmap(data) -> None:\n    \"\"\"\n    Show heatmap of 2d-array\n    \n    Parameters\n    -----\n    data : pd.DataFrame\n        plot data \n    \"\"\"\n    \n    #Parameters \n    fig, ax = plt.subplots()\n    cmap=\"Greens\"\n    text_color=(\"black\", \"white\")\n    fontsize=12\n    \n    im = ax.imshow(data, cmap=cmap)\n    th = im.norm(data.values.max())\/2\n    for i, j in product(range(len(data.index)), range(len(data.columns))):\n        color= text_color[int(im.norm(data.iloc[i, j]) > th)]\n        plt.text(j, i, str(data.iloc[i, j])\n             , horizontalalignment=\"center\"\n             , verticalalignment=\"center\"\n             , color=color\n            , fontsize=fontsize\n        )\n\n    cbar = fig.colorbar(im)\n    cbar.ax.set_ylabel(\"Counts\", rotation=-90, va=\"bottom\", fontsize=fontsize)\n\n    ax.tick_params(top=True, bottom=False,\n                       labeltop=True, labelbottom=False)\n    ax.xaxis.set_label_position(\"top\")\n    ax.set_xticks(range(len(data.index)))\n    ax.set_xticklabels(data.index, fontsize=fontsize)\n    ax.set_xlabel(\"R\")\n    ax.set_yticks(range(len(data.columns)))\n    ax.set_yticklabels(data.columns, fontsize=fontsize)\n    ax.set_ylabel(\"C\")\n    \n    ax.grid(False)\n    \n    fig.tight_layout()\n    plt.show()\n    plt.close()","72706b61":"print(\"===== Train set\")\ntmp = train[[\"R\", \"C\"]].value_counts().sort_index()\ntmp = tmp.unstack()\nshow_heatmap(tmp)\n\nprint(\"===== Test set\")\ntmp = test[[\"R\", \"C\"]].value_counts().sort_index()\ntmp = tmp.unstack()\nshow_heatmap(tmp)","9b5a3c82":"n_breath = 3\nbreath_list = np.random.choice(train[\"breath_id\"].values, n_breath, replace=False)\n\nprint(f\"Selected breath ids are {', '.join(breath_list.astype(str))}\")\n\ncheck_breath_df = train[train[\"breath_id\"].isin(breath_list)]\ndisplay(check_breath_df.head())\n\nprint(\"The number of unique values of each breath\")\ndisplay(check_breath_df.groupby(\"breath_id\").nunique())","205055a2":"for y in [\"u_in\", \"u_out\", \"pressure\"]:\n    fig, ax = plt.subplots(1, 1, figsize=(18, 6))\n    sns.lineplot(\n        x=\"time_step\"\n        , y=y\n        , data=check_breath_df\n        , hue=\"breath_id\"\n        , palette=\"Set1\"\n    )\n    \n    ax.set_title(y, fontsize=16)\n    \nfig.tight_layout()\n\nplt.show()\nplt.close()","910f8cd4":"#Negative pressure\nnegative_pressure_records = len(train[train[\"pressure\"] < 0])\nprint(\"Number of records of pressure < 0 : \", negative_pressure_records)\nprint(f\"Ratio of records of pressure < 0 : {100 * negative_pressure_records \/ len(train):.4f} %\")","0c261fe5":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(18, 12))\nsns.histplot(\n    x=\"pressure\"\n    , data=train\n    , ax=ax1\n)\nax1.set_title(\"Distiribution of pressure\", fontsize=15)\n\nsns.histplot(\n    x=\"pressure\"\n    , data=train\n    , ax=ax2\n    , hue=\"u_out\"\n)\nax2.set_title(\"Distiribution of pressure of each u_out\", fontsize=15)\n\nplt.show()\nplt.close()","29970afb":"#Rank the records by time_step\ntrain[\"time_step_idx\"] = train.groupby(\"breath_id\")[\"time_step\"].rank().astype(int)\n\n\"\"\"\nCheck distribution of time_step for each time_step_idx\n\"\"\"\n\ndesc_df = train.groupby(\"time_step_idx\").describe()[\"time_step\"]\n\ndesc_df.head()\n\nprint(\"min_std : \", desc_df[\"std\"].min())\nprint(\"max_std : \", desc_df[\"std\"].max())\n\nfig, ax = plt.subplots(figsize=(10, 10))\ndesc_df[[\"mean\", \"std\", \"min\", \"25%\", \"50%\", \"75%\", \"max\"]].plot(ax=ax)\n\nax.set_title(\"Statistic value of time_step and time_step_idx\")\nax.set_xlabel(\"time_step_idx\")\nax.set_ylabel(\"time_step\")\n\nplt.show()\nplt.close()","05f238f9":"fig, ax = plt.subplots(figsize=(18, 6))\nsns.lineplot(\n    x=\"time_step_idx\"\n    , y=\"pressure\"\n    , hue=\"u_out\"\n    , err_style=\"bars\"\n    , data=train\n    , ax=ax\n)\n\nplt.show()\nplt.close()","e16e859d":"time_step0_df = train.query(\"time_step == 0\")\ntime_step0_df[\"hue\"] =\"R\" + time_step0_df[\"R\"].astype(str) + \":C\" + time_step0_df[\"C\"].astype(str)","4990f5c3":"fig, ax = plt.subplots(figsize=(12, 8))\n\nax.hist(time_step0_df[\"pressure\"], bins=20,  alpha=0.4, label=\"time_step=0\")\nax.set_xlabel(\"Pressure\")\n\nax_all = ax.twinx()\nax_all.hist(train[\"pressure\"], bins=20, color=\"darkorange\", alpha=0.4, label=\"All\")\n\nfig.legend()\n\nplt.show()\nplt.close()","97e51d55":"fig, ax = plt.subplots(1, 1, figsize=(12, 6))\n\nsns.scatterplot(\n    x = \"u_in\"\n    , y=\"pressure\"\n    , hue=\"hue\"\n    , data=time_step0_df\n    , ax=ax\n)\n\nax.set_title(\"u_in vs pressure\")\n\nplt.show()\nplt.close()","cd4666fc":"### Pressure","a384de68":"### R and C\n\nThe number of combinations of R and C of one breath_id","f14d4bde":"### Select some breath and Visualize the change with time_step","844515b5":"### check missing data","17b6fd47":"Each breath id has 80 time_steps\n\n### Distribution of time step","0ea331f3":"## About time_step = 0","1ab0cbf6":"## Columns\n* id - globally-unique time step identifier across an entire file\n* breath_id - globally-unique time step for breaths\n* R - lung attribute indicating how restricted the airway is (in cmH2O\/L\/S). Physically, this is the change in pressure per change in flow (air volume per time). Intuitively, one can imagine blowing up a balloon through a straw. We can change R by changing the diameter of the straw, with higher R being harder to blow.\n* C - lung attribute indicating how compliant the lung is (in mL\/cmH2O). Physically, this is the change in volume per change in pressure. Intuitively, one can imagine the same balloon example. We can change C by changing the thickness of the balloon\u2019s latex, with higher C having thinner latex and easier to blow.\n* time_step - the actual time stamp.\n* u_in - the control input for the inspiratory solenoid valve. Ranges from 0 to 100.\n* u_out - the control input for the exploratory solenoid valve. Either 0 or 1.\n* pressure - the airway pressure measured in the respiratory circuit, measured in cmH2O.\n","93a6c9f1":"The longest breath is about 3 seconds.\n\n\nTime range of each state of the exploratory solenoid valve ","d9d6c4c4":"Records of R is 50 and R is 10 are low pressure.","c3391416":"### breath and time","7d9a7dd0":"plot `u_in`, `u_out` and `pressure` of a single breath from beginning to end.","293cf42a":"Each breath has one combination of R and C","44f065d2":"### Time_step_idx vs pressure","a95a78a9":"I don't know if those records are correct.\n\nDistribution of pressure","36bb7458":"* There are differnet trends for each u_out.\n* There are some spikes.\n"}}