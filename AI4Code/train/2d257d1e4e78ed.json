{"cell_type":{"321e004d":"code","3fc7e7da":"code","3591480b":"code","4b8d09c7":"code","7893560b":"code","60eeb053":"code","d7bc82ed":"code","8c28e7f2":"code","4ca07af2":"code","6ad75a08":"code","e27a9d31":"code","33411d0b":"code","59b7ae10":"code","d541cee1":"code","b2a5fad0":"code","59e67f45":"code","a0056e65":"markdown","4bd91360":"markdown","90f66a68":"markdown"},"source":{"321e004d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #for plotting\nimport seaborn as sea #for visualization\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3fc7e7da":"#importing datasets \n\nmovies_df = pd.read_csv(\"..\/input\/IMDB-Movie-Data.csv\")","3591480b":"#show the columns\n\nmovies_df.columns","4b8d09c7":"# there was a blank in some columns. We removed them\nmovies_df.columns=[i.split()[0]+\"_\"+i.split()[1]  if len(i.split())>1 else i for i in movies_df.columns]\n\n# and remove paranthesis\nmovies_df=movies_df.rename(columns = {'Revenue_(Millions)':'Revenue_Millions'})\nmovies_df=movies_df.rename(columns = {'Runtime_(Minutes)':'Runtime_Minutes'})\n\nmovies_df.columns\n","7893560b":"#after importing, a glimpse at movies_df\n\nmovies_df.head()","60eeb053":"#we have 3 float columns, 4 integer and 5 object columns according to info() method\n\nmovies_df.info()","d7bc82ed":"#some numeric informations about the movies_df\n\nmovies_df.describe()","8c28e7f2":"#try make a correlation map with using seaborn lib.\n\nmovies_corr = movies_df.corr()\nf,ax = plt.subplots(figsize=(10, 10))\nsea.heatmap(movies_corr, annot = True, linewidths = 0.1, fmt= '.2f', ax=ax )\nplt.show()","4ca07af2":"# these are the rating point in the database\n\nprint(\"Rating Points :\",movies_df['Rating'].unique())","6ad75a08":"# lets see how many films are there for each rating point\n\nprint(movies_df['Rating'].value_counts())\n","e27a9d31":"# lets visualize rating points with pie chart\n\nplt.figure(1, figsize=(10,10))\nmovies_df['Rating'].value_counts().plot.pie(autopct=\"%1.1f%%\")","33411d0b":"#scatter plot about movie and their ratings between 2006 - 2016\n\nplt.scatter(movies_df.Year, movies_df.Rating, alpha = 0.28, label = \"Movie\", color = \"blue\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Ratings\")\nplt.legend(loc = \"lower right\")\nplt.show()","59b7ae10":"#histogram plot about number of published movies according to year\n\nmovies_df.Year.plot(kind = \"hist\", bins = 40, figsize = (9,6))\nplt.xlabel(\"Years\")\nplt.ylabel(\"Number of Movies\")\nplt.show()\n","d541cee1":"movies_df[\"Runtime_Minutes\"].value_counts()","b2a5fad0":"movies_df.Runtime_Minutes.value_counts()[:10].plot.pie(autopct='%1.1f%%',figsize=(10,10))\nplt.title('Top 10 runtime of Movies')","59e67f45":"movies_time=movies_df.Runtime_Minutes\nf,ax = plt.subplots(figsize=(14, 8))\nsea.distplot(movies_time, bins=20, kde=False,rug=True, ax=ax);\nplt.ylabel(\"Counts\")","a0056e65":"**INTRO:**","4bd91360":"*This was my first data analysis. I need your feedback to improve myself.*","90f66a68":" ****Lets make some visulization****"}}