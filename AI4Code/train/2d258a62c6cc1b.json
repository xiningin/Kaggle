{"cell_type":{"bd64513a":"code","58f64826":"code","cf32dafc":"code","1b0540c1":"code","6e413dfa":"code","3d01b235":"code","cb6a70fe":"code","5598dd73":"code","3aca5996":"code","27f4cc79":"code","22239264":"code","eda7b027":"code","a3f8dc22":"code","86186be9":"code","bacbe9c6":"code","8eb58ac9":"code","c3c3012d":"code","08304d38":"code","6d3baf55":"code","0a4e6edd":"code","be5eb928":"code","e61f6db8":"code","5659801a":"code","e62cfea9":"code","3d251c80":"markdown","6ac8f904":"markdown","e10b23f3":"markdown","7ac1a21b":"markdown","9301cfb7":"markdown","cb19acf9":"markdown","636a1def":"markdown","d5c00b37":"markdown","e5528d79":"markdown","069e1343":"markdown","7f526549":"markdown","71d0de09":"markdown"},"source":{"bd64513a":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","58f64826":"import re\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pickle\nimport nltk\nnltk.download('wordnet')\nfrom nltk.stem import WordNetLemmatizer","cf32dafc":"cols = ['target','id','date','flag','user','text']\ndataset = pd.read_csv('\/kaggle\/input\/sentiment140\/training.1600000.processed.noemoticon.csv',encoding='ISO-8859-1',names=cols)\ndataset.head()","1b0540c1":"dataset.shape","6e413dfa":"dataset.isnull().any()","3d01b235":"dataset = dataset[['target','text']]\ndataset","cb6a70fe":"dataset['target'].value_counts()","5598dd73":"sns.countplot(data=dataset,x='target')\nplt.xticks(ticks=[0,1],labels=['Negative','Positive'])","3aca5996":"dataset['target'] = dataset['target'].replace(4,1)","27f4cc79":"dataset['target'].unique()","22239264":"# dictionary containing all emojis.\nemojis = {':)': 'smile', ':-)': 'smile', ';d': 'wink', ':-E': 'vampire', ':(': 'sad',':-(': 'sad', ':-<': 'sad', ':P': 'raspberry', ':O': 'surprised',\n          ':-@': 'shocked', ':@': 'shocked',':-$': 'confused', ':\\\\': 'annoyed',':#': 'mute', ':X': 'mute', ':^)': 'smile', ':-&': 'confused',\n          '$_$': 'greedy','@@': 'eyeroll', ':-!': 'confused', ':-D': 'smile', ':-0': 'yell', 'O.o': 'confused','<(-_-)>': 'robot', 'd[-_-]b': 'dj', \n          \":'-)\": 'sadsmile',';)': 'wink',';-)': 'wink', 'O:-)': 'angel','O*-)': 'angel','(:-D': 'gossip', '=^.^=': 'cat'}\n# list containing all stopwords.\nstopword =  ['a', 'about', 'above', 'after', 'again', 'ain', 'all', 'am', 'an','and','any','are', 'as', 'at', 'be', 'because', 'been', 'before',\n             'being', 'below', 'between','both', 'by', 'can', 'd', 'did', 'do','does', 'doing', 'down', 'during', 'each','few', 'for', 'from', \n             'further', 'had', 'has', 'have', 'having', 'he', 'her', 'here','hers', 'herself', 'him', 'himself', 'his', 'how', 'i', 'if', 'in',\n             'into','is', 'it', 'its', 'itself', 'just', 'll', 'm', 'ma','me', 'more', 'most','my', 'myself', 'now', 'o', 'of', 'on', 'once',\n             'only', 'or', 'other', 'our', 'ours','ourselves', 'out', 'own', 're','s', 'same', 'she', \"shes\", 'should', \"shouldve\",'so', 'some', 'such',\n             't', 'than', 'that', \"thatll\", 'the', 'their', 'theirs', 'them','themselves', 'then', 'there', 'these', 'they', 'this', 'those', \n             'through', 'to', 'too','under', 'until', 'up', 've', 'very', 'was', 'we', 'were', 'what', 'when', 'where','which','while', 'who', 'whom',\n             'why', 'will', 'with', 'won', 'y', 'you', \"youd\",\"youll\", \"youre\",\"youve\", 'your', 'yours', 'yourself', 'yourselves']","eda7b027":"# Function to clean the data.\ndef preprocess(text , wordLemm):\n    processedText = []\n    \n    # Defining regex patterns.\n    urlPattern        = r\"((http:\/\/)[^ ]*|(https:\/\/)[^ ]*|( www\\.)[^ ]*)\"\n    userPattern       = '@[^\\s]+'\n    alphaPattern      = \"[^a-zA-Z0-9]\"\n    sequencePattern   = r\"(.)\\1\\1+\"\n    seqReplacePattern = r\"\\1\\1\"\n    \n    for tweet in text:\n        tweet = tweet.lower()\n        \n        # Replace all URls with 'URL'\n        tweet = re.sub(urlPattern,' URL',tweet)\n        # Replace all emojis.\n        for emoji in emojis.keys():\n            tweet = tweet.replace(emoji, \"EMOJI\" + emojis[emoji])        \n        # Replace @USERNAME to 'USER'.\n        tweet = re.sub(userPattern,' USER', tweet)        \n        # Replace all non alphabets.\n        tweet = re.sub(alphaPattern, \" \", tweet)\n        # Replace 3 or more consecutive letters by 2 letter.\n        tweet = re.sub(sequencePattern, seqReplacePattern, tweet)\n        \n        tweetwords = ''\n        for word in tweet.split():\n            if len(word)>1:\n                # Lemmatizing the word.\n                word = wordLemm.lemmatize(word)\n                tweetwords += (word+' ')\n            \n        processedText.append(tweetwords)\n        \n    return processedText","a3f8dc22":"wordLemm = WordNetLemmatizer()\nX = preprocess(list(dataset['text']),wordLemm)\ny = dataset['target']","86186be9":"from sklearn.model_selection import train_test_split\nX_train , X_test , y_train , y_test = train_test_split(X,y,test_size=0.2,random_state=42)","bacbe9c6":"pd.DataFrame(X_train , y_train).info","8eb58ac9":"from sklearn.feature_extraction.text import TfidfVectorizer\nvect = TfidfVectorizer(ngram_range=(1,2), max_features=1000000,stop_words=stopword)\n\nvect.fit(X_train)","c3c3012d":"X_train = vect.transform(X_train)\nX_test = vect.transform(X_test)","08304d38":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\nimport xgboost as xgb","6d3baf55":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score","0a4e6edd":"nb_clf = MultinomialNB()\nnb_clf.fit(X_train,y_train)\n\nnb_pred = nb_clf.predict(X_test)\nprint('Naive Bayes Accuracy :',accuracy_score(y_test,nb_pred))","be5eb928":"log_clf = LogisticRegression(C = 2, max_iter = 1000, n_jobs=-1)\nlog_clf.fit(X_train,y_train)\n\nlog_pred = log_clf.predict(X_test)\nprint('Logistic Regression Accuracy :',accuracy_score(y_test,log_pred))","e61f6db8":"xgb_clf = xgb.XGBClassifier(eval_metric='mlogloss',use_label_encoder=False)\nxgb_clf.fit(X_train,y_train)\n\nxgb_pred = xgb_clf.predict(X_test)\nprint('XGBClassifier Accuracy :',accuracy_score(y_test,xgb_pred))","5659801a":"cm = confusion_matrix(y_test,log_pred)\nprint(cm)\n\nplt.figure(figsize=(5,5))\nsns.heatmap(cm,annot=True)\nplt.show()","e62cfea9":"print(classification_report(y_test,log_pred))","3d251c80":"Handel the text","6ac8f904":"For Evalution","e10b23f3":"Select a Model","7ac1a21b":"Spliting data to features and target","9301cfb7":"**Logistic regression** is more accurate than others ","cb19acf9":"Check for missing values","636a1def":"Choose only the columns we use","d5c00b37":"There is no tweets with neutral \"2\"tag , So its binary classification problem now","e5528d79":"Naive Bayes Classifier","069e1343":"Logistic Regression Classifier","7f526549":"Instantiate the `TfidfVectorizer`","71d0de09":"XGBClassifier "}}