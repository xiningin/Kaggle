{"cell_type":{"5b480bf7":"code","c0ecefdd":"code","e0f4aac1":"code","cd963435":"code","8137fcd7":"code","c5182fa0":"code","e5a2cfd7":"code","1342094d":"code","a2228bf2":"code","5d7e6494":"code","3d868cb0":"code","ef925f96":"code","35d84998":"code","d9dd4920":"code","3d0922d7":"code","a8ba34db":"code","2522ec35":"code","f835aec7":"markdown","2e6950f2":"markdown","6655b60b":"markdown","48fc6ea1":"markdown","33aa200a":"markdown","1e6abac7":"markdown","58c1cbd4":"markdown","1ce2b182":"markdown","875eff86":"markdown","85502388":"markdown","c198a7e8":"markdown","5cb52794":"markdown","155670b3":"markdown","2acdf592":"markdown","ec1d0194":"markdown","973c8e11":"markdown","40da5a57":"markdown","4d49676c":"markdown","a7ced5c1":"markdown","f9d5c8fc":"markdown","ee1c9610":"markdown","756e4d9b":"markdown"},"source":{"5b480bf7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0ecefdd":"url = 'https:\/\/www.kaggleusercontent.com\/episodes\/3634538.json'","e0f4aac1":"import urllib, json\n\nresponse = urllib.request.urlopen(url)\ndata = json.loads(response.read())","cd963435":"dict_obs = {}\nfor i in range(3002):\n    dict_obs[i] = data['steps'][i][0]['observation']['players_raw'][0] # left player\n    dict_obs[i]['action'] = data['steps'][i][0]['action'][0] if len(data['steps'][i][0]['action']) > 0 else -1\n    #dict_obs[i] = data['steps'][i][1]['observation']['players_raw'][0] # right player","8137fcd7":"df = pd.DataFrame(dict_obs)\ndf = df.T\ndf","c5182fa0":"df.describe()","e5a2cfd7":"import matplotlib.pyplot as plt","1342094d":"df['action'].plot()","a2228bf2":"df['action'].value_counts().plot(kind='barh')","5d7e6494":"df['ball_owned_team'].plot()","3d868cb0":"df['ball_owned_team'].value_counts().plot(kind='barh')","ef925f96":"df['ball_owned_player'].plot()","35d84998":"df['ball_owned_player'].value_counts().plot(kind='barh')","d9dd4920":"df['active'].plot()","3d0922d7":"df['active'].value_counts().plot(kind='barh')","a8ba34db":"df['game_mode'].plot()","2522ec35":"df['game_mode'].value_counts().plot(kind='barh')","f835aec7":"The left player is assumed to be my player. If you want data for right player, comment the existing line and uncomment the second line inside for loop.","2e6950f2":"You can fork this notebook and use suitable url to analyze your games.","6655b60b":"Refer [link](https:\/\/github.com\/google-research\/football\/blob\/master\/gfootball\/doc\/observation.md) for details on how to interpret these values.","48fc6ea1":"## Enter URL of the game of interest","33aa200a":"## Load JSON from URL","1e6abac7":"### What were the modes the game went through?","58c1cbd4":"### Explore the Data","1ce2b182":"Keep an eye out for a little physics based exploration of data in the forthcoming notebooks in this series : 'Path of the ball' and 'Trajectory of my team'.","875eff86":"# Replay JSON EDA - I","85502388":"### Which player in my team had maximum possession of ball?","c198a7e8":"### Which player was being controlled during the game?","5cb52794":"One thing that came to my mind on seeing game replays is that I need something to debug my submission file wrt actions in a game replay JSON similar to Halite without the nitty gritty graphics and something more Python like. So here I am starting with a set of notebooks that will allow you to do the same. [Link](https:\/\/www.kaggle.com\/arunprathap\/interpreting-replay-json) to first article in the series. The second in this series follows:","155670b3":"### Which team dominated ball possession?","2acdf592":"### Make dataframe of raw observations","ec1d0194":"### Plot game statistics","973c8e11":"All values are interpreted as strings by default. You can change them to appropriate type if you want mean, std, quantile values, etc.","40da5a57":"I have answered a few questions of interest to me. You can try to find answers for questions in your mind as well.","4d49676c":"### EOF","a7ced5c1":"## Import basic Libaries & Modules","f9d5c8fc":"## Get the JSON","ee1c9610":"## Was the game good enough? Did I play well enough?","756e4d9b":"### What is my active player doing?"}}