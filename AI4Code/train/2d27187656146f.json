{"cell_type":{"4eb2f675":"code","b4c993b0":"code","04b9104f":"code","9627a0b9":"code","c81313cb":"code","d25deddc":"code","1ea1c482":"code","b2eea5ab":"code","bfee36f0":"code","44eb73ae":"code","330be6ee":"code","fbceddec":"code","15bafd70":"code","56621edd":"code","07fcbc2e":"code","7a34dd9d":"code","0975ff62":"code","131914a5":"code","f1f4e3b3":"code","ba69f4f5":"code","96a48ee7":"code","465abd25":"code","2dc111c7":"code","f098b73d":"code","9ddf2afe":"code","40dc8b12":"code","d9750f62":"code","83c8706b":"code","5aed7ac5":"code","9892b48a":"code","965a5e2c":"code","68d9aed6":"code","60df9670":"code","6868cde0":"code","0dde8371":"code","2dd2c631":"code","5b00620c":"code","59bda4fa":"code","947a1ac4":"code","b3c7ae80":"code","cdf18674":"markdown","4eb05da3":"markdown","6bb3ede8":"markdown"},"source":{"4eb2f675":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4c993b0":"df_Train = pd.read_csv('\/kaggle\/input\/hackerearth-defcon\/train.csv')\ndf_Test = pd.read_csv('\/kaggle\/input\/hackerearth-defcon\/test.csv')\n\ndf_Sub = pd.read_csv('\/kaggle\/input\/hackerearth-defcon\/sample_submission.csv')","04b9104f":"df_Train.sample(5)","9627a0b9":"df_Test.sample(5)","c81313cb":"df_Train.drop(columns=['ID'], axis=1, inplace=True)\ndf_Test.drop(columns=['ID'], axis=1, inplace=True)","d25deddc":"df_Train.shape","1ea1c482":"df_Test.shape","b2eea5ab":"df_Train_new = pd.get_dummies(df_Train, columns=['Allied_Nations', 'Hostile_Nations', 'Diplomatic_Meetings_Set', 'Aircraft_Carriers_Responding'])\ndf_Test_new = pd.get_dummies(df_Test, columns=['Allied_Nations', 'Hostile_Nations', 'Diplomatic_Meetings_Set', 'Aircraft_Carriers_Responding'])","bfee36f0":"X_Train = df_Train_new.drop(columns=['DEFCON_Level'], axis=1)\ny_Train = df_Train_new['DEFCON_Level']\n\nX_Test = df_Test_new.copy()","44eb73ae":"X_Train.shape","330be6ee":"X_Test.shape","fbceddec":"X_Train.sample(5)","15bafd70":"X_Test.sample(5)","56621edd":"y_Train.value_counts()","07fcbc2e":"from sklearn.preprocessing import MinMaxScaler","7a34dd9d":"mmScalerX = MinMaxScaler()\n\nX_Train_s = mmScalerX.fit_transform(X_Train)\nX_Test_s = mmScalerX.fit_transform(X_Test)","0975ff62":"from imblearn.over_sampling import SMOTE\n\nX_Train_resampled, y_Train_resampled = SMOTE(random_state=25).fit_resample(X_Train_s, y_Train)","131914a5":"X_Train_resampled.shape","f1f4e3b3":"y_Train_resampled.shape","ba69f4f5":"y_Train_resampled.value_counts()","96a48ee7":"import tensorflow as tf\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import regularizers\n\nprint(tf.__version__)","465abd25":"import matplotlib.pyplot as plt","2dc111c7":"!pip install git+https:\/\/github.com\/tensorflow\/docs","f098b73d":"import tensorflow_docs as tfdocs\nimport tensorflow_docs.plots\nimport tensorflow_docs.modeling","9ddf2afe":"def build_model():\n  model = keras.Sequential([layers.Dense(256, activation='relu', kernel_regularizer=regularizers.l2(0.0001), input_shape=[X_Train_resampled.shape[1]]),\n                            layers.Dropout(0.2),\n                            layers.Dense(384, activation='relu', kernel_regularizer=regularizers.l2(0.0001)),\n                            layers.Dropout(0.2),\n                            layers.Dense(256, activation='relu', kernel_regularizer=regularizers.l2(0.0001)),\n                            layers.Dropout(0.2),\n                            layers.Dense(128, activation='relu', kernel_regularizer=regularizers.l2(0.0001)),\n                            layers.Dropout(0.2),\n                            layers.Dense(64, activation='relu', kernel_regularizer=regularizers.l2(0.0001)),\n                            layers.Dropout(0.2),\n                            layers.Dense(32, activation='relu', kernel_regularizer=regularizers.l2(0.0001)),\n                            layers.Dropout(0.2),\n                            layers.Dense(6, activation='softmax')\n                            ])\n\n  # Defining the optimizer with a specific learning rate of 0.001\n  optimizer = tf.keras.optimizers.Adam(0.001, amsgrad=True)\n\n  # Compiling the model\n  model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n  return model","40dc8b12":"model = None\ndel model\nmodel = build_model()","d9750f62":"model.summary()","83c8706b":"early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=30)","5aed7ac5":"EPOCHS=500\nBATCHES=64","9892b48a":"history = model.fit(X_Train_resampled, y_Train_resampled, epochs=EPOCHS, batch_size=BATCHES, validation_split=0.2,\n                    verbose=2, callbacks=[early_stop, tfdocs.modeling.EpochDots()])","965a5e2c":"hist = pd.DataFrame(history.history)\nhist['epoch'] = history.epoch\nhist.tail()","68d9aed6":"plotter = tfdocs.plots.HistoryPlotter(smoothing_std=2)","60df9670":"plotter.plot({'Basic': history}, metric=\"loss\")\nplt.ylim([0, 2])\nplt.ylabel('Loss')","6868cde0":"plotter.plot({'Basic': history}, metric=\"accuracy\")\nplt.ylim([0, 2])\nplt.ylabel('Accuracy')","0dde8371":"model.evaluate(X_Train_resampled, y_Train_resampled, verbose=2, batch_size=BATCHES)","2dd2c631":"y_pred = np.argmax(model.predict(X_Test_s), axis=1)","5b00620c":"X_Test_s.shape","59bda4fa":"y_pred.shape","947a1ac4":"df_Sub.shape","b3c7ae80":"df_Sub","cdf18674":"## Scaling","4eb05da3":"## Fixing Imbalance","6bb3ede8":"## Model"}}