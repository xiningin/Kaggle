{"cell_type":{"bc9a0d4b":"code","8df68062":"code","06be59db":"code","28f4a681":"code","0e131c3b":"code","47f8b483":"code","ca7bbb1d":"code","0261fcca":"code","a6683bde":"code","07ce00de":"code","d35a5f97":"code","ceed2b47":"code","b8fc4d88":"code","9679f40a":"code","4b44868e":"code","93598632":"code","92ebc7e0":"code","35b2a1e9":"code","781b9c1a":"code","07b233e9":"code","7d0f5606":"code","df6103d3":"code","a7ce9438":"code","3bf3a79a":"code","59397eb7":"code","31d400c8":"code","c595f373":"code","928608ad":"code","330dd307":"code","cd8893d2":"code","eb0ab536":"code","3a3be9b4":"code","4798fc4a":"code","6d3557d3":"code","b3343216":"code","82be7159":"code","b0cd942e":"code","6f6bb6f5":"code","15c3b0b4":"code","dff4efe0":"code","59636003":"code","ec36b043":"code","ab397291":"code","5e840f51":"code","8d06dc95":"code","7ad70054":"code","fef91042":"code","87d5678f":"code","2853d75e":"code","61f6ec9a":"code","c5617cb1":"code","57db0875":"code","2f768393":"code","0816d1a6":"code","be761946":"markdown","305f0950":"markdown","f8617020":"markdown","1ba72d38":"markdown","13d51481":"markdown","eb23d92a":"markdown","cb0b12d1":"markdown","3bf68676":"markdown","52360e03":"markdown","d4379ec8":"markdown","a2398ac1":"markdown","516ce278":"markdown","d441fd94":"markdown","cc7dbc84":"markdown","e32b5070":"markdown","90a60306":"markdown","8de6beee":"markdown","5879be6f":"markdown","b164b1e7":"markdown","b74af3f1":"markdown"},"source":{"bc9a0d4b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# \u062a\u0644\u0643 \u0627\u0644\u0645\u0643\u062a\u0628\u0647 \u062a\u0639\u0645\u0644 \u0639\u0644\u064a \u0631\u0633\u0645 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0641\u0642\u0648\u062f\u0647 \n# This library works to show the missing values in the form of a graph.\nimport missingno as miss\nfrom pandas_profiling import ProfileReport\nfrom sklearn.preprocessing import LabelEncoder","8df68062":"train_data=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_data=pd.read_csv(\"..\/input\/titanic\/test.csv\")","06be59db":"train_profile=ProfileReport(train_data, title=\"Titanic Training data Report\")\ntrain_profile","28f4a681":"test_profile=ProfileReport(test_data, title=\"Titanic Test data data Report\")\ntest_profile","0e131c3b":"print(train_data.shape)\nprint(test_data.shape)","47f8b483":"train_data.head(10)","ca7bbb1d":"test_data.head()","0261fcca":"train_data.tail()","a6683bde":"train_data.info()","07ce00de":"# We dropped one of the columns that will not help.\ntest_data= test_data.drop([\"PassengerId\"],axis=1)","d35a5f97":"# Here we plot the missing values in the training data.\nsns.heatmap(train_data.isnull(),cbar=False, cmap='viridis')","ceed2b47":"test_data.isnull().sum()","b8fc4d88":"# Now we will plot the missing values in the test data\nmiss.matrix(test_data.sample(200))","9679f40a":"# We apply this equation.\ndef male_female_child(passenger):\n    # Take the Age and Sex\n    age,sex = passenger\n    # Compare the age, otherwise leave the sex\n    if age < 16:\n        return 'child'\n    else:\n        return sex\n# We'll define a new column called 'person', remember to specify axis=1 for columns and not index\ntrain_data['person'] = train_data[['Age','Sex']].apply(male_female_child,axis=1) ","4b44868e":"train_data.head()","93598632":"# Now let's see the results after applying that equation.\nsns.catplot(\"person\",data=train_data,kind=\"count\")\ntrain_data[\"person\"].value_counts()","92ebc7e0":"sns.catplot(\"Pclass\",data=train_data,hue=\"person\",kind=\"count\")","35b2a1e9":"# I set this function to achieve what we want:\ndef age_groups(age):\n    if age >= 65:\n        return('65 or above')\n    elif age > 55:\n        return('56 - 65 years')\n    elif age > 45:\n        return('46 - 55 years')\n    elif age > 35:\n        return('36 - 45 years')\n    elif age > 25:\n        return('26 - 35 years')\n    elif age > 18:\n        return('19 - 25 years')\n    elif age > 0:\n        return('0 - 18 years')\n    else:\n        return(None)","781b9c1a":"# Now I will create a new column to display the results.\ntrain_data['Age_group'] = train_data['Age'].apply(age_groups)","07b233e9":"# \u0644\u0646\u0644\u0642 \u0646\u0638\u0631\u0647 \u0639\u0644\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \ntrain_data.head(5)","7d0f5606":"# To achieve this, I will create a new column with the value, and the sum between two columns at the level of values.\ntrain_data['Alone'] =  train_data.Parch + train_data.SibSp","df6103d3":"# \u0644\u0646\u0644\u0642 \u0646\u0638\u0631\u0647 \u0639\u0644\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \ntrain_data.head()","a7ce9438":"train_data[\"Alone\"].value_counts()","3bf3a79a":"# Now I got a graph of the condition of the passengers, are they alone or with the family?\ndef alone(passenger):\n    sib,parch = passenger\n    if sib ==0 and parch==0:\n        return \"alone\"\n    else:\n        return \"family\"\ntrain_data['came_with'] = train_data[[\"SibSp\",\"Parch\"]].apply(alone,axis=1)\nsns.catplot('came_with',data=train_data,kind='count',order=([\"alone\",\"family\"]))","59397eb7":"fig = sns.FacetGrid(train_data, hue=\"person\",aspect=4)\nfig.map(sns.kdeplot,'Age',shade= True)\noldest = train_data['Age'].max()\nfig.set(xlim=(0,oldest))\nfig.add_legend()","31d400c8":"#Now I will try to get the type of distribution for each of the three categories, such as men, women and children, in relation to the place of sitting.\nfig = sns.FacetGrid(train_data, hue=\"Pclass\",aspect=4)\nfig.map(sns.kdeplot,'Age',shade= True)\noldest = train_data['Age'].max()\nfig.set(xlim=(0,oldest))\nfig.add_legend()","c595f373":"#Now you have a comparison between the 3 main categories and the pillar of survival.\nsns.barplot('person', 'Survived', data=train_data, color=\"aquamarine\")\nplt.show()","928608ad":"#Here is another comparison between the different age groups and the pillar of survival.\nsns.barplot(x=\"Survived\", y=\"Age_group\", data=train_data)","330dd307":"data=train_data[\"Cabin\"].dropna()","cd8893d2":"#We will notice in the results that there is a value that has no meaning, which is the \u201cT\u201d that we can delete after drawing it on the figure.\ntrain_data[\"Cabin\"].unique()","eb0ab536":"# Set empty list\nlevels = []\n\n# Loop to grab first letter\nfor level in data:\n    levels.append(level[0])    \n\n# Reset DataFrame and use factor plot\ncabin_df = pd.DataFrame(levels)\ncabin_df.columns = ['Cabin']\nsns.catplot('Cabin',data=cabin_df,palette='winter_d',kind=\"count\")","3a3be9b4":"# \u0647\u0646\u0627 \u062a\u0645 \u062d\u0630\u0641 \u0627\u0644\u0642\u064a\u0645\u0647 \u0627\u0644\u062a\u064a \u0644\u064a\u0633 \u0644\u0647\u0627 \u0645\u0639\u0646\u064a \ncabin_df = cabin_df[cabin_df.Cabin != 'T']\n#Replot\nsns.catplot('Cabin',data=cabin_df,palette='winter_d',kind=\"count\")","4798fc4a":"train_data[\"Embarked\"].fillna(\"S\", inplace=True)","6d3557d3":"train_data[\"Embarked\"].value_counts()","b3343216":"sns.catplot('Embarked',data=train_data,hue='Pclass',order=['C','Q','S'],kind=\"count\")","82be7159":"# Dealing with missing values in training data\n# We will use 2 strategies to deal with this column \"Age\" \n#......and then we search for the normal distribution of the column to see if the results we obtained are compatible or not.\nfull_Age_mean = train_data.Age.mean()\nfull_Age_median = train_data.Age.median()\ntrain_data['full_Age_mean'] = train_data.Age.fillna(full_Age_mean)\ntrain_data['full_Age_median'] = train_data.Age.fillna(full_Age_median)","b0cd942e":"#Now I will draw the compensation column in mean.\nsns.kdeplot(train_data['full_Age_mean'],color='red',label='mod')\n# Now I will draw the compensation column with median.\nsns.kdeplot(train_data['full_Age_median'],color='blue',label='Median')\n# Also here's the original column distribution.\nsns.kdeplot(train_data['Age'],color='black',label='Original')\nplt.legend()","6f6bb6f5":"train_data[\"Cabin\"].head()","15c3b0b4":"#train_data[\"Cabin\"]=cabin_df\n#train_data[\"Cabin\"].value_counts()","dff4efe0":"train_data[\"Cabin\"].head()","59636003":"# It seems that there are a lot of values that need to be converted.\ntrain_data[\"Cabin\"].unique()","ec36b043":"train_data[\"Cabin\"].isnull().sum()","ab397291":"train_data.head(5)","5e840f51":"ax = train_data[\"Cabin\"].hist(bins=15, color='teal', alpha=0.8)\nax.set(xlabel='Cabin', ylabel='Count')\nplt.show()","8d06dc95":"temporary_column=train_data[\"Cabin\"].dropna()\ntemporary_column","7ad70054":"#Here I converted the data.\n#object_1=LabelEncoder()\n#temporary_column = object_1.fit_transform(temporary_column)","fef91042":"#Cabin_mean = temporary_column.mean()\n#Cabin_median = temporary_column.median()\n#train_data['Cabin_mean'] = temporary_column.fillna(Cabin_mean)\n#train_data['Cabin_median'] = temporary_column.Cabin.fillna(Cabin_median)","87d5678f":"#sns.kdeplot(train_data['Cabin_mean'],color='red',label='Mean')\n#sns.kdeplot(train_data['Cabin_median'],color='blue',label='Median')\n#sns.kdeplot(train_data['Cabin'],color='black',label='Original')\n#plt.legend()","2853d75e":"train_data.drop(\"Cabin\", axis=1, inplace=True)","61f6ec9a":"train_data.head()","c5617cb1":"correlation = train_data.corr()\nplt.figure(figsize=(12,8))\nsns.heatmap(correlation, linecolor='white',linewidths=0.1, annot=True)\nplt.title('Correlation Matric')\nplt.xlabel('Titanic Data')\nplt.ylabel('Titanic Data')\nplt.show()","57db0875":"sns.catplot(x=\"person\", y=\"Survived\",\n                hue=\"Parch\", \n                data=train_data, kind=\"bar\",\n                height=6, aspect=1.0);","2f768393":"g=sns.FacetGrid(train_data, col=\"Survived\",  row=\"person\")\ng.map(sns.scatterplot, \"Alone\", \"Age_group\")","0816d1a6":"sns.set_theme(style=\"dark\")\nf, ax = plt.subplots(figsize=(6, 6))\nsns.scatterplot(x=train_data[\"Embarked\"], y=train_data[\"Age\"], s=5, color=\".15\")\nsns.histplot(x=train_data[\"Embarked\"], y=train_data[\"Age\"], bins=50, pthresh=.1, cmap=\"mako\")","be761946":"# To know more about the data we have.","305f0950":"> **Now we will see the distribution of the 3 types on the three sections.**","f8617020":"> **Here I drop the missing values and store the results in a separate variable, as a first step.**","1ba72d38":"# Reading Data","13d51481":"> **The problem with this column is that it contains several different types of data in one cell, so we will extract only the first letter from that column.**","eb23d92a":"# EDA: Titanic dataset","cb0b12d1":"# thank you","3bf68676":"> **Unfortunately, the percentage of missing data is reported in the column called .\n  \"Cabin\" 77% so we're going to drop that column.**","52360e03":"> **Now I will verify the survival rate among the age groups of women, men, children and the elderly, because the results tell us that children, women and the elderly received any privileges or not.**\n\n> **So I will divide them into those age groups.**\n* 0 - 18 years\n* 19 - 25 years\n* 26 - 35 years\n* 36 - 45 years\n* 46 - 55 years\n* 56 - 65 years\n* 65 or above.","d4379ec8":"> **I will focus more on training data.**","a2398ac1":"> **We still have missing data in this column. So the following treatments will solve that problem.**","516ce278":"****After taking a closer look at the data we have, we found that the gender column is divided into two parts, \u201cman\u201d and \u201cwoman,\u201d but it turns out that we need to add a part to the data, which is the \u201cchild\u201d column.****","d441fd94":"> **Now, before discovering survival rates among age groups, I will look at something else, which is whether the passengers were alone or with others.**","cc7dbc84":"# EDA && Dealing with missing values.","e32b5070":"> **The results we obtained are good results compared with the results that we can get when we substitute random values from the table.\nSo we will celebrate those results now in this column.**\n\n> **The percentage of Distinct in the report is 12.3%**","90a60306":"> **To deal with the next column in the training data, we must first convert the column to numeric data, but this column contains a lot of different types of data in one cell so we will extract the first character from each cell, which we already did so we will only transfer our results back to the original column.**","8de6beee":"# Data report","5879be6f":"> **I have replaced the missing values here with the most frequent values, because the percentage of missing data is very small according to the report we obtained about the data.**","b164b1e7":"> **Now I will try to get the distribution type for each of the three categories such as men, women and children.**","b74af3f1":"**In this software paper we will do some basic analysis on the data, we will deal with missing values, and we will create columns that load new values from other old columns.**\n\n> **You will have a lot of fun....**\n\n> **Let's continue.........**"}}