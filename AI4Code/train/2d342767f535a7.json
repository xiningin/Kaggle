{"cell_type":{"3d67258a":"code","21e140d2":"code","a7884769":"code","e03055e5":"code","15adc485":"code","9172d9eb":"code","ae5dbafd":"code","6040a4d2":"code","51024224":"code","96922383":"code","9dc6d081":"code","5c96a1e4":"code","bd2fe899":"code","a19459a7":"code","99a241d4":"code","09a49fd1":"code","c730e2a1":"code","466adbac":"code","c5f6425f":"code","b64d36b3":"code","5b7cfa12":"code","bcfa7eee":"code","a75ba9b3":"code","e05f00be":"code","36562d41":"code","103eb9bd":"code","db603322":"code","80688fd3":"code","32a45dd3":"code","2329a6dd":"code","0454e5e6":"code","2da84a93":"code","561575fb":"code","22cc9268":"code","7c21e811":"code","1bb2f1da":"code","cb612b83":"code","53f9a640":"code","7dd01387":"code","95877149":"code","5a88aab9":"code","58e28dcf":"code","f9339645":"code","2ca40ef6":"code","4fed06d6":"code","dc5e6762":"code","413ba588":"code","282b389e":"code","149a0871":"code","3e40f66c":"code","5a850b2e":"code","0f8f570f":"code","0beb6297":"code","f2c5d83a":"code","71d53be5":"code","d4c394a1":"code","93716bd8":"code","b2294a6c":"code","4648c87a":"code","6b19f2ca":"code","a19c092a":"code","a19e410d":"code","24f14268":"code","6edd769e":"code","13a2069e":"code","69796bdb":"code","c02b400f":"code","0f376f6e":"code","fb3c5787":"code","ec3beac3":"code","b3c34d33":"code","e9e55cdf":"code","dd5ec0de":"code","e7200ae6":"code","0539f5bf":"code","09541ac5":"code","1018438b":"code","df1e2103":"code","27640561":"code","c2bb50f8":"code","eff72bce":"code","58f38ce5":"code","6272708a":"code","fe5e0b7c":"code","6f0011a1":"code","2049dcb7":"code","1eece84b":"code","6d234364":"code","e4c69c8f":"code","465c9454":"code","72f5931a":"code","c16f6fad":"code","73b5396e":"code","888fc1df":"code","b5b84563":"code","aec6e2e9":"code","b0538a17":"code","92dd9cce":"code","f0a9356b":"code","5638789b":"code","0779ae5e":"code","38d4d80d":"code","42b3f250":"code","33666393":"code","05e0d1b8":"code","dd1d32c6":"code","a3ae84a1":"code","b031e854":"code","f0284d66":"code","e270b722":"code","83a069df":"code","4996345b":"code","5a8f0247":"code","92d086ad":"code","6328dd31":"code","5cbc425f":"code","b2ab2764":"code","056c5578":"code","9a32751b":"code","479dc4f9":"code","e5977a89":"code","54522afa":"code","bdbeefd9":"code","1477c88f":"markdown","0caad99b":"markdown","2eacab30":"markdown","4073105e":"markdown","2fd23235":"markdown","1ef96ccb":"markdown","c9dc136b":"markdown","f65c94e0":"markdown","2eea2a88":"markdown","d9c1866e":"markdown","9681cdb0":"markdown","4ce1a836":"markdown","9e52eade":"markdown","2cebdba4":"markdown","1805e8d3":"markdown","b0d68c0b":"markdown","78bbeb90":"markdown","b16d93e4":"markdown","645d2c8d":"markdown","83254202":"markdown","67c0d556":"markdown","8cb01edc":"markdown","4fc51cd3":"markdown","f1fec735":"markdown","f266b6bb":"markdown","107418bf":"markdown","9c9e5c67":"markdown","a3d9004b":"markdown","e52ce140":"markdown","8b5f8084":"markdown","24e5d65c":"markdown","938a2c30":"markdown","957c0570":"markdown","d3ef1638":"markdown","d4cd8910":"markdown","2cf9f6d4":"markdown","21fe2057":"markdown","47b16953":"markdown","d61a2eb2":"markdown","da1d411f":"markdown","b38d3bb0":"markdown","1c5f956b":"markdown","bd21c8ca":"markdown","3e777396":"markdown","c016f4e4":"markdown","296f7b28":"markdown","5d951a9d":"markdown","fc0bdcd8":"markdown","938cfae1":"markdown","87996987":"markdown","b70933d3":"markdown","16fab01b":"markdown","c9474aef":"markdown","a78cd843":"markdown","df938276":"markdown","7b557dd2":"markdown","c746c5a8":"markdown","3cbf4269":"markdown","0bd7fef2":"markdown","2b68e91d":"markdown","faf7868a":"markdown","dac33209":"markdown","b6656547":"markdown","a2d6c032":"markdown","99733d1a":"markdown","df1431db":"markdown","b3f9282e":"markdown","48563670":"markdown","1f722321":"markdown","08e7dd8c":"markdown","67059223":"markdown","411a5134":"markdown","005534ab":"markdown","5dd42a65":"markdown","f6f094c8":"markdown","64132fb2":"markdown","735a47cd":"markdown","203ee423":"markdown","da099a4b":"markdown","87dbea33":"markdown","2f66fafd":"markdown","11e2a212":"markdown","1e012573":"markdown","acea4680":"markdown","49df5b8e":"markdown","5720027f":"markdown","fc3fa698":"markdown","e163f9ec":"markdown","dcab7572":"markdown","200115d0":"markdown","20311ce9":"markdown","68808222":"markdown"},"source":{"3d67258a":"# importing libraries\n\nimport pandas as pd\nimport numpy as np\nimport datetime as dt\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport plotly.express as px\n\nfrom scipy.stats import zscore\nfrom datetime import datetime","21e140d2":"# for data pipeline\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import*\n\n# for prediction (machine learning models) ------------------------\n\nfrom sklearn.linear_model import*\nfrom sklearn.preprocessing import*\nfrom sklearn.ensemble import*\nfrom sklearn.neighbors import*\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer","a7884769":"av = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/insaid2018\/Term-2\/master\/Projects\/avocado.csv\",index_col=0)\nav.head()","e03055e5":"print('Data Shape:',av.shape)\nnRow, nCol = av.shape\nprint(f'There are {nRow} rows and {nCol} columns')","15adc485":"av.describe()","9172d9eb":"av.rename(columns={'Date':'date', 'AveragePrice':'avg_price','Total Volume':'total_vol','Total Bags':'total_bags','Small Bags':'small_bags', 'Large Bags':'large_bags','XLarge Bags':'xl_bags'},inplace=True)","ae5dbafd":"av.info()","6040a4d2":"av.isna().sum()","51024224":"print('Number of Duplicates :', av.duplicated().sum())","96922383":"av['date'] = pd.to_datetime(av['date'])\nav['month'] =av['date'].dt.month","9dc6d081":"sns.set_style('white')\nplt.figure(figsize=(10,8))\nsns.distplot(av.avg_price)\nplt.title('Distribution of Average Price', fontsize=12)","5c96a1e4":"import statsmodels.api as sm\nsm.qqplot(av.avg_price,line=\"s\")","bd2fe899":"av_mod = av","a19459a7":"price_mean = av_mod.avg_price.mean()\nprice_sd   = av_mod.avg_price.std()\nlower_sd_limit = price_mean-price_sd*2\nupper_sd_limit = price_mean+price_sd*2\nprint('Lower SD Limit :', lower_sd_limit) \nprint('Upper SD Limit :', upper_sd_limit)","99a241d4":"outliers_sd = [x for x in av_mod.avg_price if x <lower_sd_limit or x > upper_sd_limit]\nprint('Number of outliers using Standard Devition is:', len(outliers_sd))","09a49fd1":"# creating a dataframe excluding ouliers using SD\nav_exclude_sd = av_mod[(av_mod.avg_price < upper_sd_limit) | (av_mod.avg_price > lower_sd_limit)]\nav_exclude_sd.shape","c730e2a1":"quantile = np.quantile(av.avg_price, [0.25,0.5,0.75,.1])\nIQR = quantile[2] - quantile[0]\nupper_IQR_limit = 1.5 * IQR + quantile[2]\nlower_IQR_limit = 1.5 * IQR - quantile[0]\noutlier_IQR =[x for x in av_mod.avg_price if  x < lower_IQR_limit or x > upper_IQR_limit]\n\nprint('IQR : {}\\nLower IQR Limit is : {}\\nUpper IQR limit is : {}'.format(IQR, lower_IQR_limit, upper_IQR_limit))\nprint('\\nNumber of Outliers are : {}'.format(len(outlier_IQR)))","466adbac":"av_exclude_IQR = av_mod[(av_mod.avg_price < upper_IQR_limit) | (av_mod.avg_price > lower_IQR_limit)]\nav_exclude_IQR.shape","c5f6425f":"z_score=np.abs(zscore(av_mod['avg_price']))\nthreshold=3\nupper_zScore_limit = np.where(z_score<3)\n\nprint(z_score)\nprint('\\n')\nprint(np.where(z_score<3))","b64d36b3":"av_mod['z_score']=z_score\nav_mod.loc[av_mod.z_score>3].count()","5b7cfa12":"sns.catplot(x=\"month\", y=\"avg_price\", hue=\"type\",kind=\"box\", data=av, height=6.5, linewidth=2.5, aspect=2,palette=\"Set1\");","bcfa7eee":"fig,ax = plt.subplots(2,2,figsize=(15,10))\nav['avg_price'].plot(kind='box',subplots=False, ax=ax[0,1]);\nav.plot(kind='scatter', x='month', y='z_score', figsize=(12, 6), color='purple', grid=False, ax=ax[1,1])\nsns.boxplot(y=\"type\", x=\"avg_price\", data=av, palette = 'pink', ax = ax[1,0]);\nsns.boxplot(y=\"type\", x=\"total_vol\", data=av, palette = 'pink', ax = ax[0,0]);","a75ba9b3":"log_av = np.log(av.avg_price+1)\nsns.set_style(\"white\")\nplt.figure(figsize=(8,8))\nsns.distplot(log_av);","e05f00be":"fig,ax = plt.subplots(1,2,figsize=(10,7))\nsm.qqplot(av.avg_price,line=\"s\",ax=ax[0])\nax[0].set_title(\"Before Normalization\")\nsm.qqplot(log_av,line=\"s\",ax=ax[1])\nax[1].set_title(\"After Normalization\");","36562d41":"f, axes = plt.subplots(2, 2, figsize=(7, 7), sharex=False)                                      # Set up the matplotlib figure\nsns.despine(left=True)\n\nsns.distplot(av.avg_price, color=\"b\", ax=axes[0, 0])\n\nsns.distplot(av.month, color=\"r\", ax=axes[0, 1])\n\nsns.distplot(av.year, color=\"g\", ax=axes[1, 0])\n\nsns.distplot(av.total_vol, color=\"m\", ax=axes[1, 1])","103eb9bd":"av.corr()","db603322":"plt.figure(figsize=(10,8))\nsns.heatmap(round(av.corr(),2),annot=True)\nplt.show()","80688fd3":"av['region'].nunique()","32a45dd3":"av.groupby('region').size()","2329a6dd":"sns.jointplot(x = \"total_bags\", y = \"avg_price\", data=av, kind='reg');","0454e5e6":"sns.pairplot(av, x_vars=['total_vol','total_bags'], y_vars='avg_price', height=5,aspect=1, kind='reg');","2da84a93":"plt.figure(figsize=(8,6))\nsns.scatterplot(x='total_vol', y = 'avg_price', hue= 'type', data= av);","561575fb":"av.groupby(['type'])['total_vol'].sum().plot(kind='pie', figsize=(10,6),autopct='%1.1f%%');\nplt.title('Volume of Types of Avocado', fontsize=20);\nplt.ylabel('')\nplt.legend(bbox_to_anchor=(0, .7),title='Type',loc ='right');","22cc9268":"av.groupby(['year','type'])['total_vol'].mean().unstack().plot(kind='bar',stacked=False, legend = True,);\nplt.legend(loc='best');\nplt.title('Mean of total volume by year');\nplt.show();","7c21e811":"av.groupby(['year','type'])['avg_price'].mean().unstack().plot(kind='bar',stacked=False, legend = True,);\nplt.legend(loc='best');\nplt.title('Mean of avg_price by year');\nplt.show();","1bb2f1da":"fig, ax = plt.subplots(figsize = (15,8))\nsns.countplot(x = 'avg_price', hue = 'type', data = av)\nplt.title(\"Avrage Price and Type\")\nplt.xlabel(\"Date\", fontsize=13, fontweight='bold')\nplt.ylabel('Average Price')\nplt.tick_params(axis='x', rotation = 90)","cb612b83":"sns.set(font_scale=1.5) \nfrom scipy.stats import norm\nf,ax = plt.subplots(figsize=(10,6));\nsns.distplot(a=av.avg_price, kde=False, fit=norm,color='m')","53f9a640":"av['date'] = pd.to_datetime(av['date'])\nav['month'] =av['date'].dt.month\nav['year_month'] = av['date'].dt.to_period('M') # create a new column with month and year","7dd01387":"fig, ax = plt.subplots(2, 1, figsize=(23,8))\n\ngrouped = av.groupby('year_month')[['avg_price', 'total_vol']].mean()\n\nax[0].plot(grouped.index.astype(str), grouped['avg_price'])\nax[0].tick_params(labelrotation=90,labelsize=10)\nax[0].set_ylabel('Average Price')\n\nax[1].plot(grouped.index.astype(str), grouped['total_vol'])\nax[1].tick_params(labelrotation=90, labelsize=10)\nax[1].set_ylabel('Total Volume')\n\nplt.show()\nplt.show()","95877149":"f,ax = plt.subplots(2,2,figsize=(22,10));\nsns.barplot(data=av, x= 'year', y= 'avg_price', ax = ax[0,0], hue ='type');\nsns.barplot(data=av, x = 'month', y = 'avg_price',ax=ax[0,1], hue = 'type');\nsns.barplot(data=av, x= 'year', y= 'avg_price', ax = ax[1,0]);\nsns.barplot(data=av, x = 'month', y = 'avg_price',ax=ax[1,1]);\nax[0,0].set_title('Average Mean Price by Year', fontsize=20, );\nax[0,1].set_title('Average Mean Price by Month',fontsize= 20);\nax[1,0].set_xlabel('Year',fontweight='bold',fontsize=15)\nax[1,1].set_xlabel('Months', fontweight='bold',fontsize=15)\nax[0,0].set_ylabel('Averge Price',fontweight='bold',fontsize=15)\nax[1,0].set_ylabel('Average Price', fontweight='bold',fontsize=15)","5a88aab9":"f,ax = plt.subplots(1,2,figsize=(15,8));\nav.groupby(['year','type'])['avg_price'].mean().unstack().plot(kind='bar',stacked=False, legend = True, ax=ax[0]);\nav.groupby(['year'])['type'].value_counts().unstack().plot(kind='bar',stacked=False, legend = True, ax=ax[1]);\nax[0].set_title('Average Mean Price by Year', fontsize=20, );\nax[1].set_title('Count of avocado sold',fontsize= 20);\nax[0].set_xlabel('Year',fontweight='bold',fontsize=15)\nax[1].set_xlabel('Months', fontweight='bold',fontsize=15)\nax[0].set_ylabel('Averge Price',fontweight='bold',fontsize=15)\nax[1].set_ylabel('Average Price', fontweight='bold',fontsize=15)","58e28dcf":"f,ax = plt.subplots(1,2,figsize=(22,6))\nav['year'][av['type']=='organic'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[0],shadow=True);\nav['year'][av['type']=='conventional'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[1],shadow=True);\nax[0].set_title('Organic',fontweight='bold');\nax[1].set_title('Conventional',fontweight='bold');\nax[0].legend(loc=\"lower left\");\nax[1].legend(loc=\"lower left\");","f9339645":"f,ax = plt.subplots(1,2,figsize=(22,6));\nsns.lineplot(x='month',y='avg_price', hue='type',data=av, ax=ax[1]);\nsns.lineplot(x='year',y='avg_price', hue='type',data=av, ax= ax[0]);\nax[0].set_title('Average Mean Price by Year', fontsize=20, );\nax[1].set_title('Average Mean Price by Month',fontsize= 20);\nax[0].set_xlabel('Year',fontweight='bold',fontsize=15);\nax[1].set_xlabel('Month', fontweight='bold',fontsize=15);\nax[0].set_ylabel('Averge Price',fontweight='bold',fontsize=15);\nax[1].set_ylabel('Average Price', fontweight='bold',fontsize=15);\n","2ca40ef6":"f,ax = plt.subplots(1,2,figsize=(22,6));\nsns.lineplot(x='month',y='avg_price', hue='year',data=av,palette='winter', ax=ax[1],linestyle='-.',style='type');\nsns.lineplot(x='month',y='total_vol', hue='year',data=av,palette='autumn', ax= ax[0],style='type');\nax[0].set_title('Average Mean Price by Month across Years', fontsize=20, );\nax[1].set_title('Total Volume by Month across Years',fontsize= 20);\nax[0].set_xlabel('Month',fontweight='bold',fontsize=15);\nax[1].set_xlabel('Month', fontweight='bold',fontsize=15);\nax[0].set_ylabel('Total Volume',fontweight='bold',fontsize=15);\nax[1].set_ylabel('Average Price', fontweight='bold',fontsize=15);\n","4fed06d6":"fig = px.box(av, x='region', y='avg_price')\nfig.show()","dc5e6762":"fig = px.box(av, x='region', y='total_vol')\nfig.show()","413ba588":"av.groupby(['region'])['total_vol'].sum().sort_values(ascending=False).plot(kind='bar', figsize=(25,6));\n","282b389e":"plt.figure(figsize=(22,10))\nax=sns.barplot(x=av.region,y=av.avg_price)\nax.tick_params(axis='x', rotation =90)","149a0871":"plt.figure(figsize=(22,10))\nax=sns.barplot(x=av.region,y=av.total_vol)\nax.tick_params(axis='x', rotation =90)","3e40f66c":"#f,ax = plt.subplots(figsize=(15,8));\nav.groupby(['region','type'])['avg_price'].mean().unstack().plot(kind='bar',stacked=True,figsize=(20,8),legend=True);","5a850b2e":"av.groupby(['region','type'])['total_vol'].sum().unstack().plot(kind='bar',stacked=True,figsize=(20,8),legend=True, cmap='flare');","0f8f570f":"fig, ax = plt.subplots(1,2, figsize = (20,5))\nregion_price = av.groupby('region')['avg_price'].mean()\nexpensive_region = region_price.sort_values(ascending=False).iloc[:5]\ncheap_region     = region_price.sort_values().iloc[:5]\n\nsns.barplot(x ='avg_price', y ='region', data = av, order= expensive_region.index, ci=None, palette='Greens_r', ax=ax[0])\nsns.barplot(x='avg_price', y = 'region', data = av, order= cheap_region.index, ci=None, palette = 'Greens_r', ax=ax[1])\nplt.show()\n\ndf_expensive_region = pd.DataFrame(expensive_region).reset_index()\ndf_cheap_region     = pd.DataFrame(cheap_region).reset_index()\n\nprint('The most expensive avocados are found in {}'.format(list(df_expensive_region.iloc[:5,0])))\nprint('\\n')\nprint('The cheapest avocados are found in {}'.format(list(df_cheap_region.iloc[:5,0])))","0beb6297":"fig, ax = plt.subplots(1, 2, figsize=(18,5))\n\nav_r = av[av['region'] !='TotalUS']\n\nregion_vol = av_r.groupby('region')['total_vol'].sum()\n\nmax_vol = region_vol.sort_values(ascending = False).iloc[:10]\nmin_vol = region_vol.sort_values().iloc[:10]\n\nsns.barplot(x='total_vol', y='region', data = av_r, order=max_vol.index, ci=None, palette='Greens_r', ax=ax[0])\nsns.barplot(x='total_vol', y='region', data = av_r, order=min_vol.index, ci=None, palette='Greens_r', ax=ax[1])\n\nplt.show()\n\ndf_max_vol = pd.DataFrame(max_vol).reset_index()\ndf_min_vol = pd.DataFrame(min_vol).reset_index()\n\nprint('States with the the maximum production are {} '.format(list(df_max_vol.iloc[:5,0])))\nprint('States with the minimum prduction are {} '.format(list(df_min_vol.iloc[:5,0])))","f2c5d83a":"av.head()","71d53be5":"def season_of_date(date):\n    year = str(date.year)\n    seasons = {'spring': pd.date_range(start='21\/03\/'+year, end='20\/06\/'+year),\n               'summer': pd.date_range(start='21\/06\/'+year, end='22\/09\/'+year),\n               'autumn': pd.date_range(start='23\/09\/'+year, end='20\/12\/'+year)}\n    if date in seasons['spring']:\n        return 'spring'\n    if date in seasons['summer']:\n        return 'summer'\n    if date in seasons['autumn']:\n        return 'autumn'\n    else:\n        return 'winter'\n\n# Assuming df has a date column of type `datetime`\nav['seasons'] = av.date.map(season_of_date)\n   ","d4c394a1":"av.drop(['date','z','total_vol','year','4770','4046','4225','total_bags','small_bags','xl_bags','large_bags'],axis=1,inplace=True)","93716bd8":"av.head()","b2294a6c":"av_m =av.drop('seasons',axis=1)","4648c87a":"av.drop('month',axis=1, inplace = True)\n","6b19f2ca":"av_m.head()","a19c092a":"av.head()","a19e410d":"cat_cols = ['type','seasons','region']\ncat_cols_m = ['type','month','region']  ","24f14268":"av_dummies = pd.get_dummies(av, columns=cat_cols, drop_first=True)\nav_dummies.head()","6edd769e":"av_m_dummies = pd.get_dummies(av_m, columns=cat_cols_m, drop_first=True)\nav_m_dummies.head()","13a2069e":"# For model_lr_s_1 : Seasons and Type\nfeatures_lr_s_1 = ['type_organic','seasons_spring', 'seasons_summer','seasons_winter']\ntarget = ['avg_price']   ","69796bdb":"# For model_lr_s_2 : Seasons and Region\nfeatures_lr_s_2 = ['type_organic','seasons_spring', 'seasons_summer','seasons_winter','region_Atlanta','region_BaltimoreWashington','region_Boise',\n 'region_Boston','region_BuffaloRochester','region_California','region_Charlotte','region_Chicago','region_CincinnatiDayton',\n 'region_Columbus','region_DallasFtWorth','region_Denver','region_Detroit','region_GrandRapids','region_GreatLakes','region_HarrisburgScranton','region_HartfordSpringfield',\n 'region_Houston','region_Indianapolis','region_Jacksonville','region_LasVegas','region_LosAngeles','region_Louisville','region_MiamiFtLauderdale',\n 'region_Midsouth','region_Nashville','region_NewOrleansMobile','region_NewYork','region_Northeast','region_NorthernNewEngland','region_Orlando',\n 'region_Philadelphia','region_PhoenixTucson','region_Pittsburgh','region_Plains','region_Portland','region_RaleighGreensboro',\n 'region_RichmondNorfolk','region_Roanoke','region_Sacramento','region_SanDiego','region_SanFrancisco','region_Seattle','region_SouthCarolina','region_SouthCentral',\n 'region_Southeast','region_Spokane','region_StLouis','region_Syracuse','region_Tampa','region_TotalUS','region_West',\n 'region_WestTexNewMexico']","c02b400f":"# For model_lr_s_3 : Seasons, Type and Region\nfeatures_lr_s_3 = ['type_organic','seasons_spring', 'seasons_summer','seasons_winter','region_Atlanta','region_BaltimoreWashington','region_Boise',\n 'region_Boston','region_BuffaloRochester','region_California','region_Charlotte','region_Chicago','region_CincinnatiDayton',\n 'region_Columbus','region_DallasFtWorth','region_Denver','region_Detroit','region_GrandRapids','region_GreatLakes','region_HarrisburgScranton','region_HartfordSpringfield',\n 'region_Houston','region_Indianapolis','region_Jacksonville','region_LasVegas','region_LosAngeles','region_Louisville','region_MiamiFtLauderdale',\n 'region_Midsouth','region_Nashville','region_NewOrleansMobile','region_NewYork','region_Northeast','region_NorthernNewEngland','region_Orlando',\n 'region_Philadelphia','region_PhoenixTucson','region_Pittsburgh','region_Plains','region_Portland','region_RaleighGreensboro',\n 'region_RichmondNorfolk','region_Roanoke','region_Sacramento','region_SanDiego','region_SanFrancisco','region_Seattle','region_SouthCarolina','region_SouthCentral',\n 'region_Southeast','region_Spokane','region_StLouis','region_Syracuse','region_Tampa','region_TotalUS','region_West',\n 'region_WestTexNewMexico']","0f376f6e":"# For model_lr_m_1 : Months and Type\nfeatures_lr_m_1 = ['type_organic','month_2', 'month_3', 'month_4', 'month_5','month_6', \n                   'month_7', 'month_8', 'month_9', 'month_10', 'month_11','month_12']","fb3c5787":"# For model_lr_m_2 : Months and Region\nfeatures_lr_m_2 = ['type_organic','month_2', 'month_3', 'month_4', 'month_5','month_6', 'month_7', 'month_8', 'month_9', 'month_10', 'month_11','month_12','region_Atlanta','region_BaltimoreWashington','region_Boise',\n 'region_Boston','region_BuffaloRochester','region_California','region_Charlotte','region_Chicago','region_CincinnatiDayton',\n 'region_Columbus','region_DallasFtWorth','region_Denver','region_Detroit','region_GrandRapids','region_GreatLakes','region_HarrisburgScranton','region_HartfordSpringfield',\n 'region_Houston','region_Indianapolis','region_Jacksonville','region_LasVegas','region_LosAngeles','region_Louisville','region_MiamiFtLauderdale',\n 'region_Midsouth','region_Nashville','region_NewOrleansMobile','region_NewYork','region_Northeast','region_NorthernNewEngland','region_Orlando',\n 'region_Philadelphia','region_PhoenixTucson','region_Pittsburgh','region_Plains','region_Portland','region_RaleighGreensboro',\n 'region_RichmondNorfolk','region_Roanoke','region_Sacramento','region_SanDiego','region_SanFrancisco','region_Seattle','region_SouthCarolina','region_SouthCentral',\n 'region_Southeast','region_Spokane','region_StLouis','region_Syracuse','region_Tampa','region_TotalUS','region_West',\n 'region_WestTexNewMexico']","ec3beac3":"# For model_lr_m_3 : Months, Type and Region\nfeatures_lr_m_3 = ['type_organic','type_organic','month_2', 'month_3', 'month_4', 'month_5','month_6', 'month_7', 'month_8', 'month_9', 'month_10', 'month_11','month_12','region_Atlanta','region_BaltimoreWashington','region_Boise',\n 'region_Boston','region_BuffaloRochester','region_California','region_Charlotte','region_Chicago','region_CincinnatiDayton',\n 'region_Columbus','region_DallasFtWorth','region_Denver','region_Detroit','region_GrandRapids','region_GreatLakes','region_HarrisburgScranton','region_HartfordSpringfield',\n 'region_Houston','region_Indianapolis','region_Jacksonville','region_LasVegas','region_LosAngeles','region_Louisville','region_MiamiFtLauderdale',\n 'region_Midsouth','region_Nashville','region_NewOrleansMobile','region_NewYork','region_Northeast','region_NorthernNewEngland','region_Orlando',\n 'region_Philadelphia','region_PhoenixTucson','region_Pittsburgh','region_Plains','region_Portland','region_RaleighGreensboro',\n 'region_RichmondNorfolk','region_Roanoke','region_Sacramento','region_SanDiego','region_SanFrancisco','region_Seattle','region_SouthCarolina','region_SouthCentral',\n 'region_Southeast','region_Spokane','region_StLouis','region_Syracuse','region_Tampa','region_TotalUS','region_West',\n 'region_WestTexNewMexico']","b3c34d33":"# For model_lr_tr : Type and Region\nfeatures_lr_tr = ['type_organic','region_Atlanta','region_BaltimoreWashington','region_Boise',\n 'region_Boston','region_BuffaloRochester','region_California','region_Charlotte','region_Chicago','region_CincinnatiDayton',\n 'region_Columbus','region_DallasFtWorth','region_Denver','region_Detroit','region_GrandRapids','region_GreatLakes','region_HarrisburgScranton','region_HartfordSpringfield',\n 'region_Houston','region_Indianapolis','region_Jacksonville','region_LasVegas','region_LosAngeles','region_Louisville','region_MiamiFtLauderdale',\n 'region_Midsouth','region_Nashville','region_NewOrleansMobile','region_NewYork','region_Northeast','region_NorthernNewEngland','region_Orlando',\n 'region_Philadelphia','region_PhoenixTucson','region_Pittsburgh','region_Plains','region_Portland','region_RaleighGreensboro',\n 'region_RichmondNorfolk','region_Roanoke','region_Sacramento','region_SanDiego','region_SanFrancisco','region_Seattle','region_SouthCarolina','region_SouthCentral',\n 'region_Southeast','region_Spokane','region_StLouis','region_Syracuse','region_Tampa','region_TotalUS','region_West',\n 'region_WestTexNewMexico']","e9e55cdf":"# For model_lr_s_1 to model_lr_s_3\/model_lr_tr\nX_train_model_lr_s_1, X_test_model_lr_s_1, y_train_model_lr_s_1, y_test_model_lr_s_1 = train_test_split(av_dummies[features_lr_s_1], av_dummies[target], test_size=0.2, random_state=0)\nX_train_model_lr_s_2, X_test_model_lr_s_2, y_train_model_lr_s_2, y_test_model_lr_s_2 = train_test_split(av_dummies[features_lr_s_2], av_dummies[target], test_size=0.2, random_state=0)\nX_train_model_lr_s_3, X_test_model_lr_s_3, y_train_model_lr_s_3, y_test_model_lr_s_3 = train_test_split(av_dummies[features_lr_s_3], av_dummies[target], test_size=0.2, random_state=0)","dd5ec0de":"# For model_lr_m_s1 to model_lr_m_s3\/model_lr_tr\nX_train_model_lr_s_s1, X_test_model_lr_s_s1, y_train_model_lr_s_s1, y_test_model_lr_s_s1 = train_test_split(av_dummies[features_lr_s_1], av_dummies[target], test_size=0.2, stratify=av['seasons'], random_state=0)\nX_train_model_lr_s_s2, X_test_model_lr_s_s2, y_train_model_lr_s_s2, y_test_model_lr_s_s2 = train_test_split(av_dummies[features_lr_s_2], av_dummies[target], test_size=0.2, stratify=av['seasons'], random_state=0)\nX_train_model_lr_s_s3, X_test_model_lr_s_s3, y_train_model_lr_s_s3, y_test_model_lr_s_s3 = train_test_split(av_dummies[features_lr_s_3], av_dummies[target], test_size=0.2, stratify=av['seasons'], random_state=0)\n","e7200ae6":"# For model_lr_m_1 to model_lr_m_3\nX_train_model_lr_m_1, X_test_model_lr_m_1, y_train_model_lr_m_1, y_test_model_lr_m_1 = train_test_split(av_m_dummies[features_lr_m_1], av_m_dummies[target], test_size=0.2, random_state=0)\nX_train_model_lr_m_2, X_test_model_lr_m_2, y_train_model_lr_m_2, y_test_model_lr_m_2 = train_test_split(av_m_dummies[features_lr_m_2], av_m_dummies[target], test_size=0.2, random_state=0)\nX_train_model_lr_m_3, X_test_model_lr_m_3, y_train_model_lr_m_3, y_test_model_lr_m_3 = train_test_split(av_m_dummies[features_lr_m_3], av_m_dummies[target], test_size=0.2, random_state=0)","0539f5bf":"# For model_lr_m_s1 to model_lr_m_s3\nX_train_model_lr_m_s1, X_test_model_lr_m_s1, y_train_model_lr_m_s1, y_test_model_lr_m_s1 = train_test_split(av_m_dummies[features_lr_m_1], av_m_dummies[target], test_size=0.2, stratify=av_m['month'], random_state=0)\nX_train_model_lr_m_s2, X_test_model_lr_m_s2, y_train_model_lr_m_s2, y_test_model_lr_m_s2 = train_test_split(av_m_dummies[features_lr_m_2], av_m_dummies[target], test_size=0.2, stratify=av_m['month'], random_state=0)\nX_train_model_lr_m_s3, X_test_model_lr_m_s3, y_train_model_lr_m_s3, y_test_model_lr_m_s3 = train_test_split(av_m_dummies[features_lr_m_3], av_m_dummies[target], test_size=0.2, stratify=av_m['month'], random_state=0)","09541ac5":"X_train_model_lr_tr, X_test_model_lr_tr, y_train_model_lr_tr, y_test_model_lr_tr = train_test_split(av_dummies[features_lr_tr], av_dummies[target], test_size=0.2, random_state=0)\nX_train_model_lr_tr_s, X_test_model_lr_tr_s, y_train_model_lr_tr_s, y_test_model_lr_tr_s = train_test_split(av_dummies[features_lr_tr], av_dummies[target], test_size=0.2, stratify=av['region'], random_state=0)","1018438b":"model_lr_s_1 = LinearRegression(fit_intercept=True)\nmodel_lr_s_2 = LinearRegression(fit_intercept=True)\nmodel_lr_s_3 = LinearRegression(fit_intercept=True)","df1e2103":"model_lr_s_s1 = LinearRegression(fit_intercept=True)\nmodel_lr_s_s2 = LinearRegression(fit_intercept=True)\nmodel_lr_s_s3 = LinearRegression(fit_intercept=True)","27640561":"model_lr_m_1 = LinearRegression(fit_intercept=True)\nmodel_lr_m_2 = LinearRegression(fit_intercept=True)\nmodel_lr_m_3 = LinearRegression(fit_intercept=True)","c2bb50f8":"model_lr_m_s1 = LinearRegression(fit_intercept=True)\nmodel_lr_m_s2 = LinearRegression(fit_intercept=True)\nmodel_lr_m_s3 = LinearRegression(fit_intercept=True)","eff72bce":"model_lr_tr = LinearRegression(fit_intercept=True)\nmodel_lr_tr_s = LinearRegression(fit_intercept=True)","58f38ce5":"model_lr_s_1.fit(X_train_model_lr_s_1, y_train_model_lr_s_1)\nmodel_lr_s_2.fit(X_train_model_lr_s_2, y_train_model_lr_s_2)\nmodel_lr_s_3.fit(X_train_model_lr_s_3, y_train_model_lr_s_3)","6272708a":"model_lr_s_s1.fit(X_train_model_lr_s_s1, y_train_model_lr_s_s1)\nmodel_lr_s_s2.fit(X_train_model_lr_s_s2, y_train_model_lr_s_s2)\nmodel_lr_s_s3.fit(X_train_model_lr_s_s3, y_train_model_lr_s_s3)","fe5e0b7c":"model_lr_m_1.fit(X_train_model_lr_m_1, y_train_model_lr_m_1)\nmodel_lr_m_2.fit(X_train_model_lr_m_2, y_train_model_lr_m_2)\nmodel_lr_m_3.fit(X_train_model_lr_m_3, y_train_model_lr_m_3)","6f0011a1":"model_lr_m_s1.fit(X_train_model_lr_m_s1, y_train_model_lr_m_s1)\nmodel_lr_m_s2.fit(X_train_model_lr_m_s2, y_train_model_lr_m_s2)\nmodel_lr_m_s3.fit(X_train_model_lr_m_s3, y_train_model_lr_m_s3)","2049dcb7":"model_lr_tr.fit(X_train_model_lr_tr, y_train_model_lr_tr)\nmodel_lr_tr_s.fit(X_train_model_lr_tr_s, y_train_model_lr_tr_s)","1eece84b":"print('Intercept model_lr_s_1:',model_lr_s_1.intercept_)\nprint('Intercept model_lr_s_2:',model_lr_s_2.intercept_)    \nprint('Intercept model_lr_s_3:',model_lr_s_3.intercept_)\nprint('\\n') \nprint('Intercept model_lr_s_s1:',model_lr_s_s1.intercept_)\nprint('Intercept model_lr_s_s2:',model_lr_s_s2.intercept_)    \nprint('Intercept model_lr_s_s3:',model_lr_s_s3.intercept_)\nprint('\\n') \nprint('Intercept model_lr_m_1:',model_lr_s_1.intercept_)\nprint('Intercept model_lr_m_2:',model_lr_s_2.intercept_)    \nprint('Intercept model_lr_m_3:',model_lr_s_3.intercept_)\nprint('\\n') \nprint('Intercept model_lr_m_s1:',model_lr_m_s1.intercept_)\nprint('Intercept model_lr_m_s2:',model_lr_m_s2.intercept_)    \nprint('Intercept model_lr_m_s3:',model_lr_m_s3.intercept_)\nprint('\\n') \nprint('Intercept model_lr_tr:',model_lr_tr.intercept_)\nprint('Intercept model_lr_tr_s:',model_lr_tr_s.intercept_)\nprint('\\n') \nprint('Coefficients model_lr_s_1:',model_lr_s_1.coef_) \nprint('Coefficients model_lr_s_2:',model_lr_s_2.coef_) \nprint('Coefficients model_lr_s_3:',model_lr_s_2.coef_) \nprint('\\n')  \nprint('Coefficients model_lr_s_s1:',model_lr_s_s1.coef_) \nprint('Coefficients model_lr_s_s2:',model_lr_s_s2.coef_) \nprint('Coefficients model_lr_s_s3:',model_lr_s_s3.coef_) \nprint('\\n') \nprint('Coefficients model_lr_m_1:',model_lr_m_1.coef_) \nprint('Coefficients model_lr_m_2:',model_lr_m_2.coef_) \nprint('Coefficients model_lr_m_3:',model_lr_m_2.coef_) \nprint('\\n')  \nprint('Coefficients model_lr_m_s1:',model_lr_m_s1.coef_) \nprint('Coefficients model_lr_m_s2:',model_lr_m_s2.coef_) \nprint('Coefficients model_lr_m_s3:',model_lr_m_s3.coef_)\nprint('\\n')   \nprint('Coefficients model_lr_tr:',model_lr_tr.coef_) \nprint('Coefficients model_lr_tr_s:',model_lr_tr_s.coef_)","6d234364":"# model_lr_s_1 tp model_lr_s_3: Training\ny_pred_train_model_lr_s_1 = model_lr_s_1.predict(X_train_model_lr_s_1)\ny_pred_train_model_lr_s_2 = model_lr_s_2.predict(X_train_model_lr_s_2) \ny_pred_train_model_lr_s_3 = model_lr_s_3.predict(X_train_model_lr_s_3)    \n\n# model_lr_s_s1 to model_lr_s_s3 : Training\ny_pred_train_model_lr_s_s1 = model_lr_s_s1.predict(X_train_model_lr_s_s1)\ny_pred_train_model_lr_s_s2 = model_lr_s_s2.predict(X_train_model_lr_s_s2) \ny_pred_train_model_lr_s_s3 = model_lr_s_s3.predict(X_train_model_lr_s_s3)    \n\n# model_lr_m_1 tp model_lr_m_3: Training\ny_pred_train_model_lr_m_1 = model_lr_m_1.predict(X_train_model_lr_m_1)\ny_pred_train_model_lr_m_2 = model_lr_m_2.predict(X_train_model_lr_m_2) \ny_pred_train_model_lr_m_3 = model_lr_m_3.predict(X_train_model_lr_m_3)    \n\n# model_lr_m_s1 to model_lr_m_s3 : Training\ny_pred_train_model_lr_m_s1 = model_lr_m_s1.predict(X_train_model_lr_m_s1)\ny_pred_train_model_lr_m_s2 = model_lr_m_s2.predict(X_train_model_lr_m_s2) \ny_pred_train_model_lr_m_s3 = model_lr_m_s3.predict(X_train_model_lr_m_s3)   \n\n# model_lr_tr to model_lr_tr_s : Training\ny_pred_train_model_lr_tr = model_lr_tr.predict(X_train_model_lr_tr)\ny_pred_train_model_lr_tr_s = model_lr_tr_s.predict(X_train_model_lr_tr_s)","e4c69c8f":"# model_lr_s_1 to model_lr_s_3 :Test\ny_pred_test_model_lr_s_1 = model_lr_s_1.predict(X_test_model_lr_s_1) \ny_pred_test_model_lr_s_2 = model_lr_s_2.predict(X_test_model_lr_s_2)\ny_pred_test_model_lr_s_3 = model_lr_s_3.predict(X_test_model_lr_s_3)  \n\n# model_lr_s_s1 to model_lr_s_s3 :Test\ny_pred_test_model_lr_s_s1 = model_lr_s_s1.predict(X_test_model_lr_s_s1) \ny_pred_test_model_lr_s_s2 = model_lr_s_s2.predict(X_test_model_lr_s_s2)\ny_pred_test_model_lr_s_s3 = model_lr_s_s3.predict(X_test_model_lr_s_s3)\n\n# model_lr_m_1 to model_lr_m_3 :Test\ny_pred_test_model_lr_m_1 = model_lr_m_1.predict(X_test_model_lr_m_1) \ny_pred_test_model_lr_m_2 = model_lr_m_2.predict(X_test_model_lr_m_2)\ny_pred_test_model_lr_m_3 = model_lr_m_3.predict(X_test_model_lr_m_3)  \n\n# model_lr_m_s1 to model_lr_m_s4 : Test\ny_pred_test_model_lr_m_s1 = model_lr_m_1.predict(X_test_model_lr_m_s1) \ny_pred_test_model_lr_m_s2 = model_lr_m_2.predict(X_test_model_lr_m_s2)\ny_pred_test_model_lr_m_s3 = model_lr_m_3.predict(X_test_model_lr_m_s3) \n\n# model_lr_tr to model_lr_tr_s : Test\ny_pred_test_model_lr_tr = model_lr_tr.predict(X_test_model_lr_tr) \ny_pred_test_model_lr_tr_s = model_lr_tr_s.predict(X_test_model_lr_tr_s)\n","465c9454":"# MAE on Train Set: model_lr_s_1 to model_lr_s_3\nMAE_train_model_lr_s_1 = metrics.mean_absolute_error(y_train_model_lr_s_1, y_pred_train_model_lr_s_1)\nMAE_train_model_lr_s_2 = metrics.mean_absolute_error(y_train_model_lr_s_2, y_pred_train_model_lr_s_2)\nMAE_train_model_lr_s_3 = metrics.mean_absolute_error(y_train_model_lr_s_3, y_pred_train_model_lr_s_3)\n\n# MAE on Train Set: model_lr_s_s1 to model_lr_s_s3\nMAE_train_model_lr_s_s1 = metrics.mean_absolute_error(y_train_model_lr_s_s1, y_pred_train_model_lr_s_s1)\nMAE_train_model_lr_s_s2 = metrics.mean_absolute_error(y_train_model_lr_s_s2, y_pred_train_model_lr_s_s2)\nMAE_train_model_lr_s_s3 = metrics.mean_absolute_error(y_train_model_lr_s_s3, y_pred_train_model_lr_s_s3)\n\n# MAE on Train Set: model_lr_m_1 to model_lr_m_3\nMAE_train_model_lr_m_1 = metrics.mean_absolute_error(y_train_model_lr_m_1, y_pred_train_model_lr_m_1)\nMAE_train_model_lr_m_2 = metrics.mean_absolute_error(y_train_model_lr_m_2, y_pred_train_model_lr_m_2)\nMAE_train_model_lr_m_3 = metrics.mean_absolute_error(y_train_model_lr_m_3, y_pred_train_model_lr_m_3)\n\n# MAE on Train Set: model_lr_m_s1 to model_lr_m_s3\nMAE_train_model_lr_m_s1 = metrics.mean_absolute_error(y_train_model_lr_m_s1, y_pred_train_model_lr_m_s1)\nMAE_train_model_lr_m_s2 = metrics.mean_absolute_error(y_train_model_lr_m_s2, y_pred_train_model_lr_m_s2)\nMAE_train_model_lr_m_s3 = metrics.mean_absolute_error(y_train_model_lr_m_s3, y_pred_train_model_lr_m_s3)\n\n# MAE on Train Set: model_lr_tr to model_lr_tr_s\nMAE_train_model_lr_tr = metrics.mean_absolute_error(y_train_model_lr_tr, y_pred_train_model_lr_tr)\nMAE_train_model_lr_tr_s = metrics.mean_absolute_error(y_train_model_lr_tr_s, y_pred_train_model_lr_tr_s)","72f5931a":"# MAE on Test Set: model_lr_s_1 to model_lr_s_3\nMAE_test_model_lr_s_1 = metrics.mean_absolute_error(y_test_model_lr_s_1, y_pred_test_model_lr_s_1)\nMAE_test_model_lr_s_2 = metrics.mean_absolute_error(y_test_model_lr_s_2, y_pred_test_model_lr_s_2)\nMAE_test_model_lr_s_3 = metrics.mean_absolute_error(y_test_model_lr_s_3, y_pred_test_model_lr_s_3)\n\n# MAE on Test Set: model_lr_s_s1 to model_lr_s_s3\nMAE_test_model_lr_s_s1 = metrics.mean_absolute_error(y_test_model_lr_s_s1, y_pred_test_model_lr_s_s1)\nMAE_test_model_lr_s_s2 = metrics.mean_absolute_error(y_test_model_lr_s_s2, y_pred_test_model_lr_s_s2)\nMAE_test_model_lr_s_s3 = metrics.mean_absolute_error(y_test_model_lr_s_s3, y_pred_test_model_lr_s_s3)\n\n# MAE on Test Set: model_lr_m_1 to model_lr_m_3\nMAE_test_model_lr_m_1 = metrics.mean_absolute_error(y_test_model_lr_m_1, y_pred_test_model_lr_m_1)\nMAE_test_model_lr_m_2 = metrics.mean_absolute_error(y_test_model_lr_m_2, y_pred_test_model_lr_m_2)\nMAE_test_model_lr_m_3 = metrics.mean_absolute_error(y_test_model_lr_m_3, y_pred_test_model_lr_m_3)\n\n# MAE on Test Set: model_lr_m_s1 to model_lr_m_s3\nMAE_test_model_lr_m_s1 = metrics.mean_absolute_error(y_test_model_lr_m_s1, y_pred_test_model_lr_m_s1)\nMAE_test_model_lr_m_s2 = metrics.mean_absolute_error(y_test_model_lr_m_s2, y_pred_test_model_lr_m_s2)\nMAE_test_model_lr_m_s3 = metrics.mean_absolute_error(y_test_model_lr_m_s3, y_pred_test_model_lr_m_s3)\n\n# MAE on Test Set: model_lr_tr to model_lr_tr_s\nMAE_test_model_lr_tr = metrics.mean_absolute_error(y_test_model_lr_tr, y_pred_test_model_lr_tr)\nMAE_test_model_lr_tr_s = metrics.mean_absolute_error(y_test_model_lr_tr_s, y_pred_test_model_lr_tr_s)","c16f6fad":"# MAE for model_lr_s_1 to model_lr_s_3\nprint('MAE for training set of model_lr_s_1 is {}'.format(MAE_train_model_lr_s_1))\nprint('MAE for test     set of model_lr_s_1 is {}'.format(MAE_test_model_lr_s_1))\nprint('\\n')\nprint('MAE for training set of model_lr_s_2 is {}'.format(MAE_train_model_lr_s_2))\nprint('MAE for TEST     set of model_lr_s_2 is {}'.format(MAE_test_model_lr_s_2))\nprint('\\n')\nprint('MAE for training set of model_lr_s_3 is {}'.format(MAE_train_model_lr_s_3))\nprint('MAE for TEST     set of model_lr_s_3 is {}'.format(MAE_test_model_lr_s_3))\nprint('\\n')\n# MAE for model_lr_s_s1 to model_lr_s_s3\nprint('MAE for training set of model_lr_s_s1 is {}'.format(MAE_train_model_lr_s_s1))\nprint('MAE for test     set of model_lr_s_s1 is {}'.format(MAE_test_model_lr_s_s1))\nprint('\\n')\nprint('MAE for training set of model_lr_s_s2 is {}'.format(MAE_train_model_lr_s_s2))\nprint('MAE for TEST     set of model_lr_s_s2 is {}'.format(MAE_test_model_lr_s_s2))\nprint('\\n')\nprint('MAE for training set of model_lr_s_s3 is {}'.format(MAE_train_model_lr_s_s3))\nprint('MAE for TEST     set of model_lr_s_s3 is {}'.format(MAE_test_model_lr_s_s3))\nprint('\\n')\n# MAE for model_lr_m_1 to model_lr_m_3\nprint('MAE for training set of model_lr_m_1 is {}'.format(MAE_train_model_lr_m_1))\nprint('MAE for test     set of model_lr_m_1 is {}'.format(MAE_test_model_lr_m_1))\nprint('\\n')\nprint('MAE for training set of model_lr_m_2 is {}'.format(MAE_train_model_lr_m_2))\nprint('MAE for TEST     set of model_lr_m_2 is {}'.format(MAE_test_model_lr_m_2))\nprint('\\n')\nprint('MAE for training set of model_lr_m_3 is {}'.format(MAE_train_model_lr_m_3))\nprint('MAE for TEST     set of model_lr_m_3 is {}'.format(MAE_test_model_lr_m_3))\nprint('\\n')\n# MAE for model_lr_m_s1 to model_lr_m_s3\nprint('MAE for training set of model_lr_m_s1 is {}'.format(MAE_train_model_lr_m_s1))\nprint('MAE for test     set of model_lr_m_s1 is {}'.format(MAE_test_model_lr_m_s1))\nprint('\\n')\nprint('MAE for training set of model_lr_m_s2 is {}'.format(MAE_train_model_lr_m_s2))\nprint('MAE for TEST     set of model_lr_m_s2 is {}'.format(MAE_test_model_lr_m_s2))\nprint('\\n')\nprint('MAE for training set of model_lr_m_s3 is {}'.format(MAE_train_model_lr_m_s3))\nprint('MAE for TEST     set of model_lr_m_s3 is {}'.format(MAE_test_model_lr_m_s3))\nprint('\\n')\n# MAE for model_lr_tr to model_lr_tr\nprint('MAE for training set of model_lr_tr is {}'.format(MAE_train_model_lr_tr))\nprint('MAE for test     set of model_lr_tr is {}'.format(MAE_test_model_lr_tr))\nprint('\\n')\n# MAE for model_lr_tr to model_lr_tr_s\nprint('MAE for training set of model_lr_tr_s is {}'.format(MAE_train_model_lr_tr_s))\nprint('MAE for test     set of model_lr_tr_s is {}'.format(MAE_test_model_lr_tr_s))","73b5396e":"av['avg_price'].mean()","888fc1df":"# (Multiply by 100 to get percentage)\n# MAPE for model_lr_s_1 to model_lr_s_3 \nMAPE_train_model_lr_s_1 = (MAE_train_model_lr_s_1\/av['avg_price'].mean())*100\nMAPE_train_model_lr_s_2 = (MAE_train_model_lr_s_2\/av['avg_price'].mean())*100\nMAPE_train_model_lr_s_3 = (MAE_train_model_lr_s_3\/av['avg_price'].mean())*100\n\n# MAPE for model_lr_s_s1 to model_lr_s_s3 \nMAPE_train_model_lr_s_s1 = (MAE_train_model_lr_s_s1\/av['avg_price'].mean())*100\nMAPE_train_model_lr_s_s2 = (MAE_train_model_lr_s_s2\/av['avg_price'].mean())*100\nMAPE_train_model_lr_s_s3 = (MAE_train_model_lr_s_s3\/av['avg_price'].mean())*100\n\n# MAPE for model_lr_m_1 to model_lr_m_3 \nMAPE_train_model_lr_m_1 = (MAE_train_model_lr_m_1\/av['avg_price'].mean())*100\nMAPE_train_model_lr_m_2 = (MAE_train_model_lr_m_2\/av['avg_price'].mean())*100\nMAPE_train_model_lr_m_3 = (MAE_train_model_lr_m_3\/av['avg_price'].mean())*100\n\n# MAPE for model_lr_m_s1 to model_lr_m_s3\nMAPE_train_model_lr_m_s1 = (MAE_train_model_lr_m_s1\/av['avg_price'].mean())*100\nMAPE_train_model_lr_m_s2 = (MAE_train_model_lr_m_s2\/av['avg_price'].mean())*100\nMAPE_train_model_lr_m_s3 = (MAE_train_model_lr_m_s3\/av['avg_price'].mean())*100 \n\n# MAPE for model_lr_tr to model_lr_tr_s\nMAPE_train_model_lr_tr = (MAE_train_model_lr_tr\/av['avg_price'].mean())*100\nMAPE_train_model_lr_tr_s = (MAE_train_model_lr_tr_s\/av['avg_price'].mean())*100\n","b5b84563":"# (Multiply by 100 to get percentage)\n# MAPE for model_lr_s_1 to model_lr_s_3 \nMAPE_test_model_lr_s_1 = (MAE_test_model_lr_s_1\/av['avg_price'].mean())*100\nMAPE_test_model_lr_s_2 = (MAE_test_model_lr_s_2\/av['avg_price'].mean())*100\nMAPE_test_model_lr_s_3 = (MAE_test_model_lr_s_3\/av['avg_price'].mean())*100\n\n# MAPE for model_lr_s_s1 to model_lr_s_s3 \nMAPE_test_model_lr_s_s1 = (MAE_test_model_lr_s_s1\/av['avg_price'].mean())*100\nMAPE_test_model_lr_s_s2 = (MAE_test_model_lr_s_s2\/av['avg_price'].mean())*100\nMAPE_test_model_lr_s_s3 = (MAE_test_model_lr_s_s3\/av['avg_price'].mean())*100\n\n# MAPE for model_lr_m_1 to model_lr_m_3 \nMAPE_test_model_lr_m_1 = (MAE_test_model_lr_m_1\/av['avg_price'].mean())*100\nMAPE_test_model_lr_m_2 = (MAE_test_model_lr_m_2\/av['avg_price'].mean())*100\nMAPE_test_model_lr_m_3 = (MAE_test_model_lr_m_3\/av['avg_price'].mean())*100\n\n# MAPE for model_lr_m_s1 to model_lr_m_s3\nMAPE_test_model_lr_m_s1 = (MAE_test_model_lr_m_s1\/av['avg_price'].mean())*100\nMAPE_test_model_lr_m_s2 = (MAE_test_model_lr_m_s2\/av['avg_price'].mean())*100\nMAPE_test_model_lr_m_s3 = (MAE_test_model_lr_m_s3\/av['avg_price'].mean())*100 \n\n# MAPE for model_lr_tr to model_lr_tr_s\nMAPE_test_model_lr_tr = (MAE_test_model_lr_tr\/av['avg_price'].mean())*100\nMAPE_test_model_lr_tr_s = (MAE_test_model_lr_tr_s\/av['avg_price'].mean())*100\n","aec6e2e9":"# MAPE for model_lr_s_1 to model_lr_s_3\nprint('MAPE for training set of model_lr_s_1 is {}'.format(MAPE_train_model_lr_s_1))\nprint('MAPE for test     set of model_lr_s_1 is {}'.format(MAPE_test_model_lr_s_1))\nprint('\\n')\nprint('MAPE for training set of model_lr_s_2 is {}'.format(MAPE_train_model_lr_s_2))\nprint('MAPE for TEST     set of model_lr_s_2 is {}'.format(MAPE_test_model_lr_s_2))\nprint('\\n')\nprint('MAPE for training set of model_lr_s_3 is {}'.format(MAPE_train_model_lr_s_3))\nprint('MAPE for TEST     set of model_lr_s_3 is {}'.format(MAPE_test_model_lr_s_3))\nprint('\\n')\n# MAPE for model_lr_s_s1 to model_lr_s_s3\nprint('MAPE for training set of model_lr_s_s1 is {}'.format(MAPE_train_model_lr_s_s1))\nprint('MAPE for test     set of model_lr_s_s1 is {}'.format(MAPE_test_model_lr_s_s1))\nprint('\\n')\nprint('MAPE for training set of model_lr_s_s2 is {}'.format(MAPE_train_model_lr_s_s2))\nprint('MAPE for TEST     set of model_lr_s_s2 is {}'.format(MAPE_test_model_lr_s_s2))\nprint('\\n')\nprint('MAPE for training set of model_lr_s_s3 is {}'.format(MAPE_train_model_lr_s_s3))\nprint('MAPE for TEST     set of model_lr_s_s3 is {}'.format(MAPE_test_model_lr_s_s3))\nprint('\\n')\n# MAPE for model_lr_m_1 to model_lr_m_3\nprint('MAPE for training set of model_lr_m_1 is {}'.format(MAPE_train_model_lr_m_1))\nprint('MAPE for test     set of model_lr_m_1 is {}'.format(MAPE_test_model_lr_m_1))\nprint('\\n')\nprint('MAPE for training set of model_lr_m_2 is {}'.format(MAPE_train_model_lr_m_2))\nprint('MAPE for TEST     set of model_lr_m_2 is {}'.format(MAPE_test_model_lr_m_2))\nprint('\\n')\nprint('MAPE for training set of model_lr_m_3 is {}'.format(MAPE_train_model_lr_m_3))\nprint('MAPE for TEST     set of model_lr_m_3 is {}'.format(MAPE_test_model_lr_m_3))\nprint('\\n')\n# MAPE for model_lr_m_s1 to model_lr_m_s3\nprint('MAPE for training set of model_lr_m_s1 is {}'.format(MAPE_train_model_lr_m_s1))\nprint('MAPE for test     set of model_lr_m_s1 is {}'.format(MAPE_test_model_lr_m_s1))\nprint('\\n')\nprint('MAPE for training set of model_lr_m_s2 is {}'.format(MAPE_train_model_lr_m_s2))\nprint('MAPE for TEST     set of model_lr_m_s2 is {}'.format(MAPE_test_model_lr_m_s2))\nprint('\\n')\nprint('MAPE for training set of model_lr_m_s3 is {}'.format(MAPE_train_model_lr_m_s3))\nprint('MAPE for TEST     set of model_lr_m_s3 is {}'.format(MAPE_test_model_lr_m_s3))\nprint('\\n')\n# MAPE for model_lr_tr to model_lr_tr\nprint('MAPE for training set of model_lr_tr is {}'.format(MAPE_train_model_lr_tr))\nprint('MAPE for test     set of model_lr_tr is {}'.format(MAPE_test_model_lr_tr))\nprint('\\n')\n# MAPE for model_lr_tr to model_lr_tr\nprint('MAPE for training set of model_lr_tr_s is {}'.format(MAPE_train_model_lr_tr_s))\nprint('MAPE for test     set of model_lr_tr_s is {}'.format(MAPE_test_model_lr_tr_s))","b0538a17":"# MSE on Train Set: model_lr_s_1 to model_lr_s_3\nMSE_train_model_lr_s_1 = metrics.mean_squared_error(y_train_model_lr_s_1, y_pred_train_model_lr_s_1)\nMSE_train_model_lr_s_2 = metrics.mean_squared_error(y_train_model_lr_s_2, y_pred_train_model_lr_s_2)\nMSE_train_model_lr_s_3 = metrics.mean_squared_error(y_train_model_lr_s_3, y_pred_train_model_lr_s_3)\n\n# MSE on Train Set: model_lr_s_s1 to model_lr_s_s3\nMSE_train_model_lr_s_s1 = metrics.mean_squared_error(y_train_model_lr_s_s1, y_pred_train_model_lr_s_s1)\nMSE_train_model_lr_s_s2 = metrics.mean_squared_error(y_train_model_lr_s_s2, y_pred_train_model_lr_s_s2)\nMSE_train_model_lr_s_s3 = metrics.mean_squared_error(y_train_model_lr_s_s3, y_pred_train_model_lr_s_s3)\n\n# MSE on Train Set: model_lr_m_1 to model_lr_m_3\nMSE_train_model_lr_m_1 = metrics.mean_squared_error(y_train_model_lr_m_1, y_pred_train_model_lr_m_1)\nMSE_train_model_lr_m_2 = metrics.mean_squared_error(y_train_model_lr_m_2, y_pred_train_model_lr_m_2)\nMSE_train_model_lr_m_3 = metrics.mean_squared_error(y_train_model_lr_m_3, y_pred_train_model_lr_m_3)\n\n# MSE on Train Set: model_lr_m_s1 to model_lr_m_s3\nMSE_train_model_lr_m_s1 = metrics.mean_squared_error(y_train_model_lr_m_s1, y_pred_train_model_lr_m_s1)\nMSE_train_model_lr_m_s2 = metrics.mean_squared_error(y_train_model_lr_m_s2, y_pred_train_model_lr_m_s2)\nMSE_train_model_lr_m_s3 = metrics.mean_squared_error(y_train_model_lr_m_s3, y_pred_train_model_lr_m_s3)\n\n# MSE on Train Set: model_lr_tr to model_lr_tr_s\nMSE_train_model_lr_tr = metrics.mean_squared_error(y_train_model_lr_tr, y_pred_train_model_lr_tr)\nMSE_train_model_lr_tr_s = metrics.mean_squared_error(y_train_model_lr_tr_s, y_pred_train_model_lr_tr_s)","92dd9cce":"# MSE on Test Set: model_lr_s_1 to model_lr_s_3\nMSE_test_model_lr_s_1 = metrics.mean_squared_error(y_test_model_lr_s_1, y_pred_test_model_lr_s_1)\nMSE_test_model_lr_s_2 = metrics.mean_squared_error(y_test_model_lr_s_2, y_pred_test_model_lr_s_2)\nMSE_test_model_lr_s_3 = metrics.mean_squared_error(y_test_model_lr_s_3, y_pred_test_model_lr_s_3)\n\n# MSE on Test Set: model_lr_s_s1 to model_lr_s_s3\nMSE_test_model_lr_s_s1 = metrics.mean_squared_error(y_test_model_lr_s_s1, y_pred_test_model_lr_s_s1)\nMSE_test_model_lr_s_s2 = metrics.mean_squared_error(y_test_model_lr_s_s2, y_pred_test_model_lr_s_s2)\nMSE_test_model_lr_s_s3 = metrics.mean_squared_error(y_test_model_lr_s_s3, y_pred_test_model_lr_s_s3)\n\n# MSE on Test Set: model_lr_m_1 to model_lr_m_3\nMSE_test_model_lr_m_1 = metrics.mean_squared_error(y_test_model_lr_m_1, y_pred_test_model_lr_m_1)\nMSE_test_model_lr_m_2 = metrics.mean_squared_error(y_test_model_lr_m_2, y_pred_test_model_lr_m_2)\nMSE_test_model_lr_m_3 = metrics.mean_squared_error(y_test_model_lr_m_3, y_pred_test_model_lr_m_3)\n\n# MSE on Test Set: model_lr_m_s1 to model_lr_m_s3\nMSE_test_model_lr_m_s1 = metrics.mean_squared_error(y_test_model_lr_m_s1, y_pred_test_model_lr_m_s1)\nMSE_test_model_lr_m_s2 = metrics.mean_squared_error(y_test_model_lr_m_s2, y_pred_test_model_lr_m_s2)\nMSE_test_model_lr_m_s3 = metrics.mean_squared_error(y_test_model_lr_m_s3, y_pred_test_model_lr_m_s3)\n\n# MSE on Test Set: model_lr_tr to model_lr_tr_s\nMSE_test_model_lr_tr = metrics.mean_squared_error(y_test_model_lr_tr, y_pred_test_model_lr_tr)\nMSE_test_model_lr_tr_s = metrics.mean_squared_error(y_test_model_lr_tr_s, y_pred_test_model_lr_tr_s)","f0a9356b":"# MSE for model_lr_s_1 to model_lr_s_3\nprint('MSE for training set of model_lr_s_1 is {}'.format(MSE_train_model_lr_s_1))\nprint('MSE for test     set of model_lr_s_1 is {}'.format(MSE_test_model_lr_s_1))\nprint('\\n')\nprint('MSE for training set of model_lr_s_2 is {}'.format(MSE_train_model_lr_s_2))\nprint('MSE for TEST     set of model_lr_s_2 is {}'.format(MSE_test_model_lr_s_2))\nprint('\\n')\nprint('MSE for training set of model_lr_s_3 is {}'.format(MSE_train_model_lr_s_3))\nprint('MSE for TEST     set of model_lr_s_3 is {}'.format(MSE_test_model_lr_s_3))\nprint('\\n')\n# MSE for model_lr_s_s1 to model_lr_s_s3\nprint('MSE for training set of model_lr_s_s1 is {}'.format(MSE_train_model_lr_s_s1))\nprint('MSE for test     set of model_lr_s_s1 is {}'.format(MSE_test_model_lr_s_s1))\nprint('\\n')\nprint('MSE for training set of model_lr_s_s2 is {}'.format(MSE_train_model_lr_s_s2))\nprint('MSE for TEST     set of model_lr_s_s2 is {}'.format(MSE_test_model_lr_s_s2))\nprint('\\n')\nprint('MSE for training set of model_lr_s_s3 is {}'.format(MSE_train_model_lr_s_s3))\nprint('MSE for TEST     set of model_lr_s_s3 is {}'.format(MSE_test_model_lr_s_s3))\nprint('\\n')\n# MSE for model_lr_m_1 to model_lr_m_3\nprint('MSE for training set of model_lr_m_1 is {}'.format(MSE_train_model_lr_m_1))\nprint('MSE for test     set of model_lr_m_1 is {}'.format(MSE_test_model_lr_m_1))\nprint('\\n')\nprint('MSE for training set of model_lr_m_2 is {}'.format(MSE_train_model_lr_m_2))\nprint('MSE for TEST     set of model_lr_m_2 is {}'.format(MSE_test_model_lr_m_2))\nprint('\\n')\nprint('MSE for training set of model_lr_m_3 is {}'.format(MSE_train_model_lr_m_3))\nprint('MSE for TEST     set of model_lr_m_3 is {}'.format(MSE_test_model_lr_m_3))\nprint('\\n')\n# MSE for model_lr_m_s1 to model_lr_m_s3\nprint('MSE for training set of model_lr_m_s1 is {}'.format(MSE_train_model_lr_m_s1))\nprint('MSE for test     set of model_lr_m_s1 is {}'.format(MSE_test_model_lr_m_s1))\nprint('\\n')\nprint('MSE for training set of model_lr_m_s2 is {}'.format(MSE_train_model_lr_m_s2))\nprint('MSE for TEST     set of model_lr_m_s2 is {}'.format(MSE_test_model_lr_m_s2))\nprint('\\n')\nprint('MSE for training set of model_lr_m_s3 is {}'.format(MSE_train_model_lr_m_s3))\nprint('MSE for TEST     set of model_lr_m_s3 is {}'.format(MSE_test_model_lr_m_s3))\nprint('\\n')\n# MSE for model_lr_tr to model_lr_tr\nprint('MSE for training set of model_lr_tr is {}'.format(MSE_train_model_lr_tr))\nprint('MSE for test     set of model_lr_tr is {}'.format(MSE_test_model_lr_tr))\nprint('\\n')\n# MSE for model_lr_tr to model_lr_tr_s\nprint('MSE for training set of model_lr_tr_s is {}'.format(MSE_train_model_lr_tr_s))\nprint('MSE for test     set of model_lr_tr_S is {}'.format(MSE_test_model_lr_tr_s))","5638789b":"# (Multiply by 100 to get percentage)\n# MSPE for model_lr_s_1 to model_lr_s_3 \nMSPE_train_model_lr_s_1 = (MSE_train_model_lr_s_1\/av['avg_price'].mean())*100\nMSPE_train_model_lr_s_2 = (MSE_train_model_lr_s_2\/av['avg_price'].mean())*100\nMSPE_train_model_lr_s_3 = (MSE_train_model_lr_s_3\/av['avg_price'].mean())*100\n\n# MSPE for model_lr_s_s1 to model_lr_s_s3 \nMSPE_train_model_lr_s_s1 = (MSE_train_model_lr_s_s1\/av['avg_price'].mean())*100\nMSPE_train_model_lr_s_s2 = (MSE_train_model_lr_s_s2\/av['avg_price'].mean())*100\nMSPE_train_model_lr_s_s3 = (MSE_train_model_lr_s_s3\/av['avg_price'].mean())*100\n\n# MSPE for model_lr_m_1 to model_lr_m_3 \nMSPE_train_model_lr_m_1 = (MSE_train_model_lr_m_1\/av['avg_price'].mean())*100\nMSPE_train_model_lr_m_2 = (MSE_train_model_lr_m_2\/av['avg_price'].mean())*100\nMSPE_train_model_lr_m_3 = (MSE_train_model_lr_m_3\/av['avg_price'].mean())*100\n\n# MSPE for model_lr_m_s1 to model_lr_m_s3\nMSPE_train_model_lr_m_s1 = (MSE_train_model_lr_m_s1\/av['avg_price'].mean())*100\nMSPE_train_model_lr_m_s2 = (MSE_train_model_lr_m_s2\/av['avg_price'].mean())*100\nMSPE_train_model_lr_m_s3 = (MSE_train_model_lr_m_s3\/av['avg_price'].mean())*100 \n\n# MSPE for model_lr_tr to model_lr_tr_s\nMSPE_train_model_lr_tr = (MSE_train_model_lr_tr\/av['avg_price'].mean())*100\nMSPE_train_model_lr_tr_s = (MSE_train_model_lr_tr_s\/av['avg_price'].mean())*100\n","0779ae5e":"# (Multiply by 100 to get percentage)\n# MSPE for model_lr_s_1 to model_lr_s_3 \nMSPE_test_model_lr_s_1 = (MSE_test_model_lr_s_1\/av['avg_price'].mean())*100\nMSPE_test_model_lr_s_2 = (MSE_test_model_lr_s_2\/av['avg_price'].mean())*100\nMSPE_test_model_lr_s_3 = (MSE_test_model_lr_s_3\/av['avg_price'].mean())*100\n\n# MSPE for model_lr_s_s1 to model_lr_s_s3 \nMSPE_test_model_lr_s_s1 = (MSE_test_model_lr_s_s1\/av['avg_price'].mean())*100\nMSPE_test_model_lr_s_s2 = (MSE_test_model_lr_s_s2\/av['avg_price'].mean())*100\nMSPE_test_model_lr_s_s3 = (MSE_test_model_lr_s_s3\/av['avg_price'].mean())*100\n\n# MSPE for model_lr_m_1 to model_lr_m_3 \nMSPE_test_model_lr_m_1 = (MSE_test_model_lr_m_1\/av['avg_price'].mean())*100\nMSPE_test_model_lr_m_2 = (MSE_test_model_lr_m_2\/av['avg_price'].mean())*100\nMSPE_test_model_lr_m_3 = (MSE_test_model_lr_m_3\/av['avg_price'].mean())*100\n\n# MSPE for model_lr_m_s1 to model_lr_m_s3\nMSPE_test_model_lr_m_s1 = (MSE_test_model_lr_m_s1\/av['avg_price'].mean())*100\nMSPE_test_model_lr_m_s2 = (MSE_test_model_lr_m_s2\/av['avg_price'].mean())*100\nMSPE_test_model_lr_m_s3 = (MSE_test_model_lr_m_s3\/av['avg_price'].mean())*100 \n\n# MSPE for model_lr_tr to model_lr_tr_s\nMSPE_test_model_lr_tr = (MSE_test_model_lr_tr\/av['avg_price'].mean())*100\nMSPE_test_model_lr_tr_s = (MSE_test_model_lr_tr_s\/av['avg_price'].mean())*100\n","38d4d80d":"# MSPE for model_lr_s_1 to model_lr_s_3\nprint('MSPE for training set of model_lr_s_1 is {}'.format(MSPE_train_model_lr_s_1))\nprint('MSPE for test     set of model_lr_s_1 is {}'.format(MSPE_test_model_lr_s_1))\nprint('\\n')\nprint('MSPE for training set of model_lr_s_2 is {}'.format(MSPE_train_model_lr_s_2))\nprint('MSPE for TEST     set of model_lr_s_2 is {}'.format(MSPE_test_model_lr_s_2))\nprint('\\n')\nprint('MSPE for training set of model_lr_s_3 is {}'.format(MSPE_train_model_lr_s_3))\nprint('MSPE for TEST     set of model_lr_s_3 is {}'.format(MSPE_test_model_lr_s_3))\nprint('\\n')\n# MSPE for model_lr_s_s1 to model_lr_s_s3\nprint('MSPE for training set of model_lr_s_s1 is {}'.format(MSPE_train_model_lr_s_s1))\nprint('MSPE for test     set of model_lr_s_s1 is {}'.format(MSPE_test_model_lr_s_s1))\nprint('\\n')\nprint('MSPE for training set of model_lr_s_s2 is {}'.format(MSPE_train_model_lr_s_s2))\nprint('MSPE for TEST     set of model_lr_s_s2 is {}'.format(MSPE_test_model_lr_s_s2))\nprint('\\n')\nprint('MSPE for training set of model_lr_s_s3 is {}'.format(MSPE_train_model_lr_s_s3))\nprint('MSPE for TEST     set of model_lr_s_s3 is {}'.format(MSPE_test_model_lr_s_s3))\nprint('\\n')\n# MSPE for model_lr_m_1 to model_lr_m_3\nprint('MSPE for training set of model_lr_m_1 is {}'.format(MSPE_train_model_lr_m_1))\nprint('MSPE for test     set of model_lr_m_1 is {}'.format(MSPE_test_model_lr_m_1))\nprint('\\n')\nprint('MSPE for training set of model_lr_m_2 is {}'.format(MSPE_train_model_lr_m_2))\nprint('MSPE for TEST     set of model_lr_m_2 is {}'.format(MSPE_test_model_lr_m_2))\nprint('\\n')\nprint('MSPE for training set of model_lr_m_3 is {}'.format(MSPE_train_model_lr_m_3))\nprint('MSPE for TEST     set of model_lr_m_3 is {}'.format(MSPE_test_model_lr_m_3))\nprint('\\n')\n# MSPE for model_lr_m_s1 to model_lr_m_s3\nprint('MSPE for training set of model_lr_m_s1 is {}'.format(MSPE_train_model_lr_m_s1))\nprint('MSPE for test     set of model_lr_m_s1 is {}'.format(MSPE_test_model_lr_m_s1))\nprint('\\n')\nprint('MSPE for training set of model_lr_m_s2 is {}'.format(MSPE_train_model_lr_m_s2))\nprint('MSPE for TEST     set of model_lr_m_s2 is {}'.format(MSPE_test_model_lr_m_s2))\nprint('\\n')\nprint('MSPE for training set of model_lr_m_s3 is {}'.format(MSPE_train_model_lr_m_s3))\nprint('MSPE for TEST     set of model_lr_m_s3 is {}'.format(MSPE_test_model_lr_m_s3))\nprint('\\n')\n# MSPE for model_lr_tr to model_lr_tr\nprint('MSPE for training set of model_lr_tr is {}'.format(MSPE_train_model_lr_tr))\nprint('MSPE for test     set of model_lr_tr is {}'.format(MSPE_test_model_lr_tr))\nprint('\\n')\n# MSPE for model_lr_tr to model_lr_tr_s\nprint('MSPE for training set of model_lr_tr_s is {}'.format(MSPE_train_model_lr_tr_s))\nprint('MSPE for test     set of model_lr_tr_S is {}'.format(MSPE_test_model_lr_tr_s))","42b3f250":"# RMSE on Train Set: model_lr_s_1 to model_lr_s_3\nRMSE_train_model_lr_s_1 = np.sqrt(metrics.mean_squared_error(y_train_model_lr_s_1, y_pred_train_model_lr_s_1))\nRMSE_train_model_lr_s_2 = np.sqrt(metrics.mean_squared_error(y_train_model_lr_s_2, y_pred_train_model_lr_s_2))\nRMSE_train_model_lr_s_3 = np.sqrt(metrics.mean_squared_error(y_train_model_lr_s_3, y_pred_train_model_lr_s_3))\n\n# RMSE on Train Set: model_lr_s_s1 to model_lr_s_s3\nRMSE_train_model_lr_s_s1 = np.sqrt(metrics.mean_squared_error(y_train_model_lr_s_s1, y_pred_train_model_lr_s_s1))\nRMSE_train_model_lr_s_s2 = np.sqrt(metrics.mean_squared_error(y_train_model_lr_s_s2, y_pred_train_model_lr_s_s2))\nRMSE_train_model_lr_s_s3 = np.sqrt(metrics.mean_squared_error(y_train_model_lr_s_s3, y_pred_train_model_lr_s_s3))\n\n# RMSE on Train Set: model_lr_m_1 to model_lr_m_3\nRMSE_train_model_lr_m_1 = np.sqrt(metrics.mean_squared_error(y_train_model_lr_m_1, y_pred_train_model_lr_m_1))\nRMSE_train_model_lr_m_2 = np.sqrt(metrics.mean_squared_error(y_train_model_lr_m_2, y_pred_train_model_lr_m_2))\nRMSE_train_model_lr_m_3 = np.sqrt(metrics.mean_squared_error(y_train_model_lr_m_3, y_pred_train_model_lr_m_3))\n\n# RMSE on Train Set: model_lr_m_s1 to model_lr_m_s3\nRMSE_train_model_lr_m_s1 = np.sqrt(metrics.mean_squared_error(y_train_model_lr_m_s1, y_pred_train_model_lr_m_s1))\nRMSE_train_model_lr_m_s2 = np.sqrt(metrics.mean_squared_error(y_train_model_lr_m_s2, y_pred_train_model_lr_m_s2))\nRMSE_train_model_lr_m_s3 = np.sqrt(metrics.mean_squared_error(y_train_model_lr_m_s3, y_pred_train_model_lr_m_s3))\n\n# RMSE on Train Set: model_lr_tr to model_lr_tr_s\nRMSE_train_model_lr_tr = np.sqrt(metrics.mean_squared_error(y_train_model_lr_tr, y_pred_train_model_lr_tr))\nRMSE_train_model_lr_tr_s = np.sqrt(metrics.mean_squared_error(y_train_model_lr_tr_s, y_pred_train_model_lr_tr_s))","33666393":"# RMSE on Test Set: model_lr_s_1 to model_lr_s_3\nRMSE_test_model_lr_s_1 = np.sqrt(metrics.mean_squared_error(y_test_model_lr_s_1, y_pred_test_model_lr_s_1))\nRMSE_test_model_lr_s_2 = np.sqrt(metrics.mean_squared_error(y_test_model_lr_s_2, y_pred_test_model_lr_s_2))\nRMSE_test_model_lr_s_3 = np.sqrt(metrics.mean_squared_error(y_test_model_lr_s_3, y_pred_test_model_lr_s_3))\n\n# RMSE on Test Set: model_lr_s_s1 to model_lr_s_s3\nRMSE_test_model_lr_s_s1 = np.sqrt(metrics.mean_squared_error(y_test_model_lr_s_s1, y_pred_test_model_lr_s_s1))\nRMSE_test_model_lr_s_s2 = np.sqrt(metrics.mean_squared_error(y_test_model_lr_s_s2, y_pred_test_model_lr_s_s2))\nRMSE_test_model_lr_s_s3 = np.sqrt(metrics.mean_squared_error(y_test_model_lr_s_s3, y_pred_test_model_lr_s_s3))\n\n# RMSE on Test Set: model_lr_m_1 to model_lr_m_3\nRMSE_test_model_lr_m_1 = np.sqrt(metrics.mean_squared_error(y_test_model_lr_m_1, y_pred_test_model_lr_m_1))\nRMSE_test_model_lr_m_2 = np.sqrt(metrics.mean_squared_error(y_test_model_lr_m_2, y_pred_test_model_lr_m_2))\nRMSE_test_model_lr_m_3 = np.sqrt(metrics.mean_squared_error(y_test_model_lr_m_3, y_pred_test_model_lr_m_3))\n\n# RMSE on Test Set: model_lr_m_s1 to model_lr_m_s3\nRMSE_test_model_lr_m_s1 = np.sqrt(metrics.mean_squared_error(y_test_model_lr_m_s1, y_pred_test_model_lr_m_s1))\nRMSE_test_model_lr_m_s2 = np.sqrt(metrics.mean_squared_error(y_test_model_lr_m_s2, y_pred_test_model_lr_m_s2))\nRMSE_test_model_lr_m_s3 = np.sqrt(metrics.mean_squared_error(y_test_model_lr_m_s3, y_pred_test_model_lr_m_s3))\n\n# RMSE on Test Set: model_lr_tr to model_lr_tr_s\nRMSE_test_model_lr_tr = np.sqrt(metrics.mean_squared_error(y_test_model_lr_tr, y_pred_test_model_lr_tr))\nRMSE_test_model_lr_tr_s = np.sqrt(metrics.mean_squared_error(y_test_model_lr_tr_s, y_pred_test_model_lr_tr_s))","05e0d1b8":"# RMSE for model_lr_s_1 to model_lr_s_3\nprint('RMSE for training set of model_lr_s_1 is {}'.format(RMSE_train_model_lr_s_1))\nprint('RMSE for test     set of model_lr_s_1 is {}'.format(RMSE_test_model_lr_s_1))\nprint('\\n')\nprint('RMSE for training set of model_lr_s_2 is {}'.format(RMSE_train_model_lr_s_2))\nprint('RMSE for TEST     set of model_lr_s_2 is {}'.format(RMSE_test_model_lr_s_2))\nprint('\\n')\nprint('RMSE for training set of model_lr_s_3 is {}'.format(RMSE_train_model_lr_s_3))\nprint('RMSE for TEST     set of model_lr_s_3 is {}'.format(RMSE_test_model_lr_s_3))\nprint('\\n')\n# RMSE for model_lr_s_s1 to model_lr_s_s3\nprint('RMSE for training set of model_lr_s_s1 is {}'.format(RMSE_train_model_lr_s_s1))\nprint('RMSE for test     set of model_lr_s_s1 is {}'.format(RMSE_test_model_lr_s_s1))\nprint('\\n')\nprint('RMSE for training set of model_lr_s_s2 is {}'.format(RMSE_train_model_lr_s_s2))\nprint('RMSE for TEST     set of model_lr_s_s2 is {}'.format(RMSE_test_model_lr_s_s2))\nprint('\\n')\nprint('RMSE for training set of model_lr_s_s3 is {}'.format(RMSE_train_model_lr_s_s3))\nprint('RMSE for TEST     set of model_lr_s_s3 is {}'.format(RMSE_test_model_lr_s_s3))\nprint('\\n')\n# RMSE for model_lr_m_1 to model_lr_m_3\nprint('RMSE for training set of model_lr_m_1 is {}'.format(RMSE_train_model_lr_m_1))\nprint('RMSE for test     set of model_lr_m_1 is {}'.format(RMSE_test_model_lr_m_1))\nprint('\\n')\nprint('RMSE for training set of model_lr_m_2 is {}'.format(RMSE_train_model_lr_m_2))\nprint('RMSE for TEST     set of model_lr_m_2 is {}'.format(RMSE_test_model_lr_m_2))\nprint('\\n')\nprint('RMSE for training set of model_lr_m_3 is {}'.format(RMSE_train_model_lr_m_3))\nprint('RMSE for TEST     set of model_lr_m_3 is {}'.format(RMSE_test_model_lr_m_3))\nprint('\\n')\n# RMSE for model_lr_m_s1 to model_lr_m_s3\nprint('RMSE for training set of model_lr_m_s1 is {}'.format(RMSE_train_model_lr_m_s1))\nprint('RMSE for test     set of model_lr_m_s1 is {}'.format(RMSE_test_model_lr_m_s1))\nprint('\\n')\nprint('RMSE for training set of model_lr_m_s2 is {}'.format(RMSE_train_model_lr_m_s2))\nprint('RMSE for TEST     set of model_lr_m_s2 is {}'.format(RMSE_test_model_lr_m_s2))\nprint('\\n')\nprint('RMSE for training set of model_lr_m_s3 is {}'.format(RMSE_train_model_lr_m_s3))\nprint('RMSE for TEST     set of model_lr_m_s3 is {}'.format(RMSE_test_model_lr_m_s3))\nprint('\\n')\n# RMSE for model_lr_tr to model_lr_tr\nprint('RMSE for training set of model_lr_tr is {}'.format(RMSE_train_model_lr_tr))\nprint('RMSE for test     set of model_lr_tr is {}'.format(RMSE_test_model_lr_tr))\nprint('\\n')\n# RMSE for model_lr_tr to model_lr_tr_s\nprint('RMSE for training set of model_lr_tr_s is {}'.format(RMSE_train_model_lr_tr_s))\nprint('RMSE for test     set of model_lr_tr_s is {}'.format(RMSE_test_model_lr_tr_s))","dd1d32c6":"# (Multiply by 100 to get percentage)\n# RMSPE for model_lr_s_1 to model_lr_s_3 \nRMSPE_train_model_lr_s_1 = (RMSE_train_model_lr_s_1\/av['avg_price'].mean())*100\nRMSPE_train_model_lr_s_2 = (RMSE_train_model_lr_s_2\/av['avg_price'].mean())*100\nRMSPE_train_model_lr_s_3 = (RMSE_train_model_lr_s_3\/av['avg_price'].mean())*100\n\n# RMSPE for model_lr_s_s1 to model_lr_s_s3 \nRMSPE_train_model_lr_s_s1 = (RMSE_train_model_lr_s_s1\/av['avg_price'].mean())*100\nRMSPE_train_model_lr_s_s2 = (RMSE_train_model_lr_s_s2\/av['avg_price'].mean())*100\nRMSPE_train_model_lr_s_s3 = (RMSE_train_model_lr_s_s3\/av['avg_price'].mean())*100\n\n# RMSPE for model_lr_m_1 to model_lr_m_3 \nRMSPE_train_model_lr_m_1 = (RMSE_train_model_lr_m_1\/av['avg_price'].mean())*100\nRMSPE_train_model_lr_m_2 = (RMSE_train_model_lr_m_2\/av['avg_price'].mean())*100\nRMSPE_train_model_lr_m_3 = (RMSE_train_model_lr_m_3\/av['avg_price'].mean())*100\n\n# RMSPE for model_lr_m_s1 to model_lr_m_s3\nRMSPE_train_model_lr_m_s1 = (RMSE_train_model_lr_m_s1\/av['avg_price'].mean())*100\nRMSPE_train_model_lr_m_s2 = (RMSE_train_model_lr_m_s2\/av['avg_price'].mean())*100\nRMSPE_train_model_lr_m_s3 = (RMSE_train_model_lr_m_s3\/av['avg_price'].mean())*100 \n\n# RMSPE for model_lr_tr to model_lr_tr_s\nRMSPE_train_model_lr_tr = (RMSE_train_model_lr_tr\/av['avg_price'].mean())*100\nRMSPE_train_model_lr_tr_s = (RMSE_train_model_lr_tr_s\/av['avg_price'].mean())*100","a3ae84a1":"# (Multiply by 100 to get percentage)\n# RMSPE for model_lr_s_1 to model_lr_s_3 \nRMSPE_test_model_lr_s_1 = (RMSE_test_model_lr_s_1\/av['avg_price'].mean())*100\nRMSPE_test_model_lr_s_2 = (RMSE_test_model_lr_s_2\/av['avg_price'].mean())*100\nRMSPE_test_model_lr_s_3 = (RMSE_test_model_lr_s_3\/av['avg_price'].mean())*100\n\n# RMSPE for model_lr_s_s1 to model_lr_s_s3 \nRMSPE_test_model_lr_s_s1 = (RMSE_test_model_lr_s_s1\/av['avg_price'].mean())*100\nRMSPE_test_model_lr_s_s2 = (RMSE_test_model_lr_s_s2\/av['avg_price'].mean())*100\nRMSPE_test_model_lr_s_s3 = (RMSE_test_model_lr_s_s3\/av['avg_price'].mean())*100\n\n# RMSPE for model_lr_m_1 to model_lr_m_3 \nRMSPE_test_model_lr_m_1 = (RMSE_test_model_lr_m_1\/av['avg_price'].mean())*100\nRMSPE_test_model_lr_m_2 = (RMSE_test_model_lr_m_2\/av['avg_price'].mean())*100\nRMSPE_test_model_lr_m_3 = (RMSE_test_model_lr_m_3\/av['avg_price'].mean())*100\n\n# RMSPE for model_lr_m_s1 to model_lr_m_s3\nRMSPE_test_model_lr_m_s1 = (RMSE_test_model_lr_m_s1\/av['avg_price'].mean())*100\nRMSPE_test_model_lr_m_s2 = (RMSE_test_model_lr_m_s2\/av['avg_price'].mean())*100\nRMSPE_test_model_lr_m_s3 = (RMSE_test_model_lr_m_s3\/av['avg_price'].mean())*100 \n\n# RMSPE for model_lr_tr to model_lr_tr_s\nRMSPE_test_model_lr_tr = (RMSE_test_model_lr_tr\/av['avg_price'].mean())*100\nRMSPE_test_model_lr_tr_s = (RMSE_test_model_lr_tr_s\/av['avg_price'].mean())*100","b031e854":"# RMSPE for model_lr_s_1 to model_lr_s_3\nprint('RMSPE for training set of model_lr_s_1 is {}'.format(RMSPE_train_model_lr_s_1))\nprint('RMSPE for test     set of model_lr_s_1 is {}'.format(RMSPE_test_model_lr_s_1))\nprint('\\n')\nprint('RMSPE for training set of model_lr_s_2 is {}'.format(RMSPE_train_model_lr_s_2))\nprint('RMSPE for TEST     set of model_lr_s_2 is {}'.format(RMSPE_test_model_lr_s_2))\nprint('\\n')\nprint('RMSPE for training set of model_lr_s_3 is {}'.format(RMSPE_train_model_lr_s_3))\nprint('RMSPE for TEST     set of model_lr_s_3 is {}'.format(RMSPE_test_model_lr_s_3))\nprint('\\n')\n# RMSPE for model_lr_s_s1 to model_lr_s_s3\nprint('RMSPE for training set of model_lr_s_s1 is {}'.format(RMSPE_train_model_lr_s_s1))\nprint('RMSPE for test     set of model_lr_s_s1 is {}'.format(RMSPE_test_model_lr_s_s1))\nprint('\\n')\nprint('RMSPE for training set of model_lr_s_s2 is {}'.format(RMSPE_train_model_lr_s_s2))\nprint('RMSPE for TEST     set of model_lr_s_s2 is {}'.format(RMSPE_test_model_lr_s_s2))\nprint('\\n')\nprint('RMSPE for training set of model_lr_s_s3 is {}'.format(RMSPE_train_model_lr_s_s3))\nprint('RMSPE for TEST     set of model_lr_s_s3 is {}'.format(RMSPE_test_model_lr_s_s3))\nprint('\\n')\n# RMSPE for model_lr_m_1 to model_lr_m_3\nprint('RMSPE for training set of model_lr_m_1 is {}'.format(RMSPE_train_model_lr_m_1))\nprint('RMSPE for test     set of model_lr_m_1 is {}'.format(RMSPE_test_model_lr_m_1))\nprint('\\n')\nprint('RMSPE for training set of model_lr_m_2 is {}'.format(RMSPE_train_model_lr_m_2))\nprint('RMSPE for TEST     set of model_lr_m_2 is {}'.format(RMSPE_test_model_lr_m_2))\nprint('\\n')\nprint('RMSPE for training set of model_lr_m_3 is {}'.format(RMSPE_train_model_lr_m_3))\nprint('RMSPE for TEST     set of model_lr_m_3 is {}'.format(RMSPE_test_model_lr_m_3))\nprint('\\n')\n# RMSPE for model_lr_m_s1 to model_lr_m_s3\nprint('RMSPE for training set of model_lr_m_s1 is {}'.format(RMSPE_train_model_lr_m_s1))\nprint('RMSPE for test     set of model_lr_m_s1 is {}'.format(RMSPE_test_model_lr_m_s1))\nprint('\\n')\nprint('RMSPE for training set of model_lr_m_s2 is {}'.format(RMSPE_train_model_lr_m_s2))\nprint('RMSPE for TEST     set of model_lr_m_s2 is {}'.format(RMSPE_test_model_lr_m_s2))\nprint('\\n')\nprint('RMSPE for training set of model_lr_m_s3 is {}'.format(RMSPE_train_model_lr_m_s3))\nprint('RMSPE for TEST     set of model_lr_m_s3 is {}'.format(RMSPE_test_model_lr_m_s3))\nprint('\\n')\n# RMSPE for model_lr_tr to model_lr_tr\nprint('RMSPE for training set of model_lr_tr is {}'.format(RMSPE_train_model_lr_tr))\nprint('RMSPE for test     set of model_lr_tr is {}'.format(RMSPE_test_model_lr_tr))\nprint('\\n')\n# RMSPE for model_lr_tr to model_lr_tr_s\nprint('RMSPE for training set of model_lr_tr_s is {}'.format(RMSPE_train_model_lr_tr_s))\nprint('RMSPE for test     set of model_lr_tr_s is {}'.format(RMSPE_test_model_lr_tr_s))","f0284d66":"# R2 on Train Set: model_lr_s_1 to model_lr_s_3\nR2_train_model_lr_s_1 = metrics.r2_score(y_train_model_lr_s_1, y_pred_train_model_lr_s_1)\nR2_train_model_lr_s_2 = metrics.r2_score(y_train_model_lr_s_2, y_pred_train_model_lr_s_2)\nR2_train_model_lr_s_3 = metrics.r2_score(y_train_model_lr_s_3, y_pred_train_model_lr_s_3)\n\n# R2 on Train Set: model_lr_s_s1 to model_lr_s_s3\nR2_train_model_lr_s_s1 = metrics.r2_score(y_train_model_lr_s_s1, y_pred_train_model_lr_s_s1)\nR2_train_model_lr_s_s2 = metrics.r2_score(y_train_model_lr_s_s2, y_pred_train_model_lr_s_s2)\nR2_train_model_lr_s_s3 = metrics.r2_score(y_train_model_lr_s_s3, y_pred_train_model_lr_s_s3)\n\n# R2 on Train Set: model_lr_m_1 to model_lr_m_3\nR2_train_model_lr_m_1 = metrics.r2_score(y_train_model_lr_m_1, y_pred_train_model_lr_m_1)\nR2_train_model_lr_m_2 = metrics.r2_score(y_train_model_lr_m_2, y_pred_train_model_lr_m_2)\nR2_train_model_lr_m_3 = metrics.r2_score(y_train_model_lr_m_3, y_pred_train_model_lr_m_3)\n\n# R2 on Train Set: model_lr_m_s1 to model_lr_m_s3\nR2_train_model_lr_m_s1 = metrics.r2_score(y_train_model_lr_m_s1, y_pred_train_model_lr_m_s1)\nR2_train_model_lr_m_s2 = metrics.r2_score(y_train_model_lr_m_s2, y_pred_train_model_lr_m_s2)\nR2_train_model_lr_m_s3 = metrics.r2_score(y_train_model_lr_m_s3, y_pred_train_model_lr_m_s3)\n\n# R2 on Train Set: model_lr_tr to model_lr_tr_s\nR2_train_model_lr_tr = metrics.r2_score(y_train_model_lr_tr, y_pred_train_model_lr_tr)\nR2_train_model_lr_tr_s = metrics.r2_score(y_train_model_lr_tr_s, y_pred_train_model_lr_tr_s)","e270b722":"# R2 on Test Set: model_lr_s_1 to model_lr_s_3\nR2_test_model_lr_s_1 = metrics.r2_score(y_test_model_lr_s_1, y_pred_test_model_lr_s_1)\nR2_test_model_lr_s_2 = metrics.r2_score(y_test_model_lr_s_2, y_pred_test_model_lr_s_2)\nR2_test_model_lr_s_3 = metrics.r2_score(y_test_model_lr_s_3, y_pred_test_model_lr_s_3)\n\n# R2 on Test Set: model_lr_s_s1 to model_lr_s_s3\nR2_test_model_lr_s_s1 = metrics.r2_score(y_test_model_lr_s_s1, y_pred_test_model_lr_s_s1)\nR2_test_model_lr_s_s2 = metrics.r2_score(y_test_model_lr_s_s2, y_pred_test_model_lr_s_s2)\nR2_test_model_lr_s_s3 = metrics.r2_score(y_test_model_lr_s_s3, y_pred_test_model_lr_s_s3)\n\n# R2 on Test Set: model_lr_m_1 to model_lr_m_3\nR2_test_model_lr_m_1 = metrics.r2_score(y_test_model_lr_m_1, y_pred_test_model_lr_m_1)\nR2_test_model_lr_m_2 = metrics.r2_score(y_test_model_lr_m_2, y_pred_test_model_lr_m_2)\nR2_test_model_lr_m_3 = metrics.r2_score(y_test_model_lr_m_3, y_pred_test_model_lr_m_3)\n\n# R2 on Test Set: model_lr_m_s1 to model_lr_m_s3\nR2_test_model_lr_m_s1 = metrics.r2_score(y_test_model_lr_m_s1, y_pred_test_model_lr_m_s1)\nR2_test_model_lr_m_s2 = metrics.r2_score(y_test_model_lr_m_s2, y_pred_test_model_lr_m_s2)\nR2_test_model_lr_m_s3 = metrics.r2_score(y_test_model_lr_m_s3, y_pred_test_model_lr_m_s3)\n\n# R2 on Test Set: model_lr_tr to model_lr_tr_s\nR2_test_model_lr_tr = metrics.r2_score(y_test_model_lr_tr, y_pred_test_model_lr_tr)\nR2_test_model_lr_tr_s = metrics.r2_score(y_test_model_lr_tr_s, y_pred_test_model_lr_tr_s)","83a069df":"# R2 for model_lr_s_1 to model_lr_s_3\nprint('R2 for training set of model_lr_s_1 is {}'.format(R2_train_model_lr_s_1))\nprint('R2 for test     set of model_lr_s_1 is {}'.format(R2_test_model_lr_s_1))\nprint('\\n')\nprint('R2 for training set of model_lr_s_2 is {}'.format(R2_train_model_lr_s_2))\nprint('R2 for TEST     set of model_lr_s_2 is {}'.format(R2_test_model_lr_s_2))\nprint('\\n')\nprint('R2 for training set of model_lr_s_3 is {}'.format(R2_train_model_lr_s_3))\nprint('RM2 for TEST     set of model_lr_s_3 is {}'.format(R2_test_model_lr_s_3))\nprint('\\n')\n# R2 for model_lr_s_s1 to model_lr_s_s3\nprint('R2 for training set of model_lr_s_s1 is {}'.format(R2_train_model_lr_s_s1))\nprint('R2 for test     set of model_lr_s_s1 is {}'.format(R2_test_model_lr_s_s1))\nprint('\\n')\nprint('R2 for training set of model_lr_s_s2 is {}'.format(R2_train_model_lr_s_s2))\nprint('R2 for TEST     set of model_lr_s_s2 is {}'.format(R2_test_model_lr_s_s2))\nprint('\\n')\nprint('R2 for training set of model_lr_s_s3 is {}'.format(R2_train_model_lr_s_s3))\nprint('R2 for TEST     set of model_lr_s_s3 is {}'.format(R2_test_model_lr_s_s3))\nprint('\\n')\n# R2 for model_lr_m_1 to model_lr_m_3\nprint('R2 for training set of model_lr_m_1 is {}'.format(R2_train_model_lr_m_1))\nprint('R2 for test     set of model_lr_m_1 is {}'.format(R2_test_model_lr_m_1))\nprint('\\n')\nprint('R2 for training set of model_lr_m_2 is {}'.format(R2_train_model_lr_m_2))\nprint('R2 for TEST     set of model_lr_m_2 is {}'.format(R2_test_model_lr_m_2))\nprint('\\n')\nprint('R2 for training set of model_lr_m_3 is {}'.format(R2_train_model_lr_m_3))\nprint('R2 for TEST     set of model_lr_m_3 is {}'.format(R2_test_model_lr_m_3))\nprint('\\n')\n# R2 for model_lr_m_s1 to model_lr_m_s3\nprint('R2 for training set of model_lr_m_s1 is {}'.format(R2_train_model_lr_m_s1))\nprint('R2 for test     set of model_lr_m_s1 is {}'.format(R2_test_model_lr_m_s1))\nprint('\\n')\nprint('R2 for training set of model_lr_m_s2 is {}'.format(R2_train_model_lr_m_s2))\nprint('R2 for TEST     set of model_lr_m_s2 is {}'.format(R2_test_model_lr_m_s2))\nprint('\\n')\nprint('R2 for training set of model_lr_m_s3 is {}'.format(R2_train_model_lr_m_s3))\nprint('R2 for TEST     set of model_lr_m_s3 is {}'.format(R2_test_model_lr_m_s3))\nprint('\\n')\n# R2 for model_lr_tr to model_lr_tr\nprint('R2 for training set of model_lr_tr is {}'.format(R2_train_model_lr_tr))\nprint('R2 for test     set of model_lr_tr is {}'.format(R2_test_model_lr_tr_s))\nprint('\\n')\n# R2 for model_lr_tr to model_lr_tr_s\nprint('R2 for training set of model_lr_tr_s is {}'.format(R2_train_model_lr_tr_s))\nprint('R2 for test     set of model_lr_tr_s is {}'.format(R2_test_model_lr_tr_s))","4996345b":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import r2_score","5a8f0247":"X_train_model_rf_s, X_test_model_rf_s, y_train_model_rf_s, y_test_model_rf_s = train_test_split(av_dummies[features_lr_s_2], av_dummies[target], test_size=0.2, stratify=av['seasons'],random_state=0)\nX_train_model_rf_m, X_test_model_rf_m, y_train_model_rf_m, y_test_model_rf_m = train_test_split(av_m_dummies[features_lr_m_2], av_m_dummies[target], test_size=0.2, stratify=av_m['month'], random_state=0)","92d086ad":"y_train_model_rf_s.shape","6328dd31":"model_rf_m_train = RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=30,\n           max_features='sqrt', max_leaf_nodes=None,\n           min_impurity_decrease=0.0, min_impurity_split=None,\n           min_samples_leaf=2, min_samples_split=5,\n           min_weight_fraction_leaf=0.0, n_estimators=200, n_jobs=1,\n           oob_score=False, random_state=None, verbose=0, warm_start=False)\nmodel_rf_s_train = RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=30,\n           max_features='sqrt', max_leaf_nodes=None,\n           min_impurity_decrease=0.0, min_impurity_split=None,\n           min_samples_leaf=2, min_samples_split=5,\n           min_weight_fraction_leaf=0.0, n_estimators=200, n_jobs=1,\n           oob_score=False, random_state=None, verbose=0, warm_start=False)\n\nmodel_rf_m_test = RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=30,\n           max_features='sqrt', max_leaf_nodes=None,\n           min_impurity_decrease=0.0, min_impurity_split=None,\n           min_samples_leaf=2, min_samples_split=5,\n           min_weight_fraction_leaf=0.0, n_estimators=200, n_jobs=1,\n           oob_score=False, random_state=None, verbose=0, warm_start=False)\nmodel_rf_s_test = RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=30,\n           max_features='sqrt', max_leaf_nodes=None,\n           min_impurity_decrease=0.0, min_impurity_split=None,\n           min_samples_leaf=2, min_samples_split=5,\n           min_weight_fraction_leaf=0.0, n_estimators=200, n_jobs=1,\n           oob_score=False, random_state=None, verbose=0, warm_start=False)","5cbc425f":"model_rf_s_train.fit(X_train_model_lr_s_s2, y_train_model_lr_s_s2)\nmodel_rf_m_train.fit(X_train_model_lr_m_s2, y_train_model_lr_s_s2)\n\nmodel_rf_s_test.fit(X_test_model_lr_s_s2, y_test_model_lr_s_s2)\nmodel_rf_m_test.fit(X_test_model_lr_m_s2, y_test_model_lr_s_s2)","b2ab2764":"y_pred_train_model_rf_s = model_rf_s_train.predict(X_train_model_lr_s_s2)\ny_pred_train_model_rf_m = model_rf_m_train.predict(X_train_model_lr_m_s2)\n\ny_pred_test_model_rf_s = model_rf_s_test.predict(X_test_model_lr_s_s2)\ny_pred_test_model_rf_m = model_rf_m_test.predict(X_test_model_lr_m_s2)","056c5578":"accuracy_train_model_rf_m = metrics.r2_score(y_train_model_rf_m, y_pred_train_model_rf_m)\naccuracy_test_model_rf_m = metrics.r2_score(y_test_model_rf_m, y_pred_test_model_rf_m)\n\naccuracy_train_model_rf_s = metrics.r2_score(y_train_model_rf_s, y_pred_train_model_rf_s)\naccuracy_test_model_rf_s = metrics.r2_score(y_test_model_rf_s, y_pred_test_model_rf_s)\n\nprint('Accuracy score for accuracy_train_model_rf_s is:', accuracy_train_model_rf_s)\nprint('Accuracy score for accuracy_test_model_rf_s is:', accuracy_test_model_rf_s)\nprint('\\n')\nprint('Accuracy score for accuracy_train_model_rf_m is:', accuracy_train_model_rf_m)\nprint('Accuracy score for accuracy_test_model_rf_m is:', accuracy_test_model_rf_m)","9a32751b":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint as sp_randint\n# parameters for GridSearchC specify parameters and distributions to sample from\nparam_dist = {'bootstrap': [True, False],\n               'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n               'max_features': ['auto', 'sqrt'],\n               'min_samples_leaf': [1, 2, 4],\n               'min_samples_split': [2, 5, 10],\n               'n_estimators': [130, 180, 230]}\n# run randomized search\nn_iter_search = 25","479dc4f9":"rand_search_model_rf_m_train = RandomizedSearchCV(model_rf_m_train, param_distributions = param_dist,n_iter = n_iter_search,n_jobs = -1)\nrand_search_model_rf_m_test  = RandomizedSearchCV(model_rf_m_test, param_distributions = param_dist,n_iter = n_iter_search,n_jobs = -1)\n\nrand_search_model_rf_s_train = RandomizedSearchCV(model_rf_s_train, param_distributions = param_dist,n_iter = n_iter_search,n_jobs = -1)\nrand_search_model_rf_s_test  = RandomizedSearchCV(model_rf_s_test, param_distributions = param_dist,n_iter = n_iter_search,n_jobs = -1)","e5977a89":"rand_search_model_rf_m_train.fit(X_train_model_rf_m, y_train_model_rf_m)\nrand_search_model_rf_m_test.fit(X_test_model_rf_m, y_test_model_rf_m)\n\nrand_search_model_rf_s_train.fit(X_train_model_rf_s, y_train_model_rf_s)\nrand_search_model_rf_s_test.fit(X_test_model_rf_s, y_test_model_rf_s)","54522afa":"RS_y_pred_train_model_rf_s = rand_search_model_rf_s_train.predict(X_train_model_rf_s)\nRS_y_pred_train_model_rf_m = rand_search_model_rf_m_train.predict(X_train_model_rf_m)\n\nRS_y_pred_test_model_rf_s = rand_search_model_rf_s_test.predict(X_test_model_rf_s)\nRS_y_pred_test_model_rf_m = rand_search_model_rf_m_test.predict(X_test_model_rf_m)","bdbeefd9":"\naccuracy_rand_search_model_rf_m_train = r2_score(y_train_model_rf_m, y_pred_train_model_rf_m)\naccuracy_rand_search_model_rf_m_test = r2_score(y_test_model_rf_m, y_pred_test_model_rf_m)\n\naccuracy_rand_search_model_rf_s_train = r2_score(y_train_model_rf_s, y_pred_train_model_rf_s)\naccuracy_rand_search_model_rf_s_test = r2_score(y_test_model_rf_s, y_pred_test_model_rf_s)\n\nprint('Accuracy score for accuracy_rand_search_model_rf_m_train is:', accuracy_rand_search_model_rf_m_train)\nprint('Accuracy score for accuracy_rand_search_model_rf_m_test:', accuracy_rand_search_model_rf_m_test)\nprint('\\n')\nprint('Accuracy score for accuracy_rand_search_model_rf_s_train is:', accuracy_rand_search_model_rf_s_train)\nprint('Accuracy score for accuracy_rand_search_model_rf_s_test is:', accuracy_rand_search_model_rf_s_test)","1477c88f":"### **Finding Mean Absolute Percentage Error**\n- The MAE alone as a number does not convey much meaning.\n- To get a clear picture, convert MAE to MAPE\n- Mean of entire Data is used instead of mean of test\/train set. This gives a fairer result","0caad99b":"# **End of EDA**","2eacab30":"- **Training Set**","4073105e":"## **Effect of Year\/Month on AveragePrice**","2fd23235":"**Observation on Effect of Region on Average Price**\n- Region clearly influence the price.\n- Region influence total volume of Avocado sold.\n- Volume and price are comparable year on year for region.","1ef96ccb":"- model_lr_m_s1 to model_lr_m_s3","c9dc136b":"- **Training Set**","f65c94e0":"## **Effect of Type on Average Price**","2eea2a88":"  - **Training Set**","d9c1866e":"### Missing Data & Null Values\n","9681cdb0":"## **Model Evaluation: R Squared (R2)**","4ce1a836":"**Observations on Effect of Type on Average Price**\n- There are two types of Avocados: Organic and Type\n- Organic is expensive than conventional.\n- Total volume of both types in data is similar.\n- **Further analysis with effect of year and region to be done**","9e52eade":"## - **Model Evaluation: MAE**","2cebdba4":"### **Predicting Avg_Price**","1805e8d3":"**Non Stratifed Data with Seasons**","b0d68c0b":"**Data with Type and Region**","78bbeb90":"- **Training Set**","b16d93e4":"- **Training Set**","645d2c8d":"### **Testing Acuracy of Model**","83254202":"### **Model Evaluation: Mean Squared Error (MSE)**","67c0d556":"- model_lr_s_s1 to model_lr_s_s4","8cb01edc":"### **Observations on MAE and MAPE**\n- **model_lr_m_1 to model_lr_m_3**\n  - Error on Training and Test set is comparable for all models. \n  - Error on Training Set percentage varies from 13.845 to 16.855 for different models.\n  - Error on Test     percentage Set varies from 14.166 to 16.977 different models.\n  - Overall error seems to be high.\n  - Overfitting is not seen.\n- **model_lr_m_s1 to model_lr_m_s3**\n  - Error on Training and Test set is comparable for all models. \n  - Error on Training Set percentage varies from 13.922 to 16.966 for different models.\n  - Error on Test     percentage Set varies from 13.803 to 16.539 different models.\n  - Overall error seems to be high.\n  - Overfitting is not seen.\n\n- Not much difference between the two sets of models where data with seasons were considered","4fc51cd3":"## **Effect of Region on Average Price**","f1fec735":"**Non Stratifed Data with Months**","f266b6bb":"- Model_lr_s_1 has the lowest  overall accuracy\n- In general models based on month has better acuracy than that based on seasons.\n- model_lr_s_s2 and model_lr_s_s3 showed no varaiation in the mertics used for analysis.\n- Following models are selected for analysis using Random Forest Aglgorithm\n  - model_lr_s_s2\n  - model_lr_m_s2","107418bf":"- **Test Set**","9c9e5c67":"## **Problem Statement**\n","a3d9004b":"- **Test Set**","e52ce140":"# **Model Evaluation**","8b5f8084":"### Outliers using **z Score**","24e5d65c":"**Training Set**","938a2c30":"**Observations on Effect of Year\/Month on Average Price**\n- Yearly variation is comparable across 2015-2018.\n- Sesons affect both volume and price of avocado.\n- Volume of type produce year on year is comparable.\n- Sesonal variation affects both volume and price.","957c0570":"### **Splitting Data into Train and Test**","d3ef1638":"- model_lr_tr to model_lr_tr_s","d4cd8910":"### **Outlier Detection**\n- Both IQR and Z score or Standard  Deviation","2cf9f6d4":"## **Observation Summary**\n- Data contains 18249 rows and 13 columns of weekly average of avocado sold.\n- Data contains the date of observation, type of bags, total volume, PUL kind, year of sale, type of avocado and region of produce.\n- Attempt was made to find the factors that influence the average price of avocado and following observations were made:\n  - Price is influenced by type, region and month.\n  - Volume of avocado sold and size of bag does not influence the price.\n  - PUL does not affect the price.\n- The yearly volume and average price is similar for 2015-2017 and varies in 2018.\n- The yearly average price is similar for both type.\n- Average price and volume has higher corelation with the region of produce.\n- There are outliers in the price.\n- Seasonal variation is clearly visible.\n\n## **Actionable Insights**\n- The columns not affecting the price can be dropped from the dataframe.\n- Month may be extracted from the date of observation.\n- Months to be grouped into seasons for better understanding.\n","21fe2057":"### **Model Evaluation: Root Mean Squared Error (RMSE)**","47b16953":"\n---\n<a name = Section5><\/a>\n# **5. Data Pre-Processing**\n---\n[Go back to Index](#Section0)<br>   \n- This section emphasis on performing data manipulation on raw data for further processing and analysis.\n\n- To modify raw data to useable strucuted data you need to verify and manipulate the integrity of the data by:\n  - Renaming Headers & Column Names\n  - Handling missing data,\n  - Handling redundant data,\n  - Handling inconsistent data,\n  - Handling outliers,\n  - Handling typos\n","d61a2eb2":"- **Training Set**","da1d411f":"**Observations on Effect of Volume on Price**\n- Its clear that volume does not affect the prices.\n- Its clear that type of bag does not affect the price.\n- Its clear that PLU of Avocado does not affect the price.\n- Average Price is affected by the month in which its is sold.\n- For some reason 2018 has less volume sold, otherwise the volume is comparable.\n","b38d3bb0":"- **Training Set**","1c5f956b":"- model_lr_m_1 to model_lr_m_3","bd21c8ca":"## **Predicting Target Variable - 'avg_price' using models**","3e777396":"### **Traning of Models**\n model_lr_s_1 to model_lr_s_3","c016f4e4":"**Importing Libraries**","296f7b28":"## **Grouping by Seasons**\n- Its seen that there is clear influence of the month of sale on the price.\n- Its felt that the variation is more seasonal than monthly.\n- Hence, months are being grouped as seasons.","5d951a9d":"## ** Exploratory Data Analysis**\n- Find factors incluencing the price.\n- Compare volume and price by the following:\n  - Type\n  - Year\/Month\n  - Region of Produce\n- Find correlation:\n  - Between price and variables \n  - Between variables to check for multicolinearity.\n- Remove factors not influencing average price.","fc0bdcd8":"**Stratifed Data with Seasons**","938cfae1":"- **Test Set**","87996987":"- model_lr_s_1 to model_lr_s_3","b70933d3":"### **Interpreting Model Intercepts Coeffients**\n- model_lr_s_1 to model_lr_s_3","16fab01b":"# **Model Creation using Random Forest**","c9474aef":"**Non Stratifed Data with Months**","a78cd843":"### Changing dtypes\n- Change to suitable dtypes \n  - Date changed to datetime from object\n- Extract Month from date  ","df938276":"# **Modelling**\n- Total of 14 models will be created \n- **Description of Nomenclature**\n    - lr       : linear regression\n    - s\/m  : Seasons or Months\n    - 1-4      : corresponds to model no\n    - s1.      : Indicates stratifed\n    - tr       : Indicate Time and Region\n- ### **Model with Seasons**\n  - Non Stratified\n    -\tmodel_lr_s_1 : Seasons and Type\n    -\tmodel_lr_s_2 : Seasons and Region\n    -\tmodel_lr_s_3 : Seasons, Type and Region\n  -\tStratified Seasons\n    -\tmodel_lr_s_s1: Seasons and Type\n    -\tmodel_lr_s_s2: Seasons and Region\n    -\tmodel_lr_s_s3: Seasons, Type and Region\n- ###\t**Model with Months**\n  -\tNon Stratified \n    -\tmodel_lr_m_1 : Seasons and Type\n    -\tmodel_lr_m_2 : Seasons and Region\n    -\tmodel_lr_m_3 : Seasons, Type and Region \n  -\tStratified months\n    -\tmodel_lr_m_s1: Seasons and Type\n    -\tmodel_lr_m_s2: Seasons and Region\n    -\tmodel_lr_m_s3: Seasons, Type and Region\n- ### **Type with Regions**\n  -\tmodel_lr_tr : Type and Region\n  - model_lr_tr_s: Type and Region (stratified)\n- ### **Rationale**\n  - Models are divided on the basis of data being stratified or not to cater to seasonal variation.\n  - Feature selection is carried out to bring out the best possible fit for each data set.","7b557dd2":"### **Instatiating the Models**","c746c5a8":"# **MODEL CREATION AND EVALUATION**","3cbf4269":"### **Instantiating the Models**","0bd7fef2":"## **Removing Data**\n- Columns with data that does not influence average price is removed.","2b68e91d":"### Redundant Data\n- Checking & Removing duplicate columns and rows\n- Removing unusable columns","faf7868a":"- Avocado are sourced from over 1000 growers owning over 65,000 acres across California, Mexico, Chile, and Peru.\n- With generations of experience growing, packing, and shipping avocados, they have a deep understanding of the avocado industry.\n- Their aim is to source quality fruit that\u2019s sustainably grown and handled in the most efficient, shortest supply route possible.\n- They want to increase their supply throughout the United States and need to make sure that they are selling their products at the best possible price.\n- Avocado prices have rocketed in recent years by up to 129%, with the average national price in the US of a single Hass avocado reaching $2.10 in 2019, almost doubling in just one year.\n- Due to this uncertainty in the prices, the company is not able to sell their produce at the optimal price.\n- Your task is to predict the optimal price of the avocardo using the previous sales data of avocardo according to different regions.\n\n","dac33209":"# **END OF PROJECT**","b6656547":"- model_lr_m_s1 to model_lr_m_s3","a2d6c032":"- **Test Set**","99733d1a":"# **Model Creation and Evaluation using SEASONS**\n- Use both stratified and non stratified data.\n- **Evaluation**\n  - MAE\/MPAE\n  - MSE\/MPSE\n  - RMSE\/RPMSE\n  - R Squared Error: R2","df1431db":"### **Importing Packages***","b3f9282e":"- model_lr_s_s1 to model_lr_s_s3","48563670":"### Data Normalization\n- use logrthamic scale to normalize data\n","1f722321":"### **Finding Mean Squared Percentage Error (MSPE)**","08e7dd8c":"### **Create DataFrame with Dummies**","67059223":"- **Test Set**","411a5134":"## **Feature Selection for Models**","005534ab":"## **Effect of Volume on Price**","5dd42a65":"### **Spliting of Data**","f6f094c8":"_ **Test Set**","64132fb2":"## **Finding Outliers**\n### Outliers using Std Deviation\n  - 1 SD : 68 % of data\n  - 2 SD : 95 % of data\n  - 3 SD : 97 % of data","735a47cd":"### Finding Outliers using IQR\n- Quartliles\n  - Q1 : 25 % of Data\n  - Q2 : 50 % of Data\n  - Q3 : 75 % of Data\n\n- **IQR = Q3-Q1**\n- Limits\n  - Upper IQR limit : Q3 * 1.5 + Q3\n  - Lower IQR limit : Q1 * 1.5 - Q1\n\n","203ee423":"**Observation on Corelation**\n- Volume and bags are correlated\n- Bags and PUL have  no correlation\n- Effect of year, date need further analysis ","da099a4b":"### Region\n- Count number of region\n- Count number of price data per region","87dbea33":"**Test Set**","2f66fafd":"## **Final Model Selection**\n- Based on EDA and Model Evaluation it is seen that **model_rf_s** has the best accuracy of 67 % on the test data.\n\n- This model has **months** and **region** as the variabeles wtih has stratified the data from months for evaluation.","11e2a212":"### Assumptions\n- From the EDA it is assumed that only factors that affect the average price of avocado are, type, region and season\n- Since there are 54 regions the first attempt is to train and predict the Leniar Regression model without considering the region.","1e012573":"### **Finding Root Mean Squared Precentage Error (RMSPE)**","acea4680":"## **Check for Correlation of all Variable**\n- Check for high correlation for furhter analysis.\n- Check for multicolinearity effect.","49df5b8e":"### **Observation on Outliers**\n- Outliers exist in average price.\n- Regional and Seasonal outliers exists.\n- It is felt that if the outlier are removed, the prediction during peak seasons will be affected.\n- Only 131 values lie outside the threshold.\n- Hence **NOT** removed for further analysis and modeling.","5720027f":"### **Evaluation Method**\n- Create model as mentioned above\n- Evaluave all models to select best fit from categories using seasons and months.\n- Do Random Forest model analysis on the selected best fit data and select the model with least error.","fc3fa698":"- model_lr_m_1 to model_lr_m_3","e163f9ec":"- model_lr_tr_s","dcab7572":"### **Training the Models**","200115d0":"### Rename Headers & Columns\n- Remove gaps in name.\n- Consistent naming convention","20311ce9":"- **Train Set**","68808222":"### **Data Loading and Description**\n- Data provided by INSAID through GitHub\n"}}