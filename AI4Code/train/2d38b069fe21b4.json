{"cell_type":{"aa2c0d46":"code","ec95206e":"code","64656ed2":"code","5dddc2c7":"code","75ef0c0f":"code","8e2631a1":"code","763ca234":"markdown"},"source":{"aa2c0d46":"import os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nimport numpy as np\nimport pandas as pd\nimport keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras import backend as K\nfrom keras.preprocessing import image\nfrom keras.applications.mobilenet import MobileNet\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom keras.models import Model\nimport timeit\nimport pylab as plt\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')\n","ec95206e":"# Reading Data\nd=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\nl=d.iloc[:,0]\ntr=d.iloc[:,1:]\ntr=tr.as_matrix()\n# Reshaping the data so the it can be formatted according to the tensorflow requirements\ntrain_d,test_d,train_l,test_l=train_test_split(tr,l,test_size=0.33)\nimg_rows, img_cols = 28, 28\nif K.image_data_format() == 'channels_first':\n    train_d =  train_d.reshape( train_d.shape[0], 1, img_rows, img_cols)\n    test_d = test_d.reshape(test_d.shape[0], 1, img_rows, img_cols)\n    input_shape = (1, img_rows, img_cols)\nelse:\n    train_d =  train_d.reshape( train_d.shape[0], img_rows, img_cols, 1)\n    test_d = test_d.reshape(test_d.shape[0], img_rows, img_cols, 1)\n    input_shape = (img_rows, img_cols, 1)\ntrain_d = train_d.astype('float32')\ntest_d = test_d.astype('float32')\ntrain_d\/=255\ntest_d\/=255\ntrain_l = keras.utils.to_categorical(train_l, 10)\ntest_l = keras.utils.to_categorical(test_l, 10)\n","64656ed2":"# Creating Model\nmodel = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\nmodel.summary()","5dddc2c7":"# Training the model\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])\nmodel.fit(train_d, train_l,batch_size=128,epochs=50,verbose=1,validation_data=(test_d, test_l))","75ef0c0f":"# Testing the model and making Prediction\nt=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nt = t.as_matrix()\nif K.image_data_format() == 'channels_first':\n     t =  t.reshape(t.shape[0], 1, img_rows, img_cols)\nelse:\n     t = t.reshape(t.shape[0], img_rows, img_cols, 1)\nt = t.astype('float32')\nt \/= 255\nprediction = model.predict(t)\n\nresult = np.argmax(prediction,axis=1)","8e2631a1":"np.savetxt('cnn9931.csv',np.c_[range(1,len(t) + 1),result],delimiter=',',header='ImageId,Label', comments='',fmt='%d')","763ca234":"## My First Kernel in Kaggle. Classifying Digits with a basic CNN model and easy understanble programming"}}