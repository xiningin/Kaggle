{"cell_type":{"91d937fe":"code","99dde6a1":"code","ad140080":"code","d2f678e5":"code","01c57e70":"code","f73b9728":"code","7d5889ed":"code","245331bc":"code","546859f5":"code","62184942":"code","23a6bae3":"code","190965f4":"code","528c2c04":"code","139a605f":"code","bf36068b":"code","31d57150":"code","d18155cf":"code","32b9c457":"code","5d804147":"code","82d004b8":"markdown","cf12bd43":"markdown","054dd83f":"markdown","7c70a99d":"markdown","365abc31":"markdown","4e39ade1":"markdown","1b658613":"markdown","bde6f440":"markdown","efdabd3c":"markdown","d54b45c2":"markdown","83930008":"markdown","81fc8576":"markdown","a3cb6a9f":"markdown","176de454":"markdown","a325d8b2":"markdown","99bd15dd":"markdown","38a36d99":"markdown","bb18b32a":"markdown"},"source":{"91d937fe":"!pip install chart_studio","99dde6a1":"import pandas as pd\nimport plotly.figure_factory as ff\nimport plotly.tools as tl\nimport plotly.graph_objs as go\nimport chart_studio\nimport chart_studio.plotly as py\nimport matplotlib.pyplot as plt\nimport os \nimport folium\nfrom folium import plugins\nimport rasterio as rio\nfrom rasterio.warp import calculate_default_transform, reproject, Resampling\n#import earthpy as et\nfrom pandas.core.frame import DataFrame\nfrom bokeh.io import output_file, output_notebook, show\nfrom bokeh.models import (\n  GeoJSONDataSource, GMapOptions, GMapPlot, ColumnDataSource, Circle,CircleX,Hex, Square, Patches, LabelSet, HoverTool,Legend, LegendItem, Plot, LinearAxis, Grid, LogColorMapper, LinearColorMapper, ColorBar, BasicTicker,\n  TapTool,Range1d, PanTool, WheelZoomTool, BoxSelectTool,OpenURL, ZoomInTool, ZoomOutTool, Arrow, OpenHead, NormalHead, VeeHead, LabelSet, Label\n)\nfrom bokeh.models.mappers import ColorMapper, LinearColorMapper\nfrom bokeh.palettes import Viridis5\n%matplotlib inline","ad140080":"code=pd.read_csv('..\/input\/airport-information\/airport_code.csv')\nfre=pd.read_csv('..\/input\/airport-information\/airport_frequencies.csv')\nfre.head()","d2f678e5":"print('Data shape',code.shape)\ncode.info()","01c57e70":"result = pd.merge(code,fre,on='ident')\nresult.head()","f73b9728":"result.info()","7d5889ed":"# Register for a Plotly account at https:\/\/plot.ly\/feed \u2013 click on \u201csign up.\u201d \n# Generate an API key at https:\/\/plot.ly\/settings\/api \u2013 copy and paste the \u201cAPI Key\u201d and \u201cUsername\u201d fields to the Jupyter Notebook in the appropriate place. \n\nchart_studio.tools.set_credentials_file(username='BONNIEJIN095', api_key='xyfJTwbsthZze1ZNaSkd')\n21\n# The below code selects columns 3 (\"X\", or longitude), 4 (\"Y\", or latitude), and 5 (\"Name\"), which we will use as label. \n# We'll only print the first 100 lines, since this is a big dataset! \n[]\ncode1=code[code['iso_country']=='US']\nnewdata = code1.iloc[0:1500, [3,4,5]]\nnewdata=pd.DataFrame(newdata)\n\ntable = ff.create_table(newdata)\npy.iplot(table, filename='Airport')","245331bc":"chart_studio.tools.set_credentials_file(username='BONNIEJIN095', api_key='xyfJTwbsthZze1ZNaSkd')\nmapbox_accesstoken='pk.eyJ1IjoiYm9ubmllamluMDk1IiwiYSI6ImNrZ3B3aXhrZjAwbGwzMHBkbnU3cGs0ODAifQ.MRqAmhumhCdhN7SfHIPtNg'\n\nmic_data = pd.read_csv('..\/input\/airport-information\/airport_code.csv')\n\nsite_lon=newdata.longitude_deg\nsite_lat=newdata.latitude_deg\nlocations_name=newdata.name\n\ndata = [\n    go.Scattermapbox(\n        lat=site_lat,\n        lon=site_lon,\n        hovertext=locations_name,\n        mode='markers',\n        marker=dict(\n            size=5,\n            color='rgb(255, 0, 0)',\n            opacity=1\n        ),\n        text=locations_name,\n        hoverinfo='text'\n    ),\n    go.Scattermapbox(\n        lat=site_lat,\n        lon=site_lon,\n        hovertext=locations_name,\n        mode='markers',\n        marker=dict(\n            size=8,\n            color='rgb(242, 177, 172)',\n            opacity=0.8\n        ),\n        hoverinfo='text'\n    )]\n\n# Generate a layout of the states, zoomed in so we can see the data points \nlayout = go.Layout(\n    title='Airport',\n    autosize=True,\n    hovermode='closest',\n    showlegend=False,\n    mapbox=dict(\n        accesstoken=mapbox_accesstoken,\n        bearing=0,\n        center=dict(\n            lat=33.38,\n            lon=-84.60\n        ),\n        pitch=0,\n        zoom=2,\n        style='light'\n    ),\n)\n\n# Generate the figure using the iplot function \nfig = go.Figure(layout=layout, data=data)\npy.iplot(fig)","546859f5":"site_lon1=result.longitude_deg\nsite_lat1=result.latitude_deg\nlocations_name1=result.name\n\n\nfig = go.Figure(go.Densitymapbox(lon=site_lon1,\n                                lat= site_lat1,\n                                z= result['frequency_mhz'],\n                                radius=2.5))\nfig.update_layout(mapbox={'accesstoken':mapbox_accesstoken,\n                          'center':{'lon':70,'lat':-86},\n                         'zoom':0.1},margin={'l':0,'r':0,'t':0,'b':0})","62184942":"#set up the map\nm = folium.Map(location=[33.38, -84.60],zoom_start=2)\n\n#set up the values\nsite_lon=newdata.longitude_deg\nsite_lat=newdata.latitude_deg\nlocations_name=newdata.name\n\nfeature_group = folium.FeatureGroup() \n\nfor lat, lng, name in zip(site_lat,site_lon,locations_name): \n    #feature_group.add_child(\n    folium.Marker(\n    location=[lat,lng],\n    popup=name,\n    icon=folium.Icon()\n        ).add_to(m)\n\nm.add_child(feature_group)","23a6bae3":"from folium import plugins\n\nsan_map = folium.Map(location = [30,-80], zoom_start = 2)\n\n# instantiate a mark cluster object for the incidents in the dataframe\nincidents = plugins.MarkerCluster().add_to(san_map)\n\n# loop through the dataframe and add each data point to the mark cluster\nfor lat, lng, label, in zip(result.latitude_deg,result.longitude_deg,result.iso_country):\n    folium.Marker(\n        location=[lat, lng],\n        icon=None,\n        popup=label,\n    ).add_to(incidents)\n\n# add incidents to map\nsan_map.add_child(incidents)","190965f4":"from folium.plugins import HeatMap\n\n# let's start again with a clean copy of the map of San Francisco\nsan_map = folium.Map(location = [30,10], zoom_start = 1.5)\n\n# Convert data format\nheatdata = result[['latitude_deg','longitude_deg']].values.tolist()\n\n# add incidents to map\nsan_map.add_child(HeatMap(heatdata, radius=3))\nsan_map.add_child(folium.LatLngPopup())\nsan_map","528c2c04":"#our dataset doesn't really have suitable data for it,\n#so I'll just use 'frequency_mhz' as an example\n#probably can check what kind of radiao each country using\nresult.plot(kind=\"scatter\", x=\"longitude_deg\", y=\"latitude_deg\",\n    s=fre['frequency_mhz']\/100,\n    label=\"name\",\n    cmap=plt.get_cmap(\"jet\"),\n    colorbar=True, alpha=0.4, figsize=(10,5),\n)\nplt.legend()\nplt.show()","139a605f":"#set up map\nmap_options = GMapOptions(lat=33.38, lng=-84.60, map_type=\"roadmap\", zoom=3)\n\nplot = GMapPlot(x_range=Range1d(), y_range=Range1d(), \n                map_options=map_options)","bf36068b":"# For GMaps to function, Google requires you obtain and enable an API key:\n#https:\/\/developers.google.com\/maps\/documentation\/javascript\/get-api-key\n# Replace the value below with your personal API key:\nplot.api_key = \"AIzaSyBpTpQ_6Lbh5u1zKhwZvAvM_v3VuLlqqUk\"\n\nsize = fre['frequency_mhz'].apply(float)\nsize = size\/15\n\nsource = ColumnDataSource(\n    data=dict(\n        lat=newdata.latitude_deg.tolist(),\n        lon=newdata.longitude_deg.tolist(),\n        size=size.tolist(),\n        color=size.tolist()\n    )\n)\n\nmax_median_value = fre.loc[fre['frequency_mhz'].idxmax()]['frequency_mhz']\nmin_median_value = fre.loc[fre['frequency_mhz'].idxmin()]['frequency_mhz']\n\ncolor_mapper = LinearColorMapper(palette=Viridis5)\n\ncircle = Circle(x=\"lon\", y=\"lat\", size=\"size\", fill_color={'field': 'color', 'transform': color_mapper}, fill_alpha=0.5, line_color=None)\nplot.add_glyph(source, circle)\n\ncolor_bar = ColorBar(color_mapper=color_mapper, ticker=BasicTicker(),\n                     label_standoff=5, border_line_color=None, location=(0,0))\nplot.add_layout(color_bar, 'right')\n\nplot.add_tools(PanTool(), WheelZoomTool(), BoxSelectTool())\n#output_file(\"gmap_plot.html\")\noutput_notebook()\n\nshow(plot)","31d57150":"from mpl_toolkits.basemap import Basemap, cm\nfrom netCDF4 import Dataset as NetCDFFile\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom itertools import chain\n\n#set up the map\ndef draw_map(m, scale=0.2):\n    # draw a shaded-relief image\n    m.shadedrelief(scale=scale)\n    \n    # lats and longs are returned as a dictionary\n    lats = m.drawparallels(np.linspace(-90, 90, 13))\n    lons = m.drawmeridians(np.linspace(-180, 180, 13))\n\n    # keys contain the plt.Line2D instances\n    lat_lines = chain(*(tup[1][0] for tup in lats.items()))\n    lon_lines = chain(*(tup[1][0] for tup in lons.items()))\n    all_lines = chain(lat_lines, lon_lines)\n    \n    # cycle through these lines and set the desired style\n    for line in all_lines:\n        line.set(linestyle='-', alpha=0.3, color='w')","d18155cf":"# Draw the map background\nfig = plt.figure(figsize=(8, 8))\nm = Basemap(projection='ortho', resolution=None,\n            lat_0=40, lon_0=-80)\ndraw_map(m);\n#m.shadedrelief()\n\nnewdata_b = code1.iloc[0:1500, [3,4,5,6,8]]\nlat_b = newdata_b['latitude_deg'].values\nlon_b = newdata_b['longitude_deg'].values\n#population = cities['population_total'].values\nsize_b = newdata_b['elevation_ft'].values\nname_b = newdata_b['iso_country'].values\n\n# scatter location\nx,y=m(list(newdata_b['longitude_deg']),list(newdata_b['latitude_deg']))\nm.scatter(x,y,100, marker='x', color='rosybrown', alpha=0.2)","32b9c457":"result_b=result[result['iso_country']=='US']\n# Extract the data we're interested in\nlat = result['latitude_deg'].values\nlon = result['longitude_deg'].values\nfres = result['frequency_mhz'].values\narea = result['iso_country'].values","5d804147":"from mpl_toolkits.axes_grid1 import make_axes_locatable\n#1. Draw the map background\nfig = plt.figure(figsize=(10, 10),edgecolor='w')\nm = Basemap(projection='lcc', resolution=None,\n            lon_0=0,lat_0=50, lat_1=45,lat_2=55,\n            width=1.6E7, height=1.2E7)\ndraw_map(m)\n\n# 2. scatter city data, with color reflecting population\n# and size reflecting area\nm.scatter(lon, lat, latlon=True, c=fres\/110, marker='x',cmap='Reds', alpha=0.4)\n\n# 3. create colorbar and legend\nplt.colorbar(fraction=0.035, pad=0.04,label=r'$1\/100({\\rm fres})$')\nplt.clim(2, 2)\nplt.title('The frequency_mhz by different color')","82d004b8":"#### **Density Scatter**\nBokeh.plot is a subclass of Plot that simplifies plot creation with default axes, grids, tools, etc. Take scatter as an example here:","cf12bd43":"### Import library","054dd83f":"#### **Density Scatter Map**\nAs I mentioned, this dataset is not that suitable for this, if you have things like population will be better. So here just an example based on radio frequency.\nBut well, you can see there are some area are different from other area, which means they are using different tpyes of radio. So it is not totally useless.","7c70a99d":"### Interactive Maps in Python by folium\nWant to make a nice map in Python? Want to set various parameters freely on the map? Want a flexible interaction experience? Here's a Python god pack for you: Folium.\n\nFolium is built on the data application capability of the Python ecosystem and the mapping capability of the.JS library to manipulate the data in Python and then visualize the folium in the map.\n\nMore flexibility, ability to customize drawing areas, and more variety of presentation forms.","365abc31":"#### **Scatter Map**\nOf course we can set up an real map with scatter.\nColumnDataSource() is an important form of data in Bokeh, is the core of most Bokeh graphs for providing visual data. The ColumnDataSource() method takes a parameter of \"data\", which has three main types:\n* Data is a dictionary\n* Data is the DataFrame for Pandas\n* Data is the groupby object of the DataFrame for Pandas","4e39ade1":"## Map plot - Airport geographical information\n\nPython has some different libraries for map plot like `GeoPandas`, `Basemap`, `Cartopy`, `Geoplotlib`, `gmplot`,`Maplink`,`Foium`,`Ploty` and `Bokeh`\n\nHere I'm going to introduce some libraries:\n* Plotly\n* Folium\n* Bokeh \n* Basemap\n\nIncluding different types of map:\n* Scatter\/Marker\n* Interactive scatter\/marker map\n* Density\/Heatmap\n* Interactive density\/heatmap\n* Others","1b658613":"#### **Density Heatmap With location**\nUse `san_map.add_child(folium.LatLngPopup())` to check every single point on the map by clicking on the map. It can be use on any map and I just put that with this one.\n\n`folium.plugins.HeatMap(data, name=None, min_opacity=0.5, \nmax_zoom=18, max_val=1.0, radius=25, blur=15, gradient=None, \noverlay=True, control=True, show=True, **kwargs)`","bde6f440":"#### **Scatter**\nDraw the airport in the states","efdabd3c":"#### **Density heatmap**\n`Densitymapbox(arg=None, autocolorscale=None, below=None, coloraxis=None, \n              colorbar=None, colorscale=None, customdata=None, customdatasrc=None, \n              hoverinfo=None, hoverinfosrc=None, hoverlabel=None, hovertemplate=None, \n              hovertemplatesrc=None, hovertext=None, hovertextsrc=None, ids=None, \n              idssrc=None, lat=None, latsrc=None, lon=None, lonsrc=None, meta=None, \n              metasrc=None, name=None, opacity=None, radius=None, radiussrc=None, \n              reversescale=None, showscale=None, stream=None, subplot=None, \n              text=None, textsrc=None, uid=None, uirevision=None, visible=None, \n              z=None, zauto=None, zmax=None, zmid=None, zmin=None, zsrc=None, **kwargs)\n`","d54b45c2":"### Data processing\nData processing is not the point of the notbook, so I didn't do too much thing.\nBut here are two important new dataset generate from the original datasets:\n* newdata: the data of airports in the states\n* result: the combined dataset of those two datasets based on the identify number","83930008":"Tips on bokeh, if there any problem show on the map, go to Javascript console, can check the error in there.\n\nAlso about \"For development purposes only\", apperantly, Google Maps is no longer free. You have to associate a credit card so that you can get billed if your site has requests that exceed the $200 credit they give you monthly for free. That is why I get the watermarked maps.","81fc8576":"#### Cluster\/Density Scatter\/Marker\nYou can also use folium.Marker to make cluster of all the points. The point will be more detailed when you zoom in.","a3cb6a9f":"### Interactive Maps in Python by plotly\nPlotly is an online platform for analysis and visualization that has been called \"the most powerful visualization tool of all time\" by netizens. Plotly is powerful enough not only to connect with multiple mainstream graphics software, but also to perform interactive mapping like Excel, with a full range of diagrams.\n\nPlotly supports a variety of Maps. According to the Map types, it can be divided into Scatter Plots, Lines, Choropleth Maps, Density Heatmap, Filled Area, etc. However, if plotted according to the Map type, it can be divided into the Map that Plotly came from and Mapbox Map.","176de454":"I think I will upload more and I'm still working on it.\nThank you somuch:))","a325d8b2":"### Maps in Python by basemap\nBasemap is a subpackage of Matplotlib and is responsible for mapping. Basemap suits the needs of earth scientists, especially oceanographers and meteorologists. Basemap was originally written to help and research climate and weather forecasting","99bd15dd":"### **Maps in Python by Bokeh**\nBokeh is good at making interactive charts, and no less good at showing maps.\nBokeh supports geographic visualization of Google maps and GeoJSON data. The key is dynamic interaction.","38a36d99":"#### **Scatter\/Marker**\n`Marker(location, popup=None, tooltip=None, icon=None, draggable=False, **kwargs)`\n\nYou can also use folium.RegularPolygonMarker to change the shape of the point","bb18b32a":"#### **Scatter map**\n`Scattermapbox(arg=None, below=None, connectgaps=None, customdata=None, \n              customdatasrc=None, fill=None, fillcolor=None, hoverinfo=None, \n              hoverinfosrc=None, hoverlabel=None, hovertemplate=None, \n              hovertemplatesrc=None, hovertext=None, hovertextsrc=None, ids=None, \n              idssrc=None, lat=None, latsrc=None, legendgroup=None, line=None, \n              lon=None, lonsrc=None, marker=None, meta=None, metasrc=None, \n              mode=None, name=None, opacity=None, selected=None, selectedpoints=None, \n              showlegend=None, stream=None, subplot=None, text=None, textfont=None, \n              textposition=None, textsrc=None, uid=None, uirevision=None, \n              unselected=None, visible=None, **kwargs)`\n \n`scatter_mapbox(data_frame, lat=None, lon=None, color=None, text=None, \n               hover_name=None, hover_data=None, size=None, \n               animation_frame=None, animation_group=None, \n               category_orders={}, labels={}, color_discrete_sequence=None, \n               color_discrete_map={}, color_continuous_scale=None, \n               range_color=None, color_continuous_midpoint=None, \n               opacity=None, size_max=None, zoom=8, title=None, \n               template=None, width=None, height=None)`"}}