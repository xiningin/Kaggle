{"cell_type":{"b6ee2b6d":"code","277fa8df":"code","8d7949b6":"code","a2cdb086":"code","661cec79":"code","4f58e392":"code","f749b5d9":"code","7770c3b4":"code","a714f4d2":"code","c2f11fc8":"code","e6118171":"code","f9173024":"code","a21d2194":"code","5308e104":"code","9c039ef4":"code","626ec09b":"code","277b80f5":"code","d6760fa9":"code","877d9766":"code","d383c0c5":"code","ac5def4c":"code","ae89eed4":"code","b0af5601":"code","d35dcc14":"code","7b094557":"code","c5210786":"code","ad8b14f6":"code","900c99e3":"code","fba025a9":"code","0d95993e":"code","63fe2323":"code","fd38ac49":"code","c256a17c":"code","21bc0956":"code","77eaa9d1":"code","927cac19":"code","b8d25a1c":"code","e8624283":"code","3a9553b4":"code","2b27f348":"code","36a9a244":"code","d4b1cbbf":"code","383cc1a4":"code","c0dada0b":"code","db5ae56d":"code","9915a1d5":"code","f230d580":"code","371a1670":"code","526705fd":"code","515c19c2":"code","fe67fe42":"code","cc12be7c":"code","bc98d927":"code","5cdbf841":"code","d63a3219":"code","49e62ebf":"code","d9c29d99":"code","25a5d499":"code","7de816e2":"code","9779f4ac":"code","83c8574e":"code","73476849":"code","0a3cbd0b":"code","88c6e612":"code","fc86c282":"code","2bb871d9":"code","844ca7d4":"code","1116a011":"code","046ccb06":"code","c98553c0":"code","eeb1258a":"code","8e07a129":"code","e476bcec":"code","fecee941":"code","018a79e8":"code","2a72e46f":"code","f4ea2922":"code","4a600634":"code","05bc91b9":"code","b3f8ba6e":"code","6ac00ee3":"code","f318a4e0":"code","cff3923b":"code","10652a04":"code","030a5a2c":"code","5c5dac7c":"code","c8c949b1":"code","faff9669":"code","6dd41326":"code","29c4ae97":"markdown","c1ca22f6":"markdown","ba06f261":"markdown","03cf53e6":"markdown","63530709":"markdown","3604b0fd":"markdown","8c855aee":"markdown","dcf84f14":"markdown","a4b92dff":"markdown","53b2ac30":"markdown","f039b68a":"markdown","12263e9b":"markdown","4ae2f4bb":"markdown","5d6a62c5":"markdown","a84b1cab":"markdown","108f1913":"markdown","ba31b62d":"markdown","620c5382":"markdown","dfc82dc9":"markdown","1707814e":"markdown","566c874d":"markdown","9cdc93db":"markdown","41ddea17":"markdown","6edb237a":"markdown","b07e2652":"markdown","79c95cf7":"markdown","1de29824":"markdown","3a7b0b5d":"markdown","49c45476":"markdown","4755cedb":"markdown","962b9a17":"markdown","5d7e4b66":"markdown","2f61cff7":"markdown","1f92d8ad":"markdown","a8c11790":"markdown","ba08a372":"markdown","53d398cb":"markdown","885093c8":"markdown","ec7e33ec":"markdown","f10036d0":"markdown","aa279cb2":"markdown"},"source":{"b6ee2b6d":"import pandas as pd\nimport numpy as np\npd.set_option('max_columns',500)\npd.set_option('max_rows',500)","277fa8df":"dataset = pd.read_excel(\"..\/input\/covid19\/dataset.xlsx\",index_col = 0)","8d7949b6":"dataset.shape","a2cdb086":"dataset.columns","661cec79":"dataset.columns = [x.replace(\"-\",\" \").replace(\" \",\"_\") for x in dataset.columns]","4f58e392":"dataset['SARS_Cov_2_exam_result'] = dataset['SARS_Cov_2_exam_result'].replace(['negative','positive'], [0,1])","f749b5d9":"dataset.columns.values","7770c3b4":"dataset = dataset.drop(columns = dataset.columns[2:5])","a714f4d2":"dataset.shape","c2f11fc8":"dataset.index.duplicated().sum() # filtering by patient id","e6118171":"dataset['SARS_Cov_2_exam_result'].isnull().sum()","f9173024":"positive = dataset['SARS_Cov_2_exam_result'].value_counts(normalize = True)[1]\nnegative = dataset['SARS_Cov_2_exam_result'].value_counts(normalize = True)[0]","a21d2194":"print(\"percentage of positive exams : {0:.3f}\".format(positive * 100))\nprint(\"percentage of negative exams : {0:.3f}\".format(negative * 100))","5308e104":"dataset.head()","9c039ef4":"dataset.describe()","626ec09b":"from sklearn.preprocessing import LabelEncoder","277b80f5":"columns_to_be_encoded = []\nfor column in dataset.columns:\n    if dataset[column].dtype == 'O':\n        columns_to_be_encoded.append(column)","d6760fa9":"columns_to_be_encoded","877d9766":"labeled = dataset[columns_to_be_encoded]\n\nlabeled = labeled.astype(\"str\").apply(LabelEncoder().fit_transform).where(~labeled.isna(), labeled)","d383c0c5":"dataset = dataset.drop(columns = columns_to_be_encoded)","ac5def4c":"dataset = dataset.join(labeled)","ae89eed4":"dataset['Respiratory_Syncytial_Virus'].value_counts()","b0af5601":"import missingno as msno #lib to visu missing data\/","d35dcc14":"print('data nullity distribution')\nbar = msno.bar(dataset,figsize=(15,8),inline = True,color = (0,0,0));","7b094557":"to_be_checked = []\nfor column in dataset.columns:\n    if dataset[column].isnull().sum() == len(dataset):\n        to_be_checked.append(column)","c5210786":"to_be_checked","ad8b14f6":"dataset = dataset.drop(columns = to_be_checked)","900c99e3":"dataset.shape","fba025a9":"dataset.head()","0d95993e":"to_be_checked = []\ncovid_posi = dataset.loc[dataset['SARS_Cov_2_exam_result'] == 1]\nfor column in covid_posi.columns:\n    if covid_posi[column].isnull().sum() == len(covid_posi):\n        to_be_checked.append(column)","63fe2323":"to_be_checked","fd38ac49":"dataset = dataset.drop(columns = to_be_checked)","c256a17c":"dataset.shape","21bc0956":"dataset.shape","77eaa9d1":"dataset.head()","927cac19":"to_be_checked = []\nfor column in dataset.columns:\n    if dataset[column].isnull().sum()\/len(dataset) >= 0.90:\n        to_be_checked.append(column)","b8d25a1c":"len(to_be_checked)","e8624283":"dataset = dataset.drop(columns = to_be_checked)","3a9553b4":"corr = dataset.corr().abs()\ncorr['SARS_Cov_2_exam_result']","2b27f348":"# Selecionando o tri\u00e2ngulo de cima da matriz de correla\u00e7\u00e3o\nupper = corr.where(np.triu(np.ones(corr.shape), k=1).astype(np.bool))\n\n# Procurando atributos com mais de 95% de correla\u00e7\u00e3o\nto_drop = [column for column in upper.columns if any(upper[column] > 0.90)]","36a9a244":"to_drop","d4b1cbbf":"dataset = dataset.drop(columns = to_drop)","383cc1a4":"dataset.shape","c0dada0b":"age = dataset[['Patient_age_quantile','SARS_Cov_2_exam_result']]","db5ae56d":"\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.rc('axes',labelsize = 30)\nplt.rc('xtick',labelsize = 20)\nplt.rc('ytick',labelsize = 20)\nplt.rc('legend', fontsize= 20)\n\nlabels = list(range(20))\nposi = []\nneg = []\nfor i in range(20):\n    cases = age.loc[age['Patient_age_quantile'] == i]\n    cases = cases.iloc[:,1].value_counts()\n    neg.append(cases[0])\n    posi.append(cases[1])\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots(figsize = (20,10))\nrects1 = ax.bar(x - width\/2, neg, width, label='Negative', color = 'blue')\nrects2 = ax.bar(x + width\/2, posi, width, label='Positive', color = 'r')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('cases',fontsize = 30)\nax.set_xlabel('Age quantile',fontsize = 30)\nax.set_title('Diagnosis by age',fontsize = 50)\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom',fontsize = 24)\n\n\nautolabel(rects1)\nautolabel(rects2)\n\nfig.tight_layout()\n\nplt.show()","9915a1d5":"\nimport plotly.graph_objects as go\nfrom IPython.display import display\nimport numpy as np\n\n\ntotal = [x + y for x,y in zip(posi,neg)]\n\ninfect_percent = [(x\/y)*100 for x,y in zip(posi,total)]\n\ntitle = 'Positive percentage per age'\nanalised = ['Television']\ncolors = ['rgb(67,67,67)']\n\nmode_size = [12]\nline_size = [4]\n\nx_data = np.vstack((labels,)*4)\n\ny_data = np.array([\n    infect_percent\n])\n\nfig = go.Figure()\n\nfor i in range(0, 1):\n    fig.add_trace(go.Scatter(x=x_data[i], y=y_data[i], mode='lines',\n        name=analised[i],\n        line=dict(color=colors[i], width=line_size[i]),\n        connectgaps=True,\n    ))\n\n    # endpoints\n    fig.add_trace(go.Scatter(\n        x=[x_data[i][0], x_data[i][-1]],\n        y=[y_data[i][0], y_data[i][-1]],\n        mode='markers',\n        marker=dict(color=colors[i], size=mode_size[i])\n    ))\n\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    autosize=False,\n    margin=dict(\n        autoexpand=False,\n        l=100,\n        r=20,\n        t=110,\n    ),\n    showlegend=False,\n    plot_bgcolor='white'\n)\n\nannotations = []\n\n# Adding labels\n# labeling the left_side of the plot\nannotations.append(dict(xref='paper', x=0.05, y=y_data[0][0],\n                              xanchor='right', yanchor='middle',\n                              text='{:.4f}%'.format(y_data[0][0]),\n                              font=dict(family='Arial',\n                                        size=16),\n                              showarrow=False))\n# labeling the right_side of the plot\nannotations.append(dict(xref='paper', x=0.95, y=y_data[0][19],\n                              xanchor='left', yanchor='middle',\n                              text='{:.1f}%'.format(y_data[0][19]),\n                              font=dict(family='Arial',\n                                        size=16),\n                              showarrow=False))\n# Title\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Positive percentage per quantile age',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n# Source\nannotations.append(dict(xref='paper', yref='paper', x=0.5, y=-0.1,\n                              xanchor='center', yanchor='top',\n                              text='Source: Kaggle einstein database',\n                              font=dict(family='Arial',\n                                        size=12,\n                                        color='rgb(150,150,150)'),\n                              showarrow=False))\n\n\nfig.update_layout(annotations=annotations)\n\ndisplay(fig)","f230d580":"corr = dataset.corr()","371a1670":"posi_cor = corr['SARS_Cov_2_exam_result'].loc[corr['SARS_Cov_2_exam_result'] > 0.1].sort_values()","526705fd":"posi_cor","515c19c2":"neg_cor = corr['SARS_Cov_2_exam_result'].loc[corr['SARS_Cov_2_exam_result'] < -0.1].sort_values()","fe67fe42":"neg_cor","cc12be7c":"from sklearn.preprocessing import MinMaxScaler,StandardScaler","bc98d927":"dataset.head()","5cdbf841":"columns = list(dataset.columns)\ndel columns[1:2]\ncolumns","d63a3219":"scaler = MinMaxScaler()\ndf = scaler.fit_transform(dataset[columns])","49e62ebf":"df = pd.DataFrame(df,columns = columns)","d9c29d99":"df = df.join(pd.DataFrame(dataset.iloc[:,1:2].values,columns = ['SARS_Cov_2_exam_result']))","25a5d499":"df","7de816e2":"df.shape","9779f4ac":"df.head()","83c8574e":"columns = list(df.columns.values)\ncolumns","73476849":"y_columns = columns[len(columns)-1]\ndel columns[len(columns)-1]","0a3cbd0b":"X = df[columns]","88c6e612":"from sklearn.impute import KNNImputer\n\n\nimputer = KNNImputer(n_neighbors = 3,weights = 'distance')\nX = pd.DataFrame(imputer.fit_transform(X),columns = columns)","fc86c282":"y = df[y_columns]","2bb871d9":"X","844ca7d4":"y","1116a011":"from sklearn.feature_selection import RFE\nfrom sklearn.svm import SVR\nestimator = SVR(kernel = 'linear')\nselector = RFE(estimator,10,step = 1,verbose = 1)","046ccb06":"selector = selector.fit(X,y)","c98553c0":"drops = selector.support_","eeb1258a":"selector.ranking_","8e07a129":"X_selected = pd.DataFrame(X.values,columns = columns)","e476bcec":"X_selected.head()","fecee941":"for column, ndrop in zip(X_selected.columns, drops):\n    if ndrop == False:\n        X_selected = X_selected.drop(columns = column)\n        ","018a79e8":"X_selected.shape","2a72e46f":"X_selected.head()","f4ea2922":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X_selected,y,random_state = 1)","4a600634":"X_train","05bc91b9":"import seaborn as sns\ny_train.value_counts().plot(kind='bar', figsize=(10, 8), rot=0)\nplt.xlabel(\"Exam result\", labelpad=14)\nplt.ylabel(\"Count of People\", labelpad=14)\nplt.title(\"Exam result distribution\", y=1.02);","b3f8ba6e":"from imblearn.over_sampling import RandomOverSampler,SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline","6ac00ee3":"ros = SMOTE()","f318a4e0":"X_train,y_train = ros.fit_resample(X_train,y_train)\n#X_train,X_test,y_train,y_test = train_test_split(X_smoted,y_smoted)","cff3923b":"X_train","10652a04":"y_train.value_counts().plot(kind='bar', figsize=(7, 6), rot=0)\nplt.xlabel(\"Exam result\", labelpad=14)\nplt.ylabel(\"Count of People\", labelpad=14)\nplt.title(\"Exam result distribution\", y=1.02);","030a5a2c":"from sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","5c5dac7c":"model = XGBClassifier(n_estimators = 700,max_depth=64,learning_rate=0.1,gamma=0,random_state= 0)","c8c949b1":"model.fit(X_train,y_train)","faff9669":"y_pred = model.predict(X_test)","6dd41326":"from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score\nfrom sklearn.metrics import confusion_matrix, roc_auc_score\n# accuracy: (tp + tn) \/ (p + n)\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy: %f' % accuracy)\n# precision tp \/ (tp + fp)\nprecision = precision_score(y_test, y_pred)\nprint('Precision: %f' % precision)\n# recall: tp \/ (tp + fn)\nrecall = recall_score(y_test, y_pred)\nprint('Recall: %f' % recall)\n# f1: 2 tp \/ (2 tp + fp + fn)\nf1 = f1_score(y_test, y_pred)\nprint('F1 score: %f' % f1)\n# ROC AUC\nauc = roc_auc_score(y_test, y_pred)\nprint('ROC AUC: %f' % auc)\n# confusion matrix\nmatrix = confusion_matrix(y_test, y_pred)\nprint(matrix)\n\nplt.figure(figsize = (10,7))\nsns.set(font_scale=1.4)#for label size\nsns.heatmap(matrix, cmap=\"Blues\", annot=True,annot_kws={\"size\": 16},fmt = 'g')# font size","29c4ae97":"dropping too correlated variables","c1ca22f6":"# Description","ba06f261":"now lets gather the data with a significant level of nans to see if we should keep it or not dependind on the proportion that they appear on negatives and positives for COVID","03cf53e6":"checking the correlation of SARS_Cov_2_exam_result with the other columns variables","63530709":"# Reducing Dimensions","3604b0fd":"In this step we are using RFE to select the most important columns to use on our model","8c855aee":"![corona.jpg](attachment:corona.jpg)\n","dcf84f14":"The coronavirus problem is a worldwide phenomenon that urges attention at the moment. This work is an initiative to help in the analysis of the data aiming to contribute somehow to help the Einstein Hospital.\n\nOur main concern in this problem is to correctly predict the number of True negatives in our confusion matrix. Its more important to predict correctly the number os positive diagnosed pacients, giving the recall function a bigger importance than the accuracy. Although, both must be taken in consideration.","a4b92dff":"So, as we can see above, the percentage of positive exams in the given dataset is approximately: $\\bf9.887 \\%$ and negatives is $\\bf90.113 \\%$","53b2ac30":"As in this notebook we are dealing with the first task, we will remove the ward admittance variable","f039b68a":"Using KNN to complete the misisng data","12263e9b":"###  Correlation results","4ae2f4bb":"As we can see below, there is no duplicated data","5d6a62c5":"After balancing data","a84b1cab":"### parameters with high positive correlation","108f1913":"# Problem overview","ba31b62d":"# Imputing","620c5382":"As shown above, the nans where preserved and the lable vvalues are now numeric","dfc82dc9":"# Training","1707814e":"The results, in general, were not satisfactory. The model could not achieve a great accuracy, while the recall and the ROC AUC were acceptable. Even though, many insights were taught with this analysis. The RFE showed the importance of some attributes in contrast with others and we learned that age is not as correlated with the disease as people think. Thanks for the Einstein for sharing this data and in future projects maybe larger data with less NaN's would be better for greater insights and to make the data scientist work easier.","566c874d":"# Encoding ","9cdc93db":"Checking for columns that only have NaNs","41ddea17":"# Correlation ","6edb237a":"# Handling unbalanced data in train set","b07e2652":"If any mistakes are identified please let me know. Any doubs can be asked in comments. Thanks for your time","79c95cf7":"### parameters with high negative correlation","1de29824":"#without touching the nans","3a7b0b5d":"# Further Questions","49c45476":"We can see that those atribute can not be used to directly determine if a person is positive to SARS_Cov_2_exam_result. If we dont know what value is normal to a positive we cant use this data in comparison","4755cedb":"# CONCLUSION","962b9a17":"As it is usually said, the age is in fact determinant to the COVID-19 infection. Although, the infection, as shown in the plot is higher in people within the fourth and the last quantile, and doesnt seem to show a clear tendence in this range. Older people ( quantile 13 - 19) arent more likely to be diagnosed.","5d7e4b66":"Through the results of the correlation in SARS Cov 2 exam is visible that there are no strong correlated variables with the exam result","2f61cff7":"# Scalling","1f92d8ad":"This means we can drop those columns, since they dont give us any information","a8c11790":"We can see that those atribute can not be used to directly determine if a person is positive to SARS_Cov_2_exam_result. If we dont know what value is normal to a positive we cant use this data in comparison","ba08a372":"Is visible that the dataset still has some atributes with too much nan values but we must check which ones are determinant for the positive tested COVID patientes","53d398cb":"There is no missing data in the COV 2 exam","885093c8":"# Importing data and librarys","ec7e33ec":"## Age Analysis","f10036d0":"# Checking Duplicates","aa279cb2":"# Missing Values"}}