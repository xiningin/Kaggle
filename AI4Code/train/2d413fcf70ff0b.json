{"cell_type":{"758a37ac":"code","248f5610":"code","444564b6":"code","b9c92289":"code","9c43d544":"code","21d3413b":"code","7625a67d":"code","3787cfaa":"code","e6fe7050":"code","cd3cab0a":"code","c87a63e5":"code","ca99f849":"code","f55f1154":"code","dbe65175":"code","84e2f067":"code","b485e5c2":"code","17189b9f":"code","089fb108":"code","4e024562":"code","1b7ac63c":"markdown","dddd8573":"markdown","13a4d462":"markdown","b2638e2b":"markdown","720fdbdd":"markdown","22e58cb8":"markdown"},"source":{"758a37ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","248f5610":"train = pd.read_csv('\/kaggle\/input\/cat-in-the-dat\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/cat-in-the-dat\/test.csv')","444564b6":"train.info()","b9c92289":"test.info()","9c43d544":"X = train[['bin_0','bin_1','bin_2','bin_3','bin_4','nom_0','nom_1','nom_2','nom_3','nom_4']]\ny = train['target']","21d3413b":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.30, random_state=101, stratify = y)","7625a67d":"X_train = pd.get_dummies(X_train, drop_first = True)","3787cfaa":"X_val = pd.get_dummies(X_val, drop_first = True)","e6fe7050":"X_train.head()","cd3cab0a":"from sklearn.linear_model import LogisticRegression","c87a63e5":"clf = LogisticRegression(random_state=0)","ca99f849":"clf.fit(X_train,y_train)","f55f1154":"print(f'Train : {clf.score(X_train, y_train):.3f}')\nprint(f'Validation : {clf.score(X_val, y_val):.3f}')","dbe65175":"X_test = test[['bin_0','bin_1','bin_2','bin_3','bin_4','nom_0','nom_1','nom_2','nom_3','nom_4']]","84e2f067":"X_test = pd.get_dummies(X_test)","b485e5c2":"X_train.columns","17189b9f":"test_prediction = clf.predict(X_test[X_train.columns])","089fb108":"final_sub = pd.DataFrame({'id': test['id'], 'target':test_prediction })\nfinal_sub.head()","4e024562":"final_sub.to_csv(\"Base_Solution.csv\", index = False)","1b7ac63c":"## Create Submission File","dddd8573":"## Build Model","13a4d462":"## Predict Test","b2638e2b":"## create train test split","720fdbdd":"## One Hot Encoding","22e58cb8":"# Import Data"}}