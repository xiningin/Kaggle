{"cell_type":{"cc621dcb":"code","e3371fac":"code","512cf0b6":"code","cb6de9b4":"code","6e73f698":"code","15762a77":"code","24adcc7c":"code","0d8bc461":"code","9b20086d":"code","60aad142":"code","396438cb":"code","ee53376a":"code","6e9b9d97":"code","d0e3b6e8":"code","308cd219":"code","738df72b":"code","9d63ee52":"code","41514d5e":"code","17b45deb":"code","ce9406ac":"code","62669192":"code","2d1c14b8":"code","f99276dc":"code","4b39211b":"code","ea8a41c0":"code","04cb3ec2":"code","7532ca51":"code","9bb066ef":"code","3bbc32d2":"code","a01ba078":"code","30d4170a":"code","de128d7d":"code","a40d0b2d":"code","b2a286e5":"code","8f6c16be":"code","429677aa":"code","5e3f34f8":"markdown","0bfe2757":"markdown","9b52ed65":"markdown","45243ba5":"markdown","6f1a52b8":"markdown","35102759":"markdown","a8d9935f":"markdown","a04eaad3":"markdown","1b1924b8":"markdown","fe555d1c":"markdown","49073f88":"markdown","c78d8580":"markdown","fe71524b":"markdown","a22668b4":"markdown","8b878a25":"markdown","a04a751b":"markdown","567f33f4":"markdown","0b10a218":"markdown","afe4f6a0":"markdown"},"source":{"cc621dcb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objects as go\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3371fac":"###Apple Store\napp_store = pd.read_csv(\"..\/input\/app-store-apple-data-set-10k-apps\/AppleStore.csv\", encoding='utf8')\n\n###Google Store\ngoogle_store = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\", encoding='utf8')","512cf0b6":"print(app_store.shape) #Conhecendo um pouco nosso dataset da apple\napp_store.head()","cb6de9b4":"print(google_store.shape) #Conhecendo um pouco nosso dataset da google\ngoogle_store.head()","6e73f698":"google_store.isnull().sum()","15762a77":"app_store.isnull().sum()","24adcc7c":"print(app_store['track_name'].nunique())\nprint(google_store['App'].nunique())","0d8bc461":"#Vamos criar uma fun\u00e7\u00e3o para pegar esses dados duplicados \n#A inten\u00e7\u00e3o \u00e9 criar uma tabela de frequ\u00eancia para conseguirmos observar esses dados duplicados\ndef get_duplicate_values(df, columnNameApp):\n    duplicate = []\n    unique = []\n    for row in df[columnNameApp]:\n        if row in unique:\n            duplicate.append(row)\n        else:\n            unique.append(row)\n    return duplicate","9b20086d":"duplicate_apple = get_duplicate_values(app_store, 'track_name')","60aad142":"app_store[app_store['track_name'] == 'VR Roller Coaster']\napp_store[app_store['track_name'] == 'Mannequin Challenge']","396438cb":"duplicate_google = get_duplicate_values(google_store, 'App')","ee53376a":"def get_max_reviews(df, columnNameApp, columnReviewsApp):\n    reviews_max = {}\n\n    for app, review in zip(df[columnNameApp], df[columnReviewsApp]):\n        if app in reviews_max and reviews_max[app] < review:\n            reviews_max[app] = review\n        if app not in reviews_max:\n            reviews_max[app] = review\n    return reviews_max","6e9b9d97":"reviews_max_google = get_max_reviews(google_store, 'App', 'Reviews')","d0e3b6e8":"def get_clean_data(df, indexAppName, indexReview, review_max_list):\n    clean_data = []\n    already_added = []\n\n    for row in df.to_numpy():\n        app = row[indexAppName]\n        review = row[indexReview]\n        if review == review_max_list[app] and app not in already_added:\n            clean_data.append(row)\n            already_added.append(app)\n    return clean_data\n        ","308cd219":"android_clean = get_clean_data(google_store, 0, 3, reviews_max_google)","738df72b":"print('O n\u00famero de app \u00fanicos \u00e9 de: {0} e o n\u00famero atual \u00e9 de: {1}'.format(google_store['App'].nunique(), len(android_clean)))","9d63ee52":"def is_english(app_name):\n    non_ascii = 0\n    for character in app_name:\n        if ord(character) > 127:\n            non_ascii += 1\n    if non_ascii > 3:\n        return False\n    else:\n        return True","41514d5e":"is_english('\u7231\u5947\u827aPPS -\u300a\u6b22\u4e50\u98822\u300b\u7535\u89c6\u5267\u70ed\u64ad') #Conferindo se t\u00e1 certo ","17b45deb":"#Apenas um teste para ver o que minha fun\u00e7\u00e3o n\u00e3o considera ingl\u00eas\nfor row in android_clean:\n    if(not is_english(row[0])):\n        print(row[0]) #Just check","ce9406ac":"def get_only_english(df,indexAppName):\n    clean_data = []\n    for row in df:\n        if(is_english(row[indexAppName])):\n            clean_data.append(row)\n    return clean_data","62669192":"android_clean = get_only_english(android_clean, 0)\n#In a few moments, it's better for me work with a list and in other times with a dataframe\napple_clean = app_store.values.tolist()\napple_clean = get_only_english(apple_clean, 2)","2d1c14b8":"print('O tamanho original do dataset da App Store era de: {0} e agora est\u00e1 com {1}'.format(app_store.shape[0],len(apple_clean)))\nprint('O tamanho original do dataset da Play Store era de: {0} e agora est\u00e1 com {1}'.format(google_store.shape[0],len(android_clean)))","f99276dc":"df_google = pd.DataFrame(data=android_clean, columns=google_store.columns)\ndf_apple = pd.DataFrame(data=apple_clean, columns=app_store.columns)\n\ndf_google = df_google.loc[df_google['Price'] == '0']\ndf_apple = df_apple.loc[df_apple['price'] == 0]","4b39211b":"print('O tamanho original do dataset da App Store era de: {0} e agora est\u00e1 com {1}'.format(app_store.shape[0],df_apple.shape[0]))\nprint('O tamanho original do dataset da Play Store era de: {0} e agora est\u00e1 com {1}'.format(google_store.shape[0],df_google.shape[0]))","ea8a41c0":"def plotBar(x, y, store_name, column='g\u00eanero'):\n    marker_color = 'darkcyan'\n    \n    if store_name == 'App Store':\n        marker_color = 'blueviolet'\n        \n    fig = go.Figure(data=[go.Bar(\n                x=x, y=y,\n                textposition='auto',\n                marker_color=marker_color\n            )])\n    \n    fig.update_layout(title_text='Quantidade de Apps gratuitos por {0} na loja da {1}'.format(column, store_name))\n    fig.show()","04cb3ec2":"#Provavelmente esse n\u00e3o \u00e9 o melhor jeito de pegar meus valores para x e y, mas foi o jeito que eu achei kkk\n\ndef getXY(genres):\n    genres = genres\n    x = []\n    y= []\n    for index, value in genres.items():\n        x.append(index)\n        y.append(value)\n    \n    return x, y\n\nx_a, y_a = getXY(df_apple['prime_genre'].value_counts())\nx_g, y_g = getXY(df_google['Genres'].value_counts()[:22])","7532ca51":"plotBar(x_a, y_a, 'App Store')","9bb066ef":"plotBar(x=x_g, y=y_g, store_name='Play Store')","3bbc32d2":"x_g, y_g = getXY(df_google['Category'].value_counts()[:22])","a01ba078":"plotBar(x_g, y_g, 'Play Store', column='categoria')","30d4170a":"#Para verificar isso, eu vou pegar as m\u00e9dias de instala\u00e7\u00e3o dos Apps\n#mas primeiro preciso tratar a coluna Installs porque ela possui o caracter + e , \n\nlist_values = []\nmeans = {}\n\nfor row in df_google[\"Installs\"]:\n    list_values.append(float(row.replace(',', '').replace('+','')))\n    \ndf_google[\"Installs_clean\"] = list_values\n\nfor category in df_google['Category'].unique():\n    means[category] = df_google.query(\"Category == '\" + category + \"'\")['Installs_clean'].mean() ","de128d7d":"def plotBarMeans(dict_means, store_name):\n    #Vou ordenar o dict s\u00f3 para ficar mais f\u00e1cil a visualiza\u00e7\u00e3o no gr\u00e1fico\n    means_order = {k: v for k, v in sorted(dict_means.items(), key=lambda item: item[1], reverse=True)}\n    fig = px.bar(x=list(means_order.keys()), y=list(means_order.values()),\n                 labels={'y':'M\u00e9dia instala\u00e7\u00f5es', 'x':'Categorias'},\n                 title='M\u00e9dias de instala\u00e7\u00f5es por categoria na loja {0}'.format(store_name))\n    fig.show()\n","a40d0b2d":"plotBarMeans(means, 'Play Store')","b2a286e5":"df_google[df_google['Category'] == 'COMMUNICATION']","8f6c16be":"means_apple = {}\n\nfor category in df_apple['prime_genre'].unique():\n    means_apple[category] = df_apple.query(\"prime_genre == '\" + category + \"'\")['rating_count_tot'].mean()\n    \nplotBarMeans(means_apple, 'Apple Store')","429677aa":"df_apple[df_apple['prime_genre'] == 'Navigation']","5e3f34f8":"*Vamos dar uma espiadinha*, ser\u00e1 que existem valores nulos para esse dataset?","0bfe2757":"Os g\u00eaneros mais comuns na Play Store s\u00e3o Ferramentas seguido de Entreterimento de novo *(Esse entreterimento t\u00e1 se mostrando promissor em ambos os datasets)* \n\nE a querida Educa\u00e7\u00e3o t\u00e1 logo atr\u00e1s, show!","9b52ed65":"No dataset da play store, o esquema j\u00e1 \u00e9 um pouco diferente, temos realmente v\u00e1rios valores duplicados. \n\nPrecisamos eliminar isso de alguma forma, mas n\u00e3o podemos perder todos esses dados...\nVamos pegar a linha com maior n\u00famero de coment\u00e1rios (Reviews).\n\nVamos criar uma fun\u00e7\u00e3o que pegue os maiores valores e coloque em um dicion\u00e1rio para facilitar a remo\u00e7\u00e3o depois. ","45243ba5":"Agora que j\u00e1 limpamos os dados...\n\n# Um pouco de visualiza\u00e7\u00e3o faz bem pro cora\u00e7\u00e3o\n\nVamos buscar quais g\u00eaneros s\u00e3o mais comuns nas lojas de apps, para isso vou come\u00e7ar a usar um pouco de gr\u00e1fico, esses gr\u00e1ficos bonitos desse pacote **MARAVILHOSO** (plotly).. \n\nVou criar uma fun\u00e7\u00e3o porque se tem um trem que eu n\u00e3o gosto, \u00e9 reescrever c\u00f3digo.","6f1a52b8":"Agora que eu sei quais os apps tem o maior n\u00famero de reviews, eu vou usar esse dicion\u00e1rio (reviews_max) para me ajudar a remover os dados duplicados...  ","35102759":"Bom, a gente sabe que o dataset da apple store tem 7197 linhas e aparentemente 7195 s\u00e3o dados \u00fanicos, ou seja, n\u00f3s achamos um dado duplicado nesse dataset. Seeer\u00e1 mesmo? parece um dataset t\u00e3o bonitinho!\n\nO dataset da google store j\u00e1 apresenta mais valores possivelmente duplicados. \nVamos dar um jeito nisso!!","a8d9935f":"Bom, eu n\u00e3o estou certa se esses valores est\u00e3o duplicados, notem que existem duas diferen\u00e7as cruciais, tipo tamanho do app (size_bytes), a vers\u00e3o do app (ver) e classifica\u00e7\u00e3o do conte\u00fado (cont_rating)...\n\nFui verificar na sess\u00e3o de discuss\u00e3o sobre o dataset, e essa quest\u00e3o dos dados duplicados j\u00e1 foi esclarecida. Esses dados n\u00e3o est\u00e3o duplicados, eles realmente existem na app store e s\u00e3o distintos.","a04eaad3":"# Considera\u00e7\u00f5es finais # \n\nAparentemente ter pego a coluna rating_count_tot para tentar entender quais as categorias mais baixadas n\u00e3o deu muito certo. Nem sempre quando baixamos algo, a gente chega a avaliar, n\u00e3o acredito que seja bom tirar uma conclus\u00e3o sobre os dados da apple sobre isso. \n\nNo caso dos dados da Play Store, a gente conseguiu limpar bem os dados, e acredito que podemos chegar a algumas conclus\u00f5es. \n\nA Categoria mais instalada pelos usu\u00e1rios \u00e9 a de Comunica\u00e7\u00e3o, e a categoria com maior n\u00famero de apps vai paraaa *TANANANA*... Jogos. Como eu disse, em v\u00e1rias categorias da Play Store cont\u00e9m jogos, como na categoria Family e Education... \n\nEu j\u00e1 estou pensando em criar um joguinho aqui, mas n\u00e3o sei se vai ser mobile, porque j\u00e1 existem tantos n\u00e9, **mas temos uma oportunidade**, a m\u00e9dia de avalia\u00e7\u00f5es na Apple Store para games \u00e9 relativamente baixa se comparado a outras categorias. Talvez se lan\u00e7assemos um jogo ULTRA MEGA HIPER SINISTRO pode dar certo.\n\nNo geral, o que percebo \u00e9 que o cen\u00e1rio dos jogos \u00e9 promissor, seja para entreterimento ou educa\u00e7\u00e3o.","1b1924b8":"Uma breve explica\u00e7\u00e3o: a fun\u00e7\u00e3o built-in \"ord\" do python retorna o c\u00f3digo unicode de um caracter conforme a tabela ASCII. \n\nNo ingl\u00eas n\u00e3o existem letras que tenham o unicode maior que 127, ent\u00e3o por isso eu coloquei uma verifica\u00e7\u00e3o, se o c\u00f3digo for maior que 127, ent\u00e3o eu entendo que \u00e9 uma letra que n\u00e3o est\u00e1 no alfabeto. Por\u00e9m como nem tudo s\u00e3o flores, temos apps com caracteres especiais, ent\u00e3o criei uma regrinha para aceitar se a palavra tiver at\u00e9 3 caracteres acima de 127.","fe555d1c":"Existe n\u00e9, vamos ver o qu\u00ea fazemos com eles depois","49073f88":"Sucesso! Conseguimos remover os dados duplicados. \n\nBom, nesse desafio proposto, s\u00f3 me interessa os apps em ingl\u00eas, ent\u00e3o vamos l\u00e1 achar um jeito de deixar apenas eles.\n\n","c78d8580":"Como podemos ver, a maior m\u00e9dia de apps instalados v\u00eam da categoria \"Comunica\u00e7\u00e3o\", o que faz bastante sentido n\u00e9? S\u00e3o apps como Whatsapp, Messenger, Telegram, Chat Hangouts e etc.. \n\nPara o dataset da apple, vamos pegar como m\u00e9trica a m\u00e9dia da coluna \"rating_count_tot\" (n\u00famero de avalia\u00e7\u00f5es), j\u00e1 que n\u00e3o temos uma coluna que representa a quantidade de downloads.","fe71524b":"**Gentee!** Eu estou no in\u00edcio da minha longa jornada, ent\u00e3o se voc\u00ea acompanhou at\u00e9 aqui e tem algo a acrescentar, sinta-se a vontade para me chamar e muito obrigada. Meu objetivo \u00e9 compartilhar o que eu estou aprendendo para que talvez seja \u00fatil para algu\u00e9m. \n\n### #PAZ","a22668b4":"Parece ter funcionado bem at\u00e9...\n\nAgora vamos de fato pegar s\u00f3 os apps em ingl\u00eas. ","8b878a25":"Yeeeah! N\u00e3o existem valores nulos no dataset da apple.\n\nVamos aproveitar e verificar se existem valores duplicados, lembrando que a coluna track_name \u00e9 o nome do app. ","a04a751b":"Bom,j\u00e1 limpamos bastante os dados n\u00e9... \n\nPara completar minha an\u00e1lise, eu preciso pegar apenas os apps free, n\u00e3o tenho interesse nos apps pagos. Ent\u00e3o vou s\u00f3 pegar os free apps usando o m\u00e9todo loc.","567f33f4":"No gr\u00e1fico de barras acima, a gente consegue observar a coluna \"Category\" (Categoria). As categorias com mais apps est\u00e3o: Family, Games e Tools.\n\n\u00c9 engra\u00e7ado porque a categoria Family tem muitos jogos na Play Store, assim como na Education. [Os jogos est\u00e3o dominandooo.]\n\nEstou pensando aqui.... **Ser\u00e1 que ser o g\u00eanero com mais Apps publicados te torna o g\u00eanero mais baixado?**\n\n**Vamos ver...**","0b10a218":"# An\u00e1lise explorat\u00f3ria dos dados da App Store e da Play Store\n Essa an\u00e1lise foi proposta pelo dataquest.io, e o objetivo geral \u00e9 explora\u00e7\u00e3o e aprendizado, com objetivo de conseguir opinar quais tipos de aplicativos s\u00e3o melhores de se investir.\n \n * Data google store: https:\/\/www.kaggle.com\/lava18\/google-play-store-apps\/\n \n * Data apple store: https:\/\/www.kaggle.com\/ramamet4\/app-store-apple-data-set-10k-apps","afe4f6a0":"Os g\u00eaneros mais comum s\u00e3o **Jogos** e em seguida **Entreterimento**.\n\nEu gosto bastante de jogos, e \u00e9 legal que jogos esteja no topo da lista de g\u00eaneros mas seria bem legal tamb\u00e9m se tivessem mais apps no ramo da Educa\u00e7\u00e3o. Por isso, eu apoio muito a gamifica\u00e7\u00e3o do aprendizado, juntar o \u00fatil ao agrad\u00e1vel..."}}