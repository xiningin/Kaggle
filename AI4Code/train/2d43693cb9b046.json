{"cell_type":{"75f30e98":"code","3b1600e8":"code","f47eb51e":"code","229a5ea9":"code","bfb59f9f":"code","cf389459":"code","5e4f08e5":"code","a8a3b50c":"code","81b7c5e5":"code","69d9cac3":"code","45c558cb":"code","35ad0483":"code","bc69eaba":"code","93b43dfe":"code","dbab5bd0":"code","6b41b6d6":"code","8b685cea":"code","1ded302b":"code","0865d573":"code","ba0cd4cd":"code","a0ac03ce":"code","0868a760":"code","4866771f":"code","4c5db1d9":"code","61d70843":"code","adc255ce":"code","daa506d0":"code","b8faa6f8":"code","8fb0426b":"code","3908d470":"code","26a42ed3":"code","0ce67679":"code","4b9647ab":"code","2fe98850":"code","02305342":"code","77f63a54":"code","356a056c":"code","4246e232":"code","6f0c21ea":"code","8844510e":"code","4fbb18fd":"code","59802b31":"code","b194ceb7":"code","cf08bbae":"code","c70f6761":"code","7662e951":"code","4fe84444":"code","fd9eafc1":"markdown","811602a4":"markdown","481d7390":"markdown","014188da":"markdown","ff885ba9":"markdown","f26b7a2d":"markdown","aa22d66a":"markdown","02072adb":"markdown","2bdad4ae":"markdown","78567ee8":"markdown","b20519d0":"markdown"},"source":{"75f30e98":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3b1600e8":"#read in the file\ncampus_df =  pd.read_csv('\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')","f47eb51e":"# brief overview\ncampus_df.info()","229a5ea9":"# first five samples in dataset\ncampus_df.head()","bfb59f9f":"#drop the first column \ncampus_df1 = campus_df.drop('sl_no',axis = 1)","cf389459":"# value counts of object variables\ncategorical_column = {col:campus_df1[col].value_counts() for col in campus_df1.columns if pd.api.types.is_string_dtype(campus_df1[col])}\ncategorical_column","5e4f08e5":"campus_df1.describe()","a8a3b50c":"import plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns","81b7c5e5":"numerical_columns= [col for col in campus_df1.columns if pd.api.types.is_numeric_dtype(campus_df1[col])]","69d9cac3":"numerical_data = campus_df1[numerical_columns]\nnumerical_data","45c558cb":"fig,(ax1,ax2,ax3,ax4,ax5,ax6) = plt.subplots(6,1,figsize=(6,16))\nax=[ax1,ax2,ax3,ax4,ax5,ax6]\nfor index in range(len(ax)):\n    ax[index].hist(numerical_data.iloc[:,index],bins= 15)\n    ax[index].set_title('histogram of {}'.format(list(numerical_data.columns)[index]))\n    ax[index].set_xlabel('{}'.format(list(numerical_data.columns)[index]))\n    ax[index].set_ylabel('count')\n    fig.tight_layout(pad=2)","35ad0483":"color = {'M':'blue','F':'red'}\nsns.scatterplot(data = campus_df1,x='degree_p',y='hsc_p',hue='gender',color=sns.color_palette()[0])","bc69eaba":"fig,(ax1,ax2,ax3,ax4,ax5,ax6) = plt.subplots(6,1,figsize=(6,16))\nax=[ax1,ax2,ax3,ax4,ax5,ax6]\nfor index in range(len(ax)):\n    ax[index].boxplot(numerical_data.iloc[:,index])\n    ax[index].set_title('histogram of {}'.format(list(numerical_data.columns)[index]))\n    ax[index].set_xlabel('{}'.format(list(numerical_data.columns)[index]))\n    ax[index].set_ylabel('count')\n    fig.tight_layout(pad=2)","93b43dfe":"campus_df2 = campus_df1.drop('salary',axis = 1)\ncampus_df3 = campus_df1.dropna()","dbab5bd0":"campus_df2.info(), print('the sum of null values in campus_df3 is {}'.format(campus_df3['salary'].isnull().sum()))","6b41b6d6":"# drop outliers in salary\ncampus_df3 = campus_df3[campus_df3['salary'] <= 400000]\nplt.boxplot(campus_df3['salary'])\nlen(campus_df3)","8b685cea":"campus_df3.describe()","1ded302b":"cat_col =[col for col in campus_df1.columns if pd.api.types.is_string_dtype(campus_df1[col])]\nfig,ax = plt.subplots(len(cat_col),figsize=(5,20))\nfor index in range(len(cat_col)):\n    sns.countplot(x=campus_df2[cat_col[index]],ax=ax[index],)\n    ax[index].set_title('barchart of {}'.format(cat_col[index]))\n    ax[index].set_xlabel('{}'.format(cat_col[index]))\n    ax[index].set_ylabel('count')\n    fig.tight_layout(pad=2);","0865d573":"cat_col =[col for col in campus_df1.columns if pd.api.types.is_string_dtype(campus_df1[col])]","ba0cd4cd":"cat_col =[col for col in campus_df1.columns if pd.api.types.is_string_dtype(campus_df1[col])]\ncat_col.pop(6)\nfig,ax = plt.subplots(len(cat_col),figsize=(5,20))\nfor index in range(len(cat_col)):\n    sns.countplot(x=campus_df2[cat_col[index]],hue=campus_df2['status'],ax=ax[index])\n    ax[index].set_title('barchartof {}'.format(cat_col[index]))\n    ax[index].set_xlabel('{}'.format(cat_col[index]))\n    ax[index].set_ylabel('count')\n    fig.tight_layout(pad=2);","a0ac03ce":"gender_status = pd.crosstab(campus_df2['gender'],campus_df2['status'],normalize ='columns')\nsns.heatmap(gender_status,annot=True),gender_status,pd.crosstab(campus_df2['gender'],campus_df2['status'])","0868a760":"course_status = pd.crosstab(campus_df2['degree_t'],campus_df2['status'],normalize ='columns')\nsns.heatmap(course_status,annot=True),course_status,pd.crosstab(campus_df2['degree_t'],campus_df2['status'])","4866771f":"pd.crosstab(campus_df2['degree_t'],campus_df2['status'],normalize ='index')","4c5db1d9":"course_gender= pd.crosstab(campus_df2['degree_t'],campus_df2['gender'],normalize ='columns')\nsns.heatmap(course_gender,annot=True),course_gender,pd.crosstab(campus_df2['degree_t'],campus_df2['gender'])","61d70843":"pd.crosstab(campus_df2['degree_t'],campus_df2['gender'], normalize='index')","adc255ce":"exp_gender= pd.crosstab(campus_df2['workex'],campus_df2['gender'],normalize ='columns')\nsns.heatmap(exp_gender,annot=True),exp_gender,pd.crosstab(campus_df2['workex'],campus_df2['gender'],normalize='index')","daa506d0":"campus_df2[campus_df['status'] =='Placed']['degree_p'].describe(),campus_df2[campus_df['status'] !='Placed']['degree_p'].describe()","b8faa6f8":"campus_df2[campus_df['gender'] =='F']['degree_p'].describe(),campus_df2[campus_df['gender'] !='F']['degree_p'].describe()","8fb0426b":"sns.violinplot(data = campus_df2,x='status',y='degree_p')","3908d470":"sns.violinplot(data = campus_df2,x='status',y='degree_p',hue='gender')","26a42ed3":"sns.violinplot(data = campus_df2,x='status',y='mba_p',hue='gender')","0ce67679":"sns.violinplot(data = campus_df2,x='status',y='mba_p')","4b9647ab":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.preprocessing import LabelEncoder,MinMaxScaler,StandardScaler,OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,confusion_matrix,precision_score,recall_score\n","2fe98850":"campus_df.info()","02305342":"y = campus_df2['status']\nx = campus_df2.iloc[0: ,[0,6,7,8]]","77f63a54":"x","356a056c":"split = StratifiedShuffleSplit(n_splits=1,test_size = 0.2)\nfor train,test in split.split(x,y):\n    x_train = x.iloc[train]\n    y_train = y.iloc[train]\n    x_test = x.iloc[test]\n    y_test = y.iloc[test]","4246e232":"x_train = x_train.values\ny_train = y_train.values\nx_test = x_test.values\ny_test = y_test.values","6f0c21ea":"x_train[0:,[1]] = StandardScaler().fit_transform(x_train[0:,[1]])\nx_train[0:,0] = LabelEncoder().fit_transform(x_train[0:,0])\nx_train[0:,2] = LabelEncoder().fit_transform(x_train[0:,2])\nx_train[0:,3] = LabelEncoder().fit_transform(x_train[0:,3])\ny_train[y_train == 'Not Placed'] = 0\ny_train[y_train == 'Placed'] = 1\nx_train[0,[0,2,3]]=x_train[0,[0,2,3]].astype('int')\ny_train = y_train.astype('int')","8844510e":"model = LogisticRegression()\nmodel.fit(x_train,y_train)","4fbb18fd":"x_test[0:,[1]] = StandardScaler().fit_transform(x_test[0:,[1]])\nx_test[0:,0] = LabelEncoder().fit_transform(x_test[0:,0])\nx_test[0:,2] = LabelEncoder().fit_transform(x_test[0:,2])\nx_test[0:,3] = LabelEncoder().fit_transform(x_test[0:,3])\ny_test[y_test == 'Not Placed'] = 0\ny_test[y_test == 'Placed'] = 1\nx_test[0,[0,2,3]]=x_train[0,[0,2,3]].astype('int')\ny_test = y_test.astype('int')","59802b31":"y_pred =model.predict(x_test)","b194ceb7":"np.sum(y_test==y_pred)\/len(y_test)","cf08bbae":"print('this is the accuracy score {} and confusionmatrix {}'.format(accuracy_score(y_test,y_pred),confusion_matrix(y_test,y_pred)))","c70f6761":"confusion_matrix(y_test,y_pred)","7662e951":"recall_score(y_test,y_pred)","4fe84444":"precision_score(y_test,y_pred)","fd9eafc1":"###### ","811602a4":"#Machine learning # Preprocessing\nThe distribution of label is not equal, using a random test_train split may result in a training set that is not representative, hence a stratified split will be used.\nAlso to avoid overfiiting only features such as gender, degree_p, work exp,degree_t will be used.\nconvert categorical data to numerical\n","481d7390":"### Preliminary Analysis\nAlthough, the population with no work experience was greater than those with work experience. relative to size it appears that work experience had a better placement record\n\nIt appears gender also has an effect","014188da":"Comms& mgt and science have almost equal  percentage of placement (note the denominator is different), however considering the total number of unplaced and placed, comms and mgt have an higher percentage, but this is expected because they are the larger population of degrees in the two instances. \n","ff885ba9":"From the summary, the median of ssc_p, hsc_p, degree_p,etest_p and mba_p is quite close  meaning it is possible they follow a normal distribution. however the deviation in salary is quite large with the 0-75 percentile having a narrorwer range, than the ","f26b7a2d":"Univariate Plot for categorical data\n","aa22d66a":"Result:\n42 % of unplaced students were female even though they accounted for 32% of student placed.\nThis might be influenced by other factors eg.\nFemales might have an higher population in fields like commerce and mgt, maybe science students get better placement\nFemales may have poorer grades. Lets explore!","02072adb":"### distribution looks similar however the addition of gender has a feature introduced some distinction","2bdad4ae":"Perform exoloratory analysis\n* Does Gender affect placement\n\n* Does course of study affect placement\n\n* does grade affect placement","78567ee8":"from the boxplot we can see that all other numerical features can be assumed to be normally distributed but the salary have some outliers. Two datasets will be created. \n\n1) label to be determined is the placement\n2) factors affecting salary.\n(the salary contains null values and dropping all null values might drop samples where people didnt get placed)","b20519d0":"\nMale population  >>>> Female population\n\nCommercial & mgt > science\n\nno work experience >> work experience\n\nplaced > not placed"}}