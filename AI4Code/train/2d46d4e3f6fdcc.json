{"cell_type":{"6d3f0d3d":"code","b2a200e4":"code","b8354bcf":"code","303bdadd":"code","dc0e05fd":"code","ce51dbf1":"code","a6d72912":"code","7b50a5e3":"code","7ff37c50":"code","0ebcd745":"code","c6b6f3b9":"code","0385b0df":"code","5a1bc19e":"code","a5441337":"code","e3e3adfc":"code","058d6b89":"code","aa240371":"code","befac9b6":"code","6b09985f":"code","1f4221e0":"code","9237a50c":"code","8f5999d5":"code","7dcfc387":"code","7211ecee":"code","580c770c":"code","67fdc29d":"code","174bb44f":"code","50a82d86":"code","f3e83799":"code","88410032":"code","3943010a":"code","c69e4bc8":"code","a36963e9":"code","27ccc996":"code","a9f24422":"code","ea171475":"code","5fa3c736":"code","cd8270e9":"code","7dbc5406":"code","0ded834b":"code","c4ac72ae":"code","3b2e31fa":"code","b138fc27":"markdown","536c77dc":"markdown","c68d7f4a":"markdown","057311ee":"markdown","62d60ccc":"markdown","81dbb93c":"markdown","0e6c87d4":"markdown","167ec4b0":"markdown","87788650":"markdown","461003ce":"markdown","8ca84f9d":"markdown","9f138280":"markdown","34654672":"markdown","f67e8165":"markdown","d06126bc":"markdown","50960cd7":"markdown","20bb3e43":"markdown","59979b85":"markdown","6aca8460":"markdown"},"source":{"6d3f0d3d":"!pip install git+https:\/\/github.com\/fastai\/fastcore > \/dev\/null\n!pip install git+https:\/\/github.com\/fastai\/fastai2 > \/dev\/null\n!pip install iterative-stratification > \/dev\/null","b2a200e4":"!pip install efficientnet-pytorch","b8354bcf":"%load_ext autoreload\n%autoreload 2\n\nimport os\nimport pandas as pd\nimport sys\nfrom collections import Counter\nfrom pathlib import Path\n\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold\nfrom tqdm.notebook import tqdm\nfrom torchvision.models import densenet121\nfrom sklearn.metrics import roc_auc_score\nfrom torch.utils.data.sampler import WeightedRandomSampler\n\nfrom fastai2.basics import *\nfrom fastai2.callback.all import *\nfrom fastai2.vision.all import *\n\n\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True","303bdadd":"from efficientnet_pytorch import EfficientNet","dc0e05fd":"DATA_PATH = Path('..\/input\/plant-pathology-2020-fgvc7')\nIMG_PATH = DATA_PATH \/ 'images'\nLABEL_COLS = ['healthy', 'multiple_diseases', 'rust', 'scab']\n\nIMG_SIZE = 512\nSEED = 420\nN_FOLDS = 5\nBS = 8#16\nN_FOLDS = 5\n\nARCH = densenet121","ce51dbf1":"seed_everything(SEED)","a6d72912":"train_df = pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/train.csv')\ntest_df = pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/test.csv')","7b50a5e3":"train_df.head()","7ff37c50":"(len(train_df), len(test_df))","0ebcd745":"_, axes = plt.subplots(ncols=4, nrows=1, constrained_layout=True, figsize=(10, 3))\nfor ax, column in zip(axes, LABEL_COLS):\n    train_df[column].value_counts().plot.bar(title=column, ax=ax)\nplt.show()","c6b6f3b9":"train_df.iloc[:,1:-1].sum(axis=1).value_counts()","0385b0df":"train_df[['healthy', 'multiple_diseases', 'rust', 'scab']].sum(axis=1).unique()","5a1bc19e":"test_df.head()","a5441337":"hs, ws = [], []\nfor _, row in tqdm(train_df.iterrows(), total=len(train_df)):\n    img = Image.open(IMG_PATH\/(row.image_id+'.jpg'))\n    h, w = img.size\n    hs.append(h)\n    ws.append(w)","e3e3adfc":"set(hs), set(ws)","058d6b89":"_, axes = plt.subplots(ncols=2, nrows=1, constrained_layout=True, figsize=(10, 3))\nfor ax, column, vals in zip(axes, ['heights', 'widths'], [hs, ws]):\n    ax.hist(vals, bins=100)\n    ax.set_title(f'{column} hist')\n\nplt.show()","aa240371":"Counter(hs), Counter(ws)","befac9b6":"red_values = []; green_values = []; blue_values = []; all_channels = []\nfor _, row in tqdm(train_df.iterrows(), total=len(train_df)):\n    img = np.array(Image.open(IMG_PATH\/(row.image_id+'.jpg')))\n    red_values.append(np.mean(img[:, :, 0]))\n    green_values.append(np.mean(img[:, :, 1]))\n    blue_values.append(np.mean(img[:, :, 2]))\n    all_channels.append(np.mean(img))","6b09985f":"_, axes = plt.subplots(ncols=4, nrows=1, constrained_layout=True, figsize=(16, 3), sharey=True)\nfor ax, column, vals, c in zip(\n    axes,\n    ['red', 'green', 'blue', 'all colours'],\n    [red_values, green_values, blue_values, all_channels],\n    'rgbk'\n):\n    ax.hist(vals, bins=100, color=c)\n    ax.set_title(f'{column} hist')\n\nplt.show()","1f4221e0":"train_df['fold'] = -1\n\nstrat_kfold = MultilabelStratifiedKFold(n_splits=N_FOLDS, random_state=SEED, shuffle=True)\nfor i, (_, test_index) in enumerate(strat_kfold.split(train_df.image_id.values, train_df.iloc[:,1:].values)):\n    train_df.iloc[test_index, -1] = i\n    \ntrain_df['fold'] = train_df['fold'].astype('int')","9237a50c":"train_df.fold.value_counts().plot.bar()","8f5999d5":"train_df.to_csv('train_with_strat_folds.csv', index=False)","7dcfc387":"def get_label(row):\n    for k, v in row[LABEL_COLS].items():\n        if v == 1:\n            return k","7211ecee":"train_df['label'] = train_df.apply(get_label, axis=1)","580c770c":"def get_data(fold):\n    train_df_no_val = train_df.query(f'fold != {fold}')\n    train_df_just_val = train_df.query(f'fold == {fold}')\n\n    train_df_bal = pd.concat(\n        [train_df_no_val.query('label != \"multiple_diseases\"'), train_df_just_val] +\n        [train_df_no_val.query('label == \"multiple_diseases\"')] * 4 # back to 4 as this was hs\n    ).sample(frac=1.0, random_state=SEED).reset_index(drop=True)\n\n    datablock = DataBlock(\n        blocks=(ImageBlock, CategoryBlock(vocab=LABEL_COLS)),\n        getters=[\n            ColReader('image_id', pref=IMG_PATH, suff='.jpg'),\n            ColReader('label')\n        ],\n        splitter=IndexSplitter(train_df_bal.loc[train_df_bal.fold==fold].index),\n        item_tfms=Resize(IMG_SIZE),\n        batch_tfms=aug_transforms(size=IMG_SIZE, max_rotate=30., min_scale=0.75, flip_vert=True, do_flip=True)\n    )\n    return datablock.dataloaders(source=train_df_bal, bs=BS)","67fdc29d":"def get_data_larger(fold):\n    train_df_no_val = train_df.query(f'fold != {fold}')\n    train_df_just_val = train_df.query(f'fold == {fold}')\n\n    train_df_bal = pd.concat(\n        [train_df_no_val.query('label != \"multiple_diseases\"'), train_df_just_val] +\n        [train_df_no_val.query('label == \"multiple_diseases\"')] * 4 # back to 4 as this was hs\n    ).sample(frac=1.0, random_state=SEED).reset_index(drop=True)\n\n    datablock = DataBlock(\n        blocks=(ImageBlock, CategoryBlock(vocab=LABEL_COLS)),\n        getters=[\n            ColReader('image_id', pref=IMG_PATH, suff='.jpg'),\n            ColReader('label')\n        ],\n        splitter=IndexSplitter(train_df_bal.loc[train_df_bal.fold==fold].index),\n        item_tfms=Resize(IMG_SIZE*2),\n        batch_tfms=aug_transforms(size=IMG_SIZE*2, max_rotate=30., min_scale=0.75, flip_vert=True, do_flip=True)\n    )\n    return datablock.dataloaders(source=train_df_bal, bs=BS\/2)","174bb44f":"dls = get_data(fold=0)","50a82d86":"dls.c","f3e83799":"dls.show_batch()","88410032":"def comp_metric(preds, targs, labels=range(len(LABEL_COLS))):\n    # One-hot encode targets\n    targs = np.eye(4)[targs]\n    return np.mean([roc_auc_score(targs[:,i], preds[:,i]) for i in labels])\n\ndef healthy_roc_auc(*args):\n    return comp_metric(*args, labels=[0])\n\ndef multiple_diseases_roc_auc(*args):\n    return comp_metric(*args, labels=[1])\n\ndef rust_roc_auc(*args):\n    return comp_metric(*args, labels=[2])\n\ndef scab_roc_auc(*args):\n    return comp_metric(*args, labels=[3])","3943010a":"def get_learner(fold_num, lr=1e-3):\n    opt_func = partial(Adam, lr=lr, wd=0.01, eps=1e-8)\n\n    data = get_data(fold_num)\n    \n    model = EfficientNet.from_pretrained(\"efficientnet-b7\", advprop=True)\n    #model = EfficientNet.from_name(\"efficientnet-b7\")\n    #model = EfficientNet.from_pretrained(\"efficientnet-b8\", advprop=True) # weights run to NaN\n    #model = EfficientNet.from_name('efficientnet-b4') \n    #model._fc = nn.Linear(1280, data.c)# the last layer... # works for b0,b1\n    #model._fc = nn.Linear(1536, data.c)# the last layer... B3\n    #model._fc = nn.Linear(1792, data.c)# the last layer... B4\n    #model._fc = nn.Linear(2048, data.c)# the last layer... B5\n    #model._fc = nn.Linear(2304, data.c)# the last layer... B6\n    model._fc = nn.Linear(2560, data.c)# the last layer... B7\n    #model._fc = nn.Linear(2816, data.c)# the last layer... B8\n\n    learn = Learner(\n        dls, model, opt_func=opt_func,\n        loss_func=LabelSmoothingCrossEntropy(),\n        #callback_fns = [partial(OverSamplingCallback)],  \n        metrics=[\n            AccumMetric(healthy_roc_auc, flatten=False),\n            AccumMetric(multiple_diseases_roc_auc, flatten=False),\n            AccumMetric(rust_roc_auc, flatten=False),\n            AccumMetric(scab_roc_auc, flatten=False),\n            AccumMetric(comp_metric, flatten=False)]\n        ).to_fp16()\n    return learn","c69e4bc8":"get_learner(fold_num=0).lr_find()","a36963e9":"def print_metrics(val_preds, val_labels):\n    comp_metric_fold = comp_metric(val_preds, val_labels)\n    print(f'Comp metric: {comp_metric_fold}')\n    \n    healthy_roc_auc_metric = healthy_roc_auc(val_preds, val_labels)\n    print(f'Healthy metric: {healthy_roc_auc_metric}')\n    \n    multiple_diseases_roc_auc_metric = multiple_diseases_roc_auc(val_preds, val_labels)\n    print(f'Multi disease: {multiple_diseases_roc_auc_metric}')\n    \n    rust_roc_auc_metric = rust_roc_auc(val_preds, val_labels)\n    print(f'Rust metric: {rust_roc_auc_metric}')\n    \n    scab_roc_auc_metric = scab_roc_auc(val_preds, val_labels)\n    print(f'Scab metric: {scab_roc_auc_metric}')","27ccc996":"all_val_preds = []\nall_val_labels = []\nall_test_preds = []\n\nfor i in range(N_FOLDS):\n    print(f'Fold {i} results')\n\n    learn = get_learner(fold_num=i)\n\n    #learn.fit_one_cycle(5)\n    learn.fit_one_cycle(1)\n    learn.unfreeze()\n\n    #learn.fit_one_cycle(6, slice(1e-5, 1e-4))\n    learn.fit_one_cycle(1, slice(1e-5, 1e-4))\n    \n    learn.recorder.plot_loss()\n    \n    learn.save(f'model_fold_{i}')\n    \n    learn.freeze()\n    \n    learn.data = get_data_larger(i)\n    \n    lr_min,_ = learn.lr_find()\n    \n    #learn.fit_one_cycle(5, slice(lr_min))\n    learn.fit_one_cycle(1, slice(lr_min))\n    \n    val_preds, val_labels = learn.get_preds()\n    \n    print_metrics(val_preds, val_labels)\n    \n    all_val_preds.append(val_preds)\n    all_val_labels.append(val_labels)\n    \n    test_dl = dls.test_dl(test_df)\n    test_preds, _ = learn.get_preds(dl=test_dl)\n    all_test_preds.append(test_preds)\n    \nplt.show()","a9f24422":"print_metrics(np.concatenate(all_val_preds), np.concatenate(all_val_labels))","ea171475":"interp = ClassificationInterpretation.from_learner(learn)","5fa3c736":"interp.plot_top_losses(9, figsize=(15, 10))","cd8270e9":"interp.plot_confusion_matrix(normalize=True, figsize=(6, 6))","7dbc5406":"test_df_output = pd.concat([test_df, pd.DataFrame(np.mean(np.stack(all_test_preds), axis=0), columns=LABEL_COLS)], axis=1)","0ded834b":"test_df_output.head()","c4ac72ae":"test_df_output.to_csv('submission.csv', index=False)","3b2e31fa":"!head -n 5 submission.csv","b138fc27":"## Test predictions","536c77dc":"Let's see how many times the labels appear together.","c68d7f4a":"### Colour distribution","057311ee":"I'll use iterative stratification to create balanced folds.","62d60ccc":"## Interpret","81dbb93c":"Vast majority of images are big: 2048x1819.","0e6c87d4":"## Training","167ec4b0":"## EDA","87788650":"### Label distribution","461003ce":"### Dataset size","8ca84f9d":"# Plant Pathology 2020 with fastai2\n\nThis is a fork of Rony K Roy & Soly James notebook. Link: [https:\/\/www.kaggle.com\/ronyroy\/effnet-fastai-folds-x5](https:\/\/www.kaggle.com\/ronyroy\/effnet-fastai-folds-x5)\nand\ninspired by [lex's notebook here](https:\/\/www.kaggle.com\/lextoumbourou\/plant-pathology-2020-eda-training-fastai2)  \n\nThis ia a starter example for classifying categories of foliar diseases in apple trees.\n\nThis ought to help one exlore EfficientNets in Pytorch using GPUs","9f138280":"## Create folds","34654672":"I'm not sure how to load one-hot encoded labels into fastai2, so going to convert to a string label.","f67e8165":"## Params","d06126bc":"## Data (inc oversampling)","50960cd7":"### Img size distribution","20bb3e43":"Looks like never. So this appears to be multiclass but not multilabel classification.","59979b85":"# efficientnet-b7\n\nfocus here is on efficientnet-b7\nPlease try with other efficientnet as well","6aca8460":"Right now, I'm x2 the number of multiple diseases labels as that appears to be the majorly unrepresented class."}}