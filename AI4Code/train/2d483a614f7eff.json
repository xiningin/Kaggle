{"cell_type":{"f3ee2d04":"code","6a132442":"code","5c1e47f6":"code","b78d3103":"code","243a8c9b":"code","7c5997fc":"code","a0f02c82":"code","2e60e61f":"code","7e6552c4":"code","99123d41":"code","6a2ebbea":"code","3ab34b09":"markdown","81f8d304":"markdown","e84157ca":"markdown","6fb662b0":"markdown","f70d43a2":"markdown","7d37fb57":"markdown","d13f0898":"markdown","ce9dce87":"markdown","913a3c43":"markdown"},"source":{"f3ee2d04":"import os\nimport datetime as dt\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","6a132442":"# Input data files are available in the \"..\/input\/\" directory.\ninput_dir = \"..\/input\"\n\nprofessionals = pd.read_csv(os.path.join(input_dir, 'professionals.csv'), parse_dates=True)\nstudents = pd.read_csv(os.path.join(input_dir, 'students.csv'))\nschool_memberships = pd.read_csv(os.path.join(input_dir, 'school_memberships.csv'))\ngroups = pd.read_csv(os.path.join(input_dir, 'groups.csv'))\ngroup_memberships = pd.read_csv(os.path.join(input_dir, 'group_memberships.csv'))\nquestions = pd.read_csv(os.path.join(input_dir, 'questions.csv'))\nanswers = pd.read_csv(os.path.join(input_dir, 'answers.csv'))\nemails = pd.read_csv(os.path.join(input_dir, 'emails.csv'))\nmatches = pd.read_csv(os.path.join(input_dir, 'matches.csv'))\ncomments = pd.read_csv(os.path.join(input_dir, 'comments.csv'))\ntags = pd.read_csv(os.path.join(input_dir, 'tags.csv'))\ntag_users = pd.read_csv(os.path.join(input_dir, 'tag_users.csv'))\ntag_questions = pd.read_csv(os.path.join(input_dir, 'tag_questions.csv'))\n\nprofessionals['professionals_date_joined'] = pd.to_datetime(professionals['professionals_date_joined'])\nstudents['students_date_joined'] = pd.to_datetime(students['students_date_joined'])\nquestions['questions_date_added'] = pd.to_datetime(questions['questions_date_added'])\nanswers['answers_date_added'] = pd.to_datetime(answers['answers_date_added'])\nemails['emails_date_sent'] = pd.to_datetime(emails['emails_date_sent'])\ncomments['comments_date_added'] = pd.to_datetime(comments['comments_date_added'])","5c1e47f6":"questions_users_shared_tags = tag_questions.merge(\n    tag_users, left_on='tag_questions_tag_id', right_on='tag_users_tag_id', \n    how='inner').drop_duplicates().groupby(\n    ['tag_questions_question_id', 'tag_users_user_id'])['tag_questions_tag_id'].count().reset_index()\nquestions_users_shared_tags = questions_users_shared_tags.rename(\n    columns = {'tag_questions_question_id': 'questions_id', \n               'tag_users_user_id': 'answer_user_id', \n               'tag_questions_tag_id': 'question_user_shared_tags'})","b78d3103":"print(questions_users_shared_tags.shape)\nquestions_users_shared_tags.sort_values(by='question_user_shared_tags', ascending=False).head(3)\nquestions_users_shared_tags.to_parquet(\n    'questions_users_shared_tags.parquet.gzip', compression='gzip')","243a8c9b":"users_users_shared_tags = tag_users.merge(tag_users, on='tag_users_tag_id')\nusers_users_shared_tags = users_users_shared_tags[\n    users_users_shared_tags['tag_users_user_id_x'] != \n    users_users_shared_tags['tag_users_user_id_y']].drop_duplicates()\nusers_users_shared_tags = users_users_shared_tags.groupby(\n    ['tag_users_user_id_x', 'tag_users_user_id_y'])['tag_users_tag_id'].count().reset_index()\nusers_users_shared_tags = users_users_shared_tags.rename(\n    columns = {'tag_users_user_id_x': 'questions_author_id',\n               'tag_users_user_id_y': 'answer_user_id',\n               'tag_users_tag_id': 'questioner_answerer_shared_tags'})","7c5997fc":"print(users_users_shared_tags.shape)\nusers_users_shared_tags.sort_values(by='questioner_answerer_shared_tags', ascending=False).head(3)\nusers_users_shared_tags.to_parquet(\n    'users_users_shared_tags.parquet.gzip', compression='gzip')","a0f02c82":"users_users_shared_groups = group_memberships.merge(\n    group_memberships, on='group_memberships_group_id')\nusers_users_shared_groups = users_users_shared_groups[\n    users_users_shared_groups['group_memberships_user_id_x'] != \n    users_users_shared_groups['group_memberships_user_id_y']].drop_duplicates()\nusers_users_shared_groups = users_users_shared_groups.groupby(\n    ['group_memberships_user_id_x', 'group_memberships_user_id_y'])[\n    'group_memberships_group_id'].count().reset_index()\nusers_users_shared_groups = users_users_shared_groups.rename(\n    columns = {'group_memberships_user_id_x': 'questions_author_id',\n               'group_memberships_user_id_y': 'answer_user_id',\n               'group_memberships_group_id': 'questioner_answerer_shared_groups'})","2e60e61f":"print(users_users_shared_groups.shape)\nusers_users_shared_groups.sort_values(by='questioner_answerer_shared_groups', ascending=False).tail(3)\nusers_users_shared_groups.to_parquet(\n    'users_users_shared_groups.parquet.gzip', compression='gzip')","7e6552c4":"users_users_shared_schools = school_memberships.merge(\n    school_memberships, on='school_memberships_school_id')\nusers_users_shared_schools = users_users_shared_schools[\n    users_users_shared_schools['school_memberships_user_id_x'] != \n    users_users_shared_schools['school_memberships_user_id_y']].drop_duplicates()\nusers_users_shared_schools = users_users_shared_schools.groupby(\n    ['school_memberships_user_id_x', 'school_memberships_user_id_y'])[\n    'school_memberships_school_id'].count().reset_index()\nusers_users_shared_schools = users_users_shared_schools.rename(\n    columns = {'school_memberships_user_id_x': 'questions_author_id',\n               'school_memberships_user_id_y': 'answer_user_id',\n               'school_memberships_school_id': 'questioner_answerer_shared_schools'})","99123d41":"print(users_users_shared_schools.shape)\nusers_users_shared_schools.sort_values(by='questioner_answerer_shared_schools', ascending=False).head(3)\nusers_users_shared_schools.to_parquet(\n    'users_users_shared_schools.parquet.gzip', compression='gzip')","6a2ebbea":"os.listdir()","3ab34b09":"** This static network statistic measures how many schools two users have in common. In future, if timestamps are added to the 'school_memberships' table, the method in [the dynamic network predictors notebook](https:\/\/www.kaggle.com\/titatum\/cv-feature-engineering-network-predictors-2) needs to be used. **","81f8d304":"# II. Computing Static Network Statistics #","e84157ca":"** This static network statistic measures how many tags a question and a professional have in common. In future, if timestamps are added to the 'tag_users' table, the method in [the dynamic network predictors notebook](https:\/\/www.kaggle.com\/titatum\/cv-feature-engineering-network-predictors-2) needs to be used. **","6fb662b0":"** This static network statistic measures how many groups two users have in common. In future, if timestamps are added to the 'group_memberships' table, the method in [the dynamic network predictors notebook](https:\/\/www.kaggle.com\/titatum\/cv-feature-engineering-network-predictors-2) needs to be used. **","f70d43a2":"# I. Loading Relevant Data Tables #","7d37fb57":"## II.2. Shared Groups ##","d13f0898":"## II.1. Shared Tag Counts ##","ce9dce87":"** This static network statistic measures how many tags two users have in common. In future, if timestamps are added to the 'tag_users' table, the method in [the dynamic network predictors notebook](https:\/\/www.kaggle.com\/titatum\/cv-feature-engineering-network-predictors-2) needs to be used. **","913a3c43":"## II.3. Shared Schools ##"}}