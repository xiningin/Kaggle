{"cell_type":{"835fbabc":"code","28767e0e":"code","3648c5d1":"code","de9d4160":"code","016ef83d":"code","552c257f":"code","50e0918c":"code","5fa781c6":"code","b859a490":"code","93f68071":"code","7bc44094":"code","d9445eb0":"code","94b076c9":"code","bf08aedb":"code","f1a8639e":"markdown","af868654":"markdown","c44d623d":"markdown","f27630cb":"markdown","b503cca1":"markdown","7190ce7b":"markdown"},"source":{"835fbabc":"import tensorflow as tf\nimport keras \nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\nimport os\nimport sys","28767e0e":"data_dir = '..\/input\/neuron cy5 full\/Neuron Cy5 Full'\nfolders = {'Treated': 1, 'Untreated': 0}\ntags = {'B':0, 'C':36, 'D':72, 'E':108, 'F':144, 'G':180, 'AB':216, 'AC':246, 'AD':276, 'AE':307, 'AF':337, 'AG':367}\nimg_dirs = [None]*792\ny = np.empty([792,2])\n\nimage_size = 2048\n\nfor folder in os.listdir(data_dir):\n    folder_dir = os.path.join(data_dir, folder)\n    bin_class = folders[folder]\n    for idx, file in enumerate(os.listdir(folder_dir)):\n        img_dirs[idx+bin_class*396] = os.path.join(folder_dir, file)\n        y[idx+bin_class*396,:] = [1-bin_class,bin_class]\n\n\nclasses = dict((v, k.capitalize(),) for k, v in folders.items())\nnum_classes = len(classes)\n\ndef imload(file_dir):\n    img = cv2.imread(file_dir, cv2.IMREAD_GRAYSCALE)\n    return img  ","3648c5d1":"fig, ax = plt.subplots(1,2, figsize= 3*plt.figaspect(0.5))\nfor i in range(num_classes):\n    ax[i].set_title(classes[i]+' example:', fontsize=20)\n    im_dir = img_dirs[np.argmax(y[:,i])]\n    ax[i].imshow(imload(im_dir), cmap='gray')\n    ax[i].axis('Off')","de9d4160":"num_pixels = image_size**2\n\ntreat_bins = np.zeros(256)\nprint('Calculating for Treated images:')\nfor idx in range(0, 396):\n    im = imload(img_dirs[idx])\n    treat_bins = np.add(np.bincount(im.ravel(), minlength=256), treat_bins)\n    prog = 'Progress: '+str(idx+1)+'\/396'\n    sys.stdout.write('\\r'+prog)\nsys.stdout.write('\\r Done            \\n')\n\nuntreat_bins = np.zeros(256)\nprint('Calculating for Untreated images:')\nfor idx in range(397, 792):\n    im = imload(img_dirs[idx])\n    untreat_bins = np.add(np.bincount(im.ravel(), minlength=256), untreat_bins)\n    prog = 'Progress: '+str(idx-396)+'\/396'\n    sys.stdout.write('\\r'+prog)\nsys.stdout.write('\\r Done            \\n')","016ef83d":"plt.figure(figsize=(20,10))\nplt.title('Histograms for original images: (log-scale)', fontsize=20)\nplt.bar(np.arange(len(treat_bins)),treat_bins, log=True, alpha=0.5, label='Treated intensities', color='b')\nplt.bar(np.arange(len(untreat_bins)), untreat_bins, log=True, alpha=0.5, label='Untreated intensities', color='g')\nplt.legend(loc='upper right', prop={'size': 20});\n","552c257f":"treat_bins_norm = np.zeros(256)\nprint('Calculating for Treated images:')\nfor idx in range(0, 396):\n    im = imload(img_dirs[idx]).astype('float')\n    im *= 255\/im.max()\n    im = np.uint8(im)\n    treat_bins_norm = np.add(np.bincount(im.ravel(), minlength=256), treat_bins_norm)\n    prog = 'Progress: '+str(idx+1)+'\/396'\n    sys.stdout.write('\\r'+prog)\nsys.stdout.write('\\r Done            \\n')\n\nuntreat_bins_norm = np.zeros(256)\nprint('Calculating for Untreated images:')\nfor idx in range(397, 792):\n    im = imload(img_dirs[idx]).astype('float')\n    im *= 255\/im.max()\n    im = np.uint8(im)\n    untreat_bins_norm = np.add(np.bincount(im.ravel(), minlength=256), untreat_bins_norm)\n    prog = 'Progress: '+str(idx-396)+'\/396'\n    sys.stdout.write('\\r'+prog)\nsys.stdout.write('\\r Done            \\n')","50e0918c":"plt.figure(figsize=(20,10))\nplt.title('Histograms for normalised images: (log-scale)', fontsize=20)\nplt.bar(np.arange(len(treat_bins_norm)), treat_bins_norm, log=True, alpha=0.5, label='Treated intensities', color='b')\nplt.bar(np.arange(len(untreat_bins_norm)), untreat_bins_norm, log=True, alpha=0.5, label='Untreated intensities', color='g')\nplt.legend(loc='upper right', prop={'size': 20});","5fa781c6":"fig, ax = plt.subplots(1,2, figsize= 3*plt.figaspect(0.5))\nfor i in range(num_classes):\n    ax[i].set_title(classes[i]+' example:', fontsize=20)\n    im_dir = img_dirs[np.argmax(y[:,i])]\n    im = imload(im_dir).astype('float')\n    im *= 255\/im.max()\n    im = np.uint8(im)\n    ax[i].imshow(im, cmap='gray')\n    ax[i].axis('Off')","b859a490":"treat_bins_clip = np.zeros(256)\nprint('Calculating for Treated images:')\nfor idx in range(0, 396):\n    im = imload(img_dirs[idx]).astype('float')\n    im = np.clip(im, 0, 25)\n    im *= 255*im.max()\n    im = np.uint8(im)\n    treat_bins_clip = np.add(np.bincount(im.ravel(), minlength=256), treat_bins_clip)\n    prog = 'Progress: '+str(idx+1)+'\/396'\n    sys.stdout.write('\\r'+prog)\nsys.stdout.write('\\r Done            \\n')\n\nuntreat_bins_clip = np.zeros(256)\nprint('Calculating for Untreated images:')\nfor idx in range(397, 792):\n    im = imload(img_dirs[idx]).astype('float')\n    im = np.clip(im, 0, 25)\n    im *= 255*im.max()\n    im = np.uint8(im)\n    untreat_bins_clip = np.add(np.bincount(im.ravel(), minlength=256), untreat_bins_clip)\n    prog = 'Progress: '+str(idx-396)+'\/396'\n    sys.stdout.write('\\r'+prog)\nsys.stdout.write('\\r Done            \\n')","93f68071":"plt.figure(figsize=(20,10))\nplt.title('Histograms for clipped images: (log-scale)', fontsize=20)\nplt.bar(np.arange(len(treat_bins_clip)), treat_bins_clip, log=True, alpha=0.5, label='Treated intensities', color='b')\nplt.bar(np.arange(len(untreat_bins_clip)), untreat_bins_clip, log=True, alpha=0.5, label='Untreated intensities', color='g')\nplt.legend(loc='upper right', prop={'size': 20});","7bc44094":"img =np.clip(im, 0, 25).astype('float')\nimg \/= img.max()\nplt.figure(figsize=(15,15))\nplt.title('Example of a clipped image')\nplt.imshow(img, cmap='gray');","d9445eb0":"fig, ax = plt.subplots(2,2, figsize= 3*plt.figaspect(0.5))\nfor i in range(num_classes):\n    ax[0,i].set_title(classes[i]+' contrast stretched:', fontsize=20)\n    im_dir = img_dirs[np.argmax(y[:,i])]\n    img = imload(im_dir).astype('float')\n    img_cdf = np.add(treat_bins, untreat_bins).cumsum()\n    img_cdf \/= img_cdf.max()\n    p1 = np.argmin(np.abs(img_cdf-0.01))\n    p99 = np.argmin(np.abs(img_cdf-0.99))\n    img -= p1\n    img \/= p99\n    img = 255*np.clip(img, 0 ,1)\n    ax[0,i].imshow(img, cmap='gray')\n    ax[0,i].axis('Off')\nfor i in range(num_classes):\n    ax[1,i].set_title(classes[i]+' original:', fontsize=20)\n    im_dir = img_dirs[np.argmax(y[:,i])]\n    ax[1,i].imshow(imload(im_dir), cmap='gray')\n    ax[1,i].axis('Off')","94b076c9":"fig, ax = plt.subplots(2,2, figsize= 3*plt.figaspect(0.5))\nfor i in range(num_classes):\n    ax[0,i].set_title(classes[i]+' histogram equalised:', fontsize=20)\n    im_dir = img_dirs[np.argmax(y[:,i])]\n    img = imload(im_dir).astype('float')\n    img_hist, bins = np.histogram(img.flatten(), 256, normed=True)\n    cdf = img_hist.cumsum() # cumulative distribution function\n    cdf = 255 * cdf \/ cdf[-1] # normalize\n    img_eq = np.interp(img.flatten(), bins[:-1], cdf).reshape(img.shape)\n    ax[0,i].imshow(img_eq, cmap='gray')\n    ax[0,i].axis('Off')\nfor i in range(num_classes):\n    ax[1,i].set_title(classes[i]+' original:', fontsize=20)\n    im_dir = img_dirs[np.argmax(y[:,i])]\n    ax[1,i].imshow(imload(im_dir), cmap='gray')\n    ax[1,i].axis('Off') ","bf08aedb":" fig, ax = plt.subplots(2,2, figsize= 3*plt.figaspect(0.5))\nfor i in range(num_classes):\n    ax[0,i].set_title(classes[i]+' histogram equalised & contrast stretched:', fontsize=20)\n    im_dir = img_dirs[np.argmax(y[:,i])]\n    img = imload(im_dir).astype('float')\n    img -= p1\n    img \/= p99\n    img = 255*np.clip(img, 0 ,1)\n    img_hist, bins = np.histogram(img.flatten(), 256, normed=True)\n    cdf = img_hist.cumsum() # cumulative distribution function\n    cdf = 255 * cdf \/ cdf[-1] # normalize\n    img = np.interp(img.flatten(), bins[:-1], cdf).reshape(img.shape)\n    ax[0,i].imshow(img, cmap='gray')\n    ax[0,i].axis('Off')\nfor i in range(num_classes):\n    ax[1,i].set_title(classes[i]+' original:', fontsize=20)\n    im_dir = img_dirs[np.argmax(y[:,i])]\n    ax[1,i].imshow(imload(im_dir), cmap='gray')\n    ax[1,i].axis('Off') ","f1a8639e":"Standard imports:","af868654":"This makes it noticable that the 'Treated' images really are brighter than the 'Untreated' ones! The same analysis is now performed with each images pixel instensities normalised into the full (0, 255) range.","c44d623d":" It appears that the 'Treated' images are brighter than the 'Untreated' ones. To see whether this is the case and to find out how to solve this issue, a histogram of pixel intensities is plotted.","f27630cb":"Here is an example training image from each class:","b503cca1":"The distribution of images intensities has clearly become less biased, thus the images will be normalised like this for classification. The images that were shown above are now shown with this normalisation.","7190ce7b":"The data is loaded from the directory into 2 numpy arrays: one for the image directorys and the other holding the class of each image. The function imload takes a list of image directorys and outputs an array of those images."}}