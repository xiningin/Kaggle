{"cell_type":{"dda6335d":"code","3e714d0b":"code","fb997cae":"code","cf04be40":"code","5ff827bc":"code","09c01be6":"code","82618f57":"code","5fb3677d":"code","eda522b4":"code","8da1a6db":"code","547202fd":"code","f2380584":"code","4509f3fb":"code","e8c5acbf":"code","8c753257":"code","63546e90":"code","72a03a5f":"code","8b979889":"code","622281e5":"code","a72fbb64":"code","269c3be7":"code","ebc9679c":"code","19d87be4":"code","78278878":"code","07a544b6":"code","38cda1e2":"code","71658919":"code","8b40db27":"code","ef828ae2":"markdown","0df7c147":"markdown","d054d538":"markdown","4580c09c":"markdown","03f744c1":"markdown","c6cfe187":"markdown","71df32d4":"markdown","dee10d9d":"markdown","d727cced":"markdown","b5cc2955":"markdown","48c69766":"markdown","af8cf467":"markdown","04e73a6d":"markdown","9ae8ed80":"markdown","8b45eba3":"markdown","390067b6":"markdown","5f04c1b3":"markdown","5d91cd16":"markdown","30f4bb32":"markdown","081a06a9":"markdown","02c8741b":"markdown","0390f667":"markdown","74d23ba5":"markdown","6894f2ff":"markdown","127234e6":"markdown","17390313":"markdown","02d38763":"markdown","96a985dd":"markdown","4c317956":"markdown","38f7bff3":"markdown","4edc0c02":"markdown","35977dd3":"markdown","f5d1d01b":"markdown","383bba66":"markdown","a7fc139e":"markdown","dab04ff8":"markdown","00796a9a":"markdown","8f904c76":"markdown","1192dd11":"markdown","226d2ab3":"markdown","8cedc710":"markdown","d362bd4f":"markdown","8bbf4a57":"markdown","9d8cab1c":"markdown"},"source":{"dda6335d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport statsmodels.api as sm\n\nimport warnings","3e714d0b":"df = pd.read_csv(\"..\/input\/mobile-games-ab-testing\/cookie_cats.csv\")\n\nprint(df.shape, \"\\n\")\n\ndisplay(df.head())","fb997cae":"df.info()","cf04be40":"df.describe(include = \"all\")","5ff827bc":"df.isnull().sum().sum()","09c01be6":"df[df.userid.duplicated()]","82618f57":"df.groupby(\"version\").sum_gamerounds.describe().round(3)","5fb3677d":"fig, ax = plt.subplots(figsize = (12, 8), facecolor = \"#e5e5e5\")\nax.set_facecolor(\"#e5e5e5\")\n\nsns.kdeplot(data = df, x = \"sum_gamerounds\", ax = ax, hue = \"version\", alpha = 0.2, fill = True)\nplt.show()","eda522b4":"df.sort_values(\"sum_gamerounds\", ascending = False).head()","8da1a6db":"print(f\"Total observations before removing outlier(s?) {df.shape[0]}\")\n\ndf = df[df.sum_gamerounds < 3000]\n\nprint(f\"\\nTotal observations after removing outlier(s?) {df.shape[0]}\")","547202fd":"fig, ax = plt.subplots(figsize = (12, 8), facecolor = \"#e5e5e5\")\nax.set_facecolor(\"#e5e5e5\")\n\nsns.kdeplot(data = df, x = \"sum_gamerounds\", ax = ax, \n            palette = [\"#0EB8F1\", \"#F1480F\"], hue = \"version\", alpha = 0.1, fill = True)\n\nplt.show()","f2380584":"fig, ax = plt.subplots(figsize = (12, 8), facecolor = \"#e5e5e5\")\nax.set_facecolor(\"#e5e5e5\")\n\nsns.boxplot(data = df, y = \"sum_gamerounds\", hue = \"version\", \n            ax = ax, x = [\"\"] * len(df), \n            palette = [\"#0EB8F1\", \"#F1480F\"], linewidth = 0.5, \n            flierprops = dict(marker = \"x\", markersize = 3.5))","4509f3fb":"fig = plt.figure(1, figsize=(15, 9), facecolor = \"#E5E5E5\")\n\nfor i in range(1, 10):\n    \n    normal_series = np.random.normal(0, 1, 1000)\n    \n    ax = fig.add_subplot(3, 3, i)\n    \n    with warnings.catch_warnings():\n        \n        warnings.simplefilter(\"ignore\")\n        sm.qqplot(normal_series, ax = ax, marker = \"x\", line = \"45\", fit = True)  \n        \n    ax.set_facecolor(\"#e5e5e5\")\n\nplt.tight_layout()\nplt.show()","e8c5acbf":"fig, axes = plt.subplots(2, 2, figsize = (15, 8), facecolor = \"#e5e5e5\")\naxes = axes.ravel()\n\nfor ax in axes:\n    ax.set_facecolor(\"#e5e5e5\")\n\nsns.histplot(data = df[df.version == \"gate_30\"], x = \"sum_gamerounds\", \n             ax = axes[0], bins = 100, kde = True).set_title(\"gate 30\")\nsns.histplot(data = df[df.version == \"gate_40\"], x = \"sum_gamerounds\", \n             ax = axes[2], bins = 100, kde = True).set_title(\"gate 40\")\n\nwith warnings.catch_warnings():\n    \n    warnings.simplefilter(\"ignore\")\n    \n    sm.qqplot(df[df.version == \"gate_30\"].sum_gamerounds, ax = axes[1], \n              marker = \"x\", line = \"45\", fit = True)\n    sm.qqplot(df[df.version == \"gate_40\"].sum_gamerounds, ax = axes[3], \n              marker = \"x\", line = \"45\", fit = True)\n        \naxes[1].set_title(\"QQ Plot for gate 30\")\naxes[3].set_title(\"QQ Plot for gate 40\")\n\nplt.tight_layout()\nplt.show()","8c753257":"def check_normality(series, alpha = 0.05):\n    \n    print(f\"\\nH0: {series.name} is normally distributed\")\n    print(f\"H1: {series.name} is not normally distributed \\n\")\n    print(f\"Skewness for {series.name} is {series.skew().round(3)} \"\n          f\"and kurtosis is {series.kurtosis().round(3)} \\n\")\n    \n    if len(series) <= 5000:\n        print(\"Performing Shapiro\u2013Wilk test\")\n        statistic, pvalue = stats.shapiro(series)\n        \n        print(f\"Shapiro Test Statistic \\t {round(statistic, 5)}\")\n        print(f\"p-value \\t {pvalue}\")  \n        \n    else:\n        print(\"Performing D'Agostino's K2 test\")\n        statistic, pvalue = stats.normaltest(series)\n        print(f\"Test Statistic \\t {round(statistic, 5)}\")\n        print(f\"p-value \\t {pvalue}\") \n        \n    \n    if pvalue <= alpha: \n        print(\"\\nWe can reject null hypothesis, \"\n              \"so that our series is not normally distributed.\")\n        \n    else: \n        print(\"\\nWe can't reject null hypothesis, \"\n              \"so that our series is normally distributed.\")\n        \n    result = \"Not Normal\"\n    \n    return result","63546e90":"print(\"\\033[1m\\nsum_gamerounds normality for both version: \\n\\033[0m\")\n\ncheck_normality(df[\"sum_gamerounds\"])","72a03a5f":"gate30 = df[df.version == \"gate_30\"]\ngate40 = df[df.version == \"gate_40\"]","8b979889":"print(\"\\033[1msum_gamerounds normality for gate 30: \\n\\033[0m\")\n\ncheck_normality(gate30[\"sum_gamerounds\"])","622281e5":"print(\"\\033[1msum_gamerounds normality for gate 40: \\n\\033[0m\")\n\ncheck_normality(gate40[\"sum_gamerounds\"])","a72fbb64":"def test_mannwhitneyu(series1, series2, alpha = 0.05):\n    \n    print(\"H0: Distributions of both populations are equal.\")\n    print(\"H1: Distributions of both populations are not equal.\\n\")\n    \n    statistic, pvalue = stats.mannwhitneyu(series1, series2)\n    \n    print(f\"Mann Whitney U test statistic is {statistic.round(5)}\")\n    print(f\"p-value for Mann Whitney U is {pvalue}\")\n    \n    \n    print(f\"\\nFor alpha = {alpha}\")\n    \n    if pvalue <= alpha:\n        print(\"We can reject null hypothesis. These groups are not similar.\")\n    else:\n        print(\"We can not reject null hypothesis. These groups are similar.\")              ","269c3be7":"test_mannwhitneyu(gate30[\"sum_gamerounds\"], gate40[\"sum_gamerounds\"])","ebc9679c":"fig, axes = plt.subplots(1, 2, figsize = (16, 6), facecolor = \"#e5e5e5\", sharey = True)\n\nsns.countplot(x = \"retention_1\", data = df, hue = \"version\",\n              ax = axes[0], palette = [\"#0EB8F1\", \"#F1480F\"]).set_title(\"Gate 30\")\n\nsns.countplot(x = \"retention_7\", data = df, hue = \"version\",\n              ax = axes[1], palette = [\"#0EB8F1\", \"#F1480F\"]).set_title(\"Gate 40\")\n\nfor ax in axes:\n    \n    ax.set_facecolor(\"#e5e5e5\")\n    ax.get_legend().remove()\n    ax.set_yticks([])\n    \n    for p in ax.patches:\n        \n        txt = p.get_height()\n        ax.text(p.get_x() + 0.125, p.get_height()*1.01, txt, fontsize = 10)\n        \naxes[1].set_ylabel(\"\")\n        \nhandles, labels = axes[0].get_legend_handles_labels()\nfig.legend(handles, labels, loc = \"upper center\")\n\nsns.despine(left = True, bottom = True)\nplt.show()","19d87be4":"cross1 = pd.crosstab(df[\"version\"], df[\"retention_1\"])\ncross1","78278878":"cross7 = pd.crosstab(df[\"version\"], df[\"retention_7\"])\ncross7","07a544b6":"def test_chi2(crosstable, alpha = 0.05):\n    \n    print(\"H0: Variable 1 and Variable 2 are independent. \"\n          \"Version and retention day are independent.\")\n    print(\"H1: Variable 1 and Variable 2 are dependent. \"\n          \"Version and retention day are dependent. \\n\")\n    \n    chi2, p, dof, expected = stats.chi2_contingency(crosstable, correction = False)\n    chi2, p, dof, expected \n    \n    print(\"Observed frequencies: \")\n    display(crosstable)\n    \n    print(f\"Chi-square test statistic is {chi2}\")\n    print(f\"p value for test is {p}\")\n    print(f\"Degrees of freedom (num rows - 1) * (num columns - 1) is {dof}\")\n    \n    print(f\"\\nExpected frequencies: \")\n    display(pd.DataFrame(expected, index = [\"gate_30\", \"gate_40\"]))\n    \n    if p <= alpha:\n        print(f\"\\nWe can reject null hypothesis for {alpha} significance level. \" \n              \"There is a statistically significant relation between version and retention.\")\n    else:\n        print(f\"\\nWe can not reject null hypothesis for {alpha} significance level. \"\n              \"There is no statistically significant relation between version and retention.\")","38cda1e2":"print(\"\\033[1mChi-sqaure test for version and retention_1\\033[0m:\\n\")\ntest_chi2(cross1)","71658919":"print(\"\\033[1mChi-sqaure test for version and retention_7\\033[0m \\n\")\ntest_chi2(cross7)","8b40db27":"df.groupby(\"version\")[[\"sum_gamerounds\", \"retention_1\", \"retention_7\"]].mean()","ef828ae2":"In this problem, we have an extreme outlier that can be hurt our analysis. Let's examine it.","0df7c147":"Q-Q plot shortly shows distribution of our data points against expected normal distribution.\n\nIf it is normal, values are near the 45\u00b0 line.","d054d538":"[take me to the top](#section-top)","4580c09c":"**Assumptions for the Mann Whitney U Test**\n\n- The dependent variable should be measured on an ordinal scale or a continuous scale.\n\n- The independent variable should be two independent, categorical groups.\n\n- Observations should be independent. In other words, there should be no relationship between the two groups or within each group.\n\n- Observations are not normally distributed. However, they should follow the same shape (i.e. both are bell-shaped and skewed left).\n\n*https:\/\/www.statisticshowto.com\/mann-whitney-u-test\/","03f744c1":"For performing Chi-Square test, we need contingency table. Contingency table is simply, tabular representation of categorical variables.\n\nIn pandas, we can create contingency table with using pd.crosstab.","c6cfe187":"<a id=\"section-one\"><\/a>\n\n# 1. Basic Informations about Data","71df32d4":"[take me to the top](#section-top)","dee10d9d":"Below function simply, takes two series and performs Mann Whitney U for comparison. It just prints hypothesis, statistics and results.","d727cced":"Secondly, we compare version and seven day retention (retention_7). For Chi-Squre independence test, our p-value is 0.001.\n\nWe can say that, for 0.05 alpha, there is a statistically significant relation between version and seven day retention.","b5cc2955":"[take me to the top](#section-top)","48c69766":"<a id=\"section-two\"><\/a>\n# 2. Basic Visualization & Checking Outliers","af8cf467":"<a id=\"section-three-two\"><\/a>\n## 3.2 Checking Normality with Statistical Tests","04e73a6d":"In our example, sum_gamerounds variable has right skewed distribution. We already interpret that its distribution is not normal, but let's see its qq-plot.","9ae8ed80":"[take me to the top](#section-top)","8b45eba3":"<a id=\"section-three-one\"><\/a>\n## 3.1 Q-Q Plot for Normality","390067b6":"The Chi-Square Test of Independence determines whether there is an association between categorical variables (i.e., whether the variables are independent or related). It is a nonparametric test.\n\nhttps:\/\/libguides.library.kent.edu\/spss\/chisquare","5f04c1b3":"**Assumptions**\n\n1) Two categorical variables.\n\n2) Two or more categories (groups) for each variable.\n\n3) Independence of observations.\n\n- There is no relationship between the subjects in each group.\n\n- The categorical variables are not \"paired\" in any way (e.g. pre-test\/post-test observations).\n\n4) Relatively large sample size.\n\n- Expected frequencies for each cell are at least 1.\n\n- Expected frequencies should be at least 5 for the majority (80%) of the cells.\n\nhttps:\/\/libguides.library.kent.edu\/spss\/chisquare","5d91cd16":"Here, we can see, for gate_30 version, 75% quantile is 50 and, our max value for this series is nearly 50k. It could be an typo, we should remove it.","30f4bb32":"<a id=\"section-three\"><\/a>\n# 3. Checking Normality","081a06a9":"After removing that outlier, our grap is more understandable. Basically, sum_gamerounds distribution for gate 30 and gate 40 versions are similar. Most of sum_gamerounds is between 0-250. The distribution is right skewed.","02c8741b":"I define a simple function for chi2 test. This function takes contingency table as input, prints hypothesis, test statistics and returns its result.","0390f667":"## Chi-Square Test of Independence","74d23ba5":"[take me to the top](#section-top)","6894f2ff":"We know, sum_gamerounds variable has right-skewed distribution. It is far away from normality. We know it from kdeplot, histplot and, qq plot. Let's proove it with statistical tests.","127234e6":"[take me to the top](#section-top)","17390313":"<a id=\"section-zero\"><\/a>\n# 0. Introduction","02d38763":"Above graph is sum_gamerounds distribution for version. Outlier makes our plot unclear.","96a985dd":"For better understand, we have 9 qq-plot that belong to 9 different normal distributed series, created with numpy's random generator. Series are same mu and sigma, 0 and 1.","4c317956":"I just define below function for checking normality.\n\nThis function takes a series as input, prints hypothesis, skewness, kurtosis. Applies a normality test for its sample size and prints result.\n\n*For N > 5000 the W test statistic is accurate but the p-value may not be.\nhttps:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.stats.shapiro.html\n\nhttps:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.stats.normaltest.html","38f7bff3":"In this notebook, I simply apply statistical tests for comparing relations between variables and groups.","4edc0c02":"<a id=\"section-five\"><\/a>\n\n# 5. Comparing Groups: retention days","35977dd3":"[take me to the top](#section-top)","f5d1d01b":"We don't have normal distributed variable. (Non-Parametric) For that reason, I will apply Mann Whitney U test for comparing our groups.\n\nIf we have normal distributed variable, we can perform parametric tests. In this problem, it is t-test.","383bba66":"As you can see, the values are lie over the straight line. If we have normal distributed data, we expect that behaivor.","a7fc139e":"<a id=\"section-six\"><\/a>\n\n# 6. Conclusion","dab04ff8":"# Variables\n- **userid** - a unique number that identifies each player.\n- **version** - whether the player was put in the control group (gate_30 - a gate at level 30) or the test group (gate_40 - a gate at level 40).\n- **sum_gamerounds** - the number of game rounds played by the player during the first week after installation\n- **retention_1** - did the player come back and play 1 day after installing?\n- **retention_7** - did the player come back and play 7 days after installing?\n\n*https:\/\/www.kaggle.com\/yufengsui\/datacamp-project-mobile-games-a-b-testing","00796a9a":"If we need to summarise briefly;\n\nWe apply **Mann Whitney U** test for comparing sum_gamerounds for both version. \n\nFor Mann Whitney U test, we don't have statistically significant difference between groups. They have similar sum_gamerounds.\n\n\nFor retention days,\n\nWe apply **Chi-Square Independence test** for comparing the relation between version and retention day.\n\nFor Chi-Square test; there is no statistically significant relation between one day retention and mobile game version.\n\nBut, there is a statistically significant relation between seven day retention and mobile game version.","8f904c76":"[take me to the top](#section-top)","1192dd11":"<a id=\"section-five-one\"><\/a>\n\n## 5.1 Chi-Square Tests Results","226d2ab3":"<a id=\"section-four\"><\/a>\n\n# 4. Comparing Groups: sum_gamerounds","8cedc710":"First, we compare version and one day retention (retention_1). For Chi-Square independence test, our p-value is 0.07.\n\nWe can say that, for 0.05 alpha, there is no statistically significant relation between version and one day retention.","d362bd4f":"<a id=\"section-top\"><\/a>\n\n# Table of Contents\n\n**0)** [Introduction](#section-zero)\n\n**1)** [Basic Informations about Data](#section-one)\n\n**2)** [Basic Visualization & Checking Outliers](#section-two)\n\n**3)** [Checking Normality](#section-three)\n\n- [Q-Q Plot](#section-three-one)\n\n- [Checking Normality with Statistical Tests](#section-three-two)\n\n**4)** [Comparing Groups: sum_gamerounds](#section-four)\n\n**5)** [Comparing Groups: retention days](#section-five)\n\n- [Test Results](#section-five-one)\n\n**6)** [Conclusion](#section-six)","8bbf4a57":"# Project Description\nCookie Cats is a hugely popular mobile puzzle game developed by Tactile Entertainment. It's a classic \"connect three\" style puzzle game where the player must connect tiles of the same color in order to clear the board and win the level. It also features singing cats. We're not kidding!\n\nAs players progress through the game they will encounter gates that force them to wait some time before they can progress or make an in-app purchase. In this project, we will analyze the result of an A\/B test where the first gate in Cookie Cats was moved from level 30 to level 40. In particular, we will analyze the impact on player retention.\n\nTo complete this project, you should be comfortable working with pandas DataFrames and with using the pandas plot method. You should also have some understanding of hypothesis testing and bootstrap analysis.\n\n*https:\/\/app.datacamp.com\/learn\/projects\/184","9d8cab1c":"[take me to the top](#section-top)"}}