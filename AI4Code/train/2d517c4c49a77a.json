{"cell_type":{"27308b30":"code","385e46c5":"code","08035470":"markdown","04f5828e":"markdown"},"source":{"27308b30":"import time\nimport pandas as pd\nimport numpy as np\n\nCITY_DATA = { 'chicago': '\/kaggle\/input\/udacity-us-bikeshare-data\/chicago.csv',\n              'new york city': '\/kaggle\/input\/udacity-us-bikeshare-data\/new_york_city.csv',\n              'washington': '\/kaggle\/input\/udacity-us-bikeshare-data\/washington.csv' }\n\n#where\ncities=['chicago','new york city','washington']\nmonths=['January', 'February', 'March', 'April', 'May', 'June', 'July','August', 'September', 'October', 'November', 'December','All']\ndays=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday','All']\n\ndef get_filters():\n    \"\"\"\n    Asks user to specify a city, month, and day to analyze.\n\n    Returns:\n        (str) city - name of the city to analyze\n        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n    \"\"\"\n    print('Hello! Let\\'s explore some US bikeshare data!')\n    \n    \n    \n     # get user input for city (chicago, new york city, washington).\n    while True:\n        city=str(input('Select a city . \\n')).lower()\n        if city not in cities:\n            print('invalid city name,Please enter a valid one')\n        else:\n            break\n\n    # get user input for month (all, january, february, ... , june)\n    while True:\n        month=str(input('to filter by month ,put the month. If not, type in all\\n')).title()\n        if month not in months:\n            print('invalid month,Please enter a valid one')\n        else:\n            break\n\n    # get user input for day of week (all, monday, tuesday, ... sunday)\n    while True:\n        day=str(input('to filter by day,put the day. If not, type in all\\n')).title()\n        if day not in days:\n            print('invalid day,Please enter a valid one')\n        else:\n            break\n\n\n    print('-'*40)\n    return city, month, day\n\n\ndef load_data(city, month, day):\n    \"\"\"\n    Loads data for the specified city and filters by month and day if applicable.\n\n    Args:\n        (str) city - name of the city to analyze\n        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n    Returns:\n        df - Pandas DataFrame containing city data filtered by month and day\n    \"\"\"\n\n    # load data into a df\n    df = pd.read_csv(CITY_DATA[city])\n\n    # convert Start Time column to datetime\n    df['Start Time'] = pd.to_datetime(df['Start Time'])\n\n    # create new columns for month and day\n    df['month'] = df['Start Time'].dt.month\n    df['day_of_week'] = df['Start Time'].dt.day\n\n    # filter by month\n    if month != 'All':\n        month = months.index(month) + 1\n        df = df[df['month'] == month]\n\n    # filter by day\n    if day != 'All':\n        df = df[df['day_of_week'] == day]\n\n    return df\n\n\ndef time_stats(df):\n    \"\"\"Displays statistics on the most frequent times of travel.\"\"\"\n\n    print('\\nCalculating The Most Frequent Times of Travel...\\n')\n    start_time = time.time()\n\n     # display the most common month\n        \n    month_mode=df['month'].mode()[0]\n    print('The most common month is: {}'.format(months[month_mode-1]))\n    \n    # display the most common day of week\n    \n    print('The most common day is: {}'.format(df['day_of_week'].mode()[0]))\n    \n    # display the most common start hour\n    \n    df['hour'] = df['Start Time'].dt.hour\n    print('The most common start hour is: {}'.format(df['hour'].mode()[0]))\n\n\n    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n    print('-'*40)\n\n\ndef station_stats(df):\n    \"\"\"Displays statistics on the most popular stations and trip.\"\"\"\n\n    print('\\nCalculating The Most Popular Stations and Trip...\\n')\n    start_time = time.time()\n\n    # display most commonly used start station\n    \n    print('The most common start station is: {}'.format(df['Start Station'].mode()[0]))\n    \n    # display most commonly used end station\n    \n    print('The most common end station is: {}'.format(df['End Station'].mode()[0]))\n    \n    # display most frequent combination of start station and end station trip\n    \n    most_common_combination = df['Start Station'].map(str) + ' to ' + df['End Station']\n    print('The most popular combination is: {}'.format(most_common_combination.mode()[0]))\n        \n        \n    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n    print('-'*40)\n\n\ndef trip_duration_stats(df):\n    \"\"\"Displays statistics on the total and average trip duration.\"\"\"\n\n    print('\\nCalculating Trip Duration...\\n')\n    start_time = time.time()\n\n    # TO DO: display total travel time\n    total_m, total_s = divmod(df['Trip Duration'].sum(), 60)\n    total_h, total_m = divmod(total_m, 60)\n    print ('The total travel time is: ',total_h,' hours, ', total_m,' minutes, and ', total_s,' seconds.')\n\n    # TO DO: display mean travel time\n\n    mean_m, mean_s = divmod(df['Trip Duration'].mean(), 60)\n    mean_h, mean_m = divmod(mean_m, 60)\n    print ('The mean travel time is: ',mean_h,' hours, ', mean_m,' minutes, and ', mean_s,' seconds.')\n    \n\n    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n    print('-'*40)\n\n\ndef user_stats(df):\n    \"\"\"Displays statistics on bikeshare users.\"\"\"\n\n    print('\\nCalculating User Stats...\\n')\n    start_time = time.time()\n\n    # TO DO: Display counts of user types\n    \n    print('The user can be broken down into \\n{}'.format(df['User Type'].value_counts()))\n\n\n    # TO DO: Display counts of gender\n    if('Gender' not in df):\n        print('Sorry! Gender data unavailable for Washington')\n    else:\n        print('The genders are \\n{}'.format(df['Gender'].value_counts()))\n\n    # TO DO: Display earliest, most recent, and most common year of birth\n\n\n    if ('Birth Year' not in df):\n        print('Sorry! Birth year data unavailable for Washington')\n    else:\n        print('The Earliest birth year is: {}'.format(df['Birth Year'].min()))\n        print('The most recent birth year is: {}'.format(df['Birth Year'].max()))\n        print('The most common birth year is: {}'.format(df['Birth Year'].mode()[0]))\n        \n    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n    print('-'*40)\n\ndef view_data(df):\n    start=0\n    choice=input('\\nDo you want to view the data? Enter yes or no.\\n')\n    while choice=='yes':\n        try:\n            n=int(input('Enter the number of rows to view\\n'))\n            n=start+n\n            print(df[start:n])\n            choice=input('More rows? Enter yes or no.\\n')\n            start=n\n\n        except ValueError:\n            print('Enter appropriate integer value')\n\n\n","385e46c5":"# def main():\n#     while True:\n        \n#         data_name,column,app_filter=apply_filter()\n#         print('Your data is ready \\n')\n#         data = all_data[data_name]\n#         new_data = data[data[column]==app_filter]\n#         print(new_data)\n#         restart = input('\\nWould you like to restart? Enter yes or no.\\n')\n#         if restart.lower() != 'yes':\n#             break\n\n# #  return new_data\n    \n# if __name__ == \"__main__\":\n#     main()","08035470":"### remove the comment to run the code\n","04f5828e":"### introduction\n#### In this project, we will make use of Python to explore data related to bike share systems for three major cities in the United States\u2014Chicago, New York City, and Washington. we will write code to import the data and answer interesting questions about it by computing descriptive statistics. we will also write a script that takes in raw input to create an interactive experience in the terminal to present these statistics. Bike Share Data Over the past decade, bicycle-sharing systems have been growing in number and popularity in cities across the world. Bicycle-sharing systems allow users to rent bicycles on a very short-term basis for a price. This allows people to borrow a bike from point A and return it at point B, though they can also return it to the same location if they'd like to just go for a ride. Regardless, each bike can serve several users per day."}}