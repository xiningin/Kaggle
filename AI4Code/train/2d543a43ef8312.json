{"cell_type":{"98b9460f":"code","d94bf512":"code","51a0378c":"code","9dec103e":"code","00ffdc42":"code","38f07c4a":"code","719b695e":"code","034aa4a2":"code","1257b867":"code","1456621b":"code","8a5d9e7e":"code","2656decd":"code","97c06055":"code","a5474734":"code","e47dcfcd":"code","2e888d5d":"code","9c802b95":"code","9891ad55":"code","40282311":"code","c5b92d00":"code","9743b7ba":"code","606e5c1c":"code","89bbfe7c":"code","63ba9078":"code","64ec5b27":"code","d33173b1":"code","a167befb":"markdown","8db2329d":"markdown","78c47c4d":"markdown","0bb9e1b1":"markdown","262050c5":"markdown"},"source":{"98b9460f":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport pandas_profiling as pp \n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report,accuracy_score,f1_score,precision_score,recall_score,roc_curve,roc_auc_score\n\nimport warnings\nwarnings.filterwarnings('ignore')\n","d94bf512":"df=pd.read_csv(\"..\/input\/diabetes-dataset\/diabetes2.csv\")","51a0378c":"df.columns","9dec103e":"df.shape","00ffdc42":"df.info()","38f07c4a":"df.isnull().sum()","719b695e":"#Counting Zero Values for each column:Glucose,BloodPressure,SkinThickness,Insulin,BMI\nzero_attributes=[\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\"]\ndef zero_values(df,zero_attributes):\n    for i in zero_attributes:\n        df_count=df.loc[df[i] == 0]\n        x=(df_count[i].count()\/df[i].count())*100\n        x=round(x,2)\n        print(f'The Number of zero values in column {i} is {x}')\nzero_values(df,zero_attributes)","034aa4a2":"df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = \\\ndf[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)","1257b867":"100 * df.isna().sum() \/ df.shape[0]","1456621b":"df['Glucose'].fillna(df['Glucose'].mean(), inplace = True)\ndf['BloodPressure'].fillna(df['BloodPressure'].mean(), inplace = True)\n#df['SkinThickness'].fillna(df['SkinThickness'].median(), inplace = True)\n# df['Insulin'].fillna(df['Insulin'].median(), inplace = True)\ndf['BMI'].fillna(df['BMI'].mean(), inplace = True)","8a5d9e7e":"df.drop(['SkinThickness', 'Insulin'], axis = 1, inplace = True)","2656decd":"df.isna().sum()","97c06055":"de=df.copy()","a5474734":"pp.ProfileReport(df)","e47dcfcd":"c=[0,1,2]\nr=[0,1]\ncols_index=0\ncols=df.columns[:-1]\nfig,axs = plt.subplots(2, 4,figsize=(20,12))\nfor i in r:\n    for j in c:              \n        box_plot = sns.boxplot(x=\"Outcome\",y=cols[cols_index],data=df,ax=axs[i,j])\n        medians = df.groupby([\"Outcome\"])[cols[cols_index]].median()\n        vertical_offset = df[cols[cols_index]].median() * 0.05 \n        cols_index+=1","2e888d5d":"sns.heatmap(df.corr(), annot=True)\nplt.show()","9c802b95":"X = de.drop(\"Outcome\",axis =1)\ny = de[\"Outcome\"]\n\ndatalist = df.columns.values.tolist()\ndatalist.remove(\"Outcome\")","9891ad55":"X_train, X_test, y_train, y_test= train_test_split(X,y, test_size= 0.25, random_state=120)","40282311":"scaler = MinMaxScaler()\n#continuous\ndata_scaled =['Glucose', 'BloodPressure', 'BMI',\n        'DiabetesPedigreeFunction', 'Age']\n\nX_train[data_scaled] = scaler.fit_transform(X_train[data_scaled])","c5b92d00":"model= LogisticRegression()\n\nmodel.fit(X_train, y_train)\ntrainscore =  model.score(X_train,y_train)","9743b7ba":"\n#continuous\nX_test[data_scaled] = scaler.transform(X_test[data_scaled]) \n\ntestscore =  model.score(X_test,y_test)  ","606e5c1c":"print(\"test score: {} \\ntrain score: {}\".format(testscore*100,trainscore*100),'\\n')\n\ny_pred =  model.predict(X_test)","89bbfe7c":"from sklearn.metrics import confusion_matrix\n\nprint(\"Confusion Matrix : \\n\",confusion_matrix(y_test, y_pred))","63ba9078":"print(' f1 score: ',f1_score(y_test, y_pred)*100,'\\n')\nprint(' Accuracy: ',accuracy_score(y_test, y_pred)*100,'\\n')\nprint(' precision score: ',precision_score(y_test, y_pred)*100,'\\n')\nprint(' recall score: ',recall_score(y_test, y_pred)*100,'\\n')\nprint(\" Classification report: \\n\",classification_report(y_test, y_pred))","64ec5b27":"probabilityValues = model.predict_proba(X_test)[:,1]\nauc = roc_auc_score(y_test, y_pred)\nprint(\"AUC Score: \",auc*100)\n","d33173b1":"fpr,tpr, threshold =  roc_curve(y_test,probabilityValues)\nplt.plot([0,1],[0,1], linestyle = '--')\nplt.plot(fpr,tpr)","a167befb":"\n<p align=\"center\">\n  <img width=\"1000\" height=\"900\" src=\"https:\/\/www.niddk.nih.gov\/-\/media\/Images\/Health-Information\/Diabetes\/diabetes-monitor-fruits-vegetables-small_597x347.png\">\n<\/p>\n\n","8db2329d":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:white;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:#3cb371;font-size:200%;text-align:center\">Logistic Regression, in order to predict if the patient is diabetic or not<\/p>\n<\/div>  ","78c47c4d":"**ABOUT COLUMNS**\n* Pregnancies: Number of times pregnant\n* Glucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n* BloodPressure: Diastolic blood pressure (mm Hg)\n* SkinThickness: Triceps skin fold thickness (mm)\n* Insulin: 2-Hour serum insulin (mu U\/ml)\n* BMI: Body mass index (weight in kg\/(height in m)^2)\n* DiabetesPedigreeFunction: Diabetes pedigree function\n* Age: Age (years)\n* Outcome: Class variable (0 or 1)","0bb9e1b1":"Model building","262050c5":"![](https:\/\/thebritishschoolofetiquette.com\/wp-content\/uploads\/2018\/12\/Article-Size-Pictures7.webp)"}}