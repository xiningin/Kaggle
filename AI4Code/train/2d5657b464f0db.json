{"cell_type":{"9723f571":"code","195f265f":"code","126260eb":"code","785bf38c":"code","1b787163":"code","be7c5e79":"code","54b01614":"code","36815df6":"code","f190ed4d":"code","8ec7ebd5":"code","e35ed294":"code","fca01699":"code","61893150":"code","777043d2":"code","4bb70171":"code","66934b2e":"code","d581adc5":"code","d645d7f4":"code","a4bacf3f":"code","1c03e6ef":"code","339f7f32":"code","148eeb0d":"code","45c3a6ed":"code","9e15a99a":"code","cce0806f":"code","04352376":"code","331dea7d":"code","3e8a3d3b":"code","db8a5844":"code","2434a3c1":"code","c4172818":"code","2b449f53":"code","b4ba69cd":"code","16b97739":"code","20b1c19f":"code","85b8c939":"code","ae187dfd":"code","a2806b0e":"code","73040924":"code","7b5b5e45":"code","b1891457":"code","260c7530":"code","fd062086":"code","210e0cd1":"code","2fda016e":"code","95f7a9a7":"code","9d72ab4c":"code","02964e98":"code","2f482abe":"code","089c6e93":"code","dbf10273":"code","40253652":"code","27d940b9":"code","0c9e0cda":"code","1a651a3f":"code","335d92df":"code","e731cd97":"code","35bfe2ba":"code","dd6fe76d":"code","e5cbf31b":"code","dc0bc54a":"code","f9f5ac7a":"code","dd88ad12":"code","8590995e":"code","1090ded7":"code","4e9845bc":"code","2bc9fdb0":"code","6a9d3058":"code","18e8e4dd":"code","6bbc06aa":"code","70c723a2":"code","abd21e4c":"code","52785e3a":"code","6a10404d":"code","e25dda11":"code","ca0992b6":"code","f1550477":"code","1259a494":"markdown","94e1eb7c":"markdown","8861f623":"markdown","16d9e934":"markdown","549f50c8":"markdown","79e62d2b":"markdown","0b75a02e":"markdown","9270d3f9":"markdown","fac8da71":"markdown","10654026":"markdown","6f62df42":"markdown","2caec766":"markdown","08d03ea8":"markdown","8bda7d05":"markdown","16305e76":"markdown","e5b21779":"markdown","5d3698dd":"markdown","8f7145bb":"markdown","b797dd7c":"markdown","7b9a6fa6":"markdown","0717d21f":"markdown","4f52be7f":"markdown","432b83af":"markdown"},"source":{"9723f571":"# NumPy is a Linear Algebra Library used for multidimensional arrays\n# NumPy brings the best of two worlds: (1) C\/Fortran computational efficiency, (2) Python language easy syntax \n\nimport numpy as np\n\n# Let's define a one-dimensional array \nlist_1 = [50, 60, 80, 100, 200, 300, 500, 600]\nlist_1","195f265f":"# Let's create a numpy array from the list \"my_list\"\nmy_numpy_array = np.array(list_1)\nmy_numpy_array","126260eb":"type(my_numpy_array)","785bf38c":"# Multi-dimensional (Matrix definition) \nmy_matrix = np.array([ [2, 5, 8], [7, 3, 6] ])\nmy_matrix","1b787163":"my_matrix = np.array([ [3,7,9,3], [4,3,2,2] ])\nmy_matrix","be7c5e79":"# \"rand()\" uniform distribution between 0 and 1\nx = np.random.rand(20)\nx","54b01614":"# you can create a matrix of random number as well\nx = np.random.rand(3,3)\nx","36815df6":"# \"randint\" is used to generate random integers between upper and lower bounds\nx = np.random.randint(1, 50)\nx","f190ed4d":"# \"randint\" can be used to generate a certain number of random itegers as follows\nx = np.random.randint(1,100,15)\nx","8ec7ebd5":"# np.arange creates an evenly spaced values within a given interval\nx = np.arange(1,50)\nx","e35ed294":"# create a diagonal of ones and zeros everywhere else\nx = np.eye(7)\nx","fca01699":"# Matrix of ones\nx = np.ones((7,7))\nx","61893150":"# Array of zeros\nx = np.zeros(8)\nx","777043d2":"#x = int(input(\"Please enter a positive integer value: \"))\nx = 20\nmy_array = np.random.randint(1, x, 10)\nmy_array","4bb70171":"# np.arange() returns an evenly spaced values within a given interval\nx = np.arange(1,10)\nx","66934b2e":"y = np.arange(1,10)\ny","d581adc5":"# Add 2 numpy arrays together\nsum = x + y\nsum","d645d7f4":"squared = x**2\nsquared","a4bacf3f":"sqrt = np.sqrt(squared)\nsqrt","1c03e6ef":"z = np.exp(y)\nz","339f7f32":"x = np.array([5, 9, 20])\ny = np.array([9, 15, 4])\ndistance = np.sqrt(x**2 + y**2)\ndistance","148eeb0d":"my_numpy_array = np.array([3, 5, 6, 2, 8, 10, 20, 50])\nmy_numpy_array ","45c3a6ed":"# Access specific index from the numpy array\nmy_numpy_array[0]\nmy_numpy_array[-1]","9e15a99a":"# Starting from the first index 0 up until and NOT including the last element\nmy_numpy_array[0:3]","cce0806f":"# Broadcasting, altering several values in a numpy array at once\nmy_numpy_array[0:4] = 7\nmy_numpy_array","04352376":"# Let's define a two dimensional numpy array\nmatrix = np.random.randint(1, 10, (4,4))\nmatrix","331dea7d":"# Get a row from a mtrix\nmatrix[0]","3e8a3d3b":"# Get one element\nmatrix[0][1]","db8a5844":"matrix = np.array([[2, 30, 20, -2, -4], \n                         [2, 4, 40, -3, -2], \n                         [-3, 4, -6, 90, 10], \n                         [25, 45, 34, 22, 12], \n                         [13, 24, 22, 32, 37]])\nmatrix","2434a3c1":"matrix[4] = 0\nmatrix","c4172818":"matrix = np.random.randint(1, 10, (5, 5))\nmatrix","2b449f53":"new_matrix = matrix[matrix > 7]\nnew_matrix","b4ba69cd":"# Obtain odd elements only\nnew_matrix = matrix[matrix % 2 == 1]\nnew_matrix","16b97739":"matrix = np.array([[2, 30, 20, -2, -4],\n                   [3, 4,  40, -3, -2],\n                   [-3, 4, -6, 90, 10],\n                   [25, 45, 34, 22, 12],\n                   [13, 24, 22, 32, 37]])\nmatrix","20b1c19f":"matrix[matrix < 0] = 0\nmatrix","85b8c939":"matrix[matrix %2 == 1] = -2\nmatrix","ae187dfd":"# Pandas is a data manipulation and analysis tool that is built on Numpy.\n# Pandas uses a data structure known as DataFrame (think of it as Microsoft excel in Python). \n# DataFrames empower programmers to store and manipulate data in a tabular fashion (rows and columns).\n# Series Vs. DataFrame? Series is considered a single column of a DataFrame.","a2806b0e":"import pandas as pd","73040924":"# Let's define a two-dimensional Pandas DataFrame\n# Note that you can create a pandas dataframe from a python dictionary\nbank_client_df = pd.DataFrame({'Bank Client ID':[111, 222, 333, 444],\n                               'Bank Client Name':['Chanel', 'Steve', 'Mitch', 'Ryan'],\n                               'Net Worth[$]':[3500, 29000, 10000, 2000],\n                               'Years with Bank':[3, 4, 9, 5]})\nbank_client_df\n","7b5b5e45":"# Let's obtain the data type \ntype(bank_client_df)\n","b1891457":"# you can only view the first couple of rows using .head()\nbank_client_df.head(2)\n","260c7530":"# you can only view the last couple of rows using .tail()\nbank_client_df.tail(2)\n","fd062086":"portfolio_df = pd.DataFrame({'Stock Ticker Symbols':['AAPL', 'GOOG', 'FB'],\n                             'Number of Stocks':[10, 10, 10],\n                             'Price per Stock[$]':[2, 3, 4]})\nportfolio_df","210e0cd1":"stocks_total_value = portfolio_df['Price per Stock[$]'] * portfolio_df['Number of Stocks']\nstocks_total_value","2fda016e":"stocks_total_value.sum()","95f7a9a7":"# Pandas is used to read a csv file and store data in a DataFrame\n","9d72ab4c":"# Read tabular data using read_html\n# house_price_df = pd.read_html('https:\/\/www.livingin-canada.com\/house-prices-canada.html')\n# house_price_df[0]","02964e98":"# retirement_df = pd.read_html('https:\/\/www.ssa.gov\/oact\/progdata\/nra.html')\n# retirement_df[0]","2f482abe":"# Let's define a dataframe as follows:\nbank_client_df = pd.DataFrame({'Bank Client ID':[111, 222, 333, 444],\n                               'Bank Client Name':['Chanel', 'Steve', 'Mitch', 'Ryan'],\n                               'Net Worth[$]':[3500, 29000, 10000, 2000],\n                               'Years with bank':[3, 4, 9, 5]})\nbank_client_df","089c6e93":"# Pick certain rows that satisfy a certain criteria \nloyal_df = bank_client_df[bank_client_df['Years with bank']>=5]\nloyal_df","dbf10273":"# Delete a column from a DataFrame\ndel bank_client_df['Bank Client ID']\nbank_client_df","40253652":"high_networth_df = bank_client_df[bank_client_df['Net Worth[$]'] >= 5000]\nhigh_networth_df","27d940b9":"high_networth_df['Net Worth[$]'].sum()","0c9e0cda":"# Let's define a dataframe as follows:\nbank_client_df = pd.DataFrame({'Bank Client ID':[111, 222, 333, 444], \n                               'Bank Client Name':['Chanel', 'Steve', 'Mitch', 'Ryan'], \n                               'Net Worth[$]':[3500, 29000, 10000, 2000], \n                               'Years with Bank':[3, 4, 9, 5]})\nbank_client_df","1a651a3f":"# Define a function that increases all clients networth (stocks) by a fixed value of 20% (for simplicity sake) \ndef networth_update(balance): \n    return balance*1.2","335d92df":"# You can apply a function to the DataFrame \nbank_client_df['Net Worth[$]'].apply(networth_update)","e731cd97":"bank_client_df['Bank Client Name'].apply(len)","35bfe2ba":"def networth_update(balance): \n    return balance * 3 + 200","dd6fe76d":"result = bank_client_df['Net Worth[$]'].apply(networth_update)\nresult","e5cbf31b":"result.sum()","dc0bc54a":"# Let's define a dataframe as follows:\nbank_client_df = pd.DataFrame({'Bank Client ID':[111, 222, 333, 444], \n                               'Bank Client Name':['Chanel', 'Steve', 'Mitch', 'Ryan'], \n                               'Net Worth[$]':[3500, 29000, 10000, 2000], \n                               'Years with Bank':[3, 4, 9, 5]})\nbank_client_df","f9f5ac7a":"# You can sort the values in the dataframe according to number of years with bank\nbank_client_df.sort_values(by = 'Years with Bank')\n","dd88ad12":"# Note that nothing changed in memory! you have to make sure that inplace is set to True\nbank_client_df","8590995e":"# Set inplace = True to ensure that change has taken place in memory \nbank_client_df.sort_values(by = 'Years with Bank', inplace = True)","1090ded7":"# Note that now the change (ordering) took place \nbank_client_df","4e9845bc":"# Check this out: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/merging.html","2bc9fdb0":"df1 = pd.DataFrame({'A':['A0',' A1', 'A2', 'A3'],\n                    'B':['B0', 'B1', 'B2', 'B3'], \n                    'C':['C0', 'C1', 'C2', 'C3'], \n                    'D':['D0', 'D1', 'D2', 'D3']}, index=[0,1,2,3])\ndf1","6a9d3058":"df2 = pd.DataFrame({'A':['A4',' A5', 'A6', 'A7'],\n                    'B':['B4', 'B5', 'B6', 'B7'], \n                    'C':['C4', 'C5', 'C6', 'C7'], \n                    'D':['D4', 'D5', 'D6', 'D7']}, index=[4,5,6,7])\ndf2","18e8e4dd":"df3 = pd.DataFrame({'A':['A8',' A9', 'A10', 'A11'],\n                    'B':['B8', 'B9', 'B10', 'B11'], \n                    'C':['C8', 'C9', 'C10', 'C11'], \n                    'D':['D8', 'D9', 'D10', 'D11']}, index=[8,9,10,11])\ndf3","6bbc06aa":"pd.concat([df1, df2, df2])","70c723a2":"bank_df1 = pd.DataFrame({'client_id':[1, 2, 3, 4, 5], \n                         'first_name':['Ana', 'Maria', 'John', 'Peter', 'Daniel'],\n                         'last_name':['A', 'B', 'C', 'D', 'E']})\nbank_df1","abd21e4c":"bank_df2 = pd.DataFrame({'client_id':[6, 7, 8, 9, 10], \n                         'first_name':['David', 'Beth', 'Chris', 'Tony', 'Serena'],\n                         'last_name':['H', 'M', 'G', 'L', 'E']})\nbank_df2","52785e3a":"all_clients_df = pd.concat([bank_df1, bank_df2])\nall_clients_df","6a10404d":"annual_salary_df = pd.DataFrame({'client_id':[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n                                 'annual_salary': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]})\nannual_salary_df","e25dda11":"all_clients_df = pd.merge(all_clients_df, annual_salary_df, on = 'client_id')\nall_clients_df","ca0992b6":"new_client_df = pd.DataFrame({'client_id': ['11'],\n                              'first_name': ['Eu'], \n                              'last_name': ['D'], \n                              'annual_salary':[200]})\n\nnew_client_df","f1550477":"all_clients_df = pd.concat([all_clients_df, new_client_df])\nall_clients_df","1259a494":"MINI CHALLENGE #1: \n- Write a code that creates the following 2x4 numpy array\n\n```\n[[3 7 9 3] \n[4 3 2 2]]\n```","94e1eb7c":"MINI CHALLENGE #7:\n- Write a code that uses Pandas to read tabular US retirement data\n- You can use data from here: https:\/\/www.ssa.gov\/oact\/progdata\/nra.html ","8861f623":"# TASK #10: PERFORM SORTING AND ORDERING IN PANDAS","16d9e934":"# TASK #2: LEVERAGE NUMPY BUILT-IN METHODS AND FUNCTIONS ","549f50c8":"# TASK #3: PERFORM MATHEMATICAL OPERATIONS IN NUMPY","79e62d2b":"MINI CHALLENGE #5:\n- In the following matrix, replace negative elements by 0 and replace odd elements with -2\n\n\n```\nX = [2 30 20 -2 -4]\n    [3 4  40 -3 -2]\n    [-3 4 -6 90 10]\n    [25 45 34 22 12]\n    [13 24 22 32 37]\n```\n","0b75a02e":"- Define a dataframe named 'Bank_df_1' that contains the first and last names for 5 bank clients with IDs = 1, 2, 3, 4, 5 \n- Assume that the bank got 5 new clients, define another dataframe named 'Bank_df_2' that contains a new clients with IDs = 6, 7, 8, 9, 10\n- Let's assume we obtained additional information (Annual Salary) about all our bank customers (10 customers) \n- Concatenate both 'bank_df_1' and 'bank_df_2' dataframes\n- Merge client names and their newly added salary information using the 'Bank Client ID'\n- Let's assume that you became a new client to the bank\n- Define a new DataFrame that contains your information such as client ID (choose 11), first name, last name, and annual salary.\n- Add this new dataframe to the original dataframe 'bank_df_all'.","9270d3f9":"MINI CHALLENGE #2:\n- Write a code that takes in a positive integer \"x\" from the user and creates a 1x10 array with random numbers ranging from 0 to \"x\"","fac8da71":"MINI CHALLENGE #8:\n- Using \"bank_client_df\" DataFrame, leverage pandas operations to only select high networth individuals with minimum $5000 \n- What is the combined networth for all customers with 5000+ networth?","10654026":"MINI CHALLENGE #9:\n- Define a function that triples networth and adds $200\n- Apply the function to the DataFrame\n- Calculate the updated total networth of all clients combined","6f62df42":"# TASK #6: UNDERSTAND PANDAS FUNDAMENTALS","2caec766":"# TASK #4: PERFORM ARRAYS SLICING AND INDEXING ","08d03ea8":"# TASK #9: PANDAS WITH FUNCTIONS","8bda7d05":"# TASK #8: PANDAS OPERATIONS","16305e76":"# TASK #11: PERFORM CONCATENATING AND MERGING WITH PANDAS","e5b21779":"# TASK #12: PROJECT AND CONCLUDING REMARKS","5d3698dd":"MINI CHALLENGE #3:\n- Given the X and Y values below, obtain the distance between them\n\n```\nX = [5, 7, 20]\nY = [9, 15, 4]\n```","8f7145bb":"# TASK #7: PANDAS WITH CSV AND HTML DATA","b797dd7c":"## My work in the Cousera course Python for Data Analysis: Pandas & Numpy.","7b9a6fa6":"MINI CHALLENGE #4:\n- In the following matrix, replace the last row with 0\n\n```\nX = [2 30 20 -2 -4]\n    [3 4  40 -3 -2]\n    [-3 4 -6 90 10]\n    [25 45 34 22 12]\n    [13 24 22 32 37]\n```\n\n","0717d21f":"MINI CHALLENGE #6:\n- A porfolio contains a collection of securities such as stocks, bonds and ETFs. Define a dataframe named 'portfolio_df' that holds 3 different stock ticker symbols, number of shares, and price per share (feel free to choose any stocks)\n- Calculate the total value of the porfolio including all stocks","4f52be7f":"# TASK #1: DEFINE SINGLE AND MULTI-DIMENSIONAL  NUMPY ARRAYS","432b83af":"# TASK #5: PERFORM ELEMENTS SELECTION (CONDITIONAL)"}}