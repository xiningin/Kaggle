{"cell_type":{"fb9bcd97":"code","808092b7":"code","79d8df90":"code","7d2adf0a":"code","c6dbcfc5":"code","295d639f":"code","dcd31956":"code","6f8e90f8":"code","299918ff":"code","036356b8":"code","c1c0b0d8":"code","54a88e66":"code","2d47e0b1":"code","fad5c09e":"code","1c9c1fc3":"code","b32ae92d":"code","ba9adb0b":"code","b91daba1":"code","708ffdc0":"code","8e6ea5d7":"code","4d0c3e7c":"markdown","fe46f2b9":"markdown","5d3ba1ba":"markdown","07ae675b":"markdown","c13d8aa7":"markdown","982d583b":"markdown","4695e5df":"markdown","9c21f5f4":"markdown","6f14891d":"markdown","6627fd51":"markdown","495296ad":"markdown","852d324f":"markdown","afa8bab2":"markdown","54633172":"markdown","4b711882":"markdown","e9c7382a":"markdown","95b3cad8":"markdown"},"source":{"fb9bcd97":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport os\nimport keras\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nimport cv2\nfrom keras import applications\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, Input\nfrom keras.models import Model\nfrom keras.optimizers import Adam","808092b7":"dataframe = pd.read_csv('\/kaggle\/input\/human-protein-atlas-image-classification\/train.csv')\ndataframe.head(5)","79d8df90":"INPUT_SHAPE = (512, 512, 3)\nBATCH_SIZE = 16\npath_to_train = '\/kaggle\/input\/human-protein-atlas-image-classification\/train\/'","7d2adf0a":"dataframe[\"complete_path\"] = path_to_train + dataframe[\"Id\"]\ndataframe.head(5)","c6dbcfc5":"import random\nfig, axes = plt.subplots(3, 4, figsize=(10, 10))\nfor i in range(3):\n    for j in range(4):\n        idx = random.randint(0, dataframe.shape[0])\n        row = dataframe.iloc[idx,:]\n        path = row.complete_path\n        red = np.array(Image.open(path + '_red.png'))\n        green = np.array(Image.open(path + '_green.png'))\n        blue = np.array(Image.open(path + '_blue.png'))\n        im = np.stack((\n                red,\n                green,\n                blue),-1)\n        axes[i][j].imshow(im)\n        axes[i][j].set_title(row.Target)\n        axes[i][j].set_xticks([])\n        axes[i][j].set_yticks([])\nfig.tight_layout()\nfig.show(5);","295d639f":"train, val = train_test_split(dataframe, test_size=0.2, random_state=42)\n","dcd31956":"print(f'Shape of train: {train.shape}')\nprint(f'Shape of val: {val.shape}')","6f8e90f8":"def get_clean_data(df):\n    targets = []\n    paths = []\n    for _, row in df.iterrows():\n        target_np = np.zeros((28))\n        t = [int(t) for t in row.Target.split()]\n        target_np[t] = 1\n        targets.append(target_np)\n        paths.append(row.complete_path)\n    return np.array(paths), np.array(targets)","299918ff":"train_path, train_target = get_clean_data(train)\nval_path, val_target = get_clean_data(val)","036356b8":"print(f'Train path shape: {train_path.shape}')\nprint(f'Train target shape: {train_target.shape}')\nprint(f'Val path shape: {val_path.shape}')\nprint(f'Val target shape: {val_target.shape}')\n","c1c0b0d8":"train_data = tf.data.Dataset.from_tensor_slices((train_path, train_target))\nval_data = tf.data.Dataset.from_tensor_slices((val_path, val_target))","54a88e66":"def load_data(path, target):\n    red = tf.squeeze(tf.image.decode_png(tf.io.read_file(path+'_red.png'), channels=1), [2])\n    blue = tf.squeeze(tf.image.decode_png(tf.io.read_file(path+'_blue.png'), channels=1), [2])\n    green = tf.squeeze(tf.image.decode_png(tf.io.read_file(path+'_green.png'), channels=1), [2])\n    #yellow=tf.squeeze(tf.image.decode_png(tf.io.read_file(path+'_yellow.png'), channels=1), [2])\n    img = tf.stack((\n                red,\n                green,\n                blue), axis=2)\n    return img, target\n\nAUTOTUNE = tf.data.experimental.AUTOTUNE\n\ntrain_data = train_data.map(load_data, num_parallel_calls=AUTOTUNE)\nval_data = val_data.map(load_data, num_parallel_calls=AUTOTUNE)","2d47e0b1":"def image_augment(img, target):\n    img = tf.image.random_contrast(img, lower=0.3, upper=2.0)\n    img = tf.image.random_flip_up_down(img)\n    img = tf.image.random_brightness(img, max_delta=0.1)\n    return img, target\n    \ntrain_data = train_data.map(image_augment, num_parallel_calls=AUTOTUNE)","fad5c09e":"train_data_batches = train_data.batch(BATCH_SIZE).prefetch(buffer_size=AUTOTUNE)\nval_data_batches = val_data.batch(BATCH_SIZE).prefetch(buffer_size=AUTOTUNE)","1c9c1fc3":"resnet_model = applications.ResNet50(include_top=False, weights='imagenet')\n\nresnet_model.trainable = True\n\ninput_layer = Input(shape=INPUT_SHAPE)\nx = resnet_model(input_layer)\nx = Flatten()(x)\nx = Dropout(0.5)(x)\nx = Dense(512, activation='relu')(x)\nx = Dropout(0.5)(x)\noutput = Dense(28, activation='sigmoid')(x)\nmodel = Model(input_layer, output)\n\nmodel.summary()","b32ae92d":"model.compile(optimizer=Adam(1e-3), loss='binary_crossentropy', metrics=['binary_accuracy'])","ba9adb0b":"history = model.fit(train_data_batches, steps_per_epoch = 150, validation_data = val_data_batches, epochs=10)","b91daba1":"binary_accuracy=history.history['binary_accuracy']\nval_binary_accuracy=history.history['val_binary_accuracy']\nepochs=range(1,len(binary_accuracy)+1)\nplt.plot(epochs,binary_accuracy,'b',label='Training accuracy')  \nplt.plot(epochs,val_binary_accuracy,'r',label='Validation accuracy')\nplt.title('Training and Validation accuracy')\nplt.legend()\nplt.figure()\nplt.show()","708ffdc0":"loss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs=range(1,len(binary_accuracy)+1)\nplt.plot(epochs,loss,'b',label='Training loss')\nplt.plot(epochs,val_loss,'r',label='Validation loss')\nplt.title('Training and Validation loss')\nplt.legend()\nplt.figure()\nplt.show()","8e6ea5d7":"model.save('New_model.h5')","4d0c3e7c":"creating datasets from cleaned data\n","fe46f2b9":"# **Here Importing the Eseantial libraries **","5d3ba1ba":"#  Visualizing the pictures\n\n","07ae675b":"Cleaning the data for better results ","c13d8aa7":"Better performance with the tf.data API\n","982d583b":"# Load the Lables of the images from train.csv file ","4695e5df":"Visualizing the Results ","9c21f5f4":"Spliting the data into parts train and val(valiation)","6f14891d":"# Building the Model Architecture ","6627fd51":"Now finally fit the model for trianing ...","495296ad":" Adding the column with the name of complete_path and load the full path of each image on csv ","852d324f":"Adjust the contrast of an image or images by a random factor.\n\n","afa8bab2":"printing train and val path and target\n\n","54633172":" * Defining the input shape of 1st input layer \n * decalare the batch size\n * save the path of train images in the variable 'path_to_train'","4b711882":"model compilation ","e9c7382a":"Using transfer learning and fine tuning on ReaNet50","95b3cad8":"Experimental API for building input pipelines.\n\n"}}