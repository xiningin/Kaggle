{"cell_type":{"60a8c857":"code","ce8641f9":"code","1f03e78d":"code","ca3d4b28":"code","32250b7f":"code","7757d9de":"code","75fd52b1":"code","f52134b7":"markdown"},"source":{"60a8c857":"!pip install timm\n!pip install fastai==2.5.2","ce8641f9":"from fastai.vision.all import *\nfrom torch.utils.data import Dataset, DataLoader\nimport timm\nimport albumentations as A\nfrom albumentations.pytorch import ToTensorV2\nfrom sklearn.model_selection import KFold","1f03e78d":"def get_dls(transforms, batch_size=32, n_folds=5):\n    path = Path('..\/input\/petfinder-pawpularity-score')\n    train_path = path\/'train'\n    train_df = pd.read_csv(path\/'train.csv')\n    train_files, valid_files= get_train_valid_files(path, train_df, 5)\n    train_ds = PetDS(train_files, train_df, transforms)\n    valid_ds = PetDS(valid_files, train_df, transforms)\n    train_dl = DataLoader(train_ds, batch_size=batch_size, shuffle=True, \n                          num_workers=8, pin_memory=True)\n    valid_dl = DataLoader(valid_ds, batch_size=batch_size, shuffle=False, \n                          num_workers=8, pin_memory=True)\n    dls = DataLoaders(train_dl, valid_dl)\n    return dls\n\ndef get_lbl(sample, df):\n    name = sample.name[:-4]\n    row = df[df.Id == name]\n    lbl = row.Pawpularity.item()\n    return lbl\n\ndef get_train_valid_files(path, train_df, n_splits):\n    skf = KFold(n_splits=5)\n    for train_idxs, valid_idxs in skf.split(train_df.Pawpularity):\n        break\n    files = get_image_files(path\/'train')\n    train_files = files[train_idxs]\n    valid_files = files[valid_idxs]\n    return train_files, valid_files\n    \nclass PetDS(Dataset):\n    def __init__(self, files, df, transforms):\n        self.files = files\n        self.df = df\n        self.transforms = transforms\n    def __len__(self):\n        return len(self.files)\n    def __getitem__(self, idx):\n        sample = self.files[idx]\n        lbl = get_lbl(sample, self.df)\n        img = np.array(Image.open(sample))\n        img = self.transforms(image=img)['image']\n        return img.float(), torch.tensor(lbl).float() ","ca3d4b28":"img_transform = A.Compose([\n    A.RandomResizedCrop(256, 256),\n    A.Normalize(mean=[0.485, 0.456, 0.406],\n                std=[0.229, 0.224, 0.225],\n                max_pixel_value=255.0,),\n    A.Flip(),\n    A.HueSaturationValue(),\n    ToTensorV2()\n])","32250b7f":"dls = get_dls(img_transform, batch_size=64)","7757d9de":"class Model(nn.Module):\n    def __init__(self, n_classes=1, model_name='efficientnet_b0',\n                rf=4): #rf -- reduction factor\n        super(Model, self).__init__()\n        self.m = timm.create_model(model_name, in_chans=3, num_classes=n_classes)\n        \n        if(model_name[:3] == 'eff'):\n            self.feats = self.m.classifier.in_features\n            self.m.classifier = nn.Linear(in_features=self.feats, out_features=self.feats\/\/rf)\n        else:\n            self.feats = self.m.fc.in_features\n            self.m.fc = nn.Linear(in_features=self.feats, out_features=self.feats\/\/rf)\n        \n        self.bn = nn.BatchNorm1d(self.feats\/\/rf)\n        self.act = nn.ReLU()\n        self.fc = nn.Linear(self.feats\/\/rf, 1)\n        \n    def forward(self, x):\n        out = self.m(x)\n        out = self.bn(out)\n        out = self.act(out)\n        out = self.fc(out)\n        return out","75fd52b1":"m = Model(model_name='resnet18', rf=2)\nlearner = Learner(dls, m, loss_func=MSELossFlat(), metrics=rmse,\n                 cbs=[MixUp()])\nlearner.fine_tune(10)","f52134b7":"Things added so far: augmentations and cutmix.\n\nNeed to add:\n1) Metadata!\n\n\n*needed to update fastai version in order to utilize pytorch datasets\/dataloaders without explicit placement of data\/model onto Cuda devices: https:\/\/forums.fast.ai\/t\/how-to-use-learner-with-pure-pytorch-dataloader\/74990\/12?u=ali_baba*"}}