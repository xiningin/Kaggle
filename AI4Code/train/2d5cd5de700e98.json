{"cell_type":{"50604405":"code","5ade5dcf":"code","681267b0":"code","9aff059e":"code","797f1c41":"code","fa1c881e":"code","1f1d5b15":"code","b5cf7cc4":"code","1ad8a865":"code","f266fb40":"code","d282be02":"code","c4440f06":"code","22cc07ad":"code","51077fb2":"code","0f96ace3":"code","6e7db6d8":"code","934dd3e1":"code","955cfdd7":"code","b0969403":"code","7838e9db":"code","2af9eccc":"code","861ab8bd":"code","1ab8290e":"code","70e4e081":"code","1608ed69":"code","c7afe9a4":"code","feeb7042":"code","a203cea4":"code","e8324367":"code","b7b0af60":"markdown","141b42e7":"markdown","eb8a6867":"markdown","f0a01ca8":"markdown"},"source":{"50604405":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport math","5ade5dcf":"data = pd.read_csv('..\/input\/customer-churn-dataset\/Churn_Modelling.csv')","681267b0":"data.head()","9aff059e":"data.shape","797f1c41":"data.columns","fa1c881e":"data.isnull().sum()","1f1d5b15":"numerical_columns = data.select_dtypes(['int64', 'float64']).columns","b5cf7cc4":"x = data[numerical_columns]","1ad8a865":"y = data['Exited']","f266fb40":"from sklearn.model_selection import train_test_split","d282be02":"x, x_test, y, y_test = train_test_split(x, y, test_size=0.3, random_state=42)","c4440f06":"from sklearn.metrics import confusion_matrix, accuracy_score","22cc07ad":"from sklearn.tree import DecisionTreeClassifier","51077fb2":"model = DecisionTreeClassifier()","0f96ace3":"from sklearn.neighbors import KNeighborsClassifier","6e7db6d8":"model = KNeighborsClassifier(n_neighbors=10)","934dd3e1":"from sklearn.ensemble import GradientBoostingClassifier","955cfdd7":"model = GradientBoostingClassifier()","b0969403":"from sklearn.ensemble import RandomForestClassifier","7838e9db":"model= RandomForestClassifier(n_estimators=20)","2af9eccc":"models = [DecisionTreeClassifier(), RandomForestClassifier(), GradientBoostingClassifier(),KNeighborsClassifier()]","861ab8bd":"for model in models:\n    new_model = model.fit(x, y)\n    predictions = new_model.predict(x_test)\n    score = accuracy_score(predictions, y_test)\n    print(\"Predictions is ->\", score)","1ab8290e":"for model in models:\n    new_model = model.fit(x, y)\n    predictions = new_model.predict(x_test)\n    matrix = confusion_matrix(predictions, y_test)\n    print(\"Predictions is ->\", matrix)","70e4e081":"data.columns","1608ed69":"sns.set()","c7afe9a4":"sns.countplot('Exited', hue='Gender', data=data)","feeb7042":"sns.countplot('Exited', hue='IsActiveMember', data=data)","a203cea4":"sns.countplot('Tenure', data=data)","e8324367":"sns.countplot('IsActiveMember', hue='Exited', data=data)","b7b0af60":"# Visualization","141b42e7":"# all in one Model","eb8a6867":"# Confusion Matrix","f0a01ca8":"# Accuracy score"}}