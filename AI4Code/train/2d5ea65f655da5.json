{"cell_type":{"eef96027":"code","b6927872":"code","469ffed3":"code","719b1cc5":"code","e085577e":"code","a001f39e":"code","e8358d76":"code","846fd8a8":"code","5b1607b2":"code","dc66ced6":"code","c6332203":"code","7e65c2d6":"code","7248a051":"code","8537ef24":"code","e49480ff":"code","d0df2026":"code","0084af5f":"code","a894ad5c":"code","cea71b55":"markdown","2305e3f9":"markdown","289badf8":"markdown","4b978046":"markdown","bd88f4a8":"markdown","b8d75e01":"markdown"},"source":{"eef96027":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b6927872":"import pandas as pd\nimport os\nimport numpy as np\nnp.set_printoptions(precision=4)\nimport catboost\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score , confusion_matrix , classification_report\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","469ffed3":"train = pd.read_csv (r'\/kaggle\/input\/credit-card-customers\/BankChurners.csv')\nprint (train)\ndf = pd.read_csv(r'\/kaggle\/input\/credit-card-customers\/BankChurners.csv')\nts = pd.Series(np.random.randn(1000), index=pd.date_range(\"1\/1\/2000\", periods=1000))\n","719b1cc5":"sns.heatmap(df.isna())","e085577e":"df.hist( bins=30, figsize=(15,15) );\n","a001f39e":"plt.figure(figsize=(15,7))\ng= sns.countplot(x='Marital_Status', data=df);\nfor p in g.patches:\n    height = p.get_height()\n    g.text(p.get_x()+p.get_width()\/2.,\n            height\/2,\n            '{}'.format(height),\n            ha=\"center\", color='white')","e8358d76":"y = train.Attrition_Flag\nX = train.drop(['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2','Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1','Attrition_Flag'], axis=1)","846fd8a8":"X = pd.get_dummies(X, columns=[ 'Gender', 'Education_Level', 'Marital_Status', 'Income_Category', 'Card_Category'])","5b1607b2":"X.isnull().sum()","dc66ced6":"Xnew = X.drop(columns=[ 'Gender_F', 'Education_Level_College', \n                                 'Marital_Status_Divorced', 'Income_Category_Unknown', 'Card_Category_Blue'])","c6332203":"Xnew.columns","7e65c2d6":"from sklearn.model_selection import train_test_split\nX_train, X_validation, y_train, y_validation = train_test_split(X, y, train_size=0.8, random_state=1234)","7248a051":"#cat_features = list(range(0, X.shape[1]))\n#print(cat_features)","8537ef24":"from catboost.utils import create_cd\nfeature_names = dict()\nfor column, name in enumerate(train):\n    if column == 0:\n        continue\n    feature_names[column - 1] = name\n    \ncreate_cd(\n    label=0, \n    cat_features=list(range(1, train.columns.shape[0])),\n    feature_names=feature_names,\n    output_path=os.path.join('train.cd')\n)","e49480ff":"\nfrom catboost import CatBoostClassifier\nmodel = CatBoostClassifier(\n    iterations=5,\n    learning_rate=0.1,\n    # loss_function='CrossEntropy'\n)\nmodel.fit(\n    X_train, y_train,\n    verbose = True\n)\nprint('Model is fitted: ' + str(model.is_fitted()))\nprint('Model params:')\nprint(model.get_params())","d0df2026":"\nmodel = CatBoostClassifier()\nmodel.fit(X_train, y_train)\n# Predicting result for training set and validation set\npredict_val_rf2 = model.predict(X_validation)\n\n\n# Model Performance\n\nprint(\"Accuracy : \", accuracy_score(y_validation, predict_val_rf2) *  100)\nprint(\"Recall : \", recall_score(y_validation, predict_val_rf2, pos_label = 'Attrited Customer') *  100)\nprint(\"Precision : \", precision_score(y_validation, predict_val_rf2, pos_label = 'Attrited Customer') *  100)\nprint(confusion_matrix(y_validation, predict_val_rf2))\nprint(classification_report(y_validation, predict_val_rf2))","0084af5f":"tp = sum([1 if actual_y == predicted_y and actual_y == 'Attrited Customer' else 0 for actual_y, predicted_y in zip(y_train,predict_val_rf2)])\ntn = sum([1 if actual_y == predicted_y and actual_y == 'Existing Customer' else 0 for actual_y, predicted_y in zip(y_train,predict_val_rf2)])\nfp = sum([1 if actual_y != predicted_y and actual_y == 'Attrited Customer' else 0 for actual_y, predicted_y in zip(y_train,predict_val_rf2)])\nfn = sum([1 if actual_y != predicted_y and actual_y == 'Existing Customer' else 0 for actual_y, predicted_y in zip(y_train,predict_val_rf2)])","a894ad5c":"print(\"Accuracy : \", accuracy_score(y_validation, predict_val_rf2) *  100)\n","cea71b55":"Fit Model","2305e3f9":"Removing the stuff they asked to remove\n","289badf8":"Metrics","4b978046":"Train Test Split","bd88f4a8":"Converting the classifier values to numerical values\n","b8d75e01":"Importing Data"}}