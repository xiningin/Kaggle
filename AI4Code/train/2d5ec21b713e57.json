{"cell_type":{"b30fc25e":"code","8d744d42":"code","10bcaead":"code","a3281c19":"code","71873cdd":"code","b4eff952":"code","569fc104":"code","84adffd3":"code","b4935d27":"code","f6770586":"code","c0c53afc":"code","6e50c523":"code","875343b9":"code","643077fa":"code","6a245221":"code","f229b476":"code","7a038a1d":"code","8cc32ee6":"markdown","37900f20":"markdown"},"source":{"b30fc25e":"import numpy as np # \u5bfc\u5165Numpy\nimport pandas as pd # \u5bfc\u5165Pandas\nimport os # \u5bfc\u5165OS\nimport cv2 # \u5bfc\u5165Open CV\u5de5\u5177\u7bb1\n\nprint(os.listdir('..\/input\/flowers-recognition\/flowers')) #\u6253\u5370\u76ee\u5f55\u7ed3\u6784\ndaisy_dir='..\/input\/flowers-recognition\/flowers\/daisy' #\u96cf\u83ca\u76ee\u5f55\nrose_dir='..\/input\/flowers-recognition\/flowers\/rose' #\u73ab\u7470\u76ee\u5f55\nsunflower_dir='..\/input\/flowers-recognition\/flowers\/sunflower' #\u5411\u65e5\u8475\u76ee\u5f55\ntulip_dir='..\/input\/flowers-recognition\/flowers\/tulip' #\u90c1\u91d1\u9999\u76ee\u5f55\n\nX = [] #\u521d\u59cb\u5316\ny_label = [] #\u521d\u59cb\u5316\nimgsize = 150 #\u56fe\u7247\u5927\u5c0f\n# \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u8bfb\u5165\u82b1\u7684\u56fe\u7247\ndef training_data(label,data_dir):\n    print (\"\u6b63\u5728\u8bfb\u5165\uff1a\", data_dir) \n    for img in os.listdir(data_dir): #\u76ee\u5f55\n        path = os.path.join(data_dir,img) #\u76ee\u5f55+\u6587\u4ef6\u540d\n        img = cv2.imread(path,cv2.IMREAD_COLOR) #\u8bfb\u5165\u56fe\u7247\n        img = cv2.resize(img,(imgsize,imgsize)) #\u8bbe\u5b9a\u56fe\u7247\u50cf\u7d20\u7ef4\u5ea6\n        X.append(np.array(img)) #X\u7279\u5f81\u96c6\n        y_label.append(str(label)) #y\u6807\u7b7e\uff0c\u5373\u82b1\u7684\u7c7b\u522b\n# \u8bfb\u5165\u76ee\u5f55\u4e2d\u7684\u56fe\u7247\ntraining_data('daisy',daisy_dir) #\u8bfb\u5165\u96cf\u83ca\ntraining_data('rose',rose_dir) #\u8bfb\u5165\u73ab\u7470\ntraining_data('sunflower',sunflower_dir) #\u8bfb\u5165\u5411\u65e5\u8475\ntraining_data('tulip',tulip_dir) #\u8bfb\u5165\u90c1\u91d1\u9999","8d744d42":"import matplotlib.pyplot as plt # \u5bfc\u5165matplotlib\nimport random as rdm # \u5bfc\u5165\u968f\u673a\u6570\u5de5\u5177\n# \u968f\u673a\u663e\u793a\u51e0\u5f20\u6f02\u4eae\u7684\u82b1\u6735\u56fe\u7247\u5427\nfig,ax=plt.subplots(5,2) #\u753b\u5e03\nfig.set_size_inches(15,15) #\u5927\u5c0f\nfor i in range(5):\n    for j in range (2):\n        r=rdm.randint(0,len(X)) #\u968f\u673a\u9009\u62e9\u56fe\u7247\n        ax[i,j].imshow(X[r]) #\u663e\u793a\u56fe\u7247\n        ax[i,j].set_title('Flower: '+y_label[r]) #\u82b1\u7684\u7c7b\u522b\nplt.tight_layout() #\u7ed8\u56fe","10bcaead":"from sklearn.preprocessing import LabelEncoder # \u5bfc\u5165\u6807\u7b7e\u7f16\u7801\u5de5\u5177\nfrom tensorflow.keras.utils import to_categorical # \u5bfc\u5165One-hot\u7f16\u7801\u5de5\u5177\nlabel_encoder = LabelEncoder()\ny = label_encoder.fit_transform(y_label) # \u6807\u7b7e\u7f16\u7801\ny = to_categorical(y,4) # \u5c06\u6807\u7b7e\u8f6c\u6362\u4e3aOne-hot\u7f16\u7801\nX = np.array(X) # \u5c06X\u4ece\u5217\u8868\u8f6c\u6362\u4e3a\u5f20\u91cf\u6570\u7ec4","a3281c19":"y #\u770b\u4e00\u770by\u5f20\u91cf\u4ec0\u4e48\u6837\uff0c\u8fd9\u662f\u5206\u7c7b\u6807\u7b7e","71873cdd":"X = X\/255 # \u5c06X\u5f20\u91cf\u5f52\u4e00\u5316","b4eff952":"from sklearn.model_selection import train_test_split # \u5bfc\u5165\u62c6\u5206\u5de5\u5177\nX_train, X_test, y_train, y_test = train_test_split(X, y, #\u62c6\u5206\u6570\u636e\u96c6\n                             test_size=0.2,random_state=1)","569fc104":"from tensorflow.keras import layers # \u5bfc\u5165\u6240\u6709\u5c42 \u884c1\nfrom tensorflow.keras import models # \u5bfc\u5165\u6240\u6709\u6a21\u578b \u884c2\ncnn = models.Sequential() # \u8d2f\u5e8f\u6a21\u578b \u884c3\ncnn.add(layers.Conv2D(32, (3, 3), activation='relu', # \u8f93\u5165\u5377\u79ef\u5c42 \u884c4\n                        input_shape=(150, 150, 3))) \ncnn.add(layers.MaxPooling2D((2, 2))) # \u6700\u5927\u6c60\u5316\u5c42 \u884c5\ncnn.add(layers.Conv2D(64, (3, 3), activation='relu')) # \u5377\u79ef\u5c42 \u884c6\ncnn.add(layers.MaxPooling2D((2, 2))) # \u6700\u5927\u6c60\u5316\u5c42 \u884c7\ncnn.add(layers.Conv2D(128, (3, 3), activation='relu')) # \u5377\u79ef\u5c42 \u884c8\ncnn.add(layers.MaxPooling2D((2, 2))) # \u6700\u5927\u6c60\u5316\u5c42 \u884c9\ncnn.add(layers.Conv2D(128, (3, 3), activation='relu')) # \u5377\u79ef\u5c42 \u884c10\ncnn.add(layers.MaxPooling2D((2, 2))) # \u6700\u5927\u6c60\u5316\u5c42 \u884c11\ncnn.add(layers.Flatten()) # \u5c55\u5e73\u5c42 \u884c12\ncnn.add(layers.Dense(512, activation='relu')) # \u5168\u8fde\u63a5\u5c42 \u884c13\ncnn.add(layers.Dense(4, activation='softmax')) # \u5206\u7c7b\u8f93\u51fa\u5c42 \u884c14\ncnn.compile(loss='categorical_crossentropy', # \u635f\u5931\u51fd\u6570 \u884c15\n            optimizer='RMSprop', # \u4f18\u5316\u5668\n            metrics=['acc']) # \u8bc4\u4f30\u6307\u6807","84adffd3":"from IPython.display import SVG # \u5b9e\u73b0\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\u7684\u56fe\u5f62\u5316\u663e\u793a\nfrom tensorflow.keras.utils import model_to_dot # \u5bfc\u5165model_to_dot\u5de5\u5177\nSVG(model_to_dot(cnn).create(prog='dot', format='svg')) # \u7ed8\u56fe","b4935d27":"# \u8bad\u7ec3\u7f51\u7edc\u5e76\u628a\u8bad\u7ec3\u8fc7\u7a0b\u4fe1\u606f\u5b58\u5165history\u5bf9\u8c61\nhistory = cnn.fit(X_train,y_train, #\u8bad\u7ec3\u6570\u636e\n                  epochs=30, #\u8bad\u7ec3\u8f6e\u6b21\uff08\u68af\u5ea6\u4e0b\u964d\uff09\n                  validation_split=0.2) #\u8bad\u7ec3\u7684\u540c\u65f6\u8fdb\u884c\u9a8c\u8bc1","f6770586":"def show_history(history): # \u663e\u793a\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u5b66\u4e60\u66f2\u7ebf\n    loss = history.history['loss'] #\u8bad\u7ec3\u635f\u5931\n    val_loss = history.history['val_loss'] #\u9a8c\u8bc1\u635f\u5931\n    epochs = range(1, len(loss) + 1) #\u8bad\u7ec3\u8f6e\u6b21\n    plt.figure(figsize=(12,4)) # \u56fe\u7247\u5927\u5c0f\n    plt.subplot(1, 2, 1) #\u5b50\u56fe1\n    plt.plot(epochs, loss, 'bo', label='Training loss') #\u8bad\u7ec3\u635f\u5931\n    plt.plot(epochs, val_loss, 'b', label='Validation loss') #\u9a8c\u8bc1\u635f\u5931\n    plt.title('Training and validation loss') #\u56fe\u9898\n    plt.xlabel('Epochs') #X\u8f74\u6587\u5b57\n    plt.ylabel('Loss') #Y\u8f74\u6587\u5b57\n    plt.legend() #\u56fe\u4f8b\n    acc = history.history['acc'] #\u8bad\u7ec3\u51c6\u786e\u7387\n    val_acc = history.history['val_acc'] #\u9a8c\u8bc1\u51c6\u786e\u7387\n    plt.subplot(1, 2, 2) #\u5b50\u56fe2\n    plt.plot(epochs, acc, 'bo', label='Training acc') #\u8bad\u7ec3\u51c6\u786e\u7387\n    plt.plot(epochs, val_acc, 'b', label='Validation acc') #\u9a8c\u8bc1\u51c6\u786e\u7387\n    plt.title('Training and validation accuracy') #\u56fe\u9898\n    plt.xlabel('Epochs') #X\u8f74\u6587\u5b57\n    plt.ylabel('Accuracy') #Y\u8f74\u6587\u5b57\n    plt.legend() #\u56fe\u4f8b\n    plt.show() #\u7ed8\u56fe\nshow_history(history) # \u8c03\u7528\u8fd9\u4e2a\u51fd\u6570","c0c53afc":"result = cnn.evaluate(X_test, y_test) #\u8bc4\u4f30\u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\nprint('\u6570\u636e\u589e\u5f3a\u4e4b\u524dCNN\u7684\u6d4b\u8bd5\u51c6\u786e\u7387\u4e3a',\"{0:.2f}%\".format(result[1]*100))","6e50c523":"prediction = cnn.predict(X_test) #\u9884\u6d4b\u6d4b\u8bd5\u96c6\u7684\u56fe\u7247\u5206\u7c7b","875343b9":"prediction[0] #\u7b2c\u4e00\u5f20\u56fe\u7247\u7684\u5206\u7c7b","643077fa":"print('\u7b2c\u4e00\u5f20\u6d4b\u8bd5\u56fe\u7247\u7684\u5206\u7c7b\u7ed3\u679c\u4e3a:', np.argmax(prediction[0]))","6a245221":"# \u5b9a\u4e49\u4e00\u4e2a\u6570\u636e\u589e\u5f3a\u5668\uff0c\u5e76\u8bbe\u5b9a\u5404\u79cd\u589e\u5f3a\u9009\u9879\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator #\u6570\u636e\u589e\u5f3a\u5668\naugs_gen = ImageDataGenerator( #\u5404\u79cd\u589e\u5f3a\u53c2\u6570\n           featurewise_center=False,\n           samplewise_center=False,         \n           featurewise_std_normalization=False,          \n           samplewise_std_normalization=False,  \n           zca_whitening=False, \n           rotation_range=10,  \n           zoom_range = 0.1, \n           width_shift_range=0.2,  \n           height_shift_range=0.2,\n           horizontal_flip=True,  \n           vertical_flip=False) \naugs_gen.fit(X_train) # \u9488\u5bf9\u8bad\u7ec3\u96c6\u62df\u5408\u6570\u636e\u589e\u5f3a\u5668","f229b476":"# history = cnn.fit_generator( # \u4f7f\u7528fit_generator\nhistory = cnn.fit( # \u62df\u5408   \n    augs_gen.flow(X_train,y_train,batch_size=16), # \u589e\u5f3a\u540e\u7684\u8bad\u7ec3\u96c6\n#     validation_data  = (X_test,y_test), # \u6307\u5b9a\u9a8c\u8bc1\u96c6\n#     validation_steps = 100, # \u6307\u5b9a\u9a8c\u8bc1\u6b65\u957f\n#     steps_per_epoch  = 100, # \u6307\u5b9a\u6bcf\u8f6e\u6b65\u957f\n    epochs = 30,  # \u6307\u5b9a\u8f6e\u6b21\n    verbose = 1) # \u6307\u5b9a\u662f\u5426\u663e\u793a\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u4fe1\u606f\n# show_history(history) # \u8c03\u7528\u8fd9\u4e2a\u51fd\u6570","7a038a1d":"result = cnn.evaluate(X_test, y_test) #\u8bc4\u4f30\u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\nprint('\u6570\u636e\u589e\u5f3a\u4e4b\u540eCNN\u7684\u6d4b\u8bd5\u51c6\u786e\u7387\u4e3a',\"{0:.2f}%\".format(result[1]*100))","8cc32ee6":"## \u5f00\u59cb\u8fdb\u884c\u6570\u636e\u589e\u5f3a\u4e86\uff01","37900f20":"# \u96f6\u57fa\u7840\u5b9e\u6218\u673a\u5668\u5b66\u4e60\n\n## \u7b2c13\u8bb2 CNN\u7684\u4f18\u5316 \n\n\u4f5c\u8005 \u9ec4\u4f73\n\n\u6781\u5ba2\u65f6\u95f4\u4e13\u680f\u94fe\u63a5\uff1ahttps:\/\/time.geekbang.org\/column\/intro\/438\n\n\u95ee\u9898\uff1a\u9c9c\u82b1\u56fe\u7247\u5206\u7c7b\n\n\u8fd9\u91cc\u662f\u5bf9CNN\u6a21\u578b\u7684\u4f18\u5316\u7b56\u7565\u3002"}}