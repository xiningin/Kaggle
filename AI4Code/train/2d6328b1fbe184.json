{"cell_type":{"4c29c4b6":"code","fbe9450c":"code","fc941d3f":"code","b2d34f52":"code","4703607c":"code","0885a4d8":"code","85fd5971":"code","dc99b5ed":"code","a3eb70b5":"code","6e7fa69e":"code","df48d752":"code","9666fa95":"code","fe6bc88d":"code","b88ff999":"code","9a9768f1":"code","ab338c01":"code","9e164f28":"code","e840777c":"code","d72a89dc":"code","daf66ed0":"code","4adb9d2a":"code","609f75d8":"code","c93756db":"code","1b7cc359":"code","0f1ae496":"code","756cd432":"code","1d2fe624":"code","cc573972":"markdown","76dff6fd":"markdown","5f24d09f":"markdown","4b6addb5":"markdown","42fd233c":"markdown","2e8a4cb5":"markdown","7c4f2ac8":"markdown","3085a589":"markdown"},"source":{"4c29c4b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fbe9450c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport re\nimport datetime\nimport missingno as msno","fc941d3f":"df = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\ndf.info()\ndf","b2d34f52":"df['date_added'] = pd.to_datetime(df['date_added'])\ndf.info()","4703607c":"# df['Hour'] = df['date_added'].apply(lambda time: time.hour)\ndf['Date'] = df['date_added'].apply(lambda x: x.day)\ndf['Day of Week'] = df['date_added'].apply(lambda x: x.dayofweek)\ndf['Month'] = df['date_added'].apply(lambda x: x.month)\ndf['Year'] = df['date_added'].apply(lambda x: x.year)\ndf","0885a4d8":"msno.matrix(df);","85fd5971":"msno.bar(df);","dc99b5ed":"#missing value\nmiss = pd.Series(df.isnull().sum(), name='count')\npercent_miss = pd.Series(round(df.isnull().sum()\/df.shape[0]*100,2), name='percent')\npd.DataFrame([miss, percent_miss]).T.sort_values(by = 'percent', ascending=False)","a3eb70b5":"uni = [df[col].nunique() for col in df.columns]  #df.nunique().to_list()\nunique = dict(zip(df.columns,uni))\nsorted(unique.items(), key=lambda x:x[1],reverse=False)","6e7fa69e":"df.director.fillna('Unknown', inplace=True)\ndf.director","df48d752":"df[df.country.isnull()]","9666fa95":"#replace nan\ndf.loc[38, 'country'] = 'Thailand'\n\nmiss_col = df.columns[df.isnull().any()].to_list()\nmiss_col.remove('date_added')\nprint('Missing columns:',miss_col)","fe6bc88d":"for col in miss_col:\n    df[col].fillna('Unknown', inplace=True)\n\n#drop rows which have date_added is NaN\ndf.dropna(subset =['date_added'], axis=0, inplace=True)\n\n#check missing value\ndf.isnull().any()","b88ff999":"#create column name 'text' which combine all texts together\ndf['text'] =  df['title'] + ' ' + df['director'] + ' ' + df['cast'] + ' ' + df['rating'] + ' '+ df['listed_in'] + ' ' + df['description'] \n\n#drop if duplicate data \ndf.drop_duplicates(subset=['text'], inplace=True)\n\n#reset index\ndf.reset_index(drop=True,inplace=True)","9a9768f1":"#sample text\ndf.text.sample(1).tolist()","ab338c01":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_extraction import text\n\n#add stop word\nmy_words = set(['Unknown'])\n\nmy_stop_words = text.ENGLISH_STOP_WORDS.union(my_words)\n\ntfidfvectorizer = TfidfVectorizer(analyzer='word' , stop_words='english')\n\ntfidf_term_vectors = tfidfvectorizer.fit_transform(df['text'])\n\nprint(tfidf_term_vectors.shape)\n\ntfidf_term_vectors.todense()","9e164f28":"# Import metrics\nfrom sklearn.metrics.pairwise import linear_kernel, euclidean_distances, manhattan_distances, cosine_similarity\n\n# Compute the metrics\nlinear_ke = linear_kernel(tfidf_term_vectors, tfidf_term_vectors)\n\neuclidean = euclidean_distances(tfidf_term_vectors, tfidf_term_vectors) \n\nmanhattan = manhattan_distances(tfidf_term_vectors, tfidf_term_vectors)\n\ncosine = cosine_similarity(tfidf_term_vectors, tfidf_term_vectors) #same as linear_kernel\n\nprint(linear_ke.shape)\n\nlinear_ke","e840777c":"indices = pd.Series(df.index, index=df['title']).drop_duplicates()\nindices","d72a89dc":"def get_recommendations(title, metric):\n    \n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    pairwsie = list(enumerate(metric[idx]))\n\n    # Sort the movies based on the similarity scores\n    pairwsie = sorted(pairwsie, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    scores = pairwsie[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in scores]\n\n    # Return the top 10 most similar movies\n    return df['title'].iloc[movie_indices]","daf66ed0":"df.title.unique().tolist()","4adb9d2a":"name = 'Avengers: Infinity War'\n\nmetric = [linear_ke, euclidean, manhattan]\n\nfor i in metric:\n    print(get_recommendations(name, i),'\\n')","609f75d8":"df['text2'] = df['text'].apply(lambda x: str.lower(x.replace(\" \", \"\")))\ndf['text2']","c93756db":"tfidf_term_vectors2 = tfidfvectorizer.fit_transform(df['text2'])\n\nlinear_ke2 = linear_kernel(tfidf_term_vectors2, tfidf_term_vectors2)\neuclidean2 = euclidean_distances(tfidf_term_vectors2, tfidf_term_vectors2) \nmanhattan2 = manhattan_distances(tfidf_term_vectors2, tfidf_term_vectors2)","1b7cc359":"name = 'Avengers: Infinity War'\n\nmetric = [linear_ke2, euclidean2, manhattan2]\n\nfor i in metric:\n    print(get_recommendations(name, i),'\\n')","0f1ae496":"set1 = get_recommendations('Avengers: Infinity War', linear_ke)\nset2 = get_recommendations('Avengers: Infinity War', linear_ke2)\n\nset1=set(set1)\nset2=set(set2)\n\nintersec = set1.intersection(set2)\nintersec","756cd432":"set1 = get_recommendations('Avengers: Infinity War', euclidean)\nset2 = get_recommendations('Avengers: Infinity War', euclidean2)\n\nset1=set(set1)\nset2=set(set2)\n\nintersec = set1.intersection(set2)\nintersec","1d2fe624":"set1 = get_recommendations('Avengers: Infinity War', manhattan)\nset2 = get_recommendations('Avengers: Infinity War', manhattan2)\n\nset1=set(set1)\nset2=set(set2)\n\nintersec = set1.intersection(set2)\nintersec","cc573972":"# 1. Data Preparation","76dff6fd":"# Analysis\n\n## Recommendation System (content-based filtering)","5f24d09f":"Replace Missing Values","4b6addb5":"Unique values for each columns","42fd233c":"## Clean data by lower text and remove space ","2e8a4cb5":"different metric and different cleaning text has a different result","7c4f2ac8":"Check Missing Values","3085a589":"Convert datetime to Dtype 'datetime64'"}}