{"cell_type":{"78afd2a7":"code","5b6ead05":"code","91622b8c":"code","fc01f42f":"code","ddb4b78f":"code","427e196a":"code","7c13db26":"code","e943716b":"code","2986db7d":"code","4e6dc743":"code","54f28432":"code","05aa4501":"code","8454c245":"code","a926f3e0":"code","511a2f90":"code","aeda2982":"code","8d24d6e9":"code","86da1426":"code","f4b60b50":"code","c2943569":"code","e42a1b4d":"code","d86d3c34":"code","5933ab32":"code","3ed47dd0":"code","6e25deae":"code","7a01904e":"code","8ec1a636":"code","a2292797":"code","3802abbc":"code","3856e4c3":"code","3c635f66":"code","193e76ce":"code","34ef6eef":"code","35ee1bd2":"code","fbeb01b0":"code","cffcb681":"code","7415a200":"code","5c41ee66":"markdown","662aae59":"markdown","2c6d42c9":"markdown","9d503738":"markdown","5024a6b6":"markdown","033f88c6":"markdown","0dd6d291":"markdown","98971b05":"markdown","080f1104":"markdown","7395496c":"markdown","e37aa0f7":"markdown","4a3a1709":"markdown","26cc1146":"markdown","092be6a5":"markdown","d1edf573":"markdown","50e13b3f":"markdown","89c66382":"markdown","8f8dfd3f":"markdown"},"source":{"78afd2a7":"import sys\nsys.path.append('..\/input\/iterativestratification')\n\nimport numpy as np\nimport random\nimport pandas as pd\nimport os\nimport copy\nimport gc\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import log_loss\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.feature_selection import VarianceThreshold, SelectKBest   \nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.nn.modules.loss import _WeightedLoss\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nos.listdir('..\/input\/lish-moa')\n\npd.set_option('max_columns', 2000)","5b6ead05":"n_comp_GENES = 463\nn_comp_CELLS = 60\nVarianceThreshold_for_FS = 0.9\nDropout_Model = 0.25\nQuantileTransformer_n_quantiles = 500 # instead of 100\nprint('n_comp_GENES', n_comp_GENES, 'n_comp_CELLS', n_comp_CELLS, 'total', n_comp_GENES + n_comp_CELLS)","91622b8c":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets_scored = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntrain_targets_nonscored = pd.read_csv('..\/input\/lish-moa\/train_targets_nonscored.csv')\n\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\nsample_submission = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')","fc01f42f":"GENES = [col for col in train_features.columns if col.startswith('g-')]\nCELLS = [col for col in train_features.columns if col.startswith('c-')]","ddb4b78f":"# RankGauss - transform to Gauss\n\nfor col in (GENES + CELLS):\n\n    transformer = QuantileTransformer(n_quantiles=QuantileTransformer_n_quantiles,random_state=0, output_distribution=\"normal\")\n    vec_len = len(train_features[col].values)\n    vec_len_test = len(test_features[col].values)\n    raw_vec = train_features[col].values.reshape(vec_len, 1)\n    transformer.fit(raw_vec)\n\n    train_features[col] = transformer.transform(raw_vec).reshape(1, vec_len)[0]\n    test_features[col] = transformer.transform(test_features[col].values.reshape(vec_len_test, 1)).reshape(1, vec_len_test)[0]","427e196a":"# \u6d4b\u8bd5\u7684\u65f6\u5019\u7684\u968f\u673a\u6570\u79cd\u5b50\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    \n    \n    torch.cuda.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.backends.cudnn.benchmark = False\n    torch.backends.cudnn.deterministic = True\n    \nseed_everything(seed=42)","7c13db26":"# \u8bad\u7ec3\u7684\u65f6\u5019\u7684\u968f\u673a\u6570\u79cd\u5b50","e943716b":"len(GENES)","2986db7d":"# GENES\n\ndata = pd.concat([pd.DataFrame(train_features[GENES]), pd.DataFrame(test_features[GENES])])\ndata2 = (PCA(n_components=n_comp_GENES, random_state=42).fit_transform(data[GENES]))\ntrain2 = data2[:train_features.shape[0]]; test2 = data2[-test_features.shape[0]:]\n\ntrain2 = pd.DataFrame(train2, columns=[f'pca_G-{i}' for i in range(n_comp_GENES)])\ntest2 = pd.DataFrame(test2, columns=[f'pca_G-{i}' for i in range(n_comp_GENES)])\n\ntrain_features = pd.concat((train_features, train2), axis=1)\ntest_features = pd.concat((test_features, test2), axis=1)","4e6dc743":"len(CELLS)","54f28432":"# CELLS\n\ndata = pd.concat([pd.DataFrame(train_features[CELLS]), pd.DataFrame(test_features[CELLS])])\ndata2 = (PCA(n_components=n_comp_CELLS, random_state=42).fit_transform(data[CELLS]))\ntrain2 = data2[:train_features.shape[0]]; test2 = data2[-test_features.shape[0]:]\n\ntrain2 = pd.DataFrame(train2, columns=[f'pca_C-{i}' for i in range(n_comp_CELLS)])\ntest2 = pd.DataFrame(test2, columns=[f'pca_C-{i}' for i in range(n_comp_CELLS)])\n\ntrain_features = pd.concat((train_features, train2), axis=1)\ntest_features = pd.concat((test_features, test2), axis=1)","05aa4501":"train_features.shape","8454c245":"train_features.head(5)","a926f3e0":"data = train_features.append(test_features)\ndata","511a2f90":"var_thresh = VarianceThreshold(VarianceThreshold_for_FS)\ndata = train_features.append(test_features)\ndata_transformed = var_thresh.fit_transform(data.iloc[:, 4:])\n\ntrain_features_transformed = data_transformed[ : train_features.shape[0]]\ntest_features_transformed = data_transformed[-test_features.shape[0] : ]\n\n\ntrain_features = pd.DataFrame(train_features[['sig_id','cp_type','cp_time','cp_dose']].values.reshape(-1, 4),\\\n                              columns=['sig_id','cp_type','cp_time','cp_dose'])\n\ntrain_features = pd.concat([train_features, pd.DataFrame(train_features_transformed)], axis=1)\n\n\ntest_features = pd.DataFrame(test_features[['sig_id','cp_type','cp_time','cp_dose']].values.reshape(-1, 4),\\\n                             columns=['sig_id','cp_type','cp_time','cp_dose'])\n\ntest_features = pd.concat([test_features, pd.DataFrame(test_features_transformed)], axis=1)\n\ntrain_features.shape","aeda2982":"train_features.head(5)","8d24d6e9":"train = train_features.merge(train_targets_scored, on='sig_id')\ntrain = train[train['cp_type']!='ctl_vehicle'].reset_index(drop=True)\ntest = test_features[test_features['cp_type']!='ctl_vehicle'].reset_index(drop=True)\n\ntarget = train[train_targets_scored.columns]","86da1426":"train = train.drop('cp_type', axis=1)\ntest = test.drop('cp_type', axis=1)","f4b60b50":"train.head(5)","c2943569":"target_cols = target.drop('sig_id', axis=1).columns.values.tolist()","e42a1b4d":"folds = train.copy()\n\nmskf = MultilabelStratifiedKFold(n_splits=7)\n\nfor f, (t_idx, v_idx) in enumerate(mskf.split(X=train, y=target)):\n    folds.loc[v_idx, 'kfold'] = int(f)\n\nfolds['kfold'] = folds['kfold'].astype(int)\nfolds","d86d3c34":"print(train.shape)\nprint(folds.shape)\nprint(test.shape)\nprint(target.shape)\nprint(sample_submission.shape)","5933ab32":"class MoADataset:\n    def __init__(self, features, targets):\n        self.features = features\n        self.targets = targets\n        \n    def __len__(self):\n        return (self.features.shape[0])\n    \n    def __getitem__(self, idx):\n        dct = {\n            'x' : torch.tensor(self.features[idx, :], dtype=torch.float),\n            'y' : torch.tensor(self.targets[idx, :], dtype=torch.float)            \n        }\n        return dct\n    \nclass TestDataset:\n    def __init__(self, features):\n        self.features = features\n        \n    def __len__(self):\n        return (self.features.shape[0])\n    \n    def __getitem__(self, idx):\n        dct = {\n            'x' : torch.tensor(self.features[idx, :], dtype=torch.float)\n        }\n        return dct    ","3ed47dd0":"def train_fn(model, optimizer, scheduler, loss_fn, dataloader, device):\n    pass\n    model.train()\n    final_loss = 0\n    \n    for data in dataloader:\n        optimizer.zero_grad()\n        inputs, targets = data['x'].to(device), data['y'].to(device)\n        outputs = model(inputs)\n        loss = loss_fn(outputs, targets)\n        loss.backward()\n        optimizer.step()\n        scheduler.step()\n        \n        final_loss += loss.item()\n        \n    final_loss \/= len(dataloader)\n    \n    return final_loss\n\n\ndef valid_fn(model, loss_fn, dataloader, device):\n#     pass\n    model.eval()\n    final_loss = 0\n    valid_preds = []\n    \n    for data in dataloader:\n        inputs, targets = data['x'].to(device), data['y'].to(device)\n        outputs = model(inputs)\n        loss = loss_fn(outputs, targets)\n        \n        final_loss += loss.item()\n        valid_preds.append(outputs.sigmoid().detach().cpu().numpy())\n        \n    final_loss \/= len(dataloader)\n    valid_preds = np.concatenate(valid_preds)\n    \n    return final_loss, valid_preds\n\ndef inference_fn(model, dataloader, device):\n    \n    model.eval()\n    preds = []\n    \n    for data in dataloader:\n        inputs = data['x'].to(device)\n\n        with torch.no_grad():\n            outputs = model(inputs)\n        \n        preds.append(outputs.sigmoid().detach().cpu().numpy())\n        \n    preds = np.concatenate(preds)\n    \n    return preds","6e25deae":"class SmoothBCEwLogits(_WeightedLoss):\n    def __init__(self, weight=None, reduction='mean', smoothing=0.0):\n        super().__init__(weight=weight, reduction=reduction)\n        self.smoothing = smoothing\n        self.weight = weight\n        self.reduction = reduction\n\n    @staticmethod\n    def _smooth(targets:torch.Tensor, n_labels:int, smoothing=0.0):\n        assert 0 <= smoothing < 1\n        with torch.no_grad():\n            targets = targets * (1.0 - smoothing) + 0.5 * smoothing\n        return targets\n\n    def forward(self, inputs, targets):\n        targets = SmoothBCEwLogits._smooth(targets, inputs.size(-1),\n            self.smoothing)\n        loss = F.binary_cross_entropy_with_logits(inputs, targets,self.weight)\n\n        if  self.reduction == 'sum':\n            loss = loss.sum()\n        elif  self.reduction == 'mean':\n            loss = loss.mean()\n\n        return loss","7a01904e":"def process_data(data):\n    data = pd.get_dummies(data, columns=['cp_time','cp_dose'])\n    return data","8ec1a636":"feature_cols = [c for c in process_data(folds).columns if c not in target_cols]\nfeature_cols = [c for c in feature_cols if c not in ['kfold','sig_id']]\nlen(feature_cols)","a2292797":"# HyperParameters\n\nDEVICE = ('cuda' if torch.cuda.is_available() else 'cpu')\nEPOCHS = 25\nBATCH_SIZE = 128\nLEARNING_RATE = 1e-3\nWEIGHT_DECAY = 1e-5\nNFOLDS = 7\nEARLY_STOPPING_STEPS = 10\nEARLY_STOP = False\n\nnum_features=len(feature_cols)\nnum_targets=len(target_cols)\nhidden_size=1500","3802abbc":"class Model(nn.Module):\n    def __init__(self, num_features, num_targets, hidden_size):\n        super(Model, self).__init__()\n        self.batch_norm1 = nn.BatchNorm1d(num_features)\n        self.dense1 = nn.utils.weight_norm(nn.Linear(num_features, hidden_size))\n        \n        self.batch_norm2 = nn.BatchNorm1d(hidden_size)\n        self.dropout2 = nn.Dropout(Dropout_Model)\n        self.dense2 = nn.utils.weight_norm(nn.Linear(hidden_size, hidden_size))\n        \n        self.batch_norm3 = nn.BatchNorm1d(hidden_size)\n        self.dropout3 = nn.Dropout(Dropout_Model)\n        self.dense3 = nn.utils.weight_norm(nn.Linear(hidden_size, num_targets))\n    \n    def forward(self, x):\n        x = self.batch_norm1(x)\n        x = F.leaky_relu(self.dense1(x))\n        \n        x = self.batch_norm2(x)\n        x = self.dropout2(x)\n        x = F.leaky_relu(self.dense2(x))\n        \n        x = self.batch_norm3(x)\n        x = self.dropout3(x)\n        x = self.dense3(x)\n        \n        return x\n    \nclass LabelSmoothingLoss(nn.Module):\n    def __init__(self, classes, smoothing=0.0, dim=-1):\n        super(LabelSmoothingLoss, self).__init__()\n        self.confidence = 1.0 - smoothing\n        self.smoothing = smoothing\n        self.cls = classes\n        self.dim = dim\n\n    def forward(self, pred, target):\n        pred = pred.log_softmax(dim=self.dim)\n        with torch.no_grad():\n            true_dist = torch.zeros_like(pred)\n            true_dist.fill_(self.smoothing \/ (self.cls - 1))\n            true_dist.scatter_(1, target.data.unsqueeze(1), self.confidence)\n        return torch.mean(torch.sum(-true_dist * pred, dim=self.dim))    ","3856e4c3":"def run_training(fold, seed):\n\n    seed_everything(seed)\n    \n    train = process_data(folds)\n    test_ = process_data(test)\n    \n    trn_idx = train[train['kfold'] != fold].index\n    val_idx = train[train['kfold'] == fold].index\n    \n    train_df = train[train['kfold'] != fold].reset_index(drop=True)\n    valid_df = train[train['kfold'] == fold].reset_index(drop=True)\n    \n    x_train, y_train  = train_df[feature_cols].values, train_df[target_cols].values\n    x_valid, y_valid =  valid_df[feature_cols].values, valid_df[target_cols].values\n    \n    train_dataset = MoADataset(x_train, y_train)\n    valid_dataset = MoADataset(x_valid, y_valid)\n    trainloader = torch.utils.data.DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)  # \u8fd9\u91cc\u6539\u4e3aFalse\n    validloader = torch.utils.data.DataLoader(valid_dataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n#     model = Model(\n#         num_features=num_features,\n#         num_targets=num_targets,\n#         hidden_size=hidden_size,\n#     )\n    \n#     model.to(DEVICE)\n    \n#     optimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=WEIGHT_DECAY)\n#     scheduler = optim.lr_scheduler.OneCycleLR(optimizer=optimizer, pct_start=0.1, div_factor=1e3, \n#                                               max_lr=1e-2, epochs=EPOCHS, steps_per_epoch=len(trainloader))\n    \n    loss_fn = nn.BCEWithLogitsLoss()\n    loss_tr = SmoothBCEwLogits(smoothing =0.001)\n    \n#     early_stopping_steps = EARLY_STOPPING_STEPS\n#     early_step = 0\n   \n    oof = np.zeros((len(train), target.iloc[:, 1:].shape[1]))\n    best_loss = np.inf\n    \n#     for epoch in range(EPOCHS):\n#         pass\n        \n#         train_loss = train_fn(model, optimizer,scheduler, loss_tr, trainloader, DEVICE)\n#         print(f\"FOLD: {fold}, EPOCH: {epoch}, train_loss: {train_loss}\")\n#         valid_loss, valid_preds = valid_fn(model, loss_fn, validloader, DEVICE)\n#         print(f\"FOLD: {fold}, EPOCH: {epoch}, valid_loss: {valid_loss}\")\n        \n#         if valid_loss < best_loss:\n            \n#             best_loss = valid_loss\n#             oof[val_idx] = valid_preds\n#             torch.save(model.state_dict(), f\"FOLD{fold}_.pth\")\n        \n#         elif(EARLY_STOP == True):\n            \n#             early_step += 1\n#             if (early_step >= early_stopping_steps):\n#                 break\n            \n    \n    #--------------------- PREDICTION---------------------\n    x_test = test_[feature_cols].values\n    testdataset = TestDataset(x_test)\n    testloader = torch.utils.data.DataLoader(testdataset, batch_size=BATCH_SIZE, shuffle=False)\n    \n    model = Model(\n        num_features=num_features,\n        num_targets=num_targets,\n        hidden_size=hidden_size,\n\n    )\n\n    model.load_state_dict(torch.load(f\"..\/input\/20221107fe-fs-dnn-model\/FOLD{fold}_.pth\")) \n    model.to(DEVICE)\n    \n    torch.manual_seed(seed)\n#     if self.cuda:\n#         torch.cuda.manual_seed(seed)\n    \n    oof = np.zeros((len(train), target.iloc[:, 1:].shape[1]))\n    valid_loss, valid_preds = valid_fn(model, loss_fn, validloader, DEVICE)\n    oof[val_idx] = valid_preds\n    print(valid_loss)\n    \n    predictions = np.zeros((len(test_), target.iloc[:, 1:].shape[1]))\n    predictions = inference_fn(model, testloader, DEVICE)\n#     model.eval()\n    \n    # \u8fd9\u91cc\u662f\u4e0d\u662f\u9700\u8981\u5220\u9664\u6a21\u578b \n    del model\n    torch.cuda.empty_cache()\n    gc.collect()\n    \n    return oof, predictions","3c635f66":"def run_k_fold(NFOLDS, seed):\n# def run_k_fold(NFOLDS):\n    oof = np.zeros((len(train), len(target_cols)))\n    predictions = np.zeros((len(test), len(target_cols)))\n    \n    for fold in range(NFOLDS):\n        oof_, pred_ = run_training(fold, seed)\n#         oof_, pred_ = run_training(fold)\n        \n        predictions += pred_ \/ NFOLDS\n        oof += oof_\n        \n    return oof, predictions","193e76ce":"# Averaging on multiple SEEDS\n\nSEED = [0, 1, 2, 3, 4, 5, 6]\noof = np.zeros((len(train), len(target_cols)))\npredictions = np.zeros((len(test), len(target_cols)))\n\nfor seed in SEED:\n    oof_, predictions_ = run_k_fold(NFOLDS, seed)\n    oof += oof_ \/ len(SEED)\n    predictions += predictions_ \/ len(SEED)\n\ntrain[target_cols] = oof\ntest[target_cols] = predictions\n","34ef6eef":"train_targets_scored","35ee1bd2":"len(target_cols)","fbeb01b0":"valid_results = train_targets_scored.drop(columns=target_cols).merge(train[['sig_id']+target_cols], on='sig_id', how='left').fillna(0)\n\ny_true = train_targets_scored[target_cols].values\ny_pred = valid_results[target_cols].values\n\nscore = 0\nfor i in range(len(target_cols)):\n    score_ = log_loss(y_true[:, i], y_pred[:, i])\n    score += score_ \/ target.shape[1]\n    \nprint(\"CV log_loss: \", score)    ","cffcb681":"sub = sample_submission.drop(columns=target_cols).merge(test[['sig_id']+target_cols], on='sig_id', how='left').fillna(0)\nsub.to_csv('submission.csv', index=False)","7415a200":"sub.shape","5c41ee66":"### 4.8 Preprocessing<a class=\"anchor\" id=\"4.8\"><\/a>\n\n[Back to Table of Contents](#0.1)","662aae59":"### 4.3 PCA features<a class=\"anchor\" id=\"4.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","2c6d42c9":"## 2. My upgrade <a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","9d503738":"## 3. Download data<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","5024a6b6":"0.01606021519750357\n0.01580731861293316\n0.016011497154831886\n0.01619562640786171\n0.016142042502760887\n0.01618121299892664\n0.01606037799268961\n0.01606021519750357\n0.01580731861293316\n0.016011497154831886\n0.01619562640786171\n0.016142042502760887\n0.01618121299892664\n0.01606037799268961\n0.01606021519750357\n0.01580731861293316\n0.016011497154831886\n0.01619562640786171\n0.016142042502760887\n0.01618121299892664\n0.01606037799268961\n0.01606021519750357\n0.01580731861293316\n0.016011497154831886\n0.01619562640786171\n0.016142042502760887\n0.01618121299892664\n0.01606037799268961\n0.01606021519750357\n0.01580731861293316\n0.016011497154831886\n0.01619562640786171\n0.016142042502760887\n0.01618121299892664\n0.01606037799268961\n0.01606021519750357\n0.01580731861293316\n0.016011497154831886\n0.01619562640786171\n0.016142042502760887\n0.01618121299892664\n0.01606037799268961\n0.01606021519750357\n0.01580731861293316\n0.016011497154831886\n0.01619562640786171\n0.016142042502760887\n0.01618121299892664\n0.01606037799268961","033f88c6":"## 6. Prediction & Submission <a class=\"anchor\" id=\"6\"><\/a>\n\n[Back to Table of Contents](#0.1)","0dd6d291":"### 4.6 Dataset Classes<a class=\"anchor\" id=\"4.6\"><\/a>\n\n[Back to Table of Contents](#0.1)","98971b05":"## 4. FE & Data Preprocessing <a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","080f1104":"CV log_loss:  0.01476557760732126","7395496c":"### 4.5 CV folds<a class=\"anchor\" id=\"4.5\"><\/a>\n\n[Back to Table of Contents](#0.1)","e37aa0f7":"[Go to Top](#0)","4a3a1709":"### 4.2 Seed<a class=\"anchor\" id=\"4.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","26cc1146":"### 4.4 Feature selection<a class=\"anchor\" id=\"4.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","092be6a5":"### 4.1 RankGauss<a class=\"anchor\" id=\"4.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","d1edf573":"## 5. Modeling<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","50e13b3f":"# reference:\n- [https:\/\/www.kaggle.com\/vbmokin\/moa-pytorch-rankgauss-pca-nn-upgrade-3d-visual](https:\/\/www.kaggle.com\/vbmokin\/moa-pytorch-rankgauss-pca-nn-upgrade-3d-visual)\n- \u7b2c22\u7248","89c66382":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","8f8dfd3f":"### 4.7 Smoothing<a class=\"anchor\" id=\"4.7\"><\/a>\n\n[Back to Table of Contents](#0.1)"}}