{"cell_type":{"43ff8e14":"code","0b79d5e0":"code","d30a3fd9":"code","e868e535":"code","1c6c4873":"code","59505926":"code","1e851340":"code","b6a9aad1":"code","f9ccaa23":"code","2ab59737":"code","e19b72c9":"code","259d2a58":"code","6e09c5fb":"code","787f097b":"code","8be92079":"code","fd7d88d9":"code","66c29647":"code","7d557245":"code","4131a03a":"code","ac582208":"code","8d11c43f":"code","ce12e529":"markdown","494c4da4":"markdown","c4887c11":"markdown","5f3b4e6c":"markdown","2200600e":"markdown","185e364e":"markdown","15ab4459":"markdown","a177545f":"markdown","8a122059":"markdown","729e3286":"markdown","c928c536":"markdown","bf18ad1d":"markdown","03bba3c2":"markdown","8d43f425":"markdown","9d1907ed":"markdown","7230cf4f":"markdown","6b1c5e74":"markdown"},"source":{"43ff8e14":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import LabelEncoder\nfrom imblearn.over_sampling import SMOTE","0b79d5e0":"df = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\n\ndf.head()","d30a3fd9":"df.shape","e868e535":"catFeatures = ['gender', 'hypertension', 'heart_disease','ever_married', 'work_type', 'Residence_type', 'smoking_status']\nnumFeatures = ['age', 'avg_glucose_level', 'bmi']","1c6c4873":"data = df.drop('id', axis=1)\ndata.head()","59505926":"for catFeature in catFeatures:\n    print(data[catFeature].unique())","1e851340":"data.isna().sum()","b6a9aad1":"for catFeature in catFeatures:\n    plt.figure(figsize=(10,5))\n    sns.countplot(x = data[catFeature])\n    plt.show()","f9ccaa23":"sns.pairplot(data)\nplt.show()","2ab59737":"data['smoking_status'].replace('Unknown', np.nan, inplace=True)","e19b72c9":"data.isna().sum()","259d2a58":"data['bmi'].fillna(data['bmi'].mean(), inplace=True)\ndata['smoking_status'].fillna(data['smoking_status'].mode()[0], inplace = True)\n\ndata.isna().sum()","6e09c5fb":"sns.countplot(x = data['smoking_status'])","787f097b":"plt.figure(figsize=(10,7))\nsns.distplot(data[\"bmi\"])\nplt.show()","8be92079":"le = LabelEncoder()\n\nen_data = data[catFeatures].apply(le.fit_transform)\n\nen_data.head()","fd7d88d9":"y = data['stroke']\nX = pd.concat([en_data,data[numFeatures]], axis=1)\n\nX.head()","66c29647":"counter = Counter(y)\nprint(counter)\n\noversample = SMOTE()\n\nX, y = oversample.fit_resample(X,y)\n\ncounter = Counter(y)\nprint(counter)","7d557245":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, stratify=y)","4131a03a":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","ac582208":"from sklearn.ensemble import RandomForestClassifier\n\nmodel_rf = RandomForestClassifier(n_estimators=50)\nmodel_rf.fit(X_train, y_train)\ny_pred = model_rf.predict(X_test)","8d11c43f":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\nprint(\"The Training Score of RandomForestClassifier is: {:.3f}%\".format(model_rf.score(X_train, y_train)*100))\nprint(\"\\n----------------------------------------------------------------------\\n\")\nprint(\"The Classification report: \\n{}\\n\".format(classification_report(y_test, y_pred)))\n\n#Visualize confusion matrix\nplt.figure(figsize = (10, 8))\nsns.heatmap(confusion_matrix(y_test, y_pred), cmap = 'Blues', annot = True, fmt = 'd', linewidths = 5, cbar = False, annot_kws = {'fontsize': 15},\n           yticklabels = ['No stroke', 'Stroke'], xticklabels = ['Predicted no stroke', 'Predicted stroke'])\nplt.yticks(rotation = 0)\nplt.show()\n\nprint(\"\\n----------------------------------------------------------------------\\n\") \nprint(\"The Accuracy Score of RandomForestClassifier is: {:.3f}%\".format(accuracy_score(y_test, y_pred)*100))","ce12e529":"# Importing required libaries","494c4da4":"We will treat unknown values as missing values.","c4887c11":"# After filling the missing values countplot.","5f3b4e6c":"# Droping unecessary columns","2200600e":"# Filling the missing values.","185e364e":"# Importing the data\n","15ab4459":"# Training model using RandomForestClassifier.","a177545f":"# Applying Standardization.","8a122059":"# Looking for unique values","729e3286":"# Missing Data.","c928c536":"# Feature Selection","bf18ad1d":"# Plotting Countplots","03bba3c2":"# Using Lable encoding","8d43f425":"# Unsampling the Dataset","9d1907ed":"# Differentiating Categorical and Numerical Data.","7230cf4f":"# Splitting test and train set.","6b1c5e74":"# Checking for missing values."}}