{"cell_type":{"af5aa324":"code","35370a13":"code","a51db0cf":"code","c08e6dfc":"code","9a6d266c":"code","583b3f76":"code","f5958e2a":"code","d4048ba5":"code","ec0dddab":"code","518b1d6b":"code","d735029e":"code","05ec40da":"code","f8d42a24":"code","64d3babd":"code","2b98a6fc":"code","34fa1f6d":"code","141f9327":"code","438165f2":"code","8088feca":"code","7aea4414":"code","0d93bf21":"code","ae23a9c6":"code","b89def34":"code","bcb595e5":"code","db1a070d":"code","b6d975b0":"code","6fd3d55e":"code","993873bc":"code","9bfeeb7a":"code","cc53f05f":"code","7ec3f202":"code","fe334164":"code","3bb3822f":"code","a6bd52bb":"code","f255fc6c":"code","37c4336c":"code","544e555f":"code","0e5d6979":"code","33ef19bb":"code","cdcfd8d4":"code","4a388c94":"code","e13ec7b1":"code","d8e8f52c":"code","88bf245b":"code","644e8d9b":"code","64d3c716":"code","85c2ece1":"code","3ce2f1dd":"code","153ca16d":"code","610a8dd6":"code","5e7c356f":"code","212b09c3":"code","cd474a85":"code","b15fd896":"code","8daa0dd4":"code","e42600ab":"code","859c4f3b":"code","ad180c99":"code","4e2b4d10":"code","26727428":"code","20030ada":"code","6675cd58":"code","5bb49bf2":"code","d5172291":"code","efbba101":"code","eae429c8":"code","5d22a34c":"code","d19af9e8":"code","1623d197":"code","292cc56f":"code","1f0c3738":"code","1b55dbb5":"code","1d8aaf2f":"code","07f43150":"code","1ccd3612":"code","f3b82f0d":"code","8a2c6b24":"markdown","ae200dc1":"markdown","86954063":"markdown","9c2dc95c":"markdown","7222e5e9":"markdown","9a110688":"markdown","94b8d6bf":"markdown","d3a4513d":"markdown","bc5847ec":"markdown","3d558b4d":"markdown","84079675":"markdown","158e7eac":"markdown","8a41492b":"markdown","66efb054":"markdown","a3d7df3f":"markdown","ef6aa6a7":"markdown","708d563c":"markdown","60934402":"markdown","eb38ca74":"markdown","b2609f8c":"markdown","906d0d72":"markdown","bcc4ab0e":"markdown","96a9371f":"markdown","6be73ee9":"markdown","2e14ec70":"markdown","a4958004":"markdown","978578b9":"markdown","46112c09":"markdown","7f10a786":"markdown","7c319772":"markdown","ccd41c74":"markdown","5610ddf4":"markdown","c7750c38":"markdown","b38e0733":"markdown","2c756a41":"markdown","3376cad3":"markdown","ccfebc86":"markdown","54992dbf":"markdown","4279b1be":"markdown","be133ef8":"markdown","1c0e9b20":"markdown","b61dd262":"markdown","01f0925b":"markdown","aa908db0":"markdown","757aa548":"markdown","803ae7e2":"markdown","d824d43b":"markdown","fc501cbf":"markdown","be60a430":"markdown","d3cbc178":"markdown","84d6bf28":"markdown","fe3b1518":"markdown","0b77af33":"markdown","a52243f0":"markdown","6ed31e08":"markdown","833b73da":"markdown","3da761d7":"markdown","dcfeefc1":"markdown","27964065":"markdown","5503bdce":"markdown","2eae5e56":"markdown","197e1680":"markdown","ae788f91":"markdown","351a8094":"markdown","1f2a5bdf":"markdown"},"source":{"af5aa324":"from sklearn.metrics import make_scorer, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import preprocessing\nimport matplotlib.pylab as pylab\nimport matplotlib.pyplot as plt\nfrom pandas import get_dummies\nimport matplotlib as mpl\nimport xgboost as xgb\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport warnings\nimport sklearn\nimport scipy\nimport numpy\nimport json\nimport sys\nimport csv\nimport os","35370a13":"sns.set(style='white', context='notebook', palette='deep')\npylab.rcParams['figure.figsize'] = 12,8\nwarnings.filterwarnings('ignore')\nmpl.style.use('ggplot')\nsns.set_style('white')\n%matplotlib inline","a51db0cf":"# import train and test to play with it\ndf_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","c08e6dfc":"type(df_train)","9a6d266c":"type(df_test)","583b3f76":"# Modify the graph above by assigning each species an individual color.\ng = sns.FacetGrid(df_train, hue=\"Survived\", col=\"Pclass\", margin_titles=True,\n                  palette={1:\"seagreen\", 0:\"gray\"})\ng=g.map(plt.scatter, \"Fare\", \"Age\",edgecolor=\"w\").add_legend();","f5958e2a":"df_train.plot(kind='scatter', x='Age', y='Fare',alpha = 0.5,color = 'red')","d4048ba5":"#show scatter plot with using Matplotlib\nplt.figure(figsize=(8,6))\nplt.scatter(range(df_train.shape[0]), np.sort(df_train['Age'].values))\nplt.xlabel('index')\nplt.ylabel('Age')\nplt.title('Explore: Age')\nplt.show()","ec0dddab":"ax= sns.boxplot(x=\"Pclass\", y=\"Age\", data=df_train)\nax= sns.stripplot(x=\"Pclass\", y=\"Age\", data=df_train, jitter=True, edgecolor=\"gray\")\nplt.show()","518b1d6b":"# histograms\ndf_train.hist(figsize=(15,20));\nplt.figure();","d735029e":"df_train[\"Age\"].hist();","05ec40da":"df_train.Age.plot(kind = 'hist',bins = 5);","f8d42a24":"f,ax=plt.subplots(1,2,figsize=(20,10))\ndf_train[df_train['Survived']==0].Age.plot.hist(ax=ax[0],bins=20,edgecolor='black',color='red')\nax[0].set_title('Survived= 0')\nx1=list(range(0,85,5))\nax[0].set_xticks(x1)\ndf_train[df_train['Survived']==1].Age.plot.hist(ax=ax[1],color='green',bins=20,edgecolor='black')\nax[1].set_title('Survived= 1')\nx2=list(range(0,85,5))\nax[1].set_xticks(x2)\nplt.show()","64d3babd":"f,ax=plt.subplots(1,2,figsize=(18,8))\ndf_train['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived',data=df_train,ax=ax[1])\nax[1].set_title('Survived')\nplt.show()","2b98a6fc":"f,ax=plt.subplots(1,2,figsize=(18,8))\ndf_train[['Sex','Survived']].groupby(['Sex']).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex',hue='Survived',data=df_train,ax=ax[1])\nax[1].set_title('Sex:Survived vs Dead')\nplt.show()","34fa1f6d":"sns.countplot('Pclass', hue='Survived', data=df_train)\nplt.title('Pclass: Sruvived vs Dead')\nplt.show()","141f9327":"# scatter plot matrix\npd.plotting.scatter_matrix(df_train,figsize=(10,10))\nplt.figure();","438165f2":"# violinplots on petal-length for each species\nsns.violinplot(data=df_train,x=\"Sex\", y=\"Age\")","8088feca":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=df_train,split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=df_train,split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","7aea4414":"# Using seaborn pairplot to see the bivariate relation between each pair of features\nsns.pairplot(data=df_train[[\"Fare\",\"Survived\",\"Age\",\"Pclass\"]],\n             hue=\"Survived\", dropna=True);","0d93bf21":"sns.FacetGrid(df_train, hue=\"Survived\", size=5).map(sns.kdeplot, \"Fare\").add_legend()\nplt.show();","ae23a9c6":"sns.jointplot(x='Fare',y='Age',data=df_train);","b89def34":"sns.jointplot(x='Fare',y='Age' ,data=df_train, kind='reg');","bcb595e5":"sns.swarmplot(x='Pclass',y='Age',data=df_train);","db1a070d":"plt.figure(figsize=(7,4)) \nsns.heatmap(df_train.corr(),annot=True,cmap='cubehelix_r') #draws  heatmap with input as the correlation matrix calculted by(iris.corr())\nplt.show();","b6d975b0":"plt.imshow(df_train.corr(), cmap='hot', interpolation='nearest')\nplt.show()","6fd3d55e":"df_train['Pclass'].value_counts().plot(kind=\"bar\");","993873bc":"sns.factorplot('Pclass','Survived',hue='Sex',data=df_train)\nplt.show();","9bfeeb7a":"sns.factorplot('SibSp','Survived',hue='Pclass',data=df_train)\nplt.show()","cc53f05f":"#let's see some others factorplot\nf,ax=plt.subplots(1,2,figsize=(20,8))\nsns.barplot('SibSp','Survived', data=df_train,ax=ax[0])\nax[0].set_title('SipSp vs Survived in BarPlot')\nsns.factorplot('SibSp','Survived', data=df_train,ax=ax[1])\nax[1].set_title('SibSp vs Survived in FactorPlot')\nplt.close(2)\nplt.show();","7ec3f202":"f,ax=plt.subplots(1,3,figsize=(20,8))\nsns.distplot(df_train[df_train['Pclass']==1].Fare,ax=ax[0])\nax[0].set_title('Fares in Pclass 1')\nsns.distplot(df_train[df_train['Pclass']==2].Fare,ax=ax[1])\nax[1].set_title('Fares in Pclass 2')\nsns.distplot(df_train[df_train['Pclass']==3].Fare,ax=ax[2])\nax[2].set_title('Fares in Pclass 3')\nplt.show()","fe334164":"# shape\nprint(df_train.shape)","3bb3822f":"#columns*rows\ndf_train.size","a6bd52bb":"##df_train.isnull().sum()","f255fc6c":"def check_missing_data(df):\n    flag=df.isna().sum().any()\n    if flag==True:\n        total = df.isnull().sum()\n        percent = (df.isnull().sum())\/(df.isnull().count()*100)\n        output = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n        data_type = []\n        # written by MJ Bahmani\n        for col in df.columns:\n            dtype = str(df[col].dtype)\n            data_type.append(dtype)\n        output['Types'] = data_type\n        return(np.transpose(output))\n    else:\n        return(False)","37c4336c":"check_missing_data(df_train)","544e555f":"check_missing_data(df_test)","0e5d6979":"# remove rows that have NA's\n#train = train.dropna()","33ef19bb":"print(df_train.shape)","cdcfd8d4":"print(df_train.info())","4a388c94":"df_train['Age'].unique()","e13ec7b1":"df_train[\"Pclass\"].value_counts()\n","d8e8f52c":"df_train.head(5) ","88bf245b":"df_train.tail() ","644e8d9b":"df_train.sample(5) ","64d3c716":"df_train.describe() ","85c2ece1":"df_train.isnull().sum()","3ce2f1dd":"df_train.groupby('Survived').count()","153ca16d":"df_train.columns","610a8dd6":"df_train.where(df_train['Age']==30).head(2)","5e7c356f":"df_train[df_train['Age']==30]","212b09c3":"X = df_train.iloc[:, :-1].values\ny = df_train.iloc[:, -1].values","cd474a85":"\ndef simplify_ages(df):\n    df.Age = df.Age.fillna(-0.5)\n    bins = (-1, 0, 5, 12, 18, 25, 35, 60, 120)\n    group_names = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\n    categories = pd.cut(df.Age, bins, labels=group_names)\n    df.Age = categories\n    return df\n\ndef simplify_cabins(df):\n    df.Cabin = df.Cabin.fillna('N')\n    df.Cabin = df.Cabin.apply(lambda x: x[0])\n    return df\n\ndef simplify_fares(df):\n    df.Fare = df.Fare.fillna(-0.5)\n    bins = (-1, 0, 8, 15, 31, 1000)\n    group_names = ['Unknown', '1_quartile', '2_quartile', '3_quartile', '4_quartile']\n    categories = pd.cut(df.Fare, bins, labels=group_names)\n    df.Fare = categories\n    return df\n\ndef format_name(df):\n    df['Lname'] = df.Name.apply(lambda x: x.split(' ')[0])\n    df['NamePrefix'] = df.Name.apply(lambda x: x.split(' ')[1])\n    return df    \n    \ndef drop_features(df):\n    return df.drop(['Ticket', 'Name', 'Embarked'], axis=1)\n\ndef transform_features(df):\n    df = simplify_ages(df)\n    df = simplify_cabins(df)\n    df = simplify_fares(df)\n    df = format_name(df)\n    df = drop_features(df)\n    return df\n\ndf_train = transform_features(df_train)\ndf_test = transform_features(df_test)\ndf_train.head()","b15fd896":"def encode_features(df_train, df_test):\n    features = ['Fare', 'Cabin', 'Age', 'Sex', 'Lname', 'NamePrefix']\n    df_combined = pd.concat([df_train[features], df_test[features]])\n    \n    for feature in features:\n        le = preprocessing.LabelEncoder()\n        le = le.fit(df_combined[feature])\n        df_train[feature] = le.transform(df_train[feature])\n        df_test[feature] = le.transform(df_test[feature])\n    return df_train, df_test","8daa0dd4":"#Encode Dataset\ndf_train, df_test = encode_features(df_train, df_test)\ndf_train.head()","e42600ab":"df_test.head()","859c4f3b":"x_all = df_train.drop(['Survived', 'PassengerId'], axis=1)\ny_all = df_train['Survived']","ad180c99":"num_test = 0.3\nX_train, X_test, y_train, y_test = train_test_split(x_all, y_all, test_size=num_test, random_state=100)","4e2b4d10":"result=None","26727428":"# Choose the type of classifier. \nrfc = RandomForestClassifier()\n\n# Choose some parameter combinations to try\nparameters = {'n_estimators': [4, 6, 9], \n              'max_features': ['log2', 'sqrt','auto'], \n              'criterion': ['entropy', 'gini'],\n              'max_depth': [2, 3, 5, 10], \n              'min_samples_split': [2, 3, 5],\n              'min_samples_leaf': [1,5,8]\n             }\n\n# Type of scoring used to compare parameter combinations\nacc_scorer = make_scorer(accuracy_score)\n\n# Run the grid search\ngrid_obj = GridSearchCV(rfc, parameters, scoring=acc_scorer)\ngrid_obj = grid_obj.fit(X_train, y_train)\n\n# Set the clf to the best combination of parameters\nrfc = grid_obj.best_estimator_\n\n# Fit the best algorithm to the data. \nrfc.fit(X_train, y_train)","20030ada":"rfc_prediction = rfc.predict(X_test)\nrfc_score=accuracy_score(y_test, rfc_prediction)\nprint(rfc_score)","6675cd58":"xgboost = xgb.XGBClassifier(max_depth=3, n_estimators=300, learning_rate=0.05).fit(X_train, y_train)","5bb49bf2":"xgb_prediction = xgboost.predict(X_test)\nxgb_score=accuracy_score(y_test, xgb_prediction)\nprint(xgb_score)","d5172291":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","efbba101":"logreg_prediction = logreg.predict(X_test)\nlogreg_score=accuracy_score(y_test, logreg_prediction)\nprint(logreg_score)\n","eae429c8":"from sklearn.tree import DecisionTreeRegressor\n\n# Define model. Specify a number for random_state to ensure same results each run\ndt = DecisionTreeRegressor(random_state=1)\n\n","5d22a34c":"# Fit model\ndt.fit(X_train, y_train)","d19af9e8":"dt_prediction = dt.predict(X_test)\ndt_score=accuracy_score(y_test, dt_prediction)\nprint(dt_score)","1623d197":"from sklearn.tree import ExtraTreeRegressor\n# Define model. Specify a number for random_state to ensure same results each run\netr = ExtraTreeRegressor()","292cc56f":"# Fit model\netr.fit(X_train, y_train)","1f0c3738":"etr_prediction = etr.predict(X_test)\netr_score=accuracy_score(y_test, etr_prediction)\nprint(etr_score)","1b55dbb5":"X_train = df_train.drop(\"Survived\",axis=1)\ny_train = df_train[\"Survived\"]","1d8aaf2f":"X_train = X_train.drop(\"PassengerId\",axis=1)\nX_test  = df_test.drop(\"PassengerId\",axis=1)","07f43150":"xgboost = xgb.XGBClassifier(max_depth=3, n_estimators=300, learning_rate=0.05).fit(X_train, y_train)","1ccd3612":"Y_pred = xgboost.predict(X_test)","f3b82f0d":"submission = pd.DataFrame({\n        \"PassengerId\": df_test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('submission.csv', index=False)","8a2c6b24":"To check out last 5 row of the data set, we use tail() function","ae200dc1":"<a id=\"761\"><\/a> <br>\n## 7-6-1 Prediction","86954063":"<a id=\"627\"><\/a> <br>\n###  6-2-7 kdeplot","9c2dc95c":"<a id=\"628\"><\/a> <br>\n### 6-2-8 jointplot","7222e5e9":"><font color=\"red\"><b>Note: <\/b><\/font>\n\n* Each **row** is an observation (also known as : sample, example, instance, record)\n* Each **column** is a feature (also known as: Predictor, attribute, Independent Variable, input, regressor, Covariate)","9a110688":"<a id=\"632\"><\/a> <br>\n## 6-3-2 Explorer Dataset\n1- Dimensions of the dataset.\n\n2- Peek at the data itself.\n\n3- Statistical summary of all attributes.\n\n4- Breakdown of the data by the class variable.[7]\n\nDon\u2019t worry, each look at the data is **one command**. These are useful commands that you can use again and again on future projects.\n\n###### [Go to top](#top)","94b8d6bf":">  <font color=\"red\"><b>Note:<\/b><\/font>\nfor getting some information about the dataset you can use **info()** command","d3a4513d":"If you want to remove all the null value, you can uncomment this line.","bc5847ec":"### 2- I hope this notebook helped in your learning.","3d558b4d":"To check out how many null info are on the dataset, we can use **isnull().sum()","84079675":"### 3- If it helped in your learning, then please upvote.","158e7eac":"<a id=\"64\"><\/a> <br>\n## 6-4 Data Cleaning \n1. When dealing with real-world data,** dirty data** is the norm rather than the exception. \n1. We continuously need to predict correct values, impute missing ones, and find links between various data artefacts such as schemas and records. \n1. We need to stop treating data cleaning as a piecemeal exercise (resolving different types of errors in isolation), and instead leverage all signals and resources (such as constraints, available statistics, and dictionaries) to accurately predict corrective actions.\n1. The primary goal of data cleaning is to detect and remove errors and **anomalies** to increase the value of data in analytics and decision making.[8]\n\n###### [Go to top](#top)","8a41492b":">  <font color=\"red\"><b>Note:<\/b><\/font>\nyou see number of unique item for **Age** and **Pclass** with command below:","66efb054":"It looks like perhaps two of the input variables have a Gaussian distribution. This is useful to note as we can use algorithms that can exploit this assumption.","a3d7df3f":"<a id=\"623\"><\/a> <br>\n### 6-2-3 Histogram\nWe can also create a **histogram** of each input variable to get an idea of the **distribution**.","ef6aa6a7":"<a id=\"642\"><\/a> <br>\n## 6-4-2 Feature Encoding\nIn machine learning projects, one important part is feature engineering. It is very common to see categorical features in a dataset. However, our machine learning algorithm can only **read numerical values**. It is essential to encoding categorical features into numerical values[28]\n1. Encode labels with value between 0 and n_classes-1\n1. LabelEncoder can be used to normalize labels.\n1. It can also be used to transform non-numerical labels (as long as they are hashable and comparable) to numerical labels.","708d563c":"<a id=\"76\"><\/a> <br>\n## 7-6 Logistic Regression\nThe logistic model  is a widely used statistical model that, in its basic form, uses a logistic function to model a binary dependent variable; many more complex extensions exist. In regression analysis, logistic regression (or logit regression) is estimating the parameters of a logistic model","60934402":"<a id=\"751\"><\/a> <br>\n## 7-5-1 Prediction","eb38ca74":"<a id=\"624\"><\/a> <br>\n### 6-2-4 Multivariate Plots\nNow we can look at the interactions between the variables.\n\nFirst, let\u2019s look at scatterplots of all pairs of attributes. This can be helpful to spot structured relationships between input variables.","b2609f8c":"\n<a id=\"71\"><\/a> <br>\n## 7-1 Families of ML algorithms\nThere are several categories for machine learning algorithms, below are some of these categories:\n* Linear\n    * Linear Regression\n    * Logistic Regression\n    * Support Vector Machines\n* Tree-Based\n    * Decision Tree\n    * Random Forest\n    * GBDT\n* KNN\n* Neural Networks\n\n-----------------------------\nAnd if we  want to categorize ML algorithms with the type of learning, there are below type:\n* Classification\n\n    * k-Nearest Neighbors\n    * LinearRegression\n    * SVM\n    * DT \n    * NN\n    \n* clustering\n\n    * K-means\n    * HCA\n    * Expectation Maximization\n    \n* Visualization and\tdimensionality \treduction:\n\n    * Principal Component Analysis(PCA)\n    * Kernel PCA\n    * Locally -Linear\tEmbedding \t(LLE)\n    * t-distributed\tStochastic\tNeighborEmbedding \t(t-SNE)\n    \n* Association rule learning\n\n    * Apriori\n    * Eclat\n* Semisupervised learning\n* Reinforcement Learning\n    * Q-learning\n* Batch learning & Online learning\n* Ensemble  Learning\n\n>  <font color=\"red\"><b>Note:<\/b><\/font>\nHere is no method which outperforms all others for all tasks\n\n###### [Go to top](#top)","906d0d72":"<a id=\"6\"><\/a> <br>\n## 6- Exploratory Data Analysis(EDA)\n In this section, you'll learn how to use graphical and numerical techniques to begin uncovering the structure of your data. \n \n* Which variables suggest interesting relationships?\n* Which observations are unusual?\n* Analysis of the features!\n\n ><font color=\"red\"><b>Note:<\/b><\/font>\n You can read more about [EDA](https:\/\/www.datacamp.com\/community\/tutorials\/kaggle-machine-learning-eda)\n\nBy the end of the section, you'll be able to answer these questions and more, while generating graphics that are both **insightful** and **beautiful**.  then we will review analytical and statistical operations:\n\n*   5-1 Data Collection\n*   5-2 Visualization\n*   5-3 Data Preprocessing\n*   5-4 Data Cleaning\n<img src=\"http:\/\/s9.picofile.com\/file\/8338476134\/EDA.png\">\n\n ><font color=\"red\"><b>Note:<\/b><\/font>\n You can change the order of the above steps.","bcc4ab0e":"You can easily see the relationship between two variables through the following plot.","96a9371f":"### 4- Import libraries","6be73ee9":"Prepare X(features) , y(target)","2e14ec70":"<a id=\"73\"><\/a> <br>\n## 7-3 How to prevent overfitting &  underfitting?\n\n<img src='https:\/\/cdn-images-1.medium.com\/max\/800\/1*JZbxrdzabrT33Yl-LrmShw.png' width=500 height=500>\n1. graph on the left side:\n    1. we can predict that the line does not cover all the points shown in the graph. Such model tend to cause underfitting of data .It also called High Bias.\n\n1. graph on right side:\n    1. shows the predicted line covers all the points in graph. In such condition you can also think that it\u2019s a good graph which cover all the points. But that\u2019s not actually true, the predicted line into the graph covers all points which are noise and outlier. Such model are also responsible to predict poor result due to its complexity.It is also called High Variance.\n\n1. middle graph:\n    1. it shows a pretty good predicted line. It covers majority of the point in graph and also maintains the balance between bias and variance.[30]","a4958004":"### 6-2-13 Distplot","978578b9":"After loading the data via **pandas**, we should checkout what the content is, description and via the following:","46112c09":"<a id=\"626\"><\/a> <br>\n### 6-2-6 pairplot","7f10a786":"### 6-2-12 Factorplot","7c319772":">  <font color=\"red\"><b>Note:<\/b><\/font>\nhow many NA elements in every column\n","ccd41c74":"<a id=\"622\"><\/a> <br>\n### 6-2-2 Box\nIn descriptive statistics, a **box plot** or boxplot is a method for graphically depicting groups of numerical data through their quartiles. Box plots may also have lines extending vertically from the boxes (whiskers) indicating variability outside the upper and lower quartiles, hence the terms box-and-whisker plot and box-and-whisker diagram.[wikipedia]","5610ddf4":"<a id=\"62\"><\/a> <br>\n## 6-2 Visualization\n**Data visualization**  is the presentation of data in a pictorial or graphical format. It enables decision makers to see analytics presented visually, so they can grasp difficult concepts or identify new patterns.\n\nWith interactive visualization, you can take the concept a step further by using technology to drill down into charts and graphs for more detail, interactively changing what data you see and how it\u2019s processed.[SAS]\n\n In this section I show you  **11 plots** with **matplotlib** and **seaborn** that is listed in the blew picture:\n <img src=\"http:\/\/s8.picofile.com\/file\/8338475500\/visualization.jpg\" width=400 height=400 \/>\n\n###### [Go to top](#top)","c7750c38":"<a id=\"641\"><\/a> <br>\n## 6-4-1 Transforming Features\nData transformation is the process of converting data from one format or structure into another format or structure[[wiki](https:\/\/en.wikipedia.org\/wiki\/Data_transformation)] \n1. Age\n1. Cabin\n1. Fare\n1. Name","b38e0733":"<a id=\"710\"><\/a> <br>\n## 7-10 How Do I Submit?\n1. Fork and Commit this Kernel.\n1. Then navigate to the Output tab of the Kernel and \"Submit to Competition\".","2c756a41":"Seperating the data into dependent and independent variables.","3376cad3":"<a id=\"72\"><\/a> <br>\n## 7-2 Prepare Features & Targets\nFirst of all seperating the data into independent(Feature) and dependent(Target) variables.\n\n>  <font color=\"red\"><b>Note:<\/b><\/font>\n* X==>> Feature - independent\n* y==>> Target    - dependent","ccfebc86":"<a id=\"75\"><\/a> <br>\n## 7-5 XGBoost\n[XGBoost](https:\/\/en.wikipedia.org\/wiki\/XGBoost) is an open-source software library which provides a gradient boosting framework for C++, Java, Python, R, and Julia. it aims to provide a \"Scalable, Portable and Distributed Gradient Boosting (GBM, GBRT, GBDT) Library\". ","54992dbf":"<a id=\"625\"><\/a> <br>\n### 6-2-5 Violinplots\nA violin plot plays a similar role as a box and whisker plot. It shows the distribution of quantitative data across several levels of one (or more) categorical variables such that those distributions can be compared. Unlike a box plot, in which all of the plot components correspond to actual datapoints, the violin plot features a kernel density estimation of the underlying distribution.[link](https:\/\/seaborn.pydata.org\/generated\/seaborn.violinplot.html)","4279b1be":"<a id=\"741\"><\/a> <br>\n## 7-4-1 Prediction","be133ef8":"### 6-2-12 Conclusion\nWe have used Python to apply data visualization tools to theTitanic dataset.","1c0e9b20":"###  6-2-11 Bar Plot","b61dd262":"As you can see in the below in python, it is so easy perform some query on the dataframe:","01f0925b":"<a id=\"77\"><\/a> <br>\n## 7-7 DecisionTreeRegressor\nThe function to measure the quality of a split. Supported criteria are \u201cmse\u201d for the mean squared error, which is equal to variance reduction as feature selection criterion and minimizes the L2 loss using the mean of each terminal node, \u201cfriedman_mse\u201d, which uses mean squared error with Friedman\u2019s improvement score for potential splits, and \u201cmae\u201d for the mean absolute error, which minimizes the L1 loss using the median of each terminal node.","aa908db0":"<a id=\"74\"><\/a> <br>\n## 7-4 RandomForestClassifier\nA random forest is a meta estimator that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting. The sub-sample size is always the same as the original input sample size but the samples are drawn with replacement if bootstrap=True (default).","757aa548":">  <font color=\"red\"><b>Note:<\/b><\/font>\nPreprocessing and generation pipelines depend on a model type","803ae7e2":">  <font color=\"red\"><b>Note:<\/b><\/font>\nIn pandas's data frame you can perform some query such as \"where\".","d824d43b":"To print dataset **columns**, we can use columns atribute.","fc501cbf":"We can also replace the histograms shown in the diagonal of the pairplot by kde.","be60a430":"<a id=\"63\"><\/a> <br>\n## 6-3 Data Preprocessing\n**Data preprocessing** refers to the transformations applied to our data before feeding it to the algorithm.\n \nData Preprocessing is a technique that is used to convert the raw data into a clean data set. In other words, whenever the data is gathered from different sources it is collected in raw format which is not feasible for the analysis.\nthere are plenty of steps for data preprocessing and **we just listed some of them** :\n* removing Target column (id)\n* Sampling (without replacement)\n* Dealing with Imbalanced Data\n* Introducing missing values and treating them (replacing by average values)\n* Noise filtering\n* Data discretization\n* Normalization and standardization\n* PCA analysis\n* Feature selection (filter, embedded, wrapper)\n\n###### [Go to top](#top)","d3cbc178":"<a id=\"7\"><\/a> <br>\n## 7- Model Deployment\nIn this section have been applied plenty of  ** learning algorithms** that play an important rule in your experiences and improve your knowledge in case of ML technique.\n>  <font color=\"red\"><b>Note:<\/b><\/font>\nThe results shown here may be slightly different for your analysis because, for example, the neural network algorithms use random number generators for fixing the initial value of the weights (starting points) of the neural networks, which often result in obtaining slightly different (local minima) solutions each time you run the analysis. Also note that changing the seed for the random number generator used to create the train, test, and validation samples can change your results.","84d6bf28":"\nWe can get a quick idea of how many instances (rows) and how many attributes (columns) the data contains with the shape property.\n\nYou should see **891** instances and **12** attributes:","fe3b1518":"<a id=\"629\"><\/a> <br>\n###  6-2-9 Swarm plot","0b77af33":"<a id=\"61\"><\/a> <br>\n## 6-1 Data Collection\n**Data collection** is the process of gathering and measuring data, information or any variables of interest in a standardized and established manner that enables the collector to answer or test hypothesis and evaluate outcomes of the particular collection.[techopedia]\n<br>\nI start Collection Data by the training and testing datasets into Pandas DataFrames.\n###### [Go to top](#top)","a52243f0":"<a id=\"79\"><\/a> <br>\n## 7-9 ExtraTreeRegressor\nExtra Tree Regressor differ from classic decision trees in the way they are built. When looking for the best split to separate the samples of a node into two groups, random splits are drawn for each of the max_features randomly selected features and the best split among those is chosen. When max_features is set 1, this amounts to building a totally random decision tree.","6ed31e08":"Note the diagonal grouping of some pairs of attributes. This suggests a high correlation and a predictable relationship.","833b73da":"You can change your model and submit the results of other models","3da761d7":"To give a statistical summary about the dataset, we can use **describe()","dcfeefc1":"<a id=\"631\"><\/a> <br>\n## 6-3-1 Features\nFeatures:\n* numeric\n* categorical\n* ordinal\n* datetime\n* coordinates\n\n### Find the type of features in titanic dataset:\n<img src=\"http:\/\/s9.picofile.com\/file\/8339959442\/titanic.png\" height=\"700\" width=\"600\" \/>","27964065":"<a id=\"74\"><\/a> <br>\n## 7-4 Accuracy and precision\nWe know that the titanic problem is a binary classification and to evaluate, we just need to calculate the accuracy.\n\n1. **accuracy**\n\n    1. Your score is the percentage of passengers you correctly predict. This is known simply as \"accuracy\u201d.\n\n1. **precision** : \n\n    1. In pattern recognition, information retrieval and binary classification, precision (also called positive predictive value) is the fraction of relevant instances among the retrieved instances, \n1. **recall** : \n\n    1. recall is the fraction of relevant instances that have been retrieved over the total amount of relevant instances. \n1. **F-score** :\n\n    1. the F1 score is a measure of a test's accuracy. It considers both the precision p and the recall r of the test to compute the score: p is the number of correct positive results divided by the number of all positive results returned by the classifier, and r is the number of correct positive results divided by the number of all relevant samples (all samples that should have been identified as positive). The F1 score is the harmonic average of the precision and recall, where an F1 score reaches its best value at 1 (perfect precision and recall) and worst at 0.\n\n1. **What is the difference between accuracy and precision?**\n    1. \"Accuracy\" and \"precision\" are general terms throughout science. A good way to internalize the difference are the common \"bullseye diagrams\". In machine learning\/statistics as a whole, accuracy vs. precision is analogous to bias vs. variance.","5503bdce":"### 5- Setup\n\nA few tiny adjustments for better **code readability**","2eae5e56":"To pop up 5 random rows from the data set, we can use **sample(5)**  function","197e1680":"To check the first 5 rows of the data set, we can use head(5).","ae788f91":"# 1- How to survive the titanic","351a8094":"<a id=\"621\"><\/a> <br>\n### 6-2-1 Scatter Plot\n\n[Scatter plot](https:\/\/en.wikipedia.org\/wiki\/Scatter_plot) Purpose to identify the type of relationship (if any) between two quantitative variables.\n\n\n","1f2a5bdf":"<a id=\"6210\"><\/a> <br>\n### 6-2-10 Heatmap\nA heatmap is a two-dimensional graphical representation of data where the individual values that are contained in a matrix are represented as colors.[link](https:\/\/blog.quantinsti.com\/creating-heatmap-using-python-seaborn\/)"}}