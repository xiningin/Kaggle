{"cell_type":{"14bcfc1a":"code","1f00ea5c":"code","f63ffd7c":"code","ae71f1fc":"code","0488ea94":"code","094cf1a7":"code","6db0c1e3":"code","f756b67a":"code","27e43f44":"code","b0bc7500":"code","55d7e1c7":"code","a0084f89":"code","839e0432":"code","134eab11":"code","00de154c":"code","a654590e":"code","69e241e4":"code","12f7443f":"code","e5302824":"code","7b80afbd":"code","3f2a5f1f":"code","ddb4422e":"code","47d20204":"code","e79f7d78":"code","d03c923d":"code","51ed74db":"code","facbbf6a":"code","0d7d3177":"code","a45fbb7f":"code","35d5c6e3":"code","fb108521":"code","261b304c":"code","14f7bec4":"code","0a9a9e21":"code","68b927bb":"code","e7ad289d":"code","2c1103ac":"code","67fd0a76":"code","260510dd":"code","70d7f029":"code","8f1bc64c":"code","be2cf9b0":"code","bebf8a0d":"code","11da23a4":"code","fcae4920":"code","3e800a48":"code","27e0710c":"code","5bcb182f":"code","01ce0598":"code","5ac644dd":"code","03d362e3":"code","822fda37":"code","01f713e3":"code","1e816009":"code","28b4ce3c":"code","75d34c80":"code","4664a28d":"code","cdf869a3":"code","9495af79":"code","d4097028":"code","cb9909d9":"code","33b3e279":"code","1971dd11":"code","9d96ed5a":"code","85c3005e":"code","956ad2e4":"code","edbead3c":"code","dd9bbb60":"code","8a219857":"code","77ebb8f3":"code","f96ef785":"code","346f0aa7":"code","ac2aeb63":"code","6630ce8f":"code","ab2c29bb":"code","8527958f":"code","cb513f29":"code","977a5c3c":"code","f3cc0a19":"code","ffda5a95":"code","2c5e093a":"code","99d84649":"code","1a4a38e6":"code","2d4b4f0e":"code","26f8c177":"code","bff1e51c":"code","e9c0d351":"code","3b881609":"code","50231b79":"markdown","8d03ab1f":"markdown"},"source":{"14bcfc1a":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfrom yaml import safe_load\nimport pickle\nimport numpy as np","1f00ea5c":"# Data Collected from https:\/\/cricsheet.org\/matches\/\n#https:\/\/cricsheet.org\/downloads\/t20s.zip","f63ffd7c":"#fetching yaml files location\nmatches = []\nfor match in os.listdir('..\/input\/t20i-raw-data\/t20_yaml'):\n    matches.append(os.path.join('..\/input\/t20i-raw-data\/t20_yaml',match))","ae71f1fc":"matches[0]","0488ea94":"#fetching data from yaml files\ndf_T20 = pd.DataFrame()\nc=0\nfor match in matches: \n    with open(match, 'r') as f:\n        try:\n            temp = pd.json_normalize(safe_load(f))\n            df_T20 = df_T20.append(temp)\n        except:\n            print(c)\n        c+=1","094cf1a7":"'''df_T20 = pd.DataFrame()\nfor match in matches: \n    with open(match) as t:\n        d = json.load(t)\n        temp = pd.json_normalize(d)\n        df_T20 = df_T20.append(temp)'''","6db0c1e3":"print('Total T20 matches in the dataset:',len(df_T20))","f756b67a":"pickle.dump(df_T20,open('rawData.pkl','wb'))","27e43f44":"#df_T20.columns.to_list()","b0bc7500":"#removing unwanted columns\ncol=[item for item in df_T20.columns.to_list() if ('info.players') not in item]\ncol=[item for item in col if ('info.registry') not in item]\ncol=[item for item in col if ('meta') not in item]","55d7e1c7":"df_T20[col].describe(include='all').T","a0084f89":"col","839e0432":"#finalize from col\ncolumns=[\n    'innings',\n    'info.gender',\n    'info.overs',\n    'info.match_type',\n    'info.outcome.winner',\n    'info.teams',\n    'info.toss.decision',\n    'info.toss.winner',\n    'info.venue',\n    'info.city'\n]","134eab11":"df_T20_2=df_T20.copy()","00de154c":"df_T20=df_T20[columns]","a654590e":"#adding some unique identifier to each match\ndf_T20['uniqueId'] = range(1,len(df_T20)+1)","69e241e4":"df_T20.head()","12f7443f":"'''\ndf_T20['info.dates']=df_T20['info.dates'].apply(lambda x:x[0])\ndf_T20['info.dates']=pd.to_datetime(df_T20['info.dates'], format=\"%Y-%m-%d\")\ndf_T20=df_T20.reset_index(drop=True)\npd.DataFrame(df_T20.loc[df_T20['info.dates'].idxmax(),])\n'''","e5302824":"#Removing irrelevant records","7b80afbd":"df_T20['info.overs'].value_counts()","3f2a5f1f":"# 1. since for T20 50 overs isn't possible remove those records\n\ndf_T20=df_T20[df_T20['info.overs']==20]","ddb4422e":"df_T20['info.overs'].value_counts()","47d20204":"df_T20['info.match_type'].value_counts()","e79f7d78":"sns.countplot(x=\"info.gender\", data=df_T20)","d03c923d":"#there is huge difference in male and female matches so we can train them separately\n# currenty we are taking one with more data","51ed74db":"df_T20=df_T20[df_T20['info.gender']=='male']","facbbf6a":"df_T20['info.gender'].value_counts()","0d7d3177":"#remove these 3 columns also\n\ndf_T20=df_T20.drop(columns=['info.gender','info.match_type','info.overs'],axis=1)","a45fbb7f":"df_T20.shape","35d5c6e3":"pickle.dump(df_T20,open('rawData_2.pkl','wb'))","fb108521":"len(df_T20[df_T20['info.outcome.winner'] == df_T20['info.toss.winner']])\/len(df_T20)","261b304c":"#matches = pickle.load(open('rawData_2.pkl','rb'))","14f7bec4":"# Analytics of venue","0a9a9e21":"d=df_T20['info.venue']","68b927bb":"y=dict(d.value_counts())","e7ad289d":"X=pd.DataFrame(data=y.values(),index=y.keys())","2c1103ac":"X.columns=['count']","67fd0a76":"X.sort_values(by='count',ascending=False)","260510dd":"#for now keeping all venue matches, will see this feature later on\n# Some of them will get removed when we apply filters on top T20 playing teams","70d7f029":"sns.scatterplot(x=df_T20['info.toss.winner'], y=df_T20['info.outcome.winner'], hue=df_T20['info.toss.decision'])\n","8f1bc64c":"'''ven=df_T20['info.venue'].value_counts()[df_T20['info.venue'].value_counts()>6].index.tolist()\ndf_try1=df_T20[df_T20['info.venue'].isin(ven)]'''","be2cf9b0":"df_T20.head()","bebf8a0d":"#may ignore Toss and winning or lossing team","11da23a4":"df_T20=df_T20.drop(columns=['info.toss.decision','info.toss.winner'],axis=1)","fcae4920":"# Lets Explore the innings column to get ball by ball info and extract important features","3e800a48":"len(df_T20.iloc[0]['innings'])","27e0710c":"#1st innings info\n#df_T20.iloc[0]['innings'][0]","5bcb182f":"#2nd innings info\n#df_T20.iloc[0]['innings'][1]","01ce0598":"df_T20.iloc[0]['innings'][0]['1st innings'].keys()","5ac644dd":"#can be used to get the batting team name\ndf_T20.iloc[0]['innings'][0]['1st innings']['team']","03d362e3":"df_T20.iloc[0]['innings'][0]['1st innings']['deliveries'][0]","822fda37":"df_T20.iloc[0]['innings'][0]['1st innings']['deliveries'][0][0.1]","01f713e3":"df_T20.iloc[0]['innings'][0]['1st innings']['deliveries'][0][0.1]['runs']","1e816009":"df_T20.columns","28b4ce3c":"df_T20.head()","75d34c80":"#df_T20.iloc[0]['info.outcome.winner']","4664a28d":"#1st innings\ndf_final = pd.DataFrame()\nfor i,row in df_T20.iterrows():\n    matchId = []\n    balls = []  \n    runs = []\n    battingTeam = []\n    bowlingTeam = []\n    player_out = []\n    city = []\n    venue = []\n    tossWinner = []\n    \n    mId=row['uniqueId']\n    pt=row['info.teams']\n    bt=row['innings'][0]['1st innings']['team']\n    c=row['info.city']\n    v=row['info.venue']\n    toss=row['info.outcome.winner']\n    for Delivery in row['innings'][0]['1st innings']['deliveries']:\n        \n        for k in Delivery.keys():\n            matchId.append(str(mId)+'_1')\n            balls.append(k)\n            runs.append(Delivery[k]['runs']['total'])\n            battingTeam.append(bt)\n            tossWinner.append(toss)\n            if bt==pt[0]:\n                bowlingTeam.append(pt[1])\n            else:\n                bowlingTeam.append(pt[0])\n            city.append(c)\n            venue.append(v)\n            try:\n                cal=Delivery[k]['wicket']['player_out']\n                player_out.append(1)\n            except:\n                player_out.append(0)\n    match_Balls = pd.DataFrame({'matchId':matchId,'balls':balls,'runs':runs,'tossWinner':tossWinner,'battingTeam':battingTeam,'bowlingTeam':bowlingTeam,'player_out':player_out,'city':city,'venue':venue})\n    df_final = df_final.append(match_Balls)","cdf869a3":"df_final.head()","9495af79":"#df_final['player_out'].value_counts()","d4097028":"# can thought of removing less playing countries","cb9909d9":"top_playing_teams=df_final.groupby('matchId')['battingTeam'].max().value_counts().head(13).index.to_list()","33b3e279":"top_playing_teams","1971dd11":"df_final = df_final[df_final['battingTeam'].isin(top_playing_teams)]\ndf_final = df_final[df_final['bowlingTeam'].isin(top_playing_teams)]","9d96ed5a":"df_final","85c3005e":"##############################","956ad2e4":"#2nd innings\ndf_final2 = pd.DataFrame()\nfor i,row in df_T20.iterrows():\n    \n    try:\n        #loop for matches where 2nd innings not being played\n        if row['innings'][1]:\n            pass\n        \n        \n        matchId = []\n        balls = []  \n        runs = []\n        battingTeam = []\n        bowlingTeam = []\n        player_out = []\n        city = []\n        venue = []\n        tossWinner = []\n        \n        mId=row['uniqueId']\n        pt=row['info.teams']\n        \n        bt=row['innings'][1]['2nd innings']['team']\n        c=row['info.city']\n        v=row['info.venue']\n        toss=row['info.outcome.winner']\n        for Delivery in row['innings'][1]['2nd innings']['deliveries']:\n\n            for k in Delivery.keys():\n                matchId.append(str(mId)+'_2')\n                balls.append(k)\n                runs.append(Delivery[k]['runs']['total'])\n                battingTeam.append(bt)\n                tossWinner.append(toss)\n                if bt==pt[0]:\n                    bowlingTeam.append(pt[1])\n                else:\n                    bowlingTeam.append(pt[0])\n                city.append(c)\n                venue.append(v)\n                try:\n                    cal=Delivery[k]['wicket']['player_out']\n                    player_out.append(1)\n                except:\n                    player_out.append(0)\n        match_Balls = pd.DataFrame({'matchId':matchId,'balls':balls,'runs':runs,'tossWinner':tossWinner,'battingTeam':battingTeam,'bowlingTeam':bowlingTeam,'player_out':player_out,'city':city,'venue':venue})\n        df_final2 = df_final2.append(match_Balls)\n    except:\n        print(row['uniqueId'])\n","edbead3c":"df_T20[df_T20['uniqueId']==5]","dd9bbb60":"df_final2.head()","8a219857":"df_final2 = df_final2[df_final2['battingTeam'].isin(top_playing_teams)]\ndf_final2 = df_final2[df_final2['bowlingTeam'].isin(top_playing_teams)]","77ebb8f3":"#df_final.groupby('matchId')['battingTeam'].max('battingTeam').value_counts().head(20)","f96ef785":"#df_final2.groupby('matchId')['battingTeam'].max('battingTeam').value_counts().head(20)","346f0aa7":"#df_T20[df_T20['uniqueId']==5]['innings']","ac2aeb63":"df_final2[df_final2['matchId']=='5_2']","6630ce8f":"df_final[df_final['matchId']=='5_1']","ab2c29bb":"\"\"\"c=0\nfor i,row in df_T20.iterrows():\n    '''if count in [75,108,150,180,268,360,443,458,584,748,982,1052,1111,1226,1345]:\n        count+=1\n        continue\n    count+=1'''\n    \n    try:\n        if row['innings'][1]:\n            c+=1\n    except:\n        pass\ndf_final.groupby('matchId')['battingTeam'].max('battingTeam').value_counts().sum()\ndf_final2.groupby('matchId')['battingTeam'].max('battingTeam').value_counts().sum()\nlen(df_T20)-c\"\"\"","8527958f":"#lets see if we can combine city and venue\n\n#lots of null values\ndf_final[df_final['city'].isnull()]\n# we can fill these using venue","cb513f29":"df_final[df_final['city'].isnull()]['venue'].unique()","977a5c3c":"df_final2[df_final2['city'].isnull()]['venue'].unique()","f3cc0a19":"#city name can be extracted from 1st word of venue","ffda5a95":"df_final['city']=np.where(df_final['city'].isnull(), df_final['venue'].str.split().apply(lambda v:v[0]), df_final['city'])","2c5e093a":"df_final2['city']=np.where(df_final2['city'].isnull(), df_final2['venue'].str.split().apply(lambda v:v[0]), df_final2['city'])","99d84649":"df_final.isnull().sum()","1a4a38e6":"'''df_final=df_final.dropna()\ndf_final2=df_final2.dropna()'''","2d4b4f0e":"df_final[df_final.tossWinner.isnull()]","26f8c177":"pickle.dump(df_final,open('1st Innings.pkl','wb'))","bff1e51c":"pickle.dump(df_final2,open('2nd Innings.pkl','wb'))","e9c0d351":"df_final.to_csv(\"1st Innings T20.csv\")","3b881609":"df_final2.to_csv(\"2nd Innings T20.csv\")","50231b79":"#### So approx 48% times only toss winner wins the match also","8d03ab1f":"### Please consider an upvote if you find this useful :)"}}