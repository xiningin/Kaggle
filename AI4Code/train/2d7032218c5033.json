{"cell_type":{"0a6bbcc4":"code","55f27aae":"code","98d03a26":"code","7fbc1e01":"code","dad32671":"code","2ecaa9e5":"code","4607903e":"code","3d6c7737":"code","eeed33b5":"code","ef32a4f0":"code","04108af8":"code","80d75afb":"code","3568ca58":"code","c6a29428":"code","09c83c8d":"code","f64db2da":"code","46641b46":"code","743f6575":"code","ff475405":"code","b537d6ec":"code","d9d4da71":"code","1e1b771f":"code","78a3d7cb":"code","ac0b1eb7":"code","41bdb098":"code","625cf755":"code","f5c80fb2":"code","344b67da":"code","8b8646e6":"code","d22a683e":"code","2649f364":"code","e78160e8":"code","6f03a1af":"code","a60f2b79":"code","aa762845":"code","37b10cdb":"code","97ca24bf":"code","32114c1d":"code","ebdd8003":"code","505ae234":"code","ad228d57":"code","43314a9e":"code","8eb5f2d7":"code","dd097dbf":"code","f06dbd15":"markdown","fcee4587":"markdown","13199800":"markdown","3243f263":"markdown","7940a649":"markdown","7984c058":"markdown","1d23a8c2":"markdown","c54c6232":"markdown","f2a17cc5":"markdown","33de1027":"markdown","df34c6ba":"markdown","510c85de":"markdown","5454ab24":"markdown","2a0eefcb":"markdown","bc08b997":"markdown","bb9ca285":"markdown","5e1e7b31":"markdown","35b2b93f":"markdown","68240ea0":"markdown","aa151ae7":"markdown","d99b2256":"markdown","dd0aebfc":"markdown","f3ad2b59":"markdown","3909c22c":"markdown","e6db9aec":"markdown","d8d48f16":"markdown","d2b6d3a4":"markdown","0a44ccdc":"markdown","bc3d49a0":"markdown","5d74c54c":"markdown","d4a5b733":"markdown","4385a23d":"markdown","67c4e663":"markdown","4711aa39":"markdown","875b1cd6":"markdown","9b80e0fb":"markdown"},"source":{"0a6bbcc4":"import numpy as np\nimport pandas as pd \nimport re\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport matplotlib.patches as mpatches\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nfrom matplotlib.colors import ListedColormap\nfrom matplotlib import cm\n\nfrom pandas_profiling import ProfileReport","55f27aae":"pokemons = pd.read_csv('\/kaggle\/input\/pokemon\/Pokemon.csv')","98d03a26":"pro_rep = ProfileReport(pokemons,minimal=True)","7fbc1e01":"pro_rep.to_widgets()","dad32671":"display(pokemons.describe())\ndisplay(pokemons.info())\ndisplay(pokemons.head())","2ecaa9e5":"pokemons['Type 2'].fillna(value='None', inplace=True)","4607903e":"pokemons['Types'] = pokemons['Type 1'] + '_' + pokemons['Type 2']","3d6c7737":"temp_1 = pokemons['Type 1'].value_counts().reset_index()\n\nsns.set_style('whitegrid')\n\nplt.figure(figsize=(9,5))\nsns.barplot(y=temp_1['Type 1'], x=temp_1['index'], facecolor='white', linewidth=2, edgecolor='black')\n\n\nplt.xlabel('')\nplt.ylabel('')\nplt.xticks(rotation=45)\nplt.title('Pokemons of Type 1', size=15);","eeed33b5":"temp_2 = pokemons['Type 2'].value_counts().reset_index().drop(0)\n\nplt.figure(figsize=(9,5))\nsns.barplot(y=temp_2['Type 2'], x=temp_2['index'], facecolor='white', linewidth=2, edgecolor='black')\n\n\nplt.xlabel('')\nplt.ylabel('')\nplt.xticks(rotation=45)\nplt.title('Pokemons of Type 2', size=15);","ef32a4f0":"c_map_grey = ['rgb(220, 220, 220)','rgb(222, 222, 222)','rgb(224, 224, 224)',\n      'rgb(226, 226, 226))','rgb(228, 228, 228)','rgb(230, 230, 230',\n      'rgb(232, 232, 232)','rgb(234, 234, 234)','rgb(236, 236, 236)',\n      'rgb(238, 238, 238)','rgb(240, 240, 240)','rgb(242, 242, 242)',\n      'rgb(244, 244, 244)','rgb(246, 246, 246)','rgb(248, 248, 248)',\n      'rgb(250, 250, 250)','rgb(252, 252, 252)','rgb(254, 254, 254)']","04108af8":"fig = go.Figure(data=[go.Pie(labels=temp_1['index'], values=temp_1['Type 1'], \n                             textinfo='label+percent',insidetextorientation='radial', marker_colors=c_map_grey\n                            )])\n\nfig.update_traces(textposition='inside',\n                  marker=dict(line=dict(color='darkgrey', width=0.3)))\nfig.update_layout(title_text='Pokemon types pie-chart distribution', title_x=0.5)\nfig.show()","80d75afb":"temp_3 = pokemons[['Type 1', 'Total']].groupby('Type 1', as_index=False).median().sort_values(by='Total', ascending=False)\n\nplt.figure(figsize=(14,6))\n\nax = sns.boxplot(x=pokemons['Type 1'], y=pokemons['Total'], linewidth=2.5,order=temp_3['Type 1'])\n\nfor i,box in enumerate(ax.artists):\n    box.set_edgecolor('black')\n    box.set_facecolor('white')\n\n    \n    for j in range(6*i,6*(i+1)):\n        ax.lines[j].set_color('black')\n        ax.lines[j].set_mfc('black')\n        ax.lines[j].set_mec('black')\n            \n\nplt.xlabel('')\nplt.ylabel('')\nplt.title('Distribution of \"Total\" metric between different Types 1', size=15)\nplt.xticks(rotation=45, size=12);","3568ca58":"best_total = (pokemons[['Types','Total']].groupby('Types')\n              .median().sort_values(by='Total', ascending=False)\n              .head(10).style.background_gradient(cmap='binary'))\n              \nbest_total ","c6a29428":"temp_legendary = pokemons['Legendary'].value_counts().reset_index()\ntemp_legendary['index'].replace(True,'Legendary',inplace=True)\ntemp_legendary['index'].replace(False,'Common',inplace=True)","09c83c8d":"fig = px.pie(values=temp_legendary['Legendary'],\n             names=temp_legendary['index'],\n             color_discrete_sequence=px.colors.sequential.Greys)\n\nfig.update_traces(textinfo=\"value+percent+label\",\n                  textfont_size=10,\n                  marker=dict(line=dict(color='darkgrey', width=2)))\n\nfig.update_layout(title_text='Percentage of rare pokemon', title_x=0.5)\nfig.show()","f64db2da":"legendary = pokemons.query('Legendary == True')\nlegendary","46641b46":"green = mpatches.Patch(color='darkgreen', label='Legendary')\ngrey = mpatches.Patch(color='dimgrey', label='Common')\n\nplt.figure(figsize=(3,5))\n\nsns.pointplot(y=\"Total\", data=pokemons.query('Legendary == False'), color='dimgrey')\nsns.pointplot(y=\"Total\", data=pokemons.query('Legendary == True'), color='darkgreen')\n\nplt.legend(handles=[green,grey])\nplt.title('Legendary and common pokemons Total points', size=15);","743f6575":"temp = pokemons[['Name', 'Legendary','Generation']].groupby(['Generation','Legendary'], as_index=False).count()","ff475405":"temp","b537d6ec":"plt.figure(figsize=(10,6))\n\nsns.barplot(data=temp, x='Generation', y='Name', hue='Legendary', \n            palette='Greys', linewidth=2, edgecolor='black')\n\nplt.title('Number of legendary and common pokemons by generation', size=15)\nplt.xlabel('Generation', size=12)\nplt.ylabel('');","d9d4da71":"common = pokemons.query('Legendary == False').reset_index(drop=True)\n","1e1b771f":"common[['Name', 'Total']].sort_values(by='Total', ascending=False).head()","78a3d7cb":"common['Is_mega'] = [True if 'Mega' in name else False for name in common['Name']]\n\ncommon.head()","ac0b1eb7":"common.query('Is_mega == False')[['Name', 'Total']].sort_values(by='Total', ascending=False).head()","41bdb098":"common.query('Is_mega == False')[['Name', 'Total', 'Types']].sort_values(by='Total').head()","625cf755":"biggest_classes = common['Type 1'].value_counts().head().index.tolist()\nbiggest_classes","f5c80fb2":"### Create the data for analysis\n\nhist_data_1 = [\n            common.loc[common['Type 1'] == \"Water\"]['Attack'], \n            common.loc[common['Type 1'] == \"Water\"]['Defense'], \n            common.loc[common['Type 1'] == \"Water\"]['Speed'], \n            common.loc[common['Type 1'] == \"Water\"]['HP']]\n\nhist_data_2 = [\n            common.loc[common['Type 1'] == \"Normal\"]['Attack'], \n            common.loc[common['Type 1'] == \"Normal\"]['Defense'], \n            common.loc[common['Type 1'] == \"Normal\"]['Speed'], \n            common.loc[common['Type 1'] == \"Normal\"]['HP']]\n\nhist_data_3 = [\n            common.loc[common['Type 1'] == \"Bug\"]['Attack'], \n            common.loc[common['Type 1'] == \"Bug\"]['Defense'], \n            common.loc[common['Type 1'] == \"Bug\"]['Speed'], \n            common.loc[common['Type 1'] == \"Bug\"]['HP']]\n\nhist_data_4 = [\n            common.loc[common['Type 1'] == \"Grass\"]['Attack'], \n            common.loc[common['Type 1'] == \"Grass\"]['Defense'], \n            common.loc[common['Type 1'] == \"Grass\"]['Speed'], \n            common.loc[common['Type 1'] == \"Grass\"]['HP']]\n\nhist_data_5 = [\n            common.loc[common['Type 1'] == \"Fire\"]['Attack'], \n            common.loc[common['Type 1'] == \"Fire\"]['Defense'], \n            common.loc[common['Type 1'] == \"Fire\"]['Speed'], \n            common.loc[common['Type 1'] == \"Fire\"]['HP']]\n\ngroup_labels=['Attack','Deffence','Speed','HP']\n\ncolors=['red', 'blue','yellow','green']","344b67da":"### Using Plotly.create_distplots to create data for  draw.\nfig1 = ff.create_distplot(\n        hist_data_1, group_labels, colors=colors,\n        show_hist=False, show_rug=False)\n    \nfig2 = ff.create_distplot(\n        hist_data_2, group_labels, colors=colors,\n        show_hist=False, show_rug=False)\n\nfig3 = ff.create_distplot(\n        hist_data_3, group_labels, colors=colors,\n        show_hist=False, show_rug=False)\n\nfig4 = ff.create_distplot(\n        hist_data_4, group_labels, colors=colors,\n        show_hist=False, show_rug=False)\n\nfig5 = ff.create_distplot(\n        hist_data_5, group_labels, colors=colors,\n        show_hist=False, show_rug=False)\n\n### Initialize figure with subplots\nfig = make_subplots(rows=5, cols=1,\n                    subplot_titles=(biggest_classes),\n                    shared_xaxes=True)\n\n\n### Add kde for Water type\nfig.add_trace(go.Scatter(fig1['data'][0]), row=1, col=1)\nfig.add_trace(go.Scatter(fig1['data'][1]), row=1, col=1)\nfig.add_trace(go.Scatter(fig1['data'][2]), row=1, col=1)\nfig.add_trace(go.Scatter(fig1['data'][3]), row=1, col=1)\n\n### Add kde for Normal type\nfig.add_trace(go.Scatter(fig2['data'][0]), row=2, col=1)\nfig.add_trace(go.Scatter(fig2['data'][1]), row=2, col=1)\nfig.add_trace(go.Scatter(fig2['data'][2]), row=2, col=1)\nfig.add_trace(go.Scatter(fig2['data'][3]), row=2, col=1)\n\n### Add kde for Bug type\nfig.add_trace(go.Scatter(fig3['data'][0]), row=3, col=1)\nfig.add_trace(go.Scatter(fig3['data'][1]), row=3, col=1)\nfig.add_trace(go.Scatter(fig3['data'][2]), row=3, col=1)\nfig.add_trace(go.Scatter(fig3['data'][3]), row=3, col=1)\n\n### Add kde for Grass type\nfig.add_trace(go.Scatter(fig4['data'][0]), row=4, col=1)\nfig.add_trace(go.Scatter(fig4['data'][1]), row=4, col=1)\nfig.add_trace(go.Scatter(fig4['data'][2]), row=4, col=1)\nfig.add_trace(go.Scatter(fig4['data'][3]), row=4, col=1)\n\n### Add kde for Fire type\nfig.add_trace(go.Scatter(fig5['data'][0]), row=5, col=1)\nfig.add_trace(go.Scatter(fig5['data'][1]), row=5, col=1)\nfig.add_trace(go.Scatter(fig5['data'][2]), row=5, col=1)\nfig.add_trace(go.Scatter(fig5['data'][3]), row=5, col=1)\n                 \n\n### Tune layout settings\nfig.update_layout(\n    height=1400, width=1000,\n    title_text='Distribution of stats', title_x=0.5, title_font=dict(size=20),\n    template='plotly_white',\n   )\n\nfig.show()","8b8646e6":"temp_speed = common[['Name','Sp. Atk','Sp. Def','Speed', 'Type 1']]","d22a683e":"corr_atk = temp_speed['Sp. Atk'].corr(temp_speed['Speed'])\ncorr_def = temp_speed['Sp. Def'].corr(temp_speed['Speed'])\n\nfig, axes = plt.subplots(2,1, figsize=(10,10))\n\nsns.scatterplot(temp_speed['Sp. Atk'], temp_speed['Speed'], ax=axes[0], color='dimgrey', label='Correlation = {:.2}'.format(corr_atk))\nsns.scatterplot(temp_speed['Sp. Def'], temp_speed['Speed'], ax=axes[1], color='dimgrey', label='Correlation = {:.2}'.format(corr_def))\n\naxes[0].set_title('Attack speed distribution', size=12)\naxes[1].set_title('Defense speed distribution', size=12)\n\naxes[0].set_xlabel('Attack speed', size=9)\naxes[1].set_xlabel('Defense speed', size=9)\n\naxes[0].legend(loc=\"center right\",prop={'size': 12})\naxes[1].legend(loc=\"center right\",prop={'size': 12})\n\nplt.suptitle('Correlation beetween movespeed and fighting skills', size=18, y=(1.03))\nplt.tight_layout()\nplt.show()","2649f364":"atk_sp_threshold = int(np.ceil(common['Sp. Atk'].median()))\nattack_threshold = int(np.ceil(common['Attack'].median()))\n\nhp_quant = common['HP'].quantile(q=.35)","e78160e8":"def is_agile(row):\n    \n    atk_sp = row['Sp. Atk']\n    atk = row['Attack']\n    hp = row['HP']\n    \n    if atk_sp_threshold <= atk_sp and attack_threshold <= atk and hp <= hp_quant and atk \/ hp <= 2.5 :\n        return True\n    else:\n        return False\n    \ncommon['Is_agile'] = common.apply(is_agile, axis=1)","6f03a1af":"common[common['Is_agile']==True]","a60f2b79":"### time for some longer codes \n\n\npokemons['Family'] = 0\nfam_numb = 0\n\nfor i in range(len(pokemons)):\n    \n    if i == 0:\n        pokemons.loc[i, 'Family'] = fam_numb\n        \n        \n    \n    elif i != int(len(pokemons) - 1) and i != 0:\n        \n        if pokemons.loc[i-1,'Types'] == pokemons.loc[i,'Types'] == pokemons.loc[i+1,'Types'] :   \n            fam_numb = fam_numb\n            pokemons.loc[i, 'Family'] = fam_numb\n       \n    \n    \n        elif pokemons.loc[i-1,'Types'] == pokemons.loc[i,'Types'] != pokemons.loc[i+1,'Types'] :   \n            \n            if pokemons.loc[i-1,'Type 2'] == 'None' and pokemons.loc[i,'Type 2'] == 'None':\n                if pokemons.loc[i-1,'Type 1'] == pokemons.loc[i,'Type 1']:\n                    pokemons.loc[i, 'Family'] = fam_numb\n                \n                else :\n                    pokemons.loc[i, 'Family'] = pokemons.loc[i-1,'Type 1'] + 1\n                    fam_numb = pokemons.loc[i, 'Family']\n                \n            elif pokemons.loc[i-1,'Type 2'] == pokemons.loc[i,'Type 2'] :\n                \n                if pokemons.loc[i-1,'Type 1'] == pokemons.loc[i,'Type 1'] :\n                    pokemons.loc[i, 'Family'] = pokemons.loc[i-1, 'Family']\n            \n                else :\n                    pokemons.loc[i, 'Family'] = pokemons.loc[i-1, 'Family'] + 1\n                    fam_numb = pokemons.loc[i, 'Family']\n                \n            elif pokemons.loc[i-1,'Type 2'] == 'None' and pokemons.loc[i,'Type 2'] != 'None':\n                pokemons.loc[i, 'Family'] = pokemons.loc[i-1, 'Family']\n        \n        \n        \n        elif pokemons.loc[i-1,'Types'] != pokemons.loc[i,'Types'] != pokemons.loc[i+1,'Types'] :\n            \n            if pokemons.loc[i-1,'Type 2'] == 'None' :\n                if pokemons.loc[i-1,'Type 1'] == pokemons.loc[i,'Type 1']: \n                    pokemons.loc[i, 'Family'] = pokemons.loc[i-1,'Family']\n                else: \n                    pokemons.loc[i, 'Family'] = pokemons.loc[i-1,'Family'] + 1\n                    fam_numb = pokemons.loc[i, 'Family']\n            \n            elif pokemons.loc[i-1,'Type 1'] == pokemons.loc[i,'Type 1']:\n                pokemons.loc[i, 'Family'] = pokemons.loc[i-1,'Family']\n                \n            else:\n                pokemons.loc[i, 'Family'] = pokemons.loc[i-1, 'Family'] + 1\n                fam_numb = pokemons.loc[i, 'Family']\n                  \n        else:  \n            fam_numb += 1\n            pokemons.loc[i, 'Family'] = fam_numb\n         \n        \n    else:\n        pokemons.loc[i, 'Family'] = fam_numb +1 \n        ","aa762845":"common_upd = pokemons.query('Legendary==False').reset_index(drop=True)\ncommon_upd = common_upd.join(common['Is_agile'])\ncommon_upd.head()","37b10cdb":"common_upd[72:77]","97ca24bf":"fam_dict = dict(common_upd.groupby(['Family'])['Is_agile'].apply(lambda x: x.max()))\n\ncommon_upd['Is_agile'] = common_upd['Is_agile'].replace(False, common_upd['Family'].map(fam_dict))","32114c1d":"common_upd[72:80]","ebdd8003":"temp.interpolate()","505ae234":"temp = common_upd['Is_agile'].value_counts(normalize=True).reset_index()\n\nfig, ax = plt.subplots(figsize=(4,5))\n\nax.vlines(x=temp.index, ymin=0, ymax=temp.Is_agile, color='dimgrey', linewidth=20)\n\nfor i, z in enumerate(temp.Is_agile):\n    ax.text(i, z+0.05, np.around(z, 3), horizontalalignment='center')\n\nplt.xticks(temp.index, ['other','agility based'], horizontalalignment='right', fontsize=12)\nplt.ylabel('')\nplt.xlabel('')\nplt.ylim(0,1.15)\nplt.title('Percentage of agile pokemons', size=15, y=(1.03));","ad228d57":"### Work in progress","43314a9e":"def two_pokemon_compare(first, second):\n    \n    attributes = pokemons.columns.tolist()[5:11]\n    \n    ind_first = list(pokemons.query('Name == @first').index)[0]\n    ind_second = list(pokemons.query('Name == @second').index)[0]\n    \n    r1 = list(pokemons[attributes].iloc[ind_first])\n    last_1 = r1[0]\n    r1.append(last_1)\n\n    r2 = list(pokemons[attributes].iloc[ind_second])\n    last_2 = r2[0]\n    r2.append(last_2)\n\n    title_temp = first + ' VS ' + second\n    \n    fig = go.Figure()\n    \n    fig.add_trace(go.Scatterpolar(\n        r = r1,\n        theta = ['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'HP'],\n        name = first,\n        line_color = 'black' \n    ))\n\n    fig.add_trace(go.Scatterpolar(\n        r = r2,\n        theta = ['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'HP'],\n        name = second,\n        line_color = 'darkgreen' \n    ))\n\n    fig.update_traces(\n        fill='none',\n        line_width = 3,\n        marker_size = 8)\n\n    annotations = []\n    annotations.append(dict(xref='paper', yref='paper', x=0.5, y=1.05,\n                              xanchor='center', yanchor='bottom',\n                              text=title_temp,\n                              font=dict(family='Comic Sans MS',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n    \n    fig.update_layout(\n        template=None,\n        polar = dict(\n              radialaxis_angle = 45),\n        annotations=annotations)\n\n    fig.show()","8eb5f2d7":"two_pokemon_compare('Pikachu', 'Mewtwo')","dd097dbf":"#two_pokemon_compare('pokemon_1', 'pokemon_2')","f06dbd15":"5 most crowded types are: Water, Normal, Grass, Bugs and Psychic. ","fcee4587":"### Is there anybody who doesn't like Pokemons?  \n\nI think, nope, because we all love them! So let's conduct a small research for pocket monsters' better understand.\n\nAs usual, we start with import libs and data.","13199800":"#### Attack, defence, hp and speed points distribution.\n\nIs there any difference between basic stats distribution in top 5 biggest pokemon types?","3243f263":"According to established classification, only 4 per cent of all pokemon  belong to 'agility' class. Indeed, we may reduce a classification threshold to place more pets into this class.","7940a649":"At this point of view, only High-level pokemons (with a great 'Total' values) have got to our list.  \nIt seems not to be good. I guess we have to create a new feature called 'family', where we combine all monsters by family (evolution) affiliation, e.g. Bulbasaur, Ivysaur and Venusaur literally are the same 'family'. After that, class 'Agile' should achive all family members.","7984c058":"Literally, all top-5 pokemon classes are good balanced.   \n  \nFire-pokemons commonly have the highest attack stats. Bug ones are the weakest type.  \nNormal- and fire-type monsters are the most speedy pets.  \nWater and 'Normal' pokemons have more Health points, than the other types.  \n\nMost of Bugs have approximately 65 HP. Suddenly, this type is also the slowest one.  ","1d23a8c2":"As you can see, you don't need any command to describe data anymore.\nOh, it was a joke. Try to work a traditional way.","c54c6232":"#### Fight! \n\nJust choose two pokemons and see, who would win! Let's try to compare two different pokemon by their main stats.","f2a17cc5":"Attack speed depends of moving speed, deffend speed doesn't.","33de1027":"Commonly, Legendary pokemon have more than 200 total points advantage.","df34c6ba":"### Analisys and Visualisation\n\nJust imagine, eight hundred poket-monsters are waiting for us. Let's start with types.  \nWe will drop all missing values in Type 2.","510c85de":"Only eight percents of Pokemons are Legendary. Discover them better.","5454ab24":"#### Distribution of 'Total' metric between different Types 1.","2a0eefcb":"Nice.  \nNow we can see how many 'agile' pokemons are an all generations","bc08b997":"### A touch of preprocessing \n\nWe have got 386 missing values in Type 2 column, fill in with 'none' values.","bb9ca285":"#### Sort family members.  \n\nTo make this process easier, let's call each new family with num+1, for example, the first four pokemon belong to family # 0 (Bulbasaur, Ivysaur, Venusaur and the mega form). The next few pets are the family number 1. And so on.\n","5e1e7b31":"By the way, this is not the ideal approach, because some pokemons from the latest generations are the 'younger' forms those, whom we met earlier.  \nBut let's pretend, that it's ok for our research.","35b2b93f":"#### Can we declare a pokemon class with a high level of agility?  \n\nIn many video- and card-games there are some basic classes, relies on a character' main attribute.  \nAs usual, agility-based units have a fast attack speed and deals a lot of damage. But unfortunately, have a low or a moderate level ov HP and Defense.  \n\nLet's try to find these units in the dataset.  \n\nTo be a part of 'agility class',   your attack speed and attack should be more significant, than median values. Attack and HP ratio should be as 2.5:1 or higher, HP level should lie at the 35% quantile. ","68240ea0":"Try to remove all 'Mega'-evolving forms.","aa151ae7":"#### Top 5 weakest pokemon ","d99b2256":"One of my favourite tools is ProfileReport, which helps us to describe and visualise the most prevalent information about dataset easily.  \nMoreover, it also shows us all correlations, max and min values for all features, indicates missing values.  \nWe will use \"minimal' mode to reduce iteration time and memory consuming.","dd0aebfc":"The most powerful pokemon without 'Mega' form looks nice.\n\n![image](https:\/\/thumbor.forbes.com\/thumbor\/960x0\/https%3A%2F%2Fblogs-images.forbes.com%2Fdavidthier%2Ffiles%2F2017%2F12%2F800px-Sawyer_Slaking.jpg)","f3ad2b59":"The Third generations brought us the biggest number of legendary pets.  \nIn the end of the series, there were the lowest number of new pokemons.  ","3909c22c":"Combine two types in one feature.","e6db9aec":"#### What if somebody loves pies more than bars? It has the same shape as poketball does.","d8d48f16":"Enjoy, just pick two names and match their stats.","d2b6d3a4":"Dragons are fantastic: literally, they are the most reliable type of all pokemon! To ask them to show all the power,  just shout out 'Dracarys'.  \nOh, wait, this one is from another Universe.","0a44ccdc":"#### Is there the same amount of legendary pet in each generation?","bc3d49a0":"Oh, poor Sunkern, your belonging to a Grass type gives you nothing.\n\n![image](https:\/\/cdn.bulbagarden.net\/upload\/thumb\/9\/95\/191Sunkern.png\/600px-191Sunkern.png)","5d74c54c":"I will update this research daily. \n\nIf you found something useful or have any idea how to impove this work, please, let me know in the comments.\n\nThanks for your attention!\n\n**Don't forget to vote this notebook up**","d4a5b733":"#### Does attack or defense speed depends of common speed?","4385a23d":"### Non legendary pokemons  \n\nIt's time to explore average and common monsters.","67c4e663":"#### What type of Pokemon has the best median Total metric.","4711aa39":"#### Top 5 strongest pokemon","875b1cd6":"#### Which pokemon are legendary and how many of them are in total monster population?","9b80e0fb":"As we can see, all these pokemons have very high 'Total' values. It means, they are really strong!  \n\n"}}