{"cell_type":{"71de7947":"code","261c31ef":"code","c6db9ccf":"code","f0c5eb6d":"code","f67c2073":"code","74498ee7":"code","3ba742be":"code","4ffa869c":"code","0b577102":"code","c658a703":"markdown","575bf472":"markdown","0fc30a7c":"markdown"},"source":{"71de7947":"!wget https:\/\/www.tbi.univie.ac.at\/RNA\/download\/ubuntu\/ubuntu_18_04\/viennarna_2.4.15-1_amd64.deb\n!apt-get install .\/viennarna_2.4.15-1_amd64.deb -y\n!git clone https:\/\/github.com\/DasLab\/arnie\n\n!\/opt\/conda\/bin\/python3.7 -m pip install --upgrade pip\n!git clone https:\/\/www.github.com\/DasLab\/draw_rna draw_rna_pkg\n!cd draw_rna_pkg && python setup.py install\n\n!yes '' | cpan -i Graph\n!git clone https:\/\/github.com\/hendrixlab\/bpRNA","261c31ef":"import os\nimport sys\n\n!echo \"vienna_2: \/usr\/bin\" > arnie.conf\n!echo \"TMP: \/kaggle\/working\/tmp\" >> arnie.conf\n!mkdir -p \/kaggle\/working\/tmp\nos.environ[\"ARNIEFILE\"] = f\"\/kaggle\/working\/arnie.conf\"\nsys.path.append('\/kaggle\/working\/draw_rna_pkg\/')\nsys.path.append('\/kaggle\/working\/draw_rna_pkg\/ipynb\/')\npkg = 'vienna_2'","c6db9ccf":"\nimport numpy as np\nimport pandas as pd\nfrom multiprocessing import Pool\nfrom arnie.pfunc import pfunc\nfrom arnie.mea.mea import MEA\nfrom arnie.free_energy import free_energy\nfrom arnie.bpps import bpps\nfrom arnie.mfe import mfe\nimport arnie.utils as utils\nfrom tqdm.notebook import tqdm as tqdm\n\nn_candidates = 2\n# turn off for all data\ndebug = True","f0c5eb6d":"!grep processor \/proc\/cpuinfo | wc -l","f67c2073":"MAX_THRE = 4","74498ee7":"train = pd.read_json('..\/input\/stanford-covid-vaccine\/train.json', lines=True)\ntest = pd.read_json('..\/input\/stanford-covid-vaccine\/test.json', lines=True)\nif debug:\n    train = train[:20]\n    test = test[:20]\ntarget_df = train.append(test)","3ba742be":"def proc1(arg):\n    sequence = arg[0]\n    id = arg[1]\n    log_gamma = arg[2]\n    bp_matrix = bpps(sequence, package=pkg)\n    mea_mdl = MEA(bp_matrix,gamma=10**log_gamma)\n    return id, sequence, mea_mdl.structure, log_gamma, mea_mdl.score_expected()[2]\n\nli = []\nfor log_gamma in range(10):\n    for i, arr in enumerate(target_df[['sequence','id']].values):\n        li.append([arr[0], arr[1], log_gamma])\n\np = Pool(processes=MAX_THRE)\nresults = []\nfor ret in tqdm(p.imap(proc1, li),total=len(li)):\n    results.append(ret)\n    #print(f'done for {ret[0]}')\ndf = pd.DataFrame(results, columns=['id', 'sequence', 'structure', 'log_gamma', 'score'])\n\ndf_tmp = target_df[['id', 'sequence', 'structure']].copy()\ndf_tmp['log_gamma'] = 100\ndf_tmp['score'] = 100\ndf = df.append(df_tmp).sort_values('score', ascending=False).reset_index(drop=True)\n\nnew_df = pd.DataFrame()\nfor id in df['id'].unique():\n    unq_df = df[df['id'] == id].drop_duplicates('structure')\n    unq_df['cnt'] = unq_df.shape[0]\n    new_df = new_df.append(unq_df[1:min(n_candidates,len(unq_df))])","4ffa869c":"!mkdir -p tmp_files\ndef get_predicted_loop_type(id, sequence, structure, debug=False):\n    structure_fixed = structure.replace('.','0').replace('(','1').replace(')','2')\n    pid = os.getpid()\n    tmp_in_file = f'tmp_files\/{id}_{structure_fixed}_{pid}.dbn'\n    tmp_out_file = f'{id}_{structure_fixed}_{pid}.st'\n    !echo $sequence > $tmp_in_file\n    !echo \"$structure\" >> $tmp_in_file\n    !export PERL5LIB=\/root\/perl5\/lib\/perl5 && perl bpRNA\/bpRNA.pl $tmp_in_file\n    result = [l.strip('\\n') for l in open(tmp_out_file)]\n    if debug:\n        print(sequence)\n        print(structure)\n        print(result[5])\n    else:\n        !rm $tmp_out_file $tmp_in_file\n    return id, structure, result[5]\n\ndef proc2(arg):\n    result = get_predicted_loop_type(arg[0], arg[1], arg[2], debug=False)\n    return result\n\nli = []\nfor i, arr in enumerate(new_df[['id', 'sequence', 'structure']].values):\n    li.append(arr)\n\np = Pool(processes=MAX_THRE)\nresults_loop_type = []\nfor ret in tqdm(p.imap(proc2, li),total=len(li)):\n    results_loop_type.append(ret)\n    #print(f'done for {ret[0]}')\n\nnew_df = new_df.merge(pd.DataFrame(results_loop_type, columns=('id', 'structure', 'predicted_loop_type')), on=['id','structure'], how='left')\nnew_df.to_csv('aug_data.csv', index=False)\n","0b577102":"new_df.head()","c658a703":"## Getting structure\n","575bf472":"## Getting predicted_loop_type\n","0fc30a7c":"## Setting"}}