{"cell_type":{"e56c5431":"code","aad37b4b":"code","12268c78":"code","49680be1":"code","a6214861":"code","f326518b":"code","9a97fa79":"code","ebce06d5":"code","9ad030a9":"code","d09df7a3":"code","7644687f":"code","f7330044":"code","c45606ea":"code","41dc9145":"code","48bb9978":"code","d736bda1":"code","a1456e9d":"code","4de853de":"code","32b1ebc5":"code","6be53883":"code","8c81348d":"code","cbac6c3c":"code","431284c8":"code","6c3fccfb":"code","213d8db4":"code","93f89da1":"code","0ba6dd30":"code","1e8b8d22":"code","60fb4ef3":"code","d80ff928":"code","4cf67c1f":"code","8cebd4f8":"code","adef0673":"code","7e27e16f":"code","d7c471fa":"code","f7457d51":"code","877d7fe7":"code","8508cbac":"code","8a595847":"code","1cf3ea46":"code","6c5562cb":"code","dde07924":"code","fccebe3f":"code","4d43ee09":"code","044257ea":"code","c516e97b":"code","adc55e40":"code","763387a2":"code","0e28b4af":"code","11d24dc7":"code","69e3be5f":"code","95ac4c78":"code","ae8a16b4":"code","a209b9e2":"code","504edb17":"code","f953f8da":"code","780e6b64":"code","975d933b":"code","ac7ba776":"code","b93371cf":"code","75c1c3b6":"code","3e72bb5e":"code","77a5b978":"code","191a6cd6":"code","2af435e1":"code","d957aef2":"code","57a9e6bf":"code","65694ecf":"code","378b3479":"code","139f95c7":"markdown","d8b608a5":"markdown","4651f15b":"markdown","26205d0d":"markdown","9e5f5ecb":"markdown","78bf72b2":"markdown","bc7ce310":"markdown","8c347cd6":"markdown","81e3c65d":"markdown","23215fbf":"markdown","97672d76":"markdown","5086cb6a":"markdown","caa34fe0":"markdown","4c597203":"markdown","9a968888":"markdown","29b3f6d6":"markdown","0b73671f":"markdown","25d13db0":"markdown","cc8c3509":"markdown","f30e33d9":"markdown","408dd56f":"markdown","4dcea1dc":"markdown","4aee5c9a":"markdown","5f99128d":"markdown","c9b8ea41":"markdown","e2f62a66":"markdown","6c6e89a0":"markdown","9679c8a7":"markdown","d30effea":"markdown","fe3fe81f":"markdown","9fcc8add":"markdown","d73e0827":"markdown","4dbee768":"markdown","4923ea57":"markdown","d67d1dcd":"markdown","3aeb10fb":"markdown","2f1d4f5c":"markdown","a7c6dbeb":"markdown","3e65b9fd":"markdown","c1b7fb1e":"markdown","fe44c36e":"markdown","c9f7cace":"markdown","a30b0c1c":"markdown","059028e6":"markdown","25eecde6":"markdown"},"source":{"e56c5431":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","aad37b4b":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom pandas_profiling import ProfileReport\nfrom sklearn.model_selection import train_test_split\n\n%matplotlib inline","12268c78":"dataset = pd.read_csv('..\/input\/3rd-party-delivery-dataset\/3rd Party Delivery Data.csv')\ndataset.head()","49680be1":"df = dataset.drop(['Customer placed order datetime','Placed order with restaurant datetime','Driver at restaurant datetime','Delivered to consumer datetime'], axis=1)\ndf.head()","a6214861":"#ProfileReport(df)","f326518b":"df.info()","9a97fa79":"df['Is ASAP'] = df['Is ASAP'].astype(int)\n\n# Change Delivery ID, Restaurant ID, Customer ID, and Region to Category\ndf['Driver ID'] = df['Driver ID'].astype('category')\ndf['Restaurant ID'] = df['Restaurant ID'].astype('category')\ndf['Consumer ID'] = df['Consumer ID'].astype('category')\ndf['Delivery Region'] = df['Delivery Region'].astype('category')","ebce06d5":"df","9ad030a9":"df.info()","d09df7a3":"fig = px.histogram(df, x=df['Delivery Region'],\n                  color='Delivery Region')\nfig.update_layout(\n    title='Number of Deliveries by Region',\n    yaxis_title_text='Number of Deliveries')\nfig.show()","7644687f":"# Order Total vs Restaurant\nfig = px.scatter(df, x=df['Restaurant ID'], y=df['Order total'], color=df['Delivery Region'])\nfig.update_layout(\n    title_text='Order Total ($) by Restaurant ID',\n    yaxis_title_text='Order Total ($)')\nfig.show()","f7330044":"# Driver ID vs Order Total\nfig = px.scatter(df, x=df['Driver ID'], y=df['Order total'], color=df['Delivery Region'])\nfig.update_layout(\n    title_text='Order Total ($) by Driver ID',\n    yaxis_title_text='Order Total ($)')\nfig.show()","c45606ea":"driverRevenue = pd.DataFrame()\ndriverRevenue['Driver ID'] = df['Driver ID']\ndriverRevenue['Order total'] = df['Order total']\n\ndriverRevenue = driverRevenue.sort_values(by='Order total', ascending=False)\ndriverRevenue = driverRevenue.groupby('Driver ID').sum().reset_index()\n\nfig = px.bar(driverRevenue, x='Driver ID', y='Order total', color='Driver ID')\nfig.update_layout(\n    title_text='Order Revenue ($) by Driver ID',\n    yaxis_title_text='Total Revenue ($)')\nfig.show()","41dc9145":"driverTip = pd.DataFrame()\ndriverTip['Driver ID'] = df['Driver ID']\ndriverTip['Amount of Tip'] = df['Amount of tip']\n\ndriverTip = driverTip.sort_values(by='Amount of Tip', ascending=False)\ndriverTip = driverTip.groupby('Driver ID').sum().reset_index()\n\nfig = px.bar(driverTip, x='Driver ID', y='Amount of Tip', color='Driver ID')\nfig.update_layout(\n    title_text='Total Tip ($) by Driver ID',\n    yaxis_title_text='Total Tip ($)')\nfig.show()","48bb9978":"# Order Total vs Amount Tip\nfig = px.scatter(df, x='Order total', y='Amount of tip', color='Delivery Region', opacity=0.35, trendline='ols')\nfig.update_layout(\n    title='Amount of Tip by Order Total',\n    yaxis_title_text='Amount of Tip ($)',\n    xaxis_title_text='Order Total ($)')\nfig.show()","d736bda1":"# Order Total vs Amount Tip\nfig = px.scatter(df, x='Order total', y='Amount of tip', color='Delivery Region', opacity=0.35, trendline='ols', facet_col='Delivery Region')\nfig.update_layout(\n    title='Amount of Tip by Order Total',\n    yaxis_title_text='Amount of Tip ($)',\n    xaxis_title_text='Order Total ($)')\nfig.show()","a1456e9d":"# Tip Percentage\ntipPercentage = df.copy()\ntipPercentage['Tip Percentage'] = df['Amount of tip']\/df['Order total']","4de853de":"# Order Total vs Amount Tip\nfig = px.scatter(tipPercentage, x='Order total', y='Tip Percentage', color='Delivery Region', opacity=0.35, trendline='ols')\nfig.update_layout(\n    title='Amount of Tip by Order Total',\n    yaxis_title_text='Amount of Tip ($)',\n    xaxis_title_text='Order Total ($)')\nfig.show()","32b1ebc5":"\n# Order Total vs Amount Tip\nfig = px.scatter(tipPercentage, x='Order total', y='Tip Percentage', color='Delivery Region', opacity=0.35, trendline='ols', facet_col='Delivery Region')\nfig.update_layout(\n    title='Tip % by Order Total',\n    yaxis_title_text='Tip (%)',\n    xaxis_title_text='Order Total ($)')\nfig.show()","6be53883":"xTab = pd.crosstab(df['Driver ID'], df['Delivery Region'])\nxTab","8c81348d":"# Number of Deliveries by Restaurant ID by Delivery Region\nfig = px.bar(xTab, color='Delivery Region',\n            labels={'value':'Number of Deliveries'})\nfig.update_xaxes(type='category')\nfig.update_layout(\n    title='Number of Deliveries by Driver ID')\nfig.show()","cbac6c3c":"# Number of Deliveries by Restaurant ID by Delivery Region\nfig = px.bar(xTab, color='Delivery Region',\n            labels={'value':'# of Deliveries',\n                   'Delivery Region': 'Region'}\n            ,facet_row='Delivery Region')\nfig.update_xaxes(type='category')\nfig.update_layout(\n    title='Number of Deliveries by Driver ID by Delivery Region')\nfig.show()","431284c8":"xTab2 = pd.crosstab(df['Restaurant ID'], df['Delivery Region'])\nxTab2","6c3fccfb":"# Number of Deliveries by Restaurant ID by Delivery Region\nfig = px.bar(xTab2, color='Delivery Region',\n            labels={'value':'Number of Deliveries'})\nfig.update_xaxes(type='category')\nfig.update_layout(\n    title='Number of Deliveries by Restaurant ID')\nfig.show()","213d8db4":"# Number of Deliveries by Restaurant ID by Delivery Region\nfig = px.bar(xTab2, color='Delivery Region',\n            labels={'value':'# of Deliveries',\n                   'Delivery Region': 'Region'}\n            ,facet_row='Delivery Region')\nfig.update_xaxes(type='category')\nfig.update_layout(\n    title='Number of Deliveries by Driver ID by Delivery Region')\nfig.show()","93f89da1":"# Sunburst of Delivery Region, Restaurant ID by Order Total\nfig = px.sunburst(df, path=['Delivery Region', 'Restaurant ID'], values='Order total')\nfig.show()","0ba6dd30":"# Sunburst of Delivery Region, Driver ID by Order Total\nfig = px.sunburst(df, path=['Delivery Region', 'Driver ID'], values='Order total')\nfig.show()","1e8b8d22":"# Sunburst of Delivery Region, Driver ID by Order Total\nfig = px.sunburst(df, path=['Delivery Region', 'Driver ID'], values='Amount of tip')\nfig.show()","60fb4ef3":"# Denisty Heat Map for Delivery Region and Order Total\nfig = px.density_heatmap(df, x=\"Order total\", y=\"Amount of tip\", facet_col='Delivery Region')\nfig.show()","d80ff928":"regressDF = df.copy()\ndropCols = ['Driver ID', 'Restaurant ID', 'Consumer ID', 'Delivery Region']\norderTitle = 'Order total'\n\nmountainView = regressDF[regressDF['Delivery Region']=='Mountain View'].drop(dropCols, axis=1)\npaloAlto = regressDF[regressDF['Delivery Region']=='Palo Alto'].drop(dropCols, axis=1)\nsanJose = regressDF[regressDF['Delivery Region']=='San Jose'].drop(dropCols, axis=1)\n\n# Encode 'Delivery Region' in master list\nencodedDF = pd.get_dummies(regressDF, columns=['Delivery Region']).drop(['Driver ID', 'Restaurant ID', 'Consumer ID'], axis=1)\n# Encode 'If Tip', 'If Refund'\nencodedDF['If Tip'] = encodedDF['Amount of tip'].apply(lambda x: 1 if x > 0 else 0)\nencodedDF['If Refund'] = encodedDF['Refunded amount'].apply(lambda x: 1 if x > 0 else 0)\n#encodedDF['If Time < 30min Total'] = encodedDF['Time(Min) b\/w Driver Deliver and Placed at Restaurant'].apply(lambda x: 1 if x <= 30 else 0)\n#encodedDF['If Time < 60min Total'] = encodedDF['Time(Min) b\/w Driver Deliver and Placed at Restaurant'].apply(lambda x: 1 if x <= 60 else 0)\n\n# Master Lists\norderDF = encodedDF[[col for col in encodedDF.columns if col != 'Order total']+['Order total']]\n\n# Lists by Region\n    # Mountain View\nmvOrder = mountainView[[col for col in mountainView.columns if col != 'Order total']+['Order total']]\n    \n    # Palo Alto\npaOrder = paloAlto[[col for col in paloAlto.columns if col != 'Order total']+['Order total']]\n    \n    # San Jose\nsjOrder = sanJose[[col for col in sanJose.columns if col != 'Order total']+['Order total']]","4cf67c1f":"# orderDF Regressions\nX = orderDF.drop(['If Refund', 'Refunded amount'], axis=1)\ny = orderDF['If Refund']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=1)\nprint(\"X_train.shape = \" + str(X_train.shape))\nprint(\"X_test.shape = \" + str(X_test.shape))\nprint(\"y_train.shape = \" + str(y_train.shape))\nprint(\"y_test.shape = \" + str(y_test.shape))","8cebd4f8":"# Logistic\nfrom sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression(max_iter=2000)\nlogreg.fit(X_train, y_train)\norderAccLog = round(logreg.score(X_test, y_test)*100, 2)\norderAccLog","adef0673":"# KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\norderAccKnn = round(knn.score(X_test, y_test) * 100, 2)\norderAccKnn","7e27e16f":"# Gaussian Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\ngaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\norderAccGaussian = round(gaussian.score(X_test, y_test) * 100, 2)\norderAccGaussian","d7c471fa":"# Perceptron\nfrom sklearn.linear_model import Perceptron\nperceptron = Perceptron()\nperceptron.fit(X_train, y_train)\norderAccPerceptron = round(perceptron.score(X_test, y_test) * 100, 2)\norderAccPerceptron","f7457d51":"# Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndecisionTree = DecisionTreeClassifier()\ndecisionTree.fit(X_train, y_train)\norderAccDecisionTree = round(decisionTree.score(X_test, y_test) * 100, 2)\norderAccDecisionTree","877d7fe7":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nrandomForest = RandomForestClassifier(n_estimators=100)\nrandomForest.fit(X_train, y_train)\norderAccRandomForest = round(randomForest.score(X_test, y_test) * 100, 2)\norderAccRandomForest","8508cbac":"models = pd.DataFrame({\n    'Models': ['Logistice Regression', 'KNN', 'Naive Bayes', 'Perceptron', 'Decision Tree', 'Random Forest'],\n    'Score' : [orderAccLog, orderAccKnn, orderAccGaussian, orderAccPerceptron, orderAccDecisionTree, orderAccRandomForest]\n})\n\nmodels.sort_values(by='Score', ascending=False)","8a595847":"effective = pd.DataFrame({'feature':list(X.columns),'feature_importance':[abs(i) for i in logreg.coef_[0]]})\n#effective[\"feature_name\"] = X.columns.tolist()\n#effective[\"feature_importance\"] = logreg.feature_importances_\neffective.sort_values(\"feature_importance\",ascending=False)","1cf3ea46":"effective = pd.DataFrame()\neffective[\"feature_name\"] = X.columns.tolist()\neffective[\"feature_importance\"] = randomForest.feature_importances_\neffective.sort_values(\"feature_importance\",ascending=False)","6c5562cb":"# dropedOrderDF Regressions\nX = orderDF.drop(['If Refund', 'Refunded amount', 'Amount of discount', 'Delivery Region_Palo Alto', 'Delivery Region_Mountain View', 'Delivery Region_San Jose', 'Is ASAP'], axis=1)\ny = orderDF['If Refund']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=1)\nprint(\"X_train.shape = \" + str(X_train.shape))\nprint(\"X_test.shape = \" + str(X_test.shape))\nprint(\"y_train.shape = \" + str(y_train.shape))\nprint(\"y_test.shape = \" + str(y_test.shape))","dde07924":"# Logistic\nfrom sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression(max_iter=2000)\nlogreg.fit(X_train, y_train)\norderAccLog = round(logreg.score(X_test, y_test)*100, 2)\norderAccLog","fccebe3f":"# KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\norderAccKnn = round(knn.score(X_test, y_test) * 100, 2)\norderAccKnn","4d43ee09":"# Gaussian Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\ngaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\norderAccGaussian = round(gaussian.score(X_test, y_test) * 100, 2)\norderAccGaussian","044257ea":"# Perceptron\nfrom sklearn.linear_model import Perceptron\nperceptron = Perceptron()\nperceptron.fit(X_train, y_train)\norderAccPerceptron = round(perceptron.score(X_test, y_test) * 100, 2)\norderAccPerceptron","c516e97b":"# Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndecisionTree = DecisionTreeClassifier()\ndecisionTree.fit(X_train, y_train)\norderAccDecisionTree = round(decisionTree.score(X_test, y_test) * 100, 2)\norderAccDecisionTree","adc55e40":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nrandomForest = RandomForestClassifier(n_estimators=100)\nrandomForest.fit(X_train, y_train)\norderAccRandomForest = round(randomForest.score(X_test, y_test) * 100, 2)\norderAccRandomForest","763387a2":"models = pd.DataFrame({\n    'Models': ['Logistice Regression', 'KNN', 'Naive Bayes', 'Perceptron', 'Decision Tree', 'Random Forest'],\n    'Score' : [orderAccLog, orderAccKnn, orderAccGaussian, orderAccPerceptron, orderAccDecisionTree, orderAccRandomForest]\n})\n\nmodels.sort_values(by='Score', ascending=False)","0e28b4af":"effective = pd.DataFrame({'feature':list(X.columns),'feature_importance':[abs(i) for i in logreg.coef_[0]]})\n#effective[\"feature_name\"] = X.columns.tolist()\n#effective[\"feature_importance\"] = logreg.feature_importances_\neffective.sort_values(\"feature_importance\",ascending=False)","11d24dc7":"effective = pd.DataFrame()\neffective[\"feature_name\"] = X.columns.tolist()\neffective[\"feature_importance\"] = randomForest.feature_importances_\neffective.sort_values(\"feature_importance\",ascending=False)","69e3be5f":"# orderDF Regressions\nX = orderDF.drop(['If Tip', 'Amount of tip'], axis=1)\ny = orderDF['If Tip']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=1)\nprint(\"X_train.shape = \" + str(X_train.shape))\nprint(\"X_test.shape = \" + str(X_test.shape))\nprint(\"y_train.shape = \" + str(y_train.shape))\nprint(\"y_test.shape = \" + str(y_test.shape))","95ac4c78":"# Logistic\nfrom sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression(max_iter=2000)\nlogreg.fit(X_train, y_train)\norderAccLog = round(logreg.score(X_test, y_test)*100, 2)\norderAccLog","ae8a16b4":"# KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\norderAccKnn = round(knn.score(X_test, y_test) * 100, 2)\norderAccKnn","a209b9e2":"# Gaussian Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\ngaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\norderAccGaussian = round(gaussian.score(X_test, y_test) * 100, 2)\norderAccGaussian","504edb17":"# Perceptron\nfrom sklearn.linear_model import Perceptron\nperceptron = Perceptron()\nperceptron.fit(X_train, y_train)\norderAccPerceptron = round(perceptron.score(X_test, y_test) * 100, 2)\norderAccPerceptron","f953f8da":"# Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndecisionTree = DecisionTreeClassifier()\ndecisionTree.fit(X_train, y_train)\norderAccDecisionTree = round(decisionTree.score(X_test, y_test) * 100, 2)\norderAccDecisionTree","780e6b64":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nrandomForest = RandomForestClassifier(n_estimators=100)\nrandomForest.fit(X_train, y_train)\norderAccRandomForest = round(randomForest.score(X_test, y_test) * 100, 2)\norderAccRandomForest","975d933b":"models = pd.DataFrame({\n    'Models': ['Logistice Regression', 'KNN', 'Naive Bayes', 'Perceptron', 'Decision Tree', 'Random Forest'],\n    'Score' : [orderAccLog, orderAccKnn, orderAccGaussian, orderAccPerceptron, orderAccDecisionTree, orderAccRandomForest]\n})\n\nmodels.sort_values(by='Score', ascending=False)","ac7ba776":"effective = pd.DataFrame()\neffective[\"feature_name\"] = X.columns.tolist()\neffective[\"feature_importance\"] = randomForest.feature_importances_\neffective.sort_values(\"feature_importance\",ascending=False)","b93371cf":"# dropedTipDF Regressions\nX = orderDF.drop(['If Tip', 'Amount of tip', 'Refunded amount', 'Amount of discount', 'Delivery Region_Palo Alto', 'Delivery Region_Mountain View', 'Delivery Region_San Jose', 'Is ASAP', 'If Refund'], axis=1)\ny = orderDF['If Tip']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=1)\nprint(\"X_train.shape = \" + str(X_train.shape))\nprint(\"X_test.shape = \" + str(X_test.shape))\nprint(\"y_train.shape = \" + str(y_train.shape))\nprint(\"y_test.shape = \" + str(y_test.shape))","75c1c3b6":"# Logistic\nfrom sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression(max_iter=2000)\nlogreg.fit(X_train, y_train)\norderAccLog = round(logreg.score(X_test, y_test)*100, 2)\norderAccLog","3e72bb5e":"# KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\norderAccKnn = round(knn.score(X_test, y_test) * 100, 2)\norderAccKnn","77a5b978":"# Gaussian Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\ngaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\norderAccGaussian = round(gaussian.score(X_test, y_test) * 100, 2)\norderAccGaussian","191a6cd6":"# Perceptron\nfrom sklearn.linear_model import Perceptron\nperceptron = Perceptron()\nperceptron.fit(X_train, y_train)\norderAccPerceptron = round(perceptron.score(X_test, y_test) * 100, 2)\norderAccPerceptron","2af435e1":"# Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndecisionTree = DecisionTreeClassifier()\ndecisionTree.fit(X_train, y_train)\norderAccDecisionTree = round(decisionTree.score(X_test, y_test) * 100, 2)\norderAccDecisionTree","d957aef2":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nrandomForest = RandomForestClassifier(n_estimators=100)\nrandomForest.fit(X_train, y_train)\norderAccRandomForest = round(randomForest.score(X_test, y_test) * 100, 2)\norderAccRandomForest","57a9e6bf":"models = pd.DataFrame({\n    'Models': ['Logistice Regression', 'KNN', 'Naive Bayes', 'Perceptron', 'Decision Tree', 'Random Forest'],\n    'Score' : [orderAccLog, orderAccKnn, orderAccGaussian, orderAccPerceptron, orderAccDecisionTree, orderAccRandomForest]\n})\n\nmodels.sort_values(by='Score', ascending=False)","65694ecf":"effective = pd.DataFrame({'feature':list(X.columns),'feature_importance':[abs(i) for i in logreg.coef_[0]]})\n#effective[\"feature_name\"] = X.columns.tolist()\n#effective[\"feature_importance\"] = logreg.feature_importances_\neffective.sort_values(\"feature_importance\",ascending=False)","378b3479":"effective = pd.DataFrame()\neffective[\"feature_name\"] = X.columns.tolist()\neffective[\"feature_importance\"] = randomForest.feature_importances_\neffective.sort_values(\"feature_importance\",ascending=False)","139f95c7":"# Total Tip ($) by Driver ID","d8b608a5":"# Import Dataset","4651f15b":"**Dropped Features Gaussian Naive Bayes**","26205d0d":"**'If Refunded' KNN Classifier**","9e5f5ecb":"**'If Refunded' Logistic Regression**","78bf72b2":"\n**Dropped Features Decision Tree**","bc7ce310":"**Dropped Features KNN Classifier**","8c347cd6":"# 'If Tip' Regressions","81e3c65d":"**Dropped Features Perceptron**","23215fbf":"**'If Refunded' Decision Tree**","97672d76":"Dropped Features Logistic Regression","5086cb6a":"# 'If Refund' Regressions","caa34fe0":"**Dropped Features Breakdown**","4c597203":"**'If Refunded' Perceptron**","9a968888":"**'If Refunded' Gaussian Naive Bayes**","29b3f6d6":"Drop Datetime Columns","0b73671f":"**Dropped Features Random Forest**","25d13db0":"**'If Tip' Gaussian Naive Bayes Regression**","cc8c3509":"**'If Tip' Decision Tree Classifier**","f30e33d9":"**'If Refunded' Random Forest Feature Importance**","408dd56f":"**'If Tip' KNN Classifier**","4dcea1dc":"**'If Tip' Split**","4aee5c9a":"# Tip % vs Order total","5f99128d":"**'If Refunded' Split**","c9b8ea41":"# Libraries","e2f62a66":"**'If Refunded' Random Tree Feature Importance**","6c6e89a0":"Top Drivers by Order Total","9679c8a7":"**'If Refunded' Random Forest**","d30effea":"# 'If Tip' Dropped Features","fe3fe81f":"The same features seem to play a relevant role as the 'If Refunded' EDA. Lets see if the same happens when we drop all the features with < 10% importance.\n","9fcc8add":"# Deliveries by Driver ID by Delivery Region","d73e0827":"# Deliveries by Restuarant ID by Delivery Region","4dbee768":"**'If Tip' Logistic Regression**","4923ea57":"**'If Refunded' Logistic Feature Importance**","d67d1dcd":"**'If Tip' Random Forest Classifier**","3aeb10fb":"# Create DFs for Regressions","2f1d4f5c":"# Visualize DF","a7c6dbeb":"All of the time features, 'Order total', and 'Amount of Tip' seem to be the features with the most importance. Lets run regressions\/classifiers with just those columns.","3e65b9fd":"Even with the dropped features the 'Order total' and 'Time b\/w Delivery and Placed at restaurant' are the biggest factors when understanding why refunds happen from this dataset. ","c1b7fb1e":"**'If Tip' Regession Breakdown**","fe44c36e":"**'If Refunded' Regession Breakdown**","c9f7cace":"Change Dtypes of columns ","a30b0c1c":"**'If Tip' Perceptron Regression**","059028e6":"# orderDF Dropped Features Analysis","25eecde6":"# Amount of tip by Order total"}}