{"cell_type":{"2355391c":"code","c84e0cd7":"code","3521db15":"code","06e27ee3":"code","a147eb9d":"code","878986f2":"code","46d745e5":"code","d1ef8550":"code","1cc5b7a3":"code","f39b380e":"code","6192b020":"code","32647b4a":"code","367fc250":"code","2c2855a3":"code","1a6ff0c9":"code","c7057efb":"code","d3213c3d":"code","4fed31fb":"code","ded37acd":"code","4663e19b":"code","b046a415":"code","9f22c01c":"code","5003a933":"code","b868fdbf":"markdown","79b501e7":"markdown","620f723b":"markdown","4bebf5ff":"markdown","73f29b37":"markdown","d56bf299":"markdown","8a4c0b91":"markdown","f06b5fff":"markdown","8e35ac46":"markdown"},"source":{"2355391c":"!pip install -q timm","c84e0cd7":"# Python library used for working with arrays.\nimport numpy as np\n\n# Python library to interact with the file system.\nimport os\n\n# Software library written for data manipulation and analysis. \nimport pandas as pd\n\n# fastai library for computer vision tasks\nfrom fastai.vision.all import *\nfrom fastai.metrics import *\n\n# Developing and training neural network based deep learning models.\nimport torch","3521db15":"dataset_path = Path('..\/input\/ranzcr-clip-catheter-line-classification')","06e27ee3":"train_df = pd.read_csv(dataset_path\/'train.csv')","a147eb9d":"train_df.head()","878986f2":"train_df['path'] = train_df['StudyInstanceUID'].map(lambda x:str(dataset_path\/'train'\/x)+'.jpg')\ntrain_df = train_df.drop(columns=['StudyInstanceUID'])\ntrain_df.head(10)","46d745e5":"# Transforms we need to do for each image in the dataset (ex: resizing).\nitem_tfms = RandomResizedCrop(384, min_scale=0.75, ratio=(1.,1.)) \n\n# Transforms that can take place on a batch of images (ex: many augmentations).\nbatch_tfms = [*aug_transforms(size=384, max_warp=0), Normalize.from_stats(*imagenet_stats)]","d1ef8550":"label_names = list(train_df.columns[:11])","1cc5b7a3":"data = DataBlock(blocks=(ImageBlock, MultiCategoryBlock(encoded=True, vocab=label_names)), # multi-label target\n                 splitter = RandomSplitter(seed=42),# split data into training and validation subsets.\n                 get_x = ColReader(12),# obtain the input images.\n                 get_y = ColReader(list(range(11))), # obtain the targets.\n                 item_tfms = item_tfms,\n                 batch_tfms = batch_tfms)","f39b380e":"dls = data.dataloaders(train_df,bs=16)\n\n# We can call show_batch() to see what a sample of a batch looks like.\ndls.show_batch()","6192b020":"model = torch.hub.load('facebookresearch\/deit:main', 'deit_base_patch16_384', pretrained=True)\n","32647b4a":"model.head","367fc250":"model.head = nn.Sequential(nn.Dropout(0.25), \n                           nn.Linear(768, 11))\n\nmodel.head","2c2855a3":"learn = Learner(dls, model, metrics = [accuracy_multi])","1a6ff0c9":"learn.lr_find()","c7057efb":"learn.fine_tune(1, base_lr=1.2022644114040304e-05)","d3213c3d":"sample_df = pd.read_csv(dataset_path\/'sample_submission.csv')\nsample_df.head()","4fed31fb":"_sample_df = sample_df.copy()\n_sample_df['PatientID'] = 'None'\n_sample_df['path'] = _sample_df['StudyInstanceUID'].map(lambda x:str(dataset_path\/'test'\/x)+'.jpg')\n_sample_df = _sample_df.drop(columns=['StudyInstanceUID'])\ntest_dl = dls.test_dl(_sample_df)","ded37acd":"test_dl.show_batch()","4663e19b":"# Return predictions on the ds_idx dataset or dl using Test Time Augmentation\npreds, _ = learn.tta(dl=test_dl,n=3)","b046a415":"submission_df = sample_df\nfor i in range(len(submission_df)):\n    for j in range(len(label_names)):\n        submission_df.iloc[i, j+1] = preds[i][j].numpy().astype(np.float32)","9f22c01c":"submission_df.head(10)","5003a933":"submission_df.to_csv(f'submission.csv', index=False)","b868fdbf":"# Install and Import Libraries","79b501e7":"# Data Preprocessing","620f723b":"# Submission File","4bebf5ff":"# *Upvote the kernel if you find it insightful!*","73f29b37":"# Import Data","d56bf299":"# Test Time Augmentation (TTA)\nSimilar to what Data Augmentation is doing to the training set, the purpose of Test Time Augmentation is to perform random modifications to the test images. Thus, instead of showing the regular, \u201cclean\u201d images, only once to the trained model, we will show it the augmented images several times. We will then average the predictions of each corresponding image and take that as our final guess.\n\nThe reason why it works is that, by averaging our predictions, on randomly modified images, we are also averaging the errors. The error can be big in a single vector, leading to a wrong answer, but when averaged, only the correct answer stand out.","8a4c0b91":"# Model","f06b5fff":"Get dataloader and show the data","8e35ac46":"![](https:\/\/scontent.fblr2-1.fna.fbcdn.net\/v\/t39.2365-6\/131715266_303592217719628_2247522524990492321_n.png?_nc_cat=101&ccb=1-3&_nc_sid=ad8a9d&_nc_ohc=Pt6GSI30vO0AX_YI3Nd&_nc_ht=scontent.fblr2-1.fna&oh=a39cdc80e4052f0a8507b596e83318bf&oe=606E10D5)\n\n\n\nThis new technique \u2014 Data-efficient image Transformers (DeiT) \u2014 requires less data and less computing resources to produce a high-performance image classification model. Training a DeiT model over 3 days, achieved 84.2 top-1 accuracy on the widely used ImageNet benchmark without using any external data for training. This result is competitive with the performance of cutting-edge convolutional neural networks (CNNs), which have been the dominant approach to image classification for many years.\n\nDeiT is an important step forward in using Transformers to advance computer vision. Its performance is already competitive with that of CNNs, even though the latter have been the dominant approach for computer vision tasks for the last eight years and have benefited from many improvements and adjustments. This indicates that additional research will produce significant additional gains."}}