{"cell_type":{"b1ee4834":"code","05808c8c":"code","515035c0":"code","2c9f8c3d":"code","725fdc41":"code","2597a0f8":"code","e71ff263":"code","70e587bf":"code","292d6b08":"code","a3d96c20":"code","3527c30f":"code","acde0e3d":"code","233eee83":"code","df994724":"markdown","02e7430f":"markdown","e7818d1e":"markdown","56b47b8b":"markdown","97a2ae44":"markdown","9be59168":"markdown","97b73fd2":"markdown"},"source":{"b1ee4834":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","05808c8c":"#Import the libraries\n\nimport numpy as np # linear algebra \nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sn\n\n#Import and visualize the dataset\n\ndf=pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")\ndf.head()","515035c0":"df.tail()","2c9f8c3d":"df.describe()","725fdc41":"df.info()","2597a0f8":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ndf = df.apply(label_encoder.fit_transform)\ndf","e71ff263":"#Set the class as the response variable\n\ny=df[['class']]\n\n#Set the remaining variables in the dataframe as features\n\nx=df.drop(columns=['class','veil-type','veil-color'])\n\nX = (x - np.min(x))\/(np.max(x)-np.min(x)).values\nX.info","70e587bf":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\n\nmushroom_model = LogisticRegression()\nscores=cross_val_score(mushroom_model, X, y.values.ravel(),cv=10)\nscores.mean()","292d6b08":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=5)\nscores = cross_val_score(knn, X, y.values.ravel(), cv=10, scoring='accuracy')\nk_range = list(range(1, 31))\nk_scores = []\n\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    scores = cross_val_score(knn, X, y.values.ravel(), cv=10, scoring='accuracy')\n    k_scores.append(scores.mean())\n    \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.plot(k_range, k_scores)\nplt.xlabel('Value of K for KNN')\nplt.ylabel('Cross-Validated Accuracy')","a3d96c20":"knn = KNeighborsClassifier(n_neighbors=1)\nprint(cross_val_score(knn, X, y.values.ravel(), cv=10, scoring='accuracy').mean())","3527c30f":"from sklearn.decomposition import PCA\n\npca=PCA()  \npca.n_components=20  \npca_data=pca.fit_transform(X)\npercentage_var_explained = pca.explained_variance_ratio_;  \ncum_var_explained=np.cumsum(percentage_var_explained)\n \nplt.figure(1,figsize=(6,4))\nplt.clf()  \nplt.plot(cum_var_explained,linewidth=2)  \nplt.axis('tight')  \nplt.grid() \nplt.xlabel('n_components') \nplt.ylabel('Cumulative_Variance_explained')  \nplt.show()","acde0e3d":"i_range=[0.7,0.8,0.9,0.95]\nscores1=[]\n\nfor i in i_range:\n  pca=PCA(i) \n  pca.fit(X) \n  X1=pca.transform(X) \n  mushroom_model1 = LogisticRegression()\n  scores1=cross_val_score(mushroom_model1, X1, y.values.ravel(),cv=10)\n  print(scores1.mean())","233eee83":"df=df.drop(columns=['veil-type','veil-color'])\nplt.figure(figsize=(15, 10))\nsn.heatmap(df.corr(), annot=True)\nplt.show()","df994724":"# 7-Conclusion\n\nEven by using Principal Component Analysis to reduce the number of components in the model,  KNN seems to be a better choice since it gives a better accuracy than logistic regression.","02e7430f":"We choose 1 for the number of neighbors since it seems to give a better accuracy from the graph above","e7818d1e":"# 2- Selecting variables for the model\n\nWe will try to keep all the features, except veil class, veil type and veil colour since they have missing values. I will also scale the values to do Machine Learning thereafter.","56b47b8b":"# 5-Use the KNN model\n\nIn this step, we will use the KNN model. Before running this mode, we will first determine the best number of neighbors by repeating the process 31 times and choose the model with the best accuracy. In that case, 1 is the best number with an accuracy of 96.7%.","97a2ae44":"# 1-Import the dataset\n\nThe first step is to import the dataset into Python and to have a quick look at it. As we can see, there is no missing value, and all the features seem categorical, so we will keep the dataset this way to build the model later on.\n","9be59168":"# 6-PCA and Logistic Regression\n\nSince in a logistic regression model, we do not want to have a lot of interactions between variables, we will try to reduce the number of components in the correlation matrix in order to keep as much information as possible with less features in the model. As we can notice on the graph, we can represent 90% of the data by only keeping ten (out of 20) of the most important components, which is very good. We will then try to calculate the accuracy with a cumulative variance of 70%,80%, 90% and 95% to see if the accuracy will increase (88.23% if we keep all the components). The best choice is to keep all the components in the model. Indeed, by checking the correlation matrix, most of them have a very low correlation with each other, which means that they are almost all independant with each other, which is very good for a logistic regression model.","97b73fd2":"# 4-Build the logistic regression model\n\nI will now run the logistic regression model with the cross validation method (which is, by definition, splitting the testing and the training dataset multiple times). The accuracy is 88.23%, which is not too bad. I will use the KNN model to see if we get the same result."}}