{"cell_type":{"7c637885":"code","b0e8ccab":"code","32666329":"code","348f3314":"code","1c125314":"code","655d89a9":"code","0b618310":"code","e025647d":"code","167849b9":"code","14b201b6":"code","af63242a":"markdown"},"source":{"7c637885":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b0e8ccab":"stock_data = pd.read_csv('\/kaggle\/input\/google-stock-data\/GOOG.csv')","32666329":"stock_data.head()","348f3314":"stock_data.shape","1c125314":"stock_data.dtypes","655d89a9":"stock_data.isnull().any()","0b618310":"data = stock_data.copy()\n\ndata['Date'] = data['Date'].apply(pd.to_datetime)\n\ndt_source = data[['Open', 'High', 'Low', 'Close']]\n\ndate_ls = stock_data['Date']","e025647d":"import seaborn as sns\nfrom scipy.stats import norm\n\nfrom pyecharts import options as opts\nfrom pyecharts.charts import Kline","167849b9":"pip install pyecharts","14b201b6":"x = date_ls.values.tolist()\ny = dt_source.values.tolist()\n\nc = (\n    Kline()\n    .add_xaxis(x)\n    .add_yaxis(\"kline\", y)\n    .set_global_opts(\n        xaxis_opts=opts.AxisOpts(is_scale=True),\n        yaxis_opts=opts.AxisOpts(\n            is_scale=True,\n            splitarea_opts=opts.SplitAreaOpts(\n                is_show=True, areastyle_opts=opts.AreaStyleOpts(opacity=1)\n            ),\n        ),\n        datazoom_opts=[opts.DataZoomOpts(pos_bottom=\"-2%\")],\n        title_opts=opts.TitleOpts(title=\"Stock Data Display\"),\n    )\n    .render(\"stoc_data.html\")\n)","af63242a":"Wonderfull data for me \uff01"}}