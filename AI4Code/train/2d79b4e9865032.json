{"cell_type":{"b3101e4a":"code","06912d21":"code","aa4e1431":"code","a324f2bb":"code","fb824fe5":"code","ed698650":"code","ace05234":"code","39f0e6e5":"code","5e00e731":"code","23432ceb":"code","84814178":"code","eb61a217":"code","14895aa4":"code","ba94b837":"code","bbbef6ce":"code","7183c052":"code","04544c59":"code","112964d4":"code","b242a42e":"code","ea8856d8":"code","49e5f3d2":"code","81eaa0c2":"code","834ad8bf":"code","7b515672":"code","d4c49e7f":"code","a2148a83":"code","65b096d3":"code","99859b45":"code","b6e1b269":"code","aff17fd4":"code","eff91002":"code","ad92acb4":"code","7c6b5bbd":"code","54ba972a":"code","cbc01b0f":"code","b0162896":"code","142b66ac":"markdown","6c234676":"markdown","c18ba934":"markdown"},"source":{"b3101e4a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","06912d21":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport openslide\nimport os\nimport cv2\nimport PIL\nfrom IPython.display import Image, display\nfrom keras.applications.vgg16 import VGG16,preprocess_input\nimport plotly.graph_objs as go\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential, Model,load_model\nfrom keras.applications.vgg16 import VGG16,preprocess_input\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.preprocessing.image import ImageDataGenerator,load_img, img_to_array\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Input, Flatten,BatchNormalization,Activation\nfrom keras.layers import GlobalMaxPooling2D\nfrom keras.models import Model\nfrom keras.optimizers import Adam, SGD, RMSprop\nfrom keras.callbacks import ModelCheckpoint, Callback, EarlyStopping\nfrom keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport gc\nimport skimage.io\nfrom sklearn.model_selection import KFold\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nimport tensorflow as tf\nfrom tensorflow.python.keras import backend as K\nsess = K.get_session()","aa4e1431":"train=pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')","a324f2bb":"test=pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')","fb824fe5":"sub=pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/sample_submission.csv')","ed698650":"sub.head()","ace05234":"labels=[]\ndata=[]\ndata_dir='\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train'\nfor i in range(train.shape[0]):\n    data.append(data_dir + train['image_name'].iloc[i]+'.jpg')\n    labels.append(train['target'].iloc[i])\ndf=pd.DataFrame(data)\ndf.columns=['images']\ndf['target']=labels","39f0e6e5":"df","5e00e731":"from keras.preprocessing import image","23432ceb":"'''\ntrain_image = []\nfor i in range(train.shape[0]):\n    img = image.load_img('\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/'+train['image_name'].iloc[i]+'.jpg', target_size=(28,28,1), grayscale=True)\n    img = image.img_to_array(img)\n    img = img\/255\n    train_image.append(img)\nX = np.array(train_image)\n'''","84814178":"'''\nimport glob\nimport cv2\nimport numpy as np\npic_num=1\nIMG_DIR='\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/'\ndef read_images(directory):\n    for img in glob.glob(directory+\"\/*.jpg\"):\n        image = cv2.imread(img)\n        image=cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        train_image = cv2.resize(image\/255.0  , (32 , 32))\n        #cv2.imwrite(\"small\/\"+str(pic_num)+'.jpg',resized_img)\n\n        yield train_image\n\ntrain_image =  np.array(list(read_images(IMG_DIR)))\n'''","eb61a217":"train","14895aa4":"train","ba94b837":"df","bbbef6ce":"train.head()","7183c052":"train['target'].value_counts()","04544c59":"test.head()","112964d4":"df","b242a42e":"X_train, X_val, y_train, y_val = train_test_split(df['images'],df['target'], test_size=0.2, random_state=1234)","ea8856d8":"y_train","49e5f3d2":"train=pd.DataFrame(X_train)\ntrain.columns=['images']\ntrain['target']=y_train\n\nvalidation=pd.DataFrame(X_val)\nvalidation.columns=['images']\nvalidation['target']=y_val\n\ntrain['target']=train['target'].astype(str)\nvalidation['target']=validation['target'].astype(str)","81eaa0c2":"train","834ad8bf":"validation","7b515672":"train_datagen = ImageDataGenerator()\n                                   #,rotation_range=20,\n    #width_shift_range=0.2,\n    #height_shift_range=0.2,horizontal_flip=True)\nval_datagen=train_datagen = ImageDataGenerator()\ntrain_generator = train_datagen.flow_from_dataframe(\n    train,\n    x_col='images',\n    y_col='target',\n    target_size=(224, 224)\n    #batch_size=32,\n    #class_mode='categorical'\n)\n\nvalidation_generator = val_datagen.flow_from_dataframe(\n    validation,\n    x_col='images',\n    y_col='target',\n    target_size=(224, 244)\n    #batch_size=32,\n    #class_mode='categorical'\n)","d4c49e7f":"from keras.applications import VGG16\n\n# include top should be False to remove the softmax layer\npretrained_model = VGG16(include_top=False, weights='imagenet')\npretrained_model.summary()","a2148a83":"def vgg16_model( num_classes=None):\n\n    model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n    x=Flatten()(model.output)\n    x=Dropout(0.5)(x)\n    output=Dense(num_classes,activation='softmax')(x)\n    model=Model(model.input,output)\n    return model\n\nvgg_conv=vgg16_model(6)","65b096d3":"vgg_conv.summary()","99859b45":"def kappa_score(y_true, y_pred):\n    \n    y_true=tf.math.argmax(y_true)\n    y_pred=tf.math.argmax(y_pred)\n    return tf.compat.v1.py_func(cohen_kappa_score ,(y_true, y_pred),tf.double)","b6e1b269":"opt = SGD(0.001,momentum=0.9,decay=1e-4)\nvgg_conv.compile(loss='categorical_crossentropy',optimizer=opt,metrics=[kappa_score])","aff17fd4":"nb_epochs = 5\nbatch_size=32\nnb_train_steps = train.shape[0]\/\/batch_size\nnb_val_steps=validation.shape[0]\/\/batch_size\nprint(\"Number of training and validation steps: {} and {}\".format(nb_train_steps,nb_val_steps))","eff91002":"vgg_conv.fit_generator(\n    train_generator,\n    steps_per_epoch=nb_train_steps,\n    epochs=nb_epochs,\n    validation_data=validation_generator,\n    validation_steps=nb_val_steps)","ad92acb4":"# submission code from https:\/\/www.kaggle.com\/frlemarchand\/high-res-samples-into-multi-input-cnn-keras\ndef predict_submission(df, path):\n    \n    df[\"image_path\"] = [path+image_id+\".tiff\" for image_id in df[\"image_name\"]]\n    df[\"target\"] = 0\n    predictions = []\n    for idx, row in df.iterrows():\n        print(row.image_path)\n        img=skimage.io.imread(str(row.image_path))\n        img = cv2.resize(img, (224,224))\n        img = cv2.resize(img, (224,224))\n        img = img.astype(np.float32)\/255.\n        img=np.reshape(img,(1,224,224,3))\n        prediction=vgg_conv.predict(img)\n        predictions.append(np.argmax(prediction))\n            \n    df[\"target\"] = predictions\n    df = df.drop('image_path', 1)\n    return df[[\"image_name\",\"target\"]]","7c6b5bbd":"test_path = \"'\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\"\nsubmission_df = pd.read_csv(\"\/kaggle\/input\/siim-isic-melanoma-classification\/sample_submission.csv\")\n\nif os.path.exists(test_path):\n    test_df = pd.read_csv(\"\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv\")\n    submission_df = predict_submission(test_df, test_path)\n\nsubmission_df.to_csv('submission.csv', index=False)\nsubmission_df.head()","54ba972a":"from keras.utils import to_categorical\n# extract train and val features\nvgg_features_train = pretrained_model.predict(train_generator)\nvgg_features_val = pretrained_model.predict(validation_generator)","cbc01b0f":"vgg_features_train","b0162896":"model2 = Sequential()\nmodel2.add(Flatten(input_shape=(7,7,512)))\nmodel2.add(Dense(100, activation='relu'))\nmodel2.add(Dropout(0.5))\nmodel2.add(BatchNormalization())\nmodel2.add(Dense(10, activation='softmax'))\n\n# compile the model\nmodel2.compile(optimizer='adam', metrics=['accuracy'], loss='categorical_crossentropy')\n\nmodel2.summary()\n\n# train model using features generated from VGG16 model\n\n#model2.fit(vgg_features_train, epochs=50,  validation_data=vgg_features_val)","142b66ac":"### LOAD ALL THE IMAGES FROM JPEG TRAIN DATASET AND SAVE ALL PATH TO DF DATASET","6c234676":"# Submission","c18ba934":"# LOADING LIBRARY"}}