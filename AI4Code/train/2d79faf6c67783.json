{"cell_type":{"5919fc57":"code","f9326b90":"code","9842b689":"code","bbde5319":"code","bd219c54":"code","44fc7d1b":"code","a90a7d62":"code","6d5af725":"code","14a310f0":"code","4a7a5118":"code","2b6d8680":"code","2616622c":"code","fcd2cc6d":"code","f7784bcc":"code","a23bb56f":"code","4d5356a7":"code","e634ca76":"code","c637ecd2":"code","adb81557":"code","4d8f7ad6":"code","4805896b":"code","9d48a60c":"markdown","e49041d5":"markdown","a5d770df":"markdown","6d6cfa97":"markdown","e62376ca":"markdown","561311b2":"markdown","70203585":"markdown","0b7ab9d6":"markdown","fb52b111":"markdown","90474ca6":"markdown","d5511afb":"markdown","bb56ffd4":"markdown","f429b15a":"markdown","6f66d74b":"markdown","04c177a4":"markdown"},"source":{"5919fc57":"import tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models\nimport matplotlib.pyplot as plt\nimport numpy as np","f9326b90":"#load dataset\n(X_train,y_train),(X_test,y_test)=datasets.cifar10.load_data()","9842b689":"X_train.shape","bbde5319":"y_train.shape","bd219c54":"X_test.shape","44fc7d1b":"y_test.shape","a90a7d62":"y_train[:5]","6d5af725":"type(y_train[:5])","14a310f0":"y_train=y_train.reshape(-1)","4a7a5118":"y_test=y_test.reshape(-1)","2b6d8680":"y_train[:5]","2616622c":"type(y_train[:5])","fcd2cc6d":"classes=['airplane','automobile', 'bird','cat','deer','dog','frog','horse','ship','truck']","f7784bcc":"def picture(X,y, index):\n    plt.imshow(X[index])\n    plt.xlabel(classes[y[index]])","a23bb56f":"picture(X_train,y_train,0)","4d5356a7":"picture(X_train,y_train,32)","e634ca76":"X_train = X_train \/ 255.0","c637ecd2":"X_test = X_test \/ 255.0","adb81557":"# ANN Model Creation\nANN = models.Sequential([\n    layers.Flatten(input_shape = (32, 32, 3)),        # Input Layer, 32X32 - Dimensions, 3- No of chanels(RGB)\n    layers.Dense(3000, activation = 'relu'),          # Hidden Layer, 3000-Nos of Neural,Activation Fn is Relu\n    layers.Dense(1000, activation = 'relu'),          # Hidden Layer, 3000-Nos of Neural,Activation Fn is Relu\n    layers.Dense(10, activation = 'sigmoid'),            # Hidden Layer, 10-Nos of Classes, Activation Fn is Relu\n])","4d8f7ad6":"ANN.compile(optimizer = 'SGD', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])","4805896b":"ANN.fit(X_train, y_train, epochs = 5)","9d48a60c":"To Understand the difference check X_train And X_test before and After the Normalisation","e49041d5":"Train:Test Split= 85:15","a5d770df":"We need to Normalise the Data for Optimisation Pupose and Cost of Computation will be higher","6d6cfa97":"50,000 - No of Records , 32x32 - Pixel Dimensions, 3-No of Chanels(RBG - Red,Blue,Green)","e62376ca":"Note : Type is still the same","561311b2":"Classes of cifar10 Data set : So we need to use multi class Activation Function at output Layer = SoftMax","70203585":"Note : It is a multi-Dimensional matrix, We will convert it in Single Dimension, using re-shape","0b7ab9d6":"It got converted in Single Row, Whenever we process any data to Neural Network,it will feed the Data in One row at a time, So Flattening is needed, It will be easier now for processing","fb52b111":"For showing this picture we require function, becoz each of the pic is having some label or index, so we require function to anotate this picture with its index(for csv no anotation required)","90474ca6":"We put X_train and X_test in () - Becoz its an Image","d5511afb":"Defining Input Layer, Hidden Layer, Output Layer","bb56ffd4":"SGD = Schotastic Gradient Descent, loss = sparse_categorical_crossentropy","f429b15a":"50000 - No of Records, 1- Label(One Picture at a time only)","6f66d74b":"[image.png](attachment:5318f083-701e-4b00-bf60-95d0fb55d7af.png)![image.png](attachment:a023ff87-1ae5-4254-8b7c-067441442049.png)","04c177a4":"For Checking Shape - We use\n.shape"}}