{"cell_type":{"c05562df":"code","b13d957f":"code","5e0a530e":"code","e0082c90":"code","b411b0d4":"code","f04f9ad9":"code","db570f18":"code","c3db4927":"code","7f870562":"code","7515e919":"code","9156665b":"code","9a40d6a7":"code","45fde4bf":"code","bc8b35af":"code","43fe0b03":"code","c49dd879":"code","0aca077e":"code","1f22838e":"code","09ce3cda":"code","1b1a97f0":"code","af0dc95b":"code","f823c7c5":"code","f5a5609c":"code","73e52cf1":"code","bc992044":"code","a65c696f":"code","8c4c134b":"code","d4fab76c":"code","c981b047":"code","51bfd165":"code","b3e89e2f":"code","55883108":"code","20db5b3a":"code","ccd35423":"code","fb323ea1":"code","96d99fce":"code","d6609b48":"code","8c029a5e":"code","f8b57b29":"code","05539342":"code","e4ee0fd8":"code","ff827868":"code","875e2e69":"code","60ea5ceb":"code","17b860ef":"code","96fe4174":"code","537abc0d":"code","ca777086":"code","99f38c24":"code","b1bc0356":"code","3970cbb6":"code","405b0bda":"code","73865bc0":"code","f329c7d6":"code","a3f7fb40":"code","db6a5cc9":"code","758f609b":"code","0eeb9e6c":"code","da867b8e":"code","ee61f285":"code","3e7e4891":"code","ddbd8d81":"code","216a4282":"code","579499ba":"code","c929da23":"code","9ad508f0":"code","8a487522":"markdown","309870e1":"markdown","a937e77b":"markdown","e89d340d":"markdown","8783ae3f":"markdown","b3bee965":"markdown","ba75d784":"markdown","85cd6e6a":"markdown","b96a0770":"markdown","20e6ef1e":"markdown","b53e00b6":"markdown","183a5f0f":"markdown","de0e5e50":"markdown","39130aa8":"markdown","f2607e68":"markdown","21453f1b":"markdown","aefb5681":"markdown","98dd7285":"markdown","4a33505d":"markdown","3665b5e0":"markdown","42315f6c":"markdown","fbdcdbfc":"markdown","32eda479":"markdown","a55e7c11":"markdown","e0a5c959":"markdown","f9ad6bed":"markdown","4e6bc48f":"markdown","2504897f":"markdown","c20da0f6":"markdown","a39da106":"markdown","a815069c":"markdown","351ae109":"markdown","93e9282f":"markdown","4c69280a":"markdown","c77d671a":"markdown","e749994d":"markdown","510fba02":"markdown","6d43959f":"markdown","4e65caea":"markdown","5152625a":"markdown"},"source":{"c05562df":"#libraries we need\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nfrom datetime import date\npd.options.mode.chained_assignment = None\nimport h2o\nimport seaborn as sns; sns.set()\nimport matplotlib.pyplot as plt\n\n\n#libraries we need\n# !pip install h2o\n\nfrom scipy.special import expit\n\nfrom h2o.estimators.glm import H2OGeneralizedLinearEstimator\nfrom h2o.grid.grid_search import H2OGridSearch\n\nfrom sklearn.model_selection import train_test_split\nfrom h2o.estimators import H2OGradientBoostingEstimator\nSEED  = 1111   # global random seed for better reproducibility\n\nfrom sklearn.tree import export_graphviz\n# from sklearn.externals.six import StringIO  \nfrom IPython.display import Image  \n# import pydotplus\n\nh2o.init(max_mem_size='24G', nthreads=4) # start h2o with plenty of memory and threads\nh2o.remove_all()                         # clears h2o memory\nh2o.no_progress() ","b13d957f":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv') \ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","5e0a530e":"# Drop the id column from both test and training data\ntrain.drop(['Id'],axis=1, inplace=True)\ntest.drop(['Id'],axis=1, inplace=True)\n\nprint('The shape of train data is {}'.format(train.shape))\nprint('The shape of test data is {}'.format(test.shape))\n\n#concat both the datasets for easier cleaning \nfull = train.append(test, ignore_index=True)\nprint('The shape of full data is {}'.format(full.shape))","e0082c90":"pd.DataFrame(full.isna().sum()*100\/full.shape[0]).plot.bar(figsize=(20,5))","b411b0d4":"#NA already existing category\nfull.update(full[['BsmtCond','BsmtFinType2','BsmtFinType1','BsmtExposure','BsmtQual',\n                  'GarageType','GarageQual','GarageFinish','GarageCond','FireplaceQu',\n                  'MiscFeature','Fence','PoolQC','Alley','Electrical','MasVnrType']].fillna('None'))\n\n#nan with zero as constant\nfull.update(full[['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','BsmtHalfBath',\n                  'BsmtFullBath','GarageArea','GarageCars','MasVnrArea','TotalBsmtSF']].fillna(0)) \n\n# Replacing the missing values with mode for the list of variables ['Exterior1st','Exterior2nd','Functional','KitchenQual','MSZoning','SaleType','Utilities']\nfull['Exterior1st']=full['Exterior1st'].fillna(full.Exterior1st.value_counts().index[0])\nfull['Exterior2nd']=full['Exterior2nd'].fillna(full.Exterior2nd.value_counts().index[0])\nfull['Functional']=full['Functional'].fillna(full.Functional.value_counts().index[0])\nfull['KitchenQual']=full['KitchenQual'].fillna(full.KitchenQual.value_counts().index[0])\nfull['MSZoning']=full['MSZoning'].fillna(full.MSZoning.value_counts().index[0])\nfull['SaleType']=full['SaleType'].fillna(full.SaleType.value_counts().index[0])\nfull['Utilities']=full['Utilities'].fillna(full.Utilities.value_counts().index[0])\n\n#Dropping irrelavent columns from the whole dataset based on the EDA on the training dataset\n#GarageQual is repetitive, which has the same meaning as Garage Cond\n#PoolQC is mostly NA and won't provide much info, and we've already have PoolArea\n#MSSubClass is a combination of dweiing and year\nfull= full.drop(['MoSold','GarageQual','PoolQC','MSSubClass'],axis=1)\n\n#filled missing garage years\n#It makes no sense to fill year with 0, so we assume the garage was built when the house was built\nfull['GarageYrBlt'] = full['GarageYrBlt'].fillna(full['YearBuilt'])\n\n#Create new features to make them more comprehensive to common sense\n#converting years into age \ncurrentYear = datetime.now().year\nfull['Age_House']=currentYear-full['YearBuilt']\nfull['Age_Renovation']=currentYear-full['YearRemodAdd']\nfull['Garage_age']=currentYear-full['GarageYrBlt']\nfull = full.drop(['YearBuilt','YearRemodAdd','GarageYrBlt'],axis=1)\n\n#Changing OverallCond into a categorical variable, they will be label encoded afterwards\n#These're ordinal variables\nfull['OverallCond'] = full['OverallCond'].astype(str)\nfull['YrSold'] = full['YrSold'].astype(str)","f04f9ad9":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageCond', 'ExterQual', \n        'ExterCond','HeatingQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'OverallCond', \n        'YrSold')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lb = LabelEncoder() \n    lb.fit(list(full[c].values)) \n    full[c] = lb.transform(list(full[c].values))\n    \n    \n    \n# Adding total sqfootage feature \nfull['TotalSF'] = full['TotalBsmtSF'] + full['1stFlrSF'] + full['2ndFlrSF']","db570f18":"pd.DataFrame(full.isna().sum()*100\/full.shape[0]).plot.bar(figsize=(20,5))","c3db4927":"#spillitng the data again\ntrain = full[full['SalePrice'].notnull()]\ntest = full[full['SalePrice'].isnull()]\ntrain_y = train['SalePrice']\ntrain_x = train.drop(['SalePrice'],axis=1)\ntest_x = test.drop(['SalePrice'],axis=1)","7f870562":"# Get train LotFrontage dummy variables\nLotFrontage_Dummies_df = pd.get_dummies(train_x[['LotFrontage', 'MSZoning', 'LotArea', 'LotConfig', 'Neighborhood']])\n\n# Get full dummy variables\n# Split the data into LotFrontage known and LotFrontage unknown\nLotFrontageKnown = LotFrontage_Dummies_df[LotFrontage_Dummies_df[\"LotFrontage\"].notnull()]\nLotFrontageUnknown = LotFrontage_Dummies_df[LotFrontage_Dummies_df[\"LotFrontage\"].isnull()]\n\n# Training data knowing LotFrontage\nLotFrontage_Known_X = LotFrontageKnown.drop([\"LotFrontage\"], axis = 1)\nLotFrontage_Known_y = LotFrontageKnown[\"LotFrontage\"]\n# Training data unknown LotFrontage\nLotFrontage_Unknown_X = LotFrontageUnknown.drop([\"LotFrontage\"], axis = 1)\n# Build model using random forest\nfrom sklearn.ensemble import RandomForestRegressor\nrfr=RandomForestRegressor(random_state=1,n_estimators=500,n_jobs=-1)\nrfr.fit(LotFrontage_Known_X, LotFrontage_Known_y)\nrfr.score(LotFrontage_Known_X, LotFrontage_Known_y)","7515e919":"# Predict training data unknown LotFrontage\nLotFrontage_Unknown_y = rfr.predict(LotFrontage_Unknown_X)\ntrain_x.loc[train_x[\"LotFrontage\"].isnull(), \"LotFrontage\"] = LotFrontage_Unknown_y","9156665b":"# Repeat same process for test data\n# Get train LotFrontage dummy variables\nLotFrontage_Dummies_df = pd.get_dummies(test_x[['LotFrontage', 'MSZoning', 'LotArea', 'LotConfig', 'Neighborhood']])\n\n# Get full dummy variables\n# Split the data into LotFrontage known and LotFrontage unknown\nLotFrontageKnown = LotFrontage_Dummies_df[LotFrontage_Dummies_df[\"LotFrontage\"].notnull()]\nLotFrontageUnknown = LotFrontage_Dummies_df[LotFrontage_Dummies_df[\"LotFrontage\"].isnull()]\n\n# Testing data knowing LotFrontage\nLotFrontage_Known_X = LotFrontageKnown.drop([\"LotFrontage\"], axis = 1)\nLotFrontage_Known_y = LotFrontageKnown[\"LotFrontage\"]\n# Testing data unknown LotFrontage\nLotFrontage_Unknown_X = LotFrontageUnknown.drop([\"LotFrontage\"], axis = 1)\n# Build model using random forest\nfrom sklearn.ensemble import RandomForestRegressor\nrfr=RandomForestRegressor(random_state=1,n_estimators=500,n_jobs=-1)\nrfr.fit(LotFrontage_Known_X, LotFrontage_Known_y)\nrfr.score(LotFrontage_Known_X, LotFrontage_Known_y)","9a40d6a7":"# Predict testing data unknown LotFrontage\nLotFrontage_Unknown_y = rfr.predict(LotFrontage_Unknown_X)\ntest_x.loc[test_x[\"LotFrontage\"].isnull(), \"LotFrontage\"] = LotFrontage_Unknown_y","45fde4bf":"train['LotFrontage'] = train_x['LotFrontage']\ntest['LotFrontage'] = test_x['LotFrontage']","bc8b35af":"sns.distplot(train['LotFrontage'])","43fe0b03":"train.plot.scatter(x='Age_House', y='SalePrice', ylim=(0,800000))","c49dd879":"#box plot overallqual\/saleprice\nvar = 'MSZoning'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","0aca077e":"result = pd.concat([train_x, train_y], axis=1)\nCorr = result.corr().iloc[:-1,-1]\n\nfig, ax_ = plt.subplots(figsize=(8, 10))\n_ =  Corr.plot(kind='barh', ax=ax_, colormap='gnuplot')\n_ = ax_.set_xlabel('Pearson Correlation for continuous variables')","1f22838e":"train['SalePrice'] = np.log(train['SalePrice'])\ntest['SalePrice'] = np.log(test['SalePrice'])\n\ntrain_y = train['SalePrice']\ntrain_x = train.drop(['SalePrice'],axis=1)\n\ntest_y = test['SalePrice']\ntest_x = test.drop(['SalePrice'],axis=1)","09ce3cda":"train_df = pd.get_dummies(train)\ntest_df = pd.get_dummies(test)","1b1a97f0":"train_y_df = train_df['SalePrice']\ntrain_x_df = train_df.drop('SalePrice', axis = 1)","af0dc95b":"r = 'SalePrice'\nx = list(train_x_df.columns.values)","f823c7c5":"hf=h2o.H2OFrame(train_df)\ngf=h2o.H2OFrame(test_df)","f5a5609c":"hyper_params = {'alpha': [0, .25, .5, .75, 1]\n                ,'lambda':[1, 0.5, 0.1, 0.01, 0.001, 0.0001, 0.00001, 0]\n               }\n\nglm = H2OGeneralizedLinearEstimator(family = 'gaussian',standardize = True,lambda_search = True)\n\n# build grid search with previously made GLM and hyperparameters\ngrid = H2OGridSearch(model = glm, hyper_params = hyper_params,\n                     search_criteria = {'strategy': \"Cartesian\"})\n\n\ngrid.train(x = x, y = r, training_frame = hf,nfolds=5,seed=1)","73e52cf1":"sorted_grid = grid.get_grid(sort_by='RMSLE', decreasing=False)\nbest_model = sorted_grid.models[0]\nbest_model.cross_validation_metrics_summary()","bc992044":"pred_glm_tr =  best_model.predict(h2o.H2OFrame(train_x_df))\npred_glm_tr = pred_glm_tr.as_data_frame()\nco = best_model.coef()","a65c696f":"cc = [key for key in dict(train.dtypes) if dict(train.dtypes)[key] in ['float64', 'int64']]\ncc.remove('SalePrice')","8c4c134b":"cont_coef = pd.DataFrame.from_dict(dict((k, co[k]) for k in cc),orient='index')","d4fab76c":"cont_coef = cont_coef.rename(columns={ 0: \"Beta\"})","c981b047":"cont_coef.plot.barh(figsize=(20, 20),color='orange')","51bfd165":"X_train, X_valid, y_train, y_valid = train_test_split(train_x, train_y, test_size=0.30, random_state=1111)","b3e89e2f":"X_train = pd.concat([X_train, y_train], axis=1)\nX_valid = pd.concat([X_valid, y_valid], axis=1)\nX_train_hf = h2o.H2OFrame(X_train)\nX_valid_hf = h2o.H2OFrame(X_valid)\n\nSEED  = 1111   # global random seed for better reproducibility","55883108":"y_name = 'SalePrice'\nx_names = list(train.columns.drop('SalePrice'))\n\npredictors = x_names\nresponse = \"SalePrice\"","20db5b3a":"params = {'learn_rate': [0.01, 0.05, 0.1], \n          'max_depth': list(range(2,13,2)),\n          'ntrees': [20, 50, 80, 110, 140, 170, 200],\n          'sample_rate': [0.5,0.6,0.7,0.9,1], \n          'col_sample_rate': [0.2,0.4,0.5,0.6,0.8,1]\n          }\n\n\n# Prepare the grid object\ngrid = H2OGridSearch(model=H2OGradientBoostingEstimator,   # Model to be trained\n                     grid_id='gbm_grid1',\n                     hyper_params=params,              # Dictionary of parameters\n                     search_criteria={\"strategy\": \"RandomDiscrete\", \"max_models\": 500}   # RandomDiscrete\n                     )\n\n# Train the Model\ngrid.train(x=predictors,y=response, \n           training_frame=X_train_hf, \n           validation_frame=X_valid_hf,\n           seed = SEED) # Grid Search ID","ccd35423":"# Identify the best model generated with least error\nsorted_final_grid = grid.get_grid(sort_by='rmsle',decreasing = False)","fb323ea1":"best_model_id = sorted_final_grid.model_ids[0]\nbest_gbm_from_grid = h2o.get_model(best_model_id)\nbest_gbm_from_grid.summary()","96d99fce":"preds_train = best_gbm_from_grid.predict(X_train_hf).exp().as_data_frame()","d6609b48":"best_gbm_from_grid.model_performance(X_valid_hf)","8c029a5e":"X_test_hf = h2o.H2OFrame(test_x)\npreds = best_gbm_from_grid.predict(X_test_hf)\nfinal_preds = preds.exp()\nfinal_preds = final_preds.as_data_frame()\npred_pandas=final_preds","f8b57b29":"raw_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nraw_id = raw_test['Id']\noutput = pd.concat([raw_id, final_preds], axis=1)\noutput = output.rename(columns={'exp(predict)': \"SalePrice\"})","05539342":"best_gbm_from_grid.varimp_plot()","e4ee0fd8":"contributions = best_gbm_from_grid.predict_contributions(X_test_hf)\n#contributions.head(5)","ff827868":"import shap\nshap.initjs()\ncontributions_matrix = contributions.as_data_frame().iloc[:,:].values\n\nX = list(train.columns)\nX.remove('SalePrice')\nlen(X)","875e2e69":"shap_values = contributions_matrix[:,:76]\nshap_values.shape","60ea5ceb":"expected_value = contributions_matrix[:,:76].min()\nexpected_value","17b860ef":"shap.force_plot(expected_value, shap_values, X)","96fe4174":"shap.force_plot(expected_value, shap_values[0,:], X)","537abc0d":"shap.summary_plot(shap_values, X)","ca777086":"shap.summary_plot(shap_values, X, plot_type=\"bar\")","99f38c24":"Continuous = [key for key in dict(train.dtypes) if dict(train.dtypes)[key] in ['float64', 'int64']]","b1bc0356":"dd = ['TotalSF','OverallQual','1stFlrSF']\n\nfor i in dd:\n    print(best_gbm_from_grid.partial_plot(data = X_train_hf, cols = [i], server=True, plot = True))","3970cbb6":"from sklearn.tree import DecisionTreeRegressor,tree\ndt = DecisionTreeRegressor(max_depth=10, min_samples_leaf=0.04,\nrandom_state=SEED)\npred_pandas = h2o.as_list(preds)\ntest_x_dummies = pd.get_dummies(test_x)","405b0bda":"dt = dt.fit(test_x_dummies,np.exp(pred_pandas))","73865bc0":"dt.score(test_x_dummies,np.exp(pred_pandas))","f329c7d6":"# feature_cols = list(test_x_dummies.columns.values)\n\n# dot_data = StringIO()\n# export_graphviz(dt, out_file=dot_data,  \n#                 filled=True, rounded=True,\n#                 special_characters=True,feature_names = feature_cols)\n# graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n# Image(graph.create_png())","a3f7fb40":"residual = np.exp(train['SalePrice']).sub(preds_train['exp(predict)'], axis = 0).abs()","db6a5cc9":"residual = pd.DataFrame(residual,columns=['Residual'])","758f609b":"residual['SalePrice']= np.exp(train['SalePrice'])","0eeb9e6c":"residual = residual.fillna(0)","da867b8e":"df = pd.concat([residual,train_x],axis=1)","ee61f285":"residual.mean()","3e7e4891":"import matplotlib.pyplot as plt\nsns.set_style('whitegrid')\nfig, ax = plt.subplots(figsize=(20, 10))\nplt.scatter(residual['SalePrice'],residual['Residual'],color='r')\nplt.xlabel('SalePrice')\nplt.ylabel('Residual')\nplt.show()","ddbd8d81":"import seaborn as sns\nsns.set(font_scale=0.9)                                         \nsns.set_style('whitegrid') \n\ngroups = df.groupby(x_names)\n\nsorted_ = df.sort_values(by='Neighborhood') \n\ng=sns.FacetGrid(df, col=\"Neighborhood\",col_wrap=5)\ng= (g.map(plt.scatter, \"SalePrice\", \"Residual\").add_legend())","216a4282":"sns.set(font_scale=0.9)                                         \nsns.set_style('whitegrid') \n\ngroups = df.groupby(x_names)\n\nsorted_ = df.sort_values(by='OverallCond') \n\ng=sns.FacetGrid(df, col=\"OverallCond\",col_wrap=3)\ng= (g.map(plt.scatter, \"SalePrice\", \"Residual\").add_legend())","579499ba":"fig, ax = plt.subplots(figsize=(20, 10)) \nplt.plot(df['SalePrice'])\nplt.plot(np.exp(pred_pandas['predict']),color='orange')\nplt.plot(np.exp(pred_glm_tr['predict']),color='deeppink')\n_ = ax.set_xlabel('Ranked Row Index')","c929da23":"fig, ax = plt.subplots(figsize=(20, 10)) \nplt.plot(df['SalePrice'],color='deeppink')\nplt.plot(np.exp(pred_pandas['predict']),color='orange')","9ad508f0":"fig, ax = plt.subplots(figsize=(20, 10)) \nplt.plot(df['SalePrice'],color='deeppink')\nplt.plot(np.exp(pred_glm_tr['predict']))","8a487522":"Label encoding some features and create a new variabel **TotalSF**","309870e1":"### PARTIAL DEPENDENCE","a937e77b":"Feature importance for the continuous variables in elastic net glm","e89d340d":"### SAVING THE MODEL\n* path = \".\/house-prices-data\/model\"\n* best_gbm_from_grid.save_mojo(path)\n* best_gbm = h2o.import_mojo(path)","8783ae3f":"## MODEL BUILDING","b3bee965":"Splitting up to see if there is a trend unless you do this for a specific neighborhood or in general there is a trend of residuals with respect to the neighborhood.\n\nWe can see for the neighborhood Edwards we have higher value of residuals as the sale price increases and same is followed for SWISU , other neighborhoods don't show a generic trend in The residuals with respect to the sales price.\n\nThese are one of the few neighborhoods where the GBM model is struggling to predict the sales price accurately","ba75d784":"## INTERPRITIBILITY","85cd6e6a":"## COMPARISON OF THE PERFORMANCE OF THE MODEL","b96a0770":"The partial dependence for the GBM show that it picks up on the values as the total square feet of the house increases more than 2000 and becomes constant after the daughter in square feet of the house is 4000 , we can also see a similar trend with the overall quality will we can see a steep jump in the main response of the sales price install quality of the house is greater than 5 and this trend continues until the quality of the house is equal to 8 and becomes constant after that. We can see that if the 1stFloorarea is greater than 500 there is a slight increase in the mean value for nothing in space and after becomes constant.","20e6ef1e":"### By using interpretable ML techniques, this notebook gives you a taste of how to imputing missing data and process data accordingly","b53e00b6":"### SHAPLEY VALUES","183a5f0f":"The output is the final content for submission","de0e5e50":"StringIO is not supported on Kaggle","39130aa8":"### RESIDUAL ANALYSIS","f2607e68":"* The above plot gives us a summary as percent values for all the variables in the training dataset.\n* For the variables with huge proportion of missing value: Alley, PoolQC, Fence and MiscFeature etc., it's proper to replace **NA** value with **None**. The **None** can also be a category, telling us something info. Say PoolQC with NA value means the house doesn't have a pool, whcih makes sense to most houses.\n* The area with NA value are imputed with the same logic","21453f1b":"The above plot shows features each contributing to push the model output from the base value (the average model output over the training dataset we passed) to the model output. Features pushing the prediction higher are shown in red and those pushing the prediction lower are in blue.\nValues pushing the model higher than the mean values:\n\n- GarageArea\n- GarageArea\n- OverallCond\n\nValues pushing the model lower than the mean values:\n- OverallQual\n- ToalSF\n- GrLivArea\n- Neighborhood\n- MSZoning\n\n\n\nThe shapley output value is based on the first row (X_test_hf[0,:]) is given below","aefb5681":"Plotting all the data with missing value","98dd7285":"It's not proper to do GLM here but we build this modle as a benchmark","4a33505d":"After the proccess above, take a look at the full data we have, there's still a feature with missing value, **LotFrontage** ","3665b5e0":"To imputing the missing value, we explore the relationship of LotFrontage with other features. It turns out it's related to LotArea, LotConfig, MSZoning and Neighborhood. We build a random forest mdoel to impute the missing value","42315f6c":"# GBM","fbdcdbfc":"The above graph gives us the correlation between the numerical variables in the model:\n\n    Positively Correlated\n    - TotalSF\n    - OverallQual\n    - GrLivArea\n    - 1stFlrSF\n    \n    Negatively Correlated\n    - BsmtQual\n    - ExterQual\n    - Kitchenqual\n    - Agehouse","32eda479":"Separate the data into ","a55e7c11":"This shows us that the mean of different categories of MSZoning, we can see there's a difference in the mean of the categories so keeping this variable in the model seems meaningful. ","e0a5c959":"Creating a new feature as the age of the house tells us that there's definately affect of age on the SalePrice as we can see a decreasing trend in Price as the age increases","f9ad6bed":"From the above GLM model we can see that the most important numerical variables for the model:\nStreet and CentralAir followed by FullBath, Fireplaces and OverallQual - Positive Impact","4e6bc48f":"We see that our model doesn't show any general trend for residuals for sales prices lesser then 300,000 and we can see that the residence tend to increase as the sales prices go up this shows that our model get strained on the majority cluster which is between  100,000\ud835\udc4e\ud835\udc5b\ud835\udc51 300,000 this shows that our model is sensitive to the residuals.","2504897f":"Add data by clicking **File** on the top left and find your data by using: \n\n* %cd ..\/input\n* %ls","c20da0f6":"## EDA","a39da106":"**Import all the libraries we need, some libraries are commented out since Kaggle doesn't support them**","a815069c":"We can see from a gradient boosting machine that the most important variable for our model is total square feet followed by overall quality followed by neighborhood excellent quality.","351ae109":"### Elastic Net GLM","93e9282f":"The next step in complexity from the penalized GLM will be a GBM model. The GBM model can fit the data using arbitrarily complex stair-step patterns, as opposed to being locked into the regression function form.\n\nThe goal is to compare the behavior of the monotonic GBM to the penalized GLM and Pearson correlation coefficients to make sure we trust and understand what the monotonic GBM is doing.","4c69280a":"We can also compare the performance of our best elastic net model and GBM model, the first glove overlaps the actual sales price and the predictions by both of our models.\n\nThe second graph shows us a comparison between the actual sales price and the predictions normal gradient boosting machine we can see that the gradient boosting machine strongly trains around the majority values and is able to capture the effect of outliers in contrast with the elastic net model where we are not able to capture many outliers.\n\nOverall our gradient boosting machine seems to perform better and looks more reliable compared to the elastic net model.\n\n","c77d671a":"Above is the summary plotoftheshapley values, this gives us the importance od the features in our model\nWe can see that the most importnant variables in our model are:\n- TotalSF\n- OverallQual\n- Neighbourhood. \n\nThis shows that our model is not dependent heavily exclusively on just one variable.  ","e749994d":"## Basic Data Info","510fba02":"Partial dependence can be interpreted as the estimated average output of a model across the values of some interesting input feature\n\nWe can see the PD for all the miportant variables in the model.","6d43959f":"Above is the summary of the best performing model based on the grid search.","4e65caea":"But if you do this can also be plotted for another important input variable that is overall quality when plotted we can see when overall quality is equal to 7 dirty GBM is struggling to accurately predict the sales price.","5152625a":"Take a quick look at the target column\n* Deviate from the normal distribution.\n* Have appreciable positive skewness.\nWe could take a log of the SalePrice to make it's distribution normal"}}