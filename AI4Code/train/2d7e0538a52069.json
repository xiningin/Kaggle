{"cell_type":{"44735aff":"code","20d6ab98":"code","28d11d48":"code","cca75b68":"code","af545148":"code","39ae68ce":"code","8a06abff":"code","6fff78f6":"code","66127f36":"code","b22cd2ff":"code","220df21c":"code","a7976813":"code","a6ed67a7":"markdown","04eefff3":"markdown"},"source":{"44735aff":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","20d6ab98":"# Loading the dataset - on kaggle notebook\n\nx_data = np.load('..\/input\/hw1-ycbs273-w2022\/x_data_273.npy')\ny_data = np.load('..\/input\/hw1-ycbs273-w2022\/y_data_273.npy')\nx_test = np.load('..\/input\/hw1-ycbs273-w2022\/x_test_273.npy')\nx_data.shape","28d11d48":"# The dataset comprises of 32000 samples\n\nimport matplotlib.pyplot as plt\nplt.imshow(x_data[100])\n\nprint(y_data[100])\n# plt.savefig('header.png', dpi=300)\n","cca75b68":"# Keras CNN layers expect the input to be float\n\nx_data3 = x_data.astype('float32')\n\n# Expanding dimensions of x_data to match (batch_size, height, width, depth\/channels)\n# Even if the image is grayscale, it requires that a non-zero value is provided as the depth\n\nx_data3 = np.expand_dims(x_data3, axis=-1)","af545148":"y_data.shape\ntype(x_data[0][0])","39ae68ce":"x_data3.shape","8a06abff":"model_cnn = keras.Sequential([\n    layers.Conv2D(filters=64, kernel_size=3, activation='relu'),\n    layers.MaxPool2D(),\n    layers.Conv2D(filters=128, kernel_size=3, activation='relu'),\n    layers.MaxPool2D(),\n     layers.Conv2D(filters=256, kernel_size=3, activation='relu'),\n    layers.MaxPool2D(),\n    layers.Flatten(),\n    layers.Dropout(0.2),\n    layers.Dense(256, activation=\"relu\"),\n    layers.Dropout(0.2),\n    layers.Dense(256, activation=\"relu\"),\n    layers.Dropout(0.2),\n    layers.Dense(10, activation=\"sigmoid\")\n])","6fff78f6":"model_cnn.compile(optimizer=\"rmsprop\",\n    loss=\"sparse_categorical_crossentropy\",\n    metrics=[\"accuracy\"])","66127f36":"model_cnn.fit(x_data3, y_data, epochs=100, batch_size=512,validation_split=0.5)\n#,validation_split=0.5","b22cd2ff":"y_data_predict=model_cnn.predict(x_data3)\ncnt=0\nfor i in range(32000):\n    ans=y_data[i]\n    P=y_data_predict[i]\n    if P[ans]<0.99:\n        cnt+=1\n        \nprint(100-cnt\/32000*100,'%')","220df21c":"x_test3 = x_test.astype('float32')\nx_test3 = np.expand_dims(x_test3, axis=-1)\n\ny_predict = model_cnn.predict(x_test3)\n","a7976813":"df_predictions = pd.DataFrame(y_predict, columns=['solution_' + str(i) for i in range(10)])\ndf_predictions.index.rename('Id', inplace=True)\n\n\ndf_predictions.to_csv('CNN64^2_dropout0.2.csv')\ndf_predictions.tail(10)","a6ed67a7":"# In case you want to train a CNN\n\nBenchmark #2","04eefff3":"# Load Data"}}