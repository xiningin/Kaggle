{"cell_type":{"f5674f6e":"code","d4b99efc":"code","c7ab448d":"code","92882ed5":"code","cf3f2146":"code","be9d46c1":"code","1894a716":"code","a527b9ba":"code","4f003768":"code","4c1c5a58":"code","19b34230":"code","7b5ad0f6":"code","f0dba6e9":"markdown","2cda7a90":"markdown","c2c1c898":"markdown","c12ef1b7":"markdown","6f35274e":"markdown"},"source":{"f5674f6e":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQrfB857hMUGw9RBMs1mJZnOfCzqug6K09YoBSknC-mPNioss28',width=400,height=400)","d4b99efc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c7ab448d":"df = pd.read_json('..\/input\/big-list-of-naughty-strings\/package.json', encoding='ISO-8859-2')  ","92882ed5":"df.head()","cf3f2146":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSZZOzHwvmuZvQe6Topk4XxCmvK9jZIALNd4mY1XDHAA3YEMuVe',width=400,height=400)","be9d46c1":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.description)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"red\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","1894a716":"naughty_file = '..\/input\/big-list-of-naughty-strings\/blns.txt'\nwith open(naughty_file) as f: # The with keyword automatically closes the file when you are done\n    print (f.read(1000))","a527b9ba":"import numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\ndef plotWordFrequency(input):\n    f = open(naughty_file,'r')\n    words = [x for y in [l.split() for l in f.readlines()] for x in y]\n    data = sorted([(w, words.count(w)) for w in set(words)], key = lambda x:x[1], reverse=True)[:40] \n    most_words = [x[0] for x in data]\n    times_used = [int(x[1]) for x in data]\n    plt.figure(figsize=(20,10))\n    plt.bar(x=sorted(most_words), height=times_used, color = 'grey', edgecolor = 'black',  width=.5)\n    plt.xticks(rotation=45, fontsize=18)\n    plt.yticks(rotation=0, fontsize=18)\n    plt.xlabel('Most Common Words:', fontsize=18)\n    plt.ylabel('Number of Occurences:', fontsize=18)\n    plt.title('Most Commonly Used Words: %s' % (naughty_file), fontsize=24)\n    plt.show()","4f003768":"naughty_file = '..\/input\/big-list-of-naughty-strings\/blns.txt'\nplotWordFrequency(naughty_file)","4c1c5a58":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQWO581xjqRJzMnYDzQGMKRl36e_0Hy3bbzlNgr81NVm3Icu521',width=400,height=400)\n   ","19b34230":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.name)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","7b5ad0f6":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQPxfGnHZgtxZcdae7NKRdHzcKoI1RyJrMucJr7uI7DWG0BQdcX',width=400,height=400)","f0dba6e9":"Image medium.com","2cda7a90":"Image abbreviations.com","c2c1c898":"Big List of Naughty Strings. The Big List of Naughty Strings is an evolving list of strings which have a high probability of causing issues when used as user-input data. This is intended for use in helping both automated and manual QA testing; useful for whenever your QA engineer walks into a bar.\n\nThe Big List of Naughty Strings is a list of strings which have a high probability of causing issues when used as user-input data. https:\/\/github.com\/minimaxir\/big-list-of-naughty-strings","c12ef1b7":"It's still Paul Mooney's scripts to read .txt","6f35274e":"Kaggle Notebook Runner: Mar\u00edlia Prata @mpwolke"}}