{"cell_type":{"09970306":"code","725a6758":"code","90d65e17":"code","1cbd2d55":"code","ea11dfa7":"code","838cbe15":"code","783bd36f":"code","a1dd4286":"code","e3647986":"code","20e47720":"code","ed0ea02c":"code","5b502108":"code","1c3159e0":"code","5df36f2d":"code","dd4229fd":"code","8debacb8":"code","43fe672c":"code","4dedafe8":"code","566af6ad":"code","4a232898":"code","c0616eb2":"code","3a42b890":"code","43563713":"code","7a473fdb":"code","001e6e18":"code","ee4406f3":"code","694e50ad":"code","d2223254":"code","d1c3a103":"code","fb4310b9":"code","2e2be227":"code","42800e40":"code","88b1718d":"code","5ceeb708":"code","829ed3a1":"code","77bffe1c":"markdown","7e7da646":"markdown","058efe54":"markdown","20ca66ea":"markdown","bcce8959":"markdown","43e9669c":"markdown","6599de6c":"markdown","28d420f8":"markdown","ace9c8e9":"markdown","e2695061":"markdown","8bd855f2":"markdown","0b344f0f":"markdown","6b7bf992":"markdown","246429db":"markdown","ebd81c8c":"markdown","d5a4d990":"markdown","4b86260e":"markdown","8830711f":"markdown","13b90b93":"markdown"},"source":{"09970306":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","725a6758":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline ","90d65e17":"data = pd.read_csv('..\/input\/trip-advisor-hotel-reviews\/tripadvisor_hotel_reviews.csv')","1cbd2d55":"data.shape","ea11dfa7":"data.describe()","838cbe15":"data.isnull().sum()","783bd36f":"data['Rating'].value_counts()","a1dd4286":"plt.hist(data['Rating'],color='aqua')\nplt.show()\n","e3647986":"data.head()","20e47720":"data['text length'] = data['Review'].apply(len)\ndata.head()","ed0ea02c":"plt.figure(figsize=(10,6))\ng = sns.FacetGrid(data,col='Rating')\ng.map(plt.hist,'text length')","5b502108":"plt.figure(figsize=(10,6))\nsns.boxplot(x='Rating',y='text length',data=data , palette='rainbow')","1c3159e0":"sns.countplot(x='Rating',data=data , palette='rainbow')","5df36f2d":"Ratings = pd.DataFrame(data.groupby('Rating').mean())","dd4229fd":"Ratings","8debacb8":"from wordcloud import WordCloud ,STOPWORDS","43fe672c":"def wordCloud_generator(data, title=None):\n    wordcloud = WordCloud(width = 800, height = 800,\n                          background_color ='black',\n                          min_font_size = 10\n                         ).generate(\" \".join(data.values))\n    # plot the WordCloud image                        \n    plt.figure(figsize = (8, 8), facecolor = None) \n    plt.imshow(wordcloud, interpolation='bilinear') \n    plt.axis(\"off\") \n    plt.tight_layout(pad = 0) \n    plt.title(title,fontsize=30)\n    plt.show() \n","4dedafe8":"wordCloud_generator(data['Review'], title=\"Most used words in reviews\")","566af6ad":"import re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer","4a232898":"data.shape","c0616eb2":"ps = PorterStemmer()\ncorpus=[]\nfor i in range(0,20491):\n    review = re.sub('[^a-zA-Z]', ' ' , data['Review'][i])\n    review = review.lower()\n    review = review.split()\n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)","3a42b890":"from sklearn.feature_extraction.text import CountVectorizer","43563713":"cv = CountVectorizer(max_features = 1000)\nX = cv.fit_transform(corpus).toarray()","7a473fdb":"y = data['Rating']","001e6e18":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2 , random_state = 666)","ee4406f3":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier , GradientBoostingClassifier\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier","694e50ad":"from sklearn.metrics import classification_report,confusion_matrix","d2223254":"lr = LogisticRegression(max_iter=10005)\nlr.fit(X_train,y_train)\ny_pred = lr.predict(X_test)","d1c3a103":"print(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","fb4310b9":"rfc = RandomForestClassifier()\nrfc.fit(X_train,y_train)\ny_pred = rfc.predict(X_test)","2e2be227":"print(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","42800e40":"lgbm = LGBMClassifier()\nlgbm.fit(X_train,y_train)\ny_pred = lgbm.predict(X_test)","88b1718d":"print(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","5ceeb708":"xgb = XGBClassifier()\nxgb.fit(X_train,y_train)\ny_pred = xgb.predict(X_test)","829ed3a1":"print(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","77bffe1c":"# Data Cleaning and Preprocessing","7e7da646":"**Random Forest Classfier**","058efe54":"#  Model Building & Evaluation","20ca66ea":"**Text Length**","bcce8959":"**These are just baseline models with accuracy just above average .\nwhat you can do to achieve better performance :**\n* 1)Perform over\/under sampling of data since the rankings are highly skewed to the right (rating = 5 has the highest value count)\n* 2)For CountVectorizer , use a large number of max features  or better study bi-gram and tri-gram and tweak the data accordingly\n* 3)Use tf-idf\n* 4)Use a different model or pipeline multiple models to get an overview and tune the models .","43e9669c":"**Count plot: Ratings**","6599de6c":"# Bag of Words Model","28d420f8":"# EDA","ace9c8e9":"**You can either choose to pipeline multiple classifiers or better try to perform tasks on different classifiers separately to get a \"wholesome\" idea of how each classifier did (xD).**","e2695061":"# What's Next ?\n","8bd855f2":"# Importing Libraries","0b344f0f":"**Histograms: text length based off of the star ratings**","6b7bf992":"**Box plot : Rating\/Text Length**","246429db":"**LGBM Classifier**","ebd81c8c":"**XgBoost Classifier**","d5a4d990":"**Logistic Regression Classifier**","4b86260e":"# Upvote my work.\n**If you somehow came across this notebook and find it useful , please do upvote it or better drop a comment , would love to get in touch with y'all beautiful people and talk  more about what data can do for us**\n\n**P.s - Haha i know my documentation sucks xD**","8830711f":"**Importing Relevant Libraries**","13b90b93":"# Data Split"}}