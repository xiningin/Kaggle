{"cell_type":{"eb3c62c6":"code","de142dbf":"code","07065be2":"code","2b78b7e2":"code","10fe7aa2":"code","decd709f":"code","4dce46e1":"code","9d7b38c6":"code","b89991fe":"code","7ad7e3a6":"code","da7747c9":"code","d3c02207":"markdown","8620124c":"markdown","8396fd84":"markdown","3758694c":"markdown","3943243a":"markdown","310b5d4a":"markdown","ce2664f2":"markdown","cc9c1fd5":"markdown","9ce2970d":"markdown","a4446b22":"markdown"},"source":{"eb3c62c6":"# Import Statements\n\nimport gc\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras import Sequential, layers\n\nimport matplotlib.pyplot as plt","de142dbf":"# Load data\ntrain_data = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\n\nprint(train_data.shape, test_data.shape) # data shape","07065be2":"# Confirm the max value for a pixel in the dataset is 255\n\nprint(train_data.max(axis=1).max())\nprint(test_data.max(axis=1).max())","2b78b7e2":"# drop label column and normalize the data\n\nX = train_data.drop('label', axis=1).to_numpy().reshape(-1, 28, 28) \/ 255.0\nlabels = train_data['label'].to_numpy()\n\nX_test = test_data.to_numpy().reshape(-1, 28, 28) \/ 255.0\n\nY = pd.get_dummies(labels)","10fe7aa2":"# Fix the seed for observe the model always over the same data\nnp.random.seed(0)\nX_train, X_val, Y_train, Y_val = train_test_split(X, Y, test_size=0.25)","decd709f":"# Hyperparameters\n\nbatch_size = 64\nlr = 0.01\nepochs = 25\n\noptimizer = 'adam'\nloss = 'categorical_crossentropy'\nmetrics = 'accuracy'","4dce46e1":"cnn_model = Sequential()\n\ncnn_model.add(layers.Conv1D(64, 3, padding='same', input_shape=(28,28), activation='relu'))\ncnn_model.add(layers.MaxPooling1D(pool_size=2, strides=2, padding='valid'))\ncnn_model.add(layers.Conv1D(128, 3, padding='valid', activation='relu'))\ncnn_model.add(layers.MaxPooling1D(pool_size=2, strides=2, padding='same'))\ncnn_model.add(layers.Flatten())\ncnn_model.add(layers.Dropout(rate=0.05))\ncnn_model.add(layers.Dense(256, activation='relu'))\ncnn_model.add(layers.Dense(10, activation='softmax'))\n\n# Check the architeture of the model and parameters\ncnn_model.summary()","9d7b38c6":"cnn_model.compile(optimizer=optimizer,\n                 loss=loss,\n                 metrics=[metrics])\n# learning rate\ncnn_model.optimizer.lr = lr\n\ncnn_model.fit(X_train, Y_train, batch_size=batch_size, epochs=epochs, verbose=1, validation_data=(X_val, Y_val))","b89991fe":"# Get the history of trainning and plot the graphs\n\ndf_history = pd.DataFrame(cnn_model.history.history)\ndf_history.loc[0:, ['loss', 'val_loss']].plot()\ndf_history.loc[0:, ['accuracy', 'val_accuracy']].plot()","7ad7e3a6":"predictions = cnn_model.predict(X_test)\n# As the probability for each number is given, these probabilities have to be converted\nresults = predictions.argmax(axis=-1)\n\n# Delete some Unused variables to free memory\ndel df_history\ndel cnn_model\ngc.collect()\n\ntests = pd.DataFrame({'ImageID': list(range(1,28001)), 'label': results})\ntests.to_csv(\".\/output.csv\", index = False)","da7747c9":"tests","d3c02207":"## Model training","8620124c":"Creation of the model and choosing of hyperparameters for tunning the model","8396fd84":"## Data Preparing","3758694c":"The training and testing data are composed by 784 columns of pixel values, where each pixel has a range of 0-255. Although it is possible to use this values,normalizing these values between 0 and 1 brings more agility in training, since the weights will adapt more quickly. Furthermore, the data is organized in a single vector of 784 columns. In this way, it will be resized to a 28x28 pixels image, because a 1D CNN model will be trained on this data.","3943243a":"## Model performance","310b5d4a":"## Basic imports","ce2664f2":"The performance of the model can be seen in its loss and metrics obtained to accelerate converging","cc9c1fd5":"Part of the trainning data will be used as validation data to check the learning from the data ","9ce2970d":"## Model preparation","a4446b22":"## Submission"}}