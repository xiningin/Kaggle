{"cell_type":{"a9bb065e":"code","175dc425":"code","936ffdb0":"code","e4ca4464":"code","9be88dda":"code","f725dd3c":"code","1ddf521a":"code","27a6e520":"code","7d9613e7":"code","ee807cfd":"code","bb579fc6":"code","983740ee":"code","e86c4e19":"code","6d3f5bbd":"code","6426c9bb":"code","26a5f22e":"code","e8bc7910":"code","e961093d":"code","d1636efb":"code","c4b23234":"code","ff927470":"code","5f77d1f7":"code","7396f960":"code","d518c774":"code","4f416210":"code","ed8b84cf":"code","df2a66ec":"code","c3887fa6":"code","4e26d17e":"code","447ae0b8":"code","228b82ba":"code","489ec04b":"markdown"},"source":{"a9bb065e":"import seaborn as sns\nimport matplotlib.pyplot as plt","175dc425":"df = pd.read_csv('..\/input\/bitcoin-price-prediction\/bitcoin_price_Training - Training.csv')\ndf","936ffdb0":"df.info()","e4ca4464":"df.Date = pd.to_datetime(df[\"Date\"])\ndf.Date.dtype","9be88dda":"print('Date starts: ',df.Date.min())\nprint('Date ends: ',df.Date.max())","f725dd3c":"df.describe()","1ddf521a":"sns.lineplot(df.Date,df.Open,color='#FF7433')","27a6e520":"sns.lineplot(df.Date,df.Close,color='#FFC300')","7d9613e7":"sns.lineplot(df.Date,df.Low,color='#3371FF')","ee807cfd":"sns.lineplot(df.Date,df.High,color='#FF6833')","bb579fc6":"y = df[['Date','Open']]","983740ee":"y = y.set_index('Date')","e86c4e19":"sns.distplot(y)\nplt.axvline(y.Open.mean())","6d3f5bbd":"# time series\n\nimport statsmodels.api as sm\ndecomposition = sm.tsa.seasonal_decompose(y,model='multiplicative')\ndecomposition.plot()","6426c9bb":"from statsmodels.graphics.tsaplots import plot_acf,plot_pacf\n\nplot_acf(y,lags=30)\nplot_pacf(y,lags=30)","26a5f22e":"# plot rolling means and standard deviation\n\nfrom statsmodels.tsa.stattools import adfuller\n\ndef test_stationarity(y):\n  rol_mean = y.rolling(12).mean()\n  rol_std = y.rolling(12).std()\n\n  plt.subplots(figsize=(15,8))\n  plt.plot(rol_mean,color='red',label='rolling_mean')\n  plt.plot(rol_std,color='black',label='rolling_std')\n  plt.plot(y,color='blue',label='original')\n  plt.legend(loc='best')\n  plt.show()\n\n  df_test = adfuller(y.Open,autolag='AIC')\n  df_output = pd.Series(df_test[0:4],index=['test stats','p-value','#lags','no. of oservations used'])\n  print(df_output)","e8bc7910":"test_stationarity(y)","e961093d":"# it is already stationary data\n# but it was not then we have to perform some processing, anyways we are applying it here too.\n\ny_log = np.log(y)\n\ns_data = y_log - y_log.shift(1)\ns_data = s_data.dropna()\ntest_stationarity(s_data)","d1636efb":"#create training data\n\ntrain_prophet = pd.DataFrame()\ntrain_prophet['ds'] = y.index\ntrain_prophet['y'] = y.Open.values","c4b23234":"# create model to predict the future openings\n\nfrom fbprophet import Prophet\n\nmodel = Prophet().fit(train_prophet)\n\nfuture = model.make_future_dataframe(periods=90)","ff927470":"forecast = model.predict(future)\nmodel.plot(forecast)\nmodel.plot_components(forecast)","5f77d1f7":"#compare the predicted with original dataset\n\nmodel.plot(forecast)\nplt.plot(y,label='original',color='green',linewidth=0.8)\nplt.legend(loc='best')\nplt.show()","7396f960":"forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head()","d518c774":"y = df[['Date','High']]\ny = y.set_index('Date')\n\n#create training data\n\ntrain_prophet = pd.DataFrame()\ntrain_prophet['ds'] = y.index\ntrain_prophet['y'] = y.High.values\n\nmodel = Prophet().fit(train_prophet)\n\nfuture = model.make_future_dataframe(periods=90)\n\nforecast = model.predict(future)\nmodel.plot_components(forecast)\n\n#compare the predicted with original dataset\n\nmodel.plot(forecast)\nplt.plot(y,label='original',color='green',linewidth=0.8)\nplt.legend(loc='best')\nplt.show()","4f416210":"forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head()","ed8b84cf":"y = df[['Date','Close']]\ny = y.set_index('Date')\n\n#create training data\n\ntrain_prophet = pd.DataFrame()\ntrain_prophet['ds'] = y.index\ntrain_prophet['y'] = y.Close.values\n\nmodel = Prophet().fit(train_prophet)\n\nfuture = model.make_future_dataframe(periods=90)\n\nforecast = model.predict(future)\nmodel.plot_components(forecast)\n\n#compare the predicted with original dataset\n\nmodel.plot(forecast)\nplt.plot(y,label='original',color='green',linewidth=0.8)\nplt.legend(loc='best')\nplt.show()","df2a66ec":"forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head()","c3887fa6":"y = df[['Date','Low']]\ny = y.set_index('Date')\n\n#create training data\n\ntrain_prophet = pd.DataFrame()\ntrain_prophet['ds'] = y.index\ntrain_prophet['y'] = y.Low.values\n\nmodel = Prophet().fit(train_prophet)\n\nfuture = model.make_future_dataframe(periods=90)\n\nforecast = model.predict(future)\nmodel.plot_components(forecast)\n\n#compare the predicted with original dataset\n\nmodel.plot(forecast)\nplt.plot(y,label='original',color='green',linewidth=0.8)\nplt.legend(loc='best')\nplt.show()","4e26d17e":"forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head()","447ae0b8":"#interactive graph s\nfrom fbprophet.plot import plot_plotly, plot_components_plotly\nplot_components_plotly(model,forecast)","228b82ba":"plot_plotly(model, forecast)","489ec04b":"We are just going to perform stationarity, decomposition,and dickey-fuller test on Open only...generally if one feature is stationary othes too."}}