{"cell_type":{"98ddde9f":"code","61cc2103":"code","a51f1bf0":"code","3f64c464":"code","cc869647":"code","b47d3b57":"code","5e8df284":"code","2893e479":"code","abe6e5ea":"code","0ee66c3b":"code","51bf22b0":"code","9e73f051":"code","d451c7ec":"code","dc0b21df":"code","672ec1be":"code","f54347a4":"code","b71e3712":"code","559b3421":"code","3ba00274":"code","00864070":"code","9f02b681":"code","2445980e":"code","c2393859":"code","3783abc1":"code","5a09e536":"code","6cf73b84":"code","552e2a60":"code","dff5366e":"code","e8864213":"code","04b2af57":"code","23ec7cbc":"code","c3967984":"code","23ffe822":"markdown","8da73686":"markdown","cf3e7703":"markdown","bac6b996":"markdown","6e3b6485":"markdown","168375aa":"markdown","8b5eb130":"markdown","5ff81e48":"markdown","3ba9fa89":"markdown","a85c17ca":"markdown"},"source":{"98ddde9f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","61cc2103":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/train.csv')","a51f1bf0":"train.head(10)","3f64c464":"sns.countplot(train['Survived'])","cc869647":"sns.countplot(train['Sex'])","b47d3b57":"sns.displot(train['Age'])","5e8df284":"sns.displot(train['Fare'])","2893e479":"class_fare = train.pivot_table(index='Pclass', values='Fare', aggfunc=np.sum)\nclass_fare.plot(kind='bar')\nplt.xlabel('Pclass')\nplt.ylabel('Total Fare')\nplt.xticks(rotation=0)\nplt.show()","abe6e5ea":"class_fare = train.pivot_table(index='Pclass', values='Fare')\nclass_fare.plot(kind='bar')\nplt.xlabel('Pclass')\nplt.ylabel('Avg. Fare')\nplt.xticks(rotation=0)\nplt.show()","0ee66c3b":"sns.barplot(data=train, x='Pclass', y='Fare', hue='Survived')","51bf22b0":"sns.barplot(data=train, x='Survived', y='Fare', hue='Pclass')","9e73f051":"train_len = len(train)\n# combine two dataframes\ndf = pd.concat([train, test], axis=0)\ndf = df.reset_index(drop=True)\ndf.head()","d451c7ec":"## find the null values\ndf.isnull().sum()","dc0b21df":"# drop or delete the column\ndf = df.drop(columns=['Cabin'], axis=1)","672ec1be":"df['Age'].mean()\n","f54347a4":"# fill missing values using mean of the numerical column\ndf['Age'] = df['Age'].fillna(df['Age'].mean())\ndf['Fare'] = df['Fare'].fillna(df['Fare'].mean())","b71e3712":"df['Embarked'].mode()[0]\n\n# fill missing values using mode of the categorical column\ndf['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])\n","559b3421":"sns.displot(df['Fare'])","3ba00274":"df['Fare'] = np.log(df['Fare']+1)","00864070":"sns.displot(df['Fare'])","9f02b681":"corr = df.corr()\nplt.figure(figsize=(15, 9))\nsns.heatmap(corr, annot=True, cmap='coolwarm')","2445980e":"df.head()","c2393859":"df = df.drop(columns=['Name', 'Ticket'], axis=1)\ndf.head()","3783abc1":"from sklearn.preprocessing import LabelEncoder","5a09e536":"cols=['Sex', 'Embarked']\nle=LabelEncoder()\n\nfor col in cols:\n    df[col]=le.fit_transform(df[col])\ndf.head()","6cf73b84":"train = df.iloc[:train_len, :]\ntest =df.iloc[train_len:, :]","552e2a60":"train.head()","dff5366e":"test.head()","e8864213":"# input split\nX = train.drop(columns=['PassengerId', 'Survived'], axis=1)\ny = train['Survived']","04b2af57":"X.head()","23ec7cbc":"from sklearn.model_selection import train_test_split, cross_val_score\n# classify column\ndef classify(model):\n    x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n    model.fit(x_train, y_train)\n    print('Accuracy:', model.score(x_test, y_test))\n    \n    score = cross_val_score(model, X, y, cv=5)\n    print('CV Score:', np.mean(score))","c3967984":"from lightgbm import LGBMClassifier\nmodel = LGBMClassifier()\nclassify(model)\n\nmodel = LGBMClassifier()\nmodel.fit(X,y)","23ffe822":"# **Label Encoding**","8da73686":"# **Exploratory Data Analysis**","cf3e7703":"# **Model Training**","bac6b996":"*We have 80% Accuracy*","6e3b6485":"# **Train-Test Split**","168375aa":"# **Data Preprocessing**","8b5eb130":"# **Loading the Dataset**","5ff81e48":"# **Log transformation for uniform data distribution**","3ba9fa89":"# **Correlation Matrix**","a85c17ca":"# **Import Modules**"}}