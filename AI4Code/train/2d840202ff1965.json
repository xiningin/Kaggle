{"cell_type":{"43baa38e":"code","2b1b702c":"code","c4e9a91d":"code","fa828cd4":"code","c0e78707":"code","a93bc71c":"code","75128be3":"code","7b87de7a":"code","e344b792":"code","ae143cae":"code","8c19b23a":"code","56ae7833":"code","b09edd42":"code","f0c9efb0":"code","a86f3ab9":"code","63b024ca":"code","8794933d":"code","0e565985":"code","ab14e01f":"code","ec4a7445":"code","59d4e0f5":"code","d1f83440":"code","e678d37d":"code","122d04cf":"code","6a8677e7":"code","e2b60024":"code","de50b5d6":"code","fec9c430":"code","2d4fa2fe":"code","0b679481":"code","12ed048a":"code","df61451d":"code","03fa8979":"code","0030f08e":"code","2e8df2f0":"code","6ef0ca61":"code","27769bf2":"code","e8124e66":"code","50750e50":"code","22f65e7c":"code","feaf9fd8":"code","8140a8d9":"code","29c35595":"code","4df6739e":"code","6bcea397":"markdown","68f1e04a":"markdown","c70ab7c8":"markdown","4f6e89f9":"markdown","ada55229":"markdown","ded2b135":"markdown","3abdf518":"markdown","5cae7fae":"markdown","b36fd10f":"markdown","ecfd2ed7":"markdown","9fa295f6":"markdown","edc3b778":"markdown","e8d5e202":"markdown","ee6ada25":"markdown","f0d69bba":"markdown","fd00c2dc":"markdown","32847900":"markdown","56188644":"markdown"},"source":{"43baa38e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b1b702c":"import pandas as pd\nimport numpy as np\nimport operator \nimport re","c4e9a91d":"train = pd.read_csv(\"\/kaggle\/input\/train-data\/Train_BNBR.csv\") #.drop('label', axis=1)\ntest = pd.read_csv(\"\/kaggle\/input\/health-data\/Test_health.csv\")\nlength = len(train)\ndf = pd.concat([train ,test])\n\nprint(\"Number of texts: \", df.shape[0])","fa828cd4":"train_data = df[:length]\ntest_data = df[length:]","c0e78707":"def load_embed(file):\n    def get_coefs(word,*arr): \n        return word, np.asarray(arr, dtype='float32')\n    \n    if file == '\/kaggle\/input\/glove6b\/glove.6B.300d.txt':\n        embeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(file) if len(o)>100)\n    else:\n        embeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(file, encoding='latin'))\n        \n    return embeddings_index","a93bc71c":"glove = '\/kaggle\/input\/glove6b\/glove.6B.300d.txt'\nparagram =  '\/kaggle\/input\/paragram-emb\/paragram_300_sl999\/paragram_300_sl999.txt'\nwiki_news = '\/kaggle\/input\/fastext-emb\/crawl-300d-2M.vec'\n#'\/kaggle\/input\/wikinews\/wiki-news-300d-1M1.vec'","75128be3":"print(\"Extracting GloVe embedding\")\nembed_glove = load_embed(glove)\nprint(\"Extracting Paragram embedding\")\nembed_paragram = load_embed(paragram)\nprint(\"Extracting FastText embedding\")\nembed_fasttext = load_embed(wiki_news)","7b87de7a":"def build_vocab(texts):\n    sentences = texts.apply(lambda x: x.split()).values\n    vocab = {}\n    for sentence in sentences:\n        for word in sentence:\n            try:\n                vocab[word] += 1\n            except KeyError:\n                vocab[word] = 1\n    return vocab","e344b792":"def check_coverage(vocab, embeddings_index):\n    known_words = {}\n    unknown_words = {}\n    nb_known_words = 0\n    nb_unknown_words = 0\n    for word in vocab.keys():\n        try:\n            known_words[word] = embeddings_index[word]\n            nb_known_words += vocab[word]\n        except:\n            unknown_words[word] = vocab[word]\n            nb_unknown_words += vocab[word]\n            pass\n\n    print('Found embeddings for {:.2%} of vocab'.format(len(known_words) \/ len(vocab)))\n    print('Found embeddings for  {:.2%} of all text'.format(nb_known_words \/ (nb_known_words + nb_unknown_words)))\n    unknown_words = sorted(unknown_words.items(), key=operator.itemgetter(1))[::-1]\n\n    return unknown_words","ae143cae":"vocab = build_vocab(df['text'])","8c19b23a":"print(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)\nprint(\"Paragram : \")\noov_paragram = check_coverage(vocab, embed_paragram)\nprint(\"FastText : \")\noov_fasttext = check_coverage(vocab, embed_fasttext)","56ae7833":"df['lowered_text'] = df['text'].apply(lambda x: x.lower())","b09edd42":"vocab_low = build_vocab(df['lowered_text'])","f0c9efb0":"print(\"Glove : \")\noov_glove = check_coverage(vocab_low, embed_glove)\nprint(\"Paragram : \")\noov_paragram = check_coverage(vocab_low, embed_paragram)\nprint(\"FastText : \")\noov_fasttext = check_coverage(vocab_low, embed_fasttext)","a86f3ab9":"def add_lower(embedding, vocab):\n    count = 0\n    for word in vocab:\n        if word in embedding and word.lower() not in embedding:  \n            embedding[word.lower()] = embedding[word]\n            count += 1\n    print(f\"Added {count} words to embedding\")","63b024ca":"print(\"Glove : \")\nadd_lower(embed_glove, vocab)\nprint(\"Paragram : \")\nadd_lower(embed_paragram, vocab)\nprint(\"FastText : \")\nadd_lower(embed_fasttext, vocab)","8794933d":"print(\"Glove : \")\noov_glove = check_coverage(vocab_low, embed_glove)\nprint(\"Paragram : \")\noov_paragram = check_coverage(vocab_low, embed_paragram)\nprint(\"FastText : \")\noov_fasttext = check_coverage(vocab_low, embed_fasttext)","0e565985":"oov_glove[:100]","ab14e01f":"contraction_mapping = {\"don't\":\"do not\",\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\" }","ec4a7445":"def known_contractions(embed):\n    known = []\n    for contract in contraction_mapping:\n        if contract in embed:\n            known.append(contract)\n    return known","59d4e0f5":"print(\"- Known Contractions -\")\nprint(\"   Glove :\")\nprint(known_contractions(embed_glove))\nprint(\"   Paragram :\")\nprint(known_contractions(embed_paragram))\nprint(\"   FastText :\")\nprint(known_contractions(embed_fasttext))","d1f83440":"def clean_contractions(text, mapping):\n    specials = [\"\u2019\", \"\u2018\", \"\u00b4\", \"`\"]\n    for s in specials:\n        text = text.replace(s, \"'\")\n    text = ' '.join([mapping[t] if t in mapping else t for t in text.split(\" \")])\n    return text","e678d37d":"df['treated_text'] = df['lowered_text'].apply(lambda x: clean_contractions(x, contraction_mapping))","122d04cf":"vocab = build_vocab(df['treated_text'])\nprint(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)\nprint(\"Paragram : \")\noov_paragram = check_coverage(vocab, embed_paragram)\nprint(\"FastText : \")\noov_fasttext = check_coverage(vocab, embed_fasttext)","6a8677e7":"punct = \"\/-'?!.,#$%\\'()*+-\/:;<=>@[\\\\]^_`{|}~\" + '\"\"\u201c\u201d\u2019' + '\u221e\u03b8\u00f7\u03b1\u2022\u00e0\u2212\u03b2\u2205\u00b3\u03c0\u2018\u20b9\u00b4\u00b0\u00a3\u20ac\\\u00d7\u2122\u221a\u00b2\u2014\u2013&\u00e2\u00a6\u2122'    ","e2b60024":"def unknown_punct(embed, punct):\n    unknown = ''\n    for p in punct:\n        if p not in embed:\n            unknown += p\n            unknown += ' '\n    return unknown","de50b5d6":"print(\"Glove :\")\nprint(unknown_punct(embed_glove, punct))\nprint(\"Paragram :\")\nprint(unknown_punct(embed_paragram, punct))\nprint(\"FastText :\")\nprint(unknown_punct(embed_fasttext, punct))","fec9c430":"punct_mapping = {\"\u2018\": \"'\", \"\u20b9\": \"e\", \"\u00b4\": \"'\", \"\u00b0\": \"\", \"\u20ac\": \"e\", \"\u2122\": \"tm\", \"\u221a\": \" sqrt \", \"\u00d7\": \"x\", \"\u00b2\": \"2\", \"\u2014\": \"-\", \"\u2013\": \"-\", \"\u2019\": \"'\", \"_\": \"-\", \"`\": \"'\", '\u201c': '\"', '\u201d': '\"', '\u201c': '\"', \"\u00a3\": \"e\", '\u221e': 'infinity', '\u03b8': 'theta', '\u00f7': '\/', '\u03b1': 'alpha', '\u2022': '.', '\u00e0': 'a', '\u2212': '-', '\u03b2': 'beta', '\u2205': '', '\u00b3': '3', '\u03c0': 'pi'}","2d4fa2fe":"def clean_special_chars(text, punct, mapping):\n    for p in mapping:\n        text = text.replace(p, mapping[p])\n    \n    for p in punct:\n        text = text.replace(p, f' {p} ')\n    \n    specials = {'\\u200b': ' ', '\u2026': ' ... ', '\\ufeff': '', '\u0915\u0930\u0928\u093e': '', '\u0939\u0948': ''}  # Other special characters that I have to deal with in last\n    for s in specials:\n        text = text.replace(s, specials[s])\n    \n    return text","0b679481":"df['treated_text'] = df['treated_text'].apply(lambda x: clean_special_chars(x, punct, punct_mapping))","12ed048a":"vocab = build_vocab(df['treated_text'])\nprint(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)\nprint(\"Paragram : \")\noov_paragram = check_coverage(vocab, embed_paragram)\nprint(\"FastText : \")\noov_fasttext = check_coverage(vocab, embed_fasttext)","df61451d":"oov_fasttext[:900]","03fa8979":"mispell_dict = {'dieam': 'die',\n                'stresseed':'stressed',\n                'lowi': 'low i',\n                'havei':'have i',\n                'worthlesness':'worthlessness',\n                'nightsi':'nights i',\n                'downrecovering':'down recovering',\n                'deferrin':'deferring',\n                'helplessi':'helpless i',\n                'foind':'found',\n                'lowt':'low',\n                'helplessstill':'helpless still',\n                'birthnow':'birth now',\n                'patners':'partners',\n                'motivationsuicidal':'motivation suicidal',\n                'includingmy':'including my',\n                'hopelessnesss':'hopelessness',\n                'desserted':'deserted',\n                'dillusioned':'disllusioned',\n                'issolated':'isolated',\n                'undestands':'understands',\n                'oldself':'old self',\n                'ponographic':'pornographic',\n                'unworthyness':'unworthiness',\n                'selfworth':'self worth',\n                'worldm':'world',\n                'incidencesof':'incidences of',\n                'weathernow': 'weather now',\n                'benefitto':'benefit to',\n                'frustratedi':'frustrated i',\n                'worhtless':'worthless',\n                'doto':'do to',\n                'messnow':'mess now',\n                'negativecurrently':'negative currently',\n                'schoolfee':'school fee',\n                'existd':'existed',\n                'lonelycurrently':'lonely currently',\n                'diserted':'deserted',\n                'schoolfees':'school fees',\n                'drinnking':'drinking',\n                'alccohol':'alcohol',\n                'addidcted':'addicted',\n                'depressioni':'depression i',\n                'childlish':'childish',\n                'lonelyi':'lonely i',\n                'stresssed':'stressed',\n                'deteroriating':'deteriorating',\n                'liferight':'life right',\n                'thingof':'thing of',\n                'whren':'when',\n                'everythingi':'everything i',\n                'insomia':'insomnia',\n                'dizzines':'dizziness',\n                'hopelessfor':'hopeless for',\n                'confusednow':'confused now',\n                'isolatednow':'isolated now',\n                'lonelynow':'lonely now',\n                'negletion':'neglection',\n                'sucidal':'suicidal',\n                'psycologically':'psychologically',\n                'avoiod':'avoid',\n                'cornerfeeling':'corner feeling',\n                'hatrednow':'hatred now',\n                'mediataton':'medication',\n                'frorge':'forget',\n                'drugsnow':'drugs now'}","0030f08e":"def correct_spelling(x, dic):\n    for word in dic.keys():\n        x = x.replace(word, dic[word])\n    return x","2e8df2f0":"df['treated_text'] = df['treated_text'].apply(lambda x: correct_spelling(x, mispell_dict))","6ef0ca61":"vocab = build_vocab(df['treated_text'])\nprint(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)\nprint(\"Paragram : \")\noov_paragram = check_coverage(vocab, embed_paragram)\nprint(\"FastText : \")\noov_fasttext = check_coverage(vocab, embed_fasttext)","27769bf2":"df.shape","e8124e66":"df.head()","50750e50":"train_data = df[:length]\ntest_data = df[length:]","22f65e7c":"train_data.head()","feaf9fd8":"test_data.head()","8140a8d9":"train_data = train_data.drop(['text', 'lowered_text'], axis =1)\ntrain_data.head()","29c35595":"test_data = test_data.drop(['label','text','lowered_text'], axis =1)\ntest_data.head()","4df6739e":"train_data.to_csv(\"cleaned(925)_train.csv\", index = False)\ntest_data.to_csv(\"cleaned_(925)test.csv\", index =False)","6bcea397":"### What's still missing ? \n- Unknown words\n- Acronyms\n- Spelling mistakes","68f1e04a":"## Now, let us deal with special characters","c70ab7c8":"#### First faults appearing are : \n- Contractions \n- Words with punctuation in them\n\n> Let us correct that.","4f6e89f9":"# Let's now save the Preprocessed datasets","ada55229":" #### Paragram seems to have a significantly lower coverage. \n>That's because it does not understand upper letters, let us lower our texts :","ded2b135":"## Starting point","3abdf518":"## Contractions","5cae7fae":"## Vocabulary and Coverage functions\n> Again, check Dieter's work if you haven't, those are his.","b36fd10f":"#### FastText seems to have a better knowledge of special characters \n> We use a map to replace unknown characters with known ones.\n\n> We make sure there are spaces between words and punctuation\n","ecfd2ed7":"# Improve your Score with some Text Preprocessing\n\n## Updated version : \n > ###  https:\/\/www.kaggle.com\/theoviel\/improve-your-score-with-text-preprocessing-v2\n\n\n\n\nThis kernel is an improved version of @Dieter's work.\n> https:\/\/www.kaggle.com\/christofhenkel\/how-to-preprocessing-when-using-embeddings\n\n# Baically,the above preprocessing is now implemented and use for ZINDI platform (just like Kaggle) on a  competition named \"Basic Needs Basic Rights Kenya - Tech4MentalHealth\". \n\n**A big thanks to Dieter's work once again for this wonderful text preprocessing techniques!!!**\n\n**Aim and Objectives**: Is to classify text from university students in Kenya towards a mental health chatbot.\n\n\nIt is the preprocessing I use for my current LB score, and it has helped improving it by a bit. Feel free to use it as well, but please upvote if you do. \n\nThis is also how I caught a glimpse of spelling mistakes in the database.\n\n#### Any feedback is appreciated ! ","9fa295f6":"#### For example, here are some mistakes and their frequency\n- lowi : 2 times\n- havei : 2 times\n- psycologically : 1 time and so on like that.","edc3b778":"## Loading data","e8d5e202":"#### FastText does not understand contractions\n> We use the map to replace them","ee6ada25":"## Loading embeddings","f0d69bba":"#### Better, but we lost a bit of information on the other embeddings.\n> Therer are words known that are known with upper letters and unknown without. Let us fix that :\n- word.lower() takes the embedding of word if word.lower() doesn't have an embedding","fd00c2dc":"### What's wrong ?","32847900":"# Wow....All embeddings now near 100% accuracy\n\n# Nice one !","56188644":"## We can correct manually most frequent mispells"}}