{"cell_type":{"cc218720":"code","88b51cbd":"code","4fa81ba8":"code","5d3a1f16":"code","32ac0b5b":"code","eeabb866":"code","1eb1f0d9":"code","6c1fd6cb":"code","f2f64235":"code","f45ffb56":"code","b59b8ad6":"code","8a457c5d":"code","f168e081":"code","1132d946":"code","d02ebce0":"code","1693e9e5":"code","1aa549a9":"code","7dcbb18f":"code","f8756ae5":"code","e4670b1e":"code","d15ca50a":"code","50b3d626":"code","addc2603":"code","30584128":"code","91e346de":"code","b691d6ad":"code","88933f4a":"code","fc7dbbd8":"code","9c74979f":"code","d7ad9833":"code","d59f3d30":"code","c70b84e7":"code","52f1b52d":"code","c5e4775c":"code","5168b78f":"code","55678a87":"code","527891ac":"code","bf91777a":"code","16ca6791":"code","dc66955d":"code","d390e785":"code","63590036":"code","6067d40c":"code","ae8a0dea":"code","b26fc087":"code","0179a12f":"code","c2e7b8a4":"code","e2f79b42":"code","298887cd":"code","75b91e07":"code","291a99c1":"code","9522b16b":"markdown","cdcb2ac0":"markdown","853b5eee":"markdown"},"source":{"cc218720":"pip install pygal","88b51cbd":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt \nimport plotly.express as px\nimport pygal as py\nimport squarify as sq\nimport missingno as msg\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","4fa81ba8":"from IPython.display import Image\nimg=Image(filename='..\/input\/logooftesla\/tesla-logo.jpg', width=800, height=200)\nimg","5d3a1f16":"from PIL import Image, ImageDraw, ImageFont\n \n# create Image object with the input image\n \nimage = Image.open('..\/input\/logooftesla\/tesla-logo.jpg')\n \n# initialise the drawing context with\n# the image object as background\n \ndraw = ImageDraw.Draw(image)\n\nfont1 = ImageFont.truetype('..\/input\/ttffile\/AlfaSlabOne-Regular.ttf', size=9)\nfont2 = ImageFont.truetype('..\/input\/ttffile\/AlfaSlabOne-Regular.ttf', size=15)\n\n# starting position of the message\n \n(x, y) = (0, 300)\nmessage = \"Electric vehicle maker Tesla surpassed Facebook has market capitalization of $763 billion market cap\"\ncolor = 'rgb(100, 60, 87)'\n \n# draw the message on the background\n \ndraw.text((x, y), message, fill=color, font=font1)\n(x, y) = (210, 0)\nname = \"Tesla's fact\"\ncolor = 'rgb(12,56,67)'\ndraw.text((x, y), name, fill=color, font=font2)\n \n# save the edited image\n \nimage","32ac0b5b":"ts=pd.read_csv(\"..\/input\/tesla-stocks-history\/TSLA.csv\",engine='python')","eeabb866":"ts","1eb1f0d9":"ts.dtypes","6c1fd6cb":"ts.shape","f2f64235":"ts.describe().T","f45ffb56":"ts.info()","b59b8ad6":"fig, ax = plt.subplots(figsize=(20,8))\nax.bar(ts['Date'], ts['Volume'], alpha=0.9,color=\"magenta\")\nax.xaxis.set_major_locator(plt.MaxNLocator(10))\n#ax.set_yscale('log')\nax.set_xlabel('Date', fontsize='11')\nax.set_ylabel('Volume', fontsize='11')\nplt.title('Volume Trends', fontsize='20')\nplt.grid()\nplt.show()","8a457c5d":"ts[\"Volume\"].plot();plt.show()\nts[\"Adj Close\"].plot(color=\"crimson\");plt.show()","f168e081":"ts[\"Open\"].plot.density();plt.show()\nts[\"High\"].plot.hist(bins=30)\nplt.show()","1132d946":"plt.figure(figsize=(15,10))\nts.iloc[:,1:5].plot();plt.show()","d02ebce0":"ts.iloc[:,1:5].plot(kind=\"box\");plt.show()","1693e9e5":"day_events=ts.columns.tolist()[1:5]\nsns.set_palette(\"rainbow\")\nsns.set_theme(\"paper\")\nsns.set_style(\"whitegrid\")\n#Lowest recorded dates of an event(top 10 days)\nfor i in day_events:\n    sns.barplot(x=\"Date\",y=i,data=ts.sort_values(by=i,ascending=True).head(10))\n    plt.xticks(rotation=90)\n    plt.show()","1aa549a9":"#Highest recorded dates of an event(top 10 days)\nsns.set_palette(\"rainbow_r\")\nsns.set_theme(\"notebook\")\nsns.set_style(\"darkgrid\")\nfor i in day_events:\n    sns.barplot(x=\"Date\",y=i,data=ts.sort_values(by=i,ascending=False).head(10))\n    plt.xticks(rotation=90)\n    plt.show()","7dcbb18f":"ts['Market Cap'] = ts['Open']*ts['Volume']\nsns.set_style(\"white\")\nsns.set_theme(\"notebook\")\nfig, ax = plt.subplots(figsize=(20,10))\nax.plot(ts['Date'], ts['Market Cap'], color='green')\nax.xaxis.set_major_locator(plt.MaxNLocator(20))\nax.set_xlabel('Date', fontsize='11')\nax.set_ylabel('Market Cap', fontsize='11')\nplt.title('Market Cap')\nplt.grid()\nplt.show()","f8756ae5":"line_chart = py.Line()\nline_chart.title = 'Tesla history since 2010 to 2021'\nline_chart.add(ts.columns.tolist()[1:5][0], ts.sort_values(by=i,ascending=True).head(10)[\"Open\"])\nline_chart.add(ts.columns.tolist()[1:5][1],ts.sort_values(by=i,ascending=True).head(10)[\"High\"])\nline_chart.add(ts.columns.tolist()[1:5][2],ts.sort_values(by=i,ascending=True).head(10)[\"Low\"]      )\nline_chart.add(ts.columns.tolist()[1:5][3],ts.sort_values(by=i,ascending=True).head(10)[\"Close\"]  )\nline_chart.render_in_browser()","e4670b1e":"line_chart = py.HorizontalLine()\nline_chart.title = 'Tesla history since 2010 to 2021'\nline_chart.add(ts.columns.tolist()[1:5][0], ts.sort_values(by=i,ascending=False).head(10)[\"Open\"])\nline_chart.add(ts.columns.tolist()[1:5][1],ts.sort_values(by=i,ascending=False).head(10)[\"High\"])\nline_chart.add(ts.columns.tolist()[1:5][2],ts.sort_values(by=i,ascending=False).head(10)[\"Low\"]      )\nline_chart.add(ts.columns.tolist()[1:5][3],ts.sort_values(by=i,ascending=False).head(10)[\"Close\"]  )\nline_chart.render_in_browser()\n","d15ca50a":"fig = px.line(ts, x='Date', y=\"Close\")\nfig.show()#shows the closing price of the ","50b3d626":"top=max(max(ts[\"High\"]),max(ts[\"Close\"]))#shows high price\nbottom=min(min(ts[\"Low\"]),min(ts[\"Open\"]))#shows low price\nbottom\n\nbottom_low=ts[ts[\"Low\"]==bottom][\"Date\"].values[0]\nbottom_low","addc2603":"import plotly.graph_objects as go\nfig = go.Figure(data=go.Candlestick(x=ts['Date'],\n                    open=ts['Open'],\n                    high=ts['High'],\n                    low=ts['Low'],\n                    close=ts['Close'],\n                    increasing_line_color= 'cyan', decreasing_line_color= 'gray'\n))\nfig.update_layout(\n    title=\"Data at which Tesla share price went \"+str(bottom),\n    yaxis_title='Tesla Stock',\n    shapes = [dict(\n        x0=bottom_low, x1=bottom_low, y0=0, y1=1, xref='x', yref='paper',\n        line_width=2)],\n    annotations=[dict(\n        x=bottom_low, y=0.05, xref='x', yref='paper',\n        showarrow=False, xanchor='left', text='Tesla stocks went all time low')]\n)\nfig.show()","30584128":"top_high=ts[ts[\"High\"]==top][\"Date\"].values[0]\ntop_high","91e346de":"fig = go.Figure(data=go.Ohlc(x=ts['Date'],\n                    open=ts['Open'],\n                    high=ts['High'],\n                    low=ts['Low'],\n                    close=ts['Close']))\nfig.update_layout(\n    title=\"Data at which Tesla share price went \"+str(top),\n    yaxis_title='Tesla Stock',\n    shapes = [dict(\n        x0=top_high, x1=top_high, y0=0, y1=1, xref='x', yref='paper',\n        line_width=2)],\n    annotations=[dict(\n        x=top_high, y=0.05, xref='x', yref='paper',\n        showarrow=False, xanchor='left', text='Tesla stocks went all time high')]\n)\nfig.show()","b691d6ad":"from datetime import datetime\n# last 11 days high ,low in candlestick form.\n\nopen_data = list(ts[\"Open\"].tail(11).values[0:])\nhigh_data = list(ts[\"High\"].tail(11).values[0:])\nlow_data = list(ts[\"Low\"].tail(11).values[0:])\nclose_data = list(ts[\"Close\"].tail(11).values[0:])\ndates = [datetime(year=2021, month=8,day=20),\n         datetime(year=2021, month=8,day=21),\n         datetime(year=2021, month=8,day=22),\n         datetime(year=2021, month=8,day=23),\n         datetime(year=2021, month=8,day=24),\n         datetime(year=2021, month=8,day=25),\n         datetime(year=2021, month=8,day=26),\n         datetime(year=2021, month=8,day=27),\n         datetime(year=2021, month=8,day=28),\n         datetime(year=2021, month=8,day=29),\n         datetime(year=2021, month=8,day=30)\n        ]\n\nfig = go.Figure(data=[go.Candlestick(x=dates,\n                       open=open_data, high=high_data,\n                       low=low_data, close=close_data)])\n\nfig.show()","88933f4a":"ts['volatile'] = (ts['Close']\/ts['Close'].shift(2)) - 1\nfig, ax = plt.subplots(figsize=(20,8))\nax.plot(ts['Date'], ts['volatile'], color='purple')\nax.xaxis.set_major_locator(plt.MaxNLocator(15))\nplt.title('volatility in tesla stocks')\nplt.grid()\nplt.show()","fc7dbbd8":"ts['volatile'].hist(bins=100, color='peru');","9c74979f":"ts['Cumulative Return'] = (1 + ts['volatile']).cumprod()\nfig, ax = plt.subplots(figsize=(20,8))\nax.plot(ts['Date'], ts['Cumulative Return'], color='hotpink')\nax.xaxis.set_major_locator(plt.MaxNLocator(10))\nax.set_xlabel('Date', fontsize='11')\nax.set_ylabel('Cumulative Return', fontsize='11')\nplt.title('Cumulative Return')\nplt.grid()\nplt.show()","d7ad9833":"# How tesla stocks performed each year.","d59f3d30":"ts.iloc[:,:5].plot(x =\"Date\")\nplt.xlim=['2010-06-29', '2021-08-30'];plt.xticks(rotation='vertical');plt.show()","c70b84e7":"filtered_list2010=ts.query(\"Date >='2010-06-29' and Date <= '2010-12-31'\")\nfiltered_list2010.iloc[:,:5].plot(x=\"Date\");plt.xticks(rotation=\"vertical\");plt.show()","52f1b52d":"year=[\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\"]\nfor i in year:\n    ts[ts['Date'].str.contains(i)].iloc[:,:5].plot(x=\"Date\");plt.xticks(rotation=\"vertical\");plt.title(\"Tesla in \"+ i);plt.show()","c5e4775c":"ohlc = ts[(ts['Date'] > '2020-01-01')]\nohlc = ohlc.loc[:, ['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Market Cap', 'Cumulative Return']]\nohlc['Date'] = pd.to_datetime(ohlc['Date'], format='%Y-%m-%d')\n\nfig, ax = plt.subplots(figsize=(20,8))\nax.plot(ohlc['Date'], ohlc['Cumulative Return'], color='green')\nax.xaxis.set_major_locator(plt.MaxNLocator(5))\nax.set_xlabel('Date', fontsize='11')\nax.set_ylabel('Cumulative Return', fontsize='11')\nplt.grid()\nplt.title('Cumulative Return (After 2020)', fontsize='20')\nplt.show()","5168b78f":"ts.iloc[ts['Cumulative Return'].argmax()]","55678a87":"ts[\"max_jump from high\/low\"]=ts[\"High\"]-ts[\"Low\"]","527891ac":"ts[\"max_jump from close\/open\"]=ts[\"Close\"]-ts[\"Open\"]\nbiggest_surge_high_low=ts[\"max_jump from high\/low\"].sort_values(ascending=False).values[0]\nbiggest_drops_high_low=ts[\"max_jump from high\/low\"].sort_values(ascending=True).values[0]\nbiggest_surge_close_open=ts[\"max_jump from close\/open\"].sort_values(ascending=False).values[0]\nbiggest_drops_close_open=ts[\"max_jump from close\/open\"].sort_values(ascending=True).values[0]\nprint(str(biggest_surge_high_low) + \" it came in date \"+ ts[\"Date\"][ts[\"max_jump from high\/low\"]==biggest_surge_high_low].values[0])\nprint(str(biggest_drops_high_low) + \" it came in date \"+ ts[\"Date\"][ts[\"max_jump from high\/low\"]==biggest_drops_high_low].values[0])\nprint(str(biggest_surge_close_open) + \" it came in date \"+ ts[\"Date\"][ts[\"max_jump from close\/open\"]==biggest_surge_close_open].values[0])\nprint(str(biggest_drops_close_open) + \" it came in date \"+ ts[\"Date\"][ts[\"max_jump from close\/open\"]==biggest_drops_close_open].values[0])\nprint(str(ts[\"Volume\"].sort_values(ascending=False).values[0]) + \" is max volume ever traded for tesla motors\")","bf91777a":"ts1=ts.tail(365)#graph for 52 week high and low","16ca6791":"#last hundred days chart.\nfig, axs = plt.subplots(2,figsize=(15,10),gridspec_kw={'height_ratios': [2, 2]})\naxs[0].plot(ts1[\"Close\"])\nts1[[\"Date\",\"Volume\"]].plot(ax=axs[1], kind='bar',color=\"red\")\naxs[1].xaxis.set_visible(False)\nplt.show()","dc66955d":"ts[\"mean_avg_50\"]=ts[\"Adj Close\"].rolling(50).mean()\nts[\"mean_avg_200\"]=ts[\"Adj Close\"].rolling(200).mean()\nts[\"mean_avg365\"]=ts[\"Adj Close\"].rolling(365).mean()\nts[[\"Adj Close\",\"mean_avg_50\",\"mean_avg_200\",\"mean_avg365\"]].plot(label=\"comparison among rolling means with adj close\",figsize=(16,8));","d390e785":"from statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\n\ntimeseries=ts.iloc[:,:5]\ndef test_stationarity(timeseries):\n    #Determing rolling statistics\n    rolmean = timeseries.rolling(50).mean()\n    rolstd = timeseries.rolling(50).std()\n    #Plot rolling statistics:\n    plt.plot(timeseries, color='yellow',label='Original')\n    plt.plot(rolmean, color='purple', label='Rolling Mean')\n    plt.plot(rolstd, color='cyan', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean and Standard Deviation')\n    plt.show(block=False)\n    print(\"Results of dickey fuller test\")\n    adft = adfuller(timeseries,autolag='AIC')\n    # output for dft will give us without defining what the values are.\n    #hence we manually write what values does it explains using a for loop\n    output = pd.Series(adft[0:4],index=['Test Statistics','p-value','No. of lags used','Number of observations used'])\n    for key,values in adft[4].items():\n        output['critical value (%s)'%key] =  values\n    print(output)\n","63590036":"test_stationarity(ts[\"Close\"])","6067d40c":"result = seasonal_decompose(ts.Close, model='multiplicative',freq=100)\nfig = plt.figure()  \nfig = result.plot()  \nfig.set_size_inches(16, 9)","ae8a0dea":"df_log = np.log(ts['Close'])\nmoving_avg = df_log.rolling(12).mean()\nstd_dev = df_log.rolling(12).std()\nplt.legend(loc='best')\nplt.title('Moving Average')\nplt.plot(std_dev, color =\"black\", label = \"Standard Deviation\")\nplt.plot(moving_avg, color=\"red\", label = \"Mean\")\nplt.show()","b26fc087":"train_data, test_data = df_log[3:int(len(df_log)*0.9)], df_log[int(len(df_log)*0.9):]\nplt.figure(figsize=(10,6))\nplt.grid(True)\nplt.xlabel('Dates')\nplt.ylabel('Closing Prices')\nplt.plot(df_log, 'green', label='Train data')\nplt.plot(test_data, 'red', label='Test data')\nplt.legend()","0179a12f":"pip install pmdarima","c2e7b8a4":"from pmdarima.arima import auto_arima\nmodel_autoARIMA = auto_arima(train_data, start_p=0, start_q=0,\ntest='adf',       # use adftest to find optimal 'd'\nmax_p=3, max_q=3, # maximum p and q\nm=1,              # frequency of series\nd=None,           # let model determine 'd'\nseasonal=False,   # No Seasonality\nstart_P=0, \nD=0, \ntrace=True,\nerror_action='ignore',  \nsuppress_warnings=True, \nstepwise=True)\nprint(model_autoARIMA.summary())","e2f79b42":"model_autoARIMA.plot_diagnostics(figsize=(15,8))\nplt.show()","298887cd":"model = ARIMA(train_data, order=(3, 1, 2))\nfitted = model.fit(disp=-1)\nprint(fitted.summary())","75b91e07":"fc, se, conf = fitted.forecast(282, alpha=0.05)","291a99c1":"fc_series = pd.Series(fc, index=test_data.index)\nlower_series = pd.Series(conf[:, 0], index=test_data.index)\nupper_series = pd.Series(conf[:, 1], index=test_data.index)\nplt.figure(figsize=(12,5), dpi=100)\nplt.plot(train_data, label='training')\nplt.plot(test_data, color = 'blue', label='Actual Stock Price')\nplt.plot(fc_series, color = 'orange',label='Predicted Stock Price')\nplt.fill_between(lower_series.index, lower_series, upper_series, \n                 color='k', alpha=.10)\nplt.title('Tesla Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Actual Stock Price')\nplt.legend(loc='upper center', fontsize=8)\nplt.show()","9522b16b":"Tesla, Inc. is an American electric vehicle and clean energy company based in Palo Alto, California, United States. Tesla designs and manufactures electric cars, battery energy storage from home to grid-scale, solar panels and solar roof tiles, and related products and services.\n\nFounded in July 2003 by Martin Eberhard and Marc Tarpenning as Tesla Motors, the company's name is a tribute to inventor and electrical engineer Nikola Tesla. In February 2004, via a US$6.5 million investment, X.com co-founder Elon Musk became the largest shareholder of the company and its chairman. \n\nIn June 2021, became the first electric car to sell 1 million units globally.[6] Tesla's global vehicle sales were 499,550 units in 2020, a 35.8% increase over the previous year. In 2020, the company produced over 1 million electric cars.","cdcb2ac0":"# About Tesla:","853b5eee":"### biggest drops and surge ever recorded between high and low & open and close"}}