{"cell_type":{"a80d127f":"code","cd63a3d6":"code","ed4f782a":"code","d94dc71b":"code","5877c59a":"code","6961fbe8":"code","f56ee47c":"code","0ab3e3a5":"code","2ccfdf72":"code","fc46835c":"code","754ba25b":"code","2f1142a4":"code","b260762b":"code","24786ae2":"code","14463631":"code","ea054591":"code","eb82e955":"code","be38dd14":"code","cb7bbbea":"code","72aafedf":"code","afc211ea":"code","64d8c4ee":"code","bebd24e8":"code","3e94073f":"code","3fa0c638":"code","31a58378":"code","c7daf68a":"code","4eabb331":"code","7350f146":"code","49fee30c":"code","ea03dbf9":"code","fdc8fa0e":"code","83d1a5f1":"code","251b8912":"code","de8917a9":"code","9f84fce6":"code","63c5f221":"code","492e7ea0":"code","70a2dbc2":"code","9332c2c3":"markdown","6b419860":"markdown","72de9bf0":"markdown","425abdb8":"markdown","df9fde1b":"markdown","105b3c26":"markdown","7dcd0faf":"markdown","14efae18":"markdown","15134ec6":"markdown","8f83aacc":"markdown","66a316e9":"markdown","a4461468":"markdown","fc45d888":"markdown","32cb2dd3":"markdown","eb323988":"markdown","26533088":"markdown","9063841f":"markdown","b7e89f2c":"markdown","e8be467e":"markdown","63069086":"markdown","0f207a90":"markdown","a3bc729e":"markdown","e17cb9c2":"markdown","6759a60c":"markdown","4ab425d0":"markdown","5a06edd7":"markdown","c7bb8b34":"markdown","beb81746":"markdown","deb1fee6":"markdown","9c5caeee":"markdown","b569d309":"markdown","de190f68":"markdown","d9d1ec6b":"markdown","cb16f116":"markdown","9260f8e8":"markdown","0abae5f7":"markdown","0e73a1f0":"markdown","3cca48a5":"markdown"},"source":{"a80d127f":"primes = [2, 3, 5, 7]","cd63a3d6":"planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']","ed4f782a":"hands = [\n    ['J', 'Q', 'K'],\n    ['2', '2', '2'],\n    ['6', 'A', 'K'], # (Comma after the last element is optional)\n]\n# (I could also have written this on one line, but it can get hard to read)\nhands = [['J', 'Q', 'K'], ['2', '2', '2'], ['6', 'A', 'K']]","d94dc71b":"my_favourite_things = [32, 'raindrops on roses', help]\n# (Yes, Python's help function is *definitely* one of my favourite things)","5877c59a":"planets[0]","6961fbe8":"planets[1]","f56ee47c":"planets[-1]","0ab3e3a5":"planets[-2]","2ccfdf72":"planets[0:3]","fc46835c":"planets[:3]","754ba25b":"planets[3:]","2f1142a4":"# All the planets except the first and last\nplanets[1:-1]","b260762b":"# The last 3 planets\nplanets[-3:]","24786ae2":"planets[3] = 'Malacandra'\nplanets","14463631":"planets[:3] = ['Mur', 'Vee', 'Ur']\nprint(planets)\n# (Okay, that was rather silly. Let's give them back their old names)\nplanets[:4] = ['Mercury', 'Venus', 'Earth', 'Mars',]\nprint(planets)","ea054591":"# How many planets are there?\nlen(planets)","eb82e955":"# The planets sorted in alphabetical order\nsorted(planets)","be38dd14":"primes = [2, 3, 5, 7]\nsum(primes)","cb7bbbea":"max(primes)","72aafedf":"x = 12\n# x is a real number, so its imaginary part is 0.\nprint(x.imag)\n# Here's how to make a complex number, in case you've ever been curious:\nc = 12 + 3j\nprint(c.imag)","afc211ea":"x.bit_length","64d8c4ee":"x.bit_length()","bebd24e8":"help(x.bit_length)","3e94073f":"# Pluto is a planet darn it!\nplanets.append('Pluto')","3fa0c638":"help(planets.append)","31a58378":"planets","c7daf68a":"planets.pop()","4eabb331":"planets","7350f146":"planets.index('Earth')","49fee30c":"planets.index('Pluto')","ea03dbf9":"# Is Earth a planet?\n\"Earth\" in planets","fdc8fa0e":"# Is Calbefraques a planet?\n\"Calbefraques\" in planets","83d1a5f1":"help(planets)","251b8912":"t = (1, 2, 3)","de8917a9":"t = 1, 2, 3 # equivalent to above\nt","9f84fce6":"t[0] = 100","63c5f221":"x = 0.125\nx.as_integer_ratio()","492e7ea0":"numerator, denominator = x.as_integer_ratio()\nprint(numerator \/ denominator)","70a2dbc2":"a = 1\nb = 0\na, b = b, a\nprint(a, b)","9332c2c3":"Oh, that's right...\n\nTo avoid unpleasant surprises like this, we can use the `in` operator to determine whether a list contains a particular value:","6b419860":"`sum` does what you might expect:","72de9bf0":"## List methods","425abdb8":"## Indexing\n\nWe can access individual list elements using Python's square bracket indexing syntax.\n\nWhich planet is closest to the sun? Python uses *zero-based* indexing, so the first element has index 0.","df9fde1b":"The things an object carries around can also include functions. A function attached to an object is called a **method**. (Non-function things attached to an object, such as `imag`, are called *attributes*).\n\nFor example, numbers have a method called `bit_length`. Again, we access it using dot syntax:","105b3c26":"i.e. the expression above means \"give me all the planets from index 3 onward\".\n\nWe can also use negative indices when slicing:","7dcd0faf":"It comes third (i.e. at index 2 - 0 indexing!).\n\nAt what index does Pluto occur?","14efae18":"`list.append` modifies a list by adding an item to the end:","15134ec6":"**2:** They cannot be modified (they are *immutable*).","8f83aacc":"What's the next closest planet?","66a316e9":"Which planet is *furthest* from the sun?\n\nElements at the end of the list can be accessed with negative numbers, starting from -1:","a4461468":"We can put other types of things in lists:","fc45d888":"These multiple return values can be individually assigned as follows:","32cb2dd3":"## Interlude: objects\n\nI've been throwing around the term 'object' a lot so far - you may even remember me claiming that *everything* in Python is an object. But what does that actually mean?\n\nIn short, objects carry some stuff around with them. We can access that stuff using Python's dot syntax.\n\nFor example, numbers in Python carry around an associated variable called `imag` representing their imaginary part. (You'll probably never need to use this unless you're doing some very weird math.)","eb323988":"<!-- TODO: include third 'step size' slice argument and its use for reversing? -->\n\n## Mutating lists\n\nLists are mutable, meaning they can be modified \"in place\".\n\nOne way to modify a list is to assign to an index or slice expression.\n\nFor example, let's say we want to rename Mars:","26533088":"Finally we have some insight into the classic Stupid Python Trick\u2122 for swapping two variables!","9063841f":"### Searching lists\n\nWhere does Earth fall in the order of planets? We can get its index using the `list.index` method.","b7e89f2c":"To actually call it, we add parentheses:","e8be467e":"> **Aside:** You've actually been calling methods already if you've been doing the exercises. In the exercise notebooks `q1`, `q2`, `q3`, etc. are all objects which have methods called `check`, `hint`, and `solution`.\n\nIn the same way that we can pass functions to the `help` function (e.g. `help(max)`), we can also pass in methods:","63069086":"## Tuples\n\nTuples are almost exactly the same as lists. They differ in just two ways.\n\n**1:** The syntax for creating them uses (optional) parentheses rather than square brackets","0f207a90":"## Slicing\n\nWhat are the first three planets? We can answer this question using *slicing*:","a3bc729e":"# Lists\n\nLists in Python represent ordered sequences of values. They can be defined with comma-separated values between square brackets. For example, here is a list of the first few prime numbers:","e17cb9c2":"There are a few more interesting list methods we haven't covered. If you want to learn about all the methods and attributes attached to a particular object, we can call `help()` on the object itself. For example, `help(planets)` will tell us about *all* the list methods: ","6759a60c":"Why does the cell above have no output? Let's check the documentation by calling `help(planets.append)`.\n\n> **Aside:** `append` is a method carried around by *all* objects of type list, not just `planets`, so we also could have called `help(list.append)`. However, if we try to call `help(append)`, Python will complain that no variable exists called \"append\". The \"append\" name only exists within lists - it doesn't exist as a standalone name like builtin functions such as `max` or `len`.","4ab425d0":"Tuples are often used for functions that have multiple return values.\n\nFor example, the ``as_integer_ratio()`` method of float objects returns a numerator and a denominator in the form of a tuple:","5a06edd7":"Click the \"output\" button to see the full help page. Lists have lots of methods with weird-looking names like `__eq__` and `__iadd__`. Don't worry too much about these for now. (You'll probably never call such methods directly. But they get called behind the scenes when we use syntax like indexing or comparison operators.) The most interesting methods are toward the bottom of the list (`append`, `clear`, `copy`, etc.).","c7bb8b34":"`sorted` returns a sorted version of a list:","beb81746":"We've previously used the `min` and `max` to get the minimum or maximum of several arguments. But we can also pass in a single list argument.","deb1fee6":"If I leave out the end index, it's assumed to be the length of the list.","9c5caeee":"`list.pop` removes and returns the last element of a list:","b569d309":"A list can contain a mix of different types:","de190f68":"# Your turn!\n\nHead over to [the Exercises notebook](https:\/\/www.kaggle.com\/kernels\/fork\/1275173) to get some hands-on practice working with lists and tuples.","d9d1ec6b":"Hm, that's quite a mouthful. Let's compensate by shortening the names of the first 3 planets.","cb16f116":"<!-- TODO:\ndir?\nA useful builtin method for interacting with objects is `dir`. `dir` asks: what are the names of all the things (methods, and attributes) that this object is carrying around?\nhelp(x)?\n-->\n\nThe examples above were utterly obscure. None of the types of objects we've looked at so far (numbers, functions, booleans) have attributes or methods you're likely ever to use.\n\nBut it turns out that lists have several methods which you'll use all the time.","9260f8e8":"`planets[0:3]` is our way of asking Python for the elements of `planets` starting from index 0 and continuing up to *but not including* index 3.\n\nThe starting and ending indices are both optional. If I leave out the start index, it's assumed to be 0. So I could rewrite the expression above as:","0abae5f7":"Including other lists:","0e73a1f0":"The `-> None` part is telling us that `list.append` doesn't return anything. But if we check the value of `planets`, we can see that the method call modified the value of `planets`:","3cca48a5":"## List functions\n\nPython has several useful builtin functions for working with lists.\n\n`len` gives the length of a list:"}}