{"cell_type":{"39a0d59f":"code","833a2af9":"code","23aa0cac":"code","f58ffe69":"code","c93a7b80":"code","a23ca653":"code","148183ae":"code","59ab1281":"code","fbd92074":"code","0232fd02":"markdown","843bb011":"markdown","b212802d":"markdown","49bd81f1":"markdown","4e02c4d8":"markdown","c62f1721":"markdown","f9e1a942":"markdown","e7e31a64":"markdown","818a7a35":"markdown","168fe714":"markdown","1240d041":"markdown"},"source":{"39a0d59f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom scipy.stats import norm\n%matplotlib inline\n\nTrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\nTrain.set_index('Id', inplace = True)\nSalePrice = Train[['SalePrice']]\nSalePrice.hist(bins=25, density=True, alpha=0.6)","833a2af9":"# Set size\nwidth, height = 15, 7.5\nplt.rcParams['figure.figsize'] = width, height\n\n\nmu, std = norm.fit(SalePrice['SalePrice'])\nSalePrice['SalePrice'].hist(bins=25, density=True, alpha=0.6)\n\n\n# Plot the PDF.\nx = np.linspace(-500_000, 500_000, 100)\np = norm.pdf(x, mu, std)\nplt.plot(x, p, 'r', linewidth=2)\nxmin, xmax = plt.xlim()\ntitle = \"$\\mu$ = %.2f,  $\\sigma$ = %.2f\" % (mu, std)\n\nplt.axvspan(xmin, 0, color='red', alpha=0.2)\nplt.xlim(xmin, xmax)\nplt.title(title)\nplt.show()","23aa0cac":"SalePrice['SalePrice_log'] = np.log(SalePrice['SalePrice'])\nSalePrice","f58ffe69":"width, height = 15, 7.5\nplt.rcParams['figure.figsize'] = width, height\n\nSalePrice.hist(bins=25, density=True, alpha=0.6)\n","c93a7b80":"mu, std = norm.fit(SalePrice['SalePrice_log'])\nh = plt.hist(SalePrice['SalePrice_log'], bins=25, density=True, alpha=0.6)\n\n\n# Plot the PDF.\nx = np.linspace(8, 16, 200)\np = norm.pdf(x, mu, std)\nplt.plot(x, p, 'r', linewidth=2)\ntitle = \"$\\mu$ = %.2f,  $\\sigma$ = %.2f\" % (mu, std)\nplt.title(title)\nplt.grid(True)\nplt.show()","a23ca653":"h[1][1] -h[1][0]  ","148183ae":"sum(h[0]*(h[1][1] -h[1][0]))","59ab1281":"#Check area\nfrom scipy.special import erf\nprint(0.5*(1 + erf((16-mu)\/(std*(np.sqrt(2))))))","fbd92074":"mu_x, std_x = norm.fit(SalePrice['SalePrice'])\n\nmu = np.log((mu_x)**2\/np.sqrt(mu_x**2 + std_x**2))\nstd = np.sqrt(np.log(1 + std_x**2\/mu_x**2))\n\nlog_normal_left = lambda x:(1\/\n                            (x*std*np.sqrt(2*np.pi)))\nlog_normal_right = lambda x:np.e**(-(np.log(x) - mu)**2\/\n                                   (2*std**2))\nlog_normal = lambda x:log_normal_left(x)*log_normal_right(x)\n\n\nplt.hist(SalePrice['SalePrice'], bins=10, density=True, alpha=0.6)\n\n# Plot the PDF.\nx = np.linspace(-10, 800_000, 200)\np = log_normal(x)\nplt.plot(x, p, 'r', linewidth=2)\ntitle = \"$\\mu$ = %.2f,  $\\sigma$ = %.2f\" % (mu, std)\nplt.title(title)\nplt.grid(True)\nplt.show()","0232fd02":"# Why I take log before fit normal distribution","843bb011":"## First, we import data and module\n\n### From house data (https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques), we focus only the 'SalePrice' column.","b212802d":"# Let's start from our house price","49bd81f1":"TL;DR\n\nIn case of limiting the output range (only positive float for example), the oridinary normal funtion may include negative zone. To resolve it, log function can be applied.","4e02c4d8":"### Do you see something weired? The distrition range cover the area where SalePrice lower than zero. I mean there might be very rare cases the sellor would sell their house by 0\\$. The distribution shows there is proablity where sellers could sell with minus costs, but who would give their houses away with extra money for buyers!\n\n### That's it! I strongly believe that normal distribution doesn't make sense for this case and this also happens with kinds of data which cannot be lower than zero or limited in some continuous range.\n\n### And, here the way I solve for fit distribution","c62f1721":"# Ref\n* https:\/\/en.wikipedia.org\/wiki\/Standard_normal_deviate\n* https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python#2.-First-things-first:-analysing-'SalePrice'","f9e1a942":"## Fitting according to https:\/\/en.wikipedia.org\/wiki\/Log-normal_distribution\n\n### With equation\n\n$$\nPDF(x) = \\frac{1}{x\\sigma\\sqrt{2\\pi}}\\text{exp}\\bigg(-\\frac{(\\text{ln x} - \\mu)^2}{2\\sigma^2}\\bigg)\n$$\n\n### Please note that $\\mu$ and $\\sigma$ is the mean and standard deviation of SalePrice_log","e7e31a64":"### First, I add a new column call 'SalePrice_log' which contains $\\text{log}$ (base $e$) of 'SalePrice'. In fact, any base of logarithm could work as well.","818a7a35":"### This look reasonable. The probabilty covers only the possible range of value.\n\n\n### Then, if I want to analyse SalePrice data, prediction for example, I will use this log normalise instead of using original data. In case prediction, I will predict this log value then invert logarithm back to normal scale.\n\n### Now, let's try fit back this distribution to decimal scale.","168fe714":"### This how the 'SalePrice's are distributed, they seem to be skewed. Now, let's fit them with normal curve.","1240d041":"### Comparing between two histogram, it is obvious that 'SalePrice_log' is look more normal. Plus, it is less skewed.\n\n### Then, we fit 'SalePrice_log' with normal distribution."}}