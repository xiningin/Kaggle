{"cell_type":{"db7c9472":"code","a534b884":"code","bf80fc6f":"code","bef2408f":"code","97e84305":"code","424af265":"code","cea00793":"code","e8c990e9":"code","96c4f4c8":"code","51ec9477":"code","e39e9410":"code","56269888":"code","fba0548b":"code","e7dbb2de":"code","0b5ae4da":"code","19144c13":"code","31bf5738":"code","2efafb1a":"code","8d9a9dd9":"markdown","9198f61e":"markdown","94563bec":"markdown","498bc7a0":"markdown","e636ec43":"markdown","5e78abd3":"markdown","35b2073a":"markdown","e6cd98c0":"markdown","2fa4afdc":"markdown","e6f9710d":"markdown","948ced7f":"markdown","e01efeda":"markdown","bed419cd":"markdown","ddded913":"markdown","10e84ac8":"markdown","7955e780":"markdown"},"source":{"db7c9472":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a534b884":"df = pd.read_csv('..\/input\/flight.csv')\nprint(df.columns)\ndf = df.drop(['tailnum','dep_time','sched_dep_time','dep_delay'],axis=1)\nprint('Data Types:')\nprint(df.dtypes.value_counts())\nprint()\nprint(df.info())\ndf.head()","bf80fc6f":"plt.figure(figsize=(8,8))\nsns.heatmap(pd.isnull(df.T), cbar=False)\n\npd.concat([df.isnull().sum(), 100 * df.isnull().sum()\/len(df)], \n              axis=1).rename(columns={0:'Missing Records', 1:'Percentage (%)'})","bef2408f":"cols = ['arr_time', 'arr_delay']\ndf[cols] = df[cols].fillna(df[cols].median())\ndf['distance(miles)'] = round(df.distance.apply(lambda x: x*0.62137),2)\ndf.head()","97e84305":"mylist1 = np.unique(df.dest.values)\nsub = 'i'\nprint (\"\\n\".join(s for s in mylist1 if sub.lower() in s.lower()))\nprint()\nmylist2 = [idx for idx, val in enumerate(mylist1) if sub.lower() in val.lower()]\nprint('Index')\nprint(mylist2)\nmylist3 = [val for idx, val in enumerate(mylist1) if sub.lower() in val.lower()]\nprint()\nprint('Values')\nprint(mylist3)","424af265":"mylist1= np.unique([str(i) for i in df.flight.values])\nsub = '151'\nprint (\"\\n\".join(s for s in mylist1 if sub in s))\nprint()\nmylist2 = [idx for idx, val in enumerate(mylist1) if sub in val]\nprint('Index')\nprint(mylist2)\nmylist3 = [val for idx, val in enumerate(mylist1) if sub in val]\nprint()\nprint('Values')\nprint(mylist3)","cea00793":"df['time_hour'] = pd.to_datetime(df['time_hour'])\ndf['date'] = df['time_hour'].map(lambda x: x.strftime('%Y-%m-%d'))\ndf['month'] = df['time_hour'].dt.month\ndf.head()","e8c990e9":"pd.crosstab(df['origin'], df['month'])","96c4f4c8":"pd.pivot_table(df, values='arr_delay', index=['origin'],\n                  columns=['month'], aggfunc=np.mean)","51ec9477":"df['origin'].replace({'EWR':'ewr', 'JFK':'jfk', 'LGA':'lga'}, inplace=True)\ndf.loc[df.origin=='ewr', ['dest']] ='BAY'\ndf['flight'] = df['flight'].astype('float')\ndf.head()","e39e9410":"print(df.groupby('origin')['dest'].nunique().to_frame())\ndf['sum_arr_delay'] = df.groupby('carrier')['arr_delay'].transform(pd.Series.cumsum)\ndf[df.carrier=='UA'].head(10)","56269888":"df1 = df[~np.isnan(df['arr_delay'])]\ndf2 = df.loc[:,~df.columns.duplicated()]\ndf3 = df.drop_duplicates(subset=['origin'], keep='first')\ndf4 = pd.concat([df, pd.get_dummies(df['origin'])], axis=1)\ndf5 = pd.concat([df, pd.get_dummies(df.select_dtypes(include='object'))], axis=1)","fba0548b":"df = df.drop('sum_arr_delay', axis = 1)\ndf = df.iloc[50:]\ndf.head()","e7dbb2de":"#df.columns\ndf['delay_total'] = df['arr_time'] + df['arr_delay']\ndf = df.append(df.iloc[:6])\ndf.tail(6)","0b5ae4da":"pd.concat([df[df['distance']>2000], df[df.arr_delay<10]],axis =0,\n          ignore_index =True).head(6) ","19144c13":"pd.concat([df.arr_time, df.arr_delay],axis =1).head(6)","31bf5738":"df[(df.arr_delay >50) & (df.arr_delay<100) & ((df.flight == 1545) | (df.flight == 1141))].head(6)","2efafb1a":"from IPython.display import HTML\nHTML('''<script>\ncode_show=true; \nfunction code_toggle() {\n if (code_show){\n $('div.input').hide();\n } else {\n $('div.input').show();\n }\n code_show = !code_show\n} \n$( document ).ready(code_toggle);\n<\/script>\nThe raw code for this IPython notebook is by default hidden for easier reading.\nTo toggle on\/off the raw code, click <a href=\"javascript:code_toggle()\">here<\/a>.''')","8d9a9dd9":"**Eksik veri say\u0131lar\u0131n\u0131 ve veri setindeki oranlar\u0131n\u0131 bulma**","9198f61e":"**Veri de\u011ferini ve tipini de\u011fi\u015ftirme**","94563bec":"**\u0130ki veri setini birle\u015ftirme (Alt alta)**","498bc7a0":"Bu derste g\u00fcnl\u00fck hayatta i\u015fime yarayan Python fonksiyonlar\u0131ndan baz\u0131lar\u0131n\u0131 payla\u015faca\u011f\u0131m. Bunlara ek olarak kulland\u0131\u011f\u0131n\u0131z ve eklemek istedi\u011finiz fonksiyonlar varsa bu seriyi daha da zenginle\u015ftirebiliriz.\n\nKonu ba\u015fl\u0131klar\u0131 \u015f\u00f6yle:\n\n* Veri tiplerini ve da\u011f\u0131l\u0131mlar\u0131n\u0131 bulma\n* Eksik veri say\u0131lar\u0131n\u0131 ve veri setindeki oranlar\u0131n\u0131 bulma\n* Eksik s\u00fctunlar\u0131 doldurma ve apply fonksiyonuyla yeni s\u00fctun olu\u015fturma\n* Array i\u00e7inde belirli harf veya harfleri i\u00e7eren kelimeleri ve indexlerini bulma\n* Array i\u00e7inde belirli rakam veya rakamlar\u0131 i\u00e7eren say\u0131lar\u0131 ve indexlerini bulma\n* Zamansal de\u011fi\u015fkeni DateTime\u2019a \u00e7evirme ve zenginle\u015ftirme\n* Cross ve pivot table olu\u015fturma\n* Veri de\u011ferini ve tipini de\u011fi\u015ftirme\n* Groupby-nunique ve cumulative sum uygulama\n* Eksik ve tekrarl\u0131 verilerle \u00e7al\u0131\u015fma\n* One-hot encoding yap\u0131p veri setine ekleme\n* Sat\u0131r ve s\u00fctun silme\n* Sat\u0131r ve s\u00fctun ekleme\n* \u0130ki veri setini birle\u015ftirme (Alt alta)\n* \u0130ki veri setini birle\u015ftirme (Yan yana)\n* Filtreleme\n* Jupyter notebook\u2019ta yaz\u0131lm\u0131\u015f kodlar\u0131 gizleme\n\n**Veri tiplerini ve da\u011f\u0131l\u0131mlar\u0131n\u0131 bulma**","e636ec43":"**Sat\u0131r ve s\u00fctun ekleme**","5e78abd3":"**Zamansal de\u011fi\u015fkeni DateTime\u2019a \u00e7evirme ve zenginle\u015ftirme**","35b2073a":"**Array i\u00e7inde belirli harf veya harfleri i\u00e7eren kelimeleri ve indexleri bulma**","e6cd98c0":"**Jupyter notebook\u2019ta yaz\u0131lan kodlar\u0131 gizleme**","2fa4afdc":"**\u0130ki veri setini birle\u015ftirme (Yan yana)**","e6f9710d":"**Filtreleme**","948ced7f":"**Sat\u0131r ve s\u00fctun silme**","e01efeda":"**Array i\u00e7inde belirli rakam veya rakamlar\u0131 i\u00e7eren kelimeleri ve indexleri bulma**","bed419cd":"**Cross ve pivot table olu\u015fturma**","ddded913":"**df1 = Se\u00e7ilmi\u015f bir \u00f6zniteli\u011fe g\u00f6re eksik olmayan sat\u0131rlar\u0131 okuma**\n\n**df2 = Tekrarl\u0131 sat\u0131rlar\u0131 atma**\n\n**df3 = Se\u00e7ilmi\u015f bir \u00f6zniteli\u011fe ait \u00f6rnek (birer) kay\u0131t tutma**\n\n**df4 = Se\u00e7ilmi\u015f bir \u00f6zniteli\u011fe g\u00f6re one-hot encoding yap\u0131p bunu veri setine ekleme**\n\n**df5 = Se\u00e7ilmi\u015f bir veri tipine g\u00f6re one-hot encoding yap\u0131p bunu veri setine ekleme**","10e84ac8":"**Groupby-nunique ve cumulative sum fonksiyonlar\u0131**","7955e780":"**Eksik s\u00fctunlar\u0131 doldurma ve apply fonksiyonuyla yeni s\u00fctun olu\u015fturma**"}}