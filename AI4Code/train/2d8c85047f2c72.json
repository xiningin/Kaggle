{"cell_type":{"892ff972":"code","9ece35a1":"code","4f1fbb29":"code","defe0c32":"code","f66608ef":"code","14adadbf":"code","37e229cd":"code","25fa6e1d":"code","97449a78":"code","9f10182a":"code","c1d793ca":"code","8bc9c7b3":"markdown","83cfcc96":"markdown","25ff163b":"markdown","eeef2dae":"markdown"},"source":{"892ff972":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nimport lightgbm as lgb\nfrom sklearn.model_selection import TimeSeriesSplit, KFold, StratifiedKFold\n\nimport shap\nshap.initjs()\n\nimport warnings  \nwarnings.filterwarnings('ignore')\n\n\ntrain = pd.read_csv('..\/input\/cat-in-the-dat\/train.csv')\ntest = pd.read_csv('..\/input\/cat-in-the-dat\/test.csv')\n\ntarget = train['target']\ntrain_id = train['id']\ntest_id = test['id']\ntrain.drop(['target', 'id'], axis=1, inplace=True)\ntest.drop('id', axis=1, inplace=True)\n\ntrain.shape, test.shape","9ece35a1":"train.head(10).T","4f1fbb29":"\n\ncats_all =[c for c in train.columns if c not in ['day', 'month', 'target', 'id']] \ncats_obj = ['bin_3', 'bin_4', 'nom_0', 'nom_1', 'nom_2', 'nom_3', 'nom_4', 'nom_5',\n       'nom_6', 'nom_7', 'nom_8', 'nom_9', 'ord_1', 'ord_2', 'ord_3', 'ord_4',\n       'ord_5']\n\n\n\nfor col in cats_obj:\n    \n    le = LabelEncoder()\n    le.fit(list(train[col].astype(str).values) + list(test[col].astype(str).values))\n    train[col] = le.transform(list(train[col].astype(str).values))\n    test[col] = le.transform(list(test[col].astype(str).values))  ","defe0c32":"\n\nlgb_params = {'num_leaves': 23,\n         # 'min_child_weight': 0.03454472573214212,\n          'feature_fraction': 0.9,\n          'bagging_fraction': 0.9,\n          'min_data_in_leaf': 50,\n          'objective': 'binary',\n          'max_depth': -1,\n          'learning_rate': 0.008,\n          \"boosting_type\": \"gbdt\",\n          \"bagging_seed\": 11,\n          \"metric\": 'auc',\n          \"verbosity\": -1,\n          'reg_alpha': 0.3899927210061127,\n          #'reg_lambda': 0.6485237330340494,\n          'random_state': 47, \n            \n         }\n\n\nfolds =KFold(n_splits=3, shuffle=True, random_state=42)\nprint(folds.n_splits)\naucs = list()\noof = np.zeros(len(train))\npredictions = np.zeros(len(test))\nfeature_importances = pd.DataFrame()\nfeature_importances['feature'] = train.columns\n\n#training_start_time = time()\nfor fold, (trn_idx, test_idx) in enumerate(folds.split(train, target)):\n    #start_time = time()\n    print('Training on fold {}'.format(fold + 1))\n    \n    trn_data = lgb.Dataset(train.iloc[trn_idx], label=target.iloc[trn_idx])\n    val_data = lgb.Dataset(train.iloc[test_idx], label=target.iloc[test_idx])\n    clf = lgb.train(lgb_params, trn_data, 10000, valid_sets = [trn_data, val_data], verbose_eval=200, early_stopping_rounds=300)\n    oof[test_idx] = clf.predict(train.iloc[test_idx], num_iteration=clf.best_iteration)\n    \n    feature_importances['fold_{}'.format(fold + 1)] = clf.feature_importance()\n    aucs.append(clf.best_score['valid_1']['auc'])\n    \n    predictions += clf.predict(test, num_iteration=clf.best_iteration) \/ folds.n_splits\n    \n    #print('Fold {} finished in {}'.format(fold + 1, str(datetime.timedelta(seconds=time() - start_time))))\nprint('-' * 50)\nprint('Training has finished.')\n\nprint('Mean auc:', np.mean(aucs))\nprint('-' * 50)\n","f66608ef":"feature_importances['average'] = feature_importances[['fold_{}'.format(fold + 1) for fold in range(folds.n_splits)]].mean(axis=1)\nfeature_importances.to_csv('feature_importances.csv')\n\nplt.figure(figsize=(15, 10))\nsns.barplot(data=feature_importances.sort_values(by='average', ascending=False).head(25), x='average', y='feature');\nplt.title('25 TOP feature importance over {} folds average'.format(folds.n_splits));","14adadbf":"#shap_values = shap.TreeExplainer(clf).shap_values(train)\n\n#shap.summary_plot(shap_values, train)","37e229cd":"\n\nlgb_params = {'num_leaves': 23,\n         \n          'feature_fraction': 0.9,\n          'bagging_fraction': 0.9,\n          'min_data_in_leaf': 50,\n          'objective': 'binary',\n          'max_depth': -1,\n          'learning_rate': 0.008,\n          \"boosting_type\": \"gbdt\",\n          \"bagging_seed\": 11,\n          \"metric\": 'auc',\n          \"verbosity\": -1,\n          'reg_alpha': 0.2,\n          'random_state': 42, \n              \n        'min_data_per_group': 200, # reduce overfitting when using categorical_features\n        'cat_smooth': 50 #reduce the effect of noises in categorical features\n            \n         }\n\n\nfolds =KFold(n_splits=3, shuffle=True, random_state=42)\nprint(folds.n_splits)\naucs = list()\noof = np.zeros(len(train))\npredictions = np.zeros(len(test))\nfeature_importances = pd.DataFrame()\nfeature_importances['feature'] = train.columns\n\n#training_start_time = time()\nfor fold, (trn_idx, test_idx) in enumerate(folds.split(train, target)):\n    #start_time = time()\n    print('Training on fold {}'.format(fold + 1))\n    \n    trn_data = lgb.Dataset(train.iloc[trn_idx], label=target.iloc[trn_idx], categorical_feature=cats_all)\n    val_data = lgb.Dataset(train.iloc[test_idx], label=target.iloc[test_idx], categorical_feature=cats_all)\n    clf = lgb.train(lgb_params, trn_data, 10000, valid_sets = [trn_data, val_data], verbose_eval=200, early_stopping_rounds=200)\n    oof[test_idx] = clf.predict(train.iloc[test_idx], num_iteration=clf.best_iteration)\n    \n    feature_importances['fold_{}'.format(fold + 1)] = clf.feature_importance()\n    aucs.append(clf.best_score['valid_1']['auc'])\n    \n    predictions += clf.predict(test, num_iteration=clf.best_iteration) \/ folds.n_splits\n    \n    \nprint('-' * 50)\nprint('Mean auc:', np.mean(aucs))\nprint('-' * 50)\n","25fa6e1d":"feature_importances['average'] = feature_importances[['fold_{}'.format(fold + 1) for fold in range(folds.n_splits)]].mean(axis=1)\nfeature_importances.to_csv('feature_importances.csv')\n\nplt.figure(figsize=(15, 10))\nsns.barplot(data=feature_importances.sort_values(by='average', ascending=False).head(25), x='average', y='feature');\nplt.title('TOP 25 feature importance over {} folds average'.format(folds.n_splits));","97449a78":"#shap_values = shap.TreeExplainer(clf).shap_values(train)\n\n#shap.summary_plot(shap_values, train)","9f10182a":"sub = pd.DataFrame({'id': test_id, 'target': predictions})\nsub.to_csv('sub_lgb.csv', index=False)","c1d793ca":"sub.head()","8bc9c7b3":">We can see the feature imporatance changed.","83cfcc96":">Lgb sorts the categories according to the training objective at each split. More specifically, LightGBM sorts the histogram (for a categorical feature) according to its accumulated values (sum_gradient \/ sum_hessian) and then finds the best split on the sorted histogram. So the split can be made based on the variable being of one specific level or any subset of levels. You have 2^N splits available in comparision with e.g of 4 for OHE.\n\n>The algorithm behind above mechanism is  Fisher (1958) to find the optimal split over categories.\nhttp:\/\/www.csiss.org\/SPACE\/workshops\/2004\/SAC\/files\/fisher.pdf\n\nTBD...\n\n","25ff163b":"> This competition is an  opportunity to study the effects of different categorical features on GBDT algorithms(Lgb\/Xgb\/CatBoost) and see how gradient boosting algorithms handle Cats.\n> So these kernel series will be an overview on Cats Vs Gbdts.\n> In this kernel we run Lgb by Label encoding and next will specify the cats for Lgb to benchmark the difference\n\n> In future kernels we will investigate different encodings on Lgb and CatBoost as well as XGB.\n Specially follwing encoding will be investigated:\n> - One-Hot-Encoder (OHE) (dummy encoding)\n> - Frequency Encoder\n> - Target\/Mean Encoder (TE)\n> - Sum Encoder (Deviation Encoding or Effect Encoding)\n> - Weight Of Evidence Encoder (WOE)","eeef2dae":">##### here we specify categorical feats for lgb . The parameters didn't changed  but added 2 additive parameters (**'min_data_per_group' and 'cat_smooth'**)\n\n>Note: tuning lgb will get better result"}}