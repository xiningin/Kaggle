{"cell_type":{"4eb58148":"code","2b7c056c":"code","f650b060":"code","dade4473":"code","50c04ac9":"code","9acc34cf":"code","0428af72":"code","a45c09fb":"code","0db3db5f":"code","6fa75951":"code","c1931ae4":"code","f56e2cf4":"code","e99e983d":"code","46068a39":"code","0f26b392":"code","1f8f25d3":"code","447f02ba":"code","731b9c5c":"code","dd8f3fa0":"code","bb8917c3":"code","039ec6b5":"code","375cb751":"code","f1287e87":"code","e48dad72":"markdown","975f2aba":"markdown","8b28b458":"markdown","181bc3c1":"markdown","f1392cf0":"markdown","aedaa9ed":"markdown","2654b03c":"markdown","eda64c5a":"markdown","5401a4c3":"markdown","216ebdc1":"markdown","0a1d26a7":"markdown","b97f0bc7":"markdown","332bf564":"markdown","1b099111":"markdown","f562338b":"markdown","11be7abb":"markdown","3e838e7b":"markdown"},"source":{"4eb58148":"\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","2b7c056c":"dataset = pd.read_csv('\/kaggle\/input\/auto-insurance-in-sweden-small-dataset\/insurance.csv', skiprows = 5, header = None)\ndataset.head(10)","f650b060":"X = dataset.iloc[:,0].values\nX = X.reshape([X.shape[0], 1])\nY = dataset.iloc[:, -1].values","dade4473":"print(X)\nprint(Y)","50c04ac9":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, random_state = 1)","9acc34cf":"X_train","0428af72":"Y_train","a45c09fb":"X_mean = np.mean(X)\nX_mean","0db3db5f":"Y_mean = np.mean(Y)\nY_mean","6fa75951":"X_variance = X.var()\nX_variance","c1931ae4":"Y_variance = Y.var()\nY_variance","f56e2cf4":"def covariance(X, Y):\n    x_mean = np.mean(X)\n    y_mean = np.mean(Y)\n    covar = 0.0\n    for i in range(len(X)):\n        covar += (X[i] - x_mean) * (Y[i] - y_mean)\n    return covar\/len(X)\n\n\n\ncovar_xy = covariance(X, Y)\nprint(f'Cov(X,Y): {covar_xy}')","e99e983d":"dataset.cov()","46068a39":"def mse(y_true, y_pred):\n    \n    sq = ((y_true) - (y_pred)).astype('float')**2\n    mse_value = np.mean(sq)\n    \n    return mse_value\n    ","0f26b392":"from sklearn.linear_model import LinearRegression\n\nregressor = LinearRegression()\nregressor.fit(X_train, Y_train)","1f8f25d3":"y_pred = regressor.predict(X_train)\ny_pred","447f02ba":"plt.scatter(X_train, Y_train, color = 'red')\nplt.plot(X_train, y_pred)\nplt.xlabel('Claims')\nplt.ylabel('Total payment')\nplt.show()","731b9c5c":"y_test_pred = regressor.predict(X_test)\ny_test_pred","dd8f3fa0":"plt.scatter(X_test, Y_test, color = 'red')\nplt.plot(X_test, y_test_pred)\nplt.xlabel('Claims')\nplt.ylabel('Total payment')\nplt.show()","bb8917c3":"print(regressor.predict([[50.5]]))","039ec6b5":"mse(Y_train, y_pred)","375cb751":"from sklearn.metrics import mean_squared_error\nmse_al = mean_squared_error(Y_train, y_pred, squared= True)\nmse_al","f1287e87":"print(\"Coefficient of linear regression(b1): \", regressor.coef_)\nprint(\"Intercept of linear regressor(b0): \", regressor.intercept_)","e48dad72":"# Linear Regression","975f2aba":"# MSE: using the defined function mse()","8b28b458":"# Loading the data","181bc3c1":"# MSE: using scikit learn library","f1392cf0":"# Covariance function","aedaa9ed":"# Variance","2654b03c":"# Mean Squared Error (MSE)","eda64c5a":"# Predicting the test set values","5401a4c3":"# Spliting the Date into feature and label","216ebdc1":"# Predicting the values","0a1d26a7":"# Visualizing the Test set results","b97f0bc7":"# Spliting the data into train and test set","332bf564":"# Covariance","1b099111":"# Mean","f562338b":"# Visualizing the Train set result","11be7abb":"# Making a single prediction","3e838e7b":"# Coefficients of Linear Regression"}}