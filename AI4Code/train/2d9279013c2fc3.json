{"cell_type":{"5f4927a5":"code","b5ce1831":"code","25de9bb3":"code","af7e17a2":"code","4813f8b1":"code","935c463b":"code","b17c642f":"code","10b7f57e":"code","3d7d8396":"code","f91b813a":"code","eb64eaf7":"code","93e9b7d7":"code","e37a2a50":"code","f4eb4ba0":"code","b5c785ec":"code","714d52dd":"code","a8c987a3":"code","f161e2b7":"code","3112f8c6":"code","cf95db34":"code","15d436d1":"code","896c13e6":"code","6c4082a1":"code","ecfece25":"code","c38dbc70":"code","8b7afdda":"code","60f55b2c":"code","310fc234":"code","19a70597":"code","5ab2f0c8":"code","1f76764a":"code","004f50b2":"code","ba692921":"code","54e48b9d":"code","1e0eb0a2":"code","3d1d6eef":"code","9271ab87":"code","3b659bc8":"code","0bf77677":"code","127a20e1":"code","1035e40e":"code","c88a1552":"code","83ead96c":"code","fdbd2663":"code","84844f77":"code","10ed7c85":"code","f4bd3d00":"code","72dc7c25":"code","62bb6476":"code","758bef17":"code","614ff0be":"code","61c09468":"code","6752748f":"code","64763450":"code","ebfb679b":"code","03d67c0d":"code","b5889b66":"code","c756b78a":"code","a9699115":"code","0c0769bb":"code","7dcf957b":"code","7744fc4e":"code","f5992c33":"code","a8a4c472":"code","472b9547":"code","0ca0e6e8":"code","7a3c5fff":"code","c87922e4":"code","ef7fe87d":"code","14fb67fa":"code","48610b7b":"code","41ed5c64":"code","ab7a698d":"code","487c85b5":"code","f3c4980e":"code","6bd4edcc":"code","bf05f089":"code","d4c8063e":"code","0d183f97":"code","ffeb97e4":"code","547eefbb":"code","64b3cf79":"code","aa73a1c0":"code","b1a1b54e":"code","d0767b03":"code","21ecadc7":"code","a0ffe55b":"code","4d791b5a":"code","ec763305":"code","0ecb862f":"code","954dd963":"code","9e260251":"code","d1332ce8":"code","2a3f71b8":"code","b529c5b3":"code","2a190d4d":"code","f9ff0d45":"code","8242fefe":"code","5d2c915c":"code","8054dfeb":"code","1e3e68e1":"code","db95a4b5":"code","49455431":"code","a16bd547":"code","e5cd78c1":"code","cedd8ae6":"code","84edbfdb":"code","7be0ac7a":"code","12ef5e82":"code","356a5157":"code","00ad89a8":"code","26cba390":"code","23188fc7":"code","3e0866c3":"code","0604d026":"code","02fa78f8":"code","d7c8c481":"code","344b8462":"code","15188dc9":"code","be803643":"code","a9984db5":"code","4110da42":"code","32cb66ba":"code","1c2ab151":"code","ebe64d92":"code","e1af1289":"code","72f89a99":"markdown","4af5d7ee":"markdown","04a92ec0":"markdown","ba343207":"markdown","93a97279":"markdown","b1851428":"markdown","25704d8d":"markdown","94158de3":"markdown","e909129f":"markdown","64c90811":"markdown","18ffc1fb":"markdown","46b7142c":"markdown","2b2ae54d":"markdown","12361e9c":"markdown","e3b2cb20":"markdown","6aabb04b":"markdown","df366a48":"markdown","d755e7c6":"markdown","265fd85b":"markdown","8bbb3132":"markdown","48d7c224":"markdown","53e9f70f":"markdown","e9a2bda4":"markdown","67d6866f":"markdown","4e1cef3d":"markdown","93988903":"markdown","48f6e88c":"markdown","6c8ea9ff":"markdown","468df5e6":"markdown","1df7cacd":"markdown","a34297ae":"markdown","c1daac34":"markdown","11b18582":"markdown","eed21822":"markdown","bb217ec5":"markdown","a7b286c3":"markdown","c405f5f9":"markdown","cec1cb5c":"markdown","3f7af0be":"markdown","e2fc84b5":"markdown","dcb92b52":"markdown","6c10a1ac":"markdown","85a045da":"markdown","83aa3f91":"markdown","e78bbb8a":"markdown","5921166f":"markdown","91c42c9e":"markdown","5a5a7f7f":"markdown","3e16b9f0":"markdown","455baadf":"markdown","8d154ff9":"markdown","30e12beb":"markdown","519b8180":"markdown","5ca59d26":"markdown"},"source":{"5f4927a5":"import seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom time import time\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom catboost import CatBoostRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import StackingRegressor\nfrom mlxtend.regressor import StackingCVRegressor\nfrom sklearn import preprocessing\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nimport warnings\npd.set_option(\"display.max_columns\", 100)\n\nfrom datetime import datetime\n\ndef fxn():\n    warnings.warn(\"deprecated\", DeprecationWarning)\n\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    fxn()\n\n\n# for Q-Q plots\nimport scipy.stats as stats\nfrom sklearn.base import clone\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","b5ce1831":"data=pd.read_csv('\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/train.csv')\n","25de9bb3":"data.head()","af7e17a2":"data.info()","4813f8b1":"col_names=list(data.columns)\nfor index,col_name in enumerate(col_names):\n    print(index ,\" :\" ,col_name)","935c463b":"data=data.rename(columns={col_names[4]: \"Temperature(C)\", col_names[5]: \"humidity(%)\",col_names[6]:\"Wind Speed(m\/s)\",\\\n              col_names[7]:\"Visibility(10m)\",col_names[8]:\"Dew Temperature(C)\",col_names[2]:\"Number of rented bikes\"})","b17c642f":"data.columns","10b7f57e":"data.isna().sum().plot(kind=\"bar\")\nplt.show()","3d7d8396":"data.isna().sum()","f91b813a":"\ndata.info()","eb64eaf7":"def convert_date(df):\n    df[\"Date\"]=pd.to_datetime(df[\"Date\"],format=\"%d\/%m\/%Y\") \n    df[\"month\"]=df[\"Date\"].dt.month\n    df[\"day\"]=df[\"Date\"].dt.day\n    df[\"year\"]=df[\"Date\"].dt.year\n    df['dayofweek'] = df['Date'].dt.dayofweek\n    df['month_start'] = df['Date'].dt.is_month_start\n    df['woy'] = df['Date'].dt.isocalendar().week.astype(int)\n    \n    return df","93e9b7d7":"data=convert_date(data)","e37a2a50":"data.head()","f4eb4ba0":"data.describe().T","b5c785ec":"fig, ax = plt.subplots(2, 3, figsize=(25, 20))\nsns.boxplot(y=data[\"Number of rented bikes\"],ax=ax[0][0])\nax[0][0].set_title(\"Box plot on Count \")\nsns.boxplot(x=\"Seasons\",y=\"Number of rented bikes\",data=data,ax=ax[0][1])\nax[0][1].set_title(\"Box plot on Count Across Seasons\")\nsns.boxplot(x=\"Hour\",y=\"Number of rented bikes\",data=data,ax=ax[0][2])\nax[0][2].set_title(\"Box plot on Count Across hour\")\nsns.boxplot(x=\"Holiday\",y=\"Number of rented bikes\",data=data,ax=ax[1][0])\nax[1][0].set_title(\"Box plot on Count Across Holiday\")\nsns.boxplot(x=\"Functioning Day\",y=\"Number of rented bikes\",data=data,ax=ax[1][1])\nax[1][1].set_title(\"Box plot on Count Across Functioning day\")\nsns.boxplot(x=\"dayofweek\",y=\"Number of rented bikes\",data=data,ax=ax[1][2])\nax[1][2].set_title(\"Box plot on Count Across Day of week\")","714d52dd":"plt.figure(figsize=(20,20))\nsns.heatmap(data.corr(\"pearson\"),\n            vmin=-1, vmax=1,\n            cmap='coolwarm',\n            annot=True, \n            square=True)","a8c987a3":"df1Corr=pd.DataFrame(data.corr().unstack().sort_values(ascending=False)['Number of rented bikes'],columns=['Correlation to the target'])\ndf1Corr.style.background_gradient(cmap=sns.light_palette(\"red\", as_cmap=True))","f161e2b7":"data.plot(x='Date',y='Number of rented bikes',kind='kde');","3112f8c6":"df1VizSeasons=pd.DataFrame(data.groupby('Seasons').sum()['Number of rented bikes'].sort_values(ascending=False))\ndf1VizSeasons.style.background_gradient(cmap=sns.light_palette(\"red\", as_cmap=True))","cf95db34":"df1VizSolarRadiation=pd.DataFrame(data.groupby('Seasons').sum()['Solar Radiation (MJ\/m2)'].sort_values(ascending=False))\ndf1VizSolarRadiation.style.background_gradient(cmap=sns.light_palette(\"red\", as_cmap=True))","15d436d1":"plt.figure(figsize=(9,8))\ndata.groupby('Seasons').sum()['Number of rented bikes'].plot.pie();\nplt.title(\"Number of rented bikes share per season\");","896c13e6":"data.groupby('Solar Radiation (MJ\/m2)').mean()['Number of rented bikes'].hist()","6c4082a1":"data.groupby('Hour').sum()['Number of rented bikes'].plot.bar()","ecfece25":"df1VizDays=pd.DataFrame(data.groupby('dayofweek').sum()['Number of rented bikes'].sort_values(ascending=False))\ndf1VizDays.style.background_gradient(cmap=sns.light_palette(\"red\", as_cmap=True))","c38dbc70":"data.groupby('Temperature(C)').mean()['Number of rented bikes'].plot()","8b7afdda":"data.groupby('Rainfall(mm)').mean()['Number of rented bikes'].hist();","60f55b2c":"data.groupby('Snowfall (cm)')['Number of rented bikes'].mean().hist();","310fc234":"#plt.figure(figsize=(14,14))\nsns.barplot(data=data, x='year', y=data['Number of rented bikes']);","19a70597":"sns.barplot(data=data, x='month', y=data['Number of rented bikes'], hue='year');\n","5ab2f0c8":"plt.figure(figsize=(14,14))\nsns.pointplot(data=data, x='Hour', y=data['Number of rented bikes'], hue='dayofweek');","1f76764a":"def drop_cols(df):\n    df=df.drop(['ID','Date'],axis=1)\n    return df","004f50b2":"data=drop_cols(data)","ba692921":"data.info()","54e48b9d":"features_plot=['Number of rented bikes',  'Temperature(C)', 'humidity(%)',\n       'Wind Speed(m\/s)', 'Visibility(10m)', 'Dew Temperature(C)',\n       'Solar Radiation (MJ\/m2)', 'Rainfall(mm)', 'Snowfall (cm)']","1e0eb0a2":"data[features_plot].describe()","3d1d6eef":"def my_plot(feature):\n    plt.hist(data[feature])\n    plt.title(feature)\n    plt.show()\n        \nfor i in features_plot:\n    my_plot(i)","9271ab87":"def diagnostic_plots(df, variable):\n    # function takes a dataframe (df) and\n    # the variable of interest as arguments\n\n    # define figure size\n    plt.figure(figsize=(16, 4))\n\n    # histogram\n    plt.subplot(1, 3, 1)\n    sns.histplot(df[variable], bins='auto')\n    plt.title('Histogram')\n\n    # Q-Q plot\n    plt.subplot(1, 3, 2)\n    stats.probplot(df[variable], dist=\"norm\", plot=plt)\n    plt.ylabel('Variable quantiles')\n\n    # boxplot\n    plt.subplot(1, 3, 3)\n    sns.boxplot(y=df[variable])\n    plt.title('Boxplot')\n\n    plt.show()","3b659bc8":"# Average values across each of the categorical columns \nfig = plt.figure(figsize=(15, 12))\naxes = fig.add_subplot(2, 2, 1)\ngroup_season = pd.DataFrame(data.groupby(['Seasons'])['Number of rented bikes'].mean()).reset_index()\nsns.barplot(data=group_season, x='Seasons', y='Number of rented bikes', ax=axes)\naxes.set(xlabel='Seasons', ylabel='Number of rented bikes', title='Average bike rentals across Seasons')\n\naxes = fig.add_subplot(2, 2, 2)\ngroup_workingday = pd.DataFrame(data.groupby(['Functioning Day'])['Number of rented bikes'].mean()).reset_index()\nsns.barplot(data=group_workingday, x='Functioning Day', y='Number of rented bikes', ax=axes)\naxes.set(xlabel='Functioning Day', ylabel='Number of rented bikes', title='Average bike rentals across Working Day')\n\naxes = fig.add_subplot(2, 2, 3)\ngroup_season = pd.DataFrame(data.groupby(['Holiday'])['Number of rented bikes'].mean()).reset_index()\nsns.barplot(data=group_season, x='Holiday', y='Number of rented bikes', ax=axes)\naxes.set(xlabel='Holiday', ylabel='Number of rented bikes', title='Average bike rentals across Holiday')\nplt.show()","0bf77677":"# seaborn boxplots across hours\nf, axes = plt.subplots(1, 1, figsize=(15, 6))\nsns.boxplot(data=data, y='Number of rented bikes', x='Hour', hue='Functioning Day', ax=axes)\nhandles, _ = axes.get_legend_handles_labels()\naxes.legend(handles, ['Not a Functioning Day', 'Functioning Day'])\naxes.set(title='Hourly Count based on Functioning day or not')\n\nplt.show()","127a20e1":"\n# Plots of average count across hour in a day for various categories\n\nf, axes = plt.subplots(nrows=2, ncols=1, figsize=(15, 18))\ngroup_work_hour = pd.DataFrame(data.groupby(['Functioning Day', 'Hour'])['Number of rented bikes'].mean()).reset_index()\nsns.pointplot(data=group_work_hour, x='Hour', y='Number of rented bikes', hue='Functioning Day', ax=axes[0], legend=True)\nhandles, _ = axes[0].get_legend_handles_labels()\naxes[0].legend(handles, ['Not a Functioning Day', 'Functioning Day'])\naxes[0].set(xlabel='Hour in the day', ylabel='Functioning Day', title='Average Bike Rentals by the day if Working day or Not')\n\nhue_order= [0,1,2,3,4,5,6]\ngroup_day_hour = pd.DataFrame(data.groupby(['day', 'Hour'])['Number of rented bikes'].mean()).reset_index()\nsns.pointplot(data=group_day_hour, x='Hour', y='Number of rented bikes', hue='day', ax=axes[1], hue_order=hue_order)\naxes[1].set(xlabel='Hour in the day', ylabel='Number of rented bikes', title='Average Bike Rentals by the day across Weekdays')\n\n\nplt.show()","1035e40e":"# Average Monthly Count Distribution plot\nf, axes = plt.subplots(nrows=1, ncols=1, figsize=(15, 6))\ngroup_month = pd.DataFrame(data.groupby(['month', 'Functioning Day'])['Number of rented bikes'].mean()).reset_index()\nsns.barplot(data=group_month, x='month', y='Number of rented bikes', hue='Functioning Day', ax=axes)\naxes.set(xlabel='Month', ylabel='Number of rented bikes', title='Average bike rentals per Month')\nhandles, _ = axes.get_legend_handles_labels()\naxes.legend(handles, ['Not a Functioning Day', 'Functioning Day'])\nplt.show()","c88a1552":"# Regression Plots with respect to Temperature, Humidity and Windspeed\nfig = plt.figure(figsize=(18, 8))\naxes = fig.add_subplot(1, 3, 1)\nsns.regplot(data=data, x='Temperature(C)', y='Number of rented bikes',ax=axes)\naxes.set(title='Reg Plot for Temperature vs. Number of rented bikes')\naxes = fig.add_subplot(1, 3, 2)\nsns.regplot(data=data, x='humidity(%)', y='Number of rented bikes',ax=axes, color='r')\naxes.set(title='Reg Plot for Humidity vs. Number of rented bikes')\naxes = fig.add_subplot(1, 3, 3)\nsns.regplot(data=data, x='Wind Speed(m\/s)', y='Number of rented bikes',ax=axes, color='g')\naxes.set(title='Reg Plot for Windspeed vs. Number of rented bikes')\nplt.show()","83ead96c":"diagnostic_plots(data, 'Number of rented bikes')","fdbd2663":"#showing distribution for temperature\ndiagnostic_plots(data, 'Temperature(C)')","84844f77":"diagnostic_plots(data, 'humidity(%)')","10ed7c85":"diagnostic_plots(data, 'Wind Speed(m\/s)')","f4bd3d00":"diagnostic_plots(data, 'Visibility(10m)')","72dc7c25":"diagnostic_plots(data, 'Dew Temperature(C)')","62bb6476":"diagnostic_plots(data, 'Solar Radiation (MJ\/m2)')","758bef17":"diagnostic_plots(data,'Rainfall(mm)')","614ff0be":"diagnostic_plots(data,'Snowfall (cm)')","61c09468":"data[data['Snowfall (cm)']>0].shape","6752748f":"data.shape   # the data size is much larger than number of outliers in data","64763450":"def find_skewed_boundaries(df, variable, distance):\n\n    # Let's calculate the boundaries outside which sit the outliers\n    # for skewed distributions\n\n    # distance passed as an argument, gives us the option to\n    # estimate 1.5 times or 3 times the IQR to calculate\n    # the boundaries.\n\n    IQR = df[variable].quantile(0.75) - df[variable].quantile(0.25)\n\n    lower_boundary = df[variable].quantile(0.25) - (IQR * distance)\n    upper_boundary = df[variable].quantile(0.75) + (IQR * distance)\n\n    return upper_boundary, lower_boundary","ebfb679b":"#Finding upper and lower limt for windspeed\nRM_upper_limit, RM_lower_limit = find_skewed_boundaries(data, 'Wind Speed(m\/s)', 1.5)\nRM_upper_limit, RM_lower_limit","03d67c0d":"# replace the outliers of windspeed by the maximum and minimum limit\n\ndata['Wind Speed(m\/s)']= np.where(data['Wind Speed(m\/s)'] > RM_upper_limit, RM_upper_limit,\n                       np.where(data['Wind Speed(m\/s)'] < RM_lower_limit, RM_lower_limit,data['Wind Speed(m\/s)']))","b5889b66":"diagnostic_plots(data, 'Wind Speed(m\/s)')","c756b78a":"#Finding the maximum and minimum for solar radiation\nRM_upper_limit, RM_lower_limit = find_skewed_boundaries(data, 'Solar Radiation (MJ\/m2)', 1.5)\nRM_upper_limit, RM_lower_limit","a9699115":" # replace the outliers by the maximum and minimum limit\n\ndata['Solar Radiation (MJ\/m2)']= np.where(data['Solar Radiation (MJ\/m2)'] > RM_upper_limit, RM_upper_limit,\n                       np.where(data['Solar Radiation (MJ\/m2)'] < RM_lower_limit, RM_lower_limit,data['Solar Radiation (MJ\/m2)']))","0c0769bb":"diagnostic_plots(data, 'Solar Radiation (MJ\/m2)')","7dcf957b":"#Finding the maximum and minimum for solar radiation\nRM_upper_limit, RM_lower_limit = find_skewed_boundaries(data, 'Snowfall (cm)', 3)\nRM_upper_limit, RM_lower_limit","7744fc4e":"data['Snowfall (cm)']= np.where(data['Snowfall (cm)'] > RM_upper_limit, RM_upper_limit,\n                       np.where(data['Snowfall (cm)'] < RM_lower_limit, RM_lower_limit,data['Snowfall (cm)']))","f5992c33":"plt.figure(figsize=(20,20))\ncorrelation=data.corr()\nsns.heatmap(correlation,annot=True)","a8a4c472":"# data.drop(\"Dew Temperature(C)\",axis=1,inplace=True)","472b9547":"data.columns","0ca0e6e8":"def additional(df):\n    df['ideal'] = df[['Temperature(C)', 'Wind Speed(m\/s)']].apply(lambda x: (0, 1)[x['Temperature(C)'] > 27 and x['Wind Speed(m\/s)'] < 30], axis = 1)\n    df['sticky'] = df[['humidity(%)', 'Functioning Day']].apply(lambda x: (0, 1)[x['Functioning Day'] == 1 and x['humidity(%)'] >= 60], axis = 1)\n    df['solar_visibilty']=df[['Solar Radiation (MJ\/m2)', 'Visibility(10m)']].apply(lambda x: (0, 1)[x['Solar Radiation (MJ\/m2)'] <0.2 and x['Visibility(10m)'] > 1600], axis = 1)\n    df[\"windchill\"]=13.12+0.6215*df['Temperature(C)']-11.37*(df['Wind Speed(m\/s)']*3.6)**0.16+0.3965*df['Temperature(C)'] \\\n    *(df['Wind Speed(m\/s)']*3.6)**0.16\n    df['newweather']=17.3+df['Temperature(C)']-0.11*df['humidity(%)']+0.34*df['Wind Speed(m\/s)']\n    df['hour_sin'] = np.sin(2 * np.pi * df['Hour']\/23.0)\n    df['hour_cos'] = np.cos(2 * np.pi * df['Hour']\/23.0)\n    df['month_sin'] = np.sin(2 * np.pi * df['month']\/12)\n    df['month_cos'] = np.cos(2 * np.pi * df['month']\/12)\n    df['log_wind']=np.log1p(df['Wind Speed(m\/s)'])\n    df['log_hum']=np.log1p(df['humidity(%)'])\n    \n    return df","7a3c5fff":"cond1 = data['Functioning Day']== 'Yes'\ncond2 = data['Hour'].isin([7,8,9,17,18,19])\ncond3 = data['Hour'].isin([10,11,12,13,14,15,16])\ncond4 = data['Hour'].isin([0,1,2,3,4,5,6,20,21,22,23])\n\nconditions =[~cond1,cond1&cond2,cond1&cond3,cond1&cond4]\nvals = ['No','High','Medium','Low']\ndata['Map demand'] = np.select(conditions,vals)\n","c87922e4":"data=additional(data)","ef7fe87d":"data.head()","14fb67fa":"cat_features = data.columns[data.dtypes=='object']\ncat_features=list(cat_features)","48610b7b":"sns.countplot(x=cat_features[0],data=data)\nplt.show()","41ed5c64":"sns.countplot(x=cat_features[1],data=data)\nplt.show()","ab7a698d":"sns.countplot(x=cat_features[2],data=data)\nplt.show()","487c85b5":"def count_category(name):\n    print(name)\n    print(data[name].value_counts())\n    print(\"-------------------------------------------------\")\nfor i in cat_features:\n    count_category(i)","f3c4980e":"count_bikes_by_hour = data.groupby(\"Hour\")[\"Number of rented bikes\"].sum()\nprint(count_bikes_by_hour)","6bd4edcc":"count_bikes_by_hour.plot(kind=\"bar\",\ntitle=\"count bikes by hour\")\nplt.savefig('count bikes by hr')\nplt.show()","bf05f089":"count_bikes_by_Holiday = data.groupby(\"Holiday\")[\"Number of rented bikes\"].sum()\nprint(count_bikes_by_Holiday)","d4c8063e":"data.groupby(\"Holiday\")[\"Number of rented bikes\"].sum().plot(kind=\"bar\")\nplt.savefig(\"count bikes by holiday\")\nplt.show()","0d183f97":"count_bikes_by_funcday = data.groupby(\"Functioning Day\")[\"Number of rented bikes\"].sum()\nprint(count_bikes_by_funcday)","ffeb97e4":"data.groupby(\"Functioning Day\")[\"Number of rented bikes\"].sum().plot(kind=\"bar\")\nplt.savefig(\"count_bikes_by_funcday\")\nplt.show()","547eefbb":"count_bikes_by_Season = data.groupby(\"Seasons\")[\"Number of rented bikes\"].sum()\nprint(count_bikes_by_Season)","64b3cf79":"count_bikes_by_Season.plot(kind=\"bar\")","aa73a1c0":"def rolling_mean(df,cols,window=3):\n    for col in cols:\n        new_col = col+'_rolled'\n        df[new_col] = df[col].rolling(window=window).mean()\n    return df\n","b1a1b54e":"data =  rolling_mean(data,['Temperature(C)','Wind Speed(m\/s)','Rainfall(mm)',\n                           'Snowfall (cm)','humidity(%)','Visibility(10m)'])\n","d0767b03":"def shifting(df,cols):\n    for col in cols:\n        new_col = col+'_shifted'\n        df[new_col] = df[col].shift(periods=-1)\n    return df\ndata =  shifting(data,['Temperature(C)','Wind Speed(m\/s)','Rainfall(mm)', 'Snowfall (cm)','humidity(%)','Visibility(10m)'])\ndef shifting_1(df,cols):\n    for col in cols:\n        new_col = col+'_shifted1'\n        df[new_col] = df[col].shift(periods=-2)\n    return df\ndata =  shifting_1(data,['Temperature(C)','Wind Speed(m\/s)','Rainfall(mm)', 'Snowfall (cm)'])\n\ndef shifting_2(df,cols):\n    for col in cols:\n        new_col = col+'_shifted2'\n        df[new_col] = df[col].shift(periods=-3)\n    return df\ndata =  shifting_2(data,['Temperature(C)','Wind Speed(m\/s)','Rainfall(mm)', 'Snowfall (cm)'])","21ecadc7":"data=data.fillna(data.mean())","a0ffe55b":"data.head()","4d791b5a":"def conv_cat_features(df):\n    df['Holiday'].replace({\"No Holiday\":1, \"Holiday\":0}, inplace=True)\n    df['Functioning Day'].replace({\"Yes\":1, \"No\":0}, inplace=True)\n    data_cat_transformed = pd.get_dummies(df, drop_first=True)\n    return data_cat_transformed","ec763305":"data_cat_transformed=conv_cat_features(data)\n# Print the number of features after one-hot encoding\nprint(\"{} total features after one-hot encoding.\".format(len(data_cat_transformed.columns)))\nprint(data_cat_transformed.columns)#","0ecb862f":"# Split the data into features and target label\nX = data_cat_transformed.drop('Number of rented bikes', axis=1)\ny = data_cat_transformed['Number of rented bikes']\ndef custom_train_valid_split(data, cutoff_day=15):\n    train = data[data['day'] <= cutoff_day]\n    valid = data[data['day'] > cutoff_day]\n    return train,valid\n\ntrain,valid =  custom_train_valid_split(data, cutoff_day=15)\ntrain_idx = train.index\nvalid_idx = valid.index\nmyCViterator = []\nmyCViterator.append( (train_idx, valid_idx) )","954dd963":"def RMSLE(y_train,y_pred):\n    return np.sqrt(mean_squared_log_error(y_train, y_pred))","9e260251":"def train_predict(regressor): \n    '''\n    inputs:\n       - regressor: the learning algorithm to be trained and predicted on\n    '''\n    \n    results = {}\n    \n    # Fit the classifier to the training data and Calculate the time\n    start_train = time()\n    regressor = regressor.fit(X, y)\n    end_train = time()\n    results['train_time'] = round((end_train-start_train), 2)\n\n    # Predict the training\/testing labels and Calculate the time\n    start_test = time()\n    y_pred_train = regressor.predict(X)\n    y_pred_test = regressor.predict(test_cat_transformed)\n    end_test = time()   \n    results['pred_time'] = round((end_test-start_test), 2)\n    results['RMSLE_train'] =round(RMSLE(y, y_pred_train),4) \n    results['Rsquared_train'] = r2_score(y, y_pred_train)\n    results['MSE_train'] = mean_squared_error(y, y_pred_train)\n    return results,y_pred_test","d1332ce8":"test_df=pd.read_csv('\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/test.csv')\ntest_df_copy=test_df.copy()","2a3f71b8":"test_df.describe()","b529c5b3":"test_df.head()","2a190d4d":"test_df.info()","f9ff0d45":"test_df.columns","8242fefe":"test_df=test_df.rename(columns={col_names[4]: \"Temperature(C)\", col_names[5]: \"humidity(%)\",col_names[6]:\"Wind Speed(m\/s)\",\\\n              col_names[7]:\"Visibility(10m)\",col_names[8]:\"Dew Temperature(C)\",col_names[2]:\"Number of rented bikes\"})","5d2c915c":"test_df=convert_date(test_df)","8054dfeb":"cond1 = test_df['Functioning Day']=='Yes'\ncond2 = test_df['Hour'].isin([7,8,9,17,18,19])\ncond3 = test_df['Hour'].isin([10,11,12,13,14,15,16])\ncond4 = test_df['Hour'].isin([0,1,2,3,4,5,6,20,21,22,23])\nconditions =[~cond1,cond1&cond2,cond1&cond3,cond1&cond4]\nvals = ['No','High','Medium','Low']\ntest_df['Map demand'] = np.select(conditions,vals)","1e3e68e1":"test_df=test_df.drop(['ID','Date'],axis=1)","db95a4b5":"test_df=additional(test_df)","49455431":"test_df =  rolling_mean(test_df,['Temperature(C)','Wind Speed(m\/s)','Rainfall(mm)', 'Snowfall (cm)','humidity(%)','Visibility(10m)'])\ntest_df =  shifting(test_df,['Temperature(C)','Wind Speed(m\/s)','Rainfall(mm)', 'Snowfall (cm)','humidity(%)','Visibility(10m)'])\ntest_df =  shifting_1(test_df,['Temperature(C)','Wind Speed(m\/s)','Rainfall(mm)', 'Snowfall (cm)'])\ntest_df =  shifting_2(test_df,['Temperature(C)','Wind Speed(m\/s)','Rainfall(mm)', 'Snowfall (cm)'])\ntest_df=test_df.fillna(test_df.mean())","a16bd547":"test_cat_transformed=conv_cat_features(test_df)","e5cd78c1":"# parameters={\n#  \"learning_rate\"    :np.arange(0.04,0.2,0.01)   ,                             # [0.05,0.06,0.065,0.07,0.075,0.08,0.085,0.09,0.10,0.125,0.15,0.2] ,\n#   \"max_depth\"        :np.arange(4,16,1) ,                    #[4,5,6,7,8,9,10]\n#   \"min_child_weight\" : np.arange(11,17, 1),  #[1,2,3,4,5,6,7,8,9,10],\n#   \"gamma\"            : np.arange(2,10,0.5)  ,               #    [0.5,1,2,3,5,7,6,8,9,10],\n#   \"n_estimators\"     :np.arange(2500,3500, 50),      # [500,700,800,900,1000,1200,1300,1400,1500,1600,1700,1800,1900,2000,2200,2500,2750],\n#   \"subsample\"        :np.arange(0.7, 1, 0.02) ,\n#   \"colsample_bytree\" :np.arange(0.4,1,0.05), # [0.7,0.75,0.8,0.85,0.9,0.95,1],\n#   \"tree_method\"    : [\"gpu_hist\"]\n#      }","cedd8ae6":"# def model_tuning(reg, parameters):    \n\n#     # Evaluate using neg_mean_squared_log_error \n#     #scorer = make_scorer(RMSLE,greater_is_better=False)\n\n#     # Perform grid search on the regressor and tune parameters, using scorer evaluation\n#     grid_obj = RandomizedSearchCV(estimator=reg, param_distributions=parameters,n_iter=300, \n#                                   scoring=\"neg_mean_squared_log_error\",n_jobs=-1,cv=5,verbose=3)\n\n#     # Fit the grid search object to the training data and find the optimal parameters\n#     grid_fit = grid_obj.fit(X, y)\n\n#     # Get the best estimator\n#     best_clf = grid_fit.best_estimator_\n#     print(f\"best mean cross validation score: {grid_fit.best_score_}\")\n#     print(f\"best parameters: {grid_fit.best_params_}\")\n    \n#     # Make predictions using the optimized and the best model\n#     y_best_pred = best_clf.predict(test_cat_transformed)\n    \n#     return best_clf,grid_fit, y_best_pred","84edbfdb":"# clf, best_clf,grid_fit, y_best_pred=model_tuning(regressor, parameters)","7be0ac7a":"# best_clf","12ef5e82":"# grid_fit","356a5157":"X_train=X.copy()\nX_test=test_cat_transformed.copy()","00ad89a8":"print(X_train.shape)\nprint(X_test.shape)","26cba390":"X_train_cat = X_train.copy()\nX_test_cat = X_test.copy()","23188fc7":"X_train_xgb=X_train.drop(['hour_sin', 'hour_cos','month_sin', 'month_cos','woy','windchill', \n                      'newweather','Temperature(C)_rolled','Dew Temperature(C)','Visibility(10m)_rolled',\n                      'humidity(%)','Visibility(10m)_shifted','Wind Speed(m\/s)_rolled','Seasons_Spring', \n                      'Seasons_Summer','Seasons_Winter','log_hum'],axis=1)\nX_test_xgb=X_test.drop(['hour_sin', 'hour_cos','month_sin', 'month_cos','woy','windchill', \n                    'newweather','Temperature(C)_rolled','Dew Temperature(C)','Visibility(10m)_rolled',\n                    'humidity(%)','Visibility(10m)_shifted','Wind Speed(m\/s)_rolled','Seasons_Spring',\n                    'Seasons_Summer','Seasons_Winter','log_hum'],axis=1)","3e0866c3":"xgb_v = XGBRegressor(\n   objective='count:poisson',random_state=42)\n\n\n\nxgb= XGBRegressor(\n    objective='count:poisson',random_state=42,\n   subsample= 0.83, n_estimators= 3000, \n   min_child_weight= 16, max_depth= 5, \n   learning_rate= 0.055, gamma= 1, colsample_bytree= 0.5)\n\ncatboost_v=CatBoostRegressor(objective='Poisson',iterations=4000,l2_leaf_reg=1,learning_rate=0.054  , silent = True)\ncatboosttrial=CatBoostRegressor(objective='Poisson',iterations=4000,l2_leaf_reg=1,learning_rate=0.054,silent=True)                              \nxgb_models={\n    \"XGB_vanella\":xgb_v,\n    \"XGB_mod\" : xgb }\ncat_models ={\n    \"Catbbost_mod\" :catboosttrial,\n    \"Catboost_Vanilla\" :catboost_v}","0604d026":"columns = ['Classifier', 'RMSLE']\n\ndf_scores_cat = pd.DataFrame(columns=columns)\nfor name, model in cat_models.items():\n    model.fit(X_train_cat, y)\n    Y_predicted = model.predict(X_train_cat)\n    rmsle = np.sqrt(mean_squared_log_error(y, Y_predicted))\n    df_row = pd.DataFrame([[name, rmsle]], columns=columns)\n    df_scores_cat = df_scores_cat.append(df_row, ignore_index=True)","02fa78f8":"columns = ['Classifier', 'RMSLE']\n\ndf_scores_xgb = pd.DataFrame(columns=columns)\nfor name, model in xgb_models.items():\n    model.fit(X_train_xgb, y)\n    Y_predicted = model.predict(X_train_xgb)\n    rmsle = np.sqrt(mean_squared_log_error(y, Y_predicted))\n    df_row = pd.DataFrame([[name, rmsle]], columns=columns)\n    df_scores_xgb = df_scores_xgb.append(df_row, ignore_index=True)","d7c8c481":"df_scores_cat.sort_values(by=['RMSLE'])","344b8462":"df_scores_xgb.sort_values(by=['RMSLE'])","15188dc9":"from xgboost import plot_importance, plot_tree\nfig = plt.figure(figsize=(15,12))\nfig = plot_importance(xgb_v, height=0.9,max_num_features = 25)\nplt.show()","be803643":"fig = plt.figure(figsize=(15,12))\nfig = plot_importance(xgb, height=0.9,max_num_features = 25)\nplt.show()","a9984db5":"y_cat_pred=catboosttrial.predict(X_test_cat)","4110da42":"y_xgb_pred=xgb.predict(X_test_xgb)","32cb66ba":"# #getting the output from train predicgt func\ntest_df_copy['yxgb']=y_xgb_pred.astype('int')\ntest_df_copy['ycat']=y_cat_pred.astype('int')","1c2ab151":"yavg = 0.64*test_df_copy['yxgb'] + 0.36*test_df_copy['ycat']\ntest_df_copy['y'] = yavg.astype('int')","ebe64d92":"test_df_copy[test_df_copy[\"Functioning Day\"]=='No']","e1af1289":"test_df_copy[['ID','y']].to_csv(\"submission.csv\",index=False)","72f89a99":"# Plot Feature importance from Xgboostregressor with best parameters after hyperparameter tuning","4af5d7ee":"# Rented bikes vs Solar radiation","04a92ec0":"# Dew Temperature","ba343207":"# Create Training Model","93a97279":"# Visibility","b1851428":"# Rain vs rented bikes","25704d8d":"## showing distribution of rented bikes","94158de3":"# Seasons with most rents\u00b6","e909129f":"# Getting the results on Test Data","64c90811":"Days are encoded 0 Mondays and 6 Sundays","18ffc1fb":"# Rented bikes vs Temperature, Humidity and Windspeed","46b7142c":"# Hourly count based on functioning day","2b2ae54d":"#  Sorted correlation of variables to the target","12361e9c":"# Showing the distribution of categorical variables","e3b2cb20":"# Check the outliers of Data","6aabb04b":"# Snowfall","df366a48":"# Rolling Mean with window of 3","d755e7c6":"# Plotting average bike count for each hour as a function of various categories.","265fd85b":"# Checking Null Values","8bbb3132":"# Rented bikes vs Days of the week","48d7c224":"# Dropping not important Columns","53e9f70f":"# Solar Radiation","e9a2bda4":"# Wind Speed","67d6866f":"# Humidity","4e1cef3d":"# Splitting the data into features and Target Label","93988903":"## Define Loss Function","48f6e88c":"# Checking the type of Data","6c8ea9ff":"# Converting Categorical Varibales","468df5e6":"# Checking rents per hours","1df7cacd":"There is a peak for renting bikes at 8 am and 6 pm which is most probably the time a person is going to or leaving his work\n\nThis is the order of season for number of rented bikes(descending order) ,\n\n1)Autumn\n\n2)Summer\n\n3)Spring,\n\n4)Winter\n\nMost people rent bikes on Functioning days and days which aren't holidays","a34297ae":"# Temperature vs rented bikes","c1daac34":"## conclusion","11b18582":"# Model Tuning","eed21822":"# EDA","bb217ec5":"# showing correlation between variables","a7b286c3":"# Converting Date and splitting it","c405f5f9":"# Checking the link to solar radiation","cec1cb5c":"# Reading the data","3f7af0be":"# Number of rented bikes","e2fc84b5":"# Plotting variables to the target","dcb92b52":"## Visualizations","6c10a1ac":"# Showing the distribution of categorical variables","85a045da":"## Handling Outliers","83aa3f91":"# Visualizing rents with years, months and hours","e78bbb8a":"# Snowfall vs rented bikes","5921166f":"# Temperatures","91c42c9e":"# Monthly distributions","5a5a7f7f":"# Correlations between variables","3e16b9f0":"# Test Data","455baadf":"# Statitical description of the features","8d154ff9":"# Plot Feature importance from Xgboostregressor without any hyperparameter tuning","30e12beb":"# applying additional function to data :peak,ideal,sticky","519b8180":"# Importing libraries","5ca59d26":"> After Running HyperParameter Tuning jobs on xgboost model and catboost model the optimum parameters reached were:\n> - XGBoost: {}\n> - CatBoost: {}"}}