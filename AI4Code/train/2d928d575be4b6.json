{"cell_type":{"4efadd92":"code","2607a26f":"code","b7608f46":"code","71b1a015":"code","9244a06e":"code","2be1e356":"code","e2e14908":"code","1edffa94":"code","50023643":"code","aa989368":"code","2e935cb4":"code","9b6f06ec":"code","851a627a":"code","4fcf7ba2":"code","346be7e6":"code","fdedd0be":"code","52691b78":"code","ce059be0":"code","12c26172":"code","94c1d993":"code","c57389b4":"code","65c44675":"code","455205af":"code","be0f1b69":"code","107393e8":"code","c2e24e83":"code","2d22627a":"code","50a37a79":"code","7d49ddb0":"code","4442621c":"code","fb5ffdde":"code","0ab23a8a":"code","7a2ccfe0":"code","fab1ba8d":"markdown","bd803fb1":"markdown","42a2a816":"markdown","9447cc28":"markdown","5e375f57":"markdown","eeaa951d":"markdown","b38f705d":"markdown","32f7ff38":"markdown","20444fd9":"markdown"},"source":{"4efadd92":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2607a26f":"#Import Data\npower1 = pd.read_csv(\"\/kaggle\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv\")\nweather1 = pd.read_csv(\"\/kaggle\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv\")\n\npower2 = pd.read_csv(\"\/kaggle\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv\")\nweather2 = pd.read_csv(\"\/kaggle\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv\")\n","b7608f46":"# Look at data \npower2.head()","71b1a015":"weather2.head()","9244a06e":"# Notice the total entries (Not 34)\npower2.info()\nweather2.info()","2be1e356":"# Let's visualize it anyway.\nfig, ax = plt.subplots(2,1, figsize=(20,8))\nax[0].set_title(\"POWER PLANT 2 DAILY CAPACITY\")  \nsns.lineplot(data=[power2[\"DC_POWER\"],power2[\"AC_POWER\"]], ax=ax[0], palette=\"tab20\", linewidth=1)\nax[1].set_title(\"WEATHER ON POWER PLANT 2\")  \nsns.lineplot(data=[weather2[\"AMBIENT_TEMPERATURE\"],weather2[\"MODULE_TEMPERATURE\"],weather2[\"IRRADIATION\"]], ax=ax[1], palette=\"tab20\", linewidth=2.5)","e2e14908":"##### Combine the data on the basis of dates only using \"DATE_TIME\" column #####\n\n## 1. Create a DATE (date format) column using \"DATE_TIME\"(object format) column \ndf_date= weather2[\"DATE_TIME\"].str.split()\nx=[]\nfor d in df_date:\n    val= d[0]\n    x.append(val)\nweather2[\"DATE\"]= pd.DataFrame(x)\nweather2.drop([\"DATE_TIME\"], axis=1, inplace=True)\n\n\ndf_date= power2[\"DATE_TIME\"].str.split()\nx=[]\nfor d in df_date:\n    val= d[0]\n    x.append(val)\npower2[\"DATE\"]= pd.DataFrame(x)\npower2.drop([\"DATE_TIME\"], axis=1, inplace=True)\n\n\n","1edffa94":"## 2. Group by date and MEan the rest\ngroupMeanWeather2 = weather2.groupby(\"DATE\").max().reset_index()\ngroupMeanPower2 = power2.groupby(\"DATE\").max().reset_index()\n\n# Look at the 34 Entries for both the tables\ngroupMeanWeather2.info()\ngroupMeanPower2.info()","50023643":"def getNormalized(num):\n    return num\/(num.max()+num.min())","aa989368":"fig, ax = plt.subplots(1,1, figsize=(20,4))\nw_amb = getNormalized(groupMeanWeather2[\"AMBIENT_TEMPERATURE\"])\nmod_temp = getNormalized(groupMeanWeather2[\"MODULE_TEMPERATURE\"])\nw_irr = getNormalized(groupMeanWeather2[\"IRRADIATION\"]) \n\nsns.lineplot(data=[w_amb,mod_temp,w_irr], ax=ax, palette=\"tab20\", linewidth=1.5,dashes=False).set_title(\"Scaled Weather parameters)\")\nplt.show()","2e935cb4":"fig, ax = plt.subplots(1,1, figsize=(20,4))\np_dc = getNormalized(groupMeanPower2[\"DC_POWER\"])\np_ac = getNormalized(groupMeanPower2[\"AC_POWER\"])\np_dy = getNormalized(groupMeanPower2[\"DAILY_YIELD\"])\np_ty = getNormalized(groupMeanPower2[\"TOTAL_YIELD\"]) \n\nsns.lineplot(data=[p_ac,p_dc-0.01,p_dy,p_ty], ax=ax, palette=\"tab20\", linewidth=1.5,dashes=False).set_title(\"Scaled Power Parameters\")\nplt.show()","9b6f06ec":"fig, ax = plt.subplots(1,1, figsize=(20,8))\n\nsns.lineplot(data=[p_ac,w_amb,mod_temp,w_irr], ax=ax, palette=\"tab20\", linewidth=1,dashes=False).set_title(\"Scaled Weather Vs Power parameters\")\nplt.show()\n\n","851a627a":"\nsns.jointplot(x=p_ac,y=w_irr ,kind=\"reg\")\nsns.jointplot(x=w_amb,y=mod_temp, kind=\"kde\")","4fcf7ba2":"newdata =  pd.DataFrame({\"AC\": p_ac.values,\n                        \"AMB\": w_amb.values,\n                        \"MOD\":mod_temp.values,\n                        \"IRR\":w_irr.values})\n","346be7e6":"newdata.describe()","fdedd0be":"sns.pairplot(data =newdata)","52691b78":"# drawthis = newdata.pivot(\"DATE\", \"AMBIENT_TEMPERATURE\", \"DC_POWER\")\n\n# Draw a heatmap with the numeric values in each cell\nf, ax = plt.subplots(figsize=(9, 6))\nsns.heatmap(newdata, annot=True, fmt=\"d\", linewidths=.5, ax=ax)","ce059be0":"# Group by date and Sum the rest\ngroupweather2 = weather2.groupby(\"DATE\").sum().reset_index()\ngrouppower2 = power2.groupby(\"DATE\").sum().reset_index()","12c26172":"# Group beydate and mean the reset \ngroupweather2mean = weather2.groupby(\"DATE\").mean().reset_index()\ngrouppower2mean = power2.groupby(\"DATE\").mean().reset_index()","94c1d993":"groupweather2mean.info()\ngrouppower2mean.info()","c57389b4":"groupweather2.info()\ngrouppower2.info()","65c44675":"# Merged onDate\nmerged2 = pd.merge(groupweather2,grouppower2,on=\"DATE\")\nmerged2.info()\n\n# Mean Merged Date\nmeanmerged2 = pd.merge(groupweather2mean,grouppower2mean,on=\"DATE\")\nmeanmerged2.info()","455205af":"meanmerged2.head()","be0f1b69":"meanmerged2['DATE'] = pd.to_datetime(meanmerged2['DATE'], format='%Y-%m-%d') \nmeanmerged2.info()","107393e8":"\nfig, ax = plt.subplots(1,1, figsize=(20,4))\np_dc = (meanmerged2[\"DC_POWER\"]\/280)-0.4\np_ac = (meanmerged2[\"AC_POWER\"]\/280)-0.4\n\np_dy = meanmerged2[\"DAILY_YIELD\"]\/10000\nw_amb = ((meanmerged2[\"AMBIENT_TEMPERATURE\"]\/35 )-0.6)*3\nmod_temp = ((meanmerged2[\"MODULE_TEMPERATURE\"]\/60 ) - 0.3)*3\nw_irr = meanmerged2[\"IRRADIATION\"]*3\nsns.lineplot(data=[p_ac,p_dc,w_amb,mod_temp,w_irr], ax=ax, palette=\"tab20\", linewidth=2.5)\nplt.show()","c2e24e83":"def getNormalized(num):\n    return num\/(num.max()+num.min())\n    ","2d22627a":"\nfig, ax = plt.subplots(1,1, figsize=(20,4))\np_dc = getNormalized(meanmerged2[\"DC_POWER\"])\np_ac = getNormalized(meanmerged2[\"AC_POWER\"])\n# p_dy = meanmerged2[\"DAILY_YIELD\"]\/10000\nw_amb = getNormalized(meanmerged2[\"AMBIENT_TEMPERATURE\"])\nmod_temp = getNormalized(meanmerged2[\"MODULE_TEMPERATURE\"])\nw_irr = getNormalized(meanmerged2[\"IRRADIATION\"]) \np_dy = getNormalized(meanmerged2[\"DAILY_YIELD\"])\np_ty = getNormalized(meanmerged2[\"TOTAL_YIELD\"]) \n\nsns.lineplot(data=[p_ac,p_dc,w_amb,mod_temp,w_irr,p_dy,p_ty], ax=ax, palette=\"tab20\", linewidth=1.5,dashes=False)\nplt.show()","50a37a79":"meanmerged2.describe()","7d49ddb0":"\np_dy = getNormalized(meanmerged2[\"DAILY_YIELD\"])\np_ty =  getNormalized(meanmerged2[\"TOTAL_YIELD\"]) \n\n# w_amb = ((meanmerged2[\"AMBIENT_TEMPERATURE\"]\/35 )-0.6)*3\n# mod_temp = ((meanmerged2[\"MODULE_TEMPERATURE\"]\/60 ) - 0.3)*3\n# w_irr = meanmerged2[\"IRRADIATION\"]*3\nsns.lineplot(data=[p_dy,p_ty], ax=ax, palette=\"tab20\", linewidth=2.5)\nplt.show()","4442621c":"meanScaledData = pd.DataFrame({\"DC_POWER\":p_dc,\n                                   \"AC_POWER\":p_ac,\n                                   \"AMBIENT_TEMPERATURE\":w_amb,\n                                   \"MODULE_TEMPERATURE\":mod_temp,\n                                   \"IRRADIATION\":w_irr})\nmeanScaledData.info()\nmeanScaledData.describe()","fb5ffdde":"sns.pairplot(data = meanScaledData)","0ab23a8a":"fig_dims = (8, 8)\nfig, ax = plt.subplots(figsize=fig_dims)\n\ncorr = meanScaledData.corr()\nsns.heatmap(corr,ax = ax, annot=True)\n\nplt.show()","7a2ccfe0":"# fig, ax = plt.subplots(1,2, figsize=(8,8))\nsns.jointplot(x=\"IRRADIATION\",y=\"DC_POWER\",data=meanScaledData ,kind=\"reg\")\nsns.jointplot(x=\"AMBIENT_TEMPERATURE\",y=\"MODULE_TEMPERATURE\",data=meanScaledData, kind=\"kde\")\n# plt.show()","fab1ba8d":"![Solar panels](https:\/\/stat.mozo.com.au\/redactor\/pictures\/9794\/how-does-solar-energy-work_original.jpg)\n\n\n# This Notebook will cover -\n1. Import data\n2. Understanding Solar Power generation data\n3. Scale data to 34 days\n4. Relation between WEATHER (INPUT) and POWER (OUTPUT)?\n\n\n<font size=\"+2\" color=chocolate ><b>Please Upvote my kernel if you like my work.<\/b><\/font>","bd803fb1":"## Scale Data to 34 Days\n","42a2a816":"**************************************************************************************************","9447cc28":"**Conclusion** Also, there is a clear relation in power data between AC_POWER, DC_POWER and DAILY_YIELD over the period of 34 days.\n\n## **Relation between WEATHER (*INPUT*) and POWER (*OUTPUT*)?** ","5e375f57":"<font size=\"+2\" color=chocolate ><b>Please Upvote my kernel if you like my work.<\/b><\/font>","eeaa951d":"**Conclusion** (For Power2) (*gathered from inverters*) \n1. Every spike represents powerplant generating power.\n2. Notice: There are **34 spikes in the graph (one for everyday).**\n3. **`AC_POWER` & `DC_POWER` are highly correlated.**\n\n**Conclusion** (For Weather2) *(gathered from sensors)*\n1. Every spike represents daylight.\n2. Notice: There are **34 spikes in the graph (one for everyday).**\n3. **`AMBIENT_TEMPERATURE` & `MODULE_TEMPRATURE` are highly correlated.**\n4. `IRRADITAION` definitely seems to be giving small flucations on every spike. (might get more info. when scaling)\n\n**Conclusion** (Both Power2 & Weather2)\n1. Data gives power plant's **performance on daily basis.** \n2. `power2` have 67698 entries & `weather2` has 3259 entries for 34 days **(should be converted to 34 days)**. \n3. Even though **Output -> `power2` has 20 times more data than Input ->`weather2`** they are oscillating in similar fashion.","b38f705d":"## Understand Solar Power Generation Data\n\n**Assumptions** (without any preprocessing)\n1. This data is a **34 days** reading of a solar plant.\n2. That means, the plant can only make electricity at daylight and not in nights. (should be up and down curves)\n3. And this should be reflected in the **power2** Dataframe variables.\n","32f7ff38":"## Import Data","20444fd9":"**Conclusion** Now we can easily see  clear relation in weather data between these 3 variables over the period of 34 days."}}