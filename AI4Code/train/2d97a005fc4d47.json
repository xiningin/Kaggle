{"cell_type":{"866eaa2c":"code","5e52d28a":"code","b5d4592b":"code","bd584d86":"code","48d5d348":"code","9109dd16":"code","7a95c140":"code","d06c32b6":"code","987c6ae9":"code","613ee9bb":"code","4ee433d0":"code","6797318c":"code","08a1ea6a":"code","62ec58ac":"code","6ee600cf":"code","5cccd44d":"code","da1ca32c":"code","858993cc":"code","1a6c823c":"code","4143db24":"code","ff13f426":"code","f8e62681":"code","54b4d98f":"code","f8695f83":"code","871c60a5":"code","266ee141":"code","90fa0880":"code","bd4925e4":"code","d167575e":"code","dedca907":"code","8350d580":"code","48d33ded":"markdown","92fd7544":"markdown","11b68ccc":"markdown"},"source":{"866eaa2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e52d28a":"import re\nimport pandas as pd\nimport numpy as np\nimport warnings\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nimport wordcloud\n\nwarnings.filterwarnings('ignore')\n\n\ndata = pd.read_csv('\/kaggle\/input\/sms-spam-collection-dataset\/spam.csv',usecols=['v1','v2'],encoding='latin-1')\n\nprint(data.shape)\n#data[data.columns[data.isnull().any()]].isnull().sum() - to find null values\n#therefore use only 2 columns\ndata.head()","b5d4592b":"#making data column readable\ndata.columns = ['Category','Message']\n#finding the categories present\nprint(data['Category'].value_counts())\n#we have less spam compared to ham (4825:747)\n# Ratio = 6:1","bd584d86":"#Using colab, following installation is required\n#seems similar for kaggle XD\n!pip install contextualSpellCheck\n!pip install -U spacy\n!python -m pip install transformers","48d5d348":"import nltk\nnltk.download()\nimport spacy\nimport contextualSpellCheck\n\nnlp = spacy.load('en_core_web_sm')\ncontextualSpellCheck.add_to_pipe(nlp)","9109dd16":"data['character_count'] = data['Message'].str.len()\nprint(data[['Message','character_count','Category']].head())\n#from this we can say that it's not necessary that spam has more char count","7a95c140":"#finding numerics in the message\ndata['numerics'] = data['Message'].apply(lambda x: len([x for x in x.split() if x.isdigit()]))\nprint(data[['Message','numerics','Category']].sample(10))\n#we can see that numbers present with spacing are generally in spam messages\n#One of our analysis but not very strong as even ham can have numbers","d06c32b6":"#finding symbols\n#data['symbol'] = data['Message'].apply(lambda x: len([x for x in x.split() if x.find('\\\\')]))\n#data[['Message','symbol','Category']].sample(10)\n#we cannot predict from the symbols, hence we discard it","987c6ae9":"#making text readable\ndata['Message'] = data['Message'].apply(lambda x: \" \".join(x.lower() for x in x.split()))\ndata['Message'].head()","613ee9bb":"#removing punctuations - can cause problem\ndata['Message'] = data['Message'].str.replace('[^\\w\\s]','')\ndata['Message'].head()","4ee433d0":"#correcting the text using TextBlob, not very accurate\n#DO NOT TRY USING CPU\n\n#from textblob import TextBlob\n\n#for messages in data['Message']:\n#  correct_text = TextBlob(messages)\n#  print(correct_text.correct())","6797318c":"data['Message'][0]","08a1ea6a":"data.hist(column='character_count',by='Category',figsize=(10,8))\nplt.show()\n\n#to get an overview of complete data we add bins and xlim to the figure\ndata.hist(column='character_count',by='Category',bins=60,figsize=(10,8))\nplt.xlim(-60,2000)\nplt.show()\n\n#We can see that one of our data is positively skewed whereas other is \n#negatively skewed","62ec58ac":"data['text_length'] = data['Message'].apply(lambda x: len(x) - x.count(\" \"))\nbins = np.linspace(0, 300, 40)\nplt.hist(data['text_length'],bins)\nplt.title(\"Text Length Distribution\")\nplt.show()","6ee600cf":"data['spammed_data'] = data['Category'].map({'spam':1, 'ham':0}).astype(int)","5cccd44d":"ham_data = data[data['spammed_data'] == 0].copy()\nspam_data = data[data['spammed_data'] == 1].copy()","da1ca32c":"def make_wordcloud(data_type,title):\n  text = ' '.join(data_type['Message'].astype(str).tolist())\n  stopwords = set(wordcloud.STOPWORDS)\n\n  fig_wordcloud = wordcloud.WordCloud(stopwords = stopwords,width=800,height=600).generate(text)\n  plt.figure(figsize=(10,7))\n  plt.imshow(fig_wordcloud)\n  plt.axis(\"off\")\n  plt.title(title,fontsize=24)\n  plt.show()","858993cc":"make_wordcloud(ham_data,\"Ham Message\")","1a6c823c":"make_wordcloud(spam_data,\"Spam Message\")","4143db24":"#tokenizing text\n\ndef make_tokens(text):\n  token = re.split('\\W+',text)\n  return token\n\ndata['tokenized_message'] = data['Message'].apply(lambda row: make_tokens(row))\ndata.head()\n","ff13f426":"#removing stopwords\n\nstopwords = nltk.corpus.stopwords.words('english')\n\ndef rem_stop(text):\n  clean_text = [word for word in text if word not in stopwords]\n  return clean_text\n\ndata['Clean_message'] = data['tokenized_message'].apply(lambda row: rem_stop(row))\ndata.head()","f8e62681":"# using PorterStemmer to stem our words\n#reason for taking STEMMER is that the prediction should also be able to \n#pick up the HAM messages or else it will classify it as spam\nporter = nltk.PorterStemmer()\n\ndef stemmed(text):\n  stemmed_text = [porter.stem(word) for word in text]\n  return stemmed_text\n\ndata['Stemmed_message'] = data['Clean_message'].apply(lambda row: stemmed(row))\ndata[['Clean_message','Stemmed_message']].head()","54b4d98f":"#making the stemmed words join to sentence\n\ndef final_message(text):\n  final_message = \" \".join([word for word in text])\n  return final_message\n\ndata['Final_message'] = data['Stemmed_message'].apply(lambda row: final_message(row))\ndata.head()","f8695f83":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ntfidf_model = TfidfVectorizer()\n#fit the model\ntfidf_vector = tfidf_model.fit_transform(data.Final_message)\n#convert vector to array\ntfidf_data = pd.DataFrame(tfidf_vector.toarray())\nprint(tfidf_data)\n#now we have put values to the words with Tfidf","871c60a5":"#length of text can have an impact on our data\n#adding text_len to our data\n\nfinal_da = pd.concat([data['text_length'],tfidf_data],axis=1)\nfinal_da.head()","266ee141":"#calculating the precission and recall\nfrom sklearn.metrics import precision_recall_fscore_support as pfscore\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test,Y_train,Y_test = train_test_split(final_da,data['Category'],test_size=0.25)\n","90fa0880":"print(X_train.shape,Y_train.shape)\nprint(X_test.shape,Y_test.shape)","bd4925e4":"from sklearn.ensemble import RandomForestClassifier\n\nRf = RandomForestClassifier(n_estimators=60,max_depth=None,n_jobs=-1)\nrf_model = Rf.fit(X_train,Y_train)","d167575e":"rf_pred = rf_model.predict(X_test)","dedca907":"prec,recall,fscore,support = pfscore(Y_test,rf_pred,pos_label='spam',average='binary')\n#we have only 2 categories here\nprint('Precision:{}\\nRecall:{}\\nAccuracy:{}'.format(round(prec,4),round(recall,4),\n                                                    round((rf_pred==Y_test).sum()\/len(rf_pred),4)))","8350d580":"print(sorted(zip(rf_model.feature_importances_, X_train.columns), reverse=True)[0:10])\n","48d33ded":"# **Model**","92fd7544":"# **PRE-PROCESSING**","11b68ccc":"# **EDA**"}}