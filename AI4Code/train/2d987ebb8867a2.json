{"cell_type":{"583da5be":"code","34af15e7":"code","521bf1e3":"code","b070cdc5":"code","d34fb99e":"code","99b23a68":"code","7cb81cfa":"code","c71e304c":"code","71edeee5":"code","500ef8d5":"code","502489f2":"code","853d6be8":"code","ac8a7acb":"code","9ac850e1":"code","7b4af4d7":"code","33e7d44d":"code","38b46d09":"code","99d6c23c":"code","d5ed218e":"code","8f14086e":"code","266b8fe5":"code","9d257559":"code","81cc5955":"code","9422cd8a":"code","af152e9c":"code","4dff38e2":"code","8d0157ac":"code","415a0fb0":"code","9886ae57":"code","2275f556":"code","cc8215f4":"markdown","a6d5aa8c":"markdown","63c45872":"markdown","09f42913":"markdown","c9d79cf6":"markdown","397fb247":"markdown","e5c548a2":"markdown","c8860905":"markdown","d4dad1be":"markdown","78699749":"markdown","37b863f3":"markdown","d81aef57":"markdown","20adecf0":"markdown","b92a6651":"markdown"},"source":{"583da5be":"# Import required modules into program\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy\nimport scipy.stats as stats\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","34af15e7":"# Read csv file into Dataframe\ndf = pd.read_csv(\"\/kaggle\/input\/szeged-weather\/weatherHistory.csv\")\nprint(f\"df shape:\\t {df.shape}\")","521bf1e3":"df.head()","b070cdc5":"# Drop duplicate values\ndf.drop_duplicates(inplace=True)\ndf.reset_index(drop=True, inplace=True)\ndf.shape","d34fb99e":"df2 = df[['Temperature (C)', 'Apparent Temperature (C)', 'Humidity']]\ndf2.head()","99b23a68":"# Checking df structure \nprint(f\"df2 shape:\\t {df2.shape}\\n\")\ndf2.info()","7cb81cfa":"df2.describe(include='all')","c71e304c":"features_na = [features for features in df2.columns if df2[features].isnull().sum() > 0]\nif(len(features_na)>0):\n    for feature in features_na:\n        print(\"{}: {} %\".format(feature, np.round(df2[feature].isnull().mean()*100, 4)))\nelse:\n    print(\"No any missing value found\")","71edeee5":"# Boxplot Numerical Features\nnumerical_features = [feature for feature in df2.columns if (df2[feature].dtypes != 'O')]\n\nplt.figure(figsize=(15,45), facecolor='black')\nplotnumber =1\nfor numerical_feature in numerical_features:\n    ax = plt.subplot(12, 1, plotnumber)\n    sns.boxplot(df2[numerical_feature])\n    plt.xlabel(numerical_feature, color=\"white\", size=15)\n    plotnumber += 1\nplt.show()","500ef8d5":"df3 = df2.copy()","502489f2":"def draw_boxplots(feature,min_val,max_val):\n    fig, axes = plt.subplots(1,2)\n    plt.tight_layout(0.2)\n    plt.figure(figsize=(15,10), facecolor='black')\n    sns.boxplot(df2[feature],orient='h',ax=axes[0])\n    axes[0].title.set_text(\"Before\")\n    sns.boxplot(df3[feature],orient='h',ax=axes[1])\n    axes[1].title.set_text(\"After\")\n    plt.show()","853d6be8":"feature = 'Humidity'\nmin_val = 0.2\nmax_val = 1\n\ndf3 = df3[(df3[feature]>min_val) & (df3[feature]<max_val)]\nprint('Shape: ',df3.shape)\ndraw_boxplots(feature, min_val, max_val)","ac8a7acb":"feature = 'Temperature (C)'\nmin_val = -10\nmax_val = 40\ndf3 = df3[(df3[feature]>min_val) & (df3[feature]<max_val)]\nprint('Shape: ',df3.shape)\ndraw_boxplots(feature, min_val, max_val)","9ac850e1":"# feature = 'Apparent Temperature (C)'\n# min_val = -10\n# max_val = 40\n# df3 = df3[(df3[feature]>min_val) & (df3[feature]<max_val)]\n# print('Shape: ',df3.shape)\n# draw_boxplots(feature, min_val, max_val)","7b4af4d7":"X,y = df3.iloc[:,[0,2]], df3.iloc[:, [1]]\nprint(f\"X shape: {X.shape}\\ny shape: {y.shape}\")","33e7d44d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nX_train.reset_index(inplace=True)\nX_train.drop(['index'], axis=1, inplace=True)\nX_test.reset_index(inplace=True)\nX_test.drop(['index'], axis=1, inplace=True)\ny_train.reset_index(inplace=True)\ny_train.drop(['index'], axis=1, inplace=True)\ny_test.reset_index(inplace=True)\ny_test.drop(['index'], axis=1, inplace=True)\n\nprint(f\"X_train shape: {X_train.shape}\\tX_test shape: {X_test.shape}\")\nprint(f\"y_train shape: {y_train.shape}\\ty_test shape: {y_test.shape}\")","38b46d09":"X_train.skew()","99d6c23c":"def draw_qq_hist(feature):\n    plt.figure(figsize=(20,80), facecolor='white')\n    ax = plt.subplot(10,3,1)\n    stats.probplot(X_train[feature], dist=\"norm\", plot=plt)\n    plt.xlabel(feature)\n    ax = plt.subplot(10,3,2)\n#     ax.set_title(\"Hist\")\n    sns.distplot(X_train[feature])\n    plt.xlabel(feature)\n    plt.show()","d5ed218e":"for feature in X_train.columns:\n    draw_qq_hist(feature)","8f14086e":"# create columns variables to hold the columns that need transformation\ncolumns = ['Humidity']\n# create the function transformer object with exponential transformation\n# exponential_transformer = FunctionTransformer(np.exp)\nexponential_transformer = FunctionTransformer(lambda x: np.exp(x*3), validate=True) # 3 is best found value for get minimum skew\n# apply the transformation \ndata_new = exponential_transformer.transform(X_train[columns])\ndf_new = pd.DataFrame(data_new, columns=columns)\n# replace new values with previous data frame\nX_train['Humidity']=df_new['Humidity']\n\nX_train.skew()","266b8fe5":"draw_qq_hist('Humidity')","9d257559":"scaler_x = StandardScaler().fit(X_train)\nscaler_y = StandardScaler().fit(y_train)\n# scaler = MinMaxScaler().fit(X_train)","81cc5955":"X_train_scale = scaler_x.transform(X_train)\nX_test_scale = scaler_x.transform(X_test)\ny_train_scale = scaler_y.transform(y_train)\ny_test_scale = scaler_y.transform(y_test)\n\nX_train = pd.DataFrame(X_train_scale, columns=[X_train.columns])\nX_test = pd.DataFrame(X_test_scale, columns=[X_test.columns])   \ny_train = pd.DataFrame(y_train_scale, columns=['Apparent Temperature (C)'])\ny_test = pd.DataFrame(y_test_scale, columns=['Apparent Temperature (C)'])   ","9422cd8a":"#plot a univariate distribution of continues observations\nplt.figure(figsize=(25,50), facecolor='white')\nplotnumber =1\nfor feature in ['Temperature (C)', 'Humidity']:\n    ax = plt.subplot(10,3,plotnumber)\n    sns.distplot(X_train[feature])\n    plt.xlabel(feature)\n    plotnumber+=1\nplt.show()","af152e9c":"model = LinearRegression()\nmodel.fit(X_train, y_train)","4dff38e2":"predictions = model.predict(X_test)","8d0157ac":"y_hat = pd.DataFrame(predictions, columns=[\"predicted\"])\ny_hat.head()","415a0fb0":"# coefficient of determination R^2 of the prediction.\nR_Square_Score = model.score(X_test, y_test)\nR_Square_Score","9886ae57":"# mean squared error\nmse_error = mean_squared_error(y_test, y_hat)\nmse_error","2275f556":"plt.figure(figsize=(12, 6))\n\nplt.plot(y_hat[:200], label = \"Predicted\")\nplt.plot(y_test[:200], label = \"Actual\")\n\nplt.xlabel('x - axis')\nplt.ylabel('y - axis')\nplt.title('Predicitons vs Actual')\nplt.legend()\n\nplt.show()","cc8215f4":"###### We can **improve** this value more than this by removing outliers in target(Apparent Temprature (C)) varibale.","a6d5aa8c":"##  R2 Score (coefficient of determination) regression score function.\n- R Square measures how much variability in dependent variable can be explained by the model.","63c45872":"## END","09f42913":"## Finding Missing Values","c9d79cf6":"## Find Outliers","397fb247":"## Feature Scaling","e5c548a2":"## Transformation","c8860905":"# Use case: Weather in Szeged 2006-2016\n- The dataset is related with Weather in Szeged 2006-2016. The goal is to predict apparent temperature for the given humidity. \n<!-- And Examine Is there a relationship between humidity-temperature and humidity-apparent temperature. -->","d4dad1be":"## Creating new  DF with required features","78699749":"## Splitting Dataset into Training and Testing","37b863f3":"### Humidity\n- Left Skewed","d81aef57":"## Remove Outliers","20adecf0":"## Drop Duplicate Values","b92a6651":"## Model Building and Training"}}