{"cell_type":{"af64ef57":"code","a831264a":"code","bdfb7b0d":"code","4ad04a9b":"code","2c9d4e24":"code","c0b24c05":"code","0c639ac8":"code","97a27a3e":"code","672e8e53":"code","593e4cae":"code","5f95f3d4":"code","0b8e311c":"code","db33a54e":"code","bf293f3d":"code","df2b249c":"code","c3d4a0b5":"code","3e765bbf":"code","5f9dd7ee":"code","915599f8":"code","303eb599":"code","09c4ab49":"code","23cf4fb6":"code","56b6d122":"code","88c4ea4a":"code","024839a0":"code","6b20f664":"code","33cd9765":"code","65257628":"code","604241be":"code","6831aafd":"code","39901b50":"code","db073eac":"code","8baf11cf":"code","0de50823":"code","29c8d2fd":"code","f0ace579":"code","a20e2941":"code","83a17068":"code","0186550d":"code","24e88f77":"code","ae4ed921":"code","ab598e59":"code","158a189d":"code","a6939066":"code","1d776b63":"code","e9a7da8a":"code","bc0fea9b":"code","b7f8c151":"code","2ba315c8":"code","7f9f396e":"code","2d6e1668":"code","b0d3cc9a":"code","b954d5a2":"code","1f0f93ea":"code","0da4bd5a":"code","06d0c5bd":"code","31de3be7":"code","3ce4da53":"code","80b6ddd7":"code","7d7962d7":"code","aa0a0b17":"code","6ef73fd0":"code","7da8be60":"code","75c5f9e9":"code","fb5b41a6":"code","1a5c3f3a":"code","c17bdcad":"code","77ebdf91":"code","c15c9522":"code","5dd0008c":"code","d2ee9af4":"code","b2a75dbc":"code","2dd8668f":"code","cfc3ed12":"code","af2a570c":"code","55378517":"code","3d2534b8":"code","5d63a4ee":"code","bac0ea86":"code","e3ef13ca":"code","86b68ff2":"code","44889e49":"code","638e6317":"code","91e7289e":"code","9fb7257e":"code","ef12108a":"code","50ee7a4e":"code","ed23f10e":"code","3efaeddf":"code","aaa3415f":"code","785e5621":"markdown","a7d6c709":"markdown","f368daaf":"markdown","592261f3":"markdown","19111b12":"markdown","2edbf39b":"markdown","5c1c93d1":"markdown","89fc0786":"markdown","662de651":"markdown","392b9467":"markdown","b7b75fce":"markdown","9dbc977a":"markdown","00d7adb0":"markdown","372c0eb0":"markdown","0c7b5b8f":"markdown","e7176e5d":"markdown","2a7215d2":"markdown","f3700f12":"markdown","09c4a17d":"markdown","b56d08df":"markdown","8e6fe900":"markdown","60061fce":"markdown","d5767a6c":"markdown","74d89245":"markdown","41822ce6":"markdown","365e5b07":"markdown","c1616960":"markdown","f10411bb":"markdown","84110d91":"markdown","2a842853":"markdown","4f32680c":"markdown","dd55e0d5":"markdown","67513292":"markdown","2e4928e0":"markdown","4be6a13a":"markdown","eb17b4a8":"markdown","b3570dec":"markdown","dcdf3846":"markdown","5c456388":"markdown","da8d64cc":"markdown","7f0acc80":"markdown","5ede6220":"markdown","7590ab7a":"markdown","ece60b4a":"markdown","8412e2df":"markdown"},"source":{"af64ef57":"import pandas as pd\nimport numpy as np\nimport os \nimport plotly.offline as pyoff\nfrom plotly.offline import iplot,plot,init_notebook_mode\nimport plotly.graph_objs as go\ninit_notebook_mode()\nimport matplotlib.pyplot as plt","a831264a":"bike_share = pd.read_csv('..\/input\/data.csv')","bdfb7b0d":"bike_share.columns","4ad04a9b":"bike_share.dtypes","2c9d4e24":"bike_share.head()","c0b24c05":"cat_cols = ['year','day','week']","0c639ac8":"bike_share.loc[:,cat_cols] = bike_share.loc[:,cat_cols].astype(str) # converting the categorcical columns to str type ","97a27a3e":"trips_year = pd.DataFrame(bike_share.year.value_counts()).reset_index()\ntrips_year.columns = ['year','trips']\ntrips_year = trips_year.sort_values('year')","672e8e53":"# trips_year.to_csv(\"trips_year.csv\",index = False)","593e4cae":"# trips_year = pd.read_csv(\"trips_year.csv\")","5f95f3d4":"ty = go.Bar(x = \"Year-\"+trips_year.year.astype(str) ,y = trips_year.trips,name = 'Trips',\n           text = trips_year.trips,textposition = 'auto')\nlayout = go.Layout(title = 'Number of trips taken every year')\n\ndata = [ty]\nfig = go.Figure(data= data,layout =layout)\niplot(fig)","0b8e311c":"from datetime import datetime","db33a54e":"dates = bike_share.starttime.apply(lambda x : datetime.strptime(x,\"%Y-%m-%d %H:%M:%S\").date())\nbike_share['startdateonly'] = dates\ndaily = bike_share.groupby(['startdateonly']).size().to_frame().reset_index()\ndaily.columns = ['date','trips']","bf293f3d":"# daily.to_csv(\"daily.csv\",index = False)","df2b249c":"# daily= pd.read_csv(\"daily.csv\")","c3d4a0b5":"data = [go.Scatter(\n          x=daily.date,\n          y=daily.trips)]\nlayout = layout = go.Layout(title = \"Rides taken over the years (timeline)\",\n    xaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n#         showline=True,\n#         ticks='',\n#         showticklabels=False\n    ),\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n#         showline=True,\n#         ticks='',\n#         showticklabels=False\n    )\n)\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","3e765bbf":"###### Gender distribution plot","5f9dd7ee":"gender_dist = go.Bar( x= bike_share.gender.value_counts().index,\n                     y = bike_share.gender.value_counts(),\n                     text = bike_share.gender.value_counts(),\n                     textposition = 'auto'\n                    )\nlayout = go.Layout(title = 'Gender Distribution in the dataset')\ndata = [gender_dist]\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","915599f8":"daily_gender = bike_share.groupby(['startdateonly','gender']).size().to_frame().reset_index()\ndaily_gender.columns = ['startdateonly','gender','trips']","303eb599":"# daily_gender.to_csv('daily_gender.csv',index=False)","09c4ab49":"# daily_gender = pd.read_csv('daily_gender.csv')","23cf4fb6":"trace_Male = go.Scatter(\n                x=daily_gender.startdateonly[daily_gender.gender =='Male'],\n                y=daily_gender.trips[daily_gender.gender =='Male'],\n                name = \"Male\",\n                line = dict(color = 'blue'),\n                opacity = 0.8)\n\ntrace_Female = go.Scatter(\n                x=daily_gender.startdateonly[daily_gender.gender =='Female'],\n                y=daily_gender.trips[daily_gender.gender =='Female'],\n                name = \"Female\",\n                line = dict(color = 'green'),\n                opacity = 0.8)\nlayout = layout = go.Layout(title = \"Rides taken over the years based on gender\",\n    xaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n#         showline=True,\n#         ticks='',\n#         showticklabels=False\n    ),\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n#         showline=True,\n#         ticks='',\n#         showticklabels=False\n    )\n)\ndata = [trace_Male,trace_Female]\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","56b6d122":"rides_hour = bike_share.groupby(['hour']).size().reset_index()\nrides_hour.columns = ['hour','trips']","88c4ea4a":"# rides_hour.to_csv('rides_hour.csv',index= False)","024839a0":"# rides_hour = pd.read_csv('rides_hour.csv')","6b20f664":"rides_hour.head()","33cd9765":"hour = go.Bar(x = rides_hour.hour.astype(str),\n             y = rides_hour.trips, text = rides_hour.trips,textposition = 'auto')\nlayout = go.Layout(title = 'Rides taken at different hour of the day')\ndata = [hour]\nfig = go.Figure(data= data,layout=layout)\niplot(fig)","65257628":"morning_rides_start_location = bike_share.to_station_name[(bike_share.hour > 8) & bike_share.hour<9].value_counts()","604241be":"evening_rides_end_location = bike_share.from_station_name[(bike_share.hour > 16)& (bike_share.hour <19)].value_counts() ","6831aafd":"len([i for i in morning_rides_start_location.index if i in evening_rides_end_location.index])","39901b50":"filtered_time_rides_morning = bike_share[(8<bike_share.hour) & (bike_share.hour>9)]\nfiltered_time_rides_evening = bike_share[(17<bike_share.hour) & (bike_share.hour>19)]","db073eac":"filtered_time_rides_morning_grouped = filtered_time_rides_morning.groupby(['to_station_name']).size().to_frame('trips').reset_index()\nfiltered_time_rides_morning_grouped = filtered_time_rides_morning.groupby(['to_station_name']).size().to_frame('trips').reset_index()\nfiltered_time_rides_evening_grouped = filtered_time_rides_evening.groupby(['from_station_name']).size().to_frame('trips').reset_index()","8baf11cf":"filtered_time_rides_morning_grouped.columns = ['station','trips_to']\nfiltered_time_rides_evening_grouped.columns = ['station','trips_from']\nrides_from_to_df = filtered_time_rides_morning_grouped.merge(filtered_time_rides_evening_grouped)\nrides_from_to_df = rides_from_to_df.sort_values(['trips_to','trips_from'],ascending=False)","0de50823":"# rides_from_to_df.to_csv('rides_from_to_df.csv',index = False)\n# rides_from_to_df = pd.read_csv('rides_from_to_df.csv')","29c8d2fd":"rides_from_to_df.head()","f0ace579":"rides_from_to_df_plot = rides_from_to_df.head(10)\ntrips_to = go.Bar(x = rides_from_to_df_plot.station,\n                  y = rides_from_to_df_plot.trips_to,\n                  text = rides_from_to_df_plot.trips_to,\n                  textposition = 'auto',name = 'Morning trips ended in')\ntrips_from = go.Bar(x = rides_from_to_df_plot.station,\n                  y = rides_from_to_df_plot.trips_from,\n                  text = rides_from_to_df_plot.trips_from,\n                  textposition = 'auto',name = 'Evening trips started from')\ndata = [trips_to,trips_from]\nlayout = go.Layout(title ='Trips taken in the morning and trips taken in the evening<br>(Top 10 based on counts of places where the trips ended)')\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","a20e2941":"daily_usertype = bike_share.groupby(['startdateonly','usertype']).size().to_frame().reset_index()\ndaily_usertype.columns = ['startdateonly','usertype','trips']","83a17068":"# daily_usertype.to_csv('daily_usertype.csv',index = False)","0186550d":"# daily_usertype = pd.read_csv('daily_usertype.csv')","24e88f77":"daily_usertype.usertype.value_counts()","ae4ed921":"daily_usertype.head()","ab598e59":"trace_Subscriber = go.Scatter(\n                x=daily_usertype.startdateonly[daily_usertype.usertype =='Subscriber'],\n                y=daily_usertype.trips[daily_usertype.usertype =='Subscriber'],\n                name = \"Subscriber\",\n                opacity = 0.8)\n\ntrace_Customer = go.Scatter(\n                x=daily_usertype.startdateonly[daily_usertype.usertype =='Customer'],\n                y=daily_usertype.trips[daily_usertype.usertype =='Customer'],\n                name = \"Customer\",\n                opacity = 0.8)\ntrace_Dependent = go.Scatter(\n                x=daily_usertype.startdateonly[daily_usertype.usertype =='Dependent'],\n                y=daily_usertype.trips[daily_usertype.usertype =='Dependent'],\n                name = \"Dependent\",\n                opacity = 0.8)\n\n\nlayout = layout = go.Layout(title = \"Rides taken over the years based on customer type\",\n    xaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n#         showline=True,\n#         ticks='',\n#         showticklabels=False\n    ),\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n#         showline=True,\n#         ticks='',\n#         showticklabels=False\n    )\n)\ndata = [trace_Subscriber,trace_Customer,trace_Dependent]\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","158a189d":"bike_share.starttime[0] ,bike_share.stoptime[0] , bike_share.tripduration[0]","a6939066":"##### Are people riding more over the years?","1d776b63":"trip_duration_median = bike_share.groupby(['startdateonly']).agg({'tripduration':np.median}).reset_index()","e9a7da8a":"# trip_duration_median.to_csv('trip_duration_median.csv',index = False)","bc0fea9b":"# trip_duration_median =pd.read_csv('trip_duration_median.csv')","b7f8c151":"trip_duration_median.columns","2ba315c8":"data = [go.Scatter(\n          x=trip_duration_median.startdateonly,\n          y=trip_duration_median.tripduration)]\nlayout = layout = go.Layout(title = \"Median ride time over the years\",\n    xaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n#         showline=True,\n#         ticks='',\n#         showticklabels=False\n    ),\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n#         showline=True,\n#         ticks='',\n#         showticklabels=False\n    )\n)\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","7f9f396e":"trip_duration_agg_df = bike_share.groupby(['startdateonly']).agg({'tripduration':{\n                                                                        'medianduration' : np.median,\n                                                                        'minduration' : np.min,\n                                                                        'maxduration' : np.max,\n                                                                }}).reset_index()\ntrip_duration_agg_df.columns  = ['startdateonly', 'medianduration', 'minduration', 'maxduration']","2d6e1668":"# trip_duration_agg_df.to_csv('trip_duration_agg_df.csv',index = False)","b0d3cc9a":"# trip_duration_agg_df = pd.read_csv('trip_duration_agg_df.csv')","b954d5a2":"trip_duration_agg_df.head()","1f0f93ea":"minduration = go.Scatter(\n          x=trip_duration_agg_df.startdateonly,\n          y=trip_duration_agg_df.minduration,name ='Minimum duration' )\n               \nmaxduration = go.Scatter(\n          x=trip_duration_agg_df.startdateonly,\n          y=trip_duration_agg_df.maxduration,name = 'Maximum duration')\n\nmedianduration = go.Scatter(\n          x=trip_duration_agg_df.startdateonly,\n          y=trip_duration_agg_df.medianduration,name = 'Median duration')\n\ndata = [minduration,medianduration,maxduration]\n\nlayout = layout = go.Layout(title = \"Ride time over the years\",\n    xaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n#         showline=True,\n#         ticks='',\n#         showticklabels=False\n    ),\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n#         showline=True,\n#         ticks='',\n#         showticklabels=False\n    )\n)\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","0da4bd5a":"usertype_ridetime_df = bike_share.groupby('usertype').agg({'tripduration' : {'minduration':np.min,\n                                                     'medianduration':np.median,\n                                                     'maxduration':np.max,\n                                                    }}).reset_index()\nusertype_ridetime_df.columns = ['usertype','minduration','medianduration','maxduration']","06d0c5bd":"# usertype_ridetime_df.to_csv('usertype_ridetime_df.csv',index = False)","31de3be7":"# usertype_ridetime_df = pd.read_csv(\"usertype_ridetime_df.csv\")","3ce4da53":"usertype_ridetime_df.head()","80b6ddd7":"minduration = go.Bar(\n          x=usertype_ridetime_df.usertype, \n          y=usertype_ridetime_df.minduration.round(2),\n    text = usertype_ridetime_df.minduration.round(2),textposition = 'auto' ,\n    name ='Minimum duration' )\n               \nmaxduration = go.Bar(\n          x=usertype_ridetime_df.usertype,\n          y=usertype_ridetime_df.maxduration.round(2),\n     text = usertype_ridetime_df.maxduration.round(2),textposition = 'auto' ,\n    name = 'Maximum duration')\n\nmedianduration = go.Bar(\n          x=usertype_ridetime_df.usertype,\n          y=usertype_ridetime_df.medianduration.round(2),\n     text = usertype_ridetime_df.medianduration.round(2),textposition = 'auto' ,\n    name = 'Median duration')\n\ndata = [minduration,medianduration,maxduration]\n\nlayout = layout = go.Layout(title = \"Median Ride time of different types of customers\",\n    xaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n#         showline=True,\n#         ticks='',\n#         showticklabels=False\n    ),\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n#         showline=True,\n#         ticks='',\n#         showticklabels=False\n    )\n)\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","7d7962d7":"usertype_events_counts_df = bike_share.groupby('events').size().to_frame('trips').reset_index()\nusertype_events_counts_df","aa0a0b17":"# usertype_events_counts_df.to_csv('usertype_events_counts_df.csv',index=False)","6ef73fd0":"# usertype_events_counts_df = pd.read_csv('usertype_events_counts_df.csv')","7da8be60":"trace1 = go.Bar(x = usertype_events_counts_df.events,\n               y=usertype_events_counts_df.trips,\n                name = 'Number of trips')\nlayout = go.Layout(title = 'Number of trips in different weather conditions')\n\ndata = [trace1]\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","75c5f9e9":"usertype_events_counts_years_df = bike_share.groupby(['events','year']).size().to_frame('trips').reset_index()","fb5b41a6":"# usertype_events_counts_years_df.to_csv('usertype_events_counts_years_df.csv',index=False)","1a5c3f3a":"# usertype_events_counts_years_df = pd.read_csv('usertype_events_counts_years_df.csv')","c17bdcad":"usertype_events_counts_years_df.head()","77ebdf91":"x = usertype_events_counts_years_df.year.unique()\nclear = usertype_events_counts_years_df[usertype_events_counts_years_df.events == 'clear'].trips\ncloudy = usertype_events_counts_years_df[usertype_events_counts_years_df.events == 'cloudy'].trips\nnot_clear = usertype_events_counts_years_df[usertype_events_counts_years_df.events == 'not clear'].trips\nrain_or_snow = usertype_events_counts_years_df[usertype_events_counts_years_df.events == 'rain or snow'].trips\ntstorms = usertype_events_counts_years_df[usertype_events_counts_years_df.events == 'tstorms'].trips\nunknown = usertype_events_counts_years_df[usertype_events_counts_years_df.events == 'unknown'].trips\n\nclear  = go.Bar(x =x,\n               y= clear,name = 'clear')\ncloudy  = go.Bar(x =x,\n               y= cloudy,name = 'cloudy')\n\nnot_clear  = go.Bar(x =x,\n               y= not_clear,name = 'not_clear')\n\nrain_or_snow  = go.Bar(x =x,\n               y= rain_or_snow,name = 'rain_or_snow')\n\ntstorms  = go.Bar(x =x,\n               y= tstorms,name = 'tstorms')\n\nunknown  = go.Bar(x =x,\n               y= unknown,name = 'unknown')\n\nlayout = go.Layout(title = 'Number of rides in different weather conditions over the years')\ndata = [clear,cloudy,not_clear,rain_or_snow,tstorms,unknown]\n\nfig = go.Figure(data= data,layout= layout)\niplot(fig)","c15c9522":"x = usertype_events_counts_years_df.events.unique()\nusertype_events_counts_years_df.year = usertype_events_counts_years_df.year.astype(str)\ny2014 = usertype_events_counts_years_df[usertype_events_counts_years_df.year == '2014'].trips\ny2015 = usertype_events_counts_years_df[usertype_events_counts_years_df.year == '2015'].trips\ny2016 = usertype_events_counts_years_df[usertype_events_counts_years_df.year == '2016'].trips\ny2017 = usertype_events_counts_years_df[usertype_events_counts_years_df.year == '2017'].trips\ny2014  = go.Bar(x =x,\n               y= y2014,name = '2014')\ny2015  = go.Bar(x =x,\n               y= y2015,name = '2015')\n\ny2016  = go.Bar(x =x,\n               y= y2016,name = '2016')\n\ny2017  = go.Bar(x =x,\n               y= y2017,name = '2017')\n\nlayout = go.Layout(title = 'Distribution of rides in different weather conditions over the years')\ndata = [y2014,y2015,y2016,y2017]\n\nfig = go.Figure(data= data,layout= layout)\niplot(fig)","5dd0008c":"bike_share.columns","d2ee9af4":"print(\"There are {} unique stations in the dataset\".format(len(bike_share.from_station_name.unique())))","b2a75dbc":"len(bike_share.from_station_name.value_counts().index[bike_share.from_station_name.value_counts()>10000])","2dd8668f":"len(bike_share.from_station_name.value_counts()>10000)","cfc3ed12":"rides_stations_weather = bike_share.groupby(['from_station_name','events']).size().to_frame().reset_index()\nrides_stations_weather.columns = ['from_station_name','events','trips']","af2a570c":"rides_stations_weather = rides_stations_weather.sort_values(['from_station_name','events'])","55378517":"# rides_stations_weather.to_csv('rides_stations_weather.csv',index=False)","3d2534b8":"# rides_stations_weather = pd.read_csv('rides_stations_weather.csv')","5d63a4ee":"data = []\nfor i in rides_stations_weather.events.unique():\n    data.append(go.Bar (x = rides_stations_weather[rides_stations_weather.events == i].from_station_name,\n                       y = rides_stations_weather[rides_stations_weather.events == i].trips,\n                       name = i))\nlayout = go.Layout(title = 'Weather conditions at different stations',barmode='stack')\nfig = go.Figure(data= data,layout = layout)\niplot(fig)","bac0ea86":"usertype_events_df = bike_share.groupby('events').agg({'tripduration' : {'minduration':np.min,\n                                                     'medianduration':np.median,\n                                                     'maxduration':np.max,\n                                                    }}).reset_index()\nusertype_events_df.columns = ['events','minduration','medianduration','maxduration']","e3ef13ca":"# usertype_events_df.to_csv('usertype_events_df.csv',index=False)","86b68ff2":"# usertype_events_df = pd.read_csv('usertype_events_df.csv') ","44889e49":"minduration = go.Bar(\n          x=usertype_events_df.events,\n          y=usertype_events_df.minduration.round(2),\n    text = usertype_events_df.minduration.round(2),textposition = 'auto',\n    name ='Minimum duration' )\n               \nmaxduration = go.Bar(\n          x=usertype_events_df.events,\n          y=usertype_events_df.maxduration.round(2),\n    text = usertype_events_df.maxduration.round(2),textposition = 'auto',\n    name = 'Maximum duration')\n\nmedianduration = go.Bar(\n          x=usertype_events_df.events,\n          y=usertype_events_df.medianduration.round(2),\n     text = usertype_events_df.medianduration.round(2),textposition = 'auto',\n    name = 'Median duration')\n\ndata = [minduration,medianduration,maxduration]\n\nlayout = layout = go.Layout(title = \"Ride time in different weather conditions\",\n    xaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n#         showline=True,\n#         ticks='',\n#         showticklabels=False\n    ),\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n#         showline=True,\n#         ticks='',\n#         showticklabels=False\n    )\n)\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","638e6317":"rides_customertype = bike_share.groupby(['events','usertype']).size().to_frame('trips').reset_index()\nrides_customertype = rides_customertype.pivot_table(index= ['events'],columns= ['usertype'],aggfunc=[np.sum],fill_value=0).reset_index()\nrides_customertype.columns = ['events','Customer','Dependent','Subscriber']\nrides_customertype['Other'] = rides_customertype.Dependent+rides_customertype.Customer\n# Here I have divided each value in the Customer and Other column by the corresponsing column total and multiplied it by 100\nrides_customertype['OtherPer'] = (rides_customertype.Other\/rides_customertype.Other.sum())*100\nrides_customertype['SubscriberPer'] = (rides_customertype.Subscriber\/rides_customertype.Subscriber.sum())*100","91e7289e":"# rides_customertype.to_csv('rides_customertype.csv',index=False)","9fb7257e":"# rides_customertype = pd.read_csv('rides_customertype.csv')","ef12108a":"rides_customertype","50ee7a4e":"OtherPer = go.Bar(x = rides_customertype.events,\n                 y = rides_customertype.OtherPer,\n                name = \"Other\")\nSubscriberPer = go.Bar(x = rides_customertype.events,\n                 y = rides_customertype.SubscriberPer,\n                       name = \"Subscriber\")\n\nlayout = go.Layout(title = 'Comparing the Number of rides taken by different types of customers <br> in different weather coditions')\n\ndata = [OtherPer,SubscriberPer]\n\nfig = go.Figure(data= data, layout=layout)\n\niplot(fig)","ed23f10e":"bike_share.columns","3efaeddf":"lat_lon = bike_share.groupby(['from_station_name']).agg({'latitude_start': {'lat': np.median},\n                                                         'longitude_start':{'lon':np.median}}).reset_index()\nlat_lon.columns = ['from_station_name','lat','lon']","aaa3415f":"airports = [ dict(\n        type = 'scattergeo',\n        locationmode = 'USA-states',\n        lon = lat_lon['lon'],\n        lat = lat_lon['lat'],\n        hoverinfo = 'text',\n#         text = df_airports['airport'],\n        mode = 'markers',\n        marker = dict( \n            size=2, \n            color='rgb(255, 0, 0)',\n            line = dict(\n                width=3,\n                color='rgba(68, 68, 68, 0)'\n            )\n        ))]\nflight_paths = []\nfor i in range( len( bike_share.trip_id[0:1000] ) ):\n    flight_paths.append(\n        dict(\n            type = 'scattergeo',\n            locationmode = 'USA-states',\n            lon = [ bike_share['longitude_start'][i], bike_share['longitude_end'][i] ],\n            lat = [ bike_share['latitude_start'][i], bike_share['latitude_end'][i] ],\n            mode = 'lines',\n            line = dict(\n                width = 1,\n                color = 'red',\n            ),\n#             opacity = 0.3,\n        )\n    )\nlayout = dict(\n        title = 'Rides taken in chicago over all the years<br>(Hover for Station names) <br> (plotting only first 1000 rides for now)',\n        showlegend = False, \n        geo = dict(\n            scope='north america',\n            projection=dict(type='azimuthal equal area'),\n            showland = True,\n            landcolor = 'rgb(243, 243, 243)',\n            countrycolor = 'rgb(204, 204, 204)',\n        ),\n    ) \nfig = dict( data=flight_paths + airports, layout=layout )\niplot(fig)","785e5621":"#### Loading data","a7d6c709":"Plotly is plotting the years as continuous, I have added the string \"Year-\" to the years to prevent this.","f368daaf":"Putting events on the x axis and year on the x axis leads to different insights","592261f3":"###### Is the ride time different in different weather conditions?","19111b12":"##### Is there a difference in the ride times for different types of customers?","2edbf39b":"- Overall the number of rides taken by females is less, but we don't see any perceivable difference in the pattern above.\n- We can conclude that there is no preference given by any gender to a particular time of the year.","5c1c93d1":"###### Extracting the date from the startdate column and adding it to the dataframe","89fc0786":"The number of trips taken by sucbsribers are far more than those taken by others , we cannot infer much from this graph","662de651":"- I think that if a location has offices,the rides taken aroud 8 AM will end at that location and the rides around 5 pm will start at that location","392b9467":"Although on kaggle it says that the trip duration is in seconds but on inspection of the dataset, the trip duration is actually in minutes.","b7b75fce":"###### Let us see if the pattern is different among men and women","9dbc977a":"- Based on the information I found on google, the first 4 stations are located in close vicinity and the area is a commercial area, there is a subway staion located here as well, there is a good possibility that people riding to these destinations might have done so to take the subway.","00d7adb0":"Plotting the precentage of rides taken by different users in different weather conditions","372c0eb0":"We see that the max duration is 60 minutes only, this is because the data set was cleaned and all the trips with duration more that 60 minutes were removed by the uploader in kaggle.\n","0c7b5b8f":"- Maximum trips are taken on cloudy days!","e7176e5d":"###### Trip Counts","2a7215d2":"##### Let us see if we can find out more about the trips","f3700f12":"- This is a bimodal data, we see that the number of rides taken at 8 am and number rides taken at 5 pm are high, the typical office rush hours.","09c4a17d":"We can see an clear pattern here, there is a spike in the months of July, August and September. i.e Q3\nAlso the Q4 have fewer rides in every year\n\n- Q4 can be explained by the holiday season.","b56d08df":"###### Let us see if the pattern is different between different type of customers","8e6fe900":"###### Number of trips taken in each year","60061fce":"Overall, the number of trips have been rising consistently","d5767a6c":"Note : \n     - I have used the terms 'rides' and 'trips' interchangeably.\n     - I have written the aggregated data into csv files to prevent recomputing everytime I close and open the notebook.","74d89245":"- We see that there is not a huge difference in the median ride time between different types of customers \n- but we cannot make conclusions about the maximum time as the dataset was cleaned before ","41822ce6":"##### Is this trend of taking more trips in cloudy weather consistent over the years?","365e5b07":"###### Distribution of rides in different weather conditions over the years","c1616960":"It sure is a lot of data,you can pan and look around, but we can see that most of the plot is orange, and orange corresponds to cloudy weather, so we can safely conclude that the weather is mostly cloudy!","f10411bb":"###### Does the time of day say anything about the number of rides taken?","84110d91":"- The number of riders in cloudy weather have always been more, also the number has been rising over the years\n- We can see that over the years, the numeber of rides in thunderstorms remained almost same.","2a842853":"###### How do the number of trips taken vary over time?","4f32680c":"##### Let us try to plot the rides on a map","dd55e0d5":"for lattitude and longitude, I will just take median of the values of the *_start  for simplicity.","67513292":"##### Did subscribers take rides irrespective of the weather conditions?","2e4928e0":"#### How are different weather conditions affecting the ride time?","4be6a13a":"Let us look at the weather conditions at different stations","eb17b4a8":" - Overall,As per the data, we see that surprisingly, the percentage of customers who are not subscribers take more rides in the cloudy environment. Well, who would not?","b3570dec":"###### Ride time over the years plot","dcdf3846":"#### Loading Libraries","5c456388":"- One interesting observation here is that not only the number of rides were high in the Q3, the median duration also was more,\n- Also we see that the median duration varies between 6 Minutes and 13 mintues for the rides in the dataset","da8d64cc":"- Yes, Cloudy weather always had the most number of rides.","7f0acc80":"- Let us see where the morning trips were taken to, and also if the trips in the evening were from same location","5ede6220":"##### Converting data to appropriate types","7590ab7a":"Plotting all of the becomes clumsy here, we will try to look at the stations with atleast 1000 rides","ece60b4a":"##### - But does correlation mean causation? Are the number of rides more in cloudy weather or the weather is mostly cloudy??","8412e2df":"With that condition in place , the number of stations come down to 280"}}