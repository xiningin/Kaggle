{"cell_type":{"6f55c381":"code","a74afac9":"code","2f380af9":"code","c3add875":"code","2a8f2363":"code","181f14a5":"code","d592ebda":"code","465f9e78":"code","18989529":"code","e2c5e268":"code","41fef26c":"code","c82ae317":"code","01327bf0":"code","3bc729a7":"code","a471ab2b":"code","51db1ace":"code","f9f0f03c":"code","1fc51d31":"code","b4895e80":"code","c0bee05a":"code","034a4037":"code","d643ef23":"code","66c14eb6":"code","556aa5f4":"code","7ea9f70a":"code","33b81830":"markdown","6a722fb8":"markdown","4719abcf":"markdown","8567a5be":"markdown","6967593f":"markdown","2eafe259":"markdown","5c63b288":"markdown","01226be1":"markdown","6e5c2373":"markdown","222a77ec":"markdown","bc890cb9":"markdown","7952ece8":"markdown","b6c31ed5":"markdown","9ff4ada2":"markdown","a1663b37":"markdown","25a234af":"markdown","15bf7518":"markdown","218921be":"markdown","6663576b":"markdown","ad0cbec5":"markdown"},"source":{"6f55c381":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a74afac9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.tree import DecisionTreeClassifier","2f380af9":"df = pd.read_csv('\/kaggle\/input\/fraud-detection-bank-dataset-20k-records-binary\/fraud_detection_bank_dataset.csv')\ndf.head()","c3add875":"print(\"Shape of dataset : {} \".format(df.shape))","2a8f2363":"print(\"total column that contain null value : {}\".format(df.isnull().sum().sum()))","181f14a5":"df.info()","d592ebda":"df.describe()","465f9e78":"for col in df.columns:\n    if len(df[col].unique()) == 0:\n        print(col, \" \")","18989529":"plt.figure(figsize = (18, 16))\ncorrmat = df.corr()\nk = 35 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'targets')['targets'].index\ncm = np.corrcoef(df[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","e2c5e268":"df['targets'].value_counts()","41fef26c":"df_0 = df[df['targets']==0][:5438]","c82ae317":"df_0['targets'].value_counts()","01327bf0":"df_1 = df[df['targets'] == 1]","3bc729a7":"df_1.shape","a471ab2b":"df = pd.concat([df_0, df_1], axis=0)","51db1ace":"df.shape","f9f0f03c":"X = df.drop('targets', axis=1)\ny = df['targets']","1fc51d31":"X = StandardScaler().fit_transform(X)","b4895e80":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","c0bee05a":"lr = LogisticRegression()\nlr.fit(X_train, y_train)\nlr.score(X_test, y_test)","034a4037":"y_pred = lr.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\ndf_cm = pd.DataFrame(cm)\nplt.figure(figsize = (8,5))\nsns.heatmap(df_cm, annot=True, cmap='YlGnBu')","d643ef23":"classification_report(y_test, y_pred)","66c14eb6":"dt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\ny_pred = dt.predict(X_test)\ndt.score(X_test, y_test)","556aa5f4":"cm = confusion_matrix(y_test, y_pred)\ndf_cm = pd.DataFrame(cm)\nplt.figure(figsize = (8,5))\nsns.heatmap(df_cm, annot=True, cmap='YlGnBu')","7ea9f70a":"classification_report(y_test, y_pred)","33b81830":"If column contain only one unique value than that column is not important let's check","6a722fb8":"**We got best accuracy in DecisionTreeClassifier it's 100% accurate**","4719abcf":"**maybe you confused that why I selected all columns instead of the only highly correlated columns but when I tried with only highly correlated columns than it's accuracy was very low so I decided to use all columns and result in you can see**","8567a5be":"DecisionTreeClassifier","6967593f":"Classification report for Decision tree classifier","2eafe259":"Our datasets is Imbalanced so it may increase error so make it balanced ","5c63b288":"Let's see about missing value","01226be1":"All features of dataset are numeric","6e5c2373":"Here is correlation matrix of top 35 value that mostly correlated with targets columns","222a77ec":"Linear Regression","bc890cb9":"Classififcation report for linear regression","7952ece8":"Convert into standardscaler","b6c31ed5":"Confusion matrix for Linear regression","9ff4ada2":"Split into train and test","a1663b37":"**if you like this don't forget to upvote it**","25a234af":"Import libraries","15bf7518":"Confusion matrix for DecisionTreeClassifier","218921be":"concat df_0 and df_1","6663576b":"Read file","ad0cbec5":"There are no missing value we are good to go"}}