{"cell_type":{"e924c113":"code","35f66dc1":"code","0cb3857d":"code","5939e7f4":"code","8ab616d6":"code","3c0f9061":"code","3e1a1c99":"code","9a33bae7":"code","c270c5c2":"code","b7ee5b6c":"code","1ddda82d":"code","3ac53d05":"code","0c7e9646":"code","fb1f53be":"code","0b083db8":"code","07f413df":"code","7a3fc6b4":"code","d4f2d7c7":"code","9736f183":"code","56159909":"code","e4f1fe56":"code","24d85982":"code","a5b57ed1":"code","6a748aeb":"code","0d52ac88":"code","b7fbaa18":"code","2b89de18":"code","b72d8e5d":"code","ce13d66c":"code","c3894538":"code","cd2fd61c":"code","e98970c0":"code","dc15cd8e":"code","8ede0c5e":"code","0881ca76":"code","04ec26cd":"code","df230883":"code","47df388e":"code","6a701761":"code","94a9e91c":"code","20aea003":"code","540b212a":"code","41f67fcb":"code","b4dbe1c9":"code","f124de9b":"code","d6c1c1bf":"code","db909778":"code","6f6bf111":"code","0986bf07":"code","d3997ad4":"code","e7083285":"code","72a28fc8":"code","df3525f2":"code","672b9cd4":"code","96c15044":"code","5bbf57d8":"code","35c9780a":"code","3421cc33":"code","fbf7fa4a":"code","3b67db10":"code","68cd8b2a":"code","80a20ab6":"code","011640b6":"code","5f733baa":"code","691d40dc":"code","521ddff8":"code","a85d7161":"code","4ad3f28a":"code","530942ba":"code","0f23d00b":"code","23ccaf12":"code","6c395938":"code","7669d13c":"code","323e6000":"code","202f5b22":"code","d4ddd66c":"code","013ba607":"code","eadfa391":"code","d7437aab":"code","f3325fab":"code","27e962e7":"code","76241005":"code","039f8a07":"code","8b406ead":"code","b31b9d8c":"code","dc50ca06":"code","243263c9":"code","e9ba829c":"code","8c524659":"code","465d9322":"code","06a2441c":"code","d5d55646":"code","948db29f":"code","521a4a1a":"code","51834d8d":"code","d3ca592d":"code","cc31637c":"markdown","ecbf0a5d":"markdown","8acdc81d":"markdown","ddd819f3":"markdown","15891405":"markdown","5970dd1d":"markdown","f1f15846":"markdown","c80ab743":"markdown","0d437a21":"markdown","cf309fab":"markdown","3f920f4f":"markdown","d78c2f7d":"markdown","fca93e69":"markdown","2e913df5":"markdown","87f34980":"markdown","ef2bdb8d":"markdown","c64cf344":"markdown","bb3aa560":"markdown","7f8c524f":"markdown","1004ad21":"markdown","22d2eb0e":"markdown","45e2e5a0":"markdown","00257fcf":"markdown","d164efe2":"markdown","b98e2bf3":"markdown","8d74098c":"markdown","84cf0c08":"markdown","6dc3d961":"markdown","c07d400d":"markdown","25356de4":"markdown","1a981468":"markdown","3cc2f7f5":"markdown","db6a0773":"markdown","5e538017":"markdown","1ede7528":"markdown","0336a05d":"markdown","e97711b5":"markdown","b5200ad2":"markdown","c8b45b44":"markdown","bd1633bb":"markdown","f74e1f10":"markdown","bdc212ea":"markdown","499440c4":"markdown","5f22c97b":"markdown","2310d215":"markdown","bb85b68e":"markdown","4d02157b":"markdown","a466492f":"markdown","243710d1":"markdown","d4019c42":"markdown","92db55f8":"markdown","5156ef58":"markdown","9bb971d5":"markdown","7ce68590":"markdown"},"source":{"e924c113":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder,OrdinalEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","35f66dc1":"train = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\ntrain.head()","0cb3857d":"test = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\ntest.head()","5939e7f4":"train_copy = train.copy()","8ab616d6":"train.drop('Survived', axis=1, inplace = True)","3c0f9061":"data = pd.concat([train,test], ignore_index=True)\ndata.head()","3e1a1c99":"data.info()","9a33bae7":"data.describe()","c270c5c2":"data.isnull().sum()","b7ee5b6c":"plt.figure(figsize=(7,5))\nsns.countplot(x='Survived', data=train_copy)","1ddda82d":"plt.figure(figsize=(7,5))\nsns.countplot(x='Sex', data=train_copy)","3ac53d05":"plt.figure(figsize=(7,5))\nsns.countplot(x='Embarked', data=train_copy)","0c7e9646":"plt.figure(figsize=(7,5))\nsns.countplot(x='Pclass', data=train_copy)","fb1f53be":"sns.pairplot(train_copy, vars=['Age','Fare','SibSp','Parch'], hue='Survived', \n             kind='scatter',diag_kind='hist', corner= True, dropna=True )","0b083db8":"sns.catplot(x=\"Embarked\", y=\"Survived\",  kind=\"violin\", data=train_copy)","07f413df":"data['Pclass'] = data['Pclass'].astype('object')","7a3fc6b4":"age_mean = data['Age'].mean()\ndata['Age'].fillna(age_mean, inplace = True)\ndata = data.round({'Age' : 2})","d4f2d7c7":"fare_mean = data['Fare'].mean()\ndata['Fare'].fillna(fare_mean, inplace = True)","9736f183":"data['Embarked'].fillna('X', inplace = True)","56159909":"data['Ticket'].fillna('X', inplace = True)","e4f1fe56":"data['Cabin'].fillna('X', inplace = True)","24d85982":"data[['First','Last']] = data.Name.str.split(',', expand=True)","a5b57ed1":"data['Class'] = data['Cabin'].str[:1]","6a748aeb":"data['Family'] = data['SibSp'] + data['Parch'] + 1","0d52ac88":"data.drop(['Name','First','Cabin','PassengerId'], axis=1, inplace = True)","b7fbaa18":"cor = data.corr()\nsns.heatmap(cor, annot = True)","2b89de18":"data.head()","b72d8e5d":"label = LabelEncoder()\ndata['Ticket'] = label.fit_transform(data['Ticket'])\ndata['Last'] = label.fit_transform(data['Last'])\ndata['Class'] = label.fit_transform(data['Class'])","ce13d66c":"data_onehot = pd.get_dummies(data[['Sex','Embarked']])\ndata_onehot.head()","c3894538":"ordinal = OrdinalEncoder()\ndata['Pclass'] = label.fit_transform(data['Pclass'])","cd2fd61c":"data = pd.concat([data,data_onehot], axis=1)\ndata.head()","e98970c0":"data.drop(['Sex','Embarked'], axis=1, inplace=True)","dc15cd8e":"data.head()","8ede0c5e":"train = data[:100000]\ntest = data[100000:]","0881ca76":"train = pd.concat([train,train_copy['Survived']], axis=1)\ntrain.head()","04ec26cd":"X = train.iloc[:,0:15]\ny = train.iloc[:,15:]","df230883":"X_train,X_test,y_train,y_test = train_test_split(X, y, test_size=0.2, random_state=42)","47df388e":"pipe_log_reg = Pipeline([\n    ('scaler',StandardScaler()),\n    ('log_reg', LogisticRegression())\n])","6a701761":"pipe_log_reg.fit(X_train,y_train)","94a9e91c":"logistic_regression_score = pipe_log_reg.score(X_test,y_test)\nlogistic_regression_score","20aea003":"parameters = {\n    'log_reg__penalty':['l1', 'l2', 'elasticnet', 'none'],\n    'log_reg__C': [0.001,0.01,0.1,1.0,10,100],\n    'log_reg__solver' : [ 'liblinear']\n}","540b212a":"log_reg_search = GridSearchCV(pipe_log_reg, param_grid=parameters)\nlog_reg_search.fit(X_train,y_train)","41f67fcb":"log_reg_search.best_params_","b4dbe1c9":"log_reg_search.best_score_","f124de9b":"pipe_log_reg_tuned = log_reg_search.best_estimator_\nprint(pipe_log_reg_tuned)","d6c1c1bf":"pipe_log_reg_tuned.fit(X_train,y_train)","db909778":"logistic_regression_tuned_score = pipe_log_reg_tuned.score(X_test,y_test)\nlogistic_regression_tuned_score","6f6bf111":"pipe_rf = Pipeline([\n    ('scaler',StandardScaler()),\n    ('rf', RandomForestClassifier())\n])","0986bf07":"pipe_rf.fit(X_train,y_train)","d3997ad4":"random_forest_score = pipe_rf.score(X_test,y_test)\nrandom_forest_score","e7083285":"parameters = {\n    \n    'rf__n_estimators' : [100,150] , \n    'rf__max_depth' : [5, 10, 15],  \n    'rf__min_samples_split' : [2, 5], \n    'rf__min_samples_leaf' : [1, 2]\n}","72a28fc8":"rf_search = GridSearchCV(pipe_rf, param_grid=parameters)\nrf_search.fit(X_train,y_train)","df3525f2":"rf_search.best_params_","672b9cd4":"rf_search.best_score_","96c15044":"pipe_rf_tuned = rf_search.best_estimator_\nprint(pipe_rf_tuned)","5bbf57d8":"pipe_rf_tuned.fit(X_train,y_train)","35c9780a":"rf_tuned_score = pipe_rf_tuned.score(X_test,y_test)\nrf_tuned_score","3421cc33":"pipe_lgbm = Pipeline([\n    ('scaler',StandardScaler()),\n    ('lgbm', LGBMClassifier())\n])","fbf7fa4a":"pipe_lgbm.fit(X_train,y_train)","3b67db10":"lgbm_score = pipe_lgbm.score(X_test,y_test)\nlgbm_score","68cd8b2a":"parameters = {\n    'lgbm__objective': ['binary'],\n    'lgbm__boosting_type' : ['gbdt'],\n    'lgbm__learning_rate' : [0.0001,0.001,0.01,0.1],\n    'lgbm__num_leaves': [40,50,60,70],\n    'lgbm__min_child_samples' : [10,20,30],\n    #'lgbm__min_child_weight' : [0.01, 0.001, 0.0001, 0.00001],\n    #'lgbm__reg_alpha' : [0.1, 0.2,0.4, 0.6, 0.8],\n    #'lgbm__reg_lambda' : [0.1, 0.2,0.4, 0.6, 0.8]\n}","80a20ab6":"lgbm_search = GridSearchCV(pipe_lgbm, param_grid=parameters)\nlgbm_search.fit(X_train,y_train)","011640b6":"lgbm_search.best_params_","5f733baa":"lgbm_search.best_score_","691d40dc":"pipe_lgbm_tuned = lgbm_search.best_estimator_\nprint(pipe_lgbm_tuned)","521ddff8":"pipe_lgbm_tuned.fit(X_train,y_train)","a85d7161":"lgbm_tuned_score = pipe_rf_tuned.score(X_test,y_test)\nlgbm_tuned_score","4ad3f28a":"lr_y_pred = pipe_log_reg.predict(X_test)","530942ba":"lr_accuracy = accuracy_score(y_test, lr_y_pred)\nlr_accuracy","0f23d00b":"lr_cm = confusion_matrix(y_test, lr_y_pred)\nlr_cm","23ccaf12":"lr_tuned_y_pred = pipe_log_reg_tuned.predict(X_test)","6c395938":"lr_tuned_accuracy = accuracy_score(y_test, lr_tuned_y_pred)\nlr_tuned_accuracy","7669d13c":"lr_cm = confusion_matrix(y_test, lr_tuned_y_pred)\nlr_cm","323e6000":"rf_y_pred = pipe_rf.predict(X_test)","202f5b22":"rf_accuracy = accuracy_score(y_test, rf_y_pred)\nrf_accuracy","d4ddd66c":"rf_cm = confusion_matrix(y_test, rf_y_pred)\nrf_cm","013ba607":"rf_tuned_y_pred = pipe_rf_tuned.predict(X_test)","eadfa391":"rf_tuned_accuracy = accuracy_score(y_test, rf_tuned_y_pred)\nrf_tuned_accuracy","d7437aab":"rf_tuned_cm = confusion_matrix(y_test, rf_tuned_y_pred)\nrf_tuned_cm","f3325fab":"lgbm_y_pred = pipe_lgbm.predict(X_test)","27e962e7":"lgbm_accuracy = accuracy_score(y_test, lgbm_y_pred)\nlgbm_accuracy","76241005":"lgbm_cm = confusion_matrix(y_test, lgbm_y_pred)\nlgbm_cm","039f8a07":"lgbm_tuned_y_pred = pipe_lgbm_tuned.predict(X_test)","8b406ead":"lgbm_tuned_accuracy = accuracy_score(y_test, lgbm_tuned_y_pred)\nlgbm_tuned_accuracy","b31b9d8c":"lgbm_tuned_cm = confusion_matrix(y_test, lgbm_tuned_y_pred)\nlgbm_tuned_cm","dc50ca06":"accuracy_df = pd.DataFrame(data = {'Out-of-Box': [lr_accuracy,rf_accuracy,lgbm_accuracy],\n                                  'Tuned': [lr_tuned_accuracy,rf_tuned_accuracy,lgbm_tuned_accuracy],\n                                  'Models': ['Logistic Regression', 'Random Forest', 'LightGBM']})\naccuracy_df.set_index('Models', inplace = True)\naccuracy_df","243263c9":"test_lgbm_y_pred = pipe_lgbm.predict(test)\ntest_lgbm_y_pred","e9ba829c":"test_rf_y_pred = pipe_rf.predict(test)\ntest_rf_y_pred","8c524659":"test_lr_y_pred = pipe_log_reg.predict(test)\ntest_lr_y_pred","465d9322":"submission_lgbm = pd.DataFrame({\n    'PassengerId' : train_copy['PassengerId'],\n    'Survived': test_lgbm_y_pred})\nsubmission_lgbm.head()","06a2441c":"submission_lgbm.to_csv('submission_lgbm.csv', index=False)","d5d55646":"submission_rf = pd.DataFrame({\n    'PassengerId' : train_copy['PassengerId'],\n    'Survived': test_rf_y_pred})\nsubmission_rf.head()","948db29f":"submission_rf.to_csv('submission_rf.csv', index=False)","521a4a1a":"submission_lr = pd.DataFrame({\n    'PassengerId' : train_copy['PassengerId'],\n    'Survived': test_lr_y_pred})\nsubmission_lr.head()","51834d8d":"submission_lr.to_csv('submission_lr.csv', index=False)","d3ca592d":"test_accuracy = pd.DataFrame({'Models' : ['LightGBM', 'Logistic Regression', 'Random Forest'],\n                             'Accuracy': [0.79369, 0.78211, 0.76883]})\ntest_accuracy.set_index('Models', inplace = True)\ntest_accuracy","cc31637c":"#### Note: We will use all the features in model building since there are no strong correlation between independent features. (threshold = 0.9)","ecbf0a5d":"### \ud83c\udff9 Building pipeline for LightGBM model","8acdc81d":"## \ud83d\udc49  Accuracy score and Confusion matrix for LightGBM","ddd819f3":"## \ud83d\udc49 Create new feature 'First' and 'Last' name from 'Name'","15891405":"## \ud83d\udc49 Dropping unwanted features","5970dd1d":"### \ud83c\udff9 Modeling using the new parameter for LightGBM","f1f15846":"# \ud83d\ude80 Data Loading","c80ab743":"## \ud83d\udc49 Create another copy of train dataset","0d437a21":"## \ud83d\udc49 Concating train and test dataset","cf309fab":"## \ud83d\udc49 Compare the accuracy for all models","3f920f4f":"## \ud83d\udc49 Load train and test dataset","d78c2f7d":"## \ud83d\udc49 Drop 'Survived' feature from train dataset","fca93e69":"## \ud83d\udc49 Separating Independent and dependent features from train data","2e913df5":"## \ud83d\udc49 Logistic Regression","87f34980":"# \ud83d\ude80 Model Selection","ef2bdb8d":"#### We will select LightGBM model since, it gave us the best accuracy","c64cf344":"### \ud83c\udff9 hyperparameter tuning for LightGBM pipeline","bb3aa560":"### \ud83c\udff9 Building pipeline for Logistic Regression model","7f8c524f":"### \ud83c\udff9 Building pipeline for Random Forest Classifier model","1004ad21":"## \ud83d\udc49 Random Forest Classifier","22d2eb0e":"### \ud83c\udff9 Modeling using the new parameter for Random Forest Classifier","45e2e5a0":"## \ud83d\udc49 Ordinal Encoding for 'Pclass' feature","00257fcf":"# \ud83d\ude80 Submitted model accuracies","d164efe2":"## \ud83d\udc49 One-Hot Encoding for 'Sex' and 'Embarked' features","b98e2bf3":"## \ud83d\udc49 Imputing missing values for all features","8d74098c":"## \ud83d\udc49 Check null values in dataset","84cf0c08":"## \ud83d\udc49 Concating One-Hot encoded features with original data","6dc3d961":"### \ud83c\udff9 hyperparameter tuning for logistic regression pipeline","c07d400d":"### \ud83c\udff9 hyperparameter tuning for Random Forest Classifier pipeline","25356de4":"# \ud83d\ude80 Import Libraries","1a981468":"## \ud83d\udc49 Label Encoding for 'Ticket', 'Last' and 'Class' features","3cc2f7f5":"## \ud83d\udc49 Accuracy score and Confusion matrix for Random Forest Classifier","db6a0773":"# \ud83d\ude80 Model Building","5e538017":"### \ud83c\udff9 Modeling using the new parameter for Logistic Regression","1ede7528":"# \ud83d\ude80 Exploratory Data Analysis (EDA)","0336a05d":"## \ud83d\udc49 Splitting the train data into training and validation","e97711b5":"## \ud83d\udc49 Check data description","b5200ad2":"## \ud83d\udc49 Drop unwanted columns ","c8b45b44":"# \ud83d\ude80 Feature Selection","bd1633bb":"## \ud83d\udc49 Check data information","f74e1f10":"## \ud83d\udc49 Accuracy score and Confusion matrix for Logistic regression","bdc212ea":"# \ud83d\ude80 Data Transformation","499440c4":"## \ud83d\udc49 Create new feature 'Family' from 'SibSp' and 'Parch'","5f22c97b":"## \ud83d\udc49 Changing datatype of 'Pclass' from int to object","2310d215":"## \ud83d\udc49 Visualizing the features","bb85b68e":"## \ud83d\udc49 Create new feature 'Class' from 'Cabin'","4d02157b":"# \ud83d\ude80 Submissions of all models","a466492f":"## \ud83d\udc49 Separating the train and test data","243710d1":"# \ud83d\ude80 Predicting test data using LightGBM, Random Forest Classfier and Logistic regression model","d4019c42":"# \ud83d\ude80  Model Metrics","92db55f8":"# \ud83d\ude80 Data Preprocessing","5156ef58":"## \ud83d\udc49 LightGBM","9bb971d5":"## \ud83d\udc49 Concating 'Survived' column from train_copy to train dataset","7ce68590":"# \ud83d\ude80 Feature Engineering"}}