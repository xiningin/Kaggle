{"cell_type":{"f428788f":"code","622c64aa":"code","94aa11b6":"code","37c1c183":"code","9bf22162":"code","6af74d72":"code","31474834":"code","444b1090":"code","de735edb":"code","d74cb907":"code","d3b922a2":"code","adf806d2":"code","12a5854c":"code","6f959b3a":"code","bba06965":"code","a33764cc":"code","17012b14":"code","0affa1c8":"code","2e89fdc2":"code","1f330d43":"code","26afe5a9":"markdown","e0972208":"markdown"},"source":{"f428788f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","622c64aa":"import torch\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random","94aa11b6":"import numpy as np\nimport torch\nimport torch.optim as optim\nimport pandas as pd\n\nxy=pd.read_csv('\/kaggle\/input\/city-commercialchange-analysis\/train.csv')\nxy","37c1c183":"x_data=xy.iloc[:,0:7]    #0~7 col\ny_data=xy.iloc[:,7]\n\nx_data","9bf22162":"y_data","6af74d72":"x_train=np.array(x_data)\ny_train=np.array(y_data)\n\nx_train=torch.FloatTensor(x_train)\ny_train=torch.LongTensor(y_train)\n\nx_train[:5]","31474834":"x_train.shape","444b1090":"y_train.shape","de735edb":"y_train","d74cb907":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","d3b922a2":"# \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130 \uc124\uc815\nlearning_rate = 0.01\ntraining_epochs = 45\nbatch_size = 100","adf806d2":"\ntrain = torch.utils.data.TensorDataset(x_train, y_train)","12a5854c":"data_loader = torch.utils.data.DataLoader(dataset=train,\n                                          batch_size=batch_size,\n                                          shuffle=True,\n                                          drop_last=True)\n#xy=train","6f959b3a":"# 3-Layer\n\nlinear1 = torch.nn.Linear(7,256,bias=True)\nlinear2 = torch.nn.Linear(256,256,bias=True)\nlinear3 = torch.nn.Linear(256,4,bias=True)\nrelu = torch.nn.ReLU()","bba06965":"# Random Init => Xavier Init\ntorch.nn.init.xavier_normal_(linear1.weight)\ntorch.nn.init.xavier_normal_(linear2.weight)\ntorch.nn.init.xavier_normal_(linear3.weight)","a33764cc":"model = torch.nn.Sequential(linear1,relu,linear2,relu,linear3).to(device)","17012b14":"# \uc190\uc2e4\ud568\uc218\uc640 \ucd5c\uc801\ud654 \ud568\uc218\nloss = torch.nn.CrossEntropyLoss().to(device) # softmax \ub0b4\ubd80\uc801\uc73c\ub85c \uacc4\uc0b0\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate) ","0affa1c8":"\ntotal_batch = len(data_loader)\nfor epoch in range(training_epochs):\n    avg_cost = 0\n\n    for X, Y in data_loader:\n\n        # one-hot encoding\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc74c\n        Y = Y.to(device)\n        #%debug\n\n        # \uadf8\ub798\ub514\uc5b8\ud2b8 \ucd08\uae30\ud654\n        optimizer.zero_grad()\n        # Forward \uacc4\uc0b0\n        hypothesis = model(X)\n        # Error \uacc4\uc0b0\n        cost = loss(hypothesis, Y)\n        # Backparopagation\n        cost.backward()\n        # \uac00\uc911\uce58 \uac31\uc2e0\n        optimizer.step()\n\n        # \ud3c9\uade0 Error \uacc4\uc0b0\n        avg_cost += cost \/ total_batch\n\n    print('Epoch:', '%04d' % (epoch + 1), 'cost =', '{:.9f}'.format(avg_cost))\n\nprint('Learning finished')","2e89fdc2":"submit = pd.read_csv('\/kaggle\/input\/city-commercialchange-analysis\/submit.csv')\nsubmit","1f330d43":"id=np.array([i for i in range(62)]).reshape(-1,1)\nprediction=prediction.reshape(-1,1)\n\nresult=np.hstack([id, prediction])\ndf=pd.DataFrame(result, columns=['ID','Label'])\ndf.to_csv('baseline.csv', index=False, header=True)\n\nresult","26afe5a9":"### 3layer \n- xavier init\n- Adam\n- hidden layer node \uac1c\uc218: 512\n- \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130 \uc124\uc815\n  - learning_rate = 0.01\n  - training_epochs = 15\n  - batch_size = 100\n- -> Accuracy: 0.5483871102333069**","e0972208":"### training epoch\uacfc hidden layer node \uac1c\uc218 \ubcc0\uacbd\n- training_epochs = 45 ~ 55\n- hidden layer node \uac1c\uc218: 256\n\n### -> Accuracy: 0.725806474685669"}}