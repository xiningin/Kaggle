{"cell_type":{"2f92cfa1":"code","2409ccff":"code","9b56c497":"code","f01e4b63":"code","78e297ad":"code","2cb7a44e":"code","3e0288ca":"code","2df86625":"code","11ec6d43":"markdown","ca3189bd":"markdown","3c4f0590":"markdown","fa291ab1":"markdown","4d8f08ea":"markdown","e14408b4":"markdown"},"source":{"2f92cfa1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2409ccff":"#importing necessary libraries\nimport pandas as pd #For Dataset import for stats layer\nimport folium       #Folium library for map visualisation and customisation\nimport json         #json library for importing geo.json file","9b56c497":"#Folium map object creation\nWorldmap = folium.Map(zoom_start=18)\nWorldmap","f01e4b63":"NY_map = folium.Map(location =[40.7128, -74.0060])\nNY_map","78e297ad":"Ny_m = folium.Map(location=[40.7128, -74.0060], zoom_start=12, tiles = \"Stamen Toner\")\n\ntooltip = \"Click me!\"\n\nfolium.Marker(\n    [40.706005, -74.008827], popup=\"<i>Wall Street<\/i>\", tooltip=tooltip\n).add_to(Ny_m)\n\nNy_m","2cb7a44e":"df = pd.read_csv(r'..\/input\/world-happiness-report-2021\/world-happiness-report-2021.csv')\ndf.head()","3e0288ca":"world_map_js = r'..\/input\/d\/sivasankarmc\/world-happiness-report-2021\/custom.geo.json'\n\nprint(type(world_map_js))","2df86625":"folium.Choropleth(geo_data=world_map_js ,data=df, columns=['Country name','Logged GDP per capita'],key_on='feature.properties.name',fill_color = 'RdPu',fill_opacity=1,line_opacity=1,legend_name='World GDP per capita - Log',smooth_factor=0).add_to(Worldmap)\n\nWorldmap","11ec6d43":"### For specific city - input Lat Long in the paranthesis\n* #### NewYork: 40.7128\u00b0 N, 74.0060\u00b0 W\n* #### make sure to input *-ve sign* for Long co-ord if it is in 'W'\n  \n* #### Mumbai: 19.0760\u00b0 N, 72.8777\u00b0 E\n* #### No sign change required","ca3189bd":"* ## Datalayer addition with Choropleth\n* ### choropleth method under folium to add data visual layer\n* ####  specify the .geojson file loaded var in *geo_data* *arg*\n* ####  specify the dataset imported containing the stats to be displayed in *data* *arg*\n* ####  *columns* *arg* to specify the columns to be displayed in the dataset,\n* ####  *key_on* *arg* to specify the .geojson file feature under which the columns data to be displayed - in this case it is properties.name\n* ####  *other* *arg*s are fill_color, fill_opacity, legend_name, smooth_factor\n* ####  with *.add_to* method we can add this layer to the folium.map.\n\n* #### In below example will display the world gdp data stats distribution across the world above the Folium worldmap layer","3c4f0590":"* #### Basics of Folium map creation and customisation have been specified in this notebook along with stats data layer addition\n\n* #### Link for quickstart tutorial for Folium maps: https:\/\/python-visualization.github.io\/folium\/quickstart.html","fa291ab1":"### **Displaying stats with .geojson file overlay**:\n* ####   import the dataset containing the stats - *Country Name* should be available in the data for choropleth to index\n\n* ####   Below eg. we will update Data stats layer with *'World Happiness report - 2021'* stats.","4d8f08ea":"### Customisation:\n* #### **Tiles**: This argument when passed in the method with specific tilestyle name: it formats the layout of the map\n\n* #### **Marker**: Adds a marker in the specified latlong that can be added to the map with *'.add_to'(**map**)*\n\n* #### Below eg. for placing location marker at *WallStreet* with popup marker and map vis style name: *'Stamen Toner'*","e14408b4":"## Folium Lib & Choropleth\n* ###   In this Notebook we will see the basic methods available in the Folium Library for Maps.\n* ####    Folium library is used for visualising WorldMap (cities, countries, continents)\n* ####    with specific Lat long coords we can visualise close view of cities, streets, locations.\n* ####    We can add custom geo.json files as additional layer to view data stats distributed in the map."}}