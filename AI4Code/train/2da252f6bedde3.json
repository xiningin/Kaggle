{"cell_type":{"d9d0be86":"code","07868b0d":"code","8702b42d":"code","ee0fb8ad":"code","dce27b3c":"code","76afbe41":"code","f49279f6":"code","c2c46127":"code","fa7b804b":"code","2da04ec4":"code","61f8a47e":"code","f464084f":"code","3e2c43bf":"code","4cdfdd20":"code","a28b64d6":"code","f325c088":"code","a5f96ed4":"code","be18e59d":"code","1c45a6f0":"code","6fe7c161":"code","700a0088":"code","a8fd34df":"code","0d0db34e":"code","32a89e25":"code","c9b7ee31":"code","51806cd9":"code","9bc69f67":"markdown","0538e6f2":"markdown","f0461b06":"markdown","19f25978":"markdown","05bd55d3":"markdown","70919849":"markdown","929ab8d9":"markdown","a84ee3f4":"markdown","2878b386":"markdown","66d3749c":"markdown","4713bcf1":"markdown","15da4ed5":"markdown","2948b712":"markdown","aa0d1bc0":"markdown","396bdf9c":"markdown","cb73430a":"markdown","272b97bd":"markdown","2b25ab7e":"markdown","d1323b5d":"markdown","9dbde48d":"markdown"},"source":{"d9d0be86":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","07868b0d":"data = pd.read_csv(\"\/kaggle\/input\/pokemon\/Pokemon.csv\")\ndata = data.drop(\"#\",axis=1)\ndata.head()","8702b42d":"desc = data.drop([\"Name\",\"Type 1\",\"Type 2\",\"Generation\",\"Legendary\"],axis=1)\ndesc.describe()","ee0fb8ad":"def autolabel(rects,h):\n    for rect in rects:\n        height = rect.get_height()\n        if(height >h):\n            rect.set_color(\"blue\")\n        ax.text(rect.get_x() + rect.get_width()\/2., 1.01*height,'%d' % int(height),ha='center', va='bottom')\n\nplt.figure(figsize=(5,5))\nbars = plt.bar(data[\"Generation\"].unique(), data.groupby(\"Generation\").count()[\"Name\"],color=\"lightgrey\",alpha=0.8)\nax = plt.gca()\nax.axes.get_yaxis().set_visible(False)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.title('number of pokemons across generations')\nautolabel(bars,150)\nplt.show()","dce27b3c":"plt.figure(figsize=(20,5))\nbars = plt.bar(data[\"Type 1\"].unique(), data.groupby(\"Type 1\").count()[\"Name\"],color=\"lightgrey\",alpha=0.8)\nax = plt.gca()\nax.axes.get_yaxis().set_visible(False)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.title('Number of pokemons across type 1')\nautolabel(bars,90)\nplt.show()","76afbe41":"fig,((ax1,ax2,ax3), (ax4,ax5,ax6)) = plt.subplots(2, 3,figsize=(20, 10), sharex=False, sharey=True)\naxs = [ax1,ax2,ax3,ax4,ax5,ax6]\ni=1\nfor ax in axs:\n    bars = ax.bar(data.groupby([\"Generation\",\"Type 1\"]).count().loc[i].index, data.groupby([\"Generation\",\"Type 1\"]).count().loc[i][\"Name\"],color=\"lightgrey\",alpha=0.8)\n    ax.axes.get_yaxis().set_visible(False)\n    ax.set_title(\"Generation \"+str(i), y = 0.7)\n    autolabel(bars,17)\n    for spine in ax.spines.values():\n        spine.set_visible(False)\n    x = ax.xaxis\n    i = i+1\n    for item in x.get_ticklabels():\n        item.set_rotation(90)\nplt.show()","f49279f6":"legendary = data[data[\"Legendary\"]==True]\nfig,(ax1,ax2) = plt.subplots(1, 2,figsize=(20, 10), sharex=False, sharey=True)\nax=ax1\nax.set_title(\"Legendary and Genaration\",y = 1)\nba1 = ax.bar(legendary[\"Generation\"].unique(), legendary.groupby(\"Generation\").count()[\"Name\"],color=\"lightgrey\",alpha=0.8)\nautolabel(ba1,17)\nax=ax2\nax.set_title(\"Legendary and Type 1\",y = 1)\nba2 = ax.bar(legendary[\"Type 1\"].unique(), legendary.groupby(\"Type 1\").count()[\"Name\"],color=\"lightgrey\",alpha=0.8)\nx = ax.xaxis\nfor item in x.get_ticklabels():\n    item.set_rotation(45)\nautolabel(ba2,12)\nax1.axes.get_yaxis().set_visible(False)\nax2.axes.get_yaxis().set_visible(False)\nfor spine in ax1.spines.values():\n    spine.set_visible(False)\nfor spine in ax2.spines.values():\n    spine.set_visible(False)\nplt.show()","c2c46127":"legendary = data[data[\"Legendary\"]==True]\nnotlegendary = data[data[\"Legendary\"]==False]\nplt.figure(figsize=(15,10))\n\nplt.plot(notlegendary.groupby(\"Type 1\").mean().index,notlegendary.groupby(\"Type 1\").mean()[\"Defense\"],label=\"Nonlegendary Defence\",alpha=0.6)\nplt.plot(notlegendary.groupby(\"Type 1\").mean().index,notlegendary.groupby(\"Type 1\").mean()[\"Attack\"],label=\"Nonlegendary Attack\",alpha=0.6)\n\nplt.scatter(legendary.groupby(\"Type 1\").mean().index,legendary.groupby(\"Type 1\").mean()[\"Attack\"],alpha=1,color='red',label=\"Legendary attack\")\nplt.scatter(legendary.groupby(\"Type 1\").mean().index,legendary.groupby(\"Type 1\").mean()[\"Defense\"],alpha=1,color='blue',label='Legendary defense')\n\nax = plt.gca()\nax.xaxis.grid(True,alpha=0.4)\nax.yaxis.grid(True,alpha=0.4)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.gca().fill_between(notlegendary.groupby(\"Type 1\").mean().index, \n                       notlegendary.groupby(\"Type 1\").mean()[\"Attack\"], notlegendary.groupby(\"Type 1\").mean()[\"Defense\"], \n                       facecolor='grey', \n                       alpha=0.2)\nplt.title(\"Pokemon mean attack and defense,legendary and nonlegendary\")\nplt.legend()\nplt.show()","fa7b804b":"fig, ((ax1,ax2,ax3), (ax4,ax5,ax6))  = plt.subplots(2, 3,figsize=(20,15) ,sharex=True,sharey=True)\naxs = [ax1,ax2,ax3,ax4,ax5,ax6]\nnames = [\"HP\",\"Attack\",\"Defense\",\"Sp. Atk\",\"Sp. Def\",\"Speed\"]\ni=0\nfor ax in axs:\n    ax.hist(data[names[i]])\n    ax.yaxis.grid(True,alpha=0.4)\n    ax.set_title(names[i])\n    for spine in ax.spines.values():\n        spine.set_visible(False)\n    i = i+1\nplt.show()","2da04ec4":"plt.figure()\nplt.hist(data[\"Total\"])\nax = plt.gca()\nax.yaxis.grid(True,alpha=0.4)\nax.set_title(\"Total\")\nfor spine in ax.spines.values():\n    spine.set_visible(False)\nplt.show()","61f8a47e":"\nfig, (ax1,ax2)  = plt.subplots(1, 2,figsize=(14,8) ,sharex=True,sharey=True)\nax1.scatter(data[\"Total\"],data[\"Attack\"])\nax1.set_title(\"Total(x) and Attack(y)\")\nax2.scatter(data[\"Total\"],data[\"Defense\"])\nax2.set_title(\"Total(x) adn Defense(y)\")\nplt.show()","f464084f":"fig, (ax1,ax2)  = plt.subplots(1, 2,figsize=(15,6) ,sharex=False,sharey=False)\nh = ax1.hist2d(data['Attack'], data['Defense'],bins=25 )\nax1.set_title(\"Attack(x) and Defense(y)\")\nplt.colorbar(h[3], ax=ax1)\nh = ax2.hist2d(data['HP'], data['Total'],bins=25 )\nax2.set_title(\"HP(x) and Total(y)\")\nplt.colorbar(h[3], ax=ax2)\nplt.show()","3e2c43bf":"plt.figure(figsize=(10,5))\nbox = plt.boxplot([data['HP'], data['Attack'],data[\"Defense\"],data[\"Sp. Atk\"],data[\"Sp. Def\"],data[\"Speed\"] ] , patch_artist=True)\nax = plt.gca()\nax.set_xticklabels(('HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def','Speed'))\nfor spine in ax.spines.values():\n    spine.set_visible(False)\nax.yaxis.grid(True,alpha=0.4)\nplt.setp(box[\"boxes\"], facecolor=\"lightgrey\")\nplt.show()","4cdfdd20":"plt.figure(figsize=(5,4))\nbox = plt.boxplot(data['Total'] ,patch_artist=True)\nplt.setp(box[\"boxes\"], facecolor=\"lightgrey\")\nax = plt.gca()\nax.set_xticklabels(('Total',''))\nax.yaxis.grid(True,alpha=0.4)\nfor spine in ax.spines.values():\n    spine.set_visible(False)\nplt.show()","a28b64d6":"ax=desc.plot.kde(figsize=(15,10))\nfor spine in ax.spines.values():\n    spine.set_visible(False)\nax.yaxis.grid(True,alpha=0.4)","f325c088":"data2 = data.drop([\"Name\",\"Type 2\",\"Type 1\",\"Legendary\",\"Generation\"],axis=1)\nsns.jointplot(data2[\"Total\"], data2[\"HP\"], kind='hex');\nsns.jointplot(data2[\"Total\"], data2[\"HP\"], kind='kde');","a5f96ed4":"plt.figure(figsize=(20,10))\nplt.subplot(231)\nsns.violinplot('Generation', 'Total', data=data);\nplt.subplot(232)\nsns.violinplot('Generation', 'HP', data=data);\nplt.subplot(233)\nsns.violinplot('Generation', 'Attack', data=data);\nplt.subplot(234)\nsns.violinplot('Generation', 'Defense', data=data);\nplt.subplot(235)\nsns.violinplot('Generation', 'Sp. Atk', data=data);\nplt.subplot(236)\nsns.violinplot('Generation', 'Sp. Def', data=data);","be18e59d":"datax = data.drop([\"Name\",\"Type 1\",\"Type 2\",\"Generation\"],axis=1)\n_=sns.pairplot(datax, hue='Legendary', diag_kind='kde', height=2)\n_=10","1c45a6f0":"df = pd.DataFrame(data,columns=['Total','HP','Attack','Defense','Sp. Atk','Sp. Def','Speed'])\ncorrMatrix = df.corr()\nf, ax = plt.subplots(figsize=(8, 6))\nax = sns.heatmap(corrMatrix, annot=True)\nplt.show()","6fe7c161":"regresX = data.loc[:,\"Sp. Atk\":]\nregresy = pd.DataFrame(data.loc[:,\"Total\"])","700a0088":"X_train, X_test, y_train, y_test = train_test_split(pd.DataFrame(regresX.loc[:,\"Sp. Atk\"]), regresy,\n                                                   random_state = 0)\nlinreg = LinearRegression().fit(X_train, y_train)","a8fd34df":"x = np.array(regresX[\"Sp. Atk\"])\nplt.figure(figsize=(10,8))\nplt.scatter(regresX.loc[:,\"Sp. Atk\"], regresy, marker= 'o', s=50, alpha=0.8)\nplt.plot(regresX.loc[:,\"Sp. Atk\"], linreg.coef_ * x.reshape(-1,1) + linreg.intercept_, 'r-')\nplt.title('Least-squares linear regression,R-squared score (test): {:.3f}'.format(linreg.score(X_test, y_test)))\nplt.xlabel('Sp. Atk')\nplt.ylabel('Total')\nax = plt.gca()\nax.xaxis.grid(True,alpha=0.4)\nax.yaxis.grid(True,alpha=0.4)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.show()","0d0db34e":"sns.set_style('whitegrid') \n_=sns.lmplot(x ='Sp. Atk', y ='Total', data = data,height=6,hue ='Legendary', markers =['o', 'v'],row ='Generation')","32a89e25":"regresX2 = data.loc[data[\"Legendary\"]==False,\"Sp. Atk\"]\nregresy2 = data.loc[data[\"Legendary\"]==False,\"Total\"]","c9b7ee31":"X_train, X_test, y_train, y_test = train_test_split(pd.DataFrame(regresX2), pd.DataFrame(regresy2),\n                                                   random_state = 0)\nlinreg = LinearRegression().fit(X_train, y_train)","51806cd9":"x = np.array(regresX2)\nplt.figure(figsize=(10,8))\nplt.scatter(regresX2, regresy2, marker= 'o', s=50, alpha=0.8)\nplt.plot(regresX2, linreg.coef_ * x.reshape(-1,1) + linreg.intercept_, 'r-')\nplt.title('Least-squares linear regression,R-squared score (test): {:.3f}'.format(linreg.score(X_test, y_test)))\nplt.xlabel('Sp. Atk')\nplt.ylabel('Total')\nax = plt.gca()\nax.xaxis.grid(True,alpha=0.4)\nax.yaxis.grid(True,alpha=0.4)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.show()","9bc69f67":"#### I would think that getting read of legendary pokemnos and doing regression only on ordinary pokemons will get me better score, but apparently this is not the case.","0538e6f2":"### And some boxplots. At first they were hard to understand, but they are useful.","f0461b06":"## Importing all necessary Libraries\n* A (software) library is a collection of files (called modules) that contains functions for use by other programs.\n* May also contain data values (e.g., numerical constants) and other things.\n* Library\u2019s contents are supposed to be related, but there\u2019s no way to enforce that.\n* The Python standard library is an extensive suite of modules that comes with Python itself.\n* Many additional libraries are available from PyPI (the Python Package Index).","19f25978":"### And density function. Without it I would have not know that Total one has two peaks. I guess some pokemons are better than others.","05bd55d3":"### Now basic histograms","70919849":"### I hope next graph is easy to understand. It is comparing mean of ordinary and legendary pokemon.","929ab8d9":"#### First thing correlations between feature. We see that Sp. Atk has the most corr. with Total.","a84ee3f4":"### Now some basic scatterplots. Maybe it is not so pretty but it does its job.","2878b386":"### Violinplots are for now my most beloved boxplots.","66d3749c":"#### Now various bar plots of all pokemons","4713bcf1":"#### I am interested how much different it is for generations and if pokemons are legendary or not.\n#### There is a big variance with legendary pokemons.","15da4ed5":"#### Linear regresion with one feature is easy to plot so I will start with it. Sp. Atk = feature , Total = target","2948b712":"#### Now we look on the legenadry","aa0d1bc0":"## Hello there, thank you for looking at my first notebook.\n##### This is my first published notebook ever. Since I am beginner it would be awesome if you could write in the comments what can I change for it to be better. Or maybe some new visualizations that are good and I should implement them. Any feedback would be appreciated.\n\n\n##### I am manly using matplotlib for now. At the end there is also a little bit of seaborn charts.\n#### *Seaborn will be shown in the new versions*","396bdf9c":"### Now some 2d histograms. We clearly see most popular combination of those stats.","cb73430a":"### I also started learning about Regresion , I would like to try predict Total ","272b97bd":"### Jointplots are easy to do but I do not know a way to show them in one row.","2b25ab7e":"#### At the end I wanted to see how much legendary pokemons are different that normal ones ","d1323b5d":"## Descibe method on data","9dbde48d":"## Reading Dataset using Pandas\npandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.\nFor the source file of pandas you can go on the [`Github link`](https:\/\/github.com\/pandas-dev\/pandas)"}}