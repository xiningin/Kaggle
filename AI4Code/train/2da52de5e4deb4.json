{"cell_type":{"811a66b4":"code","0b169362":"code","c79b7d0c":"code","d653b3f6":"code","0bba116f":"code","b868f706":"code","79caea2d":"code","9622dd27":"code","d12c4ec8":"code","cd57bde2":"code","7fb04960":"code","33a929df":"code","2bd15d9d":"code","1cf8f249":"code","86ea6268":"code","44834d0a":"code","3130f048":"code","239c1ebf":"markdown","d97a08bf":"markdown","8049d6f4":"markdown","3fab6652":"markdown","fdd8d22a":"markdown","0c0a6edc":"markdown","9b18097f":"markdown","2f710644":"markdown","3f9b4aab":"markdown","3afe343b":"markdown"},"source":{"811a66b4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input\/feedback-prize-2021\/train'):\n#     for filename in filenames[0:10]:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b169362":"!ls \/kaggle\/input\/feedback-prize-2021","c79b7d0c":"train = pd.read_csv('\/kaggle\/input\/feedback-prize-2021\/train.csv')\ntrain[['discourse_id', 'discourse_start', 'discourse_end']] = train[['discourse_id', 'discourse_start', 'discourse_end']].astype(int)","d653b3f6":"classed_span_format = '<span class=\"{}\">{}<\/span>'\npre_line_p_format = '<p style=\"white-space: pre-line\">{}<\/p>'\n\nimport html\n# parts:[start,end,part_type]\ndef add_fonts(text, parts):\n\tfull_parts = []\n\tif parts is None or len(parts) == 0:\n\t\tfull_parts = [[0, len(text), None]]\n\telse:\n\t\tparts.sort()\n\t\tfull_parts.append([0, parts[0][0], None])\n\t\tfor i in range(len(parts)):\n\t\t\tfull_parts.append(parts[i])\n\t\t\tif i+1<len(parts):\n\t\t\t\tfull_parts.append([parts[i][1], parts[i+1][0], None])\n\t\t\telse:\n\t\t\t\tfull_parts.append([parts[i][1], len(text), None])\n\tfull_parts_rendered = []\n\tfor part in full_parts:\n\t\ttext_html = html.escape(text[part[0]:part[1]])\n\t\tif part[2] is None:\n\t\t\tfull_parts_rendered.append(text_html)\n\t\telse:\n\t\t\tfull_parts_rendered.append(classed_span_format.format(part[2].lower().replace(' ','_'), text_html))\n\thtml_p = pre_line_p_format.format(''.join(full_parts_rendered))\n\t# html_p = html_p.replace('\\n\\n', '<\/p><p>')\n\treturn html_p\n\ndef get_parts(query_id):\n\tx = train.query('id == \"' + query_id + '\"')\n\tparts = [list(x.iloc[i][['discourse_start','discourse_end','discourse_type']]) for i in range(len(x))]\n\treturn parts\n\ndef display_text(query_id):\n\twith open(\"\/kaggle\/input\/feedback-prize-2021\/train\/\" + query_id + \".txt\", 'rt') as f:\n\t\tt = f.read()\n\treturn add_fonts(t, get_parts(query_id))","0bba116f":"discourse_types = list(train['discourse_type'].unique())\nprint(discourse_types)","b868f706":"from IPython.core.display import display, HTML","79caea2d":"css_style = \"\"\"    .lead {\n        background-color:#ececea\n    }\n    .position {\n        background-color:yellow;\n        font-weight:bold\n    }\n    .evidence {\n        background-color:powderblue\n    }\n    .claim {\n        background-color:#b5c4b1\n    }\n    .concluding_statement {\n        background-color:#ececea;\n        text-decoration: underline\n    }\n    .counterclaim {\n        background-color:orange\n    }\n    .rebuttal {\n        background-color:tomato\n    }\"\"\"\n\nHTML(\"\"\"\n<style>\n\"\"\" + css_style + \"\"\"\n<\/style>\n\"\"\")","9622dd27":"for dirname, _, filenames in os.walk('\/kaggle\/input\/feedback-prize-2021\/train'):\n    for filename in filenames[1001:1010]:\n        print(os.path.join(dirname, filename))","d12c4ec8":"discourse_types_css = [classed_span_format.format(t.lower().replace(' ', '_'), t) for t in discourse_types]\ncss_display_html = pre_line_p_format.format('\\n'.join(discourse_types_css))\ndisplay(HTML(css_display_html))\n","cd57bde2":"query_id= 'AFDB9B105CD1'\nget_parts(query_id)","7fb04960":"y = display_text(query_id)\ndisplay(HTML(y))\n# print(y)","33a929df":"!mkdir \/kaggle\/working\/html_display","2bd15d9d":"with open('\/kaggle\/working\/html_display\/discourse_type_style.css', 'wt') as f:\n    f.write(css_style)","1cf8f249":"!mkdir \/kaggle\/working\/html_display\/htmls","86ea6268":"html_format = \"\"\"<!DOCTYPE html>\n<html>\n<head>\n\t<title><\/title>\n\t<link rel=\"stylesheet\" type=\"text\/css\" href=\"..\/discourse_type_style.css\">\n<\/head>\n<body>\nHTML_BODY\n<\/body>\n<\/html>\"\"\"","44834d0a":"for dirname, _, filenames in os.walk('\/kaggle\/input\/feedback-prize-2021\/train'):\n    for filename in filenames:\n#         print(os.path.join(dirname, filename))\n        query_id = os.path.splitext(filename)[0]\n        y = display_text(query_id)\n        if y:\n            with open(\"\/kaggle\/working\/html_display\/htmls\/\" + query_id + \".html\", \"wt\") as f:\n                f.write(html_format.replace(\"HTML_BODY\", y))\n#             display(HTML(y))","3130f048":"!zip -r \/kaggle\/working\/html_display.zip \/kaggle\/working\/html_display","239c1ebf":"# Output to dir","d97a08bf":"# the function for building html","8049d6f4":"# css style for every discourse type\nyou may choose your own style","3fab6652":"choose an essay id from the upper browsing result","fdd8d22a":"save css file","0c0a6edc":"random browse slice of filenames","9b18097f":"import html package in jupyter","2f710644":"# Display the discourse_type in the queried essay","3f9b4aab":"save html files","3afe343b":"seven discourse type"}}