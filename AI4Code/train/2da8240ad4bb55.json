{"cell_type":{"3ff6e754":"code","f97aff3a":"code","821421cc":"code","e55ec1b7":"code","f5948016":"code","97bf20d4":"code","6c10323e":"code","05f287bb":"code","08f410fe":"code","0be5e247":"code","6fa3cafa":"code","d0b1b01e":"code","1d15e532":"code","d077b58e":"code","aa1f545d":"code","05f1af3c":"code","4d3e899a":"code","78a83f1e":"code","b28b96e8":"code","40e2cfd6":"code","aa9527d5":"code","ddd1658f":"code","f3b0772c":"code","019adee6":"code","1e89b0be":"code","d6b34573":"code","e354a6b5":"code","98f29996":"code","e0347e0f":"code","23c508fa":"code","e6ec2636":"code","4257012f":"code","1bd049c7":"code","4554bee5":"code","cc1c52cc":"code","8c4af0cc":"code","1049e599":"code","c6d93cb1":"code","6109747c":"code","e7e8ff53":"code","a2721bc2":"code","036cd567":"code","5f8ee8f3":"code","3b4e72a1":"code","648229a9":"code","6040256e":"code","878b90ff":"code","40b05384":"code","55d2f109":"code","2f10549d":"code","60c11a11":"code","f1606c97":"code","725b2738":"code","9f7566ff":"code","b0093045":"code","4445862c":"code","85a43949":"code","8e441842":"code","e6a4ba24":"code","0188d8a2":"code","6e3dc407":"code","b655b0b7":"code","907d60ad":"code","b79ca067":"code","896b9552":"markdown","66ca2aa7":"markdown","857ab6d6":"markdown","8d573d45":"markdown","abeff1ea":"markdown","625ae422":"markdown","a24ab74d":"markdown","a2dab89d":"markdown","77a5d186":"markdown","e8dd0df6":"markdown","5981d521":"markdown","b1c6b55d":"markdown","a3d9eed9":"markdown"},"source":{"3ff6e754":"!pip install ..\/input\/external-libraries-shopee-product-matching\/Keras_Applications-1.0.8-py3-none-any.whl\n!pip install ..\/input\/external-libraries-shopee-product-matching\/efficientnet-1.1.1-py3-none-any.whl\n\n# !pip install ..\/input\/d\/mhilmiasyrofi\/external-libraries-shopee-product-matching\/Keras_Applications-1.0.8-py3-none-any.whl\n# !pip install ..\/input\/d\/mhilmiasyrofi\/external-libraries-shopee-product-matching\/efficientnet-1.1.1-py3-none-any.whl","f97aff3a":"import sys\n!cp ..\/input\/rapids\/rapids.0.19.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\/site-packages\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","821421cc":"import os\nimport random\nimport math\nimport numpy as np\nimport pandas as pd\nimport gc\nimport matplotlib.pyplot as plt\nimport cudf\nimport cuml\nimport cupy\nfrom cuml.feature_extraction.text import TfidfVectorizer\nfrom cuml import PCA\nfrom cuml.neighbors import NearestNeighbors\nimport tensorflow as tf\nimport efficientnet.tfkeras as efn\nfrom tqdm.notebook import tqdm\nfrom shutil import copyfile\nimport tensorflow_hub as hub\nimport sklearn\nimport torch\nfrom shutil import copyfile\n\nfrom tqdm.autonotebook import tqdm\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nfrom sklearn.preprocessing import LabelEncoder\n\nimport transformers","e55ec1b7":"# For tf.dataset\nAUTO = tf.data.experimental.AUTOTUNE\n\n# Configuration\nBATCH_SIZE = 8\nIMAGE_SIZE = [512, 512]\n# Seed\nSEED = 42\n# Verbosity\nVERBOSE = 1\n# Number of classes\nN_CLASSES = 11014\n\n# Flag to get cv score\nGET_CV = True\n# Flag to check ram allocations (debug)\nCHECK_SUB = False\n\nRECOMPUTE_IMAGE_EMBEDDING = False\nRECOMPUTE_NFNET_EMBEDDING = False\nRECOMPUTE_TEXT_EMBEDDING = False\nRECOMPUTE_TFIDF_EMBEDDING = False\nRECOMPUTE_INDOBERT_EMBEDDING = False\n\n\nKAGGLE_ENV = True\n\nINPUT_DIR = \"..\/input\/\"\nWORK_DIR = \"..\/working\/\"","f5948016":"copyfile(src = INPUT_DIR + 'external-modules-shopee-product-matching\/utils.py', dst = WORK_DIR + 'utils.py')\n\nfrom utils import clean_text","97bf20d4":"copyfile(src = INPUT_DIR + 'external-modules-shopee-product-matching\/tokenization.py', dst = WORK_DIR + 'tokenization.py')\n\nimport tokenization","6c10323e":"# RESTRICT TENSORFLOW TO 2GB OF GPU RAM\n# SO THAT WE HAVE 14GB RAM FOR RAPIDS\nLIMIT = 2.0\ngpus = tf.config.experimental.list_physical_devices('GPU')\nif gpus:\n    try:\n        tf.config.experimental.set_virtual_device_configuration(\n            gpus[0],\n            [tf.config.experimental.VirtualDeviceConfiguration(memory_limit=1024*LIMIT)])\n        logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n        #print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n    except RuntimeError as e:\n        print(e)\nprint('We will restrict TensorFlow to max %iGB GPU RAM'%LIMIT)\nprint('then RAPIDS can use %iGB GPU RAM'%(16-LIMIT))","05f287bb":"df = pd.read_csv(INPUT_DIR + 'shopee-product-matching\/test.csv')\n# If we are comitting, replace train set for test set and dont get cv\nif len(df) > 3:\n    GET_CV = False\n    RECOMPUTE_IMAGE_EMBEDDING = True\n    RECOMPUTE_TEXT_EMBEDDING = True\ndel df\n\n# Function to get our f1 score\ndef f1_score(y_true, y_pred):\n    y_true = y_true.apply(lambda x: set(x.split()))\n    y_pred = y_pred.apply(lambda x: set(x.split()))\n    intersection = np.array([len(x[0] & x[1]) for x in zip(y_true, y_pred)])\n    len_y_pred = y_pred.apply(lambda x: len(x)).values\n    len_y_true = y_true.apply(lambda x: len(x)).values\n    f1 = 2 * intersection \/ (len_y_pred + len_y_true)\n    return f1\n\n# Function to combine predictions\ndef combine_predictions(row1, row2):\n    x = np.concatenate([row1, row2])\n    return np.unique(x)\n\n# Function to combine predictions\ndef aggregate_predictions(preds1, preds2): \n    \n    memory = {}\n    connections = {}\n    \n    def add_to_memory(idx, value):\n        if value != \"\":\n            if value in memory:\n                memory[value].add(idx)\n                return\n            memory[value] = {idx}\n            \n    combineds = []\n\n    for i, pred in enumerate(preds1) :\n        combineds.append(set())\n        for v in pred :\n            add_to_memory(i, v)\n            combineds[i].add(v)\n\n    for i, pred in enumerate(preds2) :\n        for v in pred :\n            add_to_memory(i, v)\n            combineds[i].add(v)\n    \n    for ids in memory.values():\n        current_connection = set(ids)\n\n        for uid in ids:\n            if uid in connections:\n                current_connection.update(connections[uid])\n\n        for uid in current_connection:\n            connections[uid] = current_connection\n            \n    del memory\n    \n    connections = sorted(connections.items())\n    res = []\n    for i in range(len(combineds)):\n        combined = set()\n        for idx in connections[i][1] :\n            combined.update(combineds[idx])\n        res.append(list(combined))\n\n    del connections\n    \n    gc.collect()\n    \n    return res\n\ndef reformat_labels(arr): \n    \"\"\"\n    Convert arrray of strings into concatenated strings separated with space\n    \"\"\"\n    return ' '.join(np.unique(arr))","08f410fe":"# Function to read out dataset\ndef read_dataset():\n    data_type = \"test\"\n    if GET_CV :\n        data_type = \"train\"\n        \n    df = pd.read_csv(INPUT_DIR + 'shopee-product-matching\/' + data_type + '.csv')\n    \n    df[\"title\"] = df[\"title\"].apply(clean_text)\n    \n    if GET_CV :\n        tmp = df.groupby(['label_group'])['posting_id'].unique().to_dict()\n        df['matches'] = df['label_group'].map(tmp)\n        df['matches'] = df['matches'].apply(lambda x: ' '.join(x))\n        if CHECK_SUB:\n            df = pd.concat([df, df], axis = 0)\n            df.reset_index(drop = True, inplace = True)\n    \n    df_cu = cudf.DataFrame(df)\n    image_paths = INPUT_DIR + 'shopee-product-matching\/' + data_type + '_images\/' + df['image']\n        \n    return df, df_cu, image_paths","0be5e247":"# Function to decode our images\ndef decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels = 3)\n    image = tf.image.resize(image, IMAGE_SIZE)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    return image\n\n# Function to read our test image and return image\ndef read_image(image):\n    image = tf.io.read_file(image)\n    image = decode_image(image)\n    return image\n\n# Function to get our dataset that read images\ndef get_dataset(image):\n    dataset = tf.data.Dataset.from_tensor_slices(image)\n    dataset = dataset.map(read_image, num_parallel_calls = AUTO)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\n# Arcmarginproduct class keras layer\nclass ArcMarginProduct(tf.keras.layers.Layer):\n    '''\n    Implements large margin arc distance.\n\n    Reference:\n        https:\/\/arxiv.org\/pdf\/1801.07698.pdf\n        https:\/\/github.com\/lyakaap\/Landmark2019-1st-and-3rd-Place-Solution\/\n            blob\/master\/src\/modeling\/metric_learning.py\n    '''\n    def __init__(self, n_classes, s=30, m=0.50, easy_margin=False,\n                 ls_eps=0.0, **kwargs):\n\n        super(ArcMarginProduct, self).__init__(**kwargs)\n\n        self.n_classes = n_classes\n        self.s = s\n        self.m = m\n        self.ls_eps = ls_eps\n        self.easy_margin = easy_margin\n        self.cos_m = tf.math.cos(m)\n        self.sin_m = tf.math.sin(m)\n        self.th = tf.math.cos(math.pi - m)\n        self.mm = tf.math.sin(math.pi - m) * m\n\n    def get_config(self):\n\n        config = super().get_config().copy()\n        config.update({\n            'n_classes': self.n_classes,\n            's': self.s,\n            'm': self.m,\n            'ls_eps': self.ls_eps,\n            'easy_margin': self.easy_margin,\n        })\n        return config\n\n    def build(self, input_shape):\n        super(ArcMarginProduct, self).build(input_shape[0])\n\n        self.W = self.add_weight(\n            name='W',\n            shape=(int(input_shape[0][-1]), self.n_classes),\n            initializer='glorot_uniform',\n            dtype='float32',\n            trainable=True,\n            regularizer=None)\n\n    def call(self, inputs):\n        X, y = inputs\n        y = tf.cast(y, dtype=tf.int32)\n        cosine = tf.matmul(\n            tf.math.l2_normalize(X, axis=1),\n            tf.math.l2_normalize(self.W, axis=0)\n        )\n        sine = tf.math.sqrt(1.0 - tf.math.pow(cosine, 2))\n        phi = cosine * self.cos_m - sine * self.sin_m\n        if self.easy_margin:\n            phi = tf.where(cosine > 0, phi, cosine)\n        else:\n            phi = tf.where(cosine > self.th, phi, cosine - self.mm)\n        one_hot = tf.cast(\n            tf.one_hot(y, depth=self.n_classes),\n            dtype=cosine.dtype\n        )\n        if self.ls_eps > 0:\n            one_hot = (1 - self.ls_eps) * one_hot + self.ls_eps \/ self.n_classes\n\n        output = (one_hot * phi) + ((1.0 - one_hot) * cosine)\n        output *= self.s\n        return output","6fa3cafa":"def call_function_by_model_name(model_name): \n    return {\n        \"EfficientNetB3\": efn.EfficientNetB3,\n        \"EfficientNetB4\": efn.EfficientNetB4,\n        \"EfficientNetB5\": efn.EfficientNetB5,\n        \"EfficientNetB6\": efn.EfficientNetB6,\n        \"EfficientNetB7\": efn.EfficientNetB7\n    }[model_name]\n\n# Function to get the embeddings of our images with the fine-tuned model\ndef get_image_embeddings(image_paths, model_name=\"EfficientNetB3\"):\n    embeds = []\n    \n    margin = ArcMarginProduct(\n            n_classes = N_CLASSES, \n            s = 30, \n            m = 0.7, \n            name='head\/arc_margin', \n            dtype='float32'\n            )\n\n    inp = tf.keras.layers.Input(shape = (*IMAGE_SIZE, 3), name = 'inp1')\n    label = tf.keras.layers.Input(shape = (), name = 'inp2')\n    x = call_function_by_model_name(model_name)(weights = None, include_top = False)(inp)\n    x = tf.keras.layers.GlobalAveragePooling2D()(x)\n    x = margin([x, label])\n        \n    output = tf.keras.layers.Softmax(dtype='float32')(x)\n\n    model = tf.keras.models.Model(inputs = [inp, label], outputs = [output])\n    model.load_weights(INPUT_DIR + 'external-models-shopee-product-matching\/' + model_name + '_512_42.h5')\n    model = tf.keras.models.Model(inputs = model.input[0], outputs = model.layers[-4].output)\n    chunk = 5000\n    iterator = np.arange(np.ceil(len(df) \/ chunk))\n    for j in iterator:\n        a = int(j * chunk)\n        b = int((j + 1) * chunk)\n        image_dataset = get_dataset(image_paths[a:b])\n        image_embeddings = model.predict(image_dataset)\n        embeds.append(image_embeddings)\n    del model\n    image_embeddings = np.concatenate(embeds)\n    print(f'Our image embeddings shape is {image_embeddings.shape}')\n    del embeds\n    gc.collect()\n    return image_embeddings","d0b1b01e":"# Return tokens, masks and segments from a text array or series\ndef bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)\n\n# Function to get our text title embeddings using a pre-trained bert model\ndef get_text_embeddings(df, batch_size=32, max_len = 128):\n    embeds = []\n    module_url = INPUT_DIR + 'external-models-shopee-product-matching\/bert_en_uncased_L-24_H-1024_A-16_1'\n    bert_layer = hub.KerasLayer(module_url, trainable = True)\n    vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\n    do_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\n    tokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)\n    text = bert_encode(df['title'].values, tokenizer, max_len = max_len)\n    \n    margin = ArcMarginProduct(\n            n_classes = 11014, \n            s = 30, \n            m = 0.5, \n            name='head\/arc_margin', \n            dtype='float32'\n            )\n    \n    input_word_ids = tf.keras.layers.Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = tf.keras.layers.Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = tf.keras.layers.Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n    label = tf.keras.layers.Input(shape = (), name = 'label')\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    x = margin([clf_output, label])\n    output = tf.keras.layers.Softmax(dtype='float32')(x)\n    model = tf.keras.models.Model(inputs = [input_word_ids, input_mask, segment_ids, label], outputs = [output])\n    \n    model.load_weights(INPUT_DIR + 'external-models-shopee-product-matching\/Bert_42.h5')\n    model = tf.keras.models.Model(inputs = model.input[0:3], outputs = model.layers[-4].output)\n    chunk = 5000\n    iterator = np.arange(np.ceil(len(df) \/ chunk))\n    for j in iterator:\n        a = int(j * chunk)\n        b = int((j + 1) * chunk)\n        text_chunk = ((text[0][a:b], text[1][a:b], text[2][a:b]))\n        text_embeddings = model.predict(text_chunk, batch_size = batch_size)\n        embeds.append(text_embeddings)\n    del model\n    text_embeddings = np.concatenate(embeds)\n    print(f'Our text embeddings shape is {text_embeddings.shape}')\n    del embeds\n    gc.collect()\n    return text_embeddings","1d15e532":"def set_seed(seed=SEED):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True","d077b58e":"df, df_cu, image_paths = read_dataset()","aa1f545d":"tmp = df.groupby('image_phash').posting_id.agg('unique').to_dict()\ndf['phash_predictions'] = df.image_phash.map(tmp)","05f1af3c":"if GET_CV:\n    df['f1'] = f1_score(df['matches'], df['phash_predictions'].apply(lambda x: ' '.join( np.unique(x) )))\n    print('CV score for baseline =', df.f1.mean())","4d3e899a":"set_seed(42)\nimage_model_name = \"EfficientNetB3\"\n\nif GET_CV :\n    image_embedding_path = INPUT_DIR + 'external-embeddings-shopee-product-matching\/image_embeddings_' + image_model_name\n    if RECOMPUTE_IMAGE_EMBEDDING :\n        image_embeddings = get_image_embeddings(image_paths, image_model_name)\n        if KAGGLE_ENV : \n            np.save('image_embeddings', image_embeddings)\n        else :\n            np.save(image_embedding_path, image_embeddings)\n    else :\n        image_embeddings = np.load(image_embedding_path + \".npy\")\nelse :\n    image_embeddings = get_image_embeddings(image_paths, image_model_name)","78a83f1e":"set_seed(42)\n\nif GET_CV :\n    text_embedding_path = INPUT_DIR + 'external-embeddings-shopee-product-matching\/text_embeddings_Bert42'\n    if RECOMPUTE_TEXT_EMBEDDING :\n        text_embeddings = get_text_embeddings(df)\n        if KAGGLE_ENV : \n            np.save('text_embeddings', text_embeddings)\n        else :\n            np.save(text_embedding_path, text_embeddings)\n    else :\n        text_embeddings = np.load(text_embedding_path + '.npy')\nelse :\n    text_embeddings = get_text_embeddings(df)","b28b96e8":"gc.collect()","40e2cfd6":"## Function to get 50 nearest neighbors of each image and apply a distance threshold to maximize cv\ndef get_distances_indices(embeddings, KNN=50, normalize=False, metric='cosine'):\n    if metric:\n        model = NearestNeighbors(n_neighbors = KNN, metric=metric)\n    else :\n        model = NearestNeighbors(n_neighbors = KNN)\n    model.fit(embeddings)\n    distances, indices = model.kneighbors(embeddings)\n    if normalize: distances = sklearn.preprocessing.normalize(distances)\n    del model\n    gc.collect()\n    return distances, indices\n    \ndef get_neighbors_from_distance_indices(df, distances, indices, thresholds, choosen_threshold) :\n    # Iterate through different thresholds to maximize cv, run this in interactive mode, then replace else clause with a solid threshold\n    if GET_CV:\n#         scores = []\n#         for threshold in thresholds:\n#             predictions = []\n#             for k in range(indices.shape[0]):\n#                 idx = np.where(distances[k,] < threshold)[0]\n#                 ids = indices[k,idx]\n#                 posting_ids = ' '.join(df['posting_id'].iloc[ids].values)\n#                 predictions.append(posting_ids)\n#             df['pred_matches'] = predictions\n#             df['f1'] = f1_score(df['matches'], df['pred_matches'])\n#             score = df['f1'].mean()\n#             print(f'Our f1 score for threshold {threshold} is {score}')\n#             scores.append(score)\n#             df = df.drop(columns=['pred_matches','f1'])\n#             del predictions\n#             gc.collect()\n#         thresholds_scores = pd.DataFrame({'thresholds': thresholds, 'scores': scores})\n#         max_score = thresholds_scores[thresholds_scores['scores'] == thresholds_scores['scores'].max()]\n#         best_threshold = max_score['thresholds'].values[0]\n#         best_score = max_score['scores'].values[0]\n#         print(f'Our best score is {best_score} and has a threshold {best_threshold}')\n        \n#         # Use threshold\n        predictions = []\n        for k in range(indices.shape[0]):\n            # Because we are predicting the test set that have 70K images and different label groups, confidence should be smaller\n            idx = np.where(distances[k,] < choosen_threshold)[0]\n            ids = indices[k,idx]\n            posting_ids = df['posting_id'].iloc[ids].values\n            predictions.append(posting_ids)\n            \n        # Modified\n#         predictions = []\n#         for k in range(indices.shape[0]):\n#             dist = distances[k,]\n#             posting_ids = np.array([])\n#             for threshold in np.arange(choosen_threshold, choosen_threshold + 0.03, 0.005):\n#                 if posting_ids.shape[0] <= 1:\n#                     idx = np.where(dist < choosen_threshold)[0]\n#                     ids = indices[k,idx]\n#                     posting_ids = df['posting_id'].iloc[ids].values\n#             predictions.append(posting_ids)\n\n    \n    # Because we are predicting the test set that have 70K images and different label groups, confidence should be smaller\n    else:\n        predictions = []\n        for k in tqdm(range(indices.shape[0])):\n            idx = np.where(distances[k,] < choosen_threshold)[0]\n            ids = indices[k,idx]\n            posting_ids = df['posting_id'].iloc[ids].values\n            predictions.append(posting_ids)\n#         predictions = []\n#         for k in range(indices.shape[0]):\n#             dist = distances[k,]\n#             posting_ids = np.array([])\n#             for threshold in np.arange(choosen_threshold, choosen_threshold + 0.03, 0.005):\n#                 if posting_ids.shape[0] <= 1:\n#                     idx = np.where(dist < choosen_threshold)[0]\n#                     ids = indices[k,idx]\n#                     posting_ids = df['posting_id'].iloc[ids].values\n#             predictions.append(posting_ids)\n        \n    del distances, indices\n    gc.collect()\n    return df, predictions","aa9527d5":"NORMALIZE_IMAGE_DISTANCE = True\nNORMALIZE_TEXT_DISTANCE = True\n\nKNN=100","ddd1658f":"\"\"\"\nGet neighbors for image_embeddings\n\"\"\"\n\n## calculate image distances and get indices\nimage_distances, image_indices = get_distances_indices(image_embeddings, KNN=KNN, normalize=NORMALIZE_IMAGE_DISTANCE, metric='cosine')\n    \nif NORMALIZE_IMAGE_DISTANCE :\n    ## threshold for normalized image distances\n    image_thresholds = list(np.arange(0.03, 0.08, 0.005))\n    choosen_image_threshold=0.035\n\ndf, image_predictions = get_neighbors_from_distance_indices(df, image_distances, image_indices, thresholds=image_thresholds, choosen_threshold=choosen_image_threshold)\n","f3b0772c":"\"\"\"\nGet neighbors for text_embeddings\n\"\"\"\n\n## calculate text distances and get indices\ntext_distances, text_indices = get_distances_indices(text_embeddings, KNN=KNN, normalize=NORMALIZE_TEXT_DISTANCE)\n\nif NORMALIZE_TEXT_DISTANCE :\n    ## threshold for normalized embeddings\n    text_thresholds = list(np.arange(0.03, 0.08, 0.005))\n    choosen_text_threshold = 0.035\n    \ndf, text_predictions  = get_neighbors_from_distance_indices(df, text_distances, text_indices, thresholds=text_thresholds, choosen_threshold=choosen_text_threshold)","019adee6":"import sys\nsys.path.append('..\/input\/timm-pytorch-image-models\/pytorch-image-models-master')\nfrom cuml import PCA\nfrom cuml.neighbors import NearestNeighbors\nimport tensorflow as tf\nimport efficientnet.tfkeras as efn\n\nimport tensorflow_hub as hub\n\nimport os\nimport cv2\nimport random\nfrom tqdm import tqdm\n\nimport albumentations\nfrom albumentations.pytorch.transforms import ToTensorV2\n\nimport torch\nimport timm\nimport torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\nfrom torch.utils.data import Dataset,DataLoader\nimport fasttext as ft","1e89b0be":"import albumentations as A \nfrom albumentations.pytorch.transforms import ToTensorV2","d6b34573":"class CFG:\n    \n    img_size = 512\n    batch_size = 12\n    seed = 2020\n    \n    device = 'cuda'\n    classes = 11014\n    \n    model_name = 'eca_nfnet_l0'\n    model_path = '..\/input\/shopee-pytorch-models\/arcface_512x512_nfnet_l0 (mish).pt'\n    \n    scale = 30 \n    margin = 0.5","e354a6b5":"set_seed(CFG.seed)","98f29996":"def get_test_transforms():\n\n    return A.Compose(\n        [\n            A.Resize(CFG.img_size,CFG.img_size,always_apply=True),\n            A.Normalize(),\n        ToTensorV2(p=1.0)\n        ]\n    )","e0347e0f":"class ShopeeDataset(Dataset):\n    def __init__(self, image_paths, transforms=None):\n\n        self.image_paths = image_paths\n        self.augmentations = transforms\n\n    def __len__(self):\n        return self.image_paths.shape[0]\n\n    def __getitem__(self, index):\n        image_path = self.image_paths[index]\n        \n        image = cv2.imread(image_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        \n        if self.augmentations:\n            augmented = self.augmentations(image=image)\n            image = augmented['image']       \n    \n        return image,torch.tensor(1)","23c508fa":"class ArcMarginProduct_Image(nn.Module):\n    def __init__(self, in_features, out_features, scale=30.0, margin=0.50, easy_margin=False, ls_eps=0.0):\n        super(ArcMarginProduct_Image, self).__init__()\n        self.in_features = in_features\n        self.out_features = out_features\n        self.scale = scale\n        self.margin = margin\n        self.ls_eps = ls_eps  # label smoothing\n        self.weight = nn.Parameter(torch.FloatTensor(out_features, in_features))\n        nn.init.xavier_uniform_(self.weight)\n\n        self.easy_margin = easy_margin\n        self.cos_m = math.cos(margin)\n        self.sin_m = math.sin(margin)\n        self.th = math.cos(math.pi - margin)\n        self.mm = math.sin(math.pi - margin) * margin\n        \n    def forward(self, input, label):\n        # --------------------------- cos(theta) & phi(theta) ---------------------------\n        cosine = F.linear(F.normalize(input), F.normalize(self.weight))\n        sine = torch.sqrt(1.0 - torch.pow(cosine, 2))\n        phi = cosine * self.cos_m - sine * self.sin_m\n        if self.easy_margin:\n            phi = torch.where(cosine > 0, phi, cosine)\n        else:\n            phi = torch.where(cosine > self.th, phi, cosine - self.mm)\n        # --------------------------- convert label to one-hot ---------------------------\n        # one_hot = torch.zeros(cosine.size(), requires_grad=True, device='cuda')\n        one_hot = torch.zeros(cosine.size(), device='cuda')\n        one_hot.scatter_(1, label.view(-1, 1).long(), 1)\n        if self.ls_eps > 0:\n            one_hot = (1 - self.ls_eps) * one_hot + self.ls_eps \/ self.out_features\n        # -------------torch.where(out_i = {x_i if condition_i else y_i) -------------\n        output = (one_hot * phi) + ((1.0 - one_hot) * cosine)\n        output *= self.scale\n        \n        return output","e6ec2636":"class ShopeeModel(nn.Module):\n\n    def __init__(\n        self,\n        n_classes = CFG.classes,\n        model_name = CFG.model_name,\n        fc_dim = 512,\n        margin = CFG.margin,\n        scale = CFG.scale,\n        use_fc = True,\n        pretrained = False):\n\n\n        super(ShopeeModel,self).__init__()\n        print('Building Model Backbone for {} model'.format(model_name))\n        \n        self.backbone = timm.create_model(model_name, pretrained=pretrained)\n\n        if model_name == 'resnext50_32x4d':\n            final_in_features = self.backbone.fc.in_features\n            self.backbone.fc = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n\n        elif model_name == 'efficientnet_b3':\n            final_in_features = self.backbone.classifier.in_features\n            self.backbone.classifier = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n\n        elif model_name == 'tf_efficientnet_b5_ns':\n            final_in_features = self.backbone.classifier.in_features\n            self.backbone.classifier = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n            \n        elif model_name == 'eca_nfnet_l0':\n            final_in_features = self.backbone.head.fc.in_features\n            self.backbone.head.fc = nn.Identity()\n            self.backbone.head.global_pool = nn.Identity()\n\n        self.pooling =  nn.AdaptiveAvgPool2d(1)\n\n        self.use_fc = use_fc\n\n        self.dropout = nn.Dropout(p=0.0)\n        self.fc = nn.Linear(final_in_features, fc_dim)\n        self.bn = nn.BatchNorm1d(fc_dim)\n        self._init_params()\n        final_in_features = fc_dim\n\n        self.final = ArcMarginProduct_Image(\n            final_in_features,\n            n_classes,\n            scale = scale,\n            margin = margin,\n            easy_margin = False,\n            ls_eps = 0.0\n        )\n\n    def _init_params(self):\n        nn.init.xavier_normal_(self.fc.weight)\n        nn.init.constant_(self.fc.bias, 0)\n        nn.init.constant_(self.bn.weight, 1)\n        nn.init.constant_(self.bn.bias, 0)\n        \n    def forward(self, image, label):\n        feature = self.extract_feat(image)\n        #logits = self.final(feature,label)\n        return feature\n\n    def extract_feat(self, x):\n        batch_size = x.shape[0]\n        x = self.backbone(x)\n        x = self.pooling(x).view(batch_size, -1)\n\n        if self.use_fc:\n            x = self.dropout(x)\n            x = self.fc(x)\n            x = self.bn(x)\n        return x","4257012f":"class Mish_func(torch.autograd.Function):\n    \n    \"\"\"from: https:\/\/github.com\/tyunist\/memory_efficient_mish_swish\/blob\/master\/mish.py\"\"\"\n    \n    @staticmethod\n    def forward(ctx, i):\n        result = i * torch.tanh(F.softplus(i))\n        ctx.save_for_backward(i)\n        return result\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        i = ctx.saved_variables[0]\n  \n        v = 1. + i.exp()\n        h = v.log() \n        grad_gh = 1.\/h.cosh().pow_(2)\n        \n        # Note that grad_hv * grad_vx = sigmoid(x)\n        #grad_hv = 1.\/v  \n        #grad_vx = i.exp()\n        \n        grad_hx = i.sigmoid()\n\n        grad_gx = grad_gh *  grad_hx #grad_hv * grad_vx \n        \n        grad_f =  torch.tanh(F.softplus(i)) + i * grad_gx \n        \n        return grad_output * grad_f \n    \nclass Mish(nn.Module):\n    def __init__(self, **kwargs):\n        super().__init__()\n        pass\n    def forward(self, input_tensor):\n        return Mish_func.apply(input_tensor)\n    \n    \ndef replace_activations(model, existing_layer, new_layer):\n    \n    \"\"\"A function for replacing existing activation layers\"\"\"\n    \n    for name, module in reversed(model._modules.items()):\n        if len(list(module.children())) > 0:\n            model._modules[name] = replace_activations(module, existing_layer, new_layer)\n\n        if type(module) == existing_layer:\n            layer_old = module\n            layer_new = new_layer\n            model._modules[name] = layer_new\n    return model","1bd049c7":"def get_image_embeddings1(image_paths, model_name = CFG.model_name):\n    embeds = []\n    \n    model = ShopeeModel(model_name = model_name)\n    model.eval()\n    \n    if model_name == 'eca_nfnet_l0':\n        model = replace_activations(model, torch.nn.SiLU, Mish())\n\n    model.load_state_dict(torch.load(CFG.model_path))\n    model = model.to(CFG.device)\n    \n\n    image_dataset = ShopeeDataset(image_paths=image_paths,transforms=get_test_transforms())\n    image_loader = torch.utils.data.DataLoader(\n        image_dataset,\n        batch_size=CFG.batch_size,\n        pin_memory=True,\n        drop_last=False,\n        num_workers=4\n    )\n    \n    with torch.no_grad():\n        for img,label in tqdm(image_loader): \n            img = img.cuda()\n            label = label.cuda()\n            feat = model(img,label)\n            image_embeddings = feat.detach().cpu().numpy()\n            embeds.append(image_embeddings)\n    \n    \n    del model\n    \n    image_embeddings = np.concatenate(embeds)\n    print(f'Our image embeddings shape is {image_embeddings.shape}')\n    del embeds\n    gc.collect()\n    return image_embeddings","4554bee5":"def get_image_predictions(df, embeddings,threshold = 0.0):\n    \n    if len(df) > 3:\n        KNN = 100\n    else : \n        KNN = 3\n    \n    model = NearestNeighbors(n_neighbors = KNN, metric = 'cosine')\n    model.fit(embeddings)\n    distances, indices = model.kneighbors(embeddings)\n    \n    predictions = []\n    for k in tqdm(range(embeddings.shape[0])):\n        idx = np.where(distances[k,] < threshold)[0]\n        ids = indices[k,idx]\n        posting_ids = df['posting_id'].iloc[ids].values\n        predictions.append(posting_ids)\n        \n    del model, distances, indices\n    gc.collect()\n    return predictions","cc1c52cc":"df_image,df_image_cu,image_paths = read_dataset()\ndf_image.head()","8c4af0cc":"if GET_CV :\n    nfnet_embedding_path = INPUT_DIR + 'external-embeddings-shopee-product-matching\/image_embeddings_nfnet'\n    if RECOMPUTE_NFNET_EMBEDDING :\n        nfnet_embeddings = get_image_embeddings1(image_paths.values)\n        if KAGGLE_ENV : \n            np.save('image_embeddings_nfnet', nfnet_embeddings)\n        else :\n            np.save(nfnet_embedding_path, nfnet_embeddings)\n    else :\n        nfnet_embeddings = np.load(nfnet_embedding_path + '.npy')\nelse :\n    nfnet_embeddings = get_image_embeddings1(image_paths.values)","1049e599":"## calculate image distances and get indices\n# nfnet_distances, nfnet_indices = get_distances_indices(nfnet_embeddings, KNN=KNN, normalize=False, metric='cosine')\nnfnet_distances, nfnet_indices = get_distances_indices(nfnet_embeddings, KNN=KNN, normalize=True, metric='cosine')\n\n## threshold for normalized image distances\nnfnet_thresholds = list(np.arange(0.03, 0.05, 0.005))\nchoosen_nfnet_threshold = 0.045\n\ndf, nfnet_predictions = get_neighbors_from_distance_indices(df, nfnet_distances, nfnet_indices, thresholds=nfnet_thresholds, choosen_threshold=choosen_nfnet_threshold)","c6d93cb1":"import cuml\nfrom cuml.feature_extraction.text import TfidfVectorizer\n\ndef get_tfidf_embeddings(df_cu):\n    model = TfidfVectorizer(stop_words=None, binary=True, use_idf=True, max_features=25000)\n#     model = TfidfVectorizer(stop_words=None, binary=True, ngram_range=(1,2), use_idf=True, max_features=25000)\n    tfidf_embeddings = model.fit_transform(df_cu.title).toarray()\n    print('text embeddings shape',tfidf_embeddings.shape)\n    del model\n    gc.collect()\n    return tfidf_embeddings\n\ntfidf_embeddings = get_tfidf_embeddings(df_cu)","6109747c":"CHECK_SUB = True\nif GET_CV and not CHECK_SUB:\n    tfidf_preds_path = INPUT_DIR + 'external-embeddings-shopee-product-matching\/tfidf_preds.npy'\n    tfidf_preds = np.load(tfidf_preds_path, allow_pickle=True)\nelse :\n    tfidf_preds = []\n    tfidf_low_preds = []\n    CHUNK = 1024*4\n\n    print('Finding similar titles...')\n    CTS = len(df_cu)\/\/CHUNK\n    if len(df_cu)%CHUNK!=0: CTS += 1\n    for j in range( CTS ):\n\n        a = j*CHUNK\n        b = (j+1)*CHUNK\n        b = min(b,len(df_cu))\n        print('chunk',a,'to',b)\n\n        # COSINE SIMILARITY DISTANCE\n        cts = cupy.matmul(tfidf_embeddings, tfidf_embeddings[a:b].T).T\n\n        for k in range(b-a):\n            llll = cts[k,]\n            o = np.array([])\n            for ii in np.arange(0.775,0.50, -0.02):\n                if ii>0.5 and o.shape[0] <= 1:\n                    IDX = cupy.where(llll>ii)[0]\n                    o = df.iloc[cupy.asnumpy(IDX)].posting_id.values\n            tfidf_preds.append(o)\n            \n        for k in range(b-a):\n            IDX = cupy.where(cts[k,]>0.1)[0]\n            o = df_cu.iloc[cupy.asnumpy(IDX)].posting_id.to_pandas().values\n            tfidf_low_preds.append(cupy.asnumpy(o))\n\n    del tfidf_embeddings\n\n    gc.collect()","e7e8ff53":"df_cu['oof_text'] = tfidf_preds","a2721bc2":"USE_PHASH_PREDICTION = False\n\nAGGREGATE_IMAGE_PREDICTION = False\nAGGREGATE_TEXT_PREDICTION = False\n\ndf['phash_predictions'] = df['phash_predictions']\ndf['image_predictions'] = image_predictions\ndf['text_predictions'] = text_predictions\n# df['tfidf_predictions'] = df_cu['oof_text'].to_pandas().values\ndf['tfidf_predictions'] = tfidf_preds\ndf['nfnet_predictions'] = nfnet_predictions","036cd567":"submission_column = \"matches\"\nif GET_CV:\n    submission_column = \"pred_matches\"\n    \ndf[submission_column] = df['tfidf_predictions']\n\n# df[submission_column] = df.apply(lambda x: combine_predictions(x[submission_column],x['text_predictions']), axis=1)\n\ndf[submission_column] = df[submission_column].apply(reformat_labels)\n\nif GET_CV: \n    df['f1'] = f1_score(df['matches'], df['pred_matches'])\n    score = df['f1'].mean()\n    print(f'Our final f1 cv score is {score}')\n","5f8ee8f3":"submission_column = \"matches\"\nif GET_CV:\n    submission_column = \"pred_matches\"\n\nif USE_PHASH_PREDICTION :\n    df[submission_column] = aggregate_predictions(df['phash_predictions'], df['phash_predictions'])\nelse :\n    df[submission_column] = df['image_predictions']\n    \nif AGGREGATE_IMAGE_PREDICTION :\n    df[submission_column] = aggregate_predictions(df[submission_column], df['image_predictions'])\nelse :\n    df[submission_column] = df.apply(lambda x: combine_predictions(x[submission_column],x['image_predictions']), axis=1)\n\nif AGGREGATE_TEXT_PREDICTION :\n    df[submission_column] = aggregate_predictions(df[submission_column], df['text_predictions'])\nelse :\n    df[submission_column] = df.apply(lambda x: combine_predictions(x[submission_column],x['text_predictions']), axis=1)\n\n\ndf[submission_column] = df.apply(lambda x: combine_predictions(x[submission_column],x['tfidf_predictions']), axis=1)\ndf[submission_column] = df.apply(lambda x: combine_predictions(x[submission_column],x['nfnet_predictions']), axis=1)\n\ndf[submission_column] = df[submission_column].apply(reformat_labels)\n\nif GET_CV: \n    df['f1'] = f1_score(df['matches'], df['pred_matches'])\n    score = df['f1'].mean()\n    print(f'Our final f1 cv score is {score}')\n\n# df[['posting_id', 'matches']].to_csv('submission.csv', index = False)","3b4e72a1":"# df[df[\"f1\"] < 1][[\"matches\", \"phash_predictions\", \"image_predictions\", \"text_predictions\", \"pred_matches\", \"f1\"]]","648229a9":"def len_token(tokens) :\n    return len(tokens.split(\" \"))\n\ndef f1_analysis(df) :\n    d = df[df[\"f1\"] < 1]\n    d[\"len_pred\"] = d[\"pred_matches\"].apply(len_token)\n    d[\"len_label\"] = d[\"matches\"].apply(len_token)\n    \n    equal = d[\"len_pred\"] == d[\"len_label\"]\n\n    ## number the len prediction that is less than the len label\n    ## example pred=\"train_1\" ; label=\"train_1 train_2\"\n    less_than = d[\"len_pred\"] < d[\"len_label\"]\n\n    ## number the len prediction that is greater than the len label\n    ## example pred=\"train_1 train_2 train_3\" ; label=\"train_1 train_2\"\n    greater_than = d[\"len_pred\"] > d[\"len_label\"]\n    \n    print(f\"Error which length pred equal to length match: {sum(equal)}\")\n    print(f\"Error which length pred less than length match: {sum(less_than)}\")\n    print(f\"Error which length pred greater than length match: {sum(greater_than)}\")\n    \n    del d, equal\n    gc.collect()\n    \n    return less_than, greater_than","6040256e":"less_than, greater_than = f1_analysis(df)","878b90ff":"# df[[\"label_group\", \"matches\", \"pred_matches\", \"f1\"]][less_than].sort_values(by=[\"f1\"])","40b05384":"# df[[\"label_group\", \"matches\", \"pred_matches\", \"f1\"]][greater_than].sort_values(by=[\"f1\"])","55d2f109":"image_distances, image_indices = get_distances_indices(image_embeddings, KNN=KNN, normalize=NORMALIZE_IMAGE_DISTANCE)\ntext_distances, text_indices = get_distances_indices(text_embeddings, KNN=KNN, normalize=NORMALIZE_TEXT_DISTANCE)\nnfnet_distances, nfnet_indices = get_distances_indices(nfnet_embeddings, KNN=KNN, normalize=NORMALIZE_IMAGE_DISTANCE)","2f10549d":"# GROUP = 2008989859\n# # N = 24839\n# N = df.groupby(\"label_group\").get_group(GROUP).index.values[0]\n# df.groupby(\"label_group\").get_group(GROUP)[[ \"f1\", \"matches\", \"pred_matches\", \"image_predictions\", \"text_predictions\", \"title\"]]","60c11a11":"# print(f\"Image Threshold: {choosen_image_threshold}\")\n# print(f\"Text Threshold: {choosen_text_threshold}\")","f1606c97":"def print_pair(pair, threshold): \n    print()\n    print(\"Predicted Less Than Threshold\")\n    print([(a, b) for (a, b) in pair if b < threshold])\n    print()\n    print(\"Predicted Greater Than Threshold\")\n    print([(a, b) for (a, b) in pair if b > threshold])\n\n# ## True label\n# print(\"True Label\")\n# print(df.groupby(\"label_group\").get_group(GROUP).index.values)\n\n# ## Label predicted from images      \n# for indexs, distances in zip(image_indices[N:N+1], image_distances[N:N+1]) :\n#     pair = sorted(zip(indexs, distances), key = lambda x: x[1])\n#     print_pair(pair, choosen_image_threshold)","725b2738":"# ## True label\n# print(\"True Label\")\n# print(df.groupby(\"label_group\").get_group(GROUP).index.values)\n\n\n# ## Label predicted from texts\n# for i, d in zip(text_indices[N:N+1], text_distances[N:N+1]) :\n#     pair = sorted(zip(i, d), key = lambda x: x[1])\n#     print_pair(pair, choosen_text_threshold)","9f7566ff":"def list_intersection(a, b) :\n    return list(set(a) & set(b))\n\ndef get_neighbors_from_combined_image_text_distance_indices(df, image_distances, image_indices, choosen_image_threshold, image_multipliers, choosen_image_multiplier, text_distances, text_indices, choosen_text_threshold, text_multipliers, choosen_text_multiplier, PARAMETER_SEARCH) :\n    ## Iterate through different thresholds to maximize cv, run this in interactive mode, then replace else clause with a solid threshold\n    if GET_CV and PARAMETER_SEARCH:\n        scores = []\n        keys = []\n        for im in image_multipliers:\n            for tm in text_multipliers:\n                predictions = []\n                for k in range(image_indices.shape[0]):        \n                    image_idx = np.where(image_distances[k,] < (choosen_image_threshold * im))[0]\n                    image_ids = image_indices[k,image_idx]\n                    text_idx = np.where(text_distances[k,] < (choosen_text_threshold * tm))[0]\n                    text_ids = text_indices[k,text_idx]\n                    ids = list_intersection(image_ids, text_ids)\n                    posting_ids = df['posting_id'].iloc[ids].values\n                    predictions.append(posting_ids)\n                df['pred_matches'] = predictions\n                df['pred_matches'] = df['pred_matches'].apply(reformat_labels)\n                df['f1'] = f1_score(df['matches'], df['pred_matches'])\n                score = df['f1'].mean()\n                print(\"Our f1 score for im-{:.2f} and tm-{:.2f} is {:.3f}\".format(im, tm, score))\n                scores.append(score)\n                keys.append(f'{im}-{tm}')\n                df = df.drop(columns=['pred_matches','f1'])\n                del predictions\n                gc.collect()\n                \n        keys_scores = pd.DataFrame({'keys': keys, 'scores': scores})\n        max_score = keys_scores[keys_scores['scores'] == keys_scores['scores'].max()]\n        best_key = max_score['keys'].values[0]\n        best_score = max_score['scores'].values[0]\n        print(f'Our best score is {best_score} and has a threshold {best_key}')\n        \n    # Because we are predicting the test set that have 70K images and different label groups, confidence should be smaller\n    predictions = []\n    for k in range(image_indices.shape[0]):        \n        image_idx = np.where(image_distances[k,] < choosen_image_threshold * choosen_image_multiplier)[0]\n        image_ids = image_indices[k,image_idx]\n        text_idx = np.where(text_distances[k,] < choosen_text_threshold * choosen_text_multiplier)[0]\n        text_ids = text_indices[k,text_idx]\n        ids = list_intersection(image_ids, text_ids)\n        posting_ids = df['posting_id'].iloc[ids].values\n        predictions.append(posting_ids)\n\n\n    del image_distances, image_indices, text_distances, text_indices\n    gc.collect()\n    return df, predictions","b0093045":"image_distances, image_indices = get_distances_indices(image_embeddings, KNN=KNN, normalize=NORMALIZE_IMAGE_DISTANCE)\ntext_distances, text_indices = get_distances_indices(text_embeddings, KNN=KNN, normalize=NORMALIZE_TEXT_DISTANCE)\nnfnet_distances, nfnet_indices = get_distances_indices(nfnet_embeddings, KNN=KNN, normalize=NORMALIZE_IMAGE_DISTANCE)","4445862c":"PARAMETER_SEARCH = False\n\nimage_multipliers = list(np.arange(1.3, 1.7, 0.1))\nchoosen_image_multiplier = 1.5\n\ntext_multipliers = list(np.arange(1.3, 1.7, 0.1))\nchoosen_text_multiplier = 1.5\n\nnfnet_multipliers = list(np.arange(1.3, 1.7, 0.1))\nchoosen_nfnet_multiplier = 1.5","85a43949":"df, image_text_predictions = get_neighbors_from_combined_image_text_distance_indices(df, image_distances, image_indices, choosen_image_threshold, image_multipliers, choosen_image_multiplier, text_distances, text_indices, choosen_text_threshold, text_multipliers, choosen_text_multiplier, PARAMETER_SEARCH)","8e441842":"df, nfnet_text_predictions = get_neighbors_from_combined_image_text_distance_indices(df, nfnet_distances, nfnet_indices, choosen_nfnet_threshold, nfnet_multipliers, choosen_nfnet_multiplier, text_distances, text_indices, choosen_text_threshold, text_multipliers, choosen_text_multiplier, PARAMETER_SEARCH)","e6a4ba24":"df, image_nfnet_predictions = get_neighbors_from_combined_image_text_distance_indices(df, image_distances, image_indices, choosen_image_threshold, image_multipliers, choosen_image_multiplier, nfnet_distances, nfnet_indices, choosen_nfnet_threshold, nfnet_multipliers, choosen_nfnet_multiplier, PARAMETER_SEARCH)","0188d8a2":"def list_intersection(a, b) :\n    return list(set(a) & set(b))\n\ndef get_predictions_from_combined_with_tfidf(df, tfidf_low_preds, text_distances, text_indices, choosen_text_threshold, text_multipliers, choosen_text_multiplier, PARAMETER_SEARCH=True) :\n    ## Iterate through different thresholds to maximize cv, run this in interactive mode, then replace else clause with a solid threshold\n    if GET_CV and PARAMETER_SEARCH:\n        scores = []\n        keys = []\n        for tm in text_multipliers:\n            predictions = []\n            for k in range(image_indices.shape[0]):        \n                text_idx = np.where(text_distances[k,] < (choosen_text_threshold * tm))[0]\n                text_ids = text_indices[k,text_idx]\n                text_post_ids = df['posting_id'].iloc[text_ids].values\n                tfidf_ids = tfidf_low_preds[k]\n#                 if k in [1,2,3,4] :\n#                     print(tfidf_ids)\n#                     print(text_post_ids)\n                posting_ids = list_intersection(tfidf_ids, text_post_ids)\n                predictions.append(posting_ids)\n            df['pred_matches'] = predictions\n            df['pred_matches'] = df['pred_matches'].apply(reformat_labels)\n            df['f1'] = f1_score(df['matches'], df['pred_matches'])\n            score = df['f1'].mean()\n            print(\"Our f1 score for tm-{:.2f} is {:.3f}\".format(tm, score))\n            scores.append(score)\n            keys.append(f'{tm}')\n            df = df.drop(columns=['pred_matches','f1'])\n            del predictions\n            gc.collect()\n                \n        keys_scores = pd.DataFrame({'keys': keys, 'scores': scores})\n        max_score = keys_scores[keys_scores['scores'] == keys_scores['scores'].max()]\n        best_key = max_score['keys'].values[0]\n        best_score = max_score['scores'].values[0]\n        print(f'Our best score is {best_score} and has a threshold {best_key}')\n        \n    # Because we are predicting the test set that have 70K images and different label groups, confidence should be smaller\n    predictions = []\n    for k in range(image_indices.shape[0]):        \n        text_idx = np.where(text_distances[k,] < choosen_text_threshold * choosen_text_multiplier)[0]\n        text_ids = text_indices[k,text_idx]\n        tfidf_ids = tfidf_low_preds[k]\n        ids = list_intersection(tfidf_ids, text_ids)\n        posting_ids = df['posting_id'].iloc[ids].values\n        predictions.append(posting_ids)\n\n\n    del text_distances, text_indices\n    gc.collect()\n    return predictions","6e3dc407":"tfidf_text_predictions = get_predictions_from_combined_with_tfidf(df, tfidf_low_preds, text_distances, text_indices, choosen_text_threshold, text_multipliers, choosen_text_multiplier)\ntfidf_nfnet_predictions = get_predictions_from_combined_with_tfidf(df, tfidf_low_preds, nfnet_distances, nfnet_indices, choosen_nfnet_threshold, nfnet_multipliers, choosen_nfnet_multiplier)\ntfidf_image_predictions = get_predictions_from_combined_with_tfidf(df, tfidf_low_preds, image_distances, image_indices, choosen_image_threshold, image_multipliers, choosen_image_multiplier)","b655b0b7":"AGGREGATE_IMAGE_TEXT_PREDICTION = False\n\ndf[\"image_text_predictions\"] = image_text_predictions\ndf[\"nfnet_text_predictions\"] = nfnet_text_predictions\ndf[\"image_nfnet_predictions\"] = image_nfnet_predictions\n\ndf[\"tfidf_image_predictions\"] = tfidf_image_predictions\ndf[\"tfidf_text_predictions\"] = tfidf_text_predictions\ndf[\"tfidf_nfnet_predictions\"] = tfidf_nfnet_predictions","907d60ad":"submission_column = \"matches\"\nif GET_CV:\n    submission_column = \"pred_matches\"\n\nif USE_PHASH_PREDICTION :\n    df[submission_column] = aggregate_predictions(df['phash_predictions'], df['phash_predictions'])\nelse :\n    df[submission_column] = df['image_predictions']\n\n    \nif AGGREGATE_IMAGE_PREDICTION :\n    df[submission_column] = aggregate_predictions(df[submission_column], df['image_predictions'])\nelse :\n    df[submission_column] = df.apply(lambda x: combine_predictions(x[submission_column],x['image_predictions']), axis=1)\n\nif AGGREGATE_TEXT_PREDICTION :\n    df[submission_column] = aggregate_predictions(df[submission_column], df['text_predictions'])\nelse :\n    df[submission_column] = df.apply(lambda x: combine_predictions(x[submission_column],x['text_predictions']), axis=1)\n\nif AGGREGATE_IMAGE_TEXT_PREDICTION :\n    df[submission_column] = aggregate_predictions(df[submission_column], df['image_text_predictions'])\nelse :\n    df[submission_column] = df.apply(lambda x: combine_predictions(x[submission_column],x['image_text_predictions']), axis=1)\n\ndf[submission_column] = df.apply(lambda x: combine_predictions(x[submission_column],x['nfnet_text_predictions']), axis=1)\ndf[submission_column] = df.apply(lambda x: combine_predictions(x[submission_column],x['image_nfnet_predictions']), axis=1)\n\ndf[submission_column] = df.apply(lambda x: combine_predictions(x[submission_column],x['tfidf_predictions']), axis=1)\ndf[submission_column] = df.apply(lambda x: combine_predictions(x[submission_column],x['nfnet_predictions']), axis=1)\n\ndf[submission_column] = df.apply(lambda x: combine_predictions(x[submission_column],x['tfidf_text_predictions']), axis=1)\ndf[submission_column] = df.apply(lambda x: combine_predictions(x[submission_column],x['tfidf_nfnet_predictions']), axis=1)\ndf[submission_column] = df.apply(lambda x: combine_predictions(x[submission_column],x['tfidf_image_predictions']), axis=1)\n\ndf[submission_column] = df[submission_column].apply(reformat_labels)\n\nif GET_CV: \n    df['f1'] = f1_score(df['matches'], df['pred_matches'])\n    score = df['f1'].mean()\n    print(f'Our final f1 cv score is {score}')\n\ndf[['posting_id', 'matches']].to_csv('submission.csv', index = False)","b79ca067":"less_than, greater_than = f1_analysis(df)","896b9552":"## F1 Score Analysis","66ca2aa7":"## TODO\n- combine distance for lower parameter, let say by multiply the text distance and image distance\n- use image embedding to compare with embedding from the training data\n- use IndoBERT instead of English","857ab6d6":"## Submission","8d573d45":"**TFIDF Baseline**\n\nOur final f1 cv score is 0.6470817084617556\n","abeff1ea":"# Comments\n\nThanks to Chris for this great notebook https:\/\/www.kaggle.com\/cdeotte\/part-2-rapids-tfidfvectorizer-cv-0-700. \n\nHere is the script for the EfficientNetb3 ArcFace Model https:\/\/www.kaggle.com\/ragnar123\/shopee-efficientnetb3-arcmarginproduct\n\nHere is the script for the Bert Model https:\/\/www.kaggle.com\/ragnar123\/bert-baseline","625ae422":"**Baseline 0.740**\n\nOur final f1 cv score is 0.9144889569967541\n\nError which length pred equal to length match: 993\n\nError which length pred less than length match: 2650\n\nError which length pred greater than length match: 8816\n\n\n**Baseline 0.740**\n\nOur final f1 cv score is 0.9373126574577614\n\nError which length pred equal to length match: 295\n\nError which length pred less than length match: 2374\n\nError which length pred greater than length match: 6575\n\n\n**Baseline 0.740**\n\nOur final f1 cv score is 0.9249745345112435\n\nError which length pred equal to length match: 410\n\nError which length pred less than length match: 3844\n\nError which length pred greater than length match: 6281\n\n\n**Baseline 0.737**\n\nOur final f1 cv score is 0.9282814981347284\n\nError which length pred equal to length match: 401\n\nError which length pred less than length match: 3825\n\nError which length pred greater than length match: 6163","a24ab74d":"I think it's better to find a threshold where the number of error comes from them are balance","a2dab89d":"## Image Embeddings","77a5d186":"### Aggregate Phash, Then Combine with Image + Text\n\nNote: I have tried to use image only or text only feature, but the performance is worse than combining it.","e8dd0df6":"## Combine Image and Text Distance","5981d521":"## Text Embeddings","b1c6b55d":"## Image Phash","a3d9eed9":"### TFIDF "}}