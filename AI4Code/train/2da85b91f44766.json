{"cell_type":{"6574224d":"code","8266320d":"code","129dad34":"code","1129c3c4":"code","ed9eaa41":"code","fe8163a5":"code","f0e68263":"code","bc4efe24":"code","5cc51a58":"code","a5133b7e":"code","d8d5b348":"code","834d15c4":"code","1684264b":"code","aec316c3":"code","68e8b5f5":"code","93803cf1":"code","3f9ce8af":"code","a17a844e":"code","08326e69":"code","df7eea25":"code","7f8d960f":"code","2f656555":"code","576071a0":"code","0430b81d":"code","9b871176":"code","9666299d":"code","8d25decb":"markdown","d4bd0dc1":"markdown","bb244a9f":"markdown","35b170c5":"markdown","c49968e0":"markdown","0df639fc":"markdown","908861fa":"markdown"},"source":{"6574224d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8266320d":"df = pd.read_csv('..\/input\/iiitb-ga-customer-revenue-prediction\/ga_trainV2.csv',dtype={'fullVisitorId' : str})","129dad34":"JSON_COLUMN = ['device','trafficSource','totals','geoNetwork']\nfor col in JSON_COLUMN:\n    df1 = pd.json_normalize(df[col].apply(json.loads))\n    df = pd.concat([df,df1],axis=1)\n    df.drop(col , axis=1 , inplace = True)","1129c3c4":"df.date = pd.to_datetime(df.date,format='%Y%m%d')\ndf.visitStartTime = pd.to_datetime(df.visitStartTime, unit='s')","ed9eaa41":"df.hits = df.hits.fillna(0)\ndf.pageviews = df.pageviews.fillna(0)\ndf.newVisits = df.newVisits.fillna(0)\ndf.transactionRevenue = df.transactionRevenue.fillna(0)\ndf.isTrueDirect = df.isTrueDirect.fillna(False)\n\ndf.transactionRevenue = df.transactionRevenue.astype('float')\ndf.hits = df.hits.astype('int')\ndf.pageviews = df.pageviews.astype('int')\ndf.newVisits = df.newVisits.astype('int')","fe8163a5":"df.replace({'not available in demo dataset' : np.nan, '(not set)' : np.nan} , inplace = True)","f0e68263":"df.drop(['socialEngagementType', 'browserVersion', 'browserSize','operatingSystemVersion','mobileDeviceBranding','flashVersion','mobileDeviceMarketingName','mobileDeviceInfo','mobileInputSelector','mobileDeviceModel','language', 'screenColors', 'screenResolution', 'campaign', 'adwordsClickInfo.criteriaParameters','visits','cityId','latitude','longitude','networkLocation'], axis=1, inplace=True)","bc4efe24":"df1 = df.drop(df.index[df.transactionRevenue == 0].tolist(), inplace=False)","5cc51a58":"def check_missing_data(df, label, cols=None):\n    data_slice = df if cols is None else df[cols]\n    missing_count = data_slice.isnull().sum(axis=0)\n    missing_percent = 100 * missing_count \/ len(data_slice)\n    missing_values = pd.concat([missing_count, missing_percent], axis=1)\n    missing_values = missing_values.rename(\n                        columns = {0 : 'Missing Count', \n                                   1 : '% Missing'}\n                     )\n    missing_values = missing_values[missing_values.iloc[:,1] != 0]\\\n                        .sort_values('% Missing', \n                                     ascending=False).round(1)\n    print()\n    print(f'{label} Missing Values')\n    print(missing_values)\n\ndef summarize_missing_data(cols=None):\n    check_missing_data(df1, 'Training', cols)\n\nsummarize_missing_data()","a5133b7e":"df1.drop(['campaignCode','adContent','adwordsClickInfo.page','adwordsClickInfo.slot','adwordsClickInfo.gclId','adwordsClickInfo.adNetworkType','adwordsClickInfo.isVideoAd','bounces'], axis=1, inplace=True)","d8d5b348":"df1.describe()","834d15c4":"df1.describe(include=['object'])","1684264b":"plt.figure(figsize=(25, 6))\n\nbrowser_data = df1.groupby('browser')\n\nbrowsers = browser_data.browser.first()\navg_transaction = browser_data.transactionRevenue.mean()\nbrowser_count = browser_data.transactionRevenue.count()\n\nplt.subplot(1, 2, 1)\nplt.bar(browsers.values, avg_transaction.values)\nplt.xticks(rotation=45)\nplt.xlabel(\"Browsers\")\nplt.ylabel(\"Avg Transactions\")\nplt.title(\"Browsers vs Average Transactions\")\n\nplt.subplot(1, 2, 2)\nplt.bar(browsers.values, browser_count.values)\nplt.xticks(rotation=45)\nplt.xlabel(\"Browser\")\nplt.ylabel(\"Count\")\nplt.title(\"Browsers vs Browser Counts\")\n\nplt.plot()","aec316c3":"df1.country.value_counts()","68e8b5f5":"import io\nimport plotly.graph_objs as go \nfrom plotly.offline import iplot\n\ndata = dict(\n        type = 'choropleth',\n        colorscale = 'Viridis',\n        reversescale = True,\n        locations = df1.country.value_counts().index[1:],\n        locationmode = \"country names\",\n        z = df1.country.value_counts().values[1:],\n        colorbar = {'title' : 'Number of Transactions'},\n      ) \n\nlayout = dict(title = 'Number of Transactions per Country (except USA)', geo = dict(showframe = False))\n\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap,validate=False)","93803cf1":"df1[(df1.deviceCategory == 'mobile') & (df1.isMobile == False)]","3f9ce8af":"df1.drop(['isMobile'], axis=1, inplace=True)","a17a844e":"plt.figure(figsize = (25,6))\n\ndevice_data = df1.groupby('deviceCategory')\ndevices = device_data.deviceCategory.first()\ndevice_count = device_data.transactionRevenue.count()\n\nplt.subplot(1, 2, 1)\nplt.bar(devices.values, device_count.values)\nplt.xlabel('Devices')\nplt.ylabel('Device Counts')\nplt.title('Device Frequencies')\n\nmobile = np.log(df1[df1.deviceCategory == 'mobile'].transactionRevenue)\ndesktop = np.log(df1[df1.deviceCategory == 'desktop'].transactionRevenue)\ntablet = np.log(df1[df1.deviceCategory == 'tablet'].transactionRevenue)\n\nplt.subplot(1, 2, 2)\nsns.distplot(mobile, label='mobile',bins=20,kde=True)\nsns.distplot(desktop, label='desktop' ,bins=20,kde=True)\nsns.distplot(tablet, label='tablet' ,bins=20,kde=True)\nplt.legend()\nplt.show()","08326e69":"plt.figure(figsize = (25, 7))\nsns.heatmap(df1.drop(['visitId'], inplace=False, axis=1).corr(), cmap=\"coolwarm\", annot=True)","df7eea25":"df1.drop(['pageviews'], inplace=True, axis=1)","7f8d960f":"plt.scatter(df1['pageviews'],df1['transactionRevenue']\/10e8)\nplt.xlabel('Page Views by User')\nplt.ylabel('Transaction Revenue')\nplt.show()","2f656555":"trs_sum_p_cust = df.groupby('fullVisitorId')['transactionRevenue'].agg(['sum']).sort_values(by='sum',ascending=False)\ntrs_sum_p_cust.columns = ['sum']\ntotal_cust = len(trs_sum_p_cust)\ncust_with_trans = trs_sum_p_cust[trs_sum_p_cust['sum']>0].count()","576071a0":"print(f\"Total customer in train dataset :- {total_cust}\")\nprint(f\"Total customer who makes transaction :- {cust_with_trans}\")","0430b81d":"df['region'].isna().sum()","9b871176":"df1['city'].unique()","9666299d":"df['isTrueDirect'].value_counts()","8d25decb":"Average Transaction is highest for Firefox but majority of the transactions have occured via Chrome","d4bd0dc1":"Below Cells are scarcely populated ","bb244a9f":"USA clearly have majority of transactions, plotting the transactions for rest of the countries","35b170c5":"Below Cells only contain empty values","c49968e0":"PageViews and hits are highly positively correlated, thus we can drop one of those <br\/>\nisTrueDirect and newVisits are highly negatively correlated","0df639fc":"The most number of transactions are through desktop but mobile and tablet devices transaction are more closer to mean","908861fa":"Since, deviceCategory = 'mobile' gives the same information as isMobile = 'True' <br\/>\nOnly, 1 row out of 8105 being the exception <br\/>\nThus, isMobile attribute can be dropped"}}