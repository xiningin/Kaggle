{"cell_type":{"bc8e5016":"code","1251b636":"code","f6c3fcf4":"code","c74d2c7d":"code","4b34d2df":"code","1186f57a":"code","4640b34b":"code","c1e5a46f":"code","138eb7a1":"code","b70f69a9":"code","3d4f7ea5":"code","fc8e222d":"code","fa7705ac":"code","862534c6":"code","7b82c581":"code","ec473af5":"code","c2e6eb87":"code","b2fe15b0":"code","9f5aad97":"code","20c18ad3":"code","d689e4e8":"markdown","5e7eda45":"markdown","a2466743":"markdown","8e1be2d8":"markdown","72b40bf9":"markdown","f7159610":"markdown","268fc2cc":"markdown","19b17ae5":"markdown","ef054379":"markdown","91354c5a":"markdown","00a468af":"markdown","90d3a0f2":"markdown","513d03ee":"markdown","2789d46f":"markdown","b2cb1d1e":"markdown","3cd9a0e0":"markdown"},"source":{"bc8e5016":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1251b636":"ds = pd.read_csv('..\/input\/citibike-system-data\/201306-citibike-tripdata.csv')\nds['rentalid'] = ds.index + 1\nds.head()","f6c3fcf4":"start = ds.groupby(['start station id', 'starttime', 'start station name', 'start station latitude',\n                    'start station longitude', 'bikeid', 'usertype', 'birth year', 'gender', 'rentalid'])\\\n          .size().reset_index(name='counts')\nstart = start.sort_values(['start station id', 'starttime'])\nstart['event'] = \"Departure\"\nstart.head()","c74d2c7d":"end = ds.groupby(['end station id', 'stoptime', 'end station name', 'end station latitude', 'end station longitude',\n                  'bikeid', 'usertype', 'birth year', 'gender', 'rentalid'])\\\n        .size().reset_index(name='counts')\nend = end.sort_values(['end station id', 'stoptime'])\nend['event'] = \"Arrival\"\nend.head()","4b34d2df":"start['counts'] = -start['counts']\nstart.head()","1186f57a":"end['end station id'] = end['end station id'].astype('int64')\nend.head()","4640b34b":"start = start.rename(columns={\"start station id\":\"station id\", \"starttime\":\"time\", \"start station name\":\"station name\",\n                              \"start station latitude\":\"station latitude\", \"start station longitude\":\"station longitude\"})\nend = end.rename(columns={\"end station id\":\"station id\", \"stoptime\":\"time\", \"end station name\":\"station name\",\n                          \"end station latitude\":\"station latitude\", \"end station longitude\":\"station longitude\"})\nU = start.append(end)\nU.head()","c1e5a46f":"U = U.sort_values(['station id', 'time'])\nU.head()","138eb7a1":"U = U.rename(columns={\"counts\":\"availability\"})\nU['actor'] = \"Rental\"\nU.head()","b70f69a9":"trip = pd.read_csv('..\/input\/citibike-system-data\/201306-citibike-tripdata.csv')\ntrip.head()","3d4f7ea5":"trip = trip[['bikeid', 'starttime', 'stoptime', 'start station id', 'start station name', 'start station latitude',\n             'start station longitude', 'end station id', 'end station name', 'end station latitude',\n             'end station longitude', 'usertype', 'birth year', 'gender']]\ntrip = trip.dropna(subset=['end station id'])\ntrip['end station id'] = trip['end station id'].astype('int64')\ntrip.head()","fc8e222d":"trip = trip.sort_values(['bikeid', 'starttime', 'stoptime'])\ntrip.head()","fa7705ac":"air = trip\nair['flag'] = trip['start station id'] - trip['end station id'].shift(periods=1)\nair = air.dropna(subset=['flag'])\nair['flag'] = (air['flag'] > 0)\nair['flag'] = air['flag'].astype(np.int64)\nair.head()","862534c6":"air['end station id'] = air['end station id'].shift(periods=1)\nair['stoptime'] = air['stoptime'].shift(periods=1)\nair['end station name'] = air['end station name'].shift(periods=1)\nair['end station latitude'] = air['end station latitude'].shift(periods=1)\nair['end station longitude'] = air['end station longitude'].shift(periods=1)\nair = air.dropna(subset=['end station id'])\nair['end station id'] = air['end station id'].astype(np.int64)\nair = air[air['flag'] > 0]\nair.head()","7b82c581":"arrivals = air[['start station id', 'starttime', 'start station name', 'start station latitude', \n                'start station longitude', 'bikeid', 'flag']]\narrivals = arrivals.rename(columns={\"start station id\":\"station id\", \"starttime\":\"time\", \"flag\":\"counts\",\n                                    \"start station name\":\"station name\", \"start station latitude\":\"station latitude\",\n                                    \"start station longitude\":\"station longitude\"})\narrivals[\"event\"] = \"Arrival\"\n\ndepartures = air[['end station id', 'stoptime', 'end station name', 'end station latitude',\n                  'end station longitude', 'bikeid', 'flag']]\ndepartures['flag'] = -departures['flag']\ndepartures = departures.rename(columns={\"end station id\":\"station id\", \"stoptime\":\"time\", \"flag\":\"counts\",\n                                        \"end station name\":\"station name\", \"end station latitude\":\"station latitude\",\n                                        \"end station longitude\":\"station longitude\"})\ndepartures[\"event\"] = \"Departure\"\n\nair = arrivals.append(departures)\nair.head()","ec473af5":"air = air.sort_values(['station id', 'time'])\nair.head()","c2e6eb87":"air = air.rename(columns={\"counts\":\"availability\"})\nair[\"actor\"] = \"Transfer\"\nair.head()","b2fe15b0":"U = U.append(air)\nU = U.sort_values(['station id', 'time'])\nU.head()","9f5aad97":"U['availability'] = U.groupby('station id')['availability'].cumsum()\nU.head()","20c18ad3":"output = U\noutput.to_csv('CitiBike System Data.csv', index=False)","d689e4e8":"We create a dataframe about $Departures(s,t)$ for each station $s$ and time $t$, grouped by station and sorted by time (ascending).","5e7eda45":"We group by *bikeid* and sort by *starttime*, *stoptime* ascending.","a2466743":"We calculate the *availability* column as the running sum for each station. (Remember that *departures* were stored as their opposites)","8e1be2d8":"As we know the latitude and longitude for each station $s$, we can express $U$ as\n$$U(s,t)=U(x,y,t)$$\nwhere $x,y$ are the geographical coordinates of station $s$.","72b40bf9":"Intuitively, a discontinuity appears when a bike begins a trip from a start station which is different from the end station of its previous trip.","f7159610":"We create a dataframe about $Arrivals(s,t)$ for each station $s$ and time $t$, grouped by station and sorted by time (ascending).","268fc2cc":"Based on:\n* [CitiBike System Data Stations](https:\/\/www.kaggle.com\/konstantinosalatzas\/citibike-system-data-stations)\n* [CitiBike System Data Bike Transfers](https:\/\/www.kaggle.com\/konstantinosalatzas\/citibike-system-data-bike-transfers)","19b17ae5":"Define the *availability* $U(s,t)$ of a station $s$ at a moment in time $t$ as\n* $$U(s,0)=0, \\forall s$$\n* $$U(s,t)=U(s,t-\\delta t)+Arrivals(s,t)-Departures(s,t), \\forall s, \\forall t>0$$\nwhere\n* $Arrivals(s,t)$ is the number of observations with *end station* $s$ and *stoptime* $t$\n* $Departures(s,t)$ is the number of observations with *start station* $s$ and *starttime* $t$","ef054379":"Let $i$ be a row number such that\n* $$bikeid(i)=bikeid(i+1)$$\n* $$endstationid(i)\\neq startstationid(i+1)$$\nWe call that a *discontinuity* in the bike's trip.","91354c5a":"We group by station and sort by time (ascending).","00a468af":"Assuming that the data is complete, we can hypothesize that the company redistributes the bikes by transfering bikes from stations with high *availability* to stations with low *availability*.","90d3a0f2":"As *departures* and *arrivals* now have the same structure, we rename the corresponding columns to common names and append the dataframes.","513d03ee":"Let $i$ be a row number such that $bikeid(i)=bikeid(i+1)$.","2789d46f":"Define\n$$flag(i+1)=\\left\\{\\begin{matrix}0,startstation(i+1)=endstation(i)\\\\1,startstation(i+1)\\neq endstation(i)\\end{matrix}\\right.$$\nThus, $flag(i)=1$ if and only if there is a *discontinuity* between the $i$-th and ($i+1$)-th trip of the bike.","b2cb1d1e":"We convert each value to its opposite as this will help with later calculations (remember the definition of $U$).","3cd9a0e0":"Assume we have a table with *bikeid*, *starttime*, *stoptime*, *start station id*, *end station id*, grouped by *bikeid* and sorted by *starttime* ascending."}}