{"cell_type":{"92a9d68b":"code","65784df6":"code","094766f0":"code","0378a34c":"code","9d773a82":"code","e91a28eb":"code","bee7ab20":"code","b362eab6":"code","331d0891":"code","f39e8057":"code","526a2bd1":"code","5a13de5d":"code","0c8d8845":"markdown","d63b5b1e":"markdown","b6d8e680":"markdown","02520e39":"markdown","ae03d829":"markdown","eb814b2a":"markdown","ac89f69d":"markdown","8e4a8eb0":"markdown","6b7894b7":"markdown","ef9e4a21":"markdown"},"source":{"92a9d68b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65784df6":"# Importing all the libraries \n\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os, random\nimport sklearn\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dropout, Dense, Flatten, BatchNormalization, Conv2D, MaxPool2D\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.preprocessing import image\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom pathlib import Path\nimport cv2\n\nimport warnings\nwarnings.filterwarnings('ignore')","094766f0":"# Define path to the data directory\ndir_alldata = Path('..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray')\n\n# Path to train directory (Fancy pathlib...no more os.path!!)\ntrain_data_dir = dir_alldata \/ 'train'\n\n# Path to validation directory\nvalidation_data_dir = dir_alldata \/ 'val'\n\n# Path to test directory\ntest_data_dir = dir_alldata \/ 'test'\n\n# Get the path to the normal and pneumonia sub-directories\nnormal_cases_train = train_data_dir \/ 'NORMAL'\npneumonia_cases_train = train_data_dir \/ 'PNEUMONIA'","0378a34c":"img_width, img_height = 150,150\nnb_train_sample =1000\nnb_validation_samples =100\n\nepochs = 50\nbatch_size = 20\n\nif K.image_data_format()==\"channels_first\":\n    input_shape =(3,img_width, img_height)\nelse:\n    input_shape =(img_width, img_height,3)\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)\n\nvalidation_datagen = ImageDataGenerator(rescale=1.\/255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\n\n\ntrain_generator= train_datagen.flow_from_directory(train_data_dir, target_size =(150,150),batch_size=batch_size, class_mode=\"binary\" )\n\nvalidation_generator = validation_datagen.flow_from_directory(validation_data_dir, target_size = (150,150),batch_size=batch_size, class_mode=\"binary\")\n \ntest_generator = test_datagen.flow_from_directory(test_data_dir, target_size = (150,150),batch_size=batch_size, class_mode=\"binary\")\n ","9d773a82":"# Three Random Normal CXR Images from the dataset\nimport os, random\n\nfolder_N=r\"..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\"\n\na=random.choice(os.listdir(folder_N))\nb=random.choice(os.listdir(folder_N))\nc=random.choice(os.listdir(folder_N))\nprint(\"Printing three Normal random images \")\nprint(a)\nprint(b)\nprint(c)\n\nrandom_N = [a, b, c]\n\nfor i in random_N:\n    file = folder_N+'\/'+i\n    img = image.load_img(file)\n    plt.figure()\n    plt.imshow(img)\n    plt.show() \n","e91a28eb":"# Three Random Pneumonia CXR Images from the dataset\nimport os, random\n\nfolder_P=r\"..\/input\/chest-xray-pneumonia\/chest_xray\/test\/PNEUMONIA\"\n\nd=random.choice(os.listdir(folder_P))\ne=random.choice(os.listdir(folder_P))\nf=random.choice(os.listdir(folder_P))\nprint(\"Printing three PNEUMONIA random images \")\nprint(d)\nprint(e)\nprint(f)\n\nrandom_P = [d, e, f]\n\nfor i in random_P:\n    file = folder_P+'\/'+i\n    img = image.load_img(file)\n    plt.figure()\n    plt.imshow(img)\n    plt.show() \n\n","bee7ab20":"# To plot the count plot I am changing the dataset into a pandas dataframe\n# Get the list of all the images\nnormal = normal_cases_train.glob('*.jpeg')\npneumonia = pneumonia_cases_train.glob('*.jpeg')\n\n# An empty list. We will insert the data into this list in (img_path, label) format\ntrain_df = []\n\n# Go through all the normal cases. The label for these cases will be 0\nfor img in normal:\n    train_df.append((img,0))\n\n# Go through all the pneumonia cases. The label for these cases will be 1\nfor img in pneumonia:\n    train_df.append((img,1))\n\n# Get a pandas dataframe from the data we have in our list \ntrain_df = pd.DataFrame(train_df, columns=['image', 'label'],index=None)\n\n# Shuffle the data \ntrain_df = train_df.sample(frac=1.).reset_index(drop=True)\n\n# How the dataframe looks like?\nplt.figure(figsize=(12,8))\ncount = sns.countplot(train_df[\"label\"], palette=[\"#6B614B\",\"#B0B7B5\"])\ncount.set_title(\"Count of Positive (0) and Negative Cases (1)\", color=\"#6B614B\")\n","b362eab6":"model = Sequential()\nmodel.add(Conv2D(32,(3,3),input_shape=input_shape))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(32,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(64,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(64))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1))\nmodel.add(Activation(\"sigmoid\"))\n\nmodel.summary()","331d0891":"model.compile(loss= \"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])","f39e8057":"history = model.fit_generator(train_generator, steps_per_epoch=nb_train_sample\/\/batch_size, epochs=epochs,validation_data=validation_generator, validation_steps=nb_validation_samples\/\/batch_size)","526a2bd1":"test_accuracy = model.evaluate_generator(test_generator)","5a13de5d":"print('The accuracy on test set :',test_accuracy[1]*100 )","0c8d8845":"<a id=\"5\"><\/a>\n# **<span style=\"color:#6B614B;\">CONCLUSION<\/span>** \n\n\n**Concluding the model with:**\n\n* Testing on the test set\n* Evaluating Test Accuracy","d63b5b1e":"# <h1 style='background:#6B614B; border:0; color:#B0B7B5'><center>Pneumonia Diagnosis By CXR Images<\/center><\/h1> \n\n![CNN-1.png](attachment:CNN-1.png)\n\n   <a id='top'><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h1 style='background:#6B614B; border:0; color:#B0B7B5'><center>TABLE OF CONTENTS<\/center><\/h1>\n\n[1. IMPORTING LIBRARIES](#1)\n    \n[2. LOADING DATA](#2)    \n\n[3. DATA VISUALIZATION](#3)        \n\n[4. MODEL BUILDING](#4) \n\n[5. CONCLUSION](#5) \n\n[6. END](#6) \n    \n <a id=\"1\"><\/a>\n# **<span style=\"color:#6B614B;\">IMPORTING LIBRARIES<\/span>**","b6d8e680":"**<span style=\"color:#6B614B;\"> If you liked this Notebook, please do upvote.<\/span>**\n\n**<span style=\"color:#6B614B;\"> If you have any suggestions or questions, feel free to comment!<\/span>**\n\n**<span style=\"color:#6B614B;\">Best Wishes!<\/span>**\n\n<a id=\"6\"><\/a>\n<h1 style='background:#6B614B; border:0; color:#B0B7B5'><center>END<\/center><\/h1> ","02520e39":"**<span style=\"color:#6B614B;\">The count of classes<\/span>**","ae03d829":"**<span style=\"color:#6B614B;\">Three Random Pneumonia CXR Images from the dataset<\/span>**","eb814b2a":"**<span style=\"color:#6B614B;\">Three Random Normal CXR Images from the dataset<\/span>**","ac89f69d":"There is a data imbalance. The number of Pneumonia CXR images are more than the number of normal CXR images.  \n\n<a id=\"4\"><\/a>\n# **<span style=\"color:#6B614B;\">MODEL BUILDING<\/span>**\n\n\n**In this project, we build an Convolutional neural network.**\n\nFollowing steps are involved in the model building\n\n* Initialising the Convnet\n* Defining by adding layers\n* Compiling the Convnet\n* Train the Convnet","8e4a8eb0":"<a id=\"2\"><\/a>\n# **<span style=\"color:#6B614B;\">LOADING DATA<\/span>**","6b7894b7":"![CNN2.png](attachment:CNN2.png)\n\n<a id=\"3\"><\/a>\n# **<span style=\"color:#6B614B;\">DATA VISUALIZATION<\/span>**\n\n**Steps involved in visualisation:**\n\n* Plotting Random Normal Images\n* Plotting Random Pneumonia Images\n* Plotting Count of Positive and Negative Cases","ef9e4a21":"The dataset is labelled by a medical professional. It is not decipherable for a layman. However, it seems like the sharpness around the diaphragm could be the deciding factor. Nonetheless, there have been exceptions in that case as well. So this diagnosis is a subjective matter.  Let's leave it to the Convnet to figure that out. \n\n**Next, we will have a look at the count of classes.**"}}