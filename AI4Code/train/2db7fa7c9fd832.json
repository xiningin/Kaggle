{"cell_type":{"508e2bd3":"code","b1e6cced":"code","25d56906":"code","48c484d6":"code","d38281f1":"code","478ca7c8":"code","f3fda09e":"code","c3960460":"code","a176c683":"code","63500659":"code","9166d1a4":"code","6c9d2a65":"code","1ea053ba":"code","15a86177":"code","ce1bc12d":"code","bcbd049e":"code","8b7dd009":"code","3533d509":"code","a6d21a5e":"code","ea653148":"code","c1d0c5d0":"code","08e60aa9":"markdown","f61b706d":"markdown","345930c2":"markdown","3f3635b1":"markdown","4209579e":"markdown","2e42dddc":"markdown","a1da3ece":"markdown","31821a39":"markdown","2b4e68cc":"markdown","266bad2b":"markdown","4268f99c":"markdown","ab985f0b":"markdown","812d0f70":"markdown","d41c528a":"markdown","7015f587":"markdown","c8f7c51d":"markdown","dc4d2511":"markdown","e24776c6":"markdown","e3609023":"markdown","b7cd0a4c":"markdown","f9b9017e":"markdown","20db102b":"markdown"},"source":{"508e2bd3":"# Load libraries\n\n%matplotlib inline\n\nimport os                            # Operating system\nimport numpy as np                   # Linear algebra\nimport pandas as pd                  # Data processing, CSV file I\/O (e.g. pd.read_csv)\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt      # Data visualisations\nimport seaborn as sns                # Data visualisations\n\nsns.set(style='white')\n\n\n","b1e6cced":"# Get available file names from source folder\nfor dirname, _, filenames in os.walk(\".\/Source Data\/\"):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","25d56906":"# Read training and test data\ntrain_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\n# Check the number of rows and columns in the data\ntrain_data.shape, test_data.shape","48c484d6":"# Show data types of each column\ntrain_data.dtypes","d38281f1":"# Show a sample of random rows\ntrain_data.sample(5)","478ca7c8":"# Show a summary of the numeric columns in the training data\ntrain_data.describe()","f3fda09e":"# Show a summary of the numeric columns in the test data\ntest_data.describe()","c3960460":"# Define a function to check for missing values\ndef get_missing_summary(dataframe):\n    '''Return the count and percentage of missing values in a dataframe'''\n    for col in dataframe.columns:\n        num_of_missing = dataframe[col].isna().sum()\n        perc_of_missing = (dataframe[col].isna().sum() \/ len(dataframe[col])) * 100\n        print('%s  --  %d missing  --  %.1f%%' % (col, num_of_missing, perc_of_missing))","a176c683":"# Check training data for any null \/ missing values\nget_missing_summary(train_data)","63500659":"# Check test data for any null \/ missing values\nget_missing_summary(test_data)","9166d1a4":"# Select the name of the label column\nlabel_col = 'Survived'","6c9d2a65":"# Plot Pclass values\nplt.figure(figsize=(14,4))\nplt.title('Number of survivals by Pclass')\nsns.countplot(x='Pclass', hue=label_col, data=train_data)","1ea053ba":"#Inspect Name values\ntrain_data[['Name', 'Pclass', 'Fare', 'Survived']].sample(20)","15a86177":"# Plot Sex values\nplt.figure(figsize=(14,4))\nplt.title('Number of survivals by Sex')\nsns.countplot(x='Sex', hue=label_col, data=train_data)","ce1bc12d":"# Plot Age values\nplt.figure(figsize=(14,4))\nplt.title('Number of survivals by Age')\nsns.distplot( train_data.loc[(train_data.Survived == 0)][\"Age\"], color=\"red\", bins=20, label=\"Died\")\nsns.distplot( train_data.loc[(train_data.Survived == 1)][\"Age\"], color=\"lightgreen\", bins=20, label=\"Survived\")\nplt.legend()","bcbd049e":"# Plot SibSp values\nplt.figure(figsize=(14,4))\nplt.title('Number of survivals by SibSp')\nsns.countplot(x='SibSp', hue=label_col, data=train_data)","8b7dd009":"# Plot Parch values\nplt.figure(figsize=(14,4))\nplt.title('Number of survivals by Parch')\nsns.countplot(x='Parch', hue=label_col, data=train_data)","3533d509":"#Inspect Ticket values\ntrain_data[['Ticket', 'Name', 'Pclass', 'Fare', 'Survived']].sort_values(by='Ticket', ascending=False).head(20)","a6d21a5e":"# Plot Fare values\nplt.figure(figsize=(14,4))\nplt.title('Number of survivals by Fare')\nsns.distplot( train_data.loc[(train_data.Survived == 0)][\"Fare\"], color=\"red\", bins=20, label=\"Died\")\nsns.distplot( train_data.loc[(train_data.Survived == 1)][\"Fare\"], color=\"lightgreen\", bins=20, label=\"Survived\")\nplt.legend()","ea653148":"# Inspect Cabin values\ntrain_data[['Cabin', 'Name', 'Pclass', 'Fare', 'Survived']].sort_values(by='Cabin', ascending=False).head(20)","c1d0c5d0":"# Plot Embarked values\nplt.figure(figsize=(14,4))\nplt.title('Number of survivals by Embarked')\nsns.countplot(x='Embarked', hue=label_col, data=train_data)","08e60aa9":"### **Summary**\nThere is a lot of data missing in one of the columns but the rest of the missing data can be imputed.\nThe data seems to support the harsh reality that wealth and privilage gives people a head start in all aspects of life. It also suggests that women and children were given priority access to the life boats. Another observation is that larger family units were less likely to survive.\nAnalysing the data gives you valuable insight into the dataset. This will help guide decisions in the next step which is called Feature Engineering.","f61b706d":"#### Next we'll have a closer look at the data\n- Identify the label column\n- Analyse the other columns","345930c2":"With nearly 80% of the Cabin data missing, it is very unlikely that the missing values can be imputed, therefore this column will probably need to be excluded as a feature in the model. It could however assist with identifying family units.","3f3635b1":"#### Next the list of files in the source data folder is shown:","4209579e":"We can see that more than half the people in 1st class survived, whereas the vast majority of the people in 3rd class died.","2e42dddc":"This column is tricky because it can either be a count of the number of siblings (if the passenger is a child), or if they had a spouse (if the passenger is an adult). It'll need further analysis by combining it with age and perhaps the title. We can see that a passenger was more likely to die if they were travelling alone, but if a passenger had one sibling or a spouse they had slightly better odds of surviving. Larger family units appear to have a lower chance of survival.","a1da3ece":"# Initial Analyais of Titanic Data\n#### In this notebook we will have a look at the datasets provided by Kaggle's Titanic competition. I have tried to add as many comments as possible to explain what the code is doing and why. This notebook is aimed at people just starting out with ML.","31821a39":"#### We will pass the function the training and test datesets to check for missing values:","2b4e68cc":"#### We need to check if any non-numeric columns also have missing values\n- This can be done by defining a function to check all columns in a dataframe\n- Functions are uselful because they allow you to reuse your code","266bad2b":"#### Sample returns a number of randomly selected rows so we can see what the data looks like:","4268f99c":"We can see that passengers who bought the cheapest tickets were most likely to die, while the majority of people with more expensive tickets survived.","ab985f0b":"#### Let's have a look at the data types of each column:","812d0f70":"We can see that there is data missing in a few of the columns for both data sets. One column in particular, is missing well over half of its values so we'll probably exclude it as a feature. The missing values for the other columns will have to be imputed (generated by inference)","d41c528a":"#### Describe shows a summary of all numeric data columns. Useful measures include:\n- The count shows if there are missing values\n- The mean shows the average value\n- The min and max values show the value range","7015f587":"We can see that most males died, whereas most females survived.","c8f7c51d":"#### Next the training and testing datasets are loaded into dataframes and each dataframe's shape is shown\n - The training data here is labelled which means that is contains an extra column indicating the outcome that is to be predicted.\n - The test data is not labelled because it will be used to generate the predictions to submit to the competition.\n - The \"shape\" of a dataframe is basically the number of rows and columns.","dc4d2511":"We can see that some passengers share the same ticket number, and others have a consecutive numbers, which could help in identifying family units.","e24776c6":"#### This first section is where all libraries to be used are loaded:","e3609023":"We can see that infants and early teens had a better chance of survival, along with passengers in their mid to late 30's. While passengers in other age groups were more likely to die.","b7cd0a4c":"This column is also tricky because it can either be a count of the number of parents (if the passenger is a child), or the number of children (if the passenger is an adult). Again it'll need further analysis by combining it with age and perhaps the title. We can see that a passenger was more likely to die if they were travelling alone, but if a passenger had one child or one parent they had slightly better odds of surviving. Larger family units appear to have a lower chance of survival.","f9b9017e":"The name column can probably be used to extract the passenger's title","20db102b":"We can see that the majority of passengers embarked from \"S\", and a large majority of those died. The survival rate of passengers that embarked from \"C\" and \"Q\" appear to be more evenly split."}}