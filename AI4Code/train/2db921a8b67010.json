{"cell_type":{"7a677367":"code","79db0a85":"code","4fd06864":"code","03d3ee4e":"code","84356fba":"code","aaf5b67c":"code","07676b95":"code","92e46821":"code","2a2cd1af":"code","69193087":"code","e611baf3":"code","91c20be5":"code","58e4a797":"code","46b4d645":"code","7a22737a":"code","9cbabcb4":"code","b2de3449":"code","f53d9842":"code","36ba0a9b":"code","ba9b9c9b":"code","09ec1d01":"code","80cd6368":"code","bf9cfd56":"code","7be43357":"code","b71a4d04":"code","d2a8ee21":"code","1f9d1f33":"code","7423818a":"code","e8e60a2c":"code","af586c84":"code","efa057dd":"code","7842ed98":"code","ce85ca4c":"code","6c82ea27":"code","0ad91274":"code","f7600631":"code","ab33bbd3":"code","6ee12495":"code","ff297e8f":"code","89cde602":"code","c47097e8":"code","8ff6a4cf":"code","6eec7e1c":"code","ca522cef":"code","18a5d505":"code","fb1c3ba6":"code","ce31722b":"code","e10b6c73":"code","53c8abc2":"code","9b418688":"code","bb12d39c":"code","953f12e9":"code","1934376e":"code","26a63d72":"code","82e22f86":"markdown","60fe4dc3":"markdown","8ea7c91b":"markdown","cbbc2340":"markdown","c5e59e60":"markdown","44cbcb7b":"markdown","e433b7e7":"markdown","38e0226c":"markdown","b51001c7":"markdown","d3d3eed0":"markdown","9ad77d73":"markdown","344c0230":"markdown","8a2785aa":"markdown","b357652a":"markdown","18068257":"markdown"},"source":{"7a677367":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt \n%matplotlib inline \nplt.style.use('seaborn-white')\n\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict # 10-Fold Cross Validation\nfrom sklearn.metrics import classification_report,accuracy_score,confusion_matrix\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier # Logistic Regression\nfrom sklearn.naive_bayes import GaussianNB # Naive Bayes\nfrom sklearn.neighbors import KNeighborsClassifier # K Nearest Neighbour\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier # Ensemble  \n\nfrom sklearn import model_selection\nfrom sklearn.ensemble import BaggingClassifier  \n\n\n\nimport datetime as dt \nimport sys, matplotlib, warnings, math, sklearn\nwarnings.filterwarnings(\"ignore\")\n\n# Libraries versions \nprint(\"Numpy : \" + np.__version__)\nprint(\"Pandas : \" + pd.__version__)\nprint(\"Seaborn : \" + sns.__version__) \nprint(\"Matplotlib : \" + matplotlib.__version__)\nprint(\"SkLearn : \" + sklearn.__version__)\nprint(\"Python : \" + sys.version)","79db0a85":"loanstats = '..\/data\/lending_club\/loan.csv'\n\ntry:\n    loan_df = pd.read_csv(loanstats, skipinitialspace=True, low_memory=False)\nexcept Exception as e:\n    print(e)","4fd06864":"loanstats = '\/kaggle\/input\/lending-club-loan-data\/loan.csv'\n\nloan_df = pd.read_csv(loanstats, skipinitialspace = True, low_memory = False)","03d3ee4e":"df1 = loan_df.copy()  ","84356fba":"loan_df = df1.copy()","aaf5b67c":"# Getting the percentage of NA values \npd.set_option('display.max.rows', len(loan_df.columns))\nprint(loan_df.shape)\nprint((loan_df.isnull().sum() \/ loan_df.shape[0] * 100))","07676b95":"def get_nan_cols(df, nan_percent=0.8):\n    threshold = len(df.index) * nan_percent\n    return [c for c in df.columns if sum(df[c].isnull()) >= threshold]\n\nloan_df.drop(get_nan_cols(loan_df, 0.9), axis=1, inplace= True)","92e46821":"# Removing un-necessary columns after visualization of data \ncols = [\"hardship_flag\", \"application_type\", \"policy_code\", \"out_prncp_inv\", \"out_prncp\", \"initial_list_status\",\n        \"title\", \"pymnt_plan\", \"emp_title\", \"chargeoff_within_12_mths\", \n        \"collections_12_mths_ex_med\"] # zip_code\n\nloan_df.drop(cols, axis=1, inplace= True)","2a2cd1af":"pd.set_option('display.max.rows', len(loan_df.columns))\nprint((loan_df.isnull().sum() \/ loan_df.shape[0] * 100))\n","69193087":"# loan_df.describe()\npd.set_option('display.max.columns', len(loan_df.columns))\nloan_df.head()","e611baf3":"def dnmcpStatus(x):\n    if x in ['Fully Paid','Charged Off']:\n        return 0 \n    else :\n        return 1\n\nloan_df['dnmcp'] = loan_df.loan_status.apply(lambda x: dnmcpStatus(x))","91c20be5":"try:\n    # [\"term\"]\n    loan_df['term'] = loan_df['term'].str.replace('months','')\n    loan_df['term'] = loan_df['term'].str.replace('36','3')\n    loan_df['term'] = loan_df['term'].str.replace('60','5')\n    loan_df['term'] = pd.to_numeric(loan_df['term']) \nexcept Exception as e:\n    print(e.with_traceback())","58e4a797":"try:\n    # [\"int_rate\"]\n#     loan_df['int_rate'] = loan_df['int_rate'].str.replace('%','')\n    loan_df['int_rate'] = pd.to_numeric(loan_df['int_rate']) \nexcept Exception as e:\n    print(e.with_traceback())","46b4d645":"try:\n    # [\"loan_status\"]\n    loan_df[\"loan_status\"]=loan_df[\"loan_status\"].str.replace(\"Does not meet the credit policy. Status:Fully Paid\",\n                                                                \"Fully Paid\")\n    loan_df[\"loan_status\"]=loan_df[\"loan_status\"].str.replace(\"Does not meet the credit policy. Status:Charged Off\",\n                                                                \"Charged Off\")\nexcept Exception as e:\n    print(e.with_traceback())","7a22737a":"try:\n    # [\"emp_length\"]\n    loan_df[\"emp_length\"] = loan_df[\"emp_length\"].str.replace('< 1 year','0')\n    \n    # [\"home_ownership\"]\n    loan_df[\"home_ownership\"] = loan_df[\"home_ownership\"].replace(['ANY', 'NONE','OTHER'], 'RENT')\n    \n    \n    # ['purpose']\n    loan_df['purpose'] = loan_df['purpose'].str.replace('renewable_energy', 'other')\nexcept Exception as e:\n    print(e.with_traceback())","9cbabcb4":"try:\n    # [\"issue_d\", \"earliest_cr_line\", \"last_pymnt_d\", \"last_credit_pull_d\"]\n    loan_df['issue_d'] = pd.to_datetime(loan_df['issue_d'])\n    loan_df['last_pymnt_d'] = pd.to_datetime(loan_df['last_pymnt_d'])\n    loan_df['earliest_cr_line'] = pd.to_datetime(loan_df['earliest_cr_line'])\n    loan_df['last_credit_pull_d'] = pd.to_datetime(loan_df['last_credit_pull_d'])\nexcept Exception as e:\n    print(e.with_traceback())","b2de3449":"try:\n    # ['issue_yr']\n    loan_df['issue_yr'] = loan_df['issue_d'].dt.year\n    \n    # ['issue_month']\n    loan_df['issue_month'] = loan_df['issue_d'].dt.month_name()    \n\n    # ['issue_qtr']\n    loan_df[\"issue_qtr\"] = loan_df[\"issue_d\"].dt.quarter\nexcept Exception as e:\n    print(e.with_traceback())","f53d9842":"try:\n    loan_df['last_credit_pull_d'].fillna(method='ffill', inplace=True)\n    loan_df['earliest_cr_line'].fillna(method='ffill', inplace=True)\n    loan_df['last_pymnt_d'].fillna(method='ffill', inplace=True)\n\n    loan_df[\"revol_util\"].fillna(loan_df[\"revol_util\"].mean(), inplace=True)\n    loan_df[\"open_acc\"].fillna(int(loan_df['open_acc'].mean()), inplace=True)\n    loan_df[\"annual_inc\"].fillna(round(loan_df[\"annual_inc\"].mean(),2), inplace=True)\n    loan_df[\"inq_last_6mths\"].fillna(math.ceil(loan_df[\"inq_last_6mths\"].mean()), inplace=True)\n    loan_df[\"total_acc\"].fillna(math.floor(loan_df[\"total_acc\"].mean()), inplace=True)\n    loan_df[\"pub_rec_bankruptcies\"].fillna(math.ceil(loan_df[\"pub_rec_bankruptcies\"].mean()), inplace=True)\n    \n    loan_df['emp_length'].fillna('0', inplace=True)\n    \n    loan_df['tax_liens'].fillna(0,inplace=True)\n    loan_df['pub_rec_bankruptcies'].fillna(0,inplace=True)\n    loan_df['delinq_amnt'].fillna(0, inplace=True)\n    loan_df['acc_now_delinq'].fillna(0, inplace=True)\n    loan_df['delinq_2yrs'].fillna(0, inplace=True)\n    loan_df['pub_rec'].fillna(0, inplace=True)\n    loan_df['dti'].fillna(0, inplace=True)\n    \nexcept Exception as e:\n    print(e)","36ba0a9b":"# Separating 2008 data for testing \ntest_2008 = loan_df[loan_df.issue_yr == 2008]\nloan_df = loan_df[loan_df.issue_yr != 2008]","ba9b9c9b":"title_font, xlabel_font, ylabel_font = 20, 12, 12  \ncolors=['lightcoral','yellowgreen', 'gold', 'skyblue','red','cyan']","09ec1d01":"# ['verification_status']\n\nverification_status = [(loan_df['verification_status']=='Verified').sum(),\n                      (loan_df['verification_status']=='Source Verified').sum(),\n                      (loan_df['verification_status']=='Not Verified').sum()]\n\nplt.figure(figsize=(5,5),dpi=120)\nplt.pie(verification_status, labels = ('Verified','Source Verified', 'Not Verified'), \n        explode = (0.05, 0.05, 0.05), colors = colors[0:3],shadow=True,startangle = 360, autopct='%1.2f%%')\nplt.title(\"Loan Verification\", fontsize = title_font)\nplt.xlabel('Status',fontsize = xlabel_font)\nplt.show()","80cd6368":"# ['home_ownership']\nownership_status = [(loan_df['home_ownership'] == 'RENT').sum(),\n                      (loan_df['home_ownership'] == 'OWN').sum(),\n                      (loan_df['home_ownership'] == 'MORTGAGE').sum()]\n\nplt.figure(figsize=(5,5),dpi=120)\nplt.pie(ownership_status, labels = ('RENT','OWN', 'MORTGAGE'), \n        explode = (0.05, 0.05, 0.05), colors = colors[-5:-2],shadow=True,startangle = 180, autopct='%1.2f%%')\nplt.title(\"Home Ownership\", fontsize = title_font)\nplt.xlabel('Status',fontsize = xlabel_font)\nplt.show()","bf9cfd56":"# ['loan_status'] -> DNMCP :- Does not meet the credit policy\nloan_status = [(loan_df['loan_status'] == 'Fully Paid').sum(), (loan_df['loan_status'] == 'Charged Off').sum()]\n\nplt.figure(figsize=(5,5),dpi=120) \nplt.pie(loan_status, labels = ('Fully Paid', 'Charged Off'), \n        explode = (0.08, 0.08), colors = colors[0:2],shadow=True,startangle = 180, autopct='%1.2f%%')\nplt.title(\"Loan Status\", fontsize = title_font)\nplt.xlabel('Status',fontsize = xlabel_font)\nplt.show()","7be43357":"# ['purpose']\nplt.figure(figsize=(10,10),dpi=120)\nsns.countplot(y='purpose', data=loan_df ,hue='loan_status')\nplt.show()","b71a4d04":"# ['loan_status']\nplt.figure(figsize = (10,4), dpi=120)\nsns.countplot(x='issue_yr', data=loan_df, hue='loan_status')\nplt.xlabel('Year')\nplt.legend(loc='upper left')\nplt.title(\"Loan Status by Years\", fontsize=title_font)\nplt.show()","d2a8ee21":"plt.figure(figsize = (12,4), dpi=120)\nsns.countplot(x='term', data=loan_df, hue='loan_status')\nplt.xlabel('Years',fontsize=xlabel_font)\nplt.ylabel('Count',fontsize=ylabel_font)\nplt.title('Loan Term', fontsize=title_font)\nplt.show()","1f9d1f33":"# Analyzing the \"int_rate\" column\nplt.figure(figsize = (16,6), dpi=120)\nsns.countplot(x = np.rint(loan_df['int_rate']),data=loan_df)\nplt.xlabel(\"Interest % Rate\", fontsize=12)\nplt.ylabel(\"Count\", fontsize=12)\nplt.title(\"Interest Rate Normal Distribuition\", fontsize=20)\nplt.show()","7423818a":"# Analyzing the \"dti\" column\nplt.figure(figsize=(16,16), dpi=120)\n\nplt.subplot(2,2,1)\ng = sns.distplot(loan_df[\"dti\"])\ng.set_xlabel(\"Debit Income Ratio\", fontsize = xlabel_font)\ng.set_ylabel(\"Distribution\", fontsize = xlabel_font)\ng.set_title(\"Debit Income Ratio Distribuition\", fontsize = title_font)\n\nplt.subplot(2,2,2)\ng1 = sns.violinplot(y=\"dti\", data=loan_df, inner=\"quartile\", palette=\"hls\")\ng1.set_xlabel(\"\", fontsize = xlabel_font)\ng1.set_ylabel(\"Debit Income Ratio\", fontsize = ylabel_font)\ng1.set_title(\"Debit Income Ratio Distribuition\", fontsize= title_font)\n\nplt.subplot(2,2,3)\ng2 = sns.boxplot(x='dti', data=loan_df, orient='v')\ng2.set_xlabel(\"\", fontsize = xlabel_font)\ng2.set_ylabel(\"Debit Income Ratio\", fontsize = ylabel_font)\ng2.set_title(\"Debit Income Ratio Distribuition\", fontsize= title_font)\n\nplt.show()","e8e60a2c":"q = loan_df[\"loan_amnt\"].quantile(0.9)\nloan_df = loan_df[loan_df[\"loan_amnt\"] < q] \nloan_df[\"loan_amnt\"].describe()","af586c84":"# Analyzing the \"loan_amnt\" column\nplt.figure(figsize=(16,16), dpi=120)\n\nplt.subplot(2,2,1)\ng = sns.distplot(loan_df[\"loan_amnt\"])\ng.set_xlabel(\"Amount\", fontsize = xlabel_font)\ng.set_ylabel(\"Distribution\", fontsize = xlabel_font)\ng.set_title(\"Loan Amount Distribuition\", fontsize = title_font)\n\nplt.subplot(2,2,2)\ng1 = sns.violinplot(y=\"loan_amnt\", data=loan_df, inner=\"quartile\", palette=\"hls\")\ng1.set_xlabel(\"\", fontsize = xlabel_font)\ng1.set_ylabel(\"Amount\", fontsize = ylabel_font)\ng1.set_title(\"Loan Amount Distribuition\", fontsize= title_font)\n\nplt.subplot(2,2,3)\ng2 = sns.boxplot(x='loan_amnt', data=loan_df, orient='v')\ng2.set_xlabel(\"\", fontsize = xlabel_font)\ng2.set_ylabel(\"Loan Amount\", fontsize = ylabel_font)\ng2.set_title(\"Loan Amount Distribuition\", fontsize= title_font)\n\nplt.show()","efa057dd":"loan_df = loan_df[loan_df['int_rate'] <= 22]\nloan_df[\"int_rate\"].describe()","7842ed98":"# Analyzing the \"int_rate\" column\nplt.figure(figsize=(16,16), dpi=120)\n\nplt.subplot(2,2,1)\ng = sns.distplot(loan_df[\"int_rate\"])\ng.set_xlabel(\"Interest Rate\", fontsize = xlabel_font)\ng.set_ylabel(\"Distribution\", fontsize = xlabel_font)\ng.set_title(\"Interest Rate Distribuition\", fontsize = title_font)\n\nplt.subplot(2,2,2)\ng1 = sns.violinplot(y=\"int_rate\", data=loan_df, inner=\"quartile\", palette=\"hls\")\ng1.set_xlabel(\"\", fontsize = xlabel_font)\ng1.set_ylabel(\"Interest Rate\", fontsize = ylabel_font)\ng1.set_title(\"Interest Rate Distribuition\", fontsize= title_font)\n\nplt.subplot(2,2,3)\ng2 = sns.boxplot(x='int_rate', data=loan_df, orient='v')\ng2.set_xlabel(\"\", fontsize = xlabel_font)\ng2.set_ylabel(\"Interest Rate\", fontsize = ylabel_font)\ng2.set_title(\"Interest Rate Distribuition\", fontsize= title_font)\n\nplt.show()","ce85ca4c":"q = loan_df[\"annual_inc\"].quantile(0.948)\nloan_df = loan_df[loan_df[\"annual_inc\"] < q]\nloan_df[\"annual_inc\"].describe()","6c82ea27":"# Analyzing the \"annual_inc\" column\nplt.figure(figsize=(16,16), dpi=120)\n\nplt.subplot(2,2,1)\ng = sns.distplot(loan_df[\"annual_inc\"])\ng.set_xlabel(\"Annual Income\", fontsize = xlabel_font)\ng.set_ylabel(\"Distribution\", fontsize = xlabel_font)\ng.set_title(\"Annual Income Distribuition\", fontsize = title_font)\n\nplt.subplot(2,2,2)\ng1 = sns.violinplot(y=\"annual_inc\", data=loan_df, inner=\"quartile\", palette=\"hls\")\ng1.set_xlabel(\"\", fontsize = xlabel_font)\ng1.set_ylabel(\"Annual Income\", fontsize = ylabel_font)\ng1.set_title(\"Annual Income Distribuition\", fontsize= title_font)\n\nplt.subplot(2,2,3)\ng2 = sns.boxplot(x='annual_inc', data=loan_df, orient='v')\ng2.set_xlabel(\"\", fontsize = xlabel_font)\ng2.set_ylabel(\"Annual Income\", fontsize = ylabel_font)\ng2.set_title(\"Annual Income Distribuition\", fontsize= title_font)\n\nplt.show()","0ad91274":"plt.figure(figsize=(12,20))\nsns.boxplot(data =loan_df, y='purpose', x='loan_amnt', hue ='loan_status')\nplt.xlabel('Loan Amount',fontsize=xlabel_font+6)\nplt.ylabel('Purpose',fontsize=ylabel_font+6)\nplt.title('Purpose vs Loan Amount',fontsize=title_font)\nplt.show()\n","f7600631":"# ['Employment Length vs Loan Amount']\n\nloanstatus=loan_df.pivot_table(index=['loan_status','purpose','emp_length'],values='loan_amnt',\n                               aggfunc=('count')).reset_index()\n\nloanstatus=loan_df.loc[loan_df['loan_status']=='Charged Off']\n\nplt.figure(figsize=(12, 26),dpi=120)\nsns.boxplot(y='emp_length', x='loan_amnt', hue='purpose', data=loanstatus)\nplt.title('Employment Length vs Loan Amount for different pupose of Loan',fontsize=title_font)\nplt.ylabel('Employment Length',fontsize=xlabel_font)\nplt.xlabel('Loan Amount',fontsize=ylabel_font)\nplt.show()","ab33bbd3":"plt.figure(figsize=(16,16),dpi=120)\nplt.figure(figsize=(20,20))\nsns.set_context(font_scale=2)\nsns.heatmap(loan_df.corr(), annot=False, cmap='bwr', square=True, linewidths=0.8)\nplt.show()","6ee12495":"# ['dti']\nbins = [0, 5, 10, 15, 20, 30]\nslot = ['0-5', '5-10', '10-15', '15-20', '20 and above']\nloan_df['dti_range'] = pd.cut(loan_df['dti'], bins, labels=slot)\ntest_2008['dti_range'] = pd.cut(test_2008['dti'], bins, labels=slot)\n\n# ['loan_amnt']\nbins = [0, 5000, 10000, 15000, 20000, 25000 ,40000]\nslot = ['0-5000', '5000-10000', '10000-15000', '15000-20000', '20000-25000','25000 and above']\nloan_df['loan_amnt_range'] = pd.cut(loan_df['loan_amnt'], bins, labels=slot)\ntest_2008['loan_amnt_range'] = pd.cut(test_2008['loan_amnt'], bins, labels=slot)\n\n# ['annual_inc']\nbins = [0, 25000, 50000, 75000, 100000, 1000000]\nslot = ['0-25000', '25000-50000', '50000-75000', '75000-100000', '100000 and above']\nloan_df['annual_inc_range'] = pd.cut(loan_df['annual_inc'], bins, labels=slot)\ntest_2008['annual_inc_range'] = pd.cut(test_2008['annual_inc'], bins, labels=slot)\n\n# ['int_rate']\nbins = [0, 7.5, 10, 12.5, 15,20]\nslot = ['0-7.5', '7.5-10', '10-12.5', '12.5-15', '15 and above']\nloan_df['int_rate_range'] = pd.cut(loan_df['int_rate'], bins, labels=slot)\ntest_2008['int_rate_range'] = pd.cut(test_2008['int_rate'], bins, labels=slot)","ff297e8f":"cols = ['loan_amnt_range','purpose','emp_length','grade','int_rate_range','term','annual_inc_range',\n        'loan_status','dti', 'verification_status','home_ownership', 'dnmcp']","89cde602":"test_2008_df = test_2008[cols]\ntrain_test_data = loan_df[loan_df.issue_yr != 2008]  \ndf = train_test_data[cols]","c47097e8":"new_df = df.assign(\n    loan_amnt_range = df.loan_amnt_range.astype('category').cat.codes,\n    purpose = df.purpose.astype('category').cat.codes,\n    emp_length = df.emp_length.astype('category').cat.codes,\n    grade = df.grade.astype('category').cat.codes,\n    int_rate_range = df.int_rate_range.astype('category').cat.codes,\n    term = df.term.astype('category').cat.codes,\n    annual_inc_range = df.annual_inc_range.astype('category').cat.codes,\n    home_ownership = df.home_ownership.astype('category').cat.codes,\n    verification_status = df.verification_status.astype('category').cat.codes\n)","8ff6a4cf":"# Train-test split\nX = new_df.drop(['loan_status'],axis=1)\nX = preprocessing.normalize(X)\ny = new_df['loan_status']\n","6eec7e1c":"y_original = y  ","ca522cef":"Y = y_original.astype('category').cat.codes ","18a5d505":"X_train,X_test,y_train,y_test = train_test_split(X,Y, test_size = 0.2,random_state = 42)","fb1c3ba6":"print(\"----------------------------Logistic Regression------------------------------\")\n\nl_model = LogisticRegression()\nl_model.fit(X_train,y_train)\nl_score = cross_val_score(l_model,X_train,y_train,cv=10)\ny_pred = l_model.predict(X_test)\n\nprint(classification_report(y_pred,y_test))\nprint(\"\\n\\n Confusion Matrix\\n\")\nprint(confusion_matrix(y_pred,y_test))\nprint() \nprint(\"Model Accuracy Avg: \", l_score.mean()*100)\nprint(\"Test Accuracy: \",accuracy_score(y_pred,y_test)*100)","ce31722b":"print(\"----------------------------Stochastic Gradient Descent------------------------------\")\n\nsgd_model = SGDClassifier(class_weight='balanced', loss='modified_huber')\nsgd_model.fit(X_train,y_train)\nsgd_score = cross_val_score(sgd_model,X_train,y_train,cv=10)\ny_pred = sgd_model.predict(X_test)\n\nprint(classification_report(y_pred,y_test))\nprint(\"\\n\\n Confusion Matrix\\n\")\nprint(confusion_matrix(y_pred,y_test))\nprint() \nprint(\"Model Accuracy Avg: \", l_score.mean()*100)\nprint(\"Test Accuracy: \",accuracy_score(y_pred,y_test)*100)","e10b6c73":"# print(\"----------------------------Stochastic Gradient Descent with Bootstrap Aggregation------------------------------\")\n\n# seed = 8\n# kfold = model_selection.KFold(n_splits = 2, random_state = seed) \n\n\n# # initialize the base classifier \n# base_cls = SGDClassifier(class_weight='balanced',loss='modified_huber') \n  \n# # no. of base classifier \n# num_est = 800 #400 , 600, 700, 1000\n  \n# # bagging classifier \n# sgdl_model = BaggingClassifier(base_estimator = base_cls, \n#                           n_estimators = num_est, \n#                           random_state = seed) \n\n# sgdl_model.fit(X_train,y_train)\n\n# y_pred = sgdl_model.predict(X_test)\n# prob_score = sgdl_model.predict_proba(X_test)\n\n# print(\"\\nConfusion Matrix\\n\")\n# print(confusion_matrix(y_test,y_pred))\n# print() \n# print(\"Accuracy: \",accuracy_score(y_test,y_pred)*100)","53c8abc2":"test_2008_df = test_2008_df.assign(\n    loan_amnt_range = test_2008_df.loan_amnt_range.astype('category').cat.codes,\n    purpose = test_2008_df.purpose.astype('category').cat.codes,\n    emp_length = test_2008_df.emp_length.astype('category').cat.codes,\n    grade = test_2008_df.grade.astype('category').cat.codes,\n    int_rate_range = test_2008_df.int_rate_range.astype('category').cat.codes,\n    term = test_2008_df.term.astype('category').cat.codes,\n    annual_inc_range = test_2008_df.annual_inc_range.astype('category').cat.codes,\n    home_ownership = test_2008_df.home_ownership.astype('category').cat.codes,\n    verification_status = test_2008_df.verification_status.astype('category').cat.codes\n) \n\ntest_q1 = test_2008_df[test_2008.issue_qtr == 1]\ntest_q2 = test_2008_df[test_2008.issue_qtr == 2]\ntest_q3 = test_2008_df[test_2008.issue_qtr == 3]\ntest_q4 = test_2008_df[test_2008.issue_qtr == 4]","9b418688":"lr_test_score = []\nsgd_test_score = [] ","bb12d39c":"X1 = test_q1.drop(['loan_status'],axis=1)\nX1 = preprocessing.normalize(X1)\ny1 = test_q1['loan_status']\nprint(\"Testing Data: \", test_q1.shape[0])\n\n# Logistic Regression Model\ny_pred =  cross_val_predict(l_model,X1,y1, cv=10)\nacc = accuracy_score(y1,y_pred)\nlr_test_score.append(acc)\nprint(\"\\nLogistic Regression : \", acc*100)\n\n# Logistic Regression Model\ny_pred =  cross_val_predict(sgd_model,X1,y1, cv=10)\nacc = accuracy_score(y1,y_pred)\nlr_test_score.append(acc)\nprint(\"\\nSGD: \", acc*100)","953f12e9":"X2 = test_q2.drop(['loan_status'],axis=1)\nX2 = preprocessing.normalize(X2)\ny2 = test_q2['loan_status']\nprint(\"Testing Data: \", test_q2.shape[0])\n\n# Logistic Regression Model\ny_pred =  cross_val_predict(l_model,X2,y2, cv=10)\nacc = accuracy_score(y2,y_pred)\nlr_test_score.append(acc)\nprint(\"\\nLogistic Regression : \", acc*100)\n\n# Logistic Regression Model\ny_pred =  cross_val_predict(sgd_model,X2,y2, cv=10)\nacc = accuracy_score(y2,y_pred)\nlr_test_score.append(acc)\nprint(\"\\nSGD: \", acc*100)","1934376e":"X3 = test_q3.drop(['loan_status'],axis=1)\nX3 = preprocessing.normalize(X3)\ny3 = test_q3['loan_status']\nprint(\"Testing Data: \", test_q3.shape[0])\n\n# Logistic Regression Model\ny_pred =  cross_val_predict(l_model,X3,y3, cv=10)\nacc = accuracy_score(y3,y_pred)\nlr_test_score.append(acc)\nprint(\"\\nLogistic Regression : \", acc*100)\n\n# Logistic Regression Model\ny_pred =  cross_val_predict(sgd_model,X3,y3, cv=10)\nacc = accuracy_score(y3,y_pred)\nlr_test_score.append(acc)\nprint(\"\\nSGD: \", acc*100)","26a63d72":"X4 = test_q3.drop(['loan_status'],axis=1)\nX4 = preprocessing.normalize(X4)\ny4 = test_q3['loan_status']\nprint(\"Testing Data : \", test_q4.shape[0])\n\n# Logistic Regression Model\ny_pred =  cross_val_predict(l_model,X4,y4, cv=10)\nacc = accuracy_score(y4,y_pred)\nlr_test_score.append(acc)\nprint(\"\\nLogistic Regression : \", acc*100)\n\n# Logistic Regression Model\ny_pred =  cross_val_predict(sgd_model,X4,y4, cv=10)\nacc = accuracy_score(y4,y_pred)\nlr_test_score.append(acc)\nprint(\"\\nSGD: \", acc*100)","82e22f86":"###  Test for 2008 Quarter 1","60fe4dc3":"## Visualization & Outliers Removal\n    NOTE: Data preprocessing is done after the visualization of data on various columns","8ea7c91b":"## Univariate Analysis","cbbc2340":"## Model Development","c5e59e60":"###  Test for 2008 Quarter 4","44cbcb7b":"## Testing models against data for year 2008 from Quarters 1 to 4\n","e433b7e7":"### Outlier Removal","38e0226c":"###  Test for 2008 Quarter 2","b51001c7":"## Conclusion from Visualization\n### Target Variable\n    Loan Status\n\n### Major variables to consider for loan prediction:\n    Loan Amount\n    Purpose of Loan\n    Employment Length\n    Grade\n    Interest Rate\n    Term\n    Annual Income\n    Debit to Income Ratio(dti)\n    Verification Status\n    Home Ownership\n    Does Not Meet Credit Policy","d3d3eed0":"## Exploratory Data Analysis\n\n    NOTE: This has been done after data visualization\n\nThere are four categories for 'loan_status' and the data for the two which are \"Does not meet the credit policy\" are very less in numbers. It can be renamed to two categories, i.e. \"Fully Paid\" and \"Charged Off\". This will improve the model accuracy. Creating separate column for \"Does Not Meet Credit Policy\".","9ad77d73":"##  Binning","344c0230":"###  Test for 2008 Quarter 3","8a2785aa":"## Correation","b357652a":"### Outlier removal","18068257":"## Bivariate Analysis "}}