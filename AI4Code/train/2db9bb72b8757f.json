{"cell_type":{"5fbccb8c":"code","4ea08211":"code","f87aba7b":"code","b987ad69":"code","fbd5f56e":"code","3a893239":"code","a8c0182c":"code","a99f2e2c":"code","8a49e243":"code","65a75e81":"code","cf1687e3":"code","3c34b049":"code","a8f3f3e0":"code","3a9ffee4":"code","f7485f02":"code","52b942b7":"code","61d6fc76":"code","54277dec":"code","26e89b3c":"code","b203ca36":"code","ff0971f6":"code","9900b94e":"code","aceb209d":"code","db980370":"code","b745ec03":"code","e7457e33":"code","c688b591":"code","7dfcd344":"code","a165bdb8":"code","b55f1954":"code","84a749ab":"code","31539f0d":"code","b6394d46":"code","2fb35c85":"code","a5dd33bd":"code","fee6629d":"code","37c3b9d4":"code","e0268a65":"code","aed97cb0":"code","d9601a90":"code","3b781986":"code","1306f41c":"code","b7d99f74":"code","ed302c38":"code","d9c5830d":"code","9de31b38":"code","cfbf5500":"code","42d32666":"code","ca5a1e12":"code","a0f2edcd":"code","f1c6a51f":"code","40244061":"code","056be1e3":"code","e78d40a7":"code","3e6b222b":"code","dc4feedf":"code","7316e8cb":"code","2adb788a":"code","4f0ac948":"code","87fde523":"code","6e2008fb":"code","c7a3279d":"code","c339bb0a":"code","5d10f731":"code","f72b7fcd":"code","54f52879":"code","aecd620d":"code","c5f74a3b":"code","5d9a0419":"code","9bb1815d":"code","eb5c6150":"code","08b13661":"markdown","164dd22c":"markdown","3a122434":"markdown","4df8c9fd":"markdown","75341bf1":"markdown","707a1805":"markdown","ecf36ea6":"markdown","1c5b98b9":"markdown","44f2bc8b":"markdown","a8fbb2ca":"markdown","8dc232d4":"markdown","28312f2b":"markdown"},"source":{"5fbccb8c":"import numpy as np","4ea08211":"data = [1, 2, 3, 4]","f87aba7b":"arr = np.array(data)\narr","b987ad69":"data2 = [[10,20,30], [40,50,60], [70,80,90]]","fbd5f56e":"arr2 = np.array(data2)\narr2","3a893239":"arr2[0]","a8c0182c":"arr2[0][1]","a99f2e2c":"range_data = np.arange(10,20)","8a49e243":"range_data","65a75e81":"np.arange(0,100,3)","cf1687e3":"# The reshape function is used to convert the array to a matrix.\nrange_data.reshape(2,5)","3c34b049":"np.zeros(10)","a8f3f3e0":"np.ones(10)","3a9ffee4":"np.zeros((2,2)) # To create a 2x2 matrix, we define a tuple of the matrix dimensions into the zeros function.","f7485f02":"np.ones((3,5))","52b942b7":"np.linspace(0,100,5) # The linspace function is used to divide a range of numbers into equal parts.","61d6fc76":"np.eye(3) # Creates a 3x3 unit matrix.","54277dec":"np.random.choice(data, 2) # It selects 2 samples from data series with replacement.","26e89b3c":"np.random.choice(data, 2, replace=False) # It selects 2 samples from data series without replacement.","b203ca36":"np.random.randint(0,10) # Returns one random value in the 0-10 range.","ff0971f6":"np.random.randint(0,10, 3) # Returns 3 values as array in the 0-10 range.","9900b94e":"np.random.rand(3) # Returns 3 values as array in the 0-1 range.","aceb209d":"# Random Number Generating With Standart Normal Distribution (Mean=0, Standart deviation=1)\n\nnp.random.randn(5)","db980370":"# Random Number Generating With Standart Normal Distribution 2 (Mean=0, Standart deviation=1)\n\nnp.random.standard_normal(5)","b745ec03":"# Random Number Generating With Normal Distribution\n\nnp.random.normal(1,3,10) # It generates 10 numbers with an average of 1 and a standard deviation of 3.","e7457e33":"# Random Number Generating With Binomial Distribution (n: number of results (1 or 0 etc.), p: success rate)\n\nnp.random.binomial(6, 0.17, 5)","c688b591":"# Random Number Generating With Negative Binomial Distribution\n\nnp.random.binomial(5, 0.2, 5)","7dfcd344":"# Random Number Generating With Uniform Distribution\n\nnp.random.uniform(1, 10, 15)","a165bdb8":"# Random Number Generating With Poisson Distribution\n\nnp.random.poisson(5, 10)","b55f1954":"# Random Number Generating With Geometric Distribution\n\nnp.random.geometric(0.5, 10)","84a749ab":"# Random Number Generating With Hypergeometric Distribution\n\nnp.random.hypergeometric(3, 7, 3, 10)","31539f0d":"# Random Number Generating With Exponential Distribution\n\nnp.random.exponential(0.25, 5)","b6394d46":"# Random Number Generating With Lognormal Distribution\n\nnp.random.lognormal(5, 0.45, 4)","2fb35c85":"# Random Number Generating With Weibull Distribution\n\nnp.random.weibull(0.10, 6)","a5dd33bd":"# Random Number Generating With Beta Distribution (a: alpha, b: beta)\n\nnp.random.beta(2, 3, 5)","fee6629d":"# Random Number Generating With Gamma Distribution\n\nnp.random.gamma(5, 5, 5)","37c3b9d4":"# Random Number Generating With Chi-Square Distribution (df: degrees of freedom)\n\nnp.random.chisquare(3, 5)","e0268a65":"my_array = np.random.randint(0, 100, 20)\nmy_array","aed97cb0":"my_array.size","d9601a90":"my_array.shape","3b781986":"my_array.dtype","1306f41c":"my_array.max()","b7d99f74":"my_array.min()","ed302c38":"my_array.mean()","d9c5830d":"my_array.std()","9de31b38":"my_array.var()","cfbf5500":"my_array.sum()","42d32666":"my_array.argmax() # Returns the index of the max value.","ca5a1e12":"my_array.argmin() # Returns the index of the min value.","a0f2edcd":"my_array.sort()\nmy_array","f1c6a51f":"detArray = np.random.randint(0,100,25)","40244061":"detArray = detArray.reshape(5,5)\ndetArray","056be1e3":"np.linalg.det(detArray)","e78d40a7":"arr = np.arange(1,10)","3e6b222b":"# To copy an array independently:\narr2 = arr.copy()","dc4feedf":"arr[:3] = 10 # Replaces the first 3 values \u200b\u200bof the arr variable with 10.","7316e8cb":"arr2 > 5","2adb788a":"# To bring values greater than 5 in array:\narr2[arr2>5]","4f0ac948":"mat = np.arange(1,21).reshape(5,4)","87fde523":"# To see the first 2 columns of the mat matrix:\nmat[:,:2]","6e2008fb":"mat[:3, :2] # first 2 columns of the first 3 rows","c7a3279d":"mat[:2] # all columns of the first 2 rows","c339bb0a":"arr1 = np.array([1,2,3,4,5])","5d10f731":"arr2 = np.array([6,7,8,9,0])","f72b7fcd":"arr1 + arr2","54f52879":"arr2 - arr1","aecd620d":"arr1 * arr2","c5f74a3b":"arr2 \/ arr1","5d9a0419":"arr1 * 3","9bb1815d":"arr2 + 10","eb5c6150":"np.sqrt(arr2)","08b13661":"Note: If copying is done as arr = arr2, the arrays be interdependent. That means, any changes made to arr2 also affect arr.","164dd22c":"### Basic Operators in Arrays","3a122434":"### Some Probability Distributions Functions","4df8c9fd":"### Performing Transactions on Arrays","75341bf1":"* standart normal --> np.random.standard_normal(size)\n* normal (gaussian) --> np.random.normal(loc, scale, size)\n* binomial --> np.random.binomial(n, p, size)\n* negative binomial --> np.random.negative_binomial(n, p, size)\n* multinomial --> np.random.multinomial(n, pvals, size)\n* uniform --> np.random.uniform(low, high, size)\n* poisson --> np.random.poisson(lam, size)\n* geometric --> np.random.geometric(p, size)\n* hypergeometric --> np.random.hypergeometric(ngood, nbad, nsample, size)\n* exponential --> np.random.exponential(scale, size)\n* lognormal --> np.random.lognormal(mean, cosv, size)\n* weibull --> np.random.weibull(a, size)\n* beta --> np.random.beta(a, b, size)\n* gamma --> np.random.gamma(shape, scale, size)\n* chisquare --> np.random.chisquare(df, size)\n\nhttps:\/\/docs.scipy.org\/doc\/numpy-1.15.0\/reference\/routines.random.html","707a1805":"# Basic **NumPy** for Data Scientist Candidates","ecf36ea6":"### Summary Information","1c5b98b9":"### Determinant","44f2bc8b":"The arrays include only same type of data.","a8fbb2ca":"### Random Sample Selection","8dc232d4":"The randint function returns integer values, and the rand function returns decimal.","28312f2b":"### Random Number Generating"}}