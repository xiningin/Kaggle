{"cell_type":{"b45fc64e":"code","7e5c4d73":"code","7e9b50e0":"code","1a30af97":"code","c8055444":"code","0f167a56":"code","78d9f4ac":"code","1a1d4b7d":"markdown","d6b2722a":"markdown"},"source":{"b45fc64e":"!mkdir -p  \/root\/.cache\/torch\/hub\/checkpoints\n!mkdir -p  \/root\/.cache\/huggingface\/transformers\n!mkdir -p  .\/detoxify\n!cp -r ..\/input\/detoxify-sourcemodels\/detoxify .\n!pip install -q .\/detoxify\n!rm -r .\/detoxify\n!cp -r ..\/input\/detoxify-sourcemodels\/torch\/hub\/checkpoints \/root\/.cache\/torch\/hub\n!cp -r ..\/input\/detoxify-sourcemodels\/huggingface\/transformers \/root\/.cache\/huggingface\n\nimport os\nos.environ[\"TRANSFORMERS_OFFLINE\"] = \"1\"","7e5c4d73":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import Ridge\nimport lightgbm as lgb\nimport xgboost as xgb\n\nfrom detoxify import Detoxify\n\nfrom scipy.stats import rankdata\n\nimport pickle","7e9b50e0":"def chunks(lst, n):\n    \"\"\"Yield successive n-sized chunks from lst.\"\"\"\n    for i in range(0, len(lst), n):\n        yield lst[i:i + n]\n\n\ndef get_pretrained_detoxify_model ( model_type, device):\n    detox = Detoxify(model_type= model_type, device=device)\n    return detox\n\n\ndef detoxify_predict (model_type, texts, batch_size, device):\n    model = get_pretrained_detoxify_model ( model_type, device)\n    \n    for i ,chunk in enumerate(chunks(texts, batch_size)):\n        if i == 0:\n            results = pd.DataFrame( model.predict(chunk) )\n        else:\n            results = results.append(pd.DataFrame( model.predict(chunk) ))  \n\n    results.columns = [f\"{model_type}_{c}\" for c in results.columns ]        \n            \n    return results.reset_index(drop = True)","1a30af97":"def tf_idf_feature (texts, feature_name, path, folds=5):\n    pred = np.zeros( (len(texts), ) )\n    for fold in range(folds):\n        model = pickle.load(open(f\"{path}\/{feature_name}_{fold}.pkl\", 'rb'))\n        vec = pickle.load(open(f\"{path}\/{feature_name}_vec_{fold}.pkl\", 'rb'))\n        X = vec.transform ( texts )\n        pred += model.predict_proba ( X )[:,1]\n    \n    return pred\/folds","c8055444":"df_submisison = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv\")\n\ntexts = list(df_submisison[\"text\"].values)\n\n# Detoxify features\n\noriginal_small = detoxify_predict (\"original-small\", texts, device=\"cuda\", batch_size=64 ) \nunbiased_small = detoxify_predict (\"unbiased-small\", texts, device=\"cuda\", batch_size=64 ) \noriginal = detoxify_predict (\"original\", texts, device=\"cuda\", batch_size=64 )\nunbiased = detoxify_predict (\"unbiased\", texts, device=\"cuda\", batch_size=64 )\nmultilingual = detoxify_predict (\"multilingual\", texts, device=\"cuda\", batch_size=64 )\n\ndf_submisison = pd.concat ([df_submisison, original, unbiased, multilingual, original_small, unbiased_small], axis=1)\n\n# tf-idf features (jc)\n\nfeatures = [\"toxic\",\"severe_toxic\",\"obscene\",\"threat\",\"insult\",\"identity_hate\"]\npath = \"..\/input\/jrsotc-jc-tf-idf-fe\/\"\nfor feat in features:\n    feat_name = f\"jc_tfidf_{feat}\"\n    print(feat_name)\n    df_submisison[feat_name] = tf_idf_feature(texts, feat_name, path=path, folds=5)\n\ndf_submisison.head()\n","0f167a56":"def predict (df, model_path, model_name, cols):\n    pred = np.zeros ((df.shape[0]))\n    X = df [cols].values\n\n\n    for fold in range(5):\n        model = pickle.load(open(f\"{model_path}\/{model_name}_{fold}.pkl\", 'rb'))\n\n        pred += model.predict ( X )\n\n    \n    return pred","78d9f4ac":"cols = ['original_toxicity', 'original_severe_toxicity', \n        'unbiased_toxicity', 'unbiased_severe_toxicity', 'unbiased_identity_attack', 'unbiased_insult', \n        'multilingual_toxicity', 'multilingual_sexual_explicit', \n        'original-small_toxicity', \n        'unbiased-small_severe_toxicity', 'unbiased-small_obscene', \n        'jc_tfidf_toxic']\n\npred = np.zeros( (df_submisison.shape[0], ))\nfor col in cols:\n    pred += rankdata(df_submisison[col].values, method='ordinal')\n\ndf_submisison['rf_pred'] = pred\n\ndf_submisison['score'] = rankdata(pred, method='ordinal')\n\ndf_submisison[['comment_id', 'score']].to_csv(\"submission.csv\", index=False)\n\ndf_submisison.head()","1a1d4b7d":"### Predic","d6b2722a":"### Feature extraction"}}