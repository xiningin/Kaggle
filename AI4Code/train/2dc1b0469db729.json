{"cell_type":{"a869cfaa":"code","0931f3fb":"code","a8e16846":"code","2fc9103d":"code","6516bf3e":"code","87b6c423":"code","42484eb7":"code","5767e939":"code","f75108e1":"code","3c1386b4":"code","9cacdb1b":"code","e4231356":"code","ee928e7f":"code","82a4b8c5":"code","27847980":"code","fd683afe":"code","da0b4727":"code","91e1cb9f":"code","44e7a28b":"code","c541d88a":"code","3fab5d44":"code","23cad7ea":"code","cfe9da9c":"code","d3adcab2":"code","4d849ddb":"code","7f4cbef8":"code","cdba3283":"code","e311b4a4":"code","49b15e9d":"code","a946101d":"code","0f68660e":"code","3ac2bc10":"code","813ef378":"code","bfb85b2c":"code","452879c6":"code","b5f343cd":"code","9c323c85":"markdown","cf99f591":"markdown","8dc2a3f2":"markdown","726e3532":"markdown","6c1d44c4":"markdown","5f872071":"markdown","965826a2":"markdown","89c2acb0":"markdown","1f789490":"markdown","b81fff30":"markdown","459563ca":"markdown","14cff9a5":"markdown"},"source":{"a869cfaa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use(\"ggplot\")\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0931f3fb":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ngenderSubmission_df = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","a8e16846":"train_df.columns","2fc9103d":"train_df.head(3)","6516bf3e":"train_df.describe()","87b6c423":"train_df.info()","42484eb7":"\ndef bar_plot(variable):\n    \"\"\"\n    Get pandas categorical series and return plot the bar plot\n    \n    input: name of train_df column\n    \n    output: visualize categorical column for bar plot\n    \"\"\"\n    \n    #Get the data\n    var = train_df[variable]\n    \n    #Get value counts of each category\n    varVal = var.value_counts()\n    \n    #Visulize the categorical data\n    plt.figure(figsize=(9,3))\n    plt.bar(varVal.index,varVal)\n    plt.xticks(varVal.index, varVal.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    \n    print(\"{}: \\n {}\".format(variable,varVal))","5767e939":"categories = [\"Survived\",\"Pclass\",\"Sex\",\"SibSp\",\"Parch\",\"Embarked\"]\nfor c in categories:\n    bar_plot(c)","f75108e1":"categories2 = [\"Name\",\"Ticket\",\"Cabin\"]\nfor c in categories2:\n    print(c,\"\\n\",train_df[c].value_counts(),\"\\n\\n\")","3c1386b4":"def plot_hist(variable):\n    var = train_df[variable]\n    plt.figure(figsize = (9,3))\n    sns.histplot(var,bins = 50)\n    plt.ylabel(\"Frequency\")\n    plt.xlabel(variable)\n    plt.title(\"{} Distribituon with hist\".format(variable))\n    plt.show()","9cacdb1b":"numericals = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericals:\n    plot_hist(n)","e4231356":"#Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby(\"Sex\", as_index=False).mean().sort_values(by = \"Survived\",ascending=False)","ee928e7f":"train_df[[\"Pclass\",\"Survived\"]].groupby(\"Pclass\",as_index= False).mean().sort_values(by=\"Survived\",ascending=False)","82a4b8c5":"train_df[[\"SibSp\",\"Survived\"]].groupby(\"SibSp\",as_index= False).mean().sort_values(by=\"Survived\",ascending=False)","27847980":"train_df[[\"Parch\",\"Survived\"]].groupby(\"Parch\",as_index= False).mean().sort_values(by=\"Survived\",ascending=False)","fd683afe":"train_df[[\"Pclass\",\"Sex\",\"Survived\"]].groupby([\"Pclass\",\"Sex\"],as_index= False).mean().sort_values(by=\"Survived\",ascending=False)","da0b4727":"train_df[[\"Parch\",\"Survived\",\"Sex\"]].groupby([\"Parch\",\"Sex\"],as_index= False).mean().sort_values(by=\"Survived\",ascending=False)","91e1cb9f":"train_df[[\"SibSp\",\"Survived\",\"Sex\"]].groupby([\"SibSp\",\"Sex\"],as_index= False).mean().sort_values(by=\"Survived\",ascending=False)","44e7a28b":"def decet_outlier(df,features):\n    \"\"\"\n    Decet outlier rows for given df and columns for %25 and %75 percentiles\n    \n    df: Pandas DataFrame\n    \n    features: Column name\n    \n    \"\"\"\n    \n    outlier_indeces = []\n    \n    for c in features:\n        \n        #Q1 Calculation\n        \n        Q1 = np.percentile(df[c],25)\n\n\n        #Q3 Calculation\n        \n        Q3 = np.percentile(df[c],75)\n\n        #IQR Calculation\n        \n        IQR = Q3-Q1\n        \n        #Outlier Step\n        \n        outlier_step = IQR * 1.5\n        \n        #Detect outlier and their indeces\n        \n        outlier_list_col = df[(df[c]< Q1 - outlier_step) | (df[c]> Q3 + outlier_step)].index\n        \n        #Store indeces\n        \n        outlier_indeces.extend(outlier_list_col)\n        \n    outlier_indeces = Counter(outlier_indeces)\n    multiple_outliers = list(i for i, v in outlier_indeces.items() if v > 2)\n    \n    return multiple_outliers","c541d88a":"train_df.loc[decet_outlier(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","3fab5d44":"#Drop outliers\n\ntrain_df = train_df.drop(decet_outlier(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","23cad7ea":"train_df","cfe9da9c":"len_train_df = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)\ntrain_df","d3adcab2":"train_df.columns[train_df.isnull().any()]","4d849ddb":"train_df.isna().sum()","7f4cbef8":"train_df[train_df[\"Embarked\"].isna()]","cdba3283":"plt.figure(figsize= (9,6))\nsns.boxplot(x = \"Embarked\",y = \"Fare\",data = train_df)\nplt.show()","e311b4a4":"train_df.Embarked = train_df[\"Embarked\"].fillna(\"C\")","49b15e9d":"train_df[train_df[\"Embarked\"].isna()]","a946101d":"train_df[train_df.Fare.isna()]","0f68660e":"plt.figure(figsize= (9,6))\nsns.boxplot(x = \"Embarked\", y = \"Fare\",data = train_df)\nplt.show()\n","3ac2bc10":"plt.figure(figsize= (9,6))\nsns.boxplot(x = \"Pclass\", y = \"Fare\",data = train_df)\nplt.show()\n","813ef378":"train_df.groupby(\"Pclass\")[\"Fare\"].mean()[3]","bfb85b2c":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(train_df.groupby(\"Pclass\")[\"Fare\"].mean()[3])","452879c6":"train_df[train_df[\"Fare\"].isna()]","b5f343cd":"train_df.iloc[1033]","9c323c85":"<h2><a id = \"6\">Basic Data Analysis<\/a><\/h2>\n\n* Sex vs Survived\n\n* Pclass vs Survived\n\n* SibSp vs Survived\n\n* Parch vs Survived","cf99f591":"<h4><a id = \"4\">Categorical Variable<\/a><\/h4>","8dc2a3f2":"<h3><a id = \"10\">Fill Missing Values<\/a><\/h3>\n\n* Emarked has only 2 missing value\n* Fare has only 1 missing value","726e3532":"<ul>\n    <li>int64(5): PassengerId, Survived, Pclass, SibSp, Parch<\/li>\n        <li>float64(2): Age, Fare<\/li>\n        <li>object(5): Name, Sex, Ticket, Cabin, Embarked<\/li>\n\n\n    \n    \n<ul>","6c1d44c4":"<h3><a id = \"3\">Univariate Variable Analysis<\/a><\/h3>\n\n* Categorical Variable: Survived, Pclass, Name, Sex, Embarked, Cabin, Name, Ticket, SibSp and Parch\n\n* Numerical Variable: Fare, age and PassengerId","5f872071":"<h2><a id = \"1\">Load and Check the Data<\/a><\/h2<","965826a2":"<h3><a id = \"9\">Find Missing Values<\/a><\/h3>","89c2acb0":"<h2><a id = \"7\">Detect Outliers<\/a><\/h2>","1f789490":"<h2><a id = \"2\">Variable Description<\/a><\/h2>\n\n1. PassengerId: Unique id each passenger.\n1. Survived: Passenger who survived(1) or died(0).\n1. Pclass: Passenger class (1,2,3)\n1. Name: Name\n1. Sex: Passenger gender\n1. Age: Passenger age\n1. SibSp: Count of siblings\/spouses in ship for each person\n1. Parch: Count of parents\/childs in ship for each person\n1. Ticket: Ticket number\n1. Fare: Amount of ticket price\n1. Cabin: Cabin category\n1. Embarked: Entering location (C = Cherbourg, Q = Queenstown, S = Southampton)","b81fff30":"<h4><a id = \"5\">Numerical Variable<\/a><\/h4>","459563ca":"<h2><a id = \"8\">Missing Values<\/a><\/h2>\n\n* Find Missing Value\n* Fill Missing Values","14cff9a5":"<h1><b>INTRODUCTION<\/b><\/h1>\n\nTitanic disaster is an accident that occurred when a ship crashed into a glacier and caused loss of life. There are a total of 3257 people on the Titanic, with 2435 passengers and 892 crew members. After the disaster Titanic became the subject the populer culter -films, books etc.-. Now let's analyse the Titanic data.\n\n<p style = \"color:blue\">Content:<\/p>\n<ol>\n    <li><a href=\"#1\">Load and Check the Data<\/a><\/li>\n    <li><a href=\"#2\">Variable Description<\/a><\/li>\n    <ul>\n        <li><a href = \"#3\">Univariate Variable Analysis<\/a><\/li>\n        <ul>\n            <li><a href = \"#4\">Categorical Variable Analysis<\/a><\/li>\n            <li><a href = \"#5\">Numeric Variable Analysis<\/a><\/li>\n            <\/ul>\n    <\/ul>\n    <li><a href=\"#6\">Basic Data Analysis<\/a><\/li>\n    <li><a href=\"#7\">Outlier Detection<\/a><\/li>\n    <li><a href=\"#8\">Missing Values<\/a><\/li>\n    <ul>\n        <li><a href = \"#9\">Find Missing Values<\/a><\/li>\n                <li><a href = \"#10\">Fill Missing Values<\/a><\/li>\n    <\/ul>\n<\/ol>"}}