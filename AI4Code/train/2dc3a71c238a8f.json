{"cell_type":{"65578578":"code","db1b3ac0":"code","b41dc9ff":"code","7a5134e4":"code","d0e9457a":"code","2fe4253b":"code","bbbf0144":"code","3c6b5302":"code","a62ba5d5":"code","3d7bef62":"code","8ff8a34a":"code","68f503a7":"code","86c03ab9":"code","1a22e131":"code","1037f5a4":"code","eb11b22c":"markdown"},"source":{"65578578":"import tensorflow as tf\nimport matplotlib.pyplot as plt \nfrom matplotlib.image import imread \nimport os\nimport datetime","db1b3ac0":"IMAGE_SIZE = 224\nCHANNELS = 1\nDATADIR = '..\/input\/chest-xray-pneumonia\/chest_xray\/'\ntest_path = DATADIR + '\/test\/'\nvalid_path = DATADIR + '\/val\/'\ntrain_path = DATADIR + '\/train\/'\nBATCH_SIZE = 16\nCATEGORIES = [\"NORMAL\", \"PNEUMONIA\"]","b41dc9ff":"path = os.path.join(train_path,'NORMAL')\nf = os.path.join(path,os.listdir(path)[0])\nimg = imread(f)\nplt.imshow(img,cmap=\"gray\")","7a5134e4":"if CHANNELS == 1:\n    color_mode = \"grayscale\"\nelif CHANNELS == 3:\n    color_mode = \"rgb\"","d0e9457a":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(rescale = 1\/255)\ntrain_images = train_datagen.flow_from_directory(train_path,target_size=(IMAGE_SIZE,IMAGE_SIZE),class_mode=\"binary\",classes=CATEGORIES,color_mode=color_mode,batch_size=BATCH_SIZE)","2fe4253b":"test_datagen = ImageDataGenerator(rescale=1\/255)\ntest_images = test_datagen.flow_from_directory(test_path,target_size=(IMAGE_SIZE,IMAGE_SIZE),class_mode=\"binary\",classes=CATEGORIES,color_mode=color_mode,batch_size=BATCH_SIZE)","bbbf0144":"(IMAGE_SIZE,IMAGE_SIZE,CHANNELS)","3c6b5302":"base_model = tf.keras.applications.InceptionV3(weights=None, include_top=False,input_shape=(IMAGE_SIZE,IMAGE_SIZE,CHANNELS))","a62ba5d5":"callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss',patience=3)","3d7bef62":"x = base_model.output\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\noutput = tf.keras.layers.Dense(1,activation=tf.nn.sigmoid)(x)\n\nmodel = tf.keras.Model(inputs = base_model.input, outputs =output)\nmodel.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = 8e-05),loss='binary_crossentropy',metrics=['accuracy'])","8ff8a34a":"%load_ext tensorboard","68f503a7":"logdir = os.path.join(\"logs\", datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\"))\ntensorboard_callback = tf.keras.callbacks.TensorBoard(logdir, histogram_freq=1)","86c03ab9":"history = model.fit_generator(train_images,validation_data=test_images,epochs=100,steps_per_epoch=len(train_images)\/BATCH_SIZE,validation_steps=len(test_images)\/BATCH_SIZE, callbacks=[tensorboard_callback])","1a22e131":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nepochs = range(len(acc))\n\nfig = plt.figure(figsize=(10,6))\nplt.plot(epochs,acc,c=\"red\",label=\"Training\")\nplt.plot(epochs,val_acc,c=\"blue\",label=\"Validation\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.grid()","1037f5a4":"acc = history.history['accuracy']\nval_acc = history.history['val_loss']\n\nepochs = range(len(acc))\n\nfig = plt.figure(figsize=(10,6))\nplt.plot(epochs,acc,c=\"red\",label=\"Training\")\nplt.plot(epochs,val_acc,c=\"blue\",label=\"Validation\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.grid()","eb11b22c":"## Using the model Inception v3"}}