{"cell_type":{"6685e50f":"code","44219043":"code","39aab620":"code","f421833a":"code","4578239d":"code","bffd4335":"code","1a1b2032":"code","88d15cd4":"code","36ae8ad9":"code","fc9d142a":"code","a570e87b":"code","69c3b6db":"code","3b465d1a":"code","162aae5c":"code","f6a1b2aa":"code","94ee8f13":"code","3d903d5a":"code","326a3636":"code","492c0b61":"code","a60cef7e":"code","32d5e777":"code","a5e5f971":"markdown","528011c1":"markdown","532ff766":"markdown","3bd666a5":"markdown","5803a071":"markdown","30bc0ad0":"markdown"},"source":{"6685e50f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","44219043":"!pwd","39aab620":"import pandas as pd\nimport numpy as np\nimport re\nimport string\nfrom tqdm import tqdm\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS\n# from jupyterthemes import jtplot","f421833a":"# from sklearn.preprocessing import StandardScaler\n\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.metrics import precision_recall_curve, auc, roc_auc_score, roc_curve, recall_score\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk import ngrams\n\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.models import Sequential, Model\nfrom keras.layers import LSTM, Dense, TimeDistributed, Bidirectional, Embedding, Dropout, Flatten, Layer, Input\nfrom keras.optimizers import SGD, Adam, Adagrad, Adadelta, RMSprop\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nimport keras.backend as K","4578239d":"# set plot rc parameters\n\n# jtplot.style(grid=False)\nplt.rcParams['figure.facecolor'] = 'white'\nplt.rcParams['axes.facecolor'] = '#464646'\n#plt.rcParams['axes.edgecolor'] = '#FFFFFF'\nplt.rcParams['figure.figsize'] = 10, 7\nplt.rcParams['text.color'] = '#666666'\nplt.rcParams['axes.labelcolor'] = '#666666'\nplt.rcParams['axes.labelsize'] = 14\nplt.rcParams['axes.titlesize'] = 16\nplt.rcParams['xtick.color'] = '#666666'\nplt.rcParams['xtick.labelsize'] = 14\nplt.rcParams['ytick.color'] = '#666666'\nplt.rcParams['ytick.labelsize'] = 14\n\n# plt.rcParams['font.size'] = 16\n\nsns.color_palette('dark')\n%matplotlib inline\n\ntqdm.pandas()","bffd4335":"data_df = pd.read_csv('..\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv')","1a1b2032":"data_df.head()","88d15cd4":"data_df.shape","36ae8ad9":"data_df['sentiment'].value_counts()","fc9d142a":"# print 10 random reviews\nfor i in range(10):\n    idx = np.random.randint(1, 50001)\n    print('Review {}:'.format(i+1))\n    print('\\n\\n')\n    print(data_df.iloc[idx]['review'])\n    print('\\n')\n    print('*'*100)\n    print('\\n')","a570e87b":"# remove break symbol\ndef remove_break(text):\n    return re.sub(r'<br \/>', '', text)\n\n# remove punctuations\ndef remove_punct(text):\n    nopunct = ''\n    for c in text:\n        if c not in string.punctuation:\n            nopunct = nopunct + c\n    return nopunct\n\n# remove numbers\ndef remove_numbers(text):\n    return re.sub(r'[0-9]', '', text)\n\n# remove links\ndef remove_links(text):\n    return re.sub(r'http\\S+', '', text)\n\n# remove stop words\ndef remove_stop_words(word_list):\n\n    # stop words\n    stopwords_list = set(stopwords.words('english'))\n    # remove stop words\n    word_list = [word for word in word_list if word not in stopwords_list]\n    # stemming\n    \n    return ' '.join(word_list)\n\ndef get_root(word_list):\n    ps = PorterStemmer()\n    return [ps.stem(word) for word in word_list]\n\ndef clean_text(text):\n    text = remove_break(text)\n    text = remove_links(text)\n    text = remove_numbers(text)\n    text = remove_punct(text)\n    word_list = word_tokenize(text)\n    word_list = get_root(word_list)\n    \n    return ' '.join(word_list)","69c3b6db":"data_df['clean_review'] = data_df['review'].progress_apply(clean_text)","3b465d1a":"data_df.head()","162aae5c":"Xtrain, Xcv, Ytrain, Ycv = train_test_split(data_df['clean_review'], data_df['sentiment'], random_state=21, test_size=0.3)","f6a1b2aa":"Ytrain = Ytrain.map({'positive': 1, 'negative':0})\nYcv = Ycv.map({'positive': 1, 'negative':0})","94ee8f13":"# Tokenize our training data\ntokenizer = Tokenizer(num_words=20000, oov_token='<UNK>')\ntokenizer.fit_on_texts(Xtrain)\n\n# word to number and vice versa map\nword2num = tokenizer.word_index\nnum2word = {k:w for w, k in word2num.items()}\n\n# Encode training data sentences into sequences\ntrain_sequences = tokenizer.texts_to_sequences(Xtrain)\n\n# Get max training sequence length\nmaxlen = max([len(x) for x in train_sequences])\n\n# Pad the training sequences\ntrain_padded = pad_sequences(train_sequences, padding='post', truncating='post', maxlen=100)\n\n\ntest_sequences = tokenizer.texts_to_sequences(Xcv)\ntest_padded = pad_sequences(test_sequences, padding='post', truncating='post', maxlen=100)\n","3d903d5a":"class Attention(Layer):\n    def __init__(self,**kwargs):\n        super(Attention,self).__init__(**kwargs)\n\n    def build(self,input_shape):\n        self.W=self.add_weight(name=\"att_weight\",shape=(input_shape[-1],1),initializer=\"normal\")\n        self.b=self.add_weight(name=\"att_bias\",shape=(input_shape[1],1),initializer=\"zeros\")        \n        super(Attention, self).build(input_shape)\n\n    def call(self,x):\n        et=K.squeeze(K.tanh(K.dot(x,self.W)+self.b),axis=-1)\n        at=K.softmax(et)\n        at=K.expand_dims(at,axis=-1)\n        output=x*at\n        return K.sum(output,axis=1)\n\n    def compute_output_shape(self,input_shape):\n        return (input_shape[0],input_shape[-1])\n\n    def get_config(self):\n        return super(Attention,self).get_config()","326a3636":"inp = Input(shape=(100, ))\nx = Embedding(20000, 256, trainable=False)(inp)\nx = Bidirectional(LSTM(300, return_sequences=True, dropout=0.25,recurrent_dropout=0.25))(x)\nx = Attention()(x)\nx = Dense(256, activation=\"relu\")(x)\nx = Dropout(0.25)(x)\nx = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(inputs=inp, outputs=x)\n\nmodel.summary()","492c0b61":"model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nfile_path = 'model.hdf5'\nckpt = ModelCheckpoint(file_path, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\nearly = EarlyStopping(monitor=\"val_loss\", mode=\"min\", patience=1)","a60cef7e":"model.fit(train_padded, Ytrain, batch_size=1024, epochs=30, validation_data=(test_padded, Ycv), callbacks=[ckpt])","32d5e777":"# predict tags\nYcv_pred0 = model.predict(test_padded)\nYcv_pred = (Ycv_pred0 > 0.5).astype('int64')\n# print model performance metrics\nprint(\"Accuracy :\",metrics.accuracy_score(Ycv,Ycv_pred))\nprint(\"f1 score macro :\",metrics.f1_score(Ycv,Ycv_pred, average = 'macro'))\nprint(\"f1 scoore micro :\",metrics.f1_score(Ycv,Ycv_pred, average = 'micro'))\nprint(\"Hamming loss :\",metrics.hamming_loss(Ycv,Ycv_pred))\nfpr, tpr, thresh = roc_curve(Ycv, Ycv_pred0)\nprint(\"auc: \", auc(fpr,tpr))\nprint(\"Classification report: \\n\", metrics.classification_report(Ycv, Ycv_pred))\n\nfig, ax = plt.subplots(figsize=[10,7])\nax.set_title('Receiver Operating Characteristic trainning')\nax.plot(fpr,tpr,sns.xkcd_rgb['greenish cyan'])\nax.plot([0,1],[0,1],ls='--', c=sns.xkcd_rgb['red pink'])\nax.set_xlim([-0.01,1.01])\nax.set_ylim([-0.01,1.01])\nax.set_ylabel('True Positive Rate')\nax.set_xlabel('False Positive Rate')","a5e5f971":"## Text preprocessing","528011c1":"# IMDb movie reviews sentiment classification","532ff766":"## Split data","3bd666a5":"## Tokenize data and get sequences","5803a071":"## Initialize model","30bc0ad0":"## Read Data"}}