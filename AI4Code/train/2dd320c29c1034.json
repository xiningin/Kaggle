{"cell_type":{"8a3f4ee6":"code","dedc983d":"code","9772e97f":"code","6fe93e6f":"code","628e8d97":"code","0f007a0a":"code","c64ef10b":"code","ce870b40":"code","76d2152e":"code","9e3c3bb6":"code","591f2c34":"code","cb8211c3":"code","38e15207":"code","a8c6fbc9":"code","3d2ea139":"code","7b42963a":"code","0f627de0":"code","284a5c96":"code","68e17ddc":"code","44f4d94d":"code","0fd57495":"code","af65a721":"code","af0d8262":"code","51b72360":"code","d9dbb62c":"code","258336c3":"code","c67286f5":"code","c0660fdf":"code","df4d070f":"code","8e4acd1c":"code","9f25c2a9":"code","3269c25c":"code","bdade67d":"code","1c7abb23":"code","6fc85084":"code","f6b043c8":"code","4730f267":"code","8469b8cd":"code","3e2cfc53":"code","8e1d28ca":"code","2cf55e48":"code","8368a795":"code","8c5880a1":"code","6ea14406":"code","badb821d":"code","3b834267":"code","c53fbfeb":"code","ead46adc":"code","b2f28474":"code","7ccd7b4c":"code","b7fbf2fe":"code","55a1ab55":"code","afc5add2":"code","41248edb":"code","3587012c":"code","3a433c02":"code","675eb128":"code","17b09da4":"code","fc047385":"code","d6cd22d9":"code","8ff3b831":"code","42f1d90c":"code","bb8f0830":"code","34679739":"code","7e43fe02":"code","6163ff98":"code","d0ee4be5":"code","d33bea7f":"code","440e6814":"code","163663fd":"code","3979dea4":"code","29fe2ef1":"markdown","a799d6c0":"markdown","6d317c1a":"markdown","798c288e":"markdown","65310d86":"markdown","248d1b48":"markdown","1a0abbed":"markdown","a10dbeb2":"markdown","b42d9e80":"markdown","74d5d5d5":"markdown","71b552db":"markdown","d281aa7d":"markdown","1821734f":"markdown","51f430b6":"markdown","e3fe6cfe":"markdown"},"source":{"8a3f4ee6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nsns.set(font_scale = 1.2)\nimport tensorflow as tf\nfrom tensorflow.keras import regularizers\nfrom sklearn.metrics import r2_score\n# from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_log_error\nscaler = StandardScaler()\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn import linear_model\nfrom sklearn.metrics import r2_score,mean_squared_error\nfrom sklearn.model_selection import GridSearchCV","dedc983d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9772e97f":"df_train = pd.read_csv('\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/train.csv')\ndf_train.describe()","6fe93e6f":"df_train.describe()","628e8d97":"df_test=pd.read_csv('\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/test.csv')\ndf_test","0f007a0a":"df_train.isna().sum()","c64ef10b":"df_test.isna().sum()","ce870b40":"df_train.hist()","76d2152e":"table=pd.crosstab(df_train['Holiday'],df_train['Functioning Day'])","9e3c3bb6":"table","591f2c34":"# df_train= df_train[df_train['y']>0]","cb8211c3":"df_train.describe()","38e15207":"y=df_train['y'].copy()\ndf_train.drop(['y'],axis='columns',inplace=True)\ndf_train['y']=y","a8c6fbc9":"df_train.columns","3d2ea139":"df_test.columns","7b42963a":"data_all = pd.concat((df_train,df_test),ignore_index=True)","0f627de0":"data_all","284a5c96":"data_all[\"Date\"] = pd.to_datetime(data_all[\"Date\"],format=\"%d\/%m\/%Y\")\ndata_all[['Date']]","68e17ddc":"data_all['day']=data_all[\"Date\"].dt.day_name()\ndata_all['month']=data_all[\"Date\"].dt.month\n# data_all['year']=data_all[\"Date\"].dt.year","44f4d94d":"data_all","0fd57495":"# data_all['label_day_night']=data_all['Hour'].apply(lambda x : 0 if (x >20 or x<5) else(1))\n","af65a721":"data_all","af0d8262":"data_all.isna().sum()","51b72360":"data_all.columns","d9dbb62c":"# mapping_dictDay={'Monday':1,'Tuesday':2,'Wednesday':3,'Thursday':4,'Friday':5,'Saturday':6,'Sunday':7}\n# data_all['day']=data_all['day'].map(mapping_dictDay)\n\n","258336c3":"Mean_encoded_Seasons =data_all.groupby('Seasons')['y'].mean().to_dict()\ndata_all['Seasons']= data_all['Seasons'].map(Mean_encoded_Seasons)","c67286f5":"Mean_encoded_dew =data_all.groupby('month')['y'].mean().to_dict()\ndata_all['month']= data_all['month'].map(Mean_encoded_dew)","c0660fdf":"# Mean_encoded_Seasons =data_all.groupby('Holiday')['y'].mean().to_dict()\n# data_all['Holiday']= data_all['Holiday'].map(Mean_encoded_Seasons)","df4d070f":"# mapping_dictDay={'Monday':1,'Tuesday':2,'Wednesday':3,'Thursday':4,'Friday':5,'Saturday':6,'Sunday':7}\n# data_all['day']=data_all['day'].map(mapping_dictDay)","8e4acd1c":"# mapping_dictSeason={'Summer':4,'Spring':3,'Autumn':2,'Winter':1}\n# data_all['Seasons']=data_all['Seasons'].map(mapping_dictSeason)\n","9f25c2a9":"data_all","3269c25c":"data_all['day_cos'] = [np.cos(x * (2 * np.pi \/ 24)) for x in data_all['Hour']]\ndata_all['day_sin'] = [np.sin(x * (2 * np.pi \/ 24)) for x in data_all['Hour']]","bdade67d":"data_all['Seasons'].value_counts()","1c7abb23":"data_all['Holiday'].value_counts()","6fc85084":"data_all['Functioning Day'].value_counts()","f6b043c8":"data_all['day'].value_counts()","4730f267":"data_with_dummies= pd.get_dummies(data_all,columns=['Functioning Day','day','Holiday'],drop_first=True)\ndata_with_dummies","8469b8cd":"data_with_dummies.drop(['ID','Date','Dew point temperature(\ufffdC)','Snowfall (cm)','y'],axis='columns',inplace=True)\ndata_with_dummies['y']=y","3e2cfc53":"# 'ID','Wind speed (m\/s)','Snowfall (cm)','Holiday','Dew point temperature(\ufffdC)',","8e1d28ca":"# data_with_dummies.drop(['ID','Date','y','timestamp'],axis='columns',inplace=True)\n# data_with_dummies['y']=y","2cf55e48":"train_data= data_with_dummies[data_with_dummies['y'].notna()]\ntest_data= data_with_dummies[data_with_dummies['y'].isna()]","8368a795":"train_data.drop(['y'],axis='columns',inplace=True)\ntest_data.drop(['y'],axis=1,inplace=True)","8c5880a1":"train_data.head()","6ea14406":"test_data.head()","badb821d":"train_data.describe()","3b834267":"my_data = np.array(train_data)","c53fbfeb":"my_data.shape","ead46adc":"unscaled_inputs_all = my_data\ntargets_all = np.array(y)\ntargets_all.max()","b2f28474":"x_train,y_train = unscaled_inputs_all,targets_all.astype(np.int64)\n","7ccd7b4c":"import xgboost as xgb\nimport sklearn\n# sklearn.metrics.SCORERS.keys()","b7fbf2fe":"xg_reg = xgb.XGBRegressor(objective ='count:poisson', n_estimators = 1000,colsample_bylevel=1,\n             colsample_bynode=0.7, colsample_bytree=0.7,alpha=10,reg_lambda=10,gamma=10,max_depth=6, min_child_weight=168\n                          ,learning_rate=0.1,subsample=0.8, booster='gbtree',random_state=444)\nxg_reg.fit(x_train,y_train)\n","55a1ab55":"train_predictions = xg_reg.predict(x_train)\nr2_score(train_predictions,y_train)","afc5add2":"mean_squared_error(train_predictions,y_train)","41248edb":"index=df_train['Functioning Day']=='No'\n    \n    \ntrain_predictions[index]=0","3587012c":"train_predictions=np.where(train_predictions<0,0,train_predictions)\nmean_squared_log_error(train_predictions,y_train)**0.5","3a433c02":"predictions= xg_reg.predict(test_data)","675eb128":"predictions=predictions.astype(np.int32)","17b09da4":"predictions.shape","fc047385":"id=list(df_test['ID'])","d6cd22d9":"pred= pd.DataFrame()\npred['ID']=id\npred['y']=predictions\npred","8ff3b831":"pred.describe()","42f1d90c":"sum(pred['y']==0)","bb8f0830":"pred['function_day']=df_test['Functioning Day']","34679739":"pred","7e43fe02":"pred['function_day'].value_counts()","6163ff98":"pred['y'][pred['function_day']=='No']=0","d0ee4be5":"pred['y'][pred['y']==0].value_counts()","d33bea7f":"pred.drop('function_day',axis='columns',inplace=True)","440e6814":"#Bias correction\npred['y']=pred['y']*0.95","163663fd":"pred.describe()","3979dea4":"pred.to_csv('subxg.csv',index=False)","29fe2ef1":"### Generating predictions","a799d6c0":"### Getting dummies","6d317c1a":"### Train","798c288e":"### Model Fitting","65310d86":"##### Removing zeros from train_data y column","248d1b48":"### Converting data into arrays","1a0abbed":"\nreg:tweedie\ncount:poisson","a10dbeb2":"### We have some functioning days=No, Let's replace them by zero","b42d9e80":"### XG BOOST","74d5d5d5":"### Concatenation of train and test data to preprocess them in one shot","71b552db":"### Exporting csv submission file","d281aa7d":"### Exploratory data analysis","1821734f":"### Loading train and test data","51f430b6":"### Importing relevant libraries","e3fe6cfe":"### Separating train data from test data"}}