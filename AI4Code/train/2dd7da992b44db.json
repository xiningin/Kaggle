{"cell_type":{"0a76f9c1":"code","a1e27c4f":"code","aed9b9e2":"code","2a5dd869":"code","e7621ffe":"code","72d52a76":"code","2ef872ed":"code","3733fea5":"code","e033faac":"code","5ae27657":"code","e48ac6de":"code","339d31db":"code","7cbfac4e":"code","a3a10f58":"code","a772f3f7":"code","61019f9b":"code","1666799a":"code","bbee131f":"code","aa6c14a0":"code","3179549c":"code","90b6ed78":"code","097e51d6":"code","9ee71bac":"code","6fd5b16c":"code","1184af1b":"markdown","81c6e0a1":"markdown","5e8edb14":"markdown","9e085b08":"markdown","fc4df3d2":"markdown","84c1df42":"markdown","077441f7":"markdown","bc3e86ac":"markdown","e1690c03":"markdown"},"source":{"0a76f9c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sbn\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import KFold\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a1e27c4f":"train_data = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv')","aed9b9e2":"train_data.head()","2a5dd869":"train_data.describe()","e7621ffe":"train_data.shape","72d52a76":"train_data.describe(include='all')","2ef872ed":"for i in train_data.columns:\n    print(train_data[i].value_counts())","3733fea5":"plt.figure(figsize=(20,6))\nsbn.barplot(x='Province_State', y='ConfirmedCases', data=train_data)\nplt.ylim(0, 3000)\nplt.xticks(rotation=90)\n\nplt.figure(figsize=(20,6))\nsbn.barplot(x='Province_State', y='Fatalities', data=train_data)\nplt.ylim(0, 100)\nplt.xticks(rotation=90)\n","e033faac":"plt.figure(figsize=(20,6))\nsbn.barplot(x='Country_Region', y='ConfirmedCases', data=train_data)\nplt.ylim(0, 3000)\nplt.xticks(rotation=90)\n\nplt.figure(figsize=(20,6))\nsbn.barplot(x='Country_Region', y='Fatalities', data=train_data)\nplt.ylim(0, 100)\nplt.xticks(rotation=90)\n","5ae27657":"plt.figure(figsize=(20,6))\nsbn.barplot(x='Date', y='ConfirmedCases', data=train_data)\nplt.ylim(0, 3000)\nplt.xticks(rotation=90)\n\nplt.figure(figsize=(20,6))\nsbn.barplot(x='Date', y='Fatalities', data=train_data)\n# plt.ylim(0, 160)\nplt.xticks(rotation=90)","e48ac6de":"(train_data['Fatalities'].sum() \/ train_data['ConfirmedCases'].sum()) * 100","339d31db":"train_data['Date'] = pd.to_datetime(train_data['Date']).astype(int)\/ 10**9","7cbfac4e":"train_data = pd.get_dummies(train_data, columns=['Country_Region', 'Province_State'], dummy_na=True)","a3a10f58":"X = train_data.drop(['Id', 'ConfirmedCases', 'Fatalities'], axis = 1)\nY = train_data[['Fatalities', 'ConfirmedCases']]","a772f3f7":"def preprocessor(data):\n    ids = data['ForecastId']\n    frame = pd.get_dummies(data, columns = ['Country_Region', 'Province_State'], dummy_na = True).drop(['ForecastId'], axis = 1)\n    frame['Date'] = pd.to_datetime(frame['Date']).astype(int)\/ 10**9\n    return (ids, frame)\nids, test_x = preprocessor(pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv'))","61019f9b":"print(X.shape)\nprint(Y.shape)\nprint(test_x.shape)","1666799a":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n","bbee131f":"\ntrain_x, valid_x, train_y, valid_y = train_test_split(X, Y, test_size = .1)","aa6c14a0":"print(train_x.shape)\nprint(train_y.shape)","3179549c":"# model = RandomForestRegressor(n_estimators = 1000, random_state = 42)\n# model.fit(train_x, train_y)\nimport pickle\nfilename = '\/kaggle\/input\/corona-random-forest-model\/random_forest_model.sav'\nmodel = pickle.load(open(filename, 'rb'))","90b6ed78":"predicted = model.predict(valid_x)\npredicted = predicted.round()\nrmse = np.sqrt(mean_squared_error(predicted, valid_y))\nmae = mean_absolute_error(predicted, valid_y)\nprint(rmse, mae)","097e51d6":"submission = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/submission.csv')\noutput = pd.DataFrame(columns = submission.columns)\noutput['ForecastId'] = ids\npredicted = model.predict(test_x)\npredicted = predicted.round()\noutput[['ConfirmedCases', 'Fatalities']] = predicted\nprint(output)","9ee71bac":"# import pickle\n# filename = 'random_forest_model.sav'\n# pickle.dump(model, open(filename, 'wb'))\n \n# some time later...\n \n# load the model from disk\n# loaded_model = pickle.load(open(filename, 'rb'))\n# result = loaded_model.score(X_test, Y_test)\n# print(result)","6fd5b16c":"# import sklearn\n# help(sklearn.metrics)\n\noutput.to_csv('submission.csv', index = False)","1184af1b":"# Data Preparation","81c6e0a1":"** It states the 4% of total confirmed population reaches to fatality state.**","5e8edb14":"**one-hot encoding country Region and Province state**","9e085b08":"# Model","fc4df3d2":"# Data Exploration","84c1df42":"** Converts date to int**","077441f7":"# Data Aquisitoin[](http:\/\/)","bc3e86ac":"# preprocessor for prediction","e1690c03":"**The Fatality rate and increase in no.of cases is exponentional over time**"}}