{"cell_type":{"1647f2db":"code","9a7fef69":"code","3be9f324":"code","b9219b13":"code","b6d9130f":"code","8c666fc9":"code","c72d4e40":"code","7fa07ce3":"code","9174d1f7":"code","f97527c5":"code","6043d9a1":"code","d060e226":"code","cd6d9756":"markdown","8a2308d9":"markdown","4a040116":"markdown","c8a84f13":"markdown","2a445502":"markdown","266b07bb":"markdown","6367c909":"markdown","f6ad5e8d":"markdown","27b3af28":"markdown","1cf4c72c":"markdown","7c68c7e5":"markdown"},"source":{"1647f2db":"import pandas as pd\nimport string\nimport markovify","9a7fef69":"hhgroups = pd.read_csv('..\/input\/hhgroups_merge_28_05.csv')\nhhgroups.head()","3be9f324":"letras = list(hhgroups['letra'])\n\n# Eliminamos canciones sin letra\nfor letra in list(letras):\n    if \"\u00bfTienes ya la letra para este tema? Ay\u00fadanos y \u00a1Env\u00edanosla!\" in letra:\n        letras.remove(letra)\n\nwith open('corpus_markov_hhgroups.txt', 'wb') as file:\n    for i in range(len(letras)):\n        for linea in letras[i].split(\"\\n\"):\n            if (\"[\" not in linea and \"(\" not in linea and linea != \"\"):\n                 file.write((linea + \"\\n\").encode(\"utf-8\"))","b9219b13":"with open('corpus_markov_hhgroups.txt', encoding=\"utf-8\") as f:\n    text = f.read()\n    model1 = markovify.NewlineText(text, state_size=1)\n    model2 = markovify.NewlineText(text, state_size=2)\n    model3 = markovify.NewlineText(text, state_size=3)","b6d9130f":"def mapavocal(frase):\n    palabra = frase.split(\" \")[-1:][0]\n    voc = \"aeiouy\u00e1\u00e9\u00ed\u00f3\u00fa\"\n    s = \"\"\n    for letra in palabra:\n        if letra in voc:\n            s += letra\n    return s\n\ndef generarFraseRima(frase, model):\n    mv = mapavocal(frase)\n    frase_temp = None\n    while frase_temp == None:\n        frase_temp = model.make_sentence()\n    mv2 = mapavocal(frase_temp)\n    while mv2 == \"\" or (mv[-3:] != mv2[-3:] and mv[-2:] != mv2[-2:] and mv != mv2):\n        frase_temp = None\n        while frase_temp == None:\n            frase_temp = model.make_sentence()\n        mv2 = mapavocal(frase_temp)\n    return frase_temp\n\ndef rapear(barras, model):\n    frase = model.make_sentence()\n    print(frase)\n    for i in range(barras-1):\n        print(generarFraseRima(frase,model))\n\ndef responder(frase, model, barras):\n    print(frase)\n    for i in range(barras-1):\n        print(generarFraseRima(frase, model))\n","8c666fc9":"for i in range(4):\n    print(model1.make_sentence())","c72d4e40":"for i in range(4):\n    print(model2.make_sentence())","7fa07ce3":"for i in range(4):\n    print(model3.make_sentence())","9174d1f7":"responder(\"Kaggle es interesante\", model1, 4)","f97527c5":"responder(\"Este bot rapea un poco raro\", model2, 4)","6043d9a1":"responder(\"Rapeas bastante mejor que muchos raperos\", model3, 4)","d060e226":"rapear(4, model3)","cd6d9756":"### El modelo 2, a nivel de cada 2 palabras tiene algo m\u00e1s de coherencia","8a2308d9":"# Crear modelos de markov\nCrear\u00e9 3 modelos, uno a nivel de palabras, otro cada 2 palabras, y finalmente otro con grupos de 3 palabras.\n\nEste \u00faltimo tiene m\u00e1s coherencia pero menos originalidad.","4a040116":"# Imports y cargar dataset","c8a84f13":"Por \u00faltimo, generamos frase aleatoria y sigue 3 frases con la misma terminaci\u00f3n.\n\nLos resultados son muy interesantes, si mejoramos la detecci\u00f3n y b\u00fasqueda de rimas, podr\u00eda hacer un bot de Twitter para que la gente rapee contra este.","2a445502":"# Detectar rimas\nEn el futuro estar\u00eda interesante detectar rimas con la librer\u00eda de python *pronouncing* con un diccionario CMU en Espa\u00f1ol.\n\nAdem\u00e1s, a la hora de buscar rimas y estructuras (ABAB, multisil\u00e1bica) estar\u00eda interesante aplicar redes neuronales LSTM.\n\n\nPerdonen mi ignorancia respecto al NLP, pues este m\u00e9todo de \"fuerza bruta\" da resultados pero no funciona con esdr\u00fajulas y no tiene 100% de acierto.\n* Para buscar rimas, miro las vocales de la \u00faltima palabra\n* Genero nueva frase donde la \u00faltima palabra donde coincidan todas o las dos \u00faltimas vocales.","266b07bb":"### El modelo 3, tiene m\u00e1s coherencia, coge grupos de 3 palabras.\nA partir de aqu\u00ed no podemos subir m\u00e1s la ventana del modelo de markov, porque estar\u00edamos repitiendo frases ya dichas, y entonces recaeria todo el esfuerzo en la b\u00fasqueda de rimas, la cual por ahora solo es asonante y con agudas\/planas y algunos bugs.\n\nLo curioso es que aparecen rimas internas porque suelen darse en grupos de 3 palabras.","6367c909":"Mejores resultados, conserva algo de sem\u00e1ntica, con el modelo 3:","f6ad5e8d":"# Buscando rimas en la \u00faltima palabra y respondiendo con la misma terminaci\u00f3n\nModelo 1, se saca algunas rimas internas (pero mi algoritmo solo mira la \u00faltima palabra),\n\nLas frases suelen estar mal costruidas porque solo miramos de palabra en palabra.","27b3af28":"# Generando frases aleatorias sin rima\n### El modelo 1, es a nivel de palabras y no tiene sentido :","1cf4c72c":"Mejores resultados con el modelo 2:","7c68c7e5":"# Limpiar dataset\nEliminamos las l\u00edneas con nombre de artista, y las canciones vac\u00edas.\n\nLo guardamos en un archivo (se pod\u00eda hacer en memoria pero es m\u00e1s manejable)"}}