{"cell_type":{"b14f04c7":"code","44571214":"code","05e7a395":"code","721ba8b3":"code","0360a352":"code","ef8d7358":"code","b3bde02c":"code","b22d02ec":"code","b0d84fcb":"code","745a5692":"code","0649114d":"code","d8ac1c84":"code","3e4c3973":"code","726934ac":"code","ce7aa0b2":"code","cd9fa453":"code","8810904e":"code","cf371b71":"code","d30f641e":"code","bfbd7d67":"code","56a2e08b":"code","ce35bd4f":"code","121cb1f6":"code","408d0358":"markdown"},"source":{"b14f04c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","44571214":"# Import packages\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nimport sklearn.metrics as metrics\nimport math","05e7a395":"sample_submission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\n\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\n\n#Creating a copy of the train and test datasets\nc_test  = test.copy()\nc_train  = train.copy()","721ba8b3":"#Verifying if everything is okay for train set et test set\nc_train.head()","0360a352":"c_test.head()","ef8d7358":"#Assemble train set and test set\nc_train['train']  = 1\nc_test['train']  = 0\ndf = pd.concat([c_train, c_test], axis=0, sort=False)","b3bde02c":"df.head()","b22d02ec":"#Seeing rapidly NAN values\nsns.heatmap(df.isna())","b0d84fcb":"#Creating a df of %'s nan values\nNAN = [(col, df[col].isna().mean()*100) for col in df]\nNAN = pd.DataFrame(NAN, columns=[\"name\", \"perc\"])\n\nNAN","745a5692":"#Count the number of features that have more than 40% of NAN\nNAN = NAN[NAN.perc > 40]\nNAN.sort_values(\"perc\", ascending=False)","0649114d":"#4 features with more than 40% of NAN values, we can drop them\ndf = df.drop([\"PoolQC\", \"MiscFeature\", \"Alley\", \"Fence\"], axis=1)\ndf.head()","d8ac1c84":"#Select numerical and categorical features\nobject_features = df.select_dtypes(include=['object'])\nnumerical_features = df.select_dtypes(exclude=['object'])","3e4c3973":"#Null values for columns\nnull_counts = object_features.isnull().sum() \nprint(\"Null values in features :\\n\", null_counts)","726934ac":"#Fill all features that have more than 50 null values\nfor c in object_features:\n    if df[c].isnull().sum() > 50:\n        df[c] = df[c].fillna('None')\n        \ndf[\"BsmtQual\"].value_counts()","ce7aa0b2":"#Fill all features that have less than 50 null values\nfor c in object_features:\n    if df[c].isnull().sum() < 50:\n        df[c] = df[c].fillna('None')\n        \ndf[\"BsmtExposure\"].value_counts()","cd9fa453":"#Null values for columns\nnull_counts = numerical_features.isnull().sum()\nprint(\"Null values in features :\\n\", null_counts)","8810904e":"#Fill features with logical values for GarageYrBlt and LotFrontage\nprint(numerical_features[\"LotFrontage\"].median())\nprint((numerical_features[\"YrSold\"]-numerical_features[\"YearBuilt\"]).median())","cf371b71":"#For GarageYrBlt we'll fill with 1979 because, 2014 - 35 = 1979\nnumerical_features['GarageYrBlt'] = numerical_features['GarageYrBlt'].fillna(numerical_features['YrSold']-35)\nnumerical_features['LotFrontage'] = numerical_features['LotFrontage'].fillna(68)","d30f641e":"#Fill the rest with 0\nnumerical_features = numerical_features.fillna(0)","bfbd7d67":"plt.rcParams.update({'figure.max_open_warning': 0})\n\n#Visualising columns\nfor col in object_features:\n    plt.figure(figsize=[10,3])\n    object_features[col].value_counts().plot(kind='bar', title=col)","56a2e08b":"#Some features have bad variance, so we'll delete them\nobject_features = object_features.drop(['Heating','RoofMatl','Condition2','Street','Utilities'],axis=1)","ce35bd4f":"def encoding(object_features):\n    \n    code = {'TA':2,'Gd':3, 'Fa':1,'Ex':4,'Po':1,\n            'None':0,'Y':1,'N':0,'Reg':3,'IR1':2,\n            'IR2':1,'IR3':0,\"None\" : 0,\n            \"No\" : 2, \"Mn\" : 2, \"Av\": 3,\"Gd\" : 4,\n            \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3,\n            \"BLQ\" : 4, \"ALQ\" : 5, \"GLQ\" : 6\n                }\n    \n    object_features['ExterQual'] = object_features['ExterQual'].map(code)\n    object_features['ExterCond'] = object_features['ExterCond'].map(code)\n    object_features['BsmtCond'] = object_features['BsmtCond'].map(code)\n    object_features['BsmtQual'] = object_features['BsmtQual'].map(code)\n    object_features['HeatingQC'] = object_features['HeatingQC'].map(code)\n    object_features['KitchenQual'] = object_features['KitchenQual'].map(code)\n    object_features['FireplaceQu'] = object_features['FireplaceQu'].map(code)\n    object_features['GarageQual'] = object_features['GarageQual'].map(code)\n    object_features['GarageCond'] = object_features['GarageCond'].map(code)\n    object_features['CentralAir'] = object_features['CentralAir'].map(code)\n    object_features['LotShape'] = object_features['LotShape'].map(code)\n    object_features['BsmtExposure'] = object_features['BsmtExposure'].map(code)\n    object_features['BsmtFinType1'] = object_features['BsmtFinType1'].map(code)\n    object_features['BsmtFinType2'] = object_features['BsmtFinType2'].map(code)\n\n    PavedDrive =   {\"N\" : 0, \"P\" : 1, \"Y\" : 2}\n    object_features['PavedDrive'] = object_features['PavedDrive'].map(PavedDrive)\n        \n    rest_object_features = object_features.select_dtypes(include=['object'])\n    object_features = pd.get_dummies(object_features, columns=rest_object_features.columns) \n   \n    return object_features","121cb1f6":"final_df = pd.concat([encoding(object_features), numerical_features], axis=1, sort=False)\nfinal_df.head()","408d0358":"## Preprocessing"}}