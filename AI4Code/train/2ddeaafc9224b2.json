{"cell_type":{"12535b36":"code","c4cff0d0":"code","977b5732":"code","15ac7718":"code","f7cb80c8":"code","4320e859":"code","f3c6d37b":"code","95d56806":"code","8773d075":"code","4bd44172":"code","20b661cb":"code","b473103f":"code","126db15a":"code","e8ddf311":"code","afa8e964":"code","2d55e5fb":"code","e13a0726":"code","87c3c529":"code","6ab350c8":"code","e5d89e17":"code","5387200a":"code","fa91ab3b":"code","fe08873e":"code","213e20b3":"code","ee51da1a":"code","1640cc76":"code","f15f92dc":"code","159ff99a":"code","93056ad3":"code","6f66d869":"markdown","a7d597a4":"markdown","69f02d4e":"markdown","96ec58fa":"markdown","8f447f6e":"markdown","a5fb0696":"markdown","1dab50a9":"markdown"},"source":{"12535b36":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/\"))\n\n# Any results you write to the current directory are saved as output.","c4cff0d0":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","977b5732":"df = pd.read_csv(\"..\/input\/general_data.csv\",sep=\",\")","15ac7718":"df.head()","f7cb80c8":"print(df.columns)","4320e859":"df.isnull().any()","f3c6d37b":"df.fillna(0,inplace=True)","95d56806":"#drop the useless columns:\n\ndf.drop(['EmployeeCount','EmployeeID','StandardHours'],axis=1, inplace = True)","8773d075":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","4bd44172":"corr_cols = df[['Age','Attrition','BusinessTravel','DistanceFromHome','Education', 'EducationField','Gender', 'JobLevel', 'JobRole',\n       'MaritalStatus', 'MonthlyIncome', 'NumCompaniesWorked',\n       'PercentSalaryHike', 'StockOptionLevel', 'TotalWorkingYears',\n       'TrainingTimesLastYear', 'YearsAtCompany', 'YearsSinceLastPromotion',\n       'YearsWithCurrManager']]","20b661cb":"corr = corr_cols.corr()\nplt.figure(figsize=(16,7))\nsns.heatmap(corr,annot=True)\nplt.show()","b473103f":"print(len(df))\nprint(len(df[df['Attrition']=='Yes']))\nprint(len(df[df['Attrition']=='No']))\nprint(\"percentage of yes Attrition is:\",(len(df[df['Attrition']=='Yes'])\/len(df))*100,\"%\")\nprint(\"percentage of no Attrition is:\",(len(df[df['Attrition']=='No'])\/len(df))*100,\"%\")","126db15a":"sns.countplot(x = \"Attrition\",data=df)\nplt.show()","e8ddf311":"sns.countplot(x = \"Attrition\",data=df,hue=\"Gender\")\nplt.show()","afa8e964":"sns.countplot(x = \"Attrition\",data=df,hue=\"JobLevel\")\nplt.show()","2d55e5fb":"#function to creat group of ages, this helps because we have 78 differente values here\ndef Age(dataframe):\n    dataframe.loc[dataframe['Age'] <= 30,'Age'] = 1\n    dataframe.loc[(dataframe['Age'] > 30) & (dataframe['Age'] <= 40), 'Age'] = 2\n    dataframe.loc[(dataframe['Age'] > 40) & (dataframe['Age'] <= 50), 'Age'] = 3\n    dataframe.loc[(dataframe['Age'] > 50) & (dataframe['Age'] <= 60), 'Age'] = 4\n    return dataframe\n\nAge(df); ","e13a0726":"sns.countplot(x = \"Attrition\",data=df,hue=\"Age\")\nplt.show()","87c3c529":"print(df['BusinessTravel'].unique())\nprint(df['Department'].unique())\nprint(df['EducationField'].unique())\nprint(df['Gender'].unique())\nprint(df['JobRole'].unique())\nprint(df['MaritalStatus'].unique())\nprint(df['Over18'].unique())","6ab350c8":"from sklearn.preprocessing import LabelEncoder\nlabelEncoder_X = LabelEncoder()\ndf['BusinessTravel'] = labelEncoder_X.fit_transform(df['BusinessTravel'])\ndf['Department'] = labelEncoder_X.fit_transform(df['Department'])\ndf['EducationField'] = labelEncoder_X.fit_transform(df['EducationField'])\ndf['Gender'] = labelEncoder_X.fit_transform(df['Gender'])\ndf['JobRole'] = labelEncoder_X.fit_transform(df['JobRole'])\ndf['MaritalStatus'] = labelEncoder_X.fit_transform(df['MaritalStatus'])\ndf['Over18'] = labelEncoder_X.fit_transform(df['Over18'])","e5d89e17":"#Attriton is dependent var\nfrom sklearn.preprocessing import LabelEncoder\nlabel_encoder_y=LabelEncoder()\ndf['Attrition']=label_encoder_y.fit_transform(df['Attrition'])","5387200a":"df.head()","fa91ab3b":"corr_cols = df[['Age','Attrition','BusinessTravel','DistanceFromHome','Education', 'EducationField','Gender', 'JobLevel', 'JobRole',\n       'MaritalStatus', 'MonthlyIncome', 'NumCompaniesWorked',\n       'PercentSalaryHike', 'StockOptionLevel', 'TotalWorkingYears',\n       'TrainingTimesLastYear', 'YearsAtCompany', 'YearsSinceLastPromotion',\n       'YearsWithCurrManager']]","fe08873e":"corr = corr_cols.corr()\nplt.figure(figsize=(18,7))\nsns.heatmap(corr, annot = True)\nplt.show()","213e20b3":"y = df['Attrition']\nx = df.drop('Attrition', axis = 1)","ee51da1a":"from sklearn.model_selection import train_test_split\nX_train,X_test, y_train, y_test = train_test_split(x,y, test_size = 0.20, random_state=42)","1640cc76":"from sklearn.preprocessing import StandardScaler\nScaler_X = StandardScaler()\nX_train = Scaler_X.fit_transform(X_train)\nX_test = Scaler_X.transform(X_test)","f15f92dc":"#import some comman libs:\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score","159ff99a":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\nlr.fit(X_train,y_train)\ny_pred = lr.predict(X_test)\n\nprint(accuracy_score(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\n\n","93056ad3":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","6f66d869":"## Data Cleaning:","a7d597a4":"### Choose dependent and independent var:\n here dependent var is **Attrition** and rest of the var are indepdent var.","69f02d4e":" ### Find the correlation b\/w all the columns:","96ec58fa":"# Split data into training and Testing set:","8f447f6e":"## Convert all the Categorical data into numerical data ","a5fb0696":"## Data Visualization :","1dab50a9":"# Logistic Regression:"}}