{"cell_type":{"ffd7b6f4":"code","e6d0c685":"code","e0e1265c":"code","cab6e1f1":"code","d84fa04a":"code","dce550db":"code","ee3f99d1":"code","ce4a2282":"code","024938b9":"code","3ee11816":"code","0b467ad6":"code","465ed723":"code","a5105a46":"code","b9a32be2":"code","b67a37c5":"code","0d414d5a":"code","fb5ec126":"code","9fde915d":"code","c59b1640":"code","79101c35":"code","58e888b1":"code","66d6450f":"code","bbd41183":"code","8da0c46a":"code","3fc432e6":"code","2b7631fc":"code","65adf3ec":"code","d4f0b3fa":"code","c375ec9e":"code","881ef2dc":"code","e7d5bc28":"code","a68b1e02":"code","210170eb":"code","c96d1173":"code","d6d6c87f":"code","d11c504e":"code","ed476719":"code","9c4b08e4":"code","ddaf6346":"code","dd8ee632":"code","ec6a15e3":"code","3a4b3a21":"code","c7542860":"code","7029b705":"code","9575a60d":"code","bcc32c38":"code","8a1bb874":"code","10a77cb7":"code","ad4cba03":"code","f110e089":"code","a9ec7a5b":"code","b406a851":"code","027db46b":"code","2967fdf1":"code","1b3c25a6":"code","8b332b4f":"code","63538ff8":"code","e9c8f28e":"markdown","c009d421":"markdown","69670a99":"markdown","5a4cbb26":"markdown","c738aa78":"markdown","0da3a32f":"markdown","bb62296c":"markdown","8849b199":"markdown","a8b2373f":"markdown","17983524":"markdown","b3eb6755":"markdown","c3d6ef4e":"markdown","329c7084":"markdown","2057f7ab":"markdown","1621e9a8":"markdown"},"source":{"ffd7b6f4":"tuple1 = (1, 3.5, \"Salman\", True, \"Anything\")  # How to assign a tuple.","e6d0c685":"print(type(tuple1))  # Checking data type","e0e1265c":"print(tuple1[0])  # printing an element using its index\nprint(tuple1[3])\nprint(tuple1[4])","cab6e1f1":"print(tuple1[-1])  # negative indexing, -1 for last element, -2 for second last and so on...\nprint(tuple1[-2])\nprint(tuple1[-4])","d84fa04a":"tuple2 = tuple1 + (\"this\", \"will\", \"be\", \"added\")  # concatenating the tuples","dce550db":"print(tuple2)","ee3f99d1":"print(tuple2[0:6])  # Slicing\nprint(tuple2[6:10])","ce4a2282":"print(len(tuple2))  # length of the tuple","024938b9":"print(tuple2.index(\"Anything\"))  # finding index of a particular element","3ee11816":"numbers = (2,5,7,1,3,7)\nnumbers_sorted = sorted(numbers)  # Need to create another tuple for change\nprint(numbers_sorted)","0b467ad6":"t1 = (3, \"something\", (4, 4.8), 34, (\"salman\",(\"another\", \"tuple\")))  # Nested tuple","465ed723":"print(t1[2])\nprint(t1[3])\nprint(t1[4])","a5105a46":"print(t1[4][1])  # printing a nested tuple","b9a32be2":"print(t1[4][1][0])","b67a37c5":"list1 = [\"salman\", 45, 6.004, False, \"anything\"]  # Assigning a list","0d414d5a":"list2 = list1 + [23, [34, 68], [\"another\", [\"example\",[\"of\",[\"nested\", \"list\"]]]]]","fb5ec126":"print(list2)","9fde915d":"print(list2[4])  # printing elements using indexes\nprint(list2[6])\nprint(list2[7])\nprint(list2[7][1])\nprint(list2[7][1][0])","c59b1640":"print(list2[2:7])  #slicing","79101c35":"print(list2.index([34, 68]))","58e888b1":"list2.extend([\"extension\", \"of\", \"the\", \"list\"])  # another way to add elements","66d6450f":"print(list2)","bbd41183":"list2.append([\"extension\", \"of\", \"the\", \"list\"])  # append only add one element to the list","8da0c46a":"print(list2)","3fc432e6":"print(len(list2))  # length of the list","2b7631fc":"del(list2[0:3]) # deleting first 3 elements here","65adf3ec":"print(list2)","d4f0b3fa":"del(list2[5:])  # deleting everything after 5th element","c375ec9e":"print(list2)","881ef2dc":"string1 = \"let's convert it into a list\"\nlist3 = string1.split()  # split() is used to convert a string into a list\n","e7d5bc28":"print(list3)","a68b1e02":"string2 = \"another,but,a,different,example,here,we,will,use,comma,as,a,delimiter\"\nlist4 = string2.split(\",\")\nprint(list4)","210170eb":"lista = [\"trying\", \"aliasing\", \"here\"]\nlistb = lista  # aliasing list, change in lista will result a change in listb\nprint(lista)\nprint(listb)","c96d1173":"lista[0] = \"acheiving\"","d6d6c87f":"print(lista)\nprint(listb)","d11c504e":"listc = [\"one\", \"list\"]\nlistd = listc[:]  # cloning list, change will not occur simultaneously","ed476719":"listc[0] = \"two\"\nprint(listc)\nprint(listd)","9c4b08e4":"dict1 = {\"Thriller\": 1982, \"Back in Black\": 1980, \"The Dark Side of the Moon\": 1973, \"The Bodyguard\": 1992}\n# Assigning a dictionary","ddaf6346":"print(dict1[\"Back in Black\"])  # calling a particular value using its key\nprint(dict1[\"The Bodyguard\"])","dd8ee632":"dict1[\"Graduation\"] = 2007  # adding a key-value pair in the dictionary","ec6a15e3":"print(dict1)  # printing whole dictionary","3a4b3a21":"del(dict1[\"The Dark Side of the Moon\"])  # deleting from dictionary a key-value pair","c7542860":"print(dict1)","7029b705":"\"The Bodyguard\" in dict1  # checking that a certain key is in the dictionary or not\n\"Starboy\" in dict1","9575a60d":"print(dict1.keys())  # shows all the keys present in the dictionary","bcc32c38":"print(dict1.values())  # shows all the values present in the dictionary","8a1bb874":"set1 = {\"one\", \"three\", \"eight\", \"nine\", \"eight\", \"three\", \"one\", \"five\"}  # Assigning a set\nprint(set1)  # all repeated elements are saved only once in a set","10a77cb7":"list_set = [\"salman\", \"faisal\", \"naveed\", \"naveed\", \"salman\"]  # Assigning a list\nprint(list_set)  # calling the list\nset_list = set(list_set)  # converting the list into set\nprint(set_list)  # calling the converted set\ntype(set_list) # checking set type","ad4cba03":"set1.add(\"four\")  # adding an element in the set\nprint(set1)","f110e089":"set1.remove(\"nine\")  # removing an element\nprint(set1)","a9ec7a5b":"print(\"four\" in set1)  # checking that a certain element is in the set or not\nprint(\"eleven\" in set1)","b406a851":"set02 = {2, 4, 6, 8, 10, 12}\nset03 = {3, 6, 9, 12, 15, 18}","027db46b":"sum(set02)  # finding the sum all elements in set, can deal with number only i.e. float or\/and int","2967fdf1":"# '&' is used to find the intersection between multiple sets, intersection - common elements in sets\n\nintersection_set = set02 & set03\nprint(intersection_set)","1b3c25a6":"# union() is used to find the union of multiple sets\n# that union set will have all unique elements of the multiple sets\n\nunion_set = set02.union(set03)\nprint(union_set)","8b332b4f":"# issubset() is used to find out weather a set is a subset of another set\n# subset is a set smaller or equal to another set that has all the elements of that particular set\n# similarly superset is the opposite of it, it shows weather a set contains all the elements of another set\n\nprint(set02.issubset(set03))\nset04 = {6, 12, 18}\nprint(set04.issubset(set03))\nprint(set03.issubset(set04))\nprint(set03.issuperset(set04))","63538ff8":"# difference() is used to find out the difference one set has from another set\nprint(set02.difference(set03))\nprint(set02.difference(set02))","e9c8f28e":"##### We can also convert a list into a set, using set()","c009d421":"#### But lists are mutable","69670a99":"## Dictionaries","5a4cbb26":"#### Lists, in many ways are like tuples.\n##### Can be nested like tuples as well\n##### Elements can be called using indexes as well\n##### Slicing is possible\n##### We can find length using len()\n##### Finding index is same as tuples. i.e. listname.index()","c738aa78":"This file was made by me while I was teaching myself Python and I would be happy if this can help someone on Kaggle who wants to learn Python.","0da3a32f":"##### Type of collection similar to lists and tuples\n##### Sets are unordered unlike lists and tuples, don't record position\n##### Sets can not have repeated elements","bb62296c":"# PYTHON DATA STRUCTURES","8849b199":"##### A dictionary consists of keys and values. It is helpful to compare a dictionary to a list. Instead of the numerical indexes such as a list, dictionaries have keys. These keys are the keys that are used to access values within a dictionary.\n##### denoted with braces {}\n##### keys and values are seperated from each other by a colon\n##### keys and values are seperated from another key-value pair by a comma","a8b2373f":"### Tuples:\n##### Tuples are ordered sequences, written as comma seperated elements within parentheses.","17983524":"### Tuples are immutable.","b3eb6755":"### Mathematical Set Operations","c3d6ef4e":"## Lists and Tuples","329c7084":"### Lists:\nLists are also ordered sequence, written as comma seperated elements within brackets.","2057f7ab":"# ---END---","1621e9a8":"## Sets"}}