{"cell_type":{"9c83aa84":"code","a3f2d79b":"code","88f6f2c3":"code","879e599c":"code","605f157c":"code","403c6777":"code","805ab13e":"code","4e67c2c2":"code","614e8453":"code","a4f1d207":"code","799c3bce":"code","cab385ed":"code","58d524a3":"code","740a3e6b":"code","6921980b":"code","c051d1af":"code","90e5cf7d":"code","5eb10551":"code","80ac5892":"code","eedffc56":"code","7ff61824":"markdown","48fc7f85":"markdown","6c89f9d6":"markdown","7cdbc4b1":"markdown","290cc9bc":"markdown","1a2b4f9d":"markdown","900d0027":"markdown","f07f56c5":"markdown","9ea611ca":"markdown","7ecf0aeb":"markdown","3e258886":"markdown","02f24f6f":"markdown","1076c356":"markdown","69bda6e9":"markdown","fd123fa4":"markdown"},"source":{"9c83aa84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom jcopml.plot import plot_missing_value\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3f2d79b":"pd.set_option('display.max_columns', 500)\ndf = pd.read_csv('\/kaggle\/input\/mobile-price-classification\/train.csv')\ndf.head()","88f6f2c3":"df.shape","879e599c":"from jcopml.plot import plot_correlation_matrix\nplot_correlation_matrix(df, 'price_range', numeric_col=[\"battery_power\", \"clock_speed\", \"fc\", 'int_memory', 'm_dep', 'mobile_wt', 'n_cores', 'pc', 'px_height',\n       'px_width', 'ram', 'sc_h', 'sc_w', 'talk_time'])","605f157c":"kolom_yg_dipakai = [\"battery_power\", \"ram\", \"px_height\", \"px_width\", \"price_range\"]\ndf_new = df[kolom_yg_dipakai]","403c6777":"print(df_new.shape)\ndf_new.head()","805ab13e":"plot_missing_value(df_new, return_df=True)","4e67c2c2":"[print(df[x].describe(), \"\\n\") for x in df_new.columns if x!='price_range']\n\nf, axes = plt.subplots(2, 2, figsize=(17, 7), sharex=False)\nsns.distplot( df[\"battery_power\"], bins=100, color=\"blue\", ax=axes[0, 0])\nsns.distplot( df[\"ram\"], bins=100, color=\"olive\", ax=axes[0, 1])\nsns.distplot( df[\"px_height\"], bins=100, color=\"gold\", ax=axes[1, 0])\nsns.distplot( df[\"px_width\"], bins=100, color=\"teal\", ax=axes[1, 1])","614e8453":"sns.scatterplot(x=df[\"ram\"], y=df[\"price_range\"])","a4f1d207":"sns.pairplot(df_new,hue='price_range')","799c3bce":"from sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\n\nfrom jcopml.pipeline import num_pipe, cat_pipe\nfrom jcopml.utils import save_model, load_model\nfrom jcopml.plot import plot_missing_value\nfrom jcopml.feature_importance import mean_score_decrease","cab385ed":"# Separate the features and target columns\nX = df_new.drop(columns=[\"price_range\"])\ny = df_new[\"price_range\"]\n\n# Create data train and data test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","58d524a3":"from sklearn.svm import SVC \nfrom sklearn.model_selection import RandomizedSearchCV\nfrom jcopml.tuning import grid_search_params as gsp","740a3e6b":"parameter_tune = {'algo__gamma': [1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03],\n'algo__C': [1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03],\n'algo__max_iter' : [100, 200, 300, 400, 500, 600]}\n\npreprocessing = ColumnTransformer([\n    ('numeric', num_pipe(), X_train.columns),\n])\n\npipeline = Pipeline([\n    ('prep', preprocessing),\n    ('algo', SVC())\n])\n\nmodel = RandomizedSearchCV(pipeline, parameter_tune,cv=3, n_jobs=-1, verbose=1, n_iter=150)\nmodel.fit(X_train, y_train)\n\nprint(model.best_params_)\nprint(model.score(X_train, y_train), model.best_score_, model.score(X_test, y_test))","6921980b":"parameter_tune = {'algo__gamma': [1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03],\n'algo__C': [1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03],\n'algo__max_iter' : [100, 200, 300, 400, 500, 600]}\n\npreprocessing = ColumnTransformer([\n    ('numeric', num_pipe(scaling='standard', transform='yeo-johnson'), X_train.columns),\n])\n\npipeline = Pipeline([\n    ('prep', preprocessing),\n    ('algo', SVC())\n])\n\nmodel = RandomizedSearchCV(pipeline, parameter_tune,cv=3, n_jobs=-1, verbose=1, n_iter=200)\nmodel.fit(X_train, y_train)\n\nprint(model.best_params_)\nprint(model.score(X_train, y_train), model.best_score_, model.score(X_test, y_test))","c051d1af":"parameter_tune = {'algo__gamma': [1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03],\n'algo__C': [1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03],\n'algo__max_iter' : [100, 200, 300, 400, 500, 600]}\n\npreprocessing = ColumnTransformer([\n    ('numeric', num_pipe(scaling='robust'), X_train.columns),\n])\n\npipeline = Pipeline([\n    ('prep', preprocessing),\n    ('algo', SVC())\n])\n\nmodel = RandomizedSearchCV(pipeline, parameter_tune,cv=3, n_jobs=-1, verbose=1, n_iter=200)\nmodel.fit(X_train, y_train)\n\nprint(model.best_params_)\nprint(model.score(X_train, y_train), model.best_score_, model.score(X_test, y_test))","90e5cf7d":"parameter_tune = {\n'prep__numeric__poly__degree': [2, 3, 4],\n 'prep__numeric__poly__interaction_only': [True, False],\n'algo__gamma': [1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03],\n'algo__C': [1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03],\n'algo__max_iter' : [100, 200, 300, 400, 500, 600]}\n\npreprocessing = ColumnTransformer([\n    ('numeric', num_pipe(poly=2 ,scaling='robust'), X_train.columns),\n])\n\npipeline = Pipeline([\n    ('prep', preprocessing),\n    ('algo', SVC())\n])\n\nmodel = RandomizedSearchCV(pipeline, parameter_tune,cv=3, n_jobs=-1, verbose=1, n_iter=200)\nmodel.fit(X_train, y_train)\n\nprint(model.best_params_)\nprint(model.score(X_train, y_train), model.best_score_, model.score(X_test, y_test))","5eb10551":"from jcopml.plot import plot_classification_report, plot_confusion_matrix, plot_roc_curve, plot_pr_curve","80ac5892":"plot_classification_report(X_train, y_train, X_test, y_test, model, report=True)","eedffc56":"plot_confusion_matrix(X_train, y_train, X_test, y_test, model)","7ff61824":"# Scatter Plot","48fc7f85":"## Improve SVM Classifier with scalling, and transform","6c89f9d6":"## Number of columns and rows","7cdbc4b1":"Classification Report","290cc9bc":"# Evaluation","1a2b4f9d":"Based on the correlation matrix results, we will only use four columns","900d0027":"## Correlation Matrix","f07f56c5":"## Improve SVM Classifier Poly","9ea611ca":"# Import Datasets","7ecf0aeb":"# Datasets Splitting","3e258886":"Plot Confussion Matrix","02f24f6f":"## Check the relationship using Pairplot\nit can be seen that the most affecting parameter is the RAM column","1076c356":"## Check Missing Value\nthere is no missing value. Data ready for processing","69bda6e9":"# Histogram","fd123fa4":"# Modeling - SVM Classifier"}}