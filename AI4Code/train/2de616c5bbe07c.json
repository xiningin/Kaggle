{"cell_type":{"3fa4bb4a":"code","f7767ed4":"code","be75916b":"code","db04c905":"code","650aa068":"code","954245bb":"code","719af4d3":"code","721f5c71":"code","67096417":"code","6b8903c6":"code","a238c99a":"code","2dedeaf8":"code","18f42b68":"code","d9f5144e":"code","081741a0":"code","bf53fc31":"code","2fd57a1f":"markdown","52a796a3":"markdown","d040c821":"markdown","54936af5":"markdown","df53696c":"markdown","c9937ebf":"markdown","3bc5903d":"markdown","66b3ada1":"markdown","57e6f78f":"markdown","b49a06e2":"markdown","c234f797":"markdown","749296d8":"markdown","fe272da6":"markdown","cd429a10":"markdown","67e68471":"markdown","24272af1":"markdown","690df820":"markdown","de2eed7c":"markdown","438a7173":"markdown"},"source":{"3fa4bb4a":"#Load the librarys\nimport pandas as pd #To work with dataset\nimport numpy as np #Math library\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns #Graph library that use matplot in background\nimport matplotlib.pyplot as plt #to plot some parameters in seaborn\nimport warnings\n# Preparation  \nfrom sklearn.preprocessing import LabelEncoder, OrdinalEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import PowerTransformer, StandardScaler,Normalizer,RobustScaler,MaxAbsScaler,MinMaxScaler,QuantileTransformer\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import KBinsDiscretizer\n# Import StandardScaler from scikit-learn\n\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.impute import KNNImputer,IterativeImputer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.compose import make_column_transformer,ColumnTransformer\nfrom sklearn.pipeline import make_pipeline, Pipeline,FeatureUnion\nfrom sklearn.manifold import TSNE\n# Import train_test_split()\n# Metrics\nfrom sklearn.metrics import roc_auc_score, average_precision_score\nfrom sklearn.metrics import make_scorer,f1_score\nfrom sklearn.metrics import mean_squared_error,classification_report\nfrom sklearn.metrics import roc_curve,confusion_matrix\nfrom datetime import datetime, date\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.linear_model import LinearRegression, RidgeCV\nfrom sklearn.linear_model import LogisticRegression\n\n#import tensorflow as tf \n#from tensorflow.keras import layers\n#from tensorflow.keras.callbacks import EarlyStopping\n#from tensorflow.keras.callbacks import LearningRateScheduler\n#import smogn\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.ensemble import GradientBoostingRegressor,RandomForestRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import HistGradientBoostingClassifier\n# For training random forest model\nimport lightgbm as lgb\nfrom scipy import sparse\nfrom sklearn.neighbors import KNeighborsRegressor \nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans \n# Model selection\nfrom sklearn.model_selection import StratifiedKFold,TimeSeriesSplit\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold, GroupKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n# Feature Selection \nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_regression,f_classif,chi2\nfrom sklearn.feature_selection import mutual_info_regression\nfrom sklearn.feature_selection import SelectPercentile\nfrom sklearn.feature_selection import mutual_info_classif,VarianceThreshold\n\n\nfrom lightgbm import LGBMClassifier,LGBMRegressor\nfrom catboost import CatBoostRegressor, CatBoostClassifier\nfrom xgboost import XGBClassifier,XGBRegressor\nfrom sklearn import set_config\nfrom itertools import combinations\n# Cluster :\nfrom sklearn.cluster import MiniBatchKMeans\n#from yellowbrick.cluster import KElbowVisualizer\n#import smong \nimport category_encoders as ce\nimport warnings\nimport optuna \nfrom joblib import Parallel, delayed\nimport joblib \nfrom sklearn import set_config\nfrom typing import List, Optional, Union\nset_config(display='diagram')\nwarnings.filterwarnings('ignore')","f7767ed4":"%%time\n# import lux\n# Load the training data\ntrain = pd.read_csv(\"..\/input\/frauddetection\/transactions_train.csv\")\n# Preview the data\ntrain.head(3)","be75916b":"# Convert Dtypes :\ntrain[train.select_dtypes(['int64','int16','float32','float64','int8']).columns] = train[train.select_dtypes(['int64','int16','float32','float64','int8']).columns].apply(pd.to_numeric)\ntrain[train.select_dtypes(['object','category']).columns] = train.select_dtypes(['object','category']).apply(lambda x: x.astype('category'))","db04c905":"# Pour le train test\ntarget= \"isFraud\"\nX = train.drop(target, axis='columns')# axis=1\ny = train[target]\ndel train ","650aa068":"# select non-numeric columns\ncat_columns = X.select_dtypes(exclude=['int64','int16','float32','float64','int8']).columns","954245bb":"# select the float columns\nnum_columns = X.select_dtypes(include=['int64','int16','float32','float64','int8']).columns","719af4d3":"all_columns = (num_columns.append(cat_columns))\nprint(cat_columns)\nprint(num_columns)\nprint(all_columns)","721f5c71":"if set(all_columns) == set(X.columns):\n    print('Ok')\nelse:\n    # Let's see the difference \n    print('in all_columns but not in  train  :', set(all_columns) - set(X.columns))\n    print('in X.columns   but not all_columns :', set(X.columns) - set(all_columns))","67096417":"class ColumnsSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, positions):\n        self.positions = positions\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        #return np.array(X)[:, self.positions]\n        return X.loc[:, self.positions] \n########################################################################\nclass CustomLogTransformer(BaseEstimator, TransformerMixin):\n    # https:\/\/towardsdatascience.com\/how-to-write-powerful-code-others-admire-with-custom-sklearn-transformers-34bc9087fdd\n    def __init__(self):\n        self._estimator = PowerTransformer()\n\n    def fit(self, X, y=None):\n        X_copy = np.copy(X) + 1\n        self._estimator.fit(X_copy)\n\n        return self\n\n    def transform(self, X):\n        X_copy = np.copy(X) + 1\n\n        return self._estimator.transform(X_copy)\n\n    def inverse_transform(self, X):\n        X_reversed = self._estimator.inverse_transform(np.copy(X))\n\n        return X_reversed - 1  \n\nclass TemporalVariableTransformer(BaseEstimator, TransformerMixin):\n    # Temporal elapsed time transformer\n\n    def __init__(self, variables, reference_variable):\n        \n        if not isinstance(variables, list):\n            raise ValueError('variables should be a list')\n        \n        self.variables = variables\n        self.reference_variable = reference_variable\n\n    def fit(self, X, y=None):\n        # we need this step to fit the sklearn pipeline\n        return self\n\n    def transform(self, X):\n\n       # so that we do not over-write the original dataframe\n        X = X.copy()\n        \n        for feature in self.variables:\n            X[feature] = X[self.reference_variable] - X[feature]\n\n        return X\nclass CustomImputer(BaseEstimator, TransformerMixin) : \n    def __init__(self, variable, by) : \n            #self.something enables you to include the passed parameters\n            #as object attributes and use it in other methods of the class\n            self.variable = variable\n            self.by = by\n\n    def fit(self, X, y=None) : \n        self.map = X.groupby(self.by)[variable].mean()\n        #self.map become an attribute that is, the map of values to\n        #impute in function of index (corresponding table, like a dict)\n        return self\n\ndef transform(self, X, y=None) : \n    X[variable] = X[variable].fillna(value = X[by].map(self.map))\n    #Change the variable column. If the value is missing, value should \n    #be replaced by the mapping of column \"by\" according to the map you\n    #created in fit method (self.map)\n    return X\n\n    # categorical missing value imputer\nclass Mapper(BaseEstimator, TransformerMixin):\n\n    def __init__(self, variables, mappings):\n\n        if not isinstance(variables, list):\n            raise ValueError('variables should be a list')\n\n        self.variables = variables\n        self.mappings = mappings\n\n    def fit(self, X, y=None):\n        # we need the fit statement to accomodate the sklearn pipeline\n        return self\n\n    def transform(self, X):\n        X = X.copy()\n        for feature in self.variables:\n            X[feature] = X[feature].map(self.mappings)\n\n        return X  \n    \n##########################################################################\nclass CountFrequencyEncoder(BaseEstimator, TransformerMixin):\n    #temp = df['card1'].value_counts().to_dict()\n    #df['card1_counts'] = df['card1'].map(temp)\n    def __init__(\n        self,\n        encoding_method: str = \"count\",\n        variables: Union[None, int, str, List[Union[str, int]]] = None,\n        keep_variable=True,\n                  ) -> None:\n\n        self.encoding_method = encoding_method\n        self.variables = variables\n        self.keep_variable=keep_variable\n\n    def fit(self, X: pd.DataFrame, y: Optional[pd.Series] = None):\n        \"\"\"\n        Learn the counts or frequencies which will be used to replace the categories.\n        Parameters\n        ----------\n        X: pandas dataframe of shape = [n_samples, n_features]\n            The training dataset. Can be the entire dataframe, not just the\n            variables to be transformed.\n        y: pandas Series, default = None\n            y is not needed in this encoder. You can pass y or None.\n        \"\"\"\n        self.encoder_dict_ = {}\n\n        # learn encoding maps\n        for var in self.variables:\n            if self.encoding_method == \"count\":\n                self.encoder_dict_[var] = X[var].value_counts().to_dict()\n\n            elif self.encoding_method == \"frequency\":\n                n_obs = float(len(X))\n                self.encoder_dict_[var] = (X[var].value_counts() \/ n_obs).to_dict()\n        return self\n\n    def transform(self, X: pd.DataFrame) -> pd.DataFrame:\n        # replace categories by the learned parameters\n        X = X.copy()\n        for feature in self.encoder_dict_.keys():\n            if self.keep_variable:\n                X[feature+'_fq_enc'] = X[feature].map(self.encoder_dict_[feature])\n            else:\n                X[feature] = X[feature].map(self.encoder_dict_[feature])\n        return X[self.variables].to_numpy()\n#################################################   \nclass FeaturesEngineerGroup(BaseEstimator, TransformerMixin):\n    def __init__(self,groupping_method =\"mean\",\n                   variables=  \"amount\",\n                   groupby_variables = \"nameOrig\"                         \n                 ) :\n        self.groupping_method = groupping_method\n        self.variables=variables\n        self.groupby_variables=groupby_variables\n        \n    def fit(self, X, y=None):\n        \"\"\"\n        Learn the mean or median of  amount of each client which will be used to create new feature for each unqiue client in order to undersatant thier behavior .\n        Parameters\n        ----------\n        X: pandas dataframe of shape = [n_samples, n_features]\n        The training dataset. Can be the entire dataframe, not just the\n        variables to be transformed.\n        y: pandas Series, default = None\n        y is not needed in this encoder. You can pass y or None.\n        \"\"\"\n        self.group_amount_dict_ = {}\n        #df.groupby('card1')['TransactionAmt'].agg(['mean']).to_dict()\n        #temp = df.groupby('card1')['TransactionAmt'].agg(['mean']).rename({'mean':'TransactionAmt_card1_mean'},axis=1)\n        #df = pd.merge(df,temp,on='card1',how='left')\n        #target_mean = df_train.groupby(['id1', 'id2'])['target'].mean().rename('avg')\n        #df_test = df_test.join(target_mean, on=['id1', 'id2'])\n        #lifeExp_per_continent = gapminder.groupby('continent').lifeExp.mean()\n        # learn mean\/medain \n        #for groupby in self.groupby_variables:\n         #   for var in self.variables:\n        if self.groupping_method == \"mean\":\n            self.group_amount_dict_[self.variables] =X.fillna(np.nan).groupby([self.groupby_variables])[self.variables].agg(['mean']).to_dict()\n        elif self.groupping_method == \"median\":\n            self.group_amount_dict_[self.variables] =X.fillna(np.nan).groupby([self.groupby_variables])[self.variables].agg(['median']).to_dict()\n        else:\n            print('error , chose mean or median')\n        return self\n    \n    def transform(self, X: pd.DataFrame) -> pd.DataFrame:\n        X = X.copy()\n        #for col in self.variables:\n         #   for agg_type in self.groupping_method:\n        new_col_name =  self.variables+'_Transaction_'+ self.groupping_method\n        X[new_col_name] = X[self.groupby_variables].map(self.group_amount_dict_[ self.variables][self.groupping_method])\n        return X[new_col_name].to_numpy().reshape(-1,1)    \n    \n################################################   \nclass FeaturesEngineerGroup2(BaseEstimator, TransformerMixin):\n    def __init__(self,groupping_method =\"mean\",\n                   variables=  \"amount\",\n                   groupby_variables = \"nameOrig\"                         \n                 ) :\n        self.groupping_method = groupping_method\n        self.variables=variables\n        self.groupby_variables=groupby_variables\n        \n    def fit(self, X, y=None):\n        \"\"\"\n        Learn the mean or median of  amount of each client which will be used to create new feature for each unqiue client in order to undersatant thier behavior .\n        Parameters\n        ----------\n        X: pandas dataframe of shape = [n_samples, n_features]\n        The training dataset. Can be the entire dataframe, not just the\n        variables to be transformed.\n        y: pandas Series, default = None\n        y is not needed in this encoder. You can pass y or None.\n        \"\"\"\n        X = X.copy()\n        self.group_amount_dict_ = {}\n        #df.groupby('card1')['TransactionAmt'].agg(['mean']).to_dict()\n        #temp = df.groupby('card1')['TransactionAmt'].agg(['mean']).rename({'mean':'TransactionAmt_card1_mean'},axis=1)\n        #df = pd.merge(df,temp,on='card1',how='left')\n        #target_mean = df_train.groupby(['id1', 'id2'])['target'].mean().rename('avg')\n        #df_test = df_test.join(target_mean, on=['id1', 'id2'])\n        #lifeExp_per_continent = gapminder.groupby('continent').lifeExp.mean()\n        # learn mean\/medain \n        #for groupby in self.groupby_variables:\n         #   for var in self.variables:\n\n        print('we have {} unique clients'.format(X[self.groupby_variables].nunique()))\n        new_col_name =  self.variables+'_Transaction_'+ self.groupping_method    \n        X[new_col_name] = X.groupby([self.groupby_variables])[[self.variables]].transform(self.groupping_method)\n        X = X.drop_duplicates(['nameOrig'])\n    \n        self.group_amount_dict_ = dict(zip(X[self.groupby_variables], X[new_col_name]))\n        del X\n        #print('we have {} unique mean amount : one for each client'.format(len(self.group_amount_dict_)))\n        return self\n    \n    def transform(self, X: pd.DataFrame) -> pd.DataFrame:\n        X = X.copy()\n        #for col in self.variables:\n         #   for agg_type in self.groupping_method:\n        new_col_name =  self.variables+'_Transaction_'+ self.groupping_method\n        X[new_col_name] = X[self.groupby_variables].map(self.group_amount_dict_)\n        return X[new_col_name].to_numpy().reshape(-1,1)   \n    \n############################################  \nclass FeaturesEngineerCumCount(BaseEstimator, TransformerMixin):\n    def __init__(self,group_one =\"step\",\n                   group_two=  \"nameOrig\"                       \n                 ) :\n        self.group_one =group_one\n        self.group_two=group_two\n        \n    def fit(self, X, y=None):\n        \"\"\"\n        \"\"\"\n        return self\n    \n    def transform(self, X: pd.DataFrame) -> pd.DataFrame:\n        X = X.copy()\n        new_col_name =  self.group_two+'_Transaction_count'\n        X[new_col_name] = X.groupby([self.group_one, self.group_two])[[self.group_two]].transform('count')\n        return X[new_col_name].to_numpy().reshape(-1,1)","6b8903c6":"# Cat columns: \ncat_pipe = Pipeline([\n                     ('Encoder',ce.target_encoder.TargetEncoder())\n                     \n                    ])\n#Num_columns:\nnum_pipe = Pipeline([('imputer', SimpleImputer(strategy='median',add_indicator=False)),\n                     ('scaler', QuantileTransformer())\n                    ])\n#Feature Union fitting training data :\npreprocessor = FeatureUnion(transformer_list=[('cat', cat_pipe),\n                                              ('num', num_pipe)])\n# Using ColumnTransformer:\ndata_cleaning = ColumnTransformer([\n    ('cat_columns',  cat_pipe, cat_columns ),\n    ('num_columns', num_pipe , num_columns)\n])\n# preprocessor.fit(X_train)\n#############################\n# Complete Pipe \ndef create_pipeline(model,preprocessor,FeaturesEngineer=None):\n    pipeline = Pipeline([ \n        ('pre', preprocessor),\n        ('lgbm', model)\n    ])\n    return pipeline\npreprocessor ","a238c99a":"# complete pipe :\n# select the float\/cat columns\n#cat_feautres = X.select_dtypes(include=['object','category']).columns\n#num_features = X.select_dtypes(exclude=['object','category']).columns\n#Define vcat pipeline\nfeatures_cum_count=['step','nameOrig']\nfeatures_groupby_amount=['amount','nameOrig']\nfeatures_frequency_orig_dest=['nameOrig','nameDest']\nfeatures_cum_count_pipe = Pipeline([\n                     ('transformer_Encoder', FeaturesEngineerCumCount())\n                    ])\nfeatures_groupby_pipe = Pipeline([\n                     ('transformer_group_amount_mean', FeaturesEngineerGroup2()),\n                     ('transformer_group_scaler', PowerTransformer())\n                    ])\nfeatures_frequency_pipe = Pipeline([\n                     ('Encoder', CountFrequencyEncoder(variables=['nameOrig','nameDest'],encoding_method =\"frequency\", keep_variable=False))\n                    ])\ntype_pipe= Pipeline([\n                     ('transformer_Encoder', ce.cat_boost.CatBoostEncoder())\n                    ])\nnum_features0=[  'amount',  'oldbalanceOrig', 'newbalanceOrig' ,'oldbalanceDest', 'newbalanceDest']\n#Define vnum pipeline\nnum_pipe = Pipeline([\n                     ('scaler', PowerTransformer()),\n                    ])\n#Featureunion fitting training data\npreprocessor = FeatureUnion(transformer_list=[('cum_count', features_cum_count_pipe),\n                                              ('mean_amount', features_groupby_pipe),\n                                              ('frequency_dest_orig', features_frequency_pipe),\n                                              ('trans_type', type_pipe),\n                                              ('num', num_pipe)])\ndata_preparing= ColumnTransformer([\n    ('cum_count', features_cum_count_pipe, features_cum_count ),\n    ('mean_amount', features_groupby_pipe, features_groupby_amount ),\n    ('frequency_dest_orig', features_frequency_pipe, features_frequency_orig_dest ),\n    ('trans_type', type_pipe, ['type'] ),\n    ('num', num_pipe, num_features0)\n], remainder='drop')\ndata_preparing","2dedeaf8":"data_preparing.fit(X,y)\nx_pre = data_preparing.transform(X)","18f42b68":"def objectivelgbm(trial,data=x_pre,target=y):\n    # Optuna+cv :\n    #https:\/\/www.kaggle.com\/hamidrezabakhtaki\/xgboost-catboost-lighgbm-optuna-final-submission\n    # https:\/\/www.kaggle.com\/prashant111\/lightgbm-classifier-in-python\n    # https:\/\/www.kaggle.com\/tunguz\/tps-09-21-histgradientboosting-with-optuna\n    X_train,X_test, y_train,  y_test = train_test_split(data, target, \n                                                        test_size=0.2,\n                                                        random_state=42,shuffle=False)\n    params = {\"n_estimators\" : trial.suggest_int(\"n_estimators\" , 1000 , 15000),\n             \"max_depth\" : trial.suggest_int(\"max_depth\", 2,20),\n             \"learning_rate\": trial.suggest_float(\"learning_rate\",0.005 ,0.2),\n             #\"reg_alpha\": trial.suggest_float(\"reg_alpha\" , 0.001 , 10 ),\n             #\"reg_lambda\" : trial.suggest_float(\"reg_lambda\" , 0.001 , 10),\n             \"lambda_l1\": trial.suggest_float(\"lambda_l1\", 1e-8, 10.0, log=True),\n             \"lambda_l2\": trial.suggest_float(\"lambda_l2\", 1e-8, 10.0, log=True),\n             \"num_leaves\": trial.suggest_int(\"num_leaves\", 2, 256),\n             #\"num_leaves\":trial.suggest_int(\"num_leaves\" , 50 ,500),\n             \"feature_fraction\": trial.suggest_float(\"feature_fraction\", 0.4, 1.0),\n             \"bagging_fraction\": trial.suggest_float(\"bagging_fraction\", 0.4, 1.0),\n             \"bagging_freq\": trial.suggest_int(\"bagging_freq\", 1, 7),\n             \"min_child_samples\": trial.suggest_int(\"min_child_samples\", 5, 100),\n             #\"min_data_per_group\":trial.suggest_int(\"min_data_per_group\",50,200),\n             #\"min_child_samples\":trial.suggest_int(\"min_child_samples\",5,200),\n             #\"colsample_bytree\":trial.suggest_float(\"colsample_bytree\",0.1 ,0.8),\n             \"objective\": \"binary\",\n             #\"metric\": \"binary_logloss\",\n             \"verbosity\": -1,\n             \"boosting_type\": \"gbdt\",\n             \"random_state\": 228,\n             \"metric\": \"auc\",\n             #\"device\": \"gpu\",\n             'tree_method': \"gpu_hist\",\n             }\n    \n    model  = LGBMClassifier(**params)\n    \n    model.fit( X_train, y_train,\n              eval_set=[(X_test, y_test)],\n              early_stopping_rounds=250,\n              verbose=False\n             )\n    #pipeline_model_lgbm.fit(X_train,y_train)\n    preds = model.predict_proba(X_test)[:,1]\n    #oof[test_idx] = preds\n    average_precesion = average_precision_score(y_true= y_test, y_score= preds)\n    return average_precesion","d9f5144e":"study_lgbm = optuna.create_study(direction=\"maximize\")\nstudy_lgbm.optimize(objectivelgbm ,n_trials=20)","081741a0":"print(\"Numbers of finished trials : \" , len(study_lgbm.trials))\nprint(\"Best Trials : \", study_lgbm.best_trial.params)\nprint(\"Best Values : \" , study_lgbm.best_value)","bf53fc31":"study_lgbm.best_params","2fd57a1f":"# Advanced Pipe :\nThis pipe include features engineer+ some advanced preprocessing steps for each columns.","52a796a3":"## Define the model features and target\n\n### Extract X and y ","d040c821":"\nAll thing is ready So let's start \ud83c\udfc4\u200d\u00b6\n\n    Note that the objective of our fuction is to maximize the 'average_precesion' that's why I set direction='maximize'\n    you can vary n_trials(number of executions)","54936af5":"# check that we have all column","df53696c":"<a id=0><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:#1777C4; border:0' role=\"tab\" aria-controls=\"home\"><center>CRISP-DM Methodology<\/center><\/h3>\n\n* [Buissness Understanding](#1)\n* [Data Understanding](#2)\n* [Data Preparation](#3)\n* [Data Modeling](#4)   \n* [Data Evaluation](#5)\n* [Data Deploy](#6)\n    \n\nIn this section we overview our selected method for engineering our solution. CRISP-DM stands for Cross-Industry Standard Process for Data Mining. It is an open standard guide that describes common approaches that are used by data mining experts. CRISP-DM includes descriptions of the typical phases of a project, including tasks details and provides an overview of the data mining lifecycle. The lifecycle model consists of six phases with arrows indicating the most important and frequent dependencies between phases. The sequence of the phases is not strict. In fact, most projects move back and forth between phases as necessary. It starts with business understanding, and then moves to data understanding, data preparation, modelling, evaluation, and deployment. The CRISP-DM model is flexible and can be customized easily.\n## Buissness Understanding\n\n    Tasks:\n\n    1.Determine business objectives\n\n    2.Assess situation\n\n    3.Determine data mining goals\n\n    4.Produce project plan\n\n## Data Understanding\n     Tasks:\n\n    1.Collect data\n\n    2.Describe data\n\n    3.Explore data    \n\n## Data Preparation\n    \n    Tasks:\n    \n    1.Data selection\n\n    2.Data preprocessing\n\n    3.Feature engineering\n\n    4.Dimensionality reduction\n\n            Steps:\n\n            Data cleaning\n\n            Data integration\n\n            Data sampling\n\n            Data dimensionality reduction\n\n            Data formatting\n\n            Data transformation\n\n            Scaling\n\n            Aggregation\n\n            Decomposition\n\n## Data Modeling :\n\nModeling is the part of the Cross-Industry Standard Process for Data Mining (CRISP-DM) process model that i like best. Our data is already in good shape, and now we can search for useful patterns in our data.\n\n   Tasks:\n    \n    1. Select modeling technique Select technique\n\n    2. Generate test design\n\n    3. Build model\n\n    4. Assess model\n\n## Data Evaluation :\n    \n    Tasks:\n\n    1.Evaluate Result\n\n    2.Review Process\n\n    3.Determine next steps\n\n<a id=1><\/a>\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:#1777C4; border:0' role=\"tab\" aria-controls=\"home\">\n<center>Buissness Understanding<\/center><\/h3>\nThere may be two types of questions:\n\n**A.Technical Questions:**\n  \nCan ML be a solution to the problem?\n\n    \n                Do we have THE data?\n                Do we have all necessary related data?\n                Is there enough amount of data to develop algorithm?\n                Is data collected in the right way?\n                Is data saved in the right format?\n                Is the access to information guaranteed?\n\nCan we satisfy all the Business Questions by means of ML?\n\n**B.Business Questions:**\n    \nWhat are the organization's business goals?\n    \n                To reduce cost and increase revenue? \n                To increase efficiencies?\n                To avoid risks? To improve quality?\n    \nIs it worth to develop ML?\n    \n                In short term? In long term?\n                What are the success metrics?\n                Can we handle the risk if the project is unsuccessful?\n    \nDo we have the resources?\n    \n                Do we have enough time to develop ML?\n                Do we have a right talented team?\n\n\n    \nWE are provided a synthetic dataset for a mobile payments application. In this dataset, you are provided the sender and recipient of a transaction as well as whether transactions are tagged as fraud or not fraud. Your task is to build a fraud detection API that can be called to predict whether or not a transaction is fraudulent.\nYou can download the dataset here:https:\/\/www.kaggle.com\/bannourchaker\/frauddetection\n    \nYou are expected to build a REST API that predicts whether a given transaction is fraudulent or not. You are also to assume that the previous API calls are to be stored in order to engineer\nfeatures relevant to finding fraud. The API calls will include the time step of the transaction, so you can assume that a transaction happens sequentially within the same time step.\nFor example, if I make the following transactions in the same time step:  \n    \n![image.png](attachment:c6d681b2-1201-43b2-a5cf-587bd46f7839.png)\n    \nThe first transaction is unlikely to be fraudulent, since anon is initiating a normal transfer.\nHowever, multiple successive transfers of the same amount in the same hour is potentially fraudulent, since anon\u2019s account might have been taken over by a fraudster. On the first API call,your model is unlikely to classify the transaction as fraudulent. However, on the fifth call, it\u2019s likely that it will be tagged as fraudulent.\nThe REST API only has 1 endpoint \/is-fraud that takes in a POST request:\n    \nThe body is expected to receive the following fields(which are also the fields that can be found in your dataset:\nThe following is a sample body when making a POST request to your\n    \n    \n            {\n        \"step\":1,\n        \"type\":\"PAYMENT\",\n        \"amount\":9839.64,\n        \"nameOrig\":\"C1231006815\",\n        \"oldbalanceOrig\":170136.0,\n        \"newbalanceOrig\":160296.36,\n        \"nameDest\":\"M1979787155\",\n        \"oldbalanceDest\":0.0,\n        \"newbalanceDest\":0.0\n        }\n    \n    \nYour API is expected to return a JSON object with a boolean field isFraud. You may find a\nsample response below:\n    \n    {\"isFraud\": true}\n    \n**summary:**\nwe are expecting the following:\n    \n- 1. Deployed REST API:\n    \n    a. As mentioned above, we would need an API that takes in a POST request for the\n    \/is-fraud url and returns a prediction on whether or not a transaction is\n    fraudulent.\n    \n    b. Your REST API should be public for us to call the API and evaluate the accuracy\n    of your model\n    \n    c. Given the nature of the data, your REST API will likely need to take into account\n    previous transactions, so make sure it is able to take note of transactions from\n    your training dataset as well as previous API calls.\n\n- 2. Model\n    \n    a. We are expecting a machine learning model that can correctly classify whether or\n    not a transaction is fraudulent.\n\n**What is the objective of the machine learning model?**\n\nWe aim to predict  the real transactions fraud  and the fraud estimated by our model. We will evaluate model performance with the:\n\n   - F beta score\n    \n   - ROC AUC score\n    \n   - PR AUC score | Average precision\n    \n    \n## Step 1: Import helpful libraries","c9937ebf":"<a id=7><\/a>\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:#1777C4; border:0' role=\"tab\" aria-controls=\"home\">\n<center>Summary<\/center><\/h3> \n\nWe had developed end-to-end machine learning using the CRISP_DM methodology. Work still in progress. Always keep in mind that the data science \/ ML project must be done as a team and iteratively in order to properly exploit our data and add value to our business. Also keep in mind that AI helps you make the decision by using the added value extracted from the data but not the accountability. So we have to keep in mind to always use a composite AI in order to make the final decision.\nDon't forgot to upvote if you find it useful .\n\nfor complete deployement baseline see : \n\nhttps:\/\/github.com\/DeepSparkChaker\/FraudDetection_Fastapi\n\nReferences :\n\nhttps:\/\/developer.nvidia.com\/blog\/leveraging-machine-learning-to-detect-fraud-tips-to-developing-a-winning-kaggle-solution\/\n\npython guidline : \n\nhttps:\/\/gist.github.com\/sloria\/7001839\n\nfeatures  selections :\n\nhttps:\/\/www.kaggle.com\/sz8416\/6-ways-for-feature-selection\n\nhttps:\/\/pub.towardsai.net\/feature-selection-and-removing-in-machine-learning-dd3726f5865c\n\nhttps:\/\/www.kaggle.com\/bannourchaker\/1-featuresengineer-selectionpart1?scriptVersionId=72906910\n\nCripspdm :\nhttps:\/\/www.kaggle.com\/bannourchaker\/4-featureengineer-featuresselectionpart4?scriptVersionId=73374083\n\nQuanrile transformer : \n\nhttps:\/\/machinelearningmastery.com\/quantile-transforms-for-machine-learning\/\n\nBest link for all : \n\nhttps:\/\/neptune.ai\/blog\/tabular-data-binary-classification-tips-and-tricks-from-5-kaggle-competitions\n\ncomplete guide Stacking :\n\nhttps:\/\/www.analyticsvidhya.com\/blog\/2021\/08\/ensemble-stacking-for-machine-learning-and-deep-learning\/\n\nhttps:\/\/neptune.ai\/blog\/ensemble-learning-guide\n\nhttps:\/\/www.kaggle.com\/prashant111\/adaboost-classifier-tutorial\n\n\nMissing : \n\nhttps:\/\/www.kaggle.com\/dansbecker\/handling-missing-values\n\nBinning : \n\nhttps:\/\/heartbeat.fritz.ai\/hands-on-with-feature-engineering-techniques-variable-discretization-7deb6a5c6e27\n\nhttps:\/\/www.analyticsvidhya.com\/blog\/2020\/10\/getting-started-with-feature-engineering\/\n\nCat :\n\nhttps:\/\/innovation.alteryx.com\/encode-smarter\/\n\nhttps:\/\/github.com\/alteryx\/categorical_encoding\/blob\/main\/guides\/notebooks\/categorical-encoding-guide.ipynb\n\nhttps:\/\/www.analyticsvidhya.com\/blog\/2020\/08\/types-of-categorical-data-encoding\/\n\nhttps:\/\/maxhalford.github.io\/blog\/target-encoding\/\n\n\nChoice of kmeans : \n\nhttps:\/\/www.analyticsvidhya.com\/blog\/2021\/05\/k-mean-getting-the-optimal-number-of-clusters\/\n\nImputation : \n\nhttps:\/\/machinelearningmastery.com\/knn-imputation-for-missing-values-in-machine-learning\/\n\nhttps:\/\/machinelearningmastery.com\/iterative-imputation-for-missing-values-in-machine-learning\/\n\nChoice of  roc vs precssion_recall : \n\nhttps:\/\/machinelearningmastery.com\/roc-curves-and-precision-recall-curves-for-classification-in-python\/\n\n\nhttps:\/\/machinelearningmastery.com\/roc-curves-and-precision-recall-curves-for-classification-in-python\/\n\n\nHow to tune for he futur work : \n\nhttps:\/\/www.kaggle.com\/hamidrezabakhtaki\/xgboost-catboost-lighgbm-optuna-final-submission\n\nhttps:\/\/www.kaggle.com\/bextuychiev\/lgbm-optuna-hyperparameter-tuning-w-understanding\n\n\n\nDeploy:\n\n https:\/\/github.com\/DeepSparkChaker\/Titanic_Deep_Spark\/blob\/main\/app.py\nhttps:\/\/github.com\/Kunal-Varma\/Deployment-of-ML-model-using-FASTAPI\/tree\/2cc0319abbec469010a5139f460004f2a75a7482\nhttps:\/\/realpython.com\/fastapi-python-web-apis\/\n https:\/\/github.com\/tiangolo\/fastapi\/issues\/3373\n https:\/\/www.freecodecamp.org\/news\/data-science-and-machine-learning-project-house-prices\/\nhttps:\/\/github.com\/tiangolo\/fastapi\/issues\/1616\nhttps:\/\/stackoverflow.com\/questions\/68244582\/display-dataframe-as-fastapi-output\nhttps:\/\/www.kaggle.com\/sakshigoyal7\/credit-card-customers\nhttps:\/\/github.com\/renanmouraf\/data-science-house-prices    \nhttps:\/\/towardsdatascience.com\/data-science-quick-tips-012-creating-a-machine-learning-inference-api-with-fastapi-bb6bcd0e6b01\nhttps:\/\/towardsdatascience.com\/how-to-build-and-deploy-a-machine-learning-model-with-fastapi-64c505213857\nhttps:\/\/analyticsindiamag.com\/complete-hands-on-guide-to-fastapi-with-machine-learning-deployment\/\nhttps:\/\/github.com\/shaz13\/katana\/blob\/develop\/Dockerfile\n\nBest practices : \n    \nhttps:\/\/theaisummer.com\/best-practices-deep-learning-code\/    \nhttps:\/\/github.com\/The-AI-Summer\/Deep-Learning-In-Production\/tree\/master\/2.%20Writing%20Deep%20Learning%20code:%20Best%20Practises\n\n Docker : \n \nhttps:\/\/github.com\/dkhundley\/ds-quick-tips\/blob\/master\/012_dockerizing_fastapi\/Dockerfile\n\n Deploy + scaling :\nhttps:\/\/towardsdatascience.com\/deploying-ml-models-in-production-with-fastapi-and-celery-7063e539a5db\nhttps:\/\/github.com\/jonathanreadshaw\/ServingMLFastCelery\n\nhttps:\/\/github.com\/trainindata\/deploying-machine-learning-models\/blob\/aaeb3e65d0a58ad583289aaa39b089f11d06a4eb\/section-04-research-and-development\/07-feature-engineering-pipeline.ipynb\n","3bc5903d":"<a id=5><\/a>\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:#1777C4; border:0' role=\"tab\" aria-controls=\"home\">\n<center>Evaluation<\/center><\/h3>\n\n# Model accuracy scoring\n\nThe easiest way to analyze performance is with accuracy. \nIt measures how many observations, both positive and negative, were correctly classified.\n\n\nYou shouldn\u2019t use accuracy on imbalanced problems. Then, it is easy to get a high accuracy score by simply classifying all observations as the majority class. For example in our case, by classifying all transactions as non-fraudulent we can get an accuracy of over 0.9.\n\n**When to use it:**\n\n    When your problem is balanced using accuracy is usually a good start. An additional benefit is that it is really easy to explain it to non-technical stakeholders in your project,\n    When every class is equally important to you.\n\n# Confusion Matrix\n\n**How to compute:**\n\nIt is a common way of presenting true positive (tp), true negative (tn), false positive (fp) and false negative (fn) predictions. Those values are presented in the form of a matrix where the Y-axis shows the true classes while the X-axis shows the predicted classes.\n\nIt is calculated on class predictions, which means the outputs from your model need to be thresholded first.\n\n**When to use it:**\n\n    Pretty much always. I like to see the nominal values rather than normalized to get a feeling on how the model is doing on different, often imbalanced, classes.\n\n\n\n# ROC Curve\n\n\nIt is a chart that visualizes the tradeoff between true positive rate (TPR) and false positive rate (FPR). Basically, for every threshold, we calculate TPR and FPR and plot it on one chart.\n\nOf course, the higher TPR and the lower FPR is for each threshold the better and so classifiers that have curves that are more top-left side are better.\n\nSince we have an imbalanced data set, Receiver Operating Characteristic Curves are not that useful although it's an expected output of most binary classifiers.\nBecause you can generate a pretty good-looking curve by just simply guessing each one is the non-fraud case.\n\n**When to use it:**\n\n    You should use it when you ultimately care about ranking predictions and not necessarily about outputting well-calibrated probabilities (read this article by Jason Brownlee if you want to learn about probability calibration).\n    You should not use it when your data is heavily imbalanced. It was discussed extensively in this article by Takaya Saito and Marc Rehmsmeier. The intuition is the following: false positive rate for highly imbalanced datasets is pulled down due to a large number of true negatives.\n    You should use it when you care equally about positive and negative classes.. If we care about true negatives as much as we care about true positives then it totally makes sense to use ROC AUC.\n    \n# ROC AUC score   \nAUC - ROC curve is a performance measurement for the classification problems at various threshold settings. ROC is a probability curve and AUC represents the degree or measure of separability. It tells how much the model is capable of distinguishing between classes. Higher the AUC, the better the model is at predicting 0 classes as 0 and 1 classes as 1. By analogy, the Higher the AUC, the better the model is at distinguishing between patients with the disease and no disease. The ROC curve is plotted with TPR against the FPR where TPR is on the y-axis and FPR is on the x-axis.\n\n**When to use it:**\n\n    You should use it when you ultimately care about ranking predictions and not necessarily about outputting well-calibrated probabilities (read this article by Jason Brownlee if you want to learn about probability calibration).\n    You should not use it when your data is heavily imbalanced. It was discussed extensively in this article by Takaya Saito and Marc Rehmsmeier. The intuition is the following: false positive rate for highly imbalanced datasets is pulled down due to a large number of true negatives.\n    You should use it when you care equally about positive and negative classes. It naturally extends the imbalanced data discussion from the last section. If we care about true negatives as much as we care about true positives then it totally makes sense to use ROC AUC.\n\n# Recall    \nIt measures how many observations out of all positive observations have we classified as positive. It tells us how many fraudulent transactions we recalled from all fraudulent transactions.\ntrue positive rate\n\nWhen you are optimizing recall you want to put all guilty in prison.\n\n**When to use it:**\n\n    Usually, you will not use it alone but rather coupled with other metrics like precision.\n    That being said, recall is a go-to metric, when you really care about catching all fraudulent transactions even at a cost of false alerts. Potentially it is cheap for you to process those alerts and very expensive when the transaction goes unseen.\n    \n# Precision\n\nIt measures how many observations predicted as positive are in fact positive. Taking our fraud detection example, it tells us what is the ratio of transactions correctly classified as fraudulent.\npositive predictive value\n\nWhen you are optimizing precision you want to make sure that people that you put in prison are guilty. \n\n**When to use it:**\n\n    Again, it usually doesn\u2019t make sense to use it alone but rather coupled with other metrics like recall.\n    When raising false alerts is costly, when you want all the positive predictions to be worth looking at you should optimize for precision.\n    \n\n\n**Precision vs. Recall for Imbalanced Classification:**\n\nYou may decide to use precision or recall on your imbalanced classification problem.\n\nMaximizing precision will minimize the number false positives, whereas maximizing the recall will minimize the number of false negatives.\n\n    Precision: Appropriate when minimizing false positives is the focus.\n    Recall: Appropriate when minimizing false negatives is the focus.\n\nSometimes, we want excellent predictions of the positive class. We want high precision and high recall.\n\nThis can be challenging, as often increases in recall often come at the expense of decreases in precision.\n\n    In imbalanced datasets, the goal is to improve recall without hurting precision. These goals, however, are often conflicting, since in order to increase the TP for the minority class, the number of FP is also often increased, resulting in reduced precision.\n    \n    \n# PR AUC score | Average precision\n\nSimilarly to ROC AUC score you can calculate the Area Under the Precision-Recall Curve to get one number that describes model performance.\n\nYou can also think about PR AUC as the average of precision scores calculated for each recall threshold [0.0, 1.0]. You can also adjust this definition to suit your business needs by choosing\/clipping recall thresholds if needed.\n\n**When to use it:**\n\n    when you want to communicate precision\/recall decision to other stakeholders\n    when you want to choose the threshold that fits the business problem.\n    when your data is heavily imbalanced. As mentioned before, it was discussed extensively in this article by Takaya Saito and Marc Rehmsmeier. The intuition is the following: since PR AUC focuses mainly on the positive class (PPV and TPR) it cares less about the frequent negative class.\n    when you care more about positive than negative class. If you care more about the positive class and hence PPV and TPR you should go with Precision-Recall curve and PR AUC (average precision).\n    \n# F beta score\n\nSimply put, it combines precision and recall into one metric. The higher the score the better our model is. You can calculate it in the following way:\n\n\n![image.png](attachment:1e5607fe-0ad4-4a5e-b675-189db787124b.png)\n\n\nWhen choosing beta in your F-beta score the more you care about recall over precision the higher beta you should choose. For example, with F1 score we care equally about recall and precision with F2 score, recall is twice as important to us.\nF beta by beta\n\nWith 0<beta<1 we care more about precision and so the higher the threshold the higher the F beta score. When beta>1 our optimal threshold moves toward lower thresholds and with beta=1 it is somewhere in the middle.  \n\n**When to use it:**\n\n    Pretty much in every binary classification problem. It is my go-to metric when working on those problems. It can be easily explained to business stakeholders.\n    \n for more details see this article:[https:\/\/neptune.ai\/blog\/evaluation-metrics-binary-classification](http:\/\/)    \n \n==>Complete evaluation will be done when we train the model on all data that we have and with the best tuned model.","66b3ada1":"**Num Features**\n\n","57e6f78f":" # Baseline Pipe :\n This is  the first round to get the best preprocess steps ","b49a06e2":"<a id=6><\/a>\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:#1777C4; border:0' role=\"tab\" aria-controls=\"home\">\n<center>Deploy<\/center><\/h3>\n\nThe deployment of machine learning models is the process for making models available in production environments, where they can provide predictions to other software systems.\n\n\u25cfOne of the last stages in the Machine Learning Lifecycle.\n\n\u25cfPotentially the most challenging stage.\n\n\u25cfChallenges of traditional software\n\noReliability\noReusability\noMaintainability\noFlexibility\n\n\u25cfAdditional challenges specific to Machine Learning\n\noReproducibility\n\nNeeds coordination of data scientists, IT teams, software developers and business professionals:\n\noEnsure model works reliably\noEnsure model delivers the intended result.\n\n\u25cfPotential discrepancy between programming language in which the model is developed and the production system language.\n\noRe-coding the model extends the project timeline and risks lack of reproducibility\n\nWhy is Model Deployment important?\n\n\u25cfTo start using a Machine Learning Model, it needs to be effectively deployed into production, so that they can provide predictions to other software systems.\n\n\u25cfTo maximize the value of the Machine Learning Model, we need to be able to reliably extract the predictions and share them with other systems.\n\n![image.png](attachment:2de583ad-bc7d-4a96-b0d5-6d89549d96c0.png)\n\n**Research Environment**\n\n\u25cfThe Research Environment is a setting with tools, programs and software suitable for data analysis and the development of machine learning models.\n\n\u25cfHere, we develop the Machine Learning Models and identify their value.\nIts done by a data scientist : i prefer work on jupyter for this phase .\n\n**Production Environment**\n\n\u25cfThe Production Environment is a real-time setting with running programs and hardware setups that allow the organization\u2019s daily operations.\n\n\u25cfIt\u2019s the place where the machine learning models is actually available for business use.\n\n\u25cfIt allows organisations to show clients a \u201clive\u201d service.\nThis job is done by solid sofware+ml engineer+ devops team\n\n![image.png](attachment:691b6fb5-b6cc-499a-ac75-73439be05e2b.png)\n\nwe have 4 ways to deploy models .\nML System Architectures:\n1. Model embedded in application\n![image.png](attachment:b8994531-30eb-4890-b7eb-848eff7843c3.png)\n2. Served via a dedicated service\n![image.png](attachment:6938938c-101f-4bb1-acd5-2786d3618285.png)\n3. Model published as data(streaming)\n![image.png](attachment:0d257ba6-39f9-46e2-b535-bf181fbdfea1.png)\n4. Batch prediction (offline process)\n![image.png](attachment:74857300-8d62-4489-a1a5-1d9e47b531b2.png)\n\nI developed  a baseline how to deploy model using Fastapi+docker on herokou :\n\nhttps:\/\/github.com\/DeepSparkChaker\/FraudDetection_Fastapi\n\n![image.png](attachment:c1aff2f2-ba80-4012-9c04-94348ff3b99b.png)\nComplete deployment of our model is done here : \n","c234f797":"# Convert Dtypes :","749296d8":"<a id=4><\/a>\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:#1777C4; border:0' role=\"tab\" aria-controls=\"home\">\n<center>Modeling<\/center><\/h3>\n\n\nModeling is the part of the Cross-Industry Standard Process for Data Mining (CRISP-DM) process model that i like best. Our data is already in good shape, and now we can search for useful patterns in our data.\n\n\nTasks\n\n1. Select modeling technique Select technique\n\n2. Generate test design\n\n3. Build model\n\n4. Assess model\n\n# Tuning The best Model: \n# Optuna\n\n## Basic Concepts\n\n\nSo, We use the terms study and trial as follows:\n\n    Study: optimization based on an objective function\n    \n    Trial: a single execution of the objective function\n\n\nLet's build our optimization function using optuna\nThis function uses LGBMRegressor model, takes\n\n    the data\n    the target\n    trial(How many executions we will do)\n    #### and returns average precision\n\nNotes:\n\n    Note that I used some LGBMClassifier hyperparameters from LGBM official site.\n    So if you like to add more parameters or change them, check this links:\n    https:\/\/github.com\/solegalli\/optuna-examples\/blob\/main\/lightgbm\/lightgbm_simple.py\n    https:\/\/www.kaggle.com\/hamidrezabakhtaki\/xgboost-catboost-lighgbm-optuna-final-submission\n    Also I used early_stopping_rounds to avoid overfiting","fe272da6":"<a id=\"Introduction\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:#1777C4; border:0' role=\"tab\" aria-controls=\"home\"><center>Introduction<\/center><\/h3>\n    \nDue to rapid growth in field of cashless or digital \ntransactions, credit cards are widely used in all \naround the world. Credit cards providers are \nissuing thousands of cards to their customers.\n Providers have to ensure all the credit card users \nshould be genuine and real. Any mistake in issuing \na card can be reason of financial crises. \nDue to rapid growth in cashless transaction,\n the chances of number of fraudulent transactions can also increasing.\n A Fraud transaction can be identified by analyzing various\n behaviors of credit card customers from previous \ntransaction history datasets. If any deviation\n is noticed in spending behavior from available patterns, \nit is possibly of fraudulent transaction. \nData mining and machine learning techniques are widely used in credit card \nfraud detection. In this article we are presenting review \nof various data mining and machine learning methods\n which are widely used for credit card fraud detections and  complete this project end to end from Data Understanding to deploy Model via API .  \n    \n    \n ","cd429a10":"# What should we do for each colmun\n\n**Separate features by dtype**\n\nNext we\u2019ll separate the features in the dataframe by their datatype. There are a few different ways to achieve this. I\u2019ve used the select_dtypes() function to obtain specific data types by passing in np.number to obtain the numeric data and exclude=['np.number'] to return the categorical data. Appending .columns to the end returns an Index list containing the column names. For the categorical features, we don\u2019t want to include the target income column, so I\u2019ve dropped that.\n\n**Cat Features**\n\n\n\n","67e68471":"Trial 1 finished with value: 0.9622298729875456 and parameters: {'n_estimators': 7754, 'max_depth': 19, 'learning_rate': 0.03172495736314569, 'lambda_l1': 0.010382922962591344, 'lambda_l2': 7.727590411160788, 'num_leaves': 233, 'feature_fraction': 0.778253135412633, 'bagging_fraction': 0.4052195195307353, 'bagging_freq': 6, 'min_child_samples': 30}. Best is trial 1 with value: 0.9622298729875456.\n\nTrial 2 finished with value: 0.9657162070406315 and parameters: {'n_estimators': 13989, 'max_depth': 17, 'learning_rate': 0.0995548509195325, 'lambda_l1': 2.3274797150301878e-06, 'lambda_l2': 0.28640732251821044, 'num_leaves': 92, 'feature_fraction': 0.7747188287354188, 'bagging_fraction': 0.518608208211359, 'bagging_freq': 7, 'min_child_samples': 83}. Best is trial 2 with value: 0.9657162070406315.\n\nTrial 11 finished with value: 0.9711802295228923 and parameters: {'n_estimators': 13577, 'max_depth': 20, 'learning_rate': 0.008154530659243896, 'lambda_l1': 2.0940473153123936e-08, 'lambda_l2': 0.3857273170815719, 'num_leaves': 91, 'feature_fraction': 0.5944390170871048, 'bagging_fraction': 0.7582029548687745, 'bagging_freq': 1, 'min_child_samples': 73}. Best is trial 11 with value: 0.9711802295228923.","24272af1":"\n## Step 2: Load the data\nComplete guid to read data : \nNext, we'll load the training and test data.","690df820":"Best Trials cpu10 :  {'n_estimators': 10034, 'max_depth': 16, 'learning_rate': 0.022451555166837434, 'lambda_l1': 0.0003181286921665397, 'lambda_l2': 0.009510379358327329, 'num_leaves': 205, 'feature_fraction': 0.7727430628970235, 'bagging_fraction': 0.5200122463868991, 'bagging_freq': 1, 'min_child_samples': 91}\nBest Values :  0.9691524566845355","de2eed7c":"<a id=3><\/a>\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:#1777C4; border:0' role=\"tab\" aria-controls=\"home\">\n<center>Data Preparation<\/center><\/h3>\n\n\n## Data preprocessing\n\nData preprocessing comes after you've cleaned up your data and after you've done some exploratory analysis to understand your dataset. Once you understand your dataset, you'll probably have some idea about how you want to model your data. Machine learning models in Python require numerical input, so if your dataset has categorical variables, you'll need to transform them. Think of data preprocessing as a prerequisite for modeling.\nThis Step is Done Here :\n[https:\/\/www.kaggle.com\/bannourchaker\/frauddetection-part2-preparation\/edit](http:\/\/)\n\n","438a7173":"\n<a id=2><\/a>\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='color:white; background:#1777C4; border:0' role=\"tab\" aria-controls=\"home\">\n<center>Data Understanding<\/center><\/h3>\n\n\n### Explore the data\/Analysis \n\nWe will analyse the following:\n\n    The target variable\n    \n    Variable types (categorical and numerical)\n    \n    Numerical variables\n        Discrete\n        Continuous\n        Distributions\n        Transformations\n\n    Categorical variables\n        Cardinality\n        Rare Labels\n        Special mappings\n\n    Null Data\n\n    Text data \n    \n    wich columns will we use\n    \n    IS there outliers that can destory our algo\n    \n    IS there diffrent range of data\n    \n    Curse of dimm...\n    \nThis Step is done here : [https:\/\/www.kaggle.com\/bannourchaker\/frauddetection-part1-eda\/edit](http:\/\/)"}}