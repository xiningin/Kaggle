{"cell_type":{"a497b7f8":"code","913e65a1":"code","a3bbbb8d":"code","f75f9010":"code","d78e3b01":"code","916d0864":"code","6990f0cc":"code","3182b40a":"code","3748468a":"code","cc2b812f":"code","5e9621fb":"code","c26458a5":"code","0f1ff5d3":"code","ac13ff2b":"code","732a5645":"code","771b6cff":"code","51042037":"code","f0eef825":"markdown","45204f17":"markdown","7e74a63d":"markdown","46fc6137":"markdown","4381e5bc":"markdown","864b74d6":"markdown"},"source":{"a497b7f8":"%config Completer.use_jedi = False","913e65a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3bbbb8d":"messages = [line.rstrip() for line in open('\/kaggle\/input\/sms-spam-collection-dataset\/spam.csv', encoding = \"ISO-8859-1\")]\nprint(len(messages))","f75f9010":"for message_no, message in enumerate(messages[:10]):\n    print(message_no, message)","d78e3b01":"messages = pd.read_csv('\/kaggle\/input\/sms-spam-collection-dataset\/spam.csv',encoding=\"ISO-8859-1\")\nmessages.head()","916d0864":"messages = messages.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], axis=1)\nmessages = messages.rename(columns={'v1':'label', 'v2':'message'})\nmessages.head()","6990f0cc":"sns.countplot(data=messages, x = 'label')","3182b40a":"messages['message'].apply(len).plot(kind= 'hist', bins=50)","3748468a":"import string\nfrom nltk.corpus import stopwords\n\"\"\"\nTakes in a string of text, then performs the following:\n1. Removes all punctuation\n2. Removes all stopwords\n3. Returns a list of the cleaned text\n\"\"\"\ndef text_perprocessing(message):\n    \n    #check char to see if there are any punctuation\n    nopunc = [char for char in message if char not in string.punctuation]\n    nopunc = ''.join(nopunc)\n    \n    #remove any stopwords\n    return [word for word in nopunc.split() if word.lower() not in stopwords.words('english')]\n    ","cc2b812f":"messages['message'].head(5)","5e9621fb":"messages['message'].head(5).apply(text_perprocessing)","c26458a5":"from sklearn.model_selection import train_test_split\n\nX_train,X_test, y_train, y_test = train_test_split(messages['message'], messages['label'], test_size = 0.3, random_state = 0)","0f1ff5d3":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import accuracy_score\n\ncv = CountVectorizer(analyzer=text_perprocessing)\nX_train = cv.fit_transform(X_train)\nX_test = cv.transform(X_test)","ac13ff2b":"from sklearn.naive_bayes import MultinomialNB\n\nnb = MultinomialNB()\nnb.fit(X_train, y_train)\n\nnb_pred = nb.predict(X_test)\nnb_score = accuracy_score(y_test, nb_pred)\nnb_score","732a5645":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\nlr.fit(X_train, y_train)\n\nlr_pred = lr.predict(X_test)\nlr_score = accuracy_score(y_test, lr_pred)\nlr_score","771b6cff":"from sklearn.ensemble import RandomForestClassifier\nrmc = RandomForestClassifier(n_estimators=30)\nrmc.fit(X_train, y_train)\n\nrmc_pred = rmc.predict(X_test)\nrmc_score = accuracy_score(y_test, rmc_pred)\nrmc_score","51042037":"from sklearn.svm import SVC\nsvm = SVC()\nsvm.fit(X_train, y_train)\n\nsvm_pred = svm.predict(X_test)\nsvm_score = accuracy_score(y_test, svm_pred)\nsvm_score","f0eef825":"Logistic Regression","45204f17":"Random Forest Classifier","7e74a63d":"Support Vector Machine","46fc6137":"**Building the model**","4381e5bc":"Multinomial NB","864b74d6":"**Exploatory Data Analysis**"}}