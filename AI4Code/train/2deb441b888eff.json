{"cell_type":{"33436340":"code","eaad9070":"code","26f4a750":"code","6d937e92":"code","183a1a04":"code","c9a5a64d":"code","f4407b25":"code","2fc06115":"code","c7274834":"code","d852eac7":"code","43696652":"code","3137da66":"code","86b48002":"code","5de3aed3":"code","1fbaeac4":"code","93a08c97":"code","8ad648a7":"code","f43ea064":"code","7a08f694":"code","7ffaf19f":"code","1bfcc691":"code","b6197427":"code","e3b8935e":"code","b8439314":"code","db15e991":"code","b53f7bde":"code","8520fcaf":"markdown"},"source":{"33436340":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","eaad9070":"#bar plot\nmydata=pd.read_csv(\"..\/input\/Iris.csv\")\nlist_iris = list(mydata[\"Species\"].unique())\nSepalLength_ratio = []\nfor i in list_iris:\n    x = mydata[mydata[\"Species\"]==i]\n    Sepallenght_rate = sum(x.SepalLengthCm)\/len(x)\n    SepalLength_ratio.append(Sepallenght_rate)\ndata = pd.DataFrame({\"list_iris\":list_iris,\"SepalLength_ratio\":SepalLength_ratio})\nnew_index = (data[\"SepalLength_ratio\"].sort_values(ascending=False)).index.values\n# we will see our datas from bigest to smalest one because we choose False at ascending=False\n#if we choose ascending=True, we will see from smalest to bigest data\nsorted_data1 = data.reindex(new_index)\n\nplt.figure(figsize=(6,6))\nsns.barplot(x = sorted_data1[\"list_iris\"],y = sorted_data1[\"SepalLength_ratio\"])\nplt.xticks(rotation= 45)\nplt.xlabel(\"Species\")\nplt.ylabel(\"SepalLengthCm\")\nplt.title(\"iris species\")","26f4a750":"#we can check counts of our values\nmydata.Species.value_counts()","6d937e92":"mydata.head()","183a1a04":"#bar plot\nlist_iris = list(mydata[\"Species\"].unique())\nSepalWidth_ratio = []\nfor i in list_iris:\n    x = mydata[mydata[\"Species\"]==i]\n    SepalWidth_rate = sum(x.SepalWidthCm)\/len(x)\n    SepalWidth_ratio.append(SepalWidth_rate)\ndata = pd.DataFrame({\"list_iris\":list_iris,\"SepalWidth_ratio\":SepalWidth_ratio})\nnew_index = (data[\"SepalWidth_ratio\"].sort_values(ascending=True)).index.values\nsorted_data2 = data.reindex(new_index)\n\nplt.figure(figsize=(7,6))\nsns.barplot(x = sorted_data2[\"list_iris\"],y = sorted_data2[\"SepalWidth_ratio\"])\nplt.xticks(rotation= 45)\nplt.xlabel(\"Species\")\nplt.ylabel(\"SepalWidthCm\")\nplt.title(\"iris species\")","c9a5a64d":"mydata.info()","f4407b25":"#horizontal bar ploting with seaborn\nmydata_list = list(mydata[\"Species\"].unique())\nSepalLength = []\nSepalWidth = []\nPetalLength = []\nPetalWidth = []\n\nfor i in mydata_list:\n    x = mydata[mydata[\"Species\"]==i]\n    SepalLength.append(sum(x.SepalLengthCm)\/len(x))\n    SepalWidth.append(sum(x.SepalWidthCm)\/len(x))\n    PetalLength.append(sum(x.PetalLengthCm)\/len(x))\n    PetalWidth.append(sum(x.PetalWidthCm)\/len(x))\n\nf,ax =plt.subplots(figsize = (7,6))\nsns.barplot(x = SepalLength, y = mydata_list,color=\"yellow\",alpha=0.5,label=\"SepalLength\")\nsns.barplot(x = SepalWidth, y = mydata_list,color=\"red\",alpha=0.6,label=\"SepalWidth\")\nsns.barplot(x = PetalLength, y = mydata_list,color=\"green\",alpha=0.7,label=\"PetalLength\")\nsns.barplot(x = PetalWidth, y = mydata_list,color=\"blue\",alpha=0.8,label=\"PetalWidth\")\n\nax.legend(loc=\"upper right\",frameon=True)\nax.set(xlabel=\"Rate of the Species\",ylabel=\"Species\",title=\"iris Species\")","2fc06115":"#we found this sorted data when we plot the barplot\nsorted_data1.head()","c7274834":"#we found this sorted data when we plot the barplot\nsorted_data2.head()","d852eac7":"#SepalLength_ratio vs SepalWidth_ratio\n#to compare our datas we will make basiz normalization (divided with max value)\nsorted_data1[\"SepalLength_ratio\"]=sorted_data1[\"SepalLength_ratio\"]\/max(sorted_data1[\"SepalLength_ratio\"])\nsorted_data2[\"SepalWidth_ratio\"] = sorted_data2[\"SepalWidth_ratio\"]\/max(sorted_data2[\"SepalWidth_ratio\"])\n\n# we can combine our datas, which are SepalLength_ratio and SepalWidth_ratio\ndata = pd.concat([sorted_data1,sorted_data2[\"SepalWidth_ratio\"]],axis=1)\ndata.sort_values(\"SepalLength_ratio\",inplace=True)\n\nf,ax= plt.subplots(figsize = (20,16))\nsns.pointplot(x=\"list_iris\",y=\"SepalLength_ratio\",data=data,color=\"red\",alpha=0.4)\nsns.pointplot(x=\"list_iris\",y=\"SepalWidth_ratio\",data=data,color=\"yellow\",alpha=0.7)\nplt.text(40,0.6,\"mydata\",color=\"green\",fontsize=12,style=\"italic\")\nplt.text(40,0.5,\"SepalLength\",color=\"green\",fontsize=12,style=\"italic\")\nplt.xlabel(\"aaa\",fontsize=15,color=\"blue\")\nplt.ylabel(\"bbb\",fontsize=15,color=\"blue\")\nplt.title(\"SepalLength_ratio vs SepalWidth_ratio\")\nplt.grid()","43696652":"#combine of SepalLength_ratio and SepalWidth_ratio\ndata.head()","3137da66":"#joint plot\ng=sns.jointplot(data.SepalLength_ratio,data.SepalWidth_ratio,kind = \"kde\",size=7)\n#kind=\"scatter\",\"reg\",\"kde\",\"resid\",\"hex\"\n#kde=kernel densty estimation\nplt.savefig(\"iris.png\")\nplt.show()\n# pearsonr value give us correlation between our datas (SepalLength_ratio and SepalWidth_ratio)","86b48002":"#different joint plot\ns =sns.jointplot(\"SepalLength_ratio\",\"SepalWidth_ratio\",data=data,size=5,ratio=3,color=\"b\")","5de3aed3":"#pie graph\n#piecharm graph belongs to matplotlib\nlabels = mydata.Species.value_counts().index\ncolors = [\"red\",\"green\",\"blue\"]\nexplode = [0,0,0]\nsizes = mydata.Species.value_counts().values\n\nplt.figure(figsize = (7,8))\nplt.pie(sizes,explode=explode,labels=labels,colors=colors,autopct=\"%1.1f%%\")\nplt.title(\"iris species rate\",color=\"blue\",fontsize=14)\n","1fbaeac4":"#Lm ploting\n#Lm plot shows the results of the linear regression between our datas\n\nsns.lmplot(x=\"SepalLength_ratio\",y=\"SepalWidth_ratio\",data=data)\n","93a08c97":"#Cube helix plot\n#kde=kernel density estimation\nsns.kdeplot(data.SepalLength_ratio,data.SepalWidth_ratio,shade=True,cut=3)\n#when we make shade=False, our ploting will be just line without fulling inside graph(blue region)\n#cut is size of graph when we decrease number of cut, graph is getting bigger.","8ad648a7":"#Violin Plot\npl=sns.cubehelix_palette(2,rot=-5,dark= .3)\nsns.violinplot(data=data,palette=pl,inner=\"points\")\n#inner=\"points\" is our data points\n#in fat place,in this plot we can see density of our data where is more\nplt.show()","f43ea064":"#we can see correlation in our datas with this command\ndata.corr()","7a08f694":"# heatmap Plot\n#we use this ploting method to see corelation between our datas\n# we will see correlation between SepalLength_ratio and SepalWidth_ratio\nf,ax=plt.subplots(figsize =(7,7))\nsns.heatmap(data.corr(),annot=True,linewidth=1,linecolor=\"red\",fmt=\".1f\",ax=ax)\n#with annot =True, we can see correlation numbers(1,-0.7)\nplt.show()","7ffaf19f":"data.head()","1bfcc691":"#box plot\nsns.boxplot(x=\"PetalLengthCm\",y=\"SepalLengthCm\",hue=\"Species\",data=mydata,palette=\"PRGn\")\nplt.show()","b6197427":"#swarm plot\nsns.swarmplot(x=\"Species\",y=\"PetalLengthCm\",hue=\"Species\",data=mydata)\nplt.show()","e3b8935e":"#pair plot\n#this plotting techniqeu gives correlations graphs with scatter and bar \nsns.pairplot(mydata)\nplt.show()","b8439314":"#count plot, this tecnique works like .value_counts(), but we can see this result with graph\nsns.countplot(mydata.Species)\nsns.countplot(mydata.PetalLengthCm)\nplt.title(\"Count plot\",color=\"green\",fontsize=15)\nplt.show()","db15e991":"mydata.head()","b53f7bde":"above= [\"above1.4\" if i>=1.4 else \"below1.4\" for i in mydata.PetalLengthCm]\ndf= pd.DataFrame({\"Species\":above})\nsns.countplot(x=df.Species)\nplt.ylabel(\"number of species\")\nplt.title(\"Species to Petallength\",color=\"green\",fontsize=14)\n","8520fcaf":"Thank you for Reading my kernel, and thanks in advance for your vote and comments"}}