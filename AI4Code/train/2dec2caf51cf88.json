{"cell_type":{"bf42abd0":"code","90efe3e0":"code","47db037d":"code","3bf847c9":"code","1f5bf14b":"code","d0ef5f85":"code","8499b0f1":"code","ab5de07f":"code","a913158e":"code","aebe4dd1":"code","658052dc":"code","2cd966df":"code","a709c36d":"code","ce21213f":"code","d0c56b23":"code","539d214d":"code","f56c7160":"code","61f78ec3":"code","5c15eda9":"code","8a4ab6a5":"code","a1baaa76":"code","dda97db6":"code","5bd0b371":"code","665e6932":"code","1b56b756":"code","b42c1957":"code","950e379f":"code","1575a81e":"code","0daa6677":"code","1ab9d9d1":"code","2586f466":"code","3c0f2a28":"code","d583278b":"code","a0f1fd4f":"code","3c41c445":"code","cf18e2f9":"code","d12d5dd9":"code","2446483d":"code","298b2c05":"code","410fd317":"code","1f6a622b":"code","86af4065":"code","ec96fefc":"code","de38e87b":"code","08687c9e":"code","90871036":"markdown","98d00886":"markdown","202c7703":"markdown","bcae2d14":"markdown","6599ca97":"markdown","e2a08291":"markdown","47d0abc9":"markdown","a3454428":"markdown","f6660ee6":"markdown","fef66179":"markdown","74fc0f13":"markdown","af8ecb71":"markdown","f39716c7":"markdown","08b2347d":"markdown","3308feae":"markdown","2a700600":"markdown","4f8feb2a":"markdown","1d0749d6":"markdown","2e11a1e0":"markdown","e79ce26b":"markdown","e345791b":"markdown","881448b1":"markdown","9d05b9dc":"markdown","0a6ef646":"markdown","42a137ad":"markdown","6ce57b0a":"markdown","a7893496":"markdown","c668240a":"markdown","e5171670":"markdown","43fbc9f1":"markdown","66226e5e":"markdown","1d05e25d":"markdown","b89c015b":"markdown","f302abf6":"markdown","8547ec6e":"markdown","cd8ed84c":"markdown","cf8cdb4e":"markdown","aeaba1a4":"markdown","5cfe853a":"markdown","70cff8a4":"markdown"},"source":{"bf42abd0":"# Loading packages\nimport pandas as pd #Analysis \nimport matplotlib.pyplot as plt #Visulization\nimport seaborn as sns #Visulization\nimport numpy as np #Analysis \nfrom scipy.stats import norm #Analysis \nfrom sklearn.preprocessing import StandardScaler #Analysis \nfrom scipy import stats #Analysis \nimport warnings \nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport gc","90efe3e0":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test  = pd.read_csv('..\/input\/test.csv')","47db037d":"print(\"train.csv. Shape: \",df_train.shape)\nprint(\"test.csv. Shape: \",df_test.shape)","3bf847c9":"df_train.head()","1f5bf14b":"#descriptive statistics summary\ndf_train['price'].describe()","d0ef5f85":"#histogram\nf, ax = plt.subplots(figsize=(8, 6))\nsns.distplot(df_train['price'])","8499b0f1":"#skewness and kurtosis\nprint(\"Skewness: %f\" % df_train['price'].skew())\nprint(\"Kurtosis: %f\" % df_train['price'].kurt())","ab5de07f":"fig = plt.figure(figsize = (15,10))\n\nfig.add_subplot(1,2,1)\nres = stats.probplot(df_train['price'], plot=plt)\n\nfig.add_subplot(1,2,2)\nres = stats.probplot(np.log1p(df_train['price']), plot=plt)","a913158e":"df_train['price'] = np.log1p(df_train['price'])\n#histogram\nf, ax = plt.subplots(figsize=(8, 6))\nsns.distplot(df_train['price'])","aebe4dd1":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncorrmat = abs(df_train.corr(method='spearman')) # correlation \uc804\uccb4 \ubcc0\uc218\uc5d0 \ub300\ud574\uc11c \uacc4\uc0b0\ncols = corrmat.nlargest(k, 'price').index # nlargest : Return this many descending sorted values\ncm = np.corrcoef(df_train[cols].values.T) # correlation \ud2b9\uc815 \uceec\ub7fc\uc5d0 \ub300\ud574\uc11c\nsns.set(font_scale=1.25)\nf, ax = plt.subplots(figsize=(18, 8))\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 8}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","658052dc":"data = pd.concat([df_train['price'], df_train['grade']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='grade', y=\"price\", data=data)","2cd966df":"data = pd.concat([df_train['price'], df_train['sqft_living']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_living', y=\"price\", data=data)","a709c36d":"data = pd.concat([df_train['price'], df_train['sqft_living15']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_living15', y=\"price\", data=data)","ce21213f":"data = pd.concat([df_train['price'], df_train['sqft_above']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_above', y=\"price\", data=data)","d0c56b23":"data = pd.concat([df_train['price'], df_train['bathrooms']], axis=1)\nf, ax = plt.subplots(figsize=(18, 6))\nfig = sns.boxplot(x='bathrooms', y=\"price\", data=data)","539d214d":"data = pd.concat([df_train['price'], df_train['bedrooms']], axis=1)\nf, ax = plt.subplots(figsize=(18, 6))\nfig = sns.boxplot(x='bedrooms', y=\"price\", data=data)","f56c7160":"from plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nfrom sklearn import model_selection, preprocessing, metrics, ensemble, naive_bayes, linear_model\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.decomposition import TruncatedSVD\n\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999\n\nimport plotly.graph_objs as go\n\nimport time\nimport random\n\n#https:\/\/www.kaggle.com\/ashishpatel26\/bird-eye-view-of-two-sigma-nn-approach\ndef mis_value_graph(data):  \n    data = [\n    go.Bar(\n        x = data.columns,\n        y = data.isnull().sum(),\n        name = 'Counts of Missing value',\n        textfont=dict(size=20),\n        marker=dict(\n        line=dict(\n            color= generate_color(),\n            #width= 2,\n        ), opacity = 0.45\n    )\n    ),\n    ]\n    layout= go.Layout(\n        title= '\"Total Missing Value By Column\"',\n        xaxis= dict(title='Columns', ticklen=5, zeroline=False, gridwidth=2),\n        yaxis= dict(title='Value Count', ticklen=5, gridwidth=2),\n        showlegend=True\n    )\n    fig = go.Figure(data=data, layout=layout)\n    py.iplot(fig, filename='skin')\n    \ndef generate_color():\n    color = '#{:02x}{:02x}{:02x}'.format(*map(lambda x: random.randint(0, 255), range(3)))\n    return color\n\ndf_all = pd.concat([df_train,df_test])\ndel df_all['price']\nmis_value_graph(df_all)","61f78ec3":"### \uc720\ub2c8\ud06c \uac2f\uc218 \uacc4\uc0b0\ntrain_unique = []\ncolumns = ['bedrooms','bathrooms','floors','waterfront','view','condition','grade']\n\nfor i in columns:\n    train_unique.append(len(df_train[i].unique()))\nunique_train = pd.DataFrame()\nunique_train['Columns'] = columns\nunique_train['Unique_value'] = train_unique\n\ndata = [\n    go.Bar(\n        x = unique_train['Columns'],\n        y = unique_train['Unique_value'],\n        name = 'Unique value in features',\n        textfont=dict(size=20),\n        marker=dict(\n        line=dict(\n            color= generate_color(),\n            #width= 2,\n        ), opacity = 0.45\n    )\n    ),\n    ]\nlayout= go.Layout(\n        title= \"Unique Value By Column\",\n        xaxis= dict(title='Columns', ticklen=5, zeroline=False, gridwidth=2),\n        yaxis= dict(title='Value Count', ticklen=5, gridwidth=2),\n        showlegend=True\n    )\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='skin')","5c15eda9":"data = pd.concat([df_train['price'], df_train['sqft_living']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_living', y=\"price\", data=data)","8a4ab6a5":"df_train.loc[df_train['sqft_living'] > 13000]","a1baaa76":"df_train = df_train.loc[df_train['id']!=8990]","dda97db6":"data = pd.concat([df_train['price'], df_train['grade']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='grade', y=\"price\", data=data)","5bd0b371":"df_train.loc[(df_train['price']>14.7) & (df_train['grade'] == 8)]","665e6932":"df_train.loc[(df_train['price']>15.5) & (df_train['grade'] == 11)]","1b56b756":"df_train = df_train.loc[df_train['id']!=456]\ndf_train = df_train.loc[df_train['id']!=7259]\ndf_train = df_train.loc[df_train['id']!=2777]","b42c1957":"data = pd.concat([df_train['price'], df_train['bedrooms']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='bedrooms', y=\"price\", data=data)","950e379f":"df_train.loc[df_train['bedrooms']>=10]","1575a81e":"df_test.loc[df_test['bedrooms']>=10]","0daa6677":"df_train = df_train.loc[df_train['bedrooms']<10]","1ab9d9d1":"skew_columns = ['sqft_living', 'sqft_lot', 'sqft_above', 'sqft_basement']\n\nfor c in skew_columns:\n    df_train[c] = np.log1p(df_train[c].values)\n    df_test[c] = np.log1p(df_test[c].values)","2586f466":"for df in [df_train,df_test]:\n    df['date'] = df['date'].apply(lambda x: x[0:8])\n    df['yr_renovated'] = df['yr_renovated'].apply(lambda x: np.nan if x == 0 else x)\n    df['yr_renovated'] = df['yr_renovated'].fillna(df['yr_built'])","3c0f2a28":"df_train.head()","d583278b":"for df in [df_train,df_test]:\n    df['total_rooms'] = df['bedrooms'] + df['bathrooms']\n    df['grade_condition'] = df['grade'] * df['condition']\n    df['sqft_total'] = df['sqft_living'] + df['sqft_lot']\n    df['sqft_total_size'] = df['sqft_living'] + df['sqft_lot'] + df['sqft_above'] + df['sqft_basement']\n    df['sqft_total15'] = df['sqft_living15'] + df['sqft_lot15'] \n    df['is_renovated'] = df['yr_renovated'] - df['yr_built']\n    df['is_renovated'] = df['is_renovated'].apply(lambda x: 0 if x == 0 else 1)\n    df['date'] = df['date'].astype('int')","a0f1fd4f":"df_train['per_price'] = df_train['price']\/df_train['sqft_total_size']\nzipcode_price = df_train.groupby(['zipcode'])['per_price'].agg({'mean','var'}).reset_index()\ndf_train = pd.merge(df_train,zipcode_price,how='left',on='zipcode')\ndf_test = pd.merge(df_test,zipcode_price,how='left',on='zipcode')\ndel df_train['per_price']","3c41c445":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.linear_model import RidgeCV\n\ny_reg = df_train['price']\ndel df_train['price']\ndel df_train['id']\ntest_id = df_test['id']\ndel df_test['id']\n\nkfolds = KFold(n_splits=5, shuffle=True, random_state=42)\n\ndef cv_rmse(model):\n    rmse = np.sqrt(-cross_val_score(model, df_train, y_reg, \n                                   scoring=\"neg_mean_squared_error\", \n                                   cv = kfolds))\n    return(rmse)\n\ndef ridge_selector(k):\n    ridge_model = make_pipeline(RobustScaler(),\n                                RidgeCV(alphas = [k],\n                                        cv=kfolds)).fit(df_train, y_reg)\n    \n    ridge_rmse = cv_rmse(ridge_model).mean()\n    return(ridge_rmse)\n\nr_alphas = [.0001, .0003, .0005, .0007, .0009, \n          .01, 0.05, 0.1, 0.3, 1, 3, 5,6,7,8,9,10]\n\nridge_scores = []\nfor alpha in r_alphas:\n    score = ridge_selector(alpha)\n    ridge_scores.append(score)\n    \nplt.plot(r_alphas, ridge_scores, label='Ridge')\nplt.legend('center')\nplt.xlabel('alpha')\nplt.ylabel('score')","cf18e2f9":"alphas_alt = [5.8,5.9,6,6.1,6.2,6.3,6.4,6.5,6.6,6.7,6.8,6.9,7]\n\nridge_model2 = make_pipeline(RobustScaler(),\n                            RidgeCV(alphas = alphas_alt,\n                                    cv=kfolds)).fit(df_train, y_reg)\n\nprint(\"Ridge rmse : \",cv_rmse(ridge_model2).mean())","d12d5dd9":"print(\"Best of alpha in ridge model :\" ,ridge_model2.steps[1][1].alpha_)","2446483d":"ridge_coef = pd.DataFrame(np.round_(ridge_model2.steps[1][1].coef_, decimals=3), \ndf_test.columns, columns = [\"penalized_regression_coefficients\"])\n# remove the non-zero coefficients\nridge_coef = ridge_coef[ridge_coef['penalized_regression_coefficients'] != 0]\n# sort the values from high to low\nridge_coef = ridge_coef.sort_values(by = 'penalized_regression_coefficients', \nascending = False)\n\n# plot the sorted dataframe\nfig = plt.figure(figsize = (25,25))\nax = sns.barplot(x = 'penalized_regression_coefficients', y= ridge_coef.index , \ndata=ridge_coef)\nax.set(xlabel='Penalized Regression Coefficients')","298b2c05":"train_columns = [c for c in df_train.columns if c not in ['id']]","410fd317":"import lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error\n\nparam = {'num_leaves': 31,\n         'min_data_in_leaf': 30, \n         'objective':'regression',\n         'max_depth': -1,\n         'learning_rate': 0.015,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 11,\n         \"metric\": 'rmse',\n         \"lambda_l1\": 0.1,\n         \"verbosity\": -1,\n         \"nthread\": 4,\n         \"random_state\": 4950}\n         \n#prepare fit model with cross-validation\nfolds = KFold(n_splits=5, shuffle=True, random_state=42)\noof = np.zeros(len(df_train))\npredictions = np.zeros(len(df_test))\nfeature_importance_df = pd.DataFrame()\n\n#run model\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(df_train)):\n    trn_data = lgb.Dataset(df_train.iloc[trn_idx][train_columns], label=y_reg.iloc[trn_idx])#, categorical_feature=categorical_feats)\n    val_data = lgb.Dataset(df_train.iloc[val_idx][train_columns], label=y_reg.iloc[val_idx])#, categorical_feature=categorical_feats)\n\n    num_round = 10000\n    clf = lgb.train(param, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=500, early_stopping_rounds = 100)\n    oof[val_idx] = clf.predict(df_train.iloc[val_idx][train_columns], num_iteration=clf.best_iteration)\n    #feature importance\n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"Feature\"] = train_columns\n    fold_importance_df[\"importance\"] = clf.feature_importance()\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    #predictions\n    predictions += clf.predict(df_test[train_columns], num_iteration=clf.best_iteration) \/ folds.n_splits\n    \ncv = np.sqrt(mean_squared_error(oof, y_reg))\nprint(cv)","1f6a622b":"##plot the feature importance\ncols = (feature_importance_df[[\"Feature\", \"importance\"]]\n        .groupby(\"Feature\")\n        .mean()\n        .sort_values(by=\"importance\", ascending=False)[:1000].index)\nbest_features = feature_importance_df.loc[feature_importance_df.Feature.isin(cols)]\n\nplt.figure(figsize=(14,26))\nsns.barplot(x=\"importance\", y=\"Feature\", data=best_features.sort_values(by=\"importance\",ascending=False))\nplt.title('LightGBM Features (averaged over folds)')\nplt.tight_layout()\nplt.savefig('lgbm_importances.png')","86af4065":"test_ridge_preds = np.expm1(ridge_model2.predict(df_test))\ntest_lgb_preds = np.expm1(predictions)\ntest_ensemble_preds = 0.7*test_lgb_preds + 0.3*test_ridge_preds","ec96fefc":"submission0 = pd.DataFrame({'id': test_id, 'price': test_ridge_preds})\nsubmission0.to_csv('ridge.csv', index=False)","de38e87b":"submission = pd.DataFrame({'id': test_id, 'price': test_lgb_preds})\nsubmission.to_csv('lightgbm.csv', index=False)","08687c9e":"submission1 = pd.DataFrame({'id': test_id, 'price': test_ensemble_preds})\nsubmission1.to_csv('WeightAvg1.csv', index=False)","90871036":"log\ub97c \ucde8\ud574\uc8fc\uba74 \uae30\uc874\ubcf4\ub2e4 \ub354 \uc815\uaddc\uc131\uc744 \uac00\uc9c0\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","98d00886":"\uce68\uc2e4\uc758 \uc218\ub97c \ubcf4\uba74 9\uae4c\uc9c0\ub294 price\uac00 \uc99d\uac00\ud558\ub294 \ubaa8\uc2b5\uc744 \ubcf4\uc774\uc9c0\ub9cc 10\uc774\uc0c1\ubd80\ud130\ub294 \uadf8\ub807\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. ","202c7703":"\uc704\uc758 \uac12\uc744 \ubd24\uc744 \ub54c, \ub2e4\ub978\uac12\ub4e4\uc5d0 \ube44\ud574 sqft_living\ub9cc \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uaf64 \ud070 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc774 \uac12\uc740 \uc774\uc0c1\uce58\ub85c \ubcf4\uace0 \uc81c\uac70\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. ","bcae2d14":"\ud6c8\ub828\uacfc \ud3c9\uac00 \ub370\uc774\ud130\uc758 \ud06c\uae30\ub294 15000\uacfc 6500\uc73c\ub85c \uc801\uc740\ud3b8\uc774\uace0 \ube44\uc728\uc740 5:2 \uc815\ub3c4\ub85c \uc2ec\ud558\uac8c \ubd88\uade0\ub4f1\ud558\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \ubcc0\uc218\uc758 \uac2f\uc218\uac00 20\uac1c\ub85c \uc801\uc740\ud3b8\uc774\uc11c \uc88b\uc740 \ud53c\uccd0\ub97c \ub9cc\ub4e4\uc5b4 \ub0b4\ub294\uac83\uc774 \ubaa8\ub378\uc131\ub2a5\uc5d0 \uad00\uac74\uc73c\ub85c \uc0dd\uac01\ub429\ub2c8\ub2e4. ","6599ca97":"\uc2e4\uc81c \ud14c\uc2a4\ud2b8\uc5d0 bedrooms\uac00 10\uacfc \uac19\uac70\ub098 \ud070 \uac12\uc774 \uc5c6\uc73c\ubbc0\ub85c train\uc5d0\uc11c\ub3c4 \uc9c0\uc6cc\uc8fc\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. ","e2a08291":"\ubaa9\uc801\ubcc0\uc218\uc640 \uc0c1\uad00\ub3c4\uac00 \ub192\uc740 \ubcc0\uc218\ub294 \uc9d1\uc758 \ub4f1\uae09 - \uc8fc\uac70\uacf5\uac04\uc758 \ud06c\uae30 - \uc804\uccb4 \ud06c\uae30\uc21c\uc774\uace0 \uc7ac\ubbf8\uc788\uac8c lat\uc774\ub77c\ub294 \uc704\ub3c4 \uac12(\ub0a8\ubd81)\uc774 \ub4e4\uc5b4\uc788\uc2b5\ub2c8\ub2e4. \uc704\ub3c4\uac00 \uc99d\uac00\ud568\uc5d0 \ub530\ub77c \uac00\uaca9\uc774 \uc65c \uc99d\uac00\ud558\ub294\uc9c0 ? \uc774\uac83\uc744 \uc5b4\ub5bb\uac8c \ud65c\uc6a9\ud560 \uc218 \uc788\ub294\uc9c0\ub294 \uc880 \ub354 \ud0d0\uc0c9\uc774 \ud544\uc694\ud574\ubcf4\uc785\ub2c8\ub2e4. ","47d0abc9":"[](http:\/\/)## 1. \ub370\uc774\ud130 \ud0d0\uc0c9\n### 1.1 \ubb38\uc81c \uc815\uc758 \n\uc774\ubc88 \ub300\ud68c\uc758 \ubaa9\uc801\uc740 \uac70\ub798\ub41c \uc9d1\uc758 \uc815\ubcf4\ub97c \uac00\uc9c0\uace0 \uac00\uaca9\uc744 \uc608\uce21\ud558\ub294 \ud68c\uadc0\ubb38\uc81c \uc785\ub2c8\ub2e4. \n\n\ud3c9\uac00\ub85c\ub294 RMSE\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \n\n\ube44\uc2b7\ud55c \ub300\ud68c\ub85c\ub294 \ub370\uc774\ucf58\uc5d0\uc11c \uc5f4\ub9b0 [\uc9c1\ubc29 \ubaa8\ub378\ub9c1 \ub300\ud68c](https:\/\/dacon.io\/cpt4)\uc640 \uce90\uae00\uc5d0\uc11c \uc5f4\ub9b0 [House Prices: Advanced Regression Techniques](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques)\uac00  \uc788\uc2b5\ub2c8\ub2e4. \n\n","a3454428":"\uc544\ub798\ub294 \ubaa9\uc801\ubcc0\uc218\uc778 \uac00\uaca9\uacfc \uac00\uc7a5 \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc740 \uc21c\uc11c\ub300\ub85c \uc2a4\ud53c\uc5b4\ub9cc \uc21c\uc704 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf8 \ud788\ud2b8\ub9f5\uc785\ub2c8\ub2e4. \uc804\ubd80 \ubcf4\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ubd84\uc11d\uc758 \ud3b8\uc758\ub97c \uc704\ud574 \uc0c1\uad00\ub3c4\uac00 \ub192\uc740 \uc0c1\uc704 10\uac1c\uc758 \uac12\ub9cc \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. ","f6660ee6":"\ubaa9\uc801\ubcc0\uc218\uc758 \uacbd\uc6b0 min\uacfc max\uc758 \ucc28\uc774\uac00 \ud06c\uace0, std\uac00 \uad49\uc7a5\ud788 \ud070 \ud3b8\uc785\ub2c8\ub2e4. \uc544\ub798\uc758 \uadf8\ub9bc\uc744 \ubcf4\uba74 \ub354 \uba85\ud655\ud558\uaca0\uc9c0\ub9cc \uc67c\ucabd\uc73c\ub85c \ubd84\ud3ec\uac00 \uad49\uc7a5\ud788 \uce58\uc6b0\uce5c \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","fef66179":"### 2.3 \ubcc0\uc218 \uc218\uc815","74fc0f13":"### 1.2 \ub370\uc774\ud130 \uc0b4\ud3b4\ubcf4\uae30\npandas\uc758 read_csv \ud568\uc218\ub97c \uc0ac\uc6a9\ud574 \ub370\uc774\ud130\ub97c \uc77d\uc5b4\uc624\uace0, \uac01 \ubcc0\uc218\ub4e4\uc774 \ub098\ud0c0\ub0b4\ub294 \uc758\ubbf8\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n1. ID : \uc9d1\uc744 \uad6c\ubd84\ud558\ub294 \ubc88\ud638\n2. date : \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uc9dc\n3. price : \ud0c0\uac9f \ubcc0\uc218\uc778 \uc9d1\uc758 \uac00\uaca9\n4. bedrooms : \uce68\uc2e4\uc758 \uc218\n5. bathrooms : \uce68\uc2e4\ub2f9 \ud654\uc7a5\uc2e4 \uac1c\uc218\n6. sqft_living : \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8\n7. sqft_lot : \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8\n8. floors : \uc9d1\uc758 \uce35 \uc218\n9. waterfront : \uc9d1\uc758 \uc804\ubc29\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc720\ubb34 (a.k.a. \ub9ac\ubc84\ubdf0)\n10. view : \uc9d1\uc774 \uc5bc\ub9c8\ub098 \uc88b\uc544 \ubcf4\uc774\ub294\uc9c0\uc758 \uc815\ub3c4\n11. condition : \uc9d1\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc\n12. grade : King County grading \uc2dc\uc2a4\ud15c \uae30\uc900\uc73c\ub85c \ub9e4\uae34 \uc9d1\uc758 \ub4f1\uae09\n13. sqft_above : \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \ud3c9\ubc29 \ud53c\ud2b8\n14. sqft_basement : \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8\n15. yr_built : \uc9d1\uc744 \uc9c0\uc740 \ub144\ub3c4\n16. yr_renovated : \uc9d1\uc744 \uc7ac\uac74\ucd95\ud55c \ub144\ub3c4\n17. zipcode : \uc6b0\ud3b8\ubc88\ud638\n18. lat : \uc704\ub3c4\n19. long : \uacbd\ub3c4\n20. sqft_living15 : 2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n21. sqft_lot15 : 2015\ub144 \uae30\uc900 \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)","af8ecb71":"view\uc758 \uc720\ub2c8\ud06c\uac2f\uc218\uac00 5\uc778\uac78\ub85c \ubcf4\ub2c8 grade\uac19\uc774 \uc21c\uc704\ud615\ubcc0\uc218\ub85c \uc0dd\uac01\ub418\uc5b4\uc9c0\uace0 waterfront\uc758 \uacbd\uc6b0\ub294 2\uac1c\ub85c \uc788\ub2e4\/\uc5c6\ub2e4\ub294 \uc0c1\uc9d5\ud558\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. ","f39716c7":"\uc704\uc758 \ubaa9\uc801\ubcc0\uc218\uc758 \uacbd\uc6b0 \ucca8\ub3c4, \uc65c\ub3c4\ub3c4 \uad49\uc7a5\ud788 \uc815\uaddc\ubd84\ud3ec\ub97c \ub530\ub974\uc9c0\uc54a\uace0, \ubd84\uc0b0 \ub610\ud55c \ub9e4\uc6b0 \ud070 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc800\ub294 \ud68c\uadc0\ubaa8\ub378\uc744 \uc0ac\uc6a9\ud560 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 Normalize\ub97c \ud1b5\ud574 price\uc758 \ubd84\ud3ec\uac00 \uc815\uaddc\ubd84\ud3ec\ub97c \uac00\uc9c0\ub3c4\ub85d \ub9cc\ub4e4\uc5b4 \uc8fc\uaca0\uc2b5\ub2c8\ub2e4. ","08b2347d":"### 4.3 \uc559\uc0dd\ube14 \n","3308feae":"#### 2.1.3 bedrooms ","2a700600":"## 4. \ubaa8\ub378\ub9c1\n### 4.1 \ub9bf\uc9c0 \ud68c\uadc0 ","4f8feb2a":"bathrooms\uac19\uc740\uacbd\uc6b0 \uc18c\uc22b\uc810\uc774 \uc788\uc5b4\uc11c \ub9ce\uc774 \ud5f7\uac08\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac01\uac01\uc758 \uac12\uc774 \uc758\ubbf8\ud558\ub294\uac83\uc740 \uc544\ub798\uc640 \uac19\uace0 \uc704\uc758 \uac12\ub9cc\uc744 \uac00\uc9c0\uace0 \uac01\uac01\uc758 \uac12\uc774 \uba87\uac1c\uc788\ub294\uc9c0\ub294 \uad6c\ubd84\ud558\uae30 \ud798\ub4e4\uc5b4 \ubcf4\uc785\ub2c8\ub2e4. \n- 0.5 : \uc138\uba74\ub300, \ud654\uc7a5\uc2e4 \n- 0.75 : \uc138\uba74\ub300, \ud654\uc7a5\uc2e4, \uc0e4\uc6cc\uc2e4\n- 1 : \uc138\uba74\ub300, \ud654\uc7a5\uc2e4, \uc0e4\uc6cc\uc2e4, \uc695\uc870 ","1d0749d6":"### 1.3 \ubcc0\uc218\uc2dc\uac01\ud654 ( \ubc18\uc751\ubcc0\uc218 )\n- \ud53c\uc5b4\uc2a8 \uc0c1\uad00\uad00\uacc4 : \uc5f0\uc18d\ud615 \ubcc0\uc218\uc5d0 \uc0ac\uc6a9\n- \uc2a4\ud53c\uc5b4\ub9cc \uc21c\uc704 \uc0c1\uad00\uad00\uacc4 : \ubc94\uc8fc\ud615 \ubcc0\uc218\ub3c4 \ud3ec\ud568\ub418\uc5c8\uc744 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9 ","2e11a1e0":"### 1.5 \uc720\ub2c8\ud06c\ud55c \uac2f\uc218","e79ce26b":"\n- \uc65c\ub3c4 : \uc624\ub978\ucabd \uaf2c\ub9ac\uac00 \uae38\uc218\ub85d \uac12\uc774 \ub354 \ud07d\ub2c8\ub2e4. \n- \ucca8\ub3c4 (kurtosis \/ kurtosis) : \ucca8\ub3c4 \uac12 (K)\uc774 3\uc5d0 \uac00\uae4c\uc6b8 \uacbd\uc6b0, scatter\uc740 \uc815\uaddc \ubd84\ud3ec\uc5d0 \uac00\uae5d\uc2b5\ub2c8\ub2e4. (K <3), \ubd84\ud3ec\uac00 \uc815\uaddc \ubd84\ud3ec\ubcf4\ub2e4 \ub354 \ud3c9\ud0c4\ud558\uac8c \ud3c9\ud0c4\ud558\ub2e4\uace0 \ud310\ub2e8 \ud560 \uc218 \uc788\uc73c\uba70, \ucca8\ub3c4\uac00 3\ubcf4\ub2e4 \ud070 \uc591\uc218\uc778 \uacbd\uc6b0 (K> 3), \ubd84\ud3ec\uac00\ubcf4\ub2e4 \ubfb0\uc871\ud55c \ubd84\ud3ec\ub85c \uac04\uc8fc \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","e345791b":"> \uc704\uc5d0\uc11c lat\uc758 \uacbd\uc6b0 price\uc640 \uc0c1\uad00\uc131\uc774 \ub192\uc740 \uac83\uc744 \ubcfc \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. [Discussion](https:\/\/www.kaggle.com\/c\/2019-2nd-ml-month-with-kakr\/discussion\/83549)\uc5d0 \ub530\ub974\uba74, \uc704\uc758 \uc9c0\uc5ed\uc740 \uc2dc\uc560\ud2c0\uc778\ub370 \uc2dc\uc560\ud2c0\uc740 \ubd81\ucabd\uc73c\ub85c \uac08 \uc218\ub85d \uc0b4\uae30 \uc88b\uc740 \uc9d1\ub4e4\uc774 \ub9ce\ub2e4\uace0 \ud569\ub2c8\ub2e4. \n\n\uc774 \ubd80\ubd84\uc5d0 \ub300\ud574\uc11c [\uae40\ud0dc\uc9c4\ub2d8\uc758 \ucee4\ub110](https:\/\/www.kaggle.com\/fulrose\/map-visualization-with-folium-ing)\uc758 \uc790\ub8cc\uc5d0\uc11c \ub098\uc628 \ubd80\ubd84\uc744 \ubcf4\uba74 \ub354 \uc790\uc138\ud558\uac8c \uc778\uc0ac\uc774\ud2b8\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","881448b1":"## 3. \ubcc0\uc218 \uc0dd\uc131","9d05b9dc":"#### 2.1.1 sqft_living","0a6ef646":"\uc804\ubc18\uc801\uc73c\ub85c \uc120\ud615\uc131\uc744 \ubcf4\uc774\uc9c0\ub9cc \uac00\uaca9\uc774 14~15\uc0ac\uc774\uc5d0 sqft_living\uc774 14000\uc5d0 \uac00\uae4c\uc6b4 \uac12\uc740 \uaf64\ub098 \uc774\uc0c1\ud55c \uac12(\uc774\uc0c1\uce58)\uc73c\ub85c \uc0dd\uac01\ub418\uc5b4\uc9d1\ub2c8\ub2e4. \uc81c\uac70\ud560\uc9c0 \ub9d0\uc9c0\ub294 \uc800 \uac12\uc744 \ud655\uc778\ud574\ubcf4\uace0 \uacb0\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. ","42a137ad":"#### 2.1.2 grade","6ce57b0a":"### 1.4 \uacb0\uce21\uce58 ","a7893496":"\uc544\ub798\ub294 \uc9d1\uac12 \uac19\uc740 \uacbd\uc6b0\ub294 \ube44\uc2b7\ud55c \uc9c0\uc5ed\uc5d0 \uc601\ud5a5\uc744 \ubc1b\uc544\uc11c \uadf8\uac83\uc744 \ucf54\ub4dc\ub85c \uad6c\ud604\ud55c \uac83 \uc785\ub2c8\ub2e4. \uc8fc\uc758\ud574\uc57c \ud560 \uc810\uc740 \ub2e8\uc21c \uc9d1\uac12\uc774 \uc544\ub2c8\ub77c \ud3c9\ub2f9 \uac00\uaca9\uc744 \uc368\uc57c \ud55c\ub2e4\ub294 \uc810 \uc785\ub2c8\ub2e4 !!!","c668240a":"## 5. \uc81c\ucd9c","e5171670":"## [GDG Gwangju] 2019 2nd ML month with KaKR tutorial\n\ucc38\uace0 \uc790\ub8cc <br>\nhttps:\/\/www.kaggle.com\/kcs93023\/2019-ml-month-2nd-baseline <br>\nhttps:\/\/www.kaggle.com\/chocozzz\/house-price-prediction-eda","43fbc9f1":"\uc9d1\uc758 \ub4f1\uae09\uc774 \ub192\uc73c\uba74 \uac00\uaca9\uc774 \uc88b\uc544\uc9c0\ub294 \uac83\uc740 \uc704\uc758 \ud788\ud2b8\ub9f5\uc5d0\uc11c\ub3c4 \ubd24\ub4ef\uc774 \ub2f9\uc5f0\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc804\ubc15\uc801\uc73c\ub85c \uc0c1\uc2b9\uace1\uc120\uc758 \ud615\ud0dc\ub3c4 \ubcf4\uc774\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \n- ***\ub4f1\uae09 6,7,8,9\uc5d0\uc11c \uc774\uc0c1\uce58\uac00 \ub9ce\uc740 \uc774\uc720*** \n- ***\ub4f1\uae09 8\uacfc 11\uc5d0\uc11c \ucc28\uc774\uac00 \ud070 \uc774\uc0c1\uce58\uac00 \ub098\ud0c0\ub098\ub294 \uc774\uc720***\n\n\uc704\uc758 \ub450\uac00\uc9c0\ub294 \uc880 \ub354 \uc790\uc138\ud788 \uc0b4\ud3b4\ubd10\uc57c \ud569\ub2c8\ub2e4. ","66226e5e":"\ub3c5\ud2b9\ud558\uac8c \ubc29\uc218\uac00 30\uc774 \ub118\ub294 \uac12\ub4e4\uc774 \uc788\uace0 Price\ub294 \ube44\uad50\uc801 \ub0ae\uc740 \uac83 \ub610\ud55c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uac12\ub4e4\uc740 \ud2b9\uc815 \uc774\uc720\uac00 \uc788\uc5b4\uc11c \uc774\ub807\uac8c \ub41c\uac83\uc73c\ub85c \uc0dd\uac01 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\uc219\ubc15\uc6a9 \uc2dc\uc124\uc774\ub77c\ub4e0\uc9c0 \uc2dc\uace8\uc774\ub77c\ub4e0\uc9c0... )","1d05e25d":"## 4.2 GBM\n### 4.2.1 LightGBM","b89c015b":"\ub2e4\ud589\ud788\ub3c4 \ub370\uc774\ud130\uc5d0\ub294 \uacb0\uce21\uce58\uac00 \uc5c6\ub294 \uc0c1\ud669\uc785\ub2c8\ub2e4. ","f302abf6":"## 2. \ub370\uc774\ud130 \uc804\ucc98\ub9ac \n### 2.1 \uc774\uc0c1\uce58 \uc81c\uac70 \n\uc704\uc5d0\uc11c \uc911\uc694\ud55c \ubcc0\uc218\ub4e4\uc5d0 \ub300\ud574 \uc2dc\uac01\ud654\ub97c \ud574\ubd24\uc744\ub54c, \ub2e4\uc74c\uc758 \ubcc0\uc218\ub4e4\uc5d0 \ub300\ud574 \uc774\uc0c1\uce58\uac00 \uc788\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \n- sqft_living, grade, bedrooms ","8547ec6e":"## \ubaa9\ucc28 \n1. \ub370\uc774\ud130 \ud0d0\uc0c9\n    - \ubb38\uc81c \uc815\uc758\n    - \ub370\uc774\ud130 \uc0b4\ud3b4\ubcf4\uae30\n    - \uc2dc\uac01\ud654 \n    - \uc774\uc0c1\uce58 \ubc0f \uacb0\uce21\uce58 \ud655\uc778\n    - \uc720\ub2c8\ud06c \uac2f\uc218\n2. \ub370\uc774\ud130 \uc804\ucc98\ub9ac\n    - \uc774\uc0c1\uce58 \ubc0f \uacb0\uce21\uce58 \ucc98\ub9ac\n    - \uc815\uaddc\ud654\n3. \ubcc0\uc218 \uc0dd\uc131\n4. \ubaa8\ub378\ub9c1 \n    - \ud68c\uadc0\n    - GBM\n    - \uc559\uc0dd\ube14 \n5. \uc81c\ucd9c","cd8ed84c":"- date\uc758 \uacbd\uc6b0 yyyy-mm-dd + T000000\uc758 \ud615\ud0dc\ub85c \uc800\ud76c\uac00 \ud544\uc694\ud55c \ubd80\ubd84\uc740 \uc55e\uc758 8\uc790\ub9ac \uc785\ub2c8\ub2e4. \n- yr_renovated\uc758 \uacbd\uc6b0 0\uc758 \uac12\uc774 \ubcf4\uc774\ub294\ub370, 0\ub144\ub3c4\uc5d0 \uc7ac\uac74\ucd95\uc774 \ub418\uc5c8\ub2e4\ub294 \uc758\ubbf8\uac00 \uc544\ub2c8\ub77c \uc7ac\uac74\ucd95\uc744 \ud558\uc9c0 \uc54a\uc558\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \n\nhead\ub97c \ud1b5\ud574\uc11c\ub294 \uc774 \uc815\ub3c4\ub85c \uac00\ubccd\uac8c \ubcc0\uc218\ub97c \uc774\ud574\ud574\ubcf4\uace0 \ud558\ub098\ud558\ub098 \ubcc0\uc218\ub97c \uc0b4\ud3b4\ubcf4\uba74\uc11c \uc804\ucc98\ub9ac\ud574\uc57c \ud560 \ubd80\ubd84\uacfc \ud53c\uccd0 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\uc744 \ud560 \uc544\uc774\ub514\uc5b4\ub97c \uace0\ubbfc\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. ","cf8cdb4e":"### 2.2 \uc815\uaddc\ud654 \n\ucf54\ub4dc\ub294 \ub2e4\uc74c\uc758 \ub9c1\ud06c\ub97c \ud65c\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4. \nhttps:\/\/www.kaggle.com\/kcs93023\/2019-ml-month-2nd-baseline","aeaba1a4":"sqft_living15\uc758 \uacbd\uc6b0 15\ub144\ub3c4\ub97c \uae30\uc900\uc73c\ub85c \ud588\ub2e4\ubcf4\ub2c8 sqft_living\uc5d0 \ube44\ud574 \uac00\uaca9\uc758 \ubd84\uc0b0\uc774 \ud07d\ub2c8\ub2e4. \uc544\ubb34\ub798\ub3c4 \uc7ac\uac74\ucd95\uc73c\ub85c \uc778\ud55c \uc601\ud5a5\uc77c \uac83\uc73c\ub85c \uc0dd\uac01\ub418\uc5b4\uc9c0\uace0 sqft_living15 \uadf8 \uc790\uccb4\ub97c \uc0ac\uc6a9\ud558\uae30\ubcf4\ub2e4\ub294 \uc801\uc808\ud55c FE\uc774 \ud544\uc694\ud574 \ubcf4\uc785\ub2c8\ub2e4. ","5cfe853a":"### 1.3 \ubcc0\uc218 \uc2dc\uac01\ud654 ( \ubaa9\uc801\ubcc0\uc218 )","70cff8a4":"\uc704\uc758 3\uac12 \ubaa8\ub450 \ud2b9\ubcc4\ud55c \uc774\uc720\uac00 \uc5c6\uc774 \uac00\uaca9\uc774 \ub192\uc544 \ubcf4\uc774\ubbc0\ub85c \uc774\uc0c1\uce58\ub85c \uaddc\uc815\ud558\uace0 \uc81c\uac70\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. "}}