{"cell_type":{"bba4d5e1":"code","b2d07710":"code","8b545164":"code","3a7a2d10":"code","2c782318":"code","dba87984":"code","f8457c94":"code","0a144ccf":"markdown","bf01b6fe":"markdown","34362db8":"markdown","93e43587":"markdown"},"source":{"bba4d5e1":"!pip install panel\n\nimport numpy as np\nimport pandas as pd\npd.options.display.width=200\nimport io\nimport random\nimport string\nimport panel as pn\nimport panel.widgets as pnw\npn.extension()\nfrom bokeh.plotting import figure\nfrom bokeh.models import ColumnDataSource, Plot, Grid, Range1d\nfrom bokeh.models.glyphs import Text, Rect\nfrom bokeh.layouts import gridplot\nfrom Bio.Alphabet import generic_dna\nfrom Bio.Seq import Seq\nfrom Bio.SeqRecord import SeqRecord\nfrom Bio.Align import MultipleSeqAlignment\nfrom Bio import AlignIO\nfrom Bio import pairwise2\nfrom Bio.pairwise2 import format_alignment \nfrom Bio import SeqIO\n\ndef get_colors(seqs):\n    \"\"\"make colors for bases in sequence\"\"\"\n    text = [i for s in list(seqs) for i in s]\n    clrs =  {'A':'red','T':'green','G':'orange','C':'blue','-':'white'}\n    colors = [clrs[i] for i in text]\n    return colors\n\ndef view_alignment(aln, fontsize=\"9pt\", plot_width=800):\n    \"\"\"Bokeh sequence alignment view\"\"\"\n\n    #make sequence and id lists from the aln object\n    seqs = [rec.seq for rec in (aln)]\n    ids = [rec.id for rec in aln]    \n    text = [i for s in list(seqs) for i in s]\n    colors = get_colors(seqs)    \n    N = len(seqs[0])\n    S = len(seqs)    \n    width = .4\n\n    x = np.arange(1,N+1)\n    y = np.arange(0,S,1)\n    #creates a 2D grid of coords from the 1D arrays\n    xx, yy = np.meshgrid(x, y)\n    #flattens the arrays\n    gx = xx.ravel()\n    gy = yy.flatten()\n    #use recty for rect coords with an offset\n    recty = gy+.5\n    h= 1\/S\n    #now we can create the ColumnDataSource with all the arrays\n    source = ColumnDataSource(dict(x=gx, y=gy, recty=recty, text=text, colors=colors))\n    plot_height = len(seqs)*15+50\n    x_range = Range1d(0,N+1, bounds='auto')\n    if N>100:\n        viewlen=100\n    else:\n        viewlen=N\n    #view_range is for the close up view\n    view_range = (0,viewlen)\n    tools=\"xpan, xwheel_zoom, reset, save\"\n\n    #entire sequence view (no text, with zoom)\n    p = figure(title=None, plot_width= plot_width, plot_height=50,\n               x_range=x_range, y_range=(0,S), tools=tools,\n               min_border=0, toolbar_location='below')\n    rects = Rect(x=\"x\", y=\"recty\",  width=1, height=1, fill_color=\"colors\",\n                 line_color=None, fill_alpha=0.6)\n    p.add_glyph(source, rects)\n    p.yaxis.visible = False\n    p.grid.visible = False  \n\n    #sequence text view with ability to scroll along x axis\n    p1 = figure(title=None, plot_width=plot_width, plot_height=plot_height,\n                x_range=view_range, y_range=ids, tools=\"xpan,reset\",\n                min_border=0, toolbar_location='below')#, lod_factor=1)          \n    glyph = Text(x=\"x\", y=\"y\", text=\"text\", text_align='center',text_color=\"black\",\n                text_font=\"monospace\",text_font_size=fontsize)\n    rects = Rect(x=\"x\", y=\"recty\",  width=1, height=1, fill_color=\"colors\",\n                line_color=None, fill_alpha=0.4)\n    p1.add_glyph(source, glyph)\n    p1.add_glyph(source, rects)\n\n    p1.grid.visible = False\n    p1.xaxis.major_label_text_font_style = \"bold\"\n    p1.yaxis.minor_tick_line_width = 0\n    p1.yaxis.major_tick_line_width = 0\n\n    p = gridplot([[p],[p1]], toolbar_location='below')\n    return p","b2d07710":"csv = '\/kaggle\/input\/repository-of-coronavirus-genomes\/coronavirus_genomes\/ncbi_collections\/Coronavirus\/coronavirus_sequences_table.csv'\ndf = pd.read_csv(csv)\ndf['Release_Date'] = pd.to_datetime(df.Release_Date)\ndf[-20:].tail(20)[['Collection_Date','Host','Genus','Family','Species','Accession']]","8b545164":"print('Count of Host Occurences: \\n', df.Host.value_counts()[:10])\nprint('\\n\\nCount of Virus Occurences: \\n', df.Species.value_counts()[:10])","3a7a2d10":"sequence = '..\/input\/coronavirus-genome-sequence\/MN908947.txt'\nwith open(sequence) as text: \n    print('MN908947:')\n    print(text.read(500)[95:])","2c782318":"print('MN908947: ')\nfna = '\/kaggle\/input\/repository-of-coronavirus-genomes\/coronavirus_genomes\/kaggle_collection\/MN908947.fna'\nalignment = AlignIO.read(fna,'fasta')\np = view_alignment(alignment, plot_width=900)\npn.pane.Bokeh(p)","dba87984":"print('MN988668: ')\nfna = '\/kaggle\/input\/repository-of-coronavirus-genomes\/coronavirus_genomes\/kaggle_collection\/MN988668.fna'\nalignment = AlignIO.read(fna,'fasta')\np = view_alignment(alignment, plot_width=900)\npn.pane.Bokeh(p)","f8457c94":"print('MG772933: ')\nfna = '\/kaggle\/input\/repository-of-coronavirus-genomes\/coronavirus_genomes\/kaggle_collection\/MG772933.fna'\nalignment = AlignIO.read(fna,'fasta')\np = view_alignment(alignment, plot_width=900)\npn.pane.Bokeh(p)","0a144ccf":"### According to Wu 2020, Chen 2020, and Zhou 2020, SARS-CoV-2 should: \n\n* be represented in GenBank MN908947, MN988668 and MN988669\n* Have a nucleotide identity of 89.1% with a bat SARS-like coronavirus (CoV) isolate\u2014bat SL-CoVZC45 (GenBank accession number MG772933)\n* share 79.5% sequence identity to SARS-CoV BJ01 (GenBank accession number AY278488)\n\n### Let's explore! ","bf01b6fe":"*Step 1: Import Python modules and define helper functions*","34362db8":"*Step 2: Preview the data*","93e43587":"# Sequences of genomes that are similar to 2019-nCoV \/ SARS-CoV-2\n\n* Using code adapted from https:\/\/dmnfarrell.github.io\/bioinformatics\/bokeh-sequence-aligner\n* and https:\/\/github.com\/dmnfarrell\/teaching\/blob\/master\/pyviz\/bokeh_sequence_align.ipynb"}}