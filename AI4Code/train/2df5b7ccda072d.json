{"cell_type":{"f81ba367":"code","0614ded1":"code","855a927d":"code","5db85b2d":"code","836d3645":"code","26938e21":"code","70b1f927":"code","2a9ee000":"code","f626117a":"code","77dda187":"code","ea8e49de":"code","70f31421":"code","cbacceb5":"code","475c4b8d":"code","9bd5bca8":"code","e76b4592":"code","d163639f":"code","f7293951":"code","b1ae70fd":"code","1c55beb8":"markdown","7ff9e80c":"markdown","b511d261":"markdown","8c7e7da2":"markdown","8e4fc3ac":"markdown","7a1aed60":"markdown","5a06c0e0":"markdown","16bc82d9":"markdown","35dc0194":"markdown"},"source":{"f81ba367":"import numpy as np\nimport pandas as pd\nimport subprocess\nimport joblib\n\nfrom time import time\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import Ridge, LinearRegression\nfrom sklearn.svm import SVR\nimport matplotlib.pyplot as plt\n\nsubmission_df = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/sample_submission.csv\")","0614ded1":"trust  = 3 # TrustDiV\noption = 4\nDEBUG = True  # counterintuitive\n\nEIDs = [\n    [36, 37, 34, 32, 30, '26ish', 24, 18, 10, 7],                 # Trust CV, C=0.59\n    [7, 10, 14, 18, 23, 24, '26ish', 36, 37],                     # Trust LB, C=0.59\n    [10, 14, 16, 18, 19, 20, 23, '26ish', 27, 30, 31, 32, 34],    # Trust Diversity, C=0.59\n    \n    # Model Zoo = Diversity + LB + CV Models\n    [7, 10, 14, 16, 18, 19, 20, 23, 24, '26ish', 27, 30, 31, 32, 34, 36, 37],\n][trust]\nModelName = ['TrustCV', 'TrustLB', 'TrustDiv', 'TrustZoo'][trust]\nEnsembleType = \"ABCDM\"[option]\nDEBUG = DEBUG and submission_df.shape[0] == 7\n        \nmeta_features = [\n    f'oof{eid}' for eid in EIDs\n]\nprint(f'{ModelName}\/{EnsembleType}', 'Debug' if DEBUG else '')","855a927d":"EIDs","5db85b2d":"meta_features","836d3645":"# Wuh??\n!cp ..\/input\/d\/authman\/commonlit-ensemble\/* .\/\nensemble = joblib.load(f'.\/{ModelName}.jlib')\nscripts = [\n    f'.\/EXP{eid}_submission.py'\n    for eid in EIDs\n]\nscripts","26938e21":"ensemble","70b1f927":"for script in scripts:\n    if DEBUG: continue\n    t = time()\n    !python {script}\n    print(f'Finished {script}, {(time()-t)\/60:3} mins')","2a9ee000":"if not DEBUG:\n    subs = [\n        pd.read_csv(f'.\/EXP{eid}_submission.csv').rename(columns={'target':f'oof{eid}'})\n        for eid in EIDs\n    ]","f626117a":"train_df = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/train.csv\")\noutputs = submission_df[['id']].copy()\n\nif not DEBUG:\n\n    for i, eid in enumerate(EIDs):\n        exp_df = subs[i]\n        columns = ['id', f'oof{eid}']\n        #exp_df[f'oof{eid}'] = exp_df[f'oof{eid}'] - exp_df[f'oof{eid}'].mean() + train_df.target.mean()\n        #exp_df[f'oof{eid}'] = exp_df[f'oof{eid}'] - ensemble[eid] + train_df.target.mean()\n        outputs = outputs.merge(exp_df[columns], how='inner', on='id')\n\n    print(outputs.shape)","77dda187":"outputs.head()","ea8e49de":"outputs.corr()","70f31421":"if not DEBUG and EnsembleType == \"M\":\n    # Subtract the mean from each model individually\n    for i, eid in enumerate(EIDs):\n        outputs[f'oof{eid}'] = outputs[f'oof{eid}'] - outputs[f'oof{eid}'].mean() + train_df.target.mean()\n    outputs['pred'] = outputs[meta_features].mean(axis=1)\n\n    # Additional Final Mean Hack\n    submission_df = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/sample_submission.csv\")\n    submission_df.target = outputs.pred.values - outputs.pred.mean() + train_df.target.mean()\n    submission_df.to_csv('submission.csv', index=False)\n    print('Praying for:', ensemble['mean_score'])","cbacceb5":"if not DEBUG and EnsembleType == \"A\":\n    print('One SVR')\n    ss = ensemble['ac_ss']\n    outputs[meta_features] = ss.transform(outputs[meta_features])\n\n    r = ensemble['a_model']\n    outputs['pred'] = r.predict(outputs[meta_features])\n    print('Praying for:', ensemble['a_score'])\n    \n    # Optional Final Mean Hack\n    submission_df = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/sample_submission.csv\")\n    submission_df.target = outputs.pred.values - outputs.pred.mean() + train_df.target.mean()\n    submission_df.to_csv('submission.csv', index=False)\n","475c4b8d":"if not DEBUG and EnsembleType == \"C\":\n    print('One LR')\n    ss = ensemble['ac_ss']\n    outputs[meta_features] = ss.transform(outputs[meta_features])\n\n    r = ensemble['c_model']\n    outputs['pred'] = r.predict(outputs[meta_features])\n    print('Praying for:', ensemble['c_score'])\n    \n    # Optional Final Mean Hack\n    submission_df = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/sample_submission.csv\")\n    submission_df.target = outputs.pred.values - outputs.pred.mean() + train_df.target.mean()\n    submission_df.to_csv('submission.csv', index=False)\n","9bd5bca8":"if not DEBUG and EnsembleType == \"B\":\n    print('5 SVRs')\n    NUM_KFOLDS = len(ensemble['bd_ss'])\n    bd_ss = ensemble['bd_ss']\n    models = ensemble['b_models']\n    preds = []\n    \n    for k in range(NUM_KFOLDS):\n        ss = bd_ss[k]\n        output_copy = outputs.copy()\n        output_copy[meta_features] = ss.transform(output_copy[meta_features])\n        preds.append(models[k].predict(output_copy[meta_features]))\n        \n    outputs['pred'] = np.mean(preds, axis=0)   \n    print('Praying for:', ensemble['b_score'])\n    \n    # Optional Final Mean Hack\n    submission_df = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/sample_submission.csv\")\n    submission_df.target = outputs.pred.values - outputs.pred.mean() + train_df.target.mean()\n    submission_df.to_csv('submission.csv', index=False)","e76b4592":"if not DEBUG and EnsembleType == \"D\":\n    print('5 LRs')\n    NUM_KFOLDS = len(ensemble['bd_ss'])\n    bd_ss = ensemble['bd_ss']\n    models = ensemble['d_models']\n    preds = []\n    \n    for k in range(NUM_KFOLDS):\n        ss = bd_ss[k]\n        output_copy = outputs.copy()\n        output_copy[meta_features] = ss.transform(output_copy[meta_features])\n        preds.append(models[k].predict(output_copy[meta_features]))\n        \n    outputs['pred'] = np.mean(preds, axis=0)   \n    print('Praying for:', ensemble['d_score'])\n    \n    # Optional Final Mean Hack\n    submission_df = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/sample_submission.csv\")\n    submission_df.target = outputs.pred.values - outputs.pred.mean() + train_df.target.mean()\n    submission_df.to_csv('submission.csv', index=False)","d163639f":"if DEBUG:\n    submission_df = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/sample_submission.csv\")\n    submission_df.to_csv('submission.csv', index=False)","f7293951":"submission_df.head()","b1ae70fd":"plt.title('Submission')\nplt.hist(submission_df.target, 35)\nplt.show()","1c55beb8":"# Ensemble D","7ff9e80c":"# Ensemble C","b511d261":"# Ensemble Mean","8c7e7da2":"# Otherwise..","8e4fc3ac":"# Ensemble A","7a1aed60":"# Ensemble B","5a06c0e0":"\"\"\"\nREQS:\nhttps:\/\/www.kaggle.com\/c\/commonlitreadabilityprize\nhttps:\/\/www.kaggle.com\/marshal02\/robertalarge\nhttps:\/\/www.kaggle.com\/evilmage93\/sentence-embedding-models\nhttps:\/\/www.kaggle.com\/xhlulu\/deberta\nhttps:\/\/www.kaggle.com\/ravoxsg\/funneltransformerlarge\nhttps:\/\/www.kaggle.com\/maroberti\/roberta-transformers-pytorch\nhttps:\/\/www.kaggle.com\/xhlulu\/electra\nhttps:\/\/www.kaggle.com\/maschasap\/allenailongformerbase4096\nhttps:\/\/www.kaggle.com\/abhishek\/distilbertbaseuncased\n\nhttps:\/\/www.kaggle.com\/authman\/commonlit7\nhttps:\/\/www.kaggle.com\/authman\/commonlit10\nhttps:\/\/www.kaggle.com\/authman\/commonlit14\nhttps:\/\/www.kaggle.com\/authman\/commonlit16\nhttps:\/\/www.kaggle.com\/authman\/commonlit18\nhttps:\/\/www.kaggle.com\/authman\/commonlit19\nhttps:\/\/www.kaggle.com\/authman\/commonlit20\nhttps:\/\/www.kaggle.com\/authman\/commonlit23\nhttps:\/\/www.kaggle.com\/authman\/commonlit24\nhttps:\/\/www.kaggle.com\/authman\/commonlit26\nhttps:\/\/www.kaggle.com\/authman\/commonlit27\nhttps:\/\/www.kaggle.com\/authman\/commonlit30\nhttps:\/\/www.kaggle.com\/authman\/commonlit31\nhttps:\/\/www.kaggle.com\/authman\/commonlit32\nhttps:\/\/www.kaggle.com\/authman\/commonlit34\nhttps:\/\/www.kaggle.com\/authman\/commonlit36\n\"\"\"","16bc82d9":"# Results","35dc0194":"# Inspection"}}