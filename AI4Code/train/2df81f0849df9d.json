{"cell_type":{"130eb29e":"code","f56f55ac":"code","f8fd5b42":"code","eb98a965":"code","77549510":"code","4706b389":"code","60cc21c8":"code","d159961b":"code","f4265e4e":"code","fdb86605":"code","a01e4213":"code","34965d21":"code","d11f37cf":"code","7d67600d":"code","d472c051":"code","47662e5b":"code","7f968746":"code","e15bc660":"code","55006ad5":"code","9fe106cc":"code","beef5986":"code","c3bfec5c":"code","d1dd09a6":"code","5e763851":"code","8fab6e5d":"code","ee83a9e0":"code","ac0799a7":"code","afdaec41":"code","2da691b6":"code","2900e558":"code","dd14fcc5":"code","bc9bede6":"code","e1a0bbb2":"code","e58872c3":"code","9cc2df66":"code","5a75d493":"code","0fc18810":"code","2164b5f3":"code","39ce9d35":"code","28d52ba9":"code","00daa4ad":"code","f1fae792":"markdown","1178e44e":"markdown","e9951b91":"markdown","e50c24fc":"markdown","5b3746e6":"markdown","b42969b5":"markdown","04414685":"markdown","c463ecb1":"markdown","3bfba6ad":"markdown"},"source":{"130eb29e":"import pandas as pd\nimport numpy as np\nfrom matplotlib_venn import venn2\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder, OrdinalEncoder\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\nimport lightgbm as lgb\nfrom sympy import Symbol, diff\n\nimport tensorflow as tf\nfrom PIL import Image, ImageFilter\nimport re\nimport glob\nfrom tqdm import tqdm\n\nfrom IPython.display import display, HTML\nfrom pdpbox import pdp","f56f55ac":"df_train_val_csv=pd.read_csv(\"..\/input\/shigglecup-1st\/DATA\/train.csv\")\ndf_test_csv=pd.read_csv(\"..\/input\/shigglecup-1st\/DATA\/test.csv\")","f8fd5b42":"df_train_val_csv[\"type_1_2\"]=df_train_val_csv[\"type_1\"].fillna(\"\") + \"_\" + df_train_val_csv[\"type_2\"].fillna(\"\")\ndf_test_csv[\"type_1_2\"]=df_test_csv[\"type_1\"].fillna(\"\") + \"_\" + df_test_csv[\"type_2\"].fillna(\"\")","eb98a965":"df_train_val_csv","77549510":"df_all = pd.concat([df_train_val_csv.drop(\"target\", axis=1), df_test_csv], axis=0)","4706b389":"df_all.head(5).T","60cc21c8":"sinka_lv_list=[]\nfor i in range(df_all.shape[0]):\n    k=0\n    poke_name=df_all[\"species_id\"].iloc[i]\n    ef = df_all[\"evolves_from_species_id\"].iloc[i]\n    while True:\n        if ef==ef:\n            k+=1\n            ef = df_all[df_all.species_id == ef].evolves_from_species_id.iloc[0]\n        else:\n            break\n    sinka_lv_list.append(k)","d159961b":"df_all[\"sinka_lv\"] = sinka_lv_list","f4265e4e":"df_all_max_shinka_lv=df_all.groupby(\"evolution_chain_id\").agg({\"sinka_lv\": \"max\"}).reset_index()","fdb86605":"df_all_max_shinka_lv.columns=[\"evolution_chain_id\",\"sinka_lv_max\"]","a01e4213":"df_train_val_csv[\"sinka_lv\"]=sinka_lv_list[:df_train_val_csv.shape[0]]\ndf_test_csv[\"sinka_lv\"]=sinka_lv_list[df_train_val_csv.shape[0]:]","34965d21":"df_train_val_csv=pd.merge(df_train_val_csv, df_all_max_shinka_lv, how=\"left\", on=\"evolution_chain_id\")\ndf_test_csv=pd.merge(df_test_csv, df_all_max_shinka_lv, how=\"left\", on=\"evolution_chain_id\")","d11f37cf":"df_train_val_csv[\"target2\"] = np.log( df_train_val_csv[\"target\"] +1.)","7d67600d":"list(set(df_train_val_csv.columns) - set(df_test_csv.columns))","d472c051":"print(df_train_val_csv.shape)\nprint(df_test_csv.shape)","47662e5b":"list(df_train_val_csv.columns)","7f968746":"df_train_val_csv.hist(figsize=(10,10))\nplt.show()","e15bc660":"df_test_csv.hist(figsize=(10,10))\nplt.show()","55006ad5":"df_train_val_csv.corr()","9fe106cc":"df_train_val_csv","beef5986":"plt.scatter(df_train_val_csv[[\"hp\", \"attack\", \"defense\", \"special_attack\", \"special_defense\",\"speed\" ]].sum(axis=1),df_train_val_csv.target,\n           c=df_train_val_csv.sinka_lv )\nplt.colorbar()\nplt.show()","c3bfec5c":"for c in df_test_csv.columns:\n    plt.title(c)\n    venn2(subsets=(\n        set(df_train_val_csv[c]), set(df_test_csv[c])\n    ), set_labels=('train', 'test'))\n    plt.show()","d1dd09a6":"class Preprocess():\n    def __init__(self, df_all):\n        self.oe=OrdinalEncoder() #\n        self.scaler = StandardScaler()\n        self.pca=PCA()\n        \n        self.label_cols=[\"type_1\",\"type_2\",\"type_1_2\", \"ability_1\", \"ability_2\", \"ability_hidden\", \"egg_group_1\", \"egg_group_2\", \"shape\", \"color_1\", \"color_2\", \"color_f\"]\n        self.pca_cols=[\"height\", \"weight\",'attack', 'defense', 'hp', 'special_attack', 'special_defense', 'speed']\n        \n        scaled_x = self.scaler.fit_transform( df_all[self.pca_cols] )\n        self.pca.fit(scaled_x)\n        num_comp= len(self.pca.explained_variance_[self.pca.explained_variance_>1.])\n        self.pca = PCA( n_components = num_comp )\n        self.pca.fit(scaled_x)\n        \n        self.oe.fit(\n            df_all[self.label_cols].fillna(\"\")\n        )\n        \n        \n    def colorcode2rgb(self, colorcode):\n        if colorcode == colorcode:\n            return [int(colorcode[1:3],16),int(colorcode[3:5],16),int(colorcode[5:7],16)]\n        else:\n            return [np.nan, np.nan, np.nan]\n    \n    def fit_transform(self, df):\n        df_return = df.copy(deep = True)\n        df_return.reset_index(inplace=True, drop=True)\n        df_return[\"name_mega\"] = df_return[\"pokemon\"].apply( lambda x : (\"-mega\" in x)*1)\n        df_return[\"name_hyp\"] = df_return[\"pokemon\"].apply( lambda x : (\"-\" in x)*1)\n#         df_return[\"name_large\"] = df_return[\"pokemon\"].apply( lambda x : (\"-large\" in x)*1)\n        df_return[\"name_blade\"] = df_return[\"pokemon\"].apply( lambda x : (\"-blade\" in x)*1)\n        \n        df_oe = self.oe.transform(\n            df_return[self.label_cols].fillna(\"\")\n        )\n#         df_return[\"cure_heal\"] = df_return[\"ability_1\"].isin([\"healer\",\"natural-cure\"])*1.\n        df_oe = pd.DataFrame(df_oe, \n                             columns=self.label_cols,\n                            index=df_return.index)\n    \n        df_return.drop(self.label_cols, axis=1, inplace=True)\n        \n        df_return = pd.concat([df_return, df_oe], axis=1)\n        \n        \n        df_return.drop([\"url_image\", \"image_exist\"], inplace=True, axis=1)\n        \n        df_return[\"syuzokuchi\"] = df_return[[\"hp\", \"attack\", \"defense\", \"special_attack\", \"special_defense\",\"speed\" ]].sum(axis=1)\n#         df_return[\"min_stats\"] = df_return[[\"hp\", \"attack\", \"defense\", \"special_attack\", \"special_defense\",\"speed\"]].min(axis=1)\n        df_return[\"max_defense\"] = df_return[[\"defense\", \"special_defense\"]].max(axis=1)\n        df_return[\"max_attack\"] = df_return[[\"attack\", \"special_attack\"]].max(axis=1)\n\n        scaled_x = self.scaler.transform( df_return[self.pca_cols] )\n        df_pca = self.pca.transform( scaled_x )\n        df_pca = pd.DataFrame(df_pca).add_prefix(\"pca_stats_\")\n        \n        df_return.drop(self.pca_cols, inplace=True , axis=1)\n        df_return = pd.concat([df_return, df_pca], axis=1)\n        \n        return df_return\n        \n    def transform(self, df):\n        df_return = df.copy(deep = True)\n        df_return.reset_index(inplace=True, drop=True)\n        df_return[\"name_mega\"] = df_return[\"pokemon\"].apply( lambda x : (\"-mega\" in x)*1)\n        df_return[\"name_hyp\"] = df_return[\"pokemon\"].apply( lambda x : (\"-\" in x)*1)\n#         df_return[\"name_large\"] = df_return[\"pokemon\"].apply( lambda x : (\"-large\" in x)*1)\n        df_return[\"name_blade\"] = df_return[\"pokemon\"].apply( lambda x : (\"-blade\" in x)*1)\n#         df_return[\"cure_heal\"] = df_return[\"ability_1\"].isin([\"healer\",\"natural-cure\"])*1.\n        df_oe = self.oe.transform(\n            df_return[self.label_cols].fillna(\"\")\n        )\n        df_oe = pd.DataFrame(df_oe, \n                             columns=self.label_cols,\n                            index=df_return.index)\n        \n        \n        df_return.drop(self.label_cols, axis=1, inplace=True)\n                    \n        df_return = pd.concat([df_return, df_oe], axis=1)\n        \n        \n        df_return.drop([ \"url_image\", \"image_exist\"], inplace=True, axis=1)\n        \n        df_return[\"syuzokuchi\"] = df_return[[\"hp\", \"attack\", \"defense\", \"special_attack\", \"special_defense\",\"speed\" ]].sum(axis=1)\n#         df_return[\"min_stats\"] = df_return[[\"hp\", \"attack\", \"defense\", \"special_attack\", \"special_defense\",\"speed\"]].min(axis=1)\n        df_return[\"max_defense\"] = df_return[[\"defense\", \"special_defense\"]].max(axis=1)\n        df_return[\"max_attack\"] = df_return[[\"attack\", \"special_attack\"]].max(axis=1)\n\n        scaled_x = self.scaler.transform( df_return[self.pca_cols] )\n        df_pca = self.pca.transform( scaled_x )\n        df_pca = pd.DataFrame(df_pca).add_prefix(\"pca_stats_\")\n        \n        df_return.drop(self.pca_cols, inplace=True , axis=1)\n        df_return = pd.concat([df_return, df_pca], axis=1)\n        return df_return","5e763851":"target2_kbn=np.digitize( df_train_val_csv.target2,  bins= np.linspace( df_train_val_csv.target2.min(), df_train_val_csv.target2.max() ,10))","8fab6e5d":"def rmsle_loss( t, y ):\n    return np.sqrt(np.mean( (np.log(t +1.) - np.log(y + 1.) )**2 ) )    \n\ndef error_list( t, y ):\n    return (np.log(t +1.) - np.log(y + 1.) )**2   ","ee83a9e0":"pps=[]\nmodels=[]\n\nskf = StratifiedKFold(n_splits=10, shuffle=True, random_state=12345)\nk=0\noof_pred = np.zeros_like(target2_kbn)\nfor train_index, val_index in skf.split(df_train_val_csv, target2_kbn):\n    print(\"%s----------\"%k)\n    df_train_csv = df_train_val_csv.iloc[train_index]\n    df_val_csv = df_train_val_csv.iloc[val_index]\n    \n    pp = Preprocess(df_all)\n    \n    remove_outlier=[242, 531, 440]#\n    use_bool = list(~df_train_csv.species_id.isin(remove_outlier))\n    df_train_csv=df_train_csv[use_bool]\n    \n    train_X = df_train_csv.drop([\"target\", \"id\", \"shape_id\", \"evolves_from_species_id\"], axis=1).copy() #\"generation_id\",\n    val_X = df_val_csv.drop([\"target\", \"id\", \"shape_id\", \"evolves_from_species_id\"], axis=1).copy()\n    \n    train_X_pp=pp.fit_transform(train_X)\n    val_X_pp=pp.transform(val_X)\n    \n    train_X_pp.drop([\"pokemon\",\"target2\",\"species_id\", ], axis=1, inplace=True)\n    val_X_pp.drop([\"pokemon\",\"target2\",\"species_id\" ], axis=1, inplace=True)\n\n    train_y = df_train_csv[[\"target2\"]]\n    val_y = df_val_csv[[\"target2\"]]\n\n    lgb_train = lgb.Dataset( train_X_pp, train_y)\n    lgb_val = lgb.Dataset( val_X_pp, val_y)\n\n    params = {\n        'boosting_type': 'gbdt',\n        'objective': 'regression',\n        'learning_rate': 0.005,\n        'min_child_samples':3,\n        'verbose': -1\n    }\n\n    lgb_reg = lgb.train(params,\n                lgb_train,\n                num_boost_round=50000,\n                valid_sets =[lgb_train, lgb_val],\n                valid_names  = ['train', 'valid'],\n                verbose_eval = 50,\n                early_stopping_rounds=50,\n                categorical_feature = [\n                    'type_1','type_2',\"type_1_2\",\n                    'ability_1', 'ability_2',\n                    'ability_hidden',\n                    'egg_group_1','egg_group_2', \n                    'shape', \n                    'color_1', 'color_2', 'color_f',\n                    \"evolution_chain_id\"]\n                       )#\n    oof_pred[val_index]= np.exp(lgb_reg.predict(val_X_pp,  num_iteration=lgb_reg.best_iteration) ) - 1.\n    pps.append(pp)\n    models.append(lgb_reg)\n    k+=1","ac0799a7":"rmsle_loss(df_train_val_csv.target, oof_pred)","afdaec41":"lgb.plot_importance(lgb_reg, figsize=(20,10), importance_type =\"gain\")\nplt.show()","2da691b6":"lgb.plot_importance(lgb_reg, figsize=(20,10), importance_type =\"split\")\nplt.show()","2900e558":"plt.figure(figsize=(10,10))\nplt.xscale(\"log\")\nplt.yscale(\"log\")\nplt.xlabel(\"pred\")\nplt.ylabel(\"target\")\nplt.scatter( oof_pred, df_train_val_csv.target, c= df_train_val_csv.generation_id )\nplt.plot( [0, df_train_val_csv.target.max()], [0, df_train_val_csv.target.max()] , c=\"black\" )\nplt.show()\n#LabelEncoder().fit_transform(df_train_val_csv.evolution_chain_id)\n#df_train_val_csv[[\"hp\", \"attack\", \"defense\", \"special_attack\", \"special_defense\",\"speed\" ]].sum(axis=1))","dd14fcc5":"e_list = error_list(df_train_val_csv.target , oof_pred)","bc9bede6":"df_train_val_csv_oof = df_train_val_csv.copy()\ndf_train_val_csv_oof[\"oof\"] = oof_pred\ndf_train_val_csv_oof[\"error\"] = e_list","e1a0bbb2":"def show_worst16( img_path_list):\n    plt.figure(figsize=(10,10))\n    k=0\n    for img_path in img_path_list:\n        if(img_path==img_path):\n            img=Image.open( \"..\/input\/shigglecup-1st\/DATA\/pokemon_images\/%s\"%img_path)\n            k+=1\n            plt.subplot(4,4,k)\n            plt.imshow(img)\n            if k==16:\n                break\n    plt.show()","e58872c3":"display(HTML(df_train_val_csv_oof.sort_values(\"error\", ascending=False).to_html()))","9cc2df66":"train_X.shape","5a75d493":"show_worst16(df_train_val_csv_oof.sort_values(\"error\", ascending=False).url_image)","0fc18810":"plt.yscale(\"log\")\nplt.hist(df_train_val_csv_oof.sort_values(\"error\", ascending=False).error, bins=20)\nplt.show()","2164b5f3":"preds=[]\nfor i in range(10):\n    pp = pps[i]\n    lgb_reg = models[i]\n    \n    test_X = df_test_csv.drop([\"id\", \"shape_id\",\"evolves_from_species_id\", ], axis=1).copy()\n    test_X_pp = pp.transform(test_X)\n    test_X_pp.drop([\"pokemon\",\"species_id\"], axis=1, inplace=True)\n    pred = np.exp( lgb_reg.predict( test_X_pp ,  num_iteration=lgb_reg.best_iteration) ) - 1.\n    preds.append(pred)","39ce9d35":"sub_df = pd.DataFrame( {\n    \"id\":df_test_csv.id,\n    \"target\":np.mean(np.array(preds).T, axis=1)} )","28d52ba9":"sub_df.to_csv(\"submission.csv\", index=False)","00daa4ad":"plt.hist(df_train_val_csv.target, density=True)\nplt.hist(sub_df.target, density=True)","f1fae792":"Type1\u3068Type2\u306e\u6b20\u640d\u5024\u3092\"\"\u306b\u7f6e\u304d\u63db\u3048\u3066\u3001Type1\u30682\u3092\u9023\u7d50\u3057\u305f\u7279\u5fb4\u3092\u4f5c\u6210","1178e44e":"\u4f55\u6bb5\u968e\u76ee\u306e\u9032\u5316\u304b\u3092\u7279\u5b9a\u3059\u308b\u305f\u3081\u306e\u30b3\u30fc\u30c9","e9951b91":"evolution_chain_id\u6bce\u306b\u306e\u6700\u7d42\u9032\u5316\u5f62\u614b\u307e\u3067\u4f55\u56de\u9032\u5316\u304c\u5fc5\u8981\u304b\u3092\u7279\u5fb4\u91cf\u5316","e50c24fc":"\u7a2e\u65cf\u5024\u306e\u5408\u8a08\u3068\u9032\u5316\u30ec\u30d9\u30eb\u3067\u3060\u3044\u305f\u3044\u50be\u5411\u304c\u8868\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d  \n\u6700\u7d42\u9032\u5316\u5f62\u614b\u307e\u3067\u306b\u5fc5\u8981\u306a\u9032\u5316\u56de\u6570\u304c\u7570\u306a\u308b\u305f\u3081\u3001\u3054\u3063\u3061\u3083\u306b\u306a\u3063\u3066\u308b\u3068\u3053\u308d\u306f\u3042\u308b\u304c\u304a\u304a\u3088\u305d\u306e\u50be\u5411\u306f\u3053\u308c\u3067\u6349\u3048\u3089\u308c\u3066\u3044\u308b","5b3746e6":"\u524d\u51e6\u7406\u7528\u306e\u30af\u30e9\u30b9\u3000\u3000\n- TRAIN+VAL+TEST\u3067\"height\", \"weight\",'attack', 'defense', 'hp', 'special_attack', 'special_defense', 'speed'\u306b\u5bfe\u3057\u3066PCA\u304b\u3051\u3066\u3044\u308b\n  - \u60aa\u624b\u3060\u3063\u305f\u304b\u3082\u3002\u3067\u3082CV,Public\u306f\u6539\u5584\u3057\u305f\u306f\u305a\n- \u540d\u524d\u3092\u898b\u3066\u300c-\u300d\u3001\u300c-mega\u300d\u3001\u300c-blade\u300d\u304c\u3064\u3044\u3066\u3044\u308b\u304b\u3092\u7279\u5fb4\u91cf\u5316\n- \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306fOrdinalEncoder\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\u3053\u3053\u3082TRAIN+VAL+TEST\u3067\u3084\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n  - \u60aa\u624b\u3060\u3063\u305f\u304b\u3082\n- \u7a2e\u65cf\u5024\u306e\u5408\u8a08\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u8ffd\u52a0\n- \u9632\u5fa1\u3001\u7279\u6b8a\u9632\u5fa1\u306e\u6700\u5927\u5024\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u8ffd\u52a0\n- \u653b\u6483\u3001\u7279\u6b8a\u653b\u6483\u306e\u6700\u5927\u5024\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u8ffd\u52a0","b42969b5":"\u30d9\u30f3\u56f3\u3067Train+Val\u3068Test\u306e\u9055\u3044\u3092\u78ba\u8a8d  \n- species id\u304cTest\u3068\u91cd\u8907\u3057\u3066\u308b  \n- id \u306f\u4f7f\u3046\u306a  \n- generation_id\u304c\u7d50\u69cb\u9055\u3044\u305d\u3046\u3067\u4f7f\u3046\u304b\u8981\u691c\u8a0e\n","04414685":"Loss\u8a08\u7b97\u306e\u70ba\u306bTarget\u3092\u5909\u63db","c463ecb1":"StratifiedKFold\u306e\u70ba\u306bTarget\u309210\u533a\u5206\u306b\u5206\u5272","3bfba6ad":"\u30d4\u30f3\u30af\u306e\u60aa\u9b54\u305f\u3061\u3092\u7570\u5e38\u5024\u3068\u8003\u3048\u3066\u3001Train\u304b\u3089\u306f\u9664\u53bb\u3057\u3066\u5b66\u7fd2\u3002Valid\u306b\u306f\u6b8b\u3059\u3002  \nTest\u306b\u30d4\u30f3\u30af\u306e\u60aa\u9b54\u304c\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u6e08\u307f  \n\u3042\u3068\u306f\u3001LightGBM\u3067\u5b66\u7fd2\u3002min_child_samples\u3092\u4f55\u500b\u304b\u8a66\u3057\u3066OOF\u3067\u826f\u3055\u305d\u3046\u306a\u5024\u306b\u3057\u305f\u3002"}}