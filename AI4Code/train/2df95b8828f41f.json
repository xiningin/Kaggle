{"cell_type":{"d28eb740":"code","7ab3a256":"code","fb4630f9":"code","8030f726":"code","101f2404":"code","110ec00a":"code","35699cfd":"code","c4d1c16f":"code","557b266f":"code","8bd6f331":"code","692dfd20":"code","1184896e":"code","e697351d":"code","6bb5a0bc":"code","d23b6540":"code","82e57e21":"code","5272161f":"code","bbb4fc44":"code","50d676f8":"code","cd9a48d4":"code","0a57c9ab":"markdown","14b94c94":"markdown","fe6a9272":"markdown","3cfc4d0c":"markdown","9a05bc67":"markdown","2bd9e89e":"markdown","20ab275a":"markdown","15fa9b99":"markdown","d5eb53c2":"markdown"},"source":{"d28eb740":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.tsa.arima_process import ArmaProcess\nfrom statsmodels.tsa.stattools import adfuller, kpss","7ab3a256":"# numple of data point to be generated\nN = 100000","fb4630f9":"# AR and MA coefficients\nar_coef = [1, 0.5]\nma_coef = [1]\narma_process = ArmaProcess(ar_coef, ma_coef)","8030f726":"# generate stationary data\nstationary_data = arma_process.generate_sample(N)","101f2404":"# plot the whole data and first 100 data points\nplt.figure(figsize=(20,5))\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(20, 10))\nax1.plot(stationary_data)\nax1.set_title('Plot of all data points')\nax2.plot(stationary_data[:100])\nax2.set_title('Plot of first 100 data points')","110ec00a":"mean_list = []\nvar_list = []\n\nsample_size = 100\n\nfor i in range(1, N-sample_size):\n    start = i\n    end = i+sample_size\n    sample = stationary_data[start:end]\n    mean_list.append(sample.mean())\n    var_list.append(sample.var())","35699cfd":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\n\nsns.kdeplot(mean_list, ax=ax1, color='green')\nax1.axvline(np.mean(stationary_data), color='red', linestyle='--')\nax1.set_title('Sample mean distribution')\n\n# the dashed lines represents the true mean and variance in the 2 figures\n\nsns.kdeplot(var_list, ax=ax2)\nax2.axvline(np.var(stationary_data), color='red', linestyle='--')\nax2.set_title('Sample varriance distribution')","c4d1c16f":"print('True mean: {}'.format(np.mean(stationary_data)))\nprint('True variance: {}'.format(np.var(stationary_data)))","557b266f":"# test if time series is stationary\ndef check_stationary(series):\n    '''\n        Perform augmented ickey fuller test. The p-value (2nd element of the returned result) \n        close to 0 (<0.05 - typical significant level) denotes a stationary time series\n    '''\n    res = adfuller(series)\n    if(res[1] < 0.05):\n        print('The series is stationary with p-value={}'.format(res[1]))\n    else:\n        print('The series is non-stationary with p-value={}'.format(res[1]))","8bd6f331":"# dickey fuller test on the series\ncheck_stationary(stationary_data)","692dfd20":"# create a line with slope = 7 and intercept = 5\nlinear_trend = 150*np.linspace(0, 1, N) + 10","1184896e":"# add the trend to the stationary data to make a new series with trend\ntrend_data = linear_trend + stationary_data","e697351d":"n_samples = 5000\n\ntrend_data = linear_trend + stationary_data\n\nfig, (ax1, ax2) = plt.subplots(2,1,figsize=(20, 10))\n\nax1.plot(linear_trend[:n_samples])\nax1.set_title('Trend pattern'.format(n_samples))\n\nax2.plot(trend_data[:n_samples])\nax2.set_title('First {} points of a trend time series'.format(n_samples))\n","6bb5a0bc":"# Test if the series is stationary\ncheck_stationary(trend_data)","d23b6540":"mean_list = []\n\nsample_size = 100\n\nfor i in range(1, N-sample_size):\n    start = i\n    end = i+sample_size\n    sample = trend_data[start:end]\n    mean_list.append(sample.mean())","82e57e21":"plt.plot(mean_list)\nplt.title('Sample means over time of a trend time series')","5272161f":"T = 365 # a time length for 1 cycle\nn_periods = N \/\/ T + 1","bbb4fc44":"sine_seasonality = np.sin(2*np.pi*np.linspace(0, 1*n_periods, T*n_periods))\n# trim to get size that equals to N\nsine_seasonality = sine_seasonality[:N]\n# add an upward trend\nsine_seasonality += np.arange(0, N)*0.001","50d676f8":"n_samples = 5000\n\nseasonal_data = sine_seasonality + stationary_data\nseasonal_samples = seasonal_data[:n_samples]\n\nseasonal_data = sine_seasonality + stationary_data\n\nfig, (ax1, ax2) = plt.subplots(2,1,figsize=(20, 10))\n\nax1.plot(sine_seasonality[:n_samples])\nax1.set_title('First {} points of seasonal pattern'.format(n_samples))\n\nax2.plot(seasonal_samples)\nfor i in range(n_periods):\n    if(i > 5000\/\/T):\n        break\n    ax2.axvline(i*T, color='red', linestyle='--')\nax2.set_title('First {} points of a seasonal time series'.format(n_samples))\n","cd9a48d4":"check_stationary(seasonal_data)","0a57c9ab":"### Mean and variance does not change much over time\n- The mean and the variance of these following sample extracted from original data seems to fluctuate around the true mean and true variance respectively\n- If the number of data and number of sample is large enough, the collection of sample means are very is very close to the normal distribution","14b94c94":"# 1. Generate a stationary time series:\n- The arma process that is used to generate stationary data\n\nhttps:\/\/www.statsmodels.org\/stable\/generated\/statsmodels.tsa.arima_process.ArmaProcess.html","fe6a9272":"## Test if a time series is stationary","3cfc4d0c":"# 3. Seasonality:\n- We use the cyclic pattern in sine function to simulate seasonality\n- The seasonal part is then added to the stationary data to form a seasonal time series","9a05bc67":"### Please check out my medium article to get the overview of fundamental characteristics of time series data:\n- Link: ","2bd9e89e":"## Test if the seasonal series and trend seasonal series are stationary","20ab275a":"- We will see the movement of the mean over time by ploting the sample's means","15fa9b99":"# 2. Trend:\n- We will create a line, then add the generate stationary onto the line to make it a time series with linear trend\n- When we plots the means of the samples, we will see that these means follow the exact trend\n- This trend series is non-stationary (the mean increases over time)","d5eb53c2":"- We obseve a repeated pattern for each T, which denotes the seasonality\n- It is hard to see the cyclic pattern in sine_seasonality due to the large number of data point N. So we only plot some first few ones.\n- The final plot is the combination of both trend and seasonality into the original stationary time series"}}