{"cell_type":{"787687d1":"code","1a0ecca7":"code","de98fb58":"code","1f018e8e":"code","027f811b":"code","c22a3eff":"code","fa8f630b":"code","a5ecfc50":"code","03f4523e":"code","e1277e0e":"code","ff64f1cb":"code","4fb74b98":"code","101c3cd2":"code","2e9edbda":"code","7ee042c4":"code","4f53e5b0":"markdown","e5488ed2":"markdown","7b0edfe5":"markdown","f0a67a1b":"markdown","31131249":"markdown"},"source":{"787687d1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1a0ecca7":"df=pd.read_csv(\"netflix_titles.csv\")","de98fb58":"df.head(10)","1f018e8e":"print(\"shape:\",df.shape)\nprint(df.columns)","027f811b":"dict = {}\nfor i in list (df.columns):\n    dict[i]=df[i].value_counts().shape[0]\nprint(pd.DataFrame(dict,index = [\"unique count\"]).transpose())    \n    ","c22a3eff":"# Identify the unique values and missing values \ndict = {}\nfor i in list(df.columns):\n    dict[i] = df[i].value_counts().shape[0]\n    \nprint(pd.DataFrame(dict,index = [\"unique count\"]).transpose())","fa8f630b":"print('Table of missing values: ')\nprint(df.isnull().sum())","a5ecfc50":"# top 10 country count \nNetflix_top_country = df['country'].value_counts().head(10)\n\ndf2 = pd.DataFrame(Netflix_top_country, columns= ['country'])\n\nprint(df2)\n\n#last ten years of netflix\n\nLast_ten_years = df[df['release_year']>2010]\nLast_ten_years. head()","03f4523e":"#look at the count of type, rating and country\n\nfig = plt.figure(figsize = (20,20))\ngs = fig.add_gridspec(2,2)\ngs.update(wspace=0.3, hspace=0.3)\n\nsns.set(style=\"darkgrid\")\nax0=fig.add_subplot(gs[0,0])\nax1=fig.add_subplot(gs[0,1])\nax2=fig.add_subplot(gs[1,0])\nax3=fig.add_subplot(gs[1,1])\n\n#set titles and lables\nax0.set_title(\"Tv_shows vs Movies\")\nax1.set_title(\"Distribution of ratings\")\nax2.set_title(\"Distribution of country\")\nax3.set_title(\"Distribution of release year\")\n\nax1.set_xticklabels(labels=[], rotation= 90)\nax2.set_xticklabels(labels=[], rotation= 90)\n\n#construction subplot\n\nsns.countplot(ax = ax0, x =\"type\", data = df, palette=\"Set2\")\nsns.countplot(ax = ax1, x = \"rating\" , hue = \"type\", data= df)\nsns.countplot(ax = ax2, x = \"country\" , hue = \"type\", data= df, order= df.country.value_counts().iloc[:10].index)\nsns.countplot(ax = ax3, x = \"release_year\" , hue = \"type\", data = Last_ten_years)\nplt.show()","e1277e0e":"df['description'].head()","ff64f1cb":"#TFidfvectorizer from scikit-learn\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n#define TFidfVectorizer object. remove all stop words english such as 'the', 'a'\n\nTfidf= TfidfVectorizer(stop_words = 'english')\n\n#remove NAN with empty string\ndf['description']=df['description'].fillna('')\n\n#construct the TFIDF matrix by fitting and trasnforming the data\nTfidf_matrix = Tfidf.fit_transform(df['description'])\n\n#output the matrix\n\nTfidf_matrix.shape\n","4fb74b98":"from sklearn.metrics.pairwise import linear_kernel\n\n#compute the cosine similarity matrix \n\ncosine_sim= linear_kernel(Tfidf_matrix,Tfidf_matrix)","101c3cd2":"#Construct the reverse map of indices and movie titles\n\nindices = pd.Series(df.index,index=df['title']).drop_duplicates()\nindices.head()","2e9edbda":"def get_recommendations(title, cosine_sim = cosine_sim):\n    #get index of the matching title\n    idx=indices[title]\n    #get the similarity score of the similar titles\n    sim_scores=list(enumerate(cosine_sim[idx]))\n    #sort the movies based on the similarity score\n    sim_scores=sorted(sim_scores, key=lambda x:x[1], reverse=True)\n    #get the similarity score of top 10 movies\n    sim_scores=sim_scores[1:11]\n    #get the indices \n    movie_indices = [i[0] for i in sim_scores]\n    #return the top indices\n    return df['title'].iloc[movie_indices]","7ee042c4":"get_recommendations('Supernatural')","4f53e5b0":"Compute similarity score","e5488ed2":"Discriptions based recomendation system","7b0edfe5":"Objective\nConstruct a Netflix Recommendation System that can give recommend similar Netflix-Content when given a Item details such as name , director , cast and etc.","f0a67a1b":"#### Identifying the unqiue values and missing values","31131249":"EDA for the dataset"}}