{"cell_type":{"33b8c022":"code","e781619a":"code","a2d0dd0c":"code","23fea3d5":"code","9ffa2c4f":"code","714776f4":"code","dfead3b0":"code","c2585582":"code","193c1ff3":"code","242705b5":"code","433a76bd":"code","91c34590":"code","0638496b":"code","739b2cd5":"code","2191a9e3":"code","e476d51c":"code","c8155a11":"code","259b8682":"code","c68ffb39":"code","52d48021":"code","254da3d1":"code","a3f16efb":"code","12704b7a":"code","cb7e9e1c":"code","4b95da0a":"code","61208acb":"code","963974c9":"code","64af6646":"code","10ad7b99":"code","8a7c09b7":"code","76d230c7":"code","e1dea8a9":"code","bb1f8133":"code","c1f18e61":"code","917bbc15":"code","3e0d0f18":"code","cf87b120":"code","bbfe191b":"code","66379bb2":"code","afd2b982":"code","424f188a":"markdown","2889f1ef":"markdown","03bd3cab":"markdown","cbb449a8":"markdown","c0804feb":"markdown","fa26765e":"markdown","e6f70dc5":"markdown","d9fc7f42":"markdown","8eca5988":"markdown","8a9a1338":"markdown","da8604e6":"markdown","787ddc02":"markdown","bbbc4d57":"markdown","ebf1a4ad":"markdown","8542a748":"markdown","62d3adba":"markdown","7bff13c4":"markdown","2053d595":"markdown","3e2959b9":"markdown","5911d7b4":"markdown","82e1d0c4":"markdown","3602b32c":"markdown","9f58f4c8":"markdown","1a2b01a0":"markdown","c34f8fa2":"markdown","61df9784":"markdown","8a2e265d":"markdown","b8ed18a0":"markdown","f76c7ab2":"markdown","ca537ba1":"markdown","f8390fcc":"markdown","7e85ce5b":"markdown","50d42d7b":"markdown","252886e1":"markdown","4c56ce37":"markdown","48e6d207":"markdown","df45a411":"markdown"},"source":{"33b8c022":"# --- CSS STYLE ---\nfrom IPython.core.display import HTML\ndef css_styling():\n    styles = open(\"..\/input\/competiongoal\/archive\/alerts.css\", \"r\").read()\n    return HTML(\"<style>\"+styles+\"<\/style>\")\ncss_styling()","e781619a":"!pip install -q nnAudio\n!pip install timm","a2d0dd0c":"import sys\nsys.path.append('..\/input\/pytorch-image-models\/pytorch-image-models-master')\n\nimport os\nimport math\nimport time\nimport random\nimport shutil\nfrom pathlib import Path\nfrom contextlib import contextmanager\nfrom collections import defaultdict, Counter\nfrom nnAudio.Spectrogram import CQT\nimport scipy as sp\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold, GroupKFold, KFold\n\nfrom tqdm.auto import tqdm\nfrom functools import partial\n\nimport cv2\nfrom PIL import Image\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.optim import Adam, SGD\nimport torchvision.models as models\nfrom torch.nn.parameter import Parameter\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.optim.lr_scheduler import CosineAnnealingWarmRestarts, CosineAnnealingLR, ReduceLROnPlateau\n\nimport albumentations as A\nfrom albumentations.pytorch import ToTensorV2\nfrom albumentations import ImageOnlyTransform\n\nimport timm\n\nfrom torch.cuda.amp import autocast, GradScaler\n\nfrom nnAudio.Spectrogram import CQT1992v2\n\nimport warnings\nwarnings.filterwarnings('ignore')\nimport librosa\nfrom librosa.feature import melspectrogram\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nfrom pathlib import Path\nimport pandas as pd\nimport glob\nimport numpy as np\nimport matplotlib as mpl\nimport seaborn as sns\nimport random\nimport joblib\nfrom tqdm import tqdm_notebook as tqdm\nimport librosa\nimport librosa.display\nfrom scipy import signal\nfrom scipy.interpolate import interp1d\nfrom scipy.signal import butter, filtfilt, iirdesign, zpk2tf, freqz\nimport matplotlib.gridspec as gridspec\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","23fea3d5":"#list = glob.glob('.\/data\/*.csv')\n#data = pd.read_csv(list[0])\n#for i in tqdm(range(1,len(list))):\n#    data = pd.concat([data,pd.read_csv(list[i])])\n#data.to_csv('g2net_train.csv')","9ffa2c4f":"#stop","714776f4":"pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/training_labels.csv')","dfead3b0":"input = np.load('..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/00000e74ad.npy')\nfig, ax = plt.subplots(1,3,figsize=(15,5))\n\nax[0].hist(pd.DataFrame(input[0]))\nax[0].set_title(\"channel 0\")\nax[1].hist(pd.DataFrame(input[1]))\nax[1].set_title(\"channel 1\")\nax[2].hist(pd.DataFrame(input[2]))\nax[2].set_title(\"channel 2\")","c2585582":"input = np.load('..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/00001f4945.npy')\nfig, ax = plt.subplots(1,3,figsize=(15,5))\n\nax[0].hist(pd.DataFrame(input[0]))\nax[0].set_title(\"channel 0\")\nax[1].hist(pd.DataFrame(input[1]))\nax[0].set_title(\"channel 1\")\nax[2].hist(pd.DataFrame(input[2]))\nax[0].set_title(\"channel 2\")","193c1ff3":"input = np.load('..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/00000e74ad.npy')\nsns.distplot(pd.DataFrame(input[0]))\nsns.distplot(pd.DataFrame(input[1]))\nsns.distplot(pd.DataFrame(input[2]))","242705b5":"input = np.load('..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/0000a38978.npy')\nsns.distplot(pd.DataFrame(input[0]))\nsns.distplot(pd.DataFrame(input[1]))\nsns.distplot(pd.DataFrame(input[2]))","433a76bd":"input = np.load('..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/00001f4945.npy')\nsns.distplot(pd.DataFrame(input[0]))\nsns.distplot(pd.DataFrame(input[1]))\nsns.distplot(pd.DataFrame(input[2]))","91c34590":"input = np.load('..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/0000661522.npy')\nsns.distplot(pd.DataFrame(input[0]))\nsns.distplot(pd.DataFrame(input[1]))\nsns.distplot(pd.DataFrame(input[2]))","0638496b":"pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/sample_submission.csv')","739b2cd5":"#list = glob.glob('..\/input\/g2net-gravitational-wave-detection\/train\/*\/*\/*\/*')\n#len(list)","2191a9e3":"#list = sorted(list)\n#list[:10]","e476d51c":"train = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/training_labels.csv')\ntest = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/sample_submission.csv')\n\ndef get_train_file_path(image_id):\n    return \"..\/input\/g2net-gravitational-wave-detection\/train\/{}\/{}\/{}\/{}.npy\".format(\n        image_id[0], image_id[1], image_id[2], image_id)\n\ndef get_test_file_path(image_id):\n    return \"..\/input\/g2net-gravitational-wave-detection\/test\/{}\/{}\/{}\/{}.npy\".format(\n        image_id[0], image_id[1], image_id[2], image_id)\n\ntrain['file_path'] = train['id'].apply(get_train_file_path)\ntest['file_path'] = test['id'].apply(get_test_file_path)\nprint(train.shape)\ndisplay(train.head())\ndisplay(test.head())","c8155a11":"def make_spectrogram(path, prints=False):\n    '''Creates a MEL spectrogram.'''\n    \n    # Get the waves from the 3 sites\n    waves = np.load(path).astype(np.float32)\n    if prints:\n        print(color.S+\"Waves Shape:\"+color.E, waves.shape)\n    \n    # Loop and make spectrogram\n    spectrograms = []\n    \n    for i in range(3):\n        # Compute a mel-scaled spectrogram.\n        spec = melspectrogram(waves[i] \/ max(waves[i]), sr=4096, \n                              n_mels=128, fmin=20, fmax=2048)\n        # Convert a power spectrogram (amplitude squared) to decibel (dB) units\n        spec = librosa.power_to_db(spec).transpose((1, 0))\n        spectrograms.append(spec)\n        \n    return spectrograms","259b8682":"# Samples per category\nn=3\n\n# Sample 6 paths with target and no target available\npaths_no_target = train[train[\"target\"] == 0][\"file_path\"].sample(n, random_state=23).values\npaths_with_target = train[train[\"target\"] == 1][\"file_path\"].sample(n, random_state=23).values\n\nall_paths = np.append(paths_no_target, paths_with_target)\n\n# Plot\nfig, axes = plt.subplots(nrows=2, ncols=n, figsize=(21,5))\nwandb_logs = []\n\n# Enumerate & plot\nfor i, path in enumerate(all_paths):\n    if i < n: title = \"No Target\" \n    else: title=\"With Target\"\n    \n    spec = make_spectrogram(path, prints=False)\n    img = np.vstack(spec)\n    \n    x = i \/\/ n\n    y = i % n\n    \n    axes[x, y].imshow(img, cmap=\"cool\")\n    axes[x, y].set_title(title)\n    axes[x, y].axis('off');\n    \n    \n    \nplt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=0.07, hspace=0.0)","c68ffb39":"def visualize_spectogram(\n    id_, \n    target):\n    \n    signal_names=(\"channel 0\", \"channel 1\", \"channel 2\")\n    path = train[train.id==id_]\n    path = str(path.file_path.values)[2:-2]\n    x = np.load(path)\n    plt.figure(figsize=(14, 4))\n    for i in range(3):\n        X = librosa.stft(x[i] \/ x[i].max())\n        Xdb = librosa.amplitude_to_db(abs(X))\n        plt.subplot(1, 3, i + 1)\n        librosa.display.specshow(Xdb, sr=2048, x_axis=\"time\", y_axis=\"hz\", vmin=-30, vmax=50) \n        plt.colorbar()\n        plt.title(signal_names[i], fontsize=14)\n\n    plt.suptitle(f\"id: {id_} target: {target}\", fontsize=16)\n    plt.show()","52d48021":"    id_ = train.iloc[0][\"id\"]\n    target = train.iloc[0][\"target\"]\n    visualize_spectogram(id_, target)","254da3d1":"    id_ = train.iloc[4][\"id\"]\n    target = train.iloc[4][\"target\"]\n    visualize_spectogram(id_, target)","a3f16efb":"    id_ = train.iloc[1][\"id\"]\n    target = train.iloc[1][\"target\"]\n    visualize_spectogram(id_, target)","12704b7a":"    id_ = train.iloc[2][\"id\"]\n    target = train.iloc[2][\"target\"]\n    visualize_spectogram(id_, target)","cb7e9e1c":"def bandpass(strain, fband, fs):\n    \"\"\"Bandpasses strain data using a butterworth filter.\n    \n    Args:\n        strain (ndarray): strain data to bandpass\n        fband (ndarray): low and high-pass filter values to use\n        fs (float): sample rate of data\n    \n    Returns:\n        ndarray: array of bandpassed strain data\n    \"\"\"\n    bb, ab = butter(4, [fband[0]*2.\/fs, fband[1]*2.\/fs], btype='band')\n    normalization = np.sqrt((fband[1]-fband[0])\/(fs\/2))\n    strain_bp = filtfilt(bb, ab, strain) \/ normalization\n    return strain_bp","4b95da0a":"def whiten(strain, interp_psd, dt, phase_shift=0, time_shift=0):\n    \"\"\"Whitens strain data given the psd and sample rate, also applying a phase\n    shift and time shift.\n    Args:\n        strain (ndarray): strain data\n        interp_psd (interpolating function): function to take in freqs and output \n            the average power at that freq \n        dt (float): sample time interval of data\n        phase_shift (float, optional): phase shift to apply to whitened data\n        time_shift (float, optional): time shift to apply to whitened data (s)\n    \n        Returns:\n        ndarray: array of whitened strain data\n    \"\"\"\n    Nt = len(strain)\n    # take the fourier transform of the data\n    freqs = np.fft.rfftfreq(Nt, dt)\n\n    # whitening: transform to freq domain, divide by square root of psd, then\n    # transform back, taking care to get normalization right.\n    hf = np.fft.rfft(strain)\n    \n    # apply time and phase shift\n    hf = hf * np.exp(-1.j * 2 * np.pi * time_shift * freqs - 1.j * phase_shift)\n    norm = 1.\/np.sqrt(1.\/(dt*2))\n    white_hf = hf \/ np.sqrt(interp_psd(freqs)) * norm\n    white_ht = np.fft.irfft(white_hf, n=Nt)\n    return white_ht","61208acb":"time_span = 2 # 2 seconds\nsample_rate = 2048 # in Hz\nnum_samples = sample_rate*time_span\nhp_window = 1\nhp_tukey_alpha = 0.125\n#NFFT = 1*strain_len # why 16?\nNFFT = 4 * num_samples           # Use 4 seconds of data for each fourier transform\nNOVL = 1 * NFFT \/ 2 # The number of points of overlap between segments used in Welch averaging\nfband = [15.0, 350.0]\ndt = 0.000244140625 # ?\nfig, ax = plt.subplots(5,2,figsize=(16,16))\n\nfor m in range(5):\n    for k in range(2):\n        melspecs = []\n        for channel in [0,0,0]:#range(3):\n            paths = train[train.target==k].reset_index(drop=True)\n            path = paths.loc[m]\n            example_strain = np.load(path.file_path)\n\n            strain = example_strain[channel,:] \/ 2\n\n            tukey_window = signal.tukey(num_samples*hp_window, hp_tukey_alpha)\n            windowed_strain = strain*tukey_window\n\n            psd_window = signal.tukey(NFFT, alpha=1.\/4)\n            Pxx_strain, freqs = mlab.psd(windowed_strain, Fs = num_samples, NFFT = NFFT,\n                                         window=psd_window, noverlap=NOVL)\n            PSD = interp1d(freqs, Pxx_strain)\n    \n            strain_whitened = whiten(windowed_strain, \n                                 PSD, dt)\n            bandpassed_strain = bandpass(strain_whitened, fband, num_samples)\n            ax[m,k].plot(bandpassed_strain)\n            ax[m,k].set_ylim([-10,10])\n            \n        ax[m,k].set_title(\"Target {}\".format(k))","963974c9":"class G2NetDataset(Dataset):\n    def __init__(self, paths, targets=None): \n        self.paths = paths\n        self.targets = targets\n\n    def __len__(self):\n        return len(self.paths)\n    \n    def __getitem__(self, index):      \n        signal = np.load(self.paths[index])\n        signal = np.concatenate(signal, axis=0) # we concatenate data from 3 sensors to one signal\n        signal = signal \/ np.max(signal)\n        if self.targets is not None:\n            targets = self.targets[index]\n            return {\n                \"signal\": torch.tensor(signal, dtype=torch.float),\n                \"target\": torch.tensor(targets, dtype=torch.long),\n            }\n        else:\n            return {\n                'signal': torch.tensor(signal, dtype=torch.float)\n            }","64af6646":"ROOT_DIR = '..\/input\/g2net-gravitational-wave-detection'\ndf = pd.read_csv(os.path.join(ROOT_DIR, 'training_labels.csv'))\ndf['path'] = df['id'].apply(lambda x: f'{ROOT_DIR}\/train\/{x[0]}\/{x[1]}\/{x[2]}\/{x}.npy')","10ad7b99":"transform = CQT(sr=2048,        # sample rate\n                fmin=20,        # min freq\n                fmax=1024,      # max freq\n                hop_length=64)  # hop length\n\nds = G2NetDataset(df['path'], df['target'])\ncqts = []\nfor i in range(4):\n    cqts.append(transform(ds.__getitem__(i)['signal']).squeeze())","8a7c09b7":"fig, axs = plt.subplots(4)\nfig.set_figheight(15)\nfig.set_figwidth(15)\ni=0\nnid = df['id'][i]\nntarget = df['target'][i]\naxs[i].title.set_text(f'{nid}.npy, target: {ntarget}')\naxs[i].pcolormesh(cqts[i])\n\ni=1\nnid = df['id'][i]\nntarget = df['target'][i]\naxs[i].title.set_text(f'{nid}.npy, target: {ntarget}')\naxs[i].pcolormesh(cqts[i])\n\ni=2\nnid = df['id'][i]\nntarget = df['target'][i]\naxs[i].title.set_text(f'{nid}.npy, target: {ntarget}')\naxs[i].pcolormesh(cqts[i])\n\ni=4\nnid = df['id'][i]\nntarget = df['target'][i]\naxs[3].title.set_text(f'{nid}.npy, target: {ntarget}')\naxs[3].pcolormesh(cqts[3])","76d230c7":"import scipy.fftpack as sfft\ndata = np.load('..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/00000e74ad.npy')\nh,w=data.shape \nfftsize=max(h,w) \nprint(fftsize) \nz=sfft.fftshift(sfft.fft2(data,(fftsize,fftsize)))#\nplt.plot(np.log(np.abs(z)))\nplt.show()\nprint(z.shape)","e1dea8a9":"img =data.reshape(48,256)\nplt.imshow(img)","bb1f8133":"h,w=data.shape  #h\u3001w\u306bG\u306e\u30b5\u30a4\u30ba\u3092\u4ee3\u5165\nfftsize=max(h,w)  #\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3092\u884c\u3046\u969b\u306e\u884c\u5217\u306e\u30b5\u30a4\u30ba\u3092\u6c7a\u5b9a\nprint(fftsize)","c1f18e61":"z=sfft.fftshift(sfft.fft2(data,(fftsize,fftsize)))\nR=np.ones((4096,4096)) \nR[:1000,:]=0\nR[3000:,:]=0\n\nG2=np.uint8(np.abs(sfft.ifft2(sfft.fftshift(z*R))))\n#G2=G2.reshape(48,256)\nplt.imshow(G2[:48,:256])\nplt.show()","917bbc15":"data = np.load('..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/0000a38978.npy')\nh,w=data.shape \nfftsize=max(h,w) \nprint(fftsize) \nz=sfft.fftshift(sfft.fft2(data,(fftsize,fftsize)))#\nplt.plot(np.log(np.abs(z)))\nplt.show()\nprint(z.shape)","3e0d0f18":"data = np.load('..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/00001f4945.npy')\n\nh,w=data.shape \nfftsize=max(h,w) \nprint(fftsize) \nz=sfft.fftshift(sfft.fft2(data,(fftsize,fftsize)))#\nplt.plot(np.log(np.abs(z)))\nplt.show()\nprint(z.shape)","cf87b120":"data = np.load('..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/0000661522.npy')\nh,w=data.shape \nfftsize=max(h,w) \nprint(fftsize) \nz=sfft.fftshift(sfft.fft2(data,(fftsize,fftsize)))#\nplt.plot(np.log(np.abs(z)))\nplt.show()\nprint(z.shape)","bbfe191b":"img =data.reshape(48,256)\nplt.imshow(img)","66379bb2":"h,w=data.shape  #h\u3001w\u306bG\u306e\u30b5\u30a4\u30ba\u3092\u4ee3\u5165\nfftsize=max(h,w)  #\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3092\u884c\u3046\u969b\u306e\u884c\u5217\u306e\u30b5\u30a4\u30ba\u3092\u6c7a\u5b9a\nprint(fftsize)","afd2b982":"z=sfft.fftshift(sfft.fft2(data,(fftsize,fftsize)))\nR=np.ones((4096,4096)) \nR[:1000,:]=0\nR[3000:,:]=0\n\nG2=np.uint8(np.abs(sfft.ifft2(sfft.fftshift(z*R))))\n#G2=G2.reshape(48,256)\nplt.imshow(G2[:48,:256])\nplt.show()","424f188a":"credit https:\/\/www.kaggle.com\/andradaolteanu\/g2net-searching-the-sky-pytorch-effnet-w-meta","2889f1ef":"<div class=\"alert simple-alert\"><div class=\"alert simple-alert\"><font color=\"black\">\n<b>Competition Goal<\/b>: detect GW <i>(Gravitational Wave)<\/i>\u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u3067\u306f\u3001\u30d6\u30e9\u30c3\u30af\u30db\u30fc\u30eb\u9023\u661f\u306e\u5408\u4f75\u306b\u3088\u308bGW\u4fe1\u53f7\u306e\u691c\u51fa\u3092\u76ee\u6307\u3057\u307e\u3059\n<\/div>","03bd3cab":"![image.png](attachment:b4dea74c-d6a6-4eb3-ad24-d8c5d0958a74.png)","cbb449a8":"September 22, 2021 - Entry deadline. You must accept the competition rules before this date in order to compete.<br>\nSeptember 29, 2021 - Final submission deadline.","c0804feb":"### target=0\u3067\u30d6\u30e9\u30c3\u30af\u30db\u30fc\u30eb\u306a\u3044\u30d1\u30bf\u30fc\u30f3","fa26765e":"## \ud83d\udccctrain \/-\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u30d5\u30a1\u30a4\u30eb\u3001\u89b3\u6e2c\u3054\u3068\u306b1\u3064\u306enpy\u30d5\u30a1\u30a4\u30eb\u3002 \n","e6f70dc5":"![image.png](attachment:9d705140-6e40-483b-a40e-fc7b16aa52bb.png)","d9fc7f42":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">librosa.amplitude_to_db<\/span>","8eca5988":"credit https:\/\/www.kaggle.com\/allunia\/signal-where-are-you","8a9a1338":"### target=1\u3067\u30d6\u30e9\u30c3\u30af\u30db\u30fc\u30eb\u3042\u308b\u30d1\u30bf\u30fc\u30f3","da8604e6":"https:\/\/www.kaggle.com\/yasufuminakama\/g2net-efficientnet-b7-baseline-training","787ddc02":"### \u306a\u306b\u304b\u5171\u901a\u3057\u3066\u9055\u3046\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3055\u305d\u3046","bbbc4d57":"## Target =1","ebf1a4ad":"credit https:\/\/www.kaggle.com\/ihelon\/g2net-eda-and-modeling","8542a748":"### \u306a\u306b\u3092\u4e88\u6e2c\u3059\u308b\u306e\u304b","62d3adba":"## Target =0","7bff13c4":"# target=1","2053d595":"\u3299\ud83d\udd30\ud83d\uddd1\u2b1b\ud83d\udfe5\ud83d\udfe8\ud83d\udfe9","3e2959b9":"## \ud83d\udccctraining_labels.csv-\u95a2\u9023\u3059\u308b\u4fe1\u53f7\u306b\u91cd\u529b\u6ce2\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u76ee\u6a19\u5024","5911d7b4":"credit:https:\/\/www.kaggle.com\/atamazian\/nnaudio-constant-q-transform-demonstration","82e1d0c4":"### \ud83d\ude01\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u304b\u3089\u4e2d\u8eab\u3092\u307f\u3066\u3044\u3053\u3046","3602b32c":"# \u30c7\u30fc\u30bf\u4f5c\u6210","9f58f4c8":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">signal.tukey<\/span>","1a2b01a0":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">Melspectrogram<\/span>","c34f8fa2":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">\u30af\u30fc\u30ea\u30a8\u5909\u63db<\/span> <br>\nSTIM\u306e\u30b3\u30f3\u30da\u3067\u306f\u3001\u30b3\u30b5\u30a4\u30f3\u6ce2\u3092\u9664\u53bb\u3059\u308b\u3053\u3068\u304c\u30dd\u30a4\u30f3\u30c8\u3060\u3063\u305f\u3088\u3046\u3002\u4eca\u56de\u3082\u540c\u3058\u3068\u306f\u3068\u3066\u3082\u601d\u3048\u307e\u305b\u3093\u304c\u3001\u898b\u3066\u307f\u308b\u4fa1\u5024\u306f\u3042\u308b\u3068\u601d\u3063\u305f\u3002<br>\n\u898b\u3066\u307f\u305f\u304c\u3084\u306f\u308a\u308f\u304b\u3089\u306a\u3044\u3002","61df9784":"### target=1\u3067\u30d6\u30e9\u30c3\u30af\u30db\u30fc\u30eb\u3042\u308b\u30d1\u30bf\u30fc\u30f3","8a2e265d":"![image.png](attachment:1517e3d4-fca5-4b14-b5be-6a6345a7586b.png)","b8ed18a0":"\u63d0\u51fa\u7269\u306f\u3001\u4e88\u6e2c\u3055\u308c\u305f\u78ba\u7387\u3068\u89b3\u5bdf\u3055\u308c\u305f\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u9593\u306eROC\u66f2\u7dda\u306e\u4e0b\u306e\u9818\u57df\u3067\u8a55\u4fa1\u3055\u308c\u307e\u3059\u3002\u3068\u3042\u308a\u307e\u3059\u3002\u30bf\u30fc\u30b2\u30c3\u30c8\u306f\u3053\u308c\u3092\u610f\u8b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002<br>\n","f76c7ab2":"### I can't see the difference","ca537ba1":"# target=0","f8390fcc":"> \ud83d\udd0e\u30c1\u30fc\u30e0\u30ef\u30fc\u30af\u304c\u5922\u3092\u304b\u306a\u3048\u308b\u3068\u8a00\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u30012015\u5e74\u306b\u885d\u7a81\u3057\u305f\u9023\u661f\u30d6\u30e9\u30c3\u30af\u30db\u30fc\u30eb\u304b\u3089\u306e\u4fe1\u53f7\u3067\u3042\u308b\u91cd\u529b\u6ce2\uff08GW\uff09\u306e\u753b\u671f\u7684\u306a\u767a\u898b\u306b\u306f\u5f53\u3066\u306f\u307e\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3053\u308c\u306b\u306f\u3001\u7269\u7406\u200b\u200b\u5b66\u3001\u6570\u5b66\u3001\u60c5\u5831\u79d1\u5b66\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u5c02\u9580\u5bb6\u306e\u5354\u529b\u304c\u5fc5\u8981\u3067\u3057\u305f\u3002 GW\u4fe1\u53f7\u306b\u3088\u308a\u3001\u7814\u7a76\u8005\u305f\u3061\u306f\u3001\u5de8\u5927\u306a\u6052\u661f\u8d77\u6e90\u306e\u30d6\u30e9\u30c3\u30af\u30db\u30fc\u30eb\u306e\u65b0\u3057\u3044\u96c6\u56e3\u3092\u89b3\u5bdf\u3057\u3001\u4e2d\u6027\u5b50\u661f\u5408\u4f53\u306e\u8b0e\u3092\u89e3\u304d\u660e\u304b\u3057\u3001\u5b87\u5b99\u306e\u81a8\u5f35\u3092\u6e2c\u5b9a\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306e\u4fe1\u53f7\u306f\u6642\u7a7a\u306e\u69cb\u9020\u306b\u304a\u3051\u308b\u60f3\u50cf\u3092\u7d76\u3059\u308b\u5c0f\u3055\u306a\u6ce2\u7d0b\u3067\u3042\u308a\u3001GW\u691c\u51fa\u5668\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306f\u5730\u7403\u4e0a\u3067\u6700\u3082\u611f\u5ea6\u306e\u9ad8\u3044\u6a5f\u5668\u306e\u4e00\u90e8\u3067\u3059\u304c\u3001\u4fe1\u53f7\u306f\u691c\u51fa\u5668\u306e\u30ce\u30a4\u30ba\u306b\u57cb\u3082\u308c\u3066\u3044\u307e\u3059\u3002 GW\u30c7\u30fc\u30bf\u306e\u5206\u6790\u3068\u3053\u308c\u3089\u306e\u4fe1\u53f7\u306e\u691c\u51fa\u306f\u3001\u307e\u3059\u307e\u3059\u611f\u5ea6\u304c\u9ad8\u304f\u306a\u308bGW\u691c\u51fa\u5668\u306e\u6210\u9577\u3059\u308b\u30b0\u30ed\u30fc\u30d0\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3068\u3063\u3066\u91cd\u8981\u306a\u4f7f\u547d\u3067\u3059\u3002\u30c7\u30fc\u30bf\u5206\u6790\u3068\u30ce\u30a4\u30ba\u7279\u6027\u8a55\u4fa1\u306b\u304a\u3051\u308b\u3053\u308c\u3089\u306e\u8ab2\u984c\u306f\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u52a9\u3051\u3092\u501f\u308a\u3066\u89e3\u6c7a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n> \n> GW\u306e\u767a\u898b\u306b\u5bfe\u3059\u308b\u591a\u5206\u91ce\u306b\u308f\u305f\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u3068\u540c\u69d8\u306b\u3001GW\u306e\u7814\u7a76\u3092\u3055\u3089\u306b\u9032\u3081\u308b\u306b\u306f\u3001\u8ffd\u52a0\u306e\u5c02\u9580\u77e5\u8b58\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u7279\u306b\u3001\u793e\u4f1a\u79d1\u5b66\u3068\u81ea\u7136\u79d1\u5b66\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u3001\u6df1\u5c64\u5b66\u7fd2\u3001\u5206\u985e\u554f\u984c\u3001\u30c7\u30fc\u30bf\u30de\u30a4\u30cb\u30f3\u30b0\u3001\u8996\u899a\u5316\u306b\u95a2\u5fc3\u3092\u6301\u3063\u3066\u304a\u308a\u3001\u8907\u96d1\u3067\u5927\u898f\u6a21\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u52b9\u7387\u7684\u306b\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u65b0\u3057\u3044\u6280\u8853\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u958b\u767a\u3057\u3066\u3044\u307e\u3059\u3002\u8a08\u7b97\u80fd\u529b\u306e\u5411\u4e0a\u3068\u30c7\u30fc\u30bf\u306e\u8fc5\u901f\u306a\u5206\u6790\u306e\u305f\u3081\u306e\u9769\u65b0\u7684\u306a\u6280\u8853\u306e\u958b\u767a\u306f\u3001GW\u5929\u6587\u5b66\u306e\u523a\u6fc0\u7684\u306a\u65b0\u3057\u3044\u5206\u91ce\u306b\u4e0d\u53ef\u6b20\u3067\u3059\u3002\u6f5c\u5728\u7684\u306a\u7d50\u679c\u306b\u306f\u3001GW\u4fe1\u53f7\u306b\u5bfe\u3059\u308b\u611f\u5ea6\u306e\u5411\u4e0a\u3001\u6b21\u4e16\u4ee3\u691c\u51fa\u5668\u306e\u5236\u5fa1\u304a\u3088\u3073\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u30b7\u30b9\u30c6\u30e0\u3078\u306e\u9069\u7528\u3001\u30ce\u30a4\u30ba\u9664\u53bb\u3001\u30c7\u30fc\u30bf\u8abf\u6574\u30c4\u30fc\u30eb\u3001\u304a\u3088\u3073\u4fe1\u53f7\u306e\u7279\u6027\u8a55\u4fa1\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n> \n> \ud83d\udca1G2Net\u306f\u3001\u91cd\u529b\u6ce2\u3001\u5730\u7403\u7269\u7406\u5b66\u3001\u6a5f\u68b0\u5b66\u7fd2\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u3059\u3002 G2Net\u306f\u3001\u7814\u7a76\u304a\u3088\u3073\u30a4\u30ce\u30d9\u30fc\u30b7\u30e7\u30f3\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8cc7\u91d1\u63d0\u4f9b\u6a5f\u95a2\u3067\u3042\u308bCOST\uff08European Cooperation in Science and Technology\uff09\u304b\u3089\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u901a\u3058\u3066\u3001\u79d1\u5b66\u8005\u306e\u5e45\u5e83\u3044\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u79d1\u5b66\u8005\u306f\u3001GW\u7269\u7406\u5b66\u3001\u5730\u7403\u7269\u7406\u5b66\u3001\u8a08\u7b97\u79d1\u5b66\u3001\u30ed\u30dc\u30c3\u30c8\u5de5\u5b66\u306e4\u3064\u306e\u7570\u306a\u308b\u5c02\u9580\u5206\u91ce\u304b\u3089\u3001GW\u691c\u51fa\u5668\u306e\u30c7\u30fc\u30bf\u5206\u6790\u3068\u30ce\u30a4\u30ba\u7279\u6027\u8a55\u4fa1\u306b\u304a\u3051\u308b\u8ab2\u984c\u306b\u53d6\u308a\u7d44\u3080\u3068\u3044\u3046\u5171\u901a\u306e\u76ee\u6a19\u306b\u5408\u610f\u3057\u307e\u3057\u305f\u3002\n> \n> \u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u3067\u306f\u3001\u30d6\u30e9\u30c3\u30af\u30db\u30fc\u30eb\u9023\u661f\u306e\u5408\u4f75\u306b\u3088\u308bGW\u4fe1\u53f7\u306e\u691c\u51fa\u3092\u76ee\u6307\u3057\u307e\u3059\u3002<u>\u5177\u4f53\u7684\u306b\u306f\u3001\u5730\u7403\u30d9\u30fc\u30b9\u306e\u691c\u51fa\u5668\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304b\u3089\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3055\u308c\u305fGW\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u5206\u6790\u3059\u308b\u305f\u3081\u306e\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002<\/u>","7e85ce5b":"id 0\u306f\u3001\u30c6\u30b9\u30c8\u30d5\u30a9\u30eb\u30c0\u306e\uff11\u500b\u76ee\u306e\u540d\u524d\u3067\u3059\u306d\u3002","50d42d7b":"> \ud83d\udd26\u3053\u306e\u30b3\u30f3\u30da\u30c6[\u30a3\u30b7\u30e7\u30f3\u3067\u306f\u30013\u3064\u306e\u91cd\u529b\u6ce2\u5e72\u6e09\u8a08\uff08LIGO\u30cf\u30f3\u30d5\u30a9\u30fc\u30c9\u3001LIGO\u30ea\u30d3\u30f3\u30b0\u30b9\u30c8\u30f3\u3001\u304a\u3088\u3073\u30d0\u30fc\u30b4\uff09\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304b\u3089\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3055\u308c\u305f\u91cd\u529b\u6ce2\u6e2c\u5b9a\u5024\u3092\u542b\u3080\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\u5404\u6642\u7cfb\u5217\u306b\u306f\u3001\u691c\u51fa\u5668\u30ce\u30a4\u30ba\u307e\u305f\u306f\u691c\u51fa\u5668\u30ce\u30a4\u30ba\u306e\u3044\u305a\u308c\u304b\u3068\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3055\u308c\u305f\u91cd\u529b\u6ce2\u4fe1\u53f7\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u30bf\u30b9\u30af\u306f\u3001\u4fe1\u53f7\u304c\u30c7\u30fc\u30bf\u306b\u5b58\u5728\u3059\u308b\u3068\u304d\u3092\u8b58\u5225\u3059\u308b\u3053\u3068\u3067\u3059\uff08target = 1\uff09\u3002\n> \n> \u30d0\u30a4\u30ca\u30ea\u30d6\u30e9\u30c3\u30af\u30db\u30fc\u30eb\u6ce2\u5f62\u306e\u6b63\u78ba\u306a\u5f62\u5f0f\u3092\u6c7a\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u8cea\u91cf\u3001\u7a7a\u306e\u4f4d\u7f6e\u3001\u8ddd\u96e2\u3001\u30d6\u30e9\u30c3\u30af\u30db\u30fc\u30eb\u30b9\u30d4\u30f3\u3001\u30d0\u30a4\u30ca\u30ea\u914d\u5411\u89d2\u3001\u91cd\u529b\u6ce2\u5206\u6975\u3001\u5230\u7740\u6642\u9593\u3001\u304a\u3088\u3073\u5408\u4f53\u6642\u306e\u4f4d\u76f8\uff08\u30de\u30fc\u30b8\uff09\u3067\u3059\u3002\u3053\u308c\u3089\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\uff08\u5408\u8a0815\uff09\u306f\u3001\u5929\u4f53\u7269\u7406\u5b66\u7684\u306b\u52d5\u6a5f\u4ed8\u3051\u3089\u308c\u305f\u4e8b\u524d\u5206\u5e03\u306b\u5f93\u3063\u3066\u30e9\u30f3\u30c0\u30e0\u5316\u3055\u308c\u3001\u30c7\u30fc\u30bf\u306b\u5b58\u5728\u3059\u308b\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3055\u308c\u305f\u4fe1\u53f7\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u304c\u3001\u7af6\u4e89\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u307e\u305b\u3093\u3002\n> \n> \u5404\u30c7\u30fc\u30bf\u30b5\u30f3\u30d7\u30eb\uff08npy\u30d5\u30a1\u30a4\u30eb\uff09\u306b\u306f3\u3064\u306e\u6642\u7cfb\u5217\uff08\u5404\u691c\u51fa\u5668\u306b1\u3064\uff09\u304c\u542b\u307e\u308c\u3001\u305d\u308c\u305e\u308c\u304c2\u79d2\u306b\u307e\u305f\u304c\u308a\u30012,048Hz\u3067\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002\n> \n> \u7d71\u5408\u3055\u308c\u305f\u4fe1\u53f7\u5bfe\u96d1\u97f3\u6bd4\uff08SNR\uff09\u306f\u3001\u53e4\u5178\u7684\u306b\u3001\u4fe1\u53f7\u304c\u3069\u306e\u7a0b\u5ea6\u691c\u51fa\u53ef\u80fd\u3067\u3042\u308b\u304b\u3092\u793a\u3059\u6700\u3082\u6709\u76ca\u306a\u5c3a\u5ea6\u3067\u3042\u308a\u3001\u3053\u306e\u7d71\u5408\u3055\u308c\u305fSNR\u304c\u7d048\u3092\u8d85\u3048\u308b\u5834\u5408\u306e\u691c\u51fa\u53ef\u80fd\u6027\u306e\u4e00\u822c\u7684\u306a\u30ec\u30d9\u30eb\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u77ac\u9593\u7684\u306aSNR\uff08\u4fe1\u53f7\u304c\u30ce\u30a4\u30ba\u3092\u8d85\u3048\u3066\u4e0a\u6607\u3059\u308b\u8981\u56e0\uff09\u3068\u6df7\u540c\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\u307b\u3068\u3093\u3069\u3059\u3079\u3066\u306e\u5834\u5408\uff08\u6700\u521d\u306e\u91cd\u529b\u6ce2\u691c\u51faGW150914\u3068\u306f\u7570\u306a\u308a\uff09\u3001\u3053\u308c\u3089\u306e\u4fe1\u53f7\u306f\u6642\u7cfb\u5217\u3067\u76ee\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002","252886e1":"<span style=\"color: orange; font-family: Segoe UI; font-size: 1.9em; font-weight: 300;\">QT<\/span>","4c56ce37":"### \u30d5\u30a1\u30a4\u30eb\u69cb\u6210\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u3063\u3066\u3044\u308b\u3002","48e6d207":"### I can't see the difference","df45a411":"### target=0\u3067\u30d6\u30e9\u30c3\u30af\u30db\u30fc\u30eb\u306a\u3044\u30d1\u30bf\u30fc\u30f3"}}