{"cell_type":{"dee71e7c":"code","8dbc6314":"code","9d1a1bef":"code","5940c512":"code","ee73af12":"code","346f2da9":"code","94bd1f2e":"code","7b9ed6ce":"code","eae2a535":"code","c980ec32":"code","cb0bbe86":"code","dd9a3d23":"markdown","501d8e5c":"markdown","695dcd6d":"markdown","b9a249d7":"markdown"},"source":{"dee71e7c":"from tensorflow import keras\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os","8dbc6314":"[file for file in os.listdir('..\/input') if 'kmnist' in file]","9d1a1bef":"def load_data(dir):\n    train_img = np.load('{}\/kmnist-train-imgs.npz'.format(dir))\n    train_lbl = np.load('{}\/kmnist-train-labels.npz'.format(dir))\n                        \n    test_img = np.load('{}\/kmnist-test-imgs.npz'.format(dir))\n    test_lbl = np.load('{}\/kmnist-test-labels.npz'.format(dir))\n    \n    return train_img['arr_0'], train_lbl['arr_0'], test_img['arr_0'], test_lbl['arr_0']\n\nX_train, Y_train, X_test, Y_test = load_data('..\/input')","5940c512":"def preview_images():\n    sns.set_style(\"whitegrid\", {'axes.grid' : False})\n    plt.figure(figsize=(3 * 10, 3 * 10))\n    \n    for i in np.arange(10):\n        images = X_train[np.argwhere(Y_train == i)[:10]]\n        \n        for j, image in enumerate(images):\n            plt.subplot(10, 10, i * 10 + j + 1)\n            plt.xticks([])\n            plt.yticks([])\n            plt.imshow(image.reshape(28, 28))\n            plt.text(28 - 3, 28 - 3, str(i), color='white', fontsize=16)\n\npreview_images()","ee73af12":"sns.set()","346f2da9":"X_train = (X_train \/ 255.).astype('float32').reshape(X_train.shape + (1, ))\nY_train = Y_train.astype('float32')\n\nX_test = (X_test \/ 255.).astype('float32').reshape(X_test.shape + (1, ))\nY_test = Y_test.astype('float32')","94bd1f2e":"from tensorflow.keras import models\nfrom tensorflow.keras import layers","7b9ed6ce":"model = models.Sequential([\n    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    layers.MaxPooling2D(pool_size=(2, 2), strides=None, padding='valid'),\n    layers.Conv2D(64, (3, 3), activation='relu'),\n    layers.MaxPooling2D(pool_size=(2, 2), strides=None, padding='valid'),\n    layers.Flatten(),\n    layers.Dropout(.5),\n    layers.Dense(100, activation='relu'),\n    layers.Dropout(.2),\n    layers.Dense(10, activation='softmax')\n])\n\n#optimizer = keras.optimizers.Adam(lr=0.005, decay=.0001)\noptimizer = keras.optimizers.Adam()\nmodel.compile(optimizer, 'sparse_categorical_crossentropy', metrics=['accuracy'])","eae2a535":"checkpointer = keras.callbacks.ModelCheckpoint(filepath='mnist.h5', verbose=1, save_best_only=True)\nhistory = model.fit(X_train, Y_train, validation_split=.2, epochs=20, callbacks=[checkpointer])","c980ec32":"plt.figure(figsize=(16, 4))\nplt.subplot(1, 2, 1)\nplt.plot(history.history['acc'], label='acc')\nplt.plot(history.history['val_acc'], label='val_acc')\n\nplt.subplot(1, 2, 2)\nplt.plot(history.history['loss'], label='loss')\nplt.plot(history.history['val_loss'], label='val_loss')","cb0bbe86":"from tensorflow.keras.models import load_model\n\nmodel = load_model('mnist.h5')\nmodel.evaluate(X_test, Y_test)","dd9a3d23":"# Validate With Test Data","501d8e5c":"# Dataset Files","695dcd6d":"## Preview Images","b9a249d7":"# Load Data"}}