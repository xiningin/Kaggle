{"cell_type":{"7e18c9ca":"code","75edccf0":"code","49dbba6c":"code","84143caf":"code","22637352":"code","884409ce":"code","ded6714c":"code","ff6ab53a":"code","0f0e8a2f":"code","524cbdb7":"markdown","3ff13408":"markdown","337a3bb8":"markdown","536bea0e":"markdown","c592c188":"markdown","6ef9ba49":"markdown"},"source":{"7e18c9ca":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport seaborn as sns","75edccf0":"df = pd.read_excel(\"..\/input\/premier-league-match-reports-20192020\/premierLeague.xlsx\")\ndf.drop([\"Penalties\", \"PassingAccuracy\"], axis=1, inplace=True)\ndf.head(10)","49dbba6c":"plt.figure(figsize=(14, 14))\n\nmask = np.zeros_like(df.corr())\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(df.corr(), annot=True, vmin=-1, vmax=1, fmt=\".1f\", cmap=\"Greens\", mask=mask, linewidth=0.1)\n\nplt.show()","84143caf":"grouped = df[[\"Team\", \"Fouls\", \"YellowCard\", \"RedCard\", \"YellowRed\"]].groupby(\"Team\")\ndiscipline = pd.DataFrame(grouped.agg(np.sum).sort_values(by=\"Fouls\"))\ndiscipline[\"Kicked\"] = discipline[\"RedCard\"] + discipline[\"YellowRed\"]\ndiscipline","22637352":"fig = plt.figure(figsize=(16, 8))\nax = fig.add_subplot()\n\nsize = 50 + np.array(discipline[\"Kicked\"].values)*50\ncmap = plt.cm.get_cmap(\"autumn_r\")\nax.scatter(x=\"Fouls\", y=\"YellowCard\", s=size, c=\"Kicked\", cmap=cmap, data=discipline)\n\nfor column in [\"Fouls\", \"YellowCard\", \"Kicked\"]:\n    txt_df = discipline[np.logical_or(discipline[column] == discipline[column].max(),\n                                      discipline[column] == discipline[column].min())]\n    for i, index in enumerate(txt_df.index):\n        ax.text(x=txt_df[\"Fouls\"].loc[index],\n                y=txt_df[\"YellowCard\"].loc[index]+2,\n                s=txt_df.index[i],\n                horizontalalignment='center',\n                verticalalignment='bottom')\n\nax.set_xticks(np.arange(350, 601, 25))\nax.set_yticks(np.arange(30, 101, 10))\nax.set_xlabel(\"Fouls\", fontsize=14)\nax.set_ylabel(\"Yellow Cards\", fontsize=14)\nax.grid(alpha=0.3, linestyle=\"--\")\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\n\nmap_ = plt.cm.ScalarMappable(cmap=cmap)\ncbar = plt.colorbar(map_)\nticks = set(discipline[\"Kicked\"].values)\ncbar.set_ticks(np.linspace(0, 1, len(ticks)))\ncbar.set_ticklabels(list(ticks))\ncbar.set_label(\"Kicked\", fontsize=14)\n\nplt.show()","884409ce":"grouped = df[[\"Team\", \"ShotsAccuracy\", \"SavesAccuracy\"]].groupby(\"Team\")\ngrouped.agg(np.mean).sort_values(by=\"ShotsAccuracy\")","ded6714c":"Acc = df[[\"Team\", \"ShotsAccuracy\", \"SavesAccuracy\"]].sort_values(by=\"Team\").reset_index(drop=True)\n\nfig = plt.figure(figsize=(20, 10))\nspec = fig.add_gridspec(4, 5)\ngen = ((i, ii) for i in range(4) for ii in range(5))\n\nfor i, team in enumerate(Acc[\"Team\"].unique()):\n    ax = fig.add_subplot(spec[next(gen)])\n    data = Acc[Acc[\"Team\"] == team]\n    sns.distplot(data[\"ShotsAccuracy\"].tolist(), color=\"blue\", hist=False, label=\"Shot Accuracy\")\n    sns.distplot(data[\"SavesAccuracy\"].tolist(), color=\"red\", hist=False, label=\"Save Accuracy\")\n    ax.legend_.remove()\n    ax.spines[\"bottom\"].set_position(\"zero\")\n    list(map(lambda x: ax.spines[x].set_visible(False), [\"left\", \"top\" ,\"right\"]))\n    ax.set_xticks(np.arange(-0.5, 1.51, 0.5))\n    ax.set_yticks(np.arange(0, 4.1, 1))\n    plt.setp(ax.get_xticklabels(), visible=False)\n    ax.tick_params(axis='x', which='both', length=0)\n    if (i % 5 != 0):\n        plt.setp(ax.get_yticklabels(), visible=False)\n        ax.tick_params(axis='y', which='both', length=0)\n    ax.set_title(team)\n    ax.hlines(y=np.arange(0, 4.1, 1), xmin=-0.5, xmax=1.5, alpha=0.3, linestyle=\"--\", linewidth=1)\n    \n    means = [data[\"ShotsAccuracy\"].mean(), data[\"SavesAccuracy\"].mean()]\n    ax.vlines(means, ymin=0, ymax=4, color=[\"blue\", \"red\"], alpha=0.5)\n    ax.text(means[0]-0.05, 4, round(means[0], 2), color=\"blue\", va=\"top\", ha=\"right\")\n    ax.text(means[1]+0.05, 4, round(means[1], 2), color=\"red\", va=\"top\", ha=\"left\")\n    \nplt.suptitle(\"Shot&Save Accuracy\", fontsize=16)\nfig.text(0.1, 0.5, 'Density', ha='center', va='center', rotation='vertical', fontsize=14)\nfig.legend([\"Shot Accuracy\", \"Save Accuracy\"], loc=(0.07, 0.95), ncol=2 )\n\nplt.show()","ff6ab53a":"grouped = df[[\"Team\", \"Score\", \"NumofShots\", \"SucShots\"]].groupby(\"Team\")\nscore = grouped.agg(np.sum).sort_values(by=\"Score\", ascending=False)\nscore","0f0e8a2f":"fig = plt.figure(figsize=(16,8))\nax = fig.add_subplot()\n\nsize = np.array(score[\"Score\"].values)*10\ncmap = plt.cm.get_cmap(\"autumn_r\")\nax.scatter(x=\"NumofShots\", y=\"SucShots\", c=\"Score\", s=size, cmap=cmap, data=score)\n\nax.set_xticks(np.arange(300, 751, 50))\nax.set_yticks(np.arange(100, 261, 20))\nax.set_xlabel(\"Number of Shots\", fontsize=12)\nax.set_ylabel(\"Successful Shots\", fontsize=12)\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.grid(alpha=0.3, linestyle=\"--\", linewidth=1)\n\nfor column in score.columns:\n    df_txt = score.sort_values(by=column)\n    for i in [0, 1, -1, -2]:\n        ax.annotate(s=df_txt.index[i],\n                    xy=(df_txt[\"NumofShots\"].iloc[i], df_txt[\"SucShots\"].iloc[i]),\n                    xytext=(df_txt[\"NumofShots\"].iloc[i]-30,\n                            df_txt[\"SucShots\"].iloc[i]+(15 if i>=0 else -15)),\n                    arrowprops=dict(facecolor='black', width=1, headwidth=10),\n                    horizontalalignment='center',\n                    verticalalignment='bottom')\n\nmap_ = plt.cm.ScalarMappable(cmap=cmap)\ncbar = plt.colorbar(map_)\ncbar.set_ticks(np.linspace(0, 1, 6))\ncbar.set_ticklabels(np.arange(25, 101, 15))\ncbar.set_label(\"Scores\", fontsize=14)\n\nplt.show()","524cbdb7":"# 6. Which team is more successful in scoring","3ff13408":"# 4. Discipline","337a3bb8":"# 5. Shot&Save Accuracy","536bea0e":"# 3. Correlation","c592c188":"# 2. Data","6ef9ba49":"# 1. Packages"}}