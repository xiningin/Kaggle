{"cell_type":{"bb106a31":"code","48e2a6b2":"code","7070bd7d":"code","683d687a":"code","4a25b461":"code","8f49a02f":"code","a1f3634d":"code","0a39c2d0":"code","64501fa3":"code","081fd4b2":"code","673c2b0e":"code","061f45b4":"code","f8797a4a":"code","dad61893":"code","8dc82d29":"code","45efeafd":"code","6506dbb8":"code","f9a5479f":"code","a15700d1":"code","64e7a044":"code","4750452a":"code","60d61ac5":"code","55c77c0b":"code","ccf5f217":"code","a1da463e":"code","2a4b095d":"code","0a0053f0":"code","c56fcd99":"code","2be17e27":"code","33e980e0":"code","ea8d9d9f":"code","ab92350d":"code","5ead69a4":"code","8e4b0975":"code","1c1949f8":"code","b171c5aa":"code","e91360b3":"code","cfcf4921":"code","a5302e4d":"code","72b88a1f":"code","13ef1dbe":"markdown","c8fe4365":"markdown","7552a5b6":"markdown","bc67ffc8":"markdown","214ba734":"markdown","59fffb5c":"markdown","0967235a":"markdown","0ab6296d":"markdown","d8bb971a":"markdown","91d1d462":"markdown","dc3a2b28":"markdown","08c6f368":"markdown","d07b1cac":"markdown","7c1b9bda":"markdown","0add7316":"markdown","d0b3fb51":"markdown","8b579917":"markdown","56c9ca23":"markdown","8dbbc4ab":"markdown","d1c9b222":"markdown","29bd50ce":"markdown","8d944b6a":"markdown","6cc5237e":"markdown","644021b9":"markdown","57d35620":"markdown","91faef13":"markdown","6eacf013":"markdown","940526a6":"markdown","0f5b48b0":"markdown","ef089d6b":"markdown","fd6aed48":"markdown","57dca77e":"markdown","3cedc5b7":"markdown","8b52bef1":"markdown","e036dfa0":"markdown","095f3271":"markdown","98ea5164":"markdown","eb2099df":"markdown"},"source":{"bb106a31":"import json\nimport os\nimport sys\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport cv2","48e2a6b2":"f, axarr = plt.subplots(2,2)\nimg1 = cv2.imread('\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Train_0.jpg')\nimg2 = cv2.imread('\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Train_1.jpg')\nimg3 = cv2.imread('\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Train_2.jpg')\nimg4 = cv2.imread('\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Train_3.jpg')\naxarr[0,0].imshow(img1)\naxarr[0,1].imshow(img2)\naxarr[1,0].imshow(img3)\naxarr[1,1].imshow(img4)","7070bd7d":"f, axarr = plt.subplots(2,2)\nimg1 = cv2.imread('\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Test_10.jpg')\nimg2 = cv2.imread('\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Test_1005.jpg')\nimg3 = cv2.imread('\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Test_101.jpg')\nimg4 = cv2.imread('\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Test_1.jpg')\naxarr[0,0].imshow(img1)\naxarr[0,1].imshow(img2)\naxarr[1,0].imshow(img3)\naxarr[1,1].imshow(img4)","683d687a":"data_train = pd.read_csv(\"\/kaggle\/input\/plant-pathology-2020-fgvc7\/train.csv\")","4a25b461":"data_train.head()","8f49a02f":"data_train_new = pd.DataFrame(columns = ['image_id', 'Category']) ","a1f3634d":"data_train_new.head()","0a39c2d0":"for index,row in data_train.iterrows():\n    #print(row)\n    #print(index)\n    pathname = str(row['image_id'])+'.jpg'\n    data_train_new.loc[index,'image_id']=pathname\n    if(row['healthy']==1):\n        cat = 'healthy'\n    elif(row['multiple_diseases']==1):\n        cat = 'multiple_diseases'\n    elif(row['rust']==1):\n        cat = 'rust'\n    else:\n        cat = 'scab'\n    \n    data_train_new.loc[index,'Category']=cat","64501fa3":"data_train_new.head()","081fd4b2":"msk = np.random.rand(len(data_train_new)) < 0.8\ntrain = data_train_new[msk]\nval = data_train_new[~msk]","673c2b0e":"train.to_csv(\"train_labels.csv\", index=False)\nval.to_csv(\"valid_labels.csv\", index=False)","061f45b4":"!git clone https:\/\/github.com\/Tessellate-Imaging\/monk_v1.git","f8797a4a":"!cd monk_v1\/installation\/Misc && pip install -r requirements_kaggle.txt","dad61893":"# Monk\nimport os\nimport sys\nsys.path.append(\"monk_v1\/monk\/\");","8dc82d29":"#Using pytorch backend \nfrom pytorch_prototype import prototype","45efeafd":"ptf = prototype(verbose=1);\nptf.Prototype(\"PlantPathology2020\", \"Using_Pytorch_Backend\");","6506dbb8":"ptf.Default(dataset_path=[\"\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/\",\"\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/\"],\n            path_to_csv=[\"train_labels.csv\",\"valid_labels.csv\"], # updated csv file \n            model_name=\"resnet18\", \n            freeze_base_network=False,\n            num_epochs=20); ","f9a5479f":"ptf.EDA(check_corrupt=True)","a15700d1":"ptf.List_Models();","64e7a044":"# Analysis - 1\n\n# Analysis Project Name\nanalysis_name = \"Model_Finder\";\n\n# Models to analyse\n# First element in the list- Model Name\n# Second element in the list - Boolean value to freeze base network or not\n# Third element in the list - Boolean value to use pretrained model as the starting point or not\nmodels = [[\"resnet34\", True, True], [\"resnet50\", False, True], \n          [\"densenet121\", False, True], [\"densenet169\", True, True], [\"densenet201\", True, True]];  \n\n# Num epochs for each experiment to run\t\nepochs=5;\n\n# Percentage of original dataset to take in for experimentation\npercent_data=10;\n\n# \"keep_all\" - Keep all the sub experiments created\n# \"keep_non\" - Delete all sub experiments created\nptf.Analyse_Models(analysis_name, models, percent_data, num_epochs=epochs, state=\"keep_none\"); ","4750452a":"## Update Model Architecture\nptf.update_model_name(\"densenet121\");\nptf.update_freeze_base_network(True);\nptf.update_use_pretrained(True);\nptf.Reload();","60d61ac5":"#Analysis - 2\n\n# Analysis Project Name\nanalysis_name = \"Batch_Size_Finder\";\n\n# Batch sizes to explore\nbatch_sizes = [4, 8, 16, 32];\n\n# Num epochs for each experiment to run\t\nepochs = 10;\n\n# Percentage of original dataset to take in for experimentation\npercent_data = 10;\n\n# \"keep_all\" - Keep all the sub experiments created\n# \"keep_non\" - Delete all sub experiments created\t\nptf.Analyse_Batch_Sizes(analysis_name, batch_sizes, percent_data, num_epochs=epochs, state=\"keep_none\");","55c77c0b":"## Update Batch Size\nptf.update_batch_size(8);\nptf.Reload();","ccf5f217":"ptf.update_save_intermediate_models(False);","a1da463e":"# Analysis - \n# Analysis Project Name\nanalysis_name = \"Optimiser_Finder\";\n\n# Optimizers to explore\noptimizers = [\"sgd\", \"adam\", \"adamax\", \"rmsprop\"];   #Model name, learning rate\n\n# Num epochs for each experiment to run\t\nepochs = 5;\n\n# Percentage of original dataset to take in for experimentation\npercent_data = 10;\n\n# \"keep_all\" - Keep all the sub experiments created\n# \"keep_non\" - Delete all sub experiments created\nptf.Analyse_Optimizers(analysis_name, optimizers, percent_data, num_epochs=epochs, state=\"keep_none\");","2a4b095d":"## Update Optimiser\n\nptf.optimizer_sgd(0.001);\nptf.Reload();","0a0053f0":"ptf.update_save_intermediate_models(False);","c56fcd99":"#Start Training\nptf.Train();\n#Read the training summary generated once you run the cell and training is completed","2be17e27":"gtf = prototype(verbose=0);\ngtf.Prototype(\"PlantPathology2020\", \"Using_Pytorch_Backend\", eval_infer=True);","33e980e0":"from IPython.display import Image\nImage(filename=\"workspace\/PlantPathology2020\/Using_Pytorch_Backend\/output\/logs\/train_val_accuracy.png\") ","ea8d9d9f":"from IPython.display import Image\nImage(filename=\"workspace\/PlantPathology2020\/Using_Pytorch_Backend\/output\/logs\/train_val_loss.png\") ","ab92350d":"img_name = \"\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Test_0.jpg\";\npredictions = gtf.Infer(img_name=img_name);\n\n#Display \nfrom IPython.display import Image\nImage(filename=img_name)","5ead69a4":"img_name = \"\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Test_1004.jpg\";\npredictions = gtf.Infer(img_name=img_name);\n\n#Display \nfrom IPython.display import Image\nImage(filename=img_name)","8e4b0975":"img_name = \"\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Test_10.jpg\";\npredictions = gtf.Infer(img_name=img_name);\n\n#Display \nfrom IPython.display import Image\nImage(filename=img_name)","1c1949f8":"import pandas as pd\nfrom tqdm import tqdm_notebook as tqdm\nfrom scipy.special import softmax\n#np.set_printoptions(precision=2)\ndf = pd.read_csv(\"\/kaggle\/input\/plant-pathology-2020-fgvc7\/sample_submission.csv\")","b171c5aa":"img_name = \"\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Test_10.jpg\";\npredictions = gtf.Infer(img_name=img_name,return_raw=True);\n\ntype(predictions)\n\npredictions.keys()\n\nprint(predictions[\"raw\"])\n\nprint(\" Predictions in terms of probabilities\")\nprint(softmax(predictions[\"raw\"]))\n\n#Display \nfrom IPython.display import Image\nImage(filename=img_name)","e91360b3":"for i in tqdm(range(len(df))):\n    img_name = \"\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/\" + df[\"image_id\"][i] + \".jpg\";\n    \n    #Invoking Monk's nferencing engine inside a loop\n    predictions = gtf.Infer(img_name=img_name, return_raw=True);\n    x = predictions[\"raw\"]\n    out = softmax(x)\n    df[\"healthy\"][i] = out[0];\n    df[\"multiple_diseases\"][i] = out[1];\n    df[\"rust\"][i] = out[2];\n    df[\"scab\"][i] = out[3];","cfcf4921":"df.head()","a5302e4d":"df.to_csv(\"submission.csv\", index=False);","72b88a1f":"! rm -r monk_v1","13ef1dbe":"* To use mxnet backend\n\nfrom gluon_prototype import prototype\n\n* To use keras backend\n\nfrom keras_prototype import prototype","c8fe4365":"#  <div id=\"MONK\">  ** [MONK](https:\/\/github.com\/Tessellate-Imaging\/monk_v1)** <\/div>","7552a5b6":"<div id=\"pyb\"> *Using Pytorch backend* <\/div>","bc67ffc8":"# Load the data and the model","214ba734":"# **To contribute to Monk AI or Pytorch RoadMap repository raise an issue in the git-repo or DM us on linkedin** ","59fffb5c":"# <div id=\"tc\"> Train the classifier <\/div>","0967235a":"Viewing 4 Test images","0ab6296d":"<div id=\"train\"> Quick mode training <\/div>\n- Using Default Function\n    - dataset_path\n    - model_name\n    - num_epochs","d8bb971a":"# This creates files and directories as per the following structure\n\n\nworkspace\n\n\n    |\n    |--------iWildCam2020 (Project name can be different)\n                    |\n                    |\n                    |-----Using_Pytorch_Backend (Experiment name can be different)\n                                |\n                                |-----experiment-state.json\n                                |\n                                |-----output\n                                        |\n                                        |------logs (All training logs and graphs saved here)\n                                        |\n                                        |------models (all trained models saved here)","91d1d462":"**Monk Enables**","dc3a2b28":"So creating the required format","08c6f368":"* git clone https:\/\/github.com\/Tessellate-Imaging\/monk_v1.git\n\n* cd monk_v1\/installation\/Linux && pip install -r requirements_cu9.txt\n\n* (Select the requirements file as per OS and CUDA version)","d07b1cac":"# <div id=\"dv\"> ** Exploratory Data Analysis ** <\/div>","7c1b9bda":"- To experiment with Models\n- Understand how easy is it to use Monk","0add7316":"* low-code\n* unified wrapper over major deep learning framework - keras, pytorch, gluoncv\n* syntax invariant wrapper\n","d0b3fb51":"Loss Curve","8b579917":"<div id=\"edaM\"> EDA in MONK <\/div>","56c9ca23":"* https:\/\/www.tessellateimaging.com\/\n* Abhishek - https:\/\/www.linkedin.com\/in\/abhishek-kumar-annamraju\/\n* Akash - https:\/\/www.linkedin.com\/in\/akashdeepsingh01\/","8dbbc4ab":"Data Visualization","d1c9b222":"*Imports*","29bd50ce":"Adding extension .jpg to image_id and adding corresponding label to Category","8d944b6a":"Goals","6cc5237e":"Accuracy Curve","644021b9":"If there are multiple classes , the format that Monk accepts currently is\n\nFirst column should contain image_id with extension .jpg or .png and the \nsecond column must contain the label corresponding to its category.\n\nMonk will internally convert to the above one hot encoded format","57d35620":"# <div id=\"installingmonk\"> **[Installing Monk](https:\/\/github.com\/Tessellate-Imaging\/monk_v1\/tree\/master\/installation)** <\/div>","91faef13":"# Select image and Run inference","6eacf013":"Load the experiment in inference mode\n- Set flag eval_infer as True","940526a6":"*Monk is a low code Deep Learning tool and a unified wrapper for Computer Vision.*","0f5b48b0":"<div id=\"mod\"> See what other models Monk's backend supports <\/div>","ef089d6b":"Viewing 4 Train images","fd6aed48":"Running Inference on all test images","57dca77e":"* If using Colab install using the commands below\n\n!cd monk_v1\/installation\/Misc && pip install -r requirements_colab.txt\n\n* If using Kaggle uncomment the following command\n\n#!cd monk_v1\/installation\/Misc && pip install -r requirements_kaggle.txt\n\n* Select the requirements file as per OS and CUDA version when using a local system or cloud\n\n#!cd monk_v1\/installation\/Linux && pip install -r requirements_cu9.txt","3cedc5b7":"# <div id=\"inf\"> **Running inference on test images** <\/div>","8b52bef1":"Docs on  quick mode loading of data and model: https:\/\/github.com\/Tessellate-Imaging\/monk_v1#4\n\nTutorials on Monk: https:\/\/github.com\/Tessellate-Imaging\/monk_v1\/tree\/master\/study_roadmaps\/1_getting_started_roadmap","e036dfa0":"# <div id=\"cme\"> Creating and managing experiments <\/div>\n\n- Provide project name\n- Provide experiment name\n- For a specific data create a single project\n- Inside each project multiple experiments can be created\n- Every experiment can be have diferent hyper-parameters attached to it","095f3271":"1. To create, manage and version control deep learning experiments.\n2. To compare experiments across training metrics.\n3. To quickly find best hyper-parameters.\n","98ea5164":"# Check out \n\n# [Monk_Object_Detection](https:\/\/github.com\/Tessellate-Imaging\/Monk_Object_Detection)\n\nA one-stop repository for low-code easily-installable object detection pipelines.\n\nand\n\n# [Monk_Gui](https:\/\/github.com\/Tessellate-Imaging\/Monk_Gui)\n\nA Graphical user Interface for deep learning and computer vision over Monk Libraries\n\nalso\n\n# [Pytorch_Tutorial](https:\/\/github.com\/Tessellate-Imaging\/Pytorch_Tutorial)\n\nA set of jupyter notebooks on pytorch functions with examples","eb2099df":"**Monk Features**"}}