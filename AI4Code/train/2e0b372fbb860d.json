{"cell_type":{"60d5a7bb":"code","24789e1b":"code","10d730ed":"code","4852fecd":"code","6cd9a1ba":"code","6188534c":"code","f2137b9a":"code","e4cf1850":"code","a9104c67":"code","0dfd7664":"code","8dc68826":"code","741ba701":"code","26405efc":"code","1f932968":"code","74b023da":"code","4c94c381":"code","7da87e38":"code","9fc5a9b2":"code","baa4e23c":"code","0ae970f0":"code","366fa2c9":"code","8a09bc66":"code","766c942c":"code","46676be3":"code","9fac9dcb":"code","8bd14f9d":"code","c28b1834":"code","edfe50a5":"code","8c54edf5":"code","bcc36558":"code","3fb70d7d":"code","2ad3cdf7":"code","7e60290a":"code","dbb52d68":"code","35f775a8":"code","011363a3":"code","f5a4f576":"code","1b30aabd":"code","e7837653":"code","5e750296":"code","3a6e42c0":"code","db5d408e":"code","8f6837cd":"code","558fd632":"code","ce58a208":"markdown","049a2ff0":"markdown","8fe6213b":"markdown","a6c004fc":"markdown","e338c803":"markdown","b86a925f":"markdown","15d75cbf":"markdown","07471192":"markdown","13e29eb0":"markdown","2f4bfc03":"markdown","27b906d2":"markdown","1f43f3da":"markdown","abea20a8":"markdown","50ec0b1d":"markdown","1f06f572":"markdown","314b4153":"markdown","ba7790ae":"markdown","e16ff0d9":"markdown","addd9a0e":"markdown","90aac031":"markdown","26858723":"markdown","65ad0b70":"markdown","62dea703":"markdown","f56b54ee":"markdown","bb249f3d":"markdown","31ebf138":"markdown","2383b587":"markdown","a01f58cd":"markdown","e42ea1d4":"markdown","445b5fab":"markdown","46f7e983":"markdown","2abebe55":"markdown","00829721":"markdown","df29a94b":"markdown","91fbf0e9":"markdown","cdee1d39":"markdown","2714bb82":"markdown","5c246169":"markdown","3e383a18":"markdown","e6b8aac8":"markdown","01d54edc":"markdown"},"source":{"60d5a7bb":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport math \nimport xgboost as xgb\nfrom sklearn.metrics import confusion_matrix\nnp.random.seed(2019)\nfrom scipy.stats import skew\nfrom scipy import stats\n\nimport statsmodels\nfrom sklearn.metrics import accuracy_score\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","24789e1b":"def read_and_concat_dataset(training_path, test_path):\n    train = pd.read_csv(training_path)\n    train['train'] = 1\n    test = pd.read_csv(test_path)\n    test['train'] = 0\n    data = train.append(test, ignore_index=True)\n    return train, test, data\n\ntrain, test, data = read_and_concat_dataset('..\/input\/titanic\/train.csv', '..\/input\/titanic\/test.csv')\ndata = data.set_index('PassengerId')","10d730ed":"data.head(5)","4852fecd":"data.describe()","6cd9a1ba":" g = sns.heatmap(data[[\"Survived\",\"SibSp\",\"Parch\",\"Age\",\"Fare\"]].corr(),annot=True)","6188534c":"def comparing(data,variable1, variable2):\n    print(data[[variable1, variable2]][data[variable2].isnull()==False].groupby([variable1], as_index=False).mean().sort_values(by=variable2, ascending=False))\n    g = sns.FacetGrid(data, col=variable2).map(sns.distplot, variable1)","f2137b9a":"def counting_values(data, variable1, variable2):\n    return data[[variable1, variable2]][data[variable2].isnull()==False].groupby([variable1], as_index=False).mean().sort_values(by=variable2, ascending=False)","e4cf1850":"comparing(data, 'Parch','Survived')","a9104c67":"comparing(data, 'SibSp','Survived')","0dfd7664":"comparing(data, 'Fare','Survived')","8dc68826":"comparing(data, 'Age','Survived')","741ba701":"counting_values(data, 'Sex','Survived')","26405efc":"data['Women'] = np.where(data.Sex=='female',1,0)\ncomparing(data, 'Women','Survived')","1f932968":"comparing(data, 'Pclass','Survived')","74b023da":"grid = sns.FacetGrid(data, col='Survived', row='Pclass', size=2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)","4c94c381":"grid = sns.FacetGrid(data, row='Embarked', col='Survived', size=2, aspect=1.6)\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)","7da87e38":"data.isnull().sum()","9fc5a9b2":"data.groupby('Pclass').Fare.mean()","baa4e23c":"data.Fare = data.Fare.fillna(0)","0ae970f0":"print(data.Embarked.value_counts())\ndata.Embarked = data.Embarked.fillna('S')","366fa2c9":"data.Cabin = data.Cabin.fillna('Unknown')\ndata['Cabin'] = data['Cabin'].str[0]","8a09bc66":"data.groupby('Pclass').Cabin.value_counts()","766c942c":"data['Cabin'] = np.where((data.Pclass==1) & (data.Cabin=='U'),'C',\n                                            np.where((data.Pclass==2) & (data.Cabin=='U'),'D',\n                                                                        np.where((data.Pclass==3) & (data.Cabin=='U'),'G',\n                                                                                                    np.where(data.Cabin=='T','C',data.Cabin))))","46676be3":"data['Title'] = data.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(data['Title'], data['Sex'])\ndata = data.drop('Name',axis=1)","9fac9dcb":"#let's replace a few titles -> \"other\" and fix a few titles\ndata['Title'] = np.where((data.Title=='Capt') | (data.Title=='Countess') | (data.Title=='Don') | (data.Title=='Dona')\n                        | (data.Title=='Jonkheer') | (data.Title=='Lady') | (data.Title=='Sir') | (data.Title=='Major') | (data.Title=='Rev') | (data.Title=='Col'),'Other',data.Title)\n\ndata['Title'] = data['Title'].replace('Ms','Miss')\ndata['Title'] = data['Title'].replace('Mlle','Miss')\ndata['Title'] = data['Title'].replace('Mme','Mrs')","8bd14f9d":"data[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()\nfacet = sns.FacetGrid(data = data, hue = \"Title\", legend_out=True, size = 4.5)\nfacet = facet.map(sns.kdeplot, \"Age\")\nfacet.add_legend();","c28b1834":"sns.boxplot(data = data, x = \"Title\", y = \"Age\")","edfe50a5":"facet = sns.FacetGrid(data, hue=\"Survived\",aspect=3)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, data['Age'].max()))\nfacet.add_legend()","8c54edf5":"data.groupby('Title').Age.mean()","bcc36558":"data['Age'] = np.where((data.Age.isnull()) & (data.Title=='Master'),5,\n                        np.where((data.Age.isnull()) & (data.Title=='Miss'),22,\n                                 np.where((data.Age.isnull()) & (data.Title=='Mr'),32,\n                                          np.where((data.Age.isnull()) & (data.Title=='Mrs'),37,\n                                                  np.where((data.Age.isnull()) & (data.Title=='Other'),45,\n                                                           np.where((data.Age.isnull()) & (data.Title=='Dr'),44,data.Age))))))                   ","3fb70d7d":"data['FamilySize'] = data.SibSp + data.Parch + 1\ndata['Mother'] = np.where((data.Title=='Mrs') & (data.Parch >0),1,0)\ndata['Free'] = np.where(data['Fare']==0, 1,0)\ndata = data.drop(['SibSp','Parch','Sex'],axis=1)","2ad3cdf7":"import string\nTypeOfTicket = []\nfor i in range(len(data.Ticket)):\n    ticket = data.Ticket.iloc[i]\n    for c in string.punctuation:\n                ticket = ticket.replace(c,\"\")\n                splited_ticket = ticket.split(\" \")   \n    if len(splited_ticket) == 1:\n                TypeOfTicket.append('NO')\n    else: \n                TypeOfTicket.append(splited_ticket[0])\n            \ndata['TypeOfTicket'] = TypeOfTicket\n\ndata.TypeOfTicket.value_counts()\ndata['TypeOfTicket'] = np.where((data.TypeOfTicket!='NO') & (data.TypeOfTicket!='PC') & (data.TypeOfTicket!='CA') & \n                                (data.TypeOfTicket!='A5') & (data.TypeOfTicket!='SOTONOQ'),'other',data.TypeOfTicket)\ndata = data.drop('Ticket',axis=1)","7e60290a":"comparing(data, 'FamilySize','Survived')","dbb52d68":"counting_values(data, 'Title','Survived')","35f775a8":"counting_values(data, 'TypeOfTicket','Survived')","011363a3":"counting_values(data, 'Cabin','Survived')","f5a4f576":"comparing(data, 'Mother','Survived')","1b30aabd":"comparing(data, 'Free','Survived')","e7837653":"bins = [0,12,24,45,60,data.Age.max()]\nlabels = ['Child', 'Young Adult', 'Adult','Older Adult','Senior']\ndata[\"Age\"] = pd.cut(data[\"Age\"], bins, labels = labels)","5e750296":"data = pd.get_dummies(data)","3a6e42c0":"trainX = data[data.Survived.isnull()==False].drop(['Survived','train'],axis=1)\ntrainY = data.Survived[data.Survived.isnull()==False]\ntestX = data[data.Survived.isnull()==True].drop(['Survived','train'],axis=1)","db5d408e":"from xgboost.sklearn import XGBClassifier\nimport numpy as np\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\n\nxgb_model = xgb.XGBClassifier()\n\nparameters = {'nthread':[4], \n              'objective':['binary:logistic'],\n              'learning_rate': [0.001], #so called `eta` value\n              'max_depth': [2],\n              'min_child_weight': [0],\n              'silent': [1],\n              'subsample': [0.8],\n              'colsample_bytree': [0.7],\n              'n_estimators': [100], #number of trees, change it to 1000 for better results\n              'missing':[-999],\n              'seed': [1337]}\n\n\nclf = GridSearchCV(xgb_model, parameters, n_jobs=5, \n                   cv=5, \n                   scoring='roc_auc',\n                   verbose=2, refit=True)\n\nclf.fit(trainX, trainY)\n\nprint(clf.best_params_)\nprint(clf.best_score_)\n","8f6837cd":"\nmodel = XGBClassifier(learning_rate=0.001,n_estimators=2500,\n                                max_depth=4, min_child_weight=0,\n                                gamma=0, subsample=0.7,\n                                colsample_bytree=0.7,\n                                scale_pos_weight=1, seed=27,\n                                reg_alpha=0.00006)\nmodel.fit(trainX, trainY)","558fd632":"test = data[data.train==0]\ntest['Survived'] = model.predict(testX).astype(int)\ntest = test.reset_index()\ntest[['PassengerId','Survived']].to_csv(\"submissionXGB.csv\",index=False)\nprint(\"Ok\")","ce58a208":"If it comes to Cabin variable, I'm gonna fill up NaN values with 'Unknown' and get first letter from every Cabin in dataset.","049a2ff0":"Missing values in Embarked and Fare variables are very easy to imput because we can use the most popular value or something like that.\n\nI'm gonna replace missing value in Fare with 0 and in Embarked with the most popular value ('S').","8fe6213b":"SibSp vs Survived","a6c004fc":"Age has a very large impact on the survival rate, but when this variable has missing values - it is useless. I'm gonna impute the missing values using the average age values in particular groups due to the titles.","e338c803":"* XGB Classifier","b86a925f":"Free vs Survived","15d75cbf":"##**Explore the Data**","07471192":"Parch vs Survived","13e29eb0":"Correlations between numerical variables and Survived aren't so high but it doesn't mean that the other features are not useful.","2f4bfc03":"In this part we will use the XGB Classifier with GridSearch to adjust the parameters.","27b906d2":"Correlation matrix between numerical values:","1f43f3da":"Sex vs Survived","abea20a8":"Let's see distributions on box plots.","50ec0b1d":"People with 'Master' have the highest survival rate. Maybe because people with the master are mainly boys under 13 years old.","1f06f572":"Let's check the distribution of the cabins in individual passenger classes.","314b4153":"I'm cutting Age variable to 5 equal intervals.","ba7790ae":"There are 263 missing ages, 1014 missing cabins. Age is very important variable, so it's worth spending time to imput them. If it comes to imputing cabins - it's too hard to do because dataset has only 1309 observations so 77% cabins are missing.","e16ff0d9":"Let's check how the distribution of survival variable  depending on the title.","addd9a0e":"Pclass vs Survived","90aac031":"Title vs Survived","26858723":"* FamilySize - number of family members, people travelling alone will have a value of 1\n* Women - it depends on Sex variable but I'm making it in binary way\n* Mother - women with Mrs title and at least 1 parch, women, children and mothers probably have a survival factor\n* Free - people who don't need to pay fare, these people could win tickets or something like that, they can have a similar survival rate\n* TypeOfTicket - prefixes of ticket, tickets with same prefixes may have a similar class and survival.\n\nIf it comes to TypeOfTicket variable I'm gonna also replace a few values of this variable with 'other' values, relying on the same as in the case of titles.","65ad0b70":"The Cabin 'Unknown' will be set to C for the first class, D for the second class and G for the third class. One observation with Cabin 'T' and first class I'll fix with C.","62dea703":"Mother vs Survived","f56b54ee":"Age vs Survived","bb249f3d":"I'm adding here 'train' variable in order to check in the easiest way later which observations are from train and test dataset because I'm gonna join train and test datasets.","31ebf138":"Titanic is the most famous challenge in data science, with many variables we can learn and train to develop our skills. Hope you like!","2383b587":"##**Feature engineering**","a01f58cd":"Embarked vs Survived","e42ea1d4":"Fare vs Survived","445b5fab":"TypeOfTicket vs Survived","46f7e983":"FamilySize vs Survived","2abebe55":"I need to replace a few titles with 'other' values because these titles are not as popular and have a low frequency of occurrence in this dataset.","00829721":"**Import Data**","df29a94b":"I create dummy variables for all variables with categories using the function get_dummies from pandas.","91fbf0e9":"**Import the Libraries**","cdee1d39":"Cabin vs Survived","2714bb82":"##**Missing values**","5c246169":"A few new variables:","3e383a18":"Now I'm gonna get title from each Name in dataset. This variable will be very useful and it can help to imput missing value in Age. People's titles can represent their age, earnings and life status and all these three properties can be associated with the possibility of survival on a ship.","e6b8aac8":"\nBelow is the code with the best result.","01d54edc":"**PassengerId** - the unique id of the row, it doesn't have any effect on Survived value.\n\n**Survived** - binary:\n* 1 -> Survived\n* 0 -> Not survived\n\n**Pclass** (Passenger Class) - economic status of the passenger, this variable has 3 values;\n* 1 -> Upper Class\n* 2 -> Middle Class\n* 3 -> Lower Class\n\n**Name**, **Sex** and **Age** - are self-explanatory.\n\n**SibSp** - the total number of the passengers' siblings and spouse.\n\n**Parch** - the total number of the passengers' parents and children.\n\n**Ticket** - the ticket number.\n\n**Fare** - the passenger fare.\n\n**Cabin** - the cabin number.\n\n**Embarked** is port of embarkation, 3 values:\n* C -> Cherbourg\n* Q -> Queenstown\n* S -> Southampton"}}