{"cell_type":{"f3d18754":"code","29cac755":"code","1dfe3513":"code","d4a9c943":"code","0a20a9b9":"code","89af6052":"code","16c1709e":"code","e797bb1a":"code","cbb507f8":"code","ccea44c9":"code","07b24707":"code","cb8e19b8":"code","59536a88":"code","378123c2":"code","81c541e0":"code","6d85eb32":"code","818e3dfd":"code","c242da1b":"code","c97a8349":"code","28dd941f":"code","98199059":"code","2a9262e0":"code","0b59e023":"code","980662ab":"code","8a070c6c":"code","5c15646c":"code","0c1a0b76":"code","f159cc37":"code","ee533833":"code","7b873e08":"code","4d9f99d2":"code","fdeabf67":"code","22e43bfb":"code","19205bb5":"code","399da9c2":"code","6a0a4e16":"code","45fac7a4":"code","856b9ba7":"code","13461113":"code","8fe2b003":"code","9bb20a99":"code","ec6951ef":"code","86fad8e6":"code","366d543c":"code","c1622ae2":"code","55017da5":"code","aad35842":"code","b0fd9499":"code","e34afa03":"code","19346936":"code","e91fe7a8":"code","f8901f25":"code","1248ff43":"code","3e71ae40":"code","2f0ffc41":"code","0c28a21c":"code","96a96ec4":"code","e733c8c2":"code","b33ef20f":"code","53ff4360":"code","fc66187f":"code","2dd7f259":"markdown","409a12bd":"markdown"},"source":{"f3d18754":"import numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport xgboost\nimport cv2\nimport imblearn","29cac755":"import warnings\nwarnings.filterwarnings('ignore')","1dfe3513":"df=pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')","d4a9c943":"df","0a20a9b9":"df.describe()","89af6052":"np.sum(df.isnull())","16c1709e":"X=df.drop('Outcome', axis=1)","e797bb1a":"Y=df['Outcome']","cbb507f8":"X","ccea44c9":"Y","07b24707":"X.corr()","cb8e19b8":"X.corr()[(X.corr()>=0.8) | (X.corr()<=-0.8)]","59536a88":"from imblearn.over_sampling import RandomOverSampler\n\nros=RandomOverSampler()\nx_res,y_res=ros.fit_sample(X,Y)","378123c2":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test= train_test_split(x_res,y_res, random_state=42, test_size=0.2, stratify=y_res)","81c541e0":"print(len(x_train),len(x_test), end=' ')\nprint()\n\nprint(len(y_train),len(y_test),end=' ')","6d85eb32":"for x in set(X):\n    print('{}....{}'.format(x,len(X[X==x])))","818e3dfd":"for y in set(Y):\n    print('{}....{}'.format(y,len(Y[Y==y])))","c242da1b":"for x in set(x_res):\n    print('{}....{}'.format(x,len(x_res[x_res==x])))","c97a8349":"for y in set(y_res):\n    print('{}....{}'.format(y,len(y_res[y_res==y])))","28dd941f":"for x in set(x_train):\n    print('{}....{}'.format(x,len(x_train[x_train==x])))","98199059":"for x in set(x_test):\n    print('{}....{}'.format(x,len(x_test[x_test==x])))","2a9262e0":"for y in set(y_train):\n    print('{}....{}'.format(y,len(y_train[y_train==y])))","0b59e023":"for y in set(y_test):\n    print('{}....{}'.format(y,len(y_test[y_test==y])))","980662ab":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC","8a070c6c":"#lr=LogisticRegression()\n#lr.fit(x_train, y_train)\n\nfrom sklearn.preprocessing import StandardScaler\nsc_x=StandardScaler()\nx_train_scaled=sc_x.fit_transform(x_train)\n\n\n#svc=SVC(kernel='rbf', gamma=2, C=0.000000001)\nsvc=SVC()","5c15646c":"#from sklearn.model_selection import cross_val_predict\n\n#y_probas= cross_val_predict(lr,x_train, y_train,cv=5,\n#                              method='predict_proba')","0c1a0b76":"#precisions, recalls, thresholds= precision_recall_curve(y_train, y_probas[:,1])","f159cc37":"#px.line(x=recalls,y=precisions,labels=dict(x=\"Recall\", y=\"Precision\"))","ee533833":"#from sklearn.metrics import roc_curve\n\n#fpr, tpr, thresholds=roc_curve(y_train, y_probas[:,1])","7b873e08":"#plt.plot(fpr, tpr, \"b:\", label=\"Linear reg\")\n#plt.plot(fpr, tpr, linewidth=2, label='linear reg')\n#plt.plot([0, 1], [0, 1], 'k--') # dashed diagonal\n#plt.legend(loc=\"lower right\")\n#plt.show()","4d9f99d2":"#from sklearn.metrics import roc_auc_score\n#roc_auc_score(y_train, y_probas[:,1])","fdeabf67":"#from sklearn.metrics import precision_recall_curve\n\n#precisions, recalls, thresholds= precision_recall_curve(y_train, y_scores[:,1])","22e43bfb":"#plt.plot(thresholds, precisions[:-1], \"b--\", label=\"Precision\")\n#plt.plot(thresholds, recalls[:-1], \"g-\", label=\"Recall\")","19205bb5":"from sklearn.model_selection import GridSearchCV\n\n#kernel='rbf', gamma=2, C=0.000000001\n\nparams={\n    'kernel':['rbf'],\n    'gamma':[1,2,3],\n    'C':[1e-1,1e-2,1e-3,1e-4,1e-5,1e-6,1e-7,1e-8,1e-9,1,2,3,4,5,6,7,8,9,10,100]\n}\n\n#scoring={'precision':'precision', 'recall':'recall'}\n#gs=GridSearchCV(svc, cv=5, param_grid=params, n_jobs=-1, \n#                scoring=scoring,\n#               refit='precision')\n\ngs=GridSearchCV(svc, cv=10, param_grid=params, n_jobs=-1, \n                scoring='f1')\ngs.fit(x_train_scaled, y_train)","399da9c2":"#gamma=2, C=0.000000001","6a0a4e16":"print(gs.best_params_)\nprint(gs.best_score_)","45fac7a4":"svc_best=SVC(C= float(gs.best_params_.get('C')), gamma= float(gs.best_params_.get('gamma')), \n             kernel= gs.best_params_.get('kernel'))\n\nsvc_best.fit(x_train_scaled, y_train)\n\nprint(float(gs.best_params_.get('C')))\nprint(float(gs.best_params_.get('gamma')))\nprint(str(gs.best_params_.get('kernel')))","856b9ba7":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import precision_score, recall_score,f1_score\n\n\ny_train_pred=svc_best.predict(x_train_scaled)\nprint(confusion_matrix(y_train,y_train_pred))\nprint()\nprint()\nprint(classification_report(y_train,y_train_pred))\nprint()\nprint()\nprint('Precision =',precision_score(y_train, y_train_pred))\nprint('Recall =',recall_score(y_train, y_train_pred))\nprint('f1-score =',f1_score(y_train, y_train_pred))","13461113":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import precision_score, recall_score,f1_score\nfrom sklearn.model_selection import cross_val_predict\n\n\n#y_train_pred=svc_best.predict(x_train_scaled)\ny_train_pred= cross_val_predict(svc_best, x_train_scaled, y_train,cv=10)\nprint(confusion_matrix(y_train,y_train_pred))\nprint()\nprint()\nprint(classification_report(y_train,y_train_pred))\nprint()\nprint()\nprint('Precision =',precision_score(y_train, y_train_pred))\nprint('Recall =',recall_score(y_train, y_train_pred))\nprint('f1-score =',f1_score(y_train, y_train_pred))","8fe2b003":"y_test_pred=svc_best.predict(sc_x.transform(x_test))\nprint(confusion_matrix(y_test, y_test_pred))\nprint()\nprint()\nfrom sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_test_pred))\nprint()\nprint('Precision =',precision_score(y_test, y_test_pred))\nprint('Recall =',recall_score(y_test, y_test_pred))\nprint('f1-score =',f1_score(y_test, y_test_pred))","9bb20a99":"from sklearn.linear_model import LogisticRegression","ec6951ef":"from imblearn.combine import SMOTETomek\n\nsmt=SMOTETomek(random_state=42)\nx_res,y_res= smt.fit_sample(X,Y)","86fad8e6":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test= train_test_split(x_res,y_res, random_state=42, test_size=0.2, stratify=y_res)","366d543c":"print(len(x_train),len(x_test), end=' ')\nprint()\n\nprint(len(y_train),len(y_test),end=' ')","c1622ae2":"for x in set(X):\n    print('{}....{}'.format(x,len(X[X==x])))","55017da5":"for y in set(Y):\n    print('{}....{}'.format(y,len(Y[Y==y])))","aad35842":"for x in set(x_res):\n    print('{}....{}'.format(x,len(x_res[x_res==x])))","b0fd9499":"for y in set(y_res):\n    print('{}....{}'.format(y,len(y_res[y_res==y])))","e34afa03":"for x in set(x_train):\n    print('{}....{}'.format(x,len(x_train[x_train==x])))","19346936":"for x in set(x_test):\n    print('{}....{}'.format(x,len(x_test[x_test==x])))","e91fe7a8":"for y in set(y_train):\n    print('{}....{}'.format(y,len(y_train[y_train==y])))","f8901f25":"for y in set(y_test):\n    print('{}....{}'.format(y,len(y_test[y_test==y])))","1248ff43":"#lr=LogisticRegression()\n#lr.fit(x_train, y_train)\nfrom sklearn.preprocessing import StandardScaler\nsc_x=StandardScaler()\nx_train_scaled=sc_x.fit_transform(x_train)\n\n\n#svc=SVC(kernel='rbf', gamma=1, C=0.001)\nsvc=SVC()","3e71ae40":"from sklearn.model_selection import GridSearchCV\n\n#kernel='rbf', gamma=2, C=0.000000001\n\nparams={\n    'kernel':['rbf'],\n    'gamma':[1,2,3],\n    'C':[1e-1,1e-2,1e-3,1e-4,1e-5,1e-6,1e-7,1e-8,1e-9,1,2,3,4,5,6,7,8,9,10,100]\n}\n\n#scoring={'precision':'precision', 'recall':'recall'}\n#gs=GridSearchCV(svc, cv=5, param_grid=params, n_jobs=-1, \n#                scoring=scoring,\n#               refit='precision')\n\n\ngs=GridSearchCV(svc, cv=10, param_grid=params, n_jobs=-1, \n                scoring='f1')\n\ngs.fit(x_train_scaled, y_train)","2f0ffc41":"#gamma=1, C=0.001","0c28a21c":"print(gs.best_params_)\nprint(gs.best_score_)","96a96ec4":"svc_best=SVC(C= float(gs.best_params_.get('C')), gamma= float(gs.best_params_.get('gamma')), \n             kernel= str(gs.best_params_.get('kernel')))\nsvc_best.fit(x_train_scaled, y_train)\n\nprint(float(gs.best_params_.get('C')))\nprint(float(gs.best_params_.get('gamma')))\nprint(str(gs.best_params_.get('kernel')))","e733c8c2":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import precision_score, recall_score,f1_score\n\ny_train_pred=svc_best.predict(x_train_scaled)\nprint(confusion_matrix(y_train,y_train_pred))\nprint()\nprint()\nprint(classification_report(y_train,y_train_pred))\nprint()\nprint()\nprint('Precision =',precision_score(y_train, y_train_pred))\nprint('Recall =',recall_score(y_train, y_train_pred))\nprint('f1-score =',f1_score(y_train, y_train_pred))","b33ef20f":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import precision_score, recall_score,f1_score\nfrom sklearn.model_selection import cross_val_predict\n\ny_train_pred= cross_val_predict(svc_best, x_train_scaled, y_train,cv=10)\n#y_train_pred=svc_best.predict(x_train_scaled)\nprint(confusion_matrix(y_train,y_train_pred))\nprint()\nprint()\nprint(classification_report(y_train,y_train_pred))\nprint()\nprint()\nprint('Precision =',precision_score(y_train, y_train_pred))\nprint('Recall =',recall_score(y_train, y_train_pred))\nprint('f1-score =',f1_score(y_train, y_train_pred))","53ff4360":"y_test_pred=svc_best.predict(sc_x.transform(x_test))\nprint(confusion_matrix(y_test, y_test_pred))\nprint()\nprint()\nfrom sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_test_pred))\nprint()\nprint('Precision =',precision_score(y_test, y_test_pred))\nprint('Recall =',recall_score(y_test, y_test_pred))\nprint('f1-score =',f1_score(y_test, y_test_pred))","fc66187f":"cvres= gs.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(mean_score), params)\n#cvres","2dd7f259":"# OVERSAMPLING","409a12bd":"# SMOTE"}}