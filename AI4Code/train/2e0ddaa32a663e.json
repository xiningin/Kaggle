{"cell_type":{"3d4dd705":"code","f3cdfc33":"code","35bffe7e":"code","a920be20":"code","1f4d9784":"code","b58411eb":"code","548de847":"code","9db34a9f":"code","c4ecd61f":"code","1aa78ba3":"code","6560c600":"code","f716cffe":"code","2f36bd3d":"code","2607ac38":"code","e89b7381":"code","b58c077a":"code","1d63e913":"code","1f7dc88a":"code","51147cae":"code","5f80d450":"code","a0143bd9":"code","46b1ef78":"code","36edfc42":"code","32dbfb7b":"code","4f99bde9":"code","e0287a73":"code","4b4dcaa9":"code","9c5d0ac2":"code","bc2108d9":"code","cc9f2002":"code","f5c226b5":"code","c9a3a3f6":"markdown","1a21698b":"markdown","9bd16925":"markdown","136f4626":"markdown","b10d391f":"markdown","d2b59cd4":"markdown","c86fd4fd":"markdown","00bd1297":"markdown","847cb0a8":"markdown","e0b4d50b":"markdown","2e63d674":"markdown","73478d5d":"markdown","b53babee":"markdown","08073a3f":"markdown","0594f898":"markdown"},"source":{"3d4dd705":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f3cdfc33":"data = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')\ndata.head()","35bffe7e":"data.info()","a920be20":"data.target.unique()","1f4d9784":"data[['target','age']].groupby('age', as_index = True).mean().sort_values('age', ascending = False)","b58411eb":"data[['cp','target']].groupby('target', as_index = True).mean().sort_values('cp', ascending = False)","548de847":"plt.scatter(data.age,  data.target, color = 'red')\nplt.plot()","9db34a9f":"data.info()\ndata.head()","c4ecd61f":"plt.scatter(data.trestbps, data.chol)\nplt.show()","1aa78ba3":"colors = [\"green\" if each == 1 else \"red\" for each in data.target]\npd.plotting.scatter_matrix(data.loc[:, data.columns != \"target\"],\n                          c = colors,\n                          figsize = (15,15),\n                          diagonal = 'hist',\n                          s = 200,\n                          alpha = 0.5,\n                          edgecolor = \"black\")\nplt.show()","6560c600":"sns.countplot(data.target)\nplt.show()","f716cffe":"x_data = data.loc[:, data.columns != 'target']\ny = data.iloc[:,13].values","2f36bd3d":"#normalization of x \nx = (x_data - np.mean(x_data)) \/ (np.max(x_data) - np.min(x_data))","2607ac38":"#train - test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 42)","e89b7381":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(x_train, y_train)","b58c077a":"knn.score(x_test, y_test)","1d63e913":"scores = []\ntrain_accuracy = []\ntest_accuracy = []\n\nfor each in range(1, 20):\n    knn2 = KNeighborsClassifier(n_neighbors = each)\n    knn2.fit(x_train, y_train)\n    \n    train_accuracy.append(knn2.score(x_train, y_train))\n    test_accuracy.append(knn2.score(x_test, y_test))\n    \nplt.figure(figsize = (5, 5))\nplt.plot(range(1, 20), train_accuracy, color = 'blue', label = 'Training accuracy')\nplt.plot(range(1, 20), test_accuracy, color = 'red', label = 'Testing accuracy')\nplt.legend()\nplt.xlabel('k values')\nplt.ylabel('Scores')\nplt.show()\n\nprint(\"Best accuracy is {} with K = {}\".format(np.max(test_accuracy),1+test_accuracy.index(np.max(test_accuracy))))\n    \n    ","1f7dc88a":"x = data.trestbps.values.reshape(-1, 1)\ny = data.chol.values.reshape(-1, 1)\nplt.scatter(data.trestbps, data.chol)\nplt.show()","51147cae":"from sklearn.linear_model import LinearRegression\nreg = LinearRegression()\nreg.fit(x, y)","5f80d450":"x_ = np.arange(min(x), max(x), 0.1).reshape(-1, 1)\npredicted = reg.predict(x_)\n\nplt.scatter(data.trestbps, data.chol)\nplt.plot(x_, predicted, color = 'black')\nplt.xlabel(\"trestbps\")\nplt.ylabel(\"chol\")\nplt.show()\n\nprint(\"R^2 score : {}\".format(reg.score(x, y)))","a0143bd9":"from sklearn.model_selection import cross_val_score\nreg = LinearRegression()\nk = 5\ncv_res = cross_val_score(reg, x, y, cv = k)\nprint('CV Scores: ',cv_res)\nprint('CV scores average: ',np.sum(cv_res)\/k)","46b1ef78":"from sklearn.linear_model import Ridge\n\nx_train,x_test,y_train,y_test = train_test_split(x, y, random_state = 2, test_size = 0.3)\nridge = Ridge(alpha = 0.1, normalize = True)\nridge.fit(x_train,y_train)\nridge_predict = ridge.predict(x_test)\nprint('Ridge score: ',ridge.score(x_test,y_test))","36edfc42":"from sklearn.linear_model import Lasso\n\nls = Lasso(alpha = 0.1, normalize = True)\nls.fit(x_train,y_train)\nls.predict(x_test)\nprint('Lasso score: ',ls.score(x_test,y_test))\nprint('Lasso coefficients: ',ls.coef_)","32dbfb7b":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nx_data = data.loc[:, data.columns != 'target']\ny = data.iloc[:,13].values\n#normalization of x \nx = (x_data - np.mean(x_data)) \/ (np.max(x_data) - np.min(x_data))\n\nx_train,x_test,y_train,y_test = train_test_split(x, y, test_size = 0.2, random_state = 1)\n\nrf = RandomForestClassifier(random_state = 42, n_estimators = 100)\nrf.fit(x_train,y_train)\ny_pred = rf.predict(x_test)\ny_true = y_test\ncm = confusion_matrix(y_true, y_pred)\nprint('Confusion matrix: \\n',cm)\nprint('Classification report: \\n',classification_report(y_test,y_pred))","4f99bde9":"sns.heatmap(cm, annot = True, linewidth = 0.5, linecolor = 'red')\nplt.show()","e0287a73":"from sklearn.metrics import roc_curve\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, classification_report","4b4dcaa9":"x_data = data.loc[:, data.columns != 'target']\ny = data.iloc[:,13].values\n#normalization of x \nx = (x_data - np.mean(x_data)) \/ (np.max(x_data) - np.min(x_data))\n\nx_train,x_test,y_train,y_test = train_test_split(x, y, test_size = 0.2, random_state = 1)","9c5d0ac2":"logistic = LogisticRegression()\nlogistic.fit(x_train, y_train)\ny_pred_prob = logistic.predict_proba(x_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\n\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC')\nplt.show()","bc2108d9":"x_data = data.loc[:, data.columns != 'target']\ny = data.iloc[:,13].values\n#normalization of x \nx = (x_data - np.mean(x_data)) \/ (np.max(x_data) - np.min(x_data))\n\nx_train,x_test,y_train,y_test = train_test_split(x, y, test_size = 0.2, random_state = 1)","cc9f2002":"from sklearn.svm import SVC\n\nsvm = SVC(random_state = 1)\nsvm.fit(x_train, y_train)","f5c226b5":"print(\"SVM accuracy: {}\".format(svm.score(x_test, y_test)))","c9a3a3f6":"R^2 score is very low, actually this dataset is not proper for linear regression.","1a21698b":"'target' attribute is class of our data. It defines the a person is target of heart disease or not.","9bd16925":"It has 303 entries and 14 attributes. The data type of the 13 attribute is integer and data type of 1 attribute is float.","136f4626":"<a id = \"8\" ><\/a>\n#### SVM - Support Vector Machine\n","b10d391f":"Cross validation score\n\n* K folds = K fold CV.\n* When K is increase, computationally cost is increase\n    cross_val_score(reg,x,y,cv=5): use reg(linear regression) with x and y that we define at above and K is 5. * It means 5 times(split, train,predict)\n","d2b59cd4":"Data is balanced.","c86fd4fd":"# INTRODUCTION\n \n In this kernel, I will explain both supervised and unsupervised machine leaarning algorithms.\n \n 1. [Load and Understand Data](#1)\n 1. [Supervised Learning](#2) \n     1. [k-NN (K Nearest Neighbour Algorithm)](#3)\n     1. [Regression](#4)  \n        1. [Linear Regression](#5)\n        1. [Regularized Regression](#6)\n        1. [Logistic Regression](#7)     \n     1. [SVM - Support Vector Machine  ](#4)   \n       ","00bd1297":"<a id = \"3\" ><\/a>\n### k-NN (K Nearest Neighbour Algorithm)","847cb0a8":"<a id = \"1\" ><\/a>\n## Load and Understand Data","e0b4d50b":"<a id = \"5\" ><\/a>\n#### Linear Regression\n\n\n    y = ax + b where y = target, x = feature and a = parameter of model\n    We choose parameter of model(a) according to minimum error function that is lost function\n    In linear regression we use Ordinary Least Square (OLS) as lost function.\n    OLS: sum all residuals but some positive and negative residuals can cancel each other so we sum of square of residuals. It is called OLS\n    Score: Score uses R^2 method that is ((y_pred - y_mean)^2 )\/(y_actual - y_mean)^2\n","2e63d674":"With k = 3 we reach score 0.83 but can we reach a better score with a different k value ?","73478d5d":"<a id = \"4\" ><\/a>\n### Regression","b53babee":"<a id = \"2\" ><\/a>\n## Supervised Learning","08073a3f":"<a id = \"7\" ><\/a>\n#### Logistic Regression\n","0594f898":"<a id = \"6\" ><\/a>\n#### Regularized Regression\n\nIn order to avoid overfitting, we use regularization that penalize large coefficients.\n\nRidge regression: First regularization technique. Also it is called L2 regularization.\n       *  Ridge regression lost fuction = OLS + alpha * sum(parameter^2)\n        alpha is parameter we need to choose to fit and predict. Picking alpha is similar to picking K in KNN. As you understand alpha is hyperparameter that we need to choose for best accuracy and model complexity. This process is called hyperparameter tuning.\n        What if alpha is zero? lost function = OLS so that is linear rigression :)\n        * If alpha is small that can cause overfitting\n        * If alpha is big that can cause underfitting. But do not ask what is small and big. These can be change from problem to problem.\n    \n Lasso regression: Second regularization technique. Also it is called L1 regularization.\n        * Lasso regression lost fuction = OLS + alpha * sum(absolute_value(parameter))\n        It can be used to select important features od the data. Because features whose values are not shrinked to zero, is chosen by lasso regression\n        In order to choose feature, I add new features in our regression data\n\n\n"}}