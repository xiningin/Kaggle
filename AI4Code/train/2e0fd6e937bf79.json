{"cell_type":{"28089490":"code","8b6fb47f":"code","56b15d7b":"code","1e89a8cc":"code","5f1c1bb3":"markdown","93182157":"markdown","26495d25":"markdown","92bd9874":"markdown","b16a2a3f":"markdown"},"source":{"28089490":"TRAIN_PATH = \"..\/input\/titanic\/train.csv\"\nTEST_PATH = \"..\/input\/titanic\/test.csv\"\nSAMPLE_SUBMISSION_PATH = \"..\/input\/titanic\/gender_submission.csv\"\nSUBMISSION_PATH = \"submission.csv\"\n\nID = \"PassengerId\"\nTARGET = \"Survived\"\n\nSEED = 123\nN_SPLITS = 5\nGRID_SEARCH_CV_NUM = 5\nSCORING = \"roc_auc\"","8b6fb47f":"# import module we'll need to import our custom module\nfrom shutil import copyfile\n\n# copy our file into the working directory (make sure it has .py suffix)\ncopyfile(src = \"..\/input\/titanic-preprocess\/titanic_preprocess_py.py\", \n         dst = \"..\/working\/titanic_preprocess_py.py\")\n\nfrom titanic_preprocess_py import *\n\ntrain,test = loadAndPreprocess(TRAIN_PATH,TEST_PATH)\ntrain.head()","56b15d7b":"from sklearn.model_selection import StratifiedKFold,cross_val_score,RandomizedSearchCV,GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier,StackingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import f1_score,recall_score,precision_score,roc_auc_score\nfrom xgboost import XGBClassifier\n\n# split data \ny = train[TARGET]\nX = train.drop([ID,TARGET],axis=1)\nX_test = test.drop([ID,TARGET],axis=1)\n\n# split train set and validation set\nstk = StratifiedKFold(n_splits=N_SPLITS,random_state=SEED,shuffle=True)\nfor train_index,val_index in stk.split(X,y):\n    X_train,y_train = X.iloc[train_index],y.iloc[train_index]\n    X_val,y_val = X.iloc[val_index],y.iloc[val_index]\n    \n    \n# build model     \nknn = KNeighborsClassifier()\nknn.fit(X_train,y_train)\npred_knn = knn.predict(X_val)\nprint(\"knn recall:\",round(recall_score(y_val,pred_knn),2))\nprint(\"knn precision:\",round(precision_score(y_val,pred_knn),2))\nprint(\"knn f1_score:\",round(f1_score(y_val,pred_knn),2))\nprint(\"knn rou_auc_score:\",round(roc_auc_score(y_val,pred_knn),2))\n\n# optimize model \nparams = {'algorithm': ['auto'], \n          'weights': ['uniform', 'distance'], \n          'leaf_size': range(1,30), \n          'n_neighbors': range(3,20)}\ngs =GridSearchCV(knn, param_grid = params, \n                 verbose=True, \n                 cv=GRID_SEARCH_CV_NUM, \n                 scoring = SCORING\n                )\ngs.fit(X_train, y_train)\nprint(gs.best_score_)\nprint(gs.best_estimator_)\nprint(gs.best_params_)\n\n# evaluate model\npred_val = gs.predict(X_val)\nprint(\"gs recall:\",round(recall_score(y_val,pred_val),2))\nprint(\"gs precision:\",round(precision_score(y_val,pred_val),2))\nprint(\"gs f1_score:\",round(f1_score(y_val,pred_val),2))\nprint(\"gs rou_auc_score:\",round(roc_auc_score(y_val,pred_val),2))","1e89a8cc":"sub = pd.read_csv(SAMPLE_SUBMISSION_PATH)\nsub[TARGET] = gs.predict(X_test).astype(int)\nsub.to_csv(SUBMISSION_PATH,index=False)\nsub.head(10)","5f1c1bb3":"# load and preprocess","93182157":"# build model","26495d25":"preprocess library path : https:\/\/www.kaggle.com\/rhythmcam\/titanic-preprocess","92bd9874":"# predict and make submission csv ","b16a2a3f":"# global variables"}}