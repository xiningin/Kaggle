{"cell_type":{"3a7bf31d":"code","de12b4ef":"code","9d49a0d7":"code","1bc0d7f1":"code","91cd2983":"code","0b3bb541":"code","93e81d3b":"code","98ec16aa":"code","62150412":"code","431ab458":"code","09c84705":"code","776fd326":"code","d1e9bee5":"code","bf0f6e37":"code","2fe0872a":"code","bef743d1":"code","313bb21a":"code","d9629295":"code","e5abd71f":"code","6330d54a":"code","c657bc81":"code","8f0b9e9d":"code","5ed8f08d":"code","8c26c4b3":"code","b8bd73c8":"code","ad135fe6":"code","63af74b8":"code","b9f463b9":"code","fa493af1":"code","1b6bfaf0":"code","3de802f4":"code","ba847d44":"code","22f01337":"markdown","0c9f2e60":"markdown","d7459421":"markdown","151ef724":"markdown","78d3ed84":"markdown"},"source":{"3a7bf31d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","de12b4ef":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","9d49a0d7":"data_set=pd.read_csv(\"..\/input\/yeastcsv\/yeast.csv\")\ndata_set","1bc0d7f1":"data_set.isna().sum()","91cd2983":"data_set.info()","0b3bb541":"sns.pairplot(data_set,hue=\"name\")","93e81d3b":"from sklearn.preprocessing import LabelEncoder\nname_encoder=LabelEncoder()\ndata_set[\"name\"]=name_encoder.fit_transform(data_set[\"name\"].values)","98ec16aa":"data_set.head(10)","62150412":"x=data_set.iloc[:,:-1].values\ny=data_set.iloc[:,-1].values","431ab458":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)","09c84705":"from sklearn.linear_model import LogisticRegression\nlog_classifier=LogisticRegression(max_iter=200)\nlog_classifier.fit(x_train,y_train)","776fd326":"plt.plot(x_train,y_train,\"r\")\nplt.plot(x_train,log_classifier.predict(x_train),\"b\")\nplt.title(\"Train Graph\")\nplt.show()","d1e9bee5":"plt.plot(x_test,y_test,\"r\")\nplt.plot(x_test,log_classifier.predict(x_test),\"b\")\nplt.title(\"Test Graph\")\nplt.show()","bf0f6e37":"print(\"Train Score:\",log_classifier.score(x_train,y_train))\nprint(\"Test Score:\",log_classifier.score(x_test,y_test))","2fe0872a":"from sklearn.svm import SVC\nsvc_classifier=SVC(kernel=\"rbf\",random_state=42)\nsvc_classifier.fit(x_train,y_train)","bef743d1":"plt.plot(x_train,y_train,\"r\")\nplt.plot(x_train,svc_classifier.predict(x_train),\"b\")\nplt.title(\"Train Graph\")\nplt.show()","313bb21a":"plt.plot(x_test,y_test,\"r\")\nplt.plot(x_test,svc_classifier.predict(x_test),\"b\")\nplt.title(\"Test Graph\")\nplt.show()","d9629295":"print(\"Train Score:\",svc_classifier.score(x_train,y_train))\nprint(\"Test Score:\",svc_classifier.score(x_test,y_test))","e5abd71f":"from sklearn.neighbors import KNeighborsClassifier\nknn_classifier=KNeighborsClassifier(metric=\"minkowski\",p=2)\nknn_classifier.fit(x_train,y_train)","6330d54a":"plt.plot(x_train,y_train,\"r\")\nplt.plot(x_train,knn_classifier.predict(x_train),\"b\")\nplt.title(\"Train Graph\")\nplt.show()","c657bc81":"plt.plot(x_test,y_test,\"r\")\nplt.plot(x_test,knn_classifier.predict(x_test),\"b\")\nplt.title(\"Test Graph\")\nplt.show()","8f0b9e9d":"print(\"Train Score:\",knn_classifier.score(x_train,y_train))\nprint(\"Test Score:\",knn_classifier.score(x_test,y_test))","5ed8f08d":"from sklearn.naive_bayes import GaussianNB\nbayes_classifier=GaussianNB()\nbayes_classifier.fit(x_train,y_train)","8c26c4b3":"plt.plot(x_train,y_train,\"r\")\nplt.plot(x_train,bayes_classifier.predict(x_train),\"b\")\nplt.title(\"Train Graph\")\nplt.show()","b8bd73c8":"plt.plot(x_test,y_test,\"r\")\nplt.plot(x_test,bayes_classifier.predict(x_test),\"b\")\nplt.title(\"Test Graph\")\nplt.show()","ad135fe6":"print(\"Train Score:\",bayes_classifier.score(x_train,y_train))\nprint(\"Test Score:\",bayes_classifier.score(x_test,y_test))","63af74b8":"from sklearn.tree import DecisionTreeClassifier\ntree_classifier=DecisionTreeClassifier(criterion=\"entropy\",random_state=42)\ntree_classifier.fit(x_train,y_train)","b9f463b9":"plt.plot(x_train,y_train,\"r\")\nplt.plot(x_train,tree_classifier.predict(x_train),\"b\")\nplt.title(\"Train Graph\")\nplt.show()","fa493af1":"plt.plot(x_test,y_test,\"r\")\nplt.plot(x_test,tree_classifier.predict(x_test),\"b\")\nplt.title(\"Test Graph\")\nplt.show()","1b6bfaf0":"print(\"Train Score:\",tree_classifier.score(x_train,y_train))\nprint(\"Test Score:\",tree_classifier.score(x_test,y_test))","3de802f4":"models=[\"Logistic Regression Train\",\"Logistic Regression Test\",\"SVC Train\",\"SVC Test\",\"KNN Train\",\"KNN Test\",\"Naive Bayes Train\",\"Naive Bayes Test\",\"Decision Tree Train\",\"Decision Tree Test\"]\nscores=[log_classifier.score(x_train,y_train),log_classifier.score(x_test,y_test),svc_classifier.score(x_train,y_train),svc_classifier.score(x_test,y_test),knn_classifier.score(x_train,y_train),knn_classifier.score(x_test,y_test),bayes_classifier.score(x_train,y_train),bayes_classifier.score(x_test,y_test),tree_classifier.score(x_train,y_train),tree_classifier.score(x_test,y_test)]","ba847d44":"plt.figure(figsize=(20,10))\nsns.barplot(x=scores,y=models)\nplt.xlabel(\"Scores\")\nplt.ylabel(\"Models\")\nplt.title(\"Models Vs Score\")\nplt.show()","22f01337":"## SVC","0c9f2e60":"## Naive Bayes","d7459421":"## KNN","151ef724":"## Logistic Regression","78d3ed84":"## Decision Tree"}}