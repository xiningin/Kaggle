{"cell_type":{"5c64b990":"code","49489210":"code","593091ac":"code","70f244f0":"code","3e95b271":"code","58235a16":"code","1cb18f88":"code","11f4dae9":"code","1dd711f7":"code","c8baa04f":"code","67b928a4":"code","77303ebb":"code","475f733e":"code","c95714d3":"code","58c4c03d":"code","0bef3579":"code","bddccbaf":"code","b9d70d22":"code","ebc64ea3":"code","be73b11e":"markdown","c74771f9":"markdown","dbe8aeb3":"markdown","e8ae54ee":"markdown","f994734d":"markdown","b1790b2e":"markdown","d091bc19":"markdown","263cf53a":"markdown","3e424a1b":"markdown","d7c4cff0":"markdown","f54931a6":"markdown"},"source":{"5c64b990":"from IPython.display import HTML\nf = open(\"..\/input\/notebookassets\/light_green.css\").read()\nHTML(f\"<style>{f}<\/style>\")","49489210":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport datetime\nfrom colorama import Fore, Style\nfrom math import floor, ceil\n\nimport plotly.express as px\nimport plotly.graph_objs as go\n\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\ntry:\n    import dabl\nexcept:\n    ! pip -q install dabl\n    import dabl\nplt.style.use('classic')","593091ac":"def cout(string: str, color: str) -> str:\n    \"\"\"\n    Prints a string in the required color\n    \"\"\"\n    print(color+string+Style.RESET_ALL)","70f244f0":"data = pd.read_csv(\"..\/input\/windows-store\/msft.csv\")\ndata.head()","3e95b271":"data.describe()","58235a16":"cout(f\"The Shape of the data is: {data.shape}\", Fore.CYAN)","1cb18f88":"cout(f\"There are: {int(data.isna().sum().any())} Nan Values in the Data\", Fore.GREEN)","11f4dae9":"data = data.dropna()","1dd711f7":"def clean_prices(string):\n    if string == \"Free\":\n        return \"F\"\n    else:\n        string = string.replace(',', '')\n        price = int(string[2:-3])\n        if price <= 250:\n            price = \"C\"\n        elif price <= 600 and price > 250:\n            price = \"VC\"\n        else:\n            price = \"VVC\"\n        return price\ndata['Price'] = data['Price'].apply(clean_prices)","c8baa04f":"targets = data['Price'].value_counts().tolist()\nvalues = list(dict(data['Price'].value_counts()).keys())\n\nfig = px.pie(\n    values=targets, \n    names=[\"Free\", \"Very Costly\", \"Costly\", \"Very Very Costly\"],\n    title='App Prices Distribution'\n)\nfig.show()","67b928a4":"# Pie Chart\ntargets = data['Rating'].value_counts().tolist()\nvalues = list(dict(data['Rating'].value_counts()).keys())\n\nfig = px.pie(\n    values=targets, \n    names=values,\n    title='App Ratings Distribution'\n)\nfig.show()","77303ebb":"# And it's Count Plot\ntargets = data['Rating'].value_counts().tolist()\nvalues = list(dict(data['Rating'].value_counts()).keys())\n\nfig = px.bar(\n    x=values,\n    y=targets,\n    color=values,\n    labels={'x':'Ratings', 'y':'Count'},\n    title=\"Ratings Count Distribution\"\n)\n\nfig.show()","475f733e":"data['Category'].unique()","c95714d3":"# Let's look at it's pie chart\ntargets = data['Category'].value_counts().tolist()\nvalues = list(dict(data['Category'].value_counts()).keys())\n\nfig = px.pie(\n    values=targets, \n    names=values,\n    title='Categories Distribution'\n)\nfig.show()","58c4c03d":"# And also it's count plot\ntargets = data['Category'].value_counts().tolist()\nvalues = list(dict(data['Category'].value_counts()).keys())\n\nfig = px.bar(\n    x=values,\n    y=targets,\n    color=values,\n    labels={'x':'Categories', 'y':'Count'},\n    title=\"Category Count Distribution\"\n)\n\nfig.show()","0bef3579":"mean_reviews = floor(data['No of people Rated'].mean())\nmax_rev = data['No of people Rated'].max()\nmin_rev = data['No of people Rated'].min()\nmax_reviews_apps = data[data['No of people Rated'] == data['No of people Rated'].max()]['Name'].tolist()\nmin_reviews_apps = data[data['No of people Rated'] == data['No of people Rated'].min()]['Name'].tolist()\n\ncout(f\"Average App reviews are: {mean_reviews}\", Fore.CYAN)\ncout(f\"Apps with most reviews are: {max_reviews_apps} having: {max_rev} reviews.\", Fore.BLUE)\ncout(f\"Apps with most reviews are: {min_reviews_apps} having: {min_rev} reviews.\", Fore.MAGENTA)","bddccbaf":"plt.rcParams['figure.figsize'] = (18, 6)\nplt.style.use('fivethirtyeight')\ndabl.plot(data, target_col = 'Price')","b9d70d22":"plt.rcParams['figure.figsize'] = (18, 6)\nplt.style.use('fivethirtyeight')\ndabl.plot(data, target_col = 'Category')","ebc64ea3":"plt.rcParams['figure.figsize'] = (18, 6)\nplt.style.use('fivethirtyeight')\ndabl.plot(data, target_col = 'Rating')","be73b11e":"## Category\nThere are 13 Categories of apps in the dataset:","c74771f9":"# Interactive EDA using Matplotlib and DABL on Windows Store Data!","dbe8aeb3":"## Let's Now DABL","e8ae54ee":"## Ratings\nThere are **9 unique app rating values**;\n- 3.5\n- 3.0\n- 2.0\n- 4.5\n- 4.0\n- 1.0\n- 2.5\n- 5.0\n- 1.5","f994734d":"Generally speaking, If an applications has more reviews, there are more chances of it having more downloads, so if that logic is correct then the applications in our dataset with more reviews will tend be more popular.","b1790b2e":"### Let's Visualize the Price Distribution of apps","d091bc19":"## Prices\nI am converting the prices from numbers into 4 categories:\n- F - Free Apps\n- C - Costly Apps (Apps costing less than 250 INR)\n- VC - Very Costly (Apps costing between 250 and 600 INR)\n- VVC  - Very Very Costly (Apps costing more than 600 INR)\n\nThis is my division of prices, you can subcatgorize it further if you want","263cf53a":"## Number of People Rated","3e424a1b":"A little utility function to print a string in provided color.\nFeel free to use \ud83d\ude01","d7c4cff0":"The thing is, DABL won't work really well since the data has both datetime objects and a lot of text data, which dabl can't handle very well for the time being.","f54931a6":"# EDA"}}