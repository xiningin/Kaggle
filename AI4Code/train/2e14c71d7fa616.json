{"cell_type":{"bfc76921":"code","ea4155a6":"code","9da72493":"code","4a4d4836":"code","f2b31128":"code","5967a9c6":"code","3b7c05f8":"code","dbda89a3":"code","f9154d7b":"code","7819fbcc":"code","edbae52b":"code","f1cb4e1c":"markdown","6592a8c8":"markdown","27fd39ba":"markdown","b71436ff":"markdown","3a4a26ab":"markdown","bd3428b4":"markdown","a27062b2":"markdown","817a51cc":"markdown","f17fbc56":"markdown","2efea76f":"markdown","26c4dbf4":"markdown"},"source":{"bfc76921":"import pandas as pd\n\n# Not limiting the column number when displaying dataframe\npd.set_option(\"display.max_columns\", None)","ea4155a6":"from sklearn import preprocessing\n\ndf = pd.read_csv(\"..\/input\/autism-screening\/Autism_Data.arff\", sep = r',', skipinitialspace = True)\n\ndf = df.fillna(0)\ndf = df.drop([\"A7_Score\"], axis = 1)\ndf = df.drop([\"used_app_before\"], axis = 1)\n\ndf = df.rename(columns = {\"austim\": \"autism\", \"contry_of_res\": \"country\"})\ndf = df.replace(\"yes\", 1)\ndf = df.replace(\"no\", 0)\ndf = df.replace(\"f\", 1)\ndf = df.replace(\"m\", 0)\ndf = df.replace(\"YES\", 1)\ndf = df.replace(\"NO\", 0)\ndf = df.replace(\"?\", 0)\n\n# Typecasting\ndf[\"ethnicity\"] = df[\"ethnicity\"].astype(str)\ndf[\"country\"] = df[\"country\"].astype(str)\ndf[\"age_desc\"] = df[\"age_desc\"].astype(str)\ndf[\"relation\"] = df[\"relation\"].astype(str)\n\n# Initializing Encoder\nnumber = preprocessing.LabelEncoder()\n\n# Encoding\ndf[\"ethnicity\"] = number.fit_transform(df[\"ethnicity\"])\ndf[\"country\"] = number.fit_transform(df[\"country\"])\ndf[\"age_desc\"] = number.fit_transform(df[\"age_desc\"])\ndf[\"relation\"] = number.fit_transform(df[\"relation\"])\n\ndf.head()","9da72493":"df.shape","4a4d4836":"X = df.drop([\"autism\"], axis = 1).values\ny = df[\"autism\"].values\n\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size = 0.25)","f2b31128":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","5967a9c6":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(solver = \"liblinear\")\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","3b7c05f8":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(multi_class = \"multinomial\", solver = \"newton-cg\")\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","dbda89a3":"from sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier(criterion = \"entropy\", max_depth = 5)\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","f9154d7b":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(criterion = \"entropy\")\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)","7819fbcc":"from sklearn.neighbors import KNeighborsClassifier\n\nmodel = KNeighborsClassifier(n_neighbors = 15)\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","edbae52b":"from sklearn.svm import SVC\n\nmodel = SVC(kernel = \"linear\", gamma = 0.1, C = 0.1)\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","f1cb4e1c":"#### **Scaling data**","6592a8c8":"#### **Defining X and y and Splitting data**","27fd39ba":"#### **Pre-Cleaning data**","b71436ff":"#### **Random Forest**","3a4a26ab":"#### **Loading and Displaying data**","bd3428b4":"#### **SVM**","a27062b2":"#### **KNN**","817a51cc":"# **Autism Prediction**","f17fbc56":"#### **Logistic Regression**","2efea76f":"#### **Multinomial Logistic Regression**","26c4dbf4":"#### **Decision Tree**"}}