{"cell_type":{"7cd5daea":"code","4761aef0":"code","0a1dd442":"code","52c3eb52":"code","98bf033c":"code","b3b2bc95":"code","123bc0d3":"code","b0338fc5":"markdown","d00333c2":"markdown","f98fac7c":"markdown","5bfc4e0e":"markdown","9bb206ce":"markdown","d17070fa":"markdown","39d41c59":"markdown"},"source":{"7cd5daea":"# capitalizing is the way to define a class in Python\nclass Car:\n    '''building out a car and model'''\n    \n    def __init__(self, brand, year):\n        '''Initialize car brand and year'''\n        self.brand = brand\n        self.year = year\n        \n    def drive(self):\n        '''Car is now driving'''\n        print(f\"{self.brand} is now driving\")\n        \n    def insane_mode(self):\n        '''Car is now using insane mode'''\n        print(f\"{self.brand} can now go insanely fast!\")","4761aef0":"my_car = Car('Tesla', 2020)\n# we can access attributes of Car instance with dot notation\n# which is my_car.brand which is the same as self.brand\nprint(f\"My car is a {my_car.brand}.\")\nprint(f\"My car is a {my_car.year} {my_car.brand}.\")","0a1dd442":"your_car = Car('BMW', 2020)\nprint(f\"Your car is a {your_car.year} {your_car.brand}.\")","52c3eb52":"# capitalizing is the way to define a class in Python\nclass Car:\n    '''building out a car and model'''\n    \n    def __init__(self, brand, model, year):\n        '''Initialize car brand and year'''\n        self.brand = brand\n        self.model = model\n        self.year = year\n        \n    def car_description(self):\n        '''Car description'''\n        full_car = f\"{self.year} {self.brand} {self.model}\"\n        \n        return full_car.title()\n        \ntotal_car = Car('BMW', 'series 4', 2019)\nprint(total_car.car_description())","98bf033c":"# capitalizing is the way to define a class in Python\nclass Car:\n    '''building out a car and model'''\n    \n    def __init__(self, brand, model):\n        '''Initialize car brand and year'''\n        self.brand = brand\n        self.model = model\n        # set the default year\n        self.year = 2020\n        \n    def car_description(self):\n        '''Car description'''\n        full_car = f\"{self.brand} {self.model}\"\n        \n        return full_car.title()\n        \n    def car_year(self):\n        '''print car year'''\n        print(f\"{self.year}\")\n        \ntotal_car = Car('BMW', 'series 4')\nprint(total_car.car_description())\ntotal_car.car_year()","b3b2bc95":"total_car.year = 2021\ntotal_car.car_year()","123bc0d3":"# capitalizing is the way to define a class in Python\nclass Car:\n    '''building out a car and model'''\n    \n    def __init__(self, brand, model):\n        '''Initialize car brand and year'''\n        self.brand = brand\n        self.model = model\n        # set the default year\n        self.year = 2020\n        \n    def car_description(self):\n        '''Car description'''\n        full_car = f\"{self.brand} {self.model}\"\n        \n        return full_car.title()\n        \n    def car_year(self):\n        '''print car year'''\n        print(f\"{self.year}\")\n        \n    def update_year(self, new_year):\n        '''set new year'''\n        self.car_year = new_year\n        \ntotal_car = Car('BMW', 'series 4')\nprint(total_car.car_description())\n\ntotal_car.update_year(2022)\ntotal_car.car_year","b0338fc5":"Working with Classes and Instances","d00333c2":"# Creating a Class in Python\n\nCreating a class using our car examples","f98fac7c":"# Modifying an Attribute's Value","5bfc4e0e":"# Modifying an Attribute's Value Through a Method","9bb206ce":"**Car** - in capitialization is how to define a class\n\n**__init__()** - this is a spectial method in Python. It will run automatically whenever we create a new instance of our class. \n\nThis method has two leading underscores and two trailing underscores, a convention that helps prevent Python\u2019s default method names from conflicting with your method names. If you only use one underscore on each side it will not be called automatically!\n\n__init__(self, brand, year) - We definied our method to have three parameters: self, brand and year. \n\nself - this parameter is required by method definition in Python and must come first. This is important: *Every method call associated with an instance automatically passes self, which is a reference to the instance itself; it gives the individual instance access to the attributes and methods in the class.*\n\n**self.brand = brand and self.year** = year - are attributes. The self.brand and self.year takes the value associated with the parameter, brand and year, and assignes it to the variable, brand and year which is then attached to the instance being created. ","d17070fa":"Set a default value for an attribute","39d41c59":"# Making an Instance from a Class"}}