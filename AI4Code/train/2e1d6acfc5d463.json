{"cell_type":{"bbf27b02":"code","54dbdfc5":"code","c8ba05b9":"code","0540515f":"code","8a29d7b0":"code","aac530f7":"code","0e78e37d":"code","7e78ce8a":"code","46555e04":"code","6c3cc82a":"code","3a60046f":"code","0ab5fe11":"code","4eeee653":"code","b39a1575":"code","d7006652":"code","1f7f66ad":"code","b2fe02e4":"code","2527a58b":"code","768888b5":"code","89e01f0c":"code","dee9892d":"code","d29fa9d2":"code","cf2865ca":"code","066e7a11":"code","2b2b35e4":"code","5f79e9b1":"code","47f2d82d":"code","4c62282a":"code","cd8e018d":"code","9c9e92a2":"code","540fa4ec":"code","64276f1c":"code","a4e715f8":"code","ba1d8f90":"markdown","80a03070":"markdown","74978761":"markdown","528d46c7":"markdown","0fb37c1e":"markdown","34f0d457":"markdown","84dab718":"markdown","a8ff9e45":"markdown","eada6889":"markdown","769fb1c7":"markdown","17c742f5":"markdown","e54a040f":"markdown","2761d5eb":"markdown"},"source":{"bbf27b02":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nfrom pandas.tools.plotting import parallel_coordinates\n\n# seaborn library\nimport seaborn as sns\n\n# plotly library\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","54dbdfc5":"data = pd.read_csv('..\/input\/column_2C_weka.csv')\ndata.head()","c8ba05b9":"data.info()","0540515f":"data['class'].value_counts()","8a29d7b0":"x_data = data.drop(['class'], axis=1)\nx_data.head()","aac530f7":"from sklearn import preprocessing\nx = preprocessing.normalize(x_data)\nx","0e78e37d":"y = data['class'].values","7e78ce8a":"# concatenate normalized x_data with class feature of data \ndata_new = pd.concat([pd.DataFrame(x), data['class']], axis=1)","46555e04":"data_new.head()","6c3cc82a":"sns.countplot(x=\"class\", data=data)","3a60046f":"data.columns","0ab5fe11":"data_new.columns = data.columns","4eeee653":"data_new.head()","b39a1575":"# Make the plot\nplt.figure(figsize=(15,10))\nparallel_coordinates(data_new, 'class', colormap=plt.get_cmap(\"Set1\"))\nplt.title(\"class visualization according to Abnormal and Normal\")\nplt.xlabel(\"Features of data set\")\nplt.ylabel(\"value\")\nplt.savefig('graph.png')\nplt.show()","d7006652":"sns.swarmplot(x=\"class\", y='degree_spondylolisthesis', data=data)\nplt.show()","1f7f66ad":"data_new.shape","b2fe02e4":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = np.arange(0,310),\n                    y = data_new[data_new['class']=='Abnormal'].degree_spondylolisthesis,\n                    mode = \"markers\",\n                    name = \"Abnormal\",\n                    marker = dict(color = 'rgba(0, 128, 255, 0.8)'),\n                    text= data_new['class'])\n# creating trace2\ntrace2 =go.Scatter(\n                    x = np.arange(0,310),\n                    y = data_new[data_new['class']=='Normal'].degree_spondylolisthesis,\n                    mode = \"markers\",\n                    name = \"Normal\",\n                    marker = dict(color = 'rgba(255, 128, 200, 0.8)'),\n                    text= data_new['class'])\n\ndata = [trace1, trace2]\nlayout = dict(title = 'degree_spondylolisthesis',\n              xaxis= dict(title= 'index',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Values',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","2527a58b":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = np.arange(0,310),\n                    y = data_new[data_new['class']=='Abnormal'].pelvic_radius,\n                    mode = \"markers\",\n                    name = \"Abnormal\",\n                    marker = dict(color = 'rgba(0, 255, 255, 0.8)'),\n                    text= data_new['class'])\n# creating trace2\ntrace2 =go.Scatter(\n                    x = np.arange(0,310),\n                    y = data_new[data_new['class']=='Normal'].pelvic_radius,\n                    mode = \"markers\",\n                    name = \"Normal\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= data_new['class'])\n\ndata = [trace1, trace2]\nlayout = dict(title = 'pelvic_radius',\n              xaxis= dict(title= 'index',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Values',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","768888b5":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = np.arange(0,310),\n                    y = data_new[data_new['class']=='Abnormal'].sacral_slope,\n                    mode = \"markers\",\n                    name = \"Abnormal\",\n                    marker = dict(color = 'rgba(0, 100, 255, 0.8)'),\n                    text= data_new['class'])\n# creating trace2\ntrace2 =go.Scatter(\n                    x = np.arange(0,310),\n                    y = data_new[data_new['class']=='Normal'].sacral_slope,\n                    mode = \"markers\",\n                    name = \"Normal\",\n                    marker = dict(color = 'rgba(100, 128, 2, 0.8)'),\n                    text= data_new['class'])\n\ndata = [trace1, trace2]\nlayout = dict(title = 'sacral_slope',\n              xaxis= dict(title= 'index',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Values',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","89e01f0c":"data_new.columns","dee9892d":"# import figure factory\nimport plotly.figure_factory as ff\n\ndata_matrix = data_new.loc[:,[\"pelvic_incidence\",\"pelvic_tilt numeric\", \"lumbar_lordosis_angle\", 'sacral_slope','pelvic_radius','degree_spondylolisthesis']]\ndata_matrix[\"index\"] = np.arange(1,len(data_matrix)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data_matrix, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","d29fa9d2":"data_new.head()","cf2865ca":"data_new['class'] = [1 if i=='Abnormal' else 0 for i in data_new['class']]","066e7a11":"y = data_new['class'].values","2b2b35e4":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state=1)","5f79e9b1":"# KNN\nfrom sklearn.neighbors import KNeighborsClassifier \nknn = KNeighborsClassifier(n_neighbors = 3) # randomly selected\nknn.fit(x_train, y_train)\nprediction = knn.predict(x_test)","47f2d82d":"prediction","4c62282a":"# check prediction results with actual correct values, that is, y_test\ny_test","cd8e018d":"print('{} NN score: {}'.format(3,knn.score(x_test,y_test)))","9c9e92a2":"y_test.shape # total number of zeros and ones","540fa4ec":"62*knn.score(x_test,y_test) # number of correct results out of 114","64276f1c":"# find the optimum k value (range is from 1 to 30)\nscore_list = []\nfor i in range(1,30):\n    knn2 = KNeighborsClassifier(n_neighbors = i) # n_neighbors is our k value\n    knn2.fit(x_train, y_train)\n    score_list.append(knn2.score(x_test,y_test))\n\nplt.figure(figsize=(10,7))\nplt.plot(range(1,30),score_list)\nplt.xlabel('k values')\nplt.ylabel('accuracy')\nplt.show()","a4e715f8":"# find the optimum k value (range is from 1 to 62)\nscore_list = []\nfor i in range(1,62):\n    knn2 = KNeighborsClassifier(n_neighbors = i) # n_neighbors is our k value\n    knn2.fit(x_train, y_train)\n    score_list.append(knn2.score(x_test,y_test))\n\nplt.figure(figsize=(10,7))\nplt.plot(range(1,62),score_list)\nplt.xlabel('k values')\nplt.ylabel('accuracy')\nplt.show()","ba1d8f90":"**Swarm Plot**","80a03070":"**Normalize data **","74978761":"**train test plot**\n\nLets first split data into two parts","528d46c7":"**Value Counts**","0fb37c1e":"**KNN Algorith**","34f0d457":"**Scatter plot using sacral_slope feature**","84dab718":"**Parallel Coordinates**","a8ff9e45":"We see that it is difficult to distinguish data in terms of class labels using features of the data. Abnormal and Normal datasets show almost the same characteristics. ","eada6889":"**Scatter plot using degree_spondylolisthesis feature**","769fb1c7":"We see that when index is greater than 100 we have only Abnormal data values. On the other hand, for index values smaller than 100, it is difficult to distinguish datas.","17c742f5":"# Conclusion\n- we see that for k = 15 we have obtained the most accurate results\n- until k = 15 the accuray level increases, however then it starts to decrease dramatically\n- it can be inferred that k value should not be small or high values.   ","e54a040f":"**Scatter Matrix Plot**","2761d5eb":"**Scatter plot using pelvic_radius feature**"}}